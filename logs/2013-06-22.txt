--- Log opened Sat Jun 22 00:00:08 2013
00:29 < jdelgado> Anyone have a graceful way to shutdown a node server? Rather than just pulling the plug
00:29 < jdelgado> Looking to execute a function first.
00:30 < jdelgado> Ah, nevermind. Listener even .on exit. :)
00:37 < Beg> What password authentication middleware would you guys recommend? (might have asked this before, sorry)
00:37 < jdelgado> postal
00:37 < jdelgado> err
00:37 < jdelgado> passport*
00:43 < Guest41274> hello
00:53 < oreth> running a regex match
00:53 < oreth> it matches
00:53 < Guest41274> anyone able to help me out with browserify?
00:53 < oreth> when console.log(matches) i get an array
00:54 < oreth> but when i do matches[0] i get " TypeError: Cannot read property '0' of null"
00:54 < oreth> it should be a simple string match, but i can't access just the string
00:55 < rawtaz> hi there. question has anyone done anything like using PDFlib (.com) with node? i am not aware of a node.js port of it, so im curious what people have done to make a similar solution
00:56 < Stumbler> rawtaz, are you looking to generate new pdfs, or manipulate existing pdfs?
00:57 < rawtaz> generate new ones
00:57 < rawtaz> and i need a lot of features, whcih pdflib provides
00:57 < Stumbler> ah, gotcha. well, I ran across pdfkit a few days ago. its still a little young, but it does handle a lot of common tasks
00:57 < rawtaz> i believe iText would provide them too, but i have used PDFlib before and also have bad experiences with the iText company so, thats why im focusing on PDFlib :)
00:58 < rawtaz> oh, checking :)
00:58 < Stumbler> http://pdfkit.org/
00:58 < rawtaz> actually have a system running already which makes good use of pdflib, so porting would be a task.
00:58 < rawtaz> but im definately looking at this right now. there's not a lot of libs that provide good features
01:00 < rawtaz> Stumbler: looks like the text has metric kerning applied, do you know for a fact that it support kerning? do you happen to know whether it supports class based kerning tables?
01:01 < Stumbler> I havnt been able to find any really 'great' libs for node.  I didnt go to the ends of the earth looking or anything, but they seem to be a little sparse or imature for the most part
01:01 < rawtaz> i guess yeah
01:01 < rawtaz> too early :)
01:01 < rawtaz> one could of course build a system where the pdf generation is done by some other backend but...
01:02 < Stumbler> and to be honest, I don't really know. my PDF needs are much less than yours, so I'm not sure about all of the features.  All I've ever had to do was pagify and sort pdf documents.
01:03 < Stumbler> which I ended up using sips and imagemagick for in the end
01:03 < oreth> bleh figured it out
01:03 < Stumbler> just thought that link might point you in some direction.
01:03 < oreth> i'm an idiot
01:03 < rawtaz> Stumbler: yeah, no problem. thanks a lot!
01:03 < Stumbler> :)
01:04 < rawtaz> why sips AND imagemagick, what does sips do?
01:05 < Stumbler> haha, well, Its a little convoluted, and a complete mess right now.   my project is in a dozen pieces and I havnt gotten around to refactoring out what I don't need. I just know that I ran into a quality problem with imagemagick, and sips was handy enough to fix it on the fly without much fuss
01:06 < rawtaz> i see
01:06 < rawtaz> so maybe youll rip out IM entirely then
01:06 < Stumbler> I'm doing some barcode reading.  I use sips to convert the pdfs to png, and then I do some processing with imagemagick
01:07 < Stumbler> that initial conversion, I don't know why, but if I convert with IM, it breaks my barcode scanner.
01:07 < Stumbler> sips doesnt, I'll figure it out when I have time, but I'm just using what works for now
01:07 < rawtaz> i c
01:13 <@isaacbw> be cool and use gegl
01:13 <@isaacbw> I worked on gegl for a little bit
01:16 <@isaacbw> it's basically gimp's image processing backend
01:16 <@isaacbw> so using it as a library gives you a programmable gimp more or less
01:17 < rawtaz> :o
01:17 < rawtaz> cool
01:18 <@isaacbw> but it's also written with gobject, which is for crazy people
01:21 < rawtaz> hehe i see your point :D
01:27 < jesusabdullah> isaacbw: what if you use it with vala?
01:28 < jesusabdullah> what they *should* do is make the gobject bindings in gjs less terrible
01:28 < jesusabdullah> and then fucking replace metacity already
01:30 < ningu> metacity the window manager?
01:30 < ningu> people still use that?
01:31 < jesusabdullah> ningu: gnome 3 uses a fork of it
01:31 < jesusabdullah> ningu: but the themes are still metacity-based
01:32 < jesusabdullah> ningu: and hoo lee shit are metacity themes a pain in the ass
01:32 < ningu> I haven't used gnome in forever, but the more I read about it, the less I want to
01:32 < jesusabdullah> ningu: on the plus side, gnome shell is written in javascript
01:32 < MitchW_> everyone who still uses Gnome 2.x, Gnome 3.x uses Mutter, which started as a fork of Metacity (migrated to the clutter framework) - but still shares a fair bit of the metacity code
01:32 < jesusabdullah> ningu: on the minus side, metacity themes are fucking broken
01:32 < jesusabdullah> ningu: and so's tweaking
01:32 < jesusabdullah> MitchW_: they still use metacity themes with clutter, no?
01:33 < MitchW_> yup, Mutter is still very much metacity in many ways - and thus still uses the same themes
01:33 < jesusabdullah> MitchW_: and by clutter I mean mutter
01:33 < jesusabdullah> yeah, metacity themes are heinous
01:33 < jesusabdullah> I bet enlightenment themes were cool
01:33 < jesusabdullah> we should just have enlightenment themes again
01:33 < xanadu> anyone able to hazard a guess for why Forever does its job perfectly, but if asked to do logging (forever -l forever.log -o out.log
01:33 < xanadu> -e err.log /home/ec2-user/projects/node_apps/hello/app.js) it will hang up on SSH session logout?
01:34 < jesusabdullah> xanadu: you're forgetting the start in there, no?
01:34 < xanadu> fuuuuuuuuuuuuuuuuu
01:34 < jesusabdullah> xanadu: if it doesn't daemonize it will hup on logout like anything else
01:34 < xanadu> haha awesome - thanks
01:34 < jesusabdullah> yw
01:35 < xanadu> I'm going to go slam my head into something sturdy now
01:35 < jesusabdullah> lolol
01:35 < jesusabdullah> could be worse xanadu 
01:35 < jesusabdullah> could be that forever was broken somehow, again
01:36 < xanadu> is that a common problem?
01:36 < jesusabdullah> I used to triage forever issues, there always seemed to be some kind of options parsing snafu for some reason, maybe not so bad now
01:39 < xanadu> do you still use Forever or are you a nohup whiz now?
01:39 < ningu> forever does more than just nohup
01:40 < xanadu> yeah, so I'm told
01:40 < xanadu> I'm not a good enough dev to know the details, I know that it handles stuff I don't know about :)
01:42 < ningu> xanadu: it will restart your app if it crashes
01:44 < xanadu> will it successfully apologize to my wife if I curse when my code breaks thereby waking my son in order to keep us blissfully married forever? now THAT would be a service named Forever that I could get behind
01:48 < mmalecki> xanadu: I can assure you that we are working on it
01:57 < Stephen> Made something cool today with noVNC, node-rfb2, and a node portscanner I wrote.
02:41 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
02:56 < neeky> is anyone using connect sessions with express?  I either have a middleware order issue, or I'm just an idiot, but session cookies just arent working
02:56 < neeky> they work 1/20 times
03:00 < ningu> neeky: I've never had an issue
03:01 < ningu> http://pastebin.com/ZyEEnMVx
03:02 < neeky> ningu, its not clear in the docs that the secret is required in both cookieParser AND the session
03:02 < neeky> is that the case?
03:02 < ningu> I think so
03:02 < ningu> not sure
03:14 < rud> anyone alive willing to help me understand something about async ? like, if i'm running tasks in series, how may i pass the result of one method to another .. 
03:14 < ningu> rud: you might look into the waterfall method in caolan's async module
03:15 < rud> ningu: ah
03:15 < ripplebit> guys when should i use node.js?
03:15 < mscdex> always and forever!
03:16 < ningu> every other monday
03:16 < mscdex> plus mondays
03:16 < rud> will do right now.. trying to do simple thing like : 1) fetch model1  2) attempt auth against model1 3a) if auth fails, fetch model2 4) attempt auth on model2 .. 3b) if auth success ... 
03:16 < ningu> rud: if you are using express you can create a chain of handlers, that can be nice
03:17 < rud> i indeed am (3.x), hmm
03:17 < ningu> you need to break things up into methods
03:17 < rud> already done
03:17 < ningu> but you can do app.get('/foo', a, b, c, d);
03:17 < ningu> or whatever
03:17 < rud> they all accept a callback as first arg, than arguments
03:17 < rud> hmm
03:17 < ningu> usually cb is last argument
03:17 < rud> oh, i can do that too, hehe
03:17 < myndzi> i'm using q.nbind on a mysql db.query function and in this one spot it's for some reason returning an array with two items as the first parameter
03:17 < ningu> I guess it doesn't matter that much
03:18 < rud> i have it all broken down in atomic methods, just missing how to glue things together
03:18 < myndzi> one item is the query results, and the other is (i have no idea)
03:18 < neeky> ningu, putting a  secret in cookieparser and session creates both session cookies and signed clinet cookies
03:18 < myndzi> but in other places it behaves as expected
03:18 < myndzi> any thoughts?
03:18 < rud> ningu: this what i'm trying to get away from: https://github.com/kelexel/node-opensmtpd/blob/master/lib/auth.js
03:19 < ningu> rud: have you read callbackhell.com?
03:19 < rud> i just broke it down to one model-fetching method, and one auth-challenge method, now need to "drive" them to run the process across 3 models
03:19 < rud> nope, i'm a newb :)
03:19 < rud> will do
03:20 < myndzi> ah, right, it's the third callback parameter
03:20 < myndzi> it seems like nbind isn't applying the parameters properly
03:21 < rud> ningu: <3, definitely the kind of reading i needed :)
03:23 < heath> https://gist.github.com/heath/5835714
03:26 < myndzi> aha, i misread the code
03:26 < myndzi> i wonder why he wouldn't use apply?
03:59 < Beck21> is the new preferred way to collect data from a ReadableStream to use the readable event?
04:01 < Beck21> the documentation reitterates "Stream An "old style" readable stream"
04:01 < ningu> Beck21: you can use either way as you prefer
04:03 < Beck21> ningue: I wasn't for sure if they were trying to head in a new direction. I'm taking a look at NodeJS for the first time and running through some outdated examples.
04:03 < ningu> they are making it possible to do it in a way that was not possible before
04:03 < ningu> but the old way is still fine
04:08 < Beck21> is it possible to read data even if there isn't anything returned from a GET?
04:08 < Beck21> I have a function that makes an http request but doesn't return anything and I can't end the connection until something is returned.
04:09 < Beck21> "then you must consume the data from the response object"
04:10 <@tjfontaine> response.resume() or response.on('data') style
04:11 < Beck21> the .on('data') works but I was hoping to use the response.read();
04:13 < olalonde> mornin' Node.js
04:14 < olalonde> i had async dreams yesterday
04:14 < olalonde> like it was black most of the time and every few minutes a whole dream flashed in front of me
04:15 < olalonde> is this normal?
04:17 < Zolmeister> well, its better than the blocking nightmare I had. Just sat in a room and stared at a clock.
04:18 <@tjfontaine> not as bad as theEINTR
04:18 < olalonde> poor you
04:19 < olalonde> blocking nightmares are the worse
04:30 < Stephen> Herobrine
04:54 < neeky> Basic Authentication requires every request to be authenticated: as in, check username and password. 
04:55 < neeky> If Im sotring password as pbkdf2 hashes with 128 bit keys, and 10000 hash iterations, is that going to just crush my server after like 5 users?
04:55 < Zolmeister> neeky: but why? just use bcrypt
04:56 < neeky> crypt is built in
04:56 < neeky> and I'm doing the same thing
04:56 < gkatsev> pbkdf2 works differently from bcrypt. For storing passwords, bcrypt is preferable.
04:57 < gkatsev> don't forget to salt your hashes
04:57 < Zolmeister> uniquely for each password
04:57 < gkatsev> also, if you are set on using pbkdf2, randomize the iteration cycle as well.
04:57 < neeky> the question is whther every request being hashed, whether bcrypt or pbkdf2, is computationally impractical
04:57 < neeky> the salt is the 128 bit key I referred to
04:57 < gkatsev> you only need to do it every time the user logs in, no?
04:57 < neeky> i typed key but meant salt
04:57 < Zolmeister> hes using basic auth
04:58 < gkatsev> ah
04:58 < neeky> gkatsev, basic auth does it every http call
04:58 < neeky> which is actually 2-3 times per request
04:58 < gkatsev> right
04:59 < neeky> I guess I can overload subclass connect's basic auth to check for a session id first
04:59 < Zolmeister> or just use sessions
04:59 < neeky> and skip it if it exists
04:59 < olalonde> has anyone tried writing purely functional javascript?
04:59 < gkatsev> you can't
04:59 < neeky> Zolmeister, that's what I mean by check session id
05:00 < gkatsev> you can write functional js. But it wont be pure.
05:00 < Zolmeister> neeky: I mean you should get rid of basic auth
05:00 < neeky> and I guess I can ditch basic auth for my own auth scheme
05:00 < olalonde> ok
05:00 < neeky> yeah
05:00 < olalonde> gkatsev: why not? because of I/O ?
05:00 < gkatsev> yes
05:00 < gkatsev> also, some methods mutate inherently
05:00 < gkatsev> but you can write mostly functional js
05:00 < olalonde> ok
05:00 < gkatsev> that's what I do
05:01 < olalonde> im considering trying that for a library im working on
05:01 < olalonde> not sure I will be able though
05:01 < olalonde> what rules should I follow to make sure im writing in a functional style?
05:01 < olalonde> is it ok to modify local variables in functions?
05:04 < gkatsev> in functinoal code, functions usually take inputs and return new outputs rather than modifying the input.
05:04 < gkatsev> mutation definitely isn't very functional
05:06 < olalonde> ok
05:06 < olalonde> so if i wanted to order an array in theory, i should return a new array right?
05:06 < gkatsev> the internal implementation of a function may need to mutate the variables inside of it.
05:06 < gkatsev> olalonde: yes
05:08 < olalonde> is memoization possible in functional programming?
05:08 < gkatsev> sure
05:09 < olalonde> but how do you implement memoization without keeping some sort of state :o
05:09 < gkatsev> you keep state
05:09 < gkatsev> it just lives in a closure :)
05:10 < olalonde> ah ok
05:10 < olalonde> so it's ok to have state in a closure ?
05:10 < gkatsev> or perhaps you create a memoization monad
05:11 < gkatsev> data structures still exist in FP
05:11 < gkatsev> you just keep and access those structures in different ways.
05:11 < olalonde> right
05:12 < olalonde> let's say you have a cache… in OOP you would have cache.put(obj) and cache.get(obj). if you call cache.get(obj) before and after cache.put you get a different return value
05:13 < olalonde> so there is some state mutation right
05:13 < olalonde> but wouldn't that be forbidden in functional programming?
05:13 < gkatsev> right, so instead of cache.get and cache.put you have a addCache(oldCache) and getFromCache(cache, arg);
05:13 < olalonde> ah i see
05:14 < olalonde> but then i have to pass around my cache kind of everywhere?
05:14 < gkatsev> yes
05:15 < olalonde> :( i think i might not be ready for that yet haha
05:15 < olalonde> might cheat on the cache
05:15 < Technodrome> how many of you guys do callbacks inside of callbacks?
05:15  * gkatsev raises hand
05:15 < olalonde> Technodrome: a lot :)
05:15 < Technodrome> yeah
05:15 < Technodrome> some people are against it 
05:16 < olalonde> which people? why?
05:16 < gkatsev> though, I do try and avoid the pyramid of doooooom
05:16 < olalonde> what some people are against is nesting your callbacks many levels deep in the source code
05:16 < gkatsev> some people are against anything
05:16 < olalonde> when your tab is 100 spaces, it's about time you consider async or something :)
05:16 < Technodrome> but in a language like js, you almost have to 
05:17 < mscdex> 2 space indent is enough for anyone
05:17 < mscdex> -- bill gates
05:17 < olalonde> lol
05:18 < gkatsev> mscdex: '2 space indent is more than anyone will ever need' ftfy
05:22 < jfisk19871> hey guys
05:23 < jfisk19871> im a newbie, reading this answer abotu using embedded comments and was wondering if i go that route with a similar example as the OP gives, how would i access the comment?
05:23 < jfisk19871> http://stackoverflow.com/questions/5373198/a-simple-mongodb-question-embed-or-reference
05:26 < neeky> my frequently broken rule of thumb is > nested callbacks and I need to start thinking about a different way to skin that cat
05:26 < neeky> > 3
05:26 < jfisk19871> k
05:27 < jfisk19871> and a related q, lets say i have a bunch of users that can send each other messages
05:27 < jfisk19871> i would want a reference to that message on both of my user documents
05:27 < neeky> that wasn't an answer to your question, btw
05:27 < jfisk19871> so im assuming in this case, it would be best to have a messages collection
05:27 < jfisk19871> ah ok sorry missed the context :)
05:28 < neeky> jfisk19871, you could do that - or use and ORM ike mongoose that adds all that sugar to mongo for you
05:29 < neeky> so you'd have a comments table and reference comments in you user table as an array of comment ids
05:29 < neeky> and reference them in the question table the same way
05:30 < jfisk19871> neeky: yeah what i was thinking. Just want to make sure i wasnt doing something when theres some amazing feature X to make my life easier
05:30 < jfisk19871> what does ORM stand for?
05:30 < neeky> in mongoose, you then just call 'populate' on your query, and poof, you get a fully populated document with all references resolved
05:30 < neeky> Object Relational MApping
05:31 < jfisk19871> oh cool
05:31 < jfisk19871> ill probably dive into that when im more comfortable with mongo
05:31 < neeky> in mongoose i think it's called object relational modeling
05:32 < neeky> to most peoples'd disgust, mongoose typically used to rdbms-ify an object or document based data store
05:32 < neeky> like mongo, counch, etc
05:42 < heath> when would you use the `net` module instead of the `http` module and vice versa?
06:01 < olalonde> heath: I think HTTP is a specialization of the net module with methods for handling the http protocol
06:01 < gkatsev> sounds right
06:01 < olalonde> net would be used if you want to use a different protocol than HTTP
06:02 < gkatsev> if you need raw TCP stuff, use net. If just http will suffice, use http
06:02 < olalonde> like your own protocol for example
06:02 < olalonde> time for bed gkatsev 
06:02 < olalonde> :D
06:02 < gkatsev> yes :D
06:02 < gkatsev> in the process
06:02 < gkatsev> shutting down.
06:02 < olalonde> make sure  you dont have any queued callbacks 
06:02 < olalonde> before booting off
06:03 < gkatsev> yep
06:10 < jfisk19871> hmm
06:11 < nohimn> hello all
06:11 < krunc> anyone using postgres as their nosql?
06:11 < nohimn> yes, I am
06:12 < olalonde> haha
06:12 < krunc> I'm trying to run it on a 512mb vps, think that'll do, or not enough?
06:12 < krunc> its for a small project
06:12 < olalonde> why "as their nosql"?
06:12 < nohimn> it's a fantastic nosql db
06:12 < nohimn> nosql at all
06:12 < olalonde> haha
06:12 < olalonde> guess there is a json extension
06:12 < krunc> olalonde: well I was just brought to attention that postgres does have the ability to work as a nosql... and I'm looking at replacing mongo
06:13 < olalonde> Hstore right
06:13 < krunc> nohimn: I'm just guessing postgres is gonna se a lot more memory than mongo... but think I can manage?... its gonna initially be pretty low scale, literall maybe 20 MB of data
06:14 < krunc> I've had lots of MySQL experience, and ever since oracle bought it, I;ve been wanting to give it a shot... but my current project calls for a nosql database much more than a sql one
06:14 < olalonde> krunc: if you want a NoSQL you are probably better off with an actual NoSQL
06:14 < olalonde> krunc: postgresql is first built to be a SQL
06:14 < nohimn> yeah, just because it supports JSON as a datatype doesn't exactly make it a nosql
06:14 < krunc> olalonde: Ive heard fantastic things abot postgres
06:14 < nohimn> a "document store" lol
06:14 < nohimn> postgres is fantastic
06:15 < olalonde> krunc: the fantastic things you heard were not related to NoSQL most likely
06:15 < nohimn> but you have to choose your DB depending on your data requirements
06:15 < olalonde> it is a fantastic SQL database indeed
06:15 < josephg> ... what websocket library does everyone use? I'm used to using ws, but its 6 months old in npm
06:15 < krunc> nohimn: well, if my server can handle it, being able to do SQL on top of NoSQ may be super helpful for me
06:15 < krunc> josephg: I;ve been using socket.io
06:15 < nohimn> socket.io
06:15 < josephg> gross. socket.io isn't a websocket library, and its buggy.
06:15 < olalonde> i personally use postgres but not "as a nosql" haha
06:16 < josephg> at least, it was a year or so ago when I wanted to put it in production
06:16 < olalonde> krunc: well on Heroku you get a small postgres for free
06:16 < josephg> (eg, it would deliver messages out of order on the server, or deliver messages after emitting a socket close event)
06:17 < krunc> josephg: well I'm a beginner with sockets TBH, so definitely interested if there are other recommendation
06:17 < krunc> josephg: someone in here recommen sock + shoe once to me
06:17 < nohimn> socket.io kinda sucks without a redis store
06:18 < nohimn> it can't handle clustering at all without it
06:18 < josephg> yeah - I've had a good experience with sockjs
06:18 < josephg> a couple years ago I ended up porting google's browserchannel library across to nodejs because there weren't any usable alternatives
06:18 < josephg> but - yeah. 
06:18 < josephg> ... might be time to move on from long polling ;p
06:24 < olalonde> npm is amazing
06:24 < josephg> yep.
06:24 < olalonde> had to let it out
06:25 < josephg> proud of you.
06:26 < nohimn> :')
06:29 < Stumbler> Can someone take a glance at this error log and tell me what I need to do?  Python is not my strong point so this isnt really intuitive for me... http://pastebin.com/U6ESTgbJ
06:30 < Stumbler> trying to npm install a usb library
06:32 < nohimn> thread is part of the c++11 library
06:33 < Stumbler> ah, then maybe I need to update my x-code installation
06:33 < nohimn> try `g++ -v` in your terminal
06:33 < nohimn> verify the version
06:34 < Stumbler> 4.2.1
06:35 < nohimn> yeah, gotta update
06:35 < nohimn> they only started supporting thread library in 4.4+
06:35 < nohimn> incrementally adding pieces
06:36 < Stumbler> ah, awesome.  Thanks.  Updating now.
06:36 < nohimn> np :)
06:36 < ibrahimm> hi everyone
06:36 < nohimn> hello!
06:37 < ibrahimm> I'm pretty new to node, I'm trying to figure out if there is a way to use the same http client for both http requests and web sockets events http://pastie.org/8068681
06:38 < ibrahimm> socket.io seems to support that on the server side, i could not find any docs on if this can be done on the client aswell
06:38 < nohimn> socket.io serves the client itself
06:39 < nohimn> <script src="/socket.io/socket.io.js"></script>
06:39 < nohimn> then you have the client
06:39 < ibrahimm> actually im writing a node app for the client as well
06:39 < ibrahimm> not a browser app
06:39 < nohimn> ahhhh
06:40 < nohimn> you want to do server to server socket.io?
06:40 < ibrahimm> yeah
06:40 < Zolmeister> http://stackoverflow.com/questions/9018888/socket-io-connect-from-one-server-to-another
06:40 < ibrahimm> there is a socket.io-client library
06:40 < nohimn> there's a library for that
06:41 < ibrahimm> I've got the web sockets part of it working with socket.io-client
06:42 < ibrahimm> but i was wondering if I can do normal http requests with the same connection
06:43 < nohimn> I don't believe you can. network packets filter by a tuple of (sourceIP,sourcePort,destIP,destPort). If you had a single client, it would have to maintain two connections on the same port, which is a no. A normal HTTP request and a websocket request work differently, and would need different clients.
06:44 < olalonde> ibrahimm: for what purpose? why go through the overhead of socket.io when you could directly make http calls?
06:45 < ibrahimm> I want bi directional communication
06:45 < olalonde> then you don't really want HTTP
06:46 < josephg> have you considered TCP?
06:46 < josephg> .. actually speaking of which, is there a good way in nodejs to use object streams through byte streams?
06:47 < josephg> (eg, json over tcp?)
06:47 < ibrahimm> well i thought it would be a nice infrastructure that already exists, a REST like interface would be ideal but I also was the server to trigger events on the client
06:48 < ibrahimm> i'll have to think about using tcp
06:48 < olalonde> ibrahimm: then I suggest you do your REST calls through HTTP and have a websocket for your events.
06:48 < Stumbler> The only problem with Json over a standard tcp net socket is buffering.  You'll sometimes receive half of a json object in one data event, the other half on the next event, possibly with the first part of a second, depending on how you buffer it
06:48 < olalonde> ibrahimm: otherwise, go all the way websocket and forget about REST
06:48 < Stumbler> so you'll have to keep track of your buffers and parse when you know you have all of your object
06:49 < ibrahimm> ok thanks for the ideas guys
06:49 < ibrahimm> I think I need to think about this a little bit more
06:49 < olalonde> ibrahimm: i would go with the former if I were you
06:49 < olalonde> have a nice REST api and use websocket for stuff that needs to be "real time"
06:49 < olalonde> the server talking to your client
06:50 < ibrahimm> yeah thats what I have right now
06:50 < josephg> Stumbler: bleh maybe I'll write an adaptor for byte streams <-> object streams which does message framing
06:51 < josephg> I'm really surprised that doesn't already exist considering the hordes of stream libraries kicking around
06:51  * josephg needs that for something too
06:51 < Stumbler> *nod* I ended up doing that.  I just used a trailing end of object string that I use to split the data into objects before parsing.
06:52 < olalonde> pretty sure it exists
06:52 < josephg> olalonde: you'll have my thanks if you can find it
06:53 < josephg> https://npmjs.org/package/frap - although it hasn't been updated in 11 months
06:54 < olalonde> not sure what you are looking for exactly
06:54 < olalonde> like have a callback everytime a json structure is parsed?
06:54 < josephg> I'm looking for something that lets me put json objects in one stream and take them out of another
06:55 < josephg> .. with a byte stream in between
06:55 < josephg> which might arbitrarily reframe messages
06:55 < josephg> but more googling found this: https://github.com/dominictarr/event-stream#parse
06:55 < josephg> which might be what I want.
06:55 < olalonde> "with a byte stream in between which might arbitrarily reframe messages" what does that mean?
06:55 < olalonde> like have random data between your JSONs?
06:55 < josephg> so
06:56 < josephg> if you send a big packet with tcp, you might later receive it as two separate packets
06:56 < olalonde> ah got it
06:56 < olalonde> do you actually get packets when you use the net module??
06:56 < olalonde> thought those were abstracted away
06:57 < josephg> you have to - nodejs doesn't know how your messages are being framed
06:57 < Stumbler> Yeah, I wrote an object sharing system for the project I'm working on now.  when the server updates it's shared object, it stringifies it and sends it to the client, and visa versa.  I had to frame it, due to the buffering issue
06:57 < josephg> so it can't tell where a packet ends and begins
06:58 < olalonde> confused
06:58 < olalonde> i thought node.js would give you the packets in right order and without the frame
06:58 < Stumbler> what I did is created a server, and just put all data into a string.  every data event, I check for my end of object terminator, and split the string buffer.  calling a new updateObject event, which is parsed elsewhere.
06:58 < olalonde> isn't that how TCP works?
06:58 < josephg> olalonde: you get packets in the right order
06:59 < josephg> but they might be fragmented
06:59 < heath> ah, i feel that was a "derp" moment
06:59 < heath> thanks olalonde and gkatsev
06:59 < josephg> tcp is a streaming protocol, not a message passing protocol. The protocol doesn't guarantee that one send() corresponds to one recv()
06:59 < olalonde> heath: you're welcome
06:59 < josephg> Stumbler: what object terminator character?
06:59 < olalonde> josephg: ok
07:00 < olalonde> well there is messagepack but it's not json
07:00 < heath> holy crap i used the net module last year to build a simple tcp server, that's embarrasing 
07:00 < Stumbler> I invented one.  since my connection ONLY ever sends json objects, I use my own object terminator string..  'EOL/n/n'  is what I used
07:00 < Stumbler> which might be a problem in any other use-case
07:01 < Stumbler> so be careful if you decide to do it that way
07:01 < heath> guess i was so enthralled with handling binary data i forgot about it, playing binary chunks was so much fun!
07:01 < olalonde> josephg: would that help? https://github.com/dominictarr/JSONStream
07:01 < heath> +with
07:02 < olalonde> heath: you mean simple http server?
07:02 < olalonde> yep that's overkill :)
07:02 < heath> :D
07:03 < olalonde> josephg: i guess you'd have to integrate it's not for tcp but it could help
07:03 < josephg> olalonde: yeah that might work.
07:04 < josephg> I'd have to test it.
07:04 < josephg> the whole tcp buffering thing is one of those annoying problems you don't notice whiel you're sending packets locally
07:04 < josephg> and as soon as one of your users hops on wifi, everything falls apart
07:04 < Stumbler> lol
07:05 < olalonde> haha
07:05 < olalonde> my IM has this problem it seems
07:05 < pksunkara> https://news.ycombinator.com/item?id=5922838
07:05 < olalonde> every time i get on my vpn , the IM disconnects
07:06 < Stumbler> only on your vpn?
07:06 < olalonde> any vpn
07:07 < Stumbler> Are you using ip addresses or domain names in your IM?
07:07 < olalonde> i don't mean my IM
07:07 < olalonde> I mean the IM I use, Tencent QQ
07:07 < Stumbler> ah, gotcah.  vpns do tend to screw up dns lookups.
07:08 < Stumbler> just a heads up.
07:25 < Stumbler> do they make remote debuggers for people? I think my other half needs a little bit of help :O
07:27 < Stumbler> I walk into the other room to find that she had inflated a box of fifteen condoms, and had tied them all together end to end.  Then proceeds to start a condom fight with me laughing like a psycho.
07:27 < Stumbler> not that anyone here knows or cares, I just really needed to share that.
07:29 < sCoRpi> i think she wants a baby :P
07:29 < Stumbler> lol
07:32 < Stumbler> For something much more related..  Anyone here done much USB programming with node?
07:34 < Stumbler> I just wonder if its possible to create a program that can fake itself as a usb device.  e.g.  plug my laptop into another computer via a usb cable, and convince the other end that my laptop is a device like a mouse or keyboard.
07:34 < jesusabdullah> Stumbler: probably
07:36 < randomlurker> https://dpaste.de/EW8sN/ Could anyone help me out? I'm not able to close the connections to mongodb here
07:37 < randomlurker> This is acting weirdly. 
07:37 < olalonde> randallagordon: are you sure it's not server.close?
07:39 < randomlurker> olalonde: I'm trying to close the connection
07:39 < randomlurker> using db.close. I've no past experience with node.js 
07:39 < ak5> how do we do type checking in node?
07:39 < randomlurker> I'm just getting started :)
07:39 < olalonde> randomlurker: this is not a node.js question. it's related on how the mongodb module is implemented
07:40 < olalonde> randomlurker: is there a db.close method?
07:40 < olalonde> randomlurker: are you getting an error message?
07:40 < olalonde> ak5: what do you mean? same as javascript
07:40 < randomlurker> olalonde: yes there is. It's documented here http://mongodb.github.io/node-mongodb-native/api-generated/db.html#close
07:41 < phpdude> can you guys look at my source code on my shopping card when I click place order now, nothing happends it just sits there www.greenteabeans.com/beagle3/cart.html
07:41 < olalonde> randomlurker: is your callback called?
07:41 < phpdude> can you guys look at my source code on my shopping cart when I click place order now, nothing happends it just sits there www.greenteabeans.com/beagle3/cart.html 
07:41 < phpdude> woaps
07:41 < phpdude> sorry for the double post
07:41 < ak5> olalonde: yeah, there are a few ways to do it, like checking the constructor property. They all have ups and downs (I read: http://stackoverflow.com/questions/332422/how-do-i-get-the-name-of-an-objects-type-in-javascript ) but is there a convention in node?
07:42 < olalonde> ak5: not really
07:42 < ak5> olalonde: ?
07:42 < ak5> no convention :(
07:43 < olalonde> ak5: there is no convention for that in Node.js
07:43 < randomlurker> olalonde: no. I don't think
07:43 < randomlurker> I don't think s
07:45 < olalonde> randomlurker: probably you're not reaching db.close
07:45 < ak5> ok, so if I wanted to check if var foo is a function, I would have to do if (foo.prototype.toString == '[object Function') {...} ?
07:45 < olalonde> randomlurker: also, you are calling your callback before the db is closed
07:46 < olalonde> ak5: I usually use typeof … (typeof fn === 'function')
07:47 < randomlurker> olalonde: ah okay. I changed moved that callback after db.close block, still not working 
07:48 < olalonde> randomlurker: you have to be more precise about what is and what is not working. put console.logs everywhere and see what is getting called or not
07:49 < olalonde> ak5: this is a good resource http://bonsaiden.github.io/JavaScript-Garden/#types.typeof
07:49 < randomlurker> olalonde: doing that only. Will ask here after that
07:51 < olalonde> ak5: iirc, typeof is really only good for testing functions
07:51 < olalonde> ak5: for arrays, use Array.isArray()
07:52 < olalonde> ak5: type checking is probably the ugliest part of javascript
07:52 < ak5> olalonde: yes I am realizing this now
07:53 < randomlurker> olalonde: I tried it from node console, it says db.open cannot be called multiple times
07:53 < olalonde> ak5: underscore.js has a couple of utility functions for type checking, http://underscorejs.org/#isEqual
07:53 < ak5> olalonde: I have var foo = require('foo'), this exports a function, I want to test that with should.js: should.equal(typeof foo, 'function') but it returns object
07:54 < gildean> randomlurker: why do you need to close the connection?
07:54 < gildean> randomlurker: you can just open the connection once and then reuse the same connection
07:55 < randomlurker> gildean: just like that? I don't need to close the connection? I'm planning to use this for a webapp with almost 150 concurrent users. Also I'm very new to mongodb and node.js
07:56 < jesusabdullah> randomlurker: I mean, the overhead of opening and closing a connection is pretty high
07:56 < olalonde> ak5 are you sure it exports a function? also, doesn't have should.js have built in funcitons to test types
07:56 < jesusabdullah> randomlurker: best to open one connection and use that for errything
07:56 < ak5> olalonde: oh it does?
07:56 < gildean> randomlurker: yes you can use the same connection always
07:56 < randomlurker> oh I didn't know that.
07:56 < ak5> olalonde: maybe it doesn't export a function. I do exports.foo = function(){} though
07:56  * randomlurker changes code
07:56 < olalonde> ak5: hmmm apparently not
07:57 < gildean> randomlurker: btw. you might want to use a light wrapper module instead, i like to use mongojs: https://github.com/gett/mongojs
07:57 < olalonde> ak5: it exports { foo: function () {} } then. which means you export an object.
07:58 < olalonde> ak5: if you only want to export a function, do module.exports = function () {}
07:58 < ak5> ah, I see. is that the commonjs way?
07:58 < olalonde> yes
07:58 < gildean> randomlurker: it abstracts many of the things away and makes it easier to use with less code
07:59 < ak5> olalonde: I am a bit confused about MVC with this system, so if I make a module that, say, scrapes a page, do I return the value of the scrape or do I return a function that scrapes the page :D
07:59 < randomlurker> gildean: I tried mongoose at first but it requires schema. I want my app to be able to post arbitrary objects
07:59 < randomlurker> I will look at mongojs
08:00 < ak5> olalonde: I meant model, wrote module, sry
08:00 < jesusabdullah> couchdb 4 lyfe!
08:00 < gildean> randomlurker: yeah, mongojs only wraps the native mongodb driver with slightly easier functions so you can post completely arbitrary data without any imposed structure
08:00 < jesusabdullah> except for leveldb
08:00 < jesusabdullah> leveldb 4 lyfe! except for couchdb. couchdb 4 lyfe!
08:02 < olalonde> ak5: return a function that scrapes the page
08:03 < olalonde> ak5: also, the function should take a callback argument since scraping a page requires some async calls
08:03 < randomlurker> gildean: thanks :) will definitely look into that
08:04 < olalonde> jesusabdullah: how is couchdb different from mongodb?
08:04 < ak5> olalonde: yes, this I know :)
08:04 < ak5> thanks man
08:05 < olalonde> you're welcome
08:05 < dcbartlett> if at first you don't succeed, throw a banana on it
08:05 < dcbartlett> :D
08:05 < olalonde> ak5: there's a few node modules for scraping btw, might want to google that
08:07 < jesusabdullah> olalonde: http? :v
08:07 < jesusabdullah> olalonde: it's pretty different.
08:07 < olalonde> ok
08:08 < olalonde> isn't http a bit overkill for a database though
08:09  * olalonde reading http://stackoverflow.com/questions/12437790/when-to-use-couchdb-over-mongodb-and-vice-versa
08:09 < jesusabdullah> olalonde: is it?
08:09 < jesusabdullah> olalonde: if anything, reading about couch will give you some interesting ideas on how a database *can* be done
08:10 < olalonde> I'm a knowSQL guy :)
08:11 < jesusabdullah> yeah well
08:11 < jesusabdullah> secretly, I never learned sql
08:11 < jesusabdullah> or not-so-secretly
08:11 < olalonde> I knew it!
08:11 < jesusabdullah> I came into the game late enough that I only really got exposure to the nosql's
08:11 < olalonde> its in the logs now
08:12 < SomeoneWeird> lol
08:12 < olalonde> you are a nosql expert
08:12 < olalonde> you are not expert of any sql
08:12 < olalonde> so you are a nosql exper
08:12 < olalonde> :D
08:13 < gildean> nosql, no problems
08:13 < olalonde> 99 problems but a sql ain't one
08:14 < jesusabdullah> lol yup
08:19 < randomlurker> gildean: jesusabdullah How do I insert a new document with mongojs? 
08:20 < gildean> randomlurker: db.collection.save or db.collection.insert
08:20 < randomlurker> gildean: thanks 
08:20 < gildean> .save is an upsert (update if present, insert if not) function, so if you have an existing _id in the data you're saving, it updates
08:21 < jesusabdullah> no idea randomlurker I use couchdb XD
08:21 < gildean> randomlurker: if you need to update a document without knowing its _id, then you should use saveAndModify
08:21 < jesusabdullah> ugh I need better games n' solitaire
08:21 < jesusabdullah> any ideas?
08:21 < gildean> jesusabdullah: openttd?
08:21 < jesusabdullah> I thought openttd was terrible? :(
08:22 < gildean> wat
08:22 < gildean> why would it be terrible?
08:22 < randomlurker> there's no proper docs for mongo js :\ 
08:22 < gildean> randomlurker: it uses the native mongodb functions, you can read the mongodb docs instead
08:23 < randomlurker> gildean: oh okay
08:23 < gildean> randomlurker: the things it does on it own are explained in the readme
08:23 < gildean> like it calls toArray for you if you don't use the streaming interface
08:24 < randomlurker> alright, so except for things in readme, it uses all the native functions
08:24 < randomlurker> okay
08:24 < jesusabdullah> I dunno gildean !
08:24 < gildean> jesusabdullah: transport tycoon deluxe is one of the best games of all times, and openttd is just a free version of it
08:25 < jesusabdullah> huh
08:25 < jesusabdullah> maybe I'll try it again
08:25 < jesusabdullah> hmm, I *do* have hedgewars
08:26 < gildean> jesusabdullah: ttd starts up pretty slow, but it gets pretty hectic when time goes by and you grow your company
08:26 < jesusabdullah> aha
08:28 < gildean> jesusabdullah: remember to check on all the different buildings etc. on what they need and what they provide, don't get stuck on just building bus-routes
08:48 < Zogot> Ahoy all
09:04 < Industrial> Is there a guide/tutorial on how to use 0.10 streams? I can only find stuff on legacy code :)
09:13 < nathan7> Industrial: http://nodejs.org/api/stream.html is pretty clear
09:18 < Ry0_> is 'jump start node.js' a good book for beginners to node?
10:25 < Ry0_> is 'jump start node.js' a good book for beginners to node?
10:28 < ashnur> :D
10:35 < eere> now to use dnode to send any function to another node on a ongoing tcp?
10:36 < substack> is that a question?
10:37 < eere> how*
10:37 < eere> sorry
10:37 < substack> eere: there are examples in the readme. Start there?
10:39 < eere> true
10:43 < zbzzn_> substack, you alive
10:44 < substack> zbzzn_: you should ask a specific question instead
10:45 < zbzzn_> I am trying to run the tests for hashish and I get module "hashish" not found
10:45 < ak5> guys are my models and controllers supposed to be functions or objects?
10:46 < ak5> I feel like for simple ones I can just use functions
10:46 < zbzzn_> I ran using npm test
10:46 < zbzzn_> with latest expresso which comes with npm install
10:48 < substack> replace the require('hashish') calls with require('../')
10:48 < zbzzn_> do you know what changed?
10:53 < vermicel_> Hello
10:55 < Ry0_> is 'jump start node.js' a good book for beginners to node?
10:59 < sambarino> haven't read it but it does seem better than the free nodejs books i've seen
11:08 < Ry0_> thank you, i'll give it a try.
11:12 < standoo> hi
11:20 < Zogot> Ahoy all
11:37 < Industrial> Is it possible _write gets passed an encoding of 'buffer' or did I implement something wrong? https://gist.github.com/Industrial/8f580be6736c552108dc
11:37 < nathan7> Industrial: dude
11:37 < nathan7> Industrial: whyy
11:38 < nathan7> Industrial: I figure this was generated from Coco or something - original source please?
11:38 < Industrial> https://gist.github.com/Industrial/760ba4e7cb7142ef406f/7612710442ffd072951233d47274b4dfce85c739
11:38 < Industrial> livescript
11:38 < nathan7> Yeah, which is a Coco fork
11:38 < Industrial> yes
11:38 < nathan7> OOH
11:38 < nathan7> That's how you do destructuring while capturing an arg!
11:39 < Industrial> so I have a State machine stream that writes out its state changes
11:39 < Industrial> and gets feeded its events, which are only available in the current state
11:39 < nathan7> Industrial: what's @states look like?
11:40 < Industrial> so if I subclass and specify the output states of one and pipe the streams it becomes the input of the next one
11:40 < Industrial> so if s1 is running, s2 and s3 start aswell
11:40 < nathan7> Industrial: there's a huge issue with this
11:40 < nathan7> Industrial: Chunks can be arbitrarily broken up
11:40 < Industrial> nathan7: right
11:41 < nathan7> Industrial: You probably want an object stream
11:41 < Industrial> so I should buffer input ?
11:41 < nathan7> Industrial: or that, yeah
11:42 < eighty4> Anyone happen to have a copy of http://teddziuba.com/2011/10/node-js-is-cancer.html handy? I'd like to read it but it's been taken down
11:42 < Industrial> It would be much nicer if I could abstract the connections between the machines/streams in another way then having the output states of one be the input events of another
11:43 < Industrial> because it's sucky hard coupling if I make different subclasses
11:45 < Industrial> guess I shouldnt be using classes then
11:46 < nathan7> eighty4: http://web.archive.org/web/20120104233829/http://teddziuba.com/2011/10/node-js-is-cancer.html
11:47 < eighty4> nathan7: oh, didn't think of archive.org :) Google didn't have it cached. Thanks!
11:48 < nathan7> wow
11:48 < nathan7> I am amazed at the level of misunderstanding and hate there
11:49 < eighty4> nathan7: I read this: http://blog.brianbeck.com/post/node-js-cures-cancer as a response and wanted to read the source
11:49 < eighty4> nathan7: tbh I like reading troll posts :|
11:51 < nathan7> they make me want to stab humans
11:51 < nathan7> stabbing humans leads to a bloody mess
11:52 < eighty4> don't stabb :) 
11:52 < eighty4> "Node.js is an unpleasant software library and I will not use it." :D
11:53 < standoo> unpleasant?
11:54 < eighty4> standoo: it's a quote from the article nathan7 was so nice to find for me.
11:54 < nathan7> YOUR FACE IS AN UNPLEASANT SOFTWARE LIBRARY
11:54 < nathan7> q=
11:54 < eighty4> standoo: It seems as the article got a lot of responses and stird up a lot of argument. I don't mean to restir anything :)
11:55 < eighty4> Just wanted to read it since I hadn't before. Always nice to get some history on a language
11:55 < nathan7> I think the issue is that the node homepage's statements were written with the assumption that it would be read by intelligent people
11:55 < nathan7> so some assumptions are not explicitly stated, an assumption is made that you'll fill in reasonable values
11:55 < M2Ys4U> I'm trying to use browserify and doing browserify(source_files) [where source_files is an array of file paths] works, but doing browserify({files: source_files}) doesn't. Am I reading the docs wrong, or is something broken?
11:56 < eighty4> nathan7: he does have a point, even if node is nonblocking most of the code you write with it might not be.
11:56 < eighty4> but that's kind of expected...
11:57 < nathan7> eighty4: the majority of my code does I/O
11:57 < nathan7> eighty4: Rarely CPU-bound 
11:57 < nathan7> eighty4: That being said, even when it isn't, I'll do it in JS, and node is the most convenient platform for that
11:58 < nathan7> To me, dealing with paralellism is rarely worth it
11:59 < krainboltgreene> I'm not a node hacker, but it seems like there'd be no reason to use JS outside of Node.js. So many stdlibs.
12:00 < nathan7> Yeah
12:00 < nathan7> You can take node idioms into the browser with browserify
12:02 < eighty4> oh well, interesting post.
12:03 < Zogot> When writing unit tests. How would test that a variable has require('component') correctly loaded. Is that kind of the stuff you test or just purely test the results of functions?  Cant really imagine that you can mess up ( things like require('express') )
12:04 < nathan7> Zogot: That'd throw if you messed u
12:04 < nathan7> *messed up
12:04 < squeeks> yes? it's a cheap way to assert dependencies didn't have some syntax error hiding in them.
12:04 < nathan7> It'd throw the moment you require your module under test
12:05 < nathan7> So that's already implicitly tested - your tests won't even run if it fucks up at that stage
12:06 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:12 < Industrial> nathan7: if you are still interested; I removed the subclasses and I separated the state definitions and made slaves inherit the master definitions: https://gist.github.com/Industrial/760ba4e7cb7142ef406f/c8ba1809c13e9190408a29d05abd4c758e1ccd46
12:12 < Industrial> not saying i'd build a master/slave setup like this, it's just a silly example :)
12:13 < nathan7> I just got a headache :(
12:13 < nathan7> not your code, but I can't understand things with a headache
12:13 < Industrial> :<
12:31 < Zogot> ok, that actually makes sense, thanks nathan
12:32 < Zogot> nathan7*
12:58 < Industrial> if i stream.push('abc'), where do I get 'abc' from in _read() ?
13:00 < Industrial> nvm
13:19 < Zogot> declared variables inside modules that get required are not part of the global space correct?
13:20 < bnoordhuis> Zogot: correct
13:21 < Zogot> bnoordhuis: and any calls to functions in those variables, prior to module.exports would not be async right?
13:21 < Zogot> say I had an object literal with a start function, if I called that function prior to module.exports = ObjectLiteral then the start function would block?
14:06 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:12 < ak5> hey guys, I am using express and I get a 404 when I do this:  res.sendfile(require('path').resolve(__dirname + '../views/index.html'));
14:12 < ak5> why is that?
14:12 < ak5> I tried googling, added that path.resolve, to no effect
14:13 < squeeks> and what happens when you return the path as plain text and not the file itself?
14:14 < squeeks> I'll bet money the path you you think it is, and path it's actually trying are not the same.
14:19 < AntelopeSalad> is anyone using dustjs here?
14:22 < Skullclown> hey, I'm pretty new to node.js, using it on an RPi. is there any way to get wlan0 info in the same way as os.networkInterfaces() ?
14:29 < Beg> jdelgado-> ljharb -> one of you recommended a decentralized solution some days ago, thanks alot for the tip! 
14:29 < Beg> decentralized password solution*
14:42 < mscdex> node.js is the best!
14:48 < AlphaPinky> mscdex, o/
14:56 < AphelionZ> What's the best strategy to constantly update an HTML page based on a setInterval or some server event?
14:57 < AphelionZ> like, i dont need it to be updating real time, just be up to date whenever somebody requests it
15:09 < AphelionZ> trying now.js for now
15:28 < patsToms> AphelionZ,  you could do it using sockets
15:28 < patsToms> on some information changes - socket server sends to client data whick is updated
15:28 < patsToms> s/whick/which
15:28 < neeky> Skullclown, wlan0 isnt returned in os.networkinterfaces?
15:28 < patsToms> sorry about grammar, I mean - which
15:29 < patsToms> I writed it again, oh my...
15:33 < AphelionZ> patsToms: nice! In between me writing about now and your response I started implementing socket.io
15:43 < neeky> Skullclown, actually, wlan0 is returned on getInterfaces
15:43 < neeky> it DOES need to be on though - it was not when I had it off
15:44 < Skullclown> neeky: it is on
15:45 < Skullclown> I tried it with wlan0 on and also with mon.wlan0 (wlan0 as AP), both didn't return wlan0
15:45 < neeky> interesting - it does work on mine - what OS?
15:46 < Skullclown> neeky: SD came with NOOBS, installed raspbian
15:47 < neeky> it makes a direct call to the os binding - I have a pi but don't have a wlan interface to test with
15:47 < neeky> i just tested in on debian
15:50 < robdodson> I'm having some early morning brain drain. I'm trying to do an npm install of this repo: https://github.com/blue-button/blue-button-reference-ccda but I keep getting errors. npm should be able to install from a github repo even if it doesn't have a package.json right?
15:50 < neeky> robdodson, i dont think so
15:51 < robdodson> oh i'm rereading the npm install spec… seems like at a minimum you've got to have a package.json somewhere
15:52 < neeky> the git project must be a node module
15:53 < Skullclown> anyone knows why it takes long to load a node.js server webpage when I connect to my RPi AP but when I use ethernet, it loads pretty fast?
15:54 < squeeks> no, benchmark it.
15:54 < neeky> have you tested the performance without node
15:54 < neeky> using some other benchmark?
15:54 < neeky> like scp, or rsync?
15:54 < Skullclown> I watched the node.js output and the GET requests all came pretty fast but at some point the browser just kept loading even while node.js wasn't doing anything
15:55 < neeky> node is a layer 7 interface, it really doesnt know much about layer 2-3
15:55 < Skullclown> SFTP has no issues either
15:55 < neeky> also, what is the cpu doing during that time?
15:55 < neeky> is node pegged with IO or CPU?
15:56 < gildean> neeky: node is actually more layer 4 with abstractions for layer 7
15:58 < neeky> true
15:58 < neeky> or more closer to 5-7
16:05 < raduu> hey, can anyone take a quick look at this? http://stackoverflow.com/questions/17245881/node-js-econnreset
16:06 < gildean> neeky: well not really, node uses raw tcp and udp sockets which makes it layer 4
16:07 <@tjfontaine> raduu: you should have an error handler on the client to handle the case that it's gone away
16:08 < gildean> but the osi model is not really correct in many cases, so it's not something to worry about
16:09 <@tjfontaine> raduu: you're doing a read/write on the client, it's gone away, which results in an error, but you're not handling the error (no on('error')) and thus the server throws
16:10 < xanadu> `forever start app.js` doesn't want to ... start. it gives this error: "log file /home/ec2-user/.forever/forever.log exists. Use the -a or --append option to appen
16:10 < xanadu> d log." any guesses what's going on?
16:11 < gildean> xanadu: the error is pretty obvious, no?
16:12 < xanadu> haha, probably to smart people - not to me. does it want forever.log not to exist?
16:12 < xanadu> or it simply wants to be told that if forever.log exists, then append errors to it?
16:13 < gildean> xanadu: no, it just says that it does exist and if you want to use the same log, you should make it append that
16:13 <@tjfontaine> the file already exists, it wants to know what you want to do in that case
16:13 < gildean> with the -a switch
16:13 < xanadu> so `forever start app.js -a` ?
16:13 < Uzza> Hi guys, can anyone confirm that npm is some kind of broken right now ? because I am seeing HTTP 304, I have no idea what it is 
16:14 < gildean> Uzza: 304 means not modified
16:14 < gildean> Uzza: http://en.wikipedia.org/wiki/List_of_HTTP_status_codes
16:15 < st_luke> Uzza: it's working fine for me, open an issue on github if you keep having an issue
16:16 < gildean> status 304 is not an error, it just a status the server sends to the client implicating that the version the client already has is the newest one
16:16 < Uzza> yes, but why ? I'm clearing cache for npm "npm cache clean" but still some dependencies can not be fetched. I tried it for yeoman, grunt-cli etc, nothing works. I've could install them some time ago on different maschine.
16:16 < gildean> and therefore the client doesn't need to download the file again
16:24 < xanadu> sorry to bother again, but i can't seem to get the syntax correct with forever so that it will append to the existing forever.log
16:25 < xanadu> as a reminder of the problem -`forever start app.js` doesn't want to ... start. it gives this error: "log file /home/ec2-user/.forever/forever.log exists. Use the -a or --append option to appen
16:26 < raduu> you mean I should treat this client side?
16:31 < raduu> got disconnected and didn t get to read all. Please whoever answered before, answer me again: http://stackoverflow.com/questions/17245881/node-js-econnreset
16:35 < neeky> xanadu, forever -a app.js
16:35 < raduu> @neeky?
16:36 < neeky> xanadu, or forever -a start app.js
16:38 < RLa> neeky, do not forget extra args for log files or you will go crazy finding the correct app log file
16:39 < neeky> looks like he disconnected
16:39 < neeky> i'll install forever and if he comes back walk him through it
16:39 -!- mode/#Node.js [+o tjfontaine] by ChanServ
16:41 < tk_> how to use debugger in sailsjs
16:42 < raduu> http://stackoverflow.com/questions/17245881/node-js-econnreset so any thoughts for this?
16:42 <@tjfontaine> raduu: did you not get my previous message on this?
16:42 < raduu> it s kind of a showstopper in production
16:42 < raduu> no
16:42 < raduu> sorry
16:42 < raduu> asked you to type again
16:43 <@tjfontaine> raduu: you need to add an on('error') for the client
16:43 < raduu> on the client side js 
16:43 < raduu> ?
16:43 <@tjfontaine> no on the server side
16:43 <@tjfontaine> the client that comes to you in the on connection handler
16:44 < raduu> https://gist.github.com/samsonradu/4cb024fa4c67b35c5a9b
16:44 < tk_> hey does anyone using sailsjs
16:44 < raduu> like this? 
16:44 <@tjfontaine> the client disappears, and you're trying to write/read from it, which is an error case, but you have no error handler configured so it's throwing
16:45 <@tjfontaine> raduu: more or less
16:45 < raduu> and do I have to call a disconnect? or something like that
16:45 < raduu> or this is enough not to propagate it to process
16:45 <@tjfontaine> that will be enough such that it doesn't end up in uncaughtException handler
16:45 <@tjfontaine> but
16:45 <@tjfontaine> you should still do something appropriate for your application logic
16:46 < raduu> right, like kicking the socket
16:46 < neeky> xanadu: forever -a start -o app-out.log -e app-err.log -l forever.log app.js
16:46 <@tjfontaine> because there's no recovering by the time you reach this point
16:46 < neeky> just in case he comes back i can copy/paste
16:46 < Beg> have you guys had issues with sessions with cross domains? 
16:46 < raduu> what do you suggest?
16:47 < Beg> I have http://enow.it and http://mbl.enow.it, I get two different sessions based on direct access and jquery get from enow.it to mbl.enow.it
16:47 <@tjfontaine> raduu: dunno, it's very application specific
16:48 < raduu> ok, first step is to stop the crash and see the error caught there
16:48 < raduu> then I ll move forward to finding the cause
16:48 <@tjfontaine> the error will still be econnreset -- the connection is gone
16:50 <@tjfontaine> what induces that behavior in the remote client, who knows, but there are plenty of scenarios where that's out of your control -- the internet is a series of tubes, and sometimes they spring a leak
16:50 < raduu> I know, I have a staging server and I never ever could reproduce it
16:50 < raduu> pulling the cable..using IE8.. crashing flash
16:51 < raduu> ok, I ll deploy the hotfix and let you know
16:51 < raduu> thanks a log
16:51 < raduu> lot*
16:53 < tk_> hey any one know how to debug with sailsjs
16:53 < neeky> tk_, how have you tried to debug that didnt work?
16:53 < tk_> yes
16:54 < tk_> i am on ubuntu 12.10 ,node v0.8.16 
16:54 < tk_> Sails (v0.8.91)
16:55 < tk_> i started server like "sails console"
16:56 < tk_> i have paste "debugger" inside controller 
17:00 < neeky> well, the best way I've found to debug any node app is by installing the google v8 plugin in eclipse and attaching to the node process in the eclipse debugger
17:01 < neeky> then start your app with node --debug 
17:01 < neeky> 'debugger' statements only work with the cli debugger
17:02 < neeky> joyent has a tutorial - just google debug node eclipse
17:20 < raduu> @tjfontaine but why doesn t the socket.io docs have an exposed event for "error" on the server-side? also hooking "uncaughtException" to process is a bad idea right? 
17:23 < raduu> or am I looking in the wrong place https://github.com/LearnBoost/socket.io/wiki/Exposed-events
17:30 <@isaacbw> bitbucket needs github's productivity graphs
17:31 <@isaacbw> do you know who's beautiful? You are
17:31 < ryan_ramage> is there a way to specify the auth token (or password) for an npm publish? 
17:31 < ryan_ramage> trying to have a small service that keeps packages up to date
17:31 < squeeks> credentials live in ~/.npmrc
17:31 < ryan_ramage> for a few different users
17:33 < ryan_ramage> can ~/.npmrc hold creds for more than one user?
17:34 < squeeks> not that I'm aware of. I think there is tools that let you swap in and out multiple creds
17:34 < neeky> a neat feature for github would be when you search for a project, but that project has been surpassed by some fork, the fork shows up in search
17:35 < neeky> the best example I can come up with is node-inspector - the original project is all but dead, 
17:35 < neeky> but a guy forked it and now it's the 'new node-inspector'
17:35 < neeky> but you wouldn;t know that from the 60 forks
17:50 <@isaacbw> I think you really ought to pick a new name in that situation
17:51 <@isaacbw> there's a flaw in github is that repositories are linked to user accounts
17:51 <@isaacbw> in terms of URLs
17:52 <@isaacbw> so you can't easily just make someone else the owner
17:52 <@isaacbw> without fucking up everyone's remote urls
17:52 < neeky> yeah
17:52 < ljharb> you can now
17:52 < ljharb> they redirect when you change it.
17:52 < algesten> how?
17:52 < neeky> the username in the url is kinda hokey
17:52 < ljharb> github enabled it recently.
17:52 <@isaacbw> ljharb: oh, nice
17:53 < ljharb> i'm not sure if the repo urls redirect, it might only be the web urls
17:53 < ljharb> but, better than before.
17:53 < algesten> oh. so it's not like you get a non-user-bound project?
17:53 < ljharb> correct. you can just move it from one user to another.
17:53 < algesten> ok
17:53 < ljharb> the proper way to have it not be user-bound is with organizations
17:53 < algesten> a little less exciting :)
17:54 < algesten> well, first served. i think you should be able to claim any "global" name.
17:54 < algesten> then just hand that over to the next maintainer.
17:54 < neeky> I can see how if the original project dies, with no interest in merging forks, the fork should rename and become a new project
17:54 < ljharb> algesten: you can :-p just make a project-specific user, and give yourself admin rights
17:54 < algesten> doh! :)
17:54 < ljharb> the only problem here is poor planning
17:55 < ljharb> :-p
17:55 < algesten> yeah. i wouldn't really know whether a project would take off :)
17:55 < ljharb> once it does, you could then move it to a project-specific user - moving it only once isn't that big a deal
17:55 < neeky> we had that philosophical discussion in herethe other day
17:56 < algesten> you're saying i should pay more attention to irc? :)
17:56 < neeky> well, it was along the line of some kid came in here spamming his project,
17:56 < neeky> saying if xyz gets 100 stars, i'll do this and that
17:57 < ljharb> he wants to get rich on that github money
17:57 < neeky> i told him his project will get stars organically if it doesnt suck, and he got all huffy
17:58 < neeky> sweet sweet github karma
17:58 < neeky> and I conjectd that in my experience projects get get when they are born out of necessity
17:58 < shafox> hi , how can i manage my packages to be installed locally e.g. the folder which i am using to develop not system wide. i created a package.json file inside that i have written dependencies:express latest but while i am doing npm install it show error to use it as sudo or root , my guess is if i run that as sudo it will install system wide isn't? how can i overcome this ?
17:58 < shesek> ljharb, they did? I thought they only do it for very popular projects
17:59 < neeky> not 'let me think of a project that i can get stars from'
17:59 < shesek> (did enable redirects, that is)
18:00 < ljharb> shesek: i believe you can move any project
18:00 < ljharb> shafox: by default npm installs dependencies locally.
18:00 < shafox> ljharb: but when i do npm install it gives me error to run as root 
18:00 < ljharb> shafox: if you run `npm install` inside a dir with a package.json, it install into node_modules - perhaps it's already there but doesn't have the right permissions?
18:00 < shesek> shafox, using sudo will not make it install globally
18:01 < shafox> shesek: ok lemme try it.
18:01 < shafox> shesek, it will only install globally if i run with -g option 
18:01 < shafox> right 
18:01 < shafox> ?
18:01 < shesek> right
18:01 <@isaacbw> lol
18:02 < shafox> ok thanks shesek and ljharb :)
18:02 < ljharb> shafox: `rm -rf node_modules && npm install` should always redo your dependencies
18:03 < shafox> ljharb: not redo . just a clean install of ubuntu and node . just starting to try out express 
18:03 < neeky> tip: you can also use npm install -g to make a package 'global' relative to your user 
18:03 < shafox> now it is installed lemme see if it available system wide or not 
18:03 < neeky> which makes developing node modules soooo much weasier
18:04 < neeky> because npm link doesnt require root then
18:04 < shafox> so how can i access the node_modules that i installed in the terminal 
18:04 < neeky> what dir are you in the terminal?
18:04 < krunc> I wonder how bad it is to conditionally use jquery2 if gt IE8
18:04 < neeky> shafox, are you in a project folder?
18:05 < shafox> neeky,  yes 
18:05 < neeky> do you see a node_modules folder in the dir you are in?
18:05 < shafox> neeky,  i have the .node_modules folder also in that dir 
18:05 < shafox> neeky, yes
18:05 < shafox> shall i do node_modules/bin ??
18:05 < neeky> shafox, slow down a bit - 
18:06 < shafox> neeky, ok. 
18:06 < neeky> ok, withing the project folder, and npm package you installed relative to that project 
18:06 < shafox> neeky, :yes 
18:06 < neeky> in other words, withou the -g option in npm
18:07 < neeky> will be availble just by doing var xyz = require('package-name');
18:07 < neeky> so, give me an example of a package that is listed as a dependency in your package.json file
18:08 < neeky> assuming you have a package.json and just ran 'npm install' in the project dir
18:08 < shafox> neeky: only express and its dependencies 
18:08 < neeky> so, you installed express like: 'npm install express'?
18:08 < shafox> nopes .
18:08 < ljharb> how'd you install it?
18:09 < shafox> i created a package.json file and there i mentioned dependencies express then i ran sudo npm install
18:09 < neeky> ok
18:09 < neeky> then express in not globally installed - 
18:09 < ljharb> shafox: do `npm ls` - what's the output?
18:09 < neeky> express is a small exception
18:09 < neeky> because it's a module AND an executable
18:10 < neeky> so to actually run the express executable, you would do ./node_modules/express/bin/express blah b;ah
18:10 < shafox> ljharb, neeky this is my npm list returns http://paste.ubuntu.com/5790349/
18:11 < ljharb> looks fine to me
18:11 < neeky> so, in your neapp folder, if you just run 'express' I'm guessing nothing happens
18:11 < shafox> neeky, yes 
18:12 < shafox> it says express:command not found 
18:12 < neeky> ok, then express is local to your app so, run ./node_modules/express/bin/express
18:12 < eere> how to write dNode "server function" for async callbacks ?
18:12 < neeky> like I said, *some* npm packages are actually applications AND modules
18:12 < shafox> neeky, destination is not empty, continue? 
18:13 < shafox> ok
18:13 < Skullclown> is there an easy way to get the hardware ID of a plugged in SD card via node.js?
18:14 < ljharb> Skullclown: show me a command line program that outputs that hardware ID, and i'll show you an easy way to do it :-p
18:14 < neeky> shafox, it's slightly confused because express is instlled in the dir you are in - i think you can safely say ok
18:15 < neeky> Skullclown, storage is weird, because you can have 0 or more devices
18:15 < shafox> neeky: this is what i get if i ran http://paste.ubuntu.com/5790371/
18:15 < neeky> so they are positionally dependent
18:15 < neeky> shafox, look good
18:16 < ljharb> shafox/neeky: express, when executed, is supposed to have been installed globally.
18:16 < ljharb> since now you've got two apps
18:16 < neeky> now, just run node app
18:16 < Skullclown> neeky: it's run on a raspberry pi, so storage should be in the same place every time. but I don't know any method to get the hardware ID
18:17 < neeky> hardware id as in uuid?
18:17 < neeky> or as in /dev/sdxx
18:17 < Skullclown> uuid
18:17 < shafox> neeky, ljharb : it created some folders that showed up in the terminal output . 
18:18 < neeky> Skullclown, does blkid work on a pi?
18:18 < shafox> by doing node app it runs at port 3000 and in browser it says jade isn't found 
18:18 < shafox> i should have made jade also as dependencies 
18:18 < neeky> the command "blkid" lists all uuids for all devices
18:18 < Skullclown> neeky: untested but docs say yes
18:19 < Skullclown> (untested because I'm already running something atm, waiting for it to end)
18:19 < neeky> if you are ssh'd into the pi just run it from a terminal
18:19 < neeky> ok
18:19 < neeky> shafox, run npm install again
18:19 < neeky> it should pickup jade for you
18:20 < Skullclown> neeky: blkid works
18:20 < neeky> then run node app
18:20 < neeky> ljharb, is probably a better regex-er than me
18:21 < neeky> but you can probably scrape the output of blkid - IF it only returns the uuid of your device
18:21 < neeky> otherwise, you need to find another piece on info in that output that will only ever match that device
18:21 < neeky> to search and match on
18:21 < shafox> that solved. neeky :)
18:22 < Skullclown> neeky: grepping blkid on the UUID of the SD card should be enough, right?
18:22 < neeky> yeah, if the sdcard is the only thing in the output of blkid
18:22 < neeky> for example the command on my machine outputs 7 devices
18:23 < neeky> each partition has a blkid
18:23 < Zogot> Ahoy all
18:23 < neeky> so /dev/sda1 /dev/sda2, etc all have a blkid
18:23 < Skullclown> same here but the SD card is the only one with a UUID
18:24 < Skullclown> I mean the partition I need *
18:25 < neeky> Skullclown, so do an ls on /dev/disk/by-uuid/
18:25 < neeky> and if it ONLY ever returns one uuid
18:25 < neeky> then you can use node's fs module
18:26 < Skullclown> yup, it does return only one
18:26 < Skullclown> there won't ever be any change to partitions/devices so thanks :)
18:27 < neeky> fs.readdirSync('dev/disk/by-uuid') will work then
18:27 < neeky> if you replace the sd card it'll break too
18:27 < neeky> it's a tiny bit fragile
18:44 < Skullclown> I'm using Express with routes, '/settings' matches 'settings.ejs'. I have an sqlite3 database with info in it and I want to display everything in the database on the settings page. How do I do this? For some reason, I can get my head around it. I know how to use the sqlite3 db.all() function but it's async, how do I get the output of db.all() to settings.ejs?
18:44 < Skullclown> or should I stop trying to do that and just use socket.io?
18:46 <@isaacbw> why would you use socket.io
18:46 <@isaacbw> do you understand SQL?
18:46 < Skullclown> isaacs: I do. but no idea how to get the SQL data to the settings.ejs page
18:47 < radu> just pass the object
18:47 < Skullclown> radu: the sqlite3 object? that works?
18:47 <@isaacbw> Skullclown: wrong isaac
18:48 < Skullclown> isaacbw: my bad *
18:48 < julianduque> Skullclown: something like db.all(function (err, results) { res.render('settings', { results: results 
18:48 < radu> yep
18:48 < julianduque> }));
18:48 <@isaacbw> being async doesn't matter. Http lets you take your time responding to requests
18:48 <@isaacbw> and node.js is designed to be async
18:49 <@isaacbw> wait for sqlite to do its thing, then send the data
18:49 < Skullclown> isaacbw: the issue with the async part was that I, for example, couldn't simply get all data, put it in a global variable, pass it on. (or, well, maybe not a global variable but one in the scope above it)
18:49 <@isaacbw> why not
18:49 <@isaacbw> just wait to render your ejs until you get the data
18:50 < Skullclown> isaacbw: db.all(a, b, callback) returns all data to the callback param
18:50 <@isaacbw> alright
18:50 <@isaacbw> I'm not sure what the issue it
18:50 < Skullclown> so the variable outside of that callback function will run parallel and won't have the correct data in it, it's not like it waits for the db query to execute
18:51 < julianduque> Skullclown: https://gist.github.com/julianduque/45bfd2097c9ca478c2d5
18:51 < julianduque> Skullclown: something like that
18:52 < Skullclown> julianduque: thanks, I got the solution :) I just overlooked the render stuff
18:53 < julianduque> Skullclown: so you will be able to use `data` in your ejs
18:53 <@isaacbw> Skullclown: you need to spend some time understanding idiomatic node and callback chaining
18:57 < neeky> i got wrapped around the async axle when I first started - 
18:58 < parfeon> Hello there. Is there any way to organize "categories" on module.exports? By "category" i mean I have one .js file with base functionality and another for specific tasks. Lets say we have base module which work with database and additional module which is enhanced to manipulate database for "Profile" data manipulation
18:58 < Zogot> function calls I make outside of module.exports are not async correct?
18:58 < neeky> i found a neat library that would turn async calls into pseudo sync calls that make sense to programmers used to procedural functions
18:58 < neeky> but I cant remember the name of it
18:59 < Zogot> If i had a object literal that I called something like 'ready' on, and then assigned module.exports to that object, .ready
18:59 < Zogot> wont be async. apologies for extra enter
18:59 < neeky> Im assuming you are referring to an event emitter?
19:00 < neeky> as in mongoose.connenct; mongoose.on('connect')?
19:01 < neeky> I'm not following
19:01 < xircuser> h
19:01 < Zogot> neeky: http://pastie.org/private/aeobsdtoxeulmmvdw0ida ignore what the object does, just line 27 is what I am refering to
19:02 < neeky> Zogot, that's up to you
19:02 < neeky> did you write .somemethod?
19:03 < neeky> as in, you could implement .someMethod to take a callback as an argument
19:03 < Zogot> well if some method was some time consuming thing ( large loop or db interaction or something ). I was somewhat understanding that things are only not blocking if from a callback
19:03 < neeky> and then POOF someMethod is async
19:03 < duko> I'm using 'marked' to generate html from markdown
19:04 < duko> does anyone here understand how to get syntax highlighting for code blocks?
19:04 < neeky> correct - as written, your app will block until somemethod returns
19:05 < duko> the markup produced shows <code class="lang-javascript"> around the code block
19:05 < Zogot> neeky: ok, just wanted to make sure I understood it. that was the only bit I had a little uncertaintity about
19:05 < Zogot> neeky: thanks
19:05 < duko> but my browser does not syntax highlight this
19:05 < RLa> maybe browser too dumb for that
19:12 < neeky> duko, doe the html produced reference a css file?
19:14 < duko> neeky: no it doesn't, but without elements around the code syntax characters, I don't see how a stylesheet could affect the appearance very well
19:15 < nlf> duko: have a look at ultramarked
19:16 < neeky> did you call the highlight callback on your coed blocks?
19:16 < neeky> s/coed/code/
19:17 < duko> nlf, neeky: I wasn't using marked correctly -I see my issue now
19:17 < duko> nlf: thanks looking now
19:17 < neeky> k
19:26 < macbn> how to secure node and express js app
19:26 < macbn> is there any middleware for securing 
19:27 < nlf> macbn: helmet provides some options
19:27 < macbn> how about XSS
19:27 < macbn> sql injection
19:28 < nlf> those mostly rely on you sanitizing user input, which is somewhat difficult to do in middleware
19:28 < macbn> i only know basic security attacks, like XSS sql injection, csrf, how can im sure that my app is fully secured
19:28 < nlf> helmet provides some headers to help mitigate other security risks
19:28 < nlf> really, you have to spend some time and test it
19:28 < macbn> how about https://github.com/chriso/node-validator
19:28 < nlf> or hire someone to test it for you, which is fairly expensive
19:29 < noocx> hi
19:29 < squeeks> if security was easy and simple, I'd be out of a job.
19:30 < macbn> please help me securing my app
19:30 < macbn> what do i need to test
19:30 < macbn> sql injection, csrf, xss and then?
19:30 < squeeks> go read whatever owasp has to say.
19:30 < nlf> yeah, that's a good start at least
19:31 < macbn> it will take time
19:31 < nlf> yes it will
19:32 < macbn> my deadline is by the end of this month
19:32 < squeeks> that sucks. security is hard and there is no silver bullet.
19:32 < nlf> to do a full security audit, by yourself, with no experience?
19:33 < nlf> good luck
19:35 < macbn> and my app will be dealing with money
19:35 < macbn> before writing this app i was using php
19:36 < macbn> and php framework
19:36 < macbn> i just leave it to the framework to handle security
19:36 < squeeks> ...
19:36 < squeeks> What product/service/company is this for? So I know to avoid it.
19:36 < macbn> its just my personal project
19:37 < macbn> using mysql
19:38 < macbn> is this enough?http://blog.liftsecurity.io/post/37388272578/writing-secure-express-js-apps
19:38 < nlf> my coworker wrote that :) it's intended as advice, not a definitive guide to making a secure app
19:40 < macbn> oh
19:44 < macbn> what does google caja actually do
19:44 < macbn> its really long codes
19:44 < macbn> just to prevent xss?
19:52 < jesusabdullah> what's a caja
19:52 < jesusabdullah> ow8 that's the js sandbox?
19:56 < macbn> no
19:57 < macbn> https://code.google.com/p/google-caja/source/browse/trunk/src/com/google/caja/plugin/html-sanitizer.js
19:57 < macbn> i got it from here http://stackoverflow.com/questions/295566/sanitize-rewrite-html-on-the-client-side
19:58 < eere> is it possible to use the request module to get headers in one line? 
20:04 < jesusabdullah> eere: huh?
20:07 < kevireilly> eere: var headers; for (var i in req.headers) headers += i + ': ' + req.headers[i]; // or something like that
20:07 < dshaw_> eere: > request.head('http://dshaw.com', function(err, res) { console.log(res.headers) })
20:08 < gildean> or just JSON.stringify(response.headers);
20:16 < macbn> im trying to use express csrf
20:17 < macbn> in what case the token value would change?
20:17 < macbn> it always gives me same token
20:28 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
20:32 < dhruvasagar> Hey guys, I am building a simple turn based game. I have the game (playing) done and ready, I want to now make it real-time with remote users
20:33 < dhruvasagar> so many players will be connected, search and then connect to a game (2 players per game), and then once it starts, they take turns (a simple board game, like tictactoe)
20:33 < kevireilly> dhruvasagar: sockets
20:34 < dhruvasagar> kevireilly: I know, I am already looking into it
20:34 < dhruvasagar> kevireilly: any particular examples / articles ?
20:35 < bora> What can I use for database operations with node
20:36 < kevireilly> dhruvasagar: i haven't really looked into that goal specifically with sockets, but socket.io or sockjs probably
20:36 < dhruvasagar> kevireilly: I am trying with sockets, but I want some direction / help. How I could realize the notion of a lobby, how a game would be initiated and a player connect to it.
20:36 < dhruvasagar> kevireilly: how to do it through socket
20:38 < neeky> bora, thats like asking how long a string is ;)
20:38 < tyoverby> I'm doing a lot of heavy lifting for each request.  How do I offload this to processes?
20:38 < kevireilly> dhruvasagar: you could look at it like a chat room for the lobby and private chat for the games
20:38 < dhruvasagar> kevireilly: hmm good idea, any examples ?
20:38 < neeky> tyoverby, async callbacks?
20:39 < dhruvasagar> kevireilly: googling, this might be a good thing to research on, thanks
20:39 < bora> I'm trying to learn node but could not find how to do. I could use some directions 
20:39 < kevireilly> dhruvasagar: i thought there was a chat example already for socket.io but i cant find it now, but one piece is probably https://github.com/LearnBoost/socket.io/wiki/Rooms
20:39 < tyoverby> neeky: the heavy lifting is all done in javascript though, so wouldn't the "single thread" mentality bite me here?
20:39 < neeky> bora, you just want a simple database connection example?
20:40 < zerodrama> hello
20:40 < dhruvasagar> bora: node itself is huge, are you trying to learn anything in particular ? you should try exploring through a sample app
20:40 < tyoverby> neeky: I would idealy use async callbacks in conjunction with running a function in its own thread
20:40 < bora> Yes. I looked into express but that's not what I had in mind I think 
20:40 < neeky> tyoverby, that's not a good application for a node.js app
20:41 < neeky> BUT depending on what you are doing in the async functions that is 'heavy lifting', it may still not be a problem
20:41 < tyoverby> :(  I like having my server-side and client-side logic in the same .js file 
20:41 < neeky> what is the heavy lifting part?
20:42 < tyoverby> simulating a turn-based strategy game 
20:42 < neeky> bora, yeah, express isnt a db framework - 
20:42 < neeky> i can find you a simple hello world mysql app
20:42 < bora> Are there any frameworks like sqlalchemy for node 
20:43 < zerodrama> is it possible to load a file with js code and compile/execute/save/restore state
20:43 < neeky> well, there are ORMs, and there a db drivers, like: https://github.com/felixge/node-mysql
20:43 < neeky> there is a hello world sample on that page
20:43 < bora> Thanks a lot 
20:44 < neeky> as ORMs go, there's node-orm2
20:44 < neeky> https://github.com/dresende/node-orm2
20:44 < neeky> which supports multiple db back ends
20:44 < neeky> its close to sqlalchemy i guess
20:44 < bora> That's what I needed 
20:44 < zerodrama> like i want to write a file <?js var hello = 'Hello World'; ?><b><?js print hello; ?></b>
20:45 < zerodrama> is there a way to do that
20:45 < bora> But if you don't use an orm you have to use plain javascript don't you 
20:45 < neeky> zerodrama, you want to write and execute that file at runtime?
20:45 < kevireilly> zerodrama: it sounds like you're looing for template engines such as jade, mustache, and various other framework names i cant recall
20:45 < neeky> bora, the first example is how you connect directly to a db
20:46 < zerodrama> i want the interaction to be similar to php but in js
20:46 < neeky> similar to the ph mysql driver
20:46 < neeky> then: https://github.com/felixge/node-mysql
20:46 < neeky> thats what you want
20:46 < zerodrama> kevireilly: ya kind of want to make it lightweight and lightning fast
20:47 < bora> KK I'm on the phone right now, sorry if I missed it 
20:47 < zerodrama> thx
20:47 < neeky> tyoverby, you can do that kind of stuff with node
20:47 < kevireilly> zerodrama: ive personally chosen to use mustache and i load all the templates into memory on app start so that i dont need to perform disk i/o for every template request
20:48 < zerodrama> jade looks god damn brilliant
20:48 < neeky> create a module that does the simulations, and take as an argument a callback.  when you finishe the work, call the calback
20:48 < neeky> zerodrama, jade isn't bad
20:48 < tyoverby> neeky: I know, but each turn of the game takes about half a seccond, and while that's fine for a single client, as far as I understand, those will stack up 
20:49 < neeky> theres a LOT of view/template engines
20:49 < neeky> I'm partial to regular CSS and Hogan.js myself
20:49 < kevireilly> https://github.com/joyent/node/wiki/modules#wiki-templating
20:49 < tyoverby> neeky: how do I make the module operate on a different thread (to use the callbacks with)
20:50 < tyoverby> becaus I don't want one simulation to postpone other simulations 
20:50 < neeky> tyoverby, you don't need to, each async function will run in the main IO event loop
20:51 < tyoverby> but if I had 2 or 10,000 simulations I wanted to run at one time, would they all get different threads, or would the execute sequentially?
20:52 < tyoverby> the simulations have *no* shared state, so I'd like them to run in parallel 
20:52 < neeky> that's fine - don;t get hung up on the single thread thing :)
20:52 < tec27> does your simulation actually take .5 seconds of cpu time? or is it just waiting around?
20:53 < tyoverby> it's spinning for .5s 
20:53 < tyoverby> and I'd like to have all my cores spinning 
20:53 < kevireilly> one other thing to consider is a multiple core server and the core cluster module
20:53 < neeky> well then in THAT case, you'll want to sping up one node process per core
20:53 < neeky> yeah, what kevireilly said
20:54 < squeeks> s/per core/per hardware thread/
20:54 < tyoverby> can I do that with cluster?
20:54 < tyoverby> because, yeah, that seems like what I want 
20:54 < neeky> BUT each node process will handle GOBS of async functions in the main IO thread 
20:55 < tec27> yeah, I think this is not IO though ;)
20:55 < neeky> google ryan dahl videos node and watch a few of his videos
20:55 < tyoverby> will do 
20:55 < tyoverby> and then I'd just balance between them or something?
20:55 < neeky> he's the godfathre of node and has many good talks on the subject
20:56 < neeky> tyoverby, https://github.com/LearnBoost/cluster
20:57 < neeky> spawns workers and spreads them across cores
20:57 < Foxhoundz> how do I specify npm to download the latest available package in my package.json?
20:57 < neeky> package: 'latest'
20:57 < Foxhoundz> i.e. without providing a version number or variable
20:57 < Foxhoundz> oh...
20:57 < tyoverby> thanks a bunch neeky 
20:57 < neeky> :)
20:57 < Foxhoundz> I knew that :)
20:57  * Foxhoundz crawls back into his rock
20:57 < neeky> Foxhoundz, you should have guessed it was THAT easy 
20:57 < neeky> come on, this is node!
20:57 < Foxhoundz> I'm new to node
20:58 < kevireilly> neeky / tyoverby me was actually talking about this one http://nodejs.org/api/cluster.html
20:59 < neeky> ahh.  didnt even know that existed in core
20:59 < neeky> interesting
21:00 < daslicht> anyone into mongo db and linux here ?
21:00 < squeeks> #mongodb might be
21:01 < daslicht> yeah 
21:01 < daslicht> sleeper at work
21:01 < daslicht> heh
21:03 < neeky> isaacbw, you a reguler in #vim?
21:08 <@isaacbw> not really, I just ask questions sometimes
21:17 < Kenjiskan> hi all
21:17 < Kenjiskan> I am new in node.js and javascript
21:17 < squeeks> A dime for every time I heard that line….
21:17 < bora> Heh
21:17 <@isaacbw> I recently started making kambucha
21:18 < Kenjiskan> it's really hard to find a good tutorial on google
21:18 <@isaacbw> also I like dogs more than cats
21:18 < squeeks> cats > dogs. period.
21:18 < Kenjiskan> have you some suggestions ?
21:18 <@isaacbw> my favorite sandwich is the reuben
21:18 < squeeks> isaacbw: whiz wit, or witout?
21:18 < tyoverby> Kenjiskan: is javascript your first programming language?
21:18 < Zolmeister> dogs > cats
21:19 <@isaacbw> squeeks: lol what
21:19 < squeeks> Have you not had a philly cheesesteak yet? >:[ what rock have you been hiding under?
21:19 < Kenjiskan> tyoverby: no but I have some pain with function(function) :)
21:19 < kevireilly> ponies > (dogs || cats)
21:19 < bora> I'm new to javascript too, coming from a Python/flask background and having a hard time to understand 
21:20 < kevireilly> !have(1)
21:20 < bora> You have to learn javascript first 
21:20 < tyoverby> Kenjiskan: I hear that codecademy has a _decent_ javascript tutorial 
21:20 < bora> Reddit has a javascript session 
21:21 < bora> On learnjavascript 
21:21 < Kenjiskan> tyoverby: thank I will check that
21:21 < Kenjiskan> bora: i will check to :)
21:21 < daslicht> i love javascript 
21:22 < daslicht> but setting up severs to run mongo and js suxx
21:22 <@isaacbw> the only thing you need to understand to use javascript properly is first class functions
21:22 < daslicht> so boring crap 
21:22 < daslicht> bah
21:22 <@isaacbw> and closures
21:22 <@isaacbw> also prototypes
21:23 < bora> Yeah I learned about them a bit but still javascript code looks like Chinese to me 
21:23 <@isaacbw> and you have to be a little bit crazy
21:23 <@isaacbw> but if you aren't crazy yet, it'll come soon so no worries
21:23 < Kenjiskan> bora: did you try the RTS where you have to program everything ?
21:23 < bora> RTS? 
21:23 < Kenjiskan> real time strategy game
21:23 < bora> Nope 
21:24 < tyoverby> Kenjiskan: link?
21:24 < Kenjiskan> http://fr.reddit.com/r/learnprogramming/comments/1alfd9/javascript_learn_by_playing_rts_game_where_you/
21:24 < bora> I have a battleship game in mind 
21:25 < Kenjiskan> tyoverby: codecademy seems to be really nice
21:26 < tyoverby> Kenjiskan: If you have javascript questions, feel free pm me on redddit (assuming you have an account)
21:26 < tyoverby> my username is the same here
21:26 < bora> Codecademy is good but not enough, you have to write code on your own. It has a false sense of accomplishment 
21:26 < Kenjiskan> not yet but i will create one
21:26 < bora> Jsfiddle is very good 
21:30 < Kenjiskan> ark reading all there docs :(
21:30 < Kenjiskan> afk
21:32 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
22:05 < Stephen> so quiet here
22:05 < Stephen> process.continue();
22:06 < neeky> I've been tryin to get through some moderate/advanced vim tutorials all day
22:06 < neeky> but it seems like everybody decided to learn Node TODAY
22:07 < neeky> and me being the good guy have spent waay too much time here today teaching people how to google Node Tutorials
22:07 < neeky> if you can;t find a tutorial on how to <blank> yeat you need to delete facebook, lawyer up, and hit the gym
22:08 < neeky> tyoverby, is reddit's node /r good?
22:10 < dozn> neeky: Can you please detail me step-by-step how to use vim? Much appreciated!
22:10 < dozn> VimSlave: Can you please detail me step-by-step how to use vim? Much appreciated!
22:10 < dozn> =3
22:11 < Stephen> I'll be happy to help
22:12 < Stephen> echo "nano -w" > /bin/vim & chmod 777 /bin/vim
22:13 < Stephen> That should solve it
22:13 < VimSlave> $vim
22:13 < VimSlave> :help help
22:14 < VimSlave> Stephen, I too was new at Linux once
22:14 < VimSlave> I pico's and nano'd my heart out until I put on my big boy pants and sucked it up
22:15 < VimSlave> Hell I used gEdit until 3 months ago
22:15 < Stephen> I can use vim, when I have to. Earnestly thought Notepad++ is me daily text editor
22:15 < kevireilly> I've been thoroughly enjoying WebStorm
22:15 < VimSlave> notepad++ was my editor of choice on OS X
22:15 < krainboltgreene> Wat.
22:16 < VimSlave> but IntelliJ is dangling a mighty delicious carrot in fron of me
22:16 < VimSlave> that is a sweet dev environment
22:16 < Stephen> So, anyone here seen a js implementation of HELib?
22:16 < VimSlave> no, wait it was textwrangler
22:16 < krainboltgreene> Yeah.
22:16 < VimSlave> notepad++ was my windows editor
22:17 < VimSlave> And ultraedit for YEARS
22:17 < VimSlave> until the developer lost his damn mind
22:17 < VimSlave> about 5-6 years ago
22:17 < M2Ys4U> I've been using sublime recently
22:17 < M2Ys4U> come to like it much more than notepad++ now
22:18 < VimSlave> sublime is the one i really liked on OS X
22:18 < guybrush> i like jedit :)
22:18 < Stephen> I miss the days when running windows and replacing the shell was awesome
22:18 < VimSlave> but on Linux I'm squarely on the Vim bandwagon
22:19 < VimSlave> notepad++ and irfanview are the two best windows utility apps that ever existed
22:19 < Stephen> You mean that's the editor you vi for?
22:19  * Stephen drumrolls
22:19 < VimSlave> but I've been windows free for 4 years and 10 months
22:20 < VimSlave> http://instantrimshot.com/
22:21 < VimSlave> ok, back to :help learnvim
22:22 < Stephen> So, I need a way to do homomorphic encryption, with at least part implementation in js
22:22 < Stephen> the manipulation functions
22:22 < Stephen> thoughts?
22:23 < squeeks> Good luck, let us know how you go.
22:27 < Stephen> lmao
22:28 < Stephen> This chan is so much more sane than #jquery
22:32 < Skullclown> according to the socket.io wiki, I'd be able to serve a standalone client by just serving the file they provide.
22:33 < Skullclown> however, on another page of socket.io, they mention "subfolder /dist" of the git repo, but this subfolder doesn't exist.
22:33 < Skullclown> serving only the file they mentioned gives the error "failed to require "socket.io" from "root""
22:33 < Stephen> dist is created after a build
22:34 < Skullclown> Stephen: oh. thanks. 
22:34  * Skullclown feels like a fool today.
22:34 < Stephen> and, have you installed socket.io to the directory you're running the client in?
22:35 < Stephen> node want every lib local these days
22:35 < Skullclown> I'm running a node.js server with socket.io installed
22:35 < Skullclown> and I need to serve a client with standalone socket.io
22:36 < Stephen> a node or browser client?
22:36 < Skullclown> so no, the client does not have socket.io installed, I thought that was the point of standalone?
22:36 < Skullclown> browser client
22:37 < tyoverby> how do you "build" to create the 'dist' folder?
22:37 < Skullclown> tyoverby: npm install socket.io did it for me
22:37 < Skullclown> ./node_modules/socket.io/node_modules/socket.io-client/dist/
22:37 < Skullclown> afaik, there's also just a socket.io-client repo
22:38 < tyoverby> ahh, I see 
22:38 < tyoverby> thanks 
22:38 < Stephen> http://socket.io/#how-to-use
22:39 < Skullclown> Stephen: yeah, that webpage doesn't give too much accurate info on how to deploy the standalone client though.
22:39 < Skullclown> neither does the wiki
22:39 < tyoverby> yep, the info page on that site is next to useless 
22:40 < Stephen> ah, i know our issue
22:40 < Stephen> I ran into the same thing when trying to run the client in a Firefox extension
22:40 < Stephen> same domain plicy shit
22:40 < tec27> websockets don't have a same domain policy
22:41 < Skullclown> yeah
22:41 < tyoverby> yes they do 
22:41 < Stephen> I know
22:41 < tec27> are you just having trouble finding the client js file?
22:41 < tyoverby> at least on chrome they do 
22:41 < tec27> no tyoverby, they don't
22:41 < Stephen> I'm betting your problem is that when you try to connect with a standalone client js in a browser, it doesn't work
22:41 < tyoverby> whatever the default transport for socket.io is does 
22:42 < Stephen> But, if you try to connect using the client js file served from the server, it works great
22:42 < tec27> yeah, socket.io tries to go through many different options
22:42 < tec27> including XHR-based alternatives
22:42 < tec27> but websockets themselves have no such restriction
22:42 < Stephen> tec27 is right
22:43 < Stephen> it's not a websocket thing
22:43 < Stephen> It's a socket.io thing
22:43 < tec27> you can enable/disable specific transports for socket.io
22:43 < Stephen> and I have no idea why the restriction is there
22:43 < tyoverby> my mistake, I thought socket.io used websockets if you have them 
22:43 < Stephen> It does
22:43 < tec27> its not a "mistake"
22:43 < tec27> its just how it works
22:43 < tyoverby> what?
22:43 < tec27> it prefers websockets but not all browsers implement them
22:44 < tec27> so it moves through the worse alternatives until it finds the best one
22:44 < Stephen> It uses a Flash fallback after websockets, then XHR, then long-poll
22:45 < tec27> https://github.com/LearnBoost/engine.io#goals see there for more info on why iit has that ordering :)
22:45 < Stephen> Then styrofoam cupsd through a String()
22:46 < tec27> anyway, you can enable/disable specific transports through the server, I'm sure how to directly manifest that in a standalone client JS
22:47 < tec27> the way it works with the server is that the client makes an HTTP request and the server returns what transports are supported
22:50 < codebone> Hey, is there any current support for node.js in the latest cygwin?
23:08 < Skullclown> socket.io client connect to the server, server displays "client authorized" and even "Sent: hello", but the client never logs anything. only when I stop the server, the client suddenly logs "connected", "hello" and "disconnected" all at the same time?
23:23 < Skullclown> is it me, or is the basic socket.io documentation crap?
23:24 < squeeks> you know you can fix it, right?
23:24 < Skullclown> squeeks: I also meant the info on http://socket.io
23:25 < Skullclown> I don't often complain about docs, any kind of info is better than none.. but socket.io is doing an incredibly good job at not helping to get started
23:28 < codebone> Is there any way to get node.js 0.6.16 to run through cygwin? It has to be through cygwin because it is required to connect cloud9 ide via ssh.
23:31 < mscdex> codebone: sounds like a cloud9 bug
23:33 < codebone> Well cloud9 just states that it requires 0.6.16 or higher to run. But no version above 0.4.12 is supported by cygwin apparently
23:33 < codebone> *on cygwin, sorry
23:34 < tec27> Skullclown: socketio documentation is mostly just examples, yeah
23:34 < tec27> I think the wiki has some more complex examples that you might find helpful
23:35 < tec27> and some other info about the protocol: https://github.com/learnboost/socket.io/wiki
23:35 < tec27> I mostly just read the source when I want to know something though :)
23:38 < Skullclown> tec27: I've been messing around with serving the client myself for the past hour or so :)
23:38 < mscdex> codebone: the only Windows environment that's really supported is MSVC, which is what the Windows binaries from nodejs.org are built with
23:38 < Skullclown> depending on what website you're on, you get different info. http://socket.io has different info than socket.io wiki which in turn has other info than stackoverflow examples, ...
23:39 < tec27> yeah, the github is out of sync with the currently released version, I think
23:39 < tec27> and the wiki is, I think, generally behind the currently released version
23:39 < tec27> so no matter where you look you have to be careful that things haven't changed
23:39 < tec27> sucks
23:39 < Skullclown> my first question is if it's possible to serve the client & swf locally, without http server
23:39 < Skullclown> e.g. on a mobile phone on phonegap
23:40 < tec27> I think it should be
23:40 < tec27> you may want to look how the non-JS servers are serving it
23:40 < jfisk1987> do embedded documents also have _ids?
23:40 < tec27> since I assume they're using the same client-side code
23:42 < M2Ys4U> codebone: You can use the windows (MSVC) binaries from the cygwin terminal. There's some issues with stdin that I've run across but otherwise it seems to work ok
23:49 < codebone> Thanks, I will look into MSVC right now
23:54 < Skullclown> socket.io seems to be working and is connected (server triggers connected event + sends message) but the client just doesn't seem to receive anything. client just hangs until I stop the server (and it closes the socket) - when I do that, the client suddenly displays the "connected!" message, the "hello!" message and then some errors because it disconnected
23:56 < tec27> do you have any code I could see?
23:57 < Skullclown> tec27: posting it to pastebin right now, give me a second
23:58 < tec27> kk
23:58 < Skullclown> server http://pastebin.com/Q0iP9MTN
23:58 < Skullclown> client http://pastebin.com/DEpLuujV
--- Log closed Sun Jun 23 00:00:14 2013
