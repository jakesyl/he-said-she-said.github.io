--- Log opened Wed Sep 19 00:00:41 2012
00:40 < ang3lfir3> :( pandora kinda being crappy
00:41 < mscdex> openpandora? ;-)
00:42 < ang3lfir3> no the pandora service :p 
00:42 < ang3lfir3> lol :p
00:43 < ang3lfir3> stupid flash based website .... I would pay if I could log in 
00:43 < ang3lfir3> but since its all flash ... and I refuse to install flash .... etc etc etc
00:46 < mscdex> what about gnash?
00:49 < ang3lfir3>  . /whatis gnash
00:49 < ang3lfir3> ???
00:49 < mscdex> an open source flash implementation
00:49 < ang3lfir3> ohhh a swf player..... meh the point is that I want swf to foadif
00:51 < ang3lfir3> thanks for trying tho
00:51 < ang3lfir3> :) 
00:52 < myndzi> what's the npm command that adds things to your package.json?
00:52 < tjholowaychuk> --save
00:52 < myndzi> ah, thanks
01:02 < plato> WHOA no shit
01:02 < plato> that's handy
01:04 < wilornel> Hey guys, I have a ubuntu server on which I am running my node.js files. On the unbutu server, I did a test.html file which will be server for the clients and a serverSocket.js file which I run using node. When I go on my windows pc, and go to my server's website, I can see the test.html webpage, node also notifies me of a connection being made. Now, I want to include socket.io files into my 
01:04 < wilornel> test.html in order to make commands from the client file... I does not work..
01:07 < wilornel> Do I src http://192.168.0.108:1337/socket.io/socket.io.js?
01:07 < mscdex> wilornel: http://socket.io/#how-to-use
01:07 < wilornel> or just socket.io/socket.io.js? Because I my filetree looks like this: /var/www/node_modules/socket.io/lib/socket.io.js
01:07 < wilornel> I have node on /home/slackware/work-area/node
01:09 < ang3lfir3> that was fun
01:09 < wilornel> angel, you didnt see what I wrote huh? :/
01:09 < ang3lfir3> prolly not
01:09 < wilornel> do you know how to require files on a client-sided file properly?
01:10 < ang3lfir3> that sample does everything you need to do ... with socket.io
01:10 < wilornel> What sample?
01:11 < ang3lfir3> the one i posted... .any way... you need a script tag that requests "/socket.io/socket.io.js"
01:11 < ang3lfir3> erm that src's 
01:11 < ang3lfir3> that will serve the client side script
01:11 < wilornel> yeah I know its src, but socket.io/socket.io.js does not work
01:11 < wilornel> should I do localhost:1337/socket.io/socket.io.js?
01:11 < ang3lfir3> then chances are something else is wrong
01:12 < wilornel> Hm...
01:12 < wilornel> My filetree looks like this: node: /home/slackware/work-area/node
01:12 < wilornel> socket.io : /var/www/node_modules/socket.io/lib/socket.io.js
01:12 < ang3lfir3> i thought you said it was ubuntu?
01:12 < ang3lfir3> not that it mattesr
01:13 < ang3lfir3> s/mattesr/matters
01:13 < wilornel> it IS ubuntu, I've been using slackware for years, I never knew slackware was a linux distro
01:13 < ang3lfir3> lol OH
01:13 < wilornel> slackware username, sorry
01:13 < wilornel> :P
01:13 < ang3lfir3> that gave me a chuckle
01:13 < wilornel> so yeah, they are on different directories, is taht okay?
01:13 < ang3lfir3> what is on diff directories?
01:13 < wilornel> the files, wait
01:14 < wilornel> My filetree looks like this: node: /home/slackware/work-area/node
01:14 < wilornel> socket.io : /var/www/node_modules/socket.io/lib/socket.io.js
01:14 < wilornel> HOw do I need to src the socket.io in that case?
01:15 < ang3lfir3> i guess you can just try to source it with the full path.... guessing you tried that tho and got nuthin
01:15 < wilornel> I am just going to use it from 
01:16 < wilornel> http://cdn.socket.io/stable/socket.io.js
01:16 < ang3lfir3> thats an acceptable answer :p
01:17 < wilornel> hehe :P, Well now we know the .js file is loaded for the client-sided file, but I get the error : Object #<Object> has no method 'connect'
01:21 < ang3lfir3> anyone use OrientDB?
01:21 < wilornel> ang3l! D:
01:21 < ang3lfir3> what did i do now?
01:22 < wilornel> You did nothing bad, Its just that I thought you'd help me
01:22 < ang3lfir3> lol ... that was your first mistake!!! :) :) :) 
01:22  * ang3lfir3 not very helpful
01:22 < wilornel> :/
01:22 < ang3lfir3> there is no connect cuz thats prolly not right stuffs
01:23 < wilornel> there is no METHOD 'connect'
01:23 < ang3lfir3> that is prolly node code ... not client code
01:23 < wilornel> interesting
01:24 <@konobi> the connect method is a http proxy verb
01:24 < wilornel> well on my code its: io.connect
01:24 < wilornel> so it must be related to socket.io
01:27 < ang3lfir3> does the server side actually connect to the http server?
01:27 < wilornel> yes
01:28 < ang3lfir3> you using http or express?
01:29 < wilornel> http
01:31 < ang3lfir3> i can only guess that its a config problem.... I would start over with something simple and try and keep things to gether
01:31 < wilornel> It IS simple :(
01:31 < ang3lfir3> lol
01:31 < wilornel> Alright I think I'll have to experiment a bit...
01:32 < deoxxa> isaacs: i want to publish a package called "npmrc" for switching between different .npmrc files, am i going to conflict with anything you're going to want to publish in the forseeable future?
01:32 < ang3lfir3> http://github.com/ang3lfir3/socketsamples  <<< I've deployed the time_server one to heroku and it works ok "except for they don't support sockets"
01:33 < wilornel> where are your client-side files?
01:33 < ang3lfir3> it just uses npm to install locally
01:33 < ang3lfir3> cuz its heroku
01:33 < wilornel> ugh >.<
01:34 < deoxxa> ang3lfir3: nodejitsu support websockets
01:34 < ang3lfir3> deoxxa, it was just a toy ... :p and nodejitsu is great
01:35 < deoxxa> indeed :3
01:35 < ang3lfir3> <3 
01:35 < ang3lfir3> im outty ... this boat has docked
01:40 <@konobi> is Cian on IRC usually?
01:47 < wilornel> guys, when the function 'require' is used, where does node.js searches?
01:48 < wilornel> where should I install my modules? in /var/www or into my node folder?
01:48 < gabrieluk> you should use npm to install your modules buddy, with the terminal
01:49 < gabrieluk> wilornel, http://howtonode.org/introduction-to-npm
01:50 < wilornel> yes but WHERE should I install the modules?
01:51 < gabrieluk> inside your node app. unless is a module that needs the cli. so you use -g to install globally
01:51 < wilornel> so it shouldnt be in /var/www/node_modules/socket.io
01:51 < wilornel> right?
01:52 < gabrieluk> mm, if you have your app at /var/www, yes
01:53 < wilornel> thats what I did and I cant get my files to work..
01:53 < gabrieluk> you should make a new user on the linux box, and work in the ~ folder
01:53 < gabrieluk> not at var/www
01:54 < gabrieluk> you might have permission issues or something as var/www is at root level
01:54 < wilornel> I want to try to fix my issue before doing that kind of stuff
01:54 < gabrieluk> mate, you are wrong, do first the basics
01:54 < wilornel> I am root
01:55 < gabrieluk> you should actually do all this on your local machine first
01:55 < wilornel> my local machine is windows
01:55 < wilornel> I DONT want to try to fix things on cygwin..
01:55 < gabrieluk> so install virtual box, then put ubuntu there, is very easy
01:55 < wilornel> thats waht my ubuntu server is..
01:55 <@konobi> or just use windows... noejs works on windows
01:56 < wilornel> my problem: Uncaught ReferenceError: io is not defined
01:56 < wilornel> I need to fix only that.
01:57 < deoxxa> so i just made https://github.com/deoxxa/npmrc  - it's a time saver if you use multiple npm registries (e.g. for work)
01:57 <@konobi> wilornel: enoidea
01:58 < wilornel> :/
01:58 < gabrieluk> do things properlly, you will avooid a lot of erros
01:58 < qubit[01]> +1 konobi 
01:59 < wilornel> gabrieluk: everything worked before that error... 
01:59 < wilornel> Anyways you're not helping...
01:59 <@konobi> then roll back what you did
02:00 <@konobi> then work out what's going on and then pastebin it
02:00 < wilornel> I didnt even have client-sided stuff before. I have just implemented it and hit a wall
02:00 <@konobi> if it's `var socket.io = require('socketio')` you're in trouble
02:00 < wilornel> I cannot roll back to only server-sided
02:00 < wilornel> no its var io
02:01 < wilornel> require('socket.io')
02:01 <@konobi> var io = require('socket.io') ?
02:01 < wilornel> yes
02:01 < wilornel> on my client-sded file, I have no problem with the <script src > stuff, I have no !GET error
02:01 < wilornel> when I get to the file, my server receives a connection
02:02 < wilornel> but, Uncaught ReferenceError: io is not defined
02:02 <@konobi> ah... async client call?
02:02 < wilornel> what?
02:03 <@konobi> so this question is on the client side?
02:03 < wilornel> yes
02:03 <@konobi> wilornel: there's a #socket.io or #socketio channel
02:03 < wilornel> .......
02:04 <@konobi> on the server side we could help you out somewhat, but on the clientside, that's socket.io specific
02:04 < wilornel> alright then...
02:04 <@konobi> =0)
02:20 < foobah> hello!
02:20 <@Nexxy> foobah, greetings and salutations
02:20 < foobah> im playing with the irc client from node-ncurses
02:21 < foobah> im debating whether to implement an app twice (in python or C for CLI, js for w
02:22 < foobah> eb or doing it once in js and using node for CLI
02:41 < wilornel> I receive the socket.io.js file but its empty, is it normal? http://screencast.com/t/HPAjAqV13q8q
02:55 < ChrisPartridge> wilornel: nope, thats not normal
02:56 < wilornel> Alright, thanks
03:18 < jasonkuhrt> I'm new to nodejs, for new Buffer('test'.toString(utf8)) is there anything wrong with that? aside from being useless?
03:18 < jasonkuhrt> I'm getting reference errors of the string name
03:19 < jasonkuhrt> so ReferenceError: test is not defined
03:19 < jasonkuhrt> etc
03:19 < jasonkuhrt> but it's a string?
03:19 < mscdex> jasonkuhrt: if you're trying to create a buffer from a utf8 string, i think you want `new Buffer('test', 'utf8')`
03:19 < jasonkuhrt> even though the default for buffer is utf8?
03:20 < mscdex> i don't recall, if it is the default, you can leave off the encoding: `new Buffer('test')`
03:20 < jasonkuhrt> doesn't seem to change either way
03:20 < jasonkuhrt> still ReferenceError: test is not defined
03:21 < jasonkuhrt> hm
03:21 < mscdex> jasonkuhrt: do you have the string in quotes?
03:21 < jasonkuhrt> not problem with Buffer sorry
03:21 < jasonkuhrt> ya
03:21 < jasonkuhrt> it works if I do just new Buffer( "test");
03:21 < jasonkuhrt> problem seems to be what happens after that
03:21 < mscdex> jasonkuhrt: can you paste your code please?
03:22 < jasonkuhrt> mscdex:https://gist.github.com/3747347
03:22 < jasonkuhrt> meteor package
03:22 < jasonkuhrt> trying to get js to yaml
03:22 < jasonkuhrt> err
03:22 < jasonkuhrt> yaml to js
03:22 < jasonkuhrt> sec
03:23 < jasonkuhrt> ok I figured out my problem
03:23 < jasonkuhrt> meteor takes the buffer and executes it
03:23 <@Nexxy> how magical
03:23 < jasonkuhrt> so test is a reference error
03:23 < jasonkuhrt> but "test = 'test'"
03:23 < jasonkuhrt> isnt
03:23 < jasonkuhrt> etc.
03:24 < jasonkuhrt> just my lack of understand of meteor, absolutely nothing to do with Buffer here
03:24 < mscdex> jasonkuhrt: js_yaml.load() returns an object not a string or array, which the Buffer() constructor is expecting
03:24 < mscdex> at least according to their documentation
03:24 < jasonkuhrt> ya but then it's `toString`ed
03:24 < jasonkuhrt> so should be fine
03:25 < substack> meteor doesn't have much to do with node
03:25 <@Nexxy> or anything
03:25 < jasonkuhrt> ya I know
03:25 < mscdex> no, it's not, you're calling toString() on contents
03:25 <@Nexxy> for that matter
03:25 <@Nexxy> unless you just really love writing useless demos
03:25 < jasonkuhrt> pardon me
03:25 < jasonkuhrt> thank you for the catch, late here
03:25 < mscdex> :-)
03:25 < jasonkuhrt> Nexxy: nice
03:26 < mscdex> i have to admit i'm not a fan of meteor either
03:26 < mscdex> or yaml :->
03:26 <@Nexxy> I can't imagine why.
03:28 < Daegalus> i like yaml, but i dont like meteor
03:28 < jasonkuhrt> when I go into the haskell irc they take a pretty hard shit on js and node so I kind of figure everyone just has different needs and intents... to some degree anyway
03:28 < substack> jasonkuhrt: you should link them to https://github.com/substack/stream-handbook
03:28 < substack> haskell's module system is terrible
03:29 < jasonkuhrt> I know very little so cannot comment atoll
03:29 < substack> and static types make it really hard to change your mind about how the pieces should fit together later
03:29 < jasonkuhrt> all I say was some tidy graph of haskell warp serve towering over nodejs performance
03:30 < substack> and the proliferation of different incompatible types makes it really hard to stitch multiple libraries together
03:30 < jasonkuhrt> server*
03:30 < jasonkuhrt> substack: would be interested to see you take that to the irc and see what they say
03:30 < substack> most of my time writing haskell was spent figuring out how to figure out how to convert the types I had into the types a library wanted
03:31 < substack> jasonkuhrt: I was in ##haskell for 3 years or so
03:31 < jasonkuhrt> sounds like its amazing anything gets done in haskell then
03:31 < substack> pretty much
03:31 < jasonkuhrt> programming while handcuffed
03:31 < jasonkuhrt> shitty deal
03:32 < jasonkuhrt> the benchmark thingy: http://www.yesodweb.com/blog/2011/03/preliminary-warp-cross-language-benchmarks
03:33 < jasonkuhrt> not sure if its bias for haskell or not, or if node improved 100's of % since then, a little old
03:33 < substack> also the RTS thread scheduler sucks so hardcore
03:33 < substack> give me kernel process scheduling any time
03:34 < luite> hm, that won't work so well with 100k threads
03:34 < substack> fighting the RTS to keep it from starving your threads is not fun
03:34 < substack> luite: then don't use threads
03:35 < substack> haskell is what lead me to conclude that threads are a fundamentally bad abstraction
03:35 < substack> I can understand why they suck so much in c++ or python with side effects and mutexes
03:35 < substack> but haskell has no excuse on account of STM and IO purity
03:36 < substack> threads make writing reusable libraries so difficult
03:37 < luite> i haven't heard about this starving issue before btw.... in exceptional cases a thread can block a capability (the system-level thread on which the green thread runs), and foreign calls
03:39 < luite> but with the threaded runtime, blocking foreign calls don't need to block the haskell runtime
03:42 < substack> luite: I spent so much time fighting starvation it was so absurd
03:42 < substack> my app would sometimes lock up for 30 seconds or more as a busy thread that I didn't care about ate all the cpu
03:43 < substack> I was expecting the scheduling to resemble kernel scheduling but that's not at all how it works
03:43  * mscdex shakes a fist at Haskell
03:44 < luite> it's possible if you have the non-threaded runtime, that a single thread blocks everything, if you have a haskell thread that's doing a very simple but long-running without heap allocation (really very simple, a single recursive function that's completely unboxed by the optimizer)
03:45 < luite> and the other common case are blocking or unsafe foreign calls
03:45 < substack> I had foreign calls
03:46 < luite> the scheduler is preemptive, but only works when the thread has exhausted its allocation area, the scheduler then runs witht he garbage collector.
03:46 < substack> the RTS people probably were just optimizing for their own idealized sense of what people should be doing instead of what people actually need
03:46 < substack> which is true of any project managed by too many people
03:46 < substack> too many people is usually about 3
03:46 < luite> but making non-allocating loops in haskell is pretty hard, the whole thing is built around making heap allocation extremely cheap, so most commond code allocates gigabytes per second
03:46 <@Nexxy> academia
03:47 < substack> Nexxy: this is not about academia or industry, it happens everywhere
03:47 < substack> the problem is too many people on the same project
03:47 < luite> most of the threading and rts improvements were funded by industry
03:47 < substack> because projects are too big
03:47 < luite> academia is more interested in type system extensions or similar
03:47 < substack> because they have unbounded scope
03:51 <@Nexxy> you guys, Betty White is giving away Tide detergent
03:51 <@Nexxy> sorry wrong channel
03:52 < ChrisPartridge> :|
03:52 < pyrotechnick> >.<
03:56 < mscdex> Nexxy: this is the right channel!
04:15 <@Nexxy> mscdex, oh good :D
04:17 < nickhs> Hey there, I have the following line request(url).pipe(fs.createWriteStream(filename)).on('end', doneFunc); but for some reason doneFunc never gets called, am I doing it wrong? Note the library request library is https://github.com/mikeal/request
04:23 < mscdex> nickhs: pipe() returns the destination stream, not the source stream
04:24 < mscdex> nickhs: maybe try listening for 'end' on request(url)
04:24 < nickhs> mscdex: you're saying I need to swap the pipe and on bits around?
04:24 < mscdex> nickhs: i don't know for sure, i've never used request
04:25 < mscdex> nickhs: i'm not sure WritableStreams emit 'end' generally
04:25 < mscdex> they emit 'close' when the underlying fd is closed
04:26 < mscdex> you could try that instead
04:31 < nickhs> mscdex: the on('close') worked perfectly (in the order you mentioned). Thanks!
04:32 < mscdex> nickhs: ok, it should work the way you had it too, except use 'close' instead of 'end'
04:32 < thealphanerd> anyone in here a stanford student or grad?
04:33 < mansoor-s> thealphanerd, sup
04:33 < mscdex> thealphanerd: what if we play one on tv?
04:33 < thealphanerd> mansoor-s: new arrival on the farm… know where I can grab a beer on campus at this time /
04:33 < thealphanerd> LOL
04:34 < mansoor-s> i jest
04:34 < thealphanerd> sitgh
04:34 < mansoor-s> :D
04:34 < mscdex> :-)
04:34 < mansoor-s> thou shall not have beer!!
04:34 < thealphanerd> mscdex: can I have your autograph?
04:34 < mansoor-s> atleast tonight
04:34 < mscdex> thealphanerd: just take a screenshot of my irc nick
04:34 < thealphanerd> looks like its single malt for me
04:34 < thealphanerd> damn you maccallan 12 year… 
04:34 < thealphanerd> oh wait its a 15 :D
05:00 < TehShrike> Oh wow.  LispyScript is awesome.
05:01 < gkatsev> lispyscript?
05:01 < gkatsev> another one?
05:01 < gkatsev> geez
05:02 < TehShrike> http://lispyscript.com/
05:02 < TehShrike> That looks awesome
05:02 < ChrisPartridge> oh noes
05:03 < TehShrike> That just tickles me so much
05:03 < gkatsev> they couldn't also choose fun/def instead of full function?
05:03 < gkatsev> but it does look pretty cool
05:04 < TehShrike> I'm going to have to try this
05:09 < jaredoconnor> does anyone know how to disable logging in socket.io?
05:12 < samholmes> what's the ios browser support with sockjs?
05:12 < ChrisPartridge> jaredoconnor: io.set('log level', 0) ?
05:13 < jaredoconnor> i tried that, but i still get a message when the app starts
05:13 < jaredoconnor> i think it is because io.set gets called after .listen
05:13 < jaredoconnor> do you know if there is any way to turn off logging before a socketio object starts?
05:14 < ChrisPartridge> jaredoconnor: look at io.configure - it's all in the docs
05:14 < jaredoconnor> io.configure is always going to run AFTER the server is started though
05:15 < jaredoconnor> meaning, the log level will be set after the "   info  - socket.io started" message
05:17 < jaredoconnor> am i wrong ChrisPartridge ?
05:17 < jaredoconnor> wait, i think .listen(port, options) might work
05:18 < jaredoconnor> ok that worked.
05:19 < ChrisPartridge> yay :)
05:19 < jaredoconnor> thanks
05:35 < abstrax> hi
05:36 < abstrax> is there someoe whose good with node and also knows about haml ?
05:49 < mansoor-s> abstrax, such a person does not exist
05:50 < abstrax> damit
06:01 <@Nexxy> abstrax, what is the question?
06:03 < rknLA> abstrax: i'm decent at node and know about haml.
06:04 < abstrax> guys
06:04 < mansoor-s> gals
06:04 < rknLA> i've never used them together, but i've used both of them before.
06:04 < abstrax> i am executing user submitted code via haml, but sometimes bad things happen - see this code - http://pastie.org/private/77kkyr120tu4gtjfvwjkea
06:04 < rknLA> aliens.
06:04 < mansoor-s> ^^ #truth
06:04 < abstrax> what should i do ? how should i do it safely ?
06:04 < abstrax> i thought it would be safe enough :(
06:05 < abstrax> it should give haml parse errors
06:05 < rknLA> abstrax: use markdown instead of haml?
06:05 < abstrax> no thats the app, lol.
06:06 < rknLA> what BadThings™ happen?
06:06 < abstrax> it lists folders from /home
06:06 < rknLA> user submitted haml??
06:06 < abstrax> try the code, put it in a file and execute it via node
06:06 < rknLA> no.
06:06 < abstrax> it lists /home/* for me in the output
06:06 < rknLA> explain your problem more.
06:07 < abstrax> whereas it should maybe through error cuz thats invalid haml or maybe just dump <pre></pre>
06:07 < abstrax> the part between `` gets executed as command
06:07 < abstrax> not getting me ? :O
06:08 <@Nexxy> abstrax, https://github.com/creationix/haml-js
06:08 < rknLA> so, it puts an `ls -la` into a haml %pre block, writes it to the haml parser, then writes the parsed haml to stdout?
06:08 < abstrax> it puts all directories list inside pre tags and outputs that
06:09 < rknLA> ... and the problem is that haml interprets some of the characters in your directory listing in ways you don't want?
06:09 < abstrax> what you would generally see by executing $ ls -al /home
06:09 < abstrax> Nexxy: i cannot use that
06:09 <@Nexxy> you're rendering user submitted haml, yes?
06:09 < abstrax> yes
06:09 < abstrax> and when user submits some command like that, it executes on the server
06:09 <@Nexxy> lol
06:09 < rknLA> it appears that it only puts the directory list into a single pre block...
06:09 <@Nexxy> great idea.
06:10 < abstrax> so ps ax | grep smth executes that command and lists the output
06:10 < rknLA> haml is not generally for user submitted content.
06:10 < rknLA> http://chriseppstein.github.com/blog/2010/02/08/haml-sucks-for-content/
06:10 < abstrax> see you are not getting me, its a feature of my app. instead of writing plain html, if someone wants he can write in haml and i need to render for him
06:10 <@Nexxy> by letting them execute commands on your server?
06:10 <@Nexxy> uh huh.
06:10 < rknLA> riiight.
06:10 < abstrax> the thing is it shouldnt
06:11 < abstrax> i dont unsderstand why it does
06:11 < ChrisPartridge> abstrax: sanitize your user input before you pass it through.. it's not hamls fault
06:11 < rknLA> ^^
06:11 < abstrax> and how do i sanitize it ? i thopught spawn would be sane enough.
06:11 < abstrax> i thought i would have to sanitize if i used exec
06:11 < rknLA> based on its name, i'm guessing spawn is similar to exec?
06:11 <@Nexxy> you best be trollin'
06:11 < abstrax> it just passes code to haml (spawn) and then i guess haml handles it. and it should throw errors on weird =`
06:11 < ChrisPartridge> abstrax: not really much difference tbh..
06:12 < abstrax> i am not trolling, but maybe i dont know. ok tell me how to sanitize ?
06:12 < rknLA> i'd suggest supporting a subset of haml by modifying the haml node package, or modifying the parser.
06:12 < wookiehangover> http://b.gif.ly/k/?src=/72f44b24.gif
06:12 < rknLA> if you want haml instead of html, then you want exactly none of the %div= features.
06:12 < ChrisPartridge> abstrax: you probably need to create a isHaml method, to check the data passed is actually haml
06:12 < pyrotechnick> it IS valid haml
06:12 < rknLA> wookiehangover: took me a minute to realize my mouse controlled that...
06:12 < abstrax> man...
06:13 < pyrotechnick> but it's also a shell command
06:13 < pyrotechnick> that's executed as it's streamed into haml by node or the OS
06:13 < pyrotechnick> not sure which layer is doing the execution
06:13 < pyrotechnick> but it does not happen on OSX
06:13 < pyrotechnick> only ubuntu
06:13 < abstrax> isHaml means
06:13 < abstrax> writing my own haml parser
06:13 < pyrotechnick> that wont help
06:13 < abstrax> i dont know what you are saying and it is valid haml
06:14 < pyrotechnick> your isHAML will say yes it's haml
06:14 < pyrotechnick> and this will still be a problem
06:14 < wookiehangover> rknLA: http://b.gif.ly/k/?src=/a51ff13e.gif
06:15  * rknLA takes moar drugs
06:15 < rknLA> the pulsating on that one is rad.
06:15 < abstrax> my last resort is to probably use the ruby app to do the parsing. i used node because its liek 2.5x faster
06:15 < ChrisPartridge> abstrax: why not try the node haml package?
06:16 < pyrotechnick> can that load in any image?
06:16 < rknLA> http://stackoverflow.com/questions/8482208/any-client-side-haml-parser
06:16 < pyrotechnick> ChrisPartridge: he wants canonical haml
06:16 < abstrax> if haml has some new feature that people want, i dont know when haml-js will be updated to contain that feature
06:16 < rknLA> canonical haml is not a replacement for html,
06:16 < rknLA> it is a replacement for erb.
06:16 < abstrax> its best to use the ruby. just like i am using js for jade.
06:16 < rknLA> abstrax: then update it!
06:16 < rknLA> ;)
06:16 < wookiehangover> pyrotechnick: yes, coldhead wrote it http://coldhead.github.com/kaleidos/
06:17 < abstrax> ...
06:17 < wookiehangover> that page takes a ?src=[imagepath]
06:17 < abstrax> you make me sad now
06:17 < abstrax> can you just help me out find why the command gets executed ? when it should not
06:18 < rknLA> which command is getting executed that shouldnt?
06:19 < abstrax> did you see http://pastie.org/private/77kkyr120tu4gtjfvwjkea ?
06:19 < rknLA> yeah.
06:19 < abstrax> `ls -al /home`
06:19 < abstrax> gets excuted, the contents are printed within pre tags
06:19 < abstrax> whereas that should throw validation errors from haml in reality.
06:20 < rknLA> erm... when does it get executed?
06:20 < rknLA> if bin/haml is using ruby, then ruby is going to run that command, because backticks are ruby syntax for "run this in the shell"
06:20 < rknLA> using %pre= invokes ruby
06:21 < abstrax> just came to know that now while googling
06:21 < rknLA> so, i guess we helped you figure out why that command gets executed then? =)
06:21 < abstrax> you did thanks, but i googled before you. but thanks for being helpful. i wasnt trolling, as you can see.
06:22 < rknLA> yeah... tbh, i could have probably told you that as soon as you asked had i better understood your question.
06:22 < rknLA> "in the code at http://pastie.org/private/77kkyr120tu4gtjfvwjkea, can someone tell me why the `ls -al /home` is getting executed?"
06:23 < rknLA> part of the confusion was that i thought you wanted that to be executed.
06:23 < rknLA> just remove the =
06:24 < rknLA> but still, the folks suggesting that you write your own isValidHaml method are spot on. if it's user-generated, and you're running some sort of unix command to generate something from the user input, you NEED to sanitize it.
06:24 < mansoor-s> i trust my users
06:24 < mansoor-s> and so should you
06:24 < mansoor-s> My new article on hacker news
06:24 < mansoor-s> :S
06:25 < abstrax> rknLA: well
06:25 < abstrax> i thought if user passes in anything useless, haml would produce errors if it cant understand. am i wrong in the asusmption ?
06:25 < abstrax> spawm passed the code as it is to the haml executable
06:26 < rknLA> haml will produce errors if the user gives something syntactically incorrect.
06:26 < rknLA> but the user can provide something malicious that is syntactically valid.
06:26 < rknLA> like %pre=`rm -rf /`
06:26 < rknLA> totally valid haml.
06:26 < rknLA> totally NOT something you want to run in the shell.
06:27 < rknLA> (you'll probably get permissions errors with that particular case, but hopefully you get the point)
06:29 < pyrotechnick> it's my understanding haml is implemented like coffeekup i.e. it's just ruby
06:29 < pyrotechnick> yes or no?
06:29 < abstrax> yes
06:29 < abstrax> its just ruby
06:29 < rknLA> i'm not familiar with coffeekup
06:29 < abstrax> rknLA: thanks man
06:29 < pyrotechnick> coffeekup is templates with coffeescript but theres no parser or anything it's just executed
06:30 < abstrax> i am such an idiot
06:30 < abstrax> call me  atroll now i deserve it
06:30 < rknLA> there's a subtle, but important, distinction between being ignorant and being a troll
06:30 < rknLA> oh so haml is just implemented as a set of methods?
06:30 < rknLA> %body is a method?
06:31 < rknLA> that's cray
06:31 < abstrax> its just ruby code that does parsing
06:31 < abstrax> like jade
06:31 < rknLA> oh you mean bin/haml
06:31 < rknLA> not haml syntax
06:31 < rknLA> right.
06:31 < rknLA> yeah, that makes 100% sense.
06:32 < rknLA> from the sound of it, haml is probably more like jade than coffeekup.
06:32 < rknLA> hey so tangentially..
06:32 < abstrax> let e fire up the ruby version of my app and see what happens
06:32 < rknLA> does anything like capybara or webkit exist for node testing yet/
06:32 < pyrotechnick> soda
06:32 < pyrotechnick> phantom
06:33 < rknLA> pyrotechnick: thanks.
06:33 < pyrotechnick> there's gherkin stuff if you want it
06:34 < sinsco> hi
06:34 < pyrotechnick> webdriver is supposedly being evolved to use JSON
06:34 < pyrotechnick> but i wouldn't hold your breath
06:34 < sinsco> bla bla
06:34 < pyrotechnick> i much prefer the more hackier ways like substacks and there's one im looking for to link you now
06:35 < pyrotechnick> ones that proxy or inject iframes
06:35 < pyrotechnick> trying to build it into the browser itself has been a little fail
06:35 < pyrotechnick> there's already an API to control browsers
06:35 < pyrotechnick> the browser
06:36 < rknLA> i don't really use cucumber that much.. don't deal with client management enough.
06:37 < rknLA> how does injecting iframes help with testing?
06:37 < pyrotechnick> https://github.com/substack/schoolbus
06:37 < pyrotechnick> https://github.com/airportyh/testem
06:37 < pyrotechnick> that's a good start
06:37 < rknLA> oh whoa.
06:37 < rknLA> that's a cool trick.
06:38 < pyrotechnick> quite
06:38 < pyrotechnick> and there's no speed limit™
06:49 < abstrax> so with my ruby app too, its the same dam
07:00 < rknLA> abstrax: why is supporting user-supplied haml important?
07:01 < rknLA> to your app i mean...
07:05 < timeturner> anyone know how to fix tmux to where it actually follows the agressive-resize on setting
07:06 < timeturner> it's showing the dots when I resize sometimes
07:09 < hemanth2> heroku does not accept node ws? #heroku is silent...
07:09 < pyrotechnick> not on their cheap stuff
07:09 < hemanth2> Error: Cannot find module 'ws' i have mentioned it in package.json
07:09 < hemanth2> oh is it :(
07:10 < timeturner> heroku sucks
07:10 < hemanth2> socket.io is very heavy for what i'm doing 
07:10 < pyrotechnick> everything sucks
07:10 < hemanth2> :D
07:10 < timeturner> linode all the way
07:10 < hemanth2> which sucks less ?
07:10 < pyrotechnick> depends how much time you have
07:10 < hemanth2> weekends only
07:10 < pyrotechnick> depends what you want out of life
07:11 < pyrotechnick> if you just want to get shit done use heroku
07:11 < timeturner> lmao
07:11 < timeturner> if you want to really have control use linode
07:11 < pyrotechnick> if you want to come to know god setup your own VPS
07:11 < timeturner> I hate service hosting solutions
07:12 < pyrotechnick> you have created your own
07:12 < timeturner> yep
07:12 < pyrotechnick> do you hate it
07:12 < hemanth2> hmm, linode has no free stuff?
07:12 < timeturner> nope
07:12 < hemanth2> sadly i'm stuck with godaddy lol
07:12 < hemanth2> http://h3manth.com my drupal blog :\
07:12 < pyrotechnick> okay now that's bad
07:12 < hemanth2> need to migrate 
07:13 < hemanth2> migrate from godaddy and drupal as well
07:13 < pyrotechnick> by paying godaddy a dime you are funding the slaughter of elephants and other large animals
07:13 < hemanth2> maybe octopress 
07:13 < timeturner> pyrotechnick: how's that?
07:13 < pyrotechnick> CEO hunts
07:13 < hemanth2> really?!
07:13 < pyrotechnick> anyone paying godaddy anything is financing him
07:13 < hemanth2> :D
07:13 < pyrotechnick> he is a cunt
07:14 < hemanth2> indeed
07:15 < Lorentz> I never liked their way of marketing either
07:15 < pyrotechnick> yes they exploit women
07:15 < Lorentz> I mean, boobs are always relevant, but damn
07:15 < pyrotechnick> there's a difference between sex appeal and exploitation
07:15 < pyrotechnick> godaddy more than crosses the line
07:16 < SomeoneWeird> ahah
07:16 < SomeoneWeird> yeah
07:16 < hemanth2> pyrotechnick++
07:16 < FishErr> How i can get list of files at folder? Cant see needed function in fs module :(
07:16 < SomeoneWeird> FishErr: fs.readdir
07:17 < hemanth2> if anyone is free, they can review ndocs; npm install ndocs :) 
07:17 < hemanth2> timeturner: they support socket.io but not ws :\ how come!
07:20 < hemanth2> I want a https://no.de/ account :(
07:21 < pyrotechnick> find an exploit in node
07:21 < pyrotechnick> and covertly make your own on the system
07:21 <@Nexxy> hemanth2, nodejitsu?
07:21 < pyrotechnick> you know joyent is running ads for node hosting
07:21 < pyrotechnick> there's like a secret page to sign up
07:22 < SomeoneWeird> where?
07:22 < SomeoneWeird> lol
07:22 < pyrotechnick> i've linked in here before
07:22 < SomeoneWeird> >.>
07:22 < pyrotechnick> recently
07:23 < pyrotechnick> all you need to do is convince google you're a cloud customer until they show you the ad
07:23 < SomeoneWeird> lol
07:23 < pyrotechnick> it's not funny i'm srs
07:24 < SomeoneWeird> yea
07:24 < pyrotechnick> maybe http://joyent.com/technology/nodejs
07:24 < pyrotechnick> i dunno there's like 10 different ways they have probably 0 work
07:25 < hemanth2> Nexxy: trying
07:25 < hemanth2> heroku was fine, till i got to know it does not support ws
07:26 < [AD]Turbo> hola
07:26 < pyrotechnick> it was never fine it was your perception which wasn't
07:26 < pyrotechnick> anyway you can use websockets on heroku just not their cedar stack
07:26 < hemanth2> there is no other free service like so 
07:27 < pyrotechnick> this is where someone says you get what you pay for
07:27 < Alex____> hello everybody. Do you know if node.js is capable of handling thousands of HTTPS keep-alive connection ?
07:27 < hemanth2> pyrotechnick: by default it's cedar, right? is there a way to change it after it's deployed to cedar stack
07:28 <@konobi> Alex____: yes, no
07:28 < pyrotechnick> i don't know i've never used it
07:28 < pyrotechnick> you
07:28 < pyrotechnick> would think so though
07:29 < hemanth2> only https://devcenter.heroku.com/articles/cedar supports nodejs :\
07:29 < pyrotechnick> send them an ill-worded email
07:30 < hemanth2> pyrotechnick: :) can i also read it ?
07:31 < pyrotechnick> that was a directive
07:31  * ChrisPartridge laughs
07:31 < hemanth2> :P
07:31 < hemanth2> I read it as  "sent them..."
07:31 <@Nexxy> hemanth2, you can do stack migrations
07:31 <@Nexxy> hemanth2, but as you noted, cedar is the only node.js stack apparently
07:32 < pyrotechnick> hemanth2: you're coming to that unfortunate moment in time when you realise it's better to scratch your own itches
07:33 < pyrotechnick> nobody else will ever quite hit the spot
07:33 < hemanth2> :"(
07:33 < pyrotechnick> i hope they're tears of joy
07:34 < hemanth2> that would be :") 
07:34 < hemanth2> but this is :"( 
07:34 < pyrotechnick> you're munched on your leaves, spun your cacoon
07:34 < pyrotechnick> soon you will be a beautiful butterfly
07:35 < pyrotechnick> and the metamorphosis is complete
07:35 < abstrax> ok o
07:35 < abstrax> so
07:35 < hemanth2> pyrotechnick: thanks you for the support, for begin the sunlight! :) 
07:35 < abstrax> people can execute node in Jade templates too
07:35 < abstrax> so i need a restricted environment i guess, thats the only solution maybe
07:35 < hemanth2> well, i had liked ws more than socket.io….now i need to migrate to socket.io 
07:35 < pyrotechnick> abstrax: i linked you some jails
07:35 < prishabh> you talk shit
07:36 < prishabh> when you talk socket.io is heavy
07:36 < prishabh>  ;D
07:36 < prishabh> how much does extra kb's of space cost in $$ ?
07:36 < hemanth2> prishabh: heavy for me :P Have seen ws? 
07:36 < hemanth2> prishabh: heaviness in code overhead
07:36 < prishabh> ws feels more natural sure, but I use what works.
07:37 < prishabh> just use it, its not slow, I can bet :P
07:37 < hemanth2> a simple echo server needs so much of boiler plate 
07:37 < prishabh> oh? tell me more...
07:38 < prishabh> the thing is, do you want to get job done ?
07:38 < MitchW> what's wrong w/ socket.io?
07:38 < prishabh> ok, sorry. continue.
07:38 < MitchW> :S
07:38 < hemanth2> what's wrong with ws?
07:38 < MitchW> what 'is' ws? :P
07:39 < hemanth2> :|
07:39 < pyrotechnick> ryah you should have included websocket as a first class protocol
07:39 < sinclair_> don't use socket.io, use SignalR
07:39 < hemanth2> npm install ws 
07:39 < hemanth2> sinclair_: I want something that is supported by heroku 
07:39 < hemanth2> pyrotechnick++
07:40 < pyrotechnick> isaacs: let's get websocket into 1.0
07:40 < SomeoneWeird> doehtt
07:40 < prishabh> lets also get soemthing for better debugging
07:40 < pyrotechnick> what's wrong with the debugger
07:41 < hemanth2> better string interpolation ?
07:41 < pyrotechnick> noooo don't freaking touch JS
07:41 < pyrotechnick> that's pandoras box
07:42 < `3rdEden> pyrotechnick why would websockets in core be better than websockets in userland?
07:42 < pyrotechnick> same reason dns and http are
07:43  * MitchW really can't see much difference between ws and socket.io
07:43 < MitchW> besides socket.io having a few more backends
07:43 < MitchW> and I can't find any perf/benchmarks on ws...
07:43 < MitchW> so ... why ws and not socket.io? :\
07:43 < `3rdEden> pyrotechnick websockets are not in the HTTP standard
07:44 < SomeoneWeird> bai
07:44 < pyrotechnick> `3rdEden: where did i say they were?
07:44 < `3rdEden> pyrotechnick where did i say that you said they were?
07:45 < pyrotechnick> where did i say you said i said we weren't saying i said you said they are
07:45 < SomeoneWeird> wat
07:47 < hemanth2> prishabh: curl http://sckt.herokuapp.com  :D :P 
07:48 < prishabh> nice, I can open in browser too!
07:48 < hemanth2> prishabh: yes, but it's not a ws :(
07:48 < hemanth2> hang om
07:48 < pyrotechnick> there's no html there let alone a socket
07:49 < phrearch> hi
07:49 < SomeoneWeird> hai
07:49 < phrearch> i wonder if its possible to have ws and express running on the same port
07:49 < SomeoneWeird> doubtful
07:50 < phrearch> i used to have it running on the same port with txwebsocket and twisted
07:50 < phrearch> would be nice to have it both on port 80
07:50 < SomeoneWeird> heh
07:50 < phrearch> or 443
07:51 < pyrotechnick> https://github.com/einaros/ws/blob/master/examples/serverstats-express_3/server.js
07:51 < SomeoneWeird> oh, heh
07:51 < SomeoneWeird> nice
07:51 < hemanth2> ok, check out https://github.com/hemanth/heroku-node-demo 
07:51 < phrearch> pyrotechnik: thanks
07:51 < pyrotechnick> yw
07:54 < hemanth2> prishabh: 
08:01 < abstrax> well
08:01 < abstrax> if i am allowing users to execute Jade code
08:02 < abstrax> whats the proper way to prevent them from executing Node code inside ?
08:05 < hemanth2> pyrotechnick: socket.io uses ws prishabh!
08:06 < pyrotechnick> i bet you feel pretty silly now
08:06 < prishabh> I knew that ?
08:06 < hemanth2> pyrotechnick: ya :( why the hell no ws on heroku then!
08:06 < hemanth2> prishabh: you knew that ^
08:07 < prishabh> ye I did, socket.io-client depends on ws, socket.io depends on socket.io-client
08:08 <@konobi> websockets are new, it's different enough that you need to deal with them differently
08:09 < hemanth2> :{
08:09 < hemanth2> prishabh: but why no ws on heroku!?
08:09 < prishabh> I haven't worked on heroku, seriously I find those weird compared to setting up quickly myself on linode.
08:09 < prishabh> although I am sure many find setting up on PaaS easier.
08:10 <@konobi> hemanth2: well, why PaaS, why not just IaaS?
08:10 < prishabh> I have struggled setting up php apps on phpfog, rails apps on heroku, and some other apps on another paas by redhar, just gave up.
08:12 < mbalho> my favorite type of fish is BaaS
08:12 < SomeoneWeird> lol
08:12 < substack> mbalho: according to my research you are in findland!
08:12 < hemanth2> :D
08:12 < mbalho> this is true, there is a lot of fish here
08:13 < mbalho> i saw a bunch of normal looking people casually fishing near downtown yesterday
08:13 <@konobi> urine drenched fermented fish too
08:13 < prishabh> hi substa
08:13 < prishabh> ck
08:13 < substack> YARRR
08:13 < hemanth2> substack: meow!
08:14 < substack> konobi: the toolchain for any application is pretty non-trivial to setup and configure
08:14 < prishabh> substack: PM?
08:15 < substack> that's the value proposition of the PaaS niche
08:15 < hemanth2> :{
08:15 < hemanth2> bad, sad
08:16 < substack> not all libraries are as cleanly packaged as the average npm module
08:17 <@konobi> substack: sure... but at least you have a full understanding of it
08:18 < SomeoneWeird> substack, how do you do all the images for your projects? :p
08:18 < prishabh> I want to know that too
08:18 < hemanth2> substack: sad part in heroku allows socket.io, which use ws; but ws is not allowed in heroku :\ 
08:19 < `3rdEden> hemanth2 them move your app to a company that does understand the importance of websockets?
08:20 < hemanth2> `3rdEden: for free ;)?
08:20 <@Nexxy> hemanth2, last I checked nodejitsu has a free plan for development
08:20 < `3rdEden> hemanth2 I hear this Nodejitsu thing is free ;)
08:21 < hemanth2> Nexxy: `3rdEden signed up, waiting for their mail
08:22 <@Nexxy> \o/
08:22 <@Nexxy> there is a #nodejitsu too
08:22 < hemanth2> http://no.de/ is a sexy domain btw
08:22 <@konobi> i also heard they weren't doing a free thing
08:22 <@konobi> hemanth2: thankyou
08:22 < hemanth2> konobi: wow ok!
08:22 <@konobi> ?
08:23 < `3rdEden> konobi it's still free. once plans launch people can still use the development sandbox for free
08:23 < hemanth2> https://develop.nodejitsu.com/ redirect loop :(
08:23 < `3rdEden> and the smallest plan would cost $3 a month.. That's almost as much as big mac ;)
08:25 < mbalho> however, nodejitsu wont (to my knowledge) ruin your body slowly and turn you obese
08:27 < `3rdEden> mbalho but then again, instead of maintaing your servers you could go to the Mc instead ;)
08:46 < SomeoneWeird> coffeescript hurts my eyes
08:47 < BennyLava> javascript hurts my eyes
08:47 < Gottox> coffee in my eyes hurts.
08:47 < BennyLava> lava in my eyes hurts
08:48 < Gottox> thats totally out of context.
08:49 < BennyLava> :((((
08:49 < hemanth2> done! pyrotechnick prishabh `3rdEden nodejitsu ftw! http://gnumanth.nodejitsu-demo.jit.su 
08:50 < Gottox> "Not implemented"
08:51 < hemanth2> ws = new WebSocket('http://gnumanth.nodejitsu-demo.jit.su');
08:51 < hemanth2> Gottox: ^
08:52 < SomeoneWeird> can somebody please write a proper gpg wrapper
08:53 < SomeoneWeird> will luv u 4eva <3
08:56 < phrearch> ehm, how do i properly include BISON in node.js? i installed it with npm, but i probably need to include it as well with require?
08:57 < SomeoneWeird> var bison = require('bison')
08:58 < SomeoneWeird> probaby
08:59 < phrearch> aha ok thanks. that works
08:59 < sinclair_> http://www.unlimitednovelty.com/2011/10/nodejs-has-jumped-shark.html
09:01 < pyrotechnick> that article is false
09:01 < pyrotechnick> node.js is a piece of software
09:01 < pyrotechnick> it's not capable of jumping anything
09:02 < Gottox> hemanth2: oh :D
09:03 < SomeoneWeird> lol pyrotechnick 
09:04 < pyrotechnick> wait a CELLULOID dev is complaining about node
09:05 < pyrotechnick> someone's jealous
09:06 < SomeoneWeird> lol
09:07 < pyrotechnick> i think he needs to lay off the crack / resume taking his ADHD medication
09:07 < SomeoneWeird> https://github.com/Obvious/ursa
09:07 < SomeoneWeird> :D
09:07 < pyrotechnick> his head must just be one big meme
09:08 < SomeoneWeird> lol
09:08 < SomeoneWeird> i think it must be
09:08 < pyrotechnick> he struggles to complete a sentence without it fading into a meme or hyperlinking to some other phycosis-induced rant
09:09 < pyrotechnick> this isn't an effective way to communicate any point
09:09 < SomeoneWeird> "That way you'll have a truly roflscale Fibonacci web service."
09:09 < SomeoneWeird> lul
09:10 < pyrotechnick> what he fails to recognise is memes are thought-viruses
09:10 < pyrotechnick> he's manifesting himself his own personal hell by allowing himself to host so many
09:11 < SomeoneWeird> hmmm
09:11 < SomeoneWeird> nodemanual is pretty awesome
09:11 <@konobi> sinclair_: troll
09:12 < phrearch> anyone knows how packet relates to wsSendBinary in this bison example over websockets?
09:12 < phrearch> http://rezoner.net/how-to-send-and-receive-binary-data-over-websockets,4
09:12 < sinclair_> konobi: im not trolling at all
09:12 <@konobi> sinclair_: o.O
09:12 < phrearch> i dont see any packet attribute in ws, when using node-inspector
09:12 < sinclair_> konobi: i do not see any compelling reason to use nodejs
09:12 < sinclair_> except for maybe, media streaming?
09:13 <@konobi> sinclair_: then why are you here?
09:13 < sinclair_> konobi: because im here to see what the nodejs community is actually using it for
09:13 <@konobi> k... thought that's easily google-able
09:14 < sinclair_> konobi: stop acting offended
09:14 <@konobi> ?
09:14 <@Nexxy> lol
09:15 <@konobi> sinclair_: the only thing i've seen you say is a url to a troll article
09:15 < yawnt> Nexxy: gimme op
09:15 < yawnt> nao
09:15  * Nexxy gives yawnt op
09:15 < sinclair_> konobi: its a fair article, the author was a little biased, doesn't mean he was entirely wrong now 
09:15 < yawnt> HA HA
09:15 < yawnt> I GOT THE POWA
09:15 < pyrotechnick> WHAT HAVE YOU DONE
09:15 < yawnt> I KNOW RIGHT
09:16 < pyrotechnick> Nexxy = Judas
09:16 < yawnt> i can feel the power in mah veins
09:16 < sinclair_> konobi: nodejs feels very much like a hype bubble, like rails
09:16 < pyrotechnick> thats not power thats heroin
09:16 <@konobi> sinclair_: mkay... bye bye
09:17 < pyrotechnick> ANOTHER ONE BITES THE DUST
09:17 < sinclair_> konobi: don't just write me off, discuss the pros and cons
09:17 < pyrotechnick> NODE IS A HYPE BUBBLE
09:17 <@konobi> sinclair_: no... that's not my job.
09:17 < pyrotechnick> DISCUSS.
09:18 <@Nexxy> sinclair_, what are your interest?
09:18 <@Nexxy> interests*
09:18 < pyrotechnick> candlelight dinners
09:18 < pyrotechnick> erotic poetry
09:18 < pyrotechnick> and long walks on the beach
09:18 <@konobi> long walks in the park
09:18 <@konobi> =0P
09:19 < CrazyGoogle> <3
09:19 < pyrotechnick> YOU CANT GO FOR LONG WALKS IN THE PARK
09:19 < pyrotechnick> PARKS ARE FINITE
09:19 < sinclair_> Nexxy: atm, trying to find a practical use for node
09:19 <@konobi> why?
09:19 < sinclair_> konobi: because i think node is cool
09:19 < SoulRaven> hello
09:19 < pyrotechnick> wait a second
09:19  * sinclair_ no joke
09:19 < BennyLava> My tolerance for all-caps is finite too. :|
09:19 < SoulRaven> is posibile in node to findout the socket number?
09:20 < pyrotechnick> SoulRaven: what library? socket.io?
09:20 < pyrotechnick> or do you mean the file descriptor?
09:20 < SoulRaven> no, .net
09:20 < sinclair_> konobi: the issue is, I have no use for node in the "web space", however, perhaps network / video streaming technologies could be built with node to scale, thats intriguing to me
09:21 < pyrotechnick> what do you mean socket number
09:21 < pyrotechnick> the port?
09:22 < pyrotechnick> sinclair_: at my last gig all the streaming and heavy lifting was done with ancient but good tech
09:22 <@konobi> sinclair_: okay... that's more interesting
09:22 < pyrotechnick> and node was used to command and control the streams/clients
09:22 < SoulRaven> not, the port, the socket number
09:22 < SoulRaven> each socket when is created, has a number
09:23 < SoulRaven> that number is random from 1 to 65xxx
09:23 <@konobi> sinclair_: i've used node for tftp, dhcp, dns, htpp, amqp, etc... it does a lot of stuff well
09:23 < sinclair_> dhcp?
09:23 <@konobi> yup
09:23 < sinclair_> that's quite interesting, how does that work, and why wouldn't you use a dhcp server ?
09:24 < SomeoneWeird> you can use it for anything
09:24 <@Nexxy> but node can *be* a dhcp server
09:24 < SomeoneWeird> node can be anything ;)
09:24 <@Nexxy> THE ONLY LIMIT...
09:24 <@konobi> sinclair_: sdc
09:24 <@Nexxy> IS YOUR...
09:24 < SomeoneWeird> SKY
09:24 <@Nexxy> IMAGINATION
09:24 < SomeoneWeird> lol
09:24 < pyrotechnick> sinclair_: anyrthing that can be done otherwise can be done in node, think of the javascript in node as remote controlling / coordinating native components rather than implementing the functionality itself
09:25 < sinclair_> pyrotechnick: i figured as much
09:25 < sinclair_> pyrotechnick: can node marshal calls to .NET yet?
09:25 < SomeoneWeird> why would you want it to?
09:26 <@Nexxy> iisnode?
09:26 < SoulRaven> and also, how i select a specific socket to close, from a array of sockets
09:26 < prishabh> Nexxy: how did you make that colorful ?
09:26 < SomeoneWeird> IRC COLOURS PRISHABH
09:26 <@Nexxy> prishabh, I'm just that awesome
09:26 < prishabh> that's not colored.
09:26 < pyrotechnick> oh yeah the good old days of mirc
09:26 <@Nexxy> lol
09:26 <@konobi> sinclair_: you can use node on azure... but not used it myself
09:26 <@Nexxy> hiding messages in color codes
09:26 < SomeoneWeird> heh
09:26 < pyrotechnick> adium is so kind as to hide them
09:26 < pyrotechnick> i wonder what link does
09:27 <@Nexxy> prishabh, in my client (irssi) I just do ctrl + c and the # of the color I want
09:27 <@Nexxy> like 4 is red!
09:27 < pyro-_> go again nexxy
09:27 < pyro-_> WHAT SORCERY IS THIS
09:27 < sinclair_> konobi: i was interested in mixing and matching node with .net, node has SQL server libs nowadays, which means i could run side by side with a .NET Web Application
09:27  * Nexxy goes... AGAIN!
09:27 < SomeoneWeird> in xchat do ^k<colourcode>
09:28 <@Nexxy> my favorite color code
09:28 < sinclair_> konobi: ideally, it would be nice to marshal calls to .NET, meaning i could write modular code in .NET have have nodejs take care of the implementation
09:28 <@Nexxy> oh wait
09:28 <@Nexxy> maybe it's this one
09:28 <@Nexxy> yes, taht's it.
09:28 < SomeoneWeird> u girl
09:28 < pyro-_> is there marquee?
09:28 < abstrax> #4hi
09:28 <@Nexxy> omg so diminutive
09:28 < pyro-_> or blink?
09:28 < abstrax> doesnt work for me?
09:28 < SomeoneWeird> hehe
09:28 < abstrax> #707070hi
09:28 < pyro-_> depends on client
09:28 < abstrax> ...
09:29 < abstrax> irssi here
09:29 <@Nexxy> abstrax, CTRL + C
09:29 < SoulRaven> anyone, has any ideea about that?
09:29 < pyro-_> yeah irssi is for hardcore nerds
09:29 <@Nexxy> then the number
09:29 < abstrax> hi
09:29  * Nexxy is so hardcore
09:29 < pyro-_> they have no need for colors
09:29 < abstrax> JESUS
09:29 < abstrax> JESUS
09:29 <@Nexxy> pyro-_, I'm coloring on IRSSI
09:29 < SomeoneWeird> JESUS
09:29 < abstrax> CHRIST
09:29 < pyro-_> yeah but you're a witch
09:29 <@konobi> sinclair_: i'm sure it's doable... just not in my realm of knowledge
09:29 <@Nexxy> that's true
09:29 < abstrax> OMG
09:29 < phrearch> hm, looking for a way to get the ip from ws socket. cant find anything though. is there another way to get this?
09:29 < SomeoneWeird> lulz
09:29 < phrearch> the client ip that is
09:29 < abstrax> SUPERB MAN
09:29 < abstrax> Node <3
09:30 < pyro-_> straight back to 1885
09:30 < pyro-_> i mean
09:30 < sinclair_> konobi: what about video streaming libs?
09:30 < pyro-_> 1995
09:30 <@Nexxy> lol
09:30 < abstrax> supsupsup
09:30 <@Nexxy> 1985
09:30 < abstrax> woohoo i win!
09:30 -!- mode/#Node.js [+cs] by konobi
09:30 < abstrax> thank u nexxy love u
09:30 < pyro-_> 1885 was like
09:30 < pyro-_> morse code
09:30 <@Nexxy> abstrax, <3
09:30 < SomeoneWeird> damn u konobi
09:30 <@konobi> =0P
09:30 <@Nexxy> OH COME ON
09:30 <@konobi> sinclair_: yup, they're there
09:30 <@Nexxy> btw +s makes it secret
09:31 < pyro-_> +s tst
09:31 < SomeoneWeird> i wasnt even born in 1985 haha
09:31 < pyro-_> >.<
09:31 <@Nexxy> not that anyone really does a /list on freenode
09:31 < sinclair_> konobi: any recommendations?
09:31 < SoulRaven> i have found it: is, socket.remotePort
09:31 < prishabh> I was born in 2002
09:31 < SoulRaven> but is wrong, defined and documented
09:31 < SomeoneWeird> yeah somehow I doubt that,
09:31 <@konobi> sinclair_: not offhand
09:31 < SoulRaven> must be remoteSocket
09:31 < SoulRaven> and also is missing the local socket
09:31 < pyrotechnick> SoulRaven - "not, the port, the socket number"
09:31 < pyrotechnick> :s
09:32 <@konobi> sinclair_: it'll depend on what type of thing you're streaming generally
09:32 < SoulRaven> port != socket
09:32 < phrearch> in node-inspector its a WebSocket object
09:32 < prishabh> 4hi
09:32 < sinclair_> konobi: video
09:32 <@Nexxy> "video" means a lot of things
09:32 < phrearch> the only thing i see to get to the source of the client is to get to the handshake origin header
09:32 < sinclair_> and audio, the WebM specification
09:32 <@konobi> h264, mpeg2, flv, webm, mkv, etc
09:33 < phrearch> aha, tcp has getpeername
09:33 -!- mode/#Node.js [-cs] by konobi
09:33 <@Nexxy> free at last
09:33 <@konobi> *sigh*
09:34 < SomeoneWeird> PARTY
09:34 < prishabh> WHERE'S DA PARTY TONIGHT?
09:34 <@Nexxy> lol
09:34 <@Nexxy> woops
09:34 < yawnt> argh
09:34 < yawnt> i see color
09:34 < yawnt> s
09:34 < pyrotechnick> in our pants?
09:34 < substack> what does 5 look like
09:34 < substack> oh excellent
09:34 <@Nexxy> 8I like how they wrap
09:34 < substack> I forget the one for bold
09:34 <@Nexxy> ... or not
09:34 <@Nexxy> bold?
09:35  * konobi stares at Nexxy 
09:35 < SomeoneWeird> bold?
09:35 < substack> yes that one
09:35 < medice>  boo
09:35 <@Nexxy> Bold.
09:35 < pyro-_> T̫̺̳o̬̜ ì̬͎̲̟nv̖̗̻̣̹̕o͖̗̠̜̤k͍͚̹͖̼e̦̗̪͍̪͍ ̬ͅt̕h̠͙̮͕͓e̱̜̗͙̭ ̥͔̫͙̪͍̣͝ḥi̼̦͈̼v҉̩̟͚̞͎e͈̟̻͙̦̤-m̷̘̝̱í͚̞̦̳n̝̲̯̙̮͞d̴̺̦͕̫ ̗̭̘͎͖r̞͎̜̜͖͎̫͢ep͇r̝̯̝͖͉͎̺e̴s̥e̵̖̳͉͍̩̗n̢͓̪͕̜̰̠̦t̺̞̰i͟n҉̮̦̖̟g̮͍̱̻͍̜̳ ̳c̖̮̙̣̰̠̩h̷̗͍̖͙̭͇͈a̧͎̯̹̲̺̫ó̭̞̜̣̯͕s̶̤̮̩̘.̨̻̪̖͔
09:35 <@Nexxy> he comes
09:35 < SomeoneWeird> Magik
09:35 < medice> you broke mah irssi
09:35 <@Nexxy> lol
09:35 < pyrotechnick> HE CAME
09:35 < SomeoneWeird> haha pyro-_ 
09:35 < pyrotechnick> HE BROKE
09:35 < phrearch> ws.upgradeReq.client._handle.getpeername()
09:35 <@Nexxy> a hip?
09:35 < phrearch> got it :)
09:36 < pyrotechnick> you know in titanic
09:37 <@Nexxy> no but I'm sure you're going to tell us
09:37 < substack> found it
09:37 < pyrotechnick> how the ship's sinking
09:37 < pyrotechnick> and some people stay and play instruments
09:37 < prishabh> yeah and then I save them :)
09:37 < prishabh> and they crown me!
09:38 < pyrotechnick> king of the people who wanted to die but were saved against their will
09:39 < SomeoneWeird> i need to write a module
09:39 < SomeoneWeird> somebody give me a suggestion lol
09:39 < pyrotechnick> actor framework
09:39 < pyrotechnick> GO!
09:41 < SomeoneWeird> wat
09:41 < SomeoneWeird> u no make sense
09:41 < pyrotechnick> sure i do
09:41 < pyrotechnick> like this
09:41 < pyrotechnick> http://akka.io/
09:41 < substack> meh
09:42 < pyrotechnick> or this http://celluloid.io/
09:42 < SomeoneWeird> lmao
09:43 < pyrotechnick> or this http://pykka.readthedocs.org/
09:43 < pyrotechnick> you think they should be processes substack?
09:44 < substack> yes
09:44 < substack> processes are really easy to reason about
09:44 < pyrotechnick> i think so too
09:44 < hemanth2> nodejistu FTW! https://github.com/hemanth/nodejistu-websocket/blob/master/Readme.md
09:44 < substack> you just write programs like usual and your programs talk to other programs over the network
09:44 < pyrotechnick> what if you have hundreds of thousands of objects though
09:44 < substack> there is no need for overarching frameworks
09:44 < substack> objects?
09:44 < substack> you mean data?
09:45 < pyrotechnick> say a game
09:45 < substack> you use a database or you put the data in memory
09:45 <@Nexxy> why not... the game?
09:45  * substack lost
09:45 < pyrotechnick> F YOU NEXXY
09:45 < pyrotechnick> nexxy is a luden
09:46 < substack> pyrotechnick: check this out https://github.com/dominictarr/scuttlebutt/
09:46 < substack> and my writeup of it: https://github.com/substack/stream-handbook#scuttlebutt
09:46 < pyrotechnick> yes this is freaking delicious substack
09:46 < pyrotechnick> this IS science
09:46 < substack> just hook the nodes together with streams and the network figures it out!
09:47 < substack> (somehow)
09:47 < pyrotechnick> omnomnom
09:47 < pyrotechnick> the security is very similar to how we rolled it at a previous gig
09:48 < substack> I can't wait for dominic to roll out a scuttlebutt-based database
09:48 < pyrotechnick> don't
09:48 < substack> for on-disk persistence
09:48 < pyrotechnick> disks are overrated
09:48 < pyrotechnick> just keep enough nodes up
09:48 < substack> true I suppose
09:49 < pyrotechnick> disks are an archaic remnant of computing 
09:49 < substack> if all the writes get logged then the state of the network can be reconstructed after a failure or restart
09:49 < substack> anyways scuttlebutt is amazing
09:49 < substack> my new favorite npm module
09:49 < pyrotechnick> ok this + onion routing + OT
09:49 < pyrotechnick> could be enough for p2p mmo
09:49 <@Nexxy> operating thetan?
09:50 < pyrotechnick> yeash
09:50 <@Nexxy> what level are you?
09:50 < pyrotechnick> 1337
09:50 < pyrotechnick> ohh scuttlebut is just gossip :(
09:50 < testingb0t1> If I send an invalid HTTP verb to http.createServer, I receive a "clientError". Is there a possibility to know for which request the clientError occurred? Since it only returns an exception, it's not easy to figure out for which request parameters it happened.
09:51 < pyrotechnick> i was hoping to stumble onto some kind of higher order terms and concepts
09:51 < SomeoneWeird> testingb0t1, try catch?
09:54 < pyrotechnick> Anti-Entropy Protocols
09:55 < testingb0t1> SomeoneWeird: that won't work. I tried req.socket.addListener("error") but it doesn't trigger :(
09:55 < pyrotechnick> das wat im talkin bout
09:58 < pyrotechnick> substack: this is crazy
09:58 < pyrotechnick> so crazy it might just work
09:59 < SomeoneWeird> just might*
09:59 < pyrotechnick> i didn't write the script i stole that quote from
09:59 < pyrotechnick> take it up with hollywood
10:00 < pyrotechnick> you know you're in deep when you're reading things like "rumor-mongering
10:01 < SomeoneWeird> no u
10:02 < ag4ve> can someone help me with this trace? i don't get it - https://gist.github.com/3748799
10:02 < ag4ve> i'm trying to load a static file with express.static
10:04 < ag4ve> i'm guessing i need something other than just express required for this middleware?
10:23 < ag4ve> well, i'm guessing my problem isn't the express middleware as ecstatic does the same thing...
10:30 < drey> ag4ve: show some code too
10:38 < ag4ve> drey: ah, i figured it out.... i was stupid in creating the symlinks and for some reason ls --color wasn't showing red so i didn't see it
10:39 < ag4ve> i didn't think i could fuck up a static file server.... guess i was wrong
10:41 < pyrotechnick> substack: why do they insist on this ridiculous notation in the whitepapers?
10:42 < pyrotechnick> >.<
10:43 < substack> mathematical notation is not designed to be readable
10:43 < pyrotechnick> by mortals
10:43 < substack> by anyone who is not a domain expert in the topic at hand
10:43 < substack> and willing to sink tens of hours into understanding arcane details
10:44 < pyrotechnick> i always thought you should choose your archetype before you read a whitepaper
10:44 < pyrotechnick> and you get a version that doesn't make you want to tear your eyes out
10:45 < hemanth2> request for feedback : http://h3manth.com/content/heroku-vs-nodejitsu-nodejs heroku vs nodejutsu :) 
10:46 < pyrotechnick> it's insulting to elderly horses
10:46 < pyrotechnick> i for one am offended
11:03 <@konobi> pyrotechnick: mmmm.... glue...
11:03 < ag4ve> ok, favicon is still erroring on me - it's not causing client side issues, just filling up my screen with crap. so how do i prevent this? i thought using express.favicon() might, but it doesn't seem to https://gist.github.com/3749051
11:04 < pyrotechnick> im not sure glue is horse hooves anymore is it
11:05 < substack> glue has been entirely synthetic for about 30 or 40 years
11:06 < substack> if not longer
11:06 < ag4ve> well, i don't think wood glue is entirely synthetic, but that probably isn't the point :)
11:11 < rounce> what is the point of connect.favicon() ??
11:14 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:24 < CIA-118> node: Ben Noordhuis master * rc4aedf8 / doc/api/zlib.markdown : doc: zlib: document flush() and reset() methods - http://git.io/3lVSmw
11:45 < mbalho> however, nodejitsu wont (to my knowledge) ruin your body slowly and turn you obese
11:46 < pyrotechnick> wtf
11:46 < mmalecki> I feel like I'm missing some context here XD
11:46 < pyrotechnick> yeah i'm regretting the red pill
11:47 < mmalecki> WAIT
11:47 < mmalecki> you took it too?
11:47 < pyrotechnick> NO MORPHEOS TRICKED ME
11:47 < mbalho> lol
11:48 < rounce> btw
11:48 < rounce> what exactly is the point of JSONPath
11:48 < rounce> (besides the obvious)
11:48 < pyrotechnick> well you could verify schemas with it
11:48 < mmalecki> rounce: I've heard it makes XMLPath people happy
11:49 < pyrotechnick> only reptillians use JSONPath
11:49 < rounce> ...and fulltime php devs
11:49 < substack> JSONStream!
11:49 < pyrotechnick> they're synonyms
11:49 < rounce> * lowblow *
11:50 < substack> stream all the jsons
11:50 < pyrotechnick> where do you think PHP is from
11:50 < rounce> all your jsons are streamed to us?
11:50 < Tixz> Anyone know what happened to d3js.org? It's been down for age
11:50 < Tixz> *ages
11:50 < rounce> isup.me
11:50 < pyrotechnick> up here
11:50 < pyrotechnick> you in china?
11:51 < Tixz> Woha!
11:51 < Tixz> No, Denmark :p
11:51 < rounce> so china then
11:51 < Tixz> haha
11:51 < pyrotechnick> i blame the illuminati, they're living longer these days giving them more time to manifest their luciferian agenda
11:53 < pyrotechnick> i'd bury 5000 dollars in an old cigar box in your back yard
11:53 < pyrotechnick> along with a dna sample
11:53 < pyrotechnick> and a declaration of your undevout service to greater good
11:54 < sinclair_> anyone able to visit here with me.. http://collabedit.com/c6e9u
11:54 < sinclair_> its a online collab editor
11:55 < pyrotechnick> haha
11:57 < pyrotechnick> pretty nice
11:57 < pyrotechnick> is that sharejs?
11:58 < sinclair_> don't know
11:58 < sinclair_> but i want one
11:58 < sinclair_> can you read my comments?
11:58 < pyrotechnick> yes
11:58 < sinclair_> i think i should port this to C#
11:59 < pyrotechnick> i started to write skynet but apparently you're not into that
11:59 <@Nexxy> hahaha, reptilians
11:59 < hemanth2> rounce: http://www.isup.me/isup.me :D 
11:59 < pyrotechnick> nexxy you missed out on some occult-arsed collab editing
12:00 <@Nexxy> awe
12:04 < rounce> ok we need a good hax implementation
12:04 < pyrotechnick> finction
12:04 <@Nexxy> a fictional function?
12:04 < pyrotechnick> yes
12:04 < pyrotechnick> a function which lies
12:04 <@Nexxy> perception is reality
12:05 < pyrotechnick> it may or may not return what you say
12:05 < pyrotechnick> it's elementary watson
12:05 < rounce> it's the inverse concept of 'promises'
12:05 <@Nexxy> oh man
12:05 < abstrax> its the worst day of my life
12:05 < rounce> except no where near as wanky in it's terminology
12:05 <@Nexxy> I'm watching Sherlock Holmes right now
12:05 < rounce> anyone got any node jobs going in ondon
12:05 < rounce> *london
12:05 < pyrotechnick> yeah i incepted the idea hours ago nexxy
12:05 < rounce> or know of
12:05 < pyrotechnick> you are mine.
12:06 < rounce> fast deciding to gtfo out of my current job
12:06 <@Nexxy> you should keep that to yourself until you've found a new one :)
12:06 < rounce> I've got an offer from a studio up the road
12:06 < rounce> they're all quite poncy tho
12:06 <@Nexxy> is it studio ghibli?
12:07 < rounce> ahhh you got me!
12:07  * rounce is exposed
12:07 <@Nexxy> make yourself decent, man
12:07 < pyrotechnick> more like studio giblets
12:07 < rounce> feels like gangbanging with headless chickens
12:08 <@Nexxy> wow that went south quickly
12:08 < pyrotechnick> THIS ESCALATED QUICKLY
12:08 <@Nexxy> MILK WAS A BAD IDEA
12:08 < pyrotechnick> you should lay low for a while
12:08 < pyrotechnick> maybe hang out at a friend or relatives house
12:09 < rounce> but the chicken bloody
12:09 < rounce> *-y
12:09 < rounce> it just wont wash out
12:10 <@Nexxy> aaaanyway.
12:10 < pyrotechnick> basic is the bomb
12:10 < pyrotechnick> let's do OT in basic
12:11 < pyrotechnick> haha who did the bottom basic one
12:15 < pyrotechnick> LOL
12:15 < pyrotechnick> it's like "there was an error, the page will refresh now"
12:19 < SoulRaven> way in socket.close or socket.end socket.address() is undefined?
12:22 < SoulRaven> anyone?
12:23 < pyrotechnick> THINK SoulRaven
12:23 < pyrotechnick> only open sockets should have an address, once they're closed they no longer exist and therefor don't have one
12:23 < pyrotechnick> if you REALLY want it once it's closed
12:23 < pyrotechnick> then when it opens save it somewhere
12:23 < pyrotechnick> like socket.foo = socket.remoteAddress()
12:24 < pyrotechnick> or whatever
12:31 < kuplatupsu> hello. I have a c++ framework that uses v8 for scripting different things. I was hoping to use nodejs as a kind of standard library with that scripting environment
12:31 < kuplatupsu> I thought it was a common use case for node, but it seems that node is distributed only as a standalone binary, not a library that could be embedded to something
12:31 < pyrotechnick> http://github.com/joyent/node
12:32 < pyrotechnick> some talk on mailing list: https://groups.google.com/forum/?fromgroups=#!topic/nodejs-dev/eegkyxELAZY
12:32 < pyrotechnick> google's your friend ;)
12:33 < pyrotechnick> know that it
12:33 < pyrotechnick> isn't a usual use case, no
12:34 < kuplatupsu> maybe you misunderstood my point, I'm currently hacking the source code to compile as a library and selecting the best way to initialize the library etc, I did found that mailing list post with google
12:34 < kuplatupsu> I just wanted to make sure that I'm not doing something extremely weird
12:34 < pyrotechnick> well you are
12:34 < pyrotechnick> if you're looking for someone's blessing here though you probably won't find it
12:35 <@Nexxy> kuplatupsu, nevermind pyrotechnick he's just being dramatic
12:35 < pyrotechnick> https://github.com/rsms/kod embeds node
12:36 < pyrotechnick> but died
12:36 < deoxxa> kuplatupsu: usually it's done in the opposite direction - you embed whatever the application is in node via putting it in a module. it's not impossible to do it the other way, but it's not done often so there's not a lot of common wisdom on how to achieve it...
12:36 < pyrotechnick> theres some others i could think of, but that's a start
12:37 < kuplatupsu> deoxxa: well in my case I have a pretty large framework, and only small percentage of the users are actually using js to do anything
12:38 < deoxxa> kuplatupsu: you might want to do it differently, but i'd probably go for an approach where you send messages back and forth to node via some mechanism
12:38 < pyrotechnick> this^
12:38 < deoxxa> kuplatupsu: you'd have to run node in its own thread anyway, since v8 really doesn't like being paused for a long time
12:39 < pyrotechnick> some talk here too: https://github.com/joyent/node/pull/3499
12:39 < sinclair_> anyone have any thoughts on the cloud 9 IDE?
12:39 < kuplatupsu> deoxxa: I need to run node in the already existing v8 context that I regularly lock/call all the event handlers etc
12:39 < abstrax> pyrotechnick: can u give that github url again >?
12:40 < kuplatupsu> Cannot really run it in its own thread
12:40 < deoxxa> kuplatupsu: ah, that's a different story then...
12:40 < kuplatupsu> deoxxa: I'm only interested in the standard library stuff, I'm not using the web server or anything like that
12:40 < deoxxa> well, the http part is part of the standard library...
12:41 < deoxxa> but ok
12:41 < kuplatupsu> Now I already have a working scripting environment in this framework, but it doesn't have any way of opening files etc, node could fill that void
12:41 < deoxxa> what parts were you thinking of? fs? net?
12:41 < deoxxa> ah
12:42 < CIA-118> node: Ben Noordhuis master * rbbf6b4e / configure : configure: turn on VFPv3 on ARMv7 - http://git.io/naeeGg
12:48 < xico> Hello children :)
12:48 < pyrotechnick> watch your mouth
12:48 < xico> :o just like that ? :\
12:48 < pyrotechnick> nice moodswings
12:49 < xico> Not sure if you're joking or actually repremending me
12:49 < xico> "joking"
12:50 < pyrotechnick> i'm doing both, it's like quantum superposition
12:50 < kuplatupsu> deoxxa: Do you think it would work if I just did something similar to SetupProcessObject + AttachBindings and loaded node.js with my own v8 context, and then just ignored the default loop totally
12:50 < xico> wikipedia
12:50 < pyrotechnick> uncyclopedia is better
12:50 < deoxxa> kuplatupsu: i'm afraid i'm not familiar enough with that part of node to answer :<
12:50 < kuplatupsu> Does the default loop even do anything except some http server dispatching?
12:50 < xico> Hum I see :)
12:50 < deoxxa> kuplatupsu: you might want to ask in #libuv
12:51 < kuplatupsu> deoxxa: ah, ok
13:08 < vkruoso> hey! I'm trying to install node.js on a fedora 8 system... I manage to compile it with success, but the make install process is failing because of python and the usage of the json module... any hints?
13:08 < mmalecki> why fedora 8? it's ancient
13:09 < vkruoso> I know... but is mostly the only option I have inside Planet-Lab...
13:12 < vkruoso> I guess I got it now... :P
13:15 < phrearch> hm say i want to log a message when the http server is listening for messages, does createServer offer a callback or something so i can log it when it is actually accepting?
13:15 < phrearch> i currently have something like http://pastie.org/4753494
13:17 < mscdex> phrearch: .listen() takes a callback that it will register for the 'listening' event
13:17 < drey> phrearch: http://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback
13:18 < phrearch> aha beautiful, thanks :D
13:19 < alexw> I am using node-mysql, 
13:19 < alexw> Selecting a column of mediumblob which returns message: <Buffer 45 4e 22 20 22 68 74 74 70 3a 2f 2f 77 77 77 2e 77 33 2e 6f 72 67 2f 54 52 2f 68 74 6d 6c 34 2f 73 74 72 69 63 74 2e 64 74 64 22 3e 0a 3c 68 74 6d 6c 3e ...>,
13:19 < alexw> However when I convert the buffer to string, it is not starting at the first character - sometimes it also gets scrambled
13:23 < bnoordhuis> vkruoso: install a newer python or try node 0.6, that may work (possibly)
13:27 < cody--> morning
13:27 < alexw> this is bizzzzzzare????
13:27 < alexw> why do the buffers get curropted
13:28 < bnoordhuis> alexw: probably an encoding issue
13:28 < alexw> Works fine if I select 1 row
13:28 < bnoordhuis> one of your rows probably contains something that's not valid utf-8
13:28 < cody--> I launched a new open source project the other day and would appreciate any feedback if anyone has the time: http://www.reddit.com/r/webdev/comments/102or9/i_made_a_web_browser_irc_client_with_nodejs/
13:31 < alexw> bnoordhuis: I'm selecting HTML emails
13:31 < alexw> http://pastebin.com/eDe2gryN
13:31 < alexw> Is what I get when I select more then 1 row
13:31 < alexw> maybe its a dodgy mysql library
13:32 < Meaglith> How many #Nodejs opensource PaaS? 
13:32 < SomeoneWeird> nice cody-- 
13:32 < beef> i am typing from your thing right now cody
13:33 < Iszak> Anyone got a guide on how to prevent callback hell?
13:33 < beef> iszak: callbackhell.com
13:33 < Iszak> yeah I don't want to use named functions, the whole point of anonymous functions is ones that are throw away.
13:33 < Iszak> by defining a named function, then it makes anonymous functions pointless.
13:33 < alexw> Blobs are up to 178k each
13:34 < BennyLava> Iszak: https://github.com/joyent/node/wiki/Modules#wiki-async-flow
13:34 < cody--> sweet
13:34 < cody--> thanks someoneweird
13:34 < Iszak> BennyLava hmm?
13:34 < superjoe> I'm looking for a module which will stat a process given the pid
13:35 < superjoe> kind of like fs.stat but for running processes
13:35 < BennyLava> Iszak: pick one & enjoy
13:35 < Iszak> enjoy what?
13:35 < BennyLava> Callback hell-free code.
13:35 < BennyLava> That is what you asked for, yes?
13:35 < alexw> Looks like im not the only one http://news.ycombinator.com/item?id=3984640
13:35 < Iszak> I'm using express.js, not sure how well this will work in. what are the most popular one?
13:36 < BennyLava> Iszak: https://github.com/caolan/async by far, and it'll work just fine with express, or any other modules.
13:36 < Iszak> BennyLava temp unavailable :(
13:36 < BennyLava> mmh, not here
13:36 < Iszak> seems to be sorted now.
13:37 < Iszak> BennyLava so what? this makes it synchronous? 
13:37 < BennyLava> No, this removes the callback pyramids.
13:37 < Brandon_R> hey guys
13:38 < Brandon_R> anyone here?
13:38 < jmar777> terminology question: what does everyone call it when you "return" a value via a callback. That is, it's not technically "returning" as a language construct - is there a more idiomatic way of referring to that action in node?
13:38 < cody--> yes
13:38 < Iszak> BennyLava I'm not seeing how.
13:38  * BennyLava faceaplms
13:38 < Brandon_R> what are some websites where i can view the latest and koolaidest node.js modules?
13:38 < Brandon_R> or js in general
13:38 < Iszak> BennyLava should we have to do this...?
13:39 < Iszak> It seems a bit excessive.
13:39 < guybrush> cody--: i wonder how much user you get in with this app before freenode blocks you
13:39 < BennyLava> Iszak: as long as JS doesn't offer native async programming management, yeah.
13:39 < cody--> Brandon_R: https://npmjs.org/
13:39 < abstrax> pyrotechnick: i made it
13:39 < cody--> guybrush: freenode?
13:39 < pyrotechnick> GET UP
13:39 < pyrotechnick> GET UP
13:39 < Iszak> BennyLava all it's doing is providing a wrapper for handling functions and calling them, I can just write the functions and call them myself.
13:40 < pyrotechnick> EVERYBODY GET UP AND DANCE
13:40 < guybrush> cody--: any irc-server, yes
13:40 < cody--> ohhhh duh
13:40 < guybrush> usually they allow only a limited amount of users per ip
13:40 < cody--> i dunno, but you can run the app locally
13:40 < BennyLava> Iszak: there are other options.. if you're writing CoffeeScript there's the IcedCoffeeScript branch, or for plain JS there's streamline.js - but those do code transformation.
13:40 < Iszak> would you say most people use a async management library BennyLava?
13:40 < abstrax> I MADE IT
13:40 < xico> Anyone uses nginx with node.js?
13:40 < abstrax> I MADE IT
13:40 < guybrush> cody--: right, awesome thing anyway :) kudos
13:40 < SoulRaven> is posibile to know what socket is closed?
13:41 < Brandon_R> yeah
13:41 < BennyLava> Iszak: I don't know really. All I know is that caolan's async is very popular, and as you can see, the list of modules I gave you is pretty damn long, so…
13:41 < Iszak> could just make node.js synchronous. problem solved.
13:41 < Brandon_R> anyone here know what xenforo is
13:41 < Brandon_R> or uses it?
13:41 < BennyLava> Iszak: troll much?
13:42 < jmar777> Iszak: i usually don't, but if I have some fairly complex async ordering to do, I usually use the async library BennyLava mentioned once my code hits a certain gag point
13:42 < Iszak> No, I just don't see the point in using a library to manage asynchronous callbacks.
13:42 < Brandon_R> i like node.js sync = php
13:42 < Iszak> or ruby, or python.
13:42 < BennyLava> Iszak: anyway, that wouldn't solve the problem, because it's not just the node stdlib that has many async funcs.
13:42 < Iszak> or nodev8
13:42 < Brandon_R> nah
13:42 < Brandon_R> ruby is cool
13:42 < Iszak> Brandon_R my point is.. it's sync.
13:42 < pyrotechnick> this is heresy
13:43 < Iszak> I understand why you'd want it to be async but if you want that, use threads?
13:43 < prishabh> the problem is, node is async
13:43 < BennyLava> Iszak: you understand that the async nature of node is a *good* thing and its main selling point, yes?
13:43 < Iszak> sure
13:43 < Brandon_R> what is bundle.js?
13:43 < Brandon_R> a service or a commercial module
13:43 < Iszak> brb pingpong time.
13:43 < prishabh> lolwa?
13:43 < BennyLava> lol
13:44 < prishabh> what a bad day it was, jailing shits. :/
13:44 < Brandon_R> brb
13:44 < Brandon_R> have chem class
13:44 < prishabh> no need to tell us
13:44 < prishabh> rly
13:44 < prishabh> twitter is there for you
13:44 < Brandon_R> i don't have a twitter
13:48 < cody--> guybrush, sorry I didn't get your message, can you repeat?
13:48 < guybrush> cody--: right, awesome thing anyway :) kudos
13:48 < guybrush> (:
13:49 < guybrush> maybe i will use it, opensource is awesome!
13:49 < garrettwilkin> cody--:  trying it
13:49 < badingbopdurrr> testing the nirc
13:49 < garrettwilkin> badingbopdurrr: is me
13:50 < garrettwilkin> from your program
13:50 < cody--> damnit, there's a bug when you use certain characters it cuts the message of, can you repeat it again not mentioning my name or PM it to me guybrush :(
13:50 < cody--> sweet
13:50 < garrettwilkin> tab complete?
13:50 < garrettwilkin> tab complete for names is pretty key
13:50 < cody--> ya that would be a nice feature to have for sure
13:50 < guybrush> cody--: also i think you can write the freenode-guys a mail to increase the limit of users/ip for nirc when lots of people use it
13:51 < garrettwilkin> maybe different colors for different users?
13:51 < phrearch> does anyone know of a good signalling library for node?
13:51 < guybrush> also httpS would be nice
13:51 < cody--> there's a pull request right now to highlight your messages, but that might be a good idea garretwilkin
13:52 < guybrush> oh sorry https works already :D
13:52 < alexw> What is the best mysql driver for nodejs>
13:55 < masch> hi
13:55 < mscdex> alexw: depends on your needs i guess. i'd say mine but i'm biased ;-)
13:56 < alexw> The issue I have with node-mysql is it doesnt handle blobs well
13:56 < garrettwilkin> http://hackerclub.jit.su/force.html  the latest version of my d3.js + socket.io creation
13:56 < masch> i'd like to start another node process as another user. i know username & password. Is there a way that i can use something like login or sudo to do so?
13:56 < garrettwilkin> the color and size of the circles is determined at random upon socket connection
13:57 < mscdex> masch: if you start it as say root, you can downgrade using process.setgid/process.setuid
13:57 < masch> mscdex: okay yes, but i dont want that script to run with root permissions
13:58 < garrettwilkin> so if you refresh, you get a different color & size
13:58 < masch> the target is to get a webservice where users can login with ther pam credentials and get a worker process with their user permissions
14:02 < Iszak> prishabh BennyLava  we have a ping pong/table tennis at our work.
14:02 < prishabh> you can't beat me, tbh.
14:02 < Iszak> prishabh I don't know, I've got a pretty mean back hand.
14:03 < prishabh> I am very fast, my smashes are amazing.
14:04 < garrettwilkin> Has anyone set up something that displays how many users are connected to your site?  I'm using socket.io, and I attempted to do something with setInterval.  The problem is that each connected client creates a new interval.  I think I need to move the call to setInterval behind some function that will make sure that only one interval is ever running.  Here's the code 
14:04 < garrettwilkin> https://github.com/garrettwilkin/HackerClubProjectOne/blob/master/main.js#L493-499
14:05 < pyrotechnick> garrettwilkin: io.sockets.clients().length ?
14:05 < pyrotechnick> something like that
14:06 < garrettwilkin> yea, exactly
14:06 < pyrotechnick> ohh
14:06 < pyrotechnick> take that out of the on 'connection'
14:07 < pyrotechnick> oh that looks OK really
14:07 < garrettwilkin> right…  and i think i would need to pass in the io and socket objects
14:07 < chrisjaure> garrettwilkin: why not just broadcast the count when a client connects or disconnects?
14:07 < pyrotechnick> if they're out of scope yeah
14:07 < Iszak> prishabh we will have to have a ping pong off, you in london?
14:07 < pyrotechnick> chrisjaure: i assume he wants it realtime
14:07 < garrettwilkin> chrisjaure: thats a decent idea
14:08 < garrettwilkin> pyrotechnick: chrisjaure: that actually would be realtime
14:08 < garrettwilkin> because the only times that the count should update are when a client connects or disconnects
14:08 < chrisjaure> right
14:09 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:09 < garrettwilkin> i think that i actually didn't get a socket.connect event, in my testing
14:09 < garrettwilkin> i only got disconnect events
14:10 < garrettwilkin> io.sockets.on('connection' works rellably
14:10 < garrettwilkin> but i didn't get socket.on('connect' to fire
14:11 < chrisjaure> garrettwilkin: it's been a while since i've used socket.io, but i think connect is only fired on the client
14:11 < dmoffett> Hello,  I know that mysql drivers has probably been discussed before but after considerable research, I am unsure which mysql driver would be "best".  The things that are important to my project are of course speed and secondly how well the driver works with Node.   For example the Mongo driver has a streaming interface which works well.  
14:12 < garrettwilkin> chrisjaure: in the browser?
14:12 < chrisjaure> yeah
14:13 < chrisjaure> connection is the correct event you should be listening to on the server if you want to know when a client connects
14:13 < chrisjaure> https://github.com/LearnBoost/socket.io/wiki/Exposed-events
14:33 < rounce> the collabedit was so awesome my computer died when I was at lunch
14:34 < klaemo> hey, does a readable stream's 'data' event always have to emit a buffer or string? or could it also be an array or object etc
14:35 < rounce> hmm well
14:35 < rounce> it's possible to serialize these structures?
14:35 < rounce> is it not?
14:36 < mbalho> klaemo: if it comes from a node core api it will always be a buffer but if its a userland stream it can be any js object
14:36 < klaemo> rounce, it is, but in my case it would be unnecessary.
14:38 < rounce> good luck
14:38 < klaemo> mbalho: okay, but like stdout only accepts buffers and strings as well, when I pipe into it. Is it considered bad practice to emit something else?
15:01 < Dieterbe> hey, i'm trying to use async.until() but it always only seems to run my test function once
15:02 < Dieterbe> are there any requirements to any of the argument functions that i should be aware of? afaik the test function should just return true or false
15:04 < Rashidul> Today I just started digging into express, jade along with node. I checked the site built on #express and #node i.e. https://www.clipboard.com 
15:04 < Rashidul> I'm kinda confused whether these sites entirely built on #express, #node etc. or there is a part of #php or #rails etc?
15:04 < Rashidul> I'm confused which part should i built on #express and #node if i built a site similar to https://clipboard.com
15:07 < spion_> Rashidul, you can probably build the whole thing in node
15:09 < Rashidul> spion_ gr8 i can as i assume but is it usually do or those sites entirely built on #express and #node?
15:09 < Rashidul> or people usually do a specific portion using node
15:11 < yenic1> once node gets their own rails/django that's mature, will node make python/ruby (and associated projects) irrelevant?
15:12 < spion_> Rashidul, why not ask the builders of those sites? :)
15:13 < spion_> sometimes you can snoop on the response headers of a site and get hints about what its built with, other times those headers are hidden
15:14 < spion_> for example, express puts a header x-powered-by:Express
15:14 < mmalecki> yenic: no
15:14 < Rashidul> spion_: gr8
15:15 < mmalecki> also, node isn't going to get its own rails/django
15:15 < mmalecki> well, I hope it never will
15:17 < yenic> mmalecki: ? any reason why? everything i know about node brings me to believe javascript is going to be the sole dynamic language in the future but is missing a rails/django/whateverPHPuses
15:18 < yenic> mmalecki: or should say dominant if its not already esp when es6 cleans things up
15:19 < mmalecki> well, philosophy is totally different
15:19 < mmalecki> ror is for building big monolithic apps
15:20 < yenic> i only know some python, but looking into node/JS next, seems like the future for small scaling apps
15:20 < yenic> large scale it seems it might peter out compared to erlang, scala driven apps
15:22 < mmalecki> yenic: yeah, small scaling apps is what node is good at
15:26 < plato> Dieterbe: can you pastebin?
15:27 < spion_> yenic, i think most node.js devs don't believe in big libraries.
15:28 < wankdanker> anyone know of a function that tests whether or not a path is writable? or just fs.writeFile and check for err?
15:28 < plato> yenic i don't know of a CMS for node/express, i think it's something people would find useful though
15:28 < plato> largely cause it could be really lightweight copared to django
15:28 < Dieterbe> plato: thanks but by now i figured it out.  turns out the 2nd function was supposed to have a callback argument which must be called, before it does a new iteration
15:29 < plato> neither do i know of a library that does the database work rails is good at. but one prolly exists
15:29 < plato> rgr Dieterbe. convention is to always call your callbacks with (err, result, [results]) where err is null if no error
15:30 < plato> then in the callback function(err, result){ if(!err){do stuff} else {handle err}; }
15:30 < spion_> yenic, theres even a slightly excessive desire to split everything up. but I understand it
15:31 < spion_> because usually when you're looking for a library, you're in the middle of using quite a few libraries already, and if the new library provides more than what you're looking for (and stuff you already have covered) its hard to justify bringing it into the project
15:34 < yenic> so its truly philosophy rather than immaturity?
15:35 < yenic> if so thats interesting, but functional overlap in random libraries sounds like there might not be defacto standards on how to do things yet
15:36 < EyePulp> yenic: aren't there functional overlaps in modules for every language?  That's the reality of an architecture where the general populace write & releases for it.
15:37 < EyePulp> module functions are like opinions - everyone's got one
15:37 < yenic> haha fair enough :) just trying to get some info
15:40 < yenic> im glad to hear my python wont be wiped out. i figured with the speed, concurrency and ubiquitous nature of JS that it was prob going to take over 
15:41 < yenic> everything besides C(++), something like scala/erlang/go and run of the mill enterprise stuff like c#/java
15:41 < spion_> i'm not sure about js and concurrency
15:41 < yenic> but i assumed ruby/py/php were in deep crap as time rolled on, but sounds like the philosophical differences are wide enough
15:43 < EyePulp> yenic: you sound like you need to code more and talk less.  Predictions about the death of languages make COBOL laugh.
15:44 < spion_> imo, ruby was far more of a "python killer" than node/js
15:45 < bradgignac> i'm sure a python dev would disagree with that
15:45 < yenic> EyePulp: not death, just minimizing. like VB6 today. and yes im new to coding, i only know python. just looking for info on node and what its about. ive done a lot of reading.
15:46 < yenic> i came here to ask the guys who really know nodejs.
15:47 < bingomanatee> question - when you commit in git you comment your pushes; is there a way to do something similar with npm publish?
15:48 < superjoe> yenic, this is the place to ask specific questions about how things work, or what is the best way to accomplish a certain task. not to start broad philosophical conversations
15:48 < bradleymeck> bingomanatee: there are tags, but not just comments
15:49 < bingomanatee> ok
15:49 < yenic> superjoe: oh i didnt realize that broader questions were not welcome
15:49 < yenic> superjoe: ill leave you guys to it then
15:50 < spion_> as a freenode tradition, i just opened #node.js-social
15:50 < pachet> hi all, running into an issue installing node stable on ubuntu. git clone of the repo seemed fine, but '$:sh ./configure' errors out ("import : not found")
15:50 < spion_> :)
15:50 < qubit[01]> magn3ts, answer me you fool!
15:51 < spion_> (a place where you can, in fact, discuss the broader philosophical node.js related conversations... if you really want to)
15:51 < pachet> the box has python 2.7, so i dont think i can chalk this up to the usual 'python 3 sux lol'
15:51 < spion_> oops he left
15:52 < EyePulp> #node.js - come for the code, stay to destroy the dreams of newbs.
15:53 < spion_> well ##c++ has ##c++-social so I figured, #node.js-social makes sense.
15:59 < TehShrike> So I'm trying the node.js debugger for the first time
15:59 < TehShrike> How do I get it to echo out variable values when I'm sitting at a breakpoint?
16:00 < TehShrike> I tried just typing in the variable name, repl-style, but I get told that the value is undefined
16:00 < dmoffett> try repl at the command line
16:00 < TehShrike> I get the same thing if I try watch(my_variable)
16:00 < dmoffett> Ctrl to exit
16:01 < dmoffett> repl - Open debugger's repl for evaluation in debugging script's context
16:02 < TehShrike> So the repl mode lets me have access to variable as whatever scope I'm paused at?
16:03 < TehShrike> I figured watch() would work without being in the repl mode
16:03 < TehShrike> But apparently not?
16:03 < dmoffett> Have not tried that.  Sorry.
16:04 < TehShrike> But watch() doesn't work inside the repl.  Huh.
16:04 < TehShrike> How would you watch a variable inside the program, then?
16:04  * TehShrike can't live without a debugger any more
16:04 < TehShrike> I've gone as far as I want to with judiciously placed print statements
16:05 < dmoffett> Seems like watch would work outside of repl.  Maybe check to make sure the expression can be evaluated in repl.
16:06 < TehShrike> Well, I'm just doing watch(variable_that_exists_at_the_scope_where_Im_stepping)
16:06 < TehShrike> But it tells me that the variable is undefined
16:07 <@isaacs> deoxxa: npmrc is neat!
16:07 <@isaacs> deoxxa: i usually do that by just copying it to npmrc.bak
16:08 <@isaacs> deoxxa: you could also use a subshell program kinda like nave to set the npm_config_userconfig environment var to some path, and it'd use that.
16:09 < TehShrike> Maybe isaacs is an expert node debugger :-)
16:10 < qubit[01]> TehShrike, what debugging tool are you using ? node-inspector ?
16:11 < TehShrike> I ran node debug myscript.js
16:11 < TehShrike> Should I be using a different tool?
16:11 < superposition> yes, npm -g install node-inspector,  node-inspector && node --debug myApp.js
16:12 < TehShrike> Fair enough!  I'll try that
16:12 < TehShrike> Oh shit, this lets me use Chrome's debugger? 8-O
16:12 < superposition> yay :)
16:13 < TehShrike> Hellz yeah I want to use Chrome's debugger!
16:15 < SomeoneWeird> <isaacs> deoxxa: npmrc is neat! < why don't you use env vars for location?
16:15 < superposition> and as a weird aside, the fish shell if freaking awesome, best shell yet
16:15 < superposition> is*
16:15 < jocafa> fish shell?
16:15  * jocafa is late to the party
16:15 < superposition> friendly interactive shell
16:16 < superposition> actually I found it while looking at TermKit
16:16 < superposition> id never heard of it
16:16 < jocafa> ah
16:16 < SomeoneWeird> termkits pretty awesome
16:16 < SomeoneWeird> dev kinda died though :(
16:16 < superposition> SomeoneWeird, yeah - couldnt get it installed at all :(, bummer cause it looked sweet
16:16 < SomeoneWeird> iirc there was a little bit of setup yeah
16:16 < SomeoneWeird> was well worth it
16:16 < jocafa> i'm using zsh with oh-my-zshell
16:17 < SomeoneWeird> (was mostly broken though, has massive potential tho)
16:17 < superposition> jocafa, yeah zsh is pretty sweet, fish has a web config interface though , makes it feel really modern
16:18 < superposition> also it has this really nice feature where  I start to type a command, and it has a half transparent completion of what it thinks I want, and 50% of the time its what I was after and Ctrl+f completes it for me
16:18 < TehShrike> Oh yeah, npm is broken on this computer - how do I change the password that is saved for my npm account?
16:18 < TehShrike> I can't do any npm operations without getting the message "Error: unauthorized Name or password is incorrect."
16:19 < TehShrike> I found a npmrc file in my nodejs install directory, but it did not seem to contain any authentication details.
16:20 < TehShrike> isaacs: maybe if authentication fails you might want to let npm operations continue as un-authenticated users, when possible?
16:20 < jocafa> hm i might have to play with it
16:20 <@isaacs> TehShrike: remove the bogus npmrc file, and reset it on the website
16:20 <@isaacs> TehShrike: should be working now
16:20 < oddi> So what's the deal with DTrace on SmartOS?
16:21 < oddi> mamamamamah
16:23 < SomeoneWeird> holy shit
16:23 < TehShrike> Where would this npmrc file be?  The one in nodejs\node_modules\npm contains only one line: "prefix=${APPDATA}\npm"
16:23 < SomeoneWeird> node inspector has come a long way since i used it last
16:23 < oddi> ~/.npmrc
16:24 < TehShrike> There we go
16:36 < superposition> SomeoneWeird, oh yeah ?  I've h ad the same version installed for a long time, time to update I guess
16:37 < superposition> I love new tools
16:38 < shlevy> If I pipe into a stream created with fs.createWriteStream, will the writeStream close the fd (and emit 'close') when the readStream ends?
16:38 < pachet> hi all - fixed my earlier issue, but now i'm getting a 'permission denied' for v8_snapshot/geni/snapshot.cc when i run make
16:45 < TehShrike> hmm, after I launch node with the debugger, I get EADDRINUSE every time I start node-inspector, no matter what port I tell it to use
16:45 < plato> u have something listening on that port
16:45 < plato> possibly in a different terminal
16:46 < plato> or maybe a lost process
16:46 < TehShrike> Not unless node-inspector is listening on almost every single port
16:46 < plato> oh maybe not... if it is every port
16:46 < plato> never used the debugger. maybe debugger and app are conflicting?
16:46 < TehShrike> Yeah, ports that were open before I started node-inspector seem to be EADDRINUSE now
16:50 < vekexasia_> hello all
16:50 < vekexasia_> can someone help me with an express app ? i  cannot set my middleware iwth app.use() it seems express doesn't call my cback 
16:51 < superposition> TehShrike, what port are you starting on ?
16:51 < stagas> vekexasia_: #express
16:52 < TehShrike> superposition: I started the debugger on 8000, I've tried launching the inspector on 8001,8008,808,888,8888,88888...
16:52 < vekexasia_> thanks stagas
17:00 < superposition> TehShrike, well 88888 is invalid, there are only 65535 ports, 2^8 , but thats weird
17:00 < TehShrike> :-(
17:01 < TehShrike> Maybe I'll just run the debugger inside a VM or something
17:08 < evelyette> hi, I'm programming a game logic within node.js ... I would like to have a global variable that would hold a dictionary of all the defined rooms (and it's players in them) ... what would be the best way to do that ?
17:08 < github9230> anybody know how to clone 
17:08 < github9230> something similar
17:08 < github9230> to
17:08 < github9230> http://svideo.herokuapp.com
17:10 < pachet> evelyette: the typical answer is to store them inside an object, within a specific module
17:10 < oddi> evelyette: declare the variable without the var operator
17:10 < pachet> evelyette: my personal recommendation would be to have a look at redis
17:10 < oddi> if your only using one process else look at redis
17:11 < evelyette> by one process you mean that I don't use a cluster of node.js's ?
17:12 < oddi> yes
17:12 < evelyette> cool, thank you, I will look at redis right now 
17:12 < github0230> need http://svideo.jit.su/
17:12 < github0230> cloned
17:12 < github0230> will donate
17:12 < github0230> evelyette: can u do this
17:13 < oddi> instead of "var  Rooms = " -- "Rooms = "
17:13 < oddi> "global.Rooms" will make it global to the current module and all modules that was required in the current module
17:14 < bradleymeck> github0230: doesnt seem to hard but wouldn't it make more sense to just contact the people who made svideo?
17:22 < TehShrike> I think wrapping up your global gamestate in its own module would be vastly preferable to having a single giant object at the top of your code
17:30 < wao> :D
17:31 < TehShrike> :-o
17:39 < slaskis> i'm using a multi query with node_redis. is it supposed to respond with QUEUED sometimes? 
17:40 < slaskis> hmm, might be related to https://github.com/mranney/node_redis/issues/281
17:43 < tnorris> anyone know of a package that can encode/decode Objects to/from Buffers faster than `new Buffer(JSON.stringify(my_obj))`?
17:46 < TooTallNate> tnorris: if you're working within the same process, you can use "ref"
17:46 < TooTallNate> to write pointers to JS Objects into Buffers, and read them back out later
17:50 < tnorris> TooTallNate: sorry, not using data in same process. was thinking maybe a .cc extension existed that could serialize an Object to a Buffer,  quicker than turning it into a string first using JSON.stringify().
17:51 < plato> surely objects are stored in a binary representation internally?
17:51 < TooTallNate> tnorris: maybe try msgpack?
17:52 < tnorris> hm, interesting. I'll take a look. thanks.
18:06 < tnorris> TooTallNate: beautiful, just what I was looking for. thanks.
18:17 < Industrial> erm, just to make sure; a={foo:'bar'} a='lol'  <-- this garbage collects the object on next GC churn right?
18:19 < Industrial> in other news "The eval that men do lives after them; The code is oft interred with their bones."
18:19 < tnorris> Industrial: run a script with `--trace_gc_verbose` or `--log_gc`, should show you if this occurs.
18:19 < Industrial> thanks
18:20 < RLa> since gc is not incremental it will be collected
18:20 < tnorris> and I think v8 does local GC's more often than global GC's. so it may depend on your context when it will be cleaned up.
18:30 < phrearch_> hey
18:30 < phrearch_> i would like to make the route function available when i import this file as a module: http://paste.kde.org/553058/
18:30 < phrearch_> any idea how i should to that with exports?
18:31 < busyrich> hey Node.js gurus, I am doing some research here
18:32 < busyrich> how many node applications do you think are out there and/or created on a month-to-month basis?
18:32 < ^rcaskey> at least like, 7
18:33 < kuplatupsu> I would guess 4
18:33 < busyrich> lol
18:33 < ^rcaskey> just cut to the chase, what are you trying to justify and we can tell you what you want :P
18:33 < aandy> It's difficult to say. I don't know if they'd let you know how many times either version of nodejs has been downloaded (taking into account that people upgrade). perhabs you could look at the npm statistics for express
18:34 < aandy> it's by no means an accuracte proxy, but it should give you rough ballpark
18:34 < gildean> busyrich: too many to count precisely i would say
18:34 < bradleymeck> busyrich: define applications, i mean if you are talking about just scripts i tend to run, like 50 from me a month
18:34 < busyrich> ^rcaskey : I am being 100% honest here. I am just doing some research into the poularity of node via # of apps
18:35 < busyrich> I would say apps as in a web presence
18:35 < aandy> busyrich: that's a tought number to get
18:36 < aandy> if i were you, i'd perhabs look at the github stats instead
18:36 < ^rcaskey> i mean, i've got a node.js app that doesn't do web so...
18:36 < aandy> aka. how many node projects
18:36 < busyrich> yeah, thats genrally why I am asking, hive mind type of thing
18:36 < ^rcaskey> busyrich, what terrible degree program are you in that requires you ask these sorts of questions?
18:37 < busyrich> figured between all these people there can be some valid number
18:37 < aandy> hehe, i was just about to ask the same
18:37 < busyrich> ^rcaskey : its not for school
18:37 < aandy> what's up with your colors btw?
18:37 < ^rcaskey> busyrich, so what terrible company do you work for that...
18:37 < busyrich> hey, if you guys don't want to dicuss it, Im fine with that
18:37 < aandy> i thought we were discussing it?
18:38 < ^rcaskey> it's not a discussion issue, it's that there is no way to know and even if there were it wouldn't be useful for anything
18:38 < aandy> i gave you two valid proxies for the number you're looking for
18:38 < ^rcaskey> knowing that there are 20x as many VBA programmers a node.js programmers doesn't tell you anything about the availability of talent for writing enterprise apps
18:38 < aandy> but your "research" isn't very realistic, at least in a statistical/academic way
18:38 < bradleymeck> busyrich: given number of deploys to us a month and us being a public node host, around 5k+ new things that actually reach web presence if you try to count all the other things ppl deploy to. As for applications, that term is still very loose and needs more description
18:39 < aandy> ^rcaskey: i think he was interested in "popularity", which was why I suggested looking at the github spread
18:39 < bradleymeck> but then again 5k could be far off, i suggest you go talk to all the public node hosts
18:39 < busyrich> ^rcaskey : we are attempting to valid nodejs as a platform that is growing
18:39 < aandy> what does that mean?
18:39 < ^rcaskey> busyrich, are trendy startups hiring for node.js yes they are
18:39 < plato> hey does anyone have info about web crypto api?
18:40 < ^rcaskey> are banks throwing out their mounds of J2EE middleware for node.js, no, not realy
18:40 < aandy> nodejs is growing, every day new commits are made to the node repo :)
18:40 < bradleymeck> plato: http://www.w3.org/2012/webcrypto/WebCryptoAPI/ ?
18:40 < aandy> ^rcaskey: your point being?
18:40 < aandy> as with all frameworks, and even languages, context is everything
18:40 < ^rcaskey> so a question of 'is it growing in popularity' isn't useful for much
18:40 < aandy> right
18:40 < busyrich> its all about provide proof though
18:41 < busyrich> its not about a repo that is growning or that "trendy startups" are using it
18:41 < ^rcaskey> but why, are you looking at whether or not to support it in an IDE or teach it in school or learn it yourself?
18:41 < aandy> i don't use node in finance projects, no, but that's because there are other tools that are a better fit
18:41 < plato> bradleymeck: yeah, that. i am trying to figure out if this is anything further than a draft spec, i.e. if i can use it in browsers
18:41 < busyrich> its about the number of people using it is a useful sense. For websites, api, useful internal tools etc
18:41 < ^rcaskey> aandy, FORTRAN :)?
18:41 < aandy> on the other hand i do use node in some projects that aren't "trendy", but simply way better suited for the job
18:41 < aandy> so i'm not sure i follow your line of questioning
18:42 < aandy> no, not fortran
18:42 < bradleymeck> plato: not yet
18:42 < plato> kthx bradleymeck 
18:42 < ^rcaskey> aandy, one of my friends is busy writing FORTRAN for GPUs for the financial sector :P
18:43 < aandy> nice :)
18:43 < busyrich> bradleymeck: thanks for that snippet, good info
18:43 < Randiel> hi please somebody use node.js as web server in production environment ?
18:43 < ^rcaskey> Randiel, what's your issue?
18:44 < aandy> i do work in the financial sector, but not as a programmer. my use was as a algorithm framework. i have considered using fortran (or at least allowing it), but i'm by no means that far along yet :)
18:44 < Emily> hey
18:44 < Emily> I'm using node-pool with mysql
18:44 < claire101> i'm looking at node.js as a substitute for my php-backend. 
18:44 < Guest68011> Question is, when do I need to release my db object?
18:44 < Randiel> i have a web project and i need decide about my web server, in my alternatives there node.js
18:45 < ^rcaskey> Randiel, most sites serving directly out of node are using express
18:45 < aandy> or nginx
18:45 < Guest68011> Can I release it after acquiring and then calling queries or I need to  release in the lst query's callback?
18:46 < bradleymeck> aandy: fun stuff in finances, node.js does handle map-reduce style situations fairly well but wish i could get better performance when actually merging that data
18:47 < Randiel> thank you rcaskey
18:47 < ^rcaskey> see also #xpress
18:47 < ^rcaskey> err #express
18:49 < draginx> https://github.com/herry13/npm-antlr3 is anyone making antlr4? :D
18:49 < aandy> bradleymeck: just last night i set up a neo4j test with map-reduce in mind. just as a latenight toy, but i can see your point and think you're right
18:50 < RLa> draginx, the parser generator?
18:50 < draginx> yeah
18:51 < draginx> or is there a better way of creating AST?
18:51 < draginx> and lexicons, etc.
18:51 < draginx> i remember something like.. sparser.js?
18:52 < CoverSlide> for javascript? esprima is currently the tool people use
18:52 < RLa> i think antlr was pretty decent, i remember making a grammar for a functional toy language
18:52 < RLa> i think i have seen generic parser generators for js too
18:53 < RLa> jison should be one
18:53 < CoverSlide> jison is what's used by coffeescript
18:54 < RLa> you could also make simple recursive descent parser if it's simpler language
18:54 < RLa> that would give better error reporting too
18:54 < draginx> ah tt
18:54 < draginx> ty*
18:55 < aandy> bradleymeck: there's something mildly satisfying that lookups like these are so simple: http://pastebin.com/wvLQiQKM perhabs not the most advanced map/reduce example, but :)
19:10 < tnorris> where's the documentation for `require('sys')`?
19:10 <@Nexxy> it's util now
19:10 < tnorris> mother effin. duh... thanks.
19:10 <@Nexxy> :)
19:12 < tnorris> anyone here familiar with npm package `msgpack`?
19:13 <@Nexxy> tnorris, just use json ;P
19:14 < mscdex> nodejsrules.js
19:14 < bradleymeck> tnorris: the one creationix wrote?
19:14 < creationix> no, mine is msgpack-js
19:14 < creationix> msgpack is the outdated C-binding peter wrote if I remember right
19:14 < tnorris> Nexxy: heh, msgpack is a lot faster when serializing JSON to be sent as a Buffer.
19:15 < creationix> my msgpack-js is faster than json for array and number-heavy payloads
19:15 < creationix> json is still faster for string-heavy payloads though
19:15 < creationix> but msgpack is always smaller on the wire if bandwidth is the concern
19:15 < CoverSlide> sweet
19:16 < tnorris> creationix: unless you're doing `new Buffer(JSON.stringify(my_obj))`
19:16 < creationix> tnorris, I thought that, but the buffer conversion didn't seem to matter much in benchmarks
19:16 < tnorris> going directly from Object to Buffer is about 40% faster (in my experience)
19:16 < creationix> but yes, msgpack-js is direct to buffer
19:16 < tnorris> I benchmarked against objects with 2 million items.
19:16 < creationix> and I extended the format to tell the difference between strings and Buffers as values
19:17 < creationix> so ["Hello", new Buffer("Hello")] is serializable
19:17 < creationix> also has undefined support
19:17 < gluxon> creationix: Aren't all varialbes (other than resources) serializable?
19:17 < creationix> JSON can only serialize certain types
19:17 < CoverSlide> RegExps? Functions?
19:18 < tnorris> creationix: interesting. I'll run my benchmarks against package.
19:18 < creationix> I encode functions in my Smith protocol
19:18 < tnorris> ... didn't read that before sending it.
19:18 < nathan7> RegExp.prototype.toJSON=RegExp.prototype.toString
19:18 < creationix> nathan7, sure, but then it comes out the other end as a string, not a RegExp
19:18 < jocafa> what about arrays that also have properties?
19:18 < CoverSlide> and that string could be a file path
19:19 < creationix> jocafa, I think I ignore the properties
19:19 < creationix> since I use Array.isArray to check
19:19 < nathan7> creationix: sure
19:19 < CoverSlide> what about array-like objects?
19:20 < CoverSlide> do you have to arrayify them?
19:21 < CoverSlide> >> Array.prototype.slice.call({3:3,length:30,z:'disappears'})
19:21 < purr> CoverSlide: (object) [undefined, undefined, undefined, 3, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined]
19:23 < tnorris> in the following test, the npm package `msgpack` using the .cc library is significantly faster: https://gist.github.com/3751655
19:24 < jocafa> yeah there's no way to do arrays with properties in json :(
19:26 < jocafa> which is kindof useful if you have an array of, say transactions, that you want to roll up and create a "totoal" property out of on the array itself
19:30 < glasser`> I'm updating my app from node 0.6 to node 0.8 and am having trouble with child_process. Specifically, a change to how stdio pipes to the child process are set up seems to be breaking any attempt to open /dev/stdin or /proc/self/fd/0 on the child (in Linux)
19:30 < glasser`> Specifically looks like this commit did it: https://github.com/joyent/libuv/commit/c0081f0e6675131721dbb5138fd398792a8c2163
19:30 < glasser`> which switches from using pipe2(2) to create the pipe to the child, to using socketpair(2)
19:30 < glasser`> anyone know anything about these child_process changes? (indutny made the change, dunno what indutny's IRC nick is)
19:30 < tnorris> glasser`: could you point to you code? be easier to see what may need updating.
19:31 < glasser`> tnorris: eg, child_process.spawn('cat', ['/dev/stdin']) is good enough
19:32 < tnorris> glasser`: if you're trying to read from stdin, then just run `process.stdin.resume()` and you're process will accept stdin.
19:32 < glasser`> tnorris: That's not the issue, I am positive
19:32 < glasser`> The open('/dev/stdin', O_RDONLY) in the child fails
19:32 < glasser`> this is definitely an issue with the change from pipe2 to socketpair, I've reproduced with a simple C program
19:37 < tnorris> glasser`: sorry dude, don't understand what your code is trying to accomplish.
19:37 < glasser`> tnorris: here, i'll show a gist
19:38 < glasser`> https://gist.github.com/3751746
19:38 < glasser`> All this does is spawn "cat /proc/self/fd/0"  (you can use /dev/stdin instead) and display the stdout and stderr from cat
19:38 < glasser`> And then closes the pipe to cat, so that cat should be cat'ing an empty file
19:39 < glasser`> with node 0.6.17:
19:40 < creationix> tnorris, yeah, I expect the C version to be faster
19:40 < creationix> but does it run in the browser? https://github.com/creationix/msgpack-js-browser
19:41 < creationix> same code, but using DataView and ArrayBuffer instead of node Buffer
19:41 < glasser`> tnorris: OK, I updated the gist with 0.6.17 and 0.8.9 output
19:41 < glasser`> https://gist.github.com/3751746
19:41 < tnorris> creationix: lol, no.
19:41 < gkatsev> creationix: any particular reason to have it be a separate module rather than just checking for what's available?
19:42 < tnorris> glasser`: ok, is your code meant to basically echo stdin to the node process?
19:43 < glasser`> tnorris: I mean, this isn't my real code. My real code is "run some program I didn't write in a child process that has no special way of saying 'process stdin', so I pass /dev/stdin or /proc/self/fd/0 as an arg"
19:43 < glasser`> tnorris: This is just showing that even if that program is cat, it fails
19:43 < creationix> gkatsev, effeciency
19:44 < creationix> gkatsev, I could abstract away the buffer access code, but that would hurt performance
19:44 < gkatsev> right, you wont need to check what's available every single time
19:44 < gkatsev> makes sense
19:44 < creationix> gkatsev, it could fork at startup
19:44 < creationix> but then it's bloating the code
19:45 < creationix> easier to just ship the browser version to the browser and the node version to node
19:45 < creationix> it's "msgpack-js" in the jamjs repo
19:45 < creationix> and "msgpack-js" in the npm repo
19:45 < gkatsev> yeah, I guess the only problem is that it's code duplication still
19:45 < creationix> not really duplication, it's a port
19:46 < creationix> but yeah, same algorithms
19:46 < gkatsev> ok
19:46 < tnorris> glasser`: you can pass the node process's stdin fd in the `stdio` option in the third argument for spawn().
19:46 < tnorris> I do it a lot when I don't want the parent to see the stdin, but I want the child process to.
19:46 < glasser`> tnorris: That's not what I want.
19:47 < glasser`> tnorris: I want to create a new pipe between parent and child
19:47 < glasser`> Pretty standard unix behavior
19:47 < glasser`> Node implements this perfectly fine
19:47 < jaha> is the ability to require() JSON files a node specific commonjs feature or is it covered under the commonjs spec?
19:47 < glasser`> but the precise syscall used by libuv changed between 0.6 and 0.8
19:49 < tnorris> glasser`: ok. well, I only got 2 hours of sleep last night so i'm not seeing completely straight. one sec.
19:50 < glasser`> added a C test program to the gist too
19:52 < tnorris> glasser`: ok, i understand the change/breakage between 0.6 and 0.8. do you think you couldn't reproduce the functionality you need with the current implementation?
19:53 < JasonSw> Howdy, all.  Anyone here good with CoffeeScript, and able to help out a total newbie on NodeJS / Coffee / JS? :-)
19:53 < saamyjoon> Hey all, I am trying to profile how long from the 'request' http listener till the http.ServerRespone objects sends its final bits. Is there any common practices on how to do this, such as an event that fires when the all the bits have been sent?
19:53 < Daegalus> JasonSw: careful about asking about coffeescript in here, many here have a weird hate for it.
19:54 < tnorris> JasonSw: I hope you pour hot coffee on yourself! ;)
19:54 < JasonSw> lol, I figured I would get a mixed replies about CoffeeScript.
19:55 < Daegalus> I personally dont care, and i like some of what coffeescript does, just giving you a fair warning JasonSw 
19:55 < glasser`> tnorris: Yes, as far as I can tell you can't get Node 0.8 to use pipe2 any more
19:55 < JasonSw> Thank you :)
19:55 < glasser`> tnorris: So this breaks the ability to do the common Unix practice of "run a subprocess, write to its stdin, but refer to its stdin as /dev/stdin because it doesn't support 'no arg means stdin' or '- means stdin'"
19:55 < glasser`> tnorris: Anyway, sending mail to the nodejs group, hopefully that will help
19:56 < tnorris> glasser`: ah, ok. I was thinking of the more abstracted data flow (e.g. data -> stdin -> child_process -> parent_process, or some such thing).
19:56 < tnorris> but you have a very specific implementation you're looking for.
20:09 < visnup> is npmjs.org down?
20:11 < drudge_> seems like it
20:11 < CoverSlide> yup
20:12 < CoverSlide> isaacs: npm is down aaaaaaahhhhhh!
20:12 < visnup> ohnoes!
20:17 < mscdex> yeah npmjs.org has been having issues lately :-\
20:42 < bamotarp> gentoo.de fascist?
20:43 < AAA_awright> Is there anyone here who's particularly unhappy with the fact most everyone is releasing 0.x.x versions, and won't release 1.0.0?
20:44 < superjoe> AAA_awright, 1.0.0 doesn't actually mean anything
20:44 < plato> i'd be more unhappy with flawed 1.0.0 releases
20:44 < AAA_awright> superjoe: Yeah it does, http://semver.org/spec/v1.0.0.html
20:45 < superjoe> AAA_awright, " If the dependency specifications are too tight, you are in danger of version lock"
20:45 < superjoe> this statement doesn't apply to npm
20:45 < AAA_awright> superjoe: How so?
20:46 < AAA_awright> Dependency lock is like me depending on version 2.6.5 exactly
20:46 < superjoe> AAA_awright, you can do that, and another one of your dependencies can depend on version 1.6.7 with no conflict
20:47 < aalex-sat> hello
20:47 < AAA_awright> That doesn't have anything to do with npm (not that I was ever talking about npm), but packages that choose to depend on versions like 2.6.8 exactly, instead of ~2
20:47 < aalex-sat> How do I set the port number to node on Ubuntu?
20:47 < superjoe> aalex-sat, wat.
20:48 < superjoe> AAA_awright, npm installs copies of dependencies instead of trying to reuse them, so you never end up in dependency hell
20:49 < AAA_awright> superjoe: I'm not the one who brought up dependency hell
20:49 < AAA_awright> Also, that's a bad thing, because then you get (x instanceof y) == false when it should be true
20:49 < aalex-sat> superjoe, ah it's in the js code. weird
20:49 < superjoe> AAA_awright, yes you did. it's the first sentence in http://semver.org/spec/v1.0.0.html
20:49  * aalex-sat is quite new to node
20:50 < superjoe> AAA_awright, no, you don't.
20:50 < AAA_awright> superjoe: ... Um, I'm talking about how 1.0.0 is meaningful
20:50 < AAA_awright> superjoe: Have you ever tried running an application with NODE_MODULE_CONTEXTS=1 ?
20:50 < AAA_awright> Bad Things Happen
20:51 < superjoe> AAA_awright, why would I do that? it looks like an undocumented environment variable that breaks your code
20:52 < AAA_awright> superjoe: It's the same thing. It creates new definitions of objects in every module, instead of using the same definitions. This means that a string returned from another module will not be an instanceof String
20:54 < superjoe> AAA_awright, the problem you're imaging doesn't exist if you don't use your dependencies' dependencies, which you shouldn't be doing anyway.
20:55 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
20:56 < AAA_awright> superjoe: If I call require(mongolian) and make a query, and it returns ObjectId('hexblah'), that's not going to be an instanceof require('objectid') because that's going to load a new, different definition of ObjectId
20:56 < AAA_awright> I never called the dependencies' dependency, my point exactly
20:57 < superjoe> AAA_awright, can you give example code where using instanceof like this is well-written code?
20:57 < AAA_awright> In fact the only way to mitigate that would be to call the meta-dependency! Clearly I shouldn't have to do that
20:57 < AAA_awright> Well I just gave you an example, that I encountered actually
20:57 < wilornel> Hey guys, when I try to src socket.io/socket.io.js on my client-sided files, I receive a socket.io.js file containing everything that I 'res.write()' in my node.js server
20:58 < wilornel> If I do : res.write('hello world123'); , the socket.io.js file will contain 'hello world123'
20:58 < AAA_awright> It's not hard to code one yourself, either, you just have to cp -a the module to a child node_modules
20:58 < superjoe> AAA_awright, but why do you need to use instanceof?
20:58 < superjoe> just treat it like the object it is
20:58 < AAA_awright> domain checking?
20:58 < AAA_awright> Filtering user input?
20:59 < AAA_awright> I don't know, why should a good programmer use instanceof?
20:59 < superjoe> instanceof is a code smell
20:59 < AAA_awright> And it breaks strict equality too
21:00 < AAA_awright> superjoe: But anyways, the original point is using 1.0.0 *means something*, 0.* does not
21:01 < superjoe> AAA_awright, I find that the code quality of modules has no correlation to the version number
21:01 < AAA_awright> It's well established how these version numbers go, so it's a tragedy when people go out of their way to circumvent them
21:01 < AAA_awright> superjoe: No one said it did
21:01 < superjoe> AAA_awright, what are you saying that 1.0.0 means?
21:01 < AAA_awright> superjoe: I just linked you to what it means >_< http://semver.org/spec/v1.0.0.html
21:02 < superjoe> and then when I responded, you claimed that you didn't say that
21:02 < AAA_awright> Skip to the header "Semantic Versioning Specification" if it helps you
21:02  * BennyLava facepalms
21:03 < wilornel> Hey guys, when I try to src socket.io/socket.io.js on my client-sided files, I receive a socket.io.js file containing everything that I 'res.write()' in my node.js server
21:04 < wilornel> If I do res.write('hello world123'), my socket.io.js will contain 'hello world123'
21:04 < superjoe> AAA_awright, I see your point
21:04 < chandru_in> I tried node --prof on linux 64-bit but I'm unable to open v8.log with linux-tick-processor
21:06 < superjoe> I think the node.js versioning scheme is to use 0. -> 0 <- .0 as the number that indicates backwards incompatible changes have been made
21:07 < chandru_in> Has anyone profiled node.js apps on 64 bit linux?
21:09 < AAA_awright> superjoe: The minor version zero? Well, the idea is 1.*.* isn't 100% compatible with a release made under 2.*.*
21:10 < superjoe> AAA_awright, sorry, I meant that the node.js versioning scheme is that *.1.* isn't 100% compatible with a release made under *.2.*
21:10 < superjoe> 0.1.*, 0.2.*
21:11 < AAA_awright> It's not well defined though, and three of the breakages I've encountered have been in the middle of the 0.8.* series
21:12 < superjoe> AAA_awright, sounds like you have a good case for standardization
21:12 < AAA_awright> Not bugs either, purpuseful breakages
21:12 < AAA_awright> I don't think anyone realized it broke code but meh
21:12 < AAA_awright> superjoe: That's what I'm hoping to make the case for
21:14 < tnorris> for some reason setting `process.stdin.setEncoding('utf8')` is slowing down transfer rates a lot more than I thought it should.
21:14 < tnorris> here are some bench results: https://gist.github.com/3752293
21:15 < tnorris> for the multi children test, I would think that the encoding change would happen on the child, so it wouldn't cause as must slow down.
21:16 < tnorris> anyone have an idea why this is happening?
21:57 < ag4ve> how do y'all implement data mappings between the page and server?
21:57 < ag4ve> i mean, do you do it on the page, or in the model?
21:58 < bradleymeck> ag4ve: send down json have page render it
21:59 < samholmes> How secure is that image clicking login thing that windows 8 has?
21:59 < hueniverse> Any idea why "crypto.createCipher('id-aes256-GCM', key);" returns "node-crypto : Unknown cipher id-aes256-GCM" on 0.8.9?
22:02 < bren2010> hueniverse, does  "openssl list-cipher-algorithm" list that cipher on your machine?
22:09 < dmachi> If one includes a git url as a dependency in package.json but that package otherwise exists in npm (at an older rev), is there a way to force it to use the git over the npm prebuilt package/version?
22:10 < addisonj> util.pump is corrupting the first bit of a file... 
22:10 < AAA_awright> dmachi: git submodules
22:10 < addisonj> ah, its deprecated anyways
22:10 < hueniverse> @bren2010: yep
22:11 < dmachi> AAA_awright well i know I can do it with git submodules, but i'd prefer to avoid that if at all possible, all the rest of the deps are just listed in package.json.  Do the git urls not work as dependencies any more?
22:12 < AAA_awright> I'm not quite sure. I don't know how npm would know the package name based on the Git URL though...
22:15 < dmachi> "packageName": "git://github.com/user/repo.git#master"   vs "packageName": ">=0.5.1"   is how i understand it
22:16 < AAA_awright> Oh uh
22:16 < AAA_awright> dmachi: I have a feeling that's now how you do it, because you still need to specify which versions you're compatible with
22:16 < BennyLava> ..
22:16 < dmachi> right, but thats what the blogs say..so I was coming here to find out the real deal :)
22:20 < AAA_awright> dmachi: You're probably looking for the `npm submodule` command
22:20 < AAA_awright> dmachi: Or try out https://github.com/Acubed/git-node
22:20 < dmachi> https://github.com/isaacs/npm/issues/2488 is the issue i think
22:20 < AAA_awright> (Shameless self-plug)
22:21 < dmachi> AAA_awright: :)
22:26 < CIA-118> libuv: Charlie McConnell master * r2916a16 / src/unix/error.c : unix: map EDQUOT to UV_ENOSPC - http://git.io/kRozBg
22:31 < kibibi> for me, this works under dependencies: "everyauth": "git://github.com/bnoguchi/everyauth.git#express3"
22:36 < tnorris> I've created a type of .pipe() that supports an array of destinations. Any feedback is appreciated: https://github.com/trevnorris/deluged/blob/master/lib/segp.js
22:38 < CoverSlide> can't you just src.pipe(dest1), src.pipe(dest2), src.pipe(dest3) ?
22:38 < tnorris> CoverSlide: it round-robin sends data to each destination.
22:38 < CoverSlide> oh you're oding a round robinny thingy
22:38 < tnorris> yeah.
22:38 < CoverSlide> ok gotcha
22:39 < tnorris> I'm using to parse log entries. route the log file through a parent process, and send them to child processes for parsing/routing.
22:42 < plato> http://www.damninteresting.com/the-timber-terror/
22:43 < wilornel> Is there a professional node.js user in here?
22:43 < plato> wrong channel but neat article ;)
22:43 < wilornel> plato, are you good at node.js?
22:44 < plato> uh probably not? ive been using it for a couple months
22:44 < plato> what is your question
22:44 < wilornel> its about socket.io
22:44 < plato> what is your question
22:44 < wilornel> ok so.... I have a server.js file and a client.html file, I am trying to do a chat
22:45 < wilornel> When I run socket.js on my srver, everything is fine
22:45 < wilornel> omy server is ubnutu server
22:45 < wilornel> then, I go on windows pc, and go to 192.168.0.108/test.html
22:46 < wilornel> on client.html, I try to <script src="192.168.0.108:8080/socket.io/socket.io.js"
22:46 < wilornel> but, the socket.io.js file is... empty!
22:46 < wilornel> If on my server.js, I do res.write('hello world123');, it will appear in the socket.io.js file.
22:48 < ag4ve> ok, someone help me out here, this is probably stupid but i'm stumped. if i do: console.log("string: " + JSON.stringify(data[i].org[0])) i get this: string: {"_id":"505874f9bc255b4054000004","agency":"me","web_ag":"one","symbol":"ok"} but if i do: console.log("string: " + JSON.stringify(data[i].org[0].symbol)) it errors
22:48 < plato> sorry idk. ive seen ppl have that issue before. likely your node is intercepting your clients' request for the javascript file and trying to serve it
22:48 < wilornel> Hm...
22:48 < wilornel> you have no idea at all?
22:48 < wilornel> I've been searching for 2 days :/
22:49 < plato> ag4ve: try console.log("string: " + JSON.stringify(data[i].org[0]["symbol"])) maybe?
22:49 < wilornel> oh yeah and, what is express?
22:49 < plato> express is a module for node that deals with serving web sites
22:49 < wilornel> its like apache?
22:50 < wilornel> plato
22:52 < tnorris> wilornel: express is not like apache. it's a simplified API to handle incomming HTTP(S) requests.
22:52 < ag4ve> plato: no dice
22:52 < wilornel> but it can respond to http(s) requests too right?
22:53 < tnorris> wilornel: yeah, you can write out a response to the client.
22:53 < wilornel> can the response be .html files?
22:54 < terinjokes> you can stream files out
22:54 < ag4ve> ... maybe i need to do something extra to object-ify a related mongoose data structure
22:54 < tnorris> you can read a file from the file system and output its contents to the request.
22:54 < tnorris> ag4ve: what do you get when you `console.log(data[i].org[0])`?
22:55 < ag4ve> wilornel: or, you can be smarter and use express.static or ecstatic or another thing like that
22:55 < wilornel> why would it be smarter?
22:56 < ag4ve> tnorris: console.log("string: " + JSON.stringify(data[i].org[0].symbol)); var curdat = data[i]
22:57 < ag4ve> errrr
22:57 < jerrysv> Nexxy: quite possibly the best use of node evar: http://legitimatesounding.com/baileys/screens8.jpg
22:57 < ag4ve> tnorris: string: {"_id":"505874f9bc255b4054000004","agency":"me","web_ag":"one","symbol":"ok"}
22:58 < tnorris> ag4ve: I don't understand. the "string" and "_id" are already defined in your console.log from above. How would it appear in the simplified .log()?
22:59 < ag4ve> what do you mean 'how would it appear'?
23:00 < ag4ve> or that string and _id are already defined?
23:01 < tnorris> ag4ve: nm. eyes playing tricks on me. ok, do this: `for (var j in data[i].org[0]) console.log(j, j.length);
23:02 < tnorris> it's a long shot, but if one of the id's had a null character appended to it, it wouldn't appear but not allow you to access the data by name.
23:03 < tnorris> oh, wtf am I thinking. Don't JSON.stringify() on .symbol. it's a freaking string all ready. do this: `console.log('string:' + data[i].org[0].symbol)`.
23:08 < ag4ve> tnorris: heh, now i think i'll go with your idea of just .length as logging a mongoose object isn't a good thing :)
23:13 < ag4ve> ooooooooh, i get it, i was checking if org was defined and just going with that. of course it's going to be defined since it's a mongoose object. however that doesn't mean there's any data there.... doh
23:13 < ag4ve> i knew i was being stupid somehow
23:16 < tnorris> ag4ve: no worries. glad you got it working
23:17 < tnorris> mmalecki: here's my round-robin version of .pipe() I was talking about: https://github.com/trevnorris/deluged/blob/master/lib/segp.js
23:17 < tnorris> no huge changes. the thing causing the most slowing is running `process.stdin.setEncoding()` in the child process for some reason.
23:18 < LouisT> tnorris: so, i've gotten the file reader to pause as needed, now i just can't get the mongodb lib to run the callbacks after i call update..
23:18 < tnorris> LouisT: that's really strange. can you setup a simplified test case and debug the mongo callbacks?
23:19 < tnorris> unless those callbacks are called, you're sol.
23:22 < tnorris> LouisT: I'd say start with the simplified example they have in the README and test out the callback. whether that does or doesn't work is very significant.
23:29 < LouisT> oh, well that's weird
23:29 < LouisT> tnorris: $ node test.js 
23:29 < LouisT> callbacked called
23:29 < LouisT> successfully updated
23:30 < tnorris> LouisT: ok, for a shotgun approach I might recommend placing .log() at key points in your program and seeing where it's stopping.
23:30 < LouisT> tnorris: i have that already, it's stopping right at the update call -.-
23:31 < tnorris> LouisT: do you know if the callback fired before you added .pause()?
23:31 < LouisT> i don't think it did
23:32 < tnorris> ...
23:32 < LouisT> exactly, i don't understand what's going on! the code is exactly the same as in the example i just ran..
23:33 < tnorris> LouisT: if you run it, do you see the first data set being inserted into the db?
23:33 < LouisT> yes
23:34 < LouisT> it gets inserted it just doesn't call the callback... it does if i have safe set to false, but that's just silly
23:35 < tnorris> i'm not sure how the mongodb node.js app internal work, but it may be listening for an event that isn't being emitted after writing.
23:35 < tnorris> sorry, may be reaching the limits of how much I can help.
23:50 < EhevuTov> question: anyone know of something like 'awk' but with nodejs? maybe an awk-like module?
23:51 < EhevuTov> I'm wanting to do pattern matching on fields from a CSV readline
23:57 < EhevuTov> probably just create my own simple module then
--- Log closed Thu Sep 20 00:00:20 2012
