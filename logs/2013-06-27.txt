--- Log opened Thu Jun 27 00:00:38 2013
00:01 < durango> TooTallNate: nevermiund dude I was using it incorrectly :) thanks!
00:07 < mscdex> isaacs: does ircretary persist messages (when it disconnects like that)?
00:08 <@MI6> joyent/node: isaacs v0.10 * 2a8c5dd : blog: v0.11.3 release - http://git.io/7OSM4A
00:12 < Technodrome> classes will be a great addition to javascript 
00:13 < Havvy> Technodrome: I'm not missing them.
00:14 < Havvy> I probably won't ever use the class syntax tbh.
00:14 < Technodrome> Havvy: thats the attitude :) 
00:14 < Technodrome> i admire people who like the prototype system but its like people have to be one or the other 
00:14 < Technodrome> classes are much more straight forward, and just make much more sense
00:15 < Havvy> I only use prototypes when making things event emitters.
00:15 < Technodrome> you use it with any feature in JS 
00:16 < jdelgado> What databases are you all using in production?
00:16 < Technodrome> Havvy: its just a little bit of a headache thats all 
00:16 < Havvy> jdelgado: MySql, Postgres, SQLite
00:16 < Havvy> NPM seems to be using CouchDB.
00:17 < jdelgado> Man, I would love to use a relational, but I have a multi-datacenter requirement :(
00:18 < Technodrome> jdelgado: relational can still very much be used in that fashion 
00:19 <@MI6> joyent/libuv: Ben Noordhuis v0.10 * 88a2c7f : build: `all` now builds static and dynamic lib - http://git.io/YkQKTw
00:19 < jdelgado> Technodrome: It's pretty tough to get two clusters going multi-master, not very stable either :(
00:19 < Technodrome> jdelgado: the only relational db i use right now is azure cloud 
00:20 < Technodrome> seems lame to many, but it works
00:20 < jdelgado> Are they PCI compliant over at azure?
00:21 < jdelgado> Meh they aren't..
00:21 <@MI6> joyent/libuv: Ben Noordhuis master * ce2458c : Merge remote-tracking branch 'origin/v0.10' (+7 more commits) - http://git.io/QpGLDg
00:22 < Technodrome> jdelgado: not many cloud things are 
00:22 < Technodrome> but i'm not sure if i want to use that or not, i might want to just use node and do it that way 
00:22 < Technodrome> still haven't made up my mind 
00:22 < jdelgado> AWS is, thank god.
00:26 < Technodrome> jdelgado: it is, but it wasn't for a long time either
00:27 < Technodrome> you guys think dart will take off?
00:27 < jdelgado> Not at all
00:29 < Technodrome> jdelgado: i just feel robbed, i love using js for all the jquery stuff etc, but i can't stand having no classes and using require js to make a module system with depenendcies 
00:29 < Technodrome> its just like one HUGE blah 
00:29 < jdelgado> Technodrome: What chu talkin' bout? We have prototype! :)
00:29 < ChrisPartridge> Technodrome: just write node style modules and use browserify ;p
00:29 < Technodrome> jdelgado: classes > prototypes
00:30 < jdelgado> Only kidding
00:30 < Technodrome> some js people hate classes and are die hard prototype fans, but they are only that way  because that is the way JS is :) ……so when classes got mentioned to being entered into the language its like "oh no, i won't use those" 
00:30 < Technodrome> the prototype object system has been a source of much failure in the JS world, code wise
00:31 < Technodrome> this should have been fixed back in the ie6 days
00:31 < Havvy> Technodrome: I'm not against classes.
00:31 < Havvy> Ruby and Python are nice.
00:31 < jdelgado> Doesn't coffee have some implementation of classes?
00:31 < Technodrome> Havvy:  the guilty conscious comes up :) 
00:31 < Havvy> I'm just saying I have no point of using them in JS.
00:31 < Technodrome> i wasn't talking about you specifically 
00:32 < Technodrome> i don't like coffee script or even typescript for that matter
00:32 < Technodrome> its like a trick 
00:32 < Technodrome> you loose js skills to these languages but in reality you really need js 
00:32 < Havvy> ES6 class syntax is just syntactical sugar.
00:32 < Technodrome> i need to do a good size server side app and just don't want to use the old python or ruby no more atm
00:40 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
00:47 < neeky> i just don't coffeescript
00:48 < prettyrobots> I loved CoffeeScript but I was shuned for my forbidden love.
00:49 < prettyrobots> And now I've converted.
00:49 < prettyrobots> (All my code to JavaScript.)
00:49 < ChrisPartridge> yay
00:49 < jdelgado> I dabbled into coffeescript, I really loved the syntax, but after a while I notied my code was becoming unreadable and switched back
00:49 < prettyrobots> And I worry now that it's too old and I have to add generators and classes and ES6 stuff.
00:49 < prettyrobots> Node.js has a FUD problem.
00:50 < prettyrobots> I converted all this from Streamline.js CoffeeScript to zero-dependecy JavaScript.
00:50 < prettyrobots> http://bigeasy.github.io/strata/
00:50 < neeky> maybe if you've never programmed, but if you have every seen a block based language, {} and ; mean something
00:51 < neeky> s/every/ever/
00:51 < prettyrobots> Learned a lot. Too much.
00:51 < Traisas> I just started playing around with node (coming from PHP).. I find it very interesting
00:52 < neeky> cofeescript just doesn't read well.  kinda like xsl - just rubbish trying to follow the flow
00:52 < Traisas> I've never used coffeescript.. is it that different?
00:53 < Traisas> completely different maybe eh
00:53 < neeky> coffeescript.org
00:53 < neeky> pretty different if you come form a 'block based' language
00:54 < neeky> in fact, i turn on strict and jshint all the things, which forces {} on one line ifs
00:54 < neeky> {} all the things!
00:55 < Traisas> what's an example of a non block based language?
00:55 < Traisas> python?
00:58 < EhevuTov> lisp?
00:58 < Lorentz> gwbasic
00:58 < Traisas> there are a lot of options out there eh
00:58 < Traisas> programming languages I mean :)
00:59 < Traisas> do you guys really take the time to learn that many of them in depth?
00:59 < Lorentz> yes
00:59 < Traisas> memorizing all the syntaxes, keywords and whatnot?
01:00 < EhevuTov> I don't. I jump around languages too much. I usually have to brush up every year or some on some language I already worked with, unfortunately
01:00 < Traisas> how many would you say you know fluently? you wouldn't need web access for documentation to build a business usable app?
01:00 < Traisas> I'm just now starting to explore out a little bit
01:01 < Traisas> I guess you accumulate them as you go if you experiment
01:01 < Traisas> or change jobs
01:01 < EhevuTov> well, I'd say C is a language that is pretty solid and doesn't add too many new features
01:01 < EhevuTov> that's what I do
01:02 < Traisas> C is on my shortlist of languages to get back to and re-learn
01:02 < Traisas> I learned it a little bit when I first started
01:02 < Traisas> then I got lazy and moved to the web lol
01:02 < EhevuTov> I constantly go to it. i find it ironically more portable than my higher level languages in ways, which is funny
01:03 < Lorentz> I'd put nodejs on the list, but the way there are so many packages, it's not easy without internet documentation
01:03 < Zak> is there a quick/easy way to download a given url to a file, possibly with a callback? (I can write this code myself but wondering if there's a library out there that does this already)
01:03 < Traisas> I'm pretty excited about nodejs.. I'm starting to see what all the hype was about
01:03 < Lorentz> C is a solid choice, most everyone should know it
01:04 < noocx> hi
01:04 < Traisas> I'm not sure about a full app with it, but it seems great for REST/etc. APIs
01:04 < Traisas> hi
01:04 < jdelgado> I still don't understand how MongoDB got so popular, other than it is easy to get started.
01:05 < Traisas> yeah I'm interested to try that too
01:05 < Traisas> I also don't understand the attraction
01:05 < Zak> ah nevermind.. I'll just use mikeal's request package.
01:05 < EhevuTov> JS/Node is more and more of my go-to high level language/platform. I work with streaming, and I find myself using it for prototypes. I'd use it for production, but my boss doesn't like things he doesn't know
01:05 < Traisas> I also wonder if it's stable enough for production
01:06 < EhevuTov> I use node the way people used C and Unix pipes back in the day. It's become like this high-level retro platform for me
01:06 < Lorentz> Traisas: depends on business requirements
01:06 < EhevuTov> I would use it in production, most definitely
01:06 < Zak> Traisas: it depends on your purpose.
01:06 < Traisas> just to run scripts and get shit done?
01:06 < Zak> Traisas: more so to do with how reliably you need data to be written/read
01:07 < jdelgado> Traisas: Are you asking is node was ready for production?
01:07 < EhevuTov> I use node for high-volume stream translation. I haven't had a problem with it yet
01:07 < Traisas> reliably
01:07 < Traisas> yeah I'm asking that
01:07 < Zak> node is being used in production
01:07 < Traisas> I guess this is the perfect place to ask it eh lol
01:07 < Zak> by lots of people...
01:07 < EhevuTov> Node has been used in production for years by high-profile companies
01:07 < Lorentz> we all know -ilities are all on a scale, not boolean values
01:07 < jdelgado> Yeah, node is way more stable than some other web languages imho
01:07 < Zak> it's important that people use node in production, even if it's not 100% ready
01:07 < Traisas> well that's good to know
01:07 < Zak> its because of these people, we find out about stuff that needs to be fixed
01:08 < Traisas> fair enough
01:09 < Traisas> I need to understand it a little better obviously
01:09 < EhevuTov> Traisas, if I had my own business in my area, I would be making products in node and using the c-addons for some of the high-cpu hashing.
01:09 < Zak> Traisas: imho, i would start using node and ensure I architected so I could switch stuff in/out
01:09 < Zak> if node does the job satisfactorily, and you can make it easily, you should use it
01:10 < Zak> if you find that node doesn't work, gets too complex, etc.. switch it out 
01:10 < EhevuTov> I find most people get into node for web dev, because they come from Ruby or something, but I've found it great for server-side stream manipulation/enrichment, etc
01:10 < Zak> these days, there's a huge focus on making things scalability, so they can be deployed into cloud environments
01:10 < Zak> all the more reason to architect with flexibility
01:10 < Traisas> yeah of course
01:10 < EhevuTov> and node is great for that
01:10 < Zak> and less reason to invest heavily in a single language or platform
01:10 < Traisas> maybe
01:11 < Zak> i've seen places who just blindly develop in Java, because they have the devs to do so
01:11 < EhevuTov> not to mention you can invest in just one lanuage more or less: Javascript
01:11 < Zak> ignoring the fact that some jobs can be done much easier in other languages
01:11 < Traisas> on the other hand, greater complexity and dependency is rarely good
01:11 < Traisas> yeah I love the idea of JS for everything
01:11 < Zak> i'm a strong advocate of KISS
01:11 < Zak> many of the successful startups all had concepts that were KISS
01:12 < Traisas> yeah man.. simplicity
01:12 < Zak> JS isn't that great a language tbh
01:12 < Zak> there are some terrible things
01:12 < Traisas> is perhaps the most important thing
01:12 < EhevuTov> unspeakable things
01:12 < Zak> but provided you can avoid those things, then its good enough
01:12 < Traisas> unspeakable things lol
01:13 < Traisas> I just enjoy programming it
01:13 < Traisas> with it*
01:13 < sdrulea> I find it brittle
01:13 < sdrulea> the process stops on certain errors
01:13 < EhevuTov> heading out. Stick with Node though and experiment with it. It's great. I started doing it with web dev and realized it was great for my whole stack of most problems
01:14 < sdrulea> makes me nervous about how that works in production.
01:14 < Traisas> take it easy
01:14 < Traisas> that is my main problem as well.. but I feel like there must be some piece that keeps the instance going if it goes down
01:14 < hi> shit
01:15 < hi> what's this?
01:15 < Traisas> what's what?
01:15 < Guest68742> I doesn't agree you change my name
01:16 < Zak> sdrulea: http://nodejs.org/api/process.html#process_event_uncaughtexception
01:16 < Zak> that's the crude mechanism
01:16 < Zak> links to domains
01:17 < Traisas> lol "Do not use it as the node.js equivalent of On Error Resume Next. An unhandled exception means your application - and by extension node.js itself - is in an undefined state. Blindly resuming means anything could happen. "
01:17 < ChrisPartridge> sound advice
01:18 < sdrulea> hmmm
01:18 < sdrulea> Sounds like I need to learn domains
01:19 < Zak> node is moving rapidly. need to keep up with the latest stuff
01:19 < sdrulea> I also notice that when uncaught exceptions occur, the server hangs indefinitely
01:19 < Zak> goes back to what i said about people using node in production; helps the thing improve drastically
01:19 < sdrulea> I love the simplicity
01:19 < Zak> sdrulea: you just need to make sure you capture errors properly and cleanup when necessary
01:19 < sdrulea> Just concerned about the brittleness
01:20 < Traisas> yeah it's pretty sound programming
01:20 < Zak> i really hated/hate the slogans nodejs was using to lure people to use it
01:20 < Traisas> capturing exceptions and cleaning up resources
01:20 < Zak> but that's just marketing i gues
01:21 < Traisas> gtg...  thanks for the info
01:25 <@MI6> joyent/node: Ben Noordhuis v0.10 * cf6acf2 : buffer: add comment explaining buffer alignment - http://git.io/or-c8g
01:41 < neeky>  http://bit.ly/10mdrLU = http://bit.ly/12lDwLI ?
01:42 < mu> I have a website that is currently using Jade and Grunt to generate a bunch of static websites. I'd like to have some server-side content (for example, to display how much memory the server is using) but I'm not sure how to make that happen...
01:43 < mu> I was wondering if there is node.js to facilitate that or if I should look elsewhere
01:45 < oren> neeky: i'll be reading your stuff again until i'll get it. thanks again.
01:45 < oren> how many packages are in npm?
01:48 < Lorentz> 33490
01:48 < oren> how did u find out?
01:49 < cliffano> oren: http://isaacs.iriscouch.com/_utils/
01:49 < Lorentz> I just went to npm website
01:50 < Lorentz> and says right there, "Total Packages"
01:51 < oren> cliffano: u mean the 'registry' line
01:51 < neeky> oren, no worries, if it weren't so late I'd hang on, but I'm beat
01:52 < neeky> but if you assume some generalizations in my earlier posts,
01:53 < cliffano> oren: yes... the registry database is where the documents are stored, each document represent a module
01:54 < neeky> session = a server side object with a unique id, and the other stuff in the object is stuff you want to track about the client
01:55 < neeky> send the session ID to the client as a cookie, and make him provide it to you on every request so you can look up his session object to figure out something about him
01:55 < oren> {id: 12134, name: 'dan', state: 'checkout'} ?
01:56 < neeky> yep, then create a cookie called "session.id" and store '1234' in it
01:56 < oren> and this object is stored in my db on the server?
01:56 < neeky> then every time dan wants something, he has to provide you session.id first
01:56 < oren> but that's not what the connect midleware is doing. i don't think it uses any db.
01:56 < neeky> the 'proper' way top store sessions is yes, a persistent data store
01:56 < oren> correct me if i am wrong
01:57 < oren> so what the hacky/non proper (no db) way?
01:57 < oren> wait
01:57 < neeky> yes, and the connect middleware outputs a biug warning tha says "CAUTION - DO NOT USE THE MEMORY STORE SESSIONS FOR PRODUCTION"
01:58 < neeky> if node dies, so does your session
01:58 < oren> what's memory store sessions? storing array of hashes in memory?
01:58 < oren> what if i have million users? all in memory?
01:58 < neeky> also, if you need to scale out node servers, memory based session stores breaks it
01:58 < neeky> what is your app's database?
01:58 < oren> so redis is a good one?
01:58 < oren> nothing for now.
01:58 < neeky> if you dont have one, then redis is perfect
01:59 < oren> ok.
01:59 < neeky> if you will need a db in the future, then any db works fine
01:59 < neeky> I use mongo
01:59 < neeky> a cokie 'looks' just like a mong document
01:59 < oren> what about the signing. u mention signing the cookie with the id
02:00 < neeky> yeah, so here's signing in a nutshell:
02:00 < neeky> do you understand crypto hashes?
02:01 < neeky> it doesnt matter, i''l explain it like your 5
02:01 < oren> kind of. but have to google it to make sure.
02:01 < neeky> each new session, you need to generate a session ID
02:01 < oren> right
02:02 < oren> udid ?
02:02 < neeky> a UUID is a good one to use, but for our purposes, pretend like your new session ID for Dan is '12345'
02:02 < oren> there is a udid npm package
02:02 < neeky> i think you can get a uuid from node or crypto without needing a package
02:02 < oren> sweet
02:03 < neeky> anyway, 12345 is the identifier for some potentially sensitive info
02:03 < neeky> like whether Dan is logged in or no
02:03 < neeky> so it I give Joe uuid 12346, and he changes his cookie to be 12345, he just logged in as Dan
02:04 < oren> right
02:04 < neeky> now we can prevent this, with signing
02:04 < oren> so we don't want anyone to tamper with the content of the cookie
02:04 < neeky> I create a secret on my server, and hardcode it in app.js
02:04 < neeky> var secret = 'kjshf78st9fsagf9asfyuagfi67atsfdyugaos9ftaos'
02:04 < oren> right
02:05 < neeky> and I use the crypto module to hash dan's session id
02:05 < jdelgado> anyone work with the couchbase node.js driver?
02:05 < neeky> so, 12345 hashed with secret gives me 54321
02:06 < neeky> i then store 54321 in session.id cookie ands send it to dan
02:06 < neeky> now, he has a cookie that looks like lkjsdhf79awstfiawsbkfcyt9awsfog
02:06 < oren> ok
02:06 < oren> wait
02:06 < neeky> and if he trie4s to get fancy, and switch it out with something else
02:07 < JNedved> Any Node.js developers looking for a Sydney, Australia based contract for 6-12 months please get in touch - http://www.seek.com.au/job/24738791 - jamie@it-matters.com.au - no telecommuting I'm afraid
02:07 < oren> u said 12345 -> 54321
02:07 < neeky> right
02:07 < oren> so why do u say lkjsdhf79awstfiawsbkfcyt9awsfog
02:07 < neeky> sorry
02:07 < neeky> so, 12345 hashed with secret gives me lkjsdhf79awstfiawsbkfcyt9awsfog
02:07 < oren> now hashing (unlike) encrypting, can't be recovered, right?
02:07 < neeky> using a proper crypto hash :)
02:08 < oren> u can't get the value 12345, right?
02:08 < neeky> correct
02:08 < neeky> all I have is a 'signature'
02:08 < oren> ok
02:08 < neeky> of the original number
02:08 < neeky> so, if he changes lkjsdhf79awstfiawsbkfcyt9awsfog tolkjsdhf79awstfiawsbkfcyt9awsfoy
02:09 < neeky> and sends it back, all I do is take his cookie and compare it to hs session.id from the DB, hashed against my secret
02:09 < oren> wait...
02:09 < neeky> if they match, I can trust the data in the db is from the guy on the other end of the wire
02:10 < neeky> if not, I delete his session from the db, and delete his cookie and redirect him tot he login screen
02:10 < oren> u get lkjsdhf79awstfiawsbkfcyt9awsfog in the header,
02:11 < oren> what exactly 'hashed against my secret' means?
02:11 < neeky> ok, hang on a sec
02:11 < neeky> i'll show you
02:11 < oren> just compare lkjsdhf79awstfiawsbkfcyt9awsfog with the key
02:12 < neeky> lkjsdhf79awstfiawsbkfcyt9awsfog was the output of hashing his session id, 12345 with my secret
02:12 < neeky> but i only stoire his session id in the DB, never the has
02:12 < neeky> h
02:13 < AAA_awright> Since session ids provide the same authorizations that passwords do, they should be stored as such
02:13 < neeky> yeah, but session are also very time limited
02:14 < neeky> so they are worthless as soon as the user closes his browser
02:14 < AAA_awright> How does the server know the user has closed his browser?
02:14 < AAA_awright> The token, if provided to the server, will still work
02:14 < noobee> anybody here working with socket io
02:15 < neeky> AAA_awright, the cookie is set as a session cookie
02:15 < neeky> so the browser deletes it when the browser closes
02:15 < oren> oh nice!
02:15 < AAA_awright> neeky: If an attacker copies the cookie, he can continue to use it even after the original user "closes his browser'
02:15 < neeky> and you can also set expirations
02:15 < AAA_awright> The session is not deleted from the server
02:16 < AAA_awright> neeky: My point is don't store session tokens in plaintext on the server. Since they're not passwords, you don't need PBKDF2, but you should store them only in hashed form. It should be impossible to recover the session id from the server alone.
02:16 < neeky> that's o different than any other session based methods
02:16 < neeky> true - we were getting there
02:17 < neeky> this is a class :)
02:17 < oren> ok
02:17 < oren> let me repeat.
02:17 < neeky> were not up to secure sessions yet
02:17 < AAA_awright> That should be the FIRST thing you cover, not the last!
02:17 < neeky> well, oren needed some background
02:17 < oren> request hit my server. it didn't come with cookie in the header so i send the user to login page.
02:17 < neeky> as to what session actually are
02:18 < AAA_awright> Ok I see
02:18 < neeky> so we're back to basics
02:18 < oren> user logs-in
02:18 < oren> on the server, i generrate a udid, 
02:18 < oren> and create some object with user name/password/phone
02:19 < oren> i i store the udid and the object in redis/mongo
02:19 < oren> and with a secret (string) i hash the udid 
02:19 < oren> and send it back in the response as the cookie.
02:19 < Zak> is there a way to use mikael's request module and find out the headers but still get the rest of the response streamed?
02:19 < AAA_awright> I would *highly* suggest you get a professional to help with securing user data and doing logins
02:20 < AAA_awright> There's a book's worth of stuff that you have to implement correctly
02:20 < neeky> AAA_awright, we're just doing groundwork here, I'm not advocating this is production, just 50 mile view stuff
02:20 < AAA_awright> As long as it's theoretical
02:20 < oren> neeky: was i accurate so far
02:21 < neeky> Disclaimer: IANBS
02:21 < oren> i want to understand at least what does the middleware doing..
02:21 < neeky> I Am Not Bruce Schneir
02:21 < oren> can i continue with the flow?
02:21 < oren> see if i got it right?
02:21 < neeky> AAA_awright, oren wanted to know why he can't replace connect's cookie/sessionmiddleware
02:22 < oren> why it's so hard
02:22 < neeky> oren, you are correct so far
02:22 < oren> i didn't understand the code there
02:22 < oren> goo
02:22 < oren> good
02:22 < oren> so the user make more requests.
02:22 < AAA_awright> I don't think Connect even does it correctly
02:22 < oren> (ajax or full http)
02:22 < AAA_awright> It depends on maintaining a secret key, itself stored in plaintext
02:22 < AAA_awright> And or it doesn't hash session token identifiers
02:23 < oren> and the hashed cookie is sent
02:24 < oren> the server look at the requsest and notice a cookie.
02:24 < oren> he hashes the cookie with the secret (PLAIN TEXT SECRET!)
02:24 < oren> and make a select all where key=id
02:24 < oren> (on redis)
02:25 < oren> if id was found the request continues on to do whatever
02:25 < oren> if id not found... i can't remember
02:25 < neeky> if id not found, redirect him to /login
02:25 < oren> u said to delete the entry
02:25 < oren> not sure why though
02:25 < neeky> in this case entry doesnt exist
02:25 < oren> right
02:25 < oren> ok
02:26 < neeky> you delete the entry on 'logout'
02:26 < ssafejava_> substack: Hey, loving stream-adventure. I can't get it to accept the solutions for #4 and #5, (transform, lines), even when the solution is the cut-and-paste answer from the source. Tried node latest & node stable. Just thought you might want to know
02:26 < neeky> just be aware that the cookie checking middleware fires on every request
02:26 < neeky> that's why the concept of mifddleware is a good one
02:27 < neeky> the session check happens before any potentialy insecure routing into your app internals
02:27 < AAA_awright> Is it right to say "hashes the cookie"?
02:27 < AAA_awright> Do you mean a MAC?
02:27 < AAA_awright> Hash(Data || Key) doesn't make a secure MAC
02:27 < neeky> AAA_awright, there's a signature, and the cookie itself can be encrypted
02:28 < neeky> so there can be both
02:28 < AAA_awright> I don't mean encryption, I mean signing the cookie with a MAC
02:31 < Zak> is there a way to get the headers but also get a stream using mikeal's request module?
02:32 < neeky> AAA_awright, hashing the cookie in this case means generate an hmac signature
02:32 < neeky> and then asking the client to store the signature
02:33 < AAA_awright> The payload+signature, alright
02:33 < neeky> just like you would sign an http request 
02:33 < AAA_awright> I'm not familiar with signing HTTP requests
02:34 < ssafejava_> substack: It's fixed by running `npm install through split` in the directory where I'm keeping my src. Some sort of loader problem?
02:34 < AAA_awright> Or actually, Digest authentication, but that's not very secure, for all the same reasons
02:34 < neeky> AAA_awright, it's the 99.99% stateless way to do REST - 
02:34 < neeky> so, adressing some of AAA_awright's valid points: SSL always and forever
02:35 < neeky> absolutely not traffic that is not SSL
02:35 < neeky> that prevents MITM and REplay
02:35 < neeky> attacks
02:36 < neeky> so, signed requests takes http://yoursite/api/action=search&query=AAA-awright
02:36 < neeky>  and creates an HMAC signature of that string with the user's password
02:37 < neeky> then you append the signature to the request, along with a time stamp
02:37 < AAA_awright> Yeah that's... not... RESTful... at all
02:37 < neeky> what isn't?
02:37 < AAA_awright> And it'd need to have a timestamp or nonce
02:38 < neeky> thats what I just said
02:38 < neeky> you can should add the timestamp to the signed request as well
02:39 < neeky> but we're off oren's sessions 101 topic ;)
02:39 < neeky> oren, you good now?
02:39 < oren> wait. i didn't realize i should read all that chatter (:
02:39 < oren> let me read it quickly
02:39 < neeky> nah, were were off topic
02:39 < oren> oh
02:39 < oren> ok
02:40 < neeky> so using my super simplified description, connect's session middleware code might be a bit cleareer
02:40 < oren> so i think i am good so far. 
02:40 < oren> but we have 2 middleware that are used
02:40 < oren> parser
02:40 < oren> and another one
02:41 < oren> cookie session
02:41 < neeky> cookier parser does nothing but turns an HTTP header into a cookie object
02:41 < neeky> has nothing to do with sessions
02:41 < neeky> but the session id is a cookie, so we need it
02:42 < neeky> and cookie session is where the magic happens, but connect glosses over the fact that the default session storage is only server RAM 
02:42 < neeky> which is terrible session storage
02:42 < neeky> but it is secure :)
02:42 < oren> wow
02:42 < oren> shocking
02:43 < neeky> i think connect assumes that if you are using their msession middleware you know better
02:43 < neeky> but that's a pretty poor assumption
02:43 < oren> i can't imagine that we are the only people who build website without connect
02:44 < neeky> If I had any time whatsoever I'd write a connect book that really gives some detail and background on all the middleware
02:44 < oren> that's insane
02:44 < oren> no. 
02:44 < oren> we need a book about extracting connect into simple functions
02:44 < neeky> TJ is super sharp, but docs aint his thang
02:44 < Zak> is there an easy way to get headers from a stream?
02:45 < neeky> well, in connect's defense, the actual source is at the bottom of every page on the site
02:45 < neeky> so it *is" pretty easy to see what's hapening
02:45 < oren> now if we don't use connect, how do we make sure to check for cookie in the header on each request?
02:45 < neeky> you gotta write your own parser
02:45 < oren> i guess just call our cookie function right away.
02:46 < neeky> and you can copy connect's method
02:46 < oren> (as if it was the first connect middleware)
02:46 < neeky> yes
02:47 < oren> but connect's method is calling next(), and doing stuff likereq.session = req.signedCookies[key] || {};
02:47 < oren> what is .session even mean?
02:47 < oren> or res.on('header', function(){
02:47 < neeky> ^^
02:47 < neeky> thats the only way
02:47 < neeky> cookies are in the response header
02:48 < neeky> so if you want cookies, you gotta get response.header and bust it apart
02:49 < oren> so res.on('header' is not express specific code? cool
02:50 < neeky> right- res.on is the event emitter that fires when the http response object gets an event
02:50 < neeky> so you gotta get response.header.cookie(s)
02:50 < oren> so when the header is available i get the callback
02:50 < neeky> it could be a single object, or an array
02:50 < neeky> thats right
02:50 < teadict> undefined variable: s
02:51 < jamiep> ssl
02:52 < jamiep> er, is the only way to disable SSLv2 in node.js by customising `configure` in a nodejs build?
02:52 < neeky> on my app server right now, if I make a request, request.headers.cookie contains:
02:52 < neeky> cookie	"pcrserver.sid=s%3AEHyrCkJckVf3IDFlOyMVM81B.MUehaGKCz0YrMivtM2tGSczV9%2F%2FHOJpqe... (length: 90)"	
02:53 < neeky> jamiep, a hacked way would be to uninstall openssl, install node, then re-install openssl
02:53 < neeky> i think it compiles that at install time
02:54 < neeky> so if it doesnt find ssl libs, it skips the compile
02:55 < oren> neeky: will u be in nodeconf?
02:55 < neeky> no, I'm not able to go this year
02:56 < neeky> I'm bootstrapping this company,and I already take too much time with daughter's swim competitions :)
02:56 < jamiep> neeky: hmm doesn't that disable sslv3 too? was just looking at this (fairly old) commit https://github.com/joyent/node/commit/f23c45f7f46143c225696b57422234d746698b73
02:57 < neeky> yeah, sorry, that disables it all
02:57 < oren> neeky: running your own startup?
02:58 < neeky> yeah, I quit my company in february this year
02:58 < oren> bolsy
02:58 < niggler> congrats neeky 
02:58 < neeky> yeah, a bit :)
02:58 < oren> product or consulting?
02:59 < jesusabdullah> childrens, eh?
02:59 < neeky> it's a product/service - a cloud based mobile medical app
02:59 < neeky> yeah, I have a 7 year old
03:00 < oren> what does it do? don't forget to secure your cookies! sounds important in your case (:
03:00 < neeky> yeah, that's why AAA_awright's advice was sage.  I have two more layers of security on top of just a sesssion id
03:01 < neeky> it will be used to collect medical data from the field
03:01 < neeky> there is a dearth of mobile medical apps right now
03:01 < zomg> neeky: if you need more sales or want to make sure your code is still maintainable a year from now, I can offer my consulting services ;)
03:01 < neeky> they are still in 2005 or so
03:02 < neeky>  zomg, I hope to need them!'
03:02 < neeky> this is just a Minumum Viable Product
03:02 < neeky> to blow the doors off of a particular market segment
03:02 < neeky> that is using 10 year old methods
03:02 < zomg> Sounds pretty much like everything in the medical field then
03:02 < zomg> :D
03:03 < neeky> i have a guy on Elance writing an android app to spec
03:03 < oren> what's your experience with the medical industry?
03:03 < neeky> yeah
03:03 < neeky> oren: I came from an emergency medical background into public safety data systems
03:03  * oren scolling up to read the security discussion
03:04 < neeky> and then did public safety critical infrastructure design and consulting, HA RDBMS, and mobile data systems design and implementation
03:05 < Zak> is there a node package to handle headers in general? I need to extract stuff out of "content-deposition"
03:06 < neeky> Zak, the built in header object on the http request and respinse object will get you that
03:07 < Zak> yeah, but i'm talking to parse the value of the header itself
03:07 < Zak> so i've already got the "content-deposition" value, but i want to get the filename etc
03:07 < oren> neeky: mobile data systems. sounds hot
03:07 < Zak> hmm. there's this article which seems to do it by hand http://www.andrewzammit.com/blog/node-js-handling-file-uploads-without-express/
03:08 < neeky> it's the computers in Cop cars and fire trucks
03:08 < neeky> it's pretty cool
03:09 < timetocode> what makes a piece of node code async? the use of next() ?
03:09 < zomg> Sounds like something that'll get you sued hard if you divulge any more details than that.. lol
03:09 < Zak> timetocode: io operations are asynchronous
03:10 < neeky> zomg, nah, it's not to secretive
03:10 < oren> neeky: and still u use mongoDB? (
03:10 < oren> :
03:10 < neeky> now I'm not divulging MY app until in making bank ;)
03:10 < oren> i will be playing with rethinkDB soon
03:10 < Zak> timetocode: whether something is synchronous or asynchronous is determined by contract
03:10 < neeky> oren, yes, using mongodb
03:11 < Zak> for instance, there's some functions in the fs module, that are asynchoronous and there are special versions that are synchronous (exists, existsSync)
03:11 < jesusabdullah> ugh it is crazy hot :(
03:11 < neeky> if you think of something like a patient medical chart, it's very 'document-y'
03:11 < neeky> mongo is a good use-case
03:11 < Zak> timetocode: JS is single threaded. you can't exactly make code asynchronous
03:12 < Zak> you can sort of.. but there are limitations
03:12 < timetocode> i've made a game matchmaking server where players who are looking for a game appear in a 'looking for opponent' mongodb table -- when a player matchmakes, they look at the list of waiting players, and if there are none they get added
03:12 < oren> neeky: another issue regarding middlewares is bodyParser. substack warned me that it buffers the body and might be a memory hog
03:12 < timetocode> bu im speculating that if many many players tried to find a match at the same time, while waiting to hear back from the db, i might end up with some concurrency-style issues
03:13 < neeky> well, since a body can be multi-part, that's probably true
03:14 < neeky> multipart data comes in chunks, so you have to sit around collecting chunks
03:14 < jesusabdullah> neeky: do you have to use mumps/cache`?
03:15 < neeky> I dont do any multi-part
03:15 < neeky> I'm just looking at connect's source
03:15 < neeky> and I dont do any caching (yet)
03:16 < oren> how do i know if i do any multi-part? file upload?
03:16 < neeky> oh, you are referriung to the VA
03:16 < neeky> hell no!
03:17 < neeky> jesusabdullah, is the VA MUMPS what you are referring to?
03:17 < jesusabdullah> neeky: yeah, and a whole bunch of other medical software DBs
03:17 < jesusabdullah> neeky: I know it's used outside the VA, but yes
03:17 < neeky> no, luckily I'm in a different segment
03:18 < jesusabdullah> well good
03:18 < neeky> I just know about it because I'm a veteran
03:18 < neeky> yeah
03:18 < jesusabdullah> I visited a company that does medical software once, applied on a lark when I still had dreams of working as a mechanical engineer, due to the job description
03:18 < jesusabdullah> let's see if you can tell me their name based on what I tell you
03:18 < jesusabdullah> Huge campus in Madison, WI of all places
03:19 < jesusabdullah> like a normal tech campus with a dash of Disney mixed in
03:19 < neeky> Epic?
03:19 < jesusabdullah> cache' and VB6
03:19 < jesusabdullah> Good job!
03:19 < neeky> heh
03:19 < jesusabdullah> Yeah
03:19 < neeky> who HASNT heard of Epic?
03:19 < jesusabdullah> they were down with hiring me but, like, I decided to get a masters instead
03:19 < jesusabdullah> people outside medical presumably, neeky
03:19 < neeky> i guess
03:19 < jesusabdullah> also I later learned they're totally a meat grinder
03:19 < neeky> yeah
03:20 < neeky> Epic, GE, Seimens, 
03:20 < DarcyB> I'm outsidfe of medical and even I know of epic
03:20 < jesusabdullah> but it WAS the first thing that planted the idea in my head that
03:20 < jesusabdullah> people would enthusiastically pay me
03:20 < DarcyB> but then again i know of them via systems eng
03:20 < jesusabdullah> to write software
03:20 < jesusabdullah> even though I couldn't even get an engineering internship
03:20 < jesusabdullah> still can't
03:21 < jesusabdullah> tried to apply for an EIT position with the local power company, not even a first round
03:21 < jesusabdullah> lulz
03:21 < jesusabdullah> meanwhile I've lost count of how many interview processes I'm going through right now
03:21 < neeky> so, I'm trying to change the industry
03:21 < jesusabdullah> perfect
03:21 < jesusabdullah> DarcyB: that's funny
03:22 < neeky> the Epics, Seimens, those guys LIVE off of HUGE up front costs, exhorbitant support costs, 
03:22 < jesusabdullah> DarcyB: systems engineering?
03:22 < neeky> per user license fees, etc
03:22 < jesusabdullah> oh yeah
03:22 < DarcyB> jesusabdullah: yes
03:22 < jesusabdullah> old school niche software licensing models ftw
03:22 < jesusabdullah> DarcyB: what does that involve?
03:22 < neeky> and it really hurts small guys
03:22 < jesusabdullah> DarcyB: I'm kinda dumb when it comes to these things, sometimes
03:22 < DarcyB> the solutions side of software
03:22 < neeky> I'm bringing cloud, utility based billing to the industry
03:22 < jesusabdullah> well like, what kinda solutions did you work on DarcyB I guess that's what I'm getting at
03:23 < jesusabdullah> neeky: sounds like small clinics would eat that shit up
03:23 < neeky> no up front costs - I dont care where your hardware comes from, and you dont pay for support
03:23 < neeky> just pay me per transaction
03:23 < jesusabdullah> word
03:23 < neeky> 100 transactions, $100
03:23 < DarcyB> Noting directly for epic just from job postings they had which i was refered too
03:23 < jesusabdullah> maybe I'll get to pay less for pills now
03:23 < neeky> 5000 transactions, $5000
03:24 < jesusabdullah> DarcyB: naw, I mean in general. Here, lemme try again: What do you do? o/ I know neeky does medical software, and I, umm, am all over the node.js map right now
03:24 < jesusabdullah> man I wonder if my chicken's done
03:24 < jesusabdullah> czeching on that now
03:25 < jesusabdullah> THERE we go
03:25 < neeky> i gotta blow, it's getting close to 13 hours in this same spot
03:25 < jesusabdullah> last time I stabby-stabbed it it squirted like
03:25 < jesusabdullah> arterial levels of blood at me
03:25 < jesusabdullah> neeky: do that
03:25 < jesusabdullah> neeky: o/
03:26 < neeky> But I'm over the garage at home, so it's not sooo bad ;)
03:26 < neeky> Frome the SE US: Talk to ya'll later
03:26 < DarcyB> Ahh, ok I'm a long time Telcom consultant, big high BW deployments, IE 500Gb/s over a pair of fibre, long haul (cross country) secondary specialties in storage solutions.  spent a few yearts doing Postgresql DB's as my primary gig 
03:26 < jesusabdullah> I work at my apartment which is like
03:26 < jesusabdullah> smaller than your living room
03:26 < jesusabdullah> I bet
03:26 < jesusabdullah> I sleep on the couch
03:27 < jesusabdullah> the very couch I'm sitting on!
03:27 < jesusabdullah> I only leave to buy booze and smoke cigarettes
03:27 < neeky> nah, most of my house id over the garage:)
03:27 < jesusabdullah> okay that's a lie, I make a point to visit friends so I don't go nuts
03:27 < jesusabdullah> but OTHER THAN THAT
03:27 < jesusabdullah> DarcyB: BW? bandwidth?
03:27 < neeky> weed legal where you are?
03:27 < jesusabdullah> nope
03:28 < jesusabdullah> well, it's a Whole Thing, but short answer is nope
03:28 < jesusabdullah> also I'm prepping for piss testing
03:28 < DarcyB> yes bandwith
03:28 < neeky> good for you
03:28 < jesusabdullah> I mean
03:28 < jesusabdullah> kind of
03:28 < jesusabdullah> but that's neither here nor there
03:28 < jesusabdullah> point is, 211 is really cheap but tastes gross.
03:30 < jesusabdullah> DarcyB: storage solutions? Like conexes?
03:30 < Zak> jesusabdullah: praise urbandictionary; i had nfi what 211 was
03:30 < jesusabdullah> DarcyB: I live in Alaska, barge and air freight is a whole thing
03:30 < jesusabdullah> oh man you guys I need to find that story
03:30 < jesusabdullah> they should totally make a movie about it
03:30 < jesusabdullah> all Bruckheimerian and shit
03:31 < Zak> why is there 0 information about parsing header values in nodejs...
03:32 < jesusabdullah> okay, guys, I found the best thing
03:32 < jesusabdullah> https://twitter.com/akicemission
03:33 < jesusabdullah> live tweets from when the Bering Straight got iced over before Nome got its last fuel shipment and a Russian tanker and a Coast Guard ice cutter had to make a DANGEROUS MISSION to plow through the thickening ice sheet in a Balto-esque effort to, once again, save Nome
03:34 < kenperkins> is it tomorrow yet
03:34 < kenperkins> jesusabdullah find a  new gig?
03:35 < DarcyB> jesusabdullah: most of my work was with isilon wich is now EMC, as well as a bunch of propritary stuff used by telcom
03:35 < jesusabdullah> kenperkins: no, but I have a lot of interview processes going
03:36 < jesusabdullah> kenperkins: I'm applying for jobs ASYNCHRONOUSLY
03:36 < jesusabdullah> kenperkins: and getting freelance to fill in the gaps
03:36 < kenperkins> call back?
03:36 < jesusabdullah> kenperkins: http://consulting.jesusabdullah.net
03:36 < kenperkins> ;)
03:36 < jesusabdullah> kenperkins: yeah, I'm on like round 3 with wally world and i.tv
03:37 < jesusabdullah> kenperkins: still working on round 1 with change.org, they're having a strange few weeks I guess
03:37 < kenperkins> gl
03:37 < jesusabdullah> tell me about it
04:09 < mscdex> node.js rules!
04:10 < ChrisPartridge> mscdex: thanks for the reminder!
04:10 < kenperkins> need new show for nodeconf
04:12 < mscdex> ChrisPartridge: always!
04:20 < olalonde> hola
04:21 < mscdex> ola
04:22 < addisonj> excited for nodeconf... not excited that I have to get up at 3 AM to catch my flight
04:22 < addisonj> which brings up a good question... why am I not asleep right now?
04:22 < mscdex> nodeconf should be streamed since node is about streaming everything and all
04:23 < addisonj> heh, one of the emails said don't expect solid internet
04:23 < addisonj> and no cell phone reception
04:23 < mscdex> :S
04:23 < mscdex> maybe it's a secret prison
04:23 < addisonj> which is kinda bizarre for a tech conference, but, at least I won't need docs, just ask everyone around me :)
04:23 < oren> and i wasn't able to compile johnny-five since i don't have x-code
04:23 < Havvy> Yeah, it's a prison camp set up by the Pythonists and Rubyists to lock you all up.
04:24 < oren> how will i be able to recognize all the awesome people that are on irc? half of the irc chat will be there
04:24 < mscdex> quick, someone contact Jesse Ventura, there's a conspiracy here!
04:25 < addisonj> perhaps irc/twitter handles should be on the badge
04:25 < Havvy> I'd put my IRC handle on my badge anyways.
04:25 < jesusabdullah> ugh, dying from this friggin' heat man
04:25 < Havvy> My real name is less important than my IRC nick.
04:25 < jesusabdullah> also no nodeconf for me
04:25 < jesusabdullah> partially bummed
04:26 < jesusabdullah> partially relieved
04:26 < jesusabdullah> y'know, usual
04:26 < jesusabdullah> I *do* miss my friends, and I rarely got to do conferences
04:26 < addisonj> also, anyone know how bunking up is working? are they assigned rooms or is it first come first serve? A workmate of mine is also attending
04:26 < jesusabdullah> I did summacamp 2 yrs ago and nodeconf last year
04:26 < mscdex> matlab.js!
04:26 < jesusabdullah> so
04:26 < jesusabdullah> NOW you're talkin'!
04:26 < jesusabdullah> THOUGH
04:26 < jesusabdullah> tomorrow I'll be google hangouting with dublin's js group
04:26 < jesusabdullah> that should be cool
04:26 < jesusabdullah> as long as I don't totally fuck up my talk
04:27 < addisonj> "hangouting", I wonder how many verbs google have created
04:27 < jesusabdullah> well
04:27 < jesusabdullah> to be fair, I think I made that up.
04:27 < mscdex> google is a verb
04:27 < addisonj> but I understood what you meant :)
04:27 < jesusabdullah> uuugh it is sooo hot
04:27 < addisonj> is "nodeing" a thing yet?
04:28 < jesusabdullah> yeah
04:28 < jesusabdullah> <-- noding it up erryday
04:28 < oren> addisonj: great idea
04:28 < addisonj> or is "javascripting" more appropriate
04:28 < Zak> what if you ring a bell. is it still noding?
04:29 < oren> addisonj: i bunkbedding with substack
04:30 < Havvy> addisonj: ecmascripting
04:30 < jesusabdullah> Zak: https://www.youtube.com/watch?v=URAqnM1PP5E
04:31 < ssafejava_> gonna be some ecmascript harmony going on in that bunkbed
04:31 < oren> how to pass port to a curl?
04:31 < oren> i don't understand the man page
04:32 < ssafejava_> oren: just in the url like anywhere else
04:32 < oren> it's in chinese
04:32 < oren> :3000 ?
04:32 < ssafejava_> yep
04:32 < oren> so my http-proxy is not working
04:32 < oren> '108.227.80.160:4000'  : '127.0.0.1:4000',
04:33 < oren> how do i map ip to ip?
04:33 < oren> it works if i do domain: ip
04:33 < oren> but not ip: ip
04:33 < addisonj> oren: did you somehow set up who you were bunking with?
04:33 < jesusabdullah> oren: that's cause it doesn't map ip to ip
04:33 < jesusabdullah> oren: only matches hostname
04:33 < jesusabdullah> oren: as in, the Host header
04:34 < JNedved> Any one working or living in Australia at the moment on here? 
04:34 < oren> addisonj: i asked to be the top
04:34 < jesusabdullah> ssafejava_: lol
04:34 < jesusabdullah> OH MY
04:34 < ssafejava_> bazzzzing
04:34 < oren> addisonj: and under bottom asked to have isaacs or sub
04:34 < oren> i mean stack
04:34 < jesusabdullah> wait are there bunk beds this time?
04:34 < jesusabdullah> you mean subb rubb?
04:35 < ssafejava_> wow you can just ask for someone to be your bottom like that
04:35 < ssafejava_> just like that.
04:35 < jesusabdullah> THIS IS A FAMILY CHANNEL PEOPLE
04:35 < oren> i streamed my request with 'through'
04:35 < oren> vanilla.js
04:35 < ningu> talking about nodeconf?
04:35 < oren> yup
04:35 < jesusabdullah> yeah, oren's roomin' with the stizz
04:35 < oren> half of this chat will be there
04:36 < ningu> I shall be confless
04:36 < ningu> yet in SF
04:36 < jesusabdullah> like I said, I'll be missin' it
04:36 < oren> ok. EVERYONE but jesusabdullah 
04:36 < ssafejava_> yeah same. but campjs is on the list
04:36 < ningu> and me
04:36 < addisonj> I would say sneak into the parties (tons of people did that last year at JSconf), but it might be harder at a remote camp
04:36 < oren> jesusabdullah: i noticed that half of your comment here is about how hot it is.
04:36 < jesusabdullah> I've historically missed most conferences because I've been too poor to buy myself and nodejitsu put precedence on getting business guys out there
04:36 < ningu> I don't have time to drive up there anyway
04:36 < jesusabdullah> oren: that's because it's ridiculously hot
04:36 < jesusabdullah> gotta be >80F in this apartment
04:37 < addisonj> oh question, any idea why we were instructed to clone the node repo? we hacking on core?
04:37 < ssafejava> reverse the polarity to your pc so it blows out cold air
04:37 < oren> any interesting questions during job interviews?
04:37 < ningu> I don't think that's how it works
04:37 < jesusabdullah> and now I'm straight destitute, though thanks to the community giving me shots at freelance I'm doing way better n' I was 2 weeks ago!
04:37 < oren> sorting algo?
04:37 < jesusabdullah> oren: "So tell me about yourself"
04:37 < oren> ahahah
04:37 < jesusabdullah> oren: where do you START with that one
04:37 < ningu> why is everyone always interviewing Job anyway
04:37 < oren> NO MORE TECH INTERVIEWS!
04:37 < ssafejava> tell us about a time where you failed / tell us your greatest weakness
04:37 < ningu> didn't the poor guy have enough happen to him
04:37 < ssafejava> *bangs head*
04:38 < jesusabdullah> "tell us about your showering habits" "fuck"
04:38 < ningu> what about showering hobbits?
04:38 < jesusabdullah> those freaks can shower THEMSELVES
04:38 < jesusabdullah> brb another apple cider
04:38 < oren> "if u had to bunkbed with one noder at nodecof, who would that be and why?"
04:38 < ningu> heh
04:38 < jesusabdullah> That's just asking for a sexual harassment lawsuit
04:39 < ssafejava> "we're nerds, we don't have showering habits"
04:40 < addisonj> jesusabdullah: how are your interviews currently going (btw, you may not know me, but you just met a few of my coworkers :) )
04:40 < jesusabdullah> addisonj: you're an i.tver?
04:40 < addisonj> yessir
04:40 < ningu> I dunno, I shower regularly but when I'm coding heavily I do forget to shave
04:40 < jesusabdullah> addisonj: pretty well
04:41 < addisonj> well I have heard good things, sadly been busy or I would have sit in myself
04:41 < jesusabdullah> addisonj: Layne was amused at my coding style, and I had a lengthy conversation with Rod about the pros and cons of mongodb
04:41 < addisonj> heh, its one of his favorite subjects
04:41 < ssafejava> pros: easy cons: not easy when you use it
04:41 < jesusabdullah> addisonj: I have to say though, I feel bad for them in that every time I was asked, "so how do you feel about coffeescript?" I gave them the Really Long Answer
04:41 < ningu> ssafejava: define "use it"
04:41 < ssafejava> for, you know, work
04:42 < ningu> jesusabdullah: why does that have to be a philosophical disquisition, anyway?
04:42 < ssafejava> don't mind me I'm just a hater who had a bad experience a long time ago
04:42 < jesusabdullah> ningu: because I'm mulling over a blog post
04:42 < ningu> I wouldn't hire someone or not based on their opinion
04:42 < ningu> but I'm not hiring people, so...
04:42 < jesusabdullah> ningu: well here's the thing
04:42 < ssafejava> it does bring out lengthy discussion though
04:42 < jesusabdullah> ningu: suppose you're a coffeescript shop
04:42 < addisonj> the battle will forever continue. I am have determined myself to be a innocent bystander as I like both, just depends on whose house I am in
04:42 < ningu> jesusabdullah: ok in that case, sure
04:42 < jesusabdullah> ningu: do you want to hire someone that's going to bitch and snivel all the time over your use of coffeescript?
04:43 < ningu> jesusabdullah: how many coffeescript "shops" are there though?
04:43 < jesusabdullah> more than you'd think
04:43 < ningu> as opposed to coders
04:43 < ssafejava> eh I know a few
04:43 < ningu> really?
04:43 < ningu> hmm
04:43 < EhevuTov> I don't think there are any here in Chicago. Maybe one
04:43 < jesusabdullah> I can tell you i.tv uses coffeescript cause I've talked to them about it
04:43 < jesusabdullah> github uses it
04:43 < ningu> I would use it if it was what I had to use, doesn't seem like that big of a deal
04:43 < addisonj> we do, JS is in some places (no one cares about modules) but core services are typically JS
04:43 <@konobi> a lot of devs just jump on a new shiny and then it gets ingrained into a codebase
04:44 < ningu> maybe I just don't know what would annoy me about it
04:44 < jesusabdullah> yeah ningu that's my "short answer"
04:44 < ssafejava> yeah it's not that bad. the ambiguities bother me but whatever. can live with it
04:44 < ssafejava> i see a lot of .coffee as configuration files
04:45 < addisonj> coffeescript settles other arguments for us, comma first, semi-colons, etc, so, all in all, we traded arguments about style for arguments about how bad the ? operator is
04:45 < ningu> so here's a random question -- I said to a group today that I think that in virtually every commonly use programming languages, function arguments are separated with commas and not spaces. is there an exception other than lisp? :P
04:45 < ningu> used*
04:45 < jesusabdullah> yeah I found cs is nice for Gruntfiles cause it ends up looking like a bizarro yaml instead of a terrible javascript api <_<;
04:45 < ssafejava> jesusabdullah: amen
04:46 < jesusabdullah> (personally I dislike grunt. I'd use it, but I wouldn't have written it that way)
04:46 < jesusabdullah> I don't like declarative styles
04:46 < jesusabdullah> like that
04:46 < jesusabdullah> if that's what you're doing you might as well use ant
04:46 < ningu> I like declarative styles for some things
04:46 < ningu> ugh
04:46 < addisonj> ugh, grunt does awesome things, but the API is insanely weird
04:46 < jesusabdullah> lol
04:46 < ningu> I have never understood ant
04:46 < ssafejava> eh if you use grunt.registerTask you can do things your way
04:46 < jesusabdullah> indeed
04:46 < jesusabdullah> I started work on my own build thinger
04:46 < ningu> actually none of the Java toolchain makes sense to me -- ant, maven, eclipse, whatever
04:46 < ssafejava> & yes the api is weird but getting way better
04:46 < jesusabdullah> looks kinda like cake except you have to require it and, umm
04:46 < ssafejava> at least they finally standardized grunt.files
04:47 < jesusabdullah> it supports mtime checking/task dependencies
04:47 < ningu> I am strongly opposed to huge xml config files
04:47 < AAA_awright> Makefiles or die
04:47 < jesusabdullah> and text blocks (instead of functions) automagically get executed
04:47 < ssafejava> a lot of the strength of grunt is the richness of its modules. its syntax is just something we deal with
04:47 < AAA_awright> That means ant: Die
04:47 < jesusabdullah> AAA_awright: on nix systems? fuck yeah. Even with the \t weirdness.
04:47 < AAA_awright> Autotools: Die
04:48 < jesusabdullah> AAA_awright: Working with windows people? Holy shit you are so fucked
04:48 < ningu> how is autotools opposed to make?
04:48 < addisonj> I am leaning more towards plain old make™
04:48 < AAA_awright> ningu: It's a Makefiile generator
04:48 < jesusabdullah> not quite
04:48 < AAA_awright> When you don't need it in 90% of cases
04:48 < jesusabdullah> it's a makefile generator GENERATOR
04:48 < jesusabdullah> it generates ./configure scripts
04:48 < AAA_awright> jesusabdullah: It's so meta
04:48 < jesusabdullah> and it involves m4
04:48 < ssafejava> wow
04:48 < AAA_awright> Yeah
04:48 < ningu> AAA_awright: so you would hand-write environment detection stuff, or what?
04:48 < jesusabdullah> which is the oldest and shittiest of macro languages of all time
04:49 < ssafejava> i need a tool to generate gruntfiles
04:49 < ningu> yeah, I hate m4 too
04:49 < ningu> but autotools seems like a necessary evil
04:49 < addisonj> autotools is awesome when it works, painfully insane when it doesn't. Once again, something that does powerful things but a horrrrible API
04:49 < EhevuTov> I'm finding gyp to be the best thing to use right now for auto-generation of make-type scripts for cross-compiling
04:49 < jesusabdullah> honestly, I want something that looks suspiciously like LaTeX
04:49 < AAA_awright> jesusabdullah: Also Makefiles are specifically designed to work on Windows. I'm suprised noone has written a Makefile -> MSVC converter
04:49 < AAA_awright> It should be fairly straightforward... but what do I know
04:49 < jesusabdullah> AAA_awright: it's not makefile parsing, it's sh-compatible shell
04:50 < jesusabdullah> AAA_awright: pymake exists, it's more or less gnu make compatible
04:50 < ningu> we need more *akefiles, like... drakefiles, shakefiles
04:50 < EhevuTov> cmake?
04:50 < EhevuTov> rake
04:50 < jesusabdullah> joshfiles
04:50 < jesusabdullah> YES
04:50 < ningu> steakfiles
04:50 < jesusabdullah> I named my buildthinger "grabthar"
04:50 < jesusabdullah> so
04:50 < jesusabdullah> grabfile?
04:50 < ningu> is that the strongbad dragon thing?
04:50 < addisonj> AHHHH why am I still up? I need to leave for an airport in 4 hours! whyyyy
04:51 < jesusabdullah> except it would be 100% convention because of the way it works
04:51 < jesusabdullah> ningu: no that's trogdor
04:51 < ningu> haha right
04:51 < jesusabdullah> ningu: this is from Galaxy Quest
04:51 < jesusabdullah> "By Grabthar's hammer...what a savings!"
04:51 < ningu> right, someone told me about that
04:51 < ningu> I don't know galaxy guest
04:51 < jesusabdullah> it's a funny movie
04:51 < jesusabdullah> worth seeing at least once
04:51 < jesusabdullah> that particular character is great
04:52 < jesusabdullah> there are a few really good lines
04:52 < jesusabdullah> like the one I just quoted
04:52 < jesusabdullah> also, "Yeah they must be like 6 years old" "...they're MINERS not MINORS"
04:52 <@konobi> anyone have an Intel NUC?
04:52 < jesusabdullah> idk what that is konobi
04:52 < ningu> I'm against loose NUCs
04:53 < jesusabdullah> konobi: whenever I see your nick I imagine like, shinobi or some shit https://en.wikipedia.org/wiki/Shinobi_(series)
04:53 < ningu> hey speaking of intel... has anyone here heard that they do NLP? any idea what that's about?
04:54 < jesusabdullah> non-linear programming? yeah, it's like linear programming except you can't assume you're dealing with hyperplanes anymore
04:54 < jesusabdullah> :v :v
04:54 < jesusabdullah> (also very cool stuff, but not the NLP you meant)
04:54 < ningu> heh
04:54 < ningu> I also didn't mean neurolinguistic programming
04:55 < jesusabdullah> I don't know a whole lot about NLP except to say that a lot of people want to be able to know what we're talking about without actually having to read it
04:58 < addisonj> goodnight folks, see some of you at nodeconf
04:59 <@konobi> jesusabdullah: it's a small form factor barebones PC kit
04:59 < EhevuTov> Is NLP where the instruction pointer doesn't move linearly?
05:00 < jesusabdullah> EhevuTov: wut
05:01 < EhevuTov> exactly
05:02 < rom1504> are you talking about natural language processing ?
05:03 < EhevuTov> that sounds more likely
05:04 < jesusabdullah> yes
05:16 < substack> why does process.stdout emit an error for EPIPE instead of emitting SIGPIPE on the process object?
05:16 < substack> isaacs: ^^^
05:23 < ChrisPartridge> easier to handle the error perhaps?
05:23 < ssafejava> substack: you rock, thanks for the quick fixes
05:24 < Technodrome> how is having a server side crud web app non async a good thing?
05:25 < EhevuTov> Technodrome, to make it more atomic?
05:25 < Technodrome> performance wise, i don't see the benefit?
05:25 < Technodrome> s
05:25 < Technodrome> in
05:25 < Technodrome> c
05:25 < Technodrome> e 
05:25 < Technodrome> weird? 
05:26 < Technodrome> since you have to wait for a database and then render the template
05:27 < EhevuTov> yeah, I don't know. I wouldn't think you'd need to be synchronous much. I've never come across where sync was mandatory
05:27 < ssafejava> Yeah sometimes you might see a readfilesync or statsync in a script or simple app for simplicity. other than that, sync is a (bad) code smell in node
05:28 < EhevuTov> yeah, cause even then I'd use a semaphore to check for file-system sync for an async call if needed or something similar
05:31 < EhevuTov> only time sync is needed is at low-level things, like clock cycles. Everything else I can think of can be async
05:32 < Technodrome> and sync only makes web programming more complicated 
05:32 < Technodrome> shitty *blah* 
05:35 < Technodrome> is there anything else like signalr?
05:36 < mbalho> how do you write to stdout with node in such a way that it replaces existing letters on the screen, like when you do git clone and it shows progress
05:36 < mbalho> s/screen/terminal
05:38 < EhevuTov> mbalho, probably use a stream that doesn't append a newline at the end? Not sure
05:38 < mbalho> i cant figure out how to erase
05:39 < ChrisPartridge> mbalho: perhaps look at node-progress from tj
05:39 < ChrisPartridge> I assume it would be doing what you're trying to do
05:39 < mbalho> oooh
05:39 < EhevuTov> that looks perfect
05:39 < ChrisPartridge> mbalho: looks like readline
05:40 < ChrisPartridge> mbalho: http://nodejs.org/api/readline.html#readline_rl_write_data_key
05:40 < EhevuTov> rl.clearline
05:40 < mbalho> AHHH http://nodejs.org/api/readline.html
05:41 < ssafejava> nice
05:41 < mbalho> weet
05:41 < mbalho> sweet*
05:41 < ChrisPartridge> winnar!
05:41 < dhruvasagar> Hey guys, I am using passport.js, need some help, has anybody used it ?
05:42 < ChrisPartridge> dhruvasagar: i'm sure there are people around that have, ask the question, and pastebin/gist the code in question
05:42 < dhruvasagar> well when defining and declaring passport.js strategy, in the callback where we receive the accessTOken, refreshToken, profile and the 'done' callback, what exactly does 'done' do ?
05:43 < dhruvasagar> what I essentially want is to somehow get access to the user object created and put the id in the session (logged in)...but I am unable to figure out how, there are no concrete examples that I have found showcasing that
05:44 < dhruvasagar> I see that I can use passport.authenticate as a middleware, but I still don't know how to get a handle on the user object I created within the passport callback, is it passed to / attached to the req for the end point !?
05:44 < ChrisPartridge> dhruvasagar: pretty sure their guide talks about sessions, i was helping someone with this a few weeks ago
05:45 < ChrisPartridge> have you read this: http://passportjs.org/guide/configure/
05:45 < dhruvasagar> ChrisPartridge: it does talk about it but I see no examples / code 
05:45 < EhevuTov> dhruvasagar, I got it working in a not-fully-functional site I have
05:45 < EhevuTov> yes, it's in your res or something; I forget
05:46 < dhruvasagar> ChrisPartridge: I think I found the API now
05:46 < ChrisPartridge> dhruvasagar: the done() callback is called when you have finished doing what ever you need to do to authenticate the user
05:46 < dhruvasagar> silly of me trying to go through oauth examples to try and find login (http://passportjs.org/guide/login/)
05:46 < EhevuTov> this works: https://github.com/Tzvayim/theArk/blob/master/app.js
05:46 < garthk> dhruvasagar: I ended up implementing all three legs of OAUTH2 myself.
05:46 < dhruvasagar> EhevuTov: checking out your example too, thanks :)
05:47 < dhruvasagar> garthk: hmm that's not what I intend to do :)
05:47 < EhevuTov> I also do a redirect in my code incase the auth fails or not present
05:47 < EhevuTov> redirect to '/'
05:47 < dhruvasagar> garthk: I am doing some sort of a hackathon for myself, wanted to build this fully functional game by end of one week, but I am into my 2nd week now. Hopefully will be done by this weekend
05:54 < websocket_rookie> I want to check in ws server in nodejs weather the received message is Binary or text , is their a way to do that , please help
06:00 < websocket_rookie> I want to check in ws server in nodejs weather the received message is Binary or text , is their a way to do that , please help
06:00 < websocket_rookie> any one who has worked in websocket RFC6455
06:04 < qwebirc468518> I want to check in ws server in nodejs weather the received message is Binary or text , is their a way to do that , please help
06:05 < qwebirc468518> anyone with knowledge of websocket server RFC6455
06:05 < qwebirc468518> hey
06:07 < oren> how to set an npm config key to it's default? i want to bring back viewer = man
06:07 < oren> btw, what the default viewer? i installed npm long time ago
06:35 < lucidfox> I take it there aren't any good ORMs for MSSQL?
06:39 < zbzzn_> try tweeting Glenn Block
06:39 < ggreer> so... I'm writing an addon and I notice in one place I'm returning a slowbuffer instead of a normal node buffer
06:39 < ggreer> googling around and looking at docs doesn't give me much besides some info pertaining to node 0.5
06:40 < ggreer> I grabbed the node.js source and looked around in node_buffer.h, but I don't see any simple way to copy something into a fast buffer
06:40 < ggreer> is there some easy thing I'm overlooking?
06:41 < Erick> hi
06:42 < Guest82925> I am new to Node.js and I want to know how to install it on my computer
06:42 < zomg> Guest82925: go to the website, find the download link and there you go!
06:45 < Guest82925> @zomg ah, thanks.
06:45 < jesusabdullah> Guest82925: what OS are you using?
06:45 < Guest82925> Noje JS is an alternative to PHP, right?
06:45 < jesusabdullah> in the loosest sense
06:45 < Guest82925> @jesusabdullah I am using Linux. gcc is already installed
06:46 < jesusabdullah> it doesn't really work like php at all
06:46 < ChrisPartridge> lots of php showing up lately... was there a blog post or something
06:46 < jesusabdullah> end result is webservers but the similarity ends there
06:47 < Guest82925> @jesusabdullah ok, got it.
06:48 < Guest82925> @jesusabdullah But it can be used in a small website, without problems?
06:48 < Guest82925> It works with MySQL?
06:49 < jesusabdullah> Guest82925: Yeah, you can make small websites with it, and yes there are MySQL modules
06:49 < jesusabdullah> Guest82925: not part of the standard library, on npm, but they're there
06:51 < Guest82925> jesusabdullah nice. I will experience with it, looks good. And I can teach people of my country and make videos on youtube about it
06:52 < Guest82925> I haven't saw 1 good tutorial in my country teaching how to use node.js.
06:53 < jesusabdullah> Guest82925: cool. There are lots of English tutorials. What languages are spoken in your neck of the woods?
06:53 < jesusabdullah> Guest82925: also if you're going to stick around type /nick some-nickname-here
06:54 < jesusabdullah> Erick_Ribeiro: nice.
06:55 < jesusabdullah> Erick_Ribeiro: Spanish? Portuguese?
06:55 < jesusabdullah> wah wah wahhhh
06:55 < jesusabdullah> I tried, you guys.
06:56 < Erick_Ribeiro> jesusabdullah My language is Portuguese
06:56 < JNedved> Any Node.js developers looking for a Sydney, Australia based contract for 6-12 months please get in touch - http://www.seek.com.au/job/24738791 - jamie@it-matters.com.au - no telecommuting I'm afraid
06:57 < jesusabdullah> Erick_Ribeiro: Brazilian?
06:57 < GreenDog> sure, just get me a visa
06:57 < GreenDog> and a lot of money
06:58 < jesusabdullah> Erick_Ribeiro: oddly enough, one of the most prolific node video tutorials guys is Portuguese but does them all in English
06:59 < Erick_Ribeiro> jesusabdullah Yes, brazilian
07:02 < Erick_Ribeiro> jesusabdullah I understand. Great part of people of my country have some dificulty in english, so if a make good tutorials in portuguese, I'm sure that many people will like
07:02 < Erick_Ribeiro> jesusabdullah Are you a front-end developer?
07:03 < Trangar> Does anyone have experience with a NodeJS SOAP service?
07:04 < ggreer>   // TODO: this is a SlowBuffer
07:04 < ggreer>   return scope.Close(node::Buffer::New(result.first.toUtf8(), result.first.length())->handle_);
07:04 < ggreer> ^^ is there a standard way to turn this into a normal buffer? I don't mind copying the data. slowbuffer ops are wayyy slower than normal buffer ops
07:05 < ggreer> the rest of the code is at https://github.com/Floobits/node-native-dmp
07:05 < ggreer> it's definitely a work in progress
07:07 < Erick_Ribeiro> bye
07:07 < jesusabdullah> peace homes
07:07 < jesusabdullah> Erick_Ribeiro: I'm a back-end guy
07:07 < jesusabdullah> sorry ggreer no idea
07:08 < ggreer> :/
07:08 < ggreer> it's pretty esoteric, what I'm doing
07:08 < Erick_Ribeiro> jesusabdullah nice. I have to go now. Nice to meet you, see you later
07:11 < Lorentz> timoxley: noted that campjs is at gold coast
07:11 < Lorentz> a little too far for me
07:11 < Lorentz> (in reply from a day or two ago when you suggested I visit)
07:14 < oren> how to install only packages that are not dev-dependencies?
07:14 < oren> (for production)
07:30 < sCoRpi> Hey guys, i'm trying to scan a directory of mp3s. I want to index them in MongoDb, but of course i only want to index a single artist once and then use that one for all other tracks in the directory. Like only get one document for artist, one for album, and then multiple documents for the tracks
07:31 < sCoRpi> Scanning the directory isn't a problem, but of course since everything is executed asynchronously, i get the same artist inserted multiple times
07:32 < sCoRpi> I execute a find(), but of course the artist isn't inserted yet, so the script inserts a new document. Am I doing something completely wrong? Or is the simplest solution to actually process this type of scanning/indexing just synchronously=
07:38 -!- ServerMode/#Node.js [+o MI6] by hitchcock.freenode.net
07:38 < [AD]Turbo> hi there
07:39 < fritzy> [AD]Turbo: howdy
07:43 < mkozjak_> hi
07:45 < mkozjak> how should i properly call a function inside another function and get its return? i have this code: http://pastebin.com/raw.php?i=jfYGR7S6
07:45 < mkozjak> how should i define a callback?
07:48 < mkozjak> basically i want a result from another function to be used in the one that called that function..
07:52 < timetocode> mkozjak, could add a callback to identifySTB
08:02 < mkozjak> timetocode: you mean on the call or where it is defined?
08:05 < timetocode> mkozjak, welp im a bit of a functional programming newbie so hopefully i'm not giving the wrong advice, but i mean that where you return stbmac;, instead of returning at that point one could execute another function (a callback) on the value of stbmac (in this case logging it to the console)
08:07 < mkozjak> timetocode: true
08:34 < ssafejava> have any of you crazy kids screwed with bilby.Do()?
08:34 < ssafejava> https://github.com/puffnfresh/bilby.js
08:40 < jesusabdullah> ssafejava: unfamiliar
08:41 < ssafejava> the operator overloading is totally nuts. you can see in the source how he does it, it's not actually that complex in the end but a hell of a hack
08:42 < garthk> ssafejava: that's well nuts. Good find!
08:42 < brainproxy> ssafejava: bilby is pretty cool; I'm working on something similar in some ways, a monad lib which will give you a monadic `do` for buidling sync and async computations
08:43 < garthk> brainproxy: see if you can make it fast, too?
08:43 < brainproxy> but less hacky inasmuch as there's no syntatic hacking, just convention for building up the computations
08:43 < ssafejava> The environment stuff is a great way to build functions that respond well to their arguments lengths & types... I can think of a few ways I'd use that. The overloading... I don't know
08:43 < garthk> Recent NodeUp episode had a lot on V8 optimisations.
08:43 < brainproxy> ssafejava: right now I'm still fighting w/ callCC in the Continuation transformer
08:44 < brainproxy> haven't got it quite right yet
08:44 < brainproxy> once I get that, will have a solid basis for delimited continuations, and the perf seems like it will be pretty good
08:44 < brainproxy> esp. for the sync variants of Cont, State, et al.
08:45 < ssafejava> bilby's trampoline is killer though. at least until ES6 comes
08:45 < ssafejava> brainproxy: sounds great, be sure to post it when you get it running
08:45 < brainproxy> ssafejava: yeah, a proper trampoline impl is kind of what's slowed me down
08:47 < brainproxy> ssafejava: https://github.com/michaelsbradleyjr/jonas/blob/loop-run/src/jonas.dev.js#L1031
08:47 < brainproxy> ContT and it's callCC helper are messed up right now
08:47 < ssafejava> oh so this is no casual project. 
08:47 < brainproxy> ssafejava: no, I'm trying to make it real as can be
08:48 < brainproxy> it's still very alpha, so just keep in mind that I've hacked it together
08:48 < brainproxy> and in time some refactoring and things I'm figuring out should result in a cleaner code base
08:49 < brainproxy> also, it was probably a waste of time to carve out parts of lodash and embed them in the lib (at the bottom)
08:49 < brainproxy> i mean maybe that is a good thing at some point, but maybe it would just be better to pull it in as a dep
08:50 < brainproxy> I've got some cool ideas for MaybeT and ListT, but I want to nail down ContT first
08:50 < brainproxy> w/ ContT and StateT in good shape, I can dog food them to build up `mDo`
08:51 < brainproxy> and a friend has been working on on a pure js embeddable parser for clojure destructuring syntax, so the left-hand side of the `mDo` computations can be much more expressive
08:51 < brainproxy> esp. in combination with a little trick I learned from some guys at lockerdome
08:51 < brainproxy> namely: https://github.com/michaelsbradleyjr/jonas/blob/loop-run/src/jonas.dev.js#L1934
08:53 < brainproxy> I also had/have big plans for seamless support for *optionally* using mori's persistent data structures
08:54 < brainproxy> as functional prog'ing is a bit more pleasant when you can build computations where you don't have to worry about accidentally mutating, say, a state hash-map which you're threading throuh an `mDo` in the State monad
08:56 < brainproxy> near on the roadmap is rewriting the trampolines so that a shared impl can be used across all the monads; seems like that should be possible given how alike they are, if you look at Identity, StateT and ContT
08:56 < ssafejava> brainproxy: yeah re: that params() method bilby has something similar. but I think he really wants to get rid of it
08:56 < brainproxy> well I think there's really two ways to go
08:56 < ssafejava> technically in newer runtimes that data should be available without the munging.
08:56 < ssafejava> but... can't count on that
08:57 < durango> quick question: https://gist.github.com/durango/a6e8cdbbc4666939560b
08:57 < brainproxy> you can write a tool that will transform js (or some js variant) into the code that actually runs
08:57 < erick_ribeiro> Hello guys. I have one doubt about node.js
08:58 < ssafejava> durango: yeah I think it will
08:58 < brainproxy> or you can, by convention, wire together vanilla js and use tricks like params() to achieve the same end
08:58 < durango> ssafejava: ah :D i hope so
08:58 < erick_ribeiro> node.js is is an alternative to PHP, right?
08:58 < ssafejava> durango: you can avoid that but installing the main dependency first. if it satisfies the module dependency, npm will not install the inner
08:58 < brainproxy> erick_ribeiro: depends what you want to do
08:58 < ssafejava> durango: should be easy to test though to be sure.
08:59 < brainproxy> I don't think right now that node.js is going to give you a drupal or wordpress replacement on a silver platter
08:59 < durango> ssafejava: how would i test?
08:59 < durango> just throw a console.log in db?
08:59 < ssafejava> durango: Oh just create the directory structure yourself and create some stub modules
08:59 < ssafejava> yeah. just a few console.log statements should do it
08:59 < durango> thanks
08:59 < brainproxy> erick_ribeiro: what do you want to use it for?
09:00 < erick_ribeiro> brainproxy I want to use it in a html page
09:00 < brainproxy> erick_ribeiro: you mean to generate web pages?
09:01 < brainproxy> erick_ribeiro: maybe take a look at the express framework for node, as a way to get started with node building a simple web server that can deliver html pages to a browser
09:01 < brainproxy> erick_ribeiro: http://expressjs.com/
09:02 < RLa> "write a tool that will transform js (or some js variant) into the code that actually runs" <- PL/C converted all syntax errors into output statements :)
09:02 < erick_ribeiro> brainproxy I have two poinst. first is that i can write in the document to be visible in the html. something like   echo "something"; in PHP
09:02 < erick_ribeiro> ?
09:03 < ssafejava> RLa: fuckitjs? (https://github.com/mattdiamond/fuckitjs)
09:03 < brainproxy> erick_ribeiro: sure, what you're look for is templating
09:03 < brainproxy> erick_ribeiro: and you have a myriad of options for achieving that
09:03 < RLa> nice :)
09:03 < erick_ribeiro> brainproxy nice.
09:04 < brainproxy> erick_ribeiro: I think by default that express uses jade
09:04 < brainproxy> for html templating
09:04 < erick_ribeiro> brainproxy The second point is: The user can see the content of the js files, if he try to access it from the url??
09:05 < brainproxy> erick_ribeiro: the server-side javascript that's actually generating the web pages will not be visible
09:05 < ssafejava> RLa: I smile every time I look at that source. I love how it just ajaxes itself back in instead of actually forming a loop
09:05 < brainproxy> but javascript that you include in the pages or link to from the pages will be visible as usual
09:06 < erick_ribeiro> brainproxy mm, ok. I installed node.js today, but not tested it in my localhost yet.
09:06 < brainproxy> RLa: my phrasing could have been better
09:06 < brainproxy> I meant the js that actually runs isn't the js you write
09:06 < brainproxy> instead you get source transformation
09:06 < brainproxy> I want to stay away from that
09:07 < RLa> there is some use for it, like minification
09:07 < brainproxy> not in all cases forever, but as a goal for my lib, everything should work w/o having to resort to any source transformation
09:07 < brainproxy> well that's fine
09:07 < brainproxy> i don't mean minification
09:08 < RLa> you mean things like fibers and that?
09:08 < brainproxy> i mean specifically that my goal is to provide a lib for writing computations using standard techniques like State monad, Continuation monad, shift and reset of delimited continuations, and so on
09:08 < brainproxy> w/o requiring that the code the lib user writes be transformed
09:13 < brainproxy> erick_ribeiro: best way to learn is to start experimenting
09:13 < brainproxy> get your hands dirty, the sooner the better
09:13 < erick_ribeiro> brainproxy ok, I will do it. 
09:13 < brainproxy> also, pick some relatively small libs and study their internals
09:14 < brainproxy> don't give up until you actually understand how they work
09:14 < brainproxy> and until you can read through the test suites and understand what's being tested and why
09:14 < Havvy> erick_ribeiro: You can look at simple-irc-sockets and tennu-modules for some small libs.
09:14 < Havvy> Though tennu-modules doesn't have a test suite.
09:14 < brainproxy> I also recommend studying kriskowal's Q library
09:14 < erick_ribeiro> brainproxy thanks.
09:14 < brainproxy> but maybe don't start with that
09:14 < brainproxy> you might freak out
09:15 < erick_ribeiro> I already tested some comands in terminal, it is working.
09:16 < erick_ribeiro> I just need to read more about node and learn how to use it.
09:18 < sbarow> brainproxy: thanks for recommendation on q library :-)
09:19 < MitchW_> +1 on Q (or subsets of), good thing about Q is it's somewhat aligned w/ ECMASCript 6/harmony, so will be smooth sailing into the future for a lot of cases
09:20 < erick_ribeiro> In which directory do I put my js file? 
09:21 < erick_ribeiro> ...to run it as > node my_file.js
09:21 < sbarow> erick_ribeiro: any directory you want 
09:21 < sbarow> just make sure you are in that directory with your terminal.
09:22 < sbarow> i.e if you had to ls you would see your my_file.js file
09:22 < sbarow> then you can just node my_file.ks
09:22 < MitchW_> erick_ribeiro: whichever directory you run node from.  there's no restrictions on where you store them, or where you should.  a lot of people tend to structure things under a 'lib' or 'src' directory though and use npm + package.json (or another build system like grunt/jake) to run things appropriately
09:22 < sbarow> Side not on Q, check out co http://github.com/visionmedia/co
09:23 < sbarow> *Side note 
09:23 < bigx> MitchW_ a plain Makefile is enough for the backend
09:25 < erick_ribeiro> Ok, it worked here. 
09:25 < erick_ribeiro> :)
09:25 < erick_ribeiro> I'm beginning to understand how this works.
09:26 < bigx> does anyone use quality dashboards here? somthing like sonar or even coveralls.io
09:31 < erick_ribeiro> I am liking very much node.js. Can't wait to make a tutorial about this in my language
09:32 < nathanbz> mmm everything seems to be broken with the latest node for me :(
09:33 < staar2> hello
09:33 < staar2> could anyone tell how .env file is loaded or do I have to load it manually ?
09:33 < erick_ribeiro> Does anyone know if I can install it on my HostGator shared server?
09:34 < nathanbz>  toobusy@0.2.3 No repository field.
09:34 < Vill> Hi I'm looking for some help with embedding EclipseCLP into NodeJS, paid interview considered. Please PM me. Kind Regards, Michael
09:34 < sbarow> erick_ribeiro: if not, or you just want to play around check out http://nodejitsu.com or http://heroku.com
09:35 < erick_ribeiro> sbarow I already testing it on my localhost, working perfect, thanks :)
09:36 < erick_ribeiro> sbarow oh
09:37 < erick_ribeiro> sbarow sorry, you suggested me hosting platform, I didn't saw it before answering you.
09:38 < nathanbz> gyp ERR! stack Error: not found: make
09:38 < nathanbz> do i need a make file
09:39 < sbarow> erick_ribeiro: no problem, they have some free tiers so you can get up and running pretty quick and easy.
09:39 < erick_ribeiro> sbarow When you wrote it, I thought it was a site like  jsapp.us
09:40 < erick_ribeiro> sbarow ok, thank you very much
09:40 < sbarow> erick_ribeiro: no problem.
09:41 < nathanbz> make: g++: Command not found
09:41 < nathanbz> is there a list of programs u need to use npm install > <
09:42 < sbarow> nathanbz: running a mac?
09:42 < nathan7> nathanbz: for native modules, you need make and g++ and stuff
09:42 < nathan7> if you're on OS X that means installing xcode
09:43 < nathan7> if you're on a linux distro, that means installing your distro's build-essential or base-devel package
09:43 < nathanbz> thx
09:43 < nathanbz> i was just installing build-esstnial
09:46 < nathanbz> module.js:340
09:46 < nathanbz>     throw err;
09:46 < nathanbz> somethings still not playing nice ;9
09:47 < nathan7> that's the most useless piece of stacktrace anyone has ever given me
09:47 < nathanbz> :)
09:47 <@konobi> nathanbz: if you need to paste stuff, please use pastebin or a gist
09:47 < nathanbz> I'm pretty sure it's not :P
09:50 < nathanbz> im no newb!
09:50 < nathanbz> it's the config file for the database connection 
09:50 <@konobi> nathanbz: i care not... don't paste
09:51 < sbarow> nathanbz: paste to gist, would like to see the entire error.
09:55 < nathanbz> sbarow it's a missing module error nothing interesting abouti t
10:09 < erick_ribeiro> node.js ftw
10:15 < erick_ribeiro> good bye, people. See you later
10:15 < erick_ribeiro> peace
10:26 < serapath> hi
10:26 < serapath> could someone help me with a bit of a problem in using the module pattern?
10:26 < serapath> i've created an executable example
10:26 < serapath> http://www.node-console.com/script/module-problem
10:27 < serapath> it says: TypeError: Cannot call method 'speak' of undefined
10:27 < serapath> but it shouldnt
10:28 < serapath> its a simple example
10:36 < sbarow> serapath: in your routes/lib/subs.js
10:37 < sbarow> within the module.exports you had var auth = authenticator
10:37 < sbarow> What that is doing is creating a local variable auth. But what you actually want to do is use the variable outside of the module.exports that you created i.e var auth; 
10:38 < sbarow> serapath:  So to fix the problem change var auth = authenticator; to auth = authenticator
10:41 < Stibily> Hi all. I would like some advice on how to structure a forthcoming project of mine. In brief, it's a multiplayer game that will sit in a public space and will have two screens, each running a separate instance of the game. Users then use their phones to connect via a url. They will then be asked to interact with either the left or the right screen and contribute to the game by using their phones as the input device. The app is to use socket.io to han
10:41 < Stibily> Am I right in thinking that i should run two instances of the game, each with a separate port number, and have apache map -say- URL.com/left to one port and URL.com/right to another port?
10:41 < Stibily> If so, my only issue is how to handle the initial step where the user chooses their screen. Should i tap into the users session and store it so i can then use it when i get into the respective left/right game instance?
10:41 < Stibily> Sorry for the wordy description! Any suggestions would be highly appreciated. Thanks! 
10:48 < spion> hmm https://npmjs.org/doc/scripts.html says install scripts are an antipattern. what if I want to install a bash_completion script for my command line tool?
10:50 < tobie> Wanted to do a JSON dump of a request object in the log for further analysis in a particular case. Can't as there are circular structures in the req object. What's the common practice in that case?
10:56 < ssafejava> tobie: Easy way is to use node-inspector or something similar,
10:56 < ssafejava> tobie: Otherwise mark cyclic references. (http://stackoverflow.com/questions/9382167/serializing-object-that-contains-cyclic-object-value)
11:00 < spion> tobie, there is also JSON.decycle by Douglas Crockford : https://github.com/douglascrockford/JSON-js
11:01 < tobie> sure
11:01 < tobie> When you log requests like this, what do you usually log?
11:04 < spion> I use console.log / console.error etc.
11:04 < spion> and my process monitor redirects that to the appropriate log storage
11:04 < Vill> hello, Is anyone using node-gyp on x64 Windows7?
11:08 < rmb> hi, can nodejs make svg to realtime such as this http://jvectormap.com/examples/markers-world/ which mean monitor the marker from database..
11:19 < chris_> hey guys, does some of you knoe of some good project done using Arduino and node.js?
11:27 < poacher2k> anyone has a clue about when to end a line with "." and when to end a line with ";" when writing a jade template? :3
11:29 < poacher2k> seems kinda random
11:31 < sbarow> poacher2k: when writing javascript or with the "html"
11:47 < HSL> morning!
11:48 < HSL> I've got a weird problem, my node.js app using socket.io with SSL gives an SSL error after it's been running for a few days. Did anyone see something like that before?
11:49 < HSL> It gives me this generic error: "Failed to load resource: An SSL error has occurred and a secure connection to the server cannot be made." 
12:02 < remysharp> if I http.createServer(x).listen(0) - how can I tell which port it's randomly selected?
12:16 < remysharp> server.address().port
12:19 < mkozjak> what is the easiest way to 'grep' a line matching a pattern?
12:19 < mkozjak> i want to parse a http request without using 'url'
12:22 < SomeoneWeird> mkozjak, regex
12:34 < Falco> freedom
12:37 < theCode> fries?
12:39 < serapath> sbarow: thx :-) what a stupid mistake
12:44 < sbarow> serapath: sure thing :-)
12:51 < jasonkuhrt> question regarding require lookup paths
12:51 < jasonkuhrt> is there a way to treate a local lib folder like node_modules
12:51 < jasonkuhrt> idiomatic way
12:57 < werle> juliangruber: you didn't wait around for 24+ days did you ? :)
12:58 < juliangruber> werle: no way to test this fucker :D
12:59 < werle> juliangruber: haha looks good though
12:59 < zaphod1984> jasonkuhrt you mean like require('fooFolder') and fooFolder is a subdirectory in /lib ?
12:59 < jasonkuhrt> zaphod1984: exactly
12:59 < zaphod1984> jasonkuhrt no thats not possible
12:59 < zaphod1984> jasonkuhrt just do a require('./lib/fooFolder')
13:00 < jasonkuhrt> zaphod1984: ya I know, just not how I'd like to think of them, npm seems to want to push you turn spin everything in lib into its own repo
13:00 < jasonkuhrt> zaphod1984: as in that is the preferred method
13:01 < mkozjak> how can i 'grep' the multiline string to only get the line containing a pattern?
13:07 < zaphod1984> jasonkuhrt npm doesnt tell you how to structure your application does it?
13:07 < jasonkuhrt> zaphod1984: no it does not, it just doesn't readily expose lookup paths
13:08 < zaphod1984> yes thats the responsibility of each and every single module. a module has one entry point (usually index.js, otherwise its specified in the package.json) and it decides what it wants to expose to the use of the module
13:46 < rud> hmm when using mocha, any clues how i can tell it to first load file1.js make it's tests, than load file2.js and make it's tests, rather than running them in parallel ?
14:07 < zaphod1984> mocha dont run in parallel
14:14 < danmactough> zaphod1984: mocha doesn't run in parallel but it does load all the test files on start -- that probably the behavior rud is bothered by
14:15 < rud> danmactough: i think it is, i found a solution i think with before()
14:15 < alchimista> hi, I need to validate email of user who register to my application, so after a user register, I have to send an email to him/her and then he/she click on the link inorder to activate his/her accout.
14:16 < rud> problem was my singletons not required when i expected, causing weird behaviors 
14:16 < alchimista> so my question is how to do so, any example tutorial or .. module
14:16 < danmactough> rud: yeah, you will need to use before and after to build up and tear down in each test file, it sounds like
14:21 < jasonkuhrt> after a stream emits an error
14:21 < jasonkuhrt> I cannot seem to pipe to it
14:21 < jasonkuhrt> is that expected?
14:21 < alchimista> anyone here read my question, any guide/hint
14:23 < wumpus_> hello everyone i tried to ask in mongoosejs but no one is active atm, giving a shot here
14:23 < wumpus_> i have a schema defined like this: http://hastebin.com/jijepuvaya.js
14:23 < wumpus_> i can correctly create instances of that model
14:24 < wumpus_> but when i try to update for example by doing item.simple_items = [1,2,3] or item.simple_items = 'hello'
14:24 < wumpus_> and item.save(function(err){if (err) handleError(err)})
14:24 < wumpus_> why this does not trigger a validation error?
14:28 < kenperkins> man
14:28 < kenperkins> glad I turned on alerts for my flight this am
14:31 < wankdanker> Anyone have any tips on finding the exact position of an `Unexpected token` in a JSON string?
14:32 < kenperkins> wankdanker: I usually just paste it into http://jsonformatter.curiousconcept.com/
14:32 < kenperkins> or something similar
14:33 < dch> wankdanker: install yajl-tools which comes with json_verify. It will tell you exactly where.
14:34 < kenperkins> dch thanks for that tip
14:34 < wankdanker> thank you both; kenperkins and dch
14:36 < neeky> this one is also mighty handy - not only does it validate, it has a sweet ass editor: 
14:36 < neeky> http://www.jsoneditoronline.org/
14:39 < wankdanker> dch: (right here) ------^  <--- love that. Thank you for that tip.
14:39 < neeky> alchimista, did you search "node send email registration"?
14:39 < neeky> because the first result is this:
14:39 < neeky> http://stackoverflow.com/questions/8838624/nodejs-send-email-on-registration
14:40 < dch> wankdanker: also most editors have inbuilt JSON validation these days.
14:40 < neeky> which shows you exactly how to do what you are trying to tdo
14:42 < wankdanker> dch: i'll look into that. this is a 5mb json string being pulled from a file over http. piping it to json_verify works awesome.
14:51 < jasonkuhrt> who knows about the erro ECONNRESET
14:51 < radu> me, do you use websockets?
14:51 < jasonkuhrt> I've looked at both https://groups.google.com/d/msg/nodejs/Sc-_U-aoMsU/6vbobQFgMNMJ and http://stackoverflow.com/questions/2974021/what-does-econnreset-mean-in-the-context-of-an-af-local-socket
14:51 < jasonkuhrt> radu: no
14:52 < radu> then install longjohn
14:52 < radu> to get full stacktraces 
14:52 < jasonkuhrt> radu: hm, well actually a small part of the web has a user-facing socket.io micro interface
14:52 < jasonkuhrt> radu: okay
14:52 < radu> well
14:52 < radu> http://stackoverflow.com/questions/17245881/node-js-econnreset
14:52 < radu> this is my issue
14:53 < radu> read everything
14:53 < jasonkuhrt> radu: okay
14:53 < radu> and @tjfontaine helped with this advice: https://gist.github.com/samsonradu/1b0c6feb438f5a53e30e
15:03 < jasonkuhrt> radu: in socket.io the socket from: io.sockets.on('connection', function(socket) {
15:03 < radu> yes
15:03 < jasonkuhrt> is a regular node.js socket like that found in the net module?
15:03 < radu> no it s a socket.io 
15:03 < radu> websocket conenction
15:03 < jasonkuhrt> where is that object documneted
15:05 < jasonkuhrt> not very helpful https://github.com/LearnBoost/socket.io#socket
15:05 < radu> https://github.com/LearnBoost/socket.io/wiki
15:05 < radu> go through the wiki
15:30 < alchimista> any example how to login with username/email in passportjs
15:43 < burp_> hello
15:43 < burp_> i have a jade view which i passed a JSON object
15:44 < burp_> i can use the json object successfully with the likes of  - for(){ li=object.value}
15:44 < burp_> but if i would like to write some inline jave in the html
15:44 < burp_> can i pass the json object to the inline script?
15:59 < jdelgado> Best way to debug a c++ module?
16:00 < neeky> AAA_awright, crap, i'm not logging chats.  What was that regex that you posted that would tokenize: 'A-{YYY}{MM}{seq-04.d}'
16:00 < AAA_awright> neeky: Just String#replace with a passed function
16:01 < AAA_awright> >> 'abc'.replace(/./g, function(a){ return '0'+a; })
16:01 < purr> AAA_awright: (string) '0a0b0c'
16:01 < neeky> i'm trying to modify that regex to give me all the {} in one array, and everything else in anotehr, so I can evaluate the {}'s from left to right
16:01 < neeky> ah, ok
16:01 < jdelgado> Anyone tried TraceGL? It looks pretty cool
16:02 < AAA_awright> >> 'a{b}c'.replace(/{([^}]+)}/g, function(a, b){ return '0'; })
16:02 < purr> AAA_awright: (string) 'a0c'
16:02 < neeky> is purr a regex bot?
16:02 < AAA_awright> purr: If there were a good URI Template parser I might suggest that instead
16:02 < AAA_awright> neeky: V8 bot
16:02 < addisonj> anyone at the joyent offices want to let us come hang out early :|
16:02 < neeky> sweet
16:02 < addisonj> we got here far too early it seems
16:03 < AAA_awright> >> 1 || 2 || 3
16:03 < purr> AAA_awright: (number) 1
16:03 < AAA_awright> >> 1 && 2 && 3
16:03 < purr> AAA_awright: (number) 3
16:06 < neeky> >> 1/0
16:06 < purr> neeky: (number) Infinity
16:06 < neeky> >> 0/1
16:06 < purr> neeky: (number) 0
16:06 < neeky> smart one
16:08 < AAA_awright> >> var zeros = [+0, -0]; zeros.concat(zeros.map(function(v){ return 1/v; }));
16:08 < purr> AAA_awright: (object) [0, 0, Infinity, -Infinity]
16:09 < AAA_awright> Gotta love positive and negative zero
16:10 < neeky> >> var a = 1, b = 10; a||b; a||b; a||b;
16:10 < purr> neeky: (number) 1
16:11 < neeky> >> var a = 1, b = 10; a^b; a^b; a^b;
16:11 < purr> neeky: (number) 11
16:11 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:17 < neeky> >> var a=123; var b=456; a = a^b; b = a^b; a = a^b; console.log('%s:%s', a, b)
16:17 < purr> neeky: undefined; Console: '%s:%s', 456, 123
16:36 -!- isaacs changed the topic of #Node.js to: NODECONF IS HAPPENING - http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
16:36 < sb7597> hi
16:36 < sb7597> hi
16:36 < sb7597> hi
16:36 < aravind_> exit
16:37 < sb7597> hi
16:37 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:37 < sb7597> hi
16:45 < dylukes> So a common issue I find myself having is that when I deploy something (say to heroku, or to a VPS via git post-hooks, etc...)
16:45 < dylukes> It takes *forever* for the npm dependencies to install. Mostly because every library uses a hundred small dependencies.
16:45 < dylukes> Is there any way to alleviate this issue?
16:46 < dylukes> If one uses express, jade, stylus, coffee-script, nib, underscore, mongoose, q, and grunt, they can expect at least a couple minutes in dependency installation time.
16:47 < tjholowaychuk> we had to write our own npm thing
16:48 < tjholowaychuk> but that's only due to the bundledDeps thing
17:00 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:06 < NotMyself> hey folks what are you doing for simple load testing instead of https://github.com/benschmaus/nodeload ?
17:15 < foobar321> Hi. How to keep process running without setTimeout ?
17:19 < neeky> foobar321, what does your process do?
17:20 < neeky> does it start any servers, like http servers?
17:24 < Andgon> \join #freenode
17:25 < whiskers75> How do I print out some data, then replace it with some other data?
17:26 < whiskers75> so like console.log('score: 50') then to update: console.log('[some sort of ASCII code]score: 100')
17:29 < spion> Is it possible to load a module (without require) but replace the module resolution mechanism inside the loaded module so that some module paths are replaced with different (mock) ones?
17:30 < spion> for core modules it would be something like injectRequire('mylib', { 'fs': './harness/mockfs.js' });
17:30 < whiskers75> spion: erm, symlinks?
17:31 < neeky> nodecon is going on and there's 1055 people in here :/
17:31 < FunnyLookinHat> Do any of you guys use upstart scripts to run your node applications? 
17:31 < spion> this will replace fs with mockfs in mylib and all otherr modules required inside myllib, etc (recursively)
17:31 < spion> FunnyLookinHat, I was so frustrated I wrote my own process manager.
17:31 < spion> :)
17:32 < spion> https://github.com/spion/nac
17:32 < FunnyLookinHat> spion, lol really ?  Upstart seems to be a really easy solution
17:32 < FunnyLookinHat> aweosme thankx!
17:32 < FunnyLookinHat> ... wow typo
17:32 < FunnyLookinHat> *Awesome thanks!
17:32 < spion> its easy if you're okay with managing everything as root.
17:32 < neeky> whiskers75, can you explain what you are trying to do a bit better?
17:32 < neeky> are you trying to 'edit' (overwrite) text on the console?
17:33 < whiskers75> neeky: I figured it out, and yes, I am.
17:33 < whiskers75> you need \x08
17:33  * whiskers75 watches his Raspberry Pi chew through the loading of his Minecraft server written in Node.js
17:34 < neeky> also, if you know where text is on the console, you can sens ANSI escape sequences
17:34 < neeky> and write anything anywhere
17:35 < neeky> http://en.wikipedia.org/wiki/ANSI_escape_sequences
17:35 < whiskers75> neeky: I'm fine with \x08, but out of interest, can I rewrite an entire line?
17:35 < neeky> can make a pretty nifty dashboard with escape codes
17:35 < whiskers75> yeah
17:35 < neeky> yep, EL - erase line
17:35 < whiskers75> so just do \xELnew stuff
17:36 < neeky> the wiki article shows all the possible codes
17:36 < merpnderp> if I do "browserify -r ./three.js -r ./jquery.js -r ./stats.js > common.js" then "browserify -x ./three.js -x ./jquery.js -x ./stats.js main.js > bundle.js", the bundle still includes three.js but not the other two excluded libraries. Anyone have a clue what's going on? 
17:36 < neeky> no, EL is the english code
17:36 < foobar321> neeky: no
17:37 < foobar321> Hi. How to keep process running without setTimeout ? I don't have any servers listening
17:37 < tomb_> anyone know if there is a good site for places advertising node.js related jobs?
17:37 < whiskers75> neeky: how do I do it, then?
17:38  * whiskers75 DESKTOP PC: Minecraft server loads in 7 seconds. Raspberry Pi: uh, it's been a minute and it's loaded 125/255 chunks
17:40 < whiskers75> oh duh - it's generating new chunks
17:41 < whiskers75> ooh, it's on chunk 200
17:41  * whiskers75 go node.js minecraft server on a raspi!
17:42 < whiskers75> [INFO] Done (509s)! <-- yay!
17:43 < tjb1982> Never used Node.js or Node-webkit. Does anyone know if it is possible to drag a file out of a node-webkit app? E.g., click an item associated with a file, access to its local path, drop into an email client?
17:45 < neeky> whiskers75, looking at the ANSI codes table, <ESC>[nK, where in is how many likes to delete
17:46 < neeky> so <ESC>[K would delete the current line
17:46 < whiskers75> so \x[K
17:47 < neeky> well, the Hex code for K
17:47 < whiskers75> oh
17:47 < neeky> 4B maybe?
17:48 < whiskers75> I think I'll do with \x08 for now
17:53 < darshan> hello world
17:59 < dylukes> whiskers75: I haven't done anything minecraft related in ages...
18:00 < dylukes> I kind of miss the days of repeatedly hacking together iterations of protocols libraries.
18:00 < whiskers75> dylukes: I hate it. IT'S SO HARD TO IMPLEMENT NEW PACKETS! github.com/whiskers75/jsmc
18:04 < whiskers75> oh gosh
18:04 < whiskers75> DM crash
18:04 < dylukes> whiskers75: it's not that bad :p
18:04 < dylukes> Perrson can't write properly framed protocols for shit mind you
18:04 < whiskers75> dylukes: help me :P
18:04 < dylukes> The trickiest bit is efficient buffer management.
18:04 < dylukes> I have a job whiskers75 :p
18:05 < whiskers75> dylukes: I was kidding
18:05 < dylukes> If you need advice though, sure… I know that protocol better than I'd like to.
18:06 < whiskers75> dylukes: I need an implementation of the online mode check.
18:14 < jasonkuhrt> I'm having strange TCP client behaviour
18:15 < jasonkuhrt> where when a client disconnects
18:15 < jasonkuhrt> a pipeline that was pipeing to the socket
18:15 < jasonkuhrt> queues data
18:15 < jasonkuhrt> that is then written to socket once it connects again
18:16 < jasonkuhrt> and by connects again I mean any next connection
18:16 < jasonkuhrt> is that because if pipe has nothing to consume it queues?
18:18 < jasonkuhrt> or sounds like a wacky app error
18:29 < jasonkuhrt> is there a way to empty a stream's read queue?
18:30 < neeky> >> console.log('\x1B[2J');    
18:30 < purr> neeky: undefined; Console: '\u001B[2J'
18:30 < neeky> ^^ clears your console screen
18:36 < werle> neeky: that is neat 
18:39 < jasonkuhrt> ah
18:39 < jasonkuhrt> I got bitten by the fact that node 0.10.x queue's now
18:40 < jasonkuhrt> whereas streams1 would toss away data
18:40 < jasonkuhrt> can anyone explain that a bit better to me?
18:40 < jasonkuhrt> I understand that in streams2 you can use resume to "achieve old behaviour"
18:40 < jasonkuhrt> but what would the idiomatic streams2 way be?
18:41 < jasonkuhrt> basically my scenario is that my server has a stream of data being sent to all clients
18:41 < jasonkuhrt> I pipe the server stream to each connected client
18:41 < jasonkuhrt> when there are 0 connections
18:42 < jasonkuhrt> I do *not* want the server stream to "buffer"/"queue" (what's the right word?)
18:42 < jasonkuhrt> if the server stream does buffer, the next connection will get a whole bunch of chunks from the past
18:42 < jasonkuhrt> which makes no sense in my application
18:43 < jasonkuhrt> based on what the node.js documentation says using .resume() sounds like stopgap, I'd like to do it more idiomatically if possible
18:43 < jasonkuhrt> any advice welcome
18:51 < Technodrome> Good day
19:02 < harbhub> hey fellas
19:02 < harbhub> how do i pass a request to a static file server?
19:02 < harbhub> and which static file server do you guys recommend?
19:02 < harbhub> i need a static file server that can get, post, update, put, and delete
19:02 < Robbilie> heyho, for some high frequency operations, i need settimeout for a smaller value than 1ms, is there any way?
19:02 < Robbilie> use express :D
19:03 < ashusta> @Robbilie - can't you use system ticks to get a higher resolution timer?
19:03 < harbhub> just an idea, good you use setTimeout 0?
19:03 < Robbilie> that might be a solution ashusta , how does it work? :)
19:03 < jesusabdullah> that doesn't sound like a static file server harbhub 
19:04 < harbhub> jesusabdullah, you are right
19:04 < harbhub> basically i want my nodejitsu nodejs server to not lose all the files
19:04 < Robbilie> harbhub, i dont need 0 xD i need a range from 0 to 2 in at least .1 teps
19:04 < jesusabdullah> harbhub: but you can use express, or some other middleware stack, combined with a static fileserving middleware such as
19:04 < harbhub> that users upload
19:04 < FunnyLookinHat> Hey - what do you guys use to chain nested callbacks more nicely ?
19:04 < jesusabdullah> umm
19:04 < jesusabdullah> connect.static
19:04 < jesusabdullah> or ecstatic
19:04 < harbhub> i know how to handle static requests
19:04 < jesusabdullah> FunnyLookinHat: caolan/async when necessary
19:04 < context> harbhub: why would you do anything other than GET for static assets
19:04 < jesusabdullah> harbhub: liar >:P
19:04 < harbhub> i wrote my own custom server
19:04 < harbhub> :)
19:04 < jesusabdullah> context: I know the problem.
19:05 < FunnyLookinHat> jesusabdullah, thanks
19:05 < jesusabdullah> harbhub: context: The problem is you want to persist files on nodejitsu across deploys, no?
19:05 < harbhub> the problem is not controlling the server, the problem is nodejitsu will delete all the files
19:05 < harbhub> yes
19:05 < harbhub> exactly
19:05 < context> harbhub: use S3
19:05 < harbhub> i just want a folder called 'persist'
19:05 < harbhub> lol
19:05 < context> its not a problem. heroku works the exact same way.
19:05 < jesusabdullah> harbhub: inorite?
19:05 < jesusabdullah> harbhub: there was work in making it so you could mount a dropbox folder on your drone transparently
19:05 < harbhub> my solution thus far is just to download all the files periodically to my laptop lol
19:06 < context> harbhub: and this folder lives where? your 4 node instances if your app could be running on four seperate machines
19:06 < jesusabdullah> harbhub: you might be able to make that happen anyway, it's probably a similar approach as s3
19:06 < jesusabdullah> harbhub: I'm running into a similar problem due to leveldb
19:06 < harbhub> perhaps s3 is the right place to go, but it isn't that appealing
19:06 < jesusabdullah> harbhub: mmalecki and I have been talking about writing a "leveldump" module
19:06 < harbhub> i would prefer if nodejitsu offered some service like this
19:06 < harbhub> level dump  :)
19:06 < Robbilie> ashusta, might process.hrtime be a solution for me? :)
19:06 < jesusabdullah> y'know like sqldump
19:07 < jesusabdullah> Robbilie: STOP MEETING TIME
19:07 < harbhub> ah i have an idea
19:07 < harbhub> nodejitsu can make some server partition that just has hard disk space
19:07 < Robbilie> jesusabdullah, what? xD
19:08 < harbhub> and app name user name
19:08 < harbhub> and when i try to deploy over the existing app
19:08 < harbhub> it reads my package.json file
19:08 < harbhub> and takes "persist": "someDir"
19:08 < jesusabdullah> Robbilie: HR TIME
19:08 < harbhub> stores all the files from that
19:08 < Robbilie> jesusabdullah, i still dont know what you mean?
19:08 < harbhub> and then puts those into the new deployed "persist": "whateverNameDir"
19:08 < harbhub> know what i mean?
19:09 < context> harbhub: or go run your app on a VPS if you want a directory named 'persist'
19:09 < ashusta> @Robbilie - process.nextTick
19:09 < context> harbhub: you realize this would have to be a network share attached to ALL machines at nodejisty
19:09 < jesusabdullah> Robbilie: you said process.hrtime, I thought "HUMAN RESOURCES TIME"
19:09 < Robbilie> ashusta, not just the next tick, i need a special timeout ;)
19:09 < harbhub> yeah it probably isn't feasible for you guys
19:09 < harbhub> just something i'd like
19:10 < ashusta> Anyone figure out how to install nodeconf2013 package on OS X? It's broken for me...
19:10 < Robbilie> jesusabdullah,  xD
19:12 < ashusta> @Robbilie - nexttick + process.hrtime could build your own setTimeout method
19:12 < rossk> ashusta: it worked for me but I know kenperkins had some problems... he ended up having to manually npm install deps I think
19:13 < Robbilie> ashusta, thats what i am doing right now :D
19:14 < mac_nibblet> Heya
19:14 < mac_nibblet> im having a strange issue nodejs is not giving me any errors
19:14 < mac_nibblet> only syntax ones
19:15 < mac_nibblet> but stuff such as using an undefined variable ?
19:15 < mac_nibblet> or call on methods that dont exist
19:15 < mac_nibblet> really strange stuff
19:16 < Robbilie> ashusta, well what hrtime tells me, setTimeout(fn, 1); can take up to 4 instead of 1 xD
19:17 < bbloom> is there something like socket.io (cross browser, well tested) that provides BSD-like sockets? (byte steams, instead of messages)
19:23 < Robbilie> ashusta, want the code snippet?
19:23 < bbloom> i want to stream lots of very small messages (a few characters each), so i don't need the overhead of message envelopes 
19:23 < bbloom> i guess that's what websockets are, but i'd love to support lower level browsers
19:24 < bbloom> oh no, seems that websockets are also messages, not bytes
19:25 < gbit86> I need some assistance. I do not understand why "fs.appendFile" fails to execute inside my "process.on" function. Can someone please explain to me what kind of magic is required to make this function execute?
19:25 < ashusta> @Robbilie no thanks. I just need to figure out what's wrong w/ the nodeconf2013 package
19:28 < Industrial> So I have this Server prototype function that acts as a named and versioned (seaport) dnode interface and may specify dependency Server's/seaport servers so they become callable directly from the implementation.
19:28 < Industrial> https://gist.github.com/Industrial/7244e79ed917f5fdcb20
19:28 < Industrial> Is there a better way i can set up the client connections :\?
19:28 < Industrial> its a little fidgety :P
19:29 < gbit86> Interesting, once you are inside process.on there is no running of fs or external functions at all..
19:29 < gbit86> beginning to think catching errors with process on isn't the ticket then
19:30 < Industrial> gbit86: probably the correct way is to handle them all correctly (bubble up or throw)
19:31 < Industrial> you could decide not to throwand keep running at the correct point.
19:31 < gbit86> well I am not sure, it seems like the issue was that I had process.exit following the logging of the error to a file. It apparently executes asynchronously/faster to my logging of the error..
19:31 < harbhub> does anyone here use amazon aws free tier?
19:32 < harbhub> is there a way to make the settings such that i cannot be charged (i.e. make it so that the free tier time controls and/or data limits are not ALLOWED to be exceeded)?
19:38 < harrisonm> harbhub: dunno about data limits but the time limit lets you have a single micro instance running 24/7
19:40 < darkPassenger> hi all is there anyway to send a post to localhost:3000 ? 
19:41 < darkPassenger> like from a browser...
19:41 < squeeks> use wget/curl.
19:41 < darkPassenger> oh !
19:41 < squeeks> or failing that, most browsers have some extension or another that can is some sort of interface that lets you send whatever request you want.
19:43 < gbit86> ok so finally I figured it out
19:43 < gbit86> if you use fs to append to a file and then you want to end the process then you have to end the process at the end of that function and not the function outside of it
19:44 < gbit86> even if you delay the rest of the main function it will still end before it ever executes the nested function
19:44 < gbit86> it as though the order of the nested functions are irrelevant when it comes to the other functions and logic inside the outer function
19:45 < gbit86> I find the behavior to be very inconsistent as for the most part the script executes in the order I write my logic.. but not always
19:46 < gbit86> I don't mind asynchronous code, but I want to be the one that decides what runs simultaneous not some arbitrary variable that doesn't make logical and/or intuitive sense..
19:47 < Trudko_> Guys  when using nodejs do you use only server side templates only client sides or both ?
19:47 < Trudko_> it sems like tht basic html could be done on server with jade for example and chaning on the dom should be done by something like underscore
19:50 < gbit86> I swear.. the domain feature seems to be the most pointless feature ever
19:50 < harrisonm> Trudko_: I think it depends on what you're trying to do.  My thought is that you should probably pick one or the other so that all your templates are in one place
19:51 < harrisonm> and pick based on the strengths and weaknesses of each approach for your application
19:51 < gbit86> I mean if you are going to add that to your code to handle various types of uncaught exceptions, then clearly you are very likely to know what kind of issue triggers that uncaught exception and you can and would have already wrote your code to try and either resolve it or crash gracefully so that upstart or forever can re-run. I really do not understand the purpose of domains at all.
19:52 < Trudko_> harrisonm: so you are for etheir or approach?
19:52 < gbit86> domains seems to be very redundant..
19:53 < harrisonm> Trudko_: Yeah, can't really give you a recommendation without knowing more about what you're creating
19:53 < Trudko_> harrisonm: simple authetication form which will be part of bigger ap
19:55 < harrisonm> If it's a simple auth form I'd just use server-side templates.  The rest of the app isn't backbone or angular or anything like that is it?
19:55 < Trudko_> actually I do want to use backbone
19:55 < harrisonm> ah
19:56 < harrisonm> Then (though I'm speaking from limited experience with Backbone), I'd handle your templating for that in Backbone as well and just do auth logic server-side
19:56 < Trudko_> well i like how jade for example helps you create basic  html , but i guess i can find something like on client also.
19:57 < harrisonm> That way your templating is consistent and your codebase will be easier to manage
19:57 < Trudko_> well thats the plan question i have is just templates. if it even make sense to combine client side with server side templates
19:57 < mac_nibblet> Anyone got an idea why im not getting any error messages at all ?
20:00 < harrisonm> Trudko_: not really, no
20:01 < shubham_> i have started to program on node ny help with the learning and tutorial stuff??
20:01 < fr33d4n_> there are good tutorials out there
20:01 < shubham_> can u post me some links??
20:02 < fr33d4n_> I've just started, with little to know knowledge of JS, (but a LOT of Python background), and it's like a breeze
20:02 < fr33d4n_> Smashing node
20:02 < fr33d4n_> that book is good
20:02 < fr33d4n_> 400 pages of pure node + express
20:02 < shubham_> okk, ny on9 tutorials??
20:03 < fr33d4n_> w8, I had a very good page
20:04 < fr33d4n_> http://www.codeschool.com/paths/javascript
20:04 < fr33d4n_> this is good
20:04 < fr33d4n_> a very good way to begin with JS, node and even backbone
20:05 < shubham_> thnks buddy,u made my day :)
20:05 < Soulrivers> doesn't codeschool cost money though?
20:05 < Soulrivers> I might be misremembering
20:06 < fr33d4n_> I've never took that course, I prefer books. But my friend showed this to me yesterday
20:06 < fr33d4n_> sooo.... xD Dunno
20:07 < Trudko_> harrisonm: this is good naswer http://stackoverflow.com/questions/7738345/should-i-be-rendering-html-on-the-server-side-or-client-side
20:08 < Soulrivers> yeah it does, I checked
20:08 < Soulrivers> the first jQuery course is free, and decent
20:08 < Soulrivers> the rest you'll have to pay for though
20:10 < harrisonm> Trudko_: hm alright thanks
20:11 < neeky> am I just an idiot, or is jade really really picky about whitespace?
20:12 < neeky> I'm trying to add documentation to the mongoose project, but all their docs are jade. 
20:12 < neeky> what's wrong with HTML? I'll trade verbosity over semantic whitespace BS any day
20:12 < freewil> it is kind of picky about whitespace, but it sort of has to be
20:13 < freewil> did you really want to indent that tag underneath the previous tag?
20:13 < freewil> do you want a space after that tag before the next sibling?
20:14 < jesusabdullah> neeky: not an idiot, significant whitespace --> picky about significant whitespace
20:14 < neeky> the error was two lines off - just diffed my way back to find the error - a tag had a tab on the end
20:15 < jesusabdullah> haha, NICE
20:16 < CrawfordComeaux> I'm (re)writing a script that's meant to monitor me (ie. my phone usage, my location, and my current activities as reported by http://RescueTime.com), my calendar, and a schedule of daily routines I'm trying to develop. Basically, it needs to execute bits of code based on time (specific moments, intervals, and recurrences) and specific conditions. Is there some sort of scheduling lib/framework I should be using for this?
20:18 < Kessler> how does one go about setting up `npm install somemodule -g` to work without sudo on linux systems?
20:18 < neeky> http://24.media.tumblr.com/tumblr_lxvls6DbiJ1qahhtxo1_1280.jpg
20:18 < squeeks> modifying permissions to where npm installs to (don't do that)
20:19 < squeeks> -g is a bad idea anyhow.
20:19 < purr> squeeks: What the $#@! is Parallelism, Anyhow? - Cprogramming.com <http://www.cprogramming.com/parallelism.html>
20:19 < squeeks> hva faen
20:19 < Kessler> why is -g a bad idea?
20:19 < neeky> Kessler, there is a way
20:19 < neeky> hang on a sec
20:20 < squeeks> Why do you need things installed globally?
20:20 < harrisonm> squeeks: so you can run them as cli applications
20:20 < squeeks> disk space is cheap and code is small, why do you need to keep one empirical copy of some package?
20:20 < squeeks> you can do that without global.
20:21 < Kessler> squeeks: thanks, lets put that discussion aside for a sec
20:21 < harrisonm> only if you install in the same place every time and add it to your path
20:21 < neeky> unknown packages installed as root? no thanks
20:22 < neeky> make an .npmrc in your home folder
20:23 < Kessler> neeky: that it ? :)
20:23 < neeky> no, theres more
20:24 < neeky> in that file, add: prefix = /home/YOU USER NAME HERE/npm
20:24 < Havvy> squeeks: You should say ''usually' there.
20:24 < neeky> create that folder: mkdir ~/npm
20:24 < Havvy> There are cases where installing globally and linking them in is needed.
20:24 < squeeks> Call in the next 15 minutes and we won't send you one, but TWO absolutely free of charge.
20:24 < squeeks> And if you're not satisfied, return them in 28 days and we'll give you a full refund.
20:24 < neeky> then add this to your path in ~/.profile
20:25 < neeky> Havvy, my way 100% eliminates that
20:25 < squeeks> Havvy: I'm listening...
20:25 < neeky> now, npm -g install BLAH installs it into your ~/npm
20:25 < neeky> look up a few lines
20:25 < Kessler> neeky: awesome - will try this , thanks!
20:25 < Havvy> neeky: I'd make that ~/node_modules
20:26 < neeky> its the ONLY way to do thinks like npm link without needing root
20:26 < neeky> prefix= can be whatever you want: /home/username/node_modules
20:26 < Havvy> squeeks: Basically, when it actually costs money per the byte or when your internet bandwidth is superslow.
20:26 < neeky> but thats a bit of a misnomer, because node will be there too
20:27 < Kessler> aaight, thanks :)
20:27 < squeeks> Havvy: I'm on tethered 2G with a bandwidth cap. I've previously done node deployments to hardware in some remote parts. Still not a problem.
20:27 < neeky> then, uninstall all global packages, and reinstall
20:28 < neeky> and they'll now be in ~/npm
20:28 < squeeks> If you find anything else in your barrel, let me know.
20:31 < ArgK> Hello Folks 
20:31 < ericelliott> hi
20:31 < ArgK> I am new to nodejs .When I tried to listen the same node which already in use Its raising exception in even .The server its not started 
20:32 < merpnderp> squeeks: how are you on IRC? I thought freenode blocked mobile ips?
20:32 < squeeks> it does a poor job of that, and I have a bouncer.
20:33 < merpnderp> I wonder why freenode blocks mobile ips. Is a pain when I'm traveling. 
20:33 < gbit86> ok so Upstart is just utterly failing me over here
20:33 < gbit86> I swear
20:38 < Samuel_Roldan> anyone has a preference: grunt-bg-shell vs grunt-shell  ?
20:42 < emilsedgh_> guys, i have a node application which serves mp3 files. my issue is that it leaks heavily. memory usage goes up and its never freed. any ideas how can i find issues?
20:43 < emilsedgh_> please note that its basically a readable pipe from the a file system ReadStream piped into response object
20:44 < Kessler> neeky: all worked fine except that when I launch I get ": No such file or directory" which I believe has something to do with the "#!/usr/bin/env node" statement at the head of the script exported via bin directive in package.json
20:44 < Kessler> emilsedgh_: can u put a gist link or something so we can have a look ?
20:45 < neeky> yeah, thats probably true
20:45 < emilsedgh_> Kessler: well, my code does some extra work which is irrelevant, im trying to come up with a simplified version. so yeah, give me a minute for that
20:45 < neeky> also, ~/npm needs to be in your path, via ~/.profile
20:46 < jesusabdullah> no9: It was fun, thanks for having me! I hope it was good for you guys too :)
20:47 < Kessler> neeky: I wne t with the ~/node_modules option, and I added ~/node_modules/bin to my path
20:47 < jesusabdullah> no9: You can tell I don't have a lot of confidence in my own abilities to put talks together :P
20:47 < Kessler> *went
20:53 < gbit86> WTF, my upstart is completely screwing me over
20:53 < gbit86> does it read the permission type of the conf files in /etc/init?
20:53 < gbit86> could that be screwing me over?
20:54 < Kessler> neeky: any thoughts ? :)
20:54 < gbit86> the permissions are the same nm
20:54 < gbit86> I am even more confused by this now
20:54 < emilsedgh_> Kessler:  http://paste.kde.org/784406
20:55 < gbit86> is there something I am supposed to register somewhere in linux before starting this new stanza/process/script
20:55 < gbit86> whatever you want to call it
20:55 < gbit86> something is seriously not adding up here at all
20:55 < emilsedgh_> Kessler: i tested it with the following command: ab -n 1000 -c 15 http://127.0.0.1:1337/  its now using more than 250MB of my memory, while all requests have ended
20:56 < gbit86> I am about to walk away.. I am going to explode. This should be pretty damn simple.
20:57 < Kessler> emilsedgh_: piping part looks ok, but I think you shouldnt be doing writeHead before piping, and you are missing content-length too ?
20:57 < emilsedgh_> Kessler: oh, yeah, in my actual code i do all that. i wrote this only to show the memory leaking problem
20:57 < Kessler> emilsedgh_: you can use setHeader instead
20:57 < Kessler> emilsedgh_: what happens if you use very small mp3s?
20:58 < emilsedgh_> Kessler: let me try.
21:01 < prettyrobots> mikeal1: Mikeal? How do I both stream a response form request and get the headers.
21:02 < emilsedgh_> Kessler: ok, this time i tried it with a small file (txt file, 12KB) and sent more requests (-n 100000 -c 1000) process jumped to 80MiB of memory usage very fast, bit didnt sairse firther. but now its not freed (but all connections are done)
21:02 < prettyrobots> I see callback or pipe, but no ohter way to do errors in the README.
21:02 < sungeo> hello
21:02 < prettyrobots> Okay. I see the `emit`s in the source. Nevermind.
21:03 < Kessler> emilsedgh_: sec, thinking
21:06 < john_____> Hello
21:08 < Kessler> emilsedgh_:  does this: http://paste.kde.org/784412/ have the same effect?
21:09 < emilsedgh_> Kessler: yes it does.
21:13 < Kessler> emilsedgh_:  try running with --expose-gc and then call gc() after res.end()
21:14 < Kessler> emilsedgh_: this is not a solution just a test
21:14 < emilsedgh_> ok Kessler, thanks.
21:14 < emilsedgh_> let me try.
21:14 < emilsedgh_> thanks a lot for your help :)
21:15 < werle> substack: wrote a little thing for shoe https://npmjs.org/package/middleshoe
21:17 < gimli_8bit> hey all, I'm kinda new to IRC, but I'm looking for some help with Node + Mocha + Heroku
21:17 < emilsedgh_> Kessler: actually, this time it consumed less memory (150MB)
21:18 < emilsedgh_> but seems still too much, doesnt it?
21:18 < Kessler> emilsedgh_: what happens if you remove it, run the original and wait a while before measuring memory ?
21:19 < emilsedgh_> Kessler: here is what happened, i ran the code with gc(), after the ab tests completed it used ~150M. i commented gc() line and tan again and its not 270M.
21:19 < emilsedgh_> s/tan/ran/
21:19 < emilsedgh_> s/not/now/
21:19 < emilsedgh_> too many typos!
21:19 < Samuel_Roldan> can i execute grunt-shell from a registerTask like this?   grunt.registerTask('watchSass',['shell:kss']);
21:20 < Samuel_Roldan> object looks like: shell : { kss : { command : 'ls' } }
21:20 < Kessler> emilsedgh_: if you run with commented gc() and without --expose-gc and wait a few minutes does the memory footprint change?
21:21 < emilsedgh_> Kessler: no.
21:22 < Kessler> emilsedgh_: last test - does this happen if you use another file with the same size?
21:23 < Kessler> like test file or something
21:23 < emilsedgh_> Kessler: you mean i should test with another mp3 file?
21:25 < emilsedgh_> Kessler: it happens with all sorts of files.
21:28 < Kessler> emilsedgh_: I exhausted my ideas :)
21:28 < Kessler> maybe I didn't say that right
21:28 < Kessler> but you understand :)
21:29 < emilsedgh_> ah
21:29 < emilsedgh_> Kessler: thanks a lot for your help
21:29 < emilsedgh_> i appreciate it :)
22:29 < sinclair|net> http://pastebin.com/sU6aFymA <-- i have a problem with this code, not sure what it is
22:30 < jaenie> hello...  I'm trying to find the socket.io library source that was imported by require('socket.io') ... but I cannot find the files anywhere.  npm says its prefix is /usr, but I see nothing with 'socket.io' in its name :-/
22:30 < jaenie> is there some way I can find this? get nodejs to print where it gets the library from?
22:31 < GaryOak_> jaenie: They're usually in a folder called npm
22:31 < jaenie> yep
22:31 < jaenie> nothing there... but when I run nodejs it finds the library O.o
22:31 < jaenie> well nothing called "socket.io" in its name
22:33 < mscdex> jaenie: try doing `npm ls`
22:33 < jaenie>  /usr/lib/nodejs/npm has nothing with "socket" in it,e xcept for ./npm/node_modules/fstream/lib/socket-reader.js
22:33 < jaenie> hmm k
22:33 < jaenie> ok weird, doesn't show socket.io \
22:34 < mscdex> did use `npm ls` from the directory you `npm install`ed it?
22:34 < jaenie> i installed it with npm, nodejs was not able to satisfy a requre("socket.io") before, and it was able to afterwards
22:34 < mscdex> did you use '-g' when installing?
22:34 < jaenie> mscdex, hmm no and no
22:34 < mscdex> jaenie: do `npm ls` from where you did `npm install socket.io`
22:35 < jaenie> hmm lets see if I can remember that :)
22:35 < jaenie> ah hoy
22:35 < jaenie> yar she blows
22:35 < GaryOak_> yeah npm installs relative to your current directory by default
22:35 < jaenie> thank you kind fellows :)
22:35 < jaenie> yeah i must've not installed it as root
22:36 < Technodrome> hey guys 
22:36 < jaenie> i was like find'ing all over /usr and /var
22:36 < paulkon> github's latest push made it a lot faster
22:36 < mscdex> jaenie: also if node finds another node_modules in any parent directories, it will install to those instead of ./node_modules
22:37 < mscdex> paulkon: no pun intended? ;-)
22:37 < jaenie> mscdex, good to know, thanks :)
22:37 < durango> Is there a good way of installing npm private packages locally? >.> basically I don't want my package.json to say "mymod ~> 0.0.1"  but i want it to say "mymod ~> file://path/to/npm" or something like that
22:38 < paulkon> no pun intended. Although i was hoping to bash on it for UI changes....
22:38 < mscdex> durango: that should work, although i don't think you need the 'file://' part
22:38 < squeeks> So really, no pun intended, but you wanted them all to win instead.
22:40 < tim_smart> Hmm I am running into a issue with express|connect.compress() - https://gist.github.com/tim-smart/9ea0be80b5836be5e027
22:41 < tim_smart> It be make me javascript funny
22:41 < tim_smart> ho ho ho
22:42 < durango> mscdex: i dont think itll save though hmm
22:42 < durango> if i had "mymod ~> /path/to/it" and did npm install mymod within that project
22:43 < tim_smart> Urgh, was using latest node master
22:43 < tim_smart> `nvm use 0.10` next time >.>
22:43 < mscdex> durango: it should work if it's a dependency and you just do `npm install`
22:45 <@MI6> joyent/libuv: Saúl Ibarra Corretgé master * f9e6029 : unix, windows: add extra fields to uv_stat_t - http://git.io/M_V2sw
22:45 < durango> itll try to go to /apth/to/it?
22:48 < doolinkr> Hm. I'm sending some form data to node but the params keep showing up empty. I've checked the request and it's fine...
22:48 < mscdex> durango: yes, it will look in whatever path you give for that dependency instead of in the npm registry
22:48 < doolinkr> Is there something I need to set for express to parse incoming data or something?
22:48 < durango> mscdex: nah it still looks for registry first strange
22:49 < mscdex> doolinkr: bodyParser middleware ?
22:49 < doolinkr> mscdex, smh...totally left that line out.
22:49 < doolinkr> Thanks.
22:50 < doolinkr> WOO.
22:50 < doolinkr> Ok
22:52 < sdrulea> Hey, I see this in my node server log: FATAL ERROR: CALL_AND_RETRY_0 Allocation failed - process out of memory
22:53 < sdrulea> Is it always bad to reference external scope variables in callbacks?
22:53 < sdrulea> Is this likely the cause?
22:56 < durango> mscdex: I literally just tried it.. let me see
22:56 < durango> "my-own-db": "/www/packages/my-own-db" <-- dependency and i get.. https://gist.github.com/durango/9224d7dd969b7d9961e7
22:57 < mscdex> durango: and you're just doing `npm install` in the directory of the package.json that contains that dependency line?
22:57 < durango> mscdex: no npm install my-own-db
22:57 < durango> let me try that tho
22:58 < mscdex> oh yeah, using `npm install my-own-db` won't work
22:58 < mscdex> if you want to do it that way, you'll want `npm install /www/packages/my-own-db`
22:59 < mscdex> but for dependencies, that line should work
23:00 < durango> nope same thing :/
23:00 < durango> retarded
23:00 < durango> :P
23:00 < mscdex> huh... works for me
23:00 < mscdex> what node version?
23:01 < durango> mscdex: v0.8.23
23:02 < sdrulea> What does everyone use for testing?
23:02 < sdrulea> mocha?
23:02 < durango> i use buster
23:02 < gimli_8bit> i actually just started using mocha
23:02 < munichlinux> sdrulea: testing what?
23:05 < durango> mscdex: what does ur json look like?
23:06 < durango> is it just "/path/to" ?
23:06 < durango> mscdex: does the package need to have private: true?
23:13 < mscdex> durango: hrmm, i thought you could do it with dependencies, maybe just from the command line :S
23:14 < durango> mscdex: yeah thats strange
23:14 < durango> https://www.irisnpm.com/ theres this though
23:14 < durango> but it still seems to be.. in the "cloud"
23:15 < mscdex> i guess the best you could do at the moment is to use a local git repo instead of a path *shrug*
23:15 < durango> i guess ill just need to setup a portable lcx with the modules :D
23:15 < durango> yeah
23:15 < durango> kidn of shitty cause then I have to open up ssh locally >.>
23:16 < durango> to replicate behavior on local / prod
23:18 < mscdex> durango: you might be able to do use `npm link /www/packages/my-own-db` to create a symlink
23:20 < mscdex> durango: FWIW there's an issue about this: https://github.com/isaacs/npm/issues/2442
23:37 < joeytwiddle_> How do you feel about the pattern doSomething(params, onSuccess, onError); ?  This lets me re-use my error handling function in lots of places, and avoid if (error) {...} at the start of every callback.  I am actually thinking of wrapping a bunch of Node-style functions (in Mongoose, and other libs) to provide this interface instead...
23:39 < joeytwiddle_> or perhaps i should just stop trying to handle every 'error' argument I am passed by Mongoose, and wait for 'doc is undefined' to be thrown
23:57 < shesek> joeytwiddle_, you can write a function that takes an error and success callback, and returns a function that delegates to one of them
23:58 < sinclair|net> hey all, big javascript question for people 
23:58 < shesek> to bridge between nodejs's single callback style and multiple callbacks (on success and on error)
23:58 < sinclair|net> how efficient is it to remove elements from the middle of an array?
23:59 < passcod> creationix: about js-git (looking at bountysource...) (is there a #js-git channel?), as you're envisioning it right now, could it accept a custom git backend (like libgit2)?
23:59 < shesek> joeytwiddle_, see https://gist.github.com/shesek/eff0c0abd31ad8457de8 (coffeescript)
23:59 < shesek> sinclair|net, you mean with delete or splice?
--- Log closed Fri Jun 28 00:00:04 2013
