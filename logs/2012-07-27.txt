--- Log opened Fri Jul 27 00:00:30 2012
00:01 <@thisandagain> felixge: sorry i don't have much more for you. looking back, i can't retrieve info on old assemblies that I know have succeeded either.
00:02 <@thisandagain> felixge: using the web interface I'm getting, "Error	Failed to load further assembly details"
00:05 < felixge> thisandagain: I mean do you have the assembly details of what you're sending us?
00:11 < felixge> thisandagain: can you try if it's working again for you now?
00:13 <@thisandagain> felixge: yup!
00:14 < felixge> thisandagain: ok, need to figure out what happened
00:14 <@thisandagain> felixge: sent you an example assembly response via email as well
00:14 < felixge> restarting the node processes fixed it
00:14 < felixge> thisandagain: thx
00:28 < iwoj> node seems to be having trouble reading files with $ in their names...
00:28 < iwoj> do special characters need to be escaped?
00:29 < augustl> in string literals you mean?
00:37 < augustl> iwoj: this works for me: node -e 'var fs = require("fs"); console.log(fs.readFileSync("foo$.txt"))'
00:43 < iwoj> i see what's happening. It's actually an exec call that's barfing.
00:45 < iwoj> is there a way to escape strings for unix command like calls?
01:36 -!- creationix changed the topic of #Node.js to: (node.js) Power to the JavaScripter.  The OS is your playground.
01:46 < iwoj> is there a way to escape strings for unix command like calls?
01:46 < iwoj> or a function that does this?
01:54 < tprice> has anyone used node-restify?
01:55 < tprice> how do i post a file with the client?
01:55 < tprice> can i even?
01:55 < mscdex> node.js rules!
01:57 < iwoj> how does StringDecoder work?
01:59 <@Nexxy> lol mscdex 
02:03 < samholmes> So you use the CLI to make a browserify bundle using a starting point that is a client-side script?
02:03 < TehShrike> Can anyone recommend a good tool for handling file uploads from a browser?
02:03 < samholmes> Must I make a bundle for every page on my site? And where are the bundle files stored?
02:03 <@Nexxy> samholmes, no; anywhere you want
02:04 < samholmes> so when you specify an -o parameter the path is relative to the working directory?
02:04 <@Nexxy> I think so
02:05 <@Nexxy> if you're talking about browserify cli
02:05 < samholmes> I'd have to call browserify in my public directory where I serve HTTP static files, or just specify the path /public/scripts/...
02:05 <@Nexxy> right
02:06 < tprice> has anyone used node-restify?
02:06 < tprice> how do i post a file with the client?
02:06 < alex4nder> I want a project named chode-testicles.
02:06 < alex4nder> someone get on that.
02:06 <@Nexxy> alex4nder, that's pretty immature and inappropriate
02:07 < alex4nder> Nexxy: fuck
02:07 < alex4nder> that really sucks.
02:07 < alex4nder> because in my head, it sounded hilarious.
02:07 < samholmes> Nexxy, it seems weird using the CLI to do all of this.
02:08 -!- alex4nder was kicked from #Node.js by Nexxy [alex4nder]
02:08 < samholmes> Does browserify still sport the API way?
02:09 < samholmes> ...the application interface/middleware?
02:09 <@Nexxy> samholmes, I wrapped browserify in my own little package
02:09 < samholmes> Nexxy: what do you mean?
02:11 <@Nexxy> 1 sec 
02:13 < mikeywaites> hey anyone no if its possible to set data attrs on tags in jade templates ? http://dpaste.com/776027/
02:14 < ccowan> Can't you set any arbitary attr you want with Jade?
02:14 < ccowan> p(data-main="foo")
02:15 < mikeywaites> ccowan:  see the comments
02:15 < mikeywaites> getting Unexpected identifier error
02:16 < ccowan> p(data-main="foo") Bar works at http://try-jade-and-stylus.herokuapp.com
02:18 < ccowan> mikeywaites: It should be: h2(class="",data-toggle="collapse",data-target="#description",data-parent="#accordian")
02:18 < ccowan> commas instead of spaces
02:19 < mikeywaites> ccowan:  legend thanks so much!
02:22 < ccowan> mikeywaites: No problem
02:22 <@jesusabdullah> wait who's a legend?
02:23 < catilac> oh man no braintree support for 0.8.x, i should have checked before upgrading
02:23 <@jesusabdullah> ooh nelly
02:26 < catilac> time to downgrade. i'd rather charge credit cards than have 0.8.3 hahaha
02:31 < mscdex> it's all about the latest and the greatest!
02:31 < mscdex> ... except when it comes to video game consoles
02:34 <@creationix> caolanm: ping
02:36 < catilac> mscdex: so true
02:51 < caolanm> creationix: pong
02:53 < catilac> https://github.com/braintree/braintree_node/pull/9#issuecomment-7296365 Hooray! Now I have to upgrade back -_-
03:00 < mscdex> catilac: good things come to those who wait
03:01 < catilac> mscdex: definitely, and luckily, i only had to wait 15~ minutes :)
03:04 < samholmes> Also, browserify uses an entry point to find all the required bundles, but how do I make specific entry points for each view?
03:04 < samholmes> For each page*
03:09 <@jesusabdullah> samholmes: multiple bundles
03:09 <@jesusabdullah> samholmes: or switch against the window's url
03:11 < samholmes> jesusabdullah: explain more about the switching thing?
03:12 < samholmes> I'm just trying to figure out a pretty simple set up where I wont have to run browserify CLI all the time when developing
03:12 <@jesusabdullah> samholmes: switch(window.location.pathname) { case '/foo/bar': whatever(); break; }
03:12 < samholmes> jesusabdullah: oh..do you mean make the entry point check the route and then require() the appropriate script based on the route?
03:13 <@jesusabdullah> samholmes: or use a client side router
03:13 <@jesusabdullah> samholmes: Yeah, that's one suggestion
03:13 < samholmes> that's a pretty legit idea
03:13 < Owner> op plz
03:13 < samholmes> But then, all my scripts throughout my entire site would be in one bundle, would this be a pretty large load?
03:13 <@jesusabdullah> samholmes: look at using director client-side
03:14 <@Owner> im having some serious trouble with scoping
03:14 <@jesusabdullah> samholmes: Yeah, you could alternately just make multiple bundles
03:14 <@Owner> if anyone can clean up some code so i can understand what im doing wrong in javascript land...that would be awesome lol
03:14 <@jesusabdullah> samholmes: browserify ./browser/page1.js -o ./public/page1.js
03:16 < samholmes> jesusabdullah: hmm, but then, I would need to use a array local called in my views called 'js' to be used in layout.ejs and I would need to populate this local with the bundle that is needed for a certain page..
03:16 < samholmes> -called
03:17 < samholmes> You know what, fuck my bandwidth, I'm just going to bundle everything for now and be done with it. Pre-optimization is a disorder. xP
03:17 <@Owner> if anyone can take a look at this and explain how i can do it with only one socket.io packet (one object)...that would be amazing
03:17 <@Owner> pastebin.com/caZ5fYRn
03:18 <@jesusabdullah> samholmes: indeed
03:18 <@Owner> i have tried many ways to get the other functions to write to the clientData object in and out of functions...it will not write to the object
03:32 < samholmes> Though..another concern is that I have to re-run the CLI on my entry point whenever adding client-side modules.
03:33 < samholmes> Maybe, I should use the browserify module API within my app instead of the CLI?
03:33 < samholmes> But, then I'd have to restart my app everytime I add files? :(
03:37 < timeturner> callback functions in node create an implicit closure right?
03:37 < timeturner> in js*
03:38 < samholmes> timeturner: implicit?
03:38 < samholmes> vs?
03:38 < timeturner> I mean just generally
03:39 < timeturner> like the callback function has to operate after the main function has been called
03:39 < timeturner> so that would mean that it creates a closure
03:39 < samholmes> callbacks are anonymous functions or lambdas,  and JS is a funciton scoped lang, so yes.
03:39 < timeturner> just wanted to confirm that I was thinking in the right direction
03:39 < timeturner> cool thanks
03:39 < samholmes> timeturner: wait
03:39 < samholmes> if you're talking about order of operations, that depends.
03:39 < timeturner> what do you mean
03:40 < timeturner> like in a normal callback function. http.createServer(function() { ... }); that kind of thing
03:40 < samholmes> A function, if called within another function, get's invoked immediately and the outer function would wait until the invocation is finished, then it'll continue with whatever is below invocation.
03:41 < timeturner> right
03:42 < samholmes> timeturner: if a function like http.createServer is _passed_ a function (callback) then it's up to the createServer function to decide whether that callback gets invoked immediately or asynchronously.
03:42 < timeturner> immediately would mean not a closure and async would mean closure?
03:42 < timeturner> essentially
03:43 < samholmes> Hmm.. AFAIK about the term "closure" it has to do more with variable scope and not so much order of operation. Or am I wrong about that?
03:43 <@creationix> closures have nothing to do with control-flow
03:44 <@creationix> but they are extremely useful in callbacks
03:44 < samholmes> as I thought. :P
03:44 <@creationix> C doesn't have closures, and as such, callbacks are hard in C
03:44 < timeturner> not having closures in C is a disappointment ^ :/
03:45 < timeturner> tbh callbacks look kind of ugly but they are very simple to do at the end of the day
03:45 <@creationix> C doesn't have "this" either
03:45 <@creationix> but that's "a good thing" :)
03:45 < samholmes> timeturner: setTimeout(cb, 1000); foo();  Foo will be invoked before cb is invoked, because cb is invoked after 1000ms which makes cb async
03:46 < addisonj> hrm... closures in C... having seen it in C11 I am not sure thats a good idea
03:46 <@creationix> samholmes: cb isn't async
03:46 <@creationix> it's setTimeout that's async
03:46 < samholmes> creationix: Ah, that's right. Sorry. :P
03:46 <@creationix> cb is just what gets called when setTimeout is done
03:47 <@Owner> javascript is weird
03:47 < samholmes> Owner: I love it! :D
03:47 <@creationix> "JavaScript, the weird parts"
03:47 < TehShrike> All right fellow asynchroknights, quick poll - promises or callbacks?
03:47 <@creationix> that should sell weird
03:47 < timeturner> so how would you define a closure? a piece of code that is running from within a function after that function as already finished executing and that piece of code that lives on has access to the variables within the function that finished executing?
03:47 < samholmes> "JavaScript, the private parts (closures)"
03:47 <@Owner> samholmes~# HELP ME
03:47 < ccowan> TehShrike: async
03:48 <@creationix> timeturner: a closure is a scope that closes over another scope
03:48 < samholmes> Owner: are you stuck in a shaft?
03:48 <@Owner> yes
03:48 < TehShrike> timeturner: creating a function just for the purpose of its scope
03:48 < samholmes> Owner.pullOutOfShaft()
03:48 <@creationix> timeturner: in JS, only functions have scope
03:48 <@creationix> and they inherit the scope of the function they were defined in
03:48 <@Owner> samholmes~# damnit i pasted the code man lol
03:49 < timeturner> isn't thart just lexical scope?
03:49 < timeturner> that*
03:49 <@creationix> timeturner: yes, same thing
03:49 <@Owner> trying to do all that crap in one client.emit
03:49 <@creationix> except the lexical scope lives on for the lifetime of the function
03:49 <@creationix> even it it's called from elsewhere
03:50 <@Owner> but the object cant be modified except once
03:50 <@Owner> im missing something obvious
03:50 <@creationix> timeturner: it's implemented as hidden scope objects that act like normal prototypal objects http://howtonode.org/object-graphs/closure.dot
03:50 < TehShrike> Owner: it's not for any object - it's just for the scope
03:51 <@Owner> yea i cant figure out scope at all
03:51 < TehShrike> A closure doesn't really give you an object, not in the way you're thinking, it just gives you a scope
03:51 < TehShrike> Every time you run a function, it creates a new scope
03:51 <@Owner> or i need to pass an  object to 3 functions and set values
03:51 < samholmes> Owner: You have other socket.io event handlers that try to access clientData?
03:51 < TehShrike> It creates a scope that can see all of the scopes above it, too
03:51 <@creationix> timeturner: I guess the code would make that diagram more useful http://howtonode.org/object-graphs/closure.js
03:51 <@Owner> samholmes~# no
03:52 <@Owner> its supposed to be one time use on that event
03:52 <@Owner> i want to send all data at once but i could never modify clientData 3 times no matter how m any convolutions i tried
03:52 < samholmes> convolutions?
03:53 <@Owner> how do i pass an extra object into the function scope
03:53 <@Owner> if i did that 3 times, i could use one emit
03:54 < samholmes> you pass objects to functions using arguments
03:55 <@Owner> an arbitrary number will work?
03:55 < samholmes> Owner: is you're problem persistency, that is, clientData is suppose to retain it's values you set to it?
03:55 <@Owner> i'd like to build one object in the client.on and emit it
03:56 < samholmes> Because, if it is, know that clientData gets garbage collected immediately after the requestCert callback is finished
03:56 <@Owner> but having big problems
03:57 <@Owner> no thats fine
03:57 < samholmes> Okay..
03:57 <@Owner> cert should exist only for that call
03:58 < samholmes> What exactly is your problem, is it with the fact that you're using three emits?
03:58 <@Owner> i want to make a certData at the end from once source object, then emit certData
03:58 <@Owner> yes
03:58 < samholmes> Ah, so you want to "respond" to the event after it's emitted on the clientside?
03:59 <@Owner> i had scoping issues with everything ive tried to edit clientData (which goes into certData)   the second two pem. calls cant edit the clientData object im trying to build
03:59 <@Owner> yeah that already works clientside
03:59 <@Owner> jst 3 emits
03:59 < samholmes> Owner: do you know about socket.io acknowledgements?
04:00 <@Owner> no
04:00 < samholmes> Essentially, they're callbacks passed along with the emit data, then the server can invoke them on the client-side.
04:00 <@Owner> i just want to emit one object instead of 3
04:01 < samholmes> Ah, acknowledgements are what you need then
04:01 <@Owner> not really
04:01 < samholmes> client.on('requestCert', function(data, cb)
04:01 < samholmes> then just invoke cb with the data you want?
04:01 <@Owner> samholmes~# https://aws.it.cx/
04:01 < samholmes> Or do you want an event for other clients?
04:02 <@Owner> clientside is fine, problem is serverside,  i just want to make one fat object from 3 pem. calls and send that
04:03 < samholmes> So, you want client.emit('data', fatObj); ?
04:03 <@Owner> its an efficiency thing
04:03 <@Owner> yes
04:03 <@Owner> see client code rsponds to 3 event types
04:03 <@Owner> one would be better
04:03 <@Owner> server sends 3
04:03 <@Owner> instead of one
04:03 < samholmes> I think I know what you want now
04:03 <@Owner> yes client.js
04:04 <@Owner> data.type
04:04 <@Owner> should only be one certData
04:04 < samholmes> Couldn't you create an fatObj object then modifiy it with then when all the operations are finished client.emit it?
04:04 <@Owner> ive been trying to
04:04 <@Owner> i dont know how to pass it
04:04 <@Owner> to the callbacks
04:04 <@Owner> so they can edit it...
04:04 < samholmes> Hmm.. How do you want this object to look like?
04:05 <@Owner> obj.publicKey
04:05 <@Owner> obj.certificate
04:05 < samholmes> Owner: optimally, you wouldn't pass it, you'd declare it in a scope that all the callbacks share, (the outer scope);
04:05 <@Owner> yeah, i have tried taht i thought, how do i do that
04:07 < timeturner> using closures seems like it would be a bad idea for memory usage
04:08 < TehShrike> Ryan Dahl is crazy! http://2012.nodeconf.com/theatre/ryan_dahl.html
04:08 < samholmes> Owner: http://pastebin.com/BSFHU6xd
04:08 <@Owner> samholmes~# garbage collection has been an issue indeed
04:09 < samholmes> Is that something you're looking to do?
04:09 < circlicious> hi
04:09 < circlicious> have you seen these meteor thingie?
04:10 <@Owner> samholmes~# looks like it might help, ill give it a shot, ideally var certData = {  would be moved
04:10 < samholmes> Owner: removed?
04:10 <@Owner> certData was supposed to be fatObj
04:10 < samholmes> Owner: then use certData instead.
04:10 < samholmes> I didn't know what you were trying to do with certData. xP
04:10 <@Owner> ok thanks ill try this   =]
04:11 < samholmes> Owner: Yw.
04:12 < samholmes> Owner: you understand how it works yest?
04:12 <@Owner> samholmes~# well really i meant i was trying to make clientData
04:12 < samholmes> yes
04:12 <@Owner> i make clientDat FatObj then do the certData switch...then optimize that if it works
04:15 < samholmes> TehShrike: O.o And to think we're all using code he built..
04:16 < TehShrike> lol, I know
04:16 < TehShrike> The guy's nuts
04:17 < samholmes> TehShrike: Sometimes that's what it takes to make a work of pure genius. ;P
04:17 < TehShrike> Apparently
04:21 < circlicious> Batman
04:25 -!- Topic for #node.js: (node.js) Power to the JavaScripter.  The OS is your playground.
04:25 -!- Topic set by creationix [creationix@2600:3c00::f03c:91ff:fe96:92d5] [Fri Jul 27 01:36:08 2012]
04:25 <@isaacs> creationix: nice title :)
04:26 <@Nexxy> I keep wanting to add JIFASNIF to the end
04:28 <@jesusabdullah> what's a jifasnif?
04:29 <@jesusabdullah> oh
04:29 <@jesusabdullah> javascript is fun and so node is fun
04:29 <@jesusabdullah> ?
04:29 <@Nexxy> WERE YOU EVEN THERE, MAN!?
04:29 < circlicious> ?
04:30 <@chilts> lol
04:30 <@chilts> that's kinda like Perl
04:30 <@chilts> 's JAPH but better
04:31 < circlicious> but tell me, whats this meteor thingie, is it going to replace everything in a year or so ?
04:31 <@Nexxy> LOL
04:31 <@Nexxy> if it does I quit computers
04:32 < circlicious> it also got $11.2M funding now, i hear it makes web app dev fast and easy and everything becomes realtime.
04:32 < circlicious> i wonder if i will have to rewrite all my apps in a year or so to catch up with the industry :S
04:32 <@Nexxy> uh huh
04:33 <@Nexxy> circlicious, you realize meteor is a Node.js product, yes?
04:33 < circlicious> yes
04:33 <@Nexxy> so what would you need to replace?
04:33 < circlicious> i heard that too
04:33 <@Nexxy> it's already node
04:33 <@Nexxy> it's just a bastardized environment
04:33 <@Nexxy> for it...
04:34 < circlicious> i dont know, it must be having its onw syntaxc and thing for the realtime awesomeness and what not
04:34 <@Nexxy> "awesomeness"
04:34 <@Nexxy> it's just done for you
04:34 < circlicious> i just saw a video where they wrote a template and a blogging engine was made that stores data client side and server side, but voideos can be misleading so i aks here
04:34 <@Nexxy> circlicious, it's just one of many options that use node
04:34 < circlicious> people jus ttalk too much about it these days
04:35 <@Nexxy> it's all still javascript
04:35 < circlicious> hm
04:35 <@Nexxy> so don't worry
04:35 < circlicious> ok :)
04:35 <@Nexxy> just keep swimming!
04:35 < circlicious> but i am also worried about my php code base, lol :D
04:35 <@Nexxy> that is something worth worrying about
04:35 < circlicious> ;D
04:35 <@Nexxy> :P
04:36 < circlicious> i dont know, now i feel like those people working on "new" php frameworks could be actually wasting time, after all these meteor , node, evented models, realtime models hypes
04:37 <@jesusabdullah> you're getting sucked in by hype circlicious
04:37 <@jesusabdullah> make your own judgements
04:37 <@jesusabdullah> imo meteor isn't going to go anywhere
04:37 < circlicious> then why did someone invest 11 million dollars lol
04:38 <@jesusabdullah> because they're dipshits? idk
04:38 < circlicious> ;D
04:38 < circlicious> can you find me 1 such dipshit plzzz?
04:38 <@jesusabdullah> any one of the people that invested in meteor.
04:38 <@jesusabdullah> Done.
04:38 < circlicious> ya i think he's the same guy who invested 200million in github
04:38 <@jesusabdullah> doesn't mean they did it for the right reason.
04:39 < circlicious> tbh, i have some good ideas, but no one would ibnvest in me :/
04:39 < samholmes> Is this old API http://substack.net/posts/24ab8c ?
04:39 < circlicious> i am just confused nothing else, too much hackernews discussions too :/
04:39 < circlicious> samholmes: not really
04:40 < samholmes> eh..what's that mean?
04:40 < circlicious> http://substack.net/images/browserify/maysbot.png - lol
04:40 < circlicious> http://substack.net/images/browserify/browserify.png :D
04:40 < circlicious> i liek it
04:40 < circlicious> lovely
04:42 < samholmes> hehe
04:43 <@jesusabdullah> samholmes: Yes
04:44 <@jesusabdullah> samholmes: the api hasn't changed *much* but it *has* changed. Also, you're encouraged to use the cli tool instead of using browserify programmatically.
04:44 < samholmes> jesusabdullah: to it being old?
04:44 <@jesusabdullah> yes.
04:44 < samholmes> jesusabdullah: why would I want the CLI?
04:44 <@jesusabdullah> because.
04:44 < Domenic> samholmes: browserify works great when used programmatically. https://github.com/substack/node-browserify/blob/master/doc/methods.markdown
04:44 < samholmes> I'd have to use the CLI everytime I add a script to my client-side code base
04:44 <@jesusabdullah> samholmes: Yes.
04:44 < samholmes> jesusabdullah: wtf would I want that? :\
04:44 <@jesusabdullah> samholmes: You don't want to have it rebuilding that dynamically.
04:45 <@jesusabdullah> You want it all cached.
04:45 < samholmes> Hmm
04:45 < Domenic> jesusabdullah: the API caches
04:45 < samholmes> Maybe in production.
04:45 <@jesusabdullah> Build steps are common in code anyway.
04:45 < samholmes> But not during dev
04:45 < samholmes> I don't like build steps
04:45 < samholmes> haha
04:45 < samholmes> Cause I'm crazy like that
04:45 < samholmes> anyway, why doesn't browserify have some caching mechinism?
04:45 <@jesusabdullah> it does
04:45 < Domenic> It does, and it's worked ever since https://github.com/substack/node-deputy/pull/2
04:45 < samholmes> I mean programmatically
04:45 <@jesusabdullah> it does
04:46 < Domenic> The caching works when used programmatically
04:46 < samholmes> So, then what are you talking about it being rebuilt dynamically?
04:46 <@jesusabdullah> every time you change your scripts it still has to do some minimal amount of code building
04:46 <@jesusabdullah> as it rebuilds a bunch of disparate chunks of code into a bundle
04:46 <@jesusabdullah> it's a significant amount of work.
04:47 < samholmes> jesusabdullah: which scripts, client-side or server-side?
04:47 <@jesusabdullah> what
04:47 <@jesusabdullah> read the project's readme
04:48 <@jesusabdullah> that'll give you a better idea of what browserify is about
04:48 <@jesusabdullah> either way you're typically using it as a build step. I don't even know if it supports the middleware anymore.
04:48 < samholmes> I've read it, it doesn't show a programmatic API. :\
04:48 <@jesusabdullah> Yes, because it's recommended you use it as a cli tool for building.
04:48 < samholmes> It seems to be supporting the middleware.
04:48 <@jesusabdullah> Well, if that's what you want
04:49 <@jesusabdullah> but I'm telling you, it's better to use it as recommended
04:49 < samholmes> Hmm.. Couldn't I just bundle my scripts after I'm done with a development step?
04:49 < Domenic> During development the middleware is possibly fast enough.
04:49 < Domenic> I dunno, experiment, it could take like 5 seconds on a big-ish project, which I personally wouldn't be willing to wait when pressing F5
04:49 < samholmes> The reason I don't use the CLI is because I don't want to have to run the CLI everytime I make incremental changes while developing
04:50 < Domenic> You can use the CLI with --watch I think?
04:50 <@wookiehangover> http://jifasnif.jit.su/
04:50 <@Nexxy> my client-side bundles are remade every time a source file changes
04:50 <@Nexxy> but last I checked the --watch was broken on browserify
04:50 <@jesusabdullah> samholmes: You have to restart the program anyway
04:50 <@Nexxy> I used the regular fs watch
04:51 < samholmes> jesusabdullah: I never had to restart the program when making client-side script changes (without browserify)
04:51 <@jesusabdullah> Yeah samholmes look at nexxy's thing
04:51 <@Nexxy> oh
04:51 <@Nexxy> umm
04:51 <@jesusabdullah> samholmes: do you understand what browserify does
04:51 <@Nexxy> https://github.com/nexxy/nice-package
04:51 <@Nexxy> that does rebundling automagically
04:51 <@Nexxy> and can even hotload the client
04:51 < Domenic> There've been a number of fixes to browserify and I think watch was one of them
04:51 <@jesusabdullah> watch may have been
04:51 < Domenic> But even if it isn't, just hack on it until it works and then submit a PR
04:51 <@Nexxy> but I haven't maintained that at all
04:51 <@jesusabdullah> it wouldn't be the worst thing
04:52 <@Nexxy> so idk if it works with 0.8.x
04:52 < samholmes> jesusabdullah: yeah, takes my shit puts it in one bigger bundled shit and then lets me use that bundled shit to get the shit in the client-side with the nice smells of require.
04:52 <@jesusabdullah> Yes. So why would you expect browserify to rebuild the bundle anytime changes are made, just because your static file server loads new files every time
04:52 <@jesusabdullah> they're unrelated
04:53 < Domenic> I don't think he's *expecting* that, he's just trying to figure out how to achieve that.
04:53 < samholmes> Well, if app.use middleware is invoked on every request, I would assume browserify would check my static files for changes and update the bundle accordingly.
04:54 < Domenic> No it has no concept of updating or checking for changes
04:54 <@jesusabdullah> I don't think it does.
04:54 < Domenic> It would rebuild the bundle every time.
04:54 < Domenic> Which might be fine in dev, not sure, depends on how big the app is and how high your tolerance for slow is.
04:54 < samholmes> Domenic: jesusabdullah said that browserify cached the bundle.
04:54 < Domenic> samholmes: it doesn't cache the bundle; it caches AST traversals
04:55 < samholmes> Abstract syntax tree?
04:55 <@jesusabdullah> yes. It still has to rebuild a bundle. It caches so it can do subsequent builds faster
04:55 < Domenic> Yeah, it parses and crawls the AST to find `require`s, and that's slow, so it caches the parsing results.
04:55 <@jesusabdullah> It's a full on build step, which is why you should treat it like one.
04:55 < samholmes> one build?
04:56 < Domenic> (AST caching is great because e.g. parsing jQuery takes ~5 seconds even though it doesn't use `require` at all.)
04:56 < Domenic> one build what?
04:56 < samholmes> Domenic: how's that create?
04:56 < samholmes> Domenic: I was wondering if jesusabdullah meant "one build" instead of "on build"
04:56 < Domenic> samholmes: I am really not understanding any of your recent sentences.
04:56 < samholmes> how's that great*
04:57 <@jesusabdullah> I meant full-on
04:57 < samholmes> jesusabdullah: I see.
04:57 < Domenic> samholmes: the caching is great because then you avoid those 5 seconds on any subsequent builds, unless jquery.js changes.
04:58 <@jesusabdullah> What I do is set "scripts": { "install": "browserify ./lib/browser/index.js -o ./public/bundle.js", "start": "node .bin/server.js" }
04:58 <@jesusabdullah> and then I do npm install && npm start
04:58 < samholmes> Domenic: in other words, only the `require`s tree is cached and all the files in this tree are checked for changes?
04:59 < samholmes> jesusabdullah: were do you put the JSON?
04:59 <@jesusabdullah> package.json
04:59 < samholmes> So you make your whole app a npm package?
04:59 <@jesusabdullah> Hell yeah I do
04:59 <@jesusabdullah> then you can do 'jitsu deploy' and have it work too
05:00 < Domenic> Yeah apps are definitely npm packages. Just ones you never publish to npm. package.json is super useful.
05:00 < samholmes> I don't know exactly what npm install does to a package that isn't in the npm db
05:00 < Domenic> it fails
05:00 <@jesusabdullah> it installs local dependencies
05:00 < Domenic> oh right i see what you meant
05:01 < samholmes> Ah
05:01 <@jesusabdullah> if you run 'npm install' inside the app's root folder
05:01 <@zivester> are multi var declarations frowned upon... i.e. var a = 1, b = 2, c = 3; ... split onto lines
05:01 <@wookiehangover> zivester: do what you feel, man
05:01 < samholmes> jesusabdullah: so it just scans package.json and looks for dependencies and "scripts"?
05:02 < AAA_awright> Is it just me, or are there 461 operators in this channel?
05:02 <@zivester> i don't *feel* anything, lol
05:02 <@jesusabdullah> zivester: Depends on whose style guide you follow.
05:02 <@wookiehangover> zivester: https://dl.dropbox.com/u/4431744/your-opinion-man.jpeg
05:03 <@jesusabdullah> zivester: Most important thing is consistency, but if you want you can either follow node's style guide, npm's style guide, nodejitsu's style guide, substack's style guide, mikeal's style guide, etc., etc
05:03 <@jesusabdullah> not that there are necessarily style guides here, but you can adopt aspects of these styles you like
05:03 <@wookiehangover>  /kickban AAA_awright
05:03 <@jesusabdullah> the important thing is internal consistency
05:03 < AAA_awright> ... Like, did I miss something?
05:03 < AAA_awright> oorrrrrrr?
05:04 <@wookiehangover> there, now we're on equal footing here
05:04 <@AAA_awright> So how's everyone doing tonight!
05:04 < jesusabdullah> op plz
05:04 <@jesusabdullah> That's how that works AAA_awright 
05:04 <@zivester> guess I'll just use Felix's style guide... google search can't be wrong
05:04 <@jesusabdullah> Felix's is a good one
05:04 <@AAA_awright> I see
05:04 <@jesusabdullah> Just look at other peoples' code zivester 
05:04 <@jesusabdullah> and you'll get an idea of what people like
05:05 <@AAA_awright> So has anyone been following the mailing list?
05:05 <@jesusabdullah> vaguely
05:05 <@jesusabdullah> why
05:05 < Domenic> samholmes: here's a real-world package.json for our Node app at work. https://gist.github.com/3186257
05:05 <@AAA_awright> Issacs posted this unusual quote: "if you require('http') it should Just Work by fetching the http module that you need to use."
05:05 <@AAA_awright> I mean, what?
05:06 < timoxley> AAA_awright what do you mean what
05:06 < samholmes> Domenic: Version numbers and such aren't really relavent to my app
05:06 <@AAA_awright> We're talking about pulling code, and not just any code, but *all* the dependencies, at run-time over the Internet?
05:06 < samholmes> relevant*
05:06 <@jesusabdullah> AAA_awright: Context
05:06 < samholmes> Also, I don't have a repo.
05:06 <@jesusabdullah> ?
05:06 <@jesusabdullah> samholmes: They're free
05:07 <@jesusabdullah> learn2git
05:07 <@AAA_awright> https://groups.google.com/d/msg/nodejs-dev/6nc7MY37oMU/VAxXMPkr8bAJ
05:07 < samholmes> jesusabdullah: my project isn't open sorce
05:07 < samholmes> source*
05:07 < Domenic> samholmes: you should still be using source control!!!
05:07 < timoxley> samholmes closed source repos are free
05:07 < samholmes> timoxley: Not on github
05:07 < Domenic> samholmes: and you should be tagging versions that you deploy
05:08 < Domenic> samholmes: thus version numbers, even if they are just 1.0.20120727
05:08 < samholmes> Domenic: I was eventually going to use git for deployment, but for now I'm just SFTPing up
05:08 <@jesusabdullah> samholmes: basic github for closed source is cheap
05:09 <@jesusabdullah> samholmes: You can also use it without an external repo
05:09 <@jesusabdullah> samholmes: ie, local only to your filesystem
05:09 < samholmes> jesusabdullah: why do I need it right now? :\
05:09 <@jesusabdullah> samholmes: also, gitolite is not hard to run
05:09 < timoxley> samholmes bitbucket decent for for closed source, or you just set up your own server
05:09 < samholmes> I was just thinking of local repos
05:09 <@jesusabdullah> samholmes: version control is one of the most important skills you can have as a programmer.
05:09 < samholmes> maybe a remote on the cloud
05:09 <@kuja> fyi bitbucket offers free private reops
05:09 < samholmes> I know how to use git, just haven't been using it on my site project
05:10 <@jesusabdullah> you should.
05:10 < Domenic> Um are you using version control at all?
05:10 <@jesusabdullah> yes, *any* VC
05:10 <@AAA_awright> Even tarballs and patches?
05:10 < Domenic> I feel like this is the time for an image macro.
05:10 <@AAA_awright> Domenic: At least it's not an implementation of the Java singleton pattern
05:10 <@wookiehangover> https://dl.dropbox.com/u/4431744/Coding_Drunk.jpg
05:11 < samholmes> I'm not using any VC atm
05:11 < samholmes> Just coding from scratch
05:11 <@jesusabdullah> *shudder8
05:11 <@jesusabdullah> *shudder*
05:11 < samholmes> haha
05:11 <@jesusabdullah> no more advice for you
05:11 < Domenic> aaaaaaaaaaaaaaaaaaaaaaahhh
05:11 < Domenic> ^ the sound of me running screaming from the room
05:12 < samholmes> look, I could set up a remote on my VPS then pull from it if that makes you happy.
05:12 <@jesusabdullah> no you don't have to pull anywhere
05:12 < Domenic> version control has nothing to do with remote computers
05:12 <@jesusabdullah> that's what I've been trying to say
05:12 < samholmes> Pull, then uses it locally
05:12 <@jesusabdullah> git init && git add ./ && git commit -m 'First commit'
05:12 < samholmes> then push to deploy
05:12 <@jesusabdullah> no, no pushing or pulling
05:12 < Domenic> Deployment and pushing to a central repository are entirely separate concepts
05:12 < samholmes> or I can do it like you said
05:12 < Domenic> It is unfortunate that heroku conflates them and confuses people
05:12 < samholmes> which is just the same backwards
05:13 < Domenic> You never need to push if you are not collaborating with a team
05:13 < samholmes> eh, the central repo doesn't need to be the deployment point, this I know
05:13 <@jesusabdullah> no, there doesn't need to be a central repo
05:13 <@jesusabdullah> that's the part you're missing
05:13 < timoxley> Domenic I usually only push sinlge user/private repos for backup's sake
05:14 <@jesusabdullah> any and all remote repos are entirely optional
05:14 < samholmes> jesusabdullah: I know this.
05:14 < samholmes> jesusabdullah: this I know too
05:14 <@jesusabdullah> do you?
05:14 < samholmes> but I would like the VPS to be a remote, so I can use git to deploy my changes instead of SFTP
05:14 < samholmes> jesusabdullah: of course I do
05:14 < Domenic> timoxley: yeah that's sane, i'm happy with backup to dropbox though, *shrug*
05:14 < samholmes> git is decentralized, so it can just be one repo on my dumbass computer, if I wanted
05:15 < Domenic> Man this thing from isaacs is pretty damn interesting, can we talk about that instead?
05:15 <@wookiehangover> Domenic: do tell
05:15 < samholmes> But of course, I'm managing two servers, one local dev, and one VPS production.
05:15 < samholmes> So, a remote for VPS would be optimum, no?
05:15 < Domenic> AAA_awright linked to it earlier, https://groups.google.com/forum/#!msg/nodejs-dev/6nc7MY37oMU/VAxXMPkr8bAJ
05:16 <@AAA_awright> Domenic: What's your thoughts
05:16 <@AAA_awright> I like the idea of re-vamping npm but if we're talking about getting rid of http, then npm should be out of core too. If anything, npm needs to go *first*
05:16 <@AAA_awright> And pulling code remotely? That sounds wayyyy out of scope
05:16 < samholmes> jesusabdullah: also, what do I set as the repo in the package.json if I don't have a remote repo?
05:16 < Domenic> npm isn't really core, it's just bundled into the installer
05:16 < npmbro> Domenic: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20isn
05:16 < timoxley> Domenic thanks for link. that IS interesting.
05:17 <@AAA_awright> It's in the core repository, that counts as core, unless there's some other definition
05:17 <@jesusabdullah> samholmes: "repo" is optional
05:17 < Domenic> Um, I thought it was in isaacs/npm, not joyent/node
05:17 < samholmes> jesusabdullah: ah goodie
05:17 <@AAA_awright> It is, but the fact it's checked in, and it's not a dependncy for anything, isn't that a bit odd?
05:18 <@AAA_awright> Domenic: What strikes you most about it
05:18 <@AAA_awright> The post
05:18 < samholmes> jesusabdullah: is there a way to generate the dependencies for my package.json using the node_modules folder?
05:18 < samholmes> directory*
05:19 < Domenic> Ah, I see, in the deps folder. I dunno, yeah, I guess that's a bit wierd, but it's probably just because they haven't separated out the stuff that builds distributable packages into a separate repo from node itself.
05:19 < Domenic> AAA_awright: well I think it's cool to move http out of core. But that remote module stuff is crazy, I feel like I can't be understanding it right.
05:19 <@AAA_awright> I can't see any interpertation of that which makes sense
05:19 <@AAA_awright> Where is issacs anyways he posted to the mailing list 10 mins ago
05:19 < Domenic> samholmes: ls -la node_modules
05:20 < samholmes> Domenic: then just copy the results to the json file? :\
05:20 < Domenic> samholmes: yup.
05:20 < samholmes> formating it of course.
05:20 < Domenic> samholmes: then stop installing things manually in the future, put them in package.json first and run npm install
05:20 < samholmes> What I meant was a way to just not worry about the package.json file
05:20 <@AAA_awright> Use git submodules like I do
05:20 < Domenic> package.json is the heart of your app, you should worry about it and not about node_modules
05:21 < samholmes> Domenic: npm install foobar is easier than editing the package file, checking the latest version and all that.
05:21 <@wookiehangover> samholmes: or better yet, run `npm install yourDep --save`
05:21 <@wookiehangover> also, `--save-dev`
05:21 < samholmes> wookiehangover: hmm. Is there a way to do this using the existing node_modules?
05:22 <@wookiehangover> no afaik
05:22 <@wookiehangover> but I do know that this is a live webcam of bears catching salmon http://explore.org/#!/live-cams/player/brown-bear-salmon-cam-brooks-falls
05:22 < samholmes> meh, fuck it. I dont' need a package.json yet. I'll work on that once I switch from VPS to PaaS
05:24 <@wookiehangover> samholmes: for f in node_modules/*; do npm install $f --save; done;
05:24 <@wookiehangover> dont be dumb
05:24 < samholmes> So, I'm going to use the CLI for browserify, but first I'm going to mess around with the API if that's okay. xP So, quick question. Where is browserify.js stored on the server when using the API, or is it just cached in memory?
05:25 < Domenic> Anyone want to write him a bash line to pipe ls to npm install just so we can get this over with?
05:25 < samholmes> wookiehangover: I don't know bash all too well. Not dumb, just ignorant.
05:25 <@wookiehangover> oh, the dumb part wasn't about you not knowing bash
05:25 < Domenic> oh shit i am dumb, that's exactly what wookiehangover did
05:26 <@wookiehangover> it was the refusal do use package.json
05:26 <@wookiehangover> Domenic: :D
05:26 < Domenic> it just looked so much like english i got confused >_<
05:26 < samholmes> Also, I'm using microshit Windoze locally, so any powershell guys?
05:27 < Domenic> Git bash
05:27 < Domenic> FTW
05:27 < samholmes> Domenic: link?
05:27 <@wookiehangover> samholmes: https://dl.dropbox.com/u/4431744/no-way.gif
05:27 < Domenic> samholmes: it comes with git for windows
05:27 < samholmes> wookiehangover: nice ;p
05:28 < samholmes> Domenic: Ah, I think I have that. xP
05:28 < EhevuTov> git bash is a MinGW variance isn't it?
05:28 < samholmes> EhevuTov: I think so
05:28 < Domenic> yeah i think so
05:28 < EhevuTov> I just don't think it supports the MinGW packages
05:28 < samholmes> Domenic: git bash doesn't have man? :S
05:28 < EhevuTov> that's what I mean
05:29 < samholmes> EhevuTov: Should I get MinGW for the full bash experience?
05:29 < EhevuTov> maybe
05:29 < Domenic> git bash has been enough for us
05:30 < EhevuTov> samholmes, are you the guy who wrote the dep module?
05:30 < samholmes> EhevuTov: nope.
05:30 < samholmes> EhevuTov: that's the other
05:30 < samholmes> guy
05:31 < EhevuTov> samholmes, the Github Windows client installs a Powershell environment that might work, too, if you're having issues
05:31 < samholmes> EhevuTov: that's the one I have actually
05:31 < Domenic> Ugh GitHub for Windows, what a piece of shit >_<
05:31 < EhevuTov> 'man' works for me in that
05:31 < samholmes> Domenic:  I like it actually. Never had problems with it
05:32 < EhevuTov> Domenic, we're talking about the CLI environment for it :-)
05:32 < EhevuTov> I don't use the GUI really
05:32 < samholmes> EhevuTov: I get sh.exe": man: command not found
05:32 < EhevuTov> samholmes, have you upgraded or reinstalled it recently? I wonder if your env variables are just messed up
05:32 < samholmes> EhevuTov: I use the GUI for simple stuff, but then open a bash when I need too.
05:32 < EhevuTov> samholmes, yeah, that's what I get from the Git Bash
05:33 < Domenic> samholmes: yeah I can admit it was probably just me. But it crashed so much, it switched my repos to HTTPS, it didn't have a great rebase GUI or a nice commit graph... hate hate hate.
05:33 < EhevuTov> The Github Powershell works fine though
05:33 < EhevuTov> Domenic, wow, thanks for the heads up
05:33 < EhevuTov> Domenic, actually, was this recently? I think that HTTPS switch might be because there SSH proxies were messing up or whatever
05:33 < samholmes> Domenic: maybe future versions will solve this?
05:34 < samholmes> EhevuTov: I don't know why man is not working, do I need to update or something?
05:34 < EhevuTov> samholmes, I would. If not, install vanilla MinGW
05:34 < Domenic> I dunno, I tried it for a week after it came out, and gave up and went back to Git Extensions.
05:35 < Domenic> It could be better now, I dunno, nobody from GitHub has tweeted a changelog or anything.
05:35 < EhevuTov> but with vanilla MinGW, you'll have to set your env variables, particularly your PATH, to find your git stuff
05:35 < samholmes> a mac would solve all this windows bullshit
05:35 < EhevuTov> samholmes, do you have to develop for Windows?
05:35  * samholmes is stupid, opened Git Bash, not Git Shell
05:36 < EhevuTov> if you don't have to, I'd just SSh into a server and program that way
05:36 < samholmes> EhevuTov: Windows is the only environment I have aside from my linux VPS
05:36 < samholmes> It's easier to write locally and not upload every change
05:36 < EhevuTov> samholmes, heck I even have a fBSD VM instance installed on my Win machine at work and I SSH into that instead
05:37 < samholmes> VMs run like shit on my shitty laptop
05:37 < samholmes> I'm saving for my mac tybm
05:37 < samholmes> tyvm*
05:38 < samholmes> So git shell is full bash?
05:42 < samholmes> node-inspector & gives me an error. :\
05:47 < samholmes> Bash sucks on windows hard. `node-inpsector &` just fails on git shell
05:47 < samholmes> How could I fork a process in this weird mutant version of bash?
05:47 <@jesusabdullah> You could install a real bash prompt
05:47 <@jesusabdullah> instead of one only intended to support git
05:49 < samholmes> jesusabdullah: like minGW?
05:50 < samholmes> Or would you suggest cygwin?
05:50 < samholmes> But cygwin doesn't work with newer version of node I don't think.
05:50 <@jesusabdullah> I mean
05:51 <@jesusabdullah> you'd want to run node natively
05:52 < samholmes> Cygwin crosses over to native stuff?
05:53 < raphie> hey, anybody know of a good library to output audio received as a stream?
05:53 < raphie> as in, play an audio file as it's uploaded
06:00 < samholmes> Does anyone here use cygwin and node still?
06:01 <@jesusabdullah> no
06:01 <@jesusabdullah> raphie: I think mplayer and other cli music players can do that
06:01 < raphie> well hey jesusabdullah, fancy seeing you here
06:02 < raphie> I'm working on making Mountain Lion dictation available from the web :D
06:02 <@jesusabdullah> word
06:02 <@jesusabdullah> look into icecast then
06:03 < raphie> well, I wanna do it in node
06:03 <@wookiehangover> raphie: +1
06:03 < raphie> already I have dictation working with siri();
06:04 < raphie> I'm thinking for now I'll just have file upload via express and then use marak's play.js
06:07 < EhevuTov> what does everyone use for running GYP on their macs? Homebrew doesn't seem to have GYP. Everyone just manually install?
06:08 < EhevuTov> or is node-gyp a full fledged gyp compiler...
06:11 < samholmes> How do I uninstall node?
06:11 <@jesusabdullah> I think node-gyp handles it
06:11 <@jesusabdullah> samholmes: control panel, add/remove programs or whatever the fuck
06:11 <@jesusabdullah> samholmes: it's in there
06:11 < samholmes> jesusabdullah: I should have asked, how do you uninstall it in cygwin. xP
06:12 < samholmes> I want to see if I uninstall it in cygwin if it'll fallback to the one installed on windows.
06:13 <@jesusabdullah> samholmes: noooo idea
06:14 < samholmes> damn
06:26 < EhevuTov> jesusabdullah, yeah, I can't tell if it's just for add ons though. I'm wanting to use gyp for a non-node project
06:29 <@deoxxa> EhevuTov: i'm using node-gyp for a non-node project
06:29 <@deoxxa> i just run it with node-gyp
06:29 <@deoxxa> can't think of any reason it wouldn't work with regular gyp though
06:30 < EhevuTov> deoxxa, awesome. Thanks! Yeah, I'd think it would might be an extension too
06:30 <@jesusabdullah> deoxxa: I noticed you've written a number of bittorrent-related modules on npm
06:31 <@jesusabdullah> deoxxa: Are you going to make a bittorrent client y/n
06:33 < EhevuTov> deoxxa, do you run gyp before you make a commit, or do you let your users run gyp and then compile
06:37 < EhevuTov> jesusabdullah, you scared him off. Nice work *sheesh*
06:37 <@jesusabdullah> :(
06:39 < JoeStarter> Hello everyone 
06:40 < JoeStarter> I have a question that might be so simple for you guys. 
06:40 < JoeStarter> How can I export BLOB from MSSQL to files in node? ( most files are images) Thank you in advance 
06:41 <@jesusabdullah> JoeStarter: Find a MSSQL client for node, use the built-in fs module to write binary data to disk.
06:42 < JoeStarter> do you mean stream? 
06:43 < JoeStarter> can you please give me a simple example in a gist? i am new to node :) 
06:43 <@jesusabdullah> JoeStarter: You'll need to consult the documentation for the mssql client
06:44 <@jesusabdullah> JoeStarter: once you know how to get blob data in memory from your mssql, then you can ask what the appropriate method is for writing it to disk.
06:44 < EhevuTov> ^
06:44 < EhevuTov> JoeStarter, and you probably want to do streaming if you can
06:44 <@jesusabdullah> but just figure out what the mssql api is like first
06:45 < JoeStarter> i am looking at the azure one 
06:46 <@deoxxa> jesusabdullah: haha i've played with the idea
06:47 <@deoxxa> EhevuTov: i let the users do it
06:47 <@deoxxa> EhevuTov: i also provide a CMakeLists.txt
06:47 <@jesusabdullah> I want one :(
06:47 <@jesusabdullah> but it's like a jillion pieces
06:47 <@deoxxa> jesusabdullah: i've done stuff with rtorrent's xmlrpc api
06:48 <@deoxxa> rtorrent is a heap faster than anything in js would be
06:48 <@jesusabdullah> Yeah?
06:48 <@deoxxa> mainly because it's got years of development put into it
06:48 <@jesusabdullah> Is its rpc api any good?
06:48 <@jesusabdullah> I thought about writing a cli tool for deluge
06:48 <@deoxxa> nope, it sucks
06:48 <@deoxxa> but once you write code to make it nice, it's ok
06:48 <@jesusabdullah> true
06:48 <@jesusabdullah> I don't even bittorrent
06:48 <@deoxxa> i mean, it's xml
06:48 <@deoxxa> (lol)
06:48 < JoeStarter> i am confused :( 
06:50 <@deoxxa> jesusabdullah: lemme find the url for this thing
06:50 < JoeStarter> ok i can try node-tds it supports binar "Binary and VarBinary  This is represented as a buffer both ways. This means you pass it in as a buffer and it is retrieved as a buffer."
06:50 < SomeoneWeird> anyone know how to interface with google authenticator?
06:50 < SomeoneWeird> stupid irc
06:54 <@deoxxa> jesusabdullah: i can't find it right now, but the short version is that you do a `system.listMethods' on rtorrent's rpc interface and you'll see all the different stuff you can use
06:55 <@deoxxa> jesusabdullah: getting your head around d.multicall will be the weirdest part - ping me if you end up playing with it and i'll dig up some of the code i wrote to use it
06:55 <@deoxxa> but yeah, as for rtorrent's speed, it's very quick
06:55 <@deoxxa> it's happily serving about a thousand active torrents for me, and it's not making a noticable dent in my system's load
06:55 <@jesusabdullah> jesus
06:55 <@deoxxa> (abdullah)
06:55 <@jesusabdullah> what are you torrenting?
06:56 <@deoxxa> muzicks
06:56 <@jesusabdullah> ah
06:56 <@deoxxa> and weird japanese tv shows
06:56 <@jesusabdullah> word
06:57 <@deoxxa>   PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
06:57 <@deoxxa> 11893 deoxxa    20   0  403m 194m  22m R    0  0.8 266:08.42 rtorrent
06:57  * deoxxa grins
06:58 <@jesusabdullah> word
06:58 <@deoxxa> it only really uses a lot of processor time when it's hash checking
07:08 < jetienne> anybody use google closure 
07:08 < jetienne> poorly asked question. please ignore
07:08 < mscdex> heh
07:10 < mscdex> ugh i hate the new google groups layout
07:14 <@Nexxy> mscdex, user styles?
07:15 < mscdex> maybe, but still
07:16 < mscdex> the old format was so simple, with plain links that i could easily see which topic i've already read, etc.
07:17 <@deoxxa> but now it's responsive
07:17 <@deoxxa> responsiiiiiiive
07:17 < mscdex> now they have the actual content halfway down the page with 1/3 padding on the left
07:17 <@deoxxa> yeah that's what responsive is
07:17 <@deoxxa> making the UI really freaking annoying
07:17 < mscdex> that's what crap is
07:18 <@deoxxa> but on all devices
07:18 <@deoxxa> so you can be equally frustrated on your phone
07:18 < mscdex> well, i use synergy on my phone
07:18 < mscdex> thank goodness
07:19 <@Lorentz> wait, there's synergy/synergyx on phones too?
07:20 < mscdex> not that synergy ;-)
07:20 < mscdex> webos synergy
07:20 <@Lorentz> oh :(
07:20 <@Lorentz> can't see why not, in a way, if android lets you have a cursor mouse input
07:20 <@Lorentz> or at least, keyboard should work ... ?
07:22 < mscdex> there might be, but i don't use tablets. also have a cursor on a phone (with a smaller screen) seems kind of silly
07:22 < mscdex> *having
07:22 < Sly> Hey, jesusabdullah, what is your "space-game" repo about?
07:37 < [AD]Turbo> hi there
07:40 < circlicious> hi batman
08:03 < deadman87> Hey everyone
08:05 < SomeoneWeird> haidere
08:19 < samholmes> I don't see the programmatic use of browserify as doing anything different than the CLI use of browserify. It caches unless I pass {watch: true}. SubStack?
08:21 <@SubStack> samholmes: you should probably just use the cli tool unless you need to bundle with the api
08:22 <@SubStack> there is some stuff like .register() and the plugin system that are tricky or impossible to use from the command-line program
08:22 <@SubStack> but that stuff is not emphasized
08:24 < savadi> Hi, I'm trying to install zookeeper npm module, and i get following error "Error: EACCES, mkdir '/home/xyz/.node-gyp/0.6.20'", how can i fix this ?
08:25 < samholmes> My preference is with the API because I don't have to run another process to watch my files when developing. Is there a significant performance overhead when using the API?
08:25 <@SubStack> there's no difference
08:25 <@SubStack> watching is somewhat broken right now though
08:26 < samholmes> Doesn't seem to be broken when I'm using it. :P
08:27 < samholmes> btw, substans..you annoy my tab key in x-chat when talking to SubStack. x__X
08:27 < timoxley> samholmes use captial S
08:27 < timoxley> if your client supports case sensitive completion
08:28 < samholmes> timoxley: doesn't help
08:29 < samholmes> apparently it doesn't
08:31 <@SubStack> beep boop
08:34 <@AlbireoX> samholmes: My client bases it off of last spoke
08:39 < samholmes> AlbireoX:  Mine just bitches at me with suggestions.
08:40 <@AlbireoX> get a better client then :p
08:46 < wuttf> i fucked up my github graph - pushed then removed a very big dependency, anyone has an idea of how to regenerate that graph
08:49 <@deoxxa> the internals of forever are very, very broken :<
08:50 <@deoxxa> i find this disheartening
08:53 < wuttf> deoxxa: what do you mean by broken
08:53 <@zomg> deoxxa: I gave up with forever and used monit instead
08:53 <@deoxxa> i guess broken was wrong
08:54 <@deoxxa> i'll go with "eating-glue-by-the-tub retarded"
08:54 <@deoxxa> wuttf: it just does all sorts of silly stuff, making it really hard to work with the internals
08:54 <@deoxxa> feels like openssl
08:54 <@deoxxa> the tool works great, the library is like pulling teeth
08:55 < wuttf> i see :S
08:55 <@deoxxa> var child = new forever.Monitor(["node", "app.js"]); // child === undefined
08:56 < jhsto> any modules which let you use jquery server-side?
08:56 <@deoxxa> jhsto: yes. jquery.
08:56 < samholmes> Browserify breaks if a module ends with a comment. :\
08:57 < jhsto> deoxxa: a module? link?
08:57 <@deoxxa> jhsto: yes, its name is jquery. `npm show jquery'
09:00 <@deoxxa> i don't even know how this is possible :/
09:02 <@deoxxa> oh my god
09:02 <@deoxxa> they overwrote .toString()
09:02 <@deoxxa> WHY THE FUCK
09:02 <@deoxxa> holy shit, this is so wrong
09:03 <@SubStack> WUT
09:04 < samholmes> I'd overwrite toString any day if you know what I mean ;) ;)
09:04 <@deoxxa> wut indeed, friend
09:04 <@jesusabdullah> deoxxa: who overwrote .toString on what?
09:05 <@jesusabdullah> oh, in forever
09:05 <@jesusabdullah> uhhh
09:05 <@deoxxa> yes
09:05 <@deoxxa> who do i find and stab
09:05 <@jesusabdullah> talk to avianflu about it
09:05 <@jesusabdullah> not that he's to blame for the code but he'd know if there was a good reason for it
09:05 <@deoxxa> conveniently absent
09:05 <@jesusabdullah> well, he's up early
09:06 <@jesusabdullah> idk what TZ you're in but he's in PDT
09:06 <@jesusabdullah> and likes to get up around 9:00am
09:06 <@deoxxa> AST, so it's 7PM right now
09:06 <@jesusabdullah> hmm
09:06 <@jesusabdullah> it's like 2:00am here :/
09:06  * deoxxa shakes fist
09:06 <@jesusabdullah> I hyave to go to sleep but feel free to do the math real quick
09:06 <@deoxxa> yeah
09:06 <@jesusabdullah> alternately make an issue on the project
09:07 <@jesusabdullah> as many as there are
09:07 <@jesusabdullah> anyways
09:07 <@deoxxa> thinking i'll just reimplement the bits i need
09:07 <@jesusabdullah> Well truth be told I'd love to see them get PR'd
09:07 <@deoxxa> this has really turned me off it :/
09:07 < samholmes> After the new Date(), I .push()ed my object into her Function and nine months later she .pop()ed a childNode.
09:07 <@jesusabdullah> Oh, deoxxa I know
09:08 <@jesusabdullah> talk to mmalecki, he should be on anytime
09:08 <@jesusabdullah> if there's a good reason he'll know
09:08 <@jesusabdullah> if not he'll "wtf" with you I'm sure
09:08 <@jesusabdullah> alright, /me &
09:11 < tuhoojabotti> huh
09:17 <@deoxxa> there we go, issue opened
09:21 < ramsin> HI 
09:33 < mscdex> node.js rules!
09:34 <@wao> YES
09:34 < tuhoojabotti> yes
09:34 < tuhoojabotti> quite
09:37 < mscdex> i wouldn't lie!
09:43 < other_guy> I'm trying to create an nested object hierarchy (namespace tree basically) from an array, but for some reason I'm totally stumped
09:43 < other_guy> Here's what I've got
09:43 < other_guy> http://pastebin.com/cEtT9i8Q
09:44 < kpko> Hi!
09:44 < kpko> I have a little problem with npm that came up today... I try to install node-gyp via npm, but I get an error...
09:45 < SomeoneWeird> whats the error?
09:45 < kpko> C:\Dev\Projekte\NodeSendKeys\NodeGypTest>npm install node-gyp -g npm http GET https://registry.npmjs.org/node-gyp npm http GET https://registry.npmjs.org/node-gyp npm http GET https://registry.npmjs.org/node-gyp npm ERR! Error: SSL Error: Hostname/IP doesn't match certificate's altnames
09:45 < SomeoneWeird> weird
09:45 < SomeoneWeird> isaacs, ?
09:48 < mscdex> kpko: what node and npm version?
09:49 < kpko> node v0.8.4, npm 1.1.45
09:51 < mscdex> not sure, i can't duplicate it on my windows machine
09:52 < kpko> Strange
09:53 < kpko> Im behind a proxy server, but I already set the https-proxy value... I can reach https://registry.npmjs.org/node-gyp via my browser through the proxy..
09:54 < mscdex> kpko: maybe try this: npm config set strict-ssl false
09:55 < mscdex> kpko_: maybe try this: npm config set strict-ssl false
09:56 < kpko_> mscdex: Thank you, that looks much better than before :-)
09:57 < kpko_> C:\Dev\Projekte\NodeSendKeys\NodeGypTest>npm config set strict-ssl false  C:\Dev\Projekte\NodeSendKeys\NodeGypTest>npm install node-gyp -g npm http GET https://registry.npmjs.org/node-gyp npm http 200 https://registry.npmjs.org/node-gyp npm http GET https://registry.npmjs.org/node-gyp/-/node-gyp-0.6.2.tgz
09:57 < mscdex> yay!
09:58 < thewanderer1> hi. what should I use for escaping HTML tags in output?
10:02 < tuhoojabotti> yo hey
10:02 < kpko_> thewanderer1: do you use a view engine like Jade? 
10:02 < thewanderer1> kpko_: no
10:02 < mscdex> regex? ;-)
10:03 < thewanderer1> I suppose I could use simple string replacement for < and > ...
10:05 < mscdex> str.replace(/<|>/g, function(m) { return m === '<' ? '&lt; ' : '&gt;' })
10:05 < mscdex> :-)
10:11 <@xerox> thewanderer1: there is a good one on npm
10:11 <@xerox> npm search ent   I wish I remembered better
10:11 < npmbro> xerox: Please see http://eirikb.github.com/nipster/#ent%20%20%20I%20wish%20I%20remembered%20better
10:12 <@xerox> oh yes, it is 'ent'
10:12 <@xerox> npm info ent
10:12 < npmbro> xerox: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20info%20ent
10:13 <@xerox> npmbro: mind your own business
10:13 < npmbro> Powered by http://jit.su/         Available commands: npm search | npm docs | npm install | npm stats | npm help | npm node | npm credits
10:13 < thewanderer1> okay :P
10:23 < thewanderer1> xerox: thanks
10:44 < node_x> npm showing error while install jitsu ( Unsupported )
10:44 < npmbro> node_x: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20showing%20error%20while%20install%20jitsu
10:45 < jzaefferer> Does anyone know what happened to zipstream, or its author? https://github.com/wellawaretech/node-zipstream - pretty much dead for four months now
10:47 < mscdex> node_x: post the full output to gist.github.com
10:48 <@xerox> thewanderer1: np
10:53 < node_x> mscdex
10:53 < node_x> https://gist.github.com/3187404
10:53 < node_x> here is the gist https://gist.github.com/3187404
10:54 < mmalecki> node_x: you're running very old version of node, upgrade to 0.8.x
10:56 < mscdex> node_x: yep, what mmalecki said
10:56 <@deoxxa> mmalecki: do you want to hear a lol?
10:56 < node_x> okay thanks :)
10:57 <@deoxxa> mmalecki: https://github.com/nodejitsu/forever-monitor/issues/2 << had me so confused
10:58 < mmalecki> deoxxa: lolwat
10:58 <@deoxxa> i know, right?
10:59 < mmalecki> oooohhhh, I might know the reason
10:59 <@deoxxa> i don't even know where to begin looking to figure it out
10:59 <@deoxxa> grep'd for toString on the repo, got nothing of import
10:59 < mmalecki> grep for inspect
10:59 < mmalecki> this is the reason I think
11:00 < mmalecki> too hangover to do it myself tho
11:01 < mmalecki> oh fuck
11:01 < mmalecki> I just checked list of calls from the last night
11:01 < freewil> has anyone used node-speak
11:01  * deoxxa \o/
11:02 < freewil> i want to smack anyone working on node-speak
11:02 < freewil> why are there all these forks and no current npm version
11:03 < freewil> you may also know it as speak.js
11:03 < SomeoneWeird> deoxxa, love your domain name haha
11:04 <@deoxxa> SomeoneWeird: hellll yeah
11:05 <@deoxxa> really need to put something on that site
11:05 < SomeoneWeird> lol
11:06 <@deoxxa> i had a blog there once upon a time, never updated it though
11:17 < mscdex> deoxxa: i know how that goes
11:17 <@deoxxa> does anyone here work for a PaaS provider? specifically one that provides git over ssh in some capacity to its customers?
11:17 <@deoxxa> i'm looking for tips on how to handle ssh keys and such
11:18 <@deoxxa> going to do up a home-grown hosting thing at work to make my life easier
11:18 <@deoxxa> "hey deoxxa deploy this application" "lol ok done"
11:18 < mmalecki> lol
11:19 <@deoxxa> (i'd love to use a real PaaS provider, but we have contractual obligations that prevent it)
11:19 < SomeoneWeird> lol
11:19 <@deoxxa> my current plan is pretty much just to hack some stuff on top of gitolite
11:21 < yawnt> deoxxa: you could use Gitlab
11:21 < RLa> gitolite is nice, using it here with redmine
11:21  * deoxxa looks
11:21 < yawnt> and setup post-push hooks to deploy in auto-magic
11:22 <@deoxxa> ah yeah
11:22 <@deoxxa> looks like a bit much, i don't think i'd ever use the web interface part of it
11:23 < RLa> yawnt, you were the guy looking for .ee domain? did you get it?
11:23 < yawnt> RLa: nop.. costed way too much
11:23 < RLa> how much, isn't that like 20€ per year?
11:25 < RLa> how gitlab's issue management compares to redmine?
11:25 < LambdaDusk> Hi, I am getting some weird error with "request" and I have absolutely no idea what to do: https://gist.github.com/3187479
11:25 < yawnt> RLa: yeah but i'm not from Estony
11:26 < yawnt> so i have to get some lawyer from there
11:26 < yawnt> which is like 100€/year
11:26 < SomeoneWeird> hmm gitlab looks pretty good
11:26 < yawnt> *Estonia
11:26 < RLa> or just find your administrative contact?
11:26 < yawnt> gitlab is okay.. github's better but if you don't wanna way anything it works :)
11:26 < yawnt> RLa: yeah, couldn't find any
11:26 < RLa> could have contacted me :)
11:26 < SomeoneWeird> ofc github is better lol
11:27 < yawnt> RLa: i couldn't get the .com either
11:27 < SomeoneWeird> nothing is gunna compare with github
11:27 < yawnt> so it wouldn't have made much sense to have only the .ee
11:27 < RLa> hm, then yes
11:27 < yawnt> i just changed name :)
11:28 < LambdaDusk> hm anyone have any idea?
11:28 < SomeoneWeird> is gitlab the closest thing you're gunna find to github?
11:28 < yawnt> yes
11:28 < RLa> also look at redmine, you might like it too
11:29 < SomeoneWeird> that sucks
11:29 < RLa> itah
11:29 < SomeoneWeird> github needs some competition :P
11:29 < RLa> github as social network is already competition to sourceforge and others
11:29 < yawnt> but there's also a fork of gitlab 
11:29 < yawnt> but i don't remember the name
11:29 < RLa> tho i hardly remember using sourceforge last time
11:30 < yawnt> which is like more "community-driven" than gitlab
11:30 < yawnt> i hate the fact that it doesn't have pull requests
11:30 < yawnt> :(
11:30 < SomeoneWeird> heh that sucks
11:30 < yawnt> it has merge requests though
11:31 < sgimeno> hello, I have a question about c++ addon
11:31 < mscdex> LambdaDusk: are you able to successfully curl the problematic url?
11:32 < yawnt> RLa: nah, github has no competition.. the closes thing you can find is bitbucket.. and it has still a lot to do to catch up
11:32 < sgimeno> i'm trying to access from my c++ code to the Object wrap of a node object, in this case a net.Socket with no luck, is that even possible?
11:32 < LambdaDusk> mscdex: I don't even know which url it is, the list has about 15000
11:32 < SomeoneWeird> yeah i'm using bitbucket to host all my private projects
11:32 < SomeoneWeird> it sucks compared to github 
11:32 < LambdaDusk> mscdex: Since the error message doesn't give me anything but stops the script entirely I can't find out which it is
11:32 < SomeoneWeird> LambdaDusk, console.log each url until it crashes
11:32 < SomeoneWeird> then you'll know
11:33 < LambdaDusk> but there must be a way to catch this error
11:34 < SomeoneWeird> dude just console.log(url[i]) inside the for loop
11:34 < SomeoneWeird> nfi what the eqiv is in coffee tho
11:35 < LambdaDusk> SomeoneWeird: the error happens in the async part of "request"
11:35 < LambdaDusk> so if I put it in the for loop before the request, I just get a list of all the urls, if I put it inside the callback, I get nothing
11:36 < SomeoneWeird> then log the url inside the callback
11:36 < LambdaDusk> which is never called for the offending url
11:36 < SomeoneWeird> heh
11:37 < mscdex> i don't know what else to tell you besides try the core http api and listen for the 'error' event on the request
11:37 < mscdex> or file an issue on the request gh repo
11:38 < mscdex> or ping mikeal
11:38 < mscdex> :-)
11:40 < LambdaDusk> ping?
11:41 < SomeoneWeird> pong?
11:41 < yawnt> pang
11:41 < mscdex> ping as in mention his irc nick to (hopefully) trigger his nick notify/alert thingy
11:41 < mscdex> ;-)
11:41 < LambdaDusk> ah yes
11:41 < SomeoneWeird> ah
11:41 < SomeoneWeird> ol
11:41 < SomeoneWeird> lol
11:42 < mscdex> pang... i remember that game on the Amiga
11:42 < yawnt> O.rly
11:42 < yawnt> (cit.)
11:46 < jetienne> http://jeromeetienne.github.com/pongGL/ my pong game  :)
11:48 < mscdex> https://github.com/mscdex/youknow my old uno clone written in node
11:48 < mscdex> :-D
11:49 < yawnt> lol youknow
11:49 < yawnt> nice name... i laughed
11:49 < mscdex> i should update it
11:49 < LambdaDusk> mikeal seems asleep
11:49 < mscdex> he might be, it's only going on 8am est
11:52 < Nuck> So, can somebody tell me
11:53 < Nuck> Is it possible to list a git repo as a dependency in npm?
11:54 < rvagg1> http://npmjs.org/doc/json.html#Git-URLs-as-Dependencies
11:55 < Nuck> Holy shit how'd I miss that :|
11:56 < LambdaDusk> mscdex: I switched to bare "http" and get the same error
11:57 < mscdex> LambdaDusk: but you can at least catch the error right? by listening for the 'error' event on the request object?
11:57 < LambdaDusk> mscdex: Nope
11:58 < mscdex> can you gist the code you're using now?
12:01 < LambdaDusk> mscdex: https://gist.github.com/3187594
12:02 < LambdaDusk> could it be even a parse error in the TCP part?
12:04 < mscdex> no, it's probably an HTTP response parse error
12:04 < mscdex> what node version are you using?
12:04 < LambdaDusk> 0.8.1
12:05 < mscdex> oh wait
12:05 < mscdex> nvm
12:06 < LambdaDusk> it happens here: https://github.com/joyent/node/blob/master/lib/http.js#L1356
12:06 < mscdex> yeah
12:07 < node_x> how to push changes to nodejitsu app using jitsu?
12:07 < LambdaDusk> mscdex: Updated to 0.8.4, same
12:07 < mscdex> LambdaDusk: is this a public url or ?
12:08 < LambdaDusk> mscdex: public?
12:08 < mscdex> the one that's causing the parse error, is it something i'm allowed to access?
12:08 < LambdaDusk> I wish I knew which one it is at all, so I don't know
12:09 < mscdex> well, as a temporary measure maybe you can just do one request at a time, console.log()'ing the url each time
12:09 < LambdaDusk> I would have to check all the 21,000 urls which is actually what I am trying to do with this script... checking them for those that still live
12:09 < mscdex> then you'll know
12:10 < mscdex> which one
12:10 < LambdaDusk> how do I sync async code?
12:10 <@deoxxa> you don't
12:11 <@deoxxa> it sounds like what you're actually asking is "how do i run a set of asynchronous operations in order"
12:11 <@deoxxa> in which case, https://github.com/caolan/async is your friend
12:11 < mscdex> LambdaDusk: have a named function that starts a request, when the request comes back, call that function with the next url, until you're done
12:12 <@deoxxa> async.forEachSeries would work well
12:12 < mscdex> s/request comes back/response comes in/
12:14 < mscdex> var i=0; function foo() { console.log('requesting url: ' + urls[i]); http.get(urls[i], function(res) {++i; foo(); }) }
12:14 < mscdex> something like that
12:17 < LambdaDusk> oh jeez haskell is so much easier compared to this
12:20 <@deoxxa> hm, this gitolite hackery isn't actually so bad
12:20 <@deoxxa> mason + gitolite + forever + seaport + some kind of proxy = fun times ahead
12:21 < mscdex> LambdaDusk: there's always the async module too, it just boils down to preference
12:22 < LambdaDusk> mscdex: Fun fact is, I chose node.js because it's async and would get the task done quicker
12:22 < mmalecki> deoxxa: ever tried haibu?
12:22 < mmalecki> it can pull down git repos too
12:23 <@zomg> LambdaDusk: I doubt nodejs would get anything done faster than Haskell due to Haskell being a faster language :P You'd just need some threads in it I guess
12:23 < mscdex> lol
12:24 < node_x> hey
12:24 < LambdaDusk> zomg: The speed of the language is irrelevant here as about 99% of the time is spent waiting for network responses
12:24 < node_x> anybody know how to push changes to nodjitsu server
12:24 < node_x> ?/
12:24 <@zomg> LambdaDusk: yeah just sayin', cause you did say nodejs would "get it done faster" ;)
12:24 < Sly> Why would you want to bother with Haskell anyway? Just add GPU parallel processing.
12:25 < Sly> jmo
12:25 < LambdaDusk> zomg: Thus, node.js has the advantage for doing them asyncronously
12:25 < ebright> Hi - I'm refactoring my code so as to reduce my nested callback's as per maxogden 's http://callbackhell.com/
12:25 <@zomg> LambdaDusk: Haskell can do that too, it just takes some work I guess :)
12:25 < ebright> Could someone help me explain how I would pass a variable to my callback in a case like this: https://friendpaste.com/5QOw3wfTUAhzwPccpeivMW
12:25 <@zomg> Not sure if the automatic multithreading thing in it is capable of splitting IO actions like that
12:26 <@deoxxa> haibu looks... interesting
12:26 <@deoxxa> cute, "hive"
12:26 < timoxley> ebright you have a few options
12:26 < LambdaDusk> zomg: Actually, the reason why I did not choose haskell was that with node, it's just quicker writing up something using http
12:26 < ebright> hi timoxley - I'm all ears!
12:27 <@zomg> LambdaDusk: Yeah figured as much, I guess I took your message too much word for word =)
12:27 < timoxley> ebright you need to define the function inside a scope that has access to the 'test' variable
12:28 < timoxley> ebright or use Function.bind
12:28 < timoxley> ebright I'd probably just move the test var to an outer scope
12:29 < Sly> Honestly, ebright.. If I were you, I would just replace "var test = 'Check'" to "var test = callbacktest".
12:29 < timoxley> ebright in this case though, i'd probably just nest the callback in there
12:29 < Sly> Then you could do "test.test = 'Check'"
12:29 < Sly> Then reference "this.test" inside of callbacktest.
12:29 <@deoxxa> mmalecki: haibu might be my answer here
12:29 <@deoxxa> or at least, part of it
12:30 < mmalecki> deoxxa: yeah, if you want to do a push, you still need a post-receive hook
12:30 <@deoxxa> also technically speaking "hive" in japanese is "subako", but i'll let it slide because "haibu" sounds cuter :3
12:30 < timoxley> ebright as in, for what you have, you don't need to break it out. if you were going to do another async operation inside the callback, I'd definitely move it out
12:30 < mmalecki> :)
12:30 < Sly> ebright, https://friendpaste.com/5acbsrpT2eny9B7ayiEjRe for example.
12:30 < hillerstorm> time to watch http://2012.nodeconf.com/theatre/ryan_dahl.html
12:31 < timoxley> Sly that won't work
12:31 < timoxley> Sly 'this' won't be the callback function
12:31 < ebright> timoxley in this simple case I would too, but it's a simplied version of a different scenario (retrieve data from couchDB, edit doc (change _id to be precise), insert new doc and then delete old doc - to do this last step I would need to pass the _id from the first get to the delete call - which is nested in the insert callback)
12:32 < ebright> I see, that looks like a nice solution Sly
12:32 < timoxley> ebright it won't actually work though
12:32 < ebright> oh, won't work.. okay :(
12:33 < Sly> timoxley, actually -- it does.
12:33 < ebright> I'll test it - brb!
12:34 < LambdaDusk> mscdex: I have found the offending url, but curl or the browser don't complain about it
12:34 < node_x> hey 
12:34 < node_x> https://gist.github.com/3187716
12:34 < node_x> help
12:34 < node_x> !
12:35 < mmalecki> node_x: hey. try again, I just fixed that server. also, please join #nodejitsu for this kind of issues :)
12:35 < ebright> Sly timoxley - it says cannot read property test of undegined
12:35 < mscdex> LambdaDusk: are you able to send me the url so i can try to reproduce it on my end?
12:35 < ebright> undefined*
12:35 < LambdaDusk> node_x: Tried the nodejitsu support?
12:36 < Sly> ebright, what framework are you using?
12:36 < timoxley> ebright the 'this' context is dependent on how your db call actually executes the callback
12:36 < timoxley> ebright if it does work, it'd be due to some trickery on behalf of your db driver
12:36 < ebright> ah, okay - I'm using express and nano to connect to couch
12:37 < timoxley> perhaps Sly was using a driver that did something like callback.apply(callback, args)
12:38 < ebright> "you need to define the function inside a scope that has access to the 'test' variable" - this makes sense to me, but I don't know how I would do that
12:38 < ebright> I'm not going to define my callback function inside of app.get("/.. am I?
12:39 < timoxley> ebright sometimes I do that
12:39 < timoxley> ebright but it does look messy
12:39 < ebright> yes, it would feel kinda wrong to me for some reason
12:39 < timoxley> just define the test var in the scope outside both the app.get and the callback definition
12:39 <@Hodapp> I may have found a project for which I should learn Node.js!
12:40  * Hodapp does a shot of tequila
12:40 < timoxley> ebright yeah, I just don't like to pollute the outer closure with unrelated garbage
12:41 < ebright> yep, I agree with that too! :)
12:42 < Sly> Taking another blind leap of faith, you could try: https://friendpaste.com/5QOw3wfTUAhzwPccpeIcpn
12:42 < Sly> Again, untested.
12:42 < timoxley> ebright something like this https://friendpaste.com/5acbsrpT2eny9B7ayiEjRe
12:43 < Sly> timoxley, even by your own standards -- that shouldn't work, because "this" isn't being used in the typical sense.
12:43 < timoxley> Sly ahh that was a typo
12:43 < strk> was there a known slowdown in timeout handlers between node-0.4 and node-0.8 ?
12:44 <@CIA-93> libuv: Ben Noordhuis master * r9f59e8e / include/uv.h : include: update uv_close documentation - http://git.io/LSlYPQ
12:46 < bnoordhuis> strk: on the contrary, most everything got faster
12:46 < bob__> v8 related question: to concatenate a group of strings passed from JS land to C++ land (e.g. for interpolating strings) would it be more performance to use repeated calls to v8::String::Concat(left, right) and building up a ConsString object, or would it be better to count byte lengths for all the strings then allocate once and copy the contents of each string into the new buffer?
12:46 < bnoordhuis> bob__: use String::Concat
12:47 < timoxley> ebright edited. Is this for a test suite or your actual app?
12:47 < bob__> seeing how fast string concatenations are in JS (i.e. the "+=" op), i'd guess String::Concat() is the quickest, no?
12:48 < ebright> right now it's only a test - to help me understand how this sort of thing can be done
12:48 < bob__> awesome, thanks
12:48 < mscdex> bnoordhuis: any reason why http parser errors do not bubble up to the original request or response objects? it seems the error is only emitted on the socket itself
12:49 < bnoordhuis> mscdex: no reason, things evolved that way
12:49 < mscdex> hmm
12:52 < timoxley> ebright you should brush up on your JS scoping rules http://howtonode.org/what-is-this, http://howtonode.org/object-graphs
12:55 < ebright> Sly your last example doesn't seem to trigger the console.log calls in callbacktest
12:55 < Sly> ebright, as I said when I posted it.. I didn't test it.
12:56 < Sly> I don't use frameworks, specifically for reasons such as what you're facing right now.
12:56 < ebright> timoxley your solution does work if I add a call to getParticipants() offcourse
12:56 < Sly> Rather just make it and know it does what I want it to do. lol.
12:57 < ebright> thx for the links timoxley and your help - I do need to brush up on those things
12:57 < ebright> Sly thanks also for your help!
12:57 < Sly> No problem, although it wasn't really any help.
13:03 < deedubs> samholmes: express middleware for browserify https://gist.github.com/3187815
13:04 < Hounddog> hi how do you properly exit a node script?
13:04 < Hounddog> i mean with return code
13:05 < bnoordhuis> Hounddog: process.exit(42)
13:05 < Hounddog> ahh... just found prcoess.exit
13:05 < Hounddog> but what you mean with 42?
13:05 < bnoordhuis> that's the status code
13:05 < Hounddog> just need true/false so 1/0
13:05 < etcetera> has anyone done a rundown of the caveats and things to be aware of when going from a static language like c# or java to node?
13:06 < etcetera> I'd love to see that + a reasonably accurate perf comparison.
13:06 < Hounddog> just one more question to that... i am running socket io and have spawned iceweasel using child_process... with child_process i can also close iceweasel again or?
13:06 < bnoordhuis> Hounddog: yes. cp.kill()
13:07 < Hounddog> bnoordhuis: perfect... i am searching all over the manual... not that easy :)
13:07 < Hounddog> let's see if this works now...
13:07 < bnoordhuis> Hounddog: there's sites like nodebeginner.org that are more tutorial-like
13:07 < Hounddog> bnoordhuis: i should definitly take a look... am doing some node in private...
13:08 < Hounddog> here at work only php :(
13:08 < bnoordhuis> a
13:08 < bnoordhuis> *ah, poor sod
13:08 < etcetera> what's the current most popular node web framework?
13:08 < jetienne> express
13:08 < Hounddog> i just had to create some javascript testing which is allready implemented but without server communication... so node was a good option
13:09 < Hounddog> perfect... seems to work...
13:09 < Hounddog> let's see how the server like the code :)
13:09 < etcetera> jetienne: played with meteor?
13:09 < jetienne> no
13:10 < etcetera> anyone else? seems like quite a bit of magick?
13:11 < bnoordhuis> all i know is they managed to raise a lot more funding than tj ever did :)
13:11 < Hounddog> meteor looks quite cool... watched the screencast yesterday
13:12 < timoxley> really not a fan of kitchen sink frameworks
13:13 < timoxley> too many eggs in the basket
13:13 < jetienne> bnoordhuis: did he try ?
13:13 < etcetera> I'm pretty sure raising that much money is required.
13:14 < jetienne> etcetera: why ?
13:14 < etcetera> Otherwise you're just an open source project that no one uses, no one contributes to, and will be gone within the year.
13:14 < bnoordhuis> jetienne: not that i know of but that's not saying much
13:14 < jetienne> etcetera: true that money helps getting the project moving forwards
13:15 < jetienne> etcetera: google released one recently btw, and they got money :)
13:15 < etcetera> jetienne: google released one what?
13:15 < bradgignac> angularjs
13:15 < jetienne> etcetera: but still the most popular is express :) one opensource 
13:16 < etcetera> can I wrote node.js in coffeescript?
13:16 < etcetera> by which I mean is there a supported workflow?
13:16 < bradgignac> yep
13:16 < etcetera> other than just...build -> *.js
13:16 < bradgignac> you'll need to compile AFAIK
13:17 <@CIA-93> libuv: Ben Noordhuis master * rcf05c5f / (8 files in 4 dirs): Raise UV_ECANCELED on premature close. - http://git.io/4Tq5aw
13:17 < etcetera> bradgignac: right, but is there a supported workflow where errors are bubbled up to coffee at some point.
13:18 < bradgignac> not really. hopefully, node will support source maps shortly after chrome does
13:19 < jetienne> bradgignac: chrome already does no ?
13:19 < jetienne> bradgignac: i remember the news from 3 months ago
13:20 < bradgignac> yeah, they do but i haven't seen much in the way of people supporting it yet
13:20 < bradgignac> i could be a little behind though
13:20 < etcetera> meh, that's ok, js is still verbose.
13:21 < jetienne> use dart :)
13:28 < etcetera> jetienne: ?
13:33 < jetienne> etcetera: attempts to be a joke, you can safely ignore
13:33 < etcetera> figured.
13:33 < jetienne> etcetera: but i personnaly advice against non standard langauge like coffee for long term project
13:33 < etcetera> makes sense
13:43 < armetiz> Hi there.
13:43 < armetiz> I want to launch a node application as a daemon on a CentOS server.
13:43 < armetiz> Do you have any clue ?
13:43 < armetiz> I have looked on "forever" module which is very cool ! But, I just want to auto-start the node apps in server startup
13:44 < bnoordhuis> armetiz: runjs and an init.d script?
13:44 < armetiz> I try to create a init.d script, but I don't know how to do a good code.. So I'm looking on google 
13:44 < armetiz> runjs ?
13:53 < armetiz> hum.. in other word, how do you process to auto start a node application on server startup
13:54 <@flexd> Uh, ruby has a object.inspect to print out all the info about the object.
13:54 <@flexd> does javascript/node have something similar?
13:54 < armetiz> yes
13:55 < armetiz> look on utils module
13:55 < armetiz> utils.inspect I guess
13:55 < Nasga> is there a way to use json var like event.Event-Name ?
13:55 < armetiz> flexd, http://nodejs.org/api/util.html#util_util_inspect_object_showhidden_depth_colors
13:55 < Niloc> What on earth is a 'json var'?
13:55 <@garrensmith> flexd: console.dir will write your object to stdout
13:55 < Nasga> or i must avoid "-" char
13:56 < Nasga> Niloc: sorry, i mean a javascript object property :p
13:56 <@flexd> ah, excellent
13:56 <@flexd> util.inspect works great too.
13:56 < Niloc> Nasga: there are no variables in json. Object keys can contain anything that is allowed in a string, because they ARE strings.
13:56 < strk> [8]-  Segmentation fault      (core dumped) node --debug --prof benchmark_server.js development 
13:56 < strk> nice
13:56 < Niloc> Nasga: just need to (double) quote them.
13:57 < Nasga> thx Niloc i will try this way
13:57 < Nasga> i just tested simple quote -_-
13:57 < Niloc> Well, in *JS*, it doesn't matter.
13:57 < Niloc> But if you're writing JSON (by hand), you must use double quotes.
13:58 < strk> #0  0x000000000082cfb4 in v8::internal::HashTable<v8::internal::SymbolTableShape, v8::internal::HashTableKey*>::FindInsertionEntry(unsigned int) ()
13:59 < strk> ah, it's a module's fault
14:02 < Owner> samholmes~# i finally figured it out
14:04 <@CIA-93> libuv: Ben Noordhuis master * r9123482 / include/uv.h : include: update confusing uv_write comment - http://git.io/RrxAog
14:05 < yanush> Hi, ran into a brick wall with an EBADF problem, would really appreciate if anyone could take a look: http://stackoverflow.com/questions/11674661/clustering-in-node-js-fails-in-azure-emulator-or-azure-vm-with-ebadf
14:06 <@flexd> Hm.. I guess I am doing something very wrong when I need to format a date/unix timestamp with moment.js in the view? :p
14:06 < timoxley> flexd what's wrong with that?
14:07 <@flexd> Not sure, it just feels wrong.
14:07 <@flexd> Also, it's not working because it does not find moment hm
14:07 < timoxley> flexd it's fine
14:07 <@flexd> Do I need to require it in the view as well, or pass it there though locals?
14:08 < timoxley> flexd oh. I'd do it clientside
14:08 < timoxley> flexd or create a template helper
14:08 <@flexd> Hm
14:08 <@flexd> I am fetching some data from an API, and it returns last change in a unix timestamp. I'd like to just display it in a readable format.
14:09 <@flexd> I'll look into helpers
14:12 <@Wes-> yanush: I know nothing at all about node.js, but if this was a C application, I would immediately do a syscall trace (truss, dtruss, ktrace, strace depending on OS) and follow the file descriptor that is triggerring EBADF back to the source.   That technique would work in Node, too, if you are sufficiently familiar with C programming and Node internals.  Make sure you trace all threads and...
14:12 <@Wes-> ...child processes. 
14:13 < yanush> First, thanks for taking a look. I'll try and see whats up. I'm currently trying with earlier versions of node cuz I think its something new that crept in lately
14:14 < armetiz> Hum.. Do you have any clue to build an auto-start Node application ?
14:15 < armetiz> With forever or not.. 
14:16 <@flexd> armetiz: auto-start how? What do you mean
14:16 < etcetera> is there a recommended orm for express that works well with postgres and redis, respectively?
14:16 < armetiz> I want to start the node application on server startup
14:16 < etcetera> I guess I should also ask, are there things that node is not typically well suited for?
14:17 <@flexd> etcetera: cpu heavy stuff
14:17 < etcetera> like....?
14:17 < armetiz> I have looked on init.d, but, build a daemon isn't a regular thing..
14:18 < armetiz> or maybe a node application container exists like Tomcat .. But I don't know them
14:19 <@kranius> etcetera: prime factorization
14:19 < etcetera> kranius: think more real world....
14:19 <@kranius> transcoding
14:19 < etcetera> yea makes sense to write a service using C# or something for stuff like that.
14:20 < etcetera> and you usually would not stick a transcoding operation in a short lived operation.
14:20 < etcetera> in an ideally short lived operation....*
14:20 < Sonderblade> i guess it's not suitable for quick and dirty web sites
14:21 <@kranius> you can call native code from node, too
14:22 < etcetera> Sonderblade: why not?
14:23 < etcetera> kranius: would probably just write a secondary service for that.
14:24 < Sonderblade> etcetera: node.js is asynchronous which is usually more work than synchronous processing, but which pays off big in the long run
14:26 < etcetera> Sonderblade: what does that mean?
14:27 < Owner> it means that some of the functions run when they run, and so you cant trust that the data is avialable right on the next line of code
14:27 < Owner> the only way to do that is inside the function itself near the end
14:28 < Owner> basically, you cant trust a lot of things
14:28 < Owner> im still learning it
14:30 < Sonderblade> right, that means you have multiple things going on simultaneously which is (initially) more work to manage and grok than doing one thing at a time
14:30 < etcetera> and why is it not particularly well suited for quick applications and dirty web sites/apps?
14:31 < timoxley> etcetera if you need to do 4 async operations in ruby, it can be 4 lines of code
14:32 < timoxley> etcetera if you need to do it in JS, you're looking at about 16
14:32 < timoxley> potentially. either way a lot of simple tasks are made more complex by it
14:32 < bradleymeck> separation of data aggregation and final rendering after is generally how node apps work, most adhoc sites done quick and dirty mix data aggregation and view rendering together. they are entirely different in my book, even if async operations occur, you will want to do that model in almost any language where you are not blocking the render pipeline or streaming the render pipeline somehow
14:32 < timoxley> on the upside a lot of hard tasks are made simple.
14:35 < armetiz> I'm sorry but.. i'm really lost since 4hours..
14:35 < armetiz> Many people use NodeJS to build apps.
14:36 < armetiz> Application are dev and then push into production state. 
14:36 <@context> i want nodejs powered native iOS app
14:36 < armetiz> So, how people use NodeJS in production, how do they start app.js on server startup.. I hope to be clear because It seems to be weird :s
14:36 < bradleymeck> context: until jit is allowed or JSCore bindings happen, thats a ways off
14:37 < agurha> nodejs is a http server @context
14:37 < timoxley> armetiz exactly the same way you start any process on server startup. 
14:37 < bradleymeck> agurha: no its a programming env, i almost never use http and i do node full time
14:37 < armetiz> timoxley, using a init.d ? isn't it ?
14:37 <@benvie> node can do more than be an http server
14:38 < bradleymeck> armetiz, use a process monitor to spawn : `node app.js`; monit, upstart, forever, god, w/e process monitor you want works
14:38 < agurha> hmm bradley how you use node then ? 
14:39 < agurha> i always though node was an http server and a env. where you can build server side apps in JS 
14:39 < bradleymeck> agurha: sometimes as a daemon for system processes, sometimes as a cli, usually cli
14:40 < strk> bnoordhuis "most everything got faster", but can you think of something which got slower ?
14:40 <@benvie> https://github.com/appjs/appjs/raw/master/examples/chrome-in-node-repl.jpg
14:40 < timoxley> armetiz perhaps try using a paas like nodejitsu or even heroku
14:40 < agurha> ok 
14:40 < Owner> or openshift
14:40 < timoxley> armetiz make life easy for yourself
14:40 < freewil> agurha, http/https are just two modules of node.js... http://nodejs.org/docs/latest/api/
14:40 <@benvie> it can do a lot more than that
14:40 < Owner> or free amazon ec2 instance
14:40 < bradleymeck> benvie very nice
14:40 < milani> benvie, again this picture:))
14:41 <@benvie> yeah
14:41 <@benvie> new people
14:41 <@benvie> it's education
14:41 < armetiz> bradleymeck, forever cann't be use to launch node.js app on server startup. Not out of box I guess.
14:41 < armetiz> Because forever have to be launch first.. 
14:41 < timoxley> benvie what is that
14:42 < bradleymeck> forever will bootstrap and daemonize if it is not already launched
14:42 < armetiz> So, I have to build a init.d script to launch forever, and also a script to launch a set of node app.js.. I guess to.
14:42 < bradleymeck> but you will want to make sure it is actually in the path and tcp is loaded
14:42 < Owner> armetiz~# rc.local
14:42 < agurha> thanks @freewill
14:42 < milani> timoxley, its browser in node and node in browser:D
14:42 < bradleymeck> one day i will have enough time to find how to make CEF spit out to node's http instead of this funky format difference
14:42 < milani> timoxley, its part of appjs, desktop solution for node.
14:42 < timoxley> milani oooooo
14:42 < timoxley> oh
14:43 < timoxley> I should ahve looked at url
14:43 < timoxley> oh man
14:43 < timoxley> that is really awesome
14:43 < etcetera> is anyone consuming node rest apis from c#?
14:43 <@benvie> yeah that's viewing the DOM in UltraREPL
14:43 <@benvie> I used it becuse it has more colors
14:44 <@benvie> but you can run it node's normal repl liek that too
14:44 < armetiz> gasp, not really easy as you say to start a node app with server.
14:45 < timoxley> armetiz it should be as simple as running a bash script that starts forever which starts your node app
14:46 < mscdex> \o/
14:46 < timoxley> armetiz note node doesn't run as a background service the same way you would with php+apache
14:46 <@cmr_> To anyone who as experience with node-pg: Does this make sense? Am I handling the no-result-from-Postgres case efficiently? Alternatives? Gist: https://gist.github.com/3188433 
14:47 < armetiz> yes I know, you right but..
14:47 <@cmr_> (any other comments very welcome)
14:47 < timoxley> armetiz what is the actual problem
14:47 < armetiz> I don't know how to start :D
14:48 < armetiz> I have test to create init.d script, but all this exampel that I have found around nodejs contains error, or failed..
14:48 < armetiz> forever seems to be very cool.
14:48 < bradleymeck> armetiz you dont have to use forever, you can use anything if you know something better
14:48 < armetiz> I don't know something better :D
14:49 < armetiz> I'm not using munin or other monitoring program
14:49 < armetiz> to begin, maybe I can try to start my_app.js without any monitoring tools. Just for test.
14:50 < armetiz> But, to do that, I have to create a init.d script (maybe I'm blocking on it.. I'm burning... :/)
14:51 < bradleymeck> armetiz: the script runs in ssh right?
14:51 < armetiz> maybe monday will be a better day, a fresh one ..
14:51 < armetiz> yes it run in ssh
14:51 <@medice> was there some sort of 'hash set' in js/node?
14:51 <@medice> yay, i'm op
14:52 < other_guy> Hi guys, I'm trying to make nested namespaces from an array of strings…. and for some reason I'm completely stumped about why this doesn't work.
14:52 < other_guy> http://pastebin.com/Vm5UTQFj
14:52 < bradleymeck> medice you looking for a harmony Dictionary maybe?
14:53 < medice> poossibly
14:53 <@benvie> node --harmony
14:53 <@benvie> Map, Set, WeakMap
14:53 < medice> neat
14:54 < medice> are these documented somewhere
14:56 <@benvie> http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets
14:56 <@benvie> http://wiki.ecmascript.org/doku.php?id=harmony:weak_maps
14:56 <@benvie> https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Map
14:56 < medice> the force of google is strong with this one, thanks
14:57 <@benvie> google tailors search results to things you search for often =D
15:00 < Owner> what is harmony
15:01 < zackiv31> is there anyway to detect if the user clicks the "stop" button from nodejs? Like is the connection closed or something?
15:01 < aib_233> on node 0.6.9 I have a working setup with a spawn process, and a "data" event listener filling a buffer with data events ( output of the spawn binary is a png ), … on 0.8.4 I'm having some difficulties to configure everything correctly. I'm not 100% sure but the encoding of stout seems to be wrong by default to handle binary data. 
15:01 < zackiv31> (on a browser) expressjs if relevant
15:02 < aroman> zackiv31: you're saying detect when the server goes down from the client?
15:02 < bradleymeck> Owner: is a future spec for standard lib stuff in JS
15:03 < bradleymeck> and some other things like strict mode
15:03 < zackiv31> aroman: no... if i submit a form, and i do a lot of processing.. and the user clicks the browsers "stop" button in the middle of it.. is there a way to detect that?
15:04 < bradleymeck> zackiv31, req.socket.on('close') ?
15:04 < retrobaby> zackiv31: you could fire a socket event on the stop click
15:06 < retrobaby> something on the lines of <..onclick=doStuff()> doStuff(){socket.emit('stopClicked', data);
15:07 < strk> can it be that the default build switches produce a slower executable than the default ones for node-0.4 ?
15:08 < retrobaby> what do most of y'all use for porting web-apps to mobile platforms?
15:08 < Owner> web-apps?
15:08 < retrobaby> applications
15:08 < retrobaby> like
15:09 < bradleymeck> media queries generally?
15:09 < retrobaby> er
15:09 < retrobaby> yeah
15:09 < bradleymeck> strk for microbenchmarks yes its possible
15:09 < bradleymeck> crankshaft takes some jit iterations to heat up
15:10 < retrobaby> hmm
15:10 < milani> retrobaby, if u want native-like apps use phonegap
15:10 < retrobaby> yeah i have heard of Phonegap, I was looking at trigger.io's forgeTools which seems promising
15:11 < retrobaby> i just wanted to experiment sockets with mobile assets, like accelerometer, video etc etc
15:12 < milani> retrobaby, there is a chrome extension that simulates them
15:12 < milani> retrobaby, Ripple
15:13 < retrobaby> milani: that's pretty slick
15:14 < retrobaby> milani: thanks
15:14 < milani> np:)
15:16 < other_guy> okay… so I have my namespacing function working… but I have no idea WHY it works the way that it does.
15:16 < other_guy> http://pastebin.com/XMsPKYhs
15:16 < other_guy> For some reason if a inspect the value of the "parent" that was passed in as an argument, then it works fine.
15:16 < other_guy> If I check the updated value of parent that's returned from the function, it's totally wrong.
15:18 < other_guy> does anybody have any insights or wisdom?
15:19 < timoxley> other_guy you should look into using reduce
15:20 < other_guy> timoxley, I'll take a look at it… how would that help me?
15:26 < timoxley> other_guy gets rid of ugly for loop
15:26 < other_guy> okay, but I assume it's also vastly slower
15:26 < other_guy> I guess I can jsperf it
15:26 < retrobaby> ttps://gist.github.com/229931 reduce implementation as per MooTools
15:27 < retrobaby> I usually like my reduce recursive, dont know why, but iterative works as well.
15:27 < timoxley> other_guy e.g. http://jsfiddle.net/vq6Ku/
15:29 < other_guy> lookin
15:32 < other_guy> timoxley… interesting
15:32 < other_guy> I'm going to setup a jsperf case...
15:32 < timoxley> other_guy are you running this on IE6/7?
15:32 < other_guy> no, but this little bit of code is going to run A LOT.
15:33 < timoxley> other_guy probably inconsequential
15:33 < retrobaby> ^
15:33 < other_guy> it's going to parse every HTTP response that comes back from an HTTP API
15:34 < other_guy> a single user request might make 50 API requests that need to be processed and bundled and returned to the user.
15:34 < retrobaby> on code both of them are O(n), unless you have prototype chaining or something, the performance will remain the same
15:34 < retrobaby> almost
15:35 < other_guy> can either of you explain why more for loop example behaves so strangely
15:35 < other_guy> I get that it has to do with references to the objects....
15:35 < retrobaby> i am looking at it right now and it's eluding me, probably cos i am wary of all the guys in the office walking around and seeing me do no work. lol
15:35 < retrobaby> but i will let you know if it strikes me
15:36 < other_guy> retrobaby, thanks
15:36 < other_guy> @n_aschbacher, if I"m not around here
15:36 < timoxley> other_guy also, jsperf != node
15:37 <@matjas> Chrome == V8 == node
15:37 <@matjas> though
15:37 < timoxley> if he's going to get nitpicky about perf
15:37 < other_guy> timoxley, I know, I try to keep a version of Chrome around that's inline with the version of V8 node uses for doing this sort of testing and profiling
15:38 < owen1> other_guy: what tool do u use for performance tests?
15:38 < retrobaby> i use my fingers
15:38 < owen1> i am looking for a way to hit my api (POST files)
15:39 < timoxley> other_guy if it becomes a problem you should just scale horizontally anway
15:39 < timoxley> other_guy slow parts will be io. don't stress. you're micro optimising.
15:40 < retrobaby> just DONT scale, its the most stupid thing anyways
15:40  * retrobaby shoots himself
15:40 < other_guy> timoxley, if there's a huge delta in performance, then it seems silly to spend money on an additional server when changing 3 lines of code once will do the same thing :-)
15:40 < other_guy> I doubt it will be a problem, but there are places where it's shit in node
15:40 < other_guy> like forEach() compared to for(in)
15:40 < other_guy> HUGE difference
15:40 < other_guy> and it adds up depending on your use case
15:40 < retrobaby> for..in should not be sued for arrays anyways, it returns string indices
15:41 < timoxley> other_guy if you're going to worry about that stuff, you should be coding in c
15:41 < other_guy> retrobaby, you're right, I meant just for(i)
15:41 < timoxley> or even java
15:42 < other_guy> timoxley, that seems silly considering that we have two methods that produce identical results, they're basically the same amount of code, and it takes me 5 seconds to change one for the other
15:42 < other_guy> rather than rewrite a chunk of our app stack in C
15:42 < retrobaby> thats JavaScript for you, it can be easily fragmented.
15:42 < bradleymeck> `time node 'something with benchmark.js' --prof` <- can surprise you what is taking so long, also if you have dtrace nodejs.org has a good blogpost on flamegraphs
15:43 < other_guy> owen1, for hitting our API I use JMeter
15:46 < retrobaby> i ahve my fiber installation today! yayaya
15:48 < other_guy> http://jsperf.com/reduce-vs-for
15:48 < other_guy> big delta, but they're also both very fast
15:50 < bradleymeck> one day v8 will optimize out unused closures, but that day is not today
15:51 <@xat-> nice said :)
15:51 < timoxley> other_guy the point is, the gains might swing the other way in a later v8 version
15:52 < timoxley> other_guy are you going to rewrite all your functions? 
15:52 <@covi> applicative
15:52 < timoxley> other_guy optimise for maintainability
15:52 < Domenic> ^ truth
15:52 < other_guy> I get that, I also don't think that .reduce is necessarily any easier, and this only happens in one place,  header parsing.
15:53 < timoxley> other_guy i'm not talking about just this one function
15:53 < other_guy> generally I do.  I prefer easier to comprehend solutions
15:54 < other_guy> because Im not the only one who's going to dig in this code
15:57 <@context> anyone here used localStorage before? know any recommended plugins/etc for interacting with it ?
15:57 <@context> this is browser side of course :x
15:57 < micheil> try #javascript
16:03 < tgriesser> does anyone have advice on frameworks/good readings for writing solid tests for node packages, it seems like there are so many test frameworks/articles/resources out there I don't know where to begin
16:14 < owen1> other_guy: thanks. i'll take a look
16:19 < timoxley> tgriesser just use mocha
16:19 < timoxley> tgriesser and use supertest/chaishould/sinon/
16:19 < timoxley> etc as required.
16:20 < tgriesser> timoxley: thanks
16:21 < timoxley> tgriesser that should be 'chai or should' but I slipped on the pipe key
16:26 < tgriesser> timoxley: anything in particular that makes mocha different from every other means of testing, is it just the most comprehensive, or easiest to use...
16:28 < timoxley> tgriesser decouples assertion framework. works good with async. removes 'taste' arguments by providing different styles of test and also output
16:30 < tgriesser> timoxley: nice, that all sounds good
16:32 < owen1> when i install uglifyjs and browerify (localy) i noticed i can't use them unless i specify the location of the binary. is it normal?
16:32 < owen1> it's not binary but a script, but u got the idea.
16:34 < timoxley> owen1 that's normal
16:34 < Domenic> owen1: use package.json's script sections; then it'll find them for you
16:35 < timoxley> owen1 you mean with `npm install uglify` over `npm install -g uglify` right?
16:35 < Domenic> e.g. "scripts": { "uglify": "uglify --args" }, then `npm run-script uglify`
16:35 < timoxley> Domenic true? that will run uglify out of node_modules?
16:35  * timoxley tests
16:36 < Domenic> timoxley yup, we have basically nothing installed globally on our systems, just use `npm test` and `npm run-script`.
16:37 < timoxley> Domenic I've been using run-script, but setting it up as: `./node_modules/.bin/whatever `
16:37 < Domenic> timoxley yeah that was fixed sometime back in the middle of 0.6 to not be necessary any more
16:38 < owen1> Domenic: interesting. i'll try that
16:38 < owen1> timoxley: thanks
16:39 < timoxley> Domenic you're right. that's awesom. mind blown.
16:41 < timoxley> Domenic also just discovered npm run === npm run-script
16:41 < timoxley> today is the best day
16:43 < zackiv31> how do i get a response to stream? res.write() doesn't seem to flush after each write?
16:46 < Domenic> timoxley: woah mind blown right back at you
16:48 < timoxley> zackiv31You can listen for the drain event on the writing end to know when the write buffer has emptied
16:49 < timoxley> zackiv31 but afaik no guarantees how many or how big the data events will be on the reading end
16:49 < timoxley> or when they will arrive
16:49 < owen1> Domenic: i added "browserify": "./node_modules/browserify/bin/cmd.js" but when i run  npm run-script browserify hello2.js -o bundle.js nothing happened.
16:49 < owen1> and bundle.js is not created
16:50 < timoxley> owen1 you don't need ."/node_modules/browserify/bin/cmd.js"
16:50 < timoxley> owen1 just do "browserify"
16:50 <@gkatsev> so, anyone created a node.js shell yet? Like, a replacement for bash or zsh?
16:50 < zackiv31> timoxley: yah I'm trying to have it react similar to a console.log... so i can stream small bits of progress of an operation
16:54 < timoxley> zackiv31 how complex are the messages?
16:54 < owen1> timoxley: "browserify": "browserify" still not working. when i type npm run-script browserify i see the help but than i see an error "Specify a parameter."  when i type npm run-script browserify hello2.js -o bundle.js  nothing happens.
16:55 < timoxley> owen1 you can't pass params to a npm run-script command
16:55 < Domenic> owen1: you need to include the parameters inside the script entry
16:55 < owen1> timoxley: Domenic oh..
16:56 < owen1> i wonder what's the retional behind this limitation
16:57 < timoxley> zackiv31 if it's simple, you could just use simple delimiter that won't occur in the normal message text… and on receiving end accumulate data until you read that delimiter
16:58 < zackiv31> timoxley: i would settle for just a log stream at this point... identical to console.log()... I'm betting its streaming... but firefox doesn't display it until i res.end()
16:59 < zackiv31> i guess im trying to avoid have to ajax poll to do this.. but that might be the only option..
16:59 < timoxley> zackiv31 socketio?
16:59 < timoxley> socket.emit('my message')
16:59 < timoxley> done.
17:01 < owen1> Domenic: i am almost there - npm run-script browserify | npm run-script uglify  not working
17:01 < marekweb> Express question: is returning from a handler function in Express equivalent to calling res.end()?
17:01 < timoxley> marekweb no
17:02 < tjholowaychuk> marekweb returning doesn't do anything
17:02 < tjholowaychuk> that's just a way to short-cirque the function execution so you dont have a ton of "else"s
17:02 < marekweb> I see
17:02 < Domenic> owen1: I don't know bash very well but would it be `npm run browserify && npm run uglify` perhaps?
17:02 < tjholowaychuk> wow spelling
17:02 < tjholowaychuk> fail
17:02 < tjholowaychuk> but yeah
17:02 < timoxley> Domenic he's trying to pipe browserify output into uglify I believe
17:03 < tjholowaychuk> marekweb that's all it is though if you see "if (err) return fn(err)" etc
17:03 < Domenic> timoxley owen1 ah that will probably fail because npm run-script prepends the output with some stuff IIRC
17:03 < marekweb> so res.end() should be explicitly called, at some point in the handling of every request?
17:04 < timoxley> marekweb ususally you'll use a helper function like res.send('my data') or res.json({my: 'data'})
17:04 < tjholowaychuk> marekweb yeah, though there are methods that do that for you (res.send(), res.render(), res.sendfile() etc)
17:04 < timoxley> marekweb rather than manually doing res.write() then res.end()
17:05 < marekweb> tjholowaychuk, timoxley: I see, thanks for the clarification!
17:06 < timoxley> marekweb helpful to wander through the express examples and tests https://github.com/visionmedia/express/tree/master/examples
17:20 < sly_> Does anyone know if someone in the node community is working on begin able to call .Net DLLs from node programs?
17:21 < Domenic> sly_: woaaaaaaah
17:26 < strk_off> I might have found a slowdown between 0.4 and 0.8
17:26 < strk_off> the _same_ .js file, using HTTP
17:26 < strk_off> takes 11 seconds to run with 0.8 and 5 to run with 0.4
17:26 < strk_off> it's not CPU time but real time
17:27 < strk_off> probably related to the HTTP module doing something weird with callbacks ?
17:27 < strk> it is 1000 requests, one after the other
17:27 < strk> with node-0.8.4: req/s:  89.69414297246391
17:27 < strk> with node-0.4.12: req/s:  189.2863903085368
17:27 < STRML> can you post a gist of the .js file?
17:28 < strk> Pasted 3435 bytes to http://codepad.org/PJr8UR4x
17:29 < strk> the _server_ is running node-0.4.12 _always_
17:29 < strk> on localhost
17:29 < strk> isn't straightforward to run
17:29 < strk> https://github.com/Vizzuality/Windshaft/tree/master/test/performance
17:29 < squeakytoy> don't be jealous guys, but my new node.js t-shirt just arrived http://blog.christoffer.me/2012/07/my-awesome-nodejs-t-shirt.html
17:30 < TooTallNate> sly_: node-ffi might be a first step towards that
17:30 < TooTallNate> assuming .net is like objective-c, and has some low-level runtime C functions to interact with it
17:30 < samholmes> To bad there wasn't an easier way to debug the browserify bundle; it's all in one monolithic file. x__x
17:31 <@benvie> need to make something that works with the CLR
17:31 < retrobaby> other_guy: check your tweets.
17:31 < strk> STRML: worth filing a ticket ?
17:31 < victusfate348> cool npm channel is quiet, any node-gyp pros in the room?
17:32 < TooTallNate> victusfate348: what do you need?
17:32 <@benvie> I know of one, a certain TTN
17:33 < other_guy> retrobaby, and the version of parent outside the function that's referenced is acting as an accumulator.
17:33 < other_guy> ?
17:33 < victusfate348> wildcard source files for compiling (howdy TooTallNate, followed your lead and moved over to node-gyp)
17:33 < STRML> strk: I don't have much time to look through the code but yeah, couldn't hurt. Maybe you can put together a version that simply runs with a simple command, so the node gurus can check it out faster?
17:33 < TooTallNate> victusfate348: afaik, gyp doesn't support wildcards
17:33 < victusfate348> ohhhh 
17:33 < victusfate348> man
17:33 < retrobaby> other_guy: was that a question or a statement?
17:33 < victusfate348> i've got 4 git submodules with loads of files, that may change
17:34 < other_guy> clarification
17:34 < victusfate348> guess I could preinstall script ls -1 them into a list and pull that into node-gyp somehow
17:34 < other_guy> so question I guess
17:34 < retrobaby> other_guy: yes
17:34 < TooTallNate> victusfate348: is it dynamic or something?
17:34 < victusfate348> yeah
17:34 < victusfate348> you know , code in flux
17:34 < other_guy> interesting
17:34 < victusfate348> new functionality getting added
17:34 < other_guy> retrobaby, thanks for looking at that
17:35 < other_guy> I don't know why that's such a weird pattern for me to grok
17:35 < victusfate348> oh hey, I fixed the really fast image loader in my fork of node-canvas
17:35 < TooTallNate> victusfate348: i think that if wildcards were supported then this would be the case: https://github.com/joyent/node/blob/master/deps/openssl/openssl.gyp#L24-625
17:35 <@benvie> you can make pre-install happen by setting dependencies
17:35 <@benvie> another module
17:35 < victusfate348> I was missing the _data = data in the function
17:36 < retrobaby> other_guy: no problem, its not that hard, u assign something to start through a reference, then you refer that reference to something new in each iteration, and u return the 'something new' at the end, which is always empty, but the changes in 'start' are always recorded
17:37 < victusfate348> thanks , will keep one of the modules wscript for now (to avoid missing source to build, etc)
17:37 < victusfate348> unless there's a better way for native modules to reuse each other's code
17:37 < other_guy> yeah I'm getting that now… what I'd rather have done is have parent be a copy of start, and then apply the operations on that copy, and then return them to be assigned back to start.
17:38 < other_guy> mostly because I don't like mutator patterns randomly in my code
17:38 < victusfate348> maybe the parent binding.gyp can refer to the submodule binding.gyp sources variables
17:38 < victusfate348> bah, too complicated. nvm. getting back to it
17:39 < victusfate348> thanks again TooTall
17:39 < TooTallNate> i mean it's not bad just adding to the "sources" list manually every time you add a new source file
17:39 < TooTallNate> that what we do for node-core
17:39 < victusfate348> yeah but imagine that for many submodules that are all changing
17:39 < retrobaby> other_guy: yeah go wild :) 
17:39 < victusfate348> seems like a great source for future pain
17:40 < other_guy> thx again retrobaby, and you too timoxley
17:40 < TooTallNate> idk, if the v8 team can manage it i think anyone can
17:40 < TooTallNate> and chromium
17:40 < victusfate348> if there's ever an effort to add wildcards to gyp, count me in
17:40 < retrobaby> other_guy: np :)
17:40 < victusfate348> ha
17:40 < victusfate348> they must use some kinda of scripting tools to manage it
17:40 < victusfate348> by hand it would be a huge pita
17:40 < strk> STRML: https://github.com/joyent/node/issues/3780 (thanks)
17:41 < strk> have a good weekend everyone
17:41 < victusfate348> scripting tools for config files for other scripting tools
17:42 < victusfate348> *waves*
17:42 < owen1> Domenic: np
17:43 < owen1> how to pipe browserify into uglify using npm run-script?
17:43 < retrobaby> i just finished a in-house light control system for my current workplace, too bad my boss doesn't want me to release the code. sigh.
17:45 < Domenic> owen1: at this point it might be worth switching to a real build script using a tool like grunt...
17:45 < timoxley> owen1 just make a single script that does both. if I was you, I'd write a shell/make/grunt script that handles all this and use npm run-script to call that
17:46 < owen1> timoxley: Domenic got it. i'll put it in Makefile
17:46 < timoxley> owen1 vote would be to use grunt
17:47 < timoxley> owen1 minification/concat etc all built in, lots of reusable 3rd party scripts available
17:50 < owen1> timoxley: i like to feel the pain before adding more abstractions
17:50 < timoxley> owen1 good philosophy
17:51 < owen1> timoxley: but i'll take a look at grunt to see what i am missing (:
17:53 < samholmes> How do I get jQuery to work with browserify? :S
18:04 <@CIA-93> node: Trent Mick v0.8 * rf70b138 / node.gyp : always link sunos builds with libumem - http://git.io/Eq0AKA
18:12 < Phoenixz> v0.9.0...? seriously? I just installed v0.8.3... like 2 weeks ago? You are fast.. :)
18:14 < TooTallNate> Phoenixz: it's an unstable release
18:14 < TooTallNate> you should stick to the v0.8.x releases for now
18:15 < AWD44> Hello i'm a little new to node.js and wondering how to check a webpage's files for a keyword including the .css .js files associated to it.  How would something like this be done in node.js?  Currently I am doing something similar in PHP in which i crawl the site and download to a folder on the localmachine and then use the grep command to search within the files
18:15 < Domenic> owen1: Makefiles are not Windows compatible which makes windows contributors sad
18:15 < Domenic> samholmes: use the jquery-browserify package
18:17 < Phoenixz> TooTallNate: Oh, don't worry, I will stick with 0.8.x for now :) I'll wait for the stable 0.10.. But even so.. node dev is going quite fast, I like it :)
18:18 < Phoenixz> TooTallNate: Can I find some planned new features for 0.10 somewhere?
18:18 < TooTallNate> hmm, not sure if there's a roadmap anywhere
18:18 < TooTallNate> i know that http refactor and streams touchups are on the table
18:18 < sly_> TooTallNate: As far as I know, you can't easily call a .Net DLL from a native C/C++ program. You need to create a COM wrapper around the .Net DLL and then in the native program you use COM to call the wrapper. So it's Native-to-COM-to-.Net.
18:19 < TooTallNate> sly_: i know nothing about communicating with COM programs
18:19 < DTrejo> dscape: would be great if the node firm "get a quote" button where more geometric. I love the rest of the design :)
18:20 < sly_> TooTallNate: but that shows how far .Net is from native
18:21 < Domenic> Does anyone know why npm doesn't auto-ignore .npmignore files? I.e. why do they get pulled down with the rest of the package.
18:21 < TooTallNate> sly_: interesting, so there couldn't be a NodObjC-equivalent for .net
18:21 < TooTallNate> unfortuante
18:21 < Domenic> It's wierd adding .npmignore to all my .npmignore files.
18:23 < sly_> TooTallNate: I think the short term solution for node-to-.net interop is probably to expose the DLL's services through a REST service of some kind that node can call.
18:29 < Domenic> Can I do a dry-run npm publish on someone else's package so that I can see what my changes to .npmignore would do?
18:31 < sly_> TooTallNate: real Node-to.Net integration will hopefully come from Microsoft one day. thanks for your help.
18:45 < fosstux> Hi! With which tools do you develop on MacOS X?
18:46 < jrm2k6> Hi guys, so here is my problem : i have a node.js app using coffeescript
18:46 < Domenic> ^ that is aproblem
18:46 < jrm2k6> when i compile using coffee *.coffee the server works
18:46 < Domenic> bdum-psshh
18:46 < jrm2k6> when i am using node app it is not working but it hsould use the ocmpiled js right/
18:46 < jrm2k6> thx Domenic 
18:46 < jrm2k6> :D
18:47 < Domenic> (CoffeeScript is cool but I'm just trying to fit in with the rest of the Node community by bashing it whenever I can, no hard feelings amirite?)
18:47 <@CIA-93> node: Joe Andaverde master * r20e12e4 / (3 files in 3 dirs): events: make .listeners() return a copy - http://git.io/CKiynQ
18:47 < jrm2k6> no worries :)
18:47 < jrm2k6> we are still using node.js btw but differently .. :)
18:47 < Domenic> CIA-93: oh shit, oh shit...
18:49 < jrm2k6> :(
18:49 < tblobaum__> Domenic: just use a gitignore, afaik
18:54 < freewil> why are there so many ops
18:54 < Niloc> bcuz.
18:57 <@maxogden> ops plz
18:57 <@maxogden> o/
18:57 < yawnt> ò/
18:57 <@maxogden> nice mohawk
18:58 <@maxogden> or maybe its a fauxhawk which would make you a spy from #rubyonrails
18:58 < jcrew> nodejs operating system
18:58 < Domenic> Is there a way for npm to update git dependencies, i.e. go out to the git endpoint and check if the local version has the same checksum as the remote one
18:59 < jcrew> it could be called NOS for awesomeness
18:59 < jcrew> we could put it in the cloud for web scale and add an i to the front of it and it could be called iNOS and the tagline should be 'right?' hahaha
19:01 < prettyrobots> jcrew: I don't get it. Walk me through it.
19:01 < prettyrobots> I know NOS is nitrus oxide.
19:01 < prettyrobots> Anyway, I'd love a Node.js operating system because then it would ROLFSCALE. But, I'd compile it to C++ for maximum performance.
19:02 < jcrew> if you say iNOS outloud you can pronounce it "i knows" and the tagline for "right?" 
19:02 < jcrew> prettyrobots: i'm just doing the marketing part
19:02 < jcrew> prettyrobots: we pretty much have a microsoft killer with iNOS,right? - we just need to do the programming part
19:02 < prettyrobots> htat's kind of what I thought.
19:03 < prettyrobots> jcrew: Totally. But if we want to kill Microsoft we'd better hurry before Microsoft finishes killing itself.
19:05 < jcrew> prettyrobots: maybe we can put that in our strategy docs, we let them kill themselves and then we don't need to do any work
19:05 < jcrew> and then we can call iNOS, right? a done product 
19:06 < jcrew> albeit a malicious product
19:06 < prettyrobots> Acutally, is anyone working on a Node.js shell?
19:06 < prettyrobots> It seems like someone would be.
19:06 < jcrew> to replace bash?
19:06 <@dscape> DTrejo: how can you see the redesign?
19:06 <@dscape> its not public
19:06 <@dscape> lol
19:06 < DTrejo> you skitched it!
19:07 < DTrejo> also im a boss hacka
19:07 <@dscape> ah
19:07 < prettyrobots> jcrew: Not saying it's a good idea, just in the spirit of the Node.js OS, there probably is an earnest attempt at a Node.js shell somewhere.
19:08 < bnoordhuis> prettyrobots: there's already nwm, a window manager in node
19:08 < jcrew> prettyrobots: we should pretty reinvent everything
19:08 < prettyrobots> jcrew: No doubt.
19:09 < jcrew> pretty much*
19:10 < prettyrobots> bnoordhuis: Video not playing.
19:10 < prettyrobots> Actually, a CoffeeScript shell might make more sense.
19:10 < jcrew> prettyrobots, bnoordhuis: nwm looks pretty cool: http://www.youtube.com/watch?v=sihgPfBj6yE
19:11 < jcrew> mtakada2 is known in the future as darth vader
19:19 < hackula> does anybody know how to get node-inspector working on Windows?
19:20 < Domenic> hackula: it worked pretty great for me locally; i couldn't use it to debug an EC2 box though :-/
19:20 < Domenic> hackula: if it requires native modules (which I think it does) you'll need to install Python and Visual C++ 2010 Express
19:20 < hackula> were you able to install it with npm?
19:21 < hackula> i have python and VS 2010 pro
19:21 < Domenic> hackula: yes, `npm install node-inspector` worked great for me.
19:21 < hackula> npm install node-inspector is failing when it gets to hiredis (which does not have windows support) so the whole install fails
19:23 < Domenic> hiredis is an optional dependency it looks like
19:23 < Domenic> what npm are you using
19:23 < Domenic> maybe you have a version before optionalDependency support was added
19:24 < hackula> hm. i have the latest
19:24 < hackula> installed last week
19:24 < Domenic> hackula: this is what I get when I install it. https://gist.github.com/3190006
19:25 < hackula> it looks like its failing because of batch file that uses a make file with a 'make' command
19:25 < thomashunter> anyone know the irc channel for node.js robotics?
19:26 < ktstowell> It was tweeted a few days ago i think
19:29 < RLa> hm, what kind of robotics
19:30 < thomashunter> sorry, I was able to find it, #robotjs
19:30 < thomashunter> I think it is for general robot development using node.js as the platform
19:31 < RLa> i think async code is well suited for robotics
19:31 < RLa> i.e for listening sensors and stuff
19:39 < Spion_> isn't lua the more appropriate choice for robots? :)
19:40 <@context> wow. moving application processing onto the network adapter.
19:40 <@context> thats pretty hardcore
19:40 < Spion_> smaller footprint, coroutines for multiple simultaneous actuator algorithms, luajit has ffi which means extremely easy interfacing with C code
19:41 < Spion_> and of course if you really want the nodejs async coding model, luvit is cool.
19:42 < txm> How can I get the client IP from node?
19:43 < timoxley> txm i think it's req.socket.address 
19:43 < txm> thanks timoxley
19:44 < timoxley> txm req.socket.remoteAddress
19:46 < drudge> req.connection.remoteAddress
19:47 < drudge> http://nodejs.org/api/http.html#http_request_connection http://nodejs.org/api/net.html#net_socket_remoteaddress
19:48 < lohkey> hmmm
19:48 < lohkey> i've ran into a bit of problem
19:48 < lohkey> i need to connect to a localhost web instance
19:48 < lohkey> but override the host header to say something else
19:50 < timoxley> lohkey this is for a test?
19:50 < lohkey> no, it's a vhost + firewall issue
19:51 < lohkey> this server isn't allowed to make external http requests due to firewall and i need to specify the vhost
19:51 < lohkey> i could just do an /etc/host override, but i need this to be self contained in the code itself
19:57 < euforic> where can I find a base project for a native node.js module for v8.4
19:57 < euforic> ?
20:02 < Justen> Is this the right place to ask a question about express?
20:03 < Niloc> #express :)
20:03 < Justen> thanks
20:03 <@dmilith> 8.4?
20:04 <@dmilith> I missed new release! ;>
20:06 <@dmilith> nothing major changed ;] I may stay on 8.3
20:16 < elepage> Hi, I am new to node.js. I try to push quite a lot of data over ajax, but after some, the server just stop responding. It is still running, no error on console, but it does not respond anymore. Why is that?
20:20 < elepage> well, it seem to timeout after 300 second and handle some more and stop again
20:22 < euforic> Any recomendations on a good bare bones node.js base CMS
20:22 < x__> hey this is my first nodejs +socket io application :) nodejs is really good:)  http://sreekumar.node.jit.su/
20:27 < RLa> x__, i can't chat with other visitors?
20:29 < x__> RLa that is not a application
20:30 < blazes816> x__, should be easy: go!
20:31 < x__> blazes816 : yeah... I'm thinking about some cool stuff... 
20:32 < blazes816> me too :).  i'm trying my had at a browser-based irc client
20:32 < x__> i think somebody is playing with that
20:32 < x__> :)
20:33 < x__> who is that ? :P
20:38 < montedani>  f
20:39 < DTrejo> x__: how many visitors now?
20:40 < DTrejo> damn, can't make it say 100
20:40 < lohkey> Host header in node.js Y U NO LET ME OVERRIDE YOU :(
20:41 < x__> DTrejo i got about 177 visitors
20:41 < x__> i think somebody opened some 100+tabs
20:41 < bradleymeck> lohkey, it does but if you are on some PaaS it will revert it during load balancing
20:41 < lohkey> i am not
20:47 < yarekt1> Hi all. Using socket.io. I emit 'replay' from the client, and ask the server to push series of batches to 'replay' on the client. Client does processing on each batch (so there builds up a queue). Id like to have a callback that I gave in the initial emit to server fire when the client is done with the last batch. Is this the best conceptual approach?
20:52 < thewanderer1> guys, what scope can this construct access?  function(){}  // I'm confused, because it seems to be able to see "global scope" variables just fine, but local variables inside the function where it's instantnated are invisible to it
20:53 < thewanderer1> for a broader picture: I'm wondering why array.forEach(function(item){ record some stats; }) can not access external stat counters
21:04 < yarekt1> i would guess that they are not in the scope where you create the function
21:04 < yarekt1> hard to tell without looking at the rest of the code
21:05 < yarekt1> thewanderer1: ^^
21:05 < thewanderer1> aaa-ha! I was using "this". *facepalm*
21:06 < thewanderer1> now I see why some modules come with "var self = this;" as the first statement in every major function
21:10 <@sriley> thewanderer1: you just need to bind your scope
21:10 < thewanderer1> sriley: errr, what do you mean?
21:11 <@sriley> https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind
21:12 <@sriley> or use call/apply
21:13 < thewanderer1> oh, right
21:31 < yarekt1> i'll try to rephrase my question, With socket.io is it possible to get a client side ack on a message?
21:32 <@jesusabdullah> what is an ack
21:32 < yarekt1> acknowledgement
21:32 <@jesusabdullah> yes
21:32 < victusfate> what's the best way to use a package like cairo or cairomm-1.0 with node-gyp in a binding.gyp file?
21:32 <@jesusabdullah> You get two way communication
21:33 < TooTallNate> victusfate: well the "best" way would be to write a gyp file for the dep and build it through gyp
21:33 < TooTallNate> statically that is
21:33 < TooTallNate> but the "easiest" way would be something like what node-canvas has
21:33 < victusfate> heyo TooTall
21:34 < yarekt1> jesusabdullah: if i do socket.emit('message', {}, function(){console.log('ack');}); on the client side the function is undefined
21:34 < victusfate> I manually added a ton of paths, and then link targets
21:34 < victusfate> feels like the wrong way to do it
21:34 < TooTallNate> victusfate: https://github.com/LearnBoost/node-canvas/blob/master/binding.gyp#L34-37
21:34 < victusfate> yup
21:34 <@jesusabdullah> yarekt1: You may be doing it wrong?
21:34 < victusfate> how about the include path?
21:34 < yarekt1> jesusabdullah: https://github.com/LearnBoost/socket.io#getting-acknowledgements
21:35 < TooTallNate> victusfate: well that's assuming you have cairo installed in "a default system path"
21:35 < TooTallNate> i.e. /usr/local/include
21:35 < victusfate> brew installed it
21:35 < yarekt1> jesusabdullah: the sentence says exactly what i need to do. But the example is of a server side ack
21:35 < victusfate> and
21:35 < victusfate> brew linked it
21:35 < TooTallNate> victusfate: you should be fine then
21:35 < victusfate> groovy
21:36 < victusfate> TooTallNate: worked ok for cairo, not as well for cairomm-1.0, graphicsmagick++, etc
21:36 < victusfate> TooTallNate: I ended up adding a half dozen include directories to find all the files
21:37 < victusfate> tooTallNate: some in /usr/X11
21:37 < victusfate> TooTallNate: here's the most egregious one /usr/local/include/cairomm-1.0/../../lib/cairomm-1.0/include/',
21:38 < victusfate> TooTallNate: thanks again for the help, appreciate your time. Do you hang out in node.js all day?
21:39 < TooTallNate> victusfate: no prob. and ya, you can usually find me here when i'm online
21:39 < TooTallNate> at least type "gyp" and I'll get pinged ;)
21:39 < victusfate> TooTallNate: have a good night 
21:39 < victusfate> roger
21:41 < yarekt1> Yea, i'm stuck with this. If anyone could help I would really appreciate it
22:07 < EhevuTov> anyone using a message queue library like ZeroMQ but with a more permissive license?
22:10 < tjholowaychuk> EhevuTov i've been hacking on https://github.com/visionmedia/super-sockets when i have time
22:11 < tjholowaychuk> but that's node specific
22:11 < tjholowaychuk> i think martin's is has a pretty bad license im not positive though
22:11 < EhevuTov> tjholowaychuk, ah thank you. Yes, it needs to be cross-language. I'm communicating the company's .NET service to a C or node program of mine
22:11 < tjholowaychuk> ah
22:11 < tjholowaychuk> hmmm
22:12 < tjholowaychuk> he changed the name lately i cant find it now
22:12 < tjholowaychuk> "nano" or something
22:12 < tjholowaychuk> i think it's BC with zmq
22:13 < EhevuTov_> sorry, dc'ed tjholowaychuk. Spotty work net. tjholowaychuk, yeah, ZMQ and crossroads are both LGPL which will scare my boss. Our senior programmer hates open-source. I'm trying to give them an option for a mq system with a permissive license
22:14 < samholmes> Which is the best redis client for node?
22:14 < DTrejo> node_redis!
22:14 < DTrejo> npm search redis
22:14 < npmbro> DTrejo: Please see http://eirikb.github.com/nipster/#redis
22:16 < tjholowaychuk> samholmes node_redis !
22:16 < samholmes> K. I got it. xP
22:16 < EhevuTov_> tjholowaychuk, I'll be following that mq. Much nicer license. thanks
22:17 < tjholowaychuk> samholmes the other one is defunct i think
22:17 < tjholowaychuk> but node_redis is really nice
22:17 < samholmes> Which other one?
22:18 < DTrejo> npm docs redis-node
22:18 < npmbro> DTrejo: Please see http://github.com/bnoguchi/redis-node#readme
22:18 < DTrejo> is defunct
22:18 < DTrejo> because npm stats redis-node
22:18 < DTrejo> npm stats redis-node
22:18 < npmbro> DTrejo: Stats for redis-node: Latest v0.4.0 published a year ago, last pushed to GitHub a year ago, 11 forks, 93 watchers, 2 tweets
22:18 < coderanger> Anyone know if Jade has a normal IRC chan?
22:18 < DTrejo> ask your question and we may be able to answer
22:19 < samholmes> Is redis persistent?
22:19 < samholmes> Or what I mean is, can it be?
22:19 < coderanger> I am investigating how to do translation of text in Jade templates
22:19 < DTrejo> samholmes: if you set it up the right way, yes
22:19 < samholmes> DTrejo: Any good resources on that?
22:19 < coderanger> #foo #{gettext('Text')} seems rather ungainly
22:19 < coderanger> Wondering if there is a better way, or if not if it would be a patch of interest upstream
22:20 < DTrejo> samholmes: http://redis.io/topics/persistence
22:23 < coderanger> hmm, I don't see a #jade or similar
22:26 < yarekt1> Whats the difference between socket.emit() and socket.send() ?
22:28 < Gateway69> is their a package for ubuntu to install libuv, i seem to be missing it for some node stuff i would like to do, i installed node on ubuntu 12.04 with apt-get install nodejs
22:30 < DTrejo> yarekt1: one does what you want and one is not documented as doing anything ;)
22:31 < DTrejo> anytime you do .emit you are exposing an evented API to someone else. The user of a library should never really call emit, unless it's socket.io or something
22:32 < DTrejo> so you should never call emit on a node socket
22:32 < DTrejo> that's my understanding
22:32 < yarekt1> fro socket.io docs: "To do this, simply pass a function as the last parameter of `.send` or `.emit`. What's more, when you use `.emit`, the acknowledgement is done by you"
22:32 < DTrejo> a socket.io socket is different b/c you want to send stuff to the client by emitting it from the server
22:32 < yarekt1> from*, DTrejo ^^
22:32 < DTrejo> okay, so if it is socket.io, then you do want to emit
22:32 < DTrejo> as for the difference between the two, I don't know
22:33 < DTrejo> socket.io was rewritten as engine.io
22:33 < DTrejo> npm docs engine.io
22:33 < npmbro> DTrejo: Please see http://search.npmjs.org/#/engine
22:33 < DTrejo> I recommend you check it out
22:33 < yarekt1> I'm looking for a way to acknowledge a message from clientside
22:33 < yarekt1> Will do
22:33 < DTrejo> it is better engineered, and may have better docs, maybe
22:33 < yarekt1> DTrejo: It looks very old, 258 days
22:34 < DTrejo> yarekt1: apologies, here is the link https://github.com/learnboost/engine.io
22:34 < DTrejo> actually... it might be too low level
22:35 < yarekt1> Yea, i think thats what socket.io is written on
22:36 < DTrejo> you do acking by .emit("event", "data", callbackfunction);
22:37 < DTrejo> and then when callback is invoked, you know it worked
22:37 < yarekt1> DTrejo: Yea, doing that from the client. and then executing the callback on the server works
22:37 < yarekt1> I need to send a message from the server, and know when the client has acked it
22:38 < yarekt1> basically i have a race condition. I'm sending a bunch of data, and it arrives out of order. I need to know when the last batch has arrived (last as in, out of all)
22:38 < EhevuTov__> I think AMQP is the only MQ system that has a license I can use at work
22:51 < DTrejo> yarekt1: so multiple .sends and then knowing when all are done?
22:51 < coderanger> AMQP is a protocol, not a server
22:52 < EhevuTov> coderanger, correct
22:52 < yarekt1> DTrejo: basically, client is drawing the data, and that takes a good few milliseconds. If i send an empty 'done' message from the server, that just gets executed before the drawing is complete client side
22:53 < DTrejo> then you should use async on the client side to help manage the tasks or whatnot
22:53 < yarekt1> DTrejo: What do you mean?
22:54 < yarekt1> I used to push them all in a queue before, and then loop through it and process. but that turned out to be messy, and not memory efficient, i had to keep the whole data in memory at the end
22:55 < DTrejo> well, you want both rendering and server tasks to be done, so you can use something like async to let you know when both are done
22:55 < DTrejo> yeah I can't help that much
22:55 < yarekt1> DTrejo: if thats a framework or a module, i've never heard of it before
22:55 < samholmes> Does redis only run on linux? And mac?
22:55 < DTrejo> would need to see minimal code samples and/or hear more about what the app is doing
22:55 < DTrejo> samholmes: runs on both
22:56 < DTrejo> npm docs async
22:56 < npmbro> DTrejo: Please see http://github.com/caolan/async#readme
22:56 < DTrejo> yarekt1: ^
22:56 < yarekt1> Ahh, i think i've heard about this before. It didn't click that it would be useful for this. Thanks
22:58 < yarekt1> But there is another race condition even when using this. If the server is abit slow, and sends the second batch after the client has finished processing, it would think that its done
23:00 < yarekt1> the only way i can see this working is have a system where client asks for each chunk
23:00 < yarekt1> but thats kinda bad, as the data is streamed from one db query
23:07 < samholmes> How do I run redis on windows for my development environment? There's an unofficial project for win32/64, but it's not production quality. Does this mean that my code could break while developing, but just fine on the production machine (linux)?
23:07 < samholmes> , but work just fine*
23:08 < yarekt1> samholmes: Its never a good idea to develop on such different platforms. You could be coding around issues that don't exist in your production platform
23:12 < samholmes> yarekt1: True, so should I just run a dev environment on my VPS? But, if I do that I loose all the benifit of working locally on my machine.
23:13 < yarekt1> samholmes: if you insist on working with Windows. I suggest you run a clone of your production env in a virtual machine, locally
23:16 < samholmes> yarekt1: I would perfer to work in a OS X environment, but I haven't gotten my mac yet. However, how would I even do that; files will be stuck inside the VM and I'd have to upload to my machine as if it's a server.
23:18 < yarekt1> samholmes: What do you mean stuck ? 2 ways. Either mount the sources directory as a folder on windows, and let smb do the uploads. Or just rsync the sources
23:18 < yarekt1> (well, there are actually more than 2 ways, alot more)
23:18 < samholmes> Idek
23:19 < yarekt1> You can always run redis in the VM, and connect to it with node from windows ?
23:20 < samholmes> That's a good idea
23:20 < samholmes> Or, I could run the redis on my VPS, and then do the samee
23:20 < samholmes> same*
23:20 < yarekt1> except you incur delays
23:20 < samholmes> Hmm. right
23:21 < yarekt1> Also, depending on how important this project is. ie. will you get murdered if you fuck your live db
23:21 < yarekt1> up*
23:21 < samholmes> haha, strange how one little word such as "up" can make the biggest difference in how a sentence is interpretted. xP
23:24 < samholmes> Am I naive to think that if I had a Mac I would have barely if not any incompatibility issue when develping my node apps to run on linux?
23:25 < EhevuTov_> samholmes, no, that would be correct. You would have some issues with maybe something like symlinks on various OS'es
23:25 < EhevuTov_> Node is made to be portable like that
23:26 < samholmes> EhevuTov_: not only node though, but redis, and a lot of other node modules would be less buggy on OS X. Not to mention, I'd have a proper bash shell.
23:27 < yarekt1> samholmes: Id say try it on windows. If its too weird, connect to your VPS, if thats too slow, clone it locally in a VM 
23:27 < yarekt1> by that time your mac should arrive
23:28 < samholmes> I might disconnect momentarily
23:32 < TehShrike|Work> Can anyone recommend a good non-blocking MySQL module?
23:32 < yarekt1> TehShrike|Work: https://github.com/felixge/node-mysql/blob/master/Readme.md
23:33 < TehShrike|Work> yarekt1: excellent, thank you
23:34 < TehShrike|Work> yarekt1: have you used it?  It it pretty solid?
23:34 < yarekt1> TehShrike|Work: Using it right now (was reading that page too). Query streaming is awesome
23:34 < TehShrike|Work> Oh, now there's a set of words that interests me
23:34  * TehShrike|Work reads further
23:35 < TehShrike|Work> That is incredibly interesting...
23:35 < TehShrike|Work> I think I feel very good about that feature
23:37 < yarekt1> glad i could help
23:45 < EhevuTov_> tjholowaychuk, Crossroads I/O is permissible if you compile it statically
23:45 < tjholowaychuk> EhevuTov_ hmm interesting
23:46 < EhevuTov_> I'm not sure why, actually.
23:46 < tjholowaychuk> I figured he split to do some more commercial enterprisy crap
23:46 < EhevuTov_> yes, they had a falling out. I couldn't make out the details as of why, except it seemed the argument was feature based
23:47 < tjholowaychuk> i like that he's ditching c++ though that alone
23:47 < tjholowaychuk> makes me like it more haha, when it has feature parity at least
23:47 < EhevuTov_> I think a lot of people do
--- Log closed Sat Jul 28 00:00:35 2012
