--- Log opened Tue Aug 21 00:00:57 2012
00:04 < nicholasf> hi, is there a list of major production apps written in node?
00:05 < Randomachiever> nicholasf, I think voxer is
00:19 < meme> hello, i'm about to built a brand new server to deploy node.  I will go for node/nginx settings, but i was also thinking to server some php scripts. Since i'm not the experienced sysadmin, i ask you. Can the same nginx proxy node and also serve php?
00:20 < holzp> yes
00:21 < meme> great, any special step? the node/nginx part, i'm following this http://cuppster.com/2011/05/12/diy-node-js-server-on-amazon-ec2/ , but not sure how would be inserting the php in the midle
00:37 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
01:13 < itamari> is anyone using Backbone.js on the client? How are you handling server-side validation?
01:31 < pringlescan> I want to make an NPM module that is a wrapper around tesseract-ocr… does that mean I need to try to download or compile tesseract ocr when you install my module, or should I just accept the path for it? it has several depdencies and takes a little while to compile on an Intel i7
01:34 < bradleymeck> pringlescan: use gyp to find it if you dont want to bundle it
01:35 < pringlescan> bradleymeck, so http://code.google.com/p/gyp/wiki/GypUserDocumentation is supported by node? it's not that big of a deal, I can support osx and linux, I just have no desire to include windows support
01:36 < bradleymeck> pringlescan: don't worry about windows, but use gyp for native modules
01:36 < pringlescan> node-gyp, correct?
01:36 < bradleymeck> it does some stuff you really dont want to do, yes
01:37 < pringlescan> the preferred method to fetch external code dependencies would be to do an clone the repository of that project and run the necessary commands to compile it if I did want to do that?
01:38 < bradleymeck> pringlescan: the preferred way is to include a vendored copy in your code base like what node does, dont expect npm users to allow you to run git
01:38 < pringlescan> so I should include the proper binaries for each os/arch and download just the ones I need?
01:39 < bradleymeck> pringlescan: dont include binaries, build from source, binaries can be bad if you try to detect the right arch yourself
01:40 < bradleymeck> pringlescan: just use gyp and assume a shared lib is easier if you can expect ppl to have it
01:40 < pringlescan> so, I include the source in my npm module, and use gyp to pick the right ones to build
01:42 < pringlescan> I'll read the documentation, I'm just not sure where to start, as NPM isn't part of node from what I understand
01:43 <@konobi> it's included with node
01:45 < mscdex> node.js rules!
01:45 < pringlescan> konobi, but I thought npm was a separately managed entity 
01:46 <@konobi> it's bundled
02:02 < blueadept> anyone here have Clear wireless internet?
02:02 < pringlescan> blueadept, I used to have it at work, what's up?
02:02 < twosevenzero> these are moments when I swear we are being watched
02:02 < twosevenzero> I was just looking up Clear
02:03 < pringlescan> I'm trying to call something using exec() that is in my terminals path (it's in /usr/local/bin) but exec looks for it in /bin/sh… what's the preferred way to address this
02:04 < blueadept> pringlescan: ah just wondering abou the speed quality
02:05 < pringlescan> bueadept, it depends where you live, I was very surprised how fast it was, but this was in an afluent suburb of philadelphia (king of prussia). we had an older portable hot spot and still got around a megabyte down… but the pings were I think in the 100ms range if I remember
02:05 <@konobi> use the full path
02:05 < pringlescan> you'll notice you're not on fiber or cable but it's not bad unless you're downloading big files
02:05 < blueadept> interesting, yeah i just hate ATT and there my ownly option in my apartment building
02:05 < pringlescan> konobi, it's for a wrapper module, the path will be different on each system, why is it assuming /bin/sh instead of looking in my systems paths?
02:06 <@konobi> pringlescan: checked process.env.PATH ?
02:08 < pringlescan> ah hah! the wrapper I forked made a function called "process" which prevented node from reading that info… that makes tons of sense… thanks konobi
02:10 < pringlescan> Either way, my system's path = "/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/X11/bin:/usr/local/git/bin:/usr/local/sbin" and node only has "/usr/bin:/bin:/usr/sbin:/sbin"
02:10 <@konobi> different user?
02:11 < pringlescan> nope, not according to whoami… I can do this: process.env.PATH += ':/usr/local/bin'; and it works… but it's very odd that the path seems to be generic rather than based upon my system
02:14 < pringlescan> konobi, apparently the node.js module for idea based IDEs doesn't pass system env variables to node, I'll file a bug report because the module has options for env variables but the + and - button are disabled… 
02:14 <@konobi> pringlescan: depends what you mean by "system", there's user env vars then there's the actual system ones (from /etc/profile generally)
02:15 < pringlescan> konobi, it works as expected directly from terminal on root and my username
02:15 <@konobi> pringlescan: vim
02:15 < pringlescan> yeah… I barely use the refactoring tools anyway, I should just use jslint and regexps
02:15 < pringlescan> and the step debugger doesn't even work so there's really no benefit
02:16 <@konobi> and you can use node-inspector for debugging
02:16 <@konobi> Nuck: tell you what... appjs + node-inspector would be sweet
02:23 < pringlescan> tesseract_ocr doesn't allow writing to stdout, only to a file, I wanted to offer streaming in my wrapper, would it be insane to open a pipe to the process and give the named pipe as the filename for output to the app?
02:37 <@maxogden> ive done that before
02:44 <@maxogden> substack: isaac said he had planned on implementing that but hasnt yet, it would be super awesome
02:45 < echosystm> what is the best ORM that supports progres?
02:45 < echosystm> also, support for migrations would be ideal
02:46 < coderarity> echosystm, you mean postgres?
02:46 < echosystm> yes, postgres haha
02:46 < echosystm> that was an intense type
02:46 < echosystm> *typo
02:46 < echosystm> holy shit im doing awesome tonight
02:46 < chilts> there _used_ to be a DB called Progress though :)
02:46 <@maxogden> you forgot the e in your username too
02:46 < chilts> not the same as Postgres however :)
02:46 < coderarity> echosystm, http://www.sequelizejs.com/
02:47 < echosystm> thanks coderarity 
02:47 < echosystm> would this work well with towerjs?
02:47 < coderarity> idk
02:48 < coderarity> i know nothing about tower.js too much like rails for me
02:48 < echosystm> ok
02:49 < echosystm> what is a good alternative?
02:49 < echosystm> i really want the full stack - mailer, good routing/controllers, localisation, auth, orm, etc.
02:49 < echosystm> oh, asset handling of some kind too
02:50 < coderarity> idk, maybe flatiron?
02:50 < coderarity> http://flatironjs.org/
02:50 < coderarity> ^htat's flatiron
02:50 < coderarity> that's*
02:53 < pringlescan> Wrapping a terminal app in Node.js and writing the output to a fifo and reading from it only takes 140ms longer according to time than executing it without node… that's really not too bad when stdout isn't an option.
02:54 < rvagg> any aussies (and others perhaps) want to contribute to this discussion just give me your twitter handle and I'll add you: http://branch.com/b/could-we-pull-off-a-nodeconf-au
02:56 < owen1> in my Makefile i have a 1 liner to start my development environment: mongod & ./node_modules/stylus/bin/stylus public/css/app.styl -w & supervisor node server.js &  the problem with this approch is it doesn't show up in the 'jobs' command so if i want to kill it i have to find those processes with ps. any ideas?
02:59 < samholmes> is there a way to set up some kind of stream between the client and the server? Instead of loading a set of JSON data which can be searched in real-time on the front-end, and instead of making an ajax request for the data as the typing is occurring, what if you could just hook up somekind of stream and as the typing occurs the data is loading in real-time.
03:00 < coderarity> samholmes, check out web sockets, like http://socket.io
03:00 < samholmes> coderarity: I'm using socket.io. But what I'm thinking is instead of emitting events to communicate to the server...
03:01 < samholmes> instead of calling it a "stream" it's more of a server-hosted data set.
03:01 < samholmes> In other words, you can search it and query it from the client-side, but all the data is piped down from the server.
03:01 <@maxogden> elasticsearch does that
03:02 < samholmes> Right now I'm loading a JSON object into my script via ajax, and then using that object to search through..
03:02 < coderarity> seriously, I can't read that
03:02 < samholmes> maxogden: I'll google it
03:03 < samholmes> coderarity: read what?
03:03 < coderarity> samholmes, just about anything]
03:04 < coderarity> samholmes, sorry
03:04 < samholmes> well, okay
03:04 < coderarity> yep
03:31 < zivester> whats a common place to put static assets in a node module? public/ ?
03:32 <@Nexxy> zivester, static assets intended for client-side consumption?
03:34 < zivester> Nexxy: yes... images/css/javascript
03:37 <@Nexxy> zivester, yeah I think that's a fairly standard location ^-^
03:42 < joaojeronimo> Are there any alternatives to the forever module ? I'm deploying to environments low on RAM and the extra node process for monitoring my apps it has use... I wish I could not have it..
03:43 < rvagg> your OS may have something native, like upstart for Ubuntu
03:44 < joshwnj> joaojeronimo: how much extra RAM is forever using?
03:45 < joaojeronimo> joshwnj, 13mb - 17mb of shared memory per monitor
03:45 <@Nexxy> joaojeronimo, I'd recommend upstart if it's available
03:45 < deoxxa> joaojeronimo: do you understand shared memory
03:45 < deoxxa> (honest question, not trying to be a jerk)
03:45 < joaojeronimo> deoxxa, not really not
03:45 <@Nexxy> deoxxa, you're just so good at it you don't even have to try!
03:45 < deoxxa> basically shared memory is exactly what it sounds like - shared
03:46 < joaojeronimo> Nexxy, I would love to use upstart but I have to deploy to machines with centos 5 so that would be a challenge
03:46 < joshwnj> me neither so i'd love to hear a good explaination :D
03:46 < deoxxa> that's where things like dynamically loaded code goes
03:46 < deoxxa> so if 5 different applications link against libsomething.so, it'll only be loaded once
03:46 < deoxxa> that memory will be shared between them
03:46 <@Nexxy> joaojeronimo, well there's initctl
03:47 < deoxxa> the memory you want to worry about is resident memory - but even then it's a bit misleading
03:47 < joaojeronimo> joshwnj, I'm sorry I said 13-17mb of shared memory, I wanted to say resident memory
03:48 < joaojeronimo> thanks for that explanation deoxxa :) quite simple
03:48 < deoxxa> not all the of the resident memory will be paged in at once, either, which makes things a bit trickier to figure out
03:48 < deoxxa> and v8's garbage collector again complicates things
03:48 < deoxxa> heh
03:48 < deoxxa> so it's hard to eyeball a memory reading and see if it's actually affecting you
03:48 < joaojeronimo> I see...
03:49 < joaojeronimo> well I have strong evidence to say that forever is using 13mb - 17mb of resident memory per node process it has to monitor... it launches a node process per other node process it has to monitor...
03:50 < deoxxa> basically if 12mb of that resident memory is parts of the program image that aren't ever being accessed, it'll pretty quickly be moved out to swap and you won't be affected by it
03:50 < deoxxa> assuming you have swap
03:51 < joaojeronimo> I have to monitor 4 processes on a linode box with 512mb of RAM.. so it's that plus 20mb - 50mb for the processes... RAM is getting scarce...
03:51 < chilts> joaojeronimo: do you have upstart on the machine? that can monitor and restart processes if needed
03:51 < joaojeronimo> deoxxa, that might be the reason that instance is still up lol
03:52 < joaojeronimo> chilts: I have upstart on one machine but I don't have on others and I'd like to keep them the more homogeneous as possible... but it's coming at a cost
03:52 < deoxxa> joaojeronimo: try running the applications in screen or something temporarily - if you see no speed difference, it's probably not something you have to worry about
03:53 < deoxxa> like it's all well and good to minimise resource usage, but if it makes no actual difference to anything it might just be a wild goose chase
03:54 < joaojeronimo> yeah... well, thanks for all the clarifications guys, I'll get back to work now..
03:54 < deoxxa> \o/
03:54 < timeturner> forever is unnecessary
03:54 < deoxxa> you're unnecessary!
03:54 < timeturner> just use visionmedia/mon
03:55 < timeturner> it's small, fast, and written in C
03:56 < timeturner> and you can mon(1)itor the mon(1) as many times as you want
03:57 < joshwnj> deoxxa: can you please elaborate what you mean by running applications in screen? haven't come across that before
03:58 < deoxxa> ah, screen is a terminal multiplexer thing
03:58 < deoxxa> basically lets you keep a terminal open after you close your session by providing a virtual tty to the process running inside it
03:58 < deoxxa> it's a cheap (and dirty) way of keeping a process running after you log out
03:59 < timeturner> that's a horrible way to keep your processes running
03:59 < deoxxa> yes it is
03:59 < deoxxa> yet it ends up being the main method of running processes continually in a lot of deployments :<
03:59 < timeturner> as a daemon for a server
03:59 < timeturner> that's...sad
03:59 < timeturner> I didn't know that actually :(
04:00 < timeturner> I thought people at least used node app.js& or something
04:01 < joshwnj> so deoxxa is there some benefit to be gained from doing it this way? or you're just suggesting it as a quick-n-dirty approach?
04:01 < timeturner> https://github.com/visionmedia/mon/
04:01 < timeturner> very easy
04:02 < deoxxa> joshwnj: well it's useful if you have a REPL or something on your application
04:02 < timeturner> and that you can effectively run within temux or screen
04:02 < deoxxa> joshwnj: so you can reconnect to the terminal and issue commands
04:02 < timeturner> tmux*
04:02 < joaojeronimo> still about monitoring nodejs processes, I found God (http://godrb.com/) which seems to be a process monitoring framework written in ruby. How much RAM would ruby take ? I only heard that it's possibly the worst VM in the world but don't know much more about it... Should I look into it ?
04:04 < joshwnj> deoxxa: nice idea, thanks
04:05 <@Nexxy> joaojeronimo, you're worried about RAM usage and you're considering using ruby to keep node running?
04:06 < timeturner> that's why I kept quite ^
04:06 < joaojeronimo> Nexxy, so I guess it's a no lol... I don't know anything about ruby actually...
04:06 < timeturner> you can lead a horse to water but you can't make him drink
04:06 < timeturner> quiet*
04:10 < joaojeronimo> timeturner, you mentioned https://github.com/visionmedia/mon.... It seems to be C code so it might be the best thing to monitor processes... I think I'm going to use it ...
04:10 < joaojeronimo> will help me gain back about [13:17]*4 MB of ram...
04:10 < deoxxa> (theoretically)
04:10 < timeturner> sorry to be harsh. I got carried away :/
04:11 < timeturner> but yeah mon(1) is nice
04:12 < joaojeronimo> too bad mon is not in npm
04:12 < timeturner> well it isn't a node module
04:12 < timeturner> it's a C program
04:13 < deoxxa> i'd love npm for c
04:13 < joaojeronimo> yes you're right
04:13 < deoxxa> that would be so awesome
04:17 < joaojeronimo> ok so mon(1) will solve all my problems, except that now I need to gracefully kill my servers... and with websocket connections that won't be so easy I think..
04:18 < joaojeronimo> I think I'm going to write code so they can reconnect and continue as if nothing happened...
04:21 < timeturner> store state in redis
04:21 < timeturner> or some other process in memory
04:21 < timeturner> and persist to disk if you want
04:22 < joaojeronimo> timeturner, I already do that, the problem now will be connecting back the client to the back-end web socket server where he was first connected
04:22 < joaojeronimo> if it were plain HTTP then I'd add a cookie to ensure persistence to the same backend...
04:22 < joaojeronimo> I'm using haproxy btw
04:24 < joaojeronimo> that back-end persistence would save me from having one redis state storage database... with back-end persistence I could have one state storage for each backend, completely separate from the others
04:31 < TehShrike> Hah, the latest NodeUp is even crazier than I was expecting
04:32 < axefrog> I'm running some nodeunit tests and all the tests appear to complete successfully but the process doesn't exit, which means something's holding on in the background. Is there any way query node for diagnostic information?
04:37 < timeturner> joaojeronimo: check out visionmedia/axon
04:38 < joaojeronimo> timeturner, I saw it but I like to use zeromq... what were you suggesting ?
04:39 < timeturner> zeromq is the best and has the lowest latency
04:39 < timeturner> I haven't used it that much though
04:40 < joaojeronimo> timeturner, axon is for when you don't need low latency and don't want to compile zmq
04:40 < timeturner> yeah
04:41 < timeturner> if you're already using zeromq then axon isn't useful
04:47 < wookiehangover> fwiw I've been using https://npmjs.org/package/zmq in production for a fair while, haven't had any problems...
04:52 < thealphanerd> wookiehangover: LOL
04:53 < thealphanerd> sorry… love the name
04:53 < thealphanerd> spend a lot of time on the lot?
05:21 < Hotroot1> Since #mongodb is utterly useless, I hope someone here can help me with this
05:21 < Hotroot1> I'm using mongolian, and the forEach won't go off on the following query
05:21 < Hotroot1> https://gist.github.com/b1da92e2bbcb7f2d944c
05:22 < Hotroot1> dbpotions is a collection of course
05:22 < AAA_awright> Hotroot1: Glad I'm not the only one who thinks #mongodb is the second most useless channel on Freenode
05:23 <@Nexxy> AAA_awright, the first?
05:23 < AAA_awright> :s
05:23 < Hotroot1> A few times I've gone there, asked a question, sat there for 10 min, then just left
05:23 < AAA_awright> #ubuntu
05:23 < Hotroot1> Like for fucks sake, 300 people and nobody answers questions? Why are they even there?
05:23 < thealphanerd> Hosh: are you using jquery?
05:23 < AAA_awright> Hotroot1: Well usually you might need to wait an hour or so at least, that's not a reason
05:24 < AAA_awright> I'm talking plain unhelpful and rude
05:24 < Hotroot1> Ah
05:24 < Hotroot1> Well could you pretty please take a look at my code?
05:24 < Hotroot1> No idea what's wrong with it
05:24 < AAA_awright> I'm trying to figure out what it does :-\
05:24 < Hotroot1> Almost an exact copy of the forEach code on the github page for mongolian
05:24 <@Nexxy> what if I told you people had lives that exist beyond the internet
05:24 < Hotroot1> AAA_awright: It's mainly test code.
05:25 < thealphanerd> Nexxy: lies
05:25 < Hotroot1> Nexxy: Duh, but 300 people and nobody active is annoying
05:25 < AAA_awright> Hotroot1: did you try console.log(arguments) in each function? Are you using mongolian?
05:25 < AAA_awright> Oh cool
05:25 < AAA_awright> That's how I use it iirc
05:25 < medice> Nexxy: those are just stories used to scare the children
05:25 < AAA_awright> There's also a really neat next() function to get one record at a time
05:25 < Hotroot1> AAA_awright: I've been console.log'ing damn near everything
05:25 < AAA_awright> Hotroot1: And what's it output?
05:25 < ljharb> just found a bug in EJS between 0.6.1 and 0.8.2 - view helpers can no longer begin with the string "include" http://code.google.com/p/embeddedjavascript/issues/detail?id=25 in case anyone's interested
05:25 < Hotroot1> Yes, mongolian
05:26 < Hotroot1> AAA_awright: Hmm?
05:26 < Hotroot1> This forEach never goes off
05:26 < AAA_awright> Hotroot1: What's the output when you place console.log(arguments) in the first line of each function
05:26 < AAA_awright> Really?
05:26 < AAA_awright> Because it looks fine
05:26 < AAA_awright> Hotroot1: dboptions is a (new Mongolian).collection('name') ?
05:26 < Hotroot1> That console.log ("In v1") does not go off
05:27 < AAA_awright> Hotroot1: Try the query in the mongo REPL
05:27 < Hotroot1> var dbitems = mongoServer.db("nethackitems");
05:27 < Hotroot1> var dbpotions = dbitems.collection("potions");
05:27 < AAA_awright> I like where this is going
05:27 < thealphanerd> potions?
05:27 < AAA_awright> Woa, somehow I was reading that as db_options
05:27 < ljharb> Hotroot1: is it an actual array returned from "find", or just something array-like?
05:27 < thealphanerd> what is this app doing >?
05:28 < Hotroot1> Then dbitems is passed to a module where that code lies, and I do var dbpotions = blah again
05:28 < AAA_awright> dbPotions
05:28 < Hotroot1> This is a nethack irc bot
05:28 < ljharb> Hotroot1: can you console.log the output of dbpotions.find()?
05:28 < Hotroot1> Good idea
05:28 < ljharb> i'd be willing to bet it's either empty, or not actually an array.
05:28 < AAA_awright> Hotroot1: Try the query in mongo... `mongo nethackitems` then > db.potions.find({baseprice: v1})
05:29 < AAA_awright> Hotroot1: Maybe there's just no results
05:29 < Hotroot1> There is, I switched it from v1 to 100
05:30 < AAA_awright> ljharb: collection.find() doesn't actually return anything in mongolian, you have to get the results with something like next(), forEach(), or toArray()
05:30 < Hotroot1> I am about to facepalm so hard my head will fly off
05:30 < AAA_awright> Hotroot1: What was the problem?
05:30 < Hotroot1> A typo of course. I had to rewrite the db and wrote baseprice as price...
05:30 < Hotroot1> Thanks for the idea
05:31 < Hotroot1> Going to kill self, brb
05:31 < AAA_awright> Cool, let us know if that works out successfully!
05:32 < Hotroot1> Here goes nothing
05:32 < Hotroot1> (Hopefully not)
05:33 < Hotroot1> JS's type system confuses me
05:33 < Hotroot1> >>var blag; blag.push(1);
05:33 < purr> Hotroot1: TypeError: Cannot call method 'push' of undefined
05:33 < ljharb> AAA_awright: that doesn't make sense to me - so forEach there isn't an array method, it's a custom mongolian method?
05:33 < Hotroot1> It can't figure out I want an array?
05:34 <@Nexxy> it could if you told it you did
05:34 < Hotroot1> Just strange that it's so weakly typed, and still does stuff like that
05:34 < SomeoneWeird> >>var blag = []; blag.push(1);
05:34 < purr> SomeoneWeird: (number) 1
05:34 < thealphanerd> Hotroot1: there is a lib called infusion
05:34 < thealphanerd> they have an .ecah method
05:34 < AAA_awright> ljharb: It's an object containing the query you've built up, it only actually executes when you first call next() or such
05:34 < Hotroot1> I guess .push doesn't necessarily imply an array
05:34 < thealphanerd> give it array or object and callback
05:34 < ljharb> ah
05:34 < SomeoneWeird> exactly Hotroot1 
05:35 < AAA_awright> I didn't mean nothing, but no results (yet)
05:35 < thealphanerd> it's more flexible than some .each methods
05:36 < AAA_awright> Hotroot1: .push doesn't have to imply Array, it could mean you're pushing a box, or someone off a cliff
05:36 < AAA_awright> And I don't like the idea anyways because more liberal parsing means more ways for bugs to appear
05:36 < ljharb> that said tho i find it confusing for native method names being used for different methods
05:39 < SomeoneWeird> @ topic; cia as in the bot? lol
05:43 < Hotroot1> Hahaha
05:43 < Hotroot1> Oh man I'm an idiot
05:43 < Hotroot1> Mongo doesn't block
05:43 < Hotroot1> That takes some getting used to
05:44 < ljharb> it's node, nothing's supposed to block :-p
05:47 < Hotroot1> I'm a bit confused now
05:48 < Hotroot1> Say I want to search the db for all things black, then for all things white. Then it tells the user "Here are the black items" + black, and then "Here are the white items" + white
05:48 < ljharb> ok
05:48 < Hotroot1> How do I make sure both have finished before that one func that reports it to theM?
05:48 < ljharb> either set a flag, or use promises
05:49 < Hotroot1> Right, flag.
05:49 < ljharb> something like when(findBlack, findWhite).then(tellUser) would be the promise approach
05:49 < ljharb> (which personally i find much cleaner)
05:49 <@maxogden> there are approximately 400 modules on npm to accomplish this task noob
05:49 <@maxogden> (sarcasm)
05:50 <@Nexxy> 433... repeating, of course.
05:51 < ljharb> tons
05:51 < chakrit> anyone w/ django background?
05:51 < Hotroot1> I'll just set a flag
05:51 <@Nexxy> chakrit, here's one: https://www.djangoproject.com/m/img/desktops/djangodesktop-1152x864.jpg
05:51 < Hotroot1> feels kind of weird to abuse closures this much'
05:51 < chakrit> oooookayy...
05:52 < ljharb> thats not abuse, that's use.
05:52 <@Nexxy> chakrit, wrong resolution?
05:52 < Hotroot1> if (flag) {functionThatsJustABlockOfCode}
05:52 < ljharb> Hotroot1: except that both your callbacks need the same block
05:52 < Hotroot1> Yeah
05:52 < Hotroot1> They both point to a function
05:52 < Hotroot1> That's what feels hacky, I'll see if it even works
05:53 < ljharb> right - using promises, or async, any of the other similar libraries that solve that problem, would feel much cleaner i reckon
05:54 <@Nexxy> chakrit, I found a much better one: http://dl-web.dropbox.com/u/10320/django/wallpaper/magic-pony-django-wallpaper.png
05:54 < Benvie> I'm going to try and make bindings to dokan soon and will have to deal with that issue
05:55 < Hotroot1> Wow, shit actually worked
05:55 < Hotroot1> Sooo hacky
05:55 < Benvie> the api essentially requires you to sit there blocked waiting for invocation
05:55 < Benvie> so will have to stsrt something in a thread and send callback to js off the main loop I guess
05:55 < chakrit> nexxy, haha nice one
05:55 <@Nexxy> :)
05:56 < Benvie> I don't think it'd be possible to do in just js using say ffi
05:56 < Benvie> need threading
06:12 < jesusabdullah> ffi can spawn threads but not, like, ongoing ones, y'know?
06:12 < nexion> hey guys, what's the most popular package for accessing mongodb?
06:13 < ljharb> i like mongoose
06:13 < jesusabdullah> Like, you can do something like, ffi.async(function (err, res) {}) but that's not always the right thing
06:13 < nexion> I've so far seen mongodb, mongojs
06:13 < jesusabdullah> there are a few mongoskin fans out there too I think
06:13 < jesusabdullah> I'm more of a couch kinda guy
06:14 < nexion> mongoose looks simple
06:15 < jesusabdullah> yeah, it's certainly a reasonable choice
06:15 < substack> couch is nice if you like http
06:15 < substack> haven't really messed with mongo much
06:16 < ljharb> i like that mongoose lets you use DBRefs and simulate foreign keys
06:23 < jesusabdullah> isaacs: does the fact that you wrote a static file serving module mean I don't have to maintain mine anymore? :) :)
06:24 < jesusabdullah> "maintain." I'm a terrible maintainer when it comes to non-work projects
06:24 < jesusabdullah> actually, terrible maintainer in general.
06:31 < DTrejo> manglia is a great name for a new mongo driver
06:39 < rvagg> jesusabdullah: what's his file serving module? I'm aware of filed which I think is similar to yours.
06:40 < rvagg> but filed is mikeal's
06:41  * whiskers75 kills CIA-118 
06:41  * CIA-118 dies
06:46 < AAA_awright> jesusabdullah: What's your module?
06:48 < whiskers75> I'm working on a CIA replacement right now...
06:49 < SomeoneWeird> and hows it gunna work whiskers75 
06:50 < whiskers75> well, it uses the IRC module, and hopefully I can get the Github module working...
06:50 < whiskers75> it's rather complicated
06:54 < SomeoneWeird> "complicated"
06:55 < whiskers75> what? I'm a beginner
06:57 < rvagg> AAA_awright: see jesusabdullah/node-ecstatic
06:57 < AAA_awright> whiskers75: Can you get push notifications from GitHub?
06:58 < AAA_awright> rvagg: Ah thanks
06:59 < AAA_awright> I think I prefer https://github.com/visionmedia/send because you can throw an arbritrary "Handle this file" on the filesystem
06:59 < whiskers75> AAA_awright: no, i was counting on a repetitive check to see if there is a new commit
07:00 < whiskers75> every 10 seconds
07:00 < AAA_awright> whiskers75: Ew. Have someone setup a ping-a-URL
07:00 < AAA_awright> double-ew
07:00 < whiskers75> I don't know any Ruby, so can't write a service hook
07:00 < whiskers75> ping-a-URL?
07:01 < SomeoneWeird> yeah, continuously checking is the WORST way you can do it
07:01 < whiskers75> ok.
07:01 < whiskers75> er... how do I do that?
07:01 < rvagg> polling is a tried and true method of checking something, it's not all bad
07:02 < rvagg> whiskers75: is it your project on GitHub?
07:02 < whiskers75> rvagg: it is on Cloud9, and will be on GitHub shortly.
07:02 < SomeoneWeird> sure, it works, but it isn't "good"
07:02 < SomeoneWeird> github can ping a url on a commit, setup a server to listen and then echo to irc
07:02 < rvagg> when it's on GitHub just go to the Admin section and then "Service Hooks" and there's all sorts of good stuff in there
07:02 < rvagg> including a generic "WebHook"
07:03 < rvagg> but of course there's also an existing IRC hook, GitHub can take care of IRC notification for you without involving your bot
07:03 < whiskers75> github.com/whiskers75/githubnotifier
07:03 < whiskers75> gotta go
07:09 < pringlescan> CIA
07:11 < whiskers75> back
07:12 < whiskers75> rvagg: the IRC hook doesn't work :D
07:14 < rvagg> it does, perhaps you're using notices and your channel mode blocks notices
07:17 < whiskers75> how do I create a server to interpret the POST requests sent by GitHub?
07:19 < whiskers75> can hook.io help?
07:19 < ljharb> just make a server that accepts a POST request?
07:19 < whiskers75> how do I do that...? 
07:21 < Benvie> jesusabdullah: yeah about ffi threads
07:22 < Benvie> jesusabdullah: in this case the goal would be to essentially service requires for a FUSE type thing, and that needs to be stable
07:27 < whiskers75> window 4
07:29 < whiskers75> how do I interpret the POST data sent by GitHub?
07:30 < whiskers75> i currently have: http.createServer(function(req,res) {})
07:31 < SomeoneWeird> lol
07:31 < SomeoneWeird> use express
07:31 < SomeoneWeird> and bodyParser
07:32 < whiskers75> so app.post("/", function(req,res) { //do stuff } )?
07:32 < negrete> hello everyone... quick question: Does the Child Process object emits an event when spawned? I want to validate that my ('child_process').spawn has been correctly spawned and running, obviously without emitting an 'exit' event
07:34 < [AD]Turbo> hi there
07:34 < SomeoneWeird> yes whiskers75 
07:35 < whiskers75> SomeoneWeird: thanks
07:35 < whiskers75> [AD]Turbo: hi
07:38 < negrete> I know I can check it with "kill -0 pid" but that would require an extra step (in case the Child Process object actually emits an event)
07:41 < AAA_awright> whiskers75: Just implement https://help.github.com/articles/post-receive-hooks
07:41 < AAA_awright> Can the Node.js repository turn that on?
07:44 < __ashish> i am getting error when running https://github.com/liangzan/coffee-resque-demo
07:44 < __ashish> Error is :require.paths is removed use node_modules
07:45 < whiskers75> AAA_awright: I am doing that
07:45 < whiskers75> AAA_awright: using express
07:45 < whiskers75> AAA_awright: and it can
07:45 < AAA_awright> whiskers75: You need Express to run a simple single-page HTTP server?
07:46 < whiskers75> AAA_awright: i'm a newb, its the easiest way to handle POST requests
07:46 < AAA_awright> Express is *harder*
07:46 < whiskers75> you can help me on cloud9..
07:46 < whiskers75> window 4
07:47 < AAA_awright> I'm not sure what that's supposed to mean
07:47 < whiskers75> sorry, forgot the /
07:47 < whiskers75> that was an irssi command
07:47 < nyuszika7h> hi
07:47 < nyuszika7h> what does "awol" mean?
07:47 < SomeoneWeird> cloud9 is shit
07:47 < SomeoneWeird> away on leave
07:47 < AAA_awright> ^
07:47 < whiskers75> yeah - it's down
07:47 < AAA_awright> nyuszika7h: Gone without permission
07:47 < nyuszika7h> vim isn't an IDE but it's a good editor, I use it :)
07:47 < nyuszika7h> AAA_awright, oh lol
07:47 < AAA_awright> Ran away
07:47 < whiskers75> cloud9 is great
07:48 < SomeoneWeird> no, it's really not
07:48 < AAA_awright> Hates you and you don't love it
07:48 < LordThumper> What node.js modules are there that allow be to load html to DOM for manipulation?
07:48 < AAA_awright> You're awful parents and I'm never coming back
07:48  * whiskers75 kills CIA-118 
07:48  * CIA-118 dies
07:48 < AAA_awright> etc
07:48 < whiskers75> ^^^
07:48 < nyuszika7h> wait, CIA-118 is here? :O
07:48 < whiskers75> ^^^
07:48 < whiskers75> ^^^
07:48  * whiskers75 kills CIA-118 
07:48  * CIA-118 dies
07:48 < AAA_awright> O____O
07:48  * whiskers75 kills CIA-118 
07:48  * CIA-118 dies
07:48 < SomeoneWeird> stop spamming
07:48  * AAA_awright hugs CIA-118
07:48  * CIA-118 hugs AAA_awright
07:48 < nyuszika7h> why are our (my friend's and mine) CIA bots not in our channels :(
07:48 < LordThumper> Trying to install jsdom on Win7, but getting some exception when building Contexify
07:48 < whiskers75> yeah it is here
07:48  * whiskers75 hugs CIA-118 
07:48  * CIA-118 hugs whiskers75
07:48 < nyuszika7h> "my friend" = one of them
07:48  * whiskers75 eats CIA-118 
07:48  * CIA-118 tastes crunchy
07:49  * whiskers75 kicks CIA-118 
07:49 < CIA-118> ow
07:49 < whiskers75> LOL
07:49 < milani> whiskers75, plz stop that.
07:49 < whiskers75> ok
07:49 < milani> thx:)
07:50 < whiskers75> can someone help me with GitHub post-recieve hooks?
07:51 < nyuszika7h> hmm
07:51 < whiskers75> oh I can just use https://github.com/nathan-lafreniere/node-github-hook
07:52 < SomeoneWeird> mhm
07:52 < nyuszika7h> whiskers75: https://github.com/ProgVal/Supybot-plugins/blob/master/GitHub/plugin.py is in Python but you might learn something from it too
07:52 < __ashish> anyone has used coffee-resque  
07:53 < whiskers75> nyuszika7h: thanks
07:54 < nyuszika7h> yw
07:54 < nyuszika7h> tassmjau: nice, Linode
07:54 < nyuszika7h> I have a VPS from them too :P
07:55 < tassmjau_> nyuszika7h: :) yup, irc on the bus ftw!
07:55 < nyuszika7h> lol
07:56 < nyuszika7h> wait, do you really use it for IRC only?
07:57 < tassmjau_> nyuszika7h: of course not, mostly node stuff actually :)
07:57 < nyuszika7h> oh ok :)
08:04 < whiskers75> I hate Nodejitsu sometimes: http://pastie.org/4560945
08:04 < SomeoneWeird> "This type of error is usually a user error."
08:05 < whiskers75> well it's ok, if you deploy again it goes away
08:13 < whiskers75> it's not working :(
08:13 < jesusabdullah> whiskers75: we're not happy about those errors either :(
08:14 < jesusabdullah> whiskers75: come to nodejitsu, maybe we can find the offending boxes
08:14 < whiskers75> jesusabdullah: not nodejitsu. my bot
08:14 < whiskers75> nodejitsu fixed itself
08:14 < jesusabdullah> you mean, avianflu fixed it
08:14 < jesusabdullah> cause he's gangster like that
08:15 < whiskers75> well, i just deployed again and ta-da it worked
08:16 < Nuck> jesusabdullah: your mom is gangster
08:16 < whiskers75> can i get some help with https://github.com/nathan-lafreniere/node-github-hook
08:16 < whiskers75> ?
08:17 < whiskers75> my code is notifier.js at github.com/whiskers75/githubnotifier
08:21 < whiskers75> my bot doesn't seem to be getting the hook from github...
08:24 < jQuy> How can I set expires headers to images?
08:24 < jQuy> YSlow says that overall performance score is 99/100. And the only thing that is not A is "Add Expires headers"
08:26 < rvagg> jQuy: you might have to tell us what you're using to serve the images
08:26 < rvagg> express?
08:26 < nyuszika7h> I'm trying to use '\001' to handle CTCPs and I get "octal literals are not allowed in strict mode"...
08:26 < jQuy> yes
08:27 < jQuy> express is in use
08:27 < jQuy> and gzippo plugin
08:27 < rvagg> nyuszika7h: don't use strict mode, or use hex escapes instead
08:27 < rvagg> nyuszika7h: http://mathiasbynens.be/notes/javascript-escapes
08:29 < rvagg> jQuy: I can't tell you exactly for express but you'll need to set the header 'expires' with the right date format, see the http RFC: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.21
08:29 < rvagg> jQuy: or you could skip Expires and just use Cache-Control, it's much friendlier
08:29 < nyuszika7h> like \x01 ?
08:30 < jQuy> rvagg: cache-control sound good
08:30 < rvagg> jQuy: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9
08:30 < AAA_awright> whiskers75: You have to register the hook first, you have access to the Node.js repository?
08:30 < whiskers75> I'm testing it on my own
08:30 < whiskers75> repo
08:30 < rvagg> jQuy: here's an example of a far-future expires header: Expires:Sat, 23 Mar 2013 09:48:41 GMT
08:30 < AAA_awright> You turned the hook on?
08:30 < whiskers75> and I have put in http://whiskers75-githubnotifier.jit.su as the webhook
08:31 < rvagg> jQuy: and here's a Cache-Control - Cache-Control:public, max-age=31536000
08:31 < rvagg> max-age is in seconds from now
08:31 < whiskers75> AAA_awright: yeah and I pressed Update Settings, and when pressing Test Hook... nothing.
08:31 < jQuy> rvagg: where do I have to put that cache-control code?
08:31 < rvagg> just use a fixed number, far-future if you don't plan on changing the images themselves
08:31 < jQuy> in my jade-templates?
08:31 < jQuy> header section?
08:32 < LordThumper> Did anyone manage to install jsdom on windows?
08:32 < jQuy> meta tag?
08:32 < whiskers75> AAA_awright: the bot is on ##node-irc-bots
08:32 < LordThumper> Or should I give up and run Node on linux?
08:33 < whiskers75> window 6
08:33 < rvagg> jQuy: you can do it directly on the response object in your code, something like this: res.setHeader('Cache-Control', 'public,max-age=31536000');
08:33 < whiskers75> sorry meant /
08:33 < SomeoneWeird> :\
08:34 < jQuy> rvagg: I try that
08:34 < rvagg> LordThumper: what's your use case? there are alternatives if your needs are simple enough
08:34 < jQuy> rvagg: like this: 	res.setHeader('Cache-Control', 'public,max-age=31536000');   	res.render('index', { title: 'Testisivu' });
08:35 < LordThumper> I need to load some html in DOM for manipulation
08:35 < Inquizarus> Hi there! Anyone that have experiance with socket.io and use of the formidable plugin?
08:36 < LordThumper> I was going to run some jQuery selectors and serialize the result
08:37 < rvagg> LordThumper: sorry, trying to find a similar lib I've used in the past that's nice and lightweight
08:37 < rvagg> I can't remember it's name though!
08:38 < whiskers75> can somebody help me with this webhook?
08:38 < whiskers75> ////////
08:38 < rvagg> aye, LordThumper, here it is! https://github.com/MatthewMueller/cheerio
08:38 < LordThumper> rvagg: Ah it's ok, thanks anyways :)
08:39 < LordThumper> awesome :)
08:39 < LordThumper> thanks alot!
08:39 < rvagg> supports basic jQuery-ish things, don't expect it to support everything but it's really lightweight compared to jsdom which is a bit of a monster
08:39 < rvagg> pass in your html and then you can query on it
08:40 < LordThumper> Yeah that's just what i needed :) Been trying to install jsdom for hours, was ready to move to coding on linux
08:41 < LordThumper> thanks again
08:41 < Industrial> Besides a blog post about upstart and monit, are there other methods of keeping NodeJS processes alive after crashes?
08:42 < zomg> there is a tool called 'forever' 
08:44 < Inquizarus> When i submit a form i get an "transport end by forced client disconnection" in my console for the websocket.. i guess that this is becouse the user is reloading the page when submiting. Is there any way to make the socket stay alive? Or have i missed something when i added the socket functionality to my server?
08:44 < Inquizarus> Also get the "transport end (booted)"
08:45 < timeturner> Industrial: https://github.com/visionmedia/mon
08:45 < deoxxa> Inquizarus: solution is to not reload the page
08:45 < Inquizarus> Thought of that.. but not in any way to do that. :P
08:46 < Inquizarus> Is ajax the only way?
08:46 < deoxxa> pretty much
08:46 < deoxxa> or submit the form via the websocket
08:46 < timeturner> that's like saying "is breathing the only way"?
08:46 < timeturner> lol
08:46 < Industrial> zomg: very nice.
08:47 < deoxxa> i.e. take over the onsubmit handler and shove it down the websocket
08:47 < Inquizarus> k, will try that.
08:47 < deoxxa> if you've already got a bidirectional communication channel open, you might as well use it
08:47 < Inquizarus> Doing a schoolproject and a base idea is to avoid ajax and use websockets. :)
08:48 < Inquizarus> So more or less, use JS/jquery to intercept submit action and emit information to server?
08:49 < deoxxa> that sounds like it would work
08:50 < Inquizarus> Ok, will see if i can make it so with the formidable plugin. :)
08:50 < whiskers75> can i please have some help with github.com/whiskers75/githubnotifier?
08:54 < nyuszika7h> how can I load external JS libraries with Node.js?
08:54 < nyuszika7h> like Date.js
08:54 < nyuszika7h> [10:51:18] --> mikl (mikl@drupal.org/user/56879/view) has joined #Node.js
08:55 < nyuszika7h> looool
08:55 < nyuszika7h> nice cloak
08:56 < nyuszika7h> oh it's in npm
09:01 < mikl> nyuszika7h: yeah, it's kinda neat :)
09:02 < whiskers75> mikl: how'd you get it?
09:09 < mikl1> whiskers75: you can apply for it if you're a known member fo the Drupal community: http://groups.drupal.org/node/5403
09:11 < whiskers75> any one for github? :D
09:17 < freewil> can anyone recommend a simple module for parsing a line-based text-file using numbered positions for fields?
09:17 < freewil> ie each line is a record, positions 0-9 is field 1, positions 10-12 is field 2
09:18 < SomeoneWeird> .split('\n').substr(0,9)
09:18 < rvagg> slice you mean SomeoneWeird 
09:18 < SomeoneWeird> er, why?
09:18 < freewil> im thinking i should just make a regex with a global flag
09:18 -lRCBot_Master:#Node.js- Austin Wright master (1 files): Add some documentation to README.md - https://github.com/Acubed/node-rdf/commit/eed6f4d04e082ab6e5656e58d9fe8c8b8d4a1756
09:18 -lRCBot_Master:#Node.js- Austin Wright master (4 files): Fix handling of relative URIs in Turtle, add base argument to Turtle processing functions - https://github.com/Acubed/node-rdf/commit/77f26994ed5b08943a4de4652fa66ce55e7d8e3d
09:18 -lRCBot_Master:#Node.js- Austin Wright master (1 files): Fix the Turtle parser to stop outputting IRI instances - https://github.com/Acubed/node-rdf/commit/02219fa0ad28bf5a0bcf8a35e2bda31390d29225
09:18 < AAA_awright> ^^^
09:19 < rvagg> substr is a method on String, not Array
09:19 < SomeoneWeird> yer, well
09:19 < rvagg> WELL
09:19 < deoxxa> AAA_awright: oh god, don't /notice
09:19 < SomeoneWeird> split it by lines, iterate those lines then substr each line
09:19 < AAA_awright> isaacs: I can has sticker plz
09:19 < AAA_awright> deoxxa: Bots are supposed to NOTICE
09:19 < whiskers75> AAA_awright: hey, please don't (nearly) steal the bot's name :D
09:20 < AAA_awright> You're not supposed to reply to a NOTICE, bots use it so they don't get into arguments. Because that's not pretty.
09:20 < deoxxa> AAA_awright: then have it do it somewhere else where it won't make my irc client beep
09:20 < whiskers75> Change ur client, deoxxa
09:21 < deoxxa> oh ok, change my client so spam isn't annoying
09:21 < AAA_awright> deoxxa: That's your own client then, it's exactly the same as a PRIVMSG except you're not supposed to respond to it
09:22 < rvagg> freewil, SomeoneWeird, perhaps a regex that matches groups of lines and then an extra split after that... content.split(/([^\n]+){9}/).forEach(function (field) { field.split('\n').whatever })
09:22 < rvagg> mind you, that's off the top of my head and multiline regex splits can be hard
09:22 < SomeoneWeird> they can be
09:22 < rvagg> and you'd need to have /gm flags I suspect
09:22 < freewil> im gonna try a multiline regex first
09:23 < freewil> should be pretty simple given the easy positioning of fields
09:34 < AAA_awright> https://github.com/Acubed/gitbot
09:35 < whiskers75> AAA_awright: yippeee
09:35 < AAA_awright> Pull requests welcome
09:36 < AAA_awright> USE TAB INDENTS FOR THE LOVE OF CODING
09:36 < whiskers75> yeah
09:37 < whiskers75> window 6
09:37 < SomeoneWeird> you should stop doing that.
09:37 < whiskers75> in my fast typing, i miss out the /
09:38 < rvagg> if there are any Aussies here that didn't get my message earlier today, I'd be happy to add extra people to this discussion if you have an opinion: http://branch.com/b/could-we-pull-off-a-nodeconf-au
09:38 < Benvie> what's the window kenneth
09:38 < whiskers75> window? its an irssi thing
09:38 < SomeoneWeird> don't miss the / then
09:38 < SomeoneWeird> AAA_awright, wtf does the http daemon do lol
09:39 < AAA_awright> SomeoneWeird: It accepts events from GitHub
09:39 < klawd_prime> 11:35 < AAA_awright> USE TAB INDENTS FOR THE LOVE OF CODING
09:39 < klawd_prime> i disagree
09:39 < klawd_prime> so much.
09:39 < AAA_awright> I should note how to set that up in the README
09:39 < yyfrankyy> h
09:40 < AAA_awright> klawd_prime: I use 3-character tabs, for instance. If you impose some other standard on me, that's no longer an option.
09:40 < AAA_awright> It's just a character. It's sole purpose is to indent stuff.
09:40 < klawd_prime> look, i got a real good argument against tabs
09:40 < SomeoneWeird> AAA_awright, oh derp, missed the processRequest lo
09:40 < SomeoneWeird> l
09:40 < klawd_prime> but i just can' access it in my brain right now
09:40 < klawd_prime> lol
09:41 < Benvie> my argument is that github indents them too much so it makes my code look dumb
09:42 < adrianlang> Benvie: Sounds like an argument against GitHub
09:42 < AAA_awright> GitHub is stupid about a lot of stuff. Namely that they used a fixed-width theme.
09:42 < Benvie> it's too late now
09:43 < Benvie> they've already seized world government
09:43 < Benvie> so tabs gotta go instead
09:43 < AAA_awright> Why does Wikipedia use full width when they SHOULD be using fixed width, and why does GitHub use fixed width when they SHOULD be using full width
09:43 < AAA_awright> It names no sense
09:45 < rvagg> I think they do it just to annoy you AAA_awright, at least that's what I've heard
09:48 < medice> 2 space indents ftw
09:48 < medice> also, of course fixed width font
09:55 < whiskers75> AAA_awright: please add a package.json
09:55 < AAA_awright> whiskers75: It's an application not a library
09:56 < whiskers75> for dependencies...
09:56 < whiskers75> or a project.json
09:59 < AAA_awright> whiskers75: git submodule update --init
09:59 < jQuy> Which one is better: MondoDB or CouchDB?
09:59 < substack> yes
09:59 < whiskers75> ohhhhhhhhhh
10:00 < AAA_awright> jQuy: MongoDB has Mongolian which is the best thing since the food
10:02 < jQuy> AAA_awright: do you mean this https://github.com/marcello3d/node-mongolian ?
10:02 < AAA_awright> jQuy: Yes
10:02 < SomeoneWeird> whiskers75, it doesnt need a json file
10:02 < whiskers75> 	console.log('Watch: '+m[1]+' pipe to '+m[4]+'/'+m[5]);
10:02 < whiskers75> 	                       ^
10:02 < whiskers75> TypeError: Cannot read property '1' of null
10:02 < whiskers75> AAA_awright ^^
10:03 < AAA_awright> whiskers75: What argument are you providing?
10:03 < AAA_awright> whiskers75: Read the README
10:03 < whiskers75> ./gitbot.js --join gitbotwhiskers75@irc.freenode.net/##node-irc-bots --watch https://github.com/whiskers75/IRC-bot
10:04 < whiskers75> correct the above :D
10:04 < AAA_awright> whiskers75: You need to select a port to listen on, and also, read the README for how to use --watch
10:04 < whiskers75> how?
10:04 < whiskers75> oh
10:04 < AAA_awright> It goes something like '<https://github.com/whiskers75/IRC-bot>|gitbotwhiskers75@irc.freenode.net/##node-irc-bots'
10:04 < AAA_awright> notice single quotes
10:05 < ManneW> Hi! We're doing some research before starting with Node.js and WebSockets (using SockJS) "for real". When load balancing WebSockets, for example using HAProxy, will each client occupy a port on the server running HAProxy for the duration of the session? Which would imply that the theoretical max number of (WS) clients for a single HAProxy node would be the number of available ports. Just to get things right from the start :-)
10:05 < jQuy> AAA_awright: I have used mongoskin. What do you think about it?
10:05 < whiskers75> ah
10:05 < AAA_awright> jQuy: I don't think I've used that one
10:06 < AAA_awright> Between the first major MongoDB driver and Mongolian, the latter is awesome and done correctly, and the first requires all sorts of unnecessary functions just to make a connection, ugh
10:06 < zomg> ManneW: I had like 1500 simultaneous connections over socket.io on my cheap-ass linux VPS with no special setups =)
10:07 < jQuy> AAA_awright: you have strong opinions, man! :)
10:08 < whiskers75> i don't like lRCBot_Master 
10:10 < whiskers75> it's name copying
10:11 < AAA_awright> isaacs: I'm assuming you set the current /topic, if you'd like, setup a standard webhook on the repository to http://tesla.bzfx.net:9999/
10:13 < SomeoneWeird> * Topic for #Node.js set by isaacs!
10:13 < SomeoneWeird> yerp
10:13 < whiskers75> SomeoneWeird: heard of /topic? :D
10:15 < SomeoneWeird> heard of i really don't give a shit? :)
10:16 < whiskers75> ok
10:16 < whiskers75> :D lol
10:25 < whiskers75> http://bit.ly/MIIZ8Y :)
10:25 < whiskers75> Node.js desktop background
10:25 < jetienne> get it webgl
10:26 < whiskers75> it's not mine
10:26 < whiskers75> it's from the node.js website
10:28 < jQuy> Has anyone cached favicon?`
10:30 < rvagg> favicon is something that can be *far* future cached
10:31 < SomeoneWeird> defs
10:32 < AAA_awright> ...
10:32 < jQuy> rvagg: now it's just one day
10:33 < jQuy> app.use(express.favicon());
10:33 < SomeoneWeird> now what's just one day?
10:33 < rvagg> rioter: beerjs.jsconf.com.au working on webkit only is not cool!
10:34 < jQuy> SomeoneWeird: favicon expires in one day
10:34 < SomeoneWeird> um
10:34 < SomeoneWeird> why?
10:34 < SomeoneWeird> make it expire every 6 moths
10:34 < SomeoneWeird> months*
10:34 < jQuy> SomeoneWeird: It must be some default setting
10:34 < SomeoneWeird> ll
10:34 < SomeoneWeird> lol
10:34 < SomeoneWeird> heh
10:34 < jQuy> but how?
10:34 < jQuy> app.use(express.favicon());
10:35 < jQuy> maybe I should use some parameter on that function...
10:35 < rvagg> use the source luke
10:36 < rvagg> chilts: Glacier in AwsSum already? that was quick! well done.
10:37 < Inquizarus> Anyone ever used the Formidable extension? I get the file to upload but i'm having trouble renaming it to a "normal" name.
10:41 < fg3> what's wrong with this: http://pastebin.com/UyX9DQaJ
10:43 < rvagg> fg3: your res.end() is called before your mongo res.write()'s
10:43 < fg3> ahhh
10:43 < fg3> good old async
10:43 < rvagg> i.e. the Todos.find() is async, occurs later on
10:44 < fg3> ok new node guy
10:44 < fg3> thanks
10:44 < holzp> nodethink
10:44 < rvagg> you need a trigger for the end of .find(), I assume there's a chainable call or something
10:44 < fg3> ok 
10:45 < rvagg> Todos.find(blah).after(function() { res.end() }), something like that I'd imagine
10:45 < fg3> hmm - checking for after 
10:45 < rvagg> find() might take multiple callbacks? one after its finished?
10:46 < fg3> checking
10:46 < rvagg> also, you can shorten it by passing res.end as your callback instead of making a new function
10:46 < jQuy> Yes! I did it! Favicon has now an expiration date and my site's Yslow performance is 100/100.
10:46 < rvagg> .find(blah).whenFindIsFinished(res.end);
10:51 < CIA-118> node: Ben Noordhuis master * r2cdf427 / src/signal_wrap.cc : signal_wrap: fix unused variable compiler warning - http://git.io/shNTCg
10:53 < ManneW> zomg: Yeah, but we will maybe have more than 65k clients connected through WebSockets at the same time. So my question was whether or not they occupy a port each in the load balancer during the session, or if multiple clients use the same port from HAProxy to the backend servers? :-)
11:10 < Vinod_> Need help regarding net server on node with flash
11:14 < holzp> .NET server?
11:27 < astropirate> Anyone want to work on a CMS together?
11:27 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:28 < jQuy> Do you know if two way data binding is possible with express and jade templates?
11:35 < shlevy> For CPU-bound steps (e.g. encryption) in an overall IO-bound pipeline, is it best to just do the computation in a separate (possibly threaded) process?
11:35 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:41 < astropirate> shlevy, yes. Although if I remember correctly there is some overhead in JS talking to native node modules. I don't know if this overhead cost is as substantial as it used to be. If it is, some benchmarks need to be done to figure out of going native is even worth it
11:42 < shlevy> astropirate: Well, in my case I'm encrypting, so I may just pass it to a non-node module
11:43 < shlevy> sorry, non-node process
11:43 < shlevy> astropirate: Anyway, thanks
11:43 < astropirate> np
11:45 < CIA-118> node: Ben Noordhuis v0.8 * r7c75ca7 / doc/api/cluster.markdown : doc: cluster: setupMaster() can be called only once - http://git.io/B18U9A
11:50 < SomeoneWeird> cia is backkkk
11:50 < SomeoneWeird> lol
11:56 < stephank_w> ManneW: No, and this applies to any TCP server, the server only needs the one listening port. You'll run into other limits though (e.g. file descriptors).
11:57 < stephank_w> ManneW: Actually, I guess I don't know about a load balancers outgoing connections.
11:58 < ManneW> stephank_w: Yeah, but I don't think it (the load balancer) would use more than one port per backend server
11:59 < stephank_w> ManneW: Not so sure about long polling, web sockets, etc.
12:05 < ManneW> stephank_w: Ok. This particular use case would be web sockets with long polling and such for fallback.
12:11 < stephank_w> ManneW: I'm not familiar with HAProxy, but I figure you should look into how it deals with a high number of connections when balancing plain TCP, considering that you can't really pipeline these kinds of things over a single HTTP connection to the backend.
12:12 < stephank_w> ManneW: But you do want to set up sticky sessions when using HAProxy and SockJS, probably.
12:16 < ManneW> stephank_w: Yeah, sticky sessions would be preferable. But just to make things clear, each web socket connection doesn't occupy a port each on the server? Not like each client first makes a connection to a shared port, say 80, but after that is delegated to its own (for the actual web socket messaging)? :-)
12:20 < EricBlade> hi guys. i have a socket, which i'm attempting to recycle, in that i have the same socket reconnect when the connection drops.  when i do this, all my listeners are getting attached multiple times.  i do not add the listeners in the connect event, so i'm a little confused how something like this could be happening
12:20 < Inquizarus> Anyone that know if with socket.io you can send an emit from server -> same server? Something like self.emit()?
12:20 < stephank_w> ManneW: Well, I can't say with certainty, because I haven't done this in practice. The listening port is just one, but my guess is you'll end up making an outgoing connection to a backend for every client you have. (and thus allocating a port per client.)
12:21 < negrete> does Child Process emit an event when spawned? How can I validate that a spawned child is actually running?
12:25 < deoxxa> ManneW: that's not how tcp works
12:25 < Inquizarus> Anyone that know if with socket.io you can send an emit from server -> same server? Something like self.emit()?
12:25 < ManneW> deoxxa: Which of them? :-)
12:25 < slaskis> negrete: i think it's spawned immediately, since you can get a pid from it
12:26 < deoxxa> ManneW: "after that is delegated to its own" etc
12:27 < negrete> slaskis: yeah, I know... but even if you can get the PID immediately, the spawned child could also fail, or exit with a code != 0 and yet we can still get the PID
12:28 < deoxxa> negrete: it'll emit "exit" when it exits
12:29 < slaskis> negrete: do you mean you won't get an 'exit' event?
12:29 < negrete> deoxxa: that's what I'm looking for, except the event is emitted when it exits, I want to know when it was actually spawned
12:30 < deoxxa> i guess you could check when its stdin becomes writable or something
12:30 < deoxxa> seems like you're doing it backwards though
12:30 < deoxxa> why do you want to know when it's spawned?
12:30 < negrete> I do get the 'exit' event, I just want to find a way to know if the process is running... I know I can do a 'kill -0 pid' but I don't think it's the best way...
12:31 < deoxxa> well... if you've told node to spawn it, and it hasn't emitted "exit", it's running as far as things go
12:32 < negrete> I'm trying to 'deploy' some apps through my main app, so I want to know if the Child Process is actually running
12:33 < deoxxa> i've got a system that does exactly the same thing
12:33 < negrete> although not what I'm looking for, I think your answer is the obvious response to my question
12:33 < deoxxa> i treat it as running if it hasn't emitted "exit" yet
12:33 < ManneW> deoxxa: Ok. But could you please explain how a large number of web socket connections to a single server would behave? Will ~65k connections be a theoretical limit of the number of clients? :-)
12:34 < deoxxa> ManneW: there are way, wayyyy too many variables there to make any kind of meaningful estimate about capacity
12:34 < negrete> I'll change my logic to handle the error instead of trying to find out if the app is deployed... I'll assume it IS deployed
12:34 < negrete> thanks!
12:34 < deoxxa> negrete: that's what i do, it seems to work ok
12:35 < negrete> thanks, I hope it'll work ok for me too
12:35 < deoxxa> ManneW: depending on what your app does, and how far you're willing to go to scale it, you can apparently get some ridiculous capacity out of node. see http://blog.caustik.com/2012/08/19/node-js-w1m-concurrent-connections/ for what i'm talking about, ha
12:35 < ManneW> deoxxa: Yeah, but would the number of available ports on the server be a limiting factor? How would you set up load balancing for multiple thousands of clients through WS? Several load balancers? I'm not looking for a number, I'm looking for a more general strategy ;-)
12:37 < deoxxa> ManneW: if you were coming up against those kind of limits, i think a regular load balancer is probably an ill fit. i'd consider round-robin dns at that point.
12:39 < ManneW> deoxxa: Ok. Thats what we've discussed too. Perhaps that is the way to go. And then perhaps have either the actual servers or load balancers in the round-robin set.
12:40 < deoxxa> yeah, that's a really weird limit actually
12:40 < deoxxa> i've never really considered it
12:42 < ManneW> deoxxa: Thanks for the help and input! :-) Will have to think some more about what a setup would look like.
12:42 < deoxxa> yeah, good luck with it!
12:43 < deoxxa> i guess a cheap fix would be adding more ips to the backend boxes
12:43 < deoxxa> haha
12:43 < deoxxa> especially if it's an internal network
12:44 < deoxxa> if it was on the same box, you could use a unix socket and avoid it all together, but... yeah
12:44 < deoxxa> #scalinglife
12:46 < milani> hey, I have a blocking function in my c++ addon ( seems like a busy loop ), when I return from it, node continues execution but it doesn't handle setTimeouts any more.
12:47 < milani> do I miss something? should I call something before blocking the thread?
12:47 < qbit> mornin
12:47 < bnoordhuis> milani: how long does that function block?
12:47 < milani> it depends, maybe a lot.
12:48 < bnoordhuis> why don't you run it in a thread
12:48 < bnoordhuis> i.e. use uv_queue_work
12:48 < milani> I can, but I'm curious. 
12:49 < bnoordhuis> node doesn't expect to be blocked for long times
12:49 < bnoordhuis> or at all, really
12:49 < milani> bnoordhuis, oops may I can't! that function should really block. it's file choosing dialog.
12:49 -!- mode/#Node.js [+o bnoordhuis] by ChanServ
12:49 < milani> something like `confirm` function in js.
12:51 -!- bnoordhuis changed the topic of #Node.js to: http://nodejs.org/
12:52 -!- mode/#Node.js [-o bnoordhuis] by bnoordhuis
12:56 < fg3_> it should become a background process
12:56 < defunctzombie> bnoordhuis: /me is shtylman
12:57 < defunctzombie> bnoordhuis: not that I saw
12:57 < EricBlade> hmm
12:57 < bnoordhuis> defunctzombie: how so?
12:57 < defunctzombie> I might have missed something in the generator
12:57 < defunctzombie> well, generation just creates html from markdown
12:58 < defunctzombie> one way to do it would be to update the marker (or whatnot) package
12:58 < defunctzombie> to the version that supports running custom functions for highlighting
12:58 < defunctzombie> then you can wrap the generated code with some span that has a class
12:58 < bnoordhuis> yes. i'd s/Stability: 0/<font color="red"><blink>Stability: 0<\/blink></font>/g in html.js
12:58 < defunctzombie> I wasn't sure if you guys wanted to do that
12:58 < defunctzombie> o.o
12:59 < defunctzombie> I would not make it blink..
12:59 < bnoordhuis> throw in a <marquee> tag for good measure
12:59 < defunctzombie> I hope that was a joke :p
12:59 < bnoordhuis> of course :)
12:59 < defunctzombie> haha
12:59 < defunctzombie> missing the /sarcasm tag :p
12:59 < defunctzombie> so yea.. the markdown generator package could be updated to the one with highlight support
13:00 < defunctzombie> otherwise this was the minimal changeset that would currently do it
13:00 < bnoordhuis> defunctzombie: look at render() in tools/doc/html.js
13:00 < defunctzombie> since the sh_main stuff post processes the html to do the syntax highlighting bits
13:00 < defunctzombie> yea.. it could be replaced there
13:00 < defunctzombie> if you think that is cleaner
13:01 < bnoordhuis> cleaner and easier
13:01 < bnoordhuis> it'll be a one-liner
13:01 < defunctzombie> well
13:01 < bnoordhuis> i like one-liners, i used to be a perl programmer
13:01 < defunctzombie> the problem is it won't have the border stuff
13:01 < bnoordhuis> why not?
13:01 < defunctzombie> unless you start doing some html wrangling with regex
13:01 < bnoordhuis> oh, like that
13:01 < deoxxa> bnoordhuis: but then you took a regex to the knee?
13:02 < defunctzombie> haha
13:02 < defunctzombie> does that make sense? cause the text is in the pre tag and then another code tag
13:02 < defunctzombie> so yes.. I can make the text red.. but not the outer border red
13:02 < bnoordhuis> i don't mind html wrangling, i don't isaacs will either
13:03 < bnoordhuis> *don't think
13:03 < bnoordhuis> sometimes the mind is faster than the fingers
13:03  * bnoordhuis is off to lunch
13:04 < defunctzombie> not surre I like the regex html thing.. I think it will be messier and also potentially break easier
13:05 < defunctzombie> we can discuss after lunch :)
13:25 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:29 < kiwi> hi :)
13:30 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:34 < yawn> travis dimmerda
13:34 < yawn> wops
13:34 < yawn> wrong chan
13:34 < yawn> :3
13:42 < guest123> looking for a US based node developer (to work remote) to lead the development effort on a project I am working on. please PM for more details
13:44 < NodeX> I'm looking for a groin based blow jobber, PM me if interested
13:45 < deoxxa> NodeX: can they work remotely
13:45 < NodeX> well I am endowed so probably 
13:45 < NodeX> LOL
13:45 < NodeX> (just kidding)
13:45 < deoxxa> ZING
13:46 < tbrock> why is the default install for npm not global
13:46 < tbrock> ?
13:46 < deoxxa> because that makes no sense
13:46 < mape> tbrock: because you might have other projects dependant on older versions of that package, and if you do global update those will brake
13:46 < deoxxa> also the dependencies of your package only need to be accessible by your package
13:47 < mape> Unless it is a cli app, but then you just make it global
13:49 < asdf_> any one else?
13:50 -!- mode/#Node.js [+o piscisaureus__] by ChanServ
13:50 < deoxxa> asdf_: anyone else what?
13:51 -!- mode/#Node.js [+o piscisaureus___] by ChanServ
13:55 < tbrock> mape, i guess that makes sense for a language whose packages are updated so frequently
13:56 < tbrock> thanks, that was a great answer to my question
14:06 < Inquizarus> GAH, feels like i'm bashing my head against a brick wall! ^^
14:07 < Inquizarus> I want formidable to make the client perform a specifik action when upload of a file is complete..
14:11 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:19 < roastbird> hi. anyone using nodejs https.request to do facebook auth? i'm doing that and keep getting rejected.
14:20 < cborg> what to do when you're bored outta your mind?
14:20 < SomeoneWeird> roastbird, use passportjs
14:22 < roastbird> SomeoneWeird: thank you. but i'm still curious why graph.facebook.com doesn't return me the same response when i use curl as compared to when i use https.request
14:22 < gkatsev> maxogden: haha, just saw your jsforcats. awesome stuff :D
14:22 < SomeoneWeird> headers
14:22 < SomeoneWeird> cookies
14:22 < SomeoneWeird> etc.
14:23 < cyborg> maxogden yeah awesome stuff
14:24 < gkatsev> also, cute cat
14:25 < milani> bnoordhuis, if I create a new thread with uv_thread_create, does it solve the problem?
14:26 < milani> or I should use uv_queue_work only.
14:26 < roastbird> SomeoneWeird: unsatisfying, since i copied all headers of my web browser, except some capitalizations which i couldn't control but which the RFC states should be insensitive. guess i'll live with it.
14:31 < landinar> I need to do some CPU-bound work in node. i can't do this in the node server process because it would block, obviously. What are folks doing in this sitauion? having another node process doing just heavylifting and talking over using some IPC/RPC system?
14:32 < stephank_w> roastbird: The access token request is failing, or something else?
14:33 < cborg> landinar yeah i would do w/ a child proc
14:33 < jmar777> landinar: ^^
14:33 < jmar777> cluster module is pretty useful for that kind of stuff
14:34 < roastbird> stephank_w: right. the access token request is failing, and i get a 302 as a reply instead of the access_token. using curl and using google chrome on the same url gives me the access_token
14:35 < cborg> so what's a good IRC node module - i wanna create a logger
14:35 < landinar> cborg: jmar777: right, so would I spawn-per-request, or just spawn a worker process (processes?) when the server starts up?
14:36 < stephank_w> roastbird: Odd! I haven't touched our code in a while, but it looks like I'm not doing anything special, not even sending any headers. It's a plain GET request with query string parameters. I do use `urlencoded`, though.
14:36 < jmar777> landinar: def not per request (unless they're rare... e.g., scheduling a job or something)
14:37 < jmar777> landinar: would go with a "worker pool" concept... basically just treat it like a thread pool in terms of load balancing and maintenance
14:37 < landinar> it's the kind of thing that might happen 500 times a day, tops. I have a finite and static user base.
14:37 < landinar> jmar777: interesting
14:37 < jmar777> landinar: it's just not, of course, processes instead of threads
14:38 < landinar> so spawn off a bunch when the server starts, and ask the pool (cluster?) for my results
14:39 < jmar777> landinar: hmm... well, in that case you could do per request. i mean, it would scale well enough with a slow rate like that. you would add some latency doing it per request, but it might simplify the implementation
14:39 < cborg> irc anyone?
14:39 < roastbird> stephank_w : i'll try again with that. knowing that others have succeeded with just a plain GET with query params should narrow down my search by a lot. thanks :)
14:39 < stephank_w> roastbird: good luck
14:40 < landinar> jmar777: yeah, that's what I'm thinking. building a whole auto-scaling cluster architecture might be overkill/premature optimization for me
14:40 < landinar> so would I even need to go with the cluster module or do I get anything special over calling child_process.fork() myself?
14:41 < zykes-> cluster nodejs ?
14:41 < zykes-> for what :p
14:41 < landinar> zykes-: CPU bound work
14:42 < balboah> how can an EventEmitter immediately emit events when a new listener is added? Kind of queue up stuff until the first listener is there
14:42 < zykes-> k
14:43 < jmar777> landinar: basically let the master be your server, and fork child processes that do the work. check out worker.send() for actually controlling the workers:http://nodejs.org/docs/latest/api/cluster.html#cluster_worker_send_message_sendhandle
14:43 < cborg> what irc client do y'all use?
14:43 < jmar777> cborg: limechat
14:44 < cborg> jmar777 what u like abt it?
14:44 < landinar> jmar777: right. I guess my question is now whether I should even be bothering with the cluster module at all or just using child_process.fork() myself
14:44 < landinar> which is what worker.send() literally is
14:44 < jmar777> cborg: fairly minimal... easy to switch between channels, lists users, and the rest is messages
14:45 < jmar777> cborg: also has a split pane for showing messages in the current channel in one, and all messages in other channels you've joined in the other, so you don't have to jump back and forth to see if it was something interesting
14:45 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:46 < cborg> can i type in irc commands eg /join /nick /msg
14:46 < cborg> jmar777
14:46 < jmar777> landinar: i would personally do cluster, but like you've noticed, it's basically just sugar on top of child_process
14:47 < jmar777> landinar: it also does some magic stuff for inbound connections, but it sounds like you don't really need that
14:52 < landinar> jmar777: hmm, yeah, I just read over the cluster API and I think I'll use it. Turns out I've actually solved this problem myself a while ago -- I was just wondering how other folks would do it. (I basically created the cluster module for my app in node 0.6, complete with timeouts and stuff)
14:52 < landinar> seems like I shouldn't be reinventing the wheel now that cluster is a thing
14:52 < landinar> thanks for your help jmar777 
14:54 < jmar777> landinar: np
14:55 < superjoe> is it normal to have code in a node.js server which needs to listen to port 80 to downgrade permissions?
14:56 < context> superjoe: most people dont listen on port 80 directly from node
14:56 < superjoe> context, nginx? other recommendations?
14:57 < context> nginx, haproxy, apache ? i personally prefer nginx
14:58 < trb> nginx is a good choice
14:58 < superjoe> and what's the reasoning behind proxying vs the simpler solution of using node.js directly?
15:06 < goloroden> anyone but me having problems logging in to npm using "npm login" on the command line? it always tells me that my credentials are wrong, but they aren't (I can login to npmjs.org using the same username / password)
15:35 < ansolas> http://pastebin.com/6m9Yn7g4
15:35 < ansolas> how do i access the object usernames from within my init function ?
15:37 < bubblez> after i installed a module like this: user@host:/var/www# npm install -g ucss    how can i run it?
15:41 < TehShrike> ansolas: I don't think you can set exports like that
15:42 < TehShrike> ansolas: I believe you need to do module.exports.usernames = {} and module.exports.init = function(server) { ...
15:42 < SomeoneWeird> s/module.//
15:42 < ansolas> hmm
15:42 < TehShrike> right
15:42 < ansolas> i try that 
15:42 < ansolas> thanks
15:42 < TehShrike> That
15:44 < bubblez> after i installed a module like this: user@host:/var/www$ npm install -g ucss    how can i run it? 'node ucss' does not work
15:45 < chrisjaure> bubblez: just `ucss` should work
15:46 < ansolas> and access the usernames from within the mdule like this ? : module.exports.usernames ?
15:50 < ansolas> ok i solved it :)
15:50 < ansolas> when i put the usernames object var direct in the init method it is working
15:51 < SomeoneWeird> http://pastebin.com/PHhQ3Js8
15:52 < ansolas> http://pastebin.com/VXbQWKmA\
15:52 < ansolas> even like this
15:52 < ansolas> http://pastebin.com/VXbQWKmA
15:53 < ansolas> but your might be more flexible :)
15:53 < bubblez> chrisjaure thanks ;) as simple as that
15:56 < dingfeng_quek> have a problem with https.request(options, ...               : when specifying headers under options, the header-keys are converted to lower-case. doesn't feel like the right behaviour - might as well make it as strict as possible, even if the RFC states that headers should be case-insensitive
15:56 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:57 < ansolas> @SomeWeird: name should be in your example usernames right ?
15:57 < ansolas> @SomeOneWeird: but usernames i not accessible from within the init function 
16:01 < ansolas> aha ok 
16:01 < ansolas> i can directly access the var outside the module itself 
16:01 < ansolas> cool
16:01 < ansolas> thank you !
16:02 < SomeoneWeird> lol
16:02 < ansolas> yeh , first i had all my vars inside the module 
16:02 < grange> hey guys. I have developed a node.js application which I now want to integrate into facebook. But I'm stuck at that. Found a couple of plugins, but as far as I understood, they are for using facebook api. All I want is to show my application as an app on facebook. does anyone have experience with that? thank you!
16:07 < radiodario> facebook use PHP, they don't allow node.js apps
16:07 < radiodario> (j/k)
16:09 < grange> radiodario: thank you. that's the worst case scenario ^^ 
16:10 < radiodario> i think they have a registration page
16:10 < radiodario> but your app needs to be hosted somewhere
16:10 < radiodario> i think it's a case of RTM 
16:12 < grange> yes, I did the registration. but all I get is "cannot /POST"
16:12 < radiodario> not sure man
16:13 < grange> maybe someone is experienced with that :) thanks so far
16:30 < motiooon> what are some of the best ted, bad frameworks for node ?
16:31 < motiooon> tdd, bdd
16:41 < mscdex> isaacs: the package listings on npmjs.org seem to be stale?
16:43 < Xeon06_> Hey folks. Would anyone know why this simple example using Tim Caswell's nStore ( creationix / nStore on github) wouldn't work? http://pastebin.com/ecWa1zRz
16:43 < Xeon06_> It seems like the save callback is never called
16:47 <@isaacs> mscdex: example?
16:47 <@isaacs> mscdex: they are up to 10 minutes stale
16:47 < mscdex> isaacs: https://npmjs.org/browse/
16:47 < mscdex> shows 8/20/12
16:47 < mscdex> as newest
16:47 <@isaacs> ircretary: what time is it?
16:48 < ircretary> isaacs: It's 2012-08-21T16:48:38.698Z by my watch, sir.
16:48 <@isaacs> hm.
16:48 <@isaacs> yeah,t hat's a bit weird
16:48 <@isaacs> one sec, i'll kick some servers
16:48 < mscdex> it's also visible when you look a particular package's info
16:48 < mscdex> but using `npm view foo` shows up correctly
16:50 <@isaacs> right
16:50 <@isaacs> re-generating
16:51 <@isaacs> mscdex: done
16:51 < mscdex> cool :-)
16:51 < bradleymeck> isaacs: i sent you those pull requests but wanted to ask if fetch.js in npm needs to be updated too, not sure if that is moved/moving to the registry client
16:51 < Xeon06_> Re: my problem. I'm stupid. I wasn't checking for errors in the DB creation
16:52 < zipp> ircretary: where is zipp?
16:52 < ircretary> zipp: zipp was last seen at 2012-08-21T16:52:49.087Z, in #Node.js saying where is zipp?
16:52 < zipp> Oh, nifty.
16:52 <@isaacs> zipp: check this out.  count to 10, and then ask ircretary where i am.
16:53 < zipp> ircretary: where is isaacs?
16:53 < ircretary> zipp: isaacs was last seen at 2012-08-21T16:53:25.816Z, in #libuv saying hi
16:53 <@isaacs> ;P
16:54 < zipp> Ahh joined on the other channel. Need to get her on ALL the channels!
16:54  * bradleymeck always thinks of ircretary as a guy
16:56 < zipp> Hmm. I read ircretary in a female James Bond assistant-like voice. Maybe Tony Stark's assistant / wife lady.
17:01 < creationix> and Xeon06 is gone...
17:11 < bradleymeck> creationix isnt that how it always is?
17:12 < bright_day> can anyone recommend good book on nodejs?
17:13 < mscdex> creationix: at least he found a solution to his problem ;-)
17:19 < Fike> Having a little issue with node-request, anyone have any experience with it?
17:28 < Hui_Nan> hi
17:28 < Hui_Nan> has anyone an expirience with anvil.js --host ?
17:29 < Hui_Nan> i get "Can not GET <resource>" error when try to connect
17:33 < katspaugh> Hi! I'm having this error with node-canvas: "error while writing to output stream" (when doing toDataURL). What am I doing wrong?
17:36 < katspaugh> Has anyone experienced *no* such error when using node-canvas and toDataURL method?
17:36 < luckysmack_> how could i use http.get to get only the title of a page? I want to be able to get a given page and pull the page from it.
17:39 < milani> can anyone help me convert a v8 handle to void* ? Persistent<Object> or Local<Object>
17:40 < katspaugh> Posted an issue: https://github.com/LearnBoost/node-canvas/issues/207
17:46 < TooTallNate> milani: here's how I do it in "ref" https://github.com/TooTallNate/ref/blob/master/src/binding.cc#L186-188
17:46 < milani> TooTallNate, thx for the link. reading...
18:01 < timoxley> zipp re express validation, I had same problem until I realised you're really supposed to push all that validation code into individual handlers. Each handler ideally does one thing and one thing only.
18:02 < timoxley> zipp allows validation reuse and to easily test the validation without involving all the other logic
18:04 < zipp> timoxley Yeah, that's what I'm working on this morning, actually. And it's not just simple type validation for something things, but making sure objects exist before a request is completed, and realistically, I think I need to use some middleware for that sort of thing, which I'm also writing
18:06 < timoxley> zipp how are you planning on using middleware to do that?
18:07 < timoxley> r.e. "making sure objects exist before a request is completed"
18:08 < livinded> anyone going to node camp and have any extra room in their tent? Trying to avoid buying one when I get up there for paying to ship one up
18:08 < zipp> timoxley basically just have a middleware that checks if objects of a super redismodel class exist in the db if they have URIs dependent on them
18:10 < zipp> So say I have /user/:id, I have a redismodel object, and an inherited user object. Instead of using app.param (which I could do as well), I have a middleware that is activated when it sees a variable, db dependent object, and checks the DB for it, else errors out in some graceful fashion
18:10 < timoxley> zipp you can't wait for the async callback from the db? don't really understand, but curious. you should share some codes
18:11 < zipp> timoxley: I'll put up a gist when I figure out my logic for it :P
18:13 < timoxley> zipp gotcha, yeah I'm using app.param to get the data loading out of the handlers
18:14 < timoxley> zipp your 'redismodel', basically just json serialised to redis?
18:15 < zipp> timoxley yeah
18:15 < timoxley> cool
18:15 < zipp> Serialization a la http://github.com/carlos8f/hydration 
18:16 < timoxley> zipp your lib?
18:16 < zipp> timoxley: co-worker's
18:17 < timoxley> zipp tell him his readme sucks :P
18:17 < zipp> timoxley lol he's terrible at documentation :P
18:18 < zipp> hydration.hydrate(object) // hydration.dehydrate(object) I think are its only methods
18:19 < timoxley> zipp from tests hard to tell what it actually does since hydration.dehydrate(hydration.hydrate(object)) == object would still pass if both methods were a noop
18:19 < timoxley> but yeah
18:19 < timoxley> cool
18:33 < jcrew> anyone have a precise number library?  i'm looking for precision numbers instead of .5 being off at the 20th decimal place and yes i need that many
18:34 < creationix> jcrew, what kind of math will you be doing?
18:34 < jcrew> creationix simple add multiply subtract and divide
18:35 < creationix> fixed point math with 20 places?
18:35 < creationix> or do you need floats?
18:35 < jcrew> i need floats essentially
18:35 < creationix> nevermind, my idea wouldn't work anway
18:36 < creationix> the native number type is only precise to about 16 digits (base 10)
18:36 < jcrew> i started writing something to handle huge amounts of decimals but figured i would ask before i get too far
18:36 < creationix> I guess poor man's solution would be to use strings and implement add and friends as string manipulation functions
18:37 < creationix> but that would be quite slow
18:37 < creationix> I think there are some bigint binary addons
18:37 < jcrew> the math is fairly simple so yea it's a slow way to do it but it's still fast enough to use for what i'm trying to do 
18:38 <@isaacs> creationix: there's bigint binary addons, or you can represent bigints as arrays of ints
18:38 < jcrew> isaacs: anything you're aware of to fix the decimal behavior?  like getting a 'float' ?
18:38 < creationix> jcrew, represent the number as base-256 numbers using buffers?
18:38 <@isaacs> creationix: http://www.leemon.com/crypto/BigInt.js
18:39 <@isaacs> creationix: representing numbers as base-256 in buffers would be interesting, though
18:39 <@isaacs> creationix: ie, doing math as binary operations
18:39 < jcrew> creationix: actually that's a good idea, i think i could do base2 would be easier
18:39 < creationix> just reserve some bits for offset and sign and you have homemade floats
18:39 < jcrew> i'm doing compression ^
18:40 <@isaacs> jcrew: base256 is just base2 with bytes
18:40 < creationix> yep, bit operators are pretty fast on buffer values
18:40 < jcrew> cool, i will check that out
18:40 < jcrew> thanks creationix isaacs 
18:41 -!- Topic for #Node.js: http://nodejs.org/
18:41 -!- Topic set by bnoordhuis [~bnoordhui@ip125-96-214-87.adsl2.static.versatel.nl] [Tue Aug 21 12:51:12 2012]
18:42 < Domenic> substack
18:42 < Domenic> err, substack, do you want help tracking down the browserify travis failures?
18:47 < creationix> In fact, I think we hat just begun to explore using node buffers as data storage for anything other than binary protocols and binary data streams.
18:47 < substack> Domenic: that would be rad
18:47 < substack> Domenic: I haven't been able to reproduce any of them
18:48 < Domenic> substack: awesome. yeah I can repro them consistently locally. pretty sure it's pulling in the vm module because the tests require it, and thus node_modules/vm-browserify/* as well. Will bisect to see what changed.
18:53 < Domenic> substack: why'd you remove the .gitignore node_modules; it's making things annoying :(
18:53 < substack> Domenic: .gitignore should never contain node_modules
18:54 < Domenic> substack: even if you don't check in node_modules?
18:54 < substack> because it fucks up people checking in node_modules
18:54 < Domenic> right but browserify doesn't check in node_modules
18:57 < Domenic> substack: i'll open a new browserify issue to document the results of my investigations, hopefully turn it into a pull request later
18:57 < bnoordhuis> milani: re create new thread: i would say so, it'll stop the main thread from blocking
18:58 < substack> Domenic: awesome thanks for looking into it!
18:58 < substack> glad somebody can reproduce it
18:58 < milani> bnoordhuis, as I see work queue creates a new thread and destroys it after finishing the job.
18:58 < milani> am I right?
19:01 < bnoordhuis> milani: uv_queue_work() may create a new thread or reuse an existing one, it uses a thread pool
19:01 < bnoordhuis> uv_thread_create always creates a new thread
19:02 < milani> oh:( then I should rewrite my functions. thx.
19:03 < milani> bnoordhuis, work queue thread is always a thread other than the main one, right?
19:25 < bnoordhuis> milani: yes
19:27 < CIA-88> node: Ben Noordhuis master * r63d13e8 / (4 files in 3 dirs): child_process: emit error on exec failure - http://git.io/TxjJpA
19:33 < geroninoob> hello evereybody
19:33 < jmar777> any favorites for model/object/json-ish validation?
19:33 < jmar777> modules, that is?
19:33 < geroninoob> I found node a couple of days ago and I have a quick question about callback functions. They are called when something is "ready" right?
19:34 < jmar777> geroninoob: they can be called in a variety of situations - usually they're supplied before an asynchronous operation (e.g., saving something to the database)
19:35 < geroninoob> jmar777: oh okay. Is there a way I can call something when it actually is ready? I'm just trying to make a small image script here with imagemagick and I'm bad at figuring this one out.
19:35 < jmar777> geroninoob: if an error occurs, by convention, your callback is invoked with the error object as the first parameter. if the operation succeeds, your callback is invoked (with null being provided for the error parameter)
19:35 < jmar777> or some falsy parameter anyway... undefined perhaps
19:35 < jmar777> geroninoob: check out EventEmitter
19:36 < jmar777> geroninoob: when things are in a "ready" state, do something like `this.emit('ready')`
19:36 < jmar777> geroninoob: and then consuming code and do `theThing.on('ready', function() { /* do something when ready */ })
19:36 < geroninoob> jmar777: http://pastebin.com/C4x8gsKM <- this is the function I'm fiddling with right now. how could I first trigger the next function when it's ready in this example?
19:37 < jmar777> geroninoob: http://nodejs.org/api/events.html#events_class_events_eventemitter
19:37 < geroninoob> jmar777: I can see I have to dive a lot deeper into all this stuff, already learned something again
19:38 < Domenic> substack: figured it out, info at https://github.com/substack/node-browserify/issues/212 . Let me know if you want me to take a crack at a fix, although I imagine you might want to fix it your own way.
19:38 < geroninoob> jmar777: so I'd give the pasted function and emitter and call the one that proceeds with a listener?
19:39 < jmar777> geroninoob: you would need your function to accept a callback as well
19:39 < jmar777> geroninoob: hold on....
19:39 < xer0x> geroninoob, your snippet has a callback fn on line 2.  That fn expects to be called when im.identify() is finished..
19:41 < geroninoob> xer0x: I know, but this gives me different results, which means that it doesn't wait for it to be finished, right? or should I just replace function with the actual function that takes the output from this one?
19:41 < geroninoob> I'm confused by this event driven stuff for now, but it's very exiting
19:41 < geroninoob> +c
19:44 < jmar777> geroninoob: something like this: http://pastebin.com/72M1Y53e
19:44 < jmar777> geroninoob: after seeing your example, the EventEmitter would be overkill - just make get_dimensions accept a callback that can in turn be invoked asynchronously
19:45 < xer0x> jmar777++ that looks good
19:46 < geroninoob> jmar777: okay, thank you so much for this. I'll try to implement this and I guess you just showed me how to do stuff with node
19:46  * geroninoob needs some time to fiddle again, but will report back
19:48 < jmar777> geroninoob: good luck. when it clicks, it's not so bad :)
19:49 < guybrush> geroninoob: maybe i dont understand your question, but maybe this helps you? : `require('child_process').exec('./script',function(err,stdout,stderr){/* done */})` -- see http://nodejs.org/api/child_process.html
19:50 < guybrush> oh sorry lol i didnt scroll to the bottom of chat-log :p
19:51 < jmar777> but ya.. back to MY question :p anyone recommend any modules for doing json or generic object validation?
19:51 < mmalecki> jmar777: revalidator
19:52 < guybrush> jmar777: https://npmjs.org/browse/keyword/validation
19:52 < brianc1> hwody
19:52 < brianc1> howdy
19:52 < brianc1> anyone know a good module for pub/sub between multiple node processes?
19:53 < brianc1> i might just use redis
19:53 < gkatsev> can't you just use a socket?
19:53 < gkatsev> or redis
19:53 < brianc1> gkatsev: i can use redis, yeah
19:53 < geroninoob> guybrush: I have no idea, what does it do?
19:53 < CIA-88> node: Bert Belder wip * r8568d7b / (lib/path.js test/simple/test-path.js): path.join stuff - http://git.io/tBv98Q
19:53 < jmar777> mmalecki: nice - that looks pretty slick
19:54 < jmar777> guybrush: thanks too - i forgot npmjs.org is useful now :)
19:54 < guybrush> brian1: you might want to check out hookio/hookio or visionmedia/axon
19:54 < guybrush> geroninoob: it executes your script and calls the callback when its done providing information about how it went
19:55 < guybrush> geroninoob: thought you want to execute a imagemagick-script or sth and be noticed when its done
19:55 < astropirate> Anyone interested in working on an opensource CMS using Node?
19:56 < geroninoob> guybrush: oh, that sounds like a pretty good idea, thanks!
19:56 < guybrush> geroninoob: also see https://npmjs.org/package/gm
20:01 < Domenic_> gm package is awesome
20:01 < Domenic_> cut down our memory and cpu usage by tons compared to spawning imagemagick
20:02 < lohkey> doesn't the gm package spawn instances of graphicmagick?
20:02 < guybrush> jmar777: also its hard to find a link to npmjs.org/browse/:type/:arg (i did find it by clicking on a keyword while browsing one package :p)
20:03 < guybrush> though i think searching will include any modules with the keyword anyways
20:03 < Domenic_> lohkey: yes but it streams instead of buffers
20:04 < lohkey> yay streaming
20:04 < jmar777> weekend project idea: periodically grab npm module repository, and crawl linked github pages to allow ranking by GH watches/stars
20:04 < guybrush> i think child_process.exec does stream too, it just does buffer aswell :p
20:05 < guybrush> child = cp.exec(); child.stderr.pipe(somestream)
20:08 < Domenic_> right but graphicsmagick accepts streaming input and does streaming output on the fly; imagemagick does not.
20:08 < guybrush> oh didnt know that
20:14 <@konobi> Domenic_: sure it does
20:15 < technocrat> hi, can i have client-less (no browser redirect) auth for google with everyauth or connect-auth?
20:15 < technocrat> i want to access mt tasks api in a background
20:16 < technocrat> is it even possible with oauth? i know facebook had one permission type for that... like a permament token?
20:16 < Arro> can someone tell me what's wrong with this code?
20:16 < Arro> http://pastebin.com/PE4KucGp
20:16 < Arro> getting "Error: connect EADDRNOTAVAIL"
20:17 < technocrat> Arro: fist param to a callback is err and respose is the second one?
20:17 < Arro> technocrat: ok, fixed, but same problem
20:17 < technocrat> your error looks like some firewall
20:17 < substack> Domenic_: fixed it, bug in detective
20:18 < Arro> i've tried it with multiple urls, and they all get blocked though i can navigate to them in a browser
20:18 < substack> Domenic_: detective wasn't ignoring (require)('skipme') statements like it should
20:18 <@konobi> dns?
20:18 < substack> related to the switch to esprima
20:18 < technocrat> is that a personal connection?
20:18 < Arro> yep
20:19 < technocrat> what curl says?
20:19 < Domenic_> substack: sweet
20:19 < Arro> i can curl it
20:19 < substack> http://travis-ci.org/#!/substack/node-browserify/builds/2193204
20:20 < Domenic_> success!!
20:20 < guybrush> substack: finally the annoying failed image has gone :p
20:20 < Arro> maybe i need to reset my router or something
20:21 < technocrat> Arro: get ip from (ping?) and try it directly, itll skip dns
20:21 < Domenic_> substack: now accept https://github.com/substack/node-browserify/pull/211 :)
20:34 < bnoordhuis> Arro: what OS?
20:35 < Arro> bnoordhuis: osx mountain lion
20:36 < geroninoob> jmar777: hey, it's still behaving weird, would you mind taking a look again?
20:36 < Arro> same error on 0.6.19 and 0.6.20
20:36 < bnoordhuis> Arro: can you gist the output of `dtruss node script.js`?
20:37 < context> http://i.imgur.com/Ttrix.png
20:38 < jmar777> geroninoob: about to pack up actually
20:39 < jmar777> geroninoob: if you have a pastie ready, i could take a quick look
20:39 < geroninoob> jmar777: ok, I'll just paste the whole thing, it's not that long
20:40 < geroninoob> jmar777: http://pastebin.com/svnCQ5ps <- feel free to laugh, would just like a suggestion on how to restructure this node style (I'm from the blocking world)
20:44 < jmar777> geroninoob: hm... gotta get, so not going to be able to add anything too constructive. when you're looping through multiple concurrent async operations, though (like in `resize_all`), I recommend using a helper library. my favorite: https://github.com/caolan/async
20:44 < jmar777> geroninoob: sorry that's not more helpful, but gotta run for now.
20:47 < CIA-88> node: Bert Belder wip * r6e71b65 / (lib/path.js test/simple/test-path.js): path.join stuff - http://git.io/SkklvQ
20:48 < holzp> nobodys's gonna laugh geroninoob, node is a new way of thinking
20:49 < geroninoob> holzp: yeah, I was kind of mindckd today when I realised that the more primitive versions of this image script actually only worked by accident
20:50 < geroninoob> it's like: Okay, I thought I'm doing it right, but actually it was only because I was lucky only to have two images
20:50 < geroninoob> holzp: do you know if this async helper would make sense for me? because the script is only meant to be run locally for now
20:55 < csquared> anyone having issues installing express 3.x.x on OS X ?
20:55 < timoxley> csquared what issues
20:55 < csquared> i'm admittedly new to npm and may be missing how to specify an alpha
20:55 < csquared> i was doing "express" : "*"
20:55 < csquared> in my package.json
20:55 < timoxley> csquared npm install --save express@latest
20:56 < csquared> $  npm install --save express@latest
20:56 < csquared> express@2.5.8 ./node_modules/express
20:56 < csquared> ├── qs@0.4.0
20:56 < csquared> ├── mime@1.2.4
20:56 < csquared> ├── mkdirp@0.3.0
20:56 < geroninoob> This seems to do what I need: async.series([
20:56 < csquared> └── connect@1.8.5 (formidable@1.0.8)
20:57 < timoxley> csquared what version of npm?
20:57 < timoxley> csquared npm -v
20:57 < csquared> 1.1.35
20:57 < csquared> woops
20:57 < csquared> 1.1.25
20:58 < Domenic_> wait what I totally thought csquared was a bot
20:58 < timoxley> csquared node -v
20:58 < csquared> haha
20:58 < Domenic_> he spit out that dependency tree so fast
20:58 < csquared> v0.6.13
20:58 < csquared> i think we found the problem
20:58 < timoxley> csquared yep
20:59 < csquared> timoxley: much obliged for the rubber duck session
20:59 < timoxley> csquared np
20:59 < AviMarcus> ahh rubber duck.
20:59 < AviMarcus> 'night.
21:00 < csquared> updating node to 0.8.7 via homebrew
21:00 < chilts> rvagg: thanks :) sorry, didn't see your message last night
21:00 < chilts> yeah, 19 operations
21:00 < timoxley> csquared should probably get yourself a node version manager e.g. n, nvm or nave
21:01 < chilts> wasn't too bad, I've done the AWS Signature v4 before, so that helped :)
21:02 < holzp> geroninoob, you can use async to make node behave in a blocking way without actually blocking
21:03 < holzp> if you have dependencies on other functions executing and dont want to nest forever
21:03 < geroninoob> holzp: like with this async.serious, right?
21:03 < holzp> async.series?
21:04 < holzp> ger if i scanned that right you are resizing images?
21:04 < geroninoob> holzp: yeah
21:04 < geroninoob> well, I'm trying
21:04 < holzp> without looking too deep i think you are looking to do something like 
21:04 < rioter> rvagg: works in firefox for me. Also, not cool? We are giving you free beer.
21:04 < holzp> readfile, alterfile, writefile
21:05 < rioter> In our spare time.
21:05 < holzp> which you may be able to do all node.js nesty
21:05 < rioter> what exactly is not cool about that?
21:05 < holzp> of you can sync it
21:05 < geroninoob> holzp: okay, so is this the event emitting stuff, or?
21:05 < holzp> read the file, then munge the file then write the file
21:06 < holzp> i dont think you need to emit any events explicitly just react to the ones the file handler emits
21:06 < geroninoob> holzp: I'm also reading the width and height to find the aspect ratio and stuff
21:07 < holzp> im does that for you
21:07 < holzp> i would do my file munging right there
21:07 < holzp> in im.identify
21:07 < geroninoob> well this kind fella gave me this paste: http://pastebin.com/72M1Y53e (after seeing my paste: http://pastebin.com/C4x8gsKM) and this should make the function wait until it has the output, but I can't really make it work
21:08 < holzp> im not supernode guy myself yet 
21:08 < geroninoob> holzp: so if I just throw everything in there then until I get more understanding of all this callback async event driven magic?
21:09 < holzp> well sorta
21:09 < geroninoob> holzp: it just bugs me that I don't seem to be able to get this callback thing to work
21:09 <@Nexxy> supernode!
21:10 < holzp> instead of looping and saying { do x, do y, do z } instead you are using function callbacks like x.do(y.do(z.do))
21:10 < holzp> its wierd but when it clicks you really will get it like magic
21:11 < geroninoob> holzp: so basically for every function I'd have in, let's say PHP, I'd add this callback to ensure something is ready and to move on.
21:11 < geroninoob> holzp: so everything kinda looks like the paste from jma777: http://pastebin.com/72M1Y53e
21:12 < holzp> it may not have to be that libraryish but sorta
21:13 < holzp> li g2g if you are still having trouble later ill try my hand at it
21:13 < holzp> i need the practice :)
21:13 < geroninoob> okay, thanks man!
21:19 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:21 < AAA_awright> astropirate: What's your idea?
21:22 < CIA-88> libuv: Ben Noordhuis master * rb12b649 / src/unix/core.c : darwin, freebsd: use ioctl(FIOCLEX) and ioctl(FIONBIO) - http://git.io/oEmH8w
21:26 < CIA-88> node: Ben Noordhuis v0.8 * rbadbd1a / (doc/api/tls.markdown lib/tls.js): tls: update default cipher list - http://git.io/qhJX2w
21:27 < entitydigital> Hi, does anyone know of a node mysql client module that supports connections using ssl? I can't seem to find one...
21:27 < AAA_awright> entitydigital: You should be able to pipe the connection through require(ssl)
21:28 < entitydigital> AAA_awright: interesting, I hadn't thought of that
21:28 < entitydigital> obviously
21:29 < entitydigital> thanks :)
21:32 < geroninoob> I'm off trying to rewrite for now. This community is great
21:36 < appinsanity-mike> are there any cases where fs.readFileSync works but fs.readFile never fires the callback?
21:36 < mc-> shouldn't be
21:36 < appinsanity-mike> are there any cases where fs.readFile works but fs.readFileSync never fires the callback?
21:36 < nlf> readFileSync doesn't have a callback
21:36 < appinsanity-mike> sorry I had it backwards in my question
21:37 < nlf> var fileContents = fs.readFileSync('/path/to/file');
21:37 < appinsanity-mike> Sync works perfect
21:38 < appinsanity-mike> when I just do fs.readFile(path, 'utf8', function(err,data) {  }) the callback is not firing
21:38 < AAA_awright> astropirate: callbacks are guarenteed to be called exactly once
21:38 < nlf> at all? not even an error?
21:39 < appinsanity-mike> i placed a console.log in the cb and it never fires, first line
21:39 < nlf> how big is the file?
21:39 < appinsanity-mike> i am inside of a vows test, but don't see how that could be causing it, sure it's something stupid
21:39 < nlf> there isn't any circumstance i can think of where it wouldn't fire the callback at all
21:39 < appinsanity-mike> small json file
21:39 < AAA_awright> appinsanity-mike: You're testing err? try console.log(arguments);
21:39 < appinsanity-mike> weird
21:40 < Domenic_> Do it outside the vows test
21:40 < Domenic_> (for debugging purposes)
21:40 < appinsanity-mike> i'm gonna run a quick test outside of vows
21:40 < AAA_awright> Yeah make sure you're _calling the function_
21:40 < appinsanity-mike> just thought there might be some weird case where this happens
21:40 < AAA_awright> Vows is great but there's some quirks
21:44 < RushPL> anybody using nodejitsu? I just tried to deploy a sample app creating with Express and "jitsu deploy" is ending with "package.json error: can't find starting script: node app" :// any ideas?
21:44 < appinsanity-mike> outside of vows i am see the same behavior, strange
21:46 < appinsanity-mike> RushPL: there is usually support available 24/7 on the nodejitsu IRC channel
21:46 < RushPL> oh thanks
21:51 < samholmes> If you edited the host file on Windows, you could change 'localhost' to just 'local', which is kinda cool..But then I got to thinking, you could take it a step further and shorten it from 'local' to 'lol'.. lol
21:51  * samholmes is retarted, he knows.
21:53 < appinsanity-mike> sync working and async not on the file load WAS a VOWS issue… 
21:57  * mscdex shakes a fist at synchronous i/o
21:58 < appinsanity-mike> shakes a fist at vowsjs
21:59 < spolu> Is there a good javascrit indenter out there??? anybody? They all seem to suck. How comes?
22:05 < ngoldman> I wish I was going to nodedublin... looks like a fantastic event
22:09 < zipp> I want to go to summer camp. but ehh.. my company doesn't think it's an essential job function :p
22:10 < zipp> Anyone do any kind of lazy loading of Mongoose models?
22:15 < TehShrike|Work> What's the Best Way to parse the POST values out of a request?
22:17 < TehShrike|Work> Looks like it's so simple that there aren't even any modules to do it :-P
22:17 < timoxley> TehShrike|Work unless you have a good reason not to, should probably just use connect's body parser http://www.senchalabs.org/connect/bodyParser.html
22:17 < TehShrike|Work> Fair enough, I suppose
22:17 < TehShrike|Work> aaah
22:18 < ngoldman> req.body.(name of input field)
22:19 < TehShrike|Work> ngoldman: Really?  That would be nice - I didn't see anything on http://nodejs.org/api/http.html about that body property
22:20 < ngoldman> TehShrike|Work: it's part of the connect bodyParser middleware timoxley mentioned
22:20 < TehShrike|Work> aah, ok, I gotcha
22:21 < TehShrike|Work> Can I use the bodyParser without the rest of the Connect middleware? :-x
22:22 < apipkin> if i'm wanting to let someone see my localhost from node.js remotely, is it as simple as giving them my ip address? 
22:22 < timoxley> TehShrike|Work chances are you'll end up wanting some of the other stuff in there
22:23 < timoxley> apipkin your router/firewall might get in the way
22:23  * luchenbill humps apipkin
22:23 < luchenbill> ^^figrued as much
22:23  * TehShrike|Work gasps at luchenbill
22:24 < apipkin> timoxley: thanks. do you know of a service to allow that, or it is just a matter of a router config either way?
22:24 < timoxley> apipkin for something that works reliably no matter what the network says you could use http://showoff.io/ 
22:24 < luchenbill> i'm looking in my roter
22:25 < luchenbill> router
22:25 < apipkin> timoxley: oh that's awesome. thanks!
22:28 < ngoldman> timoxley++
22:30 < CIA-88> node: isaacs v0.8 * r2bcb9ab / (170 files in 28 dirs): npm: Upgrade to 1.1.55 - http://git.io/N0xsIg
22:32 < luchenbill> is it possible to specify a local ip for testing rather than just localhost?
22:32 < luchenbill> like 192.168.0.69? 
22:33 <@Nexxy> luchenbill, 127.0.0.1
22:33 < luchenbill> so there's no way to set an ip for local testing? 
22:33 < mscdex> luchenbill: yeah
22:34 < ngoldman> i suppose you could edit /etc/hosts to point 192.168.0.69 to 127.0.0.1
22:34 < luchenbill> ehh:(
22:34 < ngoldman> yeah kind of nasty
22:34 < luchenbill> hax wee
22:34 < ngoldman> why a specific ip?
22:35 < mscdex> eh you can't redirect ips with /etc/hosts?
22:35 < ngoldman> why not luchenbillfuntime.dev ?
22:35 < mscdex> just hosts
22:35 < luchenbill> if I had a server on the network and multiple comptuers testing the same project
22:35 < ngoldman> mscdex: ah alright thanks for clarification, it was a wild guess
22:35 < luchenbill> luchenbillsixnine.local wee jk
22:36 < luchenbill> okay thanks guys
22:36 < astropirate> AAA_awright, hi sorry I  was AFK. still want to hear about CMS?
22:36 < luchenbill> and ladies! :)
22:36 < ngoldman> luchenbill: unless it's a hard req of the project I'd just deploy to a test server
22:38 < luchenbill> ehh my server/hosting company will not allow me to use apt* nor ./configure
22:38 < luchenbill> so i'm just doing it local for now, then I may upgrade to a vpn or dedi idk 
22:39 < luchenbill> however this is my first run-in with node and I'm loving it, created my first http server, and I can't believe how simple it was 
22:39 < ngoldman> you might want to check out nodejitsu
22:39 < luchenbill> i'm having so much fun already
22:39 < ngoldman> like heroku for node
22:40 < livinded> um, node is statically compiled. You can just build it locally and push the binary up
22:40 < paveq> I just installed express as root with "npm install -g express"
22:40 < mscdex> luchenbill: you can install the pre-built node binaries
22:40 < paveq> /usr/lib/node_modules/express/ seems to have weird permissions
22:41 < paveq> drwx------.  5 nobody root  4096 Aug 22 01:29 express
22:41 < paveq> binary under that path can't be executed by normal user
22:41 < paveq> is that intentional?
22:41 < paveq> why not 755
22:42 < AAA_awright> astropirate: Go
22:42 < AAA_awright> Keep pinging me, I'll read it
22:43 < luchenbill> lol
22:46 < CIA-88> libuv: Bert Belder master * r564e7c7 / (4 files in 3 dirs): windows: emit SIGWINCH when the console size changes - http://git.io/0uKkHQ
22:51 < thealphanerd> anyone have a minute to point me in the right direction in regards to making bindings for a C program using npm
22:52 < AAA_awright> Bindings for a C program?
22:53 < thealphanerd> I'm working with the raspberry pi
22:54 <@Nexxy> so is TooTallNate !
22:54 <@Nexxy> he has a cross compiling toolchain I want to know more about
22:54 < TooTallNate> Nexxy: tonight, hopefully i'll find some time to write a blog article :)
22:54 < CIA-88> node: Bert Belder master * red093f1 / (13 files in 5 dirs): uv: upgrade to 564e7c7 - http://git.io/f_E1dw
22:54 <@Nexxy> TooTallNate, sweet :D
22:55 <@Nexxy> it would be cool to have somewhere (fairly recent) to start
22:55 < TehShrike|Work> thealphanerd: relevant to your interests: http://nodeup.com/twentyseven
22:55 < TooTallNate> thealphanerd: http://nodejs.org/api/addons.html
22:55 <@Nexxy> I'd be happy to blog my process on getting the same thing working on *nix
22:55 < TooTallNate> Nexxy: in short, crosstool-ng is the shit
22:56 < thealphanerd> I want to do work with i2c specifically
22:56 < thealphanerd> there is no generic i2c lib
22:56 <@Nexxy> ohh that's the episode that I wasn't relevant enough for ;P
22:56 < nlf> i'd love to see gpio access in node on the raspberry pi
22:56 < thealphanerd> but I found a C library to do all the GPIO + i2c stuff on the raspi
22:56 < thealphanerd> so there is this https://projects.drogon.net/raspberry-pi/wiringpi/download-and-install/
22:56 < nlf> i guess you could just wrap the /sys filesystem stuff
22:57 < nlf> you can interact with gpio right from the shell by directly manipulating the /sys filesystem
22:57 < thealphanerd> nlf: indeed… but the low level communication stuff for i2c is a pain in the arse
22:57 <@Nexxy> nlf, I know that is being worked on 
22:57 < nlf> that i believe
22:57 < thealphanerd> Nexxy: people on working on it already?
22:58 <@Nexxy> thealphanerd, I believe so
22:58 < thealphanerd> any links to projects?
22:58 < TooTallNate> i mean it's just fs read/writing right?
22:58 < nlf> i haven't even tried compiling node on my rpi yet
22:58 <@Nexxy> I will keep you in mind if/when I hear more
22:58 < TooTallNate> you should be able to do it all in JavaScript
22:58 < nlf> TooTallNate: to do it that way, yes
22:58 < thealphanerd> TooTallNate: it is an isn't
22:58 <@Nexxy> not exactly
22:59 < thealphanerd> gpio can work just with file system writes
22:59 < thealphanerd> but i2c requires a clock and all sorts of clock based messaging
22:59 < nlf> yeah, i2c is a totally different game
22:59 < nlf> gpio is pretty simple
22:59 < TooTallNate> what is i2c now?
22:59  * TooTallNate embedding n00b
23:00 < thealphanerd> i2c is a communication protocol
23:00 < thealphanerd> also know as "two wire"
23:00 < thealphanerd> it allows you to have a single clock wire, and bus wire
23:00 < thealphanerd> and conenct a multitude of devices on there that are slaves
23:00 < nlf> with a fancy messaging layer
23:00 < thealphanerd> that all have specific addresses
23:00 < thealphanerd> working on an app for plug and play sensors with the raspi
23:01 < thealphanerd> other guys on the research project are workign with the at tiny making it in to a simple i2c slae
23:01 < tmpvar> (one caveat is that each device needs to be unique or you have to place it behind some sort of router thing)
23:01 < thealphanerd> and i'm trying to get i2c master stuff working on node
23:01 < tmpvar> e.g. multiple rgb led drivers
23:01 < thealphanerd> tmpvar: you can have more than one device with the same address
23:01 < thealphanerd> I believe
23:01 < thealphanerd> I have without problem before
23:02 < thealphanerd> probably not to spec though
23:02 < tmpvar> thealphanerd, ah. I avoided it once I read the spec ;)
23:02 < thealphanerd> LOL
23:02 < thealphanerd> I did stuff with the blinkM]
23:02 < thealphanerd> and had a bunch with the same address
23:02 < thealphanerd> worked fine
23:03 < thealphanerd> they just did the same thing
23:03 < thealphanerd> but I could see how it could cause problems with the call / response
23:03 < thealphanerd> so anyways… has anyone written an npm module that was a binding for a c program before?
23:03 < tmpvar> thealphanerd, oh right.. yeah they will all behave the same.  for my application I needed to control each individually
23:04 < tmpvar> thealphanerd, there are plenty of those :)
23:04 < thealphanerd> tmpvar: I think the address stuff can be the coolest in that you can poll and find out what addresses are active
23:04 < thealphanerd> plug and play :D
23:04 < CIA-88> libuv: Bert Belder master * rf03f14c / src/win/tty.c : windows: lock tty output before updating the virtual window size - http://git.io/dHtDoQ
23:06 < CIA-88> libuv: Bert Belder master * r03bdfd0 / src/win/tty.c : windows: lock tty output before updating the virtual window size - http://git.io/EslMSA
23:06 < TooTallNate> thealphanerd: what do you want to know about native addons specifically?
23:07 < thealphanerd> where to start :)
23:07 < thealphanerd> I have the program I would like to write bindings for
23:07 < thealphanerd> I'm assuming I need to build a proper build script
23:07 < tmpvar> thealphanerd, here's nice simple example: https://github.com/wadey/node-microtime
23:08 < thealphanerd> thank you :D
23:08 < thealphanerd> I see in the original make file that the program is meant to be installed ina bunch of different directories
23:08 < thealphanerd> so I'm just curious how to get it to properly build / be used… but I guess only time and experimenting will tell
23:10 < milani> thealphanerd, do look at binding.gyp 
23:11 < thealphanerd> I'm looking in the .cc file
23:11 < thealphanerd> noticing #include <node.h>
23:11 < bthesorceror> hello
23:12 < milani> thealphanerd, yeah binding.gyp is the build script you were talking about:)
23:13 < bthesorceror> !
23:14 < milani> thealphanerd, also take a look at the docs, http://nodejs.org/api/addons.html
23:14 < thealphanerd> ahhh great
23:14 < thealphanerd> didn't see that
23:14  * thealphanerd doesn't really know c or c++ so his brain hurts
23:14 < thealphanerd> :D
23:24 < thealphanerd> milani: if there are already c++ bindings…. would my best best be to write bindings for them?
23:24 < thealphanerd> rather than the native c code
23:24 < milani> oh you mean c vs c++ ?
23:26 < thealphanerd> hmm
23:27 < thealphanerd> acutally that library doesn't do i2c
23:27 < thealphanerd> just gpio
23:27 < thealphanerd> lame
23:27 < thealphanerd> so then I guess I want to write wrappers for a command line tool
23:27 < thealphanerd> i2c-tools
23:27 < TooTallNate> thealphanerd: you don't have access to the source for i2c-tools?
23:28 < CIA-88> node: isaacs v0.8 * r024f4b1 / (104 files in 8 dirs): npm: Upgrade to 1.1.56 - http://git.io/T1P2Jw
23:29 < mscdex> i think that was the fastest npm upgrade ever
23:29 < mscdex> :-)
23:34 < milani> thealphanerd, hmmm if you don't have i2c-tools library and headers, then you may want to use js to write the wrapper directly.
23:34 < milani> thealphanerd, with spawn and/or exec.
23:45 <@isaacs> mscdex: yeah, i just realized that there was a pull i forgot to merge in
23:45 <@isaacs> sonice to see CIA back in force.
23:47 < rvagg> rioter: broken in FF for me (Aurora), clicking menu items makes the beer image animate but doesn't change the rest of the page
23:51 < thealphanerd> TooTallNate: http://www.lm-sensors.org/wiki/I2CTools
23:51 < thealphanerd> i2c-tools source is available online
23:57 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
--- Log closed Wed Aug 22 00:00:02 2012
