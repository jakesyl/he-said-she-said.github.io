--- Log opened Sun Mar 24 00:00:11 2013
00:14 < s3shs> Anybody here understand domains?  I can't tell if I've found a bug or not.
00:33 < JamesS237> Is there anyone online who has used Nodejitsu's Haibu in production? Because I'm not sure if I should use it to run my servers in a production environment
00:34 < OliverJAsh> substack: i seem to have an issue with browserify when a required module uses ES6 getters and setters
00:35 < OliverJAsh> "Unexpected token )" when the line is just "set head() { /* noop */ },"
00:52 < mdedetrich> does anyone know if there is something similar to activerecord in node.js
00:53 < mdedetrich> specifically for sql
00:54 < kornnflake> i'm using http://www.sequelizejs.com/
00:55 < mdedetrich> its mysql though, I want generic SQL (will be using postgresql, but maybe even another database)
01:51 < MI6> joyent/node: Alexey Kupershtokh v0.10 * 9fae4dc : timer: fix off-by-one ms error  Fix #5103 - http://git.io/LUdZ6g
02:27 < Fodi69> hi, anyone using the supertest module ?
02:43 < ljharb> anyone awake who can help me with a streams 2/node 0.10 thing?
02:44 < ljharb> i'm getting "Cannot read property 'readable' of undefined" when trying to add a data listener to an http.IncomingMessage object, and i don't know why.
02:48 < ljharb> :/
03:04 < shanebo> hey guys regarding loggers, what are the pros and cons of using something like: node app.js > app.log 2> error.log as opposed to winston?
03:05 < tjfontaine> there's nothing necessarily wrong with that, it's just not very flexible
03:06 < tjfontaine> more work to do rotation, not much in the way of tweaking the verbosity of your logs
03:07 < shanebo> tjfontaine, i'm not needing anything fancy, just console logs to file and errors getting logged
03:07 < tjfontaine> you have to use tee for things like multiple sinks
03:07 < shanebo> tjfontaine no comprende. can you elaborate?
03:08 < tjfontaine> shanebo: perhaps one day you want it to go to multiple places, if you're using stdout/stderr you need to utilize something that duplicates that output (tee)
03:08 < shanebo> tjfontaine i've got haproxy running in front of several node apps. will the first option log each app provided they're all booted that way?
03:08 < tjfontaine> which is a nice utility but can hide exit code sometimes
03:09 < tjfontaine> shanebo: I suppose so, also if you restart them automatically you'll probably want to use >> and not > so you don't lose history
03:11 < shanebo> tjfontaine oh thanks for that tip
03:11 < shanebo> (I'm new at having to handle logs)
03:12 < tjfontaine> you should also note that your output will continue writing to that file, and potentially file up your disk space
03:12 < tjfontaine> and then crash
03:12 < tjfontaine> a more flexible logger will let you set high water marks for that
03:13 < shanebo> tjfontaine maybe I should only log errors?
03:13 < tjfontaine> depends on the information you need, which is why it's nice to start with the flexibility of some log library that allows you to do these things
03:14 < shanebo> tjfontaine just trying to avoid bloat when I could write one line in the boot script
03:15 < shanebo> i've got this rare 503 that keeps happening and i'm unsure what's causing it
03:18 < bc> could someone help me with a socket.io question?
03:21 < Sadtaco> https://github.com/niegowski/node-pngjs  I've been trying to find things for decoding PNGs.  This one works well, but it's asynchronous, and that's creating a lot of problems with my code.  Are there any options that are synchronous? 
03:21 < shanebo> tjfontaine thanks for the help. Much appreciated.
03:21 < tjfontaine> anytime
03:21 < bc> nvm, found my answer
03:27 < HexSquid> hi folks :)
03:28 < HexSquid> I'm new to bash and node, and trying to find a way to pass a string from node to be used in a bash script. Is there a means for this? I'm thinking about global variables, or writing to a file, but neither of those feels right to me
03:34 < SomeoneWeird> HexSquid, process.argv
03:36 < Sadtaco> https://github.com/niegowski/node-pngjs  I've been trying to find things for decoding PNGs.  This one works well, but it's asynchronous, and that's creating a lot of problems with my code.  Are there any options that are synchronous?   Using callbacks is going to be extremely difficult.
03:36 < SomeoneWeird> Sadtaco, just use promises or something, then
03:37 < Sadtaco> I don't really see how promises are different from a callback. Doesn't it still run asynchronous?
03:38 < SomeoneWeird> use async then, and just run the async stuff first then run the sync in the callback
03:38 < SomeoneWeird> i don't see the problem
03:38 < AAA_awright> Sadtaco: Why is asynchronous a problem?
03:39 < SomeoneWeird> Sadtaco, http://github.com/caolan/async
03:39 < Sadtaco> The problem is running hundreds of things asynchronously and figuring out when the last one finally finished, I suppose.
03:39 < SomeoneWeird> yeah, easy
03:39 < SomeoneWeird> use async.parallel
03:39 < SomeoneWeird> from that library ^
03:41 < Sadtaco> Server starts, loads a list of images from a database, then it reads the pixels from those images and creates some objects with psuedo classes.  After all that's done, I need to do synchronous stuff.  I've used callbacks in the past but I'm not getting how to know they're ALL finished, especially if a new task is added in the middle of it doing older ones.
03:41 < Sadtaco> New ones could be added while it's running, not just on start up..
03:42 < AAA_awright> pesudo classes?
03:42 < Sadtaco> prototype.
03:42 < Sadtaco> It's not as simple as those examples. :/  Hold on..
03:44 < Sadtaco> I figured out what I needed to do actually.  I need to hold all prototype function calls until after the object is finishing being made.
03:44 < Sadtaco> So I think I have it..
03:48 < AAA_awright> Sadtaco: It may be a better idea to do all of the asynchronous calls in sequence, that is, only have one call running at a time
03:48 < AAA_awright> Per request
03:48 < AAA_awright> But that said, it's rather easy to check when the "last task" finishes
03:48 < Sadtaco> AAA_awright, how can I make sure one doesn't start until another finishes? Though I don't think it's a big deal
03:49 < AAA_awright> Sadtaco: That's the easiest way to do it, if anything... Don't make your next I/O operation until the previous one has finished
03:49 < AAA_awright> It's really that simpe
03:49 < Sadtaco> What I did is put a "completed" flag in my object constructor, with thing that may get called during building being put into an array to be called when it completes.
03:49 < Sadtaco> I'll still have this issue.
03:49 < AAA_awright> What?
03:49 < AAA_awright> Don't you register a callback?
03:49 < Sadtaco> I'm building the object that is asynchronous, and then I have to call something to change them.
03:50 < Sadtaco> I got it anyway
03:50 < AAA_awright> getObject("x", finished0);
03:50 < AAA_awright> function finished0(){ getObject("y", finished1); }
03:50 < AAA_awright> etc
03:50 < AAA_awright> One task finishes, that calls the next task
03:52 < Sadtaco> I think what I'm doing is better.   makeObj.prototype.doSomething = function(){  var fn = function(){ //do stuff }  if( !this.completed ){ this.onComplete.push(fn) } else { fn() }
03:53 < Sadtaco> The difficulty was in ordering the code in a new makeObj("x", callback); when I am using a getter of the object to add stuff to it and don't know if/when I want to add those things. And there is so many, I can't just wrap my socket connect on a single callback
03:54 < AAA_awright> Sadtaco: You'll have to show me your code, but there's only 4-5 ways to do this, depending on how you count, I wouldn't try inventing a new method, it's probably wrong
03:54 < Sadtaco> Yeah.  I was going to say, it's confusing not seeing the code.  If you still want to see it, you can pm me it. I don't want to paste it for 900 people.
03:54 < AAA_awright> Node.js uses only two of them natively
03:54 < AAA_awright> You can paste it for 900 people
03:54 < Sadtaco> -it
03:54 < AAA_awright> They don't care
03:55 < AAA_awright> ... pastebin I mean, please don't flood me in PM kthx
03:55 < Sadtaco> I mean I don't want to share it with everyone.
03:55 < Sadtaco> But if you're curious, I'll show you personally. I already found my answer.
03:57 < Zolmeister_> http://turntable.fm/nodejs
03:57 < AAA_awright> Sadtaco: What's the answer
03:58 < AAA_awright> Zolmeister_: wat
03:58 < Zolmeister_> cmon guys, 909 people and only 1 person in turntable?
03:59 < willc> Americans only
04:00 < willc> No Canadians allowed for the turning of tables...
04:02 < AAA_awright> Sadtaco: First you have "Map = function(name)" which should really be "function Map(name)"
04:02 < Sadtaco> Same thing, unless I run into namespacing issues.
04:02 < Sadtaco> Right?
04:03 < Zolmeister_> alright, moving to plug.dj: http://plug.dj/nodejs/
04:03 < AAA_awright> Withtout "var" you're creating a global (which probably doesn't do what you think it does), and using the "function name()" syntax sets the function's name property
04:04 < Sadtaco> It works perfectly fine. But yeah, I could set it as a var.
04:04 < Sadtaco> Unless I use a plugin and set var Map = require(...); I shouldn't have problems.
04:04 < AAA_awright> "It works perfectly fine" doesn't mean it will continue to work perfectly fine
04:05 < AAA_awright> Also what is "Map.completed"
04:05 < AAA_awright> You're setting a property on a function... for what?
04:05 < Sadtaco> Ah but where I DO have an issue is in Area = Function...  That one needs to be var. Only working now since I make one.
04:05 < AAA_awright> Oh "var Map = this;"
04:06 < AAA_awright> That'll get really confusing
04:06 < Sadtaco> Mhm.  Because the PNG thing changes the scope.
04:06 < AAA_awright> Especially using upper-case to denote instantes of an object, instead of classes of an object
04:06 < Sadtaco> of "this"
04:06 < AAA_awright> use "self"
04:06 < Sadtaco> Yeah.  Lots of people like using self or that.  I like calling it the name.  It makes absolutely no issue.
04:07 < gluxon> I would use Self.
04:07 < AAA_awright> I've never, ever seen anyone call what is usually "self", the name of the function
04:07 < gluxon> *self
04:07 < AAA_awright> That is WAY too confusing
04:07 < AAA_awright> The name of the function is used for recursion
04:07 < AAA_awright> By definition, in the ECMAScript specification
04:08 < gluxon> I had the same idea at first, to use the name of the object class, but the pointer gets lost in context.
04:08 < Sadtaco> That's okay.  I like it this way when I'm making psuedo classes.  It has never made an issue for me.
04:08 < Sadtaco> self gets confusing when you are going into different "this"es.
04:08 < AAA_awright> then use selfMap or something
04:08 < Sadtaco> Is self the top one, middle one, the inner nest you're in now?
04:08 < AAA_awright> But absolutely don't use the name of the function
04:08 < gluxon> the this scope issue is really annoying.
04:08 < Sadtaco> Why, when calling it the name works? :p
04:08 < AAA_awright> It doesn't
04:09 < Sadtaco> It does..
04:09 < AAA_awright> It's defined as the current function
04:09 < Zolmeister_> it doesnt
04:09 < Sadtaco> This code is working perfectly fine.
04:09 < AAA_awright> Not the "this" of the function
04:09 < AAA_awright> Just because code *appears* to work doesn't mean it does
04:09 < AAA_awright> I can make something that *looks* really secure
04:09 < Sadtaco> How does it not?
04:09 < Zolmeister_> well, I'm sure it does work, its just that doing it Sadtaco's way will make you a sad taco
04:10 < Sadtaco> Makes me happy.
04:10 < Sadtaco> Because I've had absolutely no issues with it.
04:10 < AAA_awright> You *can* technically shadow the function name as something else. But why should you, it's *always* defined as the function, that you can recurse with
04:11 < AAA_awright> And then you get confused, "Is this uppercased-variable a function or an instance of the function"
04:11 < AAA_awright> That's what I thought
04:11 < AAA_awright> So don't do that
04:11 < JoshM> What is a good (or really any working) way for me to profile node v0.10 code? 
04:11 < Zolmeister_> (I think we should drop it, sad taco isnt listening)
04:11 < Sadtaco> function Class(foo){ var Class = this; Class.property = {}; } does not call that function name, or whatever you think is going to happen.
04:11 < Sadtaco> It does make recursives impossible, yes.
04:11 < Sadtaco> But I'm not dealing with recursives.
04:12 < ningu> hey, any suggestions for where to link to for an intro to JSON for someone who doesn't know anything about it? just send them to json.org?
04:12 < Sadtaco> And it's simple to just change the variable name if you want to recursive.
04:12 < ningu> Sadtaco: it may *work*. it's still bad practice.
04:12 < AAA_awright> Sadtaco: It's confusing, it's confusing for the poor programmer who has to read your code in the future, and it's confusing for you when you eventually do deal with recursion
04:12 < Sadtaco> No one else is reading my code. It's mine. :D
04:12 < ningu> Sadtaco: there is no benefit, it produces only confusion.
04:12 < AAA_awright> Just because it *appears to work* doesn't mean it *works* and just because it *works* doesn't mean it's *wise*
04:12 < gluxon> Sadtaco: That's a bad mindset to get into.
04:12 < ningu> I still care about good coding habits even for code that only I will read
04:13 < ningu> there are some things I will let slide
04:13 < ningu> but that one just seems... well, like I said, it's all confusion and no benefit
04:13 < Sadtaco> I think. function Class(foo){ var self = this; otherNamespace.somethingThatChangesThis(function(){ var waitnowwhatdoicallthis = this; } } is more confusing.
04:13 < ningu> meanwhile no one cares about where to send a JSON newbie, this is more fun
04:13 < AAA_awright> Sadtaco: Just use selfClass if that's really your thing, that's perfectly fine
04:14 < AAA_awright> But don't call it the name of the function, that's something else entirely
04:14 < ningu> Sadtaco: you shouldn't need more than one "self" variable in a closure. 
04:14 < ningu> at least, I don't recall ever needing that.
04:14 < AAA_awright> Yeah, me neither
04:14 < Sadtaco> Could happen.
04:14 < AAA_awright> Though I can conceive of needing it
04:14 < ningu> yes, it's conceivable. I'd probably choose to write it differently. so yeah, selfFoo vs. selfBar seems fine.
04:14 < AAA_awright> I've used recursion far more than ever needing multiple "self" closures
04:14 < Sadtaco> I could maybe start calling it thisClass or ClassThis.  But eh, I don't care to at the moment. It's not like it's hard for me to change habits, or it's hard to replaceall.
04:15 < gluxon> Sadtaco: That's only going to happen if you're creating a function prototype inside one, that's a bad idea already as well.
04:15 < Sadtaco> i never liked "that" or "self" because it lacks context in big nests.
04:15 < AAA_awright> So then use selfFunctionname
04:15 < HexSquid> Sadtaco - what do you use?
04:15 < Zolmeister_> can you post the code?
04:15 < HexSquid> Sometimes I go with 'ctx'
04:16 < gluxon> AAA_awright: Let's drop it. We've given enough logical reasons. Any more will just be forceful.
04:16 < HexSquid> for context
04:16 < Sadtaco> I call it the function name. (which yes, means you can't use recursives)
04:16 < JamesS237> Is there anyone online who has used Nodejitsu's Haibu in production? Because I'm not sure if I should use it to run my servers in a production environment
04:16 < AAA_awright> And finally, there's the issue of "_.each(Map.onComplete, function(callback){ callback(); });"
04:17 < AAA_awright> First, the only time you're using _ is to call _.each, which appears to just be an alias for array.forEach
04:17 < AAA_awright> So why not use that
04:17 < Sadtaco> Zolmeister_,  http://pastebin.com/cB3Ragyh
04:17 < HexSquid> Hmm. I know I dislike 'that'. I've sometimes used 'self' or '_this' and not felt quite right about ither
04:17 < AAA_awright> Second, why are we iterating over multiple callbacks at all, that's not good practice, callbacks are supposed to be called exactly once
04:17 < Sadtaco> It would be better to use MapThis and AreaThis.    I never thuoght of that.  I just knew I hated that and self.
04:18 < AAA_awright> If the calling function needs to alert multiple other functions that the callback returned, that it's job
04:18 < AAA_awright> But otherwise, registering multiple callbacks makes it possible to create divergent code paths, or prematurely-ending code
04:18 < AAA_awright> If you need to alert multiple things, use events
04:19 < HexSquid> Is there a way to set shell variables in node? Env vars set with node do not appear to be available outside the process, which is presumably by design
04:19 < ningu> HexSquid: that's just how env vars work
04:20 < HexSquid> ningu - so I'm trying to set a value I can access in a bash script - any ideas?
04:20 < AAA_awright> _.each(props, function(propVal, propKey){ Area.properties[propKey] = propVal; });
04:20 < AAA_awright> Sadtaco: This should probably be
04:20 < AAA_awright> for(var key in val){ obj[key] = val; }
04:20 < AAA_awright> In your usage, you don't use it to copy objects, but if you were copying an object, you should probably use:
04:20 < AAA_awright> Object.create(obj);
04:20 < AAA_awright> which has certain semantics associated with it
04:20 < ningu> if you spawn the bash script from node it will probably work
04:21 < Zolmeister_> Sadtaco: why have the Area class defined within the Map class?
04:21 < JamesS237> Should I use Haibu or another alternative
04:21 < Sadtaco> I have a good reason.
04:21 < HexSquid> OK will look into it
04:21 < HexSquid> Sounds reasonable
04:21 < Sadtaco> Originally I was going to do it outside of it.
04:21 < AAA_awright> "var username = new Date().getTime().toString(16);"
04:21 < AAA_awright> Note that Socket.io already assigns unique ids to each connection
04:21 < AAA_awright> So why you're creating one from a highly predictable source I'm not sure
04:22 < AAA_awright> Sadtaco: Do what outside of what?
04:22 < Zolmeister_> hes nesting two classes: http://pastebin.com/cB3Ragyh
04:22 < Sadtaco> Define Area outside of Map.
04:23 < AAA_awright> I don't see how that affects anything, there's no reason to use _.each
04:23 < Sadtaco> Why is there no reason to use _.each?
04:23 < AAA_awright> for loops work perfectly fine, and are more readable
04:23 < Sadtaco> Besides saying I should for loop
04:23 < Sadtaco> ...
04:23 < AAA_awright> Or the every, forEach, or some methods of Array
04:24 < AAA_awright> If you need a new variable scope
04:24 < Zolmeister_> is the javascript map function is multithreaded?
04:24 < ningu> Zolmeister_: ?? no
04:24 < AAA_awright> Zolmeister_: yeah ??
04:25 < AAA_awright> I mean, I agree, ??
04:25 < Zolmeister_> what...
04:25 < Zolmeister_> so no
04:25 < AAA_awright> What do you mean multithreaded
04:25 < Zolmeister_> does it map in parrallel?
04:25 < AAA_awright> The behavior is well-defined, the callback executes inline
04:25 < AAA_awright> And in order
04:25 < ningu> Zolmeister_: node code is not multithreaded
04:25 < AAA_awright> Well yeah, it can be multithreaded
04:25 < AAA_awright> ECMAScript code isn't
04:26 < ningu> AAA_awright: node had a thread pool, I just mean the js code executes in one thread
04:26 < AAA_awright> That's not necessarially true
04:26 < AAA_awright> But as far as default behavior, no
04:26 < ningu> it is according to all the documentation I've read
04:27 < ningu> maybe someone has created a thread layer for node
04:27 < AAA_awright> Yeah that's what I mean
04:27 < AAA_awright> It's not impossible
04:27 < ningu> anyway, parallel does not necessarily mean threaded, and generally that's not what people mean in node
04:27 < ningu> async.parallel is not threaded, for example
04:28 < Zolmeister_> interesting, so why not make it threaded?
04:29 < ningu> Zolmeister_: http://www.youtube.com/watch?v=L0pjVcIsU6A
04:30 < Zolmeister_> is that to point out that node.js is single threaded, or does it actually explain why it would be bad to thread it (using workers or something like that)?
04:31 < AAA_awright> It has nothing to do with Node.js
04:31 < AAA_awright> Array.prototype.map is an ECMAScript function, it's just a for loop over an Array
04:31 < AAA_awright> That's why it can't be "threaded"
04:32 < Zolmeister_> sure, you wouldnt overwrite the default, but why not have another function that is multithreaded?
04:34 < AAA_awright> Why would that make any sense?
04:35 < Zolmeister_> to get better performance?
04:35 < substack> latest experiment: https://github.com/substack/ploy
04:36 < AAA_awright> substack: Not to be snarky, but I just read the whole README and I still have no clue what it does
04:37 < Zolmeister_> it autoreloads the server on git commit
04:37 < Zolmeister_> (i think)
04:37 < substack> Zolmeister_: no
04:37 < substack> you `git push` at it
04:37 < substack> and it runs your code
04:38 < substack> and if you push to a branch it hosts that server at a subdomain
04:38 < AAA_awright> Oh
04:38 < AAA_awright> Then just say that
04:38 < juanpabloaj> hi 
04:39 < substack> AAA_awright: I thought I did!
04:39 < Zolmeister_> substack: its pretty confusing at a glance
04:39 < AAA_awright> Well it sort of makes sense now but it's like a sentence fragment or something
04:39 < AAA_awright> I mean, what is "this"
04:39 < AAA_awright> And it's both an application and a library...?
04:40 < juanpabloaj> I try : exports.fun = function () { return true;} 
04:40 < substack> AAA_awright: what about "git push at this http router and it will host your servers on subdomains"
04:40 < juanpabloaj> but everytime return undefined, why ? 
04:40 < substack> s/servers/branches/
04:40 < AAA_awright> >> var exports = exports || {}; exports.fun = function () { return true;}; exports.fun();
04:40 < purr> AAA_awright: (boolean) true
04:40 < AAA_awright> juanpabloaj: Works fine for me
04:49 < juanpabloaj> AAA_awright: ok, thanks, my problem is with a subfunction 
05:14 < OTBS4Life> Anyone else having problems with Socket.bytesWritten?  https://github.com/joyent/node/issues/5128
05:53 < sshaginyan> Guys what's the best way of validating json?
05:54 < OTBS4Life> sshaginyan, That depends on your needs.
05:54 < arduix> https://github.com/chriso/node-validator ?
05:54 < sshaginyan> ?
05:55 < OTBS4Life> sshaginyan, You could try to parse it and see if it works.  That's easy.
05:55 < sshaginyan> Should I use JSON.parse try/catch or a library?
05:55 < OTBS4Life> sshaginyan, Again, depends on your needs.  Do you only want to know if it works or not?
05:55 < sshaginyan> What's faster?
05:55 < OTBS4Life> sshaginyan, Is this data coming from users?
05:55 < sshaginyan> OTBS4Life: From another server I don't trust
05:56 < OTBS4Life> sshaginyan, Do you need to know where the error is?
05:56 < sshaginyan> nope
05:56 < OTBS4Life> Just JSON.parse then.  I'd put size limit on it though.
05:56 < OTBS4Life> Don't let someone feed you 100GB of JSON and bring your box down.
05:56 < sshaginyan> OTBS4Life: How would I put that limit?
05:57 < OTBS4Life> How should I know?  I have no idea how you are getting the data from this server.
05:57 < sshaginyan> htt.get
05:57 < sshaginyan> http.get
05:57 < OTBS4Life> As the data comes in, close the connection if you get more than you want to deal with.
05:57 < OTBS4Life> And then, leave yourself a nice big log entry so you can figure out what broke.
05:58 < OTBS4Life> You probably don't even have to worry about this, depending on your circumstances.
05:58 < OTBS4Life> I'm just saying that no matter what you do, protect yourself.
06:08 < sshaginyan> Is there an alias in express for request.connection.destroy();
06:13 < ningu> sshaginyan: you can make one
06:13 < ningu> express.request.destroy = function() { this.connection.destroy() };
06:14 < sshaginyan> ningu: Is it expensive to zip something per request?
06:15 < sshaginyan> max will be 20 characters
06:15 < OTBS4Life> Why zip 20 characters?  You won't save anything.
06:15 < sshaginyan> OTBS4Life: Sorry not zip represent them in a different way
06:15 < sshaginyan> hash is the word I guess
06:16 < OTBS4Life> You should benchmark what you are asking, and find out.
06:16 < OTBS4Life> It depends on your specific situation and code.
06:18 < sshaginyan> OTBS4Life: I don't want to represent a long path (20 chars) as a property within an object. Is it worth hashing it?
06:18 < sshaginyan> Is it expensive?
06:18 < OTBS4Life> Test it and see.
06:23 < ningu> sshaginyan: not really sure what you are talking about, but yeah, only thing to do is test it. it doesn't sound to me like it will be expensive.
06:26 < sshaginyan> ningu: Is it preferable to use memory over cpu when a problem can be solved many ways?
06:27 < ningu> sshaginyan: what are your goals?
06:28 < rihnapstor> hello guys.
06:29 < OTBS4Life> hi
06:30 < rihnapstor> i want to built a Saas cloud platform using nodejs,which i will use for tracking real time signals of people on the map.can i do it ? is it possible?
06:30 < rihnapstor> OTBS4Life: do you have any goood ideas on cloud or anything where the project will last for 8 months + -
06:31 < substack> rihnapstor: what precisely do you mean by "saas cloud platform"?
06:31 < OTBS4Life> rihnapstor, You have just described, and asked, the most vague question I have heard all day.  :-)  So the vague answer to your question is, yes.
06:31 < sshaginyan> ningu: I''m building an api server where a service call corresponds to a file name. For example $.get('api/catalog/product/v3') will corresponds to a file api.catalog.product.v3.js. I'm loading all my services in memory. Now there are two ways of doing this either I create an object tree structure = {api: { catalog: { product: {v3:{stuff}}} }} or I can do a hash and not create so many objects. But by having a hash (EX. 
06:31 < sshaginyan> md5(api.catalog.product.v3) = 'fweff23f23f') I have to hash the requested services url every time a service is accessed. Which path should I take?
06:32 < OTBS4Life> substack, It probably means that he is a sales guy and not a coder.  :-)
06:33 < sshaginyan> hash means cpu time means sync code which means blocking. Even if it's async therefore non blocking it's going to take time. VS having a larger object.
06:33 < rihnapstor> substack: Saas is Software as a service where software will run on cloud,just like gmail or something else.
06:34 < rihnapstor> OTBS4Life: can you suggest me any other good ideas ?
06:34 < OTBS4Life> rihnapstor, What exactly do you want to do?  What are your needs?  What parts of this project have you started?
06:35 < OTBS4Life> You've effectively just asked everythying from, "how do I buy web hosting" to "how can I use the Google Maps API" to "how can I interface my Node.js application with a database"
06:35 < OTBS4Life> What answer were you looking for?
06:35 < sshaginyan> 42
06:36 < substack> rihnapstor: I know what saas means. The problem is that "saas cloud platform" is really vague.
06:37 < rihnapstor> OTBS4Life:  i obsessed with nodejs, and want to built something using it. i previously mentioned that you can suggest more ideas .
06:37 < rihnapstor> i *am
06:37 < OTBS4Life> I have no idea what to suggest to you, because I have no idea what you are trying to do.
06:38 < OTBS4Life> You said you want to put something on maps.  Great.  But what does that have to do with how you handle things server-side?  It depends on what yoiu are doing with that data.
06:38 < OTBS4Life> Do you want to manipulate live data coming in?  Store it and aggregate it somewhere?
06:38 < OTBS4Life> What kinds of clients will be connecting?
06:38 < OTBS4Life> Node.js is just a tool.  It doesn't give you any more possibilities than you had before, but it certainly does make things easier to do.
06:39 < rihnapstor> OTBS4Life: to be specific i am thinking  of building real time police(cop) patrolling system. 
06:40 < OTBS4Life> Ok, so you have a rough idea of what you want to do.  Now, what would this system do?  Who would use it?
06:40 < OTBS4Life> How would they access it?
06:43 < rihnapstor> i am an undergraduate student and want to include this project in my final year. so i will make mistakes.
06:45 < OTBS4Life> .. there's nothing wrong with mistakes.  All I'm saying is that you should conceive and idea, and then figure out how to do it.
06:45 < OTBS4Life> Or, just dive in and experiment.  That's good too, but try to stick to one chunk at a time.
06:45 < OTBS4Life> At least until you understand that chunk, and then combine it with other things you've learned.
06:46 < rihnapstor> OTBS4Life: they would accesss it using andriod interface .the end users will have  UI designed  to send signal and  then the server will trace the signla on the map.
06:47 < sshaginyan> If a certain problem can be solved by utilizing cpu or memory is it more preferable to go with memory since js is not suppose to do heavy computation. So should I avoid cpu time as much as possible?
06:48 < sshaginyan> Is it always preferable to go with memory over cpu?
06:49  * rihnapstor will be back
06:51 < sshaginyan> Sigh, your silence says it all.
06:51 < ningu> sshaginyan: I don't think hashing will take any cpu time to speak of
06:52 < ningu> I would try it out as we suggested but I seriously doubt it will have any noticeable impact
06:52 < sshaginyan> ningu: This is for Macys mobile. A lot of people will be using this.
06:52 < sshaginyan> ningu: So let me experiment. Would you recommend using the node core libraries?
06:52 < sshaginyan> zlib?
06:53 < sshaginyan> sorry crypto hash
06:53 < ningu> why would you use zlib? actually I don't see why you even need a hash really
06:54 < ningu> just do foo-bar-baz as the key, separate with a character that can't occur in any of the parts
06:55 < ningu> as for memory vs. cpu I don't see how you can answer that without trying it. but I'd say going with a flatter structure makes sense if you are concerned about performance, unless you have some reason you need the nested structure
06:55 < ningu> but you made it sound like both will do what you want
06:56 < sshaginyan> ningu: Yes, so I'll go with flatter structure and no hash
06:56 < ningu> nested structure would make sense if you frequently need to pull out sub-objects at various levels
06:56 < ningu> if it's only the innermost part you need to pull out there's no need
07:40 < rihnapstor> hello
07:46 < rihnapstor> hello
07:47 < rihnapstor> hello a_suenami 
07:59 < SrPx> Hey, is there any way I synchronize data from node.js server to my clients?
08:00 < aMoniker> SrPx: AJAX or Websockets?
08:00 < SrPx> aMoniker: I mean, something automatized? That whenever I change some data it automatically feeds the changes to my clients, updating his models?
08:01 < aMoniker> SrPx: Maybe someone's written something.. it depends on what modules you're using
08:02 < SrPx> aMoniker: hm ill search
08:03 < SrPx> aMoniker: im not using any module on the client though
08:04 < aMoniker> how do you expect it to automatically work with your page then?
08:05 < substack> SrPx: check out https://github.com/dominictarr/scuttlebutt
08:06 < substack> SrPx: and https://github.com/substack/stream-handbook#scuttlebutt
08:12 < SrPx> substack: checking, thanks
08:14 < SrPx> substack: o.O
08:16 < substack> SrPx: it's really crazy because you can just .get() and .set() and it survives network partitions in an eventually consistent, distributed way
08:27 < SrPx> substack: really? To be honest I have read it all trying to figure out WHAT it does 
08:27 < substack> SrPx: just look at the model example from the second link
08:27 < ningu> SrPx: when docs fail read the source
08:28 < substack> you just hook the streams together and call .get() and .set()
08:36 < SrPx> substack: that's really awesome, I appreciate very much for that link! 
08:36 < SrPx> substack: but no user has authority over the data, so anyone can modify whatever he wants
08:36 < SrPx> not what I want for this case
08:36 < substack> yep
08:36 < SrPx> but no doubts ill be using that
08:36 < SrPx> :D
08:37 < substack> I think juliangruber had some experiments for controlling updates more granularly
09:00 < eddyb> is there a way to run a command linked in node_modules/.bin by traceur, by calling npm?
09:00 < eddyb> right now it seems like I have to use npm bin to get the path, then add the linked name to that path
09:00 < eddyb> and it's not pretty
09:04 < deimos> I'm at a bit of a less here, I have 2 servers, both have node, npm installed, did npm install -g less on both, i have a script with require('less') in it, and on one machine it works, but on the other it says it cannot find the less module… i checked /usr/local/lib/node_modules/less to make sure it was isntalled for both, there's no node_modules in the local dir or in the home dir for the user, what could I be missing ?
09:05 < eddyb> deimos: what user did you run npm install -g less as?
09:06 < deimos> @eddyb root on both, in fact i used pssh to do this across 4 servers so it was consistent 
09:07 < deimos> they're all the same os and everything, cloud instances all created within minutes of one another
09:07 < deimos> ubuntu 12.04 lts
09:07 < eddyb> deimos: su and then npm install -g or normal user and sudo?
09:07 < deimos> su and then npm install 
09:07 < eddyb> hmm, I've never done that
09:08 < deimos> well, was logged in as root at the time, ldap wasn't up at the time
09:08 < eddyb> deimos: is there anything in /root related to npm and/or node_modules?
09:08 < deimos> its so weird that it works on one but none of the others
09:09 < deimos> @eddyb there was not at first, I tried running the install to dump it in the root home dir too, but they didn't help so I removed ~/.npm and ~/node_modules 
09:09 < eddyb> ~ being /root or /home/user?
09:09 < deimos> yes sorry, ~ being /root
09:10 < eddyb> I wouldn't recommend having anything touch root, /usr is better for this
09:10 < deimos> I agree, it was a last ditch effort lol
09:10 < deimos> the module is installed in /usr/local/lib/node_modules on both machines
09:10 < eddyb> let me check what happens
09:10 < deimos> is there somewhere else it tries to load required modules from I might be missing?
09:10 < eddyb> less@1.3.3 /usr/lib/node_modules/less
09:10 < eddyb> with sudo
09:11 < eddyb> *NOT* /usr/local
09:11 < eddyb> which is a bad place and I try to avoid it anyway
09:12 < deimos>  /usr/local was where it installed for me on ubuntu 12.04 lts, /usr/lib/node_modules doesn't exist on either
09:13 < faceleg> how would I check whether a given program is installed with node?
09:13 < eddyb> faceleg: what kind of a program?
09:13 < faceleg> i.e. I want to know if "python" is available
09:14 < eddyb> faceleg: running which python
09:14 < eddyb> faceleg: that will return a non-zero error code if it's not available. if it is, it will also print the full path
09:15 < deimos> might want to use type or hash instead of which, which has some oddities 
09:15 < deimos> @faceleg here's some options http://stackoverflow.com/questions/592620/check-if-a-program-exists-from-a-bash-script
09:15 < faceleg> eddyb: thanks
09:16 < deimos> should be the same schtick with node vs bash
09:16 < faceleg> deimos: yes I've used one of those in bash before
09:16 < faceleg> was just wondering about the "node" way 
09:16 < eddyb> faceleg: there is no node way
09:16 < eddyb> and seriously
09:16 < eddyb> why the heck do you even want python installed?
09:17 < eddyb> I mean, I know that the module build system requires python, but that's a temporary solution
09:17 < deimos> this less module thing is very annoying. 
09:17 < eddyb> for anything else, you have node.js already
09:17 < eddyb> deimos: on the machine that doesn't work
09:17 < eddyb> deimos: start node with no arguments, type require('less'); it should fail. now, try require.path
09:18 < faceleg> deimos: eddyb thanks, *I* don't want pyton installed
09:18 < faceleg> but it's req. for building the library the module I work on 
09:18 < faceleg> so I want to be able to test for python, if that's not there then python2, else fail
09:18 < faceleg> don't worry I'm not making some node / python monster :P
09:18 < eddyb> faceleg: wait, what do you mean?
09:18 < deimos> hmm, undefined for require.path, on both machines though
09:19 < eddyb> deimos: nevermind that, you can't get the paths now :(
09:19 < faceleg> "make"ing the lib req. python
09:19 < deimos> phooey. 
09:19 < deimos> is there a env var that sets the path or something?
09:19 < eddyb> deimos: no, but you can add paths with NODE_PATH, I think
09:20 < deimos> it's killing me that I can't find a difference between these instances, you'd think even using pssh every install cmd would have been the same
09:21 < eddyb> faceleg: are you using node-gyp to build your module?
09:21 < eddyb> faceleg: then python already exists
09:21 < faceleg> eddyb: my module uses nodegyp yes
09:22 < faceleg> the C lib that my module wraps does not
09:22 < faceleg> on some machines, not using --python python2 causes build to fial
09:22 < eddyb> faceleg: node-gyp is python
09:23 < faceleg> eddyb: I'm telling you that on some machines users have reported that their installation fails wihtout --python python2
09:23 < eddyb> faceleg: then add that flag
09:23 < deimos> even after running npm install -f less and it shows less@1.3.3 /usr/local/lib/node_modules/less  it just won't require it… hrm
09:23 < deimos> err
09:23 < deimos> -g
09:23 < purr> deimos: No search results found.
09:23 < faceleg> eddyb: yes obviously
09:23 < faceleg> but then on some other machines, it fails as python2 doesn't exist
09:23 < faceleg> hence my quesstion about sniffing for python/python2 and adding the correct flag depending on which
09:24 < eddyb> ah, lol
09:24 < eddyb> you wanted to know the right executable name
09:24 < faceleg> yeah
09:24 < faceleg> it's not a standard module
09:24 < faceleg> it's pretty messy as the C lib is built with make, the node module itself with n-dyp
09:24 < faceleg> gyp*
09:24 < faceleg> yadda yadda
09:24 < eddyb> pffft
09:24 < faceleg> so yeah I just need to know the right exe
09:25 < eddyb> "which" is unix-specific
09:25 < eddyb> and your problem is meh
09:25 < eddyb> faceleg: out of curiousity, what library is that?
09:25 < faceleg> libgit2
09:25 < faceleg> not sure what you mean with 'your problem is meh"
09:33 < deimos> @eddyb well I'll be a monkey's uncle… so I figured out the issue… dpkg -l | grep node-less … the machine that -works- installed the node-less module somehow using apt-get, while the other 3 have the module installed using only npm, and there's some symlinking that is missing that the package does… 
09:33 < deimos> that was really annoying. 
09:34 < deimos> @eddyb thanks for your help
09:35 < eddyb> faceleg: https://github.com/libgit2/node-gitteh this?
09:35 < eddyb> deimos: np, I was thinking of system packages, but I thought you used the same install commands
09:35 < eddyb> deimos: that's why I hate the apt* tools, they're prone to do shitty things
09:35 < eddyb> and they're a bit chunky to use
09:36 < eddyb> zypper <3
09:36 < faceleg> eddyb: no the nodegit one
09:36 < deimos> I did, I have 2 other ops that I work with, I'm wondering if one of them didn't run the apt-get on the first machine sometime earlier, and I've just been banging my head for no reason
09:36 < eddyb> faceleg: ?
09:37 < deimos> and yes, I agree about those packages, i'm very sad we don't have puppet manifests for these instances yet :(
09:37 < eddyb> http://libgit2.github.com/ this looks awesome
09:39 < deimos> that does look pretty slick
09:39 < eddyb> https://github.com/libgit2/node-gitteh/blob/master/examples/load_commit_tree.js
09:39 < eddyb> this looks lovely :D
09:39 < eddyb> maybe now I can make my magic script that rewrites an entire project's history
09:40 < eddyb> I still need a working automatic code refactoring tool to make that perfect
09:41 < faceleg> that one has a lot of issues
09:41 < faceleg> also I dislike the name
10:08 < longshaft> what IDE yall prefer for node dev?
10:09 < faceleg> st2
10:09 < TheAceOfHearts1> I just use Sublime Text 2
10:22 < iksik_> morning 
10:23 < iksik_> which engine has better node support, lucene? or solr?
10:24 < iksik_> i've found few modules on github, but it seems that first one (node-solr) isnt' maintained anymore, and my google-fu sucks today, can't find any alternatives
10:33 < peterschmidler_> Is passport THE WAY of doing authentication in node?
10:41 < faceleg> It's THE WAY I do it
10:41 < tuhoojabotti> Same here
10:41 < SomeoneWeird> peterschmidler_, yeah
10:42 < peterschmidler_> Thx! Any good resources to start with? Except http://passportjs.org, of course ;)
10:44 < faceleg> I think that's all I used to start
10:45 < tuhoojabotti> It's easy
10:46 < peterschmidler_> OK
11:20 < geNAZt> does someone work with passport ?
11:20 < geNAZt> how can i use the req object inside the deserialize function ?
12:30 < MI6> joyent/node: Ben Noordhuis v0.10 * 50b6549 : doc: update CONTRIBUTING.md  * Latest stable is v0.10 now. * Add example  - http://git.io/G4JdrQ
12:30 < Acrack> hello
12:33 < MI6> joyent/node: Ben Noordhuis v0.10 * 329b538 : doc: update CONTRIBUTING.md  * Latest stable is v0.10 now. * Add example  - http://git.io/knxYPA
13:11 < gudmundur> I've built a module that uses a database, and I'm wondering how it's best to deal with reuse of client connections, is there some nice pattern of how to pass in connections (or settings) to a module?
13:12 < AAA_awright> gudmundur: Modules define functions for you to use, so that doesn't really make any sense
13:12 < AAA_awright> The question is how do you pass /those/ functions settings, which is trivial
13:13 < gudmundur> AAA_awright: sure, I'm wondering about how and if I can avoid passing those settings in all the time
13:13 < AAA_awright> Just pass what the function requires
13:13 < AAA_awright> Nothing more
13:14 < AAA_awright> If it operates on a database connection, pass the connection object
13:15 < gudmundur> AAA_awright: fair enough, thanks :)
13:15 < AAA_awright> Or if you're passing all the functions all the same instances of a variable, you probably intend to make a class/function
13:22 < daslicht> http://nodejs.org/api/stream.html#stream_stream  Stability: 2 - Unstable ?
13:22 < daslicht> what does that mean?
13:22 < daslicht> does it m,ean we cant use it reliably ?
13:23 < gudmundur> AAA_awright: thinking a function that takes in the connection and returns all the functions that use the connection?
13:23 < gudmundur> daslicht: api might change in the upcoming versions
13:23 < AAA_awright> Uh
13:23 < daslicht> ahh
13:24 < daslicht> I like to learn more about audio streaming and have found this example here :
13:24 < daslicht> https://github.com/ncb000gt/node-shoutcast
13:24 < daslicht> I have studied teh code but its still a litte bit to much to get staretd with 
13:24 < daslicht> anyone please like to help me or guide me how to get into such topic ?
13:25 < daslicht> I alkso read the streaming api (teh link pasted above) but its still less clear
13:25 < ExxKA> Hey Guys. I cant figure out what the best way is for setting a minimum length requirement on an Array in mongoose? Sorry for posting here, I have not had any luck on the mongoose channel.
13:27 < gudmundur> daslicht: the streaming api got a bit more complicated in 0.10, check out the docs for 0.8, they are a bit more clear in my opinion and easier to get into
13:27 < daslicht> ok i will have a look in it
13:28 < daslicht> umm wehrer do i fiond previous docs?
13:31 < takahiro_> daslicht: for example here: http://nodejs.org/docs/v0.8.19/
13:32 < daslicht> tahnk yiu !
13:32 < daslicht> thank you 
13:32 < takahiro_> FYI: my first npm module, to make stream with function(without file or net...)  https://npmjs.org/package/generator-stream  :)
13:32 < takahiro_> daslicht: np :)
13:33 < triptec> is there any node module that would allow a client like chrome browser to communicate directly?
13:33 < daslicht> http://nodejs.org/docs/v0.8.19/ just points to its homepage ?
13:33 < daslicht> but how to get to teh docs ?
13:33 < daslicht> ahh]
13:33 < daslicht> http://nodejs.org/docs/v0.8.19/api/
13:33 < daslicht> :)
13:34 < triptec> =)
13:34 < daslicht> I love to answer my own questions 
13:34 < triptec> you can just download that branch from github if the docs are down
13:35 < daslicht> ok cool
13:38 < daslicht> do you have any other suggestions, examples etc to get into audio streaming ?
13:38 < daslicht> I like to create a radio server using nodejs
13:39 < triptec> daslicht: I'm not sure if node would be the best solution
13:39 < daslicht> what do you think is better ?
13:39 < belfare> I ONLY HAVE 17.4mil MINUTES TO LIVE?!?!?!
13:39 < belfare> I better get on it
13:39 < daslicht> :)
13:40 < belfare> but with modern advanced in technology… i shall be able to live hundreds of minutes more
13:40 < triptec> well I'm not the guy to ask about those things but from what I've read/seen it seems node is better at handeling small short connections
13:40 < daslicht> ok i see
13:40 < triptec> not persistent streams, but maybe you could do something with websockets, I'm not sure
13:40 < belfare> is there a PCONN plugin to nodejs?
13:41 < triptec> daslicht: what kind of streaming are we talking?
13:42 < daslicht> just audio from server to html5 client
13:42 < triptec> communication or just streaming of files?
13:42 < daslicht> mp3 or ogg
13:42 < daslicht> music 
13:42 < triptec> daslicht: I think nginx
13:42 < daslicht> essentially a never ending download :)
13:42 < belfare> websockets looks interesting
13:42 < triptec> I made a streaming server in php a few years ago
13:42 < belfare> http://blog.new-bamboo.co.uk/2009/12/7/real-time-online-activity-monitor-example-with-node-js-and-websocket
13:43 < daslicht> pseudostreaming with nginx ?
13:43 < triptec> but I don't think it would have handles many connections very well
13:43 < daslicht> the thing is I also need metadata 
13:43 < daslicht> arg 
13:43 < belfare> daslicht, you need to send the metadata in a separate channel
13:43 < triptec> yeah, both node and php would have libs for the meta
13:44 < daslicht> yeh but i need to find out at which time the radio currentlty ist 
13:44 < daslicht> is playing
13:44 < belfare> daslicht, why not handle that in a side channel?
13:44 < triptec> daslicht: you want radio or a playlist?
13:44 < daslicht> Ok lets go more into depth :)
13:45 < daslicht> I like to essentially stream one BIG audio file which is a >9h DJ mix
13:45 < belfare> the side channel will control the current program per connection, plust all the metadata and such
13:45 < daslicht> but i also like to provide individual song info
13:45 < daslicht> my current approach is to use icecast, and foobar2000 as source clinet which plays a cue sheet
13:45 < belfare> soooo, side channel control?
13:46 < daslicht> nodejs is parsing the stream continiously and fires an event on change
13:46 < daslicht> when that change happens I push metadata to the clinet using socketio
13:46 < daslicht> this works , but ist not solid
13:47 < triptec> daslicht: sounds good I'd say
13:47 < belfare> meh
13:47 < daslicht> thats teh parser: https://github.com/TooTallNate/node-icecast
13:47 < belfare> but what if you want to extend that functionality
13:47 < daslicht> extend with what ?
13:48 < daslicht> this approch is not 100% stable , sometimes the parser stops working whyever 
13:48 < belfare> I guess you could send the info in headers
13:48 < daslicht> but how would you get it on teh cleint side?
13:48 < daslicht> the target player is a web player
13:48 < daslicht> its jPlayer :)
13:48 < belfare> i don't know much about jPlayer, let me read the spec
13:48 < daslicht> a html5 player cant handle metadata :/
13:49 < daslicht> thats why i push them via socketiop
13:49 < triptec> daslicht: yeah I know
13:49 < daslicht> thats why i push them via socketio
13:49 < daslicht> I also tried to find another source client than foobar2000 but the icecast community is quite .... cold
13:49 < daslicht> heh
13:49 < triptec> but is the only problem the parser u say?
13:49 < daslicht> yeh both 
13:50 < triptec> what did you use foobar for?
13:50 < daslicht> thats why i thought about creating my own server which i can extend and modify as i like :)
13:50 < daslicht> foobar2000 in conjunction with the edcast dsp plugin is used as source clinet for icecast
13:51 < daslicht> probably its possible to built a source clinet for icecast in nodejs ?!
13:51 < daslicht> but i havent found any infos on that 
13:52 < pats_Toms> ExxKA, do you check that? http://mongoosejs.com/docs/validation.html
13:52 < daslicht> in that case I could just emmit the metadata directrly from the source clinet and I would not need to parse anything 
13:52 < belfare> daslicht, it says gzip causes issues
13:52 < daslicht> ?
13:52 < belfare> it says, don't gzip any of the jPlayer files or media files (that's a bit obvious though)… not sure if you're doing that
13:53 < belfare> are Byte-Range requests enabled as well?
13:54 < triptec> is it possible to stream audio over socketio?
13:55 < daslicht> would interesting to know
13:55 < daslicht> i dont know
13:55 < ExxKA> pats_Toms, yes I did.. I am writing a custom validator now, and hoping that it works :)
13:56 < triptec> daslicht: this post seems interesting to you http://stackoverflow.com/questions/8759842/how-to-stream-mp3-data-via-websockets-with-node-js-and-socket-io
13:57 < triptec> in the end it recommends websocket.io for it's ability to stream binary data
13:57 < daslicht> http://spiritual-healing-records.net:3001/
13:57 < daslicht> thats my current thinng in action 
13:57 < daslicht> :)
13:58 < triptec> you'd have to make your own client though but that might not be the hardest thing
13:58 < daslicht> the client is not the issue :)
13:59 < belfare> daslicht, the the media service you're using support the byte-range requests properly?
13:59 < daslicht> media service ?
13:59 < daslicht> jplayer is working properly
13:59 < triptec> yeah but jplayer cant play audiostreams over websocets
14:00 < daslicht> hm
14:00 < daslicht> ahh i see
14:00 < daslicht> I could simply create my own player
14:00 < daslicht> not to hard 
14:00 < belfare> the Byte-Range is issued to the server for specific parts of the file… jPlayer requires it
14:00 < triptec> and you would have to use a browser that supports web audio api I think
14:01 < daslicht> hm
14:01 < belfare> i can't obviously find Byte-Range supports in icecast
14:02 < belfare> but i could be missing something
14:02 < daslicht> http://spiritual-healing-records.net:3001/
14:02 < slicky> can't you just set up a virtual audio link that will automatically create the audio stream for the html5 audio player? that way the stream simply looks like a file that doesn't have a specific size (cause it'll stream as long as you want it to0
14:02 < daslicht> listen :)
14:02 < daslicht> it woks
14:02 < slicky> So, example.com/audio.ogg gets dynamically piped to the client?
14:02 < belfare> it will work on the initial file request as long as the stream isn't interrupted
14:02 < daslicht> yeah something like this sounds great
14:03 < belfare> the issue is.. if you seek or it pauses or hits a gap or something… it will issue a byte-range to start again… if you don't support byte-range it won't be able to serve the file properly
14:03 < cloudbender> Is there a server lag or is it my connection ?
14:03 < daslicht> i dont need seek or pause
14:03 < belfare> what if there is a network gap?
14:03 < daslicht> good question 
14:04 < daslicht> it will just break 
14:04 < daslicht> and you have to reconnect ?
14:04 < belfare> I wonder if you have to tell it to do that
14:05 < belfare> you're doing the livestream right?
14:05 < daslicht> can you return just one part of a mp3 or ogg file for playback ?
14:05 < belfare> so the stream is constant?
14:05 < daslicht> or do you need teh beginning?
14:05 < daslicht> nope no live streams 
14:05 < daslicht> its just playing one big audio file
14:05 < belfare> yeah… you need to support byte-range then
14:06 < belfare> if there is a gap, issue, or what not… you'll have to be able to start mid-file
14:06 < belfare> if you byte-range doesn't work… the file would restart each time
14:06 < belfare> and you'd have to fetch the whole file
14:06 < daslicht> ok I would like to have it acting like a radio 
14:07 < daslicht> so probably let just a timer running on the server which represents the current playback time
14:07 < daslicht> and if you connect just strat from that time
14:07 < MI6> joyent/node: Ben Noordhuis v0.10 * 8632af3 : tools: update gyp to r1601  Among other things, this should make it easie - http://git.io/-Ee7UQ
14:07 < belfare> do you want to allow skip?
14:07 < daslicht> that should solve the reconnection
14:07 < daslicht> nope no skipping
14:07 < belfare> then yeah… do the stream and it should solve it
14:08 < daslicht> to the listener it should just look like a real radio
14:08 < belfare> http://www.jplayer.org/latest/demo-08/
14:08 < cloudbender> Is everyone happy with 10.0 ?
14:08 < daslicht> nice one
14:09 < daslicht> belfare: any suggestions how to get started with those range requests ?
14:09 < daslicht> http://stackoverflow.com/questions/8696523/nodejs-http-range-support-partial-file-download
14:09 < daslicht> ?
14:09 < belfare> hold on i'll get you the rfc; and i'm not sure that icecast doesn't support it, I just couldn't find it
14:09 < belfare> yep that's it
14:10 < daslicht> do i need to use icecast at all?
14:10 < daslicht> coulnt i just return the range of a audio file using node?
14:10 < belfare> yep
14:10 < belfare> when the range is sent to node, you just need to start serving the file from that byte forward
14:11 < daslicht> that sounds awesome
14:11 < belfare> most media players issue byte-range requests… meaning i'm going to serve you only the chunks of data you need
14:11 < belfare> that's how netflix, hulu, anything really works
14:11 < daslicht> pretty nice
14:12 < belfare> otherwise, we'd be serving way too much data the client and if you skips to 2:34h in a movie it would take FOREVER
14:12 < daslicht> yeah
14:12 < belfare> so we split it up in 2MB chunks with byterange...
14:12 < belfare> if you go to 2:34… we get the right file, and also issues a byte-range request for the file and bam… we server that and go forward
14:13 < daslicht> nice
14:13 < daslicht> do you have any examples in node for such kind of things ?
14:13 < belfare> in nodejs?
14:13 < daslicht> ok which technology do you suggest ?
14:14 < daslicht> PHP ?
14:14 < cloudbender> You want node
14:14 < daslicht> :)
14:14 < belfare> actually HTTP-Servers usually take care of it for you… but for nodejs you are going to build it or find a library
14:14 < belfare> https://groups.google.com/forum/?fromgroups=#!topic/nodejs/gzng3IJcBX8
14:14 < belfare> i'm seeing if anyone has written a library
14:15 < daslicht> yeah they take care , but I wont have that much control , regarding serverside timer, and pushing metadata
14:15 < daslicht> recap: I like to have a server side timer running which presents the current playbackpositioin of my (fake)'radio'
14:16 < daslicht> if one client connects to ther server , i like to return the audio file from that ppoint of time 
14:16 < daslicht> and push the according song infos via socketio
14:16 < belfare1> ack, that website broke me
14:19 < daslicht> thank you very much for your help ! 
14:19 < belfare1> build a byte-range library for me
14:19 < belfare1> :)_
14:19 < daslicht> I really appreciate that you are open 
14:20 < daslicht> I do research on this 
14:20 < daslicht> !
14:20 < daslicht> and keep you posted
14:20 < belfare1> sounds good, cheers
14:20 < daslicht> :)
14:22 < daslicht> do i need to use the node stream for such kind of things ?
14:22 < daslicht> how about bandwith  throttling ?
14:23 < belfare1> that shouldn't be too difficult… just serve the buffer slower
14:24 < daslicht> http://stackoverflow.com/questions/11944932/how-to-download-a-file-with-node-js
14:24 < daslicht> ?
14:24 < belfare1> if you have 1.5MB up.. you should split that up into 128Kbps chunks… or whatever the streaming BW is… and limit connects to that
14:24 < belfare1> I think that nodejs will just go at full speed
14:25 < belfare1> you'd need to actually send the file chunks either slower; at regular speed and limit the connections, or something more creative
14:26 < belfare1> there isn't an easy way to get around the technical speed limitations; i mean that I know of
14:26 < belfare1> actually
14:26 < belfare1> let me think...
14:26 < daslicht> http://stackoverflow.com/questions/4771614/download-large-file-with-node-js-avoiding-high-memory-consumption
14:26 < belfare1> how many people do you anticipate using this?
14:26 < daslicht> open end
14:27 < belfare1> ok then… don't stream
14:27 < belfare1> use caching servers on the internet with all the media… then the main server just tells them the file and byte-range to get...
14:27 < belfare1> that should get you around the BW limitation pretty easily
14:27 < belfare1> I can't really talk much more about that though
15:24 < cloudbender> .
15:25 < angelazou> quick question, how do I test the execution time of a script
15:27 < geNAZt> node or browser ?
15:28 < angelazou> genazt: node
15:30 < JohnMcLear> actually, kinda depends if the script interacts with the dom
15:30 < JohnMcLear> unless you wanna run headless
15:30 < JohnMcLear> oh
15:30 < JohnMcLear> ignore me.
15:31 < JohnMcLear> angelazou search online for "profiling node"
15:32 < geNAZt> time node <script>
15:32 < geNAZt> on linux
15:41 < quincy> is there a secret to jQuery plugin loading?  i do the <script> reference of it but when i go to use it (long after page load) i get function undefined?
15:41 < quincy> jquery works, just this plugin doesn't.
15:42 < JohnMcLear> put the plugin after jquery
15:42 < quincy> but you don't need to call something to have it loaded or anything, aside from the js reference in <script>
15:42 < JohnMcLear> IE <script src="jquery.js"></script><script src="plugin.js"></script>
15:43 < quincy> ok, let me try that, maybe i do have it out of order
15:43 < JohnMcLear> usually with scripts they extend the $ functionality
15:43 < JohnMcLear> before $ has say 500 functions, afterwards it has 501.  It is "Called" when you reference it..  IE $("#sexbot").exploitMe("slow");
15:43 < JohnMcLear> Prolly wrong chan for jquery questions though...
15:44 < TehShrike> heh.
15:44 < quincy> yeah, sorry.  i just have been doing lots of node.js stuff and you guys have been super helpful.
15:44 < quincy> okay, i guess that worked.  i didn't get the error but it didn't work.  i just figured since loading would be asynchronous the load order wouldn't matter.  but obviously it does!
15:45 < Havvy> There's #jquery and ##javascript
15:45 < quincy> thanks!  i'll use them in future for that stuff.
15:48 < SomeoneWeird> quincy, i think they're loaded async, but eval'd in order, not sure about that though
15:48 < quincy> so, just curious, do you guys just sort of leave yourselves in here while working/etc.?  i tend to only think to jump on after i've banged my head against a wall for a while.  i think i'm doing it wrong.
15:48 < SomeoneWeird> i'm always in here
15:48 < SomeoneWeird> so is a lot of people
15:48 < SomeoneWeird> most of the time there's interesting conversations going on
15:48 < Havvy> ^^
15:49 < MelkorNemesis> I also idle every now and then
15:50 < quincy> yeah, i need to do that.  i spend most of my time working alone, not around other coders, and try to solve all my problems myself.  
15:50 < SomeoneWeird> i know i've learn't quite a few things just by reading other peoples conversations
15:50 < quincy> been thinking that's not working so well.  thinking about switching careers, should probably try that first. :)
15:50 < MelkorNemesis> well if I work I just work and do not struggle with chat, it's in my tray
15:50 < FlowState> i just like the company :-X
15:50 < SomeoneWeird> i probably alttab every 10 or so minutes and scan over the current convo to see if theres anything interesting going on
15:50 < MelkorNemesis> FlowState: handsome and clever boys, right?
15:50 < SomeoneWeird> tables maybe 10 seconds
15:51 < SomeoneWeird> MelkorNemesis, lols
15:51 < FlowState> MelkorNemesis: :)
15:51 < quincy> right, not saying everyone just talks constantly, but to have in your mindset that you have people you can ask for help.  
15:51 < MelkorNemesis> SomeoneWeird: "convo" .. ain't you aussie?:)
15:51 < SomeoneWeird> i am
15:51 < SomeoneWeird> lol
15:51 < MelkorNemesis> hehe
15:51 < SomeoneWeird> wtf, tables?
15:52 < SomeoneWeird> s/tables/takes/
15:52  * SomeoneWeird facedesks
16:09 < ExxKA> Hey defunctzombie, are you coming to the Meteor talk on tuesday?
16:09 < defunctzombie> ExxKA: no, I have another meetup I am attending
16:09 < defunctzombie> ExxKA: I also don't use Meteor
16:10 < ExxKA> alright :)
16:42 < ljharb> nathan7: i'm here
16:42 < nathan7> ljharb: Managed to sort that IncomingMessage issue out?
16:45 < Scalding> how do I get information out of a callback?  The callback function has no way of accessing the 'outside world' that I can see
16:45 < lohkey> you can access the outside world via lexical scope
16:46 < lohkey> that could get sloppy though
16:46 < lohkey> I'm one of the blasphemous people in the node community that prefer to use promises instead of callbacks
16:46 < ljharb> nathan7: nope, i'd love some help :-)
16:47 < nathan7> ljharb: Got a simple demo of the issue?
16:47 < Scalding> ok, so let's say I have a series of objects, and they have functions that use callbacks, e.g. fs.open.  How does this callback communicate back to its calling object?
16:48 < ljharb> nathan7: not simple exactly - i've got a repo you can check out and see the problem. https://github.com/caolan/forms/blob/master/test/test-form.js#L274 - run 'npm test' in it and you'll see the test fail at https://github.com/caolan/forms/blob/master/lib/forms.js#L63
16:48 < ljharb> nathan7: fails with https://gist.github.com/ljharb/3ffd2be12fdb2d03a8f8
16:48 < Scalding> var fs = require('fs');  function foo() { 	debugger; 	var fooStatus = 'opening file'; 	fs.open('c:\\ws\\data\\blah.blah', 'r', function(err, fd) { 		if (err) 		{ 			fooStatus = 'unable to open file'; 			return; 		} 		fooStatus = 'reading file'; 		fs.close(fd, function(err) { 			if (err) 			{ 				fooStatus = 'unable to close file'; 				return; 			} 			fooStatus = 'closed file'; 		}); 	}); 	console.log(fooStatus); }  foo();
16:49 < Scalding> a simple hack to show the problem
16:49 < ljharb> Scalding: fooStatus won't be defined until a later time. you'd want to pass a callback function into foo, and execute that. fs is asynchronous.
16:49 < ljharb> Scalding: means, it can't return a value, it can only call a callback at some unspecified future time.
16:50 < Scalding> how could I do that?  fs.open already takes a callback, and that has no knowledge of any other functions or objects
16:50 < nathan7> wait, why are you using fs.open()
16:50 < nathan7> You rarely need that
16:51 < Scalding> I'm loading some data from a local file
16:51 < Scalding> really, though, this was just a dummy experiment to show the problem
16:51 < Scalding> it happens with everything
16:51 < nathan7> fs.readFile
16:51 < nathan7> I can't read your code
16:51 < nathan7> pastebin it so we can read it
16:52 < Scalding> ok, but who cares which function I use.  They all have the same pattern
16:52 < nathan7> I can't read your code, I have no idea how you're fucking up
16:52 < nathan7> pastebin it
16:53 < JohnMcLear> you guys tried using etherpad instead of pastebin for code dumps?
16:53 < nathan7> etherpad has a different purpose
16:53 < Scalding> http://pastebin.com/4SnLY4HJ
16:54 < nathan7> yes
16:54 < nathan7> You're logging fooStatus before it has been set
16:54 < Scalding> yes, I see that
16:54 < SomeoneWeird> JohnMcLear, i was, but pastie/pastebin etc have syntax highlighting which makes it easier
16:54 < nathan7> You have a callback
16:55 < Scalding> where, how?
16:55 < nathan7> as a way of telling you when shit is available
16:55 < nathan7> You're passing it to fs.open
16:55 < nathan7> So your code would continue in there
16:55 < SomeoneWeird> Scalding, move line 23 to after line 20
16:55 < Scalding> ok, that won't work either.
16:56 < SomeoneWeird> why not..?
16:56 < nathan7> When do you want it to log?
16:56 < Scalding> fooStatus is supposed to represent another object, a much more complex object, that exists outside of the functions
16:56 < nathan7> Yes..?
16:56 < SomeoneWeird> so?
16:56 < nathan7> You could make line 23 this: function logStatus() { console.log(fooStatus) }
16:57 < nathan7> and do logStatus() inside your other callback
16:57 < nathan7> It all boils down to juggling callbacks
16:57 < Scalding> In reality, there are an unknown number of websocket objects.  Each gets various updates at various times.  The problem is that the innards of the callbacks don't know which websocket object they belong to
16:58 < nathan7> Scalding: They do
16:58 < Scalding> how?
16:58 < nathan7> Scalding: Make sure you have the WebSocket in scope in some way
16:58 < Scalding> how?  I can't pass it as part of the callback
16:59 < nathan7> somefunction(function(err, val) { actualCallback(err, val, websocket) })
16:59 < Scalding> in your example, websocket will be undefined when the function is called
17:00 < nathan7> Well, if you haven't got your websocket in scope *anywhere*
17:00 < nathan7> then it's going to be tough to get hold of a reference to it, yes
17:00 < Scalding> I don't understand.  Everything is done in these callbacks, there is no scope that I'm aware of that holds everything
17:01 < nathan7> A function is a fresh scope.
17:01 < nathan7> JavaScript has function scope.
17:01 < Scalding> I haven't seen that in my examples.
17:01 < Scalding> In fact, that's what I thought
17:01 < nathan7> Your scope of course inherits from its outer scopes
17:02 < Scalding> Which is why I made up the pastebined example
17:02 < Scalding> fooStatus should be in the foo() scope
17:02 < Scalding> in the foo() scope I call a function with a callback
17:02 < Scalding> That function does not see fooStatus() - it's undefined
17:03 < ljharb> you can't call the function in the foo scope
17:03 < Scalding> oops, not fooStatus() fooStatus
17:03 < ljharb> you have to call it in the calbacks, when it is defined.
17:03 < Scalding> how would it ever be defined in the callback?
17:03 < Scalding> There's something I'm just not getting, and I'm trying very hard
17:03 < ljharb> you defined it in your code on line 10 and 17
17:04 < Scalding> no, it's line 6
17:04 < ljharb> so that's the moment in time that you need to call a function that does stuff with it, not before.
17:04 < Scalding> I don't understand
17:04 < ljharb> Scalding: on line 6 you do initialize it to a string. so on line 23 it should be "opening file"
17:04 < Scalding> yes, it is.
17:05 < Scalding> but it never becomes anything else
17:05 < ljharb> of course it does
17:05 < Scalding> inside the callbacks it is undefined
17:05 < ljharb> just, after the "foo" function has already terminated.
17:05 < Scalding> until lines 10 and 17
17:05 < ljharb> Scalding: put a console.log(fooStatus) between lines 7-8
17:05 < ljharb> it will not be undefined.
17:06 < Scalding> how would it ever still be in existence?  foo() terminates as soon as it's called, only the callbacks remain
17:06 < ljharb> it's called a closure
17:06 < Scalding> Oh I see, the ws object would still be around
17:06 < ljharb> it's a fundamental part of javascript
17:06 < ljharb> so too will all the callbacks you've passed to fs - lexically defined in "foo", and even though foo is gone, those callbacks still have a reference to it.
17:06 < Scalding> right, so my example isn't really indicative of what will happen when there is some other object
17:07 < ljharb> then make an indicative example :-p
17:07 < Scalding> I just need to refer to correct one.
17:07 < Scalding> Yes, I think I see my problem
17:07 < ljharb> nathan7: sorry, got sidelined; do you have any thoughts for me on the stream thing?
17:07 < Scalding> Thanks everyone, this may take a while; don't wait around for me :)
17:10 < nathan7> ljharb: derp
17:10 < ljharb> i'd love it if my problem was that my code's doing something derpy :-)
17:10 < nathan7> ljharb: ah
17:10 < nathan7> ljharb: this is on 0.10?
17:10 < ljharb> yes
17:10 < ljharb> on 0.8 it works fine
17:10 < nathan7> ljharb: do req.resume()
17:10 < nathan7> ljharb: it'll set the stream to old-mode
17:12 < ljharb> so when i add that to all 3 of the IncomingMessage tests, all 3 tests are now failing
17:12 < JohnMcLear> SomeoneWeird yeah etherpad has syntax highlighting too :)
17:12 < ljharb> i'm concerned also that the implementation is doing something wrong - ie in forms.js, not in the tests
17:13 < JohnMcLear> https://github.com/etinquis/etherpad-plugins/tree/master/ep_syntaxhighlighting
17:15 < ljharb> nathan7: and in the implementation, i'm adding a data listener, which should put it in old mode, but that's where it fails
17:16 < nathan7> ljharb: hrm
17:27 < Scalding> I have updated my demo to be more accurate: http://pastebin.com/HYPdSAwz
17:27 < Scalding> it still does not work properly
17:28 < Scalding> inside the callbacks, this is replaced with some other /this/
17:30 < ljharb> Scalding: "this" is special. if you want to preserve it, you either need to nest a bunch of .bind(this) calls, or, store it in a temp variable
17:30 < ljharb> Scalding: ie on line 7, do `var self = this;` and then use "self" after that instead of "this"
17:30 < Scalding> Ill try that, thanks
17:32 < Scalding> It works!  Thanks
17:38 < ljharb> nathan7, any ideas? :-)
17:38 < nathan7> ljharb: make it all work with streams2, use the readable-stream wrapper on <0.10
17:39 < ljharb> that sounds like a great idea, but i've no idea how
17:39 < ljharb> is there a doc on doing that anywhere?
17:39 < ljharb> if i have to i'll have to play with it of course :-) but i'm hoping to fix it faster than that
17:39 < nathan7> https://npmjs.org/package/readable-stream
17:39 < nathan7> it's the streams module from 0.10
17:41 < ljharb> hm, ok thanks i'll take a look
18:05 < owen1> is this code readable? can someone critique it? http://hastebin.com/sikowewuxa.js
18:06 < owen1> i think i need to write tests for it but not sure where to start
18:07 < junk> Is it true that Node.js will replace php ?
18:07 < owen1> junk: yes
18:08 < aMoniker> owen1: very readable
18:08 < owen1> aMoniker: oh. thanks. i was not sure since i had to add that clojure inside the forEach
18:08 < peterschmidler> What you think about everyauth compared to passport?
18:08 < owen1> and the if(err) after every call to redis
18:09 < junk> OMG! How many server side language will out there ... now i need to switch to Node.js !?!
18:09 < owen1> aMoniker: maybe after i'll understand domains i'll be able to clean it a bit. never used it so i don't know
18:10 < nathan7> owen1: clojure != closure
18:10 < aMoniker> owen1: domains?
18:10 < nathan7> owen1: and dude, use a flow control lib
18:11 < nathan7> owen1: async.forEach(articles, processArticle, articlesProcessed)
18:14 < owen1> nathan7: never used it since i like to feel pain before adding abstractions
18:15 < owen1> but maybe that's the pain i should stop feeling? let me try refactoring it and see
18:15 < nathan7> owen1: function processArticles(articles, cb) { async.forEach(articles, function(article, cb) { /* process the article, call cb */ }, cb) }
18:15 < nathan7> oh, the new async docs refer to async.each
18:16 < nathan7> Anyway, if you want them all to be processed at the same time, async.each
18:16 < nathan7> Want to process them one by one? Make it async.eachSeries!
18:16 < nathan7> there's async map, async filter, async reduce
18:16 < nathan7> https://github.com/caolan/async#each
18:16 < nathan7> async is my favourite library
18:17 <@mbalho> i like the seattle public myself
18:17 < owen1> nathan7: give me 5 minutes. i'll rewrite it with async.each
18:33 < eighty4> If I add an event listener inside a module is there a way to remove it without actually doing emitter.removeListener. I was hoping something like http://stackoverflow.com/questions/6676612/unloading-code-modules#answers-header would do it but that doesn't seem to work.
18:34 <@mbalho> you can removeAllListeners
18:35 < eighty4> mbalho: yeah, but that would remove listeners from other modules as well, right?
18:35 <@mbalho> yep
18:37 < SomeoneWeird> <eighty4> If I add an event listener inside a module is there a way to remove it without actually doing emitter.removeListener. < what's wrong with that?
18:38 < eighty4> SomeoneWeird: I'd like to be able to "unload" an entire module without knowing exactly what's in it.
18:38 < SomeoneWeird> then the SO answer should work
18:38 < SomeoneWeird> well
18:38 < SomeoneWeird> actually no, it won't remove events already listening
18:38 < SomeoneWeird> mm
18:38 < SomeoneWeird> that's going to be quite hard
18:39 < eighty4> SomeoneWeird: yeah, I've already tried the SO and that didn't work.
18:39 < ljharb> eighty4: the module you want to unload doesn't have a teardown method
18:39 < ljharb> ?
18:39 < eighty4> I'm writing a small plugin thing. That will let the user drop a plugin into a plugin/ folder and the plugin will be loaded
18:39 < eighty4> the option would of course be to demand an unload function in the plugin
18:39 < ljharb> modules should be able to clean themselves up if they modify something outside the module.
18:40 < ljharb> better would be to never modify something outside the module
18:40 < eighty4> ljharb: it doesn't actually modify anything, just adds listeners that I'd like to be able to remove
18:40 < ljharb> adding a listener to something modifies it :-)
18:40 < SomeoneWeird> -.-
18:41 < eighty4> well ok, not in the way I think of modifying. But sure
18:41 < owen1> nathan7: http://hastebin.com/mehafumuge.lua   
18:42 < ljharb> so, it shouldn't do that. maybe your module should export 2 functions "setup" and "teardown" or something, that each take an object (on which to modify)
18:42 < owen1> nathan7: do u think it's worth it in my case
18:42 < owen1> ?
18:42 < eighty4> ljharb, SomeoneWeird I probably have a really ugly solution from the start and that causes the problem...
18:42 < ljharb> lol probably
18:43 < SomeoneWeird> heh yeah
18:43 < SomeoneWeird> you could probably hook everything
18:43 < SomeoneWeird> and proxy it
18:45 < eighty4> SomeoneWeird, ljharb: https://gist.github.com/stenehall/fcc538af34471f5b5b77 is the code, if you want to come with a better solution.
18:46 < SomeoneWeird> how will that clean up listeners?
18:46 < ljharb> eighty4: not sure why a plugin needs to be an instance, but ok
18:46 < ljharb> eighty4: like i said, i'd have a plugin export 2 functions, setup and teardown.
18:47 < eighty4> SomeoneWeird: that won't clean up it's the code loading the plugins :)
18:47 < SomeoneWeird> eighty4, https://github.com/SomeoneWeird/nodeplugs
18:47 < eighty4> ljharb: not sure how that would work.
18:48 < eighty4> SomeoneWeird: cool. I'll check that out.
18:48 < ljharb> eighty4: setup would be "foo.on" and teardown "foo.off"
19:00 < semarketir> :v
19:04 < browndav> if there's anyone hanging around who has done native extension work in C++ -- is there a need to call uv_ref after using uv_queue_work with uv_default_loop()? uv_unref?
19:15 < Fodi69> hi, anyone using supertest?
19:41 < semarketir> Codebyte for NodeJS?
19:42 < ningu> semarketir: ?
19:56 < Fodi69> how can I get session support for supertest?
20:11 < jeffmjack> anybody have recommendations on reading to understand callbacks?  have already read all the wikipedia stuff
20:11 <@mbalho> i just wrote a thing on that
20:11 < zivester> anyone know why a socket.io broadcast isn't working when i have one client, but works when I have > 1 ?
20:11 <@mbalho> jeffmjack: https://github.com/maxogden/art-of-node
20:12 < jeffmjack> awesome thanks max
20:12 <@mbalho> jeffmjack: im still working on it so if you find any of it unclear lemme know
20:12 < jeffmjack> ok will do
20:13 < jeffmjack> the question I'm trying to address is I don't understand where the variables (e.g. error, req, res in request) are coming from in the callback
20:13 < damarusama> is there some research to get nodejs on embded device ? or is there too much dependencies to even consider that?
20:14 < jeffmjack> <- (not a hardcore programmer)
20:14 <@mbalho> damarusama: what processor architecture?
20:14 <@mbalho> jeffmjack: ahh so if you have function a(foo, bar) {}  and then you do a('hello', 'world') the two strings become foo and bar inside the a function
20:15 <@mbalho> jeffmjack: but only inside that function (and any other functions inside that function)
20:15 < jeffmjack> right but what is passing in those variables to the callback?
20:15 < damarusama> mbalho: arm cortex - I think it was a luminaries
20:15 <@mbalho> jeffmjack: the request library does it
20:15 < jeffmjack> like, those params are to pick up variable names/values that were returned from something, right?
20:16 < jeffmjack> ok
20:16 <@mbalho> damarusama: ive got it running on arm7 and arm8, i think one was a cortex
20:16 <@mbalho> damarusama: theres a raspberry pi distro on http://nodejs.org/dist/latest/
20:16 < michael-robinson> mbalho: awesome
20:16 <@mbalho> damarusama: and i run it on a kindle paperwhite with help from rvagg 
20:16 < jeffmjack> so you just have to know what variables each callback is going to be getting passed by reading the (e.g. Request) library documentation>
20:16 < jeffmjack> ?
20:16 <@mbalho> jeffmjack: yea pretty much
20:17 <@mbalho> jeffmjack: most callbacks will have an error variable first, so function(err, otherStuff)
20:17 <@mbalho> jeffmjack: if there is no error then 'err' will be undefined or false or null or something
20:17 < damarusama> mbalho: on the kindle, that's pretty sweet... luminary doesn't have enough power to run a full OS though...
20:17 < jeffmjack> right ok
20:18 <@mbalho> damarusama: if you wanna cross compile this is pretty useful https://github.com/felixge/node-cross-compiler
20:18 < s5fs> damarusama: i'm runnig node on raspberrypi and beagleboard-xm hardware
20:18 < jeffmjack> but if you don't put the placeholder in for error in the callback function, everything goes sideways then, right?  cause you do func (req, res) {} but then you get passed an error, your callback with try to treat the passed-in error as what you're calling 'req', right?
20:18 < s5fs> damarusama: beagle stuff we are considering production-ready, but we're also using a custom angstrom build.
20:19 < s5fs> (angstrom being an embedded linux distro)
20:19 <@mbalho> jeffmjack: yeah the order matters
20:20 < jeffmjack> hm
20:20 < jeffmjack> so in the request documentation, Mikeal writes this code: http.createServer(function (req, resp) {
20:20 < jeffmjack>   if (req.url === '/doodle.png') {
20:20 < jeffmjack>     if (req.method === 'PUT') {
20:20 < jeffmjack>       req.pipe(request.put('http://mysite.com/doodle.png'))
20:20 < jeffmjack>     } else if (req.method === 'GET' || req.method === 'HEAD') {
20:20 < jeffmjack>       request.get('http://mysite.com/doodle.png').pipe(resp)
20:20 < jeffmjack>     } 
20:20 < jeffmjack>   }
20:20 < jeffmjack> })
20:20 < jeffmjack> there is no error variable in the callback
20:20 < jeffmjack> why not?
20:20 < ljharb> pastebin cose please
20:20 < ljharb> *code
20:20 < jeffmjack> sorry
20:20 <@Nexxy> s/pastebin/gisthub/
20:20 < mikeal> you mean the createServer callback?
20:20 < jeffmjack> ok
20:21 < ljharb> sorry yes, gist
20:21 < jeffmjack> yes
20:21 < mikeal> createServer takes a listener for the "request" event, it's an event listener not a "standard callback"
20:21 < jeffmjack> ah
20:21 < damarusama> s5fs: are you positive though that to run node you would definitly need a complet OS behind it ?
20:21 < mikeal> it could also be written as
20:22 < mikeal> var s = http.createServer()
20:22 < s5fs> damarusama: as opposed to what?
20:22 < mikeal> s.on('request', function (req, res) {})
20:22 <@mbalho> jeffmjack: the term 'callback' means something that is called only 1 time, but in that case its a function that gets called multiple times
20:22 < damarusama> s5fs: as opposed to compile all the library needed  into the chip  itself
20:22 < damarusama> for example on the arm cortex you can run a web server all coded in C 
20:23 < jeffmjack> meaning as a listener it gets called multiple times?
20:23 < damarusama> there is no actual OS created
20:23 < s5fs> damarusama: yeah, it's not going to run on an msp430 or whatever without a bunch of effort.
20:23 < owen1> anyone have a way to view markdown localy? https://github.com/ypocat/gfms stopped working
20:24 < damarusama> s5fs: yeah having a OS makes it hard sale for real time hardware and controler... I am creating a javascript UI for such a controller, but I guess node would be an overkill anyhow
20:25 < s5fs> damarusama: i'm doing similar work for the beagle, tossing a js-based ui on it but we're also using nodejs for the web server on the device, too. for our needs this feels spot-on.
20:26 < damarusama> s5fs: yeah I would love to have access to node from the UI it would solve a lot of put get and weird cgi from the created web server... 
20:27 < s5fs> damarusama: yeah, connect and express are pretty awesome for getting stuff built quickly
20:28 < s5fs> mainly though, in our app the real logic lives in the client, so if you can serve static pages then you'll get pretty far.
20:28 < s5fs> even a nice javascript abstraction layer can help hide the fugly cgi
20:28 < damarusama> yes it's getting quite top heavy but it's working nice
20:29 < damarusama> s5fs: what would you use in such a case?
20:29 < s5fs> right on. what hw are you using? (i'm not a hw guy btw)
20:30 < damarusama> it's a arm cortex, well luminary that got bought by arm, it's has a really small footprint but we have acess to a sd card where we put the file
20:31 < damarusama> the chipset spits out some json which are update live in javascript
20:31 < s5fs> damarusama: i think i'd do similar to what you're doing. one big funky cgi with a simple restful api, then heavy client-side scripting to hide the deficiencies.
20:31 < s5fs> ah nice!
20:31 < damarusama> it's a controler for a camera for pre production cinema 3d effect, nothing too complexe, but the coder just want a clean UI
20:32 < damarusama> It's a pretty kool project, creating sliders and knob to recreate some sort of camera control mixer
20:32 < s5fs> understood. our client side is bootstrap and jquery for the most part. for more custom areas and modules we just go plain ol' js.
20:33 < s5fs> that does sound like fun!
20:33 < jeffmjack> ok I think this is starting to make sense... is this right?: 
20:33 < jeffmjack> in python etc., you'd call some method to create a new object, which you'd then write code around.
20:33 < jeffmjack> in node, you pass all that code that manipulates the object as a parameter to the method itself.. which means you don't have to wait for the method to do it's thing so you can execute the code that depends on that method.... thus the whole ability to do asynchronous stuff, increased concurrency, etc.  
20:33 < jeffmjack> is that the gist of it?
20:33 < damarusama> s5fs: I was surprise that there is no UI that covers it all
20:33 < damarusama> like a battery meter icon, plus some knobs plus slider... 
20:34 < damarusama> like a physical dj UI in javascript :D
20:34 < Bart> Hey
20:34 < s5fs> damarusama: you can find some icon packs for wifi signal strength, battery meters, etc but i haven't seen anything super comprehensive either, like "embedded device web ui toolkit". 
20:35 < s5fs> damarusama: i think that's partially bc it's quick to hack in js so it's more 'roll your own'
20:36 < BartB> What would be the best way to create a gaming control panel in Node? With two servers, TCP and HTTP and then have the TCP act as a 'console' with commands to manage the servers or..?
20:36 < damarusama> s5fs: yeah for sure, I sent my battery to the fontawesome guy but no luck, I guess it wasn't pixel perect enough for him
20:36 < s5fs> haha!!
20:37 < s5fs> damarusama: gotta run, lunch is served. my gal made corned beef yesterday so i have to get off here and give it my full attention ;-)
20:37 < damarusama> :D bon appetit! 
20:39 < JohnMcLear> Btw, any etherpad users, you can vote for features/plugins you want here: http://etherpad.idea.informer.com/
20:40 < mscdex> BartB: well, you can start a repl, which is quick and dirty
20:40 < BartB> mscdex: Could you explain/give me a link as to what that is? I'm brand new to Node
20:41 < mscdex> BartB: repl is what you get when you just type 'node'
20:41 < BartB> Oh right
20:41 < BartB> But this thing needs to have a UI with it and have multiple users and such
20:41 < mscdex> over tcp?
20:42 < mscdex> why not have the "console" over the same http server?
20:43 < damarusama> BartB: you can have a node.js server with connect, and create some static controler with some jquery ui mobile ?
20:44 < BartB> My idea is that the HTTP server serves up GUIs for things in the TCP server which starts/stops game servers
20:44 < BartB> And if they don't want to use the GUI, they could use something else to connect directly to the TCP server and run the commands manually
20:44 < mscdex> you could use curl
20:45 < mscdex> if you didnt want gui
20:46 < BartB> the other alternative is an HTTP server that serves up web pages
20:46 < damarusama> ha I see... they could use ssh, or some sort of derivative/script that could send ssh command over the server 
20:46 < BartB> and then for each thing you do, it executes a command on a different server via SSH
20:49 < s3shs> Anybody here understand domains?
20:49 < geNAZt> where is the problem in understanding domains ?
20:49 < s3shs> Well, I have a small sample program that when run with --debug, ends fine.  But when run with debug-brk crashes.
20:50 < s3shs> Every damn time.
20:50 < geNAZt> and what does this have todo with domains ?
20:50 < s3shs> The crash is dependent on the domain code.
20:51 < s3shs> When I create the domain I stuff "myId = 4" in to it.
20:51 < s3shs> When I look at domain.active.myId after a setTimeout and an async.Waterfall, it crashes.
20:51 < geNAZt> without any error ?
20:51 < geNAZt> what about a strace ?
20:52 < s3shs> Works fine without the debugger.  With the debugger I get: "Cannot read property 'myId' of undefined"
20:52 < s3shs> Meaning that domain.active has gone away.
20:54 < Industrial> Any good blogs / sources besides DailyJS on whats going on in JS land?
20:55 < s3shs> getNAZt, https://gist.github.com/anonymous/8fdbe72b4cfdfd3c7e25#file-gistfile1-txt
20:55 < damarusama> Industrial: the weekly js newsletter is pretty good
20:56 < jeffmjack> mbalho: the a, b, c ordering thing is super helpful, clarifies a lot
20:56 < jeffmjack> :)
20:56 < damarusama> Industrial: Javascript Weekly
20:57 < Industrial> damarusama: k
20:58 <@mbalho> jeffmjack: ah cool, i wasnt sure if that section was getting too long
21:04 < jeffmjack> no it's super helpful
21:05 < jeffmjack> the big gray area for me has been to what degree one defines the callback vs. to what degree that is already specified in the method
21:05 < jeffmjack> so yeah, the a, b, c thing spells that out really clearly
21:06 <@mbalho> gotcha
21:20 < cas> I'm a little stuck with the prototype/OOP in node/JS can somebody tell me what I am doing wrong? http://pastebin.com/WaEijBJK
21:23 < wivlaro> cas: 'this' in the callback is not bound to the correct thing
21:24 < RLa> you can either use bind or var t = this; before creating the callback (and then using t inside it)
21:24 < wivlaro> http://pastebin.com/L5uk9s5w
21:25 < wivlaro> http://pastebin.com/uZidwKZS oops i missed out a 'this' -> 'that'
21:26 < cas> wivlaro: wonderfull, thanks
21:27 < MI6> joyent/node: isaacs v0.10 * c0d5001 : stream: Fix early end in Writables on zero-length writes  Doing this caus - http://git.io/wy6PLg
21:32 < cas> wivlaro: works like a charm now
21:34 < panum> I don't know if anyone cares, but I just created this (https://github.com/tpanum/autographd) flexible "mail signature generator"-tool using Node.js and Handlebars. Not the most advanced application, but still thanks to Node.js, it's rather powerful.
21:35 < taterbase> panum: neat
21:41 < panum> taterbase: Thanks :)
21:47 < JohnMcLear> Hey guys, anyone done a 0.8 to 0.10 migration yet?  I think I'm stuck by a processTick and could do with some help please ;\ https://github.com/ether/etherpad-lite/pull/1623/files
21:51 < Zolmeister_> I have had issues with the 'path' library moving from .8 to .10
21:52 < bradleymeck> anyone seeing some odd peerdeps problems with global installs on npm
21:54 < urlwolf> could it be that node.js doesn't like my low latency linux kernel? http://pastebin.com/pHmt1HQJ
21:56 < beginner> hello all
21:56 < ningu> urlwolf: I don't think so, it looks like the issue is something using an old version of mkdirp that isn't in npm anymore
21:56 < urlwolf> ningu: thanks
21:56 < beginner> just wondering what do people generally use to debug your node apps?
21:56 < urlwolf> what could it be?
21:57 < urlwolf> I'm trying to install docpad...
21:57 < ningu> urlwolf: I don't know, you didn't include that part of the output
21:57 < urlwolf> will do
21:57 < ningu> oh, ok
21:58 < urlwolf> ningu: try now: http://pastebin.com/iN4bMazE
21:58 < beginner> i have tried a bunch of things: node-inspector, webstorm, the eclipse integration
21:58 < beginner> the debugging doesn't feel as easy as using visual studio or java debugging in eclipse
21:59 < ningu> urlwolf: oh, actually no, it's coffeescript thta's the issue
21:59 < urlwolf> aha
21:59 < ningu> I don't really understand though since it looks like 1.6.1 is available
21:59 < urlwolf> why is that?
21:59 < ningu> npm ERR! Error: No compatible version found: coffee-script@'coffee-script@~1.6.1'
21:59 < beginner> webstorm felt the easiest to use, but even that is a little hard to debug a test suite using mocha
21:59 < ningu> but I don't understand why it doesn't like the 1.6.1 that's available
22:00 < beginner> i see a lot of people working on really complex modules and am just wondering what do they use to debug?
22:01 < ningu> beginner: honestly I just use a lot of console.log debugging
22:01 < mrvisser> beginner: I've done some somewhat complex stuff, I just use bunyan debug logging, and good 'ol console.log's. I don't do any step-through debugging and variable inspection
22:01 < beginner> doesn't it feel slower? you would have to try a lot of things to find out what is wrong
22:01 < beginner> and remember to remove the loggers
22:02 < mrvisser> yea it feels a bit slower. I came from Java and felt it a little clunky, but I haven't found it to cause all that much of an impact
22:02 < MI6> joyent/node: bnoordhuis created branch fix-windows-build - http://git.io/wVWnCw
22:02 < mrvisser> as far as removing the log statements, I just grep console.log and remove them before committing
22:03 < beginner> i see, interesting
22:03 < mrvisser> when i say I came from Java, I heavily used the step-through debugger for it
22:03 < ningu> beginner: usually from the error I find it pretty clear where the issue could be and put console.log in the relevant places
22:03 < bradleymeck> beginner, node has a built in repl module and debugger, use one or both
22:04 < urlwolf> hmm
22:04 < bradleymeck> flatiron-repl helps a little for simple repl reproduction / hunting, node-webkit-agent aims to replace node-inspector if you want a gui
22:04 < urlwolf> docpad wants an old version for node
22:04 < urlwolf> export node_version_to_install='v0.8.9'
22:05 < urlwolf> curl https://raw.github.com/bevry/community/master/install-node/install-node.sh | sh
22:05 < beginner> repl is useful when trying a small bit of code, but when you want to try something complex, i feel like you can try it, but a lot of it gets lost
22:05 < urlwolf> bad install advice...
22:05 < beginner> oh nice
22:05 < Alex____> greetings, i need some help with nodejs and gzip
22:05 < bradleymeck> beginner: look into node-webkit-agent if you want to just explore via a gui
22:05 < beginner> its good to hear about node-webkit-agent
22:06 < beginner> thanks! will check it out
22:06 < Alex____> hello?
22:06 < Alex____> need some help with gzip
22:07 < bradleymeck> Alex____: generally ask first in IRC, unless topic says to read a faq
22:07 < Alex____> so I made a socket, and gzipped a stringged json
22:07 < Alex____> i sent it to Actionscript 3 
22:07 < Alex____> but can't seem to decompress it
22:08 < Alex____> teh fact that its a stringged json shouldn't be relevant
22:08 < Alex____> i tried gzip and deflate
22:08 < Alex____> couldn't gunzip or inflate it
22:09 < Alex____> I am thinking, perhaps, i am sending it wrong?
22:09 < bradleymeck> 1. test against a non-actionscript consumer like `gunzip` to see if the gzip looks proper 2. whats the error message 3. node version? 4. did you get the final piece? 
22:09 < Alex____> i used socket.write( buffer );
22:10 < bradleymeck> how did you make buffer
22:10 < Alex____> 		zlib.deflate( data, function( err, buffer ) 		{ 			if( !err ) 			{ 				console.log( buffer ); 				//console.log( buffer.toString() ); 				socket.write( buffer.toString() ); 			} 			else 			{ 				socket.write( "error encoding" ); 			} 		});
22:10 < Alex____> where "data" is the string
22:11 < bradleymeck> do not .toString binary data
22:19 < deathgaze> Would anyone here be willing to help a beginner read from a text file?
22:20 < gkatsev> `var fs = require('fs'); fs.readFile('file.txt', function(err, file){}));`  or something
22:20 < MI6> joyent/node: Ben Noordhuis v0.10 * 690a8cc : deps: fix openssl build on windows  Commit 8632af3 ("tools: update gyp to - http://git.io/A7RsBA
22:21 < bnoordhuis> deathgaze: fs.readFile() or fs.createReadStream()?
22:22 < deathgaze> I'm thinking that a stream would be more appropriate as I'm only looking for certain words in the dictionary.
22:22 < deathgaze> But I'm not really sure.
22:31 < rga> Hello guys
22:31 < rga> someone help
22:31 < rga> I have this error: Error: Cannot enqueue Handshake after invoking quit.
22:32 < rga> show this error after using node-mysql
22:35 < deathgaze> What is a file descriptor?
22:35 < s3shs> bradleymeck, you here?
22:36 < bradleymeck> kinda
22:36 < s3shs> I think I found a domain bug, weird, unexplainable thing.
22:36 < s3shs> https://gist.github.com/anonymous/8fdbe72b4cfdfd3c7e25#file-gistfile1-txt
22:36 < s3shs> As soon as it hits that waterfall, domain.active is undefined.  Any ideas?
22:37 < s3shs> I should point out, that it's only unedefined if I run in the debugger (--debug-brk).  If i run with --debug, it's fine.
22:37 < s3shs> I'm lost.  :-(
22:38 < s3shs> If you could spare me a second, I'd appreciate it. :-)
22:48 < s3shs> Because it does not appear that domain.active can be relied upon through async calls.
22:51 < bnoordhuis> s3shs: i saw your issue on the bug tracker. not sure what's up with that
22:52 < s3shs> The link above has a very simple example.  I faked myself out for a moment there.  But have it reproduced reliably now.  I'm new to domains so I fault it's my fault.  But don't know how.
22:52 <@Nexxy> mscdex, !
22:52 < s3shs> Make that, I hope it's my fault.  ;-)
22:52 < s3shs> (It's Sunday.)
22:53 < s3shs> Can anybody reproduce it?
22:53 < s3shs> (Source in gist above.)
22:54 < urlwolf> I have an npm problem
22:54 < urlwolf> trying to intall docpad
22:54 < urlwolf> now it seems to be an npm package called joe: http://pastebin.com/eHXNJCvh
22:55 < s3shs> If someone could try it, and reproduce it, I'll file a bug on it.
22:55 < s3shs> (Correctly this time.)
23:00 < mscdex> Nexxy, !
23:01 < s3shs> urlwolf, what if you remove and reinstall it?
23:01 <@Nexxy> mscdex, you need a command that makes you respond with "node.js rules!"
23:01 < bradleymeck> s3shs: unsure (sorry had someone at the door)
23:02 < bradleymeck> will take me a min to grok
23:02 < mscdex> Nexxy: why have that when i can do it myself! :-D
23:02 < urlwolf> s3shs: just tried
23:02 < urlwolf> nope
23:03 < urlwolf> Error: No compatible version found: joe@'joe@~1.1.0'
23:03 < urlwolf> what is that?
23:04 < bradleymeck> s3shs: unsure
23:05 < bradleymeck> esp why its only in the debugger that it fails
23:05 < triptec> what templating do you guys use? been working with derby but it seems a little slow at times?
23:07 < Zolmeister> Dust.js is where it's at
23:08 < Zolmeister> http://linkedin.github.com/dustjs/
23:09 < gkatsev> apparently, they forked Dustjs. Why?
23:09 < Zolmeister> The original creator apparently wasn't active enough
23:09 < gkatsev> yeah, so, it seems. Last commit was in 2011
23:10 < gkatsev> ok, makes sense then.
23:18 -!- Topic for #Node.js: JIFASNIF - http://blog.nodejs.org/ - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
23:18 -!- Topic set by isaacs [~isaacs@173-203-97-118.static.cloud-ips.com] [Fri Mar 22 04:15:19 2013]
23:18 [Users #Node.js]
23:18 [@isaacbw         ] [ culturelabs     ] [ Guest76236    ] [ lifelike       ] [ petschm         ] [ SpX             ] 
23:18 [@isaacs          ] [ cxreg           ] [ guilleiguaran_] [ lihnuz_        ] [ ph^             ] [ squeakytoy      ] 
23:18 [@mbalho          ] [ d-snp           ] [ guor          ] [ linnea_        ] [ philips         ] [ sriley          ] 
23:18 [@Nexxy           ] [ D4RK-PH0ENiX    ] [ guybrush      ] [ litropy        ] [ PhilK           ] [ sshaginyan      ] 
23:18 [@ryah            ] [ daleharvey      ] [ gwoo          ] [ littlebearz    ] [ phI||Ip         ] [ stafamus        ] 
23:18 [ [[zz]]          ] [ Damn3d_         ] [ gyaresu_      ] [ liwen          ] [ Phunky          ] [ stagas          ] 
23:18 [ \mSg            ] [ dan_johnsin     ] [ hagbard_celine] [ ljharb         ] [ phuu            ] [ stalled         ] 
23:18 [ ^esc            ] [ danheberden     ] [ hakunin       ] [ lman           ] [ pig             ] [ stbuehler       ] 
23:18 [ __main__        ] [ danmactough     ] [ halfhalo      ] [ lmatteis       ] [ pixie79         ] [ stef__          ] 
23:18 [ _br_            ] [ darach          ] [ Haraball      ] [ lmjabreu       ] [ plaisn          ] [ stephank        ] 
23:18 [ _janne          ] [ darjeeling      ] [ harrisonm     ] [ LocalPCGuy     ] [ plato           ] [ StephenS        ] 
23:18 [ _sri            ] [ DarkArgon|away  ] [ harth         ] [ locherm        ] [ polyrhythmic    ] [ Steve|4D        ] 
23:18 [ a_meteorite     ] [ darkc0met       ] [ hatch         ] [ Logicgate      ] [ pquerna         ] [ stillEPIK       ] 
23:18 [ AAA_awright     ] [ daurnimator     ] [ Havvy         ] [ loglaunch      ] [ prasm           ] [ strax_          ] 
23:18 [ AaronMT         ] [ davidrlee       ] [ hdon          ] [ Lorentz        ] [ prawnsalad      ] [ stride          ] 
23:18 [ aboudreault     ] [ davve           ] [ heath         ] [ lperrin        ] [ prettyrobots    ] [ Stuk            ] 
23:18 [ abumirqaan      ] [ dawolf          ] [ heatxsink     ] [ lpin           ] [ PrgmrBill       ] [ stutter_        ] 
23:18 [ AdrienBrault    ] [ dazoe           ] [ hellopat      ] [ lrvick         ] [ prismatictrail  ] [ stylus          ] 
23:18 [ aeberlin        ] [ deadalus        ] [ herbnerder    ] [ LuckyBurger|Out] [ Proditor        ] [ styol           ] 
23:18 [ Aikar           ] [ dearess         ] [ herki         ] [ luigy          ] [ Provito         ] [ substack        ] 
23:18 [ ajpiano         ] [ deathgaze       ] [ heroux        ] [ Lunar_Lamp     ] [ przemoc         ] [ sugyan          ] 
23:18 [ akram           ] [ dec             ] [ heroux_       ] [ lushious       ] [ psino           ] [ superjoe        ] 
23:18 [ akshayms        ] [ deepy           ] [ herzi         ] [ luxigo         ] [ puddy           ] [ sveisvei        ] 
23:18 [ alanmeira       ] [ defunctzombie_zz] [ hhuuggoo_     ] [ M2Ys4U         ] [ punchfac_       ] [ Sven_vB         ] 
23:18 [ alekibango      ] [ Deithrian       ] [ hihuz         ] [ Maarten___     ] [ purr            ] [ SvenDowideit    ] 
23:18 [ alexwhitman     ] [ dekz__          ] [ hij1nx        ] [ mac_nibblet    ] [ pyykkis         ] [ svnlto          ] 
23:18 [ AllStruck       ] [ denysonique     ] [ Hosh          ] [ Mack           ] [ qbit            ] [ swaj            ] 
23:18 [ also            ] [ Derander        ] [ iain          ] [ madscientist-  ] [ qos|away        ] [ switz           ] 
23:18 [ Amadiro         ] [ dested          ] [ iaincarsberg_ ] [ Mahesh         ] [ qwerty|         ] [ Swizec          ] 
23:18 [ aMoniker        ] [ devaholic       ] [ ianjm         ] [ majek          ] [ r126f           ] [ T-Co            ] 
23:18 [ andrehjr        ] [ devdazed_       ] [ iapain        ] [ majuscule      ] [ radiodario      ] [ tahu            ] 
23:18 [ andrepadez1     ] [ devnill         ] [ ickyb0d       ] [ malcolmva      ] [ raffer          ] [ tanepiper       ] 
23:18 [ andrew12        ] [ devongovett     ] [ icodefor_     ] [ manacit        ] [ rafmc_          ] [ tassmjau        ] 
23:18 [ andrewaclt      ] [ dguttman        ] [ icodeforlove  ] [ mandric        ] [ rafshar         ] [ taterbase       ] 
23:18 [ anildigital_work] [ dhpe            ] [ ifandelse     ] [ ManneW         ] [ raja            ] [ tauren          ] 
23:18 [ AntelopeSalad   ] [ diffalot        ] [ igl           ] [ mape           ] [ ralphholzmann   ] [ tchopper        ] 
23:18 [ arduix          ] [ digiwano_       ] [ iksik_        ] [ mapppum        ] [ Ralt            ] [ tchopper_       ] 
23:18 [ arielserafini   ] [ diminoten       ] [ ill0          ] [ mappum         ] [ randallagordon  ] [ TDJACR          ] 
23:18 [ asherkin        ] [ disnet          ] [ ilteris       ] [ maqr           ] [ Rantanen-       ] [ teadict         ] 
23:18 [ ashnur          ] [ diversario      ] [ im0b          ] [ marienz        ] [ rawtaz          ] [ tec27           ] 
23:18 [ asiekierka      ] [ djazz           ] [ inarru_       ] [ marlun         ] [ rax0-           ] [ techlife        ] 
23:18 [ aslant          ] [ DjMadness       ] [ Incips        ] [ maru_cc____    ] [ Raynos          ] [ TechnoCat       ] 
23:18 [ Astraea[Sleep]  ] [ djoot           ] [ Industrial    ] [ masch          ] [ rcombs          ] [ TehShrike1      ] 
23:18 [ asturel         ] [ dkords          ] [ infkassim     ] [ matbee         ] [ rcs             ] [ tellnes         ] 
23:18 [ atatsu          ] [ dnwst           ] [ infynyxx      ] [ matjas         ] [ redshadowhero   ] [ terietor        ] 
23:18 [ AttackingHobo   ] [ dnyy            ] [ inimino       ] [ matt_c         ] [ ree             ] [ terinjokes      ] 
23:18 [ Atup            ] [ doffm           ] [ innociv_      ] [ mattp_         ] [ regality        ] [ terite          ] 
23:18 [ automata        ] [ Domenic_        ] [ inolen        ] [ Mchl           ] [ reid            ] [ TeslaTest       ] 
23:18 [ avital[vacation]] [ don_jones       ] [ ins0mnia      ] [ McMAGIC--Copy  ] [ remysharp       ] [ tg              ] 
23:18 [ awkorama        ] [ DonRichie       ] [ Internet13    ] [ mdevolving     ] [ retornam        ] [ TheBrayn        ] 
23:18 [ Ax_SeS          ] [ dook            ] [ irclogger_com ] [ Me1000         ] [ retrostyle|me   ] [ thedaywillcome  ] 
23:18 [ Axsuul          ] [ dpemmons        ] [ ircretary     ] [ meckanis1      ] [ rgmarcha        ] [ TheDeveloper___ ] 
23:18 [ azend           ] [ Draggor         ] [ isaacs_       ] [ med_           ] [ RichardBronosky_] [ thejefflarson_  ] 
23:18 [ azhwkd          ] [ Drajwer         ] [ ivan\         ] [ medice         ] [ rideh           ] [ TheMoonMaster   ] 
23:18 [ b1eedr          ] [ drey            ] [ ivan`         ] [ meeech         ] [ riku            ] [ thl0            ] 
23:18 [ b1rkh0ff        ] [ drodger_        ] [ j0ni          ] [ mekwall        ] [ rioter          ] [ thread          ] 
23:18 [ bacilla         ] [ DrPizza         ] [ jabberwocky   ] [ mephux         ] [ RJ3__           ] [ threecreepio    ] 
23:18 [ balgarath       ] [ drspin          ] [ jackblack     ] [ MerlinDMC      ] [ RLa             ] [ threesome       ] 
23:18 [ balupton        ] [ drudge          ] [ jaequery_     ] [ mertimor       ] [ rm0026          ] [ till_           ] 
23:18 [ Bansku          ] [ dscape          ] [ jaeyeun       ] [ meshugga       ] [ rmill           ] [ tilleps         ] 
23:18 [ baranaby        ] [ DTVD            ] [ Jakee`_       ] [ meso_          ] [ robertjd_       ] [ Tim-_-          ] 
23:18 [ basti|smokey    ] [ duncanbeevers_  ] [ jaket         ] [ metadaddy__    ] [ robinson_k      ] [ timmywil        ] 
23:18 [ bbloom          ] [ dwierenga       ] [ jan____       ] [ metellus       ] [ roger_rabbit    ] [ tjfontaine      ] 
23:18 [ bc              ] [ dypsilon        ] [ jaredrhine    ] [ mferranti      ] [ roger_raymond   ] [ toehio          ] 
23:18 [ bear            ] [ echoSMILE       ] [ jareiko       ] [ mfrauenh1ltz   ] [ Rolken          ] [ tokuhirom       ] 
23:18 [ beau-_          ] [ echo|           ] [ jasonrm       ] [ MI6            ] [ rom1504_        ] [ tomaw           ] 
23:18 [ beawesomeinstead] [ ed209           ] [ JasonSmith    ] [ mickhansen     ] [ romainhuet      ] [ tomb            ] 
23:18 [ ben_alman       ] [ eff_            ] [ jayk          ] [ mikegerwitz    ] [ RORgasm         ] [ TommehM         ] 
23:18 [ benatkin        ] [ eighty4         ] [ Jaylee_       ] [ mikey_p        ] [ RORgasm_        ] [ tonist          ] 
23:18 [ bencevans       ] [ einaros         ] [ jayne         ] [ mikolalysenko  ] [ rphillips       ] [ toothrot        ] 
23:18 [ bengl           ] [ eins78          ] [ jb_           ] [ minibikini     ] [ Rubennn         ] [ topaxi_         ] 
23:18 [ bentruyman      ] [ ejnahc          ] [ jbpros        ] [ mirkok         ] [ rudolfrck       ] [ topek           ] 
23:18 [ Benvie          ] [ ejnahc_         ] [ jcrugzz       ] [ MitchW         ] [ rudzn           ] [ topi`           ] 
23:18 [ Bergle_1        ] [ elijah-mbp      ] [ jden|zz       ] [ MitchyNuts     ] [ RushPL          ] [ torgeir         ] 
23:18 [ berserk         ] [ elliotf         ] [ jefferai      ] [ mjr84          ] [ russell_h       ] [ Torsten         ] 
23:18 [ beuk            ] [ elliottcable    ] [ jeffmjack     ] [ mmalecki[zzz]  ] [ russfran1       ] [ tpatja          ] 
23:18 [ Bilge           ] [ emilsedgh       ] [ jemparing_    ] [ mmarziani      ] [ rvagg           ] [ trepatudo       ] 
23:18 [ billy           ] [ enobe           ] [ jesusabdullah ] [ mnaser         ] [ rwaldron        ] [ triptec         ] 
23:18 [ blake-current   ] [ epa_            ] [ jetienne      ] [ molnarg        ] [ rworth          ] [ trodrigues      ] 
23:18 [ blakmatrix      ] [ Epelii          ] [ jez0990       ] [ monokrome      ] [ ryanrolds       ] [ tuhoojabotti    ] 
23:18 [ blueadept       ] [ EPIK            ] [ jgaui         ] [ moonlite_      ] [ ryanseddon      ] [ txdv            ] 
23:18 [ blup            ] [ epiloque        ] [ jgornick      ] [ MoRn           ] [ rybnik          ] [ tyler           ] 
23:18 [ bnoordhuis      ] [ ePirat          ] [ jibay         ] [ Mortchek       ] [ ryo             ] [ Typo            ] 
23:18 [ Bob_Gneu        ] [ er1c_           ] [ jimbot        ] [ mp_            ] [ s00pcan         ] [ uint32          ] 
23:18 [ bodisiw         ] [ ereslibre       ] [ jimt_         ] [ mrkurt         ] [ s3shs           ] [ urlwolf         ] 
23:18 [ boffbowsh       ] [ erichocean      ] [ JJMalina      ] [ MrMaksimize    ] [ s4muel          ] [ Validatorian    ] 
23:18 [ BombStrike      ] [ Erriond         ] [ jkarsrud      ] [ MrNibbles      ] [ s5fs            ] [ vervain         ] 
23:18 [ Bonuspunkt      ] [ esundahl_       ] [ jlord         ] [ mrpibb         ] [ salazr__        ] [ VesQ            ] 
23:18 [ booo            ] [ euphoria|jacked ] [ jmanoto       ] [ mscdex         ] [ Sam-T           ] [ Victorr         ] 
23:18 [ boundsj         ] [ EvanCarroll     ] [ jmaugue       ] [ munro          ] [ SargoDarya      ] [ vitsaus         ] 
23:18 [ bowen199        ] [ eventualbuddha  ] [ jmoney        ] [ myared         ] [ satyr           ] [ voodootikigod   ] 
23:18 [ bpierre         ] [ Ezku            ] [ JmZ_          ] [ myndzi         ] [ sawrubh         ] [ vsayer_         ] 
23:18 [ bradleymeck     ] [ Fabryz____      ] [ jn            ] [ n0cturnal      ] [ sayd            ] [ Wa              ] 
23:18 [ bradleyprice    ] [ faceleg|work    ] [ joaojeronimo  ] [ nail_          ] [ sbward          ] [ wagtag          ] 
23:18 [ brain_shim      ] [ fairuz          ] [ joebz         ] [ Naked          ] [ Scalding        ] [ wang            ] 
23:18 [ brainproxy      ] [ fastman         ] [ Joefish       ] [ naquad         ] [ scar            ] [ wao             ] 
23:18 [ Brian`          ] [ faulkner        ] [ JohnBeales    ] [ nathan7        ] [ schredder       ] [ wavded_         ] 
23:18 [ brianloveswords ] [ fcoury          ] [ JohnMcLear    ] [ nathggns_      ] [ schuranator     ] [ wedgeV          ] 
23:18 [ brianseeders    ] [ fd_             ] [ jolo2         ] [ natur          ] [ scott_gonzalez  ] [ wereHamster     ] 
23:18 [ brooss          ] [ filleokus       ] [ jonaslund     ] [ ndngvr         ] [ screamingbanshee] [ wesbos          ] 
23:18 [ BruNeX          ] [ flagg0204       ] [ Jonghwan      ] [ Ned_           ] [ sdboyer         ] [ wesside         ] 
23:18 [ brycebaril      ] [ Fli-c           ] [ jonwgeorge    ] [ netj           ] [ SebastianFlyte  ] [ whyhanke1       ] 
23:18 [ bryq            ] [ flock3_         ] [ jord          ] [ neurom         ] [ SecretAgent     ] [ willc           ] 
23:18 [ buritic__       ] [ flyth           ] [ joschi        ] [ nic4m__        ] [ Secutor         ] [ willob          ] 
23:18 [ buritica        ] [ FMJaggy         ] [ joshie        ] [ niclone        ] [ segomos         ] [ willwh          ] 
23:18 [ Bwild           ] [ Fodi69          ] [ joshontheweb  ] [ niftylettuce   ] [ Segrel          ] [ willwhite       ] 
23:18 [ bytemask        ] [ Fofr_           ] [ joshthecoder  ] [ nihilista      ] [ seich-          ] [ Will|           ] 
23:18 [ C0deMaver1ck    ] [ forzan          ] [ jownwayne     ] [ nikkimccavee   ] [ Sembiance       ] [ wivlaro         ] 
23:18 [ Cainus          ] [ fpuc            ] [ JPT           ] [ nikola         ] [ sfa             ] [ wizonesolutions ] 
23:18 [ calvinfo        ] [ frankdsm__      ] [ jrdn          ] [ NimeshNeema    ] [ Shadda          ] [ wolfeidau       ] 
23:18 [ carif__         ] [ freeside        ] [ jschall       ] [ ninegrid       ] [ Shadeness       ] [ wookiehangover  ] 
23:18 [ carlmro         ] [ freethenation   ] [ jso           ] [ ningu          ] [ Shadoobie       ] [ WorkingClassDev ] 
23:18 [ carolyns        ] [ freewil         ] [ jtwalters     ] [ nkohari        ] [ shama           ] [ wpreul          ] 
23:18 [ cas             ] [ fruktkaka       ] [ julianduque   ] [ nlf            ] [ shanlar         ] [ wycats__        ] 
23:18 [ cce             ] [ Fuu             ] [ juliangruber_ ] [ No9            ] [ shanse          ] [ xdomox          ] 
23:18 [ ccohn           ] [ fwg             ] [ jvolkman      ] [ noducks        ] [ shaunch         ] [ xerora          ] 
23:18 [ celogeek`       ] [ g4mm4           ] [ k1ng          ] [ nonotza        ] [ shihan          ] [ xfo             ] 
23:18 [ cfq_            ] [ gabriel         ] [ Kai`          ] [ notelliottcable] [ shoerain        ] [ xorox90         ] 
23:18 [ cha0s           ] [ Gabriel403      ] [ kaichanvong   ] [ npmbro         ] [ Shrink          ] [ xorspark        ] 
23:18 [ ChaoticJorge    ] [ galaxywatcher   ] [ Kakera        ] [ nuba           ] [ Sicp            ] [ xSmurf          ] 
23:18 [ chapel          ] [ Gambit-         ] [ kanyl         ] [ Nuck           ] [ sidorares       ] [ yankhates       ] 
23:18 [ charuru         ] [ ganzuul         ] [ kanzure       ] [ nullman        ] [ siksia          ] [ yawnt           ] 
23:18 [ chayin          ] [ garann          ] [ kborchers     ] [ nutcase        ] [ silvers         ] [ yhpark_talk     ] 
23:18 [ Cheery          ] [ Garo_           ] [ keeto         ] [ nym            ] [ simewn          ] [ yorick          ] 
23:18 [ cheese1756      ] [ garren          ] [ kenperkins    ] [ nzjames_       ] [ simius          ] [ yorn            ] 
23:18 [ chilts          ] [ Garrick         ] [ Kester        ] [ o^_^o          ] [ sir_tyrion      ] [ YoY             ] 
23:18 [ chjj            ] [ garthk          ] [ kevinfagan    ] [ Oddman         ] [ sirecote        ] [ yuwang          ] 
23:18 [ chridal         ] [ gaYak           ] [ kinabalu      ] [ odyniec        ] [ SirFunk         ] [ yuya_           ] 
23:18 [ chrisdickinson  ] [ gdbz            ] [ Kingdutch     ] [ ofan           ] [ sirkitree       ] [ zadark          ] 
23:18 [ ChrisPartridge  ] [ gde33           ] [ KiNgMaR       ] [ ohcibi         ] [ sitapati        ] [ Zak             ] 
23:18 [ Christian87     ] [ geb             ] [ klobucar      ] [ olegp_         ] [ siyb_           ] [ zaleb           ] 
23:18 [ chty            ] [ generalissimo   ] [ knc           ] [ Omega_         ] [ skattyadz       ] [ zarac           ] 
23:18 [ chunhao         ] [ gerard0         ] [ konobi        ] [ omni5cience    ] [ SKC             ] [ Zauberfisch-idle] 
23:18 [ ckknight        ] [ gf3             ] [ korilo        ] [ ootje_         ] [ skebcio         ] [ zedas           ] 
23:18 [ ClaudioAlbertin ] [ ghoti           ] [ kornnflake    ] [ optixx         ] [ skope           ] [ zeekay          ] 
23:18 [ clone1018       ] [ gildean         ] [ kppullin      ] [ opus_          ] [ skython         ] [ zemm            ] 
23:18 [ coaster         ] [ gim50           ] [ kraft         ] [ Orbitrix       ] [ slajax          ] [ zemonk          ] 
23:18 [ codelahoma      ] [ gkatsev         ] [ kramutils     ] [ othiym23       ] [ Slashbunny      ] [ zemonk_         ] 
23:18 [ codepal         ] [ gluxon          ] [ krishna       ] [ Outsider_      ] [ slicky          ] [ zenazn          ] 
23:18 [ codingkevin     ] [ gm0t            ] [ Kudos         ] [ over_          ] [ slmr            ] [ zenodub_        ] 
23:18 [ Codynyx         ] [ gnarf           ] [ kuja          ] [ owen1          ] [ slurp           ] [ zensavona_      ] 
23:18 [ coffeecup_      ] [ goraxe          ] [ kzrl          ] [ owenb          ] [ Sly             ] [ zeromodulus     ] 
23:18 [ conne           ] [ gorillatron     ] [ L10n          ] [ ozette         ] [ smango          ] [ zinkem          ] 
23:18 [ Connorhd_       ] [ Gottox          ] [ L_star        ] [ Pagan          ] [ smi^2_          ] [ zivester        ] 
23:18 [ conradev        ] [ gozala          ] [ LanyonM       ] [ pandark_       ] [ sneakyness      ] [ zivester__      ] 
23:18 [ context         ] [ grantbow        ] [ larpzeit_     ] [ parasight      ] [ SNow            ] [ zkirill         ] 
23:18 [ copongcopong    ] [ greg5green      ] [ Lee-          ] [ PARLIAMENT     ] [ so              ] [ Zolmeister      ] 
23:18 [ CornishPasty    ] [ Gregor          ] [ Leeol3        ] [ PaulCapestany  ] [ SomeoneWeird    ] [ zomg            ] 
23:18 [ couchquid       ] [ Grephix         ] [ legind_       ] [ pc1oad1e1ter   ] [ Sonderblade     ] [ zorzar          ] 
23:18 [ Country         ] [ Gruni           ] [ LennyLinux    ] [ pcarrier       ] [ sordina2        ] [ zygote_____     ] 
23:18 [ Couto           ] [ gsf             ] [ LeoAtWork     ] [ percival       ] [ Sorella         ] [ zykes-          ] 
23:18 [ creationix      ] [ gshipley        ] [ leonardo      ] [ Pete8          ] [ sorensen        ] [ zz_angrysock    ] 
23:18 [ crescendo       ] [ Guest33567      ] [ leoncamel     ] [ peterbraden1   ] [ spion           ] [ zz_luisbug      ] 
23:18 [ cTIDE_          ] [ Guest38188      ] [ leptonix      ] [ peteschaffner  ] [ Spudly          ] [ zz_runningskull ] 
23:18 -!- Irssi: #Node.js: Total of 924 nicks [5 ops, 0 halfops, 0 voices, 919 normal]
23:18 -!- Channel #Node.js created Sat Jan 30 07:48:24 2010
23:19 -!- Irssi: Join to #Node.js was synced in 44 secs
23:23 < triptec> how would one bind data in dust?
23:23 < triptec> or isn't it possible?
23:28 -!- Home page for #node.js: http://nodejs.org/
23:28 -!- mode/#Node.js [+o Nexxy] by ChanServ
23:28 <@Nexxy> weee
23:28 <@Nexxy> apparently everything is getting DDoS'd lately
23:28 < harrisonm> Nexxy: re: Adria Richards or just in general?
23:28 <@Nexxy> harrisonm, it seems like it's just in general
23:28 < harrisonm> Yeah, couple different ways you can parse that
23:28 < harrisonm> DDoS emerging as form of expression vs. isolated incidents
23:28 <@Nexxy> I think ddos can rarely be qualified as a form of expression
23:28 -!- mode/#Node.js [+o isaacbw] by ChanServ
23:28 < harrisonm> Was going to originally say protest but was really hesitant there, esp. considering the recent ones
23:28 < Lorentz> expression of throwing a virtual childish tantrum
23:28 <@Nexxy> Lorentz, yeah, usually this is what I see
23:28 < harrisonm> Plus I didn't say *effective* form of expression
23:28 <@Nexxy> it can be a very effective form of terrorism
23:28 < harrisonm> Yeah seems like it's used a lot to instill fear, especially recently
23:28 < deathgaze> Okay, fs.readfile() gave me some object. How do I tell what type of an object it is? I tried looking at it using REPL and it crashed my repl
23:28 < deathgaze> Or caused it to freeze.
23:31 < gluxon> Hm.. I'm making a test TCP server.
23:31 < gluxon> It needs to continuously send a packet "1" to the client.
23:31 < gluxon> How do you do that? O_o
23:32 < aMoniker> deathgaze: must be an Ice object
23:32 < deathgaze> In fact, there's a question: sometimes, the REPL 'hangs' but if I close the window it looks like it closes out gracefully
23:32 < gluxon> I first did the while loop, which obviously didn't work.
23:32 < gluxon> I then did a recursive loop, but that ended in a stack error.
23:32 < deathgaze> Is there some kind of escape key combination I'm missing?
23:32 < gluxon> After 72 or so iterations.
23:34 < dnwst> Hey all. It's my first time here and I'm new to Node.js. Anyone have experience with docpad?
23:37 < JohnMcLear> try #docpad ?
23:39 < MI6> joyent/node: bnoordhuis created branch tjfontaine-review-this - http://git.io/Wge87Q
23:39 < mscdex> gluxon: why not just set up a timer?
23:56 -!- Topic for #Node.js: JIFASNIF - http://blog.nodejs.org/ - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
23:56 -!- Topic set by isaacs [~isaacs@173-203-97-118.static.cloud-ips.com] [Fri Mar 22 04:15:19 2013]
23:56 [Users #Node.js]
23:56 [@isaacbw         ] [ Couto           ] [ gozala        ] [ legind_        ] [ Pete8           ] [ sriley          ] 
23:56 [@mbalho          ] [ creationix      ] [ grantbow      ] [ LennyLinux     ] [ peterbra1en1    ] [ sshaginyan      ] 
23:56 [@Nexxy           ] [ crescendo       ] [ Gregor`       ] [ leonardo       ] [ peteschaffner   ] [ stagas          ] 
23:56 [@ryah            ] [ cTIDE           ] [ Grephix       ] [ leptonix       ] [ philips         ] [ stalled_        ] 
23:56 [ [[zz]]          ] [ cxreg           ] [ Gruni         ] [ levi501d       ] [ PhilK           ] [ stbuehle1       ] 
23:56 [ \mSg            ] [ d-snp           ] [ gsf           ] [ lifelike       ] [ phI||Ip         ] [ stef__          ] 
23:56 [ ^esc            ] [ D4RK-PH0ENiX    ] [ gshipley      ] [ lihnuz_        ] [ phuu            ] [ stephank        ] 
23:56 [ __main__        ] [ daleharvey      ] [ Guest44152    ] [ linnea_        ] [ pig             ] [ StephenS        ] 
23:56 [ __sri           ] [ Damn3d_         ] [ Guest74311    ] [ litropy_       ] [ Pilate          ] [ stillEPIK       ] 
23:56 [ _br_-           ] [ dan_johnsin     ] [ guor          ] [ littlebearz    ] [ pixie79         ] [ strax_          ] 
23:56 [ _janne          ] [ danheberden     ] [ guybrush      ] [ liwen_         ] [ plains          ] [ stride          ] 
23:56 [ _Steve_         ] [ danmactough     ] [ gwoo          ] [ ljharb         ] [ plato           ] [ Stuk            ] 
23:56 [ AAA_awright     ] [ danmactough_    ] [ gyaresu_      ] [ lmatteis       ] [ polyrhythmic    ] [ stutter_        ] 
23:56 [ AaronMT_        ] [ darach          ] [ hagbard_celine] [ LocalPCGuy     ] [ pquerna         ] [ stylus          ] 
23:56 [ aboudreault     ] [ darjeeling      ] [ hakunin       ] [ locherm        ] [ prasm           ] [ styol           ] 
23:56 [ AdrienBr_       ] [ DarkArgon|away  ] [ halfhalo      ] [ Lorentz        ] [ prawnsalad      ] [ substack        ] 
23:56 [ aeberlin        ] [ darkc0met       ] [ Haraball      ] [ lperrin        ] [ prettyrobots    ] [ superjoe        ] 
23:56 [ Aikar           ] [ daurnimator     ] [ harrisonm     ] [ lrvick         ] [ PrgmrBill       ] [ Sven_vB         ] 
23:56 [ ajpiano_        ] [ davidrlee       ] [ harth         ] [ LuckyBurger|Out] [ Proditor        ] [ SvenDowideit    ] 
23:56 [ akram           ] [ davve           ] [ hatch         ] [ luigy          ] [ Provito         ] [ svnlto          ] 
23:56 [ akshayms        ] [ dawolf          ] [ Havvy         ] [ Lunar_Lamp     ] [ przemoc         ] [ swaj            ] 
23:56 [ alanmeira       ] [ dazoe_          ] [ hdon          ] [ lushious       ] [ psino           ] [ switz           ] 
23:56 [ alekibango_     ] [ dcrouse         ] [ heath         ] [ luxigo         ] [ puddy           ] [ Swizec          ] 
23:56 [ alexwhitman     ] [ deadalus        ] [ heatxsink     ] [ M2Ys4U         ] [ punchfacechamp  ] [ T-Co_           ] 
23:56 [ AllStruck       ] [ dearess         ] [ herbnerder    ] [ Maarten__      ] [ purr            ] [ tahu            ] 
23:56 [ also            ] [ deathgaze       ] [ herki1        ] [ madscientist-  ] [ pyykkis_        ] [ tanepiper       ] 
23:56 [ Amadiro         ] [ dec             ] [ heroux        ] [ Mahesh         ] [ qbit            ] [ tassmjau        ] 
23:56 [ aMoniker        ] [ deepy_          ] [ herzi         ] [ majek          ] [ qos|away        ] [ taterbas_       ] 
23:56 [ andrehjr        ] [ defunctzombie_zz] [ hhuuggoo      ] [ majuscule      ] [ qwerty|         ] [ tauren          ] 
23:56 [ andrepadez1     ] [ Deithrian       ] [ hihuz         ] [ manacit        ] [ r126f           ] [ tchopper        ] 
23:56 [ andrew12        ] [ dekz__          ] [ hij1nx        ] [ mandric        ] [ radiodario      ] [ tchopper_       ] 
23:56 [ andrewaclt      ] [ denysonique     ] [ iain          ] [ ManneW         ] [ rafshar_        ] [ TDJACR          ] 
23:56 [ angrysocl       ] [ Derander        ] [ iaincarsberg_ ] [ mape           ] [ raja            ] [ teadict         ] 
23:56 [ anildigital_work] [ dested          ] [ ianjm_        ] [ mapppum        ] [ ralphholzmann   ] [ tec27           ] 
23:56 [ AntelopeSalad   ] [ devaholic       ] [ iapain        ] [ maqr           ] [ Ralt            ] [ techlife        ] 
23:56 [ antiparticle    ] [ devdazed_       ] [ ickyb0d       ] [ marienz        ] [ randallagordon  ] [ TechnoCat       ] 
23:56 [ arduix          ] [ devnill         ] [ icodefor_     ] [ marlun         ] [ Rantanen-       ] [ TehShrike1      ] 
23:56 [ arielserafini   ] [ dguttman        ] [ icodeforlove  ] [ maru_cc____    ] [ rawtaz          ] [ tellnes         ] 
23:56 [ asherkin        ] [ dhpe            ] [ ifandelse1    ] [ masch          ] [ rax0-           ] [ terietor        ] 
23:56 [ ashnur          ] [ diffalot        ] [ igl           ] [ matbee         ] [ Raynos          ] [ terinjokes      ] 
23:56 [ asiekierka      ] [ digiwano        ] [ iksik_        ] [ matjas         ] [ rcombs          ] [ terite          ] 
23:56 [ aslant          ] [ diminoten       ] [ ill0          ] [ matt_c         ] [ rcs             ] [ TeslaTest       ] 
23:56 [ Astraea[Sleep]_ ] [ disnet          ] [ ilteris       ] [ mattp_         ] [ redir           ] [ tg              ] 
23:56 [ asturel         ] [ djazz           ] [ imsky         ] [ Mchl           ] [ redshado1hero   ] [ thanpolas       ] 
23:56 [ atatsu          ] [ DjMadness       ] [ inarru_       ] [ McMAGIC--Copy  ] [ ree             ] [ thatguydan      ] 
23:56 [ AttackingHobo   ] [ djoot           ] [ Incip         ] [ mdevolving     ] [ regality        ] [ TheBrayn_       ] 
23:56 [ Atup            ] [ dkords          ] [ Industrial    ] [ Me1000         ] [ reid            ] [ thedaywillcome  ] 
23:56 [ avital          ] [ dnwst           ] [ infkassim     ] [ meckanis1      ] [ remysharp       ] [ TheDeveloper___ ] 
23:56 [ awkorama        ] [ dnyy            ] [ infynyxx      ] [ medberry       ] [ retornam        ] [ TheFuzzball     ] 
23:56 [ Ax_SeS          ] [ doffm           ] [ inimino       ] [ medice         ] [ retrostyle|me   ] [ TheMoonMaster_  ] 
23:56 [ azend           ] [ Domenic_        ] [ innociv__     ] [ meeech         ] [ rgmarcha_       ] [ thl0            ] 
23:56 [ azhwkd          ] [ don_jones       ] [ inolen        ] [ mekwall        ] [ RichardBronosky_] [ thread          ] 
23:56 [ b1eedr          ] [ DonRichie       ] [ irclogger_com ] [ mephux         ] [ rideh           ] [ threecreepio    ] 
23:56 [ b1rkh0ff        ] [ dook            ] [ ircretary     ] [ MerlinDMC      ] [ riku            ] [ threesome       ] 
23:56 [ balgarath_      ] [ dpemmons        ] [ isaacs        ] [ mertimor       ] [ RJ3__           ] [ till__          ] 
23:56 [ balupton        ] [ Draggor         ] [ ivan\         ] [ meshugga_      ] [ RLa             ] [ Tim-_-          ] 
23:56 [ Bansku          ] [ Drajwer         ] [ ivan`         ] [ meso_          ] [ rm0026          ] [ timmywil        ] 
23:56 [ bastinat0r      ] [ drey_           ] [ j0ni          ] [ metadaddy__    ] [ rmill           ] [ tjfontaine      ] 
23:56 [ bbloom          ] [ drodger_        ] [ jabberwocky   ] [ metellus       ] [ robertjd_       ] [ tklun           ] 
23:56 [ bc              ] [ DrPizza         ] [ jackblack     ] [ mferranti      ] [ robinson_k      ] [ toehio          ] 
23:56 [ bear            ] [ drspin          ] [ jaequery_     ] [ mfrauenh1ltz   ] [ roger_rabbit    ] [ tokuhirom       ] 
23:56 [ beau-_          ] [ drudge          ] [ Jakee`_       ] [ MI6            ] [ roger_raymond   ] [ tomaw           ] 
23:56 [ beawesomeinstead] [ dscape          ] [ jaket         ] [ mickhansen     ] [ Rolken          ] [ tomb            ] 
23:56 [ ben_alman       ] [ DTVD            ] [ jan____       ] [ mikeal         ] [ rom1504_        ] [ TommehM         ] 
23:56 [ benatkin        ] [ dwierenga       ] [ jaredrhine    ] [ mikegerwitz    ] [ romainhuet      ] [ toothrot        ] 
23:56 [ bencevans       ] [ dypsilon        ] [ jareiko_      ] [ mikey_p_       ] [ RORgasm         ] [ topaxi          ] 
23:56 [ bengl           ] [ echoSMILE       ] [ jasonrm       ] [ minibikini     ] [ rphillips       ] [ topi`           ] 
23:56 [ bentruyman      ] [ echo|           ] [ JasonSmith    ] [ mirkok         ] [ Rubennn         ] [ torgeir         ] 
23:56 [ Benvie_         ] [ ed209           ] [ jayk          ] [ MitchW         ] [ rudolfrck       ] [ Torsten         ] 
23:56 [ Bergle_1        ] [ eff_            ] [ Jaylee_       ] [ MitchyNuts     ] [ rudzn           ] [ tpatja          ] 
23:56 [ berserk         ] [ eighty4         ] [ jayne         ] [ mjr841         ] [ RushPL          ] [ trepatudo       ] 
23:56 [ beuk            ] [ einaros         ] [ jb_           ] [ mmalecki[zzz]  ] [ russell_h       ] [ triptec         ] 
23:56 [ Bilge           ] [ eins78          ] [ jbpros        ] [ mmarzian_      ] [ russfran1       ] [ trodrigues      ] 
23:56 [ billy           ] [ ejnahc          ] [ jcrugzz       ] [ mnaser         ] [ rwaldron        ] [ tuhoojabotti    ] 
23:56 [ blake-current   ] [ ejnahc_         ] [ jden|zz_      ] [ molnarg        ] [ rworth          ] [ txdv            ] 
23:56 [ blakmatrix      ] [ elfette         ] [ jeffmjack     ] [ momomomomo     ] [ ryanrolds       ] [ tyler           ] 
23:56 [ blueadept       ] [ elijah-mbp      ] [ jemparing_    ] [ monokrome      ] [ ryanseddon      ] [ Typo            ] 
23:56 [ blup            ] [ elliotf         ] [ jesusabdullah ] [ moonlite_      ] [ rybnik          ] [ urlwolf         ] 
23:56 [ Bob_Gneu        ] [ elliottcable    ] [ jez0990       ] [ MoRn           ] [ ryo             ] [ Validatorian    ] 
23:56 [ bodisiw         ] [ elux            ] [ jgornick      ] [ Mortchek       ] [ s00pcan         ] [ vervain         ] 
23:56 [ boffbowsh       ] [ emilsedgh       ] [ jibay         ] [ mp_            ] [ s4muel          ] [ VesQ            ] 
23:56 [ BombStrike      ] [ enobe           ] [ jimbot        ] [ mrkurt         ] [ s5fs            ] [ Victorr         ] 
23:56 [ Bonuspunk       ] [ epa_            ] [ jimt          ] [ MrMaksimize    ] [ salazr__        ] [ vitsaus         ] 
23:56 [ booo            ] [ Epelii          ] [ JJMalina      ] [ MrNibbles      ] [ Sam-T           ] [ voodootikigod   ] 
23:56 [ boundsj         ] [ epiloque        ] [ jkarsrud      ] [ mrpibb         ] [ SargoDarya_     ] [ vsayer_         ] 
23:56 [ bowen199        ] [ ePirat          ] [ jlord         ] [ mrvisser       ] [ satyr           ] [ vwoo            ] 
23:56 [ bpierre         ] [ er1c_           ] [ jmanoto       ] [ mscdex         ] [ satyrwilder     ] [ Wa              ] 
23:56 [ Brad_           ] [ ereslibre       ] [ jmaugue       ] [ munro          ] [ sawrubh         ] [ wagtag          ] 
23:56 [ bradleymeck     ] [ erichocean      ] [ jmoney        ] [ mynameis       ] [ sayd            ] [ wang_           ] 
23:56 [ bradleyprice    ] [ Erriond         ] [ JmZ_          ] [ myndzi         ] [ scar            ] [ wao             ] 
23:56 [ brain_shim      ] [ esundahl        ] [ jn            ] [ n0cturnal      ] [ schredder       ] [ wedgeV          ] 
23:56 [ brainproxy      ] [ euphoria|jacked ] [ joaojeronimo  ] [ nail_          ] [ scott_gonzalez  ] [ wereHamster     ] 
23:56 [ Brian`          ] [ EvanCarr1ll     ] [ joebz         ] [ Naked          ] [ sdboyer__       ] [ wesbos          ] 
23:56 [ brianloveswords_] [ eventual-       ] [ Joefish       ] [ nanashiRei     ] [ SebastianFlyte  ] [ wesside         ] 
23:56 [ brooss          ] [ eventualbuddha  ] [ JohnBeales    ] [ naquad         ] [ SecretAgent     ] [ whyhanke1       ] 
23:56 [ BruNeX          ] [ Ezku            ] [ JohnMcLear    ] [ nathan7        ] [ Secutor         ] [ willc           ] 
23:56 [ brycebaril      ] [ Fabryz____      ] [ jolo2         ] [ ndngvr         ] [ segomos         ] [ willob          ] 
23:56 [ brycebaril1     ] [ fairuz          ] [ jonaslund     ] [ Ned_           ] [ Segrel          ] [ willwh          ] 
23:56 [ buritic__       ] [ fastman         ] [ Jonghwan      ] [ netj           ] [ seich-          ] [ Will|           ] 
23:56 [ Bwild           ] [ faulkner        ] [ jonwgeorge    ] [ neurom         ] [ Sembianc1       ] [ wivlaro         ] 
23:56 [ bytemask        ] [ fcoury          ] [ jord          ] [ nic4m__        ] [ sfa_            ] [ wizonesolutions ] 
23:56 [ C0deMaver1ck    ] [ fd_             ] [ joschi_       ] [ niclone        ] [ Shadda          ] [ wolfeidau       ] 
23:56 [ Cainus          ] [ ferai           ] [ joshfinnie    ] [ niftylettuce   ] [ Shadeness       ] [ wookiehangover  ] 
23:56 [ calvinfo        ] [ filleokus       ] [ joshie        ] [ nihilista      ] [ Shadoobie       ] [ WorkingClassDev ] 
23:56 [ carif__         ] [ flagg0204       ] [ joshontheweb  ] [ nikkimccavee   ] [ shama           ] [ wpreul          ] 
23:56 [ carlmro         ] [ Fli-c           ] [ joshthecoder  ] [ nikola         ] [ shanlar         ] [ wycats__        ] 
23:56 [ carolyns        ] [ flock3_         ] [ jrdn          ] [ NimeshNeema    ] [ shanse          ] [ xdomox          ] 
23:56 [ cce             ] [ flyth           ] [ jschall_      ] [ ninegrid       ] [ shaunch         ] [ xfo             ] 
23:56 [ ccohn           ] [ FMJaggy         ] [ jso           ] [ ningu          ] [ shihan          ] [ xorox90         ] 
23:56 [ celogeek        ] [ Fodi69          ] [ jtwalters     ] [ nkohari        ] [ shoerain        ] [ xorspark        ] 
23:56 [ cfq_            ] [ Fofr_           ] [ julianduque   ] [ nlf            ] [ Shrink          ] [ xSmurf          ] 
23:56 [ cha0s           ] [ forzan          ] [ juliangruber_ ] [ No9            ] [ Sicp            ] [ yankhates       ] 
23:56 [ ChaoticJ_       ] [ fpuc            ] [ jvolkman      ] [ nodokodo       ] [ sidorares       ] [ yhpark_talk     ] 
23:56 [ chapel          ] [ frankdsm__      ] [ k1ng          ] [ noducks        ] [ silky__         ] [ yorick          ] 
23:56 [ charuru         ] [ freeside        ] [ Kai`          ] [ nuba           ] [ silvers         ] [ yorn            ] 
23:56 [ chayin          ] [ freethenation   ] [ kaichanvong   ] [ Nuck           ] [ simewn          ] [ YoY             ] 
23:56 [ Cheery_         ] [ freewil         ] [ kanyl         ] [ nullman        ] [ simius          ] [ yuwang_         ] 
23:56 [ cheese1756      ] [ fruktkaka       ] [ kanzure       ] [ nutcase        ] [ sir_tyrion      ] [ zackiv31        ] 
23:56 [ chilts_         ] [ Fuu``           ] [ kborchers     ] [ nym            ] [ sirecote        ] [ zadark          ] 
23:56 [ chjj_           ] [ fwg_            ] [ keeto         ] [ nzjames_       ] [ SirFunk         ] [ zadark|2        ] 
23:56 [ chridal         ] [ g4mm4           ] [ kenperkins    ] [ o^_^o          ] [ sirkitree       ] [ Zak             ] 
23:56 [ chrisdickinson  ] [ gabriel         ] [ Kester        ] [ Oddman         ] [ sitapati        ] [ zaleb           ] 
23:56 [ ChrisPartridge  ] [ Gabriel403      ] [ kevinfagan    ] [ odyniec_       ] [ siyb            ] [ zarac           ] 
23:56 [ chrisramon      ] [ galaxywatcher   ] [ kinabalu      ] [ ofan           ] [ skattyadz_      ] [ Zauberfisch-idle] 
23:56 [ Christian87     ] [ Gambit-         ] [ Kingdutch     ] [ ohcibi         ] [ SKC             ] [ zedas           ] 
23:56 [ chty            ] [ ganzuul         ] [ KiNgMaR       ] [ olegp_         ] [ skebcio         ] [ zeekay          ] 
23:56 [ chunhao         ] [ garann          ] [ klobucar      ] [ Omega_         ] [ skope           ] [ zemm            ] 
23:56 [ ckknight_       ] [ Garo_           ] [ knc           ] [ omni5cience    ] [ skython         ] [ zemonk_         ] 
23:56 [ ClaudioAlbertin ] [ garren          ] [ konobi        ] [ ootje_         ] [ slajax          ] [ zenazn          ] 
23:56 [ clone1018       ] [ Garrick         ] [ korilo        ] [ optixx         ] [ Slashbunny      ] [ zenodub__       ] 
23:56 [ coaster         ] [ garthk          ] [ kornnflake    ] [ opus_          ] [ slicky          ] [ zensavona_      ] 
23:56 [ coaster_        ] [ gaYak           ] [ kppullin      ] [ Orbitrix       ] [ slurp           ] [ zeromodulus     ] 
23:56 [ codelahoma      ] [ gdbz            ] [ kraft         ] [ othiym23       ] [ Sly             ] [ zinkem          ] 
23:56 [ codepal         ] [ geb             ] [ kramutils     ] [ Outsider_      ] [ smango          ] [ zivester        ] 
23:56 [ codingkevin     ] [ generalissimo   ] [ kudos         ] [ over_          ] [ smi^2_          ] [ zkirill         ] 
23:56 [ Codynyx         ] [ gerard0         ] [ kuja          ] [ owen1          ] [ sneakyness      ] [ Zolmeister      ] 
23:56 [ coffeecup_      ] [ gf3             ] [ kvey          ] [ owenb          ] [ SNow            ] [ zomg            ] 
23:56 [ conne           ] [ gildean         ] [ kzrl          ] [ Pagan          ] [ so              ] [ zorzar          ] 
23:56 [ Connorhd_       ] [ gim50           ] [ L10n          ] [ pandark_       ] [ Sonderblade     ] [ zygote_____     ] 
23:56 [ conradev        ] [ gkatsev         ] [ L_star        ] [ parasight      ] [ sordina3        ] [ zykes-          ] 
23:56 [ context         ] [ gluxon          ] [ LanyonM       ] [ PaulCapestany  ] [ Sorella         ] [ zz_luisbug      ] 
23:56 [ copongcopong    ] [ gm0t            ] [ larpzeit      ] [ pboos          ] [ sorensen        ] [ zz_runningskull ] 
23:56 [ CornishPasty    ] [ gnarf           ] [ Lee-          ] [ pc1oad1e1ter   ] [ Spudly          ] 
23:56 [ couchquid       ] [ gorillatron     ] [ Leeol3        ] [ pcarrier       ] [ SpX             ] 
23:56 [ Country         ] [ Gottox          ] [ LeftWing      ] [ percival       ] [ squeakytoy      ] 
23:56 -!- Irssi: #Node.js: Total of 867 nicks [4 ops, 0 halfops, 0 voices, 863 normal]
23:56 -!- Home page for #node.js: http://nodejs.org/
23:56 -!- Channel #Node.js created Sat Jan 30 07:48:24 2010
23:56 -!- Irssi: Join to #Node.js was synced in 24 secs
23:56 < mscdex> deathgaze: ?
23:57 < RLa> elfette, do you need to customize it that much?
23:57 < mscdex> deathgaze: what gives you an object?
--- Log closed Mon Mar 25 00:00:17 2013
