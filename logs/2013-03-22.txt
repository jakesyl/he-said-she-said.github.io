--- Log opened Fri Mar 22 00:00:13 2013
--- Day changed Fri Mar 22 2013
00:00 < Technodrome> thats like rails 
00:10 < owen1> mikeal: substack i need to send email to my CTO why i MUST go to nodeconf. btw, we already have a few node apps in prod. can u give me some highlight that will be helpful?
00:11 < mikeal> there are hands on sessions
00:11 < ningu> hmm.... NaN is less than and greater than any number
00:11 < mikeal> that cover streams, domains, web services
00:11 < mikeal> so you'll leave knowing more than you started with
00:11 < mikeal> in particular, domains are something very few people understand yet, and we're aiming for everyone to have experience with them by the end of the session
00:12 < Aria> ++. Nice, mikeal
00:12 < ningu> hmm it's in marin? oh well. if it was in SF I could possibly go.
00:12 < ningu> to some of it anyway.
00:13 < substack> owen1: I don't think I can help much with elucidating a case here
00:13 < substack> mikeal has shrouded the event in mystery
00:13 < substack> for some good reasons to be sure
00:13 < bnoordhuis> ningu: know what's awesome? NaN !== NaN
00:14 < mikeal> ningu: there's no camping in the woods in SF
00:14 < ningu> bnoordhuis: hehe, cool
00:14 < owen1> substack: i can say that the node core guys will give us hands-on sessions, streams, small apps etc
00:16 < ningu> so here's a little challenge... can you make this code do the same thing for var limit, with fewer branchings? http://hastebin.com/walekenexi.js
00:16 < substack> owen1: well not so much "node core" although there is some of that so much as "node folk"
00:17 < ningu> core team members and leading module developers?
00:20 < owen1> substack: i remember mikeal mention in the nodeup podcast grouping us to 40 devs groups and having 8 topics. streams / domains etc
00:22 < mikeal> node core people will be there
00:22 < mikeal> and the leading module developers will be there
00:23 < mikeal> all that i can think of will be working sessions except TJ, he's shy
00:28 < bengl> +1 on domains hands-on session. that will be massively helpful
00:29 < owen1> bengl: and streams
00:29 < lovemuffin> will the talks be put online?
00:29 < owen1> and building small apps, communication between them and managing them
00:29 < owen1> lovemuffin: it's hard to shoot videos, so don't count on it
00:53 < lovemuffin> faceleg|work: hows libgit coming along?
00:53 < lovemuffin> oh there's already bindings to it :o
01:07 < MI6> joyent/node: Gil Pedersen v0.10 * c3aae9c : stream: Fix stall in Transform under very specific conditions  The stall  - http://git.io/yvyGsA
01:08 < faceleg|work> lovemuffin: good
01:08 < faceleg|work> lovemuffin: ecstatic that travis unit tests all passing now
01:08 < faceleg|work> after massive refactoring
01:08 < faceleg|work> have to update examples, then get using it in my project
01:09 < ningu> faceleg|work: how was the interview?
01:10 < faceleg|work> it was ok
01:10 < faceleg|work> can't talk about it now, at work in an open plan office ;)
01:10 < ningu> hehe ok
01:10 < faceleg|work> on the way to work though I got hit by a car
01:10 < faceleg|work> which was less ok
01:10 < faceleg|work> (I"m fine)
01:11 < ningu> whose fault was it?
01:11 < faceleg|work> um
01:11 < faceleg|work> well
01:11 < faceleg|work> I was on the footpath
01:11 < faceleg|work> he was coming out of a carpark onto the road
01:11 < faceleg|work> driving across the footpath to reach the road
01:11 < faceleg|work> my interpretation was that it was his fault
01:11 < faceleg|work> but as he was so very apologetic and obviously more affected by it mentally than me
01:12 < faceleg|work> I have no desire to exact vengeance
01:12 < ningu> hehe
01:12 < faceleg|work> I saw it was going to happen (both travelling very slowly) and was in the process of jumping off my bbike as he slowly hit me
01:12 < faceleg|work> front wheel buckled
01:12 < ningu> oh, you were on a bike
01:12 < ningu> that can be tricky
01:12 < faceleg|work> cog thing broken
01:12 < faceleg|work> yeah
01:12 < ningu> in SF they generally assume it was the car driver's fault, but that doesn't mean you can just be stupid
01:12 < ningu> in my opinion
01:13 < faceleg|work> if I wasn't on to it I would have been pushed into the road and slammed down onto the atarmac
01:13 < faceleg|work> tarmac*
01:13 < ningu> also bikes aren't allowed on the sidewalk
01:13 < faceleg|work> yeah same here
01:13 < ningu> so i dunno if that would mitigate the driver's responsibiity
01:13 < faceleg|work> doubt it
01:13 < faceleg|work> just b/c smd doing something illegal doesn't mean you have free reign to drive into them
01:13 < ningu> wait, so the tarmac is the pavement... and the footpath is the sidewalk... so is the pavement anything? :)
01:13 < faceleg|work> you have resp. to avoid incident and be aware
01:14 < faceleg|work> idk
01:14 < faceleg|work> lol
01:14 < ningu> in the uk I think they say pavement when we say sidewalk
01:14 < ningu> anyway I have to go
01:14 < ningu> bbl
01:14 <@isaacs> niggler: what does `npm config ls` output for you?
01:15 <@isaacs> niggler: re npm#3261
01:15 < niggler> isaacs: http://hastebin.com/malufiwaha.ini
01:17 < niggler> I'm adding it to the issue as we
01:19 < niggler> FYI isaacs a quick google search of npm 24561 reveals a few others have seen similar issues (see http://superuser.com/questions/444567/what-is-user-owner-24561 and http://stackoverflow.com/questions/12698010/trouble-installing-npm-on-mac )
01:24 <@isaacs> niggler: haha
01:24 <@isaacs> niggler: it's the backdoor i've set up so that i can log onto your machine and pwn your laptops, OBVIOUSLY!
01:24  * isaacs 's uid gets around
01:24 < niggler> heh cheating on your machine 
01:25 < st_luke> office space
01:25 <@isaacs> niggler: i don't get why `npm get user` reports 0, though
01:25 <@isaacs> niggler: what does `id nobody` output?
01:25 < niggler> uid=4294967294(nobody) gid=4294967294(nobody) groups=4294967294(nobody),12(everyone),61(localaccounts)
01:25 < st_luke> isaacs would log into your machine remotely but end up fixing your software
01:25 < st_luke> like a javascript tooth fairy
01:25 < niggler> this is a week-old retina mbp
01:26 < niggler> hey st_luke when will you be free tomorrow?
01:26 < niggler> isaacs any reason why you aren't stripping user information when you publish in npm?
01:28 < st_luke> niggler: tomorrow might be tough cause I'm getting some things ready for a product launch and have a lot of work / meetings / etc
01:28 < niggler> another time st_luke 
01:28 < st_luke> niggler: definitely
01:30 <@isaacs> niggler: well, it's just a tarball.  The tar format has a field for uid, and yo'uer kind of "supposed" to set it appropriately.
01:30 < niggler> isaacs gnu tar at least has a --owner option
01:30 <@isaacs> niggler: but it should be setting it to the appropriate setting when you unpack.
01:31 < st_luke> niggler: out of curiosity, how do you install node/npm?
01:31 <@isaacs> niggler: specifically, global packages should be nobody-owned if youer' root, or you-owned if they're local and/or you'er not root.
01:31 <@isaacs> niggler: like i said, it works for me, and i get nobody-owneed stuff when installing globally as root
01:31 < niggler> st_luke I've tried both compiling from source ($ make; # make install)
01:31 < niggler> st_luke and using the osx package
01:31 <@isaacs> niggler: what i don't grok is why `npm config get user` outputs 0, but it's not configured that way.
01:32 < niggler> isaacs every other package works properly
01:32 < st_luke> I get the same behavior as isaacs, weird
01:32 < niggler> except for npm
01:32 <@isaacs> niggler: what about `sudo npm get user`
01:32 <@isaacs> niggler: what does that output?
01:32 < niggler> 501
01:32 <@isaacs> niggler: so, that's even weirder
01:32 <@isaacs> niggler: `sudo npm config ls`
01:32 <@isaacs> root has a different config, it looks like
01:32 < niggler> looks the same
01:34 <@isaacs> niggler: really?  even the `; userconfig /Users/niggler/.npmrc`?
01:34 <@isaacs> niggler: and what's up with the "cli configs" section?
01:34 <@isaacs> niggler: are you wrapping npm in a separate script or something?
01:34 < niggler> you asked me to run `sudo npm config ls`
01:34 <@isaacs> niggler: yeah
01:35 < niggler> which npm say /usr/local/bin/npm which is a symlink pointing to ../lib/node_modules/npm/bin/npm-cli.js
01:35 <@isaacs> niggler: oh, wait... i think the registry thing is normal.
01:35 <@isaacs> k, that's right.
01:35 <@isaacs> yeah, tha'ts confusing and weird.  notrelevant to this issue, though
01:36 < niggler> if i wanted to nuke the setup and start fresh, i need to remove /usr/local/{bin,lib} stuff, ~/.npm stuff, ~/.npmrc
01:36 <@isaacs> niggler: oh, wait... do this: `npm config get user -g`
01:36 < niggler> anything else?
01:36 < niggler> nobody
01:37 <@isaacs> niggler: rm -rf /usr/local/{lib/,}{node_modules,node,bin,share/man}/{.npm/,}npm* ~/.npm
01:37 < niggler> has uid -2
01:37 <@isaacs> right
01:37 <@isaacs> so... why isn't it using that...
01:37 <@isaacs> (don't blow it away just yet, i wanna investigate another thing)
01:37 < niggler> ok
01:39 <@isaacs> niggler: nope.  https://gist.github.com/5218297
01:39 <@isaacs> niggler: just installed npm wiht npm on linux as root
01:40 <@isaacs> niggler: resulting code is nobody/admin owned
01:40 <@isaacs> niggler: blow it away!
01:40 < niggler> ok gone
01:41 < niggler> starting from 0.10.1 download
01:41 <@isaacs> niggler: sweet.
01:41 <@isaacs> niggler: the pkg or whatever?
01:41 <@isaacs> oh.... wait....
01:41 <@isaacs> haha
01:41 < niggler> yeah, then if it works ill build from source
01:41 <@isaacs> i bet the pkg preserves my uid.
01:41 < niggler> yep
01:41 < niggler> that's what it is
01:42 < surjikal> Is there a way to get the V8 version that node was compiled with from a c++ package?
01:42 < niggler> drwxr-xr-x  18 24561   staff  612 Mar 21 21:37 npm
01:42 < surjikal> I know you can get the node version using NODE_MAJOR_VERSION etc, but what about V8?
01:43 < niggler> 16777218 2088871 drwxr-xr-x 18 (24561) staff 0 612 "Mar 20 21:27:14 2013" "Mar 21 21:37:59 2013" "Mar 21 21:37:59 2013" "Mar 20 21:27:14 2013" 4096 0 0 /usr/local/lib/node_modules/npm/
01:43 < niggler> that's the stat for the folder
01:43 < niggler> isaacs: ^ output of $ stat /usr/local/lib/node_modules/npm/
01:45 <@isaacs> niggler: k.  weird.  what about if you do `sudo npm i npm -g`?
01:46 < niggler> one sec just tested node from source and it appears to do the right thing (root:wheel)
01:47 <@isaacs> yeah
01:47 <@isaacs> i think this is a weird property of the pkg builder
01:47 < niggler> ok so it got 1.2.15
01:47 <@isaacs> right
01:47 <@isaacs> which should be the same as what's with node 0.10.1
01:47 < niggler> hmm ok so that works
01:47 < niggler> 16777218 2102031 drwxr-xr-x 18 nobody staff 0 612 "Mar 21 21:43:22 2013" "Mar 21 21:43:20 2013" "Mar 21 21:43:22 2013" "Mar 21 21:43:20 2013" 4096 0 0 /usr/local/lib/node_modules/npm/
01:47 <@isaacs> * 3dd7938 isaacs npm: upgrade to 1.2.15 (25 hours ago)
01:47 <@isaacs> ok
01:47 <@isaacs> mystery solved!!
01:47 <@isaacs> niggler: https://github.com/joyent/node/issues/2427
01:48 < niggler> this wasn
01:48 < niggler> *this wasn't the behavior i was seeing last time, but then again I wasn't using 1.2.15 
01:48 <@isaacs> sure
01:49 <@isaacs> maybe i fixed it by mistake.
01:49 <@isaacs> :)
01:49 < niggler> in any case, you should change it back to root
01:49 <@isaacs> ugh.  uid management is so tedious.  whatever.
01:49 <@isaacs> patch welcome.
01:49 <@isaacs> but it'll break other stuff.
01:50 <@isaacs> so, actually, keep the patches to yourself, in this case ;P
01:50 < niggler> the original comment was
01:50 < niggler> "On OS X 10.7, I can touch /usr/local/bin/foo without sudo"
01:50 < niggler> that does not appear to be true in OSX 10.8.3
01:50 <@isaacs> ok
01:50 < niggler> root owns /usr/local/bin and the permissions are 755
01:51 <@isaacs> it's dinner time, so i gotta run
01:51 <@isaacs> g'nite.
02:05 < sidorares> hi all
02:05 <@Nexxy> hi sidorares 
02:06 < sidorares> I'm trying to investigate why node debugger repo is so slow
02:06 < sidorares> it takes ~5 seconds to print http request object from repl
02:07 < sidorares> 0.10 is much faster then .8 but it still seconds
02:07 < sidorares> while console.log is instant
02:07 < sidorares> profiler output:
02:08 < sidorares> [JavaScript]:
02:08 < sidorares>    ticks  total  nonlib   name
02:08 < sidorares>      29    0.1%   15.3%  LazyCompile: ~parse native json.js:55
02:08 < sidorares>      11    0.1%    5.8%  LazyCompile: ~NativeModule.compile node.js:887
02:08 < sidorares>       6    0.0%    3.2%  LazyCompile: ~DefineObjectProperty native v8natives.js:695
02:08 < sidorares>       4    0.0%    2.1%  LazyCompile: ~onread net.js:464
02:08 < sidorares>       4    0.0%    2.1%  LazyCompile: ~Protocol.execute _debugger.js:92
02:08 <@Nexxy> sidorares, please use paste services like gisthub.com for >3 lines
02:08 < sidorares> ok :)
02:08 < bradleymeck> sidorares: im going to presume since you are having to send everything over the debug protocol which only references things by ids repl has to deref every property
02:08 < bradleymeck> every property of every property… etc
02:09 < sidorares> yes, this is what I suspect
02:09 < sidorares> for more complex objects it just hangs forever
02:11 < niggler> isaacs st_luke the issue appears when first installing from package and then just removing /usr/local/lib/node_modules/npm and installing from source.  Even though the issue is strange, removing the entire /usr/local/lib/node_modules directory seems to resolve the problem.  I will remember to do that from now on :)
02:22 < droopy> sidorares: probably not hanging forever, just taking a really, really long time (let it sit for a half hour and see what comes out)
02:28 < doctorm> I'm getting an an EACCES symlink error with 'npm link' that points at the current directory. The executing user owns the file and all folders, and the permissions look good. Is there a common next step to try?
02:33 < vrlogrs> hey guys ..
02:33 < vrlogrs> any idea if the memory leak is being looked at? :S
02:35 < mscdex> oh no the only close node meetup group turned client-side js only
02:35 < mscdex> :-(
02:36 < SomeoneWeird> mscdex, wtf why
02:36 < SomeoneWeird> start one up then
02:36 < substack> mscdex: pesky!
02:36 < mscdex> SomeoneWeird: dunno
02:36 < mscdex> probably low attendance
02:36 < mscdex> :/
02:36 < Lorentz> you should gatecrash their meet up with node
02:36 < SomeoneWeird> lol
02:36 < SomeoneWeird> everyone should
02:37 < vrlogrs> so, nobody knows ..
02:37 < mscdex> the one meetup we did have there was only two of us there that were actual node developers lol
02:37 < SomeoneWeird> vrlogrs, i'm sure it is
02:37 < vrlogrs> SomeoneWeird: thanks ..
02:38 < vrlogrs> is there a stable version that i could downgrade to?
02:38 < mscdex> vrlogrs: v0.10.1 is the latest stable
02:39 < vrlogrs> i mean one without the memory leak :P
02:39 < Lorentz> if you can reproduce the memory leak, that'd give the devs something to look at
02:39 < SomeoneWeird> mscdex, he means without a leak
02:39 < SomeoneWeird> lol
02:39 < vrlogrs> i dont understand why a program with a leak is considered "Stable" .. 
02:39 < Lorentz> with code to go with it
02:39 < mscdex> vrlogrs: you need to provide both solid evidence and and something we can use to reproduce the problem
02:39 < vrlogrs> my school profs would give out zeros if we had memory faults/leaks
02:40 < vrlogrs> mscdex: fair enough
02:40 < vrlogrs> but, do you guys know of a good version that is compatible with socket.io and express, with no leaks? 
02:40 < vrlogrs> might be too much to ask for
02:40 < Lorentz> afaik there are no leaks
02:40 < mscdex> vrlogrs: how do you know the "leaks" are not from a module you're using?
02:41 < mscdex> or your own code?
02:41 < vrlogrs> hmm .. 
02:41 < vrlogrs> its not my code ..
02:41 < vrlogrs> cause, it worked fine last week before the update
02:41 < vrlogrs> i updated socket.io, express, and node
02:41 < vrlogrs> thats it
02:41 < niggler> st_luke how did you send a tree?
02:41 < st_luke> :palm_tree
02:42 < vrlogrs> and now, not only is the initial memory 50% higher, but there's also leaks :(
02:42 < Lorentz> well, it'll be great if you can write up a good bug report and submit it to the devs
02:42 < Lorentz> otherwise I don't think anyone has the time to reproduce what they don't experience themselves
02:42 < vrlogrs> true ..
02:42 < vrlogrs> actually .. its pretty simple ..
02:43 < vrlogrs> just load up express and socket.io with the new version of node.js
02:43 < vrlogrs> and compare it with 0.6 or something
02:43 < mscdex> vrlogrs: so then what if you downgrade your module versions? try and isolate where the problem actually lies...
02:43 < vrlogrs> drastic differences in memory
02:43 < vrlogrs> not sure if its socket.io or node.js
02:43 < vrlogrs> i think express hasnt changed 
02:44 < vrlogrs> and to be honest, im not really sure how to downgrade :S
02:45 < Lorentz> Let's just say that telling everyone there's a memory leak without saying where is like going to the fire station and yelling there's a fire but not telling anyone where the fire is
02:45 < vrlogrs> lol
02:45 < vrlogrs> well, the best i can say is it's either node.js or socket.io :P
02:47 < lovemuffin> someone mentioned memory leaking with socket.io earlier
02:47 < vrlogrs> who??
02:47 < vrlogrs> and which version?
02:47 < vrlogrs> maybe i can downgrade that ..
02:47 < lovemuffin> i don't remember, you can search the irc logs logs.nodejs.org
02:48 < lovemuffin> way earlier, like 5 hours ago or so
02:49 < vrlogrs> a couple have mentioned it .. but, nothing regarding memory leaks yet ..
02:49 < penzur> howdy
02:50 < lovemuffin> ni hao
02:50 < Lorentz> if it's socket.io, if they have a channel you might be better served there?
02:50 < SomeoneWeird> they don't
02:50 < Lorentz> weak
02:57 < vrlogrs> https://github.com/LearnBoost/socket.io/issues/1015#issuecomment-13981022
02:58 < rideh> am i just an idiot and making things overly complex or do you get some serious spaghetti code going on with some of these template and preprocessors sometimes? i have blocks asking for includes that have blocks with appended includes that appnd blocks and so forth
02:59 < rideh> not used to recursion in front end templates - like pouring in the desiccants
03:00 < rideh> ha - or more appropriately wading in desiccants
03:01 < vrlogrs> are there some socket.io alternatives out there?
03:02 < vrlogrs> https://github.com/LearnBoost/socket.io .. seems like a new version's coming out
03:03 < lovemuffin> so travis doesn't support 0.10.x yet?
03:03 < Lorentz> vrlogrs: in the same page you linked, someone suggested sockjs
03:04 < ChrisPartridge> lovemuffin: it uses nvm afaik, so it should
03:10 < droopy> I've figured out where an error I mentioned earlier today is coming from
03:10 < droopy> for some reason, the session middleware is being called twice in each request
03:11 < droopy> any ideas as to where to look to see how it's getting in there 2x?
03:21 < droopy> actually each request goes through all the routes twice right now ???
03:28 < ChrisPartridge> droopy: shouldn't be the case
03:28 < ChrisPartridge> express?
03:41 < droopy> ChrisPartridge: yes express
03:44 < droopy> ChrisPartridge: it finishes dispatching all of the handlers, and then for some reason starts over again
03:45 < ChrisPartridge> droopy: what version of express? are you using any custom middleware?
03:45 < niggler> hello!  I'm trying to set up a more formal testing structure.  What framework should I use
03:46 < lovemuffin> the cool kids use mocha
03:46 < lovemuffin> for node?
03:46 < niggler> ideally something for both
03:46 < niggler> *both nodejs and in-browser
03:47 < lovemuffin> well, jasmine is probably the best for browser
03:47 < substack> false
03:47 < lovemuffin> how so?
03:47 < penzur> mocha ftw
03:47 < lovemuffin> it's supported by selenium
03:47 < niggler> substack didn't write jasmine :P
03:48 < substack> jasmine dumps a bunch of globals into your namespace and it has an ad-hoc flow control system built-in
03:48 < substack> and it's really hard to get data out of it
03:48 < substack> this is what I use: https://github.com/substack/tape
03:48 < substack> or mocha isn't so bad but I don't use it myself
03:49 < lovemuffin> what about integration with selenium
03:49 < substack> but you can't just `node test.js` with mocha or jasmine the same way you can for tape or tap
03:49 < substack> lovemuffin: what does "integration" entail?
03:49 < substack> who cares selenium is crap
03:49 < lovemuffin> what are the alternatives, running browser tests manually on every browser/version?
03:50 < substack> lovemuffin: I built this with pkrumins: http://ci.testling.com
03:50 < substack> example repo using it: https://github.com/substack/dnode#dnode
03:50 < niggler> substack any reason why you don't have node tests too?
03:50 < substack> niggler: for where?
03:50 < niggler> testling
03:51 < substack> niggler: because you can just use travis for that
03:51 < niggler> a .8, .10
03:51 < niggler> oh
03:52 < substack> lovemuffin: or here is an even tinier exampe repo https://github.com/substack/defined
03:52 < lovemuffin> no i've heard of it, it's cool
03:53 < lovemuffin> i think some people prefer to not depend on an external service though
03:53 < droopy> ChrisPartridge: express is at 3.1.0
03:57 < substack> lovemuffin: you can just browserify test/*.js > bundle.js; echo '<script src="bundle.js"></script>' > index.html; open index.html
03:57 < substack> and look at the debugger output
03:57 < substack> or I'm working on a tool to automate that locally in a headless browser
04:01 < droopy> ChrisPartridge: looks like socket.io is causing the problem, it is listening for all requests for some reason
04:02 < droopy> ChrisPartridge: so there are two "request" listeners, and the normal app one gets dispatched, then socket.io gets dispatched and screws everyhting up
04:02 < niggler> substack is there a quiet mode to only show errors?
04:19 -!- isaacs changed the topic of #Node.js to: JIFASNIF - http://blog.nodejs.org/ - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
04:41 < monokrome> isaacs: Hey. How can I see my user on registry.npmjs.org?
04:42 < monokrome> I'm trying to add myself as an owner to a project that I'm working on
04:42 < monokrome> but it says `npm owner add monokrome json-brunch`
04:42 < monokrome> no user "monokrome"?
04:43 < substack> monokrome: npm config get username
04:43 < monokrome> Well, a different user is logged in on the machine that owns that project
04:43 < monokrome> I'm trying to add another owner
05:03 < shmoon> anyone used validations with mongoose, the error msgs appear in reverse order :/
05:04 < ChrisPartridge> shmoon: is it an array?
05:05 < ningu> is there a one-liner in js for taking an array and transforming it to an object with attributes containing the array's values and values containing some transformation of that value?
05:05 < ningu> it's kind of messy to write foo.forEach(function (item) { obj[item] = bar(item) })
05:05 < ningu> but I guess that's the best way
05:06 < shmoon> ChrisPartridge: nope http://pastie.org/7053405
05:06 < shmoon> sucks exactly in reverse order in which i defined, same happens for you?
05:06 < ningu> I guess the way I should really say it is: the code would be clearer if I could declare obj as a transformation of foo
05:06 < ChrisPartridge> shmoon: just read the keys in reverse order :P
05:07 < shmoon> how do you reverse object?
05:07 < shmoon> right now i am using for in to traverse
05:07 < ChrisPartridge> var keys = Object.keys(objName).reverse() would be a good start
05:08 < shmoon> huh, wish it just gave in proper order in the right place
05:08 < shmoon> *first place
05:08 < ChrisPartridge> shmoon: fix it and submit a pull request :P
05:09 < shmoon> heh
05:11 < ljharb> anyone here who could help me with a node 0.10 and streams2 issue that shouldn't be breaking my module?
05:13 < niggler> is there a sync way to wait till next tick?
05:14 < ljharb> no, there's no sleep function.
05:14 < ljharb> you don't want that anyways.
05:15 < Technodrome> blah
05:16 < Technodrome> after much investigation , the node.js framework area is all just sinatra clones pretty much
05:16 < ljharb> so build something better
05:17 < CoverSlide> ljharb++
05:17 < CoverSlide> my advice: don't use a framework
05:17 < CoverSlide> node is pretty damn powerful without using a framework
05:18 < Technodrome> its not really an issue of framework
05:18 < Technodrome> just curious why every single framework has to use the same sinatra like pattern
05:19 < Technodrome> express obviously is  very de facto the main framework 
05:19 < ChrisPartridge> express ftw
05:19 < ljharb> because nobody who needs one has found any other pattern to be better.
05:19 < zivester> where'a good place to find inviduals interested in taking up a new node.js program, to be split by all parties who want to work on the project
05:20 < zivester> i.e. wheres the best place to find other node devs that may want to join some project I want to create... at the end divvying the shares equallty amonst the members
05:21 < ljharb> "shares"?
05:21 < ljharb> it's code. code's not worth money.
05:21 < zivester> 4 people, each get 25% of the cake at the end of the day
05:21 < ljharb> what cake
05:21 < Technodrome> still have not found a framework that can compete with django
05:21 < zivester> the cake that may or may not exist... if we want 25% for a cake finder, then so be it
05:22 < ljharb> if you're starting a company, hacker news is full of posts for people looking for startup engineers.
05:22 < CoverSlide> not familiar with django, what separates that from, say, rails
05:22 < Technodrome> CoverSlide:  oh boy :) 
05:23 < zivester> is hacknews read by developers or by the common folk (reddit) ?
05:23 < Technodrome> dev's mostly 
05:23 < Technodrome> or tech people in general 
05:23 < ljharb> well, these days it's read by trolls
05:23 < CoverSlide> it's read by investors and entrepreneurs
05:23 < Technodrome> its ready by many people 
05:23 < ljharb> at any rate, if you've got a good idea, you don't need to look for people, they'll come find you :-p
05:24 < zivester> All the jobs listed here are at startups that were at some point funded by Y Combinator. Some are now established companies. Others may be only a few weeks old.
05:24 < AAA_awright> Technodrome: Maybe you want to review my app/framework, http://magnode.org/
05:24 < AAA_awright> I'm seeking feedback for quick fixes and such
05:25 < AAA_awright> Well, anything actually
05:25 < zivester> I basically want to create a site, and with 4-5 smart guys, I think we could put it together in a couple weeks
05:25 < CoverSlide> getting random people to join a project usually doesn't go well. you should probably try to leverage existing connections, or else you're better off on your own, or forking up some cash
05:25 < zivester> equity, cash, meh...
05:25 < zivester> all the same to me if need be
05:25 < CoverSlide> equity is a sucker's bet
05:26 < CoverSlide> better give me cash for the craps table
05:26 < zivester> it is in the world of business man screws over developer... im not proposing owning the project, just being 1 of a couple developers
05:26 < CoverSlide> or lottery tickets
05:27 < zivester> moreso I guess looking for node developers who may be looking for a ~month project to try something thats not so different... like creating craigslist
05:30 < Technodrome> the last company i worked for, i put a bunch of articles on HN, they seriously had a new investor like 1 month later, got word of the company from my articles 
05:30 < Technodrome> AAA_awright: what is it ?
05:31 < CoverSlide> a framework
05:31 < AAA_awright> ^
05:31 < AAA_awright> It's... different
05:31 < Technodrome> its not clear enough what it really is 
05:31 < Technodrome> the selling potential of the site isn't so good either
05:31 < AAA_awright> Maybe too different for some people's tastes, hence all the clones
05:31 < zivester> Technodrome, That's nice for a company... im thinking something smaller, that wouldn't demand too much time, but could basically replace craigslist
05:32 < AAA_awright> What else are people looking for in a website, bralagh
05:32 < Logicgate> hey guys, I created a link aggregator and I need some input on features that I should integrate on the website. www.pluggr.com
05:32 < AAA_awright> I mean, really, how else do I sell this
05:33 < Logicgate> Is the location filtering relevant
05:33 < Technodrome> they got a huge investment to 
05:33 < AAA_awright> Technodrome: What are you looking to do, would be a better question
05:33 < Technodrome> over 2-4 million , i never got the full details 
05:33 < Logicgate> Is that a feature that you guys would like on the site if you were using it?
05:33 < Logicgate> Would you want to be able to attach a location relevant to the content you are posting?
05:33 < Technodrome> just make nice products guys 
05:37 < Technodrome> if you make nice products that solve a problem, and its polished, you should be able to make it work pretty nicely 
05:37 < AAA_awright> Technodrome: What are you looking to do with a framework?
05:37 < Technodrome> i was just thinking in the node.js world for what web frameworks are out there
05:37 < Technodrome> still though django > , and i've used like everything
05:38 < AAA_awright> What's the biggest reason for that?
05:40 < ChrisPartridge> django was a good movie
05:40  * ChrisPartridge snickers
05:40 < CoverSlide> the problem is frameworks
05:41 < AAA_awright> *sigh* what is someone supposed to do to get an answer
05:41 < CoverSlide> the best features of node don't come from frameworks
05:41  * AAA_awright tries a different approach
05:41 < AAA_awright> DJANGO SUCKS
05:43 < CoverSlide> Yeah that damn mandalorian
05:43 < AAA_awright> Technodrome CoverSlide: No opinion on this?
05:43 < CoverSlide> I would have if I ever used django
05:43 < fauntle> quick question; how do you guys handle version history? Is there some utility you use, or do you just do it manually?
05:43 < AAA_awright> Well in general
05:44 < CoverSlide> frameworks and boiler plate in general suck
05:44 < AAA_awright> fauntle: Like Git...?
05:44 < AAA_awright> CoverSlide: I'm inclined to agree, why should that be exposed at all, you never see the event loop in Node.js for instance
05:44 < CoverSlide> npm-www is a great example of how to do a node site without frameworks, and it does it pretty well
05:45 < AAA_awright> I'm scared to ask, having been brutally beaten senseless by the old website
05:45 < Technodrome> AAA_awright: what are you asking? i'm confused
05:45 < Technodrome> django rules! 
05:45 < Technodrome> its the best web framework i've ever used
05:46 < AAA_awright> Technodrome: Why? What about it?
05:46 < Technodrome> ah
05:46 < Technodrome> well
05:46 < AAA_awright> What's its core mechanic, to put it that way
05:46 < Technodrome> if you use it, you will realize its minimal, but at the same time has a very large api that allows you to do a lot, built in ORM that is very user friendly, the views(controllers) have a nice api for doing everything, its really a good place to make a website 
05:47 < Technodrome> everything is in the box, no external dependencies 
05:48 < AAA_awright> You want to start building an application. How does it handle that request, and how do Node.js libraries differ?
05:48 < AAA_awright> Aside from that Node.js literally is the HTTP server
05:48 < Technodrome> there is an advantage to a full stack framework that works really well 
05:49 < Technodrome> if you notice django has changed *much* since 2005, no go look at rails or any other big framework, they are almost all very different
05:49 < CoverSlide> the problem with frameworks is they make assumptions
05:49 < Technodrome> CoverSlide:  you ever use python?
05:49 < AAA_awright> CoverSlide: Which sort of assumptions do you find bothersome?
05:49 < Technodrome> python is known to be an explicit over implicit langauge
05:50 < AAA_awright> And yes, I find python's assumptions hugely bothersome
05:50 < Technodrome> http://www.python.org/dev/peps/pep-0020/
05:50 < Technodrome> Explicit is better than implicit.
05:50 < AAA_awright> "You, add, you're going to be an OO method, but you, len, you're going to be a function. Why? BECAUSE I SAID SO"
05:51 < Technodrome> the *classic* len argument 
05:51 < Technodrome> how is that anything to do with assumptions though?
05:51 < Technodrome> django doesn't user user defined classes for everything, not even close 
05:51 < Technodrome> then again everything is an object
05:51 < AAA_awright> Also, significant whitespace
05:51 < CoverSlide> len is one of the most annoyting things about python i have to agree
05:51 < Technodrome> not so significant, it just relies on regular white space that most properly formatted apps have
05:52 < AAA_awright> That's still significant
05:52 < AAA_awright> CoverSlide: I refuse to use it. __len__() or die.
05:53 < ningu> the issue with whitespace for me is how much logic you can view on one screen at a time
05:53 < Technodrome> list.__len__() if you really want btw
05:53 < Technodrome> you don't *have* to use len
05:53 < AAA_awright> Technodrome: Too bad python, like, violates 1/3rd of those
05:53 < ningu> what about for strings?
05:53 < Technodrome> strings as well 
05:53 < ningu> oh, right, cause they're iterators too
05:53 < Technodrome> but you must understand, everything is an object in Python, but not everything is a user defined class 
05:53 < Technodrome> like in languages like ruby etc 
05:54 < AAA_awright> Another quarter are simply incorrect... "Simple is better than complex." No, simple is better than complicated. It hints at this in the next one but splitting it apart like that totally misses the point and why am I even arguing this this is stupid
05:54 < AAA_awright> Anyways
05:54 < Technodrome> you like javascript better than Python?
05:54 < s3shs> I have a silly question: require is synchronous, right?
05:54 < CoverSlide> s3shs: yes
05:54 < ChrisPartridge> s3shs: yep
05:55 < AAA_awright> s3shs: Kind of
05:55 < s3shs> So what if, in that file, there's a function call to some init code that's not synchronous.
05:55 < s3shs> How do I find out when require is done?
05:55 < s3shs> There's no callback.
05:55 < Technodrome> if so, that's fine, i think many people would agree python is much easier to read , but that is all subjective, only thing i said is node.js frameworks all emulate express which make them all sinatra type, where the concept of apps, and more separation ( just a few files) is better in django 
05:55 < AAA_awright> s3shs: In some special cases involving circular require() calls it may not actually contain the complete object by the time you require it, but it'll eventually show up
05:56 < AAA_awright> s3shs: And how is that possible? Require is the output of a function called exactly once per process. The body of that function is usually (but not necessarially) the contents of a text file.
05:56 < CoverSlide> hacky require tricks generally should be avoided
05:57 < s3shs> when I require('someFile.js'), it basically runs the file from top down.
05:57 < droopy> s3shs: you can use a promise to wait on the init
05:57 < AAA_awright> s3shs: You generally shouldn't do anything except declaring functions or simple calculations in the body of a module-function. A module-function shouldn't be making asynchronous calls.
05:57 < CoverSlide> yes
05:57 < CoverSlide> don't put anything async at the top level
05:57 < s3shs> If there's some async call in there, require will return before that call completes, most likely.
05:57 < AAA_awright> It has to, how would it not?
05:58 < s3shs> So how does one initialize a module?
05:58 < CoverSlide> yes, so don't do it
05:58 < s3shs> (Wow, you guys are really helpful tonight.  :-))
05:58 < AAA_awright> s3shs: Initialize a module? I still don't understand
05:58 < AAA_awright> A module is a function, right
05:58 < s3shs> It's more of a class.
05:58 < droopy> s3shs: you're not making a ton of sense
05:58 < s3shs> No?
05:58 < AAA_awright> Not really
05:58 < CoverSlide> there are no classes in javascript
05:59 < s3shs> A class is an abstract idea.  Classes exist in all turing complete languages.  And they most definitely exist in Javascript.
05:59 < CoverSlide> a module should be an object or function
05:59 < AAA_awright> s3shs: A module is a function. When you write a module, you're writing the body of a function. When you call require() to load that file, what you're doing is you're asking that the file be executed as a function, and that you get back its return value
05:59 < AAA_awright> s3shs: That return value should only include definitions of other functions, which themselves may do asynchronous operations
06:00 < AAA_awright> Make sense now?
06:00 < s3shs> Yeah.
06:00 < s3shs> It does.
06:00 < s3shs> Thank you.
06:00 < AAA_awright> And or some stupid reason Node.js uses module.exports to assign a return value, instead of the return keyword
06:00 < AAA_awright> Whatever
06:00 < CoverSlide> i think that's a commonjs thing
06:01 < droopy> ^
06:01 < s3shs> I've been using require() as include.
06:01 < CoverSlide> but don't take my word for it, i never read the commonjs specs
06:01 < ningu> s3shs: it's more or less like include, but each file has its own closure
06:02 < CoverSlide> best to not compare it to other include systems
06:02 < s3shs> Right.  So vars are global only to that function, etc.
06:02 < AAA_awright> It's better than include systems
06:02 < AAA_awright> And namespaces
06:02 < CoverSlide> read module.js and figure out what it really does
06:02 < AAA_awright> Another reason python (and most languages, really) can go die
06:02 < Shadoobie> I've just learned how to use node-captcha and it works, but i was hoping to find a puzzle captcha and or an audio module.  Does anyone know if such modules/projects exist for node?
06:03 < AAA_awright> But if you're actually celebrating namespaces, you especially
06:03 < ningu> s3shs: also, each file will be require()'d only once per node process. so that's another reason it isn't smart to do async stuff.
06:03 < AAA_awright> Hence "once per process"
06:04 < s3shs> Right.  But the async stuff I'm doing in there only needs to be done once.
06:04 < CoverSlide> if you're a good boy and put all your requires at the top level, then all your requires will happen at the beginning and you never have to worry about them again
06:04 < s3shs> So I guess I'll move the "work" outside of it and add an init function to each module to call after the require.
06:04 < s3shs> (After the first require.)
06:04 < CoverSlide> that's what I usually do
06:05 < s3shs> I kind of liked the idea of "Constructor" inside the require.
06:05 < CoverSlide> module.exports = function initializeAllTheThings(options, cb)
06:05 < CoverSlide> and so on
06:05 < s3shs> Yeah.
06:05 < AAA_awright> Right
06:05 < s3shs> I just wanted in the file.
06:05 < s3shs> Oh goodie.  More code to refactor.
06:05 < Technodrome> what was that yahoo node.js framework called?
06:05 < CoverSlide> mojito?
06:05 < s3shs> I just updated things to use Domains.  Which are totally awesome.
06:05 < CoverSlide> never tried it
06:06 < ningu> s3shs: you can also do require(foo)(bar) where bar is the thing you want all your modules to have
06:06 < s3shs> require(foo).init() I think.
06:06 < ningu> s3shs: no, I mean wait for bar to become available, then call require
06:07 < s3shs> rather require(foo).init(cb)
06:07 < ningu> oh. yes, that would work too
06:07 < s3shs> A little more implicit.  "Look, it's init'ing", then I can async.serial() all my requires.
06:07 < CoverSlide> i have modules called mkstream and mkee, i have a lot of `require('mkee')(MyConstructor)` in my code
06:08 < s3shs> I've gotta say, JS is not an easy language.  It's actually one of the more powerful languages I've ever used.
06:08 < s3shs> But there's this really steep part of the learning curve, that once you get over it, there's cool stuff to be found.
06:09 < ningu> that seems about right
06:09 < s3shs> It has a very low entry point though for beginners.
06:10 < s3shs> But start adding in the async stuff, callbacks, proxy, domains... weee!
06:10 < ningu> it's completely non-obvious, for example, that closures are actually implemented as prototypes
06:13 < bradleymeck> can be*
06:16 < ningu> bradleymeck: so there are alternative implementations?
06:17 < bradleymeck> ningu: yes, you can statically analyze and optimize quite a bit
06:24 < taterbase> If I have push rights to a repo that is also an npm module, what do I need to do to update the npm module?
06:25 <@Nexxy> npm publish
06:25 <@Nexxy> and owner listing in npm
06:25 <@Nexxy> or contributor
06:25 <@Nexxy> one of them
06:25 < taterbase> Is that something I can add to the package.json?
06:27 <@Nexxy> I believe you have to use `npm owner add <user> <package>`
06:27 <@Nexxy> as someone who has ownership in the first place
06:27 <@Nexxy> where user is your npm username
06:27 < taterbase> I see
06:27 < CoverSlide> what if the owner gets hit by a bus
06:29 <@Nexxy> CoverSlide, after an appropriate grieving period, you can email isaacs about it with proof and a request for ownership
06:29 < ningu> or a universal serial bus
06:30 <@Nexxy> is that when you get hit everywhere repeatedly?
06:39 < Technodrome> be good be good 
06:49 < AAA_awright> So I've got this application I'm trying to test out, who has MongoDB ready and can follow some quick directions? http://magnode.org/download
06:54 < eff> hi, i would like to know how to "monkey-patch" a library in node, i'm using the package dnsd, somewhere in the package (convenient.js file) a test is performed and if my TTL is smaller than 3600 it's set to 3600, i can change this behavior by editing the min value in the source file, but i'd like to make the patch in my application side (so anyone can npm install dnsd fresh and doesnt need to edit it's source file, i also dont want to fork dnsd project just 
06:54 < eff> for a min value change)
06:55 < eff> is there a way to do that using node ?
06:59 < bradleymeck> eff if it exposed as a property of some object, change that property?
06:59 < eff> it's not exposed
06:59 < GreenDog> patch it so that it's exposed or passed in config, commit, submit pull request :)
07:00 < bradleymeck> ^
07:00 < segomos> that reads like a daft punk song
07:00 < eff> it's set as a require('defaultable')(module, { .... ttl: 3600 } ...
07:03 < eff> there is no "magical" way to patch a not exposed property of a module ? :(
07:04 < Shadoobie> anyone aware of a puzzle captcha for node (i've got node-captcha working)?
07:04 < bradleymeck> eff: liveedit, but monkey-patching ala python / ruby leads to leaks… like ruby and python get
07:05 < bradleymeck> do not monkey patch existing code, it will make your memory usage unhappy
07:05 < bradleymeck> not to mention if you monkey patch a ref'ed object/function, all hell can break loose
07:06 < eff> may i ask why ? what aspect of python monkey patching create leaks ?
07:07 < AAA_awright> Because it's dangerous?
07:07 < bradleymeck> if an object contains a reference to a different scope and is held onto past the patch (say by being attached to some other thing [timer, fd, watcher, etc]) GC cannot collect it, but monkey patch has removed it from the logic that may have removed those references
07:07 < AAA_awright> If it were meant to be changed it'd be changable... file a bug report perhaps
07:08 < bradleymeck> and if you replace a function and the function is already ref'ed somewhere but an expectation that it is the same as a previous function (recursion by variable for example) you can get NASTY bugs if the functions don't match 100%
07:08 < eff> ok, thanks you for the explenation bradleymeck
07:19 < spots> hi, node won't exit anymore, anyone have this problem too?
07:21 < bradleymeck> spots: define "anymore", it just hangs, it crashes, it is looping?
07:21 < spots> hangs
07:21 < spots> it worked before node 0.10.0
07:22 < bradleymeck> probably have a reference to an http stream that wasn't closed
07:22 < bradleymeck> stream api's changes a tiny bit
07:22 < spots> i have only readline and serialport
07:23 < spots> is there a way to find out whats causing this?
07:23 < spots> except "try and error"
07:23 < bradleymeck> you could add a repl like flatiron-repl, check process._handles
07:23 < bradleymeck> or send sigusr1 and open up a debugger against it
07:24 < bradleymeck> would google how to do the debugger personally
07:26 < spots> c
07:26 < spots> thanks for the hint, found this http://nodejs.org/api/debugger.html
07:33 < zaleb> morning
07:34 < thealphanerd> mornin
07:37 < Technodrome> sublime text 2 for the win 
07:39 < kevireilly> Pitel_IPEX: hah awesome quit message
07:40 < Pitel_IPEX> thx :)
08:07 < zeromodulus> :D
08:07 < zeromodulus> I'm getting the hang of this async thing guys.
08:07 < zeromodulus> It's finally making sense.
08:07 < freewil> :)
08:08 < zeromodulus> I made a nice little callback chain.
08:08 < zeromodulus> n.n
08:09 < zeromodulus> the functions have names, so they're not anonymous and ambiguous in console error output, and they're not nested levels and levels deep. :D
08:10 < ebright> congrats zeromodulus :)
08:11 < zeromodulus> Thanks. :D
08:27 < zeromodulus> Oh yeah, I swapped out KineticJS for createjs.
08:27 < zeromodulus> For client-side stuff.
08:28 < zeromodulus> KineticJS' documentation isn't as awesome as createjs'. Also, createjs has some big names sponsoring it.
08:28 < zeromodulus> It's kind of funny to see Adobe sponsoring a client-side JS graphics library.
08:28 < zaleb> createjs is nice
08:28 < zaleb> prolly because they ahve this converter
08:28 < zot> having a strange memory access problem that occurs in asm code, v8::internal::Isolate::Current().  anybody have a clue?  http://pastebin.com/jAQSuJQW    Note that the input string appears to be legit, but that the invalid address is 0x0.
08:29 < zeromodulus> Oh, I didn't know they had a converter. I saw an article about "Flash -> createjs", but I thought it was just an a tutorial or something. :P
08:29 < zaleb> it only does animations tho
08:34 < hasse> Im using the request module to fetch the statusCode of 500 pages. After about 200 request I start getting 400 errors for most of the pages. Do I have to close/end my request object? I get "possible EventEmitter memory leak detected" just before the errors.
08:46 < [AD]Turbo> hola
08:55 < spots> can i 'force an exit' (process.exit() still hangs for me)?
09:01 < faceleg|sleep> is it possible to create a JS Date object in v8?
09:01 < L10n> faceleg|sleep: yes
09:02 < guor> v8::Date::New
09:02 < faceleg|sleep> L10n: guor thanks 
09:03 < faceleg|sleep> L10n: guor and I can just pass these directly to JS callbacks?
09:03 < L10n> spots: you could process.kill(process.pid)
09:03 < guor> it should return a handle on a date object, sure
09:06 < faceleg|sleep> guor: thanks, is this prefered compared to returning int timestamps?
09:06 < guor> in what use case?
09:06 < faceleg|sleep> commit dates
09:07 < faceleg|sleep> for a libgit2 wrapper
09:07 < faceleg|sleep> getting commit details, one item of which is the commit date
09:07 < faceleg|sleep> currently returning int timestamp in seconds
09:07 < faceleg|sleep> which to use one really has to do new Date(ts * 1000)
09:07 < guor> where are you getting that timestamp from?
09:07 < faceleg|sleep> libgit2
09:07 < faceleg|sleep> which gets it from the git repository
09:07 < guor> do you need it as a Date object?
09:07 < faceleg|sleep> in js?
09:07 < guor> if not, why not just keep it as seconds
09:08 < faceleg|sleep> yeah I have no problem with that
09:08 < faceleg|sleep> just trying to make the module as idiomatic as possible
09:08 < faceleg|sleep> to lower barriers for use
09:08 < guor> I don't see any need to convert it to a Date
09:08 < faceleg|sleep> yeah
09:08 < faceleg|sleep> "can I do this? I can! I MUST DO THIS" was my recent thought process i think ;P
09:09 < guor> if you just end up converting it back to seconds, why bother
09:10 < zaleb> a, the classical "As a developer I would like this because its awesome" user story
09:11 < guor> Date objects are a complete screw up in javascript, like most things
09:12 < L10n> ^
09:16 < Brainenjii> hello world! I try to add module via npm - sudo npm -g install requirejs; It's installing into /usr/lib/node_modules. I set NODE_PATH as NODE_PATH=/home/Brainenjii/.npm/:/usr/lib/node_modules/ but nodejs still crashed when I try call var requirejs = require("requirejs") into my code
09:16 < Brainenjii> what do I wrong?
09:17 < zaleb> from your app: npm link reqruirejs
09:17 < zaleb> *app dir
09:21 < Brainenjii> thx a lot! But npm link requirejs fall with error at end it create directories and all works fine
09:40 < pixie79> morning all - I was wondering if there was anyone who had two mins that could review the following lib i have created to ensure my callbacks are correct, as I tend to get stuck in callback hell. The purpose of the lib is for the calling script to check if the callback is true or false and then act on it. This lib sets that status after checking the exit status of an external program which it runs. - https://gist.github.com/pixie79/52200
09:40 < pixie79> 41 - thanks
09:40 < pixie79> https://gist.github.com/pixie79/5220041
09:44 < substack> bouncy 3.0 released
09:44 < substack> fixes some horrible long-standing bugs with backpressure
09:44 < ashnur> kewl
09:48 < listochkin> substack: does it require node 0.10 and above?
09:49 < substack> listochkin: it only works on 0.8 right now
09:49 < listochkin> oh, ok
09:50 < listochkin> substack: btw can I ask you a question about Browserify? I'm using jQuery in a browser and I'd like to write tests that run in node. Is it possible to somehow tell npm to use Node-jquery and browserify to use browser-jquery?
09:52 < substack> listochkin: https://gist.github.com/shtylman/4339901#spec
09:53 < listochkin> substack: thanks, didn't know that. Btw new Browserify doesn't put 'browser' into process, does it?
09:54 < substack> https://github.com/shtylman/node-process
09:54 < substack> https://github.com/shtylman/node-process/blob/master/browser.js#L40
10:00 < radiodario> substack: what does node-process do?
10:01 < substack> radiodario: that's what you get when you use process in browserified code
10:02 < radiodario> cool cheers
10:04 < nrjs> hi
10:05 < till_> has anyone attempted to run npmjs off of s3?
10:07 < listochkin> substack: thanks a lot!
10:16 < MiracleBlue> Hey guys :)
10:18 < zaleb> ello
10:20 < BadDesign> dafaq
10:21 < BadDesign> This is the second most popular channel I'm in besides #git which has 943 users
10:21 < BadDesign> Yay++
10:49 < craigwin> anybody able to help with a node canvas issue? most likely me doing something wrong but here goes. when u try to use the context.getImageData(0,0,img.width,img.height) it seems to return correctly but when i console.log the image data every pixel is 0,0,0,0
11:00 < sinclair|work> anyone here done anything with google drive?
11:00 < sinclair|work> i have a authentication question
11:00 < sinclair|work> namely, having my web server authenticate on behalf of a client
11:15 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:58 < mirek_> i can't seem to find info on how to check if i'm running in nodejs context or somewhere else
12:05 < shesek> mirek_, checking that `process` exists is usually enough, but you can check that process.title == 'node'
12:05 < shesek> (obviously, check if `process` exists first, otherwise it'll throw an exception if it doesn't)
12:06 < mirek_> shesek, exactly, it's not one-liner anymore
12:06 < mirek_> and you have to do it twice per file, at the top to require stuff and at the bottom to export
12:06 < mirek_> shame there's no slick way to do it
12:07 < shesek> mirek_, if you're trying to target both node and browsers, why not use browserify?
12:07 < mirek_> shesek, googling...
12:07 < shesek> it lets you use nodejs-style modules (with exports and require()), and creates a browser-compatible version
12:08 < shesek> you can just require() nodejs modules as you usually do
12:09 < shesek> it also works with most npm packages, and even with some of nodejs built-in modules (which has "browserified" versions)
12:09 < rohdef> I've installed node on Windows, can it really be true that when I do an npm install that, I have to link everything manually afterwards to get it working?
12:09 < mirek_> shesek, not bad, thanks.
12:10 < shesek> mirek_, I find working with nodejs-style modules everywhere is much easier
12:10 < shesek> and browserify does it well
12:10 < shesek> rohdef, no, you shouldn't have to do that
12:11 < rohdef> shesek, :( bummer, then the magic question, what have I done wrong? :p
12:11 < rohdef> shesek, apart from running Windows that is :p not my personal choice :p
12:11 < shesek> if you're installing it locally, under node_modules, it should be available for require() calls in the directory that contains the node_modules directory, and in any sub-directory of that
12:12 < shesek> if you installing globally, it should just work everywhere
12:12 < shesek> I dunno... it should just work :P
12:12 < shesek> how did you install it?
12:12 < rohdef> well initially I did npm install foo, then I redid with npm install -g foo
12:13 < rohdef> but to be sure, the correct node_modules directory is c:\Users\rohdef\AppData\Roaming\npm-cache
12:15 < rohdef> right?
12:16 < shesek> the node_modules directory should be named node_modules
12:17 < substack> no it should be named node_modules instead
12:17 < substack> we should rename all the node_modules directories to be node_modules
12:17 < substack> that way people will know that they are node modules
12:18 < rohdef> ah, so this is my folder: C:\Users\rohdef\AppData\Roaming\npm\node_modules
12:18 < shesek> rohdef, probably, yes
12:18 < shmoon> what are you guys saying?
12:18 < shesek> the package is there, but you can't require it?
12:19 < rohdef> substack, shesek thanks, I think I got that part good and running now
12:20 < shesek> rohdef, unless you have a good reason to, I would recommend to avoid installing packages globally
12:20 < shesek> once you understand how npm works, its really quite convenient
12:21 < rohdef> shesek, how come actually? I've seen that recommendation a lot of times, but I'm not sure why I shouldn't?
12:23 < jasonvitagen_> hello everyone, i have a question
12:23 < shesek> rohdef, each of your projects can use any version of any dependency that it needs, without effecting other projects
12:24 < jasonvitagen_> i was trying to get a website http://malaysiakini.com using request module, however i got the error 611 in the html
12:24 < rohdef> shesek, ah, well right now I'm playing with a utility to run as a command line thing
12:24 < shesek> also, creating a package.json for your projects, with all of its dependencies, makes it very easy to get your project up and running on other environments (other developers etc)
12:25 < jasonvitagen_> other websites such as yahoo.com works
12:25 < shesek> (which is really easy - just `npm init`, answer a bunch of questions, than use `npm --save foobar` to install and add it to the project's dependencies
12:25 < shesek> )
12:26 < rohdef> shesek, but then it's more for when I start coding my own projects?
12:28 < shesek> rohdef, if you're just installing some package to use its binaries, and not as a dependency for your own project, than yeah, install globally
12:28 < shesek> theres
12:28 < shesek> there's no project that you could install it locally to, so that wouldn't make much sense
12:29 < rohdef> shesek, ok :) but will keep it in mind anyway, it's most likely just a matter of time before I start making my own node.js things
12:36 < MiracleBlue> Okay so, I am faced with a tough decision.
12:37 < MiracleBlue> Should I get a raspberry pi, or an arduino
12:37 < sinclair|work> MiracleBlue: they are both ridiculously cheap, get both
12:37 < Havvy> >> Math.floor(Math.random() * 2) ? 'pi' : 'arduino'
12:37 < purr> Havvy: (string) 'pi'
12:38 < MiracleBlue> I could get both I guess :P
12:38 < sinclair|work> DO ET!
12:38 < sinclair|work> do eeeett!
12:38 < MiracleBlue> Duuuu eeeet
12:39 < Havvy> But do you have the time to use both?
12:39 < MiracleBlue> Possibly
12:39 < `3rdEden> who needs time when you have swag!
12:39 < shesek> Havvy, don't confuse him with more question... he should just
12:39 < shesek> duuuuu eeeettt
12:40 < shesek> and buy both.
12:40 < Havvy> shesek: More questions leads to better answers.
12:40 < MiracleBlue> Okay, the people have spoken!
12:40 < MiracleBlue> Both it is!
12:41 < MiracleBlue> I have no idea what I'll do with them yet, but I'm sure I'll find something cool to make.
12:50 < hemanth> trying to add some caching to https://github.com/hemanth/node-octodex/blob/master/octodex.js for better perf, any suggestions? 
12:58 < GrinV> When I execute 'make',NameError: global name 'file' is not defined .Why?
12:59 < spots> which package is recommended for mysql?
13:00 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:06 < thing_> Hello everybody
13:06 < zaleb> hi
13:07 < thing_> Q: I was trying to get request a website http://www.malaysiakini.com using Request module by Mikeal, however I got this message->'Application error, error code is 611.' inside the html. This works for yahoo website
13:07 < thing_> What is the problem?
13:12 < zaleb> thing_, whats the http status code?
13:16 < MiracleBlue> You know that feeling when you're just itching to code something, but you dunno what to make
13:16 < sinclair|work> MiracleBlue: yes
13:16 < thing_> zaleb, the response status code is 200, I got the whole html content, including the logo and the navigation bar, however in the main content it says error 611
13:17 < sinclair|work> MiracleBlue: sounds like you need a challenge
13:17 < sinclair|work> MiracleBlue: i got one for you
13:18 < MiracleBlue> sinclair|work: yep?
13:18 < sinclair|work> write a nodejs, google drive auth
13:18 < sinclair|work> and use it to read files from google drive
13:18 < sinclair|work> MiracleBlue: can work together on it
13:18 < sinclair|work> MiracleBlue: mind you, i am coding in C#, not nodejs
13:19 < sinclair|work> but, would be good to bounce ideas off someone so i dont feel im coding alone :(
13:19 < MiracleBlue> Sounds like an interesting challenge :)
13:19 < sinclair|work> MiracleBlue: you in?
13:21 < thing_> zaleb, this is my code-> http://pastie.org/7066650 , this is what i got-> http://pastie.org/7066648
13:22 < zarac> MiracleBlue: How about drawing graphs (WDG) onto canvas..? : )
13:23 < zarac> The HTML5 canvas element, that is. . (
13:23 < zarac> : )
13:30 < zaleb> Thats an error on the website you're calling
13:30 < zaleb> has nothing to do with node
13:32 < shesek> MiracleBlue, contributing to open source projects is a great use of that feeling
13:36 < Determinist> is there any way for me to know when an object gets garbage collected?
13:36 < euoia> MiracleBlue: not sure if it's your thing, but voxel.js looks awesome and could probably do with some help
13:36 < mrvisser> Determinist: don't think so. why would you need to know that?
13:37 < MiracleBlue> euoia: neat!
13:37 < Determinist> mrvisser: just generally interested in understanding the lifetime of some objects and was wondering when these objects are actually garbage collected. no way to access those directly since they're out of scope and only accessible from a closure
13:37 < Determinist> mrvisser: so just wondering if there's a way to get some unique object ID and see that object ID in some GC log when it gets collected
13:38 < Determinist> mrvisser: could be amazingly helpful for some stuff :)
13:38 < euoia> MiracleBlue: there's a bit about it in nodeup38 and nodeup41
13:39 < Determinist> i'm guessing each object greated in V8 has some unique ID, right? and the GC would eventually clean it up, which means that unique ID *can* (but not necessarily is) be shown
13:39 < Determinist> s/greated/created
13:39 < guor> there is no unique id
13:40 < guor> other than the address
13:40 < Determinist> there is no spoon
13:40 < Determinist> address?
13:40 < guor> but that can change because of the relocating gc
13:40 < thing_> zaleb, Thank you.
13:40 < Determinist> so when i do obj1 === obj2, v8 just compares pointers?
13:40 < guor> sure
13:41 < Determinist> i guess that's a cheap way to do it... sure
13:41 < guor> btw. when you make a heap snapshot, there is an id
13:41 < zaleb> thing_, yw
13:41 < guor> a serialization id basically
13:41 < Determinist> guor: heap snapshot is nice, but i'm looking for data over time and less data at one point in time
13:42 < guor> you can create weak handles for objects
13:42 < Determinist> guor: chinese to me. can you explain please?
13:42 < guor> when those objects die, the callback you defined is called
13:42 < Determinist> guor: sure, but how can i define a callback for "object death" ?
13:43 < Determinist> and wouldn't that callback basically prevent the GC from cleaning that object? or is that what you meant when you said weak (won't increment the counter)?
13:43 < guor> counter?
13:44 < Determinist> objX, reference counter, when it reaches 0, object gets cleaned
13:44 < guor> open test/cctest/test-api.cc and look for ApiObjectGroups
13:44 < guor> it basically shows how you use it
13:44 < guor> and V8 does not use reference counting
13:44 < Determinist> guor: what's the algo used then?
13:45 < guor> tracing gc basically
13:45 < Determinist> guor: thanks for the info and help. much appreciated.
13:46 < guor> np
13:46  * Determinist puts his construction helmet on and digs in
13:49 < noducks>  
13:50 < hemanth>  
13:51 < GrinV> Hi
13:52 < GrinV> Q:I have python2 and python3,I run ./configure and it works.But I run make,"NameError: global name 'file' is not defined"
14:01 < Voting> Recommendations on a really good json rpc package for a java script client side? Server side? 
14:01 < Voting> My client and my server will need to make requests of OTHER servers using json rpc
14:01 < Voting> what frameworks should I use for this?
14:49 < Siyfion> Can anyone recommend any debugging alternatives to node-inspector, now that it's really dead & buried
14:51 < euoia> Siyfion: Is it? I missed that. Does it not work any more?
14:51 < diversario> If you're not against using an IDE then WebStorm has an excellent built-in debugger.
14:51 < zaleb> yeah, Id opt for Webstorm/Phpstorm to
14:51 < diversario> it's amazing
14:51 < Siyfion> euoia: Yeah, v0.10.0 killed it completely, and the author isn't interested in maintaning it.
14:52 < euoia> Siyfion: hmm, that's bad
14:52 < Siyfion> I've heard good things about WebStorm, but I love my Sublime Text 2 too much :/
14:52 < euoia> Siyfion: How do you know Danny Coates isn't interested in maintaining it other than lack of recent activity?
14:52 < Siyfion> euoia: tbh, not his fault; can't *force* someone to maintain something they don't want too...
14:52 < diversario> well, then, I don't know. I heard you could hook chrome debugger into it, but I never bothered trying that.
14:53 < euoia> Siyfion: Ah I can see https://github.com/dannycoates/node-inspector/issues/126#issuecomment-13118592
14:53 < Siyfion> https://github.com/dannycoates/node-inspector/issues/126#issuecomment-13118592
14:53 < Siyfion> beat me to it ;)
14:54 < Siyfion> Which is a *real* shame, I loved it...
14:54 < Siyfion> was elegent and used a set of tools I already had, etc.
14:54 < euoia> Siyfion: someone must surely take it over
14:54 < Siyfion> I wish a Joyent employee would *hint, hint*
14:55 < Siyfion> I consider it a vital part of the NodeJS ecosystem
14:55 < diversario> debugging tools are vital parts of any ecosystem, I agree.
14:56 < Siyfion> And while WebStorm is decent, it's forcing users to purchase a solution and stuff they may not want (an IDE)
14:59 < euoia> Siyfion: Do we have any idea what the problem is with node-inspector and 0.10?
14:59 < Siyfion> Only that it will hit a breakpoint and thats about it... step over/in doesn't work
15:00 < hhutch> ls
15:07 < euoia> Siyfion: I just tested it and I'm not having any problems
15:08 < euoia> Siyfion: I cloned the git repo, ran npm install, and ran it using node bin/inspector.js
15:08 < euoia> Siyfion: This is with node 0.9.12 which I believe is identical to 0.10.0
15:08 < sinclair|work> MiracleBlue: you there?
15:08 < euoia> Siyfion: I ran my app with node --debug-brk app.js and can use step-over, step-info and set breakpoints
15:09 < Siyfion> It's only v0.10.0 onwards that seems to have an issue
15:09 < euoia> Siyfion: As I said, I think 0.9.12 is the same, but I'll upgrade to 0.10.0 anyway
15:09 < Siyfion> euoia: don't ask me why.. but v0.10.0 onwards is all I've had problems with..
15:13 < euoia> Siyfion: I upgraded to v0.10.1 and it still works
15:13 < Siyfion> euoia: Hmmm... Odd.
15:14 < euoia> Siyfion: did you run it by cloning the github repo?
15:14 < euoia> Siyfion: Can you try with a minimal application?
15:14 < Siyfion> euoia: No, I did npm install -g node-inspector
15:14 < Siyfion> euoia: will do
15:14 < euoia> Siyfion: not the it should really make any difference, but have a go cloning the repo and running like that
15:19 < Siyfion> euoia: Okay, first up, the sample "hello world" app on the main NodeJS site does the same thing... hits breakpoint, never resumes.
15:20 < Siyfion> euoia: trying the repo version now
15:20 < euoia> Siyfion: okay, let me know...
15:24 < Siyfion> euoia: ooooo wierd.
15:24 < Siyfion> euoia: the cloned version works...
15:24 < euoia> Siyfion: Nice... maybe the version that's published to npm is outdated?
15:24 < Siyfion> euoia: suggests that the fault lies in the NPM packages?
15:25 < Siyfion> euoia: Not sure, there's definitely an issue there though
15:26 < Siyfion> his deps are: "dependencies": {       "socket.io": "~0.8.2",       "paperboy": "~0.0.2"     }
15:26 < Siyfion> but when I do an NPM install I get socket.io 0.8.7 and paperboy 0.0
15:26 < Siyfion> 0.0.5*
15:27 < Siyfion> npm states that node-inspector is @0.2.0beta3
15:28 < Siyfion> Does it still work if you clone: https://github.com/dannycoates/node-inspector.git
15:28 < euoia> Siyfion: yeah, the date on that is 2012-06-20 and the last commit was 2012-05-29
15:28 < Siyfion> argh...
15:29 < euoia> Siyfion: that's what I cloned
15:29 < Siyfion> branch: update-ui?
15:30 < euoia> Siyfion: let's see... this branch requires async
15:31 < Siyfion> Yeah, I think it's this branch that's f-ed
15:32 < Siyfion> if only we could get him to roll the NPM version back to the master branch, I think most people would be okay again.
15:32 < euoia> Siyfion: agreed, I hit the step-* button and it greys them out
15:32 < Siyfion> Yup, kills everything until you kill node-inspector
15:32 < euoia> Siyfion: yep... perhaps you can suggest it in the github issue?
15:32 < Siyfion> Will do. :)
15:33 < euoia> Siyfion: Awesome! We made some progress
15:34 < Siyfion> Yup, well thought-out about the clone ;)
15:37 < Siyfion> I've posted an issue and tweeted the dev; he replied to me only a few days ago, so hopefully he'll notice and roll back the NPM version.
15:43 < euoia> Siyfion: excellent
15:58 < Siyfion> Yup, cheers for the help ;)
16:02 < ebright> How can I best achieve something similar to _.pluck in Node.js? Asynchronously
16:05 < euoia> ebright: I know you said Asynchronously but you know you can use underscore in Node.js
16:05 < ebright> using async.js if that helps
16:05 < Siyfion> Or Sugar.js (Sorry, had to get that in there)
16:06 < ebright> hi euoia, yeah, but that would then be blocking, no?
16:06 < euoia> ebright: yep, it would be... but if it's just an in-memory collection I don't really see the need to do it async
16:08 < euoia> ebright: it looks like you could do something like async.map(collection, function(item) { return item.propertyName }, function (err, results) { ... });
16:09 < euoia> ebright: although the documentation implies that the results may be in a different order to the collection, not sure if this is an issue
16:09 < euoia> ebright: mapSeries is provided if you need to preserve ordering
16:11 < ebright> euoia, that's an interesting point - I've been avoiding anything blocking like a bad rash, but it sometimes feels like overkill for map'ing arrays and such.. am I being over zealous using async.map everywhere..?
16:11 < lovemuffin> probably
16:12 < shesek> ebright, doing things asynchronously makes sense for I/O
16:12 < ebright> I can understand that
16:12 < lovemuffin> it depends on how long it takes for you to map
16:12 < shesek> or, more generally, in cases where your program would just be sitting there, blocked, while its waiting for something to come from elsewhere
16:12 < ebright> but little difference for in-memory things then? Like arrays send in a request
16:13 < shesek> if that's not the case, and you're just working with some data with no I/O involved, there's no point in making it asynchronous
16:13 < lovemuffin> there is if it takes a really long time
16:13 < lovemuffin> relative to what else is going on
16:13 < spencera> Also consider, if you are using an async library to iterate over an object you are calling a function for each object in the array, as well as a function to say "i'm done". Seems like a bit of unnecessary overhead if you're just returning a property of each object.
16:13 < euoia> I suppose there might be a use case if the array is huge
16:14 < shesek> lovemuffin, euoia, no
16:14 < shesek> if you're doing something that's done in nodejs without I/O at all, you wouldn't gain anything from it
16:14 < prettyrobots> Didn't one of you create a single purpose web app that converts files to CSV (or whatever)?
16:15 < lovemuffin> you would
16:15 < shesek> it still takes the same resources to compute it, and your CPU would be blocked for the same amount of time
16:15 < prettyrobots> It was a while back, but it was a web application where you upload a spreadsheet, or what have you, and it comes back as something generic.
16:15 < lovemuffin> because it would be put in node's thread pool versus being processed in the main thread
16:15 < prettyrobots> If that rings a bell, let me know.
16:16 < ebright> shesek, that's what I've been wondering.. Node.js is a single process right? if I call async.map() where does it go? Is it still the same process doing the work or is there another?
16:16 < lovemuffin> internally node has a threadpool
16:16 < spencera> really?
16:17 < spencera> lovemuffin: I'm pretty sure that's not ture
16:17 < spencera> true*
16:17 < ebright> right okay, so a call to async.map is dealt with by a different process and the callback lets the "main" process know it's done..?
16:19 < ebright> it has to be something like that, otherwise a large part of async.js functionality doesn't make any sense to me
16:20 < lovemuffin> spencera: https://github.com/joyent/libuv/blob/master/src/unix/threadpool.c
16:20 < spencera> ebright: a call to async creates a set of functions that are scheduled using process.nextTick all at the same time, they will then be called by Node's event loop, which will execute them in some unknown order. When each of the iterations is complete it calls back to async and says "I'm done", then async counts up those messages and lets you know when it get the last one, or an error.
16:21 < lovemuffin> not everything async requires a thread though
16:21 < euoia> lovemuffin: I guess that the thread will only pause when it's waiting on something... if you're processing an in-memory array I guess the thread will never pause - is that right?
16:22 < spencera> lovemuffin: added oct 12, 2012.. seems pretty new. In all the node servers I've run I have never seen more than one process in the process list.. wonder how I can start using this
16:22 < euoia> lovemuffin: and this behaviour is determined by libuv?
16:23 < lovemuffin> i dont know about that, the point was if you had a relatively large operation, you'd want to make it async so it doesn't block the current operation
16:23 < euoia> shesek: you said that in this case it there would never be any point using async. Is that right?
16:25 < euoia> lovemuffin: I think shesek was saying that even for a large operation of this kind (i.e. No I/O) there's no benefit to using async
16:25 < shesek> euoia, if its just doing some stuff in nodejs land, and doesn't use any external I/O (file system, database, http requests, sockets, etc), than it makes no sense to run it asynchronously, or using nextTick, or whatever
16:25 < shesek> nodejs's thread would still be blocked while you're doing the calculation
16:26 < shesek> or whatever it is that you're doing
16:26 < euoia> shesek: that makes perfect sense
16:26 < shesek> nodejs asynchronous model shines when dealing with external I/O
16:26 < euoia> I just wanted to clarify that with lovemuffin - the size of the array is irrelevant
16:26 < euoia> because it's not an I/O operation
16:26 < shesek> you can let that run in the background, and have your nodejs thread continue executing while its doing that stuff
16:27 < lovemuffin> well
16:27 < lovemuffin> it is relevant
16:28 < lovemuffin> if you take 10ms to process that array, thats 10ms you're blocking
16:28 < euoia> so I guess you could defer starting that thread until the end of the present tick
16:28 < lovemuffin> if its large enough to matter relative to whatever else is going , it is worth looking into
16:28 < euoia> but presumably once that thread starts it will never pause
16:29 < shesek> lovemuffin, unless you're doing something to offload that processing to another thread/process, running it "asynchronously" inside your main thread makes no sense :O
16:29 < euoia> I am a bit confused here
16:30 < lovemuffin> shesek: it still would make sense
16:30 < euoia> I am inclined to agree with lovemuffin here
16:30 < spencera> If you are processing your array in serial, then in between iterations other things could be happening
16:30 < euoia> a new thread would be created for each element of the array
16:30 < lovemuffin> no it can't
16:30 < lovemuffin> what other things can happen? it's processing your array, thats why you make it async
16:31 < shesek> spencera, how would that help?
16:31 < lovemuffin> if you have some completed async IO operations waiting for you, nope, you have to finish your array first, because its blocking
16:31 < shesek> you still need the same CPU time to finish that processing - does it matter if it blocks now, or blocks later?
16:31 < spencera> sorry, asynchronously processing in serial. Only scheduleing the next itteration after the prior completes
16:31 < euoia> shesek: it will be the same total CPU time
16:31 < euoia> shesek: probably more
16:32 < euoia> shesek: but split so that other threads get a chance to be processed - perhaps it doesn't really matter
16:33 < euoia> I get it now... the point shesek is making is that while blocking on I/O the CPU is doing nothing
16:33 < logicalcat> hello all. I'm looking for advice/help on using socket.io and "submodule"  
16:33 < euoia> but processing a large array is going to be done on the CPU regardlesas
16:33 < euoia> /s/regardlesas/anyway
16:33 < lovemuffin> forget threads...
16:33 < shesek> euoia, yep
16:33 < lovemuffin> it's as simple as the current event loop can't exit 
16:34 < lovemuffin> you're delaying it by 10ms or however long your large array takes to process
16:34 < ebright> does a function like async.map or async.filter offload the work to a different thread/process/whatever so that the main process can continue doing other things at the same time as the call to map/filter is being processed some place else?
16:34 < shesek> well, "while blocking on I/O the CPU is doing nothing", doing nothing in your nodejs thread - it obviously does something somewhere
16:34 < lovemuffin> and if it can't exit, any IO or async notifcations waiting for you can't be processed
16:35 < euoia> lovemuffin: I guess it's really a decision about how you want to do your scheduling
16:36 < euoia> lovemuffin: that 10ms process might take 50ms to complete if you run it async
16:36 < euoia> logicalcat: what's the question?
16:36 < lovemuffin> for instance, you make a http request that takes 1ms lets say, then you do a 10ms array processing operation, guess what? the http request took 1ms, but you won't be informed till 10ms later
16:37 < lovemuffin> euoia: sure fine maybe, but the point is it didn't block the main event loop during that 10ms or 50ms or whatever
16:38 < euoia> lovemuffin: yep I agree with you that there's benefit doing this way
16:38 < logicalcat> one module extends eventemitter: walker.emit('doc', data). Elsewhere, I'd like an express app to catch the emit and do something with it.
16:38 < M2Ys4U> You also reach a point of diminishing returns with threadding
16:39 < euoia> shesek: the system will be more responsive by running a large task like that async, even if it uses the same or a bit more cpu time
16:39 < logicalcat> is io.socket.on('doc',...) the right approach? Can't get it work.
16:40 < euoia> logicalcat: not sure why you need socket.io if you are just using events on the server
16:40 < shesek> euoia, what exactly do you mean by async? the operation itself isn't async at all - are you talking about scheduling it using nextTick?
16:40 < ebright> thanks lovemuffin for explaining
16:41 < euoia> shesek: we were talking about the async library
16:41 < euoia> shesek: specifically async.map
16:41 < euoia> shesek: sorry if that wasn't clear, but this started with ebright asking about async.map
16:42 < ebright> going back to my original question about "pluck"ing
16:42 < ebright> your suggestion was async.map(collection, function(item) { return item.propertyName }, function (err, results) { ... });
16:42 < shesek> euoia, if you give async.map an synchronous function, it'll run it synchronously
16:42 < shesek> let me show you an example
16:42 < logicalcat> euoia: Imagine running find / and dumping the results to the browser in real-time. Lots of little events.
16:42 < ebright> that would work, but I not all of my items have the .propertyName I'm interested in
16:43 < ebright> how would I deal with that, the only solution I see atm is to apply both a filter and a map to get this done..
16:44 < euoia> logicalcat: yep, I am convinced :> I am curious about async.map running synchronously though
16:45 < euoia> ebright: you don't want the items to appear in results at all if they don't have the property?
16:45 < shesek> euoia, http://jsfiddle.net/zKErV/
16:46 < shesek> look in the console, note how "the results" appear before "after async.map"
16:46 < shesek> meaning, async.map blocks until everything is computed (if the iterator is synchronous)
16:47 < euoia> shesek: is it possible to run that in the browser?
16:47 < shesek> async can't magically make an synchronous function asynchronous somehow, it doesn't work that way
16:47 < shesek> if the functions you're giving async are blocking, than async will block too
16:47 < shesek> euoia, sure. the browser has an event loop, just like nodejs
16:48 < lovemuffin> no it wont block!
16:48 < lovemuffin> that is, it won't block the event loop
16:49 < shesek> http://pastie.org/private/lcgsjb3lkogqi7nd0n7y7a
16:49 < shesek> (same as the fiddle, on node)
16:50 < lovemuffin> yes, but it wont block the current event 
16:50 < shesek> lovemuffin, it will. async calls the iterator synchronously. if the iterator calls the callback synchronously too, than the whole thing is synchronous
16:50 < shesek> and it will block
16:50 < shesek> otherwise, you'd see "after async.map" ... "the results are:"
16:52 < lovemuffin> oh well, i dont know how async.map works
16:52 < s3shs-> I have a question about domains.   I see callbacks for 'error'.  But is there an ultimate callback for 'end'?  And do I have to end explicitly, or does it end when run finishes somehow?
16:52 < shesek> but the results show up before "after async.map", meaning that its blocked until they're computed
16:52 < lovemuffin> whether its expecting what you give it to be async, or it turns it async
16:52 < shesek> compare with that: http://jsfiddle.net/zKErV/1/ (the iterator calls the callback asynchronously, using setTimeout)
16:52 < lovemuffin> i was never talking about async.map, just async in general
16:53 < lovemuffin> i dont know how async.map works
16:53 < shesek> there, you see that it continues to "after async.map", and in some point in the future it shows the results
16:53 < fb55> s3shs-: as soon as a domain isn't referenced anymore, it will be garbage collected
16:53 < euoia> shesek: yep I see it
16:53 < shesek> lovemuffin, you can't turn something into asynchronous
16:53 < shesek> either it is or it isn't
16:54 < shesek> feed async.map with synchronous iterator, and it'll execute synchronously
16:54 < s3shs-> So if I have a connection in my domain that I need to return to a pool, how would I hook in for that?  I don't think I can rely on garbage collection.
16:54 < shesek> give it an asynchronous iterator, and it'll execute asynchronously
16:54 < s3shs-> (Since GC can happen at unpredictable times.)
16:54 < shesek> you can't somehow make regular non-IO operations to be asynchronous :O
16:55 < Ingo2> Hi, i am new Node newbie and i´d like to know if someone knows this book and tell me if its any good to enter the Node.js world:  http://t.co/furkQsYWSO
16:55 < euoia> ebright: by the way, the example I gave you earlier was wrong... the signature of the second argument, it's a function like function(item, cb)
16:55 < shesek> the only thing you can do is use nextTick, which adds it to the end of the current event loop, so it'll get processed sometime later and not right now - but it usually does no good
16:55 < euoia> ebright: but as I think we have determined, there's no point using async.map for that
16:55 < mattmcclure> Ingo2: What's you're familiarity with JS overall?
16:56 < fb55> s3shs-: domains are event emitters, so you could add an "end" event easily
16:56 < shesek> euoia, yeah, well, its expecting an asynchronous function, which can't return a value... it has to use a callback argument
16:56 < euoia> shesek: yep, of course it makes sense
16:56 < s3shs-> / methods that are called when trying to shut down expliclitly bound EEs
16:56 < s3shs-> var endMethods = ['end', 'abort', 'destroy', 'destroySoon'];
16:56 < s3shs-> That's from the domain.js master.
16:57 < s3shs-> (Oooh, typo in the comment.  Quick, someone check in a typo fix!)
16:57 < s3shs-> :-)
16:58 < s3shs-> So fb55, would I just do mydomain.on('end', shutDown), then?
16:58 < s3shs-> And is it called even on error, etc?
16:59 < euoia> shesek: thanks for clearing that up... I would have expected the function that is the second argument to async to be called at the end of the event loop
16:59 < ExxKA> Hey Guys. I am considering sharing an npm cache in my git repository to make sure all dependencies are available even if they break on the npm registry. Are packages cached in the cache folder architecture dependent or are they in their most general form?
16:59 < euoia> shesek, lovemuffin it was an enlightening discussion for me
16:59 < s3shs-> Ahh, looking at the source, yes.
17:00 < ExxKA> Sry for leaving, I am back now, had a problem with my client. I take it no one replied yet?
17:00 < shesek> euoia, stacking things at the end of the event loop, except for very rare cases, doesn't do any good
17:01 < shesek> I see people that are trying to manage execution priority and scheduling with nextTick, and its usually does more harm than good
17:01 < fb55> s3shs-: these methods are called when the domain is disposed
17:01 < shesek> you're gonna have to take the time to process it at *some point*; why blocking in random point in the future is any better than blocking now?
17:02 < shesek> that future random point is going to block something
17:02 < s3shs-> fb55, yeah, in response to GC.  I'd like something a little tighter.
17:03 < euoia> shesek: I think scheduling algorithms do generally try to process shorter jobs first
17:04 < euoia> shesek: for improved average responsiveness
17:04 < fb55> s3shs-: you can call domain.dispose()
17:04 < fb55> which will close all bound event emitters
17:04 < s3shs-> At that point I can just release the thing myself.  :-)  But yeah.
17:05 < s3shs-> Thanks, fb55
17:06 < wizardwerdna> The new streams confuse me
17:07 < Ingo2> more or less
17:08 < wizardwerdna> I suppose my question is this: when two streams are coupled, using the "readable" event and write, and that is the be-all, end-all, why is the pipe implementation based on the old-school stream API?
17:09 < wizardwerdna> That is to say, does "readable" and "write" adequately handle back-pressure by itself, or are we stuck doing that with the spew technology?
17:13 < fb55> wizardwerdna: i guess the pipe implementation uses the old interface as it 1) needs to be provided for backwards compat and 2) the implementation using old interface is actually shorter
17:14 < Brad_> This is just a general question since I'm new to node.js is there a social media template/example using express, mongo?
17:15 < wizardwerdna> fb55: hmmmm... is it really shorter?  it seems like creating the streams, adding an onReadable that reads, then writes ought to do it.  Unless there is more to the backpressure management than meets the eye after the  included buffering.
17:16 < wizardwerdna> A second question is whether there is any way to tell when chunks are dropped because buffers were too small...
17:17 < fb55> wizardwerdna: buffering works by adding buffers to an array
17:18 < fb55> wizardwerdna: so the maximum number of buffers that are saved is 2^32
17:19 < wizardwerdna> fb55: so the high and low water marks are the size of individual buffers, is that it?
17:19 < wizardwerdna> fb55: and it makes as many buffers are necessary to mediate the impedence mismatches?
17:19 < fb55> wizardwerdna: https://github.com/joyent/node/blob/master/lib/_stream_writable.js#L195-L201
17:19 < fb55> this is what the high watermark does
17:20 < fb55> it returns false when you should stop writing
17:20 < fb55> but that doesn't mean anything
17:20 < fb55> you could ignore it
17:21 < fb55> and pipe should work with old streams
17:22 < asturel> anyone can help me a bit with jade? is there a way to use js code in plain html?
17:22 < fb55> that inherit from the old stream interface
17:22 < fb55> and only provide a data event
17:22 < wizardwerdna> fb55: that's very helpful, thank you.  If I may say it this way, the old pipe implementations were used for backcompat, and in the new API, simply read when readable and write, and the buffering (back pressure management) is automatically?
17:24 < asturel> like <input type="text" name="os1" maxlength="200" value="#{asd}">
17:25 < wizardwerdna> <fb55> at least until there is no memory left....
17:25 < fb55> wizardwerdna: you might want to pause() the origin when the writable stream returns false, but you don't have to, it will work as expected
17:27 < wizardwerdna> fb55: doesn't pause() or resume() trigger the old API stuff?
17:28 < wizardwerdna> fb55: ok, clearly some experimentation and review of the code is called for before i ask more questions, but you have been very helpful
17:29 < fb55> wizardwerdna: when you want to pipe, just use .pipe(), it's the best way of doing this
17:29 < wizardwerdna> fb55: i like the elegance of the .pipe chain, but i often want to generate progress information for various reasons.  It would be nice if the pipe call provided for a progress callback whenever data is transferred between them
17:29 < wizardwerdna> fb55: in the absence of that, i don't know any way to intercept when a trunk is relayed between the two
17:29 < ExxKA> I am off - have a nice weekend!
17:29 < ExxKA> :)
17:29 < fb55> wizardwerdna: you could write a transform stream that does exactly that
17:30 < SNE> Hi all, I'm new to node.js (with lots of background of DB's, PHP & Javascript) and I need to create a chat application which allow people to connect through FB and be at many chat rooms at once, I saw Passport and thought that maybe I should use that, then I read that it need to be used in Express framework... my question is, if I create an app which doesnt serve any real web pages (only server json responses to ajax from other sites), should I work with Passor
17:30 < wizardwerdna> ok, so  source.pipe(reporter).pipe(sink)
17:30 < SNE> t & Express? is there something better for me?
17:30 < fb55> wizardwerdna: exactly
17:30 < wizardwerdna> omigosh... i almost get it!
17:31 < wizardwerdna> fb55: thanks a lot... i appreciate the guidance, although it feels flithy using .pipe knowing it uses the icky old stuff
17:32 < wizardwerdna> fb55: its a revelation that the important new changes were the simplicity of building transforms and having pipe return the destination
17:33 < fb55> wizardwerdna: stream.pipe always returned the destination, at least since 0.8 days
17:34 < SNE> my question was too long? :)
17:35 < fb55> SNE: Passor?
17:35 < mattmcclure> fb55: he meant passport
17:35 < SNE> passportjs.org
17:35 < fb55> SNE: when you only need facebook, use a facebook api client
17:36 < SNE> fb65: what about Express framework? should I use that or its just an overkill for my project?
17:37 < fb55> SNE: the only time i've used passport, it was a pita, i wouldn't recommend it
17:38 < SNE> fb65: ok kewl
17:39 < SNE> fb65: got a recommendation to a good node.js/FB library?
17:39 < wraithgar> i'm using passport for local auth and while the documentation was a little misleading it got worked out and Works For Me(tm)
17:40 < SNE> wraithgar: u had to use Express framework for that?
17:41 < wraithgar> Yes, SNE
17:41 < fb55> wizardwerdna: the new streams mainly provide a nicer way of saying when you need the data and remove a lot of caching problems
17:41 < fb55> SNE: when you know it, it's probably a reliable option, otherwise, there are more specialized modules, eg. restify
17:46 < aroman> hi, perhaps I'm seriously misunderstanding something, but can anyone explain why when making an http request in node 0.10 the 'end' event will not fire unless I (inexplicably) listen to the 'data' event -- even if I'm not doing anything with it? Why should simply listening to the 'data' event cause 'end' to be triggered? Here's a quick gist with the minimal use case explaining what I'm wondering about… https://gist.github.com/aroman/5223252
17:47 < SNE> fb65: correct me if I'm wrong but restify does not handle FB connections right? 
17:47 < SNE> wraithgar: thx
17:47 < fb55> SNE: nope, it allows you to write rest apis
17:47 < fb55> aroman: that's due to changes to the stream api in 0.10
17:48 < SNE> fb65: ok will check that, thx
17:48 < fb55> aroman: you can also .resume() the request
17:48 < wizardwerdna>  aroman: i think you can solve it with a simple call to resume()
17:48 < aroman> fb55: I see. is there something I can read to school me about what's changed?
17:48 < wizardwerdna> aroman: the nodejs blog has the full poop
17:49 < bradleymeck> aroman: listening to 'data' swaps it into streaming mode, without the backpressure stuff 
17:49 < fb55> aroman: the official changelog on http://blog.nodejs.org/
17:49 < bradleymeck> in 0.10 backpressure is applied and streams are not drained so they cannot end unless they are resumed / read until end
17:49 < aroman> ahh, alright, looks like i have some blog posts to read
17:49 < aroman> thanks for the info 
17:50 < aroman> deep "WARNING: If you never add a 'data' event handler, or call resume(), then it'll sit in a paused state forever and never emit 'end'."
17:50 < aroman> derp*. looks like I need to be reading this blog more regularly :P
17:51 < wizardwerdna> aroman: alternatively you can put in a "readable" handler
17:51 < wizardwerdna> and suck the data out...
18:07 < bradleymeck> anyone know of an easy way to list the versions available in http://nodejs.org/dist that wont involve scraping?
18:08 < bencevans> bradleymeck: checkout how n or nvm (version managers) do it
18:08 < jocafa> bradleymeck:  tags in the git repo?
18:09 < bradleymeck> bencevans: nvm and n scrape it
18:10 < bradleymeck> guess i could
18:11 < bencevans> bradleymeck: I'd scrape it too then, I don't know of any json or any other format they provide & n's always worked for me :)
18:14 < segomos> tags in the git repo is cooler
18:14 < shesek> bradleymeck, I'd open a feature request for that
18:14 < shesek> makes sense to expose it with something that's easily machine-consumable, like json
18:15 < bencevans> definitely, I'm quite surprised that it isn't already though
18:15 < daslicht> is it possible to stream audio via socket.io
18:15 < daslicht> ?
18:16 < jaha> anyone know a good package for generating ical files? Learnboost seemed to have a rather robust one which I cant track down anymore
18:16 < bradleymeck> daslicht: yes, see turntable.fm for an example (not using socket.io, but same principle)
18:16 < bradleymeck> dont pipe pcm, send full chunks
18:17 < monokrome> Does anyone know how I can republish a broken publish on npm?
18:17 < daslicht> nay suggestions how to get started and how to learn more how to creat such audio streaming things ?
18:17 < wizardwerdna> monokrome: nom publish --force
18:17 < shesek> daslicht, should be possible, but if I could rely on the client having webrtc enabled than I would use that instead
18:17 < shesek> see http://www.webrtc.org/
18:18 < monokrome> Thanks. Someone version bumped. Is there a way to undo that?
18:18 < bradleymeck> daslicht: http://dailyjs.com/2013/03/22/kievll-capturing/ has a good demo
18:18 < bradleymeck> and the github link
18:18 < daslicht> cool 
18:18 < daslicht> i have a look
18:19 < shesek> daslicht, still quite experimental and isn't supported in most browsers tho, I only use it for intranet projects
18:19 < wizardwerdna> i think there is an npm unpublished, but i don't know the consequences
18:19 < daslicht> I like to create a radio streaming server 
18:19 < daslicht> still not sure which tech to use :)
18:19 < daslicht> node vs python
18:20 < shesek> node works quite well for streaming data between clients
18:20 < shesek> apps that involves a lot of I/O are perfect candidates for node
18:20 < daslicht> thank you very much for the input 
18:20 < daslicht> I am going to study the links now
18:21 < shesek> if you're building as a fun side project, I'd take the opportunity to learn webrtc
18:21 < shesek> if its something that people should actually use, you're probably better off with web sockets
18:21 < daslicht> this should be used later for a music shop / radio thing 
18:22 < monokrome> unpublish doesn't work :/
18:23 < shesek> monokrome, I deleted a package with it a few days ago
18:23 < shesek> you're using --force (as running unpublish without --force says), right?
18:23 < monokrome> Maybe it doesn't work for me because I'm a maintainer and now the owner
18:24 < monokrome> Yes
18:25 < monokrome> oh
18:25 < monokrome> maybe it did work but the site is caching old data or something
18:31 < runvnc> has anyone used tap before? I can't figure out how to get it to print out the test descriptions. even when a test fails it doesnt print it
18:32 < shesek> runvnc, I'm just console.log()ing the tap output directly (via some helper functions)
18:32 < shesek> its really simple
18:32 < runvnc> i.e. t.test('status'), function(t) { t.equal(1,2); t.end()}) I just want it to output 'status'
18:33 < runvnc> what do you mean console.logging the tap output. where do I get the tap output? does it have the descriptions I put for my tests?
18:33 < runvnc> like if I have a description or label for a test when that test fails I just need to output that descriptoin
18:35 < runvnc> are you using tap-consumer shesek? or something
18:36 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:36 < runvnc> I was hoping there was a command line option I could put in my scripts. like tap --print-out-the-test-descriptions-please ./test
18:39 < jocafa> —no-seriously
18:41 < runvnc> maybe I should just use mocha or something
18:41 < runvnc> or here is this nodeunit thing that uses tap
18:45 < daslicht> We're very sorry, but while we would love to let you in and rock out with us, we need to currently restrict turntable access to only the United States due to licensing constraints. 
18:45 < daslicht> :/
18:47 < fb55_> daslicht: unblock-us.com
18:47 < fb55_> also works for hulu, netflix, pandora and a number of other sites
18:48 < bc> can someone who is using centos and node tell me, among the mountains of crap advice in my google search, is the best repository to use to keep this up to date? Or do I just say screw it and use the tarball?
18:49 < Acrack> hello
18:49 < monokrome> ello
18:50 < andrew12> hola
18:50 < Acrack> im new to node.js and i'm getting a stupid error
18:50 < fb55_> Acrack: there are no stupid errors in node.
18:50 < Acrack> with simple code, error: connection aborted during the loading
18:51 < fb55_> Acrack: /sarcasm
18:51 < Acrack> :D
18:51 < Acrack> lemme pastbin you the code
18:55 < Acrack> here it is : http://pastebin.com/0eusK4ef
18:55 < Acrack> how call the files, the little serv and the client
18:55 < slicky> Has anyone ever used wkhtmltopdf? or does anyone have a good alternative to it? We seem to be having problems with it on production and... well it's ruining my day. :(
18:55 < euoia> slicky: I have used it
18:56 < Acrack> after the login im not getting the alert
18:56 < slicky> euoia, how familiar are you with it?
18:56 < euoia> slicky: it's quite temperamental
18:56 < slicky> yes, yes it is
18:56 < euoia> slicky: I had some problems with it as well
18:56 < euoia> slicky: I'm just finding my notes
18:56 < euoia> slicky: there's several versions of it if I remember
18:57 < euoia> slicky: what problem are you having?
18:57 < slicky> We're using it on several clusters of servers (linux) and I either don't have the env set up properly or something else is going wrong. It randomly fails for no specific reason.
18:57 < slicky> It worked perfectly for about a year.
18:57 < euoia> slicky: what version are you using?
18:57 < logicalcat> hello all, I got a "best practices" question: In a single-page Express app with a few tabs, each tab may get populated with long lists of stuff from sub-processes via emits. QUESTION: should each tab/route get its own EventEmitter or should I just use the single Express "app"?
18:58 < slicky> Then, kablammo... we made some additions to our codebase and html output and it just doesn't want to print, fails... funny thing is it works great on windows, locally.
18:58 < slicky> let me check
18:58 < monokrome> Does anyone have ideas regarding why this project installs fine through NPM but can't be required? https://github.com/rentlytics/json-brunch
18:58 < slicky> euoia: 0.9.6
18:58 < euoia> slicky: first thing to try is to update to at least 0.11.0
18:58 < slicky> I did try building our own static binary version, but it failed from the get-go
18:59 < Acrack> can somebody tell me if there is something wrong in my script please ?
18:59 < Acrack> http://pastebin.com/0eusK4ef
18:59 < slicky> euoia, do you know of any good guides for it or anything? the documentation is pretty sparse and on Ubuntu, we had a ton of problems with the 0.11.x version.
19:01 < euoia> slicky: I just googled around... I got it to work by running it with xvfb-run
19:01 < euoia> slicky: this was on Ubuntu
19:02 < slicky> That's a start at least. Thanks euoia... I'll look into it more
19:02 < RLa> US army uses metric system?
19:02 < euoia> slicky: I just searched for "xvfb-run wkhtmltopdf" and it looks like I have been to this page before: http://drupal.org/node/870058
19:02 < slicky> beautiful
19:03 < euoia> slicky: the way I'm invoking wkhtmltopdf is similar to that
19:03 < RLa> since when wkhtmltopdf needs framebuffer?
19:04 < slicky> I wish someone would make something a little more robust and more frequently updated.
19:05 < RLa> hm, interesting, US army uses metric indeed
19:17 < ebright> shesek you still around?
19:17 < shesek> yep
19:18 < ebright> is this you? http://www.shesek.info/
19:18 < shesek> indeed
19:18 < shesek> I haven't updated it for a long time tho
19:18 < ebright> that quite a coincidence then!
19:18 < shesek> I started posting interesting bits of code as gists instead
19:19 < ebright> since I was googling something completely unrelated just now
19:19 < shesek> heh, really? what was that?
19:19 < ebright> and stumbled upon your site having spoken to you for the first time earier today
19:19 < ebright> html-escaped underscore template values
19:20 < ebright> that's what I was googling, and you might be able to help me
19:20 < ebright> I was pondering, why/when should I use <%=?
19:21 < ebright> I've used <%= exlusively so far, but ran into an issue with a value containing '
19:21 < ebright> solution, use <%-
19:22 < ebright> now I'm thinking.. I should probably be using <%- more often
19:22 < shesek> ebright, <%- encodes special HTML characters
19:23 < shesek> unless you specifically want to allow embedding HTML - yes, you should always use <%-
19:23 < zeromodulus> Hmm... this is so weird... when I make a .save() call in the REPL, the object I'm calling .save() on gets an id, but when I do it from a script, the object I call .save() on does not get an id.
19:24 < shesek> if you're embedding user content with <%=, you'll have an XSS vulnerability
19:24 < shesek> but other than that, it just won't render text with special html characters correctly
19:24 < ebright> really, ohdear that doesn;t sound good - that's what I'm doing :/
19:24 < s3shs-> If I, say, stuff a connection in to my domain object, do I need to add(connection) or can I just assign it?
19:25 < shesek> if the title of an article is "Three reasons <h3> is so awesome", it shouldn't actually render an <h3> in there
19:25 < s3shs-> Because with assigning it it seems the domain is being GC'd.
19:25 < shesek> just the text "<h3>"
19:25 < ebright> right
19:25 < shesek> which is what <%- %> does (< is replaced with &gt;, > with &lt; [or is it the other way around? I always confuse gt/lt)
19:26 < shesek> and some other characters too (", ', and &)
19:26 < ebright> So <%= should only really be used to insert html (hadn't even thought of using templates to do something like that.. was using jquery/zepto for that)
19:26 < shesek> hmm... and "/". I wonder why that is, "/" shouldn't be a special character
19:27 < slicky> <%= is for escaped strings, <%- is for raw output of the string, simple as that
19:27 < shesek> ebright, yeah, exactly. like if you have a blog post with HTML as its content
19:27 < shesek> s/$/s
19:28 < ebright> thanks!
19:28 < slicky> Always use <%= with user content, if you're outputting something other than a partial or html and using <%-, you might be doing something wrong, imo
19:28 < ebright> really good to know/understand this now
19:28 < shesek> slicky, isn't that the other way around?
19:28 < ebright> slicky isn't it the other way round?
19:29 < slicky> ejs?
19:29 < ebright> oh, haha
19:29 < zeromodulus> O.o
19:29 < shesek> Template functions can both interpolate variables, using <%= … %> ... If you wish to interpolate a value, and have it be HTML-escaped, use <%- … %>
19:29 < slicky> ejs is <%= for escaped, <%- for unescaped
19:29 < zeromodulus> This script executes perfectly in the REPL, but not as a stand-alone script... O.o
19:30 < slicky> that's why you use <%- partial(path) %> to output partials
19:30 < shesek> they should've probably made escaped the default with <%
19:30 < slicky> because it'll actually output < and > instead of &lt; and &gt;
19:30 < slicky> <% is code blocks
19:30 < shesek> oops, yeah, I meant <%=
19:30 < slicky> <% if(condition) { %> have some html out here <% } %>
19:31 < shesek> making HTML escaping the default with <%= %> was suggested and discussed at https://github.com/documentcloud/underscore/pull/253 (the original pull request that added HTML escaping support [that I submitted])
19:32 < shesek> but was rejected eventually, probably because they didn't want to break old apps relying on that
19:33 < shesek> I still think they should've done it... but if 2 years ago it wasn't possible, than it definitely isn't possible now :(
19:33 < ebright> I'm gonna perform a replace all on my code
19:33 < slicky> by HTML escaping, you're talking about doing <%= '<a>' %> would turn it into &lt;a&gt;, right? I'm relatively sure that's what it currently does. Maybe I'm completely missing the question/point/reality. :)
19:34 < ebright> http://underscorejs.org/#template says it's <%- to escape
19:34 < shesek> "Template functions can both interpolate variables, using <%= … %> ... If you wish to interpolate a value, and have it be HTML-escaped, use <%- … %>" (http://documentcloud.github.com/underscore/#template)
19:34 < shesek> <%= .. %> outputs the value as-is, <%- ... %> HTML-encodes it
19:34 < slicky> oh, well there's the problem. I'm talking about EmbeddedJS used in express: https://github.com/visionmedia/ejs
19:34 < slicky> <%= is escaped, <%- is unescaped
19:35 < shesek> slicky, well, I linked to a pull request in underscore... so I was referring to underscore :)
19:36 < andrew12> are there any documentation tools like YARD (http://yardoc.org) for node things?
19:36 < slicky> my bad :D
19:36 < shesek> damn, its been two years since I submitted that pull request? it doesn't seem so long ago :-(
19:37 < slicky> I work with ejs every day and when I saw <%= in a node.js channel, I assumed express/ejs
19:37 < s3shs-> Which jQuery is best with node 0.10?  The old one I have is busted.  There seem to be  few of them and I'm confused.
19:37 < s3shs-> Thanks!
19:38 < ningu> s3shs-: huh? it shouldn't matter at all. jquery is client side.
19:38 < shesek> ningu, you can run jQuery on the server-side, to parse documents
19:38 < s3shs-> I'm using jquery just fine on the server side because jquery isn't just about modifying the dom.
19:38 < s3shs-> But when I updated to 0.10 of node, the jquery broke.
19:38 < shesek> s3shs-, if its not too late, I would recommend switching over to cheerio
19:39 < ningu> shesek: yes, but that's not just "using jquery", it's using jsdom or whatever
19:39 < shesek> http://matthewmueller.github.com/cheerio/
19:39 < s3shs-> Looking now.
19:40 < ningu> I agree that cheerio is much better if you can use it
19:40 < ningu> some of its api is a bit different
19:40 < ningu> the selectors are basically the same
19:40 < s3shs-> (Says the guy who just said "huh?  jquery is client side."  ;-)
19:40 < shesek> yeah - the API is definitely not the same
19:40 < s3shs-> I don't really need it to parse HTML.  I'm using goodies like $.proxy, etc.
19:40 < eighty4> shesek: looks nice, thanks for the tip
19:40 < shesek> but its quite similar, should be easy to switch over from jquery
19:40 < ningu> s3shs-: yes, because "using jquery with node" doesn't make sense without explaining *how* you're using it
19:41 < samholmes> nodemon needs dredlocks.
19:41 < eighty4> "core jQuery designed specifically for the server"
19:41 < s3shs-> Well, one might notice that we're here in the node room.  And then one might notice that just *maybe* the person asking the question isn't completely clueless.
19:41 < shesek> s3shs-, hmm
19:41 < ningu> s3shs-: the point is, if you don't mention which module you're using or how you're using it, we can't say anything about compatibility
19:41 < shesek> s3shs-, you can use Function.prototype.bind instead of $.proxy
19:42 < shesek> s3shs-, some of the jQuery helpers are part of ES5, others can be found in underscore
19:42 < s3shs-> shesek, too many words.  ;-)
19:42 < shesek> no reason to load all of jQuery for that
19:42 < shesek> oh, no, you don't type all of that, its a method on the function
19:43 < shesek> $.proxy(fn, ctx)  ==  fn.bind(ctx)
19:43 < shesek> its even shorter :P
19:43 < s3shs-> And... that won't work when used as an element of async.
19:43 < shesek> (do note that it didn't exists on ES3, so you'll need a shim for old browsers *cough* IE *cough*)
19:43 < s3shs-> sfaik.
19:43 < samholmes> JavaScript will be the fastest language in the world, right?
19:43 < samholmes> That's what Douglas said
19:43 < shesek> s3shs-, won't work when what?
19:44 < ningu> samholmes: yes, I'm just waiting for the day when it happens
19:44 < ningu> for now, it's still plenty fast enough for me
19:44 < slicky> it'll definitely be faster than asm ....heh
19:44 < s3shs-> shesek, you can't pass function calls to async.serial, for example.  you have to pass functions.  That's where $.proxy comes in handy.
19:44 < samholmes> It is very fast!
19:44 < samholmes> I like seeing modules beat C in speed.
19:44 < samholmes> like marked
19:44 < samholmes> :D
19:44 < shesek> s3shs-, .bind() is an higher-order function, that returns a function
19:45 < shesek> it doesn't actually call it - it just returns the function bound to some context, exactly like $.proxy does
19:45 < samholmes> However, I'm wondering what he was talking about, Douglas. Was it something to do with how JS's processing was distributed on CPU cores?
19:45 < ningu> samholmes: have you seen the video "node.js explained" at http://www.youtube.com/watch?v=L0pjVcIsU6A ? he mentions some benchmarks vs. various other languages
19:45 < ningu> java was significantly faster
19:45 < ningu> for those benchmarks anyway
19:45 < samholmes> 30 minutes! OMFG!
19:45 < ningu> samholmes: haha
19:45 < shesek> samholmes, I didn't see what he was talking about, but people are optimizing the sh*t out of javascript those days
19:45  * samholmes needs more time
19:45 < ningu> samholmes: it won't be that educatonal for someone who knows node
19:45 < shesek> probably more than a lot of other languages
19:46 < ningu> I can't remember the name of the benchmark site
19:46 < samholmes> http://jsfiddle.net/sammy/dNamz/
19:46 < s3shs-> So instead of async.series([$.proxy(A.f, A, 'hello')]), I'd do async.series([f.bind(A, 'hello')]) ?
19:46 < shesek> s3shs-, yep
19:46 < ningu> erm... why do you need f.bind() in an async.series? if that's all you're doing..
19:46 < ningu> but anyway it would work
19:46 < ningu> oh, sorry.
19:47 < ningu> obviously f is what's runnign async :)
19:47 < samholmes> http://jsfiddle.net/sammy/dNamz/1/
19:47 < samholmes> "You have about 40,527,000 minutes left"
19:47 < samholmes> eek
19:47 < FunnyLookinHat> lol
19:47 < s3shs-> There are other utils I'm using in jquery, though.  So I still need a good implmentation for node.
19:47 < shesek> s3shs-, or you can use http://documentcloud.github.com/underscore/#bind
19:47  * samholmes built that calculator.
19:47 < shesek> s3shs-, look at underscore
19:48 < shesek> s3shs-, it should have everything that jquery has, and some more (AFAIK)
19:48 < slicky> ugh, why isn't it 5pm yet?
19:48 < s3shs-> Why is the internet like this?  "I'm looking for a taxi."  "Try Russia."
19:48 < shesek> plus some of those utilities already exists in ES5
19:48 < shesek> s3shs-, because underscore was built as a library of utility functions
19:49 < shesek> while jQuery is a dom manipulation library, that sprinkled some utilities on top of that
19:49 < slicky> s3shs-, don't you mean "I'm looking for a taxi." Response: " http://lmgtfy.com/?q=a+taxi "
19:49 < shesek> makes much more sense to load a library meant to be used for utility functions than loading a DOM manipulation library and use its utilities :)
19:49 < shesek> underscore is much more lightweight than jquery
19:50 < shesek> and makes much more sense for SSJS
19:50 < samholmes> FunnyLookinHat: How many minutes do you have left?
19:51 < FunnyLookinHat> samholmes, 37,449,000
19:51 < s3shs-> No, I already googled it and found a bunch of implementations.  I only want to know which one users like with node since the last one broke with 0.10.
19:51 < samholmes> Oh nos!
19:51 < FunnyLookinHat> I know , right?
19:51 < FunnyLookinHat> I'm screwed!
19:51 < s3shs-> shesek, I've considered underscore.
19:52 < s3shs-> But figured I already had jquery stuff all around.
19:52 < slicky> lodash ftw
19:53 < s3shs-> shesek, thanks for the bind heads up.  You're right.
19:54 < slicky> I wonder what percent of people trying to use node only know javascript through jQuery.
19:55 < s3shs-> Javascript is so much more than jquery.  Async, Domains, Lambda chains.  JS is a wild ride once you get in to it.
19:55 < slicky> yup, it's probably my favorite language at the moment
19:56 <@mbalho> ooh what is a lambda chain
19:56 <@mbalho> callbacks that call other callbacks?
19:56 <@mbalho> or just any function chain that is more than 2 long?
19:56 < samholmes> http://jsfiddle.net/sammy/Ly6Ge/embedded/result/ This is more acurate
19:57 < jrajav> mbalho: It's a fluffy made-up term
19:57 <@mbalho> oh
19:58 <@mbalho> like FRP or HOF?
19:59 < bradleymeck> lambda chains are just the things used when all of the flow control libraries duke it out on the streets, and we all know the situation isnt getting any better
19:59 < jrajav> Programming paradigms, sub-paradigms, and meta-paradigms are also extremely fluffy, but (perhaps unfortunately) they are not made-up. At least not at this point.
20:01 < s3shs-> bradleymeck.  Heh.
20:03 < slicky> lambda brass knuckles and lambda steel pipes are my favorite
20:13 < Alexander> Hi all
20:13 < zeromodulus> -.-
20:13 < zeromodulus> Well... I'm considering writing database queries by hand.
20:13 < zeromodulus> And doing away with ORMs.
20:14 < AlexFridman> Hi all
20:14 < AlexFridman> somebody known howto increase handle limit in NET module, because now Im have EMFILE error
20:15 < AlexFridman> ulimit don't solve problem
20:15 < tjfontaine> that's not a limit in the net module, it's a part of your environment
20:16 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
20:16 < AlexFridman> Im setup max files to 100000 but node.js can't open more 2000 handle
20:17 < AlexFridman> ulimit -n 100000
20:21 < bnoordhuis> AlexFridman: what operating system?
20:21 < AlexFridman> RHEL6 x64
20:21 < AlexFridman> and tested system Ubuntu Server latest x64
20:22 < AlexFridman> node v0.8.16 and v0.10.1
20:22 < AlexFridman> compiled from source
20:22 < AlexFridman> gcc 4.6.3
20:24 < bnoordhuis> AlexFridman: check your /etc/security/limits.conf, maybe you're running into a system-wide limit
20:24 < bnoordhuis> you'll need to log in again after you change that file btw
20:24 < AlexFridman> no limitation specifed
20:24 < AlexFridman> config is clear
20:25 < AlexFridman> Im try use long-polling for about 10-20k of TCP sockets
20:25 < bnoordhuis> okay. it's still a system limit though :)
20:25 < AlexFridman> after about 4k system work very unstable on powerful server
20:25 < AlexFridman> 2xXeon / 32GB RAM
20:26 < AlexFridman> Erlang server normally work with over 50k connections
20:26 < AlexFridman> on same system
20:26 < bnoordhuis> the point still stands, EMFILE is the kernel telling node 'no more file descriptors for you'
20:26 < AlexFridman> Im know it :)
20:27 < AlexFridman> in previor version of node it's was been hard limit
20:27 < bnoordhuis> hard limit?
20:27 < AlexFridman> like V8 garbage heap limit
20:27 < zeromodulus> :|
20:28 < bnoordhuis> that's... completely unrelated
20:28 < zeromodulus> so, instances should not be exported?
20:28 < zeromodulus> but rather, constructor functions?
20:28 < AlexFridman> Instance communicate between with dnode
20:29 < AlexFridman> 8 server processes and 1 client
20:29 < zeromodulus> I'm building a little database module, with the hope that it will export a connected database handle.
20:30 < zeromodulus> I have a config module which loads all of the settings, but now I'm trying to build a 'handle' module that initializes the client connection and readies it for queries.
20:30 < ningu> zeromodulus: why not just use something like any-db?
20:31 < zeromodulus> Because I haven't heard of it. :|
20:31 < zeromodulus> Until now.
20:31 < zeromodulus> But, it looks like it might be kind of what I'm looking for.
20:32 < zeromodulus> I'll give it a try. :P
20:35 < zeromodulus> :|
20:35 < zeromodulus> I must be doing something horribly wrong.
20:37 < zeromodulus> I'm trying to initialize the connection in its own module, but that appears to be like herding cats.
20:38 < spencera> I find that it's usually best to have a db connection per location that's using it, rather than a single connection for the whole app. that way you get pipelining somewhat naturally
20:38 < zeromodulus> hmm... I figure I'll have to do that anyway.
20:39 < lovemuffin> zeromodulus: i think the problem you're having is, you have no idea when the connection is connected
20:40 < zeromodulus> hmm...
20:41 < zeromodulus> probable.
20:43 < monokrome> Does anyone have ideas regarding why this project installs fine through NPM but can't be required after installing? https://github.com/rentlytics/json-brunch
20:44 < monokrome> It seems like "main" pointing to lib/index.js should make things work fine.
20:52 < spencera> I don't see a lib directory in the repo
20:54 < shesek> spencera, its ignored  by .gitignore
20:54 < shesek> but probably still published to npm
20:54 < shesek> (a common practice when publishing coffeescript libraries)
20:55 < spencera> hmm, interesting
21:01 < arduinoob> quit
21:07 < monokrome> spencera: It's pushed to npm, setup.js builds src into lib
21:07 < monokrome> no reason to push a bunch of files that are generated by the project itself into git imo
21:10 < thisismon> i'm trying to debug an issue why why node server stops responding to requests
21:11 < thisismon> I have a metrics class where I'm doing setInterval(Metrics.flush ...
21:11 < thisismon> so metrics are being flushed to disk once every minute
21:12 < thisismon> as requests come in, i also update the metrics
21:13 < thisismon> so is it possible that the thread is getting locked because I am accessing objects in the metrics class as requests come in, while at the same time setInterval is firing?
21:14 < ningu> thisismon: no.
21:14 < ningu> thisismon: I suspect you aren't using the async api correctly in your request loop
21:14 <@mbalho> thisismon: what api are you using for flushing to disk
21:14 < ningu> yeah, that could be it too
21:14 <@mbalho> same thing :D
21:17 < thisismon> fs.open(logfile, 'a', 666, function(err, fd) { fs.write ...
21:17 <@mbalho> fs.writeFile, createWriteStream or writeFileSync?
21:18 <@mbalho> or is your code on github
21:18 < thisismon> fs.write(fd, buffer, 0, buffer.length, null, function() { fs.close(fd) }
21:19 < ningu> thisismon: it might be helpful to pastebin the request loop
21:20 < ningu> also, do the requests stop after one minute, when the first interval would be triggered?
21:20 <@mbalho> thisismon: is it possible that your flushes are stacking up?
21:20 < ningu> and does it work fine without the setInterval?
21:21 < thisismon> requests do not stop, they are continuous
21:21 < thisismon> it does work fine if i completely remove the metrics logging code
21:22 < thisismon> here's what the class looks like
21:22 < thisismon> https://gist.github.com/anonymous/f3f4397fc4b03bfa1207
21:23 < ningu> thisismon: but you just said your problem was the server stopped responding to requests. that's what I meant.
21:25 <@mbalho> ningu: could be that an error occurs and you arent handling it so it causes a weird state on the first fs operations and the second ones cause mroe weirdness
21:26 < thisismon> nignu: it's actually really weird behavior. 1 type of request succeeds (express), but other requests( socket.io) don't
21:33 < faceleg|sleep> nignu! you should change your name
21:41 -!- mode/#Node.js [+o TooTallNate] by ChanServ
21:42 -endast:#Node.js- Hi i have to install a older version of daemon. npm install daemon@0.5.
21:42 < endast> But the command fails: ./install: line 4: node-waf: command not found 
21:43 < endast> i am using v0.10.1
21:43 < endast> Can i manually install node-waf and use it with v0.10.1?
21:45 <@TooTallNate> endast: node-waf is gone
21:45 <@TooTallNate> endast: what module are you trying to install?
21:45 <@TooTallNate> they should be migrated over to node-gyp by now…
21:45 < endast> https://github.com/indexzero/daemon.node
21:46 < endast> Yes but i have to use a older version. daemon v1.0 breaks daemonize in haraka
21:48 <@TooTallNate> endast: i believe that module is replaced by node child process' "detached" option
21:50 < endast> ToTallNate: I see
21:55 < faceleg> ningu: bnoordhuis guor thanks for all your help people, I "get" V8/C++ a lot more now, now when I spend an hour coding I actually get something done, as opposed to spending 3 hours a night for a week to achieve the same result
21:56 < faceleg> better watch out, once my understanding levels up a bit more I'll start hacking on node itself ;P
22:00 < rwaldron> is Domenic_ === Domenic Denicola?
22:01 < Domenic_> indeed
22:01 < rwaldron> good
22:01 < rwaldron> so, funny thing
22:01 < rwaldron> you're definition of "you are welcome"...
22:01 < Domenic_> oh noes
22:01 < rwaldron> "I am doing something awesome you should thank me."
22:01 < rwaldron> with me?
22:01 < rwaldron> then andrea...
22:02 < rwaldron> " if you follow @rwaldron ... and you do, you might realize he used that few days ago about a TC39 meeting ... I didn't take that bad"
22:02 < rwaldron> I really don't want to get in this thread
22:02 < Domenic_> fair
22:02 < rwaldron> but I totally meant it according to your definition
22:02 < rwaldron> hahaha
22:02 < Domenic_> haha ^_^
22:02 < rwaldron> because Array.prototype.find and findAll are awesome and yes, you're welcome
22:02 < rwaldron> :D
22:02 < Domenic_> exactly!
22:03 < rwaldron> of course, I meant it in a playful way
22:03 < rwaldron> he's being a dick
22:03 < rwaldron> per the usual
22:03 < Domenic_> +1
22:04 < rwaldron> He missed the effing point of my tweet "It's nice to see pro-strict-mode that's advocating for the right reasons."
22:04 < rwaldron> as in, I don't want to tweet about the stuff andrea doesn't like
22:04 < Domenic_> i knew i shouldn't have engaged but i had a moment of weakness.
22:04 < rwaldron> it happens
22:04 < rwaldron> but you're right
22:04 < rwaldron> you said what we're all thinking
22:11 < SandorKrasna> Hello everyone, I have a live twitter feed streaming through a socket I am using ntwitter, I am also using backbone on the front end where i have mulitple backbone views from a router 
22:12 < SandorKrasna> how can I make it so node app.js only starts streaming twitter when i'm on the twitter backbone view
22:12 < SandorKrasna> and when I leave that view it stops the stream
22:27 < AAA_awright> I've been asking every so often, but usually late at night, I figure I'll ask again:
22:27 < AAA_awright> Anyone want to provide quick feedback on my application? http://magnode.org/download
22:29 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
22:31 < Sicp> hmmm...no idea where to ask about Weinre?
22:33 <@mbalho> #phonegap
22:34 < Sicp> yea, already there
22:35 < Sicp> strange how it won't see my device
22:35 < Sicp> anyway, thanks
22:37 < SandorKrasna> so my backbone view initiates a socket.emit to the server which triggers my ntwitter module to start streaming, when I leave that view how can I stop the twitter stream
22:49 < ericelliott> using express / restify... how do you distinguish error handling middleware from other kinds of middleware? It seems every request passes through my error handling middleware -- so I need to detect to see if it's an actual error?
22:50 < ericelliott> are there some good examples I can look at for error handling in express or restify?
22:54 < korilo> good evening
22:54 < gf3> Is it?
22:55 < korilo> gf3, yup in italy
22:56 < gf3> Oh good
22:56 < korilo> better say night it's 11 pm
22:56 < perlitch> websockets: multiplex a single connection or open a connection for every channel of data?
22:56 < CoverSlide> Viva Hetalia!
22:57 < CoverSlide> just be aware that browsers have a connection limit
22:57 < CoverSlide> so don't try opening like 20 websockets and expect them to work
22:57 < lovemuffin> whats the purpose anyway?
22:57 < taterbase> Is there a way to tell when child.fork has ended or error'd?
22:58 < korilo> taterbase, shouln't it return err?
22:58 < lovemuffin> its always better to reuse a connection than to create new ones
22:58 < CoverSlide> taterbase: http://nodejs.org/api/cluster.html#cluster_event_exit ?
22:58 < perlitch> i am building a single page web app that can have multiple widgets with different data sources
22:58 < taterbase> korilo: what if the error occurs asynchronously
22:59 < taterbase> CoverSlide: thanks
22:59 < perlitch> the dev making the server already set it up in a non-multiplex fashion
22:59 < CoverSlide> err wait, http://nodejs.org/api/child_process.html#child_process_event_exit
22:59 < korilo> mmm don't get what you are saying..... child.fork(function(err){ if (err) dosomthing;)}) taterbase 
22:59 < lovemuffin> perlitch: slow web app then
22:59 < perlitch> stating that all examples he found online for jetty (java, the technology he was designated to use), its always one channel, one connection
22:59 < korilo> don't actually know if it works but whatever
22:59 < taterbase> korilo: I'm forking actual files
23:00 < korilo> looking into this now 
23:00 < taterbase> child.fork('/worker.js')
23:00 < logicalcat> hi all, Is it bad form to stick socket.io javascript stuff in the primary layout.jade file? Seems wrong. I do not have an index.html at this point.
23:01 < mattmcclure> logicalcat: Will you be using the Socket.io javascript stuff in all of your pages? If so, layout.jade is appropriate
23:01 < mattmcclure> (imo)
23:01 < CoverSlide> jetty supports websockets? i thought you had to use webbit for that
23:01 < SandorKrasna> how do I stop a stream on socket.disconnect
23:02 < korilo> mmm taterbase seems .fork doesn't have callback
23:02 < taterbase> right... that's why I'm trying to attach a listener
23:02 < korilo> just emit an error in the chilf
23:02 < taterbase> on('error) should work
23:02 < korilo> *child
23:02 < korilo> and make the parent listen
23:02 < korilo> yeah you got it
23:03 < logicalcat> mattmcclure: yep, it's a single page with a few 'tabs', each with it's own set of socket.io stuff. Unfortunately, it's not working at the moment :)
23:04 < logicalcat> mattmcclure: ...and I'm investigating whether the socket.io javascript is to blame.
23:04 < slicky> var Friday = function() { var beer = new Beer(); beer.open('guiness'); beer.on('empty', function(){ beer.discard(); Friday(); } }
23:05 < korilo> beer.open('Menabrea');
23:05 < slicky> beer.selection() => ['guinness']
23:06 <@mbalho> Nexxy: one sec, testing an app!
23:07 <@Nexxy> mbalho, lol
23:07 <@Nexxy> oh man, cross-channel communication
23:08 <@Nexxy> it's like FHSS for social media
23:08 < willc> So I would use Node in place of say, apache?
23:08 < korilo> you could
23:08 < logicalcat> My app.js receives an emit and then tries to pass it to socket.io via io.sockets.emit('stuff', data)...but it's not getting to socket.io
23:08 <@Nexxy> willc, sure
23:08 < willc> Sounds neat
23:09 <@Nexxy> willc, but it's not meant for serving static files
23:09 <@Nexxy> willc, you would use it in place of apache + mod php or php-fpm or w/e the cool php kids use
23:10 <@Nexxy> or any other of the apache gateways
23:10 < korilo> php's not for kid only :P
23:10 < slicky> cool php kids?
23:10 < slicky> isn't that an oxymoron?
23:10 <@Nexxy> korilo, I like your sense of humor
23:10 < korilo> ahahah late here
23:11 < willc> So then Node is to replace a server side language such as PHP?
23:11 < korilo> yep
23:11 <@Nexxy> willc, and beyond!
23:11 < willc> I like the idea of being able to scale back a language.
23:12 < slicky> node aims to be the language of the internet
23:12 < slicky> well, javascript does
23:12 <@Nexxy> it already is
23:12 < willc> JS is kind of running the show these days from what I can tell.
23:12 < slicky> depends on which religion you subscribe to, but, IMO i agree, Nexxy :D
23:12 <@Nexxy> slicky, I'm just talking about the web...
23:13 <@Nexxy> browsers
23:13 < slicky> same
23:13 <@Nexxy> you can't really just run ruby or python in a browser
23:13 < khrome> node is both a replacement for apache and php but is also versatile enough for other types of applications
23:13 < khrome> can't really run noe in one either, zing!
23:13 < khrome> err, node
23:14 <@Nexxy> khrome, ... node is js
23:14 <@Nexxy> js is already in the browser
23:14 < khrome> yeah, but npms and binary packages are not ;)
23:14 <@Nexxy> you can also use things like browserify to add whatever is missing in the browser
23:14 < slicky> ECMAscript
23:15 < slicky> NaCL/Pepper aims to change that
23:15 <@Nexxy> I only write LiveScript
23:15 < st_luke> lifescript
23:15 < willc> I current have been using PHP for CMS solutions, but would be interested in going the route of JS. From what I am told JS is a better language than PHP
23:16 < slicky> php is like the red-headed stepchild of programming
23:16 < khrome> willc, how much exp do you have?
23:17 < jocafa> http://phpsadness.com/
23:17 < jocafa> ¬¬
23:17 < AAA_awright> willc: What sort of solutions are you looking for exactly?
23:18 < AAA_awright> slicky: Perfectly acceptable but universally hated anyways?
23:18 < willc> Well, I lack formal training, but have been sitting infront of one of these machines since elementry school and I'm going on 29... I probably could have had a more fulfilled social live if it wasn't for these machines. So to answer your question for exp, quite a bit, but not of the formal kind.
23:18 < willc> life*
23:18 < khrome> node is much cooler, but it's going to require you shoulder more load… that's my 2¢
23:19 < willc> AAA_awright, websites for clients. More small business than anything.
23:20 < mattmcclure> logicalcat: Sorry I got pulled away for a sec. What's the problem you're seeing?
23:20 < willc> I would like to get into app building. Which from my understanding, an app is just an isolated/packageable website.
23:20 <@Nexxy> wobsite*
23:21 < gf3> netsite
23:21 < jocafa> "It's dot commmm..."
23:21 < gf3> Similar to a "zine" or a "tube"
23:21 < willc> If I could stop learning PHP and focus on JS, I'm all for it. 
23:21 < slicky> AAA_awright, exactly
23:22 <@Nexxy> willc, you will love it
23:22 < logicalcat> mattmcclure: a bunch of nothing :) I can't seem to receive the socket.io event sent from the server. I suspect the javascript in the jade partial is wrong, but nothing is obvious.
23:22 < willc> I saw a video of a guy teaching a class of people the basics of Node
23:22 < slicky> willc, I have no formal education, all self taught and can keep up with the best of 'em
23:23 < slicky> so, keep it up, learn new things and keep at it
23:23 < mattmcclure> logicalcat: wanna put something in a gist so I can take a look?
23:23 < logicalcat> mattmcclure: should the script call come after the block content?
23:25 < mattmcclure> logicalcat: It shouldn't matter ultimately.
23:25 < mattmcclure> It would be a lot easier for me to help debug if I could see the code, though
23:25 < logicalcat> mattmcclure: making a gist now...
23:25 < mattmcclure> Ok cool
23:26 < willc> That's one thing that has me curious... how does one keep DB passwords private with a clientside language?
23:26 <@Nexxy> willc, you don't make db connections from the client
23:26 <@Nexxy> willc, you keep them on the server
23:27 < zomg> You could encrypt them with four time rot13</badadvice>
23:27 < slicky> rot13+base64, ya noob :D
23:28 < slicky> sheesh dontcha know nethng
23:28 <@Nexxy> but wouldn't doing rot13 twice be more secure?
23:28 < AAA_awright> willc: Yeah, you don't, you use an HTTP API
23:28 < azylman> I heard that if you do it seven times it comes back to the way it started
23:28 < AAA_awright> Or something designed for that
23:29 < slicky> it's like five left turns
23:29 < slicky> makes the person chasing you dizzy and throwing up
23:29 < slicky> it's like Math.pow(password.length, rotIterations);
23:29 < slicky> difficulty
23:30 < logicalcat> mattmcclure: https://gist.github.com/rbhughes/5225533
23:31 < willc> Here goes the learning curve! lol
23:31 < slicky> just dive in and start simple... it'll start to make sense over time
23:32 < AAA_awright> willc: Do you have MongoDB installed/running?
23:32 < slicky> js pre-processor pjsp
23:32 < willc> AAA_awright, nope. I'm a PHP user. I have been using wamp
23:32 < slicky> multi-million dollar idea, right there
23:33 < slicky> so, windows?
23:33 < willc> correct
23:33 < slicky> considering, wamp :D
23:33 <@mbalho> Nexxy: http://maxogden.github.com/voxel-painter/
23:33 < slicky> right on, no biggie
23:33 < willc> Any windows users with recommondations for a command prompt interface to work with?
23:35 < willc> Though from what I am noticing, most browsers have a good enough console built in these days
23:35 < slicky> for windows, i recommmend powershell
23:35 < logicalcat> willc: been using powershell, but it's just the least awful. Also, npm hijacks your colors.
23:35 < mattmcclure> logicalcat: Try emitting something outside of the app.on block. 
23:36 < willc> thanks for your recommendations slicky and logicalcat
23:37 < slicky> honestly, if you can swing it and want to really get your feet wet, get a cheap linux distro to play on set up
23:37 < willc> I have an old laptop I could install linux on. Used to have it as a dualboot of win/ubuntu
23:38 < slicky> a lot of the stuff in node is platform agnostic, but if you're going to be doing anything with it in the future for reals, you might invest some time into learning how to use it on linux
23:38 < slicky> you'll find it quite nice to be able to write something that works on both windows/linux/macos without much trouble at all switching between the three
23:38 < logicalcat> mattmcclure: this worked, called from within on('connection'...: socket.emit('zzz', {blah:'blah'});
23:39 < slicky> without needing apache or anything else to really make it work
23:39 < willc> I've noticed quite a few developers have went the route of mac and are all about the commandline. 
23:39 < mattmcclure> yup, that's what I was expecting.
23:39 < mattmcclure> logicalcat: does that solve your issue?
23:39 < CoverSlide> ohhh shit ... we just got a makerbot bitches!
23:40 < slicky> i prefer working in linux, but I love my games too much to leave windows completely behind
23:40 < slicky> CoverSlide, 3d printer?
23:40 < willc> Well the old laptop is a p4 so I'm sure it can handle a bit of JS lol
23:41 < logicalcat> mattmcclure: no, the data events are coming from another module; app.js should just be pushing them to socket.io for display.
23:43 < willc> j backbone
23:43 < logicalcat> mattmcclure: I'd like to avoid having the modules get involved with socket.io (they're primarily command-line utilties)
23:44 < CoverSlide> hell yeah
23:46 < mattmcclure> logicalcat: ah ok. at least we know our client side code works now
23:48 < logicalcat> mattmcclure: yeah, there's something fishy calling socket.emit inside app.on(). Maybe some async weirdness? I'll try with some sort of callback...
23:51 < mattmcclure> logicalcat: you mind letting me see a little more off app.js?
23:51 < geymed> hi
23:51 < logicalcat> mattmcclure: not at all--it's mostly junk :)
23:51 < mattmcclure> no worries
23:51 < mattmcclure> if you have this stuff in a repo somewhere I could check out, it might make things a little easier
23:55 < logicalcat> mattmcclure: updated gist: https://gist.github.com/rbhughes/5225533  (I'm pushing to the regular repo now too)
23:57 < mattmcclure> logicalcat: want to take this one to a PM
23:58 < logicalcat> mattmcclure: main repo: https://github.com/rbhughes/lc_browser_app   A module doing the emitting: https://github.com/rbhughes/lc_file_crawlers
23:58 < logicalcat> mattmcclure: not sure what that means :)
23:59 < mattmcclure> Private Message, but this should be enough to debug. Gimme a sec to take a look
--- Log closed Sat Mar 23 00:00:05 2013
