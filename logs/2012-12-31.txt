--- Log opened Mon Dec 31 00:00:56 2012
00:01 < andu> Innocentus, I'd quess you'll need to match your route to array of page paths? just like any other?
00:10 < owen1> i try to install a process monitoring script (https://github.com/visionmedia/mon/) and it tried to copy the script into /usr/local/bin but bin is owned by root. is it ok to chown this folder to the one that do the install?
00:12 < Innocentus> andu: You must imagine that the following way: There is a defined route with segments - like this: /:language/@Apple
00:12 < Innocentus> andu: there are gettext files which are parsed which each contains a key for 'Apple'
00:13 < Innocentus> andu: and then there are there are for three locales (with gettext) three routes available: /en/apple /fr/pomme /de/Apfel
00:13 < Aria> owen1: Sure, or sudo the install -- I prefer chown for single-user systems, work as root (or an admin group) for multi-user
00:14 < Innocentus> andu: of course one could stuff something together - but a module would be much nicer
00:14 < Aria> Yow. I18N in the routing layer. That sounds painful.
00:14 < Innocentus> no
00:14 < Innocentus> it is nice and efficient
00:14 < Innocentus> an user should see the url in his/her language
00:14 < Aria> Sure. Just complicated.
00:14 < Innocentus> with php this is possible, I want to try this with node also
00:14 < Aria> Wouldn't be so bad for a recursing router, where the task is broken up by segment.
00:15 < Aria> Of course, then, one wonders whether the URL means anything.
00:15 < Innocentus> Aria: well, I just add a locale with the translation - and immediatly there the website is available also in this new language
00:15 < Innocentus> Aria: also important for seo
00:15 < Innocentus> Aria: there is a difference
00:15 < Aria> Yeah? What's the difference for SEO?
00:15 < Aria> (Who measured, out of curiosity?)
00:15 < Technodrome> node.js ftw! 
00:15 < Innocentus> Aria: I read it, tried it and measured it
00:16 < Innocentus> Aria: On the other hand, an user will much likely click on a link which url is understandable
00:16 < isaacbw> I'm on a train. This is exciting
00:16 < isaacbw> amtrak
00:16 < Innocentus> Aria: would you click on a link with url '/whatever.php?id=3'
00:16 < Aria> Innocentus: Yes.
00:16 < Aria> (Well, assuming that "php" wasn't a bad sign to begin with)
00:16 < Innocentus> Aria: or a link like this: '/en/interesting-title-here'
00:16 < Aria> Heh. Every measurement I've ever seen has said "users don't look at URLs"
00:17 < Innocentus> Aria: they do - and google too
00:17 < Aria> Innocentus: Also yes. But I often hate the titled ones. They spoil surprises!
00:17 < Innocentus> Aria: lol :)
00:17 < Aria> Innocentus: Measurements or it didn't happen ;-)
00:17 < Aria> First rule of real SEO: "Anything you can do in isolation won't improve your rank relative to other sites"
00:17 < Aria> Basic game theory here.
00:17 < owen1> Aria: got it thanks.
00:17 < Aria> There is so much bad advice and snake oil out there.
00:18 < owen1> where is a common path to have the log files and the pid files of node apps? is it the app path or /var/log/  and /var/run/
00:18 < Innocentus> there are many articles about this - thake this for example: http://seo-hacker.com/url-seo-tutorial/
00:18 < owen1> (/var/log and /var/run owend by root, i believe)
00:18 < Innocentus> Aria: or this one: http://blog.kissmetrics.com/seo-errors-ecommerce-websites/
00:18 < Aria> Innocentus: There are no measurements there.
00:19 < Innocentus> Aria: not so easy
00:19 < Aria> Indeed! So instead everyone makes up rules that have no bearing on reality.
00:19 < Innocentus> Aria: argh - http://www.malcolmcoles.co.uk/blog/seo-friendly-urls-myth-and-fact/
00:19 < Aria> (Sorry -- I've been a web host and ISP for too long. There's a snake oil salesman born every minute.)
00:19 < Innocentus> Aria: ok, I like them :)
00:19 < Aria> Bingo ;-)
00:20 < Innocentus> Aria: so I want to use them - I am sure this will also be possible with Node Js
00:20 < Innocentus> Aria: Update 18 March: Matt Cutts of Google has posted a video saying that having keywords in your URL "does help a little bit".
00:20 < Aria> Yeah. Design your URLs to mean something. In the case of /de/Apfel, well, you'd better have an article localized in german there. But if it's an application interface, chances are you want to do language based on the Accept-Language headers, and you don't want to work that way at all.
00:20 < Innocentus> hmmm
00:20 < Innocentus> Aria: no application interface (what means that)?
00:20 < Innocentus> Aria: Update 18 March: Matt Cutts of Google has posted a video saying that having keywords in your URL "does help a little bit".
00:21 < Aria> Well, there's a pretty strong distinction between "publishing information on the web" and "making web apps" ... Design patterns for one will be badly done if you apply them to the other.
00:21 < Innocentus> Aria: every little bit is important :)
00:21 < Innocentus> Aria: so a web app could have ugly urls?
00:21 < Aria> No, every little bit is usually a waste of time if you can spend that time getting good quality linking from relevant inbound sites ;-)
00:21 < Innocentus> Aria: right :)
00:22 < Innocentus> Aria: so NodeJs is not so suited for multilang websites? - not web apps?
00:22 < Aria> Innocentus: Well, a web app should probably have RESTy URLs, and represent resources. But they are functional, rather than informational concerns.
00:22 < Innocentus> Aria: ah, right
00:22 < Aria> Whereas links in web _information_ should focus on durability, but they're almost entirely GET-driven, relatively static content (even on the most dynamic sites)
00:22 < Aria> Twitter has screwed this up regularly. they can't decide whether they're content or app.
00:23 < Innocentus> Aria: this makes sense
00:23 < Aria> It shows in the mistakes they make.
00:23 < Aria> (#! being a case in point)
00:23 < Innocentus> Aria: twitter is an hybrid?
00:23 < Aria> Yeah. Twitter can't make up its mind.
00:23 < Innocentus> Aria: what do you think it is?
00:24 < Aria> I think it can't make up its mind ;-)
00:24 < Innocentus> Aria: yes
00:24 < Aria> And I think it shows in the business decisions they keep making.
00:24 < Aria> It's an awkward tension.
00:25  * joe-node0 is new to js app development
00:25 < joe-node0> having formerly haunted the lands of Joomla
00:25 < Innocentus> Aria: I would say being an app is better
00:25 < Innocentus> Aria: the people will use them
00:25 < Aria> I'd have to say I'd separate the two concerns and try to do them separately, well.
00:25 < andu> Innocentus, sorry only see your messages now.. localised routing is not my idea of fun.. unless you route everything to auto google translate ;D
00:26 < Innocentus> andu: the route segments are translated by humans
00:26 < Aria> I'd have an app to interact with Twitter with, but I'd let tweet-streams be more content-oriented pages; I'd set up conversation views, and let people elect to publish them.
00:26 < Innocentus> Aria: so you would have twitter and content.twitter?
00:26 < Aria> No, I'd have pages within the login wall behave app-like, and public-facing pages be content-like.
00:27 < Aria> And stop trying to both in the same page.
00:27 < Aria> (though loading a toolbar and stuff onto content pages for logged-in users might be a win)
00:27 < Aria> Their whole experiment with client-side rendering was an interesting lesson. They went full circle, and are back to server-side rendering of initial views, because it lowers the time to actually displaying something.
00:28 < Aria> So they're swinging back in the content direction. But they're in an awkward place where they can't monetize either behavior.
00:29 < isaacbw> who is doing that aria?
00:29 < isaacbw> The only server-side rendering I know of is for SEO
00:29 < isaacbw> angularjs and similar frameworks are still going strong
00:29 < Aria> isaacbw: Twitter, their initial page loads are back to being server-rendered.
00:31 < isaacbw> oh right. I think you have to decide whether what you're doing is more of a website or a web application
00:31 < isaacbw> disregarding the common usage of web application
00:31 < andu> can have best of both with unified code. initial page is serverside as it comes down, from there on it updates on events
00:31 < isaacbw> I'm thinking things like google docs or other highly dynamic applications that can't afford to send back to the server every time the user does something
00:32 < TehShrike> Well, they may send it back
00:32 < isaacbw> another way of thinking about it is if url routes make any sense
00:32 < TehShrike> But they don't wait to hear back from the server before updating the view
00:32 < Aria> andu: I'd debate some of that, but I bet it's teh right approach as often as it is not in a web app
00:33 < TehShrike> In which cases do you want the back button to take the user to a previous "page"
00:33 < Aria> That's actually a great determining factor.
00:33 < Aria> That's the dividing line between "app" and "content" distilled ;-)
00:33  * TehShrike bows
00:34 < samholmes> andu: Something awesome. Well, I'm just working on visitor tracking.
00:35 < samholmes> How does statcounter know where a user is going and stuff?
00:35 < andu> samholmes, i've done something like that too, if youd like to see
00:39 < Innocentus> sooon the web won't work without javascript anymore
00:39 < Innocentus> I mean client-side javascript
00:39 < andu> Innocentus, :D
00:39 < andu> I think javascript will become main desktop/mobile/everything tool
00:40 < andu> OS level dev
00:40 < andu> with some security fixes ofc
00:40 < Innocentus> andu: because it is good or because one is forced to use it because it is the only scripting language?
00:40 < Innocentus> andu: but I like it
00:40 < andu> I love js
00:41 < Innocentus> *only scripting language for web
00:41 < andu> I dont love all js though
00:41 < Innocentus> andu: what do you think about dart
00:41 < andu> didnt like the syntax
00:41 < andu> its going backwards
00:42 < Innocentus> I would like javascript with constructors and such things
00:42 < Innocentus> I miss them
00:42 < andu> noooo
00:42 < andu> get rid of all that bs
00:42 < andu> you dont need it
00:42 < Innocentus> so it is obsolete?
00:43 < Innocentus> I mean constructors
00:43 < andu> with functions == objects it solved the paradigm
00:43 < rpcesar> hello all, i'm scouting around for an opensource library of some sort for "generic selectors", used for state management in a communication platofmr. that is, I would like 
00:43 < Innocentus> andu: if they would make javascript coffeescript-like, then it would be perfect?
00:43 < rpcesar> something like jQuery, but for raw data
00:43 < Innocentus> rpcesar: some crazy guess: Google Refine ?
00:43 < andu> coffeescript have some problems with syntax that cause paradoxes
00:43 < andu> in a sense js as well
00:44 < Innocentus> andu: so both still got some weaknesses - they should fix them for the next js version
00:44 < Sicp> when following "Creating a webserver with Node.js" tutorial, "Unlike environments such as PHP, Node keeps running the process on the server until we stop it."
00:44 < Sicp> PHP doesn't do this?
00:44 < Innocentus> Sicp: this is a nice feature
00:44 < samholmes> But, how do sites like statcounter know a visitor's path?
00:44 < andu> the )}; stuff in js is weird tho, dont know how to get rid of that
00:44 < Sicp> I mean I have to put the process in a loop, in PHP, Innocentus ?
00:44 < Innocentus> no
00:44 < Sicp> ah wait
00:44 < Innocentus> PHP isn't so fine grained
00:45 < Innocentus> a php script is called, processed and that was it
00:45 < Sicp> so you cannot create a web-server with PHP?
00:45 < Sicp> because you need something that is always listening
00:45 < samholmes> If you just have a img element injected into the page, how could I know a visitor's path and stuff?
00:45 < Innocentus> Sicp: yes, Apache for example
00:45 < konobi> you can write a web server in php just fine
00:45 < Innocentus> the php parser exposes an interface (cgi interface) or uses the Apache2 Handler and it is called for a request
00:46 < Innocentus> konobi: yes, you can call it cli-style
00:46 < Innocentus> konobi: but normally it is not intended
00:46 < Sicp> ah, so you need ninja stuff to do with PHP what can be done with a few lines of code here in Node
00:46 < Sicp> that's what the guy is trying to say
00:46 < Innocentus> for async fast stuff node js is very good
00:47 < rpcesar> quick google and I don't think thats what im looking for, iterally what im looking for... its more about syntax then anything else. basically a grouping mechanism that works with raw json objects. For instance lets say I have a list with json objects [{classes=[]},{classes=[]}] , i would like the ability to go fn('.something').<selector function>
00:47 < Sicp> you see I'm writing a mobile app and I am going to have a server for handling requests from the app, I also have to write the server-side stuff
00:47 < andu> Sicp php is a parser that just runs through your code and generates your page.. node is a process that maintains state (memory/connections etc) without closing
00:48 < Innocentus> rpcesar: a LINQ equivalent?
00:48 < rpcesar> kinda sorta. more like jquery without the dom
00:48 -!- mode/#Node.js [+o konobi] by ChanServ
00:48 < rpcesar> basically im looking for a selector system not tied to the dom (nor a database for that matter)
00:48 < Aria> rpcesar: The functional primitives in underscore aren't bad for that: list.select(function(e) { return e.something })
00:49 < rpcesar> hmmm, that might be an option i need to look into
00:49 < rpcesar> i glazed over _, didnt really understand what it was for
00:49 < mbalho> rpcesar: also check out npmjs.org/cheerio
00:50 < joe-node0> wait a sec this rings a bell
00:50 < Aria> rpcesar: _ is just a utility kit. Nothing special. But its primitives are well thought out, since json data is just ... data. Nothing weird about it.
00:50 < rpcesar> a link from that landed me to http://backbonejs.org/
00:50 < joe-node0> rpcesar: I think you might find JSONSelect interesting, here go look: http://jsonselect.org/#overview
00:50 < rpcesar> im looking over it now, but that SEEMS to be close to what i want
00:51 < mistertwig> too good to be true
00:51 < joe-node0> um no?
00:51 < joe-node0> it's all good
00:51 < mistertwig> i'm just kidding :P
00:51 < rpcesar> that looks REALLY interesting joe
00:51 < mistertwig> wait what is this?
00:51 < mistertwig> the site doesn't really describe it
00:52 < mistertwig> that just looks like JSON
00:52 < joe-node0> it's JSON magic for your data sifting needs
00:52 < mistertwig> ohh it's selecting dating
00:52 < mistertwig> data***8
00:52 < mistertwig> from json
00:52 < rpcesar> a little different direction then I was planning on going syntax wise (how they use classes) , but that's the cruft of what im looking for
00:52 < mistertwig> neat
00:53 < mistertwig> wow joe-node0 that's pretty cool
00:53 < mistertwig> .name > *
00:53 < mistertwig> :P
00:53 < rpcesar> yea, thats exactly what im trying to do, efficiently represent sifting through raw json data. i lve always loved jquery selectors, and think it would make a very fitting system for describing other objects as well.
00:53 < mistertwig> so where would this be useful?
00:54 < mistertwig> like what would be the advantage of using this rather than parsing the JSON and just calling the data normally
00:54 < mistertwig> so i noticed you can do like
00:54 < mistertwig> .name .first
00:54 < joe-node0> anywhere you have to look through gobs of json to find what you're looking for it's npm ready as well
00:54 < mistertwig> why wouldn't you do myObject.name.first
00:54 < Innocentus> good night people
00:54  * joe-node0 shrugs...
00:54 < mistertwig> i know it can do some things besides just getting direct data but then what would be the point?
00:54 < joe-node0> it's just a CSS suger-coat to make object traversal easier
00:55 < mistertwig> what's the point of selecting all the strings or numbers
00:55 < rpcesar> mistertwig: think about binding an event model to raw json structures
00:55 < Aria> rpcesar: I love backbone. but it's an entirely different layer of tool.
00:55 < rpcesar> yea, looking closer i dont think thats it, what joe pointed too seems to be what im looking for
00:55 < rpcesar> that looks more like an ORM
00:56 < Aria> Yeah. jsonselect is neat, too.
00:56 < MI6> joyent/node: Ben Noordhuis v0.8 * acc085e : doc: add CONTRIBUTING.md - http://git.io/qfcvxw
00:56 < Aria> Backbone? Not ORM. Just reactive models.
00:56 < Aria> (and DOM view controller code structure)
00:58 < rpcesar> yea, this needs to be hyper fast though, im running untrusted code in a child process, which is wrapped in a special context that defines certain core functionality. im trying to create a cute interface to expose this functionality
01:02 < joe-node0> does anybody here use ember.js?
01:08 < Domenic_> Easy Unix-noob question: I want to daemonize and also run a second program, but x & && y gives a syntax error
01:08 < mmalecki> Domenic_: this isn't really how you daemonize. I'd go with nohup
01:09 < Sicp> you can daemonize with (process) &
01:09 < Sicp> send the sending of a process to the background, to the background
01:09 < mmalecki> but then, when you log out the process gets killed
01:09 < Domenic_> mmalecki: I think I used the wrong term; I just want to launch a http server then also open my web browser to that page, with one command in npm[scripts]
01:09 < Sicp> log out of the terminal you started it from? or log out?
01:09 < Sicp> yea if you log out it's gone
01:09 < joe-node0> Just a shout out to see if there are any Los Angeles-based node devs here, and possibly anyone versed in Ember.js?
01:09 < Sicp> yea, nohup
01:09 < Sicp> lol
01:09 < Domenic_> i.e. http-server & && opener http://localhost:8080
01:09 < Domenic_> but wish syntax that works
01:10 < mmalecki> Domenic_: ah :). a &; opener ... should work
01:10 < mmalecki> let me give it a try
01:10 < Domenic_> mmalecki: nah still syntax error :-/
01:11 < mmalecki> can you use two lines?
01:11 < Domenic_> I don't think npm scripts allows that
01:11 < Domenic_> oh hey
01:11 < mmalecki> sh -c "http-server &" && echo "Hello"
01:11 < mmalecki> ^ should work
01:11 < Domenic_> I think it's just http-server & opener
01:12 < mmalecki> oh, nice
01:12 < Domenic_> that'll also do the trick; thanks :)
01:22 < yani> say you have main.js and routes.js, main.js includes routes.js - you initialise some class in main.js before calling an exported method in routes.js - how can you access the initialised class in routes.js from main.js?
01:22 < Aria> Pass it in via a function.
01:22 < Aria> Or even just set a variable.
01:22 < Aria> Though that sounds like it's factored badly.
01:23 < yani> that's what I thought, thanks Aria
01:24 < Aria> Sounds like you're essentially doing dependency injection
01:24 < gluxon> yani: This sounds a lot like the example program on Nodebeginner.org
01:25 < yani> Aria: yes, is there a dependency injector package that you can recommend or a good model to follow?
01:25 < yani> gluxon: I haven't seen it, I will check it, thanks
01:25 < Aria> "keep it simple" mostly. I think if you need a package for it, you're probably complicating it.
01:25 < substack> don't even have this term "dependency injection"
01:25 < substack> just write programs
01:26 < Aria> Yeah. If you're making a big deal of it, you're making way too much of a deal of it.
01:26 < Aria> module1: module.exports = function(options) { do stuff } ; main: require('module1')({db: whatever}) 
01:27 < yani> well the thing is that I have quite a few objects that I need to pass - config, DB etc
01:27 < Aria> Well, separate your concerns to reduce that. (Small modules!)
01:27 < Aria> And ... it's not too bad to just pass an options hash around. Refactor when that becomes problematic.
01:29 < yani> that's what I will do - pass an options object
01:29 < yani> thanks again
01:31 < Aria> Sure thing. Just write. When you run into a problem, refactor!
01:31 < Aria> And if you keep the parts small, you can't make the mistakes too big.
01:32 < isaacbw> hoo ha
01:34 < defunctzombie> bnoordhuis: the process global thing... I wasn't saying remove it
01:34 < defunctzombie> the amount of globals introduced should be minimal if possible
01:34 < bnoordhuis> defunctzombie: then there's not much point in adding a module for it, is there?
01:34 < defunctzombie> yea
01:34 < defunctzombie> tools like browserify
01:34 < defunctzombie> won't have to include the shims unless someone is using them
01:35 < defunctzombie> that is an actual benefit
01:35 < bnoordhuis> um, okay
01:35 < defunctzombie> and the other benefit is to keep global leakage smaller
01:35  * bnoordhuis has never used browserify
01:35 < defunctzombie> which is a more philosophical thing :)
01:35 < defunctzombie> bnoordhuis: tools like that are going to be used more and more on modules
01:35 < defunctzombie> because of the dual nature
01:36 < bnoordhuis> defunctzombie: is browserify substack's thing?
01:36 < bnoordhuis> seems like it is
01:36 < bnoordhuis> substack: https://github.com/joyent/node/pull/4493 <- convenient or not?
01:36 < defunctzombie> yes
01:36 < substack> bnoordhuis: very useful
01:37 < bnoordhuis> substack: noted. now tell me why :)
01:37 < substack> browserify already doesn't include Buffer by default because it would inflate the sizes of the bundles by a lot
01:37 < substack> but people can do require('buffer').Buffer
01:37 < substack> not so for process
01:37 < bnoordhuis> so what happens if someone doesn't require('buffer') but still calls new Buffer(42)?
01:37 < defunctzombie> bnoordhuis: they shouldn't do that
01:38 < defunctzombie> they should require it ;)
01:38 < bnoordhuis> "they shouldn't do that" is what i'm saying, in various contexts, to people all the time. in general, they still do it
01:39 < defunctzombie> why shouldn't they do it tho? require is how you include code in node
01:39 < defunctzombie> it makes complete sense to go.. oh. I need to use buffer, let me require it
01:39 < bnoordhuis> i haven't written code like that since node 0.2
01:39 < bnoordhuis> what does that make me? :(
01:40 < defunctzombie> bnoordhuis: a core developer
01:40 < substack> why don't we just add Util and HTTP globals too
01:40 < substack> one for every core module
01:40 < bnoordhuis> substack: sounds good
01:40 < defunctzombie> \o/
01:40 < bnoordhuis> a grand old globals party, i like it
01:40 < Domenic_> I think underscore really needs to be a global too </troll>
01:41 < substack> globals are really infuriating because they don't show up in the dependency graph
01:41 < bnoordhuis> defunctzombie: i'll reopen the issue and do what i always do in cases like this one
01:41 < defunctzombie> Domenic_: *death stare*
01:41 < bnoordhuis> defunctzombie: pass it off to isaacs and let him worry about :)
01:41 < defunctzombie> hahaha
01:41 < defunctzombie> sounds good
01:42 < andu> bnoordhuis, I agree with your argument, and would add that since node is a process, it would only make sense that the simplest node process still has access to its own process data (PID etc) without needing require
01:44 < bnoordhuis> andu: as i understand it, the process global is not going away (as if)
01:44 < bnoordhuis> but it makes life easier for things like browserify that shim node modules
01:44 < Aria> Yeah. Explicit is good for tooling.
01:45 < substack> implicit whimsical apis are for ruby
01:45 < Aria> That++
01:46 < substack> whimsical.apis(:are => &:for).ruby
01:46 < andu> :)
01:47 < andu> i just meant in a self referential philosophical way. a process is supposed to have access to its own process id and its place in the system you know.. stdin/out
01:47 < andu> but anyway its dusted :)
01:48 < defunctzombie> andu: that is true, but that doesn't specify how it gets that info ;)
01:49 < andu> just that it should be simple. single command/variable/register whatever
01:50 < defunctzombie> andu: require('process').pid
01:51 < andu> require is like read off disc this 'process' library thing please, and ask it for my pid. as if it doesnt know how to ask the surrounding OS its own name
01:52 < defunctzombie> andu: require actually says nothing about reading off disk
01:52 < defunctzombie> it could provide modules from memory if it wanted to
01:52 < defunctzombie> require is just how you bring external things into scope
01:53 < pc102> yo
01:53 < andu> might as well get rid of require instead
01:53 < Domenic_> I see we're back to the globals party idea
01:54 < defunctzombie> \o/
01:54 < andu> it works, its not broken, leave it
01:55 < andu> please :)
01:55 < andu> im out, cheers
01:55 < Aria> Heh.
01:56 < defunctzombie> haha, well, that attitude never leads to progress :)
02:00 < Aria> Ayuh.
02:00 < pc102> anyone interested in a socket.io console? I've been working on one to help in creating socket apps: http://noobsonly.com/samples/socketclient/
02:54 < isaacbw> the wifi on this train is close to useless
02:55 < tjfontaine> screen + irssi + mosh in that case
02:56 < isaacbw> I think I've got an irssi client somewhere still going
02:56 < isaacbw> but it's not a very fun client to use, at least not without more of an investment in time to learn to use it
02:57 < isaacbw> than I care for
02:58 < tjfontaine> I'm not sure what there is to learn
02:58 < isaacbw> it's just not very intuitive. I dunno
02:58 < isaacbw> how stupid would it be to not support IE at all with a web app? I want to use server-sent events and apparently microsoft doesn't give a shit
02:59 < isaacbw> :P
03:00 < isaacbw> anyway, I'm working on IRC stuff right now with node so I'm not looking for a new client
03:01 < isaacbw> man I'm so excited about this project
03:02 < tjfontaine> what is this exciting project of which you speak
03:03 < isaacbw> I'll some back in a few days and share it. I want to get a bit more done
03:03 < isaacbw> it's IRC related
03:22 < owen1> where is a common path to have the log files and the pid files of node apps? is it the app path or /var/log/  and /var/run/ 
03:23 < iain> owen1: those are both valid places to put daemon specific stuff, but it depends if your app is really a daemon or just some process
03:24 < iain> if just some process then cwd/<something> is more appropriate
03:24 < iain> in my view
03:30 < owen1> iain: let's say it's an http server
03:31 < owen1> iain: /var/log is owed by root, should i change it's ownership to be the user that is running my node server?
03:31 < tjfontaine> no no no no
03:32 < tjfontaine> you can make a file with the users ownership, or a subdir with the users ownership
03:32 < tjfontaine> don't muck with /var/log permissions unless you want to lose visibility into the rest of your system
03:32 < s5fs> I want to piggy-back on this question, how DO you safely implement a node.js daemon?
03:33 < s5fs> ie, i wanna make a fancy web UI so i can dork with my network settings and overwrite wpa_supplicant, /etc/hosts, etc
03:33 < owen1> tjfontaine: but where do i locate <my-server.log> and <my-server.pid>?
03:33 < owen1> i can put them in /var/log and /var/run, right?
03:34 < s5fs> how can i safely write these files and also run the web-facing services? do i spin up one child process as root and keep the web process with a restricted user?
03:34 < tjfontaine> well, log's generally go in /var/log/ and pids generally in /var/run/ at least in sane flavors
03:34 < tjfontaine> s5fs: that's a complex question really
03:34 < owen1> tjfontaine: but those folders are owend by root
03:34 < owen1> tjfontaine: i can't save new files into those folders
03:35 < tjfontaine> owen1: mkdir /var/log/mydaemon && chown myuser:mygrou /var/log/mydaemon
03:35 < s5fs> tjfontaine: understood, but the answer is still of great value to me. i'm not crazy security guy, but i wanna try to code defensively where possible.
03:36 < tjfontaine> s5fs: well lets start with the idea of /etc/hosts it would be easier to use nss and an alternate backend instead of files (say pgsql, mysql, ldap) it's a bit easier to reason about security in taht concept
03:38 < tjfontaine> s5fs: that's kinda a simplification of one issue and a reasonable way to solve it, the rest of the work for "managing" a server "remotely" is actually relatively complicated and certainly filled with potential security potholes
03:39 < owen1> tjfontaine: ok. so i assume i have sudo when i deploy/setup my server
03:39 < s5fs> tjfontaine: i'm currently building a web interfac to manage system configuration on a beagleboard. by now i'm sure you've seen the ninja blocks stuff, yes? it's similar to that, or similar to what you'd use to manage your linksys router at home.
03:39 < tjfontaine> owen1: I have no idea, depends on your environment
03:39 < s5fs> tjfontaine: even in a scenario where i'm creating wrappers to call binaries (ifconfig, etc) i need elevated privs.
03:40 < owen1> tjfontaine: i must have sudo, if i want to do chown command
03:40 < Slade-> does node have a decent leveldb library? the only one i see by googling was someone trying to learn c++ and not using proper async stuff
03:40 < tjfontaine> owen1: well you could use plain old su
03:40 < s5fs> tjfontaine: it appears that ninja blocks addresses this by running their node app as root, but i have not confirmed this. in my case, i'm building a lan-based device and can do the same, but i'd rther shoot for secure.
03:41 < rvagg> Slade-: let me introduce you to a *proper* LevelDB library: https://github.com/rvagg/node-levelup
03:41 < owen1> tjfontaine: (got to google for that, i bit confused between sudo and su)
03:41 < tjfontaine> s5fs: if you have to go the exec/spawn route then you just have to validate input as much as possible :)
03:41 < Slade-> rvagg: nice. :) 
03:41 < tjfontaine> owen1: well, sudo means you enter your password, and su means you enter the targets password
03:41 < Slade-> how come your stuff always sucks on the google search ressults :/
03:42 < rvagg> Slade-: I use keyword searches: https://npmjs.org/browse/keyword/leveldb
03:43 < s5fs> tjfontaine: yeah, i'm thinking about running a single process as root, who then spawns a child_process for the different components, setting the uid as i go
03:46 < Slade-> rvagg: heh levelup was what iw as going to call my project :P
03:47 < Slade-> nice work tho :)
03:47 < rvagg> mm, lots of fun!
04:17 < Technodrome> i swear javascript is harder than c++ for me 
04:20 < timeturner> why?
04:22 < Technodrome> no idea timeturner 
04:25 < joe-node0> well yeah it's harder, C++ doesn't have a galaxy's worth of recursive closures to trip you up
04:25 < joe-node0> you don't need an attention span 5 football fields long to understand C++, just some type discipline.
04:25 < joe-node0> But JS is here to stay and we love it.
04:26 < joe-node0> I mean, it's stockholm syndrome dude, once you get over the shock it's just par for the course.
04:30 < owen1> i want to call node script from a bash script. i have echo "absolute path to node script.js"   but it's not working.. any ideas?
04:31 < owen1> and btw, it's working from the console with 'node path-to-script.js'
04:34 < owen1> i didn't type it correctly. i have echo "node path-to-node-script.js"
04:35 < Technodrome> joe-node0:  do you still struggle?
04:43 < joe-node0> Technodrome: No, there's a curve and it gets linearly easier, with some 'aha' moments
04:44 < joe-node0> Really, there's something about javascript that's really fun to code in, once you get over the shock and grok the closures.
04:45 < joe-node0> Technodrome: An article that helped me out in the beginning was: http://www.digital-web.com/articles/scope_in_javascript/
04:46 < marcoslhc> Joe-node +1 javascript IS fun
04:46 < substack> don't nest very deeply
04:47 < joe-node0> It's a really good explanation of how scope works in JS, (note the lonely_house function in that article, I'v inadvertently written 'subdivisions' of them ;-P)
04:47 < joe-node0> hah!
04:47 < joe-node0> call and apply!
04:47 < substack> use named functions, modules, and events to flatten nested logic
04:47 < joe-node0> that's good practice of course
04:47 < substack> joe-node0: http://callbackhell.com/
04:48 < substack> the approach that website describes is pretty much all you need to write concise, readable code
04:48 < joe-node0> that and a couple of editing power tools
04:48  * joe-node0 is an IDE-aholic
04:49 < joe-node0> jsLint has saved my ass too many times to count.
04:50 < mistertwig> How deep do your callbacks have to be in order for it to be classified as callback hell
04:50 < joe-node0> more than 3
04:51 < mistertwig> phew
04:51 < nicholasf> mistertwig: you want cascading depth, not stairs. Are you using async.js?
04:51 < joe-node0> 3 is like the initiation ceremony for padawans
04:51 < mistertwig> nicholasf: i was just curious
04:51 < nicholasf> k
04:52 < joe-node0> the way out of callback hell is to understand events
04:52 < joe-node0> there ain't no way to tame JS without mastering events and bubbling.
04:52 < Technodrome> joe-node0:  i kid you not though, i think javascript is seriously in some ways, harder than c++ 
04:53 < mistertwig> javascript is harder than C++ to write programs in C++
04:54 < joe-node0> Technodrome: yes, yes it is, I mean JS was a confluence (in the 90's) of JAVA, Scheme, and Self, Eich didn't have time to bake classes in (or maybe he didn't want to?)
04:54 < mistertwig> well they're coming now
04:54 < mistertwig> ES6 <3
04:54 < joe-node0> So there's no easy "Snapper extends turtle" etc
04:55 < joe-node0> yeah, I'll believe it when I see it. Meanwhile client's need applications that work and are maintainable so for my money it's YUI, and now Ember
04:55 < mistertwig> well for server side JS it's not a problem
04:56 < mistertwig> i'm sure there will be some sort of ES6 to ES5 "compiler"
04:56 < joe-node0> I do love nodejs
04:56 < Technodrome> i just want to be able to write server side code quickly and be able to do all the client stuff as well in the same langauge
04:57 < mistertwig> i'm getting excited :P
04:57 < joe-node0> I just need to figure out how to make it run daemonized without killing apache on the same box
04:57 < joe-node0> my angst is a multi-server sort
04:57 < joe-node0> yeah... the hard problems
04:58 < Technodrome> i just think the thing that makes JS hard is, it allows for some very flexible and loose style of coding practices
04:59 < Technodrome> which means i can look at this code, then look at someone else and they took a completely different approach 
05:00 < joe-node0> um, I'm going to kinda disagree, if JS's difficulty were merely that it is "too liberal" we could all just subset like Crockford insists we do, and all would be well.
05:00 < joe-node0> JS's difficulties go deeper than mere type enforcement
05:00 < Technodrome>  i was using prototype so i pretty much had to use that to use JS 
05:00 < joe-node0> those scope issues are really the "black hole" sort of gotchas.
05:01 < joe-node0> That and understanding "event payloads" and object traversal (objects in JS can be quite complex).
05:02 < joe-node0> Those three things are the major roadblocks to industrial strength JS-Fu, master them and all of a sudden JS is fun.
05:03 < joe-node0> We don't have those sorts of issues in C++ or JAVA because they use a catagory-straightjacket to enforce a particular style of composition.
05:03 < joe-node0> Oh and scope is much more simple in both of those languages too.
05:04 < mistertwig> i'd argue it's not as bad in C++ 
05:04 < mistertwig> java enforcers much stricter conventions
05:04 < mistertwig> which may not be a bad thing but it's there 
05:04 < Technodrome> i hope i can pull through and be productive 
05:04 < joe-node0> mistertwig: like I said it's a "stockholm syndrome" sort of situation, if you're new to programming then JS won't seem bad at all, it's only the older classical-OOP folks that get bitten.
05:05 < mistertwig> oh yeah joe-node0 i agree
05:05 < Technodrome> http://pastebin.com/gmGyEpG8 i don't see any arguements being passed here?
05:05 < mistertwig> it is being passed
05:05 < mistertwig> forEach has a single argument
05:05 < mistertwig> which is the element it's on
05:06 < Technodrome> looks like the function takes 3 
05:06 < mistertwig> actually i'm wrong
05:06 < mistertwig> yeah it does
05:06 < mistertwig> but they're optional
05:06 < Technodrome> i just don't see them being passed though, none 
05:06 < mistertwig> that's how callbacks work
05:06 < mistertwig> it'll automatically pass them in
05:06 < joe-node0> Technodrome: try that on JSbin and post a link
05:06  * joe-node0 loves JS-bin
05:07 < mistertwig> i use jsfiddle
05:07 < mistertwig> :P
05:07 < joe-node0> it's like JS fiddle but real-time'er
05:07 < joe-node0> lol
05:08 < joe-node0> I like making changes and seeing the effects right there as I type
05:08 < joe-node0> very intuitive feedback loop
05:08 < Technodrome> i can't even get this to output lol 
05:09 < mistertwig> this node-validator looks great 
05:09 < mistertwig> i had to write my own in PHP
05:09 < mistertwig> well i didn't have to, but i did :P
05:09 < joe-node0> Here
05:09 < joe-node0> http://jsbin.com/evuxac/1/edit
05:09 < joe-node0> try that
05:09 < joe-node0> look in the console, your code is outputting 
05:10 < mistertwig> yeah it's not on jsbin's output
05:10 < mistertwig> it's under the console tab
05:10 < mistertwig> or ctrl + shift + k
05:10 < joe-node0> well yeah, he didn't write it to the dom
05:10 < mistertwig> actually that's cool that jsbin has that console tab
05:10 < joe-node0> I know, I love it
05:10 < mistertwig> this looks a lot better than jsfiddle
05:10 < Technodrome> works in node though
05:10 < Technodrome> so i dont get it 
05:11 < mistertwig> the syntax editor looks nicer too
05:11 < Technodrome> [2, 5, 9].forEach(logArrayElements); i don't see no arguments being sent, hell i don't even see the function call, just the identifer name 
05:11 < mistertwig> it invokes that function
05:11 < mistertwig> each iteration
05:11 < Technodrome> i see, sory yeah its a callback
05:11 < mistertwig> you don't need to supply a named function if you don't want to
05:12 < mistertwig> [2, 5, 9].forEach(function(e, i) { console.log(e);}); 
05:12 < Technodrome> i get it completely, similar to the ruby each function , i like it but just don't see where the 3 arguments are coming from
05:12 < mistertwig> check out the MDN
05:12 < mistertwig> they show a shim for forEach
05:12 < Technodrome> shim?
05:13 < L10n> Technodrome: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/forEach
05:13 < mistertwig> well the implementation
05:13 < mistertwig> you can see how it works
05:13 < L10n> you'll see that 3 args get passed in
05:13 < Technodrome> what is the e and the i there ? element and index but how did you know it was required?
05:13 < mistertwig>         callback.call( T, kValue, k, O );
05:14 < Technodrome> L10n:  where do you see that at?
05:14 < Technodrome> ah
05:14 < Technodrome> sorry
05:14 < Technodrome> see it now
05:14 < L10n> np :D
05:14 < Technodrome> implicit
05:14 < joe-node0> yes very
05:14 < mistertwig> i don;t see it as being implicit :P
05:14 < L10n> Technodrome: it may help for you to go write a function that takes a callback. that will be one of those 'aha' moments.
05:15 < Technodrome> yeah i need about 2-3 days of full study right now 
05:15 < Technodrome> and i can't avoid this anymore
05:15 < joe-node0> that's definately one of the "cliff edges" anyway, but yeah sure 'aha' wouldn't be far at that point.
05:15 < Technodrome> missinglink:  well, python people don't like anything like that going on
05:16 < Technodrome> I truly believe javascript is a very powerful language
05:16 < joe-node0> if you do app development wait till you get to data binding hell
05:16 < Technodrome> app development?
05:16 < joe-node0> this stuff isn't even hard
05:16 < joe-node0> MVC, desktop competitive stuff in the browser
05:16 < Technodrome> ah 
05:16 < andrewaclt> I've been a heroku guy but they don't provide websocket support. Any suggested hosts that are similar to heroku?
05:16 < joe-node0> yeah hell and a half
05:17 < Technodrome> anytime i here app these days i think mobile
05:17 < substack> I like the part where I write a function and then I pass that function as a paramter to another function
05:17 < joe-node0> I like how easy it is to roll a custom module in YUI 3
05:18 < joe-node0> but after having to write a few hundred lines of view maintenance code, I'm being seduced by Ember.js and it's automatic 2-way data bindings Mmmmm
05:18 < joe-node0> tasty
05:18 < Technodrome> joe-node0:  i actually do some very cool stuff, used to do drupal dev for sony , etc etc but i really want that super smooth web now, css3 hardware accelerated transformations, so i've convinced some larger companies to have  me redo their front ends, hence why I am here , and i want the server side in the same lang
05:19 < Technodrome> so this could be a very exciting time for me 
05:19 < joe-node0> Technodrome: all very good reasons to get good in JS. Just bear in mind that unless you're going to go "lone wolf" it might be useful to do some library and API research
05:19 < joe-node0> you know, find a framework or two that you really enjoy working in.
05:20 < Technodrome> i was thinking express
05:20 < Technodrome> for server side
05:20 < joe-node0> on the serverside
05:20 < joe-node0> yeah
05:20 < Technodrome> i wanted to do lone wolf early on, like i said my only goal is to make things the smoothest and buttery they possibly can be 
05:20 < substack> use the core libs and find libraries to fill the gaps
05:20 < joe-node0> I really like that YUI is moving to the client side too, but they've been... slow in adding productivity features to their framework.
05:21 < joe-node0> psshhh
05:21 < joe-node0> I mean the server side too
05:22 < joe-node0> yes I h8 writing 400 lines of dom babysitting code for complex multi-view browser applications, and that's ontop of all my templates. Grrr
05:22 < Technodrome> what is that js framework that is advertised as , client and server side as one sorta deal?
05:22 < joe-node0> I know YUI 3 is going server side
05:24 < joe-node0> Here: http://yuilibrary.com/yui/environments/
05:24 < samholmes> Hey
05:24 < samholmes> So, anyone know about statcounter or google analytics?
05:25 < joe-node0> that will show you a list of server-side YUI modules that will work now, all the ones on the right, they need a DOM, I think JSDOM is being used at YUI for testing.
05:25 < joe-node0> at Yahoo I mean
05:26 < Technodrome> i still can't think of the name of that js framework 
05:28 < joe-node0> so it's hard to ignore Yahoo here, I might end up being a dualist going with both YUI and Ember developer, I really don't see any other offerings that would give me more productivity for my investment
05:29 < joe-node0> I mean yeah there's cappuccino but I know next to squat about Objective-C, so the parallel constructs that it employs to abstract the web drudgery away are non-applicable for me.
05:30 < joe-node0> sad though because for a Cocoa developer that might be a fun time.
05:31 < joe-node0> The only other technologies I might look into are python and dart, besides my lightweight dabbling in embedded C programming.
05:31 < joe-node0> JS is the only sure bet.
05:33 < Technodrome> why Python joe-node0 ?
05:33 < mistertwig> why dart?!
05:34 < Technodrome> meteor was the framework i was thinking of 
05:36 < Technodrome> what do you guys think of meteor?
05:37 < mistertwig> never heard of it
05:37 < mistertwig> give a quick explanation?
05:38 < Technodrome> http://meteor.com/screencast
05:38 < mistertwig> no no
05:38 < Technodrome> it was real popular on reddit for a while 
05:38 < mistertwig> i'm not going to watch anything
05:38 < Technodrome> i dunno , its hard to explain 
05:38 < Technodrome> there is not different between server and client 
05:38 < mistertwig> was it that uh
05:38 < mistertwig> oh go
05:38 < mistertwig> god*
05:38 < joe-node0> watching
05:39 < mistertwig> yeah i remember hearing about it
05:39 < mistertwig> i'm never going to use it :P
05:39 < Technodrome> the javascript creator praised it or something ,hence why i even know aobut it 
05:39 < mistertwig> i love my markup too much
05:42 < joe-node0> I dunno, Meteor is still kinda nebulous at the moment for me. I don't see the benefit of it vs say Ember.
05:43 < Technodrome> yeah, i dont think i would use it either
05:43 < Technodrome> looks like it does alot of implicit things
05:43 < Technodrome> interesting though
05:44 < Technodrome> so you like ember alot joe-node0 ?
05:45 < joe-node0> you want to see something useful? look at this: http://emberjs.com/guides/templates/handlebars-basics/
05:45 < joe-node0> see those placeholders i.e. {{firstName}} {{lastName}} 
05:45 < joe-node0> yeah those
05:45 < Technodrome> yeah, similar to django templates
05:46 < joe-node0> they're actually properties on a model... Yeah, all automatically updated bidirectionally
05:46 < Technodrome> so you like ember better than say using the pure express approach?
05:46 < joe-node0> ember is for client side development
05:46 < Technodrome> i see people doing it on server to 
05:46 < joe-node0> ember on the server? Hmmm
05:47 < Technodrome> well integrating it using the controller portion etc
05:47 < Technodrome> besides express what is the most popular server side nods.js framework?
05:48 < atticus> @Technodrome Geddy? http://geddyjs.org/
06:00 < Technodrome> atticus:  seems like geddy is the 2nd most common 
06:01 < Technodrome> sorta rails clone 
06:02 < Technodrome> joe-node0:  would you ever use something like ember for just a traditional site?
06:19 < atticus> Technodrome: Yeah, express is pretty close to sinatra too
06:22 < atticus> I don't know about @joe-node0 but ember's home page does say for "ambitious web applications"
06:35 < Technodrome> atticus:  everything that's not rails based is usually close to sinatra hehe 
07:09 < upstream> I want to use node to eval a quick JS snippet like so: `$ node -p -e "var x = require('./something'); x.foo"` but I get the message "Cannot find module './something'", is there a way to tell node to eval my snippet from the current working directory?
07:09 < upstream> note: i'm not evaling a file, just a snippet.
07:13 < upstream> nevermind..
07:14 < upstream> it seems to work, actually :/
07:14 < upstream> just doesn't work in my Python script.. 
07:14 < upstream> Popen needs to set the PWD I guess :|
07:28 < raz0r9> whats node?
07:29 < raz0r9> where can i mb to node?
07:30 < gluxon> raz0r9: mb?
07:30 < jden> raz0r9: node is kinda like nosql, but webscale
07:32 < raz0r9> what was ur first language? python is recommended by a lot of ppl
07:32 < gluxon> Node.js is server-side JavaScript framework utilizing Google's V8 as an interpreter.
07:32 < gluxon> It is commonly used for network applications.
07:32 < zomg> jden: Like this? http://www.youtube.com/watch?v=b2F-DItXtZs
07:33 < gluxon> raz0r9: I'd actually recommend C++ as a first language.
07:33 < raz0r9> that is my first language actually, but i think its gonna be crazy because of memory management and all day bullshit naw mean
07:34 < gluxon> Python and C++ do teach good habits.
07:34 < gluxon> And I think it's important to a little memory management to get a feel for what higher level languages are doing in the background.
07:36 < raz0r9> do you think that if you learn a new language, you would forget how to program the last language?
07:36 < raz0r9> like is it important what languages you learn
07:37 < raz0r9> ?
07:38 < raz0r9> nvm, i guess i'll just masturbate
07:38 < chrisevans1001> quick query. experimenting with tcp sockets. i am connecting via telnet to node and trying to understand a bit about buffers / incoming data etc. when a new connection is opened the connection is created then immediately a small amount of data is sent. "????? ?????'?????????" im trying to ensure that data that doesnt come in whole is joined up later. what is this first bit of data i am receiving?
07:39 < gluxon> raz0r9: You don't forget the first language.
07:39 < gluxon> raz0r9: I'll use the bicycle analogy, you don't forget it. Once you know the concepts, it's down in your head forever.
07:40 < raz0r9> dam, thats deep
07:40 < gluxon> chrisevans1001: You're receiving a buffer.
07:41 < gluxon> chrisevans1001: Do you know what it is you're receiving?
07:41 < chrisevans1001> I'm not sending anything, that's why I am confused.
07:41 < gluxon> Ok then.
07:42 < gluxon> chrisevans1001: You get the ????? when you use console.log on a buffer that isn't converted to a string.
07:42 < chrisevans1001> ah
07:42 < chrisevans1001> so is it binary then?
07:42 < chrisevans1001> well i guess not actually but its not a string either way :P
07:43 < gluxon> I'm not sure myself, but it's not something console.log understands.
07:43 < gluxon> You should be able to read it after converting whatever you have to a string.
07:43 < gluxon> http://nodejs.org/api/buffer.html#buffer_buf_tostring_encoding_start_end
07:45 < chrisevans1001> It's confusing
07:45 < chrisevans1001> If I haven't sent anything, I'm not sure what it is I should be decoding
07:46 < chrisevans1001> My plan was to write data into a variable and join it up still i came across a new line. Then mark that as one transmission if you like.
07:47 < chrisevans1001> Unfortunately, that doesn't work as there's this random bit of data at the start.
07:47 < chrisevans1001> I'm going to try Buffer now and see if it'll convert it.
07:51 < chrisevans1001> well it does convert it to something else ... only its now this "0#?@?   ?   ? 8??"
07:51 < chrisevans1001> utf-8
08:10 < jden> zomg: exactly.
08:49 < bradleymeck> isaacs: is there a way to tell fs to spawn the various file types outside of links, dirs, and normal files for tar entry types?
08:49 < bradleymeck> if not ill just ignore it for now
09:58 < staar2> could anyone explain what for and how to use domains ?
10:12 < ohYeaaah> can haskell do everything node can like the networking etc.? Or are they fundamentally different?
10:12 < guybrush> ohYeaaah: its like comparing haskell with django
10:13 < guybrush> so you want to compare haskell with javascript
10:13 < ohYeaaah> django's a webframework? but node is more than a webframework right?
10:14 < ohYeaaah> gaYak: 
10:14 < guybrush> node just implements io in javascript via v8
10:14 < Doikor> node is v8 runtime bunched together with some libraries to provide IO stuff.
10:14 < zomg> ohYeaaah: haskell does everything javascript does, they are both general purpose programming languages
10:14 < zomg> they are just pretty different in how they work, but they can be used to do the same things.
10:15 < ohYeaaah> but would it be safe to say network IO is easier in Node?
10:15 < zomg> Network IO as in doing what exactly?
10:15 < guybrush> depends on what one likes more i guess :D
10:15 < Doikor> if you know haskell well then no. id say its about the same.
10:16 < zomg> Certain things in node are easier primarily due to the availability of libraries that make the things easy
10:16 < zomg> But other things are easier to do in Haskell
10:16 < guybrush> nodes module-system is huge win
10:16 < zomg> Yeah npm is pretty cool
10:16 < guybrush> so that makes it somehow different to any other language, at least for me
10:17 < zomg> Yeah I don't think many languages allow you to do a sort of an application specific library install as easily as node does
10:17 < Doikor> cabal is okish too. tough the fact that you have to compile a lot of stuff with haskell can bring some compatibility issues (atleast unix/windows issues)
10:17 < zomg> Yeah cabal does the job but it won't let you do app specific library versioning like npm does
10:18 < zomg> cabal-dev can do it to a degree I think
10:18 < zomg> but it's way more complicated to work with than npm
10:18 < guybrush> local dependencies are pretty specific to node, i dont know of any framework/and or other language where its done that way
10:18 < zomg> you can do that in PHP with composer
10:18 < Doikor> yeah cabal-dev helps but still can leave you with horrible version mismatches (at least thats what i had when i tried snap and yesod)
10:19 < zomg> Doikor: yep
10:19 < Doikor> but then again having application specific version of all libraries could take a lot of time compiling that stuff
10:20 < ohYeaaah> ok... so I see myself make simple website maybe with some simple web apps, but I also want a good long term skill, I drawn to haskell because it's so elegant and I like functional programming, but I feel like node is more agile in ways and that it's good because it has less of a learning cureve especially pertaining to my golas (websites etc.0
10:20 < ohYeaaah> I'm ignorant though, I'm not really pressured for time
10:21 < Doikor> if you like functional programming you should also take a look at scala.
10:21 < ohYeaaah> I don't even understand how node interacts with V8 and what npm is and what advantages that yields
10:21 < zomg> If you wanna do web stuff node is probably going to be pretty useful to know
10:21 < zomg> As cool as Haskell is, it's still a bit of a niche language at least in terms of finding jobs or such
10:21 < ohYeaaah> i went from scala to haskell, I don't see an advantage is scala over haskell for my purposes
10:22 < zomg> I'm using Haskell to build web apps myself and it's definitely possible, and there are lots of cool things going on in Haskell in the web-space
10:22 < ohYeaaah> I'm not really looking for a job
10:22 < zomg> Well I think it's something to consider :)
10:22 < Doikor> node has a good buzz going around it atm so its not a bad choice.
10:23 < zomg> Yeah
10:23 < guybrush> ohYeaaah: i think the one thing what node makes different to other tech, is the community :D
10:23 < Doikor> though if you are already used to functional programming and enjoy it you really should go with a proper functional language
10:23 < Doikor> sure you can do functional programming in javascript but its not nice
10:24 < zomg> Yeah Haskell is a pretty nice language in general, sort of prefer it over others now
10:25 < ohYeaaah> I'm still ignorant as to what node is versus haskell (I didn't get very far in haskell btw, was about to get to nomads), eg. I saw Dahl create a TCP chat server in node like super fast, how much more difficult is that in haskell?
10:25 < zomg> nomads :D
10:25 < Doikor> i tried haskell properly a couple years back. didint do that good with it. ended up with a coupel really bad memory leaks that too me a good couple weeks to find/fix
10:25 < zomg> monads, not nomads 
10:25 < ohYeaaah> monads* lol
10:25 < zomg> :D
10:26 < zomg> doing a tcp chat server is not that tricky in haskell
10:26 < Doikor> its not that tricky in any language if you have good IO stuff
10:27 < zomg> yeah
10:27 < Doikor> and just about every modern language has goodish io
10:27 < ohYeaaah> how much more of a learning curve is there in haskell for setting up a simple webserver and webstie? what tools might one use?
10:27 < zomg> you can set a web server in a single line in haskell
10:28 < zomg> it won't do much but... it'll serve a page 
10:28 < zomg> :D
10:28 < Doikor> and if you want to do something more complicated http://www.haskell.org/haskellwiki/Web/Frameworks
10:28 < zomg> something like `main = run $ \_ -> responseLBS status200 [] "Foo"`
10:28 < zomg> :P
10:29 < zomg> that'll obviously require a bunch of imports to get the functions, but in any case
10:29 < zomg> =)
10:29 < guybrush> also nowadays everything can be compiled to js haha :p
10:29 < ohYeaaah> so then why would I want to use node over haskell if haskell is more functionally capable, very scalable and doesn't require that much more of a learning curve for setting up a webserver and simple website?
10:29 < Doikor> just like with node. you might do a very simple page by yourself by using nodes http server thingie. But if you are going to do anything more complex you most likely will end up using some framework (express)
10:30 < zomg> ohYeaaah: what other languages have you used?
10:30 < Doikor> ohYeaaah: well most programmers really dont know functional programming so there is that.
10:30 < zomg> if you have experience in other imperative languages then it's definitely going to be easier to work with node
10:30 < guybrush> ohYeaaah: just try to implement hello-world-website in haskell and node, then go with what you like more
10:30 < zomg> ^ this
10:31 < Doikor> but one real advantage of node over any other language is that you can use the same language in client side
10:31 < RLa> also implement one in ocaml, i think ocaml is overlooked too much
10:31 < guybrush> wouldnt trust anyone on what they think fits better to me :D
10:31 < Doikor> i use the same backbone models both in server and client
10:31 < ohYeaaah> zomg: I am a jack of all trades but a master of nothing. I started in highschool with some q basic, then a little java, then moved on to a little html css and javascript, then a little php, the a little scala, then a little haskeel, and now I'm wondering if I should just use node even though haskell seems more elegant and powerful
10:32 < Doikor> and there are some really wacky stuff build on top of node like meteor http://meteor.com/
10:32 < Doikor> if you are intrested in web development
10:32 < ikss> ohYeaaah: perhaps You should use language which fits into your project? not the one which fits into current trends? ;-)
10:33 < guybrush> every language fits for making simple websites
10:33 < zomg> ohYeaaah: well sounds like you probably would have an easier time learning node than haskell, but haskell can be a pretty interesting language to work with in general
10:33 < zomg> much of it due to it being quite different from many of the others =)
10:33 < ikss> guybrush: i don't belive that Your definition of 'simple websites' meets mine definition of 'simple website', simple website == static html based (imo) ;-)
10:33 < Doikor> yeah its once you have to make something more complex or get it to scale to really big loads the tool starts to matter
10:34 < Doikor> most web developers really dont have to think about either
10:35 < Doikor> and even using pretty bad tools can get you quite far. Like using rails or something and then just throwing haproxy in front of it and a couple servers behind it etc.
10:36 < guybrush> right because ruby is pretty bad :p haha
10:36 < ohYeaaah> hmmmm
10:36 < ikss> but haproxy rox! ;-P
10:38 < guybrush> ohYeaaah: if you are just playing arround i would try every single language
10:38 < guybrush> for fun
10:38 < Doikor> guybrush: thats what i said. but you can still midgitate the performance problems that come from there for pretty long just by building your architecture in a sensible way
10:38 < ohYeaaah> but if u wanted to deploy a website with haskell wouldn't u have to learn a webframework like happstack etc.? how much more of a learning curve do u think that would be
10:38 < guybrush> and make your own opinion
10:38 < Doikor> but yeah ive hear of people replacing 30+ rails servers with like 3 or 4 node servers etc.
10:39 < ohYeaaah> gaybrush: my heart is thinking haskell, but my brain is telling me js is my overlord
10:39 < guybrush> Doikor: you can go preeeeeeetttttyyyyyy far with apache+php
10:39 < guybrush> i mean really far
10:39 < Doikor> dont know about apache. seen it crash and burn way too easily
10:39 < Doikor> maybe with nginx+php :)
10:39 < zomg> ohYeaaah: if you want to make heads or tails of web frameworks in Haskell you'd probably need to understand stuff like monads and applicative functors etc. at least to a degree.
10:39 < guybrush> its not like you will hit some performance-issues with couple of 100s visits per day
10:39 < RLa> guybrush, apache+php default config is joke
10:39 < RLa> prefork all the way
10:40 < guybrush> well this discussion is senseless anyway, really :p
10:40 < Doikor> guybrush: yeah well most stuff you would end up doing in real life is going to get more like 100 visit a minute or something. i mean stuff someone would pay you for :D
10:40 < ohYeaaah> is node more of a ninja technical skill than haskell?
10:40 < guybrush> i dont have the expertice nor de experience to proof my opinions
10:41 < RLa> hm, what's considered a ninja skill?
10:41 < ikss> "write your code and hide" -_-
10:41 < guybrush> hahaha there was a interesting thread on the js-mailing list once :DDD
10:41 < guybrush> regarding ninjas
10:42 < RLa> ikss, haha
10:43 < ohYeaaah> I mean really, y might one want to learn haskell of node? How are they fundamentally different? What does node excell at over haskell and vice versa. I think I'm gonna end up using node at the end of the day because it can likely do everything I want with less than a learning curve, but I don't want to discount haskell because I'm not sure to what extent it can really achieve
10:44 < ohYeaaah> less of* a learning curve
10:45 < guybrush> ohYeaaah: ask your question in #haskell or something, and tell us what they said :p
10:45 < Doikor> i mostly just like node because its simple enough and i can reuse some parts of the code client side (i mostly do ajax heavy single site apps)
10:45 < ikss> ohYeaaah: first thing is... even if You use haskell You need to use JS on the client side [;
10:45 < ikss> what Doikor said -_-
10:45 < substack> ohYeaaah: haskell involves a lot of thinking for things that shouldn't require it
10:45 < zomg> You can use Haskell on the client... GHCJS or Fay or such
10:45 < zomg> =)
10:45 < guybrush> haha wanted to say that
10:45 < guybrush> you dont have to use js
10:45 < ikss> lol [;
10:46 < guybrush> its popular nowadays to compile everything to js :D
10:46 < ikss> http://secretgeek.net/dod_intro.asp
10:46 < ikss> ;-))))
10:46 < ikss> some alternative -_-
10:47 < ohYeaaah> haskell on the client? does haskell reaaaly involve more thinking for certain things, I would only think that if one was used to thinking in a do this then that state paradigm
10:48 < Doikor> ohYeaaah: well at least for me doing even some basic stuff in haskell takes a lot of thinking. Though that might be the years of imperative programming ruining my though process :(
10:48 < Doikor> but im getting there (though with scala instead of haskell)
10:49 < Doikor> ikss: that thing is a work of art.
10:49 < ohYeaaah> and what is this haskell on the client shiz?
10:49 < ikss> ;-)
10:49 < Doikor> http://fay-lang.org/ i guess they were talking about this?
10:50 < Doikor> ohYeaaah: like coffeescript. some other language you write that you then compile into javascript
10:51 < ohYeaaah> so u would have to learn another language or dialect instead of js anyway
10:51 < ohYeaaah> And this Dos on Dope... is that the future... better than node lol
10:55 < ohYeaaah> Fuck it.... node is the answer at least for now... JS is the overlord
10:59 < guybrush> hahaha dos on dope looks promising :D
10:59 < ohYeaaah> gaybrush: more promising than ndoe?
11:00 < guybrush> yes definitely
11:00 < ohYeaaah> gaybrush: r u cereal?
11:01 < ohYeaaah> gaybrush: contrast it with node
11:01 < guybrush> no im a pirate
11:01 < ohYeaaah> gaybrush: not time fur games
11:01 < guybrush> sorry for wasting your time ;)
11:49 < auburtic> any idea if it's possible to retrieve a websocket connection initial address that was proxied
11:49 < auburtic> he thing you can do with http req, with header['x-forwarded-by']
12:10 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:52 < Guest32057> Hey
12:52 < Guest32057> I have 6 node applications running on a quad core machine, therefore I have 24 node processes running. Is there a significant performance penalty due to running multiple processes like this (assuming all 6 applications have relatively high throughput)? Am I better off containing them within 1 application, assuming they trust each other?
12:52 < carsten_> hi all
13:25 < Sembiance> Anyone recommend a good NPM module for directory tasks? Getting a recursive listing, etc.  There are sooo many in the NPM directory, was hoping for a first hand recommendation :)
13:54 < TehShrike> Sembiance: I've used https://github.com/ryanmcgrath/wrench-js for a couple things, seemed pretty reasonable
13:55 < TehShrike> Don't know about getting a recursive listing - you want a file system translated into objects and strings?
13:59 < lhk_> anyone here using typescript ?
13:59 < lhk_> i would be glad, if you could help me with this question:
13:59 < lhk_> http://stackoverflow.com/questions/14102415/script-served-by-typescript-and-expressjs-is-not-run
14:01 < TehShrike> lhk_: sounds like you just need to do some debugging
14:01 < TehShrike> Throw some console.log statements in there, see what's happening
14:01 < lhk_> ok
14:02 < dz0ny> lhk_: q: data is served, but not executed when you use typescript?
14:03 < lhk_> dzOny, yes
14:03 < lhk_> it's rather strange
14:04 < dz0ny> place code in closure and add script tag to the bottom of page, aka not in head
14:05 < lhk_> TehShrike: if sprinkled the code with console.log. It's all executed all right
14:05 < TehShrike> Adding console.log makes your code work?
14:05 < lhk_> the response is rendered correctly, it's just that the game won't start
14:05 < lhk_> even the code is there
14:06 < lhk_> i can inspect the page source, click on the script tag and see the code
14:06 < lhk_> but it isn't run
14:06 < lhk_> there's no difference between the page source served by coffeescript's server.js and typescript's server.js, but i can't get it to work
14:07 < dz0ny> also on typescript whoever wrote this example is moron http://typescript.codeplex.com/SourceControl/changeset/view/2bee84410e02#samples/greeter/greeter.ts
14:08 < dz0ny> lhk_: have you tried different browsers? 
14:09 < lhk_> dzOny, yes Chrome and Firefox
14:09 < lhk_> same result
14:09 < lhk_> ill try IE
14:09 < dz0ny> :)
14:09 < lhk_> same with IE
14:11 < lhk_> dzOny, what's the problem with the example above ?
14:15 < cbdfb> Paul Jensen!
14:30 < schlitzer> what ide would you recommend for node.js? i already tried eclipse with vjet, and it is far away from being perfect :-/
14:34 < pachet> well, i wouldnt call it an ide, but vim with syntastic+jshint is pretty nice
14:35 < yawnt> lolide
14:37 < zomg> schlitzer: WebStorm does an alright job but it's not perfect
14:37 < zomg> JavaScript is pretty hard to do "perfectly" due to its highly dynamic nature
14:53 < jvanveen> hey
14:53 < jvanveen> anyone knows of gettext support for hogan.js?
15:01 < jvanveen> ah, found something => http://slexaxton.github.com/Jed/
15:03 < lord4163> Hello
15:07 < lord4163> Are there any good video tutorials for node.js? :)
15:10 < ins0mnia> lord4163: Go to youtube and search for node.js
15:44 < sohcahtoa> there doesn't appear to be a node-canvas channel I'll try here ... can you use google web fonts in a canvas in node? I might just have a case of the ignorants here as I only started using node on friday. I'm actually using fabric.js's node implementation maybe my question is nonsensical :/
15:44 < jrajav> Node... canvas..
15:44 < jrajav> Um?
15:45 < jrajav> Huh, this is a thing. o_O
15:48 < sohcahtoa> yep
15:48 < marcoslhc> Canvas is more in client side, as well loading fonts from google. But afaik canvas use CSS3 so you can load google fonts. 
15:49 < sohcahtoa> I am working on an image editor where I want to send back a json string to node and render the canvas to png 
15:49 < sohcahtoa> the json part I have having it use all the resource it needs is another matter
15:54 < cbdfb> give it bacon
15:54 < cbdfb> i mean bacon.ks
15:59 < marcoslhc> Sohcahtoa if node-canvas use CSS to style things like the browser version it should work with google fonts, you may have to preprocess things tho. Like load the font into your fs and then serve it to the app. 
15:59 < marcoslhc> But that's just an intuitive conclusion :)
16:03 < sohcahtoa> ok. I'll keep noddling with this for another hour then go home for the holiday and not think about ti again until wednesday
16:03 < whyhankee> hi, node noob here, i have an object that stores references to other objects to pass on signals, im adding the references in the object constructor but i dont know how to remove the reference when the referenced object goes out of scope (in Python i would use the destructor __del__), how do i solve this?
16:08 < jrajav> whyhankee: delete object.property;
16:08 < jrajav> (Note that you can only delete properties from objects; other usages don't do anything)
16:11 < whyhankee> jrajav: the reference-list is an array, the problem here is detecting that a referenced object goes out of scope
16:11 < jrajav> Hm. o_O
16:11 < jrajav> Sounds to me like there could be a much better way to do this.
16:12 < jrajav> Solving problems with scope-leaving would really only make sense in C++
16:13 < jrajav> In any case, there's not really a clean way to do it, no. For starters, "out of scope" is probably a much broader range than you realize for any given variable
16:13 < jrajav> And there's not really a way to tell, when it does happen. Referencing a variable that doesn't exist will simply return 'undefined'
16:14 < whyhankee> jrajav: i'm kinda new to the async style of js and its variable scoping :)
16:14 < brettlangdon> whyhankee, why not define a function to handle destruction and call it explicitly?
16:14 < jrajav> Yes, and for what purpose are you tracking objects like this "in the background"?
16:15 < whyhankee> brettlangdon: i was kinda hoping to be able to skip 'manual' object tracking, but it's possible yes
16:16 < whyhankee> the object that holds the references is a connection object, the referenced objects are 'clients', to keep it simple
16:16 < whyhankee> clients could come and go pretty fast
16:16 < whyhankee> and the clients need some events from the connection's EventEmitter
16:17 < whyhankee> (sec, have to switch trains)
16:22 < whyhankee> returned, any thoughts on above? is there a better way of handling this situation?
16:24 < jrajav> Yes, use a "disconnect" function or something
16:25 < jrajav> I mean.. you clearly need to do something when they disconnect (or whatever it means when they're removed), right? Don't overcomplicate things. Functions are clear and very cheap.
16:25 < whyhankee> jrajav: on the 'client' object you mean? that's possible but would be 'manual' tracking
16:25 < jrajav> You need to do "manual" tracking at some point on the chain
16:26 < jrajav> How are they added in the first place?
16:26 < whyhankee> they are added in the client constructor
16:26 < whyhankee> (is constructor a valid js term?)
16:27 < jrajav> Yes
16:27 < whyhankee> good :)
16:27 < jrajav> I'm still very unsure what it is that you're trying to accomplish and why you're trying to abstract it in this way
16:27 < jrajav> But I would just make it explicit
16:27 < jrajav> There's really not a way to make it implicit, anyway.
16:27 < jrajav> (I'm not even sure what "event" it is that would cause the removal of a client in your ideal version)
16:28 < whyhankee> maybe the example complicates things :( thinking ..
16:30 < whyhankee> i'm gonna brood on this for a bit, maybe i get back to you. thanks for the thoughts anyway!
16:32 < brettlangdon> whyhankee, code snippets wouldn't hurt
16:50 < cbdfb> I am currently connecting to an API using PHP, once I make a query I have to ping the API every few seconds to check for results until I'm told there are no more results. Would node.js come in handy here to collect results and send to the clientside?
17:10 < skope> i really don't get encoding. trying to paste some umlauts to irc channel and they come up as �. str.toString('utf-8') doesn't work at all
17:12 < Kakera> cbdfb, node.js isn't any better than PHP at polling
17:12 < Kakera> if that's what your API requires
17:13 < MI6> joyent/node: Tim Bradshaw v0.8 * 50e88d0 : os: change CPU time from Integer to Number  CPU time values must be Numbe - http://git.io/CsRt0w
17:14 < skope> scraping titles from websites and i don't know what to cheerio parses those. but apparently it's nothing usual
17:16 < cbdfb> thanks Kakera, what if i need to be doing this for hundreds of clients simultaneously, would node in that scenario?
17:17 < Kakera> I can't really say without knowing how your API works
17:20 < skope> how can i detect what encoding my string is?
17:22 < Kakera> a string doesn't have an encoding, it's just a sequence of code points
17:22 < Slade-> node-http-proxy or HAProxy. which do you guys recommend for hosting multiple websocket based node apps?
17:23 < skope> Kakera: trying to make ircbot which pastes titles of the urls to the channel. it breaks the umlauts
17:24 < Kakera> are you using node-irc?
17:24 < skope> Kakera: yes
17:24 < Kakera> it uses utf-8
17:24 < Kakera> check your IRC client settings
17:24 < Kakera> by any chance, are you using XChat?
17:25 < skope> Kakera: irssi. and utf-8 works
17:28 < stagas> skope: you probably need something like https://github.com/ashtuchkin/iconv-lite
17:28 < skope> stagas: thank you
17:29 < Kakera> skope, what's the problem with umlauts exactly?
17:30 < skope> Kakera: they show up as messed up chars. like this: T�m� on hirve��!
17:31 < Kakera> skope, and what is it supposed to send?
17:32 < skope> Kakera: Tämä on hirveää!
17:33 < st_luke> it's 2012 and you think they would make captain crunch not cut the roof of your mouth anymore
17:34 < yaayaYAY> so it's super easy to make a webserver in node and deploy a simple website with primarily text, right? easier than php
17:34 < yaayaYAY> ?
17:34 < yaayaYAY> 2013 were I am bro
17:34 < jrajav> PHP generally doesn't actually serve up the web pages
17:34 < skope> you don't need php to host a website
17:34 < jrajav> Node does
17:34 < skope> there are http-servers like apache, nginx, lighttpd, or you can use node
17:35 < yaayaYAY> wut do u mean serve
17:35 < skope> php doesn't show up the webpages in your browser
17:35 < jrajav> Receive an HTTP request for a certain page, retrieve it from the filesystem, and send an HTTP response with that page as the body
17:35 < skope> http servers do
17:35 < yaayaYAY> how much more is the learning curve for haskell to create a webserver?
17:35 < jrajav> That's generally handled by a server when you're using PHP
17:35 < jrajav> yaayaYAY: If you don't already know Haskell? Quite large
17:36 < yaayaYAY> holy shit batman
17:36 < yaayaYAY> I made a messagin app with php, but node just seems more elegant and bare bones, it's super easy to create a webserver with and host some simple website right?
17:37 < Musk> yaayaYAY what ever are your needs actually
17:37 < yaayaYAY> Musk: I wanna host some basic websites
17:38 < Musk> basic how ? static ? 
17:38 < yaayaYAY> Musk: what do u mean how?
17:38 < yaayaYAY> maybe a basically dynamic oage
17:38 < yaayaYAY> page*
17:38 < yaayaYAY> nothing too complex
17:39 < Musk> yaayaYAY well there is no prob doing this with node
17:39 < scar> So basically a client chat system can be setup using Node.js
17:39 < Musk> but you must take in consideration confort zone and knowledge of technology also
17:39 < scar> client logs in and gets to chat
17:40 < yaayaYAY> is it also easier than php to deploy maybe? and the web server creation is just more elegant, right?
17:40 < Musk> yaayaYAY well yes more elegant 
17:40 < yaayaYAY> I don't know, node seems hip and php just seems kinda queer
17:40 < scar> yaayaYAY you are comparing two different things though.
17:41 < jcrew> they were designed to do different things
17:41 < yaayaYAY> scar: wut's the difference exactly
17:41 < scar> this isn't dr pepper vs coca cola here
17:41 < Musk> yaayaYAY tell me about it, still have to make and make App out of PHP, getting tired of the overcrowded Framework & CMS landscape
17:41 < scar> well, first look at the difference between PHP and Javascript
17:41 < stagas> yaayaYAY: php is easier to deploy, with node you have a couple of hosting options or you need to set everything up yourself on a vps of a kind
17:41 < jrajav> Not sure if troll or spends way too much time reading idiotic blogs
17:41 < Musk> stagas ya but that's not much of prob when done
17:42 < yaayaYAY> stagas: I would use my own server for hosting, doesn't seem overly complex
17:42 < jcrew> Musk: deploying node is slowly becoming more 'process'ized than it was even a year ago
17:42 < yaayaYAY> even a laptop
17:42 < jcrew> meant that for stagas 
17:42 < scar> jcrew i ended up getting swamped and wife had her baby, so i wasnt able to continue my Node experiments
17:42 < Musk> jcrew ya -.-
17:43 < stagas> jcrew: still a far way from being newbie friendly
17:43 < scar> jcrew i did however get a confirmation that day from the managed support that node was setup and installed.. but not configured. where could i go to find where to continue?
17:43 < Musk> stagas are u kidding me ?
17:43 < scar> or is there just an easy way u just tell me here hah
17:43 < jcrew> scar: remind me again what you're up to, iirc it was setting up a web service?
17:44 < scar> jcrew nah it was my PHP site tester converting to JS, hosting requests via node
17:45 < stagas> Musk: ?
17:46 < Musk> ?
17:46 < Musk> stagas o i meant NodeJS is pretty n00b friendly
17:46  * Musk inb4 people rage
17:46 < jcrew> scar: ahh i remember, web service was just a part of it - to accept urls from clients to parse.  if i were you, my steps would be 1) set up a web service you could POST urls to from a client, 2) make node test URLs for you, 3) return the results
17:46 < stagas> Musk: not so sure about that unless I miss something entirely new and easy
17:47 < jcrew> scar: you can start on step 1 by installing node locally and playing around with expressjs
17:47 < yaayaYAY> I might not wanna really learn node, I just wanna deploy a self hosted webserver fast. Is node the shit, and php sucks. Does php have a higher learning curve?
17:47 < Musk> stagas well please tell me what part of it you find hard ?
17:47 < jcrew> yaayaYAY: if you don't want to learn anything then use apache and php
17:48 < yaayaYAY> jcrew: I might wanna learn haskell after, I don't mind learning some I might stick with it, but php has syntax of it's own, why not just learn some node js instead?
17:48 < jcrew> or use borland c++ builder to deploy web dlls
17:48 < scar> jcrew its already installed not configured. what do i need to configure
17:49 < stagas> Musk: everything
17:49 < jcrew> scar: on the server or on your local machine?
17:49 < scar> sserver
17:49 < scar> i put a tiket in bc i was busy and they installed it. 
17:49 < scar> ticket
17:49 < jcrew> install it on your local machine to play around with it
17:49 < Musk> stagas so installing a new module and associate to a current project your working on hard? 'npm install colors'
17:49 < stagas> Musk: it's not like you can copy paste some code from the net and upload and it's going to be working like with php
17:49 < scar> windows node.js
17:49 < scar> ?
17:49 < dz0ny> yaayaYAY: use capistrano and whatever rocks your boat(php, node, ruby) or if you are really lazy go with heroku
17:50 < jcrew> scar: yea
17:50 < Musk> stagas omg
17:50 < jcrew> dz0ny: that requires learning stuff
17:50 < Musk> stagas so programming for you is copy/paste
17:50 < stagas> Musk: we are talking about what is hard for newbies
17:50 < scar> Musk then "tweaking", of course =P
17:50 < Musk> -.-
17:50 < stagas> Musk: try creating a decent website with only node core
17:51 < dz0ny> jcrew: how can you do withoud learning anything? oh google c/p coding :)
17:51 < stagas> Musk: the concepts you need to learn are far beyond newbie friendly
17:51 < scar> jcrew what type, if any, of "configuring" would i need to do if its already installed?
17:51 < jcrew> dz0ny: lol yea, he said he didn't want to learn node - just deploy a simple script
17:51 < Musk> stagas -.-
17:51 < jcrew> scar: usually none - if it's installed then you can just do 'node <script>' 
17:52 < Musk> not sure if trolling or serious
17:52 < cbdfb> that like trying to make toast without knowing what bread is
17:52 < Musk> cbdfb +!
17:52 < Musk> +1*
17:53 < geNAZt> hi
17:53 < jcrew> Musk: i'd agree with stagas.. the concepts are difficult to learn when you say 'yea all these functions can run simultaneously'
17:53  * cbdfb blushes
17:54 < jcrew> and then you have to figure out how to control scope + all the other crap that is going on
17:54 < jcrew> it's not as easy as just firing up visual basic
17:54 < cbdfb> troll much?
17:54 < yaayaYAY> look, I wanna learn haskell, but not right now... too slow. I wanna deploy a webserver soon, but would like to maintain the skill in that language, php and the other shit's don't seem as useful a technical skill as node
17:55 < jcrew> cbdfb: ?
17:55 < yaayaYAY> I must just be a poopie head or something, I'm goona just try create something simple in node and see how that goes, I really don't think it can be that cumbersome compared to othe languages and webframeworks... or am I wrong?
17:55 < Musk> jcrew i'm not saying it easy, but i meant that with the modules present lots of it can be easily pick-up to make something good. While he claims 'everything' is hard. To this statement i say its pure non-sense.
17:55 < jcrew> cbdfb: you think learning vb is more difficult than learning js?
17:56 < jcrew> Musk: ahh, 'everything' being hard is surely bogus
17:56 < Musk> Visual Basic… saids it all actually 'its basic' -->> implying a 10 years can do some
17:57 < Musk> and believe me i known 10 yr who did V.B, personally i started at 15.
17:58 < Aria> I had a hell of a time with VB. It was so hard to get the boiler plate that DID anything up.
17:58 < Musk> o_O
17:58 < jcrew> i started with C when i was 10, VB never made sense to me 
17:58 < yaayaYAY> please help my above question guys... u guys are a real help
17:58 < Musk> jcrew lol
17:58 < jcrew> it was like intentionally not know how a hand works but saying "give me a hand"
17:59 < jcrew> knowing^
17:59 < Aria> yaayaYAY: BAsic things in node are pretty simple. But it's very low level, so sometimes you get surprised that you have to connect a couple parts yourself.
18:00 < yaayaYAY> okie dokes
18:00 < stagas> Musk: it's definitely not for someone who wants to put a quicky simple website up, there are lots to understand and learn first
18:01 < Musk> stagas have u heard about the module called 'Express' it even saids it in the world.
18:01 < Musk> word*
18:01 < Aria> Yeah. Definitely leans more toward the web application side of things if you're doing web programming with node
18:01 < Musk> Aria true thought
18:04 < dz0ny> From older days (10+ years ago) there was everything in perl, you could get free hosting with "install script", where you would simply clickety click and install something like forum, portal :).
18:04 < dz0ny> But now you have to learn(ouch), to deploy and manage stuff. I call this big improvement and I still can't code in perl. :)
18:06 < Aria> Hehe. 
18:07 < yaayaYAY> stagas: ... how much is there really to learn lol compared to other languages really... musk what's your take?
18:07 < yaayaYAY> wut u guys think of Dos on Dope framework http://secretgeek.net/dod_intro.asp
18:07 < Aria> Frameworks suck.
18:08 < Musk> yaayaYAY omg this is awesome XD
18:10 < yaayaYAY> Musk: so u think simple deployments r not really that hard in node?
18:10 < Musk> "If you can't trust public visitors from the internet, who can you trust? Executing user input as commands inside the operating system is the most direct way to get things done, and that's what matters most." <-- ilold so hard!
18:10 < jcrew> Musk: lol.
18:11 < Aria> (I'm of the opinion that frameworks should be little more than a suggestion for how to fit some excellent libraries or tools together)
18:12 < yaayaYAY> Musk:
18:12 < yaayaYAY> help meeee bro
18:13 < cbdfb> Musk: I made an API for redditors to directly modify my RAM, I predict 10000% coding efficiency improvement
18:16 < yaayaYAY> :(
18:21 < stagas> yaayaYAY: on the bright side, you can use your skills from node on the frontend, which is a big plus if you're doing websites
18:21 < yaayaYAY> stagas: haskell dudes say u don't even need js lol, what's u think?
18:22 < yaayaYAY> stagas: they say avoid js at all costs, but I want to deploy fast, but not is some bullshit we're my skills might not translate into the future like maybe php etc.
18:26 < jcrew> dz0ny: still a lot of perl around 
18:26 < Aria> Now that application servers are a more normal thing, perl is making a comeback.
18:26 < jcrew> dz0ny: just helped someone write levenstein distance cpan module in Perl XS 
18:27 < Aria> Nevermind that perl has adopted most of the fun language hackers. 
18:27 < jcrew> Aria: plus it has the goatse operator
18:28 < stagas> yaayaYAY: haven't seen a software written in haskell ever
18:28 < Aria> darcs?
18:28 < geNAZt> what does haskell use on client side ?
18:28 < geNAZt> i bet javascript :D
18:30 < Aria> Yeah. Check out Fay language.
18:30 < Aria> Hs subset compiled to JS
18:32 < stagas> you can use anything does the job really. I'm using node to generate php files in a project now ready to be deployed in any hosting in the world. it's a lot of fun mixing them up like that
18:33 < Joman> stagas: tell me more about your project?  a CMS generator?
18:33 < tjfontaine> source to source, or generated source are quite common techniques these days
18:34 < stagas> Joman: no nothing fancy, but it was easier getting most of the logic in node and have a few stuff left for php to handle
18:34 < Kneferilis> hello, haml had a filter :plain that doesn't process text, what is the equivalent in jade?
18:34 < Kneferilis> simply | ?
18:35 < Aria> Yup
18:38 < Kneferilis> oh, nice
18:39 < MI6> joyent/node: Ben Noordhuis master * 9e32c2e : dgram: fix double implicit bind error  Calling send() on an unbound socke - http://git.io/zDqRqw
19:27 < sk8ball> anyone care to chime in on how they have their node dev environment set up? be it running on linux, windows (w/ iisnode), windows w/ a linux vm - then what are you using as an editor/ide - emacs, vim, sublime text 2, web matrix 2, cloud9, eclipse, aptana?
19:27 < VultureZ> windows, using sublime as the editor 
19:27 < geNAZt> i have a netbook running a debian 32bit
19:28 < geNAZt> ide a eclipse juno javascript with ssh client on windows
19:28 < geNAZt> synced via dropbox
19:29 < geNAZt> anyone here uses passport ?
19:29 < ikss> sublime works under all of these systems -_-
19:29 < geNAZt> how can i use dynamic sucess and fil urls in strageties ?
19:29 < geNAZt> y but sublime doenst have outlines
19:29 < geNAZt> and so on
19:30 < geNAZt> eclipse also can run on everything that runs a jre :D
19:30  * mscdex shakes a fist at Java
19:32 < sk8ball> im on a win 7 machine... running node on an ubuntu server 12.04-LTS VM, been doing dev in eclipse and some sublime...
19:32 < sk8ball> just recently discovered Web Matrix 2 from microsoft
19:32 < geNAZt> y that should be fine
19:33 < Slade-> i use notepad++  i guess i could find something slicker :p
19:33  * ikss win 7 (dev) with sublime and local node + local server (freebsd for staging and testing) - all hooked up with git ;-)
19:33 < sk8ball> got a shared folder between the VM guest and the host machine 
19:34 < templar_> who's there
19:34 < rho> started using vim about a year ago after getting fed up with the JAVA based IDES (netbeans, eclipse) and don't think I'll ever turn back
19:34 < geNAZt> u must make the differ
19:34 < jcrew> sublime or vim
19:34 < rho> on an ubuntu box, my node server is debian
19:34 < geNAZt> you want an editor or an ide
19:35 < sk8ball> i never really could get into the vim or emacs type editors
19:35 < sk8ball> yeah there is lots of keyboard shortcuts
19:35 < rho> a few plugins made all the difference for me
19:35 < sk8ball> .... but
19:35 < jcrew> i really like vim, without the plugins i'm not sure i'd like it as much either
19:36 < geNAZt> eclipse has an remote debugger for node
19:36 < geNAZt> an webbrowser ( but not webkit :( )
19:36 < geNAZt> outlines
19:36 < geNAZt> and some features i would never give up
19:37 < Slade-> i've thought of downloading eclipse a few times. it sure seems like a ton of koolaid tho
19:37 < jcrew> geNAZt: i just can't deal with how slow eclipse is and how complicated the interface gets - i used to use it when i wrote android games
19:37 < geNAZt> y eclipse is slow, but only if it doesnt get enough ram
19:38 < geNAZt> if u configured your eclipse once it is easy to use
19:38 < jcrew> if 8GB on a machine isn't enough for an IDE, i don't know what is : - )
19:38 < ikss> sk8ball: try http://vim.spf13.com/ ;-)
19:38 < rho> jcrew, agree with the slowness.  It's fine in the beginning, but after you have 20 or 30 good sized eclipse projects, things grind to a halt.
19:38 < Slade-> if visual studio wasnt horrid for javascript i'd use it. but for now.. just notepad++
19:38 < geNAZt> if u dont find something in eclipse: google is your friend :D
19:39 < geNAZt> jre has some limits
19:39 < ikss> oh and webstorm looks very nice, for JS dev ;-)
19:39 < geNAZt> and the default eclipse limits by 500 MB ?
19:39 < jcrew> geNAZt: i do agree it is feature rich and options for it are plentiful
19:39 < geNAZt> y it is slow but no ide can get so much features than eclipse can
19:39 < jcrew> ikss: i was looking at that and at NIDE
19:40 < geNAZt> a js compilant of eclipse would be nice......
19:40 < geNAZt> :D
19:47 < mscdex> notepad++ ftw!
19:48 < sk8ball> so its mainly eclipse and sublime 2 ppl?
19:48 < sk8ball> anyone experimented with ms web matrix 2?
19:49 < sk8ball> i  just ran across it a few days ago and have been playing w/ it a bit it has quite a bit of support for node
19:49 <@konobi> vim
19:50 < rho> it's beautiful because you make it what you want it to be
19:50 < rho> vim that is
19:53 < s5fs> vim is hard to learn though
19:53 < s5fs> i'm still learning!
19:53 < s5fs> (however, i view this as a benefit, not a detractor)
19:55 <@konobi> http://www.openvim.com/tutorial.html
19:56 < elliottcable> Hey. Is process.title not a thing?
19:57 < geNAZt> what do u mean ?
19:58 <@konobi> elliottcable: checked the docs?
20:00 < TehShrike> elliottcable: http://nodejs.org/api/process.html
20:00 < Sicp> is the connect module something you use often?
20:01 < scar> elliottcable: http://bit.ly/S24g1g
20:01 < geNAZt> y i use it only
20:01 < geNAZt> with express ontop of it
20:01 < scar> heck, feelin lucky is #1 haha
20:02 < Sicp> express huh..
20:02 < Sicp> ok
20:02 < yaayaYAY> vim vs sublime text... go
20:02 < geNAZt> express provides all middleware u need for the web
20:02 < geNAZt> sessions, cookies, routers, view support
20:03 < TehShrike> yaayaYAY: they're different classes of editors.  ST is one of the best friendly+efficient editors around.  vim and emacs are in a class of their own when it comes to efficiency, and it shows in the learning curve.
20:04 < Sicp> avid Linux user here, yet ..Sublime Text
20:05 < yaayaYAY> can i start using vim and have comprable efficiency with sublime... i've been using sublime and don't know any of the shortcuts really... I suck. The only really advantage I see with sublime is the scrollable birds eye view of the text at the top right
20:05 < yaayaYAY> TehShrike: 
20:05 < Raynos> I wrote a little queue to do things one at a time asynchronously ( https://gist.github.com/4422304 )
20:06 < Sicp> look into the shortcuts, some are very useful and quite unique to Sublime
20:06 < Raynos> is there a module that does just that and only that?
20:06 < TehShrike> yaayaYAY: with vim, you'll need to at least learn the basic commands for navigating around and switching between modes
20:06 < TehShrike> Sublime Text lets you pick up on the shortcuts at your own pace
20:07 < geNAZt> Raynos: async ? https://github.com/caolan/async
20:07 < Raynos> async is a massive kitchensink
20:07 < Raynos> that code was 20 lines
20:07 < Raynos> so I want a 20 line module or i'm making it myself
20:07 < geNAZt> y but it is the first lib that comes in my head that can help u with async things :D
20:14 < yaayaYAY> i'm on nodebeginner.com pr wadeva and in building the app they have this sentence
20:14 < yaayaYAY> "Our server will need to answer differently to requests, depending on which URL the request was asking for, thus we need some kind of router in order to map requests to request handlers "
20:15 < yaayaYAY> they don't mean actual router right, like layer 3 IP router?
20:15 < geNAZt> no
20:15 < geNAZt> something like req.url = "/login" => execute module x
20:16 < yaayaYAY> ok just making sure, because routing requests when they're already on the server didn't make sense lol... ok I get it thnx
20:18 < elliottcable> konobi, TehShrike, scar ⑊ thanks for the sarcastic responses and all ,but I *know* it's in the docs. That's where I found it. It's simply “not working,” and “it's not working” is not usually a constructive thing to ask.
20:18 < elliottcable> Hence, my assumption that perhaps the docs were somehow out of date.
20:19 < elliottcable> see: http://ell.io/iVE4y
20:20 < elliottcable> Setting process.title, quite straight-forward. What am I doing wrong (and/or), how am I being an idiot?
20:21 <@konobi> which platform?
20:23 < elliottcable> Mac OS X 10.7, Mountain Lion
20:23 < elliottcable> Node v0.8.16
20:24 < geNAZt> debian 6 + node 0.8.16: http://www7.pic-upload.de/31.12.12/cfjilks2pff.png
20:25 <@konobi> https://github.com/joyent/node/issues/3687
20:25 < MerlinDMC> process.title is a no-op in osx
20:25 < geNAZt> a okay
20:28 < elliottcable> ahhhh crap.
20:28 < elliottcable> Thanks, guys.
20:37 < yaayaYAY> WHY... does the hello world function have function(request, response) {....... what is the function of request?
20:37 < TehShrike> yaayaYAY: that's the HTTP request coming from the client
20:37 < TehShrike> yaayaYAY: it looks like this http://nodejs.org/api/http.html#http_class_http_serverrequest
20:39 < yaayaYAY> TehShrike: what would u call server relative to http, an object, what?
20:39 < yaayaYAY> create server is a method of the http object?
20:39 < yaayaYAY> TehShrike: 
20:39 < Sicp> creating a server is so much easier with Express
20:40 < TehShrike> yaayaYAY: createServer is how you get an http server to start up
20:40 < TehShrike> yaayaYAY: but to handle incoming requests, you need a function
20:40 < Sicp> thanks geNAZt 
20:40 < TehShrike> yaayaYAY: that function takes, as its parameters, a request object and a response object
20:40 < geNAZt> np :)
20:41 < yaayaYAY> TehShrike: so createServer is a method of the http object that creates a server object? that takes a request and response object?
20:41 < yaayaYAY> does it create a server or server object lol? it's a little abstract to me
20:41 < yaayaYAY> TehShrike: 
20:42 < geNAZt> no the createServer function takes a callback function
20:42 < geNAZt> in this callback function a request and a response object is passed in for every request the http server gets
20:42 < TehShrike> yaayaYAY: there's the http module
20:42 < TehShrike> yaayaYAY: the http module has a createServer function
20:43 < TehShrike> the http module is always the same
20:43 < yaayaYAY> ok thanks TehShrike and geNAZt 
20:43 < yaayaYAY> so a module is just some crazy shit right TehShrike 
20:43 < TehShrike> nah, a module is just a library
20:44 < yaayaYAY> a v8 lib?
20:44 < yaayaYAY> TehShrike: 
20:44 < TehShrike> read over these docs a few times, life will get easier: http://nodejs.org/api/modules.html and http://nodejs.org/api/http.html#http_http_createserver_requestlistener
20:45 < yaayaYAY> i'm going over the node beginner tut now, will check those docs thanks
20:45 < TehShrike> http is one of the built-in modules that comes with node.js.  All the info about it (and the other modules that come with node) can be found here http://nodejs.org/api/
20:45 < yaayaYAY> TehShrike: holy batman
20:45 < yaayaYAY> TehShrike: wut is node?
20:46 < TehShrike> node.js
20:46 < shihan> personally, i tend to often think of them as objects and methods as well, but the way node tends to get used its not entirely valid imho
20:46 < Sicp> what's the tmp folder that npm generates when installing a module good for?
20:46 < Sicp> do I just remove it when the install is done?
20:47 < TehShrike> shihan: well, that's pretty much always how you interact with a module, so it seems a pretty reasonable way to think about it
20:47 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
20:47 < yaayaYAY> TehShrike: so it's a js library? what's the relationship to v8?
20:47 < TehShrike> haha, so you're new to the thing, eh?
20:48 < yaayaYAY> TehShrike: neeeeew
20:48 < TehShrike> node.js is a fancy wrapper around V8, with built in JavaScript-accessible libraries for talking to the internet and the file system
20:48 < TehShrike> It comes with a module system for loading libraries
20:48 < TehShrike> The module system is how you interact with the built-in tools that you can use in your own JS
20:48 < shihan> TehShrike, yeah, i agree, but the way they get used in node tends to be quite different to how you would in other oo-type languages (java/c++/etc)
20:49 < geNAZt> because node is fully async
20:50 < yaayaYAY> TehShrike: modules like express.js for example... and is v8 just chroms js virtual machine for managing memory etc.?
20:51 < TehShrike> yaayaYAY: v8 is the JavaScript engine used by Chrome.  It's open, so other stuff uses it too (like node.js)
20:51 < scar> If I grab the HTML source using a node.js app, how can i detect things like tags on the page? for example, not only if <html></html> tags exist, but also if there are any images (<img>), and if so how many, etc ? all this without regex, at least.
20:51 < geNAZt> v8 is the "compiler" for the javascript. node adds some c/c++/js libs to use tcp sockets, filesystems, child processes
20:52 < Sicp> what's the tmp folder that npm generates when installing a module good for, do I just remove it when the install is done?
20:52 < TehShrike> scar: you need a DOM traversal library
20:53 < shihan> geNAZt, i dont think its really cause its async, its more the way the definition and creation of objects are combined in nodejs, where they are generally seperate elsewhere
20:53 < yaayaYAY> Thanks TehShrike  geNAZt 
20:53 < TehShrike> scar: search nodezoo.com for "dom" or "html"
20:56 < scar> TehShrike, would i not use javascript for this? i didnt know i needed a node module
20:56 < scar> jcrew, you around?
20:56 < scar> meh ill just browse around heh
20:57 < TehShrike> scar: there are JavaScript modules that will do that, yes
20:57 < TehShrike> scar: you can find them on nodezoo
20:57 < TehShrike> Or by searching github
20:58 < geNAZt> scar: node.js ( v8 on a server ) hasnt a dom
20:58 < TehShrike> ^
20:59 < scar> ahhh
20:59 < scar> im very new to node.js
21:00 < TehShrike> So, because there's no DOM like there is in the browser, you just deal with the HTML as a string
21:00 < geNAZt> to say it easy: node.js ( v8 on server ) hasnt any browser like things
21:00 < geNAZt> like dom
21:00 < TehShrike> So you need some library to parse it up into a workable format so that you can browse around in it
21:01 < geNAZt> https://github.com/tmpvar/jsdom
21:01 < geNAZt> like this :D
21:01 < sohcahtoa> I was like why is no one mentioning jsdom?
21:01 < TehShrike> It's a top result on nodezoo if you search for either "dom" or "html" :-P
21:01 < TehShrike> But I was trying to train scar to go to nodezoo
21:02 < geNAZt> https://npmjs.org/
21:02 < sohcahtoa> I dunno nodezoo I but heard about jsdom on google and did npm install jsdom
21:06 < scar> so do i store the sourcecode, or will the jsdom allow me to grab the url itself
21:19 < shihan> scar, actually, someone yesterday was trying to do something similar to what your doing... http://pastie.org/5598788 might give you a bit of an idea
21:34 < tnorris> anyone know how to check isFinite() in v8?
21:35 < thl0> looking for a good server/client side javascript module to validate US and international phone numbers
21:36 < spcshpopr8r> good morning #node.js
21:37 < VultureZ> morning spcshpopr8r 
21:37 < spcshpopr8r> quick q
21:37 < spcshpopr8r> a dev has asked that I provide a mocha unit test for her rest api
21:38 < spcshpopr8r> is that the best way to go?  Is there another, better way to unit test a node.js rest api?
21:39 < geNAZt> tnorris: if (x == Infinity)
21:39 < spcshpopr8r> I've been out of node for a while, but a little poking around for examples led me to ask
21:39 < scar> loading jquery into node.js eh???
21:39 < scar> shihan,  ^
21:41 < thl0> I'd go with 'npm info tap' or 'npm info tape' these days for pretty much any testing needs
21:43 < tnorris> geNAZt: meant for the v8 C API. just found it though. they use isfinite from math.h
21:44 < spcshpopr8r> thl0: thanks...maybe you could point me to some good examples of tap/tape I've got the repos readme now...digging in
21:45 < geNAZt> does someone use passport with bitbucket or twitter ? if so how coulud i ask the user to add a email to his user profile before auth him
21:45 < thl0> most of my projects use tap to test things: http://github.com/thlorenz - inside the 'test' folder
21:50 < spcshpopr8r> thl0: very cool..thanks..do you have anything that tests a restful api with tap?
21:51 < thl0> spcshpopr8r:  unfortunately not, but you could use 'npm info request' to hit the endpoints and then test that it called back with expected results
21:52 < spcshpopr8r> thl0: that sounds good, I'll work that angle...again thanks for the tips
21:52 < shihan> scar, appears that way, though its not my code and i dont really know jsdom well enough to know what that is doing exactly
21:52 < thl0> spcshpopr8r: nop
21:54 < ins0mnia> substack: Any plans to upgrade shoe to Streams2?
22:22 < Slade-> does anyone here know how to do a redirect with node-http-proxy?
22:23 < Slade-> almost feel like i should switch to HAProxy :/
22:48 < shihan> Slade-, havent seen node-http-proxy, but with http-proxy you can do that by adding logic to the requestor callback bit
22:50 < Slade-> shihan: talking abotut his https://github.com/nodejitsu/node-http-proxy
22:51 < shihan> Slade-, yeah, thats the one... see the "custom server logic" bit, you could do redirects in there quite happily if you know what i imean
22:51 < Slade-> hm thats annoying. no built in logic. alright
22:52 < geNAZt> i hate passport -_-
22:54 < shihan> Slade-, from memory, there is a proxy based on haproxy that might suit your needs better
22:54 < Slade-> why not just haproxy?
22:54 < shihan> got me there :)
22:54 < geNAZt> cause haproxy is bad
22:54 < andrewaclt> What is the difference between connect-mongodb and connect-mongo?
22:55 < slajax> geNAZt: why is haproxy bad?
22:55 < geNAZt> it is single process => 1 core
22:55 < Slade-> geNAZt: define 'bad'
22:55 < geNAZt> and it has no caching
22:55 < geNAZt> varnish can fit in better
22:55 < slajax> it's meant to be a dead simple proxy
22:55 < geNAZt> i can cache littel thing like images or js / css files
22:55 < slajax> i missed the use case, but I don't think that means it's bad
22:55  * Slade- fails to see how thats any worse than node's http-proxy
22:55 < geNAZt> and can route multicore
22:56 < Slade-> varnish has no websocket support
22:56 < slajax> yes, varnish is good at what varnish is designed for, but the question is how is haproxy bad?
22:56 < geNAZt> on the cluster i worked ( 1 haproxy, 3 webservers ) haproxy was the bottleneck cause it only used 1 core
22:56 < geNAZt> and u dont have a chance to make it use more than one
22:56 < shihan> yeah, i too tend to prefer varnish over haproxy, but they each have a reason to exist
22:57 < slajax> to me they are copmletely differnet things
22:57 < slajax> haproxy isn't meant to scale the way nginx is
22:57 < geNAZt> y but for a pure proxy i would prefer varnish over haproxy
22:57 < slajax> and it's certainly not meant for what varnish does
22:57 < Slade-> geNAZt:  varnish still dosent support websockets.
22:57 < slajax> varnish is a reverse proxy
22:57 < slajax> it's not the same thing
22:58 < geNAZt> http://thruflo.com/post/23226473852/websockets-varnish-nginx
22:58 < geNAZt> varnish can handle websockets
22:58 < slajax> i would think nginx suits your needs better
22:58 < geNAZt> u must pipe them through varnish
22:58 < shihan> actually, presonally i prefer sticking a hardware appliance in front of everything :D
22:58 < shihan> nginx doesnt suppport websockets yet either iirc
22:58 < slajax> I'd rather nginx then any of the above
22:58 < geNAZt> nginx is fast
22:59 < slajax> yes, you are right about websockets
22:59 < slajax> haproxy is faster then nginx I believe
22:59 < slajax> but nginx obviously scales better
22:59 < geNAZt> nginx would also be better for static conecnt
22:59 < slajax> I put it in front of all of my apps, then proxy to varnish or node depending
22:59 < geNAZt> content*
23:00 < geNAZt> cause you have lesser in network traffic
23:02 < janmower> saying 'haproxy sux b/c it doesn't do caching' is like saying 'git sux b/c it's not centralized'  it's not the point of the project
23:03 < janmower> some proxies cache
23:03 < janmower> some proxies do protocols
23:03 < janmower> if you abuse one or the other you're gonna have a bad time
23:03 < janmower> haproxy is a good piece of work imo
23:03 < geNAZt> the major point because haproxy sucks => 1! core not more not less
23:03 < janmower> it does a clustering setup
23:04 < janmower> it == haproxy
23:05 < Slade-> hmm i hate varnish and haproxy's homepages equally
23:05 < shihan> lol
23:05 < geNAZt> lol
23:07 < janmower> that's why you only read manpages
23:12 < Slade-> i'll use node's http-proxy for now. and when nginx supports websockets. i'll switch back to it :)
23:12 < geNAZt> does mongodb support ttl for documents ?
23:16 < shihan> one plus to using nginx/haproxy/valgrind i personally like is that you can set them up to bind port 80 without being root and its less risky then doing so with the node interprettor
23:17 < Slade-> err. they all have to bind port 80 as root..
23:17 < shihan> not on linux they dont
23:17 < geNAZt> you cant bind port 80 if u arent root oO
23:17 < shihan> you sure can
23:17 < geNAZt> tell me how pls
23:17 < Slade-> how does that happen?
23:17 < shihan> setcap
23:18 < Sicp> you cannot use any port lower than 8000 if you are not root
23:18 < shihan> you can mark a binary with permissions such that it can do certain things normally "priveledged" with setcap (like binding low ports)
23:19 < Slade-> Sicp: 1024 i thikn
23:19 < Slade-> shihan: which requires root to do
23:19 < geNAZt> sicp the limit is by 1024
23:19 < shihan> in fact, there's a good page describing it http://wiki.apache.org/httpd/NonRootPortBinding 
23:19 < shihan> Slade-, ahh yes, you require root to set the permission, but not to execute
23:19 < geNAZt> one thing more i learned
23:20 < geNAZt> thx shihan
23:20 < shihan> doing it to an interprettor is a little risky tho
23:20 < geNAZt> you can declare a js as binary
23:20 < shihan> geNAZt, np
23:22 < geNAZt> anyone here who is an expert for mongodb ?
23:26 < chovy> geNAZt: just ask
23:26 < geNAZt> i want to have a ensureIndex on a field
23:27 < geNAZt> are there sorts of events that i can get for documents that are deleted ?
23:27 < geNAZt> and does the bson date type differ from the javascript Date object ?
23:28 < jhsto> Hi guys, I have a big array, which I append to a file using filesystem api, but I would like to get rid of the commas. Any idea how to do that?
23:28 < chovy> geNAZt: are you using mongoose?
23:28 < geNAZt> no the native mongo driver
23:28 < geNAZt> jhsto: which commas ?
23:28 < chovy> i'm pretty sure the dates are the same. 
23:28 < chovy> not sure about ensureIndex
23:29 < chovy> i use new Date; in mongoose for 'created_at' field on an object. I would expect that to work natively as well.
23:29 < geNAZt> the documentation says, if i use bson date type for the index and define a expireAfterSeconds it would work
23:29 < geNAZt> but not sure if the bson date and the javascript date object differ in mongo
23:30 < jhsto> geNAZt, I'm pushing new data to the array, which generates commas between each insert
23:30 < geNAZt> do you have a paste or a gist ?
23:30 < jhsto> I would like to get rid all of them, but .replace wont work to a single line only
23:31 < jhsto> for (i = 0; i < 1000000; ++i) {   strings.push(new Rand + '\r\n'); };
23:31 < jhsto> basically thats it
23:31 < jhsto> it generates commas when between each new rand
23:32 < geNAZt> you have an array like so: ["12","135",.....
23:32 < jhsto> yea
23:32 < geNAZt> so it should look
23:32 < jhsto> when i use fs.writeFile
23:32 < Sicp> can I read user input (from a form) through something other than connect module?
23:33 < geNAZt> fs.writeFile( array, file cb ); ?
23:33 < geNAZt> or do you something with the array before ?
23:33 < jhsto> no i do not
23:33 < geNAZt> why dont u use json ?
23:34 < Sicp> nevermind
23:34 < Sicp> http://stackoverflow.com/questions/4295782/node-js-extracting-post-data
23:34 < jhsto> geNAZT, ill take a look at it
23:34 < jhsto> Thanks
23:35 < geNAZt> sicp: it only works with plain data
23:35 < geNAZt> if u have some multipart forms it will not work that way
23:35 < Sicp> I am going to have to use connect module, yea?
23:36 < geNAZt> https://github.com/felixge/node-formidable
23:36 < janmower> read about priveleged port:  'man -s 7 ip' (at least the AF_INET man pages were there on ubuntu)
23:50 < Sicp> aha, what I did was use Express' own bodyParser(), fuck connect
23:50 < Sicp> seemed sloppy
--- Log closed Tue Jan 01 00:00:02 2013
