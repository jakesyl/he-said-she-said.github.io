--- Log opened Wed Apr 10 00:00:18 2013
--- Day changed Wed Apr 10 2013
00:00 < dypsilon> jschall, dust.js is pretty well supported by linkedin and pretty active.
00:00 < dypsilon> used in production by linked in and i think paypal
00:01 < dypsilon> also it's the only mature engine i could find which supports asynchronous helpers
00:05 < jschall> dypsilon: so i assume i want to use dustjs-linkedin?
00:05 < jschall> dypsilon: since the documentation says to "npm install dust," but dust hasn't been updated in 2 years
00:05 < dypsilon> jschall, what documentation?
00:06 < jschall> dypsilon: http://akdubya.github.io/dustjs/
00:06 < jschall> dypsilon: was the documentation that i could find.
00:06 < dypsilon> jschall, yeah thats the dust documentation, but dust was abandoned by its maintainer
00:07 < jschall> ok
00:07 < jschall> so use the linkedin fork?
00:07 < dypsilon> http://linkedin.github.io/dustjs/
00:07 < dypsilon> this is the documentation you want
00:07 < dypsilon> https://github.com/linkedin/dustjs/wiki/Dust-Tutorial
00:08 < jschall> and is there any concise, up to date tutorial on using it as an express rendering engine (or using any rendering engine with express)?
00:08 < dypsilon> but the old dust docs are pretty good, too. most parts are in tact
00:08 < jschall> thank you, by the way
00:08 < dypsilon> https://github.com/chovy/express-template-demo
00:09 < jschall> so consolidate is good?
00:10 < dypsilon> here is what you need
00:10 < dypsilon> https://gist.github.com/dypsilon/5350573
00:11 < dypsilon> probably withouth the static part
00:11 < dypsilon> jschall, np
00:12 < dypsilon> the old docs are still pretty good though, read them
00:13 < jschall> dypsilon: ok, will do. i think consolidate tries to require('dust') before it tries the linkedin version, so i was screwing it up just by having 'dust' installed
00:13 < jschall> which just crashes at this point, of course.
00:18 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
00:20 < JamesS237> Is there anyone here  who has used Nodejitsu's Haibu in production? If so, what are the pros and cons for you?
00:24 < codingstream> i was confused when trying to use it -- probably just because there are virtually no docs
00:24 < codingstream> i ended up wiring together something with http-proxy and forever myself
00:25 < kam187-rMBP> oh that looks interesting
00:25 < kam187-rMBP> havnt used it tho
00:25 < kam187-rMBP> what are u trying to do btw?
00:26 < codingstream> scaling out websockets pretty heavily
00:26 < kam187-rMBP> ahh cluster etc?
00:26 < codingstream> yup
00:26 < kam187-rMBP> i had a big headache with that earlier
00:26 < kam187-rMBP> it leaks alot with redis :/
00:26 < codingstream> im using sockjs
00:26 < kam187-rMBP> ahh
00:26 < kam187-rMBP> how is that?
00:27 < codingstream> havent had any issues yet
00:27 < kam187-rMBP> i ended up patching socket.io to fix it so it's ok now, although i'm using https so that's another headache
00:27 < codingstream> it does a lot less out of the box than socketio
00:28 < JamesS237> I'm writing an application where a school will order a server. A ec2 instance is started up with Node.js and runs their Timetablr server on a subdomain. But, I am having 2 node processes being load balanced for zero-downtime updates
00:28 < dypsilon_> I just found a way how to invoke node.js style callbacks ( https://gist.github.com/dypsilon/5350284 ). Is there any better way or ready to use implementation (in lodash, async etc.)  I can use?
00:28 < kam187-rMBP> ahh
00:28 < kam187-rMBP> what's your data store?
00:28 < codingstream> redis and couch
00:29 < kam187-rMBP> ahh
00:29 < gravel> !faw
00:29 < gravel> !faq
00:29 < kam187-rMBP> !fap
00:29 < kam187-rMBP> :P
00:29 < gravel> !spooge
00:30 < gravel> is there a bot on here with a faq?
00:30 < gravel> i'm new to node.
00:30 < codingstream> dypsilon_: looks good :)
00:30 < JamesS237> I'm using MongoDB with Redis
00:30 < dukedave> Can anyone install this without, 'FATAL ERROR: JS Allocation failed - process out of memory':   https://npmjs.org/package/tzwhere
00:31 < kam187-rMBP> gravel: don't think so, but there's a load of tutorials online
00:31 < codingstream> gravel: that's what we're here for
00:31 < gravel> I'm looking for some best practices, widely used frameworks.. etc. 
00:35 < codingstream> http://www.nodebeginner.org is pretty good i hear
00:35 < dypsilon_> gravel, I think the best way is just to go to nodejs.org and start from there. You will sooner or later arive at npmjs.org and there you will find the most widely used packages.
00:36 < dypsilon_> also yeah, express ist very beginner friendly
00:36 < dypsilon_> but you will probably like flatiron if you are coming from a java or oo php background
00:36 < rcombs> what's the worst thing that could happen if I set a Buffer's .length to something lower than it already was?
00:36 < codingstream> i disagree, i think a lot of people come to node seeing express apps and go "maybe i should check out this node thing"
00:38 < gravel> I could just start coding.. but i wanted to know maybe some pitfalls that are documented.. maybe use like module pattern or something 
00:39 < codingstream> try to use streams when you can
00:39 < dypsilon_> grantbow, do you know some other language already?
00:39 < jschall> dypsilon_: so, with dust, if i want to have a common wrapper around all my templates, do i need to split it into a header and footer and use  two partials (includes)?
00:39 < codingstream> think of things as streams, not as buffers or chunks of data
00:39 < gravel> websocks!
00:39 < gravel> er. .websockets
00:39 < dypsilon_> websocks :)
00:40 < rcombs> codingstream: unless you're using buffers
00:40  * gravel is wearing some of those right now.
00:40 < rcombs> codingstream: think of buffers as buffers
00:40 < codingstream> gravel: take a look at https://github.com/maxogden/art-of-node too
00:40 < rcombs> :P
00:40 < dypsilon_> jschall, you can do that, I think the layouts feature is better.
00:41 < jschall> dypsilon_: do you mean blocks and inline partials?
00:41 < rcombs> codingstream: that actually looks quite nice, thanks for the link
00:41  * rcombs will probably show that to newbies
00:41 < gravel> codingstream: ty
00:41 < gravel> bbl
00:42 < dypsilon_> codingkevin, great link indeed
00:42 < rcombs> I wish JS inheritance was just a *bit* better
00:42 < jschall> dypsilon_: ah, i understand them better now
00:43 < dypsilon_> jschall, yeah, right, blocks and inline partials
00:43 < dypsilon_> i think they are better for html layouts
00:44 < rcombs> on the bright side, I can subclass Buffer now
00:44 < dypsilon_> rcombs, why do you think it's bad?
00:44 < dypsilon_> i love prototypes
00:44 < rcombs> dypsilon_: it's not bad, it just could be better
00:45 < rcombs> dypsilon_: for instance, it'd be nice to be able to specify arguments for the super-class, or inherit from multiple classes
00:46  * rcombs is currently inheriting from Buffer by setting the prototype to new Buffer(20); and setting this.length = somethingSmaller; if necessary
00:46 < dypsilon_> rcombs, you can inherit from multiple objects (!)
00:46 < rcombs> dypsilon_: yeah, parasitically
00:46 < dypsilon_> rcombs, you could work with Buffer.prototype directly
00:47 < dypsilon_> I may be wrong here though
00:47 < dypsilon_> probably
00:47 < rcombs> dypsilon_: most of the important stuff for Buffer is in the constructor
00:48 < dypsilon_> rcombs, right
00:49 < dypsilon_> well i'm off, bye overyone
00:49 < rcombs> ooh, I'm enjoying this
00:49 < rcombs> having these classes actually be Buffer subclasses instead of calling .toBuffer whenever I want to use them
01:01 < JamesS237> So, what should I use instead of Haibu?
01:03 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
01:06 < kam187-rMBP> JamesS237: node cluster?
01:07 < JamesS237> kam187-rMBP: Can I easily start stop multiple processes with node cluster?
01:07 < kam187-rMBP> well you just fork processes, you could setup a socket they listen to for your commands
01:08 < kam187-rMBP> one socket on the master will do it, as it can track child nodes
01:09 < JamesS237> kam187-rMBP: Yeah. Thats a good point. Is that production ready?
01:09 < kam187-rMBP> yeah, i'm using it right now
01:09 < kam187-rMBP> i have one master running 8 forked workers, all running websockets (socket.io)
01:10 < kam187-rMBP> abut 2500 clients up right now
01:10 < kam187-rMBP> Cpu(s):  3.5%us,  0.5%sy,  0.0%ni, 95.8%id,  0.0%wa,  0.0%hi,  0.3%si,  0.0%st
01:10 < kam187-rMBP> Mem:  32850432k total,  2418132k used, 30432300k free,   138464k buffers
01:10 < kam187-rMBP> Swap: 16498680k total,        0k used, 16498680k free,   748320k cached
01:11 < JamesS237> what infrastructure is that running on?
01:12 < dukedave> Can anyone install this without, 'FATAL ERROR: JS Allocation failed - process out of memory':   https://npmjs.org/package/tzwhere
01:14 < JamesS237> kam187-rMBP: I'm using AWS, what about you?
01:18 < kam187-rMBP> i use a dedicated hoster server
01:19 < kam187-rMBP> for large scale it's cheaper in the long run
01:20 < jesusabdullah> yo dawgs, how do I close a socket.io connection?
01:20 < jesusabdullah> client-side I mean
01:20 < JamesS237> kam187-rMBP: Yeah. Do you have you DB on the same server?
01:20 < kam187-rMBP> yeah, i actually use redis as a memory db
01:21 < kam187-rMBP> as mainly clients upload data, and other clients view it live over a persistant websocket
01:21 < kam187-rMBP> i'm using 2 redis instances, one for channel messages and one for the actual data
01:21 < kam187-rMBP> just an easy way to use 2 cores more than anything else
01:22 < jesusabdullah> is there a socket.io channel I should be aware of?
01:22 < ChrisPartridge> dukedave: worked fine here
01:23 < dukedave> ChrisPartridge, oh
01:23 < ChrisPartridge> dukedave: on node 0.8.x
01:23 < dukedave> That's not what I wanted to hear :)
01:23 < kam187-rMBP> jesseproulx: #socket.io
01:23 < dukedave> I'm on 0.10.2 here
01:23 < kam187-rMBP> jesseproulx: socket.disconnect(); should do it
01:23 < ChrisPartridge> jesusabdullah: try the close method
01:23 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
01:24 < dukedave> Let me try 0.8
01:25 < jesusabdullah> kam187-rMBP: yeah I thought so too :(
01:25 < kam187-rMBP> jesusabdullah: it works for me
01:25 < kam187-rMBP> what's the problem?
01:25 < jesusabdullah> no close method
01:26 < kam187-rMBP> socket = new io.connect(socket_server, { secure: true });
01:26 < kam187-rMBP>         // Add a connect listener
01:26 < kam187-rMBP>         socket.on('connect',function() {
01:26 < kam187-rMBP> etc
01:26 < jesusabdullah> kam187-rMBP: no disconnect event/callback being triggered
01:26 < jesusabdullah> kam187-rMBP: and my tests not exiting cleanly
01:26 < kam187-rMBP> socketTimeout = setTimeout(function() {
01:26 < kam187-rMBP>                                // Timed out
01:26 < kam187-rMBP>                                socket.disconnect();}, 15*1000)
01:26 < kam187-rMBP> hmm it works for me :/
01:27 < kam187-rMBP> the client is /*! Socket.IO.js build:0.9.11, 
01:27 < kam187-rMBP> that's the latest one afaik, i'm on 0.9.14 
01:28 < ChrisPartridge> jesusabdullah: https://github.com/LearnBoost/engine.io-client/blob/master/lib/socket.js#L516
01:28 < dukedave> ChrisPartridge, bingo, works on 0.8.23 for me also.
01:28 < dukedave> Where should I go from here I wonder, I'll email maintainer 
01:28 < ChrisPartridge> dukedave: yep, they probably haven't tested on 0.10.x
01:29 < jesusabdullah> it's cool I'm on 0.8.23 here
01:29  * dukedave nods
01:29 < jesusabdullah> ChrisPartridge: that is engine.io I'm using socket.io 0.9.x
01:29  * jesusabdullah crosses his arms
01:29 < dukedave> Any intuition what a 'good latest stable' version to dev on is?
01:29 < jesusabdullah> dukedave: basically, you have two choices: latest 0.8, or latest 0.10
01:30 < jesusabdullah> dukedave: if you're writing new things and don't mind if a few libraries are possibly broken, roll 0.10
01:30 < dukedave> jesusabdullah, do we not talk about 0.9? :)
01:30 < ChrisPartridge> dukedave: odd releases are unstable
01:30 < dukedave> Ah
01:30 < dukedave> Figures
01:30 < ChrisPartridge> :)
01:30 < jesusabdullah> dukedave: we follow a convention where odd releases are "unstable" and even releases are "stable"
01:30 < dukedave> Okay thanks guys
01:30 < jesusabdullah> dukedave: by debian standards I'd say 0.10 is like "debian testing" and 0.8 is like "debian stable"
01:30 < dukedave> Right? :)
01:30 < jesusabdullah> dukedave: 0.11 would be "debian sid" if it existed
01:31 < jesusabdullah> just to give you an idea
01:31 < dukedave> Thanks 
01:31 < ChrisPartridge> jesusabdullah: btw, socket-io-client will use engine-io-client
01:31 < ChrisPartridge> afaik
01:31 < jesusabdullah> ChrisPartridge: if that were so .close would not have exploded, maybe in the 1.0 branch
01:31 < jesusabdullah> ChrisPartridge: (probably in 1.0)
01:31 < ChrisPartridge> ah ok
01:35 < jesusabdullah> bahhh what is this I don't even
01:35 < jesusabdullah> whatevs, I'm gonna process.exit(0) and call it a day
01:38 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
01:43 < rcombs> subclassing is SO NICE!
01:51 < jesusabdullah> Oh word, it's working now, just taking a million years for some reason
01:51 < jesusabdullah> WEIRD
01:51 < AAA_awright> rcombs: Subclassing?
01:52 < rcombs> AAA_awright: "subclass of x" = "class that inherits from x"
01:53 < AAA_awright> rcombs: Yeah I'm not sure what that means in the context of ECMAScript
01:53 < AAA_awright> Prototype chain?
01:53 < rcombs> AAA_awright: yep
01:54 < jesusabdullah> idk man subclassing can get gnar-dogg quickly
01:54 < jesusabdullah> it's my major complaint regarding python code tbhirlimo
01:57 <@TooTallNate> rcombs: mixins ftw!
01:59 < ChrisPartridge> ^ +1
02:04 < mscdex> people choose some odd names for modules
02:04 < deoxxa> mscdex: example?
02:05 < mscdex> "crackajax" -- at first glance you might think it has something to do with ajax but it's something to do with excel worksheet passwords
02:05 < deoxxa> that... yeah
02:05 < deoxxa> ok
02:05 < deoxxa> that's a bit weird
02:09 < ChrisPartridge> mscdex: i'm more concerned with packages like https://npmjs.org/package/dicks
02:10 < deoxxa> rofl
02:10 < MobCat> wow
02:10 < mscdex> ChrisPartridge: that's a whole other issue
02:10 < ChrisPartridge> although.. i guess they chose the right name
02:10 < deoxxa> i'm all sorts of immature
02:10 < deoxxa> i love it
02:10 < MobCat> commit your own dicks to the project then
02:11 < gluxon> ChrisPartridge: .... thanks for posting that.
02:11 < ChrisPartridge> gluxon: yw, use it wisely...
02:11 < mscdex> and remember the default is 5
02:31 < hello_kitty> is there a way to treat a module as if it has a constructor?
03:01 < faceleg|work> why?
03:31 < xeodox> hi
03:31 < AshyIsMe> hi
03:31  * niggler pets xeodox 
03:33 < ningu> mikeal: your challenge, if you choose to accept it, is to answer a question that only those of great node wisdom can answer
03:34 < ningu> it has to do with http requests so you are well positioned
03:35 < someprimetime> niggler: 
03:35 < someprimetime> can you feel it in the air tonight?
03:35 < ningu> what, the smog over manhattan?
03:35 < niggler> im pumped
03:36 < someprimetime> not sure i'm in california so it's pretty god damn gorgeous out here
03:36 < ningu> hehe yeah it is
03:36 < niggler> i wish clipboard manipulation wasn't such a pain
03:36 < ningu> I know niggler is in nyc so I thought maybe you were talking about the same air
03:36 < niggler> someprimetime is waiting for crackajax
03:36 < someprimetime> ningu: ah i've seen niggler in #javascript and more recently on hn
03:37 < someprimetime> but hn is a fucking cult
03:37 < someprimetime> so i block it in my host files
03:37 < someprimetime> s/les/le
03:37 < ningu> haha
03:37 < ningu> why do you say that?
03:37 < niggler> some people freewrite
03:37 < niggler> i troll HN
03:37 < ningu> I thought bitcoin was the cult
03:38 < someprimetime> nah bitcoin is the illuminati
03:38 < someprimetime> ningu: hivemind^200000
03:38 < someprimetime> one huge circle jerk imo where if you have a dissenting opinion you are shunned
03:38 < niggler> hey anyone notice that 0.8.xx crypto is significantly faster than 0.10.1?
03:39 < niggler> someprimetime id describe it differently
03:39 < niggler> HN is a sort of honeypot
03:40 < someprimetime> pg is pooh
03:40 < niggler> if that distracts people and keeps ##javascript and #node.js more free, its doing a service
03:40 < chilts> why?
03:40 < chilts> it's aces! :)
03:40 < someprimetime> he wipes honey on his users
03:40 < someprimetime> niggler: haha +1
03:40 < ningu> personally I think true hackers should only dress in an english hacking jacket
03:41 < someprimetime> that's a good rule
03:45 < MitchW> can someone here verify I'm reading the node.js source right?   Am i correct in thinking node.js implements HTTP(S) almost entirely in javascript? (built on top of wrappers around native sockets/openssh)
03:46 < tjfontaine> MitchW: the crypto work is still handled by node_crypto.cc (i.e. openssl)
03:47 < MitchW> yeah openssl* sorry :)   that's awesome :)
03:48 < MitchW> I've been tinkering w/ a project and thinking of doing my HTTP work in JS instead of using libcurl, and looking for options :)
03:49 < ningu> speaking of http here is my question for mikeal but really it's for anyone who knows
03:49 < gkatsev> 42
03:50 < ningu> I was using request with accept-encoding: gzip and I noticed that if I use the callback that returns the whole body, it fails when I do zlib.gunzip()
03:50 < niggler> tjfontaine has crypto slowed down?
03:50 < ningu> but if I pipe the response to zlib.createGunzip() it works
03:50 < ningu> and I have no clue why that should be different
03:50 < tjfontaine> niggler: depends on what you mean
03:50 < ningu> something with character encodings perhaps
03:52 < niggler> tjfontaine using createDecipher with rc4 takes twice as long and calculating an md5 hex digest is roughly 6x
03:52 < dekuked> hey I am having a lot of trouble just getting the right grunt on my path. I am on ubuntu and installed nvm and then npm and now  I don't know what to do :(.
03:52 < dekuked> npm isn't on my path either
03:53 < tjfontaine> niggler: yes, there were some regressions there in v0.10, but on the whole tls held up pretty well
03:56 < ningu> dekuked: are you sourcing nvm.sh?
03:56 < ningu> and there's an nvm alias default command
04:19 <@konobi> any mapbox folks around?
04:31 <@mbalho> konobi: #mapbox is a thing
04:32 < faceleg|work> gundam
04:32 <@Nexxy> so is #jifasnif
04:32 <@Nexxy> just sayin'
04:33  * ningu punches mongoose
04:43 <@konobi> mbalho: =0P
04:50 < deoxxa> deoxxa's "cool module of the day": https://github.com/mourner/suncalc
04:58 < kenperkins> what's the tl;dr on vows vs mocha
04:59 < deoxxa> mocha has nyancat
04:59 < substack> kenperkins: https://github.com/isaacs/node-tap
04:59 < deoxxa> hands down winner
04:59 < substack> tests should just be ordinary programs
04:59 < substack> that you run with `node`
05:00 < kenperkins> substack: win: http://testanything.org/
05:00 < kenperkins> lol
05:00 < ashnur> is that still down?
05:00 < ashnur> :P
05:01 < tjfontaine> that webpage comes and goes over time
05:02 < ashnur> i have never ever seen it not down
05:03 < tjfontaine> it's rare, but I've seen it
05:03 < ashnur> must have been a catartic experience :)
05:03 < tjfontaine> heh, actually I was kinda disappointed in the content
05:03 < ashnur> :D
05:04 < kenperkins> substack: so tl;dr is mocha tests aren't runnable without mocha, and that's bad
05:04 < kenperkins> if I read you right
05:06 < ljharb> kenperkins: what tests are runnable without the test framework they're written in?
05:06 < kenperkins> ljharb: if I'm reading substack  correctly, node-tap is designed that way
05:06 < kenperkins> rather, they're invoked just by node, whereas mocha scripts can't be invoked by node
05:06 < ljharb> hmm
05:07 < ljharb> TAP-compliant tests *output* data that can be read anywhere, but you'd still need to run the test code, wouldn't you?
05:09 < kenperkins> well, that's what I'm trying to figure out
05:09 < kenperkins> :D
05:09 < deoxxa> you'd still need to consume it somehow too
05:09 < deoxxa> unless you like reading TAP output
05:09 < deoxxa> which is cool if you do
05:09  * kenperkins has mostly used mocha, and i've really liked it
05:09 < kenperkins> but as substack said, mocha tests can't be invoked with plain old node
05:22 < substack> ljharb: you just do `node test.js`
05:22 < substack> and your test runs
05:22 < substack> it produces output on stdout
05:22 < substack> and you look at it
05:22 < ljharb> right
05:22 < ljharb> how is that different with mocha?
05:22 < substack> and importantly, tools can look at it
05:22 < substack> so you can plug your tests into ci systems that can parse tap
05:23 < substack> ljharb: mocha dumps globals into your test namespace, so your tests can only be run through the mocha harness
05:23 < ljharb> gotcha - and the mocha harness can't be contained within "test.js"?
05:23 < substack> oh plus if you write tap-style tests you can use a library like http://github.com/substack/tape
05:23 < ljharb> like, in a vm or something?
05:24 < ljharb> i've been using tape :-p still can't figure out how to fix tape for node 0.10 tho
05:24 < substack> so that you can just browserify your tests and run it in the browser
05:24 < substack> yeah I haven't figured it out
05:24 < substack> been busy with ci-related things
05:24 < substack> node, the browser, and everything
05:28 < ljharb> i'll still keep looking as i have the time, maybe i'll figure it out
05:29 < kenperkins> as long as it's not vows, I'm happy :D
05:31 < kenperkins> substack: that said, it should be easy to introduce a way for mocha globals to be included via require
05:32 < substack> kenperkins: don't ever do that
05:32 < kenperkins> lol
05:32 < substack> ok so I am confused
05:32 < substack> globals are considered bad, if occasionally necessary, pretty much everywhere in all of programming
05:33 < kenperkins> i guess what i'm saying is, mocha uses describe, it, among others
05:33 < substack> but when it comes to testing, everybody uses globals everywhere
05:33 < substack> what the fuck
05:33 < substack> everybody is crazy
05:33 < kenperkins> why not just have var describe = require('mocha').describe, or whatever
05:33 < kenperkins> im not saying use globals :S
05:33 < kenperkins> I'm saying make it so mocha can work with plain old node
05:34  * kenperkins hates globals
05:34 < kenperkins> my editor highlights unresolved globals in bright red
05:35 < NuZZ> everyone needs to develop with coffeescript for a bit if they use globals. it makes it difficult ot use em, thus enforcing better practice
05:37 < ChrisPartridge> NuZZ: or just not use globals
05:37 < NuZZ> SO CRAZY
05:37 < NuZZ> put your crazy in check chris
05:42 < ashnur> substack: "everyone is crazy" all right
06:11 < ChrisPartridge> ningu: ping
06:12 < ningu> ChrisPartridge: hey
06:12 < ChrisPartridge> ningu: not sure if you seen it, but i know you were looking at haproxy/nginx etc - https://github.com/observing/balancerbattle
06:12 < ningu> ah yeah I did see that
06:13 < ningu> it was interesting but terribly edited :)
06:14 < ChrisPartridge> tbh, i scrolled straight to conclusions :P
06:15 < ningu> ChrisPartridge: btw any clue on the gzip thing I asked about earlier?
06:16 < ChrisPartridge> ningu: didn't see it, and looks like its out of my buffer - what was the issue?
06:17 < ningu> so I did accept-encoding: gzip on an http request, and I noticed that if I use mikeal's request and receive the whole body in the callback and pass it to zlib.gunzip() it fails
06:17 < ningu> but if I pipe it to zlip.createGunzip() it works
06:17 < ningu> and I am wondering why that is
06:17 < ningu> it seems like some sort of Buffer vs. string issue perhaps
06:21 < dopeypoops> Hello, Ive seen many testing, like mocha, chai, casperjs, can someone explain some quick use cases for which each would be useful? 
06:22 < dopeypoops> I am feeling like casperjs isgood for testing dom and request/responses, and mocha and chai is just controlling the flow of those tests? 
06:29 < ChrisPartridge> ningu: set "encoding: null" in the request options, then it works for me
06:30 < ningu> huh
06:30 < ningu> I totally forgot about the encoding option
06:30 < ningu> that makes sense :)
06:31 < ningu> it must default to utf8 or something
06:31 < ningu> thanks for connecting the dots, I was confused :)
06:31 < DaMorpheuS> hey guys maybe stupid question but if I recieve a put request on my server how do i get to the data (json) send in the request?
06:31 < ChrisPartridge> yeah, the docs kinda confuse you too because it says "encoding - Encoding to be used on setEncoding of response data. If set to null, the body is returned as a Buffer."
06:31 < ChrisPartridge> and you would assume, not setting it, it would be null - but there must be defaults hash behind the scenes
06:32 < ningu> DaMorpheuS: .on('data') ?
06:33 < garthk> Hey, stream fiends! Got one for you: assuming an ordered array of URLs and a stream-eating monster, how can I best keep the stream-eating monster actively fed with the data the URLs point to? I want to start requesting data before the stream-eating monster needs it, but not get so far ahead of it that I run out of RAM.
06:33 < DaMorpheuS> so if my client sends some form data i have to stream that data?!?
06:33 < ChrisPartridge> DaMorpheuS: well... it is a stream
06:34 < ChrisPartridge> DaMorpheuS: are you using the basic http server, or an abstraction like express?
06:34 < DaMorpheuS> express
06:34 < ningu> then it will be in req.body
06:34 < ChrisPartridge> ^
06:34 < ningu> if content-type is set correctly it will deserialize the json
06:34 < ChrisPartridge> if you have bodyParser
06:34 < ChrisPartridge> also
06:34 < ningu> yes, that too
06:34 < DaMorpheuS> if i console.log(JSON.stringify(req.body)) it returns {}
06:35 < ningu> do you have bodyParser in your chain? and content-type to application/json?
06:35 < DaMorpheuS> it says i use the bodyparser of express
06:35 < T-Co> Check out hapi: http://walmartlabs.github.io/hapi/
06:36 < DaMorpheuS> where do i say that my server accepts application/jsons
06:36 < DaMorpheuS> i got no errors on the client side btw so the server just returns 200
06:40 < base698> DaMorpheus: when that happens for me something is usually wrong with the content-type headers the client sends.  
06:41 < base698> or the body data is the wrong type
06:49 < DaMorpheuS> base698: how do I check this?
06:50 < DaMorpheuS> base698: and how do I change the body data type
06:50 < howdynihao> req.headers to see the content type of the request
06:50 < howdynihao> also check out... i think req.text ?
06:51 < howdynihao> it stores the raw boidy somewhere (think req.text)
06:52 < DaMorpheuS> if says : data : {"host":"dev.shareditsm.com:7000","connection":"keep-alive","content-length":"162","cache-control":"no-cache","pragma":"no-cache","accept":"application/json, text/javascript, */*; q=0.01","origin":"http://localhost","user-agent":"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.43 Safari/537.31","content-type":"text/json; charset=UT
06:52 < DaMorpheuS> F-8","referer":"http://localhost/clientTest/index.html","accept-encoding":"gzip,deflate,sdch","accept-language":"nl-NL,nl;q=0.8,en-US;q=0.6,en;q=0.4","accept-charset":"ISO-8859-1,utf-8;q=0.7,*;q=0.3"}
06:56 < booyaa> oo htat actually looks useful compared to req.headers
07:00 < garthk> No ideas re a stream-of-URLs → a stream of concatenated data?
07:05 < sambarino> TechnoCat: when i do a similar thing in my code with the resource option it crashes the iis worker process w3wp.exe lol
07:05 < ChrisPartridge> garthk: use pause?
07:07 < garthk> ChrisPartridge: pause is definitely part of it, but I don't want to open and pause all ~50 ~5MB fetches at once — it's a bit rude to the upstream server. :)
07:11 < booyaa> is that how http chunking works?
07:11 < booyaa> isn't
07:11 < howdynihao> so what are your options? you have to buffer it somewhere, if not memory
07:12 < garthk> howdynihao: well, just because pause() isn't the whole solution doesn't mean we don't use it at all. I just want to keep (say) 5 streams at most paused at a time.
07:13 < howdynihao> why not split this task up into 2, constantly get data without pausing, and consume data, for instance the first task just keeps getting data as they come and dump it to hard disk
07:20 < ChrisPartridge> garthk: do you need to open all 50 streams at once?
07:23 < garthk> ChrisPartridge: no, I'd like to open at most 5 at once.
07:24 < garthk> howdynihao: all good, except the disk part. :)
07:24 < garthk> Ok, I'm trying to write a function to warm up at most N streams in a series. Will advise. :)
07:42 < Rimi> Hi guys, any begginers willing to share some tips? :)
08:05 < LuckyBurger> sure.
08:05 < LuckyBurger> console.log(Array(8).join("wat" - 1) + " Batman!");
08:05 < LuckyBurger> 100% garunteed laugh.
08:07 < zaleb> I lol'd
08:13 < mtsr> LuckyBurger: nice :)
08:13 < SomeoneWeird> LuckyBurger, lol the wat talk is beast
08:26 < latermuse> whats the command to upgrade my node.js using npm?
08:31 < zaleb> latermuse, npm install -g n
08:31 < zaleb> n <<node_version_here>>
08:31 < latermuse> zaleb: thanks
08:36 < ebo> how much do i need cygwin to run node on windows ?
08:37 < sambarino> 0
08:37 < deoxxa> lol
08:58 < NuZZ> lol
09:13 < Perceptes> What is the Node equivalent of Capistrano for deployment? Or do you just use Capistrano?
09:15 < Interactive> Hello.
09:15 < Interactive> Small question.
09:16 < Interactive> Is it possible to start a node script with stdin NOT on pause ?
09:16 < Interactive> I'm calling a node script from couchdb using external (communication via stdin/stdout).
09:17 < Interactive> When calling the couchd external handler (which calls node) I get an error and after refresh I get the output I want (a refresh show an error, second refresh shows output, etc).
09:18 < Interactive> The first non-commented line in the node script is process.stdin.resume();
09:18 < Interactive> Using the couchdb python example (just echo the json input) is working without this problem so I think it's because of the speed of node.
09:31 < garthk> Damnit. Got this URLs-of-data to single-stream-of-parsed-data thing going, but it's throwing out the first datum from each origin stream. :/
09:39 < garthk> Ha! Got it!
10:22 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
10:55 < MI6> joyent/node: Fedor Indutny v0.10 * c665b8e : net: fix socket.bytesWritten Buffers support  Buffer.byteLength() works o - http://git.io/zmEwxQ
11:00 < ezikpic> hi
11:01 < argon> Hi All, is there anyone here who would be able to help me debug a possible TLS regression in 0.10 vs 0.8?
11:02 < ezikpic> my
11:02 < ezikpic> my script works slower than expected http://pastebin.com/raw.php?i=te7xW31j
11:02 < ezikpic> it couldn't finish 20k request in 10 minutes than it most in 10 seconds
11:04 < deoxxa> ezikpic: man
11:05 < deoxxa> ezikpic: 1) where's the structure 2) what language even is that 3) why are you redefining slow versions of built-in methods
11:05 < ezikpic> deoxxa: yes
11:06 < ezikpic> its js node-js
11:06 < deoxxa> function tabvarmi(data) { ... }
11:06 < deoxxa> that means literally nothing to me
11:07 < deoxxa> ezikpic: nearly everyone here speaks english - you'll have way more luck if your code is named with english words
11:07 < ezikpic> lemme rename
11:07 < deoxxa> ezikpic: like, it's just very hard for someone who doesn't speak that language to follow the code
11:12 < ezikpic> http://pastebin.com/raw.php?i=SdM9Nfru
11:27 < NuZZ> woah thats some awkward fs.watch behavior 
11:28 < NuZZ> it procs twice when you change a file, but if you try to read that file before the second watch procs, it retruns no data. wat
11:29 < NuZZ> its like the file gets locked
11:40 < NuZZ> or its because it gets saved in two operations... hmmm.
11:50 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:51 < listochkin> substack: ping :)
11:54 < substack> pong
11:58 < MI6> joyent/node: Ben Noordhuis v0.10 * 0d5595a : Revert "crypto: use better memory BIO implementation"  This change should - http://git.io/hSCWcw
12:06 < MI6> joyent/libuv: Nils Maier master * db344cc : mingw-w64: don't call _set_invalid_parameter_handler  Check the __MSVCRT_ - http://git.io/ZjuFzA
12:07 < MI6> joyent/libuv: Nils Maier v0.10 * 5676924 : mingw-w64: don't call _set_invalid_parameter_handler  Check the __MSVCRT_ - http://git.io/0YQD5A
12:16 < MI6> joyent/libuv: Timothy J Fontaine v0.10 * e1ffc6c : unix: dtrace probes for tick-start and tick-stop (+2 more commits) - http://git.io/mv0GhQ
12:21 < MI6> joyent/libuv: Shannen Saez v0.10 * 603915d : windows: remove double initialization in uv_tty_init (+1 more commits) - http://git.io/R7voFw
12:28 < MI6> joyent/libuv: Ben Noordhuis v0.10 * bad707d : gitigore: ignore auto-generated uv-dtrace.h header (+1 more commits) - http://git.io/1JEPlA
12:28 < MI6> joyent/libuv: Ben Noordhuis master * f78bcfb : Merge remote-tracking branch 'origin/v0.10' - http://git.io/94XTTA
12:37 < MI6> joyent/libuv: Ben Noordhuis v0.10 * 8ea49c1 : build: squelch -Wdollar-in-identifier-extension warnings  The dtrace prob - http://git.io/AEQZ_w
12:37 < substack> listochkin: I actually submitted some patches weeks ago for the tag entry but nothing happened with it
12:38 < substack> v2 changed a lot but there was a lot in that entry that wasn't even true in v1
12:38 < substack> like es5 shim was dropped ages ago, before v1
12:38 < substack> and browserify has supported require('stream') for a really long time
12:39 < substack> false: "Browserify automatically adds EcmaScript 5 API shims for such browsers."
12:40 < substack> false: "Notable omissions are support for Streams, ..."
12:40 < substack> false: "and buffer module uses TypedArrays"
12:49 < mtsr> I'm looking for a good webdriver library for node. I see there's a couple, but wd is the only one that's been updated recently. On the other hand it's at version 0.3.1 or something, while there's possibly more mature ones out there. Anybody have good experiences with a particular one?
12:49 < mtsr> Specifically I'm planning to do webdriver + phantomjs for local testing and at some point do jenkins with different environments
12:50 < aaronj1335> mtsr: i ran spookyjs on jenkins (which is essentially node.js -> phantomjs by way of casperjs). it worked relatively well
12:50 < mtsr> relatively?
12:51 < aaronj1335> the problem is it's a bit complex if all you want to do is check whether unit tests passed
12:51 < aaronj1335> and that's what i was doing
12:51 < mtsr> ah
12:51 < aaronj1335> i could have gotten by w/ a lot less glue code if i just used phantomjs, though it would have been a bit more hacky
12:51 < mtsr> no I'm planning to do full on selenium testing, which is why webdriver
12:52 < aaronj1335> ah i see
12:52 < mtsr> casperjs does look sweet, though
12:52 < substack> aaronj1335: http://ci.testling.com/
12:52 < mtsr> but we need to test IE specifically, so it wouldn't work, I guess
12:52 < trodrigues> mtsr: I think the guys from sauce labs now publish one library for node
12:52 < substack> ug casper and phantom are so unnecessary
12:52 < trodrigues> not quite sure which, but check their website
12:52 < mtsr> soda?
12:52 < trodrigues> soda is the older one I think
12:52 < substack> it's so trivially easy to spin up a local headless chrome
12:52 < trodrigues> can't remember the exact name
12:53 < substack> a real one
12:53 < mtsr> hasn't been updated in 5 months though
12:53 < substack> not a weird pseudo browser that will never be the same
12:53 < trodrigues> substack: really? any instructions on that?
12:53 < aaronj1335> substack: oh?
12:53 < mtsr> could mean two things though, it's stable or abandoned
12:53 < mtsr> especially seeing as there's open issues
12:53 < aaronj1335> phantom didn't seem that difficult...
12:54 < trodrigues> I don't see phantomjs as a pseudo browser. my only problem with it is the fact it takes so long to be updated with the latest webkit versions
12:54 < substack> trodrigues: https://npmjs.org/package/headless
12:54 < substack> or just use xvfb-run
12:55 < substack> also https://npmjs.org/package/browser-launcher
12:55 < sente> once phantomjs is installed it's a lot slicker than xvfb-run imho
12:55 < trodrigues> mmm...do you know if that'd work on OSX? I think there were some issues with xvfb on osx but haven't checked that in a while
12:55 < sente> well, i'm doing this from a server without X
12:55 < sente> so I have to cutycapt
12:55 < substack> the only good use of phantom is to take screenshots
12:55 < sente> in addition, if i use xvfb-run
12:55 < substack> don't use it for tests
12:55 < substack> use real browsers for tests
12:55 < trodrigues> substack: or as a scraper :)
12:56 < substack> yes that's a good use
12:56 < trodrigues> tried scraping stuff with jsdom
12:56 < trodrigues> nightmare
12:56 < substack> but real browsers are completely different from phantom for testing
12:56 < trodrigues> substack: I totally get what you mean and agree with you, but for running tests hundreds of times a day, it's still usually faster to do it in phantom
12:56 < trodrigues> as in, in local development setup
12:57 < mtsr> substack: it's nice for initial local tests and then run the real tests after commit on jenkins :)
12:57 < trodrigues> mtsr: yup, exactly that
12:57 < substack> why do people even use phantom it's so terrible in every way >_<
12:57 < sente> odesk, odesk!
12:57 < mtsr> why?
12:57 < sente> substack: i use phantom because i copy-pasted 5 lines from the internet
12:57 < sente> to install and configure it
12:57 < substack> it's trying to be a node replacement and a browser replacement at the same time
12:57 < trodrigues> substack: what sort of issues have you found with phantom really?
12:57 < sente> and now I ahve scripts to make screenshots
12:57 < sente> and a rest interface to automatically email them
12:58 < sente> it took 2 hours
12:58 < sente> that's why
12:58 < trodrigues> apart from not having features Safari and Chrome have had for more than a year now, it works really well
12:58 < substack> trodrigues: people trying to run their crappy test suites on it who bug me
12:58 < substack> people want to run tests on phantom for no good reason whatsoever
12:59 < substack> just run tests on a real browser it's so much easier and is the actual target environment you're targetting
12:59 < trodrigues> well, probably because it's easy to setup and headless setups of firefox/chrome are not so well known or perceived as more complex?
12:59 < substack> trodrigues: but that's completely false!
12:59 < MI6> joyent/node: Fedor Indutny master * c985095 : crypto: move write_head in bio's Reset() method (+2 more commits) - http://git.io/-Xobng
12:59 < trodrigues> I know, laziness it's not an excuse, but I'd say that explains the popularity
12:59 < trodrigues> substack: that's why I used the word "perceived" :p
12:59 < aaronj1335> laziness is an excuse
12:59 < substack> xvfb-run google-chrome --incognito $URL
12:59 < substack> pow done
12:59 < aaronj1335> i've got a product to ship
13:00 < trodrigues> substack: to be honest, until now I had no idea you could run chrome like that
13:00 < trodrigues> only firefox
13:00 < [Fudge]> yolo
13:00 < [Fudge]> oops.
13:00 < aaronj1335> and as long as i've got something that tells me when something broke, who cares if it's phantom?
13:00 < MI6> joyent/libuv: Ben Kelly master * 14aa615 : unix, win: add netmask to uv_interface_address  Include the netmask when  - http://git.io/S89AKA
13:00 < substack> aaronj1335: because it *won't* tell you when things actually broke
13:00 < substack> the event system is completely different
13:01 < substack> and it has a bunch of idiosyncratic apis that are different from browsers and node
13:01 < aaronj1335> we've got a test suite of about 650 tests or so and only about 5 won't work on phantom
13:01 < substack> it lies in the uncanny valley of ad-hoc custom apis
13:02 < aaronj1335> agreed, the fs apis and all of that are a pain, but it makes up for it in ease of cross-platform config
13:02 < substack> but it doesn't even do that!
13:02 < aaronj1335> honestly, i'd *love* to use ci.testling.org, but we use AMD
13:02 < aaronj1335> s/org/com/
13:02 < substack> aaronj1335: testling has a "scripts" field
13:03 < aaronj1335> but we'll need the require.js stub in the html, right? is that handled in the scripts field?
13:03 < substack> I don't know how require.js works
13:03 < substack> each entry in the "scripts" field turns into a <script> tag
13:04 < MI6> joyent/libuv: Ben Noordhuis master * 8041c52 : unix: style fixups - http://git.io/ElUJ4Q
13:04 < aaronj1335> yeah, assuming your tests require's anything, you need to have require.js loaded in a <script> tag prior
13:04 < aaronj1335> substack: is it possible to work that into testling-ci?
13:05 < substack> aaronj1335: what do you mean "work into"?
13:05 < substack> that's how it already works
13:07 < aaronj1335> i may be misunderstanding, but if i just list an amd module in the 'scripts' filed for a testling config, it won't load the dependencies, correct?
13:07 < aaronj1335> so 'work into' would be either figuring out how to configure that or add the code to make it possible
13:14 < NARMYNNA> http://xgermanamateur.blogspot.com/2013/04/hot-photo-collection.html
13:14 < mtsr> so back to my original question, anyone have good experiences with a particular webdriver library for now, be it 'wd' or 'selenium-node-webdriver' or whatever
13:18 < aslant> I'd like sessions that operate across several of my sites. So I want a stand-alone service that reads and writes session cookies. I have some vague notion that I need to be piping both ClientRequest and ServerResponse objects through my session service. Am I at least thinking about this in the right way?
13:24 < trodrigues> mtsr: well, again, i'd go with wd because it's backed by the sauce labs guys
13:24 < mtsr> k
13:24 < trodrigues> i'd see it having better support and more real world experience built into it
13:40 < raj> does grunt require node?
13:43 < MI6> joyent/node: Ben Noordhuis v0.10 * cd96f0a : src: don't SetInternalField() in ObjectWrap dtor  Call SetPointerInIntern - http://git.io/1TeYKw
13:44 < frankblizzard> raj: yes
13:51 < AAA_awright> I'm divided between the DOM Event style used in Web standards, and the Node.js function(error, result) style callbacks that are called exactly once
13:52 < pachet> node uses events too
13:53 < pachet> what's the practical difference between an event that you only listen for once and a callback that's only called once?
13:53 < pachet> i mean, loose coupling obviously
13:54  * pachet needs more coffee
13:55 < MI6> joyent/libuv: Bert Belder reviewme * eb5c107 : win: refactor uv_cpu_info  Fixes a couple of error handling issues. This  - http://git.io/2e4NFg
13:55 < MI6> joyent/libuv: Brian White v0.10 * 9021dbc : inet: snprintf returns int, not size_t (+1 more commits) - http://git.io/Kf-z4w
13:58 < raj> frankblizzard, can npm be installed within a venv?
13:59 < sambarino> wat
13:59 < frankblizzard> no idea... i installed it on osx via homebrew
13:59 < frankblizzard> it is part of the node installation
14:03 < AAA_awright> pachet: Yeah there's events, but there's also DOM-style .onerror callbacks, for things that are only ever executed once
14:04 < AAA_awright> Even stuff like: var request = database.query("id"); request.onsuccess = function(result){...}; request.onerror = function(err){...};
14:04 < AAA_awright> I'm not sure if that's better or worse, or what
14:05 < AAA_awright> It makes it clear that you're dealing with an asynchronous callback, and it puts to rest the notion of "you must always call the callback instead of throwing an Exception"
14:05 < AAA_awright> bnoordhuis' argument is clear in this case because at argument-validation time there's literally no callback to call with an Error argument
14:05 < AAA_awright> You must throw the error, there's literally no other option
14:07 < AAA_awright> But in this latter case, it's also the case that there's multiple functions. One of them is going to be called, but it doesn't seem prudent for the sake of control flow to say that one or the other is guarenteed to be called, and not both
14:07 < AAA_awright> You don't want to call httpresponse.end() twice, or never at all...
14:07 < AAA_awright> No, you want to call it exactly once, and the single-callback style promotes that
14:07 < MI6> joyent/libuv: Bert Belder reviewme * a0e5e82 : win: refactor uv_cpu_info  Fixes a couple of error handling issues:  * Do - http://git.io/AaGHFw
14:08 < MI6> joyent/libuv: Bert Belder reviewme * a9bce29 : win: refactor uv_cpu_info  Fixes a couple of error handling issues:  * Do - http://git.io/1aeSvQ
14:08 < pachet> AAA_awright: well that's taking it on good faith that the module author is only going to call it once
14:09 < pachet> but i get what you mean
14:09 < AAA_awright> That would be called a bug
14:09 < AAA_awright> We have to assume those don't happen for the sake of argument
14:09 < pachet> it's not a bug, it's a convention
14:09 < MI6> joyent/libuv: Bert Belder v0.10 * a9bce29 : win: refactor uv_cpu_info  Fixes a couple of error handling issues:  * Do - http://git.io/z51CPA
14:09 < pachet> or, lack of adherence to convention
14:09 < AAA_awright> If you call a callback more than once, or never, that's a bug, yes
14:10 < pachet> that's a blanket statement and not true at all
14:10 < pachet> case in point, progress callbacks
14:10 < AAA_awright> Or it's not a callback, but I already said "the argument is a callback" so that's pointless
14:11 < AAA_awright> e.g. http.createServer doesn't accept a callback argument, it accepts a function argument
14:11 < AAA_awright> But I'm talking about callback arguments exclusively, by definition they're called exactly once, so yes, we're talking about a bug
14:12 < Gue______> If I pipe one readable stream to two writeable streams, when does the readable end event get emitted? On end of piping to first stream, second stream, or both (emitted twice)?
14:16 < pachet> AAA_awright: at this point, we're just two semantic trains passing in the rhetorical night
14:17 < AAA_awright> pachet: Well I kind of can't think of anything more important than semantics
14:17 < AAA_awright> I mean, if you've defined your program wrong, then you've got nowhere to go
14:18 < MI6> joyent/libuv: Nicholas Vavilov v0.10 * bc5fa79 : build: add support for Visual Studio 2012  Closes #722 - http://git.io/IhJt_Q
14:19 < pachet> wrong?
14:20 < AAA_awright> I'm talking exclusively about function arguments that are called exactly once, i.e. Node.js callbacks, versus DOM-style events where a Result object is returned and a callback is *then* defined
14:20 < pachet> flying in the face of convention, but who the hell are we to say what's wrong
14:21 < kokotron> anyone here know off-hand if nodejitsu supports 'gm' (GraphicsMagick)?
14:21 < AAA_awright> What's wrong follows from what you're trying to do
14:21 < Kakera> I think the reason the 'error' argument is usually the first in a callback is to make it harder to miss
14:21 < Kakera> you can ignore it, but then you're explicit in doing so
14:21 < pachet> it requires you to account for it in your function signatures
14:21 < pachet> so yeah
14:23 < kokotron> pachet: you talkin to me?
14:23 < pachet> kokotron: no, was answering Kakera
14:23 < kokotron> ah
14:23 < pachet> Gue______: late response, but readable streams should emit a single end event
14:23 < pachet> your writable streams just catch that event
14:23 < AAA_awright> Kakera: I don't think that's much of a difference, you're declaring the name of a variable to represent an argument, versus having that variable name already defined somewhere (or rather, function call)
14:25 < Gue______> pachet: thanks
14:25 < AAA_awright> pachet: My usual example is if you're using plain SHA-1 for hashing anything, you're verifyably and provably doing it wrong; that's a cryptographic primitive and not secure by itself, for checksums, you use a MAC like HMAC, for pesudorandom strings you use a KDF, for passwords you use a PBKDF like PBKDF2
14:26 < pachet> that's not true
14:26 < pachet> there's other uses for hashes that crypto...
14:26 < pachet> s/that/than
14:26 < AAA_awright> Like?
14:27 < AAA_awright> a plain cryptographic hash function doesn't in fact offer very many properties that most programmers would find useful. That's just the semantics of how such a function works.
14:28 < AAA_awright> It may *appear* to be useful, but for most cases that's not the case
14:28 < Kakera> AAA_awright: my point is that you _have_ to declare that variable
14:29 < AAA_awright> Kakera: Right, it might remind the programmer that it exists but I don't find that very persuasive
14:32 < AAA_awright> The argument I do find persuasive is that you have a single entry point for continuing the control flow of the program
14:32 < AAA_awright> If that's substantive I'm not yet syre
14:32 < AAA_awright> *sure
14:33 < pachet> AAA_awright: sorry stepped out
14:33 < pachet> uh, git uses sha1
14:33 < pachet> i'd argue that it's not predominantly for cryptographic security :[
14:33 < AAA_awright> Which it does wrongly
14:34 < pachet> by virtue of flying against conve---wait
14:34 < AAA_awright> SHA-1 was chosen explicitly because it was the most secure hash function at the time
14:38 < niggler> what warning level is standard for node?
14:38 < niggler> *for the C++ code in node
14:42 < medice> uuuh.. +6 ring of intelligence on level 2 as wizard
14:42 < medice> wrong channel, OF COURSE
14:42 < pachet> niggler^
14:43 < niggler> im trying to understand why clang folk decided it made sense to introduce the warning -Wstring-plus-int
14:44 < niggler> " warning: adding 'int' to a string does not append to the string [-Wstring-plus-int]"
14:45 < raj> this is how I install npm? `curl http://npmjs.org/install.sh | sh`
14:45 < niggler> lol raj 
14:46 < pachet> yikes
14:47 < pachet> raj: node comes with npm lately
14:47 < raj> pachet, oh ok, I thought the package manager was separate
14:47 < pachet> s/lately/for over a year
14:49 < ElectricMaxxx> hi i started to bring node-assertthat on client site to test with mocha in Browser: https://github.com/ElectricMaxxx/client-assertthat can somebody have a look and give me some hints what i can do better?
14:49 < ElectricMaxxx> hi i started to bring node-assertthat on client site to test with mocha in Browser: https://github.com/ElectricMaxxx/client-assertthat can somebody have a look and give me some hints what i can do better?
14:52 < niggler> does gcc even have -Wstring-plus-int or -Wno-string-plus-int?
14:52 < niggler> at least its not on my kit :/
14:55 < bnoordhuis> niggler: no, that's a clang-ism
14:55 < niggler> bnoordhuis baby jesus would cry 
14:56 < niggler> clang complaining about   versions->Set(String::NewSymbol("openssl"), String::New(OPENSSL_VERSION_TEXT + i, j - i));
14:56 < bnoordhuis> yeah, i know
14:56 < niggler> but I guess gcc would blow up over -Wno-string-plus-int
14:56 < bnoordhuis> trevnorris sent a PR for that actually
14:56 < bnoordhuis> so it'll be 'fixed' in the near future
15:02 < spion> i finally figured out how to make a great oauth middleware.
15:02 < AAA_awright> Oh?
15:04 < spion> e.g. app.use('/oauth/twitter', oauthMiddleware(options, function back(req, res) { /* called when the user returns with req.oauth filled with auth info */ }))
15:05 < spion> it will install 2 routes, /oauth/twitter/start (where it communicates with the other server then redirects the user) and /oauth/twitter/end (which is the callback url) where it completes the communication then calls the "back" function
15:06 < spion> then you can do whatever in that function (check for the user, create the user, redirect them to wherever, send a html file which contains JS that closes the window... anything)
15:06  * pachet sips coffee and waits for oauth to die
15:07 < spion> if you pass any params to /start? they will also be passed down to /end (and as req.query in the back function)
15:08 < spion> I'll name it oauth-flow
15:09 < AAA_awright> pachet: What do you propose to replace OAuth?
15:09 < spion> because all it does is implement the entire user flow, and you get to decide what will be done with the data when the flow completes
15:10 < raj> ok, installed node via my pacman
15:11 < raj> there's a special prompt or something for node or npm or something, right?
15:11 < raj> to install packages
15:12 < rihnapstor> guys for behaviour driven development do we require nodejs ?
15:17 < pachet> raj : in your terminal, >>npm install {whatever}}
15:17 < raj> ah, thank you pachet 
15:18 < pachet> raj: for your perusal: https://npmjs.org/doc/
15:19 < raj> pachet, can I get your opinion on the best less compiler?
15:22 < karlwestin> hey guys, i have a stream question:
15:23 < karlwestin> i understand that the highWaterMark is when the stream starts applying backpressure to it's source
15:23 < karlwestin> but for some reason, i thought it also limited the chunk-size sent to _write on a writable stream
15:23 < karlwestin> so, q # 1:
15:23 < karlwestin> why doesn't it do that?
15:24 < karlwestin> q # 2: what happened to lowWaterMark ?
15:27 < karlwestin> just thought of them as nice ways to get min/max-sized chunks of data to _write
15:34 < pachet> raj: i dont do exactly what he's set up in this article, but i do use the less package on npm via vim:
15:34 < pachet> http://blog.hugeaim.com/2011/12/15/compiling-less-files-from-vim-every-save-action/
15:35 < pachet> https://npmjs.org/package/less
15:42 < isaacbw_> man, that's a cool idea
15:43 -!- mode/#Node.js [+o isaacbw] by ChanServ
15:44 < ngl> hi all. I've been struggling to overcome an installer issue where 0.6.15 is my node version, but my software installer grabs formidable v1.0.13. I just wanted to ask before all taking all the steps building my installer... etc... should changing the "version" in my formidable package.json from * to 0.6.15 cause the right version to be pulled (1.0.9) ?
15:45 <@isaacbw> raj: spend a minute or two trying to find out on your own
15:45 < ngl> ...my compile and create vm and install takes around 40 minutes, so I just wanted to ask if that should do the trick?
15:46 <@isaacbw> ngl: you're going to have a lot of trouble trying to do 0.6 anything
15:47 < ngl> oh boy.
15:47 <@isaacbw> why do you want 0.6
15:47 <@isaacbw> the current version is 0.10
15:48 <@isaacbw> *stable
15:48 < ngl> well, we switched from php to nodejs for most all our operations and I just am worried that switching to 0.10 (I'd like to) would cause all sorts of other problems.
15:48 < ngl> ...we switched whenever 0.6.15 was the stable.
15:48 <@isaacbw> using 0.6 will cause more problems
15:49 <@isaacbw> if you're looking for an ultrastable platform, node probably isn't a great choice anyway ;P
15:49 < ngl> ok. i'll tell my scrum master! :) Thanks for all your contributions btw, isaac. 
15:49 <@isaacbw> np, I hope you get it working
15:49 <@isaacbw> and if they force you to stay at 0.6, tell them they're stupid bums
15:49 < ngl> ha
15:49 < ngl> ok
15:50 <@isaacbw> even 0.10 gets around three commits a day
15:55 < MI6> joyent/libuv: Bert Belder master * 1d5c61a : windows: simplify netmask detection in uv_interface_addresses - http://git.io/g0aKdw
15:56 < therealkoopa> Does anyone know if there is some fix I can do to be able to install packages with the npm ERR! Error: EMFILE, too many open files. for instance, a simple npm install awsbox is now giving me that issue. ulimit returns unlimited
15:57 < MI6> joyent/libuv: Bert Belder master * db1a8b8 : Merge branch 'v0.10' (+5 more commits) - http://git.io/-YFTew
15:58 <@mbalho> therealkoopa: i got that recently, i had too many global modules installed i think
15:58 <@mbalho> therealkoopa: check /usr/local/lib/node_modules/ and ~/.npm and try removing stuff you dont use
15:59 <@mbalho> isaacs: o/ is that a known issue?
16:04 < therealkoopa> Even a simple npm list is feeding me npm ERR! Error: EMFILE, too many open files  
16:17 < raj> pachet, does it have to be editor-based?
16:17 < raj> to detect the change
16:18 < pachet> i mean, no
16:18 < pachet> you can whip up a script to watch for changes and automatically compile
16:18 < pachet> hell, you could do it in node if you wanted
16:19 < pachet> fs.watch etc
16:19 < raj> pachet, better than incron, right? cuz incron won't recognize new files that are added
16:21 < Borja> Hello, I need a distributed messaging system. Using N as cluster servers. A client on a server publishes a message and this is replicated across all servers. Messages do not need to be stuck in any queue. What software is best for this? Thanks
16:22 < tjfontaine> irc
16:23 < pachet> raj: yeah, it'll detect created/deleted files if you watch a directory
16:23 < pachet> well, at least on posix
16:24 <@isaacs> mbalho: huh?
16:24 < pachet> i cant speak to other platforms and fs.watch has a history of being spottily supported elsewhere
16:24 < pachet> so that's a caveat i guess
16:24 < raj> pachet, i'm on posix
16:24 < pachet> then you should be good
16:27 <@mbalho> isaacs: getting  EMFILE, too many open files  on things like npm install or npm list
16:29 <@isaacs> oh, well, that's oddball.
16:29 <@isaacs> therealkoopa: gist the npm-debug.log file
16:29 <@isaacs> therealkoopa: i need MANY more lines of output to debug this.  1 is nowhere NEAR enough.
16:30 < therealkoopa> isaacs: Totally understandable. I'll get it to you in a bit. While I was googling, I stumbled on this: https://github.com/isaacs/npm/issues/3259, which may be it.
16:35 < MI6> joyent/libuv: mscdex v0.10 * 633d33a : cygwin: remove unused variable - http://git.io/7yRM9w
16:36 < raj> pachet, `fs.watch('/myproject/static/less', function(ev,fname) { /* do I run some `less` command here? */ })`
16:37 < flecha> Hi, I am trying to use Noje.js via PyExecJS, but it says "RuntimeUnavailable". Even if I installed it from source code...
16:37 < raj> (why do I need grunt then, btw)
16:38 < flecha> If I can run "node" in the terminal, it is installed, right?
16:38 < flecha> using a linux from Amazon
16:39 < raj> sounds like it
16:39 < pachet> raj: well to be safe you should probably do fs.exists(path + fname, fn(){-->})
16:40 < flecha> I used: "export EXECJS_RUNTIME=Node" too
16:40 < raj> pachet, why, what happens if I don't check?
16:41 < raj> it just doesn't run if the directory doesn't exist, right?
16:41 < raj> which is what would happen even if I run fs.exists
16:41 <@isaacs> therealkoopa: what does `[sudo] ulimit -a` report on your system? (use sudo if you were installing using sudo)
16:42 < defaultro> hey folks, what are some great uses of node.js?
16:42 < pachet> raj: depending on whether you're calling require('less').render() programmatically or not, i guess it doesnt matter
16:42 < pachet> eg if you just process.exec('less -> ') and swallow the error, you should be ok
16:43 < raj> pachet, I'm not actually using node
16:43 < raj> besides to compile less :)
16:43 < raj> and eventually minify
16:44 < binspace> is there a library to require a hbs file and have it be transformed to a javascript function? i found hbsfy, but it seems to be targeted to browserify.
16:44 < pachet> oh, well you know what you're doing better than me, do what works :]
16:44 < raj> if webapp code is where require() is used
16:44 < raj> pachet, that's total non-sense
16:45 < raj> i feel like helen keller
16:46 < pachet> binspace: Handlebars can do that itself?
16:46 < simb> binspace: I use brunch.io and I do that. it wrapps it as a function we can pass data to
16:47 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:47 < binspace> simb: so all you do is require('./my-template.hbs')?
16:47 < binspace> and that becomes a compiled template function?
16:47 < simb> yep. there is some other magic in there that helps, but that is all i do
16:48 < simb> My backbone view requires the template and assigns it.
16:48 < simb> but I can require arbitrary hbs files and use them as well
16:48 < binspace> I'm getting "SyntaxError: Unexpected token <"
16:48 < binspace> i guess i dont have things set up properly
16:49 < binspace> require("handlebars")?
16:49 < simb> binspace: without brunch this plugin appears to do something similar https://github.com/SlexAxton/require-handlebars-plugin
16:49 < binspace> i see, brunch.io
16:49 < binspace> & require-handlebars-plugin
16:51 <@isaacs> therealkoopa: it looks like this is being caused because readdir uses a fd as well.
16:51 <@isaacs> and graceful-fs doesn't track that
16:55 < therealkoopa> isaacs: https://gist.github.com/anonymous/568df11b8d277e4c2192
16:59 <@isaacbw> aslant: 
16:59 < aslant> isaacbw: 
16:59 <@isaacbw> aslant: well, you normally want to verify session cookies with each request
16:59 <@isaacbw> er, wow okay. I was scrolled very far up
16:59 <@isaacbw> ;P
17:00 < aslant> isaacbw: I was very impresssed
17:04 < howdynihao> when in doubt, http
17:07 < howdynihao> i wonder if there exists a lighter http protocol
17:09 < der_On> hi. how do you guys avoid that hairy nesting of callbacks and error checks for async calls that have to happen one after another?
17:09 < pachet> we've got a live one
17:10 <@isaacbw> what'll it be
17:10 < howdynihao> jedi mind tricks
17:10 < pachet> der_On: there's a heap of libs for control flow
17:10 < der_On> currently I have a scenario where a user uploads a file, which is async, and can go wrong, if uploaded it has to be moved, then a thumbnail must be generated then a record has to be saved in the database. This leads to absurd nesting
17:11 < der_On> pachet: can you point me to a nice one, thats slim and easy to learn?
17:11 < pachet> i'm biased in my opinions here ;]
17:11 < der_On> pachet: because you've wrote one yourself?
17:11 < howdynihao> more more i see the benefit of rails, has anyone tried a full stack framework in nodejs that gets you up and running with a generic web app quickly?
17:12 < der_On> howdynihao: try geddyjs or express
17:12 < der_On> howdynihao: I'm currently using geddy and made some small things with express. I prever geddy, it's more rails-like
17:12 < slicky> Is github down for anyone else? I can't seem to push/pull :X
17:12 <@isaacbw> der_On: you have two approaches. promises and not promises
17:13 < niggler> dumb question: was setRawMode removed?  tty.setRawMode claims that process.stdin.setRawMode is the right call but process.stdin.setRawMode is undefined
17:13 < pachet> der_On: https://github.com/reflex/promix
17:18 < howdynihao> do any of you use an alternative to winston?
17:19 < der_On> pachet: thanks have a look
17:19 < ljharb> whats winston
17:19 < howdynihao> for logging
17:21 < CoverSlide> I use fs for logging
17:21 < kornnflake> is is possible to dynamically reload modules? would like to change some parts of the program with restarting it completly
17:22 < niggler> kornnflake you have to kill the cache
17:22 < CoverSlide> kornnflake: you have to remove them from require.cache, then do a require
17:22 < kornnflake> great thanks, gonna try it ;)
17:24 < Cheery> hi
17:24 < Cheery> anyone writing modules here?
17:25 < Cheery> I wonder is there way to construct wrapped objects without calling their New inside tho code?
17:25 < Cheery> thing is, in node-wayland, I have exactly two ways to construct a proxy.
17:26 < Cheery> one through connection and another through instantiating one by using another as factor
17:26 < Cheery> *factory
17:26 <@isaacbw> what's a wrapped object
17:26 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:26 < niggler> isaacbw its when you put a condom on an object
17:27 < Cheery> https://github.com/kkaefer/node-cpp-modules/blob/master/06_objects/modulename.cpp
17:27 <@isaacbw> kinky
17:27 < Cheery> exactly so :)
17:27 <@isaacbw> oh, you mean for a native interface
17:28 < Cheery> I try clarify this yet.
17:28 < Cheery> I have: class Proxy : public node::ObjectWrap {
17:28 < Leeol> I'm a bit confused with how streams work on this situation. I need to pause a "task" (that is to say, store a function reference for X minutes), and that task needs to transmit a data stream. Is it possible to give that task a Stream, and have it pause the stream immediately, hold onto it for X minutes, and start it again? Or does a stream timeout or something.. 
17:29 < Cheery> then I have:
17:29 < Cheery> struct wl_proxy *wl_proxy_create(struct wl_proxy *factory, const struct wl_interface *interface);
17:29 < Cheery> struct wl_display *wl_display_connect(const char *name);
17:29 < Cheery> struct wl_display *wl_display_connect_to_fd(int fd);
17:29 < Cheery> wl_display is pretty much synonymous to wl_proxy
17:29 < Leeol> My apologies for the vague question. I think in the end, i need to create the stream fresh after X minutes, because so far i have been unable to make pause/resuming the stream after an extended time, work.
17:30 < Cheery> isaacbw: I'd need to write code to provide a way to call those three from the javascript, and they all need to return a correct proxy.
17:32 < MI6> joyent/libuv: piscisaureus created tag node-v0.11.0 - http://git.io/CW7CCg
17:34 < Cheery> I guess I use the v8's External to do this.
17:35 < Cheery> then do some simple function wrappings and go crazy in the js-side
17:35 < Cheery> :)
17:35 < CoverSlide> there's part of me that regrets not learning C++. then after reading some C++ I tend to beat that part to a bloody pulp
17:36 <@isaacbw> I wish I could help, but I haven't looked at the native binding stuff at all
17:37 < Cheery> isaacbw: well maybe you're able to help. Just having some funny idea might be helpful.
17:37 < pachet> he's full of funny ideas
17:37  * pachet gives isaacbw the shiftyeye
17:37 <@isaacbw> heh
17:37 < pachet> i kid, i kid
17:38 < Cheery> CoverSlide: there's part of me that hits the C++ learning part of me with a common bream constantly.
17:39 < pachet> i dont know what a bream is but it sounds very painful
17:39 <@isaacbw> I have a soft spot for oo C
17:39 < niggler> portmanteau of bread and beam
17:39 < pachet> eg 'a man was viciously breamed today while walking with his pomeranian'
17:39 < niggler> ++isaacbw
17:39 < Cheery> it helps the C++ learning part, because the worst concepts slip past him after being stained by that fish.
17:39 < CoverSlide> oo C? how is that accomplished?
17:39 < pachet> niggler: that takes it from scary to tasty
17:40 < niggler> alternatively bread + cream
17:40 < pachet> stop it
17:40 < niggler> i haven't had lunch yet
17:40 < pachet> me neither :[
17:40 <@isaacbw> CoverSlide: there are a few ways, but mostly you'll have macros out the wazoo
17:41 <@isaacbw> I spent a fair bit of time with GObject
17:41 <@isaacbw> those were dark days
17:41 < CoverSlide> `ew GObject
17:42 <@isaacbw> you start to like it though, like some weird stockholm syndrome
17:43 < Cheery> I wonder how wayland makes you feel
17:44 -!- mode/#Node.js [+o sblom] by ChanServ
17:44 < Cheery> the clientside consists of object proxies, that are then wrapped by the autogenerated portion.
17:45 <@isaacbw> I will say I've been ruined for any UI system other than gtk+
17:47 < Cheery> all right. Now I have the proxy object. It gets an ability to listen somewhat later.
17:47 < MI6> joyent/libuv: piscisaureus created tag v0.11.1 - http://git.io/gca0TA
17:48 < MI6> joyent/libuv: Ben Noordhuis master * e3eefae : darwin: look up file path with F_GETPATH  Look up the file path with fcnt - http://git.io/UeWvOQ
17:49 < wdna> hay i'm running 'sudo waf configure' on a mode module installed with -g (global). i'm getting this error message "Could not load the Waf tool 'node_addon'" ... anyone have idea what is this about??
17:49 < MI6> joyent/libuv: Ben Noordhuis master * 145f7b3 : darwin: look up file path with F_GETPATH  Look up the file path with fcnt (+2 more commits) - http://git.io/R6povg
17:50 < deoxxa> wdent: 1) don't use waf, use node-waf 2) don't use node-waf, use node-gyp
17:51 < wdna> ok, i have this. sec.
17:51 <@TooTallNate> deoxxa: <3
17:51 <@TooTallNate> had a nice lol there
17:51 < deoxxa> :>
17:53 < CoverSlide> 8
17:54 < pachet> 7
17:54 < geNAZt> 6
17:55 < dukedave> Hi all, could someone look at this gist for me, I think I'm doing something bad using a 'for in' loop to define multiple mocha 'it's: https://gist.github.com/dukedave/5356831 
17:55 < wdna> deoxxa, now i get  "gyp: binding.gyp not found (cwd: /usr/local/lib/node_modules/bitcoinjs) while trying to load binding.gyp" maybe because i'm running as root but node installed in /usr/local ?
17:56 < niggler> bitcoinjs?
17:56 < wdna> niggler,  yes, on production centos6.4
17:56 <@TooTallNate> wdna: is the module you're trying to install a native module?
17:56 < dukedave> It's an extra test for this: https://npmjs.org/package/tzwhere
17:56 <@isaacbw> wdna: are you bitcoin mining?
17:57 < wdna> isaacbw, i'm trying to setup bitcoinjs on production server.
17:58 < wdna> TooTallNate, what do you mean native? the node.js module?
17:58 <@TooTallNate> wdna: does bitcoinjs contain C++ code?
17:58 <@TooTallNate> or is it just javascript?
17:59 < wdna> TooTallNate, i think it does contain cpp code.
17:59 < wdna> i'm not sure tho... i just saw it was compiling stuff iwth gcc
17:59 <@TooTallNate> wdna: well then it needs a binding.gyp file in the root of the repo in order to build with node-gyp
18:00 < wdna> TooTallNate, yuo're saying it needs to be in the repository of the module im trying to install?
18:00 <@TooTallNate> wdna: as you can see, people have tried to make them notice https://github.com/bitcoinjs/bitcoinjs-server/issues/87
18:01 <@TooTallNate> wdna: ya, i'm saying bitcoinjs is unfortunately outdated and it appears to be unmaintained
18:01 <@TooTallNate> wdna: it hasn't been updated in 8 months
18:01 < wdna> ah... i see... damn.
18:01 < niggler> wdna maybe you should fix it
18:02 < wdna> i can surly try. but i'm no node expert.
18:02 < wdna> can i somehow generate this file?
18:04 <@TooTallNate> wdna: it's usually not too hard… it looks like they link to openssl, and then it's just 2 source files
18:04 <@TooTallNate> wdna: so you could start with the gyp file here https://github.com/TooTallNate/node-gyp/wiki/Linking-to-OpenSSL
18:05 < wdna> TooTallNate, ya, i seems like openssl it's the only dependency, maybe one more.
18:06 < logics> using node 0.10.3 on ubuntu w/ the irc module -- connect to an SSL server is giving me an assertion (...T = node::crypto::Connection...] Assertion `handle->InternaFieldCOunt() > 0' failed.
18:06 < logics> tips on debugging?
18:06 < wdna> TooTallNate, they do have a 'wscript' file. it should be kinda the same, no?
18:07 <@TooTallNate> wdna: it should probably be based of of that, but wscript files are for node-waf which is no longer
18:07 <@TooTallNate> current projects need a binding.gyp file to replace that file
18:08 < wdna> ummm... i see, well i better figure out how to create on, i'll commit to bitcoinjs-server if i'll find a way
18:08 < wdna> one*
18:09 < happyface> is 'forever' still the recommended way to run apps as a daemon? It doesn't seem to install on node 0.10.x
18:12 < deoxxa> happyface: jesus!
18:12 < deoxxa> happyface: http://npm.im/jesus
18:13 < yawnt> deoxxa: deoxxa deoxxa deoxxa 
18:13 < deoxxa> hi there yawnt yawnt yawnt
18:13 < yawnt> http://cdn.memegenerator.net/instances/400x/27543018.jpg
18:13 < deoxxa> lol
18:13 < deoxxa> love it
18:14 < yawnt> deoxxa: i googled "deoxxa" in google images
18:14 < yawnt> right now
18:14 < yawnt> try it
18:14 < yawnt> lol
18:14 < yawnt> there's funny output
18:14 < deoxxa> i can't believe i've never done that
18:14 < yawnt> deoxxa: i wanted a funny image, google images seemed the most appropriate choice
18:14 < deoxxa> lol
18:14 < yawnt> also i'm so laughing at images
18:15 < yawnt> i mean
18:15 < yawnt> https://a248.e.akamai.net/camo.github.com/c55abfc1b028b041b82e1204c44156ce590649aa/687474703a2f2f692e696d6775722e636f6d2f73554647472e6a7067
18:15 < yawnt> :|
18:15 < deoxxa> teal deer
18:15 < deoxxa> get it
18:15 < deoxxa> TL;DR
18:15 < yawnt> oh
18:15 < yawnt> i didn't
18:15 < deoxxa> lol
18:15 < yawnt> now from arabic turned into moderatly humouros
18:15 < yawnt> ha-ha
18:18 < yawnt> deoxxa: what's up with jsmc, 5 prs hanging :<
18:18 < deoxxa> i'm super lazy is what's up
18:18 < yawnt> deoxxa: that's my excuse
18:23 < happyface> deoxxa: jesus christ that's awesome thanks
18:23 < deoxxa> \o/
18:25 <@isaacbw> if anyone wants to do something important in the node-sphere, make a module that does for node what shiro does for java
18:29 < jesusabdullah> wth is shiro
18:29 < jesusabdullah> !ddg shiro
18:30 < jesusabdullah> of COURSE I didn't put _ddgbot in here
18:30 < deoxxa> > Apache Shiro is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management
18:30 < deoxxa> scary
18:30 < jesusabdullah> deoxxa: lol inorite?
18:31 < jesusabdullah> "easy-to-use" "java" Are you sure???
18:32 < deoxxa> it's like those things that say "SuperWebHTTPGeneratorFramework is a simple full-stack development system for writing fully-featured, scalable, maintainable web applications!"
18:32 < jesusabdullah> yes
18:32 < deoxxa> they're always so, so, so far from simple
18:32 < jesusabdullah> THAT SAID I bet there are some good things in this
18:33 < jesusabdullah> isaacbw: there should be lots of separate modules kicking around that do a lot of these things
18:33 < jesusabdullah> isaacbw: noders are a "make your own omelette" kind of group
18:34 <@isaacbw> noders are a "raise your own chickens" kind of group
18:40 < jesusabdullah> isaacbw: Raising backyard hens is very rewarding, no metaphor intended
18:40 < DoniRS> What is a good IDE to use for nodejs development?
18:40 <@isaacbw> DoniRS: emacs
18:41 <@isaacbw> jesusabdullah: I've heard they can be pretty foul
18:41 <@isaacbw> no pun intended
18:41 <@isaacbw> he he
18:41 <@isaacbw> actually, I wonder if the person who told me that was making a pun
18:41 < ljharb> DoniRS: vim
18:42 < ljharb> :-p
18:42 < deoxxa> unix is an IDE, right?
18:42 < DoniRS> ljharb, does vim include auto complete for node?
18:42 <@isaacbw> bash is the only ide you ever need
18:42 < ljharb> autocomplete?
18:42 < ljharb> you mean, google?
18:43 <@isaacbw> for node?
18:43 <@isaacbw> the only autocomplete you'll ever need is a second monitor with google
18:43 < deoxxa> or a brane
18:43 < deoxxa> i use a brane
18:43 <@isaacbw> a brane
18:43 < DoniRS> braine ?
18:43 < ljharb> like a 4 dimensional surface?
18:43 < ljharb> or a brain.
18:43 < deoxxa> brane.
18:43 < DoniRS> lol
18:44 <@isaacbw> using editors without autocomplete is really good for becoming more familiar with the tools you're using anyway
18:44 < deoxxa> like "i braned that prablem"
18:44 <@isaacbw> I don't understand the mindset behind autocomplete. You know what you want to do, so you guess at names until you find something that seems right?
18:44 < DoniRS> Good point isaacbw.
18:44 < deoxxa> or "i cannot brane today, i have the dumb"
18:44 < ljharb> deoxxa: wait, how do you use "membrane" as a verb
18:44 <@Nexxy> isaacbw, it's all about laziness
18:44 < ljharb> "brane" is a real thing. it's a 4 dimensional surface in one of the three prominent multiverse models
18:44 < DoniRS> Not really, it is nice to prevent errors.
18:44 < bradleymeck> waiting on ternjs to be done
18:45 < ljharb> DoniRS: that's what tests are for.
18:45 <@isaacbw> is it a typing thing? That's what clicky keyboards are for!
18:45 < DoniRS> ljhard: errors in terms of misspellling and such.
18:45 <@isaacbw> alt-shift-$
18:46 <@Nexxy> like when you do fs.readFiel instead of fs.readFile
18:46 <@isaacbw> ah
18:46 < bradleymeck> isaacbw: more i just want to be able to hit tab and have it complete the only valid solution, i like to name stuff verbose and it gets a little annoying at times to type it out
18:46 <@Nexxy> when you only have to type fs.readF<tab> it's easier
18:46 < DoniRS> Als increases speed when you have long functions, by not having to type them fully out.
18:47 < bradleymeck> player.widgetFactoryFactory.createWidgetFactory //is a real thing
18:47 <@isaacbw> I wonder if anyone has tried making a machine learning autocomplete
18:47 < howdynihao> i cant tab complete in vim halpz!
18:47 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:48 < ljharb> DoniRS: again, tests, and jshint
18:48 <@isaacbw> that would be really cool
18:48 <@isaacbw> shit
18:48 < ljharb> bradleymeck: that variable names smacks of java, don't do that :-p
18:48 < pachet> isnt google one big machine learning autocomplete
18:48 < euoia> there are some thing  which can help with JS development in Vim - I use syntastic to run my file through JSLine whenever it is saved
18:48 < pachet> or am i misunderstanding :[
18:49 < bradleymeck> ljharb, they are accurate descriptions for when im using a model as a template for something that makes a model for data binding to a widget
18:49 < euoia> there are plugins for autocomplete that look in the node_modules directory and even provide function documentation in the preview window - but I don't use them much
18:49 < jesusabdullah> actually
18:49 < bradleymeck> state separated from defaults/template
18:49 < jesusabdullah> that would be kinda cool, autocomplete that learns
18:49 < jesusabdullah> probs w/ markov chains
18:50 <@isaacbw> js2-mode in emacs is really slick
18:50 < jesusabdullah> there's a markov module already
18:50 < pachet> oh we're talking ide autocomplete
18:50 < pachet> derp
18:50 < jesusabdullah> emacs >_<
18:50 < euoia> there's also this, which will format your file, or a selection from a file according to your preferences: https://github.com/euoia/vim-jsbeautify-simple
18:50 <@isaacbw> it has a built-in js interpreter
18:50 < deoxxa> isaacbw: isn't that how ST2 works? the auto-learning autocomplete?
18:50 < jesusabdullah> emacs is like driving a bulldozer
18:50 < euoia> which is useful if you copy and paste someone else's code
18:50 < jesusabdullah> well
18:50 < jesusabdullah> a bulldozer that you can turn into an airplane
18:50 <@isaacbw> deoxxa: st2?
18:50 < howdynihao> deooxa: its fuzzy autocomplete
18:51 < deoxxa> isaacbw: sublime text 2
18:51 <@isaacbw> ah, I don't know
18:51 < euoia> this is what I am using for autocomplete in vim, although I don't actually use it much https://github.com/myhere/vim-nodejs-complete
18:51 < howdynihao> createStuff createThing createWhatever will all pop up when you type create
18:51 <@isaacbw> it must do some sort of magic to make autocomplete feel okay with javascript though
18:51 < deoxxa> howdynihao: mmm, i've only messed with it a few times, seemed kind of cool but i'm not sure it'd be useful for me
18:51 < ljharb> bradleymeck: widget factory factory? O.o
18:51 <@isaacbw> it would be cool if the machine learning engine could eventually learn to look up docs online :P
18:51 < euoia> if you really want an IDE, webstorm is supposed to be good and has nodejs integration
18:52 < ljharb> it's written in java tho
18:52 < howdynihao> deoxxa: nah the fuzzy autocomplete can get annoying because it'll pick up every word, even comments
18:52 < jesusabdullah> as long as YOU don't have to write java amirite?
18:52 < der_On> patchet: I'm now trying node-seq and wonder what's the best way to do a if/switch that triggers more async functions in a sequence
18:52 < howdynihao> as suggestions
18:52 <@isaacbw> and if it still can't find the solution, it would track down the library author and call his/her cell number
18:52 < jesusabdullah> isaacbw: I use duckduckgo for that
18:52 < jesusabdullah> isaacbw: !bang ftw
18:52 < deoxxa> howdynihao: oh lol
18:53 < deoxxa> isaacbw: need an army of roombas to go harass open source devs
18:54 < pachet> der_On: not sure, i've barely used it
18:54 < pachet> substack would know, obvs
18:54 < der_On> it's actually a common use case
18:54 < der_On> substack: you're theire
18:54 < pachet> oh definitely
18:54 < pachet> its just most of the time people do it by introducing a closure
18:55 < der_On> pachet: yeah. but that's just why I want to use flow control, to get rid of closures
18:56 < der_On> substack: I'm trying to learn node-seq and am now having a if/switch within a callback that can cause another async chain or might not. what's the best way to solve this with seq?
18:56 < ljharb> der_On: that doesn't get rid of closures. closures are awesome anyways.
18:57 < der_On> ljharb: so basically I have to do a sub-chain in a closure?
18:57 < ljharb> der_On: i missed the beginning. what are you trying to do?
18:57 < pachet> der_On: what's the condition you're using to fork the chain?
18:58 < der_On> wait. I'll post some code
18:58 < wdna> TooTallNate, i did it, compiled the needed file, yay =]
18:58 < wdna> ll
18:58 <@TooTallNate> wdna: good job man!
18:58 <@TooTallNate> rock on
18:59 < wdna> I'll check all working and commit.
18:59 <@TooTallNate> wdna: you should send a pull request to that project when you're done
19:01 < Cheery> my thing crashes when I try to convert a const void* to void* anyone encountered this before?
19:01 < ljharb> aahh, i'm having flashbacks to c++ in college
19:02 < pachet> stay with us bro
19:03 <@isaacbw> Cheery: are you const_cast<>ing it?
19:03 < der_On> pachet: https://gist.github.com/der-On/55b89880659a28e3af3f
19:03 < Cheery> isaacbw: nope
19:04 < der_On> pachet: interesting part comes in line 21
19:04 <@isaacbw> Cheery: are you C-style casting it?
19:04 < Cheery> isaacbw: yes
19:04 <@isaacbw> bad boy
19:04 < Cheery> hmm.
19:05 < Bioshox> Can anybody help me out as to why this script returns the error 'problem with request: getaddrinfo ENOTFOUND' - https://gist.github.com/Bioshox/5357456
19:05 < jackcviers> npm registry down?
19:05 <@isaacbw> Cheery: what's the error though
19:05 < drudge> Bioshox: host is wrong
19:06 <@isaacbw> and why are you trying to convert it
19:06 < ljharb> httpss - it's SUPER secure
19:06 < Cheery> isaacbw: segmentation fault, it seems to appear when I try to console.log an External
19:06 < Bitwich> join #bitcoin - we are aiming for 2,000 users... currently at 1,975
19:06 <@isaacbw> Cheery: so why are you trying to convert it? That could get nasty fast
19:06 < Bioshox> Changed that the https, still getting the same issue
19:07 < drudge> Bioshox: host: 'stream.twitter.com', path: '/1.1/statuses/filter.json?track=bieber'
19:07 < Cheery> isaacbw: well I could wrap it into an object if that's what you mean.
19:07 < Cheery> isaacbw: in fact, I think I'll do that.
19:07 < Cheery> I want to construct interfaces later as well.
19:07 <@isaacbw> no, that's not what I mean
19:07 < drudge> Bioshox: host != url, you might want to check out the request library
19:07 < Cheery> isaacbw: or do you mean why I'm trying to cast away a const?
19:07 <@isaacbw> I mean needing to convert a const void* to a void* in c++ is probably a sign of something crazy going on
19:07 < drudge> Bioshox: https://npmjs.org/package/request
19:07 <@isaacbw> right
19:08 < Bioshox> drudge/ thanks that worked
19:08 < Cheery> isaacbw: I'm trying to drag it onto javascript-side with External::Wrap
19:08 < Cheery> isaacbw: and that function wants void*
19:08 < pachet> der_On: yeah, i havent used it enough to know if there's a better way
19:08 <@isaacbw> Cheery: what's the data that the void* is pointing to?
19:08 < Bioshox> I now get unauthorised :( damn oauth
19:09 < der_On> could anyone maybe help me with this: https://gist.github.com/der-On/55b89880659a28e3af3f
19:09 < Cheery> isaacbw: the wl_interface objects  I have.
19:09 < drudge> Bioshox: request has oauth support built-in
19:09 < pachet> der_On: did you try injecting it via just calling .seq() on a ref pointing to the chain within that closure?
19:09 < Cheery> isaacbw: anyway nevermind about this. I'll wrap the object so it'll go neatly like that.
19:09 <@isaacbw> well, alright
19:09 < pachet> der_On: that's what i tend to do with my lib, not sure if it'll break the universe
19:09 < der_On> pachet: no. I first have to understand what you're trying to say
19:09 < Bioshox> drudge i was hoping to keep it vanilla
19:09 <@isaacbw> seems like you should try to figure out what was going on if only to improve your c++ skills though
19:10 < pachet> der_On: bleh, 1sce
19:10 < pachet> s/sce/sec
19:11 < drudge> Bioshox: you can see how mikeal signs oauth https://github.com/mikeal/oauth-sign
19:12 < pachet> der_On: https://gist.github.com/pachet/5357525
19:12 < chapel> hows it going drudge?
19:12 < drudge> chapel: good man, how are you doing?
19:13 < wdna> niggler, https://github.com/alkavan/bitcoinjs-server/blob/master/binding.gyp
19:13 < chapel> not too bad, in the full swing of looking for a new job
19:13 < kam187-rMBP> anyone messed around with tls slab buffer in node?
19:13 < niggler> wdna does that work?
19:13  * niggler golfclaps
19:13 < kam187-rMBP> lmao golfclaps
19:13 < der_On> pachet: wow. so easy, might work
19:14 < kam187-rMBP> havnt heard that in ages
19:14 < wdna> seems to work, i'm configuring the server. the compile worked, and server is not telling me it's missing anymore.
19:14  * niggler pets kam187-rMBP 
19:14 < niggler> wdna the next step is to convince isaacs that your version should be the primary one in npm
19:15 <@isaacbw> hey niggler, you don't happen to have any coworking space recommendations with dedicated desks in the city, do you?
19:15 < niggler> isaacbw Ive heard good things about hive at 55
19:15 < pachet> der_On: yeah i have no idea whether it will, so beware
19:16 < niggler> i use regus though because I like having a proper room
19:16 < wdna> niggler, who is this isaacs?
19:17 < niggler> https://npmjs.org/doc/disputes.html
19:17 < niggler> wdna ^
19:18 <@isaacbw> isaacs is the author of npm and is one of a few people with admin control over packages
19:18 < wdna> niggler, so i should e-mail i@izs.me about this issue?
19:18 < pachet> :[
19:18 < niggler> wdna email the current owner and cc i@izs.me
19:19 < niggler> $ npm owner ls bitcoinjs # reports bitcoinjs <bitcoinjs@justmoon.net> and justmoon <justmoon@members.fsf.org>
19:19 < wdna> okay, i'll way few days just to see if my pull request is not merged.
19:19 < wdna> wait*
19:19 < niggler> wdna the issue about gyp has been there for 7 months
19:20 < wdna> yes, that's true also, well, i'll send an e-mail.
19:20 <@isaacbw> niggler: doing all my work on a desktop makes finding space difficult. I just can't give up my 23" dual monitor setup :P
19:20 < niggler> isaacbw if you plan on keeping stuff there, get a room
19:21 < niggler> you don't want to leave an iMac or something like that hanging around on a table
19:21 <@isaacbw> hmm, that's probably wise
19:23 <@isaacbw> I would really love to find a few other people looking for space and rent out a loft to share
19:24 < howdynihao> make shift rooms with curtains
19:25 < pachet> rule #1
19:25 < pachet> share space with people you wouldnt want to hang out with in real life
19:25 < niggler> the point of the room isn't to hide your porn addiction howdynihao; its to make sure no one can just take your stuff
19:25 < pachet> otherwise 3 months pass and all you've done is play ni no kuni
19:26 < howdynihao> well how else would you make rooms in a loft?
19:26 < pachet> sweat and hard work
19:27 < howdynihao> most landlords won't just let you randomly start renting your loft out anyway
19:28 < pachet> thats why you make that mobile app they secretly want made as compensation
19:28 < pachet> 'its like facebook for realtors'
19:31 < wdna> niggler, i e-mailed the two authors with CC to i@izs.me .
19:31 < niggler> good job wdna 
19:32 < wdna> ok, time to some something now =] i almost ruined my production server in the process by messing with default python that waf required. hehe..
19:32 < wdna> smoke*
19:34 < wdna> removing python with rpm --nodups -e python is a bad idea, since on CentOS yum is using it.
19:36 < AphelionZ> hey everybody, is there an npm module that acts as a persistence interface to multiple types of database backends? something that has a get/set/has/delete API perhaps?
19:36 < howdynihao> AphelionZ: thats an orm, theres a bunch of those
19:38 < mmalecki> AphelionZ: resourceful, if you like nosql
19:39 < AphelionZ> thanks dudes :)
19:40 < nodeflyqs> anyone have nodefly experience?
19:40 < simb> wdna: I went through that this weeknd. I had old python installed on centos 5. but you can put 2.6 along side it and just change the first line of configure.  Assuming I am reading your issue right.
19:41 < Bioshox> Can anybody point me in the right direction why this returns unauthorised from Twitter: https://gist.github.com/Bioshox/5357755
19:42 < ljharb> Bioshox: is your system clock more than 5 minutes off?
19:43 < Bioshox> Wed Apr 10 19:38:59 UTC 2013 
19:43 < ljharb> and request is doing the oauth signing for you?
19:43 < ljharb> like the oauth_nonce and whatnot
19:44 < wdna> simb, that's okay, i solved the issue without python.
19:44 < wdna> and the server is actually working btw.
19:44 < Bioshox> I'm not sure
19:44 < Bioshox> The GIST I sent you is my total code
19:44 < Bioshox> Am I missing something?
19:44 < ljharb> that's the important part. i don't think request does it automatically
19:44 < ljharb> oauth signing is complicated
19:45 < Bioshox> Ah
19:45 < Bioshox> Is passport recomended?
19:45 < ljharb> i use passport and passport-twitter to do "sign in with twitter"
19:45 < Bioshox> http://passportjs.org/
19:45 < ljharb> but if you're making API calls that's not what passport is for
19:45 < Bioshox> Yeah
19:45 < kalturian> hey people
19:45 < Bioshox> I'll be using Sign in with Twitter to do searches 
19:45 < kalturian> anyone knows how to get class name and function name in node.js?
19:46 < ljharb> so you can use passport-twitter to do the sign in. but you'll still have to do your own oauth (or use a lib) to make other api calls
19:46 < ljharb> kalturian: functions don't have names until ES6, and javascript doesn't have classes
19:47 <@isaacbw> what does having function names accomplish
19:47 < Bioshox> would passport be ideal for singing in with twitter then doing searches on the streaming api
19:48 <@isaacbw> kalturian: you can use this.constructor if the object was built using a constructor function
19:48 <@isaacbw> i.e. a class
19:48 <@isaacbw> wait I'm retarded
19:48 < ljharb> Bioshox: for signing in, yes. but you can not do searches with it.
19:48 <@isaacbw> that wouldn't help you at all
19:48 < ljharb> isaacbw: it's for backtraces in debugging
19:48 < ljharb> kalturian: that's a good question tho. what are you trying to achieve?
19:49 < ljharb> doing magic meta stuff with class names === ick
19:49 < Bioshox> so what use would using this to do the sign in give me?
19:49 <@isaacbw> you could do something like having classname in your prototype
19:49 < kalturian> We're building a Node.JS client library to Kaltura API
19:49 < kalturian> https://github.com/kaltura/KalturaServerCore/pull/2
19:49 < ljharb> Bioshox: the sign in part would give you the secret keys required so you could USE an oauth library to talk to twitter later
19:49 < Bioshox> Ah
19:50 < ljharb> kalturian: generated code? ugh
19:50 < Bioshox> So, what could could I use to make OAuth easier
19:50 < kalturian> and the way the clients communicate the object name and function to call, is by getting the constructor name and function used
19:50 < ljharb> rpc?
19:50 < ljharb> there's your problem :-p
19:50 < kalturian> works very efficiently and very well in all other languages.
19:50 < ljharb> Bioshox: i'm sure you can google it yourself :-p
19:50 < ljharb> i disagree
19:50 < kalturian> http://www.kaltura.com/api_v3/testme/client-libs.php
19:50 < ljharb> it works well if all you understand is xml and soap :-p
19:51 < kalturian> umm..?
19:51 < kalturian> the js client is using json
19:51 < kalturian> the API communicates with whatever you need.
19:51 < kalturian> the Kaltura API is REST based, no SOAP
19:51 < ljharb> nvm, i don't need to get into an rpc vs rest debate today
19:51 < ljharb> then what's the constructor name for?
19:52 < kalturian> for the name of the object (service) you wish to call, the function (action) you wish to perform on that service.
19:52 < deoxxa> ljharb: RPC doesn't have to be ugly! http://npm.im/pillion
19:53 < ljharb> kalturian: so, function postSomething(data) { return callRESTAPI('something', data); } ?
19:53 < ljharb> kalturian: if you
19:53 < ljharb> if you're generating the function name, just hardcode it as a string inside the function
19:53 < ljharb> there's no award for being the most meta
19:53 < kalturian> hardcoding sucks
19:54 < kalturian> constructor though seems to work well
19:54 < ljharb> implicit magic sucks. hardcoding is explicit and eminently maintainable.
19:54 < deoxxa> what exactly is kaltura
19:54 < kalturian> Open Source Media Management Platform
19:54 < kalturian> http://corp.kaltura.com/Company/About-Kaltura
19:56 < kalturian> ljharb - getting constructor name is not implicit, it's the same as hardcoding the name, just use less variable per function.
19:57 < deoxxa> kalturian: `var fn = function something() { return 0; }'
19:57 < deoxxa> kalturian: what would you consider to be the "name" there?
19:57 < kalturian> it's not relevant in my case.
19:58 < deoxxa> ...
19:58 < deoxxa> let me find your original question
19:58 < deoxxa> > anyone knows how to get class name and function name in node.js?
19:58 < deoxxa> > function name
19:58 < deoxxa> so... is it relevant? or no?
19:58 < kalturian> yes, but in my code there's nothing like var fn = function something() {}
19:59 < ljharb> also, if you change the constructor name, you'd have to change a bunch of places, cause that's coupled with the detection code
19:59 < kalturian> the name of the function will always be the same as the var you assigned it to
19:59 < ljharb> whereas if you hardcode it, they're decoupled.
19:59 < deoxxa> kalturian: well you're not talking about javascript or node.js anymore then
19:59 < deoxxa> kalturian: you're talking about some kind of restricted subset of javascript where the variable a function is assigned to is always the same as the name you give it
19:59 < kalturian> A - we never change constructor names. that will be breaking backward compat.
19:59 < deoxxa> kalturian: so now that we know that, we can move forward
20:00 < deoxxa> kalturian: but i ask - what *exactly* are you looking to do? do you want to get the name of the currently-being-called function?
20:01 < kalturian> deoxxa - I'm talking about a specific usecase where it's a module that you include, you're not supposed to change the internals, just use it.
20:01 < deoxxa> kalturian: if you're generating the code, instead of something like `var x = function x() { do_something(current_function_name()); }', do something like `var x = function x() { do_something("x"); }'
20:01 < kalturian> already solved the problem though
20:01 < ljharb> that's what i suggested
20:01 < kalturian> as I said, we use constructor
20:01 < kalturian> yea
20:01 < dypsilon> Hi, how do you cal a function both synchronous and asynchronous? I've seen grunt do it.
20:02 < ljharb> idaelly you don't. sync sucks.
20:02 < ljharb> (ideally
20:02 < ljharb> *
20:02 < ljharb> gah
20:02 < howdynihao> ljharb: what do you mean functions can't have names?
20:02 < kalturian> It's async in our case. but you could probably modify node to do things sync... don't know why you'd want to
20:03 < ljharb> howdynihao: i mean, there's no "name" property in the JS spec. it's proposed for ES6 tho.
20:03 < ljharb> some engines might be wonky and have it, but you shouldn't ever rely on things not in spec.
20:03 < dypsilon> I'm building kind of a framework and want to allow the callbacks to be called both, async or sync depending on what suits them better. Grunt does it by providing an optional "done" callback. Ill' probably look how they do it in the source...
20:04 < perlitch> anyone know of a good command line tool for encoding images to base64 string?
20:04 < ljharb> dypsilon: why? async always suits them better whether they know it or not.
20:06 < dypsilon> ljharb, hmm, probably you are right. I have to keep it simple and just allow async.
20:06 < ljharb> that's best imo.
20:06 < ljharb> if you want to get real fancy, accept an optional callback *and* return a promise.
20:06 < zackiv31> jade question... is there a way to get it not to choke if i haven't declared a variable... so i can do `if error` even if error isn't defined?
20:06 < ljharb> then you're compatible with node convention and also you're using promises
20:07 < ljharb> zackiv31: typeof error !== 'undefined'
20:07 < ljharb> that's the only safe way
20:08 < howdynihao> dypsilon: if it's truly optional it's very easy to implement
20:08 < dypsilon> ljharb, there is this one case though, suppose you want to pass a core function into the framework, that is already implemented, but it is sync only. E.g. String.Trim.
20:09 < dypsilon> If you are only allowed to pass in async function, you have to wrap it first.
20:09 < ljharb> wait, pass a function into the framework?
20:09 < ljharb> i'm confused
20:09 < howdynihao> var result = callFn(done); if (result) // if its not undefined then callFn decided to be sync
20:09 < dypsilon> ljharb, yeah, think validation framework, for example.
20:09 < ljharb> if i'm passing in a callback, then it's up to me to ensure the callback does what i want. if i pass a sync function, it's not the framework's responsibility to handle that. primarily cause it's impossible to determine.
20:09 < ljharb> async functions could return a value if they wanted
20:10 < dypsilon> howdynihao, thank you
20:11 < howdynihao> dypsilon: the other method is if the arguments are fixed, you check callFn's argument length
20:12 < howdynihao> callFn.length if it's 1, the user decided to take the 'done' as an argument, so it implys the user wants this to be async, if it's 0, the user decided it's sync
20:13 < dypsilon> howdynihao, ah it's also a great solution, thank you
20:13 < ljharb> that's not reliable
20:13 < ljharb> there's no reason i couldn't use the arguments object in my callback
20:13 < ljharb> ie, and specify no args in the signature.
20:13 < ljharb> you simply can never tell if a function is async or sync
20:14 < dypsilon> is there maybe way to find out if my "done" function was called
20:14 < ljharb> you could have it set a flag or something
20:14 < ljharb> but again, you can't know what they want to do with it
20:14 < ljharb> they might choose not to call "done" but it would still be async
20:15 < ljharb> you're not responsible for the user doing something foolish.
20:15 < howdynihao> ljharb: if they don't want it to be async, they don't specify 'done' as an argument thus the function's argument length is 0
20:15 < ljharb> howdynihao: that's not part of node's convention.
20:15 < ljharb> howdynihao: i absolutely expect to be able to pass function () { arguments[0]; } as a callback and have it work.
20:16 < howdynihao> ljharb: well it's how everyone else does it
20:16 < ljharb> checking the length? no it's not
20:16 < ljharb> perhaps everyone else puts "done" in the function sig, but that's not a requirement i've ever seen.
20:16 < ljharb> libs just take a function, and call it.
20:18 < dypsilon> ljharb, just curious, if you call a function, how do you ensure that your callback is passed in as the last argument, even though there may be optional arguments between err and cb?
20:18 < howdynihao> i meant, when you want it be optional thats usually the way to go
20:18 -!- mode/#Node.js [+o TooTallNate] by ChanServ
20:18 < howdynihao> whether it should be optional, i guess thats debatable 
20:18 < dypsilon> i'm using this right now https://gist.github.com/dypsilon/5350284
20:18 < dypsilon> also im looking for a better solution
20:19 < ljharb> dypsilon: personally i'd never do that. i'd take an options hash for all optional arguments
20:19 < dypsilon> because this one relies on function.length
20:19 < ljharb> dypsilon: and then i'd do "if options is a function, callback = options, and options = {}"
20:19 < dypsilon> ljharb, I see, thanks
20:20 < ljharb> np
20:22 < howdynihao> there is a 3rd option dypsilon
20:22 < howdynihao> haha
20:22 < dypsilon> :)
20:22 < howdynihao> but that one is a bit magical
20:22 < mscdex> dypsilon: it's best if you can consolidate options into an object
20:22 < mscdex> it makes the type checking easier
20:23 < howdynihao> dypsilon: 3rd option is basically you do some string matching 
20:23 < dypsilon> mscdex, that's true, but aiming for excepting function which the user does not have controll over e.g. String.trim
20:23 < howdynihao> >> "(function a(x, y, c, done) {}).toString()"
20:23 < purr> howdynihao: (string) '(function a(x, y, c, done) {}).toString()'
20:23 < Urbanizator> I still wonder, for what are you gonna use that?
20:23 < howdynihao> doesn't work in browsers obviously because names get mangled
20:23 < howdynihao> could *
20:24 < dypsilon> howdynihao, oh wow, that's really magical
20:24 < dypsilon> Urbanizator, think validation framework
20:24 < howdynihao> oops no quotes for that, but yea you get the point
20:25 < ljharb> "validation framework" isn't an excuse to do awful things :-p
20:26  * Mrblue -- Meet the GooBot #goo --
20:26 < howdynihao> there's nothing wrong with magic
20:26 < howdynihao> afterall magic is friendship
20:26 < howdynihao> mlp!
20:26 < dypsilon> ljharb, how is aweful? I want to all to pass either a custom function which *could* be async, but also allow to pass in some javascript function.
20:26 < dypsilon> *how is it
20:27 < ashnur> morning
20:27 < ljharb> dypsilon: whether a callback is async or not is a) impossible to determine, and b) none of your business
20:27 < ljharb> dypsilon: if it's a function, you call it back. that's it.
20:28 < howdynihao> ljharb: i think it has its use case, but its very rare
20:29 < dypsilon> ljharb, call it back how? If I do async only, I'm not allowing to pass in ready functions, if I do it sync only, I'm not allowing to use any async functions inside.
20:29 < dypsilon> please correct me if I'm wrong
20:29 < ljharb> dypsilon: can you show me some code? i think you are.
20:29 < binspace> is there a way to call require using the working directory of the caller?
20:29 < ljharb> and you shouldn't do anything sync only :-p
20:31 < StephenS> I can use occasionally socket.io on my web right? It does not need to be completely done in js right?
20:32 < dypsilon> I think I'll go with checking the return value, if it's not undefined, I'll use it and not wait for the callback.
20:32 < dypsilon> ljharb, tell that to JavaScript spec :)
20:33 < ljharb> this is node, i don't have to :-p
20:33 < ljharb> dypsilon: sync functions can return undefined.
20:33 < ljharb> you can keep trying to fight javascript itself, but there's no way to determine if a function is sync or not.
20:39 < Urbanizator> stephens whut?
20:39 < StephenS> wut
20:39 <@isaacbw> wut wut
20:39 < enr> say I have an app in which I can either render my markup on the server or on the client through the same template engine. if I render on the server I want the client to get the markup (duh) but I also want to pass it the data from which the markup was generated so that it's available for the client scripts. what's the best way to go about that?
20:39 < StephenS> I don't know what I'm saying
20:39 < StephenS> enr yes
20:39 < StephenS> isaacbw is isaac newtn
20:40 < ljharb> enr: either inline json, or let the client make an ajax call
20:40 <@isaacbw> I had a dream where I had butterscotch and I woke up to not having butterscotch
20:40 <@isaacbw> I'm sad :(
20:41 < dypsilon> enr, depends. I think the cleanest way is to have an api and request the data.
20:41 < StephenS> I had a dream where I knew socket.io but then I woke up and saw I know node.js wut now
20:43 < enr> dypsilon: yeah that's the way I would have gone about it if I had been involved from the start of the project but unfortunately that's not what I'm looking at.
20:43 < ljharb> never too late to pay off technical debt
20:43 < enr> that
20:43 < enr> * that's a question of office politics :)
20:44 < dypsilon> enr, well, it depends at what you are looking right now :) we can't know that
20:44 <@isaacbw> technical debt isn't practical debt
20:44 < ljharb> any job that doesn't let you pay off technical debt, quit :-) the job market's great.
20:44 < enr> dypsilon: agreed. I'm currently adding the json in the initial page load and then updating that data cache when I do partial updates.
20:45 <@isaacbw> I want everyone to know that I'm looking for freelance work
20:45 < enr> ljharb: yeah it's not a question of that, it's more that there toes that might be stepped on :)
20:45 <@isaacbw> and I don't know the market, so my rates are lowballed to all hell
20:45 < enr> there are*
20:45 < ljharb> ah
20:46 < ljharb> isaacbw: if you want full time work, i've got a hundred recruiters i could deflect to you
20:46 <@isaacbw> ljharb: do it
20:46 <@isaacbw> I don't understand all the recruiter hate
20:46 < enr> and it's not a question of not being able to get it to work it's more that I would love to find a solution that is more elegant than chucking it in the markup.
20:46 <@isaacbw> "PLEASE LET ME GIVE YOU MONEY" "NO GO AWAY"
20:47 < sent_hil> does anyone know if node-amqp package have a bug when reconnecting after internet connection drops?
20:47 < sent_hil> I see "Error: ACCESS_REFUSED - queue name 'amq.gen-m3zFK4RWPejnhKhyTHgiYQ' contains reserved prefix 'amq.*'"
20:48 < dypsilon> enr, seems ok to me. probably the best you could do in this situation.
20:48 < enr> dypsilon: alright. good to hear your thoughts. thanks. you too ljharb.
20:49 < dypsilon> enr, also depends alot on your serverside code. If you cant create a real API, maybe you could expose your controllers output through http.
20:50 < dypsilon> so you could call something like /<controllername>.json and get everything the controller would pass to view as a json
20:51 < dypsilon> ofc, it works only if you have clean mvc-like separation of concerns with clearly defined and routing and so on
20:51 < enr> dypsilon: there is a proper api serving the data but the client code talks to its backend which talks to the api and then serves up the markup if it is not xmlhttp, and json if it is. 
20:53 < enr> dypsilon: I think the ambition was that the app wouldn't be dependent on js on the client for markup to be rendered, but support partial updates after the inital load and that sharing templates between the client and the server would enable this
20:53 < enr> dypsilon: the problem is that I want to center the client side js logic around the data that comes from the api, not the DOM after the fact.
20:57 < Cheery> is there some way to change the representation of object wrappers?
20:57 < Cheery> the {} looks almost like an error
20:59 < nodeflynoob324> anyone have experience with nodefly or other monitoring solutions?
21:00 < Sam__> Hi
21:01 < thomblake> Cheery: Yes, just use your favorite pre-processor like cpp or template toolkit to compile your code.
21:02 < thomblake> Also in that case, don't make anyone read your code ever.
21:03 < Cheery> thomblake: I don't mean that representation, but the one what happens when you type the thing into REPL
21:06 < ljharb> Cheery: and empty object literal isn't an error. an Error looks different.
21:07 < pachet> Cheery: this is just for the repl?
21:07 < pachet> if so you can just override util.format = myFunction
21:08 < Cheery> oh okay
21:25 < DaMorpheuS> .
21:27 < DaMorpheuS> question. I have an node backend and a ember front end if I send some form information through ember data node will send an json that looks like {errors: {field: 'message'}}
21:27 < DaMorpheuS> now I want to connect that to my client I know this isn't the ember thread but that thread is abandoned
21:27 < DaMorpheuS> :)
21:27 < DaMorpheuS> some one has some input for me?
21:29 < schofld> hi :)
21:30 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:31 < schofld> how have you handled user account management / authorization 
21:31 < schofld> in traditional frameworks such as django, rails etc it is included along with validation etc 
21:31 < DaMorpheuS> it's about validation
21:32 < DaMorpheuS> but i have to get ember-data to catch that error and do something with it!
21:37 < Guest99295> Hey people. quick question about socket.io if anyone is familiar. I want to avoid including the following when my node server is offline. <script type="text/javascript" src="http://localhost:8080/socket.io/socket.io.js"></script>. Unfortunately that script is included via a PHP-Yii framework function that registers a script when a specific widget is called. Any ideas?
21:38 < asterick> Guest99295: I assume you're trying to avoid a 500 error, or something?
21:38 < Guest99295> Exactly.
21:38 < asterick> You can always mirror socket.io.js as static content on your PHP served page
21:40 < Guest99295> Wow. Didn't even think about that as I've seen some people have issues.. but I would rather fight a problem with an include than worry about trying to check if the port is open.
21:40 < Guest99295> Thanks!
21:40 < asterick> alternatively, curl it on your PHP page with an echo w/fallback
21:41 < asterick> IIRC, socket.io.js isn't dynamic
21:41 < kenperkins> does require('util') === require('utile')
21:42 < Guest99295> Doesn't seem to be. I'll give the static include a shot and let you know what happens.
21:42 < asterick> kenperkins:   require(a) !=== require(b)  in any case where a !== b
21:42 < asterick> even if they are duplicates of the same module
21:42 < kenperkins> I guess that was worded incorrectly
21:42 < asterick> (They would not resolve to the same module in the cache, causing a new reload)
21:43 < kenperkins> it seems require('utile') works
21:43 < kenperkins> how can that be? :D
21:43 < asterick> https://github.com/flatiron/utile ?
21:44 < asterick> check your node_modules
21:44 < kenperkins> bingo, that's likely it :D
21:44 < asterick> (because it's not a default package)
21:44 < kenperkins> I was like WAT
21:44 < kenperkins> (awful name. btw_
21:45 <@isaacbw> how did you manage to have it installed
21:46 < Djdclarke> Hey guys. I'm hoping someone could help me out a little here - node: ../deps/uv/src/unix/core.c:167: uv__finish_close: Assertion `!(((handle)->flags & UV__HANDLE_ACTIVE) != 0)' failed. Is that likely to be a node related issue or a module related? Trying to work out where to start (my app randomly crashes with that after a random amount of time)
21:47 < Guest99295> @asterick static include worked like a charm. Thank you sir!
21:47 < asterick> NP
21:48 < asterick> Now, someone write RTPPeerConnection for node.js >_<
21:48 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:48 < asterick> *RTC
21:49 < asterick> I wants datagram communications between server<->client. ;_;
21:50 < Guest99295> I haven't spent much time with that library- but socket.io can communicate server <--> client.
21:50 < asterick> Guest99295: WebRTC is UDP based, which means it's faster, but not fault tolerant.
21:50 < asterick> it's good for things like player positions or frequently changing data that you don't care is temporarly stale
21:50 < MI6> joyent/libuv: Ben Noordhuis v0.10 * 0ff06b4 : build: -Wno-dollar-in-identifier-extension is clang only  Add a compiler  - http://git.io/CElAow
21:50 < asterick> (IE: Realtime gaming)
21:51 < asterick> websockets are great for fault tolerant, garunteed delivery
21:51 < asterick> That stuff adds latency though
21:53 < Guest99295> Right- UDP definitely doesn't fit the bill at the moment. I would love to see some RTC js/HTML5 based multiplayer games. Goodbye flash!
21:53 < asterick> Guest99295: the other nice thing is WebRTC is P2P, which means reduced strain on servers
21:53 < asterick> Which is especially amazing for things like chat.
21:54 < asterick> (I believe there is some kind of optional fault tolerance built into the protocol, but it is unavailable in stable chrome)
21:56 < Guest99295> Interesting. I would expect Chrome to be ahead of the game there.
21:57 <@isaacbw> chrome doesn't tend to be very far ahead as far as features go
21:57 < Guest99295> http://nodejs.org/api/dgram.html ??
21:57 < sambarino> might soon though with the blink engine under their control :)
21:58 <@isaacbw> oh, interesting
21:58 <@isaacbw> I hadn't heard about that until now
21:58 < asterick> Guest99295: WebRTC is realllllllly new.
21:58 < asterick> at least, the data channel over peer connections are.
22:00 <@isaacbw> v8 getting yield is pretty big though
22:00 < Guest99295> Yeah.. its going to be huge in telecom. People will move from softphones to browser based phones but there RTC really needs to become more stable before it's possible.
22:00 < robinson_k> mscdex: just saw your bug in the npm-www tracker
22:00 <@isaacbw> and mobile carriers need to suck less
22:00 < robinson_k> currently investigating it.
22:00 <@isaacbw> let's start a betting pool for when google launches its own carrier
22:01 < Djdclarke> Assertion `!(((handle)->flags & UV__HANDLE_ACTIVE) != 0).. would I be right in thinking that it could be related to closing a socket after a socket has already been closed?
22:01 <@isaacbw> Djdclarke: that's a really fugly boolean
22:01 <@isaacbw> expression
22:01 < bnoordhuis> i wrote that
22:02 <@isaacbw> hah, really?
22:02 < bnoordhuis> yeah
22:02 < pachet> awkward
22:02 < bnoordhuis> it gets expanded from a macro, that's why it looks like that
22:02 < asterick> isaacbw: when is that happening?
22:02 <@isaacbw> I um, have a thing
22:02 <@isaacbw> to do
22:02 < asterick> I've had serious wood for generators for years
22:02 < bnoordhuis> Djdclarke: where and when do you get that?
22:02 < pachet> awkward
22:03 < Djdclarke> I get it randomly actually - using with lots of connections open. New since 0.10 branch. Just updated to latest to see if it still does it.
22:03 <@isaacbw> asterick: I don't know when they're doing it, but there's been a fair bit of discussion on the issue tracker
22:03 < bnoordhuis> Djdclarke: are you using native addons?
22:04 < bnoordhuis> btw, does it say a line number?
22:04 < asterick> isaacbw: I know it's at least in ECMA6 roadmap.
22:04 < Djdclarke> No native addons, and full error: node: ../deps/uv/src/unix/core.c:168: uv__finish_close: Assertion `handle->flags & UV_CLOSING' failed.
22:04 <@isaacbw> asterick: http://code.google.com/p/v8/issues/detail?id=2355&q=yield&colspec=ID%20Type%20Status%20Priority%20Owner%20Summary%20HW%20OS%20Area%20Stars
22:05 < asterick> I also desperately want harmony proxies.
22:05 <@isaacbw> it was accepted a few weeks ago
22:05 < asterick> *Happy dace*
22:05 <@isaacbw> and an owner was assigned
22:05 < asterick> *dance
22:05 < bnoordhuis> Djdclarke: right. it sounds like some kind of corruption
22:05 < bnoordhuis> Djdclarke: if you can turn it into some kind of standalone test case, i can look at it
22:05 < Industrial> What do I do with a TypeError: Property 'end' of object <#X> is not a function ?
22:05 <@isaacbw> I thought it was hilarious when someone requested they improperly implement the spec :P
22:06 <@isaacbw> "please do it wrong like firefox does"
22:06 < bnoordhuis> Djdclarke: something you can try is to turn on core dumps and inspect it after it crashes
22:06 < bnoordhuis> Djdclarke: `backtrace full` usually gives a clue as to what goes wrong
22:07 < bnoordhuis> (that's from inside gdb btw)
22:07 < Djdclarke> Righto, I'll get on that and revert to you if I find anything!
22:08 < asterick> oooh man generators will make my life soo much easier.
22:09 <@isaacbw> hipster threads
22:09 < asterick> yes, they can (and almost definately will) be used for coroutines, but personally I want them for efficient space culling
22:10 < tmpvar> asterick, what do you mean by 'space culling'?
22:10 <@isaacbw> do you mean prettier code?
22:10 < asterick> tmpvar: like selecting objects inside of a view frustrum of a sparse octree.
22:11 <@isaacbw> oh, you actually mean space culling
22:11 <@isaacbw> :P
22:11 < asterick> yep.
22:11 <@isaacbw> what sort of project are you working on?
22:11 < jocafa> yay 3d stuffs
22:11 < asterick> Multiplayer browser game
22:11 < tmpvar> asterick: why is that beneficial? (irnoob)
22:12 < asterick> tmpvar: it's generally more obvious than doing octree.traverse(camera_origin, camera_lookat, callback)
22:13 < asterick> You can also do things like stacking filters
22:13 < asterick> for ( obj of myspace.occtree(camera, ray).filter(Entities).iterate() ) ...
22:15 < tmpvar> asterick: interesting
22:16 < tmpvar> tbh, I've only ever seen it done with a visitor
22:16 < asterick> it also lets you have better flow control over how you're actually USING the generator.  like if want to break after 25 elements, you don't have to signal back.  you can simply break from your loop.
22:17 < matbee> Anyone here know of a system that would allow me to in-browser proxy to other websites? ala: http://www.ninjacloak.com/ ?
22:17 < matbee> Would I just download the dom and then serve it back to the client?
22:21 < asterick> matbee: like, an out of box service that provides that, or do you want to host it yourself
22:21 < matbee> asterick, hosted myself :)
22:21 < asterick> you can do something like that using proxy pass and apache
22:26 < mscdex> robinson_k: ah ok
22:46 < dukedave> Can I build a URL, so I can call url.format with it?
22:47 < dukedave> I know the host and have some params
22:55 < faceleg|work> so
22:55 < faceleg|work> who else has suddenly got grey hair before 30
22:56 < blakmatr_> faceleg|work: I wouldnt say I have grey hair but I've been getting an increasing number of white hairs since I was 19
22:56 < asterick> My hair has not been it's natural color since before I was 18, so I can't really tair.
22:56 <@isaacbw> I new someone who was completely grey in his early twenties
22:56 < asterick> *yell
22:56 < asterick> *tell
22:56 <@isaacbw> *knew
22:57 < faceleg|work> well that makes me feel better
22:57 < kenperkins> is anyone actively running or support 0.6 development
22:57 < kenperkins> *supporting
22:58 <@isaacbw> what
22:58 < ljharb> kenperkins: all my modules still work on 0.6
22:59 < ljharb> unless there's a good reason, why not support it?
22:59 <@isaacbw> as long as it isn't too much trouble
23:00 <@isaacbw> man, does black pepper get spicier if you cook it
23:01 <@isaacbw> I don't think I peppered this steak that much, but it's really hot
23:01 < asterick> I think it releases the essential oils.
23:01 < dukedave> Erm, I just added jslint to vim, and it's complaining about 'require' :\
23:01 < asterick> But that's only coursely ground.
23:01 <@isaacbw> that would be it then
23:01 < asterick> dukedave: you have to flag that as an assumed global
23:01 < faceleg|work> set it on the windowsill and wait for it to cool
23:01 < faceleg|work> also thanks isaacbw for making me feel less worse about my own random outbursts
23:01 < dukedave> asterick,  Am I really supposed to put '/*global require*/' atop every file? :/
23:02 <@isaacbw> there's always time for random outbursts
23:02 < asterick> duke: there are commandline options?
23:02 < asterick> I don't know for vim specifically.
23:02 <@isaacbw> people will walk away if I start going on about peppering steak, but you can't stop yourself from reading in time
23:03 < faceleg|work> >> setTimeout(function() { console.log('random outburst') }, Math.random() * 100)
23:03 < purr> faceleg|work: ReferenceError: setTimeout is not defined
23:03 < faceleg|work> well that was lame
23:03 <@isaacbw> heh
23:03 < faceleg|work> i read it with interest
23:03 < faceleg|work> 5.25% PA
23:06 < faceleg|work> today after working for 8 hours I have to drive for 4
23:06 < faceleg|work> at least I have audio books
23:06 < faceleg|work> praise be audio books
23:07 < asterick> Where you headed?
23:07 <@isaacbw> that's pretty miserable
23:07 < d4rklit3> hey
23:07 <@isaacbw> it isn't a daily commute is it
23:07 < faceleg|work> AKL
23:07 < faceleg|work> no
23:07 < d4rklit3> can I turn off the request loggin in the server console for express
23:07 <@isaacbw> god, a 4 hour commute would be awful
23:08 < d4rklit3> i dont want to see every file that it requests
23:08 <@isaacbw> even if it was just a few days a week
23:08 < asterick> d4rklit3: don't enable it?
23:08 < asterick> by default express doesn't do any printout
23:08 < asterick> that's a middleware.
23:09 < faceleg|work> yeah
23:09 < d4rklit3> asterick  thanks
23:09 < faceleg|work> I know people who do it, between my city and the one I'm driving to later
23:09 < faceleg|work> I'm driving there for a 30 minute meeting
23:09 < faceleg|work> likely arrive home @ 10pm, sigh * a million
23:09 <@isaacbw> that's silly
23:09 <@isaacbw> that's what skype is for
23:10 < d4rklit3> ok follow up question
23:10 < d4rklit3> with node fs   how do i check if something is a folder
23:10 < jocafa> yeah, 8 hours for 30 minutes? insanity.
23:10 < d4rklit3> and not a file
23:10 < asterick> I used to have to do 2h on caltrain every day and that made me a goddamn serial killer.  I can't imagine 4h driving
23:10 < faceleg|work> no it's 2 ther e2 back
23:10 < faceleg|work> when I was in school I had a 45 minute drive to / from school
23:10 < faceleg|work> it was THE WORST
23:10 < asterick> d4rklit3: http://nodejs.org/api/fs.html#fs_fs_stat_path_callback
23:10 < d4rklit3> a guy at my work drives from Ohai -> Hollywood -> Ohai
23:10 < d4rklit3> every day
23:11 < d4rklit3> 4 hours a day
23:11 < d4rklit3> i try to be friends with him
23:11 < d4rklit3> so he doesnt shoot me with a AR-15 
23:11 < gf3> Such a waste of time
23:11 < jocafa> especially if you have a family
23:11 < asterick> Yea, at least on a train you can do stuff like fart around on the internet.
23:11 < gf3> 4 * 5 * 48
23:11 < gf3> / 24
23:12 < gf3> 40
23:12 < gf3> DAYS OF WASTED TIMED
23:12 < asterick> I like to think of it as 16% of your life sitting in traffice
23:12 < gf3> Worthn't it
23:13 < asterick> Thank god for the silicon valley start-up world.  7 hour days FTW.
23:13 < jocafa> what about the insane cost of living? heh
23:13 < faceleg|work> yeah it is such a waste of time
23:14 < asterick> jocafa: I pay $833/mo for rent.
23:14 < asterick> I moved here when the housing market crashed into a rent controlled apartment in one of the nicest parts of the city.
23:14 < jocafa> nice
23:14 < asterick> Yep.
23:14 < gf3> Rude
23:14 < asterick> My utilities come out to around $40/mo (internet included)
23:15 < gf3> Okay now you're just bragging
23:15 < asterick> yep!
23:15 < jocafa> there's no way i could move out to SV
23:15 < asterick> Most of my monthly expenses go toward my dog.
23:15 < asterick> PS: Dog walkers make goddamn bank.
23:16 < asterick> ~$500/mo to hang out at the beach with a corgi.
23:16 < asterick> embarassing.
23:16 < faceleg|work> asterick: you should make him rabid
23:16 < jocafa> i'd have to be paid a metric pantload of cash to make it worthwhile
23:16 < faceleg|work> then we'd see who is laughing
23:17 < mclenithan> couldn't find much on google, any facebook modules have support for the deauthorization callback that is fired when a user removes the applications permissions from their facebook page?
23:19 < mclenithan> any node modules *
23:19 < asterick> mclenithan: does facebook even support that?  I thought they were intentionally opaque on granted user permissions
23:20 < asterick> faceleg|work: Hah, as funny as it would be to kill my dog walker, I place a lot less value on him than I do on my dog.
23:20 < mclenithan> asterick: if you check out settings- advanced - deauthorization callback in your facebook app, it'll let you see it
23:20 < asterick> I'd rather create some elaborate home alone scenario where get gets smashed in the face with a paint can or something like that.
23:21 < asterick> mclenithan: gotcha.  Yea, I don't know personally, sorry. :/
23:21 < mclenithan> no worries
23:24 < mscdex> node.js rules!
23:24 < ryanaz> I've noticed that  after 12 hours my node.js service dies with the following error message:   http://pastebin.com/KaCBj1jm   (running on ec2)
23:25 < mscdex> ryanaz: don't ruin the moment!
23:25 <@isaacbw> ryanaz: it looks like your connection was lost
23:25 <@isaacbw> and you didn't handle the error
23:25 < mscdex> ryanaz: you probably need to send pings
23:25 < mscdex> to keep the connection alive
23:25 < ryanaz> mscdex: lol
23:26 < ryanaz> isaacbw:  Hmm…  i don't think anybody was hitting it at the time
23:26 < ryanaz> isaacbw: it's on a development box that I think wasn't getting connections. ..   Does it have a timeout to where all the callbacks timed out? 
23:26 < mscdex> ryanaz: the server probably will time you out if you're idle for too long
23:27 < mscdex> just do a 'DO 0' query every so often if you're not running any other queries
23:27 < ryanaz> mscdex:  that's odd.. 
23:27 < mscdex> that's what i do internally with mariasql
23:28 < mscdex> it's basically a noop
23:28 < ryanaz> mscdex:   I just wonder if anyone else could confirm that's what's going on … 
23:28 < ryanaz> mscdex:  once it goes into production it will have a load balancer testing the port every X number of seconds… so if that's all it needs, it will have that.. 
23:28 < ryanaz> mscdex:  I'm just curious if there's anything "known" that I should look out for
23:29 < ashnur> ryanaz: now you do
23:29 < ashnur> =)
23:31 < ryanaz> ashnur:  Are you saying that I need to hit the service every few hours or node.js will close the socket? 
23:32 < mscdex> ryanaz: i think the default timeouts are like 8 hours
23:33 < mscdex> for mysql
23:33 < mscdex> server-side
23:33 < ryanaz> i see.. so it's closing the mysql connection and not catching it.. http://pastebin.com/KaCBj1jm
23:33 < ryanaz> mysql is the one complaining
23:33 < mscdex> that could be
23:33 < ryanaz> I'm using the connection pools 
23:34 < ryanaz> so I probably need to catch that when it closes all the connections and open new connections
23:34 < mscdex> either that or just send a noop like 'DO 0' when idle every so often
23:35 < mscdex> you could probably even monkey patch query() to set up and clear some timer
23:36 < ryanaz> makes sense…  it'd be nice to know if anyone else has confirmation that is what's going on …. that was my guess at first too.. but it would be nice for someone to know for sure
23:36 < ryanaz> feels like a timeout somewhere
23:48 < Urbanizator> Hey anyone here wanna help me test my game? http://www.squarific.com
23:58 < faceleg|work> Urbanizator: pressing enter after filling in login details did nothing
23:58 < faceleg|work> enter should submit the form
23:59 < Urbanizator> I know
23:59 < Urbanizator> I'll put it on the todolist
23:59 < asterick> New strategy: Just dig a giant hole under your castle.
23:59 < asterick> SUCCESS!
23:59 < Urbanizator> yea
23:59 < Urbanizator> :p
23:59 < Urbanizator> untill they buy ladders
--- Log closed Thu Apr 11 00:00:01 2013
