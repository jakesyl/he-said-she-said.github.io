--- Log opened Sun May 12 00:00:09 2013
--- Day changed Sun May 12 2013
00:00 < niggler> yeah spawn takes an array of arguments
00:00 < niggler> so it should be spawn('java', ['-jar', './craftbukkit.jar'])
00:01 < niggler> exec takes a string of the full command, but spawn takes the array form
00:02 < isaacbw> reading docs is overrated
00:03 < niggler> there needs to be an IDE intimately familiar with nodejs
00:03 < niggler> so that it would pick up on these things
00:03 < ljharb> eh, IDEs like that are usually crutches anyways
00:04 < isaacbw> real programming write with echo >
00:04 < isaacbw> *programmers
00:04 < gkatsev> life is a crutch
00:05 < niggler> 'ed' ftw
00:05 < gkatsev> ffwd -> butterflies!
00:06 < yorrd> niggler, thanks a lot :) isaacbw :S yup :P should've done that
00:11 < isaacbw> I would love an ide that lets you edit in continuous debug mode. So your app is executed up to the point that you're editing such that autocomplete actually inspects the object/prototypes. I don't know how practical that would be, but it would be an amazing tech demo
00:11 < niggler> that's not really possible isaacbw 
00:11 < niggler> (if there are multiple execution paths that lead to the point)
00:11 < isaacbw> it would only really work for pretty trivial applications of js's object model
00:12 < isaacbw> niggler: well, it would stop at the first point
00:12 < isaacbw> *opportunity
00:12 < isaacbw> I think web storm maybe does something a little like that
00:13 < niggler> there's a way it can be "done" using node debug
00:14 < isaacbw> hah, I wasn't really thinking about it practically. It was more of a "what if the world were made of magic and computers could read minds" sort of thing
00:15 < niggler> what you would do is
00:15 < niggler> whenever a change is made, diff and find the lines that were changed
00:15 < niggler> then insert "debugger;" statements there, run and wait for the first to get hit
00:15 < niggler> then drop into repl 
00:31 < isaacbw> ping pong
00:32 < isaacbw> everyone is beautiful and so are you
00:38 < niggler> blargh why do people make grammars with superfluous terminals
00:39 < isaacbw> grammars with superfluous terminals
00:40 < niggler> so this grammar defines left-curly-bracket
00:40 < niggler> and it's not actually used anywhere
00:41 < paolooo> hello, I got a filename called 'getFbJson.js' and the content is similar to this one -> http://stackoverflow.com/questions/11826384/calling-a-json-api-with-node-js/11826486#11826486
00:41 < paolooo> to execute this I just it through command line -> `$ node getFbJson.js`
00:41 < paolooo> question is, how can I run it online? 
00:42 < paolooo> http://localhost/getFbJson.js won't work
00:42 -!- mode/#Node.js [+o MI6] by ChanServ
00:42 < isaacbw> niggler: which grammar?
00:43 < niggler> http://msdn.microsoft.com/en-us/library/dd944946(v=office.12).aspx
00:43 < isaacbw> did you see the comment recently about the windows NT kernel?
00:44 < isaacbw> and microsoft development culture at large
00:44 < niggler> no isaacbw  what happened?
00:45 < lamella> DO
00:45 < lamella> whoops
00:45 < isaacbw> niggler: blog.zorinaq.com/?e=74
00:45 < niggler> ?lamella
00:45 < isaacbw> sorry no http, I still can't ctrl-c
00:48 < lamella> niggler: i didnt realize irc had focus
00:49 < paolooo> how can I execute nodejs module in the browser?
00:49 < passcod> how would one make a library that can handle .8 streams as well as .10? I only have experience with .10, but some people are requesting interop with .8 and I'd like to design intelligently around this.
00:49 < niggler> irc doesn't have focus, but your client will highlight
00:49 < isaacbw> paolooo: I think you're misunderstanding what node.js is
00:49 < niggler> lol isaacbw 
00:49 < isaacbw> but often people write javascript that targets both node and the browser with browserify
00:50 < lamella> no, i didnt mean to type "DO".  I was typing and didnt realize my irc client was the focused window- it was an accident. we've already talked about it too much ;P
00:50 < paolooo> how can I execute nodejs module in the browser? I have a program in nodejs that will grab json file on twitter, and I want it to use it like `http://localhost/getjson.js?url=http://twitter.com/...json`
00:50 < niggler> paolooo you can set up an http server in nodejs
00:51 < niggler> http.createServer
00:51 < paolooo> niggler: yes I already did that. I'm using 'http' module
00:52 < niggler> so then when the query is for /getjson.js, you can parse the query string, get the url, do the action and send that as a response
00:52 < paolooo> niggler: yes
00:52 < niggler> isaacbw in this case I'm convinced that I'm one of 4 people who have read this page
00:52 < lamella> anyone have a second to talk to me about how to approach a problem and devise a solution with node/express? I've got a few sources of content, some from a local DB, some syndicated via RSS, etc. I want to fetch and display them all on a page. I can think of a view ways of doing this but I'm wondering if there's a "best" or "accepted" or something
00:53 < lamella> is this a good case for partial views?
00:53 < boutell> palooo: um… start reading page one of the node.js site. C'mon.
00:53 < lamella> would something like socket.io be a good use case here?
00:53 < lamella> although i really only need 1 way communication 
00:54 < boutell> lamella: is SEO important here?
00:54 < boutell> as in, does it matter whether google sees it all?
00:54 < lamella> boutell: no
00:54 < boutell> lamella: probably best to do at least all of the potentially slow ones you don't want to be blamed for via plain old AJAX. Nothing wrong with $.get in this situation.
00:56 < paolooo> niggler: I've created a program that will parse json from a site just to solve the problem in ajax cross domain security. With my /getjson.js it can parse json files without any problem. The only problem is I can use it only if I run it through command line `$ node getjson.js`
00:56 < lamella> boutell: so i should just provide access to the data and let it happen client side you think?
00:56 < lamella> i was honestly leaning that way anyway
00:57 < niggler> paolooo you need a CORS workaround?
00:58 < paolooo> boutell: Actually, I have a running server already. I just want to execute nodejs module in the browser.
00:58 < paolooo> niggler: I've tried CORS and JSONP but it didn't work.
01:00 < paolooo> boutell: and niggler my nodejs program is similar to this one -> http://stackoverflow.com/questions/11826384/calling-a-json-api-with-node-js/11826486#11826486
01:02 < isaacbw> paolooo: I already gave you a full answer
01:03 < boutell_> cripes
01:03 < isaacbw> crêpes
01:04 < boutell> lamella: when I need to build a page with data from various asynchronous sources that has to be indexable by google or readable by other dumb browsers, I generally use the async module to call all the sources, pull things into a context object, and make that object available to a template when everything is done
01:04 < boutell> if you go client side you can show spinners for all those slow-ass RSS feeds that aren't your fault rather than having nothing show up for a while
01:04 < boutell> however
01:04 < boutell> you should provide proxies in your server for that stuff
01:04 < boutell> and cache the RSS feeds
01:12 < Jkkerese> Where does everyauth / passport store user information?
01:12 < paolooo> isaacbw: boutell: anyway, thanks for your time.
01:13 < boutell> paolooo: you're going to have to expect a little astonishment if you don't seem to have read the node homepage and the very first dxample, which is a web server.
01:14 < boutell> maybe I could be a little more patient with folks who expect it to be Apache.
01:25 < Technodrome> Good day
01:28 < isaacbw> is it really
01:32 < paolooo> boutell: actually, i've created a server already. this is my repo https://github.com/paolooo/Staitec-BuilderJS . I have a working http server. I can access through `http://localhost:3000`
01:33 < boutell> paolooo: … you have an empty server that just delivers 404 not found.
01:34 < paolooo> boutell: this is the file ( https://github.com/paolooo/Staitec-BuilderJS/blob/master/getJson.js ) that I'm telling you. This only works if I run `$ node getJson.js` but I want to use it using `jQuery.ajax({})`
01:34 < boutell> apologies for being harsh earlier, but you really do need to just start reading some basic node examples. Look at the one on the node homepage:
01:35 < boutell> function (req, res) {
01:35 < boutell>   res.writeHead(200, {'Content-Type': 'text/plain'});
01:35 < boutell>   res.end('Hello World\n');
01:35 < boutell> }
01:35 < boutell> that's responding to a request and creating a response. You can do that. You can look at the URL (req.url), decide what you want to do in response to it, call any code you want, send any response you see fit.
01:35 < boutell> it's easier to do this sort of thing if you add express to your project.
01:35 < paolooo> boutell: No, that's fine I understand, thanks for being responsive too.
01:36 < paolooo> boutell: ok, yeah! I really need to read the docs too
01:43 < BobAlmighty> jcrugzz, you there?
01:43 < jcrugzz> yea sup
01:43 < jcrugzz> BobAlmighty: ^
01:44 < BobAlmighty> You example I tried out, has the same fundamental problem that my code has.
01:44 < BobAlmighty> this.emit doesn't work
01:44 < jcrugzz> well i never posted an example. show me some code
01:44 < BobAlmighty> https://gist.github.com/killdream/5561652
01:44 < BobAlmighty> Did you not post that?
01:45 < jcrugzz> no that was sorella
01:45 < BobAlmighty> ah
01:45 < jcrugzz> i use prototype 
01:45 < jcrugzz> usually
01:46 < BobAlmighty> Okay. so I've done a bunch of shit, and my fundamental problem remains
01:46 < BobAlmighty> I want to call: this.emit
01:46 < BobAlmighty> when the tick happens
01:46 < BobAlmighty> and nobody has come up with a solution
01:47 < BobAlmighty> or clock.tick, or whatever.
01:47 < BobAlmighty> But everthing I try is being undifined
01:48 < jcrugzz> let me see your code
01:50  * mscdex shakes a fist at github
01:51 < jcrugzz> BobAlmighty
01:52 < jcrugzz> mscdex: they still having issues with some repos?
01:52 < mscdex> appears so
01:52 < jcrugzz> lame. its always on the module you want to look at
01:53 < BobAlmighty> Currently this is my code: http://pastebin.com/MeS6zZxx
01:55 < BobAlmighty> my error, is http://pastebin.com/mUjpuA6Z
01:55 < jcrugzz> and whats failing with it?
01:56 < jcrugzz> BobAlmighty show me the piece that is calling / instantiating the getClock
01:56 < BobAlmighty>   this.worldClock = clock.getClock(opts.delay);
01:56 < BobAlmighty>   console.log(this.worldClock);
01:56 < mscdex> BobAlmighty: https://gist.github.com/mscdex/81dc710508d8142c16e6
01:57 < BobAlmighty> where: var clock = require('worldclock');
02:00 < mscdex> ok, updated again
02:00 < mscdex> give it a try
02:03 < BobAlmighty> mscdex, I like the change. But now it says this.timeTick is undefined
02:03 < BobAlmighty> hold up might need to be self
02:04 < mscdex> timetick? :-)
02:04 < mscdex> refresh the gist
02:04 < BobAlmighty> It's magic, except not.
02:05 < BobAlmighty> http://pastebin.com/LkwZzWWJ
02:06 < BobAlmighty> back to the runtime error
02:08 < mscdex> oh i see the problem
02:08 < mscdex> your prototype is being wiped out by inherits
02:09 < mscdex> BobAlmighty: refresh the gist now
02:11 < BobAlmighty> looking
02:14 < Technodrome> maybe i am the odd one out :) 
02:16 < BobAlmighty> msxdex, solved, it was not just the reassignment of this in setInterval, but GH:KAL:JKHOP(!Q*Y _)%^&YP:OPIH"ASKDHG"AIHSF{*Y)AQYH% ^
02:18 -!- mode/#Node.js [+o isaacs] by ChanServ
02:18 < BobAlmighty> this reassignment needs a thing.
02:19 < jcrugzz> mscdex: ah yes Im used to always putting mine before that i forget that it would overwrite any additions
02:20 < jcrugzz> BobAlmighty: honest mistake ;)
02:20 < BobAlmighty> I'm seriously pissed.
02:20 < BobAlmighty> How the FUCK do you know that a calling function is going to fuck with this
02:21 < BobAlmighty> You don't.
02:21 < BobAlmighty> So you shouldn't.
02:21 < BobAlmighty> Ever.
02:21 < BobAlmighty> I understand that there so magic bullshit out there that rely on this.
02:21 < BobAlmighty> But fuck em. And so should you.
02:22 < BobAlmighty> Stop fucking with THIS
02:22 < BobAlmighty> and all is good.
02:23 < mscdex> what are you talking about?
02:23 < mscdex> oh scope
02:23 < BobAlmighty> Changing the context of THIS in scope of a caller fuction.
02:23 < mscdex> you can do .bind(this); too, but meh
02:24 < BobAlmighty> That doesn't slove it
02:24 < BobAlmighty> solve*
02:24 < BobAlmighty> Because what if that is what THEY are doing already
02:25 < BobAlmighty> I call A.yum. Suddenly A might be B.
02:25 < BobAlmighty> how does A.yum.bind() work?
02:49 < daedius> anyone know why this code might not be working?
02:49 < daedius> req.pipe(request("http://www.google.com")).pipe(res);
02:49 < daedius> I'm trying to proxy stuff
02:54 < RobW_> Any suggestions on globbing everything but a particular pattern? Using node globule right now, so this might be a regexp question, but open to other node libraries.
03:03 < Zolmeister> Hey guys. So I made this library called Polish.js (https://github.com/Zolmeister/Polish.js). If anyone wants to check it out and give me feedback that would be great.
03:05 < Zolmeister> (I know that overriding default behavior is considered 'bad', but I think people just assume that without really taking into account what it does)
03:06 < jcrugzz> BobAlmighty: you can call A's function yum with B as this e.g A.yum.bind(B). 
03:20 < passcod> Zolmeister, that looks just like Underscore or Lo-dash with a different set of functions
03:21 < Zolmeister> passcod: its similar, the difference is that I modify core components
03:27 < passcod> So it's like SugarJS with some pythonisms added. Meh.
03:28 < jcrugzz> Zolmeister: im not a fan of changing the behavior of the javascript. but thats just my subjective viewpoint :)
03:30 < passcod> I'm not saying it's bad, but it really looks like you're just trying to bring Python's data manipulation straight to JS, naming and syntax included. It reminds me of Prototype bringing in Ruby style in JS. Let JS be itself :)
03:31 < Zolmeister> jcrugzz: yeah, a lot of people would agree with you. That being said, I still believe that javascript is miles behind languages like python in terms of default functionality, which is why we have libraries like underscore. (whether its right to change that at the core level is debatable)
03:32 < Zolmeister> passcod: its just been hard for me, coming from python, to have to deal with javascript the way it is. If you've ever tried to do any actual scripting (or write programs for coding competitions) you would feel the same way.
03:34 < jcrugzz> Zolmeister: yea from my point of view that is the job of modules or designing your data structures to follow how the language does it natively. its all array and object manipulation
03:34 < jcrugzz> but however you like your api sugar is how you like it
03:35 < jcrugzz> so its whatever works for you :)
03:35 < passcod> well then use python. It's hard for me, coming from C-styles, to get to grip with how it's done with Lisp-styles (for example. I learn new langs on a frequent basis for that exact reason). But it's all part of the game!
03:36 < jcrugzz> passcod: and understanding the lisp styles makes better javascript from what ive seen. trying to work some time to do that myself :)
03:37 < Zolmeister> passcod: ah, but what happens when you want the best of both worlds? thats the problem I was trying to solve, where I love javascript async style of coding, but feel that its missing core object manipulation capabilities
03:38 < jcrugzz> Zolmeister: Array.maps and Array.reduces are pretty powerful
03:38 < jcrugzz> (take the s off those for the actual function)
03:38 < passcod> Zolmeister, also, use Underscore if you want more power/convenience. That's the preferred "let's get started" way to do things
03:39 < passcod> imho
03:40 < Zolmeister> passcod: I'm not so keen on the way underscore does things
03:41 < passcod> you mean you prefer [1,2,3].map to _([1,2,3]).map ? or is it somehting else?
03:42 < Zolmeister> yeah
03:42 < Zolmeister> some of the methods feel unnatural that way
03:43 < jcrugzz> Zolmeister: Im a huge fan of having objects and using Object.keys(object).reduce or .map. and do whatever manipulation logic
03:43 < jcrugzz> dig into the js, you may learn to like it :)
03:44 < Zolmeister> I've used map (not so much reduce), and agree that  its quite useful
03:44 < passcod> _.chain() makes it better. but yeah, I get the unnatural bit sometimes. It feels a bit off. You get used to it. Or you use SugarJS. Two sides of a coin :)
03:44 < Zolmeister> passcod: or you use Polish.js
03:44 < Zolmeister> :)
03:45 < jcrugzz> Zolmeister, reduce is just more flexible in what you return. as you can make it an object, an int, etc. map is strictly array as you know
03:45 < jcrugzz> good for accumulators of all kinds
03:47 < Zolmeister> jcrugzz: sure, but code wise a 'sum' function is still better for adding a list up (which is the most common use case for me)
03:50 < EvilPacket> Any opinions on the best module to use to deal with xml parsing? something I'm not excited to deal with
03:51 < jcrugzz> Zolmeister: i suppose yea but if i was doing math specific things id find a good math module if what I want to do isnt easily done by what javascript gives me
03:51 < jcrugzz> to each there own
03:52 < Zolmeister> EvilPacket: xml2js
03:52 < Zolmeister> jcrugzz: indeed, thanks for the feedback
03:52 < EvilPacket> Zolmeister: thanks I'll take a peak
03:53 < jcrugzz> Zolmeister: no problem
03:53 < jcrugzz> EvilPacket: also https://npmjs.org/package/sax
03:54 < EvilPacket> jcrugzz: thx
03:59 -!- mode/#Node.js [+o Nexxy] by ChanServ
04:50 < HashNuke> hey all ~!
04:50 < HashNuke> Anyone here using mincer? (http://nodeca.github.io/mincer/) How do I disable the digest being added to the file name?
05:36 < niggler> anyone here use american express?
06:23 -!- mode/#Node.js [+o konobi] by ChanServ
06:26 < px> not a fan of naming the URL parsing/formatting library 'url' :/
06:26 < BrightGreyLine> name it purl instead
06:27 < ningu> perl has URI
06:27 < px> gonna call it node_url
06:27 < px> sometimes i just require the functions directly
06:36 < paulkon> "YouTube is not asynchronous, everything is blocking." :(
06:36 < paulkon> http://highscalability.com/blog/2012/3/26/7-years-of-youtube-scalability-lessons-in-30-minutes.html
06:37 < Zolmeister> yeah, its all python
06:38 < paulkon> I don't understand the adversity to change in some tech companies
06:39 < paulkon> "It's working for us. We don't want to change. We don't care about efficiency."
06:39 < Zolmeister> was node.js out when youtube started?
06:39 < ningu> getting somethign to work is not easy
06:40 < paulkon> but they could have shifted to using it over a period of time
06:40 < paulkon> like all big things that change
06:40 < Zolmeister> or, you know, sell it for billions to Google
06:40 < Zolmeister> im just surprised google hasnt made them switch to Java
06:40 < BrightGreyLine> maybe, or they could have slowly degraded everything to shit while they tried to graft two different systems together.
06:40 < paulkon> lol
06:41 < paulkon> it has a similar vibe to how all the oil companies prevent electric cars from being mass produced...
06:42 < paulkon> deliberate restraint of change
06:42 < paulkon> although porting software over is tremedously difficult... but still
06:46 < ningu> that should be what they do in portland
06:51 <@Nexxy> you know what they do in Portland?
06:51 <@Nexxy> they have retro-themed conferences with dance parties http://nodepdx.org/
06:52 <@Nexxy> even HorseJS will be there
06:53 < paulkon> out of curiousity, why is portland such a great hub for software devs?
06:53 < ningu> because they port things, like I said
06:53 <@Nexxy> lol
06:54 <@Nexxy> paulkon, it's the lack of fluoride in the water
06:55 < paulkon> I'm serious lo. never really knew why...
06:55 < paulkon> lol*
06:56 < BrightGreyLine> because it's cloudy and rainy all the time so there's nothing to do outdoors
06:56 <@Nexxy> BrightGreyLine, that's not true
06:56 < BrightGreyLine> so everyone stays indoors, codes, and eventually commits suicide.
06:56 <@Nexxy> you get used to the rain and do stuff anyway
06:57 <@Nexxy> we also eschew umbrellas
06:57 <@Nexxy> that's how you know if someone is a transplant
06:57 < BrightGreyLine> yeah I used to live in the better version of portland
06:57 < BrightGreyLine> Seattle.
06:57 <@Nexxy> they'll be using an umbrella in the rain
06:57 <@Nexxy> BrightGreyLine, if by better you mean sideways and bloated, yeah
06:57 < BrightGreyLine> Only place I've ever seen moss growing, on my car.
06:57 < ningu> a rolling car gathers no moss
06:58 <@Nexxy> seattle scares me
06:58 < romb> Hi all.
06:58 < BrightGreyLine> that pac nw rain
06:58 < BrightGreyLine> it just hangs in the air
06:58 < BrightGreyLine> portland has it too
06:58 <@Nexxy> yeah
06:58 < romb> my npm is 1.2.18 and it does not using my .npmignore at all
06:58 < romb> What is wrong with it?
06:59 < romb> Also my os is Windows 7
07:00 < Havvy> Cities on the west coast with high number of gays also seem to have high number of programmers.
07:00 < ningu> but how many gay programmers?
07:00 < Havvy> Evidence: Portland and San Fransico
07:00 < Havvy> And to be honest, the past week has been perfect in the Portland area.
07:01 < Sven_vB> maye people there are just more liberal
07:01 < Havvy> That's a given.
07:02 < romb> Gist with npm pack -dd: https://gist.github.com/ROMB/de224c460b742edb7b38 Any help?
07:03 < Sven_vB> i don't know much about npm but my all-purpose admin guts tell me the .npmignore might be in another path than npm checks
07:04 < romb> Sven_vB, it is in root folder of project
07:05 < Sven_vB> is there also a node_modules subfolder?
07:07 < romb> Sven_vB, in package? no.
07:08 < romb> Sven_vB, but in project folder yes
07:09 < romb> Sven_vB, I think .npmignore is overriden on Windows. It also ignores .gitignore and .git
07:11 < Sven_vB> that is strange. i've been using TortoiseGit on WinXP lately and it obeys .gitignore
07:11 < Sven_vB> i assume you've made sure the filename is really that, no .txt suffix hidden by windows?
07:14 < romb> Sven_vB, yes, no .txt
07:15 < Sven_vB> i also wonder why the number of backslashes varies so wildly in the gist
07:16 < Sven_vB> but that should not have to do with the problem
07:23 < romb> Sven_vB, Now I'm getting npm git repo to run tests on my environment.
07:29 < ManneW> Hi everyone! I'm currently using Mongoose for MongoDB interaction, but now I would like to use MongoDB for session storage as well and need access to the native MongoDB connection. Do you know of any good way of sharing the native MongoDB with Mongoose?
07:30 < ManneW> Or is double connections, like suggested here http://stackoverflow.com/questions/6819911/node-js-express-js-session-handling-with-mongodb-mongoose, an acceptable way of handling it?
07:40 < nb-ben> ManneW it's perfectly fine to have 2 connections to mongodb
07:40 < nb-ben> ManneW it's expected you'll have more than 1 connection to a database
07:41 < ManneW> nb-ben: Ok, thanks! :) Then I'll go with that solution.
07:41 < nb-ben> :)
07:42 < ManneW> nb-ben: Yeah, I only felt it was "waste" to have two connections to the same database when it might be possible to share :)
07:43 < nb-ben> ManneW it's a waste of time trying to avoid it :P
07:43 < ManneW> nb-ben Good point :)
07:45 < user123837487> what is the most minimalistic way of getting POST parameters?
07:45 < user123837487> Is there any module for this?
07:49 < owen1> tape throwing errors when i run it with it's runner - not ok 2 plan != count
07:49 < owen1> anyone else is using tape?
07:50 < ilyai> user123837487: you don't need any custom modules, especially for the minimalistic way
07:52 < ilyai> require('querystring') should be enought (if urlencoded)
07:52 < gildean> user123837487: that depends, are you sending in json, urlencoded querystrings or what?
07:53 < user123837487> gildean: ilyai: what is the cleanest way of reading the full post data. no matter json or form
07:54 < ilyai> user123837487: just read the request stream.
07:54 < AAA_awright> Nothing to it, just read it
07:54 < user123837487> ilyai: that's not clean enough
07:54 < user123837487> I want something like this: postParams(req, function(params){})
07:54 < AAA_awright> user123837487: I'm not sure what you call 'clean' but the goal should b to produce something that's constistent
07:55 < user123837487> AAA_awright: yeah, I'm asking because I'm wondering the clean and consistent way
07:55 < user123837487> there are already tons of ugly looking but somehow consistent examples of doing this
08:14 -!- mode/#Node.js [+o MI6] by ChanServ
08:36 < ByronZED> Rippln Mobile Apps Social Gamification - http://www.rippln.by/get-started/
08:52 < jaya> How to convert HTML to CSV?
08:52 < Havvy> jaya: Short answer: You can't.  Long answer:  Do you have an example of the HTML?
08:53 < Technodrome> is mongodb the favorite nosql db of choice these days?
08:54 < Havvy> Technodrome: Yes.
08:54 < Technodrome> i'm a bit behind on the whole nosql stuff
08:55 < Havvy> You can use SQL if you want.
08:56 < Technodrome> one thing i never understood about nosql, is what if you have relational data
08:57 < Technodrome> posts that users make for instance 
08:59 < punctuated> Hi
09:02 < adrivanrex_> whew :D
09:03 < punctuated> In a chat based on node (or any other kind) if you want to detect a Troll..whats the best approach? 
09:05 < adrivanrex_> anyone knows storing javascript on mongodb?
09:05 < aandy> messages predating a lot of messages with exclamation points maybe?
09:05 < adrivanrex_> stored javascipt
09:05 < arnorhs> punctuated: probably if they are saying something about promises either way
09:06 < punctuated> Hmmm
09:06 < punctuated> Promises?
09:07 < Havvy> punctuated: Detecting trolls? Impossible!
09:07 < aandy> first you have to define a troll, but in addition to what i said earlier, then maybe having a list of controversial words which flags a convo
09:08 < punctuated> Is it a good approach to examine a set of two or three consecutive sentences and see if the underlying words are closely related? Say...a dictionary map..with closely related words having lesser edge weights
09:08 < punctuated> A troll..lets say someone who talks or hijacks a conversation off topic?
09:18 < stagas> punctuated: https://github.com/thisandagain/troll
09:28 < aandy> stagas: based on brain.NeuralNetwork - is that bayesian or?
09:28 < itsrachelfish> hi #node.js, can I access a socket outside of createServer?
09:30 < punctuated> @stagas that was exactly what i was looking for..let me read more about it 
09:30 < stagas> aandy: no idea
09:30 < aandy> punctuated: mind you that that sort of filtering (spam filter essentially) may be good only for obvious trolls
09:31 <@konobi> punctuated: you might have to go for a bayesian approach
09:31 < aandy> trolling without trolling is the worst kind, and you can't really detect that (as the victim rarely is sure)
09:32 < punctuated> Aandy: it seems that particular analysis is based on learning
09:32 < aandy> right, but if it's bayesian underneath, then my worry still stands
09:33 < aandy> and if you define troll as someone who goes off topic, then you'd need lots of neural networks - for each topic
09:33 < aandy> i mean, i get what you're trying to do, but off topic is *very* difficult to classify correctly
09:35 < punctuated> Konobi : yes i thing thats the best we have right now..for unsupervised segmentation
09:35 < nb-ben> what seem to work is to check if the root of a discussion fits the topic in a shallow manner
09:36 < stagas> aandy: it would make a nice captcha for training :P
09:36 < aandy> stagas: heh
09:37 < punctuated> Hmm..what about this idea ..that we plot a closely.connectes graph with its vertices being a parent word and all its thesarus values...and unrelated words far away..(i  mean not just thesarus, but commonly occuring words in two way communication) 
09:37 < aandy> punctuated: it depends which kind of form your chat is. if it'd been a classic forum for instance (or mailing list), you could look at replies. people who are overlooked in the thread could be indication of offtopic (or just irrelevant)
09:40 < punctuated> This chat i am talking about is suppose to exhibit a certain emotional trait..'compassion' ..'sincerity'...and a strict no no for a behavior that reflects domination or condescending. That should narrow down an otherwise completely open ended chat
09:41 < aandy> oh, okay. that's completely different then. you should try bayesian for classifying condescending messages
09:42 < aandy> mind you that trolling is exactly about emotions ;)
09:43 < punctuated> Yes..but with all the processing involved i wonder if the chat will remain realtime
09:44 < aandy> why wouldn't it be? typically you use a memory based db
09:44 < aandy> by that again depends how you define real time 
09:45 < aandy> even realtime has delay or at least latency
09:45 < punctuated> Yes..
09:45 < aandy> but you're not looking at anything like seconds of classifying
09:46 < aandy> it's simple statistics, it's simple math. and if you do your db right, it's a (one) quick lookup
09:46 < punctuated> Yeah..or may be with map reduce or strictly correlated pair values can improve response time.
09:46 < aandy> huh
09:47 < aandy> are you trolling?
09:47 < punctuated> I found this paper by Rejina Brazilay on Bayesia Unsupervised Segmentation
09:47 < aandy> you're saying a lot of right buzz words, but incoherent sentences
09:47 < punctuated> Am i? Haha.naa
09:48 < punctuated> Yes..english isnt my first language..apologies
09:49 < aandy> map reduce isn't really related here. sure, you can use map reduce, say mongo or something. but that's by far an overreach of what type of queries (questions) you'll be asking the database
09:49 < aandy> and, well, mongo would normally run on normal disks, with indices in memory. you could just run something entirely in memory, like redis
09:50 < aandy> which is a good example for what you need (bayesian filtering). it was practically built for those types of lookups you need
09:50 < aandy> and it's lightweight. it's not a hadoop install ;)
09:52 < aandy> so if i were you i'd test with that. start out small. if it works the way you expect, then you can look into big data later (don't spend too much time optimizing before you've even begun)
09:52 < punctuated> No i meant map reduce..if i were to follow my approach. And the second part that probably made you think of me as a troll was about Redis based key value store idea
09:53 < punctuated> Yes..thats exactly what i had in mind
09:53 < aandy> i could be wrong. but unless you already have a petabyte of messages, and running at that scale, i would hold off on mapreduce
09:54 < punctuated> I think optimization can be dealt with later..importantly how does the concept work out..
09:55 < punctuated> Thank aandy and everyone else. I gotto rush for now..see you all later :)
09:56 < aandy> good luck. it basically works like http://blog.echen.me/2011/05/01/unsupervised-language-detection-algorithms/ 
09:56 < aandy> (was the first link i could think of in a rush ;))
09:56 < aandy> http://blog.echen.me/2011/04/27/choosing-a-machine-learning-classifier/ also has some down to earth explanation
10:08 < foofoobar> How can I structure this in a "cleaner" way? Or is this a good solutions to handle this? https://gist.github.com/anonymous/bc734006abf78a8fe353 Basically I want to set the login data in my app.js and then I want to use the client in my routes.js (which is required from my app.'s)
10:11 < aandy> foofoobar: you could use it as middleware. that way you can "reuse" the client, and not have to use globals
10:11 < foofoobar> aandy, can you tell me how to do this? or give an example?
10:14 < aandy> you're actually almost there. a (untested) example would be: http://pastie.org/private/75vcdbaexaukevdhdl8i1w
10:14 < aandy> you'd probably want to replace your exports.getClient to a function like  include_client (instead of defining it in app.js)
10:15 < foofoobar> aandy, all right, so I put the client variable in my request object so I can access it in each request, right?
10:16 < aandy> exactly
10:16 < aandy> whoops, forgot to call next
10:17 < aandy> http://pastie.org/private/j4milwlsxljchoze87zg#5 ;)
10:19 < iksik_> any good alternative for supervisor module? to reload my server when code changes.. but i need to run it from the code, not from cli... supervisor 'works', it reloads when code changes, but it doesn't reload, when new file is created
10:20 < aandy> iksik_: https://github.com/nodejitsu/forever is one
10:21 < aandy> you can have to watch a dir for changes
10:21 < iksik_> yea, i'm watching a dir with supervisor
10:22 < iksik_> ok, testing 'forever'
10:28 < foofoobar> aandy, how do you know that you can pass a "middleware" in the app.get() ?
10:28 < foofoobar> I can't find it in the docs
10:30 < aandy> i assumed you use connect or express. http://www.senchalabs.org/connect/ http://expressjs.com/
10:31 < aandy> if you use naked node, just the http module, then you'd call that function in your function(req, res) instead
10:31 < foofoobar> aandy, I  use express. But I can't find that in their docs
10:31 < aandy> my point was that you attach it to the needed req object
10:31 < foofoobar> they use their middleware like app.use(theMiddleWare)
10:31 < foofoobar> ok
10:31 < aandy> foofoobar: they use connect-middleware. not sure if it's explicitly written anymore
10:32 < foofoobar> ok
10:32 < aandy> they seem to take it as given. so i'd read on senchalabs for more accurate explanation of what middleware is
10:33 < aandy> http://stackoverflow.com/a/5290324
11:00 < adrivanrex_> Hello?
11:00 < codeplay> hi
11:00 < adrivanrex_> anyone knows how to know if the object in nodejs is giving errors?
11:00 < adrivanrex_> or error handler
11:00 < adrivanrex_> like the code inside of object is invalid format .. or etc.. that it triggers an error
11:01 < passcod> try {} catch () {} ?
11:01 < adrivanrex_> so I'm making this module type on nodejs and mongodb and I'm storing this function on a mongodb
11:01 < adrivanrex_> then I want to catch error if the stored function is invalid code ..
11:02 < adrivanrex_> as to not stop nodejs
11:03 < SomeoneWeird> http://nodejs.org/api/domain.html
11:03 < passcod> so are you running the function in node or in mongo? because these are two very different things
11:03 < adrivanrex_> Oh thanks
11:04 < adrivanrex_> I'm just storing the function on mongodb
11:04 < adrivanrex_> and play code on nodejs
11:04 < echoSMILE> With this code why after catch the error, the server don't send nothing more to the client? http://pastebin.com/8pu12u7q
11:05 < sinclair|away> https://s3-ap-southeast-2.amazonaws.com/sinclair-media/music/sinclair_is_not_a_hipster.mp3
11:07 < sinclair|away> ^ in case anyone wondered
11:10 < passcod> adrivanrex_, you've got a few options. You could run/eval the code, and use either try-catch, or the error event, or 'domain'. You could also run it through jshint or nother static analyser for a safer, albeit less thorough, check of code.
11:10 < passcod> *another
11:12 < adrivanrex_> thanks passcod really helpful :)
11:12 < adrivanrex_> I'm adding plugins for my nodeJSCMS https://github.com/adrivanrex/NodeCMS
11:12 < adrivanrex_> probably gonna use that technique
11:14 < passcod> well, i'd consider that extremely unsafe for potentially untrusted code, but whatever.
11:15 < adrivanrex_> haha! anwyay it's up to the user if he installs unsafe plugins
11:15 < r1card> Question, does anyone know a library/utility/something that converts this foo["bar.baz.qux"] to this:  foo["bar"]["baz"]["qux"]
11:16 < passcod> not offhand, but I'm sure there are a few, as this is fairly common and quite easy to accomplish
11:17 < romb> r1card, pure js? =)
11:18 < r1card> romb, hm?
11:19 < r1card> passcod, I just wondered if there's a standard "name" for it, the way we know what pop/push/shift/unshift is
11:19 < passcod> don't know. i'm trying to find something
11:19 < romb> r1card, "for prop in obj" and str.splice can do this things
11:20 < romb> r1card, I mean slice
11:21 < r1card> romb, thanks :)
11:21 < r1card> passcod, no need, I just wondered if someone knows something off hand, thank you! ;)
12:07 < Industrial> Can I skip this compiling process and instead install binaries? https://gist.github.com/Industrial/7fe56f9c3dfc41996515 I'm doing this automated in vagrant... cba to wait for the compile every time.
12:12 < adamsmeat> how does node.js handle circular dependency?
12:19 < yorrd> The terminal executing the node.js script is for some reason not accepting any input :/ I spawned a java child process before that happened
12:49 < sinclair> hi everyone
12:50 < sinclair> anyone know where formidable puts its temporary files on a windows system?
13:00 < sinclair|away> sinclair: ...
13:18 < henryh> Hi all, I have an issue with mongoose not adding a document/collection and its literally been driving me insane I've had the issue for about an hour and it doesn't spit out any errors so i can't even debug it http://stackoverflow.com/questions/16506844/mongoose-wont-add-document
13:21 < henryh> anyone?
13:21 < rsmartinva> have you initiated a connection to mongoose?
13:22 < mscdex> this is comical.... going to a site on msn.com with Chrome presents a banner at the top saying "Using Chrome? Browse with safety and speed. Get Internet Explorer 10."
13:23 < geNAZt> mscdex, yes :D
13:23 < geNAZt> weird :D
13:23 < Havvy> What about if you are using Firefox?
13:23 < aandy> it's also ironical, as browsing to msn.com with IE < 10 => 500
13:23 < mscdex> i don't know, i don't use firefox
13:23 < aandy> -al
13:23 < aandy> :(
13:24 < geNAZt> well browsing with ie should alway be => 500
13:24 < aandy> preeeetty sure it already is
13:25 < geNAZt> next HTTP implementation
13:25 < geNAZt> HTTP Code 513: You are using Internet Explorer. Please switch to another browser.
13:26 < aandy> 418 ?
13:26 < aandy> can be used until then
13:26 < geNAZt> yes
13:26 < geNAZt> could :D
13:26 < aandy> 5** is for server error. i would argue using IE is a user error :D
13:27 < geNAZt> yes but it can contain risks for your server
13:27 < aandy> true
13:27 < aandy> 501 is also good
13:27 < geNAZt> like the ajax "bug" in IE 8-9
13:27 < aandy> IE not implemented. sorry
13:27 < geNAZt> dont know if it persists in IE 10
13:29 < aandy> i guess 450 would make a good internal joke. IE => GET /, 450 Blocked by Windows Parental Controls
13:29 < geNAZt> :D:D:D
13:40 < henryh> rsmartinva: the connection is initiated in the locomotive all.js file i think
13:40 < yorrd> The terminal executing the node.js script is for some reason not accepting any input :/ I spawned a java child process before that happened
13:42 < mscdex> yorrd: stdin?
13:43 < yorrd> mscdex sorry, I started reading on this yesterday. I assume it's taking my input to the application?
13:43 < mscdex> yorrd: what input?
13:44 < yorrd> mscdex, well, whatever I type doesn't appear, even when I terminate the process (ctrl c)
13:44 < mscdex> yorrd: is your code posted somewhere?
13:44 < yorrd> yeah, one sec
13:45 < yorrd> http://pastebin.com/h72yiQwd mscdex
13:46 < mscdex> yorrd: what node version?
13:46 < yorrd> 0.10.5 I believe
13:47 < yorrd> yes
13:47 < mscdex> yorrd: what platform?
13:47 < yorrd> Linux
13:48 < yorrd> just confirmed, it works fine on Windows for some weird reason
13:50 < mscdex> yorrd: no problems for me on Linux, but then again i don't have a jar file for testing
13:51 < yorrd> mscdex, I'll try to execute a different child process... which one (quick to set up) would take input? Do you know an example?
13:51 < mscdex> yorrd: does the jar application use console stuff?
13:52 < yorrd> yes, it's a minecraft server software
13:52 < mscdex> yorrd: it's possible it changes the tty to raw mode or something
13:53 < mscdex> yorrd: so when you exit, it's still in that mode and you don't see keystrokes
13:53 < mscdex> yorrd: that's my guess
13:53 < yorrd> mscdex, right, I got to start a new terminal
13:53 < geNAZt> yorrd, you can detach the process
13:53 < geNAZt> and kill it via pid
13:54 < yorrd> geNAZt, you mean to get rid of it? But then that doesn't slve my problem that I can't enter commands to the mc server which is running as child process
13:54 < geNAZt> you can
13:54 < geNAZt> you can control the stdio from the parent to the child
13:55 < rsmartinva> henryh: did you solve the problem yet?
13:55 < geNAZt> but you can detach the process and unref it so the nodejs has to kill it via pid
13:55 < Halite> Similar to how you can host a web server using the HTTP library, can you host an IRC server in Node.JS
13:56 < mscdex> yorrd: i would hope minecraft has some easier way of administering a server
13:56 < geNAZt> well minecraft can have a JSONAPI
13:56 < geNAZt> so it can be made easy
13:56 < yorrd> mscdex, I want to get the output live and process it for some kind of live ticker on a website
13:57 < yorrd> not sure, but that seemed liek the easiest way
13:58 < yorrd> geNAZt, I think I understand what you're saying now... let me try that if mscdex doesn't bring me to a brilliant decision
13:58 < mscdex> heh
14:00 < mscdex> yorrd: it looks like it writes to a log, what about reading from that?
14:01 < geNAZt> well detach the process and everything is fine
14:02 < yorrd> hmkay, I'll try detaching the process, if that doesn't work I'll  play around with JSONAPI...
14:02 < mscdex> yorrd: yeah there's a server.log in the minecraft server root somewhere
14:03 < yorrd> ya mscdex, but how "live" is that? Like I'm relying on it to deliver within a few milliseconds, players will be able to use that when they're in a fight for example
14:04 < mscdex> yorrd: afaik it updates it as it happens.... just have to test it
14:04  * Halite made a server at 127.0.0.1:1337
14:04  * mscdex connects
14:04 < Halite> try going on 127.0.0.1:1337 in the web browser
14:04 < Halite> it's a Node.JS server
14:05 < geNAZt> well i cant connect :(
14:05 < Halite> http
14:05 < Halite> it's a web page
14:05 < Halite> not IRC
14:05 < mscdex> :-D
14:06 < geNAZt> yes i know but even then it doesnt work
14:06 < Halite> I would like to make it an IRC server though
14:06 < Halite> mscdex: what does it say
14:06 < yorrd> isn't 127.0.0.1 your localhost?
14:06 < mscdex> Halite: it shows a picture of nyancat
14:06 < geNAZt> pssst :D
14:06 < yorrd> hm.. :D
14:06 < Halite> mscdex: :p
14:06 < Halite> I'll try a different IP
14:10 < Halite> wtf
14:10 < Halite> why will it refuse
14:12 < Halite> nvm
14:13 < Halite> it's being bad
14:47 < sinclair|node> hmm, for some reason, when i am in chrome, i get a double page load when loading a nodejs http server
14:47 < sinclair|node> anyone have any ideas?
14:50 < bnoordhuis> sinclair|node: favicon.ico?
14:50 < sinclair|node> bnoordhuis: um, possible
14:51 < sinclair|node> bnoordhuis: hard for me to tell tho...
14:51 < sinclair|node> wait, no it isn't
14:51 < sinclair|node> bnoordhuis: you are 100% correct
14:53 < sinclair|node> bnoordhuis: im still getting pretty rough performance on compilation stuff
14:53 < mscdex> favicon.ts
14:53 < sinclair|node> im floating around 800ms
14:54  * sinclair|node knows he can get faster compilation
14:55 < sinclair|node> mscdex: can i rant to you about it for a bit
14:55 < sinclair|node> ?
14:56 < sinclair|node> well, i will rant anyway
14:57 < sinclair|node> i have a test case set up, i have 100 source files, (all typescript) and they all reference types in a 2 declaration files (node.d.ts, and lib.d.ts)
14:58 < sinclair|node> lib.d.ts is enormous, and node.d.ts is also fairly large 
14:58 < sinclair|node> when the compiler runs, it syntax and typechecks every pass
14:59 < sinclair|node> anyway, my test case is 100 source files, which are being run each time the node application hits a http request
14:59 < sinclair|node> being run means, http request comes through, 100 source files are resolved, and flung through the compiler, and the outputted JS is run in a nodejs vm
15:00 < sinclair|node> so, doing this raw as guts, i was getting slow as hell request/response times from node
15:00 < sinclair|node> so, i had a go optimizing 
15:01 < sinclair|node> i figure, i need to resolve source files each time (that's 100 file reads), i get the content, and i always pass 100 source files to the compiiler
15:02 < sinclair|node> when calling compile, the compiler checks each 100 source files, content to see if it has been updated or not, if it has, i update that in the compiler, then re run the typecheck / syntax check for only those files which have been updated
15:02 < sinclair|node> with this alone, i got request/response times down from 10 seconds to under a second
15:04 < sinclair|node> so, now i am floating around 800ms request/response for arbitrary code updates.
15:05 < sinclair|node> what i now need to do is cache the output from the compiler, such that, instead of emitting everything each time, i only emit updated source files. this should bring times down a lot further 
15:06 < sinclair|node> anyway, rant over
15:37  * sinclair|node update
15:37 < sinclair|node> im down to 16ms dynamic compilation 
15:42 < daslicht> anyone like to suggest me a RTE Editor which plays nice together with node / express?
15:42 < daslicht> uploading images would be lovely 
15:42 < daslicht> even better if therer is something like ckfinder or http://www.moxiemanager.com
15:42 < daslicht> just curious before i start my own :)
15:44 < sinclair|node> daslicht: what is a RTE editor?
15:44 < sinclair|node> oh, nevermind
15:44 < daslicht> rich text editor
15:44 < daslicht> wysiwyg editor
15:44 < sinclair|node> yes, i thought about it for a second :)
15:44 < daslicht> right to left ?
15:44 < daslicht> hjeh
15:45 < sinclair|node> daslicht: i wouldn't use them if i were you
15:45 < daslicht> no worries
15:45 < daslicht> whay do you suggest ?
15:45 < daslicht> built my own ?
15:45 < sinclair|node> the ace editor
15:45 < daslicht> thanks i google
15:45 < daslicht> http://ace.ajax.org/#nav=about
15:45 < sinclair|node> yes
15:46 < daslicht> i dont what to edit code
15:46 < sinclair|node> its not a RTE, but is it a damn fine code / text editor
15:46 < daslicht> i just like to add some fromatable text to a blog i build
15:46 < daslicht> and upload images :)
15:46 < sinclair|node> daslicht: in all my years experience with web stuff, and what not, RTE's never work
15:46 < daslicht> hehe
15:47 < daslicht> why?
15:47 < daslicht> just predifine css?
15:47 < daslicht> maybe thats a good idea
15:47 < sinclair|node> daslicht: there was one i used to use that was quite good back in the day, called the fckeditor, it had wysiwyg buttons and such
15:47 < sinclair|node> and a image/file upload button
15:47 < sinclair|node> and embedding things
15:47 < sinclair|node> but its quite old
15:48 < daslicht> hm so how do you solve it now?
15:48 < sinclair|node> http://drupal.org/project/fckeditor
15:48 < sinclair|node> i don't use RTE's
15:48 < daslicht> how do you deal with images?
15:48 < RLa> why not markdown
15:49 < sinclair|node> daslicht: i don't see the correlation between RTE's and image uploading
15:49 < daslicht> not anyone is able to use it
15:49 < daslicht> i am createing a dead simpel blog engine
15:49 < sinclair|node> daslicht: then i would avoid RTE's
15:49 < daslicht> wherte the customer  can add images etc 
15:49 < sinclair|node> have a look at the syntax for readme.md
15:49 < RLa> so maybe add feature where user can upload word docs instead
15:49 < daslicht> I know the syntax 
15:49 < daslicht> but not anyone is a coder
15:50 < daslicht> tell that my artist friends
15:50 < daslicht> they laugh at me
15:50 < sinclair|node> daslicht: even wiki markup is more accessible, RTE's have a wonderful habit of throwing junk in your markup
15:50 < daslicht> they want just to press a button to add an image
15:50 < daslicht> looks like it could be a good idea to built my own "add image" thing than
15:51 < sinclair|node> daslicht: the most common thing non technical users will do when you give them a RTE is paste from Microsoft Word
15:51 < daslicht> you can escape that 
15:51 < RLa> why not just insert markup for image them?
15:51 < sinclair|node> you dont want that
15:51 < daslicht> how do you upload an image with markup? :)
15:51 < sinclair|node> daslicht: you don't
15:51 < daslicht> see
15:51 < sinclair|node> daslicht: create a gallery / album
15:52 < daslicht> hmm
15:52 < sinclair|node> daslicht: users upload images into the gallery/album, and your editor references files in there
15:52 < daslicht> but than they need to copy paster image urls
15:52 < daslicht> that shoudl work with a button 
15:52 < sinclair|node> daslicht: give them a button, and a dialog to pick images from the gallery
15:52 < daslicht> copy pasting is evil
15:52 < RLa> have you checked at all how current blog engines work?
15:53 < daslicht> for this project i have to create a unique 
15:53 < sinclair|node> daslicht: at least then, your users can organize site assets how they want, without you guessing where things should be
15:53 < daslicht> not recyle stuff 
15:53 < daslicht> if so i could just install drupal
15:53 < daslicht> or wordpress
15:53 < daslicht> :D
15:53 < sinclair|node> daslicht: trust me then, create a gallery
15:53 < daslicht> its mostly about fun not $$$
15:54 < RLa> wordpress has ok admin interface, everything else, expecially code and plugins suck tho
15:54 < daslicht> ok i waill have a look on this
15:54 < sinclair|node> daslicht: once you have the gallery, you just need to have a button where users can pick from the gallery to insert images when they are editing
15:55 < sinclair|node> daslicht: it is important to allow users to organsise site assets
15:55 < sinclair|node> if you don't things get messy
15:55 < daslicht> ok
15:55 < RLa> most users do not even do word docs daily, just send mails and surf web
15:55 < RLa> so it does not have to be rte
15:55 < sinclair|node> daslicht: why may for example, upload the same asset more than once, when they could just reference the gallery
15:55 < sinclair|node> *they
15:55 < daslicht> I have some target specifications which say RTE
15:55 < daslicht> heh
15:56 < daslicht> I try that gallery approach 
15:56 < daslicht> but anyways i need to offer them text formating
15:56 < sinclair|node> daslicht: took me years to learn not to use RTE's
15:56 < daslicht> like center left right bold etc
15:57 < sinclair|node> daslicht: don't give users RTE's
15:57 < daslicht> some years ago I ve built a RTE in Flex
15:57 < daslicht> so building one is not the issue
15:57 < daslicht> its more time :)
15:57 < sinclair|node> users and rte's are BAD
15:57 < daslicht> thats why i asked if therer is a ready solution
15:58 < daslicht> who cares
15:58 < sinclair|node> users are stupid, don't let them screw things up by giving them RTE's, trust me
15:58 < daslicht> hahah and than i should give stupid users markdown to edit their stuff hheh
15:58 < daslicht> no way
15:58 < sinclair|node> give them a text editor
15:58 < sinclair|node> plain text
15:59 < daslicht> that would be sufficient 
15:59 < sinclair|node> give them *.md markdown
15:59 < daslicht> >I have some target specifications which say RTE
15:59 < sinclair|node> daslicht: you said this wasn't for $$
15:59 < daslicht> and ?
15:59 < sinclair|node> nothing, carry on
15:59 < daslicht> cant you have targets without money ?
16:26 < RobW_> What synchronous exec library do people prefer? execSync, node-exec-sync, etc.
16:30 < RobW_> AH, looks like node-exec-sync is abandoned.
16:33 < sorella> RobW_, why execute synchronously?
16:34 < RobW_> sorella: Not server code, command line scripting/tooling that requires some blocking. Yeoman Generator.
16:35 < sorella> RobW_, if the command line thing requires blocking it's already doing things wrong. Imho, none of the synchronous execution thingies I've tried compose well. I have plans of writing a shell execution library using promises that keeps the pipe composition of bash and stuff, but still haven't got the time to.
16:35 < RobW_> execSync seems like a good answer. Don't know many people who use node, just looking for some reenforcement.
16:36 < isaacbw> if it's in the core api, why would you wanta  module that does the exact same thing
16:37 < RobW_> isaacbw: Is it?
16:39 < sauron> hey!
16:43 < isaacbw> RobW_: there are always ways to use asynchronous code but make it feel synchronous to the end user
16:46 < isaacbw> though it does surprise me that the core api doesn't have a synchronous version
16:47 < sauron> hey my node.js net socket stops being able to write to client after some time :(
16:49 < JohnMcLear> sauron: What library are you using?
16:49 < JohnMcLear> for sockets..
16:50 < sauron> node.js "net" module
16:52 < gnarf> RobW_: all of the ones I've seen to do that were pretty terrible, like eating 100% cpu in loops
16:54 < gnarf> i ended up just writing it using async.series instead
16:54 < sauron> anyone have an idea to why my problem is occurring? 
16:57 < phpnode> hey all, i have a fairly barebones (so far) node app whose RSS grows slowly over time and never shrinks? is this normal? heap used and total remain basically constant
16:58 < isaacbw> rss?
16:59 < phpnode> isaacbw: Resident Set Size (i think)
16:59 < isaacbw> huh okay
17:00 < phpnode> from what i can glean from google, it's the amount of ram node v8 is using
17:01 < RobW_> Thanks for the tips, all. Not sure async code is going to work with the way Yeoman generators are set up, but I'll give it another try. If not, I'll probably use https://github.com/arturadib/shelljs
17:03 < sauron> is anyone familiar with socket programming in node here?
17:07 < phpnode> another symptom i'm seeing is it starts off performing well, doing 10k rps, but if i hammer it with ab for 12hrs that performance drops to more like 2k rps and never recovers
17:07 < sinclair|node> https://github.com/sinclairzx81/typescript.api/ <--- blazing fast compilation
17:08 < sinclair|node> stupid fast infact
17:08 < sinclair|node> can probably go a bit faster also
17:10 < dim_> Hello. Would somebody recommend an Express middleware that would serve templates in a particular directory a la express.static but rendering them first with the current templating engine (e.g. Jade) ?
17:10 < dim_> Nothing came out searching on npm :(
17:10 < sinclair|node> dim_: you can change the default directly express searches for templates iirc
17:11 < isaacbw> phpnode: you may not be properly releasing unused object handles
17:11 < oblio> howdy
17:12 < Halite> how can I round a number x to the nearest y
17:12 < Halite> in node.js
17:12 < Halite> Math.round seems undefined
17:12 < sinclair|node> Halite: Math.floor(10.234) == 10
17:12 < dim_> I know, but res.render throws if the file is not found
17:12 < node> thats weird 
17:12 < pickels> dim_: I think you want this http://expressjs.com/api.html#app.engine
17:13 < sinclair|node> Halite: Main.ceiling(20.222222) == 21
17:13 < sinclair|node> er, Math.ceiling
17:14 < sinclair|node> Halite: Math.round(20.6) == 21, Math.round(20.4) == 20
17:14 < sinclair|node> iirc
17:14 < Halite> Math is undefined
17:14 < phpnode> isaacbw: it's strange though because although i'm not actually allocating anything in the request path. i create a bunch of objects before the app starts listening, but right now the app is really just echoing the request's query string as the response and that's it, it doesn't do anything else. it's so weird
17:14 < SomeoneWeird> math is undefined?
17:14 < SomeoneWeird> since when
17:14 < sinclair|node> Halite: well, you are in real trouble, as the universe will likely implode without math
17:14 < SomeoneWeird> 1+1=3
17:15 < SomeoneWeird> >> Math.floor(21.2)
17:15 < purr> SomeoneWeird: (number) 21
17:15 < Halite> NPM is saving the universe
17:15 < dim_> pickels: not sure. what I really want is something like app.get('/views/:path', function(req, res, next) { res.render('partials/' + req.params.path);});
17:15 < sinclair|node> SomeoneWeird: look at me hard work... https://github.com/sinclairzx81/typescript.api/
17:16 < dim_> pickels: the problem is the res.render is not flexible enough
17:16 < SomeoneWeird> sinclair|node, oh fun
17:16 < node> xd
17:16 < sinclair|node> SomeoneWeird: its the latest TS version mate
17:16 < SomeoneWeird> blame node!
17:16 < mscdex> >> Math.floor(Math.ceiling);
17:16 < purr> mscdex: (number) NaN
17:16 < node> yea blame me
17:16 < node> i am your god
17:16 < dim_> pickels: it would through if file not found and allow directory traversal by default
17:16 < sinclair|node> SomeoneWeird: it supports generics and the updated TS compiler, 
17:16 < node> i hate u, i hope i never work
17:17 < dim_> pickels: 
17:17 < pickels> dim_: if you want to get a file by path I think you need to give res.render the absolute path. So add __dirname
17:17 < Halite> >> math.round(5,4);
17:17 < purr> Halite: ReferenceError: math is not defined
17:17 < Halite> .
17:17 < Halite> >> Math.round(5,4);
17:17 < purr> Halite: (number) 5
17:17 < mscdex> >> Math.ceiling(Math.floor)
17:17 < purr> mscdex: TypeError: Object #<Object> has no method 'ceiling'
17:17 < Halite> >> Math.round(5.54321,4);
17:17 < purr> Halite: (number) 6
17:17 < Halite> >> Math.round;
17:17 < purr> Halite: (function) round
17:17 < mscdex> >> Math.ceil(Math.floor);
17:17 < purr> mscdex: (number) NaN
17:18 < mscdex> >> Math.floor(Math.ceil);
17:18 < purr> mscdex: (number) NaN
17:18 < dim_> pickels: that line actually works. The problem is I wil have to check whether the file exists and whether the path is not malicious myself
17:18 < dim_> pickels: res.render does not do it for me
17:18 < Halite> I'd like to round to the nearest x
17:19 < pickels> dim_: ah yep, res.render has an error event/callback if I remember correctly so you could do that to raise a 404 or something
17:19 < dim_> pickels: I thought there might just be a jade parser that takes a stream as an input, so that I could do smth like require('send')(...).pipe(parser).pipe(res)
17:19 < Halite> >> Math.ceil(5.54321,4);
17:19 < purr> Halite: (number) 6
17:19 < Halite> >> Math.ceil(5,4);
17:19 < purr> Halite: (number) 5
17:19 < Halite> >> Math.round(3,88);
17:19 < sinclair|node> SomeoneWeird: what do you think?
17:19 < purr> Halite: (number) 3
17:19 < Halite> >> Math.round(3.4,88);
17:19 < purr> Halite: (number) 3
17:19 < Halite> >> Math.round();
17:20 < purr> Halite: (number) NaN
17:20 < isaacbw> Halite: you can pm the bot
17:20 < Halite> I'd like to round to the nearest x
17:20 < Halite> >> Math;
17:20 < purr> Halite: (object) {E: 2.718281828459045, LN10: 2.302585092994046, LN2: 0.6931471805599453, LOG10E: 0.4342944819032518, LOG2E: 1.4426950408889634, PI: 3.141592653589793, SQRT1_2: 0.7071067811865476, SQRT2: 1.4142135623730951, abs: (function) abs, acos: (function) acos, asin: (function) asin, atan: (function) atan, atan2: (function) atan2, ceil: (function) ceil, cos: (function) cos…
17:20 -!- mode/#Node.js [+o isaacbw] by ChanServ
17:20 < Halite> ...
17:20 < SomeoneWeird> sinclair|node, seems coolish
17:20 < SomeoneWeird> lo
17:20 < SomeoneWeird> l
17:20 < sinclair|node> SomeoneWeird: wanna try it out?
17:20 < Halite> I come here to get help for Node.JS
17:20 < sinclair|node> SomeoneWeird: only take you about 2 seconds
17:20 < node> Welcome!
17:21 < Halite> not to see an op getting mode +o and me getting scared
17:21 < node> I am an expert at Node, how may I help you?
17:21 < Halite> node: I'd like to round to the nearest x
17:21 <@isaacbw> Halite: lol no, I just realized that I hadn't been identified after the last netsplit
17:21 < node> Math.round() function should work fine in that regard
17:21 < Halite> node: example please
17:21 < node> Math.round(28.4) => 28
17:22 < SomeoneWeird> sinclair|node, literally about to get into bed, sorry
17:22 <@isaacbw> Halite: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Math
17:22 < Halite> yes but what about rounding to the nearest x
17:22 < sinclair|node> SomeoneWeird: that's ok
17:22 < phpnode> Halite: give an example of input and expected output
17:22 < node> What do you mean 'the nearest x'
17:22 < Halite> round 2.5 to the nearest 4 = 4
17:23 < Halite> round 1.5 to the nearest 4 = 0
17:23 < node> wat
17:23 < Halite> I think I want ceil but you get what I mean
17:23 < Halite> I could just divide
17:24 <@isaacbw> >> Math.round(2.5/4)*4
17:24 < purr> isaacbw: (number) 4
17:25 <@isaacbw> >> Math.round(1.5/4)*4
17:25 < purr> isaacbw: (number) 0
17:26 <@isaacbw> >> function round(x, y) { return Math.round(x/y)*y; }; round(2.5, 4)
17:26 < purr> isaacbw: (number) 4
17:27 < phpnode> ugh this is so frustrating. i might just restart my worker threads when they reach these poor levels of performance, but i'd rather find a real solution. also it sucks that node-inspector is dead
17:28 <@isaacbw> phpnode: you might be holding on to handles without realizing it
17:28 <@isaacbw> and not letting the gc do its thing
17:28 < phpnode> how can i tell? and wouldn't that result in a growing heap? heap is never greater than 50mb per worker
17:29 < redhotsly> hi, can anyone recommend a module to use to store json docs in files. kinda like a doc database but using files. i will only use this for a few weeks. i don't need a real db yet.
17:31 <@isaacbw> redhotsly: just write to a file
17:31 <@isaacbw> you don't need a 3rd party module for that
17:31 <@isaacbw> phpnode: I've seen the 50mb number before. That's not a whole lot. Is it really enough to worry about?
17:32 < redhotsly> yeah, i know...but i was hoping i could find a lite wrapper for C-R-U-D per document
17:32 < phpnode> isaacbw: that's the thing though, 50mb heap is absolutely nothing, fine. but after 12hrs of uptime the RSS (not heap) grows to 450Mb+ and performance degrades a lot
17:35 <@isaacbw> oh, I see. I'll be honest, there may not be a whole lot you can do aside from tweaking the v8 flags (node --v8-options)
17:35 <@isaacbw> and/or offload your memory intensive options to a native module
17:35 < redhotsly> i'll write my own i guess...thanks.
17:36 <@isaacbw> redhotsly: I'm not sure what you would want it to do. C: write file. R: read file. U: overwrite file. D: delete file
17:36 <@isaacbw> a module that did that would be twenty lines
17:36 <@isaacbw> at most
17:37 < redhotsly> db.put("file.json", {a:1, b:2});
17:37 < redhotsly> var doc = db.get("file.json")
17:37 < redhotsly> var doc = db.delete("file.json", key)
17:37 < redhotsly> that kind of thing
17:38 <@isaacbw> ohh
17:38 <@isaacbw> sounds cool. Don't forget to publish it when you're done ;)
17:39 < redhotsly> i will
17:39 <@isaacbw> phpnode: I suspect you have pretty high peaks of heap use and v8 is holding on to that space
17:40 <@isaacbw> but what you're finding is that v8 wasn't really designed or optimized for large applications
17:41 <@isaacbw> phpnode: is there anything that you're doing that might result in high peak memory usage?
17:41 < phpnode> not other than constant 1000 concurrent requests from ab
17:42 < phpnode> i will take the rasmus lerdorf approach then. restart worker threads every N requests
18:01  * rhalff hm, ok, this is cool: pandoc -s -f markdown -t man README.md | man -l -
18:02 < Halite> >> Threae
18:02 < purr> Halite: ReferenceError: Threae is not defined
18:02 < Halite> >> Thread
18:02 < purr> Halite: ReferenceError: Thread is not defined
18:03 < Halite> how do I make the process sleep for half a second to wait for NickServ to identify the bot
18:04 < bmatusiak_> setTimeout(function(){ /*dostuff*/},500);
18:04 < bmatusiak_> Halite your creating a IRC bot?
18:04 < prx> does AppFog allow 'node-mysql'?
18:04 <@isaacbw> purr is sandboxed and doesn't allow you to do that
18:06 < boxmein> yus
18:06 < boxmein> Finally found the channel
18:12 < beeant-macbook> is createWriteStream a blocking function?
18:14 < foofoobar> Hi. So I want to test the socket.io example from http://socket.io. They also give an example for the web site which should require the socket.io.js. Where do I get this file from?
18:14 < phpnode> beeant-macbook: the actual createWriteStream() call is, yes
18:14 < foofoobar> "npm install socket.io" and then go into node_modules/socket.io/ and search there for the file?
18:14 < beeant-macbook> oh thats why sometimes it feels my app is kind of running slow
18:15 < beeant-macbook> is there any nonblocking function to write file?
18:15 < Aria> Yes. fs.write and fs.createWriteStream
18:15 <@isaacbw> foofoobar: https://github.com/LearnBoost/Socket.IO/wiki/How-do-I-serve-the-client
18:16 < phpnode> beeant-macbook: createWriteStream is unlikely to be the bottleneck
18:17 < beeant-macbook> oh
18:17 < phpnode> it blocks, but all functions in JS block. it's single threaded
18:17 < foofoobar> isaacbw, thank you
18:18 < lohkey> in general, don't optimize before you can measure
18:19 < beeant-macbook> ok
18:25 < beeant-macbook> is there any way/npm to profile node to find out which line on which file is the bottleneck?
18:28 < boutell> I'm experiencing some memory frustrations too. Code using the jquery npm module that keeps gaining in memory usage even though it should all be reclaimable as each document falls out of scope.
18:35 < Aria> Aye. Which Dom is that module using?
18:48 < mscdex> beeant-macbook: one method might be to use the v8 profiler to generate a log, then process that with one of the v8 tick processors
18:49 < mscdex> beeant-macbook: `node --prof foo.js`
18:49 < genazt> hunting for memory leaks ?
18:49 < phpnode> genazt: yes
18:49 < genazt> then gl :D
18:53 < beeant_> ok thank you
18:53 < beeant_> i will try that tomorrow
19:03 < AviMarcus> Hey. Is there any all-in-one framework for node.js? An easy to create GUI for users (e.g. create/sign-in via google) and then a framework + also create an API while making that? Something like derbyjs?
19:05 < AviMarcus> or meteor but that doesn't seem to play with nodejs/npm...
19:05 < dypsilon> AviMarcus, I think ember aims at that.
19:05 < dypsilon> also yes, meteor, but they are doing their own thing
19:05 < mscdex> AviMarcus: angular + bootstrap + express?
19:05 < gkatsev> meteor can use npm as of the 0.6 update, fwiw
19:06 < gkatsev> but derby is similar and fully open source
19:06 < AviMarcus> dypsilon, ember is just a client side thing
19:06 < dypsilon> AviMarcus, on the other hand you will probably be better off composing several npm modules and frontend frameworks.
19:06 < gkatsev> there's also towerjs
19:06 < dypsilon> gkatsev, afaik tower has stopped development
19:07 < gkatsev> as it?
19:07 < gkatsev> I guess it's possible. last update 2 months ago
19:07 < AviMarcus> mscdex, I have played with angular and express, but that seems to still leave a lot of glue left to the user... bootstrap is just the client side skinning isn't it?
19:08 < colinwren> AviMarcus sails is a nice mvc framework 
19:09 < dypsilon> AviMarcus, yeah, bootstrap is a css framework. Well there is also backbone or marionette.js
19:09 < AviMarcus> colinwren, I didn't know about that, thanks.
19:09 < dypsilon> so you could go with marionette + bootstrap + express
19:10 < AviMarcus> dypsilon, basically I'm looking for something "easier" rather than trying to glue everything together.
19:10 < AviMarcus> I created an API with restify and then used angular but I had to write a LOT of code for angular to do API calls and updates... hmm, maybe I just never got the $service controller working
19:11 < mscdex> AviMarcus: bootstrap helps with the client-side gui. from my own experience, having separate parts that do their one thing really good is much better
19:11 < colinwren> AviMarcus: sails is nice because it handles routing, orm and basic mvc stuff, the rest api maps perfectly to backbone so its really nice if your using backbone
19:11 < mscdex> AviMarcus: otherwise your project is at the mercy of one group of developers
19:11 < mscdex> AviMarcus: the whole project
19:12 < dypsilon> AviMarcus, the thing is, that the node community is more about building small modules and glueing them together, this is phylosophy, much like unix.
19:12 < AviMarcus> mscdex, hmm. So do you end up building your backend as a REST API and then create a gui that calls that?
19:12 < mscdex> AviMarcus: pretty much
19:12 < AviMarcus> dypsilon, that's a good point. Although there are a few rails-like clones, I forgot..
19:12 < dypsilon> AviMarcus, that's the idea, create a rest api and call it with your clientside app.
19:13 < mscdex> AviMarcus: i also have done some engine.io-based communication instead of regular REST requests, but yeah
19:13 < AviMarcus> brb
19:13 < dypsilon> AviMarcus, also I can't recommend hapi enough (for your servserside logic=
19:15 < r1card> What's the situation in Node.JS regarding ordered dictionaries/maps.
19:15 < NoFaTe> >> 'does this still work?'
19:15 < purr> NoFaTe: (string) 'does this still work?'
19:15 < NoFaTe> :3
19:16 < dypsilon> what's an ordered map in node.js?
19:16 < gkatsev> r1card: you'll need to keep your order via an array of keys. Objects in javascript are not ordered, or at least, you shouldn't rely on their order.
19:16 < r1card> dypsilon, I don't know. Is it a ... thing.
19:16 < NoFaTe> gkatsev, +1
19:17 < r1card> dypsilon, I guess there's nothing ready-made then
19:17 < gkatsev> there may be libs.
19:17 < dypsilon> +1
19:17 < NoFaTe> -5
19:17 < NoFaTe> no wait.
19:18 < dypsilon> has nothing to do with node.js per se, it's javascript
19:19 < AviMarcus> OK back. dypsilon hapi is based on express/connect and just makes some plugins like passport easier to use?
19:19 < NoFaTe> r1card, you can create your own little wrapper using an object and an array of keys and then using indexOf to retain order when querying for a specific key
19:19 < r1card> NoFaTe, dypsilon, thanks
19:19 < NoFaTe> cheers
19:19 < dypsilon> r1card, you are welcome
19:19 < dypsilon> AviMarcus, no, hapi is a standalone framework.
19:19 < dypsilon> developed by walmarr
19:20 < dypsilon> walmart
19:20 < dypsilon> and by Eran Hammer
19:20 < dypsilon> with awesome support
19:20 < AviMarcus> OK but it doesn't do the client side at all right? so you'd use angular + bootstrap + hapi or something?
19:20 < dypsilon> AviMarcus, exactly
19:25 < AviMarcus> that was a pretty sad video introducing hapi, it didn't really show anything beyond express.
19:27 < flying_turtle> what logging framework does socket.io uses? Colored output is pretty neat
19:27 < dypsilon> AviMarcus, it's a getting started, watch the video where Eran introduces hapi to paypal
19:28 < dypsilon> AviMarcus, http://youtu.be/Recv7vR8ZlA
19:28 < AviMarcus> k, got it. mmm 50 min.
19:28 < dypsilon> it's worth watching even if you are not planning on using hapi
19:28 < dypsilon> has lots of node.js insight
19:29 < sauron> Hey I need help quick, my Node.js socket server stops reading from clients after about 2 hours
19:29 < sauron> I'm using the 'net' module 
19:30 < NoFaTe> r1card, here's a small snippet I hacked together real quick
19:30 < NoFaTe> https://gist.github.com/OrfeasZ/6880c3cf777e8e9cb24c
19:30 < NoFaTe> it's not tested but yeah
19:30 < NoFaTe> also, a small note, indexOf is not always faster than iterating through the array
19:31 < sauron> any help?
19:32 < NoFaTe> sauron, set a timeout
19:32 < NoFaTe> on the connected event
19:32 < sauron> Example?
19:33 < sauron> i have this: stream.setTimeout(0);
19:34 < NoFaTe> net.createServer(function(socket) { socket.setTimeout(7200000); }, blah blah);
19:34 < NoFaTe> sauron, ^
19:34 < sauron> thkx
19:35 < sauron> I'm not the best at node, what does that exactly do?
19:35 < NoFaTe> creates a server (but doesn't start it)
19:35 < NoFaTe> and whenever a client connects
19:35 < NoFaTe> that function gets called
19:35 < NoFaTe> with the client socket as the first param
19:36 < NoFaTe> .setTimeout on the socket makes it timeout after x milliseconds of inactivity
19:36 < NoFaTe> (that is if no packets are sent/receieved)
19:36 < sauron> Ok, so that will stop the server from dropping? 
19:36 < sauron> because i had no timeouts on client sockets before
19:37 < NoFaTe> sauron, huh?
19:37 < r1card> NoFaTe, thanks, checking :)
19:37 < cxreg> what is this githead_ junk in npm
19:37 < cxreg> it's broken, anyway.  it fails on packed refs
19:37 < r1card> Is there a standard name for this structure: a list of maps, where each map has the same keys as the other maps
19:38 < cxreg> it's in read-package-json
19:38 < NoFaTe> r1card, a table? :P
19:38 < NoFaTe> dunno]
19:38 < RobW_> Is there a way to watch for a specific file being created? fs.watch/listen for file changes, but creation?
19:39 < NoFaTe> RobW_, you can also watch a directory for changes with .watch
19:39 < NoFaTe> iirc
19:39 < RobW_> NoFaTe: Good call. Thanks.
19:40 < NoFaTe> RobW_, however, there is a catch
19:40 < RobW_> Do tell.
19:40 < NoFaTe> if the 'new' file is being streamed (eg. uploaded via FTP)
19:40 < NoFaTe> you won't be able to tell when it's complete
19:40 < NoFaTe> without hax
19:40 < NoFaTe> lol
19:41 < RobW_> Not applicable to me, so no worries. Thanks for the heads up though.
19:42 < NoFaTe> :)
19:42 < foofoobar> Why is socket.io not loaded correctly here: https://gist.github.com/anonymous/ca744a56a559525c7b56 ?
19:42 < AviMarcus> all the frameworks are so cool :S sails, meteor..
19:42 < foofoobar> I get:    info  - socket.io started; warn  - error raised: Error: listen EACCES
19:43 < foofoobar> also the /socket.io/socket.io.js can not be loaded from the browser
19:43 < aandy> which port are you trying to listen on? < 1024 ?
19:43 < prx> Does node have crashlogs?
19:43 < NoFaTe> foofoobar, maybe that port is being used by another app
19:44 < NoFaTe> check using netstat
19:44 < itsrachelfish> Is there any way to use socket.write() outside of a net.createserver() function?
19:44 < aandy> or < 1024 and in need of elevated rights 
19:44 < foofoobar> NoFaTe, I did, its not
19:44 < foofoobar> the server works without the socket.io stuff
19:44 < NoFaTe> aandy, he uses 8080
19:45 < foofoobar> but I guess the socket.io binding to the createServer did not wok correct
19:45 < aandy> are you telling both http.createServer and socket.io to listen on that port? iirc you need to tell socket.io to "listen" on the app, so it doesn't try to double bind
19:45 < aandy> well
19:45 < aandy> ok
19:45 < aandy> :p
19:46 < foofoobar> aandy, I tried this on line 4 with var io = require('socket.io').listen(server);
19:50 < foofoobar> any other ideas?
19:51 < NoFaTe> sorry, I can't really help you
19:51 < aandy> maybe move var io = ... to after you make var server
19:51 < NoFaTe> I'm not familiar with socket.io
19:52 < aandy> if .listen doesn't block
19:53 < foofoobar> aandy, this works. why?
19:53 < aandy> http://javascriptweblog.wordpress.com/ wrote a good post on it a while back, i can't remember the details
19:54 < aandy> you're basically using a variable before it has a value, but does exist
19:54 < aandy> as in, you probably run it with the value of undefined (or null), before it's set on line 10
19:55 < aandy> foofoobar: hoisting was the word. http://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/
19:56 < foofoobar> aandy, yeah, but why does that work in the socket.io example shown here: http://socket.io/#how-to-use
19:56 < foofoobar> ah the createServer is called before
19:56 < aandy> app is defined first
19:57 < AviMarcus> ah guys thanks for all your pointers so far!
20:02 < dypsilon> you are welcome
20:09 < frk131> can sombody explain me why makeWeak is called by the wrap function http://fossies.org/dox/node-v0.10.5/node__object__wrap_8h_source.html#l00074 ? i dont understand why making an object weak if it's just created
20:15 < sauron> Hello I'm still experiencing the problem where the Node.js server stops being able to read data from clients after about an hour or so. I added a timeout but still no resolve...
20:16 < sauron> I'm using the net module for the socket
20:51 < mtbNnTpV> Hi, can anyone help me with node-ffi callbacks, please? See https://gist.github.com/anonymous/5564871
21:15 < Matteo> hi
21:17 < wumbei> hi
21:35 < oblio> so im trying to figure out some standard architecture examples for implementing node.js
21:35 < oblio> say for a larger project
21:35 < oblio> i feel like building a standard web interface doesnt really make sense, i'm working on an API and need to store some profile data, interactions, et cetera
21:35 < boutell> Has anyone else had issues with node-http-proxy in node 0.10.x? We were great with it until 0.10.x, now certain types of ajax requests cause it to time out, crash and restart. Of course we should narrow it down and submit a bug report when we can, I'm just wondering if we're the only ones.
21:36 < boutell> in the meantime we are currently using nginx as our reverse proxy.
21:38 < boutell> oblio: not sure if it's the same question exactly, but we've wondered about that too - most node documentation tends to assume you're building a small app rather than a large website with a lot of modules. I wrote up some of our strategies here: http://justjs.com/posts/creating-reusable-express-modules-with-their-own-routes-views-and-static-assets
21:38 < garthk> I'm trying to make stream processing go a little faster. Anyone tried unzipping and XML parsing in a child process?
21:39 < garthk> Huh. It's 80MB of XML. Might be fine to just send it in a single message, with none of the streaming mess.
21:40 < boutell> 80MB of XML ow
21:40 < boutell> not one of my favorite things ever LOL
21:56 < leostera> anyone has successfully used Jitsu with Haibu ?
22:01 < flockonus> I've been trying to create a trivial benchmark CPU intensive on floats, and compare Node single process x the cluster, was expecting the cluster to perform times better than the single one, but it only seems to be about ~20%. I can see multiple node processes ivia the monitor, but only one is at 100% CPU, the other seem slacking.. without looking at the code, does it make sense?
22:03 < flockonus> I am using a patterned that the workers ask the master for jobs, a-la-Unicorn, and that seems working, but doesn't reflect in numbers
22:06 < shanse> the jobs may be too small for any noticeable speedup
22:08 < flockonus> @shanse valid point, I will try tweaking that
22:13 < flockonus> @shanse increase the duration of each task by 10x, still didn't even move http://i.imgur.com/h4DRDd4.png node 0.10.5
22:17 < flockonus> the code https://github.com/flockonus/parallel-benchmark
22:23 < JohnMcLear> Is app.js dead or something?
22:23 < JohnMcLear> What are people using instead for building node stuff on the desktop out of css/js
22:23 < JohnMcLear> D:\rung\assets\www\node_modules\appjs\lib\bindings.js:9
22:23 < JohnMcLear>   throw new Error("AppJS requires Node.js v0.8");
22:23 < JohnMcLear>         ^
22:24 < mtbNnTpV> JohnMcLear, the author is somewhat working on version 1.0, but I wouldn't count on it. Try node-webkit instead
22:24 < JohnMcLear> ta
22:24 < JohnMcLear> mtbNnTpV exactly what I wanted to know btw, thanks :)
22:24 < mtbNnTpV> JohnMcLear, you're welcome
22:53 < Havvy> https://npmjs.org/doc/test.html is missing some useful information.
22:53 < Havvy> Mainly, how to designate a command or script as the thing to do when doing npm test.
22:57 < xangelo> question: I have a little app written in node that just pops stuff off a stack and does some processing before pushing the output into an rdbms
22:58 < xangelo> how can I profile the app so I can get stats on how quickly it is processing the stack, and memory + cpu utilization?
23:05 <@isaacbw> Havvy: https://npmjs.org/doc/scripts.html
23:24 < NoFaTe> pure js outperforming C bindings yet again!
23:24 < NoFaTe> yay!
23:25 < rhalff> NoFaTe, no idea what purejs is, but anyway, I support you \:D/
23:25 < ningu> um, it means js without C bindings :P
23:25 < NoFaTe> rhalff, as in writing something entirely in js instead of using C bindings
23:26 < JohnMcLear> Doesn't node use C bindings?
23:26 < NoFaTe> http://img.pointlimit.com/fl0v6pjm2f37qn.png
23:26 < NoFaTe> left bump is my library written in pure js, right is official library using C bindings
23:26 < NoFaTe> 50k requests
23:26 < NoFaTe> and 100 simulated users
23:27 < NoFaTe> on couchbase
23:27 < NoFaTe> :3
23:27 < NoFaTe> I guess the difference is quite obvious
23:27 < NoFaTe> ;)
23:29 < rhalff> NoFaTe, or maybe you kicked out all your users and 90% thought it was time to go to bed :-)
23:29 < NoFaTe> rhalff, test on a local box :P
23:29 < rhalff> NoFaTe, ah... :-)
23:30 < NoFaTe> I don't test on live envs
23:30 < NoFaTe> bad bad bad
23:30 < NoFaTe> well, I do when I'm pissed
23:30 < NoFaTe> :P
23:30 < NoFaTe> but not this kind of stuff
23:33 < mscdex> who is General Bucket?
23:33 < ningu> he's the superior officer of Colonel Sanders
23:33 < Zolmeister> test
23:34 < mscdex> ningu: so General Bucket wouldn't be afraid to go ludicrous speed?
23:36 < ningu> not sure he's in shape for it after all the fried chicken
23:37 < ningu> so here's a random question... if I want a $300 or less laptop that (1) runs windows, (2) does not have very limited storage, (3) lasts 6+ hours, what would be a good choice?
23:38 < ningu> I used a netbook in the past but my netbook is pretty much on its last legs.
23:38 <@isaacbw> good luck
23:38 < ningu> hehe
23:38 < ningu> the asus 1015E looks reasonable
23:39 < NoFaTe> isaacbw is Isaac Newton! :o
23:39 < NoFaTe> and Nexxy is his loyal servant!
23:40 <@isaacbw> lol no
23:41 < Zolmeister> any suggestions for an ultrabook (linux) ?
23:41 <@isaacbw> Nexxy bows to no man (or woman)
23:42 <@isaacbw> and I'm not isaac/s
23:42 <@isaacbw> if that's what you thought
23:44 < Sembiance> Zolmeister: I just finished building my linux laptop a few months ago
23:45 < Zolmeister> Sembiance: what was it?
23:45 < Sembiance> Zolmeister: ended up going with this one http://www.amazon.com/dp/B009PHUUY0/
23:46 < Sembiance> Zolmeister: It has two SSD drives in it, so I put Windows 7 on one of them and Gentoo Linux on the other. Dual boot :)
23:46 < Zolmeister> thnx, i'll look into it
23:46 < NoFaTe> isaacbw, wat
23:47 < Sembiance> Zolmeister: was able to get everything working under linux. LAN, wireless, keyboard function keys (adjusting brightness, etc. etc.)  Even got the dual graphics cards working so it only uses the GeForce GT 650M card when I want the power from it
23:47 < NoFaTe> isaacbw, why do you disrespect my randomness like that? :(
23:48 < NoFaTe> Sembiance, holy crap that's expensive
23:49 < Sembiance> NoFaTe: yah, it was. I wanted one that was both sexy and powerful enough for windows games and linux dev.
23:50 < NoFaTe> Sembiance, I would just upgrade my pc :p
23:50 < NoFaTe> laptops are overrated anyway
23:50 < Sembiance> NoFaTe: well, my PC already does just fine, but my wife and I will be travelling for a few months and hard to take a huge desktop tower with you ;)
23:50 < NoFaTe> Sembiance, oh well
23:51 < NoFaTe> speaking of which I should probably get a new GPU
23:51 < NoFaTe> I'm stuck with a GTX 460
23:51 < s5fs> Sembiance: you using bumblebee for the gpu?
23:51 < Sembiance> my new HTML5 multiplayer web game (powered by node on the back end) is starting to get popular, I'm quite excited! :)
23:51 < NoFaTe> which apparently is the 'worst' part of my current build
23:51 < Sembiance> s5fs: yup. wasn't as painful to do as I thought it would be :)
23:51 < NoFaTe> Sembiance, what game?
23:52 < Sembiance> NoFaTe: http://worldofcardgames.com
23:52 < s5fs> Sembiance: same. i'm on an xps 15 but stuff still isn't working, but bumblebee was fine. crazy world.
23:52 < NoFaTe> Sembiance, naic
23:53 < Sembiance> NoFaTe: naic?
23:53 < NoFaTe> as in nice
23:53 < Sembiance> ahhhh :)
23:53 < NoFaTe> websocks?
23:53 < Sembiance> it's just card games, so not the most exciting or creative game in the world ;)
23:53 < Sembiance> yah. it uses sockjs (used to use socket.io)
23:53 < NoFaTe> mm
23:56 < s5fs> Sembiance: neat card game, i played 'go fish'
23:57 < Sembiance> s5fs: :)
23:57 < NoFaTe> I started playing the top left
23:57 < NoFaTe> but then I realized I suck
23:57 < NoFaTe> so I quit
23:57 < NoFaTe> :P
23:58 <@Nexxy> NoFaTe, isaacbw is correct 
23:59 < NoFaTe> :o
23:59 <@Nexxy> I bow to no person regardless of gender
--- Log closed Mon May 13 00:00:15 2013
