--- Log opened Tue Mar 26 00:00:23 2013
00:02 < ningu> deepy: well yeah you need the pg driver regardless
00:02 < ningu> that's not really a node issue
00:02 < ningu> you need pg installed with its header files, a compiler, etc.
00:02 < deepy> I have postgres installed with its header files, a compiler, etc
00:02 < deepy> it's just that the only way to speak with them seems to be to write my own driver
00:03 < ningu> deepy: um, no
00:03 < ningu> if it isn't building the driver there is something wrong with your setup
00:03 < ningu> and you aren't really providing any information
00:03 < deepy> um, no. It's using components not available on BSD
00:03 < ningu> I use it on OS X which is based on bsd, as well as on linux.
00:04 < deepy> There's no flock binary
00:04 < RLa> which BSD it is?
00:04 < deepy> NetBSD
00:04 < RLa> ningu, and you have flock binary?
00:05 < deepy> OS X may be based on BSD, but it's far away from the modern BSDs
00:05 < ningu> RLa: no. there seems to be an emulation layer for OS X to emulate flock
00:05 < ningu> I never paid attention since it just built fine
00:06 < RLa> deepy, maybe you can file an issue to build without flock command
00:06 < RLa> i can't even imagine why building process need it
00:06 < ningu> there is definitely a flock(1) on NetBSD according to google
00:07 < jayk> deepy: should be in /usr/bin
00:07 < deepy> ls: /usr/bin/flock: No such file or directory
00:08 < jayk> that's bizarre:  http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/usr.bin/flock/flock.c
00:08 < ningu> deepy: http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/usr.bin/flock/flock.c
00:08 < ningu> haha
00:08 < jayk> ningu++
00:08 < jayk> :-D
00:08 < deepy> That's NetBSD 7
00:09 < ningu> and?
00:09 < deepy> It hasn't been released yet
00:09 < jayk> grab the source and compile it?
00:10 < deepy> http://dpaste.org/EkhCn/
00:10 < deepy> I don't know C
00:10 < jayk> http://ftp.netbsd.org/pub/NetBSD/NetBSD-current/src/usr.bin/flock/
00:10 < ningu> you don't have to know C to compile a program
00:11 < mscdex> omgcc
00:11 < jayk> grab the 3 or 4 files, and run make.
00:11 < ningu> anyway, I don't mean to be insensitive but I'd recommend using a more mainstream distro if you don't know how to compile things yourself
00:11 < ningu> but yes that should work too :)
00:11 < ningu> it looks to be a thin wrapper around flock(2)
00:11 < jayk> ningu: it is.  Just a 'don't do this until you can get a lock'
00:12 < deepy> I'm well aware of how to compile things, I just don't know enough C to troubleshoot the cryptic messages I'm given here
00:12 < ningu> deepy: actually
00:12 < jayk> there's probably a way to emulate it in a shell script.
00:12 < ningu> in the gyp makefile it says:
00:12 < ningu> # Note: flock is used to seralize linking. Linking is a memory-intensive
00:12 < ningu> # process so running parallel links can often lead to thrashing.  To disable
00:12 < ningu> # the serialization, override LINK via an envrionment variable as follows:
00:12 < ningu> sorry for the 3 lines but I figured that was just under the too-much-to-paste limit :)
00:12 < ningu> oh, final line: #   export LINK=g++
00:13 < jayk> do what ningu said.  it will make your day. :-D
00:14 < deepy> I'm expecting a segfault somewhere along the line
00:14 < ningu> seems kind of silly, it's a small driver
00:14 < ningu> not much to link
00:14 < jayk> ningu: probably some autolink or autoconf thing left in.
00:14 < ningu> maybe it's just the node-gyp default
00:15 <@TooTallNate> ningu: it's the gyp default actually
00:15 < ningu> ah ok
00:15 < ningu> maybe it should detect whether flock is available and turn that off if not?
00:15 <@TooTallNate> ningu: gyp was designed in mind for building really big projects
00:15 <@TooTallNate> like Chromium
00:15 <@TooTallNate> so linking large projects isn't so uncommon
00:15 < ningu> at least for node-gyp where large projects are not common
00:16 <@TooTallNate> ningu: ya maybeâ€¦ patch welcome :D
00:16 < ningu> TooTallNate: I don't care enough :P
00:16 <@TooTallNate> welcome to the club :p
00:16 <@TooTallNate> flock isn't even used on OSX by default
00:16 <@TooTallNate> it's only on linux afaik
00:16 < ningu> I've basically never had an issue with gyp which to me suggests there isn't much to complain about
00:17 < ningu> no, there's a python script that emulates flock on OS X
00:17 <@TooTallNate> ningu: right, right
00:17 < asd> hi
00:18 < Guest57899> ??
00:18 < jayk> hello.
00:18 < Guest57899> hi
00:20 < ningu> wtf? "Georgia's Senate passed a resolution by a vote of 48-2 Monday that would "correct" a portion of the state's northern border in order to claim valuable water rights from the Tennessee river."
00:21 < faceleg|work> lol
00:21 < faceleg|work> 'mucia cracks me up
00:21 < faceleg|work> murcia
00:22 < ningu> faceleg|work: hey... in france today there were mass demonstrations against legalization of gay marriage
00:22 < faceleg|work> WTF!
00:22 < faceleg|work> France of all countries
00:22 < ningu> I know
00:23 < ningu> http://talkingpointsmemo.com/news/anti-gay-marriage-protest-turns-violent-in-paris.php
00:23 < faceleg|work> i just
00:23 < faceleg|work> I just
00:23 < bnoordhuis> it's to protect those poor gay people
00:23 < deepy> pg connection seems to be working to some extent, but my db now lacks enough data to see if it works properly. I'll probably be back (in a less foul mood) tomorrow. Thanks for the help!
00:23 < bnoordhuis> they don't know what they're getting into
00:23 < ningu> deepy: np
00:23 < faceleg|work> I find it unbelievable that people feel they have the right to have an opinion on something that has such little affect on them
00:23 < faceleg|work> but is a huge deal to the subject
00:23 < ningu> faceleg|work: but it's the institution of marriage, on which our civilization is founded
00:24 < faceleg|work> bnoordhuis: lol!
00:24 < faceleg|work> ningu: I thought it was founded on steel/gunpowder
00:24 < faceleg|work> the british royalty didnt' seem so concerned about the 'sanctity' of marriage
00:24 < ningu> I suppose there can be more than one pillar of civilization
00:24 < faceleg|work> so long as the pope said it was ok
00:25 < othiym23> so isaacs, what you're saying is that CommonJS is basically awesome but it just needs a little refinement from a standards body?
00:33 < jamiep> 'noon all. Anyone know where the `includes` folder went for 0.10 via 'make install' on node.js source?
00:35 < mscdex> jamiep: in $prefix/include ?
00:38 < jamiep> mscdex: there's only bin, lib, share. I normally generate a custom nodejs-dev.deb from that include folder
00:42 < mscdex> you don't use checkinstall ?
00:42 < MI6> joyent/node: Manav Rathi master * d205761 : tls: expose SSL_CTX_set_timeout via tls.createServer  Add the `sessionTim - http://git.io/cZk5Gw
00:44 < jamiep> mscdex: similar, FPM: https://github.com/jordansissel/fpm
00:52 < JoeAndrieu_> I'm running into a problem loading a module (serialport). It works fine on my dev box, but when I run on my embedded device (which is using an NFS mount to access the exact same files), I get a "cannot open shared object file: No such file or directory" I've played with the permissions, but that didn't change anything. The error lists the file path and the file *is* there. Any suggestions for tracking this down?
00:53 < tjfontaine> JoeAndrieu_: you're using the binary compiled from your devbox on your embedded device?
00:54 < JoeAndrieu_> tjfontaine: Ah. That's almost certainly the problem. I didn't even think about that. We cross compiled node. How do I do that for modules?
00:55 < tjfontaine> JoeAndrieu_: you'd need to talk to TooTallNate about that, he may even have a tutorial about it, the best way of course is to compile it on the device :)
00:57 < JoeAndrieu_> tjfontaine: cool. I'll try and figure that out. Thanks for pointing out the mistake.
00:58 < tjfontaine> JoeAndrieu_: no problem
01:08 < cramrod> Help!  I've just gotten started with node and I have a few conceptual questions about how its best used.  I would love it if someone with interested in giving their opinion would PM me.  Thanks.
01:08 < cramrod> whos*
01:13 < CookieNomster> That... is a lot of names. Quite a bit more than last time I was here. :)
01:16 < CookieNomster> For anyone who's interested: I just published a module that removes modules from the require cache.
01:16 < CookieNomster> https://github.com/PPvG/node-needless
01:16 < CookieNomster> I know it's hackish, but I also know people do this anyway.
01:16 < CookieNomster> So I was surprised to find that there was no module for it.
01:27 <@mbalho> CookieNomster: how does the require cache work?
01:30 < JamesMGreene> If I create a new WritableStream with `fs.createWritableStream` and leave the `encoding` option as `null`, will it allow me to write binary data or will it default to 'utf-8' encoding? I'm unclear from the documentation.
01:30 < ningu> JamesMGreene: I'm pretty sure it defaults to binary
01:31 < ningu> null encoding means binary
01:32 < ningu> JamesMGreene: anyway you can specify it when you call write() anyway
01:32 < JamesMGreene> I want it to be binary, so I'll be writing Buffers
01:32 < ningu> writable.write: encoding String Optional. If chunk is a string, then encoding defaults to 'utf8'
01:33 < JamesMGreene> I just wanted to ensure it wasn't trying to write the Buffer as some encoding that I didn't want
01:33 < ningu> sounds like binary is the default then
01:33 < ningu> if it's a Buffer
01:33 < JamesMGreene> Right, just Buffers, so I should be OK
01:33 < JamesMGreene> Thanks again!
01:39 < Matt_in_Chicago> Do me a solid and vote for our startup, made in DRUPAL 7 :D http://startup50.com/40-social-media-startups#comments
01:39 < ningu> Matt_in_Chicago: and why would we care, being node folks?
01:39 < ningu> hehe
01:41 < _br_> How much sense would it be to use node for a tinyurl service taking massive scalability into consideration? What tech stack would you choose for this ? Node ? Something else?
01:41 < samholmes> Oh hey! I was on here asking why doesn't Core use promises, before. I just thought, why doesn't Core use Events; I mean, they're already implemented, so why not use them instead of callbacks?
01:42 < samholmes> Nah, that's dumb, nvm
01:43 < TehShrike> _br_: probably a reasonable amount of sense
01:44 < fayimora> hey guys, I'm looking for sample or open source node projectsâ€¦any suggestions??
01:44 < fayimora> doesn't have to be web related
01:44 < fayimora> anything interesting
01:45 < lovemuffin> what do you mean? there are tons to look at @ npmjs.org
01:45 < _br_> TehShrike: Interesting, probably the database is more important I guess
01:47 < TehShrike> fayimora: nodezoo.com is handy
01:48 < lovemuffin> i think its hard to go wrong using anything to make a tiny url like service
01:48 < lovemuffin> its pretty straight forward, i think the interesting bits is how to build tools around it
01:51 < _br_> lovemuffin: sounds about right, pity that there is no info on what bit.ly or tinyurl.com uses for their stack
01:53 < lovemuffin> why? it doesnt matter anyway unless you want to build exactly the same thing or something, which doesn't seem like the right approach
01:53 < lovemuffin> but bitly uses that language with the tabs :p
01:55 < lovemuffin> and go apparently, and mysql
01:55 < _br_> lovemuffin: true, its not about copying them its more about learning from mistakes 
01:55 < lovemuffin> and mongo apparently too
01:56 < lovemuffin> https://github.com/bitly and look at their job postings
01:56 < _br_> lovemuffin: awesome idea, thanks! :)
02:22 < mscdex> any streams2 gurus here? why is there no callback option for .read(), like `rs.read(512, function() {});` ?
02:23 < jayk> mscdex: I don't know if I'd call myself a guruâ€¦ but I've used it a lot.
02:25 < jayk> mscdex: because in streams2 read is non-blocking.  meaning it has data for you returns it immediately, or it doesn't, and gives you null.
02:25 < jayk> *if it has
02:27 < jayk> When it has data again, it will emit the 'readable' eventâ€¦ at which point you can call read() again.
02:27 < jayk> does that help?
02:31 < mscdex> jayk: but if it doesn't have the requested number of bytes available you have to listen for 'readable'
02:31 < jayk> Yes.
02:31 < jayk> If you need a particular number of bytes and you specify it.
02:32 < mscdex> it just seems awkward to me
02:32 < jayk> it will return null if it doesn't have it, and you have to listen for readable.
02:33 < mscdex> i'd rather have it just call my callback immediately if the bytes are there.
02:33 < mscdex> much easier interface imho
02:33 < ningu> mscdex: then use the old mode
02:33 < ningu> both work
02:33 < mscdex> ningu: i'd rather not have to worry about the buffering
02:33 < mscdex> and all that
02:33 < jayk> then don't.
02:33 < mscdex> it cleans up userland code
02:34  * jayk set a readable listener... and read when you get it.
02:34 < jayk> are you waiting for a certain amount of data?
02:35 < mscdex> i'm thinking about protocol parsers where you have "steps" where you require different amounts of bytes at different stages
02:35 < duko> exit
02:35 < mscdex> so that means i have to do some kind of weird state stuff in a single 'readable' event handerl
02:36 < jayk> well, you have to anyway... because there is no guarantee you'll get exactly the number of bytes you want in either mode.
02:37 < jayk> so either you read(256) and get it, or you wait for readable, and try again.
02:37 < mscdex> e.g. `rs.on('readable', function() { /* ok, where am i at in reading my packets? */ }); rs.read(128); /* etc */` vs `rs.read(128, function(b) { /* logic */ rs.read(64, function(b2) {}); });`
02:37 < mscdex> the latter is better imho
02:38 < mscdex> the logic flow is easier to follow
02:39 < jayk> mmm.  I dunno.  Before it was 'rs.on('data', function(some_unknown_amount_of_data) { ... });
02:39 < mscdex> right
02:40 < jayk> Now you can actually say 'I need this much data to proceed' and you know immediately if you have it.
02:40 < mscdex> and you had to handle buffering in userland
02:41 < mscdex> with `rs.read(n, cb);` you could still get the bytes immediately or later on when they are available with a single way to know
02:41 < mscdex> vs checking a return value _and_ an event
02:42 < mscdex> i guess i could implement my own readable stream class on top of this...
02:42 < jayk> that'd be trivial to implement with an event handler.
02:42 < mscdex> that behaves this way
02:44 < jayk> yeah.  stream.waitfor(256, callback(data) { .... } );  where waitfor does a 'try to read x bytes, if so call callback immediately, if not stream.once('readable', function() { stream.waitfor(size, callback) });
02:45 < jayk> or some such.
02:46 < jayk> Another option is to implement as a transform that takes a raw stream as input and gives parsed data as output.
02:46 < jayk> It takes a bit to get your head around the streams2 interface, but once you do, holy cow. :-)
02:47 < mscdex> you still have to buffer with transform streams if you're doing protocol parsing
02:47 < mscdex> may as well use old streams
02:48 < jayk> See above.  the waitfor thing I describe would do what you want in 10 lines of code or less.
02:49 < mscdex> stream.once sounds painful, better to just keep a listener around
02:50 < wleong> hi, i have a newbie question on installation of express.  can someone help?
02:52 < jayk> well, with streams2 if you use waitfor each time, it gives you your data.  lets you do the outline thing you were describing with the nesting.
02:53 < jayk> ie - no need to worry about once... because streams2 handles the buffering for you.
02:53 < ChrisPartridge> wleong: just ask, someone might be able to
02:56 < wleong> i installed express on Mac OS via su npm install -g express.  however, when i tried to run express, it throws an exception saying it can't find the express module.  what did i do wrong?
02:57 < ningu> wleong: the global version of express is just a command line helper to create a new project
02:57 < jayk> mscdex: does your protocol vary in length from 'section' to section?  If not, I'd wait for all of it and parse it in a chunk... the code will be much more straightforward?
02:57 < ningu> once you've run express foo to create the foo project, you need to cd into foo and run: npm install
02:57 < ningu> that will install all the modules declared as dependencies in packaje.json (which it creates for you)
02:57 < ningu> package.json, even
02:57 < wleong> oh, ok.  thanks ningu.
02:58 < ningu> wleong: generally each node app has its own node_modules dir, they aren't installed globally
02:58 < mscdex> jayk: i was speaking in general and yes, there are protocols like that
02:59 < wleong> ningu: that did it.
02:59 < jayk> ah.  I thought you were trying to solve a particular problem.  
03:01 < jayk> I've used streams2 extensively... and ported from the original streams interface.  Streams2 reduced what it took to handle the same protocols / data streams significantly.  
03:02 < jayk> so I'm very pleased with it.  The old way was much clunkier.  I appreciate that stream2 handles all the buffering for you, if you let it.
03:02 < ningu> put that in your pipe and buffer it!
03:02 < jayk> hahaha
03:06 < jayk> Though I have to say, it did bend my brain a bit to transition at first.
03:13 < JamesMGreene> Is there any good patterns with Streams (as of Node 0.8.x) for reading from and writing to the same file? Or do you need to complete the read before you can begin the write?
03:13 < JamesMGreene> Are there*
03:14 < Auger> i'm using my friends web hosting and he will not allow SSH. Is there any other way to start my node server?
03:19 < SomeoneWeird> Auger, you probably won't have node if it's just web hosting
03:20 < Auger> ah so i have to install node on the host box eh
03:20 < Auger> i have it installed locally
03:20 < Auger> i was also wondering that
03:20 < Auger> but alas, i am total newb
03:20 < Auger> thank you
03:20 <@Nexxy> Auger, nodejitsu has $3/mo hosting w/ 30 day trial
03:20 < Auger> oh cool, thanks for the heads up
03:21 < Auger> thanks guys
03:21 < Auger> nodejitsu it is !
03:21 < Auger>  /excited
03:29 < baranaby> hey all, I'm using Jasmine-node for my unit testing, but I'm not clear on what folks are using for integration tests, especially with no browser involved. I'm trying to test my nodejs code is talking to my database correctly. Having trouble find ideas from Google though; anyone had similar needs? :)
03:31 < gkatsev> anyone know of any modules that interact with google chrome's remote debugging protocol?
03:34 < lovemuffin> baranaby: you'd probably want to mock the database stuff
03:36 < Noize> Hello, could someone help me update my nodejs, it will not update via apt
03:37 < Noize> i updated repo, and added it
03:37 < Noize> still won't update to current version
03:38 < ChrisPartridge> Noize: is the latest version in the repos your apt is using? (it probably isn't)
03:38 < Noize> i added the ppa, shouldn't that update it?
03:38 < baranaby> lovemuffin: well that's generally what I do most of the time, but this code is specifically a database interface for some libraries, so I really do sort of want to validate it. :)
03:39 < lovemuffin> oh i see
03:39 < Noize> I'm on Ubuntu 13.04, nodejs version: v0.10.0
03:39 < baranaby> lovemuffin: everything I'm googling around for is basically browser-centric "oh you want to integration test some nodejs code?! well here try using cucumber or selenium or zombie wooooooo!!" ahem
03:40 < JamesMGreene> Are there any good patterns with Streams (as of Node 0.8.x) for reading from and writing to the same file? Or do you need to complete the read before you can begin the write?
03:40 < ChrisPartridge> Noize: and what version are you expecting?
03:40 < Noize> v0.10.1
03:40 < Noize> fixes an error
03:40 < lovemuffin> baranaby: really? i mean you just write your tests
03:42 < baranaby> lovemuffin: yeah writing the tests isn't the curious piece, it's more ensuring the database is running, ensuring it gets cleaned between tests, etc. was hoping there were some js projects along those lines, much like Cucumber in Ruby/Rails can handle those compoents
03:44 < baranaby> I'll keep noodling though, thanks lovemuffin :)
03:44 < lovemuffin> baranaby: generally its just setup in before, beforeeach
03:44 < ChrisPartridge> Noize: strange, what version does apt-cache show nodejs display?
03:45 < lovemuffin> baranaby: maybe you'll have better idea using mocha http://visionmedia.github.com/mocha/
03:45 < Noize> ChrisPartridge, how would i see this?
03:46 < ChrisPartridge> type "apt-cache show nodejs"
03:46 < lovemuffin> baranaby: for instance start the db in before, and clean it with beforeEach
03:46 < leichtgewicht> Hello!
03:46 < JamesMGreene> isaacs mbalho Nexxy ryah Are there any good patterns with Streams (as of Node 0.8.x) for reading from and writing to the same file? Or do you need to complete the read before you can begin the write?
03:47 < leichtgewicht> I just managed to not-succeed at installing grunt. It failed with a horrible error message: Error extracting archive { [Error: ENOENT, open '/myproject/node_modules/grunt-contrib/node_modules/grunt-contrib-jasmine/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/tmp/phantomjs-1.7.0-macosx.zip'] 
03:47 < garthk> JamesMGreene: just get two descriptors open on the same file.
03:47 < Noize> ChrisPartridge: Version: 0.10.0-2chl1~raring1
03:48 < JamesMGreene> garthk Does that work cross-platform?
03:48 < ChrisPartridge> Noize: looks like your apt cache isn't up to date then
03:48 < garthk> JamesMGreene: anything POSIX, yes. 
03:48 < Noize> ChrisPartridge: Any way to update the cache then? 
03:49 < JamesMGreene> "anything POSIX, yes" = "no"
03:49 < ningu> ChrisPartridge: I only see 0.10.0 in chrislea's repo as well
03:49 < ningu> apt-get update doesn't show it so I assumed it wasn't there yet
03:49 < ningu> ah, it was uploaded two hours ago
03:49 < ChrisPartridge> yeah probably still propagating
03:50 < ChrisPartridge> just noticed that
03:50 < Noize> wow that's recent
03:50 < ningu> so I take it ChrisPartridge != chrislea
03:50 < Noize> so basically wait till tomorrow?
03:50 < Noize> or later this week?
03:51 < ningu> Noize: probably in the next hour or two, not sure
03:51 < ChrisPartridge> ningu: unfortunately not
03:51 < Noize> ok thank you for the help! :)
03:51 < ningu> it usually doesn't take more than a day at most
03:52 < ningu> but I don't know for sure like I said
03:52 < ChrisPartridge> just compile for source, if you're in a rush - it's easy
03:52 < ningu> that too
03:53 < Noize> no rush at all
03:53 < Noize> thank you though, i can wait :)
03:54 < Varian_> I'm building a web-based CLI/Terminal, anyone have an opinion on whether to use JSON-RPC or REST for performance?
03:55 < lovemuffin> use websockets
03:56 < leichtgewicht> Any thoughts as to why/how that happens?
03:56 < monteslu> Varian_, I'm digging rpc over websockets
03:56 < monteslu> json-rpc 1.0 specifically
03:57 < substack> Varian_: just use a stream of raw data
03:57 < substack> a terminal is just input and output
03:57 < monteslu> ewww
03:57 < monteslu> heheh
03:57 < substack> terminals *ARE* streams of text
03:57 < substack> anything fancier is just going to get in your way
03:57 < Varian_> monteslu: any reason you chose not to use 2.0?
03:57 < ningu> streams of text and control characters
03:57 < monteslu> what substack said, but only for your case
03:58 < monteslu> if its simply IO
03:58 < substack> I too am writing a web terminal at the moment
03:58 < Varian_> well it's custom commands (with arguments) and a ton of logic
03:59 < lovemuffin> i mean for performance, you want to pick the protocol with the least amount of overhead so RESt is out
03:59 < substack> but I'm writing it to replace gnome-terminal locally
03:59 < monteslu> however if you're doing an rpc style app, i like json-rpc 1.0 becaues 2.0 has named params, which don't match so cleanly to the functions you're exposing
03:59 < monteslu> arrays are easier
03:59 < substack> just use http://github.com/substack/dnode
03:59 < substack> for rpc
03:59 < substack> but for a terminal app you don't need rpc
03:59 < SomeoneWeird> SHAMELESS SELF PLUG
03:59 < SomeoneWeird> >.>
03:59 < SomeoneWeird> <.<
04:00 < substack> WHAT OF IT
04:00 < lovemuffin> substack you have the ability to always show up at the right time to plug your module
04:00 < Varian_> gotcha...ok I have the json-rpc from the npm but it seems like more code to write than I'd like
04:00 < substack> here's another shameless plug for unfancy websocket streams https://github.com/substack/shoe
04:00 < gkatsev> lovemuffin: he also has a module for just about everything, so, he can
04:00 < monteslu> yeah, but dnode requires the full substack stack :)
04:00 < substack> monteslu: no it doesn't
04:00 < substack> it doesn't care at all how it gets data
04:00 < monteslu> browserify
04:01 < substack> so do browserify -r dnode > dnode.js
04:01 < monteslu> and you're all in
04:01 < substack> then you can require('dnode')
04:01 < JamesMGreene> substack: Any good pattern for reading from and writing to the same file in Node >= 0.8.0? i.e. read file, filter contents, write file
04:01 < substack> monteslu: dnode is why I wrote browserify in the first place
04:01 < ningu> what does the d stand for?
04:01 < substack> ningu: it's because I had used drb/druby
04:01 < monteslu> substack, all good.  Not knocking it.  Just saying if you want to use it you have to use browserify
04:02 < substack> monteslu: you have to use something that knows how node modules work
04:02 < substack> because dnode has dependencies
04:02 < substack> because it is a node module first
04:03 < shmoon> hi how can i hide jade errors on production?
04:03 < monteslu> or you could use something else in the client that node can also run
04:03 < ningu> substack: does dnode use sockjs internally? just wondering how it decides whether to use sockets, long-polling etc.
04:03 < monteslu> plenty of options
04:03 < substack> monteslu: hahaha that is so terrible
04:03 <@Nexxy> it's just that browserify is the best option
04:03 < substack> you can't manage more than 1st order dependencies reliably doing that approach
04:03 < substack> everything is horrible in browser-land
04:03 <@Nexxy> omg, *the* mikeal?!
04:03 < monteslu> naw, dojo requirejs and curl are all fine and also work in node
04:04 < substack> node and npm work and people ACTUALLY have rich dependency hierarchies
04:04 < substack> everywhere else the dependency graphs are really shallow because all the tooling is not sophisticated enough to handle it
04:04 < substack> and as a result there is no culture of reuse
04:04 < substack> and as a result of THAT, everything sucks
04:05 < monteslu> respectfully disagree alot
04:05 < substack> everything is nice in node-land because we have the tooling in place to reliably handle large amounts of dependencies
04:05 < mikeal> and we have a culture of small modules with shallow heirarchies 
04:05 < Varian_> well my UI passes JSON via jQ ajax/post, should I just scrap that?
04:05 < monteslu> so why does that mean we need to push the same pattern to a place where it doesnt play as nice
04:06 < mikeal> and we don't use inheritance very often as an extension pattern
04:06 < substack> in browsers it's a hodge-podge of global namespaces, UMD insanity, and script tag ordering constraints
04:06 < mikeal> those all add up to a larger and more distributed module system than dojo
04:06 < lovemuffin> Varian_ thats a lot of overhead 
04:06 < monteslu> substack, not all the time
04:07 < monteslu> node is different because its controlled, not because of the pattern used
04:07 <@Nexxy> did I miss something here or does anyone actually have a point?
04:07 < substack> node is different because it comes with a module system baked-in and that lead to the critical mass necessary early enough on
04:07 < substack> reusable modules are fundamentally a network effects game
04:07 < Varian_> lovemuffin: so get rid of the JSON and just use a straight socket?
04:08 < ningu> substack: out of curiosity, what were you using before node?
04:08 < monteslu> substack, i agree, i just dont think that makes it automatically the only or the best way
04:08 < lovemuffin> substack: i agree with you, but i dont use browserify :X
04:08 < lovemuffin> Varian_ use websockets
04:09 < substack> ningu: perl, ruby, haskell, python
04:09 < shmoon> anyone knows how to suppress errors of jade in expressjs?
04:09 < substack> and c, c++, php
04:09 < ningu> shmoon: it's well documented
04:09 < substack> and js of course but only in browsers
04:10 < shmoon> ningu: i cannot find
04:10 < ningu> I just tried to make a dnode and browserify bundle but I got this error: http://hastebin.com/gaqotohihe.rb
04:10 < ningu> dnode and shoe*
04:10 < ningu> actually sock. I should do shoe.
04:10 < lovemuffin> Varian_ its the http protocol that slows you down in your current implementation, you don't need it but yet you have to carry the baggage 
04:10  * ningu kicks self
04:11 < ningu> disregard, I'm an idiot.
04:11 < Zolmeister_> shmoon: I think running with NODE_ENV=production should hide debug stuff
04:11 < ningu> however it should give a better error if it can't find the module. :)
04:11 < Varian_> lovemuffin makes sense, I'll have to look into it, websockets is new territory for me
04:12 < shmoon> Zolmeister_: hm there should be an object tbh. because i use NODE_ENV=live instead of production to keep things short :P
04:12 < shmoon> let me try that though
04:12 < shmoon> you are right Zolmeister_ 
04:13 < Zolmeister_> yeah, though I'm not sure how to change it from the default, gl
04:13 < ningu> hmm, dnode + shoe is 54k minified
04:14 < ningu> not bad
04:14 < lovemuffin> substack why no jvm language love
04:14 < monteslu> js ruby and python all have jvm runtimes
04:15 < ningu> in the old days you didn't run java programs, you walked them
04:15 < monteslu> hah
04:15 < jayk> hahaha. ningu++
04:15 < lovemuffin> those were really old days
04:16 < jayk> yeah. now the dinosaurs can run! ;-)
04:16 < jayk> (and work doorknobs ;-) )
04:16 < mscdex> here's what i ended up with for the kind of stream i had in mind: https://gist.github.com/mscdex/5243078
04:17 < zivester> anyone know the name of that nodejs webapp that lets you run node virtually?  its basically jsfiddle for node apps
04:17 < mscdex> jayk: ^
04:18  * jayk clicks
04:20 < zivester> found it myself, http://runnable.com/nodejs
04:22 < marshall> hey node
04:22 < marshall> i'm having this problem with vows. it doesn't tell me which tests are failing and where errors are coming from. i'm using --spec and -v
04:23 < jayk> mscdex: I get what your doing.  
04:24 < mscdex> so much easier to write parsers this way :-)
04:25 < jayk> I find your original nested callback read scenario more intuitive... but I get it.
04:25 < mscdex> well you could do nested too if you need to branch logic
04:26 < jayk> perhaps it makes sense to make a protocol handler class thing that sets up the sizes for each bit in advance and fills itself out as data is received.
04:28 < jayk> the read(5)... read(6) was a bit confusing to me, I couldn't tell at first if it was 'do this if you get 5 bytes or do this if you get 6' - it wasn't until I parsed the Readstream class you wrote that I worked out what it was doing.
04:28 < jayk> but whatever works for you. :-)
04:29 < jayk> if you're happy, I'm happy. ;-)
04:33 < substack> ningu: fixed error messages
04:34 < substack> npm install browserify@latest
04:36 < souri> I am using cheerio module to scrape pages using css selectors to extract text from relevant <div>s, but i'm having problem to select the :text() from any <div></div> with <script> inside. text() gives me the <script> also
04:37 < souri> anyone?
04:38 < JamesMGreene> Use a better testing framework </troll>   :)
04:38 < JamesMGreene> err
04:38 < JamesMGreene> Sorry... I had scrolled the chat up by ~10 minutes >_>
04:39 < SomeoneWeird> lol
04:39 < SomeoneWeird> hate when that happens
04:45  * garthk checks out npm-proxy.
04:45 < garthk> Dang. Does what I want; deprecated; apparently there's some way to pull it off just using vhosts. Or not.
04:46 < garthk> isaacs, I'm one of those blokes who want to pull a substack in terms of module size, but who can't publish all their code. A smallish npm locally cascading to the real npm as necessary would be very bloody nice.
04:47 < garthk> The namespace problem could be avoided with a simple regular warning of clashes, though I'd be prefixing the names. (Eww!)
04:48 < souri> Hi, I am using cheerio module to scrape pages using css selectors to extract text from relevant <div>s, but i'm having problem to select the :text() from any <div></div> with <script> inside. text() gives me the <script> also
04:49 < substack> garthk: you can use private git remotes, check node_modules into git, http://clock.co.uk/tech-blogs/how-to-create-a-private-npmjs-repository and/or https://www.irisnpm.com/
04:49 < garthk> Hmm. https://github.com/jden/npm-delegate
04:49 < garthk> substack: checkingâ€¦ (thanks)
04:51 < garthk> If i were in some smaller company, I'd consider Iris, but enterprise complications. :/
04:55 < garthk> Oh, crap. Something's broken with node-expat. Might need to rip it out. :/
04:57 < substack> garthk: the simplest thing is to use git remotes in your dependencies that point to private repo urls
04:57 < garthk> substack: we don't use git, either, but there's nothing stopping us from checking third-party code into our repo if careful.
04:58 < muloka> hey... anyone here have experience with superagent? i'm trying to get my url to not be escaped / encoded... right now its converting plus signs into spaces
04:58 < muloka> typically this should be ok behavior but i'm dealing with a legacy system and its expecting plus signs
04:58 < muloka> :(
04:59 < someprimetime> anyone used async's waterfall before?
04:59 < someprimetime> well anyone on right now that just read that, that is
05:00 < muloka> someprimetime: read your question?
05:00 < Zak> i've used several of async's methods
05:00 < Zak> whats the problem
05:00  * muloka <3 async's
05:01 < someprimetime> Zak: i'm running into an issue upon looking up a submission. Basically I A) lookup the submission from the id in the url B) if it exists, check if the IP has viewed it before C) If it didn't view it, then save a view in my SubmissionsView collection
05:01 < someprimetime> The problem is that it hangs when it saves 
05:01 < someprimetime> The execution context just goes past the save
05:02 < someprimetime> I thought waterfall would be able to fix this issue, so I added a ton of callbacks but it's still not returning to its caller
05:02 < Zak> someprimetime: remember that JS single-threaded
05:02 < Zak> if you have a function that blocks execution, then async's library won't solve that for you
05:02 < Zak> check your function declarations; ensure that it's in the format that's required (e.g. function foo(error, param1, param2...)
05:03 < Zak> attempt to simplify your problem
05:03 < someprimetime> I mean it does save the submission
05:03 < someprimetime> Err view*
05:03 < someprimetime> It just never gets back to the caller
05:03 < ningu> someprimetime: you'll have to pastebin the code
05:03 < someprimetime> Hold on a sec this is an express app I'm building
05:03 < Zak> create simple functions and just invoke async waterfall the way you think it should be invoked
05:03 < Zak> probably when you attempt to simplify the problem, you'll find the cause
05:05 < someprimetime> http://pastebin.com/40QxKUmP
05:05 < someprimetime> I had it simple but then I started to do more stuff (like check for submission votes as well) so it started to get bigger and that's when I started running into this issue
05:06 < someprimetime> Initially it just fetched the submission and rendered that
05:07 < ningu> someprimetime: if you don't call the callback for each item in the waterfall, the next ones will never be called
05:07 < ningu> not sure if that's what you want
05:07 < garthk> Well, nuts. I can't take my code as-is to 10, because waf -to-gyp transition vs node-expat and libxml. 
05:07 < ningu> someprimetime: what you want is to pass an error to short-circuit it
05:08 < someprimetime> ningu: how do I do that?
05:08 < ningu> someprimetime: also, you should write your functions so that you can just do async.waterfall([foo, bar, baz], function (err, result) {...})
05:08 < someprimetime> when I think of short circuiting I think of var = obj || {} type of thing
05:08 < ningu> someprimetime: well what do you want to happen if there is no submission?
05:09 < someprimetime> ningu: when there is no submission I had some logic to just res.render('/') with a session flash
05:09 < ningu> same if there's no count, if not added, etc.?
05:09 < someprimetime> res.redirect, rather
05:09 < someprimetime> nah if no count, I add the count
05:09 < someprimetime> I have way more logic to this
05:09 < someprimetime> but I simplified it as much as I can
05:09 < ningu> no you don't
05:09 < ningu> oh, ok
05:09 < ningu> well then I dunno
05:09 < someprimetime> Yeah :|
05:09 < someprimetime> Me either lol
05:10 < ningu> all I can tell you is, if you don't call the callback then the waterfall will never finish and you don't want that
05:10 < ningu> don't do if (err) throw err
05:10 < someprimetime> Is waterfall what I should be using here?
05:10 < someprimetime> I
05:11 < someprimetime> Or should I use auto or something else
05:11 < someprimetime> series() etc
05:11 < ningu> no, it seems appropriate
05:11 < ningu> but the code is all messed up ;)
05:11 < ningu> I can't really tell
05:11 < someprimetime> Man async is just weird to me
05:11 < someprimetime> I w
05:11 < someprimetime> I want to kind of use step
05:11 < someprimetime> th
05:11 < someprimetime> Damn internet
05:11 < ningu> ok so take it from the beginning
05:12 < ningu> first of all
05:12 < garthk> Might try feedic's htmlparser2. https://npmjs.org/package/htmlparser2
05:13 < ningu> it should just be async.waterfall([ function (callback) { getSubmission(id, callback) } 
05:13 < ningu> no need to have an inline function there
05:13 < someprimetime> Ok
05:13 < ningu> similarly in var getSubmission you want to do Submission.getSubmission({ ... }, callback)
05:14 < ningu> since that will still do what you want -- if there's an error it will abort the waterfall
05:14 < ningu> actually, no, I suppose you should check if (submission), sorry
05:14 < someprimetime> Hm I am doing that in my getSubmission function expression
05:15 < ningu> if (err)  callback(err); else if (submission) callback(null, submission); else { ... handle no submission ... }
05:15 < ningu> someprimetime: the first callback argument is *always* the error
05:15 < ningu> so callback(submission); in your code is passing an error
05:17 < ningu> someprimetime: anyway you only need to check your errors once
05:17 < someprimetime> To be honest I learned nothing from what you just said but I'll explore the error thing more
05:18 < ningu> someprimetime: one sec I'll do another paste for you
05:18 < ningu> it's too confusing otherwise
05:20 < someprimetime> ningu: so when I comment out the last function in the waterfall series
05:20 < someprimetime> http://pastebin.com/J8bWf16x
05:20 < someprimetime> I get that output in my console
05:20 < someprimetime> which is all the views
05:20 < someprimetime> I called it `count` in this example, but it should be `views`
05:23 < leichtge_> About my install problem: It seems like grunt-phantomjs refers to a old version of phantom.js?! http://pastebin.com/Q1V3SHAN
05:26 < sainz> using expressjs, what would cause a page to load entirely blank after a couple of browser reloads?
05:26 < ningu> someprimetime: http://pastebin.com/n8aH5ABg
05:26 < ningu> someprimetime: I brought some semblance of order to it ;)
05:26 < ningu> sainz: no way to know without more info
05:26 < ningu> someprimetime: I didn't touch the model code
05:27 < someprimetime> Oh dude
05:27 < someprimetime> that waterfall actually makes sense
05:27 < ningu> someprimetime: anyway I hope you'll be able to figure it out now
05:27 < someprimetime> Wtf was I doing
05:27 < ningu> compare your code to mine
05:27 < someprimetime> YEah man thanks
05:27 < ningu> I'm sure mine won't work yet
05:27 < someprimetime> I'm gonna try yours now
05:27 < ningu> but it will be closer
05:27 < someprimetime> Yeah I'll make it work
05:27 < someprimetime> Thanks for the help
05:27 < someprimetime> So you recommend waterfall for this kinda stuffâ€¦ when would I use series()?
05:27 < someprimetime> or parallel?
05:27 < someprimetime> like what use cases
05:28 <@mbalho> guys did you know you can have descented skunks as pets
05:28 < ningu> series and parallel are when none of the functions need to pass info to each other
05:28 < someprimetime> Seems like waterfall would be what I would need 90% of the time no?
05:28 < ningu> mbalho: yes
05:28 <@mbalho> ningu: this is new to me, they are like little dogs or something
05:28 < ningu> someprimetime: not necessarily -- say you need to do a lookup on 50 items in the database at once -- you could use parallel, if you can't do it all in one query for some reason
05:28 < ningu> or you need to stat 50 files
05:29 < ningu> series is for when things need to happen in a particular order but none of them has to pass info to the next -- or they do so through side effects like setting a global var
05:29 < someprimetime> Oh that's sweet
05:29 < ningu> mbalho: there is this too: http://www.youtube.com/watch?v=pg5iRruqcps
05:30 < ningu> someprimetime: you can also control concurrency, using parallelLimit (I think) or queue -- so say you want to do a few thousand things but no more than 10 at once
05:30 <@mbalho> ningu: is that a fennec?
05:30 < ningu> mbalho: just a fox
05:30 < ningu> but a tame one
05:30 <@mbalho> wtf i want a skunk and a fox and a sloth
05:30 < ningu> hehe
05:30 < ningu> there is talk of bringing the american giant ground sloth back from extinction
05:31 <@mbalho> booyeah
05:31 < faceleg> lol
05:31 <@mbalho> stewart brands stuff?
05:31 < faceleg> is that the least frightening one they could think of
05:31 < ningu> but they need a closest relative to bring it to term and other sloths are too small
05:31 < ningu> mbalho: yeah. I work at the same place he's associated with
05:32 < someprimetime> ningu: Seriously powerful shit
05:32 < someprimetime> Nice
05:32 <@mbalho> ningu: long now?
05:32 <@mbalho> ningu: or gbn
05:32 < ningu> someprimetime: yeah, it just take a bit more thought in designing the code
05:33 < ningu> mbalho: long now
05:33 -!- mode/#Node.js [+o TooTallNate] by ChanServ
05:33 < ningu> but afaik I'm the only one who knows node :P
05:33 <@mbalho> ningu: sweet! i love long now. sb gave me tour of his tugboat last year
05:33 < ningu> cool, where was that?
05:33 <@mbalho> ningu: he lives in sausalito
05:34 < ningu> I don't know much about him to be honest -- just what he's famous for and not much more
05:34 < ningu> I just started working there
05:34 <@mbalho> ningu: ahh yea, he is cool, getting a bit old so he has less patience for people to catch up with his ideas
05:34 < ningu> you mean people who want to challenge him or are just slow on the uptake or both?
05:35 <@mbalho> ningu: both
05:35 <@mbalho> ningu: like his new views on things like nuclear energy piss off lots of people, etc
05:35 < ningu> on his reddit AMA the other day someone called him out for supporting nuclear power, but didn't give any reason, and he had a quick response
05:36 <@mbalho> ningu: but i mostly agree
05:36 <@mbalho> yea exactly
05:36 < ningu> I've always been for nuclear actually -- seems like one of the least worst options
05:36 <@mbalho> im pro small nuclear
05:36 < ningu> and there are apparently ways to do it that produce much less waste
05:36 < ningu> but those are less commonly done cause it's easier to weaponize the materials
05:36 < garthk> HAHAHAH oh BRILLIANT.
05:36 <@mbalho> ah interesting
05:37 < ningu> mbalho: just talking out of my ass really, but someone who seemed like they should know said so ;)
05:37 < SomeoneWeird> i'm pro mini blackhole guns
05:37 <@mbalho> yea i mean im obviously not a nuclear engineer, but anyone can see that there should be more investment in newer technologies
05:37 < garthk> Having written a module to turn node-expat's callbacks into a stream of objects, when I had to switch to another parser, all I had to do was write a new tagstream module. Worked a bloody treat. :)
05:38 <@mbalho> SomeoneWeird: blackhole guns dont kill people, blackholes kill people
05:38 < SomeoneWeird> mbalho, lold
05:38 < SomeoneWeird> IT'S NOT MURDER!
05:38 < SomeoneWeird> cause of death: natural causes
05:39 <@mbalho> and lupus
05:39 < ChrisPartridge> its not murder if you can't prove they didn't rematerialize on the other side 
05:39 <@mbalho> haha
05:39 <@mbalho> ningu: are you getting to use node at the job?
05:40 < ningu> mbalho: yes, basically I said "I think this would be good for what you want" and my boss said ok
05:40 <@mbalho> nice
05:41 < SomeoneWeird> ChrisPartridge, hahahaah
05:43 < someprimetime> ningu: so this works perfectly but still hangs on that save() from within my model
05:43 < someprimetime> w
05:43 < someprimetime> When adding the view
05:43 < someprimetime> Could it be an issue with Mongoose?
05:44 < ningu> someprimetime: not sure where you're calling save() but remember it takes a callback
05:44 < ningu> you probably are forgetting to call it
05:44 < ningu> or not calling it right or whatever
05:46 < someprimetime> http://pastebin.com/FXBLbZYe
05:48 < ningu> oh
05:48 < ningu> I don't think you can pass an object to save
05:49 < ningu> submissionView.set({...}); submissionView.save(function (err, counted) { ... });
05:55 < someprimetime> It is saving it 
05:55 < someprimetime> but it's just not hitting the callback
05:55 < someprimetime> http://mongoosejs.com/
05:55 < someprimetime> Pretty similar to that example
05:55 < ningu> yeah except save() only takes one argument
05:57 < SomeoneWeird> passes*
05:58 < someprimetime> ningu: 
05:58 < someprimetime> I'm a fucking idiot
05:59 < someprimetime> :(
05:59 < someprimetime> Cannot believe I was stuck on this for days
05:59 < someprimetime> Wow
05:59 < ningu> read the docs next time :P
05:59 < someprimetime> Haha it's funny because I was adding submissions without a first parameter
05:59 < someprimetime> in another collection
05:59 < someprimetime> Ugh thanks for the help with async
05:59 < someprimetime> I'm gonna start using that everywhere.
06:01 < SomeoneWeird> someprimetime, it happens do everyone
06:01 < SomeoneWeird> (more than they're willing to admit)
06:02 < someprimetime> SomeoneWeird: thanks hah
06:03 < AAA_awright> Anup: You can get better help in here
06:04 < ChrisPartridge> someprimetime: I thought you said yesterday it was getting into that callback? :P
06:04 < someprimetime> ChrisPartridge: Haha
06:04 < someprimetime> My mistake ;P
06:07 < Anup> Hello
06:08 < Anup> have a query. If someone can assist me
06:08 < AAA_awright> Anup: Just ask
06:08 < AAA_awright> Don't fear being off-topic, jump right into the question
06:09 < Anup> OK
06:23 < Anup> I was following the async module's each method (https://github.com/caolan/async#each) where i want to add all the numbers in the array and print the result
06:23 < Anup> but seems the third parameter (callback) is not being called.
06:24 < ningu> Anup: are you calling the callback for item in the array?
06:25 < Anup> this is how I am calling the each method:  async.each(arrOfNumbers, add, function(err) { ... })
06:25 < SomeoneWeird> and what's the add functions
06:26 < SomeoneWeird> function*
06:26 < Anup> function add(no) { result = result + no }
06:26 < Anup> result variable is declared already
06:26 < SomeoneWeird> function add(no, cb) { result = result + no; cb() }
06:26 < SomeoneWeird> change it to that
06:27 < Anup> to whom cb is  pointing to? the function(err) {... } ?
06:27 < SomeoneWeird> hm?
06:27 < ningu> Anup: no
06:27 < astropirate> o_O
06:27 < SomeoneWeird> it's an internal async function that needs to be called
06:27 < ningu> async.each creates one for each item
06:27 < ChrisPartridge> Anup: it's all "async", so you need to tell the callback when it's done that iteration
06:28 < ChrisPartridge> also, you probably want to use async.reduce in your example
06:28 < ChrisPartridge> just to add some more confusion :-)
06:28 < ningu> it's going to be a while before I get tired of typing "jesus restart api"
06:28 < SomeoneWeird> ningu, haha jesus is win
06:28 < SomeoneWeird> deoxxa++
06:28 < ningu> yeah
06:29 < ningu> my api has been restarted like 40 times in the last two days
06:29 < ningu> sorry forever, I'm with jesus now
06:29 < SomeoneWeird> i'm switching when i redeploy prod stuff to
06:29 < SomeoneWeird> too
06:31 < ningu> forever isn't even that bad
06:31 < ningu> jesus is just better :P
06:32 < astropirate> hello friends
06:32 < duko> I'm using jasmine-node to create my first unit tests. How should I verify that the returned value is an array with an object with named-properties defined with specific values?
06:33 < roger_rabbit> greetings astropirate 
06:33 < astropirate> whats new and exciting?
06:33 < roger_rabbit> not too much really
06:33 < roger_rabbit> how about yourself?
06:33 < duko> is it normal to have multiple calls to expect() within a single method description?
06:34 < astropirate> nothin' here
06:34 < Anup> ningu: can you please tell me the significance of cb() here - function(no, cb) { result = result + no; cb(); }
06:34 < ningu> Anup: we already told you about -- async generates a separate callback for each item in the array
06:34 < ningu> Anup: it's all in the async docs in more detail
06:35 < ningu> and in general this is how all async stuff in node works
06:35 < Anup> OK.
06:38 < asimovic> date
06:39 < ningu> Anup: you will have to understand this to use node properly
06:39 < Anup> I am pretty much new to node... but yes I am trying to understand it and revising the statements in the async docs :)
06:40 < ningu> it will make sense sooner or later
06:43 < ChrisPartridge> ningu: whats this jesus package you speak of
06:44 < ningu> ChrisPartridge: it does the same thing forever does, but better
06:44 < ningu> imo
06:44 < ningu> deoxxa wrote it
06:44 < ChrisPartridge> Ah, I always tend to run back to supervisord but i'll take a look
06:44 < ningu> he wrote it cause it's specifically better if you have a large number of node apps running on one machine -- it doesn't start up a new process per app like forever does
06:45 < ningu> that is, it doesn't start up a new jesus process
06:45 < ningu> whereas forever does
06:45 < ChrisPartridge> yeah
06:45 < Anup> ningu: would it be correct to say that the cb() internally calls the callback that i passed to the async.each() method?
06:46 < ningu> Anup: no
06:46 < ningu> async.each() calls the callback you passed once the callback for all of the array elements has been called
06:46 < ningu> Anup: if you are brave enough just read the async module's code
06:48 < Anup> Haha.. I am not yet equipped 
06:48 < SomeoneWeird> Anup, the cb is an internal async callback, so async knows when to continue with the loop of the array
06:49 <@mbalho> Anup: i tried to explain callbacks recently, would be interested to hear if it helps https://github.com/maxogden/art-of-node#callbacks
06:50 < Anup> Thanks mbalho. I'll definitely have a look on it...
06:55 < Anup> ningu: I think if you try logging the cb variable inside the add method - function(add, cb) { console.log(cb.toString()) }, you'll see the callback function which I passed as the third parameter to the async.each method is getting called
06:56 < ningu> Anup: it's not being called
06:56 < ningu> not sure what you're seeing in the log output
06:56 < Anup> let me paste it here
06:56 < ningu> no, don't paste it here
06:56 < ningu> use pastebin or whatever
06:57 < Anup> no idea how to use it.. by the way it's just three lines of code
06:58 < ningu> pastebin.com
06:59 < Anup> ningu: Thanks. Here is the URL: http://pastebin.com/4Ei1LJPd
07:00 < ningu> ok
07:00 < ningu> not really sure what this is supposed to show
07:00 < Anup> because if cb() hadn't been pointing to the callback function, then whats the point in invoking it?
07:00 < Anup> I am sorry If I am dragging this much longer :(
07:00 < ningu> Anup: so that async.each knows when each asynchronous operation has completed
07:00 < ningu> callbacks in node are how you let the caller know that an async operation is done
07:01 < ningu> if the callback isn't called it will just keep waiting
07:03 < Anup> ningu: OK. I think i have got it now...Also I can pass some extra parameters if I want to from cb() right?
07:03 < ningu> Anup: pass to what?
07:03 < ningu> not from async.each, as far as I know
07:04 < Anup> ok
07:04 < ningu> it depends what you're trying to do
07:05 < Anup> ningu: can you please have a look at this code: http://pastebin.com/S2nqfAQw
07:05 < ningu> ok
07:06 < ningu> the first argument of the callback is an error
07:06 < ningu> so your "abc" is an error
07:06 < Anup> yes a dummy one
07:06 < ningu> it will abort the async.each()
07:06 < ningu> and call the final callback with the error
07:09 < ningu> Anup: also, arguments[0] is the same as err 
07:12 < Anup> ningu: plz have a look again at the example, I have modified a bit: http://pastebin.com/AY7FDnD5
07:13 < ningu> Anup: still going to abort
07:13 < ningu> the first argument means an error
07:13 < ningu> you can do cb(null, 123)
07:13 < ningu> but that 123 won't go anywhere
07:14 < ningu> Anup: anyway, it can't go directly into xyz -- remember, it's called once for every item in the array
07:14 < ningu> an example of passing arguments via a callback is async.map()
07:15 < ningu> or, like someone else here suggested, async.reduce()
07:15 < Anup> OK
07:15 < ningu> also async.waterfall()
07:15 < ningu> but they are all for different situations
07:16 < someprimetime> ningu: thanks again
07:16 < ningu> sure
07:16 < someprimetime> finally got it all finished for rendering submissions
07:16 < ningu> :)
07:16 < Anup> ningu: how did you figured out incase of cb(null, 123) - 123 wont go anywhere?
07:17 < ningu> Anup: because that's how the async module is written. you can tell from the docs there final callback takes no other arguments
07:17 < ningu> you could write your own function to do whatever you want
07:18 < ningu> the final callback*
07:18 < ChrisPartridge> if you want to pass data around, look at the "control flow" methods
07:18 < Anup> Thanks ningu for taking so much pain and patience to make me understand :) I got it now.
07:19 < ningu> Anup: the async module is just a library written to do certain specific things. it only does those things :)
07:19 < Anup> yes, i understand now...
07:40 < damarusama> I am writting an cli application with node library - where should I start the process? is there some framework or automation tools that would help the process? Would grunt be usefull ?
07:41 < ningu> start the process of writing it, or as in the OS process?
07:41 < damarusama> of writting it
07:41 < damarusama> and packaging it
07:41 < ningu> I don't see why grunt would be useful unless it's going to send js over the net
07:42 < ningu> since grunt is usually used to bundle up and minify js files
07:42 < RLa> you start by searching npm for useful libs and writing package.json for deps
07:42 < SrPx> Hello. Is there a way to spawn a new node process, *and* keep track of it to terminate later? I'm spawning the process using exec("node file.js"), but this way I can't keep track of it.
07:42 < damarusama> nope it's a simple cli app - yeah I was wondering if grunt would help in the library maintenance... 
07:42 < ningu> SrPx: child_process.spawn?
07:42 < RLa> things like optimist, commander etc. that can be used for parsing command params etc. are what you could use
07:43 < damarusama> RLa: so the package.json would be written manually 
07:43 < ningu> damarusama: npm install foo --save
07:43 < ningu> that writes it to package.json
07:43 < RLa> damarusama, yes, it's very simple .json file
07:43 < RLa> you should make package.json even if you do not plan to publish
07:43 < damarusama> RLa: yes I have already written some code... ningu - thanks for the npm I'll look more into that
07:43 < SrPx> ningu: interesting, thanks!
07:44 < damarusama> and for publishing the app in npm, only the package.json would be usefull or a readme.md is also needed?
07:45 < RLa> damarusama, link to public repo could be added too
07:45 < ningu> if you don't have a readme no one will know what it is
07:45 < ningu> yes, that too
07:45 < RLa> ningu, can't you guess from package name? :)
07:45 < ningu> I still want to know what makes it different from other things 
07:46 < damarusama> hum the app name is already taken :( 
07:46 < damarusama> ls
07:46 < damarusama> ._.
07:49 < damarusama> is the folder structure important, with the lib and bin and src ?
07:50 < RLa> i never got the idea of 'lib'
07:50 < RLa> but most modules seem to put their most code there
07:50 < damarusama> hum.. what I am looking for actually is some sort of blank project generation, if it exist. 
07:51 < RLa> just take most popular npm packages and see how they do it
07:51 < damarusama> RLa: so the lib wouldn't be for external npm dependecies
07:51 < RLa> no
07:51 < damarusama> RLa: that's taken care with the packages.json 
07:51 < RLa> that is one of the things i do not get
07:51 < RLa> node_modules is for deps
07:52 < RLa> and you do not check it into vcs
07:52 < damarusama> so the node_module would be another folder in the project skeleton ?
07:52 < RLa> npm will create it
07:54 < damarusama> I did the npm install foo --save
07:55 < ningu> damarusama: you have to replace foo with the package you want to install
07:55 < damarusama> and it picked up a npm package called foo - is that a base project
07:55 < RLa> haha
07:55 < RLa> no, that's your dependency
07:55 < damarusama> well I was surprised it worked with foo ;D
07:56 < damarusama> "name": "foo", "description": "A test module with no `main`, `lib`, or `dependencies` specified",
07:57 < damarusama> ok so 'npm install package --save' will create a node_module folder with all the dependency I need for the code I write
07:58 < damarusama> when I write my code and I 'command = require(commander)' should the require point to the node_module?
07:58 < damarusama> I am not sure why  I need the node_module folder actually
07:58 < ningu> damarusama: you should read about how dependencies and modules are handled in node
07:59 < RLa> in node js docs Modules
07:59 < damarusama> kool
08:02 < damarusama> thanks for the kick start :D will read a bit moreon it
08:04 < damarusama> is the npm registry curated in any way? or anyone can publish to it?
08:04 < astropirate> damarusama, anyone can publish anything
08:04 < astropirate> ANYTHING!
08:04 < damarusama> ._.
08:06 < damarusama> scary
08:15 < fotoflo> hey all
08:16 < seismo> OOOOOOOOOOOOOOOOOOOOOOOOOOO
08:16 < seismo> hi
08:16 < fotoflo> usually when I run a web server (apache, for example) i run it with a user that has locked down permissions --- www, for exampleâ€¦ How do you do this with node?
08:16 < fotoflo> can you point me to some reading?
08:17 < SomeoneWeird> fotoflo, just execute the node process with a custom user
08:18 < SomeoneWeird> or make your node program drop permissions as soon as it doesn't need the
08:18 < SomeoneWeird> m
08:18 < seismo> fotoflo: https://www.google.de/?q=nodejs%20user%20permissions
08:18 < penzur> su someuser then node some.js
08:19 < seismo> sudo pigbenis
08:20 < seismo> eh O_O
08:20 < seismo> he could have said thanks
08:20 < seismo> at least
08:24 < chakrit> is there a way to force close a net.Server with dangling connection?
08:24 < chakrit> or i have to track and close each one of them manually?
08:24 < chakrit> i mean each connection that is dangling preventing the server from .close()-ing
08:25 < damarusama> idling ?
08:25 < chakrit> yeah idling
08:30 < damarusama> a shot in the dark but socket.setTimeout(timeout, [callback])
08:41 < [AD]Turbo> ciao all
08:45 < zaleb> So my manager read this article about forever, and he's like: we should use forever!
08:45 < zaleb> and we are like: we already use forever...
08:48 < AAA_awright> I posted an epic comment somewhere regarding software licenses, and I so much want to post a reply to myself under an alias saying "Who the hell is Richard Stallman, what does he know about the GPL"
08:54 < faceleg> I got in shit from mine for not doing what I was told not to do
09:04 < zaleb> faceleg, so true..
09:05 < Laddi> One n00b question:  I have a ubuntu server running Node 0.8.17 and have to update to 0.8.18 (because of latest Meteor version).  What's the best way for me to go about that?
09:05 < zaleb> npm install -g n
09:05 < zaleb> n 0.8.18
09:05 < Laddi> ah, that's so simple and elegant, thanks :D
09:05 < zaleb> yw :)
09:06 < Laddi> wait...
09:06 < Laddi> I have to specify node somehow, right?
09:07 < Laddi> ah, sorry, got it now...
09:07 < Laddi> ;)
09:07 < zaleb> ;)
09:07 < SomeoneWeird> ;)
09:21 < SiPlus> Hi
09:21 < SiPlus> HELP ME!
09:21 < SiPlus> when I call address() of UDP socket, it gives me `getsockname EINVAL`
09:21 < SiPlus> wtf?
09:23 < SiPlus> is anyone there?
09:23 < zaleb> I dont do UDP sockets :p
09:26 < Laddi> OK, another n00b question: I have fetched 0.8.18 but the previous node version was setup using apt-get, how do I switch them? :p
09:31 < zaleb> make sure the node under /usr/local/bin is the same (or a link) of the one mentioned under:
09:31 < zaleb> n bin 0.8.18
09:46 < SrPx> LOL. http://o7.no/16eB7CX 
09:47 < AAA_awright> SrPx: Political commentary?
09:47 < SrPx> AAA_awright: pardon?
09:47 < AAA_awright> What's the point of that do you suppose?
09:48 < SrPx> AAA_awright: pardon again. What do you mean?
09:48 < AAA_awright> You posted a link
09:48 < AAA_awright> What of it?
09:48 < SrPx> AAA_awright: oh. I just thought it funny.
09:48 < Laddi> zaleb: Thanks!
09:48 < SrPx> AAA_awright: It's just a joke on the node.js docs.
09:54 < rimpy> Heyy Hi.... Wassup
10:00 < Anup> The URL (https://github.com/caolan/async#each) states that this function iterates in parallel..... Can you really execute stuffs parallely in JavaScript?
10:02 < RLa> in async sense yes
10:02 < Anup> can you help explaining me :)
10:06 < RLa> Anup, if you have 2 io operations then you can start them both and the underlying os might do them in whatever order, including parallel
10:06 < RLa> in node you get callbacks executed when they are complete
10:07  * Thomas_Ed http://getworld.uk.to/
10:07 < yawnt> *bum* headshot
10:07 < RLa> even more, the event loop is not blocked during those io calls and can do more things
10:08 < RLa> Anup, callbacks themself or any js code in node cannot run in parallel tho
10:09 < RLa> Anup, eachSeries, for example, would make sure that your io ops have strict order
10:10 < RLa> i.e when the next op depends on result from the previous one
10:10 < Anup> Thats what my confusion is: If you cannot run any js code in parallel, how come the each() method says it iterates parallely.
10:11 < RLa> it allows those overlapping async io calls
10:14 < Anup> Say I am using each() method just to add numbers contained in an array... how can i prove via code that...yup it's running parallely
10:15 < txdv_> what happens when node consumes too much memory?
10:16 < arvin_> Anup: each() in the async library is designed to work with functions that do IO and take callbacks... if you see the example he's given, it's used for writing files.
10:16 < RLa> txdv_, it should crash
10:16 < txdv_> no error messages/
10:17 < arvin_> The second parameter, iterator, should be a function that takes a callback
10:19 < Anup> arvin: yes, thats true...  but I want to prove somehow it runs parallely via any simple example... say adding numbers of an array... I  believe its all about parallel computation... be it computation via IO bound or via cpu bound
10:19 < arvin_> the iterator itself will probably be called in sequence (not in parallel), but what it means by "parallel" is that it won't wait for each invocation of the iterator function to complete (i.e. its callback to fire) before invoking it again with the next item in the array
10:19 < arvin_> Aravind: I doubt it is parallel the way you're saying
10:19 < arvin_> *Anup
10:19 < RLa> txdv_, does it just slow down?
10:20 < roel_> I want to use cluster to use multiple cores but in the documentation it is marked as: Stability: 1 - Experimental. Shouldn't I be using this for a production-env and what can we use that is already more stable?
10:20 < RLa> and finally spend 100% time in gc?
10:20 < RLa> roel_, that's api stability, not code stability
10:20 < roel_> ah k, so the api could change but the code is tested. Ah thnx!
10:21 < Anup> arvin: I am still confused... so going ahead and posting this question on stackoverflow :)
10:21 < roel_> didn't found that in the docs!
10:21 < RLa> roel_, current api is a bit low-level tho
10:21 < roel_> or misread :D
10:21 < RLa> you could try find some helper modules tho
10:21 < askabt> Anup: sure... will take a crack at it there :)
10:21 < Anup> ya... :)
10:21 < RLa> roel_, i remember writing 100-200 loc support code for it
10:22 < roel_> support code? Was that to catch all possible things that could go wrong or what do you mean?
10:24 < RLa> roel_, for example, graceful cluster shutdown, and adding new worker when old one dies
10:24 < roel_> ah k yes
10:26 < RLa> it's not that hard but you have to think about all the cases that might happen
10:26 < RLa> i.e parent dies but workers survive
10:26 < roel_> yes, I'm reading the docs right now.
10:26 < roel_> Is that possible that the master dies and the workers keep running?
10:27 < RLa> some say it's not
10:27 < RLa> but i have no idea
10:27 < RLa> i think i "pinged" the master periodically
10:27 < RLa> and of course, when master is shutting down, it sends message to workers to shut them down too
10:28 < theblackbox> hello all, I'm using Karma/Testacular to try and develop a complete test framework for my node app, but I'm confused how I would go about providing the socket.io.js to the Karma test-runner?
10:28 < RLa> but i think it might be possible to kill master so that workers do not notice
10:28 < theblackbox> anyone using it and know what to do?
10:30 < roel_> thnx RLa for the information. I'm gonna try and test a lot. Will try to kill the master without the workers.
10:30 < RLa> i haven't seen many guys running clusters here tho
10:31 < roel_> why not?
10:31 < RLa> no idea
10:31 < roel_> why not use the entire cpu?
10:31 < RLa> heavy io might not tax it that hard
10:31 < roel_> ok. I'm gonna try it anyway!
10:31 < Kaltiz> Could someone please try and explain this, node relay.js/relay.js doesn't work but cding into relay.js and doing node relay.js does?
10:31 < RLa> also, if you have db and bunch of other services on the same machine they might use up remaining cores/cpus
10:32 < RLa> roel_, another thing might be load balancer in nginx or whatever frontend
10:32 < RLa> that handles cluster itself
10:33 < zaleb> we have one app that runs on cluster
10:33 < zaleb> but its so not busy that it can easily run on one thread
10:33 < zaleb> so the second node app we made runs in a single thread
10:33 < zaleb> no plans to use cluster for it
10:34 < roel_> and you're not using load balancing for the apps?
10:35 < roel_> I'm actually refactoring an app that I created almost a year ago. With tests then (don't know what node-version) we had over 100 000 connections and then the app crashed
10:35 < zaleb> yeah, we dont have that many connections :)
10:35 < roel_> I then put in the cluster-code (very basic) and then the machine could handle the requests
10:35 < zaleb> at most a couple of hundred
10:36 < roel_> but I have no idea about newer node-versions
10:36 < zaleb> our cluster app is also rather old, it runs 0.6
10:36 < zaleb> the other one runs 0.10
10:36 < roel_> ah so if you have more connections you would also look at cluster or you would be drawn to nginx?
10:37 < zaleb> we do run nginx in front of it anyway
10:37 < roel_> ah so you already have the load-balancing
10:37 < roel_> no need for a cluster then
10:39 < RLa> 0.6 cluster api is different from 0.8's
10:39 < RLa> i remember rewriting most of my cluster code :)
10:40 < roel_> I'm first gonna take a look at the load balancing of nginx. Then trying to decide what to use best
10:59 < SiPlus__> kick SiPlus and SiPlus_ please
11:00 < SiPlus> thanks
11:13 < gudmundur> is there a clean and nice way to convert an event emitter that spits out row, error, end events to a stream?
11:21 < zarac> gudmundur: Sounds like all you have to do is start a stream and, upon emitted events, stream them using your stream.
11:22 < gudmundur> zarac: yes, I was just thinking if there was a module for this since this is a pattern I've seen both in node-pg and mongoose
11:25 < faceleg> how do I determine whether a C function is blocking or not?
11:34 < SiPlus> if it uses a callback or event to give you the result, it is non-blocking
11:34 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:34 < SiPlus> if it returns the result immediately, it's blocking
11:34 < faceleg> weeeel
11:35 < faceleg> I don't think so
11:35 < faceleg> wht about a C function that read a file and returned the content?
11:35 < faceleg> or a C function that operated on an existing pointer?
11:36 < faceleg> if a C function just converted a const char* to a std::string for example
11:36 < faceleg> that wouldn't be blocking, would it?
11:37 < mmalecki> it'd, and in fact is
11:37 < faceleg> so *anything* done on the same thread right?
11:38 < peterschmidler> I have a app.post route which looks for some post data if available, saves it and then should close. Is that possible? Right now The browser is "waiting for node" infinitely.
11:38 < faceleg> because I just had a sinking feeling that I was taking async too far with nodegit (wrapper for libgit2)
11:38 < faceleg> converting C++ methods that did their C calls on the main thread to methods that performed the calls on diff threads and called callback
11:39 < skieter> Interesting output on npm website: `npm install undefined` https://npmjs.org/package/mootools-slick-parser
11:39 < faceleg> my philosophy has been "it is blocking"
11:39 < faceleg> for all the things
11:39 < faceleg> mmalecki: am I being insane or is this the right thing to do?
11:40 < peterschmidler> Then, after a while I get a Proxy Error
11:40 < mmalecki> faceleg: I only try to make I/O and heavy computation asynchronous
11:41 < mmalecki> rest doesn't make sense, really
11:42 < Gottox> faceleg: in fact, implementing a simple type conversation in unblocking C++ will be slower than calling it blocking.
11:42 < faceleg> Gottox: mmalecki dammit!
11:42 < faceleg> how can I know what is worth asyncing?
11:42 < faceleg> just io?
11:44 < Gottox> Measure.
11:44 < peterschmidler> Can I have a post route without a reditrect?
11:44 < Gottox> as soon as there are syscalls or busyloops involved it _can_ be slower, but it doesn't has to.
11:45  * faceleg holds ctrl+z
11:52 < faceleg> and I thought I was so clever asyncing everything
11:54 < Sven_vB> peterschmidler, do you send any data to the browser before ending the connection?
11:54 < Sven_vB> -connection +request
11:54 < peterschmidler> Sven_vB: no
11:54 < peterschmidler> Sven_vB: How can I end the connection?
11:55 < Sven_vB> peterschmidler, which framework do you use?
11:55 < peterschmidler> Sven_vB: Express
11:57 < peterschmidler> Sven_vB: I want to check the submit credentials and add an authentication flag to the user's session to know about his role and rights...
11:57 < peterschmidler> ^ For any future requests
11:58 < Sven_vB> i'd have thought it had res.end(), but seems not to
11:59 < peterschmidler> Sven_vB: Is there a safe way to redirect where the user came from?
12:00 < peterschmidler> Sven_vB: AFK, thanks anyway ;)
12:08 < gudmundur> faceleg: I went through a everything async phase as well. :)
12:11 < faceleg> gudmundur: pleased to hear it. this has been my first foray into node native modules
12:11 < faceleg> taking over maintanence of an exisitng module
12:12 < faceleg> have been going nuts asyncing everything thinking itwas the right way
12:12 < faceleg> now I have to go bac and sync a majority of it, hilarious!
12:12 < faceleg> :P
12:12 < gudmundur> what mmalecki mentioned above seems to be the right balance, if whatever you are doing is using io or is intensive, use async.
12:13 < faceleg> gudmundur: the source of the C lib i'm wrapping is open
12:13 < faceleg> so I can just inspect the functions I am wrapping and decided I think
12:13 < faceleg> decide*
12:19 < zot1> is there a difference between using .As<String>() and .ToString()?
12:22 < gudmundur> zot: neither looks like JavaScript to me.
12:32 < zot> they are v8 code for node extensions
12:32 < zot> sorry, should have framed that :)
12:34 < dob__> I want to create a sync query stream from my mongodb. In the stream I want to create new streams to find data for specific dates... Is something like that possible?
13:16 < mscdex> anyone compile node with emscripten?
13:16 < mscdex> :-D
13:21 < SomeoneWeird> mscdex, haha i've thought about it
13:23 < theblackbox> is anyone using Testacular/Karma?
13:24 < theblackbox> I'm drawing a blank when trying to figure out how to load socket.io.js
13:27 < wereHamster> is there a simple way to 'stream' the output from a browserify pipeline into a callback? Something like .pipe(function(output) { ... })? Or do I have to create a through stream myself and capture the output manually?
13:31 < substack> wereHamster: https://npmjs.org/package/concat-stream
13:53 < sordina3> Is anyone using node-orm2 with postgres? I can't get model synchronization to work.
13:53 < sordina3> Is there a way to dump the sql generated?
14:01 < wereHamster> substack: hi :) And thanks.
14:02 < wereHamster> substack: do transforms in browserify work on single files only? Or is it possible to write one that works on the whole bundle (so that it could sort the module order)?
14:06 < mokush> does anybody have any idea how I could bypass this issue, and actually ignore folders with .foreverignore? https://github.com/nodejitsu/forever/issues/235
14:06 < spion> wereHamster I usually write a "supermodule" that requires all submodules I want bundled.
14:07 < spion> wereHamster, oops, sorry, misread your question
14:07 < wereHamster> spion: my problem is that the order of the modules in the bundle is not stable, so the bundle hash changes each time I create the bundle.
14:08 < spion> wereHamster, I think that you will need to use the separate browserify parts to do reordering
14:08 < wereHamster> looking through browserify-middleware, it sets ETag = md5(content), so that's not going to work well
14:08 < MonkeyData> I'm new to node.js.. Is it true that node limits any callback/processing to 5ms?  (and if exceeded, it aborts the callback)  I am wondering because although I understand node is single threaded and meant for high throughput network-type programming, it would still be useful/interesting to use node for general purpose programs (ie, command-line utilities that perhaps process large files).  
14:08 < spion> module-deps -t transform main.js | insert-module-globals main.js | do-things-before-bundling |  browser-pack > bundle.js
14:11 < spion> at that phase in the pipeline you get a list of modules and their source code right before the packing - you can read more about the input that browser-pack expects here - https://github.com/substack/browser-pack
14:11 < wereHamster> spion: how would I write that with the API? It's not a transform, is it?
14:11 < wereHamster> (because transforms work on individual files, not the pack)
14:11 < spion> its not a transform, correct.
14:12 < spion> and I don't think browserify exposes hooks in that part of the pipeline yet, but you can use the separate tools (module-deps, insert-module-globals and browser-pack)
14:13 < wereHamster> is there a chance that browserify will expose API for that?
14:14 < spion> wereHamster, I don't know
14:15 < peterschmidler> How can I make the parameters (page, posts) in the following route optional, so that '/' is catcher by that route returning req.params.page = null and req.params.post = null?    -->    app.get '/:page/:post' 
14:16 < tclarke> I'm trying to install a module with npm install..it requires an external library not in a standard location so I'm getting a build error...not sure how to specify the install location or additional include directories
14:16 < spion> wereHamster, why would the module order change every time though?
14:17 < JamesMGreene> isaacs: Why is it that glob will only work if there are wildcards?
14:17 < pachet> what's the lib it's looking for
14:17 < pachet> tclarke^
14:18 < wereHamster> spion: my guess is because the directories and files are scanned asynchronously
14:18 < tclarke> pachet: trying to install the zeromq module...my zmq install is in /usr/local/zmq3 not /usr or /usr/local so it can't find zmq.h
14:19 < spion> wereHamster, ah right.
14:19 < wereHamster> spion: I create the bundle from ~130 individual files, that's enough that multiple readFile's finish in different order each time
14:20 < spion> the hook in the pipeline you probably need is right after module-deps
14:20 < MI6> joyent/libuv: Ben Noordhuis v0.10 * 0fb9b22 : build: simplify .buildstamp rule (+2 more commits) - http://git.io/vi-RCg
14:20 < JamesMGreene> isaacs: e.g. if I put "fixtures/test1.txt", the glob won't find anything... but "fixtures/*.txt" and "fixtures/**/test1.txt" both find results
14:21 < wereHamster> spion: or right before browser-pack :)
14:21 < MI6> joyent/libuv: Ben Noordhuis master * 73524cd : Merge remote-tracking branch 'origin/v0.10' (+8 more commits) - http://git.io/SuvH5A
14:21 < mokush> is it possible to use node-supervisor, somehow like https://github.com/nodejitsu/forever-monitor ?
14:24 < phrearch> hey
14:25 < phrearch> im trying to make my script executable with a shebang, but somehow it cant find env or node
14:25 < phrearch> like #!/usr/bin/env node
14:25 < phrearch> my node version is in /usr/bin/node
14:25 < phrearch> not really sure why it fails to find node
14:26 < pachet> tclarke: tried ln -s /path/to/zmq /wherever/zmq?
14:27 < tclarke> that's not an option...I'm linking against a different version than the system install so /usr/include has a zmq.h just the wrong one
14:27 < mscdex> phrearch: you have /usr/bin/env and `which node` works?
14:27 < phrearch> could it have to do with the file's encoding?
14:27 < phrearch> mscdex: yea both are in /usr/bin/ which node works
14:27 < mscdex> wait, both?
14:28 < tclarke> I can't do something like "CFLAGS=-I/usr/local/zmq3/include ./bin/npm install zmq" which seems a little silly...there must be a way to configure non-standard lib locations
14:28 < phrearch> mscdex: yes
14:28 < mscdex> phrearch: did you install node using your package manager?
14:29 < phrearch> mscdex: indeed. pacman -S nodejs
14:29 < phrearch> :)
14:29 < pachet> ack
14:29 < mscdex> phrearch: what does `node -v` display?
14:29 < phrearch> v0.10.0
14:30 < phrearch> i have a custom npm dir specified in my ~./npmrc 
14:30 < spion> wereHamster, I think you can simply sort the module array and browser-pack will not mind - it only requires the main file at the end so the definition order shouldn't really matter.
14:31 < phrearch> prefix = /home/myuser/npm
14:31 < pachet> :[
14:32 < mscdex> phrearch: dunno, '#!/usr/bin/env node' works for me
14:32 < creationix> phrearch: what does `which node` output?
14:33 < phrearch> creationix: /usr/bin/node
14:33 <@isaacs> JamesMGreene: seems to work for me.
14:33 < phrearch> http://paste.kde.org/709490/
14:33 < phrearch> this is the file im trying to execute
14:33 <@isaacs> JamesMGreene: > require('glob').sync('test/root.js')
14:33 <@isaacs> [ 'test/root.js' ]
14:34 <@isaacs> JamesMGreene: silly question, but is fixtures/test1.txt the filename?
14:34 <@isaacs> JamesMGreene: is it a case-sensitive fs?
14:34 < creationix> phrearch: strange, running bash?
14:34 < phrearch> creationix: yup
14:35 < phrearch> http://paste.kde.org/709496/
14:35 < phrearch> this is the result from bash
14:35 < JamesMGreene> isaacs: yes, no (and I have the "nocase" option set anyway)
14:35 <@isaacs> k
14:36 < JamesMGreene> and I set the cwd option appropriately
14:36 < mscdex> phrearch: chmod +x lessio.js
14:36 < roel_> hello anybody made or knows a great cluster-manager for nodeJS?
14:36 <@isaacs> JamesMGreene: still seems to wfm
14:36 <@isaacs> > require('glob').sync('test/root.js', {nocase:true})
14:36 <@isaacs> [ 'test/root.js' ]
14:36 < phrearch> mscdex: got that
14:36 <@isaacs> JamesMGreene: what os?
14:36 <@isaacs> JamesMGreene: windows?
14:36 < baranaby> I could have sworn the osx node installer package had an uninstaller... I'm trying to downgrade v0.10 to v0.8 (a couple modules I'm using aren't compatible) any tips anyone? :/
14:36 < mscdex> :S
14:37 < euoia> baranaby: nvm?
14:37 <@isaacs> C:\Users\Isaac Schlueter\project>node
14:37 <@isaacs> > require('glob').sync('foo/bar.txt',{nocase:true})
14:37 <@isaacs> [ 'foo/bar.txt' ]
14:37 <@isaacs> JamesMGreene: ^
14:37 < baranaby> euoia: ah, let me rty
14:37 < phrearch> hm
14:37 <@isaacs> JamesMGreene: what version of glob?  `npm ls glob`
14:37 < phrearch> when i make the same env with vim, it works
14:38 < phrearch> it seems like kate injects some evil sj*t in the file
14:38 < phrearch> ok, i guess it shouldnt be utf8
14:38 < phrearch> my bad
14:39 < mscdex> heh
14:39 < lovemuffin> good morninggggggg noode
14:40 < pachet> good morning peewee
14:40 < pachet> the word of the day is
14:40 < pachet> ...i cant think of anything clever
14:40 < baranaby> euoia: ugh, would be nice if nvm installer didn't presume bash was my shell :/
14:41 < euoia> baranaby: hmm I use zsh and I didn't have a problem with it
14:41 < euoia> baranaby: actually not true - that was on a different machine
14:41 < baranaby> euoia: running the curl install.sh from https://github.com/creationix/nvm ?
14:42 < baranaby> oh maybe I got it working
14:42 < euoia> baranaby: I guess you'll need to do manual install and open an issue :D
14:42 < baranaby> euoia: derp, I forgot the period-space to source the nvm.sh when I added it to my .zshrc ;)
14:44 < TGYoshi> Is there any way to easily get some UID of a socket when using net.Server?
14:48 < phrearch> file -bi lessio.js
14:48 < phrearch> should be application/javascript; charset=us-ascii
14:48 < phrearch> somehow kate likes to make it application/javascript; charset=utf-8
14:49 < wereHamster> TGYoshi: what is a UID of a socket?
14:49 < context> whats wrong with utf8 ?
14:49 < context> i save /all/ files i edit in utf8
14:49 < wereHamster> I save files on punchcards ;)
14:50 < TGYoshi> wereHamster: Some quick way to get an unique number related to that single connection/socket.  .NET has it so maybe node has it too.
14:50 < phrearch> context: bash doesnt seem to handle utf8 encoded files
14:50 < phrearch> at least not with the shebang stuff
14:50 < context> phrearch: you just dont have your bash setup properly
14:50 < context> this is 2013 not 2005
14:50 < wereHamster> TGYoshi: generate a unique id when you open the socket and save it on the socket/connection.
14:50 < context> if bash didnt support unicode NO ONE would use it
14:50 < phrearch> context: yea, googling for that. should work with utf8
14:51 < wereHamster> phrearch: are you sure it's not a problem with BOM rather than UTF8?
14:51 < phrearch> wereHamster: bom?
14:51 < context> http://perlgeek.de/en/article/set-up-a-clean-utf8-environment
14:51 < TGYoshi> You can safely put a variabele.. e.g.    server = net.createServer(function(sock) { var id = GetId(); ......... }   and the id will be persistent?
14:51 < context> and make sure your terminal supports utf8 as well
14:52 < howdynihao> TGYoshi, nah
14:52 < context> im honestly surprised distro's dont just default to utf8 on * now
14:52 < TGYoshi> sock.id = ... would work then? :P
14:52 < wereHamster> TGYoshi: the id will exist as long as it's in the context of a function
14:53 < howdynihao> TGYoshi sure that works
14:53 < TGYoshi> well now both things work :P
14:53 < TGYoshi> Let me try sock.id first, seems more logical
14:55 < wereHamster> TGYoshi: In the first case, you pass around the tuple (sock, id), in the second case you pass aroud sock (and access its id as sock.id). Both are equally valid solutions.
14:55 < kenperkins> morning folks
14:56  * kenperkins books trip to Nodeconf today :D
14:57 < TGYoshi> sock.id seems to work, thanks all
14:58 < TGYoshi> Those nested functions and variables "remaining valid" then feels to weird
14:59 < howdynihao> what do you mean remaining valid? in your example id doesnt persist
15:00 < howdynihao> var id = getid 
15:01 < JamesMGreene> isaacs: latest glob, 3.1.21
15:01 < JamesMGreene> isaacs: on Windows
15:01 < JamesMGreene> (MinGW, if it matters)
15:02 < TGYoshi> howdynihao: just in general, the whole usage of socket for example. The socket var in the server object callback is still usable in e.g. data events.
15:06 < howdynihao> TGYoshi, oh i see, but you do know that it won't always be the same socket?
15:07 < JamesMGreene> isaacs: Magically working now. WTF. Thanks anyway!
15:08 < JamesMGreene> isaacs: Oh, I think my glob options weren't getting merged with my defaults properly before. My bad
15:08 < howdynihao> TGYoshi, that is, its not persisting the var 'sock' , it just happens you name it sock everytime and all that
15:09 < TGYoshi> Whatever :P
15:14 < MI6> joyent/node: Ben Noordhuis v0.10 * 0e08e14 : doc: fix formatting in tty.markdown  Fixes #5135. - http://git.io/O-poEg
15:24 < peterschmidler> I use a route like this app.get('/:page?') and it seems that it's always executed twice, since a console log gets outputted twice. Any ideas how this comes?
15:25 < SomeoneWeird> peterschmidler, why the ?
15:26 < peterschmidler> SomeoneWeird: it makes it optional, I thought...
15:33 < trippeh> I cant get npm to work in a NAT64 environment.
15:34 < trippeh> It insists on trying to connect to ipv4 even with no ipv4 route on system
15:39 < MI6> joyent/node: Ben Noordhuis v0.10 * a80a132 : doc: child_process: document 'error' event  Fixes #5130. - http://git.io/0a7w_g
15:42 < trippeh> Hmm.. works if I ovveride with nat64 address for registry.npmjs.org in /etc/hosts ..
15:57 -!- mode/#Node.js [+o sblom] by ChanServ
15:57 < pats_Toms> ahh, I can't understand how to write function with callback
15:57 < pats_Toms> someone have any link? 
15:58 < marcules> pats_Toms, just pass the function as a variable
15:58 < marcules> And then call the variable within
16:04 < pats_Toms> I really don't know how to explain my goal. I have required module (If I can name like that) where I have function - last. I wan to get that functions return from my parrameters. I know that return is wrong... 
16:05 < howdynihao> pats_Toms: http://hastebin.com/gakehuvute.js does this help?
16:06 < howdynihao> you're just passing functions as arguments
16:07 < pats_Toms> yeah, I got it
16:07 < pats_Toms> seems like I structure my code wrong
16:07 < pats_Toms> need to change login in my head
16:07 < hlucas> just make sure to not call the function by adding parenthesis
16:07 < pats_Toms> I am using hogan as templateing engine
16:08 < howdynihao> does that matter?
16:08 < pats_Toms> and I need to create js object for my views
16:08 < slicky> Anyone here looking for some temp work or available to work freelance with a node.js project?
16:08 < howdynihao> i see
16:08 < pats_Toms> is there any way to get var something = random.get()
16:08 < pats_Toms> or something like that...
16:09 < howdynihao> yea, just have random.get return
16:09 < pats_Toms> I tread it but it's always undefinced
16:10 < gaf> why the copyright of node.js is joyent? does ryan sold it?
16:11 < howdynihao> its always been joyent as far as i know, ryan works or worked at joyent when he created it
16:12 < gaf> I always thought that the inventor would hold intellectual copyright no matter where he worked. unless, he was the owner of the company, imho
16:12 < diogogmt> I'm having some problems in installing only one library from the dependency list of my project, here is the output: http://pastebin.com/WWR500Xe
16:13 < diogogmt> any ideas why only scrypt would fail? I'm running everything as root
16:14 < cboden> I'm using NVM and on any node/npm I've tried npm fails with either "run as root" (which I don't think I should need to do) or "nom ERR! cb() never called!".  I've verified node and npm binaries point to the correct .nvm folder.  I'm on Ubuntu 12.10 64bit.
16:17 < Varian_> Anyone have example code for using sockets to create a terminal? Need something very basic to understand sockets, as well as how to customize my commands.
16:19 < howdynihao> gaf: yea i guess, but without joyent its hard to say if node.js would even exist, you know what i mean?
16:25 < gaf> guess so
16:32 < pats_Toms> seems like I am doing wring something with waiting for database response
16:32 < pats_Toms> I have return ir mongoose execFind
16:33 < Daizz> great, for some reason powershell doesn't seem to recognize %appdata%\npm in the path and I can't run globally installed modules neatly now
16:34 < howdynihao> pats_Toms: if you're using something that requires a callback, you usually can not return , you have to provide a call back
16:35 < pats_Toms> so thats what I am asking, is there any way then?
16:36 < pats_Toms> howdynihao, the only way is to define var in callback?
16:36 < Daiz> oh great, fixed it
16:36 < howdynihao> pats_Toms: i dont follow, what do you mean define var 
16:40 < pats_Toms> howdynihao, check this example https://gist.github.com/patsToms/655725cd5f0285065af4
16:42 < howdynihao> the spacing is hard to read :P and weird
16:43 < pats_Toms> sry, just a fast copy&paste
16:43 < howdynihao> pats_Toms: http://hastebin.com/xibudelovi.coffee
16:43 < howdynihao> i dont know what objects, object, and tag are 
16:44 < howdynihao> but thats the basic idea
16:44 < pats_Toms> yeah, seems ok
16:44 < pats_Toms> but what If I have variables from multiple functions?
16:45 < pats_Toms> :/
16:45 < pats_Toms> like last, first and so on...
16:45 < pats_Toms> any ideas then?
16:46 < slicky> hrm.. it's difficult finding people for nodejs projects...lol geekli.st is having all sorts of errors and linkedin is like pissing in the ocean... *sigh* :D
16:46 < howdynihao> pats_Toms: do you really need to do that? , if you do, you'd do the same thing but multiple times, or use something like the 'async' module
16:46 < slicky> Anyone have suggestions on other places to look/post jobs/temp work?
16:47 < pats_Toms> ok, howdynihao 
16:47 < pats_Toms> thanks
16:47 < noducks> Slicky - Maybe try Odesk.com
16:48 < slicky> thanks noducks
16:48 < noducks> np
16:54 < LuckyBurger> slicky, im looking for work :D
16:56 < oxyc> why is no `end` event emitted on streams (stdin) in node 0.9.4-0.9.11? http://pastebin.com/xGcY6sNk
16:57 < oxyc> how should I close the stream in those versions? 0.8.1-0.9.3 and 0.9.12 upwards work with the pastebin i posted
16:58 < MI6> joyent/node: Trevor Norris master * ccda6bb : buffer: remove _charsWritten  _charsWritten is an internal property that  - http://git.io/NKKP-g
17:00 < dazoe_> some people.... idiots.... my job is the backend. jim's job is the html and css... he was having a positioning problem that he couldn't figure out for two days. I solved it in 5 minutes, UGH
17:00 < Sven_vB> i know that feel :(
17:02 < perlitch> anybody available to help me with the making my browserify transform work with the -t option via command line? I can only get it to work within a js build script: https://github.com/andyperlitch/knights-templar-br
17:03 < perlitch> bin cmd is here: https://github.com/andyperlitch/knights-templar-br/blob/master/bin/cmd.js
17:08 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
17:21 < MI6> joyent/node: isaacs master * 2eb8478 : test: Use 'close' event in simple/test-repl-timeout-throw - http://git.io/gIg_Xg
17:26 < Anup> I am following the node async module. I have created a sample demo under this url: http://pastebin.com/nBLjUUK9
17:26 < peterschmidler> I have an app.get and app.post with the same route e.g. ('/:page?/:post?) When I log req.params for the uri /foo/bar app.get gives me 'foo' and 'bar' and app.post only 'foo'. With a trailing slash both behave similar. Why? And how can it be prevented?
17:27 < Anup> I am confused with the different outputs 
17:27 < Anup> any ideas?
17:27 < oxyc> how can I close a stdin stream in node 0.9.4-0.9.11? The following works automatically pre 0.9.4 and post 0.9.11: http://pastebin.com/xGcY6sNk
17:34 < StephenS> we da releast
17:36 < SomeoneWeird> Anup, why are you confused?
17:36 < SomeoneWeird> one is returning an object, the other is returning an array
17:36 < Anup> the sequence of output confuses me...
17:37 < Anup> if async.parallel used with arrays it shows "1" ,"2" . But via object notation it shows the reverse
17:38 < SomeoneWeird> ah, it's probably just the way async assigns stuff to the object
17:38 < SomeoneWeird> or they keep the values for the array one in a temp array, and each function pushes to a certain spot, then that's returned
17:39 < Anup> what to prefer then? because when used via array notation, setTimeout holds no significance
17:39 < SomeoneWeird> it does
17:40 < SomeoneWeird> it's the way they're pushed into the resulting array
17:40 < SomeoneWeird> you just don't notice it
17:40 < SomeoneWeird> Anup, if you switch the 1 & 2 around, then you'll see
17:41 < Anup> array notation or object notation?
17:42 < Anup> thats strange....
17:42 < Anup> how come its behaving that way?
17:43 < SomeoneWeird> <SomeoneWeird> it's the way they're pushed into the resulting array
17:43 < SomeoneWeird> go through async's code and i'm sure you'll see
17:47 < Anup> ok so in case of array, the setTimeout has no impact at all....
17:47 < Anup> because the order is important here..
17:47 < Anup> am i correct?
17:48 < niggler> anyone familiar with tools to show your keystrokes during a screen recording?
18:03 < ganzuul> hmm
18:03 < s5fs> niggler: crap, i watched a bunch of vim videos a few months ago and one presenter had an app that did exactly that. i'll see if i can find it.
18:04 < niggler> s5fs I am currently playing with the osx default (the character viewer) and it isn't bad
18:04 < niggler> except that if they are going to show the keyboard, i wish they did popups like with the iOS keyboard (this version just highlights the depressed keys in grey)
18:05 < s5fs> interesting, i don't run osx and am constantly amazed by little things like t hat
18:05 < niggler> I've run OSX for more than 10 years and still find myself discovering new things lol
18:09 < matbee> niggler, even that enter renames files? lolmacfail
18:09 < matbee> niggler, ctrl+X doesn't cut files, lol
18:09 < matbee> err cmd+x, lol
18:09 < niggler> tbh matbee i do most file manipulation via cmdline
18:10 < matbee> I would too in that case, lol
18:10 < matbee> (im loling because i have massive applehate)
18:10 < niggler> i used to, matbee, but i think that the windows ecosystem has really faltered in the past 10-15 years
18:10 < niggler> so in a sense there's really no compelling alternative
18:11 < matbee> niggler, but, how could you do that to yourself... it can't even full screen without disabling your other monitor...
18:11 < niggler> matbee what do you run in full screen?
18:12 < matbee> xchat, firefox, sublime
18:12 < niggler> (honest question -- i usually have at least 10 windows open looking at different things)
18:12 < niggler> you run browsers in fullscreen?
18:12 < matbee> yessir
18:12 < niggler> how do you look at multiple browsers side by side?
18:12 < matbee> side by side? multiple desktops
18:12 < niggler> or handle websites that are designed to be viewed in 1024x768
18:13 < niggler> seems like a massive waste of space
18:13 < matbee> Oh, I don't care if they're designed for it
18:14 < s5fs> haha, I just got a ticket to update a canvas-based UI so it can work on 512x768 screens (ie, two browsers side-by-side in 1998)
18:14 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:15 < matbee> niggler, experience full screen, you'll change your mind
18:15 < matbee> also, how the heeellll can you have icons jump up and down
18:15 < nathan7> s5fs: I have a 1366x768 screen, if I tile two things, that's 683x768
18:15 < matbee> i would literally throw my mac
18:15 < niggler> matbee I'm pretty sure 3840x2400 screen won't take too kindly to a full-screen view of anything
18:16 < matbee> niggler, thats weird, i didn't know macbook air's had that kind of display
18:16 < matbee> ^_^
18:16 < strk> I'm using fs.createReadStream('bigfile').pipe(express_result); // and getting NO error, NO CPU activity and NO result, ideas ?
18:16 < niggler> macbook pro 15 inch but you need RDM to display it
18:16 < AAA_awright> Node.js is just that efficent
18:16 < strk> this is when bigfile is around 1GB (1062731776)
18:17 < AAA_awright> Try asking it to sum all the numbers from 1 to infinity
18:17 < strk> works fine with 16MB of a file
18:17 < AAA_awright> hmm
18:17 < niggler> the higher retina resolution is 1920x1200 (HiDPI) which is actually rendered at 3840x2400 and scaled down -- the software lets you render directly at the higher resolution
18:17 < strk> this is from firefox, which also seems to be sending the same request twice (maybe because it takes a long time)
18:18 < AAA_awright> >> var i = 0; for(var j=1; j<1/0; j++) i+=j; i
18:18 < purr> AAA_awright: Timeout Error: Execution time exceeded 2 seconds
18:18 < AAA_awright> Well it was worth a shot
18:18 < strk> the "error" event isn't invoked
18:18 < niggler> >>> 1/0 @ AAA_awright 
18:18 < purr> AAA_awright: (number) Infinity
18:19 < matbee> niggler, too much of Apple just isn't up to modern standards, i can't ever do it until then
18:19 < niggler> define "modern standards"
18:21 < howdynihao> it comes with a two button mouse! zing
18:21 < s5fs> matbee: yeah, i'm not sure what you mean but would love to hear more
18:22 < s5fs> i've been looking for a replacement laptop and want something nice like a mbp but non-apple. so far i've narrowed it down to a dell xps 15, but there's not much else out there that i trust will run linux w/o too much hassle.
18:26 < euoia> niggler: screenflick captures the keyboard... You can choose how it is rendered (font size, delay, etc) after you finish recording
18:28 < niggler> howdynihao lol i haven't used the mouse in a long while
18:29 < niggler> euoia that mouse effect is pretty cool
18:57 < ujjwalt> any idea how to watch a file descriptor
19:02 < gildean> ujjwalt: you mean like fs.watch?
19:02 < ujjwalt> yeah but i have a fd not a filename
19:02 < ujjwalt> i guess that was possible in iowatcher
19:02 < ujjwalt> any hack?
19:03 < NodeNewb> what's the secret to installing socket.io on a windows machine? I've installed Visual C++, Visual Studio 2010, .NET 3.5, Windows SDK for Server 2008...no bueno
19:04 < matbee> NodeNewb, it works fine!
19:04 < matbee> From what I remember, anyway
19:04 < NodeNewb> matbee I must be doing something wrong then, I get an error when I do "npm install socket.io" telling me to install all of the items above
19:05 < NodeNewb> basic gist is it "Could not load hte Visual C++ component VCBuild.exe"
19:06 < NodeNewb> even though I have that file like 9 times (in different versions) on my computer...and I don't want to move the wrong one into windows/system32
19:06 < ujjwalt> how do i watch a fd?
19:12 < gildean> NodeNewb: iirc someone else had that problem, and it was because on win 7 64bit you needed some patch to make things work 
19:13 < NodeNewb> ok...I'm assuming this doesn't happen on Linux
19:14 < niggler> NodeNewb did you try running within the vcvars.bat CMD?
19:14 < niggler> the one that sets up the visual studio environment vars
19:15 < NodeNewb> niggler any idea where I'd find that?
19:15 < niggler> usually somewhere in the windows menu, its called "visual studio command prompt" or something
19:17 < ujjwalt> people anyone's got any idea please?
19:17 < ujjwalt> how to watch a fd
19:18 < bnoordhuis> ujjwalt: watch it for what?
19:18 < ujjwalt> i want fs.watch but for file descriptors
19:18 < bnoordhuis> ujjwalt: you're not making much sense so far :)
19:18 < ujjwalt> bnoordhuis I want to watch for changes on a file descriptor
19:19 < ujjwalt> i don't have the filename
19:19 < niggler> ujjwalt where are you getting the file descriptor from?
19:19 < nathan7> outer space
19:19 < ujjwalt> from a c++ binding
19:19 < bnoordhuis> what kind of file descriptor is it? is it a socket, file, pipe, something else?
19:20 < niggler> nathan7 the gods came down and blessed you with an FD to read from heaven
19:20 < niggler> digital moses
19:21  * nathan7 nods
19:21 < ujjwalt> its a file
19:21 < nathan7> a divine file descriptor like thus must certainly be watched over
19:21 < nathan7> *like this
19:21 < ujjwalt> its the fd of the file to which i am writing my tcp dump from libpcap
19:23 < bnoordhuis> ujjwalt: you can't watch file fds like you can other kinds of fds, they're always readable/writable
19:23 < bnoordhuis> iow, you should just read from / write to it
19:24 < bnoordhuis> see e.g. fs.createReadStream({ fd: fd })
19:24 < ujjwalt> but how do i know wether something has been written to it or not/
19:24 < bnoordhuis> ujjwalt: you mean concurrently?
19:25 < bnoordhuis> i.e. there's another process writing to it while you're reading from it?
19:25 < NodeNewb> niggler -- that got me closer, but still erroring...I'm thinking this isn't worth it on windows and might switch to linux...
19:25 < ujjwalt> bnoordhuis i just want to get notified whenever this file gets modified
19:25 < ujjwalt> yeah pcap is writing to it
19:25 < niggler> NodeNewb "might switch to linuxâ€¦" that is a good idea 
19:25 < ujjwalt> not another process i guess
19:25 < fayimora> Nodemailer has an option "to" for a list of recipients. Problem is, it takes a string why not an array? Some design principle i'm missing?
19:25 < NodeNewb> any recommendations for basic IDE (I use SublimeText2) editing from a windows machine to a linux VM?
19:25 < bnoordhuis> ujjwalt: if you don't know the filename, use fs.fstat(fd) and setInterval
19:26 < bnoordhuis> that is, fstat the file descriptor every second or so and see if the mtime and/or filesize changes
19:26 < ujjwalt> hmmmmm
19:26 < ujjwalt> that sounds good
19:26 < niggler> NodeNewb most VMs have some sort of file sharing (if you do it locally)  if not, i thought sublime text 2 runs on linux
19:27 < NodeNewb> it's linux server
19:27 < ujjwalt> is it anyway possible to create a temp file and assign it the same fd
19:27 < ujjwalt> :p
19:27 < NodeNewb> I tried using ST2 over SSH but it's...bad
19:28 < Daiz> there's some plugin for ST2 to sync files to a remote server, so basically edit things locally and it automatically syncs over SSH to the remote location
19:28 < Daiz> don't remember the name though
19:29 < NodeNewb> yeah I was using that (SFTP), it's just too slow, and if I git it takes forever to sync all the new files
19:30 < NodeNewb> I just want to edit directly on the file system...didn't know if there was an easier way than setting up a samba share / network drive
19:38 < s5fs> NodeNewb: I'm using virtualbox and have had success using the "Shared Folders" feature to expose the host filesystem to the guest.
19:39 < s5fs> NodeNewb: that being said, developing across two machines isn't fun, the workflow gets clunky really quickly.
19:39 < faceleg|work> bnoordhuis: i'm an idiot
19:39 < NodeNewb> s5fs thanks, I'll give that a try...and yeah, I'm finding that out...wondering if cloud9 would be  a better option
19:39 < bnoordhuis> faceleg|work: self-insight is the first step
19:40 < faceleg|work> I went mental and asynced all the getter-wrappers
19:40 < faceleg|work> even those that basicall did return struct->entry
19:40  * niggler pets faceleg|work 
19:40  * faceleg|work purrs
19:40 < s5fs> NodeNewb: really depends on what you're doing. i mean, if you're just trying to get your arms around how node works, i'd assume windows would be "good enough". it just doesn't happen to be the platform of choice, so it's harder to get support.
19:40 < faceleg|work> bnoordhuis: niggler now I have to go through commit history and restore / modify those getters that actually don't block
19:40 < faceleg|work> I hate it.
19:40 < faceleg|work> :P
19:40 < niggler> hopefully now you've learned something 
19:41 < faceleg|work> I've learned all the things
19:41 < niggler> you know the saying about employees who really mess up badly
19:41 < NodeNewb> s5fs: trying to understand sockets, and it appears the be the one thing that doesn't work well with windows...just my luck :)
19:41 < faceleg|work> niggler: no, what? Usually I just get in massive trouble
19:41 < s5fs> NodeNewb: haha! well there you go, need drives technology selection.
19:41 < niggler> oh no something about how they've learned their lesson and won't ever repeat those mistakes
19:42 < niggler> "very expensive lesson" i forget the exact phrase
19:42 < faceleg|work> niggler: unless there isn't a culture of testing
19:42 < faceleg|work> then the mistakes get repeated but not noticed
19:42 < s5fs> if it's unnoticed, did it really happen?
19:43 < niggler> s5fs you wake up and find your mistake plastered all over the new york times or wall street journal
19:43 < faceleg|work> if something breaks then yes
19:44 < janmower> Mistakes: It could be that the purpose of your life is only to serve as a warning to others.
19:44 < faceleg|work> lol
19:44 < faceleg|work> that's a pretty deep thing for a lawnmower to say
19:44 < Snugug> Anyone in here use Jade and can help me with an issue? Trying to pass a variable into an include file, doesn't seem to be working. Is it possible?
19:45 < faceleg|work> more things than you can imagine are possible
19:46 < Snugug> faceleg|work: Know how I can get it to work then?
19:46 < faceleg|work> although I think, luckily, I asynced mostly those methods that were actually blocking
19:46 < faceleg|work> and just deleted the getters
19:46 < faceleg|work> so should be "easy" to revert
19:46 < segomos> faceleg|work: yea but is it webscale
19:46 < Snugug> sorry, not directed at me
19:46 < faceleg|work> Snugug: I'm not sure, but if you want actual help I recommend creating a hastebin.com example
19:47 < faceleg|work> segomos: if the getters just return things that already exist in memory then yes
19:47 < faceleg|work> segomos: but I might make the JS accessor async just to make sure
19:47 < segomos> that doesn't seem webscale 
19:47 < segomos> webscale means your memory is shared across webs 
19:47 < segomos> otherwise how can you scale webs when your memory is gone
19:48 < faceleg|work> truth
19:49 < d2dchat> I'm trying to use lodash to convert an object with camel cased keys to an object with underscored keys. Anyone have a good idea how to do this? I took a look at _.merge, but the callback only returns the values, not the keys nor the object it is recursively merging.
19:52 < segomos> d2dchat: can't you just inherit the _.assign and do your transform there?
19:54 < ljharb> d2dchat: var converted = Object.keys(orig).reduce(function (converted, key) { converted[toCamelCase(key)] = orig[key]; return converted; }, {});
19:54 < ljharb> no underscore required.
19:54 < segomos> d2dchat: https://gist.github.com/tony-o/5248593
19:54 < ljharb> assuming you have a toCamelCase function, and you're not insane for trying to automatically munge strings :-p
19:55 < ljharb> segomos: modifying a third-party lib is even worse than using one unnecessarily.
19:55 < segomos> ljharb's solution would be better, i assum you're using lodash for some ungodly reason in the first place aside from trying to convert keys
19:55 < d2dchat> ljharb: I want to convert to underscore
19:55 < d2dchat> ljharb: from camel
19:56 < ljharb> d2dchat: ok then s/toCamelCase/toUnderscore in my code. and make your little function to do the conversion. easy peasy.
19:56 < segomos> ljharb: i've made the assumption that he wants to use that lib for some other crap
19:56 < ljharb> still no library required.
19:56 < segomos> ljharb: i also didn't suggest he use any library
19:56 < ljharb> i don't ever assume someone's right to be using underscore/lodash :-p
19:57 < d2dchat> ljharb: what is orig? BTW I'm using spidermonkey hahaha.... maybe I should go to #javascript
19:58 < d2dchat> (because of couchdb)
19:58 < segomos> d2dchat: what are you trying to do?
19:58 < segomos> why are you using _
19:58 < ljharb> d2dchat: "orig" is your original object
19:58 < ljharb> d2dchat: and everything i gave you is native ES5
19:58 < d2dchat> segomos: was using _ because I thought that merge would do the trick
19:59 < segomos> d2dchat: just get the object and change all the keys
19:59 < segomos> instead of using _
19:59 < ljharb> you can't change keys, and 'delete' is very slow. that's why i suggested reduce to create a new object.
20:00 < segomos> i understand this, it also causes problems if you mixed bag of camel and _ to begin with
20:00 < nathan7> https://github.com/substack/camelize/blob/master/index.js
20:03 < ljharb> segomos: it only causes problems if you're stuck in Java and are doing automatic conversion of strings to other strings.
20:03 < segomos> what do you mean stuck in Java?
20:03 < ljharb> there you go, looks like (surprise!) substack made a module for it
20:03 < ljharb> segomos: i dislike any string algorithms to magically change or assume things about strings based on camelcasing or underscoring. keys and names are for human consumption.
20:03 < ljharb> and any string algorithm that makes me put "Url" or "Id" is just evil.
20:04 < d2dchat> ljharb: this algo you gave me isn't recursive :(
20:04 < _br_> Has anyone a good tutorial on how to use bowerjs with requirejs ?
20:04 < ljharb> d2dchat: see https://github.com/substack/camelize/blob/master/index.js as nathan7 recommended
20:04 < nathan7> d2dchat: https://github.com/substack/camelize / https://github.com/substack/camelize/blob/master/index.js
20:04 < segomos> ljharb: i need recursion bro
20:05 < nathan7> camelize recurses
20:05 < d2dchat> ljharb: hmm, that is to camel case, not too underscore
20:05 < nathan7> ah
20:05 < nathan7> d2dchat: a moment
20:05 < ljharb> i'm sure substack has "snakeize" or something
20:05 < d2dchat> nathan7: haha funny that there is a lib completely dedicated to camel :)
20:05 < nathan7> d2dchat: Hm?
20:05 < d2dchat> nathan7: this lib needs a camel ascii
20:06 < nathan7> d2dchat: substack writes tiny, focused libs
20:06 < nathan7> It's lovely
20:06 < d2dchat> nathan7: it's nice yea :)
20:06 < nathan7> It's a fairly defining feature of node.js culture
20:06 < d2dchat> nathan7: they just need snakes and underscores :)
20:07 < nathan7> sorting snakeize
20:07 < segomos> we need nodejs to turn into jquery
20:07  * jocafa sets jquery on fire
20:07 < jocafa> no.
20:07 < segomos> lol
20:08 < niggler> segomos what would it be called?
20:08 < niggler> noquery?
20:09 < segomos> jquery++
20:09 < sorensen> https://github.com/tblobaum/nodeQuery
20:09 < sorensen> or that
20:09 < niggler> lol nquery
20:09 < nathan7> cheerio!
20:09 < segomos> nquery is a good name
20:11 < d2dchat> might release a underscored lib
20:11 < d2dchat> based on this walk function
20:11 < d2dchat> name suggestions?
20:12 < segomos> underscoredlib
20:12 < nathan7> segomos, d2dchat: https://github.com/nathan7/snakeize
20:12 < ljharb> nathan7: lol, nice
20:13 < nathan7> wait, shit
20:13 < d2dchat> nathan7: close but not quite!
20:13 < nathan7> d2dchat: why?
20:13 < segomos> nathan7: i like how the output is the same as the input
20:13 < nathan7> segomos: whoops
20:13 < segomos> also, i don't care either way what he uses :)
20:13 < d2dchat> nathan7: I don't need snaking
20:14 < d2dchat> nathan7: I need underscoring
20:14 < nathan7> d2dchat: what's the difference?
20:14 < ljharb> snake_case is another name for underscored
20:14 < d2dchat> nathan7: https://github.com/epeli/underscore.string/blob/master/lib/underscore.string.js#L330
20:14 < nathan7> docs fixed
20:14 < d2dchat> nathan7: ah ha
20:14 < nathan7> d2dchat: https://github.com/nathan7/snakeize#example
20:14 < segomos> snakilate would be a cool name too
20:15 < nathan7> snakeize it is q=
20:17 < d2dchat> nathan7: thx for your badass lib :)
20:17 < nathan7> d2dchat: it's substack's lib with a few changes
20:18 < d2dchat> nathan7: yup, did you run the tests btw?
20:18 < RGBboy> Does anyone know of anywork that has been done with distributed object capabilites and node?
20:18 < nathan7> d2dchat: yep
20:18 < nathan7> d2dchat: I adjusted those too
20:18 < nathan7> d2dchat: Just need to sort travis/browserling
20:18 < d2dchat> nathan7: what if my keys start capitalized?
20:18 < nathan7> d2dchat: then it'll add a _
20:18 < nathan7> d2dchat: at the start
20:18 < d2dchat> nathan7: anyway to fix that?
20:19 < segomos> RGBboy: what kind of distrubted object capabilities
20:19 < nathan7> d2dchat: hmm, let's see
20:19 < d2dchat> nathan7: I was using Golang, and not I'm using all javascript so.. unfortunately I have docs with keys LikeThis :(
20:21 < RGBboy> segemos: i am trying to get my head around how an ocap system can be persisted between server shutdowns. I've been reading a lot of mark millers papers and wathing his vids but i havent been able to find an answer.
20:22 < d2dchat> nathan7: could just remove the _ from the beginning of the string, but that might introduce unexpected behavior for people that expected it to produce an underscore at the beginning 
20:22 < ljharb> d2dchat: if your keys start capitalized, you shouldn't be running them through an underscoring algorithm
20:23 < ljharb> since in both camelcase and snake case that's invalid.
20:23 < nathan7> d2dchat: that'd break '_privateVar'
20:23 < nathan7> d2dchat: giving 'private_var'
20:23 < nathan7> d2dchat: I just pushed a fix
20:23 < nathan7> d2dchat: with tests, too
20:24 < d2dchat> ljharb: nathan7 didn't even think about the private keys
20:24 < ljharb> has nothing to do with it. if a key starts with a capital letter, it's not camelcase, so you can't put it into something that expects it
20:24 < ljharb> and if it starts with an underscore, it's not camel or snake case.
20:25 < d2dchat> ljharb: it only started with an underscore because it was converting keys that started with a capital letter
20:26 < ljharb> well then those keys were invalid to begin with
20:26 < d2dchat> ljharb: I agree with your general sentiment that perhaps it should be run through a downcasing of the first letter first though
20:26 < nathan7> That's what I do
20:26 < d2dchat> ljharb: but I'm glad nathan7 was able to account for this edge case as I'm sure others will have the issue
20:26 < nathan7> https://github.com/nathan7/snakeize/commit/386b862f5eaa7af50cbd36decc1db494ccbc8c51
20:26 < d2dchat> nathan7: works perfectly btw :)
20:26 < d2dchat> nathan7: ty!!
20:27 < d2dchat> nathan7: my only issue I have to fix is another stupid inconsistency with my keys.. AccountID = account_i_d haha.. ugh
20:27 < d2dchat> nathan7: I don't think your lib should account for this
20:28 < nathan7> d2dchat: +1
20:28 < ljharb> d2dchat: it'd be better if you just didn't autotransform your key names at all :-p
20:28 < d2dchat> ljharb: what is the alternative?
20:29 < d2dchat> ljharb: manually doing a data transforming to all of my documents?
20:29 < nathan7> It's a one-char fix
20:29 < tim_smart> 'readable' event question: Does read() consume data or just access it? Can I have several 'readable' listeners or do I still have to use 'data' events in that case?
20:29 < ljharb> d2dchat: why do you need to transform them in the first place?
20:29 < ljharb> they're keys. they're not meant to be changed
20:29 < d2dchat> ljharb: I'm using couchdb
20:29 < d2dchat> ljharb: and I want to convert my keys
20:30 < ljharb> right. that last one's what i'm questioning
20:30 < ljharb> if youre using couchdb, just use whatever it uses :-p
20:30 < ljharb> don't fight your tools
20:30 < d2dchat> ljharb: couchdb doesn't enforce any key format
20:30 < d2dchat> ljharb: I create one, and I changed my mind about which format I wanted
20:30 < nathan7> CouchDB is JS-land
20:30 < ljharb> lol ok, so you're just looking for a one-off script to do the conversion
20:30 < ljharb> that makes sense
20:31 < segomos> d2dchat: is going to change anything functionally or just so you don't have to look at CamelCase
20:31 < d2dchat> ljharb: exactly :)
20:31 < nathan7> https://github.com/nathan7/snakeize/commit/845c90ec210b6a4aebdd097a21bf3cfbb7ad010a
20:31 < nathan7> I ought to start doing LaaS
20:31 < nathan7> (Libraries as a Service)
20:31 < segomos> if it's the latter, it sounds like a waste of time
20:31 < d2dchat> nathan7:  ;)
20:31 < nathan7> it's like this, except I'm paid for it
20:32 < niggler> nathan7 i'll pay you with page views and animated gifs
20:32 < nathan7> also, I'm going to use the fuck out of this
20:32 < d2dchat> nathan7: if you come to Ann Arbor, I will get you drunk
20:32 < nathan7> GitHub API is all rubyist with underscores
20:32 < segomos> eww ann arbor
20:32 < d2dchat> segomos: go away OSU ;)
20:32 < segomos> lansing all the way!
20:32 < d2dchat> segomos: haha
20:33 < segomos> i'm from jackson
20:33 < d2dchat> segomos: we have a fellow Spartan in the office
20:33 < nathan7> d2dchat: almost 4000km away q=
20:33 < d2dchat> nathan7: well, the offer is open any time ;)
20:34 < d2dchat> nathan7: AccountID = account_id woohoo
20:34 < nathan7> [=
20:34 < niggler> I've seen people write AccountId d2dchat 
20:34 < nathan7> Yeah
20:34 < nathan7> I tend to do that
20:35 < nathan7> You can't losslessly convert AccountID to underscore-style
20:35 < nathan7> unless you take ID as an edge case
20:35 < niggler> account_i_d looks strange
20:35 < niggler> and offends my sensibilities
20:35 < nathan7> mhm
20:35 < d2dchat> ;)
20:35 < nathan7> it's not semantically equivalent to AccountID
20:35 < nathan7> account_id is
20:36 < rgl> hi
20:36 < ljharb> but then you have to make a list of initialisms
20:36 < ljharb> like ID, URL, HTTP, HTML, etc
20:37 < ljharb> hence why string algorithms are stupid
20:37 < d2dchat> ljharb: no need to get offensive towards algos :)
20:38 < d2dchat> ljharb: I'd argue that every problem you'd ever need to solve in this world requires some sort of context. In which case everything is stupid
20:38 < rgl> I'm having trouble trying to connect to an https site... I tracked it down... the tls module does not seem to be able to connect (do the handshake) for some reason... can you look at http://pastie.org/7129048  and try yourself? getting data from google works fine...
20:39 < ljharb> d2dchat: string manipulation algorithms solved a nonexistent problem a long time ago but everyone keeps using them :-p
20:39 < ljharb> camelcase et al, i mean
20:42 < d2dchat> ljharb: well for the rest of us that's like code that doesn't have to detect differences between key names, we'll stick to our algos
20:42 < ljharb> i still don't understand when you'd need to use them. one-off conversions don't count.
20:42 < d2dchat> segomos: who do you work for in Jackson?
20:53 < _br_> Does anyone have a clue how to connect requirejs and bower? 
21:10 < kenperkins> flights & tickets booked :P
21:11 < ericelliott> I have node services that require a small amount of time to load configuration data, connect to databases, etc... before they can take requests. What is the best way to make sure that all the pre-flight is done before kicking off my API tests (I'm using supertest.. my server won't even accept connections until it has run through its start up process).
21:14 < Slaytorson> Okay, I think I am going insane.. Does anyone know what the heck is going on? I am trying to install compoundjs into my app directory. I have v1.1.5-21 listed in my package.json and I do "nom install" and everything seems to install just fine. Then I proceed to "compound init blog" and I get this "-bash: compound: command not found".. Is there something I am missing here??
21:15 < Slaytorson> npm install *(Not nom install)
21:15 < niggler> part of the problem is that you are running nom lol
21:16 < niggler> did you globally install compound?
21:16 < Slaytorson> I guess I shouldn't eat the packages anymore.. lol
21:17 < Slaytorson> I didn't install globally. I was trying to install within my app directory.
21:17 < tjfontaine> then add node_modules/.bin to your path
21:17 < niggler> that seems like a horrible back tjfontaine 
21:18 < gildean> or just run ./node_modules/bin/compound init blog
21:18 < niggler> at least the package should say preferGlobal:true
21:18 < ericelliott> niggler: is that more horrible than installing modules globally that could be installed locally?
21:18 < niggler> ericelliott the right thing to do is to write a shell script that checks for both
21:18 < Slaytorson> Easy folks!
21:18 < slajax> Anyone see vim using coffee style syntax? I just upgraded vim and now all the sudden it's using short hand for reserved words.
21:18 < niggler> if [ -e node_modules/.bin/whatever ]
21:19 <@mbalho> if you have a package called 'foo' in your devDependencies and you have a npm start script that has 'node foo' it will automatically map 'foo' to './node_modules/foo/bin/foo' or whatever the bin entry is
21:19 < slajax> "this" is now "@", "function" is now "f" - When I select that line it goes back to the normal way
21:19 < Slaytorson> That sounds like what I want..
21:19 < slajax> It's some neat feature that I have but I don't have any idea how I did it
21:19 < ericelliott> mbalho: thanks. =)
21:19 < slajax> I tried upgrading to the same vim on a diff osx and no luck
21:20 < ericelliott> mbalho++
21:20 < slajax> I know it's not node related really but damn, i wish I could figure out what I did so I can do it again
21:20 < ljharb> slajax: what's in your vimrc?
21:20 < niggler> mbalho is there anyway to invoke names in the `bin` option?
21:21 <@mbalho> niggler: what?
21:21 < azylman> slajax: Could try asking in the #coffeescript channel
21:21 < NodeNewb> ok...I switched to linux from windows to get socket.io to work...had to create a shared folder to an ubuntu vm so I can edit easily on windows...but socket.io won't install on a symlink =/
21:22 < niggler> mbalho I use the `bin` field of package.json to specify a program
21:22 < slajax> azylman: yeah i thought about it, i'm not sure it's actually cs though
21:22 < Slaytorson> even if I put the dependency in devDependencies, it still does not work.
21:22 < niggler> https://github.com/Niggler/js-xlsx/blob/master/package.json#L10 <-- like this, which installs xlsx2csv in the bin directory
21:22 < Slaytorson> I have ./node_modules/.bin 
21:22 <@mbalho> niggler: i dont know wha t'invoke names' means
21:22 < Slaytorson> shouldn't the folder be bin (with no dot)
21:23 < niggler> I have a line in package.json that says "bin": {"foo":"bar"} and I want to run foo
21:23 < tjfontaine> niggler: I wasn't suggesting it was ideal, but you have to realize that there are people out there who run around with '.' in their path
21:23 < NodeNewb> is there an easier way to use windows (sublime text 2) to edit and save directly to an Ubuntu VM without having to use the ST2 SFTP package (way too slow) or shared folders (npm hates symlinks for socket.io)
21:23 < niggler> tjfontaine that's horrible
21:23 < tjfontaine> niggler: be that as it may, those people exist
21:24 < d2dchat> nathan7: one last edge case :) IDAnnotation = i_dannotation
21:24 < niggler> should I sully my bashrc with that monstrosity tjfontaine 
21:24 < azylman> NodeNewb: Why not share without using symlinks?
21:24 < tjfontaine> niggler: I guess that depends on your ethos :)
21:25 < NodeNewb> azylman apparently, I have to...it's the way virtualbox works with the 12.10 kernel
21:25 < Slaytorson> I'm not sure why my bin path is .bin? Seems like yours isn't
21:25 < NodeNewb> I can't read the share directly because of "unknown filesystem"
21:26 < ljharb> NodeNewb: why aren't you editing your code on your local machine and sharing it down to the vm?
21:26 < ljharb> git is abysmally slow through nfs
21:26 < NodeNewb> ljharb I am...it's all edited on a local drive, but I run node on the VM...I can't install socket.io on windows at all
21:27 < ljharb> install? it's just an npm module
21:27 < azylman> Sounds like a bug with either socket.io or npm if npm won't install socket.io to a symlinked directory fyi
21:27 < nathan7> d2dchat: oh shit
21:27 < nathan7> d2dchat: I.. I have a plan
21:27 < NodeNewb> ljharb it uses visual c++ to compile
21:27 < d2dchat> nathan7: you are the man :)
21:27 < ljharb> nathan7: you'll want to do a regex match for all [A-Z]+, and work on those :-p
21:27 < ljharb> NodeNewb: so? compiled deps should work on windows too
21:28 < NodeNewb> it errors looking for my visual c++ compiler every time. I've installed Windows SDK for 2008, Visual C++ Studio, Visual Studio 2010, .NET 3.5...everything that's been recommended
21:28 < mscdex> SDK for 2008?
21:28 < nathan7> d2dchat: hrm
21:29 < NodeNewb> mscdex yep, that's what it said to install
21:29 < mscdex> Windows 7.1 SDK ?
21:29 < nathan7> d2dchat: okay, this is a nasty one
21:29 < NodeNewb> I'm on Windows 8, I even tried that
21:29 < NodeNewb> that SDK, I mean
21:29 < d2dchat> nathan7: haha luckily I only have a few stupid keys like this hehe
21:29 < mscdex> oh Windows 8 :\
21:29 < d2dchat> nathan7: and was easily able to manually change them
21:29 < d2dchat> nathan7: but who knows, someone might have 1,000 docs haha
21:30 < mscdex> i thought VS2012 had to be used for Win8?
21:30 < NodeNewb> I installed that, too
21:30 < mscdex> did you get the right Win8 SDK? there are two versions, only one of them is for desktop applications
21:30 < NodeNewb> I'm fine switching back to linux, I just want an IDE that works well
21:31 < NodeNewb> zero issues installing socket.io on linux...and my production env (if I ever get there) will be linux
21:31 < FunnyLookinHat> NodeNewb, Sublime Text ?
21:32 < NodeNewb> yes I use sublime text, on windows...my server is linux server
21:32 < FunnyLookinHat> No I mean - it runs on Linux too if you want to switch back.
21:32 < FunnyLookinHat> Running Linux on both your dev and server environment makes life so much easier...  :)
21:32 < NodeNewb> I'd have to run the desktop version of Linux
21:32 < NodeNewb> which I'm fine doing, if that's my only real option
21:33 < mscdex> NodeNewb: did you install vs2012 express or full?
21:33 < NodeNewb> mscdex express
21:33 < NodeNewb> I also ran the vcvars.bat and the vcvars64.bat to set my environment variables
21:34 < NodeNewb> all I got was a different error about the VC*something*UI.dll not found when I did the npm install
21:35 < NodeNewb> so it changed the error message, but still no go
21:35 < mscdex> NodeNewb: did you install "VS2012 Express for Windows Desktop" or "VS2012 Express for Windows 8" ?
21:35 < MI6> joyent/libuv: Ben Noordhuis master * 76d831e : unix: getaddrinfo_cb status arg should be 0 or -1  The documentation in u - http://git.io/I-zB5g
21:35 < mscdex> the former is the one you need
21:36 < NodeNewb> mscdex VS2012 for Windows Desktop
21:36 < mscdex> did you install vs2010 after vs2012?
21:37 < NodeNewb> vs 2010 first...uninstalled, then vs2012 desktop...uninstalled that and tried MS Visual C++ Express
21:37 < mscdex> NodeNewb: what are the errors that you get?
21:39 < NodeNewb> There have been a few, but the one I get now is "E:\node\terminal\node_modules\socket.io\node_modules\socket.io-client\node_modules\ws\build\bufferutil.vcxproj(3,14): error MSB4066: The attribute "Label" in element <ItemGroup> is unrecognized."
21:42 < _br_> If I'm in a js file, is there any way to find out what .html file loaded it?
21:42 < _br_> (without manually passing some parameter)
21:42 < mscdex> NodeNewb: sounds like you're missing .NET 4.0 version of msbuild
21:42 < mscdex> or node-gyp isn't picking it up if it actually is installed
21:43 < NodeNewb> mscdex do I need the 4.0 SDK? I have the "multi-targeting pack" for 4.0
21:44 < NodeNewb> I have 3.5 SDK, 4 Multi-Targeting Pack, 4.5 Multi-Targeting Pack, and 4.5 SDK installed
21:44 < ljharb> _br_: in the browser, or in node? this isn't ##javascript
21:45 < mscdex> hrmm
21:45 < _br_> ljharb: My bad, let me ask that again in ##javascript... thanks
21:46 < mscdex> NodeNewb: what node version do you have installed?
21:46 < NodeNewb> 0.10.1
21:47 < NodeNewb> again, I'm fine switching back to linux, if you or anyone can recommend a good IDE to edit files on a linux server VM
21:48 < RLa> you edit on terminal?
21:48 < Bansku> vim?
21:49 < mscdex> NodeNewb: 64-bit win8?
21:50 < NodeNewb> mscdex correct
21:51 < mboro> can anyone tell me what's going on when internal server error occurs? I can't access my custom methods. example: http://pastie.org/private/7s2tqnejyxf7jfvrzunfeg
21:52 < NodeNewb> RLa no, would like to edit using sublime text 2 or something similar, directly on the file system of the VM...not a fan of vim
21:52 < mscdex> mboro: what custom methods?
21:53 < mboro> I've set a `t` method in requests that I use for translation
21:53 < mboro> works fine for all other routes (including 404 page not found)
21:53 < mboro> (req.t)
21:53 < RLa> NodeNewb, you mean you edit directly on the server, or remotely on your machine though mounted share?
21:54 < RLa> NodeNewb, for editing files with gui i prefer kate
21:54 < NodeNewb> RLa Edit remotely on my machine (Win8) to a linux server inside a virtualbox
21:55 < RLa> so you need a windows editor instead?
21:55 < mscdex> mboro: are you sure using 'err' as the first parameter in the callback is valid?
21:55 < mscdex> for app.use() ?
21:56 < mboro> mscdex: I was looking at this page where they do so: http://www.hacksparrow.com/express-js-custom-error-pages-404-and-500.html
21:57 < NodeNewb> RLa preferably, but I'm thinking my only other options are to spin up a linux desktop VM or try using samba & map a drive to it
21:57 < RLa> NodeNewb, or use X server running on windows and displaying gui app running in the server vm
21:57 < RLa> there are lots of options
21:58 < mscdex> mboro: i've never seen that before and cannot find any special cases for that in connect/express. have you tried removing that parameter?
21:58 < RLa> NodeNewb, i would install gui on the server then full-screen vm window and do all work there
21:59 < RLa> NodeNewb, that's good way to soon ditch windows as you won't need it anymore
21:59 < NodeNewb> RLa thanks, I think I just might do that...
22:00 < mboro> mscdex: if I remove the param, app.use doesn't seem to catch errors
22:00 < RLa> unless you need stuff that runs only in windows i really do not see a reason to dev on it
22:00 < NodeNewb> RLa I do need it...unfortunately
22:00 < mscdex> mboro: what version of connect and express are you using?
22:01 < RLa> NodeNewb, for running X on win: http://sourceforge.net/projects/xming/
22:01 < mboro> mscdex: newest stable version of express: 3.1.0
22:02 < RLa> NodeNewb, with that, your gui apps from the server (which is X's client) appear as native window windows
22:03 < NodeNewb> RLa thanks, very cool...going to give that a shot
22:03 < mboro> mscdex: I think app.use(function(error, req, res, next) { is the proper way to do it as it catches the errors. my `locals` just aren't present for some reason. well, perhaps because an internal server error occured
22:06 < mscdex> mboro: so `typeof req.t` inside the callback displays 'undefined' ?
22:07 < mboro> mscdex: yes
22:07 < mboro> mscdex: and req.locals is a function and not an object anymore
22:07 < mscdex> shouldn't it be res.locals ?
22:07 < mscdex> i dunno
22:08 < mboro> mscdex: yes, sorry. res.locals is a function and not an object and req.t is undefined
22:10 < mscdex> mboro: what does the function source look like?
22:11 < mboro> mscdex: for req or res.locals?
22:11 < mscdex> res.locals
22:11 < mboro> res.locals() => undefined
22:11 < mboro> the error is a stylus error - don't know if that has anything to say
22:12 < garage00> node noob  and installing geddy jake, is it normal that it's installing several other files ? barista, inflection, uglify... etc ?
22:16 < slicky> what was the site with the greppable logs for this channel? Wasn't there one with a search feature?
22:22 < FunnyLookinHat> slicky, http://www.irclog.org/network.php?net=freenode   ?
22:22 < slicky> I was thinking of http://irclogger.com/.Node.js/2013-03-26
22:22 < slicky> but i thought it was grep/searchable
22:22 < slicky> i guess not though
22:23 < FunnyLookinHat> yeah Control+F is about as good as you'll get short of pulling them all down and grepping yourself :)
22:23 < slicky> oh well, guess I'll just pull em down and do it myself
22:23 < slicky> lol yeah :D exactly
22:24 < diogogmt> anybody ever had this error before : `sh "-c" "node-gyp rebuild"` failed with 127 ??
22:24 <@TooTallNate> diogogmt: is there anything else displayed on the terminal?
22:25 < tjfontaine> slicky: http://lmgtfy.com/?q=site:logs.nodejs.org%20slicky
22:25 < diogogmt> TooTallNate: yes
22:25 < diogogmt> http://pastebin.com/c6HeeYQe
22:25 < diogogmt> it's failing when I install bcrypt 
22:26 <@TooTallNate> diogogmt: don't use sudo
22:26 < diogogmt> TooTallNate I'm logged in as root
22:26 <@TooTallNate> diogogmt: ok wellâ€¦ do you need to be?
22:26 <@TooTallNate> diogogmt: if yes, then use --unsafe-perm=true
22:26 < context> logged in as root and you are getting permission denied ?
22:26 <@TooTallNate> with npm
22:27 < diogogmt> TooTallNate: I
22:27 <@TooTallNate> context: npm downgrades permissions of spawned child processes
22:27 <@TooTallNate> context: when run as "root"
22:27 < MI6> joyent/node: Ben Noordhuis master * 8548920 : openssl: make sed tool configurable  Those poor sods on systems where /us - http://git.io/3mt9zQ
22:27 < context> ahh
22:27 < diogogmt> TooTallNate: I'm deploying this application and I'm trying to debug the problem for one of the clients
22:27 < diogogmt> TooTallNate: apparently they like to run everything as root 
22:27 < context> sounds secure
22:27 < context> i really hate how npm wants to force sudo sometimes
22:27 <@TooTallNate> diogogmt: well just pass --unsafe-perm=true thenâ€¦
22:28 <@TooTallNate> context: npm discourages sudo in my experience
22:28 <@TooTallNate> i absolutely *never* use it with sudo at least
22:28 < diogogmt> TooTallNate: cool, thanks
22:28 < context> i refused to install some package cause it was doing sudo
22:28 < diogogmt> TooTallNate: so nom spawns a new process to build bcrypt and that process doesn't have sudo permissions?
22:28 < diogogmt> TooTallNate: but why would that still fail the installation?
22:29 < diogogmt> and running as a normal user wouldn't ?
22:29 <@TooTallNate> diogogmt: correct
22:29 <@TooTallNate> diogogmt: idk why it would fail exactly
22:33 < NodeNewb> anyone have (or know of) example code for a "fake" terminal/console using socket.io and custom commands with arguments?
22:34 < NodeNewb> e.g., an html form passes user input directly into the stream or the server can, at interval, push data back
22:41 < howdynihao> hmm oreilly has some sweet deal going on
22:41 < howdynihao> buy x, get x free
22:44 < harrisonm> NodeNewb: In theory you could access stdin and stdout as streams from a web app, but there's a lot of security concerns with taking input from a web form and piping that into terminal programs
22:44 < harrisonm> seems to me
22:45 < NodeNewb> harrisonm it wouldn't be a "real" terminal...more like a simulation where I have control over the commands
22:46 < asturel> anyone did paypal pdt in nodejs?
22:46 < NodeNewb> so if they type "rm -rf *" and there is no command set up, it would throw an error
22:46 < asturel> or is there a way to handle old phplike get parameters in express?
22:46 < asturel> like ?x=1&y=2 ..
22:47 < harrisonm> oic.  None off the top of my head
22:48 < harrisonm> asturel: http://expressjs.com/api.html#req.params
22:48 < howdynihao> thats just query strings, yea it does that
22:49 < asturel> ah thanks
22:49 < faceleg|work> howdynihao: are you chinese?
22:50 < faceleg|work> or half texan/chinese
22:51 < howdynihao> something like that
22:51 < faceleg|work> lol
22:52 < howdynihao> its actually an inside joke
22:52 < faceleg|work> inside whom?
22:52 < howdynihao> thats the point of it being inside, you on the outside!
22:52 < faceleg|work> y'all
22:54 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
23:01 < howdynihao> why did twilight sparkle become a pegasus, thats so weird
23:02 < faceleg|work> surprised there is no autokick for "twilight"
23:02 < howdynihao> why would there be
23:03 < ljharb> pretty self-evident
23:04 <@Nexxy> ljharb, don't hate
23:04 < ljharb> :-p
23:04 <@Nexxy> you're a sparkly code princess
23:04 <@Nexxy> you can't deny your heritage
23:04 < howdynihao> your cutie mark is a #
23:04 < ljharb> i never said anything about a horse.
23:04 <@Nexxy> excuse me, pony*
23:05 < faceleg|work> DID SOMEONE SAY PONY
23:05 < faceleg|work> OMG I LOVE PONIES
23:05 <@Nexxy> I'm surprised there's no #ponyjs
23:05 <@Nexxy> TBQH
23:06 < s5fs> Nexxy: sounds like an opportunity for someone to be awesome
23:06 < s5fs> 4p scotch at the office, woo!
23:06 <@Nexxy> [19.02.48] Â»Â¡Â« Channel #ponyjs created Tue Mar 26 19:02:48 2013
23:07 <@Nexxy> s5fs, oh someone must have done something heroic
23:07 < s5fs> Nexxy: yah, i punched javafx right in it's face
23:07 <@Nexxy> \o/
23:07 < s5fs> minor miracles, i have a functional checkbox in a tableview. now i can select records like a bozz.
23:07 < faceleg|work> was anyone here when I was moaning about how I "foolishly" asynced all the things in nodegit?
23:07 < faceleg|work> s5fs: been there, well done
23:08 < s5fs> faceleg|work: thx, feels good. been a bear.
23:08 < s5fs> i learned i'm not a gui programmer, haha! i knew that, but now it's confirmed.
23:08 < faceleg|work> gui != frontend 
23:08 < faceleg|work> fmi
23:09 < faceleg|work> so anyone here when I was harping on about asyncing things in V8 and how it's sometimes a bad thing?
23:09 < ljharb> when is that
23:09 < s5fs> faceleg|work: i'm working on a desktop application
23:09 < faceleg|work> s5fs: I feel your pain
23:10 < s5fs> misery does love company haha!
23:10 < faceleg|work> ljharb: when calling C functions that are just accessing a struct's member
23:10 < faceleg|work> ljharb: well I talked to one of the libgit2 (lg2) devs
23:10 < ljharb> faceleg|work: what's the difference if its async?
23:10 < faceleg|work> who said that without inspecting source it is impossible to say whether a lg2 func is blocking
23:10 < faceleg|work> ljharb: none if it ijust accessing
23:10 < faceleg|work> but the point I'm about to make is
23:11 < faceleg|work> that you can't tell - sometimes a lg2 func does more than that, for example git_oid_from_commit 
23:11 < faceleg|work> might do an odb lookup or might now
23:11 < faceleg|work> not*
23:11 < ljharb> right, that's why it's better to always be async
23:11 < faceleg|work> where I have been going 
23:11 < faceleg|work> is removing the sync accessors from V8/JS
23:11 < faceleg|work> and either adding async versions
23:11 < ljharb> there's already a module to wrap all the sync things
23:11 < faceleg|work> or moving the functinoality into the actual async lookup
23:12 < faceleg|work> ok sure
23:12 < faceleg|work> but I'm doing this anyway
23:12 < faceleg|work> I just want to make sure I'm going in the right direction
23:12 < faceleg|work> I am allowed to do things that allow me to learn more about V8/node right? :P
23:12 < ljharb> well, rebuilding something that already exists isn't the right direction :-p
23:12 < faceleg|work> So for commit for example
23:12 < faceleg|work> ljharb: noted, ignore it for now
23:13 < faceleg|work> one does repo.commit(hash, func(e, commt) 
23:13 < faceleg|work> and to get the commit's details, ther eis commit.fetchDetails
23:13 < faceleg|work> which is async
23:13 < ljharb> ok
23:13 < faceleg|work> obj this is wrapped so for the user they get a commit with the dtails applied to it as poroperties
23:13 < faceleg|work> but previousl
23:14 < faceleg|work> the commit obj had getters that synchronously got the commit's details from lg2
23:14 < MI6> joyent/libuv: Ben Noordhuis master * 0635e29 : unix, windows: remove ngx-queue.h  Avoids an extra #include in public hea - http://git.io/edhyDQ
23:14 < ljharb> ok, well then that's a poor module design imo
23:14 < faceleg|work> what should I do instead?
23:15 < faceleg|work> when I came on as contributor to the project it was +1 year abandoned, and I have no prior exp in V8 
23:15 < faceleg|work> are you saying there *should* be sync accessors for details like commit.sha, commit.author etc?
23:15 < ljharb> no
23:15 < ljharb> i'm saying it should be 100% async
23:16 <@Nexxy> 110%*
23:16 <@Nexxy> just to be safe
23:16 < faceleg|work> yes I agree
23:16 < ljharb> or 100% sync , but certainly nowhere in between.
23:16 < ljharb> and async mo betta.
23:16 < faceleg|work> but last night I was on here and people were telling me I was wrong to do ti
23:16 < faceleg|work> ljharb: nothing I just described is sync
23:16 <@Nexxy> non-blocking is the secret in the async sauce
23:16 <@Nexxy> with it you go fast, without it you go slow
23:16 < faceleg|work> ljharb: I repeat I have written *no* sync code
23:16 < faceleg|work> my *problem* is that I've been *rewriting* sync to *be* sync
23:17 < faceleg|work> and was told I was overkilling it last night (~9 hours ago)
23:17 < ljharb> that's not a problem
23:17 < faceleg|work> ugh
23:17 < ljharb> that's how it should have been written in the first place.
23:17 < faceleg|work> wellt hat's exactly what I thought!!!!
23:17 < faceleg|work> so, I don't want to write async getters
23:17 < faceleg|work> for commit.author etc
23:17 <@Nexxy> faceleg|work, you kind of have to take IRC advice with a grain of salt sometimes
23:17 <@Nexxy> or occasionally more than a grain
23:17 < faceleg|work> so what I did was make a fetchDetails method
23:18 < faceleg|work> that is async, assume everything I'm talking about is async
23:18 < faceleg|work> that gets all commonly used details for the given commit
23:18 < faceleg|work> and then (in JS) adds those details as properties to the commit object
23:18 < faceleg|work> to the user, when they do (hastebin coming)
23:19 < ljharb> faceleg|work: i think the properties part is overkill.
23:19 < ljharb> faceleg|work: if there's an async method to get a property, that should be the only way to geti t.
23:20 < howdynihao> im going to use your git module
23:20 < howdynihao> have it ready for me
23:20 < faceleg|work> http://hastebin.com/leveyajiju.js
23:21 < faceleg|work> ljharb: I don't think that's very convenient though
23:21 < faceleg|work> As if one wants a commit they likey want its properties
23:21 < ljharb> consistency > convenience
23:21 < faceleg|work> I mean, I have when I'm using this module
23:21 < faceleg|work> this would make my example +50 lines long
23:22 < ljharb> so?
23:22 < ljharb> consistency is more important than brevity.
23:22 < faceleg|work> Nexxy: is it grain of salt time?
23:22  * faceleg|work is joking and does appreciate the advice
23:22 < ljharb> it's always grain of salt time.
23:22 < ljharb> but it'll be confusing for someone who sees code that accesses properties, and doesn't know to call the async method first.
23:23 < faceleg|work> I feel validated to have been removing the sync getters
23:23 < ljharb> it's less confusing if there's only one way to get properties.
23:23 < faceleg|work> As I said I do agree with yo
23:23 < faceleg|work> I just like the convenience
23:23 < faceleg|work> you*
23:23 < howdynihao> wait what
23:23 < howdynihao> is that your modules api?
23:23 < faceleg|work> is waht the api?
23:23 < howdynihao> the paste
23:24 < faceleg|work> yes
23:24 < howdynihao> i wouldve preferred something else
23:25 < faceleg|work> I inheritied it, started working on it some weeks ago
23:25 < faceleg|work> ljharb: like this? http://hastebin.com/sovonodupu.js
23:25 < faceleg|work> howdynihao: what would you prefer? make a hastebin to show me
23:26 < howdynihao> a query
23:26 < howdynihao> than nested callbacks
23:27 < ljharb> faceleg|work: yes. i'd use a promise if i wanted the code to be clearer
23:28 < howdynihao> faceleg|work: http://hastebin.com/yutubawiga.js
23:29 < howdynihao> something of those two varieties
23:30 < faceleg|work> ljharb: thanks for the advice, I'm going to think about it over lunch. Immediately I like the concept for obvious reasons. I don't konw if I want to do the refactoring required to use promises at this stage, partly because I don't know what it would involve, having no experience with them
23:30 < ljharb> sure
23:30 < faceleg|work> howdynihao: that is interesting, the former I think could be implemented on top of what I'm building right now
23:31 < faceleg|work> ljharb: would using promises require me to refactor code written with teh callback pattern?
23:31 < ljharb> only the portion that used a promise.
23:31 < ljharb> as little or as much as you like
23:31 < faceleg|work> ljharb: I'm sorry but that means too little to me, I"ve no exp with promises at all
23:32 < ljharb> then best not to use them just yet :-)
23:32 < faceleg|work> ljharb: yeah
23:32 < faceleg|work> my goal currently is to refactor the entire codebase to use the callback pattern, and thus be async
23:33 < faceleg|work> it's a pattern I've seen used almost across the board with node (though I have only a month or so exp with node)
23:33 < faceleg|work> and I grok it
23:33 < ljharb> it is nice and simple
23:33 < faceleg|work> given that I've had to learn C++, V8, I had little spare capacity for anything else
23:34 < ChrisPartridge> faceleg|work: I like the latter example you posted too, if someone wants to get ALL the details they can use an async lib and/or wrap it up in their own module
23:34 < ljharb> don't know why you'd need c++ for node, but ok
23:34 < ljharb> you don't *have* to work on c++ modules
23:34 < faceleg|work> ljharb: because this is a wrapper around libgit2, which is a C library
23:34 < faceleg|work> I chose to work on it, being forced by my desire to learn
23:34 < ljharb> gotcha
23:35 < faceleg|work> so in my case if I want to work on it I do have to learn it, no problem there
23:35 < faceleg|work> After thinking about what you suggested ljharb I will do this, you're right that consistency is paramount and I do want this module to represent "the way" to make node modules, not some hacky inconstent crap
23:36 < faceleg|work> to ameliorate the "lines of code" issues,
23:36 < faceleg|work> when I'm done refactoring the code base I will probably implement something like what howdynihao suggested
23:36 < asturel> whats the fastes way to transform key1=val1\nkey2=val2 to array?
23:36 < howdynihao> i believe in you
23:37 < context> heh
23:37 < context> an array or an object
23:37 < asturel> object
23:37 < ljharb> asturel: http://nodejs.org/api/querystring.html
23:37 < ChrisPartridge> asturel: querystring.parse
23:37 < context> split / loop / split / =
23:37 < asturel> i thought replace + json parse :D
23:38 < context> that works too if the keys and values are quoted
23:38 < context> replace + querystring.parse as well
23:38 < context> if its encoded correctly
23:38 < context> your question is very vague and by no way defines if your input is valid for either of those approaches
23:39 < ChrisPartridge> The querystring.parse method has a separator property, so no need to replace
23:39 < asturel> yeah querystring works like a charm ,thx
23:42 < tbrock> hey guys, I'm reading the learning node book and was having trouble with example 1-4, it seems to only execute 5 times
23:42 < tbrock> i think this might be related to how the http request only opens 5 sockets by default
23:42 < tbrock> but i would expect to see it run 2000 times unless i'm misunderstanding
23:44 < s5fs> tbrock: i don't know the book, nor the examples. more helpful to post code examples imho.
23:44 < tbrock> this is what it looks like: https://gist.github.com/TylerBrock/5250321
23:45 < s5fs> tbrock: how are you counting the hits?
23:46 < tbrock> well in the console it logs finished request
23:46 < tbrock> i only see 5
23:50 < s5fs> beats me, i don't see anything obvious that would limit the # of requests to 5
23:51 < cramrod> Is there anyone in here who is pretty good with MongoJS that might be willing to help me with a callback problem?
23:52 < ChrisPartridge> cramrod: just ask
23:53 < tbrock> s5fs do you get the same result under the latest node?
23:54 < s5fs> tbrock: sorry, i didn't run it. i'm working right now and my env is 0.8.x.
23:55 < cramrod> Im trying to load the results of a MongoDB find() into an array then execute a response.send containing the array.  Whats the best way to do this?
23:56 < monokrome> Can someone help me understand the point of "main" and "directories" in package.json? I can't figure out how to get my module to import properly
23:56 < monokrome> s/import/require/
23:56 < ChrisPartridge> cramrod: paste your code, or example of code in pastebin/gist
23:56 < ChrisPartridge> sending as JSON?
23:57 < ljharb> monokrome: https://npmjs.org/doc/json.html
23:58 < monokrome> Yeah, I read that :/
23:59 < monokrome> ljharb: I don't understand why this wont require
23:59 < monokrome> https://github.com/LimpidTech/inform
23:59 < context> monokrome: lets take this one at a time. whats complicated about main?
23:59 < monokrome> after building it with the Makefile
--- Log closed Wed Mar 27 00:00:10 2013
