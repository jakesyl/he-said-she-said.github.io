--- Log opened Tue May 21 00:00:02 2013
--- Day changed Tue May 21 2013
00:00 <@Nexxy> VMs mean extra work for people tho
00:00 < niix> hello everyone
00:38 < jaCen915> Hi, I've never seen this before and was wondering where it's documented for node…it involves an event emitted but is based on the uri path (assumption because the page is api/orders/)
00:38 < jaCen915> vent.on("api:orders:exception", function(order){
00:38 < jaCen915> vent.on("api:orders:change", function(newStatus, order) {
00:39 < jaCen915> the colon separated list is what I'm asking for documentation on
00:39 < othiym23> dang, I wander off to do work and now I find out that 'var existsSync = (fs.existsSync || path.existsSync)' is a terrible idea, for reasons I will never understand
00:39 < Havvy> jaCen915: If it is events.EventEmitter, the event is just a string with arbitrary text.
00:40 < Havvy> othiym23: Sounds fine to me.
00:40 < jaCen915> Havvy: right, but in this case the trigger is this...
00:40 < jaCen915> emitter.emit("change", this.currentStatus, this);
00:40 < othiym23> Havvy: better be, I've been using it for about six months now with no apparent problems
00:41 < jaCen915> Havvy: I'm taking this over for someone else…the comment mentions everything in this file is being broadcast as "api:orders"
00:41 < jaCen915> which matches the path
00:41 < Havvy> Then only callbacks that are listening to specifically "change" will fire. Unless there's something different (possibly on top of) an events.EventEmitter.
00:42 < othiym23> jaCen915: it's just a convention
00:42 < Havvy> What's the prototype of vent?
00:42 < othiym23> unless they've monkeypatched EventEmitter (baaaaaaaaaaaaaaaa...aaaaaad idea) the event name is just an opaque string to Node
00:42 < elliottcable> (baaaaaaaaaaaaaaaa...aaaaaad idea)
00:42 < elliottcable> lol'd.
00:43 < othiym23> 'a's elided for concision
00:43 < elliottcable> <3 othiym23
00:43 < othiym23> elliottcable: \o/
00:44 < jaCen915> Havvy: http://pastebin.com/84EpcYWt   
00:44 < jaCen915> as far as I can tell
00:45 < elliottcable> -wholoves othiym23
00:45 < purr> elliottcable: othiym23 is loved by elliottcable.
00:45 < elliottcable> see? see? I love you!
00:46 < elliottcable> nobody else. just me.
00:46 < Havvy> Then the colon thing shouldn't work with that.
00:46  * othiym23 keeps an eye peeled for elliottcable-shaped stalkers
00:46 < othiym23> also, that code no sense makes
00:46 < Havvy> Though there is an '*' event.
00:47 < jaCen915> heh my thoughts exactly…ill try and get in touch with the original programmer 
00:47 < Havvy> It makes sense to me.
00:47 < othiym23> it looks like it's just shoving an '*' onto the end of the emit call's arguments list
00:47 < othiym23> but WHY
00:47 < Havvy> The beginning
00:47 < othiym23> oh you right
00:47 < Havvy> >> ['b', 'c'].unshift('a')
00:47 < othiym23> but WHYER
00:47 < purr> Havvy: (number) 3
00:48 < Havvy> othiym23: Because the first parameter to emit is the name of the event.
00:48 < othiym23> haha yay JS arrays
00:48 < Havvy> Note that is emits the event twice.
00:48 < othiym23> pee-ewww
00:48 < othiym23> I do not like that code
00:48 < Havvy> Once with the usual arguments, and another with an '*' as the first argument.
00:48 < othiym23> yeah, I see it now
00:49 < othiym23> >> var lol = ['b', 'c']; lol.unshift('a'); lol
00:49 < purr> othiym23: (object) ['a', 'b', 'c']
00:49 < othiym23> you'd think after x years of hacking Perl I'd have the distinction between unshift and push straight
00:52 < ericelliott> othiym23: In your defense... the names aren't very helpful.
00:52 < Havvy> >> (function () { return ['*'].concat(arguments); }('a', 'b'))
00:52 < purr> Havvy: (object) ['*', {0: 'a', 1: 'b', callee: function () { return ['*'].concat(arguments); }, length: 2}]
00:52 < Havvy> :/
00:52 < ericelliott> othiym23: How about prepend / append?
00:52 <@isaacbw> lol
00:52 < Havvy> I just get shift and unshift confused personally.
00:52 < othiym23> putThisBeforeTheOtherStuff / putThisAfterTheOtherStuff
00:53 < ericelliott> othiym23: Yes, those are perfect names.
00:53 < othiym23> Havvy: you write much pre-OO Perl at all, you use shift millions of times a day
00:53 < elliottcable> I wrote a language. Ran into that exact problem.
00:53 < elliottcable> The naming I chose after literally a solid week of debate with my compatriots:
00:53 < elliottcable> prepend/append/unprepend/unappend
00:53 < chilts> heh
00:53 < elliottcable> to replace unshift/push/shift/i-forget-what-it-is
00:54 < chilts> I still like pop and push, shift is ok, but unshift is weird
00:54 < elliottcable> seemed the most consistent and sane.
00:54 <@isaacbw> you gotta have push and pop
00:54 < Havvy> https://gist.github.com/Havvy/5616810
00:54 < elliottcable> Considered aliasing them. Decided to leave that up to libside. append/unappend it was.
00:54 < ericelliott> isaacbw: Sure, but those can be aliases.
00:54 < chilts> push, pop, shift and prepend would work :)
00:54 < elliottcable> the other elliot(t)!
00:54 < Havvy> Is that event emitter more readable?
00:55 < elliottcable> -fistbump ericelliott 
00:55 <@isaacbw> woah, that was really confusing
00:55 < ericelliott> Hi elliottcable 
00:55  * elliottcable slaps purr
00:55 -!- mode/#Node.js [+o TooTallNate] by ChanServ
00:55 < elliottcable> -fistbump @ ericelliott
00:55 < purr> ericelliott: good work, comrade http://ihighfive.com/
00:55 < elliottcable> there we go.
00:55 < elliottcable> forgot how my own bot works. I might be slightly drunk.
00:57 < othiym23> are you sure it's not purr that's drunk?
00:57 < othiym23> purr always seems kinda buzzed to me
00:57 < ericelliott> whoah. That's pretty amazing. http://ihighfive.com/whale-high-five.php
00:58 < othiym23> that picture freaks me out about five different ways
00:58 < elliottcable> five.
00:59 < purr> I'm drunk.
00:59 < elliottcable> shit.
00:59 < ericelliott> soo.. the week Isaacs comes to the San Francisco office for a seminar, I'm in Seattle. =P
00:59 < ericelliott> ^^ just my luck
00:59 < elliottcable> where in Seattle?
00:59 < ericelliott> chillin' downtown, at the moment.
00:59 < elliottcable> ericelliott ⑊ you got a Twitter?
01:00 < ericelliott> I work for Adobe. We have an office here.
01:00 < ericelliott> twitter.com/dilvie
01:00 < chilts> ericelliott: elliottcable: man, are you two twins?
01:00 < elliottcable> you're usually in SanFran, right?
01:00 < Havvy> Why does util.inherits() exist?
01:00 < othiym23> clearly not -- one of them has "eric" in its username, the other has "cable"
01:01 < ericelliott> Havvy: );
01:01 < othiym23> Havvy: for people to extend EventEmitter
01:01 < othiym23> at least that's all I ever see it used for
01:01 < chilts> othiym23: so your surname is ym23?
01:01 < chilts> by your logix
01:01 < elliottcable> Othi! <3
01:01 < Havvy> But you can just use Object.create(events.EventEmitter)....
01:01 < chilts> :)
01:01 < ericelliott> lol
01:01 < othiym23> sounds logical to me
01:02 < elliottcable> Havvy ⑊ Object.create didn't exist when inherits was devised.
01:02 < ericelliott> Havvy: );
01:02 < elliottcable> Also, the semantics are marginally different.
01:02 < othiym23> Havvy: yeah, but then you don't have the neat, completely useless super property on your constructor
01:02 < ericelliott> Havvy: I feel your pain. Sincerely.
01:02 < elliottcable> not completely useless.
01:02 < elliottcable> I used super earlier today.
01:03 < elliottcable> Although I used CoffeeScript's generated-__super__, but, my argument stands. It's useful. Just in weird edge cases and meta-programmatic shit.
01:03 < ericelliott> Havvy: See http://fluentconf.com/fluent2013/public/schedule/speaker/133278
01:03 < Havvy> I just go with SuperClass.prototype.method.apply
01:03 < ericelliott> I just avoid it altogether.
01:04 < ericelliott> but different strokes, I guess. =)
01:04 < elliottcable> cf. https://github.com/elliottcable/Paws.js/blob/f16c7e1/Source/utilities.coffee#L27
01:06 < othiym23> metaprogramming is for suckers
01:06 < elliottcable> It's the only thing I miss from my Ruby days, working in Node/JS/etc
01:06 < elliottcable> there's so few opportunities to metaprogram. All of the complex/powerful shit I want to do, I either *can't* do, or have a seriously terrible time trying to make cross-browser.
01:06 < othiym23> I just delivered a talk last week about how metprogramming is super fun^w^wbad
01:07 < othiym23> in JavaScript, that is
01:07 < elliottcable> I love Node, I love JavaScript, for their own reasons ... but they truly feel like “beginner” languages to me.
01:07 < othiym23> this is going to sound turbo dumb, but I feel like JS has its own Buddha-nature
01:07 < othiym23> like, there is a way to write idiomatic JavaScript that's powerful and fluent, you just gotta let go of trying to make it be what it's not
01:08 < elliottcable> Not beginner in that skilled programmers don't develop software in them; but beginner in that they're missing any/all “power” features. Whether that's C++ templates (disclaimer: I hate C++), Ruby-esque metaprogramming or, well, *everything* in Lisp or Haskell.
01:08 < othiym23> which seems to be something that even TC39 can't manage
01:08 < ericelliott> othiym23: It does. So does this free pen I got from my hotel.
01:08 < elliottcable> othiym23 ⑊ Oh, no, I agree and understand completely.
01:08 < elliottcable> JavaScript is JavaScript. When you don't (†) fight that, it's *beautiful* and *excellent*.
01:08 < elliottcable> † s/don't/don't need to/
01:08 < othiym23> elliottcable: I think objects and functions are plenty powerful, but JS lends itself more to low-level combinators than higher-order abstractions
01:09 < othiym23> and if you get too fancy, you get smacked down by the mutation that comes with JS's OO
01:09 < ericelliott> othiym23: Have you seen this? http://ericleads.com/2013/02/fluent-javascript-three-different-kinds-of-prototypal-oo/
01:09 -!- mode/#Node.js [+o TooTallNate] by ChanServ
01:09 < elliottcable> I truly hate JS's faux-classical OO.
01:09 < othiym23> elliottcable: too bad, sucker! YOu're gonna get way more of it in ES6
01:09 < othiym23> and you're gonna like it!
01:09 < elliottcable> But prototypal inheritance (i.e. if you never type the `new` keyword, and can afford to make wide-spread use of Object.create and similar abstractions) ... it's really beautiful.
01:09 < ericelliott> elliottcable: I don't hate it as much as I hate real classical OO... at least it's flexible enough that you can work around it.  ;)
01:10 < pringlescan> ericelliott: agreed
01:10 < ericelliott> elliottcable: Try that in Java and you'll run up against a brick wall. =)
01:10 < elliottcable> anyway. Not my problem. That's why I wrote my own language.
01:10  * elliottcable throws microphone on ground, walks out
01:10 < othiym23> the only OO I really like at this point is CLOS / Dylan-style generic functions
01:10 < mscdex> elliottcable: that's your mic
01:10 < othiym23> i.e. completely separating data from behavior and connecting the two through protocols
01:11 < Havvy> othiym23: Like Clojure protocols?
01:11 < elliottcable> othiym23 ⑊ link for me? preferably not Wikipedia, kthx.
01:11 < zpr> hello. if i'm building a nodejs app, would angular.js be enough for a javascript framework? or is something like express or partial typically used?
01:11 < zpr> for a backend framework
01:11 < mscdex> zpr: angular would be your client-side
01:11 < othiym23> ericelliott: I have seen versions of yr blog post before, looks good
01:12 < zpr> mscdex: right, so you would typically have some sort of backend framework as well to complement node, correct?
01:12 < othiym23> Havvy: yeah, inasmuch as clj's protocols are derived from CLOS
01:12 < mscdex> zpr: i usually use express on the backend for most things
01:12 < ericelliott> zpr: I'd go with Express for now.. maybe Derby once it's had more road testing.
01:13 < othiym23> elliottcable: hmmm... tough to boil down into a single link
01:13 < ericelliott> othiym23: Trying to distill all the cool parts of prototypal OO down to a 40 minute slide show right now.
01:13 < othiym23> especially without being able to point to Wikipedia ;)
01:13 < ericelliott> othiym23: Any suggestions?
01:13 < zpr> so backend frameworks like express and partial are just to provide some sort of initial structure for node apps?
01:13 < othiym23> ericelliott: ignore Douglas Crockford ;)
01:13 < zpr> and have nothing to do with using angular on the frontend?
01:13 < elliottcable> othiym23 ⑊ Assuming it's anything interesting, *somebody somewhere* has trained to garner attention by explaining it to idiots in a blog-post.
01:14 < mscdex> zpr: you could have angular on the frontend and php on the backend
01:14 < elliottcable> othiym23 ⑊ why ignore Crockford?
01:14 < mscdex> zpr: they're completely separate
01:14 < zpr> mscdex: i understand
01:14 < othiym23> elliottcable: yeah, but whether I can find that to you in an O(k) timeframe or not is another question
01:14 < zpr> mscdex: ok, thats basically what i was asking.
01:14  * elliottcable nods
01:14 < elliottcable> othiym23 ⑊ in which case, ignore me and don't worry about it. <3
01:14 < ericelliott> zpr: http://ericleads.com/2013/05/getting-started-with-node-and-express/
01:14  * elliottcable goes back to his porting project
01:14 < othiym23> elliottcable: because he ends up reinventing classical OO encapsulation using closures, which is dumb for a number of reasons, performance not least among them
01:15 < othiym23> elliottcable: http://stackoverflow.com/questions/4509782/simple-explanation-of-clojure-protocols
01:15 < zpr> so backend frameworks for node such as express, partial, derby, they all exist just to help you structure the backend of the app?
01:16 < elliottcable> othiym23 ⑊ <3
01:16 < othiym23> that comes at the problem kinda sideways, and doesn't try to identify the commonalities between protocols, generic functions / multimethod dispatch, and structural typing, but it's a good place to start
01:16 < zpr> similar how angular/backbone help you structure the frontend javascript of the app?
01:16 < elliottcable> othiym23 ⑊ https://pinboard.in/u:elliottcable 'd
01:16 < ericelliott> mscdex, zpr: they don't have to be separate. See meteor and derby, for example.
01:16 < mscdex> ericelliott: the less coupled the better IMHO
01:16 < ericelliott> mscdex: I mostly agree.
01:16 < othiym23> I really do wonder how many teams are actually using Meteor
01:16 < othiym23> it seems to be one of those things that everybody talks about and nobody uses
01:16 < ericelliott> mscdex: I like decoupled, but well integrated. ;)
01:17 < mscdex> zpr: express does not enforce a particular structure on your backend views/controllers/REST handlers/etc
01:17 < ericelliott> othiym23: Nobody.
01:17 < othiym23> same goes for Derby
01:17 < zpr> ericelliot, mscdex: just trying to figure out the point of these frameworks :)
01:17 < ericelliott> othiym23: Neither are ready for prime-time.
01:17 < othiym23> man, that would be a hella bumemr if true, because the Meteor team has put a TON of work into it
01:17 < zpr> i understand angular/backbone as ways to structure the frontend javascript of the app. these frameworks are to do the same with the backend?
01:17 < othiym23> primetime-readiness and actual real-world use are only weakly correlated, IME
01:18 < mscdex> zpr: express is some sugar on top of http.Server to make setting up layers of actions (middleware)
01:18 < mscdex> easy
01:18 < elliottcable> I need to look into meteor.
01:18 < elliottcable> It just sounds like marketingspeak to me, every time I've tried to look into it.
01:18 < zpr> right, just like angular makes DOM manipulation easier
01:18 < ericelliott> othiym23: Meteor is still in "preview"
01:18 < elliottcable> I feel like I won't like it until I can sit down and just read their damn code.
01:19 < othiym23> elliottcable: the sync stuff is amazing, the framework is a monolithic abstraction layer, with all that implies
01:19 < ericelliott> elliottcable: I'm much more excited about Derby.
01:19 < mscdex> zpr: have you looked over http://expressjs.com/ ?
01:19 < othiym23> ericelliott: Node still hasn't hit 1.0 ;)
01:19 < elliottcable> no idea what Derby is
01:19 < zpr> mscdex: not much, admittedly. i've been looking more into partialjs
01:19 < elliottcable> othiym23 ⑊ Meteor solves a problem I've been interested in for years.
01:19 < othiym23> Derby is basically a less magical Meteor
01:19 < ericelliott> othiym23: I know, but it's been production usable for a long time.
01:19 < elliottcable> My approach has been a new language on top of JS, that is intended to be distributed inherently (unlike JS)
01:19 <@isaacbw> zpr: angularjs just uses jquery for dom manipulation
01:19 < elliottcable> i.e. client/server codebase unification
01:19 < elliottcable> but I'm still interested in their pure-JS approach
01:19 < othiym23> elliottcable: have you ever looked at E?
01:19 < elliottcable> othiym23 ⑊ wassat
01:20 < mscdex> isaacbw: a lite version of jquery, very limited
01:20 < elliottcable> learning about so many new things right now.
01:20 < mscdex> isaacbw: but it will use full blown jquery if it detects it
01:20 < zpr> isaacbw: in a way yes, it just makes jquery calls more structured
01:20 < othiym23> elliottcable: http://www.erights.org/
01:20 <@isaacbw> mscdex: I've found that jqLite does pretty much everything I want
01:20 < zpr> i'm just trying to determine if all these web application frameworks for node do a similar sort of thing for the backend
01:20 < zpr> or whats their purpose in general
01:20 < zpr> make node development easier?
01:20 < othiym23> elliottcable: a lot of the stuff in Promises/A+ and its successors comes from Mark's work on E
01:21 < othiym23> zpr: depends on the framework, really
01:21 < elliottcable> Interesting.
01:21 < mscdex> zpr: express is simple and does not get in the way for the most part, it does not impose a particular structure or anything, it just makes setting up routes and things really easy to do
01:21 < elliottcable> I'm gonna bring E up in my lang-development channel. I wonder if anybody I talk to regularly is familiar with it.
01:21 < othiym23> zpr: Express has become a de facto framework for doing Sinatra-style lightweight web apps
01:21 < mscdex> zpr: express saves you from a lot of boilerplate when handling http connections
01:21 < othiym23> zpr: Restify and Hapi exist to enable the rapid development of high-performance hypermedia API services
01:22 < mscdex> lol hypermedia
01:22 < othiym23> zpr: Geddy and Sails.js exist to make Rails developers feel less scared and alone in Node
01:22 < zpr> othiym: i'm not familiar with the term "sinatra-style"
01:22 < zpr> othiym23
01:22 < othiym23> Meteor and Derby are for people who like doing bong hits of high grade Oregon weed laced with DMT so they can get to the future faster
01:22 < othiym23> etc
01:22 < zpr> i see
01:22 <@isaacbw> zpr: sinatra is a ruby library
01:22 < elliottcable> othiym23 ⑊ “Meteor and Derby are for people who like doing bong hits of high grade Oregon weed laced with DMT so they can get to the future faster” wat.
01:22 < othiym23> zpr: Sinatra: http://www.sinatrarb.com/
01:23 < elliottcable> g'damnit purr
01:23 < elliottcable> othiym23 ⑊ "Meteor and Derby are for people who like doing bong hits of high grade Oregon weed laced with DMT so they can get to the future faster" wat.
01:23 < ericelliott> othiym23: I tried restify, but it had some annoying API differences from Express -- didn't let me at some things I needed, and it introduced some weirdness with DTrace. Turns out that the New Relic beta node module is much more valuable to me than Dtrace that only works on a handful of platforms.
01:23 < elliottcable> othiym23: "Meteor and Derby are for people who like doing bong hits of high grade Oregon weed laced with DMT so they can get to the future faster" wat.
01:23 <@isaacbw> lol
01:23 < elliottcable> there we go.
01:23 <@isaacbw> that sounds about right
01:23 <@isaacbw> meteor is what happens if you close your eyes and wish for unicorns and magic
01:24 < Havvy> Hey. I know people who like doing bong hits of high grade Oregon weed. I'm not sure what DMT is though.
01:24 < ericelliott> othiym23: I'm tweeting that Meteor / Derby quote right now.
01:24 < zpr> mscdex othiym23 isaacbw: thank you for your help
01:24 < elliottcable> -g DMT @ Havvy 
01:24 < purr> Havvy: Dimethyltryptamine - Wikipedia, the free encyclopedia <http://en.wikipedia.org/wiki/Dimethyltryptamine>
01:24 < othiym23> ericelliott: it cheers me greatly to hear you say that, as the author of said New Relic module, but I'd like to improve it enough that you don't have to choose
01:24 < elliottcable> isaacbw: "meteor is what happens if you close your eyes and wish for unicorns and magic" wat.
01:24 < mscdex> -g node.js @ #node.js
01:24 < purr> mscdex: node.js <http://nodejs.org/>
01:24 < mscdex> heh
01:25 < ericelliott> othiym23: Oh, hai. Your module broke my server.
01:25 < zpr> so using node.js and express for the backend, while keeping frontend clean with angular is a standard sort of stack?
01:25 < othiym23> ericelliott: help me help you fix it! :D
01:26 < ericelliott> othiym23: sometimes it won't let the process stop, even though the process is done... does that sound familiar?
01:26 < mscdex> zpr: i've been getting into angular lately myself, i use a setup like that currently
01:26 < elliottcable> zpr ⑊ standard enough, I suppose. I don't know anybody, personally, who uses Angular.
01:26 < elliottcable> though I've been out of the scene for a while, on-and-off. Maybe it's more popular now.
01:26 < zpr> seems to be a solid replacement for backbone
01:26 <@isaacbw> I think angular is really good for prototyping
01:26 < elliottcable> My impression has been that it's a bit heavy / makes a lot of assumptions and dictums of you.
01:26 < ericelliott> othiym23: Otherwise, it's very cool. =)
01:27 < mscdex> assumptions?
01:27 < othiym23> ericelliott: hmm... what if you do something like "var agent = require('newrelic'); /* do stuff */ agent.stop();"
01:27 < elliottcable> othiym23 ⑊ New Relic module?
01:27 < othiym23> elliottcable: yeah, I've been working on a Node.js instrumentation module for New Relic for the last year
01:27 < othiym23> it's a perpetual work in progress
01:27  * elliottcable reads the GitHub
01:27 < mscdex> i'd argue that angular is actually quite flexible
01:27 <@isaacbw> but when I was using it I found myself rewriting portions to avoid the digest cycle for performance reasons and the digest cycle is the best reason to use angular
01:27 < elliottcable> I've never used New Relic
01:27 < zpr> elliottcable: i've heard that before but 'ive yet to experience it
01:27 < elliottcable> it became popular after I left the Ruby community.
01:27 < ericelliott> othiym23: OMG I didn't know it had a .stop()!
01:27 < zpr> angular.js is like transforming html into a dynamic language
01:28 < mscdex> it's not transforming, it's still just plain html
01:28 < othiym23> ericelliott: there's a harvest cycle that connects to New Relic's servers, as well as a periodic sampler. both are running on a schedule. I should probably unref the periodic schedulers, but that would require a bunch of documentation and would confuse people
01:28 < ericelliott> othiym23: Maybe I should read the docs more thoroughly before accusing you of breaking my stuff. ;)
01:29 < othiym23> ericelliott: nah, that's OK, that's totally undocumented
01:29 < ericelliott> othiym23: Is it safe to use?
01:29 < othiym23> ericelliott: the documentation is intentionally terse because it's hard enough getting people to actually read what's there
01:29 <@isaacbw> I read docs all day erday
01:29 < othiym23> ericelliott: you can read the source, it's a pretty straightforward method, but yes, I believe it to be safe to use
01:29 < othiym23> isaacbw: bless you
01:29 < ericelliott> othiym23: Maybe hide it in a thorough API doc somewhere off in a dark corner.
01:30 < mscdex> i tried really hard several times to use backbone, but i always found myself trying to figure out how to do everything and in an efficient manner
01:30 < othiym23> isaacbw: unfortunately many people are not sterling examples of humanity like you and they file random issues about things that are in the first three paragraphs and get mad at me
01:30 < elliottcable> all day.
01:30 < elliottcable> er'day.
01:30 < elliottcable> -fistbump @ isaacbw
01:30 < elliottcable> man, fuck you, purr.
01:30 < elliottcable> I'm too drunk for this shit.
01:30 < purr> isaacbw: good work, comrade http://ihighfive.com/
01:30 < elliottcable> purr ⑊ I like you less.
01:30 < othiym23> a rare case of man turning on his creation!
01:30 < othiym23> instead of the reverse
01:31 < othiym23> ericelliott: yeah, by the time it hits 1.0 (later this summer) I want to have solid documentation of the internals
01:31 < ericelliott> othiym23: Thanks for your hard work. Adobe loves you.
01:31 < othiym23> don't thank me now, just wait until I get the transaction tracer working properly ;)
01:32 < ericelliott> ooh. =)
01:32 < othiym23> ericelliott: seriously, though, I might try unreffing all of the setInterval handlers in the next beta and see if anyone complains
01:34 < ericelliott> othiym23: If it lets my process exit when it's supposed to exit, I won't complain. How long are those intervals? I admit I'm not very patient, but I waited a few seconds, I'd guess... well, at least two or three.. ;)
01:37 < othiym23> ericelliott: the harvest cycle and sample interval are both 60 seconds, and since they're setInterval handlers, they'll keep your process running indefinitely
01:37 < ericelliott> that explains it.
01:37 < othiym23> the flip side of that is that unless you trigger the harvest cycle by hand (which isn't really possible safely right now, I don't think), any tasks that take less than a minute to run will never send metrics to New Relic
01:37 < othiym23> so stop() is definitely the right thing to do in your case
01:38 < othiym23> ericelliott: https://github.com/newrelic/node-newrelic/blob/master/lib/agent.js#L111-L129
01:39 < othiym23> if you want to stop the agent and then restart it again later, you can just call start() again -- it should be safe
01:39 < ericelliott> anybody know if there's a way to tell npm not to install any devDependencies, even for sub dependencies?
01:40 < rvagg> ericelliott: npm install --prod
01:40 < othiym23> ericelliott: how do you mean?
01:44 < tomshreds> hi! anyone used meteor yet? is it what it seems to be? something that could have been great but isn't?
01:46 < calvinx> hey guys, what does the "-g" flag mean when I run "npm install -g" ?
01:46 < rvagg> calvinx: 'global', available to all packages
01:46 < rvagg> calvinx: usually in /usr/local/lib/node_modules/ or similar
01:46 < ericelliott_> rvagg: running nvm install --production and it's definitely installing devDependencies.
01:46 < rvagg> calvinx: also will link binaries to /usr/local/bin/ or other
01:46 < othiym23> calvinx: only use install -g when you want a binary installed as part of a package to be globally available
01:46 < calvinx> so if I am in a node virtual environment (isolated environment) ?
01:47 < calvinx> I shouldn't use -g ?
01:47 < rvagg> calvinx: depends on what you need to achieve
01:47 < rvagg> ericelliott_: nvm or npm?
01:47 < othiym23> you can't actually include tho modules installed that way into your code
01:47 < calvinx> I just want to install a node package in my current isolated environment
01:47 < calvinx> and not "system wide".
01:47 < ericelliott_> rvagg: npm 
01:47 < othiym23> calvinx: npm install <module> then
01:47 < calvinx> ok. cool.
01:48 < rvagg> ericelliott: hm.. what version of npm? perhaps its buggy, try updating it?
01:48 < ericelliott> 1.2.25
01:49 < othiym23> when I run "npm install <module>", it doesn't install devDependencies, nor any devDependencies of its children
01:49 < othiym23> when I clone a module and run "npm install", it installs devDependencies, including for children
01:49 < othiym23> I always just assumed that was Just How It Is
01:49 < ericelliott> sorry.. .15
01:50 < rvagg> when you clone a package and do `npm install --prod` in it, you shouldn't get the devDependencies
01:50 < ericelliott> rvagg: It's still installing devDependencies.
01:50 < rvagg> --dev being the inverse, which will do devDeps of deps, like turtles all the way down, it's frightening sometimes
01:51 < rvagg> ericelliott: ok, I don't know what's going on then, something sounds a bit screwy
01:51 < ericelliott> rvagg: just to be clear -- it's installing the devDependincies in the sub-dependencies. so.. my package depends on substack's package, which depends on some huge package foo in a devDependency. foo gets installed.
01:52 < rvagg> ericelliott: that shouldn't be happening unless you're doing `npm install --dev`
01:52 < rvagg> so.. weird!
01:53 <@konobi> substack: ping
01:53 < ericelliott> yeah, I wouldn't care, except the devDependencies are stalling the installation, and scaring away users of my super awesome lib (qconf)
01:54 < tomshreds> What database system would you use to create an community image board?
01:55 < ericelliott> and Github is acting crazy.
01:55 < ericelliott> npm install /me crosses fingers and hopes github doesn't time out.
01:56 < Havvy> tomshreds: For the images themselves, I'd use a filesystem.
01:56 < ericelliott> npm ERR! git fetch -a origin (git://github.com/substack/esprima) fatal: unable to connect to github.com:
01:56 <@konobi> substack: did you ever get around to polishing off a curses library?
01:56 < tomshreds> Havvy: sure the image will be on the file system, I meant only the text-data
01:56 < rvagg> hey ericelliott it's your shrinkwrap that's doing it
01:57 < ericelliott> rvagg: oh really?
01:57 < rvagg> ericelliott: when you `npm shrinkwrap`, make sure you *only have the dependencies installed that are intended to be installed*
01:57 < Havvy> Ultimately, it doesn't matter. Document based or Relational would be my first choices though.
01:57 < rvagg> otherwise *everything* will be packaged up
01:57 < ericelliott> rvagg: makes sense.
01:57 < rvagg> ericelliott: have a look in your npm-shrinkwrap.json before you publish and you'll see
01:57 < ericelliott> rvagg: thanks.
01:57 < rvagg> ericelliott: personally the hassle of shrinkwrap has made me stop bothering and just being a little tighter on my dependency versions (e.g. ~0.2.0)
01:58 < levilewis> anyone here familiar with sencha touch?
01:58 < rvagg> ericelliott: anyway, if you want to shrinkwrap, `rm -rf node_modules; npm install --prod; npm shrinkwrap`
01:59 <@konobi> levilewis: use xui instead
01:59 < rvagg> ericelliott: err, and remove npm-shrinkwrap.json before doing that too
02:00 < ericelliott> rvagg: no, still happening, without shrinkwrap
02:00 < rvagg> ericelliott: have you published a new one?
02:00 < ericelliott> rvagg: no, but doesn't npm install read from my local package.json?
02:01 < rvagg> ericelliott: if there is an npm-shrinkwrap.json it'll use that instead
02:01 < rvagg> it's a nasty piece of work
02:01 < levilewis> konobi, i already have an app built using ST 2.2 packaged for iOS and android, but I purchased "support" to gain access to nightly builds and the repo, but it's all super outdated..place seems dead
02:01 < ericelliott> I deleted npm-shrinkwrap.json
02:01 < rvagg> ericelliott: so `rm -rf node_modules; npm install --prod` doesn't behave nicely now?
02:01 <@konobi> levilewis: dropped a line to the sencha guys?
02:02 < ericelliott> ls *.json
02:02 < ericelliott> package.json
02:02 < ericelliott> rm -rf node_modules/
02:02 < levilewis> Yeah, I did that already it's just stupid/frustrating. paying $300 for outdated SVN access…
02:03 < ericelliott> npm install --prod
02:03 < ChrisPartridge> levilewis: you've paid for support, call them!
02:03 < ericelliott> here come a whole bunch of devDependencies
02:03 < rvagg> ericelliott: push to your repo and let me see!
02:04 < ericelliott> sure
02:04 <@isaacbw> levilewis: can you ask for a refund?
02:04 <@isaacbw> at the very least write an angry blog post :P
02:05 < rvagg> ericelliott: yikes! I see what you mean
02:05 < levilewis> I submitted a ticket requesting someone to resolve the problem. Hopefully it's just an access issue. Otherwise, yeah refund.. funny though, cause the site says "2million developers" use sencha.
02:06 <@isaacbw> oh man, what a red flag 
02:06 < levilewis> check this out…..
02:06 < ericelliott> https://github.com/dilvie/qconf/tree/zombie-dependencies
02:07 < ericelliott> rvagg: so urm... ignore my stupid commit message.. I removed shrinkwrap, re-installed... and there are a ton of zombie devDependencies.
02:07 < rvagg> ericelliott: it's your stampit package that's pulling it in
02:07 < ericelliott> rvagg: I know.
02:07 < rvagg> you have an npm-shrinkwrap.json in there
02:07 < rvagg> ditch it
02:07 < ericelliott> rvagg: d'oh.
02:09 < levilewis> isaacbw, http://i.imgur.com/33Nlozk.png this is a sticky at the top of the "premium" paid support forum. It's 2 years old and I'm the first person to reply? It's a mess.
02:09 <@isaacbw> oh boy
02:10 < ericelliott> rvagg: so, shrinkwrap is basically a nightmare for libs. yay =)
02:10 < levilewis> guess i'm the only one interested in repo access ha
02:10 < ericelliott> rvagg: but specifying versions means that your package falls behind the times.
02:10 < ericelliott> =P
02:11 < ericelliott> cause I never remember to upgrade versions. ;)
02:14 < rvagg> ericelliott: try `npm outdated`
02:14 < ericelliott> rvagg: awesome tips.
02:14 < rvagg> and eran hammer had something to do version management, I can't remember what that was tho
02:15 < ericelliott> rvagg: so what's your advice for these libs -- should I go through and install --save all the required packages and commit updated versions?
02:16 < rvagg> ericelliott: my advice is, pin your dependency versions fo '~x.y.z', don't shrinkwrap, and publish that way
02:16 <@konobi> rvagg: if you have suggestions or bugs to report on shrinkwrap, I know isaacs would like em
02:18 < rvagg> konobi: nah, it's just too complicated unless you have really deep dependencies (like npm itself does)
02:19 <@konobi> rvagg: it's used quite heavily by some folks... so having things to check for, etc. would be useful
02:20 < ericelliott> konobi: shrinkwrap doesn't let you ignore devDependencies. I think that's problematic.
02:20 <@isaacbw> does anyone know if there's been work to develop pure-js video encoding?
02:21 <@konobi> isaacs: ping ^^
02:21 < Havvy> isaacbw: Yes.
02:21 < Havvy> Or maybe it was auido.
02:21 < Havvy> audio.
02:22 <@isaacbw> video would be wonderful
02:22 < DarkArgon> should i convert ips (string) into numbers?
02:23 < ericelliott> isaacbw The mozilla team has been working on video streaming in js -- in an open format that they're hoping will become a web standard
02:23  * nightfly groans at another new format
02:24 <@konobi> video codec that runs in pure JS
02:24 < elliottcable> I'm with Nijiko 
02:24 < elliottcable> er, nightfly *(sorry, Nijiko)
02:24 < Nijiko> in a room with me at least
02:24 < Nijiko> ;P
02:24 < ericelliott> nightfly: the cool thing about this particular format is that it's in JavaScript -- if a browser doesn't support it, you shim it with JS.
02:25 <@konobi> well, the nice thing is that you can deploy it anywhere with a browser
02:25 < Havvy> kinetik> Havvy: there's at least: broadway, route9, and http://phoboslab.org/log/2013/05/mpeg1-video-decoder-in-javascript
02:25 < Havvy> From irc://irc.mozilla.org/jsapi
02:25 < Nijiko> oh look havvy is in here too
02:25 < ericelliott> http://www.techhive.com/article/2037581/mozilla-otoy-team-on-javascript-video-codec.html
02:25 < elliottcable> I bought a pack of Dogfish Head 90-minutes.
02:25 < elliottcable> Didn't check the bottles. Got home. It's one 90-minute and three 60-minute.
02:25  * elliottcable is pissed
02:26 < Havvy> Nijiko: Yes?
02:26 < rvagg> ericelliott, konobi: my preference for shrinkwrap would be for it not to keep an npm-shrinkwrap.json  around, it ought to be part of publish IMO, `npm publish --shrinkwrap` and npm-shrinkwrap.json never stays around and it should *only* include dependencies specified in "dependencies", regardless of what else is in node_modules/
02:26 < ericelliott> https://brendaneich.com/2013/05/today-i-saw-the-future/
02:26 < Nijiko> nothing mate just making a statement
02:26 < ericelliott> rvagg: that would be neat.
02:27 <@isaacbw> I know there's been a lot of work on video decoding. I suppose the uses for encoding would be limited
02:27 <@konobi> rvagg: file an issue!
02:27 <@konobi> apparently the transcoding for it is pretty quick
02:27 < rvagg> care factor too low, I've given up on it, npm issues go stale too easily, even with all the attention from luk et. al.
02:28 < niix> How do I handle multiple callbacks? http://hastebin.com/qutepekati.js
02:28 < rvagg> konobi: e.g. https://github.com/isaacs/npm/pull/2388
02:29 <@konobi> rvagg: shrinkwrap issues would get picked up pretty quick i'd think
02:30 < davidbanham> niix: On line 18 "if (typeof err !== 'null') return console.log(err)" then on line 19 just go about your business. If there's an error returned, your code will bail on line 18.
02:30 < davidbanham> niix: There are many approaches, but basically you want to check whether there was an error or not, then act based on that information.
02:33 < niix> davidbanham: ok I'll give that a go.  But my concern there after is returning the location
02:34 < davidbanham> niix: Ahh, in that case, on line 10 you want something like "} else { return callback(null, position) }"
02:35 < davidbanham> niix: Then on line 17 change "Bar.getLocation(function(err){" to "Bar.getLocation(function(err, position){"
02:35 < niix> word lemme try that
02:35 < niix> callbacks are funny O_o
02:35 < elliottcable> lol niix
02:35 < SomeoneWeird> heh
02:35 < SomeoneWeird> only when you don't understand them :)
02:36 < niix> slowly my brain is wrapping around it
02:36 < niix> in the kind of way an anaconda slowly wraps its pray?
02:36 < niix> *prey even
02:36 < niix> any good callback pointers?
02:36 < davidbanham> Apparently you can edit these hastebin dealies. What's wrong with a gist? Kids these days. - http://hastebin.com/recotuhoki.coffee
02:36 < davidbanham> Get off my lawn!
02:37 < niix> lol
02:37 < davidbanham> Also, just noticed the .coffee extension. Do you actually want coffescript? Because this could be way cleaner in coffee.
02:37 <@isaacbw> hastbin assumes all javascript is coffeescript
02:37 < SomeoneWeird> which is ridiculous 
02:37 <@isaacbw> silly hastebin
02:37 < niix> davidbanham: you can change the extension
02:38 < niix> either way, thanks for the updated one
02:38 < niix> I use gist all the time, I just get sick of cleaning up my left over gists for small things like this haha
02:38 < niix> cleaning up === deleting them :P
02:38 < davidbanham> niix: No worries. The coffescript sugar for null-ish checking is nice. You can just do something like "return console.log(err) if err?" and it's pretty.
02:38 < elliottcable> yeah, haste looks nice.
02:38 < elliottcable> Icky that it deletes data though.
02:39 < elliottcable> Any service that removes data, *ever*, without an explicit request by the creator of that data, is de-facto Evil™.
02:39  * davidbanham carefully avoids a coffeescript argument with isaacbw.
02:39 <@isaacbw> eevvviilllllll
02:39 < elliottcable> same page re: ancient gists. My gist history is a mess.
02:40 < elliottcable> davidbanham ⑊ I use CoffeeScript right now, don't get me wrong ...
02:40 < elliottcable> ... but it's already pretty pretty in plain JavaScript.
02:40 < davidbanham> Is substack around? I'm packaging up a pull request for upnode but banging my head against writing a test for it. I can't seem to duplicate the behaviour unless I run it through propagit so there's something I'm not fully understanding.
02:41 < elliottcable> since the only sane argument to that location is going to be either an Error argument (which is truthy) or undefined (which is falsy),
02:41 < niix> davidbanham: doesn't seem to be working :|
02:41 < davidbanham> niix: I probably did something dumb.
02:41 < elliottcable> you can simply `foo.asynch(function(_, result) if (_) throw _; work_with(result) })`
02:41 < davidbanham> That's usually how software works. At least my software.
02:41 < elliottcable> ick, forgot an opening bracket
02:41 < substack> davidbanham: propagit is pretty abandoned
02:42 < substack> it got way too big
02:42 <@konobi> substack: ah ha... see my ques?
02:42 < davidbanham> substack: Yeah, I noticed it was a bit stagnant but I'm keen to do some more things with fleet.
02:42 < substack> konobi: I haven't got any cursesy libs no
02:42 < substack> just a thin wrapper on raw ansi codes
02:43 <@konobi> ah
02:43 < substack> davidbanham: check out http://github.com/substack/ploy
02:43 <@konobi> yeah, looking for mor ui/ux-ey curses libs
02:44 < davidbanham> substack: I did, but that doesn't seem to deal with multiple machines/instances. Also the lack of process detachment frightens me.
02:44 < elliottcable> damn substack, you're prolific.
02:44 < elliottcable> have I mentioned that I love you lately?
02:47 < tomshreds> what's the best way to make some objects available through all files of my project? (the same instance)
02:47 <@Nexxy> require
02:48 < davidbanham> substack: Also the 0.8 dep worried me. Also we don't want http routing on our nodes. Ploy looks cool, but it doesn't suit our use case. We've been using Fleet in low-traffic production for a while and we're keen to ramp it up, just need to write some tooling to enable it.
02:49 < tomshreds> Nexxy: yes I know that, but what if I'd like to make my data models available everywhere?
02:49 < tomshreds> Dependency-injection kinda
02:49 < davidbanham> substack: The code change I'm proposing for upnode is https://github.com/davidbanham/upnode/commit/299bf127e1e608cc640042c1b11cfb1214ee5147 and the replication for my issue is here: https://github.com/davidbanham/swallowed/blob/master/wtf.js
02:50 <@Nexxy> tomshreds, var mods = require('my-models'); var things = require('some-stuff')(mods)
02:51 < davidbanham> substack: I've gotten this far writing a test, but I can't make the bugger fail. https://gist.github.com/davidbanham/5617210
02:52 < elliottcable> NEXXYYYYYYYY
02:52 < elliottcable> shit, i came my pants
02:52 < tomshreds> oh good idea
02:54 < substack> davidbanham: fleet is overly complicated and made some architectural mistakes I guess
02:54 < substack> davidbanham: you could write a thing on top of pushover or cicada
02:55 < substack> ploy is built on top of cicada is built on top of pushover
03:00 < davidbanham> substack: I really like the process execution stuff in propagit, though. I'd be re-inventing that in anything I built on top of cicada/pushover.
03:04 < elliottcable> GUYS
03:04 < elliottcable> hi.
03:05 < g0z> what? hi
03:06 < elliottcable> hi.nope
03:06 < elliottcable> hi.nope()
03:06 < elliottcable> g0z ⑊ hi.
03:07 < elliottcable> IRC needs an IID.
03:07 < Havvy> IID?
03:07 < elliottcable> -g iid @ Havvy
03:07 < purr> Havvy: Imperial Irrigation District : Home <http://www.iid.com/>
03:07 < elliottcable> well shit
03:07 < elliottcable> -g ignition interlock @ Havvy
03:07 < purr> Havvy: Ignition interlock device - Wikipedia, the free encyclopedia <http://en.wikipedia.org/wiki/Ignition_interlock_device>
03:07 < Havvy> Ah.
03:07 < Havvy> It wouldn't be as fun.
03:08 < chilts> elliottcable: Immunology and Infectious Disease
03:08 < chilts> ?
03:08 < substack> davidbanham: process execution?
03:09 < Havvy> Note to self: Create an Imperial Irrigation District in my Dwarf Fort.
03:09 < davidbanham> substack: Probably using the wrong terminology. "The bit where it spins up the processes I tell it to, on multiple physical machines, and it doesn't care what language they're written in."
03:11 < elliottcable> Yes. Yes, yes, yes. http://untp.it/10KwIXe
03:11 < elliottcable> Code 'n craft beer? Can I get a HELL YEH?
03:12 < ThePrimeMedian> HELL YEH
03:12  * elliottcable high-fives ThePrimeMedian
03:12 < ThePrimeMedian> ;)
03:14 < ThePrimeMedian> can someone tell me why this is not working? http://pastebin.com/xdtC70ay
03:14 < ThePrimeMedian> it doesn't delete
03:14 < ThePrimeMedian> sh%t ... let me fix that
03:15 < ThePrimeMedian> here's the new one
03:15 < ThePrimeMedian> http://pastebin.com/Nv4mwfGy
03:15 < ningu> ThePrimeMedian: I believe that's one of the things mongoose doesn't keep track of for you, so you have to use markModified
03:16 < ThePrimeMedian> no, the problem is the record doesn't delete from the array
03:16 < ningu> you mean even before user.save?
03:16 < ThePrimeMedian> right
03:16 < ningu> oh, I see.
03:16 < ningu> delete doesn't work on arrays.
03:17 < ThePrimeMedian> the delete user.following[req.friend._id]
03:17 < ningu> you need to do user.slice(). but I don't think indexOf will get you what you want.
03:17 < ningu> oh, yes it will.
03:17 < ningu> so yeah, do user.slice() on the result of indexOf.
03:17 < ThePrimeMedian> ok, let me try
03:19 < niix> still can't seem to get the position from this callback http://hastebin.com/ritiviqocu.js (line 20)
03:20 < niix> error returns fine
03:20 < davidbanham> niix: What's with handle_error? Let me retool that a bit.
03:20 < niix> davidbanham: well it could just be 'handler'
03:22 < ThePrimeMedian> ningu: user.following.splice(user.following.indexOf(req.friend._id)); works
03:23 < niggler> isaacs: what service do you use to be reminded later to do stuff?
03:24 < ningu> mentioned on planetnode today: http://idontwantyourfuckingapp.tumblr.com/ -- awesome.
03:25 <@isaacbw> aw, the wolfram alpha app is cool
03:25 < ningu> isaacbw: maybe so, but I hate those splash pages
03:25 < ningu> I am not against apps
03:25 <@isaacbw> is that your tumblr?
03:25 < ningu> nope
03:25 < ningu> I just am amused that someone was annoyed enough to make it
03:26 < niggler> I'm saddened by the responses ningu 
03:26 <@isaacbw> those splash pages are especially annoying when they redirect to some generic homepage instead of the page you asked for
03:26 < niggler> i expected something more clever
03:26 < elliottcable> what isaacbw said.
03:26 < ningu> niggler: oh, the text below the images? yeah, not very inspired
03:26 < ningu> elliottcable: which thing? :)
03:27 < niggler> forbes.com is the absolute worst
03:27 < elliottcable> annoying when they redirect to the homepage
03:27 < ningu> I also really hate those "want to take a survey?" popups
03:27 < ningu> although I guess it's good that sites let users give feedback
03:27 < davidbanham> niix: Is this what you want? http://hastebin.com/tavalayiwu.coffee
03:28 < ningu> and if they were less annoying maybe no one would fill out the survey
03:30 < elliottcable> http://ell.io/i9xxJ
03:31 <@isaacbw> what font size is that
03:31 < elliottcable> um
03:32 <@isaacbw> so tiny
03:32 < niggler>  coffee script may be the work of the devil
03:32 < elliottcable> https://github.com/elliottcable/System/blob/Master/Dotfiles/gvimrc#L3
03:32 < elliottcable> man, I used to hate CoffeeScript so much. And I still do, for a lot of reasons. but at the moment I'm working in it nonetheless.
03:32 < niggler> you can write in JS and use js2coffee
03:34 < ningu> coffeescript makes me nervous because I have no idea if anyone will really be using it in 1, 2, 3 years. I know it all gets converted to js, but it's kind of annoying to read the js and I wouldn't want to maintain that version.
03:35 < elliottcable> could be said of anything
03:35 < elliottcable> the real problem is the lack of language-development rigour.
03:35 < ningu> js isn't going away. python isn't going away.
03:35 < elliottcable> The syntax is so extremely wishy-washy.
03:35 < ningu> I mean, maybe eventually.
03:35 < elliottcable> It has all of Ruby's syntax problems *and* all of JavaScript's semantic problems, all in one place.
03:35 < ningu> but coffeescript doesn't have nearly as big of a foothold
03:36 < ningu> basically it seems like a dependency I can do without unless I really need it for something, which so far, I don't
03:36 <@konobi> elliottcable: are you not using half-caff-no-whip-extra-large-extra-hot-latte-script yet?????
03:36 < elliottcable> I have to say, I miss iced-coffee-script
03:36 < ningu> what happened to it?
03:36 < nightfly> the chance the someone is using your library at that time is pretty low though.
03:36 < elliottcable> it was pretty neat when it had enough of a following to make me trust that it would continue to exist.
03:36 < ningu> or did you just stop using it?
03:36 < ningu> nightfly: I'm talking about apps, not libraries.
03:37 < ChrisPartridge> konobi: you really need to make a 'joke' page for that
03:37 < ningu> and I am still using apps that I originally wrote that long ago.
03:37 < ChrisPartridge> like vanillajs
03:37 <@konobi> ChrisPartridge: go for it
03:38 < ningu> I didn't realize icedcs had faded
03:38 < ningu> I don't really keep up
03:38 < ningu> isn't coffeescript mostly just the work of one guy?
03:39 < ningu> and then there is sinclair's obsession, typescript...
03:39 < davidbanham> It's mostly jashkenas, yeah, but there are contributors.
03:40 <@konobi> ningu: that will shortly turn into a troll topic if he's not careful
03:40 < elliottcable> I really like LiveScript.
03:40 < elliottcable> Or the idea of it, anyway.
03:40 < ningu> konobi: typescript? or sinclair?
03:40 <@konobi> TS
03:40 < davidbanham> Look in 6 months we'll all be writing Dart anyway.
03:40 < ningu> how come there isn't DeadScript?
03:40 < chilts> ningu: write it!
03:41 <@isaacbw> no way, we'll be developing clients with c
03:41 <@isaacbw> woo native client
03:41 <@konobi> ningu: same reason for TeteringOnTheEdgeScript doesn't exist
03:41 < ningu> I'll market it as: the language you'll want to keep using until you are dead
03:41 < ningu> and its preferred data store will be bongodb
03:41 < chilts> CobolScript instead?
03:42 <@konobi> the problem for here is that we deal with JavaScript, plain and simple... if you compile from something else, good for you... but i'll only suggest bug reports or provide assistance with javascript
03:42 < ChrisPartridge> bongodb, the first "NoDB" db solution
03:43 <@konobi> I don't need to learn 3001 different variances to provide assistance... so don't ask everyone else to
03:43 < ningu> konobi: fair enough. I do think a js-centered design discussion can be interesting though.
03:43 < davidbanham> ChrisPartridge: Bullshit. I've been doing fs.writeFileSync('./data.json', JSON.stringify(data)); and calling it NoDB for ages now!
03:43 < elliottcable> Waaaay too drunk to debug this.
03:43 <@konobi> ningu: sure, but that's a #javascript or talk to brendan in person sort of thing
03:43 < elliottcable> What do, experienced developing-software-while-drunk practitioners!?
03:43 < ChrisPartridge> davidbanham: you're ahead of your time!
03:44 < davidbanham> I
03:44 < ningu> konobi: maybe I should start going there too then. but I waste enough time in here already :P
03:44 < davidbanham> I'm such a mad hipster.
03:44 < elliottcable> my jaw is stuck to my shoulder
03:44 < donCams> you're a mad hipster before it was cool
03:44 < elliottcable> were* a
03:44 < ningu> elliottcable: when I'm drunk I just keep trying things until it works and then hope it looks reasonable later
03:45 < elliottcable> I'm leaving lots of “cix this when you're sober” comments
03:45 < elliottcable> I'm pretty sure sober-me will hate me
03:45 < elliottcable> a lot
03:45 < ningu> a couple months ago I refactored an app for 36 hours straight, porting it from mongodb to postgres
03:45 < donCams> you're not drunk when you say you're drunk
03:46 < ningu> it mostly worked
03:46 < elliottcable> donCams ⑊ beg to differ
03:47 < donCams> pix or gtfo
03:47 < levilewis> you guys know of any projects similar to this http://devo-ps.github.io/carte/ for building api docs?
03:48 < elliottcable> donCams ⑊ http://ell.io/iJUsp
03:48 < elliottcable> already regret that.
03:48 < ningu> just remember, IPA = International Phonetic Alphabet
03:48 < donCams> eyes not red enough
03:49 < elliottcable> http:///inˈiːbrieɪtɪd/
03:49 < elliottcable> does DNS support IPA?
03:49 < ningu> hmm
03:49 < ningu> no idea
03:49 < ningu> it needs to at least have dots doesn't it?
03:49 < elliottcable> not necessarily
03:49 < elliottcable> http://to/ is perfectly valid, although most things would only support it as http://to./
03:49 < elliottcable> as an example
03:50 < davidbanham> niix: I have done battle with class syntax in JS and made your code work. - http://hastebin.com/mukowakune.coffee
03:50 < niix> davidbanham: thanks, I figured it out also :)
03:51 < ningu> wɪtʃ kʌntɹi hæz ðə bɛst biɹ?
03:52 < ningu> oops I forgot an aspiration symbol. wɪtʃ kʰʌntɹi hæz ðə bɛst biɹ?
04:04 < elliottcable> well, turns out IPA makes this channel quiet
04:05 < runvnc> you mean IPA beer?
04:05 < runvnc> usually makes people talk more I have found
04:09 < elliottcable> runvnc ⑊ thats' what i thought
04:09 < elliottcable> it certainly makes me talk more
04:09 < runvnc> heh
04:09 < elliottcable> I'm ¾ of the way into my third 20, a Third Voyage double IPA
04:10 < runvnc> how do you make a 3/4
04:17 < elliottcable> i dont remember
04:21 < hashset> niggler: what is the problem with coffeescript?
04:21 < niggler> what are the problems hashset 
04:22 < hashset> <niggler>	 coffee script may be the work of the devil
04:22 < niggler> right I'm saying that your statement assumed that there was a singular problem
04:22 < niggler> and there are multiple
04:22 < niggler> isaacs:  you know what's coming
04:22 < niggler> hashset: http://blog.izs.me/post/10213512387/javascript-is-not-web-assembly
04:25 < niggler> hashset: some of my criticisms pertain to coffee script in its current incarnation (stuff like interstitial whitespace sensitivity, that reading code with braces is faster than using indents) and some pertain to the fact that it doesn't give a significant win over using plain JS (which is what the blogpost also argues)
04:25 < hashset> interesting, but he didn't mention any of the other reasons coffeescript was made
04:25 < davidbanham> niggler: You've picked a post that actually makes very few value judgements about coffeescript. It has a specific purpose of stopping people comparing JS to Assembly.
04:26 < s5fs> I guess I just don't see the value in moving to cs. I assume that puts me in some camp.
04:26 < s5fs> so it's like js, but with less curly braces and shit? okay then. even regular ass js is better than java or c#, so for now I'm happy.
04:27 < hashset> it wasn't made to optimize JS, so why compare it to compiling c programs to machine code?
04:28 < hashset> it's an easy rant to make but it's misguided
04:28 < niggler> compile-to-js languages in general don't give an order of magnitude more expressiveness
04:28 < niggler> saving characters isn't the metric of a successful language; otherwise we would all be using something like APL
04:28 < progrock`> is there a way to do inline ocnditional statements in JADE
04:29 < davidbanham> True, but for me I find the extra expressiveness welcome, whether it's an order of magnitude or not. For most projects, I find the slight decrease in readability worth the extra productivity I get from the syntax while writing.
04:29 < progrock`> I want to add a class 'selected' on a link if the useris within that section
04:29 < hashset> it's not all about expressiveness either
04:29 < niggler> its not extra though davidbanham 
04:29 < runvnc> davidbanham, you actually think that coffeescript is less readable than js? but you like it
04:30 < davidbanham> runvnc: Yes.
04:30 < runvnc> the way I write coffeescript is like python with less __ and more @
04:30 < runvnc> which is the way I think you should write it
04:30 < runvnc> otherwise use LiveScript if you want to get real fancy
04:30 < Lorentz> I dunno guys, it's like arguing chinese is more readable than english
04:30 < progrock`> I really like code liek python where theres no braces, and whitespace matters... but for some reason I really dislike coffeescript
04:30 < Lorentz> depends on who wrote it?
04:30 < runvnc> heh just my opinion
04:31 < niggler> progrock`: CS has interstitial whitespace sensitivity
04:31 < niggler> i can't think of an example where python has the same
04:31 < davidbanham> niggler: There's room for personal preference here. It's not a black and white debate. I may find that I'm much more productive in coffeescript, whereas you may not. So you can write your stuff in JS and I'll write my stuff in CS. Nobody has to get mad.
04:31 < runvnc> anyone who hasn't spent like a week or two learning coffeescript is going to hate it. unless they are ruby programmers
04:32 < progrock`> niggler: can you explain? cant say interstitual is in my vocab, lol
04:32 < runvnc> for me up until I had to learn cs it seemed very stupid. and definitely was hard to read. (because I didn't know cs)
04:32 < davidbanham> runvnc: I'd agree with that. I used to really dislike it until I hired a bunch of ex/current Rubyists to write node for me. They all liked CS, and after being exposed to it for a while I grew to like it too.
04:32 < niggler> progrock`: within a line there are places where, if you omit a space, you will see a different result
04:33 < progrock`> runvnc: hopefully things have changed, but I seem to remmeber ocffeescript haveing a huge whole with regards to scoping, because of the lack of the var keyword
04:33 < niggler> and that really detracts from readability
04:33 < progrock`> niggler: oh, ok, I was guessing tht, but wanted to make sure
04:33 < niggler> runvnc: the problem is that coffee script exists in a javascript ecosystem
04:34 < niggler> so when expectations run counter to JS standards, there will be some clashing
04:34 < runvnc> for me I like not having to type var.  just sometimes at the top if I want things scoped to the whole file I put somevar = null
04:34 < runvnc> otherwise it just puts the vars in the right place for you actually
04:34 < runvnc> niggler and progrock, how many weeks did you spend learning cs?
04:34 < progrock`> runvnc: oh, ok, so the var keyword is still available?  since I remember there being a serious hole in the way that was dealt with.. unless I waas misunderstanding it
04:35 < progrock`> runvnc: not more than 2 days
04:35 < runvnc> the thing is if you have been using js for many years and are good at it, you are going to look at cs and think it is a waste of time to learn it
04:35 < runvnc> until you actually start using it
04:36 < runvnc> then you are like, yay, I can juse make a class with class, and gee I dont want to use js because then I have to keep track of all of those } and ) and bind and stuff
04:36 < progrock`> runvnc: I just dont see too many benefits... its not like scala compared to java
04:36 < progrock`> I also don't like writing OO styled JS
04:36 < runvnc> LiveScript is like scala compared to java, except actually awesome
04:36 < runvnc> who in their right mind likes writing oo styled js?
04:36 < runvnc> oo styled cs is different though
04:37 < niggler> runvnc: i gave it two weeks and ported JS over to CS and was disappointed by the results
04:37 < niggler> the hand-written JS better reflected what i wanted to do than the CS-generated JS, if that makes any sense
04:37 < davidbanham> progrock`: The benefits aren't order of magnitude, but I do find benefits there. I don't write OO either, but I like typing less braces. I still write JS when contributing to other people's code and I still write it when I expect a piece of code to need to be read by many other people.
04:37 < niggler> and i suspect most veteran JS/CS people will say the same thing
04:38 < runvnc> the cs-generated js is for the javascript engine, not for you or me to read
04:39 < niggler> but that presupposes that you aren't competent enough to evaluate the CS-generated JS
04:39 < niggler> as compared to JS that you would write yourself
04:39 < runvnc> it presupposes that I dont want to look at the JS unless I have to
04:39 < niggler> so why not just go all the way and write in a language like python?
04:40 < runvnc> coffeescript is better than python
04:40 < runvnc> less __
04:40 < davidbanham> It presupposes that you very rarely need to look at the generated code. Occasionally I run into something weird and need to figure out what's going on in the JS, so I go read it. I've never hit a circumstance where it's been batshit insane. It's just slightly unusual JS with a fairly clear purpose.
04:40 < niggler> http://brython.info/
04:40 < runvnc> also node module system and async model is better than doing it in python
04:40 < progrock`> so whats the big difference between CS and LiveScript?
04:40 < niggler> do you debug in coffee script or javascript
04:40 < runvnc> python is outdated by node and coffeescript
04:40 < davidbanham> Python doesn't run on node or have access to npm.
04:40 < niggler> you can use a compiler just like you do for coffeescript
04:40 < niggler> linked above runvnc davidbanham http://brython.info/
04:41 < progrock`> I just find it counter intuitive to be writing my code ins CS or similar, when the library I'm using, and all the examples i care about, are in JS
04:41 < runvnc> I like CoffeeScript syntax better than python
04:41 < runvnc> thats very interesting though brython
04:41 < runvnc> to me it comes down to
04:41 < davidbanham> niggler: That seems to be a client-side Python implementation. I don't know why I would want that.
04:42 < progrock`> also, I'd imagine JS written correctly should execute faster than JS compiled from CS, or similar
04:42 < runvnc> if I dont have to learn cs, and I have been doing great in js for many years, then I am not going to see the benefit of cs or take the time learning it
04:42 < runvnc> so I completely see where you guys are coming from.  I was in the same camp until I HAD to learn CS in order to make a modification to pdfkit
04:42 < niggler> its always useful to try new things, no doubt
04:42 < niggler> but the problem is that, even for large projects
04:43 < niggler> coffee script doesn't make things organizationally that much easier
04:43 < niggler> and you still have to debug in javascript
04:43 < runvnc> well, they have source maps now so you dont really have to debug in js anymore
04:43 < elliottcable> I REALLY want to be involved in this conversation
04:43 < runvnc> lol
04:43 < elliottcable> 'cause I have a lot of CS vs. JS thoughts
04:43 < elliottcable> ... but I'm really drunk.
04:43 < niggler> go ahead elliottcable 
04:43 < runvnc> haha
04:43 < progrock`> if d3 was written in CS, I'd be much more motivated to use CS, lol
04:43 < niggler> let that stream of consciousness out
04:43 < elliottcable> God-damnit. Note to self: don't get drunk when people are going to be talking about interesting things soon.
04:43 < runvnc> I think its all about LiveScript though
04:43 < davidbanham> Occasionally you have to debug in JS, and that's a pain in the sack. There are negatives to CS and that's one of them. There are also positives. For me, on the projects I use it on, the positives outweigh the negatives.
04:44 < progrock`> This livescript is looking decent
04:44 < runvnc> livescript has all of the functional stuff, backcalls, a lot of awesome stuff
04:44 < runvnc> but it would take me a month to really get familiar with it
04:44 < niggler> being an expert in CS requires more JS competency than most "js experts" can muster
04:44 < runvnc> until then its a big hassle to use it in a real project
04:44 < niggler> live script has some interesting ideas behind it too
04:45 < niggler> though i wonder if going the whole hog and transpiling haskell to JS would be a bigger win
04:45 < runvnc> I think with the functional and backticks and other features in livescript, on the node platform with 30000 modules and the built in async and superior apis, livescript on node is the leading platform
04:46 < runvnc> veteran functional programmers often end up going to a language that is hybrid functional/oo/imperative
04:46 < progrock`> runvnc: well I'm deifnitely a muc hbigger fan of functional style... if livescript adds to JS, should be interesting
04:46 < runvnc> just for practicality sake
04:47 < runvnc> yeah someday I will have two weeks to do only ls and then use it in a real project. gonna take a ton more practice than learning cs though
04:48 < niggler> elliottcable: you may have stumbled upon the next great startup idea
04:48 < runvnc> I said backticks.. I meant backcalls
04:48 < elliottcable> what
04:48 < elliottcable> niggler ⑊ did I msis something?
04:48 < runvnc> dontgetdrunk.io ?
04:49 < niggler> remind me when I'm sober
04:49 < Havvy> niggler: And even then, when you /do/ actually understand CS, you find you don't want to use it.
04:49 < niggler> ++Havvy 
04:49 < elliottcable> what
04:49 < elliottcable> next great startup idae
04:49 < elliottcable> OH
04:49 < elliottcable> REMIND ME WHEN I'M SOBER
04:50 < elliottcable> can you remind me when I'm sober to make an app that reminds people when they're sober?
04:50 < elliottcable> kthx.
04:50 < runvnc> lol
04:50 < Havvy> As far as I can tell, it steals the syntax of Ruby without actually getting the two parts that actually matter:  Coroutines and 'everything is a class'.
04:50 < Havvy> Instead, you get the unreadable parts.
04:50 < elliottcable> subjective.
04:50 < runvnc> coffeescript doesnt have to be unreadable or look like ruby. except the @
04:50 < elliottcable> I'm drunk.
04:50 < elliottcable> but “unreadable” is subjective.
04:50 < elliottcable> even drunk-elliottcable can tell that.
04:51 < elliottcable> come on try harder.
04:51 < Havvy> Fine. Less readable.
04:52 < Havvy> Also, every `if` becomes a function.
04:53 < elliottcable> does it seriously!?
04:53 < elliottcable> I think I missed that. Example?
04:53 < Havvy> At least, if I remember looking at the output.
04:55 < Havvy> Hmm, wait, no it doesn't.
04:55 < Havvy> But it did sometimes.
04:55 < elliottcable> you sure about that? seems unlikely.
04:56 < Havvy> Seems to be using ternary for ifs.
05:03 < hashset> LiveScript looks strangely similar to F#
05:12 < karan> Hi , How to write Simple Nodejs client program for Consume SOAP Web services with WSDL URL like http:\\test.com\sampleservice?WSDL 
05:13 < karan> is there any blog or website avilable for that?
05:13 < elliottcable> butts butts butts butts butts butts
05:13 < Oddman> what what in the butt
05:16 < kevireilly> lulz
05:17 < kevireilly> I always think of the Butter's rendition from Southpark for some reason
05:17 < Oddman> haha
05:17 < Oddman> :P
05:17 < Oddman> it's a great remix, let's be honest
05:17 < Oddman> lol
05:18 < kevireilly> its pretty damn spicy
05:19 < Oddman> rofl
05:20 < kevireilly> karan: checked out https://github.com/milewise/node-soap ?
05:23 < karan> kevireilly: Thanks, I'll check that
05:27 < mittalmohit1> Hi Node.js community
05:28 < elliottcable> hi mittalmohit1
05:28 < ChrisPartridge> Hi Node.js community member
05:28 < elliottcable> this part of the Node.js community is drunk
05:29 < mittalmohit1> ha ha, I am trying to write a client in nodejs to connect to this channel, though I am able to join this channel, I am not able to send any messages from the client. Does every message has to be prefixed with some KEYWORD ?
05:38 < Raynos> Anyone know how to identify timer leaks?
05:39 < abraxas> what's a timer leaks? a dangling timer that's preventing node from shutting down?
05:40 < abraxas> console.log(process._getActiveHandles(), process._getActiveRequests());
05:40 < abraxas> could give some very good feedback
05:46 < duko> today I was having a discussion about two script collections that will be run in the same page
05:47 < duko> they must communicate with one another and hook into events from one another
05:47 < duko> but they must remain independant
05:47 < duko> and the other person told me that it is inefficient to queue callbacks
05:47 < duko> and they told me that message passing is a bad idea because it creates concurrency issues and requires synch locks
05:48 < duko> i don't have much experience with synch locks
05:48 < duko> and I've googled for inefficiency and callback queue
05:48 < duko> does anyone here have an opinion on this?
05:48 < duko> an authoritative opinion would be most welcome
05:50 < mittalmohit1>  I am trying to write a client in nodejs to connect to this channel, though I am able to join this channel, I am not able to send any messages from the client. Does every message has to be prefixed with some KEYWORD ?
05:51 < duko> and is there any resource that may be used to determine the actual memory resources used for a callback queue
05:54 < progrock`> is there a btter way to do this with JADE? http://jsfiddle.net/KY4mj/
05:54 < progrock`> too much repeated code just to add a class to the current section in the menu
05:54 < progrock`> I suppose I could use plain old JS, but I feel like there should be an easy way within the template
05:55 < kevireilly> mittalmohit1: privmsg #node.js :ello
05:57 < davidbanham> progrock`: Syntax probably wants cleaning up, but something like this? - a(class=("selected" if page.metadata.section == 'services') Services
05:58 < progrock`> davidbanham: does something like that actually work in jade?
05:58 < davidbanham> progrock`: Yeah something along those lines. http://stackoverflow.com/questions/13668881/variable-in-class-name-jade
06:08 < narsic> i need haba module package, it dependency for beanpoll and beanpoll dependency for celeri, i can't install my application with npm install, because of dependency, haba package not found any more
06:12 < ak5> hi guys, I am getting a lot of npm errors, like this: "npm WARN package.json css@1.0.8 No repository field."
06:12 < ChrisPartridge> narsic: sounds like you're in a pickle (pun intended)
06:12 < ChrisPartridge> ak5: that's just a warning
06:12 <@konobi> lo
06:13 < ak5> ChrisPartridge: yeah, sorry. How do I get rid of it?
06:13 < ChrisPartridge> ak5: just ignore it, it just means whoever created the "css" module hasn't defined a repo in their package.json
06:13 < ak5> hm, ok. Then it has nothing to do with my chimera not working?
06:14 < ChrisPartridge> I don't know what chimera is, but I doubt that warning would cause any serious issues (afaik)
06:15 < ak5> thanks
06:16 < ak5> ChrisPartridge: I am trying to scrape websites with node. Do you have a recommendation on a module or something I should look into
06:17 < narsic> ChrisPartridge: i need haba module, just it :|
06:17 < ChrisPartridge> ak5: you could try cheerio
06:17 < ak5> ChrisPartridge: I need to render JS
06:18 < ak5> ChrisPartridge: the site that I am trying to get information from uses ajax calls
06:19 <@konobi> ChrisPartridge: chimera is a non-x phantomjs
06:19 < ChrisPartridge> konobi: ah ok
06:20 < ChrisPartridge> ak5: funnily enough, that's probably what you want (e.g. phantomjs, or chimera)
06:20 < ak5> konobi: have you gotten it to work? When I run the example code I get the same issues as these guys here: https://github.com/deanmao/node-chimera/issues/17
06:20 < ak5> ChrisPartridge: yeah, just I can't get it to run the example code on github :/
06:21 <@konobi> ak5: JFDI... get off your ass and try it for 12 hours\
06:22 < ak5> hm, not sure what to try at this point, tbh. I normally run the example code, then I see what it does then I write my own ^_^
06:23 < ChrisPartridge> looks like the hsoted binaries are gonneee
06:23 < ak5> yeah
06:23 < ak5> ok, then I can just build my own, thats good to know.
06:24 <@konobi> ak5: if you don't understand what an example is doing... you need someone smarter than you to explain it you
06:24 < ak5> ChrisPartridge: how did you get npm to tell you that? mine doesn't error out on `npm install chimera`
06:24 < ak5> konobi: I understand the example just fine, but it's not running, there is an error loading the lilb
06:24 < ak5> lib*
06:25 < ak5> apparently, its because the bins are missing. Now I am wondering why npm didn't care to tell me
06:26 <@konobi> ak5: yet you have an issue, which suggests you don't know the issue
06:26 < ak5> my issue is getting the example to run ^__^
06:27 < ak5> ChrisPartridge: my I ask what system you tested that on?
06:28 < ak5> because it's actually downloading the linux bin
06:28 < ak5> 48 MB
06:29 <@konobi> ak5: and you're doing npm installs... vs distro install?
06:30 < ChrisPartridge> ak5: I didn't test it, just read that GH issue
06:30 < ak5> konobi: my distro doesn't package chimera. Is that what you mean?
06:31 <@konobi> kind
06:31 <@konobi> *kinda
06:31 < ak5> konobi: :( sorry that I don't understand
06:32 <@konobi> ak5: suck it up princess, package maintaners change what they want to do all the fricking time
06:33 < ak5> konobi: don't understand why you are so hostile, but thanks, I guess
06:33 <@konobi> ak5: not trying to be
06:33 < ak5> konobi: well you *did* just call me a princess for reason beyond me
06:34 <@konobi> just suggesting that things out there are hostile... best to deal with it that way
06:34 < ak5> cool, thanks for your suggestion
06:35 < ChrisPartridge> npm install chimera && node node_modules/chimera/examples/example.js
06:35 < ChrisPartridge> worked fine for me
06:35 <@konobi> everyone in channel has a certain level of hostility... we get by regardless, because we want to get along... but we also argue a bunch too... so that's what you want to get used to
06:37 < ak5> ChrisPartridge: hm, not for me. Could you tell me your platform and the output of `du -h node_modules/chimera/lib/chimera.node`
06:37 < ak5> It might really be my f*cking chinese ISP, I don't know how npm handles that kind of thing
06:39 < ChrisPartridge> ak5: 43mb, and debian squeeze
06:40 < garthk> Anyone here written Node add-ons in C or C++?
06:40 <@konobi> garthk: look at docs
06:41 < ak5> ChrisPartridge: ok ty
06:42 < ak5> ChrisPartridge: sorry, one more thing, is the 64bit debian?
06:42 <@konobi> ak5: you may need to install a whole bunch of packages before you can npm install chimera... webkit, webkit-dev, anda crack load more
06:42 < garthk> konobi, I was going to ask a general question not covered by the docs. That OK with you?
06:42 < ak5> konobi: shouldn't npm install those as deps?
06:43 <@konobi> garthk: depends
06:43 < ChrisPartridge> ak5: 32
06:44 <@konobi> ak5: no... we have no idea of your platform
06:44 < ak5> Linux ak5-2 3.9.2-1-ARCH #1 SMP PREEMPT Sat May 11 20:31:08 CEST 2013 x86_64 GNU/Linux
06:44 <@konobi> ak5: nothing to do with npm
06:45 <@konobi> if you want to compile chimera... you need webkit-dev... that's outside of node/npm
06:45 < ak5> npm -v 1.2.21
06:45 < ak5> I am still not trying to compile but use the bin :/ don't want to recompile openssl etc unless I have to
06:46 <@konobi> tough... you need to... welcome to c++ runtime
06:46 < garthk> konobi: I'm trying to parse ~90GB at a time of repetitive data. Most of the CPU time is mucking around with strings. Can I walk the V8 ternary structures from an add-on while parsing my input data? 
06:46 <@konobi> garthk: eh?
06:47 < garthk> konobi: it's not in the docs. C'mon. :)
06:47 <@konobi> garthk: if it's quicker in C, why not do an addon?
06:49 < garthk> konobi: oh, the usual. The parsing itself is quicker in C, but the thinking takes bugger all time and I'd like to punt it to cheaper developers. So, yeah, in C as an addon is a great idea. There being a great many bloody strings involved, though, I'd like to walk V8's ternary buckets of existing strings so I can avoid creating new ones unless absolutely necessary.
06:51 < garthk> kenobi: or, I can punt that and maintain my own ternary structures and avoid creating duplicate strings myself, but then I need to either hog the memory for those structures across parsing runs, potentially forever if I'm not careful, or repeat the work every file, of which there are tens of thousands.
06:51 <@konobi> garthk: i'm thinking troll right now as that makes no sense. please do not make me bring other ops in to think on it
06:51 < garthk> So, it's kinda a “which architectural approach will least suck for this very specific use case?” question, which the docs usually don't address. 
06:53 < garthk> konobi: Oh, I wish. No, I really do have to wade through 90GB-1TB of highly repetitive XML and do something with it. I'm trying to do it in Node with a stream-handling approach so I can use back-pressure to avoid OOM. But, libxml2's parsing speed drops to ~10MB/s once it starts sending strings to Node, and I'd really like to go 10X that.
06:53 < garthk> Anyhoo: if you can't answer, I'll just do more research and wait for others to rock up.
06:54 <@konobi> garthk: get off linux.
06:54 <@konobi> most proper unixen do not have an OOM killer
06:55 <@konobi> bsd, solaris, illumos, etc.
06:55 < garthk> If I read faster than I can write, I'm eventually going to run out of swap if I don't run out of RAM, surely? 
06:56 < garthk> Mind you: right now, I can only read at 10MB/s, and that's slow enough I'm not in trouble right now.
06:57 < booyaa> garthk: just out of interest what modules ahve you used to parse your large xml stream?
06:59 < garthk> booyaa: tried node-expat, isaacs' sax if I remember right, then ended up with htmlparser2 of all things because it was a tad faster.
07:01 <@konobi> garthk: with OOm, it could kill off your tty, or your sshd... you just don't know
07:01 < booyaa> garthk: oh nvm just see th emodule i was recommeding had nothing to do with sax :o)
07:02 <@konobi> at least with a proper OS, it'll just not let you spin up bad stuff based on mem usage
07:03 < garthk> Which free Solaris sucks the least these days? I checked out Wikipedia for a list of options, but it all seemed a bit chaotic. 
07:04 < garthk> Oh, hang on! FreeBSD has DTrace. Awesome.
07:04 <@konobi> garthk: illumos is awesome... i use smartos right now, which is also what joyent run on
07:04 <@konobi> there's great tooling for node on smartos, dtrace, node-panic, etc.
07:04 < garthk> Aah, crap: "FreeBSD is supported in principle but is restricted to only 4 working arguments per probe" https://github.com/chrisa/node-dtrace-provider
07:07 < garthk> Ok, time to cook dinner. Thanks for the suggestions.
07:12 < syskk> is true an acceptable value in JSON
07:12 < syskk> or should it be a string
07:12 <@konobi> sleepy time... ttfn
07:14 < abraxas> syskk: acceptable
07:15 < syskk> right
07:19 < Atlantic777> How can I make a blocking delay? I know it's strange but I probably have to use it. I have a device on serial port which have to have a delay between bytes they get.
07:19 < Atlantic777> So if I use setTimeout() with callback, it will not work when I press a button two times in a row, right?
07:23 <@Nexxy> Atlantic777, you should be able to do it
07:24 <@Nexxy> Atlantic777, just make it so that you wait X ms before sending the data
07:25 < Jester831> anyone use mongoose-attachmentS?
07:26 < Atlantic777> Nexxy: I have that, but if I emit an event on websocket/socket.io in a row, delay in setTimeout() will work for each "thread", but I'm not sure will it mix.
07:27 <@Nexxy> just 'debounce' it by setting a handle to the timeout
07:27 <@Nexxy> and resetting it each time it's called
07:27 <@Nexxy> (if I'm understanding your problem correctly)
07:28 < Atlantic777> Nexxy: here's that port of code: https://paste.lugons.org/show/IjnBR692WtWX4wjli46b/
07:28 < Atlantic777> I'm interested what will happen if I raise 'right' event, two times in less than 50 ms
07:33 < tttir> 2
07:49 < narsic> i need haba package, any body have it?
07:54 < ChrisPartridge> narsic: it's been removed by the maintainer, either get in touch with them, or find something else
07:55 < DarkArgon> is socket.io dead?
07:55 < `3rdEden> and you base those findings on what?
07:56 < narsic> ChrisPartridge: but it's depende by another package how can install my project dependency with npm without error?
07:57 < narsic> ...because of bahha package ^
07:57 < zomg> narsic: same answer most likely. If a package depends on a package which doesn't exist, chances are that one is pretty outdated as well
07:59 < narsic> zomg: and now, how do i can?
07:59 < zomg> Sorry, what? =)
08:04 < narsic> zomg: how do i can use npm to install other dependency?
08:06 < zomg> narsic: maybe you should use another library instead, it seems they are not maintained
08:07 < DarkArgon> haba, bahha?? how is the package actually called?
08:07 < Stumbler> Say, I'm writing a barcode from image discovery library for work.  I'm at the point now where it can find and read code_39 format fairly reliably across some pretty heavy noise.    I could expand it to cover more formats, with better endpoints if there is any demand for it here.
08:08 < ak5> Stumbler: that stuffs pretty cool
08:08 <@Nexxy> Stumbler, very cool
08:08 < ak5> Stumbler: github or similar?
08:08 < Stumbler> possibly, I'm still about a week away from having it presentable, but the hard stuff is pretty much done.
08:09 < ChrisPartridge> DarkArgon: it was "haba" but since removed by the creator
08:09 < narsic> DarkArgon: haba, dependency for beanpoll, and beanpoll dependency for celeri :D i use celeri
08:09 < Stumbler> if anyone wants me to push a link once its up, shoot me your email in whisper
08:10 < ChrisPartridge> narsic: wait and see what the maintainer of celeri says to this https://github.com/crcn/celeri/issues/36
08:10 < ChrisPartridge> that's really your only choice, unless you dig into the source and replace the haba functionality
08:10 < narsic> zomg: 0k thx ;)
08:14 < narsic> ChrisPartridge: yes, and also i create issue on beanpoll, it's too bad to change in core
08:15 < narsic> ChrisPartridge: what do you think about, create package with same name, and publish it to repository just for fix npm issue, worst idea
08:17 < elliottcable> hey all
08:17 < elliottcable> So, I've got a non-JavaScript related question, that's still relevant:
08:17 < elliottcable> I use GitHub issues for, well, *issues*. This includes both bugs and large, tracked “future features.”
08:17 < elliottcable> But, beyond that, I need to track a *todo list.*
08:17 < motaka3> Hell waht is the best book for a begiinner to start learning Node.js?
08:17 < elliottcable> For some projects, that are unimportant, I use Things.app (the same system I use for my own life-stuff.)
08:18 < elliottcable> But I need something *public* (like GitHub issues) for important projects.
08:18 < elliottcable> So: How do people in here track smaller to-dos in their projects? I'd like to graduate away from `// TODO: abcdef ...` comments, without recording every little tiny to-do in GitHub issues.
08:19 < px> github checkbox markdown
08:19 < elliottcable> px ⑊ hm?
08:20 < px> You can make a markdown file or issue with [ ] in it and it will turn it into checkboxes
08:20 < motaka3> Hello please suggest a good book for a beginner to learn node
08:21 < px> Like in this pull request - https://github.com/twitter/bootstrap/pull/6342
08:21 < elliottcable> px ⑊ yeah, sure, but I'd prefer not to store this stuff in the repository in a way that requires commits ... and to boot, I'm pretty sure changes to the checkboxes don't save to the repository.
08:21 < elliottcable> px ⑊ yes, but this isn't specific to a particular pull-request or anything. I'm talking about tracking general to-do's for a project.
08:22 < zomg> elliottcable: google docs
08:22 < elliottcable> I'm basically looking for something Things.app-like that's *public* (for FOSS and multiple-contributors) and preferably *free*.
08:22 < elliottcable> I'd love tags, completion, assignment ... something as powerful as Github Issues, but focused on todo tracking, not issue/featurerequest tracking.
08:22 < zomg> Good luck with finding that
08:22 < zomg> Why not just use github issues if that works?
08:22 < elliottcable> looked into http://getflow.com/, but there's no way to make it public.
08:23 < elliottcable> zomg ⑊ Too heavy. I don't want to clutter the issues list with little one-off, one-line todo's.
08:23 < elliottcable> Todos are just inherently *different* from “issues.”
08:23 < zomg> Maybe you could use tags to filter them out or something
08:23 < zomg> but yeah I do kind of get what you mean
08:23 < zomg> I just don't think there's many particularily flexible tools like that
08:24 < zomg> free ones anyway
08:24 < elliottcable> hmm
08:24 < elliottcable> Maybe time to make a sign-in-with-GitHub tool that allows you to associate todo-lists with a particular project.
08:24 < zomg> there's a variety of paid SaaS apps that do project management stuff
08:24 < elliottcable> Doesn't sound like it's something that would be difficult.
08:24 < px> do.com
08:24 < zomg> hmm actually, what about Trello
08:24 < elliottcable> but yet-another-todo-list-app doesn't sound like something that's worth my time, unless this is *seriously* a completely unsolved problem!? (unbelievable)
08:25 < zomg> px: does that look exactly like asana? :P
08:25 < zomg> at least the task view looks almost exactly the same as asana :D
08:26 < nathan7> Issues dashboard makes it kind of a todo list
08:26 < zomg> elliottcable: but yeah Trello might work, it's sign up for free and you can use it in quite a variety of ways and you can assign, tag, etc.
08:26 < elliottcable> do.com looks pretty great
08:26 < elliottcable> playing now
08:28 < elliottcable> Wow. do.com looks way too powerful to be free.
08:29 < nathan7> ..jesus
08:29 < nathan7> My issues dashboard is useless
08:29 < nathan7> In your repositories: 294
08:29 < nathan7> 257 of them are isaacs/npm.
08:42 < nathanbz> hey, I'm using socket.io
08:42 < nathanbz> and it seems like my clients are never being deleted
08:42 < nathanbz> do I have to set a timeout or something 
08:44 < Chiffon> hi all
08:45 < TheAceOfHearts> hi
08:48 < Chiffon> About socket.io, does anyone know how to configure the delay of the 'disconnect' server event (running on Heroku) ?
08:48 < Chiffon> it is near 25 sec when the client is close for me ! :(
08:49 < Chiffon> i've try io.set("close timeout", 12); but without succes
08:49 < bubo> Chiffon: try asking in #socket.io
08:49 < Chiffon> oh thx
08:50 < r1card> I have a design question... sometimes I have a set of similar properties on a class and I have to decide between exposing them as is  object.items.get(id)  or by creating proxy methods for each of them:  object.getItem(id) I'm not sure how to do it a lot of times. Any opinions/help?
08:57 < aandy> anyone know of a generic module to use for (sql) query escaping? it's a bit difficult (for me anyway) to find on npmjs.org
08:59 < Qalqi> IJL: International Javascript League
09:00 < JOe____> Hi all 
09:01 < JOe____> how can I using request module, or http.request close the connection after getting just the header info . I do not want to waste bandwidth on receiving the body. any ideas?
09:02 < Qalqi> send nothing in the body
09:03 < boffbowsh> JOe____: send a HEAD request instead of GET
09:03 < JOe____> I am sending a POST 
09:03 < JOe____> can not use HEAD 
09:03 < Qalqi> Why is google making lot of opensource javascript projects?
09:03 < boffbowsh> Not sure then
09:04 < JOe____> can i force he connection to close? is there any event that fires after the head is received 
09:04 < JOe____> like look for \n\n
09:06 < nathan7> JOe____: ..'response' is fired
09:06 < nathan7> JOe____: that's the callback you give to http.get / http.post
09:08 < JOe____> Thanks nathan , but when is response fired ? at the start of the response ? or when all the response is received including the full body ?
09:12 < JOe____> any ideas?
09:14 < nathan7> JOe____: at the start of the response.
09:18 < JOe____> ok , how can I listen to incoming data, is there a on('data'  ...) so that after receiving the \n\n i can close the connection ( how to close the connection) 
09:20 < nathan7> JOe____: err, sorry
09:20 < nathan7> JOe____: at the end of the headers
09:20 < nathan7> JOe____: so, if you don't want the body, end it there
09:21 < JOe____> what do u mean ?
09:21 < nathan7> JOe____: res.end()
09:21 < nathan7> or, hrm
09:21 < nathan7> I think that should do it, but not sure
09:24 < JOe____> so if you do request.post( ) ; ... req.on('response', function(err,res){ var savedheader = res.headers ; res.end() })    ?
09:27 < whyhankee> hi, what is a nice way to dispatch EventEmitters events to object methods, this seems ugly: this.on('add', function () { this.add(arguments[0], arguments[1]); });
09:27 < nathan7> whyhankee: ..you realise they're called with the right this already?
09:27 < nathan7> whyhankee: so just this.on('add', this.add)
09:29 < whyhankee> nathan7: ahum, how did i get into this mess? indeed this 'just works' :) thanks
09:32 < JOe____> it di dnot work 
09:33 < ak5> konobi: are you still around? I can't wrap my head around compiling QT, if you could offer some guidance, that wouold be great
09:46 < sinclair|net> nathan7: : hello
09:46 < sinclair|net> i have a node like question
09:47 < sinclair|net> i want to be able to run dozens of node processes (by way of forking)
09:47 < sinclair|net> for each process, i would send messages to that processes, and then have the process respond
09:47 < sinclair|net> so, as far as i can tell, the messaging stuff is already handling all this
09:48 < sinclair|net> so, it sounds pretty much ideal, however the nodejs documentation suggests i am to expect a 10mb overhead in running each new proc
09:49 < sinclair|net> has anyone here had experience running many node procs ?
09:50 < sinclair|net> 10mb per process does seem a big overhead
09:50 < sinclair|net> it would be nice if that figure could be reduced
09:52 < sinclair|net> note: that the primary reason i want to be able to run so many processes, is i want to be able to have child_procs gracefully fall over without impacting on the master proc
09:52 < sinclair|net> and 10 processes would be 100mb, which is verging on insane
09:53 < sinclair|net> the ability to fork out / spawn new processes / workers would be an incredible powerful feature, if it werent so damn top heavy
09:54 < ak5> sinclair|net: maybe use less <enter> key?
09:55 < sinclair|net> ak5?
09:55 < ak5> yeah, type it all out
09:55 < ak5> without
09:55 < ak5> pressing
09:55 < ak5> enter
09:55 < sinclair|net> ak5: one sentance per line
09:55 < zomg> ak5: I think it's just you
09:56 < ak5> looks bad for me
09:56 < ak5> whatever
09:56 < sinclair|net> ak5: run along now
09:56 < zomg> If his messages were any longer they might not even fit the irc char limit
09:56 < zomg> ;)
09:56 < ak5> ?? what
09:58 < sinclair|net> ak5: got anything helpful to respond with?
09:58 < ak5> sinclair|net: can't help you
09:58 < sinclair|net> right.....
09:59 < ak5> I use heroku more often than not, and they make you pay per worker process, doesn't matter how much mem you are using per process since you are paying :/
10:00 < sinclair|net> ak5: what do you mean?
10:01 < sinclair|net> ak5: note, that these would be child_processes
10:01 < sinclair|net> you are not running "instances"
10:01 < ak5> oh I see
10:01 < ak5> well then can help you even less
10:01 < sinclair|net> not in the traditional sense, i don't know
10:02 < sinclair|net> ak5: each child_process is a entirely new instance of v8, the context in which the child_process is spawned, i really don't know
10:05 < Fabryz> Hello, is there any way to do a Batch insert with Mongoose.js?
10:05 < Siyfion> Fabryz: Yes, one sec
10:06 < Siyfion> Fabryz: Model.create()
10:07 < Siyfion> Fabryz: http://mongoosejs.com/docs/api.html#model_Model.create
10:07 < Fabryz> that saves only one row on DB, i'm now doing a for loop which saves every row
10:07 < ak5> do you need this architecture for what you are doing?
10:07 < Fabryz> but what if I want do save a whole array?
10:07 < Siyfion> Fabryz: No it doesn't, READ it.
10:08 < Fabryz> dang I was looking at .save
10:09 < Fabryz> thanks Siyfion
10:10 < Siyfion_> Sry Fabryz, I got d/c
10:10 < Siyfion_> Fabryz: Sorted?
10:11 < Fabryz> yes, I was looking at .save, .create seems to do what I'm lookoing for
10:11 < Siyfion_> Good :)
10:12 < Fabryz> thanks
10:24 < booyaa|foo> \o/
10:28 < rynkan> Whats a "MEAN" Stack?
10:28 < rynkan> apperantly means: MongoDB + Angular + Express + Node
10:29 < rynkan> Anyone have a complete tutorial with these parts together?
10:30 <@isaacbw> lol
10:31 <@isaacbw> it sounds like someone just really wanted to make an acronym 
10:32 < rynkan> Might have been, I was like "eh is that a thing now?"
10:32 < rynkan> felt old -.-
10:34 <@isaacbw> but each of those has really exceptional docs on their own
10:36 < TimTim`> well that's just mean
10:37 < mpajor_o15> I'm about to write a UDP server that will receive a bunch of data; each line received will need to be matched against a regexp-pattern where I extract certain parts of the line received. Although, my concern is that I'd like to somehow write this in a clean way where I pretty much just define all my regepx-patterns in one big array. --
10:38 < mpajor_o15> when the line matches a regexp-pattern in the array it should execute a certain function with the data extracted with the help of the regexp-pattern. Is there a "clean" and smooth way of doing this?
10:40 < Fabryz> can't find a twitter channel, On Twitter Streaming API: does anyone know if it's supposed to push me only around 50 tweets per second? is it capped to something? I mean I get around 50, see some millisec delay, then another block of 50 and so on
10:44 <@isaacbw> that sounds about right
10:44 <@isaacbw> you certainly don't get a firehose if that's what you mean
10:45 < Fabryz> ok
10:45 < Fabryz> do you know if there's anything specific about this on twitter docs? I just see generic stuff about rate limiting
10:46 <@isaacbw> I'm sure it mentions it somewhere
10:46 <@isaacbw> the twitter api docs are a little haphazard though
10:47 <@isaacbw> but what you get is a sampling of tweets
11:04 < sinclair|net> isaacbw: hello
11:04 <@isaacbw> sinclair|net: hello
11:16 <@isaacbw> everyone is beautiful
11:16 <@isaacbw> and so are you
11:18 < Qalqi> hi node babes
11:27 < ak5> is there a preferred way to get node on ubuntu? the repo packages seem old
11:28 < radiodario> does anybody know of a good howto for setting up building of a node.js project with jenkins?
11:28 < radiodario> ak5: build from source!
11:28 < ak5> radiodario: is that the preferred way? ok
11:28 < radiodario> usually yes
11:28 < radiodario> also nvm
11:30 < ak5> nvm?
11:30 < mAritz> nvm.
11:31 < ak5> hah, terrible acronym
11:32 <@isaacbw> -g node ppa @ ak5
11:32 < purr> ak5: node.js : chris lea - Launchpad <https://launchpad.net/~chris-lea/+archive/node.js/>
11:33 < radiodario> ak5: node version manager
11:33 < ak5> radiodario: yeah I got it
11:40 < durre> I have a node app where the mem, cpu, load is basicly flat. then sometimes (once every other month) the load graph starts to grow linearly until the app crashes. I have no idea what triggers this and I need some advice on how to debug this when the mem, cpu etc starts to grow 
11:42 < durre> it's running on a centos machine. we haven't seen this in the test env where the load is basicly non-existent
11:42 <@isaacbw> I wouldn't trust v8 to run that long
11:49 < sinclair|net> isaacbw: : oh, i have a question related to that
11:50 < sinclair|net> i want to run dozens of forked child_processes
11:50 < sinclair|net> such that, if one child_process goes down, i can start it up again on the master proc
11:51 < sinclair|net> isaacbw: my concern is really one of memory required 
11:51 < sinclair|net> docs say 10mb
11:51 < sinclair|net> per proc
11:51 < sinclair|net> so, thats 100mb for 10 of them, and a gig for 100
11:52 < sinclair|net> i know memory is cheap, but 10mb for a given process is ridiculous, especially given the usefulness of the feature. care to comment?
11:54 < durre> isaacbw: huh? node isn't stable enough to run for a month?
11:55 < sinclair|net> isaacbw: are you on the node core team?
11:56 <@isaacbw> I'm not isaacs
11:57 < mhradilek> Hello, what is the purpose of npm global mode? I thought I could install modules globally this way and require them many times.
11:57 <@isaacbw> and no
11:57 < `3rdEden> mhradilek: cli tools :)
11:57 <@isaacbw> don't listen to anything I say
11:58 < mhradilek> `3rdEden, so it is not supposed to be possible to require such globally installed module from my app?
11:58 <@isaacbw> no
11:58 < sinclair|net> isaacbw: too late
11:59 < sinclair|net> isaacbw: can you look at this for me, line 36 http://pastebin.com/ARpWyF4b
11:59 < sinclair|net> the serInterval
11:59 < sinclair|net> *setInterval
12:00 < nathan7> mhradilek: https://npmjs.org/doc/faq.html#I-installed-something-globally-but-I-can-t-require-it
12:01 <@isaacbw> sinclair|net: that's a pretty roundabout way of doing it
12:01 < starta> hi! how can I setup a javascript project?
12:01 < sinclair|net> isaacbw: what is the alternitive
12:01 < sinclair|net> isaacbw: how else would you implement it?
12:03 <@isaacbw> save a closure somewhere and call it in the socket.on('data') handler
12:03 < mhradilek> nathan7, I could understand that but why is the node looking for it in nonexistent directory "/usr/lib/node/"?
12:03 < sinclair|net> isaacbw: i have that tho
12:04 <@isaacbw> no you don't
12:04 < sinclair|net> isaacbw: line 17
12:04 <@isaacbw> also, why do you have two lines of whitespace between every line of code :(
12:04 <@isaacbw> sinclair|net: right, so save a closure somewhere which will call the callback you have in socket.write
12:04 < sinclair|net> isaacbw: i know, i have bad visiion and it helps me read the code
12:05 < sinclair|net> isaacbw: what i want (from a client api point of view is)
12:05 < sinclair|net> client.send(request, function(response) {});
12:06 <@isaacbw> oh, you don't have two lines, pastebin just has really big line spacing
12:06 < sinclair|net> isaacbw: so, client.send has to 'wait' for the response, but polling the 'buffer'
12:07 < sinclair|net> i don;t like 'polling the buffer for a response
12:07 < sinclair|net> isaacbw: given this is a socket connection, im wondering if there would be another way to do this
12:08 <@isaacbw> I gave you a suggestion
12:08 < sinclair|net> isaacbw: i have tried saving the callback, and firing it from line 17, but it is ugly
12:08 <@isaacbw> not as ugly as a setInterval
12:08 < sinclair|net> isaacbw, um, i suppose
12:09 <@isaacbw> I'm not exactly sure what you're trying to do though, so I can't be very helpful
12:09 < sinclair|net> isaacbw: there is a reason why saving the callback / closure wouldn't work tho
12:09 < sinclair|net> client.send(request, function(response) {});
12:09 < sinclair|net> client.send(request, function(response) {});
12:09 < sinclair|net> ^ it breaks
12:10 <@isaacbw> so keep a list
12:10 < sinclair|net> isaacbw: are you sure it is as trivial as that?
12:11 <@isaacbw> or actually, even better would be to do self.socket.once('data', function() { callback() }) in socket.write
12:11 <@isaacbw> and no I'm not sure, since I really don't know what you're doing
12:12 < arsdmthe> what is the lightest DB to use in node ???
12:12 <@isaacbw> arsdmthe: fs.writeFile
12:12 <@isaacbw> wait no, var db = {};
12:12 <@isaacbw> ^^ in memory for super speesz
12:12 <@isaacbw> speedz
12:12 <@isaacbw> document object store wit id lookups
12:13 < arsdmthe> thanks isaacbw 
12:13 <@isaacbw> you're very welcome
12:15 <@isaacbw> sinclair|net: I'm pretty sure your current code won't work with multiple sends either
12:16 < dypsilon> arsdmthe, i think redis is what you are looking for
12:17 <@isaacbw> I'm sorry if I'm being terse, I didn't sleep last night
12:18 < mhradilek> Any developer who can explain that? http://pastebin.com/TK2pVYzk
12:18 < dypsilon> hah! sleep...
12:19 < ak5> isaacbw: btw that repo is down FYI
12:20 < ak5> isaacbw: omg no its not I am jsut being stupid again :/
12:20 < sinclair|net> isaacbw: no no, you have actually been very helpful
12:20 < sinclair|net> thank you
12:20 < ak5> long day, I better retire
12:20 < ak5> bye~~]
12:20 <@isaacbw> ak5: haha, okay. Well, that's what everyone on ubuntu seems to use so it should be alright
12:27 < spion> aww yeah, node v0.11.2 --harmony means generators with yield and yield*
12:28 < mathiask> Hey I'm running a node server on my windows machine and I'm a bit confused about memory usage.. the task-manager shows increasing memory for the node process but if i take v8-heap-snapshots the heap size is much smaller and always the same (+-100kb) ?!
12:30 <@isaacbw> it's common to allocate more memory than is actually being used and to hang on to it for later
12:30 <@isaacbw> are you sure your heap never gets bigger?
12:32 < abrkn> is ./node_modules/.bin added to the path by default when installing node on linux?
12:32 < megablue> hi guys, what is the proper method to deal with floating point calculation on javascript (node to be specific).
12:33 <@isaacbw> abrkn: "installing * on linux" isn't very meaningful
12:33 < megablue> is there any module to deal with such thing elegantly? 
12:33 < dypsilon> https://github.com/sjkaliski/numbers.js
12:33 < dypsilon> maybe
12:33 < AAA_awright> spion: That's v8
12:33 <@isaacbw> javascript has built in floating point math
12:33 < mathiask> i took 3 heap snapshots and they were about 6Mb. not much bigger. but the task manager shows up to 60Mb ram usage within hours. I'm not so good in finding memory leaks. taking a snapshot also raised the ram. :/
12:33 < megablue> or should i write C extension to deal with it?
12:33 < abrkn> isaacbw: travis-ci
12:34 < megablue> ok i try to look into that, thanks issaacbw
12:34 < spion> AAA_awright, yes it is. but, writing my callback-based generator task library without node would be useless. so yeah, v8, but also node.
12:35 < AAA_awright> spion: What do you mean useless? You can use v8 without the Node.js library on top
12:35 < AAA_awright> Node.js is a *very small* project
12:36 < spion> why would I write such library if there are no other libraries to use it with
12:36 < spion> :)
12:36 < spion> or rather to try it out with
12:36 < AAA_awright> Just because you don't use Node.js doesn't mean you don't use some other library
12:36 < AAA_awright> e.g. DOM, in a web browser or otherwise
12:36 <@isaacbw> spion: what you're supposed to say is "AAA_awright, you were right and I was wrong"
12:37 < AAA_awright> It's a question, isaacbw
12:37 < spion> in the browser land there is already an increase in the usage of promises, and there are generator libraries like task.js that already implement promise-based "tasks"
12:38 < abrkn> i like promises in the browser. in node, meh.
12:38 <@isaacbw> promises 4 lyfe
12:38 < spion> I want to try out and make a similar API for the callback-based node libraries.
12:40 < abrkn> var helloWorld = Q.func(function() { return 'Hello World' }); helloWorld.done(function(msg) { console.log(msg) })
12:40 < sinclair|net> isaacbw: ok, i have rewritten that code a bit
12:40 < spion> e.g. var contents = yield fs.readFile.bind(fs, '/etc/passwd');
12:40 < sinclair|net> isaacbw: this seems to work... http://pastebin.com/reYSWj0p
12:40 < AAA_awright> Wait, I thought yield was for iterators
12:41 < spion> you can yield whatever you want.
12:41 < sinclair|net> AAA_awright: yield can be used for a few things
12:41 <@isaacbw> and can be used for neato coroutines
12:41 < AAA_awright> spion: What do you mean by promises, exactly? The "Promises specification" is really downright awful, and I'm starting to think Node.js doesn't do it exactly right either
12:41 < abrkn> node doesnt do promises...?
12:42 < abrkn> you're in callback country now
12:42 < AAA_awright> Web browsers don't do promises per that draft either, they have DOM Events
12:42 < spion> AAA_awright, actually I mean anything that gives you a return value
12:42 < AAA_awright> Which seems to be the right thing to do
12:42 <@isaacbw> sinclair|net: wouldn't you want to call all the callbacks instead of just the first?
12:42 < AAA_awright> spion: So, events, then
12:43 < sinclair|net> isaacbw: well, given its a socket, i have mocked this up so that the server responds by new line delimited messages
12:44 < sinclair|net> isaacs: the server may respond with one or more messages, if it responds with more than one, i call recv() to get that message
12:44 <@isaacbw> misfire
12:44 < spion_> well, although there are some differences in the implementation, most promise libraries are very similar - you make a defered, you can resolve or reject it, and the promise object has at least a .then method.
12:44 < sinclair|net> isaacbw: how so?
12:44 <@isaacbw> you pinged the wrong isaac
12:45 < sinclair|net> oh
12:45 < sinclair|net> that's tab complete for you
12:45 < spion> AAA_awright, which "promises specification" ?
12:45 < spion> commonjs or the browser one?
12:46 < sinclair|net> isaacbw: so this seems to work, but i still feel like there is a underlying concept here just begging to be exposed
12:46 < AAA_awright> spion: I think promises are a very specific API, if you return an object to which you can define callbacks, like readFile('xyz').onsuccess = function(contents){ /* */ } that's called events, or DOM-style events
12:46 <@isaacbw> sinclair|net: probably
12:46 < sinclair|net> isaacbw: the concept has to do with the queuing of messages and callbacks
12:47 < sinclair|net> so, calling recv is basically assigning a callback to a given message
12:47 < standoo> Hello
12:47 <@isaacbw> AAA_awright: promises are containers for data which may take a while to get there
12:47 < AAA_awright> DOM-style events is its own specific API to which you can do req.addEventListener('name', callback)
12:48 < spion> AAA_awright, I meant CommonJS promises
12:48 <@isaacbw> think of promises as the noun to your event verb
12:48 < AAA_awright> event is a noun...
12:48 < spion> the smallest subset 
12:48 <@isaacbw> AAA_awright: you really ought to lighten up on the pedantry
12:49 < standoo> Genatz you here?
12:49 < AAA_awright> isaacbw: I event faster than you... It's not pedantics, I really have no clue what you mean
12:49 < abrkn> isaacbw: i'm struggling a little with a travis-ci setup. not sure how useful this is, but: https://travis-ci.org/#L668 (pg-migrate exists, but when i run it i just get no such file or directory. here's the bin: https://github.com/abrkn/pg-migrate/blob/master/bin/pg-migrate
12:50 < spion> Anyway, since a lot if not most of node.js libraries avoid promises and use plain callbacks, I think that a "task manager" that accepts generators which yield callback functions (like the ones you can pass to caolan's async) would be cool.
12:50 <@isaacbw> AAA_awright: well, okay then
12:50 <@isaacbw> abrkn: I'm sorry, I really don't know much about travis-ci
12:50 < AAA_awright> If it were pedantics I'd make a guess and ask if I'm correct
12:51 < abrkn> isaacbw: ok. would you mind looking at https://github.com/abrkn/pg-migrate/blob/master/bin/pg-migrate to make sure id idnt mess up the #! ?
12:51 < abrkn> isaacbw: just copied it from mocha's
12:51 <@isaacbw> your shebang looks fine
12:51 < abrkn> ok thanks
12:51 < standoo> She bangs 
12:52 < abrkn> standoo: http://instantostrich.com
12:53 < standoo> Haha
12:53 < standoo> Cool
12:53 < spion> so I'm going to quickly write one and try it out
12:53 <@isaacbw> AAA_awright: ultimately what I'm saying is that promises and events can coexist peacefully if you make sure to think of promises as data
12:53 < standoo> Write what?
12:54 < spion> Something that will prove that generators/yield can be useful even without promises.
12:54 < spion> :)
12:54 < spion> (useful for node that is)
12:55 <@isaacbw> spion: do it
12:56 < bnoordhuis> fwiw, --harmony_generators is available in node master
12:56 <@isaacbw> I'm surprised how fast the v8 implemented it
12:56 < bnoordhuis> they didn't, it's andy wingo's work :)
12:57 <@isaacbw> oh, very cool
12:57 <@isaacbw> *team
12:58 < AAA_awright> And how does one raise an Error when using yield?
12:58 < chirag> isaacbw: How do one spawn node process on remote servers?
12:58 < spion> var myGen = generator(); myGen.throw(new Error(...))
13:00 < AAA_awright> spion: I'm talking about the yield syntax specifically
13:03 < spion> if the generator itself throws, I believe that the call site can catch the exception. let me check.
13:04 < spion> AAA_awright, yup, that is what happens. you get an exception at the place that called gen.next() or gen.send()
13:06 < AAA_awright> spion: That's in the ECMAScript builtin APIs?
13:08 < spion> AAA_awright, I'm reading what MDN says and trying it out in node 0.11.2 (with the different syntax)
13:13 <@isaacbw> firefox implemented some non-standard stuff I think, so be careful with mdn
13:14 <@isaacbw> oh, I'm sure you saw that
13:15 < chirag> isaacbw: How do one spawn node process on remote servers?
13:17 < dscape> isaacbw: are you isaac or is there a new isaac? :) isnt it like 7am there?
13:17 <@isaacbw> I'm a different isaac
13:17 <@isaacbw> on the east coast
13:17 < sinclair|net> i learnt that JavaScript would have probably a dead language had it not been for the competition put forth by Microsoft's JScript
13:17 <@isaacbw> isaacs from coast to coast
13:17 < dscape> ok, makes sense :)
13:17 < dscape> i know there is nodestack in a couple of hours
13:17 < dscape> but still
13:17 < sinclair|net> that is the view of Douglas Crockford
13:18 < spion> isaacbw, thats why I'm trying it out first :)
13:24 < ak5> anyone still looking at meteor? I heard they are actually usable now?
13:25 < syskk> does anyone else think ecmascript should be renamed to javascript?
13:25 < adrianlang> ak5: Derby.js
13:25 <@isaacbw> no
13:26 < ak5> adrianlang: their last blog entry was ~6M ago
13:27 < adrianlang> ak5: Yeah, their last commit not, though
13:27 <@isaacbw> a better metric is the last commit
13:27 < ak5> oh, ok so they are still working on it?
13:27 < adrianlang> ak5: They are
13:28 < ak5> I'm just asking because I met a guy that wrote a book on meteor
13:28 < syskk> i really dont get why we need a different name for the spec and the implementation
13:28 <@isaacbw> meteor is great if you trust other people
13:28 < abrkn> or if you want to learn insane amounts of weird apis
13:29 < abrkn> seen the docs? jesus christ...
13:50 < mscdex> syskk: https://en.wikipedia.org/wiki/ECMAScript#History
13:51 < syskk> mscdex: right
13:51 < syskk> "ECMAScript was always an unwanted trade name that sounds like a skin disease."
13:51 < syskk> haha
13:51 < werle> ha
13:52 < pachet> do you guys pronounce it 'ehkmuh' conversationally?
13:52 < mscdex> we just don't talk about it
13:52 < pachet> good number of devs i know insist on saying every letter in the acronym
13:52 < pachet> and then look at me weird :[
13:52 < mscdex> well, it is an acronym
13:53 < syskk> I do pachet
13:53 < pachet> but if you were to say 'ecmascript 5' in a sentence, would you say, 'ee see em ay five'?
13:53 < pachet> s/ay/ay script
13:53 < syskk> but i've never heard someone actually saying it out loud haha
13:53 < syskk> when i read it in my head i pronounce 'ehkma'
13:53 < AAA_awright> Ec Ma Script Five
13:54 < syskk> what the heck … ma
13:54 < pachet> whew
13:54 < ljharb> pachet: E S 5? why would you say the full eckma script
13:54 < AAA_awright> Ehk Muh... no?
13:54 < syskk> for a long time i used to say S-Q-L but now i say sequel too :)
13:54 < ljharb> it's not an acronym
13:54 < AAA_awright> Ecma rolls off the tounge better
13:54 < ljharb> it's an initialism
13:55 < ljharb> like HTML or GIF or JPEG. and you read them out loud as, whatever sounds the most natural. :-)
13:56 < AAA_awright> ljharb: You pronounce it as a word so it's an acronym
13:56 < pachet> what gets me is people that pronounce 'regex' as 'reh-jex'
13:57 < AAA_awright> pachet: "Rejects what? Why was it rejected?"
13:57 < ljharb> ah yes, that's right
13:57 < ljharb> it's both an acronym and an initialism
13:57 < AAA_awright> Initialism would be like FBI
13:57 < pachet> AAA_awright exactly, 'rejector expressions'?
13:57 < AAA_awright> I think
13:57 < ljharb> pachet: of course, "regg-ex" is weird.
13:57 < AAA_awright> It's not very clearly defined
13:57 < syskk> I say regg-ex 
13:57 < syskk> rejex is weird
13:57 < pachet> syskk me too
13:58 < AAA_awright> But what do I know, I say S-Q-L and not sequel
13:58 < ljharb> lol yeah, i say sequel
13:58 < syskk> it stands for REGular EXpression after all
13:58 < pachet> i guess it just goes to show
13:58 < pachet> that we need to hurry up and birth AI so we can stop worrying about this whole puny verbal communication thing we do
13:58 < syskk> lol
13:58 < AAA_awright> spion: You'd think right? Say it like you say it in the word. REG(ular) EX(pression)
13:59 < syskk> we should do a survey on how people pronounce those things
13:59 < pachet> that's a fun little idea
13:59 < AAA_awright> It's not '/lib' with the short-I sound, it's lib like the first syllable of LIBrary
13:59 < syskk> rejular expressions :D
13:59 < pachet> buzzwords and acronyms are so prevalent in our line of work :[
13:59 < reddy> are there any pragma implementations in nodejs?
13:59 < AAA_awright> HTML, who pronounces that as an acronym :-\
13:59 < spion> I say S.Q.L. and REG(ular) EX(pression)
14:00 < pachet> huhtemmel
14:00 < AAA_awright> lol
14:00 < syskk> lib, i always pronounced "leeb"
14:00 < Guest62823> are there any pragma implementations in nodejs?
14:00 < syskk> because thats how we pronounce in french -_-
14:00 < AAA_awright> I guess if you had to pronounce it, it would be more like HyTeMaLa
14:00 < AAA_awright> O_O
14:01 < ljharb> these things aren't pronounced based on their origin, but as what sounds the most natural in terms of vowel sounds and glottal stops and whatnot.
14:01 < syskk> lol
14:01 < ljharb> which is subjective, but doesn't vary that widely.
14:01 < syskk> right
14:01 < AAA_awright> ljharb: Usually it's arbritrary though
14:01 < ljharb> only insofar as our brains differ. we're still all human :-p
14:01 < AAA_awright> WRONG SIR
14:01 < ljharb> native english speakers probably say "libb" for example
14:02 < ljharb> unless they're being obstinate, so hush you.
14:02 < syskk> i havent worked in an office with coworkers for too long so its interesting to find out how people pronounce those things
14:02 < AAA_awright> Well it's short for library so... liib (I guess would form the long-I sound), or laib
14:02 < ljharb> right, except nobody says that
14:03 < ljharb> because "lye-b" is a very unnatural sound in english
14:03 < syskk> i always say lib like in libido
14:03 < ljharb> yes, libb. that's how i say it too
14:03 < syskk> and bin like in robin
14:03 < AAA_awright> The hard B is unnatural?
14:04 < ljharb> no, the "eye" sound followed by a hard b
14:04 < syskk> agreed
14:04 < ljharb> … and then ending the word
14:04 < AAA_awright> It's right in the middle of lib-rary
14:04 < AAA_awright> It's not like I invented it
14:04 < ljharb> ie, library is smooth, but "lie-b" with the glottal stop is weird.
14:04 < syskk> sounds fine in library.. .but lib alone it feels weird to me 
14:04 < AAA_awright> Lib-rar-y
14:05 < ljharb> the "br" sound rolls off the tongue
14:05 < pachet> i tend to break the first syllable off at 'li'
14:05 < pachet> li...brary
14:05 < pachet> bi...nary
14:05 < ljharb> same
14:05 < ljharb> i'm definitely also just talking about native english speakers. if you started speaking anything else, or even if you're fluent in anything else, you very likely have different linguistic norms
14:33 < creationix> working with protocols is so much fun
14:34 < creationix> even more fun than college physics!
14:37 < brainproxy> creationix: more fun than monads?
14:37 < Havvy> brainproxy: You can use monads with protocols.
14:37 < creationix> brainproxy, for sure
14:38 < Havvy> Personally, I tried using protocols with JS...I didn't like it.
14:38 < creationix> not sure what you mean by "protocols"
14:38 < brainproxy> creationix: I assumed creationix was talking about data transport prototocols
14:38 < creationix> I'm talking about arbitrary streams and converting between them
14:38 < Havvy> Oh.
14:38 < Havvy> I was thinking about http://clojure.org/protocols
14:39 < brainproxy> ah
14:39 < brainproxy> yeah, of course, protocols can actually be a basis for monads in clojure
14:39 < creationix> to me, it feels like playing with a construction kit
14:39 < creationix> I have pipes, links, and converter boxes
14:39 < creationix> just tie things together and have fun
14:39 < brainproxy> creationix: working on jsgit?
14:39 < creationix> yep
14:40 < brainproxy> oh btw, I made a donation but didn't end up in the contributors thing
14:40 < brainproxy> file github issue for that?
14:40 < creationix> here is the fun I wrote yesterday https://gist.github.com/creationix/5614973#file-proxy-js-L60-L90
14:41 < brainproxy> creationix: cool looking :D 
14:41 < creationix> brainproxy, what's your name
14:41 < brainproxy> Michael Bradley
14:41 < creationix> or right, I knew that :/
14:42 < creationix> brainproxy, it's because you requested to have no reward
14:42 < creationix> what would you like, you donated plenty to get at least listed
14:42 < brainproxy> oh, gotcha
14:43 < brainproxy> I kinda remember clicking that
14:43 < brainproxy> i was just so excited to fund the project
14:43 < brainproxy> or help fund I mean
14:43 < Chiffon_> About socket.io : does anyone knows how to force the server event "disconnected" just after user close the browser ? On Heroku, it's validate between 10 and 25 seconde later :(
14:43  * nathan7 hugs creationix 
14:44 < brainproxy> creationix: hm, well I guess just list me in whatever category in backers.md i belong in, that's fine
14:44 < brainproxy> if I qualify for that
14:44 < sinclair|net> well that sucks
14:45 < creationix> you over qualify for Believer, but not quite enough for Open Web Warrior
14:45 < sinclair|net> the yield keyword is not available in node :(
14:45 < bnoordhuis> sinclair|net: is too
14:45 < creationix> sinclair|net, it's in the latest 0.11.x release
14:45 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:45 < creationix> with a flag
14:45 < sinclair|net> no wai!
14:45 < bnoordhuis> yeah way
14:46 < bnoordhuis> --harmony_generators
14:46 < sinclair|net> that's awesome
14:46 < sinclair|net> i just downloaded the latest release tho
14:46 < sinclair|net> .10.7
14:46 < bnoordhuis> it's only in 0.11.2 and master
14:47 < sinclair|net> bnoordhuis: callbacks have been bothering me a lot in nodejs lately
14:48 < creationix> sinclair|net, you can also use node-fibers today, they are more powerful than yield
14:48 < creationix> but it's a C addon
14:48 < creationix> not part of V8
14:48 < sinclair|net> creationix: yes, ive used them
14:48 < context> screw Dropbox. get 20G free: https://copy.com?r=U7E2Ar
14:49 < bnoordhuis> sinclair|net: stop worrying and learn to love the callback
14:49 < sinclair|net> bnoordhuis: i can't, i have used way better things
14:50 < bnoordhuis> 'better' is such a subjective word
14:50 < AAA_awright> Best is better, use best
14:50 < AAA_awright> :p
14:51 < Havvy> sinclair|net: Then create the better things.
14:51 < creationix> sinclair|net, I will warn though, generators aren't as powerful as fibers or coroutines
14:52 < creationix> though that may end up being a feature if it ever gets fast
14:52 < sinclair|net> creationix: fibers don't run where i need them to run
14:52 < creationix> for now, generators are pretty slow
14:52  * sinclair|net knows ALL about fibers
14:52 < bnoordhuis> yeah, they're good for you
14:52 < gbit86> finally I found a solution
14:53 < gbit86> when http.request fails.. use something else.. that actually works! Call up curl!
14:53 < g0z> node-curl?
14:53 < sinclair|net> creationix: if it was built into node, that would be good, but node isn't really going to do the fiber / threaded thing
14:54 < sinclair|net> creationix: instead, you can get by with child_processes, and 10mb per process :(
14:54 < gbit86> interesting.. I was about to use something else to call up curl from the terminal as I found a code example, but I will look into the node-curl wrapper as well
14:54 < bnoordhuis> sinclair|net: try streamline.js if callbacks aren't your thing
14:54 < gbit86> thanks, g0z
14:54 < sinclair|net> creationix: node is already gear for that
14:55 < creationix> streamline has backends for normal js, node-fibers, moz generators and v8 generators
14:55 < sinclair|net> creationix: its not what i need tho
14:55 < bnoordhuis> callback hate is kind of silly imo but streamline.js is closest to what i would replace it with
14:56 < sinclair|net> bnoordhuis: well, a X > JS compiler language would help solve matters
14:56 < bnoordhuis> sinclair|net: that's pretty much what streamline.js is, i think
14:57 < bnoordhuis> only the X is JS here
14:57 < bnoordhuis> it rewrites the source to continuation-passing style
14:57 < sinclair|net> bnoordhuis: well that's nice and all, but how well does it play with coffeescript, typescript and other compilers ?
14:57 < bnoordhuis> who cares? who uses that?
14:57 < creationix> they have variants that do the same thing
14:58 < sinclair|net> i do
14:58 < bnoordhuis> not Real Men, that's for sure
14:58 < bnoordhuis> oh <awkward silence>
14:58 < sinclair|net> bnoordhuis: no, "real" programmers
14:58 < creationix> bnoordhuis, not everyone is a super hacker like you
14:59 < sinclair|net> bnoordhuis: this streamline.js solves one problem,( and not very well imo) and does nothing to address other problems
14:59 < creationix> sinclair|net, what problem does streamline not solve?
15:00 < bnoordhuis> creationix: oh, i only play one on tv. i was the body double of the guy in swordfish
15:00 < sinclair|net> bnoordhuis: but back to the callback soup thing, promises are the accepted standard for async composition in JS
15:00 < creationix> define "accepted"
15:00 < bnoordhuis> "most vocal minority" :)
15:00 < sinclair|net> creationix: ^
15:00 < creationix> I'm pretty sure callbacks are the standard in node
15:01 < sinclair|net> creationix: ...
15:01 < creationix> of course, what do I know, I only spent an entire year re-implementing node in lua just so I could play with coroutines
15:01 < sinclair|net> anyway, i think it would be good to have X > JS compiler languages build on the promise "standard"
15:01 < creationix> sinclair|net, then build it.  I'm not going to write anything that depends on promises
15:02 < creationix> I'll use them in an app if my team wants to
15:02 < creationix> but I'm not going to mandate their use
15:02 < sinclair|net> creationix: im not asking you to
15:02 < creationix> sinclair|net, have you seen task.js?
15:02 < creationix> it's basically what you speak of and built on promises and generators
15:02 < creationix> no precompiler needed
15:03 < creationix> though I think it can be used with esprima
15:03 < creationix> for non es6 runtimes
15:03 < sinclair|net> creationix: looking now
15:03 <@isaacbw> that's the first I've heard of promises being any sort of accepted standard
15:03 < sinclair|net> creationix: thats a bit more like it
15:04 <@isaacbw> only cool people use promises and not everyone can be cool
15:04 < sinclair|net> isaacbw: oh, i don't, i can only contrast with things i have seen elsewhere, namely the concurrency stuff in .net 4.5
15:04 < creationix> sinclair|net, also, if you havn't seen, look at http://wingolog.org/archives/2013/05/08/generators-in-v8
15:05 < pinja> don't understand how promises > callbacks
15:05 < creationix> pinja, they are way more powerful at the cost of a library and added abstration
15:05 < sinclair|net> isaacbw: so in the .net case, they implemented promises (named Tasks type Task<T> <-- ftw)
15:05 < brainproxy> pinja: promises are values
15:05 < bnoordhuis> well, if you sort the words lexicographically
15:05 < brainproxy> pinja: values that can be passed around like other objects
15:06 < creationix> personally, I can rarely justify the extra dependency and abstraction
15:06 < pinja> i understand what a promise is
15:06 < brainproxy> values which encapsulate the result of a yet-unfinished computation
15:06 < creationix> I've got nothing other than that against promises
15:06 < pinja> i don't understand how it's better
15:06 <@isaacbw> why can't promises and callbacks just get along
15:06 < creationix> everyone, just use continuables!
15:06 < pinja> i can pass a function just as easily as a value
15:06 < sinclair|net> isaacbw: on its own, its kinda nice to have a task primitive to structure concurrency, but in C#, they wrapped up the Task in the async /await syntax
15:07 < creationix> say hello to 2010 http://howtonode.org/do-it-fast
15:07 < sinclair|net> isaacbw: it would be really really awesome to see X > JS compilers embrace promises, and output mini state machines with a async / await type of syntax
15:07 < brainproxy> sinclair|net: i'm working on that right now
15:07 < brainproxy> except no  compiler
15:07 < brainproxy> just vanilla js
15:07 < sinclair|net> woo hoo!
15:07 < brainproxy> and some sugar
15:07 < bnoordhuis> creationix: admittedly the promises in core were implemented rather awkwardly :)
15:08 <@isaacbw> give me some sugar
15:08 < creationix> sinclair|net, you do know that streamline uses futures internally
15:08 < sinclair|net> brainproxy: has to be able to handle loops
15:08 < brainproxy> sinclair|net: https://github.com/michaelsbradleyjr/jonas
15:08 < creationix> (which actually look exactly like my modern spec for continuables)
15:08 < brainproxy> it's pre alpha, lots to do, but I have the vision
15:08 < bnoordhuis> creationix: continuable == continuation or ?
15:08 < brainproxy> the really powerful part will be the "do" syntax
15:08 < creationix> bnoordhuis, "continuable" = function that accepts callback
15:08 < sinclair|net> brainproxy: we should talk more on this
15:08 < brainproxy> which will dogfood the state monad to let you write programs like you described
15:09 < creationix> it can be made as simply as using bind on a node function
15:09 < sinclair|net> brainproxy: wanna help me extend typescript ?
15:09 < creationix> fs.readFile.bind(fs, "/path/to/file")
15:09 < brainproxy> sinclair|net: I'm actually getting ready to "rebrand" the current State impl as pState
15:09 < creationix> where the callback is the continuation
15:09 < brainproxy> and write a synchronous variant that's just STate
15:09 < brainproxy> *State
15:09 < bnoordhuis> creationix: right, right
15:09 < sinclair|net> brainproxy: built on promises tho right?
15:10 < brainproxy> pState will be promises backed
15:10 < brainproxy> State will just be synhronous continuations
15:10 < creationix> bnoordhuis, I get half the benefits of promises, but no extra abstraction
15:10 < brainproxy> pState will use State internally to compile the little "do" programs
15:10 < creationix> having returned values that can be passed around make writing flow-control libraries much easier
15:11 < creationix> and when generators land in stable node, then they can be used instead of promises to suspend generators
15:11 < brainproxy> actually that's not right, i meant that "do" programs will synchrnonously compile using State, anway, will be a few days yet
15:12 < creationix> with "continuables" and ES6 generators, this is all it takes to do faux-blocking https://gist.github.com/creationix/5544019#file-testgen-js-L14-L42
15:12 < creationix> anyway, back to implementing git
15:12 < mscdex> node.js rules!
15:13 < brainproxy> sinclair|net: the really cool thing will be to use jonas.State and jonas.pState with persistent data structures ala David Nolen's "mori" library
15:13 < pinja> that nic kills me
15:13 < sinclair|net> mscdex: it really doesn't rule, not yet it doesnt anyway
15:14 < sinclair|net> mscdex: it could "rule", but its far from "ruling" at this stage
15:14 < bnoordhuis> sinclair|net: we have people at key positions, we're just waiting for the right time...
15:15 < sinclair|net> bnoordhuis: what people?
15:15 < bnoordhuis> the codeword is "swordfish". don't tell anyone
15:15 < brainproxy> hehe
15:15 < sinclair|net> bnoordhuis: you just told the whole channel
15:15 < bnoordhuis> i have faith in everyone here
15:16 < brainproxy> I think it depends what you're doing, right; personally, I now prefer to write, say REST api servers  using clojure
15:16 < bnoordhuis> *group hug*
15:16 < brainproxy> but for async dominated projects, like a network agent
15:16 < brainproxy> nodejs is awesome
15:16 < sinclair|net> brainproxy: i am just fighting through network protocols using node in a current project, its hellish
15:17 < brainproxy> sinclair|net: what's the hellish part?
15:17 < sinclair|net> brainproxy: its easy to connect a socket, read from the socket, send data to a socket, but beyond that, things get complex, too complex
15:17 < brainproxy> control flow blues?
15:17 < sinclair|net> brainproxy: yes, control flow blues
15:17 < brainproxy> sinclair|net: yeah, I gotcha, well I hope jonas is going to help things
15:17 < brainproxy> for my own projects, and others too
15:17 < sinclair|net> brainproxy: im a TS programmer
15:18 < brainproxy> TS?
15:18 < sinclair|net> brainproxy: TypeScript
15:18 < creationix> sinclair|net, for js-git, I'm avoiding control-flow blues by using min-streams
15:18 < niggler> there are "typescript programmers"?
15:18 < sinclair|net> brainproxy: as such, as nice as your project is, i really want all that expressed as AST
15:18 < sinclair|net> niggler: there are about 3 of us
15:18 < niggler> the nomenclature is strange
15:19 < niggler> i find "coffeescript programmer" similarly strange
15:19 < brainproxy> sinclair|net: why typescript
15:19 < sinclair|net> niggler: i suppose it makes me a JS programmer, by proxy
15:19 < creationix> I thought typescript had await
15:19 < sinclair|net> creationix: i i wish :(
15:20 < sinclair|net> creationix: there are people begging for it, but we only just got generics
15:20 < brainproxy> sinclair|net: after I finish out the basic monads and "do" stuff, next step is to build reactive api as a layer on top
15:20 < niggler> so when do we get coffeetypescript?
15:20 < niggler> or livecoffeetypescript
15:20 < brainproxy> finish out something I never could quite finish out a couple of years ago
15:20 < brainproxy> i'm also hoping to provide delimited continuations
15:20 < sinclair|net> brainproxy: i really should go read the TS forums to see the current state of async / await in TS
15:20 < creationix> icedcoffeetypescript
15:21 < niggler> I'm waiting for perl5script
15:21 < creationix> sinclair:net, I assume you saw http://typescript.codeplex.com/workitem/38 ?
15:21 < megablue> is there any nice driver for mysql? i looked at npmjs there are tons of mysql driver i donno which one to pick..
15:21 < brainproxy> sinclair|net: which part of the control flow is killing you?
15:21 < brainproxy> is mutable state biting you in the butt?
15:21 < creationix> megablue, I think felix's driver is still the best
15:21 < niggler> megablue: mscdex wrote one
15:21 < sinclair|net> creationix: yeah, that is quite old
15:21 <@isaacbw> megablue: you can start by culling out the ones that haven't been updated in two years
15:21 < brainproxy> or are you just trying to join operations per "await"
15:22 < sinclair|net> brainproxy: yes, mutable state is a problem
15:22 < brainproxy> sinclair|net: why not use mori?
15:22 < bnoordhuis> creationix: someone posted to the mailing list with a new node-mysql2 module that apparently trounces node-mysql
15:22 < brainproxy> i mean, maybe look at it, might solve some of your problems in that respect
15:22 < brainproxy> can't help you with await-like issues though
15:22 < sinclair|net> brainproxy: its not as big a problem as it could be, as i try to keep state immutable, 
15:22  * creationix hasn't actually used a database since he worked on PHP
15:22 < bnoordhuis> creationix: i asked the guy how come and he said that node-mysql has room for more optimizations still
15:23 < niggler> bnoordhuis: do you know if there's anyway to get a list of modules based on certain criteria (updated in last year, not updated in more than a year, missing repo, missing license)?
15:23 < sinclair|net> brainproxy: immunatable when in transit 
15:23 < megablue> thanks guys... saved me a lot of time trying to look for a good  one.
15:23 < bnoordhuis> niggler: you mean on npm? no (as in: i don't know)
15:23 < jgornick> Hey guys, anyone here use node-archiver? For some reason when I create the zip and open it from the file system it extracts correctly. However, when I download it through expressjs using the response.download() method, the file downloads, but seems to be corrupt. Any ideas?
15:23 < creationix> too bad I never was able to finish nStore
15:25 < megablue> nStore? i think i used it before
15:25 < creationix> some people use it
15:26 < creationix> but it's not what I had hoped it would become
15:26 < megablue> i think i ended up using json file though haha
15:28 < creationix> bnoordhuis, you've probably used this before, what do you think about using LEB128 encoded numbers as length headers in binary protocols?
15:28 < bnoordhuis> creationix: you mean length-encoded numbers?
15:29 < creationix> http://en.wikipedia.org/wiki/LEB128
15:29 < bnoordhuis> right, we're talking about the same thing :)
15:29 < bnoordhuis> sure, use that when it makes sense
15:29 < creationix> I'm using it to frame msgpack messages
15:30 < creationix> technically I don't need it, I could just parse the msgpack if I implemented a streaming parser
15:30 < creationix> at c9 we used 32bit fixed-length headers and indutny added some checksum
15:32 < bnoordhuis> creationix: it all depends on your data. if you want maximum compression and you expect that most numbers will be much smaller than 2^32 (or conversely, often much bigger)
15:32 < bnoordhuis> then run-length encoding makes sense
15:32 < creationix> fair enough
15:32 < megablue> i am trying to run a transaction based db along with my node app, is there any simpler alternative other than mysql?
15:32 < creationix> I just worry that I tend to compress too much
15:32 < creationix> I had never thought to add the checksum at c9
15:33 < niggler> btw creationix if you are working on cloud9, note that the link to nodemanual.org is dead: http://isup.me/nodemanual.org
15:33 < creationix> niggler, sorry I don't work there any more
15:33 < creationix> not sure what happened to the websites
15:33 < creationix> I miss nodebits.org, it was a really pretty blog
15:33 < creationix> much nicer than howtonode
15:35 < creationix> megablue, maybe leveldb?
15:35 < creationix> it's in-process like sqlite, but more powerful
15:35 < creationix> and k/v instead of sql
15:36 -!- mode/#Node.js [+o TooTallNate] by ChanServ
15:36 < megablue> creationix, okay... i will look into that... 
15:37 < creationix> I think leveldown/levelup is the best module there for now
15:37 < creationix> but I could be out of data
15:37 < creationix> *out of date
15:40 < megablue> creationix, leveldb isn't transaction based
15:40 < creationix> megablue, no, but is has all the primitives to add it
15:41 < creationix> you can implement transactions in your app
15:41 < creationix> that's how chrome implements indexdb
15:53 < brianng> say i hv 8 cores
15:53 < brianng> can i run more than 8 node.js processes?
15:54 < megablue> i think it is less hassle for me to just find a working mysql driver lol
15:54 < grep_awesome> brianng: you can. you can run as many as you want. but I'm not sure why you would
15:54 < brianng> im running node-steam
15:55 < brianng> then how will the processes be split among cores
15:55 < jBryan> hi, how can I run node on port 80 alongside with apache?
15:55 < bnoordhuis> brianng: depends on your os
15:56 < grep_awesome> brianng: now that I can't answer you. I'd imagine round robin style. So if you had 9 processes. Core1: 2, Core2: 1, etc
15:56 < grep_awesome> jBryan: If you are stuck on apache look at mod_proxy, otherwise look at nginx, which has better reverse proxy integration
15:56 < brianng> its ubuntu bnoordhuis
15:56 < jBryan> but some says that mod_proxy is bad for websocket
15:56 < Fuzzyma> hey, iam using express. Does anyone know how to get the current action which is executed from the script (e.g. show, edit, destroy)?
15:58 < jBryan> grep_awesome: how can use mod_proxy for websocket because I use socket.io
15:58 < jBryan> how can I*
15:59 < grep_awesome> jBryan: I'm not sure I can help you there. Sorry.
16:00 < AAA_awright> https://github.com/Acubed/magnode I'll just... leave this... here
16:00 < brianng> anyone farmiliar with forever monitor?
16:01 < brianng> say i want to pass options to child process like https://github.com/nodejitsu/forever-monitor/blob/master/examples/multiple-processes.js
16:01 < brianng> how would these children pick that up
16:13 < Fishrock123> Anyone want to critique my first npm published module? https://github.com/fishrock123/cli-status :D
16:14 < Fuzzyma> Fishrock123: cant open it
16:14 < Fuzzyma> ah, sry - now it works
16:20 < jgornick> How do you "close" a readable stream?
16:33 <@MI6> joyent/node: Trevor Norris v0.10 * 2cad7a6 : buffer: throw when writing beyond buffer - http://git.io/a_DZQw
16:51 < spion> isn't there a rather straightforward solution for the problem with global require.extensions? e.g. require('./someModule', {extensions: { '.coffee': compilerFn}}); which allows for someModule.coffee for that call and enables the specified extensions object for someModule.coffee and all other inner modules.
16:52 < spion> Adding the argument for inner modules extends the object by replacing any previously registered extensions and adding new ones.
16:52 < zmbnum> does JS have anything close to Perl's range operator when it comes to strings? For example: "aaa" .. "zzz" yields "aaa" "aab" "aac" ... "aaz" "aba" "abb" ... "zzx" "zzy" "zzz"
16:52 < spion> this way every (inner) module always has the compiler it needs.
16:53 < Havvy> zmbnum: No.
16:53 < Havvy> You could write a function that makes ranges though.
16:54 < zmbnum> Havvy: too bad.
16:55 < alfonsodev> @Havvy maybe using coffescript
16:55 < alfonsodev> ?
16:56 < Havvy> Dunno. Probably not.
16:56 < spion> i guess that would only work well for dependency trees but not graphs
16:58 < spion> or perhaps require.extensions can be made module-local and every module could have the first parent's require.extensions as a prototype
16:59 < spion> that may even be backward-compatible
17:15 < zmbnum> is https://npmjs.org super slow for anyone else?
17:15 < zmbnum> takes like 10 seconds to load a page
17:16 < booyaa> its talking long but im on 3G
17:16 < zmbnum> strange
17:16 < foofoobar> zmbnum: about 8secs here
17:17 < stephank> I have no idea what a webinar is, but it appears to be some kinda of online conferencing thing?
17:17 < foofoobar> stephank: right
17:17 < zmbnum> yeah, it's like a seminar
17:17 < zmbnum> but on the internet
17:18 < booyaa> with ponies
17:18 < stephank> Ah, I guess I've never really used the term seminar. Would've made more sense if I knew. :)
17:18 < zmbnum> yeah, they're pretty neat because you can attend them with no pants on
17:19 < grep_awesome> booyaa: ponies are not nearly as majestic when you deal with them everyday and they poop
17:19 < booyaa> hahah fair enough
17:19 < booyaa> hey but I'd take that poop and feed my vegetables
17:20 < stephank> I'm a bit reluctant to sign up for it. Adding a public livestream, perhaps on Youtube, would lower the barrier tremendously, I think.
17:20 < grep_awesome> it does make some great compost
17:20 < zmbnum> stephank: which webinar are you talking about?
17:20 < stephank> nodestack
17:20 < zmbnum> cool, I wasn't even aware
17:20 < stephank> me neither :)
17:21 < stephank> but they're all atweet about it :)
17:29 < reskp> hi guys
17:29 < euskode> Hey guys, when faced with a "FATAL ERROR: JS Allocation failed - process out of memory" issue, how can I force node to spit out a stack trace? I am using the memwatch library too but the leak event never seems to be fired, so all I've really got is that error and all my own logging around this for content, which thus far hasn't proven very helpful...
17:30 < reskp> i installed node locally , work fine.
17:30 < reskp> i installed node on my server, but KO
17:30 < reskp> seems not find node module isntalled locally
17:30 < reskp> any idea ???
17:33 <@isaacbw> euskode: are you doing anything memory intensive?
17:35 < euskode> Not really, I mean it's a perfectly stateless API that handles some socket.io endpoints along with other HTTP ones, but nothing too major I wouldn't say and I have been quite meticulous to ensure everything is properly GC-ed, this was introduced recently and I have poked around quite a bit, so at this point I am hoping that a stack trace will shed some light into the real cause... I have read on SO that this was indeed possible but 
17:52 < Zaxnyd> is there any way to gain the ability in sublime text to jump to function declarations?
17:52 < Zaxnyd> or is there a better IDE that'll accomplish that?
17:55 < hashset> Zaxnyd: cmd+p ?
17:56 < Zaxnyd> that jumps to files, from what I can tell
17:56 < Zaxnyd> I don't see function declarations there
17:56 < Zaxnyd> plus I'd like it to be context-aware
17:56 < Zaxnyd> so if I require a module that has a method 'foo', I want to be able to jump right to that declaration
17:57 < Zaxnyd> rather than all 'foo' declarations
17:57 < stagas> Zaxnyd: doesn't st3 have that?
17:57 < rtgibbons> Zaxnyd - http://www.sublimetext.com/forum/viewtopic.php?f=2&t=4098
17:57 < Zaxnyd> (because I have so many)
17:57 < rtgibbons> Is that what you are wanting ?
17:57 < Zaxnyd> looking like it
17:57 < Zaxnyd> yeah
17:57 < rtgibbons> the cmd+r will list all functions in a file
17:57 < Zaxnyd> that's also incredibly helpful :)
17:58 < Zaxnyd> but that's just the current file
17:58 < hashset> the way I jump to functions Zaxnyd in ST2 is cmd+p to open the file and then cmd-r to show jumps to the function implementation
17:58 < Zaxnyd> gotcha.  that's not bad.   but if you have multiple files/functions with similar names, requires a bit more thought
17:59 < rtgibbons> cmd+p then type : to go to line number
17:59 < rtgibbons> and cmd+p then type @ to got to symbole (same as cmd+r)
17:59 < Zaxnyd> cmd+g goes to line
18:00 < Zaxnyd> shortcut for cmd+p + ':'
18:00 < Zaxnyd> good stuff though, thanks :D
18:00 < Zaxnyd> is sublime text the editor of choice for node, generally?
18:00 < Zaxnyd> and is anyone using st3?
18:00 < Zaxnyd> should I move over?
18:01 < hashset> the dev's on node projects use a highly customized vim setup or st2
18:01 < hashset> that I work with at least
18:01 < mscdex> notepad++!
18:01 < Zaxnyd> I'm no VIM user, so st2 works :)
18:01 < Zaxnyd> I'm liking st2 over notepad++, personally
18:02 < tuhoojabotti> yeah
18:02 < tuhoojabotti> but it's expencive
18:03 <@isaacbw> less than a textbook
18:03 < mscdex> that's not saying much lol
18:03 < tuhoojabotti> isaacbw: Not in Finland. 
18:04 < Zaxnyd> lol
18:04 < Zaxnyd> sublime text is expensive?
18:04 < mscdex> especially compared to free
18:04 < Zaxnyd> haha
18:04 < Zaxnyd> well
18:04 < Zaxnyd> either get your company to pay for it
18:05 < Zaxnyd> or uh... acquire it by other means...
18:05 < Havvy> Zaxnyd: You mean download it?
18:05 < Havvy> From their main site.
18:05 < Havvy> Or a repo.
18:05 < mscdex> that's nice if you have an employer that is not yourself ;-)
18:05 < Zaxnyd> there's that :)
18:05 < Havvy> The nagging screen isn't /that/ much of an annoyance.
18:05 < Zaxnyd> I disagree
18:06 < Zaxnyd> but I suppose to each their own
18:06 < mscdex> "Sublime Text 2 may be downloaded and evaluated for free, however a license must be purchased for continued use. There is currently no enforced time limit for the evaluation."
18:06 < mscdex> *must*
18:06 <@isaacbw> write it off as a business expense!
18:07 < Zaxnyd> must be purchased for continued use... but you can trial it forever!
18:07 < mscdex> not forever
18:07 < nathan7> dude
18:07 <@isaacbw> honesty is a virtue
18:07 < Zaxnyd> no enforced time limit = forever
18:07 < Techie-Micheal> Is it really a trial if you continue to use it? No.
18:07 < nathan7> You can fucking pirate it anyway.
18:07 < Techie-Micheal> Language.
18:07 < nathan7> The author accepts reality.
18:08 <@isaacbw> are there kiddies here?
18:08 < Zaxnyd> exactly.
18:08 < Zaxnyd> to both.
18:08 < SomeoneWeird> guys
18:09 < nathan7> isaacbw: Depends. How do you define 'kiddies'?
18:09 < SomeoneWeird> if you mean by <18, then yes, there is
18:09 < SomeoneWeird> :)
18:09 <@isaacbw> someone who can't handle adult language
18:09 <@isaacbw> "adult"
18:09 <@isaacbw> fuck
18:10  * nathan7 high-fives SomeoneWeird 
18:10 <@isaacbw> emacs 4 lyfe
18:10 < Zaxnyd> lol
18:10 <@isaacbw> I think by thirteen or so you should have full access to the english language
18:10 < Techie-Micheal> I don't like swearing. Suck it up and deal with it.
18:10 < Havvy> I find that the majority of swearing is immature.
18:11 < Havvy> Leave it to the fictional characters. ;)
18:11 < dypsilon> standup comedians tend to use it very effectively
18:11 < Havvy> dypsilon: That they do.
18:12 < SomeoneWeird> Techie-Micheal, then you shouldn't be on irc :)
18:12 < Zaxnyd> um, if you're the one with a problem with it, shouldn't it be you who "sucks it up and deals with it"?
18:12 < Techie-Micheal> Sure I should, but that doesn't mean that it is okay to use French in the English (not english, this isn't pool) language. ;)
18:13 < Zaxnyd> I think people will use language however they feel most effectively communicates their point, which sometimes includes cursing for emphasis
18:14 < Zaxnyd> also, this is the fucking internet.
18:14 < Zaxnyd> =P
18:14 < nathan7> the internet is SRS BSNS™
18:14 < Zaxnyd> inrotie
18:14 < Zaxnyd> inorite
18:15 < Techie-Micheal> So on the topic of node.js, does anybody know of a good SSH library?
18:15 < Havvy> Zaxnyd: See, you used it to a useful effect. The one on pirating it just failed flat on its face.
18:16 < Zaxnyd> that wasn't me :)
18:16 < Zaxnyd> but point taken
18:17 < Havvy> If your curse word actually adds something to the post, most people won't care.
18:17 < Zaxnyd> if it doesn't, you silently judge them and move on.
18:18 < Zaxnyd> giving it attention is probably what they're after anyway
18:19 < mscdex> Techie-Micheal: 'ssh2'
18:19 < mscdex> Techie-Micheal: if you mean client
18:19 < Techie-Micheal> Thanks, I'll check that one out. :)
18:19 < Techie-Micheal> Yeah, client.
18:19 < zmbnum> In JS, is this the correct way to capture the result of a user-supplied callback when working with a 3rd-party API? https://gist.github.com/anonymous/29693a7db25e210789f0
18:19 -!- mode/#Node.js [+o sblom] by ChanServ
18:20 < alptraumhavok> Hate to jump in and start asking questions but I have been having a rather unsolvable issue with a node server I have authored.  I am using the TLS module and have several thousands of PC agents connecting to it.  I trac all of the connections but have notice that the actual connection count reported by node is more than twice that of the counted agents.  On socket errors I am calling Socket.destroy but fear that this is not
18:22 < megablue> perhaps, the number include connections that aren't properly closed? 
18:23 < alptraumhavok> outside of destroy I see no other way to close the socket
18:39 < Zaxnyd> this is handy for Sublime Text: http://wbond.net/sublime_packages/package_control
18:40 < Zaxnyd> A full-featured package manager that helps discovering, installing, updating and removing packages for Sublime Text 2. It features an automatic upgrader and supports GitHub, BitBucket and a full channel/repository system.
18:40 < hashset> literally the first thing any sublime user needs to do in install package control
18:40 < hashset> *is
18:41 < Zaxnyd> I did not know this :)
18:41 < Zaxnyd> here I was installing things manually like a boob
18:43 < Zaxnyd> any must-have packages?
18:43 < Zaxnyd> for node?
18:44 < stagas> Zaxnyd: DocBlockr
18:44 < Zaxnyd> oh hell yes. 
18:45 < dypsilon> jshint
18:45 < dypsilon> sidebarenhancement
18:46 < dypsilon> i mean SublimeLinter
18:46 < Zaxnyd> nice :)
18:48 < Zaxnyd> oh man this one's good https://github.com/jfromaniello/sublime-node-require
18:53 < DarkArgon> installed
18:53 < hashset> Zaxnyd: here is a decent blog about getting yourself setup
18:53 < hashset> http://drewbarontini.com/setup/sublime-text/
18:54 < Zaxnyd> nice
18:54 < Zaxnyd> ty
18:55 < werle> juliangruber: have you thought about using component?
18:56 < juliangruber> werle: I'm using it from time to time
18:56 < juliangruber> werle: it's a tough call which to choose
18:56 < juliangruber> werle: browserify has all those crazy modules and is just node.js like
18:56 < juliangruber> werle: but component has better browser specific modules
18:57 < werle> juliangruber: maybe combine the two?
18:57 < werle> juliangruber: create a build and wrap it with component or something
18:58 < juliangruber> werle: I think people have tried this, but can't remember who
19:00 < werle> juliangruber: I ended up doing it with level-model when using level-js, but wasn't something I published
19:00 < werle> juliangruber: it can work, but it is an extra step =/
19:01 < dve> requests made via node.js to my API running on same network are taking around 5 seconds to complete. The same request made via the browser is instant. Any suggestions as to why? 
19:02 < juliangruber> werle: yeah, using both is a pain in the ass
19:02 < juliangruber> werle: browserify's .browser field helps a lot
19:02 < juliangruber> still, a major PITA
19:02 < werle> juliangruber: yeah that sure is true!
19:03 < juliangruber> werle: his that drawing in the level-model readme by you?
19:03 < juliangruber> s/his/is
19:03 < werle> juliangruber: it isn't, but I really liked it
19:04 < juliangruber> yeah it's great
19:04 < nathan7> juliangruber: I was considering browserifying application code
19:04 < juliangruber> werle: i'd move the usage things higher up in the readme, too much installation/wiring up stuff at the beginning
19:04 < nathan7> juliangruber: and componentising the DOM binding
19:04 < werle> juliangruber: thanks, will do
19:05 < juliangruber> nathan7: that's interesting!
19:06 < werle> juliangruber: just updated, I'm working on level-collection now and going to do a write up on it. I want all of these things to work in the browser and node
19:07 < werle> juliangruber: there needs to be more levelers our there
19:07 < juliangruber> werle: levelers arise!
19:07 < juliangruber> :D
19:07 < werle> +1
19:07 < werle> :-D
19:18 < lesshaste> hi
19:18 < juliangruber> lesshaste: hey there
19:19 < lesshaste> I want to write a realtime interactive drawing package. I was thinking of using raphael.js + web sockets (these are new to me)
19:19 < lesshaste> but I saw a similar-ish project also used node.js
19:20 < lesshaste> could someone explani to this beginner what the advantage might be?
19:20 < juliangruber> lesshaste: the advantage of using node.js?
19:20 < lesshaste> yes
19:20 < lesshaste> for this task
19:20 < juliangruber> lesshaste: nodejs <3 websockets <3 nodejs
19:20 < juliangruber> that's super easy to do
19:21 < lesshaste> <3 means much smaller than?
19:21 < juliangruber> <3 means "hearts"
19:21 < juliangruber> loves
19:21 < lesshaste> oh :)
19:21 < lesshaste> I like super easy :)
19:21 < lesshaste> why is it super easy?
19:21 < juliangruber> + you have a canvas implemented in node.js
19:21 < juliangruber> so you could save drawings to images, all on the server
19:21 < juliangruber> + you have data replication libraries
19:21 < lesshaste> do you get all the basic drawing primitives?
19:22 < lesshaste> this demo is rather nice http://www.williammalone.com/articles/create-html5-canvas-javascript-drawing-app/#demo-complete 
19:22 < lesshaste> but I don't want to reimplement the wheel
19:22 < juliangruber> depending on how complicated your drawing tools need to be you can just use the canvas itself, no raphael
19:22 < lesshaste> juliangruber, cool.. how do I find what the canvas support drawing primitive-wise
19:23 < juliangruber> lesshaste: https://developer.mozilla.org/en-US/docs/Web/HTML/Canvas/Tutorial?redirectlocale=en-US&redirectslug=HTML%2FCanvas%2FTutorial
19:24 < lesshaste> looks pretty cool
19:24 < lesshaste> http://www.byrichardpowell.co.uk/post/23958785278/fun-with-nodejs-socketio-paperjs has an annoyingly broken link to the improved version
19:25 < lesshaste> and I had never head of paper.js
19:25 < lesshaste> heard
19:25 < lesshaste> juliangruber, but to be clear.. you say that node.js + websockets will be the easiest way to make something that works
19:25 < lesshaste> ?
19:26 < juliangruber> lesshaste: yes
19:26 < lesshaste> great! :)
19:26 < lesshaste> I wonder who few lines it can be done in :)
19:27 < lesshaste> oh I forgot to get the answer.. what would be the advantage of node.js over raphael here?
19:27 < juliangruber> lesshaste: you can't compare node.js to raphael
19:27 < lesshaste> ah ok.. sorry I am getting there slowly..
19:27 < juliangruber> lesshaste: raphael is a drawing lib (i think) for the browser
19:27 < juliangruber> lesshaste: nodejs runs on the server
19:27 < juliangruber> lesshaste: no worries :)
19:27 < lesshaste> so is there an even simpler solutuon with no node.js?
19:28 < lesshaste> just html5 + websockets?
19:28 < nathan7> Well, you need some kind of server
19:28 < lesshaste> (I realise I don't know what I am talking about.. I will get there :) )
19:29 < lesshaste> I really don't know what node.js is for it turns out. Does it replace apache?
19:29 < AAA_awright> Canvas isn't HTML5 >_<
19:30 < lesshaste> "Node.js contains a built-in HTTP server library, making it possible to run a web server without the use of external software, such as Apache or Lighttpd, and allowing more control of how the web server works. "
19:30 < lesshaste> managed to answer one of my own questions :)
19:30 < nathan7> Yes, you can use it to serve files
19:30 < nathan7> It's a JavaScript platform for I/O-heavy applications
19:30 < lesshaste> AAA_awright, http://www.williammalone.com/articles/create-html5-canvas-javascript-drawing-app/#demo-complete refers to it as "HTML5 canvas"
19:30 < nathan7> which is mostly network applications
19:31 < lesshaste> nathan7, ok.. so maybe overkill for just a few people drawing?
19:31 < AAA_awright> lesshaste: That's what I'm referring to, it's not
19:31 < lesshaste> nathan7, or no just I/O heavy?
19:31 < lesshaste> or not
19:31 <@isaacbw> AAA_awright: was it formalized before html5?
19:31 < AAA_awright> isaacbw: Canvas is an ECMAScript API and it far predates HTML5
19:32 < AAA_awright> Like, 2005
19:32 < nathan7> lesshaste: It's the ideal tool, really
19:32 < lesshaste> nathan7, great! :)
19:32 < lesshaste> I have been trying to find a way not to do it in java
19:32 < nathan7> lesshaste: You have something with a lot of people connecting and most of them doing rather little
19:32 < lesshaste> but as you can see.. I am new to javascript
19:33 < nathan7> lesshaste: Most other things are a pile of fail when it comes to that
19:33 < AAA_awright> Eh, it appears to be described in the HTML spec
19:33 < AAA_awright> Still, 2005
19:33 < lesshaste> nathan7, when it comes to what?
19:34 < lesshaste> I have no idea at all what libaries are available so you don't have to recode obvious things
19:34 < lesshaste> is there a good place to start looknig?
19:35 < nathan7> lesshaste: You have a lot of connections but most of them are doing rather little
19:35 < lesshaste> ok
19:36 < nathan7> That's okay if you don't spawn a thread for every one of them
19:36 < lesshaste> so to be clear.. I would write the app in HTML5 + javascript with websockets
19:36 < lesshaste> and then serve it with node.js
19:37 < lesshaste> but I could also serve it with apache
19:37 < lesshaste> is that right?
19:41 < r1card> I'm reading about the http module, and message.headers looks like a map. What about multiple instances of the same header (like set-cookie)?
19:45 < lesshaste> in any case
19:45 < lesshaste> thanks all
19:48 < r1card> Annnnnnyone?
19:49 < AAA_awright> r1card: Did you try sending it multiple headers?
19:49 < AAA_awright> I think it's an Array
19:49 < AAA_awright> Or, it's , seperated
19:49 < AAA_awright> Since those are the same things in HTTP
19:49 < r1card> AAA_awright, I thought the same, but then I read the "Expires" property on cookies don't conform and contain a comma
19:49 < r1card> AAA_awright, specs, who cares, right? :(
19:49 < AAA_awright> It's legal to collapse "Accept: text/html\nAccept: application/xhtml+xml" into simply "Accept: text/html, application/xhtml+xml"
19:50 < AAA_awright> uh
19:50 < AAA_awright> Cookies especially are often collapsed
19:51 < AAA_awright> r1card: Is it in a quoted string?
19:51 < r1card> AAA_awright, Set-Cookie: name2=value2; Expires=Wed, 09 Jun 2021 10:18:14 GMT
19:51 < AAA_awright> That's Set-Cookie
19:51 < AAA_awright> You don't get that in a request Cookie header
19:52 < AAA_awright> So confusing, I know
19:52 < r1card> I didn't say a request though.
19:52 < r1card> I just said http.message
19:52 < r1card> message.headers is an object of strings
19:52 < AAA_awright> Oh I see, you did say Set-Cookie
19:52 < AAA_awright> r1card: Use an Array
19:53 < r1card> I think I'll have to dig in the code.
19:53 < r1card> And see what it does.
19:53 < AAA_awright> Does an array not work?
19:53 < r1card> AAA_awright, it might but a string sometimes being an array hits me as a poor interface
19:53 < AAA_awright> A string... being an array?
19:54 < AAA_awright> r1card: setHeader('Set-Cookie', ['Value1', 'Value2'])
19:57 < r1card> AAA_awright, I'll do some reading, thank you for your help :)
19:59 < samholmes> substack: where do I find the docs on bouncy for SNI?
19:59 < r1card> AAA_awright, sorry for the stupid question but where should I look for the http module sources *blush*
19:59 < samholmes> for using SNI*
20:00 < substack> samholmes: what is SNI
20:02 < samholmes> substack: http://nodejs.org/api/tls.html#tls_npn_and_sni
20:02 < samholmes> substack: It's an extension to SSL protocol apparently.
20:02 < samholmes> I'm having some issues with it on my server.
20:02 < samholmes> I'm using bouncy as my proxy and I'm serving multiple SSL certificates, one for each domain.
20:03 < substack> samholmes: https://github.com/substack/bouncy/pull/40
20:08 < samholmes> substack: okay. Do you know much about SNI?
20:10 <@Nexxy> samholmes, deoxxa might know a little about SNI
20:11  * samholmes pray that deoxxa is...nope here's not here.
20:11 <@Nexxy> he's australian
20:11 <@Nexxy> give him a few hours
20:11 < substack> samholmes: I don't know anything about it
20:11 <@Nexxy> it's like 6am there
20:11 <@Nexxy> substack, \o/
20:12 < julianduque> substack: do you have a tutorial or info on how to write the math functions for baudio?
20:12 < r1card> Ok so I'm kinda new to Node.JS.
20:12 <@Nexxy> so is everyone else
20:12 < r1card> I can't find where the http module is
20:12 <@Nexxy> it's included
20:13 < r1card> Yes, I'm trying to find it, the file.
20:13 < r1card> I want to read the source.
20:13 < r1card> :)
20:13 <@Nexxy> https://github.com/joyent/node/tree/master/lib
20:13 < r1card> Nexxy, thank you :)
20:13 <@Nexxy> yw :)
20:17 < booyaa> don't use notepad++ even with the js handlier it's an ugly way to write js.
20:18 < samholmes> substack, Nexxy: I'll wait. However, do any of you know how to set up an alternative to SNI?
20:18 < booyaa> use vim. notepad++'s great for text wrangling, but not for writing code. yes i've tried to write node.js. would use winvim next time
20:20 <@Nexxy> samholmes, afaik that's the only way to do cert 'multiplexing' on ssl if that's what you're after
20:21 < samholmes> Nexxy: multiplexing is a cool word. It means having multiple certs for a single IP but one for each domain?
20:21 < samholmes> right?
20:21 <@Nexxy> right
20:21 <@Nexxy> which is why I imagine you want SNI
20:22 <@Nexxy> samholmes, you could also just get a single wildcard cert
20:23 <@Nexxy> and tunnel everything through https, parsing the headers on the other side?
20:32 < samholmes> Nexxy: A wildcard cert will only work for subdomains.
20:33 < samholmes> Nexxy: I don't know exactly what you mean by tunneling everything through https and checking the headers?
20:34 < mscdex> i think providing a tl;dr with large posts should be proper netiquette
20:38 <@Nexxy> samholmes, yeah
20:38 < Industrial> evnin
20:39 < segomos> bonerpad++
20:39 <@Nexxy> really?
20:40 < segomos> yup
20:52 < gkatsev> can I change package.json properties via the npm command besides `npm init`?
20:52 < gkatsev> (also when not installing other npm modules)
20:53 < tmpvar> gkatsev: yes
20:53 < gkatsev> how?
20:53 < breck7> npm version
20:53 < breck7> https://npmjs.org/doc/version.html
20:54 < breck7> not sure about other properties
20:55 < breck7> gkatsev: what other properties would you like to change via a command?
20:55 < gkatsev> like engines or scripts
20:56 < s5fs> samholmes: I don't know what you're after, but have you looked at SAN certs? I'm not overly familiar with SNI.
20:56 < julianduque> it's registry.npmjs.org being slow or it's only me?
20:57 < breck7> julianduque: slow for me too
20:58 < gkatsev> yeah, seems slow
20:59 < julianduque> breck7, gkatsev: thanks, so confirmed
21:00 < breck7> julianduque: in general i've found it variable. there's probably some monitoring somewhere on the web that reports response times.
21:00 < samholmes> s5fs: not much. All I know is that they're expensive.
21:01 < gkatsev> hm... yeah, doesn't seem like I can have npm edit the engines or scripts property for me. oh well
21:02 < s5fs> samholmes: a SAN allows you to host multiple domains on a single cert. Like www.mypants.com, www.pantsoutlet.net, etc. Yes, they can be expensive, but that's true with many other types of certs.
21:02 < samholmes> when I have the capitol
21:02 < samholmes> capital?
21:02 < s5fs> samholmes: I've used SAN certs when transitioning away from a domain name (branding change, that sort of thing) and also with ms exchange servers
21:03 < breck7> gkatsev: you could use Space (https://github.com/nudgepad/space), which can be quite easy to edit via command line, and then have it turn a package.space file into a package.json file
21:04 < gkatsev> breck7: nah, that's too much. Hopefully, I wont be needing to edit my package.json file too much more other than dependency management.
21:05 <@Nexxy> gkatsev, PR~!
21:05 < gkatsev> Nexxy: heh, if I had the time I would
21:10 < gkatsev> does the engines property limit where you can install your module or where you can run your module?
21:11 < mscdex> install
21:12 < gkatsev> hm... well, when I install my local package in a nvm-ed node of the wrong version, it seems to still try and install it
21:14 < draginx> Does anyone know what http://underscorejs.org/ they use for their documentation? Ive seen other sites use it.. and not the annoted source (thats docco) I mean the actual website itself
21:15 < gkatsev> draginx: https://github.com/documentcloud/underscore/tree/gh-pages
21:16 < draginx> Still doesnt make much sense tbh
21:16 < draginx> thats just the docco is it not? :/
21:16 < gkatsev> no, that's the actual site
21:16 < draginx> https://github.com/documentcloud/underscore/blob/gh-pages/index.html
21:16 < gkatsev> or at least the gh-pages version of it
21:16 < draginx> so they hand code it? :p
21:18 < gkatsev> hm
21:18 < draginx> I mean it's definitely possible, but that just seems weird :/
21:18 < gkatsev> draginx: I would ask in #documentcloud
21:18 < draginx> thanks
21:18 < gkatsev> draginx: also, yeah, seems hand-written...
21:19 < draginx> oiy
21:19 < gkatsev> https://github.com/documentcloud/underscore/commits/master/index.html
21:20 < gkatsev> new underscore website: https://github.com/documentcloud/underscore/commit/2d5db78c8663875689fd69dbe40fde8f99b56767
21:24 < Charitha> Hi..I stared using phatomjs for writing automation tests...Currently my tests run one after another..Is there some way to run these tests parallely?
21:24 < astropriate> why can I not copy a mongoose subdocument?
21:25 < astropriate> i have an array property of my document that is a reference to another collection's object.  but when i loop over it and copy the objects/documents inside the array
21:25 < cyril_> hi, please sorry if this question has already been asked/answered
21:25 < astropriate> all i get are {_type: bsonobject, _id: dfdskfsdkfsdlfs}
21:26 < cyril_> but why is npm install very slow today ?
21:26 < astropriate> cyril_, because it hates you
21:26 < cyril_> hummm cool
21:26 < cyril_> thanks
21:26 < astropriate> anytime
21:26 < gkatsev> npm is being slow for some reason
21:27 < cyril_> humm I see
21:27 < breck7> Charitha: could you divide your tests into separate scripts and launch multiple phantomjs processes to run each one?
21:27 < cyril_> more clear now
21:27 < gkatsev> idk why
21:28 < gkatsev> it's making my package.json config changes testing painfully slow
21:28 < Charitha> @breck7.. you mean launch phantomjs for each of this script ?
21:28 < breck7> Charitha: yes
21:29 < Charitha> @breck7..ok thanks..will try that
21:31 < runvnc> is npmjs.org slow right now or is it just my internet
21:31 < gkatsev> it's slow
21:32 < gkatsev> you're the 3rd in the past half hour :P
21:32 < gkatsev> ugh, package.json's engines isn't doing it's thing :(
21:36 < runvnc> it was really fast when I tried it just now
21:42 < gkatsev> looks like it was fixed
21:50 <@isaacbw> http://blog.mailchimp.com/ewww-you-use-php/
21:52 < gkatsev> any idea why `engines: {"node": ">=0.10.4"}` in package.json won't complain when  I try to install module on node 0.8.14?
21:53 <@Nexxy> gkatsev, try engineStrict ?
21:53 <@Nexxy> "engineStrict" : true
21:54 < gkatsev> hm... that didn't seem to help
21:55 < gkatsev> basically, what I'm trying to do is when someone tries to do `npm install` on the module it'll fail on node version that don't work. it seemed that `engines` is what I'm supposed to do but it doesn't seem to work for me currently.
21:57 < breck7> gkatsev: is your package published?
21:57 < gkatsev> no
21:57 < breck7> i could try installing it
21:57 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:58 < gkatsev> hm... might be because we're using nvm.
21:59 < gkatsev> though, `engineStrict` is required. Let me try it again.
22:00 < draginx> whats the best way to parse comments (for JS files)? is pegjs overkill for this?
22:01 < gkatsev> why not esprima?
22:01 < nathan7> gkatsev: engine is purposefully warning-only
22:01 < gkatsev> nathan7: but engineStrict is supposed to make it strict. It doesn't.
22:01 < gkatsev> I dont see a warning either way, though
22:03 < leJones> Hey guys! Have been trying to resolve this for days now :/ I can't install anything through npm install on windows7 and 8.
22:03 < leJones> Have been trying to compile the sources through vcbuild.bat and that worked- but where do I find npm then?
22:04 <@isaacbw> leJones: https://github.com/isaacs/npm
22:04 <@isaacbw> lol @ Installing on Cygwin
22:05 < leJones> huh. I think I have seen that page before :) I'll give it a shot. Thx.
22:05 < gkatsev> cygwin isn't officially supported anymore.
22:05 < leJones> @isaac: I read on the github page that installing through cygwin isn't supported anymore.
22:05 < gkatsev> you can just install via the .exe on the site
22:05 < gkatsev> it'll install both node and npm
22:05 < leJones> I know but I'm having trouble there
22:05 < sethn> How do I access JSDocs from within the node.js repl?
22:06 < sethn> Like, say, I want to explore the q module
22:06 < leJones> let me just try the github link real quick- brb. Thanks :)))))
22:06 < gkatsev> leJones: as in the installer is failing for you?
22:06 < nathan7> Ruby and Python both interest me, but I hate their non-C style syntax. I want curly braces dammit, not BV-style “end” statements or whitespace to delimit methods. PHP could use a lot of work, but the style is just more logical.
22:06 < nathan7> ..whoops
22:06 < gkatsev> leJones: why are you trying to install it on cygwin anyway?
22:06 < nathan7> accidentalpaste.
22:06 < bubo> nathan7: i'm the opposite
22:06 < sethn> In python I'd use help(q), or in clojure I might use (doc q)
22:06 < bubo> i hate the curly braces
22:07 < gkatsev> sethn: um... I dont think such functionality exists.
22:07 < gkatsev> at least, I haven't heard about it
22:07 < sethn> Ah, crazy!
22:07 < leJones> gkatsev: Well it installs alright. But even using the installed "node.js command prompt" as admin doesn't work
22:07 < sethn> Thanks gkatsev, this explains why I can't find it ;-)
22:08 < gkatsev> sethn: :)
22:08 < gkatsev> sethn: you can use npm to read man/docs for modules
22:08 < gkatsev> if they have them set up correctly
22:08 < leJones> gkatsev: Haven't even been trying ;) I'm trying to get it running using the standard installer/source code
22:09 < gkatsev> leJones: I've been able to just install it and run. You just need to use cmd rather than cygwin to run node/npm
22:09 < sethn> gkatsev: Yeah, it seems to often take me to the github page, which is not quite what I was looking for *grin*
22:09 < gkatsev> sethn: yeah, if they have it set up correctly, it can show the docs in the terminal right there.
22:09 < gkatsev> otherwise, it'll take you to the github
22:09 < sethn> gkatsev: /*nod*/
22:10 < sethn> Hmmmm... accessing inline JSDoc seems like a project waiting to happen :-)
22:10 < gkatsev> sethn: do it. In fact, also have it use `npm doc` or w/e it is so it can acess it via npm
22:10 < gkatsev> npm is also a node module
22:10 < leJones> gkatsev: as I said- I'm not using cygwin although I have it installed :)
22:11 < gkatsev> leJones: ah, ok. Is it giving you any errors when you try the exe?
22:11 < gkatsev> er, msi
22:11 < brycebaril> sethn I think `replpad` adds that, you could try installing that
22:12 < leJones> yeah. That's why I'm so confused. I just installed it through the msi and then I use "Node.js command prompt" from the start menu
22:12 < gkatsev> brycebaril: replpad might be helpful, but it isn't for man pages
22:12 < gkatsev> leJones: open up `cmd` instead
22:13 < leJones> alright. I'll give it a shot!
22:13 < gkatsev> and then from there try `node`
22:13 < gkatsev> or `npm`
22:14 < leJones> just did that. Let me try and find what seems to be the first error
22:15 < leJones> npm ERR! Error: EBUSY, unlink 'C:\Users\Jonas\Dropbox\dev\BlueLighting_nw\node_m
22:15 < leJones> odules\midi'
22:15 < leJones> I get the same error for npm install sqlite
22:16 < GreatPotato> I just did the following: http://pastebin.com/6kjWxUgu
22:16 < GreatPotato> Using "lessc" gives the following:
22:16 < GreatPotato> lessc: command not found
22:16 < GreatPotato> What gives?
22:17 < gkatsev> did you want to install -g it?
22:17 < leJones> http://pastebin.com/CqLBKKxL
22:17 < GreatPotato> Whats the difference? Sorry this is my first time using node
22:18 < gkatsev> GreatPotato: -g installes it globally
22:18 < GreatPotato> As opposed to?
22:18 < gkatsev> locally
22:19 < GreatPotato> So if its locally, how would i use it?
22:19 < gkatsev> i.e., if it is a binary, like lessc, it should probably be installed globally
22:19 < GreatPotato> Should i remove it first?
22:19 < GreatPotato> And then reinstall globally?
22:20 < gkatsev> you don't *need* you uninstall it locally, but you might as well
22:20 < leJones> alright so I just tried npm -g install sqlite and it gave me "The command 'node-waf' could not be found"
22:20 < GreatPotato> Ok, think i know what I'm doing here...
22:20 < GreatPotato> Aha!
22:20 < GreatPotato> Awsome
22:21 < GreatPotato> Cheers gkatsev 
22:21 < gkatsev> GreatPotato: cool
22:22 < GreatPotato> Just came across this: https://npmjs.org/package/less-watch
22:22 < GreatPotato> How would i use this?
22:22 < GreatPotato> Would this compile less automatically?
22:25 < nathan7> leJones: node-waf was removed long ago
22:26 < leJones> nathan7: huh...it's just so weird cause as I said- I just installed everything using the msi. I just read on so that I could try to install nodejs-dev since that contains node-waf
22:27 < leJones> doesn't work either....trying next SO thread...
22:30 < nathan7> leJones: we moved to gyp
22:31 < leJones> nathan7: Just reading the issue on github :) I'll try and find out if the sqlite module already converted. That might be the cause of the problem.
22:32 < gkatsev> leJones: what version of node are you installing?
22:33 < leJones> gkatsev: v.0.10.7
22:34 < leJones> gkatsev: just noticed though that it says on the sqlite npm's github page to use node-waf configure build to build the module from source. So I'm guessing they haven't switched to gyp yet
22:34 < GreatPotato> Does anyone know of a way to get lessc to watch a specific file and compile on change?
22:35 < leJones> I'll try and install a new package that hopefully has switched over to gyp.
22:37 < gkatsev> leJones: install the msi from the website
22:38 < leJones> gkatsev: That's always been my source :)
22:38 < gkatsev> hm...
22:41 < leJones> here's my error log.
22:41 < leJones> http://pastebin.com/hWQPyDBN
22:43 < leJones> I'm gonna start from scratch in a vm! Hopefully I can get it to work there!
22:43 < nathan7> leJones: gyp has been out for ages
22:44 < nathan7> leJones: there's the sqlite3 module, iirc
22:47 < leJones> nathan7: Thx. Also erros -.- Stupid windows.... trying a clean vm now!
22:48 < nathan7> leJones: Or give Nodejitsu a try (;
22:48 < leJones> TIL npm.org belongs to "National Association of Pastoral Musicians" ^^
22:49 < nathan7> leJones: That's NPM, not npm q=
22:49 < leJones> :D
22:51 < runvnc> does this sound like a dumb idea: what if npm had an option --cached that would look in a local folder for a cached copy of a package before hitting npmjs.org.. and then the cache could just expire every day
22:52 < mdel> npm does this
22:53 < runvnc> oh.. I thought when it said 304 not modified that meant it was checking to make sure each package hadnt been modified
22:53 < substack> mdel: it still round-trips to figure out if there's a new version
22:53 < substack> which fails offline
22:53 < mdel> i see now what you mean
22:54 < runvnc> If the .cache.json file is younger than the specified timeout, then they do not make an HTTP request to the registry.
22:54 < runvnc> https://npmjs.org/doc/cache.html
22:55 < leJones> I need Python2.x for npm right? not 3.x?
22:55 < runvnc> why does it always say 304 if its looking at that
22:55 < runvnc> oh it is only for some commands not all
22:55 < runvnc> Commands that make non-essential registry requests (such as search and view, or the completion scripts) generally specify a minimum timeout. If the .cache.json file is younger than the specified timeout, then they do not make an HTTP request to the registry.
22:55 < runvnc> it would be nice if you could turn that on for install too
23:02 < Zaxnyd> how would I retrieve the name value for a route like "/users?name=fred" with express?
23:03 < Sxw1212> http://nodejs.org/api/url.html
23:03 < Sxw1212> use url.parse(
23:03 < Zaxnyd> I meant more from the request-handling side
23:04 < Zaxnyd> app.get('/posts', function(req, res){  })
23:04 < Zaxnyd> I don't see it in the req object anywhere
23:05 < brycebaril> req.query.name ?
23:05 < Bubo> ^
23:05 < Zaxnyd> there it is :)
23:05 < Zaxnyd> thank you so much.
23:06 < Zaxnyd> that request object is huge so it's hard to see it.
23:06 < brycebaril> :)
23:06 < Zaxnyd> that's what she said?
23:12 < leJones> GUYS :))))) I got it! So turns out that Mr. npm doesn't like Miss Python 3.3. so THAT was the real problem. Uninstalled both Python versions and installed Python 2.7 and now it's working!
23:13 < leJones> Thank you so very much for your time and effort! I shall be back for chatting and trying to be of help myself soon :)
23:30 < tms8707056> anybody know why Apache would return 403 error only when accessing via http module?
23:36 < evanmoran> For about a week my team was using go web templating. Glad to be back using node =).
23:37 < chilts> :)
23:38 < Fishrock123> Anyone want to critique my first module? :p https://github.com/Fishrock123/cli-status
23:40 < Havvy> Fishrock123: You can make `npm test` run `node test.js`.
23:40 < Fishrock123> Oh?
23:40 <@MI6> joyent/node: isaacs master * 896b2aa : util: Add debuglog, deprecate console lookalikes - http://git.io/SojPHA
23:41 < Fishrock123> But that would require a global install, no?
23:41 < Havvy> No.
23:42 < Havvy> {scripts: {test: 'node test.js'}, ...}
23:42 < Havvy> Err, with proper quotes.
23:42 < Fishrock123> Nvm, found it in the docs.
23:42 < Havvy> {"scripts" : {"test": "node test.js"}, ...}
23:42 <@MI6> joyent/node: Timothy J Fontaine v0.10 * a846d93 : net: use timers._unrefActive for internal timeouts (+1 more commits) - http://git.io/OEOcFg
23:46 < d4rklit3> hello
23:46 < Fishrock123> Havvy: Got that working, thanks. Anything else?
23:46 < d4rklit3> i need express to function like php modrewrites do when anything that is not static and not defined in a route will automatically go to the index file
23:46 < d4rklit3> so if its /{route}  ->index.html
23:46 < d4rklit3> also if its /{route}/{route}/{route}
23:48 < d4rklit3> I can't seem to be able to do with with express 3. and nobody has ever been able to point me in the right direction. Im asking again because this time i really need this to be dynamic. I don't want to have to set up each apps pushstate routes on the node server. the idea behind my project is so that it assumes this unless routes are defined otherwise
23:51 < d4rklit3> this is f*cking retarded if i do /* it assumes that static files don't exist
23:52 < Havvy> d4rklit3: Make your static routes first.
23:52 < d4rklit3> well
23:52 < d4rklit3> i ahve this
23:52 < Havvy> Err, assign them first.
23:52 < d4rklit3> app.use(express.static(path.join(path.normalize(__dirname+"/../"), data.deploy)))
23:52 < d4rklit3> because there are static files
23:52 < d4rklit3> that i may want to change at any time
23:52 < d4rklit3> if i do /* it assumes there are no static files
23:53 < luhx> hi
23:53 < luhx> does someone has already implemented nodejs + knockoutjs + passportjs?!
23:55 < luhx> I`m getting this error message in passportjs Error: no strategy registered under name: local
23:56 < luhx> could someone help me?
23:56 < DarkArgon> did you var LocalStrategy = require('passport-local').Strategy; ?
23:58 < d4rklit3> ok i dunno, maybe i dont understand something, i thought in php where yo ucan define modrewrite to read any amount of slashes in the uri and just default to the file you specify. i thought this is a good thing
23:58 < d4rklit3> i can't understand why thats impossible with express
23:58 < Havvy> If you have nginx, you can do the mod_rewrite there.
23:58 < d4rklit3> "define your static routes first" sure .. but what I don't want to define them
23:59 < d4rklit3> i guess i have to write something that checks if that file exists on the file system
--- Log closed Wed May 22 00:00:44 2013
