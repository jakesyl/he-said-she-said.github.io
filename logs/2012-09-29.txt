--- Log opened Sat Sep 29 00:00:38 2012
00:28 < astropirate> Anyone looking for a freelance develoepr? PM me :)
00:29 < jelscript> can you develop node.js?
00:29 <@Nexxy> and then #Node.js was a job board!
00:33 < syskk> hey, what is the best way to watch a directory recursively for changes on .js files and restart my node app when a change is detected?
00:33 < syskk> I found https://github.com/remy/nodemon , but not sure if its the state of the art
00:34 < benDos> Can I fork a node process in the unix sense of fork?
00:34 < benDos> child_process.fork doesn't seem to actually be what i want
00:35 < EhevuTov> syskk, I use nodemon for developing with
00:35 < EhevuTov> I found it just fine
00:36 < syskk> ok
00:36 < EhevuTov> been using it for over a year actually
00:36 < syskk> I read in the github issues that it doesn't check changes recursively is that right?
00:38 < benDos> Or actually can I escape(streams)?
00:38 < EhevuTov> syskk, i'm not sure what you mean, but let's say I have files in a subdir called views/something.jade. If I modify that file, it will restart my ./app.js
00:38 < syskk> ok cool
00:38 < EhevuTov> benDos, what are you trying to do?
00:38 < EhevuTov> I wouldn't fork for each stream or something
00:39 < benDos> EhevuTov, I'm doing some plugins for a program and I want true unix forking for my plugins
00:39 < benDos> But that's not a huge deal
00:39 < benDos> However being able to escape and unescape streams would be mega helpful right now
00:39 < EhevuTov> benDos, hrm, not sure then
00:45 < syskk> what's the syntax to launch a process with an env variable set to something?
00:45 < syskk> let's say I want to launch my node app with NODE_ENV = development
00:50 <@Nexxy> NODE_ENV="development" node app
00:50 <@Nexxy> or whatever your entry js file is
00:51 < AAA_awright> syskk: That's the basic bash, sh syntax at least
00:51 < syskk> ok thanks
00:59 < derek__> thl0, what was that how-to you linked for the dog blog earlier?
00:59 < derek__> can't find the link
01:00 < BronzeByte> I need a syntax parser in nodejs, please query/PM me (paying)
01:11 < BronzeByte> did anyone send anything? i lost connection after i said it
01:11 < a_meteor> nope
01:12 < benDos> BronzeByte, check pm's
01:12 < AAA_awright> <BronzeByte> I need a syntax parser in nodejs, please query/PM me (paying) ?
01:41 < samholmes> I changed bouncy's route.json file and added a "m.domain.com": 8001 field, but m.domain.com returns a not found.
01:42  * warz waits for node.js to compile on my raspberry pi
01:44 < timeturner> doesn't it compile in the rasberry pi already?
01:44 < timeturner> raspberry*
01:51 < warz> it does. i'm simply waiting for it to finish compiling. heh.
02:01 <@Nexxy> lol I can't imagine waiting for rpi to compile
02:08 < warz> its not the fastest thing in the world
02:48 < syskk> is there an express.js chan?
02:49 < deoxxa> syskk: #express
02:49 < syskk> oops, thanks
03:08 < syskk> let's say I have a my main code in /src and some modules in /lib
03:08 < syskk> i put all my local libs in my main package.json depency list
03:08 < syskk> the problem is everytime i modify a lib, i always need to run npm install
03:08 < syskk> is there any way around that?
03:08 <@Nexxy> npm link?
03:09 <@Nexxy> https://npmjs.org/doc/link.html
03:10 < deoxxa> damn it, i keep putting "var" before variables in shell scripts
03:10  * deoxxa shakes fist at javascript
03:12 < samholmes> I changed bouncy's route.json file and added a "m.domain.com": 8001 field, but m.domain.com returns a not found.
03:14 < syskk> Nexxy, ok. there's no way to specify that in the package.json?
03:15 < syskk> maybe i could add it as a script
03:15 < syskk> so when i share the code with other devs they wont have trouble
03:16 <@Nexxy> you should be making libs their own modules
03:16 <@Nexxy> then you don't have that problem :)
03:18 < syskk> right but it's too much overhead at the moment
03:18 < syskk> eventually
03:19 <@Nexxy> 1 dir + 1 package.json = overhead? ;P
03:20 <@Nexxy> seems like a script to do a bunch of npm linking would be more overhead than `npm install`
03:25 < syskk> what do you mean?
03:27 < syskk> the problem i have is im simultaneously working on a bunch of helper libs which have their own package.json and my main code which is an express web app
03:27 < syskk> i cant afford to constantly npm install whenever i modify the libraries
03:29 < deoxxa> i agree - npm install costs $5 per turn
03:29 < deoxxa> really need to lower the price there
03:31 < syskk> damn inflation
03:32 < syskk> but seriously its not really that i cant afford but the problem is i might edit a library and be stuck for hours before i realize i forgot to run npm install
03:40 < samholmes> substack: why would bouncy not be letting me register a new route?
03:41 < samholmes> in the routes.json
03:48 <@Nexxy> syskk, that's why I recommended npm link
03:49 < syskk> right
03:49 < syskk> but then you said "seems like a script to do a bunch of npm linking would be more overhead than `npm install`"
03:49 <@Nexxy> syskk, but really that would require you to make them into proper modules
03:49 < syskk> the script i meant was
03:50 < syskk> "postinstall": "npm link ./lib/express-resource"
03:50 < syskk> it kind of sucks npm link requires root though :(
03:50 <@Nexxy> well it's a global symlink
03:53 < mscdex> is express-resource even maintained anymore?
03:57 < syskk> doesnt seem so
03:57 < syskk> so i wrote my own and used the same name :/
03:58 < syskk> only 20 lines of code or so
03:59 < mscdex> yeah i ended up just writing separate "modules" for groups of routes and passing the app in
04:15 < AAA_awright> These Vows errors are getting annoying
04:15 < AAA_awright>       TypeError: Object TypeError: Cannot read property 'aliasmap' of undefined has no method 'some' 
04:15 < AAA_awright> ... What is that even SAYING?
04:20 < mscdex> it's an error about an Error object
04:21 < mscdex> TypeError: Object <errObjToStringed> has no method 'some'
04:23 < Nuck> Ugh, I'm still trying to find a good templatin engine.  Any pointers for something simple like moustache or handlebars, but with inherits/includes?
04:23 <@Nexxy> EJS
04:23 <@Nexxy> deal with it.
04:23 < Nuck> Ugh nothx
04:23 <@Nexxy> why cuz it defaults to <% %> ?
04:23 <@Nexxy> make it whatever
04:23 < Nuck> I love handlebars but the lack of inherits/includes
04:24 < Nuck> Nexxy: I want something where I'm not embedding JS into the templates
04:24 <@Nexxy> lol then make it {{ }} or w/e handlebars uses
04:24 < Nuck> If I wanted that, I'd use PHP
04:24 <@Nexxy> you don't have to
04:24 < AAA_awright> Jade
04:24 <@Nexxy> here's a thought
04:24 < Nuck> Jade isn't simple, it's a full new representation of the DOM
04:24 <@Nexxy> stop templating and start DOM binding
04:24 <@Nexxy> be one of the cool kids
04:25 < Nuck> DOM binding is cool and all but it's really less effective than Handlebars IMO.
04:25 < AAA_awright> Node.js is single-threaded so don't worry, it must scale!
04:25 < Nuck> It's a beautiful idea, but it's not very expressive
04:25 <@Nexxy> you're glib
04:26 < Nuck> I'm debating just writing my own template engine based on Handlebars, if I can't find a better solution
04:27 <@Nexxy> given that you've just shot down every other possible option
04:27 <@Nexxy> sounds like that's what you're doing
04:27 < Nuck> Well, I found one engine that looked really promising, Ginger
04:28 < Nuck> But it doesn't have very good documentation and I haven't found a way to replace some of my functionality I built for Handlebars
04:31 < Nuck> oooh I think I see a way
04:31 < AAA_awright> Why do you need includes?
04:32 < owen1> +1 for ejs
04:32 < Nuck> AAA_awright: I'm building a fucking enormous website
04:32 < Nuck> It's necessary for my sanity.
04:32 < AAA_awright> Right, but that doesn't change anything much... Any place you need includes, you should just replace with your own function or variable
04:33 < Nuck> ... Not always the best option, AAA_awright 
04:33 < Nuck> In fact, that's a terrible API design
04:33 < Nuck> I'm gonna try moving my stuff over to Ginger, wish me luck
04:34 < AAA_awright> But... templates don't have a public API?
04:38 <@Nexxy> save your breath
04:40 < Nuck> AAA_awright: Public or private, API design still matters
04:41 <@Nexxy> screw time to market, API design matters.
04:41 < Nuck> As long as people will have to interact with something, especially if they'll be doing it a LOT like with a template engine, the API design matters
04:41 < Nuck> Nexxy: Time to market is important too, yes.
04:41 <@Nexxy> O rly
04:41 < Nuck> But there's this thing
04:42 < Nuck> It's called "balance"
04:42 <@Nexxy> uh huh
04:42 < Nuck> :P
04:42 <@Nexxy> I want to make a woka meme for you right now
04:42 <@Nexxy> wonka*
04:42 < Nuck> You need to balance time to market against time to iterate once you're at market
04:42 < AAA_awright> Oh, that brilliant API design is going to get you to market a month sooner?
04:42 < AAA_awright> >_>
04:42 < Nuck> AAA_awright: I never said it would.
04:42 < AAA_awright> I'm trying to think of a Condesending Wonka
04:43 < Nuck> It'll help you iterate once you get to market, at the expense of a little later to market
04:43 < Nuck> A good templating engine that doesn't get in your way could save you hours of hacking around a bad templating engine
04:43 < AAA_awright> But still, I've tried using ejs's include or require or whatever it is... It just substitutes the target file into the template!
04:44 < Nuck> AAA_awright: Which is a pretty gnarly way of doing things
04:44 < AAA_awright> I'd just pass a function that evaluates a specific template with the given variables
04:44 < AAA_awright> If you have common re-usable components, like buttons
04:44 < AAA_awright> Sidebar, or whatnot
04:44 < Nuck> AAA_awright: I can do that for Handlebars easily, but that still leaves me without the inherits system
04:44 < Nuck> Which is honestly more important to me (I think I said it backwards earlier)
04:44 < AAA_awright> What are you looking for in inherits?
04:45 < Nuck> I need to have my page "chrome" on every page.  I always did this traditionally with Express 2's layouts
04:45 < Nuck> But Express 2's headed to EOL, so I need to prepare for a move to Express 3, which means picking a templating engine which provides equivalent functionality
04:46 < Nuck> And I think Ginger may be The One™.
04:47 < Nuck> I'm gonna move my current stuff over to get a feel for it, and probably wrap it to clean up the API a bit.  Well, once I finish this big refactor
04:50 < Nuck> ... What the fuck
04:50 < AAA_awright> So, what I have is I just pass some meta-data when I have a rendered item
04:50 < Nuck> Why does my npmgh command not work on connect-redis
04:50 < AAA_awright> "This is text/plain" or "This is application/xhtml+xml which needs the page chrome added"
04:50 < Nuck> Wait... What the fuck, this lacks a git repo?
04:51 < TehShrike> I'm just wondering why you have the trademark symbol anywhere near your keyboard output
04:51 < AAA_awright> And then the parent handles that accordingly, and spits out a plain-text document or a full page with menu items and whatnot
04:51 < Nuck> TehShrike: Mac, Alt+2 = ™
04:51 < TehShrike> Fair enough, who am I to blame >_<
04:52 < Nuck> Isn't git like the ONE field that's in every package.json file ever?
04:52 < TehShrike> I've seen a few packages in npm that didn't point at github
04:53 < TehShrike> I didn't know how to find their documentation :-P
04:55 < Nuck> TehShrike: I have a command in my shell which automatically opens their github in my browser
04:55 < Nuck> So when it fails to work, it annoys me greatly
04:56 < TehShrike> I just don't know where to go
04:56 < Nuck> I google their module name
04:56 < Nuck> Like now, I found it
04:56 < Nuck> Just a pain in the ass
04:56 < TehShrike> Either you have a github with a readme.md or I see if there's something more accessible
04:57 < Nuck> This thing had a github, luckily
04:57 < Nuck> Drives me nuts when modules point to other sites like bitbucket (with their terrible user interface)
05:05 < niggler> is there a way in node express to rate-limit queries
05:27 < Nuck> Is there any way in NPM to find outdated deps in your package.json so you can check for breaking issues and update?
05:27 < TehShrike> niggler: what, incoming HTTP requests?
05:28 < niggler> yeah TehShrike i want to limit to say 1000 queries per hour per ip address
05:31 < ljharb> Nuck: `npm update`?
05:33 < niggler> nuck fode
05:34 < ljharb> niggler: if you want that restriction, you either have to do it yourself or put something in front of node to do it fore you
05:35 < niggler> the latter seems desirable -- what is te best tool for that?
05:35 < ljharb> no idea
05:35 < ljharb> a load balancer of some kind probably
05:35 < ljharb> do you actually expect 1000 queries per hour from anyone?
05:36 < Nuck> niggler: Nginx.
05:36 < Nuck> Nginx all the things.
05:36 < niggler> yeah it involves math and i dont want someone hammering it
05:36 < niggler> i figured you'd say nginx
05:36 < ljharb> niggler: yes, but is anyone *likely* to hammer it
05:37 < ljharb> who cares if they do hammer it? it'll go down, and you can block that IP, and then look into something else
05:37 < niggler> strictly speaking, no, but i hate to depend on likelihood
05:37 < ljharb> it seems sillier to depend on something that's unlikely, than on something that's likely.
05:37 < ljharb> get your app launched. problems you don't need to solve yet are a waste of your time imo.
05:37 < niggler> fair enough
05:41 < Nuck> ljharb: The only place that's unwise thinking is in security
05:42 < Nuck> When you ought to always think that your database will br compromised
05:42 < ljharb> true
05:42 < ljharb> but, in that case, you make sure you're using off the shelf things, and not rolling your own anything
05:42 < Nuck> To some extent, sure
05:43 < Nuck> Like, I roll my own account system, but I don't roll my own hashing
05:43 < ljharb> right
05:43 < Nuck> bcrypt FTW.
05:43 <@Nexxy> oh the irony
05:44 < Nuck> Nexxy: Huh?
05:45 < Nuck> Shit I forgot what res.local does... fun
05:53 < samholmes> bouncy is pissing me off.
05:54 < Nuck> samholmes: Why?
05:54 < samholmes> Nuck: Because I added "m.mydomain.com": 8001 in the routes.json file, but it wont route when I go to this domain. -.-
05:55 < samholmes> mydomain.com:8001 works, but not m.mydomain.com.
05:55 < samholmes> gives me a not found message
05:55 < samholmes> The stupid "Oops! Not found" google chrome message
05:55 < Nuck> samholmes: Ah, yeah.  I don't use routes.json
05:55 < samholmes> fucking google.
05:55 < samholmes> Nuck: you just built a script?
05:56 < Nuck> Basically.  I just split domain on dot, then reverse the array
05:56 < Nuck> Then I work backwards in nested switches
05:56 < Nuck> so com > mydomain > m
05:56 < samholmes> sooooo...wtf?
05:56 < Nuck> And then I just route(8001) in each one
05:57 < samholmes> you mean bounce(8001)?
05:57 < Nuck> Yeah that
05:57 < Nuck> I haven't touched my bouncer in a good many months, it's been running nonstop for a looooooong time
05:58 < samholmes> I'm only doing it now for a mobile version.
06:01 < AAA_awright> samholmes: nginx.
06:01 < AAA_awright> samholmes: Also, I wouldn't have different URLs for mobile/desktop versions, that defeats the purpose of a URL
06:02 < chovy> has anyone used mongoose-acl?
06:02 < samholmes> AAA_awright: m.mydomain.com is a common convention.
06:03 < Raynos> o/
06:03 < samholmes> Raynos: Hey, what's happenin'? :)
06:04 < Raynos> Nothing much
06:04 < Raynos> just progress
06:04 < samholmes> cool cool
06:04 < samholmes> Same here. XD
06:05 < Raynos> no activity on gh for 2 months!
06:05 < Raynos> That's not progress
06:06 < samholmes> Heh. Relatively speaking. ;P
06:08 < samholmes> Nuck: Why not just make a nested json object and parse that instead of nested switches? { "": defaultport, "com":{ "domain": { "": defaultportforthisdomain, "mobile": mobileport }, ...}, ... }
06:09 < Nuck> samholmes: It's actually still damn clean, but it saves the parsing step.
06:09 < samholmes> Nuck: what's it look like, if you don't mind?
06:09 < Nuck> samholmes: And AAA_awright is right that m.thing.com is a bad practice, it's going away.
06:10 < samholmes> Nuck: How else would you serve a mobile version of the app?
06:10 < Nuck> samholmes: I *would* pastebin it, but it appears my SA has screwed up the DNS server so I can't access
06:10 < Nuck> samholmes: You don't, you use media queries :D
06:10 < samholmes> Nuck: eh..that's mixing the two.
06:11 < Nuck> Some things I agree with a mobile-specific version on
06:11 < timeturner> should timestamps be saved as ISODate objects in the database or just a simple number timestamp?
06:11 < samholmes> Nuck: I want them separate so I can make it specific to the mobile platform.
06:12 < samholmes> timeturner: which database?
06:12 < Nuck> Web apps generally need a touch-specific version.  But websites are fine without
06:12 < timeturner> mongodb
06:12 < Nuck> timeturner: Most databases I recommend using the built in timestamp type if there is one, but otherwise just a UNIX timestamp is good
06:13 < Nuck> I think Mongo has a type for it, so I'd use that
06:13 < Nuck> (I don't know, I use Mongoose so I'm dealing in JS Date() objects)
06:13 < timeturner> mainly I'm confused because mongoose has a Date type and I have the default mongoose function as Date.now
06:13 < Nuck> timeturner: If you're using Mongoose, use a Date type
06:14 < Nuck> I believe it converts to Mongo's own Date format
06:14 < timeturner> ah
06:14 < timeturner> so it is storing the data from the raw timestamp
06:14 < timeturner> but showing it as an ISODate
06:14 < timeturner> awesome
06:15 < Nuck> Showing it as an ISODate?
06:15 < Nuck> As in, when you .toString the Date object?
06:15 < Nuck> (cause that's how Date objects work)
06:15 < timeturner> it looks like: ISODate("2012-09-27T17:18:51.055Z")
06:16 < timeturner> ..., ts : ISODate("2012-09-27T17:18:51.055Z"), ...
06:16 < Nuck> ahh yeah
06:16 < AAA_awright> samholmes: You should be detecting the platform and changing your style based on that, it's cheaper to maintain and easier to use
06:16 < timeturner> so that isn't using extra space as compared to the UNIX timestamp is it?
06:16 < AAA_awright> It's Bad when you're using two different URLs for the same resource
06:16 < Nuck> timeturner: Shouldn't be.  I think Mongo has its own internal representation for Dates in BSON
06:17 < AAA_awright> samholmes: Just because it's common convention doesn't mean it's good
06:17 < timeturner> awesome, thanks
06:18 < Nuck> AAA_awright: To be fair, for web apps it makes sense
06:18 < AAA_awright> But Web apps are Web :p
06:18 < Nuck> You can't really make your page "lighter weight" in CSS
06:18 < AAA_awright> Hence the name
06:18 < AAA_awright> If you think you can serve different actual resources for mobile vs. desktop, then sure
06:18 < samholmes> AAA_awright: But it's not only about stylesheets. I want an completely optimized front-end.
06:19 < Nuck> The stuff is still downloaded
06:19 < Nuck> And you have to deal with JS too, changing to touch events
06:19 < Nuck> It just makes more sense to maintain a fork
06:19 < AAA_awright> samholmes: It's not very optimized when other people link to your mobile website when on a desktop client and vice-versa
06:20 < samholmes> What's wrong with them linking to the mobile version?
06:20 < Nuck> If your thing is very JS-heavy, use a separate thing.  If it's pretty light on the JS, just use styles
06:20 < AAA_awright> I might be using a desktop client.
06:21 < Nuck> AAA_awright: That's really a non-issue, as Twitter has proved
06:21 < Nuck> m.twitter.com redirects to twitter.com for desktop, and vice versa for mobile
06:21 < Nuck> AAA_awright: Then you get redirected.  Problem?
06:21 < AAA_awright> I never get redirected to the mobile version, I get directed away from it when I specifically request it in fact
06:22 < Nuck> AAA_awright: Then I guess your phone is just retarded.
06:22 < Nuck> Try changing your User Agent
06:22 < AAA_awright> And I'm talking 200x300px device here, at least mobile phones these days have 720p screens and whatnot
06:22 < AAA_awright> I can't, it's a mobile device, 3DS and DS... and in any event, user-agent sniffing is evil
06:23 < Nuck> ... the 3DS?
06:23 < Nuck> Are you fucking kidding?
06:23 < Nuck> :|
06:23 < AAA_awright> You should be sniffing for features and media type
06:23 < Nuck> I'm just gonna stop because that's just absurd, AAA_awright .
06:23 < AAA_awright> samholmes: CSS has all these great selectors for if you're on a projected surface, screen, print media, mobile, select based on screen size, etc
06:23 < Nuck> AAA_awright: They sniff the UA so that they can redirect easily
06:23 < Nuck> AAA_awright: Stop being a picky lunatical bastard.
06:24 < AAA_awright> Nuck: That's perfectly reasonable
06:24 < AAA_awright> I have a user-agent, I want to use it to browse the Web
06:24 < AAA_awright> IS THAT TOO MUCH TO ASK
06:24 < Nuck> And it can
06:24 < Nuck> But the 3DS browser doesn't even have the right touch events for a mobile website
06:24 < Nuck> So it gets the desktop version
06:25 < Nuck> Also, AAA_awright, if you've never programmed heavily for mobile sites, shut up.  Because it's a lot harder than you seem to think it is.
06:25 < Nuck> Media queries make life "easier" sorta
06:25 < AAA_awright> I have and do, all my own sites respond to small screen size (it's "responsive")
06:25 < Nuck> They actually make life harder in large things which use JS
06:26 < Nuck> Media queries were meant for web SITES not web APPS.
06:26 < Nuck> They reflow DOCUMENTs not APPLICATIONS
06:27 < Nuck> So, honestly, if you're using a media query to adjust an application's display, you're misusing media queries.
06:27 < AAA_awright> That distinction isn't meaningful when you're talking about formatting HTML/DOM documents
06:27 < Nuck> Might as well make a <table> for your webpage again, and abuse all the things.
06:28 < Nuck> AAA_awright: Really now?  You're saying that as long as it's HTML it's a document and not an application?
06:28 < Nuck> Because they both have very different needs, you really can't act like they're the same
06:28 < AAA_awright> Those aren't mutually exclusive
06:28 < AAA_awright> "Application" is just hypertext plus logic, in REST terms
06:29 < Nuck> Sure, I've seen plenty of .doc.exe files
06:29 < Nuck> I call them viruses.
06:29 < Nuck> AAA_awright: Buzzword buzzword buzzword buzzword buzwords buzzword?
06:29 < AAA_awright> If said buzzword existed since 2001, sure
06:30 < Nuck> Seriously, hypertext is not exclusively a document
06:30 < Nuck> Either way, media queries suck for anything which is JS-heavy
06:30 < samholmes> I'd actually like to be able to visit the mobile version on my desktop to see how it was made with my dev tools.
06:30 < Nuck> And suggesting we use them for such applications is just as bad as laying out your page with a <table>
06:31 < samholmes> This whole UA detection is evil bit is pure idealism. Let's just get fucking real and use whatever technique we want to get the job done.
06:31 < Nuck> samholmes: Actually you can do that, check out Ripple
06:32 < AAA_awright> samholmes: Idealism?
06:32 < AAA_awright> It plain doesn't work. User Agent is advisory.
06:32 < Nuck> samholmes: Actually UA sniffing is a terrible thing, no matter what.  You should always feel bad for using it.  Not that you shouldn't use it, it is a perfectly fine tool.
06:32 < Nuck> It's just a tool you should avoid at all costs.
06:32 < Nuck> It does work, AAA_awright .
06:32 < Nuck> There's a reason it's still used heavily, and that's because it gets the job done, hence working
06:33 < AAA_awright> It plainly doesn't work for me
06:33 < AAA_awright> It works for the people who implement it, sure
06:33 < Nuck> AAA_awright: No, it works fine.  3DS is not a "mobile device" like Android or iOS is.
06:33 < AAA_awright> But you lose all meaning and semantics
06:33 < samholmes> AAA_awright: I'm not saying using media queries is idealism, I'm saying that the thought, "You should only use media queries, and it'll solve every problem, other means are evil" is.
06:33 < AAA_awright> Nuck: It's more of a mobile device than iOSs HD display is!
06:33 < Nuck> So stop bitching about the 3DS
06:34 < AAA_awright> iOS is more of a desktop than Ubuntu!
06:34 < Nuck> AAA_awright: Please stop spewing nonsense?
06:34 < AAA_awright> samholmes: I didn't say "only"
06:34 < Nuck> Seriously, you're just talking out of your ass to cover the fact that you're wrong at this point.  Just man up and accept you're wrong.
06:34 < AAA_awright> I said, User-agent sniffing is evil, and multiple URLs breaks semantics
06:34 < AAA_awright> They're bad and inferior solutions
06:35  * Nuck is quite experienced with talking out of his ass
06:36 < Nuck> AAA_awright: But for some goals which may not be the same as YOUR goals, they are superior
06:36 < Nuck> Not everybody has the same goals as you do
06:36 < ljharb> the 3ds browser?
06:36 < ljharb> talk about angling for .001 percent of .001 percent of web users
06:36 < AAA_awright> If your goal is to only support specified user-agents like Google Chrome, fine
06:36 < AAA_awright> But that's not what the Web is supposed to be
06:37 < AAA_awright> We were done with "Works best in IE 6" badges years ago
06:37 < Nuck> ljharb: Exactly.
06:37 < ljharb> so screw the 3ds.
06:37 < Nuck> AAA_awright: They target 99.99999999% of web browsers, and give a slightly degraded experience in the others.  Deal with it.  You're a sliver of a minority and nobody cares about you.
06:38 < Nuck> AAA_awright: This is closer to the "build to everybody except old IEs" thing, where we degrade our experience in old versions of IE
06:38 < ljharb> i'm confused, i came into the convo too late. who's trying to do UA sniffing, having multiple URLs, and caring the least bit about a nintendo 3ds?
06:38 < AAA_awright> I'm not talking about degraded experience
06:38 < Nuck> This is a degraded experience
06:38 < Nuck> You get the normal website
06:38 < Nuck> Whoop-dee-doo?
06:38 < AAA_awright> I'm talking about "Here's a web browser that supports everything you could use, and you won't support it"
06:38 < Nuck> Still usable
06:38 < Nuck> AAA_awright: It doesn't.
06:38 < Nuck> Flat out, it doesn't.
06:39 < ljharb> just always do progressive enhancement and feature detection, and you don't really have to care about anything specific
06:39 < Nuck> The 3DS browser is a pile of shit, it doesn't support all the touch events we get on other OSes, it doesn't even support multitouch on the HARDWARE
06:39 < Nuck> So don't go telling me it's just as capable
06:39 < Nuck> Oh! and it's a default horizontal aspect ratio, while most mobile phones are vertical
06:39 < ljharb> AAA_awright: if you have a 3ds, browsing the web is indeed too much to ask
06:39 < Nuck> So it's a VERY different interface that's needed on there
06:40 < AAA_awright> ljharb: That's what I'm arguing for!
06:40 < Nuck> AAA_awright: It's not like I'm recommending blocking the 3DS altogether from accessing the site
06:40 < Nuck> You get the *degraded experience* because you're using a fringe browser that nobody's gonna test on or support
06:40 < ljharb> AAA_awright: well that's silly. just because something has a web browser doesn't mean you get to see every page.
06:40 < Nuck> Just like the people using weird shit like Iceweasel
06:40 < samholmes> How about we just develop apps we know will work on x, y and z? Fuck the shitty ones, they could go die, they should go die, IE6 users suck my dick.
06:41 < ljharb> samholmes: thats a little harsh, but ie6 is basically gone, so it's not worth hating anymore.
06:41 < samholmes> ljharb: I will always hate that thing
06:41 < ljharb> it no longer exists.
06:41 < Nuck> I'm already past IE6
06:41 < Nuck> I hate on IE7 now
06:41 < AAA_awright> samholmes: That's exactly what I'm proposing! Except you're the one arguing "no, we should do user-agent detection"
06:41 < samholmes> I hate all IEs
06:41 < AAA_awright> Or not you, but
06:41 < AAA_awright> That's NOT the same thing
06:42 < Nuck> And I will continue to hate on IE7 until that's where IE6 is now.  and then I'll hate on IE8.
06:42 < AAA_awright> If devices don't want to support a feature, or mis-implement it, that's their own problem
06:42 < Nuck> And once I'm done hating on IE8, I'll stop hating on IE
06:42 < Nuck> Because IE9 isn't that bad, honestly
06:42 < ljharb> oh, IE 9 is crappy too
06:42 < Nuck> AAA_awright: They get degraded
06:42 < AAA_awright> But if you're going to *detect those particular user agents*, Be it IE7, or some other user-agent, and vary your website based on it, *that's* bad
06:42 < Nuck> ljharb: Absolutely, but it's "not bad" by IE standards
06:42 < Nuck> IE10, now THAT is looking solid
06:42 < ljharb> eh
06:43 < wereHamster> does v8 not implement items(), keys() or values() on Map/Set?
06:43 < samholmes> I think it's the browser vendors duty to make sure their shit works with existing apps. If it doesn't then they're users will suffer, and should think twice before buying crappy products. If I made a crappy web browser, and tricked a bunch of idiots to use it, does that mean that developers are now forced to support it and degrade their apps?
06:43 < Nuck> ljharb: They've caught up with CSS2.1 support in IE9, and they started with CSS3.  This is catching up to where Chrome and Firefox were about a year ago.  So they've managed to do like 6 years work in 2.
06:43 < AAA_awright> Yes, go fuck IE, you should *not* detect it just to support it... So why are you arguing the opposite, that you should detect user-agents and patch for them?
06:44 < Nuck> AAA_awright: It's not patching, it's providing a user experience tailor to that device size, using the UA as a rough inidicator of the device
06:44 < AAA_awright> It seems you understand that, but somehow when it comes to detecting mobile vs. desktop, THAT is exempt
06:44 < samholmes> AAA_awright: why would you detect IE? It seems alright to detect mobile, but IE, not so much.
06:44 < Nuck> So if it's a Safari Mobile device, we know that the site is a cell phone or tablet
06:44 < AAA_awright> EXACTLY MY PROBLEM
06:44 < AAA_awright> Detecting Desktop vs. mobile is NO DIFFERENT than detecting and fixing for IE
06:44 < ljharb> Nuck: who cares if its a cellphone or tablet?
06:44 < ljharb> Nuck: just detect touch support
06:45 < samholmes> Well, the app on mobile could be a COMPLETELY different product then the app on desktop...
06:45 < Nuck> ljharb: A tablet and a cell phone take very different user interfaces and have very different connection speeds
06:45 < AAA_awright> Touch support, multitouch support, multi-cursor (it exists), print, etc
06:45 < ljharb> Nuck: they really aren't that different, and sometimes my cellphone and tablet are faster than my laptop's internet.
06:46 < ljharb> Nuck: if something won't download over a slow cellphone, it's too slow for ANYTHING.
06:46 < ljharb> period.
06:46 < Nuck> AAA_awright: I said this before and I'll say it again: go write a huge web app using media queries and then come back and tell me this again.
06:46 < terinjokes> i think it's always better to detect support rather than detect browser
06:46 < ljharb> Nuck: "write a huge app" is your problem then.
06:46 < AAA_awright> Nuck: That's not something I can answer here, so you can't make that argument :>
06:46 < Nuck> Because I bet you'll give up halfway through.  It's a pain in the ass.
06:46 < Nuck> ljharb: Yes, but most of us have metered internet on cell phones
06:46 < Nuck> ljharb: The speed doesn't matter.  The data consumption does.
06:46 < Nuck> People don't use your service if it takes 5MB to load a single page.
06:46 < AAA_awright> Also, the "write a huge app"
06:47 < Nuck> Because with a 200MB/month plan, that's likely to eat up their usage fast
06:47 < ljharb> Nuck: so then instead of detecting a cellphone, just make your service small EVERYWHERE
06:47 < ljharb> write your entire app to be small. "desktop" isn't a license to build a bloated app
06:48 < Nuck> And 5MB may sound absurd but it's not all that far from reality.  Many web pages (even the Google mobile site) are over 1MB in size
06:48 < Nuck> Anyways I need to reboot, back in a few minutes
06:49 < samholmes> Answer this question. What if you're destop app is centered around the mouse and keyboard as input ENTIRELY--the interface is laid out differently, there are different UI element, etc--then on the mobile you don't want x UI elements, you don't want to be keyboard based...two completely different experiences, two completely different apps. How could you do this in one single app with one code base with all the feature det
06:49 < samholmes> ections and bla bla bla; more importantly, why would you want to do this?
06:49 < ljharb> samholmes: if theyre different apps, they should be on different URLs.
06:49 < ljharb> samholmes: you can detect feature support on the client, and redirect appropriately.
06:49 < samholmes> Sure, media queries for stylesheets and feature detection here and there for simple apps = a good solution for simple apps.
06:50 < ljharb> then stop making complex apps
06:50 < samholmes> ljharb: my point exactly. m.foobar.com vs foobar.com are different urls.
06:50 < ljharb> samholmes: but don't use useragent detection to send them there.
06:50 < ljharb> samholmes: and, 99.999% of the time, sites that have a www. and an m. don't really need both. in fact, most of the time, they should drop the desktop version entirely because the "mobile" version is so much smaller and more efficient.
06:51 < samholmes> ljharb: dumb response. Don't make two separate apps, try to do it all in one simple one. :\
06:51 < samholmes> w/e, I'm tired of this conversation really.
06:51 < ljharb> lol
06:51 < ljharb> just saying if you have a complex app, thats your problem, not input methods or user devices.
06:52 < wookiehangover> samholmes: api + dumb clients
06:52 < wookiehangover> that's how you do it
06:52 < wookiehangover> BOOM
06:52 < wookiehangover> ?cc
06:52 < samholmes> Look at facebook as an example. How could their desktop version with all of it's features be squished into a tiny moblie version without drastically changing the code base?
06:52 < ljharb> they've done it with their mobile apps
06:52 < ljharb> a
06:52 < ljharb> and the mobile version of facebook is *far* better than the cluttered desktop one.
06:53 < samholmes> that's bullshit.
06:53 < wookiehangover> api + dumb client
06:53 < terinjokes> largely speaking, the desktop very of facebook is simply laying out the result of API calls
06:53 < samholmes> I wouldn't use the mobile version on my desktop with it's larger screen, that's horseshit
06:53 < wookiehangover> is everyone taking crazy-pills?!?
06:53 < ljharb> samholmes: you only say that because you're used to the desktop version
06:53 < samholmes> terinjokes: you forget advertisements, which is huge part of their business model
06:54 < ljharb> which, surprise, don't work at all on mobile
06:54 < ljharb> or rather, very well.
06:54 < samholmes> advertisements?
06:54 < ljharb> facebook's advertisements.
06:54 < ljharb> so guess what? probably the wrong business model for them long term.
06:54 < samholmes> Meh. All I'm saying is, there's no harm in building two apps if you want to.
06:55 < samholmes> If you want them to be one app, that's fine too.
06:55 < ljharb> sure - but it masks the complexities you should be stripping away from one or both of your apps.
06:55 < samholmes> But, one's not inferior over the other just because it's less recent of a trend.
06:55 < ljharb> more importantly, making a small, progressively-enhanced app doesn't mean you can't have complex requirements or features.
06:58 < samholmes> In the future, no doubt it will be a more popular trend as the mobile platform UX overlaps the typical PC experience (look at windows 8 as an example), the trend is pointing towards these kinds of things, but there's no reason not to develop two apps. One benefit of developing two apps is that you can focus features for each one without worrying about breaking the other and testing it out.
06:58 < samholmes> There are pros and cons to both sides IMO
06:58 < samholmes> Anyway, bouncy is still being a bitch.
06:58 < terinjokes> so, on a related note: is anyone using git-subtree to manage dependencies over using npm?
06:58 < samholmes> Is there something else I must do in order for my subdomains to redirect properly using bouncy?
07:01 < Raynos> two apps?
07:01 < Raynos> https://github.com/Raynos/chain-stream#example
07:02 < Raynos> Someone shoot me before I write an underscore for streams >_>
07:05  * wookiehangover loads gun
07:05 < wookiehangover> 2 chains?
07:08 < Raynos> wookiehangover: what do you mean 2 chains?
07:13 < wookiehangover> that was a typo, I meant "2 chainz" http://www.youtube.com/watch?v=Y34jC4I1m70
07:13 < wookiehangover> nsfw
07:13 < wookiehangover> fwiw
07:13 < wookiehangover> but its saturday; leave the office if that's where you are
07:13 < Raynos> no!
08:05 < syskk> if i require the same module in 2 different files.. do they share the same object?
08:05 < syskk> same state
08:05 < startling> I'm having tons of trouble getting node to pick up my npm-installed libraries. Looks like "/usr/local/share/npm/lib" is where they go, but setting NODE_PATH to that doesn't help.
08:06 < startling> "/usr/local/share/npm/lib" has a "node_modules", which has "coffee-script", "stitch", etc subfolders
08:06 < startling> if my cwd is "/usr/local/share/npm/lib", it works, but not otherwise
08:07 < Nuck> syskk: Yes.
08:08 < Nuck> syskk: Due to caching, the answer is yes.  As long as it's in the same process, they share the same copy.
08:08 < syskk> ok thanks
08:10 < AAA_awright> syskk: That's not guarenteed though, so I wouldn't rely on it unless there's no other way, or rely on it only as a convienence, so long as you can still function without it
08:10 < Nuck> AAA_awright: What do you mean not guaranteed?
08:10 < Nuck> I've heard it guaranteed a number of times
08:10 < AAA_awright> You can make each require() file have a new context
08:10 < AAA_awright> er, each module file
08:11 < AAA_awright> That's Bad because it breaks instanceof and such, yes
08:11 < Nuck> AAA_awright: For module development sure
08:11 < Nuck> For application development it's fine to rely on
08:11 < Nuck> I rely on it extensively in my startup's codebase to prevent globals
08:13 < AAA_awright> Nuck: btw, do you use Git submodules much, or Git in general?
08:15 < questions> hello world
08:16 < startling> AAA_awright: I'd recommend against submodules
08:16 < AAA_awright> startling: I recommend submodules particularly
08:16 < AAA_awright> Why wouldn't submodules be a good idea?
08:16 < questions> im a little confused is this running on qweb ?
08:17 < startling> AAA_awright, they're easy to break
08:17 < AAA_awright> What do you mean break?
08:17 < startling> AAA_awright, they're easy to get into a state such that cloning the repo gives you a broken repo
08:18 < questions> hi anyone able to help a lost confused soul
08:18 < questions> and super tired
08:18 < AAA_awright> startling: Whatever reservations people have aside, Git submodules are the only appropriate way to declare your dependencies, because it's the only method in which you can declare exactly what commit you're using, without importing all the tree objects associated with it
08:19 < startling> AAA_awright, okay? they're still easy to break
08:19 < AAA_awright> I've also seen "git subtree" and I'm unimpressed, because it ditches all the commit history
08:19 < startling> AAA_awright: huh?
08:19 < startling> questions, what's your question?
08:19 < AAA_awright> startling: I've never had a problem with "breaking" submodules
08:19 < ljharb> submodules are fine, but npm means you don't need to use submodules, nor should you.
08:20 < AAA_awright> startling: There's also "git subtree" which is the idea you should import external dependencies by the tree id, instead of commit id
08:20 < AAA_awright> This loses all the commit history associated with your tree you're using
08:20 < ljharb> startling: `git submodule update` should "fix" your broken repo
08:20 < questions> well i was wondering what irc i should use server side but seems this is running on qweb also
08:20 < startling> ljharb, "should". :)
08:21 < startling> questions, sorry, what?
08:21 < AAA_awright> startling: Submodules will never ever lose any data on you, instances where you lose data (without some sort of --force flag) are considered serious bugs in Git
08:21 < questions> hi startling  
08:21 < ljharb> startling: should, because you said "broken" and i don't know what that means
08:21 < questions>  im jsut tryuing to find the best and safest irc for my site
08:21 < ljharb> irc?
08:21 < AAA_awright> So "broken" must mean something rather easy to fix
08:22 < questions> internet relay chat?
08:22 < startling> ljharb, it's been a while, I'm just saying they're known to break
08:22 < startling> AAA_awright, right, I'm not complaining about losing data.
08:22 < AAA_awright> startling: So what's the particular problem you've come across?
08:22 < startling> this isn't really the place or the time
08:23 < AAA_awright> "git clone" clones your repository, "git submodule update --init" will populate the commit objects with trees
08:23 < AAA_awright> You can't break anything with those two commands
08:23 < AAA_awright> questions: What are you trying to accomplish?
08:23 < ljharb> either way, this is #node.js, and dependencies are mostly managed with npm.
08:24 < questions> AAA_awright:  im running a site using an old java irc off my servers just want to update to something newer and safer
08:25 < startling> questions: you're using the word "irc" incorrectly
08:25 < questions> i came accross this but after looking at connection its running off qwebirc
08:25 < questions> yes im very tired 
08:25 < startling> questions, nope. qwebirc is a client
08:25 < questions> do i sound stupid should i just leave?
08:25 < AAA_awright> ljharb: I'm suggesting that's a bad idea
08:26 < AAA_awright> Also, Node.js != npm
08:26 < startling> questions, you want a server? I like ngircd. but why is this in #Node.js?
08:26 < AAA_awright> (As much as many people want it to)
08:26 < ljharb> AAA_awright: why is npm a bad idea? it works great
08:26 < questions> no i have many many servers
08:26 < ljharb> AAA_awright: and i know they're not the same, but it's the common solution. just like in rails, you use bundler.
08:26 < AAA_awright> Not saying it's a bad idea, I'm saying for dependencies it's a bad idea by itself
08:27 < questions> just want to update using ajax and qwebirc i guess 
08:27 < startling> questions, update what
08:27 < ljharb> AAA_awright: what sort of dependencies
08:27 < AAA_awright> questions: How is Node.js supposed to help you?
08:27 < AAA_awright> ljharb: Packages, libraries. If I depend on https://github.com/visionmedia/jade for instance, how do I declare that
08:27 < questions> right thanks for your help AAA_awright  have anice night
08:27 < creationix> http://howtonode.org:1337/  -> require('tetris') -> :)
08:28 < ljharb> AAA_awright: in that specific case, it's an npm module. so you put it in your package.json
08:28 < creationix> or http://luvit.io:1337/?ugly if you want something a bit exotic
08:28 < startling> anyway, who among us uses os x with node from brew?
08:29 < ljharb> AAA_awright: https://npmjs.org/package/jade - package.json can tie it to a 1.1.1, 1.1.x, 1.x.x, or x.x.x
08:29 < startling> if you do, could you tell me what "ls $NODE_PATH" says?
08:29 < ljharb> startling: i compile node from source on os x
08:29 < ljharb> and my $NODE_PATH is blank
08:29 < AAA_awright> ljharb: My issue with that is, if you're using Git, you're not specifically identifying the package source you're using, just a version number, if any.
08:30 < startling> ljharb, where does npm install -g install to?
08:30 < ljharb> but `which node` says `/usr/local/bin/node`
08:30 < ljharb> AAA_awright: a version number of a published module is precisely as identifying as a commit hash to a git repo.
08:30 < AAA_awright> Git has this wonderful hash tree that identifies all your code and all it's history
08:30 < ljharb> startling: /usr/local/bin looks like
08:30 < startling> ljharb, how about the libraries?
08:30 < ljharb> AAA_awright: yes but you shouldn't care about a dependency's history.
08:30 < ljharb> startling: what libraries?
08:30 < startling> ljharb: (sorry, should have specified that)
08:31 < startling> ljharb, where does npm install -g install libraries to?
08:31 < AAA_awright> ljharb: A version number doesn't tell you anything except if it came before or after another release of the same package, and hopefully some information about compatability
08:31 < AAA_awright> Git ids do tell you specifically the source you're depending on, that's the nature of a hash tree
08:31 < ljharb> startling: can you give me an example? it's npm. i don't care where it installs anything, because thats its job to worry about
08:32 < startling> ljharb, well, it's not doing its job for me. :)
08:32 < ljharb> AAA_awright: yes but you shouldn't ever need to know any of that. all you need is an identifier that you can use to help debug problems. an npm version, as well as a git hash, tell you the same info
08:32 < ljharb> startling: then don't use brew :-) just install it from source
08:32 < startling> ljharb, might be worth a shot
08:33 < AAA_awright> ljharb: A version number doesn't contain any information about the package source code being used.
08:33 < AAA_awright> And you do want to point to the commit history of packages you're using
08:33 < AAA_awright> For all the same reasons you keep a revision control system
08:35 < ljharb> AAA_awright: version control is for the code in your app. not external dependencies.
08:35 < ljharb> AAA_awright: the whole point of using an external lib is to let it be a black box
08:35 < AAA_awright> External dependencies don't need version control? They're just as much a project as your own projects
08:35 < AAA_awright> You should treat them that way
08:35 < ljharb> AAA_awright: they do, but for the maintainers of it. not the consumers of it.
08:36 < startling> yeah, I agree with ljharb on this
08:36 < AAA_awright> Some things are opaque, dependencies are not opaque
08:36 < startling> I've never been a fan of "stick all your dependencies in the repo too"
08:36 < ljharb> theyre supposed to be opaque.
08:36 < ljharb> all youre supposed to have is an identifier (version or sha or whatever) that you can use in docs and changelogs if you have to.
08:36 < ljharb> if you care about more than that, then you should be a maintainer of the dependency, and thats different.
08:37 < AAA_awright> You want to know, for instance, if there's new code released that's a derivative of the code you're depending on
08:37 < AAA_awright> I get that the APIs are ideally opaque (though that files in the face of "the source code is the ultimate documentation)
08:38 < AAA_awright> You can't express changes in dependencies with simple version numbers, even if they did change with every commit and were properly maintained (and that's expensive to do anyways)
08:39 < startling> wow, making node is pretty noisy
08:39 < Nuck> AAA_awright: I use Git Submodules a lot actually
08:39 < Nuck> Well, I did
08:39 < Nuck> For the most part I've switched to npm's git dependency capability, which is little-known but very useful.
08:39 < AAA_awright> startling: Not too much more than other things I've built... make by default prints out all the commands it's running
08:39 < ljharb> AAA_awright: absolutely you can express changes with version numbers just like with shas
08:40 < ljharb> AAA_awright: shas point to commits, version numbers point to changelogs.
08:40 < AAA_awright> Nuck: https://github.com/Acubed/git-node
08:40 < Nuck> When I did work with submodules, it was through SourceTree.app
08:40 < AAA_awright> ljharb: What does a version number tell you? At worst, it's an opaque string that's an *alias* to a particular tarball
08:41 < ljharb> AAA_awright: *the same thing as a sha*
08:41 < ljharb> AAA_awright: with either one you have to look up what it means
08:41 < AAA_awright> ljharb: At best, it tells you if one particular revision is compatible with another
08:41 < ljharb> how does it possibly tell you that? its just a hash.
08:41 < AAA_awright> It doesn't tell you which version is an ancestor of who
08:41 < Nuck> AAA_awright: I still use npm's git deps
08:41 < Nuck> It's easier and integrates with node_modules easily
08:41 < startling> AAA_awright: yes, I know, I'm familiar with make
08:41 < ljharb> a submodule points to one hash. the submodule's repo itself might have that info, but thats not what you have. you have one hash, no parents or context.
08:41 < Nuck> And I don't like checking in my node_modules
08:41 < Nuck> Not at all
08:42 < ljharb> Nuck: so .gitignore them
08:42 <@Nexxy> sure is grumpy in here
08:42 < Nuck> I use git deps for all my internal libs
08:42 < Nuck> ljharb: I do .gitignore node_modules
08:42 < ljharb> grump grump grump :-)
08:42 < AAA_awright> ljharb: A hash is semantically the same as the contents of the hash, if you have the contents accessible to you. So provided a hash, I can learn everything there is to know about the history of my source code.
08:43 <@Nexxy> I only listen to the highest quality gothic industrial.
08:43 < AAA_awright> ljharb: A version number is an alias, it can point to something, but you have to take a certain person's authority that such fact is true
08:43 < AAA_awright> It's not "necessarially" true
08:43 < ljharb> AAA_awright: and with a version number, you can get the same information! because a version number is semantically the same as a list of changes between that and the previous version
08:43 < ljharb> a sha is an alias too.
08:43 < AAA_awright> Not in information theory...
08:43 <@Nexxy> #caremad
08:44 < ljharb> AAA_awright: git hashes are one-way. you can not possibly retrieve the info from them, theyre just aliases. the info is only used to construct the hash.
08:44 < AAA_awright> ljharb: I can take my entire source history, and come up with exactly one commit Id, and I can do it backwards, given a repository and a commit Id, I can come up with a source history
08:44 < ljharb> it's a SHA. the info is lost, and it becomes simply a pointer.
08:44 < AAA_awright> ljharb: You cannot do that with a version number, they don't mean the same thing
08:44 < ljharb> AAA_awright: yes but with just the commit ID, and no repo, you're screwed. because its just a pointer.
08:44 < ljharb> just like with a version number and no changelog.
08:45 < ljharb> both are pointers to the information.
08:45 < AAA_awright> A version number for this purpose is just another name for a tag
08:45 < AAA_awright> Why doesn't Git use tags for everything?
08:45 < AAA_awright> If they really do mean the same thing
08:45 < ljharb> in git, a tag === branch === commit SHA
08:45 < ljharb> they are all the same thing.
08:45 < ljharb> they are all pointers to things.
08:46 < AAA_awright> No, a tag is a pointer to an Id that doesn't change, a branch is a pointer to a commit that *can* advance as commits are made to it
08:46 < AAA_awright> Even tag and branch, which are very similar, have different meanings
08:46 < ljharb> AAA_awright: sure it can change. thats just in svn that its immutable
08:47 < ljharb> i move tags around all the time
08:47 < ljharb> the naming only denotes a convention, not a restriction.
08:47 < AAA_awright> SVN doesn't even have tags (in Git terms)
08:47 < AAA_awright> At least CVS has tags!
08:47 < Nuck> Is AAA_awright on some sort of drugs?  Cause I want in.
08:47 < Nuck> This world where hashes are the same as their contents seems interesting.
08:47 < Nuck> AAA_awright: I hear that you can also tell the history of every world and every civilization that ever has, is, and will come to be, just from a small piece of cake.
08:47 < ljharb> let's not pretend centralized version control is any good - we're just talking about version numbers versus commit hashes for external dependencies.
08:47 < Nuck> Also, wow
08:47 < Nuck> This git-node thing is a wonderful batch of snake oil
08:48 < AAA_awright> Mercurial also has very poor notions of a tag
08:48 < startling> man, c++ and its ridiculous compile times suck
08:49 < AAA_awright> startling: You may want to look into the --shared-v8 option. Node.js only takes 70 cpu-seconds to compile on my system
08:49 < AAA_awright> that's about 30 "real" seconds
08:50 < Nuck> Or just get binaries
08:50 < AAA_awright> Nuck: Yes, in fact, information can be uniquely identified by a cryptographically secure hash. That's the definition of a cryptographically secure hash!
08:50 < startling> AAA_awright, what's --shared-v8 do? I don't think I have a v8 installed anywhere
08:50 < startling> *that node can use
08:50 < ljharb> AAA_awright: yes, but you can not recover the information solely from the hash, which is what you are suggesting.
08:50 < startling> I've got Chrome.app, of course
08:50 < Nuck> AAA_awright: It is IDENTIFIED.  IT does not provide any information about the history.
08:50 < Nuck> AAA_awright: A hash is an identifier which tells nothing of the contents.
08:50 < AAA_awright> startling: It uses an existing V8 library instead of compiling it all over again. about 90% of the compile time is actually just compiling V8.
08:50 < ljharb> AAA_awright: nobody cares about verification of external dependencies besides richard stallman
08:51 < ljharb> AAA_awright: unless youre saying you build all your software, including your OS, from source
08:51 < AAA_awright> Nuck: Right, nor should a hash tell you something about the contents
08:51 < startling> AAA_awright: yeah, don't think I've got an existing v8 library.
08:51  * terinjokes has been known to compile his OSes from scratch
08:52 < Nuck> AAA_awright: From earlier: "provided a hash, I can learn everything there is to know about the history of my source code"
08:52 < Nuck> Your words, not mine
08:52 < ljharb> AAA_awright: so a version number, and a hash, tell you the same information about what they point to - nothing, without a lookup. either a changelog, or a repository.
08:52 <@Nexxy> oh
08:52 <@Nexxy> my god
08:52 < Nuck> ljharb: Let's leave AAA_awright to his snake oil?
08:52 <@Nexxy> stfu already
08:52 < startling> Nexxy: ikr
08:52 < ljharb> lol
08:52 < AAA_awright> Nuck: That's right
08:53 < Nuck> As long as he doesn't force me to use git-node, I'm happy.
08:53 < AAA_awright> Provided a hash, I can tell you anything you want about my source code
08:53 < ljharb> AAA_awright: can you tell me that without your repository to look up the hash in?
08:53 < AAA_awright> I look up the hash in the index, pull out the file, and verify it's the same file that the hash identifies
08:53 < Nuck> AAA_awright: How about I hand you the latest hash from my startup's website repo, and you figure out the history?
08:53 < Nuck> AAA_awright: According to you, that should work.
08:53 < AAA_awright> ljharb: You need some out-of-bound information but I'm working on a search engine to that effect
08:54 < Nuck> f2327b3d87409d8be15df03ae236447c3aef42ad
08:54 < AAA_awright> We're talking within the context of a single Git repository so it goes without saying
08:54 < Nuck> What's my history.
08:54 < ljharb> AAA_awright: right, you need the repo. and with a version number, you need the changelog. theyre identical.
08:54 < AAA_awright> Nuck: Which repository are we talking about then?
08:54 < Nuck> AAA_awright: That's for you to determine.  Should be able to get that from the hash right, since it has all that info in it?
08:54 <@Nexxy> 1, 2, 3, zip it
08:55 <@Nexxy> www.zipit.com
08:55 < Nuck> Nexxy: :(
08:55 < AAA_awright> Nuck: You know I'm not making that claim >_>
08:55 < Nuck> But Snake Oil salesman.  I no likey snake oil.  I prefer lizard oil.
08:55 < Nuck> AAA_awright: That's exactly the claim you're making.
08:55 <@Nexxy> Nuck, stop being ridiculous
08:55 < Nuck> I would like to think it isn't, but it's exactly what you said.
08:55 < startling> does installing node from source install npm?
08:56 <@Nexxy> startling, jah
08:56 < Nuck> startling: Aye.
08:56 < startling> k. wasn't sure whether that was left over form my old installation or what
08:56 < AAA_awright> Except for certain distribution-specific source packages
08:56 < startling> sure
08:56 < AAA_awright> Nuck: Have you considered the option of "misunderstanding"
08:57 < Nuck> I imagine this is what everybody else felt when I first started with #Node.js
08:57 < Nuck> This feeling of "oh god this guy is insane"
08:57 <@Nexxy> still feeling it
08:57 < Nuck> I'm sorry for that :(
08:57 < startling> ugh, nope, node still isn't pulling in npm-installed libs. :(
08:57 <@Nexxy> startling, are you installing them with -g and they're not working?
08:57 < AAA_awright> Nuck: And what "snake-oil" are you even talking about?
08:57 < startling> Nexxy: correc
08:58 < startling> t
08:58 < AAA_awright> What impossible claim am I making?
08:58 < Nuck> startling: What do you mean "pulling in"?
08:58 < Nuck> You have to install per-project, in ./node_modules/
08:58 < startling> Nuck, not with -g
08:58 < Nuck> Node, even without npm, always checks node_modules
08:58 < Nuck> startling: Ah true
08:58 < startling> unless I'm drastically misunderstanding
08:58 < AAA_awright> startling: I wouldn't use -g. It was a bad idea when npm did it by default, it's still a bad idea
08:58 < startling> require("whatever") isn't finding my globally-installed modules
08:58 < Nuck> AAA_awright: I'm drawing more on the "peddling wares which have no solid foundation in science" side
08:59 < startling> AAA_awright, it makes dicking around in a repl much more convenient
08:59 < Nuck> startling: Ah, hmmm, that's weird
08:59 < Nuck> globals install to... next to node's binary, was it?
08:59 < startling> I have no idea
08:59 < AAA_awright> startling: Install in your user directory, I think it's ~/.node_libraries
09:00 < Nuck> Or ~/node_modules?
09:00 < startling> AAA_awright, is there a flag for that?
09:00 < AAA_awright> startling: It's by default
09:00 < AAA_awright> Oh, install flag?
09:00 < AAA_awright> Not sure
09:00 < startling> AAA_awright: yeah, I mean an install flag
09:00 < AAA_awright> Nuck: Or that, if all your projects are under your home directory
09:00 < startling> can I tell npm where to install?
09:02 < AAA_awright> Nuck: Neither does swag I take home from a vacation but that doesn't mean it's "snake-oil" and claims to cure disease, etc, what's the particular claim you take issue with?
09:02 < Nuck> AAA_awright: I store all my stuff in ~/Code (on all my systems)
09:02 < startling> oh nice, node has a make uninstall.
09:03 < AAA_awright> Most of my stuff is in ~/{small handful of directories}/{checkout1,checkout2,master,etc}
09:03 < Nuck> lol @ checkout1/2/master
09:03 < Nuck> Artuous website?  ~/Code/Artuous/Website/
09:03 <@Nexxy> I LOL @ PEOPLE WITH DIFFERING METHODOOGIES ON IRC
09:03 < Nuck> I use capitals because I'm a Mac user and it's awesome
09:03 < AAA_awright> I've got multiple feature branches and customisations
09:03 <@Nexxy> +L
09:04 < startling> Nuck, you can use capitals on linux too!
09:04 < Nuck> AAA_awright: I guess that makes sense, if you need multiple working trees, but I generally don't (I commit multiple times a day)
09:04 < AAA_awright> blog, docs, rdf, site, etc are all checkouts
09:04 < startling> Nuck, in fact, you can even use all caps!
09:04 < Nuck> startling: I know! But for some reason I started it with Mac :P
09:04 < startling> haha
09:04 < Nuck> I think it's because of the norms on each platform
09:05 < Nuck> Mac's system uses things like /System/Library/ but Linux is like /usr/bin
09:05 < startling> Nuck, os x is case-insenstive
09:05 < AAA_awright> I use ~/{Documents,Videos,IRC,Key} ... that seems to be it
09:05 < startling> Nuck, so you can name a directory "Dir" and then "cd dir"
09:05 < Nuck> startling: ... Not at all
09:05 < startling> Nuck: this is an HFS/ext3 thing
09:06 < startling> Nuck, yes really
09:06 < AAA_awright> Wait, ~/{Radio,Subversion,Mixes,Node,Pictures,Audio}
09:06 < startling> Nuck: mkdir dir && mkdir Dir
09:06 < startling> Nuck: mkdir: Dir: File exists
09:06 < Nuck> Woah, what the fuck.  That shit's weird.  Cause, like, I've done that before and it's failed.
09:06 < Nuck> Weird
09:06 < startling> Nuck, yeah, it's dumb and weird
09:07 < Nuck> startling: I have files with the same name in different case
09:07 < Nuck> In the same directory
09:07 < Nuck> How in the fucking fuck
09:07 < startling> Nuck, no you don't!
09:07 < startling> Nuck, not on your main factory os x drive, anyway
09:07 < Nuck> startling: Either way, the filename is /System/Library
09:08 < Nuck> They capitalized
09:08 < Nuck> And so I capitalized
09:08 < Nuck> On Linux, they lowercased, so I lowercased.
09:08 < Nuck> On Windows, they shat everywhere, so I used underscores.
09:08 < startling> right
09:08 < Nuck> startling: Yes on my main factory OS X drive
09:08 < Nuck> Which has me marvelling at my own 1336 haxx0r skillz
09:08 < Nuck> erm, 1337
09:08 < startling> ++1336
09:09 < Nuck> So leet I can't spell it
09:09 < startling> Nuck, you sure? maybe there are inconsistent syscalls, but I've never heard of that
09:09 < Nuck> startling: I'd swear I have that in one folder.  Don't remember where, but in one of my code folders I recall doing that
09:10 < Nuck> Maybe it was under Arch.  Same computer, different OS
09:10 < Nuck> And ext4 filesystem
09:10 < Nuck> Which I believe is case-sensitive, no?
09:10 < startling> correct
09:11 < startling> anyway, it's fun when you git clone a thing with differently-cased similarly-named files onto OS X!
09:11 < Robdgreat> also windows
09:11 < Nuck> startling: I've never seen that happen TBH
09:11 < startling> Nuck, it's certainly unusual
09:11 < Nuck> What the fuck idiot would do such a terrible thing?
09:11 < Nuck> That'd be torturous even to a Linux user
09:12 < AAA_awright> ljharb: If you need proof enough the difference between an objectid, and tags and branches, a commit id is mathematically related to the contents it's identifying. A mathematical set is uniquely identified only by it's contents, and since a hash is *uniquely* determined by the contents it's pointing to, you can also use a hash to identify a set. This is why Git uses a hash tree, and not tags for identifying commits, subtrees, and blobs.
09:12 < startling> Nuck, pretty sure it was something dumb like Makefile/makefile
09:12 < startling> Nuck: where `makefile` was a shell script to generate Makefile or something
09:12 < Nuck> startling: lmao
09:12 < Nuck> startling: I'd name it makemakefile
09:12 < Nuck> And then make a tool to generate that
09:12 < Nuck> And name it makemakemakefile
09:13 < startling> Nuck, they did that
09:13 < Robdgreat> I'd probably just name it configure
09:13 < startling> Nuck, they called it automake
09:13 < Nuck> And people would hate me.
09:13 < Nuck> startling: haha
09:13 < Nuck> startling: Well, gyp does it too technically
09:13 < startling> gyp?
09:14 < Nuck> startling: the new thing used by Chromium and now Node.js
09:14 < Nuck> It's essentially a compile-to-every-OS-build-system-ever language IIRC
09:14 < startling> wow, what a terrible name
09:15 < Nuck> So you build once for gyp and it can build a makefile, Visual Studio Project file, XCode project, etc.
09:15 < startling> it's not even justified by a backronym. yay racism
09:15 < Nuck> Yay Google being racist :D
09:15 < AAA_awright> configure: A generator generator generator generator
09:15 < AAA_awright> I swear build systems are the most convoluted things engineers have ever come up with
09:16 < AAA_awright> And that's saying something
09:16 < startling> fix ("generator " ++)
09:16 < Nuck> I want a parser generator which generates parser generator generator
09:16 < Nuck> s
09:16 < startling> Nuck, it's not uncommon
09:16 < Nuck> (parser)
09:16 < startling> Nuck, gcc is written to build with gcc
09:17 < Nuck> AAA_awright: make is fairly simple, at least.
09:17 < AAA_awright> I don't know why we don't just use Make.
09:17 < AAA_awright> Have a helper program for people who can't consume it.
09:17 < Nuck> startling: What happens if I build it with Visual Studio?
09:17 < startling> quick sanity-check: "npm install -g coffee-script" should let me "node" and then "require("coffee-script")", right?
09:18 < Nuck> startling: What's your current directory?
09:18 < mikrowelt> hey guys
09:18 < Nuck> Is it under ~/?
09:18 < startling> Nuck: yes
09:18  * Nuck ends his involvement
09:18 < startling> someone want to try that require real quick?
09:20 < mikrowelt> guys is there a way to return an async function value?
09:20 < Nuck> mikrowelt: No.
09:20 < mikrowelt> this suxx((
09:20 < Nuck> If it's async, you can't return the value, since that's sync
09:21 < Nuck> mikrowelt: Just do it the Async Way.
09:21 < Nuck> It hurts because we love you.
09:21 < startling> mikrowelt, return someFunction(function (a) { return a; })
09:21 < mikrowelt> this wont work?
09:21 < mikrowelt> if i return a callback it ll work?
09:22 < mikrowelt> i mean async(data, callback)
09:22 < Nuck> It won't
09:22 < startling> assuming this is continuation-passing-style "async"
09:22 < mikrowelt> damm((
09:22 < Nuck> At some point in the chain, something will return immediately and result in you never getting the thing you want, mikrowelt 
09:22 < Nuck> So basically, use async
09:23 < Nuck> I guarantee it grows on you
09:23 < Nuck> async only hurts because it loves you too much, mikrowelt.  So just love it back and it hurts less.
09:23 < mikrowelt> i using get... so i go $..get(url, function(data){})
09:23 < mikrowelt> i love it alot
09:24 < mikrowelt> async owns)
09:24 < Nuck> mikrowelt: What about it?  Take the data and work with it inside the function
09:24 < Nuck> That's the spirit
09:24 < mikrowelt> but its an util function that helps not to waste time... and with a ballback it wont be so cool to use..((
09:25 < chilts> mikrowelt: you love alot :) http://hyperboleandahalf.blogspot.co.nz/2010/04/alot-is-better-than-you-at-everything.html
09:25 < mikrowelt> its like a template loader... it checks if its already loaded into array if not i ajax get... and and to array and then loads data
09:25 < chilts> :)
09:25 < Nuck> mikrowelt: Well, if the utility is doing anything network-bound, making it synchronous would slow your stuff down massively
09:26 < startling> haha
09:26  * startling whistles.
09:27 < startling> can I see Node's search path somehow?
09:28 < Nuck> uhhh what's the thing... require.resolve()
09:28 < Nuck> I think
09:28 < Nuck> And require.paths, if that still exists, which it probably doesn't
09:29 < SomeoneWeird> > require.paths
09:29 < SomeoneWeird> Error: require.paths is removed. Use node_modules folders, or the NODE_PATH environment variable instead.
09:29 < Nuck> (as an unchangable thing, perhaps)
09:29 < Nuck> Yeah, require.paths is gone
09:29 < startling> bah
09:29 < startling> so, node isn't doing what it says it's doing
09:29 < startling> who do I whine at?
09:30 < Nuck> startling: #whine-connoiseurs
09:30 < Nuck> Which, if it doesn't exist, ought to
09:30 < Nuck> or perhaps the Whine cellar
09:31  * Nuck uses puns an excuse to not work
09:32 < startling> ljharb: you installed from source on os x, yeah? could you do me a favor and "npm install -g x" and then try "require("x")" in the node repl?
09:32 < startling> for any x, naturally
09:32 < ljharb> doesn't work
09:32 < startling> ljharb: aha
09:32 < startling> ljharb, it should, shouldn't it?
09:32 < ljharb> that doesnt surprise me tho - -g installs are for command line tools, not for requireable things
09:32 < ljharb> nothing i've ever installed with -g is something i'd want to require in
09:33 < Nuck> haha
09:33 < ljharb> i'd probably have to manually add the -g dir to $NODE_PATH
09:33 < ljharb> then it might work
09:34 < Nuck> I'd recommend just making a ~/node_modules
09:34 < Nuck> And then npm install in ~/ should install there, IIRC
09:34 < Nuck> And the node resolver should work in there
09:34 < Nuck> Honestly, I mostly use the REPL to test new code for a project, so I go into the project's folder and use the REPL there
09:34 < ljharb> startling: if you're requiring stuff into your app, use a package.json, and install it to that app's node_modules dir
09:34 < ljharb> exactly, use the repl in the project dir
09:35 < Nuck> ljharb: He mentioned that he's using the REPL earlier
09:35 < startling> ljharb, it doesn't (even if I add the -g directory to NODE_PATH)
09:35 < startling> I understand that this isn't best practice, but all the docs seem to imply that this should work.
09:35 < ljharb> startling: so make a project dir, npm install into its node_modules, and run the repl from it
09:36 < startling> ljharb, well, here's the thing
09:36 < startling> I want a cakefile task (`cake dependencies`) that does this
09:36 < startling> I *could* use a child process, but that's ugly
09:37 < ljharb> cakefile? now its beyond me
09:37 < startling> so I was going to use npm's api. but naturally it can't find the npm module. :(
09:37 < startling> ah well. I'll just do node_modules
09:47 < startling> is there a "run this function on each file in this directory" thing in fs?
09:48 < SomeoneWeird> startling, you could use https://github.com/SomeoneWeird/nodeplugs
09:49 < Nuck> I just found a file in my codebase which, I shit you not, consists of `mongoose = require('mongoose'); module.exports = mongoose`
09:49 < Nuck> I don't know what the fuck I was thinking back then, but WTF
09:49 < startling> Nuck, do you monkeypatch it?
09:49 < Nuck> startling: In this current version, at least, no
09:49 < startling> Nuck: that's all I can think of
09:50 < Nuck> Maybe at some point
09:50 < Nuck> I wrote a lib for traversing an entire folder structure
09:50 < jetienne> with socket.io server, can i read the url of connection in the socket object ? i would like to join a room immediately after conneciotn
09:51 < Nuck> startling: I probably did at some point, but it's going away in this new version.  Might've also been to avoid a circular dependency :P
09:51 < AAA_awright> startling: fs.readdir and Array#map or Array#forEach
09:51 < AAA_awright> Like, fs.readdirSync('.').forEach(function(v){ /* do something with v */ }) right? Not something more complex?
09:51 < startling> AAA_awright: sure, but I have to do bookkeeping on the paths too
09:52 < Nuck> How does Node react if File A requires File B which requires File A?
09:52 < Nuck> That is to say, a circular require?
09:52 < startling> it's not *that* hard, but it's something I'd expect in a stdlib
09:52 < SomeoneWeird> startling, which is why I wrote something for it :p
09:52 < AAA_awright> Nuck: On one iteration one of the requires() will be undefined, but after it's all done it'll point to the module
09:53 < startling> SomeoneWeird: oh, missed that
09:53 < startling> heh
09:53 < Nuck> AAA_awright: Yeah, but will File B's require of File A have the module.exported state up until File A requires File B?
09:54 < AAA_awright> Nuck: http://nodejs.org/docs/latest/api/all.html#all_cycles
09:54 < Nuck> AWESOME
09:55 < Nuck> I love some of the ways Node handles these edge cases
09:55 < Nuck> Because they make for really useful tools
09:56 < Nuck> The handling of circular dependencies allows me to remove 2-3 simple "wrapper" files from my codebase
09:56 < startling> SomeoneWeird, so, uh, where is it?
09:57 < AAA_awright> Node's require function might be one of the more brilliant things I've ever seen
09:57 < SomeoneWeird> you wanna run a function on each file in a directory right startling 
09:57 < Nuck> https://github.com/SomeoneWeird/nodeplugs said he.
09:57 < startling> whoops, yep
09:58 < SomeoneWeird> var L = require('nodeplugs'); var l = new L({path: "/files", autorun: true, autorunFunction: "functionname" }); l.Load();
09:58 < samholmes> how do I get the protocol from the request object?
09:58 < samholmes> Like, how do I know if it's http:// or https://?
09:59 < SomeoneWeird> req.headers.protocol or something
10:07 < jelscript> good morning
10:52 < chiel> is there any way i can check the versions of installed local npm packages?
10:58 < SomeoneWeird> chiel, npm ls
11:14 < chiel> SomeoneWeird: ah k, thanks
11:22 < AAA_awright> >> true
11:22 < purr> AAA_awright: (boolean) true
11:22 < AAA_awright> >> "123"
11:22 < purr> AAA_awright: (string) '123'
11:23 < BennyLava> whew, glad you tested that.. was wondering myself
11:23 < deoxxa> yeah, that's a load off my mind
11:23 < AAA_awright> >> function $(){return 'AAA_awright: (string) ('+$+')()'}()
11:23 < purr> AAA_awright: SyntaxError: Unexpected token )
11:23 < AAA_awright> bah
11:24 < AAA_awright> >> function $(){return '('+$+')()'}()
11:24 < purr> AAA_awright: SyntaxError: Unexpected token )
11:24 < AAA_awright> >> (function $(){return '('+$+')()'}()
11:24 < purr> AAA_awright: SyntaxError: Unexpected end of input
11:24 < nathan7> missed a )
11:24 < AAA_awright> >> (function $(){return '('+$+')()'})()
11:24 < purr> AAA_awright: (string) "(function $(){return '('+$+')()'})()"
11:25 < AAA_awright> >> (function $(){return 'AAA_awright: << (string) ('+$+')()'})()
11:25 < purr> AAA_awright: (string) "AAA_awright: << (string) (function $(){return 'AAA_awright: << (string) ('+$+')()'})()"
11:25 < AAA_awright> Well it was going to be a work of Modern Art, until purr decided to tack on extra stuff at the end
11:25 < AAA_awright> s/end/beginning/
11:26 < deoxxa> i have no idea what you're trying to do there
11:26 < nathan7> Nobody does
11:26 < deoxxa> but i think you're on acid
11:26 < AAA_awright> It's art, don't you see?
11:26 < deoxxa> are you on acid
11:26 < AAA_awright> >> (function $(){return '('+$+')()'})()
11:26 < purr> AAA_awright: (string) "(function $(){return '('+$+')()'})()"
11:26 < AAA_awright> >> (function $(){console.log('('+$+')()')})()
11:26 < purr> AAA_awright: undefined; Console: "(function $(){console.log('('+$+')()')})()"
11:26 < deoxxa> throw an eval in there
11:26 < deoxxa> stack explosion time
11:27 < AAA_awright> Forkbomb tiem
11:28 < AAA_awright> Also:
11:28 < AAA_awright> Actually no that doesn't work
11:28 < AAA_awright> >> +function $(){console.log('+'+$+'()')}()
11:28 < purr> AAA_awright: (number) NaN; Console: "+function $(){console.log('+'+$+'()')}()"
13:10 < caioketo> how can I connect an node.js server as a tcp client ?
13:10 < RLa> see net module
13:11 < caioketo> and how about encode and decode byte array to bas64, is it possible?
13:11 < deoxxa> caioketo: http://nodejs.org/docs/latest/api/all.html
13:12 < RLa> caioketo, buffers support base64 encoding
13:12 < caioketo> oic, I will study a little about it, thanks
13:22 < SoulRaven> hello
13:23 < SoulRaven> i have a question regarding buff.slice()
13:23 < SoulRaven> in the documenation says that slice will modify the memory of the original buffer
13:23 < SoulRaven> but if i do buff.slice(0, 1) on this buffer: <Buffer 00 0f 33 35 36 33 30 37 30 34 30 35 32 38 30 31 39>
13:24 < SoulRaven> slice return 00 what is ok, but if after that i do console.log(buffer), i see the original buffer with first byte intact
13:24 < SoulRaven> way?
13:25 < deoxxa> the memory referenced by a slice of a buffer is the same memory from the original buffer
13:25 < JoeDoyle23> slice just gives you a reference to the section of the original buffer.  It doesn't modify it.
13:25 < JoeDoyle23> If you modify the buffer retruned from slice, the original buffer will also have those changes
13:26 < SoulRaven> is don't see the changes, that the ideea
13:26 < JoeDoyle23> You didn't mention assigning a new value to the buffer returned from slice
13:27 < SoulRaven> http://bin.cakephp.org/view/1728004656
13:27 < JoeDoyle23> slice doesn't modify the original buffer
13:27 < JoeDoyle23> that code shows the correct results
13:27 < SomeoneWeird> buffer = buffer.slice(0,1);
13:28 < SoulRaven> and how i modify the original buffer, to get slices from the buffer
13:28 < Ralt> is nodejs.org/api down only for me? besides, nodejs.org looks like an expired domain :/
13:28 < JoeDoyle23> Are you thinking of splice? Like for arrays?
13:29 < Ralt> oh man, it *is* expired
13:29 < JoeDoyle23> yeah, I'm seeing that too
13:29 < SoulRaven> yes, somethink like that, i want to call the same function, and avery time when i call the function, to get a slice from that buffer, and modify the original buffer minus that slice that i get it 
13:29 < Ralt> Domain Name:NODEJS.ORG
13:29 < Ralt> Expiration Date:29-Sep-2012 14:50:55 UTC
13:30 < BennyLava> rof
13:30 < BennyLava> el
13:30 < Ralt> yeah...
13:31 < Ralt> I should have made an offline copy of node's doc.
13:31 < Ralt> oh wait, it must be on github
13:31 < SomeoneWeird> node docs are in source 
13:31 < Ralt> yep, right there https://github.com/joyent/node/tree/master/doc/api
13:32 < JoeDoyle23> SoulRaven: I don't that type of function exists for buffers
13:32 < Ralt> I wonder which doc generator they're using
13:32 < SoulRaven> JoeDoyle23: is not existing, i know:(
13:33 < JoeDoyle23> If you always want 1 byte, you can use buff[i] and just keep track of the position
13:34 < SoulRaven> the dimension is variabile, and i want to use this in a for stament
13:35 < SoulRaven> and thats way is more better to have something that will modify the original buffer, and also return the bytes selected
13:35 < JoeDoyle23> But it will put more pressure on the GC.  That turns 1 buffer into 3.
13:35 < SoulRaven> so if i want to call the first 2 bytes, i do buff.splice(0, 2), and after that if i want to return the next 8 bytes i do buffer.splice(0, 8)
13:36 < SoulRaven> so every time after a splice, the index is 0 from the buffer
13:36 < JoeDoyle23> With arrays that's true.  Buffer doesn't have a splice as far as I know
13:37 < SoulRaven> how can i do this with buffer, is posibile somthing like that?
13:38 < JoeDoyle23> I would probably juse walk over the original buffer so buf.slice(0, 2), then buf.slice(2, 8), etc.  Just keep track of your current position
13:39 < JoeDoyle23> also there is buf.copy if you don't want to change the original buffer
13:40 < SoulRaven> that is what i use now, but is not such eficient
13:42 < SoulRaven> i found this, with splice function, but i don't know if wil work
13:42 < SoulRaven> https://github.com/substack/node-buffers
13:51 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:59 < SoulRaven> the ideea is to modify the buffer structure
13:59 < SoulRaven> and splice parts of the buffer
13:59 < SoulRaven> but how will do this in nodejs
14:00 < SoulRaven> and also i don't undestand whay in the book, says "Modifying the new buffer slice will modify memory in the original buffer!"
14:01 < SoulRaven> what is means, if the buffer structure is not nodified
14:01 < SoulRaven> @modified
14:03 < SoulRaven> anyone has experiance wth buffers?
14:04 < tuhoojabotti> Modifying buffers is not fast
14:04 < tuhoojabotti> most of the time
14:04 < SomeoneWeird> why do you have to use buffers?
14:04 < SomeoneWeird> SoulRaven, ?
14:04 < tuhoojabotti> Binary data
14:04 < tuhoojabotti> oh
14:04 < tuhoojabotti> Good question yes.
14:04 < SoulRaven>  binary data, from AVL devices
14:05 < q_> sheesh, is there anything besides text mode emacs that will edit ejs files
14:05 < q_> is this 1997
14:05 < tuhoojabotti> q_: sublime?
14:05 < SomeoneWeird> sublime <3
14:05 < q_> for javascript ? checking
14:05 < tuhoojabotti> sublime<3
14:05 < SomeoneWeird> sublime does everything
14:05 < tuhoojabotti> It's awesomesauce.
14:05 < BennyLava> sublime++
14:05 < SomeoneWeird> it is
14:05 < tuhoojabotti> gotta buy it
14:05 < q_> weird, sublime is playing on my pandora
14:06 < SoulRaven> tuhoojabotti: but is posibile right? how 
14:06 < q_> ( the band )
14:06 < SomeoneWeird> lol
14:06 < SomeoneWeird> tuhoojabotti, "gotta"? :p
14:07 < tuhoojabotti> SomeoneWeird: Yes, it's not free you know.
14:07 < tuhoojabotti> It's like WinRAR
14:07 < tuhoojabotti> :D
14:07 < SomeoneWeird> hehe
14:07 < tuhoojabotti> Except more annoying
14:07 < SomeoneWeird> yeah
14:08 < SomeoneWeird> something like every 10 saves or something
14:08 < tuhoojabotti> yeah
14:08 < SomeoneWeird> but oh well, i don't mind for something that awesome hehe
14:08 < tuhoojabotti> I don't mind paying for something that awesome.
14:08 < SomeoneWeird> yeah I would except I have no way of paying for it lol
14:08 < tuhoojabotti> I have bought 6 humble bundles, I have spent more money on games I haven't had time to playt.
14:08 < tuhoojabotti> -t
14:08 < tuhoojabotti> :D
14:09 < SomeoneWeird> ahah yea
14:12 < timeturner> would we only need this if we were constructing a RegExp object that is partially created from a user's input? https://github.com/component/escape-regexp
14:12 < timeturner> partially or completely
14:15 < Venemo> hm
14:15 < Venemo> wtf happened to nodejs.org?
14:15 < Ralt> they forgot to renew the domain
14:16 < RLa> oops
14:16 < SomeoneWeird> actually I think it's being transferred
14:17 < Ralt> no
14:17 < Venemo> omg
14:17 < Venemo> okay
14:17 < Venemo> :P
14:17 < SomeoneWeird> Ralt, ?
14:17 < Ralt> the guys who can renew the domain are giving conferences
14:17 < RLa> Expiration Date:29-Sep-2012 14:50:55 UTC
14:17 < RLa> from whois output
14:18 < Ralt> yes :)
14:18 < SomeoneWeird> ic
14:18 < SomeoneWeird> :)
14:18 < ThiefMaster> umm, not sure if anyone responsible noticed it but nodejs.org is doing to expire in less than an hour... "Expiration Date:29-Sep-2012 14:50:55 UTC"
14:19 < ThiefMaster> *going to
14:19 < SomeoneWeird> yeah
14:19 < SomeoneWeird> we know
14:20 < ThiefMaster> and blog.nodejs.org seems to point to some crappy domain parking page
14:21 < ^robertj> hey all, do any of those cloud hosting services offer options to let you publish your active repo and instance information so folks can verify you are in fact running the code you say you are? I'd like to run a proxy for folks and give them some degree of assurance that I am not in fact logging their passwords and such
14:23 < SoulRaven> tuhoojabotti: do you have any ideea how to modify the original buffer?
14:23 < SoulRaven> and make somthing similar to splice?
14:40 < ablemike> http://nodejs.org domain down? 
14:41 < BennyLava> someone forgot to pay the bill
14:41 < BennyLava> no really
14:41 < ablemike> Anyone know the old IP?
14:42 < SoulRaven> 8.12.44.238
14:42 < BennyLava> 555-NODEJS
14:42 < SoulRaven> on my country sill runing
14:42 < BennyLava> ON YOUR COUNTRY??
14:42 < ablemike> thanks SoulRaven
14:42 < SoulRaven> @still
14:42 < mscdex> SoulRaven: you'd have to make a new Buffer if you're adding to it
14:43 < SoulRaven> mscdex: but how i delete from the original buffer, the portion of it
14:43 < SoulRaven> ?
14:43 < mscdex> you can't
14:43 < mscdex> you can set values to 0
14:43 < mscdex> you can do slices
14:43 < mscdex> but that's about it
14:43 < mscdex> or create a new Buffer without those parts
14:44 < SoulRaven> i can't crate new buffers, because i nead to splice from the original buffer many times on the row
14:44 < mscdex> how much are you removing? more than 1 byte?
14:45 < SoulRaven> and backtraking i can't do, because sometimes, the buffer is dinamic
14:45 < SoulRaven> 1, 2, 3, 8 bytes
14:45 < SoulRaven> and in diferent order
14:46 < SoulRaven> and the most eficient way is to call the same function multiple times, with the amount that i want to remove from the original buffer, and that function returns the values that i have removed
14:46 < BMF> is there another place to look up nodejs documentation, since nodejs.org is down?
14:46 < mscdex> SoulRaven: are you always removing from one end or the other, or in the middle?
14:46 < SoulRaven>  https://github.com/joyent/node/tree/master/doc/api
14:47 < nkuttler> BMF: works for me
14:47 < SoulRaven> if i stay with the original ideea, every time from the index 0
14:47 < mscdex> BMF: if you can't access the domain: http://8.12.44.238/api/
14:47 < SoulRaven> buff.splice(0, 4); buffer.splice(0, 8)
14:47 < SoulRaven> every time the start index is 0
14:48 < mscdex> SoulRaven: that's easy then... just keep a pointer around and bump it up to fake a deletion
14:48 < BMF> rgr. Thanks all.
14:49 < SoulRaven> you say somethink like: buff.slice(0, 4); buff.slice(4, 8);
14:49 < SoulRaven> right
14:49 < mscdex> no
14:49 < SoulRaven> is hard to backtrack like this
14:50 < mscdex> var p = 0; /* do something with buf[p..p+4] */ p = 5; /* do something with buf[p..p+8] */ ... etc
14:50 < mscdex> that way you don't create any new Buffers
14:53 < SoulRaven> the ideea is intresting, but will i want to find a solution for splice
15:00 < tuhoojabotti> wtf
15:00 < tuhoojabotti> nodejs.org domain parked?
15:00 < RLa> i think it just expired
15:00 < tuhoojabotti> lulz
15:00 < tuhoojabotti> anyone got a mirror for windows executable?
15:01 < SoulRaven> i have one exe
15:01 < SoulRaven> if you want
15:01 < tuhoojabotti> sorry, can't dcc
15:01 < tuhoojabotti> beam?
15:01 < SoulRaven> beam, ok
15:01 < tuhoojabotti> http://justbeamit.com/
15:02 < SoulRaven> http://justbeamit.com/2efce
15:02 < tuhoojabotti> didn't work
15:02 < tuhoojabotti> 160kB :P
15:03 < SoulRaven> http://justbeamit.com/aeb73
15:03 < tuhoojabotti> awesome, thanks
15:03 < SoulRaven> welcome
15:03 < tuhoojabotti> but this is 0.8.9!
15:03 < tuhoojabotti> so old
15:03 < SoulRaven> i know
15:03 < tuhoojabotti> :P
15:03 < tuhoojabotti> It'll do
15:04 < SoulRaven> is the only one i have
15:04 < clever> tuhoojabotti: i discovered i was running 0.2 on one of my systems yesterday....
15:04 < tuhoojabotti> That's clever 
15:04 < mscdex> tuhoojabotti: http://8.12.44.238/dist/
15:05 < tuhoojabotti> thanks, but you're late
15:05 < mscdex> that's the official source though! :-)
15:05 < tuhoojabotti> I trust SoulRaven 
15:05 < tuhoojabotti> With my soul
15:05 < SoulRaven> thx:)
15:06 < tuhoojabotti> Anyone making IRC bots?
15:07 < SoulRaven> there any solution for delete slices from a buffer'?
15:07 < tuhoojabotti> make a new smaller buffer and copy the contents you want?
15:07 < tuhoojabotti> I think there's a module for that.
15:07 < tuhoojabotti> that tries hard not to make new buffers if it can
15:07 < SoulRaven> but how i delete from the original buffer, that is the main question
15:08 < tuhoojabotti> I don't think it's possible
15:08 < tuhoojabotti> not easy, that is
15:10 < SoulRaven> anyone tryed something like this?
15:10 < tuhoojabotti> But I don't have much experience with Buffers, so don't trust me. :P
15:12 < icebox> SoulRaven: https://github.com/gf3/IRC-js
15:13 < icebox> tuhoojabotti: https://github.com/gf3/IRC-js
15:13 < icebox> tuhoojabotti: sorry... mistell :)
15:13 < SoulRaven> ??
15:13 < icebox> SoulRaven: sorry... mistell
15:15 < tuhoojabotti> icebox: interesting. :)
15:15 < tuhoojabotti> icebox: You're not using any irc-library
15:15 < icebox> tuhoojabotti: I have been trying it just now... not with 'icebox' user
15:16 < tuhoojabotti> icebox: I'm also working on a bot, but I started to hate node-irc, so I started my own.
15:16 < tuhoojabotti> icebox: https://github.com/jslush/node-irc-stream
15:17 < icebox> tuhoojabotti: nice... I would like a very simple console irc client 
15:17 < ansolas> is theer something like node-dev but running as deamon?
15:17 < tuhoojabotti> icebox: that example is actually working.
15:17 < ansolas> so that the server is new started once a file has been changed
15:17 < ansolas> ?
15:17 < tuhoojabotti> icebox: npm install && node example/bot.js :)
15:18 < ansolas> can forever do it ?
15:18 < icebox> tuhoojabotti: I am sure I give a look at it in a just few minutes :)
15:18 < ansolas> w, --watch      Watch for file changes
15:18 < ansolas> weeee
15:18 < antiface> Hi everyone. I've decided to start using IRC. I am a newb. ;-)
15:18 < tuhoojabotti> icebox: We're still early in the production, but we would like to have feedback on the API.
15:19 < tuhoojabotti> We try to make it very modular with stream based middleware
15:21 < icebox> tuhoojabotti: is it not in npm registry?
15:21 < tuhoojabotti> icebox: Not yet.
15:22 < ansolas> hm 
15:22 < tuhoojabotti> We'll probably publish it on version 0.1.0 :P
15:22 < TehShrike> Should I sign up for the Iris npm beta? :-x
15:23 < TehShrike> Also, is this not the most wacky thing ever? http://int3.github.com/doppio/about.html
15:23 < icebox> tuhoojabotti: better... :) and until you are in very alpha phase you can recycle on that version or tag a dev one
15:23 < tuhoojabotti> current version is 0.0.2 :P
15:24 < tuhoojabotti> I think
15:26 < owen1> ansolas: hi
15:27 < ansolas> hi
15:27 < ansolas> did u solved the make issue ?
15:29 < icebox> tuhoojabotti: output with colors is nice
15:30 < tuhoojabotti> icebox: It's just a very quick logger example :P
15:34 < owen1> ansolas: what kind of appps have u done with node?
15:37 < icebox> tuhoojabotti: what if I need to customize the output of the channel to stdout as [HH:MM #channel] <nick> text?
15:38 < tuhoojabotti> icebox: You can pipe the channel stream to a stream that formats it
15:38 < icebox> tuhoojabotti: yep... but what is 'ch'?
15:38 < icebox> tuhoojabotti: a stream?
15:38 < tuhoojabotti> it's a stream
15:38 < tuhoojabotti> yes
15:38 < tuhoojabotti> it's plaintext io for the channel
15:38 < tuhoojabotti> PRIVMSG
15:39 < tuhoojabotti> I'll probably add configure to it, so you can get the raw parsed objects too.
15:40 < tuhoojabotti> it's a quick demo, as I said. :P
15:40 < icebox> tuhoojabotti: the message has a user, I think... for instance this message is written by icebox at 17.39
15:41 < tuhoojabotti> Yes, of course.
15:41 < icebox> tuhoojabotti: where did I find those info?
15:41 < icebox> tuhoojabotti: I have only 'ch'
15:42 < tuhoojabotti> you have irc, the client
15:42 < tuhoojabotti> it emits message and message# and query events
15:43 < icebox> tuhoojabotti: ah ok
15:43 < tuhoojabotti> But I'm planning on extending the ch-stream to do more
15:43 < tuhoojabotti> But as I said, very early stage.
15:43 < icebox> tuhoojabotti: so the pipe (just to format a message) should be in the listener of the message and not in the join (in my case)
15:44 < icebox> tuhoojabotti: no problem... I am describing my use case :)
15:44 < tuhoojabotti> icebox: Well, I will change the ch-stream so that it emits objects, not just message strings.
15:44 < tuhoojabotti> then you can add the formatter like so
15:44 < tuhoojabotti> ch.pipe(formatter).pipe(process.stdout)
15:46 < icebox> tuhoojabotti: ok
15:47 < icebox> tuhoojabotti: for instance, with irc-js a working example about I described is the following gist: https://gist.github.com/3804409
15:48 < Ralt> some op: could the channel topic be changed to something including this link? https://github.com/joyent/node/tree/master/doc/api
15:49 < Ralt> at least till the site is back.
15:49 < tuhoojabotti> or the real site
15:49 < tuhoojabotti> http://8.12.44.238/api/
15:49 < icebox> yep... it seems the dns is flickering
15:49 < Ralt> ah nice, didn't know the API
15:50 < Ralt> IP*
15:50 < tuhoojabotti> icebox: That's pretty much similar to my example
15:50 < icebox> tuhoojabotti: yep
15:50 < tuhoojabotti> except mine is more chaining and streaming ;-)
15:54 < cnd> I'm trying to use v8-profiler, but I don't get the profiling panel in node-inspector
15:55 < cnd> anyone been able to make it work?
16:11 < dmilith> http://nodejs.org - rotfl
16:11 < dmilith> ;]
16:11 < yawnt> what's wrong with nodejs?
16:12 < nkuttler> dmilith: your DNS - rotfl
16:12 < dmilith> let's just rotfl without flame ;]
16:13 < SoulRaven> how i modify the original buffer, i quess i found a solution for make a splice method prototype, but i don't know how to replace the original buffer with the new value
16:14 < SoulRaven> var spliceReturn = splice(buff, start, end); spliceReturn is easy to do, but how i modify the buff value when buff is an atribute for method
16:18 < wereHamster> how do I iterate over all keys or values of a Map() ?
16:21 < plato> what's a Map()?
16:22 < wereHamster> http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets
16:26 < Bennit> Hi
16:26 < Bennit> can I ask something about jade here?
16:26 < Bennit> don't find an irc channel dedicated to jade
16:26 < Bennit> can't*
16:26 < plato> bennit: sure, why not
16:27 < Bennit> is there a way to output a jade variable as is: no escaping
16:27 < plato> #express is a pretty good place to ask too
16:27 < Bennit> if I do div= someJadeVar
16:27 < Bennit> it escapes all html in someJadeVar
16:29 < plato> from docs:
16:29 < plato> Code buffered by = is escaped by default for security, however to output unescaped return values you may use !=:
16:29 < plato> p!= aVarContainingMoreHTML
16:29 < Bennit> okay :)
16:29 < Bennit> thanks
16:37 < ansolas> huch node.js site update in progress ?
16:38 < mscdex> node.js rules!
16:38 < Fishrock123> ^
16:39 < ansolas> I <3 Node
16:43 < plato> I used to live on the street and mug pregnant ladies for heroin money. Then I found Node
16:43 < timeturner> ....
16:44 < timeturner> that makes it sound like Node is some superbeing lol
16:45 < plato> have you SEEN those charts of nginx vs apache vs node performance!?
16:45 < plato> :)
16:47 < timeturner> haha yes I have
16:47 < timeturner> definitely a superbeing in that context
16:47 < gildean> why is the site down?
16:48 < timeturner> because apparently they forgot to renew the domain's lease
16:48 < gildean> weak
16:49 < timeturner> actually it's working for me
16:49 < gildean> i'm getting a 504 error
16:50 < timeturner> 8.12.44.238
16:56 < RLa> plato, got graphs with apache's evented worker?
16:56 < RLa> wondering how it compares
16:58 < mscdex> evented worker?
16:58 < mscdex> how does that work with php? :p
16:58 < SoulRaven> i have ideea for splice somesort: http://bin.cakephp.org/view/1207302799
16:58 < RLa> it does not
16:59  * mscdex shakes a fist at cakephp
16:59 < RLa> any sane php deployment uses php-fpm
16:59 < SoulRaven> but i don't know how to overwrite the main obj
17:00 < RLa> hm, can you assign to 'this' at all?
17:00 < mscdex> i thought there was a serious vulnerability with cgi php?
17:00 < SoulRaven> RLa: no
17:00 < SoulRaven> that is the problem, how to right back to "this" a new value
17:01 < RLa> mscdex, which one?
17:01 < SoulRaven> i get "must be Ivalue"
17:01 < mscdex> RLa: i don't remember offhand, i remember hearing about earlier in the year
17:02 < SoulRaven> in node, i get this error: ReferenceError: Invalid left-hand side in assignment
17:03 < plato> 2=1
17:03 < plato> check your if statements maybe for single equals
17:03 < outspan> anyone know what happens in node if you page fault.  it seems like you'd suffer from blocking IO while page is loaded into memory.
17:03 < SoulRaven> plato: this = new Buffer(this, end);
17:03 < plato> SoulRaven: sorry 'this' is like dark voodoo magic to me
17:15 < owen1> anyone went to TenConf (http://maxogden.github.com/tenconf/) or any similar conference where they have a lot of short (10 mintues) talks? i think it's great but havn't seen anything like this.
17:15 < owen1> (and that's why i like ignite)
17:15 < RLa> hm, apache's event mpm is not what one would expect
17:16 < RLa> it just offloads keep-alive connections to dedicate evented thread, otherwise behaves same as worker mpm
17:16 < RLa> i expected it does all io async :)
17:18 < timeturner> what's the disadvantage of async
17:18 < timeturner> performance wise
17:18 < timeturner> doesn't seem like there's any...
17:18 < owen1> timeturner: the package?
17:18 < timeturner> no
17:18 < timeturner> async functions
17:19 < owen1> oh
17:19 < Killswitch> nodejs.org is down
17:19 < Killswitch> 504 Gateway Time-out
17:19 < owen1> Killswitch: didn't renew the domain
17:19 < RLa> Killswitch, it's not, only the domain expired
17:19 < Killswitch> wat
17:19 < owen1> timeturner: i think just geting used to the style of programming
17:19 < timeturner> RLa: it's working for me
17:19 < Fishrock123> timeturner: I think only that you don;t know when you are going to get the data?
17:19 < Killswitch> How does that even happen?!
17:19 < timeturner> Fishrock123: after a while it becomes natural though
17:19 < owen1> Killswitch: not reading expiration emails from namecheap?
17:19 < RLa> timeturner, Gateway time-out here :/
17:20 < timeturner> like writing sync code is weird for me now
17:20 < spion> yeah 10 minutes ago it had a banner from the domain company
17:20 < Fishrock123> timeturner: (I don;t have a problem with it, i just can't thin about any other drawbacks, if that is even a drawback.)
17:20 < Killswitch> owen1: I was gonna say, Namecheap annoys me so much with emails, I end up renewing domains I don't want, just so they stop.
17:20 < timeturner> nodejs.org server ip -> 8.12.44.238
17:20 < owen1> Killswitch: btw, works on my laptope
17:21 < timeturner> Fishrock123: haha, yeah I'm in the same boat
17:23 < Akuma_KHI> abc
17:25 < SoulRaven> how fu... splice a buffer:((
17:30 < Akuma_KHI> test
17:37 < mscdex> Akuma_KHI: test successful!
17:43 < owen1> what is the default folder where all the -g packages are installed on mac?
17:44 < mscdex> owen1: probably a subdirectory within the npm installation or something
17:44 < SoulRaven> splice for buffer, how to make something like this?
17:44 < mscdex> or ~/.npm maybe
17:45 < owen1> mscdex: i am asking it since i use nvm at the moment, but i write a blog post for the common usecase.
17:46 < mscdex> oh
17:47 < stephank> Gosh, what a pain, deploying to multiple servers, had to work around all node-gyp builds failing. :(
17:49 < mscdex> stephank: why not deploy your node_modules folder?
17:51 < stephank> mscdex: We still neat to implement that in our tooling. Right now, we deploy from a frequently changing git branch.
17:59 <@isaacs> hey, folks
17:59 <@isaacs> nodejs.org should be back up
17:59 <@isaacs> flush your dns caches
17:59 <@isaacs> if you're using chrome, restart it (it caches dns records forever)
18:00 <@isaacs> well, not "forever" exactly, but longer than their stated TTLs in many cases.
18:00 <@isaacs> the emails were going to an unchecked inbox.
18:00 <@isaacs> it happens.
18:01 < chapel> it worked for me :)
18:01 < chapel> but then again I didn't look at the site while it was messed up
18:02 <@isaacs> chapel: yeah
18:02 <@isaacs> DNS punishes you for refreshing repeatedly waiting for it to come back
18:02 <@isaacs> that makes it so that you're the *last* to see it fixed (and so is everyone around you)
18:03 <@isaacs> SoulRaven: There is no "splice" function for buffers.
18:03 < chapel> I read about it but it was fixed already
18:03 <@isaacs> SoulRaven: there is a "slice" function to have another view of the same data.
18:04 <@isaacs> SoulRaven: a buffer is a contiguous block of memory.  managing a "splice" mechanism would make ti more complicated.
18:04 <@isaacs> SoulRaven: since then you could do buff.splice(start, end, newBytes)
18:04 <@isaacs> SoulRaven: and newBytes could be longer than the space allotted.
18:04 <@isaacs> SoulRaven: so it'd have to do some math for every buff[n] lookup
18:05 <@isaacs> SoulRaven: and it's not just a single pointer to some contiguous memory any more, it's an array of pointers to different places in memory
18:05 <@isaacs> SoulRaven: does that answer your question?
18:07 < john999> Hey everyone, I just started working with passport.js and would like to confirm that I understand something correctly. Please tell me if this is correct:
18:08 < john999> UserSerialize is used to map a sessionID with a userID so when a request is made by the same sessionID the userID is used through UserDeserialize to fetch the User object from some database and attach it to the request object-> req.user
18:08 < john999> In other words: the whole point of UserSerialize and UserDeserialize is that your application doesn't need to keep in memory a map of sessionId={User} and only fetch it when a request is made.
18:12 < SoulRaven> @isaacs: i undestand what you say, but my think is on somethink like array_splice from php, that return a selection from an array, and in the same time modify the array with the new offset from the selection
18:14 < timeturner> any way to prevent against DDOS attacks via http?
18:14 < SoulRaven> @isaacs: and also i think somethink like this si good to have when deal with buffer and binary protocols
18:15 < timeturner> or do I have to keep track of all ips in an array and block the ip manually after x attempts in n seconds?
18:15 < SoulRaven> @isaacs: is more easy to read from a buffer, only when i have to know the length of the read
18:15 <@isaacs> SoulRaven: But buffers aren't arrays.  you can turn them into an array pretty easily
18:16 <@isaacs> SoulRaven: 'splice' doesn't make sense for buffers, unless you are going to create a whole new buffer with the results.
18:16 <@isaacs> SoulRaven: but you can't do that in a zero-copy way
18:16 <@isaacs> SoulRaven: which you can with slice(), since it doesn't modify the data's shape
18:17 < SoulRaven> @isaacs: but with slice, always i have to knoe the start and end, avery new nead to shift the start with end from the last slice
18:18 <@isaacs> SoulRaven: but like, consider this: a=new Buffer(10); b = new Buffer(5); c=a.slice(0,5); a.splice(3,5,b)
18:18 <@isaacs> so, now, a.length === 12
18:18 <@isaacs> if i modify b[0], then does that modify a[3]?
18:19 <@isaacs> if so, then if i modify b[4], that would modify a[7]
18:19 <@isaacs> and does that modify c?
18:19 <@isaacs> it gets very very very complicated.
18:19 <@isaacs> because the c slice goes over the bytes that were spliced.
18:19 <@isaacs> and now all your assumptions are violated.
18:20 <@isaacs> if you want to create a whole new buffer, then you can do that.  b=new Buffer(newLength); a.copy(b,...) etc.
18:21 < SoulRaven> @isaacs: the ideea is like that: buffer <00 00 00 00 01 02 03 04> if i do buff.splice(0, 4) return to me buff <00 00 00 00> and modify the original buffer to buff<01 02 03 04>
18:21 <@isaacs> SoulRaven: but that's not what splice does... splice lets you *insert* data
18:22 <@isaacs> SoulRaven: you can already do that easily: a=buff.slice(0,4);buf=buf.slice(4)
18:22 <@isaacs> s/buf/buff/
18:22 <@isaacs> SoulRaven: what happens if you splice out of the middle, though
18:22 < SoulRaven> @isaacs: and next time when i do buff.splice(0, 2) i get buff <01 02> and the main buffer has buff<03 04>
18:22 <@isaacs> SoulRaven: thing about that
18:22 <@isaacs> SoulRaven: buff.splice(1,3)
18:22 <@isaacs> now the result would be [buf[0],buf[3],buf[4]]
18:23 < SoulRaven> 0 remains and start from index 4
18:23 < SoulRaven> yes, thats the ideea
18:23 <@isaacs> SoulRaven: buffers are contiguous blocks of data.
18:23 <@isaacs> SoulRaven: and slice is zer-copy
18:23 <@isaacs> *zero-copy
18:23 <@isaacs> SoulRaven: zero-copy splice means a different sort of data structure.
18:23 <@isaacs> SoulRaven: buffers have to then be trees.
18:24 <@isaacs> instead of just a pointer and length
18:24 < SoulRaven> and how i make this work, a work around
18:25 <@isaacs> so what i'm saying is, node buffers will probably never have this, it's not just "i don't wanna".  it's because the data structure is not the sort of thing that allows that behavior in a fast efficient way
18:25 < txdv_> I used to think, damn those streaming json parsers
18:25 < txdv_> now I think exactly the opposite
18:25 < SoulRaven> because i quess that will never be in node
18:25 <@isaacs> SoulRaven: you could write a function that takes an input, start, end, and insert buffer, and return a new buffer with new data
18:26 <@isaacs> SoulRaven: but you will either have to do copies, or have a data structure very different from a buffer
18:26 <@isaacs> SoulRaven: even if it presents a similar api, you won't be able to pass it unmodified to fs.write()/etc.
18:26 < SoulRaven> i have try somethink like this, but i don't know how to modify the this obj: Modifying the new buffer slice will modify memory in the original buffer!
18:27 <@isaacs> SoulRaven: right, but if you're changing the length, or splicing out of the middle, then it's impossible without a copy
18:27 < SoulRaven> http://bin.cakephp.org/view/1207302799
18:27 <@isaacs> SoulRaven: the right answer is to just create a new buffer of the new length, and then copy whatever wherever it goes
18:28 < SoulRaven> i don't care if i create a new copy of the buffer, i just want to return the buffer shift on the new position from the end parameter
18:34 < chesles> hey guys- is there an easy way to only install the source for a module?
18:35 < chesles> as per http://www.mikealrogers.com/posts/nodemodules-in-git.html, "compiled dependencies should have their source checked in, not the compile targets"
18:36 < chesles> but npm install runs all the build scripts, so it's hard to sort out the compile targets
18:40 <@isaacs> chesles: just put build/* in your .gitignore file
18:41 <@isaacs> er, hrm, that doens't work
18:41 <@isaacs> but putting just `build/*` in there will work
18:41 < SoulRaven> @isaacs: is permited somethink like this: new Buffer(this, 0, length);
18:41 < chesles> ok-
18:41 <@isaacs> SoulRaven: http://nodejs.org/api/buffer.html
18:43 < chesles> @isaacs node-gyp always puts build targets into build/* then?
18:43 <@isaacs> chesles: yes, unless you change the default, but any module author who does that is an untrustworthy jerk.
18:44 <@isaacs> chesles: so you're better off just not using their code :)
18:44 < chesles> @isaacs haha, ok :)
18:44 < SoulRaven> @isaacs: so, way in the sources is somethink like: return new Buffer(this, end - start, +start);
18:44 < chesles> @isaacs i ended up going into the node_modeules/module dir and running `node-gyp clean`, then adding everything to git, the doing npm rebuild
18:44 < TooTallNate> isaacs: it'd be pretty hard i think. "build" is hard-coded all over node-gyp
18:44 <@isaacs> TooTallNate: right
18:44 < TooTallNate> but overall i agree :)
18:44 <@isaacs> TooTallNate: so it'd mean that they're probably also not using node-gyp
18:44 <@isaacs> it was pretty easy to override the default with waf, and always a huge painful awful mess.
18:50 < chesles> OK- adding 'build/*' doesn't work, but just 'build/' does
18:59 < deviantgeek> when i try to access nodejs.org i get a no data recieved error
18:59 < atom_> has anyone else run into problems with the version of NPM that comes with the latest version of Node.js?
18:59 < deviantgeek> or a namecheap domain parking page
18:59 < atom_> deviantgeek, I'm getting the same
18:59 < Fishrock123> deviantgeek: dns propagation.... Just wait a while.
19:00 < Fishrock123> (Afaik)
19:00 < deviantgeek> i hate dns propagation
19:01 -!- isaacs changed the topic of #Node.js to: nodejs.org's DNS is propagating.  Sorry for the inconvenience.  Please go outside and play for a few hours.
19:01 < Fishrock123> ^
19:01 < chesles> try flushing your DNS caches/restarting your browser, etc.
19:01 < chesles> or, take a break :)
19:01 < chesles> https://twitter.com/nodejs/status/252105670193729536
19:02 < atom_> it looks like the version of npm that comes with the current mac version of node.js is old... can someone tell me how to update?
19:03 <@isaacs> atom_: you got npm along with node?  it should be 1.1.63
19:03 <@isaacs> er, 1.1.62
19:03 <@isaacs> atom_: make sure you don't have some other copy getting in the way, ie from homebrew or macports or something
19:04 < deviantgeek> now im getting a 504 gateway timeout
19:04 < atom_> isaacs, can i just delete the version of npm that's in /usr/local/bin?
19:04 < atom_> isaacs, yeah, I got npm with node just now and installed it
19:04 <@isaacs> atom_: node -v ; npm -v
19:04 <@isaacs> atom_: which node ; which npm
19:05 <@isaacs> atom_: run those commands, and paste the output^
19:05 < Fishrock123> deviantgeek: Also the result of dns prop...
19:06 < deviantgeek> great...
19:06 < deviantgeek> just as i need to check some api stuff
19:07 < Fishrock123> *sigh* deviantgeek go to 8.12.44.238
19:07 < deviantgeek> thanks
19:07 < sir_tyrion> Hi, I downloaded the latest tar from the IP site, node.js 0.8.11, and when I do ./configure it says a dependency file can't be found: /deps/http_parser/http_parser.gyp. The directory http_parser exists but it is empty. Help?
19:07 <@isaacs> deviantgeek: sudo -e /etc/hosts and add "8.12.44.238 nodejs.org "
19:07 < atom_> isaacs, It doesn't look like I can run npm at all... even to check version
19:08 < atom_> it yields this: http://pastebin.com/8pV221y0
19:08 < deviantgeek> isaacs: im running windows right now
19:08 < TooTallNate> sir_tyrion: well it shouldn't be empty… maybe you got a bad download
19:08 -!- isaacs changed the topic of #Node.js to: 8.12.44.238 nodejs.org's DNS is propagating.  Sorry for the inconvenience.  Please go outside and play for a few hours.
19:09 <@isaacs> deviantgeek: oh, then i think the file is in something like %windir%\system32\etc\hosts or something?
19:09 < deviantgeek> yeah i think so, thanks for the help
19:09 <@isaacs> deviantgeek: if windows still uses a hosts file
19:09 < aandy> %windir%\system32\drivers\etc\hosts
19:09 < Aria> %windir%\system32\drivers\etc\hosts I believe
19:10 < sir_tyrion> @TooTallNate that was what i think too\
19:11 < sir_tyrion>  
19:11 < sir_tyrion> goign to try and dl the 64bit source code 
19:12 < sir_tyrion> oh that is the binary dl
19:13 < atom_> isaacs, output is: 
19:13 < atom_> v0.8.11
19:13 < atom_> /usr/lib/node_modules/npm/lib/utils/config-defs.js:5
19:13 < atom_>   , stdio = process.binding("stdio")
19:13 < atom_>                     ^
19:13 < atom_> Error: No such module
19:13 < atom_>     at Object.<anonymous> (/usr/lib/node_modules/npm/lib/utils/config-defs.js:5:21)
19:13 < atom_>     at Module._compile (module.js:449:26)
19:13 < atom_>     at Object.Module._extensions..js (module.js:467:10)
19:14 < atom_>     at Module.load (module.js:356:32)
19:14 < atom_>     at Function.Module._load (module.js:312:12)
19:14 < atom_>     at Module.require (module.js:362:17)
19:14 < atom_>     at require (module.js:378:17)
19:14 < atom_>     at Object.<anonymous> (/usr/lib/node_modules/npm/lib/utils/ini.js:43:18)
19:14 < atom_>     at Module._compile (module.js:449:26)
19:14 <@isaacs> atom_: you have an old version of npm
19:14 < atom_>     at Object.Module._extensions..js (module.js:467:10)
19:14 <@isaacs> atom_: very old
19:14 <@isaacs> atom_: rm -rf /usr/local/{lib/,}{node_modules,node,bin,share/man}/{.npm/,}npm* ~/.npm
19:14 < atom_> isaacs, that's what I thought... but I just installed node js
19:15 <@isaacs> atom_: that's not the npm that comes with node 0.8.11
19:15 <@isaacs> atom_: how did you install node?
19:15 <@isaacs> atom_: src, download from nodejs.org, or "other"?
19:15 < atom_> isaacs, I just downloaded the "universal" version from nodejs.org
19:15 < atom_> it was the bin
19:15 <@isaacs> atom_: the pkg installer?
19:15 <@isaacs> atom_: ohhh!!!!!
19:16 <@isaacs> atom_: /usr/lib
19:16 <@isaacs> atom_: not usr/local/lib
19:16 < sir_tyrion> Ok that was weird, dled the source code again and it worked...
19:16 < atom_> isaacs, ah!  any idea how to fix that?
19:16 <@isaacs> atom_: rm -rf /usr/{lib/,}{node_modules,node,bin,share/man}/{.npm/,}npm* ~/.npm
19:16 < sir_tyrion> first time i've had a bad dl of source
19:16 <@isaacs> atom_: then run the installer again
19:16 < atom_> isaacs, I'm not sure what that's doing there... must be something else is using that other version of npm?
19:17 <@isaacs> atom_: you probably installed npm some other way once upon a time
19:18 <@isaacs> i gotta go move my car
19:18 <@isaacs> bbiab
19:21 < atom_> isaacs, that works!  Thank you so much!  That was pretty frustrating.  Very glad to have it fixed!
19:23 < harrydog> is it efficient to have a socket and http server running on the same machine?
19:23 < Aria> Sure.
19:23 < SoulRaven> @isaacs: http://bin.cakephp.org/view/501750894
19:24 < SoulRaven> but still returns the bull length of buffer:(
19:24 < SoulRaven> on this
19:25 < Aria> harrydog: Just have to understand what kind of load you're generating, and adjust accordingly. "efficient' is one thing. "appropriate for your use case" is another entirely.
19:26 < harrydog> okay, I would like to have 100's if not 1000's of people connected to the socket server, and likewise the http will be serving a lot too.
19:26 < Aria> The question there is what bottlenecks you run  into.
19:26 < Aria> CPU? Network? file descriptors?
19:27 < Aria> It'll depend on your server and OS and configuration and use patterns.
19:27 < harrydog> maybe i'll just set them up as 2 different machines, to make life easier. I was going to use joyent
19:28 < Fishrock123> harrydog: ARe you going to be using clusters for each one? If not, you could just set the two processes on separate cores...?
19:30 < harrydog> sounds tricky. you mean like use node.js to spawn new threads, one for each type of server?
19:32 < Aria> Not threads. Separate processes.
19:32 < Aria> Let the OS do the scheduling!
19:33 < harrydog> what does this mean: -bash: node: command not found
19:34 <@ryah> go outside and play? :(
19:34 < harrydog> not linked, never mind, i can figure this one out
19:34 < aandy> harrydog: that the node binary is not in your $PATH
19:34 <@ryah> what is "outside"?
19:35 <@Nexxy> where the ball of radiation in the sky lives
19:35  * Nexxy hissssss
19:35 <@ryah> sounds scary
19:35 <@Nexxy> it is.
19:35 <@ryah> i'll just stay here and keep ctrl^r-ing nodejs.org
19:35 < Aria> while true; do sleep 1; dig nodejs.org; done
19:36 < aandy> speaking of which, how do you check the cache date on a dns response?
19:36 < aandy> i still get 8.12.44.238 just fine
19:37 < harrydog> where does brew install node
19:37 < aandy> harrydog: try # which node
19:37 < harrydog> it returned an empty line
19:38 < aandy> there is a osx installer for node btw, which I suggest you use
19:38 < aandy> harrydog: did you also make install?
19:38 <@ryah> aandy: "dig nodejs.org" 
19:38 <@ryah> nodejs.org.		584	IN	A	199.59.166.108
19:38 < harrydog> i think so, maybe i can remake it
19:39 <@ryah> dig nodejs.org  | grep "^nodejs" | awk '{print $2}'
19:39 <@ryah> :)
19:39 < aandy> ryah: okay, not here :) i use the google dns
19:39 < morficus> haha - love the topic.  but I just came back from playing outside ;-)
19:39 < aandy> ryah: yeah but that wasn't the question :P
19:40 < harrydog> i think i installed multiple versions of node by accident, then tried uninstalling because it was running the wrong version
19:41 < harrydog> ok, used the installer, all good now
19:42 < aandy> harrydog: based on your empty # which node, you're "probably" alright (uninstall wise)
19:46 < harrydog> for version .8.x +, is there an easy way to set / get cookies, or should i write that manually
19:47 < Aria> You can use existing handlers like connect's middleware or express, or write your own
19:47 < Aria> They're just a header to node.
19:49 < harrydog> ok thanks, yeah looking at express  right now, maybe i'll use that
19:51 <@isaacs> harrydog: npm insall cookies
19:51 <@isaacs> harrydog: npmjs.org/cookies
19:52 < harrydog> sweet
19:53 < harrydog> i should read a book on node :| ok thanks all for your help
19:57 < rzsz> Hi, I want to read a large (3 gb) binary file in 8 byte blocks, so that I have callbacks on each finished 8 byte block. Current code: http://pastebin.com/JfNmCskU
19:58 < shanse> use streams
19:58 < mscdex> npmjs.org/omnomnom :-D
20:00 < rzsz> @shanse: Thanks! I'll try it using streams
20:01 < mscdex> rzsz: or move your fs.close() inside the read() callback and use a counter to determine when you're done
20:03 < rzsz> so the buffer is only filled after close?
20:04 < rzsz> the read callback is basically a status indicator to see how many bytes are already read?
20:06 <@isaacs> rzsz: it's a bad idea to read a file in 8byte chunks.  that's a LOT of syscalls
20:07 <@isaacs> rzsz: better to just do something like fs.createReadStream(file).pipe(new BlockStream(8)).on('data', function (chunk) { ... }).on('end', ITSOVER)
20:07 <@isaacs> rzsz: npm install blockstream
20:07 <@isaacs> maybe it's block-stream... i forget
20:07 <@isaacs> yeah, block-stream
20:07 <@isaacs> with the hypehn
20:08 < rzsz> thank you
20:08 <@isaacs> rzsz: if you actually do want to call fs.read() in 8-byte chunks, i think you can set the bufferSize in the fs.readstream o[ptions
20:08 <@isaacs> rzsz: but i don't recommend that.
20:08 <@isaacs> at least, not for normal modern disks
20:08 < jamescarr_> xwhat is the current "blessed" way to use sessions in socket.io?
20:10 < rzsz> I know that 8 bytes are bad but that's my use case ;) I'm only using node to prototype asynchronous disk access. My actual goal is a Java implementation. But I want to evaluate first if it is worth implementing it, using node
20:10 < mscdex> :O
20:10 < mscdex> we don't use that J word in here
20:11 < rzsz> I'm sorry
20:11 < mscdex> :-D
20:11 <@isaacs> rzsz: right, so, you can simulate 8-byte chunks easily in javascriptland
20:11 <@isaacs> rzsz: that's what block-stream does
20:11 < rzsz> Is there any implementation of real async IO on hard disks NOT using a thread pool
20:11 <@isaacs> rzsz: i use it in node-tar so that i get 256-byte chunks
20:11 <@isaacs> rzsz: sorta.
20:11 <@isaacs> rzsz: there's AIO in linux, but i've never known anyone who likes it
20:12 <@isaacs> rzsz: and it's not very portable.
20:12 <@isaacs> not very = not even between linuxes
20:12 < rzsz> mh, okay. are there any performance numbers available about the difference between thread pool and AIO ?
20:13 <@isaacs> rzsz: well, since AIO isn't actually usable, no.
20:13 <@isaacs> rzsz: a thread pool is the way to do async fs io 
20:14 < jmoyers> going to whip up a quick rest client for my company's api today. do people recommend using a 'rest client' library like restler, or just using something like request?
20:15 < mscdex> doesn't Windows have real async file i/o ?
20:31 <@isaacs> mscdex: it has iocp, yes.
20:31 <@isaacs> mscdex: windows is mysterious.
20:32 < mscdex> :-)
20:34 < jamescarr_> argh... how can create and use sessions in socket.io when I am not using an http server?
20:37 < mscdex> jamescarr_: so what are you using socket.io for ? just websocket connections?
20:38 < jamescarr_> pretty much
20:38 < jamescarr_> socket.io connections from remote websites
20:38 < jamescarr_> basically, dropping a js file on other sites and using socket.io to communicate data back and forth
20:41 < rzsz> isaacs: your "block-stream" module works great. Thanks! Is there a way to configure the number of disk io threads nodejs is using?
20:42 < mscdex> jamescarr_: why not just use a websocket module, that way you can handle the sessions yourself?
20:44 < darthdeus> hey guys, anyone workin in Sweden? I need a little advice
20:44 < aandy> darthdeus: advice from people working in sweden or a cultural question?
20:45 < darthdeus> aandy: working in sweden ... because i'm applying for a job in gothenburg, and well ... i have no idea what the average salary for a semi-senior developer could be
20:46 < aandy> ok, then no :)
20:46 < stisti> what's your definition of a "semi-senior developer"?
20:47 < darthdeus> well the position says "senior ruby developer", and i got about 4 years of experience, so i wouldn't really consider myself really senior, but ...
20:47 < stisti> I know some people who know some people... 
20:49 < darthdeus> and they say?
20:51 < stisti> let's see... if they are still online
20:52 < RLa> make sure "semi-senior" isn't work with senior responsibilities with junion salary
20:52 < stisti> kind of funny, by the way, asking about ruby developer salary in #node.js :)
20:53 < darthdeus> well #ruby is dead :)
20:53 < darthdeus> RLa: the position says "senior", it's just that i don't really think i'm like a grandmaster core rails contributor kind of ninja
20:53 < stisti> the guy I asked is a swede but he hasn't lived in sweden for a long time so he didn't want to guess
20:54 < stisti> I'm pretty sure there are salary surveys by local IT labor unions that you can google
20:54 < RLa> salary might depend on location but i doubt that responsibilities are
20:55 < darthdeus> RLa: i'm not looking for an exact number ... but googling basically says anything from 20-100k, which is like ... not really helpful
20:56 < stisti> my friend suggested this: http://www.lonestatistik.se/loner.asp/yrke/Programmerare-1001/lan/Vastra-Gotaland-28
20:58 < stisti> another: http://lonebarometern.idg.se/loner/details/kategori/systemutveckling-3/yrke/programmerare-22
21:01 < darthdeus> sweet that helped
21:22 < Sven_vB> hi
21:30 < Cogito_Ergo_Sum> hi
21:30 < Cogito_Ergo_Sum> are there any plans for an apache mod_nodejs ?
21:30 < Cogito_Ergo_Sum> as in for example replacing php with server side javascript (  through node )
21:32 < Sven_vB> Cogito_Ergo_Sum,  are you sure that's the way you want it? having an independent node environment initialized for every request that comes in?
21:34 < Cogito_Ergo_Sum> well i was thinking that apache as a web server would be a more appropriate choice than a node.js http server
21:34 < ljharb> why?
21:34 < Cogito_Ergo_Sum> more options, better configuration a lot of modules etc etc
21:34 < Sven_vB> what are your requirements for your HTTP server?
21:35 < Sven_vB> by configuration, do you mean vhosts and authentification?
21:35 < Cogito_Ergo_Sum> yeah
21:35 < Cogito_Ergo_Sum> the whole httpd.conf stuff
21:35 < Sven_vB> you could use them with apache's proxy module
21:36 < Cogito_Ergo_Sum> you got me lost there, what does the apache proxy module do?
21:36 < Industrial> you can do vhosts / multiple domains on one ip / x ips easily with node
21:36 < Sven_vB> the apache proxy modules forwards a request to another HTTP server, but only after checking all the things you said in httpd.conf
21:37 < Industrial> ex; https://github.com/substack/mountie
21:37 <@ryah> Cogito_Ergo_Sum: you can proxy from apache to node
21:37 <@ryah> Cogito_Ergo_Sum: no need for node to be built into the apache binary
21:37 <@ryah> node needs its own address space
21:37 < Cogito_Ergo_Sum> Sven_vB it's that i think of node more as a server side language/engine OR as a server side tcp_server, and not as a battle tested full blown production level HTTP daemon
21:37 < Sven_vB> so e.g. if you have LDAP auth set up already, you can use that and give the request with credentials to node
21:38 <@ryah> Cogito_Ergo_Sum: and, it is a battle tested full blown production level HTTP daemon
21:38 < Sven_vB> well you can always set up node as a CGI program like perl
21:38 <@ryah> no.
21:38 < Industrial> xD
21:39 < Sven_vB> of course that would be very inefficient :)
21:40 < Cogito_Ergo_Sum> what i was thinking was that node.js is probably faster than php, so it could replace it as a server-side scripting language but keep the serving htmls/requests guy the same ( apache or nginx )
21:40 <@ryah> Cogito_Ergo_Sum: yep. you want a reverse-proxy
21:40 <@ryah> Cogito_Ergo_Sum: apache modules are a very 2000's way of thinking about web servers
21:41 <@ryah> app servers live outside of the front-end web server process these days
21:41 <@ryah> Cogito_Ergo_Sum: http://httpd.apache.org/docs/2.2/mod/mod_proxy.html
21:42 <@ryah> that's what you want
21:42 < Sven_vB> also, what do you use PHP for? as a template engine to stitch together HTML templates?
21:42 < Cogito_Ergo_Sum> thanks ryah will take a look at it
21:42 < Cogito_Ergo_Sum> Sven_vB no, it's mostly for AJAX requests
21:42 < matomesc> anyone know why nodejs.org is down?
21:42 < Cogito_Ergo_Sum> ajax->php->mysql->html
21:43 <@ryah> matomesc: see topic
21:43 < matomesc> ty
21:44 < Sven_vB> i think there's a step missing, or are you storing HTML in your MySQL DB?
21:45 < aandy> probably he's returning html in his php, based on values from the mysql db
21:45 < Sven_vB> is the missing step just a json_encode?
21:46 < other_guy> can you call .end on an http request object multiple times to make the same request repeatedly?
21:46 < Sven_vB> err, no wait thought a wrong way
21:46 < Cogito_Ergo_Sum> ryah but wouldn't using apache as a proxy for node ( by redirecting internally the requests to the node http server ) be slower than just having apache run javascript scripts internally just as it does with php?
21:47 < aandy> Cogito_Ergo_Sum: why not use nginx + node? why does it have to go through apache?
21:47 < Mouse> Hello all the nice people here.
21:47 < other_guy> Cogito_Ergo_Sum, if you're currently using mod_php with Apache, then you should stop that.
21:48 < fent> for anyone who publishes modules and uses twitter, I just made this https://github.com/fent/npm-bird
21:48 < Cogito_Ergo_Sum> it doesn't matter aandy, wherever $APACHE substitute for a common old web server
21:48 < aandy> Cogito_Ergo_Sum: my suggestion remains the same
21:49 < Cogito_Ergo_Sum> aandy i know that nginx is faster than apache because it has nonblocking connections
21:49 < aandy> if you *have* to use the old webserver for some requests: use nginx to proxy them to the old one, and proxy the server-js to node
21:49 < other_guy> Cogito_Ergo_Sum, apache has both threaded worker and evented mpm modules available.
21:49 < aandy> i'm not even arguing on speed, it's just more simple, less cluttered and better suited for node
21:50 < aandy> and keeps compatability for your old web server
21:50 < other_guy> my concern is your statement of, "just having apache run javascript scripts internally just as it does with php?"
21:50 < other_guy> that is only true if you're using the worst possible method of deploying PHP
21:51 < Industrial> Just found https://github.com/amino/amino .  Anyone have experience with it?
21:51 < Industrial> (right now I'm using mountie/fleet)
21:51 < Mouse> Any kind soul here have a few minutes helping a panicking newbie ?
21:51 < Industrial> Mouse: sure throw it at the pastebin
21:52 < Industrial> or, describe the problem :)
21:52 < Mouse> The problem is about this: https://minebook.me/f#/viewtopic.php?f=56&t=1050
21:54 < Mouse> Well basicly i need a script who can forward TCP connections based on the name it is sent from... and as far as i can see there ... node JS can do this.
21:55 < Mouse> I have a group of Virtual servers, connected to 1 IP adress. and i need to be able to access all individual servers based on subdomains.
21:55 < Cogito_Ergo_Sum> other_guy, my question is not focused on which is better: running php as CGI or php_mod, but on whether any of the previous methods would be better than having a custom "php http server" to which apache redirects, as you suggested doing for node, and the question applies to node
21:55 < Fishrock123> Mouse: So, forward the data?
21:55 < Mouse> yes
21:56 < aandy> Mouse: that code seems to do that. have you tried it?
21:56 < Cogito_Ergo_Sum> and i don't see why mod_php is worse than running it as a cgi btw
21:56 < Mouse> like server1.some-name.org forwards to virtual server1's Ip adress (added in the arrya map)
21:57 < Mouse> Yes, ive tried it on windows 7, Ubuntu 12.04 server and 12.04 client 
21:57 < Mouse> None of them worked.
21:57 < other_guy> because it takes a shitload more memory resources as every new connection Apache handles using the pre-fork mpm will contain a complete copy of the PHP interpreter
21:57 < other_guy> and mod_php isn't save to use with the worker mpm, because it isn't thread-safe
21:58 < other_guy> and the evented mpm is mothballed IIRC
21:58 < aandy> Mouse: what does "none of them worked" mean? which error did you receive?
21:59 < Mouse> im not getting any speciffic error except from when i try to connect (in this case i tried with Mine Craft) the client couldnt connect
21:59 < Mouse> though from what i can see the problem is in parts that is returned as null after the exec of the reg ex
22:00 < Cogito_Ergo_Sum> other_guy but it's kind of faster. anyway, my real question is: wouldn't having a mod_nodejs or apache or nginx calling nodejs as a CGI, be BETTER than having them redirect to a node http server ?
22:00 < Industrial> no, because it would be overhead, regarding just bouncing a request as a simple thing to do for apache.
22:00 < Industrial> nodejs just listens and handles (fast!)
22:01 < Cogito_Ergo_Sum> yeah but an HTTP request takes it time as well
22:01 < other_guy> It's possible that a mod_nodejs would be marginally faster, but I don't really see the point of it considering it's braindead simple to just have it reverse proxy to running node processes
22:02 < Cogito_Ergo_Sum> other_guy in order to avoid the client->nginx/apache server->node http server->nginx/apache->client
22:02 < Mouse> Is it posible that the RegEx is handling it wrong ?
22:02 < Industrial> can't you set up nginx -> node then?
22:03 < other_guy> Just have it write to a file descriptor directly
22:04 < other_guy> I guess it's possible there's some extremely minor performance benefit to building a mod_nodejs
22:04 < aandy> Mouse: i'm not familiar with minecraft, so I'd add some debugging. make sure that the "server name" is actually found (if it's actually sent), as in: console.log(parts): http://pastebin.com/eyE7CMd9 line 22
22:04 < aandy> other_guy: if any
22:05 < Cogito_Ergo_Sum> yeah i don't know
22:05 < Mouse> I did console.log(parts) thats why my theory is that it is there, because it is null
22:05 < other_guy> But it seems to hardly outweigh the constant need to recompile the module for new versions of node, maintain its own set of bugs related to threading or other forms of concurrency, and if you can overwhelm the node.js http server with too many connections in the real world, just throw up an LB and a second cheap machine.
22:06 < Cogito_Ergo_Sum> it's just that using nginx or apache just for it's configuration and then having it port redirect is like using a spaceship to go to the supermarket
22:06 < other_guy> What exactly are you doing that's generating tens of thousands of connections per second?
22:06 < other_guy> And how have you managed to get PHP to handle anything close to that up till now?
22:06 < aandy> Mouse: do you have an example of a buffer which you'd like to have pushed to another server? I assume the server name is in the first packet, when connecting
22:06 < Mouse> is there anyway to extract the name used to connect with and the port number.
22:07 < Cogito_Ergo_Sum> other_guy i haven't managed to choke PHP yet, i am just talking theory 
22:07 < aandy> Cogito_Ergo_Sum: nginx is by no means a spaceship, unless you say apache is the mothership from independence day
22:08 < aandy> server { server_name "something"; location / { proxy_pass http://node_app:port; } }
22:08 < aandy> how is that a spaceship?
22:08 < Cogito_Ergo_Sum> haha aandy
22:09 < Venemo> aandy +1
22:09 < other_guy> aandy, I'd use HAProxy before nginx for this if I had the choice.  It's faster, has a smaller footprint, supports failover better, and doesn't fuck with the requests inappropriately the way nginx can in edge cases.
22:09 < Fishrock123> Mouse: Umm.. no idea. decompiled minecraft server classes can be found here if you need to find what's sending what and exactly how it's sent: https://github.com/Bukkit/mc-dev/tree/master/net/minecraft/server
22:09 < other_guy> I use nginx in a pinch for testing, but I use HAProxy in production.
22:10 < aandy> other_guy: I've lost sight of the original question, but might also look into varnished for piping rather than buffering (which nginx does)
22:10 < Fishrock123> (Sorry my knowledge of how it works isn;t that much. :S)
22:10 < Cogito_Ergo_Sum> aandy, what i compared was apache or nginx as an HTTP server to node as an HTTP server, which is (in my mind_ like comparing a mercedes benz to a lada, i mean apache or nginx having been out there as http servers for years, bugs ironed out etc
22:10 < Cogito_Ergo_Sum> (in my mind)*
22:11 < other_guy> Ладаи have been out there for years too, they just don't fix the bugs :-p
22:11 < Cogito_Ergo_Sum> so using the big guy just to redirect to node seemed to me like a quick and dirty hack of having fast server side javascript
22:11 < kuja> nginx is not exactly a big guy
22:12 < other_guy> shit, or is it Ладаы?
22:12 < aandy> other_guy: any thoughts on pound?
22:12 < Cogito_Ergo_Sum> oh kuja don't be pedantic:P
22:12 < Cogito_Ergo_Sum> you know what i mean
22:13 < aandy> Cogito_Ergo_Sum: i think what you mean is that you don't trust node to handle http requests. so what is it you want to use node for exactly?
22:13 <@Nexxy> the chances of your needing an http server that performs better than what Node.js has to offer are pretty slim
22:13 <@Nexxy> if you use it properly it will be more than sufficient
22:14 < Cogito_Ergo_Sum> aandy, as server side scripting language, getting rid of php in favor of node
22:14 < other_guy> aandy, when I last tested Pound it didn't support persistent connections.  Which was a problem for my use case.  I don't know if that's changed
22:14 <@ryah> Cogito_Ergo_Sum: no, not slower
22:15 < Mouse> my current script looks like pstae
22:15 <@ryah> the bottleneck isn't where you think it is
22:15 < Mouse> pastebin.com/6RsyCHrQ
22:16 < other_guy> ryah, is there a way to make repeated requests with the same httpRequest object?
22:16 <@ryah> Cogito_Ergo_Sum: of course just having browsers hitting node directly will be faster :)
22:16 < aandy> other_guy: how about "piping", can that be done with HAProxy? because i've been looking for a load balancer which can handle that properly (nginx can't, which is why i have to run a node-http-proxy on top of that)
22:16 <@ryah> other_guy: i dont think so
22:16 <@ryah> not sure though
22:16 <@ryah> can't remember how node works
22:16 <@ryah> :)
22:17 <@Nexxy> ROFL
22:17 <@Nexxy> woops caps
22:17 < other_guy> ryah, yeah I've been digging and screwing around with it, but I haven't found a way yet.
22:17 < Cogito_Ergo_Sum> ryah, it's just that as aandy refined it "i would trust apache more to handle http requests and would prefer node as a server side javascript"
22:17 <@ryah> Cogito_Ergo_Sum: node is fine at serving http
22:17 < aandy> Cogito_Ergo_Sum: aren't you looking for cgi then?
22:17 <@ryah> stop with the cgi
22:18 <@ryah> cgi was dead in 1999
22:18 < aandy> ryah: i know, but he's insisting
22:18 <@ryah> it is never coming back
22:18 < kuja> i'm quite comfortable trusting node's unit tests
22:18 <@ryah> Cogito_Ergo_Sum: i think you're worrying too much about it :)
22:18 <@ryah> revisit this when you have a problem
22:18 < Cogito_Ergo_Sum> aandy to me it doesn't matter much, my issue is not mod_php or cgi, my question is: why not eradicate php by offering a server side scripting solution with node, BUT with keep the old and tested apache as HTMLs butler
22:19 < Cogito_Ergo_Sum> but keep*
22:19 < Fishrock123> Because that's silly.
22:19 < other_guy> aandy, it seems to me like "pipe" is just Varnish's lingo for handling persistence
22:19 < other_guy> I'm trying to read about it now.
22:19 <@ryah> i should give a talk on the history of web servers
22:20 <@ryah> hm
22:20 < aandy> other_guy: okay, i might be using the term wrong. what I mean was, for file uploads and such, reverse proxies which buffers the request before sending it to the backend is no good. I prefer to stream the body (or hand over the socket) once the origin has been determined
22:20 < Fishrock123> Cogito_Ergo_Sum: Unless you want to be mucking around with two different language interactions server-side, as well as redirecting requests, why wouldn't you use just node?
22:20 < Cogito_Ergo_Sum> Fishrock123 it's not so silly, it's what happening for years with php, python and all the rest of server side languages
22:21 < kuja> I'm pretty sure people do actually use Twisted for Python to run HTTP servers for asynchronous apps
22:21 < aandy> other_guy: which is what i do in node for a bit more complicated app, but varnished supposedly does this well (for non-https)
22:21 <@ryah> Cogito_Ergo_Sum: python and php all use proxy models now
22:21 < Fishrock123> Cogito_Ergo_Sum: *shrug*, just because it's the usual doesn't mean it's the best.
22:22 <@ryah> the assumption that there is a tried and true way of doing web servers is bad
22:22 <@ryah> this is the cutting edge of web servers
22:22 <@ryah> everything else is old and wrong
22:22 <@ryah> (except go)
22:22 < Cogito_Ergo_Sum> Fishrock123, sure but that doesn't mean that everything new is better :P
22:23 < Cogito_Ergo_Sum> hey please don't take my comments as an offense i'm just loving it talking about this
22:23 < Cogito_Ergo_Sum> and i like node
22:23 <@ryah> nerd offense just means we're having an actual conversation
22:23 < other_guy> aandy, so you're doing content-encoding: chunked to your HTTP server to handle incoming streams?
22:23 < Fishrock123> Cogito_Ergo_Sum: Correct, not everything new is better, but this has evidence of being better, and far more maintainable if I understand what your trying to do.
22:24 < Fishrock123> lol
22:24 < Cogito_Ergo_Sum> ryah i wasn't aware that php runs with a proxy model, thought it's either cgi or mod_php
22:24 < other_guy> and the HTTP server pieces the chunks together?
22:24 < other_guy> and you want a reverse proxy that does that as a passthrough
22:24 <@ryah> Cogito_Ergo_Sum: they ar emoving to that
22:24 <@ryah> http://php.net/manual/en/features.commandline.webserver.php
22:24 < aandy> other_guy: that's how the request comes in. yes
22:24 <@ryah> (using node's http parser)
22:24 < other_guy> rather than compiling the chunks itself and sending them to the backend once completed
22:24 < aandy> right
22:25 < mscdex> node.js rules!
22:25 < Cogito_Ergo_Sum> so as i can see
22:26 < Cogito_Ergo_Sum> node want's to be a complete server side solution: both language and http server
22:26 < Cogito_Ergo_Sum> wants*
22:26 < jmoyers> does npm have a command to automatically update dependencies based on whats installed, like what npm init does when you bootstrap?
22:26 < other_guy> aandy… hmmm.  Well at a bare minimum you could do this with direct TCP proxying using HAProxy
22:27 <@ryah> Cogito_Ergo_Sum: yes, let it
22:27 < other_guy> However I don't know if the HTTP proxy wrapper functionality would work (like all the URL routing stuff, etc.)
22:28 < other_guy> But if what you really want is passthrough, and let node.js handle the details, then yes.  Just don't use the HTTP proxy functionality.  Do a direct TCP proxy.
22:28 < Cogito_Ergo_Sum> ryah, wouldn't it have a FASTER rate of being adapted if it started as a server side scripting language ? I mean who wouldn't love using javascript both in client and in server
22:28 < aandy> other_guy: right, and that would work (in my case). looks promising, reading up on haproxy now. Thanks, other_guy :)
22:29 < Cogito_Ergo_Sum> but having it ask to replace your http server is kind of "with attached strings"
22:29 <@ryah> Cogito_Ergo_Sum: how is it not a server-side scripting language?
22:29 < other_guy> Sure thing
22:29 <@ryah> Cogito_Ergo_Sum: and no. it has rapid adoption because of this model
22:29 < Cogito_Ergo_Sum> i mean mean starting JUST AS server side scripting language
22:29 < other_guy> aandy, we use haproxy with stud here to keep node.js from having to do SSL termination, because it's miserably slow at it.
22:30 < other_guy> so if you need SSL termination, that might be a good way to go
22:30 <@ryah> if node was tied into apache it would be a bitch to get running
22:30 <@ryah> and only be good for basic web apps
22:31 < Cogito_Ergo_Sum> only good for basic web apps why? php also has sockets and file access
22:31 <@ryah> other_guy: hopefully that's going to be fixed in the next few releases
22:31 < other_guy> ryah, yes I know, but I can't go to production with hopes :-)
22:31 < other_guy> :-p
22:32 <@ryah> other_guy: you might want to try out tlsnappy https://github.com/indutny/tlsnappy/blob/master/benchmark/index.md
22:33 < aandy> other_guy: btw, if you're interested, this is the varnished solution i was referring to (just found it)
22:33 <@ryah> Cogito_Ergo_Sum: what's the benifit of having it built into apache?
22:33 <@ryah> do you even know what it means to be a "mod_" something?
22:33 <@ryah> *benefit
22:34 < other_guy> ryah, thanks checking it out
22:34 < aandy> other_guy: the return (pipe) part. the rest is about websockets. just to show what i meant by pipe ;)
22:34 < garrettwilkin> ryah: so you're not working on node core as much as you used to.  is that right?  what are you working on now?
22:34 < other_guy> aandy, sling it over :-)
22:34 <@ryah> garrettwilkin: not at all - not for 6 months now
22:34 <@ryah> garrettwilkin: secret project
22:34 < other_guy> making an evented BASIC?
22:34 < garrettwilkin> bah!  secret!  when will you unveil it?
22:34 < other_guy> or COBOL?
22:35 < aandy> we can keep a secret
22:35 < Cogito_Ergo_Sum> yes we are a family
22:35 < Cogito_Ergo_Sum> do share
22:35 < Cogito_Ergo_Sum> no secrets among the family members right?
22:36 < other_guy> ryah, are you still with Joyent?  I just got done doing a big batch of node.js REST API and Riak testing on a bunch of IaaS providers… Joyent included.
22:36 < aandy> some, not a lot
22:36 < garrettwilkin> other_guy: what did you use to build your REST API?
22:36 < other_guy> express.js
22:36 < garrettwilkin> did you use a module or a framework?  
22:36 < garrettwilkin> oh okay
22:36 < other_guy> with all the templating shit removed
22:36 < aandy> other_guy: if it's just rest api, you could've used restify
22:37 < aandy> which is exactly that
22:37 < garrettwilkin> other_guy: i haven't used express yet.  flatiron is the only framework i've used
22:37 < other_guy> aandy, restify was significantly slower when the project started
22:37 < other_guy> I think that's been rectified now though
22:37 < garrettwilkin> i haven't' tried restify either, but i thought it was pretty simply to write the API with flatiron's director
22:37 < aandy> okay. i've only used it for minor proof of concepts, just thought i'd mention it :)
22:38 <@Nexxy> other_guy, how is teh riak client?
22:38 < Cogito_Ergo_Sum> other_guy: he probably is working on evented ASM
22:39 < other_guy> Nexxy, good.  I just spent a week gutting the streaming mechanism to add some flexibility to the API.  I'm pushing out 0.0.7 tonight with more complete docs on the basic functionality and updates to the docs for the API changes.
22:40 < other_guy> I'm replacing the auto-retry mechanism right now to reduce memory usage and allow for end-user configurability
22:40 < other_guy> hence my questions about httpRequest object reuse, which appears impossible, and is highly annoying.
22:43 <@Nexxy> other_guy, very cool
22:44 <@Nexxy> other_guy, are you still having trouble with JS tombstones?
22:44 <@Nexxy> or, is Riak I should say
22:46 < other_guy> Riak does, but I solved the biggest problem with delete requests, which is node.js wrongly sends a "0" body and transfer-encoding: chunked on DELETE operations
22:46 < other_guy> causing connection persistence to barf
22:46 < other_guy> the fix was to manually force DELETE requests to have a content-length: 0 and to unset the transfer-encoding
22:47 <@Nexxy> lol
22:47 <@Nexxy> interesting
22:47 < other_guy> yeah, I had to dig into the Mochiweb code with one of the basho guys to sort that out
22:48 <@Nexxy> hey at least you got them to look at something important to you!
22:48 <@Nexxy> that's a success story
22:48 < other_guy> :-) I keep inviting Mark to play golf, I think that's the only reason
22:49 < other_guy> oh, and I took Casey to lunch
22:49 <@Nexxy> and here all I can offer is a trip to Casa
22:49 <@Nexxy> el oh el
22:55 <@Nexxy> other_guy, can you link me to your client when you have a chance?
22:55 < other_guy> Nexxy
22:55 < other_guy> https://github.com/Coradine/nodiak
22:56 <@Nexxy> that's it, lol
22:56 <@Nexxy> I knew it reminded me of a bear for some reason
22:56 < other_guy> bearing in mind that there are some changes coming to the mapred, search, and bulk-GET/DELETE/PUT operations
22:56 <@Nexxy> oh ho ho
22:57 < other_guy> basically before you used to have to pass in a flag to tell it you wanted streamed results
22:57 < other_guy> now you simply don't pass in a callback, and then do .stream(callback); at the end
22:58 <@Nexxy> very good
22:58 < other_guy> so like riak.bucket('test').objects.get(['key1', 'key2', 'key3']).stream(function(results) {});
22:58 < other_guy> and then in the stream callback you assign your listeners
22:59 < other_guy> it's the best way I could come up with to deal with the psuedo-streamy way Riak handles that shit
22:59 <@Nexxy> ah huh.
22:59 < other_guy> because generic stream operations on say a whole bucket don't really make any sense.
22:59 <@Nexxy> I hope to have time to spend on riak again soon
23:00 < other_guy> like bucket.on('get', whatever);
23:00 < other_guy> or bucket.on('delete', whatever);
23:00 <@Nexxy> that could be useful
23:00 < other_guy> doesn't make much sense, because you almost always want to know the context of where those requests came from
23:00 < other_guy> yeah I'm going to build a stream-only API over the top of nodiak for that sort of thing
23:01 < other_guy> I just didn't want it in the primary client, since it's a really niche case to not care at all about why a Riak operation happened or where it originated
23:01 < other_guy> and to just care about piping data in
23:02 < other_guy> A lot of people are still using riak-js, but I'm hoping to change that.  If for no other reason than it's WAY, WAY, WAY slower than nodiak
23:03 <@Nexxy> and
23:03 <@Nexxy> written in coffeescript ._.
23:03 < other_guy> well there's a js-pure branch
23:03 < other_guy> but it's poorly written at the moment
23:03 <@Nexxy> and way too complicated
23:03 < other_guy> yeah… I think his whole concept of "Meta" is retarded
23:04 < other_guy> I wanted nodiak's concepts to mirror the riak-ruby, riak-python, and riak-erlang clients more
23:05 < other_guy> I do like some of the declarative query sugar he created for riak-js, but conceptually only, because it depends on underlying cluster operations that you should NEVER, EVER use in production.
23:06 < other_guy> which is my other problem with it, it actually encourages bad practices because so much of the convenience and sugar is centered around doing things you shouldn't do.
23:06 <@Nexxy> like key listing?
23:06 < other_guy> anyway.
23:06 < other_guy> yeah
23:06 <@Nexxy> pfff
23:06 < other_guy> and ad-hoc MapReduce
23:06 < other_guy> in that some of the sugar depends on ad-hoc MR functions
23:07 < other_guy> which is bad
23:07 < other_guy> ad-hoc MapReduce should be for testing only
23:07 < other_guy> but the API exposed by riak-js encourages using it generally
23:07 < other_guy> without even telling you that's what you're doing :=/
23:08 <@Nexxy> other_guy, ad-hoc?
23:09 <@Nexxy> doesn't riak cache your MR queries though?
23:09 < other_guy> like when you define your MR functions inline in your code rather than having them deployed in your cluster and calling them like stored procedures
23:09 <@Nexxy> right
23:09 <@Nexxy> riak still stores them
23:09 <@Nexxy> IIRC
23:10 < other_guy> I don't think it caches them, at least not for JS ones… though that's another thing… you probably shouldn't be using JS for those queries at all… though I blame Basho more for that issue.
23:11 <@Nexxy> so you're writing all of your MR queries in erlang?
23:11 < other_guy> It's a neat feature that you can use JS for MapReduce, but it's a blocking operation in the Riak core to interact with the JS VM's, they get easily overwhelmed, and they suck up valuable RAM just sitting there (made worse by when you create more of them to keep them from being overwhelmed)
23:11 < other_guy> yeah
23:11 < other_guy> Erlang
23:12 < other_guy> in my free time I've been playing around with Pipe to support other languages for MR though
23:12 < other_guy> well to support basically any UNIX process for handling the processing so long as you can marshal the data to it
23:13 < other_guy> So I've got a version that passes most of the tests doing MapReduce in Ruby
23:14 < other_guy> I didn't pick Ruby for any good reason, FWIW
23:17 <@Nexxy> other_guy, no one ever does
23:17 <@Nexxy> bazinga
23:17 < other_guy> lol
23:18 < other_guy> I just happened to be working with our internal Chef message bus engine at the time… so I was in "Ruby-mode"
23:23 <@Nexxy> excuses excuses
23:24 < _Tristan> ah, propagation, the long, dark tea time of the internet.
23:25 < _Tristan> the website is actually running very quickly, it must not be under much load...
23:31 < icebox2> tuhoojabotti: ping
23:32 < tuhoojabotti> icebox2: pong
23:32 < tuhoojabotti> Watching a movie, can't talk 
23:32 < icebox2> tuhoojabotti: hey... I implemented a simple console irc client with your module. Very nice
23:34 < icebox2> tuhoojabotti: ok... see you tomorrow... give a look https://gist.github.com/3805420
23:47 < other_guy> God this is retarded
23:47 < Guest_1448> can I update jade separately from express or will that cause problems?
23:48 < Guest_1448> still using express 2.x but want to update to jade latest
23:48 < other_guy> I'd just like to point out that not allowing httpRequest object reuse forces you into one of two shitty design decisions
23:48 < other_guy> You either waste memory by nesting request objects inside each other's stacks for retries
23:48 < Guest_1448> other_guy: it automatically reuses it?
23:49 < other_guy> or you have to push the retry concern up a level
23:49 < other_guy> mucking up code that shouldn't have to know anything about the retry logic
23:49 < other_guy> Guest_1448, the agent reuses sockets
23:49 < Guest_1448> oh right
23:50 < other_guy> but once you've called req.end() that's it, you can't use it again or call .end() again.
--- Log closed Sun Sep 30 00:00:43 2012
