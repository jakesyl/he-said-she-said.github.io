--- Log opened Thu Nov 15 00:00:10 2012
00:04 < MI6> joyent/libuv: Ben Noordhuis master * c252bcb : bench: fix loop starvation bug  Don't keep writing until the write queue  - http://git.io/0Y29_Q
00:05 < samholmes> is there a good package manager for git bash?
00:05 < EhevuTov> samholmes, I'm not sure if git bash allows you to connect fully to mingw in order to use their package system
00:06 < samholmes> Is mingw better than git bash?
00:07 < EhevuTov> I think I had to install MinGW separately in order to fully utilize its package system, by also modifying some PATH envars
00:07 < slickplaid> Is there any way, in a node module, to detect if Express has been used as a router (say as a drop-in replacement for a lib) so it can handle some of the quirks of it? Hopefully that made sense :X
00:08 < EhevuTov> samholmes, it depends on what you're trying to do I guess. I don't know the technicals, but mingw should work as a git bash if you setup your environment variables, I'd think
00:08 < tnorris> TooTallNate: sorry. too many bug tabs open. meant to ask about 624. honestly don't see the need for discussed functionality.
00:09 < samholmes> EhevuTov: I'm trying to get the power of bash in windows. PowerShell just doesn't cut it. I like bash, it feels more powerful.
00:09 < othiym23> PowerShell is ridiculously powerful, but it's also nearly incomprehensible (to me, at least)
00:09 < aettinger> samholmes: use a mac
00:09 < samholmes> aettinger: give me $1200
00:09 < Sly> lol.
00:09 < Sly> samholmes: I know the feeling.
00:10 < othiym23> slickplaid: you'd probably have to figure out how to feature-test for something that's distinctive to Express
00:10 < samholmes> Sly: sigh.. -.-
00:10 < aettinger> there used to be a gnu shell package you could install for windows. But i foget what it was called
00:10 < aettinger> cywgin
00:10 < aettinger> http://www.cygwin.com/
00:10 < othiym23> slickplaid: can't think of anything meaningful off the top of my head, because most of the visible specialness of Express has to do with how it extends the Request and Response classes
00:10 < EhevuTov> cygwin is a shim while mingw is native IIRC
00:10 < aettinger> samholmes: its worth every penny, trust me
00:11 < samholmes> If anyone is willing to donate to my macbook fund here my bitcoin address: 1L8dc6kvzr37bvvtSoPnFJyfWyvqQx4vnz
00:11 < othiym23> EhevuTov: maybe slightly less
00:11 < samholmes> XD
00:11 < EhevuTov> If you're working with node in Windows, I'd suggest Mingw and then use node-gyp for any addon compiling
00:11 < aettinger> samholmes: you can get one for $1000 too
00:12 < aettinger> gotta run, bbl
00:12 < samholmes> aettinger: Right, the 11 inch MBA
00:12 < samholmes> but 13 inch is more my speed.
00:12 < aettinger> i thought the macbook pro was $1000
00:12 < aettinger> the 13"
00:12 < aettinger> maybe i'm wrong
00:12 < EhevuTov> I have Macbook Air 13" and it's the best computer tool I've ever purchased
00:12 < aettinger> i have the 15" pro
00:12 < EhevuTov> i'm not an Apple fanboi
00:12 < aettinger> like the extra screen and bigger keybaord
00:12 < slickplaid> othiym23: Yeah, that's what I was thinking, too. AppJS can take Express as a drop-in replacement for it's routing, but when it transfers control, it passes the 'http://appjs' to the request url, causing Express to handle it as a route to '/http://appjs/' for a route to '/'. Can't figure out a good way to do it with autodetection, since flatiron, et al can be dropped in there, too.
00:13 < aettinger> i like it because it simply works
00:13 < Sly> I was using a Windows 8 machine for the past 2 weeks, until it decided to remove all of my shit because of a WINDOWS PROGRAM not opening as it should have.
00:13 < slickplaid> on the client's code, you can simply regex it out and make it work... but it'd be nice if the lib took care of that for you
00:13  * Sly took it back today and got a 13" MBP.
00:13 < EhevuTov> Sly, wow
00:13 < Sly> Indeed.
00:15 < Sly> First time using a Mac in like.. 8 years. lulz
00:16 < Sly> Takes getting used to, for sure.
00:17 < EhevuTov> Sly, it's my first Apple product. I can code in my shell and that's about it :-) Not that familiar with hotkeys yet. Heaven help me if I have a tech problem
00:17 < Sly> lol, EhevuTov.
00:17 < Sly> With as many Mac users that are on Freenode, let alone this channel, I'm sure you can find help.
00:18 < EhevuTov> oh yeah, I'm not worried, really. I get worried about looking like a doofus when presenting though and don't know screen +/- hotkeys and the like
00:19 < Sly> rofl
00:19 < EhevuTov> like, I literally feel like how my parents feel when they use a computer. I haven't felt that way for decades
00:19 < Sly> I had to ask how to page down earlier.
00:19 < Sly> Don't feel bad.
00:19 < EhevuTov> how do you do that
00:19 < Sly> Fn + Down arrow
00:20 < Sly> If you're in something like `man`, it's fn+opt+down
00:20 < EhevuTov> ballin'
00:21 < EhevuTov> sly, hrm, that doesn't work for me right. Maybe cause I'm in tmux
00:21 < Sly> Dunno. Works for me.
00:21 < Sly> >_>
00:30 < SomeoneWeird> can't figure out how to encrypt something with a private key i got from diffiehellman, anyone help?
00:42 < tnorris> is HTTPS still considered "slow"?
00:43 < EhevuTov> Sly, you say that it works for you when using tmux?
00:43 < nlf> tnorris: in what situation?
00:43 < Sly> EhevuTov: I'm not sure what terminal I'm using, to be honest.
00:43 < Sly> It's the stock one.
00:43 < nlf> a node server listening on https is fine for a several hundred connections
00:43 < Sly> I literally just got this system today. :P
00:43 < tnorris> nlf: not sure. just checking if https://github.com/joyent/node/issues/868 could be cleaned up.
00:43 < nlf> once you get into the thousands it starts to choke
00:43 < EhevuTov> ah, i use the stock one and then run 'tmux' which is terminal multiplexer
00:44 < EhevuTov> nlf, concurrent connections?
00:44 < nlf> yeah
00:44 < EhevuTov> I'd think so. That's a lot of decrypt stuff right?
00:44 < nlf> yup, sure is
00:44 < nlf> and most of that is synchronous
00:45 < nlf> if you're doing it in production, use stud or haproxy or something to handle the SSL endpoint, then reverse proxy to your app on http
00:45 < EhevuTov> cool, I'll keep that in mind
00:45 < tnorris> nlf: so is "slower than nginx" good enough to consider https slow?
00:46 < nlf> hard to say, "slow" is subjective
00:47 < tnorris> at least, that seems to be the benchmark commonly used in comparison.
00:47 < tnorris> yeah...
00:47 < nlf> benchmark apache against nginx, now is apache "slow" ?
00:48 < nlf> i completely agree that the original issue was a problem
00:48 < bnoordhuis> nlf: yes. i say that as someone who worked on apache
00:48 < nlf> 100x slower is definitely too slow
00:49 < nlf> crypto is definitely a bottleneck
00:50 < othiym23> bnoordhuis: has there been any progress in coming up with a solution to the SSL / TLS session cache issue with Node?
00:51 < bnoordhuis> othiym23: you mean in a clustered setup?
00:51 < othiym23> yeah
00:52 < bnoordhuis> othiym23: the answer is both yes and no
00:52 < othiym23> that's how stud gets its performance advantage over Node's native SSL support, right?
00:52 < bnoordhuis> fedor did some work on it but it's pending proper shared memory support
00:54 < othiym23> ah, I got the impression that he was working on decreasing the overall overhead of setting up SSL connections
00:54 < bnoordhuis> yeah, that too
00:54 < othiym23> if node had shared memory support, there's all kinds of twisted stuff I could do with it ;)
00:54 < bnoordhuis> some of it landed, i think
00:55 < Hotroot> othiym23: What SSL issue?
01:02 < pellepelle3> if any one can give us some feedback http://nodeknockout.com/teams/etc-node-dev-team
01:02 < othiym23> Hotroot: Node is slow at dealing with SSL connections, and if you use multiple Node instances with SSL, performance gets even worse
01:03 < EhevuTov> pellepelle3, cool. Reminds me of a fishbone diagram
01:03 < pellepelle3> lol aight 
01:04 < EhevuTov> pellepelle3, maybe something to do in the future would be to condense on zooming out. Similar to redfin map drill down for homes
01:05 < EhevuTov> pellepelle3, also, I can't read all the text in the bottom right div. i have to expand the chrome window.
01:06 < EhevuTov> pellepelle3, our div id=leaderboard
01:06 < pellepelle3> yeha i know i built it in 1 a day and a half for the node knock out hackaton they won't let use fix it till next week when the voting is over
01:08 < pellepelle3>  EhevuTov, i built it on a 1080p screen so didn't see the it when on a smaller res till the day after
01:09 < EhevuTov> pellepelle3, oh ha yeah. Looks pretty fixed. Maybe expand to a new size on hover over if it's an issue
01:10 < pellepelle3> i know how to fix it but have to wait till the competion is over to make the changes 
01:13 < Hotroot> othiym23: Ruh roh. I planned on having my whole site use https. How bad is the slowdown?
01:14 < othiym23> Hotroot: you'll need to benchmark yourself -- fortunately, if you use stud as an SSL terminator, it will address the problem
01:15 < nlf> Hotroot: depends on how many simultaneous users you expect
01:15 < Hotroot> Hmm
01:15 < Hotroot> nlf: Not many. It's my first web app.
01:16 < nlf> i wouldn't worry about it too much
01:16 < Hotroot> Likely never more than 100
01:16 < nlf> yeah, you'll be fine
01:16 < Hotroot> othiym23: So, with redis, how do I have multiple db's?
01:16 < superjoe> whoa, that is a crazy question
01:17 < nlf> Hotroot: best way? run multiple instances of redis
01:17 < nlf> it has 16 databases you can use with the select command built in
01:17 < superjoe> oh, I see
01:17 < Hotroot> Hmm
01:17 < nlf> but you have to account for things like making sure to select the right index on reconnects
01:17 < nlf> or you end up stomping your data
01:17 < Hotroot> Kind of weird. What's wrong with names?
01:17 < nlf> best solution is either namespace your data and use one database, or use separate instances of redis
01:19 < Hotroot> nlf: So are you saying like mutliple redis-server processes?
01:19 < nlf> Hotroot: yup
01:19 < Hotroot> And each app connects to a different one, and then just SELECT 0's or whatever
01:19 < Hotroot> In that case, it doesn't really matter which it connects to, right?
01:20 < nlf> yup, you just run them on different ports and set each app to connect to the right redis port
01:20 < nlf> then you don't have to worry about your selects
01:20 < Hotroot> nlf: Kk. Still, even if you mixed up the ports, all the processes are exactly the same, right?
01:21 < nlf> no no no, you'd give them all different data directories
01:21 < Hotroot> 0.o
01:21 < nlf> they'd be completely isolated from each other
01:21 < othiym23> Hotroot: I'd probably just namespace my keys
01:21 < Hotroot> Hmm
01:21 < othiym23> or if I wanted to manage the "databases" indepdently, use separate instances of Redis
01:21 < nlf> bingo
01:22 < nlf> namespacing is the easy solution
01:22 < nlf> separate redis instances is the "proper" solution
01:22 < Hotroot> Where is the DB stored?
01:22 < othiym23> I feel like if you're asking about multiple databases in Redis you're still sort of wrapping your head around Redis ;)
01:23 < sinclair> can someone help me understand the second parameter in mongoose.createConnection()
01:23 < othiym23> the DB is stored in RAM, the append-only log, and in an on-disk snapshot
01:23 < sinclair> the first parameter is the host, the second is 'test'
01:23 < sinclair> what does that mean?
01:23 < Hotroot> othiym23: Okay, where is the log and snapshot stored?
01:25 < othiym23> Hotroot: the locations are controlled via configuration variables, and you can disable one or both of them
01:26 < Hotroot> othiym23: What I'm trying to figure out is how you would do separate instances then
01:26 < othiym23> I believe the default is to snapshot Redis's keyspace once per minute and to not create an append-only log, and to store the dump in whatever directory you launched redis-server from
01:26 < Hotroot> Doesn't matter for now I guess, only one app for now, and I can just namespace
01:26 < othiym23> Hotroot: each instance would have its own configuration
01:26 < othiym23> so it'd be up to you to figure out how all that stuff gets laid out on disk
01:26 < Hotroot> Kk
01:29 < samholmes> What does it seem like dates are always a pain in the butt
01:29 < kingkaeru> i'm running into an odd issue with require() caching and was hoping someone here had intimate knowledge of the function
01:30 < ChrisPartridge> samholmes: because in JS, they do :P
01:30 < kingkaeru> i havent quite isolated the problem yet
01:30 < ChrisPartridge> kingkaeru: Yes, the module is only loaded once
01:30 < kingkaeru> basically when i run an app (etherpad-lite) from a relative path, all require() calls cache modules properly
01:30 < samholmes> ChrisPartridge: Well, it's not so much how you deal with them in JS, but it's the timezone thing
01:30 < kingkaeru> but when i run it with an absolute path the calls dont cache
01:30 < kingkaeru> e.g.
01:30 < garbagecollectio> can someone look at my code and tell me why someone would call it "hasty"
01:30 < kingkaeru> node.exe absolute/path/to/app.js
01:30 < kingkaeru> vs
01:31 < kingkaeru> node..exe relative/path/to/app.js
01:31 < kingkaeru> app.js doesnt change between the two
01:31 < kingkaeru> but the caching behavior is different
01:31 < othiym23> time is ineffable, samholmes
01:31 < othiym23> it cannot be graped
01:31 < garbagecollectio> http://jsfiddle.net/ahjH3/
01:31 < othiym23> grasped
01:31 < othiym23> I have no idea what "graped" is, but it sounds hella nasty
01:31 < kingkaeru> anyone know if the behavior i'm seeing is as expected?
01:32 < samholmes> othiym23: grapes...grope?
01:32 < samholmes> groped by a grape
01:33 < ChrisPartridge> sounds a bit fruity
01:33 < kingkaeru> ChrisPartridge i'm seeing that the module is loaded multiple times
01:33 < ChrisPartridge> kingkaeru: http://nodejs.org/api/modules.html#modules_module_caching_caveats
01:33 < kingkaeru> ChrisPartridge yeah i read that
01:34 < kingkaeru> but it doesnt go into detail on how paths are resolved
01:34 < kingkaeru> does anyone know which set of files in the source code handles the require() caching?
01:34 < syskk> https://github.com/olalonde/follow-redirects <-- comments?
01:34 < kingkaeru> or is require() handled by v8
01:35 < syskk> no
01:35 < syskk> it's a Node.js thing
01:35 < kingkaeru> syskk: thanks.  do you know wher ei n the code the caching is done?
01:35 < kingkaeru> i'm trying to learn more about how paths are resolved and what conditions cause caching to happen
01:35 < syskk> kingkaeru: in memory.. wait
01:36 < ChrisPartridge> kingkaeru: https://github.com/joyent/node/blob/master/lib/module.js#L323 <-- maybe?
01:36 < syskk> kingkaeru: I think you can find it here: https://github.com/joyent/node/blob/master/lib/module.js
01:37 < kingkaeru> thanks guys.  i'll dig into that
01:37 < syskk> Chris beat me to it
01:37 < ChrisPartridge> syskk: I even gave a line number, that's service ;)
01:37 < sinclair> can someone help me understand the second parameter in mongoose.createConnection()
01:37 < sinclair> the first parameter is the host, the second is 'test'
01:37 < sinclair> what does that mean?
01:38 < ChrisPartridge> db name?
01:38 < ChrisPartridge> (don't use mongoose)
01:38 < sinclair> ChrisPartridge: why?
01:38 < syskk> kingkaeru: more about caching here: http://nodejs.org/api/modules.html#modules_caching
01:38 < ChrisPartridge> i meant, i'm just guessing - i don't use mongoose
01:38 < kingkaeru> thanks syskk
01:38 < sinclair> ChrisPartridge: why not?
01:39 < syskk> mongoose docs are pretty bad
01:39 < kingkaeru> syskk: does it make sense that launching a node app from a relative path vs absolute changes caching behavior?
01:39 < Mer|in> good evening
01:39 < syskk> kingkaeru: yes
01:39 < sinclair> ChrisPartridge: that's a genuine question btw, 
01:39 < syskk> kingkaeru: it's a flaw in the caching algorithm
01:39 < kingkaeru> should i file a bug or is this as designed?
01:39 < syskk> kingkaeru: http://nodejs.org/api/modules.html#modules_module_caching_caveats
01:40 < sinclair> what'w wrong with mongoose?
01:40 < Mer|in> quick question - I'm looking at nodejs to serve as an api around a dot-matrix printer - just want to get a quick feel on how difficult that might be
01:40 < kingkaeru> syskk: that doesnt mention anything about the path of the app
01:40 < syskk> kingkaeru: not sure, but they are aware of this behavior. not sure it's going to change. you should not rely on caching usually
01:40 < sinclair> syskk: do you use mongooose?
01:40 < syskk> sinclair: yes :(
01:40 < sinclair> syskk: why the frown ?
01:40 < ChrisPartridge> sinclair: I didn't mean to suggest anything was wrong with mongoose, I was just guessing what "test" meant in the context, I don't use mongoose at all
01:40 < sinclair> is it bad?
01:41 < sinclair> i actually quite like the Schema types in mongoose
01:41 < Mer|in> need to print individual lines without form feeds, so I'm on the fence on whether to go direct serial i/o or to go through lpd/windows printing system
01:41 < syskk> sinclair: yea, i wish there was a better alternative.. i dont feel its very well designed.. maybe I'll give a try to JugglingDB for next project
01:42 < sinclair> syskk: what does the second param mean in mongoose?
01:42 < syskk> sinclair: I don't know, I don't use it
01:42 < sinclair> in the createConnection method, its the name of the database right
01:42 < sinclair> syskk: umm, i thought you said you did use it?
01:42 < syskk> sinclair: [options] <Object> options to pass to the driver
01:43 < syskk> I just dont use the second parameter … its probably some options you can pass to the mongo driver
01:43 < sinclair> syskk: i don't understand why i can pass anything for that second argument
01:43 < syskk> sinclair: it's optional
01:43 < othiym23> sinclair: why are you using createConnection instead of connect?
01:43 < sinclair> syskk: it complains if i don't pass anything
01:44 < sinclair> othiym23: im a beginner, beginners do stuff like that (or what the examples tell them to do at least)
01:44 < sinclair> othiym23: you use mongoose?
01:44 < georgie_> sinclair: he's suggesting you try connect rather than createConnection
01:44 < sinclair> othiym23: can i chat to you for a few minutes?
01:45 < othiym23> sinclair: sure, PM me
01:46 < syskk> sinclair: shouldn't .. I don't use that second parameter and everything's fine.. maybe you could show the error message
01:47 < sinclair> syskk: but, what if i want to run multiple mongo databases on the same server?
01:47 < enjalot> i'm having trouble using superagent in node, it installs with npm just fine but node can't find the module when i require it
01:47 < syskk> sinclair: no idea
01:48 < samholmes> Back to what I was saying..
01:48 < samholmes> ..eh hang on.
01:52 < samholmes> How do I figure out where my dates/times are getting messed up? Is it at the server level, mysql or application level?
01:55 < chilts> samholmes: you'll have to trace through and print things out along the way so you know you're putting the right thing into the DB and the right thing is coming back out
01:55 < chilts> and figure out which step is transforming it (incorrectly)
01:55 < samholmes> chilts: I see. It looks like the column in the database is correct. The column is a DATE type.
01:56 < chilts> and you're putting the correct thing in there?
02:04 < Mer|in> so is serial port communication difficult with node?
02:05 < othiym23> Mer|in: depends on what you're trying to do
02:05 < othiym23> Mer|in: https://github.com/voodootikigod/node-serialport
02:06 < Mer|in> othiym23: i want to print individual lines to a continuous feed printer without form feeds
02:07 < Mer|in> possibly a dot-matrix printer but i'm also considering a receipt printer
02:08 < othiym23> I think node-serialport should probably do what you want, but you're on your own for whatever crazy moonman protocol the printer's expecting
02:08 < Mer|in> as long as the line physically prints immediately without requiring a form feed in order for the output to come out on paper, it should be fine
02:08 < Mer|in> hmm
02:08 < othiym23> it's just a raw binary connection, I don't think it's buffered, if that's what you mean
02:09 < Mer|in> yeah it needs to be unbuffered
02:10 < samholmes> chilts: I found the issue was in my code. I thought .getDate printed a number 0-30, so I added 1 to it. Why I thought this was because my localhost (my computer) has the time set to GMT-7. So my dates where appearing as 17 hours into the previous day (24 - 7 = 17), so my dates are in fact behind 7 hours on my localhost.
02:12 < samholmes> But. Why would my dates even be -7 behind if my mysql server is also on my localhost and has the time_zone set to SYSTEM?
02:12 < samholmes> Maybe it's the node-mysql module.
02:12 < Mer|in> yeah that looks pretty good - as I recall serial printers can basically take raw ascii without a protocol, but that's device specific
02:13 < tellnes> http://i.imgur.com/FFHWU.gif
02:13 < othiym23> I spent way too much of my childhood screwing with Epson formatting strings to ever take printer communications for granted
02:15 < Mer|in> good point - it's been a seriously long time since I've dealt with driverless printing
02:15 < Mer|in> I'm also considering trying to go through lpd, but like i said I'm looking to avoid buffering
02:16 < mscdex> ahh Epson, the good old days with an Epson MicroLine 290 and an Amiga 1000
02:16 < mscdex> :-)
02:17 < Mer|in> mscdex: i think i just saw your project posted on my google+ feed
02:18 < andrewaclt> Can somebody explain where the speed improvements occur in the following illustration? http://awesomescreenshot.com/075mfm7e5 (from code school). Can the disk really read from two locations at once? Is there something happening at the kernel level, a non-blocking disk read or something?
02:18 < Mer|in> anyhow thanks for the pointers, hopefully i can sell my idea to my project manager
02:19 < mscdex> Mer|in: which one is that?
02:20 < mscdex> andrewaclt: i think the main takeaway is that you're not waiting for the disk to respond, so you can be doing other things
02:20 < andrewaclt> mscdex, I understand that, but the example doesn't make sense to me since they are both disk reads
02:21 < othiym23> andrewaclt: I think that's just a really bad choice for selling the advantages of nonblocking I/O ;)
02:21 < othiym23> there's no magic going on
02:21 < mscdex> andrewaclt: yeah that graphic isn't the best for getting the right message across
02:21 < andrewaclt> othiym23, mscdex so would you agree that it takes the same amount of time because the disk head still has to move?
02:22 < andrewaclt> roughly anyway?
02:22 < mscdex> andrewaclt: maybe, it depends on the storage setup, caching, etc
02:22 < andrewaclt> sure
02:22 < othiym23> there's probably a small time savings vs synchronous read calls, but yeah, seek latency is going to be the dominant factor in that example
02:23 < othiym23> of course, if the files were on different mounts, you'd see a much more significant speedup
02:23 < andrewaclt> othiym23, could it be slower? the read going back in forth? or does it not work like that
02:23 < othiym23> I don't know why they didn't just use a webserver as an example like everyone else does
02:23 < othiym23> andrewaclt: I think the OS is probably smart enough to deal with that
02:23 < andrewaclt> othiym23, one can hope :)
02:24 < othiym23> I mean, at its root file operations are being handled by Node's super secret thread pool (which is used only to make file operations asynchronous and do DNS lookup), and those threads are just making plain read calls
02:25 < othiym23> so it'll be exactly as fast as it would be to fire up a C program that spawns two threads and has each one of them synchronously read a file
02:25 < othiym23> that example would also be improved if it used streams instead of readFile
02:25 < andrewaclt> I kept reading that node is single threaded, but is that not entirely true?
02:26 < othiym23> because then each listener would be handling content as soon as it came off the disk, which might lead to reduced latency if the stream listener was just piping the data elsewhere
02:26 < othiym23> andrewaclt: it is 100% true for you as a developer writing Node apps
02:26 < othiym23> it is less true when it comes to the internal plumbing of Node
02:26 < othiym23> if there were OS-level async file operations and if c-ares had better support for mDNS and the like, it would also be true for Node's internals
02:27 < jrajav> andrewaclt: It is single threaded, but event- and asyncronous-function-driven to avoid blocking operations
02:27 < Mer|in> mscdex: ssh2
02:27 < andrewaclt> othiym23, epoll?
02:28 < othiym23> libuv uses epoll on Linux, kqueues on FreeBSD and OS X, something that I forget what it is on Solaris, and IOCP on Windows
02:28 < othiym23> but that only gets you file watching, as far as file operations go
02:28 < othiym23> not reads and writes
02:29 < andrewaclt> I see
02:29 < andrewaclt> Thanks for the help
02:29 < Hotroot> What's it called when you make an executable callable from anywhere?
02:29 < othiym23> sure
02:29 < Hotroot> Like I want to be able to do "redis-server" from anywhere, whether or not I'm in the folder
02:29 < Hotroot> Static link or something?
02:30 < LouisT> Hotroot: install it globally?
02:30 < LouisT> are you talking about linux?
02:30 < Hotroot> Yeah
02:30 < Hotroot> PATH?
02:30 < LouisT> you can symlink it to /usr/bin/ and chmod +x it
02:30 < LouisT> or you could make ~/.bin/ stuff executable
02:30 < LouisT> and put it in there
02:30 < Hotroot> Just googled path, I think that does what I want
02:31 < LouisT> yea that'll do it as well
02:32 < Hotroot> Woot, that worked
02:32 < Hotroot> Actually, probably should have just added the single file...
02:34 < Mer|in> mscdex: https://plus.google.com/114636678211810483111/posts/cKNZDdioFQj
02:37 < samholmes> I'm having an off by one day date error with node-mysql
02:37 < samholmes> https://github.com/felixge/node-mysql/issues/332
02:37 < samholmes> Seems to be a related issue.
02:40 < samholmes> Here's my problem. I have a localhost build of my site. The mysql server for this build is also on localhost. Both the application and server share the same timezone. Date object generated by node-mysql from a DATE column get a 7 hours subtracted from the actual date. Why?
02:40 < samholmes> my timezone is GMT-7
02:43 < mscdex> Mer|in: ah
02:43 < trypwire> hey guys. anyone here familiar with bower?
02:43 < trypwire> twitter's package manager?
02:43 < mscdex> Mer|in: it's not scary though :-)
02:44 < Mer|in> yea i agree
02:45 < Mer|in> very promising
03:04 < zakar_> have long polling working but would like to keep poll request open longer. seems to be sending response after 30 seconds or so. How do I keep the response from timing out (or whatever its' doing?) 
03:08 < zakar_> setting header 'Connection', 'keep-alive' from the poll sending side (lua). tried various things on node side  - res.header('Keep-Alive', 'timeout=600') res.connection.setTimeout(0); ...
03:08 < Aria> zakar_: Using what long polling library? Sounds like you're using a layer on top of pure node.
03:08 < joshwnj> zakar_: where is the long-poll being requested from? is there any timeout on the requestor side?
03:10 < zakar_> no library. the long poll is comming from a lua app. it's working fine so far - just that the poll is getting a response every 30 secs or so. not - only when res.send() occurs from node
03:12 < zakar_> the lua code is just setting the http header 'Connection': 'keep-alive'.  any other headers I need to set? how about on the node side?   
03:12 < Aria> No -- node waits indefinitely.
03:13 < Aria> So I don't think you're getting a real response.
03:13 < zakar_> hmm.. the response code is 0
03:13 < Aria> Try hitting it with wireshark, see what's really being sent?
03:13 < Aria> Aha!
03:13 < Aria> That sounds like timeout
03:13 < zakar_> yep. how do I stop the timeout. I guess thats the question. :)
03:13 < Aria> Fix your lua client!
03:14 < sinclair> jade vs ejs
03:14 < sinclair> does anyone have any preference on jade vs ejs
03:14 < Aria> sinclair: Entirely different styles, I personally vastly prefer ejs.
03:14 < mscdex> same here
03:14 < sinclair> i do also
03:14 < zakar_> Hmm. ok. Thanks.
03:14 < Aria> sinclair: Jade's awesome, but I dislike whitespace dependent languages. But that's entirely holy war material.
03:15 < charuru> anyone know about tinycon
03:15 < charuru> https://github.com/tommoor/tinycon
03:15 < sinclair> Aria: there must be more to it than that
03:15 < charuru> anyone know any alternatives to it?
03:15 < Aria> sinclair: More to what? 
03:15 < sinclair> Aria: in a typical workflow, i normally receive html templates, not jade templates
03:15 < zakar_> Is there a html header that can specify timeout on the request. dont see one.
03:15 < Aria> sinclair: So that's a reason to prefer HTML-like!
03:15 < Aria> zakar_: No, this is a property of the client code, not the request.
03:15 < sinclair> Aria: yeah, pretty much, i don't know if jade is more performant
03:16 < Aria> sinclair: Measure. But are you actually limited by your templating speed?
03:16 < Aria> Is that a reasonable place to optimize for you?
03:16 < zakar_> thanks 
03:16 < sinclair> Aria: a template could take a minute to render, i normally cache the output
03:16 < Aria> A minute?!
03:16 < mscdex> charuru: here's another, never used it either though: https://github.com/makeable/Notificon
03:16 < Aria> How many gigs is the output?
03:17 < sinclair> Aria: it was a example, i don't render things that heavy 
03:18 < Aria> Oh, okay. It's just two orders of magnitude off from reasonable, so I was gonna say...
03:19 < Aria> But yeah, cache if that gains you something. That's probably a bigger win (if your content is cacheable with simple validation rules) than choice of templating language.
03:19 < Aria> IT's all about measuring and solving the RIGHT performance problems.
03:22 < Aria> charuru: That's more of a browser javascript question than node.
03:22 < Aria> charuru: Though I'd swear I've seen something like that some time.
03:30 < Hotroot> othiym23: You still there? 
03:32 < Hotroot> Wondering what the difference is between a set and a hash in many cases. (set) {user1: "Bill", user2: "Jim"} (hash) [user1 Bill user2 Jim]
03:32 < Hotroot> Seems to work the same either way
03:43 -!- mode/#node.js [+o ryah] by ChanServ
03:50 < xp_prg> hi all, I don't understand the best way to get user input from the command line
03:51 < xp_prg> I am using prompt but I don't understand how to make it get input back to where I am calling from
03:54 < ettinger> xp_prg: code an examle?
03:54 < ettinger> example?
03:55 < xp_prg> http://www.coffeewithmyruby.com/2012/08/nodejs-prompt.html
03:56 < ettinger> if a company uses coffeescript, is that a requirement or can you still write vanilla js?
03:56 < xp_prg> I am trying this example but how do I wrap it in a function that just simply prints a string and gets back a string it returns?
03:56 < ettinger> xp_prg: ok, seems pretty straigth forward
03:57 < ettinger> which part are you struggling with?
03:58 < ettinger> i think you're having trouble with nature of non-blocking programming?
03:59 < ettinger> you have to use callbacks for everything, like ajax on client side
04:01 < zivester> is there a way to search npm for a keyword, sorted by downloads?
04:12 < mscdex> anyone have suggestions for an API for port forwarding in both directions?
04:24 < mmalecki> mscdex: by both directions, you mean creaing a tunnel between two ports on local and remote?
04:24 < Hotroot> Whoops, derr, thought redis sets held key:value pairs
04:25 < Aria> Nope. Just unique piles of items.
04:26 < mmalecki> mscdex: I'd go with `portForwarding: { local: { <localPort>: <remotePort> } }`
04:26 < mmalecki> same for remote
04:27 < mmalecki> not sure about exact option name tho..
04:27 < ChrisPartridge> might need protocol
04:32 < mscdex> mmalecki: well, i'm trying to keep it rather generic in that connections (data packets with associated from/to addresses and ports) don't have to necessarily come from a bound tcp port
04:33 < mscdex> mmalecki: so for example you could replay a bunch of packets stored in memory or something
04:33 < mmalecki> I see
04:33 < mmalecki> hmm...
04:33 < mscdex> right now i have .forward() and .unforward(), but those are for server -> client forwarding
04:34 < mscdex> forwarding from client -> server is a bit easier, as it's just a matter of sending a request and waiting to see if the server accepts the request, no turning off of forwarding needed
04:35 < mmalecki> mscdex: you could generalize them as streams
04:35 < mscdex> i thought about re-using .forward(), where the functionality changes depending on the arguments given
04:36 < mmalecki> so, net.createServer(function (sock) { conn.forward(sock, port); });
04:38 < HashNuke> Hey all!
04:38 < xp_prg> hi HashNuke, how do I get asynchronous cli user input?
04:38 < xp_prg> actually I want synchronous
04:39 < HashNuke> xp_prg: Pretty new to node here.
04:49 < gabe_hollombe> Hey all.  Is there an easy way to create an offline NPM mirror?
04:50 < Aria> Get the couchdb replication set up and snag a copy that way.
04:51 < Hotroot> Am I supposed to nest DB calls?
04:51 < Hotroot> Like db.get(1, callback(){ db.get(2)} or is that excessive?
04:51 < Hotroot> Do most people just do DB stuff in a row?
04:52 < Hotroot> Nevermind, I guess you have to for this
04:52 < codingstream> Hotroot: if your code feels like its turning into a boomerrang visually, there is some handy stuff in https://github.com/caolan/async that can make it more procedural
04:53 < gabe_hollombe> Aria: nods. 
04:53 < Aria> Or if it's a visual boomerang, NAME your CALLBACKS.
04:53 < Aria> not on('foo', function() ....), but on('foo', myThing);
04:55 < codingstream>                        | there is some handy stuff in https://github.com/caolan/async that can make   │ akshayms
04:55 < codingstream>                        | it more procedural
04:56 < gabe_hollombe> Aria: Any way to tell how big an offline mirror would be?
04:56 < Aria> Dunno.
05:09 < Raynos> oh hi
05:10 < othiym23> hey Raynos
05:11 < othiym23> did my explanation of all that domain goop make sense to you?
05:11 < Raynos> othiym23: use a human readable name
05:11 < Raynos> How am I supposed to remember your forest
05:11 < Raynos> it wasn't obvouis that `error.errors` is an exception
05:11 < ettinger> .
05:11 < Raynos> the example was bad.
05:11 < othiym23> how am I supposed to remember you're Jake? ;)
05:11 < othiym23> take it up with crabdude, that confused me as well
05:12 < othiym23> but that's also the kind of error domains are meant to help with
05:12 < Raynos> Yeah.
05:12 < Raynos> I think its something that needs fixing
05:13 < othiym23> the fix seems pretty obvious to me, but there are a few other weird, subtle edge cases to domains that need addressing as well before they're going to fully trustworthy
05:13 < jcrew> othiym23: link?
05:14 < othiym23> jcrew: https://groups.google.com/forum/?fromgroups=#!topic/nodejs/Xyi_slN6Pg8
05:15 < othiym23> man, somebody at Google really likes needlessly baroque URL schemes
05:16  * ettinger goes to google to look up baroque
05:16 < jcrew> era
05:17 < ettinger> european architecutre and art. sweet...i guess
05:17 < ettinger> does using html5 history api get around the need for google suggested ajax urls with !# in them?
05:18 < Aria> Yes.
05:18 < Aria> With some weirdo backend hacks.
05:18 < ettinger> i don't see why google can't crawl an ajax site
05:19 < othiym23> "baroque" ~= "complicated, heavily ornamented"
05:19 < Aria> ettinger: Because when you fetch the site, all you get is <script src='/app.js'></script>
05:19 < Aria> ettinger: And that's not really interesting to index.
05:20 < ettinger> but they can run javascript
05:20 < othiym23> I think this is the part where I act all old and point out that DejaNews had a perfectly good UI 15 years ago and why do things have to change etc
05:21 < othiym23> Groups works just enough like Gmail to surprise and disappoint me when it doesn't
05:21 < Aria> ettinger: So then some jackass puts in while(true) {}
05:21 < Aria> ettinger: So instead of a process that's 80ms/page, it's 900ms/page.
05:21 < Aria> ettinger: Besides, what if you have to click a button to get the content? Scroll?
05:23 < othiym23> it can be possible to make such sites searchable, and it's possible to adapt spiders to deal with single-page apps, but I guess the question I've never really answered to my satisfaction is what Google gains from shoving all their services into whatever misbegotten descendant of GWT they happen to be using today
05:24 < Aria> It's not, actually.
05:25 < Aria> Apps are turing complete. There'd be no way to know if you were close to getting the page or not.
05:25 < Raynos> othiym23: everyone at google likes java style javascript apis
05:25 < othiym23> Aria: just append "if you're willing to do a bunch of gross site-specific hacks" if it makes you feel better
05:26 < Aria> othiym23: I'll pass and keep expecting people to publish things in consumable form.
05:26 < Raynos> othiym23: they gain the ability to use java everywhere
05:26 < othiym23> I stopped using Java, why can't they?
05:26 < othiym23> (witness my incredible airtight logic at work)
05:27 < jcrew> because android uses java natively
05:27 < jcrew> obviously for performance
05:28 < othiym23> you jest, but dalvik is pretty fast, and j2me before it was also fast
05:28 < othiym23> it's also insanely painful to develop for unless you really, really can't get enough of Eclipse's award-winning user experience
05:29 < Raynos> othiym23: Java is good if 300 hands touch one codebase
05:31 < othiym23> Raynos: I used to feel that way, but then they added generics (with type erasure) and annotations and now it's possible to write Turing-complete type signatures in Java and it's nowhere near as good a software engineering language
05:31 < Raynos> Ok try it the other way
05:32 < Raynos> Java is easy to hire for :D
05:32 < Raynos> google needs more code monkeys
05:32 < othiym23> I wish it had gone in more of a C# direction, especially because F# is so much nicer than Scala (troll, troll)
05:32 < othiym23> yeah, probably
05:32 < othiym23> I wasn't really being serious
05:32 < othiym23> except for the part where I'd like to consider myself done with Java if at all possible please
05:33 < othiym23> I did my 15 years' worth of it
05:33 < ettinger> i wish i learned javascript 15 years ago
05:33 < Aria> No you don't. It sucked then.
05:34 < rmill> Tomcat 4LYFE™
05:34 < Aria> It was a terrible language bolted to an albatross.
05:34 < ettinger> i did cut-n-paste javascript back then
05:34  * rmill cuts himself
05:34 < ettinger> onclick handlers
05:34 < ettinger> for rollovers
05:36 < othiym23> true fact: I worked with the guy who wrote mod_javascript about a billion years ago, and he said it was a godawful experience
05:36 < ettinger> (i guess i still don't know js, that doesn't even make sense)
05:36 < ettinger> mod_javascript was bad ass
05:37 < othiym23> ettinger: no, no, that's pretty much exactly what I did with JavaScript before about 2006 myself
05:37 < othiym23> mod_javascript also barely worked
05:37 < badem4o> npm ERR! install Couldn't read dependencies
05:37 < badem4o> npm ERR! Error: Invalid name:
05:37 < badem4o> Can anybody help
05:37 < rmill> :S
05:37 < othiym23> LiveScript in Netscape One (or whatever they called it) was slightly better but not great
05:37 < ettinger> there used to be a hugely popular site called cut-n-paste-javascript.com was to js what Matt's Script Archive was to perl.
05:37 < Aria> badem4o: Is your package.json actually json?
05:38 < ettinger> badem4o: run it through jsonlint
05:38 < badem4o> {
05:38 < badem4o>   "name": "hello-world",
05:38 < badem4o>   "description": "hello world test app",
05:38 < badem4o>   "version": "0.0.1",
05:38 < badem4o>   "private": true,
05:38 < badem4o>   "dependencies": {
05:38 < badem4o>     "express": "3.x"
05:38 < badem4o>   }
05:38 < badem4o> }
05:38 < badem4o> {
05:38 < badem4o>   "name": "hello-world",
05:38 < badem4o>   "description": "hello world test app",
05:38 < badem4o>   "version": "0.0.1",
05:38 < badem4o>   "private": true,
05:38 < badem4o>   "dependencies": {
05:38 < badem4o>     "express": "3.0.3"
05:38 < badem4o>   }
05:38 < badem4o> }
05:38 < rmill> Run every Node.js dependency EVER through jsonlint
05:39 < ettinger> this is not jsonlint
05:39 < badem4o> why not
05:39 < badem4o> I just validated it
05:39 < othiym23> this is an IRC channel
05:39 < ettinger> i've been using jshint, found quite a few issues
05:39 < Aria> badem4o: That's considered exceptionally rude.
05:39 < Aria> badem4o: IT's very disruptive.
05:40 < ettinger> what's private: true do?
05:40 < Aria> Keeps you from npm publishing
05:40 < badem4o> Aria: didn't mean to be rude
05:40 < badem4o> I'm not sure what you mean
05:40 < ettinger> oh man, that would suck, if you accidently ran npm publish on your companies codebase
05:41 < ettinger> oh, hey guys, uh...
05:41 < ettinger> ...sorry about that.
05:41 < Aria> "npm unpublish && blush hard"
05:42 < ettinger> i would shit my pants
05:42 < rmill> I shit my pants, once.
05:42 < rmill> Only once.
05:42 < othiym23> no need to do that ettinger, an unpublish followed by a discreet word to Isaac would probably get everything sorted out
05:42 < LouisT> ettinger: i did something similar on accident, i'm just glad i'm an idiot and it failed horribly >.>
05:43 < othiym23> badem4o: as far as it goes, that package.json looks fine
05:43 < othiym23> what version of Node / npm are you using?
05:44 < rmill> process.version is a funny thing
05:44 < ettinger> LouisT: yes, shitting ones pants usually is an accident.
05:44 < rmill> ettinger: I did it on purpose, once.
05:44 < LouisT> ettinger: i meant the publishing thing heh
05:44 < rmill> IT WAS A DARE
05:44 < vladikoff> rmill, o yea?
05:44 < CaioBianchi> Hey guys, it's my first time here... I was told I could find help over here. Any directions on where I can find some tutorials on Tower.JS (screencasts, articles etc..) ?
05:44 < rmill> vladikoff: YA MANG
05:44 < LouisT> i've never shit my pants thankfully
05:44 < ettinger> i did scp -r to the wrong machine once
05:44 < rmill> LouisT: SOMEDAY
05:45 < ettinger> LouisT: oh yeah yeah, me neither.
05:45 < LouisT> rmill: someday, when i'm in my 70s-90s
05:45 < rmill> That's a day!
05:45 < LouisT> but i assume i'll die before then
05:45 < ettinger> i bet you shit your pants when you were 2
05:46 < rmill> Maybe you'll poop before you die, maybe you'll poop after, but one way or another... You're gonna poop.
05:46 < LouisT> ettinger: that doesn't count, as i wasn't old enough to remember
05:47 < Raynos> othiym23: why did you do 15 years?
05:48 < othiym23> Raynos: I dunno, I started writing Java for money in 1995, and then I started my own company (which failed spectacularly) in 2010 and decided I'd had enough Java
05:48 < othiym23> and haven't looked back
05:48 < Raynos> I mean why not give up earlier
05:48 < ettinger> which failed spectacularly?
05:49 < ettinger> how long did your company last/
05:49 < othiym23> Raynos: because I liked the teams I was working with, mostly, and I got to define the stack for the last few years, so I could say which parts we would and wouldn't use
05:49 < othiym23> e.g. NO FUCKING HIBERNATE EVER
05:49 < Raynos> that's nice.
05:49 < Raynos> ORMs are bad?
05:50 < othiym23> ORMs are whatever
05:50 < othiym23> Hibernate is TERRIBLE
05:50 < Raynos> Oh I see.
05:50 < jcrew> java is terrible
05:50 < clever> othiym23: whats so bad with Hibernate?
05:50 < othiym23> I prefer straight SQL maps, but that's largely because at the time I was tending a large, badly-designed Oracle instance with lots of lovingly curated PL/SQL tucked away inside it
05:50 < jcrew> the stuff they use on android has improved greatly over the last few years though, the g1 was surely a dog
05:51 < rmill> `NFHE
05:51 < b-ot> rmill, `NO FUCKING HIBERNATE EVER`
05:51 < othiym23> clever: try to define a 1:1 relationship, call a stored procedure, or debug a 16-way outside join that Hibernate sorta magically brewed up out of some innocuous-looking HQL and get back to me
05:52 < clever> othiym23: windows hibernate or something else?
05:52 < othiym23> clever: the Java Hibernate ORM
05:52 < clever> ah
05:52 < othiym23> not, like, asking your machine to hibernate
05:52 < othiym23> got no beef with that
05:52 < ettinger> so far my unit tests are on models. but i find this kind of pointless, because mongoose unit tests should already test that the model does what its supposed to do.
05:53 < ettinger> i'm jut duplicating test.
05:53 < othiym23> unit tests on DB code are generally an impedance mismatch anyway
05:53 < clever> ive got 0 tests on my stuff, been on my list for a while
05:53 < Raynos> ettinger: if you didnt use mongoose you would have an actual model to test
05:53 < ettinger> clever: i'm not 100% sold on it
05:53 < othiym23> functional tests that model actual usage scenarios make a lot more sense
05:54 < ettinger> othiym23: i use selenium.
05:54 < clever> ettinger: i need to atleast make a checklist, ive found things broken often because things out of my control got changed
05:54 < ettinger> i find that to be very helpful
05:55 < ettinger> othiym23: can you give me an example of a functional test?
05:55 < othiym23> if you're using Selenium, you're already doing functional tests
05:55 < ettinger> i've completly lost motivation to code now that i started writing unit tests.
05:55 < Aria> ettinger: Then you need better tests!
05:56 < othiym23> but in general, you should be exposing some kind of higher-level API that your site consumes, above and beyond the basic RESTful CRUD, no?
05:56 < Aria> (and testing ideas)
05:56 < othiym23> you should be testing that higher-level API to validate that the stack works
05:56 < othiym23> I write unit tests in a JavaScript framework that runs in node (I use mocha and node-tap, but the part of my brain that wants to argue about which test framework to use was permanently burned out earlier this year)
05:57 < ettinger> is there any point to doing this sort of thing?
05:57 < ettinger> https://gist.github.com/21f72a176b8370651855
05:57 < othiym23> and the only reason to write unit tests against models would be if you have tricky custom logic in validators, or some special callbacks you've added to do things like joins, that you want to validate
05:58 < ettinger> othiym23: ok, that's what i figured.
05:58 < othiym23> there's one good reason to do that (that's mocha, no?), and that is the more of those kinds of tests you have, the better you'll avoid random regressions in the future
05:58 < Aria> ettinger: Sure, if the code handling those requirements are ever likely to be changed.
05:58 < othiym23> but if you feel like the tests you're writing are boilerplate, you can probably write better tests and not feel that way
05:59 < othiym23> I follow BDD pretty strictly, and try to always write a test that fails before I write the code that would make it pass
05:59 < Raynos> othiym23: why do you think models only contain validators / joins & db logic?
05:59 < othiym23> writing tests after the fact is painful
05:59 < Aria> Go for the high value tests first: Write tests for the trickiest requirements, the things with interdependencies.
06:00 < othiym23> Raynos: I don't, I just don't think there's any point to testing them if you're just using the basic methods provided by the ORM (or whatever Mongoose is, it's kind of in a gray zone)
06:00 < ettinger> othiym23: yeah, it's mocha + should.js
06:00 < Raynos> that makes sense
06:00 < othiym23> there's a lot of point in testing the interactions between models
06:00 < Raynos> actually do tests backwards
06:00 < othiym23> like Aria said
06:00 < Raynos> write unit tests for simple independent things
06:00 < Raynos> then take those simple things
06:00 < Raynos> and open source & modularize them
06:00 < Raynos> then go back and write your complex integration tests
06:01 < Raynos> the more your open source / modularize / npm your code with sensible unit tests and simple APIs the less painful integrating those things are.
06:01 < ettinger> whatw i'd really like to test are my routes, but i have no idea how you mock all these dependencies out. It seems easier to just use selenium.
06:01 < othiym23> until each module exports one perfect, jewel-like function
06:02 < othiym23> and then you wake up and find that you are substack
06:02 < Raynos> ettinger: do HTTP tests 
06:02 < Raynos> ettinger: https://github.com/Raynos/test-server#example
06:02 < Raynos> othiym23: substack doesn't do perfect
06:02 < Raynos> substack does good enough and volume.
06:02 < othiym23> perfectly imperfect
06:02 < othiym23> like a beautiful piece of amber with a bug in it
06:02 < Raynos> the less I use npm
06:02 < Raynos> the more I regret it
06:03 < Raynos> every time I copy paste a file I cry inside
06:03 < ettinger> Raynos: that's not much to go on
06:03 < Raynos> every time my file size exceeds 100 lines I cry inside
06:04 < ettinger> Raynos: https://github.com/Raynos/test-server/blob/master/examples/simple.js
06:04 < ettinger> how do u test your route with this exmple?
06:04 < othiym23> I just use http.request and / or mikeal's request module and run both halves of the client-server cycle in my test case
06:05 < Raynos> oh
06:05 < othiym23> it's very little code, which is unsurprising given that Node is a web server
06:05 < Raynos> I dont have an example of test-server
06:05 < Raynos> that sucks
06:05 < othiym23> I'd post some of my examples but they're all in an unreleased module
06:05 < othiym23> next build of the New Relic agent will be on npm, though, so at that point I can link to it
06:05 < Raynos> ettinger: https://github.com/Raynos/routil-session/blob/master/test/integration.js
06:06 < Raynos> pretend that code was written with test-server
06:07 < Raynos> ettinger: https://gist.github.com/4076904
06:07 < ettinger> i was going to use zombiejs, but after reading through it a few times, seems to basically be doing what selenium is doing.
06:08 < Raynos> all test-server does is get rid of a minor amount of annoying boilerplate
06:08 < Raynos> what I mean is just start your server and use mikeal/request to make http requests and assert on the response
06:08 < othiym23> ZombieJS is a solution in search of a problem
06:09 < othiym23> it's critically handicapped by its lack of CSS object model support
06:09 < othiym23> the stuff that's happening around PhantomJS / CasperJS is way more interesting
06:10 < Aria> I heart zombie. It really depends on what you're testing.
06:10 < Aria> ettinger: zombie does what selenium's doing, but faster, more directly. No actual rendering.
06:10 < othiym23> Aria: that's true, but it's the latest in a long line of browser simulators that make you think way too hard about what does and doesn't belong in your test cases
06:10 < Raynos> zombie is nice as a headless selenium
06:10  * Aria shrugs.
06:10 < b-ot> ¯\_(ツ)_/¯
06:10 < Raynos> it's main use-case is testing the HTML only (non-JS) version of your site
06:11 < Raynos> specifically can you submit HTML forms correctly
06:11 < Aria> ?
06:11 < Aria> It'll run JS too.
06:11 < othiym23> which I guess to me is increasingly irrelevant
06:11 < Raynos> yeah it is.
06:11 < othiym23> if I'm going to write browser tests, I'm generally most interested in UX
06:11 < Aria> And actually jsdom has CSSOM support now too.
06:11 <@konobi> isaacs: why doesn't node compile with dtrace on osx?
06:11 < Raynos> for UX you would want selenium or a testing department
06:12 < othiym23> the last time I tried to use ZombieJS for something real (in March), it wasn't enough like a real browser to help me with the single-page apps I was testing
06:12 < Raynos> konobi: osx doesn't have dtrace
06:12 < Aria> I like having the functional aspects nailed down so I can spend time manually tweaking the UX that's hard to eyeball, nevermind concretely test.
06:12 < othiym23> konobi: DTrace doesn't work properly on OS X
06:12 < othiym23> no ustack helpers, some of the other stuff is incomplete
06:13 < othiym23> Raynos: OS X does have Dtrace (it's what powers Instruments), it's just missing some important bits for Node
06:13 < sticko> hey there, anyone had problems with meteor/mongodb on windows v0.5.0? (Unexpected mongo exit code -1073741511. Restarting.)
06:13 < SomeoneWeird> anyone know why i'm gettnig "Error UNKNOWN, unknown error" "var r = binding.read(fd, buffer, offset, length, position);" when trying to run a script on windows? (works fine on everything else)
06:14 <@konobi> Raynos: yes it does
06:14 < Raynos> Oh.
06:14 <@konobi> ah, i thought it was only udst that was borken
06:14 < othiym23> DTrace will work fine with node-dtrace probes, for instance
06:14 < Raynos> I thought dtrace licencing forbids on anything but solaris
06:15 <@konobi> freebsd, solar-ish and osx all have it
06:15 < othiym23> no, DTrace uses the Sun community license, which doesn't get along with the GPL
06:15 < othiym23> that's why it's not on Linux
06:15 <@konobi> GPL doesn't get on with anything
06:15 < othiym23> but BSD-style licenses get along with Sun's license just fine
06:15 < ettinger> you can watch the war on youtube now
06:16 < othiym23> konobi: if you have access to a copy of the bigassed DTrace book that came out a few years ago, you can see the bits of DTrace that don't work right on OS X
06:17 < othiym23> there's some C++ stuff that also gets effed up, which is unfortunate as that's the *other* thing Node uses
06:17 < othiym23> this is why I keep a SmartOS vm handy
06:17 <@konobi> othiym23: yeah, i have a copy... but brendan also mentioned that they had done some fixage
06:17 < brianc> does anyone find this useful at all? http://githubhub.com/
06:17 < othiym23> Brendan would know better than I would ;)
06:18 < Raynos> Oh
06:18 <@konobi> othiym23: that's why i was asking isaac since he's generally within shouting distance
06:18 < Raynos> its just linux that doesnt have it, everything else does
06:18 < brianc> I've been finding github to be awesome at the git part of things, but somewhat lacking on the surfability
06:18 < othiym23> brianc: that's nice, thanks for putting it together
06:19 < Raynos> can you actually install smartos locally
06:19 < harrydog> anyone know how to set a cookie through socket.io (a websocket)? I was reading an old post that said socket.io didn't support this, partly because a flash connection transport wouldn't be able or wasn't able to set a cookie in the browser. I'm using express with socket.io
06:19 <@konobi> Raynos: i have it on a server under my stairs
06:19 < othiym23> Raynos: if you have vmware Fusion, you can not only get it running, but you can turn on the emulation of the hardware virtualization instructions and have the SmartOS KVM running in the VM
06:19 <@konobi> damn slow though
06:20 < othiym23> so you can have Linux VMs running in SmartOS in a VM on your Mac ;)
06:20 < brianc> i just did this over the past 2 days.  I want to add a lot more jazz so you can keep up on the goin's on without having to spend 2 hours of your day in irc and twitter and google groups just to get some kinda handle on things
06:20 < Raynos> I want it running as my main OS
06:20 < Raynos> but I guess it might not have a nice GUI
06:20 <@konobi> it's a server OS
06:21 < othiym23> brianc: I find it genuinely no-fooling useful, in large part because it filters out all the private repos I belong to and therefore filters out all my work repos ;)
06:21 <@konobi> one day i'll try getting it running on ZBOX ZD-81
06:21 < othiym23> Raynos: I bet you can get CDE running on it on the 3 graphics cards OpenSolaris supports ;)
06:21 < othiym23> maybe even fvwm95!
06:21 < brianc> othiym23: :)
06:21 < gildean> the development on smartos continues?
06:21 < Raynos> ._.
06:22 <@konobi> gildean: release every 2 weeks
06:22 < othiym23> for a server OS, SmartOS is frickin' sweet
06:22 < gildean> konobi: cool, i didn't realize you were putting such an effort towards it
06:22 < othiym23> although I guess it helps if you have Solaris experience
06:22 < gildean> konobi: that means i could actually consider it for some future projects
06:23 < gildean> is there an arm version of smartos?
06:23 < othiym23> Linux-only people complain that it's hard to use, but it's just very SysV-y
06:23 <@konobi> no arm version
06:23 < othiym23> if by "ARM" you mean "SPARC", then yes!
06:23 < othiym23> \o/
06:23 < gildean> heh
06:23 < gildean> no, i mean arm-el or arm-hf
06:26 < Raynos> othiym23: I use smartos in production but I need to get more exposure to solaris, mdb & dtrace
06:26 < othiym23> there's a really good free book on mdb downloadable from Oracle
06:26 < othiym23> there's also a really great, useful book on DTrace that costs money
06:26 < Raynos> i kind of know how to use the v8.so part
06:26 < othiym23> it was expensive but I don't regret the cost at all
06:27 < Raynos> still dont know how to debug production memory leaks 
06:27 < mscdex> as much as i love npm's openness to pretty much anything, there should be some restrictions....
06:27 < mscdex> a module that merely exports movie quotes?
06:27 < othiym23> Raynos: I think the only people that really know how to debug production Node.js memory issues on SmartOS are Bryan Cantrill and Dave Pacheco
06:28 < mscdex> :S
06:28 < mscdex> static movie quotes at that
06:28 < othiym23> mscdex: next you're going to say that nyancat shouldn't be on there
06:28 < othiym23> and you will be wrong
06:28 < Raynos> othiym23: I'm sure there are some voxer employees that know how
06:28 < othiym23> Raynos: I think bradleymeck and the rest of Nodejitsu probably are more comfortable with that stuff than most of the Voxer guys
06:29 < Raynos> Interesting.
06:29 < othiym23> be happy to hear otherwise from Matt or dshaw, though
06:29 < mscdex> heck, it doesn't even export anything, it's just a json file
06:29 < othiym23> mscdex: it ain't hurtin' nobody
06:31 < othiym23> clearly somebody just has a real, deep love for Fight Club
06:33 < rmill> othiym23: The first rule about..
06:34 < othiym23> this is why nobody will let me in Fight Club
06:48 < neilk_> I'm just getting started with node.js, although I am very experienced with JavaScript. I'm writing a small CLI tool. Is there a simple pattern for wrapping an async IO function for synchronous callers? Or do I need to use step or fibers or something else?
06:49 < neilk_> i.e. I do not want to rewrite a lot of synchronous code to be async just because this one function is async.
06:50 < jcrew> neilk_: easiest way is to use step or async
06:50 < jcrew> the library 'async'
06:50 < othiym23> or Q
06:50 < othiym23> fibers is probably a little heavyweight to start
06:51 < neilk_> yeah, fibers seemed to be way more than I needed on day 1.
06:51 < neilk_> basically I am just doing it wrong by writing the whole tool synchronously, I guess?
06:51 < othiym23> Q is probably the best implementation of promises for Node, and promises are a good way to keep the asynchronous bits of computation from taking over your whole codebase
06:52 < neilk_> I am translating a perl script into node
06:52 < neilk_> so it has very synchronous-minded ideas about IO
06:52 < tacirus> ello, I`m curious to learn on node.js. I read some stuff about it but still can`t get the idea of how it really works and what it can be used for. Is it a thing you put in a folder on a server and then you use it for building server side application part without PHP, for example?
06:52 < othiym23> depends on what the tool does, if you're just trying to get something done and it doesn't need to be super fast or concurrent, doing it all synchronously is probably fine
06:52 < neilk_> othiym23: I'll try Q too
06:53 < othiym23> tacirus: it's a programming environment you use to write servers, for the most part
06:53 < neilk_> othiym23: well the idea is to take a synchronous perl script, translate it to node, then translate it into a web service. So perhaps I should think async from the start.
06:53 < othiym23> i.e. not like PHP at all
06:53 < othiym23> neilk_: probably
06:53 < othiym23> try Q ;)
06:54 < neilk_> god. Yeah, I've read about the Promises standard. There's like alphabet soup of variations on how it should work, A, B, C, D..
06:54 < neilk_> is this where we're at, libraries declare they do Promises A,B,D?
06:55 < othiym23> probably best not to think about it too hard
06:55 < tacirus> othiym23: so it can end up with something like Apache then if you use node.js?
06:55 < othiym23> one of Q, step or async will solve your problem, most likely
06:55 < othiym23> so just choose the one that feels most natural to you
06:56 < neilk_> othiym23: no, node.js is quite different. It's not a file that sits on a server that gets executed. It's server code; you are writing event loops that process entire web requests.
06:56 < othiym23> lots of people will be able to help you with async if you get stuck, there are fewer but more enthusiastic people to help out with Q, and sometimes creationix is around to help with step ;)
06:56 < LouisT> has anyone used the Huffman algorithm with dgram?
06:56 < neilk_> othiym23: think of it as a tool for making things like apache, rather than a thing that works with apache.
06:56 < othiym23> tacirus: you can think of Node as a toolkit for building Apaches, sure
06:56 < neilk_> oops wrong person
06:57 < othiym23> with some unusual restrictions on how it runs
06:57 < neilk_> tacirus: I directed my last two statements to othiym23 but I meant them for you.
06:57 < tacirus> othiym23: ok thank you that makes some sense now
06:58 < sticko_> tacirus: read this http://www.nodebeginner.org/ helped me a lot see how base web app is made with node.js
06:58 < tacirus> sticko_: ok, thank you. I`l sure get there to read
07:02 < sticko_> exit
07:08 < Raynos> need peons: http://live.xsockets.net/examples/WebRTC/
07:08 < Raynos> Pile on!
07:09 < Raynos> Wait a sec
07:09 < Raynos> http://live.xsockets.net/examples/WebRTC/?roomId=My%20room
07:09 < Raynos> that link!
07:10 < Benvie> Raynos: just added Proxy http://benvie.github.com/continuum/ (probably buggy) also reflect `module Reflect = '@reflect'`
07:10 < Benvie> and with that I go pass out
07:11 < Raynos> Benvie: you are a machine
07:29 < tacirus> I`m interested to know how reletavely fast two browser applications would be built on apache + PHP and on Node.js, if I`m not too wrong in turm of basics in understaning things
07:30 < Kvisle> tacirus: how long is a rope
07:32 < tacirus> Hm, say it is a browser game, is Node.js a good base to build it on?
07:32 < Kvisle> can be
07:33 < jcrew> tacirus: zero minutes from now you can play a browser game: http://browserquest.mozilla.org/
07:33 < tacirus> heading to see
07:39 < vicapow> Kvisle: "how long is a rope" that was a great comment.
07:39 < vicapow> Kvisle: good analogy
07:39 < Kvisle> vicapow: common analogy in Norway :)
07:40 < a_meteorite> I think development can be greatly accelerated and enriched when you run Javascript on both the server and client
07:40 < a_meteorite> Especially for games.
07:41 < a_meteorite> Plus socket.io. You'd be missing out with PHP!
07:41 < a_meteorite> I used to do PHP and now I can barely be forced to.
07:41 < a_meteorite> But to each his own.
08:31 < miksa> mkmkmmlmk
08:31 < miksa> mkmkm
08:31 < miksa> kmkm
08:35 < AnthonyCat> I read that the mongodb driver has support for a pool, but I am getting: db object already connecting, open cannot be called multiple times. What is happening here? Do I have to make my own connection queue?
08:42 < [AD]Turbo> hola
08:42 < ucin> I still don't understand how OOP work in JavaScript. Is there any thing that I need to worry if I made all method static and grouped by Class?
08:45 < Doikor> well you should start by understanding how the inheritance works in javascript (prototypal).
08:51 < ucin> I have small web application built on Node. Using TDD and made all my method static, I built it less than a month. Is obvious an anti pattern
08:51 < ucin> But it work, should I care for OOP?
08:52 < Doikor> if it works and the code is readable/managable then no?
08:52 < deoxxa> ucin: is it hard to maintain?
08:52 < deoxxa> damn it Doikor 
08:52  * deoxxa shakes fist
08:53 < ucin> I guess other people will hard to follow. 
08:53 < Doikor> but i guess it's still a good idea to go and learn how objects and inheritance works in javascript so you can use it if needed
08:54 < deoxxa> ucin: the problem you're probably going to face is that of global state - i'm guessing you have a bunch of objects/variables that are mutated by calls to these static functions
08:54 < deoxxa> ucin: that'll make things really, really hard to migrate if you ever need to have more than one of whatever that global thing is
08:54 < ucin> read many times http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/ and I think its 1000 times more frustating than 
08:54 < ucin> http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215
08:55 < deoxxa> books r 4 nerdz
08:55 < ucin> lol, damn I'm a nerd
08:58 < ucin> I design my API encapsulated on namespace (using the from YUI) and class. 
08:58 < ucin> e.g.
08:58 < ucin> MyApp.namespace("MyApp.Functions");
08:58 < ucin> var Authorization = MyApp.Functions.Authorization = (function() {});
08:58 < ucin> Authorization.isInvalid = (function(authorizationObject, fn) {});
08:59 < ucin> whether it is harmful to the node js?
09:01 < deoxxa> ucin: well, it's different to how most code written for node.js works
09:01 < deoxxa> ucin: specifically because it's not CommonJS style - there's no `exports' usage for example
09:05 < yawnt> deoxxa: yo
09:05 < alchimista> hi every one
09:06 < alchimista> I am trying to have  a user management system with expressjs
09:06 < deoxxa> sup yawnt 
09:06 < alchimista> I recieve status "Aborted" when i post my login form
09:06 < ucin> Can anyone point me to an open source Node project that implement good OOP so I can learn from?
09:06 < alchimista> this is my app.js code https://gist.github.com/b598a37daba89e58ed20
09:06 < yawnt> deoxxa: you flying back on saturday?
09:06 < alchimista> can some one help me to make work my login form
09:06 < alchimista> this is my login.dust form https://gist.github.com/0b23afde44fdea21a7d7
09:07 < alchimista> any one wanna help me in this regard
09:07 < alchimista> thanks in advance
09:07 < SomeoneWeird> deoxxa has lost his cookies
09:08 < yawnt> who stole the cookies from the cookie jar?
09:08 < alchimista> I have to say that i am trying to use passportjs inorder to authenticate
09:08 < deoxxa> yawnt: ummm don't know yet
09:09 < yawnt> deoxxa: :'( but i want you to visit venice
09:38 < syskk> is there any standard way to retrieve the contacts of an email provider
09:51 < SomeoneWeird> syskk_, no
10:27 < syskk_> SomeoneWeird: i wonder how facebook does it
10:41 < runvnc> hello. I tried putting a start script in a dependency, hoping that when I ran 'npm start' in my main app, it would also run the start script from the dependency
10:42 < runvnc> I guess it doesn't do that.  any way to make it do that?
10:43 < deoxxa> runvnc: that sounds really broken
10:43 < Kakera> so guys, what do you think is worse
10:44 < Kakera> Array.prototype.map.call(buf, function(byte) { return '%' + byte.toString(16); }).join('')
10:44 < Kakera> or
10:44 < Kakera> buf.toString('hex').match(/../g).map(function(byte) { return '%' + byte; }).join('')
10:44 < deoxxa> Kakera: benchmark time!
10:45 < Kakera> yeah...
10:45 < deoxxa> Kakera: also consider '%' + Array.prototype.map.call(buf, function(byte) { return byte.toString(16); }).join('%')
10:46 < Kakera> oh, sure
10:46 < deoxxa> Kakera: or, you know, just escape(buf.toString())
10:46 < Kakera> escape?
10:46 < deoxxa> it's a javascript method
10:47 < deoxxa> inherited from the wonderful browser environment from which it rose
10:47 < SomeoneWeird> <deoxxa> Kakera: or, you know, just escape(buf.toString()) < lold
10:47 < Kakera> you can't reliably toString() a buffer that isn't valid UTF-8
10:47 < guor> >> escape('a"b<>\\')
10:47 < purr> guor: (string) 'a%22b%3C%3E%5C'
10:48 < Kakera> so nope, escape won't work for me
10:48 < Kakera> try escaping something crypto.randomBytes() produces
10:49 < deoxxa> true
10:50 < clever> Kakera: ive done that before with it working ~90%
10:50 < clever> Kakera: the issue, was that the remote end would barf when decoding %f0 (or anything with the 8th bit set)
10:50 < clever> in my case, masking the 8th bit out didnt harm anything
10:51 < clever> the random data was just a little less random
10:51 < Kakera> the remote end knows what it's doing
10:51 < clever> escape and unescape, or base64
10:51 < Kakera> both solutions I provided work perfectly
10:52 < Kakera> using escape doesn't, for reasons I stated above
10:53 < Kakera> here's a simple demonstration http://pastie.org/5381734
10:54  * clever loos
10:54 < clever> Kakera: what about buf.toString('ascii') ?
10:55 < Kakera> then it's full of \uXXXX stuff
10:55 < nathan7> 'utf8'
10:55 < clever> nathan7: thats the default, and its not valid utf8
10:55 < nathan7> oh, right
10:55 < nathan7> that's shitty
10:56 < clever> i thought i had it working without \u
10:56  * clever looks
10:57 < clever> > new Buffer(buf.toString('ascii'),'ascii');
10:57 < clever> that almost works
10:58 < clever> > new Buffer(buf.toString('binary'),'binary');
10:58 < clever> Kakera: ah, this seems to be perfect
10:58 < clever> Kakera: produces an identical buffer
10:58 < Kakera> escape encodes your string in UTF8 though
10:58 < clever> '%5D%02%C8%AE%60%F7%3D_%8A%AD%A8m5%84gv%DF%17%E2%8A%E3%0D%9Adz%E4%A5z%F8n%B6%F3'
10:59 < clever> Kakera: you sure?
10:59 < clever> >> escape(crypto.randomBytes(32).toString('binary'))
10:59 < purr> clever: ReferenceError: crypto is not defined
10:59 < clever> >> escape(require('crypto').randomBytes(32).toString('binary'))
10:59 < purr> clever: ReferenceError: require is not defined
10:59  * clever slaps purr, what kind of node bot are you!
11:00 < clever> Kakera: i'm not seeing any \u in the output from above
11:00 < SomeoneWeird> clever, its not node, its js
11:01 < clever> SomeoneWeird: i was expecting an eval bot in a node room to run node code
11:01 < Kakera> http://privatepaste.com/ea8b52a31b
11:01 < Kakera> works correctly for bytes between 0 and 127, fails otherwise
11:02 < Kakera> because it sees that it's a non-ASCII character and encodes it as multiple bytes
11:02 < clever> %1f%ed%0f%0a%96
11:02 < clever> %1F%ED%0F%0A%96
11:03 < clever> seems to have encoded things well past 127 just fine
11:03 < dileep> is htmll5 working fine with node
11:03 < clever> Kakera: which byte in that last pastebin messed up?
11:04 < dileep> is htmll5 working fine with node 
11:05 < Kakera> hm
11:07 < dileep> hey may i used the html5 code inspite of html4,datts works fine with node
11:07 < Kakera> is escape different from encodeURIComponent then
11:07 < clever> Kakera: from what ive seen in firefox, escape leaves some utf8 characters un-encoded, and breaks things later on
11:08 < clever> encodeURIComponent is the utf8 save version
11:08 < clever> but i think nodes escape is utf8 safe from the begining
11:12  * clever heads to bed
11:16 < Kakera> looks like escape simply puts the hex value of the character if it's less than 256
11:16 < Kakera> otherwise it uses %u escapes
11:21 < Kakera> for some reason cloud9 highlights 'escape' with red
11:25 < SomeoneWeird> >> escape
11:25 < purr> SomeoneWeird: (function) escape
11:55 < grizzly> Hello for everybody!
11:55 < Sly> Hey there, grizzly.
11:56 < grizzly> what means this parametres: writeHead(200, {'Content-Type': 'text/html'})
11:57 < grizzly> I mean 200 and 'Content-Type': 'text/html'
12:00 < SomeoneWeird> grizzly, 200 is a http response code, and content type is a header
12:10 < grizzly> SomeoneWeird: Thanks, so 200 is the standar response code in the protocol right?
12:10 < SomeoneWeird> 200 is OK
12:10 < Sly> grizzly: 200 is the standard response for "OK".
12:10 < Sly> There are other responses, such as 500 which is "Internal Server Error".
12:10 < SomeoneWeird> https://developer.mozilla.org/en.../HTTP/HTTP_response_codes
12:10 < SomeoneWeird> derp
12:10 < SomeoneWeird> https://developer.mozilla.org/en-US/docs/HTTP/HTTP_response_codes
12:11 < Sly> ^
12:12 < grizzly> Sly: Perfect is what I want to know: 200 in the http protocol means OK!
12:12 < grizzly> SomeoneWeird: Thanks for the link, very good for my knowleges
12:17 < SoulRaven> hello
12:17 < SoulRaven> way if the js stores the numbers in 64bit form, when are use bitwise operations are used in 32bit
12:18 < SoulRaven> is not posibile in node to enable this "feature" and allow 64bit bitwise operations without any conversin from 64 to 32
12:18 < SoulRaven> ?
12:18 < SoulRaven> @conversion
12:27 < filipminev> hey guys, i was wondering if there are any custom event naming conventions out there which we can follow?
12:27 < filipminev> for example, if you want to fire an event for a user to update his profile picture
12:27 < filipminev> how would you do that?
12:38 < AAA_awright> filipminev: Not really.
12:38 < AAA_awright> grizzly: Read RFC 2616
12:39 < denysonique> Sexy Nexxy
12:39 < filipminev> AAA_awright: How would you do it for example?
12:39 < AAA_awright> filipminev: Do what?
12:39 < grizzly> AAA_awright: Thanks I just now got it
12:40 < filipminev> AAA_awright: fire an event for a user to update his profile picture, Event.emit('....', {userId: 11});
12:40 < filipminev> what would the '....' part be
12:40 < AAA_awright> grizzly: No, really, read RFC 2616, all of it, not just the status codes. You deserve to know how HTTP works. http://www.ietf.org/rfc/rfc2616.txt
12:46 < mks> grizzly: ^^^^
12:47 < mks> really. read it. several times...
12:47 < filipminev> hm, so no one has any custom events naming conventions whatsoever? :(
12:47 < mks> filipminev: you can use : as a separator
12:48 < mks> not a standard, but used here and there
12:48 < mks> 'user:update-profile'
12:48 < mks> but, really, it is up to you
12:48 < mks> 'events' are just strings
12:49 < mks> but if you use the standard EventEmitter there is no facility to parse events
12:49 < mks> just exact match of the event string
12:50 < filipminev> yes
12:50 < filipminev> the thing is on the internet we saw
12:50 < filipminev> user:update-profile
12:50 < filipminev> user:updateProfile
12:50 < filipminev> user:update.profile
12:50 < filipminev> so we were wondering what makes sense to most of the people
12:51 < mks> make a poll.
12:51 < Industrial> What's wrong here? (Express 3) https://gist.github.com/19b935d3bbccfa197315
12:51 < Industrial> Not sure why I'm getting a 404
12:52 < Industrial> (other then that I should use :confirmationId in the route, it should still pick requests up, right?)
13:13 < Doumie> sequelize question
13:13 < Doumie> how do i access other models from model classMethod ?
13:53 -!- mode/#node.js [+o piscisaureus_] by ChanServ
14:05 < SoulRaven> hello
14:06 < SoulRaven> way node dev team will not enable bitwuse operations for 64 bit, if all the numbers are stored internaly in 64bit format
14:06 < pseudo> lolwut????
14:07 < pseudo> nosense dude
14:07 < SoulRaven> and for backward compatibilty to have also the posibilty to switch between 32bit bitwise operation and 64bitwise operations
14:11 < mks> because of V8?
14:11 < SoulRaven> JavaScript stores all its numbers as 64 bit initally, but as soon as you start using bitwise operators the interpreter converts the number to a 32 bit representation.
14:17 < foobar321> Hi. How to pass JavaScript variable inside Jade templates? I have page.jade which has div(data-role="page", id=pageId) and block content inside it. Now in other login.jade I want to extend page.jade and setup pageId variable. But var = does not work. Any ideas ? Or how I should resolve this problem ?
14:20 < SoulRaven> so, way is not posibile to enable the bitwise operation before the interpreter or using a warper
14:20 < mscdex> SoulRaven: yeah, so don't use bitwise operators, use Math.* functions and arithmetic operators instead
14:21 < mscdex> SoulRaven: if you need to do stuff outside of 32-bits
14:23 < Kakera> I wish Node.js added an int64 type, accessible from both JS and C++ just like a Buffer
14:23 < SoulRaven> i think is posibile something like this, is all ready in V8
14:28 < pseudo> i want to do some string analysis in few users tweets
14:28 < pseudo> whats the best way to do this???
14:28 < mscdex> Kakera: it wouldn't be very useful from JS since you wouldn't be able to use built-in arithmetic operators without changes in V8
14:29 < Kakera> yes, but you would have methods to convert it to a decimal or binary string, or a buffer, or return the low or high part of the number
14:29 < Kakera> *decimal or hex
14:30 < pseudo> SOMEONE CAN HELP ME HERE PLEASE????
14:32 < aandy> pseudo: node-natural maybe?
14:32 < aandy> https://github.com/NaturalNode/natural
14:32 < Kakera> for example, the protobuf module for node.js currently converts int64s into strings, which works in most use cases, but sometimes you need more flexibility
14:32 < pseudo> aandy: yeah thks i checked this
14:33 < pseudo> aandy: and give some tips about the architecture to use for the backend 
14:33 < pseudo> pleaseeeeeee
14:33 < aandy> huh? well, if you use natural i'd store the serialized object in a database so you don't have to re-train it on every new use
14:35 < aandy> remember the key to classification is knowing what goes on, so if you're new to the workings of statistics, you might want to check that out first, or at least a few explanatory tutorials - i know tweets analysis are plenty and widely available
14:35 < pseudo> ok thks, some links please????
14:36 < foobar321> Can any1 help me with passing variables inside Jade templates ?
14:36 < dk01> foobar what are you trying to do?
14:37 < dk01> can you paste your code to gist?
14:37 < Kakera> https://github.com/joyent/node/issues/4281 lol...
14:37 < SoulRaven> Kakera:)
14:37 < SoulRaven> what
14:37 < pseudo> aandy: ???
14:38 < aandy> http://www.laurentluce.com/posts/twitter-sentiment-analysis-using-python-and-nltk/ for instance
14:39 < aandy> but you never did say what you wanted to do exactly. that link is for classification
14:39 < aandy> slightly more technical explanation: http://ebiquity.umbc.edu/blogger/2010/12/07/naive-bayes-classifier-in-50-lines/
14:40 < aandy> you can ignore the code when reading the last one
14:40 < foobar321> gist: it's very simple. As you probably know in jQueryMobile you can define multiple pages on one page. To do tha you just use <div data-role="page" id="#thisIdMustBeUniq">blahblah content</div>. So I've created a template that has: div(data-role="page", id=thisIsVariableThatINeedToPass) and line below this div there's a nested line with block content. Are you still with me? That's good. Now . In another file I create login.jade a
14:42 < aandy> echen from twitter also has a "fun" example with identifying english tweets without knowledge of the languages: http://blog.echen.me/2011/05/01/unsupervised-language-detection-algorithms/
14:43 < pseudo> aandy: so if u want to detect a commun subject inside tweets of a different users whats the best aproach
14:46 < foobar321> dk01: https://gist.github.com/4078960
14:47 < foobar321> So any1 can recommend sth better than Jade for such situations ?
14:47 < SomeoneWeird> ejs
14:47 < SomeoneWeird> pseudo, https://github.com/harthur/brain
14:48 < foobar321> now. where in ejs is include or extend ?
14:50 < SomeoneWeird> <% include file.ejs %>
14:51 < Doumie> foobar321 if you happend to want to include css or js files (like i did) read: http://stackoverflow.com/questions/6609238/is-there-a-way-to-add-css-js-later-using-ejs-with-nodejs-express
14:53 < pseudo> SomeoneWeird: if i understand well, detecting a global subject of a tweetlist is more about machine learning?
14:53 < pseudo> aandy: help meeeeeeeeeee pleaseeeeeeeeeee
14:53 < SomeoneWeird> pseudo, https://github.com/harthur/classifier
14:53 < SomeoneWeird> that one, sorry
14:53 < SomeoneWeird> it WAS merged with brain
14:54 < SomeoneWeird> moved to its own project
14:56 < pseudo> SomeoneWeird: how will u train ur engine then?
14:57 < Kakera> https://github.com/visionmedia/node-querystring/issues/45
14:57 < Kakera> am I doing it right?
14:59 < AAA_awright> pseudo: *How will *you train *your engine then?
14:59  * AAA_awright cringe
15:00 < Sly> Kakera: it looks like you need to add .toString('utf8') to your new Buffer statement.
15:00 < Kakera> why?
15:00 < pseudo> AAA_awright: its not ur problem here please goaway
15:00 < Sly> qs.stringify({a: (new Buffer([0x00, 0x30, 0x7f, 0x80])).toString('utf8')});
15:00 < Sly> Kakera: not sure. That's just what querystring is expecting.
15:00 < pseudo> SomeoneWeird: u have an answer for me????
15:00 < pseudo> please
15:00 < Sly> > qs.stringify({a: new Buffer([0x00, 0x30, 0x7f, 0x80])})
15:00 < Sly> 'a='
15:00 < AAA_awright> pseudo: *It's *your *go away
15:00 < Sly> > qs.stringify({a: new Buffer([0x00, 0x30, 0x7f, 0x80]).toString('utf8')})
15:00 < Sly> 'a=%000%7F%EF%BF%BD'
15:01 < AAA_awright> pseudo: Seriously take some time to type out those few extra characters, you won't sound like you're 13
15:01 < Kakera> see, it outputs 6 'bytes' instead of 4
15:01 < Sly> Kakera: true. Not sure what's up with that.
15:01 < Sly> Just noticed it.
15:01 < Kakera> toString('utf-8') does not work reversibly on invalid UTF-8
15:02 < Doumie> AAA_awright don't be so sure he sounds like a 13 year old without a reason :)
15:02 < Doumie> it might not just be his typing
15:04 < Sly> Kakera: using `escape(new Buffer(...))` works. Only difference is %80 is the unicode equivalent %uFFFD
15:04 < Sly> Without having to .toString('binary')
15:04 < bnoordhuis> AAA_awright: it's not just you, i always have to restrain myself from kickbanning people that write like that
15:05 < Kakera> yes, Sly, and that's not the expected output
15:06 < Kakera> try escape(new Buffer([0x7f, 0x80, 0x81, 0x82]))
15:06 < Kakera> it doesn't work because it calls toString('utf8') behind the scenes
15:06 < Sly> Ah.
15:07 < Sly> Never noticed this before, but then again I don't use buffers in qs often.
15:15 < Sly> Kakera: looks like querystring hasn't had some love in a while. I might try to work on a solution for that in a little while.
15:16 < Sly> Will definitely add your test case in.
15:16 < Kakera> but I've already provided three solutions!
15:16 < Sly> Yeah, I mean like..
15:16 < Sly> querystring handling it without anything special having to be done.
15:17 < Sly> Would probably be preferable, since other people may use or eventually use it.
15:17 < Kakera> what do you mean 'anything special'?
15:17 < Sly> Oy. xD
15:19 < Sly> Kakera: querystring should be able to handle buffers. You shouldn't have to escape a buffer in order to pass it into querystring as a field. I.E., {a: escape((new Buffer(...)).toString('binary'))}
15:19 < Sly> Or anything like that..
15:19 < pseudo> aandy, SomeoneWeird, AAA_awright: where can i found some usages/implmentations of natural
15:19 < pseudo> or brain
15:19 < Sly> You should be able to just throw a buffer in, and it work.
15:19 < Sly> *should*
15:20 < Kakera> that's what the issue suggests...
15:20 < Sly> I know, but I'm talking about modifying it in joyent/node, not visionmedia/node-querystring
15:21 < Kakera> oh
15:21 < pseudo> ANYONE??????????????????????
15:21 < Doumie> pseudo calm down
15:21 < Doumie> you won't get any help yelling here
15:22 < Kakera> you mean the require('querystring') thing?
15:22 < pseudo> WUT????
15:22 < b-ot> Boom! Did you are unimpressed? and now?
15:22 < Kakera> not qs?
15:22 < pseudo> i just want some usecases of natural or brain
15:22 < foobar321> Another question for jade: why inside app.post app.locals does not work anymore ? I can use only app.locals in app.use ??
15:22 < pseudo> i mean node-natural
15:23 < pseudo> SomeoneWeird: can u help me?????
15:24 < Sly> Kakera: yeah. The bug is also in Node's native querystring module. If it's fixed there, it should also fix it for node-querystring.
15:24 < pseudo> omg this chan is just weird
15:24 < pseudo> im very disapointed
15:24 < Sly> Of course that would also entail having to build Node from source, since the versions published on nodejs.org are a bit behind the branches on Github.
15:25 < Sly> pseudo: how is this channel weird?
15:25 < thomas`-> Hi all. I want to store a list of all the current sessions with 1on1 connected users and be able to look up these sessions instantly. Could anyone please tell me an efficient and fast solution?
15:25 < Kakera> Sly, but node-querystring doesn't use node's querystring
15:25 < pseudo> im asking one simple thing and nobody????
15:25 < Sly> Kakera: it doesn't? At all?
15:25 < thomas`-> It would be very much appreciated
15:25 < Kvisle> pseudo: what's 'natural or brain' ?
15:25 < shanse> you need more question marks
15:25 < pseudo> JUST GIVE ME A SIMPLE ANSWER
15:25 < Kvisle> pseudo: and what does it have to do with node?
15:25 < shanse> ??????????????????????????????
15:26 < shanse> AND CAPS TOO
15:26 < shanse> AWESOME
15:26 < pseudo> natural/brain arent node modules???
15:27 < Kvisle> maybe - I don't know them all.
15:27 < Kakera> Sly, https://github.com/visionmedia/node-querystring/blob/master/lib/querystring.js#L138
15:27 < Sly> Kakera: ah, so it happens in both of them.
15:28 < pseudo> WTF HERE
15:28 < Kakera> huh?
15:28 < Sly> Kakera: dunno. I'll take a look at Node's querystring sometime. Maybe I can figure out what's going on in it.
15:28 < pseudo> so nobody can help me????
15:28 < AAA_awright> pseudo: One question mark is enough
15:29 < pseudo> AAA_awright: just give me one answer dumb
15:29 < AAA_awright> pseudo: I'm not sure what a dumb is
15:29 < Kakera> Sly, what happens in both of them?
15:30 < AAA_awright> pseudo: Think you could provide links maybe?
15:30 < Sly> Kakera: what we've been talking about this whole time.
15:30 < mks_> http://www.urbandictionary.com/define.php?term=dumb
15:30 < pseudo> speechless
15:30 < pseudo> moronic
15:30 < Sly> I was using Node's querystring to test, not node-querystring. I thought node-querystring was using querystring, but it seems that (from what we've talked about) they're both doing something funky.
15:30 < Kakera> Sly, if it worked properly in either of them, I wouldn't submit an issue
15:31 < pseudo> boy
15:31 < AAA_awright> pseudo: If only an adjective made sense in that position.
15:31 < pseudo> Please everyone, i want some usecase of node-natural module, for my first node project.
15:32 < AAA_awright> pseudo: You could provide a link, that would be helpful
15:32 < aandy> there are plenty in the README.md on github
15:32 < pseudo> AAA_awright: dont have time to loss w/ u
15:32 < mks_> also a lot of examples in the github repo...
15:32 < aandy> https://github.com/NaturalNode/natural/blob/master/README.md nothing BUT use cases and examples
15:33 < AAA_awright> pseudo: This is IRC. Your english doesn't have to be perfect but you must at least try.
15:33 < AAA_awright> pseudo: "natural" doesn't help us at all. Which module is this?
15:33 < Kakera> Sly, https://github.com/joyent/node/blob/master/lib/querystring.js#L117
15:33 < Kakera> this is where the magic doesn't happen
15:34 < Sly> Kakera: yeah, I know.
15:34 < pseudo> aandy: thks
15:34 < rounce^work> is github www really trippy this afternoon or is this just me?
15:34 < AAA_awright> pseudo: *Thanks
15:35 < aandy> rounce^work: seems to work fine here (uk)
15:35 < rounce^work> yeah
15:35 < rounce^work> hmm
15:35 < rounce^work> fine on my phone as well
15:35 < rounce^work> must be something wack in the office
15:35 < rounce^work> aandy: cheers for checking +1 rep
15:36 < pseudo> AAA_awright ure just an idiot, dumb
15:36 < AAA_awright> pseudo: Says the person who can't spell "you're"
15:36 < AAA_awright> pseudo: Stop talking like you're 13 and you'll get better help
15:36 < AAA_awright> Seriously
15:36 < Kakera> but I spelled better when I was 13
15:37  * rounce^work logs for posterity
15:37  * rounce^work gets the popcorn out
15:37  * aandy googles emily post
15:37 < AAA_awright> rounce^work: Would you like some butter and a soft drink?
15:37 < rounce^work> butter please, got a drink here thanks
15:38 < rounce^work> pseudo: the correct response is "AAAawright then, I'll try that" (see what I did there?)
15:38 < AAA_awright> ^ Clever
15:38 < rounce^work> haw haw
15:39 < rounce^work> now back to bullshit frontend writing IE7 animation fallbacks
15:39 < rounce^work> =D
15:39 < aandy> geez, order a teddy bear on behalf of my mother ONCE and amazon will not shut up about it. daily recommendations for stupid.. childish.. wonderful teddy bears *click*
15:39  * rounce^work was killed by worldspawn
15:39 < aandy> rounce^work: lol, good luck
15:39 < mks_> rounce^work: don't do it!
15:43 < mks_> a jpeg strip is good enough for IE<=10 http://ie.microsoft.com/testdrive/performance/astonmartin/
15:45 < fastman> hi!
15:56 < Tixz> Any recommendations for frontend validation lib?
15:59 < RLa> Tixz, what exactly you mean
16:00 < Tixz> Input validation specifically :) Was looking for something I could use cross server/browser, but there seems to be validation built into mongoose, so I just need something to do validation inside my backbone models
16:00 < Tixz> Is it better just to roll my own regex's and similar? Or is there a preferred lib I should know about?
16:01 < RLa> there are some
16:02 < RLa> but i haven't yet invested time learning them
16:02 < Tixz> What do you do personally then?
16:02 < RLa> search validation and validator in npm registry
16:02 < RLa> so far used custom regexes and checks
16:03 < Tixz> Well, have done that heaps of times, but I don't find anything interesting
16:03 < RLa> but i think learning a lib could be worth it
16:03 < RLa> also ask in #javascript
16:04 < RLa> i have used jquery validator on one project tho
16:04 < Tixz> Yep, was hoping someone would drop the bomb and say "hey, there's this lib that you can use in your mongoose models and in your backbone models"
16:04 < Tixz> Yeah, hate jQuery validator
16:04 < Tixz> Pretty bad api 
16:04 < mks_> never found a good validation lib myself.
16:04 < Tixz> Well, I guess I just have to roll my own then
16:05 < RLa> there are two (three) things that need to be done
16:05 < mks_> it is painful, but in the end you know every dark corner of it
16:05 < RLa> validation checks, messages and displaying messages
16:05 < mks_> and you can shape the API how you like/need it.
16:05 < eXp`iRc|17098> halo
16:05 < RLa> most libs try to do only 2 of them
16:05 < Tixz> Yeah, mine has to support i18n, validation groups
16:05 < danmh> Tixz: we used https://github.com/thedersen/backbone.validation for our backbone models in a pretty big project.  it seemed to work well, but i haven't used anything else, so hard to be objective
16:06 < Tixz> I want to avoid the display part, people have to deal with that themselves
16:06 < RLa> Tixz, i would like separate lib only for checks
16:06 < mks_> divide and conquer
16:06 < RLa> i.e validateEmail that will return true or false
16:06 < context> whats the point of validation without notifying the user
16:06 < RLa> not put some random html on my page
16:07 < mks_> validation != notification
16:07 < Tixz> exactly
16:07 < mks_> should be 2 differnt components
16:07 < Tixz> I don't want some random lib to mess with my markup
16:07 < Tixz> yep
16:07 < RLa> also, localized messages can be a problem
16:07 < mks_> events come handy
16:07 < mks_> make your validator an event emitter
16:07 < mks_> and hook the notifier
16:08 < RLa> i usually have array errors = [], then all validators are run on it, if error, put into the errors array
16:08 < mks_> or, better, wrap the dom elements in something that embeds the validation logic
16:08 < context> well that validation thing makes you bind to the view, so just dont bind.. ?
16:08 < Tixz> How I'd like the API to look: var v = new Validate(); v('groupId', inputValue).required().email().length(5, 18);
16:09 < RLa> Tixz, i think i have seen such API
16:09 < RLa> Tixz, do a search on dailyjs
16:09 < Tixz> then the v object contains an object with all validation errors and you can act accordingly with your own messages
16:10 < mks_> Tixz: that way, you still have to write a lot of glue-code.
16:10 < mks_> to me, events are more appropriate
16:11 < mks_> formelement.on('validation-error', showerror)...
16:11 < Tixz> But you still have to define the validation logic
16:11 < mks_> sure
16:11 < Tixz> and how to channel inputs to the appropiate validation rules
16:11 < RLa> mks_, i'm using knockoutjs so i can just set array of errors somethere and it's magically displayed
16:12 < Tixz> mks_ I see what you mean
16:12 < Tixz> I think event-driven is the way to go
16:12 < mks_> knockoutjs != homegrown solution
16:12 < Tixz> that would work nicely on both server and client
16:13 < mks_> events fits perfectly with js
16:14 < mks_> i started some time ago to write wrappers for every form element
16:14 < mks_> still have to finish that...
16:14 < mks_> but i'm sure that, when done, it will be very nice to work with
16:14 < Tixz> what do you exactly mean?
16:15 < mks_> think to the way native form elements in html5 already embeds some validation logic
16:15 < mks_> just make it more powerful
16:15 < RLa> i wrote lib for wrapping dom elements some time ago
16:15 < mks_> write one "class" for each form element you want to handle 
16:15 < RLa> only problem is that in real apps, it explodes the code size
16:15 < mks_> and one for the form that contains all the elements
16:16 < mks_> if you use currying, not that much
16:16 < Tixz> sounds like the way that Zend Framework did validation
16:16 < mks_> dom elements share a lot of state
16:16 < RLa> then i switched to knockout + jade, it's been perfect match so far
16:17 < Tixz> But it seems overkill to wrap each element in a class of its own?
16:17 < RLa> jade is fine for knockout since it uses html and jade translated directly to html
16:17 < mks_> Tixz: why? for sure is a lot of work, but every abstraction layer is
16:17 < RLa> Tixz, it is, that's what i discovered
16:18 < mks_> once done, you have an expressive api
16:18 < mks_> (assuming that you still want to roll your own lib)
16:18 < RLa> it might pay off in very large projects tho, where the cost of creating the initial layer is marginal compared to the cost of actual app code
16:19 < Tixz> mks_ do you have some of it on github?
16:19 < Tixz> I don't exactly get the gist of why you do it?
16:19 < mks_> not yet. just registered my github account
16:19 < mks_> but i still have tons of work to do on my libraries before pushing them to GH
16:20 < RLa> Tixz, anyway, that's how far i got: https://github.com/rla/wdt
16:20 < mks_> for sure before the end of the year i will start to give something back to the community
16:20 < RLa> Tixz, if you look example, the code is quite verbose
16:20 < Tixz> mks_ Don't worry about that, just ship them on there already :) Then people can start following the development
16:21 < mks_> Tixz: right, but i'm in the middle of a deadline... using a custom framework/application engine.
16:21 < mks_> first i have to finish the job
16:21 < mks_> then i will release pieces of that as opensource, reusable, libraries.
16:22 < mks_> opensourcing is cool, but requires some time that i don't have right now.
16:22 < RLa> Tixz, i managed to write 2-3k loc code like that for a critical project, then switched to knockout and cut large sections of size 500 loc to 20-30 lines
16:22 < Tixz> RLa it seems like you're just writing html templates in js
16:23 < RLa> Tixz, yes, but i got no better idea of wrapping dom elements
16:23 < jtomasrl> what does the next() do?
16:23 < RLa> i'm sure there are
16:23 < RLa> but i did not find
16:23 < mks_> jtomasrl: in the context of a middleware, it pass the control to the next middleware in the chain.
16:23 < Tixz> Why would you want to wrap them in the first place?
16:24 < Tixz> So that you could have them as objects in your js?
16:24 < Tixz> To me it seem's like you've just written a copy of your dom as js objects
16:24 < jtomasrl> mks_: and what would i expect it to do inside a request
16:25 < mks_> Tixz: generally speaking, i wrap every DOM element to have control over them. Add features, avoid touching the dom to read properties, and to defer rendering.
16:25 < RLa> Tixz, same reasons as mks_ 
16:25 < RLa> also, unified event handling
16:26 < Tixz> I don't see the advantage over just using _.extend on a reference to an element or such
16:26 < RLa> also, inheriting, as you can't easily inherit native DOM elements
16:27 < RLa> mainly because new DOM elements are not created by constructors but by a factory function
16:28 < mks_> jtomasrl: some code to see what you have?
16:28 < Tixz> To me it all just seems like an awful waste memory and cycles
16:28 < mks_> Tixz: the opposite.
16:28 < jtomasrl> mks_: im just asking, i havent use it and i've seen it in a lot of examples
16:28 < mks_> you end with something that uses less memory and runs faster (touching the DOM is fucking expensive)
16:29 < mks_> the main reason to wrap is to me avoiding to touch the dom to read properties.
16:29 < mks_> and to be able to implement observing property change to do binding.
16:30 < mks_> jtomasrl: ok. using middleware you create a chain of functions, that have the signature mw( req, res, next)
16:30 < mks_> the main request handler pass the control to the first middleware
16:30 < jtomasrl> mks_ hmm ok
16:30 < mks_> each middleware receives req and res, so that it can work on them
16:31 < mks_> and, once done, it calls next() to pass the control to the next middleware in the chain.
16:31 < Tixz> mks_ Alright, I'll have to look into that. I'm still not entirely convince by RLa's implementation thouhg (your's might differ)
16:31 < mks_> this way, you can split your logic in tiny, specialized, pieces of code
16:31 < mks_> Tixz: didn't see that implementation.
16:31 < Tixz> https://github.com/rla/wdt
16:32 < RLa> Tixz, as said, i'm phasing it out from the single project using it
16:32 < RLa> for knockoutjs
16:33 < Tixz> Yes yes, but the argument still stands, that it's easier to have a "map" of the dom in memory for reading properties and extending with specialized functionality
16:34 < RLa> yes, it does, but should be done in less verbose way
16:35 < RLa> and in a way that allows only some parts of the app use wrapped DOM, not all of them
16:35 < mks_> writing a good, clean API is tough.
16:36 < mks_> a base dom wrapper that implements the basic, and then composition of "traits" or "mixins" (or how you want to call them)
16:36 < mks_> to create more specialized wrappers
16:37 < mks_> keeping the inheritance chain as short as possible
16:37 < mks_> but not shorter...
16:38 < mks_> gotta get back to the editor... maybe tonite (berlin time) i will have a gist to show.
16:58 < foobar321> Is there any debug mode for express framework? What is the order of next() execusion? Is there any good information about it ?
16:59 < foobar321> My problem is that after calling next() my program is executing wrong function
17:01 < iksik> foobar321: paste some code
17:28 < astropirate> Greetings
17:28 < jrajav> Wow, so I can publish a package to npm with just npm publish mypackage?
17:28 < jrajav> For some reason I thought it would be more complicated
17:30 < astropirate> jrajav, you go, you!
17:32 < jrajav> So, should I include node_modules?
17:32 < jrajav> i.e. with test harnesses
17:34 < jrajav> I'm guessing no
17:36 < jrajav> Woot!
17:36 < jrajav> https://npmjs.org/package/mkpath
18:09 < jrajav> How can I specify an either/or dependency?
18:09 < jrajav> For an npm package
18:12 < mois3s> Hello
18:18 < mykul> Hello mois3s 
18:26 < yawning> what's the best way to iterate over an object without pulling in some library like underscore?
18:28 < ericelliott> yawning: for in
18:28 < jrajav> Almost right
18:28 < jrajav> for..in with a .hasOwnProperty check
18:28 < yawning> with hasownproperty?
18:28 < ericelliott> yes, with
18:28 < ericelliott> .hasOwnProperty check is almost always what you really want.
18:29 < ericelliott> you can also use Object.keys in node
18:29 < yawning> so there isn't some new standard like the Array.forEach?
18:29 < aettinger> yawning: you said object
18:29 < yawnt> HEY
18:29 < yawning> yeah
18:29 < yawnt> THAT'S MY NICK YAWNING
18:29 < aettinger> Array.forEach is good
18:30 < jrajav> yawning: You didn't register it?
18:30 < yawning> I really want to iterate over an object :). Just that there were new additions like that
18:30 < yawning> should I change my nick?
18:30 < jrajav> That was @ yawnt
18:30 < yawnt> no, just joking :P
18:30 < yawning> *just thought there might be new additions to the language like Array.forEach
18:31 < jrajav> yawning: for..in IS the new addition -- that is, the next version will make it work like it should have
18:31 < jrajav> http://wiki.ecmascript.org/doku.php?id=harmony:iterators
18:31 < aettinger> yawning: what's your object look like
18:31 < ericelliott> yawning: Object.keys(foo).forEach(function (key) { console.log('key: ' + key + ', value: ' + foo[key]); });
18:32 < jrajav> ericelliott: That's a roundabout way of doing it. for..in is preferable
18:32 < jrajav> But yes, that would function in effectively the same way
18:33 < ericelliott> jrajav: Depends on your idea of preferable. That hasOwnProperty chick is just as verbose as the Object.keys hack
18:33 < ericelliott> chick/check
18:34 < jrajav> That won't always be the case, though; and currently, it's clearer what that is doing, vs. the Object.keys() thing, even though they're both just as verbose
18:34 < ericelliott> jrajav: I'll give you that.
18:34 < jrajav> After all, why should you need the keys?
18:35 < ericelliott> I find I frequently need the keys.
18:35 < ericelliott> When I'm iterating over an object.
18:35 < jrajav> Yes, but they shouldn't be necessary to iterate over the object - that's the point of having an iterator syntax or function
18:36 < ericelliott> IMO, the best solution for now is to lean on a lib. If you've already got one loaded that does this, use it.
18:36 < jrajav> Gotta go for now
18:37 < ericelliott> Underscore and jQuery both do object iteration in a manner that is clear and concise. Use 'em if you have them. Otherwise, for in with .hasOwnProperty is the ugly truth for now. =)
18:38 < aettinger> i already use _ for something else in my code, so it's easy just to leverage it.
18:39 < Benvie> supporting objects that define __iterator__ or iterator is nice
18:39 < yawning> in my experience creating closures for iteration like that is expensive. especially when i start nesting loops. though maybe that's just the older IE browsers
18:40 < yawning> node probably doens't have that problem
18:40 < CoverSlide|TPFR> it's probably still more expensive than iterating over for
18:41 < CoverSlide|TPFR> I'm sure someone put up a jsperf of that
18:41 < CoverSlide|TPFR> there's jsperf of everything
18:41 < CoverSlide|TPFR> it's finding it that's a bitch
18:41 < AAA_awright> One thing to watch out for with Object.hasOwnProperty is people who use Object.create(o) to clone objects
18:42 < Benvie> here's my iterate function, I find it useful https://github.com/Benvie/continuum/blob/gh-pages/engine/utility.js#L360
18:42 < CoverSlide|TPFR> Object.create to clone objects?
18:43 < CoverSlide|TPFR> noone should be doing that
18:43 < AAA_awright> Why not?
18:43 < AAA_awright> It's blazing fact, since it's effectively copy-on-write
18:43 < CoverSlide|TPFR> because it's not a real clone
18:44 < CoverSlide|TPFR> "cloning" and "assigning values from one prototype to another" have two different meaning
18:45 < CoverSlide|TPFR> [[Prototype]] more accurately
18:51 < CoverSlide|TPFR> AAA_awright: also, "cloning" is akin to copying, Object.create doesn't copy, it references
18:52 < kuebk^> hi
18:53 < kuebk^> what was the reason for remove a possibility to close process.stdout?
18:54 < CoverSlide|TPFR> you mean .end()ed?
18:54 < kuebk^> yea
18:54 < kuebk^> end, destroy
18:54 < kuebk^> etc
18:55 < CoverSlide|TPFR> hmm
18:56 < kuebk^> https://github.com/joyent/node/commit/f84d86b66054273fb6a31346f0dd957078b58c1c
18:56 < CoverSlide|TPFR> It's a commit by igor
18:57 < CoverSlide|TPFR> maybe there's some windows-specific thing that causes problems if you close stdout
18:57  * CoverSlide|TPFR shrugs
18:57 < b-ot> ¯\_(ツ)_/¯
18:57 < AAA_awright> CoverSlide|TPFR: That's what I mean
18:58 < AAA_awright> kuebk^: Technically Node.js is supposed to exit only when all the streams and listeners have closed, but I think there's an exemption in place for stdi/o/err
18:58 < CoverSlide|TPFR> well if you want to "clone" one object to another object, Object.create is the wrong way to go
18:59 < AAA_awright> CoverSlide|TPFR: But why
18:59 < aandy> AAA_awright: btw, for extra credit you can make a classifier for rational/irrational statements based on your convo with pseudo :D there's a use case
19:02 < CoverSlide|TPFR> AAA_awright: I get your logic, it's just a matter that it's technically not a clone. if you change values in the original, it changes values in the new object
19:02 < CoverSlide|TPFR> and that's technically not supposed to happen if you have an independent copy
19:03 < AAA_awright> True, though normally that's not a problem
19:03 < AAA_awright> At least for me
19:03 < CoverSlide|TPFR> define "normally"
19:03 < AAA_awright> Also, where I use it, I want to be able to see the original, unmodified values, and I can do this by using Object.getPrototypeOf
19:03 < CoverSlide|TPFR> you want a clone, that means you want two independent copies
19:04 < AAA_awright> Put it this way: I want a prototype, not a clone
19:04 < CoverSlide|TPFR> ok then
19:04 < AAA_awright> But I believe people could probably get by with the same thing, since in many cases you never write to the original prototype after making the new object
19:04 < CoverSlide|TPFR> now that we have that settled ...
19:05 < CoverSlide|TPFR> AAA_awright: that's only if you're using it for "instantiation" in OOP terms
19:05 < CoverSlide|TPFR> once again, instantiation is not cloning
19:06 < AAA_awright> And ECMAScript isn't OOP
19:06 < deoxxa> it's POOP
19:07 < deoxxa> (seriously, prototypical object oriented programming)
19:07 < CoverSlide|TPFR> right, Object.create was created in ES5 to get out of the ES3 method of "instantiation" which mimics traditional OOP
19:14 < CoverSlide|TPFR> whoo! 5 more games in humble android bundle!
19:15 < CoverSlide|TPFR> although i already bought zen bound 2 ... bastards
19:41 < warz> npm constantly makes a tmp directory in my user home directory. i looked up the temporary files section in the npm faq, and it sounds like it should be using /tmp instead.
19:42 < TooTallNate> warz: do you have the TMP env var set?
19:42 < TooTallNate> if not, it defaults to $HOME i believe
19:42 < warz> no
19:42 < warz> ah, hrm
19:47 < samholmes> majek: Why is it too late? :(
19:48 < simon_clark> Looking for a little advice, here… Trying to determine if it is feasible to compile node.js and socket.io into a NPAPI browser plugin for distribution
19:49 < simon_clark> as far as I can tell, it's doable, but complex. Anyone know if somethingl ike that has been tried?
19:49 <@mbalho> simon_clark: you want to run a node server in chrome?
19:50 < simon_clark> chrome at a minimum. safari and firefox would be nice to :)
19:50 < AAA_awright> That's O_O
19:50 < AAA_awright> Why would you need that?
19:50 < othiym23> simon_clark: http://iceddev.github.com/blog/2012/11/05/node-js-in-chrome/
19:50 <@mbalho> simon_clark: its gonna be chrome only for the forseeable future and even then its super alpha at the moment
19:51 < othiym23> but that will only work in Chrome Canary, and isn't a plugin
19:51 < othiym23> you could build something in NPAPI, but I'm not sure what you'd do with it, given the limitations of how plugins interact with the browser / user
19:51 < deoxxa> tihs is relevant to my interests
19:52 < simon_clark> interesting. mbalho, are there limitations stopping in in other browsers. I know I'd have to compile V8 in as well for the others
19:53 < othiym23> there is almost certainly a less heavyweight way to do whatever it is you're trying to do, simon_clark
19:53 < simon_clark> othiym23, I think the NPAPI / browser bridge will let me do what I want, as long as I can get a local socket server running and sufficiently harden it from attack
19:53 < othiym23> what problem are you trying to solve?
19:54 < simon_clark> othiym23 mobile to browser communication with extremely low latency.
19:55 < simon_clark> have it all working with a node server online, but latency, especially under load gets too slow
19:55 < othiym23> simon_clark: that sounds like something for WebRTC, not a monolithic plugin
19:56 < deoxxa> +1 for webrtc
19:56 < othiym23> I mean, go nuts, but that sounds like a big bag of pain to me
19:56 < deoxxa> shame it's not a thing yet for mobile (unless you're using that crazy ericsson browser)
19:57 < othiym23> deoxxa: the Mozilla Boot2Web stuff handles WebRTC, doesn't it?
19:57 < simon_clark> hmmm, I'll take a good look at that. I'm not terribly fond of the plugin route, so if I can ditch it, all the better
19:58 < deoxxa> othiym23: ah, perhaps on android devices
19:58 < deoxxa> othiym23: i equate mobile to be iOS though, because i'm lame like that :P
19:59 < othiym23> Boot 2 Gecko is pretty nuts, it's a new phone OS from Mozilla
19:59 < othiym23> it uses the Android kernel but otherwise isn't tied to Android
19:59 < samholmes> So I was thinking of putting a SIGNAL listener in my app that triggers a graceful exit for restarting. This way I can send that signal to my app in the git push hook.
20:00 < deoxxa> samholmes: you really need to run two copies of your app, at least for the restart period, if you want it to be seamless
20:01 < samholmes> deoxxa: Why you have another name with cookies?
20:01 < samholmes> Makes it hella difficult to tab trigger your name.
20:01 < samholmes> Anyway, how would I run two copies if only one process can listen on the port at a time?
20:02 < LouisT> samholmes: there are ways
20:02 < samholmes> LouisT: Ways maybe if you had a load balancer?
20:02 < deoxxa> start B, turn off the listening port on A, turn on the listening port on B
20:02 < deoxxa> (note that turning off the listening port doesn't kill current requests)
20:02 < samholmes> No load balancer needed?
20:03 < LouisT> that or use something like cluster
20:03 < deoxxa> nope, none needed
20:03 < LouisT> if he wants to just reload code
20:03 < samholmes> How would I externally have these apps do this?
20:04 < samholmes> I'm not too familiar with signals, so I was gonna look that up.
20:04 < LouisT> samholmes: have you looked at this? http://nodejs.org/api/cluster.html
20:04 < LouisT> it's experimental, but something like that could work for what you need
20:05 < samholmes> Isn't this learnboost's module?
20:05 < othiym23> cluster may be "experimental", but it's also extremely widely used
20:05 < substack> it's also a bad idea
20:05 < substack> use process concurrency
20:05 < substack> no need for magic fd passing magic
20:06 < deoxxa> ^^ this
20:06 < deoxxa> it's way better to have a few processes running
20:06 < substack> if you want to share an fd just pass the integer to the child proc
20:06 < substack> cluster already spins up a separate process anyhow
20:06 < CoverSlide|TPFR> which cluster? node/cluster? LearnBoost/cluster?
20:06 < substack> plus when you have separate processes it's easier to scale out to multiple servers
20:06 < othiym23> wait, but cluster is based on child processes, isn't it?
20:06 < othiym23> the Node version, not the LearnBoost version
20:07 < samholmes> eek
20:07 < CoverSlide|TPFR> I agree with substack on this, 9 times out of 10, the sugar that cluster adds isn't that useful compared to just running a child process normally
20:08 < substack> cluster shouldn't be in core
20:09 < samholmes> I'll get fancy later. For now a graceful restart would be nice. I'm interested in what deoxxa said though, about switching the port listening then exiting.
20:09 < rump> in my tests, req/s always goes *down* with cluster
20:09 < CoverSlide|TPFR> i suppose it was just a quick and simple way to scale your server across CPU's, ryah added it in response to lots of people complaining about "node doesn't do multi-threading"
20:10 < deoxxa> it still doesn't
20:10 < deoxxa> (but that's not a problem)
20:10 < othiym23> rump: that's not been my experience, although (of course?) cluster doesn't scale linearly
20:11 < rump> just put nginx in front of it with multiple node process upstreams
20:11 < simon_clark> another quick question: In testing out a node.js server, we found it started to really slow down at around 1000-1200 messages/second. This seemed low to me. 
20:11 < othiym23> bad idea if you're doing anything with websockets
20:11 < othiym23> unless you're running the absolute latest version of nginx
20:11 < rump> othiym23: or haproxy i guess
20:11 < simon_clark> this is using socket.io
20:11 < deoxxa> simon_clark: define messages
20:12 < othiym23> yeah, newest dev version of haproxy is probably the best solution right now
20:12 < simon_clark> deoxxa : socket.io messages with SSL
20:12 < deoxxa> yeah, socket.io is a bit crazy
20:12 < othiym23> that sounds about right for socket.io + SSL
20:12 < deoxxa> there are alternatives, depending on what you're doing
20:13 < rump> it takes a lot to max out a core with node though, doesn't it? :)
20:13 < simon_clark> the multiple fallback on the transport of socket.io is what drew me there
20:13 < AndreasMadsen> rump: do you have any benchmarks for that approach? it isn't sound theoretical but I have heard it before.
20:13 < Bonuspunkt> has anyone a better solution for process.on('exit', function() { process.exit(1); });
20:13 < othiym23> rump: jMeter can make it happen pretty easily if you're running a ton of worker threads ;)
20:13 < simon_clark> but essentially mobile browser to deskop browser communication
20:14 < rump> AndreasMadsen: i only benched node vs node-cluster myself
20:14 < rump> jaw dropped when node outperformed
20:14 < CoverSlide|TPFR> depending on the test
20:14 < CoverSlide|TPFR> but the extra message passing baggage of course will be slower than trying to operate on a single core
20:14 < CoverSlide|TPFR> what matters is computational complexity
20:14 < rump> othiym23: yeah but irl... who is pushing 6000+ req/s aka 500+ million hits per day
20:15 < AndreasMadsen> rump: ah, okay.
20:15 < deoxxa> simon_clark: i think with what socket.io does, 1200 requests per second is pretty reasonable
20:15 < rump> the data store is the bottle neck long before node even on single core i imagine
20:15 < deoxxa> rump: we've got nearly that much, but it's not hits from browsers :P
20:15 < othiym23> rump: aside from Voxer, not many people ;)
20:16 < othiym23> also beacons
20:16 < othiym23> beacons get shittons of requests per second
20:16 < simon_clark> ok, thanks deoxxa. Good to know that i'm not way underperforming for some reason.
20:16 < rump> i wonder how many boxes linkedin is running for node
20:16 < rump> who in node community is getting more hits than them i wonder
20:17 < FunnyLookinHat> 13.
20:17 < deoxxa> that's just their mobile app, right?
20:17 < FunnyLookinHat> 13 boxes.
20:17 < FunnyLookinHat> Because nobody cares about LinkedIn.
20:17 < FunnyLookinHat> ;)
20:17 < deoxxa> it's not the front page or whatever
20:17 < deoxxa> still not a tiny amount of traffic, obviously
20:17 < AndreasMadsen> deoxxa: right
20:17 < rump> yeah but i imagine their mobile traffic (for their iphone/android/web/etc apps) is more than say learnboost
20:17 < CoverSlide|TPFR> linkedin they use Java
20:17 < othiym23> I'm pretty sure Voxer handles a lot more traffic than LinkedIn Mobile
20:18 < deoxxa> CoverSlide|TPFR: their mobile app has a node backend ;)
20:18 < CoverSlide|TPFR> deoxxa: I know
20:18 < deoxxa> othiym23: i'd wager on that as well
20:18 < CoverSlide|TPFR> Voxxer may not have as many users as linkedin, but I'm sure they push more data
20:18 < rump> voxer probably takes more processing
20:18 < rump> yeah
20:19 < rump> i mean the nsa has to monitor all walkie talkie conversations afterall
20:19  * deoxxa nods
20:19 < samholmes> deoxxa: is this 1200 message per second statistic the same for sockjs?
20:19 < deoxxa> samholmes: it'd likely be different
20:19 < samholmes> Faster?
20:19 < CoverSlide|TPFR> I'm sure sockjs would be faster, it's less complex
20:19 < deoxxa> samholmes: faster or slower i couldn't say
20:20 < CoverSlide|TPFR> last time I saw benchmarks sockjs outperformed socket.io
20:20 < samholmes> deoxxa: roughly equivelent?
20:20 < deoxxa> socket.io is optimised for weird things, and sockjs is probably the same, so it depends on how you're using it
20:20 < rump> i wonder how much more performant sock* is to ajax
20:20 < CoverSlide|TPFR> but the important question is what you need it for, because it lacks a ton of the features socket.io has
20:20 < samholmes> rump: Much more.
20:21 < samholmes> CoverSlide|TPFR: Couldn't those features be a seperate module for sockjs?
20:21 < CoverSlide|TPFR> yeah that's possible
20:21 < deoxxa> samholmes: well, given that socket.io/sockjs/etc are all ajax in the end anyway, if you don't have websockets available...
20:22 < samholmes> deoxxa: true
20:22 < CoverSlide|TPFR> but the more complex you make it, the more cpu cycles you have per request, and the slower it will be
20:22 < CoverSlide|TPFR> just a fact of life
20:31 < DallonF> Is there any way exit or "join" a domain?
20:32 < DallonF> Most examples are for requests and things that effectively branch off of the main call stack
20:32 < AndreasMadsen> DallonF: domain.enter and domain.exit but there is properly a better way do deal with it.
20:33 < DallonF> I want to do a bunch of stuff asynchronously (all of which could cause any error at any time; it's effectively loading third-party code), but I don't want to domains to stick around once I'm done and continue with execution
20:34 < DallonF> AndreasMadsen, I don't see those functions in the documentation (http://nodejs.org/api/domain.html)
20:34 < DallonF> Am I looking in the right place?
20:34 < AndreasMadsen> DallonF:  you could use dispose then.
20:34 < AndreasMadsen> DallonF: sorry, I have read to much nodecore code. I don't think the api is public.
20:35 < AndreasMadsen> but .dispose is public.
20:35 < DallonF> AndreasMadsen: Wouldn't dispose() kill off everything?
20:35 < DallonF> Let me write a quick sample of what I'm trying to do...
20:35 < AndreasMadsen> DallonF: yes, but since you are done with every thing, there is nothing too kill.
20:40 < DallonF> AndreasMadsen: https://gist.github.com/307f9378526f46669d8b
20:41 < AndreasMadsen> DallonF: and the error is sync
20:41 < DallonF> Ignore the d.run(); I was trying to be smart before I realized that I have no idea how domains work :|
20:42 < DallonF> Yeah - if there's an error, it's almost certainly going to be thrown
20:42 < DallonF> If it helps, I'm requiring a module
20:42 < DallonF> Wait a minute... I don't think domains are what I need...
20:43 < DallonF> I just need a good old fashioned try/catch I think
20:43 < hoomi-abnabat> I am trying to run node.js, express, and socket.io in heroku but i am getting this error message
20:43 < hoomi-abnabat> http://pastie.org/5384240
20:43 < hoomi-abnabat> can someone help me please
20:43 < DallonF> hoomi-abnabat, first off, you've seen this, right: https://devcenter.heroku.com/articles/using-socket-io-with-node-js-on-heroku
20:44 < DallonF> There's a little bit of special configuration you've got to do to use socket.io on Heroku
20:44 < DallonF> (Namely, force it to use polling instead of sockets)
20:45 < DallonF> As for the error, it's hard to say exactly what the problem is without seeing line 62 of app.js, but are you trying to set up a server on port 80?
20:45 < hoomi-abnabat> DallonF, if you mean this https://devcenter.heroku.com/articles/using-socket-io-with-node-js-on-heroku i did it
20:45 < DallonF> hoomi-abnabat, k good. That's not causing the error, I just wanted to make sure you knew
20:46 < CoverSlide|TPFR> hoomi-abnabat: are you starting a process that calls another process that listens on a port < 1024?
20:46 < AndreasMadsen> DallonF: yeah, domains are not for this purpose. You have a totally decoupled function there requires error handling, you can deal with any error a lot better in that decoupled than domain can today. A domain is something there wraps a betty big and stable functionality and then allow you to deal with something unexpected.
20:47 < AndreasMadsen> DallonF: however it sounds like a really strange module, to expect that an async module will almost always throw is an anti-pattern.
20:47 < CoverSlide|TPFR> hoomi-abnabat: actually, wait are you telling it to explicitly listen to port 80?
20:47 < DallonF> AndreasMadsen, if it helps, I'm working on www.deployd.com
20:47 < Bilge> You're an anti-pattern
20:47 < CoverSlide|TPFR> because I think they actually proxy, so you'd have to do process.env.PORT
20:48 < DallonF> It's sort of a cool platform if you haven't seen it before
20:48 < CoverSlide|TPFR> bear in mind this is with no experience with heroku
20:48 < DallonF> But anyways, it imports user-defined modules and executes functions ont hem
20:49 < DallonF> And I want to throw a helpful error message if the user-defined functions do something stupid like referencing a variable on an undefined object
20:49 < hoomi-abnabat> CoverSlide|TPFR, DallonF http://pastie.org/5384284
20:50 < AndreasMadsen> DallonF: It didn't really help, but it might make sense for you to look at isolated v8-contexts, if I'm guessing your usecase right :)
20:50 < MI6> joyent/libuv: Stephen Gallagher master * 05aac92 : include: export uv_inet_* functions - http://git.io/OGCNTA
20:51 < CoverSlide|TPFR> hoomi-abnabat: are you positive port is set?
20:51 < DallonF> AndreasMadsen, that would mean I'd have to re-implement require and all the fancy Node features, right?
20:52 < FunnyLookinHat> Has anyone here gotten socket.io to work correctly when testing on cloud9 ide ?
20:52 < hoomi-abnabat> Connorhd, how can I check that?
20:52 < AndreasMadsen> DallonF: that depends on what you are going to run in there, but yes it might. As I said I'm only guessing about your usecase. 
20:53 < DallonF> AndreasMadsen, sounds like overkill; domain does exactly what I want, it just doesn't allow you to exit the domain when you run a callback
20:53 < DallonF> Let me run a few experiments, I just got an idea...
20:53 < AndreasMadsen> DallonF: well d.dispose() will exit the domain.
20:54 < DallonF> AndreasMadsen, but the next thing I want to do is in that domain now, so if I kill the domain I kill my entire "thread"
20:56 < AndreasMadsen> DallonF: https://gist.github.com/dab751610e4a3f96ff14
20:57 < LouisT> anyone here ever implement huffman for udp/dgram?
20:57 < DallonF> AndreasMadsen, oh, that's how it works? That makes things easier
20:58 < DallonF> Thanks
20:58 < AndreasMadsen> DallonF: most likely, I have done a lot of domain development but you better test it :)
20:58 < hoomi-abnabat> CoverSlide|TPFR, I checked the port it is 39748
20:59 < CoverSlide|TPFR> hoomi-abnabat: yeah, most likely port isn't getting set so it's listening on a random port
20:59 < CoverSlide|TPFR> hoomi-abnabat: does app.js have a require('./config')
21:00 < hoomi-abnabat> CoverSlide|TPFR, yes it has 
21:02 < DallonF> AndreasMadsen: Just tested that - you just made my week (and probably next week) so much easier
21:03 < AndreasMadsen> DallonF: haha, thats cool.
21:04 < AndreasMadsen> DallonF: be sure to note that you will need to run d.intercept to catch err in callbacks.
21:04 < AndreasMadsen> * err as in the argument
21:05 < DallonF> AndreasMadsen, so out of curiosity, if you call domain.dispose() inside of a domain, it exits the domain - what happens if you call domain.dispose() outside of a domain? (i.e. in a parallel async task) Would it kill the domain and abort its processing?
21:05 < DallonF> (domains remind me too much of threads)
21:06 < AndreasMadsen> DallonF: don't do it, I'm having a slow discussion with isaacs about that one.
21:06 < DallonF> K
21:06 < AndreasMadsen> DallonF: see https://github.com/joyent/node/pull/4153
21:11 < hoomi-abnabat> CoverSlide|TPFR, would that help this is my app.js http://pastie.org/private/jghmfpkgj0i7k4bpowyw
21:13 < CoverSlide|TPFR> hoomi-abnabat: wait i think i know
21:13 < hoomi-abnabat> CoverSlide|TPFR, http://pastie.org/5384393 this log
21:14 < CoverSlide|TPFR> hmm i think maybe for some reason it's trying to read on the flashSockets port
21:15 < CoverSlide|TPFR> no no no wait
21:15 < CoverSlide|TPFR> i see what's going on
21:15 < CoverSlide|TPFR> you need to set server to http.createServer(app)
21:15 < CoverSlide|TPFR> and THEN do server.listen ...
21:16 < CoverSlide|TPFR> because listen return undefined
21:16 < CoverSlide|TPFR> and so socket.io tries to listen on port 80, not on your server
21:17 < brianc1> haij
21:17 < brianc1> hai*
21:19 < hoomi-abnabat> CoverSlide|TPFR, It worked Thank you so much
21:19 < CoverSlide|TPFR> np
21:24 < merrihew> Is anyone familiar with and/or using the async library?
21:24 < chilts> merrihew: yep, it's awesome :)
21:25 < merrihew> chilts Do you know how to pass arguments into tasks (like async.parallel)?
21:25 < chilts> you don't, you pass it an array of functions
21:26 < chilts> if you have a set of tasks you probably want something like forEach
21:26 < merrihew> e.g. async.parallel([longTask('a'),longTask('b')], function(err,callback){...})
21:27 < CoverSlide|TPFR> merrihew: you can have longtask return a function
21:27 < chilts> I think you probably want async.map()
21:27 < merrihew> CoverSlide|TPFR Ahh! Return a function that only takes the callback 
21:27 < chilts> do you have 'a' and 'b' in an array?
21:28 < merrihew> chilts I could, but wouldn't that only work if the same function is applied?
21:28 < chilts> true
21:28 < merrihew> e.g. async.parallel([longTask('a'),AnotherLongTask('b')], function(err,callback){...})
21:28 < merrihew> that wouldn't work if i am not mapping the array over the same function, right?
21:28 < Leo> Hello.. do you guys think that in mongodb is best practice to write all the code, and save everything to buff and later on write a function to save/update what i need to mongodb? Or thats not really the idea of using mongodb?
21:28 < chilts> but yeah, you prolly need what CoverSlide|TPFR says
21:29 < hoomi-abnabat> CoverSlide|TPFR, Now I got different error message! I don't understand it. It that because of "connect = require('express/node_modules/connect'),"
21:29 < hoomi-abnabat> CoverSlide|TPFR, http://pastie.org/5384440
21:30 < CoverSlide|TPFR> hoomi-abnabat: what version of node is this running on? I think you need v0.6.x for randomBytes
21:30 < hoomi-abnabat> CoverSlide|TPFR, v0.8.14
21:30 < CoverSlide|TPFR> hmm
21:31 < CoverSlide|TPFR> are you specifying that version in your package.json ?
21:31 < CoverSlide|TPFR> hoomi-abnabat: https://devcenter.heroku.com/articles/nodejs-versions
21:31 < CoverSlide|TPFR> If you do not specify a version, you will get the following defaults:
21:31 < CoverSlide|TPFR> Node.js: 0.4.7
21:31 < CoverSlide|TPFR> npm: 1.0.106
21:32 < mscdex> node.js rules!
21:32 < hoomi-abnabat> CoverSlide|TPFR, http://pastie.org/5384456
21:32  * CoverSlide|TPFR shrugs
21:32 < b-ot> ¯\_(ツ)_/¯
21:32 < mscdex> is that the forever alone guy?
21:36 < othiym23> 0.4.7?!
21:37 < mscdex> ancient history!
21:37 < therealkoopa> I'm using node cluster and node redis. I'd like to be able to reuse my redis clients. Is it possible to share the clients between the processes?
21:37 < merrihew> chilts I completely overlooked the async.apply method, seeing that now in the documentation
21:38 < othiym23> therealkoopa: it's possible, but probably not fun
21:38 < therealkoopa> othiym23: Kind of what I expected to hear.
21:38 < othiym23> actually, let me back up
21:39 < othiym23> it's possible to reuse the connection and pass it around as a file descriptor, but I'm pretty sure node-redis won't allow you to use a single connection in multiple clients
21:40 < tnorris> anyone use a preprocessor that would remove debug statements for production code?
21:40 < therealkoopa> My knowledge is limited, but I don't think it will hurt too much to have each process with its own client, or three (pub, sub, regular), so I think I can live with it.
21:40 < hoomi-abnabat> CoverSlide|TPFR, I just change 0.8.14 to "node": "0.8.x" and worked
21:41 < CoverSlide|TPFR> hmm 
21:41 < CoverSlide|TPFR> maybe they haven't updated to 0.8.14 yet
21:42 < hoomi-abnabat> CoverSlide|TPFR, Maybe
21:42 < othiym23> therealkoopa: I'm almost sure that's how Josiah or Salvatore would tell you to do it, so good plan
21:44 < CoverSlide|TPFR> what's the reason behind having three clients? I understand that one client goes into "sub" mode at least with node, but why are the other two needed? can't they be merged into one?
21:46 < CoverSlide|TPFR> anyone? bueller?
21:47 < othiym23> if you've got your pubsub logic separate from your general-purpose data-storage needs, it makes sense to keep the thing populating the pubsub queue separate from the other
21:48 < othiym23> especially if e.g. you're going to be doing MULTI-EXEC / piplined stuff on your "regular" connection
21:49 < LouisT> this isn't directly node related, i'm using $ as an id to trigger a color change on IRC... so $c04blah would make "blah" red, i'm trying to make it so if i do \$c04blah it would just return "$c04blah", but it's not working for some reason. i tried to use [^\\]\$ and (?!\\)\$ -- anyone know what i'm doing wrong? =/
21:59 < tnorris> anyone know if ugilfy can beautify with tabs?
22:00 < CoverSlide|TPFR> i think there is a beautify option
22:00 < CoverSlide|TPFR> -b
22:00 < CoverSlide|TPFR> -i 
22:00 < CoverSlide|TPFR> for indentation level
22:01 < tnorris> CoverSlide|TPFR: maybe it's because i'm using uglify-js2. but indentation level seems to only insert spaces.
22:03 < CoverSlide|TPFR> oh
22:03 < CoverSlide|TPFR> sed!
22:04 < tnorris> heh, yeah.
22:04 < spolu>  if you want to take a break, build a competitive AI in JS and challenge your friends: lay back and try http://phl0cks.net :)
22:05 < tnorris> dark gray on black. really?
22:05 < spolu> tnorris: come on it's not that bad :)
22:05 < brianc1> spolu: I would guess you aren't colorblind?
22:05 < CoverSlide|TPFR> spolu: it's completely unreadable
22:06 < tnorris> change it to #aaa or something. it's really difficult on dimly lit screens.
22:06 < spolu> brianc1 CoverSlide|TPFR ok :) feedback taken will change that
22:06 < brianc1> muchas gracias
22:06 < brianc1> is this your node knockout entry?
22:07 < brianc1> it's a pretty cool idea
22:07 < brianc1> great for peeps who want to learn game programming stuff too
22:07 < spolu> brianc1 it is not, would have loved to do it during a hackathon but I did it on my free time :)
22:08 < brianc1> two thumbs up
22:08 < brianc1> one pinky down for the color, but you can change that lickety split
22:08 < spolu> brianc1: yep that's the idea + promoting AI and artificial life! :)
22:08 < spolu> brianc1 thx :)
22:09 < brianc1> spolu: I'm working on this: http://githubhub.com
22:10 < brianc1> not a lot of cool realtimey nodey stuff, but it does use authom from jed
22:10 < chrisjaure> brianc1: I like it
22:11 < brianc1> chrisjaure: thanks. it's two days old...so it should grow into something much more useful within the next 4-6 weeks as time permits
22:11 < spolu> brianc1 your landing is not as good as your app which looks fantastic! 
22:11 < tnorris> brianc1: nice. could you also implement a parser for the news feed so items can be broken into categories (e.g. updated, starred, forked, started following, etc.)
22:12 < spolu> brianc1 but I have nothing to say on landings :)
22:12 < tnorris> that is one feature that i've been asking github for a while now.
22:12 < brianc1> tnorris: yeah right now it's just commits. i was thinking one tab for commits and one tab for all activity
22:12 < brianc1> maybe all activity is the "main" tab.
22:12 < brianc1> yeah my landing page blows
22:12 < brianc1> i just did it super fast so it wasn't _just_ a "login" button
22:12 < tnorris> design is sleek, and really easy to use. nothing about that blows.
22:13 < brianc1> plus hard to make a landing page about an app which lacks functionality to talk about on landing page
22:13 < chrisjaure> brianc1: i'd like to see realtime search filtering, github's search for starred repos isn't that great, hard to find libs i starred months ago unless i remember the name
22:13 < spolu> in the meantime if you're bored... stanford engineering hero lecture by intel ceo: https://www.youtube.com/watch?feature=player_embedded&v=LM3sfeimcS8 
22:13 < brianc1> chrisjaure: sweet. will put on the TODO list
22:13 < spolu> brianc1 haha :)
22:14 < jrajav> My first day on npm and I've published not one but TWO modules :D
22:14 < brianc1> i like both the idea for repo search & the "all activity" not just commits
22:14 < brianc1> jrajav: congrats!
22:14 < jrajav> Would appreciate constructive criticism: https://github.com/jrajav/mkpath
22:14 < jrajav> https://github.com/jrajav/finkel
22:14 < jrajav> Or npm install mkpath/finkel
22:15 < spolu> jrajav congrats
22:15 < brianc1> jrajav: there is a mkdirp module by substack
22:15 < othiym23> jrajav: how is mkpath different from https://github.com/substack/node-mkdirp?
22:16 < jrajav> It's not. At all. The implementation is just more elegant.
22:16 < jrajav> I actually hijacked his entire test suite
22:16 < brianc1> jrajav: lolz
22:16 < jrajav> It was mainly an exercise
22:16 < jrajav> Finkel, however, is original
22:16 < brianc1> well congrats on publishing! npm lowers the barier of entry so nicely. it's vunderful
22:17 < spolu> brianc1 +1
22:18 < jrajav> This wasn't originally intended to be my npm intro, but at the start of this week I decided "Yeah I'm going to actually start filling out my github"
22:18 < jrajav> And node was funnest to start with
22:19 < brianc1> jrajav: node - come for the javascript, stay for the package manager
22:19 < brianc1> s/package manager/community
22:20 < brianc1> s/community/roflscalewebcloudpaaspowerbigdata
22:21 < jrajav> finkel is totally roflscale. Function application after currying is 2N over args.
22:21 < jrajav> :3
22:21 < jrajav> It's ready for the cloud 
22:21 < jrajav> lol
22:22 < brianc1> the real question is "is the cloud ready for jrajav"?  only time will tell. next time there's an AWS outage I'll know who to blame.
22:22 < jrajav> I don't even have any cloud apps
22:22 < jrajav> Guess I missed that trend
22:22 < jrajav> I have a Dropbox AND a Google Drive AND an Amazon cloud player/kindle, though
22:23 < jrajav> So I guess that makes up for it
22:33 < AviMarcus> I've ran into an odd issue -- I'm doing a childprocess.spawn to unzip a file and process the results. but when I concat each data packet, it seems I have 92 duplicate rows (270 chunks of data or so) -- googling showed nothing, and I can't seem to pin down duplicates at the start or end
22:53 -!- mode/#node.js [+o piscisaureus_] by ChanServ
22:55 < mattupstate> new node.js user here…curious what the common method(s) of deploying node apps is these days
22:57 < rump> mattupstate: NODE_ENV=production node app.js  :)
22:58 < rump> throw haproxy or nginx in front of it if you want multiple instances/cores
22:58 < mattupstate> rump: i've stumbled across a few things like forever and using upstart or monit
22:58 < mattupstate> for managing the process
22:58 <@konobi> mattupstate: smf here
22:58 < rump> i prefer upstart
22:59 < rump> forever caused me headaches, never tried monit but i can see the value of checking that way
22:59 < Kakera> does superagent provide a way to set a cookie?
23:00 < Kakera> besides .set('Cookie', cookieString)
23:00 < mattupstate> rump: does upstart ensure the process restarts if it stops for any reason?
23:00 < rump> mattupstate: yep
23:01 < rump> upstart is a simple pleasure
23:01 < mattupstate> are you sure?
23:01 < othiym23> does anyone here have any experience mocking node-mongodb-native with sinon at the DB connection level?
23:01 < mattupstate> i'm not seeing anything that says that
23:01 < mattupstate> on the interwebz
23:01 < rump> mattupstate: http://upstart.ubuntu.com
23:01 < rump> look harder :)
23:01 <@konobi> it is a bit of a pain in some ways
23:01 < mattupstate> ha
23:01 < mattupstate> ok
23:02 < othiym23> the low-level driver stuff is written in such a crazypants way that it's hard to snarf the call to connect and replace it with something I control
23:02 <@konobi> othiym23: node-mocked?
23:02 <@konobi> if you can get it to work... stupid little bug in there atm that i need to fix somehow
23:04 < othiym23> konobi: I'm already using Sinon for the rest of my test suite, and it's working fine, it's just...
23:04 < othiym23> have you ever had to deal with the guts of node-mongodb-native?
23:04 < othiym23> it's a challenge
23:04 <@konobi> othiym23: i just bypass it altogether
23:04 < othiym23> how I wish I could
23:04 <@konobi> (guts of any module)
23:05 < othiym23> unfortunately, my job is to get into the guts of other people's code and root around without breaking anything
23:05 <@konobi> i just mock the public interface and then control the inputs and outputs in the testsuite
23:06 < othiym23> yeah, I'm lookin atcher code right now
23:06 < othiym23> nice and simple
23:07 < othiym23> this is what Sinon calls a "stub", fwiw
23:08 <@konobi> the regexp for matching isn't enough it seems
23:08 <@konobi> but yeah, you don't need to modify your lib code... just your tests
23:09 < othiym23> it's not a matter of actually modifying the driver, it's a matter of figuring out where the connection to the DB is actually being triggered and setting up the correct expectations
23:10 < othiym23> this would be easier if every database driver in the world weren't so hell-bent on lazy connections
23:11 < AviMarcus> Oh. Doh! I accidentally had dropped the uncompressed file into the same zip so it basically had double info in it. Geez.
23:37 < AnthonyCat> Hi, I'm using everyauth, and yesterday it worked, and now it says: 'Error: Step getRequestToken of `twitter` module timed out.' What can I do?
23:39 < LouisT> AnthonyCat: that sounds like an error when connecting to twitter
23:39 < LouisT> it might not be on your end
23:39 < LouisT> can you try to access the twitter page without using everyauth?
23:39 < tnorris> mmalecki: I noticed that the epsilon() check you pulled hasn't been put on the website. should I just open a bug for that?
23:41 < AnthonyCat> I can get twitter.com, but not api.twitter.com, if that is even the right domain?
23:41 < LouisT> AnthonyCat: yes, that's your issue right there
23:42 < LouisT> AnthonyCat: can you try to ping api.twitter.com or something?
23:42 < AnthonyCat> what do you see at http://api.twitter.com/?
23:42 < baryshev> Looks like twitter api is down now.
23:42 < baryshev> my service stop working too
23:42 < AnthonyCat> ok
23:45 < LouisT> AnthonyCat: and that's why you should always support more than one auth if you're using externals heh
23:46 < LouisT> i use google, yahoo and stackexchange for openid 
23:46 < AnthonyCat> yeah, I'm adding google now, so I can keep building my app. will ad fb also
23:53 <@mbalho> AnthonyCat: are you a cat or a human. just wondering
23:53 < AnthonyCat> tiger blood human
23:53 < bitfed> I thought you were half Ant, half Honycat
23:54 <@mbalho> ahh yes the wild honycat
23:59 < astropirate> << Honeybadger
23:59 < astropirate> honey badger don't care
--- Log closed Fri Nov 16 00:00:16 2012
