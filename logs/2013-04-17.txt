--- Log opened Wed Apr 17 00:00:37 2013
00:37 < fullusr> hi
00:38 < fullusr> anyones there
00:38 < fullusr> Error: socket hang up
00:38 < AAA_awright> No
00:38 < fullusr> no more info
00:38 < fullusr> im stuck
00:38 < fullusr> im making an http request
00:38 < AAA_awright> Neither me nor 983 of my cloest friends
00:38 < fullusr> that never returns
00:39 < fullusr> people here are so friendly that even their ghosts help
00:40 < jdelgado> @fullusr what is your question?
00:40 < fullusr> anyone cam help me please?
00:41 < fullusr> why im getting this error
00:41 < fullusr> im puzzled as that requesst made manually suceeds
00:42 < fullusr> im requesting an HTTPS  page via https.request(..
00:42 < fullusr> what i can do to debug it?
00:42 < MitchW> any node.js devs here know what would be required (roughly) to use _debugger Interface/Client on a V8/node context created from vm.createNewContext (I noticed the V8 context itself isn't exposed to JS, I'm happy to make a local patch to do that - just not too familiar w/ V8 itself to know how I can hook everything up - I suspect it may not even be possible and I just have to go w/ a child process which is probably better anyway)
00:42 < jdelgado> what error?
00:43 < fullusr> Error: socket hang up
00:43 < fullusr> and thats all
00:43 < fullusr> even res.on(´error´ ...
00:43 < fullusr> fails
00:44 < fullusr> if it only wee more desciptive
00:45 < jdelgado> @mitchw You can use child process, but you have to have some kind of interface that can exchange data. What are you looking to do specifically?
00:46 < jdelgado> @fullusr pastebin your code and I'll look at it
00:47 < MitchW> jdelgado: in short, have one node process debug another (programatically).  We've got some dev tools setup that use node (or v8, I suspect node is easier though and we've already got that going)
00:47 < MitchW> and they load other projects, and the idea is we want to be able to debug them - just trying to figure out a way to hook up node's internal _debugger module to do so
00:48 < MitchW> has been a pretty fun learning experience actually, learning a lot more of the node.js internals than I was familiar w/ before :)
00:48 < fullusr> @jdelgado http://alonsoj15.koding.com/app_1.js
00:48 < jdelgado> @mitchw So you want node A running node.js to pipe data to node B also running node?
00:48 < jdelgado> Yeah, node is really run
00:48 < jdelgado> fun*
00:49 < jdelgado> @fullusr I'll look right now.
00:49 < fullusr> Im making a request to mt gox
00:50 < MitchW> jdelgado: in general terms yes, i'm more interested in knowing if the _debugger Interface class can do it all for me without me having to handle RPC stuff myself though (eg: have node process A connect an Interface to node process B and give it commands, which seems doable as it's all just TCP V8 debugger protocol stuff)
00:50 < fullusr> i crypt some appsecrets and send them
00:50 < MitchW> I was wondering if I could do it within the same process though (on a context made by vm.createNewContext()) - but thinking about it more it makes more sense to use a child process incase it deadlocks anyway
00:50 < fullusr> make a simple request to the servers
00:50 <@isaacbw> oh boy
00:50 < fullusr> never returns
00:50 < jdelgado> @fullusr try grabbing the request module from NPM and use that - what you sent me is very odd
00:52 < fullusr> any clue on what the problem is?
00:53 < fullusr> why it times out
00:53 < jdelgado> @mitchw I doubt it would allow you to do it, since remote debugging isn't really what it was made for. I would recommend grabbing messanger.js and build out a custom solution to pipe your debugging data to another instance?
00:54 < jdelgado> @fullusr did you try the request from NPM?
00:56 < fullusr> no
00:56 < jdelgado> @fullusr add a user-agent for grins, once you try the request module from NPM
00:56 < MitchW> jdelgado: thanks for the tips - I think i'll try out both approaches, see what's possible and what isn't - if not just for the fun :)
00:57 < jdelgado> @mitchw right on, let me know if you have any other questions. Good luck!
00:57 < MitchW> thanks :)
00:58 < tpayne> hello. Whenever i reload my webpage during the middle of a node.js compile, it sends the Service Temporarily Unavailable page. but it gets cached and it doesn't reload for like a minute. Anyone experience this and know a way around it?
00:59 < EPIK> jdelgado: although it's highly possible you're another individual with that first initial and last name, i have to ask this question: is your name Jerry and are you from the midwest?
00:59 < jdelgado> @epik Jonathan from California. :)
00:59 < EPIK> right on :] would have been a funny coincidence
01:00 < jdelgado> :)
01:00 < jdelgado> @fullusr did you get it working?
01:01 < jdelgado> @tpayne You can send cache control headers with your 503's so they don't get cached? I have load balancers ahead of my instances so that doesn't ever happen though.
01:11 < fullusr> any debugger for node
01:11 < fullusr> ?
01:11 < fullusr> so i can see evrything step by step
01:12 < jdelgado> @fullusr did you use request from NPM?
01:14 < fullusr> im on that
01:14 < fullusr> but a debugger would be great
01:14 < fullusr> im rewriting
01:14 < jdelgado> try nodemon
01:15 < jdelgado> also, add a user-agent to the request, see if that fixes it. I saw a guy on another channel having the same issue earlier, and user-agent fixed it.
01:18 < jdelgado> @fullusr page me once you try it
01:19 < fullusr> it uses th same options object
01:20 < Regis_> i think not
01:20 < Regis_> only console.log
01:23 < jdelgado> @fullusr did you try the user-agent?
01:24 < fullusr> Works
01:25 < fullusr> Thanks
01:28 < niggler> are there ways to feed type or GC hints to v8 (in cases where gc'ing is frequent)
01:29 < jdelgado> @fullusr No problem, glad you got it working.
01:45 < madara> what is nodejs?
01:45 < madara> is it an interpreter for JS?
01:46 < jdelgado> @madara Yes, check out nodejs.org for more info
01:47 <@isaacbw> no it isn't
01:47 < madara> I am there I dont understand what it is
01:47 < madara> there is no explanation on that side of what it is exactly...
01:48 < madara> I do need a way to see the console and executed js files though
01:48 < madara> if anyone knows of one
01:51 < jdelgado> Node.js is a platform built on Chrome's JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.
01:57 < garthk> Fun WTF with node-tap and child tests: I t.plan(6), tap prints ok 1 to ok 6, then it complains the test count doesn't match the plan because found: 4 vs wanted: 6. Uh, if it only found 4, why do I see 6 ok lines?
01:58 < raj> how come in http://gruntjs.com/sample-gruntfile the `watch` plugin didn't have to be registered?
01:58 < garthk> If I remove the t.test("subtest", function(t) { t.plan(3); // surviving code here; } then it works fine.:(
02:01 < zivester> does winston have a built in way to log the contents of an object?
02:01 < ChrisPartridge> garthk: need to call t.end()? (wild guess)
02:01 < jdelgado> @zilester Yes, look at the documentation on meta data
02:05 < raj> no one uses the `watch` plugin?
02:06 < zivester> jdelgado, thanks
02:10 < raj> how come in http://gruntjs.com/sample-gruntfile the `watch` plugin didn't have to be registered as a task?
02:10 < jdelgado> @zivester My pleasure, pal.
02:10 < raj> how come in http://gruntjs.com/sample-gruntfile the `watch` plugin didn't have to be registered as a task (last block of code shown)?
02:16 < ChrisPartridge> raj: perhaps ask over in #grunt
02:17 < raj> ChrisPartridge, it's dead silent in there
02:17 < raj> I thought all node people use grunt?
02:19 <@mbalho> i dont and im a 'node people'
02:19 < raj> oh ok
02:19 <@isaacbw> what's grunt
02:19 < raj> it's from the same creator?
02:20 < chilts> I used to use grunt, now I don't
02:21 -!- isaacbw changed the topic of #Node.js to: Don't eat so much pickled herring! - http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
02:21 < jdelgado> $raj Yeah, I agree with chris, try out #grunt
02:22 < harrisonm> isaacbw: file change trigger framework
02:22 < raj> chilts, any idea on the answer?
02:22 < raj> i thought just for the `watch` plugin people would use it
02:22 < harrisonm> It's pretty neat, friend and I just recently started messing with it for a larger project
02:22 < raj> i guess incron is an alternative
02:22 <@isaacbw> wait, I need that
02:22 < chilts> dunno, but I know I had real troubles when moving from 0.3 to 0.4 for Grunt
02:23 < chilts> since much of it has changed
02:23 < chilts> and some of it is now and skeleton global, using your local install ... it's a bit messed up, though I think it does make sense the direction they're going in
02:23 < jdelgado> raj I use grunt, but I don't understand your question.
02:24 < jdelgado> Are you asking how to use watch?
02:25 < raj> jdelgado, the code block shown at the end of http://gruntjs.com/sample-gruntfile does not do `grunt.registerTask('test', ['watch'])` or `grunt.registerTask('default', ['watch'])`. Why?
02:26 < ChrisPartridge> raj: perhaps compare the watch plugin to another plugin, and see waht the difference is
02:27 < jdelgado> You call grunt.loadNpmTasks('grunt-contrib-watch'); instead
02:28 < jdelgado> Does that answer your question?
02:28 < raj> jdelgado, all the other tasks run grunt.loadNpmTasks() too
02:28 < raj> so that isn't unique with `watch`
02:28 < raj> what's unique is it isn't in the grunt.registerTask() list
02:29 < jdelgado> Oh! I understand 
02:29 < jdelgado> I thought you were confused on how to use it
02:30 < jdelgado> THe registertask function allows you to specify what calling a specific task will do - for example, do a hint, then quint etc
02:30 < ChrisPartridge> raj: most likely because it isn't a "runtime" task, it watches files to trigger the tasks (from what I saw)
02:30 < jdelgado> When you config for watch, it is already running, because you don't need to call a function to do it - it's the thing calling the tasks
02:31 < jdelgado> raj make sense?
02:32 < raj> aahh
02:32 < raj> I see
02:32 < raj> that makes sense
02:32 < raj> thank you :)
02:32 < raj> both
02:33 < jdelgado> Glad to help, and I think ChrisPatridge had a better explination :)
02:33 < jdelgado> and I just failed at spelling
02:34 < ChrisPartridge> I should probably use grunt... over my custom build scripts
02:34 < chilts> not failed, just 99 out of 100
02:35 <@isaacbw> watch make ftw
02:35 < jdelgado> Chris, it really helps. Plus you get a few minutes of breaktime if it is a long one. :)
02:41 < ChrisPartridge> jdelgado: coming from writing custom build processes for VB6 products, a custom node script doesn't bother me too much :P
02:42 < jdelgado> Hah, Node is a cakewalk compared to that.
02:43 < cdepauw> does anyone here know how arch linux's pacman tool achieves its columnar terminal regions?
02:43 <@isaacbw> cdepauw: what
02:46 < cdepauw> i want to make terminal application that organises its output as columns like pacman http://images.maketecheasier.com/2009/12/archlinux-pacmanS.jpg
02:47 < jdelgado> Hold on cdepauw I just saw this on npm yesterday
02:48 < jdelgado> https://github.com/visionmedia/node-progress
02:49 < jdelgado> cdepauw ^
02:49 < cdepauw> jdelgado thanks
02:50 < jdelgado> Glad to help
03:03 < owen1> why express/connect doesn't fit into node style - http://www.futurealoof.com/posts/the-tolerance-of-maturity.html
03:05 <@isaacbw> people gettin impatient
03:05 <@isaacbw> there's still plenty of time for better patterns to emerge organically
03:06 < jdelgado> beautifully put.
03:09 < kenperkins> man im looking forward to nodeconf. 
03:09  * kenperkins just got home from openstack summit
03:09 < jdelgado> how was it?
03:09 < kenperkins> really good, although I only did 1/2 the summit
03:13 < jdelgado> I don't know how useful openstack really is
03:13 < jdelgado> in my humble opinion
03:13 < kenperkins> don't know? or don't think it's really that useful?
03:13 < jdelgado> not useful
03:14 < kenperkins> from which perspective? portabilitiy?
03:16 < jdelgado> I would much rather run an AWS instance than screw around with openstack on my own hardware, wouldn't you?
03:16 <@isaacbw> someone should write a service that will mirror your application across multiple openstack providers
03:17 < uni_> hello guys, is it okay, to have a node.js beginner here ?
03:17 < jdelgado> uni_: of course, what is up?
03:18 < kenperkins> jdelgado: I think that's a naive view of the world. most applications are run on far more than one instance
03:18 < kenperkins> and a lot of companies have bet a lot of money on an open platform
03:19 < kenperkins> (that doesn't mean it will win, or even have any reasonable % of the market btw)
03:19 < kenperkins> also, you can provision openstack instances from a number of providers. doesn't mean run your own DC
03:20 < jdelgado> @kenperkins Oh absolutely, I just mean I think it is an amazing resource to simply start a new instance if one isn't working over at AWS rather than having to man an entire datacenter and worry about hardware. I think it is a great resource for service providers, but I don't see the usefulness for end companies. That's all.
03:20 < kenperkins> well, it's a function of scope and scale
03:20 < jdelgado> Of course. :)
03:21 < kenperkins> at the end of the day, openstack is just a package right? it turns a set of bare metal into APIs
03:21 < kenperkins> so whether you want to use a massive public cloud version of openstack (Rackspace)
03:21 < kenperkins> or you want to roll your own (IBM)
03:21 < kenperkins> or do a hybrid with public cloud, private cloud, and baremetal (hubspot) it's up to you
03:22 <@isaacbw> move to austin and run your servers from your bedroom when fiber is deployed
03:23 < Lorentz> I am seriously pondering on moving to somewhere where I can get fiber installed, and host my stuff from there.
03:23  * kenperkins has FioS, but not 1gb like KC or (austin)
03:23 < kenperkins> I get ~50mb down
03:23 < kenperkins> 20 up
03:23 < qq99> I'm jealous
03:24 <@isaacbw> I get 20mb down until my connection gets dropped every few hours
03:24 < Lorentz> I think I can get 100/40
03:24 < kenperkins> jdelgado: the biggest problem with openstack is that A) a lot of people don't really grok what it is exactly and B) there's still a ton of companies (mostly non-tech enterprise ones) that have no idea what "cloud" really is
03:24 < Lorentz> which will be solid, more than my 8/0.5 or something
03:25 < jdelgado> kenperkins: indeed
03:25 <@isaacbw> austin is nice if you can stand the heat
03:26 < kenperkins> isaacbw: when rackspace made their offer, I turned down relo to San Antonio :D
03:26 < kenperkins> (still took the job)
03:26 <@isaacbw> heh, probably a wise decision
03:26 <@isaacbw> texas is a strange place
03:27 < kenperkins> were you at txjs?
03:29 <@isaacbw> I lived near austin for a few years. The worst part I think was all the fire ants
03:30 <@isaacbw> no I wasn't
03:31 <@isaacbw> I don't like wearing shorts
03:32 < owen1> kenperkins: are there videos or blogs about the event?
03:33 < kenperkins> owen1: let me look
03:33 < kenperkins> I know we made a big announcement about a federated public cloud
03:33 < owen1> kenperkins: i got really excited about docker. is it even related?
03:34 < kenperkins> doesn't ring a bell, but I'm still pretty new
04:15 < hisham_hm> hi, quick question. "Total Packages: 27 688" in npmjs.org: is that 27688 different projects, or 27688 versions of projects?
04:16 < hackedy> hisham_hm: projects afaik
04:18 < astropirate> Does Handlebars have support for async helpers?
04:18 < astropirate> no nevermind
04:18 < astropirate> hitting DB from view would be a nasty thing to do
04:19 < hisham_hm> hackedy: wow. because, as a comparison, rubygems.org mentions 55034 gems. but then you click "all gems" and it's then "displaying 1-30 of 3499 in total"
04:20 < hackedy> owen1: isaac posted his slides from txjs https://dl.dropboxusercontent.com/u/3685/presentations/node-patterns/node-patterns.pdf
04:20 < hisham_hm> (ie, averaging, 15.72 gems (versions) per project)
04:20 < hackedy> hm, weird
04:21 < hackedy> https://github.com/isaacs/npm-www
04:22 < hackedy> hisham_hm: ^ dig around in there
04:26 < hisham_hm> hackedy: thank you!
04:27 < hackedy> hisham_hm: let us know what you figure out!
04:28 < inspiron_> anyone know a good combo for testing browser navigation? I'm looking at phantomjs + mocha. I saw casper but hear it doesn't work well with node.js?
04:40 < hisham_hm> hackedy: wow. it's really 27688 different entry names.
05:14 < JamesMGreene> isaacs Nexxy mbalho et al: So was there no way in Node.js 0.8.x to read just a few bytes from a file at a time in a streaming fashion other than using the `start` and `end` options?
05:14 < JamesMGreene> isaacs Nexxy mbalho et al: i.e. the equivalent of `readable.read([size])` in 0.10.x?
05:16 -!- mode/#Node.js [+o isaacs] by ChanServ
05:18 < JamesMGreene> whoamg isaacs was incognito
05:18 <@isaacs> JamesMGreene: hola
05:18 < hackedy> its the return of the isaac
05:18 <@isaacs> JamesMGreene: i guess my connection got hupped
05:19 <@isaacs> hackedy: what was that about npm-www?
05:19 < JamesMGreene> isaacs: Indeed. Did you see my question above?  Is there a 0.8.x version of `readable.read([size])`?
05:19 <@isaacs> JamesMGreene: npm install readable-stream
05:20 < hackedy> isaacs: hisham_hm wanted to know whether there were really 27688 individual packages
05:20 <@isaacs> JamesMGreene: otherwise, no, i mean, that's why we wrote streams2 :)
05:20 < hackedy> which there are
05:20 <@isaacs> ah, yep.
05:20 < hackedy> he figured that out.
05:20 < JamesMGreene> isaacs: Awesome, thanks.
05:20 <@isaacs> np
05:20 < hackedy> rubygems gives a statistic for "gems" on the front page that is actually individual published gems (one per version)
05:21 < hackedy> (this is what hisham_hm said)
05:21 <@isaacs> hackedy: no, there really are 55k or so gems
05:21 < hackedy> yeah ok
05:21 <@isaacs> hisham_hm: ^
05:21 <@isaacs> this site is useful: http://www.modulecounts.com/
05:23 < hackedy> isaacs: ooh graphs
05:24 <@isaacs> hackedy hisham_hm: Also: http://futurealoof.com/posts/open-source-ecosystem-growth.html
05:25 < hackedy> isaacs: yes, I've seen that post
05:30 < hackedy> isaacs: remember when node's entire api fit into a manpage?
05:30  * isaacs zzzz &
05:30 < hackedy> would a ronnjs based system to turn the markdown into manpages (node-path, node-fs, etc) be welcome in core, or should I do that in a module
05:31 < kenperkins> night
05:31 < hisham_hm> ouch, missed isaacs here.
05:31 < hackedy> -_____-
05:31 < hackedy> whatever I'll just make it a module
05:31 < hackedy> you know how sometimes you have a question and when you ask it you realize what the right answer is
05:32 < hisham_hm> my number of gems comes from here: https://rubygems.org/gems
05:32 < hisham_hm> oh, I'm an idiot. those are gems starting with A
05:33 < ChrisPartridge> hisham_hm: haha, nice one
05:34 < hisham_hm> ChrisPartridge: yeah, easy to miss when in the center of the page it says "Displaying gems 1 - 30 of 3499 in total" with a big "all gems" in red :)
05:38 < ChrisPartridge> hisham_hm: we had a guy do some work experience not long ago, gave him a stack of documents to convert to digital documents.. he was so proud when he finished, should of seen his face when we told him that was just the "A" pile...
05:44 < hisham_hm> ChrisPartridge: :)
05:46 < tinganho> I wonder if someone can help me debugging this https://github.com/joyent/node/issues/5314#issuecomment-16487469
05:47 < ljharb> tinganho: does it print anything to stderr?
05:47 < tinganho> no
05:48 < ljharb> tinganho: like, if you ssh in yourself, and run the command yourself, do you see output?
06:00 < tinganho> @ljharb it is kind of strange behavior that code block now works but there is some other code blocks that doesn't that has exec
06:00 < tinganho> @ljharb it doesn't output anything
06:01 < monokrome> Can anyone help me understand why string.match is different in NodeJS than Chrome?
06:01 < monokrome> I'm trying to do a search with regular expressions
06:01 < ljharb> monokrome: show some code. it's not different.
06:01 < monokrome> okay
06:02 < monokrome> '/dev/ttys000: 0 [204x64 xterm-256color] (utf8)'.match(/^([^:]+):\s(\d+)\s\[(\d+)x(\d+)\s[^\]]+\]\s\([^\)]+\)\s$/)
06:02 < ljharb> i see no match; it returns null
06:03 < monokrome> sorry string has a space at the end
06:03 < monokrome> but apparently in node it give sme the response I'd suspect
06:03 < noobee> is there any example of most efficient node js project structure, or any framework?
06:03 < monokrome> same with coffee wtf
06:03 < ljharb> monokrome: screw coffee, that's not js.
06:03 < ljharb> monokrome: i got the response i'd expect in v8, let me check chrome
06:03 < ljharb> same thing
06:03 < monokrome> oh
06:03 < ljharb> what cersion of chrome do you have
06:03 < ljharb> *version
06:03 < tinganho> @ljharb this code block doesn't work now when I ssh into myself https://github.com/tinganho/express-rollback/blob/master/index.js#L72-L89
06:04 < monokrome> I guess that you're not supposed to compile it before using it?
06:04 < monokrome> I had compiled it
06:04 < ljharb> compile?
06:04  * monokrome facepalms
06:04 < ljharb> download it.
06:04 < ljharb> the latest stable.
06:04 < monokrome> /.*/.compile()
06:04 < mscdex> compile()?
06:04 < ljharb> compile a regex? wtf?
06:04 < ljharb> you can try canary, but chrome intros a new bug every single version, so i'd stick with stable.
06:04 < ljharb> regexes don't compile; it's not python.
06:04 < ljharb> you just use them.
06:05 < mscdex> you can keep them around and 'cache' them
06:05 < mscdex> that's about it though
06:05 < ljharb> that's all you need
06:05 < mscdex> with pcre you can do (JIT) compilation, but not explicitly with the built-in regexp
06:09 < monokrome> Is there a way to force exec to block?
06:09 < ljharb> it does already
06:09 < ljharb> so, by using it?
06:09 < ljharb> :-p
06:10 < ljharb> perhaps you're confused cause console.log is async in browsers?
06:10 < monokrome> require('child_process').exec is blocking?
06:10 < ljharb> *in chrome
06:10 < ljharb> oh, i thought you meant regex exec
06:10 < monokrome> nope
06:10 < ljharb> no, why would you want it to block
06:10 < monokrome> I want to wait for a process
06:10 < ljharb> just pass a callback and put your code in there.
06:10 < ljharb> or use a promise.
06:10 < monokrome> I wanted to use a promise
06:11 < ljharb> so do that
06:11 < monokrome> Does NodeJS have native promises?
06:11 < ljharb> no
06:11 < ljharb> use a library
06:11 < monokrome> Any recommendations that aren't jQuery?
06:11 < ljharb> for example, https://npmjs.org/package/q
06:11 < ljharb> jquery's not promises.
06:11 < monokrome> That's why I didn't want it :}
06:11 < monokrome> and thanks
06:11 < ljharb> it's a promise-like implementation they call "Deferreds", that nobody should use on a server anyways.
06:11 < ljharb> but, i will say jquery deferreds are good enough for most use cases :-)
06:12 < monokrome> yeah but they also expose it as jQuery.promise :(
06:13 < ljharb> yeah, well, they do lots of things
06:13  * ningu wonders if there will ever be a promises implementation that takes root
06:13 < mscdex> real developers use callbacks!
06:14 < ljharb> ningu: all of them. the promises spec has taken root - the implementation doesn't matter.
06:14 < ljharb> mscdex: real developers pass promise.resolve as a callback ;-)
06:14 < ningu> ljharb: as far as I can tell it has not taken root at all. it's still a mess. nothing like the defacto standard of the async module.
06:15 < ljharb> the async module is no more a defacto standard than any promise implementation
06:15 < ningu> there is a small but vocal group of promise users
06:15 < ljharb> and it's a good module, but the promises spec is what's important. not the implementation.
06:15 < ljharb> you can't make any claims about nonvocal anyone :-p
06:15 < ningu> it's a statement of my perception
06:16 < ningu> anyway, what I'm talking about is not whether a particular spec is technically useful
06:16 < ljharb> a compliant implementation of any spec is always useful
06:16 < ljharb> particularly when there's many compliant implementations of it.
06:16 < ningu> I never claimed otherwise
06:17 < ljharb> like browsers. or JS engines. or promise libraries :-)
06:17 < ningu> my question was not: are promises useful?
06:17 < ljharb> you're asking when a specific one will become the most popular
06:17 < ljharb> and i'd say Q, and when.js, are probably the ones at the top imo, but i'd have to do research to back it up
06:18 < ningu> no, I'm asking *whether* it will become a defacto standard in the node community at all
06:18 < ljharb> in node core?
06:18 < ljharb> probably never
06:18 < ningu> no
06:18 < ningu> I'm aware of that
06:18 < ljharb> if you mean in node modules
06:18 < ljharb> i'd say, if module authors start accepting optional callbacks but returning promises, then you've got a defacto standard.
06:19 < ljharb> so it's on those that make modules to do it, and those that use modules to request it.
06:19 < ningu> everyone knows and understands connect and express. ditto with async. so far, there are no promise modules in that category in the node community, as far as I can tell.
06:19 < ljharb> same with anything
06:19 < ljharb> i don't know async that well. and no module i've ever used requires i know anything about it.
06:19 < monokrome> ljharb: How do you create a new promise object with this library?...
06:20 < ljharb> monokrome: with Q? Q.defer()
06:21 < monokrome> awh, okay! Thanks :)
06:22 < ljharb> monokrome: then that deferred, can either be rejected or resolved. if you want just the promise, use .promise off of it.
06:23 < s3shs> Is there any way to put async in to debug mode so it'll stop on every callback?
06:24 < ningu> s3shs: eh? if you use node-inspector you can set breakpoints
06:25 < s3shs> So I've got these 3000 test cases all lined up in an async.series.
06:25 < s3shs> That's alotta breakpoints.
06:25 < s3shs> I probably need to make an array of these tests and be smarter about it.
06:25 < ningu> um... well, yes. :)
06:26 < ljharb> s3shs: yup. then you can slice it arbitrarily.
06:29 < s3shs> Yeah.
06:29 < monokrome> Kind of confused. The Q documentation says that you used Q.deferred for things that are "callback based"
06:29 < s3shs> Is Q the new async
06:29 < s3shs> ?
06:29 < monokrome> Does that mean that I'm using these the wrong way for catching an event?
06:30 < monokrome> I created a defer, bound to an event that resolves/rejects and then returned the promise
06:30 < monokrome> Is there a better way to handle an event like that?
06:32 < ljharb> monokrome: that seems right to me
06:32 < ljharb> you return the promise after you bind the event
06:32 < ljharb> but the event callback simply resolves or rejects the deferred
06:34 < monokrome> ljharb: Yep, that's what I'm doing
06:34 < monokrome> Thanks :)
06:35 < ljharb> np
06:53 < monokrome> hmm... has anyone else noticed that a child processes stdout's data event can fire after the subprocess exit event has fired?
06:56 < ChrisPartridge> monokrome: take a look at the docs, exit states that stdio streams could still be open - take a look at the close event
07:00 < pats_Toms> hi, I find this topic online - http://stackoverflow.com/questions/9709912/separating-file-server-and-socket-io-logic-in-node-js
07:00 < pats_Toms> about the answer - how right is to require that io object?
07:01 < pats_Toms> If I will require it in multiple files I can't do it wrong? ^_^
07:03 < monokrome> ChrisPartridge: Thanks. That's some weird behavior O_o
07:09 < ChrisPartridge> monokrome: not really that weird, just covers many different use cases
07:24 < thirdknife> http://pastebin.com/Gr377x1Z
07:24 < thirdknife> on line 51 my app crash
07:24 < thirdknife> TypeError: Cannot read property 'user' of undefined
07:24 < thirdknife> http://dresende.github.io/node-orm2/
07:25 < thirdknife> I am doing the way this page says
07:25 < thirdknife> any ideas whats wrong
07:27 < CPartridge> thirdknife: you're not doing it the way the web page says :P
07:27 < ChrisPartridge> e.g. "Don't forget to use it before app.use(app.router), preferably right after your assets public folder(s)."
07:27 < ChrisPartridge> it's in bold, right underneath the example :)
07:36 < thirdknife> ChrisPartridge, thanks I should keep my eyes open
07:36 < thirdknife> ChrisPartridge, thanks :) I should keep my eyes open
07:38 < ChrisPartridge> thirdknife: np's :)
07:39 < [AD]Turbo> yo
08:22 < nocturne7> when sending an http response is it better to use res.writeHead() or res.send() ?
08:30 < genazt> hi, does someone know about crypto ?
08:31 < genazt> i have a cipherstream which takes buffers and tries to encode them 
08:31 < genazt> but i only get empty slowbuffer objects out of the crypter
08:32 < genazt> The cipher streamer: http://hastebin.com/divixefaxo.js
08:43 < ashnur> do you know a module which listens on a port, and writes everything into a file or stdout what it receives? i know its just a few line, but if its already done... 
08:43 < ChrisPartridge> come on ashnur, don't be lazy :P
08:44 < ashnur> ChrisPartridge: i am not lazy, i never did this before, i only know its easy, i do not know how to do it
08:44 < ashnur> i am trying to do it in the meantime, but if i would have it. would help a lot
08:48 < sinclair-linux> crazy question, but does anyone here know PHP?
08:49 < screamingbanshee> @sinclair-linux yea
08:49 < ashnur> i knew
08:50 < sinclair-linux> ok, i have a 4 byte string array 
08:50 < sinclair-linux> i wish to read those 4 bytes and a integer
08:50 < sinclair-linux> well, take 4 bytes (encoded as a string in PHP) and turn them into a unsigned int 
08:50 < screamingbanshee> OMG wut
08:50 < screamingbanshee> oh
08:50 < screamingbanshee> um
08:50 < screamingbanshee> you're thinking WAY too hard for PHP
08:51 < ashnur> :D
08:51 < ashnur> no you are not
08:51 < sinclair-linux> screamingbanshee: not really
08:51 < ashnur> i have to search for this though
08:51 < sinclair-linux> screamingbanshee: im trying to read a file header
08:51 < screamingbanshee> then I don't have nearly enuf info or you're courting a bug
08:51 < sinclair-linux> courting a bug?
08:51 < screamingbanshee> :D everybody else seems to have it in hand tho
08:51 < screamingbanshee> yeha
08:51 < Bunge_> it though and 40yo scotch
08:51 < screamingbanshee> *yeah
08:53  * sinclair-linux wonders why the PHP channel is invite only
08:54 < LuckyBurger> who cares its php
08:54 < master5o1> lol
08:54 < master5o1> because nearly everyone would go in and troll.
08:54 < LuckyBurger> ^
08:54 < master5o1> ".NET is so much better than PHP"
08:54 < master5o1> "Node.JS is so much better than PHP"
08:54 < master5o1> etc
08:55 < master5o1> "PHP is full of holes and impossible to fix"
08:55 < LuckyBurger> node.js > *
08:55 < master5o1> :)
08:55 < LuckyBurger> i actually do have a question tho.
08:55 < sinclair-linux> well, i cant say i like PHP at all, needless to say, i find myself trying to code this in PHP
08:55 < dypsilon> it's a marketing strategy: "I won't ever join a club if they are willing to accept me"
08:55 < LuckyBurger> Im using express, and it seems as if a response is not waiting for a db op to finish. do i need to  use something like async ?
08:56 < master5o1> er.
08:56 < master5o1> shouldn't it be async anyway?
08:56 < dypsilon> LuckyBurger, are you calling res.send inside the callback?
08:56 < LuckyBurger> yes
08:56 < LuckyBurger> http://pastebin.com/8tQFJCad
08:56 < master5o1> oh wait.
08:57 < master5o1> i'm thinking this is a bitcoin channel :S
08:57 < LuckyBurger> as is, i get a 503. probably b/c nothing is being sent immediately.
08:57 < gildean> ashnur: this is how you listen on a port and pipe the input to stdout as a oneliner:
08:57 < LuckyBurger> if i uncomment the hash, it sends the hash as expected
08:57 < gildean> var server = require('net').createServer(function (conn) {conn.pipe(process.stdout); }).listen(9600);
08:58 < ashnur> sinclair-linux: i am not sure its this you want, but maybe worth a look: http://proger.i-forge.net/Forcing_PHP_signed_integer_as_unsigned/O1p
08:58 < ashnur> gildean: thanks, i have not imagined it can be done in one line :P. 
08:58 < dypsilon> LuckyBurger, you are not expecting the new user to be in the users array, are you?
08:59 < LuckyBurger> well if it isnt then a new record should be created
08:59 < gildean> ashnur: if you just create a writeStream, then you can pipe the input to a file just as simply
09:00 < dypsilon> LuckyBurger, not answering your question, but: use bcrypt.
09:00 < LuckyBurger> ya ya
09:00 < dypsilon> so what is your output right now?
09:00 < gildean> ashnur: btw. the api docs have pretty good examples on all of these things
09:00 < LuckyBurger> im too lazy to compile it :p
09:00 < ashnur> i think it's all that i need, i have something in a browser script which i have to read in cli, so i thought i could just send it from there 
09:01 < dypsilon> LuckyBurger, use the javascript one
09:01 < LuckyBurger> atm, it gives 503
09:01 < LuckyBurger> ? i thought bcrypt had to be compiled
09:01 < dypsilon> what was 503 again?
09:01 < LuckyBurger> service unavailable or something
09:01 < LuckyBurger> 1 sec
09:01 < dypsilon> LuckyBurger, there is a javascript only version out there somewhere
09:01 < ashnur> gildean: yeah, i was reading them, but sadly enough i was looking at http not net, and although it felt wrong, i was not aware what was "wrong" 
09:01 < LuckyBurger> Service Temporarily Unavailable
09:01 < LuckyBurger> well ill looky for it at some point :)
09:02 < gildean> ashnur: you could do it with a http-server also, it just needs a little bit more code
09:02 < genazt> does anyone here work with streams2 old mode ?
09:02 < genazt> i get an error trying to set an stream2 readbale into old mode
09:02 < Bunge_> heat for three years shitting myself and ignore that please
09:03 < Bunge_> there is someone is going to make up your vagina and fill that in some bitches mouth
09:03 < Bunge_> im sorry to say 'come on my ssd because its an animal instinct to leave me alone let me guess who gets killed by a
09:03 < dypsilon> LuckyBurger, dont know why you get 503. is console saying anything?
09:03 < master5o1> bunge_ is my bot.
09:03 < master5o1> https://github.com/master5o1/jsBot
09:03 < LuckyBurger> console says notta :)
09:03 < ashnur> gildean: less code is good ;) thanks again.
09:03 < genazt> TypeError: Cannot read property 'flowing' of undefined
09:03 < genazt>     at Cipher.Readable.on (_stream_readable.js:655:44)
09:03 < gildean> np
09:03 < genazt> is the error
09:04 < LuckyBurger> like i said i think its cause of the async db op
09:04 < LuckyBurger> i might need to wrap it in async or something
09:04 < LuckyBurger> i dunno
09:04 < dypsilon> LuckyBurger, try to log the "err" vars coming from the db, maybe they ll tell you something funny
09:04 < LuckyBurger> k
09:04 < genazt> http://hastebin.com/cotucileku.js
09:05 < dypsilon> LuckyBurger, if you mean package "async", it doesn't really do much, just gives you readable callbacks
09:05 < dypsilon> if you just mean async, well, it's already async
09:06 < LuckyBurger> i meant the package
09:07 < LuckyBurger> and the console.log isnt being called
09:07 < dypsilon> LuckyBurger, so basically your script exits at line #4?
09:08 < MWD> Is there any way to pass a sock.io socket to a child_process?
09:08 < dypsilon> LuckyBurger, if you are using the native mongo driver, you probably want to call db.collection('users').findOne
09:08 < LuckyBurger> dypsilon 1 sec
09:08 < LuckyBurger> fixed it
09:09 < LuckyBurger> wrapped it in async and it works
09:09 < LuckyBurger> ugh some things about node are weirddddddd
09:09 < dypsilon> show me
09:09 < LuckyBurger> http://pastebin.com/jTWtvZii
09:09 < LuckyBurger> borked: http://pastebin.com/8tQFJCad
09:09 < LuckyBurger> the only diff is wrapping it in async
09:10 < LuckyBurger> i would love an explanation :D
09:10 < dypsilon> LuckyBurger, this doesn't make any sense, this probably doesn't work
09:10 < LuckyBurger> :D but it does rofl
09:11 < dypsilon> i don't believe you :)
09:11 < LuckyBurger> 1 sec ;)
09:11 < dypsilon> i'm pretty sure you have to call db.collection('users').findOne()
09:11 < LuckyBurger> im not using the native driver
09:11 < LuckyBurger> im using mongojs
09:11 < LuckyBurger> xD
09:12 < boof> oh
09:12 < dypsilon> ah ok
09:12 < LuckyBurger> ;)
09:12 < LuckyBurger> i dont get what async does :D
09:12 < LuckyBurger> i think it waits for all callbacks to be completed?
09:13 < dypsilon> it looks pretty pointless to me, to wrap one function in async.series
09:13 < Venemo> hi :)
09:13 < LuckyBurger> dypsilon, but its the difference in it not working and working :P
09:13 < LuckyBurger> 1 sec ill show u
09:14 < dypsilon> LuckyBurger, even if it works, i wouldn't ship this code
09:14 < LuckyBurger> why is that dypsilon?
09:14 < LuckyBurger> its not for production its me toying around
09:15 < dypsilon> LuckyBurger, ah well
09:17 < sinclair-linux> ashnur: thanks, that is pretty much what i went with
09:19 < ashnur> sinclair-linux: great, it meant i still can google :D
09:33 < Tsojcanth> hi, i found some probably buggy/bad/wrong code in the Node.js documentation and I can't find a way to contact the documentation maintainer
09:33 < genazt> Tsojcanth, file a issue
09:36 < gildean> Tsojcanth: which example are you referring to?
09:36 < Tsojcanth> thanks genazt, filing now
09:37 < zot> is there a more graceful way to deal w/ EventEmitter adds/removes?  i have code that may or may not work, but feels awkward: http://pastebin.com/W6XQRY88
09:38 < zot> do i have to create the variable (named) function, or is there some other magic/
09:38 < zot> ?
09:57 < zot> dead in here, or does the emitter just get no love? :)
09:59 < gnarf> zot: seems sane
10:13 < master5o1> if i create a repl to take cli input, can i still console.log all the fucking time or would there be conflicting things to the terminal?
10:13 < Bergle_2> might someone explain to me what side effects doing     "_ = new require('lodash')"  notice the extra 'new' in there - the 'new' appeases webstorm for code completion and warnings ... but i dont quite understand what side effects it may have on code 
10:24 < standoo1> hi
10:29 < alex88> hi guys, is there a way to have numbers with more then 15 decimals for precision?
10:38 < sinclair-linux> hey guys, any express experts  around?
10:41 < spion> sinclair-linux, you might have better luck in #express
10:43 < Dearcham> HI there !
10:44 < Dearcham> I'm stucked  for some days on a pb : 
10:45 < Dearcham> Using nOde.js and serialport lib i try to send raw byte array  to a robot ( it can't receive anything else).
10:46 < Industrial> Why does util.inherits set a super_ on the subclass?
10:47 < Industrial> actually, I'm fine with that. How do I access it from inside the constructor?
10:48 < Brunna> how can I install nodeJS in windows?
10:48 < Industrial> Brunna: run the installer
10:49 < syncLock> Pingeling
10:50 < Industrial> this.__proto__.constructor.super_
10:50 < Industrial> thats ugly
10:50 < Industrial> :(
10:50 < syncLock> )
10:52 < syncLock> this many users and still a dead channel :D
10:55 < pachet> probably more asleep than dead
10:55 < pachet> 4am on the wc
10:55 < zot> yep yep
10:56 < zot> although there's a fair euro contingent at times
10:56 < pachet> thats true
10:59 < Dearcham> It was working perfectly with this  processing command : byte[] header = new byte[] { 0xFF, 0xFF, 0xAA, 0x55, 0xAA, 0x55, 0x37, 0xBA };  but from what i read javascript has a native problem with byte array
11:01 < Dearcham> heard node.js could help but don't know exactly how 
11:02 < LuckyBurger> @ Dearcham : http://nodejs.org/api/buffer.html
11:08 < Dearcham> @LuckyBurger ok i'll have a look at this thx !
11:43 < geNAZt-PC> does someone work with streams2 ?
11:43 < radhakrishnan> hi team
11:43 < zot> anybody have a clue whether Max call stack is a typical problem when using step?  i have a somewhat contrived performance harness, and want to verify that the call stack problem is only an artifact of the harness, not of the actual msg'ing library underneath.  approach suggestions welcome :)
11:43 < radhakrishnan> i am using jsdom in my  app
11:43 < geNAZt-PC> how can i tell a readable stream to give me the data after it comes in ? (so it emitts a readable event directly after it)
11:43 < radhakrishnan> i am trying to read iframe object
11:44 < pachet> zot: i've never experienced that :o
11:44 < radhakrishnan>  var elementFrame = document.createElement('iframe');             elementFrame.style.display = 'none';             elementFrame = document.body.insertBefore(elementFrame, null);              if (elementFrame.contentDocument) {                 element = elementFrame.contentDocument;             } else if (element.contentWindow) {                 element = elementFrame.contentWindow.document;             }
11:44 < radhakrishnan> but when i do console.log(<iframe obj>
11:44 < radhakrishnan> getting null
11:44 < geNAZt-PC> maybe because it doesnt load iframes ?
11:44 < zot> pachet: are there smart ways to debug the max call stack issue?  (i spose i can debug it and do 'bt'...)
11:47 < _algo_> hi
11:48 < _algo_> how do you gracefully update apps for Node.JS & Socket.IO ?
11:48 < _algo_> I know how to gracefully restart the server.. But there's a client side also
11:59 < JamesMGreene> isaacs konobi mbalho Nexxy hij1nx substack et al: Do ReadableStreams have a 'close'/'destroy'/'dispose'/etc. method that I can call explicitly if I want to dispose of the stream before hitting the end of its data?
12:02 < JamesMGreene> I don't see any such method in the docs
12:06 < _ior> add a cat to that
12:07 < _ior> wrong channel :)
12:11 < _ior> huh
12:11 < _ior> so i have a series of http requests to a restful api that's kinda wonky in the number of times it makes me query it to get simple results out of it
12:12 < _ior> and the last step is to pipe the response into writeable stream to a file
12:12 < _ior> (appended, that is)
12:12 < _ior> and then iterate over the http api request until i received all the results
12:13 < _ior> i want to delay the iteration until the writeable stream closes... but the callback, despite being placed in outfile.on('close', callback) executes before the event is fired 
12:13 < CestSebastian> hey guy, what procedure do you do to deploy nodejs apps? so far i've been running them simply like node server_file.js, i'm just curious if there are some best practices?
12:15 < Venemo> CestSebastian, there are lots of different practices, pick one depending on your requirements
12:16 < CestSebastian> Venemo, could point me in the right direction? maybe link to a deployment procedure?
12:18 < _ior> my deployment procedure: svn up
12:18 < _ior> then i daemonize by putting a script in /etc/init.d/
12:19 < _ior> there's probably other good ways, but that worked for my needs
12:20 < Venemo> CestSebastian, some people just make them daemons with some init script.
12:20 < Venemo> CestSebastian, another popular practice is to route it through nginx, if you wish to run multiple node apps on the same port (like 80) and distinguish based on hostname
12:21 < CestSebastian> Venemo, thanks, brb
12:21 < _ior> so i've got this: https://gist.github.com/anonymous/7b68303e0fb2d3daefa4
12:21 < _ior> which as i say, executes the callback before the outfile.on('close') prints its console log
12:22 < _ior> any advice? much appreciated
12:55 < unijad> hello guys, from where i can start understanding the authenticating in node ?
13:01 < geNAZt-PC> node doesnt have any authenticating
13:12 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:36 < MI6> joyent/libuv: Saúl Ibarra Corretgé master * a92b66f : unix, windows: add uv_has_ref() function - http://git.io/chKoOg
14:03 < kevinsimper> Does somebody know a library dealing with utf8 BOM?
14:10 < boyxboy77> http://xhotspanishgirls.blogspot.com/2013/04/hot-galleries.html
14:10 < kenperkins> eh?
14:10 < niggler> welcome to the internet kenperkins .  that is called spam
14:10 < kenperkins> niggler: I know
14:11 < kenperkins> just don't see it so often :)
14:11 < zaleb> that they still even try..
14:11 < niggler> if one person clicks it, its worth the effort
14:18 < marcloney> gs
14:31 < MI6> joyent/node: Ben Noordhuis master * c7d7072 : v8: reapply floating patches (+1 more commits) - http://git.io/tL0tVA
14:37 < radvieira> has anyone been able to install bcrypt successfully on windows?
14:44 < rking> niggler: You around, man?
14:44 < niggler> hey sup rking 
14:44 < rking> I'm about to use your xls stuff at work, but I'm such a clueless node user I'm struggling with the basics. =)
14:44 < rking> This time on Ubuntu 12.04, I did apt-get install nodejs npm
14:44 < niggler> do you need to apt-get npm?
14:44 < ejnahc> is now.js deprecated?
14:44 < geNAZt-PC> and apt-get with ppa or without ?
14:45 < rking> But: npm install xlsjs xlsx  fails saying npm ERR! message No compatible version found: xlsjs
14:45 < rking> No special PPA
14:45 < geNAZt-PC> i guess the node version from the repo is too old
14:45 < geNAZt-PC> so you end up with a version about 0.5
14:45 < niggler> rking what does node --version say
14:45 < geNAZt-PC> or so
14:46 < rking> nodejs --version => v0.6.19
14:46 < niggler> actually before you do that
14:46 < rking> Why would the node version make xlsjs/xlsx unavailable?
14:46 < geNAZt-PC> beucause it uses core functions that are implemented after 0.6
14:46 < rking> Aha
14:46 < niggler> rking the engines field used to be mandatory 
14:47 < niggler> I'm bumping that down to 0.6
14:47 < rking> OK, so just install node+npm from GitHub ?
14:47 < niggler> one sec rking 
14:47 < rking> k
14:48 < niggler> ok rking try again
14:49 < rking> npm ERR! message No compatible version found: xlsx
14:49 < rking> npm http GET https://registry.npmjs.org/xlsjs
14:49 < rking> npm http GET https://registry.npmjs.org/xlsx
14:49 < niggler> err one more time
14:49 < rking> npm http 304 https://registry.npmjs.org/xlsx
14:49 < niggler> i just pushed a version with a lower engines
14:49 < niggler> i don't think I'm using anything node-specific so this should work in 0.6
14:52 < rking> niggler: Sweet!
14:52 < rking> OK, I'll test it out today.
14:52 < rking> (I'm replacing antixls because Perl stuff is a pain to install)
14:52 < radhakrishnan> Hi 
14:52 < radhakrishnan> any one used jsdom
14:53 < radhakrishnan> i am facing issues
14:53 < radhakrishnan> elemenFrame.contentWindow is showing null
14:53 < radhakrishnan> always
14:53 < theblackbox> hello all, figured you end up spending a large amount go your time pointing out where people get 'socket.io/socket.io.js' from ;) so I thought I'd ask - where would I get it from using Karma/Testacular?
14:54 < theblackbox> from what I had gathered I include it in the files = […, 'socket.io/socket.io.js', …]; of karma.conf.js
14:54 < theblackbox> but that doesn't seem to be doing what I was expecting
14:55 < theblackbox> anyone know the correct way of doing this?
15:02 < theblackbox> reading the Karma config it would seem like {pattern: 'socket.io/socket.io.js', included: true} should work… but I'm guessing that isn't doing what I think it is
15:04 < MI6> joyent/node: Ben Noordhuis master * f044a6f : buffer: upgrade to new V8 profiler API - http://git.io/Zw877w
15:08 < theblackbox> nor does {pattern: 'http://localhost:8000/socket.io/socket.io.js', included: true} work, for instance
15:12 < _algo_> theblackbox: not sure socket works w/ karma
15:13 < _algo_> but you can move socket.io.js under your public folder
15:13 < _algo_> so that karma will find it
15:13 < _algo_> and the hint: this channel is dead
15:13 < _algo_> (unless you say something bad about node)
15:13 < theblackbox> I would expect it to work with socket.io … it apparently USES socket.io =/
15:14 < _algo_> theblackbox: sure, go ahead.
15:14 < _algo_> tell me your results.
15:15 < theblackbox> and I know what you mean (was reading some exceptionally shoddy article claiming that the only way to get help via irc is to frame your question in the shape of a flame war!)
15:15 < _algo_> theblackbox: I tried it and got help
15:15 < _algo_> here
15:15 < _algo_> so it definitely works.
15:15 < theblackbox> haha
15:16 < _algo_> but you've got your answer already
15:16 < _algo_> so g'luck
15:21 < RobW> Quick newb question -- what is the /y/i in (/y/i).test(prop) ?
15:21 < RobW> Kind of hard to search for /y/i on google.
15:21 < SomeoneWeird> it's a regex
15:23 < Honus_js> hello everyone
15:23 < theblackbox> bah! my own dumb ass fault, I was hitting the wrong port (<facepalm>)
15:23 < Honus_js> is anyone here savvy when it comes to outbound http requests?
15:24 < Honus_js> via node, obviously
15:24 < RobW> SomeoneWeird: Thanks, I was wondering, but thought that test() worked the opposite way, ('haystack').test('needle')
15:25 < RobW> Ahhhhh wait, got it, test method on the regex object. New to oop too.
15:33 < superjoe> substack, wtf that dude just added you to the repo with no warning?
15:34 < superjoe> that's bizzare
15:34 < niggler> lol github at work
15:38 < marshall> I've got a method on my prototype chain that is somehow getting the global 'this' instead of it's instance of it's constructor. I don't think I'm doing 'this = ' anywhere. What might cause a problem like that?
15:39 < SomeoneWeird> hard to say without code
15:39 < marshall> nevermind, just got it
15:39 < tellnes> marshall: think of global as the default value for this
15:40 < marshall> did a `.call` with the wrong `this`
15:40 < marshall> FML
15:40 < theblackbox> I used to sit next to a senior dev who spouted that one as an excuse when I asked for guidance …. very annoying ;)
15:40 < marshall> thanks SomeoneWeird, tellnes 
15:40 < SomeoneWeird> lol
15:41 < SomeoneWeird> it's always after you ask for help that you figure out whats wrong
15:41 < theblackbox> hah, yep
15:42 < theblackbox> Rubber Duck Development ;)
15:42 < gildean> that's called rubber duck debugging
15:42 < theblackbox> I prefer a stuffed otter called bruce, but each to their own
15:43 < marshall> I prefer to just write the code with my eyes closed, shut my laptop and head out
15:44 < marshall> instead of getting caught up trying to make things work
15:51 < MJR_> hi all
15:51 < MJR_> i had a quick question
15:52 < CoverSlide> how is babby formed?
15:54 < MJR_> lol
15:54 < MJR_> actually, how can i write to a net.server object
15:54 < MJR_> from an external process
15:54 < MJR_> if net.server is a net.socket object, i should be able to write to it, but net.server doesn't have a write method
15:55 < CoverSlide> net.server isn't a net.socket
15:55 < CoverSlide> net.server creates net.sockets
15:55 < MJR_> ah ok
15:55 < MJR_> was confused by "This class is used to create a TCP or UNIX server. A server is a net.Socket that can listen for new incoming connections."
15:56 < MJR_> so how can i make the socket object it creates accessible globally
15:56 < CoverSlide> what' having it accessible globally have to do with external processes?
15:57 < CoverSlide> you mean other modules?
15:57 < marshall> CoverSlide: i would also like to know
15:58 < marshall> CoverSlide: how is formed a babby
16:00 < MJR_> perhaps that wasn't the best way to phrase it
16:00 < MJR_> i'll give a little more detail
16:00 < MJR_> i am using socket.io-client to subscribe to some data feed
16:00 < MJR_> i would like to make this data available to all who would like to subscribe to me
16:01 < teadict> has anyone used Swagger?
16:01 < MJR_> so i want to serve this data to any clients who connect
16:01 < teadict> looks sweet
16:01 < MJR_> unfortunately, i can't write to my server object, and i don't know what socket it is using
16:01 < MJR_> or how to access it
16:02 < MJR_> basically its just a data stream, and i'd like to let anyone listen to it over a simple tcp socket connection
16:02 < MJR_> what do you think?
16:04 < Slaytorson> Does anyone know where I can find an example for node-expat - https://github.com/astro/node-expat ?
16:04 < MJR_> i think it relates to the server's connection event, but i don't know how
16:07 < MJR_> if it automatically creates the socket whenever a connection event happens, how do i write to it?
16:08 < MJR_> wow, thanks for all you guys help
16:09 < gildean> MJR_: not enough info to really comment
16:09 < MJR_> just saying, how do i access the socket object created by createserver
16:10 < MJR_> if createServer() creates a new net.Socket object, how do i write to that object?
16:14 < MJR_> http://pastebin.com/0ZEVWfDu
16:14 < MJR_> there is an example
16:14 < context> mjr_: do you know what c is ?
16:15 < MJR_> i thought it was the socket that i created
16:15 < MJR_> since i can write to it...
16:15 < context> mmmm net is different i guess :x
16:15 < MJR_> should i not use net? i honestly don't know if i need it, i'm just trying to translate some socket.io data into a format actually useable by servers
16:16 < context> mjr_: you know there is a socket.io-client right ?
16:16 < MJR_> yes, and i have it
16:16 < MJR_> i am using it to listen to data from a socket.io server
16:16 < MJR_> i need to publish that info to a tcp connection
16:16 < MJR_> so that java/c++/C# programs can listen to it
16:16 < context> mjr_: http://nodejs.org/api/net.html#net_net_createserver_options_connectionlistener
16:17 < context> createServer RETURNS the server.
16:17 < context> nothing cares about what your callback returns
16:17 < MJR_> ah...i'm on that page now, is there a way to access the socket object that the server creates?
16:18 < MJR_> "This class is used to create a TCP or UNIX server. A server is a net.Socket that can listen for new incoming connections." <---- confusing
16:18 < context> how is that confusing?
16:18 < andredublin> wouldn't be var server = require('net').createServer(....)
16:18 < MJR_> it says that a server is a socket
16:18 < andredublin> and server would be your object
16:18 < MJR_> ok...and if a server IS a socket
16:18 < MJR_> i should be able to write to it
16:19 < MJR_> since a socket is a duplex data connection
16:19 < context> mjr_: uhhh no ?
16:19 < context> a server socket is listening
16:19 < context> its not conencted to anything
16:19 < context> you cant write to nothing
16:19 < context> your connectionListener callback is given the 'client' socket that the server creates when something connects to it
16:20 < context> and THAT socket you are able to write to
16:20 < MJR_> ah ok
16:20 < MJR_> can i make that socket globally available
16:20 < MJR_> so that the socket.io-client can write to it?
16:21 < context> what
16:21 < context> you are trying to make a server, to use with socket.io-client? why arent you just using socket.io
16:21 < MJR_> to summarize my goal
16:21 <@isaacbw> that would be too easy
16:21 < MJR_> i want to collect information from a socket.io server, then publish that info over a tcp socket
16:21 < context> isaacbw: when in doubt, take the wheels off the care, then drive to work.
16:22 < context> car*
16:22 < MJR_> i have no control over the format of the data i get
16:22 < MJR_> in this case, its socket.io
16:22 < MJR_> i want it to be tcp
16:22 < MJR_> so i am collecting the info using socket.io-client
16:22 < andredublin> so socket.io will be the client and java/c++/c# is the server in your case?
16:22 < context> you just said you are collecting data from the socket.io server, so you ARE formatting the data however you want
16:23 < MJR_> socket.io-server--socket.io--->socket.io-client----tcp--->java application
16:24 < jocafa> -> XML -> stack trace
16:24 < jocafa> ¬¬
16:24 < MJR_> the socket.io-client must listen to the socket.io data, then serve it over a tcp port to whoever chooses to connect, so in this case "client" and "server" don't really fit very well
16:24 < MJR_> driver would be a better term
16:25 < MJR_> it basically will translate socket.io data into regular tcp
16:25 < andredublin> so on successful connection, write the data to your java application in the callback
16:26 < context> i think mjr_ has no idea how any of this stuff works
16:26 < andredublin> lol
16:26 < MJR_> what i'm trying to say...is that this is server to server communication
16:26 < andredublin> correct
16:26 < andredublin> so
16:26 < context> hahaha! --> so in this case "client" and "server" don't really fit very well
16:26 < MJR_> i am trying to emulate multicasting
16:27 < context> mjr_: there is still a 'server' and there is still a 'client'
16:27 < MJR_> ie. i want my javascript app to listen to the socket.io data feed, and whoever connects will be passed anything it hears...it should echo whatever it receives to any listeners
16:27 < context> your nodejs socket.io 'server' IS the 'client' to your java app 'server'
16:27 < MJR_> yes exactly
16:27 < context> the client is whatever is 'connecting' to a 'server'
16:27 < MJR_> no wait, other way around
16:27 < MJR_> yes, the java app will connect to the javascript
16:27 < MJR_> it is the client to the javascript server
16:27 < context> maybe you should get your networking terms down before you try saying 'client and server makes no sense'
16:28 < MJR_> i understand the terms
16:28 < MJR_> my application will be a client to the socket.io server
16:28 < MJR_> it will be a server to the java client
16:28 < andredublin> client(socket.io) --> server(node.js, socket.io) ----> java(using sockets)
16:28 < context> https://github.com/Gottox/socket.io-java-client
16:28 < andredublin> thats what im thinking
16:29 < MJR_> lol
16:29 < MJR_> yeah, that library doesn't work
16:29 < Madwill> i love that there is socket io client for everything
16:29 < MJR_> trust me i tried a long time
16:29 < context> so find a socket.io java client, like i just did in 5 seconds, or dont use socket.io as your protocol to get data to your java app.
16:29 < MJR_> if i could pick the format my data is delivered in, i would choose multicast 
16:29 < MJR_> or an stunnel
16:29 < MJR_> but i can't
16:29 < context> it was last authored 8 days ago and doesnt work ?
16:29 < prettyrobots> I want a writestream that gathers into memory.
16:29 < MJR_> so i'm forced to use this
16:29 < context> multicast and stunnel are not protocols 
16:30 < context> like i said, learn your terminology
16:30 < MJR_> i'm saying i want a raw feed
16:30 < prettyrobots> I know someone has written one, because it is so obvoius, but I can't find one.
16:30 < andredublin> you have total control over the format of the data
16:30 < owen1> hackedy: thanks for the slides!
16:30 < MJR_> the problem with gottox's library is that it can't handle ssl connections
16:30 < context> that socket.io-java library is 8 days old, AND has tests AND has examples yet it doesnt work ?
16:30 < MJR_> did you see SSL examples?
16:30 < MJR_> i sure didn't, and i got it to work over http
16:31 < MJR_> i also did it in c#...got that to work too
16:31 < MJR_> but none of them handle SSL connections...
16:31 < context> so edit it to support https ? 
16:31 < MJR_> no idea how i would do that
16:31 < MJR_> his library doesn't really provide params for sending the ssl handshake info
16:32 < andredublin> its just a protocol check
16:32 < andredublin> ah
16:32 < MJR_> gottox's library uses an underlying library
16:32 < MJR_> websocket java library
16:32 < context> https://github.com/Gottox/socket.io-java-client/issues/14 <- someone got it working with ssl
16:32 < andredublin> v
16:32 < andredublin> https://github.com/Gottox/socket.io-java-client/blob/master/src/io/socket/IOConnection.java#L28
16:34 < MJR_> that may work...thanks
16:34 < MJR_> i looked at that, but didn't see that they had solved it
16:35 < MJR_> thanks for your help
16:35 < andredublin> awesome sauce
16:36 < MJR_> out of curiousity though, is there a way to get the writable socket from net.createServer()
16:38 < context> mjr_: createServer DOES NOT create a writable socket
16:39 < context> createSERVER creates a SERVER socket. SERVER sockets LISTEN
16:39 < MJR_> context: yes, i understand. upon the connection even, a writable socket is created correct?
16:39 < nikkubhai> Right now , one of my web app is running on lamp stack. Can I create and run another app using node.js on the same domain?
16:39 < context> SERVERS get many inbound connections, creating lots and lots and lots of CLIENT sockets which are writable
16:39 < andredublin> your not connectd
16:39 < andredublin> your listening for a connection
16:39 < context> mjr_: its a NEW socket when something connects.
16:39 < nikkubhai> in another folder?
16:39 < context> servers listen. thats it. nothing else.
16:39 < MJR_> context: yes, so is there a way to return that to the main application
16:40 < nikkubhai> #meteor
16:40 < context> they CREATE readable/writable sockets when a connection comes in
16:40 < context> mjr_: thats what it returns wtf! we went over this already
16:40 < MJR_> ah ok
16:40 < MJR_> thanks
16:41 < andredublin> nikkubhai: so long as your not accessing any ports that are taken up already by apache
16:41 < andredublin> most likely 80
16:42 < nikkubhai> andredublin: I always wanted to know that when I run a node app, I have to go to localhost:3000 , while on apache its just localhost  . How can I remove that 3000?
16:42 < nikkubhai> port?
16:42 < nikkubhai> also*
16:42 < context> ... yes
16:44 < nikkubhai> andredublin: How do we point the domain name to some other port than 80? 
16:44 < context> you dont.
16:44 < andredublin> that is correct
16:44 < context> its always 80. http is 80.
16:44 < context> that url bar... http://...... says "port 80 unless otherwise noted"
16:45 < nikkubhai> context: Then. what is done to remove that :3000.  Setting up proxy server like nginx?
16:46 < andredublin> you can start a local node app with
16:46 < andredublin> PORT=80 node myapp.js
16:46 < context> andredublin: not unless you are root, your you are psycho enough to lower the privileged port max number
16:46 < nikkubhai> andredublin: But, I am already using apache for it :/
16:47 < context> nikkubhai: then proxy whatever requests need to be to node from apache
16:47 <@isaacbw> nikkubhai: port 3000 is declared explicitly in your node apps
16:47 < context> and have node listen on whatever port you want
16:47 < prettyrobots> String stream or buffer stream?
16:47 < andredublin> wouldn't proxy slow down the node app?
16:48 <@isaacbw> no, not really
16:48 < andredublin> ah
16:49 < context> it wont slow down your app at all... it WILL most likely add maybe 5ms to request times or less
16:50 < nikkubhai> andredublin: isaacbw context Thanks. :) Can you point me to any good tutorial on linking the domain to node.js app. e.g. I want the node app to run even if I go to example.com/node . No need to go to example.com:3000
16:50 < Skaag> I need to show a page with numbers updating live, I'm thinking to use minpubsub for this
16:50 < Skaag> I would publish the numbers into the app from an external application
16:50 <@isaacbw> nikkubhai: "<@isaacbw> nikkubhai: port 3000 is declared explicitly in your node apps"
16:51 < nikkubhai> considering another app on lamp stack is running on example.com
16:51 < nikkubhai> isaacbw: I did not understand that statement :/
16:51 < context> wow. when did this place change to what it is now :x or am i just here during the wrong times of the day
16:51 < context> i feel my iq level going down :x
16:51 <@isaacbw> this feels sudden
16:52 < Skaag> it feels totally fine to me *wink wink*
16:52 <@isaacbw> nikkubhai: it could just as easily be port 80
16:52 <@isaacbw> change 3000 to 80 and see what happens
16:52 < Skaag> isaacbw: if he's not running it as root it won't bind to that port
16:53 <@isaacbw> it will give an error
16:53 <@isaacbw> at which point I will say, "run as root"
16:53 < Skaag> yes
16:53 < Skaag> :-)
16:53 < divanvisagie> context : I'm still wincing at the use of your instead of You're
16:53 < andredublin> lol @ context
16:53 <@isaacbw> and then I'll say "that means you type in 'sudo node myapp.js'"
16:53 < Skaag> by the way is it true there's a convention to use index.js for the main app entry point?
16:54 < andredublin> like a front controller, yes/no
16:54 < andredublin> id say its arbitrary
16:54 < andredublin> i use app.js alot
16:54 < Skaag> I like app.js actually
16:54 < divanvisagie> Skaag: I actually think its server.js
16:54 <@isaacbw> it's even more than a convention
16:54 < Skaag> I like that too
16:54 < divanvisagie> As far as i remember 'npm start' defaults to server.js
16:55 <@isaacbw> require() will look for index.js
16:55 < Skaag> the person who wrote the guide I read yesterday clamed the index.js convention
16:55 < Skaag> oh it will?
16:55 < andredublin> didn't know that
16:55 < Skaag> me neither
16:55 < nikkubhai_> isaacbw: Error: listen EACCES
16:55 < Skaag> I guess an strace would reveal that
16:56 < dypsilon_> i use isAwesome.js
16:56 < dypsilon_> because it's nice to type node isAwesome
16:56 <@isaacbw> loooool
16:56 <@isaacbw> everyone look at what just happened
16:56 < CoverSlide> boo camlecase
16:56 < andredublin> lol
16:56 <@isaacbw> nikkubhai_: scroll up a bit
16:56 < CoverSlide> node is-awesome
16:56 < CoverSlide> much better
16:57 < dypsilon_> CoverSlide, good point
16:57 < nikkubhai_> isaacbw: I lost my connection. Can't see what was typed earlier
16:57 <@isaacbw> nikkubhai_: you have to run as root
16:57 < CoverSlide> besides, you can't have uppercase characters in package names. so module names should follow the same convention
16:58 < CoverSlide> although I absolutely loathe underscores
16:58 < dypsilon_> devs can really turn everything into a naming debate
16:58 < nikkubhai_> isaacbw: Yes. I realized that. But, as I mentioned, apache is alos running. So , it says Can't listen on port 80. Perhaps another app is running
16:58 <@isaacbw> nikkubhai_: you can't run both 
16:58 <@isaacbw> not on the same port
16:59 <@isaacbw> look up "reverse proxy"
16:59 < nikkubhai_> isaacbw: That was the main question!!! I asked whether I should use nginx. Thanks :)
16:59 < andredublin> if you're already using apache then no
16:59 <@isaacbw> sure, nginx is easier to configure as a reverse proxy
17:00 < andredublin> that is true
17:00 < andredublin> <3 me some nginx
17:00 <@isaacbw> nikkubhai_: (the loool was that I predicted what you would say next. Not that it was a bad question)
17:00 < divanvisagie> nginx can put up with a lot more requests than apache
17:00 < nikkubhai_> I thought I should be able to use node along with lamp
17:01 < dayom> can anyone explain why node.js is not being used as a competitor to nginx?
17:01 < divanvisagie> however I did write this a while back http://dvisagie.blogspot.com/2013/02/running-nodejs-alongside-apache.html
17:01 < dayom> a reverse proxy implementation using nonde.js
17:01 < dayom> node
17:01 <@isaacbw> people use node-http-proxy
17:02 < dayom> nice
17:02 < dayom> thanks
17:02 < nikkubhai_> divanvisagie: Oh.. Thank you so much! That is exactly what I was looking for!
17:03 < divanvisagie> dayom: not much is known about node from a security standpoint and so its suggested you run it behind and nginx proxy for production purposes
17:05 < dayom> let's say you had short lived requests consistently on each app server
17:05 < dayom> I'm curious what the throughput would be nginx vs. node-http-proxy
17:05 < dayom> on simple round robin
17:05 < dayom> ignoring security, etc
17:10 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
17:10 < divanvisagie> running node behind an apache reverse-proxy brings to mind a story. one day i took my arduino to work that was set up using johnny-five and gave everyone the url to a service that would toggle a LED on and off. Naturally everyone put their requests in infinite while loops and the LED blinked so fast you could barely see the toggles. The thing was though that node handled it. But when i put it behind an apache reverse proxy , apache 
17:10 < divanvisagie> couldn't handle the requests and bombed out.
17:14 <@isaacbw> american airlines shut down a quarter of its flights yesterday because of a network error
17:15 < dayom> http://centminmod.com/siegebenchmarks/2013/020313/index.html
17:15 < s5fs> isaacbw: indeed!
17:16 < s5fs> isaacbw: outage was just over an hour, pretty interesting
17:16 <@isaacbw> did you hear the npr story? There was an old lady who said, "Why didn't they have a backup system? I know computers! They coulda had a backup system!"
17:16 < s5fs> haha!
17:16 < s5fs> didn't hear that one, but it's gold
17:17 < CoverSlide> dayom: wha? node faster than nginx?
17:17 < LaMakina> hahaha amazing
17:17 < dayom> CoverSlide: apparently...
17:17 < CoverSlide> dayom: what's the server side? fs.createReadStream with no caching?
17:18 < Samo> anybody had experience with node-http-proxy performance?
17:18 < dayom> CoverSlide: didn't write this up… just found it, so I have no idea really
17:18 < Samo> i want to reverse proxy and nginx not an option
17:19 < CoverSlide> Samo: should have decent performance
17:19 < CoverSlide> Samo: although I prefer haproxy (non-node)
17:19 < Samo> i need to do express authentication at the proxy so must be node
17:20 < Samo> thanks for the tip though
17:20 < gildean> Samo: node-http-proxy should be a pretty good choice
17:20 < CoverSlide> why do you need it at the proxy?
17:21 < Samo> Coverslide: one authentication portal for a group of protected apps that it will proxy to if user has the rights
17:23 < CoverSlide> hm well i guess it would be more convenient than putting the authentication on each of the apps
17:23 < superjoe> if I have an open file descriptor, how do I check the size of the file?
17:24 < niggler> superjoe doesn't stat take an FD?
17:24 < niggler> *fs.stat
17:24 < niggler> *fs.fstat
17:24 < superjoe> yep. didn't see that. thanks
17:24 < niggler> and the brother is fs.fstatSync
17:24  * niggler pets substack 
17:24  * niggler pets superjoe
17:26 < ashnur> morning
17:26 < CoverSlide> good morrow ye gentleman!
17:27 < QRPIKE> yarg
17:29 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:41 < tbranyen> Domenic_: yo, you around?
17:42 < Domenic_> tbranyen: what's up
17:42 < dukedave> Is there a way I can compel nvm to use a specific Node version when I cd into a dir?
17:43 < tbranyen> Domenic_: looking at your chai as promised lib
17:43 < tbranyen> is it worth trying to integrate that with jasmine or should i just got with mocha?
17:43 < tbranyen> go*
17:44 < dukedave> (ala the .rvmrc for RVM)
17:44 < geNAZt-PC> well you can write a little bash script for that
17:45 < dukedave> Fail: https://github.com/creationix/nvm/issues/110
17:45 < garmur> npm bugs... anyway to do this for a local package? I mean, say I'm developing a node project and I have a link to my bugtracker in the package.json, I'd like to be able to run 'npm bugs' etc. from the project directory and have it work
17:45 < Domenic_> tbranyen: don't think it can work with jasmine; jasmine couples assertions with the test runner, so you have to use Jasmine's expect() instead of Chai's.
17:47 < Domenic_> tbranyen: also, Chai as Promised needs some love, so many people seem interested and the bug tracker has a few things I haven't gotten around to, grr. Will try to make it a priority this week(end).
17:49 < owen1> mscdex: when i send multiple messages to this wrapper i get 'TypeError: Cannot read property '1' of null' (node_modules/ftp/lib/ftp.js:621)
17:49 < tbranyen> Domenic_: its so handy, i don't know why more test runners don't focus on it
17:49 < owen1> mscdex: i believe that c.pwd is causing that
17:50 < mscdex> owen1: can you provide code?
17:50 < owen1> mscdex: sure
17:50 < owen1> mscdex: http://hastebin.com/geyucisoxu.coffee
17:52  * CoverSlide vomits
17:52 < CoverSlide> oh whew
17:52 < owen1> mscdex: it works if i just hit it once
17:52 < mscdex> owen1: can you also provide the pwd response from the server?
17:52 < owen1> sure
17:53 < owen1> mscdex: http://hastebin.com/bivebaqaka.tex
17:54 < CoverSlide> hastebin be so crazy
17:56 <@isaacbw> kinda silly that it prefers everything else to javascript
18:00 < mscdex> owen1: is this a public server?
18:00 < owen1> mscdex: no. it's internal at my company
18:11 < drojas> I'm starting with node addons, but "#include <node.h>" and "#include <v8.h>" gives 'file not found'. How can I install/access globally that libraries in OSX?
18:12 < mscdex> owen1: can you try this patch?: https://gist.github.com/mscdex/c460fc2b5d62864f792b
18:12 <@isaacbw> sounds like you should start with c++ first
18:12 < drojas> I want to test the c++ code before running node-gyp
18:13 < inspiron> npm install --save-dev ....... what does --save-dev do?
18:14 < CoverSlide> inspiron: modifies your devDependencies in package.json
18:14 < mscdex> drojas: what does `which node` say?
18:14 < mscdex> drojas: how did you install node?
18:14 < inspiron> thanks
18:15 < drojas> mscdex: /usr/local/bin/node I've just compiled v0.10.4 from source
18:16 < mscdex> drojas: do you have /usr/local/include/node/ ?
18:16 < drojas> mscdex: yes
18:17 < mscdex> and v8.h and node.h are inside there?
18:17 < drojas> mscdex
18:17 < drojas> mscdex: yes (sorry)
18:18 < mscdex> ok then you have to manually include that directory when compiling
18:18 < mscdex> it's a lot easier just to set up a binding.gyp and use node-gyp
18:19 < mscdex> that way you don't have to worry about all the flags you have to pass and whatnot
18:19 < drojas> mscdex: yes I can use node-gyp.. just wanted to do some tests using Xcode.. thanks!
18:27 < owen1> mscdex: sure. in an hour. thanks!
18:33 < genazt> hi
18:33 < genazt> little question, how do i end a crypto stream ?
18:33 < brianc> stream.end()
18:33 < brianc> is it not working for you?
18:34 < genazt> i have a createCipher stream but each time when i call stream.end() i get => http://hastebin.com/ruvucawudo.txt
18:35 < genazt> on each end. I have this setup: createCipher => net => createDecipher
18:35 < genazt> each => is a pipe connection
18:36 < genazt> so i call createCipher.end and want that alle remaining crypt data gets written and the end gets called to the net stream
18:36 < genazt> which writes the data to the client and ends after it
18:37 < SocalNick> anyone familiar with  flatiron / nock ?
18:42 < genazt> all i want is to secure a tcp connection, costs me two days :( and still not working :D
18:43 < rking> genazt: Why not ssh port forward?
18:43 < genazt> because i dont own only linux servers
18:43 < rking> I know it's an external process, but it's solved all the painful problems.
18:43 < rking> ssh works everywhere
18:43 < rking> Even my phone.
18:44 < genazt> well an example: i have a vps with a kvm
18:44 < genazt> so i dont own enough rights to forward ssh
18:44 < genazt> and also i have to open a user / ssh connection pair
18:44 < rking> You can't open a >1024 port?
18:44 < genazt> well in the most cases u cant bind any port other than 80 or 443
18:44 < context> genazt: why not use tls.createServer() ?
18:45 < genazt> ssl uses keysharing as init
18:45 < context> http://nodejs.org/api/tls.html <-- the secure tcp connections
18:45 < rking> genazt: Really? You can't do like:  nc 127.0.0.1 12345
18:45 < rking> Ur, -l on that
18:45 < context> genazt: what?
18:46 < rking> genazt: K, cool.  Just throwing it out there as a hackaround, but sounds like it's not a good fit for you. =)
18:46 < rking> Sorry I can't help with the node side
18:48 < genazt> according to this: http://upload.wikimedia.org/wikipedia/commons/d/db/EAP-TLS_handshake.png tls sends its certificate to the client to verfiy it
18:48 < context> yes. certificate.
18:48 < context> you said you wanted secure tcp connection... you want tls.
18:49 < context> and thats EAP. prolly a bit different than just raw tls.
18:50 < genazt> well what when i copy the certificate from the server, change my hostfile and publish the saved cert ?
18:50 < context> try it and find out?
18:50 < genazt> it would make no change and i have a secured connection to myself or ?
18:53 < genazt> ok i can only sniff the public cert
18:53 < genazt> so i am not able to run a server with only the pub cert
18:53 < genazt> ok :D
18:59 <@mbalho> isaacbw: whoa did you set the topic because i just bought pickled herring the other day
19:01 < pachet> mbalho: it was you
19:01 < pachet> dont you remember
19:01 < pachet> you were saying something like
19:01  * mbalho inception
19:01 < pachet> "god i ate so much pickled herring"
19:01 < pachet> "im seeing visions"
19:01 <@mbalho> im high on the fish again
19:03 < gkatsev> what exactly does the ~ for versions in package.json signify again?
19:04 < gkatsev> ah, ok, between the next and previous version
19:04 < ljharb> hm
19:05 < ljharb> maybe i like "1.2.x" better then
19:09 < gluxon> GlitchMr: Join #wolf.js for a moment. Gracias. :)
19:11 < genazt> is there a module that can be used to create an tls securedPair from a net stream ?
19:11 <@isaacbw> mbalho: :O
19:13 < pachet> genazt: https://gist.github.com/TooTallNate/848444
19:15 < CoverSlide> wow that looks horrid. i would hope that the api improved since then
19:15 < nikkubhai_> #digitalocean
19:16 < CoverSlide> nikkubhai_: no spam kthx
19:16 < nikkubhai_> CoverSlide: I write that to join the channel. kthx :P
19:20 <@isaacbw> lern 2 irc
19:24 < nikkubhai_> isaacbw: Is there any other way to join? I am using webchat
19:24 <@isaacbw> '/join #channel'
19:26 < nikkubhai_> isaacbw: Awesome. Thanks
19:52 < raj> is http://gruntjs.com/configuring-tasks#templates referring to node.js html templating language?
19:58 <@isaacbw> what's node.js html templating language
19:59 < superjoe> isaacbw, I'm assuming the missing words in that question was "a good"
19:59 < superjoe> I recommend https://github.com/paularmstrong/swig/
19:59 < superjoe> s/was/were/
19:59 < raj> isaacbw, nm, I mis-understood the use of 'templating'
20:00 <@isaacbw> superjoe: no, I was referring to what raj said
20:00 < raj> they's just referring retrieving a value from a key, with the key being the template
20:00 <@isaacbw> angularjs 4 lyfe
20:00 <@isaacbw> server-side rendering is for dweebs
20:00 < `3rdEden> seo is dweebs as well!
20:00 < superjoe> and email
20:00 <@isaacbw> lol
20:00 < Madwill> DWEEBS !!!
20:00 < `3rdEden> and faxes!
20:01 < superjoe> wat
20:01 <@mbalho> use client side templates ya dingus!
20:03 < mukke> trying to update node on f18, Requires: v8 < 1:3.15, euhm chromium updated v8, is there a way to resolve this without breaking chomium ?
20:05 < mukke> or should i just downgrade v8 ?
20:08 < gluxon> mukke: What's an f18? You're not trying to compile Node.js on an airplane, are you?
20:08 < gildean> gluxon: fedora
20:08 <@isaacbw> make sure your faa repository cache is up to date
20:11 < not_isaacbw> HAHAHAHA THAT WAS SO FUNNY
20:13 < niggler> awww where's not_isaacbw
20:20 < superjoe> ha, did they make isaacbw an op just so people could see that he's a different person than isaacs ?
20:20 < superjoe> hax
20:21 < raj> will 'static/**/*.less' locate 'static/test.less' ?
20:21 < superjoe> raj, 1. wrong channel. 2. try it and see
20:22 < owen1> mscdex: i made the changes you mentioned and i think i got the same error - http://hastebin.com/sagulapewe.tex  (there was a missing { in your code, btw)
20:25 <@isaacbw> superjoe: that is exactly the reason
20:26 <@isaacbw> in exchange I give regularly updated subtle and witty topics
20:27 < superjoe> what a deal
20:27 < chilts> isaacbw: you're doing a good job .. especially the current subtle and witty topic :)
20:27 < daslicht> schmeggeliheggn deg :)
20:27 < chilts> moar pleeze
20:27 <@isaacbw> what does it mean!?
20:28 < chilts> it means carry on :D
20:28 < megacool> Hey guys, I was wondering how could I scale out a Node.js/backbone.js app ?
20:28 < chilts> scale in what way?
20:29 < chilts> that's a pretty generic question with a gazillion answers :)
20:29 < owen1> mscdex: just in case it's relevant, here is the code that calls my ftp-wrapper code - http://hastebin.com/tebihakina.vhdl
20:29 < chilts> moar servers!!!
20:30 < superjoe> owen1, wtf why are you still using FTP?
20:30 < owen1> mscdex: notice that i connect to ftp each time i get a message from Rabbit
20:30 < owen1> superjoe: got endpoints that are 3rd party
20:30 < owen1> not my code
20:30 < megacool> scale horizontally, it's better if i add more boxes.
20:31 < megacool> i scaled the database, i'm using mangodb ! i still need more performence ..
20:31 < superjoe> mango db
20:32 <@isaacs> hey, meatbags!  do some searching: https://npmjs.org/search?q=express
20:32 < owen1> megacool: mongodb scales with sharding
20:32 < pachet> sounds tasty
20:32 < mscdex> owen1: on an unrelated note, if you are doing it that way, you should not create a new connection each time since it's the same ftp host
20:32 <@isaacs> it works now!
20:32 <@isaacs> and it's not just google!
20:32 < superjoe> ooh that's pretty
20:32 < pachet> isaacs: bless you
20:32 < pachet> you dear boy
20:32 <@isaacbw> omg
20:32 < pachet> someone give him an orange
20:32 < superjoe> isaacs, https://npmjs.org/search?q=A*
20:32 <@isaacbw> I was literally thinking this morning "why is this search just google"
20:32 < superjoe> IMO this should find my a star package
20:33 < owen1> mscdex: but what if it's not connected anymore?
20:33 < owen1> mscdex: will it know to reconnect
20:33 < owen1> ?
20:33 < chilts> isaacs: nice! :)
20:34 < superjoe> in fact, the CLI search does find it
20:34 <@isaacs> superjoe: yeah, try searching for a thing that isn't a 1-letter word
20:34 < mscdex> owen1: there is no automatic reconnection. just check if it's connected first before taking any more info from your queue
20:34 <@isaacs> superjoe: i think elasticsearch has some facility for wildcards, but i'm not sure
20:35 < mscdex> owen1: if for some reason it's not connected anymore you might lower the ping interval and/or reconnect
20:35 <@isaacs> superjoe: oh, i get it, you want a-star
20:35 < superjoe> isaacs, no big deal. it just sounded like you were looking for some feedback
20:35 <@isaacs> superjoe: arguably the old search is worse :) https://www.google.com/#output=search&sclient=psy-ab&q=site:npmjs.org+A*&oq=site:npmjs.org+A*&gs_l=hp.3...226.2971.0.3297.13.12.0.0.0.0.1170.6410.3-7j1j0j3j1.12.0...0.0...1c.1.9.psy-ab.jtVWfIdVrBk&pbx=1&bav=on.2,or.r_cp.r_qf.&bvm=bv.45368065,d.dGI&fp=cb5613c324910358&biw=1208&bih=683
20:36 <@isaacs> er, https://www.google.com/search?q=site:npmjs.org+A*
20:36 < mscdex> isaacs: is there a cool search syntax, like "depends:express"?
20:36 < mscdex> isaacs: or "engines:0.10"
20:36 < mscdex> that would be fun to have
20:37 < owen1> mscdex: so in theory if my keep alive is frequent enough, my code might keep a connection to ftp forever?
20:37 <@isaacs> mscdex: no, but that'd be rad.
20:37 <@isaacs> mscdex: post an issue :)
20:37 <@isaacs> mscdex: mention @tmpvar in it
20:38 < jfroma> isaacs: does "npm search xx" uses the same thing?
20:38 <@isaacs> mscdex: it's just hitting elasticsearch, so it might just be a matter of turning on a certain feature, or parsing the query or something
20:38 < mscdex> owen1: yeah. if you can find out from the server owner what the idle timeout is, you can set an optimal ping interval.
20:38 <@isaacs> jfroma: no, but it will eventually
20:38 <@isaacs> jfroma: once we get it a bit more play-tested, i'd like to expose a json api, and have the cli hit it
20:39 < mscdex> owen1: unless of course your or their network connection goes down or is interrupted
20:39 <@isaacs> jfroma: in the short term, there's really nothing to lose, since our existing search was such crap
20:39 < owen1> mscdex: is there a way to check for connection before calling .connect?
20:40 < jfroma> isaacs: awesome, thank you
20:40 <@isaacs> jfroma: thank elasticsearch and tmpvar 
20:40 < jfroma> elasticsearch all the things!
20:40 < owen1> mscdex: maybe c.status?
20:40 < mscdex> owen1: there should be a '.connected' boolean
20:41 < owen1> mscdex: it's not documented. i can send pull request after testing it.
20:42 < mscdex> owen1: sounds good
20:43 < jfroma> i miss the adwords in npmjs.org though
20:44 < jfroma> there is nothing distracting me
20:44 < pachet> too much power
20:45 < Fishrock123> It's over 9000! :3
20:45 < CoverSlide> <h1></h1>
20:46 < CoverSlide> oops
20:46 < jjore> How do I get npm to install to $HOME/.node_modules? I've noticed that require() checks that directory for things and it seems like a good place to put personal-use modules.
20:47 < CoverSlide> jjore: no, it is not a good place for modules
20:48 < jjore> Oh really? I thought it would be a nice place to put my local install of jshint.
20:48 < CoverSlide> use npm -g for that
20:49 < jjore> Well... that goes to the global node_modules.
20:49 < cheese1756> Hi. Does anyone know of a good solution for Node.js workers? I found some, but they al appear to be around three years outdated
20:50 < CoverSlide> cheese1756: because of the cluster module in core
20:50 < Guest55662> I am getting an socket.io error not found and am not sure what the problem is
20:50 < cheese1756> CoverSlide, That would do it :). That's also the harm of looking at 3 year old Stackoverflow posts
20:50 < Guest55662> does anyone have a suggestion ?
20:51 < CoverSlide> jjore: if you have a module that isn't local then it should be global. if you need it as a dependency, use npm link
20:51 <@isaacs> Guest55662: it'd be good to start by uploading your code somewhere, and the full error output.  http://gist.github.com is good for this
20:52 < Guest55662> roger. The code is a one liner 
20:52 < Guest55662> var app = require('http').createServer(function(){})   , io = require('socket.io').listen(app)
20:53 <@isaacs> jjore: there's no way to make npm install in ~/.node_modules
20:53 <@isaacs> jjore: you can install in ~/node_modules if you want
20:54 <@isaacs> npm install jshint --prefix=~
20:54 <@isaacs> jjore: then add ~/node_modules/.bin to your PATH
20:54 <@isaacs> jjore: easy peasy
20:54 < jjore> Yeah, I figured if I used --prefix=$HOME. I also observed that since require() *does* check ~/.node_modules that it must be part of supported convention.
20:54 <@isaacs> jjore: it's a legacy mistake
20:54 < jjore> Aha. Thanks.
20:54 <@isaacs> jjore: accident of history :0
20:54 <@isaacs> :)
20:55 < CoverSlide> isaacs: any chance of deprecating that or it's too minor to really bother with?
20:55 <@isaacs> jjore: same for /usr/local/lib/node
20:55 < chilts> isaacs: ever thought about doing a "if I did npm again, this is what I would change" type post?
20:55 <@isaacs> CoverSlide: deprecating it would be not worth the trouble, really
20:55 < chilts> for future reference
20:55 <@isaacs> chilts: i think of that sometimes, yeah
20:56 < chilts> :)
20:56 <@isaacs> chilts: the list is so long, it's intimidating
20:56 < chilts> :(
20:56 < chilts> but then you're the workman, so you see *all* the problems, whereas we see the odd one
20:56 < chilts> I remember making a table for a friend of mine and I rattled off a list of problems, and she said to me "Well, it looks like a table to me"
20:56 < chilts> I'll never forget that lesson
20:57 < jjore> Oh hey, so for what it's worth, I only asked about this on IRC because I'd just searched the docs and source for .node_modules and found mysteriously nothing.
20:57 < megacool> up for scaling :p
20:58 < combataircraft> hi all
20:59 < combataircraft> I created a new module last night; https://github.com/azer/new-list
20:59 < combataircraft> it allows us to subscribe for any changes on a native array instance
20:59 < combataircraft> it's very simple, based on pub sub, instead of events
21:02 < superjoe> what's the best way to delete bytes from the middle of a file?
21:04 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:11 < raj> where does npm install packages?
21:11 < chilts> raj: node_modules/
21:12 < raj> chilts, but I have multiple node_modules
21:12 < CoverSlide> raj: you can't have more than one node_modules in a directory
21:12 < chilts> raj: so you already knew where npm installed packages
21:16 < raj> but I have ~/myprojects/node_modules as well as within my root directory (I think it was in /usr/bin or something, although it seems to have disappeared)
21:20 < CoverSlide> you should have a node_modules for each project
21:20 < CoverSlide> anything else is epic fail
21:21 < arian>  /usr/lib/node_modules for global modules (with the -g), for all else a node_modules per project
21:21 <@isaacbw> I think node should stop assuming node_modules and start using a configurable classpath
21:22 <@isaacbw> er, modulepath
21:22 < CoverSlide> arian: that's a fail as well. npm set prefix $HOME
21:23 < CoverSlide> export PATH=$HOME/bin:$PATH
21:23 < CoverSlide> that's how I roll
21:23 < arian> CoverSlide, by default apt-get install nodejs puts it there
21:23 < CoverSlide> arian: yeah, and you should modify the default
21:23 < arian> then the default is wrong :P
21:23 < CoverSlide> npm set prefix $HOME
21:25 < CoverSlide> not wrong per se, but it's a horrible experience to require sudo to get simple command-line scripts
21:26 <@isaacbw> oh man, fiber in utah
21:26 <@isaacbw> who wants to start a betting pool for when they'll hit nyc
21:26 <@isaacbw> my guess: never
21:26 <@isaacbw> fuck time warner
21:28 < faceleg|work> anyone know if it is possible to extend $resourceProvider in Angular?
21:29 <@isaacbw> #angularjs
21:34 < superjoe> isaacbw, probably about the same time we get a Wal*Mart :-/
21:35 < faceleg|work> isaacbw: hahahaah that channel is so dead
21:35 < faceleg|work> nice try though
21:36 <@isaacbw> facelegit isn't. You might just have to wait a while for an answer
21:36 <@isaacbw> er
21:36 <@isaacbw> faceleg|work: stackoverflow tends to have good angular.js activity as well
21:38 <@isaacbw> faceleg|work: you didn't even try asking in #angularjs
21:40 < superjoe> also it doesn't matter. that question is off topic here.
21:50 <@isaacs> isaacbw: node_modules is here to stay
21:52 < superjoe> <3 node_modules
21:52 <@mbalho> shoulda named it isaac_modules
21:52 < superjoe> lol
21:52 <@mbalho> your legacy would have lived on longer that way
21:53 <@mbalho> or isaac_is_awesome
21:53 <@mbalho> isaac_wuz_here
21:53 < superjoe> node has by far the most easiest most predictable packaging system of any that I've used
21:53 <@isaacs> mbalho: yeah, i started out calling it "isaacs_modules" but ryah wanted "node_ryah" and that's where we compromised
21:53 < superjoe> lol
21:54 <@mbalho> isaacs_modules reminds me of craigslist
21:55 < superjoe> I love that the default way is local modules
21:55 < superjoe> IMO even having that "-g" warning where modules want to be installed globally shouldn't exist
21:55 < superjoe> I never install things globally. if it's a tool I just use node_modules/.bin/*
22:00 < cesarstafe> guys, I am newbie with NodeJs and I have the next issue ... "Error: Cannot find module 'bufferjs/concat'"
22:01 < cesarstafe> this 'concat' module is present under 'node_modules/emailjs/'
22:01 < cesarstafe> and this worked for another app that I have done with NodeJs
22:01 < cesarstafe> but I am trying a new app called 'node-login'
22:02 <@isaacs> superjoe: you know that node_modules/.bin is the first item in the PATH environ when scripts like `npm test` are run?
22:02 < cesarstafe> and is presenting the error ... "node.js:201  throw e; // process.nextTick error, or 'error' event on first tick"
22:03 <@isaacbw> I like local modules, I just don't like underscores
22:03 <@isaacbw> :/
22:03 < superjoe> isaacs, yes, I rely on that whenever possible
22:04 < superjoe> but, for example, while my "test" script might simply have "mocha" in there, when I want to run a specific test one time I do something like ./node_modules/.bin/mocha --grep foo
22:04 < jjore> I'm looking at ECMAScript v5. How do I make an object be callable?
22:04 < pachet> cesarstafe: npm install concat
22:04 < pachet> cesarstafe: require('concat')
22:04 < jjore> As in, {'call': Function(...)}()
22:05 < cesarstafe> pachet: require('concat') in app.js?
22:05 < cesarstafe> here is the pastie with the error http://pastie.org/7636937
22:07 < MI6> joyent/node: Ben Noordhuis v0.10 * 2e70dda : test: make stdout-close-unref work in test runner  process.stdout isn't f - http://git.io/Bm75Zg
22:08 < MI6> joyent/node: Ben Noordhuis v0.8 * 8faf65f : test: make stdout-close-unref work in test runner  process.stdout isn't f - http://git.io/r2WM9g
22:09 < MI6> joyent/node: Ben Noordhuis v0.8 * 600cd28 : test: make stdout-close-unref work in test runner  process.stdout isn't f - http://git.io/mwY7KA
22:13 < superjoe> why are we able to open files with 'wx+' but not 'rx+' ?
22:13 < bnoordhuis> superjoe: what would you expect rx+ to do?
22:14 <@isaacbw> isaacs: do you ever plan to redesign things to remove redundancies in the module tree or are you happy with things the way they are?
22:14 < superjoe> bnoordhuis, open a file for reading and writing in exclusive mode, causing an exception if the file does not exist
22:14 < superjoe> it sounds like perhaps my understanding of exclusive mode is incorrect
22:15 < bnoordhuis> superjoe: w and w+ already do that. w implies r
22:15 < bnoordhuis> or rather, w+ does, not w
22:15 < bnoordhuis> w+ and wx+ imply r
22:16 < superjoe> r+ and w+ are different - r+ makes an exception if the file does not exist. w+ truncates the file if it exists
22:17 < bnoordhuis> superjoe: okay, i think you're indeed misunderstanding what exclusive mode is :)
22:17 < superjoe> does linux even have that? I've never heard of it before
22:17 < bnoordhuis> it does. man 2 read, look for O_EXCL
22:18 < superjoe> thanks
22:18 < bnoordhuis> (or man 2 write)
22:19 < bnoordhuis> but what it does is create the file or fail
22:19 < superjoe> `man 2 open` did the trick for me
22:19 < bnoordhuis> right
22:19 < bnoordhuis> anyway, create file for reading but not writing doesn't really make sense
22:20 < bnoordhuis> hence, no rx or rx+
22:20 < superjoe> makes sense. the wording confused me - I took "exclusive" to mean "lock"
22:20 < bnoordhuis> hah no
22:21 < bnoordhuis> file locks on unices are an interesting subject
22:21 < bnoordhuis> particularly how broken everything is
22:21 < superjoe> the real thing I'm trying to do is convert this python code into node.js: https://gist.github.com/superjoe30/5408214
22:21 < bnoordhuis> and broken in different ways on different platforms
22:21 < superjoe> and I was just looking for an easy way to port that lock stuff
22:22 < bnoordhuis> superjoe: you can always create a separate lock file with wx and unlink it once you're done
22:22 < bnoordhuis> as long as all readers/writers follow the same approach, you're good
22:23 < superjoe> bnoordhuis, unfortunately I think this code is trying to protect the file against unknown entities
22:23 < bnoordhuis> ah. then you're screwed, i'm afraid
22:23 < superjoe> yep. but thanks for the help
22:23 < bnoordhuis> there's a fs-ext module that has a couple of file locking primitives
22:23 < superjoe> I'll check it out
22:31 < s3shs> If I'm doing dynamic load balancing, is there any way to not save session information in the database?  At the very least I'd have to know when the info got updated from another box.
22:34 < qubit01> s3shs, using express ?
22:35 < qubit01> how do I remove something from npm ?
22:35 < qubit01> it doesnt work anymore, and ive totally forgot my username
22:35 < qubit01> password rather, I can probably guess it though
22:40 <@isaacbw> s3shs: the other main option is to use an in-memory centralized store like memcached or redis
22:41 <@isaacbw> of course that means that all your sessions are lost if that box loses power, which isn't necessarily the worst thing
22:42 < qubit01> does anyone use node-sync ?  If so could you look at https://gist.github.com/qbert65536/57d11cd31d2622ae530b and tell me if im doing something crazy wrong ?  Seems like it should work
22:43 <@isaacbw> s3shs: when would you have a situation where two servers would be messing with the same session data?
22:43 < qubit01> I never get a sync result
22:43 < ryanaz> isaacbw:  we're getting close to launching our node based web app, it's our first launch and we're still working out some of the kinks to go in production.  What recommendations are there to "production hardening" node.js ?   Such as managing relaunches when node dies, etc. 
22:43 < s3shs> I'm using connect.  Not the full expres.
22:44 < s3shs> isaacbw, yes, that's a good point.
22:44 < qubit01> ryanaz, I use an upstart script, but forever is used alot, npm view forever
22:45 < s3shs> If a user logs in to server 1.  Then gets balanced over to server 2, 1 would know the session is associated with that user, and server 2 would not.
22:45 < ryanaz> qubit01:  what's an upstart script? 
22:46 < qubit01> linux startup scripts, in /etc/init/
22:46 < qubit01> ryanaz, theres also process.on('uncaughtException', function (err) {}); <-- log all uncaught exceptions but dont die
22:46 < ryanaz> qubit01:  ah nice… 
22:46 < MrNaviPacho> Is there anything like forever for node 0.10?
22:48 < superjoe> MrNaviPacho, https://github.com/indabamusic/naught
22:49 < qubit01> ryanaz,  yeah heres what I use https://gist.github.com/qbert65536/5408391 , prints a nice stack trace
22:51 < ryanaz> qubit01:  does your upstart script relaunch node when it dies? 
22:52 < qubit01> ryanaz, yes you can configure how many times
22:53 < ryanaz> qubit01:  nice.
22:54 < qubit01> here it is https://gist.github.com/qbert65536/7e70365b0fc0c7919a3c
22:54 < RyanNielson> Hi, I'm working on a node app that streams twitter statuses to the client using socket.io and ntwitter. My code is as follows, and it seems to work fine: https://gist.github.com/RyanNielson/5408422 . But for some reason I think it could be written better. Any suggestions? I'm a node noob so I may be approaching this wrong.
22:55 < qubit01> then from the command line, stop myapp, restart myapp, start myapp etc
22:55 < ryanaz> qubit01:  awesome, than you
22:55 < superjoe> bnoordhuis, is node-mmap no longer maintained because there's a better way to solve the problem, or out of lack of time to maintain it?
22:56 < superjoe> ah, bugs and limitations at the bottom of the readme. that's probably it
22:56 < qubit01> ryanaz,  np!
22:56 < qubit01> ok im off for beers
23:00 < MI6> joyent/node: Ben Noordhuis v0.10 * 92023b4 : dgram: fix no address bind()  I broke dgram.Socket#bind(port, cb) almost  - http://git.io/Kv2FmA
23:02  * s3shs I currently have one instance of node, and one browser with no cookies.
23:03 < s3shs> (weird.  did that come out italics?  nevermind.)
23:05 < s3shs> I currently have one instance of node, and one browser window with no cookies.  I'm handling my cookies like this:  https://gist.github.com/anonymous/cc82f0cb2d54c7cf3154
23:05 < s3shs> Is that the correct way to do it?
23:06 < s3shs> (Sorry about the indenting.)
23:06 < RyanNielson> Repeat: Hi, I'm working on a node app that streams twitter statuses to the client using socket.io and ntwitter. My code is as follows, and it seems to work fine: https://gist.github.com/RyanNielson/5408422 . But for some reason I think it could be written better. Any suggestions? I'm a node noob so I may be approaching this wrong.
23:12 < superjoe> RyanNielson, seems fine.
23:12 < mscdex> RyanNielson: you're adding a new 'data' handler upon every new conection
23:13 < tonylukasavage> how do i get devDependencies to install with a global install "npm install -g MODULE"
23:13 < superjoe> tonylukasavage, I recommend having all local dependencies
23:13 < mscdex> RyanNielson: i would just create one and do `io.sockets.broadcast(data);` inside it, since it seems like that's what you're doing anyway
23:14 < mscdex> RyanNielson: then you wouldn't even need to listen for 'connection' either
23:14 < tonylukasavage> superjoe: my module is a CLI tool that needs to be installed globally, but I'd like to have the devDependencies installed as well
23:14 < RyanNielson> mscdex: Oh okay, so I don't need the connection listener? I figured that was required to create the socket object for each client. Good to know. is io.sockets.broadcast the same as io.sockets.emit?
23:16 < mscdex> RyanNielson: they might possibly be the same i dunno. i haven't kept up with changes to socket.io. if that is all you're doing (emitting the same data to everyone connected), then the broadcast or global emit should already know who's connected and send it to them all
23:16 < RyanNielson> mscdex: Oh okay, that seems to be working. Thanks a lot!
23:16 < mscdex> RyanNielson: so the 'connection' listener is not needed, unless of course you add more logic in that requires it
23:18 < tonylukasavage> if I do "sudo npm install -g ." is it expected that my devDependencies will not be installed?
23:21 < RyanNielson> mscdex: Oh okay, in which case I'll have to go back to what I had before and rethink how to attach those listeners so I'm not duplicated everything.
23:22 < MI6> joyent/node: Timothy J Fontaine master * 39dfe94 : build: libv8_base.a is now libv8_base.<arch>.a  This fixes generating the - http://git.io/LmqOFw
23:24 < tonylukasavage> superjoe: an additional thoughts considering i need to install globally?
23:28 < superjoe> tonylukasavage, check out npm link
23:29 -!- mode/#Node.js [+o TooTallNate] by ChanServ
23:35 < MI6> joyent/node: Trevor Norris v0.10 * 659fb23 : crypto: fix return Local Handle w/o scope.Close()  A new String was being - http://git.io/kyEu-Q
23:35 < s3shs> So it appears that this cookie code is fine:  https://gist.github.com/anonymous/cc82f0cb2d54c7cf3154
23:36 < s3shs> Sometimes I'm not getting a cookie from the browser.
23:36 < s3shs> Any ideas what would cause this?
23:36 < s5fs> prob a cookie monster
23:36 < s3shs> I don't see any pattern to it.
23:36 < s3shs> Mmm.  Cookies.
23:42 < s3shs> Huh, there is a pattern.  favicon.ico.  No cookie.
23:48 < MI6> joyent/libuv: Timothy J Fontaine master * 2d89b4b : build: avoid double / in paths for dtrace  GYP doesn't resolve or normali - http://git.io/2-kw7Q
23:55 < s3shs-> cookie issue fixed.  that was weird.
--- Log closed Thu Apr 18 00:00:42 2013
