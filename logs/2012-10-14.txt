--- Log opened Sun Oct 14 00:00:06 2012
00:04 < s5fs> gabrieluk: npm -g ls
00:05 < JohnMcLear> Hey guys just FYI I'm from the Etherpad Foundation and wanted to drop in to say Hi :)  Everyone is doing a great job maintaining the node community so kudos to each and everyone one of you
00:07 < gabrieluk> s5fs, ok, thanks
00:08 <@Nexxy> JohnMcLear, \o/
00:09 < timeturner> the famous etherpad dev
00:09 <@Nexxy> JohnMcLear, let's have a dance-off to celebrate
00:09 < nathan7> :D|-<
00:09 < timeturner> dance dance revolution!
00:09 <@Nexxy> <o/
00:09 < JohnMcLear> I'm far from being a dev at the level of most of the devs in here.  Some of the node code I read is like black magic to me.
00:09 < TehShrike> o/-<
00:09 <@Nexxy> \o>
00:10 <@Nexxy> \o/
00:10 < TehShrike> o\-<
00:10  * Nexxy nn-tss-nn-tss-nn-tss-nn-tss
00:10 < JohnMcLear> This dance would look way better in an Etherpad..  ;)
00:10  * TehShrike blinks cool lasers
00:10 <@Nexxy> let's do it
00:10 < JohnMcLear> http://beta.etherpad.org/p/danceoffnodejs
00:11 < gabrieluk> i'm writing about npm, is that correct if i publish things like npm view [module name]? not sure if it is correct to use brackets
00:11 < jrajav> Oh god the internets got in my IRC
00:12 < gabrieluk> mm, actually i think i should call package instead x.x... or better [pkg]
00:17 < JohnMcLear> The dance off was emotional n all, I burnt off a load of callories and now I look like Gabe.
00:23 <@Nexxy> substack, 01110000011010010110111001100111
00:24 < mscdex> oh teh noez, binariez
00:25 < LouisT> hola
00:26 < mscdex> ola
00:27 < substack> Nexxy: 1110000011011110110111001100111
00:28 < timeturner> what are you guyz saying? :(
00:29 < timeturner> 1110100100110111010010111010101101101001010100100101
00:30 <@Nexxy> substack, when you have a moment, could I talk to you about baudio?
00:30 < substack> asking to ask is pretty indirect
00:30 < substack> I don't answer such questions.
00:30 <@Nexxy> substack, lol you know what I mean
00:31 <@Nexxy> if you're not busy
00:31 <@Nexxy> e.g., "is now a good time?"
00:31 < substack> that's what scrollback is for!
00:31 <@Nexxy> FINE
00:31 < nathan7> baudio is kind of like the JavaScriptNode
00:33 < timeturner> w00t, baudio looks cool
00:33 < nathan7> I still have building something really cool with the HTML5 Audio business on my todo list
00:53 < jalcine> 777 nicks
00:53 < jalcine> O_O
00:56 < mscdex> 778
01:23 < deoxxa> hnnnnng
01:23 < deoxxa> wrote a stream wrapper thing that you can extend to get pause()/resume()/etc without any work
01:24 < deoxxa> not sure if it's accurate
01:24 < deoxxa> how do i test it
01:40 < jbergstroem> site down? http://buildbot.nodejs.org
01:42 < gkatsev> nodejs.org is up
01:43 < jbergstroem> gkatsev: most likely, but that's not the url I was pasting
01:44 < TehShrike> A new question: was http://buildbot.nodejs.org/ ever up? :-x
01:44 < gabrieluk> how do i make npm add a new entry to my package.json, when inserting a new pkg in a exisitng app?
01:44 < gkatsev> I never knew that buildbot even existed, lol
01:44 < jbergstroem> yes, that site usually is up, and so are the buildbots and master
01:45 < deoxxa> gabrieluk: `npm install --save <package>'
01:46 < gabrieluk> ahh, k
01:46 < deoxxa> there's also --save-dev
01:46 < deoxxa> https://github.com/deoxxa/steez whee, new module
01:51 < gabrieluk> well done :D
01:52 < gabrieluk> deoxxa, have you tested?
01:52 < deoxxa> i'm trying to figure out a good way to test it now
01:54 < gabrieluk> i'm not sure also..maybe mocha?
01:55 < deoxxa> the hard part is just trying to figure out all the different behaviours it's meant to exhibit
01:58 < gabrieluk> ah, ok. 
02:06 < Aliv3> hey any node js opencl/webcl?
02:42 < gkatsev> if I installed node on osx via the pkg file, is it safe to update it via just installing the newer pkg version?
02:46  * Aliv3 is here, just doesn't know
02:56 < wlaurance> Hey everyone! If you have an android device checkout my node documentation and npm package viewer on the playstore https://play.google.com/store/apps/details?id=com.wlaurance.nodoroid
02:56 < wlaurance> Feedback is greatly appreciated. There is a feedback form you can fill out in the app. If you submit a feature request it creates an issue on github
02:57 < gkatsev> cool
02:57 < SomeoneWeird> nice :)
02:57 < SomeoneWeird> now make one were we can easily code on a droid and run it :P
02:58 < mscdex> gkatsev: yes, just install over top and you're good to go
02:58 < gkatsev> mscdex: cool, thanks. I think that's what I heard last but wanted to make sure :)
03:05 < wlaurance> SomeoneWeird, haha yeah that would be great!
03:06 < mscdex> droid.js
03:12 < zane> My node app appears to be slowing down over time, eventually blocking such that it sometimes does not even accept incoming requests. Is it safe to assume this is a memory related error? If so, what's a good way to debug? I've tried getting a heap snapshot with nodetime but it doesn't work for me :( I can't seem to find where my code is blocking and/or running out of memory...
03:12 < AAA_awright> Could be a memory leak somewhere
03:13 < AAA_awright> Just because use ECMAScript doesn't mean all your problems go away :)
03:13 < zane> Yeah that's what I'm guessing, a memory leak, I mean I've been going around and around in circles on this problem, but it seems to fit -- if the GC is running and blocking the thread it would explain not accepting incoming conns
03:14 < zane> which is why I'm asking for a way to debug
03:14 < zane> I haven't successfully found any tool that will even give me a heap snapshot
03:15 < zane> I've tried both nodetime and node-inspector, haven't managed to get a snapshot out of either of them
03:21 < zane> does anybody have experience with nodetime and/or taking heap snapshots?
03:22 < SomeoneWeird> https://github.com/felixge/node-memory-leak-tutorial
03:23 < zane> Yeah I've read that and followed every step, but when I open up the inspector, it's missing the Profiler tab
03:23 < zane> it has the Scripts and Console tab
03:23 < zane> no Profiles tab
03:23 < SomeoneWeird> weird
03:23 < zane> ^ haha, I see what you did there
03:23 < SomeoneWeird> >.>
03:24 < mscdex> :-)
03:24 < zane> okay I've been banging my head against the wall with this problem for like 24hrs with about 3h of sleep, my production servers are dying, so I'm a bit loopy >.<
03:29 <@Nexxy> errrr
03:30 < addisonj> zane: is nodetime hanging for you when you try and take a heap snapshot?
03:30 < zane> addisonj: yes, if by haging you mean that it never outputs anything and then just eventually says "confirm"
03:31 < zane> addisonj: note that my "npm install nodetime" output all looks good; no v8 errors
03:31 < addisonj> i had the same issue a bit ago, I think there is some bug in v8-tools/v8-profiler and it fails on some corner case when traversing heap data structures. I explored it a bit, what modules are you using>
03:31 < addisonj> ?*
03:32 < zane> module list: http://pastebin.com/UFS6jW5X
03:32 < zane> (copied from my modules.sh install script){
03:33 < Youdaman> any aussies in here?
03:34 < addisonj> hrm... nothing jumps out at me too much, I have used the heap snapshot plenty of other times but it was just failing for me as well
03:35 < zane> :( hm...
03:36 < AAA_awright> zane: Every last variable you use is declared with "var" right? There's no global variables in the Inspector, except the builtin ones?
03:36 < addisonj> zane: my advice would be to disable your deps one by one until the snapshot succeeds, just mock out the dependency
03:37 < zane> AAA_awright: I sure hope so, haha, though if I'm missing a 'var' somewhere that'd eplain the leak ;)
03:37 < zane> addisonj: hm, I'll try
03:37 < addisonj> zane: run a jshint/jslint on your code, it will find global vars
03:38 < zane> interesting, that's new to me *googles*
03:38 < AAA_awright> The global variables usually only causes problems when you have multiple requests doing things at once, generally it doesn't add to memory, but I've seen weirder
03:41 < zane> holy crap, JSLint hates my code
03:41 < zane> @.@
03:41 < zane> I mean, is it really necessary to blow up because I put the open bracket on the line after the function lol?
03:41 < addisonj> .jshintrc
03:42 < addisonj> oh yeah, use JShint
03:42 < addisonj> its much nicer, and much more customizable to your own style
03:47 < chapel> zane: I second addisonj on jshint
03:47 < deoxxa> ok, i'm reasonably sure steez is correct now
03:50 < zane> cool, though I'm working  my way through it -- when I do "jshint index.js --show-non-errors" it shows the globals in my index.js, but perhaps I'm missing something, because the app terminates right away without including any other files
03:51 < zane> or is it supposed to be used one file at a time?
03:59 < Youdaman> zane: re the open bracket on the line after the function, yes. otherwise it's like: function_call(); <newline> { object }
04:01 < zane> what's wrong with having such a newline?
04:11 < zane> I see that jshint is flagging my setTimeout() as a global. Is this a potential leak? Seems odd.
04:16 < Youdaman> zane: the newline is "bad" if only because JS automatically adds semi-colons
04:17 < Youdaman> zane: e.g. http://robertnyman.com/2008/10/16/beware-of-javascript-semicolon-insertion/
04:24 <@isaacs> Youdaman: that's not correct.
04:25 <@isaacs> Youdaman: if the statement starts with "function" then it's a function declaration, not a function expression.
04:25 <@isaacs> Youdaman: foo()<newline>{ blerg; } is a function declration, not a call followed by a block.
04:25 <@isaacs> zane: ^
04:25 <@isaacs> zane: jslint is a dick.
04:26 <@isaacs> zane: don't mess with jslint.  just learn javascript, and write a lot of tests.
04:27 <@isaacs> Youdaman: er, function foo()<newline>{ blerg; } is a function decl.  if you don't have the "function" keyword, then obviously it's a call :)
04:29 < deltab> and if you do, it obviously isn't :-)
04:30 < Youdaman> isaacs: :)
04:31 < Youdaman> yeah i wrote "function_call" to be less ambigious but yeah -- "don't mess with jslint" is good advice
04:33 < Youdaman> zane: go read Good Parts... but... then go read things like http://shop.oreilly.com/product/9780596806767.do and pretty much most of isaacs stuff or any of the other node illuminati and their projects/tutorials -- and just code.
04:57 < vicapow> hey all. i've been burring the midnight oil for the past few weeks, working on a side project. mind taking a look?
05:04 < CrawfordComeaux> vicapow: sure :)
05:04 < vicapow> the site is http://clickb.in
05:04 < vicapow> let me know what you think/hate/love about it!
05:05 < vicapow> if you want a cool example, go to http://nodejs.clickb.in
05:05 < vicapow> CrawfordComeaux: .
05:06 < Youdaman> vicapow: nice. so is it collections of links?
05:07 < vicapow> Youdaman: i guess you could say that
05:07 < LouisT> "Only random top level bins can be created"
05:07 < LouisT> what?
05:07 < vicapow> LouisT: i guess that's confusing
05:07 < CrawfordComeaux> very nice :)
05:07 < vicapow> CrawfordComeaux: thanks!
05:07 < CrawfordComeaux> yeah...the copy's a little odd, but that's just details
05:07 < vicapow> CrawfordComeaux: written by a dyslexic :P
05:07 < RLa> very interesting app
05:08 < CrawfordComeaux> now the question is how secure is it ;)
05:08 < vicapow> RLa: thank you!
05:08 < vicapow> CrawfordComeaux: not very. lol
05:08 < vicapow> and I'm sure it's buggy
05:08 < Youdaman> vicapow: so could someone just come through and "squat" all the cool bin names?
05:08 < vicapow> Youdaman: lol. technically… yes
05:08 < vicapow> again, very early stage site
05:09 < RLa> vicapow, can you later share private bin?
05:09 < vicapow> the alpha of alphas
05:09 < Youdaman> so instead of per-user partitioning/grouping you're going for just the bin names they type in yeah?
05:09 < vicapow> RLa: that'd be a cool feature
05:09 < CrawfordComeaux> though were it to ever gain traction, booting squatters = monetization strategy! :P
05:09 < vicapow> RLa: i actually thought of that before
05:09 < Youdaman> CrawfordComeaux: heh.
05:09 < vicapow> CrawfordComeaux: lol
05:10 < CrawfordComeaux> god...talk about the most dead simple service to build a browser plugin for!
05:10 < vicapow> :)
05:10 < LouisT> vicapow: "You can modify this bin as long as you access it from this computer."
05:10 < LouisT> how does it know if i'm on this computer or not?
05:10 < LouisT> is it ip based?
05:10 < Youdaman> vicapow: your twitter link at the bottom says "vicapaw" btw 
05:10 < vicapow> LouisT: that's a secret
05:10 < vicapow> LouisT: jk. it's just a cookie session
05:10 < LouisT> oh
05:10 < LouisT> that seems silly =/
05:10 < vicapow> Youdaman: that's a typo!
05:11 < vicapow> Youdaman: good catch
05:11 < Youdaman> vicapow: i know :D
05:11 < Youdaman> only know because i clicked to add you on twitter ;)
05:11 < vicapow> Youdaman: thanks! :)
05:11 < Youdaman> vicapow: what modules you using for click bin?
05:12 < Youdaman> mainly
05:12 < vicapow> Youdaman: let me check my package.json
05:12 < Youdaman> heh
05:13 < CrawfordComeaux> vicapow: I coded your browser extension - $.get(window.url); //done in one
05:13 < vicapow> express, jade, connect-less, connect-mongo, underscore, mongoose,
05:13 < Youdaman> vicapow: cool i'm getting into mongoose just now
05:13 < vicapow> CrawfordComeaux: lol. awesome!
05:14 < RLa> vicapow, cookie session?
05:14 < CrawfordComeaux> (not really, but very close)
05:14 < RLa> is that big enough storage?
05:14 < vicapow> RLa: so far, you guys are the only users. so no :P
05:14 < Youdaman> <--- early adopter
05:14 < vicapow> RLa: yeah just a cookie session id.
05:15 < vicapow> Youdaman: hehe :) than kyou
05:15 < LouisT> vicapow: use mongodb! heh
05:15 < vicapow> just be careful! when you're on the bleeding edge, you might get cut! lol might be issues. never know.
05:15 < CrawfordComeaux> who wants to take this convo to Husky? http://www.huskylab.co/ (just to make the two devs behind it smile)
05:17 < RLa> vicapow, what about local storage?
05:17 < CrawfordComeaux> who's bored and wants to build something?
05:17 < vicapow> RLa: what about local storage?
05:18 < LouisT> vicapow: for the 'only this computer' issue i would assume
05:18 < RLa> vicapow, what db it uses server side?
05:18 < vicapow> RLa: do you mean, why not store the data on the users local machine?
05:19 < RLa> vicapow, if it's only accessible on that single computer, yes
05:19 < vicapow> RLa: it's only "modifiable" on the users single computer. they can still share that link with whoever
05:19 < vicapow> you could post your bins here
05:20 < LouisT> vicapow: what happens if i clear my cache!?
05:20 < vicapow> LouisT: you'll never be able to change your anonymous bins!
05:20 < CrawfordComeaux> if anyone's looking for something to build, I have this idea for a friendly botnet for startups to use. the startup peeps get all their friends to install the client & set it up w/their credentials for different sites (social/HN/reddit/etc) and then the client rountinely connects to the C&C server for directions, ie. share post X, upvote submission Y, retweet Z
05:20 < LouisT> NNNNOOOOOO
05:20 < LouisT> but you could fix that with local storage, i assume
05:21 < vicapow> LouisT: local storage persists even after someone clears their cache?
05:21 < vicapow> LouisT: that's just creepy
05:21 < Youdaman> vicapow: so i've added a link, and it's taken me to my bin page where i have a Links column and a Bins column, but I can't see how to add more links/bins? I can click a cross to delete the link i have in my Links column though
05:21 < CrawfordComeaux> ...email bomb tech crunch and verge writers w/press release N
05:22 < vicapow> i kinda just wanted a soft launch. i'm not confident this will hold up to large traffic, just yet
05:22 < Youdaman> vicapow: who did you end up hosting with and did you have to decided between diff services?
05:23 < vicapow> Youdaman: did you read the instructions on the homepage and you still dont understand it? (i'm not trying to mean. i just want to know if my instructions were poor.)
05:23 < CrawfordComeaux> vicapow: not ready for large traffic til you stress/pen test it
05:23 < vicapow> Youdaman: right now, it's just on the other debs linode server
05:24 < vicapow> devs*
05:24 <@Nexxy> CrawfordComeaux, that's a horrible idea
05:24 < vicapow> CrawfordComeaux: what's stress/pen test?
05:24 < vicapow> Nexxy: lol
05:24 < vicapow> Nexxy: better suggestion?
05:24 <@Nexxy> not... gaming the media?
05:24 < vicapow> Nexxy: oh, i'm sorry you were addressing your comments to someone else. i got confused
05:25 < tomshreds> hey guys, how to use mongodb's date properly? start = a date, end = another later date, db.things.find({ entryDate: { "&lt" : start, "&gt" : end } }); returns nothing
05:25 <@Nexxy> yeah that's why I prefixed it with their IRC handle :P
05:25 < vicapow> Nexxy: yes. i agree. that's a terrible idea ಠ_ಠ
05:25 <@Nexxy> beside the fact that it would be painfully obvious
05:26 <@Nexxy> even if it were convincing, it would have nothing but damaging effects
05:26 < pyrotechnick> I ATE A BIG RED CANDLE
05:26 <@Nexxy> congratulations
05:26 < othiym23> just more sign of the heat death of the startup bubble, Nexxy
05:27 < othiym23> along with HN disappearing up its own asshole and the IT community trying to talk about sexism in the IT community
05:27 <@Nexxy> my startup has a bigger botnet than yours
05:27 < pyrotechnick> othiym23++
05:27 < othiym23> today would have been a good day to chuck all my Twitter-reading devices into the sea
05:28 < pyrotechnick> stay classy internet.
05:28 < chapel> hmm
05:28 < chapel> yo pyrotechnick
05:28 < chapel> hows it down under?
05:28 < pyrotechnick> let me check
05:29 < CrawfordComeaux> Nexxy: how's it different from hitting up friends who would always agree to do it?
05:29 < Youdaman> vicapow: yeah i got confused by the homepage, my bad soz
05:29 < Youdaman> pyrotechnick: you in oz?
05:29 < pyrotechnick> ja
05:29 < pyrotechnick> brisvegas
05:29 < Youdaman> same same -- Sydders
05:29 < CrawfordComeaux> Nexxy: aside from being a terrible marketing strategy, that is :P
05:29  * Youdaman waves g'day
05:30 < pyrotechnick> you poor soul
05:30  * Youdaman was born in Rockhampton
05:30 < pyrotechnick> that's better
05:30 < Youdaman> thought so
05:30 < othiym23> I'm about to either completely break node_redis or add support for domains to it
05:30 < Youdaman> good to actually see another aussie 
05:30 < othiym23> won't know which I've done until after I'm finished
05:30 < pyrotechnick> there's a few of us
05:31 < pyrotechnick> timoxley
05:31 < chapel> othiym23: whats the issue?
05:31 < chapel> tim smart
05:31 < Youdaman> cool
05:31 < chapel> hes not been online much lately
05:31 < pyrotechnick> dekz
05:31 < othiym23> chapel: https://github.com/caolan/async/pull/185
05:31 < chapel> oh that domains
05:31 < othiym23> y
05:31 < Youdaman> @pyrotechnick on le twitz?
05:31 < othiym23> stupid connection pools are fuckin up the program
05:31 < othiym23> am attempting to fix
05:31 < pyrotechnick> ja
05:32 < kenokabe> massive concurrency erlang feature needed into node
05:32 < pyrotechnick> in v8*
05:33 < chapel> pyrotechnick: anything new in your tech world?
05:33 < kenokabe> dunno
05:33 < pyrotechnick> chapel: rewriting what i had back to JS :D
05:34 < chapel> oh?
05:34 < chapel> why the switch?
05:34 < pyrotechnick> yea i was always going to
05:34 < chapel> just a matter of time and effort
05:34 < pyrotechnick> just wanted to prototype in cs
05:34 < chapel> you got me to use coffeescript, but once I had no one else using it, just didn't like it as much
05:34 < chapel> the benefits of cleaner syntax didn't outweigh the drawbacks imo
05:35 < pyrotechnick> i still use it first to play around
05:35 < pyrotechnick> but i need help with this stuff so
05:35 < pyrotechnick> js it is
05:35 < chapel> :)
05:35 < pyrotechnick> i love the haters
05:35 < chapel> on cs or your stuff?
05:35 < pyrotechnick> on cs in general
05:36 < pyrotechnick> http://www.mikealrogers.com/posts/survey-why-are-you-using-coffeescript.html
05:36 < chapel> oh
05:36 < chapel> well, I think a lot of peoples dislike for it comes from the split it causes
05:36 < pyrotechnick> reminds me of what i actually like about cs
05:37 < chapel> split in support, in knowledge, and more
05:37 < pyrotechnick> chapel: people forget the universe is expanding and branching at every moment
05:37 < chapel> sure
05:37 < pyrotechnick> if you cannot overcome those instances, are they worth overcoming anyway?
05:37 < chapel> node.js is a javascript system
05:38 < chapel> too many people that use cs, try to force it on others
05:38 < pyrotechnick> i see node going the same way as js in general
05:38 < chapel> or make good things, but only in cs
05:38 < pyrotechnick> i.e. being somewhat of a VM
05:38 < chapel> naw, libuv is that binding
05:38 < Youdaman> so who's trying to convert who here?
05:38 < chapel> node is still js
05:38 < chapel> Youdaman: no one
05:39 < pyrotechnick> that's what you think
05:39 < Youdaman> chapel: you were using cs but now back to js?
05:39 < pyrotechnick> but if you noticed
05:39 < chapel> Youdaman: people can have opinions and not want to make people change their minds
05:39 < pyrotechnick> YOU'RE ALREADY WRITING CS
05:39 < pyrotechnick> node's still js yeah and all the browsers are too
05:39 < chapel> Youdaman: I used cs for a while yes, but stopped and see no reason to use it anymore
05:40 < pyrotechnick> but always and ever alot more code is being written in not-js to run on it
05:40 < chapel> pyrotechnick: yes, and Im not a fan of translation as it is
05:40 < pyrotechnick> either you acknowledge or deny that fact, embrace or reject
05:40 < Youdaman> yeah i'd learn both, cs for "faster" dev (in terms of less typing i guess?) but the js because it's ubiquitous and probably a good idea regardless
05:40 < chapel> doesn't mean its the right thing to do
05:40 < pyrotechnick> i think it's a false dichotomy
05:40 < chapel> but who cares if its right
05:40 < Youdaman> right == what feels good for you
05:40 < pyrotechnick> exactly
05:40 < pyrotechnick> exactly
05:40 < chapel> just seems asinine to use a language you think is great, and put it into a language you dont like
05:41 < chapel> what is the point
05:41 < Youdaman> think of it more as sugar to make it sweeter
05:41 < pyrotechnick> sometimes i think, on another planet of aliens making 1000000 languages a minute that run on eachothers languages and i think well
05:41 < chapel> this is beyond cs
05:41 < pyrotechnick> what's the point of fighting that?
05:41 < chapel> talking about all the other X to js things
05:42 < chapel> well Im not against it so much that I think in the confines of the node ecosystem, js itself is important
05:42 < chapel> someone shouldn't have to learn cs, or any other language to use a library
05:42 < pyrotechnick> i only see one "downside" and that is "noise" when you're searching for something in particular
05:42 < pyrotechnick> but eventually we can flip the equation and attract things places instead of needing to search for them
05:43 < chapel> that and the js output while functionally fine, is not great most times
05:43 < pyrotechnick> so it's a problem that will solve itself
05:43 < Youdaman> chapel: ah, you're talking about those modules people write that are in cs right? they can be a bit annoying if you're in js-reading-mode
05:43 < pyrotechnick> chapel: yeah but people can write shitty code anyway without these transpilers
05:43 < othiym23> you guys just wait until I get MonadScript up and running, it's gonna be great
05:43 < pyrotechnick> and they do
05:43 < othiym23> then: Node.hs
05:43 < Youdaman> :D
05:43 < chapel> pyrotechnick: of course
05:43 < chapel> pyrotechnick: but you can write shitty code in cs, and it may look pretty :)
05:43 < Youdaman> othiym23: i don't think the world is ready
05:44 < othiym23> well it better GET READY
05:44 < othiym23> I was on #haskell earlier talking about slamming libuv into Safe Haskell
05:44 < pyrotechnick> chapel: yeah good point, same with python
05:44 < pyrotechnick> and prolog
05:44 < chapel> no matter, its more a taste thing, and I'm not going to try and force anyone to do anything one way or another
05:44 < pyrotechnick> and mathematica
05:44 < Youdaman> othiym23: one of my mates is a haskell head -- it seems like an addictive drug the way he goes on about it -- i'm scared to try ;)
05:45 < othiym23> it is mathematically impossible to write shitty code in Mathematica, pyrotechnick
05:45 < pyrotechnick> well we just agreed shitness is about taste not math
05:45 < pyrotechnick> :D
05:45 < pyrotechnick> THINK ABOUT IT
05:45 < Youdaman> this is why i still code some things in php -- to disguise my shit coding within the shit
05:45 < pyrotechnick> you sly vixen
05:45 < chapel> pyrotechnick: heres a thought, is the time you saved prototyping worth the time you have to spend rewriting it so you can have adoption in help?
05:46 < pyrotechnick> chapel: yep
05:46 < pyrotechnick> plus i just enjoy it more so the creative juices flow quicker
05:46 < chapel> not that rewriting things is bad
05:46 < othiym23> Youdaman: Haskell is awesome for when you want to solve your entire problem with 3 lines of code and aren't afraid to spend 40 hours coming up with those 3 lines and another 80 hours trying to understand why they work
05:46 < chapel> could lead to better code overall
05:46 < pyrotechnick> im sure alot of people write JS fluently as my CS
05:46 < pyrotechnick> but not me
05:47 < pyrotechnick> it makes my eye twitch
05:47 < Youdaman> othiym23: haha. so my mate isn't addicted, he's just delusional from the mind-bending effects
05:47 < pyrotechnick> some JS constructs
05:47 < pyrotechnick> and that's enough to break my tranquility
05:47 < chapel> pyrotechnick: I write js pretty fluently, I have a style I enjoy and stick to it
05:47 < pyrotechnick> chapel: do you need libs to get to that stage?
05:47 < pyrotechnick> or shims?
05:47 < chapel> no
05:47 < chapel> just talking about style
05:47 < othiym23> pyrotechnick: I'm all in favor of people using whatever makes them fastest and most productive, but in my experience the best way to get fluent in JS is just to write a ton of it and try to refine your style as you go
05:48 < pyrotechnick> but i mean, say something like a loop over an objects key/values
05:48 < chapel> functionality wise, I can do anything I need or want with base js
05:48 < chapel> es5
05:48 < othiym23> and to try to be consistent enough that others can pick up your style from reading your code
05:48 < chapel> but sometimes I would rather use _ or async just because it saves time and works
05:48 < pyrotechnick> so you expect the browser to be fully es5 or shimmed
05:48 < pyrotechnick> yeah
05:48 < pyrotechnick> that's what i am beginning to realise
05:48 < chapel> pyrotechnick: I don't do a lot of browser code
05:48 < pyrotechnick> yeah that too
05:48 < chapel> well, not so much that I can't, just don't
05:49 < pyrotechnick> these arguments are rather subjective
05:49 < chapel> when it comes to it, I do what I have to make it work
05:49 < chapel> heh
05:49 < pyrotechnick> more than most people comfortably admit
05:49 < othiym23> yeah, I write almost entirely Node, so hey, I always have Object.keys and Array.filter and Function.bind, so I don't need lodash or whatever
05:49 < chapel> so many instances where one reason or another just doesn't apply
05:49 < pyrotechnick> people are working it out though
05:50 < chapel> othiym23: I don't use anything in underscore that is native
05:50 < pyrotechnick> the blogosphere is imploding
05:50 < chapel> or would be better hand coded
05:50 < chapel> but I hate rewriting code if I don't have to
05:50 < pyrotechnick> if you're at work on the clock
05:50 < chapel> and don't feel like rewriting the wheel when there are 10 already
05:50 < pyrotechnick> vs if you're hacking in your mancave
05:51 < othiym23> chapel: the only dependency in my ~2200 line instrumentation agent for Node is bunyan, and I don't feel like the lack of modules is overly constraining me (anymore)
05:51 < chapel> othiym23: of course
05:51 < chapel> I read substack's channel often
05:51 < othiym23> but of course, I started down that road because I don't want to make any installation problems for my users
05:52 < chapel> well nvm, not really relevant
05:52 < chapel> but I understand
05:52 < chapel> and its nice to not have dependencies
05:52 < othiym23> it is
05:52 < chapel> sadly I haven't been doing much modules or things for other people
05:52 < chapel> and I don't care about windows
05:52 < chapel> :)
05:52 < othiym23> and it's 100% made me a much better JS developer than I ever thought I'd be / wanted to be
05:52 < pyrotechnick> that's actually a trend
05:53 < chapel> othiym23: but if you use the same functionality over and over again, what is the point hand coding it every time?
05:53 < pyrotechnick> focus or otherwise maintaining a narrow vision isn't a bad thing by any means
05:53 < chapel> or copying and pasting it?
05:53 < chapel> modules are great
05:53 < othiym23> chapel: I keep my code DRY and terse by making lots of short little modules within the project
05:54 < othiym23> in practice I follow substack's advice, it's just all internal to a single module
05:54 < pyrotechnick> i prefer my code moist and well-endowed 
05:54 < chapel> but if you have no dependencies, what do you do when you want those modules in another project?
05:54 < chapel> substacks advice is to use modules, lots of them
05:54 < othiym23> and with luck over time I'll be able to hive some of it out into separate modules
05:54 < chapel> in fact the more the better
05:54 < chapel> and each should have their own specific and small functionality
05:55 < chapel> so they are easy to maintain, or not maintain for that matter, and can be used anywhere they are needed
05:55 < othiym23> this particular project is always going to be self-contained because of what it does
05:55 < othiym23> yep
05:55 < chapel> so your business logic is mostly tying modules together, instead of a big conglomeration of code that is hard to maintain and requires constant fiddling
05:56 < chapel> othiym23: start now substack would say
05:56 < chapel> :)
05:56 < othiym23> when I get my stuff into open beta, everyone will be able to look at what I've written and decided for themselves how well-factored the code is, but in general, I feel fast and productive in building out new pieces and it doesn't feel redundant
05:56 < chapel> not to speak for him, but I have read enough of his ideals that I hope I understand them
05:56 < othiym23> chapel: that's easier when you're working in OSS and don't have to conform to others' IP restrictions
05:57 < chapel> of course its all subjective
05:57 < othiym23> I gotta take it slow, my employers are open to the idea of splitting pieces out into OSS packages but they're going to need to vet everything
05:57 < chapel> and I don't particularly follow substacks ideals
05:57 < chapel> I think they are great, but its a lot of work to make everything modular
05:57 < chapel> and if you didn't start that way, its even more work
05:57 < othiym23> I also do have questions about how generally useful a lot of the stuff I'm writing is
05:57 < chapel> sometimes more work than it is worth
05:58 < othiym23> like, I'm not even sure having generic support for monkeypatching other modules' methods, for instance, is a great trend to start within Node.js
05:58 < chapel> othiym23: if it is usable in multiple places, and solves a problem, Im sure its useful to someone
05:58 < othiym23> it's certainly made a mess out of Ruby
05:58 < chapel> its javascript
05:58 < chapel> monkeypatching is part of the game
05:58 < chapel> its not great, and most times not something you should do
05:59 < chapel> because libraries and other peoples code has certain expectations
05:59 < chapel> so if you break those, then it could break, but thats on you
05:59 < chapel> not them
05:59 < othiym23> indeeed
05:59 < chapel> I am not familiar with ruby in that sense
05:59 < chapel> what happened there?
05:59 < othiym23> that's much of my job right now -- making sure that my crazy Macgyver nonsense doesn't cause somebody else's app to break
05:59 < chapel> inside the company?
06:00 < othiym23> oh, Rails is just a huge forest of monkeypatching and overloading due to the way that the Ruby community uses modules / mixins and inheritance
06:00 < chapel> oh I see
06:00 < othiym23> oh no, I'm working on an agent for New Relic to provide support for New Relic in Node.js
06:00 < chapel> awesome
06:00 < othiym23> so my code is going out into everybody else's apps
06:00 < chapel> been waiting for that
06:00 < chapel> forever it seems
06:00 < othiym23> and making it not cause crashes is challenging
06:00 < othiym23> it's hard!
06:00 < chapel> I could never use new relic even though people sing its praises
06:01 < chapel> there is only so much you can do about other peoples code
06:01 < othiym23> I have to make sure that you can write your code however you want and that I can also do things like figure out how long your MongoDB calls are taking, for instance
06:01 < chapel> yeah tbh I am not sure how best to handle that stuff, haven't spent any time thinking about it
06:01 < chapel> so I am sure it is a daunting challenge
06:01 < othiym23> and that's slamming me hard up against the internals of, say, node-mongodb-native, which has a fairly complicated and uh "organically evolved" architecture
06:02 < chapel> couldn't you hook into the v8 internals
06:02 < chapel> the debug stuff?
06:02 < chapel> and kind of stay out of the actual code?
06:02 < othiym23> not really, no
06:03 < chapel> fine pyrotechnick stop talking :P
06:03 < othiym23> coming at it from the C++ side makes deployment much harder and also tremendously increases overhead
06:03 < chapel> othiym23: Im not talking about c++
06:03 < pyrotechnick> i'm being sexually harassed in a PM
06:03 < chapel> I would make a joke, but I think thats inappropriate
06:03 < othiym23> there isn't really much to the "debug" support in V8 in JS
06:04 < othiym23> there are definitely people in the community who would prefer that I wouls just use DTrace to do instrumentation, which would be awesome if everyone were running SmartOS
06:04 < Youdaman> it makes perfect sense that i had to define my routes in express as well as angular for things to work :]
06:04 < othiym23> but you know, that's not gonna happen
06:05 < othiym23> and anytime you turn on tracing in V8, you alter the codegen's performance, which also has unpredictable effects on the overall performance of V8 / Node
06:06 < chapel> othiym23: have you seen https://github.com/nodetime/nodetime
06:06 < othiym23> yup
06:07 < othiym23> pretty major gap between what nodetime is doing and what New Relic does, though
06:07 < chapel> well I haven't used it, because no node support
06:07 < chapel> :)
06:09 < chapel> question?
06:09 < pyrotechnick> sweet berries waiting for two ghosts who are no different than you
06:09 < chapel> what if someone decided to write their own http parser and network stack using the tcp/net library
06:09 < chapel> not sure how you are reading that
06:10 < othiym23> you mean for the New Relic stuff?
06:10 < chapel> yeah
06:10 < chapel> the node way is a lot of the time, custom
06:10 < othiym23> well, I've been lucky so far, in that Restify, Express, Strata et al all use the base http library
06:10 < chapel> othiym23: sure
06:10 < chapel> but are you going to want to support the guy who rolled his own http lib
06:11 < othiym23> if somebody decided to add their own and enough customers bugged us about dealing with it, we'd write instrumentation for it
06:11 < chapel> if not, then why try to support anything non-standard, and just say you support X X and X
06:11 < othiym23> it's like anything else -- it depends on demand and the scale of the customers making the requests
06:11 < chapel> sure
06:12 < chapel> I guess why I am asking, is because you say you are wanting to handle things like monkeypatches
06:12 < chapel> and I assume edge cases
06:12 < othiym23> so far, people have asked for support for Express, Restify, mongodb / mongoose, MySQL / sequelize, PostgreSQL, memcache and Redis
06:12 < othiym23> no, monkeypatches are how I inject my instrumentation
06:12 < chapel> okay
06:12 < chapel> oh
06:12 < othiym23> basically by wrapping module functions up in closures
06:12 < chapel> well not sure if that is good
06:13 < chapel> what if they monkeypatch as well?
06:13 < othiym23> I'm open to suggestions ;)
06:13 < chapel> then you have a monkeypatch in a monkeypatch
06:13 < pyrotechnick> he winked
06:13 < chapel> where is substack
06:13 < pyrotechnick> in his lab
06:13 < othiym23> so far that hasn't been an issue, and I do overwrite the module loader with my own custom method
06:13 < pyrotechnick> creating the next abomination of npm
06:13 < chapel> lol
06:14 < chapel> othiym23: https://github.com/substack/node-falafel
06:14 < chapel> not saying use that
06:14 < chapel> but ast from what Ive heard/read is easier
06:14 < othiym23> yeah, I looked at pulling out the AST with Esprima, but realized it didn't actually get me much further
06:14 < othiym23> the monkeypatching is the simple part
06:15 < chapel> its simple
06:15 < chapel> but its also a problem
06:15 < othiym23> the hard part is dealing with async request / response cycles
06:15 < chapel> or can be
06:15 < othiym23> another thing to consider is I need to support more than 0.8
06:15 < chapel> othiym23: ast is outside of node
06:15 < chapel> its a js thing
06:16 < chapel> its effectively code analysis and rewriting
06:16 < othiym23> there are people out there running stuff in prod on 0.4 soon, and it's a matter of New Relic policy to be semi-agnostic on how other companies' devops teams manage their deployments
06:16 < chapel> I am a bit above my knowledge level with ast, just in passing really
06:16 < chapel> but from what I know, you can effectively wrap any function you choose with it
06:16 < chapel> don't support 0.4 please
06:17 < othiym23> that's essentially no different from monkeypatching, it's just choosing how you find the functions to wrap
06:17 < othiym23> I'm trying not to, but if a big enough (read: enterprise) customer needs it, welp, I'll see what I can do
06:17 < othiym23> I do know that 0.6 support is going to be unavoidable
06:17 < chapel> othiym23: the difference is, your monkeypatch can change the assumptions that a library or end developer intends
06:18 < othiym23> chapel: the line "return original.apply(this, arguments)" appears all over the place in the node agent's code
06:18 < othiym23> yes, that is a risk
06:18 < chapel> but I guess I am bikeshedding
06:18 < othiym23> however, using an AST parser is a lot riskier
06:18 < chapel> I really have no experience so I cannot speak with any authority
06:18 < othiym23> I have done some crazy things on the way to where I am now
06:19 < othiym23> using some super questionable code
06:19 < chapel> so I will concede any argument one way or another here
06:19 < othiym23> where things are now feels very simple and robust by comparison
06:19 < chapel> whats your trouble with the req/res?
06:19 < pyrotechnick> chapel: but what color is the bikeshed?
06:19 < chapel> pyrotechnick: I like fire red
06:19 < chapel> but I think othiym23 enjoys a navy blue
06:19 < pyrotechnick> http://red.bikeshed.com/
06:19 < chapel> we will never make it
06:19 < othiym23> like I said, the code will be out there soon, and everybody can judge it for themselves (and with any luck help me make it better)
06:20 < pyrotechnick> now it's red we can move onto the power plant
06:20 < othiym23> chapel: same problem domains are meant to solve -- incoming HTTP request, call out to a database in the handler, call out to a cache in the database callback -- need to make all of that part of the same transaction cycle in the New Relic transaction trace
06:21 < othiym23> since some or all of that code is executing asynchronously, it's not straightforward to create something that looks like the synchronous call stack that just naturally falls out of how a Rails or Django controller would do things
06:22 < pyrotechnick> aight wat'd i miss jacob
06:22 < chapel> pyrotechnick: wat?
06:22 < pyrotechnick> you said ok stop talking then
06:22 < pyrotechnick> you as me something?
06:22 < pyrotechnick> good talk.
06:22 < chapel> :)
06:26 < chapel> othiym23: well I will be happy to look at your code when you have it available, I'm sorry I can't be of more help, and hope I didn't distract you too much :P
06:26 < othiym23> it's Saturday night, so no worries
06:26 < othiym23> I'm distractible
06:27 < othiym23> also, node_redis is brilliant
06:27 < othiym23> mranney is my hero
06:27 < othiym23> this should be an easy patch
06:27 < pyrotechnick> node_redis is how adapters should be written
06:27 < pyrotechnick> all of them always forever
06:29 < othiym23> pyrotechnick: unfortunately, few of them are
06:29 < Zoney> what makes node_redis so great?
06:30 < Zoney> just curioius
06:30 < Zoney> that sounds sarcastic, but it's not. 
06:31 < othiym23> Zoney: the code is straightforward and clean, it's got a good test suite, and it's been developed via extensive benchmarking
06:31 < Zoney> straightforward and clean code is always nice
06:31 < Zoney> the redis client I wrote for PHP seems pretty straightforward to me :)
06:32 < othiym23> also, it has one core method that all of the requests to Redis are channeled through
06:32 < othiym23> and there's one way to get data into and out from Redis: simple callbacks
06:32 < Mian> I have a question about setting up API server with Node.js.  If i instantiate a connection to mysql from node.js.  Does it reuse the same connection for different request?  OR does it re-establish a new connection?
06:33 < othiym23> people get so scared of callbacks that they demand all these bizarre promises-light interfaces, or use data events on the connection object, or use streams or whatever
06:33 < othiym23> I don't care which method works best for a driver writer, but they should stick with one, uniform access method across the driver
06:33 < chapel> Mian: most times it uses the same connection
06:33 < chapel> because node itself stays running
06:34 < chapel> othiym23: I agree
06:34 < chapel> stick to it
06:34 < chapel> I like callbacks
06:34 < othiym23> Mian: you can do it either way, but it will be a lot more efficient to hold onto one connection and pass it around via dependency injection for your various data access objects / DALs
06:34 < Mian> Chapel:  What does it mean by most of the time?  But the thing is whenever the new request comes in, it runs through the same code path that has DB instantiation, right?  I am just wondering if i need to do something like a Singleton for DB.
06:35 < othiym23> chapel: I like streams for result sets, but yeah, one strategy at a time is best
06:35 < othiym23> Mian: look at github.com/flatiron/broadway or github.com/c9/architect
06:35 < Mian> othiym23:  Ahh… OK then it does need to be like a Singleton then and get injected around.
06:36 < Mian> i am new to Node.js but not new to programming.
06:36 < othiym23> the first time you write your data layer as a set of plugins it feels a little weird, but it makes sense pretty quickly
06:36 < Mian> thanks for the info :)
06:36 < othiym23> Mian: if you've ever used Spring with Java, broadway or architect will feel familiar pretty quickly
06:36 < Mian> I am trying to use Express.js as a Webservice API
06:37 < chapel> Mian: I used express to write an api
06:37 < othiym23> Mian: so you write a data access layer as a plugin, and then you wrap the listen call for the Express app with whatever bootstraps the data access layer, and you pass the DAL API object into your router and then everything has a connection to the DB
06:37 < chapel> its quite nice
06:38 < othiym23> if you're writing a lightweight CRUD app and not going to do a lot of templating or controller logic, Restify is worth a look as well
06:38 < chapel> othiym23: I haven't used restify, but the reason I used express is due to conformity with other code (mainly our webserver)
06:39 < othiym23> chapel: both Express and Restify are going to feel a lot like Sinatra, because I think that was the template for both of them
06:39 < chapel> well
06:39 < othiym23> Restify has some nice goodies and definitely has a much simpler internal architecture, which may or may not matter to you
06:39 < chapel> express was based on sinatra style
06:39 < chapel> restify was based on express
06:40 < othiym23> I personally prefer Strata, but only I and mjjackson use it, apparently ;)
06:40 < Youdaman> othiym23: restify looks cool
06:41 < othiym23> I know a bunch of people happily using it in production apps, Youdaman
06:41 < othiym23> Express is pretty good, esp. Express 3, but for simpler stacks, Restify is very fast and has stuff like node-dtrace integration
06:42 < othiym23> oo ice burn, the node_redis test suite thinks my version of the Redis server isn't new enough
06:43 < othiym23> baroo? downloaded and installed redis 2.6.0rc4, banner says 2.5.14 in like 3 places
06:58 < cconstantine> yo
07:15 < Industrial> I have problems running browserify with coffee. If I run a 'coffee -wc .' then browserify public/js/app.js -w -v -o public/js/bundle.js will not detect the changes from coffee :(
07:18 < lampda> what is the best ide for node js on windows ?
07:19 < SomeoneWeird> sublime text
07:19 < SomeoneWeird> although it's not really an IDE
07:20 < lampda> thanks @someoneweird, did not know sublime is there for windows
07:22 < cconstantine> anyone have luck getting haproxy to proxy socket.io?
07:26 < pyrotechnick> SomeoneWeird: ever tried resharper with JS?
07:27 < SomeoneWeird> i havn't
07:27 < SomeoneWeird> but I don't even like it for .net
07:28 < SomeoneWeird> anyone played around with appjs?
07:28 < SomeoneWeird> im having trouble getting it working
07:29 < LouisT> SomeoneWeird: i did a bit
07:29 < LouisT> SomeoneWeird: what part are you having issues with?
07:30 < SomeoneWeird> GLIBC version mismatch
07:32 < analphabet> Hey everyone! Do you recommend using coroutine libraries like node-sync / asyncblock, etc.? If yes, which one would you prefer / recommend?
07:32 < SomeoneWeird> async
07:33 < analphabet> SomeoneWeird: that'S not a coroutine lib
07:33 < SomeoneWeird> lol
07:33 < analphabet> ?
07:33 < SomeoneWeird> dw
07:36 < analphabet> I already use async, but as pointed out in the accompanying docs of the above modules, it's a pain, if you have more complex problems
07:56 < deoxxa> analphabet: the best advice is "don't"
07:57 < deoxxa> analphabet: trying to squish synchronous style flow into a node application will only end in tears
07:57 < deoxxa> analphabet: what specific problems are you facing that have caused you to look for a system like that?
07:58 < deoxxa> SomeoneWeird: i can't get it to work installing via npm, but i played around with it a bit after downloading the whole package (the .zip file) from the website
07:59 < SomeoneWeird> i've tried both
07:59 < deoxxa> what platform?
07:59 < deoxxa> i got it working on os x
07:59 < SomeoneWeird> debian
07:59 < deoxxa> ah, not sure then
07:59 < deoxxa> CEF is a bit of a monster
07:59 < SomeoneWeird> http://pastie.org/5056009
08:00 < SomeoneWeird> yea. >.<
08:01 < deoxxa> hrrrrrm
08:01 < deoxxa> tried the 32 bit version?
08:01 < SomeoneWeird> actually no
08:01  * SomeoneWeird downloads
08:02 < deoxxa> it might not help, but i've started using 32 bit for everything with node
08:02 < analphabet> deoxxa: see this: https://github.com/travis4all/asyncblock#compared-to-other-solutions
08:02 < deoxxa> it's faster and v8 is happier with 32 bit
08:02 < SomeoneWeird> yeah
08:03 < SomeoneWeird> I didn't even think of it
08:03 < SomeoneWeird> "im on 64 bit so why would i download the 32 bit" etc.
08:04 < deoxxa> analphabet: so the contrived example that they present is exactly the problem that you were facing?
08:04 < analphabet> no.
08:04 < deoxxa> hokay
08:04 < deoxxa> then...
08:04 < analphabet> deoxxa: but mine looks the same eventually :)
08:05 < analphabet> the point is, you do not even want to start reading through the pure node example
08:05 < deoxxa> analphabet: it doesn't help that they've structured their example badly on purpose
08:05 < analphabet> you think so?
08:06 < SomeoneWeird> same err deoxxa 
08:06 < deoxxa> i do
08:06 < SomeoneWeird> o well
08:06 < deoxxa> analphabet: http://callbackhell.com/ is what's usually pasted at this point in this conversation
08:07 < deoxxa> analphabet: the important part though, in my opinion, is halfway down the page and headed "modularize!"
08:10 < analphabet> deoxxa: yeah, with this solution you don't get callback pyramids, but you end up writing more lines of code (i know this is the style, used in node.js source)
08:10 < analphabet> it's not really *better* imo
08:11 < analphabet> deoxxa: what exactly do you mean by "trying to squish synchronous style flow into a node application will only end in tears"?
08:12 < deoxxa> well, nearly every library is going to make the assumption that you're using plain old callback-style program flow
08:12 < deoxxa> or streams
08:13 < deoxxa> so you might end up with subtle bugs or added complexity when you try to move it to another style of programming
08:14 < analphabet> deoxxa: I found this https://github.com/0ctave/node-sync#examples (scroll down to "transparent integration")
08:14 < deoxxa> fibers are just bad all around
08:14 < deoxxa> they're terribly slow once you have more than a couple of them going at once
08:15 < analphabet> deoxxa: did you try this
08:15 < deoxxa> i didn't, but a coworker of mine did
08:15 < deoxxa> i had to spend a week rewriting his code after we pushed it live
08:16 < analphabet> :)
08:16 < analphabet> deoxxa: btw, is it true that each fiber runs in it's own thread
08:16 < deoxxa> in some implementations, yes, it's a completely separate v8 thread
08:16 < deoxxa> not sure about node-sync
08:16 < analphabet> deoxxa: i think they all depend on node-fibers
08:18 < analphabet> deoxxa: so, say you have a webserver, and you create a new fiber for each request, you end up having lots of threads like apache. and that's bad
08:18 < analphabet> deoxxa: right?
08:18 < deoxxa> bingo
08:18 < deoxxa> analphabet: i'm still waiting for an example of what problems you were facing, by the way ;)
08:19 < analphabet> ok, i think you convinced me
08:21 < analphabet> it's just that I'm on the beginning of writing a new app and afer writing some amount of code, ...
08:22 < pyrotechnick> SomeoneWeird: what's wrong with resharper/
08:22 < analphabet> i was disappointed by the way unnecessary complexity cluttered up my code
08:23 < deoxxa> analphabet: i don't think it's unnecessary - it makes it very clear what's happening
08:23 < deoxxa> analphabet: like you know "oh, i'm passing a callback in here. that means this might happen later."
08:23 < SomeoneWeird> pyrotechnick, nothing wrong with it, I just don't use i
08:23 < SomeoneWeird> t
08:24 < pyrotechnick> SomeoneWeird: you said you didn't like it
08:24 < analphabet> deoxxa: yea, well, I'm implementing lot's hooks for possible plugins to integrate...
08:25 < astropirate> Hello friends
08:25 < deoxxa> analphabet: try turning that around - turn your application into a library and let your users implement their own system with it. there's no reason you can't also consume that library in some kind of "reference" implementation.
08:26 < deoxxa> analphabet: for an example of this in action, see the `express' framework
08:27 < analphabet> deoxxa: I'm using express
08:27 < analphabet> http://beta.etherpad.org/p/NfAuSAybvY5
08:28 < deoxxa> that's indented really weirdly
08:28 < pyrotechnick> analphabet: your name is shocking
08:29 < analphabet> deoxxa: help yourself... :)
08:30 < analphabet> pyrotechnick: it's a political statement...
08:30 < pyrotechnick> what statement is it making
08:33 < syskk> what are some active Node.js job/freelance boards out there?
08:34 < analphabet> pyrotechnick: what's on second!
08:34 < pyrotechnick> what
08:35 < analphabet> pyrotechnick: plus, he's illiterate, so he can'T make no statement....
08:38 < analphabet> there are still millions of people uneducated and illiterate, my nick makes you think about this, especially since I'm not illiterate apparently...
08:38 < analphabet> </ot>
08:39 < pyrotechnick> my cup overfloweth
08:45 < gavri> I'd like to use harmony proxies? should I use https://github.com/samshull/node-proxy or invoke node with "--harmony-proxies"?
08:46 < astropirate> gavri, i'd go with the native solution
08:46 < gavri> astropirate: is node-proxy not needed anymore then if one is using a new version of node?
08:47 < astropirate> that is my conclusion
08:47 < astropirate> i could be wrong though
08:48 < gavri> astropirate: thanks
08:48 < astropirate> np
09:49 < evelyette> hi, is there a way to cast a number into a string ?
09:49 < tuhoojabotti> ''+number
09:49 < LouisT> String(number)
09:49 < LouisT> that would work as well
09:49 < LouisT> >.>
09:49 < tuhoojabotti> or that
09:50 < eMarek> hi
09:50 < tuhoojabotti> JSON.stringify(number)
09:50 < eMarek> anybody here running node on VPS?
09:50 < tuhoojabotti> :P
09:50 < evelyette> thanks, works
09:51 < deoxxa> eMarek: i'd wager on nearly everyone here running node on a VPS
09:51 < eMarek> i need some help
09:51 < tuhoojabotti> I'm running node on a real public server 
09:52 < eMarek> i installed node on vps and start the example webserver
09:52 < eMarek> everything looks ok
09:53 < eMarek> but the server just won't response
09:53 < tuhoojabotti> what port
09:53 < eMarek> 1337
09:53 < tuhoojabotti> ok
09:54 < Youdaman> might have to open the port
09:54 < tuhoojabotti> yeah
09:54 < Youdaman> if you don't have apache or another http server/service running, try port 80
09:54 < tuhoojabotti> then you need root, right?
09:55 < Youdaman> yeah if he has root on his vps
09:55 < eMarek> where should i do this (i don't have a lot of experience with vps)
09:55 < Youdaman> to shutdown apache 
09:55 < Youdaman> eMarek: do you have root access?
09:55 < eMarek> i think that apache is not istalled
09:55 < eMarek> yes i have
09:55 < tuhoojabotti> what vps does not give root
09:55 < Youdaman> eMarek: simplest way is just set the port of your app to 80
09:56 < Youdaman> then try to hit your IP/domain
09:56 < Youdaman> tuhoojabotti: some shared ones
09:56 < eMarek> just a sec, i will try
09:56 < tuhoojabotti> how is that a vps then :P
09:56 < Youdaman> sans p ;)
09:57 < tuhoojabotti> shared privacy is the best
09:58 < eMarek> i tried on port 80, but still won't work
09:59 < Youdaman> what about on the server itself if you curl that address?
09:59 < Youdaman> from the command line
09:59 < Youdaman> i have to go but i'll be back later sorry
10:00 < eMarek> ok thanky you anyway
10:16 < eMarek> i tried on server and curl does work
10:16 < bizoo> i tried on server and curl does work
10:16 < LouisT> what
10:16 < bizoo> what
10:16 < LouisT> .
10:16 < bizoo> .
10:16 < astropirate> ,
10:16 < bizoo> ,
10:16 < eMarek> where is the problem then?
10:16 < bizoo> where is the problem then?
10:16 < LouisT> wtf is this nonsense
10:16 < bizoo> wtf is this nonsense
10:16 < LouisT> oh k
10:18 < eMarek> what was that before?
10:18 < LouisT> eMarek: what was what?
10:18 < eMarek> i just fu** something up :D
10:19 < astropirate> what happens in #node.js stays in #node.js
10:20 < astropirate> :O
10:20 < eMarek> anyway, i curl localhost on vps and works ok, but the server does not response what i am trying from my laptop
10:20 < eMarek> any idea?
10:20 < eMarek> when*
10:20 < astropirate> firewall?
10:22 < eMarek> can i disable firewall on centos vps, or sholud my server administrator do this on hypervisor?
10:22 < eMarek> sorry if question is stupid
10:22 < astropirate> vps
10:22 < eMarek> tnx, will google it
10:22 < LouisT> astropirate: i first read your name as "asspirate" O_o
10:23 < astropirate> LouisT, you got a dirty mind girl
10:23 < LouisT> wut
10:23 < LouisT> i'm not a girl
10:23 < astropirate> thats what they all say
10:23 < astropirate> :O
10:23 < astropirate> baram pushhhh
10:27 < eMarek> a liitle searching bring me to /etc/sysconfig/iptables
10:28 < eMarek> the question is, how to open port :D
10:28 < LouisT> eMarek: what port are you trying to listen on?
10:28 < eMarek> 80
10:28 < eMarek> i am doing a node testing
10:29 < LouisT> eMarek: do you have root access?
10:29 < eMarek> yes
10:29 < LouisT> ah ok, so when you try to bind to port 80 does it throw an eaccess error?
10:29 < eMarek> no no
10:29 < eMarek> everything is ok
10:29 < eMarek> i tries to curl localhost on server
10:29 < eMarek> and it works
10:30 < LouisT> ah so you just can't get access from outside?
10:30 < eMarek> yes
10:30 < LouisT> eMarek: who is your provider if you don't mind me asking?
10:30 < eMarek> i think i should open the port on firewall
10:30 < LouisT> so you need iptables?
10:30 < eMarek> some local provider (from slovenia)
10:31 < LouisT> iptables -A INPUT -p tcp -m tcp --sport 80 -j ACCEPT
10:31 < LouisT> iptables -A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT 
10:31 < LouisT> should work
10:32 < eMarek> should i just add this to inptables file?
10:32 < eMarek> iptables*
10:33 < LouisT> no
10:33 < LouisT> run those commands in root
10:33 < LouisT> as root*
10:34 < eMarek> i did
10:34 < eMarek> but nothing happened
10:35 < LouisT> then something else must be happening
10:35 < LouisT> are you running your node app as root as well?
10:35 < eMarek> yes
10:35 < eMarek> in background
10:35 < LouisT> hm
10:36 < LouisT> eMarek: can you pastebin your app?
10:36 < litenull> eMarek: slovenc ? :)
10:36 < LouisT> actually, just your listen line really
10:37 < eMarek> litenull: pozdrav z dolenjske :)
10:37 < eMarek> LoisT: just a sec
10:37 < LouisT> -.-
10:37 < LouisT> Louis tbh
10:38 < litenull> eMarek: pozdrav s primorske :) sysadmin ali developer :)
10:38 < eMarek> http://pastebin.com/k1UMgR6N
10:38 < harrydog> anyone know how to serve socket.io locally?
10:38 < LouisT> harrydog: what do you mean locally?
10:39 < harrydog> i did npm install socket.io, which installed the node_module, but how to i like to the socket.io library from the client?
10:39 < LouisT> eMarek: maybe you should try binding directly to your IP?
10:39 < litenull> yes that's probably the problem :)
10:39 < harrydog> - how do i link, not like
10:39 < LouisT> harrydog: usually just: <script src="/socket.io/socket.io.js"></stript>
10:40 < harrydog> yeah, i try that but it says not found, maybe because i'm using port 3000, not 80
10:40 < LouisT> it shouldn't
10:40 < litenull> harrydog: client-side js, check it on http://socket.io
10:40 < harrydog> GET http://localhost:3000/socket.io/socket.io.js 404 (Not Found)
10:40 < LouisT> i guess it depends on how you're listening with socket.io tbh
10:40 < LouisT> harrydog: http://socket.io/#how-to-use
10:40 < deoxxa> https://github.com/mozilla/sweet.js IT'S HAPPENING AGAIN
10:41 < LouisT> deoxxa: we're doomed!
10:42 < deoxxa> is there like, some guy in a back room somewhere, telling people to make new and shitty compile-to-javascript projects
10:42 < eMarek> LouisT: i did it    .listen('80','91.223.115.80');   but still do not work
10:43 < LouisT> eMarek: that is really odd.. it seems as if your host might be filtering that port for some reason
10:43 < LouisT> have you tried any other ports or servers on your vps?
10:43 < eMarek> litenull: basically i am php developer, i am learning node for my thesis
10:44 < LouisT> harrydog: did you figure it out?
10:44 < litenull> eMarek: you sure there is no switch/router that is filtering your 80 port ?
10:44 < harrydog> yeah, i'm a sum sum, i didn't require socket.io on the server.js, let me try that
10:44 < harrydog> dum dum
10:44 < eMarek> litenull:i don't know how to check it, i am just a vps user
10:45 < litenull> where do you have your vps ?
10:45 < litenull> call support, they will tell you what to do :)
10:45 < LouisT> eMarek: you should probably contact your provider, should be faster than trying to look for yourself
10:45 < eMarek> LouisT: yes i have. can i ask where can i check if port is opened in firewall?
10:46 < eMarek> litenull: arctur.si
10:47 < litenull> eMarek: if you'll call them, you'll solve in 10 minutes :)
10:47 < eMarek> litenull: it sunday, i don't want to diturb :D
10:48 < litenull> they have 24h support, you pay for that :)
10:48 < harrydog> Cannot call method 'on' of undefined, apparently io.sockets is an undefined method
10:48 < LouisT> harrydog: show your server.js?
10:49 < LouisT> or at least the listen and socket.io binding stuff
10:49 < harrydog> http://pastebin.com/9w4WpZcg
10:49 < eMarek> litenull: i mailed them yesterday and there is no response as at my server :D
10:50 < eMarek> litenull: i have one month for free using their server
10:53 < LouisT> harrydog: where your io.listen is, try: var io = require('socket.io').listen(app);
10:53 < LouisT> er now
10:53 < LouisT> var io = require('socket.io').listen(server);
10:54 < harrydog> nope http://pastebin.com/08MDZBvt
10:54 < LouisT> no
10:54 < harrydog> wait 1 sec
10:54 < LouisT> var io = require('socket.io').listen(server);
10:55 < harrydog> excellent, thanks
10:55 < LouisT> that worked?
10:56 < harrydog> so i guess listen is not directly a method of whatever gets returned from require('socket.io')
10:56 < harrydog> yes
10:56 < LouisT> oh crazy, i've never used express so i just guessed heh
10:57 < harrydog> good guess
10:58 < litenull> eMarek: i understand
10:58 < litenull> eMarek: then wait till monday :)
10:59 < harrydog> seems like weird behavior, that io = require('socket.io').listen(server) would be different than io = require('socket.io'); io.listen(server);
11:00 < eMarek> litenull: do you have skype or sth?
11:00 < litenull> eMarek: i have, query me :)
11:00 < LouisT> harrydog: it might not be, i think it's just something in the order that you required stuff 
11:00 < LouisT> as i said, i've never used express, so i've not had to deal with that myself
11:01 < eMarek> litenull: is this some kind of irc function or? i dont know how to. :D
11:02 < LouisT> harrydog: this isn't directly about your issue, but it might help you combine the two better http://blog.joshsoftware.com/2012/01/30/push-notifications-using-express-js-and-socket-io/
11:04 < harrydog> yeah, there's a few things out there on to connect express with node.js, i picked up a couple books
11:04 < harrydog> he's doing it the same way, adding the listen method right after the require('socket.io')
12:19 < blez> hello
12:19 < blez> I wanna get a hosting for node
12:19 < pyrotechnick> greetings and salutations
12:19 < blez> any popular solutions?
12:19 < blez> node+mongo
12:21 < deoxxa> blez: nodejitsu is best jitsu
12:22 < blez> but I'm wondering how fast will it be, cause now I'm having 25k requests a day to my php
12:22 < blez> do the free ones allow that much requests?
12:22 < deoxxa> that's like one request every 5 seconds
12:23 < deoxxa> and the free plans are going away soon, but yes
12:24 < blez> but if I use the free plan, will they cancel it when it's not beta?
12:24 -!- mbalho changed the topic of #Node.js to: node.js - handles at least one request every five seconds
12:24 < deoxxa> you'll have to ask them about that
12:25 < deoxxa> mbalho: ;)
12:25 < blez> http://nodejitsu.com/paas/pricing.html
12:25 < blez> what does jitsu and drone mean
12:25 < blez> aha, one node process
12:27 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:28 < blez> so nodejitsu is a cloud service? should work fast for most of the countries?
12:29 < blez> I'll ask in #nodejitsu
12:48 < analphabet> hey! Anybody in here, who knows, how I can disable mongoose automatically buffering commands til it's connected?
12:48 < MI6> joyent/node: Jan Lehnardt v0.8 * a7b5938 : docs: fix copy and paste error - http://git.io/LIRQxQ
12:48 < dch> I'm writing an irc meeting bot and want to reload my app.js file when I make a change to it, without needing to restart the app (and wait for it to reconnect to irc). What's a good way to handle that?
12:49 < pyrotechnick> dch: do you want to hotswap code or automatically restart the server on change?
12:49 < analphabet> dch: i'd say it's impossible to keep the connection
12:49 < pyrotechnick> nonsense
12:50 < dch> pyrotechnick: thanks, um hotswap code atm. Later the latter will be useful. atm I am doing stuff like forgetting the regex format, and need to fix it.
12:50 < dch> I guess I could also do this in the repl, right/
12:50 < pyrotechnick> the latter is much easier and robust
12:50 < pyrotechnick> "supervisor" or "forever" will do the latter
12:51 < pyrotechnick> there's a bunch for the former, look for "hotswap" "hotload" or something
12:51 < analphabet> pyrotechnick: how does this work?
12:52 < dch> pyrotechnick: thanks, I have forever-monitor on my list & I'll check the rest.
12:52 < pyrotechnick> yw
12:53 < pyrotechnick> if you really want to handroll hotswaps check out http://nodejs.org/api/vm.html
12:54 < pyrotechnick> there's probably an easier/simpler way but there's my 0.02
12:55 < dch> pyrotechnick: no need for that atm. I found http://toolbox.no.de/packages?key=h with about 4 solutions, all useful. I think atm I can do all I need via repl.
12:55 < pyrotechnick> god's speed.
12:57 < analphabet> how I can tell mongoose to disable "automatic buffering of commands on start up"?
13:02 < pyrotechnick> analphabet: what do you want it to do instead
13:03 < analphabet> I want it to issue an error on my <Model>.find callback
13:05 < pyrotechnick> why
13:06 < pyrotechnick> the assumption there's a connection before anything like that can happen is heavily ingrained throughout mongoose
13:06 < pyrotechnick> perhaps you shouldn't be querying it until you know it's connected
13:07 < analphabet> then, why does this functionality exist at all?
13:07 < pyrotechnick> for noobs
13:08 < aandy> or to make "why does this exist" people go "i'm a genius" :)
13:09 < pyrotechnick> generally the answer to this question is "for noobs" or "because"
13:10 < analphabet> pyrotechnick: Suppose, I'm connecting to my database and this fails (then it maybe outputs an error, but it won't exit, because i don't want it to exit). Now, a request comes in and my app queries the database (aka <Model>.find), but it's like the requested  document doesn't exist, since mongoose doesn't tell me, it's disconnected / issues an error.
13:10 < pyrotechnick> ODM/ORM/watever by their very nature are heavily opinionated, that's the idea afterall
13:10 < aandy> pyrotechnick: hehe
13:11 < pyrotechnick> "because i don't want it to exit"
13:11 < pyrotechnick> if there's an error, handle it
13:12 < pyrotechnick> you're attempting denial-driven development
13:12 < aandy> that's pretty typical node/js behavior: cb(e, res)
13:12 < pyrotechnick> not mongoosey
13:13 < aandy> no, i mean the "if there's an error, handle it"
13:13 < pyrotechnick> yeah
13:13 < pyrotechnick> in mongoose connection problems are fired on the connection
13:13 < pyrotechnick> not the queries made during them
13:13 < analphabet> pyrotechnick: of course i want to handle it.
13:13 < aandy> pyrotechnick: i've never used mongoose. by eventemitter or?
13:14 < pyrotechnick> yes
13:14 < aandy> that would make sense as you can put your reconnect logic there
13:14 < pyrotechnick> yes
13:14 < aandy> ;)
13:14 < pyrotechnick> it's rather well-written really
13:14 < analphabet> and I will probably add some clause, checking whether I'm connected to the db, but first I wanted to know, why it doesn't tell my...
13:14 < analphabet> * me
13:14 < pyrotechnick> analphabet: you're not listening to its cries
13:15 < aandy> herp.on('derp', function() { console.error('oh no'); })
13:15 < analphabet> pyrotechnick: I am.
13:15 < pyrotechnick> on the first paragraph of the docs
13:15 < pyrotechnick> it explains how
13:16 < analphabet> db.on('error', console.error.bind(console, 'connection error:'));
13:16 < analphabet> I know.
13:16 < pyrotechnick> if you're having issues with a library you need to start "owning" it
13:16 < pyrotechnick> read the docs, read the code
13:16 < pyrotechnick> pretend you wrote it
13:16 < aandy> do you listen before you connect?
13:17 < analphabet> I am listening to the error and disconnected events, but what should I do? I don't wanna process.exit because my app will be unavailable, obviously.
13:18 < SomeoneWeird> set a global variable that each call checks
13:18 < pyrotechnick> SomeoneWeird++
13:19 < analphabet> yea ("I will probably add some clause, checking whether I'm connected to the db", see above)
13:19 < pyrotechnick> this is why we can't have nice things
13:19 < SomeoneWeird> lol
13:20 < pyrotechnick> SomeoneWeird: you're smarter than i thought
13:20 < SomeoneWeird> ... thanks
13:20 < pyrotechnick> a man of the people
13:20 < pyrotechnick> give them what they ask for
13:21 < SomeoneWeird> wat
13:21 < analphabet> ... :)
13:22 < pyrotechnick> analphabet: do you like PHP?
13:22 < analphabet> it's probably more convenient to add some middlerware checking Connection#readyState and throwing, if it's not ready....
13:22 < analphabet> pyrotechnick: why should I?
13:22 < pyrotechnick> there's hope
13:24 < analphabet> pyrotechnick: did you ever read http://freenode.net/catalysts.shtml ?
13:25 < pyrotechnick> did you ever read http://rulesoftheinternet.com/
13:27 < analphabet> pyrotechnick: no.
13:27 < pyrotechnick> and so the snake bites its own tail
13:28 < analphabet> no, it doesn't ;)
13:29 < pyrotechnick> omnomnom
13:30 < analphabet> pyrotechnick: apparently, you can't help me with my problem. So, thanks for your time.
13:31 < pyrotechnick> *licks lips*
13:31 < pyrotechnick> *rubs tummy*
13:31 < pyrotechnick> *lays out to nap*
13:34 < SomeoneWeird> lol.
13:35 < pyrotechnick> life is tragedy up close, a comedy from afar
14:05 < chirag> wondering if someone can help me understand the benchmark of a small expressjs app. https://gist.github.com/3888654
14:06 < chirag> i'm a newbie. completed the app after learning in bits and parts. Will push the app to github soon.
14:19 < harrydog> anyone know, in express, how i can route all directory url requests, to an index.htm?
14:19 < SomeoneWeird> just add app.get('*', function(req, res) { res.redirect('/'); });
14:19 < SomeoneWeird> after all your other routes
14:22 < vectorshelve> what is the major difference between angular.js ember.js node.js and backbone.js since I believe all are js web framework.. so which one to chose from is a confusion 
14:23 < harrydog> i mean, say i create public directories public/my_dir/index.htm, how do i have mysite.com/my_dir/ load the index.htm
14:23 < pyrotechnick> the static middleware does that
14:23 < pyrotechnick> from connect
14:23 < SomeoneWeird> vectorshelve, nodejs isn't a web framework, it's a programming language
14:24 < vectorshelve> SomeoneWeird: ok.. and the rest ? 
14:24 < SomeoneWeird> the rest I wouldn't touch with a 100 foot pole :)
14:24 < SomeoneWeird> (imo)
14:24 < vectorshelve> SomeoneWeird: any good site or reference where I can begin by reading about what these are really and then start using them.. since I am a beginner in all this
14:24 < pyrotechnick> vectorshelve: https://github.com/addyosmani/todomvc
14:25 < SomeoneWeird> http://www.nodebeginner.org/
14:25 < vectorshelve> http://stackoverflow.com/questions/1884724/what-is-node-js this is oK
14:26 < harrydog> express is one of the more popular frameworks, just throwing that out there, though i'm trying to learn express myself
14:26 < vectorshelve> pyrotechnick: SomeoneWeird but still what is the difference b/w node.js and the rest?
14:26 < pyrotechnick> vectorshelve: node.js is more akin to ruby on rails or LAMP or struts or django or something
14:26 < pyrotechnick> sort of.
14:27 < mauritslamers> pyrotechnick: more like ruby + http server
14:27 < SomeoneWeird> yeah
14:27 < SomeoneWeird> its not RoR
14:27 < pyrotechnick> it is the javascript engine from chrome (v8) with some extra stuff to turn it into a proper programming platform
14:27 < SomeoneWeird> it's a programming language that makes it (really) easy to write a webserver in
14:27 < pyrotechnick> mauritslamers: webrick then
14:28 < vectorshelve> SomeoneWeird: so u mean.. I can use a rails app with node.js as server and not webrick ?
14:28 < mauritslamers> vectorshelve: technically yes, but you don't want to do that :)
14:28 < pyrotechnick> are there any diagrams?
14:28 < pyrotechnick> or should i draw one?
14:29 < mauritslamers> vectorshelve: the main idea behind nodejs is that you are able to use _one_ language from front to back
14:29 < vectorshelve> mauritslamers: why.. well.. I am seriously confused.. I am not understanding what exactly node.js is.. I mean I know ruby rails phusion passenger server.. js+jquery for UI and ajax+json 
14:30 < vectorshelve> but where can I fit node.js and what does it do ? some say it is a pro language and some say server 
14:30 < mauritslamers> node is a runtime environment, in which the programming language is javascript :)
14:30 < mauritslamers> in this runtime environment a http server is included
14:30 < stefan41> how do i get a service into an app without putting it into my initial angular.module('myapp',[]) call?
14:31 < stefan41> whoops. i am in the wrong damn channel.
14:31 < stefan41> sorry.
14:31 < SomeoneWeird> does angular use AMD?
14:31 < mauritslamers> including some other stuff , like file streams :)
14:31 < stefan41> SomeoneWeird: if you hack it together just so it does.
14:32 < stefan41> SomeoneWeird: but angular has its own module system beyond amd that it uses at runtime
14:32 < vectorshelve> mauritslamers: so basically I can build a dynamic webapp using a single view template using node.js alone  
14:32 < vectorshelve> ?
14:32 < mauritslamers> vectorshelve: so the idea is actually that you have a browser environment, but without DOM, but with http server and file interaction
14:32 < pyrotechnick> LOL http://www.youtube.com/watch?v=-sfZqL4Plxc
14:32 < SomeoneWeird> yes vectorshelve 
14:32 < mauritslamers> vectorshelve: yes, you technically can, but where node excels is _not_ doing the ruby approach
14:33 < mauritslamers> the ruby/php approach (and a few others) is a thin client / thick server 
14:33 < mauritslamers> meaning most of the processing is done at the server
14:33 < mauritslamers> nodejs makes it much easier to make thin server applications which do only data handling
14:33 < vectorshelve> mauritslamers: "but without DOM, but with http server and file interaction" what does this line mean?
14:34 < mauritslamers> vectorshelve: simple, you know how a browser works?
14:34 < vectorshelve> mauritslamers: yep
14:34 < mauritslamers> good
14:34 < mauritslamers> a webbrowser is a javascript engine + DOM
14:34 < mauritslamers> but limited, because the javascript engine doesn't have direct access to system resources
14:34 < vectorshelve> mauritslamers: SomeoneWeird and how can I use rails+ node.js together? I mean if at all its possible ? since they both are 2 diff languages and frameworks running on diff servers ?
14:34 < pyrotechnick> node is the opposite of a web browser
14:34 < pyrotechnick> discuss.
14:35 < SomeoneWeird> if you could use JSON to communicate, sure vectorshelve 
14:35 < vectorshelve> mauritslamers: I am kinding of getting you 
14:35 < mauritslamers> vectorshelve: so, what if you could strip the DOM away, and add an integrated http server, and add system resource access 
14:35 < mauritslamers> that is what you get with node
14:36 < pyrotechnick> TIL noders dont know what node is
14:36 < mauritslamers> so, node is a Javascript environment (using Google Chromes V8 JS engine) with http/s server, and file access
14:36 < SomeoneWeird> lol pyrotechnick 
14:36 < SomeoneWeird> its hard to explain
14:36 < mauritslamers> pyrotechnick: please explain
14:36 < vectorshelve> mauritslamers: any site which runs on node.js for a good reference ? 
14:36 < pyrotechnick> watch the video
14:37 < holzp`> in node-redis is there a way to update just some members of a hash and not others in a single command?
14:37 < vectorshelve> mauritslamers: I think I will have to watch ryan tutorials on youtube for beginners.. :) bt yeah ur KT was really hekoful
14:37 < mauritslamers> vectorshelve: please watch them
14:37 < mauritslamers> vectorshelve: did you ever do LISP / Scheme programming?
14:37 < vectorshelve> sure thanks
14:37 < vectorshelve> mauritslamers: no.. ruby and java
14:38 < pyrotechnick> it must be really disturbing to join #node.js and ask that and get these responses
14:38 < mauritslamers> then also watch Douglas Crockfords lectures
14:38 < mauritslamers> pyrotechnick: hehe :)
14:38 < vectorshelve> mauritslamers: sure..thanks.. I would love to be an expert someday on node.js :)
14:38 < mauritslamers> vectorshelve: because you need to know what JS actually is :)
14:38 < pyrotechnick> vectorshelve: i guess the takeway is, node is many things to different people
14:39 < vectorshelve>  mauritslamers sure
14:39 < mauritslamers> pyrotechnick: I am aware you can do a lot of different things with node :) I wrote a midi file reader with node :)
14:39 < vectorshelve> and one last q ... wt has node.js got to do with cloud ?
14:39 < mauritslamers> like anything else has to do with cloud :)
14:39 < pyrotechnick> vectorshelve: ryah initially made node, he has some videos around where he discusses the problems he was having without node, what node is and how it solved them for him, they're a good place to start
14:40 < vectorshelve> pyrotechnick: thanks.. link could help
14:41 < yash> hello... can any one help me with node.js?
14:41 < pyrotechnick> yash: as long as you don't want to know what it is
14:41 < mauritslamers> pyrotechnick: haha :)
14:42 < mauritslamers> yash: and it seems that the node.js channel is for that kind of questions :)
14:42 < yash> thanks :)
14:42 < vectorshelve> yash: I know you are from India :D
14:42 < yash> I have just installed node.js and ran hello_world.js , but have no clue how it's working...
14:42 < pyrotechnick> vectorshelve: http://www.youtube.com/watch?v=F6k8lTrAE2g
14:42 < SomeoneWeird> lmao pyrotechnick 
14:42 < mauritslamers> I think we should ask vectorshelve to explain to yash what node.js is ;-)
14:43 < pyrotechnick> i think that's the first...
14:43 < yash> I know java script a little, is there link where I can find information about node.js or online tutorials?
14:43 < gabrieluk> google?
14:43 < pyrotechnick> vectorshelve: no crap it's not
14:43 < mauritslamers> yash: and watch the videos pyrotechnick is trying to post
14:43 < yash> ok.
14:43 < pyrotechnick> im trying guys
14:43 < pyrotechnick> apparently this is an enigma
14:44 < pyrotechnick> node is in superposition
14:44 < mscdex> yash: http://nodejs.org/api/ http://nodebeginner.org/ http://nodetuts.com/ http://nodeguide.com/ http://howtonode.org/
14:44 < SomeoneWeird> NodeJS is an event driven, Non-blocking IO platform that runs on Chromes V8 engine
14:44 < gabrieluk> hey, anyone using stylus for css? i want to ask some questions, but there's no channel for that
14:44 < SomeoneWeird> sum it up? ^
14:44 < yash> :) thanks 
14:44 < pyrotechnick> SomeoneWeird: only seasoned noders appreciate that sentence
14:45 < mauritslamers> pyrotechnick: what kind of video you were looking for? http://www.youtube.com/watch?v=M-sc73Y-zQA ?
14:45 < pyrotechnick> the very first one
14:45 < SomeoneWeird> lol i know pyrotechnick 
14:45 < pyrotechnick> ryah will cry when he reads this
14:45 < mauritslamers> http://jsconf.eu/2009/video_nodejs_by_ryan_dahl.html
14:46 < mauritslamers> something  like that?
14:46 < SomeoneWeird> ahah
14:46 < SomeoneWeird> im sure isaac will too 
14:46 < pyrotechnick> i think that might be it ^
14:47 < yash> Thank you guys for helping out quickly, I have project which I am supposed to build using node.js + mongoDB. I'll go thru these resources and will be back when help is needed. once again thanks.
14:47 < pyrotechnick> node is subject to heisenbergs uncertainty principle
14:47 < SomeoneWeird> :)
14:47 < pyrotechnick> the more you try to define what node is the more it resists definition
14:47 < SomeoneWeird> ha
14:48 < mauritslamers> pyrotechnick: which is any good programming language or runtime :)
14:48 < pyrotechnick> it feels like we've all learned a valuable lesson but i'm not entirely sure what it is
14:49 < SomeoneWeird> node is.
14:49 < SomeoneWeird> lol
14:52 < pyrotechnick> i feel like this is a problem
14:52 < mauritslamers> it is
14:52 < pyrotechnick> we should fix it
14:52 < pyrotechnick> i think a single picture could fix it
14:52 < mauritslamers> it is the same kind of problem I have when I try to explain what sproutcore is
14:53 < pyrotechnick> maybe a few pictures and you choose which picture depending on what you know/use
14:54 < pyrotechnick> so you can relate to their development background
14:54 < pyrotechnick> substack: WE REQUIRE YOUR DRAWING EXPERTISE
14:55 < substack> beep boop
14:55 < pyrotechnick> (sneaking suspicious substack's art is flawless and he just runs it thru the xkcd mathematica function)
14:56 < pyrotechnick> substack this guy was here and was all like what is node and we tried but we cant explain it in words
14:56 < pyrotechnick> tell us
14:56 < pyrotechnick> what does node look like?
14:57 < pyrotechnick> if node were to incarnate as a creature
14:58 < substack> http://substack.net/images/node_turtle.png
14:58 < pyrotechnick> that was quick
14:58 < pyrotechnick> i kid i kid
14:59 < pyrotechnick> i still don't understand why it's a turtle
14:59 < pyrotechnick> turtles all the way down?
14:59 < mauritslamers> haha :)
15:00 < niggler> i wonder if a node version of php could outpace php cli ...
15:01 < shanse> c/,,\
15:01 < pyrotechnick> some men just want to watch the world learn
15:01 < pyrotechnick> this is ok: http://en.wikipedia.org/wiki/Comparison_of_server-side_JavaScript_solutions
15:02 < niggler> the glut of rhino-based solutions is disconcerting
15:02 < niggler> granted its older than vu
15:02 < niggler> *V8
15:02 < pyrotechnick> http://en.wikipedia.org/wiki/CommonJS#CommonJS_implementations
15:02 < pyrotechnick> that's even better
15:03 < pyrotechnick> vectorshelve: ^
15:03 < pyrotechnick> sorry it took so long
15:04 < pyrotechnick> but why a turtle
15:06 < Fryck_> Nodejs work as Apache ? (for just http protocol) ?
15:06 < Fryck_> I not understand what it's capable to do...
15:06 < mauritslamers> Fryck_: it is a simple Http server
15:06 < pyrotechnick> neither do we
15:06 < Fryck_> mauritslamers, ok ;)
15:06 < mauritslamers> so, it doesn't handle file requests as apache does, with a lot of configuration
15:07 < mauritslamers> it is just capable of receiving http requests and sending answers, and your program is responsible of handling it correctly
15:07 < Fryck_> ok
15:07 < Fryck_> so it is very fast
15:07 < mauritslamers> it is as fast as your function is that handles it :)
15:07 < Fryck_> what about htaccess features ?
15:08 < mauritslamers> if you implement it, it has htaccess features :)
15:08 < Fryck_> thanks to modules
15:08 < mauritslamers> so, by default _nothing_
15:08 < Fryck_> (i saw there are a lot of modules, it's cool !)
15:08 < pyrotechnick> substack: i get it, turtles (javascript) are generally slow but v8 makes it fast like a rocket?
15:08 < mauritslamers> just http and https and that is it
15:09 < Fryck_> i very interrested by express framework to build a dating website, it es a good choice ?
15:09 < Fryck_> i begin to build my website on Yii php framework, i'd like to do all with Express / Nodejs
15:09 < pyrotechnick> Fryck_: yes it's a good place to start
15:10 < Fryck_> i'm interresseted about Cache, RBAC system on Nodejs too
15:10 < Fryck_> (sorry for my bad english)
15:10 < substack> pyrotechnick: io is slow
15:10 < substack> v8 is fast
15:10 < niggler> has anyone built an apache clone in node/
15:11 < substack> niggler: why would you ever want that?
15:12 < pyrotechnick> niggler: i'd say people have started that at least
15:12 < niggler> because you can :P  seriously though, there is a lot of competency with apache in the market and it makes it easier to transition
15:12 < pyrotechnick> niggler: whilst drunk
15:12 < pyrotechnick> then sobered up
15:12 < pyrotechnick> and stopped.
15:12 < niggler> i was playing with some math stuff, for example
15:12 < substack> niggler: what does apache provide that you would want in node?
15:12 < niggler> and doing math in node is orders of magnitude faster than in php
15:13 < niggler> substack: handling a particular configuration format :)
15:13 < substack> sounds icky
15:13 < niggler> the issue of 
15:13 < niggler> "functionality"
15:13 < niggler> is separate from the issue of "interface"
15:21 < harrydog> in express, how do i populate an html page with dynamic content, do i have to run it through a template engine?
15:22 < harrydog> for instance, check if a user is logged in, if so display "logout", if not, display "welcome, sign in" etc
15:23 < Aria> Yes. ejs or jade or mustache
15:27 < Industrial> Hello. If I use both Browserify and coffee and make them watch and compile, then the compiled coffee -> doesn't trigger the browserify watch.
15:27 < Industrial> Is there a way around this?
15:37 < niggler> fuck coffeescript
15:38 < pyrotechnick> Nexxy has a list of your filth niggler
15:38 < aandy> too much hate on coffee script. leave it alone
15:38 < pyrotechnick> we will show your wife and children
15:39 < niggler> that is awesome pyrotechnick 
15:40 < niggler> i draw inspiration from joe biden
15:49 < niggler> woot!  "FATAL ERROR: JS Allocation failed - process out of memory"
15:55 < Fabryz> anyone else following redbull stratos? http://backtime.jit.su
16:07 < mmalecki> Fabryz: woot, nice app
16:08 < timeturner> holy crap this is live?
16:09 < timeturner> damn
16:09 < timeturner> re backtime.jit.su
16:10 < pyrotechnick> embedded live youtube
16:10 < pyrotechnick> $$$
16:12 < vy> What's the recommended way of reading numbers/line from stdin? Is there an npm package for that?
16:12 < pyrotechnick> http://nodejs.org/api/readline.html
16:14 < Fabryz> nice idea, I'll embed the youtube video in there
16:14 < pyrotechnick> is that just streaming twitter API?
16:15 < vy> pyrotechnick: Thanks, let me check that.
16:15 < pyrotechnick> apparently it's delayed 20s in case he dies
16:15 < pyrotechnick> vy: yw
16:16 < Fabryz> yes
16:16 < Fabryz> dang the usual crossdomain issue on Chrome
16:17 < Fabryz> temp removing the video
16:17 < pyrotechnick> i meant their site has it, they must be paying $$$
16:17 < pyrotechnick> embedded doesnt work here in aus anyway
16:17 < pyrotechnick> this works: http://www.youtube.com/watch?v=MrIxH6DToXQ
16:24 < niggler> pyrotechnick: deadline i thought was the gnu readline llibrary
16:25 < niggler> *readline is the GNU library that gives input features
16:25 < pyrotechnick> sorry?
16:25 < pyrotechnick> and
16:25 < niggler> oh your question regarded reading a line from stdin
16:25 < niggler> *vy's question
16:25 < pyrotechnick> stop drinking
16:26 < niggler> "vy: What's the recommended way of reading numbers/line from stdin? Is there an npm package for that?" -- how is suggesting the *readline library an acceptable answer
16:26 < pyrotechnick> seriously just stop
16:26 < pyrotechnick> http://nodejs.org/api/readline.html
16:28 < niggler> doesn't work on mac 
16:29 < pyrotechnick> ava:~ pyro$ node readline.js | OHAI> test | Say what? I might have heard `test`
16:30 < pyrotechnick> come at me bro
16:30 < pyrotechnick> let's have a node-off
16:31 < pyrotechnick> Fabryz: oh my he is freezing...
16:32 < pyrotechnick> Fabryz: GG
16:33 < pyrotechnick> boycott red bull they froze a man
16:33 < Fabryz> we're halfway
16:33 < niggler> { seq 1 5; echo -n hello; } | node readline.js 
16:34 < niggler> prints an extra OHAI>
16:34 < pyrotechnick> :s
16:34 < niggler> which i suspected, from other tests, stems from an issue with the *readline library
16:35 < vy> pyrotechnick: Actually, what I have is an input like: <#-OF-NUMS>\n<FIRST-NUM>\n<SECOND-NUM>\n... I dunno if readline is the right tool for parsing such an input. Any other suggestions? Or I got it totally wrong?
16:35 < pyrotechnick> niggler is going to save you
16:35 < niggler> vy: node-lazy
16:35 < niggler> pyrotechnick: this is not my first time 'round the CLI block
16:36 < niggler> vy: why not normalize it before sending to node?  its a simple awk command 
16:36 < vy> niggler: I'm reading from a preformatted file.
16:37 < niggler> vy: either https://github.com/pkrumins/node-lazy or read in from a command that pre-processes the data
16:38 < niggler> so in awk it would be awk 'p=$1; for(i=0;i!=p;++i) printf "%d";
16:38 < niggler> awk '{p=$1; for(i=0;i!=p;++i) printf ("%d", getline);}'
16:38 < niggler> ooh forgot the newline
16:38 < niggler> awk '{p=$1; for(i=0;i!=p;++i) printf ("%d", getline); printf("\n")}'
16:39 < niggler> then you'd have lines you could read into node and split
16:39 < niggler> OR just use node lazy and keep a variable to track whether you are reading a line with the count or not
16:51 < Fabryz> my app is now starting to die a bit
16:56 < symeog> Is Meteor framework any good in comparison with RailwayJS, Geddy or Express ?
16:57 < chapel> symeog: they can't be compared directly with any accuracy
16:57 < symeog> hmm….
16:57 < JohnMcLear> http://stackoverflow.com/questions/10802939/nodejs-express-or-meteor-or-derby
16:57 < chapel> derby vs meteor sure
16:57 < pyrotechnick> false quadchotomy
16:57 < chapel> but meteor is more than a webserver
16:57 < zezikaro> Hi, could anyone help me please? I'm connecting to a webservice during production, but I'd like to mock it during testing
16:57 < zezikaro> is there a way to do that?
16:57 < chapel> pyrotechnick: you watching the redbull strato jump?
16:57 < JohnMcLear> If you are building realtime then imho you can't go wrong learning about the socket.io api, Learnboost/Guilermo did a great job
16:57 < pyrotechnick> i think it's going to end badly
16:57 < zezikaro> I know there's a development and production settings in express, but is there also a testing?
16:58 < chapel> JohnMcLear: I agree
16:58 < chapel> JohnMcLear: that or sockjs
16:58 < chapel> pyrotechnick: more reason to watch it
16:58 < pyrotechnick> how vicarious
16:58 < JohnMcLear> I'm not familiar w/ sockjs, either way having a simple API to use different transports ETC and knowing when to/not to use Socket VS Ajax is really important for any developer
16:59 < chapel> zezikaro: express does have production/dev settings that read NODE_ENV
16:59 < zezikaro> chapel but what about testing settings?
16:59 < chapel> zezikaro: you can have it be anything
16:59 < chapel> its just based off of the node_env environment variable
17:00 < zezikaro> ah
17:00 < JohnMcLear> imho meteor tries to hard to be a full application development stack and forgets how important middleware is.  But hey, Meteor essentially came from Appjet and the lead on the project(david) really sees a real time application stack as being something that is useful.  I'm just more keen on developers developing application stacks that are specific to their application/user feature requirements.
17:00 < zezikaro> how do you set that variable?
17:00 < symeog> can i rephrase my question and ask what is a good and simple stack in order to build a line of business application in node ?
17:00 < chapel> zezikaro: http://expressjs.com/api.html#app.configure
17:00 < chapel> well
17:00 < JohnMcLear> symeog: depends on your feature requirements.
17:00 < chapel> you can do NODE_ENV=testing node server.js
17:00 < JohnMcLear> Business application could literally, be anything..
17:00 < pyrotechnick> JohnMcLear: but it has smart packages
17:00 < chapel> or you can set NODE_ENV however your OS handles environment variables
17:01 < zezikaro> is it possible to change that within 'npm test' ?
17:01 < JohnMcLear> pyrotechnick: hehe =)
17:01 < symeog> databese(MySQL), User Authentication and Reporting 
17:01 < JohnMcLear> and npm doesn't? Right? ;)
17:01 < pyrotechnick> frankly i'm tired of packages not being smart
17:01 < zezikaro> chapel as in, when i do 'npm test' is it able to set that and change the server i connect to
17:01 < zezikaro> to be a mocked service for testing
17:01 < pyrotechnick> stop writing stupid packages
17:01 < JohnMcLear> I know, I remember back in the good old days when you could just download any stupid algorithm free package, it was chaos.
17:01 < chapel> JohnMcLear: the fact that they don't have server side rendering, and actually render on the server by using an embedded/headless browser which makes requests to then serve as html is well ...
17:02 < pyrotechnick> INCEPTION
17:02 < JohnMcLear> {{}};
17:03 < chapel> zezikaro: well, you could do it a lot of ways
17:03 < chapel> depending on your test framework
17:03 < JohnMcLear> symeog: Sorry for getting distracted.  So you want database read/write, user auth and reporting..  What is reporting?
17:03 < zezikaro> chapel I'm using cucumber.js and writing bdd tests
17:03 < chapel> some people mock out the request library layer and basically control the data returned
17:04 < symeog> thanks....
17:04 < zezikaro> and i'm using the soap module for mocking my server
17:04 < zezikaro> service*
17:04 < symeog> thanks….reporting is that the user wants to print out some datagrids
17:04 < chapel> zezikaro: no idea about cucumber or any of that tbh
17:04 < JohnMcLear> symeog:  Database readwrite would be felixge great work afaik (node-mysql) and user auth you could use passport or anyauth (afaik)..  As far as reporting, depends on what you want to report..
17:04 < zezikaro> chapel :(
17:04  * JohnMcLear can't tell if he is being trolled or not...
17:04 < zezikaro> do you know of any examples maybe chapel?
17:05 < symeog> for example the user has a data table with 100 rows and he/she wants to print in paper with paging of course
17:05 < JohnMcLear> If the user just wants to print datagrids, do they need to be able to edit the datagrids with other users in real time or is it purely: "Data in", "process", "grid out".
17:06 < symeog> real time editing
17:06 < JohnMcLear> Printing in paper..  What is this, the 80s? :P
17:06 < symeog> lol....
17:06 < mscdex> :O
17:06 < JohnMcLear> http://beta.etherpad.org/p/tablesNstuff
17:06 < JohnMcLear> Click that url.
17:06  * mscdex breaks out the dot matrix printer
17:06 < symeog> sec
17:07 < JohnMcLear> I assume that is what you want..
17:07 < pyrotechnick> RIP google wave.
17:07 < JohnMcLear> Real time table editing...  Very weird I would be in the chan when you asked..
17:07 < pyrotechnick> lest we forget.
17:07 < mscdex> never used it
17:08 < JohnMcLear> pyrotechnick Prepare for RIP google Apps..  It's in our sights ;)
17:08 < pyrotechnick> stayed off that bandwagon
17:08 < mscdex> JohnMcLear: including email? ;-)
17:09 < JohnMcLear> mscdex:  Email?  What is this, the 90s?...
17:09 < mscdex> it is!
17:09 < pyrotechnick> 1988 to be precise
17:09 < JohnMcLear> symeog:  Does this application tick your boxes?
17:09 < mscdex> JohnMcLear: unless you plan on adding FidoNet support
17:09 < symeog> ok i saw that and what about data in, process, grid out ? i guess not sorry
17:10 < pyrotechnick> http://en.wikipedia.org/wiki/List_of_collaborative_software
17:10 < JohnMcLear> Good link pyrotechnick +1
17:11 < JohnMcLear> Crazy that Etherpad isn't on that document..  Heh
17:11 < JohnMcLear> Despite it being adopted by WMF
17:11 < pyrotechnick> i thought they shut it down
17:11 < JohnMcLear> I suck at my job if you thought that ;\
17:11 < symeog> John: what i am asking is simple enough i guess but i am not phrasing it correctly….so pls bare with me for a while and let me tell u again my situation
17:11 < pyrotechnick> http://etherpad.com/
17:11 < tuhoojabotti> that list is missing trello hmm
17:11 < pyrotechnick> guys it's a wiki…edit it
17:12 < JohnMcLear> Yea guys!  My wikipedia edits always get denied so I gave up
17:12 < tuhoojabotti> I could, but it's late, I'm tired, lazy, headache
17:12  * JohnMcLear just noteiced Etherpad is on there under Groupware
17:12 < pyrotechnick> what is this then JohnMcLear http://etherpad.com/
17:13 < owen1> is nodeup live?
17:13 < symeog> i have a registration screen for orders..one at a time…by the time the user submits the order i need to (very quicly) send this order on the printer…is this possible and simple with node ?
17:14 < pyrotechnick> JohnMcLear: explain this page http://etherpad.com/ wtf
17:14 < JohnMcLear> pyrotechnick Yep, Google like domain parking too..  We're working at getting that domain transferred to the Etherpad foundation.  Here is a long post about it: https://groups.google.com/forum/?fromgroups=#!topic/etherpad-open-source-discuss/q9trtfWfcuY
17:14 < pyrotechnick> that's fucking retarded
17:14 < JohnMcLear> Yes it is.
17:14 < JohnMcLear> I completely agree.
17:15 < JohnMcLear> But, I'm old enough to know these things take time and you have to be cool/calm about them :)
17:15 < JohnMcLear> Going to pick up a car, bbiab
17:16 < symeog> if anybody can answer my question, i would be grateful
17:16 < pyrotechnick> proof google has been overtaken by intelligence agencies ^
17:16 < tomshreds> Hey has anyone played with &lt and &gt with MongoDB with JavaScript? I'm having a hard time with dates and I'm doing exactly as told.
17:16 < pyrotechnick> symeog: possible yes, simple, not really but that's subjective as
17:19 < pyrotechnick> symeog: use `npm search` or https://npmjs.org/ for "printer" modules
17:19 < pyrotechnick> and expressjs or something for the form part
17:19 < symeog> i thought it like this: the user goes to a certain route then node takes the request and sends the data to the prointer
17:19 < pyrotechnick> yep
17:20 < pyrotechnick> https://github.com/visionmedia/express/tree/master/examples
17:21 < symeog> i found this: node-printer-lp
17:21 < pyrotechnick> there's a few, printers are finicky things so your mileage may vary
17:21 < pyrotechnick> you'll have to play with it
17:22 < symeog> i know that pyro and believe me i am trying to avoid it like hell !!!!!!
17:22 < symeog> ok but my big question remains since i am a newcomer in node
17:22 < pyrotechnick> it might be useful to decouple the printing part from node via shell
17:22 < symeog> should i pick a MVC framework ?
17:23 < pyrotechnick> symeog: you trying to learn or get this thing working?
17:23 < symeog> get this thing working
17:23 < symeog> i have a task yes
17:23 < pyrotechnick> hack it together yourself
17:23 < symeog> i see
17:23 < symeog> i thought it this way my self
17:24 < symeog> but sooner or later i have to learn some framework ???
17:24 < pyrotechnick> no
17:24 < pyrotechnick> you should learn _about_ frameworks from others, when you have the time/motivation
17:24 < pyrotechnick> did i link you todomvc before?
17:24 < symeog> nope
17:25 < pyrotechnick> https://github.com/addyosmani/todomvc
17:25 < symeog> let me see it pls
17:25 < mscdex> the classic todo list
17:25 < pyrotechnick> better than hello world
17:25 < mscdex> not by much
17:26 < pyrotechnick> better than ten green bottles
17:26 < pyrotechnick> or guess the number
17:27 < pyrotechnick> my hello world was flight of the phoenix in actionscript
17:27 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
17:27 < pyrotechnick> good times were had by all
17:29 < pyrotechnick> chapel: soon.
17:39 < symeog> ok so what is the difference after all between generic and node based MVC's like express ?
17:40 < symeog> besides the fact that they create a server instance
17:43 < tomshreds> Anyone? http://stackoverflow.com/questions/12884662/find-using-lt-and-gt-with-javascript-dates/12884689
17:44 < pyrotechnick> tomshreds: #mongodb #javascript
17:44 < symeog> pyro ? don't u have an answer for me too ?
17:44 < tomshreds> I wanted to ask here just in case, I've been trying to figure this out for 24 hours hehe, thanks anyways, I asked in these chans too
17:44 < symeog> i got to get back to work !! haha
17:45 < pyrotechnick> your question doesn't make sense to me sorry
17:45 < owen1> anyone knows when will nodeup be live today?
17:45 < tomshreds> np
17:46 < owen1> "Listen live every Sunday at 10am"
17:46 < symeog> ok….i asked before what is better, meteor or express and u told me that the 2 have no relevance
17:46 < pyrotechnick> no that was chapel
17:46 < symeog> oh ok sorry
17:46 < pyrotechnick> buit i agree
17:46 < pyrotechnick> it's a false dichotomy
17:47 < pyrotechnick> apples and oranges
17:47 < symeog> is express and backbone.js apples and oranges too ?
17:47 < pyrotechnick> that's apples and space junk
17:48 < symeog> i see....
17:48 < aandy> come oooon jump!
17:48 < pyrotechnick> DO IT
17:48 < aandy> be hero
17:48 < pyrotechnick> BE A MAN
17:48 < pyrotechnick> DO THE RIGHT THING
17:48 < symeog> hahahahahah
17:49 < symeog> ok guys i really really thank u for ur time and cya all laterz !!!
17:49 < pyrotechnick> adios comrade
17:49 < pyrotechnick> good luck
17:49 < symeog> thanks :)
17:49 < owen1> symeog: another healthy approach is not using any frameworks - https://github.com/oren/node-website-template
17:52 < aandy> here we go
17:53 < pyrotechnick> do a barrel roll
18:00 < aandy> closing in on 0 psi..
18:02 < aandy> we saw this already
18:02 < aandy> http://www.youtube.com/watch?v=msJeBt0T3G8
18:03 < gkatsev> http://www.redbullstratos.com/live/
18:03 < pyrotechnick> did something happen?
18:03 < aandy> not yet
18:03 < pyrotechnick> loopers
18:03 < aandy> "we'll be right back after a word from our sponsors"
18:03 < gkatsev> I think he's jumping real soon
18:05 < aandy> now
18:05 < aandy> :>
18:05 < pyrotechnick> OH MY
18:09 < pyrotechnick> its a bird
18:10 < vy> How can I make readline to not display the read lines on the console? Every time I read a line via rl.on("line", function(line) { doSth(line); }); it prints out the line.
18:10 < huangjs> hey, anybody using passport? is it possible to use it without session support?
18:11 < aandy> no sound barrier
18:11 < aandy> can we go again, guise?
18:11 < leonardo> no sound barrier but high speed record
18:13 < aandy> yeah, a shame he didn't reach it 
18:14 < pyrotechnick> do they leave the balloon up there so we can make a space elevator?
18:16 < hdon> anyone watching redbull stratos?
18:16 < leonardo> so much helium wasted
18:16 < hdon> how did he fall????????
18:16 < pyrotechnick> we're never getting that He back either
18:16 < hdon> did his pod have a rocket?
18:17 < pyrotechnick> hdon: no it was a He balloon
18:18 < pyrotechnick> that was awesome nonetheless
18:19 < hdon> ohhhhhhhhh
18:19 < hdon> thanks
18:19 < pyrotechnick> First stormtrooper to land on Earth lol
18:20 < superjoe30> what's the topic in reference to?
18:20 < gkatsev> lol
18:21 < superjoe30> mbalho
18:23 < timeturner> wtf at channel title
18:23 < timeturner> 1 req every 5 seconds?
18:23 < timeturner> I'm a sad panda :(
18:23 < superjoe30> timeturner, it's a joke.
18:23 < timeturner> I know haha, thank god it's not true O_O
18:23 < pyrotechnick> it is true...
18:23 < timeturner> O_o *
18:23 < pyrotechnick> at least 1
18:24 < timeturner> ah yes
18:24 < timeturner> well thank god it isn't at most 1
18:24 < timeturner> lol
18:24 < mscdex> and not exactly 1
18:26 < superjoe30> I could write a node.js program which handles less than one request every 5 seconds
18:26 < pyrotechnick> it would handle them
18:26 < pyrotechnick> just not finish
18:26 < superjoe30> nope
18:26 < superjoe30> not if I block
18:27 < pyrotechnick> thats not a node program
18:27 < pyrotechnick> that's a virus
18:27 < superjoe30> those things are not mutually exclusive
18:28 < pyrotechnick> stop hurting nodes
18:29 < hdon> pkill node
18:30 < pyrotechnick> you're allowed to put them out of their misery
18:34 < hdon> while true ; pkill -SIGALRM node ; done
18:37 < tds> is there any way to see the api docs for a past version of node?
18:38 < pyrotechnick> yes
18:38 < aandy> tds: http://nodejs.org/docs/
18:38 < tds> aandy: thanks!
18:38 < aandy> np
18:38 < hdon> is there any way to see the api docs for a FUTURE version of node?
18:38 < aandy> yes
18:38 < pyrotechnick> no
18:38 < hdon> (i saw Looper last night. possibly the worst film i have ever seen.)
18:38 < aandy> i mean no
18:39 < pyrotechnick> you can make them yourself then patch node accordingly thus rendering them accurate
18:42 < niggler> anyone use something called "web storm" for node devleopment?
18:42 < pyrotechnick> nah but their resharper thing is pretty rad
18:43 < pyrotechnick> does JS now
18:44 < hotch> Hey guys, anyone in the LA area been using Node for a while?
18:47 < pyrotechnick> http://node-js.meetup.com/cities/us/ca/los_angeles/
18:53 < hotch> pyrotechnick: yeah, look at the calendar :) http://www.meetup.com/SoCal-Node-JS/#past
18:53 < pyrotechnick> you can find the people from that link
18:53 < hotch> It's funny, the NYC ones when I moved were all like "introducing express" etc :)
18:53 < hotch> yeah
18:53 < pyrotechnick> then tweetface them or something
19:04 < tds> it specifies here: http://nodejs.org/docs/v0.6.12/api/child_process.html#child_process_child_process_fork_modulepath_args_options that fork takes a callback, but it's not in the argument list… how is that possible?
19:07 < mscdex> tds: probably a documentation error
19:08 < mscdex> tds: it looks like it's fixed in the master branch
19:08 < tds> thanks
19:08 < mscdex> tds: also 0.6.12 is old
19:09 < tds> yea
19:09 < mscdex> :-)
19:09 < tds> im working with a client that is using old stuff
19:09 < tds> they don't want to pay me to do a smooth upgrade, just a fix a problem they're having
19:09 < tds> so.. up to them
19:09 < tds> :) 
19:09 < mscdex> heh
19:09 < mscdex> little do they know it's just a matter of installing over top the old ;-)
19:10 < tds> are there many api breakages between 0.6.12 and current?
19:10 < pyrotechnick> depends on dep modules
19:11 < mscdex> tds: https://github.com/joyent/node/wiki/API-changes-between-v0.6-and-v0.8
19:11 < tds> handy, thanks!
19:11 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
19:11 < tds> looks like it wouldn't be too bad 
19:12 < pyrotechnick> http://webchat.freenode.net/?channels=nodeup http://nodeup.com/
19:15 < mscdex> too bad there isn't a written transcript for nodeup episodes
19:15 < mscdex> :-)
19:16 < pyrotechnick> upload it to the tubes
19:16 < pyrotechnick> then download transcript
19:16 < pyrotechnick> problem solved
19:17 < mscdex> if only
19:18 < pyrotechnick> what do you mean?
19:18 < mscdex> i mean youtube's transcription capabilities are a joke
19:19 < pyrotechnick> use mechanical turk
19:40 < zezikaro> hi can anyone help me with npm please?
19:40 < zezikaro> i'm trying to do in the scripts section "test" : "node server.json; ./node_modules/.bin/foo.js"
19:40 < zezikaro> it starts up the server fine
19:40 < zezikaro> but it doesn't run the tests
19:41 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
19:41 < hotch> zezikaro: what are you trying to do?
19:42 < zezikaro> deploy my server then run the unit tests
19:42 < hotch> start a node server then run tests?
19:42 < zezikaro> yeah
19:42 < zezikaro> sorry
19:42 < zezikaro> so i added a 'test' to my script section in the json file
19:43 < hotch> yeah
19:43 < zezikaro> which starts the server just fine, but it doesn't perform the bit after the semicolon
19:43 < zezikaro> presumably because it's blocking
19:43 < Fodi69> hi, how can I handle events that should occur in a previosly defined time?
19:43 < hotch> yes, it is blocking. a few ways to do it.
19:43 < zezikaro> brilliant to hear there's a solution
19:43  * hotch loves automation
19:44 < hotch> why test manually? :)
19:44 < hotch> hold up let me drag up some code.
19:45 < zezikaro> hotch i'm actually having a lot of problems with testing atm
19:45 < zezikaro> so that's much appreciated!
19:45 < hotch> https://gist.github.com/1455339
19:45 < hotch> I've used that with vows before. I have a system now built with lotte that is a bit tight knit into my project but that is what i used to do use.
19:46 < hotch> Also, mocha is way nicer than vows and handles async much more elegantly. but hey, it's older.
19:46 < zezikaro> hotch i'm actually using cucumber.js for my bdd tests atm
19:46 < hotch> I like to use "lotte" and iterate over user stories.
19:47 < hotch> Never used it, sorry. I know of it but ...
19:47 < zezikaro> so i need to get the spawn module
19:47 < zezikaro> that's the important bit
19:47 < zezikaro> i believe
19:47 < hotch> Well, it's a node core item
19:47 < Fodi69> hi, how can I run a function at a given time, when no requests are coming to the webserver (so it is called somewhere else) it should scale also
19:48 < hotch> Fodi69: too vague
19:48 < aMoniker> Fodi69: normal cron, or node-cron
19:48 < zezikaro> setInterval? :)
19:48 < aMoniker> zezikaro: You're fired.
19:49 < zezikaro> Drat!
19:49 < Fodi69> aMoniker: what does node-cron do when I run my webserver in 3 process?
19:49 < zezikaro> :(
19:49 < aMoniker> Fodi69: probably runs three times
19:49 < aMoniker> I'm sure you could work around that though
19:49 < hotch> zezikaro: like i said there are way better ways to do this ...
19:49 < aMoniker> you are being vague though
19:50 < Fodi69> pretty hard to say what I want
19:50 < Fodi69> :D
19:50 < hotch> Fodi69: It always is :P
19:50 < aMoniker> this isn't specifically node related, but I'm curious: since strings are immutable in JS, does that mean that multiple vars containing the same string all point to a single location in memory?
19:52 < hotch> aMoniker: good question.
19:57 < owen1> nodeup is live
19:57 < aMoniker> I suppose they don't have to… probably depends on engine implementation
19:59 < hotch> owen1: from the 9th?
20:00 < zezikaro> <hotch> zezikaro: like i said there are way better ways to do this ...
20:00 < zezikaro> is a make file/sh file one of those answers
20:00 < hotch> yeah
20:01 < hotch> My solution is makefile/bash script.
20:01 < hotch> then just `make test`
20:01 < zezikaro> or "scripts" : { "test" : "make test"; }
20:01 < zezikaro> npm test
20:01 < zezikaro> :P
20:01 < zezikaro> abstraction ftw
20:02 < owen1> hotch: it's live no
20:02 < owen1> hotch: now
20:02 < chovy> anyone done facebook invite?
20:06 < mscdex> aMoniker: no, strings are copied
20:06 < aMoniker> mscdex: why?
20:06 < mscdex> aMoniker: only objects/arrays are stored by reference
20:07 < mscdex> aMoniker: you'll have to ask the v8 team that one
20:07 < mscdex> probably a spec thing
20:07 < aMoniker> seems like you could follow the spec in either case
20:08 < mscdex> i don't know of any js implementation that stores references to strings
20:09 < aMoniker> what's the point of immutability then?
20:13 < zezikaro> hotch Hm, do you happen to have an example of make file you use per chance?
20:14 < aMoniker> mscdex: Aha! http://stackoverflow.com/questions/5276915/do-common-javascript-implementations-use-string-interning
20:14 < aMoniker> did not know the name for that
20:17 < hotch> zezikaro: sorry dude not publicly :/
20:18 < hotch> just figure out the spawn to the bg with a pid, tests, test results then killing the process, checking results then deploying if pass.
20:19 < zezikaro> my lack of bash skills are clearly evident right now hah
20:19 < zezikaro> okay thanks
20:57 < owen1> can someone run this simple zombie.js script and tell me why i don't get an exception?
20:57 < owen1> http://pastebin.com/U68LED7W
20:57 < owen1> assert.equal(browser.text('title'), "wtfwtfwtf");                the title is 'google', so it should throw an exception.
21:06 < zezikaro> hi does anyone know why my nodejs makefiles don't work?
21:06 < zezikaro> When i do make install i just get
21:06 < zezikaro> make: *** No rule to make target `install'.  Stop.
21:07 < zezikaro> But I have a file called 'MakeFile'
21:07 < zezikaro> with
21:07 < zezikaro> install:
21:07 < zezikaro>         echo "hi!"
21:07 < zezikaro> :/
21:07 < kuja> how is it related to nodejs? :)
21:07 < kuja> also, I think the file needs to be named Makefile, not MakeFile
21:08 < zezikaro> god damn
21:08 < zezikaro> Makefile:3: *** missing separator.  Stop.
21:08 < zezikaro> seems like it's working
21:08 < zezikaro> thanks kuja 
21:08 < kuja> np
21:29 < hdon> just had a thought occur to me... has anyone ever considered using PKE to replace some functions of sessions?
21:29 < hdon> perhaps the bandwidth is too valuable
21:29  * hdon will think about this more later
21:29 < zane> For anyone who likes solving tough vague problems: http://stackoverflow.com/questions/12886438/node-js-app-slowing-down-becoming-unresponsive-over-time
21:31 <@konobi> zane: time to check to see when the GC is being called
21:32 < zane> konobi:  sounds like a great plan. How do I do it?
21:37 < Fryck_> What about MVC and Express / Node ? :)
21:39 < zane> Is there a way to have node write GC history to a log file that can be examined later to match up against server performance issues, time-wise?
21:42 <@Nexxy> lol pyrotechnick 
21:43 < superStar> what's good about node?
21:43 < pyrotechnick> we don't know
21:43 < JohnMcLear> Unicorns
21:43 <@Nexxy> superStar, it's very easy to accessorize
21:43 < superStar> @JohnMcLear tell me more
21:43 < JohnMcLear> Prolly a community that doesn't get too wrapped up about what's good and what's bad and just focuses on building cool stuff.
21:44 < pyrotechnick> and trolls
21:44 <@Nexxy> no trolls
21:44 < pyrotechnick> so many trolls
21:44 < pyrotechnick> they were even trollin on nodeup today
21:44 < timeturner> we need a unicorn on nodejs.org
21:44 <@konobi> zane: there's a profiler flag like "expose-gc" iirc
21:45 <@Nexxy> timeturner, unicorn velociraptor?
21:45 < timeturner> yes ;)
21:45 < pyrotechnick> whilst the "anti-trollers" troll coffeescript then the trolls will troll
21:45 < pyrotechnick> until we reach a peace agreement
21:45 < JohnMcLear> I just added redis, couchdb and some other database support to Ueber db if anyone cares.
21:46 < superStar> do you guys use node for webservers?
21:46 < JohnMcLear> Yes.
21:46 < pyrotechnick> like 90% or something id say
21:46 < pyrotechnick> although it's in finance and crap too
21:47 <@Nexxy> and embedded applications
21:47 <@Nexxy> and robots
21:47 < pyrotechnick> yep skynet
21:47 <@Nexxy> and drones
21:47 < pyrotechnick> strip clubs
21:47 <@Nexxy> that too
21:47 < niggler> if i define a prototype in a module is it exposed to scripts that require it?
21:47 < pyrotechnick> mmos
21:48 < gkatsev> niggler: only if you expose it.
21:48 < pyrotechnick> http://nodejs.org/api/modules.html
21:49 < pyrotechnick> google's driverless cars run node
21:49 < pyrotechnick> and that red bull capsule balloon thing this morning
21:49 < JohnMcLear> node is actually used a lot for when you want fast IO w/ simple interface IE real time logging
21:49 < timeturner> what happens if you add to String.prototype in one module though
21:49 < gkatsev> do they really?
21:49 < pyrotechnick> yep
21:49 < gkatsev> neat
21:49 < JohnMcLear> inbetween graphite n stuff
21:49 < zane> @konobi: I'm using --trace_gc, but I'd like to print it to a log file for later examination
21:49 < niggler> that doesn't answer the question pyrotechnick 
21:49 < gkatsev> do you know what it's used for?
21:49 < gkatsev> timeturner: hm... I wonder
21:49 < pyrotechnick> to calculate fibonacci
21:49 < gkatsev> pyrotechnick: haha
21:49 < zane> Hm, I'm seeing Mark-sweep times in the GC in excess of 150ms quite regularly. Is it just me, or is that bad?
21:50 < pyrotechnick> zane: tooooo many objects
21:50 < chilts> timeturner: it'll be added for everyone ... you probably shouldn't do it, or think carefully if you do :)
21:50 < timeturner> yeah
21:50 < JohnMcLear> couch, dirty, level, mongo, mysql, postres, redis, sqlite now supported.
21:50 < gavri> I'd like to use a proxy to intercept all method calls to an object. harmony proxies seem like the way to go, but I'm finding it difficult to understand how harmony proxies can be used to achieve this. is there an example available online that does exactly this?
21:50 < JohnMcLear> again, prolly unlikely anyone here cares.
21:51 < timeturner> JohnMcLear: etherpad-lite supports redis?
21:51 < pyrotechnick> cheer up JohnMcLear
21:51 < chilts> JohnMcLear: which project is that for?
21:51 < JohnMcLear> Yes timeturner, I just merged it.
21:51 < timeturner> sweet
21:51 < JohnMcLear> Thanks and all credit to niklasfi --> https://github.com/niklasfi
21:52 < JohnMcLear> chilts: Etherpad-Lite (Soon to be named just Etherpad) --> https://github.com/Pita/etherpad-lite
21:52 < JohnMcLear> Or prolly more useful http://etherpad.org
21:52 < zane> pyrotechnick: thought that might be the case...
21:52 < zane> is there any way to analyze WHAT is being cleaned by GC, specifically where it was allocated?
21:52 < pyrotechnick> zane: better start diving into the v8 guides
21:52 < pyrotechnick> they're awesome.
21:53 < chilts> JohnMcLear: cool - I've seen that before, it's an awesome tool :)
21:53 < JohnMcLear> Cool, Thanks :)
21:53 < zane> pyrotechnick: I hope that wasn't sarcasm @ them being awesome
21:53 < zane> because I'm fearful
21:54 < pyrotechnick> i only troll node itself not its constituents
21:54 < timeturner> JohnMcLear: what is your opinion of ShareJS?
21:55 < pyrotechnick> zane: also google talks on the tubes
21:55 < pyrotechnick> zane: also hangouts on g+ with the devs
21:55 < GtoXic> Hiya
21:56 < pyrotechnick> wilkommen
21:56 < JohnMcLear> timeturner:  I love the work they are doing, it's great to see another projects approach to O/T's.  I think Etherpad is more focused on being a collaborative document editor, ShareJS is hoping to bring O/T's to developers.  Both are good things :)
21:57 < JohnMcLear> Anything that makes the web more real time imho is a +
21:57 < JohnMcLear> Even if it's Silverlight or flash based....
21:57 < JohnMcLear> j/k.  Fuck that.
21:57 < pyrotechnick> was going to say...
21:57 < timeturner> haha
21:58 < GtoXic> I was wondering, is there an alternative to using ".on" for events? Cause I need some code to run before anything else
21:58 < GtoXic> I've tried the async library
21:58 < pyrotechnick> the only thing wrong with silverlight and flash and java applets and stuff is all of it
21:58 < pyrotechnick> at least flash is ecmascript
21:59 < timeturner> once youtube removes flash then that'll be the turning point
21:59 < pyrotechnick> well they effectively have on mobile
21:59 < pyrotechnick> flash has a long tail
22:00 < pyrotechnick> it will haunt us for some time yet
22:01 < GtoXic> anyone know the answer to my question?
22:01 < pyrotechnick> credit where credit is due though https://github.com/adobe/brackets
22:01 < pyrotechnick> they're slowly seeing the light
22:02 < Benvie> what about having a serializable state js runtime
22:02 < pyrotechnick> to what end
22:03 < Benvie> to do what shareJS does
22:03 < timeturner> the code editor problem is very easy to solve
22:04 < timeturner> choose a code editor whose maximum number of features is the minimum amount of stuff you need
22:04 < pyrotechnick> GtoXic: there's an alternative to .on it's .addListener but it's the same thing
22:04 < timeturner> so for me that would be textmate or sublime
22:04 < pyrotechnick> GtoXic: if you make a http://gist.github.com of what you mean ill try help
22:04 < GtoXic> Gimme a sec then
22:06 < pyrotechnick> real programmers use a magnetised needle and a steady hand
22:07 < Aria> GtoXic: Your question makes no sense. How would an alternative to 'on' give you what you want?
22:07 <@konobi> pppfffttt paper and a hole punch
22:07 < Aria> What are you really solving?
22:07 < pyrotechnick> he's gisting it
22:07 < GtoXic> Aria: so that it works asynchronously
22:08 < Aria> 'it' what?
22:08 < GtoXic> my code
22:08 < pyrotechnick> Aria: let him gist it
22:08 < Aria> Okay. 
22:08 < pyrotechnick> pipe down
22:08 <@Nexxy> ;|
22:08 <@Nexxy> be nice to Aria 
22:09 < pyrotechnick> australian music sucks
22:09 < GtoXic> https://gist.github.com/5ebb93f331564c45f287
22:10 < Aria> Okay... what's the problem?
22:10 < GtoXic> postdata is empty
22:10 < GtoXic> "<script type="text/javascript">postData=;</script>"
22:12 < Aria> Well, you end res way up top, directly as the request ends.
22:13 < zivester> is there a way to tell why a node application isn't finishing?  I'm running a bunch of mongoose inserts... and they all seem to be in mongodb.. but my app isn't ending.  I have a process.on('exit') that obviously isn't getting called either
22:13 < Aria> You want to unbundle the two, for sure.
22:13 < pyrotechnick> zivester: mogoose connection
22:13 < pyrotechnick> mongoose.connection.close()
22:14 < pyrotechnick> after first query it opens socket, stays open until you close it
22:14 < pyrotechnick> there's maybe a timeout but i wouldnt rely on it
22:15 < Aria> GtoXic: So you're saying "When the request is done being read, tell the HTTP client we're done sending the response"
22:16 < Aria> GtoXic: You've several operations -- so I'd break them out, first. Receive post; see if page exists, read file; respond. Those should all be async, and chained together -- when one completes, THEN do the next.
22:16 < GtoXic> but HOW
22:16 <@Nexxy> science FICTION
22:17 <@Nexxy> and named functions
22:17 < Lorentz> science function, hmmm
22:17 <@Nexxy> http://callbackhell.com/
22:17 < Aria> GtoXic: Move       callback(null,"postDone\r\nPostData: " + postdata.toString());  up into the "end" event handler.
22:18 < Aria> (that's the small way to fix it)
22:18 < Aria> But name your functions and move them to the top level. It'll help clarify things a bunch.
22:21 < pyrotechnick> hoisting is evil™
22:21 < zivester> tx pyrotechnick, I guess I shouldn't have my mongoose connection created inside my models
22:26 < Aria> GtoXic: Untested, but this is the idea: https://gist.github.com/d967bb17c4c6873df335
22:26 < zane> can this code cause a cyclic refernce? Or is the commented line bad practice (if so,  why)? http://pastebin.com/jhqWVVhW
22:27 < Aria> No, it's not cyclic unless the callback stores it. But cycles aren't themselves a problem.
22:28 < Aria> GtoXic: I also removed the 'if exists' step. I'd check the error code in readFile, rather than trying to avoid the error.
22:28 < Aria> (since you have to anyway: reads can fail!)
22:28 < Aria> (and "does not exist" is only one possible failure)
22:28 < GtoXic> ok
22:28 < GtoXic> I'll give it a try in a minute or two
22:29 < zane> hm. Is there any difference from a GC perspective between "delete obj;" and "obj = null;" ?
22:29 < GtoXic> the server I'm running it on completely crashed -_-
22:29 < pyrotechnick> zane: the first does nothing
22:29 < Aria> zane: delete localvariable doesn't do anything.
22:30 < pyrotechnick> zane: it executes but has no effect
22:30 < Aria> zane: delete is for properties of objects (but in V8, is slow since it changes the hidden class of an object)
22:30 < pyrotechnick> http://bonsaiden.github.com/JavaScript-Garden/ near the bottom
22:30 < pyrotechnick> "The delete Operator"
22:30 < zane> pyrotechnick: orly? hmm. 
22:31 < zane> I'm completely at a loss for why my GC is taking > 4sec then
22:31 < zane> *more googling*
22:32 < Aria> Any chance your process is being paged out and GC is scanning stuff that ended up on disk?
22:32 < Aria> gc latency in v8 is usually MUCH better than that.
22:32 < RLa> how much is the memory usage?
22:32 < RLa> Aria, i think it's not so great when near memory limit
22:32 < zane> at the beginning of the request (in express middleware) I assign a user object to the request, eg, req.user, and I think this is what is being GCd, so I'm explicitly null'ing the object at the end of the request...
22:33 < RLa> won't gc be run then very often
22:33 < zane> Aria: Hm, I'm not sure. How can I check?
22:33 < zane> RLa: free memory on the server is ~6Gb, node.js heap size is ~= 150 Wm
22:33 < zane> er, Mb
22:34 < RLa> looks ok
22:34 < gavri> how do I do something like this http://api.jquery.com/jQuery.extend/ is node.js?
22:35 < zane> FWIW, I have a SO question going here: http://stackoverflow.com/questions/12886438/node-js-app-slowing-down-becoming-unresponsive-over-time
22:35 < zane> gavri: var extend = require('pd').extend;
22:35 < pyrotechnick> zane: http://code.google.com/p/v8/wiki/V8Profiler
22:36 < zane> gavri: http://pastebin.com/jhqWVVhW
22:37 < gavri> zane: I'd like to keep the current object's identity
22:38 < zane> pyrotechnick: hm, thanks. need to figure out how to use this effectively w/ node..
22:38 < zane> will read some more I guess
22:38 < pyrotechnick> zane: http://s3.mrale.ph/nodecamp.eu
22:38 < zane> gavri: the extend function is functionally equiv. to the jquery $.extend(); how you use it is up to you.
22:40 < pyrotechnick> zane: just for a sanity test maybe move to another machine or something if you can, that's a REALLY unusually large amount of time to be GCing for
22:42 < zane> pyrotechnick: yeah I'm runnnig the prof on my debug machine instead
22:42 < pyrotechnick> it's also possible it's not actually GCing for that long just the illusion it is
22:43 < Aria> Yeah. I strongly suspect that if your heap is 150mb (Wm = mb?) then it'll be VERY fast.
22:43 < zane> well, it's currently my best-guess why my server is slowing down over time and eventually being unresponsive
22:43 < Aria> I get 1GB+ heaps with no trouble.
22:43 < zane> see my above SO question
22:43 < pyrotechnick> zane: sounds like a "memory leak", like you're storing the requests in a hash or something and maintaining a reference forever
22:43 < pyrotechnick> that slide show says the GC is proportional to long-lived objects
22:44 < Aria> Indeed.
22:44 < zane> here's the SO question: http://stackoverflow.com/questions/12886438/node-js-app-slowing-down-becoming-unresponsive-over-time#comment17451068_12886438
22:44 < Aria> Yeah, though you don't give much information about how your app is structured.
22:44 < zane> I've gone through all my code with JSHint
22:44 < Aria> (nor even what it does in its requests)
22:44 < zane> there is nothing being stored in globalsr
22:44 < zane> hm ,well
22:45 < pyrotechnick> you can force a gc
22:46 < Aria> I'm not thinking the GC should be implicated: with a 150MB heap, even a full GC is going to be < 1s.
22:46 < Aria> WELL LESS than 1s.
22:47 < zane> so it's possible that the mark-sweep times in the log are lies?
22:47 < zane> also, there's the oddity that the heap is showing like 1k object references, even though there should only be < 10
22:47 < mmalecki> zane: try disabling idle GC notifications
22:48 < zane> http://i.stack.imgur.com/Gsdt3.png
22:48 < zane> ^ note the 1700 + user properties, when I only have 1 user connecting. Sure, it might allocate as many as 2 or 3 user objects in a request, but 1700?
22:49 < zane> huh, this is new: Speed up marking because of low space left Marking speed increased to 6
22:49 < Aria> Hm. Still small.
22:49 < zane> now it's up to 1000 Marking Speed ^
22:49 < pyrotechnick> is it possible your promise library is retaining stuff?
22:49 < zane> I wonder
22:49 < zane> I'm using Q
22:49 < zane> it's pretty widely used
22:50 < pyrotechnick> so is php
22:50 < zane> lol, point taken
22:51 < pyrotechnick> all the setting objects to null stuff is bs
22:51 < pyrotechnick> they fall out of scope eventually and _can_ be gc'd
22:52 < zane> ok, so the "Speed up marking because of low space left Marking speed increased to 1000" perfectly corrusponds with when my server becomes unresponsive
22:52 < zane> that's GOT to be the issue
22:52 < zane> Google "Speed up marking because of low space left" returns 0 results though. I take it that it's referring to heap...? memory?
22:52 < pyrotechnick> it's also possible it's only gc'ing once after hours
22:52 < pyrotechnick> sounds crazy but entirely possible
22:53 < pyrotechnick> anyway it really sounds like something's retaining some functions or something likely culprit seems like the promise lib you mentioned but it could be anything
22:54 < zane> ok, I'll try completely cutting out the promise library all together
22:55 <@Nexxy> inb4 it was the promises
22:55 < pyrotechnick> you could shim it with another
22:55 <@Nexxy> or, just... embrace the callback
22:55 < zane> @Nexxy : ??
22:55 < timeturner> the only problem I have with callbacks is the level of nesting
22:55 < pyrotechnick> coffeescript.org
22:55 < timeturner> other than that I have no iddues
22:55 < timeturner> issues*
22:55 <@Nexxy> you don't have to define them inline
22:55 < zane> Yeah that's exactly why I used promises to begin with
22:56 < timeturner> yeah I should define them somewhere else and reference them
22:56 < zane> True, but then you run the danger of your code looking like an ADD kid with a coloring book
22:56 < pyrotechnick> just dont hoist them
22:56 < pyrotechnick> var them
22:56 < zane> fair point
22:57 < pyrotechnick> hoisting is cray
22:57 < timeturner> everything gets varred anyways
22:57 < timeturner> it's scary to not var something
22:57 < timeturner> makes it look like the code is just floating or something
22:57 < timeturner> imo
22:58 < pyrotechnick> it's reckless
22:59 < pyrotechnick> what's the dart editor like?
23:00 < blez> somebody worked with dropbox-node?
23:01 < gkatsev> so, apparently if I have a path with a space in it, `make' craps out
23:01 < Sonderblade> what's the best orm for node.js compatible with postgresql?
23:03 < addisonj> Sonderblade: haven't used it but http://sequelizejs.com/ looks to be the most active
23:03 < pyrotechnick> Sonderblade: this one's okay too https://github.com/1602/jugglingdb
23:05 < Sonderblade> to many options :)
23:06 < Zak> i hate mondays
23:06 < Zak> if I become God, I'm getting rid of them
23:06 < pyrotechnick> moonday
23:06 <@Nexxy> how would you do anything when you don't exist?
23:06 <@Nexxy> hmmmmmmm?
23:07 < pyrotechnick> don't mind Nexxy she's just upset he forsake her
23:07 < pyrotechnick> i think you'd make a splendid deity
23:09 < Zak> Nexxy: i'll fix that problem once I'm God
23:09 <@Nexxy> but if that's your logic then you can do it now
23:10 < Zak> Nexxy: stop being silly. God doesn't abind by logic
23:10 < Zak> *abide
23:10 < Zak> after I get rid of mondays, i'm getting rid of typescript
23:10 < Zak> maybe i'll just get rid of the whole of Microsoft
23:10 <@Nexxy> woah, settle down now
23:11 <@Nexxy> some people like type safety
23:11 <@Nexxy> that's OK
23:11  * gkatsev submitted a bug
23:11 < MI6> joyent/libuv: Ben Noordhuis master * fd136da : unix: remove always_inline attribute  Fixes the following gcc 4.7+ warnin (+1 more commits) - http://git.io/0Z2gLA
23:11 < Zak> i like living on the dangerous side of life
23:11 < Zak> i ride motorbikes, skydive and program without types
23:12 < pyrotechnick> Zak: http://theprofoundprogrammer.com/
23:12 <@Nexxy> that's great
23:12 < Zak> haha @ UX design isn't important
23:13 < Zak> thanks pyrotechnick, that will provide me some entertainment to get through monday
23:13 < pyrotechnick> and you can pass it off as research
23:13 < Zak> maybe i can try all 3 at once
23:13 < Zak> program without types, whilst sitting on a motorbike which is freefalling
23:14 < pyrotechnick> past a beached orca
23:14 < Zak> how can it be beached in the air
23:14 < pyrotechnick> choking on rubbish
23:14 < Zak> unless of course... the beach is in the air too
23:14 < pyrotechnick> because: scheme
23:14 < Zak> whats the minimum acceptance criteria for a beach? some sand and water right
23:15 < gavri> ;
23:15 < pyrotechnick> tiny rocks
23:15 < pyrotechnick> i don't even think you need water
23:15 < Zak> yeah, water for a beach, is like exceptions for functions
23:16 < pyrotechnick> if you drained the oceans
23:16 < pyrotechnick> would the beaches still be beaches?
23:16 < pyrotechnick> or just deserts?
23:16 < Zak> ask the opposite. If there was a huge global flood, would the deserts become beaches?
23:17 < pyrotechnick> Nexxy global flood true or false
23:18 < pyrotechnick> usually consists of loose particles which are often composed o fhttp://en.wikipedia.org/wiki/Rock_(geology), such as http://en.wikipedia.org/wiki/Sand, http://en.wikipedia.org/wiki/Gravel, http://en.wikipedia.org/wiki/Shingle_beach, http://en.wikipedia.org/wiki/Pebble or http://en.wikipedia.org/wiki/Cobblestone
23:19 < pyrotechnick> doesn't need water
23:19 < Zak> it says a landform along a shoreline of an ocean sea, lake or river
23:19 < Zak> i think you missed the most important part of the acceptance criteria
23:19 < pyrotechnick> no there's no citation
23:19 < Zak> true
23:20 < Zak> this is a classic case of, "users don't know what they want, so we tell them what they want"
23:20 < Zak> God has made his mind up, beaches now don't need water
23:20 < pyrotechnick> you heard it here first folks
23:21 < pyrotechnick> 15/10/2012
23:21 < pyrotechnick> never forget
23:21 < Zak> 10 mins down.. another 7 hours and 50 mins to go... Mondays suck
23:22 < pyrotechnick> http://www.chromeexperiments.com/
23:22 < pyrotechnick> remember: research
23:23 < Zak> i've actually been able to look at facebook a few times for research
23:26 < pyrotechnick> so many particles so little gpu
23:42 < Zak> pyrotechnick: +1
23:42 < gavri> vows does not throw errors, and instead only fails the assertion. I'd like to know what exactly went wrong to make the exception fail which would be possible if if exceptions that are thrown show up on the console. anybody know how to make that happen?
23:49 < Zak> gavri: debug it?
23:49 < Zak> that sounds like the core problem
23:50 < gavri> it would be easier if I get a stack trace. I'd immediately know what went wrong and fix it
23:50 < gavri> it's probably a reference error
23:50 < Zak> or you could just debug it
23:50 < Zak> adding verbosity to stuff isn't always a good idea
23:50 < Zak> it can change the behaviour
23:50 < Zak> (so can debugging, but its usually the first thing to try)
23:51 < Zak> i would be very careful about adding verbosity to exceptions too
23:51 < Zak> at least, the mechanics around when exceptions are thrown
23:56 < owen1> Raynos: what does https://github.com/Raynos/live-reload do? i am running the server, but not sure what to put in the uri. i also run the client but don't know what to do with it (:
23:56 < Raynos> run the server somewhere
23:56 < Raynos> run the client 
23:56 < Raynos> then save a file
23:57 < Raynos> i should make the client easier to use
23:57 < owen1> Raynos: i am running the server with uri: "localhost:8080", ignore: "test"
23:58 < Raynos> xd
23:58 < Raynos> uri is a file path
23:58 < owen1> oh
23:58 < Raynos> https://github.com/Raynos/live-reload/blob/master/index.js#L12
23:58 < owen1> relative to the server, i assume
23:58 < Raynos> https://github.com/Raynos/live-reload/blob/master/bin/reload.js#L7
23:58 < Raynos> relative to cwd
23:59 < Raynos> live reload by default watches cwd and port 9090
23:59 < Raynos> i should add better examples
--- Log closed Mon Oct 15 00:00:11 2012
