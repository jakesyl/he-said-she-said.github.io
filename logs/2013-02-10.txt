--- Log opened Sun Feb 10 00:00:03 2013
00:02 < AntiTyping> when I run 'ab -n 150 -c 150 http://127.0.0.1:8888/' I get "apr_socket_recv: Connection reset by peer (54) Total of 55 requests completed" I am running Mac OS
00:03 < DarkArgon> mac os, guess there is the problem
00:03 < AntiTyping> :) I know it is my dev machine, it works well on my linux box
00:04 < AntiTyping> I set kern.maxfiles etc, but it still fails
00:04 <@Nexxy> lol
00:05 <@Nexxy> win 12
00:05 <@Nexxy> damnit!
00:05 < sorensen> oooo
00:05 < sorensen> i might know this one lol
00:05 < sorensen> aww he left
00:05 <@Nexxy> I'm sure they'll be back
00:05 <@Nexxy> they always come back
00:05 < sorensen> lol
00:05 < sorensen> ab on osx is a pain
00:07 < sorensen> i hate going through old cold i wrote
00:07 <@Nexxy> it's the worst
00:07 < sorensen> so much facepalming
00:07 <@Nexxy> yeah lol
00:07 <@Nexxy> but if you look at old code
00:07 <@Nexxy> and you're like, "hey this is pretty good"
00:07 <@Nexxy> you're doing it wrong
00:07 < sorensen> agreed
00:08 < sorensen> its a good gauge on improvement
00:08 < sorensen> had a random itch to update an old project of mine
00:08 < sorensen> somewhat regretting it
00:08 < sorensen> AntiTyping: still having AB troubles?
00:18 < RSA_> konobi: thanks. I know at least that. but I do not know how to use it in that case. can you tell me how to use it to get my npm running?
00:18 < codingstream> does anyone have any experience with socketio with large numbers of concurrent connections(say 100-500) and how the v8 gc affects latency
00:20 < owen1> isaacs: yeah. found it thank you
00:22 < TechnoCat> is anyone here familiar with node-http-proxy?
00:26 < owen1> TechnoCat: yes. i am using it
00:27 < crabtree> anyone familiar with node-validator?
00:27 < TechnoCat> owen1: i'm having trouble figuring out how to setup my routing table. i want to route on things after the /
00:27 < TechnoCat> and then i have a default, which seems to grab everything
00:27 < owen1> TechnoCat: let me look at mine
00:27 < TechnoCat> i'm looking at this and wondering if this is what i want: https://github.com/nodejitsu/node-http-proxy/blob/master/examples/middleware/url-middleware.js
00:30 < owen1> TechnoCat: here is my routes file. i hope it helps - http://hastebin.com/sotinufinu.vhdl
00:31 < TechnoCat> well, i'm wanting to route on paths rather than hosts
00:31 < AntiTyping> sorensen: Yes
00:31 < ctult> Using a VM, how would I run a sandboxed script that, if it works for longer than 10 seconds, halts?
00:31 < spion> woot, async breadth first search works.
00:32 < crabtree> hm lame
00:32 < crabtree> i guess there's no validation library
00:33 < crabtree> ahh figured it out
00:33 < crabtree> great
00:34 <@konobi> RSA_: you've installed node, right?
00:35 < cloudbender> I fixed my problem. Yay.  The event loop is my friend again.
00:39 < asdf12> you
00:39 < asdf12> being
00:39 < RSA_> @konoi. yes. and it says it works. have found the directories of my npm(s) 
00:39 < asdf12> i'm
00:40 <@konobi> npm and node are in the same directory
00:44 < RSA_> got quite some directories where npm is found: 
00:45 <@konobi> ls ~/local/node-0.9/bin/
00:45 <@konobi> node  npm
00:45 < RSA_> in User/, User/local/, usr/local/lib, usr/local/Cellar/
00:45 <@konobi> so that directory is in my PATH
00:46 < etcetera> wow. jekyll is an old complicated beast.
00:47 < etcetera> compared to wintersmith or similar.
00:47 < etcetera> wonder why it's so popular.
00:47 < RSA_> 'node npm' was interesting :) - I had just written 'npm' before.
00:47 < RSA_> npm ERR! Error: ENOENT, readdir '/Users/LE/npm/man/man1/'
00:47 < RSA_> npm ERR! If you need help, you may report this log at:
00:48 < RSA_> npm ERR!     <http://github.com/isaacs/npm/issues>
00:48 < RSA_> npm ERR! or email it to:
00:48 < RSA_> npm ERR!     <npm-@googlegroups.com>
00:48 < RSA_> npm ERR! System Darwin 11.4.2
00:48 < RSA_> npm ERR! command "node" "/Users/LE/npm"
00:48 < RSA_> npm ERR! cwd /Users/LE
00:48 < sorensen> AntiTyping: with osx you need to install the latest version of AP from source instead of using the one that comes by default
00:48 < RSA_> npm ERR! node -v v0.8.18
00:48 < RSA_> npm ERR! npm -v 1.2.3
00:48 < RSA_> npm ERR! path /Users/LE/npm/man/man1/
00:48 < RSA_> npm ERR! code ENOENT
00:48 -!- RSA_ was kicked from #Node.js by konobi [RSA_]
00:48 < sorensen> AntiTyping: then take a look at this https://gist.github.com/ry/1095933
00:49 < segomos> konobi: lol
00:52 < RSA_> so it says: "npm ERR! Error: ENOENT, readdir '/Users/LE/npm/man/man1/'"
00:52 < RSA_> npm ERR! errno 34
00:52 <@konobi> RSA_: what are you trying to do with npm ?
00:55 < RSA_> :) good question! I have already forgottenâ€¦ no. :) I wanted to get a running system to experiment a little bit with node and socket.io, etc. and I thought npm is such as a basic thing to use with node but there where also things I wanted, that depend on npm, but I have to look that up, what it was. It is in one of my lists on one of my screens..
00:57 <@konobi> RSA_: npm is the package manager that lets you install stuff... it is bundled with node. you shouldn't need to trying install it. all you should need to do it `mkdir testapp; cd testapp; npm install socket.io`
00:57 < sorensen> well
00:57 < texit> WHOIS RSA_
00:57 < sorensen> you need at least a package.json in that dir if you want npm to install local modules to it
00:57 < RSA_> :)
00:57 < sorensen> otherwise they will end up going at a user level dir
00:57 <@konobi> sorensen: nope... just a node_modules folder
00:57 < sorensen> or that
00:58 < sorensen> :)
01:07 < RSA_> ah. the tool I wanted was "webhookit". "to create simple webservices, mashups, web application integrations, composability between webservices, event-driven web programming" similar to yahoo pipes and that requires npm.. but there might better workarounds to use node for scraping I guess. have just had a little glimpse into python, but I am open for java scraping frameworks :)
01:08 < asturel> is there way to turn off express compression for some app.get/post ?
01:11 <@konobi> RSA_: their docs are out of date
01:13 < tbranyen> lawnsea: hey man, i think the question i posed on twitter is a little vague.  i'm looking at anyone who has done research on client side encryption effectively
01:14 < tbranyen> FileSystem api looks pretty promising since i think the sandbox is fully encrypted from outside access
01:14 < tbranyen> but it's not in the spec, which is disconcerting
01:15 < RSA_> dear @konobi, which docs? 
01:15 <@konobi> RSA_: the webhookit ones
01:17 < RSA_> I am looking for those files now. but how can I fix the docs? (-sorry, I do not know what they are even) 
01:18 < RSA_> I am still confused by all these directories usr/lib, etc..
01:21 <@konobi> RSA_: you might want to find a tutorial about beginning with unix
01:22 < lawnsea> tbranyen: sorry, was afk
01:22 < tbranyen> no worries
01:22 < lawnsea> tbranyen: lemme dig up a few links
01:22 < pmurias> if I want to check if a file is a device (stats.isCharacterDevice() || stats.isBlockDevice()) will work?
01:23 < RSA_> yes. I know. you are right. there are just always that many tutorials I should watch... I always try to find my way through the information most linear. but I am missing the basics often. 
01:24 < Aria> That's the only kind of devices there are.
01:25 < ememe> Is anyone around for a hard node question?
01:25 < Aria> I might be able to help
01:25 < ememe> Nice thanks=)
01:25 < pmurias> and does isFile() check for a "regular file" or do I need to exclude the others?
01:26 <@konobi> TIAS
01:26 < ememe> I'm writing a sophisticated templating commandline node app
01:27 < ememe> The idea is it takes files as input and uses node's require system to traverse the require space
01:27 <@isaacs> do you think a mailing list MUST be able to let you post a new thread by email?
01:27 <@isaacs> what if the only way to create a new message on the list was a web interface?
01:27 < ememe> the issue is it requires from the commandline apps path, and not the included file's path
01:28 < Aria> isaacs: That seems ... strange. I'd try it though. Especially if new messages were rejected with a URL that let you repost via the web.
01:28 <@konobi> ememe: read the modules docs
01:29 < airtanah> isaacs: how about an email list that only accepts git-push
01:29 < ememe> thanks but this is way past the docs. I need from within a node js app the ability to require as if I'm a different app
01:30 <@isaacs> I'm considering a very light wrapper around a git repo, which would let you post "messages" that become issues.
01:30 <@isaacs> making someone an admin = making them a contributor on the repo
01:30 <@isaacs> invite-only list = private repo
01:30 < Aria> Interesting, isaacs!
01:30 <@isaacs> bonus: threads are archived nicely, easily searchable, and can have "state" -- closed, etc
01:31 <@isaacs> Aria: it was Mikeal's idea originally.
01:31 < Aria> ememe: You can pass the require you want to use around, that's the easiest way. The actual machinery to do the resolution isn't as flexible as you want -- you'd have to reimplement parts of it
01:31 <@isaacs> ememe: you need to get at that module's module object, or their require function
01:31 <@isaacs> ememe: each module gets their own requirE() function
01:31 < spion> or download a re-implementation of sorts from https://github.com/substack/node-resolve if I understand correctly.
01:32 < airtanah> isaacs: the mail definitely list needs some way to cut off topics
01:32 < airtanah> tho i do enjoy my monday dose of drama
01:32 < ememe> ah, interesting I wasn't aware you could pass it around. Sadly, the module doesn't exist at all to be passed. 
01:33 <@isaacs> airtanah: well, that's the thing.. you could easily just click a link to mute a thread
01:33 < airtanah> isaacs: i actually did not know that
01:33 < ememe> For example: commandline_app/src/path  can resolve require to commandline_app/node_modules
01:33 <@isaacs> airtanah: and identity and everything will be tied to github urls.
01:34 <@isaacs> ememe: so what
01:34 <@isaacs> ememe: ?
01:34 <@isaacs> ememe: can you share more details about what problem you're trying to solve?  usually, "I need to monkey around with the module loading logic" is a sign that you're lost int eh weeds somewhere.
01:35 < airtanah> isaacs: i actually think github issues does all this
01:35 < Lefty4000> Hello, I am trying to implement simple animations with node.js and I just can't figure it out.  I've used jsdom but there just aren't enough examples to help me.  Does anybody have any advice?
01:35 < airtanah> you just need a "discussion" repo or something
01:35 <@isaacs> airtanah: exactly
01:35 <@isaacs> airtanah: but you can't *create* an issue via email
01:36 < ememe> I'm trying to point that commandline app at a file using the require system. for example execute other/path/file.template using require, but when it looks up require 'underscore' it looks it up in other/node_modules instead of commandline_app/node_modules
01:36 < airtanah> isaacs: ahh, right. so i guess all you need is an email gateway. ahh i get it
01:36 < ememe> The app is like browerify. It is traversing requires to unify them together for the client
01:37 < airtanah> isaacs: hmm... actually i don't see how to bridge it. because _anyone_ can post an email, but who would that issue be posted as on github
01:38 < ememe> Thanks for your patience on this. It is pretty hard to grasp =)
01:38 <@isaacs> airtanah: whatever github user the email is associated with.
01:38 < Lefty4000> Does anybody have any help for animations with node.js
01:38 < airtanah> isaacs: you could email them back with a URL, which requires them to OAuth first, then the issue gets posted
01:38 <@isaacs> airtanah: same way they tie replies to email addresses.
01:38 < tleen> Lefty4000, Like cgi rendering?
01:38 < tleen> If you ware talking browser your are using the wrong thing
01:38 < airtanah> isaacs: i ran into this issue on github, a surpisingly large number of people don't have an email listed on their github
01:38 <@konobi> ememe: the "app" is a module too
01:38 < Lefty4000> No no, just basic scrolling things
01:38 < tleen> Look at Jquery UI
01:39 < Lefty4000> like picures sliding in, staying, and then sliding out
01:39 < tleen> and Jquery for that matter
01:39 < tleen> those do the client work
01:39 < Lefty4000> Isn't jQuery only for the client?
01:39 < spion> ememe, see if substack's require.resolve implementation works for you
01:39 < tleen> node is more about serving data
01:39 <@isaacs> oh, i guess the replies are an address like reply-bigasstoken@@reply.github.com
01:39 < tleen> yeah the actual animating happens on the client
01:39 < tleen> all node would do at best is serve the client some data, but you can prob deliver it all in your html file
01:39 < Lefty4000> I'm fine with getting the data, I have pretty much all the data retrieval set up with node js
01:39 < Lefty4000> Its just that I now need to serve it to the user in a nice way
01:40 < tleen> then you need to Get Your Client On!
01:40 < ememe> Lefty4000: I wrote a pretty sophisticated animation module if you are interested
01:40 < Aria> Lefty4000: Animations using jsdom? What sort of output are you after?
01:40 < airtanah> isaacs: are you thinking of bridging github issues, or a whole separate thing?
01:40 < Lefty4000> Can I check it out?  So far what I've got is jsdom and then I have a book on jQuery and its all so confusing
01:40 < tleen> You need javascript to be doing that on the client side
01:40 < tleen> you wouldnt be doing that sort of thing up in node, just sending data to the browser
01:40 < ememe> Lefty4000: I just wrote it. It is called 'act'
01:41 < ememe> it is super general
01:41 < Lefty4000> Okay I'll check it out
01:41 < Lefty4000> I'm just having a hard time understanding jsDOM 
01:41 < tleen> then the browser has a javascript you write that will be doing all bleeps, bloops and throwing things around
01:41 < Lefty4000> I can learn jQuery quickly if need be, its just blech
01:41 < tleen> its the standard
01:42 <@konobi> ememe: do you have a gist of what you want in very very specific detail?
01:42 < ememe> I'll write one right now
01:42 < Aria> Lefty4000: jsdom isn't ... visual. It's not got a renderer.
01:43 < Aria> Lefty4000: So what are you trying to accomplish? Why jsdom?
01:43 <@konobi> dealing with require() requires a lot of very specific detail
01:43 < Lefty4000> yea, jsdom gets the dom for the server so it can interact with the client, right?
01:43 <@konobi> (require/module internals that is)
01:43 < kbobum> hi i'm having a problem getting node to use the project's node_modules folder. Error: Cannot find module './lib/querystring'
01:43 < tleen> Lefty, the server doesnt have anything to do with the dom mostly
01:43 < tleen> its running in the browser
01:44 < kbobum> i tried exporting NODE_PATH to that folder but it doesnt seem to take effect
01:44 < tleen> two different environments sharing a common language
01:44 < Lefty4000>  I know but doesn't the server need to know the DOM so that it can manipulate stuff?   I'm using the express framework, and if you go to www.klout.com (which has used express for the website) it has litte animations like drop-down menues and such
01:44 < Lefty4000> I want to know how to do that
01:45 < tleen> No, the server doesnt
01:45 < tleen> their html includes javascript written for the client side env to do all that magic
01:46 <@isaacs> ememe: so, you probably just ought to do like browserify does, then, and use AST traversal, and a knowledge of how the module system works
01:46 <@isaacs> ememe: it's not super complicaetd.
01:46 < Lefty4000> so in my server.js file for the express/node.js website I can still use jQuery as if the entire website was on the client?
01:46 <@isaacs> ememe: i mean, if you can do fs calls, and can read http://nodejs.org/api/modules.html
01:46 < tleen> no not at all, the whole thing is so off it sounds insane
01:47 <@isaacs> ememe: read through lib/module.js as well.  there are some not-public but very-stable bits you can lift or use.
01:47 < tleen> although I can see how you arrived at it
01:47 < tleen> express serves up the client stuff
01:47 < tleen> all those animations and stuff have nothing at all to do with node
01:48 < tleen> they could be served by any webserver
01:48 < Lefty4000> Really?  So I can write this whole thing as if its on the client side and then node will manage all my data stuff. hmmmmmmm
01:49 < tleen> beats me, but if you want menus sliding around and stuff you want jquery and you want to learn how it works
01:49 < tleen> I think you have conflated the idea of node on the server and javascript on the client to a crazy degree and need to understand each in its own way
01:50 < Lefty4000> Okay, hmm.  This is great.  I'm going to go read this book because I have to get these animations figured out by the end of next week or else I'll fall behind
01:50 < Lefty4000> So when the website gets loaded on the browser, it will download the information (including the scripts) which will drive these animations
01:50 < ememe> @issacs is this private?
01:50 < tleen> if thats all you need you dont need node it will only make things more complicated
01:50 < Lefty4000> It doesn't matter at all that node.js is a serverside js 
01:50 < tleen> yeah
01:50 < Lefty4000> Well I have to use it 
01:51 < tleen> you could be serving them from apache, or nginx or from you local fule system it wouldnt matter
01:51 < Lefty4000> Not that I want to, its just its required
01:51 < ememe> @isaacs @konobi Here is the gist
01:51 < ememe> https://gist.github.com/evanmoran/4747953
01:51 < Lefty4000> How often are you guys on here?
01:51 < tleen> too much :)
01:51 < tleen> is it for a school project? 
01:52 < Lefty4000> Haha okay, thats fine
01:52 <@isaacs> ememe: it's not very private :)
01:52 <@isaacs> ememe: you can view the source.  i mean, the things have _ in the names, so it's internal, butwhatever.
01:52 < Lefty4000> Eh sort of, its for a competition and I just found out that the website has to be fully functional 
01:52 <@isaacs> ememe: it's incredibly stable.
01:52 < Lefty4000> rather than just a shell
01:52 < ememe> I'm not using the AST approach because it doesn't handle requires with logic. So require("./foo" + 'bar'); wouldn't parse
01:52 <@isaacs> ememe: stable in the sense that i would be very surprised if any feature request or pull request was not immediately denied, in the next 5 years.
01:52 <@isaacs> ememe: we're not touching that code.
01:53 <@isaacs> ememe: browserify doesnt' handle that, but you can detect it easily enough
01:53 <@isaacs> ememe: and then just throw on that
01:54 < ememe> I actually wrote it that way the first time using browserifies helper module. It was pretty strong but found this one was easier plus it gave me more context (require.paths) for generated client side require
01:54 < cloudbender> will an iife ... (function(){...})()   ... be garbage collected as soon as it is completed ?
01:55 < cloudbender> or at least marked for collection
01:55 < ememe> Browserify uses: https://github.com/substack/node-detective 
01:56 < kbobum> no matter what i set NODE_PATH to it still tries to look in ./lib
01:56 < airtanah> cloudbender: every object that has not survivde a GC cycle will be up for GC next pass, if that makes sense
01:57 < airtanah> cloudbender: objects that survive their first GC cycle might linger for longer
01:58 < cloudbender> airtanah thanks.  I wondered, since the iife is never really a reference, it's just an expression.
01:58 < cloudbender> er, referenced ...
01:58 < ememe> isaacs: dude, you wrote npm. I had no idea=)
01:58 <@konobi> ememe: my "mocked" module does some craziness
01:58 < substack> say no to mocks
01:59 <@konobi> substack: heh, depends what you're mocking
02:00 < ememe> I'm loosing internet for 10 min, but I will return!
02:00 < ememe> konobi: you mean this I assume?  https://github.com/konobi/node-mocked
02:00 <@konobi> yup
02:01 < ememe> I see how you are overriding Module.prototype.require. Super cool
02:01 < ememe> I'll bb when I get internet again
02:04 <@konobi> it doesn't quite work right for it's intended purpose... need to fix it up
02:09 < cloudbender> Cloudbender's pick-o-the-week ...   http://www.youtube.com/watch?v=tlWNiY4gtH0
02:09 < Lefty4000> Where did everybody go?
02:14 < TechnoCat> what does forever do?
02:14 < TechnoCat> https://github.com/nodejitsu/forever
02:15 < fg3> what is the most popular way to write  async code in sync style in node.js
02:15 < min|dvir|us> fg3: that's impossible.
02:15 < fg3> min|dvir|us: pesemistic
02:15 < ememe_> Thanks konobi and everyone 
02:15 < min|dvir|us> fg3: it's theoretically impossible.
02:16 < spion> TechnoCat, it monitors your (node) process and restarts it if/when it dies.
02:16 < min|dvir|us> TechnoCat: it's a CLI that auto-restarts your code if it dies.
02:16 < TechnoCat> fg3: use ringo instead http://ringojs.org/
02:16 < TechnoCat> spion: ah so it restarts them. sweet. it wasn't apparent by the readme
02:16 < ememe_> I'll try overriding require and seeing how that goes. I'm looking forward to sharing my templating language when it is a bit more polished!
02:16 < spion> it also has some logic to avoid overzealous endless restarting
02:17 < TechnoCat> i love nodejitsu
02:18 < spion> and its seems stable (using it in production, hasn't failed me even once in the past 4 months)
02:18 <@konobi> fg3: async is the point of using node... so just get over it and you'll be happier
02:19 < fg3> konobi: you can write asnyc code in a sync style and still be async
02:19 < spion> fg3, currently fibers, I think.
02:19 <@konobi> fg3: sure, but you're opening yourself up for strange semantics and edgecases
02:20 < airtanah> fg3: maybe you mean 'without callbacks' 
02:21 < spion> fg3, to get something native, go to http://code.google.com/p/v8/issues/detail?id=2355 and star the issue - this will enable stuff like http://taskjs.org/ to work in node.
02:22 < Lefty4000> What exactly is nodejitsu?  Everytime I see it, it brings me to a webhosting service thing
02:22 < fg3> what do you think of https://github.com/alexeypetrushin/synchronize
02:22 < airtanah> Lefty4000: they're a platform as a service
02:23 < airtanah> like heroku
02:23 <@mbalho> fg3: have you read http://nikhilm.github.com/uvbook/
02:23 < Lefty4000> Ohhh okay okay
02:23 < airtanah> Lefty4000: their router supports websockets too, which i think most others do not
02:24 < Lefty4000> I use Azure from microsoft but its hyper expensive
02:24 < spion> fg3, I like fibrous' approach - https://github.com/goodeggs/fibrous
02:24 < airtanah> Lefty4000: other than price, what is your experience with Azure like?
02:25 < fg3> spion: that looks great!
02:26 < Lefty4000> Well I really like that you can use it with many different languages and such.  Their support for beginners and such is great for getting started.  
02:26 < Lefty4000> Not to mention their monitoring is very simple and straight forward
02:26 < spion> fg3, but do star the generators issue if you care about having it built in inside v8 instead of resorting to native modules.
02:27 < md_5> What is the simplest way to receive an uploaded file via post? (with express)
02:27 < Lefty4000> md_5: you mean the file is uploaded from a form that is using the post method?
02:27 < md_5> Not necesarilly a form
02:28 < md_5> I would prefer the POST payload is just raw binary
02:28 < Lefty4000> http://howtonode.org/really-simple-file-uploads
02:33 < Lefty4000> I was using the jsdom library a while back and an example I was following used the prototype method.  What does that do?  I've never understood that method
02:34 < mscdex> anyone know if the diff pretty printer that github uses for commit changes is available anywhere?
02:35 < gluxon> mscdex: git diff
02:35 < gluxon> XD
02:35 < mscdex> javascript...
02:47 < lyaunzbe> hey fellas, in general, is it more efficient to use a native js library over spawning a process?
02:48 <@mbalho> lyaunzbe: https://github.com/felixge/faster-than-c
02:51 < lyaunzbe> mbalho: thanks, I'll take a look
02:59 < spion> mbalho, why are all the images missing in faster-than-c? :/
02:59 < spion> used to have nice charts
04:08 < cloudbender> I'm in a sub-subfunction. how can I reference a variable one level out ?
04:09 < SomeoneWeird> you should be able to ?
04:09 < cloudbender> this.parent.reference ?
04:15 < asdf12> it
04:23 < spion> cloudbender, just "reference" 
04:23 < cloudbender> well, reference was a parameter passed to the top level function.
04:23 < cloudbender> :)
04:23 < spion> and it should work regardless.
04:24 < cloudbender> hmmm
04:24 < cloudbender> use strcit ?
04:24 < cloudbender> strict ?
04:24 < cloudbender> I'll find it sorry guys. thanks
04:24 < asdf12> what
04:24 < spion> strict or not, doesn't matter.
04:25 < spion> >> function outer(param) { function inner() { console.log(param); }; inner(); } outer();
04:25 < purr> spion: undefined; Console: undefined
04:25 < spion> what did i mess up now.
04:26 < cloudbender> func1(parameter1) { func2 { func3 { ... I need to reference the top parameter
04:26 < spion> oh right
04:26 < spion> >> function outer(param) { function inner() { console.log(param); }; inner(); } outer("Here is param");
04:26 < purr> spion: undefined; Console: 'Here is param'
04:28 < cloudbender> brb coffee me
04:28 < evanmoran> cloudbender: you can try to make a new reference with var. Something like: function outer(param){var param_ = param; function inner(){...}}
04:28 < evanmoran> people do it with self = this; all the time
04:29 < spion> thats for "this" - (the rest of the) parameters should be directly accessible though.
04:29 < cloudbender> hmmm
04:36 < spion> the beauty of first class functions and closures :)
04:46 < asdf12> anyone
04:47 < greg5green> anyone what?
04:49 < lyaunzbe> ls
04:49 < lyaunzbe> sigh, wronng tab...
04:50 < spion> nsfw_pic_1.jpg nsfw_pic_2.jpg ...
05:05 < kbobum> forever is stucked forever lol
05:06 < kbobum> forever list keeps hanging
05:06 < opus_> yay i booted my new ec2 instance. i'm in the cloud yo
05:06 < asdf12> whats
05:07 < someprimetime> the cloud has to be the worst marketing gimmick â€¦ ever
05:07 < opus_> hey, its free.
05:07 < OTBS4Life> I would say "the cloud" has worked quite well as a marketing gimmick.
05:07 < asdf12> thats
05:07 < sente> at the consumer level it's less gimmicky i think
05:07 < asdf12> free
05:08 < sente> for coders/admins, it's a bit gimmicky i guess, but they all know what's up anyways 
05:08 < asdf12> i
05:08 < opus_> asdf12, amazon ec2 free tier
05:08 < someprimetime> sente++
05:09 < kbobum> halp forever is unresponsive. forever stop something.js gets stuck, as well as forever list
05:09 < opus_> you get 750 "compute hours" per month. Not sure wtf that equiates to. 
05:09 < asdf12> 1
05:09 < sente> 1 cpu constantly crunching for 750 hrs, i believe
05:10 < asdf12> 1
05:10 < opus_> so like, 1.8ghz for 31.25 days?
05:10 < asdf12> lower
05:10 < asdf12> like
05:13 < spion> opus_, its active machine time
05:13 < spion> hours go by as long as the instance is up and running
05:13 < spion> (the CPU utilization doesn't matter)
05:13 < asdf12> it
05:14 < asdf12> you
05:14 < asdf12> wait,
05:16 < spion> asdf12, iis it possible by any chance that your IRC client is broken? maybe not prepending  ":" before the message?
05:16 <@Nexxy> LOL
05:17 < spion> xD because it kinda looks that way. i could be way off though
05:17 < asdf12> doh, how is the message coming out?
05:17 < asdf12> could be a bug, i'll prepend it now, thought i was
05:17 < spion> working great now
05:19 < asdf12> haha so you were only getting the first word of every line i wrote?
05:19 < OTBS4Life> asdf12, Lol, I wondered WTF was going on
05:19 < OTBS4Life> asdf12, I figured you were drunk or something.
05:19 < opus_> yup, i totally thought you were drunk
05:20 < OTBS4Life> <asdf12> it
05:20 < OTBS4Life> <asdf12> you
05:20 < OTBS4Life> <asdf12> wait,
05:23 < asdf12> yea i've been writing a 'cloud' irc client past few days, bug :S, hate irc protocol
05:23 <@Nexxy> asdf12, lol
05:24 < asdf12> HEY at least there was one person who had enough faith in me to know i wasn't drunk
05:24 < asdf12> or properly just was familiar with irc protocol when you leave off the : :x
05:25 < OTBS4Life> asdf12, WTF is a "cloud" IRC client?
05:26 <@Nexxy> a cloud client for the original digital gangsta cloud protocol
05:26 < tonka> o.O
05:26 < asdf12> same idea as https://www.irccloud.com/
05:27 < asdf12> they offer a free account, but i wanted to make my own and figured it would be fast, but its actually tedious
05:27 <@Nexxy> asdf12, those colons will get you every time
05:30 < asdf12> oh nevermind, that free account doesn't let you connect to freenode, so that sucks
05:32 < OTBS4Life> Isn't there  Node.js IRC library out there?  I thought I saw one recently...
05:33 < asdf12> there is
05:33 < csixty4> It blows my mind that someone could have a subscription IRC client in 2013. Or that we're still using IRC in 2013 for that matter.
05:34 < asdf12> it doesn't blow my mind, their pricing kind of does, but i guess thats subjective
05:35 < OTBS4Life> There are web chat services all over the place that charge for the usage of the code.
05:35 < OTBS4Life> These chat boxes are handy for radio stations and what not
05:35 < asdf12> yes people are still using chat similar to IRC anyway all over, in companies, teams, whatever
05:38 < opus_> irc: turning regular people in to ass hats over the internet since 1990something
05:38 < asdf12> maybe in 2014 we can do away with irc or similar and switch to telepathy
05:38 < OTBS4Life> May 1993  http://www.irchelp.org/irchelp/rfc/rfc.html
05:38 < OTBS4Life> 20 years of RFCs  :-)
05:38 < OTBS4Life> We should have a party
05:38 < OTBS4Life> err, 20 years of IRC
05:38 < opus_> i remember being on irc in december 1993
05:39 < asdf12> all the cool people were on AOL in 1993
05:39 < opus_> The Beginning
05:39 < opus_> IRC was born during summer 1988 when Jarkko "WiZ" Oikarinen wrote the first IRC client and server at the University of Oulu, Finland (
05:39 < opus_> yeah i knew irc was older then 1993. 
05:40 < OTBS4Life> Ah, I see that now
05:40 < OTBS4Life> In the RFC:  "The IRC protocol was developed over the last 4 years since it was
05:40 < OTBS4Life>    first implemented as a means for users on a BBS to chat amongst
05:40 < OTBS4Life>    themselves."
05:40 < systemfault> So both Linux and IRC are from Finland :P
05:40 < systemfault> Let's move there
05:40 < OTBS4Life> Can you actually emigrate to Finland?
05:41 < opus_> OTBS4Life its cold and dark, why would you
05:41 < asdf12> probably if you're a US citizen
05:41 < OTBS4Life> opus_, So is Chicago at the moment.  :-)
05:42 < opus_> Its 23F in Oulu Finland right now
05:42 < OTBS4Life> 35 here in Chicago now, but was much colder last week.  Wind chill was -15F or so.
05:42 < csixty4> And Boston at the moment, too. 24 inches of snow yesterday.
05:43 < opus_> yeah but the sun rises at 8:35 am and sets at 4:31 in finland
05:43 < OTBS4Life> I don't know why Boston is complaining... it's typical nor'easter weather.  We just haven't seen it in awhile.
05:43 < opus_> 8 hours of "sunlight"
05:43 < OTBS4Life> opus_, Same here in Chicago.  At least in December.
05:43 < OTBS4Life> it's a bit brighter now though.
05:43 < csixty4> This is my first Boston winter. I grew up in Chicago. We call this "Saturday"
05:44 < opus_> 6:53 sunrise, 5:16 sunset for Chicago, slightly better
05:44 < OTBS4Life> csixty4, Do people reserve their shoveled out parking spots in Boston?
05:44 < csixty4> We had a blizzard this bad back in Chicago a couple years ago
05:44 < klad> http://www.gaisma.com/en/location/oulu.html << too much sunlight in the summer
05:45 < csixty4> I hear people do reserve spots downtown. But when it's a big storm like this, seems like everyone's a team player.
05:45 < opus_> Haha yeah 23 hours of sunlight. Thats when you just see the sun do a huge circle in the sky without even setting
05:45 < sebmck> anyone know how i'd go about removing a node using falafel?
05:46 < OTBS4Life> csixty4, I just moved here to Chicago last winter.  I wondered why people had lawn chairs and what not in the streets.
05:48 < csixty4> It's a real cultural thing. People get really upset every time the city proposes cracking down on it. But parking is kind of a touchy subject in general in Chicago.
05:49 < asdf12> you know what would be cool? hot code swapping in node
05:49 < OTBS4Life> asdf12, You can do this now.
05:49 < opus_> like, eval?
05:49 < sebmck> asdf12: what do you mean?
05:50 < asdf12> OTBS4Life, go on, i know you can, but i wonder what you mean
05:50 < opus_> you want to reset the global context?
05:50 < asdf12> sebmck similar to erlang
05:50 < OTBS4Life> asdf12, You have to load JS files manually, but can then simply eval().
05:50 < OTBS4Life> asdf12, Unfortunately, require() caches.
05:50 < sebmck> you can invalidate the require cache
05:50 < OTBS4Life> asdf12, Looks like there is a way around it though:  http://stackoverflow.com/a/9210901/362536
05:51 < asdf12> right right
05:51 < sebmck> delete require.cache[require.resolve('file')];
05:51 < asdf12> but take it one step further
05:52 < asdf12> yes but you can't delete the require.cache while code is already running :P
05:52 < asdf12> unless you put it in beforehand, which is not very usable 
05:52 < OTBS4Life> asdf12, I don't know how you would take it one step further without being application specific.  I experimented with this awhile back... reloading modules as I would edit them so that new instances would use new code.
05:52 < OTBS4Life> asdf12, It wasn't worth the effort.  Parts of the program would be on one version, parts would be on the other... in the same process.  Interesting exercise, but truly pointless.
05:52 < OTBS4Life> asdf12, At least, it was pointless for my purposes.
05:53 < asdf12> yea it would usability wouldn't be that great even if you did take in 1 step further than having to put reloading new code into your actual code
05:55 < asdf12> but it'll be interesting, if you could attach a shell to a running process, and manually type in new code
05:57 < asdf12> think of it like this, you write a web app in javascript, you open up the chrome developer tools and you can modify your JS on the spot
05:57 < asdf12> it would be cool to do the same in node
05:57 < systemfault> I thought you could :/
05:58 < systemfault> With something like node-inspector...
05:58 < systemfault> Never tried it though.
06:00 < asdf12> i never used it either, but it looks more like for debugging
06:00 < sebmck> systemfault: yeah you can
06:02 <@Nexxy> asdf12, the node docs on REPL actually show you how to do that
06:02 <@Nexxy> you can also install node-inspector
06:02 <@Nexxy> it gives you the same kind of interface you're used to
06:03 < asdf12> ok i'll take a look, i know it's possible, but i never actually looked at it, it's more for production use than for debugging/development
06:04 < sebmck> hot code reloading on a production app seems like a disaster waiting to happen
06:04 < asdf12> it'll be neat if i say forgot to prepend :, :P and its a quick fix, instead of restarting my process with the new code, to just say reload function x, and be done with least amount of overhead
06:04 <@Nexxy> asdf12, https://github.com/dshaw/replify may be relevant
06:05 < asdf12> sebmck its all in how you use it
06:05 < sebmck> memory leaks are the first thing that come to mind
06:06 < someprimetime> is there a more succinct way to do this in jade? input(name='user[email]', type='text', value=(typeof params !== 'undefined' && params.email ? params.email : ''))
06:06 < someprimetime> basically re-populating form fields after a POST
06:06 < someprimetime> when validation fails on more than one field
06:10 < asdf12> use
06:10 < asdf12> if
06:11 <@Nexxy> lol asdf12 
06:11 < asdf12> doh 
06:11 < systemfault> If I would like to do an HTTP API with node, should I use express or there's something "more specific" I should use?
06:11 < asdf12> use cookies if it's not ajax
06:12 < asdf12> well not cookies specifically, but the session
06:15 < asdf12> what do you mean http api
06:15 < tpayne> yo, are signedCookies ready to use immediately?
06:15 < tpayne> this is great if so
06:15 < timoxley> systemfault just use express
06:15 < systemfault> asdf12: RESTful API
06:15 < tpayne> for express that is
06:16 < systemfault> timoxley: I just found restify.. not sure if I should take that over express, I'll take a look at both
06:16 < asdf12> systemfault check out walmartlabs/hapi  on github
06:16 < systemfault> timoxley: espress is widely-used and probably more mature.. but restify seems to be made for REST APIs.
06:16 < timoxley> systemfault if it's your first app, it's probably safest to use express
06:16 < systemfault> asdf12: Okay :P It has the word walmart in it though :P
06:16 < systemfault> timoxley: Ah ok :D
06:17 < timoxley> systemfault bigger ecosystem around express. unless you want to be building stuff and adding to the ecosystem yourself, best to pick biggest ecosystem
06:17 < harbhub> what is the safe way to store a cookie?
06:17 < timoxley> harbhub store?
06:17 < systemfault> timoxley: Thanks again 
06:17 < harbhub> i want a cookie (or something safe that is comparable)
06:18 < timoxley> harbhub you mean
06:18 < timoxley> a secure session?
06:18 < harbhub> i want to store username and password(hashed)
06:18 < harbhub> that way i can verify a user
06:18 < harbhub> actually
06:18 < harbhub> hmmm
06:18 < harbhub> i want a safe way to store a session
06:18 < asdf12> just encrypt the password
06:19 < asdf12> well hash + encrypt
06:20 < timoxley> harbhub using the session store in express is safe
06:20 < harbhub> how do i encrypt it?
06:20 < harbhub> i'm not using express
06:20 < timoxley> harbhub what are you using
06:20 < harbhub> how do i encrypt?
06:20 < harbhub> i'm using nodejs
06:20 < harbhub> the http module
06:20 < harbhub> and the fs module
06:20 < harbhub> so how do i encypt?
06:20 < harbhub> encrypt*
06:21 < timoxley> harbhub you'd be better off using something that does all this for you
06:21 < harbhub> no
06:21 < harbhub> i do things myself so that i have more control
06:21 < cloudbender> The web console toolbar in FireFox.  I like the visual appearance of the toolbar itself.
06:22 < sebmck> better write your own js engine so you get more control
06:23 < opus_> theres a crypto module for node
06:23 < opus_> i was looking into it to create a mega.co.nz client
06:23 < timoxley> harbhub do a search for session modules on npm, then have a look at how they work
06:23 < opus_> node-crypto
06:23 < sebmck> node already has an in-built crypto library
06:23 < opus_> http://nodejs.org/api/crypto.html
06:24 < harbhub> how do i encrypt the cookie, though?
06:24 < timoxley> harbhub e.g. https://github.com/rvagg/node-generic-session/blob/master/lib/index.js
06:26 < asdf12> harbhub you don't encrypt the cookie
06:26 < harbhub> what do i do, then?
06:26 < harbhub> i want to retrieve the cookie, however i do not want people to just set the cookie
06:27 < harbhub> can people set a cookie in their browser for my document?
06:27 < sebmck> yes
06:27 < sebmck> you don't seem to be very experienced so i'm not sure why you want to roll your own when there are already secure implementations out there
06:28 < timoxley> ^ +1
06:28 < harbhub> that is how i gain my experience
06:28 < harbhub> by doing
06:28 < harbhub> so i am not experienced now, and then i will learn this, and then i will be experienced
06:28 < asdf12> no you do it by looking at how other people did it
06:28 < sebmck> ^
06:28 < timoxley> +1
06:28 < systemfault> I'd say both..
06:29 < timoxley> harbhub as in, if you don't use the modules, fine, but all the answers to your questions are in there
06:29 < timoxley> see how they do it, and adapt.
06:29 < harbhub> http://stackoverflow.com/questions/402348/getting-setting-cookies-on-different-domains-with-javascript-or-other
06:29 < harbhub> what is this?
06:30 < timoxley> harbhub is that what you want to do?
06:30 < asdf12> basically harbhub, user logs in successfully, you generate a long unique id, set it as their cookie, whenever they want to do something, they give you their cookie, and you use that to look up who they are and if they can do it
06:30 < harbhub> that is what i don't want people to do to me lol
06:30 < harbhub> asdf12, thanks
06:31 < harbhub> that is the answer i was looking for
06:31 < harbhub> so i use a uuid
06:31 < harbhub> and kvs is persistently on my server
06:31 < harbhub> and check against it
06:31 < asdf12> kvs?
06:32 < harbhub> key value store
06:32 < harbhub> key:value
06:32 < harbhub> persistent storage
06:32 < asdf12> ok remember to expire cookies, send cookies over https, etc.
06:33 < Lefty4000> Hello?
06:39 < tpayne> I'm running node version 7. Is there a site that lists the difference between v 7 and 8?
06:40 < sebmck> tpayne: not unless you read through the changelogs
06:40 < sebmck> http://nodejs.org/changelog.html
06:41 < harbhub> what is the best UUID for nodejs?
06:41 < tpayne> great thanks
06:41 < harbhub> UUID generator*
06:41 < sebmck> or https://github.com/joyent/node/wiki/API-changes-between-v0.6-and-v0.8
06:42 < Lefty4000> well there is a library called node-uuid
06:42 < Lefty4000> Thats what I use and its always been fine for me
06:42 <@isaacs> JasonSmith: ping
06:43 <@isaacs> JasonSmith: looks like around 2013-02-10T05:51:19.104Z the registry hiccupped, and when that happens the website crashes sometimes.
06:43  * isaacs was supposed to fix it so that that couldn't happen, but... hasn't, i guess.
06:47 < Lefty4000> ?
06:47 < Lefty4000> ping
06:51 < asdf12> harbhub:
06:51 < harbhub> msg NickServ login harbhub testing
06:51 < harbhub> :)
06:56 < Lefty4000> Wait so is there something wrong with the server or something? that would explain why like nobody is here
06:56 < OTBS4Life> Nobody is ever here.
06:56 < OTBS4Life> IRC... everyone is logged in, nobody here
06:56 < okee> Not even you!
06:57 < nobodyIsHere> How reliable is node.js?  Is it ready for the prime time?
06:57 < OTBS4Life> nobodyIsHere, Depends on your needs.  Plenty of people use it for "prime time" already.
06:57 < rbrackett> I've been trying to profile some JS code in node, but am not having much luck. Does anyone here have experience with using the --prof option?
06:57 < okee> That I am aware of, but I am hearing conflicting reports.  I would like to use it for a banking grade insurance site.  Is this a good idea?
06:58 < OTBS4Life> okee, What your site does doesn't say much for what you need Node.js to do.
06:58 < OTBS4Life> okee, There are a lot of folks that are leery of using something that "isn't at version 1.0 yet".  I would argue that the open source nature means you can go and inspect the issues log any time you want.
06:59 < okee> I am connecting to a database with node.js  Originally I was going to use PostgreSQL, but need to explore NuoDB.  I hear NuoDB can distribute over the node, and that would save me some work.
06:59 < OTBS4Life> Node.js has some fairly large backers of the project that contribute code.  I don't think it is going anywhere any time soon.
07:00 < OTBS4Life> okee, I've never used NuoDB, so I can't provide advice on it.
07:00 < asdf12> rbrackett whats the problem?
07:00 < rbrackett> After running v8.log through mac-tick-processor, I get a lot "unknown code state: undefined" and no information about any JS functions
07:00 < okee> NuoDB is very new, so I don't know how stable it is.  How stable is node.js with Postgre?
07:00 < Lefty4000> unfortunatly I haven't used it either so I can't help out
07:00 < okee> Has anyone tried it connecting to a database?
07:01 < OTBS4Life> okee, That depends on what library you use to access it.  I haven't used PostgreSQL with Node.js... just MySQL.  I've had great luck with MySQL.
07:01 < rbrackett> So I get output like:
07:01 < asdf12> rbrackett what version of node?
07:01 < rbrackett>  [Shared libraries]:
07:01 < rbrackett>    ticks  total  nonlib   name
07:01 < rbrackett>       3    0.0%    0.0%  /usr/lib/system/libsystem_c.dylib
07:01 < rbrackett>  [JavaScript]:
07:01 < rbrackett>    ticks  total  nonlib   name
07:01 < rbrackett>  [C++]:
07:01 < OTBS4Life> okee, This is what I used:  http://nodejsdb.org/
07:01 < rbrackett> 0.8.19, sorry
07:01 < rbrackett> should have said that up front
07:01 < airtanah_> does anyone use npm config at all?
07:02 < asdf12> rbrackett and how did you get the tick processor? from v8 source? or you got it from building 0.8.19 src dependency?
07:02 < airtanah_> i see it in the docs
07:02 < airtanah_> but don't see it mentioned much
07:02 < rbrackett> askf12, I grabbed the v8 source directly and built it (I also tried building from the 0.8.19 src dependency, but couldn't get it to work)
07:03 < asdf12> rbrackett its the conflicting v8 versions i think
07:03 < rbrackett> that's what I was wondering
07:03 < OTBS4Life> okee, Most of the folks bashing Node.js don't know how it works.  My suggestion would be to use it for something and fully understand what is going on.  It isn't a tool for every job, but is very good at many.
07:04 < okee> Have you tried it with anything more than MySQL? MySQL is not a database I can use for this project.
07:04 < asdf12> rbrackett use the one that comes with 0.8.19
07:04 < OTBS4Life> okee, Just MySQL and MongoDB.
07:04 < rbrackett> asdf12, if I try to build that one, I get make: *** No rule to make target `test/cctest/cctest.gyp', needed by `out/Makefile.native'.  Stop.
07:04 < harbhub> is a SHA1 hash sufficient protection?
07:04 < systemfault> Usually, yes.
07:04 < OTBS4Life> okee, Again though, this isn't a "Node" question, it's a question about what library you are using to connect to your DB with.  You have many choices.
07:04 < asdf12> rbrackett the tick processor stuff is just javascript
07:04 < harbhub> when can a SHA1 hash be insufficient?
07:04 < okee> Actually I think node.js has a lot of potential, but it might be a little early in the development cycle for what I am trying to do.
07:04 < rbrackett> right, but it needs d8 built in order to run
07:05 < asdf12> rbrackett no it doesn't
07:05 < systemfault> harbhub: Use sha512 if you want..
07:05 < harbhub> systemfault, why that one?
07:06 < OTBS4Life> okee, For what it's worth, I have never had a problem with stability.  I've been using it in production for almost a year, albeit not under huge loads.  The API changes from time to time... that's where your concern should be.  Since 0.6, it hasn't changed significantly.
07:07 < rbrackett> asdf12 well, it looks like it's not outputting anything in this case
07:07 < systemfault> harbhub: sha256 and 512 are newer, have longer hashes and are said to be more secure.
07:07 < rbrackett> (the one from node0.8.19 reps)
07:07 < rbrackett> *deps)
07:08 < asdf12> rbrackett look at linux tick processor
07:08 < rbrackett> asdf12 if I do `./path/to/node-v0.8.19/deps/v8/tools/mac-tick-processor` I get nothing on stdout
07:09 < asdf12> it just concats some *.js files together, thats it
07:09 < rbrackett> oh, hmm
07:10 < asdf12> rbrackett https://raw.github.com/bnoordhuis/node-profiler/master/tools/nprof-stub.js download that , then cat nprof-stub.js x.js y.js z.js etc. > tick
07:10 < rbrackett> ok, will give that a try
07:10 < rbrackett> thanks, asdf12
07:11 < fg3> help with my fibrous script if you can -> http://goo.gl/oJQ1A
07:14 < asdf12> rbrackett if you're curious the nprof-stub file is just stubbing the place of where those concated files would expect d8 functionality (its really just two functions readline and print), which is why you don't need to build v8, just use the 0.8.19 js files
07:16 < rbrackett> asdf12 had no idea. Thanks
07:17 < asdf12> harbhub:
07:19 < rbrackett> asdf12 Works perfectly. Thanks for the help!
07:19 < Lefty4000> So how have you guys used jQuery with express?
07:19 < asdf12> harbhub: check out http://en.wikipedia.org/wiki/Rainbow_table#Defense_against_rainbow_tables
07:19 < OTBS4Life> Lefty4000, What do you mean?  They don't have anything to do with each other.
07:20 < Lefty4000> Well my app uses express.  How can I implement jQuery along side it?  
07:20 < OTBS4Life> Lefty4000, Again... I'm not sure what you are asking.  You use Express server-side, and jQuery client-side.
07:20 < Lefty4000> just like I would any other way?
07:21 < OTBS4Life> Lefty4000, Yes, what you do server-side doesn't change what you are going to do client-side.
07:21 < Lefty4000> Okay, its just I have no experience actually doing it.  I'm a total beginner
07:34 < brain_shim>  Lefty4000 What tools have you used before? (Ruby, PHP, Linux, Databases, HTML, CSS, etc)
07:35 < Lefty4000> Little bit of ruby, html, css. Not much databasing.  Java, c++, C, verilog
07:35 < Lefty4000> Im workin on javascript as we speak
07:36 < brain_shim> Okay, cool. :)
07:36 < Lefty4000> Oh and don't forget android
07:36 < brain_shim> Awwwww yeeeeaaahhh
07:36 < Lefty4000> I'm not a software engineer or a computer scientist
07:36 < Lefty4000> I'm just a computer engineer
07:36 < brain_shim> ;D
07:37 < brain_shim> Have you done any Ruby on Rails?
07:37 < OTBS4Life> Oh God, it's the weekend... I thought I had escaped Rails.  :-)
07:38 < Lefty4000> No I haven't done Ruby on Rails.  I have a book I was reading on it that I really liked so I want to learn that after I finish this project.
07:38 < Lefty4000> My brother is a computer programmer and he does everything with Ruby on Rails
07:38 < brain_shim> Cool, cool. 
07:38 < Lefty4000> It looks so awesome
07:38 < brain_shim> I'm just asking to feel out what some good comparisons are with your experience
07:38 < substack> rails appeals to some people but not me
07:39 < brain_shim> yaya
07:39 < OTBS4Life> Lefty4000, Perhaps it does if you want to start a blog or something.
07:39 < Lefty4000> Well I do have a blog actually
07:39 < Lefty4000> well personal website w/e
07:39 < brain_shim> Not why I brought it up.
07:40 < substack> if you like building CRUD apps you will love rails
07:40 < Lefty4000> what? No I mean to OTBS, I have a website but its all computer engineering stuff
07:40 < Lefty4000> Just leds, and fpga stuff
07:40 < OTBS4Life> My point is that Rails is a hassle for anything beyond some basics... I confess that this is not a well-formed opinion... I spent a weekend with it and said forget it.
07:41 < brain_shim> You have to spend more than a weekend with something to get any good.
07:41 < brain_shim> No matter what the language or framework.
07:41 < substack> brain_shim: but why?
07:42 < brain_shim> Why what?
07:42 < substack> why should a person get good at rails
07:42 < brain_shim> I'm not saying they should.
07:42 < OTBS4Life> brain_shim, Agreed, don't get me wrong here, I said it was not a solid opinion.
07:42 < substack> when it's not appealing after some minor usage
07:42 < substack> that's how I decide among libraries and technologies
07:42 < brain_shim> I know what channel i'm on. :)
07:42 < substack> slog-fests are not fun nor are they productive
07:42 < brain_shim> fer sure
07:43 < substack> it's the same with npm modules too
07:43 < OTBS4Life> Truth be told, my biggest beef with Rails has nothing to do with Rails... it has to do with most of the folks that use it.  It's often the first time they have seen an ORM and immediately assume that it can't be done in any other language/stack.
07:43 < Lefty4000> ORM?
07:44 < substack> I was using DBI in perl and SQL Alchemy in python before I tried rails so it was pretty meh
07:44 < OTBS4Life> Lefty4000, All the magic that goes into updating an object and it automatically gets stuffed in a DB somewhere.
07:44 < substack> DBI::Class or whichever it is
07:45 < TheAceOfHearts> whoa, we're moving up to 10 soon?
07:46 < mscdex> TheAceOfHearts: i hope you've prepared all of your modules!
07:47 < brain_shim> substack: My point was more to do with attention span / patience when it comes to trying to learn new things.
07:47 < TheAceOfHearts> it feels like Christmas :D
07:47 < sebmck> anyone know in what instances fs.watch will throw "watch EMFILE"? that's the exact error message and it's not exactly descriptive
07:48 < mscdex> sebmck: not enough file descriptors available
07:48 <@mbalho> sebmck: that means you are trying to watch too many files
07:49 < sebmck> can't be it since it happens even in the repl
07:49 < sebmck> with no other files being watched, i've also got my max files set high
07:50 < OTBS4Life> sebmck, What OS?
07:50 < sebmck> OTBS4Life: Ubuntu 12.10
07:51 < airtanah_> but don't see it mentioned much
07:58 < Lefty4000> alright heading out, see you tomorrow
08:00 < asdf12> i dont like the rails community, reminds me of coporate america
08:00 < harbhub> hey
08:00 < harbhub> how do i listen to the connect event for socketio on the client side?
08:01 < OTBS4Life> 'eh, all the folks using Rails around here are a bunch of hipsters.
08:01 < TheAceOfHearts> asdf12, why so? 
08:01 < TheAceOfHearts> rather, how so?
08:01 < asdf12> harbhub its cool you want to learn to do stuff on your own, but you need to make a little bit of effort, http://socket.io its like literally right there
08:01 < OTBS4Life> asdf12, The documentation on Socket.IO is crap, and almost non-existant except for a few basic methods.
08:02 < harbhub> thanks i figured it out
08:02 < harbhub> also, i ask questions and while i await a reply i look up on google
08:02 < harbhub> sometimes it is hard to find a good answer, so i ask here first, then i search
08:03 < asdf12> harbhub :P i know what you mean, just when the answer its right on their home page :PP
08:03 < OTBS4Life> asdf12, The answer isn't on their home page.  Fortunately, this one is actually in the "how to use" section.
08:04 < asdf12> well you know what i mean :P
08:04 < OTBS4Life> asdf12, I don't blame him for asking.  Most of the time with Socket.IO, I just have to go dig around in the src.
08:04 < OTBS4Life> Socket.IO... awesome stuff, but nobody wrote docs.  I've been meaning to contribute some, but I haven't studied the internals enough yet.
08:05 < asdf12> TheAceOfHearts it reminds me of corporate america because it seems to me its a closed community, everyone is just trying to climb up the ladder
08:05 < asdf12> TheAceOfHearts
08:06 < TheAceOfHearts> I see. I'm not really familiarized with rails
08:06 < OTBS4Life> Alright, it's 2AM... I'm out.  Have a good one.
08:41 < thealphanerd> Nexxy: https://secure.vimeo.com/59331713
08:42 <@Nexxy> ;o
08:42 <@Nexxy> that's awesome :D
08:43 < TheAceOfHearts> that's pretty sick
08:44 < systemfault> I can't hear the sound, what's nice about that?
08:44 < brain_shim> js touch library synth
08:44 < brain_shim> on tablet
08:57 < thealphanerd> running on embedded linux
08:57 < thealphanerd> everythin
08:57 < thealphanerd> node and dsp
09:13 < harbhub> what does throw err do?
09:13 < harbhub> if(err)throw err
09:13 < harbhub> i use:  if(err)console.log(err);
09:13 < harbhub> what does throw do?
09:14 < geNAZt> throw error throws an error one stack up
09:14 < TheAceOfHearts> it throws an exception?
09:14 < systemfault> That's is part of the basicsâ€¦ perhaps you need a JS tutorial.
09:14 < systemfault> -is
09:14 < TheAceOfHearts> well, to be fair, at least in my experience, error handling in nodejs feels weird
09:14 < geNAZt> >> try { throw new Error("test"); } catch(e) { console.log(e); }
09:14 < purr> geNAZt: undefined; Console: {arguments: undefined, message: 'test', stack: (Getter/Setter), type: undefined}
09:15 < geNAZt> that does throw
09:15 < geNAZt> >> throw new Error("test");
09:15 < purr> geNAZt: Error: test
09:15 < systemfault> I wouldn't personally use exceptions in node.js code
09:15 < systemfault> Because async + exceptions don't go well together
09:15 < geNAZt> well nodejs does
09:15 < geNAZt> and so you have to handle with it
09:18 < TheAceOfHearts> I like to live dangerously
09:19 < TheAceOfHearts> but seriously, I'd love for some guides on how to properly handle errors in nodejs, I've seen a few links, but it hasn't really clicked with me
09:19 < geNAZt> wrapping sync calls in try catch is a good beginning :D
09:20 < geNAZt> well everything that can throw should be wrapped in :D
09:20 < substack> TheAceOfHearts: event emitters have 'error' events and callbacks have err as the first param
09:21 < substack> TheAceOfHearts: and you shouldn't throw exceptions unless you have a very good reason
09:21 < TheAceOfHearts> I see, thanks
09:21 < geNAZt> well then never look at the crypto module in nodejs
09:21 < geNAZt> and never use sync fa calls :D
09:21 < geNAZt> fs*
09:21 < TheAceOfHearts> well, thankfully I've never had to use Crypto
09:22 < geNAZt> a i forgot buffers
09:22 < geNAZt> if you use them out of bounds they throw errors
09:35 < amurdaca> if i want to put he app.get() part of my app.js how can i do?
09:36 < geNAZt> you mean outside ?
09:36 < amurdaca> i would create routes.js and require('./routes') in my main
09:36 < amurdaca> yes geNAZt
09:36 < amurdaca> then?
09:36 < geNAZt> make a module and di the app object into that module
09:36 < amurdaca> mmm can you gist it geNAZt?
09:36 < geNAZt> one moment
09:37 < amurdaca> thank you
09:40 < geNAZt> https://gist.github.com/geNAZt/4748979
09:41 < amurdaca> thank you, can i put all the requires in the require section of routes.js?
09:41 < amurdaca> instead of putting them directy in app.use method?
09:41 < geNAZt> yes ofc
09:42 < geNAZt> i dont like it but if you want to name the models by module name you can do that
09:42 < amurdaca> yes and then calling them like name.function
09:42 < amurdaca> it think is cleaner
09:43 < geNAZt> i dont think so
09:47 < gildean> also require blocks, so if you don't require the modules before using them, the first time a module is required, everything stops until it's required
09:47 < gildean> usually not a big deal at all, but still
09:48 < amurdaca> i didn0't get what you says gildean
09:48 < amurdaca> :/
09:49 < amurdaca> why calling them models too? :D i called em routes
09:49 < geNAZt> because i come from the MVC world
09:50 < geNAZt> routes => Controller; Data Handler => Models; Templates => Views
09:50 < amurdaca> ok so i'm talking about routes => Controller
09:50 < amurdaca> so i don't understand why you called them models
09:50 < gildean> amurdaca: what i'm saying is: it's usually better to require the modules beforehand when the app starts, that way you won't block the app with the requires in the middle of it doing something
09:51 < geNAZt> well a Controller in the MVC Pattern "routes" your requests and redirects into the right model
09:53 < aeosynth> what is / was the site that let you run nodejs scripts in the cloud? it was on hacker news a few months back, and there was a similar service from another group for lua
09:54 < aeosynth> basically i want a jsfiddle for nodejs, to show someone the errors i'm getting trying to connect to their tcp server
09:54 < amurdaca> gildean ok so is blocks in npm?
09:58 < dominique_> hi everybody
09:59 < dominique_> I assume this question is old, but: How can I prevent node.js exiting when an exception is thrown?
10:00 < amurdaca> i required require('./routes')(app) after app.configure gildean
10:00 < amurdaca> this way i suppose it won't break nothing 
10:00 < geNAZt> dominique_: process.on('uncaughtException', function (err) {});
10:01 < dominique_> geNAZt: Really....? That easy? Should I use for general error handling or better not?
10:01 < geNAZt> yes that easy; no better not
10:01 < dominique_> geNAZt: Ok, thanks a lot!
10:06 < amurdaca> what is the method: function(){} syntax is javascript?
10:06 < amurdaca> like this -> https://github.com/rockbot/CrowdNotes/blob/master/routes/index.js
10:07 < geNAZt> it is defining object indexes and as values there is a function
10:07 < geNAZt> so you can do this:
10:07 < geNAZt> Obj.index()
10:08 < amurdaca> is it like classes?
10:08 < geNAZt> no
10:08 < geNAZt> like statics
10:08 < geNAZt> but you shouldnt follow that example
10:08 < geNAZt> it would lead to a big file for the routes
10:08 < geNAZt> which is bad
10:08 < amurdaca> it's the same as exports.index and then you call it var bla =  require(./blabla)    bla.index
10:09 < geNAZt> correct
10:09 < amurdaca> oh so is not javascript releated? i mean is an express/connect way of doing this? or not?
10:09 < geNAZt> that index: function() {} ?
10:09 < amurdaca> yes
10:09 < geNAZt> thats javascript way
10:10 < amurdaca> why is bla.index exports.index better then?
10:10 < substack> amurdaca: are you horse_js?
10:10 < amurdaca> what means?
10:11 < amurdaca> i come from C and php programming
10:11 < geNAZt> i also come from php
10:11 < geNAZt> but why exports.index ?
10:11 < geNAZt> what is bla.index ?
10:11 < amurdaca> i'm sorry for bothering you..but i don't fully get everything due to i started node.js 1 week ago
10:12 < geNAZt> it is no problem
10:12 < geNAZt> thats why i am here
10:12 < geNAZt> to help people understand and writte good code in nodejs
10:12 < amurdaca> indeed i'm a code maniac and i always want the good way to write down something
10:13 < amurdaca> so which are the differences for doing exports.index = function(){} and module.exports = {  index: function....}?
10:13 < geNAZt> none
10:14 < amurdaca> why you told me not to use index: .... that will lead to a lot of lines
10:14 < amurdaca> of code
10:14 < geNAZt> why do you want to throw models into one file ?
10:15 < geNAZt> thats why i said dont do objects
10:15 < geNAZt> one model in one file
10:15 < geNAZt> should be the best and easiest way to structure your files
10:15 < amurdaca> i follow the express app that i created with express command
10:15 < amurdaca> ohhh
10:15 < amurdaca> gotcha
10:15 < geNAZt> this is not about "this goes" "this gives you errors"
10:16 < geNAZt> all of these methods work
10:16 < geNAZt> but the one is better then the other
10:17 < amurdaca> the user.js example create with express is this
10:17 < amurdaca>  * GET users listing.
10:17 < amurdaca>  */
10:17 < amurdaca> exports.lista = function(req, res){
10:17 < amurdaca>   res.send("respond with a resource");
10:17 < amurdaca> };
10:17 < amurdaca> exports.edit = function(req, res){
10:17 < amurdaca>   res.send("ciao");
10:17 < amurdaca> };
10:17 < amurdaca> so this is "better"
10:17 < geNAZt> until you got 50+ lines models
10:18 < geNAZt> then you have big files that are hard to read
10:19 < geNAZt> this kinds of examples are shitty, cause they often contain only one / two / three lines of model code
10:57 < amurdaca> geNAZt i'm thinking of using CompoundJS, should be eaasier to follow
10:57 < amurdaca> and to keep things organized
11:00 < humans63> !lista
11:00 < gildean> humans63: what are you trying to list
11:01 < gildean> no xdcc bots here
11:02 < humans63> !list
11:08 < amurdaca> lol
11:15 < cojack> yo
11:15 < cojack> do some one use c9.io?
11:19 < amurdaca> where do i learn about things like "next()" in express etc etc? i think these are about the app flow right?
11:19 < geNAZt> you can ask me :D
11:19 < geNAZt> next is part of the middleware pattern that is used in express
11:20 < amurdaca> so what it does then?
11:20 < geNAZt> it is used to iterate through your execution stack
11:20 < geNAZt> all the middleware that you append to express come into one stack
11:20 < amurdaca> my execution stack is......'
11:20 < geNAZt> on every request this stack gets iterated
11:20 < amurdaca> oh great
11:20 < amurdaca> so where next() is used?
11:21 < geNAZt> the next function in each middleware get from the middleware handler. you must call it to say express "i can do nothing for this request try the next one in the stack"
11:21 < amurdaca> great
11:22 < SomeoneWeird> app.use(function(req, res, next) { dosomething(); next(); });
11:22 < geNAZt> yes but it can be slow
11:28 < amurdaca> can i call next, say, in my routes for example?
11:28 < amurdaca> what this lead to?
11:28 < geNAZt> no
11:28 < amurdaca> oh
11:28 < geNAZt> routes are not in the middleware
11:28 < amurdaca> so i can only use in function defined as "middleware" with app.use
11:29 < SomeoneWeird> yes
11:29 < geNAZt> all routes are bundled in one middleware that gets appended to the express middleware
11:29 < SomeoneWeird> thats the entire point
11:29 < amurdaca> thanks guys
11:29 < amurdaca> geNAZt what you think about using an mvc framework like compoundjs?
11:30 < geNAZt> i dont like mvc in nodejs
11:30 < geNAZt> because you better think of pooling and caching things up
11:30 < geNAZt> which can lead to think out of the mvc pattern
11:30 < amurdaca> i mean for pure web site/app
11:30 < geNAZt> so i dont try to apply the mvc pattern to nodejs
11:31 < geNAZt> well express "forces" you to do some kind of MVC
11:31 < geNAZt> because expressjs is kind of "Controller"
11:31 < geNAZt> which calls Models that render Views
11:40 < shva> Wondering if this would be a good place to get help. I'm quite new to Node.js and Async in general. 
11:41 < geNAZt> yes why not :D
11:41 < shva> Trying to read a .png and save it in readable format to parse.com
11:41 < shva> Just for prototyping. (for now).
11:42 < geNAZt> yes and you want to do it async ?
11:42 < shva> I've found differrent modules. Have been testing them out.  And settled on these two. (PNGJS and SInk (from pipette module))
11:42 < shva> Actually, no.
11:42 < shva> since this is for prototyping only, I don't need it async as far as I understand it.
11:43 < shva> It would be nice if it already scaled well tough. :)
11:43 < geNAZt> so what is your problem ?
11:43 < geNAZt> you have a png and want to get it into parse.com framework ?
11:44 < shva> How do you post code? what would you be using?
11:44 < geNAZt> gist
11:44 < geNAZt> or hastebin
11:44 < shva> ok.
11:45 < shva> http://hastebin.com/xekosebote.coffee 
11:45 < shva> this is the example from the pngjs git.
11:45 < shva> I'm thinking. I should use pipette sink to capture all the data and then output it as a string to parse.com
11:45 < geNAZt> ah
11:45 < geNAZt> you want to manipulate png data
11:46 < shva> I actually want it in  a form where I can then read it easily from parse. I need the png - pixel data. 
11:46 < geNAZt> why dont you send the binary data to parse.com ?
11:46 < shva> At the moment it seems to be 0-255 (r-g-b and a)
11:47 < geNAZt> yes for each pixel
11:47 < shva> which is fine for my use (I can later transform it to -1 - 1 clamped which is what I'll be using, though would be nice to do the transformation on server side as clients are weak.)
11:47 < geNAZt> yes but why you want to transform within nodejs ?
11:47 < geNAZt> why not use gd or imagemagick ?
11:48 < shva> I haven't been able to send it as binary  - or at least I think not. It registers as undefined in the parse data view.
11:48 < shva> I've been trying to keep away from native libraries but maybe I shouldn't.
11:48 < shva> This seemed simpler.
11:49 < geNAZt> well for cpu intensive "blocking" things nodejs is not the best solution
11:49 < shva> I'd get direct control. And I don't need resizing or cropping at the moment. the file is known size in pixels.
11:49 < shva> Ok. So maybe I should do this async then
11:49 <@Nexxy> geNAZt, for "blocking" things you use a separate process
11:49 < shva> hmm..
11:49 < geNAZt> @Nexxy: i dont think pngjs does this
11:50 <@Nexxy> it's a module
11:50 < shva> I could use any module
11:50 < geNAZt> yes i know
11:50 <@Nexxy> you can run *any* module in a separate process
11:51 < geNAZt> but i think the c/c++ gdllib or imagemagick are faster then the js things
11:51 < shva> I don't need it to be fast
11:51 < shva> the png's are 440X44 pixels at the moment.
11:51 < shva> I want that in an array on the client side.
11:52 < geNAZt> with all pixeldata ?
11:52 < shva> rgb and a. yes.
11:52 < geNAZt> well that is what i call a memoryleak :D
11:52 < shva> heh
11:52 < shva> :)
11:52 < shva> That would be me.
11:52 < shva> ok. so rethink  it then?
11:53 < geNAZt> you have 4 bytes per pixel then
11:53 < shva> ok.
11:53 < geNAZt> that makes a 75 KB memory array for a 440x44 px png file
11:54 < shva> ~77,000 bytes
11:54 < shva> an image.
11:54 < geNAZt> in rgba array
11:54 < shva> ahh.
11:54 < geNAZt> and you must send it in an json or xml frame
11:54 < geNAZt> which adds overhead
11:55 < shva> yes
11:55 < shva> hmm...
11:55 < shva> when it's around 6kb in png.format.
11:55 < geNAZt> vs ~76kb rgba array
11:55 < shva> yes.
11:55 < geNAZt> + overhead from sending
11:56 < shva> wasteful.
11:56 < TheAceOfHearts> remember that png compresses it
11:56 -!- mode/#Node.js [+o isaacbw] by ChanServ
11:56 < shva> yes.
11:56 < shva> I may need to rethink my whole strategy.
11:56 < geNAZt> but i dont get the point why you need to do the rgba array oO
11:56 < shva> ok. here's why.
11:56 < shva> I've written a prototype for a mobile game.
11:56 < shva> It uses these small png's for level design.
11:57 < shva> Making level design very quick and effectives. 
11:57 < shva> These png's are read on the client at the moment into the level array.
11:57 < geNAZt> yes
11:58 < shva> I thought I'd save client (mobile,etc) caluclations and just download the levels as arrays from parse.com
11:58 < geNAZt> which causes huge amount of traffic
11:58 < geNAZt> which costs cpu to receive at client
11:58 < shva> I'm building a backend that will allow users to upload their levels to a level datastore that could be shared by the clients
11:58 < thealphanerd> http://auto.ma.gic.jit.su/
11:58 < thealphanerd> LD
11:58 < thealphanerd> ;D
11:58 < geNAZt> + the amount of power you need to hold the connection open
11:58 < geNAZt> + the amount of costs a consumer has to traffic
11:58 < shva> i c what you mean.
11:59 < shva> I should be able to store the png on parse.com and download that. being 6kb each.
11:59 < TheAceOfHearts> if you don't care about internet explorer users, you should use WebP, cuz it's small
11:59 < TheAceOfHearts> unless you care about it being lossless 
11:59 < geNAZt> well an increase from 6kb to 76kb is not what you need :D
11:59 < geNAZt> it is a killer in the mobile things
11:59 < geNAZt> yes that would be the best
12:00 < shva> I haven't tested out the different compression methods and dithering, etc. but it should be fine. (I'm planning on having a set of recommended file attributes to make it more or less even)
12:01 < shva> (looking into webp)
12:02 < TheAceOfHearts> it's cool, if you don't care about iE users, which I don't 
12:02 < TheAceOfHearts> if you're building this to be compatible with everyone, you'll have to worry about em, though
12:02 < geNAZt> the use case are mobile things
12:02 <@isaacbw> winphone7
12:02 < geNAZt> parse.com seem to use nativ apps
12:02 < geNAZt> not mobileviews
12:02 <@isaacbw> oh
12:02 < shva> yes. not supported on the engine I'm using to develop the phone stuff.
12:03 < TheAceOfHearts> WP7 doesn't have support as well 
12:03 < TheAceOfHearts> ah
12:03 <@isaacbw> hah
12:03 < shva> and the 25% is not what's going to break me.
12:03 <@isaacbw> 25% is a big number
12:03 < TheAceOfHearts> it adds up
12:03 < shva> Thanks for all the help. I can see I need to go back the client side optimization and rethinking before I start moving chunks of data around.
12:04 < geNAZt> 25% is good if it works for all
12:04 <@isaacbw> oh, 25% bigger?
12:04 < shva> I probably shouldn't be using that big an array on the client side either. That's what I'm thinking.
12:04 < geNAZt> smaller
12:04 <@isaacbw> mm
12:04 < shva> yes
12:04 <@isaacbw> mobile stuff is no fun
12:05 < TheAceOfHearts> yeah
12:05 < TheAceOfHearts> mobile stuff is pretty fun, sometimes
12:05 < geNAZt> till you run into performance hell :D
12:05 < shva> :)
12:05 < TheAceOfHearts> yeah
12:05 < TheAceOfHearts> but luckily I haven't had to make anything too complex
12:06 < geNAZt> well it starts if you want to use javascript in webviews
12:07 < shva> Thanks again, geNAZt & all
12:07 < geNAZt> or want to play a h264 stream in native players ( streamed )
12:07 < geNAZt> its a pure hell
12:07 < TheAceOfHearts> I've used PhoneGap, but I haven't done anything complex, just really simple stuff lol
12:07 < TheAceOfHearts> I'm actually gonna be doing something pretty soon
12:08 < geNAZt> even the compability among mobile phones
12:08 < geNAZt> it is even worser then in browsers
12:08 < geNAZt> which is hard to top :D
12:08 < TheAceOfHearts> lmao
12:08 <@isaacbw> working on android where every phone has different specs and even input hardware can drive you insane
12:08 <@isaacbw> I'm glad those nubs aren't really around anymore
12:08 < geNAZt> try to play a h264 stream on android, wp7 and an iphone
12:09 < geNAZt> you will need 3 different streaming methods
12:09 < geNAZt> cause they all have their own
12:09 < TheAceOfHearts> simple. I support my phone: Nexus 4, running 4.2. anything else is unsupported lol
12:09 < TheAceOfHearts> that's fucked
12:09 <@isaacbw> heh
12:09 < geNAZt> :D:D
12:09 < TheAceOfHearts> we need to standardize that 
12:09 < geNAZt> simple and easy 
12:09 <@isaacbw> and the emulator is pretty much unusable
12:09 < TheAceOfHearts> yeah, the Android emulator is quite horrid...
12:09 < geNAZt> i cant tell you how much shit i give for mobile rom emulators
12:10 < geNAZt> they are all broken
12:10 < TheAceOfHearts> I've heard the iPhone one is pretty good
12:10 < geNAZt> till you have an iphone
12:10 < TheAceOfHearts> how so? 
12:10 < geNAZt> and thing work completly different on the device then in the emulator
12:10 < TheAceOfHearts> ah
12:10 < geNAZt> and you think "why"
12:10 < TheAceOfHearts> lol
12:11 < geNAZt> wp7 and android emulators are sllllloooooooowwwwwwwwwww
12:11 < CoverSlide> isaacbw: when did you get ops?
12:11 < geNAZt> yesterday ?
12:12 < SomeoneWeird> ya
12:12 <@isaacbw> isaac/s was tired of being pinged
12:12 < geNAZt> :D
12:12 <@isaacbw> lol
12:12 < CoverSlide> haha
12:13 < harbhub> guys
12:13 < harbhub> do i need to use SSL?
12:13 < geNAZt> yes
12:13 < TheAceOfHearts> yes
12:13 < geNAZt> in some cases yes
12:13 < harbhub> how do i implement that?
12:13 <@isaacbw> nginx reverse proxy
12:13 < eighty4> isaacbw: you still have me! I'm n00b!
12:13 <@isaacbw> :O
12:13 < harbhub> nginx reverse proxy?
12:14 < geNAZt> is the https implementation of nodejs so ugly ?
12:14 < eighty4> I'd argue that you don't need SSL on everything.
12:14 <@isaacbw> you can put something in front of node that handles all the ssl, so you can still use http in node and not https
12:14 < torvalamo> ok, i need your collective memory
12:14 < torvalamo> there was a blog post a few years ago
12:14 < torvalamo> about median/average/peak benchmarks and how using average benchmarks was stupid
12:14 < torvalamo> giev
12:14 < harbhub> isaacbw how?
12:15 < harbhub> how do i make my http handle ssl?
12:15 < harbhub> i have my function listening to requests
12:15 < harbhub> it is an http.createServer
12:15 <@isaacbw> http://www.cyberciti.biz/tips/using-nginx-as-reverse-proxy.html
12:15 < harbhub> how would i make it listen to ssl
12:15 < geNAZt> torvalamo: i know it i saw the talk
12:15 <@isaacbw> you would have to use the https module
12:16 <@isaacbw> but I'm saying you can just use the http module and have an external application do https and convert it into http for your app
12:16 < torvalamo> geNAZt: I'll wait :p
12:16 < harbhub> why don't i use the https module, then
12:16 < torvalamo> i can't even remember names
12:16 <@isaacbw> harbhub, okay, what don't you understand about what I'm saying
12:16 < geNAZt> torvalamo: https://www.youtube.com/watch?v=AH7kw8sKefg
12:16 < CoverSlide> i say use haproxy for ssl reverse proxy, so you don't have to worry about  when websockets don't work on nginx
12:17 < geNAZt> that was the one i remember
12:17 < harbhub> haproxy?
12:17 <@isaacbw> websockets :(
12:17 < TheAceOfHearts> harbhub: what are you trying to do? you might not benefit from using SSL
12:18 < harbhub> i want to send data securely
12:18 < TheAceOfHearts> especially if you're starting out, unless it's for some important reason 
12:18 < harbhub> i want to send the username and password securely
12:18 < harbhub> user types in password, i encrypt it, i send it *securely over the ssl*
12:18 <@isaacbw> oh man, how do you eat meat as a priest? desecration of a corpse is a sin
12:18 < harbhub> then i handle it on the server
12:18 <@isaacbw> (dungeon crawl)
12:18 < torvalamo> geNAZt: nono, it was a blog post
12:19 < torvalamo> some dude went all apeshit
12:19 < CoverSlide> if you just want to get up and running with ssl, you can do it with node easily enough
12:19 <@isaacbw> if you are doing logins, you really ought to use ssl
12:19 < geNAZt> i dont read blog posts
12:19 < harbhub> i am doing log ins
12:19 < harbhub> that is why i need ssl
12:19 <@isaacbw> but I'm saying you can just plug it in after writing your app with http
12:19 <@isaacbw> I feel like you aren't reading what I'm writing
12:19 < harbhub> once the user is logged in at the correct ip address
12:19 <@isaacbw> oy, what are you doing with ip addresses
12:19 < harbhub> isaacbw
12:19 < harbhub> what is proxy?
12:19 < CoverSlide> what you want to do is instead of putting the callback in http.createServer, you use a named function declaration, and use that as the callback for both your HTTPServer and HTTPSServer
12:20 <@isaacbw> http://en.wikipedia.org/wiki/Reverse_proxy
12:20 < CoverSlide> wikipedia ir
12:20 < CoverSlide> *it
12:20 < harbhub> can i use node as reverse proxy?
12:20 < CoverSlide> you can
12:20 < CoverSlide> there are modules that do that too
12:20 < harbhub> hmm
12:20 < CoverSlide> bouncy, node-http-proxy
12:20 < harbhub> reverse proxy looks awesome
12:21 < harbhub> it is a blockade between my server and the internet
12:21 < harbhub> i want one
12:21 <@isaacbw> lol
12:21 <@isaacbw> node http proxy is pretty nice actually
12:21 < harbhub> do i need two servers?
12:21 <@isaacbw> you can put logic in there
12:21 <@isaacbw> no, it can all be on the same machine
12:21 <@isaacbw> and you would have a firewall so that only the reverse proxy is publicly visible
12:21 < CoverSlide> you can put logic in bouncy too
12:22 < harbhub> hmm
12:22 < harbhub> so my one server can be it's own reverse proxy?
12:22 < CoverSlide> yes
12:22 < harbhub> ok
12:22 < harbhub> how do i set it up?
12:22 < harbhub> because i am new to proxy
12:22 < harbhub> my goal is to securely log in a user
12:23 < CoverSlide> you have the proxy software listen on the ports you want, like 80  and 443 (for https)
12:23 < harbhub> ok
12:23 < harbhub> what does the proxy software do?
12:23 < harbhub> does it really hide stuff?
12:23 < CoverSlide> it doesn't really hide anything
12:23 < harbhub> meaning, is this something that can be bypassed
12:24 < Sonderblade> anyone know if handlebars support macros?
12:24 < CoverSlide> but you hide your app so only your reverse proxy can see it
12:24 <@isaacbw>  firewall
12:24 < CoverSlide> like you have it listen to port 8000 on addres 127.0.0.1
12:24 < harbhub> hmm
12:24 < harbhub> so a proxy listens on portA
12:24 < harbhub> and the http server listens on portB
12:25 < harbhub> is that the idea?
12:25 < CoverSlide> and you set your proxy to forward all requests to port 8000 on 127.0.0.1
12:25 < CoverSlide> or whatever port you choose
12:25 < harbhub> hmm
12:25 < geNAZt> the idea behind it is to scale a application really fast
12:25 < harbhub> so people send stuff to port 5000
12:25 <@isaacbw> and port 8000 is hidden from the outside world by a firewall
12:25 < CoverSlide> right
12:25 < geNAZt> and that the application is safe from direct tcp attacks
12:25 < harbhub> and then port 5000 sends stuff to port 7000
12:25 < CoverSlide> or by simple tcp/ip rules
12:25 < harbhub> so people only know that they sent to port 5000
12:25 <@isaacbw> mm
12:25 <@isaacbw> yea
12:26 < harbhub> and do not know that 7000 exists?
12:26 < geNAZt> yes
12:26 < harbhub> sounds cool
12:26 < harbhub> anything else to it?
12:26 < CoverSlide> not really
12:26 < harbhub> what is a direct tcp attack?
12:26 < CoverSlide> although you can filter by domains
12:26 < geNAZt> DoS is one
12:26 < geNAZt> DDoS is another
12:26 <@isaacbw> the reverse proxy can also act as a load balancer
12:26 < CoverSlide> SYN flood?
12:26 < geNAZt> SYN flood is another
12:26 < geNAZt> :D
12:27 < harbhub> what is that stuff?
12:27 < CoverSlide> there's Slowloris, but that's more a HTTP attack
12:27 < geNAZt> sending millions of packages or connections to a tcp ort
12:27 < harbhub> what is tcp
12:27 < harbhub> oh
12:27 < CoverSlide> wikipedia it
12:27 < harbhub> ok
12:27 < geNAZt> the underlying protocol where http is built ontop
12:27 <@isaacbw> :P
12:28 <@isaacbw> tcp is the internet
12:28 < harbhub> tcp streams octets
12:28 < harbhub> from computer to computer
12:28 < geNAZt> "most" of the internet :D
12:28 < harbhub> i.e. the internet ok
12:28 < geNAZt> UDP isnt that small :D
12:28 <@isaacbw> tcp is the world wide web at least
12:28 < harbhub> so a tcp attack is an over-the-internet attack?
12:28 < harbhub> over the web attack?
12:28 < CoverSlide> yes
12:28 < geNAZt> yes
12:28 < harbhub> ok
12:29 < geNAZt> a attacker tries to shut down your application by flooding it with packages ( DDoS, DoS)
12:29 < geNAZt> or by creating thousand of connections that dont SYN ( sync up )
12:29 < geNAZt> and the server must keep these connections till they ACK
12:29 < geNAZt> so its easy to overflow them
12:30 < CoverSlide> I haven't seen any documentation about how well node stands up to these attacks
12:30 < geNAZt> was a bug in apache where you could easliy shut down every apache webserver for about 2? years ago
12:31 <@isaacbw> don't do anything to get on 4chan's bad side
12:31 < geNAZt> CoverSlide: nodejs has a "connection timeout" if the ACK doesnt come up after 2 Minutes
12:31 <@isaacbw> most hackers might give up after a while
12:31 < harbhub> how does the proxy prevent the attack?
12:31 < geNAZt> but a proxy _can_ protect you from this
12:31 < harbhub> won't the packets get sent from the proxy to the http server?
12:32 < geNAZt> it shuts down sockets that dont ACK after a timeout
12:32 < harbhub> how would my proxy protect me?  what do i do?
12:32 < CoverSlide> yeah but it can set rules like timeouts
12:32 < geNAZt> or rejects ips that flood connections
12:32 < CoverSlide> so you don't have to handle that in your app
12:32 < CoverSlide> that too
12:32 < harbhub> http-proxy
12:32 < harbhub> how would i set that up to be useful?
12:32 < CoverSlide> that's why it's probably best to use some dedicated proxy software
12:33 < geNAZt> outside the nodejs http module. yes
12:33 <@isaacbw> proxy is a like a doorman
12:33 < geNAZt> "du kommst hier net rein" :D
12:33 < harbhub> i get what it is
12:33 < CoverSlide> doorman, nice module name
12:33 < harbhub> would be a nice module lol
12:33 < CoverSlide> not taken hmm
12:33 <@isaacbw> oh man it is
12:34 < harbhub> make it
12:34 < geNAZt> i dont know if nodejs has a flood protection
12:34 < geNAZt> or it is something you must be aware of
12:34 <@isaacbw> as fast as v8 is, there are some things best left to c/c++
12:34 < CoverSlide> by default probably not
12:35 < harbhub> does the proxy security and ssl security affect my application?
12:35 < geNAZt> "Take down all the nodejs Webservers" :D
12:35 < harbhub> meaning the logic behind my app, will i have to change stuff?
12:35 < geNAZt> no not with a proxy
12:35 <@Nexxy> ITC: http://i.qkme.me/3sxfpo.jpg
12:35 < harbhub> ok
12:35 < harbhub> so i can focus on the app for now
12:35 < harbhub> and add the security after?
12:36 < geNAZt> @Nexxy: best :D
12:36 < CoverSlide> that's my recommendation
12:36 < harbhub> i just want to know for now how to securely send the username and password to the server
12:36 <@isaacbw> you should be smart about sessions
12:36 < harbhub> i am making a game
12:36 < harbhub> so i need to log the person in
12:36 < CoverSlide> not until you hit 1000 users / day
12:36 <@isaacbw> a game like travian?
12:36 < harbhub> i need to be smart about sessions
12:36 < geNAZt> a game with websockets or something like that ?
12:36 < harbhub> a game like solitaire but multiplayer
12:36 < CoverSlide> travion martin?
12:36 < harbhub> yes, socketio
12:37 < harbhub> so websockets with fallbacks
12:37 <@isaacbw> "a game like solitaire but multiplayer"
12:37 < geNAZt> a proxy will break websockets
12:37 < harbhub> a card game
12:37 < harbhub> real time strategy
12:37 < CoverSlide> not all proxies
12:37 < geNAZt> well the most proxies does that
12:37 < CoverSlide> haproxy won't
12:37 < geNAZt> sure ?
12:37 < geNAZt> i havent tried haproxy since 2 years
12:37 < CoverSlide> pretty sure
12:37 < harbhub> so i have this rts game
12:37 <@isaacbw> nginx will work with websockets eventually
12:37 < geNAZt> i have switched to varnish
12:38 < harbhub> how do i keep the users safe?
12:38 < geNAZt> use ssl, use a ssl proxy, use a protected database
12:38 < harbhub> i was planning on storing the game state using redis on the server
12:38 < geNAZt> that should be safe enough
12:38 < eighty4> *wheee* I get to do require('fs'); !
12:38 < harbhub> what is a protected database?
12:38 <@isaacbw> don't store plaintext passwords
12:38 < harbhub> what do i store?
12:38 < harbhub> bcrypt?
12:39 < geNAZt> a database that is closed into your network
12:39 < CoverSlide> http://blog.exceliance.fr/2012/07/04/haproxy-and-varnish-comparison/
12:39 < geNAZt> and uses auth
12:39 < harbhub> redis uses auth
12:39 < harbhub> nodejitsu server
12:39 < geNAZt> and stores passwords as salted hashes
12:39 < geNAZt> and so on
12:39 <@isaacbw> 1-hash
12:39 <@isaacbw> salted
12:39 < CoverSlide> I've been meaning to try out varnish
12:39 < harbhub> what is 1 hash
12:39 < harbhub> and what is salted
12:39 < geNAZt> well i use varnish also as a cache
12:39 <@isaacbw> er, 1 way
12:39 < CoverSlide> 1-way hash
12:39 < harbhub> to me hash has two meanings
12:39 < harbhub> 1way hash okay
12:39 < CoverSlide> to me it has 3
12:39 <@isaacbw> so even if someone gets into your server, they can't do anything with it
12:39  * CoverSlide is baked
12:40 < harbhub> right
12:40 < harbhub> so
12:40 < harbhub> i can hash all the data
12:40 < harbhub> so if someone steals the db they can't do anything with it
12:40 < geNAZt> well only the password would be enough
12:40 < harbhub> i can ssl transfer the data to and from the server and client
12:40 < harbhub> right just the pw
12:40 < harbhub> i will use bcrypt?
12:40 < harbhub> or sha3?
12:40 <@Nexxy> whirlpool + ripemd160
12:40 <@Nexxy> it's the only way
12:41 < harbhub> ok
12:41 < harbhub> can i get that for javascript?
12:41 < CoverSlide> you should use md4
12:41 < geNAZt> i use sha512
12:41 < geNAZt> its safe enough :D
12:41 < harbhub> how would you crack sha512?
12:41 < harbhub> what would be required?
12:41 < geNAZt> i think sha512 can only be recalculated
12:41 < CoverSlide> a lot of cpu power and patience
12:42 < geNAZt> so you need to bruteforce it
12:43 < geNAZt> CoverSlide: nice blog post about haproxy and varnish
12:43 < geNAZt> bookmarked it :D
12:43 < harbhub> https://github.com/scintill/crypto-js
12:43 < harbhub> is this a good lib?
12:43 < harbhub> so by bruteforce you mean
12:43 < harbhub> you would need to steal the db
12:43 < harbhub> or else my proxy stops bruteforce
12:44 < harbhub> and once you steal the db you have to brute force to crack the pw
12:44 < geNAZt> yes thats the only way
12:44 < geNAZt> you need the has
12:44 < geNAZt> h
12:44 < harbhub> that sucks for anyone trying to hack me
12:44 < CoverSlide> there's a ripemd-320
12:44 <@isaacbw> there are also dictionary attacks
12:44 <@isaacbw> so salt it
12:44 < geNAZt> yes if user choose 1234 as password it is still very easy to crack it :D
12:45 < CoverSlide> http://www.onlinehashcrack.com/
12:45 < SomeoneWeird> use a salt
12:45 < SomeoneWeird> protects from 90% of attacks
12:45 < geNAZt> wow
12:45 < SomeoneWeird> and bcrypt
12:45 < geNAZt> a hash storing database
12:45 < geNAZt> :D
12:45 < gildean> also use a expensive hashing algo, like bcrypt
12:45 < CoverSlide> yeah there's a few of them out there
12:46 < harbhub> i can't use bcrypt
12:46 <@Nexxy> also, you should use bcrypt
12:46 < harbhub> my windows machine is old
12:46 <@Nexxy> don't forget
12:46 <@Nexxy> ... bcrypt
12:46 <@isaacbw> hehe
12:46 < harbhub> i want to use bcrypt
12:46 < harbhub> but i can't get the service pack 1 for vista
12:46 < harbhub> my comp bugs lol
12:46 < SomeoneWeird> vista...?
12:46  * SomeoneWeird facedesks
12:47 <@isaacbw> lol
12:47 < geNAZt> omg a xp upgraded kernel 
12:47 < TheAceOfHearts> are you by any chance a college student? if you are, you have access to Sparkfun, and you can get Windows 7 (or 8, if you're into it) for free
12:47 < geNAZt> LOL
12:47 < CoverSlide> https://npmjs.org/package/bcrypt-nodejs
12:47 < SomeoneWeird> TheAceOfHearts, dreamspark?
12:47 < TheAceOfHearts> it's what used to be called MSDNAA 
12:48 < TheAceOfHearts> now it's Dreamspark, which gives college students lots of free MS software so they'll be hooked 
12:48 < SomeoneWeird> it's dreamspark now
12:48 < SomeoneWeird> ya
12:48 < CoverSlide> sparkfun?
12:48 < TheAceOfHearts> oh
12:48 < harbhub> i graduated
12:48 < TheAceOfHearts> sorry, my brain derped
12:48 < CoverSlide> http://www.sparkfun.com/
12:48 < harbhub> this past december
12:48 < SomeoneWeird> CoverSlide, not that
12:48 < TheAceOfHearts> it's Dreamspark, sorry
12:48 < SomeoneWeird> https://www.dreamspark.com
12:48 < TheAceOfHearts> I've been dealing a lot with MCU's these past weeks, so I just had em in my mind, heh
12:48 < squeakytoy> anyone can recommend a good then-promise framework?
12:49 < SomeoneWeird> i can recommend you don't use promises >.>
12:49 < CoverSlide> squeakytoy: q ?
12:49 < squeakytoy> q?
12:49 < CoverSlide> q!
12:49 < TheAceOfHearts> SomeoneWeird: why? Promises are cool
12:49 < SomeoneWeird> q?!
12:49 < squeakytoy> a promise framework for node.js, any suggestions?
12:49 < CoverSlide> q!
12:49 < geNAZt> Q!!!#
12:49 < TheAceOfHearts> https://github.com/kriskowal/q
12:49 < SomeoneWeird> squeakytoy, q
12:50 < SomeoneWeird> lol
12:50 < medikoo> squeakytoy: give also deferred a try: https://github.com/medikoo/deferred
12:50 < squeakytoy> oh, the frameowkr is called "q"?
12:50 < SomeoneWeird> yes
12:50 < geNAZt> yes
12:50 < SomeoneWeird> lol
12:50 < CoverSlide> promises are cool, i just haven't cared to use them in anything
12:50 < CoverSlide> i like the node way for things for now
12:50 < TheAceOfHearts> I feel guilty when I write a pyramid of code
12:50 < SomeoneWeird> then don't
12:50 < SomeoneWeird> use callbacks properly
12:50 < CoverSlide> there seems to be a big promises cult
12:50 < SomeoneWeird> CoverSlide, yeah same
12:51 < CoverSlide> reminds me of scientology
12:51 < TheAceOfHearts> I'm trying to slowly learn D: 
12:51 < TheAceOfHearts> but I've done some terrible terrible things with node
12:51 < CoverSlide> I'm a Promises/B Operating Thetan Level III!
12:51 < harbhub> are websockets secure?
12:52 < geNAZt> yes
12:52 < CoverSlide> harbhub: via ssl sure
12:52 < harbhub> ok
13:03 < harbhub> http://code.google.com/p/javascript-bcrypt/
13:03 < harbhub> is this what i should use for bcrypt?
13:03 <@isaacbw> you should do it server-side
13:05 < harbhub> i want to do it both
13:05 < CoverSlide> possibly look at https://github.com/shaneGirish/bcrypt-nodejs
13:05 < harbhub> hash on the client
13:05 < harbhub> then hash the hash on the server
13:05 < harbhub> so the server never sees the true password
13:05 < harbhub> it only hashes the hash
13:05 <@isaacbw> that's silly
13:05 < CoverSlide> yes incredibly silly
13:07 < amurdaca> gonna code my blog entirely in express using REST api + backbone :D
13:07 < CoverSlide> amurdaca: stop talking, start doing
13:07 < CoverSlide> stop yacking, start hacking
13:07 < amurdaca> yup i just needed to sort things out becouse i'm really new
13:07 < SomeoneWeird> lol
13:08 < amurdaca> i'll come later with lots of questions lmao
13:10 < CoverSlide> not that i'm recommmending this, but one approach i've seen is to encode via md5 on the client side, and use that md5 string as a base for a stronger hash on the server
13:10 < CoverSlide> but if you use ssl, there shouldn't be anything to worry about
13:14 < LogicOpinion> hello folks, is ther a way to initiate like 100, 200, 300 or more users are connected my app ?
13:16 < CoverSlide> LogicOpinion: Syntax Error
13:16 < LogicOpinion> CoverSlide, sorry ?
13:17 < CoverSlide> I cannot parse your question as standard English
13:17 < CoverSlide> to initiate ... users are connected ?
13:18 <@isaacbw> i.e. your question makes no sense
13:18 < CoverSlide> you want to create hundreds of users?
13:19 < CoverSlide> or you want to monitor the user count?
13:19 < CoverSlide> i can't tell what you want
13:19 < LogicOpinion> yes, i want to create 100 or more users
13:20 <@isaacbw> what's your question
13:20 < mscdex> LogicOpinion: apache bench?
13:20 < LogicOpinion> nginx
13:20 < mscdex> no, i mean use `ab` to load test
13:21 < mscdex> if that's what you're after
13:21 < LogicOpinion> ab?
13:21 < LogicOpinion> oh
13:21 < mscdex> apache bench :-)
13:22 < LogicOpinion> i have posted my code here several days ago.. and i was told that there was a memory leak in my app.. where i have setinterval function to loop process
13:23 < CoverSlide> can you use ab to send POST/PUT payloads?
13:23 <@isaacbw> I've been trying to write an email for the last twenty minutes and I only have two sentences
13:23 < mscdex> CoverSlide: i'm pretty sure
13:24 < LogicOpinion> i could not detect any leak, so later i tried to find problem step by step and only left socket.io code on connect.. on disconect but after 20 minutes in production socket.io becomes unreachable or takes to long to load
13:25 < `3rdEden> How can you detect if the server closed the connection or if a user closed the connection using .end()/destroy()?
13:26 < CoverSlide> isaacbw: i hear chatting about it on IRC speeds up the rpocess
13:27 < CoverSlide> *process
13:27 <@isaacbw> I do what I can
13:27 <@isaacbw> at a certain point I just have to click the send button as fast as I can before I second guess the wording again
13:28 < gildean> LogicOpinion: setInterval tends to be a problem when left running continuously for longer periods of time, it's usually better to use a recursive setTimeout on those cases
13:29 < mscdex> LogicOpinion: are you create a new interval for each connection and not clearing them?
13:30 < LogicOpinion> i can show you a piece of code.. no it's running continously for as longer period..
13:32 < LogicOpinion> no i do not create new interval for new connection!
13:37 < LogicOpinion> but even without setinterval my application stops working so, first i think its socket.io problem
13:38 <@isaacbw> when re-engineering something, that time where you break pretty much all your code to when you get it working again is pretty scary
13:38 <@isaacbw> it's like
13:38 < gildean> isaacbw: isn't that the fun part?
13:38 <@isaacbw> something similar and equally scary but unrelated to software development
13:39 < gildean> especially if you're doing it while in production, like a boss
13:39 <@isaacbw> oh god, 1 sec
13:39 < Deathspike> Heyya. Could anyone point me to documentation on how to pipe a stream into a Buffer object?
13:39 -!- mode/#Node.js [+o isaacbw] by ChanServ
13:39 <@isaacbw> I accidentally put #node.js into a new tab
13:39 <@isaacbw> gildean, I like it when I can write a component and then just use it :(
13:40 <@isaacbw> but that's harder to do with UI development
13:41 <@isaacbw> I wish I had someone I could yell at to work on abstraction layers so I don't have to
13:41 < gildean> Deathspike: did you check the api docs for streams? it pretty much has that exact thing as an example
13:41 < LogicOpinion> does ab will stay connected to socket.io or it just sends request and disconnects?
13:41 < gildean> LogicOpinion: i don't think ab does websockets
13:41 <@isaacbw> is anyone here talented, self-driven, at the top of their field and willing to work for minimum wage
13:42 < Deathspike> gildean: I did check. It seems that all examples are stream => stream and none seem to work against a Buffer.
13:42 < geNAZt> @isaacbw: on which project ?
13:42 < LogicOpinion> so, that option does not help me to create 100 or more users connected to socket.io.. any other options?
13:42 < amurdaca> what's the difference between node-mongodb-native and mongoose??? i've seen a project that uses both
13:42 < gildean> Deathspike: iirc in the example the stream is written to a buffer in between
13:42 <@isaacbw> geNAZt, it isn't announced yet
13:42 <@isaacbw> http://cuttlefi.sh/
13:42 < geNAZt> can you pm me ?
13:42 < gildean> amurdaca: mongoose uses mongodb-native as the base driver to the db
13:42 <@isaacbw> I'm not really looking to hire anyone for minimum wage
13:43 <@isaacbw> that would be offensive
13:43 < amurdaca> so if i install mongoose it comes with mongodb-native?
13:43 < Deathspike> gildean: Hmm there is no such example. Would you have somewhere else I can look?
13:43 < Deathspike> amurdaca: Yes.
13:43 < geNAZt> well not for money
13:43 < geNAZt> :D
13:43 < amurdaca> then why this -> https://github.com/addyosmani/backbone-boilerplates/tree/master/option2
13:43 < amurdaca> uses both
13:43 < amurdaca> in the same project :/
13:44 < gildean> Deathspike: gmm, i must've been thinking about something else then
13:44 < Deathspike> amurdaca: app.just only references mongoose..
13:45 < amurdaca> but install.sh run npm install mongdb --native
13:46 <@isaacbw> actually, I made this a little while ago to help me develop and it is actually useful to me, but maybe it interests someone else https://github.com/isaacbwagner/node-nelly
13:46 <@isaacbw> I'm up for pull requests
13:46 < Deathspike> gildean: I basically want to capture the stdout of a process and throw it into a Buffer without touching file disk or anything. Do you happen to know of anything of the sort?
13:46 <@isaacbw> I don't really have any vision for it
13:46 <@isaacbw> I've done everything I want to already. Ignore the README
13:46 <@isaacbw> it's like a more usable repl
13:47 <@isaacbw> oh wait, I do have vision for it. All that stuff in the readme
13:47 < cloudbender> Deathspike maybe there's a way to use a stream object for what you need.
13:47 <@isaacbw> the neat thing is the startup files
13:48 < Deathspike> cloudbender: I want to store the binary in mongodb and a stream cannot do that via mongoose.
13:48 < cloudbender> ok
13:48 < gildean> Deathspike: at the simplest it's just listening for 'data' events on the stream and writing then that data to a buffer of some sorts (doesn't necessarily have to be a Buffer-object per se)
13:51 < Sendoushi> hey guys. starting with node.js. no experience with js frameworks but i have some with javascript, php, as3...
13:51 < Sendoushi> anyway... any good tutorial i should try?
13:52 < valterguy> Sendoushi: depends on what you want to do.
13:52 < Sendoushi> isn't there a basic one where I could understand the why and the usage of node for example?
13:52 < Sendoushi> maybe that would be best
13:52 < eighty4> I just got plugins working for my irc bot! *sweeet*
13:52 < Sendoushi> to be fair i don't really know what i want from node.js or js frameworks
13:53 < Sendoushi> for now just in need of learning them in general
13:53 < valterguy> if you don't know what you want to write/build, then nobody can help you.
13:53 < gildean> Sendoushi: node is not a framework but a platform of sorts
13:53 < Sendoushi> hm
13:53 < eighty4> Sendoushi: build a small irc bot!
13:53 < gildean> Sendoushi: people usually recommend watching a talk from ryah, even if it's getting a bit old now
13:54 < gaf> hi, is it possible to get a copy of the bot running here as a js REPL?
13:54 < valterguy> Sendoushi: just start building something and look at the docs to find how to do what you want
13:54 <@isaacbw> node is a v8 host and a set of standard libraries
13:54 < Sendoushi> gildean: which talk?
13:54 < valterguy> Sendoushi: http://nodejs.org/api/
13:54 < gildean> Sendoushi: http://www.youtube.com/watch?v=jo_B4LTHi3I
13:54 < Sendoushi> valterguy: i need an idea to do such eehehe
13:54 < Sendoushi> thanks gildean
13:54 < Sendoushi> i kind of have one
13:54 < Deathspike> gildean: Aha! Thanks for the tip, got it working just fine now.
13:54 < Sendoushi> just to learn 
13:55 < Sendoushi> do some kind of a clone of wordpress
13:55 < valterguy> go for it!
13:56 < gildean> np
14:05 < squeakytoy> where do you guys host your node.js web servers/sites?
14:05 < TheAceOfHearts> I've deployed with appfog, they're pretty easy, and their free tier has met my needs
14:06 < TheAceOfHearts> I've also used EC2
14:09 < Deathspike> Is there an easy way to check if node is running in production mode (NODE_ENV=production)?
14:10 < limes102> Hey. I'm new to Node. I'm defining models using GLOBAL.User = function(){}; ... Is this okay?
14:12 < squeakytoy> not really
14:12 < squeakytoy> why do you want global variables?
14:13 < limes102> So I should use require whenever I need it?
14:13 < squeakytoy> Yea, thats how modules work
14:13 <@isaacbw> globals aren't shared between modules
14:13 <@isaacbw> fyi
14:14 < limes102> Hmm... Okay :P I will have a play :D
14:14 < limes102> Thanks
14:14 < squeakytoy> limes102, you shoudl totally structure up your app so you use modules, it will organize your software solution waay better
14:17 < Deathspike> limes102: If you use mongoose, you can pass the mongoose instance to each included model and then access the existing models from anywhere using mongoose.Model('Name'). This works very nicely.
14:18 < limes102> I am using RethinkDB. I think I have it working how it is supposed to be now :D
14:18 < limes102> https://gist.github.com/Limes102/1c716e2c4e3d9398f771
14:19 < limes102> Does that look okay? At the top of files where I need to use the model I do var User = require('../models/User.js'); and it works just as it did when I used GLOBAL.User = function
14:20 <@isaacbw> that's one way, yea
14:20 <@isaacbw> and it's not a bad way
14:21 < limes102> How to you prefer to do it?
14:21 <@isaacbw> I don't really use models because I'm a rebel
14:22 < limes102> Oh okay :P I'll stick to this way. Seems to work nicely. Thanks very much for your help
14:22 <@isaacbw> sure thing. Don't worry about what other people do. Do what you like doing
14:22 <@isaacbw> and if it's a terrible way to do it, you'll find out soon enough
14:23 < limes102> Haha that's good advice
14:23 < limes102> I've been using PHP for years but I was really attracted to how Node is so asynchronous 
14:24 <@isaacbw> yea, it's a great pattern
14:24 <@isaacbw> at some point you should look at promises. A lot of people don't like them, but they are a different way of handling async data requests and can be very helpful
14:24 < torvalamo> a better way is to use events
14:24 < torvalamo> promises are just events, really
14:25 < torvalamo> one-time events
14:25 <@isaacbw> I think you should only use promises if you are thinking of them as data
14:26 < limes102> Ahh that looks interesting. It looks similar to the way events are handled in Obj-C
14:26 <@isaacbw> my rule is if I'm not passing promises around, I should just use callbacks or events
14:26 < MI6> joyent/node: Ben Noordhuis master * fe10335 : typed arrays: make DataView throw on non-ArrayBuffer  Make the DataView c (+3 more commits) - http://git.io/LzZX7g
14:27 <@isaacbw> at least I would like that to be a rule
14:27 <@isaacbw> I usually end up abusing promises because they make me so happy
14:27 < torvalamo> use as many libraries as possible, that way you won't have so much callback nesting in your own code
14:27 < torvalamo> a few levels isn't a problem
14:28 < torvalamo> besides, the nesting itself isn't a problem, it's how much you put inside the nesting
14:28 < limes102> Yeah I really hate the look of nested anonymous functions. Quite difficult to read 
14:28 < torvalamo> as with everything it's not a yes or no question
14:28 < spion> I'd like to chime in and say that promises may one day allow us to write async code like this: http://taskjs.org/
14:28 < spion> :P
14:29 < torvalamo> if i had to make promises for every fs.read, i'd kill someone
14:29 < spion> and to encourage everyone that likes that style to go star the "implement generators" v8 issue at http://code.google.com/p/v8/issues/detail?id=2355
14:29 <@isaacbw> well, you would wrap it with a promise which is re-usable
14:29 <@isaacbw> reusable
14:30 <@isaacbw> writing promise creators should be a one time thing and then you just use them
14:30 < spion> hmm, someone should write a "promisifyer" that works like https://github.com/goodeggs/fibrous
14:31 < spion> they add Object.prototype.future and Function.prototype.future
14:31 <@isaacbw> you could have something like var userConfig = readFilePromise('config.json') and then pass around userConfig as if it contains the config data
14:31 <@isaacbw> and you only need to do userConfig.then() when you actually need to use the data
14:31 < spion> it enables you to call any arbitrary function in any arbitrary object as if it returns a future
14:31 < fg3> anybody using fibrous
14:32 <@isaacbw> userConfig is kind of a bad example because it will probably be used a lot and you can't do much until it's loaded
14:33 < nb-ben> hi, is there a way to load a module without exiting if the module is not found?
14:33 < nb-ben> maybe I should use try?
14:33 <@isaacbw> yup
14:34 < nb-ben> also, another question, will the working dir for the loaded module be the directory it was loaded from? or the directory of the executed file?
14:35 <@isaacbw> modules will all share the working directory of the process
14:35 < exa> http://pastebin.com/ePr8SJRx why does it redirect to the BBC under /test/ although strict routing is enabled?
14:36 < nb-ben> I perhaps the client is sending /test for both cases
14:37 < Morkel> I have every time the 'Cannot find module' but the modul is installed https://gist.github.com/anonymous/4749752
14:37 <@isaacbw> nb-ben, which is usually the directory you were in when you started the process
14:37 <@isaacbw> you can see and change it with the 'process' global
14:37 < nb-ben> isaacbw, yes I understand, I just read something within the documentation that I needed clarification about
14:37 < nb-ben> isaacbw, let me find it
14:38 < nb-ben> nvm, I just misunderstood it
14:41 < exa> all I want to do is to add a trailing slash if /test is requested - is there a better way to accomplish this?
14:41 < nb-ben> another question, if I require again after previously requiring the same file (after it has finished loading), will it reload it or will it return a cached result?
14:42 < nb-ben> exa, does the client request /test in both cases?
14:42 <@isaacbw> each module is only evaluated once
14:42 <@isaacbw> so yes, it will return a cached result
14:43 < nb-ben> I see
14:43 <@isaacbw> exa, are you using express?
14:43 < nb-ben> isaacbw, is there a way to load a module with no caching?
14:43 <@isaacbw> mm, no
14:43 <@isaacbw> have you read this? http://nodejs.org/api/modules.html
14:43 < exa> isaacbw: yes, see http://pastebin.com/ePr8SJRx
14:43 <@isaacbw> there's a reason for it
14:44 <@isaacbw> exa, just have the route "/test/?"
14:44 < nb-ben> yes I understand isaacbw , I figured maybe there is some other way to achieve the results that you could recommend
14:44 < nb-ben> isaacbw, I suppose I'll just tell you what I am trying to do and maybe you could direct me to the right place
14:45 <@isaacbw> sure
14:46 <@isaacbw> you *can* clear the cache by deleting require.cache, but let me know what you're trying to accomplish
14:46 <@isaacbw> or deleting a key in it
14:46 < nb-ben> isaacbw, I am creating an express which would serve as a local daemon to other sites, which I would like to write as packages (so that I may also distribute them to the clients who requested them and they could host them on their own)
14:46 <@isaacbw> I don't think you can actually delete it
14:46 < nb-ben> isaacbw, I would like the sites to be updatable without actually killing the process
14:46 <@isaacbw> have you seen vhost?
14:47 <@isaacbw> oh, I see
14:47 < nb-ben> yes, I have isaacbw, I am creating it the same way (it's just about 5 lines of code :P)
14:47 <@isaacbw> look at the http-proxy module, and each application can be its own process
14:47 <@isaacbw> or any reverse proxy, really
14:47 <@isaacbw> but http-proxy lets you add node-y logic
14:47 < nb-ben> isaacbw, will the request information remain without change?
14:48 <@isaacbw> you wouldn't be adding sites as packages this way. They would each be their own server
14:48 <@isaacbw> and process
14:49 < nb-ben> yeah I know, though actually now thinking about it this kind of defeats the process I am not just running them as their own process in the first place. I have an array of 7 replicated distributed servers and would like to just send an update signal after I change the files
14:49 < nb-ben> wow lol
14:49 < nb-ben> s/defeats the process/defeats the purpose
14:50 < simong> Has anyone tried passport-saml with shibboleth authentication?
14:51 <@isaacbw> nb-ben, you could load each application as a child process
14:51 <@isaacbw> and then watch the file system and kill and restart the child process
14:52 < nb-ben> isaacbw, I was just about to say I suppose I will write some sort of daemon to restart the entire webserver on update but your idea sounds better
14:52 < geNAZt> nb-ben: use forever ?
14:52 <@isaacbw> you communicate with child processes through stdio
14:53 < nb-ben> yeah I know isaacbw 
14:53 <@isaacbw> alright
14:54 <@isaacbw> but the ultimate answer to your question is you can't really do it with require without doing some really messy stuff
14:55 < nb-ben> having a require(path, local) would be nice
14:55 < nb-ben> (local being a boolean whether to just load it without caching/distribution to other scopes)
14:56 < nb-ben> or include(path) I suppose is better fitted
14:56 < nb-ben> or loadModule(path) :D
14:56 < spion> this seems to be popular
14:57 < spion> nb-ben, https://github.com/substack/node-resolve 
14:57 < nb-ben> spion, reading
14:58 < spion> I guess something like function customRequire(module) { return requre(require.resolve(module, { your path optons })); }
14:59 < spion> erm
14:59 < spion> s/require.resolve/resolve.sync
14:59 < spion> also, missing an "i"
15:00 <@isaacbw> bejing is getting pretty science fiction-y
15:00 < nb-ben> spion, hmm I don't think this provides a solution to what I was looking for :P
15:00 <@isaacbw> the air is so bad everyone is building domes
15:00 < spion> let me actually read about what you are trying to do, carefully :D
15:00 < nb-ben> lol alright spion 
15:02 <@isaacbw> nb-ben, is this just for development or are you planning to deploy this way?
15:02 < nb-ben> I am planning to deploy this way
15:02 < spion> ah, so you want to load a module and not cache it.
15:03 < nb-ben> yep
15:06 < spion> well its not clean, but var module = require('module'); delete require.cache[require.resolve('module')]; should do. 
15:07 <@isaacbw> it's very not clean
15:07 < spion> if you are writing a plugin system, I suggest module.exports = funciton plugin(instance) { ...do stuff to attach the plugin to instance... } instead.
15:13 < nb-ben> I think perhaps deleting the cache is the better option given the circumstances
15:13 < nb-ben> seeing as a site will never require a site and this process will only require one for itself
15:14 <@isaacbw> what's that python math library for working with sets of data
15:14 < spion> nb-ben, also look at learnboost/up
15:14 < spion> nb-ben, https://github.com/LearnBoost/up
15:14 < nb-ben> spion, reading
15:15 <@isaacbw> numpy
15:15 < spion> it does work by spawning some extra processes though. but thats always better
15:15 < spion> just think about all the potential dangling setIntervals that might be left running
15:15 < spion> or similar scary stuff
15:16 < nb-ben> oh I am implementing those things as debian services, I have my own implementations of that solution
15:16 < nb-ben> by things I mean DNS and HTTP server
15:16 < spion> i see.
15:17 < spion> the great thing about up is that if you signal it to reload, existing clients will remain connected to the old processes
15:17 < nb-ben> I am thinking of maybe sharing that DNS library I just wrote, looks like node doesn't have many that would support running a server
15:17 < nb-ben> the ones I found are mostly broken
15:17 < spion> (or in other words, decent worker recycling)
15:17 < spion> if a wee bit buggy - crashes once per month :(
15:19 < nb-ben> spion, I suppose this solution is nice when you are running a single server but running on a distributed network having this type of unreported failure is total hazard :D
15:20 < spion> i have no idea what you mean :)
15:20 < spion> what unreported failure are you referring to?
15:20 < nb-ben> having many machines sharing the load cross-datacenter (distributed meaning it's not a local cluster)
15:20 < nb-ben> if up is actually down I don't have a way to report this so that it's automatically fixed (I suppose I could modify existing code)
15:21 < nb-ben> maybe I am assuming wrong though
15:21 < spion> ah
15:22 < spion> acutally I keep it (up) running with forever / monit.
15:23 < spion> hmm, I guess in that situation you also want round-robin DNS
15:25 < JohnMcLear> Anyone in here got much experience creating apt/yum packages of your node service?
15:26 < spion> I've never needed to go that far to handle more load - usually offloading the more load-intensive stuff to separate processes (or even separate machines) using seaport (https://github.com/substack/seaport) / and dnode (https://github.com/substack/dnode) seems to be enough
15:27 <@isaacbw> JohnMcLear, why do you want to do that instead of npm
15:28 < JohnMcLear> isaacbw: user requests ;\
15:28 < JohnMcLear> they want an apt-get install etherpad -- and that would install node (and all that goodness) and etherpad..
15:28 <@isaacbw> hmm
15:28 < JohnMcLear> and install it as a service..
15:29 <@isaacbw> oh, I see
15:29 < JohnMcLear> Etherpad is strange compared to most node stuff cause it's a full web service, it kinda goes against the "npm grain"
15:30 <@isaacbw> yea totally
15:30 < JohnMcLear> And I'm not a huge fan of that but it's a reality of us being such early adopters with a large community of relatively inexperienced people deploying the software ;\
15:30 < JohnMcLear> When I was young if you told me I would be working on a word processor I'd of laughed in your face..  How the world turns is very strange..
15:31 <@isaacbw> heh heh
15:31 < JohnMcLear> Can you think of any other node based stuff that has an apt/yum package?  Maybe I can use them for reference
15:31 < JohnMcLear> btw hey man, you doing okay?
15:32 <@isaacbw> different isaac :)
15:32 <@isaacbw> (I assume)
15:33 <@isaacbw> what are you referring to?
15:33 < JohnMcLear> ah possibly :)
15:33 < JohnMcLear> easy to be confused.
15:33 < JohnMcLear> well anyway if you have any thoughts on apt/yum then I'd be interested :)
15:33 <@isaacbw> I haven't made any packages myself
15:34 <@isaacbw> was it something in IRC?
15:34 < JohnMcLear> nope
15:34 <@isaacbw> oh okay
15:34 <@isaacbw> well, you should make one for archlinux too if you're making packages
15:35 <@isaacbw> for AUR
15:35 <@isaacbw> and of course have nodejs as a dependency. Don't install it yourself in your package
15:37 <@isaacbw> maybe put everything in a /usr/share/etherpad directory and have a symlink to /usr/bin for your app
15:37 <@isaacbw> so you could have /usr/share/etherpad/node_modules/ or however you have it set up
15:38 < DarkArgon> i have a webserver.js and a mailer.js. how should they talk? jsonapi?
15:38 < JohnMcLear> yeah isaacbw, absolutely node as a dep, could be weird when it comes to package locations though
15:38 < JohnMcLear> most admins install as an "etherpad-lite" user
15:39 < JohnMcLear> not sure if doing sudo apt-get install etherpad will then install node deps as -g
15:39 < JohnMcLear> I guess I need to experiment and document
15:39 <@isaacbw> no, I think your node deps should be self contained
15:39 <@isaacbw> outside of the regular npm stuff
15:39 < JohnMcLear> Yea which is how they are right now, so hopefully we can maintain that
15:40 <@isaacbw> you should pretend you don't know what npm is
15:40 < JohnMcLear> Yea ;\
15:40 < JohnMcLear> If I document it is it gonna be worth sharing w/ the greater node community?  It sounds like something that should already be available tbh
15:40 < JohnMcLear> I don't wanna re-invent the wheel
15:41 <@isaacbw> I definitely think so. Especially if you find a good solution through trial and error
15:57 <@isaacbw> http://hastebin.com/cemohuriti.js
15:58 <@isaacbw> promises are cool
15:59 <@isaacbw> be cool and use promises
15:59 < mscdex> where's the error handling? :O
15:59 < DarkArgon> hastebin.. is that the hipster pastebin?
16:00 < aandy> opensource pastebin
16:00 <@isaacbw> mscdex, not there yet
16:00 < DarkArgon> oh ok.
16:00 < mscdex> :-)
16:00 <@isaacbw> :P
16:00 <@isaacbw> it's for client-side btw
16:00 < mscdex> client-side needs to worry about errors too ;-)
16:00 <@isaacbw> I will show a loading graphic of some sort until all the unread counts have loaded
16:00 <@isaacbw> no, I just mean that's why I cared when it's all done
16:00 <@isaacbw> *care
16:00 < nb-ben> isaacbw, eventually I think I am deciding on just clearing require caches. after I update though, if I direct new requests to the updated object, when the previous object (which I removed from cache) is done waiting for any IO and has no timers and has no references, will it be garbage collected?
16:01 <@isaacbw> yes
16:01 <@isaacbw> unless there's a bug
16:01 < nb-ben> alright, thought maybe there's some more hidden references require keeps somewhere
16:02 <@isaacbw> I think you should be fine
16:02 <@isaacbw> I don't like it though ;)
16:02 < nb-ben> me neither but if it works then it's ideal for that purpose
16:02 < spion> is it really a problem to spawn a separate process?
16:03 <@isaacbw> there are better ways
16:03 < nb-ben> spion, requires generating and parsing json
16:03 < Sendoushi> i don't know if i should go with node... hmmm
16:03 < nb-ben> Sendoushi, you should
16:03 < Sendoushi> why should i do such thing?
16:04 < Sendoushi> i would like to try out json and stuff around js frameworks
16:04 < nb-ben> because it's the only way to write JavaScript applications, and JavaScript is awesome
16:04 < Sendoushi> but is node really a good thing for me at this stage?
16:04 < nb-ben> Sendoushi, let's go the other way around
16:04 < nb-ben> why should you not use node?
16:05 < Sendoushi> i don't really know over-complicated for someone just trying some js frameworks?
16:05 <@isaacbw> node isn't a framework
16:05 < Sendoushi> why would i care (at this stage) to do a node server for example when MAMP works well
16:05 < nb-ben> given the advantage (and it's not the only one) that you write programs gazillion times faster in JavaScript than almost any other language
16:05 < mscdex> node.js rules!
16:05 <@isaacbw> Sendoushi, you mean php?
16:05 < Sendoushi> well... yes, apache servers
16:06 < Sendoushi> i don't say that node doesnt rule
16:06 <@isaacbw> they don't mean the same thing
16:06 <@isaacbw> apache and php
16:06 < DarkArgon> apache aaah
16:06 < DarkArgon> nginx
16:06 < Sendoushi> just saying "should i pick it up now that i dont have experience with js frameworks?" and i know node isnt a framework
16:06 <@isaacbw> if you like php then stick with it
16:06 <@isaacbw> if you need salvation, we'll be here
16:06 < nb-ben> Sendoushi, apache doesn't work well when you look at it up from nginx / node
16:06 < nb-ben> or anything synchronous for that matter
16:07 < Sendoushi> isaacbw: with time i want to pass to node
16:07 < Sendoushi> i see the advantages of node
16:08 < nb-ben> Sendoushi, it works, it works faster, it's easier to write, it's faster to write, it's cross-platform...
16:08 < Sendoushi> just wondering if i shouldn't start "easy" with the js frameworks because if i use node it is one more thing to learn at the same time... i dunno. just making devil's point so i can decide the right route :P
16:08 < nb-ben> can't see a reason not to use it
16:08 < ericelliott> The primary advantages of node are: 1) it's evented, and 2) it's javascript
16:08 < ericelliott> if you don't need those, look elsewhere
16:08 <@isaacbw> Sendoushi, node is not a js framework
16:08 <@isaacbw> what else are you talking about
16:09 < nb-ben> Sendoushi, the name might be misleading "node.js" you might think it's a library like jquery
16:09 < DarkArgon> i think he means stuff like express
16:09 < Sendoushi> isaacbw: already said that i know it isnt a framework
16:09 < nb-ben> Sendoushi, but it's actually the V8 engine itself, it's a runtime just like a JVM
16:09 < spion> as a stepping stone you can play with client side JS + couchdb server :)
16:09 < Sendoushi> i'm just saying that i'll start already with express or ember or something
16:09 < spion> you can go quite far with this. then if you need more functionality on the server side, slowly add node into the mix.
16:09 < Sendoushi> and learning at the same time node... 
16:10 <@isaacbw> express is a framework that runs on node
16:10 < Sendoushi> just learning-matter because i want to go node way
16:10 <@isaacbw> ember is a client-side framwork for browser applications
16:10 < nb-ben> Sendoushi, watch Douglas Crockford on youtube. If you're not convinced after watching his lectures there's nobody that could convince you
16:11 < Sendoushi> i'm conviced about JS :)
16:11 < Sendoushi> i see it as the future
16:11 < Sendoushi> otherwise i wouldn't try to learn stuff about the current frameworks ehehe
16:12 < nb-ben> Sendoushi, well, JS is as powerful as its engines, and the current most powerful engine is V8 which is used by the chrome browser
16:12 < spion> couchdb is a db you can easily query from client-side JS with xhr. so all you need to build an app is some basic knowledge about couchdb (its really all get, post, put, really). and a client-side framework.
16:12 < Sendoushi> couchdb hmmm
16:12 < nb-ben> Sendoushi, and node is built upon V8
16:12 < Sendoushi> nb-ben: yes i've seen the guy who made node talking about it on youtube
16:12 < spion> Sendoushi, then, as you begin to need more complex things on the server side, slowly add (and learn) node into the mix.
16:13 < Sendoushi> spion: that may be not a bad a idea
16:13 < Sendoushi> that way would be more gradual since i know php stuff
16:13 < spion> you can also get free hosting from iriscouch.com
16:13 < nb-ben> Sendoushi, I suppose since he looks like a normal guy from the neighborhood it doesn't seem as magical as other languages that have been written by robotic engineers who talk in binary
16:13 < Sendoushi> my hoster is a friend which is already looking a little at js related servers
16:13 < Sendoushi> ihihi
16:14 < cloudbender> I'm working with loop ticks today
16:14 < Sendoushi> node.js seems awesome to me but at the same time i don't know if i get it since i have no experience with servers and stuff around that
16:14 < cloudbender> I think my loop might need a .... tick bath ?
16:14 < nb-ben> but the true fact is that normal guys write other languages too and fortunately the node.js guy is pretty damn brilliant, and the less people on a project the less possibility for inconsistencies and weird bugs
16:15 < nb-ben> Sendoushi, there's no easier language to write
16:15 < Sendoushi> hm
16:15 < Sendoushi> so let me try to get this straight
16:15 < nb-ben> the scoping is weird to people coming from other languages, but for people who don't expect stuff to be a certain way, scoping is way more intuitive than the rest of the languages
16:15 < spion> nb-ben, no easier language than JS?
16:16 < Sendoushi> node.js is essentially a server side "language" right?
16:16 < spion> woldn't go that far
16:16 < nb-ben> spion, from my experience (teaching people for school exams), javascript is way easier to grasp than others
16:16 < DarkArgon> js for the serverside
16:17 < Sendoushi> DarkArgon: what about dbs? how does it work with dbs?
16:17 < Sendoushi> on php you have the mysql
16:17 < Sendoushi> that is the best companion
16:17 < cloudbender> mysql is a dead dog
16:17 < Sendoushi> how does node works with dbs?
16:17 < nb-ben> Sendoushi, you have almost any database available to you
16:17 < Sendoushi> bu the way... i'm interested on web
16:17 < nb-ben> mysql works but I think it's old stuff
16:17 < Sendoushi> i don't want mysql
16:17 < DarkArgon> well, there is a good mysql driver. but yea mysql kinda sucks
16:18 < Sendoushi> i'm just trying to see what node is capable off
16:18 < Sendoushi> i would prefer maybe something like json
16:18 < cloudbender> php (or whatever) with sql was stable for many years, but it's time is drawing to a close
16:18 < DarkArgon> json, mongodb
16:18 < Sendoushi> i don't know... still a bit green on js matters
16:18 <@Nexxy> mongodb is bson
16:18 < DarkArgon> whatever u get the data in json
16:18 < Sendoushi> hm
16:18 < Papotico> hello
16:19 <@Nexxy> riak is the way to go for a lot of apps
16:19 <@Nexxy> or couchdb
16:19 < cloudbender> :)
16:19 < Papotico> :)
16:19 < Sendoushi> couchdb, mongodb, json...
16:20 < cloudbender> db4o
16:20 < Sendoushi> where should i go where should i go...
16:20 <@Nexxy> rabbit, flu shot
16:20 < DarkArgon> there also is rethinkdb
16:20 <@Nexxy> someone talk to me
16:20 < bnoordhuis> what's wrong with flat files?
16:20 < cloudbender> You have rabbits ?
16:21 <@Nexxy> bnoordhuis, that's not webscale
16:21 <@Nexxy> that's not big data
16:21 < bnoordhuis> sorry, i forgot about webscale
16:21 < Sendoushi> anyway, between those dbs is a matter of preference right?
16:21 <@Nexxy> priorities
16:21 < cloudbender> It's a matter of fortitude
16:21 < mscdex> mariadb!
16:22 < brycebaril> Preference & feature fit
16:22 < cloudbender> the code has to be backed by a solid, comitted team
16:22 < Sendoushi> lets say... you want to do a wordpress clone... what would you use?
16:22 < brycebaril> wordpress
16:22 < cloudbender> I say lets let wordpress come up with a node libray
16:23 < cloudbender> and Adobe
16:23 < mscdex> wordpress.js
16:23 < mscdex> photoshop.js
16:23 < cloudbender> shweet
16:24 < Sendoushi> aaammm used as an example
16:24 < Sendoushi> trying to figure what db i should start with
16:24 < brycebaril> Honestly for something like that you're probably pretty well off with something like Postgres, but anything will work. Pick something you're interested in learning I suppose.
16:25 < cloudbender> with sql, we had to design databases to be compatible with sql calls.  The future is about nosql object databases.
16:25 < brycebaril> Much of what you'll get with things like couchdb/riak are large scale distributed features
16:25 < crabtree> well
16:25 < crabtree> i'll be using rethink @ some point i hope
16:25 < crabtree> loving those joins
16:26 < Sendoushi> interesting couchdb is from apache...
16:26 < cloudbender> the objects in the database will take care of thier own relationships and constraints
16:27 < cloudbender> couchdb seems like a contender for me.  But node is going to open up the options by way of innovation.
16:27 < JohnMcLear> aandy isaacbw real hipsters use http://beta.etherpad.org as their pastebin ;)
16:28 < cloudbender> New database engines will be much easier to deliver to the community
16:28 < crabtree> betas use it
16:28 < Sendoushi> cloudbender: from what i'm reading couchdb is intended to small databases with few changes over time
16:28 < cloudbender> I disagree
16:28 < JohnMcLear> Cloudbender: I'm a fan and contributor to an evil database abstraction module called "UeberDB"
16:28 < JohnMcLear> It's only useful for KVS
16:28 < Sendoushi> just quoting what im reading
16:28 < spion> in this case it I suggested couchdb because: simple to use from client-side JS (e.g. via jQuery.ajax) and because it also doubles as hosting for your website's static files
16:29 < niggler> what is the npm mantra for "upgrading" all of the globally-installed modules
16:29 < JohnMcLear> It stores KV in MySQL too, bad practice but for my use case it's a great way of abstracting datababies
16:29 < brycebaril> Sendoushi honestly these days when I'm starting a project I usually use Redis.
16:29 < Sendoushi> redis? let me check
16:29 < Sendoushi> key-value store seems interesting
16:29 < cloudbender> couch has clustering and interprocess integirty built in
16:29 < brycebaril> You'll need to be wary of when your storage capacity will surpass your ram, which will be sooner with something like a wordpress site.
16:30 < cloudbender> Have not tried it yet, but it seems it can handle relativley large databases.
16:30 <@isaacbw> storing blog posts in redis? that seems like a poor idea
16:30 < brycebaril> but Redis the model carries over well to many of the other nosql dbs. 
16:30 <@isaacbw> while redis can be persistent, you shouldn't use it for persistent data
16:31 < DarkArgon> redis is memcache 2.0
16:31  * DarkArgon ducks
16:31 < Sendoushi> not finding redis interesting 
16:36 <@isaacbw> which one of these is photoshopped:   http://www.factzoo.com/sites/all/img/invertebrates/cuttlefish/cuttlefish-striped.jpg  http://www.islandbreath.org/2012Year/10/121010cuttlefish.jpg
16:36 <@isaacbw> nevermind, I figured it out
16:44 < tanepiper> anyone seen this with npm? https://gist.github.com/tanepiper/57f4b54e3307946dfde2 isaacbw?
16:45 <@isaacbw> isaacs
16:45 <@isaacbw> tanepiper, but the error seems pretty self explanatory
16:46 <@isaacbw> you need a name field
16:47 < tanepiper> ugh...yeoman creates a package.json file
16:47 < tanepiper> didn't see it there
16:50 < MI6> joyent/libuv: Shigeki Ohtsu master * fadfeaf : unix,windows: fix timer order in case of same timeout  Compare start_id o - http://git.io/Krg7Dg
16:51 < cloudbender> >> JSON.stringify({ vals : {value : [0,0,0]}}
16:51 < purr> cloudbender: SyntaxError: Unexpected end of input
16:51 < cloudbender> >> JSON.stringify({ vals : {value : [0,0,0]}})
16:51 < purr> cloudbender: (string) '{"vals":{"value":[0,0,0]}}'
16:52 < cloudbender> hmmm
16:52 <@isaacbw> what
16:52 < cloudbender> node win32 is stripping the array when JSON.stringify
16:53 < cloudbender> "vals"
16:53 < MI6> joyent/libuv: Ben Noordhuis master * da71649 : unix, windows: make uv_fs_t.statbuf public  Make the statbuf field public - http://git.io/bnRRgg
16:54  * cloudbender scratches head
16:55 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
17:01 < CodingBean_> Can anyone help me with a VERY simple REST API on express?
17:03 < crabtree> perhaps  CodingBean_
17:03 < DarkArgon> ask
17:04 < cloudbender> OK if I use the above form it works.  But my instatiated objects are having the array key stripped.
17:04 < CodingBean_> I am working on https://github.com/codingbean/Random, and I have a Nodejitsu server running on random.jit.su. I can't seem to allow the user to enter a custom number. I had to pre-define 5, 10, 20, 50, and 100. Do you know how to do this?
17:04 < cloudbender> I'll figure it out.
17:05 < cloudbender> In code, should I stick to single quotes or double quotes as a standard ?
17:06 < CodingBean_> @crabtree @DarkArgon I am working on https://github.com/codingbean/Random, and I have a Nodejitsu server running on random.jit.su. I can't seem to allow the user to enter a custom number. I had to pre-define 5, 10, 20, 50, and 100. Do you know how to do this?
17:06 < andu> cloudbender, thats not a bug. it should add the "" around the key names
17:07 < cloudbender> Yes andu: I was thinking of down the road when I need to stream code snippets to the browser
17:07 < andu> cloudbender, use JSON.parse in browser side
17:07 < andu> :)
17:07 < cloudbender> k
17:08 < DarkArgon> CodingBean_, /num/:count
17:08 < DarkArgon> then req.params.count
17:08 < CodingBean_> Ah... So how would I pass :count to a variable?
17:08 < crabtree> (11:05:08 AM) DarkArgon: then req.params.count
17:08 < crabtree> :P
17:08 < andu> coincidently.. im busy getting json.parse to work on arm cortex m3 ;) streaming json data to 3d printer/robot
17:08 < crabtree> var count = req.params.count;
17:10 < CodingBean_> Aw... Sweet! Thanks a million @crabtree !
17:10 < crabtree> yeah no problem
17:10 < crabtree> DarkArgon did nothing
17:10 < crabtree> :P
17:10 < amurdaca> how do i inherit mongoose connection from app.js to my models located in /models/model.js
17:10 < amurdaca> ?
17:11 < DarkArgon> all glory to crabtree!
17:11 < amurdaca> or could i just initiate the connection in each models?
17:11 < amurdaca> is this good practice?
17:11 < amurdaca> but i think sharing the connection would be better
17:11 < amurdaca> how do i do?
17:12 < DarkArgon> https://gist.github.com/fwielstra/1025038
17:13 < crabtree> meh
17:13 < CodingBean_> Does anyone have a good tutorial for using MongoDB?
17:13 < crabtree> mongodb does
17:13 < crabtree> http://www.mongodb.org/#
17:14 < DarkArgon> the online shell
17:14 < CodingBean_> Does that code also apply to databases hosted on MongoLab?
17:15 < DarkArgon> if you install mongodb locally and type mongo in your shell
17:15 < CodingBean_> Ah... OK. Thanks!
17:15 < DarkArgon> u will get the same shell
17:16 < CodingBean_> Also, lastly, I know this is not for Node, but does anyone here know how to make cross domain calls for JSON in jQuery? Such as http://jsfiddle.net/ZfvKm/2/ ?
17:16 < amurdaca> DarkArgon thanks a lot
17:16 < amurdaca> that was really what i was looking for!
17:16 < CodingBean_> I already checked on the jQuery IRC channel
17:16 < OTBS4Life> CodingBean_, You need to use JSON-P or CORS
17:16 < CodingBean_> I am looking to make an example 
17:17 < CodingBean_> I tried JSONP. What's CORS?
17:17 < crabtree> CodingBean_: http://stackoverflow.com/questions/3506208/jquery-ajax-cross-domain
17:17 <@isaacbw> google
17:17 < OTBS4Life> CodingBean_, That example is using JSON-P  All you need to do is specify a callback.  Note however that the server has to support that method.
17:17 < CodingBean_> Now that's where I get tripped up. I an confused on using Callbacks.
17:18 < amurdaca> then if i would to integrate passportjs i'll just put an user model with his own method there DarkArgon
17:18 < DarkArgon> express has build in jsonb support
17:18 < DarkArgon> *jsonp
17:18 < OTBS4Life> CodingBean_, The callback in the URL has nothing to do with your actual callback.
17:18 < OTBS4Life> CodingBean_, JSON-P is simply adding a <script> tag to the page with the src attribute set the URL you specify.  It's up to the server to then return valid JavaScript.  Basically, jQuery makes a function like jQueryTempFunction12345().  The server returns jQueryTempFunction12345({somedata});
17:19 < CodingBean_> OK... Can you quick take a look at my code @ https://github.com/codingbean/Random ?
17:19 < OTBS4Life> CodingBean_, All of it?  You're going to need to be more specific.
17:20 < CodingBean_> Sorry... I just can't pinpoint if my issue is server-side or client-side. The JSON it generates looks legit to me. See an example at random.jit.su/letter/upper/50
17:20 < CodingBean_> * http://random.jit.su/letter/upper/50
17:20 < OTBS4Life> CodingBean_, Yes, you're generating JSON just fine, but not JSON-P.
17:21 < CodingBean_> What's the difference? (just started with this... noob)
17:21 < OTBS4Life> CodingBean_, You need to accept a callback parameter and wrap your response with it.
17:21 < OTBS4Life> I just explained the difference.... what part of it is confusing to you?
17:21 < OTBS4Life> If you get a request for http://random.jit.su/letter/upper/50?callback=someCallback, then you need to return:  someCallback({"id":"asdf","err":"NULL"})
17:22 < OTBS4Life> Also, I highly recommend not using a string literal for "NULL"
17:23 < OTBS4Life> JSON-P is a hack.  You cannot make cross-origin calls without CORS.  But, you can include scripts from other domains.  JSON-P is really JavaScript.
17:23 < crabtree> CORS looks like a better alternative
17:23 < crabtree> unless you need IE7 support
17:23 < OTBS4Life> crabtree, CORS is great, unless you need suport for IE7 and IE8
17:23 < OTBS4Life> yeah
17:23 < crabtree> IE8 supports CORs
17:23 < crabtree> not fully, but it's useable 
17:24 < OTBS4Life> crabtree, Depends on if you need the parts that aren't supported....
17:24 < crabtree> http://caniuse.com/#feat=cors
17:24 < crabtree> :P
17:24 < CodingBean_> OK... So to be final, should I just use JSON-P server side with CORS client side and then change the err property to false instead of NULL?
17:24 < OTBS4Life> http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
17:24 < crabtree> yeah OTBS4Life but i wouldn't say it's unsupported
17:24 < OTBS4Life> CodingBean_, How should I know... I don't know what browsers you need to support.
17:25 < CodingBean_> Mainly just Chrome and Firefox. I'm not an IE kinda guy.
17:25 < CodingBean_> Sorry for being so confusing. :P
17:25 < OTBS4Life> CodingBean_, You might not be an IE guy, but what about your users?
17:25 < brycebaril> Are your users 'IE kinda guys'?
17:26 < CodingBean_> I know. I will make a statement on the GitHub page saying that we don't support IE... yet.
17:26 < OTBS4Life> crabtree, It might as well be, for my purposes.  IE 8's support for CORS is extremely lacking.
17:26 < OTBS4Life> CodingBean_, Oh joy, another project like that...
17:26 < crabtree> OTBS4Life: meh
17:26 < OTBS4Life> CodingBean_, JSON-P is not a problem.  It's used with great regularity.  You can also support both server-side.
17:26 < CodingBean_> Oops. I said the wrong thing. :P
17:26 < CodingBean_> Ah... OK.
17:26 < OTBS4Life> CodingBean_, To suppot CORS from your server, you only need to add a header.
17:26 < CodingBean_> I did not know if it was like a one or the other kinda thing.
17:27 < OTBS4Life> Access-Control-Allow-Origin: *
17:27 < CodingBean_> Is that possible in Node, or just PHP?
17:27 < OTBS4Life> CodingBean_, It's possible in anything you write server-side code with.
17:27 < CodingBean_> Hmm... OK.
17:27 < OTBS4Life> CodingBean_, Just add that header, and accept the callback parameter, and you've got all your bases covered.
17:27 < CodingBean_> Yay! OK.
17:28 < CodingBean_> Any other suggestions to make it better? Do you even think people will have a reason to use it? -- I just took a few minuets last night and coded it up.
17:28 < OTBS4Life> CodingBean_, What is it?
17:28 < crabtree> i don't personally see a use for it
17:29 < crabtree> i don't know why i would use an external resource to generate a random number
17:29 < CodingBean_> It allows to easialy generate random numbers for web developers. It gives them many options for formatting and is (or should be) simple to use. 
17:29 < OTBS4Life> CodingBean_, If you're just returning random characters, why use a web service?  Far slower to do go this route.
17:29 < CodingBean_> True.
17:29 < CodingBean_> :^)
17:29 < CodingBean_> I was just board.
17:30 < CodingBean_> Still fun to code, tho.
17:30 < boogyman> bored*
17:30 < OTBS4Life> CodingBean_, If you had a web service that used a radio or some other natural "random" source, then it might be worth using.  Otherwise I see no point, other than an exercise.
17:30 < crabtree> no boogyman
17:30 < crabtree> he was board 
17:30 < crabtree> i am plank 
17:30 < CodingBean_> Yea... I just checked out Random.ORG.
17:31 < crabtree> boogyman: http://assets.motivationalgenerator.com/hashed_silo_content/000/30f/9be/resized/damn-i-m-board-1131fb.jpg
17:31 < CodingBean_> I was thinking of using them to help generate random numbers and them mix in the letters.
17:32 < ScottReef> hey node brains :)
17:32 < holzp> OTBS4Life, well I could see a use
17:32 < CodingBean_> #win @ScottReef
17:32 < holzp> if you were developing a static site that needed random fill in information
17:32 < CodingBean_> How?
17:32 < CodingBean_> @holz
17:32 < CodingBean_> @holzp
17:33 < OTBS4Life> holzp, ?  I still don't follow.  What would be the point?  Anywhere you can call a web service from, you can use your own pseudo-random generatorl
17:33 < ScottReef> finally got my socket.io sessions controlling things on my arduino over html5 \o/
17:33 < holzp> easy: you dont know how
17:33 < crabtree> even if you're doing a static website
17:33 < crabtree> you can use client side javascript
17:33 < crabtree> ?
17:33 < holzp> there is a large segment of client side js users who can basically just plug shit in
17:33 < holzp> and have no idea how to really write anything
17:33 < CodingBean_> Sadly, I agree with @OTBS4Life
17:34 < holzp> in which case a web service is nice
17:34 < OTBS4Life> holzp, Right, and if you wanted to, you could plug in CodingBean_'s code... all without using a web service.
17:34 < CodingBean_> But @holzp has a point...
17:34 < OTBS4Life> Math.random() is hell of a lot simpler than AJAX.  I don't see his point at all.
17:35 < CodingBean_> If I could write a super simple JS library for it it may be better.
17:35 < holzp> yeah im stretching but its just a possibility 
17:35 < holzp> now see a nice lorem ispsum generator, now thats handy
17:35 < niggler> CodingBean_ look to vaporjs for inspiration
17:35 < CodingBean_> Definitely @holzp
17:35 < OTBS4Life> niggler, lol
17:35 < crabtree> CodingBean_: underscore already has that feature
17:36 < CodingBean_> Wow. Can't beleive I dodn't see that @crabtree
17:37 < CodingBean_> Hmm... What to do now.
17:38 < crabtree> YES
17:38 < crabtree> niggler!
17:38 < niggler> crabtree!
17:38 < CodingBean_> Would a Javascript Instagram API wrapper be of any use to anyone?
17:38 < niggler> comedy central had a southpark marathon yestserday
17:39 < crabtree> good niggler
17:39 < OTBS4Life> CodingBean_, People use Instagram?
17:39 < niggler> and im sad to admit that I didn't remember half of the episodes from it
17:39 < CodingBean_> Honestly, I guess no.
17:39 < CodingBean_> :P
17:39 < niggler> OTBS4Life you know what i found out recently?  the media thinks everyone uses facebook, instagram, twitter, ...
17:39 <@isaacbw> most normal people do
17:40 < niggler> holy crap, not to make light of the situation, but ive seen no less than 10 cases of people committing suicide over a comment on facebook
17:40 <@isaacbw> we aren't normal people
17:40 < niggler> something seems really wrong with that
17:40 <@isaacbw> yes, something does
17:40 < OTBS4Life> Many folks do use Facebook... but Twitter and Instagram don't have nearly the regular active users as Facebook.
17:40 < crabtree> i don't even know what instagram is
17:41 < OTBS4Life> Instagram is a service that screws up your photos so they look bad.
17:41 < crabtree> oh
17:41 < OTBS4Life> And then you post them to Facebook.
17:41 < niggler> its a massive circlejerk
17:41 < crabtree> "Instagram is an online photo-sharing and social networking service that enables its users to take pictures, apply digital filters to it, and share them on a variety of social networking services, such as media sites including Facebook or Twitter."
17:41 < crabtree> :S
17:41 < crabtree> i can use any number of tools
17:41 < crabtree> to apply filters to images
17:41 < OTBS4Life> http://www.thephoblographer.com/wp-content/uploads/2013/01/93831-instagram2-presets-for-lightroom-samples-tree-original-1358439909.jpg
17:41 < niggler> you use instagram to share photos on facebook so that others can re-instagram those photos
17:41 < CodingBean_> Hey yall! Check out my new Javascript demo host! http://codingbean.com/coffeehost
17:41 < niggler> instagrinception
17:42 < aho> most people don't even have internet
17:42 < crabtree> OTBS4Life: all those photos look terrible 
17:42 < crabtree> except the original
17:42 < crabtree> which is clear
17:42 < aho> and only a fraction of the people online use social media
17:42 < crabtree> i can change hues too!
17:42 < niggler> aho the real Aho actually said that lol
17:42 < OTBS4Life> crabtree, Agreed.
17:42 < CodingBean_> It's still a work in progress, but it has better load times as JSFiddle, and not a cluttered. If you want to write to console use box.log("YOURTEXT")
17:42 < crabtree> Inkwell aka grayscale 
17:42 < CodingBean_> Any suggestions?
17:42 < crabtree> Lily aka 40% opaque green layer
17:42 < OTBS4Life> "Due to our database provider's limits, your code is not secure"  Nice
17:43 < OTBS4Life> WTF does that mean.
17:43 < CodingBean_> It means that I am using Firebase and they don't have all the security rules in yet.
17:43 < niggler> OTBS4Life it means CodingBean_ isnt going to lie to you and tell you its secure
17:43 < mmalecki> is npm down?
17:43 < CodingBean_> I am switching to Mongo or Dirty today.
17:44 < OTBS4Life> CodingBean_, What's not secure about Firebase?
17:44 < crabtree> yes niggler
17:44 < crabtree> he's honest
17:44 < CodingBean_> The way my client generates random ID's and saves code can be overwritten or deleted.
17:44 < CodingBean_> I'm working with them on it
17:45 < OTBS4Life> CodingBean_, How is this your database's problem?  Is this up to your code to manage?
17:45 < crabtree> check out my code niggler http://codingbean.com/coffeehost/view.html?id=GyslYLNy3n
17:45 < mmalecki> hmm, registry.npmjs.org responds with host not found
17:45 < holzp> OTBS4Life, I dont really undrerstand firebase as well as I would like
17:45 < holzp> do you feel it is secure?
17:45 < niggler> lol crabtree
17:45 < mmalecki> oh, back up
17:46 < holzp> it wasnt when I started using it
17:46 < crabtree> CodingBean_: http://codingbean.com/coffeehost/view.html?id=GyslYLNy3n
17:46 < niggler> that's a 21st century rickroll
17:46 < crabtree> it's cool
17:46 < CodingBean_> Well... I am using Firebase and because this thing is entirely client side, the secirity has to be in Firebase, and becase Firebase does not have their rules finished, it's possible to delete other user's entries.
17:46 < crabtree> will use instead of bit.ly 
17:46 < holzp> right, that was my problem
17:46 < OTBS4Life> Oh, you don't use Firebase server-side?
17:46 < OTBS4Life> I've never used Firebase.... so wait, they provide some sort of AJAX API?
17:46 < holzp> yeah
17:47 < OTBS4Life> Some magical web-service layer?
17:47 < niggler> lol are you using godaddy CodingBean_?
17:47 < OTBS4Life> Sounds frightening
17:47 < holzp> like a remote databasae without needing anything but client side js
17:47 < CodingBean_> No... That's why I go into Node, so I could make my own server side script.
17:47 < OTBS4Life> Who would want that?
17:47 < OTBS4Life> Is there no way to do it server-side?
17:47 < graeme_f> mmalecki: not working for me either :/
17:47 < niggler> http://codingbean.com/coffeehost/edit.html
17:47 < CodingBean_> Yes @niggler.
17:47 < holzp> but I could never get over the idea that if the client had everything, they they could do anything
17:47 < holzp> like delete everything
17:47 < OTBS4Life> Is it not configurable?
17:47 < holzp> with some of their own javascript
17:47 < CodingBean_> Yes. @holzp
17:48 < holzp> so I used it but only for useless data, and who really needs that
17:48 < OTBS4Life> Firebase sounds like a complete pain in the ass.  Wouldn't it be far faster just to write your own web services, rather than use something like Firebase?  Sounds like a sales pitch more than anything.
17:48 < holzp> THe situation it works on is whey you can only have static hosting
17:48 < OTBS4Life> holzp, When is that EVER the case?
17:48 < CodingBean_> Yes, but I can't figure out how to use MongoDB as a service hosted with Nodejitus.
17:49 < holzp> Blogger blog
17:49 < holzp> also, s3
17:49 < OTBS4Life> S3 isn't for hosting your stuff like this!!
17:49 < holzp> but really thats more of a choice made before the fact
17:49 < OTBS4Life> Hey guys, use the right tools for the job, and you will never have these problems.
17:49 < CodingBean_> S3 CAN host static pages.
17:49 < JohnMcLear> npmjs.org down?
17:49 < OTBS4Life> CodingBean_, Of course it can, and why would you want to host them there?
17:49 < mmalecki> CodingBean_: what's the problem with mongodb and nodejitsu :) ?
17:49 < holzp> well, I clhallenged myself last year to see how dynamic I could make a site on s3
17:49 < mmalecki> I do happen to work at nodejitsu
17:49 < holzp> the answer was, fairly!
17:50 < OTBS4Life> CodingBean_, Furthermore, why would you use something like S3 when you have a need for dynamic pages?  Makes no sense.
17:50 < holzp> but then i wanted to be able to save stuff and then I had to use some sort of db
17:50 < CodingBean_> I can't get it to work when the MongoDB is hosted on MongoHQ. 
17:50 < trodrigues> mmalecki: are you still having issues with npmjs? saw that you said it looked back up a few minutes ago but I'm having trouble myself
17:50 < niggler> s3 always seemed like a cheap solution
17:50 < OTBS4Life> That's like me needing to buy a car for a 50 mile daily commute, but buying 1,000 pogo sticks instead.
17:50 < holzp> there is one reason why you have to do stuff in   a place you dont want to do it: YOUR BOSS SAYS SO
17:50 < CodingBean_> True @OTBS4Life
17:50 < holzp> Business concerns treuimpt tech
17:50 < holzp> its not great but it does happen
17:51 < OTBS4Life> holzp, Get a new boss.  I've been down that road before, but there is always a solution... even if that means finding a new job.
17:51 < mmalecki> trodrigues: nah, works just fine for me
17:51 < holzp> http://twiterature.org/
17:51 < holzp> thats on s3
17:51 < OTBS4Life> Who wants to work for a moron?  Not me.  Been there, done that.
17:51 < CodingBean_> Does anyone have a good tutorial for using MongoDB? #noob
17:51 < trodrigues> weird. I can't get to it
17:51 < mmalecki> CodingBean_: did you try mongolab instead?
17:51 < OTBS4Life> CodingBean_, There's a good tutorial on MongoDB's site.  Have you tried it?
17:52 < OTBS4Life> They've got a nice interactive terminal and everything.
17:52 < CodingBean_> I tried it, but again, no luck.
17:52 < mmalecki> also, mind emailing support@nodejitsu.com, describing your problem :) ?
17:52 < CodingBean_> I can try that. :)
17:52 < brycebaril> npmjs.org was down, just came back up
17:52 < OTBS4Life> This conversation makes me want to go shoot things.  BRB, going to play some Halo, and eat a burger.
17:52 < mmalecki> that'd be awesome, they'll take care of it
17:52 < trodrigues> ah yes, it's loading now
17:52 < OTBS4Life> :-D
17:52 < CodingBean_> Great!
17:53 < CodingBean_> NPM works fine for me!
17:53 < trodrigues> spent the whole day slouching in the couch. the moment I think "great, I'll write some code" npm is down :(
17:53 < CodingBean_> Haha!
17:53 < mmalecki> trodrigues: hahahahaha
17:53 < mmalecki> same here
17:54 < mmalecki> JasonSmith: you here, per chance?
17:54 < CodingBean_> Anyone here want to help write Node.js example for getting JSON from web server? http://random.codingbean.com
17:54 < CodingBean_> Again, board.
17:54 < JasonSmith> mmalecki: yes
17:54 < mmalecki> JasonSmith: I'm trying dnds, for the sake of mad science and can't get it to work on UDP
17:55 < mmalecki> getting "connection timed out; no servers could be reached" from dig, unless I use +tcp
17:55 < mmalecki> tried with node@master and latest stable
17:55 < JasonSmith> mmalecki: What port number are you listening on?
17:55 < mmalecki> JasonSmith: 5353 :)
17:55 < JasonSmith> and you dig -p 5353?
17:56 < mmalecki> JasonSmith: yup
17:56 < CodingBean_> Any takers? For http://codingbean.com/coffeehost
17:57 < JasonSmith> mmalecki: You installed from npm?
17:57 < mmalecki> JasonSmith: yeah
17:57 < mmalecki> just now
17:57 < mmalecki> should I use git?
18:00 < JasonSmith> mmalecki: No it's the same thing. On my mac I have something already listening on :5353
18:01 < JasonSmith> mmalecki: Maybe try another port, some kind of conflict? Totally guessing now
18:02 < CodingBean_> Do you have anything running on that port?
18:02 < JasonSmith> mmalecki: Yes I see some stuff about Macs running Apple TV and other stuff using bonjour on :5353
18:04 < mmalecki> JasonSmith: hah, this is correct. nice catch, thanks man
18:04 < CodingBean_> Oops! Wrong domain...
18:04 < mmalecki> JasonSmith: I'll try to make it error out when bind fails
18:04 < CodingBean_> Does anyone want to contribute a super simple Node.js client for http://codingbean.github.com/Random/ ?
18:06 < CodingBean_> NPM DOWN AGAIN!
18:06 < niggler> CodingBean_ I'm gonna hammer your server
18:06 < CodingBean_> ?
18:07 < CodingBean_> @niggler
18:07 < OTBS4Life> We should hit his server until we "randomly" get a few lines from War and Peadce
18:07 < CodingBean_> @niggler Hm?
18:07 < OTBS4Life> Given an infinite amount of time, it should be possible.
18:07 < niggler> CodingBean_: "Please obey the courtesy limit of 1000 requests per end-user per day. We don't log you or anything creepy like that, but it's nice to be courteous. "
18:07 < CodingBean_> Ah... Yea. 
18:08 < niggler> actually that's not true OTBS4Life
18:08 < CodingBean_> :)
18:08 < cloudbender> fixed, sortof.  JSON.stringify was somehow confused with my prototyping.  Switched to a simple record object form.
18:08 < niggler> its a PRNG
18:08 < CodingBean_> http://random.jit.su/1000000
18:08 < niggler> i dont thinkt he server has enough entropy
18:08 < OTBS4Life> niggler, Fair enough, but if it was truly random....
18:08 < OTBS4Life> CodingBean_, I just thought of a way for you to make all of your JSON-P requests super efficient.
18:08 < CodingBean_> How?
18:08 < OTBS4Life> CodingBean_, callback(Math.random());  And you can serve it from S3!
18:08 < OTBS4Life> :-D
18:09 < cloudbender> looks tasty
18:09 < niggler> CodingBean_ there's nothing wrong with putting a limit
18:09 < CodingBean_> I know, but how would I manage it? @niggler
18:09 < niggler> oh i meant a limit per request
18:10 < CodingBean_> I'm still confused on tying the callback to the url @OTBS4Life ...
18:10 < CodingBean_> Like only 10000 chars?
18:10 < niggler> CodingBean_ you have a worker just generate the random numbers
18:10 < niggler> and then each request is satisfied using the random pool
18:10 < CodingBean_> How so?
18:11 < CodingBean_> I can't think of a way to store that pool...
18:11 < OTBS4Life> In a box.
18:11 < OTBS4Life> :-)
18:12 < CodingBean_> :^)
18:12 < OTBS4Life> CodingBean_, JSON-P:  1:  You add a <script src="/somefeed?callback=myCallback"> to the page
18:12 < OTBS4Life> 2:  The server gets the data, and wraps it with your callback.  myCallback(somedata)
18:13 < OTBS4Life> 3:  Your code has a function in it called myCallback, which is called with the data from the server, once the script makes it to the browser
18:13 < OTBS4Life> That's how you get around cross-origin stuff.
18:13 < OTBS4Life> All the JavaScript on a page, no matter what the origin, shares the same outer scope.
18:13 < CodingBean_> OK... How would I detect the callback in the url?
18:13 < OTBS4Life> jQuery wraps all of this up for you, so you just have to tell it what the callback parameter is called.
18:14 < OTBS4Life> CodingBean_, Server-side?  Just like you would any other query-string parameter.  It's no different.
18:14 < CodingBean_> I never have done a query-string parameter. I literally just got started with Node about 1.5 weeks ago.
18:15 < OTBS4Life> CodingBean_, What are you using to serve up responses?  Just the built-in HTTP server?  Or Express or something?
18:15 < CodingBean_> Express...
18:15 < CodingBean_> https://github.com/codingbean/Random/blob/master/app.js
18:15 < CodingBean_> Barely and code. :)
18:15 < OTBS4Life> You can do it the straight-Node way:  http://nodejs.org/api/http.html#http_request_url
18:16 < CodingBean_> *any
18:16 < OTBS4Life> And Express parses them for you... let me find the docs
18:16 < OTBS4Life> http://expressjs.com/api.html#req.query
18:17 < CodingBean_> ah... OK!
18:17 < OTBS4Life> I'll be backin a bit... need to eat something...
18:17 < CodingBean_> Honestly still after all of this, I don't understand the use of callbacks. 
18:18 < CodingBean_> OK.
18:23 < holzp> CodingBean_, thinkg of it as a game of hot potato
18:23 < CodingBean_> How so?
18:23 < holzp> where execution is being passed around via those callbacks
18:24 < holzp> its just the convention that has come about to handle the async nature of code
18:24 < Lefty4000> so a call back is like a reference
18:24 < holzp> since you dont really know when an async function is going to get done
18:25 < holzp> rather than wait, you give it the code to execute when it gets done
18:25 < holzp> as a callback
18:25 < Lefty4000> Interesting
18:25 < holzp> like "hey I know you have a lot to do just call me back when you are done"
18:25 < CodingBean_> Shouldn't it be as simple as the client page getting the data from the random.jit.su page and then parsing the JSON?
18:26 < holzp> so the callback by convention usually takes two things, an error if the thing you pass the callback to has trouble, and if needed a result of some sort
18:27 < holzp> well it is a reference, to a function, basically code you want that function you are passing the callback to to execute when it has done what it set out to do (or encountered trouble)
18:27 < gildean> CodingBean_: basically it's just like: function someFun (callback) { dosomething(); callback(null, 'somevalue'); someFun(function (err, value) { console.log(value); });
18:28 < CodingBean_> OK... So in all, why would one need a callback to request data from a remote URL?
18:28 < holzp> because that happens async 
18:28 < gildean> so the anon function added as the function argument when calling someFun is equal to the callback defined in the function
18:28 < holzp> instead of your codebase just halting and waiting for the result it can continue on, and the callback is executed when the remove server finaly gets off its ass and responds
18:29 < holzp> seems fast to you and me, but its a long time as code moves
18:29 < holzp> this keeps everything from grinding to a halt
18:29 < holzp> waiting for something to happen that may take awhile
18:29 < CodingBean_> Is this so it can handle mutiple connections at once?
18:29 < holzp> so it can handle lots of stuff at once yeah
18:30 < CodingBean_> Perhaps it would be best for you to create a sample GIST of the app @ https://github.com/codingbean/Random/blob/master/app.js ?
18:30 < holzp> but it requires a fairly radical shift in mindset if you are used to procedural programming
18:30 < holzp> My dear Inspector: "its not where the code execures, but *when*."
18:32 < Lefty4000>      /nick Lefty4000
18:35 < CodingBean_> So... Can you make an example GIST? @holzp
18:36 < gildean> CodingBean_: in your app the app.verb methods are callback functions
18:37 < CodingBean_> So like app.get is a callback?
18:37 < gildean> CodingBean_: you're invoking the app.verb method with a string, and a second argument of a function, that function is the callback
18:38 < CodingBean_> Ah... So I had it all along?
18:42 < niggler> i think there's an issue with cluster
18:42 < niggler> *cluster + http
18:49 < niggler> CodingBean_ this is what i was talking about: http://hastebin.com/bavijecici.js
18:49 < holzp> CodingBean_, using it, having it and getting it are different things :)
18:50 < CodingBean_> How's that different than my platform @niggler ?
18:51 < niggler> you don't slow to a crawl when requesting many numbers
18:52 < gildean> CodingBean_: this is the normal node callback convetion: https://gist.github.com/gildean/4750579
18:53 < holzp> yeah CodingBean_, its is also convention to make that first err arg null when there is no error
18:53 < CodingBean_> So would that be useful for load hendeling
18:53 < holzp> well its what makes node work so fast and scale so well so yes
18:54 < CodingBean_> So how do you say I should implement this in my code? #nooooooooooooooooob
18:55 < daneroo> is a new Buffer(size) guaranteed to filled with zeroes ?
18:56 < holzp> I think ou are alright bean, express is sort of doing it for you there
18:56 < holzp> if your app was a lot more complex you would need to do it more
19:04 <@isaacbw> does google reader download feeds on its own server-side or does it only check the feed when the user logs in
19:05 < harbhub> hey isaacbr
19:05 < harbhub> bw*
19:05 < harbhub> i'm using bcrypt-nodejs
19:05 < harbhub> it isn't working with the asycn callback
19:06 <@isaacbw> I haven't used it
19:06 < harbhub> what do you us?
19:06 < harbhub> use*
19:06 <@isaacbw> I haven't had to encrypt any passwords yet
19:10 < Andy80> hi, probably an OT question, but I really don't know where to ask :( is anyone of you using C9? Opening a terminal doesn't work anymore. Other than this, there are two related website that doesn't work for me http://nodebits.org and http://nodemanual.org is there any maintainance ongoing?
19:12 <@isaacbw> (with node)
19:12 < klad> Andy80 from what I've seen, cloud9 is effed for many people.  I tried to get support in their chat yesterday, and another person tried through twitter... no success
19:13 < nb-ben> hi isaacbw :)
19:13 <@isaacbw> ahoy
19:13 < Andy80> klad, thanks :)
19:14 < nb-ben> isaacbw, do you think implied non-cached require will ever be implemented? I think this is a required feature, like reflection was for PHP or Java
19:14 < pats_Toms> hi, I can't get working node-gyp
19:15 < pats_Toms> I am using debian
19:15 <@isaacbw> nb-ben, I don't know
19:15 < pats_Toms> I red that people on unix is doing wrong with permissions
19:15 < nb-ben> could I make it and suggest that it will be added?
19:15 < pats_Toms> Installing it with sudo, but is there any other way?
19:15 < nb-ben> if so, I will do it since it's useful for my own project
19:30 < cloudbender> So, I can run fast and loose by using an async utility (fs) with no callback,
19:30 < Voting> Is this how I would do mysql queries from Node.js?  https://github.com/felixge/node-mysql 
19:32 < Voting> How should I connect to MySql from Node.js?  Is there anything better than https://github.com/felixge/node-mysql ? I'm new to Node.
19:32 < OTBS4Life> Voting, I tried that library the other day... had some issues.  I ended up switching over to http://nodejsdb.org/
19:33 < OTBS4Life> It's super fast, as it binds to the native library.  The problem is that it won't run on Windows this way.
19:33 < OTBS4Life> If that isn't a problem for you, I highly recommend it.
19:33 < Voting> OTBS4Life: you like http://nodejsdb.org/ pretty well? 
19:33 < OTBS4Life> Voting, Yes.  I've only used it on one project, but I"ve had good luck with it.
19:34 < Voting> OTBS4Life: Can I install http://nodejsdb.org/ using npn? 
19:34 < cloudbender> wow the GC is kinda quick sometimes.
19:34 < Voting> OTBS4Life: I'm really new to node... how best should I install it?
19:34 < OTBS4Life> Voting, Start with the documentation:  http://nodejsdb.org/db-mysql/
19:36 < Voting> OTBS4Life: ah, you were talking about this package when you said it was fast but wont run under windows? 
19:36 < OTBS4Life> Voting, Yes
19:36 < Voting> OTBS4Life: COOL! 
19:40 < Voting> OTBS4Life: Very grateful for your help! Tx!
19:40 < OTBS4Life> Voting, no problem
19:44 < Lefty4000> Just curious, what IDE do you guys use?  I'm using WebMatrix2 at this point
19:45 < zomg> WebStorm is pretty good
19:45 < zomg> Tho I usually just go with vim
19:45 < OTBS4Life> I switched to WebStorm a few weeks back when they had their big sale.  Good stuff.  The integrated debugging is really handy.
19:48 < cloudbender> Node rocks
19:49 < KevinSjoberg> I'm fairly new to Node and I'm fiddling around with different parts of the documentation. I got a question. My understanding is that I need to do "process.stdin.resume();" before I actually can listen on incoming data (emitted by the 'data' event). Is that true, because I just tried without it and it seemed to work?
19:49 < cloudbender> If node was an apetizer it qould be chicken nodle soup, that's how good it is.
19:50 < cloudbender> It's  yumtastic
19:50 < Lefty4000> Hmm does WebStorm have support for jade and stylus?
19:50 < KevinSjoberg> to complement my question. The documentation says "The stdin stream is paused by default, so one must call process.stdin.resume() to read from it."
19:54 < asturel> is there a cli way to eval commands in a nodejs app?
19:54 < xk_id> test
19:55 < cloudbender> asturel on windows ?
19:55 < asturel> linux
19:55 < cloudbender> oh
19:56 < asturel> i thought about some listener in stdin or something like that
19:56 < asturel> it it possible while running webserver?
19:56 < asturel> is*
20:06 < HankToTheHendrix> Hello there, should I have one node_modules dir for all my apps?
20:06 <@isaacbw> asturel, there's eval(), and also the vm module
20:06 < asturel> vm?
20:07 <@isaacbw> http://nodejs.org/api/
20:07 < jsonified> Lefty4000: I really like komodoIDE with remote debugging.
20:08 < Lefty4000> what is remote debugging?  I understand those terms when they are seperate but what?
20:08 < KevinSjoberg> asturel: What type of commands are you talking about? 
20:09 < jsonified> Lefty4000: where the nodejs process that I want to debug is not running on the same host that I am running the IDE on.
20:09 < jsonified> asturel: http://stackoverflow.com/questions/9302458/node-js-hooking-repl-to-a-remote-node-server like?
20:09 < asturel> KevinSjoberg i wanted eval commands from stdin while running the sebbserver
20:09 < asturel> webserver* :D
20:09 < asturel> maybe its possible someshow?
20:09 < asturel> like async read from stdin and execute it?
20:10 < jsonified> asturel: or https://gist.github.com/dch/4750873 ?
20:10 < Lefty4000> interesting
20:10 < KevinSjoberg> asturel: So you want to eval commands and get the result back in the browser?
20:10 < asturel> not in browser
20:10 < jsonified> Lefty4000: yup, komodo is a very nice cross platform ide (important to me) with javascript internals so you can do most anything
20:10 < KevinSjoberg> asturel: What you're talking about sounds like a REPL?
20:11 < jsonified> R.E.P.L.
20:11 < asturel> i dont want an socket server, i run a 'webserver' but i want to execute commands from stdin too, is that possible?
20:11 < asturel> so i have this app.listen(8888); and i want and async read from stdin too
20:11 < asturel> and execute the 'commands' :D
20:12 < jsonified> ironic that the original lisp implementation was actually a LPER (loop (print (eval (read))))
20:12 < Lefty4000> Wait so I can work on the same stuff from my linux machine and then on my windows and then on my mac (that I don't yet own)
20:12 < jsonified> asturel: then the gist above is pretty much what you need, you'll want to add some sugar for your use case but the basics are there.
20:13 < jsonified> Lefty4000: yes, thats pretty much it. Currently I am editing a file on my mac that is running on a linux server, via SFTP. 
20:13 < Lefty4000> Aw beautiful!
20:13 < jsonified> And debugging a node proc that is running on that server, all from my juicy colourful mac
20:14 < xk_id> s/quit
20:14 < jsonified> Lefty4000: also IDE v8.0 is in beta atm so you can try it out free. https://www.activestate.com/blog/2013/02/komodo-8-beta-available
20:16 < cloudbender> Anyone ever worked with a customized browser ?
20:16 < cloudbender> tailored for apps ?
20:17 < cloudbender> no bells and whistles or wells and thistles ?
20:17 < mansoor-s> cloudbender, give appjs a try
20:17 < mansoor-s> there are also a couple of other chromium frames out there
20:17 < cloudbender> thank you mansoor-s
20:18 < jrajav> mansoor-s: Node-webkit is another alternative
20:18 < jrajav> Which I've found less finicky
20:18 < cloudbender> oooo that sounds nice
20:18 < mansoor-s> i'll have to give a try
20:18 < cloudbender> I love less funicky
20:18 < jrajav> They're both very young
20:18 < cloudbender> good to know
20:18 < mansoor-s> why are they two proejcts
20:19 < jrajav> And they were a lot younger when I scoped them out, so appjs may actually be better now
20:19 < mansoor-s> they do the same thing and have the same goal no?
20:19 < jrajav> Don't take my word for it
20:19 < Voting> My client / boss is very worried about sql injection attacks via the browser, via node, to the DB... any pointers, folks? 
20:19 < Hypereive> Hi there !
20:19 < mansoor-s> Voting, what database are you using?
20:19 < cloudbender> Voting is the server on premises ?
20:19 < gildean> i did this with appjs a couple of days ago when i was bored: https://github.com/gildean/http-share-gui
20:19 < jrajav> mansoor-s: I think so.
20:19 < gildean> the code is totally messy, but works
20:20 < jrajav> mansoor-s: Appjs seems to be a little more closed-off about it though, so I couldn't say for sure
20:20 < Hypereive> Hey guys I jsut made and 1231354856435103210413513th instant messenger with nodejs!
20:20 < Hypereive> Yay
20:20 < Hypereive> just
20:21 < Voting> mansoor-s: cloudbender: Both db server and web server are SOMETIMES on the amazon cloud and sometimes on in-house servers as well. Why would it matter where the machines are located? 
20:21 < Hypereive> Sorry... Happiness made me do some typos...
20:23 < cloudbender> well, if your production server is on premises you could put it onto a vpn.  Security 'on the wire' is always a good thing.
20:24 < brainproxy> anyone happen to have a ready-made "formula" for wrapping XHR invocation in a web worker inside a promise within the main js app?
20:26 < mansoor-s> Voting, i asked what kind of database it was. Because you know, if its a  NoSQL server, you don't worry about SQL injectsions :p   you still have to worry about other things though
20:26 < mansoor-s> *NoSQL database not server
20:26 < Voting> cloudbender: how would having a VPN stop sql from getting to the db server?
20:27 < Voting> mansoor-s: some of the servers run mysql.
20:27 < mansoor-s> Voting, but if you are using a SQL db like mysql or postgres, simply escape all of your user inputs
20:27 < mansoor-s> on the server
20:27 < mansoor-s> don't do it on the browser
20:27 < mansoor-s> trust nothign that comes from the user
20:27 < Voting> mansoor-s: Are their standard escape libs?
20:28 < Voting> In node.js I should escape the input? 
20:28 < mansoor-s> yes
20:28 < mansoor-s> hmm, i'm honestly not sure if there are any... i havne't used any SQL databases with Node
20:28 < mansoor-s> but i'm sure there are a few libraries out there that do what you want
20:29 < OTBS4Life> Don't escape, use prepared queries.
20:29 < mansoor-s> yes that
20:32 < Voting> OTBS4Life: how do prepared queries help? And what do you think of this advice: http://nodejs.davidherron.com/2011/12/javascript-or-sql-injection-attacks-in.html?goback=%2Egde_1788338_member_86255180 
20:33 < evanmoran> Does anyone know if there is a publicly accessible way to use Module._nodeModulePaths?
20:34 < OTBS4Life> Voting, That advice isn't relelvant here... of course you shouldn't be using eval() for JSON.  There is a perfectly good JSON parser available!!
20:34 < OTBS4Life> Voting, Prepared/parameterized queries separate the data from the command.  That is a key concept.  When the command and data are together, injection attacks can be used within the data to execute commands.
20:35 < OTBS4Life> Prepared queries send the command and data to the server separately.  Truth be told, many libraries for MySQL simply escape the data on their own and send them both together.  You are still safe though, as those routines in the library tend to be solid.
20:35 < Voting> OTBS4Life: I would have thought that if strings from the user are not escaped correctly bad stuff can still happen even w/ prepared statements? 
20:36 < OTBS4Life> Voting, No, that is simply false.  What "bad stuff" would happen?
20:36 < Tixz> When doing a simple "Commonjs compiler" I only seem to get Closure Compiler related links. Can anyone recommend a commonjs compiler (if that's even the right term)?
20:36 < Voting> OTBS4Life: someting from the user could be executed. 
20:36 < OTBS4Life> Voting, The whole point of using parameterized queries is so that the data is separate from the command.  Escaping again means you are double-escaping.
20:37 < Voting> the prepared query would escape stuff from the user automatically? 
20:37 < OTBS4Life> Voting, Either that, or simply send the data separate from the command so that escaping isn't necessary.  Either way, that's up to the implementation.
20:37 < Voting> OTBS4Life: what is the best thing for me to read about prepared queries? 
20:37 < OTBS4Life> Voting, To be clear, if you stick data in the query itself and prepare it without using parameters, you get no protection.  You must use parameters.
20:38 < OTBS4Life> Voting, I don't know... experiment?  Try to fully understand how SQL injection attacks work, and do a few yourself.
20:38 < Voting> OTBS4Life: Good idea... ( "data separate from the command" - not sure what this really means. ) 
20:39 < evanmoran> Tixz: The closest is probably "browserify" if you want it to work on a browser client
20:39 < evanmoran> Tixz: "onejs" also works if you you to keep it server side as an app
20:40 < Tixz> evanmoran: Yeah, tried browserify but it adds so much bloat...
20:40 < OTBS4Life> Voting, Consider a traditional SQL statement:  INSERT INTO someTable (someColumn) VALUES ('someValue');  The data, 'someValue', is part of the command.  If someone puts in 'asdf'; EVIL_COMMAND()' in there, they have inserted their own commands.
20:40 < evanmoran> yeah it feels heavy somehow. I'm writing my own, but it will be a while before it is ready=).
20:41 < Hypereive> I have a stupid question I'm not even sure if it is possible, but... If I prepare a server-side object with methods, and property and all... Can I send it, ready to use, to the client-side?
20:41 < OTBS4Life> Voting, A prepared/parameterized query means you send the query first:  INSERT INTO someTable (someColumn) VALUES (?);  And then you send the data 'someValue'.
20:41 < Voting> OTBS4Life: following so far.
20:41 < Tixz> evanmoran: I just found Stitch, and think that'll do for now :)
20:41 < OTBS4Life> Because the data is not part of the command, it can't possibly be executed.
20:41 < evanmoran> Tixz: I tried it but never go it to work (my fault I assume). Let me know how it goes!
20:42 < Voting> OTBS4Life: but if the value contains stuff that the DB will see as SQL, how does it matter if the statement is prepared? 
20:42 < geNAZt> Voting: wrong
20:42 < geNAZt> the server knows what is part of the command and whats not
20:42 < OTBS4Life> The DB will NOT see the data as SQL.  That's the whole point.  The connector says, "Hey server, here's the command".  Then it says, "Hey server, here's some data"
20:42 < Voting> OTBS4Life: seems to me that it woudl be a matter of quoting (or removing chars that should not be there.)
20:43 < Voting> OTBS4Life: OK, I can study more. VERY grateful for your direction! 
20:43 < medikoo> Tixz: you're probably looking for https://github.com/medikoo/modules-webmake
20:43 < OTBS4Life> Voting, When you escape data for a database, you are really escaping data for the SQL syntax.  You can stick whatever you want in a database.  You just need the SQL interpreter to know what is data and what is the command.
20:43 < evanmoran> medikoo: ooo
20:44 < Voting> OTBS4Life: Oh, I think I'm following now...
20:44 < Tixz> medikoo: Yeah, that's the ballpark! I'll consider that one as well
20:45 < Voting> OTBS4Life: we are going below the level of the SQL processor once the SQL has been prepared. 
20:45 < Voting> OTBS4Life: the parser is not invoked again.
20:45 < OTBS4Life> Voting, Sort of, yes.  The SQL parser doesn't run when the data comes in.
20:46 < cloudbender> I'm thinking pastrami, on rye, yeah that's the ticket
20:46 < OTBS4Life> Voting, Again, how this is implemented varies.  Some connectors really do only escape the data, but the point is that you do not need to concern yourself with implementation.  Always use prepared/parameterized queries.
20:46 < Voting> cloudbender: enjoy!
20:47 < Voting> OTBS4Life: is there a best package for this (or does the package you have pointed me out aready have prepared queries?)
20:47 < OTBS4Life> Voting, What I sent you suppots prepared queries.
20:47 < Voting> OTBS4Life: again, thanks, buddy!
20:47 < OTBS4Life> Voting, No problem.
20:48 < threedot> hi
20:48 < threedot> i have got a problem with crypto
20:48 < crabtree> what's the problem
20:49 < Aartsie> Hmm do you guys say jade or ejs
20:49 < threedot> i encrypted some data on java using "Cipher.getInstance("AES/ECB/NoPadding")"
20:49 < cloudbender> I like it when my errors are caused by my typos
20:49 < threedot> i can decrypt with php but i can't with node.js
20:51 < cloudbender> 900ms to pull 100,000 records from disk, parse, and stack them into an object array.  It's an old laptop.
20:51 < threedot> i'm trying with "crypto.createCipher('aes-128-ecb', 'secret')" is it right?
20:51 < cloudbender> I need a new laptop
20:52 < threedot> i can decrypt with php using rijndael-128 ecb mode with same key
20:55 < Aria> threedot: ecb mode is never the right answer.
20:56 < Aria> But yeah, symmetric ciphers often only need 'something random' as a key.
20:56 < Aria> Especially in ECB mode.
20:56 < Aria> (contrast to public key ciphers, which need to be prime numbers, or parameters for elliptic curves)
20:57 < threedot> Aria: IV not required for ECB mode
20:57 < Aria> threedot: Right. Because ECB is fundamentally broken.
20:57 < threedot> Aria: php's mcrypt omits IV on ECB mode
20:58 < Aria> Right. ECB is a straight lookup. There is no IV.
20:58 < Aria> http://bobnalice.wordpress.com/2009/01/28/friends-don%E2%80%99t-let-friends-use-ecb-mode-encryption/
20:58 < threedot> Aria: I know that very unsecure. But I should use for remote service
20:58 < Aria> What remote service?
20:58 < threedot> Aria: I can't change remote service. is it right?
20:58 < OTBS4Life> ECB is totally secure!  http://en.wikipedia.org/wiki/File:Tux_ecb.jpg  :-D
20:59 < Aria> True that. Though you can make sure you're not relying on it being secure the way it's used.
20:59 < Aria> Just ... danger, will robinson.
20:59 < Aria> Any time you see ECB, be very suspicious that whatever you're doing is fundamentally broken.
20:59 < threedot> OTBS4Life: You may read that :) http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation
21:01 < threedot> Aria: isn't there a solution for ECB mode?
21:01 < Aria> Solution of what?
21:01 < MI6> joyent/node: Ben Noordhuis master * 30b0bc4 : doc: update buffer/typed array documentation  Clarify that typed array co (+1 more commits) - http://git.io/G5v5Ng
21:01 < cloudbender> node as the facilities, out-of-the-box, to support my geospatial database model.  I'm so happy.
21:02 < cloudbender> proof of concept is in the bag.
21:03 < threedot> Aria: I'm trying with java using "Cipher.getInstance("AES/ECB/NoPadding")". I'm able to decrypt with php's mcrypt but not with node.js crypto.createDecipher('aes-128-ecb'); okay?
21:03 < threedot> Aria: also I have tried with autopadding disable
21:03 < bingomanatee> good afternoon node
21:03 < bingomanatee> has anyone seen any good weather/cloud/rainfall simulations / algorithms?
21:04 < Aria> threedot: Alright then. Is what you're decrypting a block exactly?
21:04 < threedot> Aria: a minute
21:08 < airtanah_> anyone know the answer to this? http://stackoverflow.com/questions/14802573/open-a-socket-for-child-in-node-js
21:08 < threedot> Aria:
21:08 < threedot> key: secretsecretsecretsecretsecretse
21:08 < threedot> ciphertext: msPH3nRKogXTrltyHHbPqQKznV8sk4FMoCAJjACPb6L+k4s0m2Jq1IkiOEH4rbml
21:09 < geNAZt> airtanah_: you can process.send sockets
21:09 < threedot> Aria: I have created in java you can try on this page: http://www.tools4noobs.com/online_tools/decrypt/
21:10 < threedot> inputmode: base64
21:10 < airtanah_> geNAZt: isn't that only a feature of Node.js
21:10 < airtanah_> geNAZt: i want to start non-node processes
21:11 < Aria> airtanah_: Not specific to node, though what it sends is specific.
21:11 < Aria> (but you can use other apps with it anyway)
21:12 < geNAZt> I had a look at Node cluster,
21:12 < geNAZt> I have tried using both new net.Socket() and new net.Server()
21:12 < geNAZt> so you ask for a way to send sockets over the nodejs ipc
21:13 < airtanah_> geNAZt: when you fork a process, you inherit the file descriptors of the parent.. that's the easy part. however nodejs does not seem to tell me what the file descripor is when i open a new socket
21:13 < amurdaca> may anybody tell me if i should split this schema and set an ObjectId to Post to reference any comments? --> http://pastebin.com/P10YhJg3
21:13 < Aria> threedot: Your string isn't binary-encoded, is it?
21:14 < airtanah_> geNAZt: i am not trying to send a socket via IPC
21:14 < threedot> Aria: no. hardcoded inside of java source
21:14 < Aria> threedot: Not in node...
21:15 < threedot> yes
21:16 < airtanah_> Aria: not sure i can make that work, how would a ruby app for example respond to process.on?
21:17 < Aria> airtanah_: process.on?
21:17 < Aria> on what?
21:17 < Aria> that's a node thing...
21:17 < airtanah_> Aria: when you use process.send, the child process binds to process.on to receive the message
21:18 < Aria> threedot: In node, I can decrypt that -- though not sure whether correctly or not.
21:18 < Aria> (I don't get an error)
21:19 < threedot> Aria: can you send your code to me using gist
21:20 < Aria> just d = crypto.createDecipher('aes-128-ecb', new Buffer('key here')); d.write(new Buffer('ciphertextencodedhere', 'base64')); d.read()
21:20 < Voting> OTBS4Life: How do I turn the results of a query into json so I can return it back to the browser? Is there a simple way to do that conversion? 
21:20 < threedot> Aria: ok i'm trying it thx
21:21 < OTBS4Life> Voting, just use JSON.stringify()
21:21 < OTBS4Life> If you're using express, you can have it just write the object, and it will serialize it for you.
21:21 < airtanah_> ahh my answer is here https://github.com/joyent/node/issues/3025
21:21 < airtanah_> no, you cannot do what i want to do
21:21 < airtanah_> because windows
21:21 < Voting> OTBS4Life: really? that works well for all the data types that I may have in the DB?
21:22 < OTBS4Life> Voting, It works for all data types that JSON supports...
21:22 < TehShrike> Voting: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/stringify
21:22 < Voting> TehShrike: reading...
21:24 < Voting> OTBS4Life: I'm not sure where my MYSQL_CONFIG should be? (I'm running ubuntu) Can't find a file called mysql_config anywhere... 
21:25 < threedot> Aria: there is no write method on cipher. I have got latest version of node. Also I can't see write method for decipher: http://nodejs.org/api/crypto.html#crypto_crypto_createdecipher_algorithm_password
21:25 < OTBS4Life> Voting, You might not have the MySQL client libraries.
21:25 < Aria> Which node is the 'latest' ?
21:25 < Aria> :; node -v
21:25 < Aria> v0.9.6
21:26 < OTBS4Life> I downloaded v.9.10-pre yesterday
21:26 < geNAZt> which is also "old" :D:D
21:27 < TehShrike> Anyone got a chance to build stuff with streams2 yet?
21:27 < threedot> Aria: 'v0.8.18'
21:27 < Aria> threedot: Aaah, so you're on a different version of latest ;-) 
21:27 < OTBS4Life> threedot, Latest stable is v0.8.19
21:27 < Aria> threedot: In that case, use update, not write, and the result of update is the buffer with the result.
21:27 < threedot> Aria: okay i'm trying
21:28 < Aria> (It'd help if I knew what kind of problem you were having. What error are you getting?)
21:30 < CodingBean_> Hey.. So I now have a understanding on how callbacks work. Any good tutorials?
21:30 < Aria> CodingBean_: Tutorials for doing what with what callbacks?
21:30 < CodingBean_> Running them after someone joins the server so I can have mutiple threads running async.
21:31 < CodingBean_> I need it for http://codingbean.github.com/Random/
21:31 < OTBS4Life> Callbacks have nothing to do with threading....
21:31 < CodingBean_> Hmm? I thought they created a new thread than ran async with others.
21:32 < OTBS4Life> No
21:32 < OTBS4Life> All you're doing with a callback is passing a function as a parameter to another function, so that function can call that function you passed later on.
21:32 < OTBS4Life> All your JavaScript in Node.js runs in a single thread.
21:32 < CodingBean_> Oh... Well is what I need is the callback to be called so if someone requests http://random.jit.su/10000000, the server won't explode.
21:33 < OTBS4Life> CodingBean_, For that, you need to spawn other processes.
21:33 < OTBS4Life> CodingBean_, JavaScript is inherently single threaded.  Node's power comes from IO and what not, which runs in other threads.
21:33 < OTBS4Life> But once the data is ready, it all gets tossed back onto the single thread your JavaScript code runs in.
21:33 < threedot> Aria: where I have got error. https://gist.github.com/threedot/4751126
21:35 < threedot> i have got this error: TypeError: DecipherFinal fail
21:35 < OTBS4Life> bnoordhuis, Ben, I understand now, thanks (Re: issue #4736)
21:35 < CodingBean_> OK. So what I need them is the ability for the server to keep working while it is calculating a huge number for another person. Try to start http://random.jit.su/10000000, and then try http://random.jit.su/100 in another window. It BLOCKS it up.
21:35 < OTBS4Life> CodingBean_, Then you need multiple processes.
21:35 < Aria> threedot: final('utf8') ?! WTF?
21:35 < CodingBean_> I thought Node was non-blocking.
21:35 < OTBS4Life> CodingBean_, Non-blocking IO.
21:35 < CodingBean_> Now dat?
21:35 < CodingBean_> OHHHHH.
21:35 < OTBS4Life> CodingBean_, Your code most certainly blocks... it's single threaded for JavaScript.  Node.js is amazing for many tasks, but it's not some silver bullet.  It isn't perfect for everything.
21:35 < CodingBean_> So, how can I spawn mutiple processes and close them after the number was generated.
21:36 < CodingBean_> ?
21:36 < OTBS4Life> CodingBean_, Start with the documentation on processes.
21:36 < CodingBean_> On the Node.js site?
21:36 < Aria> CodingBean_: Yeah. Or use webworkers, or ... many ways to do it. 
21:36 < Aria> (gearman workers are something we use at work -- farm work via gearmand)
21:36 < OTBS4Life> CodingBean_, Plus, you probably don't want to spin upa nd end processes all the time just for this.  You might find it easier to use Nginx or something out front, proxying to a few instances of Node.js.
21:36 < Aria> (others use redis for job queueing for things like this)
21:36 < asdf12> i'd batch it out to a separate process
21:37 < threedot> Aria: i commented out final function's line. there is a malformed output
21:37 < Aria> threedot: Sure, but why 'utf8' as the only parameter to 'final' ?
21:37 < CodingBean_> OK @OTBS4Life.
21:37 < OTBS4Life> CodingBean_, You could also generate your data in chunks.
21:37 < Aria> (trying to get a utf8 string back?)
21:37 < OTBS4Life> CodingBean_, You will want to send it as you generate anyway.
21:38 < CodingBean_> Is there a library for that?
21:38 < OTBS4Life> CodingBean_, .... that would be code you write.
21:38 < Aria> CodingBean_: Indeed. MOST apps aren't calculating huge numbers. Most apps are IO-bound.
21:38 < OTBS4Life> CodingBean_, There isn't magic that just somehow knows how to split your jobs into pieces.
21:38 < geNAZt> CodingBean_: setup a stream per request and send chunks
21:38 < geNAZt> do node has the chance to server all clients at the "same" time
21:38 < geNAZt> and it blocks lesser
21:39 < CodingBean_> I know, but I don't know how to send chunks.
21:39 < OTBS4Life> CodingBean_, Generate 8K at a time and send it.  When you're done, end the connection.
21:39 < OTBS4Life> CodingBean_, res.write(chunk)
21:39 < geNAZt> first you need a stream. then you pipe that stream into the response. after that you write little chunks into it
21:39 < threedot> Aria: final function throws error every case
21:39 < CodingBean_> Hmm... I''ll try dat.
21:40 < OTBS4Life> geNAZt, Any reason for the additional stream?  Why not just write to the one provided by the HTTP server?
21:40 < Aria> threedot: Interesting. Sounds like you're not passing a whole block.
21:40 < asdf12> does anyone know off hand if mongoose makes n queries for n amount of dbrefs in a document?
21:40 < CodingBean_> But wait! How can I do that without overwriting the other JSON?
21:40 < geNAZt> which json oO
21:40 < OTBS4Life> CodingBean_, Overwrite what?  When you do res.write, that data is sent.  You aren't overwriting anything.
21:41 < geNAZt> oh i see what you mean
21:41 < CodingBean_> Ah... NVMD. Figured it out.
21:41 < CodingBean_> I'll just generate the number then add the rest of JSON to it after I am done writing the number, instead of writing rest of JSON first.
21:42 < geNAZt> erm bad idea
21:42 < geNAZt> causes huge memory leaks
21:42 < owen1> do people use bunyan or logging?
21:42 < CodingBean_> It may just be best to set a character limit. :)
21:42 < geNAZt> no use the streams
21:43 < geNAZt> so you dont have the problems with high numbers on random chars 
21:43 < geNAZt> and no problem with blocking
21:44 < geNAZt> the only thing you cant use is JSON.stringify :D
21:48 < CodingBean_> Hey! Added a limit! Can you find a way to bypass it? http://random.jit.su/1001
21:48 < CodingBean_> Limit is 1000
21:49 < CodingBean_> @OTBS4Life Now try http://random.jit.su/1001
21:50 < Voting> OTBS4Life: 'find / -name "mysql_config" -print' still shows me nothing even after I have installed the client libs. 
21:51 < threedot> Aria: 
21:51 < threedot> https://gist.github.com/threedot/4751126
21:51 < threedot> decrypted : ï¿½g#ï¿½ï¿½ï¿½ï¿½/ï¿½ï¿½ï¿½WSï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½yï¿½sï¿½ÚµDï¿½j
21:51 < Aria> Is that wrong?
21:52 < threedot> yeah
21:52 < threedot> might be:
21:52 < threedot> decrypted: this is really and really secret message
21:52 < Aria> Aaah. 
21:54 < threedot> there is not problem for key and ciphertext. you can try here: http://www.tools4noobs.com/online_tools/decrypt/
21:55 < Aria> Do they specify how the key is encoded?
21:56 < threedot> ascii
21:56 < threedot> key not encoded
21:57 < Aria> ascii is an encoding ;-)
21:57 < CodingBean_> @OTBS4Life You on?
21:57 < threedot> i know :)
21:57 < Aria> And two mappings to bytes, actually. 7 bits per byte or 8.
21:58 < threedot> was mean there is no wrapper encoding like base64
21:58 < Tixz> I have been working with webmake today, but my codebase is mostly coffeescript, and they don't play nice together. Any recommendations for a commonjs compiler/bundler/builder?
21:58 < Aria> Yeah. It's just that keys have to be bit-specific.
22:06 < amurdaca> how do i store session with mongoose?
22:06 < amurdaca> in the app.use stuff in app.configure
22:11 <@mbalho> anyone know how to gzip websockets?
22:12 < amurdaca> gzip(websocket)
22:12 < amurdaca> lmao jocking...
22:12 <@mbalho> amurdaca: :P
22:13 < amurdaca> :D
22:21 < Warpten> ard
22:22 < OTBS4Life> Hey, check this out!  About as useful as Coffeescript:  http://code.google.com/p/loljs/  :-D
22:23 < threedot> I think there is a bug for aes-128-ecb
22:23 < TehShrike> watching mikeal talk http://youtu.be/GaqxIMLLOu8
22:24 < mikeal> that was a while back
22:24 < TehShrike> I just saw someone link to it today apparently
22:25 < mikeal> this one is better
22:25 < mikeal> http://www.youtube.com/watch?v=2RXprpqRsfc
22:25 < TehShrike> Right, it was Tom Dale and you retweeted it and I was curious
22:26 < TehShrike> mikeal: a different giving of the same talk, or a different talk?  (should I stop halfway through that first one to watch the second, or finish it first)
22:26 < mikeal> it's an evolution of the same talk
22:26 < mikeal> i was on tour for like 6 weeks
22:26 < mikeal> LXJS was first, NodeDublin was nearly last
22:26 < TehShrike> okeydokey
22:26 -!- mode/#Node.js [+o isaacbw] by ChanServ
22:34 < amurdaca> can't i use express.sessions with only mongoose?! --> http://stackoverflow.com/questions/6819911/nodejs-expressjs-session-handling-with-mongodb-mongoose
22:34 < amurdaca> do i need mongostore in addition?!
22:35 < amurdaca> anyone?
22:38 < samholmes> I'm trying to build an EJS 2 Jade converter, but I'm finding it a bit difficult to parse the EJS.
22:45 < amurdaca> is connect-mongo still in dev?
22:48 < bingomanatee> greets all
22:49 < bingomanatee> Is there any real performance difference between a really long array and the same amount of infe in a nestsd array?
22:52 < asdf12> think it would depend on a few factors, whats in the array? but longer is usually worse
22:52 < Stephen> no, no difference in the array itself
22:53 < Stephen> the performance hit comes in the method you use to itterate over it
22:53 < samholmes> Here's what I've built so far for the EJS to Jade converter
22:53 < samholmes> http://jsbin.com/alikas/1/edit
22:54 < TehShrike> bingomanatee: write a test case, throw it on http://jsperf.com/
22:54 < Stephen> samholmes: Can it cook waffles?
22:54 < bingomanatee> thx
22:54 < samholmes> Stephen: Almost
22:54 < bingomanatee> samholmes - does it work in reverse?
22:55 < samholmes> bingomanatee: It doesn't work in non-reverse yet
22:55 < Stephen> Looks like I need to submit a pull for the syrup.js dependancy
22:55 < samholmes> I need help with the HTML parsing part
22:55 < bingomanatee> EJS !== HTML
22:55 < samholmes> bingomanatee: I know
22:55 < bingomanatee> good luck :D
22:56 < Stephen> WTF is EJS
22:56 < samholmes> bingomanatee: Would you be able to help? :P
22:56 < bingomanatee> you will ultimately need a JS parser  - might want to look at SubStack's Burrito 
22:56 < samholmes> Stephen: Wtf is google?
22:56 < Stephen> Yeah
22:56 < bingomanatee> Unfortunately I don't like Jade. 
22:56 < Stephen> Templates, got it
22:56 < samholmes> Haha
22:56 < bingomanatee> I don't like it a lot - nothing personal. 
22:57 < samholmes> bingomanatee: I don't either, which is why I'm building this EJS to jade converter
22:57 < samholmes> I want to convert my code base to Jade
22:57 < samholmes> But, I couldn't find a converter out ther
22:57 < bingomanatee> Why are you producing Jade if you don't like it?
22:57 < samholmes> So I started to build one of my own
22:57 < samholmes> bingomanatee: I thought you meant EJS
22:57 < samholmes> I dont' like EJS much
22:57 < samholmes> I like Jade better
22:57 < bingomanatee> OH. 
22:57 < samholmes> I'm a hipster liek that?
22:58 < TehShrike> I thought Jade was the popular one?
22:58 < bingomanatee> My suggestion -- reduce all EJS markdown to comments then reduce
22:59 < Stephen> As far as templating libraries are concerned, I've been leaning towards ones that put the templates in their own <script> elements
22:59 < bingomanatee> You should be able to easily parse straight assertions (<%= â€¦ %><%-  .. %>
22:59 < Stephen> I like the separation of concern
22:59 < bingomanatee> and you won't have much else left over. 
22:59 < segomos> just use hogan js
22:59 < samholmes> bingomanatee: I could
22:59 < Stephen> <%= .... Those operators aren't allowed on weekends
22:59 < Stephen> I'm not a .Net developer right now
22:59 < bingomanatee> but there are things in EJS with no real equivalent in jade - you can write whole functions, classes, etc. in Express - there is no painless mapping. 
23:00 < Stephen> Hmm
23:00 < samholmes> Here's the approach I was thinking: Parse the EJS into an object of HTML elements and their children/text content. Then use this object to build an equivalent Jade template.
23:00 < samholmes> bingomanatee: What's in EJS that's not equiv?
23:01 < samholmes> EJS: <? console.log('foo') ?> Jade: - console.log('foo')
23:01 < Stephen> views should avoid doing functions anyway... but I get your point
23:01 < bingomanatee> well, for instance, I can  create a class, input local variables, instantiate it, use it to generate a template, then run other local variables thorough it. 
23:01 < bingomanatee> Just off the cuf. 
23:01 < Stephen> Do either of them allow for template inheritance?
23:02 < Stephen> Or partials?
23:02 < samholmes> Jade has full Javascript with the - syntax
23:02 < bingomanatee> EJS doesn't have native partials. 
23:02 < samholmes> Stephen: EJS has wonky support
23:02 < samholmes> jade has extends, blocks and includes
23:02 < segomos> hoganjs > jade + ejs
23:02 < samholmes> IOW Jade is better 
23:02 < samholmes> hoganjs sounds nasty
23:02 < bingomanatee> well, I might be dated in my understanding of it. 
23:03 < Stephen> Any time I thought I needed to put a function in a view, there was a better way
23:03 < samholmes> Well, I know there are definitely not equivalents to Jade things in EJS
23:03 < mscdex> ejs ftw!
23:03 < Stephen> Usually by adding the functional method off my main namespace, and adding a single function call to the end of my view
23:04 < Stephen> Views get 1 JS line: calling an init function
23:04 < Stephen> Templates, whatever
23:05 < Stephen> Or maybe go the route of, when functions are necessary, build a store (array of objects) and have the template loop over the store
23:05 < samholmes> mscdex: maybe, but I liek jade
23:06 < samholmes> If you look at my code http://jsbin.com/alikas/1/edit
23:06 < samholmes> You'll see that I'm just storing the attributes as astrings
23:06 < samholmes> as strings*
23:06 < samholmes> And also, I don't know how to get the content of the elements
23:07 < samholmes> How is HTML parsed
23:07 < samholmes> ?
23:07 < segomos> regex
23:07 < TehShrike> >_<
23:09 < samholmes> segomos: regex, rly?
23:09 < Stephen> Rendering engines
23:09 < Stephen> Trident sucks
23:09 < samholmes> I can't do nested things with regex?
23:09 < Stephen> Nested? Sure you can
23:09 < samholmes> Stephen: How?
23:09 < samholmes> Like look at the attributes
23:09 < Stephen> just understand that you need to build the selector with the deepest element in mind
23:10 < Stephen> regex read up on callbacks (?) I believe the are called
23:10 < Stephen> writing good regex is an art
23:10 < samholmes> <a href='/somewhere' title='Wayne\'s world'> Is valid HTML
23:10 < samholmes> if I had the attribute string: "href='/somewhere'..."
23:11 < mscdex> why are you using regex to parse html?
23:11 < Stephen> sure, but it should be escaped to <a href=\'\/somewhere\' title=\'Wayne\\\'s world\'>
23:11 < samholmes> mscdex: that's the only way I know and what Stephen said to use :\
23:11 < Lefty4000_> Kind of off topic but if any of you are using an IRC chat client, which one are you using?  I'm looking for one that can be on multiple channels at once
23:11 < samholmes> Stephen: wah?
23:11 < samholmes> wha*
23:11 < mscdex> samholmes: cheerio?
23:11 < samholmes> mscdex: ?
23:12 < mscdex> https://github.com/MatthewMueller/cheerio
23:12 < Stephen> If you're gonna use regex safely, you'll need to run all HTML through an escape method first
23:12 < Stephen> I believe regex's escape character is \
23:12 < Stephen> either that or ^
23:14 < samholmes> mscdex: cheerio would work with EJS?
23:14 < Stephen> Of course, jQuery parses HTML great as well
23:14 < samholmes> Stephen: Oh. Well my point is that if I have a regex that matches attributes in an attribute string, it'll be difficult when there are escaped quotes \'
23:15 < Stephen> samholmes: are the escaped quotes consistent?
23:15 < samholmes> Stephen: consisten?
23:15 < mscdex> samholmes: you're parsing ejs?
23:16 < samholmes> a='b\'c' d='e' should parse to {a:"b\'c", d:'e'} or similar object
23:16 < samholmes> mscdex: Yes
23:16 < samholmes> mscdex: into Jade
23:16 < samholmes> mscdex: http://jsbin.com/alikas/1/edit
23:16 < mscdex> oh jeez
23:16 < Stephen> That's what you run the whole lot of it though an escape method. and ALWAYS run it through regex
23:17 < Stephen> getting to an escaped quote in regex is simple
23:17 < Stephen> s/\\\'/g
23:17 < Stephen> done
23:17 < samholmes> Stephen: escaped method?
23:18 < samholmes> Oh you turn the escaped quotes into something else temporarily?
23:18 < tprice> fmhc?
23:18 < samholmes> If so, what could you turn it into that wouldn't conflict?
23:18 < samholmes> fmhc?
23:18 < Stephen> samholmes: you'll need to write a method which replaces any character in the old template which regex requires escaped with \+char
23:19 < Stephen> Then be sure you run the result through new Regex()
23:19 < Stephen> Which will remove them
23:19 < samholmes> Could you give an example of what you mean?
23:19 < Stephen> consider this:
23:20 < Stephen> <p id='test'>Words</p>
23:20 < Stephen> You stated a single quote might be escaped
23:20 < Stephen> That looks like this:
23:20 < Stephen> <p id=\'test\'>Words</p>
23:21 < Stephen> Regex requires that some characters escaped. To retain the previous value, it would need to look like this:
23:21 < Stephen> <p id=\\\'test\\\'>Words<\/p>
23:21 < min|dvir|us> http://i.imgur.com/5Mbq5.gif
23:21 < Stephen> thus:
23:22 < Stephen> var result = new Regex("<p id=\\\'test\\\'>Words<\/p>");
23:22 < Stephen> so
23:23 < Voting> I have two different versions of node on this laptop. How do I make sure I'm running the right version of npm? What env vars, etc. should be set? 
23:24 < Stephen> function escapeRegex(text) { return text.replace('\','\\').replace('/','\/'); }
23:24 < vikartha> quit
23:24 < Stephen> That function doesn't cover all characters needing escaping
23:24 < Stephen> I'd look them up to cover the full range
23:24 < Stephen> But, then
23:25 < Stephen> var result = new Regex(escapeRegex("<p id=\'test\'>Words</p>"));
23:25 < Stephen> hmm
23:25 < Stephen> I'm getting way off base
23:26 < Stephen> The HTML wouldn't need to be escaped
23:26 < Stephen> The regex contents do
23:26 < tprice> what error is this "Error: forbidden failed checking user.name"
23:26 < tprice> from nom publish
23:26 < tprice> npm**
23:26 < Stephen> Did you sign up for an account on the site?
23:27 < tprice> yeah 
23:27 < tprice> this is something new
23:27 < tprice> ive been using npm for months
23:29 < Stephen> skattyadz!
23:29 < Stephen> My computer is behaving like a lazy piece of dog crap
23:29 < tprice> is somthing wrong with npm reg?
23:31 < samholmes> Stephen: Why would the ' be escaped like that?
23:31 < Stephen> I've led you astray
23:32 < Stephen> Totally my bad
23:32 < Stephen> the HTML doesn't need to be escaped
23:32 < RLa> Stephen, maybe your computer needs to rest
23:32 < Stephen> Only the Regex needs those sort of escapes
23:33 < samholmes> Stephen: I understood that.
23:33 < samholmes> Sure chars need escaping if you're using regex syntax, but that's besides my point
23:33 < Stephen> Yeah, like I said
23:33 < samholmes> The actual HTML syntax would have escaped characters which would make it hard to simply match characters between say two single quotes
23:33 < Stephen> I have no clue why I took you down that path
23:34 < samholmes> Haha
23:34 < samholmes> no worries
23:34 < Stephen> nah, matching is easy
23:34 < samholmes> but you see how regex fails here?
23:34 < Stephen> No
23:37 < samholmes> Try this /([a-z-]+)\s*=\s*['"]?(.*?)['"]?/ out on regexpal.com with the test string "foo = bar foo='bar \' bar' baz = 'boo'"
23:37 < Stephen> 's/(\\\').(\\\')/g'
23:37 < Voting> PLEASE excuse my being AN IDIOT but "Checking for node path : not found" when I'm running npm means I need to do WHAT 
23:37 < Stephen> grab values of all attributes with escaped quotes
23:38 < Stephen> Alright, I'll try and correct
23:38 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
23:39 < Voting> PLEASE excuse my being AN IDIOT but "Checking for node path : not found" when I'm running npm means I need to do WHAT? I'm SURE you guys know, right?
23:40 < Bob_Gneu> have you tried googling it?
23:40 < Bob_Gneu> http://stackoverflow.com/questions/7262251/npm-doesnt-build-contextify-release-node-path-not-found
23:41 < Bob_Gneu> http://stackoverflow.com/questions/7514738/npm-keeps-having-issues-finding-my-node-path
23:41 < Bob_Gneu> im sure it depends on the context
23:42 < Voting> Bob_Gneu: export NODE_PATH="/usr/local/lib/node_modules/" <- am I supposed to have something like this set and, if so, to what location? The place where my node's binary file lives? 
23:43 < Bob_Gneu> are you on linux?
23:44 < Bob_Gneu> if so, open a terminal and type in [printenv NODE_ENV]
23:45 < tprice> what error is this 
23:45 < tprice> npm ERR! publish Error sending version data
23:45 < tprice> npm ERR! Error: forbidden failed checking user.name: raft-api/0.10.1/-tag/latest
23:46 < Bob_Gneu> sounds like it is an error regarding the checking of user.name
23:49 < samholmes> Stephen: Any luck?
23:49 < airtanah_> anyone have an idea here? http://stackoverflow.com/questions/14803995/node-js-shared-socket-problems-with-parent-process
23:49 < segomos> delete your npm profile file, that should fix it
23:50 < segomos> ~/.npmrc
23:53 < tprice> where do i get support for npm?
23:53 < TehShrike> tprice: well, you can ask here
23:54 < rvagg> anyone else having issues with npm publish atm or is it just me?
23:54 < tprice> im getting this error
23:54 < tprice> npm ERR! unpublish Failed to update data
23:54 < tprice> npm ERR! Error: forbidden failed checking user.name: raft-api/-rev/59-480cc8c242175e356e4001c5868369b7
23:54 < tprice> ok..
23:54 < tprice> its not me and its npm
23:54 < TehShrike> huh, multiple reports, eh?
23:54 < tprice> good to know
23:54 < rvagg> tprice: getting the same error for npm publish
23:54 < TehShrike> isaacs: y'all around?
23:55 < tprice> rvagg yeah when you asked i thought so
23:55 < Gryffin> hi, i'm getting this error "Cannot find module 'graceful-fs'", looks like its happens.. anything obvious I can check?
23:56 < Gryffin> on "npm install"
23:56 < tprice> npm is borken right now
23:56 < TehShrike> That is awkward
23:58 < rvagg> Gryffin: the npm issues shouldn't be impacting on installing, i can install graceful-fs just fine
23:59 < Gryffin> I installed it with "sudo add-apt-repository ppa:chris-lea/node.js"
23:59 < Gryffin> and sudo apt-get install nodejs
--- Log closed Mon Feb 11 00:00:05 2013
