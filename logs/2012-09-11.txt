--- Log opened Tue Sep 11 00:00:57 2012
00:20 < TehShrike|Work> Why is marak so angry?
00:20 < TehShrike|Work> I feel like I missed something
00:20 < wingy> MARAK!!!!!!
00:30 < Rojuinex> Trying to install node-expat but I am getting some errors
00:30 < Sly> Pastebin the error.
00:31 < Rojuinex> http://pastebin.com/Wuch6TFh
00:34 < Sly> It seems you're missing a library file.
00:34 < Sly> Try `sudo apt-get install libexpat1-dev`
00:34 < Sly> Then try installing.
00:35 < Rojuinex> well hey, what do you know!  Thanks Sly!
00:35 < Sly> No problem.
00:42 < ang3lfir3> .
01:03 < ang3lfir3> .
01:17 < othiym23> I think I'm mostly recovered from summer camp now
01:21 < mansoor-s> othiym23, what did you do in summer camp
01:23 < othiym23> I talked about Node and watched indexzero poke a fire with a stick
01:23 < othiym23> he poked that fire good
01:23 < mansoor-s> lol
01:23 < mmalecki> hahaha
01:45 < starlog> hello ... i am writing a node.js (fantastic!) UDP server and experiencing a threshold (datagrams per second) above which UDP transport seems to saturate ... any particular reason and tips?
01:45 < Benvie> @TooTallNate: oh my what is this craziness I see on gypify-libffi
01:46 < othiym23> starlog: how high is the threshold?
01:46 < starlog> the ceiling is 15,000/sec
01:47 < othiym23> starlog: I've heard, but not personally encountered, that the performance of the datagram module is surprisingly low, mostly because most of the attention has gone to TCP / HTTP
01:47 < othiym23> yeah, that's way more datagram packets than I've ever tried to send for any length of time ;)
01:48 < starlog> yes TCP appears more capable ... however one would imagine the lower UDP overhead (fire and forget) would be "more" capable (altho 15K/sec nothing to sneeze at)
01:48 < starlog> just intrigued and curious to understand how one could improve this
01:49 < janmower> starlog: you on linux?  have you looked at sysctls?
01:49 < lvx3> multiple node instances and some kin of UDP load balancer? :D
01:49 < starlog> BTW sent 15K sustained over 5hrs without a glitch
01:49 < starlog> yes on linux. tho newb so can you unpack "sysctls" parfavor
01:50 < janmower> starlog: on linux you can tune network/memory through these things called sysctls
01:51 < othiym23> starlog: I heard from someone at Voxer that even though you'd expect the overhead of TCP/IP to be way higher than UDP, that's not the case with Node at present
01:51 < starlog> possibly tho i am still exploring and wanting to understand if expectations are "realistic"
01:51 < janmower> starlog: check out http://blog.caustik.com/2012/08/19/node-js-w1m-concurrent-connections/
01:51 < othiym23> and lvx3 may have the right approach if you're on a multicore vm / system
01:52 < starlog> node is genius (simplicity) async
01:53 < substack> node is magical unicorn fairy dust that webscales big data for the china market
01:54 < pyrotechnick> machine learning
01:54 < pyrotechnick> genetic algorithm
01:54 < othiym23> substack replaced himself with a Markov generator again
01:54 < substack> node.js是神奇的的的麒麟仙尘webscales针对中国市场的大数据
01:54 < othiym23> see?
01:54 < starlog> janmower: thanks for that link ... what would the UDP sysctls config equivalents look like?
01:54 < pyrotechnick> coroutine isolate supervisor
01:55 < othiym23> substack: now that I've had a week to think about it, I think I have some cool ideas for what to do with your musical function evaluator thingy
01:55 < Benvie> TooTallNate is my hero
01:55 < substack> javascript concurrency model isolate service http put is
01:55 < janmower> starlog:  they look very similar to the tcp ones
01:55 < janmower> starlog:
01:55 < substack> othiym23: excellent
01:55 < pyrotechnick> non-blocking asynchronous just-in-time
01:55 < substack> othiym23: I want to get it running in browsers next
01:56 < janmower> starlog: i think many of the tcp/udp have many of the same memory/buffer count options
01:56 < othiym23> substack: that would be excellent and terrifying
01:56 < janmower> starlog:  the differences are fairly specific to the protocol
01:56 < TooTallNate> Benvie: :)
01:56 < pyrotechnick> nosql functional prototypical
01:56 < starlog> oka. merci. gonna checkout the settings and see if changes make a diff
01:56 < othiym23> did anyone record any of the K-hole antics maxogden et al got up to on Tuesday night?
01:56 < mbalho> wat
01:57 < mbalho> what is a k-hole
01:57 < Benvie> http://en.wikipedia.org/wiki/K-hole
01:57 < othiym23> mbalho: http://www.urbandictionary.com/define.php?term=k-hole
01:57 < substack> othiym23: I have some json snapshots
01:57 < starlog> is anyone progressing (optimizing) the datagram module
01:57 < mbalho> LOL you mean the cat meow music?
01:57 < othiym23> for sensitive topics like this, urban dictionary is always the better choice
01:57 < mbalho> someone was supposed to upload it to soundcloud
01:58 < othiym23> mbalho: all of it
01:58 < mbalho> i think just the latter half
01:58 < othiym23> it got extra-ridiculous later on when it became SAGAN TIME
01:58 < mbalho> me and isaac had some sweet jams goin on though
01:58 < mbalho> oh actually wednesday night was better
01:58 < starlog> in light of your previous "hearsay" : )
01:58 < substack> STOP. SAGAN TIME.
01:59 < Benvie> that would make some nice beats
01:59 < othiym23> starlog: probably not yet? Voxer would have been the ones to keep hacking on that, and they realized that UDP + telephony don't really mix anymore anyway
01:59 < substack> can't touch this... galaxy
01:59 < ChrisPartridge> Hmm, seems child_process.exec doesn't actually return a buffer as per the docs
01:59 < starlog> UDP is the only real option in SIP universe tho ...
01:59 < othiym23> mbalho: Wednesday night was when I stayed by the fire and watched indexzero poke at the fire with a stick and bullshitted about security hacking
02:00 < othiym23> starlog: you probably want to use multiple processes, then -- or maybe just hack on the datagram support in Node
02:00 < othiym23> it's not that much C, it's just not tuned right now
02:01 < starlog> you say that like an expert (i am just learning javascript : )
02:02 < substack> stop. sagan time.
02:02 < starlog> where would the tuning be? does node.js offer "bounty" dev?
02:02 < substack> can't touch this
02:02 < substack> andromeda galaxy too far away
02:02 < substack> but give it time it'll come our way
02:02 < substack> smashing us bother together
02:02 < substack> no collisions just a gravity tether
02:02 < substack> -ing us both around
02:02 < othiym23> starlog: so far it's more of the "do some hacking and submit a pull request" variety
02:02 < substack> shout out to andromeda
02:02 < substack> but there aint no sound
02:03 < substack> in space. break it down.
02:03 < othiym23> and right now there are bigger fish to fry than UDP for most people, I think
02:03 < chilts> funny how it's changed from "send a patch" to "send a pull request"
02:03  * chilts loves it
02:03 < othiym23> semd a pull request WITH TEST CASES
02:03 < othiym23> or people will get mad
02:04 < starlog> if it is such a small C module where can one get an "expert" to fine tune it?
02:04 < chilts> othiym23: true
02:05 < othiym23> starlog: look at github.com/joyent/node/tree/src/udp_wrap.{cc,h}
02:05 < chilts> othiym23: https://twitter.com/andychilton/status/245342112739106816
02:06 < othiym23> chilts: ha!
02:06 < othiym23> OK, time to go damage my hearing through the strategic application of SWANS
02:06 < othiym23> c u all l8r
02:06 < chilts> I typed the first one, then you replied with the test cases
02:06 < starlog> <othiym23: ur most gracious ... can you resend that link ... i get 404
02:06 < chilts> laters
02:07 < lvx3> othiym23: load balancing generally seems to be the solution to a lot of my problems
02:07 < lvx3> a small EC2 instance costs less per hour than I do
02:10 < starlog> othiym23: gonna take a look at the config and the udp_wrap. thank you so much
02:11 < Benvie> is ghost riding a popular activity at meetups in the bay area?
02:11 < Almindor> brb
02:11 < substack> it should be
02:11 < lvx3> ghost riding?
02:12 < Robdgreat> do people still do that?
02:12 < lvx3> what is it? :S
02:12 < Benvie> i dunno but I just learned it originate in the bay area which i did not realize
02:12 < Benvie> ghost riding is letting a ghost drive your car
02:12 < Benvie> http://en.wikipedia.org/wiki/Ghost-riding
02:12 < lvx3> I just arrived at the same page
02:12 < lvx3> :D
02:13 < lvx3> but whenever, I hear the term, I think of this: http://www.youtube.com/watch?v=LziLbgQ1CBA
02:13 < Benvie> lol
02:13 < lvx3> or as I like to call it "Tuesday morning in Beijing"
02:14 < substack> othiym23, mbalho: http://substack.net/data/boogie_barn_data_dump.tar.bz2
02:14 < lvx3> actually, never mind Tuesday morning. It's more like a daily commute for some
02:21 < raj> anyone familiar with sockjs mind telling me how I can send a message to a particular user? I was thinking to create a `new SockJS()` with an additional argument that included the user's authenticated username.
02:24 < mbalho> ghost riding was invented in oakland
02:24 < lvx3> seems like a great way to get into an avoidable accident
02:25 < mbalho> people get out yo way when you're doin a sideshow, they dont wanna trip up on your flow
02:42 < raj> can you have a session within a session in sockjs?
02:52 < ChrisPartridge> raj: session within a session?
02:55 < mdedetrich> for middleware session that uses redis
02:55 < mdedetrich> does it hash both keys and values
02:56 < timeturner> connect-redis with express you mean?
02:56 < mdedetrich> well its with socketstream
02:56 < mdedetrich> but yes, it uses connect redis
02:56 < timeturner> redis hashes are basically a 1-1 mapping with javascript objects
02:57 < mdedetrich> I am trying to figure out if my deployment is actually using a redis database
02:57 < timeturner> connect-redis uses SETEX
02:57 < mdedetrich> or in memory data store
02:57 < timeturner> if you specified connect-redis in the middleware list then it is using redis
02:57 < timeturner> that's easy to check though
02:57 < timeturner> redis-cli
02:57 < timeturner> then KEYS *
02:57 < mdedetrich> well sockestream did a wrapper around connect middleware
02:57 < mdedetrich> so its not the same
02:58 < mdedetrich> i did do keys * in redid cli
02:58 < timeturner> then check redis directly
02:58 < mdedetrich> I am getting session keys
02:58 < timeturner> then it is using redis
02:58 < mdedetrich> but not any actual values
02:58 < mdedetrich> hence my confusion
02:58 < timeturner> do GET key
02:58 < timeturner> it doesn't show the values
02:58 < timeturner> just the keys
02:58 < timeturner> you have to query the full key
02:58 < timeturner> to get the value
02:58 < timeturner> via GET
02:58 < mdedetrich> get KEY returns hill for a key that the site is using
02:58 < mdedetrich> *nill
02:59 < raj> ChrisPartridge, yes, a session for everyone, then have sessions within that are channels, then sessions within that refer to each user
02:59 < timeturner> GET sess:gq4Z67M47ZYFP/2F5n2Tb4ZQ
02:59 < timeturner> did you do that ^
03:00 < timeturner> for example
03:00 < mdedetrich> timeturner: how would you delete all keys in redid database
03:00 < timeturner> flushdb
03:00 < mdedetrich> hmmm nope
03:00 < mdedetrich> ok
03:00 < mdedetrich> thanks
03:00 < timeturner> np
03:00 < mdedetrich> I will immediately find out then
03:00 < timeturner> let me know what happens
03:00 < timeturner> I'm around for a while
03:00 < mdedetrich> will do
03:00 < sivy> so, coming back to a old package of mine; what's the right way to enable someone else to update npm for a package i originally uploaded?
03:01 < ChrisPartridge> sivy: https://npmjs.org/doc/owner.html
03:01 < chilts> sivy: npm owner --help
03:01 < chilts> ah, ChrisPartridge beat me
03:01 < sivy> ChrisPartridge: as per internet rule, as soon as I asked the question i stumbled on the right google words to find that
03:01 < ChrisPartridge> hot hands baby!
03:02  * chilts looks around for someone else called baby
03:02  * ChrisPartridge stares at chilts ;-)
03:03 < ChrisPartridge> raj: not sure exactly what you are trying to achieve, perhaps I'm not understanding your terminology
03:09 < mdedetrich>  timeturner: deploying stuff now, will let you know
03:16 < lohkey> compiling stuff on ec2 takes forever
03:19 < mdedetrich> lohkey: not sure what that is meant to signify
03:20 < mdedetrich> lohkey: it depends on how strong ur server is
03:20 < lohkey> wrong channel
03:20 < mscdex> compile stuff locally :-)
03:20 < rvagg> Nexxy: "team ninjablocks"? you're working for them now?
03:50 < dr0id> is there a ShareJS champ here?
03:55 < saamyjoon> Does anybody know how to get the __dirname to be the correct application directory when an app starts using upstart on ec2? thanks
03:55 < saamyjoon> Or should I just be using forever at this point?
03:56 < fritzy> sorry, don't know.
03:56 < rvagg> __dirname points to the directory that the *current module* is in, not the CWD
03:56 < fritzy> I've had good luck with forever
03:56 < rvagg> you probably want process.cwd()
03:57 < rvagg> saamyjoon: if you use process.cwd() then you can use "chdir <dir>" in your upstart config
03:57 < rvagg> saamyjoon: __dirname shouldn't change unless you move your module file around
03:57 < saamyjoon> yeah, but __dirname where my node script starts, the base of my directory is '/' not /path/to/my/app'
03:58 < rvagg> no, __dirname is where the current JS file is located
03:58 < saamyjoon> I know
03:58 < rvagg> you can't change it unless you change the location of your module
03:58 < saamyjoon> I know, I'm not explaining well
03:58 < saamyjoon> I am writing a file that is in __dirname / filename
03:59 < saamyjoon> where __dirname is the base directory of my app because the script is in the base directory
03:59 < saamyjoon> weirdly, __dirname is '/' when I use upstart to begin my application
04:00 < rvagg> hm, you're not doing a 'chroot' in your upstart config?
04:01 < rvagg> I wonder if perhaps you should start node with 'sh node' rather than just 'node'? or, I think there's an upstart config arrangement to start your process as part of a script
04:01 < rvagg> that is weird though
04:04 < saamyjoon> ahh, nevermind, I am an idiot
04:04 < saamyjoon> I was doing path.join(filename)
04:04 < saamyjoon> not path.join(__dirname, filename)
04:04 < saamyjoon> sorry for wasting your brain cells
04:05 < rvagg> heh! cool, cause I was trying to figure out if it's possible to make path.dirname(x) return a / when it's not in /
04:05 < saamyjoon> yeah, really stupid mistake
04:05 < rvagg> we all make 'em
04:06 < saamyjoon> it happened to work on OS x and return the proper path, but when I pushed it to ubuntu, it would write to '/'
04:08 < mdedetrich> timeturner: its working, thanks for your help
04:18 < TehShrike|Work> I'll bet I've made stupider mistakes than you!
04:18 < TehShrike|Work> </challenge>
04:23 < dr0id> sucks when the library you are using has no good support :/
04:23 < dr0id> and they act smart by not letting me ask/open issues on github but continue on google groups :P
04:34 < owen1> can i make calls from a client side js to my node server that is on differnt host?
04:34 < fritzy> you mean like an RPC call, owen1?
04:34 < chilts> owen1: yep, just like any HTTP request
04:35 < chilts> but yes, if you mean RPC or something else, then you'll have to do something more
04:35 < chilts> owen1: can you be more explicit about what you want to do. 'call' could mean a lot of things
04:35 < owen1> http post/get
04:36 < TehShrike1> NO U POST/GET
04:36 < owen1> from a client side js to a node api
04:36 < TehShrike1> Oh wait what?
04:37 < owen1> chilts: simple post and get to my node end-point that happened to be on a differnt host than the client
04:38 < chilts> yeah, just do as you usually would with any kind of client to web request
04:38 < chilts> whether it's on your local machine, another server, or wherever
04:38 < chilts> hmm
04:39 < chilts> owen1: are you talking about from the browser??? or from another node process?
04:40 < owen1> chilts: browser
04:40 < owen1> i am using docpad, which is an express app for generating static website. i want to make calls from the browser to some node services that are running on random machines.
04:43 < samholmes> Are there any video hosting servers for apps?
04:43 < chilts> owen1: in which case, you need to read up on cross domain requests, using different methods
04:43 < chilts> owen1: iframes, message passing, CORS etc
04:43 < owen1> chilts: gotcha
04:43 < chilts> it'll depend on whether you have control of the other host's server etc
04:43 < samholmes> Like, a service that you could integrate with in your app and it takes care of a lot of the video hosting issues.
04:43 < owen1> chilts: i do
04:44 < chilts> then maybe CORS is what you want
04:44 < chilts> go read a bit on that and see if you can make it work :D
04:44 < owen1> i write both the server and the client side
04:44 < chilts> sweet
04:44 < owen1> ok
04:44 < owen1> chilts: isn't it part of jquery now?
04:44 < owen1> it's just a matter of 1 line of jQuery, if i remember.
05:06 < matbee> How the heck are we supposed to match an expressjs session to a socket.io session?
05:06 < samholmes> What happens to callbacks references on the server that reference client-side functions through dnode when the dnode connection ends?
05:06 < matbee> o_O
05:07 < samholmes> matbee: http://www.danielbaulig.de/socket-ioexpress/
05:07 < samholmes> that's how. But I'm switching to a full dnode/shoe/sockJS stack instead of socket.io
05:08 < bradleymeck> samholmes: on close (not end) they should be taken out of the reference pool that was keeping them alive
05:10 < matbee> This guide is sadly totally outdated
05:10 < samholmes> bradleymeck: Does this happen automatically? Here's what I'm doing: I set up an event emitter on the server that clients can register listeners to. If the client closes the connection (refreshes page, redirects, w/e), will these callbacks registered not be GC'd?
05:10 < samholmes> matbee: Still can work. You basically just manually get at the session data.
05:11 < ChrisPartridge> owen1: CORS with express is easy, just set your Access-Control-Allow-{Origin,Headers,Methods} with a middleware and next() it
05:11 < samholmes> matbee: You use express' middleware for Sessions on the socket.io side.
05:12 < owen1> press/
05:12 < matbee> I've tried that guide before and only get "warn  - handshake error Error" messages when a socket.io connection occurs
05:12 < owen1> ChrisPartridge: thanks. what about regular node. no express?
05:12 < samholmes> matbee: Weird. Must be something wrong with the authentication callback, maybe?
05:13 < matbee> samholmes, I wish I knew, man :)
05:13 < samholmes> matbee: Idk how deep you are in socket.io, but I'd recommend looking into dnode and shoe paired. It's pretty cool.
05:13 < Sly> document.documentElement.webkitCancelFullScreen()
05:13 < Sly> TypeError: Object #<HTMLHtmlElement> has no method 'webkitCancelFullScreen'
05:14 < ChrisPartridge> owen1: Then you need to ensure you response to OPTION requests appropriately
05:14 < ChrisPartridge> s/reponse/respond
05:14 < Sly> Shit. Sorry about that. Wrong channel.
05:14  * Sly facepalms.
05:15 < bradleymeck> samholmes: its done by dnode, so as long as you arent doing funny stuff
05:16 < samholmes> bradleymeck: Okay. What's funny stuff, so that I know?
05:17 < bradleymeck> samholmes: like if you are overriding dnodes internals it may not work
05:18 < owen1> ChrisPartridge: nice
05:18 < samholmes> bradleymeck: Not sure, but I'll be careful with that. But, I'm registering these functions in the EventEmitter. Does the event emitter GC listeners that aren't referenced anymore, somehow?
05:19 < samholmes> Like, if I do emitter.on(event, cb); where cb is a dnode reference callback, doesn't the emitter store a reference to this callback internally, so even if dnode drops references to this callback, the emitter will still hold a reference to it?
05:20 < jergason> Anyone have experience receiving email in node?
05:20 < jergason> I know very little about email sadly :(
05:20 < samholmes> jergason: not receiving. But sending
05:20 < jergason> yeah, that wasn't too hard
05:21 < jergason> specifically, I am implementing something that gives each user a specific email they can use to create content by emailing stuff to it
05:21 < jergason> but am a little lost on where to start
05:21 < bradleymeck> samholmes: it should follow normal GC rules on the server side
05:22 < ChrisPartridge> jergason: Check out Haraka
05:23 < jergason> is that like the hawaiian version of heroku?
05:23 < ChrisPartridge> jergason: It's a node SMTP server
05:24 < samholmes> bradleymeck: What should?
05:24 < bradleymeck> functions on an event emitter
05:25 < samholmes> so, this means that I _must_ remove the event listener when the connections close?
05:26 < samholmes> I have to cache the listeners manually and associate them with a remote connection. Then when the connection closes, I have to remove the listeners from the event emitter manually. Correcto?
05:27 < jergason> ChrisPartridge: thanks, will check it out
05:28 < ChrisPartridge> jergason: yw
05:29 < mdedetrich> does anyone know a good perfect no collision hash that is typically used for web applications (creating a file based on the current time in milliseconds)
05:31 < timeturner> there is nearly no way two objects can have the same timestamp
05:31 < timeturner> especially with file saving
05:31 < timeturner> almost not way
05:31 < timeturner> no*
05:32 < mdedetrich> well you are using the word nearly
05:32 < timeturner> you can drop down to nanosecond precision possibly
05:32 < ChrisPartridge> mdedetrich: https://github.com/broofa/node-uuid ?
05:32 < mdedetrich> which is why I am asking for a perfect hash
05:32 < mdedetrich> ChrisPartridge: uuid does have collisions
05:32 < mdedetrich> ChrisPartridge: the hash is a fixed length
05:33 < timeturner> hash it with bcrypt
05:33 < timeturner> or node's built in crypto
05:33 < mdedetrich> hmmm
05:33 < timeturner> guaranteed perfect hash
05:34 < timeturner> it might take a bit more processing power
05:34 < timeturner> you might want to look into CRC though
05:34 < timeturner> that's how express session ids are created
05:34 < timeturner> and saved in redis/memorystore
05:36 < mdedetrich> is b\crypt a perfect hash?
05:36 < mdedetrich> *bcrypt
05:37 < Lorentz> it has properties that makes it good for hashing passwords
05:38 < mdedetrich> yes I know that, pretty sure its not perfect though
05:38 < mdedetrich> I will just use crypto then
05:38 < Lorentz> there is no perfect in security
05:39 < mdedetrich> this isn't meant to be secure
05:39 < mdedetrich> I just need a hash with no collisions
05:39 < mdedetrich> I'm creating unique filenames, not passwords
05:39 < Lorentz> Ah, right, then just any old md5/sha-1/whatever will do, as you need it
05:40 < Lorentz> one of them crypto hashes will do
05:41 < mdedetrich> isn't hash's like md5 have a restricted space of 128bit
05:41 < Lorentz> and how many files do you need to be uniquely saved as?
05:41 < mdedetrich> well i don't know, need a hash that has unrestricted space
05:42 < Lorentz> I'm not aware of hashes that has unlimited length
05:42 < Lorentz> well, arbitary length
05:43 < mdedetrich> I'm pretty sure this is an issue that some companies have to deal with
05:43 < Lorentz> such as google, perhaps
05:43 < mdedetrich> yeah exactly
05:43 < Lorentz> who probably just use a longer hash, like sha-512
05:43 < Lorentz> or something they wrote up
05:43 < katjang> i'm building a socket server with net.createServer. i'd like to inform the connecting clients when server is down or disconnected by any reason.. is that possible?
05:44 < ChrisPartridge> mdedetrich: uuid.v4 - unless your generating trillions of uuids, a collision is highly unlikely
05:44 < mdedetrich> ChrisPartridge: yeah ill just use that, thanks
05:44 < mdedetrich> I doubt the site will get a trillion files any time soon
05:44 < Lorentz> uuid is 128-bits too
05:45 < ChrisPartridge> mdedetrich: I'm literally using it for the same purpose, ~12 machines generating legal contracts with uuids and not one collision over ~18months
05:45 < mdedetrich> ChrisPartridge: cheers, thank you!
05:46 < samholmes> What's a pretty fast hash algorithm that's perfect for hashing short strings like "something-1234" into unique low probability collisions?
05:46 < katjang> hi all..
05:47 < samholmes> unique hashes with low probability collisions*
05:47 < mdedetrich> samholmes: just asked the same question
05:47 < mdedetrich> samholmes: apparently the result is to just use a hash that has a massive digest
05:47 < mdedetrich> samholmes: uuid.v4 or something like sha-512 should be fine
05:48 < samholmes> mdedetrich: haha. funny how everyone seems to be working on the same things as me today; this isn't the first collision in that sense with me today.
05:48 < samholmes> what's a digest exactly?
05:48 < mdedetrich> the keyspace of the resulting hash value
05:48 < mdedetrich> as in, SHA 512 will have many more unique values than SHA 128
05:48 < samholmes> sha 128 is sha1?
05:49 < mdedetrich> since the digest of SHA 512 is larger
05:49 < mdedetrich> yup
05:49 < mdedetrich> I don't know what you mean by fast though, there is a trade off
05:49 < samholmes> are SHA 512 strings longer than SHA1 or SHA 256?
05:50 < mdedetrich> samholmes: http://en.wikipedia.org/wiki/SHA-2
05:50 < mdedetrich> substantially
05:50 < mdedetrich> have a look
05:50 < mdedetrich> this is an example length
05:50 < mdedetrich> 0x cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e
05:50 < samholmes> JESUS!
05:50 < samholmes> This needs to fit in a HTML ID attribute
05:50 < samholmes> what's the HTML ID attribute length limit, if any?
05:51 < mdedetrich> *shrugs*
05:51 < mdedetrich> tbh
05:51 < mdedetrich> uuid.v4 should apparently fine
05:51 < mdedetrich> you would need to run it like a trillion times before you get a collision
05:51 < bradleymeck> if its a short string why not just use a string comparison, … for small strings they are faster than hashes usually
05:51 < ChrisPartridge> >trillion ;)
05:51 < samholmes> Is uuid.v4 available in node.js's native crypto module?
05:52 < ChrisPartridge> node-uuid package
05:52 < samholmes> Ah.
05:52 < samholmes> Isn't sha512 available natively?
05:53 < mdedetrich> ChrisPartridge: I assume if you horizontally scale, you should still manually check for collisions when using uuid.v4
05:53 < ChrisPartridge> mdedetrich: pass in your mac address to the uuid function
05:53 < ChrisPartridge> mdedetrich: check out the RFC
05:53 < mdedetrich> oh wow, I thought uuid.v4 was based on time
05:53 < mdedetrich> thats awesome, thanks
05:53 < Lorentz> no, it's just unique
05:54 < ChrisPartridge> samholmes: it's cheaper to generate uuids than hashing with sha afaik
05:54 < ChrisPartridge> I could be wrong
05:55 < mdedetrich> ChrisPartridge: UUID is not meant to be secure, so I am pretty sure it is
05:55 < samholmes> hmm
05:56 < samholmes> UUIDs don't take an input though?
05:56 < mdedetrich> samholmes: uuid.v4 apparently does
05:56 < bradleymeck> UUIDs current rfcs suggest a pure random number solution after mac address spoofing attacks occured with the old rfc
05:56 < mdedetrich> also how do you get a mac address in node.js
05:57 < bradleymeck> mdedetrich: you dont without shelling out
05:57 < samholmes> mdedetrich: How, I don't see any way on the github to give the function input which will return the same UUID every time
05:58 < mdedetrich> samholmes: oh its not every time, its just that if you have 2 different machines that are on the same web application execute UUID at the same time
05:58 < mdedetrich> you have to account for a collision at some time (in which case you would just run UUID again)
05:59 < mdedetrich> instead of not accounting at all under the assumption that when a collision occurs, it will be when you have a trillion files
05:59 < samholmes> the internet tells me that the odds of getting hit by a space rock is more probable than a collision in SHA 256
05:59 < mdedetrich> talking about UUID which doesn't take a seed, SHA 256 is entirely different
06:00 < mdedetrich> if you just put in a mac address to SHA 256, you don't need to account for that
06:00 < samholmes> Wait. A seed is a value to be hashed?
06:00 < mdedetrich> yup sorry, a value to be hashed
06:00 < mdedetrich> not an actual seed
06:00 < samholmes> Ah. I want a value to be hashed.
06:00 < mdedetrich> UUID doesn't take input values, its just meant to be pure random
06:00 < samholmes> UUID has no way to output the same UUID based on a value?
06:01 < samholmes> That's not what I'm looking for unfortunately.
06:01 < samholmes> I'm just looking for a way to hash a string into that gives me the same hash everytime I use the same string.
06:02 < mdedetrich> SHA then
06:02 < mdedetrich> also thats the property of every hash
06:03 < mdedetrich> its just that UUID doesn't have an input
06:03 < samholmes> mdedetrich: I figured every hash takes input. I also figured UUID didn't. Thank you for clarifying. :)
06:03 < mdedetrich> aha 224 is probably fine for you, the digest isn't that long
06:04 < ChrisPartridge> samholmes: then just use md5?
06:04 < samholmes> cool beans. Thanks dude
06:04 < mdedetrich> samholmes: well the main point is, since UUID takes no input and its based on the current time
06:04 < samholmes> ChrisPartridge: wikipedia says no on md5
06:05 < mdedetrich> you can get a collision sooner than the UUID limit (w/e it is) if 2 machines at the exact same time generate a UUID
06:05 < mdedetrich> samholmes: thats for security reasons
06:05 < ChrisPartridge> samholmes: For what you are trying to do, md5 should be sufficient and cheaper than sha
06:06 < samholmes> ChrisPartridge: Ah, but wikipedia said there's a chance of collision in it's table, it doesn't say that about SHA2
06:06 < mdedetrich> where as if you have an input, you can just put the the mac address of the different machines, and you won't get a collision until you fill your digest
06:06 < mdedetrich> samholmes: every hash has a collision unless it uses an unlimited digest
06:06 < mdedetrich> sha2 also has collisions
06:07 < samholmes> I think that this whole hashing business is a bit unnecessary if I already have a string. I might just use the string directly as the HTML identifier
06:07 < mdedetrich> the issue over md5 is a security one, you can easily find out collisions to hack md5 table
06:07 < samholmes> I'm going to safe resources and not hash. I'm orbitting too much.
06:07 < mdedetrich> which is completely irrelevant unless you are using md5 to hash something like passwords
06:07 < mdedetrich> samholmes: I would still recommend using a hash
06:08 < mdedetrich> md5 is fine for your purpouses
06:08 < samholmes> mdedetrich: Alrighty.
06:08 < mdedetrich> just put in the mac address of your machine + whatever input
06:08 < samholmes> mac address?
06:08 < mdedetrich> as a single string input to the md5 function
06:08 < mdedetrich> and you won't get a collision any time soon
06:08 < mdedetrich> samholmes: well if you plan to horizontally scale
06:09 < mdedetrich> alternately any id that separates single server instances
06:09 < mdedetrich> however in your case I don't think you need a mac address
06:09 < mdedetrich> it depends on what you are using a hash for
06:10 < mdedetrich> in my case I just want a unique filename
06:10 < mdedetrich> and so in my case input is just going to be a mac address
06:10 < mdedetrich> + current time
06:10 < mdedetrich> (in milliseconds)
06:10 < mdedetrich> samholmes: if you think about it
06:10 < mdedetrich> if you horizontally scale your app
06:11 < mdedetrich> and 2 machines generate an ID at the exact same time, the hashes will be the same
06:11 < mdedetrich> and so I will get a conflict
06:11 < mdedetrich> hence the mac address
06:13 < samholmes> mdedetrich: I see.
06:14 < mdedetrich> samholmes: do you just want to generate a unique filename?
06:23 < mdedetrich> samholmes: actually a much better method
06:23 < mdedetrich> is just getting the hostname
06:23 < mdedetrich> samholmes: using os.hostname() 
06:23 < mdedetrich> just make sure hostname of each of ur machines is different
06:23 < mdedetrich> in most clouds that is gauranteed
06:27 < samholmes> mdedetrich: Well, I kind of want the same string to be the same hash at all times, ya know.
06:27 < mdedetrich> samholmes: what is ur input?
06:28 < samholmes> instead of this as the HTML ID: comments-something-1234, I'd like comments-ansof23o45now0sdk34n0t3n4305
06:28 < samholmes> mdedetrich: input is something-1234
06:28 < mdedetrich> samholmes: oh thats fine
06:28 < samholmes> But, I realize having a smaller string hashed into a larger string isn't really resourceful.
06:29 < mdedetrich> yeah your case is different, just use md5 with input string
06:29 < samholmes> CPU power used to make a larger string and bandwidth used..
06:29 < mdedetrich> in my case, I want something completely unique
06:29 < samholmes> I see
06:32 < lvx3> you'd be surprised how far you can whilst still wasting resources - on a far larger scale than just a big string :P
06:33 < mdedetrich> samholmes: md5 is a much faster hash than sha, so use that if you care about performance
06:33 < samholmes> mdedetrich: alright.
06:34 < mdedetrich> performance comes at a cost of security, there is no reason for your hashes to be secure
06:35 < mdedetrich> (for this case)
06:35 < ChrisPartridge> still talking about hashing!
06:35 < mdedetrich> for passwords you obviously should use sha or bcrypt 
06:35 < mdedetrich> ChrisPartridge: slap me please, I need to get back to work
06:35 < timeturner> anyone used node-validator here
06:35 < mdedetrich> timeturner: I did briefly
06:35 < timeturner> not sure how to best handle the errors from multiple checks within a route
06:36 < timeturner> what do you use for validation now? ^
06:36 < mdedetrich> In a process to convert a site, so I used node validator for both server and client side checks when data is sent over sockets
06:36 < mdedetrich> to handle multiple errors, I just put all errors in an error
06:36 < timeturner> it says that I can collect errors in an array
06:37 < timeturner> like if I'm checking email and first name and last name
06:37 < mdedetrich> since I was checking objects, I just iterated through every property in a javascript object
06:37 < mdedetrich> did appropriate check
06:37 < mdedetrich> and collected errors into an array
06:37 < mdedetrich> with a try/catch clause
06:37 < timeturner> ah
06:37 < timeturner> yeah I think I'll just use the try catch
06:37 < timeturner> Validator.prototype.error looks messy
06:38 < samholmes> why can't a hash function be used after calling digest?
06:38 < timeturner> if it's just one check then I'll probably let it bubble up to express's error function
06:38 < timeturner> which can send the appropriate response if it's a user error or server error
06:39 < mdedetrich> timeturner: its good to check for all issues on server side for logging reasons if you need to
06:39 < timeturner> yeah
06:39 < mdedetrich> client side you can just terminate after any failure and say ERRORZ
06:40 < mdedetrich> I'm using socket stream though, so I just send and retrieve js objects all the time
06:40 < mdedetrich> so that makes validation super easy
06:41 < timeturner> I plan to let the error handler log all errors that are server related and send 500 and render a 'try again' page and if it's a user error I'll send a 500 but since that route will only be accessed via XHR I'll send a JSON object with custom error codes and let the client side js show red boxes with the error in it
06:41 < ChrisPartridge> timeturner: there is a middleware for express, that leverages node-validator 
06:42 < timeturner> it looks kind of confusing though...
06:42 < timeturner> or more wordy
06:42 < timeturner> I'l try it though
06:43 < mdedetrich> tbd, you shouldn't need to use that middleware
06:43 < mdedetrich> *tbf
06:43 < mdedetrich> any middleware past your HTTP stack is often unneeded and of hinderance
06:43 < timeturner> yeah it kind of over complicates things
06:43 < mdedetrich> javascript/coffeescript is expressive enough
06:43 < mdedetrich> this aint java
06:43 < timeturner> plus I'm very touchy about validation and authentication
06:43 < timeturner> I built most of it myself
06:43 < samholmes> I remember rolling my own comet technique back in the day using PHP. Things have really come along sense then. haha
06:44 < timeturner> haha definitely
06:44 < samholmes> btw, my comet script was shit.
06:44 < samholmes> node.js _is_ my favorite technology of all time.
06:44 < timeturner> I remember getting confused when I first heard the word 'comet' being a web technology
06:44 < timeturner> lol
06:44 < samholmes> haha
06:45 < samholmes> I never looked at foaming clensers the same
06:45 < timeturner> hahaa
06:45 < samholmes> node.js > OS X
06:45 < samholmes> node.js > vagina
06:46  * samholmes is taking this too far.
06:47 < lvx3> node.js is pretty good though.
06:49 < dr0id> I am thinkin of runnin multiple node servers on my box
06:49 < dr0id> because I don't know how I can integrate this third party script with my app.
06:49 < dr0id> third party module*
06:51 < ag4ve> any recommendations for logging? looking at winston ant tracer and i guess the express/connect middleware ... anything else i should consider?
06:53 < guybrush> ag4ve: if you are into tj-style you might want to look at jog
06:54 < guybrush> also npm has its own logging-module
06:56 < ag4ve> guybrush: thanks. that looks like it maybe the thing for mongo. though, i was sorta looking for a human readible + output to whatever solution
06:59 < guybrush> i like to format the output for stdout/err to make it more readable and just pipe it to a file and use logrotate on linux
07:00 < guybrush> but i think winston is supercool too, there are just too many options :D
07:01 < ag4ve> guybrush: learn to love log management - see greylog2 (splunk if you like spending $$$)
07:01 < guybrush> well i think one can put to much effort into logging and make it all painfull afterall
07:02 < guybrush> parseable logs are usefull for sure
07:03 < guybrush> but who am i to tell other how to log - really i dont have huge deployments where i cant sleep without super-logging-managment whatever
07:04 < guybrush> so for my little things, piping into files works really ok :p
07:04 < ag4ve> now if there was some easy cli json parser that i could do: stream data.part | tail -f -- (and maybe colorize) that would be awesome and i'd use json for everything
07:04 < guybrush> oh i have seen something like that recently
07:04 < guybrush> ah yes underscore-cli or something
07:05 < ChrisPartridge> yeah, i recall seeing something similar recently too
07:05 < guybrush> there it is https://github.com/ddopson/underscore-cli
07:05 < guybrush> also https://github.com/hij1nx/cdir might be handy
07:05 < Venemo_N9> hi
07:06 < ag4ve> yeah, i'm there
07:07 < guybrush> but for advanced logging i guess winston is pretty good solution, or jog :p
07:08 < guybrush> also winston is super actively maintained (like all nodejitsu stuff) so its kind of future-save too
07:09 < ag4ve> i'm going to use the hell out of underscore-cli ... cdir looked neat too, but a bit too much i think
07:14 < ag4ve> well, i didn't get a lagging solution i like, but that json parser is awesome :)
07:19 < mdedetrich> is there any reason to use memcached over redid?
07:19 < mdedetrich> *redis
07:19 < `3rdEden> memcached has limit of 1mb that you can store per key, redis doesn't have this limit
07:20 < `3rdEden> also redis has some more features and greater distinction between data types.. memcached is just pure KV storage
07:20 < Venemo_N9> the node docs suggest that node has a single thread which serves all requests. is this true? 
07:20 < dr0id> it doesn't suggests that, it claims that!
07:21 < Venemo_N9> yep
07:21 < dr0id> memcached is fast!
07:21 < BennyLava`> dr0id stfu
07:21 < dr0id> ?
07:21 < BennyLava> don't ? me
07:21 < Venemo_N9> so how is it able to serve multiple requests in parallel, if it only has one thread? 
07:21 < `3rdEden> dafuq?
07:23 < dr0id> it doesn't do anything in parallel
07:23 < dr0id> `3rdEden: was that for me?
07:23 < `3rdEden> no at BennyLava
07:23 < Venemo_N9> dr0id, so, can it serve only one request at a time?
07:23 < dr0id> ok
07:24 < `3rdEden> there is absolutely no reason to respond like that
07:24 < dr0id> Venemo_N9: it can serve multiple
07:24 < BennyLava> we go way back `3rdEden, no worries
07:24 < `3rdEden> ._.
07:24 < Venemo_N9> dr0id, but how? 
07:24 < dr0id> it does 1 thing at a time, but does it fast. its based on an asynchronous event model.
07:24 < dr0id> I think CPU's work the same way.
07:25 < dr0id> no process blocks other. so if you read from mysql, that doesn't blocks anything.
07:26 < Venemo_N9> dr0id, how is that possible without threading? 
07:27 < Venemo_N9> I already know that it's based on a non-blocking event model. but I still don't understand how it is able to parallelize
07:27 < mbalho> 1 process per core and message passing
07:27 < Venemo_N9> mhm
07:28 < Venemo_N9> but then, how can one process accept multiple requests at the same time? 
07:28 < lvx3> it doesn't
07:28 < mbalho> it doesnt, it does that one after the other
07:29 < Venemo_N9> so how can you call that scalable? 
07:29 < dr0id> User -> GET Request to /post/foo-bar -> Node.js receives request -> now lets say the post's content has to be fetched from mysql, it sends a request to mysql, "hey buddy, can you give me this data" -> Mysql says "ok, I'll let you know when I have the data available for you" -> When data is available mysql notified Node -> Node says "thanks buddy" and sends does more processing sends to the user. as you can see everywhere there's callbacks. a callback is in
07:29 < freewil> doesnt node use threads in the core to implement the asynchronous I/O, but that is hidden from the user
07:29 < dr0id> probably
07:30 < Venemo_N9> hmm
07:30 < lvx3> <Venemo_N9> so how can you call that scalable? 
07:30 < mbalho> Venemo_N9: you should go read about event loops, theres tons of stuff written about them online
07:30 < lvx3> I never understand this line of questioning for just about anything
07:30 < [AD]Turbo> hola
07:30 < mmalecki> I/O is performed in parallel
07:30 < lvx3> usually when it's aimed a technology that has provably scaled to at least some degree
07:31 < mmalecki> node does in fact use threads quite heavily
07:31 < mmalecki> check how libuv works
07:31 < mbalho> hard drives (on average) are 100,000 times slower than cpus. cpus are the magical scaling sprinkles that power nodejs
07:31 < ChrisPartridge> mm sprinkles
07:31 < mbalho> there are tiny unicorns inside the cpus
07:31 < mbalho> thats what the u is for
07:31 < mmalecki> I should blog about it one day
07:31 < mbalho> and also the u in libuv
07:32 < Venemo_N9> so basically, lengthy operations are executed on separate threads, but then calls back your callback on the main thread. do I understand correctly? 
07:32 < dr0id> yes
07:32 < dr0id> and it is scalable by nature :P
07:32 < lvx3> I've found that questions of scale are mostly irrelevent, even when dealing with ~1M MAU.
07:32 < lvx3> I think people get too hung up on the twitter, instagram, tumblr et al
07:33 < dr0id> wanna follow me on twitter ?
07:33 < lvx3> since shifting time-zones I've stopped using twitter
07:33 < dr0id> oh
07:33 < lvx3> also being behind the great firewall makes it a little annoying :(
07:34 < Venemo_N9> but then, why is it better to create a new thread for every lengthy operation of every request better than just creating one thread per request? 
07:34 < Venemo_N9> I really want to understand how this works
07:35 < lvx3> Let it be known that I really hate IIS.
07:37 < Venemo_N9> lvx3, I've never met anyone who liked it
07:37 < nkuttler> Venemo_N9: try ##linux or ##c, that's kernel/hardware level stuff
07:37 < lvx3> Venemo_N9: I'm currently working with it... it's making me... scratchy.
07:38 < freewil> Venemo_N9, because a new thread for every request doesnt scale too well
07:38 < freewil> if you have lots of connections
07:38 < nkuttler> ##programming even
07:39 < Venemo_N9> freewil, okay, but now you have several threads per each request in node. how's that better? 
07:39 < dr0id> you don't
07:39 < dr0id> 5 requests doesn't leads to 5 threads
07:39 < dr0id> anyway bye
07:39 < freewil> well im not that familiar with all the internals, but im sure it uses more of a pool system then doing what you described
07:40 < Venemo_N9> freewil, are there some docs which explain how it works? 
07:40 < freewil> most certainly
07:40 < freewil> this really is the core of node.js https://github.com/joyent/libuv
07:43 < freewil> http://www.nodejs.org/about/
07:46 < Venemo_N9> freewil, ok, thanks
07:56 < ericelliott> I've been making browser-side packages available on npm. Now there's a new kid in town for browser-side packages called bower. Should I switch to that and stop polluting npm with my browser-packages?
08:02 < bcave> hello
08:04 < ericelliott> hi
08:07 < sdepold> hi ! i'm wondering if there is an event which is emitted when a http.server receives a 'listen' call
08:09 < sdepold> aha! server.on('listening')
08:13 < zizzyx> i'm having a bit of trouble using redis with node.js. I'm using Amazon's S3 feature of POST-ing directly to my bucket, and to do so i need to have the bucket filename already chosen by when the form is generated.
08:13 < zizzyx> so i need a way to synchronously check if a random string exists as a redis key, and generate new strings until one doesn't exist
08:13 < zizzyx> then send that to the view. what's the best way to do this? here is what i have so far https://gist.github.com/3696818
08:14 < zizzyx> my exists(key) function doesn't work
08:14 < franck34> hi
08:14 < zizzyx> i was just guessing on that one actually i realize now that the callback doesn't work how i'd assumed
08:15 < franck34> i'm looking for a js lib to validate IPv4 address, and netmasks. Any suggestions ?
08:26 < rio{> I am creating a application with node, and I have a module which have a bunch of helper methods specific for my application. Is it a good convention to put this module in the node_modules folder still?
08:45 < dr0id> socket.io - lets say a pad has 10 active users, I want only the owner to be able to edit that pad (broadcast). No one else should be able to emit. how do I go about doing that ?
09:01 < mdedetrich> anyone here use backspace cloud files?
09:30 < armetiz> jhi there.
09:31 < armetiz> I have a question aroud the "core" of Node.
09:31 < armetiz> I want to know, on a httpServer.listen(80) if the socket reservation append on the first tick or not.
09:32 < armetiz> This function is asyncrhnous, but the is the "listenning" process which is asynchronous.. 
10:10 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:13 < bcave> newbie javascript question: How can i split a string with multiple delimiters?
11:13 < bcave> e.g. split on comma, semi-colon or space
11:14 < bcave> im trying string.split(/ ,;/)
11:14 < bcave> wait wait. realised as i asked, bad regex
11:14 < bcave> (/[,; ]/)
11:16  * mainerror nods
11:17 < bcave> actually.. the correct form is /[,; ]+/
11:17 < bcave> otherwise you get elements that match a delimiter if there are double delimiters...
11:17 < bcave> string1; string2, string3 string4
11:17 < bcave> the spaces between 1 and 2 and 2 and 3 will be elements
11:28 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:19 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:32 < spion_> Are there any downsides to using request queuing instead of a callback, except for complexity? e.g. client = service.connectTo('url'); client.dostuff('param'); /* dostuff will be queued until a connection is established */
12:34 < Kneferilis> hello
12:34 < Kneferilis> I was wondering
12:34 < spion_> or even better, is there a library that generically converts service.connectTo('url', function(client) { client.dostuff('param') ... }) to var client = service.connectTo('url'); client.call('dostuff', 'param')
12:34 < Kneferilis> node.js has a standard library, like PHP has extensions?
12:35 < spion_> node.js has a minimal standard library and npm's module repository
12:35 < Kneferilis> npm?
12:35 < AAA_awright> Kneferilis: Node.js IS the library of functions on top of ECMAScript, whereas with PHP they're bundled together
12:36 < haggen> https://npmjs.org/
12:36 < AAA_awright> Then you can install Node.js modules on top of that, which works more like PHP frameworks like Zend or PEAR
12:36 < haggen> but now there's a new kid on the block https://github.com/component/component
12:36 < spion_> its less like PHP frameworks in the sense that PHP comes with everything, including the kitchen sink
12:37 < spion_> and frameworks straighten the mess
12:37 < spion_> instead node comes with a minimal core and modules create the mess
12:37 < spion_> :D
12:37 < AAA_awright> Not really, I only compile in gd, curl, XML, some other stuff
12:38 < AAA_awright> Well, maybe more than some other stuff: cgi cli curl embed fastcgi force-cgi-redirect fpm freetype gd json pdo phar simplexml suhosin truetype xmlreader xm mysql mysqli xml xsl
12:38 < AAA_awright> But considering that PHP can come with about a hundred extensions like that, it's not much
12:39 < be5invis> creationix: I will attend the Hu.js. But only Saturday and Sunday.
12:39 < spion_> can you compile PHP with 0 mysql support in it? :)
12:39 < AAA_awright> You can compile PHP with absolutely nothing
12:39 < spion_> with no standard functions other than echo?
12:40 < AAA_awright> Well I guess you'd have strings, array(), some of the date library
12:40 < AAA_awright> Maybe a good hundred functions or so
12:41 < spion_> thats okay. what I meant was there is a global namespace onto which everything is piled up; the fact that you can choose the elements in that pile doesn't change things much. 
12:42 < spion_> (especially not if the choice is at php compile-time)
12:42 < AAA_awright> Well, how many people regularly name their functions xml_parse
12:43 < AAA_awright> Polluting the global namespace really isn't a problem or pollution as such with PHP, due to it's function model
12:43 < spion_> two competing XML libraries?
12:44 < AAA_awright> It does become a problem where functions break naming conventions, like... gettext, which defines the l (lowercase L) function
12:44 < haggen> just found this http://dev.pedemont.com/libphp/
12:44 < AAA_awright> spion_: Yeah, sometimes it happens. Which is why I'm a huge fan of the require() semantics
12:45 < AAA_awright> haggen: I've wanted to use PHP as a template library, I mean, that's what it was designed for
12:45 < AAA_awright> It's a rather beautiful template language
12:46 < haggen> I see...
12:46 < haggen> For templating I think Ruby's syntax is the best
12:46 < spion_> so is Resig's JavaScript microtemplating: http://ejohn.org/blog/javascript-micro-templating/
12:47 < haggen> although the language is not designed for it, off course
12:47 < spion_> (as a bonus, this one also works client-side :D)
12:47 < spion_> and probably has the smallest footprint of all
12:48 < haggen> spion_: agreed, resig did a great job, but it looks ugly to close blocks like this <% } %>
12:48 < haggen> imo
12:49 < spion_> *shrug* never had a problem with ugliness as long as its superficial 
12:50 < dr0id> I coded a lot of node.js today, do I get a prize for that ?
12:50 < spion_> not unless you show it off :D
12:50 < AAA_awright> And there's already a well-established block syntax, <?blockname ?>
12:50 < AAA_awright> Those three characters are very close to each other
12:51 < AAA_awright> (on the keyboard)
12:57 < nkuttler> any recommendation for a logging app/lib? preferably configurable to use mail, files, etc
12:57 < zomg> winston seems quite alright
12:58 < nkuttler> yeah, was looking at that right now. just curious :)
13:03 < deoxxa> nkuttler: i can second the vote for winston, it's great
13:04 < nkuttler> deoxxa: ok, thanks guys
13:06 < haggen> https://npmjs.org/package/winston
13:52 < CIA-116> node: Ben Noordhuis master * r98d53ac / test/simple/test-crypto-padding-aes256.js : test: add AES-256 padding crypto test - http://git.io/7jNP6A
13:53 < CIA-116> node: Ben Noordhuis master * reaf1343 / src/node_crypto.cc : crypto: remove legacy openssl compatibility code - http://git.io/nJwu5g
13:58 < cesconix> hi all
14:02 < spion_> Once I pipe a stream to another, can I stop the piping? :)
14:05 < Protected> Hey. Anyone here familiar with fabric.js?
14:10 < deoxxa> spion_: sure, close the source stream
14:10 < spion_> i don't want the source stream closed. its piped to other streams which should still be receiving it.
14:11 < spion_> the only way I can think of is by adding an intermediary stream in-between
14:30 < C0de|Away> window 9
14:31 < C0de|Away> whups, stupid irssi
14:33 < jetienne> stagas: i see you are interested in bower, do you know if it is possible to do 'bower install http://example.com/component.json' ?
14:51 <@isaacs> spion_: there's no unpipe() function right now
14:51 <@isaacs> spion_: but there will be in 0.9 soon
14:51 <@isaacs> (not really an answer, i know)
14:52 < dr0id> anyone who has thoroughly used and compares sockjs and socket.io ?
14:52 < spion_> still its good to know. in the meantime I'll try doing it using a memorystream inbetween
14:52 < dr0id> compared*
14:52 <@isaacs> dr0id: ask mbalho 
14:57 < ZBZZN> Hello
15:08 < majek> dr0id: what do you want to know?
15:20 < CIA-116> node: isaacs v0.8.9-release * r0ccd875 / (ChangeLog src/node_version.h): wip - http://git.io/QOiFmA
15:22 < matbee> Why is my sessionID different for a socket.io connection and their expressjs request
15:22 < matbee> it makey no sensey
15:24 < gildean> matbee: two different connections
15:25 < CIA-116> libuv: Shigeki Ohtsu master * r57e6113 / (config-unix.mk src/unix/netbsd.c uv.gyp): unix: support missing api on NetBSD - http://git.io/4Lr9Zw
15:26 < matbee> The example that I found online just plain doesn't work, sadly.
15:28 < stagas> jetienne: probably
15:29 < stagas> jetienne: but making a repo is much better
15:29 < jetienne> stagas: better is relative :)
15:29 < jetienne> stagas: in my case 'package' are like 1k javascript and i got like 40 of them
15:30 < jetienne> stagas: 40 repo on github of each 1k… it isn't 'better' in my book :)
15:32 < mscdex> uh oh, github is choking again :(
15:33 < stagas> jetienne: the alternative is what? 40 urls?
15:34 < jetienne> stagas: bower install http://tquery.org/tquery.kinect/component.json
15:34 < jetienne> stagas: and the package is identified by its component.json and not by the git repo
15:38 < stagas> jetienne: so why not put it in github and do install jetienne/tquery.kinect
15:38 < dr0id> because github is down
15:38 < EyePulp> for realz?
15:38 < dr0id> https://status.github.com
15:38 < dr0id> go post on HN if you want quick karmas
15:38 < jetienne> stagas: because i got like 40 of those tquery.kinect
15:38 < jetienne> stagas: each of 1-2kbyte
15:40 < EyePulp> zoiks
15:42 < spion_> github :(
15:45 < stagas> jetienne: it's like the issue with the multiple components under one repo, it's just going to cause confusion and more problems
15:46 < jetienne> stagas: note that i give specific issues, and you replies by hand waving :)
15:47 < matbee> First my email wasnt working because godaddy's nameservers went black and now github is down
15:47 < stagas> jetienne: sorry for my tone, I experienced all those issues recently so I had to deal with how every one manages packages differently
15:47 < jetienne> stagas: i don't want to link underlying storage with the component.json. it seems good design in my book
15:47 < matbee> this is the week of sad
15:49 < niloy> I am wondering how come shebang(#) does not throw syntax error in node.js code?
15:50 < stagas> niloy: it's special cased
15:50 < niloy> what are the conditions?
15:50 < stagas> if there's a shebang don't throw syntax error
15:51 < niloy> does it match shebang with a regex?
15:51 < niloy> or can I include any comment after #?
15:52 < niloy> is it applicable on the first line of the file only?
15:57 < stagas> jetienne: one issue: what name does the dep dir going to have in order to not have collisions using http?
15:57 < stagas> jetienne: http-tquery.org-tquery.kinect/ or something
15:57 < jetienne> stagas: the one in the component.json ?
15:59 < stagas> jetienne: which can be anything the author wants, so collisions
15:59 < jetienne> stagas: indeed
16:00 < jetienne> stagas: like it is now :)
16:01 < stagas> jetienne: in bower, which is wrong :)
16:01 < stagas> jetienne: 'component' does user-repo/
16:03 < jetienne> stagas: I'm not sure it is best to ensure a global namespace
16:03 < jetienne> those are always issues
16:03 < jiggliemon> So I have a ton of modules in ~/.npm, why are these in there?
16:03 < jetienne> hard to handle
16:05 < stagas> jiggliemon: there's a registry for those
16:05 < jiggliemon> does npm actually used the modules in ./npm? or were these brought over from a previous install?
16:07 < CIA-116> node: isaacs v0.8.9-release * r005ae23 / doc/community/index.html : doc: Add Node Dublin to community page - http://git.io/9JWZUQ
16:07 < CIA-116> node: isaacs v0.8.9-release * re35cec5 / doc/index.html : doc: Put current version on homepage - http://git.io/GkI0xg
16:07 < CIA-116> node: isaacs v0.8.9-release * r6e0b8b1 / doc/index.html : doc: Fork me image should be full url - http://git.io/kaXR6g
16:07 < CIA-116> node: isaacs v0.8.9-release * r2b32e06 / (ChangeLog src/node_version.h): wip - http://git.io/n2_S5w
16:08 < jiggliemon> well npm must be putting junk in here
16:12 <@isaacs> jiggliemon: ~/.npm is a cache folder
16:13 <@isaacs> jiggliemon: npm help folders
16:13 < jiggliemon> So am I free to delete things in there? I tried some rogue module that I don't intend to use ever again. but it was left in ~/.npm
16:14 <@isaacs> jiggliemon: npm cache clean
16:14 < jiggliemon> I tried "npm remove -g crappymodule"
16:14 < jiggliemon> Ahhhh
16:14 <@isaacs> jiggliemon: npm cache clean crappymodule
16:14 <@isaacs> jiggliemon: i'd recommend not just deleting it entirely
16:14 < jiggliemon> isaacs: thanks.
16:14 <@isaacs> jiggliemon: even when you `npm cache clean`, it doesn't delete the ~/.npm/-/ folder which has search data and other goodies
16:15 < jiggliemon> yeah, i didn't want to.  Just wanted to remove the cruft
16:16 < haggen> so I'm in some module's dir with a package.json, how do I install its dependencies binaries in /usr/bin ?
16:17 < haggen> npm install -g didn't work
16:19 < Antaranian> hi ladies
16:19 < EyePulp> heyyyy Antaranian ….
16:20 < BennyLava> hi sexy
16:20 < jocafa> hey
16:20 < jocafa> ¬¬
16:20 < Antaranian> which image processing lib you'll suggest for resizing and watermarking ? 
16:20 < Antaranian> node-canvas, imagemagick wrapper or something else ?
16:20 < justicefries> graphicsmagick + gm
16:20 < haggen> I'd go with imagemagik
16:21 < justicefries> it uses streams
16:21 < Antaranian> what about end image quality ? 
16:21 < haggen> hm… sounds good, what are the differences between gm and im ?
16:23 < jergason> haggen: gm is supposed to be a better version of im
16:24 < haggen> jergason: good to hear that, thanks
16:24 < jergason> cleaner api i think
16:24 < jergason> i have used gm and it has worked fine in node
16:24 < jergason> api is a little weird though
16:26 < haggen> good :) about a year ago I had to create a bot to convert like 1500 scanned letters to printable pdfs with some bar code in it every day
16:29 < haggen> and all the optimizations I was doing to make the files small enough to be transferred over lan but still printable with the bar code took about 25s each image
16:29 < haggen> so 25*1500 = 10 hours of processing
16:30 < haggen> I was using imagemagick
16:30 < haggen> and python
16:33 < Antaranian> thanks guys
16:34 < Antaranian> justicefries: jergason: doing it with gm, thanks again
16:34 < Domenic> +1 gm
16:34 < jergason> Antaranian: np
16:45 < aslant> does crypto.randomBytes produce a 'more random' result than Math.random ?
16:46 < jocafa> probably
16:46 < jocafa> but i have an interesting article for you, aslant: http://baagoe.org/en/w/index.php/Better_random_numbers_for_javascript
16:46 < CIA-116> node: Ben Noordhuis master * rc8c638a / src/node_buffer.h : buffer: change prototype of Data() and Length() - http://git.io/xKBjww
16:47 < aslant> jocafa: why?
16:47 < jocafa> why what?
16:47 < bnoordhuis> aslant: it uses the system entropy pools, e.g. /dev/urandom and /dev/srandom
16:48 < bnoordhuis> aslant: Math.random otoh is just a mersenne twister iirc
16:48 < aslant> bnoordhuis: thanks
16:48 < BronzeByte> It probably uses Operation System level random
16:48 < BronzeByte> e.g /dev/urandom on unix
16:49 < BronzeByte> Java reads out /dev/urandom  and makes it into a number for example
16:49 < aslant> jocafa: I was asking on what basis you thought randomBytes would be more random. Thanks for the article
16:49 < jocafa> ah ok
16:49 < guor> this may change in V8 in a few years once Ivy Bridge's instruction set extension gets widespread :D
16:49 < aslant> BronzeByte: thanks for the info, v interesting. Will have a read of all this when I get some time this eve. 
16:50 < aslant> Cheers all
16:50 < BronzeByte> :-)
16:51 < tnorris> mmalecki: sure you realized this yesterday, but only IPC from child_process is blocking. I was able to setup a stream from stdin to stdout and pass information in a non-blocking way between processes.
16:53 < niloy> anyone else having problem installing sqlite3 with node 0.8.8?
16:56 < mmalecki> tnorris: ah, nice. yeah, I read the scrollback, it's good
17:02 < niloy> can someone suggest any module for sqlite?
17:06 < draginx> AAA_awright: you there and got a second? :)
17:07 < AAA_awright> draginx: Whatya need? :)
17:07 < draginx> May I PM? :)
17:07 < mscdex> niloy: i have a fork that has FTS4 support and is gypified
17:07 < mscdex> niloy: fwiw: https://github.com/mscdex/node-sqlite-fts
17:08 < niloy> mscdex, npm install https://github.com/mscdex/node-sqlite-fts?
17:08 < mscdex> yep
17:08 < mscdex> er wait
17:08 < mscdex> add /tarball/master to the end
17:08 < niloy> mscdex, npm install https://github.com/mscdex/node-sqlite-fts/tarball/master?
17:08 < mscdex> yeah
17:09 < niloy> does this require my machine to have g++ or c++ installed?
17:11 < niloy> mscdex, dude, its failing, g++ is required?
17:11 < mscdex> yes, you need a compiler :-)
17:12 < niloy> so do I need to rebuild again for a windows machine?
17:12 < mscdex> yes?
17:14 < niloy> mscdex, is there anyway I can just get the binaries for different OS?
17:16 < mscdex> no, but you could build for each platform you need once and just distribute those
17:16 < niloy> mscdex, ok thanks
17:17 < mscdex> there was some talk some time ago about having some kind of build farm for binary addons and somehow connecting that up with npm though
17:17 < mscdex> not sure what ever became of that
17:33 <@isaacs> mscdex: yes, that's still on the todo list
17:33 <@isaacs> mscdex: other things have been higher priority
17:39 < draginx> Would someone be willing to check out a little structure I made to convert express into more of an MVC format? :)
17:40 < AAA_awright> draginx: Don't ask to ask, just ask :p
17:40 < draginx> meh :P good point
17:40 < draginx> let me set up an example on github
17:41 < tnorris> anyone know how to detect what SIG* is sent to my node process?
17:41 < AAA_awright> tnorris: http://nodejs.org/docs/latest/api/all.html#all_signal_events
17:43 < TooTallNate> Benvie: so everything was going great until msvs got in the way :p
17:44 < Benvie> lol
17:44 < TooTallNate> which is unfortunate cause that's where this libffi gyp-ifying really would help
17:44 < TooTallNate> (no need for MozillaBuild, etc.)
17:44 < tnorris> AAA_awright: have a node process, and killing it with `killall -SIGHUP node`, but it's not being detected.
17:44 < Benvie> what was the issue?
17:44 < TooTallNate> Benvie: https://groups.google.com/d/topic/gyp-developer/8lxGTT8yUa0/discussion
17:45 < TooTallNate> Benvie: i think we'll get it solved, but i'm stuck for the moment
17:45 < AAA_awright> tnorris: does SIGTERM kill the processes? It's possible `node` isn't selecting those processes, because the argument list was modified at runtime, or something
17:45 < Benvie> hmm
17:45 < Benvie> someone responded
17:45 < Benvie> 12 minutes ago
17:46 < Benvie> 17
17:46 < TooTallNate> Benvie: ya so i guess that's one option
17:46 < TooTallNate> it would make things really easy
17:46 < Benvie> to not have to use mozilla build? oh definitely
17:46 < TooTallNate> i.e. preprocess the win32.S file into a win32.asm file
17:46 < TooTallNate> kinda lame but whatever
17:46 < devdazed> hi all, can i give a shamelss plug to a new package in here?
17:46 < Benvie> personally, I use mozillabuild now for everythin
17:47 < Benvie> all buildinh
17:47 < Benvie> but for most people it's a bridge too far
17:47 < Benvie> if I was going to make a module that I was distributing that used ffi I'd just include binaries with it, but I haven't yet
17:47 < Benvie> I might soon though
17:47 < tnorris> AAA_awright: frak. had nothing to do with not receiving SIG*. thanks anyways.
17:48 < devdazed> well fwiw, i created a new mocking library for node.  its a bit more dynamic that the others. https://github.com/devdazed/supermock
17:48 < AAA_awright> tnorris: So killall does identify the processes... And there's no `nohup` or anything?
17:48 < devdazed> im up for suggestions on features
17:49 < theallan2> Hello all - I've got a bit of an odd one. I need to get the IP address of the remote client, but the socket object doesn't appear to have a 'remoteAddress' parameter like the documentation says it should. I've put a dump of my 'request' object (from http createServer) here: http://pastebin.com/wwSUzfyQ
17:50 < AAA_awright> theallan2: It should be request.socket.remoteAddress()
17:51 < Benvie> http://code.google.com/searchframe#OAMlx_jo-ck/src/third_party/libvpx/libvpx.gyp&exact_package=chromium&q=%5C.asm%20file:%5C.gyp&type=cs  seems to have a bunch of notes on asm related stuff
17:51 < tnorris> AAA_awright: I was running the node processes using nohup, and killall does send SIGTERM to all the processes. useful for cleaning up socket files.
17:52 < AAA_awright> tnorris: Well there's your problem!
17:52 < TooTallNate> Benvie: i'm trying to see if they define a "rule" for .asm files or if that's handled automatically
17:52 < AAA_awright> nohup ensures SIGHUP never reaches the process
17:52 < tnorris> AAA_awright: ah, didn't know that.
17:53 < AAA_awright> Hence the name
17:53 < Benvie> seems like they use yasm for this
17:53 < Benvie> http://yasm.tortall.net/
17:54 < draginx> https://github.com/durango/trainjs Here's my attempt at making ExpressJS into MVC :) If any of you would take 5 minutes of your time to briefly take a look at it that would be awesome :D It's not suppose to replace railwayjs or anything crazy like that. Just something I was playing with :)
17:54 < tnorris> AAA_awright: but nohup doesn't prevent SIGTERM from being sent.
17:54 < TooTallNate> Benvie: https://gist.github.com/3700270
17:55 < AAA_awright> tnorris: Normally SIGHUP signals that the terminal to write data to is no longer available, and by default that terminates the process, nohup avoids that by catching it, as well as redirecting output to a file
17:55 < TooTallNate> Benvie: the top command is what the Makefile would run in MozillaBuild regularly
17:55 < TooTallNate> Benvie: the bottom two are what that gets translated into
17:55 < Benvie> I see
17:55 < tnorris> hm, thanks.
17:55 < TooTallNate> Benvie: so i think if I 1) preprocess the .S into .asm files and 2) define a rule for "asm" files to use "ml.exe" then we'd be good to go
17:56 < TooTallNate> i'm just thinking out loud here :p
17:56 < Benvie> yeah
17:56 < theallan2> AAA_awright: I would have swron that's what I was doing - but it works now! It s a property not a functino, but I've got the address. Thanks!
17:56 < Benvie> I'm searching now
17:58 < CIA-116> node: isaacs v0.8.9-release * r1c2982b / (doc/api/process.markdown test/simple/test-fs-watch.js): Update doc and test for sunos/solaris switch - http://git.io/QTXjKA
17:58 < CIA-116> node: isaacs v0.8.9-release * r84a0eac / (ChangeLog src/node_version.h): wip - http://git.io/Ex4TrQ
17:58 < samholmes> "(node) warning: possible EventEmitter memory leak detected. 11 listeners added. Use emitter.setMaxListeners() to increase limit.
17:58 < samholmes> Trace" Is there an event listener limit?
18:00 < TooTallNate> samholmes: it's just advisory
18:00 < TooTallNate> samholmes: you can set the limit higher if needed
18:00 < TooTallNate> but it's a warning that you *may* have a memory leak
18:00 < samholmes> I might.
18:00 < TooTallNate> a listener leak rather
18:00 < samholmes> Well
18:00 < samholmes> first:
18:01 < samholmes> Does the setMaxListeners just set the max before a warning is printed to stdout, or is there an actual limit enforced?
18:03 < tnorris> mmalecki: just fyi, by spawning (not forking) node children and using a pipe on stdin, my tests show throughput of ~500 MB/sec between processes.
18:03 < samholmes> Second: I might have listener leaks due to client-side server event registering. What I do is allow client-side callbacks to be registered to events on a server-side emitter. I do this using dnode. I asked here before whether this would leak, but didn't really get a definite answer. Will the callbacks registered to the emitter be garbage collected after the dnode connections close?
18:04 < ColdFushion> Can any help me? I'm trying to install the package tower, but I get the following error: Error git clone git://...coffee-script.git C:/localfile/ failed with 127
18:05 < mmalecki> tnorris: you're accepting data from a network socket?
18:05 < mmalecki> I'm wondering if you could dup2
18:06 < mmalecki> (do kind of a short between fds)
18:09 < CIA-116> node: isaacs v0.8.9-release * rb88c390 / (ChangeLog src/node_version.h): 2012.09.11, Version 0.8.9 (Stable) - http://git.io/UnTUGg
18:09 < draginx> Error: Can't set headers after they are sent. <-- I'm getting this by doing res.render('404', {status: 404})
18:09 < draginx> any ideas why?
18:10 < ccowan> I've decided that I just realy don't know how to write unit tests (beyond testing really simple functions).
18:10 < ccowan> everything turns into an integration test.
18:11 < devdazed> ccowan: that why there is mocking ;)
18:11 < tnorris> mmalecki: i'm piping a file in memory to a network socket on a node process, which is then sending every data event to another child process.
18:11 < ccowan> is there a mocking library for MySQL?
18:12 < devdazed> you create your own mocks
18:12 < tnorris> the speed makes sense. I get a maximum throughput of 1GB/sec, so half the pipe is being used to bring it in the other half is used to send it elsewhere.
18:12 < devdazed> then before the tests just change the prototype
18:12 < devdazed> Mysql.prototype = myMock
18:12 < devdazed> after its over change it back
18:12 < ccowan> http://stackoverflow.com/questions/8389149/how-do-you-mock-mysql-without-an-orm-in-node-js
18:12 < devdazed> that works 
18:15 < Benvie> hmm
18:15 < Benvie> TooTallNate: could you just package those asm files? My build produces them
18:15 < Benvie> in libffi/src
18:15 < TooTallNate> Benvie: ya that's the idea
18:16 < TooTallNate> preprocess the .S files into .asm
18:16 < TooTallNate> commit into repo
18:16 < TooTallNate> profit
18:18 < Benvie> the rule in msvcc.sh is "*.S) src=$1  assembly="true""
18:18 < Benvie> so I guess they can be compiled by cl
18:19 < Benvie> ppsrc="$outdir/$(basename $src|sed 's/.S$/.asm/g')"
18:20 < Benvie> lol it just renames thenm
18:20 < TooTallNate> no that can't be right
18:20 < TooTallNate> it runs the two commands i posted before
18:20 < TooTallNate> cl.exe followed by ml.exe
18:20 < Benvie> oh tyeah here it is
18:22 < Benvie> but still ml and cl are both available to visual studio
18:22 < djazz> http://djazz.mine.nu/lab/rpi/remote/
18:23 < djazz> ^^
18:23 < djazz> https://github.com/daniel-j/node-nxt-bot
18:24 < duko> if I'm seeing chars like this in a web page: ÃÃ±i,
18:24 < duko> how can i determine if the browser is displaying this incorrectly
18:28 < tnorris> mmalecki: have an idea how to accomplish a dup2? you can share stdio between processes, but that wouldn't allow for divvying up data. since everything would be sent to all children.
18:29 < mmalecki> tnorris: yeah, you'd have to get child's stdin fd
18:29 < mmalecki> but I'm not sure, I'll try that and get back to you
18:29 < tnorris> that would be sweet.
18:34 < therealkoopa> Do most people just include external script files using <script src='...'> for dependencies on random JS libraries (d3, raphael, etc.) if they are using browserify?
18:34 < therealkoopa> And just use browserify for custom app code requires?
18:37 < xtianw> therealkoopa: There are npm packages for a lot of that stuff
18:38 < therealkoopa> What about requiring backbone templates (handlebars). I'm currently using requirejs, and I'm getting very annoyed. Thinking about making the switch to browserify
18:42 < xtianw> therealkoopa: Not sure the best way to do that. I tend to embed those into the HTML.
18:51 < jmpe> What is the correct way to accomplish this in node on windows: fs.mkdir(\\10.10.10.10\foo\bar)?
18:53 < jmpe> UNC is causing an unexpected token error.
18:54 < jmpe> Is there a Path method for UNC?
18:59 -!- ServerMode/#Node.js [+o ryah] by pratchett.freenode.net
19:00 < CIA-116> node: isaacs v0.8 * r362189a / src/node_version.h : Now working on 0.8.10 (+7 more commits...) - http://git.io/DjAx_Q
19:01 < superjoe> does https.request do peer verification by default?
19:01 -!- mode/#Node.js [+o ryah] by ChanServ
19:11 < iyp> Can anyone point me in the right direction for learning how to document a nodejs app's data model?
19:16 < TooTallNate> Benvie: can you try out this "gypify-libffi" branch and let me know what happens?
19:16 < TooTallNate> win-64 bit support not ready yet
19:17 < Benvie> yeah I can shortly
19:20  * prettyrobots coughs
19:20 < mscdex> gyp ftw!
19:46 < samholmes> mscdex: is gyp short for gypsy?
19:54 < mscdex> samholmes: gyp is short for gyptastic
19:54 < Dieterbe> hey guys, i need to do the operation "check if member is in a set, if not add it" atomically. i.e. without getting interrupted by anything else. (for the set i use https://github.com/PeterScott/simplesets-nodejs ) so i'm looking for some mutex/lock library, but that might not even be needed?
19:58 < samholmes> mscdex: which  is short for gyptasticle?
19:59 < iyp> Dieterbe: I know mongodb has an $inc update that operates atomically 
19:59 < BennyLava> mmm, testicle
19:59 < BennyLava> oh, wait.
19:59 < iyp> Dieterbe: http://www.mongodb.org/display/DOCS/Updating#Updating-%24inc
20:01 < Dieterbe> iyp: ok.. but i don't really want to depend on mongodb?
20:01 < jocafa> tjholowaychuk:  you have cursed me. i now *need* a makefile for pretty much every project. *glare*
20:01 < tjholowaychuk> jocafa :D
20:02 < jocafa> even with simple rules that just curl down js libs i need into a support/ dir
20:03 < addisonj> Dieterbe: you are looking to do this in memory? node is single threaded, so there is no issues with worrying about a mutex/lock...
20:04 < iyp> tjholowaychuk: do you have a best practice to recommend for documenting data structures used by node apps?
20:05 < iyp> Dieterbe: It's a easy/solid database as far as I've used it. Can understand if you don wanna add the extra weight tho.
20:08 < Dieterbe> addisonj: hmm that's correct. my problem is as follows: i want to process files as they appear on the filesystem (with https://github.com/crcn/node-watchr) as well as any existing files when my program starts (fs.readdir), to make sure i don't miss any file, i launch the inotify watchr first, and then do the fs.readfile, meaning there's a small timeframe where i could process the same file twice
20:08 < Dieterbe> addisonj: so that's why i add all the files being processed into a simpleset
20:09 < Couto> does anyone know where can I find more info on "build: fix openssl configuration for "arm" builds (Nathan Rajlich)" about this new v0.8.9 build ?
20:09 < Couto> I can't seem to find any related issue on github
20:09 < Couto> =(
20:10 < nathan7> goddamnit, I need to murder everyone else called nathan
20:11 < addisonj> Dieterbe: then just check your files for a dupe and add if not there, node is single threaded, so you can be gurantted that both those operations will complete before any other callbacks are called
20:13 < Dieterbe> addisonj: so basically node will always execute my synchronous statements until it has no more, and only then it'll start processing events and execute more callbacks etc?
20:14 < addisonj> correct, thats how the event loop works
20:14 < Dieterbe> cool thanks
20:14 < tnorris> mmalecki: what you said about sharing the child's fds just clicked. that is a freakishly awesome idea. by sharing io no data is replicated across the bus and I'd achive a full 1GB/sec.
20:14 < addisonj> and why node is sucky for lots of sync stuff, it blocks execution of more async stuff ill the sync completes
20:14 < lohkey> for real time applications, sync stuff is really only acceptable during startup procedures
20:15 < lohkey> during runtime everything should be as async as possible
20:15 < mmalecki> tnorris: hahaha, awesome :). care to share the code?
20:16 < tnorris> mmalecki: i'm working on it right now. i'll share as soon as I've got it down.
20:16 < lohkey> i do a decent amount of sync IO in node during startup to load controllers and do some config processing and such
20:33 < pyrotechnick> morning
20:37 < samholmes> what are some of the biggest tech shows in the web industry?
20:43 < Taar779_w> Can someone give me a good reason why you should use "use strict"?
20:47 < diminoten> hey can someone link me to a doc that explains how to configure ssl on a very basic server?
20:48 < trb> diminoten: define basic server
20:48 < diminoten> https.createServer...
20:48 < trb> sorry, very basic
20:48 < mscdex> Taar779_w: because you especially care about the behavior it provides?
20:49 < BronzeByte> I recommend you a reverse proxy like nginx to do all that fancy stuff for you, diminoten
20:49 < trb> diminoten: I am of the opinion that ssl should not be done in node
20:49 < diminoten> I just want to get it to cache sessions
20:49 < diminoten> it's for testing
20:49 < diminoten> not production, quick and dirty
20:49 < diminoten> I see your points though
20:49 < trb> nginx would be much better for you
20:49 < diminoten> why
20:49 < BronzeByte> its easier 
20:49 < BronzeByte> for ssl
20:49 < trb> no pissing around in node config
20:50 < BronzeByte> and more robust
20:50 < diminoten> I've already gotten the ssl part working
20:50 < trb> and more robust like bronze says
20:50 < diminoten> I jsut want to cache sessions and in case I wasn't clear
20:50 < diminoten> this is for testing
20:50 < trb> diminoten: and you have 443 working without root?
20:50 < diminoten> I almost literally need it to work once then throw it away
20:50 < BronzeByte> Funny how you say that
20:50 < diminoten> meh I jsut type 'node app.js'
20:50 < diminoten> don't need root
20:51 < diminoten> seems to work
20:51 < trb> diminoten: sudo node app.js then, 443 is a special port
20:51 < diminoten> no sudo
20:51 < diminoten> anyway 
20:51 < trb> then you are doing something wrong
20:51 < diminoten> so you're telling me it's impossible to tell node to cache sessions?
20:51 < BronzeByte> trb, every port below 1024 needs root
20:51 < trb> BronzeByte: oh, don't tell me, tell diminoten 
20:51 < diminoten> oh tht's why
20:51 < diminoten> not using port 443
20:51 < diminoten> anyawy
20:52 < BronzeByte> trb, 443 is not a special port, its a special range ;-)
20:52 < trb> BronzeByte: I'm a unix guy
20:52 < diminoten> so no idea how to configure this
20:52 < trb> special is my way of saying 'can\'t do it without special permissions'
20:52 < diminoten> I don't do it
20:52 < diminoten> I use a different port
20:52 < trb> diminoten: so you were speaking fibs
20:53 < trb> ?
20:53 < diminoten> I never said port 443
20:53 < diminoten> you did
20:53 < BronzeByte> trb, dont call yourself an unix guy please, rather give your Operation system name: BSD/Mac Os X/Linux
20:53 < diminoten> Linux isn't an OS!
20:53 < diminoten> GNU/Linux!! /rabble rabble
20:53 < BronzeByte> oh god
20:53 < BronzeByte> Linux is an os..
20:53 < trb> BronzeByte: heh, fbsd,obsd,gnu-linux
20:53 < diminoten> ANYWAY
20:53 < BronzeByte> made by Linus Walter in the 20th century
20:53 < diminoten> now that we've solved the mystery of the escalated priveleges
20:54 < Robdgreat> Linux Anlucy
20:54 < Robdgreat> *Linus
20:54 < BronzeByte> I have such a goodmemory
20:54 < BronzeByte> *cough*
20:54 < diminoten> how bout that server-side session caching?  
20:55 < Robdgreat> I prefer server-side session ka-ching
20:55 < Robdgreat> ka-CHING!
20:55 < trb> diminoten: just get rid of node ssl
20:55 < trb> proxy the thing
20:55 < diminoten> no
20:55 < BronzeByte> Linus Torvalds is his name, Robdgreat
20:55 < trb> why?
20:55 < trb> diminoten: that is, not bronze
20:55 < diminoten> because starting two processes is silly
20:55 < Robdgreat> BronzeByte: I know, I thought you were joking
20:55 < trb> diminoten: so is running ssl in node
20:55 < diminoten> using two apps here is shotgunning a fly
20:55 < diminoten> no it's not
20:56 < diminoten> what disadvantage applies to me?
20:56 < Robdgreat> Linus Anlucy = Linus and Lucy
20:56 < trb> why would you run node naked anyway?
20:56 < diminoten> because I'm not writing a produciton app
20:56 < diminoten> I'm in QA
20:56 < trb> so
20:56 < diminoten> so
20:56 < diminoten> naked node is good enough
20:56 < trb> QA would suggest that you need something QA-able
20:56 < diminoten> what are the downsides?
20:56 < Robdgreat> BronzeByte: but it's still not an OS
20:56 < diminoten> why wouldn't I run node naked?
20:56 < owen1> i try to install contextify and get: /home/t/lib/node_modules/npm/bin/node-gyp-bin/node-gyp: Permission denied
20:57 < owen1> any ideas?
20:57 < BronzeByte> robdgreat, it is an os...
20:57 < Robdgreat> It's a kernel.
20:57 < Robdgreat> not the same thing
20:57 < TooTallNate> owen1: don't use sudo
20:57 < BronzeByte> robdgreat, unix is operation system family, linux is operation system and debian/centos and so on are distros
20:57 < trb> diminoten: your node is naked? has it got a porn site yet? (just kidding, imagination going wild)
20:57 < owen1> TooTallNate: i don't: npm install contextify
20:57 < diminoten> you're silly :D
20:58 < Robdgreat> BronzeByte: No.
20:58 < Robdgreat> Linux is a kernel. Period.
20:58 < BronzeByte> Hell no
20:58 < BennyLava> No
20:58 < trb> diminoten: am a bit drunk, but really, I wouldn't run node plain on the net
20:58 < BennyLava> that's the *Linux kernel* lol
20:58 < diminoten> I won't
20:58 < BronzeByte> Linux is a basic operation system
20:58 < diminoten> I promise
20:58 < TooTallNate> owen1: there's something up with your permissions it sounds like then
20:58 < BronzeByte> and has its own kernel
20:58 < diminoten> internal testing
20:58 < trb> node wants to run a a separate user, then use another service to proxy to it
20:58 < Robdgreat> argue with a fool and people can't tell the difference. I'm done
20:58 < owen1> TooTallNate: any idea where to start investigating?
20:58 < owen1> i know i also can't install with -g 
20:59 < trb> owen1: sudo
20:59 < xtianw> I proxy node to node. Flagrantly irresponsible.
20:59 < TooTallNate> owen1: well -g is only for modules that install something into your PATH, so yes, don't use -g for contextify
20:59 < diminoten> rofl I feel like this is JUST a flag
20:59 < owen1> trb: oh. so globals are suppose to be installed with sudo?
20:59 < diminoten> https://groups.google.com/forum/?fromgroups=#!topic/nodejs-dev/27uutrEQChU
20:59 < BronzeByte> robdgreat, you're an idiot, every operation system has its own kernel
20:59 < trb> owen1: do you have root?
21:00 < owen1> TooTallNate: i can't install other packages with -g. not contextify
21:00 < trb> and when -g fails, what does it say?
21:00 < diminoten> according to that link, server side session caching does exist
21:00 < BronzeByte> windows, mac, linux, all its own kernel
21:00 < owen1> trb: i don't know. how to make sure i have root?
21:00 < trb> does it say it can't write to a dir needing higher priveledges
21:00 < trb> ?
21:00 < trb> owen1: root is something to be used sparingly
21:00 < timeturn> what do you guys use for emails?
21:00 < timeturn> mailchimp?
21:00 < BronzeByte> as-in?
21:00 < trb> timeturn: telnet :p (no not really!)
21:01 < BronzeByte> oh, client/api/liv
21:01 < BronzeByte> *lib
21:01 < diminoten> where's the node.js config file?
21:01 < owen1> trb: http://pastebin.com/spfcHmET
21:01 < BronzeByte> I used telnet to mail once :D
21:01 < diminoten> better yet, where are docs for the node.js config file
21:01 < BronzeByte> was testing a vuln in my SmTP server
21:01 < timeturn> I'm using sendmail directly from my server right now
21:02 < owen1> trb: notice i don't use sudo - npm install contextify
21:02 < trb> owen1: pm
21:02 < BronzeByte> timeturn, i love how they always get flagged as spam
21:02 < timeturn> but obviously smtp is so complicated that sometimes it passes through google's server and sometimes not yeah
21:02 < timeturn> but I'm thinking that it has to do with reverse dns thing
21:03 < BronzeByte> timeturn, its your spf record in dns
21:04 < BronzeByte> it also checks if the ip it came from matches the domain name used as From
21:04 < timeturn> SPF?
21:04 < timeturn> I'm with rackspace right now and domain is from godaddy (also for now)
21:05 < timeturn> planning on moving to linode and this other domain service to manage the domain
21:05 < timeturn> is it a setting in either one of those?
21:05 < diminoten> linode got hacked badly
21:05 < diminoten> fairly recently
21:05 < trb> diminoten: yeah?
21:05 < diminoten> yup
21:06 < styol> timeturn: i just tried nodemailer yesterday and it is kinda sweet… installs more dependencies that i would prefer but otherwise pretty coolies
21:06 < trb> diminoten: how badly?
21:06 < timeturn> yeah I'm using nodemailer with sendmail ATM
21:06 < trb> and any linky shit?
21:06 < timeturn> but just directly from my ip
21:06 < diminoten> heroku!!!
21:07 < timeturn> but I have the sender as: noreply@myUpcomingDomain.me
21:07 < styol> timeturn: well, it supports smtp (i.e. any server that supports smtp) as well as amazon ses
21:07 < timeturn> which passes through google and yahoo fine
21:07 < timeturn> but some of the emails
21:07 < timeturn> take like 15 mins
21:07 < timeturn> to show up
21:07 < timeturn> while others take secoss
21:07 < timeturn> seconds*
21:11 < BronzeByte> timeturn, i have that
21:12 < BronzeByte> spam flagged mails on outlook take 30 seconds, gmail takes like 10 MInutes
21:13 < timeturn> maybe I just need to point mu domain to my ip and setup the reverse dns properly
21:13 < BronzeByte> reverse dns is not even involved
21:13 < timeturn> why do people use mailchimp if everything can be done through postfix anyways
21:14 < timeturn> postfix/sendmail
21:14 < BronzeByte> as my friend has for his personal vps a reverse dns ending in .level3.backbone.fbi.gov
21:14 < matbee> I can't seem to tie the sessionID from a socket.io connection to the express sessionid... at all.
21:14 < matbee> Has anyone done this?
21:14 < timeturn> hmm, I thought rackspace recommended doing something with reverse dns to prevent the email from going into spam
21:14 < matbee> Is the only way to send a message via socket.io from the client -> server with a unique id?
21:15 < matbee> It was with my understanding that this example: https://github.com/DanielBaulig/sioe-demo <-- was able to do it... but the sessionID's are completely different...4
21:23 < matbee> Has anyone successfully gotten an Express sessionID to be matched with a socket.io SessionID?
21:24 < jcrew> matbee: are they not different sessions?
21:24 < matbee> jcrew, totally different sessions, but how do we match them together other than sending a unique id from the client to the server?
21:25 < jcrew> why not send a uid to the client?
21:25 < jcrew> i mean, why do you not want to do that?
21:25 < matbee> jcrew, just because it doesn't feel right
21:25 < jcrew> wouldn't it be better in case the client is occassionally connected (ie has to reconnect, transparently to the user)?
21:25 < matbee> I don't think the client should have the control at that point
21:26 < jcrew> how does the client have control at that point?
21:27 < matbee> Because the client must store the UID, connect via socket.io, and then send a socket.io message containing that uid again...
21:27 < matbee> but I must do what I must do
21:27 < jcrew> so if they're reconnecting they need to do that anyway, because the session id would change otherwise
21:28 < jcrew> does socket.id stay the same between server/client?
21:34 < EyePulp> jcrew - it would almost have to, wouldn't it?
21:40 < mbalho> dshaw_: you should distribute a robot version of each nodeup episode that is the stenographer output piped into `say`
21:41 < MartinCleaver> Hi - I need to provide a proxy for a source web server that protects its resources behind session-based authentication. 
21:41 < MartinCleaver> The proxy simply needs to instead protect those resources behind basic authentication.
21:41 < MartinCleaver> Should I be using https://github.com/nodejitsu/node-http-proxy ?
21:42 < MartinCleaver> I just posted https://github.com/nodejitsu/node-http-proxy/issues/307
21:42 < pyrotechnick> it'd be a good start but it's probably overkill
21:42 < pyrotechnick> try not to spend too much time worrying about what you should be using and just do it :)
21:42 < MartinCleaver> well, I tried, but I'm out of practice, sorry to admit
21:43 < pyrotechnick> let me find you something more simple
21:44 < MartinCleaver> thanks
21:45 < dshaw_> mbalho: https://gist.github.com/3693327#gistcomment-570310
21:45 < dshaw_> Listening to it now.
21:45 < dshaw_> Makes more sense than reading the text.
21:48 < pyrotechnick> MartinCleaver: this is fairly old now but it looks like it would work https://gist.github.com/824818
21:49 < matbee> How easy is it to extend ExpressJS's request and response objects in their .get/.all..etc... callbacks?
21:49 < pyrotechnick> basically you make a http server, and on any request you make a request to your backing server
21:49 < pyrotechnick> fairly straight-forward
21:49 < MartinCleaver> here's what I tried -- https://gist.github.com/ac3c524cb5f71d02d4c7 - brain needs more practice!
21:49 < pyrotechnick> yes that's on the right track
21:50  * MartinCleaver looks and thinks
21:50 < dshaw_> mbalho: http://cl.ly/0y0l101g0u1j
21:50 < pyrotechnick> while you're trying to learn though request and express hides stuff / introduces alot of voodoo
21:50 < pyrotechnick> it might be better to roll with just node's core http
21:50 < Antaranian> hey ladies
21:51 < pyrotechnick> MartinCleaver: surely nginx or something is a better choice for this though right?
21:51 < pyrotechnick> it seems to be reinventing the wheel
21:51 < MartinCleaver> Yeah. In the request I ended up writing to a temp file, but then couldn't serve the file in the same moment that the request came in
21:52 < owen1> "sudo npm install" => sh: /home/t/lib/node_modules/npm/bin/node-gyp-bin/node-gyp: Permission denied  WTF?
21:52 < pyrotechnick> that's messed up
21:52 < pyrotechnick> :p
21:52 < owen1> WTF NODE
21:52 < thealphanerd> http://chunkhost.com/r/alphaChunk (this is a referal link)
21:52 < MartinCleaver> y, then I figured I was just wasting time
21:52 < thealphanerd> free 128 meg ram 3 gb disk hosting for life
21:52 < owen1> why i can't install contextify?
21:52 < TooTallNate> owen1: try something like `sudo chmod -R 777 /home/t/lib/node_modules/npm`
21:52 < thealphanerd> you sign up with Facebook, but can immediately reset password and revoke permissions
21:52 < owen1> TooTallNate: will do!
21:53 < pyrotechnick> MartinCleaver: http://forum.nginx.org/read.php?2,214550,214624
21:53 < pyrotechnick> that kind of thing
21:53 < tnorris> anyone have a tip on how to pipe data from a parent's Stream socket to a child process's stdin?
21:54  * MartinCleaver looks in http://wiki.nginx.org/Modules for session based login stuff
21:55 < MartinCleaver> http://forum.nginx.org/read.php?2,214550,214624 is basic auth in front of basic auth
21:56 < Antaranian> guys, anyone here used gm on GraphicsMagick ?
21:56 < drudge_> thealphanerd: wtf man at capacity
21:56 < thealphanerd> reary?
21:56 < thealphanerd> saw it on reddit freebies
21:56 < Antaranian> can't find the proper method to set opacity for image
21:56 < thealphanerd> crappy
21:56 < thealphanerd> should be deploying soon I hope
21:57 < thealphanerd> drudge_: at the very least you get some free dns for now
21:59 < owen1> TooTallNate: http://pastebin.com/aafzRVdn
22:00 < TooTallNate> owen1: what does `python --version` output?
22:01 < owen1> TooTallNate: Unknown option: --Unknown option: -e and more..
22:10 < spion> so uhh
22:10 < spion> is there a pass-through stream for node?
22:13 < kuja> spion: what do you mean?
22:13 < spion> kuja, I mean a stream which just passes its input to its output
22:15 < TooTallNate> owen1: did you get my response earlier? connection cut out
22:15 < TooTallNate> be sure you're on python 2.6 or 2.7
22:16 < spion> kuja, I need it to "break" a pipe. somestream.pipe(passthrough).pipe(destination); /* later */ passthrough.destroy();
22:16 < kuja> spion: oh, sorry not sure :/
22:17 < spion> :/
22:20 < pooya> looks like "domains" are not working when using C++ addons, right? or is there anything I need to do to get them working...
22:26 < tnorris> anyone have an idea how to pipe a tcp socket to the processes stdin?
22:27 < bnoordhuis> tnorris: conn.pipe(proc.stdin)?
22:30 < tnorris> bnoordhuis: i'd think so, but I don't detect anything on process.stdin.on('data'
22:30 < tnorris> i'm looking to pipe all data from the connection directly to the processes stdin.
22:31 < bnoordhuis> tnorris: i'd check with strace or dtruss if there's actually data going back and forth between the parent and the child process
22:32 < tnorris> bnoordhuis: to simplify the task i'm just trying to read from stdin on the same process, not on a child.
22:32 < tnorris> still nothing.
22:32 < bnoordhuis> tnorris: ah, that's a somewhat different case
22:32 < bnoordhuis> process.stdin is tied to a file descriptor that's only read from
22:33 < bnoordhuis> you could use conn.pipe(process.stdout) instead
22:33 < tnorris> bnoordhuis: ah, ok. i'll give that a try.
22:36 < tnorris> bnoordhuis: ok, getting somewhere.
22:36 < bnoordhuis> good :)
22:39 < tnorris> bnoordhuis: ok, so now I'm trying to pipe the socket Stream data directly to the stdin of the child process.
22:39 < spion> found it, event-stream
22:39 < tnorris> any tips?
22:39 < owen1> TooTallNate: yeah, python 2.4.3
22:40 < TooTallNate> owen1: ok so you need to upgrade
22:40 < owen1> TooTallNate: ok. thanks!
22:41 < TooTallNate> Benvie: so it seems like the win32 build works great, win64 is close, but not yet
22:44 < owen1> TooTallNate: python 2.7 was available for the node installation. is it also needed to install some packages?
22:44 < TooTallNate> owen1: yes, to build any native module, you need python 2.6 or 2.7
22:47 < bnoordhuis> tnorris: https://gist.github.com/3702743 <- try something like that
22:48 < tnorris> bnoordhuis: ok, one sec.
22:51 < tnorris> bnoordhuis: that got me half way there. thanks a ton.
22:52 < bnoordhuis> tnorris: my pleasure :)
22:55 < CIA-116> node: Bert Belder openssl-1.0.1c-wip * r09a5bae / (11 files in 2 dirs): openssl: remove obsolete patch files (+13 more commits...) - http://git.io/nCfRAA
22:58 < tnorris> bnoordhuis: you know if there is a way to un-pipe?
23:00 < pyrotechnick> am i crazy or have heaps of the node blog posts been deleted
23:00 < pyrotechnick> http://blog.nodejs.org/
23:00 < pyrotechnick> there's only posts for 0.8.0 and 0.8.9
23:01 < bnoordhuis> tnorris: no. that is, i know and you can't
23:01 < bnoordhuis> it's a feature that gets requested from time to time but it's kind of hairy to implement
23:03 < kcbanner> I'm trying to install a module that uses node-waf. The problem is waf can't find my node path or node prefix. I am using node 0.8.8. from ports.
23:04 < kcbanner> I know I can use NODE_PATH but what do I use for node prefix?
23:05 < tnorris> bnoordhuis: ok, well so it's going well. i'm able to transfer from parent to the child process using the entire bus (~ 1GB/sec).
23:05 < issa> hello
23:12 < tnorris> bnoordhuis: well, you really know what you're talking about. what i'm trying to do is create several children and pipe data from a socket to each one. every time data is sent the pipe shifts to the next.
23:12 < bnoordhuis> pyrotechnick: they're here, it's kind of confusing -> http://blog.nodejs.org/release-0.8/
23:12 < tnorris> this way there's no overhead of going through the parent process first, then to the child.
23:13 < pyrotechnick> bnoordhuis: how'd you get there?
23:13 < bnoordhuis> pyrotechnick: i asked isaacs :)
23:13 < bnoordhuis> tnorris: you can do that but not with .pipe(), it's too simplistic for that
23:13 < pyrotechnick> that's not just kind of confusing
23:13 < pyrotechnick> that's sorcery
23:13 < tnorris> heh, well bugger. means i'm barking up the wrong tree. where else should I look?
23:14 < bnoordhuis> tnorris: event listeners for the 'data' and 'close' events
23:14 < spion> Once you pipe a stream to other_stream, is other_stream still writable by other means?
23:14 < bnoordhuis> spion: yes
23:15 < tnorris> bnoordhuis: is that what ipc uses?
23:15 < TooTallNate> Benvie: got win64 working :)
23:15 < addisonj> what's this all about? https://groups.google.com/forum/?hl=en%3Fhl%3Den&fromgroups=#!topic/nodejs/FCsTCopm_dE 
23:15 < bnoordhuis> tnorris: yes. it does simple write()s and attaches a couple of event listeners
23:16 < bnoordhuis> tnorris: that's actually all pipe() is too
23:16 < bnoordhuis> only tailored for one specific use case
23:17 < tnorris> bnoordhuis: ah, because ipc is blocking, which screws performance. but that's not because of event listeners, but something else?
23:18 < tnorris> and thanks again for all the help. this is immensely useful.
23:18 < bnoordhuis> tnorris: depends on what kind of ipc we're talking. what the cluster module uses, for example, is non-blocking
23:18 < tnorris> ok, i'm talking about using child_process.fork()
23:18 < tnorris> which uses the string 'ipc' for it's io
23:20 < bnoordhuis> tnorris: that one's non-blocking
23:21 < tnorris> bnoordhuis: for some reason when I use cp.fort() I only get a tenth of the throughput than if I use .spawn() and set the stdio to 'pipe'
23:21 < tnorris> s/fort/fork
23:23 < pyrotechnick> addisonj: trouble in paradise
23:23 < addisonj> interesting, sure there will be a blog post and drama to come
23:24 < addisonj> hopefully more entertaining that semi-colon debates ;)
23:24 < pyrotechnick> good riddance
23:24 < bnoordhuis> tnorris: what options do you pass to fork()
23:25 < tnorris> bnoordhuis: um, come to think of it. no options. just the command and callback.
23:26 < bnoordhuis> tnorris: in that case the child process inherits the stdio fds from the parent
23:27 < tnorris> ok, let me write up another test case using .fork
23:27 < bnoordhuis> tnorris: i guess you're using proc.send()?
23:27 < tnorris> bnoordhuis: yeah
23:27 < CIA-116> node: Bert Belder openssl-1.0.1c-wip * r9ac078c / (11 files in 2 dirs): openssl: remove obsolete patch files - http://git.io/p3JLXQ
23:27 < CIA-116> node: Bert Belder openssl-1.0.1c-wip * r74468dc / (5 files in 3 dirs): openssl: update the GYP build to work with openssl 1.0.1c - http://git.io/cmM-zw
23:27 < bnoordhuis> that has a lot of machinery attached for sending over control data and what not
23:27 < bnoordhuis> that's probably why it's a lot slower
23:28 < tnorris> oh, ok. is there another call to make using fork?
23:30 < tnorris> bnoordhuis: here's my code before we started talking: https://github.com/trevnorris/deluged/blob/master/src/reader.js#L25-47
23:31 < tnorris> problem is that it halves the total possible speed. I'd rather directly write/pipe/whatever data directly to the child processes as they come in.
23:32 < bnoordhuis> tnorris: what halves the speed? using spawn() or stdio='ipc'?
23:33 < tnorris> my current code on that page halves the speed. if I pipe directly from parent to child then it's twice as fast, but I'm not sure how to pass segments of data to each child.
23:33 < WarheadsSE> stable v0.8.9 on its way to the Arch Linux ARM repos
23:33 < tnorris> stdio='ipc' and using .send makes it about 5 times slower.
23:34 < tnorris> honestly not sure if i'm making sense any more. on my 6th red bull and been working on this for 3 days.
23:35 < bnoordhuis> tnorris: yeah, don't use send() - it's not nearly as fast as plain writes()
23:36 < bnoordhuis> tnorris: send() serializes whatever you feed it to json and decodes it on the other side
23:36 < tnorris> bnoordhuis: aaahh... ok.
23:37 < tnorris> writes are still limiting the speed though, if I could pipe directly to the child's stdin.
23:37 < bnoordhuis> tnorris: you mean write() vs pipe()?
23:38 < tnorris> yeah.
23:38 < bnoordhuis> it won't matter much, pipe() is implemented on top of write()
23:38 < bnoordhuis> take a look at lib/stream.js, it's maybe a hundred lines of code
23:39 < TooTallNate> WarheadsSE: openssl 1.0.1c time! https://github.com/joyent/node/pull/3999
23:39 < bnoordhuis> tnorris: i guess one thing that could make a difference is that pipe() handles back-pressure by default, i.e. it deals with drain events
23:40 < tnorris> ok. looking at the code and checking my tests.
23:40 < WarheadsSE> TooTallNate: :) see my G+/twitter :p
23:41 < tnorris> every time I use .write() my max throughput is ~450 MB/sec. but using .pipe() I get ~1 GB/sec.
23:41 < WarheadsSE> Oh, and I am already on 1.0.1c ;)
23:42 < WarheadsSE> currently imaging a Pi to test it.
23:42 < TooTallNate> WarheadsSE: well, dynamic linking to 1.0.1c right?
23:46 < EyePulp> arch - I've got node installed as a local non root binary, (0.8.8) - but npm seems to require sudo to do any installs.  how do I get away from that?
23:46 < EyePulp> s/arch/argh 
23:47 < tnorris> bnoordhuis: thanks for bearing with me on that. learned a lot, and now just need to experiment.
23:49 < bnoordhuis> tnorris: happy to help and good luck :)
23:49 < CIA-116> libuv: Ben Noordhuis v0.8 * rb5028c5 / src/unix/process.c : unix: code cleanup, rename variable - http://git.io/556L0Q
23:49 < CIA-116> libuv: Ben Noordhuis v0.8 * r1988f5e / src/unix/process.c : unix: put child process stdio fds in blocking mode - http://git.io/h877dQ
23:52 <@isaacs> EyePulp: either install somewhere that's not root-owned, or chown it to something other than root
23:53 <@isaacs> EyePulp: what's the actual error?
23:53 <@isaacs> EyePulp: ie, gist the output, pleas.e
23:55 < EyePulp> sorry isaacs - I just blew it away before you said something - starting from the top - what would be the right way to install npm if I want to avoid sudo requirements
23:55 < EyePulp> I was looking at curl https://npmjs.org/install.sh | sh
23:55 < EyePulp> dunno if that's still en vogue
23:58 < ChrisPartridge> isaacs: child_process.exec docs say the callback args stdout/stderr are Buffers, but they are not - should I log issue/pull request?
--- Log closed Wed Sep 12 00:00:02 2012
