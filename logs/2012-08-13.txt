--- Log opened Mon Aug 13 00:00:11 2012
00:08 < jrajav> App.js basic example not working :|
00:08 < jrajav>     throw new Error("Unable to locate bindings for " + lib);
00:15 < ericelliott> Anybody using npm for client-side dependencies?
00:15 < deoxxa> ender
00:16 < ericelliott> I was thinking of trying to bend clientside to my will. https://npmjs.org/package/clientmodules
00:18 < deoxxa> ericelliott: http://ender.no.de/ and https://github.com/substack/node-browserify are two ways to accomplish that
00:21 < ericelliott> ender is more like an alternative to npm for client-side work
00:21 < ericelliott> not a way to use npm for client-side work
00:21 < ericelliott> oh, maybe I'm wrong about that.
00:22  * deoxxa nods
00:22 < deoxxa> ender uses plain old npm packages
00:23 < deoxxa> you can modify your package to work better with ender, but you can also just use require("package") to get to it
00:25 < ericelliott> the trouble is, most client-side JavaScript libraries aren't exactly packaged to be installed directly for use in your application
00:25 < ericelliott> when npm pulls them down, they tend to not be built, installed where you would expect, and ready to use.
00:29 < deoxxa> ericelliott: correct
00:29 < deoxxa> ericelliott: for a lot of popular libraries (jquery, bootstrap's javascript, etc) there are enderified or browserified versions
00:30 < deoxxa> but yes, most client side stuff just says "include this javascript file and you'll have SillyLibrary available on window!"
00:30 < deoxxa> this is something that's slowly changing though
00:31 < jobin> how can I send JSON data from socket.io to my HTML? I have it working by doing this http://jsfiddle.net/2LRvN/  but I want to return JSON from this function rather than add the data to a div
00:32 < deoxxa> jobin: what do you mean "return"
00:33 < jobin> deoxxa, well I mean 'send' so that I can display the JSON data in my html
00:33 < jobin> deoxxa, I need to make this function more generic so it works no matter where I need to put the data
00:34 < deoxxa> then... do something different with it in the callback
00:34 < deoxxa> socket.on("updateMessage", function(data) { do_something_with_data(data); });
00:34 < deoxxa> you have to remember that the callback function you provide can be called at any time (or never!)
00:35 < jobin> obviously I need to do something different, but how do I do it? Normally, I would just return JSON or in PHP I would json_encode()
00:36 < deoxxa> oh you just want to encode json? JSON.stringify(data)
00:36 < jobin> deoxxa, yes that is what I think i'm looking for :)
01:05 < slickplaid> hrm.. github won't let you search for users by email address :X
01:12 < ctult> I need to make something that handles ~100,000 requests per second.  Would Node.JS handle that, or should I look to alternatives like node.native?
01:14 < spionHL> or luvit (luagit, which is very often faster than C++)
01:15 < ctult> I know about Luvit.  That is one of my alternatives.
01:15 < Lorentz> ctult: depends on what kind of requests
01:15 < spionHL> but it really depends on the requests and you know it
01:15 < ctult> Would luvit in fact be faster than node.native?
01:15 < ctult> Lorentz: caching and proxying
01:17 < spionHL> I've made one test so far and it seems like luagit is as fast as hand-tuned C/C++
01:17 < Lorentz> caching and proxying is still pretty vague
01:17 < spionHL> (i had to write a custom string hashing function to make the C version as fast)
01:18 < Lorentz> what hardware too?
01:21 < Lorentz> varnish not good enough?
01:28 < deoxxa> ctult: are you talking about 100k users on one instance of whatever you're running?
01:28 < deoxxa> because although it's possible, it's going to a whole lot more work than spinning up 10 instances of something a bit less efficient
01:28 < deoxxa> s/going to a/going to be a/
01:53 < justanewbie> http://pastebin.com/20Zcnhqf,i write to a binary file use writestream drain event ,but file writes much more data than it must be, i'm new to node.js ,please help me?
01:55 < justanewbie> Any suggestions?
02:29 < mikeal> hey
02:29 < mikeal> how do i pretty print the stack in an error caught from a domain?
02:36 < justanewbie> mikeal: please help me
02:38 < deoxxa> wow, justanewbie, you made that code really hard to follow
02:38 < deoxxa> justanewbie: can you explain what you're trying to do and maybe do up a test case that highlights the behaviour you're asking about? right now i can see a bunch of different things that cause weird behaviour in that code...
02:44 < justanewbie> deoxxa: thank you very much for the response,i want to append to a  binary file by day according to every request of the user
02:46 < justanewbie> deoxxa: per request record is 12bytes buffer,i hold request buffer in the global array ,and triggers append operation when array's size > 500
02:47 < deoxxa> ok
02:47 < deoxxa> i'm not sure why you're buffering it like that
02:48 < justanewbie> deoxxa: to advoid too many open files in many concurrent requests
02:48 < deoxxa> but you could just have one file open
02:48 < deoxxa> `var file = fs.createWriteStream("./some_file");'
02:49 < deoxxa> hang on, someone at my place is being stupid loud
02:49 < deoxxa> brb
02:49 < justanewbie> deoxxa: okay,thank you
02:51 < deviantgeek> I have a vps, that I want to use for node hosting, where i can just push my latest code to it using git, and it auto-restarts the node instance 
02:51 < deviantgeek> (its running ubuntu 12.04)
02:51 < deviantgeek> how would i go about this
02:54 < mr_paul> deviantgeek:  github can call a url post-commit that could trigger the pull and restart
02:55 < justanewbie> deoxxa: in one file open logic ,i thought when writeStream.write returns false,i push current buffer array to the global array and waiting for the next write operation,am i right?i dont't know whether to use writeStream.end() or writeStream.destroy
02:59 < deviantgeek> https://github.com/nodejitsu/haibu this looks like it does what i want
03:00 < deviantgeek> on second thought, it doesnt
03:00 < deviantgeek> is there a premade thing that does this?
03:07 < justanewbie> Is node.js global Array pop push threaded safe?
03:07 < jesusabdullah> deviantgeek: combine haibu with https://github.com/substack/pushover
03:10 < substack> isaacs: codebux works on the npm source now
03:12 < chilts> justanewbie: since there is only ever one thread, then yes :)
03:13 < deviantgeek> actually found what i want: https://github.com/substack/fleet
03:17 < justanewbie> chilts: thank you
03:19 < justanewbie> chilts:  writeStream.write(new Buffer(arr_buf)) ,array_buf is a array of new Buffer(12),did i write the right syntax?
03:45 < mscdex> stephank: i just started testing tonight and unless i'm doing it wrong, it seems i can't just use the output of generateKeys() in the kexinit packet
03:46 < mscdex> stephank: what i ended up doing was doing the calculations in pure js instead using a bigint library, that at least got me a kexdh_reply from openssh. more bugs after i got that far though ;-)
04:23 < quackslike> hi i'm trying to get db-oracle installed on my os x laptop i'm getting the following error though: Checking for program g++ or c++          : not found
04:23 < quackslike> i have xcode installed.. any help?
04:23 < thatguydan> you need to install the command line tools in xcode
04:23 < thatguydan> it's in preferences
04:23 < quackslike> ok
04:23 < quackslike> thanks
04:35 < quackslike> @thatguydan - thank you sir. That's working now.
04:49 < itsAlrite> hi, i am new here - had few questions about nodejs
04:51 < mscdex> itsAlrite: fire away!
04:52 < itsAlrite> is there a IDE like environment for nodejs? 
04:52 < tuhoojabotti> well
04:53 < tuhoojabotti> if you count microsoft web matrix
04:54 < etcetera> itsAlrite: jetbrains has webstorm.
04:54 < etcetera> I think you'll find that most don't use an IDE though. Which makes sense for a dynamic language like javascript.
04:54 < itsAlrite> cool thanks
04:54 < etcetera> IDE's are however super useful for statically compiled languages like C# and Java as you might imagine.
04:55 < tuhoojabotti> jsFormat and jshint in Sublime Text is fine :P
04:56 < mscdex> i use notepad++ on Windows and gedit on all other platforms
04:56 < etcetera> sublime++
04:56 < mscdex> and occasionally nano for quick edits ;-)
04:56 < itsAlrite> i agree, i just wanted to know can i debug stuff and navigate to relevant parts in my code base - javascript is hard to maintain, so am i right to assume same problem might exist for nodejs?
04:56 < etcetera> itsAlrite: correct, debugging experience for node.js is not on part with say visual studio or any java ide
04:57 < etcetera> on par*
04:57 < substack> use modules
04:57 < mscdex> itsAlrite: there are indepdendent debugging tools out there, like node-inspector i think
04:57 < mscdex> man i need to sleep
04:57 < substack> node has a built-in debugger http://nodejs.org/docs/latest/api/debugger.html
04:57 < substack> javascript isn't hard to maintain, just write tiny modules
04:58 < itsAlrite> thanks for all the help guys, this is awesome place
04:58 < itsAlrite> i am new to irc itself
04:59 < etcetera> again the debugger experience is no where near close to what c# and java developers are used to.
05:00 < etcetera> just be aware. you'll be writing quite a bit of console.log.
05:01 < tuhoojabotti> node-inspector is great, though 
05:06 < itsAlrite> maybe a dumb question, can anyone tell me - things nodejs is not suitable for?
05:07 < deoxxa> itsAlrite: calculating fibonacci numbers :(
05:07 < itsAlrite> amny are
05:07 < itsAlrite> many*
05:07 < medice> putting your kids to sleep
05:08 < itsAlrite> can i use it for "Rules Engine" ?
05:11 < itsAlrite> can we get Synchronous behaviour with not much effort?
05:11 < OneBraveHog> I'm not sure I think the new cloud sheep aggregate counter supported by Node.js can put the kids to sleep
05:12 < AAA_awright> require('sheep') done
05:15 < itsAlrite> thanks for the help mscdex, etcetera and deoxxa - might return with more stupid questions later
05:16 < etcetera> tuhoojabotti: do you usually initialize a connection to your database once per request or globally
05:16 < etcetera> ?
05:16 < tuhoojabotti> huh?
05:17 < DarkArgon> globally sounds better
05:17 < tuhoojabotti> Yes, it does.
05:17 < etcetera> DarkArgon: why?
05:17 < etcetera> if multiple requests can access the same connection at the same time...isnt that bad?
05:17 < DarkArgon> because u don't want 1000 parallel db connections on high traffic
05:17 < tuhoojabotti> etcetera: I actually did connect per connection, but with caching it wasn't a problem.
05:18 < tuhoojabotti> but my site is small
05:18 < etcetera> do you pass that in as s parameter in modules?
05:18 < etcetera> DarkArgon: that's usually how other web apps do it.
05:18 < etcetera> one transient thread per request, one transient connection in a pool.
05:19 < tuhoojabotti> It was my first Nodejs software and it didn't use module that much. ;D
05:20 < DarkArgon> why not let node do the db querys in the background and cache them?
05:20 < etcetera> I'd love to get a definitive answer on this...seems pretty critical to the performance of common apps.
05:20 < etcetera> "let node..."?
05:21 < DarkArgon> very stupid solution: setInterval
05:21 < etcetera> wat?
05:21 < tuhoojabotti> huh
05:22 < tuhoojabotti> Well you probably don't want to ask me, I have only used a MySQL database, once.
05:22 < tuhoojabotti> And I stored pretty much json in it. ;D
05:22 < etcetera> ok, I probably won't ask tuhoojabotti about best practices
05:22 < tuhoojabotti> Yes.
05:36 < DarkArgon> any1 bored and want to write a hello world module for my irc bot?
05:36 < DarkArgon> just want to test my api
05:36 < tuhoojabotti> DarkArgon: If you write one for mine. :3
05:37 < DarkArgon> u have one? 
05:37 < tuhoojabotti> http://git.io/tuhbot
05:38 < tuhoojabotti> It's W.I.P.
05:38 < tuhoojabotti> Gonna change the module api a bit. :P
05:39 < DarkArgon> ok...my bot is shit compared to that xD
05:40 < tuhoojabotti> DarkArgon: Well I was bored of shitty bots. ;-)
05:42 < DarkArgon> u in #botters?
05:43 < tuhoojabotti> nope
05:44 < DarkArgon> so where can i test your bot?
05:45 < tuhoojabotti> IRCNet, channel #tuhbot
06:02 < EricBlade1> hello people .. anyone know of a quick method of simulating the https module in versions that don't have it?   (0.2.3)  i'm trying to figure out how to convert another method into something that is expecting a 0.4+ style https module, and its bending my mind
06:03 < jesusabdullah> you're using 0.2? o____o
06:04 < jesusabdullah> EricBlade1: I would just read node's current api docs
06:04 < EricBlade1> yeah webos phones have node 0.2.3 embedded
06:04 < gkatsev> people still use those? :P
06:04 < EricBlade1> as a matter of fact, they do . :P
06:04 < DarkArgon> +1
06:04 < gkatsev> (I loved my pre but...)
06:05 < EricBlade1> i have approximately 1000 phone users of the app i'm trying to do this in
06:05 < jesusabdullah> oh shit
06:05 < jesusabdullah> at that time it was like, "here's a gist"
06:05 < EricBlade1> yeah i understand how to use the api, i don't understand how to make something that talks like it, though.  i'm pretty noobish
06:05 < jesusabdullah> it was pretty hard core
06:06 < jesusabdullah> but yeah, I think the earlier versions of the tls module docs linked to this gist
06:07 < EricBlade1> alternatively, rather than asking for a direct solution, a little help with understanding how to construct something that looks to other modules, as if it were the https module would be awesome too
06:08 < jesusabdullah> are we talking about monkey punching here?
06:08 < EricBlade1> as long as that's not anything like donkey punching, maybe
06:08 < jesusabdullah> like, making require('https') return *something* in 0.2?
06:09 < EricBlade1> that part i can handle, but i'm not sure exactly how the request function should respond
06:12 < EricBlade1> i think i might be understanding it .. can i just create an EventEmitter, and do: callback(emitter), then when i receive data on the pipe, emitter.emit('data', data) ?
06:16 < EricBlade1> jesusabdullah: or if you happen to have that gist address.. ;)
06:17 < jesusabdullah> EricBlade1: I don't, but that sounds about right
06:18 < No9> EricBladel are you using a standard build of WebOS or can you upgrade?
06:18 < jesusabdullah> EricBlade1: https://github.com/joyent/node/blob/master/lib/stream.js This is exactly how streams differ from eventemitters
06:19 < stephank> mscdex: I do use generateKeys, it's probably something in the mpint encoding. The binary string you get back is already a msb integer, but I think it's unsigned, whereas on the wire it needs to be two's complement.
06:19 < stephank> mscdex: It failed for me 50% of the time, until I added leading zeroes. (Also need to strip them off on receiving, or the hash won't match.)
06:21 < EricBlade1> No9: it's a standard build, trying to write something for public use
06:22 < EricBlade1> it works fine on the tablet version of webos, but half my users have phones, and i'd like to get away without re-writing lots of the support libraries :)
06:22 < No9> EricBladel k I have no news then 
06:26 < EricBlade1> if all i need to handle is setting a statusCode in it that is the HTTP status, and sending a data and end event when it receives something or an error event when it doesn't, i think i've got this
06:38 < EricBlade1> hmm. i was afraid this would happen.  now that i have a reasonable facsimile replacement module, i'm getting a waterfall of other modules that don't exist.  ugh.
06:42 < EricBlade1> hmm. is there a standard module called "request"? i don't see it listed in either the current or any old docs
06:42 < EricBlade1> and googling for "node request module" turns up a whole lot of irrelevant hits
06:43 < EricBlade1> hmm. looks like it might be an add-on. but where is it i wonder
06:44 < bright_day> i'm getting this error than i start my app. can anyone help ? http://hastebin.com/wehipuhuqe.tex
06:46 < rvagg> EricBlade1: mikeal/request on github
06:46 < rvagg> request in npm
06:46 < rvagg> npm install request
06:46 < EricBlade1> yeah i have it, the 0.2 require() is quite fiddly about where it locates things
06:47 < rvagg> oh, right, 0.2, yuk
06:47 < rvagg> you might have to dig back in the archives to find a request that works nicely with 0.2 if you want to do anything fancy
06:48 < rvagg> mikeal only keeps compatibility with the current & previous stable node branches
06:48 < rvagg> bright_day: the dlopen error suggests that a native component of that module isn't there, or hasn't built properly or something
06:48 < rvagg> bright_day: try `npm install` again
06:49 < EricBlade1> hmm. well, on the bright side, that request lib has a workaround for missing https libs
06:49 < bright_day> rvagg: okay i will try
06:49 < rvagg> or even delete node_modules\node-sqlserver and then `npm install node-sqlserver` again to get it to install from scratch and rebuild -- watch for any errors, perhaps you don't have the build tools installed that it needs
06:50 < rvagg> EricBlade1: nice, that should be helpful
06:52 < EricBlade1> hah. it does, however, require util, which didn't exist until about the same time as https
06:53 < bright_day> rvagg: i installed it again now i'm getting this error http://hastebin.com/losenowovo.tex
06:53 < rvagg> you could probably install util into node_modules, it's pretty simple
06:54 < EricBlade1> oh boy. i can get around that one, but i'm not sure how to deal with the stream module
06:54 < rvagg> EricBlade1: stream is pretty simple, the module itself is just an extension of eventemitter that adds pipe
06:54 < rvagg> bright_day: did it give you any errors while installing?
06:55 < rvagg> bright_day: do you have the Windows C++ tools installed? just looking at the binding.gyp, it's pretty simple but it still needs to compile: https://github.com/WindowsAzure/node-sqlserver/blob/master/binding.gyp
06:56 < rvagg> Visual C++ 2010 Express edition it says is required
06:56 < rvagg> https://github.com/WindowsAzure/node-sqlserver/
06:57 < rvagg> perhaps you should clone the repo and try building it for yourself and manually putting it into node_modules if you get it to compile
06:57 < bright_day> rvagg: yeap i have all requirements installed. and it worked 
06:57 < rvagg> (sorry, I don't really have a whole lot of experience with node/npm on Windows)
06:57 < bright_day> but after i reinstalled my node 
06:57 < bright_day> it doesnt works
06:57 < rvagg> oh, what version of node?
06:58 < bright_day> rvagg: v 8.6
06:58 < rvagg> https://github.com/WindowsAzure/node-sqlserver/issues/27
06:59 < rvagg> might have to go back to 0.6.
07:12 < EricBlade1> wow code really has a hard time passing a validator when someone has apparently never heard of semicolons ... grr
07:14 < rvagg> sounds like your validator needs updating too
07:14 < rvagg> semicolons are for the WEAK
07:15 < okcoker> semicolons are the anti-christ
07:22 < EricBlade1> what is "stream.Stream" referring to?
07:34 < rvagg> EricBlade1: the first 'stream' is the stream module, i.e. stream.js, the second Stream is the Stream object that is exported on that module, so you can `new stream.Stream()`
07:34 < rvagg> but mostly you use it to extend for your own version of Stream
07:35 < EricBlade1> hmm. for now, i've just patched it over to net.Stream
07:38 < EricBlade1> hmm. well, after about an hour and a half, i've managed to monkeypatch something together that actually runs.  it probably won't work in the slightest, but it runs!
07:39 < mystiiq> hey, I wrote some classes for my client side using prototyping but now I want to reuse them in server side as well, like I want to do something like this: require("/my/path.class1.js"); var obj1 = new Class1(); var obj2 = new Class1(); how can I achieve this with exports and stuff?
07:39 < mystiiq> I dont want to use var module = require("/path/file.js"); var obj = new module.Class1();
07:48 < EricBlade1> hmm. i'm not sure porting the request lib back to 0.2 is reasonable
07:48 < substack> sure it is
07:49 < substack> myndzi: do `module.exports = function () { ... }`
07:52 < EricBlade1> however, it looks like replacing the request lib with something far far far simpler would be easy to do
07:52 < jbpros> this must have been asked a thousand times but what's the "best" (i.e. recommended) couchdb adapter out there?
07:54 < substack> jbpros: I usually just use the http api directly with request
07:55 < substack> but there's nano which looks handy
07:55 < substack> keeping views in sync with git is also a task that makes sense to modularize
07:56 < jbpros> substack: well that's a good idea (talking directly to the http api). I already have a repository object in front of it, it makes sense.
07:58 < jbpros> substack: do you have any opinions on felix-couchdb?
07:58 < substack> haven't tried it
07:59 < substack> the http api is simple enough: http://wiki.apache.org/couchdb/HTTP_Document_API
08:00 < jbpros> substack: yep, I had a look at it, it looks neat. I'll go down that road. Thanks for your help!
08:10 < EricBlade1> ok, since pulling some info via google is like pulling teeth.. following a basic template for creating an export .. am i correct about this... ?   var x = function() { // constructor function }; x.prototype = {}; x.prototype.utilityfunction = function(blah) { }; exports.x = x; 
08:19 < rvagg> EricBlade1: that's basically fine, but you don't need the x.prototype={}, prototype is always there
08:20 < EricBlade1> i sort of copied that out of some other code i read somewhere, since i don't really understand the prototype stuff :| bad me
08:20 < rvagg> normal style would be something like: function x() {}; x.prototype.utilityfunction - function() {}; exports.x=x;
08:20 < rvagg> you can also: x.prototype = { utility1: function() {}, utility2: function () {} } if you want a shortcut that sometimes looks a little easier to understand
08:21 < rvagg> once you're working with prototypes then you need to remember to instantiate your object with `new`
08:21 < EricBlade1> rvagg: yeah i'm kind of leaning towards that since that's how i build everything else
08:21 < rvagg> var X = require('./path/to/x').x; var x = new X();
08:22 < EricBlade1> ok, that's not how i normally see modules used, though
08:22 < rvagg> it's also a good idea to start your prototypal objects with a capital letter so you don't get it mixed up later on and it's obvious which objects are instantiatable with `new`
08:22 < rvagg> EricBlade1: it's totally up to you how you do it
08:22 < EricBlade1> most modules i see are x = require('blah'); x.doSomething()
08:22 < rvagg> you could do this in your module: exports.create = function () { return new X() }; so you do `new` locally
08:23 < rvagg> EricBlade1: they are if you only need a single instance of the module, but if you're wanting to export something that can be instantiated multiple times in the one app then you'll probably want to use the prototype stuff
08:25 < EricBlade1> i.. um.. am not entirely certain. heh.
08:25 < rvagg> start with the singular then
08:25 < rvagg> Object.create() is also an option that I quite like, but it might be best to get your head around prototypes before you go there
08:26 < rvagg> and, if you don't need more than 1 of a thing then don't even bother with prototypes
08:26 < EricBlade1> i don't believe i do
08:26 < EricBlade1> otherwise there would be multiple processes
08:27 < rvagg> prototypal JS may come in handy if you need to represent multiple of the same things
08:28 < rvagg> but then again... lots of JS programmers don't even believe OO should even exist so avoid it completely
08:32 < AustinYun> EricBlade1: http://howtonode.org/object-graphs <-- how I learned about prototypal inheritance
08:34 < AustinYun> er, there's more in the series
08:35 < AustinYun> http://howtonode.org/object-graphs-2 and http://howtonode.org/object-graphs-3
08:41 < AustinYun> should point out that i found Object.create() a lot easier to wrap my mind around than new X()
08:48 < EricBlade1> holy crap i made a communication
08:48 < EricBlade1> i have no idea how i did it but i did it 
08:55 < jetienne> q. is there a extend() function which allow to merge object with deep copy ?
09:01 < AustinYun> you... made a communication?
09:02 < nighthacker> Is there a way to associate a node process with a pid ?
09:03 < nighthacker> I tried googling around, no joy, could any of you point me in the right direction.
09:03 < jetienne> nighthacker: there is a Process.pid or close
09:04 < jetienne> http://nodejs.org/api/process.html#process_process_pid
09:04 < AustinYun> jetienne: does underscore's _.extend not do deep copy?
09:05 < jetienne> AustinYun: i dunno let me check
09:05 < jetienne> http://underscorejs.org/#extend nothing said in the doc
09:06 < jetienne> https://github.com/documentcloud/underscore/blob/master/underscore.js#L690 AustinYun nope apparently not
09:08 < AustinYun> eh, my bad, can't help you then
09:09 < jetienne> AustinYun: thanks for trying anyway :) i got something i think http://andrewdupont.net/2009/08/28/deep-extending-objects-in-javascript/
09:09 < jetienne> AustinYun: jquery one is doing deep copy but the function is complex :)
09:13 < AustinYun> oh
09:13 < AustinYun> i was about to say that jquery can do it
09:35 < lpin> anyone know how node-waf conf.check work?
09:35 < lpin> i mean when i specify something like this if conf.check(lib='mylib'): in wscript
09:35 < lpin> how does it check for the lib?
09:54 < Anticom> hi all
09:54 < Anticom> i've just installed node.js on a debian (squeeze) machine
09:55 < Anticom> how do i start a server now?
09:56 < deoxxa> Anticom: write one
09:56 < shanse> Anticom: http://nodejs.org/
09:58 < Anticom> oh lol forgott about everything... i just assumed node-js would run as a kind of daemon
09:58 < Anticom> now i remember
09:59 < Anticom> but i've got another question: are there any restrictions on a linux machine, where the scripts have to be located so that node.js can execute them?
09:59 < Anticom> or do i have complete freedom with that?
10:00 < AustinYun> well i assume you can stick the script anywhere you have read access to
10:00 < deoxxa> Anticom: your node.js applications are exactly that - applications. they don't have to be anywhere in particular. node.js is a runtime that your applications sit on top of, not inside of.
10:01 < deoxxa> i think i'm getting better at explaining that as time goes on
10:01  * deoxxa hopes
10:01 < Anticom> but somehow i can't start a script i wrote... http://pastebin.com/aH1pdjSu
10:01 < Anticom> what am i doing wrong?
10:02 < deoxxa> you don't have to use -e
10:02 < deoxxa> -e is for specifying code on the command line
10:02 < deoxxa> like node -e 'console.log(1);'
10:02 < Anticom> ah okay
10:02 < deoxxa> you can just use `node /path/to/script'
10:02 < AustinYun> take off hte -e
10:02 < yawnt> hai
10:02 < yawnt> yo deoxxa 
10:02 < Anticom> works now :)
10:02 < Anticom> thank you guys
10:02 < deoxxa> sup yawnt
10:03 < deoxxa> no problem Anticom, good luck!
10:03 < Anticom> anyone got any experience with jsdom?
10:03 < tasslehoff> In my site.js I call res.render with dirs=fs.readdirSync('/my/dir)'). How can I create a list/table with links to the directories in my site.jade-file?
10:03 < deoxxa> tasslehoff: you might want to ask in #express
10:03 < tasslehoff> deoxxa: that I might.
10:04 < Anticom> i want to load html content via http protocol and want to be able to execute the contained js code... i heard, that jsdom is a somewhat proper dom implementation so that client-side js could run there
10:04 < Anticom> is that about right?
10:05 < AustinYun> so you're pulling down a website that contains scripts inside it, that you want to execute?
10:06 < Anticom> AustinYun: yeah in one word, yes... problem is that some sites use ajax etc. to build up content and i want to be able to "see" the content, the client does in a browser
10:10 < sriley> Anticom: id probably look in to using phantomjs for that
10:12 < Anticom> sriley: i've tried phantomjs but i didn't get it working so i thought node.js might be an alternative
10:12 < sriley> what didnt work?
10:12 < Anticom> moreover it also has the advantage, that i could use jquery's sophisticated selecting mechanism to select the stuff i want to work with it
10:13 < Anticom> sriley: i couldn't get the click event emulations to work
10:14 < Anticom> let's say an <a href='#'/></a> has an click handler registered to load some more content it just didn't do that
10:15 < Anticom> however, all i'm asking for is, wether jsdom can handle most of "client side"-js code
10:15 < Glenjamin> Hi guys, is there any way to get npm to validate/show me details from the package.json of the package i'm currently in?
10:15 < Glenjamin> I was hoping "npm view ." would do it, but no juice
10:16 < niloy> Anticom, you can use headless browsers like "phantomjs"
10:16 < sriley> i would be surprised if it wouldnt work since its webkit just without the window, tbh you dont really need jquery with a modern browser - querySelectorAll will select what you need. as to if jsdom can do it... ill have to pass and leave that to someone else to answer
10:17 < sriley> i would guess it can - but i would also think it would be more work than phantomjs (you can also drive phantomjs from node)
10:48 < delinquentme> hey all im using  this first option ( https://gist.github.com/579814 ) to install node.js and im getting a complaint when running " curl http://npmjs.org/install.sh | sh "
10:49 < delinquentme> The error: sh: Syntax error: newline unexpected
10:50 < shanse> delinquentme: npm comes with node now
10:51 < delinquentme> Yeah it seems that my rails server runs just fine without that last line sooooo =]
11:20 < bright_day> i have some db functions in db_worker.js file and i use it from my app.js(expres) but its not waiting to get result and i always get undefined as result. is there any way in express to say that execute some code after some function ends?
11:23 < bright_day> i have some db functions in db_worker.js file and i use it from my app.js(expres) but its not waiting to get result and i always get undefined as result. is there any way in express to say that execute some code after some function ends??
11:24 < tasslehoff> When someone clicks a link on my site that points to a folder, I want to call a shell command to tar that folder to /tmp, and then serve the file. Is this a matter of using exec and then some static file server module?
11:25 < deoxxa> bright_day: please don't just paste your question over and over.
11:25 < deoxxa> bright_day: paste your code somewhere (gist.github.com is good) so there's some context to what you're saying.
11:26 < jouz> Hey, about using dnode in the browser: I'm trying a simplified version of the example given in the readme, compiling this using browserify: http://pastie.org/4465686 ... The browser however complains about "d" not having a connect method... 
11:26 < deoxxa> tasslehoff: there's also node-tar
11:27 < tasslehoff> deoxxa: ok. I need a static file server of some kind to be able to serve the file, right?
11:27 < pringlescan> How do you guys debug your Node code? I've been working on the same bug for 2 weeks and I'm missing my deadline for the 5th time. Isn't there a firebug/webkit style debugger for Node?
11:27  * tasslehoff is new to both node.js and webdevelopment
11:28 < deoxxa> tasslehoff: you need to make friends with the concept of "streams". http://nodejs.org/docs/latest/api/all.html#all_stream and https://github.com/isaacs/node-tar will be of use
11:29 < Glenjamin> pringlescan: node-inspector works quite well
11:29 < Glenjamin> isaacs: is there any way to get npm to parse and validate a package.json in the current project eg "npm view ."
11:30 < urbann> hi, all   
11:30 < urbann> I am rails developer that looking into the possibilities to swift over to node  
11:31 < urbann> is there some open source  applications available more then simple hello world applications ?
11:31 < deoxxa> urbann: hundreds
11:32 < deoxxa> urbann: are you familiar with sinatra?
11:32 < urbann> looking especially for a sample authentication / user roles
11:32 < urbann> deoxxa: yes : )
11:32 < deoxxa> you have to remember, node and rails are two very different things
11:33 < deoxxa> rails is a web framework, node is not
11:33 < deoxxa> there are, however, web frameworks for node
11:33 < deoxxa> you'll probably be most interested in express: http://expressjs.com/
11:33 < deoxxa> anyway, express is similar to sinatra in its uses
11:34 < deoxxa> for authentication, you could look at http://passportjs.org/ if you want to save yourself some time when implementing single sign on etc
11:35 < urbann> deoxxa: I been playing a bit with express but I should really like to see a full working application before I swift over
11:35 < deoxxa> well that depends on what you mean by a "full working application"
11:36 < deoxxa> with node, a lot of the time you have to wire things up yourself
11:36 < urbann> the only project i found with authentication and user roles are calipso
11:37 < urbann> I can do most things, but don't have self confidence to set up secure autentications
11:37 < urbann> don't know how to test security issues
11:38 < deoxxa> if you take a look at passportjs.org you'll see that it's not that difficult
11:38 < deoxxa> there's not a lot of everything-included setups for node
11:38 < deoxxa> there's more of a focus on "make it easy to string together small parts"
11:40 < urbann> yes but as a newbie it should be helpful to analyze the code in a larger application
11:40 < substack> larger applications are bad
11:41 < substack> Don't write those. Don't even look at those.
11:42 < urbann> substack: yes maybe I think to much in the "rails way"
11:42 < urbann> the main reason for me to try something else is that rails become a monster
11:42 < substack> jouz: because that's the wrong example. There's no builtin connect() in the browser version, you need to use the pipe api: https://github.com/substack/dnode#dnode-in-the-browser
11:43 < substack> urbann: rails is very good at selling this idea of "big apps"
11:43 < substack> but that is pretty much always a mistake
11:43 < substack> write tiny programs and tiny modules
11:44 < substack> build up islands of quality and connect them with simple interfaces like network connections and pipes
11:45 < jouz> substack: thanks - I thought using shoe/pipe was just a fancier way of doing it, not the simplest/only one...
11:45 < substack> jouz: well you don't need to necessarily use shoe just the pipe-able api in the browser
11:45 < substack> because dnode doesn't pick which web transport to use for you
11:46 < urbann> substack: I like that philosophy but still new to node it is difficult to grasp how to set up a user roles and authentication and so on
11:46 < substack> urbann: just figure out something simple that works
11:47 < substack> using programming
11:49 < substack> urbann: one trick I've been doing for apps is to have an /account.json route that dumps some basic user data like username, account type based on the session id
11:49 < substack> and then fetching the /account.json with xhr
11:50 < substack> much nicer at the programming layer than threading the account info all over into static templates
11:51 < urbann> substack:  I will play around a bit with passport and see if I can grasp how it works.
11:51 < urbann>  Still the problem is not to get it to work but to know if it is secure or not
11:52 < urbann> how to test that ?
11:53 < substack> urbann: by spending money to get qualified people to assess that kind of thing
11:53 < substack> it's probably not as important as you think
11:54 < substack> I wish the passport api were nicer
11:54 < substack> blech: `new TwitterStrategy({...})`
11:55 < urbann> yes maybe not, but is it something that making it more difficult to secure a node/mongo db app then a rails app for example
11:55 < urbann> ?
11:57 < substack> urbann: but I think if you're ditching rails for node because experience has shown that rails apps tent to become tangled and unmaintainable
11:57 < substack> then you should experiment with ways of splitting up programins into tinier more self-contained services
11:59 < urbann> substack: I get your point, I am only afraid that if I start to invest time in learning node I later on will hit a brick wall
12:00 < urbann> (then it comes to secure my app)
12:00 < Glenjamin> there are no functional brick walls
12:00 < Glenjamin> and if security is that important - do it first, bake it in
12:03 < substack> if you are worried about security you should read about it
12:04 < Glenjamin> security isn't really that hard, XSS, CSRF, SQLi are the main ones that application developers need to watch out for
12:04 < Glenjamin> apart from that everything else comes via common sense
12:05 < substack> security is just so nebulous of a concept that it seems really silly to get so worried about it so early on
12:05 < justsee> really?
12:05 < substack> just hack something up first and get it working and then fix it later
12:05 < urbann> so using node/mongodb don't come with any issues you don't have using other technologies?
12:05 < justsee> I think urbann aludes to the fact frameworks like Rails have a lot of security features baked in to cover off issues with untrusted user input
12:06 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:06 < justsee> How do you bake it in with Node? I'm only just starting with it now
12:06 < eaSy60> hey. how to avoid rendering the login/register page in everyauth? I need to output the json values
12:06 < RLa> justsee, what security, remember mass assigment issues?
12:07 < justsee> RLa: well I'm interested in any security practices people use with Node dev
12:07 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:07 < RLa> just don't store whatever req.body you receive
12:08 < Glenjamin> ok, with the usual disclaimer that security is you're responsibility not mine.... XSS => use a templating language with default escaping, SQLi => use parameterised queries, CRSF => only modify data on a POST, and have single-use tokens in forms
12:08 < Glenjamin> done
12:08 < RLa> if you use mongodb for example, it can be used to document injection
12:08 < thatguydan> justsee: node isn't trying to be rails, you need to use something like express to get some of the magic (even then it doesn't baby you nearly as much).
12:09 < Glenjamin> "security" is vague - if you have a specific concern there's likely to be a specific solution
12:09 < substack> or just use a plain http server and bolt a router onto it if you start needing a lot of routes
12:09 < justsee> thatguydan: yeah good point. I'll look at express source to see how they handle things
12:09 < thatguydan> Personally 'typeof' gets me pretty far in terms of validation, but I prefer being explicit.
12:10 < substack> if you start having too many routes you should probably split up your app into multiple subprocesses and stitch together the routing with a proxy server layer
12:10 < thatguydan> And if you're talking about db sanitisation felix's mysql drivers handle that pretty well
12:10 < substack> especially if your overall system will need to grow in its featureset over time
12:11 < Glenjamin> substack: is that just to give you logical isolation for changes?
12:11 < substack> Glenjamin: to keep the feature scope in check early
12:12 < substack> isolation is a big part of that
12:12 < Glenjamin> what's to stop you drawing those same lines at a module level inside the process?
12:13 < urbann> I don't want the rails magic but some kind of example of a secure application should be good
12:13 < Glenjamin> urbann: what things are you worried about exactly?
12:13 < substack> Glenjamin: it's much harder for business-specific problems to pull that off with in-process modules
12:13 < substack> it's much more workable with general components that are out in the open and published on npm
12:14 < substack> iterated completely in isolation from the main project
12:14 < Glenjamin> you can still do that with libs/packages, but i don't see the need for the subprocess separation
12:14 < substack> otherwise the pieces tend to become very tightly coupled
12:14 < eaSy60> hey. how to avoid rendering the login/register page with mongoose-auth? I need to output the json values
12:15 < Glenjamin> the benefit of having one process that could handle any request is you don't need to figure out how many of each flavour you need, you just spin up a load and let the load balancer figure that out for you
12:15 < urbann> Glenjamin: most things learning node I can just pick up using trail and error but then it comes to security I don't know how to test
12:15 < urbann> also I don
12:15 < Glenjamin> as substack said, you pay some security firm to pen test it, and you get a nice certificate and a sense of well-being
12:16 < tasslehoff> I get the idea, but it would still be nice to see and example of node-tar being used to tar a folder. anyone seen one?
12:16 < substack> tasslehoff: isaacs uses node-tar in npm itself
12:17 < substack> npm publish particularly
12:17 < substack> Glenjamin: but conversely you have much more control over independently scaling out the components that have the most usage
12:18 < substack> and you can push changes to subsystems without taking the other systems down
12:20 < RobZ1> whats best package to use to combine js, css with md5 (asset pipeline like) and images too.  And have the css reference the md5'ed images.  (coming from rails so looking for similar ways to compress and cache bust assets).  And I'm new :)
12:20 < Glenjamin> mm, its a tradeoff - i guess from a scaling POV it depends what the overhead of being able to route to any behaviour is
12:20 < urbann> I see, thank you all for helping me but still using node/mongodb don't come with any issues you don't have using other technologies
12:20 < urbann> right?
12:21 < substack> Glenjamin: it's a pretty one-sided tradeoff though when you consider how impossible it is to write and iterate on large applications versus smaller ones
12:21 < Glenjamin> substack: s/large->small/coupled-decoupled/
12:22 < Glenjamin> i'm saying if you can be large and decoupled within the process then you'll get all the same benefits
12:24 < substack> I really doubt that
12:24 < Glenjamin> doubt you can be large and decoupled, or that you'd get the benefits? :)
12:24 < substack> the more pieces you put in a single program the less any one individual knows what's going on
12:24 < Glenjamin> i don't see how that changes with multiple programs
12:25 < substack> you can take them and run them completely separately
12:25 < Glenjamin> in a language with one big global namespace, maybe - but with explicit dependency specifications like you get with require(), you should be as clear in node
12:25 < substack> there's no implicit environment state that will invariably be abused to introduce tight coupling
12:25 < substack> require() is not enough
12:26 < Glenjamin> "use strict" ?
12:26 < Glenjamin> :D
12:26 < Glenjamin> i guess as long as you can have shared environment, there's a danger of implicit coupling
12:26 < substack> you still end up writing code that is inherently tied to the rest of the application
12:26 < substack> because it only ever lives in that application
12:27 < Glenjamin> but moving a specific use-case into node_modules and publishing to npm doesn't magically make it more useful
12:27 < substack> I've run into this effect so many times even when I try really really hard to avoid it
12:27 < substack> but when I start writing a new feature as a completely separate module or service FIRST everything turns out much better
12:27 < Glenjamin> hrm, interesting
12:28 < Glenjamin> do you start with the subsystem, or with a stubbed implementation at the place you intend to plug it in?
12:28 < Glenjamin> ie. how do you know that the separate system solves the actual problem you have without wasting time being overly abstract?
12:28 < substack> sometimes it makes most sense to bulid a new subsystem, more often just a new module
12:29 < substack> you don't know until you build it
12:29 < substack> but the nice thing about that is it's really easy to throw that work away if it doesn't pan out
12:30 < Glenjamin> example: i've got a unit testing framework, 0.1 had some logic for parsing and manipulating stack traces scattered around
12:30 < substack> deleting code in big apps where you've built the new functionality completely within the confines of the existing project is much harder to do than ignoring an open source module or not spinning up a separate service
12:30 < Glenjamin> 0.2 i pulled that out into a separate module - but if i'd started with that I wouldn't have got the right use cases
12:31 < substack> factoring out like that is a fine approach it can just be much harder when applications get bigger and more sprawling
12:31 < Glenjamin> i guess i just don't see the distinction (from an app dev POV), between an open source module and a file in ./lib
12:32 < Glenjamin> i take your point about it being easier to chop and change when the separation is explicit
12:32 < substack> it's cumbersome to maintain the correspondence between tests in test/ and files in lib/ for one
12:32 < substack> and documentation too
12:32 < substack> as a separate project it's much nicer
12:32 < substack> and you can separately do the versioning too
12:32 < Glenjamin> mm, that's an argument i can get behind
12:33 < substack> so if you need to break the api you can do that much more intelligently
12:33 < substack> which is also a great reason to split things up into services: better more granular control over independent versioning of services
12:35 < mmalecki> substack++
12:36 < substack> and the failure modes are a lot easier to compensate for and track down I've found too
12:36 < Glenjamin> i'm sold!
12:36 < substack> since the programs have far fewer things going on at once
12:37 < Glenjamin> although actually my original argument was separate module vs separate process
12:37 < substack> well it's usually the case that a separate module is a better fit
12:38 < substack> but separate processes are a nice way of encapsulating certain collections of functionality
12:38 < substack> especially for code that has very application-specific settings and business-y code in it
12:39 < mmalecki> I can confirm that having multiple services running HTTP APIs is a blessing
12:40 < substack> it almost just seems like there is a hard upper limit on the number of lines that a single process should have before turning to complete shit
12:40 < substack> but lines of code pulled from npm seem to be immune from this
12:41 < substack> I'm not even exactly clear why this happens, but I've observed this happening so many times
12:41 < substack> complete shit with respect to being pleasant to iterate on and reason about
13:04 < scott_gonzalez> Does anyone know why I would get "execvp(): No such file or directory" when using child_process.spawn( "git diff" ) ?
13:04 < mmalecki> scott_gonzalez: use child_process.spawn('git', ['diff'])
13:05 < rvagg> anyone doing any non-trivial node-gyp bindings online?
13:06 < rvagg> it HATES ME
13:06 < scott_gonzalez> mmalecki: Thanks.
13:09 < _smf_> Anyone using node-sqlite3 with node v0.8.6?  I'm getting memory corruption issues since upgrading to v0.8.6 and I think this module is the cause (still troubleshooting though)...
13:12 < eaSyy> Hello. Who has already used mongoose-auth?
13:18 < eaSyy> mongoose-auth forces me to use views but I want to respond with json only (api usecase)
13:20 < SomeoneWeird> eaSyy, well if its ejs (no idea what youre using) just do <%=result%> and replace that with your json
13:21 < eaSyy> But then how do we set the headers?
13:21 < SomeoneWeird> no idea
13:21 < eaSyy> \o/
13:22 < adammw111> Hi, is there a way to easily build a newer version of V8 for Node.js? Specifically I'm looking for 3.12.17 or later...
13:35 < ootje> since node is single threaded: is there a simple framework for one high i/o thread to push worker items (no return/responses requied) to worker nodes?  i've tested using redis queues (rpush, blpop) but cpu usage goes OTT with the volume i'm testing with now :\
13:37 < CIA-93> libuv: Ben Noordhuis v0.8 * r2c3e8b6 / (common.gypi gyp_uv build/gcc_version.py): build: rework -fvisibility=hidden detection - http://git.io/OfXlVg
13:37 < CIA-93> node: Ben Noordhuis v0.8 * r9f26130 / (4 files in 3 dirs): deps: upgrade libuv to 2c3e8b6 - http://git.io/1Tttkw
13:37 < CIA-93> node: Ben Noordhuis v0.8 * r100e163 / (common.gypi configure): build: compile with -fno-tree-vrp when gcc >= 4.0 - http://git.io/FVWReA
13:41 < bnoordhuis> ootje: cluster.fork or child_process.fork + ipc channel?
13:42 < ootje> i just noticed cluster - that might be helpful
13:43 < ootje> basically, what's going on here is that the main thread is handling a lot of incoming data (twitter garbage, ~3000msgs/sec), and i just need to hand that off to other processes to process, as if i do it in the main process, it goes ~100% and then i start falling behind on tweets since i can't process at the speed they're coming in, ultimately getting disconnected
13:43 < ootje> (just for testing i used redis as a in-between)
13:47 < ootje> bnoordhuis: tx, i'll have a look at the ipc packages in npm and see if i find something suitable
13:51 < soroush_> Is NPM still down?
13:52 < CIA-93> libuv: Bert Belder master * r00d2f22 / src/win/process-stdio.c : windows: fix typos in process-stdio.c - http://git.io/1V3z9A
13:52 < CIA-93> libuv: Bert Belder master * ra1157ce / src/win/process-stdio.c : windows: don't duplicate invalid stdio handles - http://git.io/BJmqnA
13:52 < CIA-93> libuv: Ben Noordhuis master * r2c3e8b6 / (common.gypi gyp_uv build/gcc_version.py): build: rework -fvisibility=hidden detection - http://git.io/OfXlVg
13:52 < CIA-93> libuv: Ben Noordhuis master * r9d7e300 / (4 files in 3 dirs): Merge branch 'v0.8' - http://git.io/omYg2g
13:58 < metal55> Hello all
13:58 < metal55> I don't suppose anyone can point me in the right direction for learning how to use SASS with node.js / express.js
14:40 < RLa> i have a path like public/javascript/lib/infdot/form.js and another ./widget.js (a require), how to resolve the last to path public/javascript/lib/infdot/widget.js?
14:41 < RLa> can it be done with path.resolve?
14:42 < shanse> RLa: you can use __dirname from withon widget.js
14:43 < RLa> shanse, i cannot, i compile modules into a single .js file for the browser
14:43 < shanse> oh
14:43 < shanse> nvm then
14:44 < RLa> and i need some form of normalized file paths to resolve correct order
14:44 < RLa> of concatenation
14:45 < RLa> i think i figured it out: path.normalize(path.dirname('public/javascript/lib/infdot/form.js') + '/' + './widget.js');
14:56 < metal55> I am trying to use : app.use("/css", express.static(__dirname + '/public/stylesheets')); as I understand it that should mean that paths the have /css in should be ponted to the static content in /public/stylesheets right?
14:56 < CIA-93> libuv: Ben Noordhuis master * r758a769 / src/unix/process.c : unix: fix SIGCHLD race in process.c - http://git.io/nILtVQ
14:57 < metal55> So that localhost:8080/css/style.css should server up the static style.css file in the /public/stylesheets directory
14:57 < metal55> but its not working, can anyone suggest why?
15:06 < jergason> metal55: what do you mean "its not working"?
15:06 < jergason> can you give more details?
15:08 < metal55> I am using Express and I am trying to server up my CSS
15:08 < metal55> In my config I have the line  app.use("/css", express.static(__dirname + '/public/stylesheets'))
15:09 < metal55> my understanding is that this allows content that is requested with the URL /css to rout to the /public/stylesheets directory
15:10 < metal55> in side my /public/stylesheets directory is a css file style.css
15:11 < metal55> however trying to access localhost:8080/css/style.css results in the message "Cannot GET /css/style.css"
15:12 < tjholowaychuk> metal55 that looks fine, typically though with that setup you'd just do app.use(express.static(_dirname + '/public'))
15:12 < tjholowaychuk> to serve everything in public, including the css
15:13 < metal55> I think it might be my routing then I shall take a look, thanks tjholowaychuk
15:19 < metal55> I am using app.use(express.static(__dirname + '/public')); and then navigating to http://localhost:8180/public/css/style.css and still I get "Cannot GET /public/css/style.css" this file dose exisit
15:20 < tjholowaychuk> metal55 you dont need to GET /public, just GET /css/style.css
15:20 < tjholowaychuk> that's just the dir it grabs files from
15:21 < tjholowaychuk> you can do app.use('/public', ...) if you *do* want the prefix though
15:21 < metal55> ah so then http://localhost:8180/css/style.css should work?
15:21 < metal55> "Cannot GET /css/style.css"
15:22 < tjholowaychuk> yeah if you have ./public/css/style.css
15:23 < metal55> I do indeed have that 
15:23 < metal55> http://pastebin.com/ExLkyZvg
15:23 < metal55> thats my server .. I am VERY new to node as I am sure you can tell
15:24 < metal55> please feel free to be as rude as you like about my dreadful code
15:24 < metal55> lol
15:24 < oal> Any recommended packages that detect file changes and join & recompile my coffeescript automatically?
15:24 < tjholowaychuk> earlier you said you had ./public/stylesheets instead of public/css right?
15:25 < tjholowaychuk> i cleared
15:25 < oal> ...to output one js file
15:25 < metal55> tjholowaychuk: yeo I renamed it to stop my bad typing being a factor
15:26 < yyfrankyy> local address ./public/CSS/style.css and for web /CSS/style
15:26 < yyfrankyy> .css
15:28 < metal55> tjholowaychuk, yyfrankyy I am such an idiot. I got it working now. I created a buildkit directory and it wasn't include in my path 
15:28 < metal55> Its working ... thank you loads. 
15:28 < tjholowaychuk> metal55 ah cool
15:29 < metal55> So now its just SASS that I need to get working 
15:30 < metal55> Are there any recommended approaches?
15:31 < yyfrankyy> oal: use fs.watchFile or fs.watch , checkout API docs
15:32 < oal> thanks
15:32 < metal55> yyfrankyy: ahh awesome thats probably what I need also 
15:33 < TrahDivad> Anybody here uses the Async package and can help me get this example working as expected: https://gist.github.com/3341913
15:34 < TrahDivad> Basically, what I'm trying to do is be able to have a callback run after an arbitrary amount of other callbacks have finished executing.
15:35 < yyfrankyy> oal, metal55: just cache it in memory, if file has changed, delete cache so that next request can load the new one, glad that help
15:37 < bradleymeck> TrahDivad: https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Closures#Creating_closures_in_loops.3A_A_common_mistake , it looks to be working as expected
15:38 < jcrew> TrahDivad: are you trying to make X number of functions run in parallel?
15:38 < TrahDivad> jcrew: yes, and more specifically, have a callback called once all finished
15:38 < TrahDivad> bradleymeck: having a read…
15:38 < jcrew> TrahDivad: there is a function for that in async, not called parallel
15:39 < jcrew> it's called queue
15:39 < jcrew> TrahDivad: check out async's queue and drain function
15:39 < TrahDivad> jcrew: thanks, will check it out!
15:42 < TrahDivad> bradleymeck: I've never seen this let keyword used before. Any reason it's rarely used?
15:43 < bradleymeck> TrahDivad: widely implemented yet
15:43 < bradleymeck> not*
15:43 < oal> Is coffee --watch broken with Node 0.8? I get "path.exists is now called `fs.exists`."
15:43 < TrahDivad> jcrew, bradleymeck: thanks for sorting me out!
15:44 < TrahDivad> oal: it's not broken, but I get that too.
15:44 <@isaacs> Glenjamin: view only works with remote packages.  but `npm ls` will complain if it's invalid
15:44 <@isaacs> Glenjamin: if you wanan see what's in it, you can use cat, or `npm install jsontool` and then `json -f package.json`
15:44 < oal> TrahDivad: do you know if it works on the Coffeescript master branch?
15:45 < jcrew> bradleymeck: that 'let' thing might be cool, can't decide if i like it or not
15:45 < TrahDivad> oal: I'm using the latest coffee-script from npm. Not sure about the master branch though
15:45 <@isaacs> Glenjamin: 
15:45 <@isaacs> $ json -f package.json scripts
15:45 <@isaacs> {
15:45 <@isaacs>   "test": "tap test/*.js"
15:45 <@isaacs> }
15:50 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:00 < Glenjamin> isaacs: would you consider adding that, or accept a patch? npm ls is probably closest to what i was after
16:01 <@isaacs> Glenjamin: why not just use jsontool?
16:01 < Glenjamin> i'm normally wanting to check what version i'm on before using npm version to bump it
16:01 < Glenjamin> does ls check if its valid json, or a valid package.json?
16:01 <@isaacs> Glenjamin: what if `npm version <noargs>` just showed you the current version?
16:01 <@isaacs> Glenjamin: yes, it does
16:01 <@isaacs> Glenjamin: if there's a package.json there
16:01 < Glenjamin> "npm version" would be fine
16:02 < Glenjamin> it does validate it's json, or it does validate it doesn't have fields that would cause npm to choke?
16:02 < Glenjamin> assuming that's possible
16:10 < CIA-93> node: Ben Noordhuis master * rc492d43 / lib/tls.js : tls: fix segfault in pummel/test-tls-ci-reneg-attack - http://git.io/duegjw
16:13 < RLa> got quick way to lexically sort arrays?
16:21 < bnoordhuis> RLa: array.sort(my_lexical_sort)?
16:21 < RLa> hm, just figured out i need something way more complex
16:26 < Kullt> hi
16:26 < drudge> hi
16:28 < Kullt> hi
16:28 < Kullt> do you know if you can install modules via npm from a local file
16:28 < Kullt> ?
16:28 < Kullt> I can't install now.js via npm
16:28 < context> kullt: npm install file.tgz
16:29 < Kullt> thanks
16:30 < Kullt> hmm
16:31 < Kullt> it still seemed to connect to the repo
16:31 < Kullt> and then failed
16:38 < dnnsmanace> What is teh proper way to read from a url with fs?
16:38 < dnnsmanace> fs.readFile?
16:39 < freewil> read from a url?
16:39 < freewil> like http?
16:39 < dnnsmanace> yes
16:39 < dnnsmanace> :)
16:39 < context> dnnsmanace: pretty sure you'd use http not fs
16:39 < freewil> i think you would need to use http.request
16:39 < dnnsmanace> right. that makes sense :)
16:39 < dnnsmanace> thanks
16:39 < context> dnnsmanace: or you could use: https://github.com/publicclass/open-uri
16:40 < dnnsmanace> cool. will check out that module, thank u
16:49 < russfrank> dnnsmanace: you probably want http://github.com/mikeal/request 
16:50 < dnnsmanace> russfrank: thanks, will look at that as well
16:54 < RLa> which module i should use to mock dom api?
16:54 < CIA-93> node: jbergstroem master * r8eccc41 / benchmark/http_simple_bench.sh : bench: fetch port from env - http://git.io/dBEMzA
16:59 < dnnsmanace> what is the proper way to generate a unique random filename?
17:00 < stagas> dnnsmanace: try random chars until it !exists() ?
17:00 < dnnsmanace> ive been using a uuid that is timebased
17:00 < dnnsmanace> with node-uuid
17:00 < dnnsmanace> but i was wondering if there something neater/better
17:01 < dnnsmanace> uuid.v1(); // -> '6c84fb90-12c4-11e1-840d-7b25c5ee775a'
17:08 < CIA-93> node: isaacs master * r50c7d80 / (2 files in 2 dirs): events: emitter.listeners() should not have side effects - http://git.io/pC0XhQ
17:38 -!- mode/#Node.js [+o Nexxy] by ChanServ
18:15 < other_guy> Does anyone have experience dealing with ECONNRESET errors?
18:15 < other_guy> If I jack up the http.globalAgent.maxSockets value the problem goes away.
18:16 < other_guy> However, as I understand it, that shouldn't be necessary
18:16 < other_guy> since the http library should be queueing requests as they pile up
18:17 < other_guy> Likewise if I set the Agent to false the problem goes away because the HTTP connection is closed explicitly after each response
18:17 < other_guy> so the issue seems to be with socket handling, request queuing, and keep-alive connections.
18:19 < phrearch> hello
18:21 < other_guy> hello
18:21 < phrearch> hi :)
18:22 < phrearch> im new to nodejs. wondering if nodejs has a library path, because my first app cant seem to find a module
18:22 < phrearch> i started with: npm install -g express stache
18:22 < jcrew> phrearch: the -g flag is for binary installs, try it without the -g 
18:23 < jcrew> try it without the -g in the folder where your app script resides
18:23 < version2beta> Can someone succintly explain the shortcomings of the current TLS support in Node?
18:23 < phrearch> jcrew: ok thanks!
18:24 < phrearch> wohoo, my first nodejs hello world http service :)
18:24 < jcrew> phrearch: it's all smooth sailing from there
18:25 < phrearch> jcrew: excited to get started with nodejs finally
18:25 < AvianFlu> version2beta: it's kinda slow
18:26 < phrearch> is there a good websocket library out there which supports draft 16/17?
18:26 < _graham_> Hey - what do people here use for documenting their code? Like how you have Javadoc for Java code and the like...
18:26 <@Nexxy> I use clay tablets
18:27 < Sapr0> I use telepathy to read the other programer's mind, pretty usefull :P
18:27 < version2beta> AvianFlu, thanks - would you call it painful? I know NodeUp 24 talked about TLS needing help, but I knew there is also support.
18:27 < AvianFlu> version2beta: people who need to do a ton of TLS usually end up using stud
18:27 < jcrew> phrearch: not sure what draft 16/17 is but there is socket.io
18:28 < _graham_> Telepathy would be useful, but I've not worked that one out yet :P
18:28 <@Nexxy> the problem with telepathy is getting more information than you were prepared for
18:28 < AvianFlu> you won't notice if you don't have to do a ton of it, but it's kind of killer for tls/ssl-heavy applications
18:28 < AvianFlu> Nexxy: ++
18:30 <@Nexxy> why thank you
18:30 < version2beta> AvianFlu, Thanks again. I'd heard that too. 
18:30 < AvianFlu> version2beta: it's not gonna stay slow forever, and it's being worked on
18:32 < jcrew> substack: capslockscript question - my capslock and shift keys are jammed with cheetodust - what do?
18:33 < version2beta> AvianFlu, I believe it. Improving TLS was a big part of the security podcast. Just wasn't sure how far Node is from here to there.
18:38 < other_guy> Nexxy, do you know who in here might be a good person to talk to about node's socket pooling functionality, I'm seeing really strange behavior
18:47 < Joric> hi! i'm using node.js for debugging js scripts in the command line, is there a method similar to python's if __name__ == '__main__': ... to run a certain function when script has been executed in console?
18:49 < blakmatrix> Joric: http://stackoverflow.com/questions/4981891/node-js-equivalent-of-pythons-if-name-main
18:49 < Joric> thanks blakmatrix!
18:50 < blakmatrix> i see module.parent used more than the first answer
18:52 < dnnsmanace> i am having trouble with streams: https://gist.github.com/3343188
18:52 < other_guy> dnnsmanace, all you need to know is…. DO NOT CROSS THEM.
18:52 < dnnsmanace> :)
18:53 < dnnsmanace> is this the right way to pass the stream from the callback of imagemagick into S3 upload?
18:54 < other_guy> nothing looks particularly objectionable about what you're doing there, but I'm not at all familiar with the S3 client
18:57 < dnnsmanace> i am getting that path must be a string error
18:57 < dnnsmanace> hmm
18:57 < dnnsmanace> makes no sense
18:57 < dnnsmanace> i hate hitting a wall and spending 3 hours fixing something stupid
18:58 < MerlinDMC> dnnsmanace, is path a string? ^^
18:58 < dnnsmanace> yes what could it possibly be :)
18:59 < MerlinDMC> an object :)
19:00 < MerlinDMC> but yeah ... maybe dig into the S3 code to find that check and see what the hell is checked there?
19:05 < phrearch> is there a pdb-like debugger for nodejs? or a console in which i can introspect objects?
19:06 < dnnsmanace> MerlinDMC: stdout should be a buffer correct?
19:07 < dnnsmanace> which i can use with putStream
19:07 < MerlinDMC> dnnsmanace, i should make sure that i really don't know - i don't know
19:07 < MerlinDMC> :)
19:17 < other_guy> Alright, node is definitely not playing nice.  It's socket pooling for HTTP requests is breaking...
19:18 < mscdex> stephank: thanks, i forgot about that silly mpint stuff
19:20 < pringlescan> I've been having trouble running my code as a batch job when iterating over files or databases using the Async module. I was thinking of just exposing it as a web service (since I have to do that anyway). What's the easiest module for a simple web service that will only be used internally?
19:21 < stephank> mscdex: np. I'm curious if you can get encryption working eventually. I'm still stuck. :B
19:21 < mscdex> stephank: haven't quite had a chance to get to it yet today
19:23 < mscdex> stephank: it's too bad openssh doesn't give as much debug output as it once used to
19:23 < mscdex> on the server side at least
19:24 < dnnsmanace> what is best way to convert a file over http to a buffer?
19:24 < dnnsmanace> say an image from http that i want to put into imagemagick
19:25 < stephank> mscdex: You can compile it with some flags to give more output. E.g. DEBUG_KEX dumps hashes, secrets and keys.
19:25 < mscdex> dnnsmanace: buffers should be emitted by default, you'll probably need to combine the chunks as they come in though
19:25 < dnnsmanace> mscdex: what is best way to do that without writing to a file?
19:25 < mscdex> stephank: i'm too lazy to recompile something like openssh :-)
19:26 < stephank> mscdex: Haha, it's not bad. It's certainly faster than trial and error when you have a bug somewhere in kex.
19:28 < mscdex> dnnsmanace: probably the most reliable way is to have an array per request, push the 'data' buffer chunks onto the array, and when the request's 'end' event fires, combine all the buffers into one
19:28 < mscdex> dnnsmanace: although, you shouldn't really have to buffer....
19:29 < dnnsmanace> why not
19:30 < stephank> dnnsmanace, mscdex: Perhaps this is useful? https://github.com/substack/node-buffers
19:30 < mscdex> dnnsmanace: what if people start uploading massive amounts of data to your server at once? you'll run out of memory
19:30 < mscdex> streaming is the way to go in most cases
19:31 < dnnsmanace> i am trying to read a file off s3 then resize it via imagemagick then upload back to s3 without writing anything to fs
19:31 < TooTallNate> i've used node-buffers in the past to buffer only up to the length i need
19:31 < TooTallNate> the splicing off parts that i can parse
19:31 < TooTallNate> i.e. the "buffers" chain never gets *too* long
19:35 < Joric> damn, seems all those scripts i'm trying to run in cosole use window. namespace is there a workaround for this?
19:35 < Joric> *console
19:35 < other_guy> Why am I getting ECONNRESET errors with this?
19:36 < other_guy> http://pastebin.com/3MTA83WK
19:36 < other_guy> If I raise my globalAgent.maxSockets value, the errors go away
19:36 < other_guy> so I know it's not that the connections are being closed by the server on the other end
19:36 < other_guy> node.js is just barfing when it needs to queue up more http requests it seems?
19:36 < other_guy> Likewise if I don't use keep-alive connections, then everything works too
19:37 < other_guy> so something seems to be breaking with socket pooling and calling this method too many times
19:39 < mscdex> dnnsmanace: you can probably just pipe to a child process that executes imagemagick, tell it to read from stdin and write to stdout, then pipe stdout to your request to s3
19:39 < mscdex> i don't know if there are any imagemagick bindings out there worth using
19:39 < Joric> i.e. crypto.js sets window.Crypto and then just uses Crypto.* without window prefix what can i do about it to run it in console?
19:40 < mscdex> Joric: why are you using crypto.js?
19:40 < dnnsmanace> mscdex: thats what im trying, wwriting the imagemagick output successfully to a file as a test, but getting an error on s3 when piping stdout
19:40 < zonetti> is it bad to manage the socket clients (socket.io) using an array?
19:40 < mscdex> dnnsmanace: can you post your code?
19:40 < Joric> mscdex, why not?
19:40 < Domenic> dnnsmanace: node graphicsmagick at https://github.com/aheckmann/gm/ is streaming, not buffering
19:40 < mscdex> Joric: there's crypto support built-in to node?
19:41 < zipp> Domenic: Thanks for that link o.O;; /lurk
19:41 < mscdex> dnnsmanace: there you go, use the one Domenic mentioned
19:41 < dnnsmanace> mscdex: https://gist.github.com/3343544
19:42 < Joric> mscdex, i'm trying to write/debug browser scripts in console idk maybe i should use another js engine
19:42 < Kullt> hi
19:42 < dnnsmanace> i think my server only has imagemagick
19:42 < Kullt> has anyone here managed to install nowjs on windows?
19:42 < cletus> mikeal: ping
19:42 < zipp> Kullt: protip: don't use windows :P
19:42 < Kullt> lol
19:43 < Kullt> I wish I didn't have to
19:43 < Kullt> I guess I'll set up a linux box just to test this
19:43 < zipp> I know how that goes. Was once hired as a redhat sys admin. Within 2 weeks we'd converted over to ESX running Windows XP VMs. Let me tell you about how long I didn't stay :p
19:44 < dnnsmanace> i think nodejitsu and heroku all use imagemagick but not GraphicsMAgick?
19:44 < Kullt> lol
19:45  * bradleymeck goes to make sure we use both...
19:45 < antz29> hi there
19:45 < Domenic> dnnsmanace: nodejitsu has graphicsmagick
19:45 < bradleymeck> yep we do
19:45 < zipp> Oh Kullt, it looks like there's a #nowjs on freenode
19:46 < dnnsmanace> ic, but seems that my problem is maybe the buffer is a string or the other way around?
19:46 < Kullt> zipp: thanks, I'll ask there
19:47 < mikeal> cletus: hey
19:47 < liam> Hi, I'm having a small problem with https.request, I set both rejectUnauthorized:true and ca:[ require('fs').readFileSync('ssl/ca-certificates.crt') ] but it seems that it doesn't use that certs.. If I omit ca: it works with the generic certs which don't cover all the domains
19:49 < liam> I'm using the ubuntu's ca-certificates.crt, any idea what's wrong?
20:01 < other_guy> isaacs, I think the Agent in the http module is prematurely jettisoning sockets that weren't actually closed.
20:03  * Nexxy coughs
20:04 < other_guy> Nexxy, do you know if anyone is actually around who deals with the node.js internals?
20:05 <@Nexxy> other_guy, my guess is no
20:06 < other_guy> well, then the riak client will remain stuck using new connections on every request until I can resolve what's going on.
20:06 < other_guy> BTW the preliminary (as in needs a few more features and a health dose of README file) is up
20:06 < zipp> youch
20:07 <@Nexxy> other_guy, I think I know the error you're talking about
20:07 <@Nexxy> getting socket hangups or w/e?
20:07 < liam> damn, I've tried with this one http://curl.haxx.se/ca/cacert.pem and still nothing :-(
20:07 < other_guy> yeah the sockets are hanging up… it was (is) a problem in riak-js too
20:07 <@Nexxy> yep
20:08 <@Nexxy> same thing with my client
20:08 <@Nexxy> I just stuck a network error abstraction into it to retry failed connections
20:08 < other_guy> I checked the logging in the cluster and verified that it's not coming from Riak, so it's definitely a bug in node.js
20:09 < other_guy> Nexxy, that's what I was going to do too.  Just do an exponential backoff for failed connections, since I need it anyway.
20:09 < other_guy> https://github.com/Coradine/nodiak
20:09 <@Nexxy> jah
20:09 < CIA-93> node: isaacs master * r22804a9 / (lib/module.js test/simple/test-debug-brk-no-arg.js): module: use 'repl' as the filename arg if missing - http://git.io/nTinHA
20:09 < other_guy> It was supposedly fixed back in node v0.6.8, which if true, means this is a regression that needs to be resolved.
20:11 < hunterloftis> Giving a small node module presentation in a couple of days... wondering if anybody can tell me why 'exports' is included as a sort-of-confusing helper to module.exports? A lot of our new node developers get caught up, so I'm going to clarify how to use them, but I'd love historical context.
20:12 < hunterloftis> I generally avoid exports altogether, but I'm wondering if there's a use for it.
20:15 < Hotroot> Does node not support fromCharCode?
20:15 < hunterloftis> Hotroot: it does
20:15 < hunterloftis> String.fromCharCode(x)
20:16 < Hotroot> Oh, kk
20:16 < Hotroot> Thanks
20:16 < hunterloftis> np
20:18 < mscdex> hunterloftis: exports is just a shorter variable name to use if you're going to export multiple things
20:18 < hunterloftis> mscdex: yeah I get what it is, how it's used, etc
20:18 < hunterloftis> mscdex: I didn't know if there's another use for it I'm unaware of
20:18 < mscdex> hunterloftis: nope
20:18 < hunterloftis> cool
20:20 < mscdex> stephank: were you able to create rc4 or aes*-ctr ciphers properly with node's crypto for ssh?
20:20 <@Nexxy> hunterloftis, tl;dr don't use exports
20:20 < hunterloftis> Nexxy: yeah I never do
20:20 <@Nexxy> exports doesn't allow you to export functions
20:21 <@Nexxy> e.g. `exports = function() { return "ohai lol" }`
20:21 < hunterloftis> I mostly avoid it just for the ambiguity
20:21 < mscdex> exports.foo = function() {}
20:21 < mscdex> ;-)
20:21 <@Nexxy> will return {} when required
20:22 < hunterloftis> Yeah because you haven't actually assigned that function to exports. You've just created a new object named exports locally, and module.exports is still in its original state.
20:22 < mscdex> stephank: i'm running into iv length errors from node when using those ciphers
20:24 < liam> is this a bug? var req = require('https').request({host:'wepay.com', port:443, path:'/', method:'HEAD', agent:false}, function (res) {console.log("done " + res.headers['server']);}); req.end(); ....... it doesn't return anything, and after a lot of minutes sometimes it returns error: socket hang up
20:27 < robinson_k> liam: the callback takes request first and then response
20:27 < robinson_k> from the docs:
20:28 < robinson_k> ah noes
20:28 < robinson_k> sorry
20:28 <@Nexxy> hunterloftis, like what mscdex said, "exports.foo" is used heavily by authors that are exporting multiple things with 1 module
20:28 < hunterloftis> Yep
20:28 <@Nexxy> hunterloftis, best practice seems to be to only export 1 entity with each module
20:29 <@Nexxy> so that might be worth mentioning
20:29 <@Nexxy> DON'T EXPORT SO MUCH
20:29 < liam> robinson_k: with of websites it works correctly, it's just with a few that hang up (when lucky, otherwise just freeze there)
20:32 < CIA-93> libuv: Bert Belder master * r7c3ba51 / (9 files in 3 dirs): windows: use WCHAR consistently (+6 more commits...) - http://git.io/iMalTQ
20:38 < Hotroot> Is there a quick way of straining input of all non character ascii? 
20:39 < Hotroot> Should I just do a for loop for each character in the string and delete it if it's not character ascii, because that sounds quite slow
20:39 < Hotroot> Working with telnet by the way
20:39 <@Nexxy> regex
20:40 < Hotroot> Can regex do ascii codes?
20:40 < Hotroot> Like 7 (system bell)
20:40 < Joric> is it possible to set global namespace to window. ? i have to use scripts that were written for window namespace :(
20:40 <@Nexxy> Hotroot, oh.
20:40 <@Nexxy> Hotroot, I misread your question, sorry
20:42 <@Nexxy> Hotroot, a loop doesn't seem like a bad idea
20:42 <@Nexxy> it's just a string
20:42 < Joric> what's the global namespace in node.js ? module ? node ?
20:42 <@Nexxy> there is none
20:42 <@Nexxy> forget about it
20:43 <@Nexxy> Joric, if you *really* think you need it (which you don't) it's `global`
20:43 < bnoordhuis> god kills a kitten every time you add a property to global, though
20:43 <@Nexxy> correct
20:43 < Joric> eg. they set window.Crypto then call Crypto.* is it possible to write a workaround for it
20:44 <@Nexxy> window = global
20:44 < RLa> there is global in node
20:44 <@Nexxy> no there isn't
20:44 <@Nexxy> it's a figment of your poor design pattern
20:45 < Joric> oh lol i did it
20:45 < Joric> window = global;
20:45 < Joric> that's basically all
20:45 <@Nexxy> :P
20:46 < Joric> thanks!
20:46 <@Nexxy> welcome!
20:46 <@Nexxy> Joric, think of the kittens
20:47 < Hotroot> >> b
20:47 < purr> Hotroot: ReferenceError: b is not defined
20:48 < Hotroot> >> if (5 > 3 && < 7)
20:48 < purr> Hotroot: SyntaxError: Unexpected token <
20:48 < Hotroot> Trying to think of the cleanest way to do this
20:48 < Hotroot> Oh well
20:48 <@Nexxy> IF ONLY JS HAD RANGES
20:49 < RLa> range(5, 7).has(3) :)
20:49 < ccowan> CoffeeScript FTW! :p
20:49 < RLa> good api beats syntactig sugar
20:50 <@Nexxy> RLa gets it
20:51 < Hotroot> Is that coffee script? I'm probably just going to do it manually for now
20:52 < freewil> omg you hipsters ;)
20:53 < freewil> how hard is if (5 > 3 && 5 < 7)
20:53 < mscdex> Hotroot: you can use a regex
20:54 < ccowan> freewil: If you saw how hip I'm not you wouldn't say that :D
20:54 < freewil> ha
20:54 <@Nexxy> freewil, very.
20:54 < Hotroot> If I do something like if (func < 3 && func > 1) That's a wasted func call, no?
20:54 <@Nexxy> did somebody say, "premature optimization"?
20:54 < freewil> then use a variable
20:56 < Hotroot> Uh oh, I do need something regex-like for this
20:56 < mscdex> Hotroot: string.replace(/[^\x20-\x7E]/, '')
20:56 < Hotroot> So regex can indeed do non-printable characters?
20:56 < mscdex> er string.replace(/[^\x20-\x7E]/g, '')
20:57 < ccowan> I wonder if people who write their shell scripts using /bin/sh think people who use /bin/bash are hipsters? ;)
20:57 < mscdex> Hotroot: sure
20:57 <@Nexxy> wait I thought everyone used zsh now
20:57 < Hotroot> Thanks =)
20:57 < ccowan> Nexxy: Yup... zsh with oh-my-zsh
20:58 < RLa> ccowan, using /usr/bin/env bash :)
20:58 < MARXBRONSON> oh-my-zsh ftw
20:58 < ccowan> RLa: You are a shell scripting mavrick!
20:58 < mscdex> MARXBRONSON: i was about to say that!
20:58 < MARXBRONSON> heh. autocorrect and auto-expanding bash variables (!$ !^ and !!, which i use all the time) is what sold me
20:59 < mscdex> oh, time to go code some more
20:59 < MARXBRONSON> plus the cool custom prompts
20:59 <@Nexxy> you owe each other a self-congratulatory fist-bump now
20:59 < mscdex> hi Nexxy!
20:59 <@Nexxy> hi mscdex !
20:59 < ccowan> FISTS!
20:59 < MARXBRONSON> git status in my prompt? do want.
21:07 < stephank> mscdex: Yeah, I specify AES-128-CBC, with iv and keys 128-bits
21:11 < fat> isaacs: could i bother you with a quick question?
21:16 <@Nexxy> fat, we need to talk.
21:16 < fat> ha
21:16 < fat> about what?
21:16 <@Nexxy> I'm concerned.
21:16 <@Nexxy> with your self image
21:17 <@maxogden> fat: SUP GRL
21:17 <@maxogden> fat: i never go to san francisco anymore so we probably will never hang out again 
21:18 < fat> haha
21:18 < fat> aww
21:18 < fat> what is my self image?
21:18 <@maxogden> just beinr eal
21:18 < fat> maxogden ;_;
21:18 < fat> i'm likely moving to ny actually
21:18 < fat> so if you go there?
21:18 <@maxogden> hellz yea
21:18 <@Nexxy> this whole "fat" moniker
21:18 < fat> we can hang oldschool
21:18 <@Nexxy> it's just unhealthy.
21:18 <@maxogden> ryry daddy d just moved there
21:18 < fat> oh
21:18 < fat> oh i didn't knowthat
21:19 <@Nexxy> wrong coast for real
21:19 < fat> that makes sense
21:19 < remysharp> Are there any guidelines (or clues) on how to report a useful bug report in node, if the binary is crashing this sort of thing "node(1533,0x7fff7dc97960) malloc: *** error for object 0x1018000a8: incorrect checksum for freed object - object was probably modified after being freed."?
21:19 < fat> i think i saw a tweet from him
21:19 < fat> "what's good new york" or something
21:20 < bnoordhuis> remysharp: compile a debug build, run it in gdb and post the output of `bt full`
21:20 < bnoordhuis> remysharp: `make BUILDTYPE=Debug` is how you compile a debug build btw
21:20 < remysharp> bnoordhuis: (was just asking - cheers!)
21:20 < bnoordhuis> add -j <cores> for a faster build :)
21:21 < remysharp> totally sucks, I can't log in to my offline dev site because it crashes node :-\
21:22 < fat> maxogden: why no more sf?
21:23 < fat> are you just oakland exclusive now?
21:23 <@maxogden> fat: jlord moved to oaktown
21:23 < fat> ahh
21:23 < fat> i see
21:23 < fat> that's great!
21:23 < fat> east oakland?
21:23 <@maxogden> fat: nah central -- by the lake and Fairyland
21:23 <@Nexxy> oakland sounds terrifying
21:23 < fat> oakland is pretty sweet
21:23 <@Nexxy> why is it so popular with node people
21:23 < fat> buritos
21:23 <@Nexxy> oh
21:24 < fat> and maxogden lives there
21:24 < fat> and everyone love maxogden 
21:24 <@Nexxy> well that's a fairly convincing argument
21:24 <@Nexxy> true
21:24 <@maxogden> weather is 2X better than SF and 4X better than portland
21:24 < fat> fair
21:24 <@Nexxy> what.
21:24 <@Nexxy> no.
21:24 <@isaacs> OAKLAND ALL THE HACKERS!
21:24 <@Nexxy> portland weather is the best
21:24 < ccowan> I think there are parts of Oakland that are terifying just like any major city
21:24 <@isaacs> Nexxy: INCORRECT
21:24 <@isaacs> :)
21:24 <@Nexxy> you dare question my authority?!
21:25 < fat> isaacs: npm search… useful?
21:25 < fat> like do people actually use it
21:26 < fat> (from the cli) 
21:26 < shanse> i do
21:26 < fat> what do you use it for
21:26 <@isaacs> fat: i use it a lot
21:26 <@isaacs> fat: i use it for finding modules
21:26 <@maxogden> i like that it prints out EVERYTHING
21:26 <@isaacs> if you use it a lot, if'ts fast.
21:26 < fat> do you use generic searches?
21:26 < fat> or when you know the name of something
21:26 < fat> ok
21:26 <@isaacs> fat: if i know the name of something, i use view
21:27 < fat> oh word
21:27 < fat> ok
21:27 <@isaacs> fat: like, if i wana know what the git repo for xyz is, i'll do `npm view xyz repository`
21:27 < fat> right
21:27 < fat> hm
21:27 <@isaacs> fat: but if i wanna find a module to do xyz, i'll do `npm search xyz`
21:27 < fat> ok
21:27 < fat> i usually use github for this :/
21:28 < fat> but i may be in the minority
21:28 < fat> at any rate good to know
21:28 < fat> isaacs: do you keep analytics on usage at all?
21:28 < zipp> pssh washington dc > west coast :P
21:28 <@Nexxy> zipp it
21:29 < zipp> Nexxy I'm gonna be back over that way next week though :) Santa Cruz
21:29 <@Nexxy> I'm in PDX
21:29 < stephank> mscdex: I think, even for CTR and other modes, the block size and IV is always 128-bits for AES?
21:29 <@Nexxy> where sensible people live
21:29 < zipp> Nexxy: Oh, of course lol
21:29 < Hotroot> I'm so close to the silicon valley, yet so far =/
21:29 <@Nexxy> one day maybe I'll grow a giant beard and migrate south
21:30 < zipp> And then you'd be maxogden
21:30 <@isaacs> fat: only sorta
21:30 <@Nexxy> well no
21:30 <@isaacs> that's like second on my todo list
21:30 <@maxogden> :D
21:30 < fat> oh word
21:30 <@Nexxy> moar liek
21:30 <@isaacs> fat: to actually expose on the website i mean
21:30 <@Nexxy> minogden
21:30 < fat> yeah
21:30 <@maxogden> nice
21:30 < fat> that would be really cool i think
21:30 < ccowan> Nexxy: Does everyone in Portlandia use CoffeeScript?
21:30 <@Nexxy> no
21:30 <@maxogden> no
21:30 <@isaacs> fat: it'll just be the count of tarballs that got 200 responses in a given day period (utc-day)
21:30 <@Nexxy> I do my best to make sure of it
21:30 < ccowan> ha ha
21:31 <@Nexxy> coffeescript isn't even hand poured
21:31 <@Nexxy> it's not worth our time
21:31 <@isaacs> fat: broken down by package name and version
21:31 < fat> isaacs: it would be kinda cool if there was like a google analytics for clis
21:31 < fat> like i think it would be cool to know how many people are running each command etc
21:31 < fat> so you know where to invest etc, where to trim the fattt
21:31 < ccowan> Nexxy: or fair trade!
21:31 <@isaacs> fat: just have your cli fetch a google analytics url
21:32 <@Nexxy> ccowan, or personally roasted *cough* mikeal 
21:32 < fat> yeah that's a good idea
21:32 <@isaacs> i mean, i'm not gonna do that with npm itself probably
21:32 < fat> sure
21:32 <@isaacs> it oughtta be opt-in at least
21:32 < ccowan> ha
21:32 < fat> i suppose
21:32 <@isaacs> "Send usage statistics to npm? [yes]"
21:32 < fat> yeah
21:32 < fat> something like that
21:32 < mikeal> haha
21:33 < mikeal> Nexxy: i only use single origin javascript :)
21:33 <@Nexxy> rofl
21:33 <@Nexxy> that's worth a quote
21:33 <@isaacs> mikeal: bs, you use jquery everywhere
21:33 <@Nexxy> hey now
21:33 <@Nexxy> jifasnif, etc
21:33 <@isaacs> haha
21:33 < zipp> lol
21:34 < ccowan> I wish I drank coffee (the real kind)... 
21:34 <@maxogden> book title: single origin policy
21:34 < dnnsmanace> what is the most effective way to do an asynchronous for loop?
21:34 < zipp> http://jifasnif.jit.su
21:34 < mikeal> haha
21:34 < dnnsmanace> by the time i get my callback, my i in for (i in foo) goes to the last #
21:35 <@Nexxy> dnnsmanace, closures
21:35 < dnnsmanace> Nexxy: pls elaborate :)
21:35 <@Nexxy> post a snippet!
21:36 < mikeal> dnnsmanace: for (var i in foo) { (function(i) { // your code  })(i) }
21:36 <@maxogden> dnnsmanace: what is the problem you are trying to solve
21:36 < mikeal> for doesn't get it's own closure scope, so when the callback gets called in the future the reference is to the last value in the loop
21:36 < mikeal> create a new function scope to hold the for's i around in the future
21:37 < fat> dnnsmanace: just require('async').forEach
21:37 < dnnsmanace> http://pastebin.com/S1Sc6imd
21:37 < mikeal> fat: people need to know javascript :)
21:37 < fat> lies
21:37 <@Nexxy> mentlegen.
21:38 < dnnsmanace> ah, so i should wrap im.resize in its own function and pass the i to it
21:38 <@maxogden> fat: oh yea check this shiz https://github.com/jllord/sheetsee.js
21:39 < fat> HI!
21:39 < fat> lol
21:39 < fat> maxogden: that is probably the cutest read me in the game
21:39 <@maxogden> brings tears to my eyes
21:39 < fat> haha
21:39 < remysharp> bnoordhuis: I've got the binary built - I've got node and node_g (this is new to me - sorry), how would I run it in gdb?
21:41 < jonmarkgo> So I just installed nodejs and npm using apt-get, node works but when I try to run npm I get bash: /usr/local/bin/npm: /usr/local/bin/node: bad interpreter: No such file or directory
21:41 < jonmarkgo> Anyone know how to fix?
21:42 < bnoordhuis> remysharp: gdb --args path/to/node_g script.js
21:42 < bnoordhuis> jonmarkgo: from what repo did you get it?
21:42 < remysharp> bnoordhuis: thanks - then once it's crashed, run "bt full" (is that a command or args to something else?)
21:43 < bnoordhuis> remysharp: it's a gdb command
21:43 < jonmarkgo> sudo add-apt-repository ppa:chris-lea/node.js
21:43 < bnoordhuis> jonmarkgo: do you have a /usr/local/bin/node binary?
21:43 < remysharp> bnoordhuis: so `gdb bt full` and then off to github issues :)
21:44 < klawd_prime> hi!
21:44 < klawd_prime> is it cool to use mootools and underscore with node?
21:44 < Franz__> yes
21:44 < bnoordhuis> remysharp: no, wait. you run the gdb --args thing first
21:44 < klawd_prime> sweet.
21:44 < bnoordhuis> remysharp: that'll start gdb, type `run`, wait for it to crash, then type `bt full`
21:45 < jonmarkgo> bnoordhuis: Nope, strangely enough
21:45 < klawd_prime> ill give node a serious try now.
21:45 < remysharp> bnoordhuis: ah - I was about to say, I was stuck in a (gdb) prompt.
21:45 < zipp> jonmarkgo: install from nave?
21:45 < jonmarkgo> bnoordhuis: nave?
21:45 < klawd_prime> any hints on good IDEs?
21:45 < bnoordhuis> jonmarkgo: and report the bug to chrislea
21:45 < zipp> https://github.com/isaacs/nave
21:45 < ccowan> bnoordhuis: vim
21:45 < jonmarkgo> bnoordhuis: which node gives /usr/bin/node
21:45 < ccowan> oops!
21:46 < ccowan> bnoordhuis: sorry... I meant klawd_prime 
21:46 < bnoordhuis> jonmarkgo: do you have a /usr/bin/npm?
21:46 < remysharp> bnoordhuis: cheers so much - that's given me lots of scary output that'll be useful to someone far more knowledgeable than me! Ta.
21:47 < jonmarkgo> bnoordhuis: Yes
21:48 < jonmarkgo> bnoordhuis: So its a path issue...
21:48 < bnoordhuis> jonmarkgo: yes
21:48 < bnoordhuis> remysharp: my pleasure :)
21:48 < jonmarkgo> Not sure how to fix
21:48 < pringlescan> Hey guys, I'm going to make a module to extract US postal addresses from strings/html, I made up a flow diagram (it's pretty short) would anyone mind giving it a once over to see if it's somewhat sane? http://thispos.com/address_extractor_flow.html
21:49 < pringlescan> remysharp, I've definitely stumbled upon your blog before, kudos on that.
21:50 < bnoordhuis> jonmarkgo: easiest is to remove /usr/local/bin/npm, it's probably a leftover from an old install
21:50 < remysharp> pringlescan: cheers :) [wonders if pub takes kudos tokens....]
21:50 < jonmarkg_> Got d/ced
21:50 < jonmarkg_> bnoordhuis: any idea how to fix the path issue?
21:50 < bnoordhuis> jonmarkgo: easiest is to remove /usr/local/bin/npm, it's probably a leftover from an old install
21:51 < bnoordhuis> err, jonmarkg_ 
21:51 < pringlescan> remysharp, if I wasn't in between jobs that wouldn't be the first time I felt obliged to buy someone a beer on IRC for their help.
21:55 < jonmarkg_> bnoordhuis: Worked, thanks
21:58 < murvinlai> can anyone hlep me on that..
21:59 < murvinlai> in curl, i can do -k to perform insecure SSL connections
21:59 < murvinlai> How can I do that with node's https?
21:59 < murvinlai> what options should I set?  I check the node.js doc and can't find any similar
22:05 < bnoordhuis> murvinlai: what api docs have you checked?
22:07 < murvinlai> bnoordhuis:  the https
22:07 < bnoordhuis> murvinlai: try tls
22:07 < murvinlai> and also the tls connect
22:08 < murvinlai> bnoordhuis:  what happen is.. I have a cert & passphrase, it works.  But however, because of soem operational reason, the cert's url is different from teh host name, and causing security failure
22:09 < murvinlai> so, i want to skip that..  or ignore that
22:10 < murvinlai> i mean the hostname in the cert doesn't match the url... and i want to ignore that... but can't. :(
22:10 < bnoordhuis> murvinlai: { rejectUnauthorized: false }
22:10 < murvinlai> ok.  let me try that. 
22:10 < bnoordhuis> which is actually the default
22:10 < mscdex> wolf3d.js!
22:11 < murvinlai> so, do i need to set reqeustCert be true?
22:12 < bnoordhuis> murvinlai: requestCert is a server-side option
22:13 < murvinlai> well.. i just try rejectUnauthorized.. but it doesnt' work
22:14 < murvinlai> let me try again
22:14 < bnoordhuis> murvinlai: define "doesn't work"?
22:16 < murvinlai> means. throw the same error
22:16 < murvinlai> Error: socket hang up     at SecurePair.error (tls.js:907:15)     at EncryptedStream.CryptoStream._done (tls.js:385:17)     at EncryptedStream.CryptoStream._pull (tls.js:536:12)     at SecurePair.cycle (tls.js:825:20)     at EncryptedStream.CryptoStream.end (tls.js:358:13)     at Socket.onend (stream.js:66:10)     at Socket.EventEmitter.emit (events.js:115:20)     at TCP.onread (net.js:424:51) 
22:16 < murvinlai> it doesn't ignore the error
22:17 < bingomanatee> I am finding that the bufferSize option on createReadStream for text files doesn't seem to actually boost the chunk sizes. Why is this?
22:17 < bnoordhuis> murvinlai: what version of node?
22:17 < bnoordhuis> bingomanatee: what bufferSize are you trying to set?
22:17 < bingomanatee>   var log_handle = fs.createReadStream(filename, {encoding:'utf8', bufferSize: 256 * 1024});
22:19 < bnoordhuis> bingomanatee: yes, that doesn't work - it's capped at ~48K
22:19 < CIA-93> libuv: Bert Belder master * r4442ddc / include/uv-private/uv-win.h : windows: fix formatting issue in uv-win.h - http://git.io/xW67sA
22:21 < murvinlai> bnoordhuis:  0.8.4
22:23 < bnoordhuis> murvinlai: it probably means the server closed the connection
22:24 < murvinlai> bnoordhuis: do u mean remote server?
22:24 < bnoordhuis> murvinlai: yes
22:29 < murvinlai> bnoordhuis:  ok.. let me check & trace the network.
22:31 -!- maxogden changed the topic of #Node.js to: node.js - websphere eat your heart out
22:34 < flowlo> hello, I'm driving crazy on sessions with express ... basically I want a mysql session store. I don't get any errors, but the value I write to req.session.user is not stored. my pastes: https://gist.github.com/3344546
22:34 < flowlo> would be nice if someone could help me :)
22:36 < trb_> flowlo: why mysql session store?
22:37 < zipp> ^ trb_ asks a valid question :p
22:37 < pringlescan> has anyone used a redis queue instead of something like async?
22:37 < zipp> I'm using redis pub/sub and amqp queue using amino
22:38 < zipp> https://github.com/cantina/amino
22:38 < flowlo> trb_: I have a mysql db, and I don't excpect many users so this is the most painless way I thought
22:38 < trb_> flowlo: but, sessions.... are you running more than a single server?
22:38 < flowlo> trb_: no
22:38 < trb_> then don't mess about with distributed session stores
22:39 < trb_> just use the built in, default, session store
22:39 < flowlo> okay, how do I do that? omit store: I would guess?
22:39 < trb_> flowlo: it just works, I don't know the specific config, it just works
22:40 < trb_> that would be a memory store I think, but really, if you are only doing 1 server setups you don't need to think about these things
22:40 < trb_> its when it gets to 2+ servers that you need to consider sessions across them
22:40 < flowlo> yeah I tried the express-spdy --sessions thingy and sessions didn't work out well that's why I thought I need to define a session store
22:40 < trb_> mysql is the wrong solution also
22:41 < trb_> spdy is a protocol, not a session thing
22:41 < flowlo> I know that .. I mean initializing the app.js and directory structure. I specified I want sessions there
22:41 < trb_> if you want properly scalable sessions, I'd look at something like memcache
22:42 < flowlo> the whole app is tiny (and won't grow beyond 100 users), I don't need super performance
22:42 < pringlescan> I have to go hang some ceiling drywall… thanks for bouncing ideas with me guys. Have a good day/night.
22:42 < zipp> pringlescan: any thoughts on amino or redis queue vs amqp?
22:42 < flowlo> could you please have a look at the gist and check the login part, because I can't spot what I do wrong
22:42 < trb_> so just don't go trying to override the default then
22:43 < trb_> flowlo: I'm not a js expert, I do sysadmin most of the time, and I'm about to fall asleep
22:43 < flowlo> trb_: okay ... then sorry to bother you
22:44 < trb_> all I can really say is, don't try and use slow db to store sessions when you don't need to scale
22:44 < trb_> memcache is pretty damn fast, and scalable more than mysql is
22:44 < flowlo> yeah I know all that, I only added the mysql store because I didn't get the default to work ...
22:45 < trb_> the default should just work, its either memory or file based
22:45 < benvie> https://github.com/rafaelw/v8 f yeah Object.observe 
22:45 < trb_> anyway, sleep
22:45 < trb_> no jokes about 'she is for the weak' please
22:45 < trb_> :p
22:45 < zipp> dude, coffee can only keep you awake for so long :P
22:46 < zipp> (and then you die.)
22:46 < trb_> zipp: I don't drink coffee
22:46 < trb_> it is approaching midnight
22:46 < trb_> and I need to be up by 9:30 am
22:46 < zipp> Oh, you Europeans. Well. Night! :D
22:46 < trb_> lol
22:46 < flowlo> 00:46 here ...
22:46 < zipp> 18:46 :x
22:47 < trb_> flowlo: oh you continentals
22:47 < trb_> :p
22:47 < zipp> Oh hey, we're not Yankees anymore? lol
22:47 < trb_> zipp: I was saynig that to flowlo
22:47 < zipp> ooh
22:47 < trb_> one hour ahead means spain or somewhere in mainland europe
22:47 < flowlo> yup :)
22:47 < trb_> .uk is generally one hour behind
22:48 < trb_> and I'm in .uk
22:48 < flowlo> depends, you have the GMT and we are +1 :)
22:48 < trb_> flowlo: we are on BST
22:48 < flowlo> and I'm in .at btw :P
22:48 < flowlo> what's bst?
22:48 < trb_> british summer time
22:48 < trb_> gmt+1
22:48 < flowlo> yeah
22:48 < trb_> wheres at?
22:48 < trb_> s/at/.at/
22:48 < flowlo> between .de and .it
22:49 <@maxogden> haha
22:49 < trb_> whats the country for .at?
22:49 < flowlo> Austria
22:49 < trb_> ah
22:49 < flowlo> no medals at the olympic games ... so you don't have to know :P
22:49 < trb_> I only just watched the opening and closing this evening, rather boring
22:50 < trb_> fast forwarded most of it
22:50 < flowlo> same here
22:50 < zipp> It was in every bar over here; couldn't get the fuck away from it
22:50 < trb_> it was showing everywhere here, but without sound
22:51 < zipp> If only..
22:51 < RocketJSquirrel> zipp: I love how “in every bar” = “couldn't escape”
22:51 < trb_> I was too drunk to really notice for the opening
22:51 < zipp> RocketJSquirrel lol fair catch ;)
22:51 < trb_> anyway, I must catch sleep now, cya
22:51 < zipp> later
22:52 < flowlo> good night
22:52 < pringlescan> zipp, I have no knowledge of them, i might know in the next 24 hours, if amqp is what rabbitmq uses, I wouldn't mix erlang and node, between being able to debug both of them I'm on the opinion you may lose sleep over it
22:52 < pringlescan> also rabbitmq isn't as fast as you'd think
22:54 < flowlo> so, any express experts in here? :/
22:55 < deoxxa> flowlo: #express
22:56 < flowlo> deoxxa: thanks
22:58 < zipp> pringlescan: Fair enough :3
23:02 < dnnsmanace> does anyone use a control flow library on frontend?
23:03 < dnnsmanace> something like step but for frontend
23:04 < __underscore> dnnsmanace: async apparently works in the browser (though I haven't used it there)
23:04 < __underscore> https://github.com/caolan/async
23:05 < CIA-93> libuv: Bert Belder master * r7fb43d3 / (src/win/async.c uv.gyp src/win/atomicops-inl.h): windows: move uv_atomic_exchange_set to atomicops-inl.h - http://git.io/mIpyrQ
23:05 < dnnsmanace> i am thinking of doing heavy rendering completely in the client after a few api calls, helped with a control flow library
23:05 < dnnsmanace> would you advise against this for any reason?
23:06 < __underscore> hard to say, depends on your app. Not inherently a bad idea though 
23:07 < dnnsmanace> it involves a lot of dynamic image loading which doesnt make sense to prerender much of the html on backend
23:07 < dnnsmanace> this way ill basically have one static html file and have the client do all the calls/rendering with js
23:08 < __underscore> that makes sense
23:15 < libryder> i was just discussing if i should build a lightweight js/ajax app in sinatra/mongodb/backbone.js or nodejs/mongodb… is there anything i should consider before jumping in nodejs? 
23:15 < libryder> i don't know a whole lot about it
23:16 < libryder> i'd like to use jqueryui
23:17 < Sembiance> hrm
23:17 < caolanm> dnnsmanace: I sometimes use async in the browser due to doing lots of crazy ajax etc
23:17 < Sembiance> libryder: I'm afraid I've never used jQuery UI, nor do I use sinatra, or backbone or underscore or any mv* type framework
23:17 < caolanm> dnnsmanace: so the async lib works well in the browser
23:17 < Sembiance> libryder: a lot depends on what you want to build :)
23:18 < dnnsmanace> caolanm: thats what i want to do, will try it, have used async before but have been using sync on a recent project, backend tho
23:18 < Sembiance> libryder: unless your just having fun learning, then just pick whatever and jump in :)
23:18 < dnnsmanace> i mean step
23:18 < dnnsmanace> :)
23:18 < libryder> Sembiance: it will be a small app where users can add "sticky notes" and drag/drop them into categories
23:18 < dnnsmanace> step is a similar think
23:18 < dnnsmanace> thing
23:18 < libryder> i mean that's not outside of the scope of nodejs right?
23:19 < libryder> i'm mostly having fun
23:19 < Sembiance> dnnsmanace: I love step, I use it in all my projects
23:19 < libryder> learning
23:19 < dnnsmanace> step makes my async life easy
23:27 <@Nexxy> libryder, don't use jqueryui
23:27 <@Nexxy> it's a horrible monstrosity
23:28 < libryder> the drag/drop functionality works well enough
23:28 < libryder> i've used it a lot; why don't you like it?
23:29 <@Nexxy> it's clunky and outdated
23:30 < libryder> do you recommend any alternative to drag/drop functionality?
23:30 < bnoordhuis> Nexxy: that's what people said about the volkswagen beetle
23:31 < Hotroot> Found this neat little demo
23:31 < Hotroot> http://zyu.me/
23:31 < Hotroot> Pretty basic, but a neat idea. Almost runescape + minecraft
23:40 < rvagg> maxogden: can you tell me if my gyp config compiles on mac? https://github.com/rvagg/node-levelup
23:41 < rvagg> Nexxy: new channel up your alley: #robotjs
23:41 < TooTallNate> rvagg: the "include_dirs" section is unnecessary, since those get added from leveldb's gyp file
23:41 < TooTallNate> and you inherit them when you add it as a "dependency"
23:41 < rvagg> TooTallNate: I needed you yesterday, it was driving me insane
23:42 < TooTallNate> t'was my day off 8)
23:45 < rvagg> cheers, simplified!
23:50 <@Nexxy> rvagg, wat!
23:50 <@Nexxy> also, I just got my ninjablock!!
23:51 < rvagg> cool!
23:51 <@Nexxy> very
23:51 <@Nexxy> haha woah
23:53 < bwen> anyone could give me some pointers on converting this function http://pastie.org/4469234 to nodejs ?
23:54 <@maxogden> rvagg: https://gist.github.com/135335d57dffe2ad72ed
23:55 < rvagg> bleh!
23:55 <@maxogden> so many dependencies
23:56 < rvagg> maxogden: it's buster, for testing, they're working on making a buster-node with much fewer deps
23:56 < rvagg> at the moment it includes everything, cruft for browser testing as well
23:57 <@maxogden> what does buster do? https://npmjs.org/package/buster doesnt have a readme or a github link
23:57 < rvagg> http://busterjs.org/
23:57 < rvagg> or see my tests/ dir
23:58 <@maxogden> interesting
--- Log closed Tue Aug 14 00:00:08 2012
