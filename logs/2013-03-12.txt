--- Log opened Tue Mar 12 00:00:16 2013
--- Day changed Tue Mar 12 2013
00:00 < _6a68> samholmes: crossroads.js might be a better answer, it's standalone
00:01 < samholmes> I'm looking for something I could use with require
00:01 < remon> hii...I need someone to help on with a smiple code i am doing using nodejs and redis 
00:01 < samholmes> Does tj have a module that exposes just the routing API?
00:02 < samholmes> If I could simply just invoke a function on page load for specific routes, that'd be good
00:04 < othiym23> OK
00:04 < othiym23> my old hack of popping the mocha exception handler off of test cases that need to test exception handling no longer works in 0.10
00:05 < othiym23> so now I'm just copying process._events['uncaughtException'] elsewhere and setting it to []
00:05 < othiym23> (in the before() handler for the suite, and then restoring it in the after())
00:05 < othiym23> is this going to bite me in the ass in unpredictable ways?
00:10 < MI6> joyent/libuv: bnoordhuis created branch saghul-review-this - http://git.io/H1P-LQ
00:11 < Albitos> hello everybody
00:12 < Albitos> could some merciful soul help me?
00:12 < Albitos> i'm just starting using node.js and js framework
00:12 < Albitos> s
00:12 < Albitos> and i installed derby
00:13 < Albitos> and im getting this error after going through "getting started" tutorial
00:13 < Albitos> http://pastebin.com/NApT2mi0
00:13 < Albitos> i'm using windows 8 64bit
00:13 < Albitos> and the errors shows after first page view
00:13 < Albitos> only post i could find about this was a bugreport
00:14 < Albitos> any ideas?
00:16 < Albitos> did at least somebody read my message?
00:17 < Sly> Nexxy: you around?
00:19 < othiym23> Albitos: I don't think there's a lot of Derby users here, sorry
00:19 < Albitos> what other frmework should i try? do you recommend something?
00:20 < othiym23> Albitos: Derby seems perfectly fine -- maybe poke the folks in #derbyjs?
00:21 < Albitos> ok, thanks
00:22 < korilo> Albitos, learn ExpressJS :D
00:22 < Albitos> isn't it bundled within derby?
00:22 < othiym23> Express and Derby are different things
00:22 < othiym23> and Express really isn't the be-all and end-all of web frameworks for Node, it's just the most popular
00:22 < korilo> i meant express+angular soz
00:23 < korilo> i know they are different things
00:23 < ChrisPartridge> derby is built on top of express, no?
00:23 < Albitos> at least it downloads it during installation ;) that i can tell for sure
00:24 < Albitos> downloads express*
00:24 < korilo> ChrisPartridge,  yep
00:28 < othiym23> the debugger and domains and uncaughtException interact in unhelpful ways
00:28 < othiym23> tests that fail when run from the command line pass when run under the debugger
00:31 < samholmes> I'm guessing there is no module like this. I'm going to build a module today that exposes the routing nature of express, that's it.
00:31 < samholmes> Anyone know what 'ota oto' means?
00:35 < Advant> TooTallNate: posted issue to github
00:36 < Havvy> I just updated jasmine-node, but I still don't have the done() functionality promised on their readme. :(
00:49 < ningu> anyone tried out v0.10 yet?
00:49 < deoxxa> yep
00:49 < deoxxa> is neat!
00:49 < deoxxa> </opinion>
00:49 < ningu> neat how, specifically?
00:50 < deoxxa> hey i just closed my opinion!
00:50 < deoxxa> really though
00:50 < deoxxa> streams2 is cool, after you get your head around it
00:50 < deoxxa> i hated it with a passion at the start
00:50 < deoxxa> but it makes a lot more sense now than it used to
00:50 < harrisonm> Need to either compile again or uninstall and install the ppa
00:50 < deoxxa> what's missing is an overview of "here's how shit works"
00:51 < deoxxa> so i'm thinking of writing that up
00:51 < deoxxa> since i think i mostly understand it now
00:51 < ningu> I don't think I have a current need for any of the features of streams2
00:51 < harrisonm> Need to either compile again or uninstall and install the ppa
00:51 < ningu> based on what i read about it
00:51 < deoxxa> ningu: there are a lot of silent advantages though, mostly around stability and performance
00:51 < ningu> I know
00:51 < deoxxa> harrisonm: COOL STORY BRO, DO IT
00:52 < harrisonm> deoxxa: Haha actually about to, didn't realize I posted that twice
00:52 < dandv> what would be the best synchronous alternative to Node.js, for a fellow beginner JS programmer?
00:52 < ningu> dandv: something other than JS
00:53 < AAA_awright> ECMAScript doesn't really lend itself well to anything else
00:53 < AAA_awright> So something else, PHP or Ruby perhaps
00:53 < dandv> I meant another JS framework
00:53 < dandv> Meteor is synchronous, but too heavy
00:53 < AAA_awright> Like I said, you're not really going to find that in ECMAScript
00:53 < AAA_awright> Or anything that lets you build an HTTP server
00:54 < harrisonm> Yeah, I can't think of a single synchronous JS framework off the top of my head
00:54 < niggler> fuck meteor
00:55 < dandv> well, in the case of the drone project at the link above, it seems superflous to have the code laid out that way, instead of just client = arDrone.createClient().takeoff().wait(1000).clockwise(0.5).stop().land(); // jQuery chaining style
00:55 < echo> niggler: Agreed. 
00:55 < AAA_awright> Die
00:55 < ningu> what's wrong with meteor?
00:56 < ningu> I've never heard of it.
00:56 < niggler> ningu you are better off not knowing it
00:56 < dandv> ningu: meteor is great for single page apps, but it pushes a lot of glue code to the client
00:56 < dandv> niggler: don't be a dumbass
00:56 < dandv> each tool has its purpose
00:57 < echo> I won't discount any of that, but I personally dislike the black-box feel and the way it's structured. http://meteor.com/
00:57 < ningu> "Node can be used for a variety of things and on its own is terrible at serving up dynamic web content. Meteor's libraries make all of this easy."
00:57 < niggler> the problem is that meteor decided to create its own ecosystem instead of embracing the existing ecosystem
00:58 < niggler> derby.js is an example of something that is strictly better than meteor
00:58 < niggler> completely obviating the purpose of meteor
00:58 < Havvy> What is derby.js?
00:59 < niggler> same category as meteor
00:59 < niggler> http://derbyjs.com/
01:01 < echo> That's not bad at all looking, actually. It looks like someone put Backbone and Express in a blender, which I like the idea of.
01:03 < ningu> I wonder if you can only use mustache templates with it
01:03 < ningu> handlebars, even.
01:06 < dandv> niggler: meteor is moving to embrace the NPM ecosystem actually. work is already done in the 'engine' branch. You can use Npm.require('...'). https://groups.google.com/d/msg/meteor-talk/b6zQrgk8lYo/7KykCwz19WMJ
01:07 < deoxxa> rofl @ Npm
01:07 < deoxxa> worst possible capitalisation scheme
01:07 < ningu> worse than XMLHttpRequest?
01:07 < niggler> deoxxa: asciitable is awesome btw
01:07 < deoxxa> niggler: thanks!
01:08 < deoxxa> ningu: even worse!
01:10 < AAA_awright> deoxxa: And crowd out other package managers, perfect
01:10 < AAA_awright> Die die die
01:10 < AAA_awright> *dandv
01:10 < AAA_awright> Wow you're both the same color in my client
01:11 < dandv> AAA_awright: are you issuing death threats to me?
01:11 < deoxxa> we're all the same colour in my opinion
01:11 < deoxxa> ALL JUST PEOPLE
01:11 < AAA_awright> No, npm support in softwares
01:11 < deoxxa> you racist, AAA_awright
01:11 <@Nexxy> Sly, here but super busy
01:11 < niggler> woah who's being racist here
01:11 <@Nexxy> Sly, what's up? ;o
01:12 < deoxxa> niggler: you are!
01:13 < dandv> can you lend a niggler a pencil?
01:14 < AAA_awright> wat
01:18 < dandv> it's a reference to http://www.youtube.com/watch?v=XURRzofbMc0
01:21 < kinabalu> LeftWing: ahhh ... i see ... well it's not a public NTLM server unfortunately, behind a firewall ... but I can test it for you :)
01:25 < dandv> hm http://opalang.org/ looks really really cool, and solves meteor's client/server differentiation problem with explicit prefixes
01:29 < ningu> I think someone needs to start a website called snack overflow
01:30 < niggler> that's called 7-11 ningu
01:31 < OTBS4Life> Woot, pass the booze, Node v.10 is out.
01:31 < OTBS4Life> The blog post (http://blog.nodejs.org/2013/03/11/node-v0-10-0-stable/) talks of fixing up the HTTP lib for v0.12.  Is this going to be the rewrite that brings the whole client/server into JS land?
01:32 < OTBS4Life> mscdex: Was it you that was telling me this was a plan?  Last summer I think you mentioned this.
01:32 < ningu> does .10 incorporate a substantially newer version of v8 or is that basically the same?
01:33 < mscdex> OTBS4Life: i don't remember, that's too long ago ;-)
01:33 < OTBS4Life> Lol, fair enough.
01:33 < mscdex> i have dabbled with rewriting the http parser to be js only though
01:33 < OTBS4Life> Yeah, I think you were the one telling me.
01:34 < OTBS4Life> Do you think that will be in .12?
01:34 < OTBS4Life> Or is the focus on something else?
01:34 < mscdex> i dunno
01:34 < OTBS4Life> I've been monkey-patching the client for a year now.  To be honest though, I've simplified what I need to do and it is fine.
01:35 < OTBS4Life> What originally started as a complete re-implementation of httpclient hooking into the Node stuff ended as 4 lines of monkey-patch.
01:36 < deoxxa> ningu: actually i'm pretty sure they downgraded v8 at some point in 0.9.x
01:36 < deoxxa> ningu: after an upgrade or two in 0.9.x
01:36 < ningu> deoxxa: as compared with 0.8, or is it the same?
01:37 < deoxxa> i'm not quite sure there
01:37 < deoxxa> likely newer
01:37 < ningu> I don't really know what newer versions of v8 actually add anyway
01:38 < mscdex> ningu: they keep a changelog
01:40 < OTBS4Life> ningu: Out of everything I've used, I'd say that Node.js is probably the most active.  :-D  Always lots going on.
01:44 < faceleg> more cylinders
01:44 < faceleg> better fuel efficiency
01:44 < faceleg> stuff like that
01:57 < elux> hello
01:57 < elux> is there a console for node?  in the cli..
01:58 < deoxxa> yes
01:58 < deoxxa> type node
01:58 < deoxxa> you are now in the node console
01:58 < elux> oh :S..
01:58 < elux> duh
01:58 < deoxxa> \o/
01:59 < ningu> hehe
01:59 < ningu> what if I need to be consoled, can node do that?
02:02 < faddler> I've got massive newby-itis..
02:03 < faddler> is it OK to post a job here...right now?
02:03 < ningu> what do you mean, post a job?
02:04 < faddler> We're looking for someone who knows knode ;-)
02:06 < jtomasrl> i need to save the time when an object is created, but it used the server time, not the client time, is there a way to create a date based on client timezone?
02:06 < austinc> can someone help me to understand how to save an image file from a url to upload to S3 without saving it locally?
02:06 < faddler> so quiet...ok if you want to telecommute and are awesome, please take a look here:   https://faddle.recruiterbox.com/jobs/17951
02:06 < austinc> I'm trying to use mikeal/request, but if I save the body the file is corrupt
02:07 < ningu> jtomasrl: can't you use Date from the client side?
02:08 < ningu> Date.getTimezoneOffset() for example
02:08 < austinc> there's plenty of examples of using request(uri).pipe(fs.createWriteStream(filename)), but what do I have to do to store the image in memory to upload with something like knox or aws-sdk.
02:08 < jtomasrl> ningu: i want to take the timezone from a db and then use is on the server side, is very important that i have the correct time
02:09 < ningu> jtomasrl: I don't really understand. you want the client's timezone but you want to take it from a db?
02:09 < ningu> how can you get the client timezone without getting it from the client?
02:10 < azylman> jtomasrl: Maybe you want to store the date in UTC on the server and then format it to the client's timezone client side
02:12 < jtomasrl> azylman: i have it UTC
02:12 < jtomasrl> 2013-03-07 14:24:27 UTC
02:13 < zeromodu_> my node code crashed my machine. T_T
02:13 < azylman> So then you can send that to the client and use the client's local time zone to display it in their time
02:14 < jtomasrl> so thats how it works ... :P
02:15 < azylman> There's no way to get the client's local time zone on the server unless you have knowledge of the client
02:16 < azylman> So if you have to format it on the server, you'd need to send that along with your request or something (via query param, post param, ajax endpoint, etc.)
02:16 < austinc> Anyone know how to download an image file using request, without using pipe?
02:17 < deoxxa> request("http://herp.derp/i-should-read-the-docs.jpg", function(err, data) { fs.writeFile("lol-seriously.jpg", data); });
02:20 < OTBS4Life> Is anyone using Winston with Node.js v.10?
02:20 < samholmes> I need help with npm.
02:20 < OTBS4Life> If I log extra data with a log message, it is very broken in v.10... instead of the object, I get some internal Winston function.
02:21 < austinc> @deoxxa lol, the file that gets saved is corrupt though, I'm not sure what's going on: https://gist.github.com/acargol/1792678a31500092c96f
02:21 < zeromodulus> oops, lol, messed up a nested loop, crashed me system.
02:21 < austinc> @deoxxa when I try to open it, it says it might be damaged or corrupt
02:21 < samholmes> I want to create a new npm package and want to publish it eventually. But while I develop, I need to test it in an application that I'm going to be using it in. Is there a way I can npm install it before I publish it?
02:21 < zeromodulus> at least... I hope that's what the cause was...
02:22 < samholmes> Should I just publish it as I develop it?
02:22 < deoxxa> austinc: https://github.com/mikeal/request#requestoptions-callback see the "encoding" option
02:22 < niggler> samholmes npm link
02:22 < samholmes> niggler: What's that?
02:22 < samholmes> I keep reading the docs on that, but I cannot understand it. X__X
02:23 < niggler> there are two ways to do this
02:23 < niggler> you can do the lazy way, which means symlinking from node_modules
02:23 < niggler> so lets say you have module foo you want to test
02:23 < niggler> and foo is in /some/path/to/foo
02:23 < niggler> and your client code is in /another/path/to/bar
02:24 < niggler> you could create a symlink /another/path/to/bar/node_modules/foo -> /some/path/to/foo
02:24 < niggler> and then things work
02:24 < niggler> or you can go to /some/path/to/foo and run 'npm link' then go to /another/path/to/bar and run 'npm link foo'
02:25 < niggler> what I do, however samholmes, is to put binaries in the npm module directly
02:25 < samholmes> niggler: binaries?
02:26 < samholmes> This is 100% js module
02:26 < samholmes> no binary
02:26 < samholmes> does `npm link` cache the package until you call npm link with the package name?
02:26 < niggler> so in 'xlsx' (npm install xlsx, https://github.com/Niggler/js-xlsx) i put the test script directly in the module (https://github.com/Niggler/js-xlsx/blob/master/package.json#L10) which references the local module
02:27 < austinc> @deoxxa Thank you. Do you have any opinion on base64 vs. binary?
02:27 < samholmes> niggler: test scripts are one thing. I'm looking to develop it from within a project
02:27 < niggler> the third option, if npm link doesnt suit your fancy and you don't like symlinking
02:28 < samholmes> niggler: Think about it as though I'm developing a lib or package that is being used in a project, yet I want to develop the lib to be useable from outside the project, of course.
02:28 < niggler> is to direct npm to use a git repo
02:28 < samholmes> symlinking seems pretty simple enough, to uninstall the package you just do npm unlink foo?
02:29 < niggler> you can just remove the symlink
02:29 < samholmes> it's just a single file?
02:29 < niggler> yeah
02:29 < samholmes> cool.
02:29 < samholmes> thanks nigger! :D
02:29 < samholmes> niggler*
02:29 < niggler> you really should use tab completion
02:30 < zeromodulus> so is it the stream module that I want to use for building something where the client can talk to the server via client side javascript?
02:30 < samholmes> haha, I usually do..
02:30 < samholmes> I'll remember to do that especially for you name. :P
02:30 < ningu> zeromodulus: probably socket.io
02:30 < samholmes> *or maybe I'll just start calling you that* ;P
02:30 < samholmes> zeromodulus: THERE ARE SO MANY!
02:31 < zeromodulus> :/
02:31 < samholmes> I'm using dnode coupled with shoe and sockjs
02:31 < samholmes> but, rolling your own pubsub on that is tricky for me, but maybe not for others.
02:32 < samholmes> zeromodulus: it depends on what you want to do really.
02:32 < samholmes> RPC is fun! I like being able to just invoke a function on the server from the client.
02:32 < zeromodulus> eh, well, I have this function that runs for a long time, I want to send it some input from the client side, have the code run, then when it's done taking its sweet time, send back the result.
02:33 < samholmes> zeromodulus: Couldn't you just use Ajax for that?
02:33 < zeromodulus> Is that supposed to be a joke? :p
02:33 < samholmes> The function runs on the server, right?
02:33 < zeromodulus> yep.
02:33 < ningu> zeromodulus: socket.io will work fine for it. so will dnode.
02:34 < samholmes> It wasn't suppose to be a joke.. :P
02:34 < zeromodulus> JSON, foo'.
02:34 < ningu> samholmes is right, but it won't hurt to use socket.io either
02:34 < ningu> you can use socket.io with long-polled ajax requests which is basically what he was suggesting
02:34 < zeromodulus> I think socket.io is my ticket, thanks ningu.
02:34 < samholmes> socket.io is like a event system for both ends.
02:34 < ningu> or websockets if available which are better
02:35 < samholmes> If you're "requesting" and then waiting, and then responding, then ajax does the job.
02:35 < zeromodulus> Isn't AJAX supposed to involve XML?
02:35 < ningu> samholmes: yes, but a timeout of 10-15 mins is unrealistic for a single request
02:35 < zeromodulus> And uh, okay.
02:35 < samholmes> zeromodulus: Not at all.
02:35 < ningu> zeromodulus: no. you can return whatever you want.
02:36 < ningu> samholmes: why are you using shoe and sock rather than tights, or trousers?
02:36 < zeromodulus> so for this client side call, does it require a 3rd party library?
02:37 < samholmes> ningu: I wasn't aware of tights and trousers.
02:37 < ningu> zeromodulus: socket.io provides a client.
02:37 < zeromodulus> O.o
02:37 < samholmes> I usually just use shoe and sock
02:37 < ningu> samholmes: just jerking your chain a bit, I just thought it was a funny name
02:37 < ningu> zeromodulus: /socket.io/socket.io.js or something -- you load that on the client.
02:37 < samholmes> ningu: haha, I know. But seriously, I only wear shoes and sometimes socks.
02:37 < ningu> it's in the docs.
02:37  * samholmes gets hot easy
02:37 < zeromodulus> k
02:37 < ningu> zeromodulus: seriously, read the tutorial, it's not that hard...
02:38 < samholmes> simple pimple
02:38 < ningu> samholmes: me too, and my car's a/c is broken, this is a big deal :P 
02:38 < samholmes> simple dimple on your pimple
02:38 < samholmes> ningu: I'm sure google will come out with some pants for use
02:38 < samholmes> us*
02:38 < ningu> haha
02:39 < samholmes> lol
02:39 < ningu> I don't want google collecting information from my pants
02:40 < samholmes> ningu: Well, I'm sure hackers would have a blast getting into your pants.
02:41 < ningu> hopefully google will fix any leaks and holes in its pants
02:43 < zeromodulus> so, I take it socket.io serves its own client side library?
02:44 < ningu> yes. I already told you that :)
02:44 < zeromodulus> oh, haha.
02:44 < zeromodulus> oops.
02:49 < ningu> hmm. I had no idea snake case was a term.
03:00 < zeromodulus> -.-
03:00 < zeromodulus> now I have to figure out how to save the result for emitting later on.
03:01 < zeromodulus> yay.
03:01 < zeromodulus> oh, here we go, storing data associated to a client.
03:02 < askabt> @zeromodulus: socket.io?
03:02 < zeromodulus> yeah.
03:04 < zeromodulus> woo, socket.io roolz.
03:10 < LouisT> CERT_HAS_EXPIRED <-- Is there a way to ignore this with TLS/SSL?
03:11 < LouisT> I also get this random error and  I have NO idea what this means... 9254608:error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol:../deps/openssl/openssl/ssl/s23_clnt.c:766:
03:14 < LouisT> ah.. rejectUnauthorized = false fixed it
03:22 < auser> hey all
03:23 < auser> has anyone used grunt with neuter and coffeescript?
03:25 < samholmes> What about a module keeping state?
03:26 < samholmes> Why don't I see this practice?
03:26 < slajax> has anyone here ever parsed a multipart response from a remote server using http.get etc?
03:27 < slajax> I'm only getting back the first part of the response :(
03:29 < ningu> samholmes: huh?
03:29 < ningu> slajax: you need to wait until the request has completed.
03:29 < ningu> on('data') only gives you a chunk of data, not all of it.
03:30 < slajax> Whats the emitter?
03:30 < slajax> end?
03:30 < samholmes> ningu: if you look at the yarn or lace modules, you'll notice that they do a funky thing; they keep track of the state of a function call instead of passing the state into the function as arguments.
03:30 < ningu> yes
03:30 < slajax> ok, i assume end has the args I'll need
03:30 < slajax> Thanks I'll try it
03:30 < ningu> slajax: no, end doesn't pass the request info
03:31 < slajax> ningu: how should I go about getting the full body thenm?
03:31 < ningu> you need to store it somewhere in your response to the data events
03:31 < slajax> *then
03:31 < ningu> there are examples in the api docs
03:31 < Zavior> Can someone lend a hand? I'm getting an error when running "nom install -d" (npm ERR! install Couldn't read dependencies)
03:31 < Zavior> npm*
03:32 < samholmes> ningu: for example, if you've used page.js, you'll notice that each route function has the ctx and next parameters (express hase req, res, next). But what if in page.js you used the module to access these things, page.ctx, page.next.
03:32 < slajax> ningu, i've got a string var that is parsing on('data') and concatenating onto that string variable to be referenced when end is emitted
03:32 < ningu> slajax: right, so just look at the string when end is emitted
03:32 < slajax> yeah that's the problem
03:32 < slajax> it's not the entire multi-part response
03:32 < ningu> well, I don't know then
03:33 < slajax> ahh, thanks for trying though :)
03:33 < ningu> samholmes: I don't really understand the question, sorry
03:35 < samholmes> ningu: did you know you could change the state of an object during the execution of a function that has access to that object?
03:35 < samholmes> -that has access that object
03:36 < ningu> well, sure
03:36 < ningu> I still don't really see what this has to do with anything :)
03:36 < samholmes> ningu: Therefore, you could invoke a function and a module could have a specific state for that invocation.
03:36 < samholmes> ningu: Well, I'm wondering why I don't see this pattern much
03:37 < ningu> what do you mean by "a specific state for that invocation"?
03:37 < ningu> I don't really know what you mean when you say a module could have a state.
03:37 < ningu> do you mean a global variable semaphore or something that would change its behavior?
03:38 < samholmes> ningu: yeah. Look at lace.
03:38 < Havvy> var x = 0; module.exports = function () { return ++x; };
03:38 < samholmes> I change the behavior of lace.next for every invocation of these functions queued up.
03:38 < Havvy> There, a module with state.
03:38 < deoxxa> samholmes: that's a terrible, terrible design
03:39 < samholmes> deoxxa: Why?
03:39 < deoxxa> samholmes: global state is just always painful in the long run
03:39 < Havvy> ^^
03:39 < samholmes> but it's not global.
03:39 < samholmes> It's modular
03:39 < deoxxa> samholmes: consider when you need more than one instance of an object, even though at the start you said "there'll only ever be one instance of this!"
03:39 < samholmes> Well, actually.
03:39 < Havvy> It's globular. ;)
03:39 < samholmes> idk what I'm saying
03:39 < deoxxa> Havvy: i'm stealing that term
03:39 < ningu> that would be my intuition as well. also, I don't really see what problem it solves in the first place.
03:39 < Havvy> deoxxa: Go for it.
03:39 < deoxxa> wooooo
03:40 < samholmes> deoxxa: The module could export an interface for creating multiple instances therefore multiple states. It's not global.
03:40 < samholmes> You just need access to those instances
03:40 < deoxxa> well that's a bit different to what you said before
03:40 < Havvy> In any case, module level globals hurt. I've had to rewrite a few modules into classes myself.
03:41 < ningu> samholmes: I still want to know why this is necessary in the first place.
03:41 < ningu> yeah, having a class with object attributes seems perfectly reasonable.
03:41 < samholmes> All I'm saying is, why don't I see things like var mod = require('mod'); mod.doSomething(fn); function fn(){ mod.specificState;}?
03:42 < ningu> samholmes: why *would* you see it? why would that be beneficial?
03:42 < ningu> I think there are more downsides than upsides.
03:42 < samholmes> ningu: well function parameters are free from pollution
03:42 < samholmes> fn's params that is
03:42 < ningu> pollution?
03:43 < samholmes> doSomething wouldn't pass state through arguments, it would pass state through the module itself
03:43 < mscdex> slajax: i have
03:43 < samholmes> therefore, fn could have parameter's for other things
03:43 < samholmes> That's the reason why I wont yarn this way.
03:43 < samholmes> wrote*
03:44 < samholmes> Well, I wrote lace this way, yarn is using the `this` context
03:44 < samholmes> to pass state.
03:44 < ningu> samholmes: generally this is done through objects, not modules. so you'd first do var foo = new mod(); foo.setSomething(); foo.doSomething(fn);
03:45 < samholmes> lace is better: lace(function(){ doAsync(lace.next); })(function(params, from, doAsync){ ... })
03:45 < ningu> but what do I know.
03:45 < samholmes> ningu: Do you see how that works above ^
03:45 < ningu> the js object model is slippery, I know people use it in different ways.
03:45 < zeromodulus> ._.
03:46 < zeromodulus> I see socket.io is emitting the correct data, but I for some reason cannot see that data on the client.
03:46 < Havvy> samholmes: A function that takes a function, returns a function that takes another function.
03:46 < ningu> hehe yeah that's about what I saw
03:47 < samholmes> it doesn't stop with lace.next being the next function in this series, lace itself is a new function that sets lace.outer to an object containing the current lace object.
03:47 < zeromodulus> eh, seems pretty simple, but, do any problems catch your eye with thise code? https://gist.github.com/zeromodulus/5140143
03:48 < samholmes> Havvy: lace is a function that takes a function and returns a function that takes a function that returns a function that...
03:48 < zeromodulus> I can see in the console that data contains {'result': 20}.
03:48 < Havvy> So it is almost a monad?
03:48 < samholmes> Havvy: It doesn't end, ever.
03:48 < vicapow> so do people really use meteor in production?
03:48 < samholmes> Havvy: I think I heard someone call it that once, forget what a monad is again.
03:48 < Havvy> Look up Crockford's monad video.
03:49 < zeromodulus> k, gonna try this uh... client-side console.log trick.
03:49 < Havvy> It's longish, but explaining monads has proven to be 'difficult'. But he does a nice job of doing it easily.
03:49 < samholmes> 54 hours..
03:49 < samholmes> first world problems
03:49 < ningu> zeromodulus: if you're receiving the data ok then the issue must be with your result_text stuff
03:50 < ningu> 54 minutes, not hours.
03:50 < zeromodulus> yeah, I don't see how that's the problem though.
03:50 < zeromodulus> `<input type="text" id="result" />`
03:51 < zeromodulus> tried .toString() too in case it's picky.
03:51 < zeromodulus> data['result'].toString()
03:51 < ningu> zeromodulus: well, I dunno either. what if you do alert(data.result.toString())?\
03:51 < zeromodulus> ah, good idea.
03:52 < ningu> samholmes: anyway, I don't know the answer to your module-state question, but I can see the appeal of a control flow library like lace. although so far, for my needs, caolan's async has been more flexible and I doubt it would be a good fit for the things I'm doing so far.
03:53 < zeromodulus> ah, I think I found my problem.
03:53 < ningu> zeromodulus: that usually happens when you poke at something long enough.
03:53 < zeromodulus> several callbacks with the same name, probably confusing socket.io.
03:54 < zeromodulus> woo!
03:54 < zeromodulus> I'm all finished with me app.
03:55 < zeromodulus> yay.
03:55 < zeromodulus> now I just need to pretty it up.
03:56 < vwoo> hey guys - i built a small joke website in nodejs. maybe you'll like it? http://krugmantimes.com/
03:56 < zeromodulus> actually, eh, too lazy.
03:58 < ningu> vwoo: my gf has a crush on pk, will have to show her.
03:58 < vwoo> ningu: awesome
03:59 < ningu> how did you put the site together?
03:59 < vwoo> nodejs, using redis to cache, alchemy for keyword extraction
04:00 < vwoo> if you look at the about section there's some info
04:00 < ningu> redis to cache what, images and links?
04:00 < ningu> ah ok
04:00 < vwoo> caching the transformed page and endpoints for text extraction
04:02 < ningu> vwoo: how did you get the list of krugman's articles with their titles?
04:02 < zeromodulus> Okay... this socket.io thing seems kinda touchy. O.o
04:02 < zeromodulus> Works once then doesn't work again. :p
04:03 < ningu> zeromodulus: could be a transport issue
04:03 < vwoo> ningu: those aren't real krigman articles, those are ordinary ones transposed to look like such
04:03 < ningu> ahhh I see
04:04 < Zavior> Can anyone lend a hand on what this error is? I'm on OSX (http://hastebin.com/fogeciqoji.hs)
04:04 < vwoo> what are you trying to npm install?
04:05 < Zavior> anvil.js
04:05 < vwoo> post your package.json too
04:05 < Zavior> I read somewhere that nom install -d shouldn't error out
04:05 < Zavior> Well that may be the problem, I don't see a /usr/local/package.json
04:05 < vwoo> im not even sure -d is a real flag
04:06 < Zavior> I installed node via homebrew
04:07 < vwoo> if you want to try installing anvil, why not npm install anvil?
04:07 < vwoo> http://dev.man-online.org/man1/npm-install/
04:07 < Zavior> I did try, using nom install -g anvil.js
04:08 < vwoo> and how did that go
04:09 < Zavior> http://hastebin.com/lipoqificu.hs
04:09 < Zavior> issue with the package.json I guess
04:09 < ningu> try npm cache clear
04:09 < vwoo> works for me but i am on node 0.9x and npm 1.1x
04:10 < ningu> v0.10 just came out so it could be an issue with that too somehow
04:13 < Zavior> yeah same error after clearing the nom cache
04:13 < Zavior> maybe I need to go back to 0.9
04:13 < noway_> Hi guys, i wrote arkanoid on node.js and coffeescript, checkout: https://gist.github.com/anonymous/5140250
04:13 < ningu> Zavior: yeah, I dunno, too bad one of the core folks like isaacs isn't around... you could check during working hours
04:14 < Zavior> sounds good, thanks for the help ningu & vwoo 
04:14 < noway_> Sorry for poor code. use $ coffeescript arkanoid.coffee to run
04:15 < ningu> noway_: I can't find the any key!
04:16 < ningu> pretty cool
04:16 < noway_> ningu: lol. thanks :)
04:16 < ningu> now you need sound effects
04:17 < noway_> Hm, i was thinking about \a (bell control char), but it dont work in my console, for some reason
04:18 < noway_> https://en.wikipedia.org/wiki/Bell_character
04:18 < mscdex> slajax: i wrote a multipart parser recently that does streaming parts
04:18 < mscdex> and it's faster than anything out there!
04:30 < noway_> Someone, try to execute "node -e 'process.stdout.write(String.fromCharCode(7))'" It make any sound?
04:30 < danheberden> noway_: OMG WHERE DID /usr go?!
04:30 < danheberden> WHAT DID YOU DO
04:31 < ningu> noway_: yes
04:31 < noway_> Lol
04:31 < g0z> it's asking for my credit card number
04:31 < danheberden> no sound for me
04:31 < g0z> is that normal?
04:31 < noway_> Hm, no sound on my computer.
04:31 < danheberden> iTerm 2, osx, etc etc
04:31 < deoxxa> g0z: it already knew my credit card number! now it's asking for money or it'll tell other people!
04:31 < noway_> ningu, what your OS?
04:32 < ningu> OS X
04:32 < ningu> regular terminal
04:32 < danheberden> ah, noway_ iTerm has "silence bell" on by defualt
04:32 < danheberden> *default
04:32 < cainus> anyone have a suggestion for logging stdout and stderr somewhere?
04:32 < cainus> tee?
04:32 < danheberden> cainus: define: "logging"
04:33 < noway_> Oh, okay
04:33 < deoxxa> cainus: i use https://github.com/deoxxa/jesus for that
04:33 < cainus> I could've said piping I guess
04:33 < danheberden> deoxxa: christ, that looks great
04:33 < deoxxa> danheberden: ;)
04:33 < deoxxa> jesus saves
04:33 < cainus> I have app logging already, but I'm missing the stdout and stderr
04:33 < deoxxa> (your butt)
04:33 < deoxxa> (when your process dies)
04:33 < danheberden> deoxxa: hahaha
04:34 < deoxxa> https://github.com/deoxxa/jesus/blob/master/lib/jesus.js#L57
04:34 < cainus> deoxxa: probably going to use upstart/monit for that, so that it can survive reboots
04:35 < ningu> install your own personal jesus
04:35 < deoxxa> cainus: yeah, that's next on the list for jesus - persistence so that even if it dies it can still help you
04:35 < ningu> shouldn't jesus harrow hell or something first?
04:35 < cainus> how's it going to survive server reboots though?
04:35 < Nuck> $ npm install personal-jesus
04:35 < noway_> BSD licenced jesus!
04:36 < deoxxa> cainus: it's not for everyone. i wrote it so i had something i could hook into for live information about processes going up/down for our monitoring stuff
04:36 < deoxxa> it'd be started in cron or whatever
04:36 < deoxxa> @reboot
04:36 < Nuck> I prefer the MIT Licensed Jesus.
04:36 < ningu> the church is splintering already
04:36 < deoxxa> plz nuck, there's only one jesus
04:36 < deoxxa> to claim more is blasphemy on the level of omitting semicolons
04:36 < cainus> yeah...once you have upstart capable of starting it, you're halfway to having a supervisor already
04:36 < Nuck> deoxxa: What about my hispanic friend Jesus?
04:37 < Nuck> I omit semicolons too :D Been doing it since I started Rubying too
04:37 < ningu> deoxxa: how is jesus better than forever?
04:37 < Havvy> Nuck: There is ONLY one. ;)
04:37 < zeromodulus> yay, now I have the pleasure of figuring out why this thing works only once and then craps out.
04:37 < Nuck> Havvy: Tell that to all the Jesuses in Mexico.
04:37 < noway_> Haha, no semicolons in coffeescript
04:37 < deoxxa> ningu: way, way, way less resource usage
04:37 < Nuck> Fuck CoffeeScript
04:37 < ningu> deoxxa: how much resource usage is there with forever?
04:37 < noway_> Yay CoffeeScript!
04:37 < ningu> toffeescript is much tastier
04:37 < Nuck> I just wanna drop semicolons.  I'm trying to figure out a way to drop 'em in CSS too
04:38 < ningu> deoxxa: I haven't noticed anything very substantial.
04:38 < zeromodulus> is it like, bad to have in memory storage for socket.io data communications?
04:38 < deoxxa> ningu: n + 1 node processes for n monitored processes
04:38 < deoxxa> ningu: once you have ~50 monitored processes, `forever list' starts to take a *long* time
04:38 < ningu> ahh
04:38 < ningu> well, I have three or something :)
04:38 < zeromodulus> I basically defined an Object for storing the data passing back and forth between client and server.
04:38 < ningu> but will keep in mind
04:38 < deoxxa> yep!
04:38 < noway_> you can use a { color:blue }
04:38 < cainus> deoxxa: so how are you capturing stdout and stderr then?
04:38 < deoxxa> it's great for that kind of thing
04:38 < noway_> in css
04:39 < deoxxa> cainus: well it uses child_process to spawn the monitored process, then just gobbles up the stdout/stderr from there
04:39 < zeromodulus> I'm seeing all kinds of inconsistent behavior in my app, but, it works once... so I know the base code is solid, but the socket.io stuff, not so much.
04:39 < cainus> deoxxa: ahh okay...easy enough
04:40 < deoxxa> so many opportunities for lol commands in that module
04:40 < cainus> deoxxa: I was thinking I might just 'tee', but maybe that's excessively lo-fi
04:40 < deoxxa> ha
04:40 < noway_> hm, nice solution
04:40 < zeromodulus> My app works locally, but only once. It doesn't work at all on Heroku. Poop.
04:41 < deoxxa> zeromodulus: 1) show code 2) ??? 3) profit
04:41 < deoxxa> i doubt anybody's going to try to crystal-ball your problems for you
04:41 < zeromodulus> Loooook into my creestal baaalll....
04:41  * zeromodulus rubs deoxxa's skull.
04:41 < danheberden> whoa
04:42 < deoxxa> no, i need that
04:42 < deoxxa> for my brains
04:42 < danheberden> i didn't know it was that kind of chan
04:43 < faceleg> 4chan
04:44 < zeromodulus> weird... no longer getting any socket.io info on the console.
04:45 < zeromodulus> Guess I'll have to make my own.
04:46 < zeromodulus> ._.
04:46 < zeromodulus> Oh, derp.
04:48 < zeromodulus> I think the <form> element may be working against me.
04:48 < zeromodulus> isn't it like, taboo to use html attributes like onSubmit?
04:58 -!- mode/#Node.js [+o ryah] by ChanServ
05:03 < noway_> Anybody know when node 1.0 come out?
05:04 < tjfontaine> when it's ready
05:05 < AAA_awright> How about "Now"
05:06 < danheberden> noway_: just move the decimal on the current 0.10.0 release
05:06 < AAA_awright> It IS ready, it IS used in production
05:06 < danheberden> BOOM DONE
05:06 < Lorentz> silly people always thinking it has to be 1.0 before it's "stable" like the number means something
05:06 < AAA_awright> noway_: The whole "We're not releasing 1.0" is just developer drama relating to not wanting to be polite
05:07 < danheberden> look what you did noway_ ^
05:07 < AAA_awright> Lorentz: Well the version number does mean something, it means you broke your API, hence why Node.js should have released 1.0 a LONG time ago
05:07 < danheberden> I HOPE YOU'RE HAPPY
05:07 < noway_> Yep, it can be used in production and people use it. But i just curious.
05:09 < Havvy> So...I just wrote a module that is a function that returns the number of times it has been called.
05:10 < Havvy> Anyways, it's not 1.0 for the same reason the library I'm working on isn't 1.0. It's not feature complete.
05:11 < noway_> Is there anyway to cheat it?
05:13 < execut3> <AAA_awright> Lorentz: Well the version number does mean something, it means you broke your API, hence why Node.js should have released 1.0 a LONG time ago
05:13 < execut3> the API is not expected to be stable before 1.0
05:13 < execut3> see semver.org
05:14 < execut3> Major version zero (0.y.z) is for initial development. Anything may change at any time. The public API should not be considered stable.
05:14 < AAA_awright> Havvy: Feature complete has absolutely nothing to do with 1.0, feature complete is what the minor version number is for
05:14 < AAA_awright> You implement a new feature, release 1.1
05:16 < AAA_awright> execut3: What's your point?
05:17 < execut3> I don't see why breaking your API means you should've already released 1.0, it doesn't make sense
05:18 < execut3> until the API is stable, it should still be 0.x.x
05:18 < AAA_awright> execut3: If other people are using your API then that completely defeats the point of version numbers
05:18 < AAA_awright> 0.x isn't an excuse to do whatever you want, it's to support rapid development prior to public release
05:19 < AAA_awright> 1.0.0 doesn't ask much, it just asks that you notify people when you break your public API
05:20 < execut3> 1.0.0 is a sign of "everything is finalized and working as expected, no big major changes until 2.0"
05:20 < execut3> node isn't quite there yet
05:21 < AAA_awright> Um, well there really can't be big major changes because everyone's using it
05:21 < execut3> (not to say that I think its not stable or ready for production use - I do use node on production myself, and really enjoy doing so)
05:21 < AAA_awright> It's not like it's expensive to just say "This is 2.0.0"
05:21 < AAA_awright> The expense is in breaking your API and that happens no matter if your release is 0.x or 2.x
05:21 < Lorentz> do what linux kernel does
05:22 < AAA_awright> I don't recall Linux breaking anything recently
05:22 < AAA_awright> Not "public facing" anyways, internal stuff changes overnight
05:23 < execut3> Linus is quite serious about not breaking things
05:23 < echo> For sure.
05:23 < austinc> anyone here with Knox experience whose brain I could pick?
05:23 < Lorentz> never breaks, but goes from 2.6 to 3.0 overnight
05:24 < execut3> https://patchwork.kernel.org/patch/1907141/
05:24 < execut3> see "Mauro, SHUT THE FUCK UP!" for the good part :)
05:25 < AAA_awright> Lorentz: That represented a change in the version numbering scheme, which is of course reverse-incompatible
05:25 < execut3> yeah, Linus is quite serious about not breaking stuff
05:25 < execut3> "If a change results in user programs breaking, it's a bug in the kernel. We never EVER blame the user programs. How hard can this be to understand?"
05:25 < AAA_awright> Understandable, it's a kernel
05:27 < zeromodulus> Is there a way to make socket.io more... callbacky? Like, the xhr-polling keeps closing due to exceeded duration, yet, I have a function that takes a long time to finish, so, I don't think the client should wait around if that's what it means is going on.
05:28 < zeromodulus> Can I like, tell the client to buzz off and just wait until we call 'em?
05:30 < ningu> zeromodulus: that's what xhr-polling *does*
05:31 < zeromodulus> oh, okay.
05:31 < ningu> if there is no client connection open, there's no way to immediately tell the client what happened.
05:31 < ningu> unless you have websockets.
05:31 < zeromodulus> so, why do my logs keep telling me the thing is poopin' out 'cause of a timeout?
05:31 < ningu> because it's doing what it's supposed to do
05:31 < ningu> read the docs
05:31 < ningu> websockets are the solution to this problem but not all browsers support them
05:31 < zeromodulus> ._.
05:32 < ningu> it's basically a clever hack
05:32 < zeromodulus> ehhh... k...
05:33 < ningu> zeromodulus: think about it. given how http works, how can the server send a message to the client at the moment it wants to?
05:33 < ningu> it can't. the client has to request something.
05:33 < zeromodulus> oh, uhhh...
05:33 < ningu> so if the client is always sitting there waiting for something with an open request, the server can step in.
05:33 < zeromodulus> I thought I was doing that with a clever trick.
05:33 < zeromodulus> kinda.
05:33 < zeromodulus> maybe.
05:34 < zeromodulus> oh okay, I get it now.
05:34 < zeromodulus> the client is like, derpin' out.
05:34 < zeromodulus> not getting my server responses right away, right?
05:34 < ningu> I have no idea what you're talking about
05:35 < ningu> the client does long requests, say for 60-120 seconds. if no message is received during that period the request will timeout. that's by design.
05:35 < noway_> how to upgade node to 0.10? i forgot how i install it
05:35 < zeromodulus> the client is like, that kid in the ballfield, not paying attention, and the ball just rolls on by.
05:35 < ningu> zeromodulus: umm, maybe, I don't know what's going on in your code.
05:35 < ningu> I'm just explaining the design to you and why seeing timeouts is not an indication of a bug
05:36 < zeromodulus> definitely not being used as a simple websocket.
05:36 < zeromodulus> expecting the client to pick up the phone when the server rings.
05:36 < ningu> well, xhr-polling allows that behavior
05:36 < ningu> it's functionally equivalent more or less
05:36 < noway_> send ping to client once in a while
05:36 < zeromodulus> I'm reading the section, "Using it just as a cross-browser WebSocket"
05:36 < zeromodulus> Is that what I should be reading?
05:37 < noway_> yeap
05:37 < noway_> why you not use it from start?
05:38 < zeromodulus> eh, I dunno.
05:38 < zeromodulus> I just followed whatever example made sense.
05:38 < zeromodulus> and partially worked.
05:39 < kevireilly> zeromodulus: picture it like this.. the client makes a request to the server, and the server does not respond until it actually has something to respond. This being the case, it replicates live behavior because the client is always waiting for a response. HTTP requests need to eventually time out, so the client eventually cancels its request and starts the cycle over again
05:39 < zeromodulus> eh... isn't like, send and emit kind of the same thing?
05:40 < zeromodulus> or is that the difference, where socket.send is like, "eh, here ya go *fling*" and doesn't wait around.
05:40 < noway_> hm, anybody tell me how to update node? it's does not look like i install it from reps
05:40 < kevireilly> Client: hey server, have something for me? ..... Client: hey server, have something for me? .... Server: now I do! here you go
05:40 < zeromodulus> that's send? or what.
05:40 < zeromodulus> or emit?
05:41 < zeromodulus> like, that makes sense... in a very abstract world where things just make sense.
05:42 < zeromodulus> like, I thought the whole /socket.io/socket.io.js dependency took care of all of that.
05:42 < kevireilly> In long-polling, the server does not respond to the clients request unless it actually has something to respond. This replicates live behavior because the client is always perpetually waiting for a response. If it doesn't get one in 30 seconds i think the timeout is, it starts the cycle over again just to prevent a normal HTTP request timeout
05:43 < kevireilly> it does, you shouldn't have to configure a specific method by default, it will use whatever the browser is capable of, giving preference to certain styles
05:43 < zeromodulus> O.o
05:44 < kevireilly> websockets, where supported, do not operate in this way
05:44 < kevireilly> but pretty much all browsers support long polling
05:44 < zeromodulus> so, like, this "discarding transport" stuff in my logs furrows my brow slightly.
05:45 < ningu> probably it's trying websockets and giving up if they don't work
05:45 < zeromodulus> but, it was working...
05:45 < ningu> if you're worried about the time it takes to figure that out, you can just change the default transports
05:45 < kevireilly> what browser are you testing with?
05:45 < zeromodulus> Safari.
05:45 < ningu> zeromodulus: yes, socket.io can almost always find some transport that works
05:46 < ningu> but maybe not the first in its list
05:46 < zeromodulus> So, there's no difference between send and emit?
05:46 < ningu> huh? what does that have to do with anything?
05:46 < zeromodulus> Oh, it just uses what it prefers, and then one is a backup, is what you're saying, right?
05:46 < ningu> yes
05:46 < zeromodulus> Oh, okay.
05:47 < zeromodulus> So, the client will always be polling for responses, right?
05:47 < ningu> yeah
05:47 < ningu> I don't think there is a send method, just emit
05:47 < zeromodulus> well, I am seeing a send method in the socket.io documentation.
05:49 < ningu> oh. apparently send(foo) is equivalent to emit('message', foo)
05:50 < zeromodulus> uh, so, right when the page loads, is it polling to a point where it times out?
05:50 < zeromodulus> but it just retries, so it's cool?
05:50 < ningu> yes
05:50 < zeromodulus> so, upping the value to like, 100 is probably the opposite of what I want?
05:51 < ningu> you shouldn't need to change the defaults
05:53 < zeromodulus> oh, there's like, a different paradigm for using WebSocket semantics.
05:54 < zeromodulus> in order to receive .send() stuff you have to listen on the 'message' event.
05:55 < zeromodulus> which seemingly throws a monkey wrench directly into my proverbial spokes.
05:55 < kevireilly> zeromodulus: it is the same for all emitted events, send just happens to be specifically the 'message' event
05:55 < zeromodulus> okay.
05:55 < zeromodulus> O.o
05:56 < zeromodulus> well... if you guys want to see all the code...
05:56 < noway_> want
05:57 < kevireilly> client: socket.on('unicorns', function(data){}); server: socket.emit('unicorns', { sparkly: true });
05:57 < zeromodulus> n.n
05:57 < zeromodulus> yay!
05:57 < kevireilly> d-_-b
05:58  * zeromodulus likes sparkly unicorns.
05:59 < noway_> mmm, unicorns...
05:59 -!- mode/#Node.js [+o TooTallNate] by ChanServ
06:00 < zeromodulus> okay, here's all mah code, https://bitbucket.org/zeromodulus/ballclock/src
06:01 < noway_> viewing
06:02 < zeromodulus> the stuff in lib/ballclock.js runs *flawlessly* without the socket.io and express layers of the onion.
06:02 < zeromodulus> tossing it into a node REPL works just as I expect it to.
06:03 < ningu> hrm
06:03 < ningu> shouldn't you just do var socket = io.connect(); ?
06:04 < zeromodulus> eh, maybe, I dunno.
06:04 <@Nexxy> y so socket.io
06:04 < zeromodulus> that's not what the docs say.
06:05 < ningu> that just makes it connect to the same server the web page is on, on the same port. easiest to do that wy.
06:05 < zeromodulus> is there like, an API documentation thing?
06:05 < zeromodulus> rather than just a wiki and a guide?
06:05 < zeromodulus> crimeny.
06:06 < noway_> also you can use location.host
06:06 < Shadoobie> i am a noobie to node.js and also would like an API thing
06:06 < zeromodulus> oh, on the github readme. -_-
06:06 < noway_> on your web page to connect to server via socket.io
06:07 < zeromodulus> noway_: is that method preferred?
06:07 < noway__> io.connect() is better
06:07 < ningu> zeromodulus: what is supposed to happen when I enter a value and click submit?
06:08 < zeromodulus> no mention of it in the readme. -.-
06:08 < zeromodulus> ningu: https://bitbucket.org/zeromodulus/ballclock/src/25d4efd23dc8/lib/ballclock.js?at=master#cl-43
06:09 < zeromodulus> okay, seeing how just io.connect() goes.
06:09 < ningu> zeromodulus: 
06:09 < noway__> maybe there are default argument value in connect function?
06:09 < ningu>       <form onSubmit="ballclock_run();return false;">
06:09  * zeromodulus facepalms.
06:10 < noway__> ningu: why?
06:10 < ningu> noway__: because he doesn't want to be submitting a form and loading a new page
06:10 < noway__> nice practice, i think
06:10 < zeromodulus> thank you ningu
06:10 < ningu> noway__: he shouldn't be doing onsubmit at all
06:10 < noway__> he want to load new page?
06:11 < ningu> better to use jquery bindings or whatever
06:11 < ningu> since this isn't really a form submission
06:11 < zeromodulus> hooray!
06:11 < noway__> oh, if he want to send this form to server...
06:11 < ningu> zeromodulus: socket.io is generally for single page apps
06:11 < ningu> or, at least -- for the page that's currently loaded
06:11 < ningu> if you load a new page everything gets reset
06:11 < ningu> since you are opening a new socket
06:12 < ningu> and the new socket won't know what happened with the old one, unless you somehow use sessions
06:12 < ningu> plus it might have missed the message being transmitted in the meantime while loading the page
06:12 < noway__> window.onunload?
06:12 < ningu> noway__: he doesn't need to send a form to a server. so why try to find a way to do that, when it isn't accomplishing anything?
06:12 < ningu> to the server*
06:13 < zeromodulus> huh... kind of get what you're saying, but only kind of.
06:13 < ningu> zeromodulus: sockets only exist while the current page is loaded.
06:13 < noway__> so thats why he use onsubmit="return false"
06:13 < zeromodulus> ah, k.
06:13 < zeromodulus> makes sense.
06:13 < ningu> every time you load a new page, it re-opens the socket.
06:13 < zeromodulus> ah, ok.
06:14 < ningu> well, I mean, it re-opens the socket for every pabe, if you tell it to. which you currently do.
06:14 < ningu> page*
06:14 < noway__> Hm, yep, this right
06:14 < ningu> when you open a page all js for that page is run, and your js tells it to open a socket for every page.
06:14 < noway__> I dont know what you want >_>
06:14 < noway__> *he
06:15 < noway__> yay, i install 0.10
06:16 < ningu> zeromodulus: so anyway, if you do socket.on('foo') and then the page is reloaded, that callback is never called because the socket is gone :)
06:21 < zeromodulus> hahaha, dang.
06:21 < zeromodulus> well, I'm glad that's over.
06:21 < zeromodulus> I am now completely finished with my wee little app.
06:25 < abrener> hi, can any1 pls assist me on "streams2" ... 
06:26 < ningu> abrener: read the docs?
06:26 < abrener> when using http.request, am listen to response.on('readable', ...)
06:26 < abrener> can readable event fire more than once, ala on
06:27 < abrener> on('data') ?
06:27 < abrener> @ningu have read the docs
06:27 < ningu> I don't think it can fire more than once. but I haven't used it yet, myself.
06:28 < abrener> I was under the impression on('readable') fires once, and I dont need to listen for on('end')
06:28 < abrener> is that your interpretation?
06:28 < ningu> I don't see how that follows
06:29 < abrener> perhaps I misread the 'end' event ...
06:29 < abrener> "Emitted when the stream has received an EOF (FIN in TCP terminology). Indicates that no more 'data' events will happen. If the stream is also writable, it may be possible to continue writing."
06:29 < abrener> no more 'data' events
06:29 < ningu> "If there is no data to consume, or if there are fewer bytes in the internal buffer than the size argument, then null is returned, and a future 'readable' event will be emitted when more is available."
06:30 < ningu> you still need to listen for end.
06:31 < abrener> in my case, stream.on('readable') fires twice, hence stream.read() returns data (each time)
06:31 < ningu> anyway, yes, it does look like readable is the replacement for data.
06:31 < abrener> 2nd time is continuation of the first
06:31 < ningu> and then on('end') should tell you there is no more data.
06:32 < abrener> ok, so should just replace on('data') event with on('readable'), like a chunk
06:32 < ningu> I think so, ye.
06:32 < ningu> yes*
06:32 < abrener> ... and still listen for on('end'
06:32 < abrener> )
06:32 < abrener> I'll let u know what happens :)
06:32 < ningu> I still am using 0.8
06:32 < abrener> ningu: thanks
06:32 < ningu> I just read the docs for stream2
06:32 < abrener> v0.10.0 seems very stable
06:35 < abrener> ningu: it worked. so 'readable' just replacing 'data'
06:38 < ningu> cool
06:47 < ningu> huh. douglas crockford in the monad talk says, javascript is on track to becoming the fastest programming language in the world.
06:48 < ashnur> he can say anything he wants. you know that :)
06:48 < ningu> ashnur: well, what's in it for him to say that?
06:49 < ashnur> ningu: he likes to say things like that
06:50 < ashnur> validates him, also
06:52 < ningu> he still might be right
06:52 < ningu> I was somewhat shocked when I first tried node and saw how fast it was
06:53 < tdignan> "fastest programming language" -- if only programming language speed was a scalar quantity could the statement have meaning.
06:54 < ashnur> :D
06:54 < ningu> he said it off the cuff. it sounded like he could have said it in a more precise way. but specifically he was talking about the ability to do distributed processing automatically
06:59 < ashnur> there is certainly a lot of potential in js
06:59 < ashnur> but that still sounds as marketing to me
07:07 < nesusvet> Hello everyone. There is a strange thing i have got. I created a node function which send post requests to the target node js server, it works well first 5 times, then server doesn't respond immediately.
07:08 < nesusvet> it works slowly.
07:08 < nesusvet> very slowly 
07:12 < zeromodulus> time for me to catch some Zs, thanks for all the help.
07:17 < samholmes> A monad?!
07:18 < ashnur> samholmes: ?
07:19 < samholmes> douglas makes it very muddy what is a monad and what isn't.
07:19 < samholmes> I mean, it's just this pattern
07:19 < samholmes> promises are monads?
07:19 < samholmes> idk
07:19 < ashnur> he says that mondads are object which follow the 3 axioms
07:20 < korilo> up with haskell
07:20 < ashnur> dunno why you say that is muddy
07:21 < samholmes> He didn't really explain the axioms
07:21 < samholmes> he just showed them
07:21 < samholmes> I'm dumb and I need baby talk
07:21 < ashnur> me too, but it's still not muddy
07:22 < samholmes> I guess it's cause it's new to me
07:22 < samholmes> also, I have no idea what quadruple equals means
07:22 < samholmes> ====
07:23 < ashnur> i watched that part 4 or 5 times, and I don't remember those axioms
07:23 < ashnur> doesn't mean anything
07:25 < samholmes> ashnur: could you describe a monad?
07:25 < samholmes> or is it too difficult?
07:26 < ashnur> it's not difficult, but I have not learned it
07:27 < samholmes> Well, it's not a burrito...
07:27 < ashnur> :D :D
07:27 < samholmes> that's about the extent of what I took from the video. :P
07:27 < ashnur> learn haskell and you will learn monads then :D
07:28 < samholmes> but javascript rocks, and haskell is hassle
07:28 < ashnur> to me, it's something along the line that it is an object where all the methods on the object return the same object
07:28 < ashnur> haskell is very cool. i've seen a very good video about it recently
07:29 < abraxas> what the heck happened to hook.io?
07:29 < korilo> where
07:30 < korilo> where are you learning haskell from samholmes ?
07:36 < shmoon> i want to merge 2 objects, how?
07:39 < korilo> http://pastebin.com/2qrbadB6
07:39 < korilo> look shmoon 
07:40 < korilo> that's merge, you can play with that function to build union, restric etc etc :)
07:41 < samholmes> korilo: I'm not. :P
07:42 < korilo> whatever you asked for mergeand that'sit :)
07:42 < shmoon> ok so basically it has to be done manually no builtin method
07:43 < korilo> mmm that's how i learnt to do with js the definitive guide :D
07:43 < korilo> so i supposethere 's not
07:43 < shmoon> oksir
07:44 < korilo> oh and that'sfunction won't copy getter and setter of course
07:47 < shmoon> who uses getters and setters
07:47 < korilo> don't know...me?
07:49 < shmoon> still trying to understand how they;'re sueful, any tuts?
07:49 < shmoon> useful
07:49 < korilo> there are plenty of reads about this just google
07:50 < tdignan> shmoon: say you assigned a variable in 100 places, but then later you decided that you wanted to make sure that there was never a trailing newline in it.
07:51 < tdignan> you'd be grateful for that setter.
07:51 < korilo> eheh
07:52 < tdignan> once I worked with a dude who was like "no setters and getters' -- on a java project. (it was his first java project, not surprisingly, but he had 20y exp in everything else)
07:52 < ningu> also, they're good dogs
07:52 < tdignan> :|
07:53 < tdignan> another one... if you have a setter, you can respond to updates
07:53 < tdignan> maybe, this object is present in a few other places. so, when setFoo() is called, it can call any registered observers and tell them the data changed.
07:54 < ashnur> there are many good thing you can do with getters and setters. not that you need them too often
07:59 < IMAPmodule> helloooo
08:00 < IMAPmodule> anyone here?
08:00 < ktkaushik> Hey
08:01 < IMAPmodule> slow night ehh?
08:02 <@Nexxy> IMAPmodule, everyone is at 0.10.0 release parties
08:02 < IMAPmodule> lol of course of course 
08:03 < IMAPmodule> i just heard about that today...gotta update
08:03 < `3rdEden> meteen maar ff printen :)
08:05 < IMAPmodule> i know my handle is a bit of a giveaway, but is anybody familiar with any of the node IMAP modules?
08:05 < IMAPmodule> i.e. for accessing gmail
08:16 < deoxxa> today i got some really weird errors with node-mongodb-native that i've never seen before, then as soon as they appeared, they disappeared again
08:17 < deoxxa> they seemed to be related to mongodb wire protocol messages from the server being above 16MB
08:17 < deoxxa> but it was really, really strange
08:17 < deoxxa> i did some debugging, trying to find out how to replicate it
08:17 < deoxxa> then i figured out that a certain combination of (all much less than 16mb) documents would trigger it
08:18 < deoxxa> so i did some experiments in setting the batch size to be smaller, etc
08:18 < deoxxa> then when i reverted to the original code to make sure i could reproduce the error again
08:18 < deoxxa> it was *all gone*
08:18 < deoxxa> everything was perfectly fine
08:18 < deoxxa> so. weird.
08:30 < yawnt> deoxxa: lol
08:30 < yawnt> :>
08:31 < deoxxa> conclusion: computers are jerks
08:32 < AAA_awright> Meanwhile I'm trying to figure out why mongolian is giving me ENOTFOUND
08:32 < AAA_awright> And sometimes ENETUNREACH
08:32 < AAA_awright> Even though `mongo` works just fine
08:32 < douglaslassance> What are the best alternatives to auto-generate documentation from a node package? I am looking in Dox-Foundation... any other suggestions?
08:33 < deoxxa> douglaslassance: i've used docco with some success, after replacing the markdown parser it uses with marked so i can use github-flavoured markdown (```js and stuff)
08:33 < AAA_awright> douglaslassance: Organized source code and good hand documentation
08:33 < douglaslassance> AAA_awright: do you not believe in auto generated? I makes descent API docs though.
08:34 < AAA_awright> There's really not much point to most documentation tools, unless they can do something fancy like produce an IDL (WebIDL perhaps) description and accompanying description
08:34 < douglaslassance> deoxxa: my impression with docca was that the markup was less precise then the one from JSDoc. Am I wrong?
08:35 < deoxxa> douglaslassance: oh sorry, i'm not talking about generating it from the code itself - docco just splits apart your comments and the code and displays them side by side. that way you just document stuff in comments.
08:35 < deoxxa> douglaslassance: it's still not a replacement for hand-written docs though, as AAA_awright mentioned
08:35 < douglaslassance> AAA_awright: Many times  I endup watching at the code itself, true...
08:36 < faceleg|home> docs are only as good as the code they're written for
08:36 < deoxxa> douglaslassance: ideally you'd have both - documentation of the external interfaces (hand-written) and documentation of the implementation (computer-assisted, not auto-generated)
08:37 < douglaslassance> I feel the JSDoc convention can generate a descent amount of info. Description, Argument explenation, Returns... But I might be naive
08:37 < faceleg> jsdoc is good but I feel that dev has stalled
08:37 < deoxxa> douglaslassance: that only tells half the story. you really need to be able to write docs like a narrative, at least for the "how to use this thing" guide
08:37 < faceleg> a lot of missing features that irriated me when making docs for a largish project
08:37 < faceleg> deoxxa: those would be tutorials right
08:38 < douglaslassance> Well I'll play with what's out there... and see... I felt that a description of my class methods and the arguments they take would be enough for me
08:38 < [AD]Turbo> hi there
08:39 < deoxxa> douglaslassance: they'll be enough for you, but not for someone coming at the code with 0 knowledge of how it's structured
08:39 < faceleg> douglaslassance: deoxxa yes but that's enough whie the project is pre 1.0
08:39 < faceleg> else docs become stale which is worse than useless
08:39 < deoxxa> that's a good point
08:39 < deoxxa> it's definitely better than nothing anyway
08:40 < faceleg> pre 1.0 IMHO docs are for the main devs
08:40 < faceleg> to aid in quickly grokking the point of a given block
08:40 < douglaslassance> I feel the most useless is when it's incomplete
08:40 < douglaslassance> :D
08:40 < ningu> I prefer ducks
08:41 < faceleg> my documentation is made of lions
08:41 < ningu> I have duckumentation
08:41 < deoxxa> more things should be made of lions
08:42 < faceleg> every lion of my code is *****
08:43 < lethalduck> ducks are much better
08:44 < Shadoobie> not sure if this question is for here or javascript ch. but asking - if i wanted to pass an array from my app.js to my index.js, what is a good way to do that?
08:44 < Shadoobie> in a node express stack
08:44 < ningu> Shadoobie: in index.js, module.exports = function(...), then require('index')(array)
08:45 < Shadoobie> ningu: thank you
08:45 < faceleg> only problem with my docs is that they're lazy. I always catch them lion around doing nothing.
08:45  * faceleg high five
08:46 < ashnur> lion:
08:46 < ashnur> ?
08:46 < deoxxa> faceleg: aw man, i'm sorry
08:46 < deoxxa> faceleg: i didn't know you were puntarded
08:47 < deoxxa> faceleg: we have a support group
08:47  * faceleg slow claps
08:47 < faceleg> is there a place I can see the nodejs error types
08:47 < faceleg> or is there just Error?
08:47 < deoxxa> faceleg: tbqh i think us southern hemisphere types have the best pun abilities
08:47 < faceleg> deoxxa: is that support group where you cry on each other's shoulders after realizing you can never be as funny as i?
08:47 < deoxxa> probably comes from all the cockney rhyming slang
08:48 < deoxxa> haha
08:48 < faceleg> deoxxa: yes and we're far and away the least courteous
08:48 < deoxxa> very true!
08:48 < faceleg> I was on a trip once with 120+ people from 50 countries
08:48 < faceleg> you could *tell immediately* the nz/aus
08:48 < faceleg> absolutely crass
08:49 < deoxxa> ha
08:49 < deoxxa> that's so true
08:49 < ningu> the apple doesn't fall far from the tree?
08:49 < faceleg>  you are the apple
08:49 < faceleg> meditate on this.
08:49 < deoxxa> we're a vital component of IRC
08:49 < faceleg> so anyway, a list of Errors?
08:50 < faceleg> I am the blood pumping through the airwaves
08:50 < deoxxa> faceleg: you could grep for util.inherits([a-zA-Z_]+, Error) or something in the source tree
08:50 < ningu> how do you know *you* aren't an Error?
08:50 < faceleg> or do we just throw new Error all the time
08:50 < faceleg> deoxxa: speaking of documentation, lol
08:50 < deoxxa> yeah haha
08:50 < ningu> hmmm
08:51 < faceleg> how does github code search actually work?
08:51 < faceleg> i.e. how tf do I search a repo's codebase
08:51 < faceleg> I thought they made that a thing
08:51 < ningu> yes, it works
08:51 < ningu> that's how I searched v8 the other day
08:51 < faceleg> is there a special command? I mean to limit search to a given repo
08:51 < ningu> oh, wait
08:51 < ningu> that was google code
08:52 < ningu> yeah, maybe you can't do it on github
08:52 < faceleg> dammit
08:53 < ningu> https://github.com/search/advanced
08:53 < aMoniker> it's easy to search a repo
08:53 < aMoniker> clone it, then ack
08:53 < ningu> ack?
08:53 < aMoniker> http://betterthangrep.com/
08:53 < ningu> hmm
08:53 < ningu> cool
08:54 < faceleg> lol nice domain
08:54 < ningu> as opposed to dack, which is southern hemisphere slang
08:54 < faceleg> for what?
08:56 < ningu> maybe it's just aussie
08:56 < ningu> deoxxa can confirm I guess, I'm american
08:56 < faceleg> is there an dak is slang for weed
08:56  * deoxxa looks up
08:56 < frankg> anybody using restify - wondering why the client script doesn't exit
08:56 < faceleg> s/is\ there//
08:57 < ningu> an aussie friend said you can dack someone
08:57 < deoxxa> oh, yes
08:57 < deoxxa> that's when you "pants" them
08:57 < ningu> yes, that's what americans say
08:57 < faceleg> deck?
08:57  * deoxxa is american <-> australian interpreter
08:57 < faceleg> pants them? srsly?
08:57 < aMoniker> if you pants someone, you have applied pants to them
08:57 < ningu> it's a thing kids do
08:57 < aMoniker> clearly it should be de-pants
08:58 < deoxxa> faceleg: perhaps a different word in nz? when you pull someone's pants down and embarrass them
08:58 < deoxxa> faceleg: i... guess it's pretty messed up
08:58 < ningu> aMoniker: not necessarily. thing about it; you can seed a field (add seeds) or seed a pepper (remove seeds).
08:58 < ningu> that's how english works. 
08:58 < ningu> s/thing/think/
08:58 < deoxxa> faceleg: probably why we use the word "dack" for it
08:58 < aMoniker> ningu: colloquially, yes
08:58 < ningu> aMoniker: colloquially, formally, historically -- in all the ways I can think of.
08:58 < deoxxa> jack, while john had had had had had had had had had a better effect on the teacher
08:59 < deoxxa> ^^ best sentence ever
08:59 < faceleg> deck is when you punch someone and they fall to the floor
08:59 < ningu> I don't know. I'm partial to: buffalo buffalo buffalo buffalo buffalo buffalo.
08:59 < ningu> what about deck the halls?
08:59 < deoxxa> jack, while john had had "had", had had "had had". "had had" had had a better effect on the teacher.
09:00 < deoxxa> oh i typed it wrong the first time
09:00 < deoxxa> derp
09:00 < deoxxa> case in point!
09:00 < ningu> my sentence means: buffalo which buffalo from Buffalo buffalo, (also) buffalo buffalo from Buffalo.
09:00 < ningu> I think I forgot one too.
09:00 < faceleg> 1111race
09:00 < faceleg> 22112
09:00 < faceleg> there is more but I'm not 12 any more so I forget
09:01 < faceleg> Chinese has some ludicrous ones
09:01 < ningu> do you guys like, instead of playing duck duck goose, play wombat wombat wallaby?
09:01 < faceleg> like pickled peppers on crack with steroids
09:01 < faceleg> they play shoot the aborigine
09:01 < faceleg> or at least tehy did until the 80's
09:03 < ningu> whereas you guys just have a whakapaka
09:03 < ningu> or whatever
09:03 < faceleg> you know, that means family
09:03 < deoxxa> faceleg: oh man, chinese has insane versions. what's that "shi" one about the lion?
09:03 < faceleg> so it's a bit different
09:03 < ningu> whakapapa
09:03 < faceleg> whakatane
09:03 < ningu> faceleg: so people actually use that word?
09:03 < faceleg> I don't
09:03 < faceleg> but yes it is common and everyone here knows it
09:03 < faceleg> whangarei
09:03 < faceleg> whangaparoa
09:04 < faceleg> whanganui
09:04 < ningu> we had a maori/nz english problem set and there were a whole bunch of words loaned from maori into english and none of us had ever heard most of them
09:04 < faceleg> I could go on
09:04 < ningu> except for moa and a couple others
09:04 < ningu> and do you pronounce the wh like a regular w?
09:04 < faceleg> wh = f
09:04 < ningu> ok
09:04 < ningu> so more like it would be in maori
09:05 < faceleg> so you can imagine how I love to mispronounce "wharf" 
09:05 < ningu> but afaik kiwis say witch the same as which usually
09:05 < faceleg> changing now
09:05 < faceleg> they renamed "wanganui" to "whanganui" and it is sticking
09:05 < faceleg> the govt actually seems to care about the language, which is fine, languages need love too
09:05 < faceleg> so they put a lot of effort in
09:05 < ningu> which language? english or maori?
09:06 < faceleg> also already marginalised segments of society who also lose their language tend to get worse quickly
09:06 < faceleg> maori
09:06 < shmoon> hey anyone worked with hroku?
09:06 < shmoon> heroku
09:06 < faceleg> we have 3 official languages maori eng and signlanguage
09:06 < ningu> hmm I had no idea sign language was official
09:06 < ningu> is it a specific variety for nz only?
09:06 < shmoon> i have a node app i set it up on heroku it works fine, in the same codebase i have socket.io code that i want to shoot on port 9000 but that doesnt' work everytime it crashes
09:06 < faceleg> a bunch of our signs etc are in maori & eng, I'd say maybe 1% can sort of understand it
09:06 < faceleg> might be
09:07 < ningu> I wonder if there are any other countries with an official language that's a sign language. never heard that mentioned before.
09:07 < faceleg> yes NZSL
09:07 < faceleg> English Language, Māori language, New Zealand Sign Language
09:07 < ningu> " may be technically considered a dialect of British, Australian and New Zealand Sign Language (BANZSL)."
09:07 < shmoon> anyone worked with heroku guys?
09:08 < ningu> that's worse than ANZAC
09:08 < faceleg> shmoon: sorry, I haven't
09:08 < faceleg> lol
09:08 < shmoon> dam
09:08 <@Nexxy> shmoon, what stack are you on?
09:08 < faceleg> deoxxa: mā mā qí mǎ, mǎ màn, mā mā mà mǎ.
09:08 <@Nexxy> OH WAIT it doesn't matter, none of them support websockets
09:08 < ningu> I'm on a full stack of buttermilk pancakes
09:08 < shmoon> cedar Nexxy 
09:08 < deoxxa> faceleg: that's the one. crazy.
09:08 < faceleg> deoxxa: 4 is 4, 10 is 10, 14 is 14, 40 is 40, 44 stone lions are dead.
09:09 < shmoon> its not about websockets
09:09 < shmoon> it says i need to confgirue for long polling i did thaty
09:09 < shmoon> but it wont start on my port
09:09 < ningu> stone lions... I guess they might have some of those
09:09 < ningu> never been to the forbidden city
09:09 < faceleg> deoxxa: http://www.uebersetzung.at/twister/zh.htm#O103375
09:09 < shmoon> Error R11 (Bad bind) -> Process bound to port 8081, should be 41564 (see environment variable PORT)
09:09 < faceleg> ningu: stone lions everywhere. imagine wal mart. with stone lions.
09:09 < Bugz___> Anyone using an email system for node? I'm looking at my options and found nodemailer but was wondering if anyone had any experience with it?
09:09 < faceleg> imagine mcdonalds, with stone lions
09:09 <@Nexxy> shmoon, so maybe you should be binding to process.env.PORT ?
09:09 < faceleg> ningu: imagine X, with stone lions
09:10 < ningu> faceleg: haha really?
09:10 < shmoon> Nexxy: i am binding my main app to that, its 80
09:10 < ningu> fake stone lions or what?
09:10 < shmoon> i set PORT=80
09:10 < aMoniker> Bugz___: I've had success with nodemailer, haven't tried it with heavy loads though
09:10 < faceleg> real stone usually
09:10 < shmoon> heroku config:set PORT=80
09:10 < faceleg> not like it's hard to get
09:10 < Bugz___> thanks aMoniker. I'll give it a go.
09:10 < ningu> yeah but it's mcdonalds, so...
09:10 < samholmes> why does npm link create a symlink under /usr/locals/lib/node_modules/?
09:10 <@Nexxy> shmoon, you can make socket.io listen on the same port as the http server
09:10 < shmoon> i m trying to keep it different please
09:10 < `3rdEden> ._.
09:10 <@Nexxy> you're on your own with that :)
09:11 < shmoon> ?
09:11 < samholmes> why doesn't it link to the project folder?
09:11 < ningu> shmoon: are there restrictions for what port you can listen on heroku or what? might be firewall issues, I dunno.
09:11 < shmoon> it should work
09:11 < Bugz___> technically socket.io acts as an http server as well. to serve the client side javascript file.
09:11 < nesusvet> Hello everyone. There is a strange thing i have got. I created a node function which send post requests to the target node js server, it works well first 5 times, then server doesn't respond immediately. It works slowly.
09:11 < Bugz___> but you can use express and socket.io on the same port. to serve your http files. ;)
09:11 < deoxxa> shmoon: you'll have to consult the heroku documentation to find out why that's not the case. it shouldn't work.
09:11 < ningu> nesusvet: yes, you said that before. but without seeing the code we can't really help.
09:12 < shmoon> deoxxa: cant find anything although whyy shouldnt it work? i made it work on my dev
09:12 < samholmes> `npm link` in /path/to/foo creates a symlink in /usr/locals/lib/node_modules, and then `npm link foo` in /path/to/bar creates a symlink to /usr/locals/lib/node_modules/foo in /path/to/bar/node_modules
09:12 < deoxxa> shmoon: heroku uses a pretty complex http routing system to get requests to your app - it's not a problem with your code.
09:12 < `3rdEden> shmoon: #heroku
09:12 < shmoon> oh
09:12 < deoxxa> shmoon: it's just that "you can't do that on heroku"
09:12 < shmoon> got it
09:12 < samholmes> Why does it do it this way and not just create a symlink in /path/to/bar/node_modules that points to /path/to/foo?
09:12 < ningu> yeah, I don't know anything about heroku but it sounded like a platform issue
09:13 < `3rdEden> also heroku is limited as shit when it comes to building real-time apps
09:13 < ningu> isn't heroku mostly for ruby anyway :)
09:13 < deoxxa> yep
09:13 < deoxxa> `3rdEden: do they support real websockets yet?
09:13 < `3rdEden> if you are a bit serious when it comes to realtime you pick a hosting provider that does support websockets
09:13 < ningu> plug: get a vps on 6sync.com for $15/month
09:13 < `3rdEden> deoxxa: ha, no.
09:13 <@Nexxy> I hear heroku has a very robust routing engine though
09:13 < faceleg> Nexxy: no you didin't
09:13 <@Nexxy> faceleg, pretty sure I did
09:13 < faceleg> robust as in random
09:13 < deoxxa> Nexxy: yes it robustly routes messages around itself for 5-6 seconds before it gets them to your app
09:13 < faceleg> they changed it
09:13 < Bugz___> ningu: from their website, looks like it supports a bunch of different formats.
09:14 < nesusvet> ningu, here is http://pastebin.com/3enaiLBs
09:14 < ningu> Bugz___: it does. but it was started for ruby apps and my sense is it's still most popular with the ruby crowd.
09:14 < faceleg> Nexxy: used to be properly load balanced but apparently they changed it
09:14  * Nexxy troll face
09:14 < `3rdEden> I can't hear you, you message got queued
09:14 < ningu> it has a japanese name. matz is japanese. therefore heroku is for ruby.
09:14 < Bugz___> ningu: probably true.
09:14 < ningu> I think that follows right? :)
09:14 < faceleg> Nexxy: http://rapgenius.com/James-somers-herokus-ugly-secret-lyrics
09:15 < Bugz___> having issues pasting to pastebin from Sublime text. The plugins don't seem to work. bleh
09:15 < ningu> and if you get a 6sync box use the referral code PI0B901OO0 </plug>
09:15 < ningu> they are pretty awesome though in my experience. good performance, just works.
09:15 < `3rdEden> i'm gonna build a irc client on top of heroku so I only have to deal with one message at the time.
09:15 < `3rdEden> ._.
09:15 < deoxxa> `3rdEden: hoooooooooooooo
09:16 < deoxxa> massive burn
09:16 <@Nexxy> I also know the guys at 6sync
09:16 < Bugz___> irc client in web sockets? that'd be pretty awesome. can't seem to find one though.
09:16 <@Nexxy> good stuff
09:16 < shmoon> so i should quit heroku ands try something like my own vps on maybe amaxon?
09:16 <@Nexxy> Bugz___, the funny thing about your response is that you can't do websockets on heroku
09:17 < `3rdEden> ;D
09:17 <@Nexxy> unless you use something like pusher
09:17 < Bugz___> Nexxy: ewww. no websockets?
09:17 <@Nexxy> but then again
09:17 < ningu> nesusvet: I can't really tell what's going on from that. is your issue with the socket.io being slow or what?
09:17 <@Nexxy> they're called websuckets for a reason, AMIRITE?!
09:17 < `3rdEden> FO SHO NEXY
09:17 <@Nexxy> O SNAP
09:17 < Bugz___> I'm surprised more websites aren't using web sockets to be honest. I think it's an amazing break through for the web.
09:17 < `3rdEden> OH!
09:17 <@Nexxy> and then you said that from a mobile network
09:18 < `3rdEden> I know why they don't support websockets
09:18 < ningu> does heroku dislocate your websockets?
09:18 < Bugz___> I remember back in the day, you had to use native desktop clients in order to do anything like that.
09:18 < `3rdEden> You can only have on concurrent connection anyways
09:18 < `3rdEden> one*
09:18 <@Nexxy> lol
09:18 < Bugz___> :P
09:18 <@Nexxy> one... concurrent
09:18 < deoxxa> noncurrent
09:18 <@Nexxy> wat
09:18 < ningu> you can do a lot with one connection. just like node does a lot with one process.
09:19 < shmoon> man
09:19 <@Nexxy> except you shouldn't really be doing anything of merit with a single node process
09:19 < shmoon> pusher hm
09:19 < Bugz___> I think it's a little bit different there ningu lol
09:19 < shmoon> what would you guys do ? use pusher or switch hosting?
09:19 < ningu> Nexxy: angkor wat?
09:19 < Bugz___> shmoon: switch
09:19 < shmoon> ok i'll switch then
09:19 < shmoon> amazon
09:19 < shmoon> thanks
09:19 <@Nexxy> shmoon, unless oyu're into paying way more than you need to
09:19 < Bugz___> mhmm =)
09:19 < ningu> Bugz___: I don't know. socket.io lets you emit events and use listeners. seems pretty flexible to me.
09:19 <@Nexxy> shmoon, nodejitsu
09:19 <@Nexxy> maybe?
09:20 < shmoon> does it have mongo and redis addons like hroku does?
09:20 < lethalduck> http://prgmr.com/xen/
09:20 < Bugz___> ningu: that's true. but it isn't just "one socket"
09:20 < ningu> shmoon: yes
09:20 <@Nexxy> shmoon, yes
09:20 < shmoon> i see
09:20 < shmoon> hm
09:20 < Bugz___> any connection gets routed via different local port, ningu 
09:20 < ningu> Bugz___: well, it's usually one socket per client. I thought that's what you meant.
09:20 < lethalduck> Looked at prgmr?
09:21 < Bugz___> ningu: aha, I see. you're right in that aspect then.
09:21 < ningu> Bugz___: what was the limitation you were talking about, then? websockets let you have one socket per *server*? that seems nuts.
09:22 < ningu> but then, a lot of things seem nuts. some actually are.
09:22 < Bugz___> ningu: no limitation, the way node works as a single process using callbacks is slightly different than how node creates a new socket thread/callback for each connection.
09:22 <@Nexxy> oh, dear
09:22 < ningu> it isn't a thread
09:23 < Bugz___> well, node is a thread. the socket.io just uses that thread for it's callbacks
09:23 < Bugz___> or have I missed something?
09:23 < ningu> Bugz___: I was just wondering what you meant about websockets sucking but maybe I misunderstood
09:24 < shmoon> https://www.nodejitsu.com/paas/pricing
09:24 < Joucke> hi all
09:24 < shmoon> how much traffic can the $11 plan take any idea?
09:24 < shmoon> load*
09:24 < ningu> oh, it wasn't you. it was `3rdEden saying the thing about "one concurrent connection"
09:24 < Bugz___> ningu: oh no.. I think web sockets are awesome! see my earlier comment. I'm surprised more people aren't using them.
09:24 <@Nexxy> SO MUCH TRAFFIC
09:24 < Bugz___> yeah
09:24 < `3rdEden> ningu: WHAT I DO
09:24 < shmoon> they mention nothing
09:24 < Joucke> trying to install titanium studio here, getting "npm command not found"
09:25 < `3rdEden> ningu: oh ye, it's because heroku queues for single threaded apps ;p
09:25 < shmoon> all i know is i am getting 5 drones lol
09:25 < shmoon> to kill people
09:25 < Joucke> i have no idea how to fix this. anyone here who knows?
09:25 < ningu> `3rdEden: oh, it was a heroku thing. not a websocket thing
09:25 < `3rdEden> Yes
09:25 < Bugz___> ningu: for 3rdEden, he needs to understannd how node works to begin with. one concurrent connection using callbacks is plenty.
09:25 <@Nexxy> Joucke, install node
09:25 < `3rdEden> Bugz___: yes, i no thing about node, i'm a nub cake :(
09:25 < `3rdEden> nothing*
09:25 < Joucke> Nexxy I've installed node with the installer from nodejs.org
09:26 < Joucke> on Mac OS
09:26 <@Nexxy> try closing your term and reopening it
09:26 < ningu> what is titanium studio?
09:26 < ningu> I don't see what that has to do with node and npm
09:26 < Bugz___> `3rdEden: lol. that's alright, It's pretty simple once you get rid of the traditional thinking how single threaded languages work.
09:26 < `3rdEden> Bugz___: also, i have no experience with web sockets what so ever, i'm here just here trolling :(
09:26 < Joucke> ningu it seems to use npm in installing updates
09:26 < Bugz___> `3rdEden: I think thats sarcasm? lol
09:26 < `3rdEden> i'll go back in to my cave and start writing some PHP.
09:27 < Joucke> Nexxy, i've done that about 10 times now :/
09:27 <@Nexxy> Joucke, do you get anything from `which node` ?
09:27 < Joucke> i've added read/write access to /usr/local/bin
09:27 < `3rdEden> Bugz___: yes, it was.
09:27 < Bugz___> well. gotta get back to it. see ya
09:27 < Joucke> and which node says /usr/local/bin/node
09:27 <@Nexxy> Bugz___, javascript... is single threaded?
09:27 < ningu> in the crockford talk on monads he mentioned that the stack is unwound after every function ends. so I guess node must be able to maintain a lot of listeners and keep the event loop running with relatively low overhead.
09:28 <@Nexxy> Joucke, and npm is the same?
09:28 < `3rdEden> Nexxy: no of course not, every callback starts it's own thread, you silly
09:28 <@Nexxy> oh, right.
09:28 < shmoon> trying nodejitsu guys
09:28 < deoxxa> i got business cards today :>
09:28 < `3rdEden> that why node has this massive concurrency ;o
09:28 < Joucke> Nexxy which npm returns nothing
09:29 <@Nexxy> Joucke, weird! did you have it installed previously from anything else?
09:29 <@Nexxy> Joucke, as much as a hassle as it might be; I'd recommend trying to install from source
09:29 < `3rdEden> the deeper you nest your callbacks, the more threads you span, the more higher concurrency you get in node
09:29 <@Nexxy> `3rdEden, ohhh, is that why I always see all that leet }) }) }) }) }) spam?
09:30 < `3rdEden> Nexxy: yes!
09:30 < Joucke> Nexxy I don't remember installing it before
09:30 < `3rdEden> now it all makes sense huh
09:30 <@Nexxy> `3rdEden, this. changes. everything.
09:30 < deoxxa> `3rdEden: that's the dumbest thing i've ever heard. you have to maintain a strict 1/5 ratio of http servers to callbacks in node for maximum performance. what are you, new at this?
09:30 < Joucke> and I have no idea how to build from source :$
09:31 < korilo> sudo make && sudo make install Joucke 
09:31 < `3rdEden> deoxxa: I haven't reached that level of webscale yet, so I cannot comment on that
09:31 < korilo> lol
09:31 < Bugz___> I'm confused at how nested callbacks work. say if you have a callback within 3 others, is that one thread or 3 seperate threads created?
09:31 < korilo> 1 thread
09:31 < korilo> always
09:31 < korilo> the callback are pushed onto the stack
09:31 <@Nexxy> unless your wifi reception is shoddy
09:31 < ningu> if it's always 1 thread... is it even a thread?
09:31 <@Nexxy> then it will fork another thread
09:31 <@Nexxy> to handle the packet loss
09:32 < korilo> and called 
09:32 < nesusvet> ningu, there is issue when I start sending post data from the client. The client data send to the server each 1 sec. The server gets this data properly, but only  serveral seconds, then it start lagging and i see the data update very slowly 
09:32 < deoxxa> Nexxy: usually i just spawn "yelling" when that happens
09:32 < Bugz___> korilo: aha. that makes sense nw.
09:32 <@Nexxy> poor libuv
09:32 <@Nexxy> never gets any credit
09:33 < korilo> to have thread you basically have to spawn another v8 process i suppose (that's how i do for cpu intensive stuff)
09:33 < korilo> and wait for the response
09:33 <@Nexxy> korilo, node has a thread pool
09:33 < faceleg> YOU libuv I LOVE 
09:33 < korilo> yes
09:33  * faceleg segmentation fault
09:33 < korilo> it's my way of explaining how node does things Nexxy 
09:34 <@Nexxy> you're spawning v8s?
09:34 < faceleg> it hurts
09:34 < faceleg> but I have to procreate somehoe
09:34 < faceleg> dammit
09:34  * Nexxy facepalm
09:34 < Joucke> afk brb
09:34 < deoxxa> best typo ever
09:34 < korilo> mmm i read somewhere that when i spawn another node process it has his own new v8 vm isn't that right Nexxy ?
09:35 <@Nexxy> yeah it just sounded like you were doing something funky
09:35 <@Nexxy> sorry
09:35 < korilo> nah lol
09:36 < ningu> http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/
09:36 < faceleg> isn't that youtube video the best for explaining nodejs event loop
09:36 < faceleg> that one, with that guy
09:36 < Bugz___> another good one for beginners: http://www.theprojectspot.com/tutorial-post/nodejs-for-beginners-callbacks/4
09:36 < faceleg> and the slides with black keyed out
09:36 <@Nexxy> faceleg, oh yeah! that one guy! with the face?
09:37 < faceleg> Nexxy: yea yea
09:37 < Bugz___> that one guy, with the face, that has a name, that speaks words? woahhh. mind = blown
09:37 < faceleg> Nexxy: and he speaks, quite a bit
09:37 < faceleg> about node
09:37 < deoxxa> wears a shirt, right?
09:37 < faceleg> from memory, yes
09:37 < deoxxa> yeah that guy
09:37 <@Nexxy> faceleg, I totally know that guy
09:37 < deoxxa> classic
09:37 < faceleg> and he's 'mucian
09:37 < Bugz___> wow
09:37 < faceleg> *'murcian
09:37 <@Nexxy> is the shirt always a plaid shirt?
09:38 < faceleg> Nexxy: man I can't remember bro
09:38 <@Nexxy> I'm not your bro.
09:38 < faceleg> Nexxy: I was blazed or whatever the kids do now
09:38 <@Nexxy> faceleg, they're into bath salts these days
09:38  * faceleg would never srsly say this
09:38  * faceleg eats faces
09:38 <@Nexxy> good call
09:39 < ningu> my printer uses epson salts
09:39 <@Nexxy> LOL
09:39 < faceleg> here you guys
09:39 < faceleg> http://www.youtube.com/watch?v=L0pjVcIsU6A
09:39 < deoxxa> i want komplete 9
09:39 < deoxxa> now
09:39 <@Nexxy> lol
09:39 < faceleg> I want to go on a cruise
09:40 <@Nexxy> I don't know this guy ;<
09:40 < faceleg> for a second I was thinking that you would say you *were* him
09:40 < faceleg> and I would swoon
09:40 < nesusvet> ningu, is the link above for me?
09:40 < deoxxa> this better be the angry MS guy
09:40 <@Nexxy> definitely not him
09:41 < faceleg> nesusvet: it's a good video on basic node princibles
09:41 < faceleg> *principles
09:41 < deoxxa> http://www.youtube.com/watch?v=1e1zzna-dNw << way better
09:41 < ningu> faceleg: the first slide of that video is the same as my link
09:41 < faceleg> ningu: coincidence?
09:42 < nesusvet> ningu, so do you think there is a problem in basic principle? 
09:42 < darthdeus> hey guys, i guess this is a overbroad general question ... but what is the recommended "thing" that should be exported from modules? is it ok to use prototype based classes?
09:42 < darthdeus> i'm not sure how node people do it most of the time
09:42 < darthdeus> if anyone could point me to a good resource that would be lovely :)
09:42 < faceleg> darthdeus: node people do it all over the place
09:42 <@Nexxy> darthdeus, a function
09:42 < darthdeus> like a book or something
09:43 < darthdeus> Nexxy: a function that acts like a factory?
09:43 <@Nexxy> I think it depends on your use case
09:43 <@Nexxy> but yes that's a good approach
09:43 < deoxxa> https://github.com/deoxxa/jesus/blob/master/index.js << i do all the things!
09:43 < darthdeus> so this is "wrong"? https://gist.github.com/darthdeus/bc4acec45ce6ec4d1957
09:43 < deoxxa> functions, objects, a constructor
09:43 < Joucke> back
09:44 < deoxxa> just to mess with people
09:44 < darthdeus> ok so constructors are fine :> what about Object.create?
09:44 <@Nexxy> yes.
09:44 < Joucke> Nexxy, so you recommend installing node from source?
09:45 <@Nexxy> Joucke, it's just the way I've always done it
09:45 < deoxxa> i download binaries 4 lyf
09:45 < Joucke> is there a mac guide for such a thing? ;)
09:45 < deoxxa> but not the installer package
09:45 < deoxxa> just the binaries
09:45 < darthdeus> anyway, more generic question ... what's the best node book?
09:45 < faceleg> google.com
09:46 < faceleg> sorry couldn't resist
09:46 < darthdeus> :P
09:46 < korilo> Professional node
09:46 < faceleg> wouldn't a book become out of date rather quickly?>
09:46 < korilo> even if the author should update it becouse of the release of 0.10.0
09:46 < darthdeus> i've written couple of apps so i know how the basics work, i'm looking for something like ... "this is how we do stuff"
09:46 < korilo> indeed faceleg 
09:46 < korilo> Professional node darthdeus 
09:46 < darthdeus> korilo: thanks, i'l check it out
09:47 <@Nexxy> darthdeus, read substack module source
09:47 < deoxxa> Joucke: mkdir -p ~/local/nodes; cd ~/local/nodes; curl -O http://nodejs.org/dist/v0.10.0/node-v0.10.0-darwin-x86.tar.gz; tar xzf node-v0.10.0-*; ln -s node-v0.10.0-darwin-x86 current; echo 'PATH="${HOME}/local/nodes/current/bin:${PATH}";' >> ~/.profile;
09:47 < deoxxa> Joucke: that... should... do it
09:47 < deoxxa> that's from memory though, so you might have to break it up a bit 
09:47 < korilo> Nexxy, where is the substack module source :)?
09:48 <@Nexxy> https://github.com/substack/
09:48 < Joucke> i've just downloaded and unpacked the tar.gz already ;)
09:48 < deoxxa> the verdict is still out on whether or not substack is a module
09:48 < deoxxa> personally i'm on the "yes" side
09:48 < korilo> lmaoo
09:48 < korilo> ahahah
09:48 < ningu> deoxxa: but that voice on nodeup... so realistic
09:49 < deoxxa> ningu: https://github.com/substack/node-song
09:49 < darthdeus> i thought people don't like substack :P
09:49 < deoxxa> can't even make this up
09:49 < ningu> haha
09:49 < ningu> didn't know that one
09:49 < ningu> it has no graphic though, lame
09:51 < ningu> darthdeus: who told you that?
09:52 < deoxxa> ningu: evil substack, clearly
09:52 < ningu> substack is more of a phenomenon to reckon with, than someone to like or dislike
09:53 < darthdeus> ningu: listened to some podcast
09:53 < darthdeus> hmm :) oki
09:53 < darthdeus> i'm kinda surprised by the amount of modules he has
09:53 < darthdeus> kinda like visionmedia
09:53 < deoxxa> damn tj
09:54 < darthdeus> i just watched his video on modular express apps yesterday
09:54 < deoxxa> leave some of the npm namespace for the rest of us
09:54 < darthdeus> i wish there was more stuff like that :\ really helped me
09:54 < korilo> darthdeus, link?
09:55 < darthdeus> korilo: http://vimeo.com/56166857
09:55 < korilo> ty
09:57 < ningu> darthdeus: well, the issue with some of substack's stuff might be that it's 'too clever'
09:57 < ningu> could break stuff by messing with js internals
09:58 < ningu> but that's just a guess
09:58 <@Nexxy> clearly
09:58 < darthdeus> to me it feels a little like he's breaking out too much stuff, but i guess everything will feel to me like that coming from the rails world
09:58 < deoxxa> that's why i maintain a policy of strict stupidity with my code
09:58 < Joucke> deoxxa, i'm on a 64-bit system, should I then curl that x86 url you gave me or another one?
09:58 < deoxxa> Joucke: same here, i use the x86 build
09:59 < deoxxa> Joucke: 32-bit V8 is slightly quicker than 64-bit, and more stable last time i checked
09:59 < Joucke> check
09:59 < deoxxa> Joucke: also 32-bit vs 64-bit pointers, so you end up with lower memory usage
10:00 < faceleg> deoxxa: stupidity +1, the Southern Hemisphere way
10:00  * faceleg herp; derp
10:00 < deoxxa> \o/
10:00  * deoxxa drinks some bleach
10:00 < darthdeus> btw question, say that i have something like a db connection, should i pass that as a parameter into each module which needs it, or require it in there?
10:00 < darthdeus> lemme make a gist to make it cleanr
10:01 < faceleg>  /o\
10:02 < Joucke> ok, so I ran these things you typed, opening a new terminal now
10:02 < darthdeus> here's what i'm thinking https://gist.github.com/darthdeus/8db69c3f2ed2364bbadc
10:02 < Joucke> which npm returns nothing :/
10:02 < darthdeus> which one of these is better? considering there is multiple "something.js" using the same "db"
10:03 < darthdeus> because the closure one is simpler to test, but it feels a big ugly
10:03 < darthdeus> but it's injecting the dependencing, making it cleaner in other ways, except for the closure itself
10:06 < Joucke> deoxxa there already was a path in my .profile, so it's a bit messed up now. fixing it, reopening terminal
10:06 < deoxxa> oh
10:06 < deoxxa> yeah, i should have mentioned that you might need to do some manual fixing there
10:06 < Joucke> which npm now gives result \o/
10:06 < deoxxa> yay!
10:06 <@Nexxy> http://wiki.ninjablocks.com/ - node.js hackable hardware list :D
10:06 < Joucke> you did mention that deoxxa :)
10:07 < deoxxa> oh
10:07 < deoxxa> well
10:07 < deoxxa> that's good then!
10:07 < deoxxa> butt.status -> saved
10:07 < darthdeus> no thoughts? :(
10:07 < Joucke> although it's not in /usr/local/bin now, so can't access it from my other account lol
10:07 < Joucke> but I'm gonna copy/mail that line you wrote to myself
10:09 < Joucke> so where is the pkg installer supposed to install npm anyway, there's only an empty alias where it was installed
10:10 < Joucke> eternal thanks go to Nexxy and deoxxa, my titanium updates are running now :D
10:10 < deoxxa> Joucke: i think the cool thing about putting it in your home directory like that is that you can just `rm -rf ~/nodes' if you manage to mess anything up badly enough
10:10 <@Nexxy> Joucke, \o/
10:11 < deoxxa> Joucke: also, by putting a new version in ~/nodes and just changing the symlink target of `current', you can upgrade/downgrade really easily
10:11 < Joucke> okay, I'll install it on my private account later as well ;)
10:11 < Joucke> deoxxa that's waaaaayyyyy too advanced for my use... i have no idea what a symlink target is ;)
10:11 < deoxxa> hehe
10:12 < Joucke> so why was there an empty npm alias put in /usr/local/bin when I installed from the pkg downloaded?
10:12 < deoxxa> the `ln -s <to> <at>' thing creates a symlink to "to" at "at"
10:12 < Joucke> ah ok :) 
10:13 < Joucke> is a symlink some sort of alias?
10:13 < deoxxa> basically
10:14 < deoxxa> it stands for "symbolic link"
10:14 < darthdeus> is the "using_closure.js" a good pattern? https://gist.github.com/darthdeus/8db69c3f2ed2364bbadc
10:14 < Joucke> i just have no idea what mac os does 'under the cover' ;)
10:15 < johannesboyne> @darthdeus it depends on your use case
10:15 < Joucke> well thanks a lot, I'm back off to work :D
10:15 < darthdeus> johannesboyne: i generally have a dependency like a db connection or something which is shared between modules
10:16 < darthdeus> johannesboyne: injecting it via closure feels like it makes testing easier, but i'm not sure if it's the right thing to do
10:16 < korilo> @ darth you even used Dependency injection in your closure file ^.^
10:16 < korilo> it is indeed
10:16 < darthdeus> ok, so nobody will tell me i'm stupid if i have this all over my codebase? :P
10:16 < darthdeus> because i kinda like DI
10:16 < johannesboyne> require("redis").createClient() is quite common :) so you are good to go with it
10:17 < ningu> quick poll: is it red-is or reed-is?
10:17 < darthdeus> johannesboyne: but what about the require("./something")(dependency) ?
10:17 < korilo> i always say red-is ningu 
10:17 < ningu> darthdeus: people do it all the time.
10:17 < darthdeus> thanks
10:17 < korilo> probably because i'm italian
10:18 < korilo> darthdeus, that's DI
10:18 < darthdeus> korilo: i know :P
10:18 < guidocalvano> hey people!
10:18 < korilo> i mean is good of couse :D
10:18 < guidocalvano> good morning (:
10:18 < korilo> s/couse/course
10:19 < johannesboyne> is there a good module to go from json to xml. Like xml2js only backwards?
10:19 < guidocalvano> anyone know what's up with browserify no longer supporting the -w option?
10:19 < marcules> Hi there :)
10:20 < marcules> I'm trying to get all documents in a mongodb-scheme with mongoose (like so: http://mongoosejs.com/docs/2.7.x/docs/finding-documents.html ) but the application freezes after the first result (when I try to display it with console.log) - any ideas?
10:21 < substack> guidocalvano: there was a big rewrite and some features went away
10:22 < guidocalvano> substack: are there substitutes yet? cause it was such a practical feature
10:22 < substack> guidocalvano: there's https://github.com/chrisdickinson/browservefy
10:23 < substack> and I started a repo called watchify that is exactly the same as browserify but you use -o and it rebundles using watch
10:23 < substack> best handled in user-space right now
10:32 < guidocalvano> substack: you should put that info on the browserify page, near the comment about watch being dropped
10:33 < guidocalvano> substack: it'll save you the time from responding on irc
10:33 < mmalecki> Successful: hey
10:34 < mmalecki> er
10:34 < mmalecki> substack: hey
10:34 <@Nexxy> lol
10:34 < mmalecki> Nexxy: yeah, well ;)
10:37 < mzelinka> Hello everyone, what .clear does?
10:38 < korilo> which api?
10:38 < alchimista> Hi people, I am using passportjs in my app, now that my app run on different amazon ec2 and I have also a server that play the role of a loadbalancer,
10:38 < Tox> mzelinka: what clear?
10:38 < faceleg> alchimista: store session in a db
10:38 < alchimista> when a user login in app, since the loadbalancer, balance the requests amon 
10:38 < guidocalvano> substack: google nor github seem to find a watchify repo
10:38 < mzelinka> .clear in REPL
10:38 < alchimista> faceleg: any example or link
10:38 < faceleg> are you using a framework
10:38 < faceleg> ?
10:38 < faceleg> express?
10:38 < alchimista> yeah, I am using Express, mongodb 
10:39 < korilo> store session in redis alchimista 
10:39 < korilo> it's really fast
10:39 < korilo> or you could use mongodb too
10:39 < faceleg> alchimista: http://stackoverflow.com/a/10175827/187954
10:39 < korilo> and use the default express session
10:39 < mzelinka> Tox: .clear in REPL
10:40 < korilo> mzelinka, .clear - Resets the context object to an empty object and clears any multi-line expression.
10:40 < korilo> what don't you understand?
10:40 < lethalduck> What are people using to intercept, view, modify, reply http traffic on the wire on Linux?
10:40 < mzelinka> korilo: thx
10:41 < alchimista> korilo: now i have this https://gist.github.com/anonymous/773ffd071da6cded3e3b so by using express session, what do u mena
10:41 < korilo> what faceleg pointed you out:)
10:41 < alchimista> u mean I don have to write the last line 
10:41 < korilo> nope
10:41 < korilo> what faceleg said is perfect and should suit your needs
10:41 < korilo> s/said/linked
10:42 < alchimista> thanx korilo: and faceleg:
10:42 < korilo> you need passport.session() to
10:42 < korilo> too
10:43 < faceleg> alchimista: np happy node
10:43 < faceleg> related to a const char*, what does this mean? "must be pointing at the start of the hex sequence"
10:45 < ningu> faceleg: doesn't really make sense without more context
10:46 < faceleg> ningu: http://libgit2.github.com/libgit2/#v0.17.0/group/oid/git_oid_fromstr
10:47 < ningu> oh. yeah, it just means str has to be a pointer to the first char in the string
10:47 < ningu> but that's fairly unremarkable
10:47 < ningu> that's just how char*'s work :)
10:47 < faceleg> ningu: so why write that? 
10:48 < ningu> dunno
10:48 < ningu> "have at least the number of bytes needed for an oid encoded in hex" is more relevant
10:48 < faceleg> ningu: so why write that? 
10:48 < faceleg> oops
10:48 < faceleg> ningu: that's 40 right?
10:48 < ningu> that's what it says
10:49 < ningu> and I take that to mean the method will look at the first 40 bytes whether they're allocted or not
10:49 < ningu> allocated*
10:49 < faceleg> mmm
10:49 < faceleg> does strlen return # bytes?
10:49 < ningu> you can't tell from a pointer how big of a block of memory it points to
10:49 < faceleg> oh
10:49 < ningu> well yes, but it just goes through till it hits \0 (string termination character)
10:50 < ningu> that may or may not be the same as the amount of allocated memory for the object
10:50 < ningu> this is where buffer overflows come from
10:50 < Shadoobie> if i have an app.js that is calling injex.js via a route.index command and that index.js file needs an array that lives in app.js do i have to export a function and in that function seeriale the array to a JSON object?
10:50 < Shadoobie> serialize the array to pass it?
10:51 < ningu> Shadoobie: huh? no, of course not
10:51 < ningu> just pass the array
10:51 < Shadoobie> i've tried to return an array in the exported function but it shows up undefined
10:53 < ningu> Shadoobie: sounds like you are confused :P
10:54 < Shadoobie> ningu: yeah i must not be doing this correctly . . . 
10:56 < Shadoobie> do i have to export a function? or can i export just the array?
10:56 < Shadoobie> i was thinking that i had to export a function that returned an array
10:57 < ningu> you can export whatever you want
10:57 < faceleg> I export only the finest beef & lamb
10:57 < vwoo> ningu: did the gf like the krugman times?
10:58 < ningu> vwoo: I think she was put off by the fact that the economic gibberish was gibberish
10:58 < vwoo> oh well
10:58 < ningu> since for her pk is the pinnacle of reason :)
10:58 < vwoo> well, i tried
10:59 < vwoo> computers are only so smart these days
10:59 < ningu> hehe
11:00 < faceleg> ningu, oh ningu
11:01 < ningu> you probably have questions about pointers, setters and assorted other dog breeds
11:01 < faceleg> yes
11:01 < faceleg> in beforework
11:01 < faceleg> I'm all like
11:01 < faceleg>     String::Utf8Value sha(args[1]);baton->sha = 
11:02 < faceleg> sha;
11:02 < faceleg>     printf("Lookup: %li:%s\n", strlen(baton->sha), baton->sha);
11:02 < faceleg> which prints 40:the sha
11:02 < shmoon> Nexxy: there?
11:02 < shmoon> anyone used nodejitsu?
11:02 <@Nexxy> shmoon, always
11:02 < faceleg> then in work, I do:     printf("Work: %li:%s\n", strlen(baton->sha), baton->sha);
11:02 < faceleg> which prints 0:
11:02 < faceleg> ningu: wtf
11:02 < faceleg> baton->sha is const char*
11:02 < shmoon> Nexxy: cool so i setup on nodejitsu it starts the script file from the start object in package.json
11:02 < faceleg> sha comes from JS
11:03 < shmoon> i want to execute one more script that has the socketio servber, but cant figure out how to do so
11:03 < faceleg> ningu: this is not consistent, sometimes baton->sha is populated in Work
11:03 < faceleg> sometimes not
11:03 < Shadoobie> ningu: so would i export an array like so? var stuff = []; exports.stuff = stuff;
11:03 < shmoon> Nexxy: any idea how to do that
11:04 < ningu> Shadoobie: sure
11:04 <@Nexxy> shmoon, they can help you best in #nodejitsu 
11:04 < shmoon> oh thanks
11:05 <@Nexxy> they have great support
11:05 < ningu> faceleg: well, this is going to sound stupid or obvious but you need to know what happens between before_work and work
11:05 < faceleg> it sounds neither
11:05 < faceleg> what happes
11:05 < faceleg> happens*
11:05 < ningu> if it's always ok in before_work then the issue is not in the JS => V8 step but somewhere in V8 it becomes an empty string
11:05 < faceleg> yes
11:05 < Shadoobie> ningu: then 'import' that array with var stuff = require("../app.js").stuff; ?
11:05 < ningu> Shadoobie: that should work, yes
11:06 < ningu> Shadoobie: but the problem is it will then execute all of the code in app.js
11:06 < ningu> Shadoobie: often people use a singleton file for this
11:07 < ningu> so you'd make array.js which has: exports.stuff = [];
11:07 < ningu> and both app.js and index.js require() it
11:07 < Shadoobie> ahh cool i can see how that might work for me
11:07 < Shadoobie> okay i will try that thank you again :)
11:07 < ningu> Shadoobie: I may be confused cause I haven't actually tried it the way you proposed, but I suspect it will do strange things like re-create your app
11:09 < Shadoobie> yeah well what it is doing is, when index gets it for the 1st time its undefined for some reason, and even my checks for that (which i do not yet know how to do properly i think) fail and then other problems occur when i try to operate on an undefined.
11:09 < Shadoobie> i think you've explained why it is undefined 
11:09 < Shadoobie> i will try your suggestion and see where it gets me, i picked a bad day to stop sniffing glue 
11:10 < ningu> haha ok
11:10 < ningu> do you like to watch movies with gladiators?
11:10 < faceleg> ningu: reading htis http://stackoverflow.com/questions/10507323/shortest-way-one-liner-to-get-a-default-argument-out-of-a-v8-function
11:10 < Shadoobie> lol 
11:10 < faceleg> it seems that as soon as one goes out of scope
11:10 < faceleg> the string * pointer are destroyed
11:10 < faceleg> ningu: is that correct?
11:11 < alchimista> faceleg:  I have a question
11:11 < ningu> faceleg: no, there is no gc in C++
11:11 < ningu> unless there has been some major revolution that I"m unaware of :)
11:11 < alchimista> http://stackoverflow.com/questions/10164312/node-js-express-js-passport-js-stay-authenticated-between-server-restart/10175827#10175827 in here what should i put as db:mongoose.connection.db
11:12 < faceleg> ningu: what is this on about then? http://stackoverflow.com/a/15355247/187954
11:12 < ningu> reading
11:12 < faceleg> alchimista: you need to start a mongodb connection
11:12 < faceleg> *mongoose
11:17 < ningu> faceleg: oh, right. yes, an object allocated on the stack will have its destructor run when it goes out of scope.
11:17 < ningu> but I didn't think that's what we were talking about.
11:17 < faceleg> ningu: I did what the question's answer outlined
11:17 < faceleg> and it solved tht issue
11:17 < faceleg> I am still very bad at articulating my C++ problems
11:17 < ningu> with malloc?
11:17 < faceleg> getting better as my knowledge grows
11:17 < faceleg> no strcpy
11:18 < faceleg> yes malloc
11:18  * faceleg herp derp
11:18 < ningu> C++ usually uses new/delete instead of malloc/free
11:18 < ningu> anyway same idea
11:19 < faceleg> so char *sha = (char *) malloc(shaValue.length() + 1); is wrong?
11:19 < ningu> nah it's fine
11:19 < ningu> ok so
11:19 < ningu> in this line:
11:19 < ningu> String::Utf8Value sha(args[1])
11:20 < ningu> what is args[1], is it another String::Utf8Value?
11:20 < faceleg> i guess so
11:20 < faceleg> it comes from JS
11:21 < faceleg> I'v changed it to String::AsciiValue shaValue(args[1]->ToString());
11:22 < ningu> you should just be able to do,
11:22 < ningu> String::AsciiValue *shaValue = new String::AsciiValue(args[1]->ToString());
11:22 < ningu> baton->sha = *shaValue;
11:23 < ningu> assuming baton->sha is meant to be a String::AsciiValue
11:24 < ningu> faceleg: but keep in mind when you do malloc() or new, you're basically saying: I'm allocating this thing and I'll take care of deallocating it
11:24 < ningu> new/delete is preferable because it calls constructors and destructors
11:27 < ningu> hrm... well, this is a bit confusing now that I'm reading on in the stack overflow thread.
11:28 < ningu> anyway, if you can't call the constructor of String::AsciiValue with new, you can still do the malloc thing.
11:30 < ningu> oh, you said above that baton->sha is const char*. so actually it doesn't really matter, you can just malloc away.
11:30 < ningu> but now you know a little more about memory management maybe :P
11:33 < faceleg> ningu: was afk
11:33 < faceleg> yes I do, thank you very much :)
11:38 -!- mode/#Node.js [+o piscisaureus] by ChanServ
11:43 < spion> hmm. I spawn a process using require('child_process').spawn , then that process forks into the background. Is there a way to monitor that forked process from within node and detect when it exits?
11:45 < Shadoobie> ningu: thank you for your help this evening/morning i was successful :)
11:45 < ningu> Shadoobie: yay!
11:45 < Shadoobie> :D woot!
11:45 < ningu> spion: yes, it emits events, there is an exit event. see the docs
11:45 < ningu> http://nodejs.org/docs/latest/api/child_process.html#child_process_class_childprocess
11:46 < spion> ningu, that only works on the original process, not the fork that it spawned
11:46 < korilo> spion, sure child.on('exit', function(code) {console.log('child process terminated with code ' + code);});
11:47 < spion> node cp.spawn() --> process forks to background --> another process
11:47 < ningu> spion: oh, right. hmm
11:47 < korilo> oh
11:47 < spion> its chrome, actually.
11:47 < spion> i want to run chrome and detect when the user closes it.
11:48 < MI6> joyent/libuv: Ben Noordhuis master * 905d56c : unix: fix uv_tcp_simultaneous_accepts() logic  Inverts the meaning of the - http://git.io/ggjLaA
11:48 < spion> so far I haven't found a way to make it not fork into the background. maybe there is a switch
11:52 < korilo> spion, if i use spawn('google-chorme') and the listen for exit event when i close the browser i get the exit event
11:52 < korilo> child process terminated with code 0 
11:53 < spion> korilo, hmm... do you get two exit events? i remember distinctively getting an exit event as soon as it forks to the background
11:53 < korilo> nope
11:53 < korilo> i listen only for exit event
11:53  * spion reviews his code again
11:54 < korilo> so it forks chrome, then when i close it it trigger exit and console.log that the process exited
11:54 < korilo> im using node 0.10.0 on ubuntu 12.04 if this matter
11:55 < korilo> btw it's weird it trigger an exit event as soon as you spawn a child process
11:55 < korilo> for you of course
11:55 < korilo> s/trigger/triggers
11:55 < spion> I'm using node 0.10.0 on 12.10 - chrome is v25
11:56 < spion> and sure enough, it emits an exit immediately, not after its window is closed
11:56 < korilo> https://gist.github.com/amurdaca/5142321
11:56 < spion> tried it from the repl
11:56 < korilo> im using the above code
11:57 < korilo> that code emits only 1 exit
11:58 < spion> yes but it emits it immediately after chrome is run because it forks into the background
11:58 < djazz> my rubik's cube solver doesnt work with 0.10.0 :(, it only uses js and simple buffers
11:58 < korilo> spion,  not for me
11:58 < djazz> https://github.com/daniel-j/node-two-phase-algorithm
11:59 < spion> korilo, what version of chrome? and if you run it from the command line, does it go into the background?
12:02 < shmoon> $ forever -c coffee server.coffee - blocks the shell, it shouldnt, it should run in background no?
12:07 < djazz> should I use buffers or typed arrays in node? I'm porting a java module, and it uses int[] and byte[]
12:10 < korilo> spion, maybe i found a solution
12:13 < samholmes> where's the docs on express' route syntax?
12:19 < spion> korilo, what might that solution be?
12:21 < Ivru> Hello!
12:21 < Ivru> someone involve with the EJDB project ?
12:26 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:30 < sgallagh> FYI, for anyone who is interested, Fedora 18 packages for Node.js (https://admin.fedoraproject.org/updates/FEDORA-2012-20578/) and NPM (https://admin.fedoraproject.org/updates/FEDORA-2013-0775/) should now be in your local Fedora packages updates-testing mirror (or arriving soon)
12:31 < Erik__> Oh boy
12:31 < bnoordhuis> neat. that was quick, sgallagh
12:32 < sgallagh> bnoordhuis: Well, we were freezing for F19 Alpha today, so I needed to have it ready there, and the backport to F18 was trivial at that point
12:33 < sgallagh> bnoordhuis: Next up... EPEL 6
12:45 < JamesMGreene> Can node-gyp compile any C/C++ or does one of the files have to follow a "module contract" or something?
12:47 < alchimi__> faceleg: https://gist.github.com/anonymous/c0f8e0d9c57f366274e7
12:47 < alchimi__> I still didnt managed to figure it out what to put here: db:mongoose.connection.db
12:48 < alchimi__> instead of mongoose.connection.db in mycase
12:49 < alchimi__> korilo: https://gist.github.com/anonymous/c0f8e0d9c57f366274e7  can u plz give me a hint in this regard
12:49 < alchimi__> thanx
12:50 < alchimi__> my question is what to put in db: of mongoStore
12:50 < alchimi__> anyone here can help me
12:51 < shmoon> $ forever -c coffee server.coffee - blocks the shell, it shouldnt, it should run in background no?
12:56 < korilo> alchimi__, mongoose.connections[0].db
12:56 < korilo> alchimi__, look here -> http://stackoverflow.com/questions/6819911/nodejs-expressjs-session-handling-with-mongodb-mongoose
12:57 < darthdeus> <flame>mongo is bad :P
12:58 < drudge> connect-redis ftw
12:59 < alchimi__> I see this in console.log https://gist.github.com/anonymous/3ce7d34cae0590d3e747 , which seems to be an error
13:00 < aboudreault> darthdeus, why is it?
13:00 < darthdeus> aboudreault: i'm currently working with a 3GB db, doing any kind of .count() is ridiculously slow and it eats up ram like a mother**** :P
13:01 < darthdeus> and it's so easy to have inconsistent data :(
13:01 < darthdeus> inconsistent as in broken
13:02 < darthdeus> it just takes one person to make a stupid decision and then you suffer 2 months later because some data in a collection is just invalid
13:02 < darthdeus> not sure how to overcome this
13:02 < darthdeus> maybe there's a good way
13:02 < aboudreault> darthdeus, well.. not that I don't beleive you... but even the worst DB software in the world would do great with a 3GB database :/
13:02 < aboudreault> but I'm not sure of what you are experiencing.
13:02 < aboudreault> and I'm not saying mongodb is good.
13:03 < darthdeus> aboudreault: yeah maybe my expectations are unrealistic
13:04 < darthdeus> but .count() is still slow, there's even an open issue for that
13:04 < aboudreault> ok,
13:04 < jefflage> hey i was wondering if there is anyone out there that could field a few questions about profiling heap dumps
13:04 < darthdeus> https://jira.mongodb.org/browse/SERVER-1752
13:04 < darthdeus> aboudreault: ^
13:04 < darthdeus> oh it was fixe
13:04 < alchimi__> korilo: I see this in console.log https://gist.github.com/anonymous/3ce7d34cae0590d3e747 , which seems to be an error
13:05 < darthdeus> aboudreault: i guess i didn't check since december :) looks like counting might be fast again :P
13:05 < alchimi__> korilo: of course after putting mongoose.connections[0].db
13:06 < jefflage> we're using the heapdump module to dump the v8 heap and then using the chrome inspector to analyze them
13:06 < jefflage> however, when i try to use the Comparison view in chrome, i get nothing
13:06 < aboudreault> darthdeus, well, thanks me for that. I push you to check again the ticket :)
13:07 < jefflage> is this expected?  are there any tricks to getting crhome to do an actual diff of the heaps?
13:15 < quizme> i have about 30 files that i want to serve.  Ideally, i'd like to keep them all in memory so that i don't have to read it from the file system everytime.  which static file server would be best for this or should i write a custom one?
13:18 < shesek> quizme, have you looked at the staticCache middleware for connect?
13:18 < quizme> shesek not yet
13:18 < shesek> http://www.senchalabs.org/connect/staticCache.html
13:19 < quizme> shesek thank you
13:19 < shesek> you welcome
13:19 < shesek> are you using connect/express?
13:20 < shesek> its quite easy to implement yourself if not (see the middleware source, its quite short), but I really recommend you to try and use connect/express
13:32 < korilo> alchimi__, use this->    var mongoose   = require('mongoose').connect('mongodb://' + cfg.mongo.uri + ':' + cfg.mongo.port + '/' + cfg.mongo.db);       // --> USE THIS mongoose.connections[0].db
13:32 < mac_nibblet> Does anyone know a good place to read on how to structure large nodejs projects ?
13:33 < korilo> mac_nibblet, lib directories?
13:33 < alchimi__> thanx korilo
13:33 < mac_nibblet> korilo: i have only written 2k lines of code and i already think it's a mess
13:33 < korilo> lol if it's an express/web app take a look at this -> http://vimeo.com/56166857
13:33 < shmoon> anyone uses the bcrypt module?
13:34 < mac_nibblet> korilo: no it's a TCP server
13:34 < korilo> shmoon, I do
13:34 < shmoon> korilo: do you use the async model or the sync one?
13:34 < korilo> mac_nibblet, oh i think your best bet is to split the project in libraries though
13:34 < mac_nibblet> korilo: i have
13:34 < korilo> shmoon, sync
13:35 < mac_nibblet> but my code is messy since im no expert on the JS prototype inheritance :S
13:35 < jonaslund> uh-oh
13:35 < korilo> mac_nibblet, it shouldn't be a mess then :D just a really big project
13:35 < jonaslund> I was doing some coding with chrome earlier
13:35 < jonaslund> and did a bug and had to disable alerts
13:35 < shmoon> korilo: hope its good to use the sync model
13:35 < jonaslund> anyone knows how to re-enable them for the domain ?
13:35 < shmoon> var hash = bcrypt.hashSync("B4c0/\/", salt); - what is the b4c0 thing ?
13:35 < korilo> shmoon, i had issues with the async one so i switched
13:36 < shmoon> oh i see, i think i just read before it takes time to build salt so may block thread or smth like that
13:36  * jonaslund 's google-fu is weak today :|
13:36 < korilo> shmoon, an expression :D
13:36 < shmoon> can i use anything there/?
13:37 < shmoon> oh thats the user's password lol ok
13:37 < jonaslund> oh nvm
13:37 < jonaslund> my bad
13:38 < korilo> ;) shmoon 
13:39 < korilo> shmoon, are you using this-> https://github.com/shaneGirish/bcrypt-nodejs ?
13:39 < shmoon> https://github.com/ncb000gt/node.bcrypt.js/
13:55 < Kakera> is 'readable' emitted if you never attempt to read()?
14:00 < Kakera> I suspect that it's not emitted properly
14:06 < mcgiddin> blackhat
14:07 < mcgiddin> lol wrong window...
14:07 < SomeoneWeird> >.>
14:07 < phrearch> hey
14:07 < phrearch> im still not convinced about this, but does the regex engine in js/v8 support named group capture?
14:08 < phrearch> im using xregexp for this, but not sure about if it's supported out-of-the-box
14:08 < phrearch> like '^/admin/users/(?<userID>[^/]+)/edit/$'
14:09 < Sly> Use \/ in regexes with /s
14:10 < Sly> / is a special char.
14:10 < Sly> If that's using `new RegExp`, you'll have to do \\/
14:10 < pachet> phrearch: no, they're not supported ootb
14:11 < phrearch> Sly, works for me when using ' '
14:11 < phrearch> pachet: ok thanks
14:11 < phrearch> happy using xregexp for that
14:19 < korilo> <3 regex
14:20 < nesusvet> Hello everyone, I want to start two node js services and share a data between each other. It should be a text data, can you suggest something to use, maybe POST,  get queries or TCP streaming?
14:22 < RLa> nesusvet, dnode maybe?
14:24 < jjlank> @mikeal you around?
14:26 < FellowMD> For all the regex heads: http://www.coinheist.com/rubik/a_regular_crossword/grid.pdf
14:26 < nesusvet> RLa, looks interesting 
14:26 < euoia> FellowMD: that is quite fun
14:27 < RLa> nesusvet, it's mentioned many times in this channel
14:27 < nesusvet> I am novice here )
14:28 < RLa> nesusvet, afaik it's just single-lined json messages
14:28 < alexwhitman> Can the npm cache directory location be changed?
14:28 < korilo> the italian nodejs site is outdated http://www.nodejs.it/ -_-
14:29 < korilo> i hope to get a reply from the owner
14:29 < korilo> i'll gladly translate the official node site
14:31 < FellowMD> alexwhitman try 'npm help config'
14:33 < mac_nibblet> Anyone here using typescript ?
14:33 < Virunga> korilo: why should one use that site instead of nodejs.org? :)
14:33 < euoia> korilo: Issues with the English language version of the website are raised in the node project on Github
14:34 < euoia> korilo: Perhaps check if the other language versions are maintained there too?
14:36 < mzelinka> can anyone please explain why when I run my chat.js script (https://gist.github.com/mzelinka/5143314), and connect to it with PUTTY and type eg. "h" it automatic write another "h", so at end it see like: "hh"?
14:38 < mzelinka> can anyone please explain why when I run my chat.js script (https://gist.github.com/mzelinka/5143314), and connect to it with PUTTY and type eg. "h" it automatic write another "h", so at end it see like: "hh"?
14:38 < bitfed> mzelinka, This is from node up and running?
14:38 < bitfed> Chapter 2
14:38 < mzelinka> yes
14:39 < mzelinka> on his picture it seem to be working
14:39 < bitfed> You need to keep going with it
14:39 < bitfed> This is incomplete
14:40 < euoia> mzelinka: surely one of the h is the one you entered, and the other one is the echo?
14:40 < mzelinka> yes
14:40 < euoia> mzelinka: perhaps his terminal doesn't have local echo?
14:40 < euoia> mzelinka: it's optional in putty, for example, I think
14:40 < bitfed> You're writing the data to all clients including yourself
14:41 < mzelinka> bitfed: no
14:41 < bitfed> You need if (clientList[i] !== client)
14:41 < bitfed> So, yes.
14:41 < bitfed> I just did this book
14:42 < bitfed> If you keep going, you will see that part next where the book tells you to do that and explains
14:42 < Madz> good morning.
14:42 < bitfed> This book shows you the code, and then it explains it all. Just keep going.
14:42 < mzelinka> ok thanks!
14:42 < bitfed> np
14:42 < bitfed> Hi Madz 
14:43 < Madz> Hows it going
14:43 < bitfed> Going okay, just about lunch time
14:43 < Madz> Ya, I am counting the minutes :D
14:43 < Kakera> I'm pretty sure TCP got much slower in 0.10
14:43 < Kakera> and buggier
14:44 < Madz> Is this a good place to get tips on NodeJS(judging by the name, im hoping it is :D)
14:44 < bitfed> Takes a lot of idling, but yes
14:44 < mmalecki> Kakera: this is likely :/
14:44 < bitfed> There's other resources out there too
14:44 < mmalecki> Kakera: streams2 caused lots of the slowness
14:44 < context> kakera: thats a shame
14:44 < ArxPoetica> Kakera -- the connection speed was reported as slower
14:45 < ArxPoetica> In the release notes
14:45 < bitfed> http://nodejs.org/community/
14:45 < bitfed> Lots of good resources listed there ^
14:45 < Kakera> ArxPoetica, yes, but not as much
14:45 < Madz> im making a simple script that starts an http server, when the client connects to the server using their broswer, i then have it make an https get request to our ticketing system and I am trying to output the results to the browser, but these callbacks are throwing me off.
14:45 < Kakera> without a bunch of this.read(0) 'readable' seems to not be emitted as often as it should
14:46 < Madz> what is the best way to to make an http request and output it to a client brouser
14:46 < Kakera> and the documentation is somewhat lacking
14:46 < kevindish> After i upgraded from 0.8.20 to 0.10.0 er have got this weird problem with socket in Node.js.
14:46 < kevindish> https://gist.github.com/kevinsimper/513c4e623708f20b213a
14:46 < Kakera> for example, should 'readable' be emitted immediately after the current tick if I don't read all of the data?
14:47 < Kakera> and what exactly does read(0) do?
14:47 < kevindish> Before i got fine uft8 data, but know i get ascii.
14:47 < kevindish> Nothing i my code have changed.
14:48 < euoia> Kakera: I saw a different problem 
14:49 < euoia> Kakera: oops hit return too soon
14:49 < euoia> Kakera: I don't see the difference before and after
14:49 < euoia> Kakera: in your gist
14:49 < Kakera> I didn't upload any gists
14:49 < kevindish> The problem is in the æøå char
14:49 < euoia> oh sorry
14:49 < euoia> kevindish: 
14:49 < kevindish> They have become c% or something
14:50 < euoia> sorry no idea
14:51 < kevindish> Thanks that you looked at it, really weird I think.
14:53 < euoia> kevindish: did you try changing setEncoding to utf-8?
14:54 < inspiron> I would like to add a configuration file that tells my app what path/to/app and subdomain to use in my code. My code is var express.vhost('subdomain.domain.com', require('path/to/my/app').  for instance: { 'path/to/my/app', 'subdomain.domain.com' }. I noticed in package.json there is a "domains" section however it doesn't provide the 'path/to/my' app ability. I was thinking about making my own file 'routes.json' for this. Has anyon
14:55 < kevindish> euoia: Yes, but then i get this strange error, buffer.js:440 throw new Error('Unknown encoding'); Error: Unknown encoding
14:55 < Joucke> Hi, back with more NodeJS problems ^^
14:56 < Joucke> apparently, Titanium Studio does not work well with v0.10.0, how do I downgrade? ;)
14:56 < euoia> http://nodejs.org/api/stream.html#stream_readable_setencoding_encoding
14:56 < euoia> utf8
14:56 < euoia> not utf-8
14:57 < kevindish> get the exact same error with "uft-8" and "uft8". Have tried it, but just did again.
14:57 < kevindish> Joucke: If you are on windows you can just uninstall and then find the old version and install that :)
14:58 < Joucke> sorry kevindish I'm on a mac :/ i've had a hell of a time installing it properly ;)
14:58 < Joucke> needed to get npm working, which didn't work with the 0.10.0 version I downloaded at first
14:58 < kevindish> Then it is a lot easier. You can use "nvm" :) Google it
14:59 < euoia> kevindish: looks like the docs are wrong then! I would examine the stack trace and have a look at the code that throws the error
14:59 < Kakera> should I submit a bug report about TCP's slowness, or is it pointless?
14:59 < euoia> Kakera: if it's something to do with the node core, any slow downs are treated as bugs
14:59 < Joucke> yay, I'm in the Netherlands kevindish and nv stands for dutch association :p so it first gives a whole list of dutch associations of mouth hygienists, brokers, model builders, etc
14:59 < euoia> Kakera: so you should submit a bug
15:03 < andrew12> http://www.youtube.com/watch?v=bzkRVzciAZg
15:03 < jonno11> Any recommendations for VPS providers? Hosting Node.js & MySQL, plus Wordpress. 
15:04 < RLa> jonno11, linode
15:04 < mzelinka> jonno11: try https://www.digitalocean.com/
15:05 < RLa> using linode for 4 years for multiple machines and happy so far
15:05 < pachet> aws :[
15:06 < jonno11> RLa: What are their downtimes like?
15:06 < euoia> kevindish: https://gist.github.com/euoia/5143637
15:06 < euoia> node 0.9.12
15:07 < inspiron> I found this for reading my own json file. https://gist.github.com/cjoudrey/988107 Is there a better way to do it or is that pretty much the best?
15:07 < avidal> I have a stream that needs to process chunks async (using dnode to another process) where the chunk can be modified; but i need to emit those chunks in the same order. Is there a best practice for this situation?
15:07 < pyrotech_> jonno11: +1 for linode
15:07 < jonno11> mzelinka: Wow that's a nice site. Making me want to spend money on them… What are their downtimes like?
15:07 < pyrotech_> although i don't object to AWS much these days considering they've fixed their UI and have servers here in aus
15:07 < pyrotech_> jonno11: i've never caught my linode down
15:07 < pyrotech_> but i'm sure it's gone down alot
15:08 < avidal> Meaning that if chunk A takes 3ms to process, then chunk B and C can't be emitted until chunk A has been, even though they can be processed as well
15:08 < RLa> jonno11, some years ago there was a network problem in london dc, connections were slow for several hours, other than that i do not remember any downtime
15:08 < pyrotech_> just never noticed in ~5 years
15:08 < jonno11> pyrotech_: Haha fair enough
15:08 < jonno11> RLa: ah awesome
15:08 < jonno11> can anyone recommend www.digitalocean.com? Prices seem too good to be true
15:08 < RLa> jonno11, mzelinka last $5 vps i used completely disappeared with all my data, no warning, no refunds, nothing
15:09 < avidal> I've read a few positive reviews about digital ocean, but i don't have any first hand experience (yet)
15:09 < pyrotech_> man that's weird
15:09 < RLa> even their company website was taken down
15:09 < jonno11> RLa: Yeah I'm having issues with my personal one
15:09 < pyrotech_> i came across these guys the other days, i was searching for VPSs with graphics cards
15:10 < JamesMGreene> Can node-gyp compile any C/C++ or does one of the files have to follow a "module contract" or something?
15:10 < RLa> avidal, how long have they been in business?
15:10 < avidal> RLa: 2009 i think? maybe 2011 i don't recall
15:10 < jonno11> Isn't AWS an overkill seeing as CPU isn't really an issue?
15:11 < jonno11> EC2 I mean
15:11 < RLa> avidal, jonno11, mzelinka i think the years of being in business is good metrics for vps providers
15:11 < g0z> ugh
15:12 < RLa> jonno11, ec2 micro instance is basically a scam, do not use it, you get very little cpu usage due to cpu stealing
15:12 < bnoordhuis> JamesMGreene: in theory any c/c++ code should work
15:12 < jonno11> RLa: aha fair enough. I could kind of see that
15:12 < pyrotech_> digitalocean looks really fkin awesome
15:12 < pyrotech_> thanks for the link
15:13 < jonno11> pyrotech_: I agree. Worryingly good…
15:13 < inspiron> If I have a file that specifies the 'app' and the 'domain' for multiple app/domains. What would be appropriate to call it, routes.json, servers,json
15:13 < jonno11> Wondering if it's too good to be true
15:13 < RLa> pyrotech_, by what they look awesome?
15:13 < JamesMGreene> bnoordhuis: What does consuming that module look like, then? That's where I'm a bit confused
15:14 < bnoordhuis> JamesMGreene: you probably want to read this: http://n8.io/converting-a-c-library-to-gyp/
15:15 < JamesMGreene> bnoordhuis: Sounds like it, thanks for the link!
15:16 < pyrotech_> RLa: https://www.digitalocean.com/customer-stories
15:18 < JamesMGreene> bnoordhuis: Have you ever tried using emscripten to make a Node.js module?
15:18 < RLa> pyrotech_, looks impressive
15:20 < JamesMGreene> bnoordhuis: The library I want to port (dos2unix) isn't that complicated but I also don't really want to waste time on rewriting it
15:21 < aus3ys> does any1 came up to blogs about node.js to follow?
15:21 < mzelinka> alternative to mIRC?
15:22 < euoia> mzelinka: irssi
15:22 < korilo> mzelinka, xchat
15:22 < aus3ys> textual, linkinus
15:22 < JamesMGreene> mzelinka What OS?
15:23 < jhsto> Does anyone know how to write data to file with ISO encoding?
15:23 < mzelinka> JamesMGreene: Win
15:24 < Kakera> "The size argument will set a minimum number of bytes that you are interested in."
15:24 < Kakera> so will it return size bytes, or as many as it wants to?
15:28  * JamesMGreene shrugs
15:28 < JamesMGreene> mzelinka: I've tried others but I always come back to mIRC
15:31 < pachet> irssi or bust
15:31 < pachet> euoia++
15:33 < FellowMD> @jhsto from buffer.js in the node source, here's the supported list of encodings: http://paste.pm/5gf.js
15:34 < FellowMD> from here: https://github.com/joyent/node/blob/master/lib/buffer.js
15:34 <@isaacbw> I switched to irssi against my will
15:34 < Kakera> okay since there was no response I submitted an issue https://github.com/joyent/node/issues/4991
15:36 < gavinr> hi everybody - we have a node express app that has 3 separate pieces of functionality - file upload/download, logging in, and a group policy endpoint ... is it "best practice" to run these as separate node apps on one box, or just have them all be in one node app?
15:38 < mzelinka>  :o 
15:40 < korilo> gavinr, i think is enough to have them in one app
15:40 < korilo> just split your routes/lib
15:41 < shesek> gavinr, if they all share the same app settings, locals, etc... its fine to keep them under one app
15:42 < shesek> also check out https://github.com/shesek/express-subroute (shameless self plug :P)
15:53 < Industrial> Where do I look up the EPIPE error? What do I do with it?
15:57 < FellowMD> @IndustrialDunno I haven't seen it before. But this is often helpful to me: http://www.barricane.com/c-error-codes-include-errno
15:58 < FellowMD> @Industrial
16:01 < racing> i have a race condition I dont know how to solve
16:03 < racing> i have a for-loop that creates objects
16:03 < racing> and those objects need to be pushed to an Order DB object
16:04 < racing> the order.save() function is outside the for-loop
16:04 < racing> I thought that if I put the order.save call after the for-loop, it will only get executed then
16:04 < racing> but I see that it's not the case
16:05 < racing> like:
16:05 < euoia> racing: async.parallel?
16:05 < euoia> racing: just a guess
16:05 < racing> for (var i=0; i < myFriends.length; ++i) { //create Friend object, push it to order.friends array} order.save(...)
16:05 < euoia> racing: you are creating the objects in an async call within the for loop?
16:06 < racing> euoia: yes
16:06 < euoia> racing: are you using async in your project?
16:06 < euoia> racing: as in the async module
16:06 < racing> no
16:06 < euoia> racing: any kind of flow control module?
16:07 < racing> i used Nimble, but I find it really confusing (I'm a newbie)
16:08 < racing> i got it to work, but I know it's not how it's supposed to be
16:08 < euoia> racing: async gets a bit of praise in this channel
16:08 < euoia> racing: I haven't heard of nimble
16:09 < racing> I guess the "series" is easy
16:09 < racing> but the parallel stuff I dont get
16:09 < racing> in the sense that there's only 1 callback at the end
16:09 < bradleymeck> also if you really want to clean up if (err) on large code bases / catch any error in your flow, domains are the the way to go
16:10 < racing> so I dont understand how they all collapse into 1 call
16:10 < bradleymeck> racing: thats because it executes the functions that are declared in the first argument (it is an array of functions)
16:10 < euoia> racing: well I think the callback at the end is only called once all of the other functions that you pass in have executed their callbacks
16:10 < racing> and what if I wanted to combine their results?
16:10 < racing> like, go to the db in 5 different calls and get me stuff for the nav menu
16:11 < euoia> racing: I think there's a different function if you need the results from each of them
16:11 < FellowMD> I believe you want https://github.com/caolan/async#each
16:11 <@isaacbw> racing: the callback at the end is called when all the parallel callbacks are done
16:11 <@isaacbw> there's no magic there, you just have a utility library that simplifies things
16:11 <@isaacbw> based on common patterns
16:12 <@isaacbw> though honestly I find libraries like async to be of limited use
16:12 < racing> ok, giving async a chance now
16:12 <@isaacbw> I would say don't use it until you know why you should use it
16:12 <@isaacbw> just spend time doing callbacks yourself
16:12 <@isaacbw> get to know why it can be an unpleasant thing to do by hand
16:12 < racing> i have a list of friend objects, for example, that I want to add in a loop into another object's array
16:13 < racing> and then save that other object with all the friends in it
16:13 < racing> that's the use case
16:13 < racing> so I'm "push"'ing inside the loop
16:14 < racing> but the code gets to that container object's save function before the loop is done
16:14 <@isaacbw> and do you have a solution already without using something like async?
16:14 <@isaacbw> or at least, do you know how you would solve it
16:14 < racing> nope
16:15 < jrajav> I've been meaning to write an article for a while on how easy it is to replicate the entirety of async
16:15 < jrajav> Just using bare arrays/objects/native methods
16:15 < FellowMD> Here's a simple way with callbacks: http://paste.pm/5gi.js
16:16 < FellowMD> @racing
16:16 < g0z> hey someone is asking me how walmart is using node in it's mobile app exactly. I don't know what to tell them as I don't understand it, anyone have a clue/place to go read about stuff like this?
16:16 < racing> @isaacbw: got a suggestion?
16:16 < euoia> racing: check the FellowMD example
16:16 < pachet> walmart, mobile app....eek
16:17 < g0z> I know I don't shop at walmart
16:17 < gazarsgo> g0z: set up a mobile device on a wifi network you control, sniff the traffic to discover endpoints being used...
16:17 < g0z> but they have the loot to have a good dev team eh
16:17 < gazarsgo> i sell products on walmart.com… "good" is not the right adjective for the sort of enterprise they're running. stuff mostly works most of the time.
16:18 < g0z> I don't know anything about it as mentioned 
16:19 < g0z> I guess my question is what is the server side doing that takes work off the client side whcih is what is proposed in this article for your average joe so doesn't go into details. I honestly do not know. it's not html5 though I guess.
16:19 < accrec> hi there
16:20 < euoia> "Now, on Walmart’s re-engineered Node-powered mobile app, all the front-end code gets executed on the back end.
16:20 < euoia> "
16:20  * euoia boggles at the concept.
16:20 < pachet> :[
16:21 < RLa> they implemented server-side browser?
16:21 < g0z> I ... dunno
16:23 < g0z> maybe it's a vnc client :S
16:23 < euoia> g0z: http://benzilla.galbraiths.org/ and https://twitter.com/bgalbs
16:24 < euoia> g0z: ask the guy
16:25 < euoia> I imagine the kind of the thing that may have been done before on the client would be stuff like sorting or searching
16:25 < euoia> but that's just a guess
16:25 < pachet> shopping or spending
16:25 < pachet> saving
16:25 < pachet> they offload the cost of computing the savings
16:36 < sander^work> Can anyone recommend a node.js framework that supports both relational and nosql databases?
16:37 < sander^work> And can work as a rest api?
16:38 < tanepiper> You could build an express app and use node-mysql/node-postgres, and mongoose/cradle depending on your db choices.  That really isn't how node frameworks work
16:41 < shesek> sander^work, nodejs frameworks are usually not coupled with an orm/dbal layer
16:41 < shesek> unlike a lot of ruby/php/java frameworks
16:41 < sander^work> shesek, ah. Why's that?
16:41 < shesek> you can pretty much use whatever you want, the framework doesn't care
16:42 < korilo> how this func -> https://github.com/caolan/async/blob/master/lib/async.js#L19 evaluates to true before return?!
16:42 < shesek> well, why should I be limited to the DBAL the framework author prefers?
16:42 < sander^work> shesek, then, is there any framework that works well when creating an rest api?
16:43 < euoia> korilo: not sure what you mean
16:43 < gavinr> korilo shesek thanks for the info. my only concern is that if the node app crashes, having them as separate apps would be beneficial
16:43 < shesek> sander^work, I mostly work with Express, which is very convenient for REST apis
16:44 < gavinr> only one part of the app would die instead of all three parts
16:44 < shesek> gavinr, with subapps, they all run in the same thread
16:44 < gavinr> what do you mean by "Subapps"?
16:44 < shesek> gavinr, so it'll still crash the whole thread/process
16:45 < shesek> gavinr, you can .use() an app and mount it
16:45 < gavinr> ah got it.
16:45 < gavinr> but what if i totally build 3 separate app.js apps
16:45 < korilo> euoia, you see callback = true; return func() if (called)..... how the flow can get into this IF if called was set to false?
16:45 < gavinr> and run them separately via the console
16:45 < shesek> check out http://vimeo.com/56166857
16:46 < euoia> a function is being returned
16:46 < euoia> that function could be called again, no?
16:46 < korilo> but called is set to false
16:46 < euoia> if it were called again, called rould be true
16:46 < gavinr> shesek would separating them out into separate apps help me out in terms of if one crashes the others will not? how often does node crash?
16:46 < euoia> could is set to true within the function
16:46 < shesek> gavinr, as long as you catch uncaught exceptions, it shouldn't crash
16:47 < euoia> *called
16:47 < shesek> in case it does crash, you have some tools that can automatically re-start it
16:47 < shesek> but generally speaking, its not something that should happen
16:47 < shesek> and no, it wouldn't help you
16:47 < gavinr> lol
16:47 < korilo> euoia, i should open JS the def guide again to have a quick lok at fucn :P
16:47 < korilo> thx though
16:47 < shesek> unless you ran them as separate processes, and "mount" them over http
16:47 < gavinr> so current prevailing logic would be to use express subapps?
16:48 < euoia> korilo: the outer scope is preserved through repeated calls to the inner function
16:48 < shesek> gavinr, I don't know what you're doing their exactly
16:48 < euoia> korilo: I think it's called a closure
16:48 < euoia> korilo: the inner function stores a refernce to its environment
16:48 < euoia> korilo: or context
16:48 < korilo> i know what closure are just didn't followed the flow
16:49 < shesek> gavinr, if they're separate from each other, and don't share any settings/locals/etc, you should probably go with separate apps
16:49 < euoia> since a function is being returned by only_once, the caller may call this function multiple times
16:49 < shesek> but for simple cases, I'd go with a single app
16:49 < gavinr> ok. thanks shesek
16:50 < korilo> euoia, indeed is called multiple times -> iterator(x, only_once(function (err) {....
16:50 < shesek> something like that express-subroute or https://github.com/visionmedia/express/pull/1511 could make it more convenient to manage, if each of your pieces of functionality defines a lot of routes
16:51 < shesek> (that is, if you don't use subapps)
16:51 < shesek> the use-cases for subapps and subroutes are pretty similar
16:51 < shesek> I even noted that the example I used for express-subroute is probably better done with subapps, heh
16:53 < Virunga> korilo: do you know an italian nodejs mailing list?
16:55 < korilo> nope, i'mplaying with node for a while now but i always come here and look for english stuff most of the time
16:55 < korilo> are you italian Virunga?
16:57 < Virunga> korilo: yes, i'm interested because that's a good way to know other nodejs developers, meet and stuff like that
16:59 < korilo> there's an italian conf in Brescia i think
17:00 < korilo> but didn't attented it even if i'm from Milan :)
17:00 < korilo> s/attented/attend
17:01 < matticulous> i know it probably doesn't matter a ton, but is there a "common practice" path for deploying node.js apps in production? for example, if my install is "git clone [blah]; npm install .", where should i be running this from? /opt/local? /var? other?
17:01 < Virunga> korilo: will be or there was a conf? (i'm from Milan too)
17:02 < shesek> matticulous, I'm adding users for each app, and set it up in their home directory
17:02 < shesek> but you can pretty much do it however you want
17:02 < shesek> just find what's most convenient for you
17:02 < Virunga> found it
17:02 < korilo> there was but i think there will be another in 2013,not sure when btw read here https://twitter.com/nodejsconfit
17:02 < deoxxa> korilo: nodejsconf.it
17:02 < deoxxa> i went to it :>
17:03  * deoxxa taps yawnt
17:03 < korilo> you're from italy?!
17:03 < deoxxa> nope
17:03 < deoxxa> australia
17:03 < matticulous> shesek: thank you for the input
17:03 < deoxxa> but i went anyway
17:03 < korilo> nice :o
17:03 < mzelinka> hello
17:04 < racing> so async experts: if I place my for-loop inside a "series" function, it will first finish the for-loop code before moving on to the next function in the series?
17:04 < mzelinka> is there an TomDoc JavaScript parser?
17:04 < korilo> racing, why don't use directly async.each (or the other each*)?
17:05 < Virunga> deoxxa: did you take a talk?
17:05 < racing> korilo: don't know how to use it :/
17:06 < deoxxa> Virunga: nope
17:06 < deoxxa> Virunga: i just went for the coffee and pizza :P
17:06 < Virunga> well that's strange xD
17:06 < korilo> racing,  https://github.com/caolan/async#each it's pretty simple and it has like 20 LOC
17:07 < korilo> if you want to see how it works
17:07 < racing> so I put the  array in, and then how do I tell it to apply a particular function at the end?
17:07 < racing> ok, I see
17:07 < korilo> oh at the end of the "each" you mean
17:07 < racing> so inside the {} I put the code I want done on each of the items in the array
17:07 < korilo> wasn't this good -> http://paste.pm/5gi.js ?
17:07 < racing> and the callback is the function that gets called once all the iteration is done
17:08 < korilo> racing, exactly
17:08 < racing> korilo: no, at the end of the end :-) like, when all the items in the array got the treatment they needed
17:08 < korilo> callback(err) - A callback which is called after all the iterator functions have finished, or an error has occurred.
17:08 < racing> korilo: I'll give it a try!
17:08 < mzelinka> is there an TomDoc JavaScript parser?
17:08 < korilo> gotcha?:)
17:09 < Virunga> There's a big event in Rome on March 20 deoxxa: http://rome.codemotionworld.com/ 
17:10 < racing> korilo: one last question:
17:10 < Virunga> free
17:10 < racing> I see "each(arr, iterator, callback)" as the definition
17:10 < racing> so does it mean I do:
17:10 < deoxxa> Virunga: neat! unfortunately i'll be otherwise engaged at that point :<
17:10 < korilo> for each value of the array apply iterator then call the callback
17:11 < niggler> what do people use for 64 bit integers
17:11 < racing> async.each([id1, id2, id3], function(currId) { //do somethin here}, function() { my callback here?}
17:11 < korilo> if any error occurs it will be in the callback
17:11 < korilo> racing, should be :D
17:11 < deoxxa> niggler: 53 bit prayers
17:11 < racing> ok, ill test it out now
17:11 < niggler> heh there are a few alternatives
17:11 < niggler> google closure library has a long type
17:12 < niggler> which is essentially 2 32 bit integers in an arrayh
17:13 < Kakera> niggler, strings
17:13 < niggler> oh god
17:13 < niggler> not strings
17:14 < merpnderp1> anyone else having problems with bcrypt in .10
17:14 < merpnderp1> I have a site down because of a bcrypt update issue
17:14 < korilo> racing, let us know how it goes :P
17:15 < deoxxa> merpnderp1: past code -> receive happy
17:15 < deoxxa> *paste
17:15  * deoxxa sucks at typing at 4am
17:16 < niggler> wtf is "receive happy"
17:16 < superjoe> Kakera, why not use an ArrayBuffer?
17:16 < deoxxa> niggler: vague and confusing, hopefully
17:16 < deoxxa> niggler: something like the question
17:17 < niggler> i could use some happy right now
17:17 < Kakera> niggler, because they are not user-friendly
17:17 < Kakera> and what's wrong with a string?
17:17 < superjoe> Kakera, it's just a fundamentally incorrect data structure for digits
17:17 < OliverJAsh> I need to use child_process.fork(). The module that I fork to run as a child process needs a dependency injected, however. How can I load that module, injecting the dependency (running it as a function) and then forking it?
17:18 < racing> korilo: no go :-(
17:18 < racing> I created this gist
17:18 < racing> https://gist.github.com/anonymous/5144856
17:18 < superjoe> OliverJAsh, you'll have to use IPC to communicate between processes - you can't share objects
17:18 < racing> korilo: forgot to add a item.save in there
17:19 < racing> but that's the iea
17:19 < racing> idea
17:19 < korilo> mmmm
17:19 < korilo> have you had a look at eachSeries(arr, iterator, callback)
17:19 < Almindor> hey
17:19 < korilo> maybe
17:19 < Kakera> superjoe, I've never had any problems using strings
17:20 < Almindor> node keeps crashing on me when I request data from a windows IIS server: http://pastebin.com/DwiKmj4T
17:20 < Almindor> this data is an image, works fine in browsers
17:20 < superjoe> Kakera, I bet I can get much better performance with a buffer
17:20 < Almindor> no more info given, just http crash
17:21 < Almindor> damn misclick
17:21 < Kakera> superjoe, and I bet you'll enjoy manually converting your number into hex to create a buffer from it
17:22 < merpnderp1> deoxxa: nothing to paste. bcrypt wouldn't build and gives no error
17:22 < korilo> racing, i didn't got why it doesn't work that method mm
17:22 < merpnderp1> gyp ERR! Completion callback never invoked! 
17:22 < superjoe> Kakera, you have to do that your way too
17:23 < racing> korilo: should work?
17:23 < superjoe> Kakera, wait are we talking about creating a BigNumber class which supports arithmetic, or are you just talking about storage?
17:23 < Kakera> storage
17:23 < superjoe> oh. yeah strings are fine
17:24 < deoxxa> merpnderp1: hrm, try runing `node-gyp' in the bcrypt directory on its own
17:25 < deoxxa> merpnderp1: and i'm assuming you've already checked its issue tracker? 0.10 is brand spanking new, so there's bound to be some ramp-up time for libraries updating
17:25 < AntelopeSalad> merpnderp1: bcrypt was broken with 0.8 too when it just came out, i think the guy will just have to update it
17:25 < merpnderp1> deoxxa: heh, my bad for not waiting for SP1 :P
17:26 < korilo> racing, well, *should* work
17:26 < merpnderp1> AntelopeSalad: I seem to recall that. Thanks
17:26 < korilo> if you read the each doc itsays it should do what you want to achieve
17:27 < Industrial> Has anyone ever started a nodejs server entirely from JSON e.g. use this 'class' with these settings?
17:28 < AntelopeSalad> merpnderp1: you should still open an issue though, i use it too -- it would be nice if he got to it sooner than later
17:30 < korilo> btw racing i think that this -> http://paste.pm/5gi.js isa good way to achieve what you want to do..just wrap it in a fn and you should be good to go
17:31 < racing> korilo: I dont quite understand that
17:31 < merpnderp1> AntelopeSalad: I have no idea what to put and I din't even know where npm modules live? In githubn?
17:31 < context> korilo: ew !
17:31 < merpnderp1> is it node.bcrypt.js?
17:31 < racing> and I also want to do the "check" after it was added to the order.items array
17:32 < context> korilo: why not use some sort of promise 
17:32 < addisonj> trying to understand something about node-gyp, node-gyp doesn't exist on my path, yet, I am able to build native modules, how does npm resolve the node-gyp binary?
17:32 < context> korilo: like async or q
17:32 < merpnderp1> ah, npm info bcrypt…..so intuitive. npm should run everything
17:32 < context> racing: look at async or q
17:32 < korilo> context, async is what we tried to use but apparently it didn't work for him
17:32 < korilo> context, q would be a way but is a bit more complex...
17:33 < korilo> racing, that algo isn't so difficult, it just checks if there are running things else it keeps going and at the end it calls db.save or whatever
17:34 < Industrial> 1) Can I look inside a stream like an array to see the contents but not change it? 2) Can I change 'elements' around?
17:36 < racing> dunno, this async thing got my computer hanging now
17:36 < niix> What would be the correct way to do a mongodump and then copy to local db with mongoose?
17:36 < racing> korilo: what I meant to say is that there's no callback when you do a "push" into an array
17:36 < merpnderp1> AntelopeSalad: https://github.com/ncb000gt/node.bcrypt.js/issues/148  hope I didn't put anything in there that haxorz can use :P
17:36 < racing> (unless im wrong)
17:38 < korilo> racing, yes there's checkDone
17:38 < merpnderp1> AntelopeSalad: that bug is closed saying it is node-gyp
17:38 < korilo> a callback can be a normal func :D
17:38 < SJKramer> Good morning node.js!
17:38 < racing> if I do: var myArray = []; myArray.push('hello', someFunc)
17:38 < qubit01> anyone using TypeScript with node yet ?
17:38 < racing> it will call myfunc when it's done pushing the item to the array??
17:38 < korilo> of course... :D
17:39 < korilo> have you have seen the intro video or ryhan?!
17:39 < korilo> lol
17:39 < qubit01> wait, what ?
17:39 < korilo> it's always a function that you pass as a callback
17:39 < racing> holy crap
17:39 < korilo> ahahahah
17:39 < racing> I really didnt know there was this feature
17:39 < korilo> :P
17:39 < racing> i dont see anything like that on the google machine
17:40 < korilo> it's not a feature lol :D it's just like callbacks work
17:40 < martin__> Hello
17:40 < martin__> First time using IRC.
17:40 < korilo> it's just a function that you need to call when some is finished
17:40 < korilo> in js (php too i think) can be a closure
17:40 < martin__> How do you upload a file using Express and NodeJS?
17:40 < korilo> that you write directly in the fn
17:40 < racing> hold on korilo: how does it know it's a callback and not another item to push into the array?
17:41 < korilo> your db "push" function should be async
17:41 < korilo> so the first param would be the document
17:41 < korilo> the second the callback..
17:41 < racing> but that's my point: I dont think it has a callback
17:41 < korilo> what db and library you use?!
17:42 < korilo> you should read the db api docs then
17:42 < racing> mongoose
17:42 < FellowMD> Any asynchronous function should take a callback
17:42 < korilo> of course mongoose is async
17:42 <@isaacbw> martin__: http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4
17:42 < racing> ok, before everybody jumps
17:42 <@isaacbw> http://www.senchalabs.org/connect/middleware-bodyParser.html
17:42 < racing> im not yet saving the order object
17:42 < korilo> it would be the second or third or whatever..just read the doc for your "push" "insert" fn
17:42 < racing> it has an array property inside of it
17:43 < racing> and im just pushing items to it
17:43 < racing> not saving yet
17:43 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
17:43 < racing> when im done pushing all the items, I want to save
17:43 < racing> that's the problem I'm facing
17:43 < racing> because the code continues to all the callbacks
17:43 < korilo> write an async pushing :D
17:43 < racing> and they expect to see an item
17:43 < racing> and the item isnt there yet
17:44 < racing> that's why I wanted all the items to first be created (new Item) and then pushed into Order
17:44 < korilo> so that Push is not a db.push but a normal array push right?
17:44 < racing> and at the end, save the order
17:44 < racing> korilo: correct
17:45 < martin__> @issacbw, I forgot to set the action property.  Thanks!
17:45 < korilo> so you want to create array elem new Item in a for loop and as soon as they are created you want to push it in an array and at the end of the loop you want to save the order in DB?
17:46 < racing> yup
17:46 < korilo> typeof order == array right?
17:46 < racing> no
17:46 < korilo> :/
17:46 < korilo> you said push them into Order
17:46 < racing> order = { id : 1234, items : [] ...}
17:46 < korilo> :/
17:46 <@isaacbw> martin__: np
17:47 < korilo> item is a property of order then??
17:47 < racing> korilo: to be exact, items array is an array containing objects of Item
17:47 < racing> Item is another object
17:47 < korilo> item : [] is an object ok but is an array object in your order object
17:47  * korilo so confuse
17:48 < OliverJAsh> superjoe: i've never done IPC before. what's the best module/tool for that?
17:48 < racing> order = { id :1234, items: [{itemId1}, {itemId2}] }
17:48 < korilo> ohw perfect
17:48 < korilo> then
17:49 < korilo> you want items to be created with a for loop with new Item and pushed into order.items (order.item.push(new Item))
17:49 < korilo> right?
17:49 < racing> yes
17:49 < korilo> why async.each and async.eachSeries didn'tworked then
17:49 < korilo> wait
17:51 < racing> writing a gist of my async.each
17:52 < korilo> same here lol
17:52 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:52 < OliverJAsh> superjoe: If you'd like to help I've posted here (re. IPC/forking child processes) http://stackoverflow.com/questions/15368436/fork-a-child-process-and-inject-dependency
17:53 < racing> korilo: something like that
17:53 < racing> https://gist.github.com/anonymous/5145199
17:54 < racing> korilo: this is formatted nicer
17:54 < racing> https://gist.github.com/anonymous/5145207
17:55 < korilo> http://paste.pm/5gl.js
17:55 < korilo> look
17:55 < racing> korilo: i think I know what the problem is
17:56 < korilo> there's some typo in my paste correct em :P
17:56 < racing> hold on
17:56 < racing> korilo: why would I want to save after EACH item is pushed?
17:56 < racing> isn't is wasteful?
17:56 < korilo> where i save after each push?!
17:56 < korilo> the callback is run at the end of the "each"
17:57 < korilo> waiiiittttt
17:57 < racing> understood
17:57 < korilo> you're right
17:57 < korilo> nope wait i'm right :D
17:58 < korilo> that snippet should be right
17:58 < korilo> test it (correct it firstly)
17:58 < racing> i think there's another issue
17:58 < racing> when the final callback for this function is called
17:58 < racing> function(err)
17:58 < racing> and I do order.save(...)
17:58 < racing> inside the order.save
17:59 < racing> can I call the callback coming from the top function?
17:59 < racing> (where this is all nested
17:59 < racing> )
17:59 < racing> or do I need to first "close" this async somehow
17:59 < racing> and get the value from it
17:59 < racing> because I want to send the order in the callback
17:59 < korilo> mmm not sure what you want to do erm
17:59 < korilo> oh
17:59 < korilo> sure you can
18:00 < racing> so this whole thing is nested inside "placeOrder(orderParameters, callback) { ...}
18:00 < racing> ok
18:00 < korilo> moreover the "iterator" param of async.each takes a callback too
18:00 < korilo> you should really read this racing -> https://github.com/caolan/async#each
18:01 < context> racing: use a promise for the save order. then you can attach that callback to the promise
18:01 < racing> and newitem function needs to reside outside this nesting function?
18:01 < korilo> just for general kwonledge too 
18:01 < context> racing: i think you are trying to do too much "all at once"
18:01 < context> layer it.
18:01 < racing> context: probably right
18:01 < korilo> if promises can help then go with q or deferred (https://github.com/kriskowal/q)
18:02 < racing> well, id need to learn about them as well, then :-)
18:02 < korilo> even if i think promises should be well understood before using em :P
18:02 < korilo> before they seems like gold at the start and you'll end doing only .then.then.then lol
18:03 < korilo> s/before/because
18:04 <@isaacbw> if you use them as a drop-in replacement for callbacks, yea
18:05 < korilo> isaacbw I think that what he's trying to do 
18:05 <@isaacbw> all I read was the last line :P I didn't look at the context
18:05 < korilo> I'm here to update you boss!
18:05 <@isaacbw> :D
18:05 < CoverSli1e> ok who likes comic books? http://cbz.coverslide.me/
18:06 < korilo> daredevil all my life!!!
18:06 <@isaacbw> oh man, slick
18:06 <@isaacbw> you're showing off the UI work, right?
18:06 < CoverSli1e> the UI is simple
18:06 <@isaacbw> but it's slick
18:07 <@isaacbw> who cares about complexity
18:07 < korilo> really nice CoverSli1e 
18:07 < CoverSli1e> more about having a library of 70G comic books that I want to read wherever I am
18:07 <@isaacbw> oh :P
18:09 < CoverSli1e> but spent the last 2-3 weeks hacking on it
18:09 < CoverSli1e> pretty pleased with the result
18:10 < segomos> you generated that huge thing of ads from old magazines?
18:10 < segomos> you're the one who*
18:10 < CoverSli1e> well all downloaded from the internets
18:15 < martin__> How do I read and/or save the file uploaded?
18:15 < martin__> I am using Express.
18:16 < g0z> require("fs") is there you start if you want to save it locally as a file.
18:16 < korilo> that digitaloceam.com is really nice as service
18:16 < FelipeFDL> martin__: require("fs")
18:16 < martin__> I have fs = require('fs').
18:16 < segomos> martin__: there is documentation on how to save file streams on node, just save your upload stream 
18:16 < korilo> martin__, http://nodejs.org/api/fs.html
18:17 < inspiron> I can host my express server on port 8000 but port 80 isn't working
18:17 < martin__> I am one step behind.
18:17 < inspiron> anyone else have that problem before?
18:17 < inspiron> I think it may just be my firewall
18:17 < martin__> How do I get the path of an uploaded file?
18:17 < segomos> inspiron: are you running it as root?
18:17 < inspiron> no
18:17 < martin__> This does not work, req.body.datafile.path.
18:18 < inspiron> do I need to
18:18 < segomos> try running it as root, if it works then you need to run it elevated and lower it to peon privs
18:19 < segomos> or you can use your router
18:19 < korilo> inspiron, 80 should be a priviledged port
18:20 < martin__> When I use console.log(req.body), I only see this "{ datafile: '1.txt' }".
18:21 <@isaacbw> are public jsfiddles actually implemented yet?
18:21 <@isaacbw> as in, listed in your account
18:23 < deoxxa> isaacbw: do you ever get complaints about replications from the official npm registry just dying for no reason?
18:23 <@isaacbw> deoxxa: you're looking for isaacs
18:23 < deoxxa> oh my
18:24 < deoxxa> my eyes have failed me
18:24 < CoverSli1e> he's a replication of isaacs
18:24 < deoxxa> sneaky
18:25 < deoxxa> isaacs: continuous replication from the official npm registry is failing for what seems to be no reason, after an indeterminate period of time. is this a common problem? if so, how have i screwed up (assuming i've screwed up)?
18:31 < martin_> How do you get the path of an uploaded file using node and express?
18:34 <@isaacs> deoxxa: the built in couchdb replicator is not very resilient to network hiccups.  i recommend using the `replicate` module that mikeal wrote.
18:34 <@isaacs> deoxxa: it's on the todo list ot build something that replicates more smartly, and also to get the tgz files moved into a CDN so that it's less to replicate.
18:35 < deoxxa> isaacs: ah yep, that makes sense
18:37 < scott_gonzalez> isaacs: Are you able to tell if download.jqueryui.com@1.10.1-2 failed in some way?
18:38 < scott_gonzalez> isaacs: If the publish failed in some way.
18:38 < scott_gonzalez> `npm install download.jqueryui.com` sees 1.10.1-2 as the latest and tries to install it, but then gets a 404 on the .tgz
18:38 <@isaacs> scott_gonzalez: yeah, seems like the tgz never made it there.
18:38 <@isaacs> scott_gonzalez: http://registry.npmjs.org/download.jqueryui.com/-/download.jqueryui.com-1.10.1-2.tgz
18:39 < simong> Does anyone know if there's a node module that retrieves thumbnails from youtube/vimeo/.. hosts?
18:39 <@isaacs> scott_gonzalez: npm publish -f it
18:39 <@isaacs> scott_gonzalez: or `npm publish --gangsta`
18:39 < scott_gonzalez> isaacs: Is there any log file that might have info about what failed?
18:39 <@isaacs> scott_gonzalez: npm-debug.olog
18:39 <@isaacs> *npm-debug.log
18:40 < g0z> simong: don't know of such a thing. 
18:40 < simong> It's what I figured
18:40 < simong> It's not that hard, but I didn't want to reproduce a lot of work if it already existed :)
18:40 < g0z> even pulling stuff from youtube using the official APIs is a pain
18:41 < simong> the thumbnails should be relatively easy, they are all at http://img.youtube.com/vi/<movie id>/[0-3].jpg
18:41 < g0z> unless it doesn't require oauth then maybe it's ok :)
18:41 < scott_gonzalez> isaacs: Ok, the person who published said that it did fail (not sure why he didn't notice before).
18:42 <@isaacs> scott_gonzalez: it *should* try to remove the version json doc if the upload fails.
18:42 <@isaacs> scott_gonzalez: but i guess THAT failed, which can happen
18:42 <@isaacs> scott_gonzalez: the proper solution involves a significant refactor of npm, which is planned, but probably not going to get to it for a while.
18:43 < scott_gonzalez> isaacs: Now you need to write network-rimraf :-P
18:43 <@isaacs> scott_gonzalez: hehg
18:44 < scott_gonzalez> isaacs: Oh, there was something else I've been meaning to ask you. Do you have a solution to losing history when moving from userland modules to core? Or does the benefit of iterating outside of core outweigh of cons of losing all history?
18:44 < Cyril> hello
18:44 < Cyril> i think i noticed a bug
18:44 < Cyril> i updated node today
18:44 <@isaacs> scott_gonzalez: the benefit of external iteration is worth it.
18:44 < Guest2089> and all my request.on('end' events would not fire
18:44 <@isaacs> scott_gonzalez: there are some git tricks we can use.
18:45 < Guest2089> unetil I add a request.on('data' listener
18:45 <@isaacs> scott_gonzalez: but really, it's no different than just squashing commits, which we do all the time anyway.
18:45 < Guest2089> is it intended ?
18:45 <@isaacs> scott_gonzalez: we want our history to tell a good story, not to be play-by-play journalism
18:45 <@isaacs> scott_gonzalez: good stories lie sometimes, and omit a lot of details.
18:45 < scott_gonzalez> isaacs: Sure, but the range of commits you're squashing for something like streams2 is probably massive compared to a normal squash, right?
18:46 <@isaacs> scott_gonzalez: well, as it is, we still have a lot of history in core for it.
18:46 <@isaacs> scott_gonzalez: and a --no-ff merge of like 30 commits or something
18:47 < Madz> Javascript seems like a nightmare to pass data around in
18:47 <@isaacs> Guest2089: I assume that you're Cyril.  Yes, you have to consume the stream before it starts flowing.
18:47 < Guest2089> I ma, my nick got changed
18:47 <@isaacs> Guest2089: http://blog.nodejs.org/2012/12/20/streams2/
18:47 < Guest2089> this wasn't the previous behaviour, right ? as of january
18:47 <@isaacs> Guest2089: v0.8 is different there, yes.
18:47 < Guest2089> ok
18:47 <@isaacs> Guest2089: please read (at least the tl;dr) http://blog.nodejs.org/2012/12/20/streams2/
18:47 < Guest2089> but GET requests have no data
18:47 < Guest2089> so this sounds strange
18:48 <@isaacs> Guest2089: yes, but you still have to either read() or .on('data') or .resume()
18:48 <@isaacs> Guest2089: readable streams are paused until you touch them
18:48 < Guest2089> ok thank you very much
18:48 <@isaacs> np
18:48 < Guest2089> i lost track of the changes and "accidentally" updated today ;)
18:48 < Guest2089> kind of spooky
18:48 <@isaacs> Guest2089: there's no way to fix broken semantics without changing semantics, unfortunately
18:49 < Guest2089> correct
18:49 < Guest2089> thanks for the heads up
18:49 < Guest2089> bye
18:50 < StephenS> woot
18:50 < StephenS> node is so popular?
18:50 < StephenS> Now Ive seen errrythin! Thank you for support over these years
18:52 < StephenS> Is there any support?
18:53 < niggler> what type of support StephenS?
18:53 < niggler> isn't that what joyent does
18:53 < CoverSli1e> the node firm does node support
18:53 < CoverSli1e> joyent just supports joyent products
18:53 < StephenS> hmm socket.io works on node.js am I right?
18:54 < CoverSli1e> of course there's plenty of free help available here
18:54 < Fishrock123> socket.io is a node.js module, yes.
18:54 < StephenS> ok
18:55 < Fishrock123> (not a core module, but through npm)
18:55 < StephenS> so I see db.query in node.js
18:55 < StephenS> isnt this client side language?
18:56 < StephenS> Is also if it is, is there any possibillity of sql injection?
18:57 < StephenS> Fishrock123, ?
18:58 < arnonate> Anyone have a good tutorial for getting up and running with express?
18:58 < Fishrock123> StephenS: ? for socket.io or the other stuff?
18:59 < arnonate> Other stuff
18:59 < StephenS> node.js
18:59 < StephenS> I see in nodetuts db.query in node.js
18:59 < StephenS> isnt that weoir
18:59 < StephenS> weird
18:59 < Fishrock123> StephenS: Node could be Server side or Client side.
18:59 < StephenS> hmmm so what is possibillity of sql injection
18:59 < Fishrock123> Example for client side would be the coffescript compiler.
18:59 < StephenS> or any other attack?
18:59 < CoverSli1e> node can be client side?
19:00 < Fishrock123> Technically yes, not in the browser though.
19:03 < niggler> CoverSli1e node-webkit
19:04 < Fishrock123> CoverSli1e: Or even https://github.com/hross/node-opengl
19:07 < CoverSli1e> well i guess that counts
19:10 < mscdex> lots of "client-side" node modules out there
19:11 < pachet> i blame browserify
19:11 < pachet> confusing the children
19:12 < zackiv31> whats everyones favorite logging utility for node?
19:12 < Pilate> console
19:12 < CoverSli1e> none
19:12 < pachet> redis
19:12 < CoverSli1e> listen to nodeup
19:13 < niggler> woah CoverSli1e what's with this console hate
19:14 < CoverSli1e> use console.* for debugging. it's way too slow for logging a running app
19:16 < mscdex> too slow?
19:16 < CoverSli1e> yes
19:17 < gkatsev> so, is all I need to replicate a private npm registry available https://npmjs.org/doc/registry.html and the links therein?
19:17 < korilo> CoverSli1e how would you log an app in production then
19:18 < CoverSli1e> usually i have a fs.WriteStream to a file
19:18 < korilo> ofc
19:18 < mscdex> and writing to a file is not slow?
19:18 < Fishrock123> Is that really faster than logging it?
19:18 < CoverSli1e> didn't say it wasn't
19:18 < niggler> write to a shared memory queue
19:19 < CoverSli1e> but if you trace through console.*
19:19 < mscdex> heh...
19:19 < niggler> im sure someone has done this
19:19 < substack> 16 milliseconds to do a single console.log('test') on my machine
19:19 < substack> agreed that is crazy slow
19:19 < CoverSli1e> it goes through all kinds of stuff to format it for humans
19:19 < substack> the formatting is fast
19:19 < CoverSli1e> and the fact that stdout blocks
19:19 < substack> it's the blocking call that is probably causing the slowness yes
19:19 < korilo> so fs.WriteStream is faster?
19:19 < pachet> write to redis
19:19 < pachet> join the pantheon of pros
19:20 < niggler> redis is slow
19:20 < substack> CoverSli1e: it should be possible to close the fd and reopen fd 1
19:20 < korilo> redis slw?!
19:20 < CoverSli1e> probably the ideal way is to do logging to a udp server somewhere
19:20 < Fishrock123> So shared mem > redis > fs > console?
19:20 < mscdex> 7 milliseconds for me
19:20 < mscdex> for console.log('hello world');
19:20 < FellowMD> I use this for logging: https://npmjs.org/package/speaker
19:21 < niggler> lol
19:21 < mscdex> 6-7
19:21 < korilo> interesting writing to an udp server 
19:21 < korilo> even if you *could* lose some data maybe
19:22 < Fishrock123> Write to a local UDP drone?
19:23 < mscdex> i think the formatting is adding the overhead
19:23 < mscdex> using process.stdout.write() manually i get < 1 ms
19:23 < substack> console.log takes 16ms, process.stdout.write takes 15 ms
19:23 < substack> for me on 0.8
19:23 < randomenduser> hello, using `.load some-file.js` in the repl I get "Failed to load:some-file.js", how can I see the errors associated with that attempt to load my file?
19:23 < mscdex> i'm on 0.10
19:23 < Fishrock123> mscdex: Are you using 0.10... oh. :P
19:24 < zackiv31> not sure if happy if i spawned a debate... lol @FellowMD... i looked that up
19:25 < superjoe> I'm looking for the default certificate authority list that node.js uses for ssl
19:25 < superjoe> I saw it recently, can't find it
19:25 < superjoe> anyone know where it is?
19:25 < deoxxa> it's the mozilla list, right?
19:25 < pachet> substack: linux? :[
19:25 < superjoe> found it: http://mxr.mozilla.org/mozilla/source/security/nss/lib/ckfw/builtins/certdata.txt
19:26 < superjoe> it was in the crypto api docs
19:28 < HankHendrix> hey there
19:29 < substack> CoverSlide, mscdex: interesting note in the docs: "They are blocking in the case that they refer to regular files or TTY file descriptors. In the case they refer to pipes, they are non-blocking like other streams."
19:29 < HankHendrix> I'd like to write a "fastest finger first" app using smartphones as buzzers
19:29 < substack> so if you log by writing to stdout and pipe to a non-tty for output it should be plenty fast
19:29 < CoverSlide> ok that's cool
19:30 < HankHendrix> I'm thinking of using Redis to store the answers as they come in from the buzzers...any thoughts?
19:30 < korilo> :D
19:30 < CoverSlide> still, if the difference between console.log and process.stdout.write is 6x the time, i say save console.log for debugging
19:30 < HankHendrix> would Redis be the quickest way to handle concurrent incoming data?
19:30 < substack> confirmed, I get a 2 ms speedup when I `| cat`
19:31 < CoverSlide> awesome
19:31 < substack> but it's still 13 ms
19:31 < substack> on my system process.stdout.write() is only 1 ms faster
19:31 < substack> 15 vs 16
19:31 < CoverSlide> hmm
19:32 < niggler> substack stap or dtrace or whatever
19:32 < niggler> see if the system calls are the same
19:33 < bnoordhuis> substack, niggler: they will be, console.log is a thin shim on top of process.stdout.write
19:34 < Fishrock123> Well, this is the console.log code: http://nodejs.org/api/process.html#process_process_stdout
19:34 < Fishrock123> It's the message plus the regex '\n'
19:34 < \n> hi
19:34 < CoverSlide> it used to be much fatter
19:34 < niggler> are you kidding me \n
19:35 < Fishrock123> CoverSlide: Oh, was it fatter in 0.8?
19:36 < \n> I just said hi :P
19:36 < pachet> a talking line return
19:36 < Fishrock123> lol
19:37 < CoverSlide> the fact that it calls util.format 
19:38 < niggler> something looks wrong with that definition
19:38 < niggler> console.log handles multiple arguments
19:40 < Fishrock123> niggler: Ouch, it *is* wrong: https://github.com/joyent/node/blob/v0.10.0-release/lib/console.js#L52
19:40  * niggler high-fives niggler
19:40 < CoverSlide> and util.format calls util.inspect, which in turn calls formatValue
19:40 < niggler> i guess "thin" refers to american-size
19:41 < Fishrock123> I'm surprised there isn't an un-formatted console.logRaw or something.
19:42 < niggler> that's process.stdout.write i guess Fishrock123
19:42 < CoverSlide> there's no need. process.stdout.write
19:42 < Fishrock123> I guess, but seems archaic.
19:43 < guidocalvano> substack: the solution I found to not having watch anymore (what you suggested  would not work in our setup) was this:
19:43 < guidocalvano> substack: while x=0; do browserify main.js -o index.js ; sleep 2; done
19:43 < CoverSlide> usually i'll just have a log function and that calls .write on a specific stream, either process.stdout, or a fs.WriteStream
19:43 < CoverSlide> guidocalvano: eww
19:43 < guidocalvano> CoverSlide: what? 
19:44 < guidocalvano> CoverSlide: it does exactly what I want
19:44 < CoverSlide> that code makes babies cry
19:44 < mscdex> console.log = function(s) { process.stdout.write(s); process.stdout.write('\n'); };
19:44 < mscdex> voila
19:44 < guidocalvano> CoverSlide: come on you're not a baby (: d:
19:44 < niggler> guidocalvano why not while 1 or something like that
19:44 < niggler> ((1))
19:44 < CoverSlide> i did like the old behavior of browserify where it could walk my require tree and watch for only those file changes
19:45 < guidocalvano> niggler: I copy pasted it of a forum
19:45 < StephenS> how to send query with socket.io ?
19:45 < StephenS> sql query
19:45 <@isaacbw> um?
19:45 <@isaacbw> SQL queries are text
19:45 < CoverSlide> .send
19:45 < CoverSlide> easy peasy
19:46 < CoverSlide> although the question is why do you want your client to be sending SQL queries
19:46 < guidocalvano> niggler: I was on a tight schedule, and being a "business programmer" I just got on with it (: As long as it is encapsulated I don't care what atrocious things happen. As long as its encapsulated. 
19:46 < StephenS> nvm db_query it is
19:46 < StephenS> somewhere I see db_query somewhere db.query
19:46 < StephenS> which one is?
19:47 < CoverSlide> none are part of node core
19:47 < niggler> lol guidocalvano i am glad to say i've never had the experience
19:47 < CoverSlide> they are calls to a library
19:47 < guidocalvano> anyhow… I have to run before security throws me out
19:47 < CoverSlide> db.query is probably what most libraries will use
19:47 < CoverSlide> as long as db gets defined
19:48 < Fishrock123> mscdex: Is f(s) { process.stdout.write(s); process.stdout.write('\n'); }; Really better than f(s) { process.stdout.write(s + '\n'); }; ?
19:48 < StephenS> how to call lib?
19:48 < guidocalvano> niggler: actually it is quite nice. they give you money for having fun (: And believe it or not, the hacking I did while working for a business actually did teach me a lot about programming
19:48 < niggler> sounds painful guidocalvano
19:48 < mscdex> Fishrock123: avoids a concatenation?
19:48 < Fishrock123> mscdex: Right.
19:48 < guidocalvano> niggler: I used to shiver at the idea, but now that I have a nice part time job its alright
19:48 < guidocalvano> hear security
19:48 < CoverSlide> well that would be a worthless benchmark to make
19:48 < niggler> Fishrock123 that would be worse because, if buffering were disabled, it would cause 2 writes
19:48 < guidocalvano> they are bloodhounds
19:48 < guidocalvano> tchau o/
19:49 < Fishrock123> niggler: Which would be worse?
19:49 < mscdex> the point is you can easily overwrite console.log to not do format parsing
19:49 < CoverSlide> he should change his name to guidovolcano 
19:49 < niggler> call overhead, i would imagine, would exceed string concat for small messages
19:49 < CoverSlide> because that's what i keep reading to myself
19:50 < CoverSlide> there is that v8 bug that has slow concats
19:51 < StephenS> so is socket.io already in node.js ?
19:51 < StephenS> I have installed node srv for win
19:51 < CoverSlide> you have to install it with npm
19:51 < mscdex> socket.no
19:51 < StephenS> Im testing node.js on win
19:51 < StephenS> so how to install it there?
19:52 < HankHendrix> you need to install linux first
19:52 < StephenS> I have linux
19:52 < HankHendrix> ;)
19:52 < mscdex> StephenS: `npm install socket.io`
19:52 < mscdex> or some such
19:53 < Fishrock123> niggler: You mean buffering on the stdout stream?
19:55 < tixe> hi all
19:56 < StephenS> mscdex, I did and its installing on win8 :D
19:56 < tixe> anybody using rabbitmq with node?
19:56 < CoverSlide> noone uses rabbitmq anymore
19:56 < CoverSlide> all the cool kids use 0mq
19:57 < tixe> cool
19:57 < tixe> nice to know
19:57 < tixe> let me check that out then
19:58 < CoverSlide> there's also https://github.com/postwait/node-amqp i guess
20:00 < ifandelse> tixe:  I've used it in a limited fashion with node. Have also done a decent amount of rabbitmq + C#. 
20:01 < tixe> ifandelse: how did that go?
20:02 < tixe> what clien module did you use?
20:03 < brettlangdon> tixe, I have a little before, I just used the amqp module
20:03 < tixe> brettlangdon: thanks. was going to use that. just curious to hear real experiences feedback
20:04 < brettlangdon> works fairly well
20:04 < ifandelse> tixe: I used https://npmjs.org/package/amqp.  Seemed to work pretty well on our end.
20:04 < brettlangdon> didn't get too indepth with it, we were just doing some prototyping
20:05 < ifandelse> tixe: the only thing I'd say is that I'd made a mental note to try and benchmark it compared to the C# client we were using, since it felt quite a bit slower - however, for our needs it was more than enough
20:06 < tixe> speed is not "that" important at this stage
20:08 < tixe> thanks a lot everyone
20:08 -!- mode/#Node.js [+o TooTallNate] by ChanServ
20:10 < Xerukm> I have a question, i'm trying to create a simple cms system, using jade and node-mysql, ive figured out how to do queries to the database and output them to the console, but how do I move that over to my jade templates so i can actually display data on the web page?
20:10 < Fishrock123> mscdex: : So, ran a simple test, seems decently faster to concat the line break rather than write a second time. :p
20:10  * AAA_awright cringe
20:11 < AAA_awright> Xerukm: You have to have all the data already in memory before you use a template, that's the whole point of a template
20:11 < OliverJAsh> I have an application which caches articles from RSS feeds. Currently, when the user requests to see articles, the application will ping the RSS feeds to check for new content and compare it with the cached date, merging the two. The request will run an asynchronous function which will cause the feeds to update, but immediately deliver the old content to the user. However, if the user tries to hit the API again, and
20:11 < stantonwjones> @Xerukum var template = require(my template)
20:11 < OliverJAsh> the feed updater is still running, it blocks the event loop… which I want to avoid.
20:11 < stantonwjones> @Xerukum page = mytemplate(data)
20:12 < stantonwjones> or something along those lines
20:12 < OliverJAsh> I'm thinking of making the feed updater into a worker process which I spawn. The trouble with that is, the process will need its own connection to the database, etc. I have to run all the boilerplate code again, because objects can't be shared.
20:12 < OliverJAsh> So I'm wondering, instead of having a worker process that is sparked on request, should I just have a single worker process in the background all the time, going through a queue of feeds and updating them?
20:12 < AAA_awright> OliverJAsh: It doesn't look like you need anything special for that... Do the RSS feeds include caching headers?
20:13 < AAA_awright> If they say "cache for 10 minutes" then respect that
20:13 < AAA_awright> But how do you "block the event loop"?
20:14 < OliverJAsh> AAA_awright: It looks like they have a date but sometimes this is null. Guess it depends whether the author has specified a last build date or not.
20:14 < context> you dont ?
20:14 < AAA_awright> OliverJAsh: null? You mean HTTP Date? That's a required header...
20:14 < OliverJAsh> AAA_awright: No, there is no cache header.
20:16 < prawnsalad> is there a "generally accepted" mongodb library for node?
20:16 < OliverJAsh> AAA_awright: I'm not sure how I block the event loop. I just had an asynchronous function that would parse the RSS feeds and then merge the old content with the new. This function was triggered by an API request to say /api/articles. However, if the user tried to hit that API endpoint again whilst the feed updater function was still running from the previous request, the page would take an age to load while the feed
20:16 < OliverJAsh> updater from the previous request finished.
20:17 < AAA_awright> How long to load the feed?
20:19 < samholmes> the cookie module doesn't work in IE8 and lower because it's using forEach loops
20:19 < samholmes> Is there a version of the cookie module that would be better suited for the browser-land?
20:20 < OliverJAsh> AAA_awright: It can take 5-10 seconds to parse a feed.
20:20 < AAA_awright> OliverJAsh: What computation are you doing that takes 5-10 seconds?
20:20 < OliverJAsh> That is, to download the XML, compare it with the data currently cached, and merge the two.
20:20 < OliverJAsh> AAA_awright: ^
20:20 < AAA_awright> That's not computation
20:21 < AAA_awright> Or you need a better merging algorithm
20:21 < AAA_awright> OliverJAsh: Paste some code?
20:21 < MI6> joyent/node: Nathan Rajlich master * da8b0ee : console: `console.dir()` bypasses inspect() methods  Use the `customInspe - http://git.io/8OJCWw
20:21 < OliverJAsh> https://gist.github.com/OliverJAsh/ee5d639491e77ee4d227
20:22 < MI6> joyent/node: Nathan Rajlich master * 66280de : util: custom `inspect()` method may return an Object  This is more like h - http://git.io/HSmybQ
20:22 < OliverJAsh> AAA_awright: You give a feed URL to the getFeed function
20:23 < AAA_awright> OliverJAsh: You're missing semicolons all over the place
20:23 < OliverJAsh> AAA_awright: And here is how the module is triggered in the API https://gist.github.com/OliverJAsh/2a295a2936e1bd4a1fb8
20:23 < OliverJAsh> AAA_awright: Style preference.
20:23 < AAA_awright> I can tolerate two-space indents, but semicolons are really necessary
20:24 < AAA_awright> There's no easy way of judging if the expression ends on that line or not, without them
20:24 < OliverJAsh> AAA_awright: I work in a Node house that has done hundreds of projects. That's the decision they made.
20:24 < AAA_awright> Change it
20:24 < OliverJAsh> AAA_awright: I will once I get this sorted :P
20:26 < shesek> AAA_awright, the ASI rules are actually quite simple
20:26 < AAA_awright> shesek: So?
20:27 < OliverJAsh> AAA_awright: Do you have any idea what is blocking?
20:27 < bradleymeck> AAA_awright: there are arguments for both. <- notice the period
20:27 < MI6> joyent/node: Fedor Indutny master * 68487a7 : crypto: replace BIO_free with BIO_free_all  From OpenSSL's documentation: (+3 more commits) - http://git.io/8L20aA
20:27 < AAA_awright> bradleymeck: I don't follow
20:27 < shesek> so knowing them is an easy way to judge whether the expressions ends on that line or not
20:28 < DTrejo> return
20:28 < DTrejo> {hi:everyone}
20:28 < CoverSlide> AAA_awright: all your sentences are missing periods
20:28 < DTrejo> => return undefined
20:28 < AAA_awright> CoverSlide: Just periods!
20:28 < DTrejo> that's basically the only one that ever matters
20:28 < CoverSlide> DTrejo: also if you begin a line with an array or a parenthetical
20:28 < pachet> AAA_awright: better not be pregnant
20:29 < AAA_awright> If I needed to continue on the next line...
20:29 < AAA_awright> I'd have an ellipses
20:29 < CoverSlide> that's one that easy to trip up on too
20:29 < OliverJAsh> Lesson: don't come looking for help on IRC if your JavaScript doesn't have any semicolons, golly gosh \o/
20:29 < AAA_awright> And actually I'd normally include a period there.
20:30 < stantonwjones> Oliver: where is the dl happening, I'm guessing that's where the slow is happening
20:30 < AAA_awright> OliverJAsh: What's the purpose of formatArticle
20:30 < OliverJAsh> AAA_awright: strips away loads of redundant data that is returned from feedParser
20:30 < OliverJAsh> stantonwjones: https://gist.github.com/OliverJAsh/ee5d639491e77ee4d227#file-gistfile1-txt-L48
20:31 < AAA_awright> OliverJAsh: And why is that necessary
20:31 < AAA_awright> (It's not)
20:31 < OliverJAsh> AAA_awright: Because I later save the article in my database and I don't want loads of crap in there I don't need, so yes it is.
20:32 < AAA_awright> If it's getting inserted into a database, that's a better reason
20:33 < stantonwjones> I can't measure it from here, but if rue waiting to return a response until after you've retrieved data from a remote source, that's probably slowing things
20:33 < stantonwjones> put updates in a daemon, or delegate immediate viewing clientside
20:34 < OliverJAsh> stantonwjones: That was what I proposed initially, making it into a worker process that is spawned.
20:34 < AAA_awright> That shouldn't be possible
20:34 < AAA_awright> There's no such thing as blocking network I/O
20:34 < stantonwjones> there is if you're response call is in a callback
20:35 < stantonwjones> and rue sending it all at once
20:36 < stantonwjones> the alternative would be to pump data to the client as it comes
20:36 < OliverJAsh> stantonwjones: That would still require a daemon?
20:37 < AAA_awright> stantonwjones: I'm not familiar with that, that blocks?
20:38 < OliverJAsh> stantonwjones: My problem with making this into a daemon is that it will require its own database connection, etc. Rather than starting the daemon with every request, it therefore seems more efficient the start the daemon with the application (once only) and delegate tasks to it.
20:38 < AAA_awright> This shouldn't need a seperate process
20:38 < AAA_awright> Now I'm a big fan of splitting up things into seperate services with HTTP APIs
20:38 < AAA_awright> But this isn't it
20:39 < OliverJAsh> AAA_awright: Currently I don't see another way to avoid this "blocking," however it is occurring.
20:39 < AAA_awright> It could just be a database backlog
20:39 < stantonwjones> well, you can design your app to write to the response incrementally after a request
20:39 < AAA_awright> In which case a seperate process isn't going to help you, Mongo simply isn't going to serve that request no matter where it comes from
20:40 < AAA_awright> OliverJAsh: How many database requests are you making?
20:40 < stantonwjones> but if you go the daemon route, not spawning them dynamically is the way to go
20:40 < OliverJAsh> AAA_awright: I don't believe that can be the problem. My database is local. You're right, it could be, but I very much doubt it.
20:41 < AAA_awright> OliverJAsh: If you only have a single database process running, even more reason
20:41 < AAA_awright> You've got an index problem, or something
20:41 < AAA_awright> See if you can do any database metrics
20:42 < OliverJAsh> stantonwjones: Writing the response incrementally? I'm not quite sure what you mean.
20:43 < OliverJAsh> AAA_awright: stantonwjones seems to think that the network I/O is blocking because I have a response call in a callback.
20:43 < stantonwjones> waiting is the more accurate term
20:43 < AAA_awright> I'm not sure what that means
20:44 < stantonwjones> render your page, and long poll or web socket for updated results
20:44 < AAA_awright> OliverJAsh: Do you have an index on title?
20:46 < OliverJAsh> stantonwjones: Umm, I think web sockets is out of the question?! I'm not looking to provide the client with the update details. My problem is just that the API endpoint will not render until the getFeed function that has been invoked perviously (and is still running). What data displays at the end of it is out of the question.
20:46 < OliverJAsh> AAA_awright: Nope, but I can look into it.
20:48 < OliverJAsh> AAA_awright: Thinking about it, I don't want it to be an index. It's not truly unique.
20:48 < AAA_awright> OliverJAsh: index has nothing to do with unique...
20:49 < AAA_awright> That's just the difference between O(n) time and O(lg n) time
20:49 < AAA_awright> OliverJAsh: How many documents are in that collection?
20:50 < OliverJAsh> AAA_awright 148 currently.
20:50 < AAA_awright> hmm
20:50 < AAA_awright> If it were closer to 100000 I'd believe that delay
20:50 < AAA_awright> Still, you need an index
20:53 < OliverJAsh> AAA_awright: Thanks, I'll do that.
20:53 < OliverJAsh> AAA_awright: Still no idea what this blockage is, haha. Must be the "response call".
20:53 < AAA_awright> I don't see anything
20:53 < AAA_awright> But I don't see any network code either
20:54 < AAA_awright> OliverJAsh: "          if (err && callback) callback(err);"
20:54 < AAA_awright> There needs to be a return in there
20:55 < AAA_awright> and if you're going to test for callback, it should probably be "typeof callback=='function'"
20:55 < AAA_awright> And that should be after the test for err... that would mean if there's no callback, you don't die on an error
20:55 < AAA_awright> That's Not a Good Thing
20:56 < OliverJAsh> AAA_awright: Good feedback
20:56 < OliverJAsh> AAA_awright: Cheers. You don't see any network code? There's actually two network request functions.
20:56 < stantonwjones> response call = response.write; response.end / response.send, etc
20:57 < OliverJAsh> https://gist.github.com/OliverJAsh/ee5d639491e77ee4d227#file-gistfile1-txt-L48
20:57 < AAA_awright> OliverJAsh: Yeah... just, I mean, if something is wrong I wouldn't be able to know
20:57 < OliverJAsh> AAA_awright: And https://gist.github.com/OliverJAsh/ee5d639491e77ee4d227#file-gistfile1-txt-L48
20:57 < OliverJAsh> Oh right.
20:57 < brianc1> question: is there a way to get "the active domain" at any given point?
20:57 < AAA_awright> OliverJAsh: If you're downloading that URL I'd suggest naming that function "Dereference" instead of "parse"
20:58 < brianc1> say I'm 5 levels deep in a callback & the top level has been bound to a domain (verified by catching an error from level 5 at the domain) - how do I from level 5 callback say "what domain am I in?"
21:01 < FellowMD> @brianc1 why do you want that? I haven't used domains yet but that seems like something that might lead to confusing switch statements frequently
21:01 < brianc1> the answer is 'process.domain'
21:01 < brianc1> I want to add it to my logger
21:01 < brianc1> so every log statement logs the active request (if there is one) 
21:01 < brianc1> without having to pass the request to every single level of everything i do
21:04 < stantonwjones> i like that^
21:05 < stantonwjones> but, reading that code could be very difficult
21:06 < stantonwjones> unless everyone is use to the pattern
21:07 < naomi> deoxxa: NIENER NIENER I BUILD ON NODE-0.10.0 https://github.com/naomik/burro
21:07 < naomi> FINALLY
21:09 < deoxxa> +1
21:09 < LuckyBurger> lol
21:09 < korilo> backy!
21:09 < korilo> backy!ù
21:09 < korilo> backy!
21:09 < LuckyBurger> i should upgrade, but i forgot where i put the node binaries and whatnot
21:09 < korilo> backy!
21:09 < korilo> backy!
21:09 < korilo> backy!
21:09 < korilo> backy!
21:09 < korilo> backy!
21:09 < korilo> backy!
21:09 < korilo> j
21:09 < LuckyBurger> zzz spammers
21:10 < mbalho_> korilo: dont do that kthxbai
21:10 < naomi> LuckyBurger: whatever
21:11 -!- mode/#Node.js [+o mbalho] by ChanServ
21:11 < naomi> you're just jealous, bru
21:12 < LuckyBurger> :(
21:12 < kevindish> hi
21:12 <@mbalho> naomi: would burro be browserifiable?
21:12  * mbalho looks at dependencies
21:12 < deoxxa> mbalho: if streams2 is
21:12 < naomi> mbalho: you will see there are none!
21:13 <@mbalho> naomi: well i mean does it require('zlib') or anything
21:13 < naomi> nope!
21:13 < kevindish> Does somebody know what i equal to break in a express.js route? Like i just want to exist the route execution.
21:13 < naomi> interesting though, that might be a cool option for burro
21:13 < DTrejo> kevindish: what are you trying to do?
21:13 < Nuck> Just return
21:13 < shesek> kevindish, if you don't call next(), the rest of the middlewares aren't called
21:13 <@mbalho> naomi: it looks like it should *just work*
21:13 < naomi> mbalho: burro.wrap(myStream, {gzip: true})
21:14 < shesek> if you just want to stop the current route from executing, just returns from it
21:14 < Nuck> kevindish: Just return to kill the pageload, but if you want to continue and render an error page, just, well, render that
21:14 < shesek> * return
21:14 < naomi> mbalho: yeah that's kind of the point, burro just gives you object streams that *just work*
21:14 < naomi> steve jobs style :{
21:14 < naomi> :P *
21:14 < naomi> lol
21:14 <@mbalho> hah
21:14 < kevindish> Okay, thanks, i will try that.
21:15 < kevindish> Been looking in the documentation on express.js but it does not say that much sadly.
21:16 < LuckyBurger> what version of python does node 0.1 req ?
21:16 <@mbalho> naomi: imo it would be better to just document var socket = burro.wrap([duplexStream]); socket.pipe(zlib.createGzip());
21:16 < naomi> mbalho: that's a good point
21:16 <@mbalho> naomi: more composable that way
21:16 < kevindish> Both return and next does not prevent the rest of the current route to be executed.
21:17 < kevindish> It is because i have multiple res.render
21:18 < naomi> mbalho: these things would be great to add as examples in the README, thank you 
21:18 <@mbalho> naomi: also LOL @ https://github.com/naomik/hiccup#example
21:18 < naomi> mbalho: now you're just stalking me
21:18 < naomi> hiccup was very fun to write
21:19 < naomi> and now that travis is building 0.10.0, i can add a build here too
21:19 < LuckyBurger> *ERROR* File "./configure", line 433     fpu = 'vfpv3' if armv7 else 'vfpv2' SyntaxError: invalid syntax
21:19 < LuckyBurger> sigh all naomi's fault :(
21:19 < naomi> what!
21:19 < bnoordhuis> LuckyBurger: node 0.1 or 0.10?
21:19 < naomi> LuckyBurger: i didn't do anything to you!
21:19 < LuckyBurger> 0.10 *
21:20 < bnoordhuis> the latter requires python 2.6 or 2.7 (as documented in the README)
21:20 < LuckyBurger> i have 2.7 ?
21:20 < LuckyBurger> and 3.0
21:20 < LuckyBurger> :X
21:20 < bnoordhuis> LuckyBurger: python2.7 configure && make PYTHON=python2.7
21:20 < LuckyBurger> ^
21:20 < LuckyBurger> ah yeah
21:21 < LuckyBurger> derp forgot
21:25 < LuckyBurger> love it when i run out of memory :D
21:27 < faceleg|work> daddy how long will it take me to become a vim master
21:28 < LuckyBurger> forever
21:28  * LuckyBurger hates vim... runs away
21:28 < ningu>  /LuckyBurger dd :wq
21:28 < LuckyBurger> nooo
21:28 < TheEmpath> lol
21:29  * LuckyBurger cries
21:29 < faceleg|work> ningu: what a noob
21:29 < faceleg|work>  /LuckyBurger dd >x
21:29 < pachet> faceleg|work: to learn vim is my real test, to macro is my cause
21:29 < faceleg|work> dammit
21:29 < willwh> vim ftw <3
21:29  * LuckyBurger likes pico/nano :D
21:29  * willwh throws poo @ LuckyBurger 
21:30 < willwh> yuck
21:30 < faceleg|work> my rsi is getting worse and worse
21:30 < faceleg|work> so attempting to learn vim to remove mouse actions
21:30 < faceleg|work> as much as possible
21:30 < ningu> what is >x?
21:30 < LuckyBurger> i only use command line linux :x
21:30 < willwh> faceleg|work: https://news.ycombinator.com/item?id=1484280
21:30 < bnoordhuis> faceleg|work: pro tip: vimperator
21:30 < willwh> bnoordhuis: yuuuuuus
21:31 < ningu> bnoordhuis: huh, cool... but I use chrome.
21:31 < ningu> I wonder if firefox has chased chrome enough to be worth using again.
21:31 < faceleg|work> ningu: I meant :x, whichi s :wq
21:31 < ningu> faceleg|work: oh, right.
21:31 < faceleg|work> willwh: hahahahaaha
21:31 < livinded> LuckyBurger: I touch wires together to enter characters into my pty in morse code and use LEDs to read the output in binary!
21:31 < willwh> ningu: yes it is
21:32 < willwh> and funny you say that
21:32 < willwh> I installed FF again yesterday
21:32 < willwh> man
21:32 < willwh> what an improvement!
21:32 < ningu> the rapid release cycle kind of throws me off. it's strange.
21:32 < willwh> meh
21:32 < faceleg|work> willwh: I cant use anything else for JS debugging
21:32 < willwh> the only thing that sucks about ff over chrome
21:32 < ningu> of course, in chrome you don't even pay attention to releases really at all
21:32 < livinded> ningu: how does a rapid release cycle throw you off?
21:32 < willwh> is the SSH client for the browser (firessh) sucks compared to SecureShell for chrome
21:33 < willwh> I work on windows machines to often
21:33 < willwh> :(
21:33 < ningu> livinded: well, if the version number is considered important -- which it historically has been for netscape, safari, firefox, ie, etc. -- then it's strange to check back in 3 months later and have skipped 3 major version.
21:33 < ningu> why do you need an ssh client for the browser?
21:33 < willwh> I don't need one, but it's handy
21:34 < livinded> I run chrome canary and have no idea what version I'm ever running
21:34 < livinded> why does it matter?
21:34 < ningu> I always use putty on windows
21:34 < LuckyBurger> [root@server node-v0.10.0]# node -v v0.10.0 :D
21:34 < willwh> putty kinda sucks :>
21:34 < LuckyBurger> w00t
21:34 < willwh> ningu: if you're using chrome, check out secure shell
21:34 < willwh> it's pretty nice
21:34 < ningu> livinded: well, it used to be more important what version of firefox you had. so it's just a shift. plus, they put the number front and center whereas in chrome it's hidden
21:34 < ningu> livinded: I'm not saying it's a very substantial criticism.
21:34 < echo> I despise putty. If at all possible, I avoid working on windows, but when it's required, I install cygwin.
21:35 < ningu> what's wrong with putty? I don't even notice it. which to me is what I want from a terminal.
21:35 < ningu> I mean, I avoid working on windows too. so it's not an everyday thing.
21:35 < samholmes> Is component an alt. to browserify?
21:35 < LuckyBurger> i use putty...
21:35 < samholmes> Or do you use components along-side browserify
21:35 < samholmes> ?
21:35 < ningu> what I like about putty is you just download the exe and don't install it
21:35 < LuckyBurger> whats wrong with Windows?
21:35 < LuckyBurger> ^
21:36 < willwh> also ningu: http://vimium.github.com/
21:36 < ningu> and since I tend to be using windows on someone else's machine that's good
21:36 < willwh> well if you use chrome -> and sign in your google account
21:36 < willwh> secure shell ftw
21:36 < echo> I deal a lot in screen sessions, it's highly volatile in that environment. It also doesn't support the keybindings I use most.
21:36 < tjholowaychuk> samholmes: alt however they're pretty similar with the latest browserify stuff, we have #components if you have questions
21:36 < ningu> echo: what keybindings are specific to the terminal rather than the shell?
21:37 < ningu> echo: the screen issue seems like a serious one. I don't recall trying.
21:38 < AAA_awright> Where's marcello3d when you need him
21:38 < AAA_awright> Oh hi
21:39 < faceleg|work> tmux > screen
21:39 < faceleg|work> echo
21:40 < AAA_awright> marcello3d: I'm trying to figure out how to use mongolian without making the isMaster request to the server, it's returning 10.* intranet addresses and I want to ignore those, and only use the connection that I specified
21:41 < korilo> yo
21:45 < faceleg|work> heh, turned off arrow keys in vim
21:45 < faceleg|work> familiarity with hjkl improved already
21:45 < faceleg|work> rsi gone
21:45 < faceleg|work> cure for cancer coming up
21:47 < pachet> faceleg|work: lemme know when you're done
21:47 < pachet> had a drag from a cigarette that went down the wrong way
21:47 < zeromodulus> In a node stack trace, why are two numbers listed after the filename? Which one is the actual line number? Or is it like, a range of line numbers?
21:48 < pachet> line, character
21:48 < zeromodulus> ah.
22:00 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
22:01 < mrvisser> hmm, anyone know of a way I can just close an http connection using express.js? I don't want to send an error code or anything, just bring down the axe
22:01 < FellowMD> You have to send *something* to close it on the other side
22:02 < FellowMD> response.send(400)
22:02 < AAA_awright> mrvisser: response.socket.close
22:05 < faceleg|work> or 204 if everythign is ok but you don't want to send anything else
22:06 < [conrad]> Hello everyone. Really like the product. Have a quick question regarding the "asynchronous" terminology, as it's used in Node. My asynchronous background is largely from the signals and slots available in Qt ( the C++ framework ), and I'm noticing a bit of a discrepancy between the two implementations. In a Qt project, the equivalent of the "Hello world" example on the http://nodejs.org/ page , if you stacked 4 asynchronous methods 
22:06 < [conrad]> on top of each other in a function, you could write to the socket and close it before those methods completed. I'm finding this is not the case with Node. While the methods are non-blocking, they all have to complete before I'm able to send the response. Is this to be expected?
22:06 < [conrad]> A small/minimal example can be found at http://pastie.org/6465381. I'm finding when running this that no matter the limit of i, I get all outside items logged, before a single inside item is logged.  In Qt, unless you did something to keep the application loop open somehow, the equivalent of that snippet would return almost instantly ( granted, having a majority of the items never execute ).
22:08 < mrvisser> AAA_awright: weird, if I do that I still get a 500
22:08 < AAA_awright> mrvisser: 500 Internal Server Error? Who is sending that response, maybe a proxy?
22:09 < mrvisser> AAA_awright: might try and close the request: http://stackoverflow.com/questions/7210313/how-to-close-a-request-in-nodejs
22:09 < AAA_awright> It's the same socket
22:09 < mrvisser> AAA_awright: I'm pretty sure I have something in the stack that may catch it. I wonder if I'll have to update the stack then
22:09 <@mbalho> [conrad]: for loops execute immediately and do not throttle at all, whereas the conn.query function is async and will queue up immediately but may take a long time before it finishes
22:10 < mrvisser> oh, I had an uncaught exception, #socket has no method "close"
22:10 <@mbalho> [conrad]: what you are doing in that code is putting 10,000 database queries into a big queue which is just a bunch of CPU operations but the queries themselves are I/O which means they are really really slow
22:10 < jocafa> nginx has a lovely 444 that just hangs up
22:11 < lrvick> So my mind is blown right now. using grunt-connect to serve files here: http://udderweb.com:9998/test/ however runner.js 404s, but then if you access runner.js directly it is there.
22:11 < zeromodulus> is next(req, res) abusing the next function?
22:11 < lrvick> I am not crazy and have had coworkers verify.
22:11 < lrvick> I. Don't. understand.
22:12 < zeromodulus> I have these two routes, both of which load req.params.id with an int, and then call a simple route for rendering a page displaying that parameter.
22:13 < zeromodulus> But the final display route never gets called.
22:13 < [conrad]> mbalho: Thanks for the input, though I apologize as I'm not sure how that relates to my original question. Let me try and rephrase based on your answer. Why can't I write() and end() while that "queue" is still processing?
22:13 < zeromodulus> I'm passing in these "loader" routes as middleware.
22:14 < zeromodulus> `app.get('/foo/load', routes.foo.load, routes.foo.show);`
22:14 < ningu> zeromodulus: you aren't using next correctly.
22:14 < zeromodulus> I figured as much :p
22:14 < ningu> zeromodulus: you pass next just one argument, an error. or none if no error.
22:15 < zeromodulus> I thought next was a reference to the middleware I was passing.
22:15 < ningu> no, it means continue to the next route.
22:15 < ningu> I mean, to the next method in the route.
22:15 < zeromodulus> so, the middleware?
22:15 < ningu> if you want to finish handling the request in the method then you don't call next.
22:15 < zeromodulus> or the next occurring route by order of definition?
22:15 < ningu> no, it isn't middleware. middleware is generally called before your route.
22:15 < ningu> yes, that.
22:16 < ningu> middleware and routes take the same arguments though. it comes down to the same thing really.
22:16 < ningu> anyway, the semantics of next() is always the same which is next() to continue without error, next(err) to pass an error.
22:16 < zeromodulus> hm...
22:16 < korilo> next(404) too
22:16 < ningu> and don't call next if you want to finish in that method.
22:17 < ningu> yes, that too :)
22:17 < korilo> i use it in my express code to catch 404 in production :P
22:17 < zeromodulus> so, I have these routes that should pretty much just load a few params and then redirect to a specific route, how should I do that?
22:17 < marcello3d> AAA_awright: I don't think there's a way to do that on mongolian today
22:17 < ningu> redirect as in http redirect?
22:17 < zeromodulus> and pass the params as well.
22:17 < zeromodulus> yeah, I guess.
22:17 < ningu> zeromodulus: do you want to do this for all routes, or what?
22:17 < marcello3d> AAA_awright: you might be able access the connection code directly and do your own connection management
22:18 < ningu> zeromodulus: if for all routes then you want middleware.
22:18 < zeromodulus> no, not all.
22:18 < ningu> oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
22:18 < zeromodulus> well, I don't really know.
22:18 < ningu> blah
22:18 < AAA_awright> marcello3d: Hmm alright, that's blocking me from importing data into a remote database
22:18 < ningu> my keyboard needs to be fixed
22:18 < AAA_awright> marcello3d: I'd use the addServer method, but that's not a public method, for some inexplicable reason
22:18 < zeromodulus> oh, I thought you saw something shiny.
22:18 < ningu> zeromodulus: app.get('/foo', one, two);
22:19 < ningu> function one(req, res, next) { /*load some stuff*/; next() }
22:19 < zeromodulus> that should do a redirect behind the scenes, shouldn't it?
22:19 < AAA_awright> A ton of these functions should be assigned to Server.prototype
22:19 < AAA_awright> but aren't
22:19 < ningu> zeromodulus: not an http redirect at all.
22:19 < marcello3d> yea, unfortunately mongolian is pretty primitive in its connection management functionality
22:19 < ningu> an http redirect is an instruction to the client (i.e. browser)
22:19 < AAA_awright> marcello3d: I'd send pull requests but... no semicolons ;_;
22:19 < marcello3d> that code was intentionally private to avoid having to support it when the connection management stuff was eventually added
22:20 < zeromodulus> I want the user to hit a URL, '/foo/load', which behind the scenes, creates an object, stores it, and then the next step is the user should see that object in its web representation.
22:20 < marcello3d> but the project is currently on hiatus, since I'm not really using mongo anymore---feel free to fork
22:20 < marcello3d> no semicolons is the best! :D
22:20 < AAA_awright> Well I'll fork the Git repo, but unfortunately npm both sees a lot of use and doesn't like forks
22:21 < AAA_awright> marcello3d: Semicolons help people determine when expressions continue to the next line! :D
22:21 < ningu> zeromodulus: ok. and why do you need two route methods for that?
22:21 < ningu> are you trying to reuse the same code in multiple routes?
22:21 < zeromodulus> 1. user hits '/foo/start' 2. '/foo/start' creates an instance of an object, stores it. 3. user gets redirected to '/foo/:id' with the id of the newly created instance as req.params.id.
22:22 < marcello3d> AAA_awright: fair enough
22:22 < AAA_awright> marcello3d: Do you have any resources on what you mean by connection management?
22:22 < ningu> oh. well in that case yes, you need an http redirect.
22:22 < AAA_awright> Like, "prefer slave" etc?
22:22 < marcello3d> AAA_awright: there's no pooling or control over what commands go to slaves/master
22:22 < marcello3d> yea
22:22 < ningu> app.get('/foo/start', function(req,res,next) { /* do stuff */; res.redirect('/foo/' + id) }
22:22 < marcello3d> no timeout or redundancy verifying either
22:22 < AAA_awright> I don't know if the Mongo shell implements those at all, does it?
22:22 < zeromodulus> because the user should be able to either create a new 'foo', find a 'foo', or go straight to a specific 'foo'.
22:22 < marcello3d> I don't think it used to, but I haven't really used mongo since 1.8.x
22:23 < zeromodulus> ningu: awesome, thanks.
22:23 < marcello3d> the other reason I stopped working on it is 10gen decided to officially support mongodb-native
22:23 < ningu> zeromodulus: then write a separate route for app.get('/foo/:id'), and from that route you won't care how the user got there, just handle it.
22:23 < AAA_awright> fuuuuu
22:23 < marcello3d> which I think was a major mistake, but made me question my reliance on mongo
22:23 < zeromodulus> k, got that part so far. :p
22:24 < ningu> zeromodulus: if you want to have several methods for *one* route i.e. for one url the user will request, you do it the way you were doing before and use next().
22:24 < ningu> that's also often useful.
22:24 < marcello3d> also, databases are boring :)
22:24 < ningu> life is boring
22:24 < AAA_awright> Waterfall code... waterfall code as far as the eyes can see
22:24 < ningu> AAA_awright: niagara falls?
22:24 < zeromodulus> ningu: ah, but that's not what I needed for my case, right? that's like, middlewaresy stuff, right?
22:25 < ningu> zeromodulus: yes, basically, but you can also specify it per-route if you want
22:25 < AAA_awright> ningu: humongo falls
22:25 < ningu> app.get('/foo', loadStuff, handleFoo) where loadStuff might appear in some, but not all, routes.
22:25 < zeromodulus> does next call next in line middleware too? in addition to routes?
22:25 < ningu> zeromodulus: yes, it's all one chain
22:26 < zeromodulus> cool.
22:26 < ningu> you specify it with a series of app.use(), it adds each new call to the end of the chain
22:26 < daekano> super useful for authentication filters <3
22:26 < AAA_awright> marcello3d: And what's your thoughts on breaking changes if any should be made, release 2.0?
22:27 < zeromodulus> yay! it's working. n_n
22:27 < marcello3d> AAA_awright: yup
22:28 < ningu> zeromodulus: the lines in app.js calling bodyParser and whatnot show you the middleware and in what order it will be invoked. app.router will call your routes. usually at or near the end.
22:28 < marcello3d> or 0.3.x
22:28 < ningu> static is after router, so if you have a route with the same url as a file, it picks the route and not the file
22:28 < ningu> but you can do it the other way too
22:28 < zeromodulus> so that's like, an outline of the whole express chain?
22:29 < ningu> yes, and you can change it however you want
22:29 < zeromodulus> it's internals.
22:29 < ningu> the defaults are generally good though
22:29 < zeromodulus> whoa, cool.
22:29 < rfgarcia> has anyone been able to push a node app running 0.10.0 out to heroku?
22:29 < rfgarcia> getting all sorts of errors
22:29 < ningu> zeromodulus: yeah, before you call app.use() basically nothing will happen to a request, it just sits there probably
22:29 < ningu> you can add in or take out those statements or reorder them
22:30 < ningu> but some orders will be fairly useless like putting bodyParser after router
22:30 < zeromodulus> oh, that's pretty neat.
22:32 < daekano> oh hey, that's news to me
22:32 < daekano> cool
22:32 < AAA_awright> marcello3d: Oh I see... I'd release 1.0.0, then people can start to know if there's any API breakage or not. Perhaps I'll begin by exposing addServer
22:32 < daekano> (about the express chain)
22:32 < ningu> daekano: yeah, express is pretty lightweight and easy to mess with
22:33 < ningu> not a lot of magic hidden under the hood
22:33 < daekano> it's beautiful *sniff*
22:33 < ningu> hehe
22:33 < ningu> just tell that to tj and he'll tell you all the reasons it sucks
22:33 < daekano> hah
22:33 < daekano> if you are happy with the code you wrote 6 months ago, you're not learning enough.
22:33 < ningu> tjholowaychuk: why does express suck again?
22:34 < AviMarcus> "Everything Should Be Made as Simple as Possible, But Not Simpler."
22:34 < AviMarcus> I like non-magic readable stuff.
22:34 < ningu> yeah, I've rarely found large libraries that hide things that are well-designed enough that I don't get frustrated using them.
22:34 < zeromodulus> Is there a way to define like, class methods, nested in the class definition?
22:35 < tjholowaychuk> haha there's lots of things I dont like about it, but those things are pretty minor, we have a lot larger things to worry about
22:35 < AAA_awright> marcello3d: I'd like to see improvements continue to use the mongolian name (really, I'd like to see it be "mongo" but stupid namespace issues, but whatever), will you be around to review and release?
22:35 < zeromodulus> I guess this.foo = function(){} defines an instance method.
22:35 < ningu> zeromodulus: that defines a method for that instance only, not all instances
22:35 < zeromodulus> but Bar.foo = function () {} does a class method, but I'd rather not have the method definition outside of the class, O.o
22:35 < ningu> zeromodulus: modify prototype if you want all instances to have it
22:35 <@mbalho> zeromodulus: function Thing(){}; Thing.prototype.foo = function(){}; new Foo()
22:35 < ningu> Bar.prototype.foo
22:36 <@mbalho> oops meant new Thing()
22:36 < zeromodulus> right, but can I do that from inside the class itself?
22:36 < zeromodulus> just as an organizational thing.
22:36 < CoverSlide> inside what class?
22:36 < ningu> what does "from inside the class itself" mean?
22:36 <@mbalho> zeromodulus: this.prototype.foo = function() {} but that is messier
22:36 < zeromodulus> In Ruby I'm familiar with the terms instance method and class method.
22:36 < CoverSlide> there is nothing "inside the class"
22:37 <@mbalho> zeromodulus: its usually a bad idea to nest code like that
22:37 < sg> so i just downloaded etherpad to try and understand exactly how a node server app works, and i'm curious...how do you "host" a node app locally?
22:37 < sg> as in how do you set up a daemon process etc
22:37 < zeromodulus> mbalho: O.o?
22:37 < CoverSlide> there is "inside the constructor" but that's a bad idea
22:37 < zeromodulus> Isn't it good to keep related code together though?
22:37 <@mbalho> zeromodulus: put it in node module
22:37 < ningu> sg: generally with something like forever
22:37 < daekano> zeromodulus: you have your constructor function which sets up every new instance, which is on its own, and then you extend its prototype using Class.prototype = { // methods }
22:38 < CoverSlide> zeromodulus: you may want to look at http://addyosmani.com/resources/essentialjsdesignpatterns/book/ to find ways to organize your javascript code
22:38 < zeromodulus> I mean, this function is pretty much going to return instances of the object.
22:38 < ningu> zeromodulus: see what daekano said
22:38 < zeromodulus> huh, that seems kind of weird considering my Ruby background, but, okay.
22:38 < sg> ningu: so node apps aren't deployed in a manner like php? (aka with apache or a similar web daemon)
22:39 < CoverSlide> but there's no class Thing {method,method,method} in javascript yet
22:39 < zeromodulus> like, this method doesn't rely on an instance at all, it basically finds and returns an instance, so, seemed like it would make sense to put it in the constructor function?
22:39 < ningu> sg: sure, you can do that. but you just asked about how to run it in the background. you generally would use apache or nginx as a reverse proxy
22:39 < daekano> zeromodulus: http://jsfiddle.net/ArppF/
22:39 < daekano> I forgot to pass paper its data object, but you get the point.
22:40 < ningu> zeromodulus: that's not how objects in js work. it has a different object model.
22:40 < zeromodulus> hm, okay.
22:40 < ningu> prototype inheritance
22:40 < ningu> there are no classes, just objects
22:40 < ningu> and objects have prototypes
22:40 < zeromodulus> Ah, okay, seeing this example... makes more sense.
22:40 < daekano> aye
22:40 < ningu> which are a special attribute on the object
22:40 < prawnsalad> anyone use the node-mongodb-native module here? im looking for a way to return all field *but* one
22:40 < sg__> ningu: i guess my question would be better stated as to how node apps are typically deployed
22:41 < ningu> sg__: well, I have an nginx server which defines my node apps in an upstream config block
22:41 < ningu> sg__: there are plenty of howtos on this
22:41 < daekano> prawnsalad: map/reduce!
22:41 < sg__> ningu: can you point me in the right direction? :) 
22:41 < zeromodulus> The whole Foo.prototype thing is strange and foreign to me, but, really cool. o.o
22:42 <@mbalho> zeromodulus: its strange and foreign to everyone who learns it, your best bet is to wash your mind of all memories of 'classes'
22:42 < ningu> sg__: http://codearetoy.wordpress.com/2012/10/19/node-js-nginx/
22:42 < zeromodulus> sounds like a plan.
22:42 < ningu> sg__: that's a start, you can also use upstream instead of location @foo
22:43 < substack> wash wash wash your brain
22:43 < sg__> excellent, thank you
22:43 -!- mode/#Node.js [+o TooTallNate] by ChanServ
22:43 < ningu> sg__: also, nginx usually comes with a proxy_params file to include rather than all the proxy_set_header lines
22:43 < AAA_awright> Haha, because of my browsing history on Amazon making fun of overpriced cables and flash drives, I've also got recommendations for hundred-thousand dollar perfume and industrial shredders
22:43 < sg__> ningu: what are the benefits to doing something like this rather than having nginx handle the requests directly
22:43 < ningu> you can't have nginx handle the requests directly. node runs its own http server.
22:44 < sg__> er...nodejs*
22:44 < daekano> and nginx supports websockets now
22:44 < sg__> i'm sorry, i'm very tired
22:44 < ningu> sg__: oh, right. well, you can do that too. but this way you have have several node apps on one site.
22:44 < zeromodulus> CoverSlide: oh yeah, thanks for the link, I'll check it out.
22:44 < sg__> gotcha. thanks
22:44 < ningu> sg__: you can also have nginx take care of things like gzip compression and static file serving.
22:44 < CoverSlide> think of it like C++ classes but instead of MyClass::myMethod(){} you do MyClass.prototype.myMethod = function(){}
22:45 < ningu> sg__: but it's not that big a deal, you can expose the node app directly too
22:45 < ningu> sg__: also, nginx can do load balancing for you.
22:45 < ningu> so you have 10 upstream node servers or whatever
22:45 < ningu> sg__: but if it's a simple app none of this will matter much
22:46 < sg__> i see, thank you
22:46 < ningu> sg__: http://blog.argteam.com/coding/hardening-node-js-for-production-part-2-using-nginx-to-avoid-node-js-load/
22:46 < ningu> that looks more comprehensive
22:50 < zeromodulus> hmm... this prototype thing doesn't seem to be working, still says no method.
22:50 < OliverJAsh> Best message queue system for Node?
22:51 < OliverJAsh> I'm already using MongoDB but don't mind using a different data storage system
22:51 < zeromodulus> `function Foo () { this.id = 1; }; Foo.prototype.find = function () { return 1; }` says no method `find`.
22:52 < daekano> zeromodulus: post a jsfiddle
22:52 < ningu> zeromodulus: don't forget to return this; in Foo()
22:53 < zeromodulus> O.o
22:53 < Virunga> :O
22:53 < zeromodulus> I thought new Foo() took care of that.
22:53 < daekano> nope
22:53 < daekano> everything is working, but your constructor function isn't returning itself
22:53 < zeromodulus> heh, weird... seems things have been working without it. O.o
22:53 < ningu> new Foo() takes care of making a this for you :)
22:53 < ningu> but not returning it
22:54 < zeromodulus> doesn't new Foo() give a reference to a Foo instance?
22:54 < daekano> yes, if you return an object
22:54 < zeromodulus> why would the constructor function then need to return this?
22:54 < zeromodulus> oh... uhh... k...
22:54 < zeromodulus> O.o
22:54 < faceleg|work> ningu what do you think of C++ setting a JS class' property in teh AfterWork portion of an async "set" (also what do you call the Function/Work/AfterWork paradigm?)
22:54 < Virunga> No, the new obj is returned withouth return
22:54 < daekano> this is crucial to understand because it also matters for js closures
22:55 < daekano> either way, post a fiddle.
22:55 < zeromodulus> that's what I thought... I've been writing constructor functions this whole time without any `return this;` statements, and everything has worked as I expected it to.
22:55 < othiym23> does anybody have a module they like to get ctime and stime for a Node process from inside the process?
22:55 -!- mode/#Node.js [+o TooTallNate] by ChanServ
22:55 < othiym23> preferably one that doesn't run only on Linux?
22:56 < ningu> faceleg|work: I don't know that paradigm so I don't know what to call it
22:56 < faceleg|work> so obj.param = null; obj.func(function(error) { console.log(obj.param); }) // param is now set
22:56 < othiym23> both os.loadavg() and os.cpus() measure whole-system metrics
22:56 < faceleg|work> ningu: sure you do, in v8, using libuv
22:56 < ningu> I don't know v8
22:56 < faceleg|work> ningu: you've helped me with it a bunch
22:56 < ningu> I just like C++
22:56 < faceleg|work> ningu: sigh yse you do you know everything
22:56 < ningu> s/like/know/
22:56 < Virunga> zeromodulus: yes, i can't believe to read such a bullshit 
22:56 < tjfontaine> othiym23: ctime and stime?
22:56 < othiym23> I don't object to writing something that uses getrusage(2) or times(3), but if somebody's already solved this, I'd love to know
22:56 < tjfontaine> oh
22:57 < othiym23> tjfontaine: yeah, user time and CPU time for the current process
22:57 < othiym23> i.e. fields 14 and 15 of /proc/self/stat on Linux
22:57 < zeromodulus> is `return this;` like one of those things where you can either declare or omit `var` in variable declarations?
22:57 < CoverSlide> do other OS's store that?
22:57 < tjfontaine> othiym23: there's the posix module, and another rusage module
22:57 < samholmes> Does anyone know if there is a way to install https://github.com/component/cookie to be used with browserify?
22:57 < qubit01> anyone using typescript with nodejs ?
22:58 < othiym23> tjfontaine: have you used either of those?
22:58 < faceleg|work> ningu: but my main question is about the "okness" of doing  obj.param = null; obj.func(function(error) { console.log(obj.param); }) // param is now set 
22:58 < CoverSlide> noone should write something that relies on procfs
22:58 < tjfontaine> othiym23: I haven't, but posix module seems popular
22:58 < othiym23> tjfontaine: I'll check it out, thanks
22:59 < ningu> faceleg|work: I don't really understand the question. what is obj.func?
22:59 < substack> samholmes: git clone git://github.com/component/cookie.git node_modules/cookie
22:59 < ningu> obj.func is some async function?
22:59 < ningu> faceleg|work: I don't see why it shouldn't work.
23:00 < faceleg|work> ningu: it does, it is an alternative to doing obj.func(function(error, paramValue) { obj.param = paramValue; })
23:00 < ningu> zeromodulus: looks like I was wrong, you don't need to return this; :)
23:01 < ningu> zeromodulus: http://pastebin.com/v2hSH6rU
23:01 < substack> samholmes: but if you use dependencies then things will get weird
23:01 < ningu> faceleg|work: ok. well, I don't really understand what this has to do with V8 or C++
23:01 < substack> all of these ad-hoc npm-competing distribution platforms are shit for dependencies
23:01 < substack> and dependencies are the reason why you use a package manager in the first place
23:02 < substack> they will start to fall over themselves on any kind of moderately complicated dependency graphs
23:02 < substack> which is why I just use npm
23:02 < zeromodulus> damn, I can't get this prototype thing working.
23:02 < ningu> zeromodulus: try my pastebin.
23:02 < MI6> joyent/node: Nathan Rajlich master * 3288bc9 : doc: fix inpect() -> inspect() typo - http://git.io/8ok5kQ
23:02 < zeromodulus> k
23:02 < faceleg|work> ningu: nothing I was destroying my chances of a straight answer by asking two unrelated things at once
23:03 <@mbalho> zeromodulus: there are lots of great blog posts and books about it online, its a core part of javascript
23:03 < zeromodulus> yeah, I think I'm definitely going to check out that one book CoverSlide linked.
23:04 < zeromodulus> but, I'll take any others anyone would like to recommend.
23:04 < Virunga> Mozilla Developer Network is one of them
23:04 < zeromodulus> Ah, yeah, I have that bookmarked.
23:04 < superjoe> socket.io is in a sorry state right now
23:04 < zeromodulus> I refer to that one quite frequently.
23:04 < livinded> superjoe: orly?
23:04 < samholmes> substack: I have `cookie` already as a dep. :|
23:05 < superjoe> yarly
23:05 < zeromodulus> So, Foo.prototype is empty by default?
23:05 < samholmes> substack: what's the difference between using npm and node_modules to locate deps, and `component` and ./components?
23:06 < zeromodulus> I guess I could always test my theories. I do have a REPL after all.
23:06 < othiym23> tjfontaine: node-posix doesn't have times or getrusage, unfortunately
23:06 < othiym23> also, looks like Windows is a nonstarter with that one 
23:06 < worldhacker> Hi guys, what is the difference between the websocket-native module and the socket.io module for websockets? IO seems much more prolific and well documented
23:06 < Guest76081> is there a way to convert nodejs programs into binaries? (e.g. EXE)
23:07 < tjfontaine> othiym23: posix should imply its unlikely to work on windows I think :)
23:07 < korilo> zeromodulus, what's your issue with contructor :D
23:07 < worldhacker> although some of the early tuts I read suggested websocket-native
23:08 < othiym23> tjfontaine: eh, mingw and cygwin argue otherwsie, but yeah, you right
23:08 < zomg> worldhacker: I would imagine websocket only supports websockets, while socket.io supports other transport methods as well, allowing a wider browser support. Socket.io's API probably also is on a higher level (for example, it supports function callbacks directly etc.)
23:08 < zeromodulus> haha, it's alright, I'm using ningu's example.
23:08 < korilo> s/contructor/constructors
23:08 < tjfontaine> othiym23: node no longer runs under those systems ... so
23:08 < korilo> lemme see!!!!! i'm curious! :D
23:08 < tjfontaine> othiym23: or at least such usage isn't a suggested or supported mechanism
23:08 < othiym23> tjfontaine: yeah, I know, I'm just saying there's a POSIX layer in there somewhere, sorta buried
23:08 < ningu> zeromodulus: actually, I think Foo.prototype is by default the same as Object.prototype, which is empty by default.
23:08 < worldhacker> zomg: thank you very much. I will probably switch to socket.io then
23:08 < ningu> zeromodulus: however you *can* (but shouldn't) modify Object.prototype
23:09 < othiym23> c'mon, registry, be more faster
23:09 < substack> samholmes: one of those has a lot of packages written for it and the other one doesn't
23:09 < zeromodulus> ah, then that will like, pass down all the stuff in Object.prototype to new constructor functions?
23:09 < substack> and the node_modules and npm approach has proven itself at massive scale
23:09 < ningu> zeromodulus: yeah. but it's probably going to do things you don't expect and is not a very good idea
23:10 < ningu> it will affect *all* objects including builtins like Array
23:10 < substack> so I am not very interested in whatever flavor of the month upstarts are seeking to "solve" package management for browsers
23:10 < substack> because I can just use npm
23:10 < zeromodulus> ah
23:10 < ningu> substack: in browsers?
23:11 < ningu> I can't remember how browserify lets you require() npm modules that are meant to be client-side.
23:11 < zeromodulus> huh... weird... my attempt at loading an Object into Foo.prototype just isn't going as planned, :P.
23:11 < zeromodulus> Oh, okay, I see what's going on...
23:12 < ningu> ah I see, yeah.
23:12 < ningu> (that was regarding browserify)
23:12 < zeromodulus> So, it seems there *has* to be an instance in order to call any prototype methods, which isn't quite what I want. :/
23:13 < ningu> eh?
23:13 < ningu> you can't call instance methods without an instance
23:13 < azylman_> superjoe: What makes its state sorry?
23:13 < zeromodulus> I don't want an instance method. T_T
23:13 < ningu> then do Foo.method = function  () {}
23:13 < ningu> that's like a class method
23:13 < zeromodulus> ._.
23:13 < zeromodulus> okay...
23:14 < superjoe> azylman_, how if you try to use it in production, it won't work very well, with regards to using the correct protocol, or even falling back gracefully
23:14 < korilo> zeromodulus, Constructor functions do not normally use the return keyword. They typically initialize
23:14 < korilo> the new object and then return implicitly when they reach the end of their body. In this
23:14 < korilo> case, the new object is the value of the constructor invocation expression. If, however,
23:14 < korilo> a constructor explicitly used the return statement to return an object, then that object
23:14 < korilo> becomes the value of the invocation expression. If the constructor uses return with no
23:14 < korilo> value, or if it returns a primitive value, th
23:14 < superjoe> just look at how many issues and pull requests are open...
23:15 < korilo> from JS the definitive guide :D
23:15 < samholmes> substack: "all of these ad-hoc npm-competing distribution platforms are shit for dependencies" How is component's distribution platform shit for deps? Isn't almost identical to npm aside from the fact that there is no registry?
23:15 < OliverJAsh> do message queue systems such as Kue run on a separate process?
23:16 < substack> samholmes: (1) there isn't critical mass for component's ad-hoc way of specifying packages, so you can't use modules until they've been ported
23:16 < zeromodulus> korilo: ah, cool.
23:16 < substack> so you are very restricted in which dependencies you can use
23:16 < korilo> zeromodulus, If the constructor uses return with no
23:16 < korilo> value, or if it returns a primitive value, that return value is ignored and the new object
23:16 < korilo> is used as the value of the invocation.
23:17 < substack> samholmes: (2) reliance on tag-based versioning conventions makes it very difficult to peg versions of dependencies
23:17 < samholmes> substack: (1) same would be true if a module didn't provide a package.json, no?
23:17 < ningu> substack: so what do you make of tj's discussion of why he created components in the first place?
23:17 < zeromodulus> korilo: hehe, cool.
23:17 < zeromodulus> yay, now I get to play around with Redis, woohoo.
23:17 < ningu> substack: even if the solution isn't good, I thought the issues he raised were legitimate.
23:18 < substack> ningu: instead of solving the discoverability problem and only the discoverability problem, he decided to solve a bunch of solved problems in addition to the discoverability problem
23:18 < royjr> hello, I working on a multiplayer game and  need some help, anyone up for some suggestions?
23:18 < substack> if you want to solve discoverability then write a tool that only solves discoverability
23:18 < substack> so you can focus on solving it well
23:18 < samholmes> substack: What's the disco. prob.?
23:18 < tjholowaychuk> that's not my only problem with npm
23:19 < ningu> there is no disco problem, disco is awesome
23:19 < samholmes> ningu: lol
23:19 < substack> tjholowaychuk: the search speed problem can be solved with the npm website
23:19 < tjholowaychuk> no point even discussing it really it's the same old why not just use X argument
23:19 < substack> I've been planning on sending some patches to add a caching layer
23:19 < tjholowaychuk> why not use brew, why not use gems etc
23:19 < tjholowaychuk> it's not just the speed
23:20 < tjholowaychuk> the whole experience is sub-par IMO
23:20 < tjholowaychuk> even just subtle things
23:20  * samholmes thinks this could become an interesting conversation.
23:20 < royjr> @anyone - im trying to make a multiplayer game in node.js, can someone help me?
23:20 < korilo> it depends royjr :P
23:21 < royjr> korilo - on what lol
23:21 < samholmes> royjr: http://google.com. There, I helped! :D
23:21 < royjr> lol, nice one
23:21 < royjr> all those links have been clicked already
23:22 < samholmes> tjholowaychuk: are you idealistic about package distrobution?
23:22 < ningu> tjholowaychuk: I am not saying npm is perfect, but it works better than a lot of package managers I've used.
23:22 < royjr> no but seriously, can someone start me off? heres my idea...
23:22 < tjholowaychuk> ningu for sure, I never said it was bad
23:22 < tjholowaychuk> it does a lot of things really well
23:22 < tjholowaychuk> no harm in branching off from there though, that's like accepting node as "the best thing ever"
23:23 < tjholowaychuk> if you dont iterate on your ideas you're failing
23:23 < royjr> a simple 'jump, walk, run, 2d multiplayer game' is what im looking for
23:23 < tjholowaychuk> if those ideas dont match up with other people
23:23 < tjholowaychuk> oh well
23:23 < azylman_> royjr: It's better to ask for help with something specific than something as broad as "help me build a game"
23:23 < substack> I mostly just get irritated when people send me pull requests for component.json
23:23 < tjholowaychuk> understandable
23:23 < azylman_> royjr: You should search around and come back and ask questions when you have something specific to ask
23:23 < substack> because I don't use component and do not want to maintain support for something I don't use
23:23 < tjholowaychuk> the fragmentation all around in js land
23:23 < tjholowaychuk> is pretty bad
23:23 < royjr> hmm ok, its been a long time for me since my last visit on irc
23:23 < substack> same with amd
23:24 < samholmes> royjr: There's so many routes to take when deciding how to build such a thing.
23:24 < substack> tjholowaychuk: one thing I would like to see is more tooling that bridges the myriad ways of packaging modules
23:25 < substack> so we can use modules from A in B
23:25 < royjr> ok, how about.. what framework should I use that will allow me to make a multiplayer 2d game thats available across all devices (becuase of websocket problems)
23:25 < tjholowaychuk> substack yeah that might be nice in the future, I wanted to ignore all of that to get started
23:25 < azylman_> royjr: Well, you can use something like express or restify :)
23:25 < livinded> substack: don't most things convert from commonjs?
23:25 <@mbalho> tjholowaychuk: pretty much my only beef with component is that you cant use it with `npm install` workflows, if that gets fixed then it would be amazeballs
23:26 < samholmes> royjr: I'm not familiar with too many front-end frameworks. Googling "JavaScript game framework node.js" might be help.
23:26 < substack> tjholowaychuk: it should be possible to ingest component packages with the new browserify transforms, I just haven't looked into this very deeply yet
23:26 < ningu> royjr: socket.io?
23:26 < royjr> ninju: yea ive been using that
23:26 < ningu> royjr: well, that is the best thing to start with. you can use express if you need it too but it isn't required, can just use a plain http server with socket.io
23:27 < substack> basically I can just do the package lookup in the source files and inline the contents like how brfs inlines fs.readFileSync() calls with strings
23:27 < royjr> ningu: well thats good, but how about this problem.. how do a make a looong 'level' like mario for example
23:28 < samholmes> nomponent – a package manager that recognizes both package.json and components.json
23:28 < azylman_> What do you mean "make"?
23:28 < AAA_awright> Why not just git
23:28 < AAA_awright> Then you can at least fork packages
23:28 < azylman_> How do you store the info in your database? How do you transmit it to the user? How do you render it in the user's browser?
23:29 < royjr> azylman_: well how do i... render i guess, becuase i cant see how i could make a very long page, since the character is going to move
23:30 < zeromodulus> so, I want to create IDs based on some properties, I figure I'll probably get collisions if I just go by date, right? but I'm not sure if I'll have any more data to hash to make the ID unique.
23:30 < royjr> azylman_: could i possibly make the background move based on the characters movement and keep the character in its place
23:31 < ningu> royjr: you need to look into the facilities for drawing things like that in the browser
23:32 < ningu> an the client js code for controlling it
23:32 < ningu> and*
23:32 < sayd> if i have the packages installed globally already that are defined in devDependencies. is there a way to not reinstall them?
23:32 < sayd> im thinking `npm link` in the project root, but it seems to be downloading them
23:32 < zeromodulus> dang... I want to call static methods from within a constructor, is there a way to do that?
23:32 < ningu> zeromodulus: well, sure, just call them?
23:32 < zeromodulus> eh, uh, in a perfect world, yeah.
23:32 < zeromodulus> haha.
23:32 < azylman_> royjr: You probably want to use the canvas element, which allows 2D (and possibly 3D?) drawing. You should look for tutorials on that
23:32 < ningu> zeromodulus: I mean, they have to exist and be defined already
23:33 < zeromodulus> yeah, thought I was doing that.
23:33 < zeromodulus> but like, arg, the way this all has to be set up, kinda... weird.
23:33 < royjr> yea, i was trying to use this demo to base mine off of it.. http://someindividual.com/grid and it uses canvas
23:33 < azylman_> As far as how you deal with movement, that's up to you and how you want your game to work :) The character could move around on the screen with the scene shifting when he hits the sides, or he could remain stationary with only the background moving, etc. etc.
23:33 < zeromodulus> I wish there was a simpler way to do this O.o
23:34 < zeromodulus> I have a constructor function, then after its definition, static methods tacked on.
23:34 < ningu> zeromodulus: I think you can do, var Foo = { constructor: function () {}, prototype: { bar: ..., baz: ... }, classMethod: ... }
23:34 < zeromodulus> Foo.method = function(){};
23:34 < zeromodulus> and then I'm trying to call those tacked on methods from within my constructor function.
23:35 < ningu> zeromodulus: google tutorials on defining classes in js, it will have more details
23:35 < ningu> I'm a little rusty on this myself
23:36 < korilo> zeromodulus, chapter 9 of js the definitive guide also :P
23:36 < zeromodulus> k
23:36 < zeromodulus> is there a free online version?
23:36 < korilo> don't think so
23:37 < korilo> is for free you mean free distribuited from the author/oreally
23:37 < korilo> :p
23:37 < korilo> s/is/if
23:37 < zeromodulus> yeah.
23:37 < korilo> btw 1.2k from ST2 plugin of Ternjs YAHI!
23:39 < blocky97> Hi i'm new to node, and i'm looking for a MVC server framework that i can plug into express.  Does anyone have any opinions?
23:39 < billy> zeromodulus: you can't stick it in the prototype?
23:40 < zeromodulus> I could, but then I would need to create an instance, which I don't want to do.
23:40 < zeromodulus> I want functions to be associated with a constructor function, but not rely on an instance of the constructor function.
23:42 < billy> you can call it via the prototype without the instance
23:42 < zeromodulus> I don't think so.
23:42 < zeromodulus> I tried that.
23:42 < zeromodulus> oh, via prototype.
23:42 < zeromodulus> nvm.
23:43 < zeromodulus> hmm, that sounds like a good option.
23:44 < billy> http://jsfiddle.net/billyvg/LvNvb/
23:45 < zeromodulus> is it necessary to instantiate a Foo?
23:46 < billy> no
23:46 < zeromodulus> hmm, well, I think I'm going to not worry about this kind of organizational stuff for now.
23:46 < zeromodulus> I'm just going to write out the methods in the simplest way possible for now.
23:49 < Codynyx> substack: I'm having this problem trying the shoe examples. Any ideas? http://pastie.org/pastes/6466238/text?key=x4fqgwqubzw14l3uyszog
23:49 < maurycyp> hi, does anyone know if it's possible in socket.io to set http headers in io.connect ?
23:54 < mikenstein> what is the appropriate course of action to recover an abandoned npm module that's been registered but no longer maintained?
23:55 < tjfontaine> mikenstein: it's in the npm faq
23:56 < mscdex> mikenstein: how have you determined it was abandoned?
23:56 < mikenstein> mscdex: it hasn't received updates in over a year and the author hasn't responded to multiple requests from multiple people via multiple channels
--- Log closed Wed Mar 13 00:00:05 2013
