--- Log opened Mon Nov 05 00:00:11 2012
00:00 < wiherek> I am trying to evaluate how many servers or cloud vm instances I will need for my app
00:01 < wiherek> it's a html5, socket.io, social app that does a few minor db transactions per user session
00:01 < astropirate> wiherek, 1
00:01 < wiherek> :)
00:01 < astropirate> lol depends on your load
00:01 < wiherek> of course.
00:02 < wiherek> I was thinking - how many instances will I need for 50K users
00:02 <@konobi> 1
00:02 < shanse> 1 per user
00:02 <@konobi> wiherek: start with one, then collect data before making any decisions
00:02 < wiherek> how many does LinkedIn use?
00:02 < wiherek> I know but I need to create a budget
00:03 < shanse> 50k concurrent users?
00:03 < wiherek> yea
00:03 <@konobi> wiherek: you work for a big company?
00:03 < wiherek> startup
00:03 <@konobi> then start off cheap
00:03 <@konobi> then add more as you go
00:03 <@konobi> for a startup more traffic is a good thing
00:03 < wiherek> yes, sure
00:03 < wiherek> still, I need some estimations
00:04 < wiherek> I really need something like:
00:04 <@konobi> until you have users, no estimates
00:04 < wiherek> 1 node.js instance per 10K users or 3 per 40K users
00:04 < wiherek> or 25 per 10K users
00:04 <@konobi> depends on your app
00:04 < wiherek> we're making it all async and restful
00:05 < shanse> that doesnt really say much
00:05 < wiherek> there will not be any complicated operations on the data
00:05 < wiherek> search will be handled by another instance
00:05 < TheAceOfHearts> is there any way for me to get an Array to behave like a Set? I want to put things into an array, and then send that array as a JSON.
00:05 < wiherek> and the db will be on another cluster
00:05 <@konobi> wiherek: there's about 20-30 variables that will effect what you need
00:05 < TheAceOfHearts> I can check if the element is in the array, but that would be inefficient for large numbers D:
00:05 < wiherek> do you think you could help me narrow that down?
00:06 <@konobi> wiherek: not without a bunch of time/effort
00:06 < wiherek> TheAceOfHearts, use index?
00:06 < astropirate> wiherek, try running a benchmark
00:06 <@konobi> wiherek: do you have an app already running?
00:06 < wiherek> a prototype, yea
00:07 < wiherek> thinking of how to benchmark websocket connection
00:07 <@konobi> time to start emulating users pounding at it
00:07 < wiherek> will do ab for nginx first
00:07 < TheAceOfHearts> I'll try
00:07 < TheAceOfHearts> ty
00:08 <@konobi> wiherek: assuming your app is archetected well enough, adding new instances underneath it shouldn't take longer than an hour
00:09 < wiherek> yea :) i just need the numbers
00:09 < astropirate> 3
00:09 < wiherek> how many instances per 10K users
00:09 < wiherek> lol
00:09 <@konobi> wiherek: again... how much load per user?
00:09 < wiherek> yea.
00:09 <@konobi> do you have latency requirements?
00:09 < astropirate> depends on whether your app simulates the big bang or serves some string
00:09 < shanse> 3 1/2 instances per user +- 1 depending on the current moon phase
00:10 <@konobi> wiherek: make up a $ value
00:10 < astropirate> shanse, HAHAh
00:10 < wiherek> yea it's like it kind of creates a plan + allows for social interaction
00:10 < wiherek> and the plan is adjustable, db-related
00:10 < wiherek> thats it I guess
00:11 <@konobi> wiherek: show me the data
00:11 <@konobi> =0P
00:14 < wiherek> ok. one simple ab test against nginx serving static assets at 53 rps
00:14 <@konobi> wiherek: read goldilocks estimate?
00:17 < wiherek> http://blog.caustik.com/2012/04/08/scaling-node-js-to-100k-concurrent-connections/
00:18 <@konobi> scaling with hello world and scaling with interdependent components are vastly different things
00:18 < wiherek> yea.
00:19 < onr> node.js is webscale
00:19 <@konobi> depending on your rate of user gain, you may need to scale with $$$s, but with a slow gain, you can do it by tweaking your operating env, etc.
00:22 <@konobi> mmalecki: ping
00:24 < mmalecki> konobi: pong
00:24 <@konobi> mmalecki: see my message about bunyan?
00:24 < mmalecki> konobi: about dtrace? yup
00:24 <@konobi> pretty damn sweet
00:25 < mmalecki> yeah, been wondering about adding it to winston too
00:27 < airtanah> does anyone know about or use Thrift?
00:29 < Leo_> Hello, is there a way to request (get) only the header of a website? Should i terminate the connection as soon as i get the header?
00:31 < zak> Leo_: there's a way to do. It's in the HTTP doco somewhere
00:31 < chapel> Leo_: called head
00:31 < Leo_> is it the method: 'Head'
00:31 < Leo_> ?
00:31 < chapel> yeah
00:31 < chapel> instead of get, its head
00:32 < deltab> Leo_: what do you mean by 'header'?
00:32 < chapel> http://en.wikipedia.org/wiki/HEAD_(HTTP)#Request_methods
00:32 < chapel> Asks for the response identical to the one that would correspond to a GET request, but without the response body. This is useful for retrieving meta-information written in response headers, without having to transport the entire content.
00:32 < deltab> Leo_: do you want the HTTP header (Content-Type, etc.)? the page's head element (title, related links, etc.)?
00:33 < Leo_> yes the http header...
00:33 < chapel> deltab: head request
00:33 < deltab> use the HEAD method then
00:33 < Leo_> I'll try, im not sure but i think i tried once and i got a error.. let me try again.
00:33 < chapel> its everything like a get request, except for the body
00:33 < chapel> e.g. the headers
00:33 < chapel> including content size
00:34 < zak> make sure you try it on a few sites, just in case the one you've tried in the past isn't working correctly
00:35 < chapel> not all sites/servers support head requests
00:35 < chapel> not much you can do about that
00:38 < Leo_> Yeah its working.. thanks
00:40 < Leo_> if the http version doesnt support the Head method, what could i expect to happen?
00:40 -!- mode/#node.js [+o piscisaureus_] by ChanServ
00:43 <@konobi> 4xx or 5xx
00:43 <@konobi> (it should be 405... but it could be others)
00:44 < TehShrike> No Javascript and no beer make TehShrike something something
00:49 < jrajav> TehShrike: Brought a tear to my cheek
00:50 < TehShrike> DON'T MIND IF I DO!
00:50 < TehShrike> Oh wait, what?
00:54 < jrajav> No Javascript and no beer :(
00:58 < TehShrike> It is pretty distressing.
00:58 < TehShrike> http://www.youtube.com/watch?feature=player_detailpage&v=5yGJGTjV2WE#t=6s
01:12 < mdedetrich> does anyone know if its possible to attach events to elements created by jade
01:13 < mdedetrich> inside the actual jade file
01:13 < mdedetrich> when using something like jquery?
01:13 < winduptoy> Hey guys, can somebody help me out real quick with routes?
01:14 < winduptoy> http://stackoverflow.com/questions/13222252/how-to-use-angularjs-routes-with-express-node-js-when-a-new-page-is-requested
01:18 < Leo_> In JS if i want to send a reference, i need to send a object?
01:20 < TehShrike> Leo_: essentially
01:20 < gabrieluk> in js everything is an object, even strings
01:22 < AAA_awright> gabrieluk: Not quite... Everything can be acted on like an object, except null and undefined, even primitives (string, number, bool, null, undefined)
01:23 < chilts> mdedetrich: I'd avoid putting JavaScript into your Jade file, but you can just throw a script tag in there with some JS to do it for you :)
01:23 < chilts> so yes, there is a way to do it
01:23 < mdedetrich> mdedetrich: yeah I got that
01:23 < mdedetrich> mdedetrich: but how do you refer  to the currently 
01:23 < mdedetrich> chilts: how do you refer to the currently created element
01:23 < mdedetrich> chilts: what I am trying to do is to attach events to elements as they are being created
01:24 < chilts> are you talking Jade in the browser, rather than the server?
01:24 < mdedetrich> chilts: browser
01:24 < mdedetrich> chilts: I mean the ugly way is to put data into the html element
01:24 < mdedetrich> chilts: and then loop through it when the html is created
01:24 < chilts> right, so what I usually do is stick the HTML into the element (let's say a div), then call a function which finds relevant elements to add events to it
01:24 < mdedetrich> chilts: and create the events with jquery
01:25 < mdedetrich> chilts: yeah..however in my case
01:25 < gabrieluk> AAA_awright, i was reading some article calling the "string object". he was mentioning as the string was an oject, but now i see it is a primitive. to easy to get bad info out there :?
01:25 < gabrieluk> :/*
01:25 < bradleymeck> isaacs: in minimatch, do you know of any instances of semver extensions to the globbing spec it uses?
01:25 < mdedetrich> chilts: I would have to add stuff like data='some data' in the actual html
01:25 < mdedetrich> so that when I read over the html, I know the relevant data that I need to create the event
01:25 < chilts> unless you use delegate(), so you don't have to add the event to each element
01:26 < gabrieluk> this one seems a good article about the subject http://www.2ality.com/2011/03/javascript-values-not-everything-is.html
01:26 < AAA_awright> gabrieluk: They could be right... You can do new String("a string") and then it really is an object, not a primitive
01:26 < TehShrike> Yeah, there is some overlap there, which I mostly ignore
01:26 < AAA_awright> gabrieluk: And you convert it back with theString.toString() and now you've got the primitive
01:26 < mdedetrich> chilts: the problem I am describing here
01:27 < mdedetrich> chilts: is that I send data (which is read by locals.<bla>) into jade
01:27 < mdedetrich> chilts: it renders html
01:27 < TehShrike> In my mind there are primitives and objects, and I don't generally run across any code that confuses them
01:27 < AAA_awright> or theString.valueOf(), which also works with new Number, new Boolean, etc
01:27 < mdedetrich> chilts: at THIS time the locals also has information relevant to creating the events
01:27 < mdedetrich> chilts: for example, some ID which refers to some object on the server
01:27 < mdedetrich> chilts: when the HTML is created, all that info is lost
01:28 < mdedetrich> mdedetrich: before I used jade, I just created the html through jquery
01:28 < gabrieluk> ok
01:28 < mdedetrich> chilts: and it would attach the event right at the time
01:29 < mdedetrich> chilts: is there a way around this?
01:29 < chilts> not that I can think of (unless you go to the ancient rituals of adding onclick="..." event handlers!!!)
01:30 < mdedetrich> chilts: yeah, which is incredibly ugly
01:30 < chilts> I think you should start adding classes to each element to say that it needs whatever event handler on it
01:30 < TehShrike> mdedetrich: that is the job of your client-side JavaScript, not your templates
01:30 < TehShrike> Yes, what chilts said
01:30 < chilts> and use data-id="..." so that the event handler knows which entity it should act on
01:30 < TehShrike> ^^^
01:30 < mdedetrich> chilts: yeah thats what I used to do
01:30 < chilts> I can't think of a better way at the moment
01:31 < chilts> (without knowing a log more about your code and/or use-case)
01:31 < mdedetrich> chilts: although it really clutters html and has issues in terms of boilerplate
01:31 < TehShrike> mdedetrich: so you just need to split up your HTML templates and the JS code that runs on the clients
01:31 < chilts> it does clutter it somewhat, but remember HTML is now used for describing layout, design AND functionality (although the last two are implemented CSS and JS)
01:32 < chilts> s/layout/structure/ :D
01:32 < mdedetrich> TehShrike: well thats how it is currently
01:32 < mdedetrich> TehShrike: the template is split from the JS code
01:33 < mdedetrich> TehShrike: and that is actually causing the problem
01:33 < mdedetrich> TehShrike: although I can be smart and maybe just use zip
01:33 < mdedetrich> TehShrike: like in my case, its an array (which jade iterates over)
01:33 < mdedetrich> I can just re-iterate with jquery, and do a zip as I am attaching the event
01:33 < TehShrike> Then it shouldn't be too bad, as long as your HTML has sensible attributes?
01:33 < mdedetrich> I supposed I have always had issues doing stuff like data-id="3423423"
01:34 < TehShrike> What are you storing in arrays now?
01:34 < mdedetrich> well in the arrays is just data thats stored, of which jade creates HTML out of
01:34 < mdedetrich> its just an array of userid, and img src
01:34 < TehShrike> I like being able to use selectors like li.customer or tr.user
01:35 < mdedetrich> and so I would want to create an event on each img by passing in the id
01:35 < mdedetrich> as a variable (which the event needs)
01:35 < TehShrike> Storing all those things in a customerItem or userRow array would be awkward
01:35 < mdedetrich> so one way is to obviously just do a data-id="2342342"
01:35 < mdedetrich> and just reiterate with jquery
01:36 < mdedetrich> another way is to just re-iterate through jquery, get current iteration id, and read the element from original id
01:36 < mdedetrich> *original array
01:36 < mdedetrich> which would keep the html more clean
01:36 < mdedetrich> I think I may do that
01:36 < TehShrike> Yeah, in that case I've just put one event on all my customerItem elements, and have it check the data-id attribute of the "this" element when it is called
01:36 < TehShrike> So there's just one event function for all the elements
01:37 < TehShrike> But it can grab the identifier from the specific DOM element it's called on when the event happens
01:37 < TehShrike> Other people may have better ideas, but that's worked reasonably for me
01:38 < TehShrike> Does that make sense?
01:38 < mdedetrich> of course it all makes sense, its just in my case
01:38 < mdedetrich> I don't like doing stuff like doing data-id
01:38 < mdedetrich> as an atti
01:38 < mdedetrich> *attribute on the element
01:38 < TehShrike> Fair enough
01:38 < TehShrike> I don't like having 50 instances of what is essentially the same function :-x
01:38 < mdedetrich> because the HTML gets really massive when you want stuff thats more then just data-id
01:39 < TehShrike> The memory gets pretty massive if you have a different function for each element
01:39 < mdedetrich> that is true
01:39 < TehShrike> (Note: I don't actually think the massiveness of either of those should be a concern unless benchmarking showed them to be one)
01:39 < mdedetrich> I didn't consider that from a performance pov
01:40 < mdedetrich> well it would really depend on the browser
01:40 < TehShrike> I think that describing your data well in the DOM should be a priority
01:40 < mdedetrich> chrome with V8 it wouldn't really be an issue, I would imagine, since it has really lightweight threads
01:41 < mdedetrich> well the other thing is, you may have issues representing data as strings
01:41 < TehShrike> But I must away - I am called upon by coworkers to drink alcohol and play a new board game called "Chicken Caesar"
01:41 < wlaurance> Hi, Does anyone one a good way to find the best command to open a browser from the command line? Either an npm package or maybe just a universal *nix tool that knows how to open urls
01:41 < mdedetrich> especially with internilization
01:41 < TehShrike> wlaurance: best practices vary by OS
01:41 < TehShrike> wlaurance: I know Windows has specific calls for "open this in a browser"
01:42 < chilts> wlaurance: there is usually a command called 'open' (e.g. open http://google.com/)
01:42 < wlaurance> chilts: yeah I know that works on Mac
01:43 < wlaurance> I guess for now I will just switch on process.platform and do what I can do
01:43 < wlaurance> Thanks guys
01:43 < chilts> what are you doing for *nix then?
01:44 < jden> Anyone going to @cascadiajs this week?
01:45 < wlaurance> chilts: xdg-open
01:50 < wlaurance> chilts: Not a big deal, its for package that only I will ever use anyways but I use mac/linux and I like writing robust modules
01:53 < chilts> wlaurance: cool, glad to hear about xdg-open :) thanks
01:54 < jwm> I haven't seen a part message in a long time
01:54 < jwm> heh
01:57 < jgornick> Hey guys, now if I want to start another node instance and run a script, I can just use child process to spawn a command like "node /path/to/script.js", right?
01:58 < mscdex> jgornick: yeah pretty much
01:58 < jgornick> mscdex: I'm doing that and when I run my script to launch another node script, I keep getting: execvp(): No such file or directory
01:58 < ardall> tes
01:58 < jgornick> mscdex: However, I log out the command I'm going to run and when I run it manually, it works.
01:58 < mscdex> jgornick: what is the spawn/exec command you're using
01:58 < mscdex> ?
01:59 < ardall> so what is the advantage of using node.js?
01:59 < ardall> could u tell me?
01:59 < jgornick> mscdex: /usr/bin/env node /path/to/script.js
01:59 < mscdex> jgornick: no, i mean you're using the child_process module right?
01:59 < jgornick> mscdex: Yes, child_process.
01:59 < ardall> hellow everyone! 
02:00 < ardall> where i can find good information bout node.js?
02:00 < mscdex> jgornick: ok, what is the exact code line you're using?
02:01 < jgornick> mscdex: https://gist.github.com/4014848
02:02 < mscdex> jgornick: with spawn() you have to have the first executable as a string, and the second argument is an array of arguments
02:02 < jgornick> mscdex: OH crap.
02:02 < mscdex> jgornick: http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options
02:02 < jgornick> mscdex: Thank you.
02:23 < sayd_> hi, im trying to install q via npm, but i get some cryptic errors is there a trick to installing that?
02:24 < Aria> No.
02:25 < Aria> But what errors?
02:35 < sayd> here's the error https://gist.github.com/4014980
02:39 < sayd> not sure how i'm supposed to get through that
02:39 < substack> tilgovi: rad
02:39 < tilgovi> substack: it's working :)
02:39 < tilgovi> parsing http requests with parsley over a listen socket from the app right now
02:40 < substack> TehShrike: you should probably just use mux-demux to have dnode and an event bus on separate streams
02:40 < substack> using remote-emitter or emit-stream
03:11 < marshall> hey node
03:11 < marshall> has anybody used the request library to make linkedin api calls? I'm having a bit of trouble
03:12 < mscdex> what trouble?
03:13 < marshall> mscdex: I can make the calls fine, but when I add a field selector, the response is 403 unauthorized
03:20 < mscdex> marshall: have you looked at this linkin module?: https://github.com/masylum/linkedin-js
03:20 < mscdex> s/linkin/linkedin
03:28 < marshall> mscdex: oh, this might actually suit my situation very well. thanks!
03:38 < sayd> https://github.com/kriskowal/q/issues/137 if anyone has any clue
03:49 <@konobi> anyone know of any modules for dealing with event collection?
03:49 < thomasgriffin> Question - I'm new to node.js and I wanted to see if there was a way to run files and see the results inside of a browser like chrome
03:50 < thomasgriffin> I've installed it locally and can log it to the terminal, but wanted to see if I could log it to chrome - just not sure how
03:51 <@konobi> thomasgriffin: look for the hello world http example
03:53 < thomasgriffin> konobi ahh - thanks! 
03:54 < thl0> konobi: try nodeinspector if you want to debug your code in chrome
03:54 < thl0> konobi: should have bee thomasgriffin 
03:56 < jden> question: can you use nodeinspector remotely? ie node on a server, chrome locally?
03:56 < thomasgriffin> thl0 sweet :-P
03:57 < gkatsev> jden: if you open up the port for remote inspection, sure.
04:00 <@konobi> thl0: webkit-devclient is better imho
04:03 < thomasgriffin> sorry - another question. I'm not super familiar with the terminal, but now that i have run the hello world example, i can't type commands in the terminal - how can I get back to doin that?
04:03 < thomasgriffin> but if i close the terminal, the server will go down - sorry, I know this is a newbie question. :-)
04:03 <@konobi> Ctrl+C
04:03 <@konobi> well
04:03 <@konobi> time to google =0)
04:06 < thomasgriffin> konobi thanks again! you are too kind
04:44 < rojuinex> Anyone here done any facebook coding with node?
04:54 <@konobi> rojuinex: checked npm for FB modules?
05:07 < jwm> any cool node.js projects that let you code the app from inside the app?
05:07 < jwm> :)
05:07 < jwm> code your app from within it heh
05:08 <@konobi> jwm: like ide wise?
05:09 < jwm> yeah
05:09 <@konobi> cloud9 is the only one springing to mind right now
05:09 < jwm> but it would run from the app itself
05:10 < jwm> cloud9 is nice
05:11 < jwm> it'd be cool to have something that let you create mvc stuff visually
05:11 < jwm> guess you have to code it all yourself
05:11 < jwm> heh
05:12 <@konobi> well... we give you just enough rope
05:13 < jwm> yeah
05:13 < jwm> I understand that
05:14 < jwm> I just find it interesting how little model creation code there is in any project
05:14 < jwm> something like phpmysql but much smaller
05:15 <@konobi> it's an interesting model (mvc)... but that's all it is... a model
05:16 <@konobi> plus, why not just use phpmysql rather than reinvent the wheel
05:17 <@konobi> um... maybe i'm thinking you mean phpmysqladmin
05:17 < jwm> because I need to use multiple databases 
05:17 < jwm> yeah
05:17 < jwm> pma
05:17 < TehShrike> substack: aah, those sound like words of wisdom I was looking for.  Thanks!
05:17 < TehShrike> phpmyadmin is horrible
05:18 <@konobi> jwm: use a specific tool for each
05:18 < TehShrike> Just don't use pma
05:19 < jwm> :)
05:19 < jwm> well I was thinking express but for models
05:19 <@konobi> forget "models" and think datastore
05:20 < jwm> yeah
05:26 < StepanKuzmin> Hello everyone!
05:26 < StepanKuzmin> How can I install Node 0.4.9 on Windows? Is it possible?
05:26 <@konobi> nope
05:27 < StepanKuzmin> Hmm
05:27 < StepanKuzmin> Okay :(
05:27 < Slade-> so i've been using this to make modules work in node and the browser.. is it the standard way? http://caolanmcmahon.com/posts/writing_for_node_and_the_browser/
05:28 <@konobi> StepanKuzmin: why not 0.8.14?
05:28 < jwm> backbone is interesting
05:29 < StepanKuzmin> Because I want to install TIlestream (https://github.com/mapbox/tilestream) that needs node 0.4.9
05:29 <@konobi> Slade-: you might want to look at browserify
05:29 < jwm> yeah 0.8.14 and 0.9.3 work perfect under IIS 7
05:29 < Slade-> konobi: its not really complex enough to warrant browserify..  
05:30 <@konobi> StepanKuzmin: it supports 0.8.x
05:30 < StepanKuzmin> Really? Great!
05:30 <@konobi> StepanKuzmin: https://github.com/mapbox/tilestream/blob/master/package.json#L16
05:31 < StepanKuzmin> Yeah, thanks!
05:31 < Slade-> hmm does the windows install have a way to update? or do i just have to reinstall manually
05:31 <@konobi> of course, you could always use a VM
05:31 <@konobi> Slade-: always manual
05:31 < jwm> StepanKuzmin: thanks for showing me that project I might use it!
05:31 < jwm> heh
05:31 < StepanKuzmin> I need to run it natievly
05:32 <@konobi> StepanKuzmin: its a server...
05:32 < Slade-> ah i'm only 0.0.03 versions behind. no biggie
05:32 < StepanKuzmin> jwm — it's a great app that you should use with TileMill mapbox.com/tilemill
05:32 <@konobi> StepanKuzmin: plus, it doesn't indicate win32 support
05:32 < jwm> I've got some DSN files I want to overlay on a map
05:32 < jwm> for a project
05:33 < StepanKuzmin> jwm, I think you can use it
05:33 < StepanKuzmin> konobi, is that mean that I cannot run TileStrean on Windows?
05:33 <@konobi> StepanKuzmin: do you mean "natively" or "locally" ?
05:34 < StepanKuzmin> Natievely
05:34 <@konobi> ?
05:34 < StepanKuzmin> I want to run TileStream under windows without VMs
05:34 <@konobi> why?
05:35 < StepanKuzmin> Because I need a portable version of this app
05:35 < StepanKuzmin> And it should work under windows
05:35 <@konobi> ha... windows... not portable
05:35 < StepanKuzmin> ?
05:35 <@konobi> it isn't
05:36 < StepanKuzmin> Sorry for my pure language, but I don't understand what do you mean.
05:36 <@konobi> win32 doesn't guarantee any ABI support backwards
05:36 < StepanKuzmin> *poor
05:37 < StepanKuzmin> So I cannot use it?
05:37 <@konobi> tbh, i'd do it in a vm that you can ship to people if you want portability
05:38 < StepanKuzmin> But it mean that I need to install VM to end user?
05:38 <@konobi> they can just download it and run
05:39 < jwm> tilemill itself works on multi oses
05:39 < StepanKuzmin> Okay, I'll think about it, thanks!
05:39 <@konobi> jwm: POSIX oses
05:39 < jwm> windows is listed
05:39 < StepanKuzmin> Yes, TileMill works on Windows, but I need to serve my maps with tilestream
05:40 <@konobi> tilemill itself is nodejs tho
05:40 <@konobi> =0)
05:40 < StepanKuzmin> I know
05:40 <@konobi> but yeah, vmware player is free
05:40 < StepanKuzmin> But I need TileStream because TileMill does not support serving maps as tilestream
05:41 <@konobi> sure
05:41 < StepanKuzmin> Okay, I'll look for VMWare Player
05:41 < jwm> this reminds me
05:41 < jwm> any of you see that silverlight/javascript zooming tech ms did
05:41 < jwm> any node.js like project for that
05:41 < goku22> how do i communicate with a computer inside a router subnet
05:42 < goku22> so far i am able to get a general comcast address
05:42 < goku22> i am not able to reach my computer which is inside the router from a heroku app
05:43 < jwm> so many dang map projects
05:43 < jwm> its amazing
06:04 < mscdex> uh oh, planetnodejs.com is down?
06:07 < tellnes> mscdex: It looks like it.
06:15 <@konobi> http://www.bbc.co.uk/news/world-us-canada-20008687
06:15  * konobi ducks
06:16 < TehShrike> NEWS?
06:16 < TehShrike> Oh come on
06:16 < TehShrike> It's all just dumb
06:17 <@konobi> *shrug* i keep lots of bbc sites open =0P
06:17 < TehShrike> The one guy will win, the next 4 years will suck
06:17 < TehShrike> Economic collapse might happen, but it might not, and then hopefully somebody will still be paying me to write software
06:18 < TehShrike> I CAN PREDICT THE FUUUUUTUUUUUUURE
06:18 < mscdex> i heard obama will make node.js promotion a national priority if elected
06:18 < astropirate> :O
06:18 < TehShrike> lol
06:18 < TehShrike> fuck that, I don't want all the noobs to know about it ;-P
06:18 < mscdex> #justsayin
06:18 < astropirate> thats nothing. I heard Mitt has been a core contributor to Node.js
06:18 <@konobi> i get to vote in 2 countries... one of which i don't even know who the head of state is and the other, i missed the deadline by a day
06:19 < TehShrike> astropirate: that is the most hilarious rumor I've heard so far, and I wish it would spread
06:21 <@Nexxy> lol
06:23 <@konobi> i think the US needs a current events quiz before voting
06:25 < Jakey> so i've been reading it doesn't make sense to have node.js on mobiles
06:25 < Jakey> but the event I/O stuff should
06:25 < Jakey> the core architecture
06:26 <@konobi> ?
06:30 <@konobi> Jakey: very little of what you say makes sense, not sure if this is an XY problem or a ESL problem
06:32 <@konobi> Jakey: you know webOS uses node as a core component?
06:38 < nathan7> konobi: That's cool, I was unaware of that
06:39 < TehShrike> "Mitt Romney is a core contributor to node.js" "Who?"
06:39 <@konobi> "is he on github?"
06:39 < TehShrike> "How many modules does he have on npm?"
06:59 <@konobi> Nexxy: how'd realtime go? i tried to catch the stream, but it sucked and i had to leave halfway through
07:15 < elliottcable> This is an obscure question; but anybody know if I can ask a terminal I’ve been backgrounded in to refresh the prompt? http://stackoverflow.com/q/13227530
07:16 <@konobi> elliottcable: eh?
07:16 < elliottcable> konobi: think about it.
07:16 <@konobi> elliottcable: i am...
07:16 < elliottcable> konobi: when you're backgrounded, and you spit stuff out, it prints *after* the prompt that's already appeared.
07:17 <@konobi> well, if you want to redraw the screen print ^l
07:17 <@konobi> then just exit
07:17 < elliottcable> that's kinda not-fun, and not the best UX: the user can still type at their shell, but they don't see a prompt before their cursor anymore.
07:17 < chovy> howdy
07:17 <@konobi> skip the backgrounding
07:17 < elliottcable> er, this isn't about me *needing* to be backgrounded.
07:17 <@konobi> print ^l
07:17 < elliottcable> It's about me wanting to handle it well (with a quality UX) when I *am* backgrounded, but still need to print alerts or some other data. Make sense?
07:17 < elliottcable> okay, I'll try that
07:32 < astropirate> How does one set library path for node-gyp?
07:36 < astropirate> nevermind silly issue fixed
07:36 < astropirate> ohh man this is going to be sexy once i'm finished :d
07:36 < astropirate> i'll shall make a screencast 
07:37 < astropirate> ok silly question:
07:38 < astropirate> i got this library built with node-gyp, how do i install it with npm?
07:39 < astropirate> ohh I see
07:39 < astropirate> nevermind again
07:47 < chovy> heh
07:47 < chovy> that'll be $5
07:51 <@konobi> pppfffttt... that's $50
07:52 < chovy> i need to raise my rates again
07:54 <@konobi> the was $2.50, right?
07:54 <@konobi> =0P
07:54 < chovy> yea
07:58 < tmiw> hi
07:59 < tmiw> have a question on util.inherits. I have a class Controller/Home that inherits from Utility/ControllerBase that inherits from EventEmitte
07:59 < tmiw> https://github.com/tmiw/postShuffle/blob/master/Utility/ControllerBase.js
07:59 < tmiw> https://github.com/tmiw/postShuffle/blob/master/Controller/Home.js
07:59 < tmiw> for some reason I can't seem to call anything in ControllerBase from Home.
07:59 < harbhub> how do you upload a file to the server without using a url route?
07:59 < tmiw> nor anything in EventEmitter for that matter.
07:59 < harbhub> for instance, i can upload an image (using Express to listen for the POST request)
07:59 < tmiw> am I missing something?
07:59 < harbhub> but it redirects
08:00 < harbhub> i want the view to remain unchanged
08:00 < harbhub> any thoughts?
08:00 < chovy> harbhub: you want to post to your same route?
08:00 < harbhub> maybe
08:00 < harbhub> chovy:  i want to post without it affecting the view at all
08:00 < chovy> app.post('/form', handleImagePost);
08:01 < harbhub> chovy:  i have that
08:01 < harbhub> chovy:  problem is that it redirects the url
08:01 < chovy> whatw do you want it to do?
08:01 < harbhub> i want it to send that post request
08:01 < chovy> don't do the redirect
08:01 < harbhub> to that url
08:02 < harbhub> without
08:02 < harbhub> redirecting
08:02 < harbhub> ...
08:02 < harbhub> it redirects automatically
08:02 < chovy> redirects from where to where and when?
08:02 < harbhub> from localhost:8888/profile
08:02 < harbhub> to localhost:8888/uploadimage
08:02 < chovy> do it with ajax
08:03 < harbhub> how?
08:03 < chovy> i'm guessing you upload the image on profile page and want to post to /uploadimage
08:03 < chovy> use jquery
08:03 < harbhub> i know jquery
08:03 < harbhub> i've made post requests before
08:03 < harbhub> but it has been a while
08:03 < chovy> $('form').submit(function(e){
08:03 < harbhub> go on
08:04 < chovy> $.post('/imageupload', $(this).serialize, function(d){ //add image to page });
08:04 < chovy> });
08:04 < harbhub> post it to http://localhost:8888/uploadimage  ?
08:04 < chovy> put e.prevetnDefault to stop the redirect
08:04 < harbhub> without changing the current state of the dom
08:04 < harbhub> ok
08:04 < harbhub> i will test that right now
08:04 < harbhub> what does serialize do?
08:05 < chovy> it just converts the form fields to name/value prams
08:06 < harbhub> one moment chovy
08:06 < harbhub> i am hacking this up
08:07 < harbhub> what does 'd' represent?
08:07 < harbhub> just a callback?
08:07 < harbhub> with the image file?
08:08 < chovy> d is data coming back in your post response
08:08 < chovy> could be html, or json usually
08:08 < harbhub> how do i send data back?
08:08 < chovy> i would expect it to be the path to your image
08:08 < harbhub> i use socketio to talk to server/client
08:08 < chovy> { image: 'http://whatever' }
08:08 < harbhub> so i don't know the ajax way yet (i will once you teach me)   heh
08:08 < chovy> then you can insert it into the dom
08:09 < chovy> $("form").before('<img src='+d.image+'" />');
08:09 < harbhub> i will append it to the dom
08:09 < harbhub> but not in that method lol
08:10 < harbhub> if i have a callback
08:10 < harbhub> i can make it use the function
08:10 < harbhub> to grab the current user's profile picture 
08:12 < harbhub> chovy:  not working
08:12 < harbhub> when i submit the form
08:12 < harbhub> it reloads the current page...
08:13 < harbhub> i don't want it to do that
08:13 < chovy> add e.preventDefault
08:13 < harbhub> or change the url ever
08:13 < chovy> add e.preventDefault()
08:13 < harbhub> i did
08:13 < harbhub> i will gist you the code
08:13 < chovy> in the submit()
08:17 < harbhub> ok it worked
08:17 < harbhub> thanks chovy
08:18 < chovy> np
08:18 < chovy> how do you upload an image?
08:19 < harbhub> made a form
08:19 < harbhub> method post
08:19 < harbhub> action /uploadimage
08:19 < harbhub> can it a name
08:19 < harbhub> name thumbnail
08:19 < harbhub> then
08:19 < harbhub> used ajax with jquery
08:19 < harbhub> like you said
08:19 < harbhub> listened to submit event
08:19 < harbhub> it posted
08:19 < chovy> what does your /uploadimage do?
08:19 < harbhub> i handled it on the server
08:19 < harbhub> posts the image from the file input
08:20 < harbhub> question
08:20 < chovy> do you just save the profile image to disk or store it n db
08:20 < harbhub> how do i send some text?
08:20 < harbhub> i can make a hidden input
08:20 < harbhub> include that in the form
08:20 < harbhub> and change its value to what i want
08:20 < harbhub> is there another way, though?
08:20 < harbhub> store it to the static files
08:20 < harbhub> lol
08:21 < chovy> var data = $(this).serialize + '&foo=bar';
08:21 < chovy> $.post(url, data, fn);
08:21 < harbhub> ?
08:21 < SomeoneWeird> this isn't really node related any more is it? heh
08:22 < harbhub> don't know (don't really care) but it is programming related and is all about using node server
08:22 < chovy> i'm curious how he handles image u/l in node
08:22 < harbhub> heh
08:22 < onr> how to change favicon, its a node server
08:22 < harbhub> so chovy
08:23 < chovy> onr: i just put favicon.png in my public folder and added the meta tag for it 
08:24 < chovy> onr: if yo' using express:
08:24 < chovy>   app.use(express.favicon(__dirname + '/public/favicon.ico', { maxAge: 2592000000 }));
08:24 < onr> chovy: you're way too nice :)
08:26 < harbhub> chovy:  so
08:26 < harbhub> it isn't working correctly after all
08:26 < harbhub> it doesn't redirect
08:26 < harbhub> but it is in a perpetual "loading" state lol
08:26 < chovy> you said you didn't want to redriect
08:26 < harbhub> right
08:26 < harbhub> but
08:26 < harbhub> i also want it to be done
08:27 < harbhub> rather than in perpetual "loading" state
08:27 < chovy> put up a fiddle
08:28 < chovy> are you sending a areponse back?
08:28 < chovy> in imageupload
08:28 < chovy> res.json(201, { image: 'path/to/file' });
08:28 < chovy> if you don't send a response, the ajax call will never complete
08:28 < chovy> and your success function will never fire
08:29 < harbhub> http://jsfiddle.net/SpkSj/1/
08:29 < harbhub> i need to send a response
08:29 < harbhub> how do i send the response?
08:30 < chovy> harbhub: http://jsfiddle.net/chovy/SpkSj/2/
08:30 < chovy> you forgot hte data
08:30 < harbhub> http://jsfiddle.net/SpkSj/3/
08:32 < harbhub> what do i need to change?
08:32 < chovy> http://jsfiddle.net/chovy/SpkSj/4/
08:32 < chovy> http://jsfiddle.net/chovy/SpkSj/5/
08:33 < chovy> send your data as 2nd arg
08:33 < chovy> then send a json response
08:33 < chovy> woos
08:33 < chovy> http://jsfiddle.net/chovy/SpkSj/6/
08:33 < chovy> your fs takes a callback, put the res.json there
08:33 < [AD]Turbo> hi there
08:36 < harbhub> nope
08:36 < harbhub> chovy
08:36 < harbhub> that displays the response
08:36 < harbhub> that redirected me to /uploadimage
08:37 < chovy> it shouldn't
08:37 < chovy> you get any js errors in console?
08:38 < chovy> your js isn't being executed
08:38 < chovy> add a console.log in your submit handler and you'll know for sure.
08:38 < harbhub> what
08:39 < chovy> $("form").submit(function(e){ e.preventDefault; console.log("HERE") });
08:39 < chovy> then open up the js debugger in firebug
08:40 < harbhub> you are right
08:40 < harbhub> it isnt submitting
08:40 < harbhub> weird
08:41 < harbhub> maybe take off the input submit
08:41 < harbhub> and add a button submit
08:41 < harbhub> and listen for that to be clicked
08:41 < harbhub> ?
08:42 < SomeoneWeird> #jquery plz
08:42 < harbhub> this is both jquery and node
08:43 < dragon> why must
08:43 < dragon> you
08:43 < dragon> type 
08:43 < dragon> like this?
08:43 < chovy> harbhub: http://jsfiddle.net/chovy/Bn8sX/1/
08:43 < harbhub> noted
08:43 < dragon> It'll be a lot easier to follow if you didn't use the enter key as punctuation.
08:43 < dragon> and thank you.
08:43 < chovy> harbhub: i think you are not attaching the submit handler, your button is fine
08:45 < SomeoneWeird> in other news, anyone done any CV stuff with node?
08:48 < chovy> cv?
08:50 < SomeoneWeird> computer vision
08:52 < dragon> harbhub, chovy: I guess you meant e.preventDefault() <-- with these brackets
08:56 < harbhub> dragon:  when i preventdefault it doesn't send the request
08:57 < harbhub> maybe i can use a cookie
08:57 < dragon> harbhub: that's the point.I'm guessing. Do you see the console log output?
08:57 < SomeoneWeird> what are you trying todo?
08:58 < harbhub> someoneweird:  trying to upload an image without causing any url redirects
08:58 < harbhub> dragon:  no
08:58 < simenbrekken> Anyone know how to set your currently active user for npm?
08:58 < chovy> harbhub: did you see my last fiddle?
08:59 < harbhub> fiddle 6?
08:59 < chovy> i gave you a working example
08:59 < chovy> http://jsfiddle.net/chovy/Bn8sX/1/
08:59 < dragon> then it might be $('form').on('submit', function(){...}); I haven't checked the docs though.
08:59 < tmiw> figured out my problem. turns out var self = this is useful
08:59 < chovy> var _self
09:00 < chovy> self is a reserved word
09:00 < SomeoneWeird> um
09:00 < SomeoneWeird> no its not.
09:00 < chovy> yes it is
09:00 < chovy> well, in browser it is
09:00 < SomeoneWeird> heh
09:01 < SomeoneWeird> fuck the browser, this is NODE!
09:01 < dragon> self is a reserved word?
09:01 < SomeoneWeird> https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Reserved_Words
09:01 < SomeoneWeird> it's not.
09:01 < dragon> Yeah, this isn't ##jquery.
09:01 < dragon> and that's what I thought.
09:05 < harbhub> well it still isn't working
09:07 < harbhub> https://gist.github.com/4016159
09:07 < harbhub> that is the error i am getting
09:09 < harbhub> i'm going to sleep
09:09 < harbhub> thanks for all your guys help; hopefully i can figure this out later
09:55 < wiherek> hi
09:55 < purr> wiherek: hi!
09:55 < wiherek> I am looking for a BDD and TDD solutions for node
09:56 < wiherek> something like cucumber + capybara and rspec
09:56 < nathan7> there's mocha and things
09:56 < wiherek> do you have any recommendations?
09:56 < nathan7> and there's vows
09:57 < garrensmith> wiherek: Check out zombie.js or using phantom.js with nodejs
09:57 < wiherek> yea I am looking at zombie.js
09:57 < wiherek> now
09:57 < wiherek> and also at jasmine
09:58 < nathan7> jasmine is somewhat browser-oriented
09:58 < wiherek> Jasmine is a Behavior Driven Development testing framework for JavaScript. It does not rely on browsers, DOM, or any JavaScript framework. Thus it's suited for websites, Node.js projects, or anywhere that JavaScript can run.
09:58 < wiherek> just read that :)
09:59 < nathan7> hmm
09:59 < nathan7> Dunno, I have TDD on my todo list
09:59 < nathan7> Mocha seems cool
10:07 < julien_> Hi!
10:08 <@konobi> wiherek: node-tap
10:08 < julien_> I'm looking for a good tutorial explaining how to structure nodejs server side
10:08 < julien_> does someone has some inputs ?
10:09 <@konobi> julien_: jfdi?
10:09 <@konobi> otherwise a general npm package way is good
10:10 < julien_> jfdi ??
10:10 < nathan7> just fucking duckduckgo it?
10:10 <@konobi> do
10:11 <@konobi> julien_: depends on the app really
10:17 < wiherek> narrowed it down to mocha vs jasmine
10:18 <@konobi> for bdd?
10:19 < wiherek> bdd and tdd
10:20 <@konobi> wiherek: use two different ones
10:20 < wiherek> why
10:20 <@konobi> then you know what the split is
10:21 <@konobi> tdd requires more specific... bdd is a bit more... "ambiguous"
10:26 <@konobi> *shrug* i find it a useful differentiation
10:28 < wiherek> lol
10:29 < wiherek> I guess its easier to say that bdd focuses on behavior and what is rendered, as in acceptance test, while tdd on what actually happens in the code and unit test
10:29 < wiherek> s
10:29 <@konobi> yup
10:30 <@konobi> they have different descriptive behaviour too
10:30 <@konobi> bah... too tired... i do training on testing/qa... ping me
10:30 < SomeoneWeird> $ node
10:30 < SomeoneWeird> > 0.1 + 0.2
10:30 < SomeoneWeird> 0.30000000000000004
10:30 < SomeoneWeird> node u funny
10:42 < julrich> SomeoneWeird: not really a node problem: http://stackoverflow.com/questions/1458633/elegant-workaround-for-javascript-floating-point-number-problem
10:42 < RLa> SomeoneWeird, 0.1 is not exact in floating point math
10:44 < RLa> why not use some rational math lib
10:47 <@konobi> bigint/bignum
10:52 < wiherek> is anyone using flatiron?
10:54 < rvagg> wiherek: on and off but you may find more help in #nodejitsu
10:55 < wiherek> I am finding my app to be a mess and considering using another framework than express
10:58 < rvagg> wiherek: perhaps you want something to enforce a particular structure on you? https://github.com/Obvious/matador
10:59 < wiherek> I dont think I want mvc
11:11 < hkjels> wiherek: express is just a bare minimum. If you take a logk at the examples you'll find mvc, resource-mapping + +
11:11 < hkjels> what kind of application are you creating?
11:13 < jb_> how can i access a submodule through require?
11:14 < jb_> e.g. socket.io hast socket.io-client in a subfolder node_modules, require('socket.io/socket.io-client) wont work
11:14 < jb_> ah.. maybe i should try require('socket.io/node_modules/socket.io-client) then
11:16 < jb_> works, thanks ;)
11:18 < simong> Is there a way to check if an object is a Stream ?
11:22 < nathan7> simong: Check if it has what a Stream should have
11:22 < simong> Yea I'm checking for the object typeof and a _handle method
11:22 < simong> but it seems fairly brittle
11:22 < nathan7> simong: You probably want to check .readable or .writable
11:23 < SomeoneWeird> stream instanceof Stream?
11:23 < nathan7> ReferenceError: Stream is not defined
11:23 < nathan7> Stream is purely a spec
11:23 < simong> ah cool SomeoneWeird, that does it
11:23 < SomeoneWeird> you have to require it nathan7 
11:23 < simong> nathan7: var Stream = require('stream').Stream
11:24 < nathan7> oh, there's an actual stream class now
11:24 < SomeoneWeird> ya
11:24 < nathan7> I never inherited from it, my bad
11:24 < nathan7> I tend to just implement stream methods
11:24 < nathan7> on an eventemitter
11:24 < SomeoneWeird> heh
11:24 < nathan7> Well, that saves me from implementing my own .pipe
11:24 < SomeoneWeird> :)
11:48 < simong> Has anyone tried uploading a file (ie: a readable stream) with mikeal's requestjs lib?
11:49 < simong> It sort of hangs
11:49 < simong> I think it's because the stream has emitted al it's data before requestjs has had a chance to catch it, but that doesn't really make any sense as it all happens in the same tick (I think)
11:58 < nathan7> simong: show me the code
12:52 < topi`> any experience from node.js PaaS offerings?
12:53 < topi`> I guess node.js is less used in PaaS than e.g. python or java
12:58 < milani> topi`, nodejitsu is what you are searching for.
12:58 < milani> and a lot of people use it.
13:00 < topi`> thanks
13:34 < bcave> hi
13:34 < bcave> wondering how many node developers are using zombie for UI testing?
13:34 < bcave> and specifically, if there any "record and browse"
13:35 < bcave> tools being developed for zombie (e.g. firefox plugin or proxy server).
13:53 < BleKohl_> o
13:54 < BleKohl_> > '__proto__' in Object.create(null)
13:54 < BleKohl_> true
13:54 < BleKohl_> why?
13:54 < BleKohl_> it's false in Firefox, but true in Node.js and Chrome
13:59 < milani> BleKohl_, it is false in nodejs 0.8.14
13:59 < BleKohl_> so it was a bug?
13:59 < milani> oh wait.
14:00 < milani> no I had a mistake. it is true.
14:01 < milani> BleKohl_, __proto__ for null object is undefined in firefox, but `null` in nodejs
14:02 < BleKohl_> what does the standard say?
14:02 < milani> so "Object.create(null).__proto__ == null" should return true for both
14:02 < gildean> all objects should have a __proto__ so i guess even a null object has a prototype
14:02 < milani> I guess __proto__ is not a standard at all.
14:03 < BleKohl_> so how do I create a really empty object?
14:03 < gildean> milani: it's not standard, it's created by mozilla
14:04 < gildean> BleKohl_: you mean just a object which is an object, but has no values?
14:04 < BleKohl_> yeah
14:04 < milani> Refers to the prototype of the object, which may be an object or null
14:04 < milani> https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/proto
14:04 < gildean> var something = {};
14:04 < milani> so it should be null not undefined:D
14:04 < milani> by mozilla definition!
14:04 < gildean> creates an empty object
14:05 < BleKohl_> >>> '__proto__' in {}
14:05 < BleKohl_> true
14:05 < purr> BleKohl_: (boolean) true
14:06 < milani> BleKohl_, this may be interesting for u
14:06 < milani> https://github.com/Benvie/nil
14:06 < gildean> BleKohl_: an object has a prototype of an object, thus it has __proto__
14:06 < milani> this is the empties object I know:D
14:06 < milani> lol
14:06 < BleKohl_> I know, gildean, thus my question
14:08 < gildean> BleKohl_: an object can never be without a __proto__ or it isn't an object at all
14:08 < gildean> at least this is how i understand it
14:08 < BleKohl_> I guess I'll have to use Object.prototype.hasOwnProperty then
14:09 < milani> why do u check __proto__ at all?
14:09 < milani> to test if it is an object?
14:09 < gildean> or Object.isPrototypeOf
14:09 < gildean> and
14:09 < gildean> Object.getPrototypeOf
14:09 < BleKohl_> I want an empty associative array
14:09 < spion> Has anyone noticed that exports.somefn = function somefn() { }; sometimes results with somefn being undefined in the local scope? especially on mobile browsers + browserify (Android) ?
14:10 < dschatz> Is there any way to get a lightweight cycle counter like rdtsc from within node?
14:16 < q_no> dschatz, how about reading /proc/stat ?
14:17 < dschatz> q_no: its much heavier weight than what I need, I found process.hrtime which looks appropriate
14:33 < ndrizza> Does anyone have whishes or suggestions for a node.js module? I have to do a project at my university so that would be a great opportunity.
14:34 < gildean> ndrizza: openvpn or ipsec in a module would be nice
14:37 < ndrizza> thanks for your suggestion! that's a good idea.
14:42 <@mbalho> ndrizza: a streaming flac encoder in JS would be cool :D there is a decoder already
14:43 <@mbalho> ndrizza: or in general taking any binary container format and writing a streaming js interface to it is useful
14:48 < ndrizza> @mbalho: thanks! sounds cool. i'm thinking of an audio or video streaming module.
14:56 < ndrizza> gildean: what's a use case you're thinking of for vpn and node?
14:57 < gildean> ndrizza: well, for example have a client-server combination that have their own vpn constructed in between
14:57 < gildean> not having to worry about the firewalls in between or use the system natively
14:59 < onr> TTS
15:00 < onr> um TLS
15:02 < ndrizza> gildean: ah alright thanks.
15:03 < ndrizza> gildean: why ipsec, https is supported from node.js by default. would you like to have some additional simplification/features?
15:10 < doki_pen> has anyone implemented a webrtc peerconnection in nodejs? I mean using the nodejs app as the client for the peerconnection.
15:18 -!- mode/#node.js [+o piscisaureus_] by ChanServ
15:45 < ndrizza> if you have a whish for a node.js module, feel free to suggest something here:
15:45 < ndrizza> https://docs.google.com/spreadsheet/viewform?formkey=dExRSXg4TjRtSUdNY0tmTGdZOGZGMmc6MQ
15:45 < ndrizza> a link to the results is posted on the page
15:46 < RLa> haha, i want some easy-to-use ci server in nodejs (supporting both svn and git, polling and hooks maybe) :)
15:47 < RLa> anyway 450hr for a module is quite a lot
15:48 < ndrizza> thanks, that's just a raw estimation. might be less. :)
15:49 < RLa> you have a whole team there?
15:49 < ndrizza> did you try those?
15:49 < ndrizza> https://github.com/joyent/node/wiki/modules#wiki-continuous-integration
15:50 < RLa> oh, i just searched npm registry
15:50 < ndrizza> no it will be just me working on the project
15:51 < RLa> wow, then 450hrs is massive
15:51 < RLa> we once did a ~1k hours one in team of 6 and the prof considered that a big overkill
15:52 < ndrizza> yeah, that's true. i'll be working on it half of the semester. so don't worry to suggest large projects :D
15:53 < ndrizza> i'll get 15 credit points for it. that's why :D
15:54 < RLa> hm, 2 out of those in the wiki depend on jenkins/hudson and thirds one supports only one project
15:59 < ndrizza> what would you prefer, bamboo?
15:59 < ndrizza> that might help you
15:59 < ndrizza> https://github.com/joyent/node/wiki/Build-Servers
16:00 < mnaser> I'm parsing a JSON file for a config by doing require(..) -- Is it possible that my data is not being reloaded because calling require(..) again is not reloading the file (because it considers it already reloaded?)
16:01 < mnaser> http://nodejs.org/docs/latest/api/globals.html#require.cache
16:01 < mnaser> answered mself
16:21 < BleKohl_> I wish node.js had an int64 type
16:22 < niggler> you can do it in C
16:23 < niggler> *writing a C extension
16:23 < BleKohl_> I want it in JS
16:29 < FunnyLookinHat> BleKohl_, if you really need it you could use a third party JS lib like this: http://closure-library.googlecode.com/svn/docs/class_goog_math_Long.html
16:30 < FunnyLookinHat> I'd think it'd be quicker to just write an extension though given it's fairly straight-forward C++ 
16:31 < FunnyLookinHat> In fact, you might be able to get away with a "long long" type... or something.  Ask in #boost  :D
16:31 < BleKohl_> https://github.com/chrisdew/protobuf/
16:32 < BleKohl_> this currently returns int64s as strings
16:32 < niggler> uint64_t
16:32 < niggler> and int64_t
16:32 < niggler> are the ways to go
16:33 < BleKohl_> if node.js had an intrinsic int64 type just like buffers, it would be much easier to work with protobuf
16:33 < niggler> does v8 even have an int64 type
16:37 < BleKohl_> a decimal string is a nice representation that fits most use cases, if you want anything else, then you have to use the ref module to write it into a 8-byte buffer
16:38 < BleKohl_> quite unwieldy
16:38 < BleKohl_> an intrinsic type would have methods like toNumber, toBuffer, etc
16:38 < niggler> what are you trying to do BleKohl_ 
16:38 < BleKohl_> nothing
17:14 < Cheery> if I have properly compiled image, is there a way to prevent it from recompiling and just force it install?
17:51 < Mezriss> Hi, I've got a stupid question about npm. I've just used n to update npm from node 0.4 to 0.8, but it seens that my npm was left "as is" and still reqires node.0.6 or less. And it seems that there is no separate link to download npm nowdays
17:51 < Mezriss> So what would be the simpliest way to update npm in my situation?
18:13 <@mbalho> if n isnt working i would recommend installing node the normal way
18:13 <@Nexxy> what is "normal"
18:13 < s5fs> Nexxy: hey!
18:13 <@Nexxy> s5fs, ahoy hoy!
18:13 < s5fs> Nexxy: you got a sec to pm?
18:13 <@Nexxy> for you? three.
18:13 <@Nexxy> :P
18:13 <@mbalho> Nexxy: the download button on nodejs.org
18:14 <@mbalho> Nexxy: err 'install' button
18:14 <@mbalho> Nexxy: or git clone and make
18:16 <@Nexxy> mikeal, so bad
18:21 < Raynos> My node process is using a lot of memory
18:21 < Raynos> how do I inspect it without taking it down?>
18:22 < niggler> top
18:23 < larzconwell> top being a shell command.
18:24 < Raynos> Im on joyent
18:24 < Raynos> So I use pmap
18:25 < Raynos> it just says 236mb is used in [ heap ]
18:25 < Raynos> which is useless
18:25 < simong> Does anyone see any errors in this code (piping a stream to disk) http://pastebin.com/Mvh3FpGL ?
18:25 < simong> It intermittently hangs
18:28 < simong> After a while the close event seems to get emitted
18:30 < Raynos> simong: A whitestream should not close
18:30 < simong> I think that happens when the unit test times out, so it might not be related
18:32 < TooTallNate> Raynos: fs.WriteStream emits a "close" event
18:32 < Raynos> TooTallNate: that's crazy.
18:33 < TooTallNate> it's an implementation detail, doesn't have anything to do with the stream interface
18:33 < Raynos> I see
18:33 < Raynos> TooTallNate: any tips on inspecting memory of a running node process on smartos? 
18:34 < TooTallNate> Raynos: have you tried taking a heap dump?
18:34  * mbalho <rimshot>
18:34 < Raynos> Not sure how to do those without taking the process down
18:34 < rodyhaddad> Hey guys, I'm having a bit of trouble with http.request: http://pastebin.com/hgr4HdVy
18:34 < TooTallNate> i'm just trying to think of the answer bnoordhuis would say :p
18:35 < rodyhaddad> The function that I pass to it is never called :/
18:35 < TooTallNate> Raynos: ya, without bringing down the process is a tough call
18:35 <@mbalho> rodyhaddad: npm install request will save you time and energy :D
18:35 < rodyhaddad> console.log("started request") is never being called
18:35 < simong> so erhm, do you see anything wrong with that streaming code TooTallNate ?
18:36 < simong> The files I'm streaming are very tiny if that helps
18:36 < TooTallNate> simong: it
18:36 < TooTallNate> it's hard to tell really
18:36 < Raynos> can I retroactively attach a debugger to a running process?
18:36 < rodyhaddad> mbalho, How would you do a POST request in request? (the documentation wasn't very clear on that that's why I didn't use it
18:37 < TooTallNate> Raynos: yes http://nodejs.org/api/debugger.html#debugger_advanced_usage
18:38 <@isaacs> bradleymeck: hey
18:38 < bradleymeck> isaacs: sup, bit busy
18:38 <@isaacs> bradleymeck: what do yo umean by "semver extensions to he globbing spec it uses"?
18:38 < bradleymeck> ~/X/versions/...>0… where … is something to denote >0 is a semver
18:39 <@mbalho> rodyhaddad: there are about 10 examples of post requests in the readme https://npmjs.org/package/request
18:39 <@isaacs> bradleymeck: oh, like a *.foo-{SEMVER}.tgz or something?
18:39 <@isaacs> bradleymeck: where {SEMVER} is a semver pattern somehow?
18:39 <@isaacs> bradleymeck: no.  no way to do that.
18:39 < simong> Ah the stream that I'm passing in has readable =  false
18:41 < jocafa> anyone want to pay me lots of money to work on my illustration app, no strings attached? *sigh*
18:42 < marshall> mikeal: hey, are you around?
18:43 < ndrizza> if you have a whish for a node.js module, feel free to suggest something here:
18:43 < ndrizza> https://docs.google.com/spreadsheet/viewform?formkey=dExRSXg4TjRtSUdNY0tmTGdZOGZGMmc6MQ
18:43 < ndrizza> a link to the results is posted on the page
18:44 < drudge> ndrizza: wish
18:46 < ndrizza> thanks :D
18:47 < graeme_f> deoxxa[cookies]: hey does your jspit/jsuck stuff work with browserify?
18:49 < graeme_f> *almost* wish i was doing node knockout this weekend :/
18:49 < graeme_f> but i'll make do with nodecopter :D
18:50 < Raynos> Does gcore take down a process?
18:50 < bradleymeck> mikeal: are there any examples of aws: in request lying around im getting bad auth back
18:51 < mikeal>  hrm....
18:51 < mikeal> just the docs
18:51 < mikeal> i use it for S3
18:51 < mikeal> someone told me that some other amazon services have an entirely different auth scheme
18:51 < mikeal> but i haven't gotten an solid links yet
18:52 < BleKohl_> data:    Forever detected script exited with code: null
18:52 < BleKohl_> does this mean node.js exited because it had nothing to do and all connections were closed?
18:58 < BleKohl_> shouldn't setInterval keep it running forever?
19:00 < jeremyw> Can any of you suggest a Node.js static website generator similar to jekyll for Ruby?
19:00 < jeremyw> Figured I'd ask here after looking at the google search results.  (Not very promising.)
19:02 < bradgignac> jeremyw: blacksmith
19:03 < jeremyw> I'll check it out.
19:04 < jeremyw> Thanks bradgignac, looks promising.
19:04 < superjoe> BleKohl_, yes it should. are you sure something did not clearInterval?
19:05 < BleKohl_> never mind, apparently forever.js logs manual restarts as "exited with null"
19:17 < sayd> is there a difference between q and q-comm in npm repo?
19:24 < joeandaverde`> greetings friends
19:26 < CoverSlide> joeandaverde`: hello enemies
19:26 < joeandaverde`> :)
19:26 < Leo__> Hello, if i have a array of objects in js and then i use forEach and pass the value of one of this objects to a function, will i be passing the reference to this object in the array? Or??
19:27 < CoverSlide> Leo__: all objects are passed via reference
19:28 < CoverSlide> Leo__: the only way to get a copy of an object is to deep clone it somehow, which would have to be done manually
19:30 < Leo__> Hmm.. Thanks..
19:40 < marshall> mikeal: are you there mate? you just responded to my pull request saying that the oauth tests don't pass. how can I run the tests myself?
19:41 < marshall> mikeal: `npm test` seems to be working...
19:51 < graeme_f> any ideas how I can troubleshoot a segmentation fault i'm getting in node? here's a travis build that failed: https://travis-ci.org/#!/GraemeF/wordburglar
19:52 < graeme_f> i didn't think it would be possible - would it have to be a native module or is it possible to get a seg fault from v8?
19:52 < hendore> Hi everyone, I'm still experimenting with node, and want to put together a single page application on top of express. However I want to use url's aswell so that pages can be bookmarked/shared, anyone have any tips?
19:53 < hendore> on first request, im going to serve the full html document to the client, then the user interacts with elements which sends requests to server which returns json results back to the client to update their view.
19:54 < hendore> which is fine if the user visits the site at the root domain, but if a user visits /object/action then the main file is not served.
19:54 < hendore> I was thinking maybe serve the main file on all routes if it doesn't begin with api/ or something along those lines, anyone else have ideas?
19:55 < tnorris> nlf: is there a reason why you wrote your own readInt32 for a Buffer, instead of using one of the built-in methods?
19:57 < jdcravens> is it uncool to push a new module to npm while in beta?
19:57 <@Nexxy> no
19:57 < jdcravens> thnx
19:57 < nlf> tnorris: because benchmarking showed mine was faster
19:58 < tnorris> nlf: good enough for me.
20:01 < Leo__> Is forEach a asynchronous function or?
20:01 < nlf> it's synchronous
20:01 < tnorris> nlf: don't know if this helps you, but you can actually wrap a buffer with different Typed Array views, and write to it as such.
20:02 < nlf> tnorris: how do you mean?
20:02 < tnorris> nlf: like so: var view = new Int16Array(<my_buffer>);
20:02 < nlf> does that work for arbitrary indexes too?
20:03 < tnorris> nlf: yeah. and the offset is calculated on the size of the view automatically.
20:03 < Vendethiel> is there a way just to Buffer.readBytes ?
20:03 < Vendethiel> or do I have to .slice
20:03 < nlf> tnorris: that's interesting.. are the view types documented somewhere? i don't recall seeing them in the node docs
20:04 < nlf> Vendethiel: you have to .slice
20:04 < tnorris> nlf: it's part of the es6 spec, but is implemented in v8.
20:04 < Vendethiel> eh :(.
20:04 < nlf> if you want a buffer as the result anyway
20:04 < tnorris> nlf: https://developer.mozilla.org/en-US/docs/JavaScript_typed_arrays
20:04 < nlf> or you could use .copy and write it to a new buffer
20:04 < nlf> tnorris: very interesting, i'll do some testing. thanks for the suggestion
20:05 < tnorris> not a problem. I think that may offer you some speed improvements. but as far as a memory leak goes, nothing stands out. I'll give it another look though.
20:05 < nlf> yeah, i think i actually ended up tracking it to async.queue
20:06 < nlf> or possibly how i was using async.queue
20:06 < nlf> either way, i removed that and the leak went away
20:06 < tnorris> ah, ok. that's good to know.
20:11 < nlf> i'll do a little benchmarking to see if the typed arrays are any faster for 32 bit ints
20:12 < jrajav> jsperf plz
20:15 < nlf> my suspicion is instantiating the typedarray is going to make it slower
20:18 < tnorris> nlf: wouldn't surprise me.
20:18 < nlf> yeah, if i create the view before the benchmark it's quite a bit faster
20:18 < nlf> but instantiating the view in every iteration makes it very slow
20:20 < tnorris> bugger. wish it was possible to reuse a view. instantiation sucks when performance is necessary.
20:20 < darach> Resuing views (& buffers) would be good perf wise.
20:20 < darach> Fork. Reusing, natch.
20:21 < tnorris> darach: yeah. while you can use multiple views on a single buffer, I don't know if a way to reassign a view to another buffer.
20:22 < nlf> yeah, if you already knew your offsets and everything, having all of your views up front and acting on those would be really efficient
20:23 < darach> Yup. Widefinder (Tim Bray) benchmark is good for looking into that.
20:23 < nlf> the other thing that kills it for me is it looks like the Uint32Array only supports little endian, and i need big endian
20:23 < nathan7> mikeal: Hey
20:23 < nathan7> mikeal: How's this agent magic in request work?
20:23 < mikeal> it's not request, it's node core
20:23 < mikeal> request makes a few things simpler
20:24 < nathan7> mikeal: hrm, I must be looking at the code wrong
20:24 < nathan7> mikeal: interesting
20:25 < mikeal> the agent is something that core uses to do pooling
20:25 < mikeal> request has some conveniences that it can pass off to core
20:28 < darach> A good example is, raw stream reading a file I can do a read at a rate of 115MB/sec (SSD), but if I read by line (using byline) then perf drops to ~77MB/sec.
20:28 < tnorris> nlf: in the v0.8.0 blog post isaacs said that node will eventually replace Buffers with Typed Arrays. just fyi.
20:28 < nlf> yeah, i'm keeping an eye out for it
20:29 < nlf> my code can be adapted fairly easily i think
20:29 < Vendethiel> I don't understand, I'm affraid :(. `addVector: { vector++; if (hasVector()) continue addVector; }`
20:29 < Vendethiel> "undefined label 'addVector'"
20:30 < nathan7> ..are you trying to do goto?
20:31 < Vendethiel> it's the same thing
20:31 < nathan7> so you are trying to make you code unreadable
20:32 < Vendethiel> maybe I am
20:33 < nathan7> mikeal: I'm trying to figure out how to do rate limiting stuff
20:34 < mikeal> rate limiting how?
20:34 < mikeal> requests per second or concurrent requests?
20:34 < gumble> hey you can only run node.js in a v8 environment?
20:35 < CoverSlide> not sure you can do continue on a labeled block, i think only break works, continue i think only works on loops
20:35 < gumble> so where do I host websites using node.js?
20:35 < visnup> nathan7: async.queue for concurrent requests?
20:35 < nathan7> mikeal: requests total
20:35 < nathan7> mikeal: GitHub's rate limiting.
20:35 < nathan7> mikeal: I know when I have 0 requests to go
20:37 < Vendethiel> nathan7: I have reasons ! :(
20:37 < Vendethiel> (no, I just want to try that)
20:41 < jrajav> gumble: You could try Heroku
20:41 < niggler> fuck heroku
20:42 < jrajav> That would be more difficult
20:43 < niggler> you sir don't have much experience fucking PaaS
20:43 < CoverSlide> forget heroku use engine yard
20:44 < LouisT> niggler: i hope no one has experience fucking PaaS
20:44 < nathan7> FaaS. We call that a whorehouse.
20:44 < CoverSlide> niggler's mom is named PaaS
20:45 < niggler> i am the child of a PaaS, that is true
20:45 < ndrizza> if you have a whish for a node.js module, feel free to suggest something here:
20:45 < ndrizza> https://docs.google.com/spreadsheet/viewform?formkey=dExRSXg4TjRtSUdNY0tmTGdZOGZGMmc6MQ
20:48 < Cheery> https://github.com/cheery/node-udev
20:49 < Cheery> It's bit like I'm defecating these node bindings
20:49 < niggler> it'd be cool to control a usb light on my desk (delcom 904006) with node
20:49 < tnorris> nlf: here's possibly why you had the memory leak (under "Timers") http://coding.smashingmagazine.com/2012/11/05/writing-fast-memory-efficient-javascript/
20:49 < niggler> i use python at the moment :/
20:49 < Cheery> I guess my node addon diarrhea comes to end soon. It's just that there weren't much of what I needed. :)
20:49 < Leo__> I didnt find anything on the node.js api about this so... When i use reqest.abort(); is the request.on('error') event triggered? I generally use request.abort when i get a socket error..
20:50 < nlf> tnorris: entirely possible it's something like that that i was doing wrong
20:50 < niggler> Cheery: http://www.delcomproducts.com/productdetails.asp?productnum=904006
20:50 < niggler> do this!
20:50 < nlf> not sure, i just implemented a really simple array based queue and the issue is gone
20:50 < Cheery> niggler: looks fairly cute!
20:50 < niggler> light, sound, and button
20:51 < Cheery> niggler: but I saw another pretty RGB controllable USB light.
20:51 < Cheery> niggler: also, I saw that one webcam-enchanted usb missile launcher
20:51 < niggler> i use this to signal if something broke, but I'm always looking for something better :)
20:52 < Cheery> niggler: np. it's fairly pretty device
20:52 < Cheery> huh. no libudev.h at my raspi :o
20:52 < niggler> oh that reminds me: is there growl support in node?
20:52 < Cheery> well that's easy to fix
20:53 < niggler> or do have to farm everything out to growlnotify?
20:53 < CoverSlide> growl support built into node?
20:53 < Cheery> there's one thing I probably have to do for that lib of mine. That's filtering mechanisms.
20:53 < CoverSlide> no
20:53 < nathan7> why the heck would growl be in node core?
20:55 < niggler> oh no not in node core
20:55 < niggler> as something separate
20:55 < CoverSlide> niggler: the node-growl package uses growlnotify
20:57 <@Nexxy> \o/
20:58 < CoverSlide> niggler: https://github.com/WarheadsSE/node-gntp
20:58 < chovy> howdy
20:58 < CoverSlide> is that what you're looking for?
20:59 < niggler> yeah CoverSlide 
20:59 < CoverSlide> sweer
21:00 < nwillems> Hello there. 
21:00 < fakewaffle> me?
21:00 < CoverSlide> nwillems: Hello here.
21:00 < CoverSlide> only real waffles allowed
21:00 < CoverSlide> like mitt romney
21:00 < niggler> hey don't be hating on our future president
21:01 < Cheery> https://groups.google.com/forum/?fromgroups=#!topic/nodejs/ru2gKBEW6oU
21:01 <@Nexxy> lol
21:01 < nwillems> Damn. I just ate a liqourice pipe. Can I please stay? :-)
21:02 < chovy> the libertarian guy?
21:03 < niggler> be patriotic.  vote for "NSA did 9/11" party
21:03 < niggler> apparently in NJ http://www.jeffbossforpresident.org/ shows up on the ballot
21:04 < chovy> ahh, yes, the NSA prefers all caps
21:04 < chovy> that must be it
21:05 < niggler> http://twicsy.com/i/WMLtAc
21:05 < niggler> yet based on placement apparently that party is more serious than the libertarian
21:05 < chovy> wow
21:05 < chovy> how does that happen??
21:06 < niggler> i don't think it costs that much to show up on the presidential ballot in NJ
21:06 < niggler> pay christie a few bucks or give him a blow job and you can show up on the ballot too
21:06 < niggler> socialist workers party
21:09 < nwillems> can I be unserious for a moment? I have some weirdness with the mkdirp module :( I have a small script that runs and keeps to workers alive(aka respawns) as child procceses, when the workers start they make a log directory for themself but at somepoint after 4 hours one of the workers decide that it doesn't have access to the directory structure anymore and therefore throws an EACCES error.
21:09 < dk01> party people!
21:10 < nwillems> the weird thing is that during the four hours, both workers has crashed a couple of times without errors.
21:11 < jtoft> ow
21:11 < ack006> hi all, can anyone tell me why this script (supposed to number lines read from stdin) bombs with a 'Maximum call stack exceeded' in string_decoder.js?
21:11 < ack006> http://paste.ubuntu.com/1335815/
21:13 < MI6> joyent/libuv: Bert Belder master * 6620e61 : windows: un-break the build  It was broken in 1d85815. - http://git.io/FGE8dw
21:13 < ack006> Uncommenting the process.stdout.write makes the script work
21:15 < MI6> joyent/libuv: Bert Belder v0.8 * 4c9e42d : windows: un-break the build  It was broken in fb64948. - http://git.io/Ct_oJA
21:20 < larzconwell> ack006,  The script says max call stack exceeded if it's uncommented for me, but changing the terminal option to true fixes it for me.
21:22 < ack006> larzconwell: thanks for looking into this. problem is: not specifying terminal: false gives me doubled output (unprocessed + processed) even when piping something into the script
21:22 < BleKohl_> what's the easiest way to get an actual buffer from its string representation (like <Buffer 30 30 30>)?
21:22 < niggler> ack006: that looks strange.  its as if a line event is being triggered when you write
21:22 < ack006> niggler: seems like it :-(
21:23 < ack006> I'm testing with: `cat somefile | node linecount.js`
21:24 < BleKohl_> new Buffer('30 30 30'.split(' ').map(function(str) {return parseInt(str, 16);})) is a bit verbose
21:26 < CoverSlide> ack006: why are you writing back to rl?
21:26 < ack006> isn't that supposed to write to the output part of the interface?
21:27 < CoverSlide> hmm
21:27 < CoverSlide> should be
21:27 < ack006> seems bit odd to specify input/output in the interface and then use console.log or process.stdout.write anyway...
21:27 < niggler> CoverSlide: it should be writing to output which in this case is different from input
21:27 < chovy> how should i store images on server? 
21:27 < CoverSlide> chovy: in files
21:27 < niggler> the more strange question is the default behavior
21:28 < niggler> if you do nothing; rl.on('line', function(line){});
21:28 < niggler> it writes all the data to stdout
21:28 < context> how does it know you did nothing
21:28 < ack006> niggler: that's what I want
21:28 < niggler> context: if you have a loop that listens on input and does nothing
21:28 < niggler> why should you see the original content echoed back?
21:29 < context> cause thats how terminals work... you CAN disable echo-back on input
21:29 < context> thats what apps do when requesting a password in the terminal
21:29 < niggler> how do you do it in node
21:29 < CoverSlide> http://nodejs.org/api/tty.html#tty_tty_setrawmode_mode
21:29 < CoverSlide> i think
21:30 < niggler> that assumes its a ttyp
21:30 < CoverSlide> well in a pipe it doesn't get echoed back automatically
21:30 < niggler> right but context seems to think that's correct behavior
21:31 < context> the terminal to echo back input? thats how 99.99% of your terminal interaction works...
21:31 < ack006> CoverSlide: in my case it did echo in some earlier test, unless I specify terminal: false
21:31 < niggler> when you run with pipes
21:31 < ack006> niggler: yep
21:31 < niggler> you don't expect the output pipe to see the input pipe's contents if the process does nothing
21:31 < CoverSlide> yeah i've never used the readline module before, mostly just hooked up 'data' to a split() and then emit 'line'
21:31 < niggler> never never never 
21:32 < CoverSlide> i did that before readline was there, never had issues
21:32 < CoverSlide> i don't know what magic readline adds to that
21:32 < ack006> CoverSlide: try to do split() on a 4GB file :-)
21:32 < context> if readline is seeing your input on the output stream (i dont even see how you get to the streams on readline) then you're probably causing it
21:32 < context> ignore the (...)
21:33 < CoverSlide> ack006: on a stream, it's only 4096b per 'data' chunk i think
21:33 < CoverSlide> i cant remember the default chunk size for a fs readablestream
21:33 < context> prolly depends on the fs
21:33 < ack006> CoverSlide: aha, but you will have to join partial lines too -- very messy
21:33 < CoverSlide> not that messy
21:35 < CoverSlide> readline seems almost specifically designed for ttys.
21:35 < ack006> CoverSlide: see this answer: http://stackoverflow.com/questions/6156501/read-a-file-one-line-at-a-time-in-node-js/8691534#8691534
21:35 < context> coverslide: that is what its designed for
21:35 < ack006> whole lot of hoopla to emulate perl's 'while(<>)' :-)
21:35 < context> it doesn't make much sense anywhere else
21:36 < CoverSlide> except for all the line-terminated filetypes
21:36 < CoverSlide> csv, for example
21:37 < CoverSlide> and any unix utility output
21:37 < CoverSlide> twitter steam
21:37 < CoverSlide> *stream
21:38 < ack006> CoverSlide: slightly less messy solution, but still wayy to wordy and bug-friendly to me: http://stackoverflow.com/a/6833016/588561
21:38 < niggler> wow this is strange
21:38 < niggler> https://github.com/joyent/node/blob/master/lib/readline.js#L295
21:38 < niggler> ack006: it clearly was a conscious decision
21:38 < CoverSlide> one thing you can use is node-lazy and its Lazy().lines()
21:39 < CoverSlide> that is a nice general-purpose line-reader
21:39 < niggler> I've seen a few quirks with lazy
21:39 < ack006> CoverSlide: yup, thanks, I'm actually using that until I figure out why readline doesn't do what I want :-)
21:40 < ack006> lazy is very cool stuff, also for many other things which wouldn't work async otherwise
21:43 -!- mode/#node.js [+o piscisaureus_] by ChanServ
21:46 < andrew9184> hello all
21:46 < glasser> Is there a simple way for a script to require that it's running on 0.8 or higher? I mean, I can do a regexp against process.version or process.versions.node, but just wondering if there's a built in function to do that
21:47 < niggler> semver
21:47 < glasser> (ideally without requiring semver)
21:47 < dragon> glasser: package.json, specify engine
21:47 < dragon> http://package.json.jit.su/
21:47 < dragon> See the last option.
21:48 < glasser> sure, that works if people are properly running via npm, but i've gotten bug reports from users just manually running "node myscript.js"
21:48 < glasser> with 0.6
21:48 < dragon> Other than that, there's not much you could do. If someone runs it on an older version, let it fail with an error or print a warning?
21:48 < epitron> i wish json had comments :\
21:48 < dragon> Oh, in that case print a warning.
21:48 < dragon> epitron: that'd defeat the purpose, no?
21:49 < glasser> Yes, I'd like to do that. I'm just wondering if there is a simpler way than regexping myself against process.versions. I guess I can just use semver (and hope they haven't screwed up installing that too)
21:49 < epitron> it would make it a lot easier to use for config files
21:49 < dragon> epitron: perhaps. Alternatively, it's easier to write a config file generator.
21:50 < epitron> i asser that it's easier to NOT write a config file generator :)
21:50 < epitron> *assert
21:50 < glasser> also, this confuses me:
21:50 < glasser> > require('semver').gte('v0.6.10', 'v0.8')
21:50 < glasser> true
21:50 < epitron> greater than or equal
21:51 < darach> CoverSlide: For line-reading try 'byline' - its 100% compatible with streams and pipes, which is very nice.
21:51 < glasser> right. why is 0.6.10 >= 0.8?
21:51 < andrew9184> anyone have any simple node.js apps to show ?
21:51 < epitron> yeah, that is backwards :D
21:51 < CoverSlide> darach: that was for ack006 
21:51 < darach> Aagh, to ack006 then :)
21:52 < epitron> it would be better if it was: SemVer("v0.6.10").gte("v0.8")
21:52 < epitron> and that it worked
21:52 < CoverSlide> hmm then it would have to instantiate an object
21:52 < epitron> exactly
21:52 < epitron> let's get object oriented people!
21:52 < CoverSlide> why go through that trouble
21:53 < glasser> epitron: er, is that how the semver module works?
21:53 < epitron> readability
21:53 < epitron> glasser: nope
21:53 < niggler> epitron: I've seen conflicting reports on comments
21:53 < glasser> i'm just saying, i don't understand why this is doing what it is doing
21:53 < CoverSlide> I disagree
21:53 < epitron> i'm just rewriting the api :D
21:53 < niggler> some claim that comments should be parsed properly but shouldn't be generated by writers
21:53 < epitron> CoverSlide: cognitive ergonomics my man!
21:53 < epitron> you can't mistake which one is the operator and which one is the operand
21:54 < CoverSlide> so something like strcmp(str1, str2) isn't as readable `new String(str1).compare(str2)`
21:54 < CoverSlide> epitron: hmm, suppose you're right
21:54 < CoverSlide> for that case anyways
21:55 < andrew9184> are there any speed differences between the two ?
21:55 < epitron> yeah, it's always a case-by-case thing
21:55 < CoverSlide> the the way it is is much more efficient
21:55 < epitron> context is important
21:55 < epitron> andrew9184: probably, but luckily version checking is only done once :)
21:55 < glasser> Oh. I guess you always have to specify all three parts
21:55 < glasser> 0.8.0
21:55 < epitron> and don't forget how stupidly fast computers are
21:55 < CoverSlide> glasser: http://semver.org/
21:55 < epitron> node.js does all its arithmetic in floating point ^_^
21:56 < glasser> CoverSlide: yeah, got it now. would be nice if the comparison functions threw on invalid input :(
21:56 < CoverSlide> perhaps, but why go through the trouble of instantiating an object that you're going to throw away very quickly anyway?
21:57 < epitron> *shrug*
21:58 < epitron> i like the ruby philosophy of maximizing programmer happiness, and optimizing the parts that matter
21:58 < epitron> make it; make it fast
22:03 < CoverSlide> I'm pretty sure any ruby library that uses semver simply does a string compare and doesn't instantiate a new "Semver" object
22:11 < tnorris> epitron: not actually. the v8 optimization compiler will detect if only integers are used, and do such.
22:11 < epitron> tnorris: okay, i retract that argument...
22:12 < epitron> and offer that there are tons of slow things that you do in JS :)
22:12 < epitron> micromanaging the creation of objects is silly
22:12 < epitron> i'm sure V8 also optimizes short-lived objects, as most VMs do
22:13 < epitron> CoverSlide: and in ruby, everything is an object. a string is a new object... a method call creates new frame objects... there are objects everywhere :D
22:13 < epitron> in JS, aren't functions also objects?
22:13 < epitron> function() { } => new object
22:13 < CoverSlide> epitron: in JS, everything is an object as well
22:14 < epitron> so what're you concerned about? :)
22:14 < andrew9184> http://www.youtube.com/watch?v=_yZHbh396rc
22:14 < andrew9184> have you guys seen that?
22:14 < tnorris> epitron: there are a lot of ways to maximize your code. Like using Object.freeze() on a prototype so it doesn't change after instantiation can allow for some major speed improvements.
22:14 < andrew9184> it's humourous :)
22:15 < CoverSlide> andrew9184: that's like almost 1 year old
22:15 < andrew9184> i know :)
22:15 < epitron> tnorris: that makes sense.. GC passes would be able to skip it
22:16 < clever> andrew9184: lol
22:16 < tnorris> epitron: um, nope. everything is essentially a function. check Object.__proto__
22:16 < epitron> tnorris: nope to what? that GC skips frozen objects?
22:16 < tnorris> then objects are built on top of that.
22:16 < tnorris> epitron: sorry, nope to everything being an object.
22:16 < epitron> that was CoverSlide :)
22:16 < Domenic> Wow guys, read the spec
22:16 < Domenic> Not everything is an object
22:16 < Domenic> But not everything is a function either
22:17 < Domenic> There are objects and primitives
22:17 < Domenic> Functions are objects
22:17 < Domenic> Boolean, Null, Undefined, Number, etc. are primitivies
22:17 < Domenic> *primitive types
22:17 < epitron> sounds sensible
22:17 < Domenic> The "constructor functions" Boolean, Number, etc. are functions responsible for creating "boxed" object versions of those primitives
22:17 < dmactough> Domenic: primitivies sounds cute!
22:17 < tnorris> Domenic: sorry, yeah. I forgot to mention primitives. but don't forget that Objects are a type of Function (at least internally)
22:18 < Domenic> But boxed primitives are horrible things, e.g. new Boolean(false) !== new Boolean(false)
22:18 < Domenic> Objects are not even close to a type of function
22:18 < epitron> haha
22:18 < Domenic> Functions are callable objects
22:18 < Domenic> I.e. objects with [[Call]] behavior
22:18 < niggler> your mother is a callable object
22:18 < CoverSlide> Primitive types still inherit from Object
22:18 < Domenic> Primitive types DO NOT inherit from anything
22:18 < Domenic> Boxed wrappers, e.g. new Boolean(false), do inherit from Object
22:18 < Domenic> But nobody uses those
22:18 < niggler> >>> Object.prototype.foo = "bar"; 3..bar
22:18 < purr> niggler: undefined
22:19 < niggler> >>> Object.prototype.foo = "bar"; 3..foo
22:19 < purr> niggler: (string) 'bar'
22:19 < niggler> >>> Object.prototype.foo = "bar"; "foo'.bar
22:19 < purr> niggler: SyntaxError: Unexpected token ILLEGAL
22:19 < epitron> Domenic: do you agree with my assertion of, "don't worry so much about micro-optimizing object creation, because it doesn't really matter in most cases"?
22:19 < niggler> >>> Object.prototype.foo = "bar"; 'foo'.bar
22:19 < purr> niggler: undefined
22:19 < CoverSlide> >>> Object.prototype.x = function(){return 'x'};[(1).x(),false.x()]
22:19 < purr> CoverSlide: (object) ['x', 'x']
22:19 < niggler> wow i suck at typing
22:19 < Domenic> epitron: definitely
22:19 < niggler> >>> Object.prototype.foo = "bar"; false.bar
22:19 < purr> niggler: undefined
22:19 < epitron> Domenic: \o/
22:19 < niggler> >>> Object.prototype.foo = "bar"; true.bar
22:19 < purr> niggler: SyntaxError: Unexpected token ILLEGAL
22:19 < Domenic> When you do 'foo'.bar or 3..bar you are creating a transient boxed object
22:19 < Domenic> That's why if you store something on 'foo' it won't come back
22:19 < clever> >>> Array(16).join("wat" -1) + " Batman!"
22:19 < niggler> how about true.bar
22:19 < purr> clever: (string) 'NaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN Batman!'
22:20 < Domenic> >>> var x = 'foo'; x.bar = "blah"; x.bar
22:20 < purr> Domenic: undefined
22:20 < epitron> watman
22:20 < clever> andrew9184: look at what youve done!
22:20 < andrew9184> hehe
22:20 < epitron> thanks for the clarification Domenic
22:20 < Domenic> Anytime!
22:20 < ack006> darach: thanks for the tip :-) I'll will look into it.
22:20 < tnorris> >> Object.__proto__
22:20 < purr> tnorris: (function) Empty
22:21 < andrew9184> i'm a node.js beginner.  anyone have any good resources to learn? 
22:21 < CoverSlide> >>> Object.prototype.x = function(){this.b || this.b = 0;this.b += 1;return this.b};var s = 1;[s.x(),s.x(),(1).x(),false.x()]
22:21 < purr> CoverSlide: ReferenceError: Invalid left-hand side in assignment
22:21 < CoverSlide> >>> Object.prototype.x = function(){this.b = this.b || 0;this.b += 1;return this.b};var s = 1;[s.x(),s.x(),(1).x(),false.x()]
22:21 < purr> CoverSlide: (object) [1, 1, 1, 1]
22:21 < CoverSlide> >>> Object.prototype.x = function(){this.b = this.b || 0;this.b += 1;return this.b};var s = 1,o={};[s.x(),s.x(),(1).x(),false.x(),o.x(),o.x()]
22:21 < purr> CoverSlide: (object) [1, 1, 1, 1, 1, 2]
22:22 < CoverSlide> dammit he's right
22:22 < ako> strings are immutable. someString.foo=bar creates a temporary string wrapper object which is immediately discarded
22:22 < ako> hence no error :>
22:22 < tnorris> Domenic: in v8. the internal prototype (__proto__) of Object points to Function.prototype. Observe: 
22:22 < tnorris> >> Object.__proto__ === Function.prototype
22:22 < purr> tnorris: (boolean) true
22:24 < niggler> >>> Object.prototype.fuckable = true; console.log(true.fuckable); var s = true; console.log(s.fuckable); var t = [ true ]; console.log(t[0].fuckable); var u = [ s ]; console.log(u[0].fuckable);
22:24 < purr> niggler: undefined; Console: true, true, true, true
22:26 < tnorris> iirc, and based on niggler's code, primitives don't instantiate all their own properties when they're created. they only instantiate the properties that are called, when they're called.
22:27 < DaMorpheuS> who knows how to use partials?!?
22:28 < DaMorpheuS> I can't get it to work somehow
22:28 < darach> andrew9184: Try something you're already familiar with in another environment. First thing I wrote in Node.js was a websocket implementation...
22:29 < CoverSlide> DaMorpheuS: partials in what?
22:29 < pastylegs> Has anyone got experience integrating node with django? 
22:30 < CoverSlide> pastylegs: how .. what ... what part of django and integrating into what part of node?
22:30 < CoverSlide> wsgi? django templates?  websockety stuff?
22:31 < pastylegs> haha. I'm planning a web app. It'll be a single page app but I'm planning using django to implement the front-of-house stuff; signups, membership, charging, email. I'm wondering how to handle authentication between django and node.
22:32 < pastylegs> node will handle the guts of the app. I'd like to signup with django and afterward have node handle the authentication for the app
22:32 < CoverSlide> umm ... what are you planning on using node for?
22:32 < timeturner> yeah
22:32 < timeturner> if you're using django, no need for node
22:32 < pastylegs> basically for everything on the application side of things 
22:32 < timeturner> ah
22:32 < pastylegs> sorry, not explaining this very well. I have a single page app in mind to be powered by node. It will do the guts of the work
22:32 < pastylegs> I want to manage the website aspect of the app (CMS, frontage, signup etc.) via django
22:33 < CoverSlide> so.. you want django to make calls to node, and node will be doing all the work ... 
22:33 < pastylegs> pretty much, once a user has signed up initially, they will be handed over to the app (node) from there
22:34 < epitron> CoverSlide: i just benchmarked comparing with a function, or with an object
22:34 < epitron> for 10,000,000 comparisons, it's 328ms vs 168ms
22:34 < epitron> :D
22:34 < CoverSlide> sounds like something noone ever in the history of life has ever wanted what you are asking for
22:35 < niggler> what's django?
22:35 < epitron> DJANGO/NODE FRANKENSTEIN
22:35 < epitron> THROW IN SOME PHP FOR GOOD MEASURE
22:35 < GtoXic> Hi
22:35 < niggler> are we talking about that new movie?
22:35 < epitron> niggler: let me google that for you
22:35 < pastylegs> I'm not sure why that would be the case. It's much faster to prototype the boilerplate website stuff in django, but when it comes to the actual implementation of the app, node makes sense
22:36 < niggler> google reveals django unchained
22:36 < niggler> an upcoming film by quentin tarantino
22:36 < CoverSlide> maybe
22:36 < epitron> orly
22:36 < epitron> niggler: that sounds cool
22:36 < CoverSlide> how are you planning on having them talk to eachother?
22:36 < GtoXic> I have http://pastie.org/private/ivkg3dxp0kh7vp8dkrjbjq and I want to get what getModules() returns so that I can display the results on a webpage using ejs. Line 117 is the main point of interest
22:36 < GtoXic> Any ideas?
22:37 < pastylegs> that's what I'm trying to figure out. i was thinking of creating the user on the django side and publishing it to redis for node to pick up 
22:37 < epitron> "With the help of his mentor, a slave-turned-bounty hunter sets out to rescue his wife from a brutal Mississippi plantation owner."
22:37 < epitron> that's going to rock
22:37 < niggler> epitron: http://imgur.com/S2pfc
22:37 < niggler> gotta love duckduckgo
22:38 < andrew9184> has anyone subscribed to the peepcode screencasts for node.js?  are they god ?
22:38 < andrew9184> *good
22:39 < CoverSlide> well, probably best to have all your data handled by an internal webservice. could be node, I've worked in shops that used Java, Erlang for this layer too.
22:39 < niggler> fuck java
22:39 < larzconwell> niggler,  Use the "!dj" and It'll redirect to Django docs.
22:40 < CoverSlide> but basically consists of making http calls from the webapp to the service, the service will do the heavy lifting, then send a http response back to the webapp
22:40 < GtoXic> anybody able to help me then?
22:40 < niggler> ooh that's cool larzconwell 
22:40 < niggler> i wish node worked
22:41 < niggler> DDG still points to v0.4.7 docs
22:41 < CoverSlide> fuck duckduckgo
22:41 < niggler> https://duckduckgo.com/?q=nodejs+process magic box points to http://nodejs.org/docs/v0.4.7/api/all.html#process
22:42 < niggler> CoverSlide: fuckfuckgo?
22:42 < CoverSlide> if I were you, I'd handle all that from node, and not have django do any direct connections to the database
22:43 < CoverSlide> but take what i say with a grain of salt
22:43 < larzconwell> Use "!node" to redirecto to Node docs
22:43 < niggler> yep that worked larzconwell -- why does magic box still point to an older version?
22:43 < CoverSlide> !node require.main
22:44 < niggler> failure: http://nodejs.org/api/require.main.html
22:44 < niggler> nice to know nodejs.org uses nginx
22:45 < larzconwell> Yeah I only tried !node with module names, seems it just redirects to nodejs.org/api/<query>.html
22:45 < pastylegs> Coverslide: yea I think that might be best. I'll have to think about it a bit more
22:45 < niggler> larzconwell: nice to see !mdn does t he right thing
22:45 < larzconwell> Yeah It's pretty smart with some of them, others not so much.
22:47 < larzconwell> https://duckduckgo.com/bang.html Here's all the bang queries you can do with DDG.
22:48 < niggler> lol fuckfuckgo needs a bang syntax
22:48 < niggler> why is node considered a library?
22:49 < TooTallNate> niggler: who said that?
22:49 < niggler> ok this is confusing -- !npm is under "Languages (javascript)" yet !node is under "Libraries/Frameworks"
22:50 < niggler> https://duckduckgo.com/bang.html
22:56 < DaMorpheuS> CoverSlide sorry for the late response partials in express/jade
22:57 < niggler> fuck jade
22:57 < DaMorpheuS> what's better then ejs
22:57 < SomeoneWeird> nothing
22:57 < SomeoneWeird> ejs pwns
22:57 < niggler> mustache :)
22:57 < CoverSlide> doT > ejs
22:58 < DaMorpheuS> yeah I want to use ember/hanldebars but I use jade now just for the quick output
22:58 < DaMorpheuS> but it's not that quick if it isn't working
22:58 < DaMorpheuS> what is doT
22:58 < SomeoneWeird> y u no google
22:59 < niggler> not in the magic box
22:59 < larzconwell> https://github.com/olado/doT
23:00 < DaMorpheuS> yeah yeah SomeoneWeird
23:00 < DaMorpheuS> I look it up :)
23:03 < GtoXic> ok.. I guess no one is willing to help >_<
23:07 < SomeoneWeird> heh
23:10 < tnorris> I'm trying to do the basic addon hello world, but I get the following error when I try to require hello.node: undefined symbol: _Z10InitializeN2v86HandleINS_6ObjectEEE
23:10 < tnorris> any ideas why this is happening?
23:10 < TooTallNate> tnorris: can you post your source code up somewhere?
23:10 < TooTallNate> tnorris: also, what node version
23:11 < tnorris> will do, and v0.8.14
23:11 < tnorris> also, I compiled node with clang++ instead of g++. think that would make a difference?
23:12 < TooTallNate> i don't think so
23:12 < TooTallNate> you might not be using NODE_MODULE though
23:12  * mscdex shakes a fist at ssh2
23:13 < tnorris> TooTallNate: https://gist.github.com/4021036
23:13 < tnorris> it's a straight copy/paste from the addon page.
23:14 <@isaacs> hey, everyone
23:14 <@isaacs> quick poll..
23:14 <@isaacs> when you do net.connect({....}) you get a socket object.
23:14 <@isaacs> socket.on('disconnect', function () { now you can do socket.connect() to re-connect if you want to })
23:14 <@isaacs> however, this doesn't actually give you much, since it still creates a new handle, etc.
23:14 <@isaacs> it's only saving a single JS object.
23:15 <@isaacs> and it adds a lot of excess complexity.
23:15 <@isaacs> feelings?
23:15 <@isaacs> oh, sorry, wrong event name, it's socket.on('close')
23:15 < TooTallNate> isaacs: i've never needed to re-connect after a disconnect
23:16 < TooTallNate> i can't say I even knew that was allowed
23:16 <@isaacs> TooTallNate: i can see how it might be handy
23:16 <@isaacs> TooTallNate: you can do socket.on('close', function () { socket.connect() }) and now you have semi-permanent retrying thingie
23:16 < TooTallNate> tnorris: well remove the last 2 lines
23:17 <@isaacs> TooTallNate: but with the new stream setup, this is very complicated..
23:17 < TooTallNate> isaacs: is it documented even?
23:17 <@isaacs> TooTallNate: because you might not have consumed all the bytes.
23:17 < TooTallNate> isaacs: the current behavior i mean
23:18 < tnorris> isaacs: so is 'close' essentially the same as disconnecting? (there's no disconnect event in the api)
23:18 <@isaacs> tnorris: twas a typo
23:18 <@isaacs> tnorris: it's called "close"
23:18 < innociv__> http://blog.nodejs.org/2012/04/25/profiling-node-js/ Can anyone give me some guidance with this? stacks.out from step #2 simply contains "CPU     ID                    FUNCTION:NAME    0 190227                        :tick-60s."
23:19 <@isaacs> TooTallNate: "Normally this method is not needed, as net.createConnection opens the socket. Use this only if you are implementing a custom Socket or if a Socket is closed and you want to reuse it to connect to another server." http://nodejs.org/docs/latest/api/net.html#net_socket_connect_port_host_connectlistener
23:19 < TooTallNate> isaacs: so it is...
23:20 <@konobi> innociv__: are you using a dtrace enabled nodejs?
23:20 <@isaacs> ugh.
23:20 < innociv__> konobi, I didn't realize there was such a thing!
23:20 < MI6> joyent/node: Timothy J Fontaine master * 02dffb0 : build: enable DEAD_CODE_STRIPPING on OS X (+6 more commits) - http://git.io/6aikBA
23:20 < innociv__> Or lack there of
23:20 <@isaacs> ok.  so.  let's say you connect to server A, and don't consume all the data, so they're in the buffer.
23:20 <@isaacs> TooTallNate: and then you disconnect, and connect to server B.
23:20 <@isaacs> TooTallNate: wtf?
23:21 <@isaacs> TooTallNate: should the buffer of bytes from server A just be lost?
23:21 <@isaacs> TooTallNate: or else, how do you even know where the border is?
23:21 < innociv__> oh er
23:21 < innociv__> I need stackvis
23:21 < tnorris> isaacs: ok, so are you asking if you think emitting the 'close' event is necessary?
23:21 < TooTallNate> isaacs: ya probably .connect() should flush any existing data?…
23:21 < TooTallNate> so that it's empty
23:21 < tnorris> sorry, didn't mean to post that one...
23:21 <@isaacs> TooTallNate: yeah, i think i agree.
23:22 <@isaacs> TooTallNate: so you get a new handle, new _readableState, new _writableState
23:22 <@isaacs> this is such a hideous api.
23:22 < tehlulz> hey guiz
23:22 < TooTallNate> isaacs: i'd call this backwards compat ;) if we could I'd remove it
23:23 <@isaacs> omg, the setup code is all over like a bazillino places.
23:23 <@isaacs> yeah.
23:23 < innociv__> I can't install stackvis through npm?
23:23 <@isaacs> i was hoping to remove it
23:23 <@isaacs> but apparently it's documented, well test-covered, etc.
23:23 <@isaacs> uhhgghggggg
23:23 < innociv__> nevermind
23:23 < mscdex> node.js rules!
23:23 < innociv__> I see :| That was silly of me
23:23 <@isaacs> mscdex: i am feeling the crushing weight of its rulership.
23:23 <@konobi> innociv__: it's a configure option to enable it
23:23  * isaacs is ruled by node.js's iron fist of backwards compatibility
23:24 < tehlulz> hey issacs!
23:24 <@isaacs> tehlulz: hey, teh
23:24 < mscdex> isaacs: i am feeling the awesome power it provides.
23:24 <@isaacs> mscdex: must be nice :)
23:24 < innociv__> I need to build it "--with-dtrace"?
23:24 <@konobi> also not sure what probes there are by default at the moment
23:24 <@konobi> yup
23:24 < mscdex> isaacs: building an ssh2 client in pure js with node :-D
23:24 < innociv__> And only as 32bit
23:24 < innociv__> Hm okay
23:24 < tnorris> isaacs: you mean the setup code of a server object?
23:24 < innociv__> So I need to rebuild node.  Er, do I need to remove it first?
23:24 < tehlulz> isaacs: What are your thoughts with the future of nodes? Do you think its going to keep growing?
23:26 < TooTallNate> mscdex: how's that going?
23:27 < mscdex> TooTallNate: i'm working on implementing the actual fun stuff now.... got connection and authentication (except pubkey and hostbased) working
23:27 < MI6> joyent/node: Shigeki Ohtsu master * f36bfd1 : build: remove jslint test/ on Windows  See 605927fbd9c2fbcd7d88a8f8159a9c - http://git.io/Ke1s7A
23:27 < harbhub> how do i place a cookie once i have verified that a user has signed in?
23:27 < harbhub> i want the cookie to be persistent until the user logs out
23:28 < TooTallNate> mscdex: do i don't really know the details of the protocol, but would you be able to offer an API that's almost like 'tls.Socket's?
23:28 < harbhub> i want to be able to grab the value of the cookie, which should return the user's username
23:28 < innociv__> Where do I do the --with-drace?  A ./configure?
23:28 < tehlulz> harbhub: are you using express?
23:28 < tnorris> TooTallNate: heh, thanks for the tip. unfortunately I don't have an excuse for making a stupid mistake like that.
23:28 < TooTallNate> mscdex: it'd be cool to be able to run a node REPL over ssh :p
23:28 < harbhub> tehlulz:  yes
23:28 <@isaacs> tnorris: huh?  nono, that would be a tcp client
23:28 < TooTallNate> tnorris: lol, it happens :p
23:28 < tehlulz> you can use sessions
23:28 < harbhub> how?
23:28 < tehlulz> req.session.user_id = results.user_id
23:28 < tehlulz> you have to use the middleware too
23:29 < mscdex> TooTallNate: yeah i could probably have something like that for most channel types
23:29 < harbhub> hmm
23:29 < tehlulz> app.use(express.cookieParser('somesecret'));
23:29 < harbhub> but
23:29 < tehlulz> app.use(express.session());
23:29 < innociv__> Will "sudo apt-get install nodejs npm --with-dtrace" work?
23:29 < harbhub> hmm
23:29 < harbhub> tehlulz
23:29 < tehlulz> then in the controller, do a req.session.user_id = results.user_id;
23:29 < TooTallNate> innociv__: no
23:29 < harbhub> i want the session to begin once the user is verified
23:29 < harbhub> i am using Redis for persistent key/value store
23:29 < harbhub> and socketio for server-client communication
23:30 < niggler> fuck express
23:30 < harbhub> so the user currently can fill out the sign in
23:30 < mscdex> TooTallNate: at least a stream interface
23:30 < harbhub> niggler!
23:30 < TooTallNate> innociv__: dtrace only works on solaris, just FYI
23:30 < tehlulz> niggler: lol
23:30 < tehlulz> It's much nicer to use then Tower
23:30 < tnorris> isaacs: heh, yeah. it took me almost a week to trace how those objects are created, and how they use streams.
23:30 < innociv__> TooTallNate, I downloaded an implementation for debian.
23:30 < innociv__> At least I think so.
23:30 < TooTallNate> mscdex: ya, ya, just something low-level like that. like I wanna be in control of the "shell" being used
23:30 < othiym23> if I want to generate a list of all of the packages currently available to an application, is there an npm API call I can use to get back that info, or do I need to generate the list myself?
23:30 < TooTallNate> mscdex: even be able to use "readline" module for something simple if I want
23:30 < harbhub> what alternative for storing a cookie is there?
23:31 < niggler> mscdex: is there an sftp client?
23:31 < TooTallNate> innociv__: i don't think it'll work with node
23:31 < Timbaland007> anyone here interested to work at a saas-based startup company in the SF bay area? we're located in SF and are groing super fast, opening a Fremont hub just for us engineers...
23:31 < TooTallNate> innociv__: but systemtap support just landed in master
23:31 < mscdex> niggler: in npm already you mean? not that i'm aware of
23:31 < innociv__> Oh?
23:31 <@konobi> Timbaland007: tried jobs.nodejs.org?
23:31 < harbhub> tehlulz:  can that express session/cookie be used on the client side to grab the user's username?
23:31 < innociv__> TooTallNate, not in 8.1.14 tough?
23:31 < innociv__> er
23:32 < innociv__> 0.8.14
23:32 < TooTallNate> innociv__: negatory
23:32 <@konobi> TooTallNate: there's dtrace for linux
23:32 < TooTallNate> innociv__: you'll have to manually compile by hand
23:32 < tehlulz> harbhub: You can have the server send it to the view yes
23:32 <@konobi> of course linux is missing all the OS probes =0)
23:32 < TooTallNate> konobi: yes, but i was under the impression that node won't work on linux's
23:32 < TooTallNate> konobi: or maybe what you said :p
23:32 < innociv__> TooTallNate is correct "raise Exception('DTrace is currently only supported on SunOS systems.')
23:32 < innociv__> "
23:33 < othiym23> I don't think there's a version of DTrace for Linux that supports ustack helpers
23:33 < harbhub> so just res.render('theview', {username: req.session.user_id
23:33 < tnorris> isaacs: i'm interested to see how long it takes to rewrite the api with the new streams2 interface. I'm digging your changes, but the old streams interface is so deeply ingrained I don't know how you'll replace it at provide full backwards-compatibility.
23:33 < Timbaland007> @konobi - chapeaux, will give that a spin... it's been really difficult finding passionate and talented folks in the area.. finding talent nowadays for a startup is as tight as a frog's asshole dipped in lake tahoe :P
23:33 < innociv__> So I should just install systemtap and wait for node to support it, eh?
23:33 < tehlulz> harbhub: more or less yea. 
23:33 < niggler> Timbaland007: adverse selection
23:33 < tehlulz> i have some middleware that pulls out the user info
23:33 < othiym23> god no please don't use systemtap
23:34 < tehlulz> then set it to res.locals
23:34 < othiym23> it is such a giant piece of (unsafe) garbage
23:34 < niggler> fuck systemtap
23:34 < MI6> joyent/libuv: Ben Noordhuis master * 7759bd6 : test: remove unnecessary #ifdef _WIN32 - http://git.io/T03whA
23:34 < othiym23> niggler: pottymouth
23:34 < innociv__> othiym23, what else do I use?  I can't figure out why my node.js/socket.io ends up being stuck at 100% cpu.  And yes, I'm fairly certain I don't have any infinite loops.
23:35 < niggler> can you use
23:35 < niggler> 
23:35 < niggler> *build node with gprof and run?
23:36 < innociv__> I love node.js, but this has been super frustrating.
23:36 < innociv__> I need some way to see what on the stack is consuming all that cpu.
23:36 < innociv__> It seems to happen randomly. Will run fine for hours, days, then suddenly using all the cpu
23:37 <@isaacs> tnorris: there's a few edges
23:37 <@isaacs> tnorris: i'm working on lib/net.js now
23:37 < MI6> joyent/libuv: Ben Noordhuis v0.8 * 2affa60 : test: remove unnecessary #ifdef _WIN32  This is a back-port of commit 4d1 - http://git.io/GyoslA
23:37 <@isaacs> tnorris: zlib and crypto were easy.
23:38 < othiym23> innociv__: using the v8 may be your best bet
23:39 < innociv__> othiym23, can you clarify?  So I know what to google.
23:39 < harrydog> for persisting logins, is saving session id's to mongo a good option, or do people usually use redis?
23:40 < tehlulz> harrydog: I think most people tend to use redis
23:40 < harrydog> ok, only thing i'm thinking is about scaling, if i need to use more than one server
23:40 < othiym23> innociv__: take a look at http://code.google.com/p/v8/wiki/V8Profiler to start, then google "node d8 prof" for further information
23:40 < othiym23> innociv__: you may or may not be able to make use of node-webkit-agent as well
23:41 <@isaacs> TooTallNate: i think that the technique of dropping any pending read() data is not going to work ideally.
23:41 <@isaacs> TooTallNate: it breaks the "transparent reconnect" use-case.
23:41 <@isaacs> TooTallNate: like, completely.
23:41 <@isaacs> TooTallNate: what you really want there is for it to look like it *didn't* disconnect
23:41 < TooTallNate> isaacs: right...
23:41 < TooTallNate> isaacs: so maybe we check if they're the same host+port?
23:41 <@isaacs> nonono
23:42 < innociv__> othiym23, can I profile it after it's already running?  I want to be able to see what's using up lots of cpu once that starts happening, not have  to be profiling from the very start.
23:42 <@isaacs> if you *want* to flush the state, just socket.destroy() and then do a read() to pick up whatever's left.
23:42 < TooTallNate> or just let them eat up data from a previous connection?
23:42 <@isaacs> TooTallNate: yeah
23:42 <@isaacs> TooTallNate: checking the dest would break it if you wanted to do some kind of transparent fail-over.
23:43 < TooTallNate> isaacs: ya probably the easiest thing would be the best behavior here, i.e. leave it up to the user
23:43 < TooTallNate> make them call .read() if they want the data first
23:43 <@isaacs> yeah
23:43 < othiym23> innociv__: I'm not sure -- I know you can put it into debug mode, but I don't know if you can externally trigger the profiler
23:44 < TooTallNate> isaacs: *if* people out there are using the feature, then they're probably using it for this re-connection use-case
23:44 < TooTallNate> so we should make sure that still works :)
23:44 < othiym23> isaacs: is there an easy way for me to get a list of installed packages from the POV of an application, with the names and versions of the packages that a 'require' will load?
23:45 <@isaacs> othiym23: not in a single api call, no
23:45 < TooTallNate> othiym23: look in the package.json?
23:45 <@isaacs> othiym23: package.json is how you TELL it what to give you
23:45 <@isaacs> othiym23: it's reliable
23:45 < othiym23> isaacs: yeah, but I'm trying to figure this out as an agent piggybacking on other people's code
23:45 <@isaacs> othiym23: but to actually find what they are?  starts with var fs = require('fs') ...
23:45 < othiym23> more New Relic goodness here
23:46 < tnorris> isaacs: good to hear. anxious to try out the new streams interface. also curious how the migration from buffers to typed arrays will go.
23:46 < othiym23> TooTallNate: that was my first plan, but I'm also lazy and was trying to see if I could get away with using somebody else's code ;)
23:46 <@isaacs> othiym23:http://api.nodejs.org/modules.html
23:46 <@isaacs> othiym23: check out hte "algorithm" bit
23:46 < TooTallNate> othiym23: there's more complex require analyzers which might be more what you want
23:46 <@isaacs> http://nodejs.org/docs/latest/api/modules.html#modules_all_together
23:47 <@isaacs> othiym23: if you know what you're lookign for, there's require.resolve('foo')
23:47 <@isaacs> othiym23: returns a path to the module's main file
23:48 < othiym23> isaacs: yeah, I think the algorithm + parsing package.json files is probably sufficient for my purposes right now
23:48 < othiym23> I'm already monkeypatching module._load to do instrumentation, but this is something I need to do at load time so I can submit it on the first connection from my agent to the server
23:49 < othiym23> TooTallNate: the only issue there is that I only have one dep right now (for logging) and am trying to keep it that way
23:49 < othiym23> I played around with indexzero's thinger and it did a lot of what I wanted, but I couldn't justify the extra dep
23:50 < TooTallNate> othiym23: what's an extra dep cost?
23:50 < othiym23> TooTallNate: extra support overhead and weirdness for people deploying into environments like Heroku Cedar and Azure, mostly
23:51 < othiym23> it's not a lot of code to write, it would just have been nice if the npm API gave it to me for free
23:51 < mnaser> I'm using eventfd to deal with an external API.  I am able to create the FD using FFI and get it's ID.  Anyone know how i can "poll" or "listen" to an with Node?  I know you get streams/etc when opening files manually using it but i'm not sure when dealing with fd's directly
23:51 < othiym23> thanks guys, this is enough for me to go on for now
23:52 < mnaser> I just saw fs.read but I'm not sure if it polls it or reads once, I need to keep monitoring that fd for anything that goes through
23:54 < TooTallNate> othiym23: what is it you're trying to do exactly?
23:54 < TooTallNate> mnaser: it's a light wrapper around the C read()
23:55 < TooTallNate> mnaser: in most cases you want to use fs.ReadStream though
23:55 < mnaser> ah ReadStream can take an FD, sweet
23:55 < mnaser> Thanks TooTallNate 
23:55 < TooTallNate> mnaser: ya its undocumented :\ but unlikely to change...
23:55 < mnaser> or actually hm
23:56 < mnaser> it says
23:56 < mnaser> fs.createReadStream(path, [options]) == with options being able to be an fd possibly
23:56 < mnaser> not sure how i'd go because the path doesn't actually exist (eventfd)
23:57 < TooTallNate> mnaser: https://github.com/joyent/node/blob/master/src/node.js#L505
23:57 < mnaser> aha
23:57 < mnaser> null it out
23:57 < mnaser> thank you so much TooTallNate 
23:57 < mnaser> i'll see how this works out
23:57 < TooTallNate> mnaser: np
23:57 < TooTallNate> good luck
23:58 < gozala> isaacs: ping
23:58 < TooTallNate> mnaser: alternatively you might be able to also create a net.Socket instance around the fd
23:58 <@isaacs> gozala: pong
23:58 < gozala> Hey I got a question regarding npm API
23:58 <@isaacs> k
23:58 < gozala> it's either me doing stupid or npm behaving not as I expect
23:58 < gozala> so if use npm.command.ls
23:59 < gozala> after installing some packages it does not picks them up
23:59 <@isaacs> gist, please
--- Log closed Tue Nov 06 00:00:05 2012
