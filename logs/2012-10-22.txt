--- Log opened Mon Oct 22 00:00:51 2012
00:37 < Visigoth_> so im a total noob
00:38 < Visigoth_> where should i start for learning how to use node
00:38 < Visigoth_> any good book recommendations?
00:38 < Visigoth_> shit ill even click your amazon affiliate link if you have a good one
00:39 < mscdex> Visigoth_: here are some links worth checking out: http://nodebeginner.org/ http://nodetuts.com/ http://nodeguide.com/ http://howtonode.org/
00:39 < Zak> there are probably a few books for nodejs, but nodejs is moving so fast, you're probably better off finding more recent journals/articles on the web 
00:41 < Visigoth_> mscdex: wow thank you very much
00:43 < Zak> lots of examples on Stackoverflow are often out of date.. and some of them are only a year old
00:44 < Visigoth_> Zak: yeah i've noticed that most stackoverflow stuff is horribly out of date unless you use the advanced google search for "within last week"
00:44 < Zak> yeah, i highly suggest you keep putting that filter on
00:44 < Zak> at least, within the last year
00:44 < Visigoth_> yeah
00:45 < Visigoth_> thanks guys! i've got lots of reading now :)
00:46 < Zak> g'luck!
00:46 < Visigoth_> thanks :)
01:31 < doortts_> hi~ I'm a nodejs korea conference organizer.
01:32 < doortts_> May I ask some opinion? : )
01:32 < doortts_> we are now chooing the name of conference.
01:34 < doortts_> Top 3 candidate name is NodeStorm, NodePlay, PlayNode
01:35 < doortts_> for most of english people, which one is more attractive?
01:38 < jesusabdullah> doortts_: why not something more regional like
01:38 < jesusabdullah> nodeSeoul?
01:38 < jesusabdullah> NodeStorm sounds sweet though
01:38 < jesusabdullah> like something that's gonna show up and kick everyone's asses
01:39 < jesusabdullah> That's my $0.02 doortts_ !
01:40 < jesusabdullah> trying to remember what the hu in hujs meant >_< I'm so tiired
01:40 < jesusabdullah> yo joshsmith how goes
01:40 < joshsmith> hey jesusabdullah, not bad. yourself?
01:40 < jesusabdullah> not bad! tired, but fairly productive
01:40 < jesusabdullah> straight chillin' XD
01:41 < doortts_> : )
01:42 < doortts_> nodeSeoul is good name!
01:42 < jesusabdullah> ooh, or seouljs
01:42 < doortts_> but region may be changed.. haha~ 
01:42 < jesusabdullah> naw, that one's derivative
01:42 < jesusabdullah> oh sure
01:43 < jesusabdullah> I'm not that familiar with Korea so my mind is just like, "yeah, seoul, definitely"
01:43 < jesusabdullah> same way US === New York
01:43 < doortts_> ah ha!
01:43 < doortts_> It's good idea. thanks! : )
01:44 < jesusabdullah> you're welcome! best of luck
01:44 < jesusabdullah> I'm sure it would go well, noders love to travel to neat places
01:46 < niggler> for various reasons i don't want to put "use strict" in my scripts but i want to lint as if it were there.  Is there a linter to do that?
01:48 < deoxxa> i'd totally go to korea for a node thing
01:54 < niggler> screw korea
01:56 < Oddman> deoxxa, north or south? ;)
01:56 < Oddman> I hear the mine fields are great this time of year
01:57 < mmalecki> hahaha
02:04 < nmartin> Is there any such node app/lib that will stub out a node SOAP web service from a WSDL file?
02:10 < owen1> Aria: did u try writing apps/services without express?
02:15 < Aria> owen1: Sure. 
02:16 < Aria> owen1: Express is really not that big a layer, so it's pretty similar -- I've made a router, and I've made a jabber BOSH service that's usable directly as both connect middleware and an httpServer handler function
02:16 < Aria> Why do you ask?
02:17 < Aria> nmartin: I'd search NPM, but I'd guess not considering how heinous SOAP is.
02:17 < Aria> nmartin: Node developers tend to not even like XML, nevermind things that are enterprisey on top of it.
02:20 < niggler> >>> undefined == null
02:20 < purr> niggler: (boolean) true
02:20 < nmartin> Yeah, I'm writing a node module to interact with QuickBooks web connector, and my only option is SOAP and WSDL, 
02:20 < niggler> >>> undefined === null
02:20 < purr> niggler: (boolean) false
02:20 < nmartin> so I'don't have a choice.
02:21 < nmartin> BUT: when I'm done, I'm going to add it to npm and then other's will be able to talk to QuickBooks with their apps
02:21 < niggler> so why is == null considered bad?
02:22 <@konobi> nmartin: soap-client on npm?
02:24 < nmartin> konobi: I'm the server, not the client
02:24 < Aria> nmartin: Yeah, that's an uphill battle.
02:24 < nmartin> the soap paackage in NPM DOES implement a server, but it's minimal
02:25 < nmartin> I'll just hack it out - If it was a RESTful interface, I'd be done by now.
02:25 < owen1> Aria: connect middleware and express are frowned upon is some circles of the core node guys
02:25 < mscdex> niggler: because === is faster and undefined and null are two separate things
02:25 < nmartin> I havent done SOAP web services since I stopped doing ASP,net like 8 years ago
02:26 < Aria> owen1: connect middleware aren't much more than regular handlers, so at some point, the difference is moot.
02:26 < owen1> Aria: one argument is the 'global' aspect. when u use a middleware it apply on every request
02:27 < nmartin> IMO, connect and express are the essence of what's GOOD about Node.js 
02:27 < mscdex> ^
02:27 < nmartin> at least the middleware pattern
02:27 < owen1> Aria: another one is breaking streaming. i can't elaborate on this one. you'll have to ask substack or Raynos 
02:27 < owen1> nmartin: ^^
02:28 < nmartin> and well built swiss army knives like underscore make node actually FUN
02:28 < mscdex> owen1: i've haven't had problems with streams
02:29 < nmartin> My holy grail project is a Cloud Management Platform entirely in Node
02:29 < nmartin> an IaaS CMP to be more specific
02:29 < mmalecki> nmartin: nodejitsu has one :)
02:30 < mscdex> nagios.js!
02:30 < Aria> owen1: Not all break streaming! That's entirely optional.
02:30 < zdubdub> Does anyone have experience using the oauth2orize module by jared hanson?  I'm not sure what he means by "client" in his Readme http://goo.gl/BhXFG
02:31 < nmartin> noedjitsu has an IaaS CMP?
02:31 < Aria> owen1: But yeah, I treat express and connect as entirely optional tools, not things that I won't do without.
02:31 < nmartin> or a PaaS?
02:33 < mmalecki> nmartin: we manage IaaS using our node tools, and present it to the user as a PaaS
02:34 < nmartin> mmalecki: that's what I thought
02:34 < nmartin> I'm an infrastructure guy, and Cloudstack is complex, openstack is the Apple of IaaS, and everybody else blows
02:34 <@konobi> joyent products are node powered =0)
02:35 < nmartin> so, My cloud IaaS Platform could power nodejitsu's or joyents PaaS platform 
02:36 <@konobi> no... joyent is IaaS
02:36 < nmartin> And Node is a perfect way to do it IMO
02:36 < nmartin> konobi: Really?   I thought Joyent was a node app hosting company?
02:36 <@konobi> check the website
02:37 < nmartin> I did and it only ever talks about hosting your apps in their cloud.
02:38 < nmartin> My definition of IaaS is "root access on a linux/windows VM with a self service provisioning Web UI and REST API"
02:38 < mmalecki> this is what joyent is
02:38 <@konobi> yes... SDC
02:38 < nmartin> HMM.
02:38 < Aria> 'cept the "Linux or windows" part.
02:38 <@konobi> or joyentcloud.com
02:38 < nmartin> i swear their site has only every referred to app hosting
02:39 < nmartin> ahh
02:39 < nmartin> Ive only ever been to joyent.com
02:40 < nmartin> Yeah I see that now.
02:41 < nmartin> So, My app will enable small IT and hosting companies to do real cloud IaaS for their existing customers 
02:42 < nmartin> Tis app I'm talking about is purely hypothetical, BTW.
02:42 < nmartin> I'm not actually writing it, I'm just writing it in my head
02:42 < nmartin> I use node to interact with cloudsctack at the moment
02:43 < nmartin> I write add-ons t cloudstcak powered clouds
02:43 <@konobi> for single server stuff you can play with smartos
02:43 < gavin_huang> is there a tool that replaces, say 'require ("./foo")' with the actual content of "./foo.js" and assigning exported vars so the file can be used in browser? I tried projects like browserify, that actually implements a client-side require, which would be overkill for my case.
02:45 < nmartin> gavin_huang: Wait, so you want to open a file and send the contents to a browser, inline?
02:45 < nmartin> as jscript?
02:46 < gavin_huang> yes, as a monolithic file
02:46 < nmartin> well, I do that with require.
02:46 < gavin_huang> you mean require.js?
02:47 < nmartin> If I understand what you are saying
02:47 < nmartin> no, with the built in require library in node
02:48 < gavin_huang> no, what I want is writting the code in commonjs, but then with all requires be inlined for browser use.
02:48 < gavin_huang> without introducing additional code like,client-side "require()"
02:48 < nmartin> Oh i see. I must not understanf
02:48 < AphelionZ> hay everybody
02:49 < gavin_huang> do you think it's possible?
02:49 < Aria> that'd be pretty hard, gavin_huang, since there's a lot of ways that the exports can be assigned -- lots of them are programmatic, so no solution would even approach 100%
02:49 < Aria> For the trivial module.exports = foo and exports.whatever = bar cases, it'd be relatively easy to parse, but still not trivial.
02:49 < Aria> But for things like "for i in someobject { exports[i] = someobject[i] }", good luck.
02:51 < deoxxa> Aria: that's simple - all you have to do is analyse the program and check if it will enter an infinite loop
02:51 < gavin_huang> I guess that could be just wrapped in an IIFE, with an empty obj as the exports arg, and then return the exports?
02:53 < nmartin> But I have sa a file called "data.js" which contains a JSON array of data that acts as a database for unit testing, and in data.js, I declare as a variable inline, like: module.exports = data = { somehugejsononbect: 'foobar', ...
02:53 < nmartin> and then use data.somehugejsononbect
02:53 < nmartin> so you want to do that on the client?
02:54 < nmartin> without client side require
02:55 < gavin_huang> if that data must be provided for the client side, why inlining it is a bad idea?
02:55 < Aria> deoxxa: Oh, good point. *does that*
02:56 < nmartin> i dont know why Im answering you, I've been at node.js all of 4 weeks now :)
02:58 < zak> not all answers have to be right
02:58 < zak> if it helps people see the problem from a different angle, or encourage them to think deeper about the problem, its constructive
02:59 < zak> so your input is appreciated nmartin
02:59 < nmartin> tnx.
03:00 < nmartin> talking it out with someone is a good way to get other angles to a prblem
03:01 < zak>  agreed. The famous saying, "2 heads is better than 1" is true because once you are discussing something with somebody, you've immediately got 3 perspectives on the problem; your own, theirs and one together
03:02 < zak> so even though its only 2 people, it's 3 perspectives
03:02 < zak> 1+1=3
03:04 < nmartin> gavin_huang: does async require help at all? it allows require('http://some.web/module');
03:07 < gavin_huang> nmartin, I guess not, I want the require calls to be elimated when building the monolithic file for the browser, it's a small project, so it would be overkill to simulate a commonjs env in the browser.
03:08 < gavin_huang> nmartin, thanks for the help though. I guess maybe I should just try some simple search & replace?
03:12 < SomeoneWeird> gavin_huang, have a look at browserify?
03:12 < nmartin> I'm just curious at this point, so forgive me for asking, but are you trying to do something like: Recieve a http request for /somepage/.  your /somepage/ router needs to something, then send the response to that browser request, you send an html response, but inline a block of code, say jquery.js as you send it, vs sending just a client side <script src='blah.js'>?
03:13 < gavin_huang> SomeoneWeird, I tried, but it inserts a client-side require() implementation to my code, which is overkill.
03:15 < gavin_huang> nmartin, actually it's just some utils code that have been divided into different files, and some util depends on another, to it need to require that. for the browser, I just want these utils code to be concatenated, with export being resolved. that's all.
03:16 < gavin_huang> imagine the different methods of undercore.js had be splitted into different files, and I would like to concat them for the browser.
03:17 < gavin_huang> *had been
03:18 < gavin_huang> you certainly don't want to insert a client-side require into underscore.js.
03:24 < deoxxa> gavin_huang: then design your code to not need require()
03:24 < deoxxa> gavin_huang: you're saying you need require(), then you say require() is overkill
03:24 < deoxxa> choose one
03:24 < deoxxa> you can't have both
03:24 < deoxxa> gavin_huang: are you familiar with the "halting problem"
03:24 < deoxxa> gavin_huang: because what you're suggesting is roughly on the same level of complexity
03:25 < gavin_huang> I need require in nodejs, but not in browser, since you have to use require in nodejs to access varables defined in other files.
03:25 < deoxxa> "variables"
03:26 < gavin_huang> or variables. sorry about the spelling. :) googling "halting problem".
03:26 < deoxxa> gavin_huang: there's an easy way to do what you're saying, in that case: `$ cat file1.js file2.js file3.js > big-stupid-package.js'
03:27 < gavin_huang> but file*.js all contain require() which should be removed, and exports should be resolved also.
03:27 < deoxxa> yes
03:27 < deoxxa> so use browserify or something
03:28 < gavin_huang> but as I said, browserify inserts additional code like client-side require(), or is it possible to force it not inserting such code?
03:29 < deoxxa> ok, you're saying you use require() within your code
03:29 < deoxxa> then you say you don't need require()
03:29 < deoxxa> which one is it?
03:29 < deoxxa> it's either you are using it, or you're not
03:29 < deoxxa> you can't possibly analyse an arbitrary program and remove all dependencies on require()
03:30 < deoxxa> it's just not possible, as illustrated by the halting problem
03:30 < deoxxa> so again, either stop using require() -at all- (even within node), modify your code manually to not need it, or use a client-side implementation
03:31 < deoxxa> those are your choices
03:31 < deoxxa> there are no others
03:31 < deoxxa> you can't automatically remove all uses of require()
03:31 < deoxxa> consider this:
03:31 < deoxxa> var r = require; var p = "http"; var h = r(p);
03:31 < deoxxa> or even better
03:32 < deoxxa> var r = require; var p = ["h","p"].join("tt"); var h = r(p);
03:32 < deoxxa> if you can figure out a way to resolve that automatically, let me know ;)
03:32 < deoxxa> (without running the program, of course)
03:37 < gavin_huang> deoxxa, that's a good example. but you can require author not to do that, like the unsafe options in uglify.js, which assumes you don't overwrite Array for example.
03:37 < deoxxa> noooope
03:38 < gavin_huang> why? if such an inliner project exist, it can certainly say please don't reassign require if you want to use this project.
03:38 < gavin_huang> *exists
03:40 < deoxxa> gavin_huang: now handle circular requirements
03:40  * deoxxa gone -> meeting
03:43 < gavin_huang> deoxxa, ok, c u later. but I guess the circular requirements can be resolved by splitting the file? what I really need to know is that if such inlining project exists, now I guess the answer is probably no.
03:44 < Aria> Browserify is the nearest you'll get.
03:44 < Aria> That machinery is actually needed.
03:46 < gavin_huang> Aria, but can you imagine underscore.js embeded a client-side require just so one method can call another? that would be unacceptable.
03:47 < Aria> Uh... that's an entirely different kind of problem.
03:49 < gavin_huang> Aria, that's actually what I'm trying to do, with each method in a differnt file written in commonjs, and then concatenated into a single file like how underscore.js is currently written.
04:03 < AAA_awright> deoxxa: The halting problem is unsolvable only in general, for the vast majority of cases you can in fact determine one way or the other
04:04 < AAA_awright> gavin_huang: A Node.js module is just a function that's executed exactly once. How you want to do that, require() or otherwise, is your call.
04:06 < patrickviet> hey there, been googling for a couple hours, I'm looking for pointers on node debugging
04:06 < gavin_huang> AAA_awright, i guess its more of an object than function? anyway, i'm trying to use string replace to inline required files, will see how that works.
04:07 < AAA_awright> gavin_huang: No, it's definitely a function. When you load a module, you're executing a function, if that module has not already been loaded.
04:07 < patrickviet> basically I have node inspector and stuff running, and all it says is I have a bunch of instances of '(code)', String and '(closure)' that is growing at each snapshot, but I have no idea about where to find the info on where they actually are in the code
04:07 < AAA_awright> You get to store the results of that function in a variable, the same way you would any other function
04:08 < AAA_awright> patrickviet: I use https://github.com/dannycoates/node-inspector
04:08 < AAA_awright> git clone that
04:08 < gavin_huang>  AAA_awright, ah, you are right, it's a function, and exports is the returned value, right?
04:08 < AAA_awright> Is that what you're reffering to, patrickviet?
04:08 < AAA_awright> *referring
04:09 < AAA_awright> gavin_huang: Yes
04:09 < AAA_awright> Why it doesn't use "return" I don't know
04:10 < patrickviet> thanks, AAA_awright: not as basic but I just saw there was a link to screencast, so I'll watch the screencast, it may very well have some answers in it
04:10 < AAA_awright> k
04:12 < patrickviet> watched the screencasts, they only show basic operation, how to set a breakpoint, things like that
04:12 < patrickviet> what I'm looking for is where the hell are these non garbaged closures and strings coming from in my code
04:13 < patrickviet> since I have a whole bunch of closures everywhere, all this is just very anonymous
04:15 < patrickviet> for now the only idea I have is create derivatives of string or something, that act the same but have a different name, ie. String1 String2 String3, put them everywhere in the code, and through the number, see where it was created
04:15 < patrickviet> but that seems kind of crazy to do
04:16 < patrickviet> I'm sure there's a much better way to know where a bunch of objects were created, to get back to the place in the code where they were and then figure out what I did wrong to not have them garbage collected
04:17 < AAA_awright> patrickviet: Uh, you never deal with garbage collection
04:18 < AAA_awright> So I'm not sure what you're referring to
04:18 < AAA_awright> I mean, it happens, but it's invisible
04:18 < patrickviet> I have memory leaking somewhere, maybe I have a circular reference, or something hanging in, don't know
04:19 < patrickviet> anyway, my count of closures and strings is steadily growing over time in my daemon
04:19 < kuja> I don't think circular references are an issue
04:20 < patrickviet> kuja: I don't know what the issue is, it was just an example
04:20 < patrickviet> anyway, I first saw that after about 2 months, my node process was taking practically 1G of memory
04:21 < patrickviet> so I figured OK lets run the debugger and take some heap snapshots, I'll maybe see where it's coming from like that
04:21 < patrickviet> so I do have a confirmation that there is a memory leak somewhere
04:21 < patrickviet> since the number of strings and closures is growing slowly over time
04:22 < patrickviet> but no idea where they were created
04:22 < patrickviet> in the code
04:22 < jden|away> so, empirejs- whom did i non alienate tonight? :)
04:23 < patrickviet> what I'm trying to do is to figure out where I can find that information, because just confirming that there's a memory leak is not very useful, already knew that one...
04:24 < kuja> patrickviet: https://github.com/felixge/node-memory-leak-tutorial  <- this looks enlightening :)
04:25 < jden|away> heh. english wut?
04:25 < patrickviet> and it's the first pace I went to, it helped me install the debugger and v8-profiler
04:25 < patrickviet> pace/page
04:27 < jden|away> heh
04:27 < firebalrog> hoh
04:29 < patrickviet> thanks for the link though ;)
04:29 < patrickviet> I'm kind of guessing that for now my best bet is to just wrap some custom named 'string' objects to pinpoint where they were created
04:31 < patrickviet> thanks all, for now I'll look for more stuff in the mailing list archives, there may be something interesting in there
04:33 < chovy> looking for some advice. I have a user, which can create a list, and then add items to that list.
04:33 < chovy> I want however, to expose all items created as an option to other users. They can either use an existing item and add to their list, or create a new one. The trouble I'm having how to best display this option to the user. And if a user should be able to edit an item someone else created.
04:36 < jden|away> items... yeah
04:39 < chovy> jden|away: ?
04:41 < RLa> it's lists all they way down
04:46 < chovy> RLa: ?
04:46 < chovy> i'm not following you
04:46 < chovy> a user can create a list, and add items to the list.
04:47 < chovy> like someone creates a Birthday Wishlist, and they add iPhone5 to it. I want to let others add that same item to their Wishlist.
04:47 < chovy> rather than have iPhone5 twice in the db
04:48 < RLa> what db are you using
04:48 < chovy> but then i get into problems like one person calls it an iPhone5 32gb, and another iPhone5 16gb.
04:48 < chovy> i wouldn't want person A to change it for person B
04:48 < chovy> mongodb
04:49 < RLa> and the one user makes typo and want Iphone instead :)
04:49 < chovy> yeah
04:49 < RLa> also the cases iphone 5 vs iphone5
04:50 < chovy> if they picked an existing item, it would just add it w/o them modifying it.
04:50 < RLa> i have no idea how it could be done in the sane way
04:51 < chovy> the problem really is I let people flag whether they own an item or want an item. and if everyone has their own iPhone5 added, then it will likely only ever get one vote.
04:51 < chovy> i'd like to eventually be able to look at my data and deduce that 50 people want an iPhone5
04:52 < chovy> but i can only do this, if they all use the same item in the db.
04:54 < pumakuma> why don't you allow them to have whatever name they want and then just categorize the item itself.. either by user input or pattern matching for existing known items..
05:01 < chovy> pumakuma: i was going to let people tag items
05:01 < chovy> is that what you mean?
05:04 < pumakuma> essentially yea.. unless you wanted to hardcode known items and then do pattern matching on the user input.. I don't know exactly what you were asking about though..
05:11 < chovy> its more of a usability question than a node question.
05:12 < chovy> I want to be able to autosuggest items to a user, if they pick one I would basically just clone the item and add it to their list.
05:12 < chovy> i've never done this before, so I'm curious if there is any other pattern that would work well.
05:20 < patrickviet> hey other question, the 'node inspector' profiles disappears in node.js 0.6 (works in 0.4). Anyone knows about this?
05:21 < patrickviet> the tab just isn't there any more, which is a big bummer
05:23 < syskk> what's the difference between node `cluster` and `forever`?
05:26 < RLa> syskk, cluster is multi-proc node with shared sockets, forever is node process manager
05:26 < Aria> Woot! Bootstrap 2.1.1 ported to stylus almost completely.
05:27 < syskk> RLa: ok. cluster is a sort of load balancer for multicore right?
05:28 < syskk> RLa: it seems cluster already features a lot of process management stuff as well
05:28 < RLa> syskk, only for workers
05:28 < RLa> forever is like something that will restart the proc when it crashes
05:29 < dileep> hello 
05:29 < dileep> need help
05:29 < syskk> right… my real question I guess is should i use forever with cluster?
05:29 < RLa> cluster module is way lower level too
05:29 <@Nexxy> dileep, don't we all
05:29 < syskk> it seems cluster already handles that as well
05:30 < RLa> syskk, you can
05:30 < RLa> forever would then watch the master process
05:30 < RLa> and master watches workers
05:30 <@Nexxy> dileep, please type "!ticket" to be assigned a number. All requests for help will be answered in the order in which they were received.
05:31 < zak> can i have a quick talk to somebody in PM who feels strongly against JSLint? I don't want to start a flame war in here, but i just want to hear their input.
05:31 < zak> so yeah, pm/whisper me
05:31 <@Nexxy> talk about it here! I want to know
05:32 < zak> I just want to know why people don't like crockford's attempt to protect developers from making mistakes
05:32 < syskk> RLa: right. and who watches forever? :D
05:32 < RLa> upstart? :)
05:32 < RLa> anyway, something that combines forever and cluster would be perfect
05:32 < zak> For example, the "hoisting" of variables. variables in javascript have function scope, but not block scope
05:33 < zak> so he forces you to put all the variables at the top of a function
05:33 < syskk> zak: id say there's probably less than 1% of npm packages that pass jslint
05:33 < syskk> since we all use comma first style
05:33 < RLa> we ALL :)
05:33 < RLa> talk for yourself
05:34 < zak> i'm not sure what rule that breaks in JSLint, but i'd like to know why crockford put it in
05:34 < syskk> almost every single node.js code ive seen uses this style
05:34 < RLa> one could find out statistics about npm packages
05:34 < zak> i think there's a lot of unfounded opposition against JSlint, because people often don't understand why he's put in certain rule
05:34 < syskk> var fs = require('fs')
05:34 < zak> *rules
05:34 < syskk> , utile = require('util')
05:34 < syskk> etc.
05:34 < RLa> download them all and run through jslint
05:35 < zak> maybe there's a way to fix that in JSLint
05:35 < SomeoneWeird> <RLa> talk for yourself < +!
05:35 < SomeoneWeird> +1*
05:36 < RLa> i'm actually using for (var i = 0; ... a lot
05:36 < syskk> i have the jslint plugin for vim but just ignore most errors… since  i like comma first style
05:36 < RLa> tho haven't got burned with variables-being-not-block-scoped yet
05:36 < zak> RLa: i can see what that seems harmless, but then when you see the examples where it goes wrong, its not clear unless you're always aware of how variables are hoisted to the front
05:36 < zak> front/top
05:37 < syskk> and the "anonymous function does not always return a value" is not very useful in node since most of the time you dont need to return values
05:37 < zak> as crockford said, eventually they'll include a better block-scoped variable keyword and "var" will be deprecated
05:37 < dileep> git://gist.github.com/3929817.git   check this..i make a form where i have to enter he values and aftre that got that values in another page
05:37 < RLa> is 'let' block scoped?
05:38 < RLa> or what did 'let' solve?
05:38 < syskk> dileep: please post the http url :/
05:38 < syskk> https://gist.github.com/3929817
05:38 < dileep> 192.168.111.165:8000
05:38 < zak> i think let was supposed to help block scoping
05:42 < dileep2>  git://gist.github.com/3929817.git   check this..i make a form where i have to enter he values and aftre that got that values in another page
05:43 < syskk> dileep: what's your problem exactly? also, you should probably use connect/express for that
05:44 < zak> there's a javascript edition and an ecmascript edition?
05:44 < zak> ah man... standards
05:45 < dileep2> i simply need to put name and adress two fieds  in one page.and when i fill the fields it tooks me to another page with the fields values
05:45 < zak> i wonder if there's an ecmascript channel
05:45 < othiym23> are there any reliable numbers for the difference in performance of using node-redis with vs without hiredis?
05:46 < othiym23> I could make my own benchmarks, but they'd be pretty bullshitty
05:46 < zak> "let" is included in ECMAScript edition 6
05:48 < othiym23> zak: you can try the newest node with --harmony and it will give you some of the ES6 stuff
05:48 < zak> thanks
05:48 < zak> yeah, I read some posts about it ages ago
05:48 < zak> i was keen to try it out
05:48 < othiym23> just --harmony-scoping if you just want the scoping / let stuff enabled
05:48 < zak> thanks
05:49 < othiym23> I don't think there's an ecmascript channel, since I think they've been making an effort to keep as much of the discussion on the tc39 lists as possible
05:49 < othiym23> node --v8-options | grep harm if you want to see what other things they've added
05:49 < zak> bit hard for me to get out to Cali
05:49 < zak> too bad
05:50 < zak> exciting times for javascript
05:51 < dileep>  git://gist.github.com/3929817.git   check this..i make a form where i have to enter he values and aftre that got that values in another page
05:51 <@Nexxy> dileep, please type "!ticket" to be assigned a number. All requests for help will be answered in the order in which they were received.
05:53 < othiym23> Nexxy: are you going to either of Redisconf or KRTconf?
05:53 < chovy> zak: i'm not sure what all his reasons are but from what I understand they are extreme.
05:53 <@Nexxy> othiym23, going to realtime conf
05:53 <@Nexxy> speaking
05:53 <@Nexxy> about something
05:53 <@Nexxy> not sure what
05:53 < othiym23> sweet!
05:53 < othiym23> haha
05:53 < othiym23> yay!
05:53 <@Nexxy> wooot
05:53 <@Nexxy> othiym23, you will be there?
05:53 < othiym23> Nexxy: yeah, I'm in town
05:53 <@Nexxy> oh cool
05:53 <@Nexxy> you should have said something
05:53 < othiym23> was at Urban Airship today for the &yet Redis class, was fun
05:54 <@Nexxy> I just went to dinner with dshaw and a few of the others in town
05:54 < othiym23> awwww
05:54 <@Nexxy> just got back home
05:54 <@Nexxy> :P
05:54 < othiym23> that's OK, I was having dinner with my fam
05:54 <@Nexxy> it wa spretty good. the waiter was a dick
05:54 < othiym23> I could have hassled dshaw to REVIEW MY PULL REQUEST GOD DAMN IT
05:54 <@Nexxy> yeah totally
05:54 < othiym23> because apparently mranney is too fancy to look at it
05:54 < othiym23> where'd you guys go?
05:54 <@Nexxy> uhhh
05:55 < zak> chovy: "from what I understand". What specifically do you understand though?
05:55 <@Nexxy> I forget already
05:55 < othiym23> I'm going to fancyland dinner at DOC on Tuesday night, and am gonna be totally out of my depth as I don't drink
05:55 <@Nexxy> oh
05:55 <@Nexxy> Clyde Common
05:55 < zak> where is realtime conf being held?
05:55 < zak> nevermind, i googled
05:55 <@Nexxy> pure space in portland
05:56 < zak> i have a bad habit of asking questsions before googling (or searching by some other means)
05:57 < othiym23> damn, I love me some tagliatelle, too
05:57 < chovy> zak: i just heard on javascript jabber podcast, they were talking about jslint vs. jshint. 
05:57 < chovy> might want to listen to that one
05:57 < othiym23> that's OK, I had some amazing line-caught salmon with a totally bitchin' marinade I pulled straight out of my ass </foodbrag>
05:57 <@Nexxy> that last part kind of ruined it for me
05:57 < othiym23> haha
05:57 < othiym23> not literally
05:57 < chovy> zak: http://javascriptjabber.com/021-jsj-weapons-of-choice/
05:58 < othiym23> man, Crockford is like this angry uncle of the JS community who can't shut up about the horrible shit he saw in 'Nam
05:58 < othiym23> like, I guess he's lovable?
05:58 < chovy> othiym23: exactly
05:58 < othiym23> but we're all sort of trying to move on now
05:58 < chovy> did you see him talk about why he left yahoo?
05:59 < chovy> pontificating about business practices of yahoo.
05:59 < zak> chovy: thanks. I'll listen to that podcast.
05:59 < othiym23> that talk was hilarious, I watched it on YouTube
05:59 < othiym23> sure dude, everyone is dying to know how you'd be steering the USS Doomed Yahoo directly into the iceberg
05:59 < chovy> that was supposedly why he left yahoo...didn't mention that his buddy hired him over at paypal.
06:00 < zak> chovy: if you start looking for another job, it's usually too late to turn things around
06:00 < chovy> personally, i wouldn't want to work for either of those guys
06:00 < zak> also, i wouldn't be surprised if working for Yahoo was shit
06:00 < chovy> zak: i worked at yahoo. it was and still is a great place to work.
06:00 < zak> or any company in general. Their interest is always focused by money
06:01 < zak> yeah sure, I just meant that as a general thing
06:01 < zak> big companies like that are different for everybody
06:01 < zak> i worked for IBM. I had a terrible experience, but others are having a ball
06:01 < chovy> yeah
06:01 < chovy> it depends on your manager, really.
06:01 < chovy> and how the team is ran
06:01 < zak> so yeah, i don't doubt that Crockford had valid reasons for leaving, but it could have been silly personal reasons too
06:02 < zak> i met him very briefly. He seemed fine
06:02 < chovy> he gave the world json.
06:02 < othiym23> CURSE HIM
06:02 < zak> plus, we need people like Crockford
06:02 < zak> the only thing that i hate about JSON is no proper date format
06:02 < othiym23> zak: agreed, but jslint is bullshit ;)
06:02 < zak> othiym23: not sure if i fully agree
06:03 < zak> so far, the things i've seen jslint enforce (and i haven't seen it all), seem reasonable
06:03 < othiym23> I think Crockford is a valuable contributor to TC39, but I'm glad there are other people on the committee to counterbalance him
06:03 < chovy> i wonder what paypal will be like with bill scott and crockford over there. i used to work there too.
06:03 < zak> yeah i agree
06:03 < othiym23> zak: it was fine before jshint, which works much better (for me) with the style of Node I write
06:03 < othiym23> although I'm starting to think that my strictness with semicolons may have been a mistake
06:03 < zak> i'm probably going to use jslint and turn off some things, or look at jshint and turn more stuff back on
06:03 < othiym23> been writing my lua with no semicolons and it's so much nicer-looking
06:03 < zak> why?
06:03 < Oddman> othiym23, oh?
06:04 < zak> i think semi-colons are good
06:04 < Oddman> js without semicolons is buggy
06:04 < othiym23> it can be
06:04 < Oddman> there's a few talks online as to why
06:04 < zak> i think if you risk running into any potential bugs, you should steer away from those practices
06:04 < othiym23> I tend to write my JS in such a way that ASI doesn't apply
06:04 < chovy> i think you need semicolons if you're going to obfuscate
06:04 < chovy> and minify
06:04 < zak> i'd rather my code be as strict as possible tbh
06:04 < chovy> and curly braces
06:04 < othiym23> but whatever, my codebase is well and truly semicoloned up now and that's not going to change
06:04 < chovy> i don't ever leave those out.
06:05 < zak> which is why i'm leaning towards jslint at the moment
06:05 < Oddman> i do if it's shorthand
06:05 < othiym23> zak: but some of that stuff is just unreasonable, like the declarations at the top of the function thing
06:05 < Oddman> sometimes its applicable
06:05 < zak> i think a lot of people are against JsLint because their coding style is crap... that's not everybody
06:05 < zak> othiym23: there's good reason for that though
06:05 < othiym23> we're not writing K&R C, that's just pedanticism for its own sake
06:05 < chovy> zak: i doubt it makes much difference. jshint and jslint either is fine, if you're getting too many errors/warnings with one, try the other. Either is better than nothing.
06:05 < zak> variables are function scoped only, so you can screw up stuff if you declare a variable in a block and assume its scoped in the block
06:05 < Oddman> except for the single fact of js globals.
06:06 < zak> chovy: definitely
06:06 < othiym23> zak: yeah, but jshint allows you to warn if you declare variables in e.g. loops or if expressions, and just ensures you declare variables before use
06:06 < othiym23> it's a TON more readable if you have any kind of complicated logic in your functional, IMO
06:06 < zak> true
06:06 < Oddman> oh you mean defining before said functionality, rahter than at the top of a function declaration?
06:07 < othiym23> yes
06:07 < Oddman> ah, agree 100%
06:07 < zak> i tend to keep my functions short, so its not a major issue for me
06:07 < Oddman> I thought you were against declaring them at all :P
06:07 < zak> i'll definitely read this podcast
06:07 < zak> i wonder if crockford has looked into jshint at all
06:08 < zak> and i wonder if all the rules supported by jslint are supported in jshint
06:08 < othiym23> zak: he didn't invent it, so probably not ;)
06:08 < dileep>  git://gist.github.com/3929817.git   check this..i make a form where i have to enter he values and aftre that got that values in another page
06:08 < othiym23> zak: jshint was created in direct response to jslint, there's a page on the jshint that goes into their motivation and rationale
06:08 < zak> well, it's a fork
06:08 < dileep> syskk, please ans
06:08 < zak> so yeah, i was just wondering if he took a look
06:08 < zak> and what his commentary would be
06:08 < othiym23> "CAST IT INTO THE PIT OF FIRE" or something similar
06:09 < zak> specific commentary on the relaxed or additional rules
06:09 < dileep> ???
06:09 < zak> it would be nice to hear his opinion
06:09 < othiym23> you could try asking him ;)
06:09 < zak> even if it were blind, aggressive and opioninated
06:09 < othiym23> he's a personable dude, he just has very strong opinions
06:10 < zak> that's fine
06:10 < Oddman> as do a lot of geeks
06:10 < BigC> I'm fudging my way around a nodejs server for the first time, trying to get it to work with redis, when running the node-redis examples, (after doing "npm install hiredis redis") I'm still getting a Cannot find module 'redis' error. It seems like when I'm i'm trying to install node-redis with npm nothing is happening.
06:10 < Oddman> heard of linus torvaldi by any chance?
06:10 < BigC> npm list does not show redis as installed.
06:10 < zak> i think its important to have strong opinions on somethings. Otherwise you'll be a weak-minded indecisive person
06:10 < Oddman> zak, hardly
06:10 < zak> its just a question of where you're willing to compromise
06:10 < zak> i'm not saying you need to have strong opinions on everything
06:10 < Oddman> a strong opinion is usually tied with arrogance
06:11 < Oddman> really, I would argue that having a strong opinion blinds you from other possibilities
06:11 < zak> strong opinions also are tied with a ideaology too
06:11 < zak> *ideology
06:11 < Oddman> yes but basing things on ideologies is hardly objective
06:11 < zak> its very objective
06:11 < timeturner> super objectivee
06:11 < zak> that's exactly what it is
06:12 < timeturner> objective*
06:12 < zak> its just limited to a particular perspective
06:12 < zak> its definitely not blind, just uncompromising
06:12 < timeturner> the correct answer is that both are correct IMO
06:13 < timeturner> a strong opinion made without considering a lot of information about the opinion and its pros/cons can be seen as arrogance/ignorance
06:13 < Oddman> true
06:13 < zak> for instance, my ideology is that the internet should encourage anonymous interaction
06:13 < timeturner> but string opinions about things that make sense definitely give the look of confidence in a person
06:13 < othiym23> BigC: did hiredis actually install successfully?
06:13 < zak> and some people will argue the opposite, that the internet should be personalized
06:14 < othiym23> BigC: also, you don't need hiredis to get redis working, and I'd recommend not installing it until you know you need it
06:14 < timeturner> the internet should be both anonymous and personal, but there is a correct place for both
06:14 < timeturner> none of these topics are really black and white IMO
06:14 < timeturner> it's all in the "gray zone" :)
06:15 < Oddman> zak, yup - but if you're unwilling to concede that the internet can be or should be personal in some aspects, then it's hardly an objective viewpoint
06:15 < zak> i don't disagree that the internet should be somewhat personalized, but i just don't like that's being done
06:15 < zak> *how it's being done
06:16 < zak> i dislike facebook, but it's hard for me to stray off it. So many of my friends are using it as a main point of conversation and organisation
06:16 < Oddman> yup
06:16 < Oddman> fair enough
06:16 < Oddman> on that note - there are some interesting projects coming up now that charge you for online profiles, but you have full control over your data
06:16 < zak> and facebook presents Zuckerberg's crap ideology of how he wants the internet to go forward
06:17 < BigC> othiym23: thanks for the advice. I figured out my issue was trying to run the test files in my node_redis clone.
06:17 < BigC> folder
06:17 < BigC> (derp)
06:17 < zak> anyway, i'm getting off-topic. BTw, does anybody have crockford's rant about why he left yahoo? I'm interested to hear that too
06:18 < othiym23> zak: search for it on YouTube
06:18 < othiym23> I can't remember off the top of my head what conference it was at, but it was about 6 months ago
06:19 < Oddman> zak, if we want to go a bit further, facebook is now highly invested by questionable organizations
06:19 < zak> http://www.youtube.com/watch?v=8HzclYKz4yQ ?
06:19 < Oddman> and that's before the float :P
06:19 < zak> lol @ top comment "The Bob Dylan of JavaScript"
06:19 < othiym23> sometimes sinon just feels like more trouble than it's worth
06:19 < zak> sinonjs?
06:20 < dileep>  git://gist.github.com/3929817.git   check this..i make a form where i have to enter he values and aftre that got that values in another page
06:20 < zak> i like sinonjs
06:20 < zak> i like unit testing
06:20 < dileep> please help me
06:20 < chovy> zak: totally
06:20 < chovy> i only use selenium
06:21 < zak> yuck
06:21 < zak> selenium is good for about 2% of your testing
06:21 < zak> i don't recommmend selenium to anybody
06:21 < Oddman> hahaha yeah
06:21 < zak> its slow as shit and its a maintenance nightmare
06:21 < Oddman> ya
06:21 < othiym23> yes sinonjs, and I'm doing a bunch of tricky stubbing so I can make various drivers pretend that they're connected to services when they're not
06:21 < othiym23> kids, don't grow up to be instrumentation engineers
06:22 < othiym23> it's a pain in the ass
06:22 < Oddman> but I love guitars!
06:22 < zak> i have a better disclaimer.. "kids, don't grow up"
06:22 < zak> "being an adult is a pain in the ass"
06:22 < Oddman> I dunno
06:22 < Oddman> my ass is alright
06:22 < Oddman> I think you should leave the dildos alone
06:23 < chovy> selenium is the only way to test an app
06:23 < chovy> unit testing is pointless
06:23 < Oddman> no, no it's not
06:23 < Oddman> ...
06:24 < zak> chovy: unit testing is definitely not pointless
06:24 < zak> the way i see it, each form of testing is a compromise between speed and effectiveness
06:24 < zak> unit testing is pretty fast and is pretty effective
06:25 < Oddman> integrated tests lose visibility of low-level implementation - and that can be disastrous
06:25 < zak> integration testing is slower but is more effective
06:25 < zak> then you have full end-to-end testing (like selenium testing) which is slow as shit, but its as close to the real thing
06:25 < zak> you need to do all properly and effectively
06:25 < Oddman> yeah
06:26 < zak> if you do everything with unit tests, something is likely to fall apart when its put together
06:26 < RLa> "is slow" <- not necessarily
06:26 < zak> right.. generally selenium tests are slow
06:26 < chovy> unit testing is a waste of time
06:26 < chovy> testing code in isolation tells you nothing of how it behaves with all the other code.
06:27 < zak> selenium tests are so because you'll have to set everything up (for real) AND run the tests
06:27 < chovy> selenium tells you if your app works as expected or not
06:27 < zak> chovy: thats the point. unit testing is about testing the internal mechanics of that unit/module
06:27 < Oddman> "testing code in isolation tells you nothing of how it behaves with all the other code."
06:27 < Oddman> it's not meant to, that's the point
06:27 < chovy> i had to write some unit tests the other day, and had to mock out hundreds of lines of code just to test one function.
06:27 < zak> imagine this, you write a web-page which takes a number and displays the square
06:27 < chovy> pointless
06:27 < chovy> there is more test code than actual code
06:28 < Oddman> chovy, that's hardly a unit test then, that's horrible
06:28 < zak> so if i type in 3, submit some form, and it should show 9
06:28 < Oddman> if you have to mock out that much... ugh
06:28 < zak> chovy: just because you write more test code than actual code, that's not a bad thing
06:28 < zak> tests are there to define expected behaviour and is a safe-guard for refactoring
06:28 < chovy> there are cases for unit testing where it makes sense. but having to do it on a large code base is no fun and a waste of time.
06:29 < zak> the point is, you write tests first or at least, at the same rate as you write code
06:29 < chovy> you end up faking 99% of the code, just to see if function getA() returns "A"
06:29 < chovy> i don't see the point.
06:29 < Oddman> chovy, that's a problem
06:29 < Oddman> of the implementation
06:29 < zak> if you're writing tests retrospectively, its going to suck, because none of your code is structured well (i.e. easily testable)
06:29 < Oddman> easy to hate unit testing if you have that kind of overhead
06:29 < zak> and thats the wrong approach
06:29 < chovy> zak: yeah, that is the problem.
06:30 < chovy> i don't do it.
06:30 < zak> writing unit tests is probably even more important on larger systems
06:30 < chovy> my manager tells me to. but i tell him i don't have time. and this code is going to be tossed in 3 weeks for something else anyway.
06:30 < zak> integration tests, and other tests too
06:30 < zak> that's a scheduling/planning problem then
06:31 < zak> give estimates which include testing
06:31 < chovy> 3 days to code a feature, another 3 days to write unit tests...that's rediculous
06:31 < Oddman> should be the other way around ;)
06:31 < zak> thats the point thouguh, you write them at the same time as you write code
06:31 < zak> write a test, implement the code
06:31 < zak> repeat
06:31 < chovy> i tried using jasmine too for js.
06:31 < zak> jasmine is good. I use mocha for some other stuff
06:31 < Oddman> + angular right? :)
06:32 < chovy> but it failed on everything because all the jquery code expects a DOM to be present.
06:32 < chovy> i still don't see the point
06:32 < Oddman> were you injecting jquery where necessary?
06:32 < Oddman> because you shouldn't be making actual jquery calls
06:32 < zak> i actually seperate my browser JS into dom and non-DOM code
06:32 < zak> *separate
06:33 < chovy> yup. but the jasmine tests dont run in the page that the jquery code does. it's like handing someone a steering wheel and asking them if they like how the car it belonged to handles.
06:33 < zak> you can run jasmine in a browser
06:33 < zak> you can run it headlessly too
06:33 < Oddman> chovy, bad analogy - it's more about asking how the steering wheel feels.
06:33 < zak> http://phantomjs.org/
06:33 < zak> you don't have to fake DOM that way
06:34 < zak> if you want to run against specific browsers, there are ways to do that too
06:34 < zak> but that's a different problem
06:34 < zak> bottom-line is, unit testing is important
06:34 < chovy> i have a page with a bunch of shit on it, what's the point of running a test that doesn't have access to that same dom?
06:34 < Oddman> that's not the point
06:34 < Oddman> unit tests are about isolating YOUR code
06:34 < Oddman> so you can be sure that at small chunks, your code works as expected
06:35 < othiym23> oh no, what have I done?
06:35 < chovy> eventually the code that does $("a.more").click() gets executed
06:35 < othiym23> I inadvertently started a TESTING DEBATE
06:35 < othiym23> no good can come of that!
06:35 < chovy> at least in our javascript libraries.
06:35 < zak> othiym23: lucky you didn't start a math debate
06:35 < chovy> and that test will fail...because "a.more" doesn't exist.
06:35 < Oddman> yes chovy, and $ should be injected
06:35 < zak> mock $
06:36 < zak> and verify that .click() is being called
06:36 < zak> etc
06:36 < chovy> no thanks
06:36 < zak> don
06:36 < zak> e
06:36 < Oddman> hehe
06:36 < zak> tbh though, i wouldn't bother testing that
06:36 < chovy> selenium will tell me if the code works.
06:36 < zak> like i said, I separate my DOM and non-DOM code
06:36 < chovy> everything is a painted door.
06:36 < chovy> except 1 function
06:39 < chovy> zak: exactly my point -- the only thing testable is virtually useless to test.
06:40 < zak> generally, if something is trivial to implement, i don't bother writing a test for it
06:41 < zak> and by that, i mean if some callback function is merely calling something else, i won't bother
06:41 < zak> if the callback function is doing something even remotely complicated, i'll refactor into a different method, then write tests for that method
06:41 < zak> and i won't bother writing tests for the trivial shit around it
06:42 < zak> i see testing as return on investment
06:44 < Oddman> well unit tests is about interactions
06:44 < Oddman> if interactions change, you bloody well want your unit tests there to pick up all failed interactions between dependencies
06:44 < dileep> how do i parse form data in node.js
06:45 < chovy> dileep: express makes it easier.
06:46 < chovy> req.body.first_name
06:46 < Oddman> which I think in that sense is just an extension of connect
06:46 < chovy> zak: if you refactor all your code to be testable, won't it become less readable?
06:47 < chovy> Oddman: yeah,  i think you're right
06:57 < chovy> zak: what do you use to test your node.js code?
06:57 < chovy> i'm using express
07:00 < otavio> Hello .. I am trying to cross build nodejs for arm
07:02 < ashnur> give me one working deployment solutions for nodejs. something I can install, configure and expect it to work. it doesn't have to be free, but it has to work on debian squeeze with SysVinit
07:02 < ashnur> i don't think there is such a thing
07:02 < RLa> ashnur, is forever a solution?
07:03 < RLa> or haibu?
07:03 < timeturner> lol crockford and Ynode
07:04 < ashnur> RLa: forever? that's just a script restarting other scripts. how do I start forever with forever?
07:04 < zak> chovy: testable code is readable code
07:05 < zak> testable code would have better separation of concern, so it would be easier to read and would have less coupling
07:05 < ashnur> RLa: same thing with haibu, how do I start haibu programatically. or what's the expression
07:05 < zak> chovy: i'm using mocha/shouldjs at the moment
07:05 < zak> but it's only a small project
07:05 < ashnur> it's not that I can't type node whatever.js. But that's not all there is
07:05 < ashnur> mocha++
07:05 < ashnur> best thing
07:06 < RLa> ashnur, ssh -i path/to/key user@machine 'forever start whatever'
07:06 < RLa> also, doesn't haibu have ws api for starting too?
07:06 < zak> nothing more satisfying than having tests find bugs for you :)
07:06 < zak> i've definitely had a few "oh shit" moments
07:06 < ashnur> RLa: I would like to have a solution where no manual intervention is needed. Just the setup. Then I can restart the server, or kill the process with some stupid 3rd party code, and still expect it to run after that.
07:07 < RLa> they have api for uploading the app, having no api for starting it makes no sense
07:08 < zak> i've been programming since i was in primary school. I've done a lot of personal and more serious projects "just churning out code". No way i would resort to that again
07:08 < ashnur> yeah, but an api means that I have to write everything myself. not just that I might be lazy(which I sadly am), but I can't be sure that I will do a good job at it
07:11 < ashnur> RLa: maybe we are not talking about the same thing. I know a lot of solutions for loading apps. My problems come that I can't setup a production environment on debian with node. If I had at least one script I could be sure it will allways run, I could then implement any kind of api for loading any kind of apps. But I don't have such a thing. 
07:12 < chovy> ashnur: are you looking for a startup script for debian?
07:12 < ashnur> chovy: i tried 3 such kind of scripts. all of them failed at some point
07:12 < chovy> https://github.com/chovy/node-startup
07:13 < chovy> i just wrote that the other day
07:13 < dileep_> hello
07:13 < ashnur> lemme check it
07:13 < chovy> works for me
07:13 < RLa> hm, i have custom init scripts here and a custom .deb package for a project but i can tell it's not worth it
07:13 < RLa> because something has to build that .deb package before deploying
07:14 < RLa> and good luck with that on non-debian machine
07:14 < RLa> it might be worth it if you want to deploy to gazillion of machines in a standard way
07:15 < RLa> like end-user machines
07:16 < ashnur> RLa: I am not trying to solve everything at once. All I would like to have is something that works on my very small debian vps. I don't need sophisticated stuff for updating the files for example, because I can do git push.
07:17 < ashnur> chovy: and what if your app fails? do you use forever or something similar?
07:17 < ashnur> btw. this is what I have tried last time: https://gist.github.com/715255
07:17 < RLa> ashnur, what you have against ssh solution?
07:18 < ashnur> ?
07:18 < RLa> forever + ssh
07:18 < RLa> looks simplest to me
07:18 < jason11235813_> hello~ what is the oldest version of glibc for building node.js 0.6.x ?
07:19 < clever> ashnur: i wrote a second node app similar to forever, which logs the last 100 lines of output to a crash-log in mysql before re-spawning it
07:19 < ashnur> I am sorry, my english is not that good, I don't understand that question
07:19 < clever> ashnur: of course, that second app had its own bugs to work out at first, causing things to not restart!
07:20 < RLa> ashnur, running the command through ssh to run forever command to start your app
07:20 < jason11235813_> i saw the requirement of building node.js, only python and make, is there others else?
07:20 < ashnur> RLa: it won't work if the server restarts and I am sleeping
07:21 < RLa> you need compiler toolchain as well
07:21 < RLa> ashnur, oh crap, now i see it
07:21 < ashnur> also, I am not sure if I want to restart the app manually every time the server reboots
07:21 < clever> ashnur: cron can solve that
07:21 < ashnur> cron?
07:21 < clever> ashnur: there are also special cron rules to run on bootup
07:21 < ashnur> ah
07:22 < syskk> is there any sync CSV lib?
07:22 < ashnur> good to know
07:22 < clever> ashnur: cron will run a task every x minutes, like every hour
07:22 < clever> that task can check things, and re-start forever+whatever
07:22 < ashnur> i know that. the boot stuff i didn't know
07:22 < clever> ive seen many eggdrop bots with a crontab rule to self-restart
07:22 < chovy> ashnur: i do not. i was using supervisor, but it couldn't find the node executeable
07:23 < clever> ashnur: i think you just put '@reboot /path/to/script' in the crontab file
07:23 < clever> ashnur: read the man page, 'man 5 crontab'
07:23 < RLa> ok, i start to see all that mess and now understand why i used custom init script!
07:23 < RLa> clever, what about shutdown/boot?
07:23 < chovy> ashnur: i just updated the git repo with a LOG_FILE
07:23 < RLa> clever, without restart
07:24 < clever> RLa: it probly considers any bootup a 'reboot'
07:24 < RLa> clever, are you sure?
07:24 < RLa> last time i checked docs i think that was not the case
07:24 < chovy> i am testing now
07:24 < clever> RLa: generaly, its hard to detect if the computer has been rebooted, or just turned on normaly
07:25 < max74> good morning, good day everyone. i've a simple question: how can i know what node.js version is currently used on a linux system? 
07:25 < clever> the only thing that can tell for sure, is the bios, there is a special flag in the cpu or ram that gets set before resetting things
07:25 < clever> max74: node -version
07:26 < syskk> mmm I'm looking for a quick hack since i cant find a sync csv parser. I guess this is not possible but is there any way to block inside a function until a callback is called?
07:26 < clever> syskk: async lib has a function for that
07:26 < RLa> syskk, no
07:26 < clever> i think
07:27 < syskk> clever: that's not really what i need
07:27 < RLa> blocking would mean no other callback is even run
07:27 < RLa> ever*
07:27 < max74> node.js, not node...
07:27 < syskk> RLa: i guess the only way would be to use a worker so that my function is executed outside the main event loop
07:27 < kuja> Why does it have to be sync?
07:27 < kuja> I assume the only thing that matters is that each line is processed in order.. any other specific reasons for wanting it to be synchronous?
07:28 < chovy> ashnur: i just tested everything it works.
07:28 < chovy> you can replace node with forever and it should work.
07:28 < syskk> because im writing a better-require lib that lets you require all sorts of file extensions.. require should be sync
07:28 < chovy> for NODE_EXEC
07:28 < chovy> but i have not setup forever yet.
07:29 < syskk> kuja: https://github.com/olalonde/better-require
07:29 < ashnur> chovy: ok, I will try it
07:30 < chovy> syskk: i just saw a sync csv parser today
07:30 < syskk> ok, guess I'll keep looking then :)
07:31 < chovy> syskk: i think it was on stackoverflow
07:31 < chovy> actually it was async, not sync
07:31 < syskk> cant use google on this vpn :(
07:31 < syskk> ahh. im looking for sync..
07:33 < chovy> how do you guys promote npm modules?
07:33 < syskk> mmm i might be able to use that: https://github.com/cparker15/csv-to-json
07:33 < [AD]Turbo> hi there
07:34 < syskk> chovy: good question :) im wondering as well
07:34 < syskk> chovy: guess you could answer questions here and on SO
07:34 < chovy> i posted my module to npm and i got about 18 downloads, but then it just stopped. i'm guess that was all from scrapers.
07:35 < chovy> i answered on SO, and got reprimended for promoting
07:36 < syskk> yea, will use this http://stackoverflow.com/questions/1293147/javascript-code-to-parse-csv-data
07:36 < syskk> chovy: what's your module?
07:39 < airtanah> SO community can be overly strict sometimes
07:40 < airtanah> then again, if not i guess it would just become quroa... 
07:42 < sshaginyan> Hey guys I've always had this problem var x = data.toString().match(/href.*?=.*?\".*?\"/g); where I want to match only the url and not the href="…" part
07:43 < sshaginyan> Is there anyway I can match an outer construct to get the inner construct?
07:43 < sshaginyan> Can I match something and not include it is what I mean?
07:46 < clever> sshaginyan: the simplest answer is something like /href.*?=.*?\"(.*?)\"/g
07:46 < AAA_awright> sshaginyan: Use parentheses
07:46 < clever> sshaginyan: it will return an array with the part inside () as the 2nd element
07:46 < AAA_awright> ^
07:46 < AAA_awright> Well, match[1]
07:47 < clever> yeah
07:48 < sshaginyan> AAA_awright: This is what I'm getting back http://pastie.org/5096987
07:49 < sshaginyan> AAA_awright: When I do console.log()
07:50 < AAA_awright> sshaginyan: You have the g flag set then
07:50 < sshaginyan> var x = data.toString().match(/href.*?=.*?\"(.*?)\"/g);
07:51 < sshaginyan> yes I do
07:51 < syskk_> published 4 packages in 2 hours.. im on fireee 
07:51 < sshaginyan> I want to get all links on a page
07:51 < syskk_> sorry for polluting npm :(
07:51 < airtanah> syskk_ what packages?
07:52 < AAA_awright> sshaginyan: The only hack I know to do both is use replace() instead, and the second argument can be a callback which is provided the values
07:52 < syskk_> airtanah: the 4 on top here: https://github.com/olalonde  they are really just few lines wrappers around other stuff
07:52 < sshaginyan> let me see
07:52 < AAA_awright> So like string.replace(/astring(\w+)/g, function(all, first){ /* ... */ })
07:54 < sshaginyan> AAA_awright: cool thanks
07:55 < airtanah> syskk interesting choice of cities "Shenzhen, China & Montreal"
07:55 < syskk> airtanah: thanks :) but i didnt choose. they chose me :)
07:55 < syskk> in shenzhen right now
07:56 < airtanah> what's the node scene like there?
07:59 < syskk> no idea really.. i know there's somewhat a scene in hong kong though :o
07:59 < syskk> I don't speak Chinese so it's hard to tell
08:01 < airtanah> i hung out with the codeaholics guys in HK once in summer
08:02 < airtanah> didn't talk much node tho
08:04 < aMoniker> I'm using:
08:04 < aMoniker> app.use(express.cookieParser(cookie_secret));
08:04 < aMoniker> app.use(express.cookieSession({ secret: cookie_secret, key: 'connect.sid' }));
08:04 < aMoniker> but my connect.sid cookie is an empty object
08:04 < aMoniker> why and why, and why?
08:05 < syskk> airtanah: cool. never been there :(
08:06 < syskk> airtanah: where are you located?
08:06 < airtanah> syskk vancouver now, was just visiting
08:06 < syskk> cool
08:07 < airtanah> syskk check out https://groups.google.com/forum/?fromgroups#!forum/codeaholics
08:07 < airtanah> since you're nearby
08:07 < syskk> yea.. was living in hk recently but never had a chance to meet up 
08:07 < syskk> thanks for the link
08:08 < airtanah> syskk: these guys are also cool https://www.facebook.com/groups/hackjamhk/
08:21 < chovy> syskk: express-force-domain
08:21 < chovy> https://npmjs.org/package/express-force-domain
08:21 < syskk> chovy: you have a GH repo?
08:21 < chovy> yes
08:22 < Wiz_KeeD> hey guys
08:22 < syskk> chovy: sounds good. you should probably package this as a Connect middleware however
08:22 < Wiz_KeeD> is nodejs available just for chrome?
08:24 < chovy> Wiz_KeeD: node.js is server side
08:24 < Wiz_KeeD> sorry, experience with it whatsoever
08:24 < chovy> like php
08:24 < chovy> syskk: it was my first module
08:24 < Wiz_KeeD> got off like Node.js is a platform built on Chrome's JavaScript runtime
08:25 < chovy> what would i need to do differntly?
08:26 < airtanah> Wiz_KeeD it uses V8, Chrome's javascript runtime - that's about it
08:26 < airtanah> node adds a lot of c++ on top of that
08:26 < Wiz_KeeD> so if the hosting services provides support for node.js then i can make applications no problems?
08:26 < chovy> Wiz_KeeD: yeah or get a vps where you have root and can intall whatever you want.
08:27 < chovy> that's what i did
08:27 < syskk> chovy: actually. i think you could simply add an example in your README to use it this way: app.use(require('express-force-domain')('http://www.example.com')) ..
08:27 < syskk> chovy: dont think youll have to touch your actual code if it doesnt use anything express specific
08:27 < airtanah> Wiz_KeeD try heroku, it's free to develop off of
08:27 < chovy> syskk: i will put a note in the readme. but how would i use it with connect?
08:27 < aMoniker> req.headers is seeing the 'connect.sid' cookie correctly… why is showing up as { 'connect.sid': {} } in req.signedCookies ?
08:27 < Wiz_KeeD> i'm trying to make an online group chat on a site
08:27 < syskk> chovy: wow, didnt know about npm install --add.. thanks for the tip :)
08:28 < chovy> --save
08:28 < chovy> yeah
08:28 < chovy> it's awesome
08:28 < chovy> it'll even do ~0.1.3
08:28 < chovy> and such
08:28 < chovy> so it won't go past 0.1
08:28 < syskk> nice :)
08:28 < chovy> but will upgrade from 0.1.3 to 0.1.4
08:28 < syskk> i always manually edited my package and added the version 
08:29 < chovy> i figured i'd put that little gem in there
08:29 < chovy> updating readme now
08:29 < chovy> how would i use it for connect?
08:32 < chovy> syskk: nevermind, i see connect provides app.use
08:32 < syskk> yep
08:33 < syskk> chovy: I'm at 6 npm packages today :D well , they're all dependencies for https://github.com/olalonde/better-require
08:33 < syskk> trying to add more file types support
08:34 < chovy> cool
08:35 < chovy> i forget how to publish my node module again
08:35 < airtanah> chovy: npm publish
08:36 < airtanah> lol
08:37 < chovy> heh
08:37 < chovy> thanks
08:37 < chovy> syskk: i removed express dependency and added connect example.
08:39 < aMoniker> trying with RedisStore, still an empty object
08:39 < syskk> chovy: good :) 
08:39 < aMoniker> does anyone know about this?
08:40 < chovy> aMoniker: trying what
08:40 < aMoniker> I'm using:
08:40 < aMoniker> [5:02PM] aMoniker: app.use(express.cookieParser(cookie_secret));
08:40 < aMoniker> [5:02PM] aMoniker: app.use(express.cookieSession({ secret: cookie_secret, key: 'connect.sid' }));
08:40 < aMoniker> [5:02PM] aMoniker: but my connect.sid cookie is an empty object
08:41 < aMoniker> it's being passed correctly to req.headers
08:42 < aMoniker> but it's empty in req.signedCookies
08:42 < chovy> aMoniker: someone was asking about that the other day
08:42 < chovy> i'm not sure what the issue was
08:46 < syskk> chovy: did this in the past 2 hours: https://github.com/olalonde/better-require
08:50 < chovy> nice
08:51 < chovy> if i require a config.yaml file, how do i access its data?
08:51 < syskk> it just returns a JSON object
08:51 < mmalecki> syskk: you don't need a module for that
08:51 < mmalecki> well, you do, but require.extensions is the official way
08:51 < syskk> mmalecki: uhh really? lol
08:52 < syskk> mmalecki: yep. thats what my module is doing behind the scenes. maybe i should mention that
08:52 < mmalecki> ah, okay, lol
08:52 < mmalecki> sorry, I'm heavily sleep deprived
08:52 < chovy> me too
08:52 < chovy> it's 2am here
08:52 < chovy> time for bed
08:53 < mmalecki> it's 11 AM here >.<
08:53 < mmalecki> damn you node
08:53 < mmalecki> you making me not sleep
08:56 < Orbitrix> its 2:54am here
08:56 < Orbitrix> ;'(
08:59 < RLa> oh, just discovered you can compile some .jade files with stylus
08:59 < RLa> messed up commands here :)
09:05 < medikoo> gavin_huang: the nearest you can get is Webmake: https://github.com/medikoo/modules-webmake it also provides like require shim, but it's just 50 lines of code to manage require logic, nothing extra. What your asking (trimmed out requires) would possible with next version, bus still in development it's best to port code exactly as it is in files, without additional processing.
09:12 < gavin_huang> medikoo, this seems to be more lightweight than browserify. but directly removing require and put content there, is it possible? assuming the author doesn't reassign require.
09:13 < medikoo> gaving_huang: it's not that easy, as remember there might be circular dependencies, and you can't solve them that way
09:14 < gavin_huang> medikoo, when resorting to such lightweight tool, I doubt someone will use circular deps...
09:15 < medikoo> gavin_huang: if you're using CommonJS/NodeJS modules, for real, sooner or later you'll need circular dependencies it's important feature, and in some cases it's hard to go without it
09:15 < Guest_1448> is there a quick way to find the NUL char in a buffer?
09:15 < Guest_1448> something like .indexOf(0) but that doesn't work on buffers
09:16 < fatninja> For example I want in a page to loop through the articles received from the database and display them accordingly, how to do that ?
09:16 < medikoo> gavin_huang: I use webmake to buildclient-side applications that's built from over 300 modules (from about 20 packages) .. and there are circular references, you can't just cut off them
09:16 < fatninja> A JS Templating Engine or something like that
09:17 < Guest_1448> google nodejs templates
09:17 < Guest_1448> there are many of them
09:17 < Guest_1448> I use jade
09:17 < medikoo> gavin_huang: and still resigning from circular references just to save on that 50 lines of code, which weights nothing when you compare with application code, is probably not great direction
09:22 < gavin_huang> medikoo, could you give me a simple example as how circular deps happen when concatenating files, if none of them is written with circular deps?
09:23 < medikoo> gavin_huang: if there are no circular deps in your modules, there clearly won't be in your bundle
09:23 < medikoo> gavin_huang: what I meant is that in real world scenarios, sooner or later you'll need them
09:26 < medikoo> gavin_huang: also ask yourself whether is it really worth to resign from very important feature of modules logic, in the name of cutting 50 lines of code, which doesn't bring any downside
09:28 < gavin_huang> medikoo, to me, when using such tool, my goal would be that the tool would rewrite and concat my files such that when it's done, the final code would be exactly how I would write if browser is the only env needs to be supported. base on this premise, no circular deps would happen, since browser doesn't support it (or does it?)
09:29 < medikoo> gavin_huang: if you want to write exactly as you would for browser, you shouldn't use modules at all
09:31 < medikoo> gavin_huang: what tools like Browserify and Webmake do is providing modules engine for browser, so you can write NodeJS for browsers
09:31 < gavin_huang> medikoo, but if the code needs to work in nodejs. modules has to be used. otherwise variables aren't exposed. assuming the code need to be splitted into different files.
09:31 < medikoo> gavin_huang: translating modules code into code that it would look as if it was written directly for browser, doesn't make any sense to me.. what's the benefit
09:33 < AAA_awright> medikoo: There's nothing wrong with that. What modules provide is a variable context. A module is just a special type of function, after all.
09:33 < medikoo> gavin_huang: yes you're writing code that works natively in NodeJS and in Browser with help of Webmake, that's the deal - to be able to write for browser same way as you for NodeJS. Modules system are way better way to organize the code than separate script files as we done in Browser years ago
09:34 < medikoo> AAA_awright: what you're referring to? Sorry I don't get :)
09:34 < AAA_awright> medikoo: "translating modules code" makes perfect sense, a module is just a special kind of function
09:36 < medikoo> AAA_awright: gavin_huang would like to strip modules functions totally, so code looks as if you write it directly for browser years ago… and I'm saying that very ok that  modules stay as functions in a browser
09:36 < strk> is http.request callback invoked on socket creation or before ? that is, how does http.globalAgent.maxSockets affect that ?
09:36 < gavin_huang> medikoo, I got to admit, the No.1 reason I want to do that is my wicked obsession with pureness. :)
09:36 < AAA_awright> gavin_huang: Pure ECMAScript code doesn't work like it does in the browser
09:36 < AAA_awright> The browser actually mangles it pretty badly
09:36 < strk> if I set a maxSocket of 1 and start 100 requests, do I have to wait for 99 responses before getting a call to the callback of the last ?
09:37 < AAA_awright> Or rather, forces you to mangle it
09:38 < AAA_awright> gavin_huang: Browserify does exactly what you want I think. It provides a context for each module definition (that is to say, a function definition, and the require() function to call them.)
09:38 < AAA_awright> That is the necessary *and proper* way to do it
09:40 < medikoo> gavin_huang: that's what I thought ;) ..but think about it, also mind that Webmake was made also with kind of obsession for pureness: it provides smallest footprint possible (nothing to compare with Browserify).. and doesn't change a single character in your modules code. Additionally with source maps feature you even see your modules as separate files in browser console, so as if browser would directly support modules
09:41 < gavin_huang> I seen the only major difference in this case between common js and browser is that in browser, global variables in a file is automatically populate to the global scope. but if you write code carefully, and only expose one global variable, it can simulate the commonjs env. that's why I would like a preprocess to "perfectly" convert the code between these two envs 
09:44 < medikoo> gavin_huang: it won't give you any benefit, it will change your code and make it more difficult for debugging and remember that with CommonJS modules you don't need to use any global variable, and that's it's huge *advantage* not drawback, why reverting it back?
09:47 < gavin_huang> medikoo, I guess you are right. currently my project's deps are relatively simple, and simple search & replace works ftm, when it grows out of control I will give webmake a shot. thanks for sharing it btw.
09:47 < medikoo> gavin_huang: also with es6 we will have modules natively in a browser, and the way they would work is very similar to what we have now in node. So it's good to use modules in browser now with Webmake and later switch to native engine, it would easy and natural
09:48 < medikoo> gavin_huang:  all the best with your project
09:49 < abrkn> whats the command to wipe all npm cache?
09:50 < gavin_huang> medikoo, thx.
09:50 < abrkn> gahh, i keep getting stuck on dwnloading backbone from npm. i refuse to believe it's larger than a few kb
09:50 < AAA_awright> ECMAScript doesn't nor will it define how to operate with web browsers
09:54 < strk> where's the documentation for Date class ?
09:55 < SomeoneWeird> look on mdn
10:03 < AAA_awright> strk: Also try the specification, http://ecma-international.org/ecma-262/5.1/#sec-15.9
10:05 < Guilt> hello all
10:05 < Guilt> i am using WebSocket node
10:06 < Guilt> is there a way to uniquely identify a WebSocketConnection object?
10:06 < Guilt> remoteAddress isn't unique enough, because it doesnt have the port information
10:06 < Guilt> what is generally used for this purpose?
10:15 < clever> Guilt: you should be able to access cookies, but that will have dups within a browser
10:16 < Guilt> no cookies being used, because it's a browser and mobile app
10:16 < Guilt> and the mobile app directly performs a socket upgrade
10:17 < Guilt> the server is being written so that any web socket compliant client will connect, and not introduce an extraneous protocol
10:17 < clever> ive been using socket.io myself, it acts as a wrapper arround websockets
10:17 < clever> while being able to fall back to long polling if neede
10:17 < clever> d
10:18 < Guilt> i wanted to only use a simple web socket API, which supports RFC 6455
10:18 < Guilt> hence I decided to use web socket node
10:18 < dileep> hey could anybody tell me about wat wrong with dis code     http://debuggable.com/posts/parsing-a-form-in-node-js-1:4b0bff13-4244-4ebc-8455-4975cbdd56cb
10:18 < Guilt> otherwise, i'd have to start assigning such an ID myself and start issuing requests
10:19 < clever> Guilt: thats something that socket.io does automaticaly
10:19 < Guilt> but socket.io isn't really compliant with RFC 6455
10:19 < dileep> please tell  me about my issue
10:19 < Guilt> it has it's own protocol which i want to avoid,.
10:21 < Guilt> i'll probably reach out to this guy - https://github.com/theturtle32
10:23 < dileep> any node.js developer heer
10:27 < dileep> no node.js developer here
10:27 < stevedomin> hello dileep
10:28 < dileep> hello Sevedomin,i need help
10:28 < dileep> tell me about wat wrong with dis code     http://debuggable.com/posts/parsing-a-form-in-node-js-1:4b0bff13-4244-4ebc-8455-4975cbdd56cb
10:29 < dileep> pardon for mistake
10:29 < SomeoneWeird> dileep, use express and bodyparser
10:30 < dileep> Hello someoneweird
10:30 < dileep> ok
10:30 < dileep> code is fine
10:31 < mauritslamers> dileep: the reason it might not work is that you actually don't listen ot to ethe ost data
10:31 < dileep> i alreaddy change tthe port
10:31 < mauritslamers> dileep: you need to add listeners to the request and gather the data
10:32 < dileep> i done tha
10:32 < mauritslamers> the post data is not directly available in the request
10:33 < dileep> wat to do for that
10:35 < mauritslamers> dileep: http://nodemanual.org/latest/nodejs_dev_guide/creating_http_requests.html
10:36 < abrkn> meh, where is substack when i need him ;)
10:37 < abrkn> browserify is traversing mongoose for some reason
10:42 < aMoniker> why are my connect session cookies getting a hashed secret but no hashed session id?
10:42 < aMoniker> { 'connect.sid': 's:j:{}.Jzmm9IXnFtJt1AZEY/NxBCDDQnX6a7+Nuau5qBrQBc'  }
10:48 < aMoniker> req.session is an empty object when it gets hashed and serialzied into the cookie - why?
10:59 < dileep> mauritslamers,where to listen that command
11:01 < dileep> how to parse form data in node.js
11:01 < zonetti> dileep, with or without expressjs?
11:02 < dileep> wiithout express
11:02 < zonetti> dileep, so i don't no :)
11:02 < dileep> with express
11:03 < zonetti> dileep, just call the bodyParser middleware through "app.use(express.bodyParser())"
11:04 < dileep> could u provide me the code
11:04 < SomeoneWeird> code it yourself
11:04 < dileep> https://gist.github.com/3929817 any problem in that
11:04 < SomeoneWeird> use express
11:05 < SomeoneWeird> not http server
11:05 < zonetti> dileep, you should definitely use express :)
11:06 < dileep> ok follow d  word
11:06 < zonetti> dileep, using express, you can parse like this: http://expressjs.com/api.html#req.body
11:07 < dileep> Thanku !!!
11:09 < dileep> Cool!!!
11:11 < zonetti> dileep, oh yeah it's cool :D
11:11 < zonetti> dileep, it gets even better using coffee-script
11:12 < dileep> cofeescript please provide link
11:12 < zonetti> coffeescript.org
11:13 < zonetti> you should learn to use google :o
11:14 < dileep> Zonetti, he he he...spoon feeding
11:14 < dileep> ;)
11:17 < SomeoneWeird> dileep, you're a software developer, you should at least be able to use google
11:18 < dileep> SomeoneWeird,yeah i know butt when i google i gett confuse by having lots of inforrmation.
11:19 < SomeoneWeird> er
11:19 < SomeoneWeird> ok..
11:21 < graeme_f> Did I read somewhere that EventEmitter is going to get an event that is emitted whenever any other event is emitted?
11:21 < graeme_f> It's proving tough to search for :/
11:21 < dileep> Someone,tthanks for that day to inspire about ubuntu
11:25 < strk> does node cache DNS lookups ? can the cache be controlled in any way ?
11:26 < SomeoneWeird> dont think it does strk
11:26 < SomeoneWeird> could be totally wrong though
11:27 < AAA_awright> strk: I'm pretty sure that's up to the OS
11:27 < SomeoneWeird> yeah, but "node" doesnt
11:27 < AAA_awright> DNS has a well-defined cache behavior
11:27 < SomeoneWeird> if it does on the OS side node can't control that
11:27 < strk> ok, I guess I'll dns.lookup myself then, and pass the resolved IP to http.get ...
11:27 < AAA_awright> strk: Again, that's up to the OS
11:28 < AAA_awright> How would that help you, unless you're looking up a SRV record or similar?
11:37 < strk> AAA_awright: round-robin, want to be sure to always get the same IP 
11:37 < strk> and report it
11:38 < AAA_awright> That's sort of breaking DNS?
11:38 < strk> it's a benchmark tool I'm writing...
11:48 < MI6> joyent/libuv: Ben Noordhuis v0.8 * c2478b2 : linux: update comm field in uv_set_process_title()  Makes the new process - http://git.io/KEZtOA
12:03 < dileep> can anybody provide me express examples but works fine
12:03 < abrkn> with browserify, is there a way to require one file for backend and one for frontend, assuming that: if(process.browser)require('browser.js');else require('node.js'); would cause browserify to pick up both
12:08 < dileep> can anybody provide me express examples but works fine
12:11 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:45 < Guest_1448> yes, google
12:45 < Guest_1448> it fulfils all your needs!
12:46 < Guest_1448> find websites, blog articles, informations, book tickets, porn and more!
12:46 < Guest_1448> google today
13:45 < Jimu> I accidentally created an npm user account - how do i remove it?
13:56 < nathan7> Jimu: ..don't? Why do you want to remove it?
13:56 < nathan7> Jimu: you could poke isaacs about it
13:56 < Jimu> nathan7: the username is all wrong, for one
13:57 < nathan7> Jimu: then poke isaacs about it
13:59 < Jimu> nathan7: [ERROR]	The command “poke” is not known to the server. :)
14:00 < nathan7> Jimu: POKE
14:00 < nathan7> Jimu: that's how you poke someone
14:00 < nathan7> or
14:00  * nathan7 pokes Jimu with a pointy stick
14:00 < nathan7> it is purely a social convention
14:01 < Jimu> i figured
14:02  * Jimu pokes isaacs with a copy of "Are You There God? It's Me, Margaret"
14:22 < niggler> !mdn regex
14:27 < tuhoojabotti> Regular Expressions - Summary: magic
14:28 < tuhoojabotti> References: Me (tuhoojabotti)
14:32 < niggler> haha tuhoojabotti 
14:32 < niggler> i think i found a bug in jshint
14:32 < niggler> so i wanted to confirm MDN's interpretation first
14:32 < tuhoojabotti> haha - Does not compute
14:33 < tuhoojabotti> Kill all humans.
14:46 < niggler> tuhoojabotti: https://github.com/jshint/jshint/issues/705
14:46 < abrkn> anyone know a good "bundler"? need support for browserify, less, css, uglify, css compressor
14:46 < niggler> define bundler
14:47 < abrkn> minifies, uglifies and combines assets into a string
14:47 < tuhoojabotti> Definition: bundler, a person who repeatedly purchases Humble Bundles without really having to.
14:48 < tuhoojabotti> abrkn: I think you mean concatenates
14:48 < niggler> tuhoojabotti: you mean someone who produces humble bundles
14:48 < tuhoojabotti> maybe
14:48 < niggler> well that would be a humble bundler
14:48 < niggler> a humbler, as it were
14:49 < tuhoojabotti> bundie is then the bundle junkie?
14:49 < tuhoojabotti> bundlie
14:49 < niggler> indeed tuhoojabotti 
14:50 < kevin> mongo related => I have a virtual property called: followable, I find the user, and then I set the virtual and then spit out the user but the virtual doesn't get spit out with it... any ideas
14:50 < kevin> I can show some code if someone wants to help
14:51 < niggler> node.js != mongo
14:51 < niggler> well, node.js !== mongo
14:51 < niggler> its not known if node.js != mongo
14:51 < abrkn> so many channel trolls here...
14:51 < kevin> niggler: thanks, not helpful, back away
14:51 < abrkn> no knowledge, only here to make shit and no intention of supporting community
14:51 < kevin> im using mongoose
14:51 < niggler> abrkn: this is the node.js channel
14:52 < niggler> your question is a bit more germane
14:52 < niggler> but you still haven't defined what "bundling" means
14:52 < abrkn> niggler first on my freenode ignore. *applaud*
14:52 < niggler> you can write a makefile
14:52 < kevin> and your ability to help has been overwhelming niggler
14:52 < abrkn> kevin: there's a method you call to inline sub documents, ill look
14:52 < kevin> thanks abrkn, i appreciate it
14:54 < tuhoojabotti> abrkn: I bet any large irc channel (or any community) with little-to-no moderation aggregates trolls.
14:54 < abrkn> and a second on ignore!
14:54 < abrkn> kevin: find(...).populate('sub doc')
14:55 < kevin> thanks abrkn
14:55 < abrkn> kevin: so you do model.find(query).populate(subdoc).exec(function() { this is the callback })
14:55 < tuhoojabotti> Well, that wasn't even offtopic because he started the topic, but whatever.
14:55 < kevin> sweet. cheers @ abrkn
14:55 < niggler> high five tuhoojabotti 
14:56 < gildean> abrkn: you're not very good at irc if you ignore people by one line
14:57 < abrkn> gildean: scroll
14:57 < tuhoojabotti> gildean: To be fair, I had made 2 jokes before the last line.
14:58 < niggler> for the record, the jokes started because abrkn didn't properly define bundle
14:58 < gildean> tuhoojabotti: well aren't you a troll then
14:59 < jden|away> i prefer wiring my bundles together using twine. tape is for wimps.
14:59 < niggler> twape?
15:00 < jden> that's just crazy
15:06 < tubbo> hey guys
15:06 < tubbo> having some serious problems building on heroku using heroku toolbelt and node 8
15:06 < tubbo> 0.8*
15:06 < tubbo> and npm 1.1
15:06 < tubbo> here's the error i get; /app/slug-compiler/lib/utils.rb:66:in `-': Time can't be coerced into Float (TypeError)
15:07 < plugin> I gave up on heroku.
15:07 < tubbo> heh, heroku isn't the problem here ;)
15:07 < tubbo> works great for all my ruby apps
15:07 < tubbo> i love to work with node and play with it but man...it's a pain in the ass to do anything serious with it :(
15:07 < niggler> heroku is good for ruby
15:08 < tubbo> yeah..
15:08 < plugin> I switched to AWS for my node-based apps.
15:08 < plugin> Although it's a fucking pain to learn.
15:08 < plugin> but worth it.
15:08 < niggler> i disagree tubbo -- node is actually fun and can be used for serious stuff
15:08 < tubbo> plugin: this is just for an instance of hubot
15:08 < tubbo> so i'm not looking to pay
15:08 < tubbo> i'm pretty comfy with AWS/EC2, we run our whole biz on it
15:08 < plugin> tubbo: AWS has a free tier right?
15:08 < tubbo> but i just didn't want to have my company pay for another instance
15:09 < kevin> plugin: Micro 
15:09 < tubbo> plugin: we have like 60 paid instances or something ;)
15:09 < plugin> right
15:09 < tubbo> free tier is for the first year of micro
15:09 < tubbo> aws rules in many ways
15:09 < tubbo> if heroku always worked, it would be way better ;)
15:10 < plugin> well you're right. Still my experience with heroku with node-based apps is bad.
15:10 < niggler> nodejitsu i think is the equivalent for node
15:11 < tubbo> oh yeah niggler i heard about nodejitsu
15:12 < tubbo> honestly the heroku thing is just because hubot runs on heroku and if it's good enough for github..
15:12 < tubbo> my beef is just that it doesn't build sometimes
15:12 < tubbo> like every so often npm will just fail to build some C extension i need, and i have to try again
15:12 < tubbo> usually it works the 2nd or 3rd time..
15:13 < niggler> worst excuse ever tubbo 
15:13 < niggler> just because its good enough for github doesn't mean its good enough for you
15:13 < plugin> niggler:  lol
15:14 < niggler> plugin: what i mean is that im trying to do something for which many existing solutions just don't cut it
15:14 < whowantstolivefo> hi, is there any good node.js reference tutorial for ruby on rails  ? 
15:14 < niggler> so it makes no sense for me to fall back on what they use if the relevant component is crippling
15:15 < niggler> whowantstolivefo: node.js != ror
15:15 < gildean> iirc nodester still offers free plans too
15:15 < gildean> they use a git-based deployment too
15:15 < niggler> do you want to learn node coming from a ror background?
15:15 < tubbo> lol
15:15 < tubbo> he gone brah
15:16 < niggler> the one thing i worry about, gildean 
15:16 < niggler> is that if you trust some third party
15:16 < niggler> then they could do something with your code
15:16 < niggler> gildean: http://techcrunch.com/2012/08/28/appfog-acquires-nodester-as-two-platform-as-a-service-providers-become-one/
15:16 < plugin> hahahahahah
15:16 < niggler> so lets say, god forbid
15:16 < niggler> you build a product and actually sell it
15:17 < niggler> your rights to the code aren't as clear 
15:17 < gildean> niggler: i know that appfog aquired nodester, but as i said iirc they still offer free accounts
15:17 < phrearch> hello
15:18 < gildean> niggler: it's always a black box when you buy paas
15:18 < phrearch> does anyone know about how to write middleware patterns?
15:18 < phrearch> im trying to add 'middleware' to my websocket handler
15:18 < phrearch> but i need to read up about how thats done :)
15:26 < pringlescan> Howdy, I'm using JSON.parse() to parse JSON that parses properly in Chrome… However, it doesn't parse properly in Node.JS… any ideas? Shouldn't both be V8's implementation of JSON.parse?
15:28 < case__> pringlescan, works like a charm here, has always worked..
15:28 < case__> pringlescan, are you sure you're sending a string to JSON.parse() ?
15:28 < tubbo> niggler: what do you mean? everyone hosts their code on place like linode, etc.
15:28 < pringlescan> It seems to be the way that my Buffer containing the JSON is converted to a string. It's said to default to UTF8
15:29 < tubbo> i view heroku as the same thing
15:29 < case__> pringlescan, tried to force it with toString() ?
15:29 < pringlescan> case___, I'm using hoxy a Node.JS proxy, and when my browsers makes the request, it works fine, so Hoxy isn't messing with the encoding at that point.
15:29 < pringlescan> case__, yes that's what I started with.
15:29 < niggler> hmm
15:29 < pringlescan> What's very odd, is when I do a JSONLint on the response in the browser, it's valid; when I console.log() what's I get from .toString() it's invalid.
15:31 < hasse> What is best practice if I wanna define like important variables at the beginning of my script? In Ruby I could use constants, USERNAME = 'foobar'
15:33 < pringlescan> When I run a diff, what I get out of Node.js is inserting a random ,
15:33 < pringlescan> I wonder if this random , comes from the way chunks are put together
15:33 < pringlescan> It would appear it does this around 10 times
15:34 < jcrew> pringlescan: what is the output of a typeof <var> 
15:34 < jcrew> or <var> instanceof Array
15:34 < pringlescan> jcrew, before calling toString
15:34 < jcrew> yes
15:35 < pringlescan> it says object
15:35 < jcrew> what about instanceof
15:35 < context> if it says object then its an object....
15:36 < pringlescan> The object looks something like this: [ <Buffer 0a 7b 22 69 64 65 6e 74 69 66 69 65 72 22 3a 22 63 72 74 5f 69... >
15:36 < context> oh wait
15:36 < context> array says object haha
15:36 < jcrew> yea
15:36 < jcrew> pringlescan: what is the output of <var> instanceof Array
15:36 < jcrew> the toString() will cause extra commas if it's an array
15:37 < pringlescan> jcrew, true
15:37 < pringlescan> it sounds like tostring is doing a join with commas?
15:37 < pringlescan> when converting from a buffer
15:37 < jcrew> that's how it generally behaves, it's converting an array of buffers to strings and joining with ","
15:38 < jcrew> but you still haven't answered the '<var> instanceof Array' 
15:38 < abrkn> what can cause a file not to be included by browserify (even though require'd) and where's a good place to start debugging?
15:38 < pringlescan> jcrew, that evaluates to true
15:39 < jcrew> then if you want the output with the extra commas do a <var>.join("")
15:39 < pringlescan> var BodyString = response_info.body.join('').toString(); 
15:40 < pringlescan> awesome… thanks guys, I knew it was something weird I was overlooking.
15:49 < gnarf> isaacs: thanks for the RT :)
15:55 < tubbo> so how does `coffee` work on Node? does it still compile to JS and then node executes that?>
15:57 < gildean> tubbo: what's the other option? v8 running straight up cs?
15:57 < tubbo> gildean: yeah
15:57 < tubbo> how about we just implement v8 in coffeescript guyz ;)
15:57 < gildean> i don't think it does that
15:57 < tubbo> that's what i figured
15:58 < tubbo> so coffee basically compiles just in time, and then sends it off to v8 to be compiled just in time? ;)
15:58 < gildean> just in time
15:58 < tubbo> justin time.
15:58 < gildean> i'll pass
15:59 < tubbo> heh
16:23 <@isaacs> gnarf: no problem, thanks for the article.
16:28 < airtanah> if anyone has tried Foreman for running their jobs, I attempted a Node.js native implementation
16:28 < airtanah> http://nodefly.github.com/node-foreman/
16:30 < lowtax2> airtanah: thats cool
16:31 < airtanah> lowtax2: thanks
16:31 < airtanah> it exports upstart jobs that are not dependant on the foreman module
16:32 < lowtax2> and what is upstart
16:32 < airtanah> upstart is the new hotness when it comes to init.d
16:32 < airtanah> i think it's popular on ubuntu, but available on most systems
16:33 < lowtax2> hmm everything ubuntu does on their own sucks
16:33 < lowtax2> so.....
16:33 < airtanah> lol
16:34 < airtanah> well other output formats are "in the pipe" but welcome additions
16:34 < ttilley> upstart makes it complicated as fuck to determine the order in which services start
16:34 < lowtax2> canonical is a joke
16:34 < ttilley> especially since most of the services on ubuntu are still sysv init scripts, run as part of the upstart process
16:35 < airtanah> would you prefer an init.d job?
16:35 < ttilley> no, but it makes debugging interaction of cloud-init and other third party stuff that uses upstart weird. =]
16:35 < ttilley> just had one of those sessions last month
16:35 < ttilley> wasn't fun
16:36 < airtanah> actually it was a PITA to debug the upstart jobs foreman was exporting
16:36 < ttilley> heh
16:37 < airtanah> but now it auto-generates so i don't have care
16:41 < ttilley> airtanah: there is a system that builds a graph of what happens during boot and how long each thing ends up taking. forget the name. but it was helpful.
16:41 < phrearch> hi
16:42 < phrearch> anyone knows how to write a middleware pattern? i want to implement something like that for websockets
16:43 < wltsmrz> function(req, res, next) { /* call next() at some point if the request is not applicable */ }
16:44 < phrearch> wltsmrz: sorry, im not explaining well. I want to implement a middleware function for something non-http'ish
16:44 < phrearch> like when a websocket message comes in, i want to run the 'request' through some intermediary list of functions first
16:45 < wltsmrz> Well, you have an array of middleware functions presumably. You process the next function within that array by calling next(). I'll see about writing an example...
16:47 < airtanah> ttilley sounds interesting, if you remember please let me know
16:48 < airtanah> but i didn't have to debug it during startup, i just used 'sudo start BLA"
16:48 < wltsmrz> Something like this https://raw.github.com/gist/af4ff3d2f2ef050bd7fc/11cfd0476002d74fbe5715466005b99f93d8e156/gistfile1.txt phrearch
16:48 < ttilley> airtanah: pybootchartgui
16:49 < phrearch> wltmsrz: awesome! thanks. ill try to make it work with that code
16:50 < wltsmrz> Well... I hope you will just use that as an example for processing an array of what-have-you in this manner.
16:50 < ttilley> airtanah: install it and reboot, your graph will be in /var/log/bootchart as a png file
16:50 < wltsmrz> I' not sure if that code is exactly copy/paste material. :)
16:50 < phrearch> no thats ok, but im a bit confused how middleware passes the req/res variables around
16:50 < phrearch> and how next works
16:51 < phrearch> is the ;( in ;(function next(i) { a typo?
16:51 < wltsmrz> Negative. That's my habitual protection against missing semicolons before self-executing functions.
16:51 < wltsmrz> If I had just done (function(){})(); it probably would have broken
16:52 < JacksomeAP> hey guys
16:52 < JacksomeAP> it's working
16:52 < JacksomeAP> will report with my findings later
16:52 < airtanah> ttilley: what distro do you use in production?
16:53 < phrearch> aha ok. havent seen this syntax yet. still a nodejs/js noob :)
16:54 < ttilley> airtanah: ubuntu precise, which is weird. for years on end all anyone would support is RHEL, but now it seems like a fair number of companies have transitioned to ubuntu.
16:54 < wltsmrz> You could do function fn(){}; fn(); or you can do ;(function fn(){})(); the latter just calls itself immediately without a second statement.
16:55 < airtanah> ttilley: we run RHEL in production, but I often test on ubuntu locally using Vagrant
16:55 < airtanah> but i'm pretty platform agnostic, and I don't love or hate ubuntu
16:58 < phrearch> wltsmrz: thanks for explaining
17:01 -!- mode/#Node.js [+o piscisaureus__] by ChanServ
17:10 < wltsmrz> Here's a working example of that kind of pattern phrearch https://gist.github.com/25b590e4592fdc387ff7
17:11 < phrearch> wltsmrz: cool thanks! i was still stuck on that :)
17:12 < phrearch> awesome, that just works :D
17:14 < phrearch> this is quite complicated stuff
17:15 < wltsmrz> Like anything else, you get used to it. If you can point to anything in particular I'll try to explain.
17:17 < phrearch> ok cool. ill first study it
17:20 < TehShrike1> <3 the npm substack easter egg
17:22 < Jimu> wltsmrz: what's with that semi-colon on line 5?
17:26 < wltsmrz> Habitual protection, Jimu. In this case it doesn't make a difference. It's there because it feels right to my fingers. If the previous line had some statement that didn't end with a semicolon we would have ourselves a veritable catastrophe.
17:27 < wltsmrz> Consider the following https://gist.github.com/3c5c87415294e978507e
17:27 < wltsmrz> Breaks.
17:27 < lowtax2> middle ware!!!!
17:28 < lowtax2> tupperware?
17:29 < EyePulp> underwear
17:31 < vicapow> is npm down?
17:31 < xer0x> vicapow looks like it
17:31 < vicapow> damn :(
17:32 < vicapow> xer0x: at least I'm not going crazy. lol
17:32 < airtanah> yup
17:34 < phrearch> heh i ran into a design flaw of my app again
17:34 < phrearch> if i want to call app.render() for template rendering, i dont know how to add the request.context to it by default
17:35 < phrearch> http://paste.kde.org/577826/
17:36 < phrearch> i could add it to the context parameter of the render function, but i would really like that to be done automatically
17:39 < MI6> joyent/node: isaacs crypto-buffers * b3c3da2 : crypto: Add crypto.DEFAULT_ENCODING (defaults to 'buffer')  This is a fla (+14 more commits) - http://git.io/SbXJeQ
17:41 < Ramone> hey all... is npm slow for others too?
17:44 < aandy> maybe some cloud issues? dunno where npm is hosted, but reddit is down too
17:44 < aandy> *obviously* related
17:44 < othiym23> w00t mranney hassled
17:44 < s5fs> aandy: no way man, the cloud is unbreakable
17:45 < lowtax2> i run a small cloud
17:45 < othiym23> isaacs: whenever you get back to civilization, if you could take another look at that node-redis domains pull request, I'm still trying to get that through
17:46 <@isaacs> othiym23: will do
17:46 <@isaacs> i'm back in CA, but kinda spent.
17:46 < aandy> s5fs: not sure if broke or just highly unavailable
17:46 <@isaacs> probably not going to get much done today
17:46 < lowtax2> high as a mother fucker
17:46 < lowtax2> oops wrong window
17:46 < s5fs> indeed
17:54 < cordoval> anyone with this problem starting node.js server?
17:54 < cordoval> https://gist.github.com/0ee2364ea40dd4acdd47
17:55 < wltsmrz> Means you haven't installed the 'request' module.
17:55 < wltsmrz> npm install request
17:55 < wltsmrz> (But NPM might be down at the moment)
17:55 < airtanah> npm install --save request
18:00 < cordoval> why the --save
18:00 < airtanah> --save will add it to your package.json file 
18:00 < wltsmrz> Adds 'request' to package.json 'dependencies'
18:01 < cordoval> isee there is already a package.json there
18:01 < cordoval> how to run npm install?
18:01 < cordoval> that is it?
18:02 < cordoval> yep it is working
18:02 < cordoval> thanks
18:03 < MI6> joyent/node: isaacs crypto-buffers * 3ca0550 : crypto: Add crypto.DEFAULT_ENCODING (defaults to 'buffer')  This is a fla - http://git.io/YLFo-Q
18:11 < othiym23> @isaacs: urgency level is low, mranney needs to deal with the issues in the new redis parser before he's going to have time to screw around with domains
18:11 < othiym23> @iaacs: I also hope to have a blog post about domains up on the New Relic blog up in the next couple weeks -- I've had a LOT of people asking me for that
18:12 < MI6> joyent/node: isaacs crypto-buffers * 135e849 : doc: crypto.DEFAULT_ENCODING - http://git.io/q8fajw
18:12  * othiym23 needs to work on his typing skills
18:16 < analphabet> npmjs.org is down. damn.
18:16 < `3rdEden> lal, is it running aws?
18:16 < `3rdEden> running on*
18:17 < lowtax2> its running node!
18:17 < lowtax2> the cloud has failed
18:17 < `3rdEden> it can't run on node, as it's down, and node is webscale so that is not possible
18:17 < lowtax2> the cloud is a way to consolidate servers and data so its easier to tier/subscription model the internet after the i911 false flag event
18:17 < chovy> heh
18:17 < lowtax2> fyi
18:17 < `3rdEden> it's probably just PHP
18:18 < s5fs> lowtax2: supported by the central scrutinizer
18:21  * Jimu pokes isaacs
18:23 < airtanah> is aws down as well?
18:24 < wltsmrz> Yeah, partial outage.
18:24 < wltsmrz> http://status.aws.amazon.com/?t
18:24 < airtanah> must be thunder storm
18:25 < diamonds> I'm having trouble connecting to npm servers
18:25 < aandy> yeah, they just raised their alerts from green to yellow
18:26 < aandy> in aws terms, that means nuculear disaster
18:26 < diamonds> Error: connect ECONNREFUSED // command "node" "/usr/bin/npm" "search" "travisify"
18:26 < wltsmrz> It's the clouds, diamonds. Both literal and figurative.
18:26 < diamonds> agreed
18:26 < aandy> but mostly figurative
18:26 < aandy> :)
18:27 < diamonds> I don't *think* I'm behind a proxy :/
18:27 < wltsmrz> diamonds, it's probably related to the partial AWS outage. We've had issues for some time now.
18:28 < diamonds> wltsmrz: ahh... so it's not just me?
18:28 < diamonds> ty
18:28 < wltsmrz> Correct
18:29 < airtanah> aws is down... checking for zombie apocalyps
18:30 < nrmL> is it possible to run node on a GPU?
18:30 < diamonds> but... green check marks http://status.aws.amazon.com/
18:31 < borfast> hi everyone.
18:31 < borfast> diamonds, are you talking about the npmjs.org site being down?
18:32 < aandy> diamonds: green means "maybe", green with "i" sticker means "probably down"
18:32 < lowtax2> what is a beanstalk
18:32 < aandy> i don't even dare to think of what yellow or red means
18:33 < _eddyb_> why is NPM down. again
18:34 <@Nexxy> _eddyb_, AWS
18:34 < diamonds> borfast: I'm talking about registry.npmjs.org being down
18:34 <@Nexxy> most of the internet is down
18:34 < diamonds> i blame Big Data
18:34 < s5fs> well, one small yet important part of the internet is down
18:35 < borfast> diamonds, yeah, but I can't get npmjs.org either
18:35 <@Nexxy> s5fs, no, the sky is falling
18:35 < s5fs> explains the fog this morning, falling clouds and all
18:35 < s5fs> north virginia again? sheesh
18:36 < tubbo> s5fs: amazon's redheaded stepchild
18:37 < s5fs> tubbo: as a red-headed stepchild myself, i know that feel
18:37 < chovy> the cloud is invulnerable. must be a cyber attack
18:38 < s5fs> whatever, as long as netflix is unaffected when i'm at home, i'm cool
18:38 < s5fs> reddit is down but i can get shitty political news and cat pictures elsewhere
18:38 < chovy> as long as it doesn't rain in SF tonight, I'm good
18:39 < STRML> Is npmjs.com down for anyone else?
18:39 < chovy> STRML: yes
18:39 < STRML> any news? i just deployed to a prod server that now crashed on an npm install :S
18:39 < wltsmrz> Nexxy, should maybe set a channel topic.
18:39 < aandy> good idea
18:40 < aandy> STRML: aws outage. difficult to give an ETA i think
18:40 < STRML> kk. thanks
18:40 < aandy> check out the respective github repositories if you need to get your production up and running
18:40 -!- Nexxy changed the topic of #Node.js to: npmjs.org is currently unavailable due to AWS outage.
18:40 < chovy> aws goes down a lot
18:41 < chovy> that's the third time this year
18:41 < aandy> virginia goes down a lot*
18:41 <@Nexxy> or you could run your own npm mirror ;P
18:41 < mscdex> \o/
18:41 <@Nexxy> just sayin'
18:41 <@Nexxy> you really shouldn't be relying on npmjs.org for production deploys
18:41 < chilts> I wouldn't have thought it was every AZ though ... I might go and find out
18:42 < chovy> it isn't
18:42 < aandy> Nexxy: just as people shouldn't rely on single data centers, or even providers :)
18:42 < airtanah> what would you suggest for an npm install in production ?
18:42  * mscdex shakes a fist at the Internet
18:42 < chovy> were in "the cloud(tm)" with aws, and it is fine
18:42 < aandy> mscdex: haha
18:42 < nlf> i like to deploy my code the old fashioned way, floppy disks and snail mail
18:42 < lowtax2> all your uptime are belong to amazon
18:42 < lowtax2> smart move there
18:42 <@Nexxy> I haven't had a complete failure in years
18:42 <@Nexxy> geographic diversity what?
18:42 < chovy> nlf: that is best way
18:42 < lowtax2> prepare for a COMPLETE FAILURE
18:43 < chovy> you can send certified mail to be sure there is no downtime.
18:43 < lowtax2> no refunds
18:43 < nlf> right
18:43 < FunnyLookinHat> Why do people still sit on AWS ?  It seems to go down once every few months...
18:43 < mscdex> amazon should at least have a dialup backup in case of outages like this
18:43 < lowtax2> unless you have "act of terrorism" insurance
18:43 < FunnyLookinHat> Go Rack or something.  :D
18:44 < nlf> we switched to linode for a bunch of our systems
18:44 < mscdex> AWS BBS
18:44 < nlf> they've been fine
18:44 < chovy> i use linode-like service, but cheaper
18:44 < mscdex> i want to transfer npm packages by ZMODEM!
18:44 < chovy> i still get all my support from #linode though :)
18:44 < chovy> prodigy has a backup.
18:45 < lowtax2> chovy: #linode is cesspool of brown nosers
18:45 < chovy> how so?
18:45 < aandy> brown nosers?
18:45 <@Nexxy> that's not very nice
18:45 < chovy> they seem pretty helpful when I'm in there
18:45 <@Nexxy> pretty sure lowtax2 is just grumpy
18:45 < airtanah> is there a way to npm install ONLY from cache?
18:45 < _eddyb_> Nexxy: oh, thanks. I found the module on github, which is unstable but working
18:45 < lowtax2> just go there
18:45 < chovy> he has poopy pants on
18:46 < mscdex> you can npm install from github
18:46 < lowtax2> they all act like they are staff
18:46 < lowtax2> but they are not
18:46 < lowtax2> just losers that ask you stupid questions without even being able to help you
18:46 < chovy> i found a vps for $15/mo
18:46 < syskk> god i hate rackspace so far :(
18:46 < lowtax2> chovy: which
18:46 < chovy> 1gb ram
18:46 < chovy> unmetered bw
18:47 < chovy> bermanhosting.com
18:47 < aandy> that's the thing though, even with linode
18:47 < pringlescan> does anyone know how to use .hint() with Mongoose?
18:47 < chovy> if you don't mind your server being in germany
18:47 < lowtax2> !
18:47 < aandy> say you want to run a cassandra instance
18:47 < lowtax2> chovy: niceeeeeeee
18:47 < mscdex> isn't berman that guy from that mixer infomercial?
18:47 < lowtax2> linode is expensive
18:47 < aandy> you can get that pretty cheap at aws, but costs INSANE at linode even for just 4gb ram
18:47 < chovy> lowtax2: i have not had any issues.
18:47 < lowtax2> gerse bermans?
18:47 < wltsmrz> Berman is a football commentator
18:47 < Pilate> linode isnt that expensive x.x
18:47 < syskk> i got transitioned from slicehost :(
18:47 < aandy> really?
18:48 < mscdex> magic bullet not mixer
18:48 < lowtax2> linode is way overpriced
18:48 < chovy> pringlescan: what does .hint() do?
18:48 < aandy> 160$/m for 4gb ram is not expensive?
18:48 < chovy> lowtax2: yes, i thought so too.
18:48 < STRML> is there a mirror to npmjs.org?
18:48 < lowtax2> guys, i can buy 16gb of ram for 100 dollars
18:48 < pringlescan> chovy, hint forces the use of a specific index
18:49 < lowtax2> you can build a mini linode server farm for and divide the cost over a year with bandwidth
18:49 < lowtax2> it would be like cheap
18:50 < nrmL> lowtax2: what would you consider a good cheap host?
18:50 < lowtax2> and your web dashboard would probably even be secure!
18:50 < lowtax2> nrmL: i dont know, im on linode, but i can tell it is expensive
18:51 < lowtax2> you can get more bandwidth and ram for less elsewehre
18:51 < nrmL> Whats the hosting page where you need to setup everything on the server yourself? It had an ascii header, forget the name atm
18:52 < nrmL> **hosting provider
18:52 < lowtax2> prgmr.com ?
18:52 < nrmL> yes!
18:52 < lowtax2> :>
18:52 < nrmL> lowtax2:  name escaped me for a second sorry =/
18:53 < aandy> hey that's pretty cool. thanks for the link
18:53 < lowtax2> nrmL: i never forget
18:56 < nrmL> Does anyone know if its possible to run node.js on a GPU?
19:00 < othiym23> nrmL: only if you port V8 to run on that GPU, which is a nontrivial task
19:00 < othiym23> probably easier to get something like luvit running
19:02 < nrmL> othiym23: ok, thank you
19:02 < niggler> OT: anyone have experience with square?
19:03 < kuplatup1u> i only know triangles
19:03 < kuplatup1u> some circles
19:03 < nlf> i'm a fan of the rhombus
19:04 < nlf> but seriously folks, niggler: only superficial experience
19:04 < nlf> i have heard a lot of positive things though
19:04 < niggler> i tried to issue a refund
19:04 < niggler> they did it twice and then my withdrew money from my bank :/
19:04 < draginx> If I have add_header domain hello_world; in a block that upstreams to a NodeJS app, how come my NodeJS app does not have this new header info?
19:05 < nlf> i'd harass their support people
19:05 < niggler> except there's no phone number :/
19:05 < nlf> seriously?
19:06 < niggler> i can't find one
19:06 < nlf> weird, neither can i
19:06 < nlf> that seems pretty silly
19:06 < nlf> 415-375-3176 google says that might be it
19:07 < niggler> trying that ...
19:07 < niggler> great … disconnected
19:08 < nlf> damn, yeah i guess that article is about a year old
19:08 < othiym23> hassle them on twitter
19:08 < STRML> Amazon's status page is bs, as usual
19:08 < STRML> looking at AWS availability... a few 'degraded performance' yellow boxes, that's it
19:08 < othiym23> if the squareup page isn't helpful, hassle @buzz
19:08 < STRML> hardly suggests complete outages
19:08 < nlf> yeah try them on twitter, or just fill out their contact form and cross your fingers
19:12 < bluesmoon> anyone know what's up with npmjs.org?
19:12 < nlf> see topic
19:13 < addisonj> is iriscouch not across multiple AZs or is the outage worse then what is being said?
19:13 < bluesmoon> huh, I'd have assumed that something like that had cross-colo replication set up
19:13 < STRML> bluesmoon: I wish, I made the bad mistake of deploying during this outage, now my node_modules on prod is screwed
19:13 < nlf> it could really go either way
19:14 < nlf> aws has more than once claimed only one zone was down, and people were seeing failures from all of them
19:14 < bluesmoon> STRML: tell me about it.  I'm trying to bring up a new server to handle my traffic
19:14 < JasonSmith> We are doing disaster recovery to SoftLayer now
19:14 < JasonSmith> This is the last God damned AWS outage I will tolerate
19:14 < bradleymeck> addisonj: we have iriscouch mirrors on Joyent right now
19:14 < bluesmoon> nlf: then cross-provider replication.  one on AWS and one on Rackspace maybe
19:14 < bradleymeck> but you have to pay
19:15 < em-dash> is npmjs.org down?
19:15 < wltsmrz> Which modules do you require, STRML? Something that you can't find on github?
19:15 < bradleymeck> yes see topic
19:15 < em-dash> bradleymeck: oops, thanks
19:15 < STRML> wltsmrz: the problem is dependencies. e.g. bcrypt
19:15 < STRML> requires a bunch of dependencies... I could nail them all down one by one, instead i'm copying node_modules from a dev server
19:15 < STRML> should work
19:16 < wltsmrz> Right
19:16 < bradleymeck> STRML in future i would look at module-smith to create prebuilt snapshots
19:16 < nlf> yeah, worst case just npm rebuild if they're different architectures and you should be fine
19:16 < STRML> bradleymeck: Thanks for the update
19:16 < JasonSmith> bradleymeck: Private npm mirror is working for you? Please let me know if you have any issues. This is the first major outage since setting up the mirror
19:16 < STRML> nlf: hadn't heard of that command, thanks, bcrypt was crying when I tried to upload a local copy of node_modules
19:16 < bradleymeck> JasonSmith: seems to be working like a charm
19:17 < nlf> yup, just recompiles binary modules. very handy
19:17 < hpe1> Stupid question coming up: I've created a realtime tracking site which updates a counter if a certain url is accessed (e.g. www.site.com/track/ios/). Now, the counters update fine on my HTML-page works fine, except for the fact that it is not populated with data from the database when it is loaded. How do I do this? Do I have to use app.get('/', ..) to render the HTML page to get it working?
19:18 < STRML> nlf: my hero. I think this is going to get me back up
19:18 < nlf> happy to help
19:19 < niggler> nlf: ok so my bank is issuing a stop and is refunding the fee :)
19:19 < pghalliday> is anyone else having problems connecting to npmjs.org?
19:19 < nlf> nice, there you go. bank customer support > square customer support
19:19 < wltsmrz> Topic, pghalliday
19:20 < pghalliday> Topic?
19:20 < nlf> as in, read the
19:20 < pghalliday> ah, thanks - tuiny writing at the top :)
19:21 < chovy> hpe1: are you using express?
19:21 < hpe1> chovy: yes
19:22 < hpe1> total newbie both to js and node/express/socket/mongodb
19:22 < STRML> whew, back up. thanks for the help @all
19:22 < chovy> tyipcally i do something like app.get('/page', routes.page.get);
19:22 < qubit[01]> amazon aws down right ?
19:22 < chovy> which does res.render('page', { foo: bar });
19:22 < chovy> for page.ejs
19:22 < zonetti> npm server is down???
19:22 < chovy> qubit[01]: someone slashed and burn the amazon
19:22 < zonetti> I can't even ping npmjs.org
19:23 < hpe1> Yeah, though that was the way to do it. Will give it a try. Thanks!
19:23 < Vexii> aws works here "eu". its just abit slow
19:23 < hpe1> ING npmjs.org (165.225.131.92): 56 data bytes
19:23 < hpe1> 64 bytes from 165.225.131.92: icmp_seq=0 ttl=242 time=114.482 ms
19:23 < zonetti> hm
19:23 < zonetti> my network then
19:23 < Vexii> anyone worked whith http-proxy?
19:23 < hpe1> accessing the site seems slow
19:24 < zonetti> ya
19:24 < zonetti> I got a very slow ping too =/
19:24 < simong> Yea, unresponsive here as well
19:25 < zonetti> sad..
19:25 < zonetti> this cannot happen =/
19:25 < qubit[01]> we have some sites still up in east-1a, 1b and 1c are totally down though
19:26 < AttackingHobo> reddit is down for "scheduled maintenance"
19:27 < othiym23> scheduled for thme by Amazon amirite?
19:27 < runvnc> Is anyone else having an issue with npmjs.org
19:27 < qubit[01]> yup, aka amazon exploded
19:27 < enigmeta> runvnc: yes
19:27 < othiym23> runvnc: see topic
19:27 < zonetti> runvnc, everybody =/
19:27 < qubit[01]> runvnc, everyone, amazon ec2 is down for , ahh yes topic
19:28 < enigmeta> it's funny they just show little i signs instead of big red errors: http://status.aws.amazon.com/
19:29 < runvnc> oh sorry I need to get better at reading topics
19:29 < runvnc> sometimes they contain new information
19:31 < chovy> Amazon east coast environment
19:31 < chovy> that's the problem
19:31 < chovy> according to our ops guys
19:33 < runvnc> It just says degraded performance on that status page
19:33 <@konobi> Nexxy: get back all right?
19:33 < runvnc> seems to have degraded pretty bad for it to take out all of those services
19:33 < nrmL> Is the event system global? Like if i spawn child process can I bind to an event and then emit it from the parent and all the children would be able to act on it?
19:35 < francois_> Hi, npmjs.org is down. Can someone here looks what happens ?
19:35 < gnarf> omg guys... npmjs.org isn't working...
19:35 < gnarf> :)
19:35 < gnarf> francois_: see /topic
19:37 < francois_> Ouuups sorry
19:39 < joepadmiraal> Hi, is there currently a known problem with registry.npmjs.org?
19:39 < zonetti> joepadmiraal, see topic :)
19:40 < joepadmiraal> lol, did not see that. Thanks for the info.
19:56 < analphabet> Heh, when I joined the topic was "node.js - now available in the cloud.", now it's "npmjs.org is currently unavailable due to aws outage.", lol
19:56 < nlf> irony. gotta love it.
20:02 < plato> anyone else having trouble with npm
20:03 < plato> econnrefused
20:03 < chilts> aws is having problems - see the /topic
20:03 < plato> mmk thx
20:06 < analphabet> isaacs: people apparently don't read the topic. Perhaps you should put up some entrymsg...
20:15 < Sergey__> Is there a way to make libraries in binding.gyp dependent on debug/release mode?
20:16 < TooTallNate> Sergey__: no not really. presumably they work the same in either case
20:16 < Sergey__> Thanks, that what I thought.
20:17 < cpetzold> what does 'this' equate to in node?  in the repl, module.exports.repl.context == this..
20:21 < phrearch> is there something like a decorator pattern in nodejs?
20:21 < phrearch> i would like to put some authentication decorators on my view functions
20:22 < pickels> phrearch, express?
20:22 < jmoyers> phrearch yes.
20:22 < jmoyers> its a dynamic language
20:22 < jmoyers> you can monkey patch anything
20:22 < phrearch> pickels: yes, but mostly outside of express
20:22 < jmoyers> so a common pattern is to use a 'mixin'
20:22 < phrearch> jmoyers: ok thanks. ill look that up
20:22 < jmoyers> where you take an object with a set of methods along a theme, and mix it into an existing object
20:23 < pickels> is that the same a decorator?
20:23 < jmoyers> underscore/lodash/backbone does this with _.extend
20:23 < pickels> a decorator is mostly a wrapper around an other function no?
20:24 < jmoyers> its basically composition over inheritance
20:24 < pickels> Yup seem I am very wrong.
20:24 < nlf> anyone know offhand of a quick way to convert a buffer to an array of bytes?
20:24 < phrearch> ehm, yea a decorator is a bit like middleware, where the input of the actual decorated function goes through the decorator first
20:24 < jmoyers> traits are related, lots of different ways to achieve the same effect
20:25 < phrearch> the decorator then decides when to call the actual function or not
20:25 < nlf> i take it that's a no
20:25 < jmoyers> nif you can use []
20:25 < jmoyers> nlf rather
20:25 < jmoyers> on the buffer directly
20:26 < pickels> Seems there is a difference between decoration objects and functions.
20:26 < nlf> right, but i want to have an actual array object
20:26 < pickels> Guess you need a function decorator phrearch ?
20:26 < chovy> any node js companies hiring?
20:26 < chovy> in bay area
20:26 < nlf> only way i'm finding is to just wrap it in a for loop and push each byte to an array
20:26 < medice> http://en.wikipedia.org/wiki/Decorator_pattern
20:26 < phrearch> pickels: yea if possible
20:26 < pickels> http://addyosmani.com/resources/essentialjsdesignpatterns/book/#decoratorpatternjavascript
20:27 < pickels> phrearch, since you are using express why don't you put a auth middleware in front?
20:27 < phrearch> awesome thanks!
20:27 < MerlinDMC> npmjs.org down?
20:27 < pickels> not sure if my link will help you! but no prob
20:27 < pete2> Array.prototype.slice.call(buffer, 0);
20:27 < pete2> i think :)
20:27 < phrearch> pickels: ehm, it could be done with middleware indeed
20:27 < pickels> MerlinDMC, think so yup
20:27 < jmoyers> pete2++
20:28 < analphabet> hey! I just noticed.......
20:28 < analphabet> npmjs.org is down!
20:28 < analphabet> did you know?
20:29 < analphabet> ;)
20:32 < cpetzold> :(
20:32 < flybyme> and eta on npmjs.org?
20:32 < Orbitrix> :'( OMG NO
20:32 < Orbitrix> ITS DOWN?
20:33 < EyePulp> should have used more php.
20:34 < medice> should switch to asp.net
20:34 < pickels> yeah nuget is looking might fine atm
20:34 < CoverSlide> need some perl cgi
20:37 < jY> any public mirror i can use?
20:37 < jY> for npm
20:40 < gabrieluk> jY, what is your distor?
20:40 < jY> trying to hit https://registry.npmjs.org
20:40 < gabrieluk> distro*
20:40 < jY> gabrieluk: ubuntu
20:40 < gabrieluk> chris lea ppa. get node, than npm 
20:41 < jesusabdullah> guys, topic
20:41 < jesusabdullah> the system is down, yo.
20:41 < jesusabdullah> THE SYSTEM
20:41 < jesusabdullah> IS DOWN
20:41 < jesusabdullah> THE SYSTEM
20:41 < jesusabdullah> IS DOWN
20:41 < preg> registry.npmjs.org is down, isn't ir?!
20:41 < gabrieluk> x.x
20:41 < preg> ah okay
20:41 < jesusabdullah> preg: The system is down yo
20:41 < preg> ty
20:41 < preg> is it an amazon bug?
20:42 < gabrieluk> jesus, is that recent? just now?
20:42 < jesusabdullah> yes, topic is relatively new and still relevant
20:43 < gabrieluk> mm, luckyly i'm not doing any install now
20:43 < preg> yep it's the aws in Virginia
20:43 < othiym23> the internet is closed
20:43 < othiym23> please come back later
20:43 < preg> :D
20:44 < preg> someone pushed the off switch
20:44 < gabrieluk> luckily*
20:44 < pickels> the hamster have stopped running
20:44 < pickels> hamsters*
20:46 < gabrieluk> haha, internet is closed, and everyone left ^^
20:47 < emmasteimann> anybody ever get "Failed to get tarball url for npm/1.1" when running "curl https://npmjs.org/install.sh | sh"?
20:47 < emmasteimann> can't seem to get npm installed
20:47 < gabrieluk> a new customer...
20:47 < p_l_a_y> is there a way to install socket.io even with AWS down?
20:48 < pete2> you could probably grab it from github
20:48 < lowtax2> github is down because of amazon
20:48 < lowtax2> LULULLUL
20:48 < pete2> lol
20:48 < preg> @emmasteimann it's currently down
20:48 < p_l_a_y> I did download the tar file and try to install but it still tries to get from npmjs.org
20:49 < p_l_a_y> I am I doing something wrong?
20:49 < othiym23> welp, whoever at Iriscouch is trying to get a mirror up is making progress, but there's a bad cert in there somewhere
20:49 < emmasteimann> @preg - gotcha
20:50 < STRML> you can always do an npm install git://github.com/username/project.git
20:50 < preg> kk
20:50 < p_l_a_y> STRML: that to me?
20:51 < pete2> npm install https://github.com/LearnBoost/socket.io/tarball/0.9.10
20:51 < pete2> just worked for me
20:51 < p_l_a_y> thx will try
20:52 < freewil> we need some npm mirrors
20:52 < freewil> i would think joyent could help with that ;)
20:52 < Skolem_> It's pretty awesome that someone's website going down prevents me from even installing npm.
20:53 < p_l_a_y> great now I get SSL Error
20:53 < othiym23> Iriscouch pretty much donates an instance for npm use
20:53 < othiym23> if we want more robustness, somebody's gotta pay for it
20:53 < gabrieluk> you can still install npm
20:53 < gabrieluk> from source
20:53 < othiym23> either get Joyent to sponsor some public mirrors of the Couch repo in their cloud, or pay for some distributed replicas
20:53 < gabrieluk> errr, if you have the source(forgot that git is also down)
20:54 < CoverSlide> iriscouch was free when npm started. its price is pretty low even when not free
20:54 < Skolem_> Gabriel: I tried that, but when I type "make" it tries to download a bunch of stuff from the registry and fails. How do I work around that?
20:54 < p_l_a_y> pete2: any idea how to get around the SSL error
20:54 < othiym23> github is mostly still up
20:54 < lowtax2> github...or shitscrub
20:54 < lowtax2> you be the judge
20:54 < othiym23> I judge... github!
20:54 < pete2> haha, ithough the github down comment was a joke :o
20:54 < CoverSlide> fuck * that's not github
20:54 < othiym23> still saving me amazing amounts of time even when it shits the bed
20:54 < Skolem_> github seems to be working fine - I just downloaded the npm source from there.
20:54 < pete2> thankfully working for me… for now
20:55 < othiym23> pete2: http://status.github.com/
20:55 < othiym23> they've got issues
20:55 < othiym23> a whole ton of Heroku stuff is hosed too
20:55 < lowtax2> it is impressive that their little buggy ruby on rails application even got them to this level
20:55 < Skolem_> lowtax2 :)
20:56 < lowtax2> too bad they used the octopus or everyone would be on the far superior bitbucket
20:56 < lowtax2> that damn cute octopuss
20:56 < othiym23> uuuuuuuuuuuuuuuuuuuuuuuuugh
20:56 < lowtax2> fuckers
20:56 < othiym23> no Atlassian for me ever
20:56 < p_l_a_y> anyone know how I can get around ssl cert error
20:56 < othiym23> I have to use that shit for work
20:56 < othiym23> they taint all they touch
20:56 < CoverSlide> fuck JIRA
20:56 < aandy> sorry did you just say superoir bitbucket?
20:56 < aandy> the web UI is *horrible*
20:57 < aandy> takes 3 minutes to download a rep
20:57 < lowtax2> aandy: LA LA LA LA
20:57 < othiym23> it was nice when it was just Hg, because it was a big improvement over hgweb, but it's really not a very good Git front end
20:57 < lowtax2> p_l_a_y: what cert error?
20:57 < aandy> oh, you want to download? click here, and here, and sign here, and then click here, and then click on zip
20:58 < p_l_a_y> lowtax2: trying to install socket.io directly from githuib but it says Error: SSL Error:
20:58 < runvnc> reddit is back up
20:58 < pete2> try sockjs instead ;)
20:58 < p_l_a_y> lowtax2: SELF_SIGNED_CERT_IN_CHAIN
20:59 < runvnc> although I think aws status says the same thing so I guess they went around the problem
20:59 < p_l_a_y> I'm a noob so can you explain what that means
20:59 < lowtax2> p_l_a_y: what command are you running
21:00 < p_l_a_y> npm install https://github.com/LearnBoost/socket.io/tarball/0.9.10
21:01 < lowtax2> im pretty sure there shouldnt be a self signed cert in the 'chain'
21:01 < p_l_a_y> hmm
21:01 < timeturner> where do you put the ssl cert in socket.io?
21:02 < lowtax2> timeturner: not falling for that one
21:02 < JasonSmith> othiym23: Do you still get an SSL/cert error?
21:03 < timeturner> nevermind found it
21:03 < lowtax2> p_l_a_y: i havent used npm install https://.... afaik  i use a package.json file
21:03 < othiym23> JasonSmith: lemme check
21:03 < p_l_a_y> but wont that fail now cos of AWS outage
21:04 < othiym23> JasonSmith: no SSL error, but now I'm not finding packages
21:04 < CoverSlide> registry.npmjs.org is down now
21:04 < CoverSlide> wait , now its back up
21:04 < lowtax2> npmjs's cert is *.iriscouch.com
21:05 < JasonSmith> lowtax2: I think you have an old (bad) dns record cached
21:05 < JasonSmith> 900 seconds max timeout
21:05 < lowtax2> ?  i just loaded it
21:05 < flybyme> anyone use apatana?
21:06 < p_l_a_y> yeh I'm getting cert error now
21:07 < lowtax2> JasonSmith: WTF, firefox just reported that cert
21:07 < lowtax2> and now openssl s_client  totally says npmjs.org
21:07 < lowtax2> err chrome actually
21:07 < pete2> i juts got the cert error and then tried again and it just worked :)
21:07 < pete2> maybe things are coming back online
21:08 < context> 2659 info postuninstall passport-twitter@0.1.4
21:08 < context> 2660 error Error: SSL Error: SELF_SIGNED_CERT_IN_CHAIN
21:08 < context> whats this mean :x
21:08 < Skolem_> Welcome to the state of infrastructure software reliability in 2012
21:08 < iigrats> for the ssl issue 'npm config set strict-ssl false' can help
21:08 < lowtax2> which cert is fucked
21:09 < iigrats> but remember to set it to true after this humogouse aws fail :)
21:10 < p_l_a_y> ah it just worked
21:10 < p_l_a_y> thx for the help guys
21:11 <@isaacs> iigrats: p_l_a_y are you using node 0.9 or 0.8
21:11 <@isaacs> ?
21:11 < p_l_a_y> 0.9
21:11 <@isaacs> p_l_a_y: k, that's fixed in master npm/node
21:11 <@isaacs> p_l_a_y: it'll be good in the next 0.9 release
21:11 < iigrats> @isaacs: v0.8.9
21:15 < VooDooNOFX_> In python, i'm used to being able to use dir() to introspect the methods and attributes of an variable. Is any such function available in node/javascript?
21:16 < pete2> Object.keys()?
21:16 < jesusabdullah> require('util').inspect
21:16 < jesusabdullah> if you just want to know what's there
21:16 < TooTallNate> VooDooNOFX_: console.log()
21:16 < context> is it bad to use twitter/facebook oauth for intenral apps? (yes we should setup an internal oauth provider....)
21:17 < jesusabdullah> programmatically, Object.keys, keys in object, a few other oddball things depending on whether you need to access non-enumerables or whatever
21:17 < p_l_a_y> @isaacs: oh actually I'm on 0.8.12
21:17 < jesusabdullah> Object.keys is usually what you want
21:18 < chilts> context: if you're using Google Apps you could use their OpenID/OAuth and only allow logins which are within your domain
21:18 < chilts> otherwise I'm sure loging in with those services is fine - until you choose otherwise
21:19 < chilts> logging
21:19 < VooDooNOFX_> jesusabdullah, my_object_instance.keys() is returning that Object #<Object> has no method 'keys'. Does it exist on only prototypes, or instantiations of objects?
21:20 < pete2> var keys = Object.keys(myObject);
21:21 < pete2> it's a static method on Object that returns an array
21:21 < jesusabdullah> VooDooNOFX_: what pete said
21:21 < hpe1> Is it possible to do a socket.io-emit from a express route?
21:21 < VooDooNOFX_> pete2, jesusabdullah, thank you. this will work perfectly. 
21:21 < TooTallNate> hpe1: everything is possible
21:22 < hpe1> TooTallNate: That's the spirit! Any hints on how to do it for a noob?
21:22 < TooTallNate> hpe1: this might be old, but i remember it being good http://www.danielbaulig.de/socket-ioexpress/
21:24 < hpe1> TooTallNate: Thanks, will have a look
21:31 < saml> hey, i get many GET /foo/bar  requests.  I want only one of them to go through lengthy processing  while all others become 404
21:31 < saml> am i using the right tool for this?  
21:32 < saml> i mean,  all requests should be responded with 404 immediately but it should create one background job that is lengthy process.
21:33 < chilts> saml: you need to set some kind of lock somewhere e.g. in Redis, so that subsequent requests know something is already happening
21:33 < chilts> so the first one sets a key, the rest conditionally set a key and if they fail they respond accordingly
21:34 < disjunction> saml, as long as the lengthy process is non-blocking (out of node)
21:34 < chilts> (P.S. I'd probably not use a 404 for that either.)
21:34 < saml> chilts, so there's still a chance while multiple requests will be leaked until write to redis finishes
21:34 < saml> this must be already solved problem somewhere
21:34 < deltab> saml: why 404?
21:34 < chilts> saml: no, just use the Redis command which fails if the key already exists
21:34  * chilts goes to look
21:35 < saml> deltab, doesn't have to be 404 . but it should not return 200 with some content.. otherwise akamai will cache it
21:35 < chilts> SETNX
21:35 < saml> is touching a file faster than redis?
21:35 < chilts> maybe ... also depends on your setup and whether it is distributed
21:36 < chilts> and whether it needs to be more or less bullet proof
21:36 < saml> don't want to bring in database.. oh that makes sense
21:36 < chilts> either way, you need a way for the subsequent processes to know something is already happening
21:36 < saml> i wish nginx or other proxies already support things like this.. not leaking request down to application server
21:36 < chilts> Redis is lightening fast btw :)
21:36 < saml> while cache is being generated
21:37 < chilts> yeah, but there are so many ways to do it, no one way will accomodate everyone's use-cases :)
21:37 < estliberitas> Hi, all. Do you, guys, know what happend with registry.npmjs.org? I'm try to npm adduser and got conn refused.
21:37 < Orbitrix> its down :(
21:37 < Orbitrix> forever
21:37 < chilts> I've done my own caching system before with different parts of each page cached in different ways (DB queries, HTML fragments, etc)
21:37 < Orbitrix> node.js went bankrupt
21:37 < Orbitrix> everybody go home :(
21:37 < estliberitas> lol :)
21:38 < saml> i'm only talking about caching html response body
21:38 < chilts> npmjs.org is looking like it's mostly back up
21:38 < saml> s/html/http/
21:38 < chilts> saml: that's fine ... anyway, give it a go and report back if you need any more help :)
21:38 < chilts> hope we've already explained it a bit more for you
21:39 < saml> varnish has grace period. maybe that'll work for me
21:39 < saml> https://www.varnish-cache.org/trac/wiki/VCLExampleGrace
21:39 < nlf> preliminary results of my super ugly hacked up riak protobuf client shows it's twice as fast as http
21:39 <@Nexxy> konobi, yes thanks :D (other than my laptop and phone)
21:40 < chovy> has anyone used kue for processing emails?
21:41 < gansbrest> hi. Is there a way to spawn external script ( let say php script ) which is constantly waiting for new messages on stdin from nodejs? 
21:41 < gansbrest> I'm having problems with sending messages to the pipe between parent process and child php script
21:42 < draginx> Is there a way to call _.intersection with an object that contains arrays?
21:42 < estliberitas> what problems?
21:42 < chovy> draginx, did you try it?
21:42 < chovy> var _ = require('underscore')
21:42 < draginx> chovy: yeah
21:43 < draginx> http://pastie.org/private/zpjqgisfqhwq81o69kia
21:43 < draginx> its all synchrnous
21:43 < draginx> arrays return fine btw
21:43 < draginx> its really line 14 and beyond is where im having trouble
21:43 < chovy> might try #documentcloud
21:44 < draginx> thanks
21:44 < gansbrest> estliberitas: I'm starting process like this, var shim_proc  = childProcess.spawn(worker_file); And then later in the script I would like to send message to the php script stdin (after particular nodjs event). How would I do it?
21:44 < saml> var moduleScopeVar = {};    this variable in a module  is initialized once through life time of application?
21:45 < saml> then i can use this instead of redis or the similar
21:46 < Hotroot> Is mongo this unpopular? I'm going through some really weird stuff to get it to work as my session store
21:46 < chovy> Hotroot: i am using redis for session store
21:46 < chovy> what weird stuff?
21:48 < Hotroot> Well I use mongolian, and the mongo session store I found would require me to open a mongo connection, and a mongolian connection
21:48 < niggler> screw mongo
21:48 < Hotroot> So I tried to use a super old unpopular lib that does mongolian stores
21:48 < Hotroot> Terribly documented, can't get it to work
21:48 < Hotroot> I love mongolian, it would take a lot to get me to move away from it.
21:48 < yuxel> hi, i'm trying to create a simple "telnet server" which sends some text over client. but I got an issue with "new line" character. I should send \r on windows machines and \n on *nix machines, \r\n causes an empty space between lines on windows. Do you have any advice for that?
21:49 < Hotroot> Guess I'll just have two connections
21:49 < niggler> sounds like you backed the wrong horse Hotroot 
21:49 < curiositi> hi, I have already read the wiki and other stuff but I still don't get what exacly node.js is! :( can anybody help me and explain it to me?
21:49 < Hotroot> We're all "backing the wrong horse" in that sense, because we get limited hosting providers, etc.
21:49 < nlf> write a new session store
21:49 < nlf> they're fairly simple
21:49 < niggler> yuxel: are you sure you aren't accidentally printing it twice?
21:50 < Hotroot> yuxel: I've written a telnet server in node if you want to ask me some stuff
21:50 < yuxel> niggler: let me put some code over gist
21:50 < yuxel> Hotroot: I've asked the question above ;)
21:51 < niggler> curiositi: node.js is a framework sitting atop the v8 engine
21:51 < Hotroot> yuxel: Sorry, read it wrong. Have you tried /n /r instead?
21:51 < s5fs> yuxel: what about os.EOL?
21:51 < niggler> Hotroot: windows is \r\n
21:51 < niggler> CRLF
21:51 < s5fs> yuxel: os.EOL will get you the correct line ending for the server (ie, where node is running)
21:51 < Hotroot> Hmm, thought I had tested mine on windows, maybe not
21:52 < chovy> curiositi: node.js is just js on the server. like php
21:52 < yuxel> i should get the EOL for client, not for server
21:52 < yuxel> gimme 5 mins to put a simplified code to gist
21:53 < niggler> it doesn't matter for telnet -- its supposed to be CRLF
21:53 < niggler> actually it depends
21:53 < niggler> if you are writing a server, it must send CRLF
21:53 < niggler> if you are writing a client you can do whatever
21:53 < niggler> yuxel: 
21:54 < curiositi> niggler: thank you, I see v8 is an javascript engine. this makes me more confused! isn't it suppose to be used in a browser or somthing?! what is it connection to a server?
21:54 < niggler> http://www.ietf.org/rfc/rfc1123.txt
21:54 < Hotroot> I haven't tested it on a win client, but I see no visual / apparent problem when I send /n /r
21:54 < niggler> " The Telnet protocol defines the sequence CR LF to mean "end-of-line". "
21:54 < niggler> curiositi: v8 is a javascript engine
21:54 < niggler> it does a bunch of magic to reduce javascript code to machine code
21:54 < curiositi> chovy: tanQ, so you are saying it's a scripting language like php?
21:54 < niggler> node.js takes v8 and makes it easy to use
21:55 < niggler> *for writing applications
21:55 < yuxel> ooh, it seems its working fine now with \r\n, I've tested this before and it puts and empty line 
21:55 < yuxel> let me check my code again
21:55 < yuxel> thanks for your help
21:55 < STRML> woohoo, AWS is back up
21:55 < Hotroot> curiositi: Well, you don't really use it like most people use PHP
21:56 < TooTallNate> curiositi: yes, javascript is a scripting language
21:56 < curiositi> niggler: I seen.. it is making sense now.. so it gives you the power to make application with js? yes?
21:56 < Hotroot> Basically, yes. They tend to be server applications though. Lots of webservers, etc.
21:56 < Hotroot> We don't really have anything in the way of GUI, etc. for general programs, and it isn't too portable.
21:58 < draginx> is there a way for me to turn [[1,2,3],[4,5,6],[1,2,3]] into [1,2,3], [4,5,6], [1,2,3] as arguments?
21:58 < niggler> there's no reason why not Hotroot 
21:59 < niggler> draginx: what are you trying to do?
21:59 < curiositi> Hotroot: oh, I see. so we make webservers with it? why don't we just use something like nginx or apache? I mean what do we want to use it? what's wrong with making an web-api for our application?
21:59 < draginx> niggler: I have something thats pretty dynamic (could be 4 arrays or 1) and I want to run _.intersection() with those arrays
22:00 < niggler> _.intersection only handles 2?
22:01 < Hotroot> niggler: I knew someone would nitpick me, but I'm simplifying for him, and in that case, no, we don't use it for general GUI apps
22:01 < STRML> niggler: handles as many arrays as you want
22:01 < STRML> http://underscorejs.org/#intersection
22:01 < chovy> curiositi: the main idea and difference behind node.js is the code is non-blocking 
22:01 < Hotroot> curiositi: nginx and apache serve up static pages
22:01 < niggler> draginx: the simplest way is to use apply
22:02 < Hotroot> We can send back whatever we want
22:02 < draginx> STRML: Riiiiiiight my problem is that i only have *one* array
22:02 < draginx> im trying to take everything out of this array
22:02 < draginx> so itll be more than one array
22:02 < draginx> [[1,2,3],[4,5,6],[1,2,3]] !== [1,2,3], [4,5,6], [1,2,3] dig it?
22:02 < niggler> >>> x = [[1,2,3],[4,5,6],[7,8,9]]; function f() { return arguments.length; }; console.log(f(x)); console.log(f.apply(null,x)); 
22:02 < purr> niggler: undefined; Console: 1, 3
22:02 < niggler> how's that draginx 
22:02 < Hotroot> curiositi: So you could enter "10" in a form, and I could have it send you back that number times 5
22:02 < STRML> draginx: yeah just use apply
22:02 < marcosnils> Hi there, I'm trying to profile a nodejs application with Dtrace and sackvis to get the famous flamgraph. However, for what I've read, the only way to do that is by using an Illumos based system such as SmartOs. Does anyone know if there's a pre-installed image somewhere I can use to download and start profiling without installing one myself?. Thx
22:03 < draginx> STRML: apply does not in anywya work
22:03 < niggler> draginx: you aren't trying hard enough
22:03 < draginx> http://pastie.org/5100572
22:03 < draginx> line 14 and beyond
22:03 < draginx> is my problem
22:03 < STRML> draginx: _.intersection.apply(null, [[1,2,3],[3,2,4]])
22:03 < draginx> STRML: dude .. i have *zero* idea
22:03 < niggler> you might need _ in 'this'
22:03 < draginx> what the arrays actually will be
22:04 < STRML> draginx: calm down and read
22:04 < STRML> draginx: pass the entire array here
22:04 < STRML> _.intersection.apply(null, myArray)
22:04 < niggler> wait wait
22:04 < niggler> why is args in square brackets?
22:05 < rp123> is there a good tutorial on express.js, i am really stuggling to get going
22:05 < STRML> args is usually an array or arguments object
22:05 < draginx> STRML: ah I see now, gracias! :)
22:05 < curiositi> Hotroot: chovy: niggler : tanx guys ;) it is more understandable now..
22:05 < draginx> right that makes sense
22:05 < draginx> it works with the null as the fist parameter but not this.. interesting
22:05 < niggler> i don't see why that isn't prototyped
22:05 < niggler> *prototyped into array
22:08 < Hotroot> Well, my hacky crap where I have one mongo connection for session store, and one for mongolian worked 
22:08 < chovy> Hotroot: have you used mongoose?
22:09 < Hotroot> chovy: I've looked at it, and I don't like the syntax. Mongolian is perfect for me, I can treat things like regular JS objects
22:09 < Hotroot> It just fits with the JS style more
22:10 < marcosnils> Hi there, I'm trying to profile a nodejs application with Dtrace and sackvis to get the famous flamgraph. However, for what I've read, the only way to do that is by using an Illumos based system such as SmartOs. Does anyone know if there's a pre-installed image somewhere I can use to download and start profiling without installing SmartOs and compiling node myself?. Thx
22:10 < pete2> gansbrest:     var child = spawn('script', ['arg'], {
22:10 < pete2>       cwd: testOutputDirectory,
22:10 < pete2>       stdio: 'pipe',
22:10 < pete2>       detached: false
22:10 < pete2>     });
22:11 < pete2> that should then allow you to lread and write on the stdout
22:11 < pete2> and stdin
22:12 < pete2> through child.stdin, child.stdout and of course child.stderr
22:13 < Hotroot> marcosnils: I may be wrong, but it sounds like you're having a problem with two technologies that aren't node (Dtrace and sackvis)
22:13 -!- Nexxy changed the topic of #Node.js to: Nodes JS ;
22:13 < Hotroot> That really lowers the chance of you getting an answer here
22:14 < Hotroot> If you can't get Dtrace to run correctly, ask the Dtrace community
22:14 < marcosnils> It's not that I can't get Dtrace to run correctly
22:15 < marcosnils> Hotroot, I just want to know if somone here knows how to profile node to get the flamegraph easily without installing SmartOS 
22:15 <@Nexxy> Hotroot, there are a lot of node people that use dtrace
22:15 <@Nexxy> dtrace is pretty relevant to node
22:16 < marcosnils> Nexxy, do you get where i'm going with my questions?
22:16 <@Nexxy> marcosnils, for sure
22:17 <@Nexxy> last I heard it was possible but I've never spent the effort on it
22:17 < marcosnils> Nexxy, it is actually (http://blog.nodejs.org/2012/04/25/profiling-node-js/). The thing is that you need to have an Illumos based system such as SmartOS
22:17 < marcosnils> I've tried to download the VMWARE image and install Node in there, but it was really complicated
22:18 <@Nexxy> no I mean that it's possible to get the probes working on linux
22:18 < ChrisPartridge> marcosnils: pretty sure you can get it running on linux nowadays
22:18  * ChrisPartridge is too slow
22:18 < marcosnils> ChrisPartridge, any clues / articles you know about?
22:18 < ChrisPartridge> marcosnils: haven't tried personally, google dtrace linux
22:19 < ChrisPartridge> once setup, should be the same as that article - in esssence
22:19 <@Nexxy> http://lmgtfy.com/?q=dtrace+linux
22:20 < marcosnils> Nexxy, lol.
22:20 <@Nexxy> :P
22:20 < othiym23> the real lol is DTrace on Linux
22:20 < jtoft> Anyone know whether you can use restify's authorization handler, but only for _some requests_? Or am I better off not using it with the app.user(handler) paradigm, and instead just wrap calls around my own auth func?
22:21 < marcosnils> Nexxy, ChrisPartridge : http://stackoverflow.com/questions/11205375/profiling-node-js-using-dtrace
22:21 < jtoft> seems like the default handler manages every request in the call chain, not allowing you to opt-in or opt-oht
22:21 < jtoft> out*
22:21 < marcosnils> Seems like Dtrace is still very young to be used in linux
22:22 < othiym23> marcosnils: it's not young, it's that Linux and DTrace have incompatible licenses and people on both sides hate each other
22:22 < othiym23> virtualbox yourself up a SmartOS instance if you really want flamegraphs
22:23 < marcosnils> othiym23, I've tried to download the Vmware box from the SmartOs homepage, but I couldn't compile Node at all. Got a whole bunch of errors when trying to compile it
22:24 < ron__> has anyone worked with http-proxy middwares
22:24 < othiym23> marcosnils: you shouldn' tneed to build it yourself, just sudo pkgin install node-0.9.11 from a base zone
22:24 < othiym23> once you have SmartOS running
22:25 < othiym23> and dtrace and all the v8 goodies should be on the base image by default
22:25 < othiym23> also an older version of Node is installed on the latest base images
22:25 < othiym23> also also, don't use base64, because a bunch of DTrace stuff doesn't work right under it
22:25 < ron__> i'm looking for some help with node http-proxy module
22:26 < marcosnils> othiym23, I thought that node needed to be compiled with the --with-dtrace to work with Dtrace
22:26 < marcosnils> the SmartOS packages have already Dtrace enabled?
22:26 < ChrisPartridge> ron__: what's the issue
22:27 < SomeonAP> Is node faster tha go?
22:27 < SomeonAP> than*
22:27 < SomeonAP> for building servers/networking type stuff
22:30 < joevandyk> I need to download an image and resize it, and return that image. https://github.com/joevandyk/node-resize-image/blob/7aa5e160fa1beeecb9c5119a5eaeb7b782ff482c/test-crop.coffee is what i have now. but the response is returned before the download/resize operations happen. Thoughts?
22:31 < joevandyk> i'm new to async/nodejs, not sure what the best way to handle this is
22:32 < ron__> hi
22:32 < SomeonAP> try @go-nuts joecandyk
22:32 < ron__> anyone who could help me in understanding middleware injection in http-proxy module
22:35 < ron__> .......
22:36 < SomeonAP> yeah
22:37 < ron__> :| no one wants to help 
22:37 < niggler> where should i put exception definitions?  should i create a new script and require it everywhere?
22:41 < ryanrolds_w> Has anyone in here run iperf on Joyent in the same colo?
22:43 < othiym23> marcosnils: yes, SmartOS is the spiritual home of DTrace, and it's enabled in pretty much every manner imaginable
22:43 < othiym23> plus the packages built by Joyent are compiled with --dtrace-enabled
22:44 < marcosnils> othiym23, you just made my day. I've installed nodejs with pkgin and at least I have it running. I'll try to Dtrace it and hope everything goes ok
22:44 < marcosnils> thx for the tip
22:45 < othiym23> happy to help
22:46 < niggler> othiym23: you ever write code with custom errors?
22:48 < s5fs> 'spiritual home' eh?
22:48 < RushPL> I am working with multiple processes in my node.js web app and I have a hard time tracing an EPIPE exception I get .. it simply shows the origin at process.EventEmitter.emit (events.js:115:20) - I have no idea in which process at what point to look for the problem, any way to get some additional debug info?
22:49 < othiym23> niggler: a couple times, yeah, why?
22:50 < niggler> what's the best way to do it
22:50 < niggler> should i be adding features to the error prototype
22:50 < othiym23> s5fs: well, yes, SmartOS <- Illumos <- OpenSolaris <- Solaris, and clearly Oracle doesn't know what to do with it
22:50 < othiym23> also bcantrill is at Joyent
22:51 < othiym23> niggler: you'll want to inherit (using util.inherits or MyError.prototype = new Error()) and then stick your custom features on the new class
22:51 < othiym23> I wouldn't modify Error's prototype
22:51 < othiym23> that would be... bad
22:52 < jesusabdullah> here's how I roll
22:52 < bwen> who doesnt like suprises xD
22:52 < niggler> but then do i need to export MyError?
22:52 < jesusabdullah> var err = new Error('some message!');
22:52 < jesusabdullah> err.code = 'ERRYOUFUCKEDUP';
22:52 < jesusabdullah> see what I did there?
22:52 < jesusabdullah> but you can also do,
22:52 < othiym23> or you could do what Josh is saying, which is simpler
22:53 < jesusabdullah> var MyError = function (msg) { Error.call(this, msg); this.code = 'ERRYOUFUCKEDUP'; };
22:53 < jesusabdullah> then do new MyError('dude, bro, dudebro')
22:53 < othiym23> I try to avoid inheritance in Node, but I spent too much time hacking on Spring in Java and it ate my brain
22:53 < niggler> but then i gotta export MyError :/
22:53 < jesusabdullah> oh and don't forget util.inherits(MyError, Error);
22:53 < chovy> new MyError("Tommy boy, what'd you do??")
22:53 < niggler> and then reference it elsewhere
22:53 < jesusabdullah> why is that so bad?
22:53 < othiym23> jesusabdullah: you still gotta grab a copy of the prototype even with Error.call, doe
22:54 < jesusabdullah> othiym23: yeah, I just forgot to type line 2
22:54 < othiym23> nvm type too slow
22:54 < othiym23> niggler: if you're ever checking instanceof MyError, then things have gone aft agly
22:55 < othiym23> either feature-test or bake whatever behavior you want into the standard error methods
22:55 < othiym23> and don't try to screw with the stacktrace stuff unless you're willing to read some fairly obscure shit on the v8 wiki: http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi
22:56 < niggler> i just want to pass around some custom errors/exceptions
22:56 < niggler> but I'm debating whether leveraging javascript's error mechanism is better or worse than faking an errno
22:58 < bwen> instanceof + inheritance ?
23:02 -!- mode/#Node.js [+o piscisaureus___] by ChanServ
23:02 < FunnyLookinHat> Are there any good OOP examples of using Socket.IO ?  I've only seen examples where everything is dumped into the app.js ...
23:05 < bwen> http://socket.io/#how-to-use has examples without expressjs
23:05 < FunnyLookinHat> thx bwen 
23:06 < Hotroot> Gets a little weird with express. It's like, httpServer listens to express, and socket.io listens to httpServer
23:08 < tnorris> anyone know if variable name collision in local/global space will slow down v8 execution time?
23:14 < Hotroot> Yikes, the only recaptcha module I see is for node 0.4
23:17 < TooTallNate> tnorris: perhaps on some level, but i seriously doubt that would affect your app in any way
23:17 < TooTallNate> i.e. your bottleneck will *always* be somewhere else
23:17 < tnorris> TooTallNate: not for my app, just looking at someone's benchmarking code. always like to see if I can speed them up a little.
23:18 < tnorris> I try to never create variable naming collisions. make things confusing.
23:20 < ericelliott> I create variable name collisions all the time.
23:20 < ericelliott> it's fun.
23:21 < tnorris> ericelliott: ... makes my skin crawl thinking about it. my brain isn't large enough to track at which scope a given variable was declared.
23:22 < ericelliott> tnorris: I don't blame you.
23:23 < STRML> did npmjs go back down?
23:24 < STRML> or maybe it's just unbelievably slow. amazon.... ><
23:24 < ericelliott> amazon is acting retarded today
23:24 < Hotroot> STRML: Works for me
23:24 < ericelliott> they're having ebs volume issues. I don't know if it's impacting npm
23:26 < MI6> joyent/node: isaacs crypto-buffers * 32c2f18 : crypto: Cleanup  1. Remove extraneous 'buffer' arguments. 2. Abstract out - http://git.io/ZEkvMg
23:33 < nlf> anyone have any thoughts on making sure that i get a reply from a socket before writing to it again?
23:33 < mscdex> listen on 'data'? heh
23:33 < nlf> right, but i'm writing to it in several places
23:33 < nlf> and i need to make sure that i've received a response before i send the next packet
23:36 < mscdex> nlf: have a boolean that changes when 'data' is emitted?
23:36 < mscdex> it depends on how you're doing things i guess
23:36 < mscdex> you could have a packet queue that is emptied when 'data' is emitted
23:37 < nlf> i've got a bunch of exported functions, each of them generates a packet and writes it to a socket, then there's an event listener for 'data' on the socket that fires the callback
23:37 < nlf> the problem is if, in my code, i call three functions in a row (not nested), then it chokes
23:38 < nlf> i'm thinking just having a boolean will probably do it, but i need to store upcoming packets in a queue somewhere along with their callbacks
23:42 < MI6> joyent/node: isaacs crypto-buffers * 6f31471 : doc: Remove mention of 'buffer' encoding in crypto - http://git.io/YhhJeA
23:44 < tnorris> nlf: i'd suggest checking out lib/stream.js, the pipe method. check out how it uses the data and drain events.
23:44 < tnorris> basically, it pauses on data, and resumes on drain.
23:45 < airtanah> has anyone made an everyauth module?
23:45 < nlf> so you're thinking make my own stream that pipes to the socket
23:46 < nlf> i write to the stream, then on the socket's data event emit drain?
23:46 < airtanah> https://gist.github.com/3935578
23:46 < airtanah> navigating to /auth/c9 does nothing...
23:47 < tnorris> nlf: sort of. I wrote my own pipe to emit data packets to multiple child processes in a round-robin fashion. uses basically the same technique pipe does.
23:48 < rknLA> anyone have any suggestions or article links for best practices of mocking 3rd party APIs within mocha/chai?
23:49 < tnorris> nlf: here's my implementation. I opted for extending the native Stream. worked easier that way: https://github.com/trevnorris/deluged/blob/master/lib/segp.js
23:51 < timeturner> anyone experience page scrolling lag with a bottom fixed navbar?
23:51 < tnorris> timeturner: that usually only happens if js is used to fix the bar. not if using css.
23:52 < timeturner> it's using position:fixed
23:52 < timeturner> and I removed all bootstrap classes from the markup and manually created the bar
23:52 < timeturner> same thing
23:52 < timeturner> I do already have a bootstrap classed top navbar though
23:52 < tnorris> timeturner: strange. what browser? have an example page?
23:52 < timeturner> maybe it's because of two fixed navbars?
23:52 < timeturner> latest dev chrome
23:53 < timeturner> one sec
23:56 < jamiep_> echo "alias nom='npm'" >> ~/.bashrc
23:57 < timeturner> really werid
23:57 < timeturner> weird*
23:57 < timeturner> in a bootstrap jsfiddle it doesn't do it
23:58 < tnorris> timeturner: hm, chrome can be pretty aggressive about not giving up cache. possibly one thing you changed hasn't propagated to your browser on that url.
--- Log closed Tue Oct 23 00:00:56 2012
