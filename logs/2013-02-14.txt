--- Log opened Thu Feb 14 00:00:07 2013
--- Day changed Thu Feb 14 2013
00:00 < othiym23> sayd: current package's version that's installed, or available?
00:00 < sayd> othiym23: essentially the one thats installed
00:01 < othiym23> sayd: the closest you're going to get is 'npm ls', not 'npm info'
00:02 <@TooTallNate> base698: are you here?
00:02 < othiym23> sayd: if you want to get the most recent deployed version, probably the tersest output is going to come from 'npm info <package> dist-tags.stable'
00:04 < sayd> ok thakns
00:04 < sayd> is package.json structure defined by node?
00:05 < DarkArgon> by npm
00:05 <@TooTallNate> sayd: https://npmjs.org/doc/json.html
00:07 <@Nexxy> othiym23, question!
00:07 < sayd> TooTallNate: thank you
00:08 < othiym23> Nexxy: ask, and I shall answer!
00:09 < AviMarcus> sayd, when you install a package with npm you can do --save and it will automatically save that + version to package.json
00:10 < base698> Yeah
00:10 < base698> in spirit before :)
00:11 <@TooTallNate> base698: well i mean the package.json i gave you should work just fine
00:11 <@TooTallNate> i just do `npm install` in that dir with the package.json
00:11 <@TooTallNate> and all the deps get installed
00:12 < base698> I did that before
00:13 < base698> Trying again just for good measure.  It's like it doesn't see the vorbis/package.json 
00:13 <@TooTallNate> try deleting the node_modules dir and doing `npm install` again
00:13 < base698> I tried including Encoder directly 
00:13 < sayd> im trying to figure out how to keep npm version <number> from triggering another build, if its already checked into git
00:14 < base698> Same thing, cannot find vorbis
00:14 <@TooTallNate> base698: what version of node and npm?
00:15 < base698> new-host:node-ogg justinthomas$ npm -v
00:15 < base698> 1.2.10
00:15 < base698> new-host:node-ogg justinthomas$ node -v
00:15 < base698> v0.8.19
00:15 <@TooTallNate> why are you in a node-ogg directory?
00:15 < base698> that's what I called my test app
00:15 <@TooTallNate> your versions should be fine though
00:15 < base698> creative I know
00:16 <@TooTallNate> base698: does node_modules/vorbis exist?
00:16 <@TooTallNate> and node_modules/vorbis/package.json
00:16 < base698> new-host:the-ogg-test justinthomas$ ls node_modules/
00:16 < base698> lame   ogg    vorbis
00:16 < base698> new-host:the-ogg-test justinthomas$ ls node_modules/vorbis/
00:16 < base698> History.md   binding.gyp  common.gypi  lib          package.json test
00:16 < base698> README.md    build        deps         node_modules src
00:16 < base698> yeah
00:17 <@TooTallNate> so ya that's weird
00:17 <@TooTallNate> what's the error message when you do require('vorbis') in the REPL?
00:17 <@TooTallNate> just type in "node" and run that
00:17 < base698> same error
00:18 < base698> > require('vorbis')
00:18 < base698> Error: Cannot find module 'vorbis'
00:18 < base698>     at Function.Module._resolveFilename (module.js:338:15)
00:18 <@TooTallNate> holy crap i think i know what's happening now...
00:19 < base698> are you on origin/master + 1 or something?  :)
00:19 <@TooTallNate> base698: just pushed a commit… try `rm -rf node_modules && npm install` one more time
00:20 < base698> does not error, and finished… :)
00:21 <@TooTallNate> yup yup
00:21 <@TooTallNate> damnit isaacs :p
00:21 < base698> what was it?
00:21 <@TooTallNate> well i had /*.js in my .gitignore file
00:21 < base698> hahhahah
00:21 <@TooTallNate> which npm looks at when bundling the tarball
00:22 <@TooTallNate> i had index.js checked into git, so it bypassed the .gitignore, but npm didn't seem to care
00:22 <@TooTallNate> so the index.js file was missing
00:22 < groundwater> TooTallNate: make a .npmignore file
00:22 <@TooTallNate> nah
00:22 <@TooTallNate> 'twas a silly mistake
00:22 <@TooTallNate> and/or an npm bug
00:22 < groundwater> yes
00:23 < base698> this is safe to push into production with millions of users right?
00:23 < base698> ;)
00:23 <@TooTallNate> ummm...
00:23 <@TooTallNate> wat?
00:23 < Lorentz> sure, just label it beta
00:23 < Lorentz> all sin is forgiven if it's beta
00:23 < base698> well maybe 10s of thousands
00:24 < base698> All that's important is I stopped one company from using flash
00:24 <@TooTallNate> base698: well you still have the quantization problem to solve i think ;)
00:25 < base698> yeah that will be next if it's not working, I think the existing wavs I have cached may not have that issue
00:28 <@TooTallNate> your wavs won't have that problem
00:28 <@TooTallNate> since wav files can store 16-bit integer samples no problem
00:28 <@TooTallNate> however the Vorbis encoder only works with 32-bit float samples
00:28 <@TooTallNate> so you have to convert in that case
00:30 < base698> ok so the ogg it generates is 200K and doesn't play back
00:31 < cloudbender> nb-ben .......   https://gist.github.com/cloudbender/4949690
00:32 < base698> Sanity check, the generated wav still plays if I pipe that to file 
00:32 < cloudbender> I think the operating system is sending too many events, or events from multiple emitters
00:32 < cloudbender> And the docs say it's unstable
00:33 < cloudbender> unless someone else has any suggestions
00:36 < SomeoneWeird> cloudbender, timeEnd should be in the callback
00:36 < cloudbender> that's just fluff, I use it as a flow indicator
00:36 < cloudbender> yes, it's cheesy
00:38 < cloudbender> But thank you for looking :)
00:38 < cloudbender> nb-ben is having issues with the watch functionality
00:43 < azylman> Anyone ever seen this before: "error:0607907F:digital envelope routines:EVP_PKEY_get1_RSA:expecting an rsa key:../deps/openssl/openssl/crypto/evp/p_lib.c:288:"
00:43 <@TooTallNate> base698: ya, sounds like you need to convert the samples now :)
00:44 < cloudbender> wait ... maybe the callback is supoosed to call the watchers event ...
00:44 < azylman> The stack trace says it's coming from CleartextStream._pusher in tls.js
00:44 < cloudbender> or would that cause an explosive decompression of space-time ...
00:46 < cloudbender> let's find out.  Everyone kiss your mom goodbye just in case.
00:48 < othiym23> Nexxy is never gonna ask me her question
00:48 < othiym23> such a tease
00:48 <@Nexxy> I PM'd you!
00:48 < othiym23> oh
00:48 < othiym23> uh
00:48 < othiym23> heh
00:48 <@Nexxy> :P
00:48 <@Nexxy> it's thuper thekrit
00:48 <@Nexxy> ... theriouthly.
00:53 < cloudbender> lol
00:59 < SandorKrashna> hello everybody, I am looking to build out a video wall solution that uses webkit. Is there anything out there that can sync up 5 seperate videos so the videos are not out of synch on 5 seperate browsers running on 5 diffferent machines
01:00 < SandorKrashna> the 5 seperate videos will create one big video
01:00 <@Nexxy> SandorKrashna, cool!
01:01 < SandorKrashna> we need to use different machines because the audio needs to be seperate for each machine
01:01 < SandorKrashna> i am looking for a websocket solution that can manage the video content
01:02 < SandorKrashna> something like this http://www.youtube.com/watch?v=r90ti4MbecM
01:03 < SandorKrashna> Also if there is anyone out there from Portland, OR that is looking for work hit me up
01:03 <@Nexxy> I'm in PDX :) not looking for work, but here :D
01:04 < SandorKrashna> oh wow
01:04 < SandorKrashna> word
01:04 < SandorKrashna> Hello stumptown!
01:04 < spion> should be easier if the computer's clocks are synced
01:04 < spion> (via ntp)
01:05 < SandorKrashna> can you tell me more about that
01:06 < spion> assuming that the timestamps on all computers are synced, you can pick a master that reports a pair timestamp, videoposition to the server, which sends them out to all the others
01:06 < spion> when they receive the timestamp, position info, they calculate theirTimestamp - timestamp and add it to positionInfo, then seek there.
01:06 < scant> if i want nginx to process both http and https connections, should i have it send all connections to two ports, one for http and one for https, and then each these would ignore connections meant for the other?
01:07 < SandorKrashna> Ok, videos will just play like a screensaver, no seeking required
01:07 < spion> since timestamps are synced, the lag calculation should be accurate to a millisecond (or whatever ntp managed)
01:07 < SandorKrashna> can socket.io handle hd video streaming
01:08 < spion> do you need a live stream?
01:08 < SandorKrashna> no live stream
01:08 < SandorKrashna> rendered 1080p videos
01:08 < spion> then you don't really need socket.io to do anything except send control messages.
01:09 < SandorKrashna> yeah it seems like i need a socket.io to serve up the videos to the clients and when the videos finish serve up a new one but the videos need to be in sync
01:09 < spion> say you have the 4 video clients: v1, v2, v3, v4
01:09 < spion> you pick v1 to be a master.
01:10 < spion> in all of v1-4 you have a video element loaded on the page by sending a soket.io message to each with their appropriate video.
01:10 < spion> they load the video and start playing it. but now they may be out of sync.
01:10 < spion> thats why the picked master v1 sends periodic messages containing v1timestamp, v1videoposition
01:11 < spion> socket.io retransmits those to v2-4
01:11 < SandorKrashna> oh cool
01:11 < spion> when say v2 gets that message, it calculates myTimestamp - v1timestamp to get the lag
01:11 < SandorKrashna> so how do the videos end up being in sync
01:11 < spion> then adds that to the v1videoposition
01:11 < spion> and seeks there.
01:11 < spion> since ntp made sure that the timestamps are in sync
01:12 < spion> the videos are almost as much in sync as the timestamps
01:12 < SandorKrashna> will videos v2-v4 be jittery since its always seeking to the position of v1
01:12 < spion> you can add a hysteresis 
01:12 < spion> a dead zone rather
01:12 < jschall> what is the fastest way to serve up a static file in node? is there any method that comes close to beating nginx?
01:12 < crabtree> nope :P
01:12 < crabtree> why don't you want to use nginx?
01:13 < spion> once they're syned, I see no reason why they should desync
01:13 < SandorKrashna> thanks spion
01:13 < spion> of course
01:13 < spion> it might turn out that there is more work involved
01:13 < spion> but this is how I'd get started :D
01:13 < SandorKrashna> so it looks like socket.io will do what I need 
01:13 < spion> don't forget ntp
01:13 < jschall> crabtree: i'd just rather not use both. i understand that i can, for sure, but i don't see any reason i should have to.
01:14 < crabtree> nginx can do a lot of heavy lifting for you
01:14 <@Nexxy> jschall, https://npmjs.org/package/node-static
01:14 < crabtree> and a few others things besides server static data
01:14 < spion> SandorKrashna, the main ingredient in this is ntp
01:14 < crabtree> serving*
01:14 < spion> if you don't have ntp, the timestamps on the machines will not be in sync.
01:14 < spion> See http://en.wikipedia.org/wiki/Network_Time_Protocol (ntpd)
01:14 <@Nexxy> if you just broadcast current video seek position
01:14 <@Nexxy> and your network is reasonably fast
01:14 <@Nexxy> NTP is irrelevant
01:15 < SandorKrashna> so why do I need the timestamp on the machine again?
01:15 <@Nexxy> you don't
01:15 <@Nexxy> spion is just overengineering you a solution
01:16 < SandorKrashna> V1 is sending the current video position to v2-v4 right? not the timestamp on the machine
01:16 <@Nexxy> that's what I would do personally
01:18 < SandorKrashna> "assuming that the timestamps on all computers are synced, you can pick a master that reports a pair timestamp, videoposition to the server, which sends them out to all the others"
01:18 < spion> you could start with just the video position
01:19 < SandorKrashna> can socket.io tell the videos to start playing at the same time?
01:19 < SandorKrashna> on different clients
01:19 < spion> see if that works and if network latency is too variable, compensate with my suggestion
01:19 < cloudbender> How do I chain functioncalls ?
01:20 < asdf12> the timestamp way wouldn't work that great anyway
01:20 < spion> why not?
01:21 < asdf12> because if a client is slow its slow
01:21 < cloudbender> here we go
01:22 < SandorKrashna> the clients will all be the same hardware
01:22 < cloudbender> I need to extend a function that's been passed in.
01:22 < SandorKrashna> this is a video wall installation so it will be an internal network
01:22 < cloudbender> the passer has no visibility to the required extension
01:23 < spion> asdf12, its to compensate for network latency, if there is any
01:23 < cloudbender> which is always the same extended snippet
01:23 < spion> but go ahead, I am curious to see if it performs reasonably well without the sync :)
01:23 < SandorKrashna> Yes i will try i have to get this working
01:23 < asdf12> yea but if you are thinking in that way, then you have to account for really slow clients
01:23 < asdf12> which the timestamp thing won't really matter anyway
01:23 < SandorKrashna> How is the system timestamp used to compensate for network latency
01:24 < spion> SandorKrashna, ntp can syncs the timestamps of multiple machines down to 10ms accuracy. because your timestamps are synced, you know how much time it took for the message to arrive to the other clients.
01:24 < spion> :)
01:25 < SandorKrashna> oh word
01:25 < SandorKrashna> cool
01:25 < asdf12> cloud what do you mean by extend
01:25 < spion> but it might not be necessary. but its nice to consider it as an option.
01:26 < SandorKrashna> so now i need to learn socket.io lol
01:26 < spion> typical LAN latency is already sub 10ms
01:26 < cloudbender> I have a callback function that's been passed into a function body
01:27 < cloudbender> I need to have it call some code not visible to the passer
01:27 < asdf12> yea ?
01:28 < cloudbender> I thought there was a way to chain functions or add a tail call to an existing function
01:28 < asdf12> i dont understand why call_some_code(); callback(); doesn't work? what are you trying to do?
01:31 < cloudbender> consider var a = function(){} is there a way to chain another function to a ?  a().extrafunction();
01:31 < asdf12> yes
01:31 < asdf12> var a = function( return {extrafunction: function(){} } )
01:33 < cloudbender> I will try that.  Noticing the extra is an object, which avoids early invocation maybe
01:34 < asdf12> i mean that example, its pointless to do that
01:35 < cloudbender> oh
01:36 < asdf12> because if all it did was return a function, you could just do a()() 
01:37 < cloudbender> I'll have to mess around with it.
01:39 < asdf12> you really only chain when you want to maintain context
01:46 < azylman> Apparently node doesn't like Google: https://github.com/joyent/node/issues/4771
01:47 < asdf12> cloud, for instance you could open(window); clean(window); polish(window); which is eh because you need to pass around window, and what if you had multiple windows to handle and pass around
01:47 < asdf12> so doing window.open().clean().polish(), window2.open().clean...etc. is better
02:02 < jaw187> Anyone out there using the MongoDB Client to connect to a cloud database?  It seems to take forever to complete the initial connection...
02:05 < spion> SandorKrashna, Nexxy - seems like there is a neat little server that tells you what the latency of socket.io is for every transport: https://github.com/guille/latency-io :)
02:06 < spion> SandorKrashna, if the latency keeps below 33ms (approximately one video frame at 30 fps) then you will definitely not need my sync complication
02:06 < spion> you can test your hardware configuration with this server
02:07 < drudge> node!
02:18 < TehShrike> Rice is great when you're hungry and you want 2000 of something
02:20 < tilleps> waffles are pancakes with syrup traps
02:23 < TheAceOfHearts> waffles are like evolved pancakes 
02:29 < TehShrike> yesssss
02:41 < cloudbender> asdf12 saw your comment ... thank you
02:41 < samholmes> ANyone here use the GM module?
02:42 < samholmes> graphicsmagick?
02:43 < ShodoPan> Terminology question for the room:
02:43 < ShodoPan> {}.foo; // you'd call this "undefined"
02:43 < ShodoPan> var y; y; // what would you call this?
02:43 < ShodoPan> z; // what would you call this?
02:44 < aho> 2. undefined, 3. reference error
02:45 < ShodoPan> aho: How would you describe it? "z is a ______ variable."
02:46 < cloudbender> z is an undefined reference
02:46 < aho> not defined
02:46 < aho> it doesn't exist at all
02:46 < samholmes> z is a zebra
02:47 < ShodoPan> cloudbender: so "y is an undefined variable and z is an undefined reference"? Would you agree with that?
02:47 < cloudbender> I do not use the term 'variables' anymore
02:47 < ShodoPan> samholmes: not quite what I was getting at, but thanks ;)
02:47 < ShodoPan> cloudbender: So would you describe them both as "references"?
02:48 < samholmes> ShodoPan: Oh no problem! You're welcome. :)
02:48 < aho> y is `undefined`, z is not defined
02:48 < ShodoPan> aho: so maybe "nonexistent"?
02:48 < cloudbender> I have never used the construct var y; y;
02:48 < aho> (imagine the stuff in backticks using some monospacy font)
02:48 < ShodoPan> aho: heh, can you see why that might be confusing terminology? :)
02:49 < cloudbender> var z;   puts an undefined reference in scope
02:49 < aho> i wouldn't have created a language with `null`and `undefined`
02:49 < aho> totally not my fault, really
02:49 < aho> <:
02:49 < cloudbender> null is important
02:49 < ShodoPan> aho: who would have :(
02:50 < cloudbender> undefined <> null <> zero
02:50 < cloudbender> they are all important
02:50 < ShodoPan> cloudbender: yeah, so that's sort of the difference I'm getting at. y and z are both not... defined. But in different ways.
02:51 < ShodoPan> I'm wondering if the community has settled on a way to describe these states of being, but it sounds like maybe not.
02:51 < cloudbender> They are standardized
02:52 < cloudbender> var z; is an undefined reference
02:52 <@Nexxy> it's a reference error
02:52 < ShodoPan> Personally I am pulling for "z is undeclared while y is undefined", but that may be a consensus of 1
02:52 < cloudbender> var z = null; is a null reference
02:52 <@Nexxy> ShodoPan, that sounds reasonable
02:53 < aho> "ReferenceError: z is not defined"
02:53 < aho> that's what you get with firefox and chrome
02:53 < ShodoPan> aho: yup, and Node
02:54 < ShodoPan> aho: Which probably makes your terms the most technically correct, but they're still confusing :)
02:54 < cloudbender> if (undefined===z) do it that way
02:55 < aho> the variable z is not defined. the value of y is `undefined`.
02:55 < ShodoPan> cloudbender: I'm really just looking for a way to *talk* about these things. Dealing with them in code is at least well-documented, if not totally sane.
02:56 < cloudbender> undefined is a standard value
02:56 < cloudbender> null is a standard value
02:58 < cloudbender> var z; declares z as undefined, but in scope, for future reference like z=1;
02:58 < ShodoPan> cloudbender: sounds good, I agree on that one
02:59 < ShodoPan> but what is a variable when it hasn't been declared first?
02:59 < cloudbender> var z=null; would be used for a future assignment to an object, like a button or window
02:59 < cloudbender> var z; is a declaration
02:59 <@Nexxy> cloudbender, I made you a meme
02:59 < aho> then it isn't a variable
03:00 <@Nexxy> http://i.qkme.me/3szgeq.jpg
03:00 < ShodoPan> is it just a bad reference?
03:00 < cloudbender> looking
03:00 < cloudbender> that's fricken fantasctic nexxy lol
03:01 <@Nexxy> :P
03:01 < cloudbender> consider a button
03:01 <@Nexxy> haha
03:01 < cloudbender> you can assigned it's onnclick to null
03:01 < ShodoPan> because here's the part where it gets painful: `typeof j;`
03:01 < cloudbender> or nul to it's onclick
03:01 < cloudbender> or null to it's onclick
03:02 < cloudbender> this disables it
03:02 < ShodoPan> so j has type "undefined" but if it is undefined, it is a different sort of undefined
03:02 < cloudbender> later, you can assign a function reference to the onclick, and the button will call the function
03:03 < cloudbender> or you can assign a function literal, same thing
03:04 < cloudbender> so, when I design a new object with methods, all the methods are pinned to null, until later; (that's me, the way I do it)
03:04 < cloudbender> I use the constructor to attach the calls to the method placeholders
03:04 < cloudbender> which start out as references to null
03:10 < slajax> has anyone noticed that EventEmiiter.emit will surpress all errors that occur later in the stack and substitude a unspecified error ?
03:10 < slajax> I'm using xml2js which implements EventEmitter.emit, subsequently any syntax error or other error later in the stack comes back as a "unspecified error".
03:11 < slajax> Seems like a pretty major flaw. makes debugging a complete guessing game.
03:11 < slajax> https://github.com/Leonidas-from-XIV/node-xml2js/issues/69
03:13 < eephillip> slajax: have you seen an uptick in errors not throwing any stack information at all? I feel like ever since 0.8 I get nothing at all
03:13 < slajax> Yeah, pretty much anything that is called after that event emitter comes back empty
03:13 < slajax> it's a total nightmare.
03:14 < slajax> I haven't noticed it as per 0.8, but definitely since I implemented this package which uses the event emitter
03:14 < slajax> eephillip: ^
03:16 < eephillip> yeah, and just about everything uses the emitter objec
03:16 < eephillip> t
03:18 < slajax> eephillip: event emitter is core to node now?
03:18 < slajax> Cause I'd love to file this bug.
03:19 < slajax> It's reallly bad
03:19 < groundwater> slajax: can you gist a small example
03:19 < eephillip> slajax: I was wondering if it has anything to do with the experimental error domains introduced sometime in 0.7.9
03:19 < slajax> groundwater: https://github.com/Leonidas-from-XIV/node-xml2js/issues/69
03:20 < slajax> That should be a decent min case.
03:20 < slajax> uses xml2js though. 
03:21 < slajax> literally any error after EventEmitter.emit returns the same thing
03:23 < groundwater> slajax: looks like your error is being caught
03:23 < groundwater> https://github.com/Leonidas-from-XIV/node-xml2js/blob/master/src/xml2js.coffee#L179
03:23 < groundwater> it's a problem with node-xml2js
03:24 < harrisonm> Spekaing of EventEmitter
03:24 < groundwater> wait, on closer look maybe it's not... let me read closer
03:24 < slajax> cool. Thanks groundwater. I was trying to figure that out myself, but coffee makes me read like a pot head.
03:25 < slajax> It emits the error, so possibly it needs a this.on('error',...)
03:25 < slajax> but that's still not idea if I want to pass it next
03:25 < slajax> *ideal
03:26 < groundwater> slajax: yah, i think it's catching the error
03:26 < slajax> ok well that's good news.
03:26 < harrisonm> when you get a chance: any reason running events.EventEmitter.call(this); within a function wouldn't be adding the "on" function to this?  (Saw it in a tutorial, not sure if it complies with how EventEmitter is set up now)
03:26 < slajax> I've only seen it in this use case, so I'm glad it's isolated.
03:27 < groundwater> slajax: try throwing { message: "hello" }
03:27 < groundwater> since it's printing ex.message
03:28 < slajax> That should be the same as new Error()
03:28 < groundwater> slajax: hmm very true
03:28 < slajax> Error.message is the prototype
03:28 < slajax> ;)
03:28 < slajax> I think I may need to bind to the emitter if I wanna see any error that occurs
03:29 < slajax> I'll try it
03:29 < groundwater> do some more digging
03:29 < groundwater> but i think you're on the right track
03:29 < slajax> Cool, thanks for the speedy help
03:29 < slajax> appreciate it
03:29 < groundwater> np
03:44 < asdf12> what font size do you guys use
03:45 < asdf12> in your editor
03:45 < echo> 11px
03:46 < echo> Sometimes 10px, depends on where I am and what I'm on.
03:46 < asdf12> my eyes would blow up
03:46 < echo> I have really good vision ;)
03:47 < eephillip> I'm cross compiling node for arm, the resulting binary is good to go, but the regular make install calls the tool/install.py script which places quite a few files. What function do these additional files have?
03:48 < TehShrike> asdf12: after I got my iPad 3, I went around to all my other computers and bumped my code editors up to 12px
03:48 < harrisonm> asdf12: 10 right now
03:48 < TehShrike> asdf12: and shifted my browser font size to "large"
03:48 < asdf12> im assuming these are all standard / sans-serif family fonts
03:48 < brycebaril> I use large fonts for my old man eyes
03:49 < asdf12> im at like 14px
03:50 < sethetter> Is there a channel for mongoose?
03:51 -!- mode/#Node.js [+o isaacbw] by ChanServ
03:52 < brycebaril> I'm at 12px but that's on a 24" monitor
03:55 < harrisonm> Yeah, just using the default Sublime Text theme
04:02 < slajax> groundwater, that was exactly the problem. PR'd it. Thanks man.
04:05 < eephillip> Anyone cross compiling node for arm?
04:08 < groundwater> slajax: glad you found the error! 
04:09 < lamarus> I am setting up a new server that is going to be a node.js server... what OS should I use?
04:09 <@Nexxy> CStumph_, that's right
04:12 < eephillip> lamarus: I use ec2 instance running 12.04 LTS ubuntu sever 64bit, that does well, but its just a sandbox
04:12 < lamarus> thanks eephillip.   Im new to node and just want to play with it... ec2 free tier seems like it would work for that right?
04:13 < eephillip> free for a year, thats how they hook you
04:13 < lamarus> Thats ok... Ill destroy it in a few months anyway
04:13 < CStumph_> Nexxy :D Helloooooo
04:13 < lamarus> just want to play with it and see if I want to use it for my API
04:13 <@Nexxy> CStumph_, sup! :D
04:14 < lamarus> This may be a dumb question... but node.js plays nice with mysql and does not require apache right?  node is its own web server
04:14 <@Nexxy> lamarus, yep!
04:14 <@Nexxy> not a dumb question
04:15 <@Nexxy> lamarus, node has a pretty sweet mysql lib
04:15 < lamarus> so I would just need to install mysql and node
04:15 < eephillip> but best not to think of at a web server, its more general then that
04:15 < CStumph_> Nexxy been awhile, trying to figure out the steps to fixing my username :P
04:15 <@Nexxy> yeah and a mysql lib of your choice
04:15 <@Nexxy> CStumph_, IRC username?
04:15 < CStumph_> Nexxy yup
04:15 <@Nexxy> CStumph_, I think it's cuz you pinged out on CStumph so your client used the alternative
04:16 <@Nexxy> just `/nick Cstumph` or I think there are some scripts to do it too
04:16 <@Nexxy> /s/s/S/
04:16 <@Nexxy> -/
04:16 < CStumph> Sssssssssssssssss
04:16 < CStumph> Serpentine
04:17 <@Nexxy> that's me!
04:17 < CStumph> Thanks!
04:17 < CStumph> <--- is good now
04:18 <@Nexxy> ^-^
04:20 < lamarus> Thanks Nexxy 
04:22 <@Nexxy> lamarus, :)
04:30 < swaj> Potentially stupid question:  is there any way to share objects between cluster workers?  I'm thinking of creating a database connection pool in the master, and then accessing that pool from the workers.  My guess is no because of the whole threading situation, but I wanted to make sure there wasn't a library out there that would solve this problem.
04:31 < swaj> (my guess is each worker would have to have its own pool, but you know, a guy can wish, right? :))
04:39 < tjfontaine> swaj: cluster workers aren't threads they're processes :)
04:40 < swaj> yeah
04:40 < swaj> but they share the underlying connection resources, so I wasn't aware if there was a way to share other resources (like a database connection pool)
04:41 < tjfontaine> well those are fd's and they're a little different, you can send handles through the ipc
04:42 < tjfontaine> swaj: savvy?
04:44 < swaj> yeah I def understand... I guess it was just wishful thinking.  It definitely goes a bit against the grain ... well more like completely against the grain :P
04:44 < swaj> guess for now I'll just open up smaller pools for each worker process
04:44 < tjfontaine> well, you can work with something like dnode or whatever, but replicating changes will mean hooking more of the rpc stuff
04:44 < tjfontaine> depends on what kind of arbitrary object you want to "share"
04:45 < swaj> yeah
04:46 < groundwater> swaj: you're looking for some kind of IPC solution
04:46 < swaj> for now it's probably just going to be a node-pool pool of postgres connections.
04:46 < paradoxquine> is there a way to get a json object with the results of running mocha in the browser?
04:46 < swaj> groundwater: essentially.  master process maintains a pool of 20 or so db connections, workers can acquire a connection from that pool and use it to execute queries.
04:47 < groundwater> swaj: connection pool won't work like that, you can really only share ports for server processes
04:47 < tjfontaine> swaj: there's no reason you couldn't do that now with child.send(, sendhandle)
04:47 < neilk_> I have a node.js app that imports a large and complicated data file. But, I also want to run multiple workers. Is there any way to have true shared memory with node.js, i.e. actual real forking, not child_process.fork?
04:47 < tjfontaine> well
04:47 < groundwater> swaj: unelss you want the master process to connect to the database
04:48 < swaj> the master process would maintain the connection
04:48 < swaj> the worker would just use it
04:48 < groundwater> swaj: so the master process is actually connecting to the database?
04:48 < swaj> aye
04:48 < groundwater> swaj: if so, then yes. that will work
04:48 < swaj> thinking of node-pool
04:49 < swaj> though, I'd have to dig and see how that acquire process works.
04:49 < groundwater> under cluste,r you can send/receive between the child/parent with process.send and process.on
04:49 < swaj> it may end up initializing the connection in a worker.
04:49 < swaj> hmm
04:50 < swaj> so I could use an event listener on the master to supply a connection I acquire from the pool
04:50 < swaj> and then child.send that
04:50 < groundwater> you cannot send the database connection
04:51 < groundwater> whatever process holds the pool has to connect
04:51 < swaj> right
04:51 < groundwater> a db connection is an outgoing socket descriptor, and an object in-memory that knows the wire protocol of the socket
04:51 < swaj> right
04:52 < groundwater> sharing server sockets is common, but sharing outgoing sockets is kinda bizarre
04:52 < swaj> yeah it sounds weird :P
04:52 < swaj> even then, my master process has the potential to bottleneck me
04:52 < groundwater> so either the workers need their own pool, or the master needs to do the actual query
04:52 < swaj> if it's maintaining all the connections
04:52 < swaj> yeah
04:52 < swaj> sounds like smaller pools for each worker is the way to go
04:53 < groundwater> yah i think keeping the master small and generic is the way to go
04:54 < swaj> essentially it's just a simple express app, but I use node's cluster api so I can use all the CPU cores
04:54 < swaj> what does it buy me? probably not much... but I'm a geek and I did it because I could
04:54 < Ari_> Hey, can anyone tell me if it's possible to write a recursive loop without either recalling the entire function it is contained in, or having to define a new function just for the recursive code?
04:54 < samholmes> What do I do if I need to embed some HTML into a jade template?
04:54 < samholmes> like statcounter code or something?
04:54 < samholmes> something larger
04:55 < groundwater> swaj: in the best design, i think your worker process is unaware of the master
04:55 < groundwater> swaj: and your master only handles caring for the workers
04:55 < swaj> groundwater: that's how it is now.  each worker has no idea it's being clustered.  I use connect-redis to maintain web session state.  The master just watches to see if a worker dies and then logs it/emails me and forks another one.
04:56 < groundwater> swaj: sounds like a stable design!
04:56 < mscdex> Ari_: no
04:56 < mscdex> Ari_: unless you modify your logic to use a plain loop construct instead
04:57 < groundwater> swaj: in a highly scalable design, your database processes would be separate from your web processes, and they would communicate via a queue
04:57 < Ari_> mscdex: Hmm... ok, well is there any good alternative to recursion then, while still keeping it asynchronous?
04:58 -!- mode/#Node.js [+o isaacbw] by ChanServ
04:58 < mscdex> Ari_: perhaps it's better to describe what it is you're wanting to do exactly
05:00 < Ari_> mscdex: Well, I essentially have a couple of small, but different loops I need to run; I feel like putting them into their own functions would just clutter things though, so I am trying to find the best way to keep my code organized.
05:01 < mscdex> are they all related logically? if so, put them all into a separate function?
05:02 < evanmoran> Have the node folks considered integrating promises into the api? They seem.. uh.. promising =)
05:02 < neilk_> Ari_: wait, so you want to separate a recursive process from a number of other processes?
05:02 < mscdex> evanmoran: there were promises in node very early on, but were removed
05:03 < neilk_> Ari_: like, you want to define a bunch of different functions and then another one that recurses them?
05:03 < evanmoran> ouch. I didn't know about that
05:03 < evanmoran> was it considered too complicated?
05:04 < groundwater> evanmoran: a lot of modules have tackled the issue with descent success
05:05 < evanmoran> I've seen a few of them. I like the idea of wrapping the standard libraries to make some things simpler. I was thinking mostly of adoption and if it would be easier or harder for newcomers to node.js 
05:05 < Ari_> neilk_: What I have is a very long function with a bunch of commands etc., and I need to use 3 or 4 loops within this function; I can't recall the entire function though, and the loops are all very tiny/one time use, so it wouldn't make sense to give them their own functions
05:06 < neilk_> Ari_: There's no reason not to give them their own named functions. Functions are free.
05:06 < ncooley> good evening everyone… New to node, but wanted to see if anyone knew of any implementations which could allow a user via command line to add templated pieces of markup to an existing HTML page?
05:06 < neilk_> Ari_: plus, in JavaScript, you can define functions within the body of a function, so they don't even have to be available elsewhere.
05:06 < neilk_> Ari_: I do that all the time.
05:07 < evanmoran> ncooley: are you doing this live through ajax or user input, or is it server side?
05:07 < groundwater> evanmoran: it's love/hate. some people love them, others will never touch them. 
05:07 < Ari_> neilk: oh.....oh. Wait seriously? That changes everything o__o
05:07 < neilk_> yup
05:08 < Ari_> I honestly never realized you could put named functions inside of other named functions. Damn.
05:08 < evanmoran> groundwater: I hear that =). I personally couldn't stand them initially but then I started writing more complex stuff that nested more
05:08 < mscdex> Ari_: :-)
05:09 < ncooley> @evanmoran -- the intent is to have something that worked as a command-line tool.  I enter a command like "add templateX to index.html" and such a tool would grab templateX from a predefined location and inject its markup into index.html 
05:10 < Ari_> Would it be cleaner to put the function at the beginning or end of the function it is in?
05:10 < neilk_> Ari_: here's an example https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope#Nested_functions_and_closures
05:10 < neilk_> Ari_: I usually put it before. Just like var, it doesn't actually matter where it is, but defined first is usually better.
05:13 < evanmoran> @ncooly there are lots of tools that can do it
05:13 < Ari_> Why do they still put parameters in the enclosed function? Shouldn't it already contain the scope of the function it's in?
05:13 < evanmoran> You can use Jade on the command line directly: https://github.com/visionmedia/jade
05:14 < evanmoran> You can also make a very simple node app that loads a file and compiles things and then saves it out to disk. 
05:14 < evanmoran> Mu is mustache for node: https://github.com/raycmorgan/Mu
05:14 < evanmoran> Underscore could also do it with its simple _.template function
05:15 < ncooley> @evanmoran -- I think the latter is what I'm thinking… When I say "template" I literally mean static HTML to dump into a page
05:15 < ncooley> doesn't actually need to be compiled.
05:15 < ncooley> But it would be nice to treat the page as a DOM and have editing abilities as well
05:16 < ncooley> and you're right -- ultimately save it out to disk
05:18 < evanmoran> ncooley: one sec. I'm figuring something out for you=)
05:19 < ncooley> @evanmoran -- much appreciated
05:26 < evanmoran> ncooley: I'd recommend writing your command line this way:
05:26 < evanmoran> use fs to readFile: http://nodejs.org/api/fs.html#fs_fs_readfile_filename_encoding_callback
05:27 < evanmoran> use underscore template to do simple templating: http://underscorejs.org/#template
05:27 < evanmoran> (this could be replaced with mustache/Mu or whatever, but it is simple)
05:28 < evanmoran> use commander for simple command line argument checking: https://github.com/visionmedia/commander.js/
05:28 < evanmoran> should be a few hours and you will know node much better=)
05:28 < ncooley> @evanmoran -- great suggestions
05:28 < ncooley> much appreciated!
05:28 < evanmoran> sure, glad to help =)
05:35 < ForSpareParts> Could you guys recommend good frameworks/libs for working with node-webkit? I guess, anything really good for building highly-interactive, primarily clientside apps?
06:08 < Ari_> Do people ever make asynchronous loops using setInterval?
06:08 < Ari_> Or would this be a horrendous misuse?
06:09 < groundwater> Ari_: what is your goal?
06:10 < Ari_> curiosity :d
06:10 < groundwater> Ari_: try it, report back =]
06:10 < Ari_> Well I would assume by nature that it would work
06:10 < Ari_> I am just wondering if it would be considered bad practice
06:11 < groundwater> Ari_: depends on the problem
06:12 < Ari_> what would it depend on? isn't it essentially a loop with a 1ms interval between each that allows ticks of the event loop?
06:15 -!- mode/#Node.js [+o isaacbw] by ChanServ
06:17 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
06:19 < lamarus_> I am trying out node.js on an EC2 instance   I am getting Error: listen EADDRNOTAVAIL with the server.js file here http://pastebin.com/y0Z77cLT
06:19 < lamarus_> can someone please lead me in the correct direction?
06:21 < RLa> why do you listen on that specific ip?
06:24 < lamarus_> it is the ip of the machine... well elastic ip... i changed to the real ip from the ifconfig and it runs
06:24 < lamarus_> I just can access it from outside... which makes sense since that port is blocked
06:25 < groundwater> lamarus_: the elastic IP isn't actually on the machine
06:25 < groundwater> just bind to 0.0.0.0
06:25 < lamarus_> ok
06:26 < groundwater> lamarus_: the aws routing is weird
06:26 < lamarus_> do I need to open port 1337 still
06:26 < groundwater> yes
06:26 < lamarus_> so listen(1337, 0.0.0.0
06:26 < groundwater> lsiten(1337) does the same thing
06:26 < lamarus_> ok
06:28 < lamarus_> great... that worked ... thanks a bunch groundwater 
06:28 < lamarus_> now I can have fun learning node.js
06:28 < groundwater> lamarus_: no probs
06:32 < lamarus_> groundwater, can you do node server.js and still have your command prompt?  run node in the background?
06:33 < groundwater> lamarus_: yes, have a look at the forever module
06:33 < lamarus_> thanks
06:33 < groundwater> there's a lot, so if that one doesn't suit your needs, try others
06:33 < lamarus_> it will give me a start...
06:34 < lamarus_> that is all i need... now for the fun RTFM :)
06:34 < lamarus_> thanks for the help tonight groundwater 
06:34 < groundwater> cheers
08:17 -!- mode/#Node.js [+o isaacbw] by ChanServ
08:24 < Aartsie> Goodmorning
09:12 <@Nexxy> \o/
10:05 < amurdaca> hey guysssssss
10:06 < amurdaca> so quite here!
10:08 < mscdex> amurdaca: it's what we're best at
10:08 < mscdex> asynchronous sleep()
10:12 <@Nexxy> mscdex, speak for yourself
10:14 < ningu> hey, I'm using express and trying to pipe the stdout of a spawned child process as a response to a request.
10:14 <@Nexxy> you should use fork
10:14 < ningu> I'm calling zip to create a zip file. I tried this:
10:14 < ningu> res.send(new Buffer(zip.stdout, 'binary'));
10:15 < ningu> but it doesn't seem to work. how come use fork?
10:15 < mscdex> Nexxy: i speak for everyone here! :-D
10:15 < mscdex> especially when i say semicolons and comma-last
10:15 < mscdex> ;-)
10:16 <@Nexxy> ningu, so you can share ports
10:16 <@Nexxy> instead of having to use stdout and crap
10:17 <@Nexxy> not that there's anything wrong with that
10:17 < shesek> https://gist.github.com/shesek/4942247
10:17 < shesek> What you think about using something like that for tests? Too magical?
10:17 <@Nexxy> I can't read this
10:18 < shesek> ah, sorry, I sometimes forget some people still write JavaScript :)
10:18 < jesusabdullah> nexxy what are you reading
10:18 <@Nexxy> haha "still"
10:18 < ningu> Nexxy: ok, but I don't want to share the stdout of my node app with zip
10:18 < ningu> I want to send it as an express response
10:19 <@Nexxy> ningu, ah I thought you were just using node's zlib
10:19 <@Nexxy> carry on
10:19 < ningu> ok, so how do I hook up the process's stdout to the http response?
10:19 < ningu> res.send(zip.stdout) doesn't seem to work.
10:20 <@Nexxy> zip.stdout.pipe(res)
10:20 < shesek> Here's the compiled JavaScript: http://pastie.org/6161762
10:20 < ningu> hrm
10:20 <@Nexxy> not that I have any clue what zip is
10:20 < ningu> zip is the name of the spawned process
10:20 <@Nexxy> but if you actually had a stream you could pipe it
10:20 < shesek> basically, it lets you require() something and mock the modules it gets back from require()
10:20 <@Nexxy> so yeah you should be able to
10:20 < shesek> so you could load something and give it a mock fs module, for example
10:21 < ningu> hmm, I didn't realize you could pipe to res
10:21 <@Nexxy> I think you can
10:21 <@Nexxy> I could be wrong but 
10:21 < ningu> but yeah that seems to ork
10:21 < ningu> work*
10:21 <@Nexxy> everything is an event emitter
10:21 <@Nexxy> :D
10:21 <@Nexxy> sweet
10:22 < ningu> cool
10:28 < amurdaca> i have a site under https only is my session snippet correct? -->http://pastebin.com/QjfB8sLq
10:28 < amurdaca> i et a strane behavior with mono btw...
10:29 < amurdaca> sessions keep spawning and rows are added in db :/
10:29 < amurdaca> any clue?
10:31 <@Nexxy> amurdaca, everyone acts weird when they get mono
10:31 < SomeoneWeird> Nexxy, lold
10:31 < amurdaca> comon lol
10:31 < amurdaca> it's frustrating me..
10:32 <@Nexxy> amurdaca, lots of water, rest & ibuprophen as needed
10:32 <@Nexxy> s/ph/f/
10:32 < mmalecki> Nexxy: I can't drink :(
10:32 < mmalecki> wat nao
10:32 <@Nexxy> what!?
10:33 <@Nexxy> blasphemy
10:34 < mmalecki> Nexxy: it's called "tattoo"
10:34 <@Nexxy> lol
10:34 <@Nexxy> mmalecki, JS logo?!
10:34 < mmalecki> Nexxy: yes.
10:34 < mmalecki> how'd you know?
10:34 <@Nexxy> jealous!
10:34 <@Nexxy> I know things.
10:35 <@Nexxy> it's what I do
10:35 < mmalecki> Nexxy: I see!
10:36 <@Nexxy> or do you?
10:38 <@Nexxy> mmalecki, lts strt prgrmmng wtht n(y?) vwls
10:38 < mmalecki> Nexxy: ths s gd d
10:39 <@Nexxy>  n rght?
10:39 <@Nexxy> m  gns
10:39 < mmalecki> Nexxy: pl wll ht my Ps
10:39 < mmalecki> *ppl
10:40 <@Nexxy> sm ppl jst dnt knw st(y?)l whn th(y?) s t
10:40 <@Nexxy> mmalecki, ths s gng t b th nxt bg thng
10:44 < kmdm> Hi xD Is there any gotchas I can't Google about inheriting from a javascript "class" that inherits from a native implementation? Anytime I try to call a method it should have inherited I get: "TypeError: Illegal invocation" :(
10:44 < Guest70698> Hello
10:45 < Guest70698> I am just trying node.js but it does not seem to work
10:45 < Guest70698> echo 'console.log("text"):' > test.js &&    node test.js
10:45 < Guest70698> does not output nothing :(
10:45 < kmdm> : not ; ?
10:46 < Guest70698> actually it's in 2 lines, i put the && for readibility here :)
10:46 < SomeoneWeird> try 
10:46 < SomeoneWeird> node -e "console.log('text')"
10:46 < mmalecki> Nexxy: rtfl
10:46 < Guest70698>  node -e "console.log('te');" not working :(
10:47 < mmalecki> Nexxy: actually, is y a vowel?
10:47 <@Nexxy> sometimes
10:47 < mmalecki> I can tell it isn't in polish
10:47 < Guest70698> is this a common bug?
10:47 < mmalecki> Nexxy: btw, I ordered some hot sauces!
10:47 <@Nexxy> o snap
10:47 < SomeoneWeird> y is not a vowel
10:48 < mmalecki> Nexxy: one of those which say 'DO NOT EAT' on box
10:48 <@Nexxy> SomeoneWeird, don't be silly
10:48 <@Nexxy> we're talking about english
10:49 < SomeoneWeird> AEIOU
10:49 <@Nexxy> mmalecki, EAT IT
10:49 <@Nexxy> SomeoneWeird, "... and sometimes Y"
10:49 < SomeoneWeird> >.>
10:49 <@Nexxy> Y is both
10:49 < mmalecki> Nexxy: I shall
10:49 <@Nexxy> mmalecki, good call
10:49 < mmalecki> Nexxy: 900 000 scolvilles
10:49 <@Nexxy> ooh
10:49 < mmalecki> Nexxy: or however you pronounce that scale
10:50 <@Nexxy> mmalecki, usually by going
10:50 <@Nexxy> "haaa.... haaa...."
10:50 <@Nexxy> and then sucking air into my mouth
10:50 < mmalecki> hahahahhaahaha
10:50 <@Nexxy> waving my hand around
10:50 <@Nexxy> etc
10:50 < mmalecki> drink milk
10:50 <@Nexxy> yeah
10:50 < mmalecki> also, damn, that scotch be good
10:51 <@Nexxy> not as good as my mojito
10:51 < mmalecki> probably!
10:51 < mmalecki> but also, it's not even noon, too lazy to make coctails yet
10:52 <@Nexxy> lol
10:52 <@Nexxy> second breakfast?
10:54 < mmalecki> Nexxy: http://www.quickmeme.com/meme/3szmky/
10:54 <@Nexxy> haha yep
10:56 <@Nexxy> mmalecki, http://i.qkme.me/3szmli.jpg
10:58 < mmalecki> Nexxy: hahahaha
10:58 < mmalecki> Nexxy: sometimes liquid potatoes too
10:58 <@Nexxy> oh, right!
10:59 <@Nexxy> (even though rye vodka is way better)
10:59 < mmalecki> Nexxy: I can confirm this
10:59 < thealphanerd> Nexxy: https://soundcloud.com/thealphanerd/clipping-warning-early-wheel
11:00 < thealphanerd> recording of that bike wheel thing
11:00 < thealphanerd> from 96kHz 24 bit
11:00 <@Nexxy> ooh
11:01 <@Nexxy> thealphanerd, is there an entropy source for this?
11:01 < thealphanerd> entropy?
11:01 <@Nexxy> like, the randomness
11:01 < thealphanerd> its a bike wheel
11:01 < thealphanerd> and a guitar pickup
11:02 <@Nexxy> haha it sounds generated
11:02 <@Nexxy> crazy
11:02 < thealphanerd> we are hitting it with metal objects
11:02 <@Nexxy> crazy kids
11:02 < thealphanerd> pretty much no processing
11:02 < thealphanerd> http://www.youtube.com/watch?v=u3D-_zyEuqQ&feature=share&list=UUTH4nv07J74k7COld6MY3XQ
11:02 < thealphanerd> this thing
11:02 < thealphanerd> although now it is better mounted
11:03 < thealphanerd> base of cold rolled steel
11:03 <@Nexxy> very fancy
11:05 < thealphanerd> :D
11:05 <@Nexxy> thealphanerd, I want imogen heap's gloves
11:16 < leehambley> hi all, can anyone tell a beginner why a blatantly wrong piece of code (non existent funciton call, non existent property, etc) in a Q promise callback (then()) goes absolutely nowhere
11:17 < jesusabdullah> leehambley: what is a Q promise
11:17 < jesusabdullah> leehambley: and what is "goes absolutely nowhere"
11:18 < leehambley> jesusabdullah: https://npmjs.org/package/q -- standard promise/deferred spec stuff
11:18 < mmalecki> jesusabdullah: what is jesusabdullah 
11:18 < leehambley> and, I can write blatantly broken code, which should raise an error
11:18 < leehambley> but nothing is seen, the code breaks silently
11:18 < fwg> leehambley: paste pls
11:19 < jesusabdullah> mmalecki: I'm sorry, the correct question was, "what is a triple baconator"
11:19 < jesusabdullah> leehambley: you have the board
11:19 < pyykkis> leehambley: https://github.com/kriskowal/q#the-end
11:19 < jesusabdullah> leehambley: my guess is the library is smart enough to be like, "oh, no callback? Fuck it"
11:20 < jesusabdullah> leehambley: I don't "do" promises
11:20 < SomeoneWeird> i don't "do" promises either
11:20 < pyykkis> leehambley: end the promise chain with .done() and it'll throw if there's unhandled errors
11:21 < leehambley> pyykkis thanks, what if my promises are never really done, then I can't ever raise ?
11:22 < jesusabdullah> sounds like someone broke their promise leehambley 
11:22 < jesusabdullah> ;
11:22 < leehambley> https://gist.github.com/leehambley/972ad567c20634068924 < pastie
11:22 < jesusabdullah> </3 ;_;
11:24 < leehambley> thanks pyykkis, that was it
11:24 < leehambley> I wonder if I could make it always raise, I suppose the point is to allow you to refer raising until you ar e"done" with the callback chain
11:25 < pyykkis> leehambley: cool. and of course, you don't need to end every promise with .done(). Ending the last promise is enough..and it'll throw whenenver the callback throws in the .then() chain
11:25 < leehambley> ah, alright - interesting
11:26 < leehambley> we're using them to pass a (possibly) opened amqp connection to a wrapper, that (possible) opened connection then needs [exchange, queue[binding]] (so more nested promises)
11:26 < leehambley> it's difficult to know where to end them
11:27 < pyykkis> leehambley: so one can write e.g.,  .fail()..so then(first).then(second).fail(handler).then(third).done()
11:27 < nb-ben> you will learn young padiwan, have no fear for it is the path to darkness
11:27 < leehambley> the class constructor looks something like this, https://gist.github.com/leehambley/39a1a27f663d9fcb708f - maybe I can end the connection promise there, at least
11:27 < jesusabdullah> are you encouraging the use of promises :(
11:27 < pyykkis> wups, how many typos one can write in a sentence.. :p
11:27 < leehambley> (I'm aware of rabbit.js)
11:28 < nb-ben> jesusabdullah, promises lead to disappointments
11:28 < nb-ben> :D
11:28 < pyykkis> in the call chain above ^^^ .fail handler takes care of `first` and `second` cbs. If the `third` cb fails, then .done() throws the error.
11:29 < pyykkis> and of course, .fail can rethrow the error, if it can't handle it.
11:29 < leehambley> alright, interesting, so fail() means I could setup my own handler, and just bail out
11:29 < pyykkis> exactly.
11:31 < leehambley> thanks pyykkis, this promse thing is a mindjob :-D
11:47 < MI61> joyent/node: Ben Noordhuis v0.8 * aec6e93 : doc: add tools/ dir to CONTRIBUTING.md verboten list - http://git.io/t47hIA
12:16 < Naked> hello! does anyone know of unofficial debian packages of node 0.8.x?
12:18 < SomeoneWeird> https://launchpad.net/~chris-lea/+archive/node.js
12:18 < SomeoneWeird> Naked, ^
12:19 < Naked> SomeoneWeird: do those packages work directly with debian?
12:19 < SomeoneWeird> yes
12:20 < Naked> SomeoneWeird: ~quantal? or raring?
12:21 < SomeoneWeird> either
12:23 < Naked> SomeoneWeird: atleast the raring packages force me to install a libc6 from experimental, which I am not going to do
12:23 < SomeoneWeird> heh
12:24 < Naked> SomeoneWeird: same for quantal
12:24 < SomeoneWeird> compile it then :)
12:25 < Naked> SomeoneWeird: so your comment that the packages work in debian was assuming that libc6 was from experimental?
12:25 < aandy> hmm, i wonder what Eggdrop means by this signal: SIGCHLD This signal is ignored by Eggdrop and can be used to determine whether it's running or not.
12:25 < aandy> so.. running eggdrop doesn't mean it's running, huh?
12:42 < Voting1> I need sample of code (I assume, using express js ?) to permit me to build a restful API to access a mysql (or other SQL) database. Ideally, I want to end up with something that will make it easy to connect a backbonejs based front-end to once the front end gets done. Where can I get an example I can study? My app is pretty simple really but I am new to Node, Express and Backbone! 
12:49 < aandy> unless you need anything express specific, you could also look into http://mcavage.github.com/node-restify/ 
12:51 < aandy> there are a couple of small examples to show how to set up endpoints (routes). add a mysql module and it should be fairly easy to use for api's. i have a small pgsql example i could show you (using express)
12:52 < Voting> aandy: are you speaking to me? (had a network problem so I may have missed much of what you said!) 
12:52 < aandy> yes :)
12:52 < Voting> oh, can you repeat yourself! 
12:52 < aandy> unless you need anything express specific, you could also look into http://mcavage.github.com/node-restify/ 
12:52 < aandy> there are a couple of small examples to show how to set up endpoints (routes). add a mysql module and it should be fairly easy to use for api's. i have a small pgsql example i could show you (using express)
12:53 < Voting> I would LOVE your example, aandy!
12:53 < Voting> aandy: my I pm you? 
12:53 < aandy> sure
12:55 < Voting> r u seeing my PMs, aandy?
13:17 < zalun> I'm trying to run connect server to serve development files. How to make it impossible to return "
13:17 < zalun> HTTP/1.1 304 Not Modified" ?
13:18 < Topcat> can't I use socket.io ina  routes file at all? I'm trying to emit events from a child process on the server to clients
13:18 < heijmerikx> Hi all, coming from Rails, i find myself looking for a 'framework' that will help node.js development. There are so many, but which one is the wisest to choose from atm? IE derbyjs?
13:19 <@Nexxy> heijmerikx, you will probably find the most help with express
13:19 -!- mode/#Node.js [+o isaacbw] by ChanServ
13:20 < heijmerikx> Nexxy, thanks for your response.
13:20 <@Nexxy> :)
13:20 < cjb> heijmerikx: I've been surprised by this too.  Express is not analogous to Rails, as far as I can see.
13:21 <@Nexxy> it's more like sinatra
13:21 < heijmerikx> cool
13:21 <@Nexxy> but it has limited 'scaffolding' as well
13:21 < heijmerikx> i'm trying to get a bit more help by using a popular framework that will help me more than starting with bare bones node.js
13:21 < heijmerikx> never used scaffolding anyways :)
13:21 <@Nexxy> yeah, express is definitely the most widely used
13:22 < heijmerikx> good to know!
13:22 < cjb> Express is certainly popular, but "minimal and flexible", which means it doesn't do much more than give you a request object and tell you to knock yourself out with it.
13:22 <@Nexxy> it uses connect's middleware 
13:22 < heijmerikx> mmz ok, i thought node.js already did the same. but maybe i have to read up a bit more then :)
13:23 <@Nexxy> heijmerikx, you get a lot of things that don't come with node's http
13:23 < heijmerikx> thanks for the info. i'll try to look at express first then
13:23 <@Nexxy> bodyparser, cookieparser, etc
13:24 < DarkArgon> shitty sessions
13:25 <@Nexxy> lol
13:25 <@Nexxy> someone's grumpy
13:27 < DarkArgon> a bit. but i still love express
13:27 <@Nexxy> it wouldn't be hard to write your own sessions
13:28 < DarkArgon> i did that
13:29 < DarkArgon> but I wasted a lot of time getting the "official" sessions to work
13:29 <@Nexxy> yeah, they worked well for what I was doing, but I had fairly simple requirements
13:30 < DarkArgon> did you have auth? with passport for example?
13:31 <@Nexxy> no passport auth
13:31 <@Nexxy> it used barcodes lol
13:32 < DarkArgon> ok. but did u used the sessions for authenticated users or just to have sessions?
13:35 <@Nexxy> DarkArgon, this was with express 2, and just for flash messages, etc
13:36 < DarkArgon> alright. this way they are perfect, but i don't want a session for every unauthenticated user.
13:36 < DarkArgon> that was my problem
13:41 < heijmerikx> and what about compound.js? That seems to be a good option too. But i can't say for sure in terms of community
13:41 < heijmerikx> …good option, coming from rails that is 
13:47 <@Nexxy> heijmerikx, I'm not familiar
13:48 < heijmerikx> ok, but thanks for your input. 
13:50 <@Nexxy> fuck
13:50 < DarkArgon> someone is grumpy? :P
13:50 <@Nexxy> DarkArgon, no just greeting niggler 
13:50 <@Nexxy> in his native tongue
13:51 < DarkArgon> lol
13:51 <@Nexxy> see: https://gist.github.com/nexxy/3829271
13:53 < daslicht> haha
13:54 < DarkArgon> fuck express sessions!
13:54 < mscdex> Nexxy: that must be the abridged version
13:54 <@Nexxy> mscdex, lol yeah 
13:54 <@Nexxy> I haven't regrepped the logs recently
13:54 < _ior> fuck quicktime. yeah, couldn't agree more
13:55 < DarkArgon> tony montana style?
13:56 < amurdaca> do i have to set cookie: secure:true in express session if my site is always under https?
13:56 < DarkArgon> you should
13:56 < DarkArgon> i think u don't have to
13:56 < amurdaca> hey dark :D
13:57 < amurdaca> how about your session?!
13:57 < DarkArgon> yea.. sessions. i threw it away and coded my own
13:57 < amurdaca> gave up?
13:57 < mmalecki> Nexxy: I can confirm your reaction to hot sauce
13:58 <@Nexxy> you have an ulcer now?
13:58 < amurdaca> DarkArgon have you done a middleware?
13:58 < DarkArgon> yea i use my auth.sessions now. its very crappy, but it works for my project
14:01 < rdpanek> hello
14:02 < rdpanek> I have a question on app.get (function (req, res)) {}
14:02 < DarkArgon> ask :D
14:02 < rdpanek> send a request curl -X GET http://localhost:5000/users/dan?sort=price&name=10
14:03 <@Nexxy> rdpanek, your users have prices?!
14:03 <@Nexxy> what kind of site are you running here?
14:03 < mscdex> poor dan
14:03 < amurdaca> lol
14:04 < amurdaca> everyone has a price in this world!
14:04 <@isaacbw> what's your question rdpanek 
14:04 < rdpanek> but the method would return  users/dan?sort=price
14:04 <@isaacbw> the method would return?
14:05 < rdpanek> req.originalUrl
14:05 < DarkArgon> you mean u don't get the name parameter?
14:05 < rdpanek> yes
14:05 <@isaacbw> is this express?
14:05 < rdpanek> yes
14:06 <@isaacbw> what are you doing with originalUrl
14:06 < rdpanek> parsing
14:07 < DarkArgon> u knew that the parameters are in req.params?
14:07 <@isaacbw> you need \&
14:07 <@isaacbw> & has special meaning in bash
14:07 < rdpanek> req.params returns only [ '/users/dan' ]
14:08 < DarkArgon> right sry
14:09 < rdpanek> in building node.js REST API
14:09 < jvanveen> hi
14:09 <@isaacbw> I just answered your question bud
14:09 < DarkArgon> its in req.query
14:10 < jvanveen> im trying to terminate a scheduled task by passing a task id like http://paste.kde.org/671438/
14:10 < jvanveen> somehow, this in removeTask(this) is not the function in which this is contained though
14:11 < jvanveen> line 16, 51 and 59. any idea what im doing wrong?
14:11 <@isaacbw> that's not what this means
14:13 < rdpanek> I do not see how it solves my problem
14:13 <@isaacbw> well, when you decide you want the problem solved, go back and read what I wrote
14:14 < DarkArgon> rdpanek, <isaacbw> you need \&
14:14 < DarkArgon> <isaacbw> & has special meaning in bash
14:14 < ciree> It is a bad idea to use redis to store everything? like my models and what not?
14:15 < ciree> userrs and passwords?
14:15 < _ior> don't store plaintext passwords
14:15 < ciree> well right
14:15 <@isaacbw> ciree, everything will have to fit in memory
14:15 < ciree> but aside from that, is it viable to use it for my entire site?
14:15 < rdpanek> I see, thanks
14:15 <@isaacbw> and everything has to be a key-value lookup which can be limiting
14:15 < jvanveen> isaacbw: is it possible to pass this as a reference to the containing function?
14:16 < Sorella> ciree, that depends on your website. It might also be possible, but not ideal.
14:16 <@isaacbw> jvanveen, I'm not sure what you mean
14:16 < DarkArgon> and don't parse by yourself if you use the bodyParser rdpanek 
14:16 < _ior> ciree, i think people do, but i'm more of an rdbms type myself
14:16 <@isaacbw> I don't know the scheduler thing you're using
14:16 < Sorella> ciree, what kind of data you're handling, what consistency/scalability/query concerns you have, etc.
14:16 < nb-ben> ciree, it's probably not the best approach, but it's fine
14:17 < jvanveen> hm, i probably should read up on closures again :)
14:17 < ciree> Thanks guys
14:17 <@isaacbw> jvanveen, I really doubt the API is asking you to pass a function to remove it from the scheduler
14:18 < rdpanek> DarkArgon: express.bodyParser()? I do not understand what you mean
14:18 < jvanveen> isaacbw: well im trying to make it so that the intervalled function can kill itself from the setInterval
14:19 <@isaacbw> oh, you're designing this scheduler?
14:19 < nb-ben> jvanveen, var interval = setInterval(x, function() { clearInterval(interval); }); should work
14:19 < DarkArgon> if you use the bodyParser just do a console.log(req.query)
14:19 < niggler> hey Nexxy
14:19 < jvanveen> nb-ben: yea something like that
14:20 <@isaacbw> jvanveen?
14:20 < niggler> for some reason I've been having problems connecting to freenode :/  Then I saw that I was connecting to moorcock and was convinced that someone was trolling
14:20 < niggler> it turns out Nexxy that it's a real thing
14:20 < jvanveen> isaacbw: yea indeed
14:20 <@Nexxy> an author?
14:21 <@isaacbw> jvanveen, you could pass a removal function as an argument to the task function, e.g.: 
14:21 < niggler> i thought that moorcock.freenode.net was a joke
14:21 < jvanveen> im trying to make a websocket push thingy that will execute only when there are clients on a certain url
14:21 <@isaacbw> http://hastebin.com/dapunepopa.js
14:22 <@isaacbw> I actually really like that pattern
14:22 < niggler> it may also be a mac setting -- can't tell which
14:22 < nb-ben> jvanveen, understanding the way scoping works in JavaScript is really important, it's also important for managing garbage collection (memory management)
14:22 < jvanveen> isaacbw: thanks, ill try to use it in my code
14:23 < niggler> oh, and HAPPY VDAY!
14:23 < jvanveen> nb-ben: yea, learning while coding :)
14:23 <@Nexxy> lol
14:23 < niggler> i guess 'fuck people' would be appropriate today
14:23 < nb-ben> should call it the girlfriend/wife day
14:24 <@Nexxy> nb-ben, because everyone has a girlfriend or a wife
14:24 < jvanveen> isaacbw: removeFunc can be used in setRepeatingTask?
14:24 <@isaacbw> jvanveen, if you make it work that way
14:24 < nb-ben> Nexxy, this holiday is irrelevant to people who don't
14:24 < nb-ben> unless I guess u do it within the family
14:24 <@Nexxy> nb-ben, my point is that some people have boyfriends or husbands :P
14:24 <@isaacbw> :P
14:25 <@Nexxy> I miss those valentine's kits
14:25 < jvanveen> hm, ill give it a shot. thanks
14:25 <@isaacbw> jvanveen, it will take a good grasp of closures
14:25 < nb-ben> well I suppose there's normally the more feminine guy in those relationships
14:26 <@Nexxy> O_o
14:26 <@isaacbw> I think she means that not everyone here is a man
14:26 <@Nexxy> no not at all lol
14:26 <@isaacbw> and there is not always a 'woman' in male gay relationships
14:26 <@isaacbw> lol
14:26 <@Nexxy> mostly this
14:26 < nb-ben> well then this is their holiday which is what I am saying
14:26 <@Nexxy> https://twitter.com/nexxylove/status/302050169908781057
14:26 < nb-ben> most men don't like this holiday :D
14:26 <@Nexxy> you're really spewing stereotypes today :D
14:27 < niggler> prototypical man
14:27 <@isaacbw> nice
14:27 <@isaacbw> nb-ben, you just gave me a good chuckly
14:27 <@isaacbw> *chuckle
14:27 < nb-ben> Nexxy, are you denying stereotypes?
14:27 <@isaacbw> dude stop lol
14:27 < amurdaca> why a new mongo db collection takes 200mb defaultly??!?!?!
14:27 <@Nexxy> this is niether the time nor the place for this discussion
14:27 <@isaacbw> you're trying to correct yourself and it's not working
14:28 <@isaacbw> amurdaca, that does seem like a lot
14:28 < amurdaca> it's in my case
14:28 < amurdaca> i just enabled sessions
14:28 <@isaacbw> man, I'm sad
14:28 < amurdaca> and even 1 row session
14:28 < amurdaca> takes 200mb
14:28 <@isaacbw> I kept trying to justify cassandra or even mongo, but an rmdb is the way to go for this project :(
14:28 < amurdaca> then if i add others it still remains 200mb
14:28 <@Nexxy> isaacbw, riak!
14:29 <@Nexxy> you can pretend it has relations w/ link walking
14:29 <@isaacbw> :O
14:29 <@isaacbw> transactions?
14:29 <@Nexxy> http://docs.basho.com/riak/latest/tutorials/fast-track/Links-and-Link-Walking/
14:29 <@Nexxy> idk about transactions
14:29 < niggler> what's the preferred idiom for structuring scripts that run both in node and in the browser?
14:30 <@Nexxy> but you can specify write durability and stuff
14:30 <@isaacbw> I'll take a look
14:30 <@Nexxy> niggler, browserify them :D
14:30 <@isaacbw> thanks!
14:30 <@Nexxy> isaacbw, yeah
14:30 <@Nexxy> basho is pretty helpful too
14:30 < niggler> browserify can't handle dynamic modules (require(x) where x is a variable)
14:31 <@Nexxy> then don't do that :P
14:31 <@isaacbw> amurdaca, have you tried #mongodb?
14:32 < jvanveen> niggler: use an automated script build step?
14:32 < jvanveen> can be done for both requirejs and browserify i support
14:32 < eephillip> anyone know if @tootallnate from learnboost stops in here from time to time?
14:32 < jvanveen> suppose
14:32 <@Nexxy> eephillip, yes
14:32 < jvanveen> requirejs has an optimize thing that works fine from within node
14:32 < niggler> so the problem I have is that I want to support loading modules based on a variable name
14:32 < rmb> hye, how do i run nodejs app on port 8080 to apache web  on port 80?
14:33 <@Nexxy> eephillip, he was last here 12 hours ago
14:33 < niggler> so id like to say "load foo" and have it require foo.js and do some stuff
14:33 < niggler> in the browser, you can do this with an XHR and in node you can just say require(x) (where x is the variable name)
14:33 < jvanveen> niggler: i made something like that in this project, https://github.com/l3mon/l3mon/blob/master/browser/lib/loader.js
14:33 < jvanveen> not sure if thats what you mean 
14:33 < niggler> im asking about the browserify side of it
14:33 < niggler> if th
14:34 < jvanveen> ah ok
14:34 < niggler> *if i were to use browserify, it would grind to a halt at the dynamic load points
14:34 < niggler> I currently do it by implementing a "require" that uses XHR, but im not happy with that
14:35 < jvanveen> try requirejs? browserify doesnt use amd right?
14:35 < eephillip> Nexxy: cool thanks was hoping I could ask a q? about his post about cross compiling node for arm http://n8.io/cross-compiling-nodejs-v0.8/
14:35 <@Nexxy> eephillip, I bet you could :D
14:35 <@Nexxy> I've done the same
14:36 < niggler> jvanveen browserify uses the node style
14:36 < jvanveen> niggler: yea 
14:37 <@isaacbw> amurdaca, have you figured it out?
14:37 <@isaacbw> and how are you measuring it?
14:38 < jvanveen> hm, if i pass in a function like: function(foo){} , would it be possible to get the function name of foo, if it has a function name defined?
14:38 < jrajav> It doesn't have a function name defined.
14:38 < jrajav> It's an anonymous function
14:39 < jrajav> That's why it's a good idea to go out of your way to name all of the function literals you define
14:39 < jrajav> It doesn't hurt anything but it adds the value of seeing that function name in the call stack, and being able to refer to it inside itself without using 'arguments' kludges
14:39 < jvanveen> if foo = function mynameis(){} , then mynameis cant be retrieved?
14:40 < mynameis> Hai.
14:40 < jvanveen> haha
14:40 < mynameis> :)
14:40 < jrajav> jvanveen: foo.name
14:40 < jvanveen> jrajav: ah that works. great!
14:48 < Vill> Hello fellows! Is here anyone active, who is experienced with Socket.IO ? If I use Express and Socked, do I need to Listen in two different instances: var io = io.listen(server); (For Socket) and  server.listen(); (For Express) ?
14:48 <@isaacbw> the website has an example
14:48 < amurdaca> DarkArgon
14:48 <@isaacbw> but no, they share an http server
14:48 <@isaacbw> instance
14:49 < Vill> So Which one I should use? Socket?
14:49 <@isaacbw> erm, what?
14:49 <@isaacbw> (and people say socket.io)
14:49 < eephillip> and it matters which version of express you use too v2 v3 as how you bind them together
14:50 < Vill> exports.version = '3.1.0';
14:52 < eephillip> Vill: https://github.com/LearnBoost/socket.io
14:52 < Vill> Oh, I feel like I found the answer
14:53 < Vill> Express 3 requires that you instantiate a `http.Server` to attach socket.io to first:
14:55 < Vill> cheer, cya later
14:59 < jvanveen> this seems to work as expected, http://paste.kde.org/671456/
14:59 < jvanveen> bit hackish though :)
15:15 -!- mode/#Node.js [+o isaacbw] by ChanServ
15:16 < bradleymeck> rwaldron: do you know of any vps or IaaS that have arm?
15:16 < bradleymeck> not too keen on running my tablet as a build bot
15:16 <@isaacbw> how would that work, an iaas on arm
15:17 < bradleymeck> isaacbw: most linux work fine on arm, and even if it was something like android would be nice
15:19 < nathan7> bradleymeck: doesn't qemu have some magic to run an executable as another arch?
15:19 < nathan7> bradleymeck: so you can have like an ARM chroot
15:19 < bradleymeck> nathan7: im often upset at qemu on cloud servers, could do it with dedicated i guess
15:20 < shwaiil> hi
15:20 <@isaacbw> bradgignac, it just doesn't make sense to me what you're asking
15:20 <@isaacbw> you want a cloud server on an arm processor?
15:20 <@isaacbw> oh, my brain wasn't working right
15:21 < shwaiil> I'm going through my first steps with node and while reading, I was thinking about my next steps. Finding a MVC framework etc. I already had a look into expressJs. thinking about the MVC, I just wonder to my self. can't a Router be used as a Controller (as in MVC) ? Tks for looking!
15:21 < bradleymeck> shwaiil: take a look at Geddy
15:22 <@isaacbw> er, *bradleymeck
15:22 < bradleymeck> isaacbw: yes I want an ARM based cloud server to run builds for actual arm tablets
15:22 < shwaiil> bradleymeck: tks for looking! I found compoundJs, towerJs and Express, this last one is not MVC right ? !
15:23 <@isaacbw> bradleymeck, and why can't you just cross-compile
15:23 < bradleymeck> MVC is a bad acronym. It can be, it is not forcibly
15:24 < bradleymeck> isaacbw: could, don't like to. cross compiling is rather anger inducing when I do it manually and use libs.
15:24 < shwaiil> bradleymeck: wow, Geddy looks nice!
15:28 < therealkoopa> I was reading issaac 's post on this thread https://groups.google.com/forum/?fromgroups=#!topic/nodejs/yP6Ikm14tgY ... If you put the private modules in node_modules and bundled dependencies, will their be checked into git, too?
15:29 < AAA_awright> therealkoopa: Only the stuff that you add to Git gets checked into Git
15:29 < bradleymeck> therealkoopa: if gitignore is not ignoring them, yes
15:29 < bradleymeck> and what AAA_awright said
15:30 < AAA_awright> What are you trying to do?
15:31 < therealkoopa> I wasn't clear. If you check in node_modules/private-a and git ignore its node_modules (node_modules/*/node_modules), when you do a npm install, will it install private-a dependencies?
15:31 <@isaacbw> just put "node_modules" in .gitignore
15:31 < therealkoopa> Basically, I have my main app that depends on a bunch of other stuff, which is all in lib right now. On preinstall I do a npm link lib/* node_modules, but i'm having a helluva time figuring out the best way to do deployments and manage dependencies.
15:32 <@isaacbw> ugh, what
15:33 < AAA_awright> therealkoopa: I'd avoid checking things into your Git tree that aren't actually part of the project. Use Git submodules, preferably
15:33 < AAA_awright> Node.js has a really horrible time understanding what subtrees are, don't follow their lead, heh
15:33 < therealkoopa> I've had a rough time in the past using git submodules. 
15:34 < bradleymeck> build service is coming:http://ubuntu.x64.build-node.bradleymeck.com/ soonish, probably thanks to a generous company. as long as it works locally and just needs building
15:34 < roxlu> What's the recommended way to server static files?
15:34 < bradleymeck> cdn
15:34 < AAA_awright> Nginx
15:35 < therealkoopa> If you have a npm bundledDependency, will npm install its dependencies or is it ignored entirely?
15:36 < AAA_awright> I think it's ignored
15:36 < AAA_awright> That means it's provided by a third party
15:36 < roxlu> AAA_awright: so running nginx next to nodejs? 
15:37 < AAA_awright> roxlu: I have Nginx setup to gateway (load-balance) to Nginx, and serve static files
15:37 < AAA_awright> er, Nginx to gateway to Node.js
15:37 < therealkoopa> Yikes, I don't think isaacs approach on that email thread will work well for me, because each node_modules/private-a, private-b etc, might have a dependency on express (or whatever), and I don't want all of those dependencies in git.
15:37 < bradleymeck> therealkoopa: it is ignored
15:38 < emkei> Hello is there a function in async which could return values like result.categories result.tags but act in parallel?
15:38 < AAA_awright> therealkoopa: If you want to check the dependencies into Git, there's nothing wrong with that, I have https://github.com/Acubed/git-node to help manage upgrading those packages even
15:38 < bradleymeck> emkei: `npm view async`
15:38 < bradleymeck> async.map
15:38 < roxlu> AAA_awright: so you're sending all node.js requests to another port?
15:38 < AAA_awright> therealkoopa: Otherwise just... There has to be some way to pull dependencies of included dependencies
15:38 < therealkoopa> I don't want dependencies in git. I don't agree with that. It turns into a miserable experience if you have binaries. Also, it bloats the history
15:38 < AAA_awright> roxlu: Right
15:39 < roxlu> ok, sounds like a solid solution... 
15:39 < roxlu> though I'vet
15:39 < roxlu> oh.. 
15:39 < roxlu> I've to make this work on Windows (not my choice) 
15:39 < NoiseEee> hi folks, how to i restart node from the command line?
15:39 < AAA_awright> therealkoopa: Git handles binary content just fine, though you shouldn't be checking compiled anything into Git ever. ALso how does it bloat the history?
15:39 < radius314> async is cool for not having matroyshka methods
15:39 < bradleymeck> NoiseEee: kill it and have the monitor restart it
15:40 < NoiseEee> bradleymeck: the monitor?
15:40 < radius314> ps -ax | grep node  .... (find the process id of your application)
15:40 < bradleymeck> w/e is monitorring the node process to keep it alive
15:40 < therealkoopa> All the compiled modules need to be reinstalled on each machine. It's messy
15:40 < bradleymeck> therealkoopa: what os/arch
15:40 < AAA_awright> Well you have to do that no matter what
15:40 < radius314> then... kill -9 [pid] .... (where the PID is the process ID)
15:41 < therealkoopa> I know this. That's why I'm not checking node_modules/foo/node_modules into the repository, because one of the dependencies may be a compiled lib.
15:41 < AAA_awright> Git is for development, not deployment
15:41 < bradleymeck> npm rebuild will rebuild bundled modules
15:41 < therealkoopa> AAA_awright: yes, thank you. 
15:41 < bradleymeck> git deploy is sadness when errors happen
15:41 < NoiseEee> radius314: then what to restart it?
15:42 < Vill> sweet lord, I need some newbie assistance, anyone here with experience of "/connect-mongo" ?
15:42 < therealkoopa> Also, having a 10 private dependencies, each depending on some public npm module requires 10 of the same npm module in the repository
15:42 < therealkoopa> Which is gross
15:42 < AAA_awright> therealkoopa: Well then what do you mean "may be a compiled lib" you shouldn't be depending on any repository with pre-compiled anything
15:42 < AAA_awright> You're looking for a deployment solution
15:42 < bradleymeck> therealkoopa: npm dedup
15:42 < AAA_awright> Which is usually tar.gz
15:44 < bradleymeck> something like : curl -X POST -F 'tarball=@'`npm pack` http://ubuntu.x64.build-node.bradleymeck.com:3000/build | tar -tz # is more robust than git
15:44 < bradleymeck> just get a build server and run w/e
15:45 < therealkoopa> Does jitsu use git or bundle a tar?
15:45 < bradleymeck> therealkoopa: tar, like any sane platform that supports multiple os
15:45 < bradleymeck> therealkoopa: if you read the code it calls `npm pack`
15:46 < therealkoopa> I wasn't aware there was such a strong hate against git deployments.
15:46 < mscdex> eh?
15:46 < mscdex> git deployments ftw!
15:47 < bradleymeck> therealkoopa: it causes issues when it is the dev and production tool, separate em so you dont do accidental things like deploy to production when servers are not properly bootstrapped / code is unstable
15:47 < bradleymeck> also tar.gz works everywhere
15:50 < therealkoopa> mscdex: Do you use git deployments?
15:50 < shwaiil> Q: When running a App, the console is in use by node. Is there a way to keep working in the console while the node app is running ? I'm in my very early steps and just thinking how people do for multiple apps and so on. Tks
15:51 < bradleymeck> shwaiil: look into require('repl') in node core
15:51 < swaj> shwaiil: are you talking about backgrounding your app? like a daemon?
15:51 < bradleymeck> or ^ depending on your wants
15:52 < shwaiil> bradleymeck: tks for looking I'll take a look. swaj yeah! just wondering how people do
15:52 < pachet> shwaiil: see forever, supervisor, etc
15:52 < pachet> shwaiil: or good ole screen
15:53 < shwaiil> should I jump into that or first go through all the basics ?!
15:53 < swaj> shwaiil: there are a lot of methods for backgrounding node apps.  some specific to node packages (forever), and others are distro-provided (see debian's start-stop-daemon)
15:54 < swaj> shwaiil: my preference tends to be using the tools my distro gives me (debian), and writing init scripts to start/stop my node processes.
15:54 < swaj> and using monit to monitor the processes
15:54 < shwaiil> swaj: I use ubuntu, I guess I could also use your method ? I'll take a look on both
15:54 < swaj> yup
15:55 -!- mode/#Node.js [+o TooTallNate] by ChanServ
15:55 < swaj> shwaiil: http://manpages.ubuntu.com/manpages/lucid/man8/start-stop-daemon.8.html
15:55 < swaj> shwaiil: I use that command for daemonizing my node processes.
15:56 <@isaacbw> shwaiil, you mean how do people run multiple applications at the same time?
15:56 < shwaiil> isaacbw: yeah
15:56 <@isaacbw> they open more terminals if on X, or use screen
15:56 <@isaacbw> what system are you on
15:57 <@isaacbw> or use a text windowing manager
15:57 < shwaiil> isaacbw: I'm right now in a macosx using terminal, ssh to a ubuntu server, back home I use ubuntu
15:57 <@isaacbw> ah
15:57 <@isaacbw> use screen
15:57 < pachet> ^
15:57 < shwaiil> isaacbw: I'm in my early steps
15:57 <@isaacbw> http://www.gnu.org/software/screen/
15:57 < swaj> shwaiil: cmd + t will open another terminal tab in mac osx terminal... you could SSH again from that second terminal window too.
15:57 <@isaacbw> it will be a pain to develop like that for a long time though
15:58 < swaj> I prefer tmux to screen, myself :P
15:58 < shwaiil> so node-supervisor is not the same ? I'm taking notes about what u guys are sending, so don't get me wrong if I keep jumping into tips
15:58 < smlgbl> isaacbw: that's the way I do it now, but I didn't think that was the "standard way" of handling it ...
15:58 < nathan7> let the tmux-screen war begin
15:58 < shwaiil> isaacbw: so the best practice is to have multiple consoles open ?
15:58 <@isaacbw> shwaiil, erm
15:58 < swaj> shwaiil: for development.
15:58 <@isaacbw> there's not really best practice with this sort of thing
15:58 <@isaacbw> just do what makes you happy
15:58 < smlgbl> and how do you guys handle that in production?
15:59 <@isaacbw> you aren't developing in production
15:59 < swaj> in production, I use start-stop-daemon with monit. :P
15:59 < swaj> in development, I like to use nodemon
15:59 < swaj> so it'll reload my app when I change files
15:59 < shwaiil> smlgbl: it's a nice question. I wonder if we run a node program.js then we close the console ?! and then when we need to restart it...!? confusing :Z
15:59 < eephillip> TooTallNate: I have Q? about your node arm cross compile post at n8.io have a second
16:00 <@isaacbw> shwaiil, that's what screen is for
16:00 < swaj> do you use screen for production?
16:00 <@isaacbw> er
16:00 <@isaacbw> I wouldn't
16:00 < swaj> yeah
16:00 < swaj> that's kinda what I thought
16:01 < smlgbl> so you have an upstart-script for your node app? Do you have a nice one to share? :D
16:01 < aandy> why not?
16:01 < swaj> smlgbl: I do :P
16:01 <@isaacbw> I guess if you have one dedicated server or something
16:01 < smlgbl> swaj: Sharing is caring!
16:01 < amurdaca> damn monit is fooling my express app -_-
16:01 <@isaacbw> but you're in the cloud, it will just complicate things
16:02 < swaj> aandy: because I'd rather not make my node process dependent on screen.
16:02 <@isaacbw> you want to be able to spawn a new server and have that be that
16:02 < swaj> aandy: what happens if screen dies?
16:02 < amurdaca> everytime it checks my node process it start a new session and my db is flooded -.-
16:02 < smlgbl> Screen will never die! :P
16:02 < aandy> same as happens if the app dies :P
16:02 < aandy> i mean, if you run screen, you probably expect it
16:02 < swaj> aandy: if my app dies, I've got a bug to fix.
16:02 < swaj> aandy: if screen dies, it may not be my app's fault.
16:02 < aandy> and you don't if screen running your app dies?
16:02 < bradleymeck> swaj: bg and jobs dont work?
16:03 < swaj> aandy: in production, I like removing points of failure
16:03 < bradleymeck> those are builtins to shells
16:03 < shwaiil> can't node-supervisor be used for this too ? 
16:03 < swaj> bradleymeck: not once I log out
16:03 <@isaacbw> ugh, 3nf will be the end of me
16:03 < swaj> bradleymeck: if I want to daemonize a process, Ctrl + Z isn't good enough :)
16:03 < bradleymeck> swaj ok, so you want it on a different session entirely
16:04 < shwaiil> I'm trying to put in my mind how to keep the app running without having to keep the console open
16:04 < bradleymeck> yea id just use init.d or w/e 
16:04 <@isaacbw> systemd 4 lyfe
16:04 < swaj> shwaiil: you daemonize it.
16:04 < swaj> shwaiil: with a distro tool or a node package
16:04 < aandy> is monit daemon btw? i've only used forever
16:04 <@isaacbw> if you're just developing over ssh, then screen is the right choice
16:04 <@isaacbw> if you're launching a server application, then daemonize it
16:04 < shwaiil> swaj: I see, so I'll take a look in to your link. that's the best practice then ?
16:04 < aandy> isaacbw: +1
16:04 < swaj> aandy: monit is a daemon that keeps watch over your processes and restarts them if they die.
16:05 < aandy> ok, cool
16:05 < swaj> shwaiil: again, there are 100 ways to daemonize a process.
16:05 < swaj> shwaiil: I just showed you my preferred mechanism
16:05 < shwaiil> swaj: oh ok sorry
16:05 < shwaiil> swaj: can node-supervisor be used for that ?
16:05 <@TooTallNate> eephillip: what's the Q?
16:06 < swaj> shwaiil: I'm not familiar with node-supervisor.  Does it fork the process into the background?
16:06 < swaj> shwaiil: or does it run in your console?
16:06 < shwaiil> swaj: don't know just got that from the suggestion people sent
16:06 < swaj> shwaiil: it'll probably work
16:07 < swaj> shwaiil: you could also use forever, a popular node package for this type of thing:  https://github.com/nodejitsu/forever
16:07 < eephillip> TooTallNate: sorry manager walked in, I wanted to understand the impact of not having the additional files installed by the tool/install.py file of the nodejs make process
16:07 < mscdex> therealkoopa: i do
16:08 <@TooTallNate> eephillip: it's fine, you can run node with just the `node` binary
16:08 <@TooTallNate> eephillip: the other files are mostly just npm
16:08 <@isaacbw> anything from nodejitsu is going to be a safe choice
16:08 < shwaiil> swaj: thanks for your attention : )
16:09 < eephillip> TooTallNate: thats brings me into my next question, is how you would cross compile modules such as serialport for example
16:09 < swaj> shwaiil: https://gist.github.com/peterhost/715255 <-- that uses start-stop-daemon on ubuntu/debian if you wanna check that out.. it's an init script you can use to start processes on boot, etc.
16:09 < swaj> smlgbl: see https://gist.github.com/peterhost/715255 as well
16:10 <@TooTallNate> eephillip: tbh i haven't done that - i just compile native modules on-device
16:10 <@TooTallNate> eephillip: but it should be possible
16:10 <@isaacbw> are xoauth tokens fixed length?
16:10 <@TooTallNate> but just doing `node-gyp rebuild` instead of `./configure && make`
16:11 <@TooTallNate> eephillip: if you're on OS X, node-gyp doesn't support forcing a target platform ATM, so a patch would be required I think
16:11 <@TooTallNate> but if youre on linux you should be alright
16:12 < bradleymeck> TooTallNate: you can cross compiling for arm would be nice :)
16:13 <@TooTallNate> bradleymeck: wat?
16:13 < bradleymeck> --dest-cpu=arm
16:13 < bradleymeck> random
16:13 < eephillip> TooTallNate: hmm not sure I understand the node-gyp rebuild part
16:13 < smlgbl> swaj: Thanks a lot
16:14 <@TooTallNate> eephillip: sorry, do `npm install serialport` instead
16:14 <@TooTallNate> `npm install serialport --arch=arm`
16:15 < shwaiil> Q: My server runs Apache and now I've installed nodeJs. I'm going through my early steps, I did noticed a mention to "proxy" in a article I've rad before, which also points out that apache is not the best for node, but using nginx instead. The article was from 2011 I think, I don't need to learn this by now, but a comment would be nice! thanks for looking1
16:15 < eephillip> TooTallNate: --arch=arm ahhh never seen that before
16:15 < mAritz> shwaiil: what kind of comment?
16:16 < mAritz> yes, if you want to run apache and nodejs on the same port you should probably put a proxy in front of it.
16:16 < AAA_awright> shwaiil: Where was this?
16:16 <@TooTallNate> eephillip: ya node-gyp has a lot of hidden gems that i may or may not ever find time to document :\
16:16 < shwaiil> I think someone else asked the same in stackoverflow, AAA_awright 
16:17 < swaj> smlgbl: np
16:17 < shwaiil> so it's fine to keep using my apache 
16:17 < shwaiil> right '
16:17 < eephillip> TooTallNate: dumb question, so I can run the install command from my host machine targeting arm, or will i need to run the npm install command on my target
16:17 <@TooTallNate> eephillip: do that command on the host machine
16:18 <@TooTallNate> eephillip: then you'll have "serialport" in your ./node_modules dir
16:18 <@TooTallNate> which you can copy over to the device
16:18 < swaj> shwaiil: so, apache's usage really, really, really depends on the MPM you use.
16:18 < swaj> shwaiil: but in general, apache is a fine reverse proxy (which is the easiest way to run multiple node apps on port 80, for example)
16:19 < therealkoopa> If you're using git push for deployments, npm dedup is somewhat pointless, right?
16:19 < shwaiil> MPM, I'll have a read on that, tks swaj 
16:19 < swaj> shwaiil: I personally prefer nginx, because it's generally a lot friendlier to system resources, but a properly tweaked apache can be just as friendly/good.  It's just easier, in my opinion, to arrive at a solid nginx configuration than it is an apache one.
16:19 < eephillip> TooTallNate: thats neat, is it possible to cross compile npm to the arm target as well
16:19 <@TooTallNate> eephillip: npm is just javascript files - it doesn't need any compiling
16:20 <@TooTallNate> eephillip: the easiest way to get it on the device, once you've installed node, it run:
16:20 <@TooTallNate> curl npmjs.org/install.sh | sh
16:20 < swaj> shwaiil: mpm_event is what I'd recommend as the MPM if you want to use apache.
16:20 < swaj> shwaiil: otherwise, go with nginx :)
16:21 < shwaiil> swaj: thank you
16:21 < eephillip> TooTallNate: though that might have been the case, which brings me back to the original question, so when I run the npm install.sh it won't be looking for those additions nodejs make install files
16:21 < swaj> shwaiil: np
16:21 <@TooTallNate> eephillip: nah
16:22 < eephillip> TooTallNate: you rock man, gonna go put it to work thanks for the help
16:22 <@TooTallNate> eephillip: sure no prob. come back if you get suck
16:23 < swaj> shwaiil: note that apache will tell you mpm_event is "experimental", but most real-world users would tell you that it's quite stable :)
16:23 < eephillip> TooTallNate: Will do
16:23 < shwaiil> swaj: ok I've added to my notes to check later when learning that part :)
16:23 < swaj> shwaiil: but if the "experimental" scares you off, then the second best mpm (imo) is mpm_worker
16:25 < swaj> shwaiil: one other note... Nginx freaking rocks, but it does not support HTTP/1.1 to backend proxy processes (which means no chunked encoding), so if that's important to you, apache is the way to go.
16:27 < swaj> shwaiil: or HAproxy :) -- lord there's tons of options
16:30 < paultman> Hello everyone.  I wanted to get a pulse on how people feel about node using CommonJS rather then RequireJS in Node.  I suppose to accepted practice is CommonJS serverside while client code to follow RequireJS?   
16:30 < bradleymeck> paultman: i do browserify
16:30 < creationix> paultman, that's one practice
16:30 < bradleymeck> but tomato tomato
16:30 < creationix> but It's far from decided
16:31 < creationix> on the node side, it's overwhelming commonjs
16:31 < paultman> personally I'd rather follow a single convention, and since RequireJS is better for web, while they are a draw SS, I'd imagine standardizing on RequireJS would be better (assuming you wanted to follow only one)
16:31 < creationix> in the browser, it's different for everyone
16:31 < creationix> paultman, probably easier to to use commonjs in the browser than use requirejs in node
16:31 < creationix> browserify is one way to do this
16:32 < paultman> creationix: requireJS seems to be better for browser since async
16:32 < creationix> (any by requirejs, I assume you mean AMD boilerplate, you can't run requirejs in node)
16:32 < bradleymeck> paultman: grunt watch + grunt-browserify, bundles are much better than async
16:33 < bradleymeck> and browserify will get sourcemaps soonish
16:33 < creationix> paultman, right, anything production needs a asset pipeline anyway
16:33 < creationix> amd is great for toy projects with no server-side component
16:33 < paultman> ok, i'll add browserify to my reading list
16:33 < generalissimo> not exactly a node question, but does anyone know if there's a way in jade to check if any content has been defined for a block?
16:33 < creationix> but I question the use beyond that
16:34 < creationix> generalissimo, if nobody here knows, try the #express channel
16:34 < generalissimo> yeah i'm in there. it looks pretty dead today so i thought i'd have a better shot here.
16:34 < creationix> paultman, personally I don't use browserify and I still am on the fence about what's best
16:35 < creationix> but I do know that you'll hit a lot of walls trying to use async loaders in node
16:35 < paultman> creationix: i was thinking to go with RequireJS on client, or just concat it all to a single compressed js file
16:35 < paultman> at then end of the body
16:36 < creationix> you could write a very simple asset generator without going for all of browersify
16:36 < paultman> *shrugs
16:36 < creationix> I wrote one for component.js libraries
16:36 < creationix> (they are commonjs format)
16:36 < bradleymeck> creationix got a grunt plugin?
16:36 < creationix> haven't used grunt yet
16:36 < creationix> but that works too
16:37 < creationix> bradleymeck, paultman, do either of you want me to look for my component.js builder?
16:37 < creationix> it was connect-style I think
16:37 < paultman> any implementation for commonJS to load assets async?
16:37 < bradleymeck> creationix: nah, just want grunt to rule the front end build scene since people actually use it
16:37 < amurdaca> why the hell mongodb takes 200mb for a 1 row collection?????
16:38 < amurdaca> i'm using ubuntu 12.04 lts
16:38 < creationix> amurdaca, to keep it web scale of course
16:38  * creationix ducks
16:38 < paultman> creationix: sure, i'd like to take a look
16:38 < bradleymeck> amurdaca: revision history being kept?
16:38 < amurdaca> creationix so is it normal?
16:38 < creationix> amurdaca, sorry, I've never used mongo, I shouldn't make fun of it
16:38 < bradleymeck> also check settings for how much it is preallocing
16:38  * shesek is using browserify and quite happy with it
16:38 < amurdaca> it's fine if it's for history and scale
16:39 < amurdaca> just wanted to be sure is normal
16:39 < bradleymeck> paultman: no since that would break commonJS, there are loaders so you don't have to concat, and builders that do concat. but its all sync. builder is going to destroy requirejs for speed, and equal r.js for speed
16:41 < paultman> bradleymeck: interesting...
16:41 < paultman> thanks for the 411
16:41 < creationix> paultman, https://gist.github.com/creationix/3953821
16:42 < creationix> the top file is using it in an architect app, so ignore that part
16:42 < creationix> TJ may have since fixed the builder to rewrite css for you, not sure
16:42 < creationix> (lines 7-21)
16:42 < paultman> bradleymeck: when you sayd builder, u're talking about component-builder?
16:43 < paultman> creationix: k
16:44 < bradleymeck> not necessarily, uglify, yui, google-closure, grunt-contrib-concat, browserify, grunt-browserify, r.js, etc  are all builders, they take your existing files and optimize them into a single one
16:44 < creationix> paultman, now my code doesn't cache or minify or send proper etag and cache headers, you'd want to add that for real productino use
16:44 < paultman> bradleymeck: gotcha, thanks
16:44 < bradleymeck> creationix: its a static asset (hopefully) varnish it :)
16:44 < bradleymeck> or cdn
16:44 < creationix> good point
16:45 < creationix> use my code for development, and statically compile for production use
16:45 < creationix> now I remember why I didn't add any of that caching and minimizing code
16:46 < bradleymeck> wish cdns had webhooks for optimizing files
16:46 < shwaiil> Q: wondering what's the difference between compoundJs, towerJs and something like DerbyJs or Meteor. The last look like the future no ?
16:47 < bradleymeck> they all are trying to perform very hard problems that date back to why I hate ASP WebForms and .innerHTML
16:47 < bradleymeck> if they do it, awesome, but its hard
16:48 < creationix> I must say, the meteor video looks very convincing, but I've never used it in a real project
16:48 < creationix> so it might be harder in real use as is common with most abstractions
16:48 < bradleymeck> creationix: anything that automatically syncs browser state makes race conditions… hairy
17:02 < paultman> Q about learning node.js resources.  Just finished reading Professional Node, are their any other good node book/resources anyone can recommend?  Any uber design docs for Node.js itself broken down by components?   Node code walkthrough?
17:02 < paultman> *there
17:04 < shwaiil> Meteor got a 11M funding, that's a big advantage vs DerbyJs, but Derby looks cooler and with a better license. I'm wondering if Meteor has money to pay for a nasa scientist to improve their framework, who's going to win vs derby :T
17:05 < amurdaca> paultman professional node is really good even for beginners like me?
17:05 < amurdaca> seems it covers the basics too
17:05 < L10n> shwaiil: meteor has same license as derby
17:05 < L10n> it's MIT now
17:05 < paultman> amurdaca: yeah, it's quite good actually.  i've browsed a few others, but was happy with Professional Node 
17:06 < shwaiil> L10n: it's MIT now..with 11M funding.. hum, interesting 
17:07 < L10n> shwaiil: and it's fun, don't forget fun :D
17:09 < bradleymeck> wish i had 11M in funding
17:09 < daekano> heh
17:10 <@isaacbw> investment funding?
17:10 <@isaacbw> how do they expect to earn profit
17:12 < owen1> is it wrong to use console.log and console.error in production?
17:13 < gf3> Yes
17:13 < owen1> gf3: why?
17:13 < gf3> owen1: Because it's bush league, son
17:13 < gf3> owen1: Get a real logger or go home!
17:14 < gf3> owen1: But SRSLY, if you want to take logging seriously use a fully-featured logger that supports different levels, and possibly output to a file
17:14 < gf3> full-featured? fully-featured?
17:14 < gf3> I don't know
17:16 < therealkoopa> If I run `npm link lib/account/ --prefix=node_modules`, I see node_modules/account, which is correct. But I also see node_modules/lib/{every account sibling in lib}
17:16 < owen1> gf3: correct me if i am wrong, but isn't runing "server node.js 1> app.log 2> error.log" will output my console.log and console.error to files?
17:16 < AAA_awright> owen1: There's nothing wrong with console.log
17:16 < AAA_awright> And when you want to turn it off, "console.log=function(){}"
17:16 < owen1> AAA_awright: and console.error
17:17 < AAA_awright> Same for error
17:17 < gf3> owen1: Sure
17:17 < gf3> AAA_awright: That's dumb
17:17 < gf3> Why not use a real logger?
17:17 < AAA_awright> The only problem is that it's not actually an ECMAScript standard, ECMAScript has no concept of "stdout" or "stderr"
17:17 < owen1> AAA_awright: so i find my tests to be very verbose, i can just use this technique!
17:17 < gf3> That supports info/notice/debug/etc…
17:17 < gf3> Maybe even rotation
17:17 < owen1> gf3: what logger would u recommend?
17:18 < AAA_awright> gf3: I don't know, why use a second dependency when you have a real logger built in?
17:18 < owen1> AAA_awright: exactly!
17:18 < gf3> owen1: There are several, anything will do, I bet tj has probably written one (LOL)
17:18 < owen1> the same with testing frameworks and web frameworks. i got node assert and i got http.createServer
17:18 < gf3> AAA_awright: Because it's not a real logger
17:18 < gf3> It's like using printf for "logging"
17:18 < AAA_awright> ... problem?
17:18 < gf3> OK
17:19 < gf3> ಠ_ಠ
17:19 < AAA_awright> The only thing I'd need a logger for is writing to the system log, really
17:19 < AAA_awright> That's a pretty important thing I think
17:24 < roxlu> what module is recommended to manage a mongodb ? 
17:24 < owen1> roxlu: mongodb
17:24 < owen1> the native driver by 10gen
17:25 < roxlu> ok thanks
17:25 <@isaacbw> your choices are the official mongodb module or mongoose, which provides models
17:25 < roxlu> thanks
17:30 < amurdaca> which book should i learn JS the definitive guide or js the good parts?
17:30 < roxlu> owen1: is there any documentation on this? I foudn this https://wiki.10gen.com/display/DOCS/node.JS%3bjsessionid=CDE04B5A6A897B4B901876FD66913365 but there doesn't seem to be a API docs/manual
17:30 < gf3> amurdaca: The Definitive Guide
17:30 < paultman> how about a recommended mongodb GUI admin tool?
17:30 < gf3> amurdaca: JS: The Good Parts is not that great
17:30 < gf3> amurdaca: And it's only like 20 pages
17:30 <@isaacbw> roxlu, https://github.com/mongodb/node-mongodb-native/blob/master/Readme.md
17:30 < gf3> (of opinionated crap)
17:30 < amurdaca> gf3 i started the definitive guide but it's just a reference..
17:31 < roxlu> isaacbw: thanks!
17:31 <@isaacbw> note that while similar, it isn't identical to the mongo shell API
17:31 < groundwater> gf3: i've been looking at capturing logs by module, by intercepting console.log at a very low level
17:31 < gf3> amurdaca: Also this → http://www.amazon.com/Effective-JavaScript-Specific-Software-Development/dp/0321812182/ref=sr_1_1?ie=UTF8&qid=1360862909&sr=8-1&keywords=effective+javascript
17:31 < amurdaca> gf3 20 pages the good parts?!
17:32 < gf3> amurdaca: Honestly, it's not a good read
17:32 < groundwater> gf3: but console.log is pretty deeply wired and it's a total hack
17:32 < gf3> groundwater: Yeah, I don't even know why it's in node
17:32 < gf3> Well I mean, I know why, I'm just not sure why it wasn't removed
17:33 < groundwater> gf3: what would you suggest instead?
17:36 < gf3> groundwater: I'm spoiled, I get to use Ruby's std Logger
17:36 < eephillip> Nodejs Debugging Question, what do you when node just exits, without a stack trace?
17:36 < gf3> groundwater: There seem to be a few decent npm packages
17:37 < gf3> groundwater: This one looks neat, https://npmjs.org/package/bunyan
17:38 <@isaacbw> eephillip, if an error didn't throw, it wouldn't print a stack trace
17:42 < eephillip> isaacbw: my app should never exit though,
17:42 < booyaa_> dudes what the vi/m key to match brackets? i.e. you highlight a bracket press key it finds it's partner?
17:42 <@isaacbw> well, it wasn't a thrown error
17:42 <@isaacbw> you can share your code if you want
17:43 < booyaa_> %
17:43 < booyaa_> -1000 pts
17:45 < amurdaca> how is Javascript Patterns?
17:46 < eephillip> isaacbw: it gets more complicated because i'm messing around with the serialport module targeting arm, code works fine otherwise
17:48 < sshaginyan> Guys is it best practice to initialize javascript variables from the get go?
17:48 < gf3> sshaginyan: If you want, most people do
17:48 < eephillip> isaacbw: I was thinking that maybe I needed to go searching in the sys logs for why the application was killed
17:48 < gf3> sshaginyan: Sometimes it makes sense to not
17:49 <@isaacbw> eephillip, you could do that
17:49 <@isaacbw> or you could not
17:49 < gf3> sshaginyan: It would be weird to declare something, and then on the next line assign it
17:49 < gf3> isaacbw: LOL
17:50 <@isaacbw> cassandra is kind of insane
17:50 <@isaacbw> it's more of an index engine than a database
17:52 < therealkoopa> If I run `npm link lib/account/ --prefix=node_modules`, I see node_modules/account, which is correct. But I also see node_modules/lib/{every account sibling in lib} Any ideas why?
17:53 < therealkoopa> Is it a bug with npm link or am I doing something wrong
17:53 < shal3r> I cannot compile any of nodejs versions - http://pastebin.com/55C4gYvG . Any ideas why
18:01 < icebox> shal3r: workaround - https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager 
18:03 < shal3r> icebox, where do you see workaround in there?
18:03 < icebox> shal3r: in gentoo section
18:05 < shal3r> icebox, that's what i'm already doing
18:09 < icebox> shal3r: maybe because it is 64 bit. v8 only supports ia32 https://groups.google.com/forum/?fromgroups=#!topic/nodejs/U4OX6heTUpA
18:10 < icebox> shal3r: or maybe it is a simple issue in v8
18:10 < icebox> shal3r: I mean in V8EXPORT
18:20 < banisterfiend> hi, how do i install npm?
18:21 < mrvisser> banisterfiend: it should have been installed with node if it was a sufficiently recent version
18:22 < banisterfiend> mrvisser: i installed node by following this guide: http://howtonode.org/how-to-install-nodejs
18:23 < mrvisser> banisterfiend: is node on your path now?
18:23 < banisterfiend> mrvisser: yes, node -v results in: v0.5.11-pre 
18:23 < banisterfiend> but 'npm' results in no command found
18:23 < mrvisser> oh wow, that's super old
18:23 < mrvisser> did you have node installed before you ran through that guide?
18:23 < banisterfiend> no
18:24 < banisterfiend> mrvisser: this:  curl http://npmjs.org/install.sh | sh
18:24 < banisterfiend> results in errors
18:24 < banisterfiend> sh: line 1: syntax error near unexpected token `newline'
18:24 < banisterfiend> sh: line 1: `<html>Moved: <a href="https://npmjs.org/install.sh">https://npmjs.org/install.sh</a>'
18:25 < booyaa_> i can almost smell victory! my not so mini project is almost finished  :D
18:25 < mrvisser> banisterfiend: try this: curl https://npmjs.org/install.sh | sh
18:26 < banisterfiend> mrvisser: seems to be doing better :) how do i upgrade my node version?
18:26 < mrvisser> banisterfiend: I would try and recompile and install with the code from http://github.com/joyent/node
18:26 < banisterfiend> mrvisser: thx btw
18:26 < mrvisser> banisterfiend: np
18:26 < mrvisser> banisterfiend: first check if that installation script works
18:26 < banisterfiend> mrvisser: npm is isntalled
18:27 < mrvisser> it should install node 0.8 or 0.9 or something, which is a later version that comes with npm
18:27 < mrvisser> what does node -v stay?
18:27 < banisterfiend> still 0.5-11pre
18:27 < banisterfiend> 0.5.11-pre
18:28 <@isaacbw> *say
18:29 <@isaacbw> that's pretty old
18:31 < mrvisser> banisterfiend: looks like wherever node was placed, that 0.5 version still has precedence
18:31 < mrvisser> I wish I knew a good way to get rid of the older version :(
18:32 < mrvisser> I typically use --prefix when I run my configure commands so things get placed into their own directory, where they can be deleted if I upgrade
18:32 < banisterfiend> mrvisser: what do you think of ultra-repl ?
18:32 < mrvisser> never heard of it
18:32 < banisterfiend> mrvisser: https://github.com/Benvie/Node.js-Ultra-REPL
18:34 < mrvisser> banisterfiend: looks big. I just typically use Sublime Text 2 for nodejs dev
18:36 < bradleymeck> mrvisser: npm -g list (remove all of those) $PREFIX=`which node`; cd $PREFIX; rm -rf bin/node* bin/npm lib/node lib/node_modules include/node*
18:36 < banisterfiend> mrvisser: are there many ruby devs who do node development?
18:36 < mrvisser> banisterfiend: I don't have the stats, sorry
18:37 < mrvisser> bradleymeck: cool, will keep that in mind, thanks
18:37 < bradleymeck> banisterfiend: many is a very loose term
18:37 < eephillip> TooTallNate: does this complicate our earlier discussion about cross compiling the serialPort Module http://j.mp/15fJgaG http://j.mp/Z0pBaf
18:38 <@TooTallNate> eephillip: complicate how?
18:38 <@TooTallNate> eephillip: i mean no not really… i don't see serialport being built into core any time soon
18:39 < bradleymeck> banisterfiend: if they want websockets, most ruby people use a node proxy to convert them to individual requests for example
18:39 < bradleymeck> cause RoR does not exactly like WS still
18:41 < eephillip> TooTallNate: oh ok, I have a special tool chain I need to use, so i'll need to dig into that module so that I can define the right compiler binary, the same way as was done for node-core
18:42 <@TooTallNate> eephillip: did `npm install serialport --arch=arm` not work?
18:43 < eephillip> TooTallNate: nope don't think so, digging into /serialport/build/Release/serialport.node object is showing Intel 80386 LEF 32 Bit
18:44 <@TooTallNate> eephillip: do you have CC and CXX variables set to your cross-compiler?
18:44 <@TooTallNate> like in the blog article?
18:45 -!- mode/#Node.js [+o isaacbw] by ChanServ
18:45 < MI61> joyent/node: Ben Noordhuis v0.8 * 3e2be6f : doc: clarify child_process.exec() stdio option  It only works for stdin,  - http://git.io/pIccUQ
18:46 < eephillip> TooTallNate:  you know what I didn't, I placed them in a shell script I should do the same for the npm install shouldn't I
18:46 <@TooTallNate> you should indeed
18:46 < eephillip> *headslap
18:48 < owen1> roxlu: what docs are u talking about?
18:52 < therealkoopa> I'm running into a lot of Error: EMFILE, too many open files from NPM when I do a npm link lib/* --prefix=node_modules. I increased ulimit to 2024 and still getting this. Any ideas/
18:55 < SandorKrashna> what does the 1 mean in "npm(1)"
18:55 < bradleymeck> SandorKrashna: `man` page level
18:56 < bradleymeck> or section w/e you want to call it
19:03 < SandorKrashna> I just installed node and the npm command is not working
19:03 < SandorKrashna> npm -v returns command not found
19:03 < gildean> SandorKrashna: how did you install?
19:03 <@TooTallNate> eephillip: let me know if that worked or not
19:04 < SandorKrashna> brew
19:04 < SandorKrashna> node -v says v0.6.18
19:04 < SandorKrashna> npm was just working too
19:04 < SandorKrashna> but i closed my terminal session
19:04 < gildean> 0.6.18?
19:05 < gildean> that's pretty old, like 10months or so
19:05 < tjfontaine> I'm guessing debuntu distro version
19:05 < eephillip> TooTallNate: oh sorry, na it didn't, so I was looking through the modules makefile for somthing
19:05 < SandorKrashna> i should probably reinstall everything
19:05 <@TooTallNate> eephillip: what happens?
19:05 < gildean> tjfontaine: on osx?
19:06 < eephillip> TooTallNate: everything worked, but the file is still compiled using x86, it didn't seem to use my exports
19:06 < SandorKrashna> why is brew installing a really old version of node
19:06 < SandorKrashna> grr
19:06 < tjfontaine> gildean: brew, close enough
19:06 <@TooTallNate> eephillip: install with V=1 for verbose mode
19:06 < tjfontaine> gildean: "distro packaged"
19:06 <@TooTallNate> and that way you can see the commands being run
19:07 < eephillip> TooTallNate: k
19:08 < gildean> tjfontaine: i don't actually know how the homebrew on osx is maintained, i thought it had more like private packages, like ppa'
19:22 < mikolalysenko> My latest "contribution" to npm: https://github.com/mikolalysenko/teapot
19:24 < mikolalysenko> to go along with: https://github.com/mikolalysenko/bunny
19:54 -!- mode/#Node.js [+o isaacbw] by ChanServ
19:58 < tjmehta> anyone know how I do the equivalent of rm foo* using the node fs api
19:58 < tjmehta> "rm foo*"
19:58 -!- mode/#Node.js [+o isaacbw] by ChanServ
19:59 < bradleymeck> tjmehta: look at node-glob
20:01 < tjmehta> bradleymeck, very nice thank you
20:01 < dshap> hey all - does anyone here have an intimate knowledge of how npm / package installation works?  i'm trying to upgrade node-canvas and running into this issue:  http://d.pr/i/6GYn 
20:02 <@isaacbw> you need to install font-config
20:02 <@isaacbw> *fontconfig
20:02 <@isaacbw> it's a dependency
20:02 < dshap> isaacbw: doesn't this mean i already have it?  http://d.pr/i/Aykv
20:03 < DarkArgon> best practice to validate user input?
20:03 < bradleymeck> always in any language on any thing
20:03 <@isaacbw> dshap, and if you run the same command with sudo?
20:03 < dshap> isaacbw: ahh, if i run it with sudo, it is not found
20:03 < r00723r0> DarkArgon: no matter whether you do client-side validation or not, always do server-side validation.
20:03 < dshap> isaacbw: http://d.pr/i/zZoY
20:03 <@isaacbw> dshap, it's something with how you installed
20:04 < DarkArgon> obvious
20:04 < dshap> isaacbw: how i installed what?
20:04 <@isaacbw> fontconfig
20:04 < DarkArgon> i thought maybe there is some famous validation lib
20:05 <@isaacbw> it's very application dependent
20:06 < bradleymeck> DarkArgon: use json schema, lots of libs, works on both
20:07 < dshap> isaacbw: thank you very much.  if i do "npm install" it works
20:07 < DarkArgon> https://github.com/chriso/node-validator looks cool
20:08 <@isaacbw> np
20:09 < DarkArgon> bradleymeck, should i really expose my structure to the client?
20:09 < bradleymeck> only the validation as long as the validation is not private
20:10 < bradleymeck> exposing business logic is questionable
20:10 < bradleymeck> exposing interfaces that are shared is fine
20:11 < DarkArgon> ok i'm using mongoose's middleware for validation. any good client lib for that?
20:17 < zomg> I wonder who it was that recommended using angular..
20:17 <@isaacbw> angular is the shiznit
20:17 < zomg> So I'm just trying it out here - instantly run into a wall when attempting to show different contents for rows in a loop depending on the type of the row...
20:17 < zomg> :P
20:17 <@isaacbw> just use ng-show
20:19 < zomg> isaacbw: seems kind of meh to render the whole dom for the options that aren't even being shown :\
20:19 <@isaacbw> that's the angular way
20:20 <@isaacbw> well, how may different options are there?
20:20 < zomg> I was trying to use an ng-switch and then ng-switch-when
20:20 < zomg> which apparently would get rid of the other options
20:20 < zomg> but that's just causing an error for "no controller" whatever that means
20:20 <@isaacbw> mm
20:20 <@isaacbw> yea that could work
20:20 <@isaacbw> you need a controller probably
20:20 <@isaacbw> I've never used ngSwitch
20:21 <@isaacbw> make an empty controller for your app and see if it works
20:21 < zomg> Nah
20:21 <@isaacbw> and get over to #angularjs
20:21 < zomg> Maybe I'll just use backbone :p
20:21 <@isaacbw> :/
20:22 < zomg> it seems to be caused by the ng-repeat
20:22 < therealkoopa> What's the best way to get npm to install the dependencies for a bundledDependency? I see there's an issue for it, so it will come sometime. It also seems like a lot of people use a make file to loop through ecah bundledDependency and run npm install on it.
20:24 < context> mah code run too fast. where the sleep() function?
20:24 < groundwater> context: setTimeout?
20:24 < cjb> context: setTimeout() with a callback.
20:24 < context> no i just want to sleep sleep halt everything
20:24 < jocafa> if i catch you blocking and doing nothing at all, i'm gonna punch you
20:24 < context> :p im jk
20:25 < context> jocafa: hahaha
20:25 < jocafa> :)
20:29 < swaj> I'm looking over the crypto module in node.js, and I've noticed that crypto.pbkdf2 doesn't specify whether the password and salt values should be Buffers or strings.  Does anyone know for sure?
20:31 < nathan7> swaj: Err, the crypto module is.. a tad.. special
20:32 < swaj> and I'm assuming the derivedKey that it returns in the callback is a Buffer, right?
20:32 < nathan7> The simple answer is 'try it'
20:32 < nathan7> crypto is still sort of in the days before Buffers
20:32 < context> swaj: play with it and see?
20:32 < gildean> swaj: strings iirc
20:33 < swaj> I was checking the source and it looks like the struct indicates strings
20:34 < swaj> it's fine.. I'll just base64-encode the randomBytes()-generated salt
20:34 < swaj> and see what happens :P
20:35 < swaj> maybe I'll contribute some documentaion updates once I figure it out 
20:35 < bradleymeck> wish http had a decent way to respond with multiple files...
20:35 < swaj> zip files first?
20:35 < swaj> then send zip?
20:35 < gildean> swaj: seems to work fine with strings
20:38 < s3shs> Anybody know how to get the webkit debugger to stop on 'throw' when debugging node.js?
20:38 < s3shs> I don't see an option for this.
20:38 < swaj> haha, looks like it returns derivedKey as a buffer... my repl wigged out :)
20:39 < swaj> when I did a console.log(key);
20:42 < rickibalboa> Any assistance on getting these errors: "RangeError: Maximum call stack size exceeded" no stack trace at all? No idea whats causing it at all, occasionally happens on start up.. Doing my head in
20:42 <@isaacbw> does anyone know if node-cassandra-client supports cql3?
20:43 <@isaacbw> rickibalboa, you probably have runaway recursion
20:44 < rickibalboa> Which means? It's odd, it only occurs on startup in like 1 in 5 times. Websocket application, doing quite a bit of work on startup for a wee while then starts listening. So it could be in that block of processing before listening..
20:44 < swaj> oh wow it's not a buffer in the derivedKey
20:44 < swaj> it's a really odd-ball encoded string.... hmmm
20:45 < swaj> binary encoded string... so I need to create a buffer and then convert to base64
20:46 < swaj> and the keylen is bytes... not bits.
20:47 < swaj> if I new C++ I'd clean this up.  The crypto library needs some love.
20:49 < tjfontaine> swaj: I know it's been discussed, but it's not happening before .12
20:50 < nathan7> isaacs: What does crypto look like in 0.9?
20:50 < nathan7> oh
20:50 < swaj> yeah
20:50 < swaj> it's a little kludgy since it doesn't really know about Buffers.
20:50 < swaj> but workable.
20:51 <@isaacs> nathan7: about the same, but there's a streaming interface, and it uses by buffers by default instead of 'binary'
20:52 < tjfontaine> isaacs: but there were plans for further tweaking, right?
20:52 <@isaacs> tjfontaine: well, it'd be nice if there was a way to do the crypto stuff async, but i don't know if we can change that as easily.
20:52 <@isaacs> tjfontaine: that's a bigger change to its behavior.
20:52 < tjfontaine> indeed
20:53 < SandorKrashna> what's the easiest way to get socket.io working with express?
20:53 < bradleymeck> putting postmessage isolates without require in~ (one day)
20:54 < kmczn> SandorKrashna: there's an example with express at http://socket.io/#how-to-use
20:54 < nathan7> isaacs: That's pretty much the important shit
20:55 < swaj> isaacs: pbkdf2 changing to use buffers in 0.9?  the api docs don't seem to indicate either way.  still "binary" I suppose?
20:55 < nathan7> isaacs: Yeah, my main issue with it is the binary strings
20:55 < nathan7> isaacs: Beyond that it's a case of "spawn a worker" to me
20:56 <@isaacs> swaj: no, it uses buffers now
20:56 < swaj> isaacs: in 0.8?  that's not what I'm seeing.  derivedKey is a binary-encoded string
20:56 <@isaacs> swaj: since there was no way to set the encoding on that API, it kinda sucks.
20:56 <@isaacs> swaj: when i say "now" i mean "the node that is not yet released"
20:56 <@isaacs> swaj: downside of living in the git repo :)
20:56 < swaj> oh sweet
20:57 <@isaacs> now = node master
20:57 < swaj> so 0.9 derived key is a buffer.
20:57 <@isaacs> yes
20:57 < swaj> nice :)
20:57 <@isaacs> in your function, do something like:  if (typeof derivedKey === 'string') derivedKey = new Buffer(derivedKey, 'binary')
20:59 < swaj> isaacs: yeah, was just writing that now, lol
21:00 < swaj> isaacs: are the arguments changing in type?  right now it looks like password and salt are both supposed to be strings.  Will either of them be changing to buffers?
21:02 <@isaacs> swaj: check the docs on 0.9, don't recall offhand
21:02 < swaj> isaacs: yeah they're both 1-sentence blurbs :P
21:02 < swaj> I'm willing to improve those docs
21:03 < ajna> Hello everybody. What library do you recommend for standards compliant XML DOM manipulation?
21:03 < swaj> a big fat regex :) */ducks*
21:03 < ajna> lol
21:05 < bradleymeck> ajna: DOM or XML which do you want
21:06 < ajna> DOM out of a XML document.
21:06 < bradleymeck> jsdom i mean will get you a long ways if its dom
21:06 < nathan7> bradleymeck: a DOM is a pretty XML thing
21:06 < bradleymeck> nathan7: yes but ive seen non-XML DOMs for embedded stuff
21:07 < owen1> why is 'cd /tmp' errors on me?! var command = spawn('cd', ['/tmp']);  => stderr: execvp(): No such file or directory
21:07 < ajna> I have seen much more... not-xml HTML
21:07 < AAA_awright> DOM is after all only a data model, you don't need XML at all
21:07 < jschall> I am trying to call a python script that authenticates an email and password provided in POST data, do i need to do any sanitization on child_process.spawn args?
21:07 < fwg> owen1: cd is a built-in of your console
21:07 < AAA_awright> I'm waiting for web browsers to support EXI encoding of DOM
21:08 < owen1> fwg: what?
21:08 < ajna> however, I prefer XML DOM... I will only support XML.
21:08 < AAA_awright> Instead of this HTML nonsense that everyone wants to persue
21:08 < bradleymeck> owen1: is PATH wrong n your process?
21:08 < nathan7> XHTML is dead, ajna.
21:08 < nathan7> There is no cd executable, bradleymeck 
21:08 < AAA_awright> nathan7: XHTML is alive and well thank you very much
21:08 < context> owen1: what happens if you manually do it in a terminal
21:08 < owen1> bradleymeck: btw,it only errors on centos. on mac it's ok
21:08 < nathan7> AAA_awright: it's deprecated
21:08 < owen1> context: ^^
21:08 < fwg> owen1: it is not actually an executable
21:08 < bradleymeck> nathan7: `which cd`
21:08 < AAA_awright> Last I checked it's a fast-tracked standard
21:08 < context> owen1: does /tmp exist .... ?
21:08 < owen1> context: works fine in the terminal
21:09 < owen1> context: yes. /tmp exist
21:09 < nathan7> bradleymeck: That gives me a shell function
21:09 < bradleymeck> its a PATH issue
21:09 < nathan7> If cd were an executable, what would it do?
21:09 < nathan7> chdir() and exit()?
21:09 < bradleymeck>  /usr/bin/cd
21:09 < swaj> no it's not an executable
21:09 < swaj> "cd" is a shell function
21:09 < owen1> swaj: interesting
21:09 < nathan7>  ~ ⮀ ls /usr/bin/cd
21:09 < nathan7> zsh: correct '/usr/bin/cd' to '/usr/bin/cc' [nyae]? n
21:09 < nathan7> ls: cannot access /usr/bin/cd: No such file or directory
21:09 < owen1> let me try which cd
21:09 < AAA_awright> nathan7: http://www.w3.org/TR/html-polyglot/ You're welcome
21:09 < fwg> man cd 1
21:10 < fwg> -1
21:10 < owen1> which cd => which: no cd in (/home/t/bin:/usr/kerberos/bin:/usr/local/bin:/bin:/usr/bin)
21:11 < context> just stop
21:11 < swaj> take a look at http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options -- the options object takes a "cwd" parameter
21:11 < context> spawn(whatever, {cwd: "/tmp"})
21:11 < swaj> to set your working directory
21:11 < cjb> nathan: cd has to be a shell builtin 'cause child processes can't affect their parent's environment
21:11 < ajna> AAA_awright ...you have given all the links faster than me!
21:11 < nathan7> cjb: I know.
21:11 < nathan7> Well, you could..
21:11 < nathan7> And everyone would hate you for it
21:12 < context> whats the point of spawning a cd command
21:12 < AAA_awright> ajna: Or just the one
21:12 < context> just for it to do... nothing
21:12 < ajna> yes one...
21:12 < owen1> is it better to use exec instead of spawn?
21:12 < fwg> ...
21:12 < owen1> context: ^
21:12 < ajna> owen1, the differences are explained in the manual
21:12 < cjb> "Why does cd have to be a shell builtin instead of an executable?" is one of those high entropy Unix interview questions :-)
21:12 < owen1> cjb: what is the answer?
21:13 < cjb> owen1: the one I just gave
21:13 < owen1> cd has to be a shell builtin 'cause child processes can't affect their parent's environment 
21:13 < cjb> correct
21:13 < context> never thought about that
21:13 < bradleymeck> check your PATH
21:13 < bradleymeck> there are builtins, that is not the error he sees
21:13 < bradleymeck> idc if its a builtin to some shells, thats a path error
21:14 < swaj> owen1: short version, spawn is for spawning new processes that you can interact with.  exec is just a really simplified version that simply executes a command in your shell and buffers the output to you.
21:15 < context> bradleymeck: wraong. my ubuntu box has no cd 'command'
21:15 < ajna> And so what is the recommended library for XML DOM?
21:15 < context> spawn() isnt running a shell and then your command
21:15 < tjfontaine> cd is usually a builtin
21:15 < owen1> swaj: so if i don't care about the output WHILE the process is running, and i only care about the end result, i should use exec, right?
21:15 < AviMarcus> An error from mysql... it's an object but what's the key for the [Error portion? { [Error: ER_DUP_ENTRY: Duplicate entry '9605a9db-acb7-488c-9fdf-9532ce149e16-2013-01-13:02-vlnp1' for key 'account_date_machine'] code: 'ER_DUP_ENTRY', index: 0 }
21:16 < swaj> owen1: do you want to execute the process within a shell?
21:16 < bradleymeck> context: it is not always a builtin jump onto solaris or a mac
21:16 < context> bradleymeck: yes. but it still has zero affect.
21:16 < bradleymeck> and rm `which cd`
21:16 < context> zephyr:~:% /usr/bin/cd /tmp
21:16 < context> zephyr:~:% 
21:16 < owen1> swaj: i want to run cd /tmp/foo, git pull and 'random command'
21:16 < owen1> so it's 3 seperate commands
21:17 < context> owen1: use the cwd option like we stated 5 minutes ago
21:17 < owen1> context: sure.
21:17 < swaj> so you probably want to use exec, since it will execute within a shell and buffer you the output.
21:17 < s3shs> Anybody know how to get the debugger to stop on 'throw'?
21:18 < owen1> swaj: unless i care about the progress of some of those commands, so i should run it with spawn instead of exec.
21:18 < swaj> owen1:  debatable.  they both get output... spawn just does it through attaching to stderr/stdout and doesn't execute within a shell.
21:18 < owen1> i can do git pull with exec and than random command with spawn, for example.
21:19 < owen1> swaj: i appologize. what does it mean 'doesn't execute within a shell'
21:19 < swaj> you can do the same stuff with spawn that you could with exec
21:19 < owen1> i am sorry if it's trivial question.
21:19 < swaj> owen1: meaning exec will start up /bin/sh, then pipe whatever command you give it to that /bin/sh process, and then buffer any output generated to you.
21:19 < owen1> i thought the main different is whether i want to see progress or not
21:20 < swaj> owen1: essentially equivalent to you logging into your box, executing the command, and looking at the output.
21:20 < swaj> owen1: spawn will just start the process directly
21:20 < swaj> owen1: without using a shell at all
21:20 < jschall> i'm new to node. say i have to hash a password (takes ~350ms.) I want to spawn a child process to do that, right? do i have to sanitize the arguments to exec?
21:20 < jschall> and do i want exec or execfile?
21:20 < owen1> i'll have to copy your answer, sit and think about all that. thanks a lot
21:20 < amurdaca> the book professional node is amazing btw i'm learning many stuff
21:20 < swaj> lol ok
21:21 < context> jschall: why spawn a child?
21:21 < owen1> amurdaca: thanks for sharing. i'll look into that.
21:21 < swaj> jschall: node has crypto-stuff built in, why not just use that to hash your password?
21:21 < amurdaca> and unlike the title i'm a noob at node but it explains everything perfect :)
21:21 < context> jschall: and 350ms to hash a password? wtf kind of hash are you using
21:21 < jschall> context: a secure one
21:21  * amurdaca is not the author of professional node ofc
21:21 < context> or 2x decade old hardware
21:22 < amurdaca> lol
21:22 < jschall> context: i hope you're not hashing passwords with sha or md5
21:22 < jschall> context: because you're doing it wrong
21:22 < context> ...
21:22 < ajna> you need some sugar
21:22 < context> just use blowfish and be done
21:23 < jschall> context: i'm using bcrypt, which uses blowfish
21:23 < jschall> context: i believe
21:23 < swaj> jschall: there's a bcrypt package
21:23 < swaj> jschall: why spawn a child?
21:24 < swaj> jschall: or you could use the built-in pbkdf2 which I prefer :)
21:24 < eighty4> any suggestions on client side template languages for javascript? With express as backend.
21:24 < swaj> eighty4: I <3 dust personally.
21:24 < swaj> eighty4: http://akdubya.github.com/dustjs/
21:24 < jschall> swaj: do they block while the hashing algorithm is being run?
21:24 < asdf12> jschall: the bcrypt package supports async
21:25 < jschall> asdf12: thanks
21:25 < context> pbkdf2 is async as well
21:25 < eighty4> swaj: looks like mustache.
21:25 < jschall> asdf12: so it must spawn another thread or something? i'm really not very familiar with node.
21:25 < swaj> jschall: no.  node's built-in pbkdf2 and random byte generator are both async.
21:25 < swaj> eighty4: it is, but it's a bit beefier.
21:25 < eighty4> swaj: I'll try it. Thanks for the suggestion!
21:25 < swaj> jschall: and I believe the node bcrypt module is also async
21:25 < AviMarcus> how does it do async? does it yield after each iteration?
21:26 < AviMarcus> oh it offloads it to openssl?
21:26 < swaj> one would imagine so.  I've not dug into the internals of node's source :P
21:26 < asdf12> jschall: yes, pretty sure, it's a native module
21:26 < swaj> that crypto lib is in C++
21:26 < swaj> for node
21:26 < AviMarcus> ah I see.
21:27 < jschall> well, i guess its irrelevant, because what i should really be doing is writing an authentication server that runs in a separate node process
21:27 < swaj> even so, why fork a process? :)
21:27 < context> put EVERYTHING in a seperate process
21:27 < swaj> node has great packages to hash strings for you.
21:27 < baudehlo> comments and critiques welcome: http://baudehlo.wordpress.com/2013/02/14/how-an-event-loop-works/
21:27 < jschall> swaj: well, i'd already written python scripts that do authentication. i guess i'll rewrite in node
21:28 < context> sentence 1/3 are redundent
21:31 < amurdaca> what .protorype does in Javascript?
21:31 < amurdaca> override function? or?
21:31 < amurdaca> *prototype
21:31 < jschall> wow, the pbkdf2 function in crypto has shitty documentation
21:32 < jschall> "The callback gets two arguments (err, derivedKey)." what exactly the hell is err?
21:32 < jschall> derivedkey is obviously a string...
21:33 < swaj> jschall: https://gist.github.com/swaj/4956571 <-- a quick hack I did.  haven't tested it yet, but it should be close to what you're looking for.
21:33 < ajna> jschall, by convention, err is always the first argument, not null only if something errful happened
21:34 < jschall> ok
21:34 < amurdaca> err is an Error object
21:37 < brianc> hai
21:37 < brianc> I have a question about the built-in 'cluster' module
21:38 < groundwater> brianc: ask away
21:38 < brianc> so I spawned 2 workers which resulted in 4 node processes
21:38 < brianc> aprox 2 min in, the parent process (the cluster.master) received a disconnect & exit even from one of the workers with worker.sucide = true
21:38 < brianc> i certainly didn't sent anything to a work to make it suicide
21:38 < base698> brianc: what's the code?  
21:39 < brianc> does 'suicide = true' _only_ get set if the worker receives a disconnect message from the master?
21:39 < brianc> i didn't log the code. :(
21:39 < brianc> I'm trying to reproduce but so far have not been able to do so
21:40 < base698> What starts the cluster process,  I'm using cluster in production on 4 servers right now and never seen that.  Here's how I start it
21:40 < brianc> one thing is I'm on windows.
21:40 < brianc> I basically do exactly the cluster example from the node docs
21:40 < brianc> v0.8.19
21:42 < base698> 		if  cluster.isMaster
21:42 < base698> 			# Fork workers.
21:42 < base698> 			winston.info "Workers are listening on #{port}"
21:42 < base698> 			for i in numCpusOrLess
21:42 < base698> 				cluster.fork()
21:42 < base698> 			cluster.on 'exit',(worker)->
21:42 < base698> 				winston.info('worker ' + worker.pid + ' exited')
21:42 < base698>                 else app.listen(port)
21:42 < base698> it's coffee so sorry about that
21:42 < brianc> yeah i do pretty much the same thing
21:42 < brianc> except my worker is in a different script
21:42 < base698> what do the scripts do?
21:42 < brianc> cluster.setupMaster({ exec: __dirname + '/worker.js'});
21:43 < brianc> the worker starts the server, has 0 idea it's running in a cluster
21:43 < brianc> and the master only starts & manages workers, does not have any idea what they're doing
21:43 < jschall> so if i write a server for authentication, i could just spawn 8 of them or whatever using cluster?
21:43 < brianc> does some fancy hot-reloading if you trigger it
21:44 < groundwater> jschall: yes
21:44 < jschall> that's pretty sweet.
21:44 < brianc> jschall: the cluster module it's node's answer to "but node only runs on a single thread!!!!"
21:44 < jschall> yeah
21:45 < SandorKrashna> What's a good method to have the server wait for specific clients to connect and then when all clients are connected send a message to all
21:45 <@isaacbw> an array?
21:45 < SandorKrashna> im a noob, how can you name your clients
21:46 < swaj> jschall: https://gist.github.com/swaj/4956571 <-- fixed the bugs.  That code should work for generating a password with the salt attached, and then validating a given password against the full hash with salt attached.
21:46 < jschall> swaj: i was just about to use the bcrypt module
21:46 < swaj> you're welcome to steal it :)
21:46 < swaj> jschall: that one is async with node's built-in pbkdf2, if you want it.
21:46 < jschall> swaj: thank you very much, i'll definitely review/consider it
21:47 < jschall> swaj: i'm looking at using this too: https://npmjs.org/package/bcrypt-nodejs
21:47 < base698> SandorKrashna: you need more info than that.  Can the clients name themselves?  Is it just 1 server.  How long in between client connections?  You have to define a protocol for it works before you ask how to do it in code
21:47 < base698> *how it works
21:47 < swaj> jschall: yeah that one will work just fine, too.  I'm just a fan of using the core node stuff if I can, and pbkdf2 is super strong.
21:48 < SandorKrashna> yes there is only one server, and 5 clients. I want to name each client client1, client2 etc. I want the server to wait for all clients to connect and then fire off a message to all once they're connected
21:48 < SandorKrashna> this is for a video wall installation i want to send clients videos to play simataniously
21:49 < jschall> swaj: bcrypt is equivalently strong.
21:49 < base698> how are the clients connecting?
21:49 < swaj> jschall: aye
21:49 < swaj> jschall: I'm not knocking bcrypt.  Go for it if you want :)
21:49 < jschall> swaj: and it stores the salt in the hash string, which is nice.
21:49 < swaj> jschall: so does that lib I just sent you :)
21:49 < SandorKrashna> each client is just an html page with a <video> tag
21:50 < swaj> jschall: format is $<hex-iters>.<random-bytes>$<hash>
21:50 < SandorKrashna> if all 5 screens load http://localhost/index.html then that means clients are connected
21:50 < swaj> both random bytes and hash are base64 encoded
21:50 < swaj> iters is a hex-encoded int
21:50 < SandorKrashna> i just want to name each client somehow
21:51 < SandorKrashna> and have the server wait for that client to connect
21:53 < SandorKrashna> i guess i could identify the client in the url localhost/index.html?clientname=client1
21:53 < SandorKrashna> and then send client1 to the server
21:54 < addisonj> hrm.. anyone know of any libs that will clean up a body of text? its all uppercase and I want to make it look sort of like english text...
21:54 < swaj> SandorKrashna: you could use a custom HTTP header, if you're using http
21:55 < s3shs> So I guess since nobody knows how to make the debugger stop on Throw... what about in "new Error()"?  Is there a way to do that/
21:55 < s3shs> ?
21:55 < s3shs> I guess I could make "MyThrow" and stick a breakpoint in that.
21:55 < swaj> s3shs: surround your code with a try/catch and set a breakpoint in the catch?
21:55 < SandorKrashna> can i set the custom http header for each client?
21:55 < s3shs> swaj, I need to know where its thrown /from/.
21:56 < fwg> look at the stack
21:56 < swaj> stack should tell you
21:56 < s3shs> At the point of catch the stack is already unrolled.
21:56 < fwg> the error stack?
21:56 < s3shs> Unless Javascript is different from every other language.
21:56 < groundwater> wait, doesn't the error have the stack trace?
21:56 < fwg> >> 1
21:56 < purr> fwg: (number) 1
21:57 < fwg> >> try {throw new Error('ha')}catch(e){console.log(e.stack)}
21:57 < purr> fwg: undefined; Console: 'Error: ha\n    at irc:1:13\n    at Sandbox.execute (/srv/irc/purr/lib/sandbox/v8/shovel.js:56:12)\n    at Object.exports.run (evalmachine.<anonymous>:386:12)\n    at Sandbox.run (/srv/irc/purr/lib/sandbox/v8/shovel.js:45:38)\n    at Socket.Sandbox.load_input (/srv/irc/purr/lib/sandbox/v8/shovel.js:27:13)\n    at Socket.EventEmitter.emit (events.js:90:17…
21:57 < s3shs> Ahh, so it's stuffed in to the error.
21:57 < s3shs> Ok, I can live with that.
21:57 < s3shs> Thank you!
21:58 < groundwater> s3shs: i think new Error() captures teh stack, unless i'm eating bad sushi
21:58 < s3shs> And y'all are correct.  No bad sushi.
21:58 < s3shs> Thank you!
21:58 < swaj> :P
21:58 < s3shs> Oh look, there's the stack in the logs.  Nice.
21:58 < groundwater> \o/
21:59 < s3shs> Dumb question: MyFile.js:259:29.  259 is the line number.  What's 29?
22:00 < swaj> column?
22:00 < s3shs> Line in the function, I think.
22:00 < s3shs> Ok.  Wow, little too helpful.  ;-)
22:03 < whomp> what's the difference between req.session and req.session.cookie? it seems i can store req.session.foo, but i can't store req.session.cookie.foo
22:05 < jschall> so, if i want to pass a javascript object over TCP, i want to somehow encode it as JSON and decode it, right? is there a tutorial for that?
22:05 < eephillip> whomp: is it because your extending an object owned by connect perhaps,
22:06 <@isaacbw> jschall, JSON.stringify(object)
22:06 < jschall> isaacbw: and JSON.parse?
22:06 <@isaacbw> yea
22:06 < jschall> isaacbw: so JSON.parse(JSON.stringify(object)) is equivalent to just object?
22:07 <@isaacbw> jschall, no
22:07 < jschall> isaacbw: ok, explain?
22:08 <@isaacbw> in some cases it will be the same
22:08 <@isaacbw> JSON isn't javascript
22:08 <@isaacbw> http://www.json.org/
22:11 < jschall> "The JSON.parse() method parses a JSON string, reconstructing the original JavaScript object, while the JSON.stringify() method accepts a JavaScript object and returns its JSON equivalent." so JSON.parse(JSON.stringify(object)) SHOULD === object, barring any bugs, right?
22:12 < eighty4> stupid… It's just way to funny to play with node ><
22:13 < mmalecki> jschall: nope
22:13 < jschall> mmalecki: explain?
22:13 < mmalecki> jschall: object can have function on it
22:13 < mmalecki> functions are not serialized
22:13 < jschall> mmalecki: ok, apart from that special case
22:14 < mmalecki> jschall: that's right, then
22:14 <@isaacbw> jschall, nope
22:14 <@isaacbw> oh
22:14 < jschall> isaacbw: explain?
22:14 < jschall> i can't find good documentation...
22:14 <@isaacbw> no, that's what I was getting at obliquely
22:14 < jschall> except for where i got that quote from on mozilla
22:14 <@isaacbw> you also don't have anything else that comes with Objects
22:14 <@isaacbw> if it's just plain old data, then it's exactly the same
22:14 < mmalecki> also
22:14 < mmalecki> > JSON.stringify([undefined])
22:14 < mmalecki> '[null]'
22:15 <@isaacbw> you lose prototype, functions, everything else that's not plain old data
22:15 < therealkoopa> npm link shouldn't require sudo right? Locally I can do npm link lib/foo just fine. However, a coworker is having a problem with it: Error: EACCES, symlink saying it needs to be run as root
22:15 < jschall> interesting tidbit about security: "If you are doing JSON 100% properly, then you will only have objects at the top level. Arrays, Strings, Numbers, etc will all be wrapped. A JSON object will then fail to eval() because the JavaScript interpreter will think it's looking at a block rather than an object."
22:16 < othiym23> therealkoopa: if your coworker has node installed via package into /usr/local / opt, they'll need to run npm link w/sudo
22:16 < jschall> not that i'm planning on using eval
22:17 <@isaacbw> you shouldn't use json any other way
22:17 <@isaacbw> replace 100% properly with properly
22:17 < therealkoopa> othiym23: Is it a bad practice to run npm link with sudo? Is it okay in this situation
22:17 < othiym23> therealkoopa: it's no better nor worse than running 'npm install -g' would be
22:18 < othiym23> which is kind of a non-answer, I know, but the real answer is the more boring "it depends"
22:18 < Gambit--> anyone know how to go from a v8::Handle<v8::Value> to some kind of string representation in gdb?
22:18 < othiym23> I mean yeah, it should be fine
22:19 < therealkoopa> othiym23: Both of ours are installed in /usr/local/bin/node
22:19 < therealkoopa> othiym23: I used homebrew to install it, so you're saying he probably used the node package ?
22:19 < CoverSlide> >> [typeof JSON.parse('10'), typeof new Number(10)]
22:19 < purr> CoverSlide: (object) ['number', 'object']
22:21 < othiym23> therealkoopa: well yeah, if brew isn't installed / he hasn't run through the brew installer checklist and made his login user owner of /usr/local and changed the perms, he probably got node via the official package
22:21 < othiym23> that's what I do now, and even with brew, I did have to go change the perms on /usr/local/lib/node after installing Node using the installer
22:22 < cloudbender> Hi watcha doin guys
22:22 < therealkoopa> othiym23: Okay, cool. thanks
22:33 < grom358> anyone here use node-postgres? I'm trying to work out how I can close the connection once all queries have finished in this, http://pastebin.com/80bfJf3G
22:34 < baudehlo> I use pg, and it just … happens.
22:34 < baudehlo> is pg = node-postgres?
22:34 < othiym23> it's using generic-pool behind the scenes
22:35 < baudehlo> Just wait a few seconds and the connections go away and it exits.
22:35 < othiym23> so it checks out a connection when you fetch some data, and releases the connection to the ppol once the results have been fetched
22:35 < grom358> yeah pg = node-postgres
22:36 < grom358> does it run the queries in order that you add them?
22:36 < grom358> so on the very last one I add... could I do.. query.on('end', function() { client.end(); }); ??
22:36 < baudehlo> *shrug* I just use callbacks.
22:37 < othiym23> grom358: you could, but I don't think that shuts down the pool
22:37 < reality> =12
22:37 < othiym23> brianc hangs out here sometimes, maybe he'll pipe up
22:37 < reality> whoops
22:37 < grom358> in my test script client.end() was ending it I believe.. well the script ended... without the client.end my script doesn't terminate
22:39 < jschall> what is the best module to use for accessing mysql?
22:39 < othiym23> jschall: the 2.0 series of felixge's node-mysql
22:57 < grom358> so... does pq run the queries in order? so if I attach an event handler on the last query.. it will run after all queries are completed?
22:57 < baudehlo> no
22:58 < grom358> okay.. so how can I have close the connection after all queries are completed in my example? http://pastebin.com/80bfJf3G
23:00 < othiym23> baudehlo: what makes you say that?
23:00 < othiym23> especially when they're nested, as in grom358's example, there's no reason to believe they're not executed in order
23:01 < grom358> othiym23: inside that parseRounds though I don't have them nested.. which is why I wasn't sure how to end the connection
23:01 < othiym23> grom358: the safest thing to do is to attach an 'end' event listener to a cursor as in the example on the docs page, but I don't think there's any reason you shouldn't be able to close the connection inside your innermost callback
23:01 < othiym23> grom358: why are you feeling the need to explicitly manage the client's status?
23:02 < grom358> othiym23: my script atm does not terminate
23:02 < grom358> cause the database connection is still alive
23:02 < grom358> if I uncomment line 22.. it terminates but the INSERTs don't execute
23:05 < grom358> in the examples they attaching a callback on the query.... so it seems the queries are execute in order.. otherwise those events would fire and end the connection too early
23:05 -!- mode/#Node.js [+o isaacbw] by ChanServ
23:07 < alessioalex23> hello guys
23:08 < emre_> hi all
23:08 < alessioalex23> isaacs: you on?
23:08 < SandorKrashna> does a socket.emit need to be in a socket.on function? 
23:08 < SandorKrashna> on client?
23:08 < emre_> I am getting "Error: Cannot find module './routes'" error in my node.js app. It seems my local routes somewhat is not in the path? any ideaS?
23:11 < owen1> amurdaca: i am getting the book as well. i did some stuff with node but i feel i'll learn a lot from it.
23:11 < othiym23> grom358: the queries execute in order, but you can't just hook an end event onto any one of them
23:12 < grom358> othiym23: no I was thinking hook end event on the very last INSERT I do
23:12 < sshaginyan> What's the equivalent of http.get in express
23:12 < othiym23> if you say var last = client.query("INSERT...") on the last one, and then put your .on('end' handler there, does it work?
23:12 < othiym23> yeah that
23:13 < two_socks> hello
23:14 < sshaginyan> Http.get equivalent in express?
23:15 < grom358> yeah.. so var last.. then outside of that for loop.. last.on('end', function() { client.end(); }
23:16 < two_socks> I have a problem but I'm not sure if I can resolve by node.js
23:17 < two_socks> I have a javascript function on client side where I use setTimeout
23:17 < grom358> othiym23: i can't run this script to test atm cause I have already got the data into the database.. I'll have to setup a test database
23:18 < grom358> another* test database
23:18 < two_socks> for security reason I need to move this on the server, node.js can do that?
23:20 < gildean> two_socks: depending on what you mean by that, but you can write the server with node sure
23:21 < two_socks> I don't need to write the server, I need to call a function after some minutes
23:22 < two_socks> at the moment I call an ajax function after x time using settimout
23:22 < groundwater> two_socks: can you explain why it's insecure to call setTimeout on the client?
23:22 < gildean> sshaginyan: no such thing, express is basically a connectionhandler and a router, you can just http.get like normal
23:22 < groundwater> two_socks: because i'm skeptical moving this to the server is going to solve your problem
23:22 < two_socks> it's a paied chat
23:23 < two_socks> and by chrome I can change the timeout
23:23 < sshaginyan> K
23:23 < two_socks> every x minutes I call the reauth to pay by credit card
23:23 < two_socks> the reauth function is on the server
23:23 < two_socks> but I call it by an ajax call
23:24 < two_socks> and this call is call after x minutes by setTimout
23:24 < groundwater> two_socks: so what do you want the server to do?
23:24 < two_socks> now today I have seen node.js and I thought, maybe I can use the javascrit on the server side
23:24 < SandorKrashna> how can i trigger a <video> element on the client to start playing from socket.io server?
23:24 < AviMarcus> is there a way to get regex to match a day, e.g. 01->31? If I do [0123]\d that matches too many things, e.g. 32
23:25 < groundwater> two_socks: what language are you using on the server currently?
23:25 < two_socks> can the server call a function after x minutes?
23:25 < two_socks> php
23:25 < groundwater> two_socks: we would all love you to use node, but why don't you keep using php?
23:26 < AviMarcus> hmm, manually, I guess: (0[1-9]|[12][0-9]|3[01])
23:30 < two_socks> because php is blocking, I can't run a script in background
23:31 < groundwater> two_socks: ahh okay, i was just making sure i understood your problem
23:31 < two_socks> I think php doesn't have a function similar to setTimeout
23:31 < groundwater> two_socks: yes, you can run a node.js script on the server with a bunch of setTimeouts
23:31 < two_socks> :)
23:32 < two_socks> a small thing
23:32 < gildean> SandorKrashna: iirc the video tag has a js method of .play() and .pause(), i think you could just call those from the events emitted from the socket.io
23:32 < groundwater> two_socks: try it yourself, when you get stuck come ask again. if you can include a link to code, people will be more able to help
23:32 < two_socks> I don't understand nothing about node.js
23:33 < two_socks> if I would like to implement node.js on my server, do I need to install only the framework, like a library or do I need to make big change on the server?
23:33 < dxeh> depends how big your server is ;)
23:34 < two_socks> what do you mean?
23:34 < dxeh> node.js basically is like an environment
23:34 < two_socks> ok...
23:34 < groundwater> two_socks: what is your server operating system?
23:34 < two_socks> ubuntu
23:34 < dxeh> if your server is big, you will have to do a big change, if your server is small, small change ;)
23:35 < groundwater> two_socks: https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
23:35 < dxeh> oh you mean server server like physical server
23:35 < gildean> two_socks: you can't embedd node.js to your php, you need to run it on it's own
23:35 < dxeh> thought you meant a programmed server
23:35 < groundwater> two_socks: follow the install instructions, it's quite minimal
23:36 < two_socks> :)
23:36 < dxeh> have any of you guys installed the socket.io package and used it in a web environment?
23:36 < two_socks> thanks folks
23:36 < dxeh> as a client 
23:36 < groundwater> dxeh: yes
23:37 < dxeh> groundwater: im quite a noob with html so do you have any basic examples you could show me? Im not sure how to make the connection via socket.io in the web source
23:37 < two_socks> last things :)
23:38 < two_socks> can node.js interact with php?
23:38 < groundwater> dxeh: sorry i thought you meant using node.js as a socket.io client. we have done that where i work, but i don't personally
23:38 < groundwater> two_socks: yes, use a socket
23:38 < gildean> dxeh: did you check out the examples on the socket.io site?
23:39 < dxeh> gildean yeah but im such a noob with html i dont understand where the field "io" is being defined in their code snippets
23:39 < two_socks> can I think to node.js like a server side javascript and interact with it by socket (like a ajax call?)
23:40 < two_socks> call and receive response from it
23:41 < groundwater> two_socks: yes, check out socket.io
23:41 < two_socks> :)
23:41 < two_socks> thanks again
23:41 < groundwater> two_socks: good luck
23:41 < gildean> two_socks: you don't need socket.io for that alone tho'
23:41 < bingomanatee> good afternoon node
23:41 < two_socks> no?
23:42 < bingomanatee> I was wondering - I have a test suite in Mocha on the browser (yes i know, a little Off Topic) 
23:42 < two_socks> what I need to use?
23:42 < gildean> dxeh: just copy/paste the examples and they'll work
23:42 < bingomanatee> that is showing slow even though I have set SLow to a very generous threshold.
23:42 < bingomanatee> https://gist.github.com/bingomanatee/4957398
23:42 < gildean> two_socks: you can just use plain http if that's what you're after
23:42 < gildean> two_socks: or plain tcp, or udp, there are quite a few options
23:42 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
23:42 < echo> two_socks: You -CAN- use socket.io, but there's many other frameworks for just providing a resftul/http api requestable via ajax calls.
23:44 < two_socks> echo: can you tell me two or three name, please?
23:56 < echo> two_socks: http://mcavage.github.com/node-restify/ < Restify, Some people like to use express as well.. http://expressjs.com 
23:57 < two_socks> thanks echo
--- Log closed Fri Feb 15 00:00:35 2013
