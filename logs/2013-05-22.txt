--- Log opened Wed May 22 00:00:44 2013
00:05 < luhx> DarkArgon: yes, it is
00:05 < luhx> ops
00:05 < luhx> yes, I did
00:05 < luhx> hehe
00:08 < d4rklit3> ok great
00:08 < d4rklit3> so i just had to make my own shit check if file exists
00:08 < d4rklit3> then server it
00:08 < d4rklit3> otherwise default back
00:09 < DarkArgon> well. i only used it in express so..  do you also do passport.use(strategy); somewhere?
00:09 < DarkArgon> d4klit3 do you serve static content?
00:11 < d4rklit3> yes
00:11 < d4rklit3> like vendor js files
00:11 < d4rklit3> images etc
00:11 < DarkArgon> there is express.static for that
00:11 < d4rklit3> right
00:11 < d4rklit3> but that interferes
00:11 < d4rklit3> because if i set /*
00:12 < d4rklit3> it assumes taht static files aren't there
00:12 < DarkArgon> and you app.use it before your app.router?
00:12 < d4rklit3> yup
00:13 < d4rklit3> werr wait
00:13 < d4rklit3> YES
00:13 < d4rklit3> that was it
00:13 < d4rklit3> hh
00:14 < d4rklit3> thanks for being the first person to point that out after me asking for months
00:14 < Bubo> for months? lol
00:14 < d4rklit3> yeah 
00:14 < d4rklit3> well on and off
00:14 < d4rklit3> ive found way around it
00:14 < d4rklit3> i dont really use node too often for a production server
00:14 < d4rklit3> but now im making something for production
00:16 < toothrot> you sure do press enter alot
00:16 < DarkArgon> lol
00:17 < d4rklit3> sorry, im tryin to get better at it
00:17 <@Nexxy> newline
00:17 <@Nexxy> all
00:17 <@Nexxy> the
00:17 <@Nexxy> things
00:17 <@Nexxy> also, a lot* :P
00:17 < DarkArgon> but glad that i could help yo
00:18 < DarkArgon> u
00:18 < d4rklit3> heh welll im having new problems now :P
00:18 < lyaunzbe> For those who have deployed multiple node applications to a VPS: Is node-http-proxy a viable alternative to ngnix so that I can have multiple apps on multiple domains from one machine?
00:18 <@Nexxy> yes
00:19 <@Nexxy> although I use bouncy
00:20 < airtonix> is there a routing library that implements named urls (like django does)
00:21 < lyaunzbe> @nexxy:what if I want regular static sites, or maybe a lamp stack also? I've heard that node-http-proxy and the like are only appropriate if my server is all node apps.
00:23 < d4rklit3> DarkArgon, is it possible to make exceptions for the static files?
00:23 <@Nexxy> you should be able to pipe requests anywhere
00:23 <@Nexxy> lyaunzbe, it's just a reverse proxy in node
00:23 <@Nexxy> like haproxy in JS
00:23 < d4rklit3> there are some static files that I check to see the env mode before serving, if its in development mode I may rebuild those files before serving them. now that the static stuff is in place it ignores those routes
00:24 <@Nexxy> d4rklit3, why not use NODE_ENV ?
00:25 < d4rklit3> Nexxy , i do use it. thats not really my problem. the problem is that when i set up routes for files I know are static it ignores them (i udnerstand why too). I want to know if there is a way around this.
00:25 <@Nexxy> d4rklit3, hmm, I'm not sure I understand the problem
00:26 < DarkArgon> exceptions like in doing something else or in throwing errors?
00:26 < d4rklit3> the problem is that i have express.static being used before app.router. this creates the dynamic routing that i like but creates a problem with me updating some static files (js and css) from their respective pre-processed source
00:27 < d4rklit3> exceptions like doing something else, like "I know these files are static but i will do what you ask with them before just serving them". Do i need to modify that static middleware?
00:27 <@Nexxy> yeah it sounds like they're not really static then are they?
00:27 < d4rklit3> they kidna of are
00:27 <@Nexxy> but you change them?
00:28 < d4rklit3> i just have the FS write those files upon routing to them. but only development mode. otherwise it just serves them.
00:28 <@Nexxy> you could just write your own middleware
00:28 <@Nexxy> that does w/e preprocessing you want
00:28 <@Nexxy> and then just res.sendfiles()
00:28 < d4rklit3> Nexxy yeah, im thinkin i need to extend static?
00:28 <@Nexxy> sendfile()'s*
00:28 < DarkArgon> or just modify them on disk
00:28 < DarkArgon> and then let express serve them
00:29 < d4rklit3> DarkArgon, thats what is happening, but whats telling them to be modified is the request.
00:29 < DarkArgon> but include your middleware before serving :P
00:29 < d4rklit3> i need look at how middleware works here actually
00:30 < d4rklit3> is there a good tut on writing middleware?
00:30 < DarkArgon> that should help. do you try to preprocess css?
00:30 < d4rklit3> i do, css and js
00:31 < DarkArgon> js.. is it for coffeescript?
00:31 < d4rklit3> .... yes
00:31  * d4rklit3 hides
00:31 <@Nexxy> http://i.imgur.com/47Mti5T.png
00:32 < d4rklit3> almost, 1 hour to go
00:33 < DarkArgon> there probably already are modules that can do all the stuff you want
00:34 < DarkArgon> if you use less there is less-middleware
00:38 < d4rklit3> i use stylus
00:38 < mscdex> d4rklit3: a middleware function is just one that you pass to app.use() and is passed 3 arguments: req, res, next. call next() if you wish to continue to the next middleware function in the chain
00:39 < mscdex> it's that simple
00:39 < d4rklit3> yeah... im reading about it now..   so before I pass static i would pass these routes through a middleware?
00:40 < fiws> stylus has connect middleware build in
00:41 < fiws> https://gist.github.com/bentruyman/824982 (don't know if thats still up to date)
00:41 < d4rklit3> o nice
00:41 < d4rklit3> i use browserify for coffee, that has middleware too
00:42 < d4rklit3> also express no longer requires this stuff to be set in app.configure right?
00:42 < d4rklit3> i can just app.use wherever i want to define it?
00:43 < fiws> the order is important
00:43 < d4rklit3> so i would put the stylus before static
00:43 < fiws> yep
00:45 < d4rklit3> o hell yes
00:45 < d4rklit3> giving myself a lot to do tonight but this stuff is fun
00:45 < fiws> any1 ever piped into a crypto.Hash? i can't get the hex out of it (sha1)
00:49 < d4rklit3> fiws, would stylus and browserify middleware work upon request?
00:50 < d4rklit3> or will it just continuesly rebuild the file as I save it? 
00:50 < d4rklit3> continuously ** 
00:50 < fiws> depends on how they work. i don't use both of them
00:51 < Shayanjm> anyone used 'natural' for natural language stuff?
01:08 < s5fs> Nexxy: indeed!
01:30 < AAA_awright> Node.js does or used to do sendfile() but I can't find any documentation on that
01:32 < CPartridge> AAA_awright: i know express did, don't think I ever seen it in core
01:32 < AAA_awright> Express does not seem to use sendfile
01:35 <@Nexxy> it's in there
01:37 <@Nexxy> (express, that is)
01:39 <@MI6> joyent/node: Nathan Rajlich v0.10 * 99b737b : configure: respect the --dest-os flag consistently - http://git.io/pUIWEQ
01:43 < nathanbz> anyone know anything about websockets
01:44 < nathanbz> like why is there a request header called upgrade
01:45 < Havvy> nathanbz: Without looking at it, I'm guessing it'd be an upgrade from HTTP to WS
02:09 < SrPx> http://www.techempower.com/benchmarks/#section=data-r5 I think those benchmarks are useless. Is there any benchmark that compares web frameworks under stress? That is, testing it for scalability?
02:15 < deoxxa> i made a thing - does it look reasonable? https://github.com/deoxxa/passpack
02:16 < unstable> On the latest ubuntu, should I get npm from git.. then have npm install all the packages locally? Or should I just sudo apt-get install nodejs stuff.. and use the ubuntu method?
02:27 < s5fs> How do I delete data from an express session memoryStore? I can fetch the data by session id, how do I modify the data and update the store?
02:34 < Raynos> I'm trying to implement a low CPU pubsub server in node and finding it really hard to make it scale
02:34 < Raynos> memory usage on it scales trivially
02:35 < Raynos> Does anyone have any advice for doing low CPU networking with node?
02:38 < s5fs> okay, I called store.set(sessid, newsessdata) and stuff works. whee!
02:39 < s5fs> Raynos: sorry, i do not, but i'm interested to see your solution. i'm doing small scale pubsub on an embedded device and that guy is already cpu bound so i too am concerned about performance, but haven't begun measuring it yet.
02:39 < Raynos> https://github.com/Colingo/relay-server#benchmarks
02:40 < Raynos> s5fs: ^ I got that far
02:40 < Raynos> of course my pubsub is cross process over HTTP & TCP
02:40 < CPartridge> Raynos: profiled it? where is it spending all the time?
02:41 < Raynos> CPartridge: good idea
02:41 < Raynos> let me do it
02:42 < Raynos> CPartridge: https://gist.github.com/Raynos/f0907876a5f10c80c183
02:42 < Raynos> Not sure how to read this
02:43 < s5fs> Raynos: how much data are you pushing? i'm shoving small bits of data every 80ms across socket.io and allowing the client to publish to local subscribers (canvas elements). my cpu usage on the client is negligible.
02:44 < Raynos> I'm pushing 100 msg/s to a 100 clients so 10k writes/s
02:44 < deoxxa> Raynos: buffering those writes even a tiny bit would probably take the cpu usage down a lot
02:45 < Raynos> I try that
02:45 < Raynos> I implemented ( https://github.com/Colingo/relay-server/blob/master/benchmarks/plain-tcp/server.js#L43 )
02:46 < tfarrell> I'm new to server-side JS and thinking of getting my feet wet on the Bitcoin protocol.  Can someone recommend an example of an implemented protocol that I could follow?
02:47 < keyosk> To do what exactly? Mine bit coins?
02:47 < tfarrell> actually not bitcoin at all, just used it as an example
02:47 < Havvy> Raynos: Geeze...that's more writes than IRC does in a single channel.
02:48 < Raynos> Havvy: But it should be fast :(
02:48 < tfarrell> truly: https://bitmessage.org/wiki/Protocol_specification
02:48 < s5fs> Raynos: you're shoving way more data than I am, makes me feel better about my implementation ;-)
02:49 < deoxxa> Raynos: i'm trying to find an article i read a while back about reading the v8 profiling log output...
02:49 < ChrisPartridge> most of the time is spent in libc, try run it with --nouse-idle-notification Raynos
02:49 < Raynos> Another one https://gist.github.com/Raynos/e94be39a7225be4dda76#file-gistfile1-diff-L11
02:50 < Raynos> ChrisPatridge: What is nouse-idle-notification?
02:50 < deoxxa> Raynos: http://s3.mrale.ph/nodecamp.eu/#26 has some good bits
02:50 < deoxxa> erm
02:50 < deoxxa> Raynos: http://s3.mrale.ph/nodecamp.eu/#1 that instead
02:50 < ChrisPartridge> Raynos: disables v8's idle garbage collection
02:51 < tfarrell> keyosk: perhaps there is a node version of http://docs.python.org/3/library/array.html ?
02:52 < Raynos> ChrisPartridge: Doesn't make any significant changes ( https://gist.github.com/Raynos/ea4bd55fc410e1b551dc )
02:52 < deoxxa> tfarrell: http://nodejs.org/docs/latest/api/buffer.html
02:52 < Raynos> maybe I should just accept that you cant write 10k buffers per second with low cpu usage
02:52 < tfarrell> Perfect!  Thanks deoxxa
02:53 < deoxxa> tfarrell: there are a few options for working with binary data - a popular one is https://github.com/substack/node-binary
02:53 < deoxxa> oh
02:53 < deoxxa> well ok
02:53 < deoxxa> love me and leave me
02:58 < ChrisPartridge> Raynos: what version of node you on?
02:59 < Raynos> 0.10.7 or 0.8.23
02:59 < Raynos> v8 goes batshit insane on v0.10
03:00 < Raynos> I run the benchmark on both
04:00 < syskk> are TJ / visionmedia ever on this chan?
04:01 < ChrisPartridge> syskk: i've seen him here before, not sure what tz
04:01 < syskk> connect/express maintainers
04:03 < syskk> would like to discuss a feature request for connect and had no luck with the github issue tracker
04:04 < chilts> syskk: you could try #express (I see TJ pushed a commit about 3 mins ago, which was reported there)
04:05 < syskk> chilts: thanks
04:05 < chilts> :)
05:14 < Jester831> anyone use an ec2 bitnami stack for node before?
05:27 < sinclair|net> so, i was thinking what a async /  await transform in javascript might look like
05:28 < sinclair|net> http://pastebin.com/hguYd66Q <-- simple
05:28 < sinclair|net> http://pastebin.com/d46xb1k3 <-- async await within an iteration
05:33 < sinclair|net> there is no task / promise primitive, but even as a fairly straight forward transform, this could maybe work
05:33 < sinclair|net> needs to be in TypeScript
05:50 < sinclair|net> or perhaps yield and generators could do the same thing
05:58 < lafyn> swaagie
05:58 < swaagie> ?
06:01 < lafyn> cork: well that taruti just use postgresql ?
06:16 < happyGilmorian> hey do any of you guys know of any simple rest apis I can easily test with? I'm looking for something I can literally download, type run and simply have a running rest-api to test with
06:26 < ChrisPartridge> Raynos: have any luck cutting that cpu usage?
06:40 < ssafejava> @sinclair|net Looks much like ICS (http://maxtaco.github.io/coffee-script/). We'll definitely get something like this in Node as soon as V8 supports generators, the upsides are too great to ignore
06:41 < sinclair|net> ssafejava: i had a quick look at ICS, i would really like to see such things in TS tho
06:41 < sinclair|net> and a Task<T> style primitive
06:41 < ssafejava> There's also TaskJS which is running on JS builds that support yield (http://taskjs.org/)
06:41 < sinclair|net> or Promise (i prefer Task<T> as its easier to type)
06:42 < sinclair|net> ssafejava: async / await / yield is the thing that could make nodejs practical
06:43 < ssafejava> sinclair|net: I agree. I've built a few nontrivial apps in nodejs and it is unfortunately quite a bear for anything complicated. Generators would help, immensely
06:43 < sinclair|net> ssafejava: you just know these things are going to arrive, it feels wrong to code anything until they do
06:43 < ssafejava> sinclair|net: You could write in node-fibers, works today (https://github.com/laverdet/node-fibers)
06:43 < sinclair|net> ssafejava: not into fibers 
06:43 < ssafejava> why's that?
06:44 < sinclair|net> ssafejava: i won't want threads, i want concurrency syntax ;) also native plugin's don't work where i want to deploy node
06:45 < nightfly> My understanding of some of this stuff is very limited, but are generaters at all related to first class continuations?
06:46 < sinclair|net> ssafejava: threads are a bit against the grain in node. what needs to happen is node needs to stay single threaded, and the overhead of running child processes needs to be brought down
06:46 < ssafejava> sinclair|net: Fibers aren't threads, they work just like callbacks - cooperatively multitasked, not preemptive
06:47 < sinclair|net> ssafejava: my understanding was that fibres were effectively spawning threads under the hood
06:48 < sinclair|net> ssafejava: regardless tho, native plug ins are not something i am not interested in, i think you can achieve the same results in a node like fashion with child processes
06:49 < ssafejava> sinclair|net: It is much more like `yield` than like threads, and much lighter weight than spawning child processes to be certain
06:49 < sinclair|net> ssafejava: yeah, those child processes are too top heavy
06:49 < ssafejava> sinclair|net: I think you are seeing the word 'fibers', and getting scared, but for the wrong reasons. Fibers are quite useful and fit node well, unless of course you're deploying to a restrictive PaaS
06:49 < sinclair|net> 10mb per child process is insane, 
06:50 < sinclair|net> ssafejava: im not scared of them
06:50 < sinclair|net> ssafejava: i just think they go against the grain
06:51 < ssafejava> It's the best option at the moment if you really hate callback spaghetti
06:51 < sinclair|net> and yeah, they don't deploy so well on restrictive PaaS environments
06:51 < ssafejava> Alternatives like streamline.js have bizarre stack traces and nonportable syntax
06:51 < sinclair|net> ssafejava: yeah, agreed
06:52 < deoxxa> people who insist on using fibers are just being difficult
06:52 < sinclair|net> ssafejava: they are a means to an end, but i wouldn't want to invest time and effort into fibers as they are just a stop gap measure
06:52 < deoxxa> callbacks are entirely not complicated, and there are numerous effective methods to keep yourself out of "callback hell"
06:53  * deoxxa tips hat
06:53 < ssafejava> Depends on the complexity of what you are doing - but libraries like async.js or some of the function mutators in _ make it much simpler than it would be otherwise. I get a lot of mileage out of function declarations at the bottom, initialization code up top
06:54 < sinclair|net> ssafejava: there doesn't seem to be a accepted approach at this point, and im not really one to make calls on something so fundamentally important. my hope is that Microsoft does something with TypeScript with yield generators and gives me the async / await syntax 
06:54 < sinclair|net> ssafejava: they are in way more of a position to make the right call on implementation, ill just write for the compiler, leave those details to the TypeScript compiler
06:54 < ssafejava> looks like it's being worked on in TS
06:55 < sinclair|net> ssafejava: its been mentioned a lot in the forums, have you read something in particular that makes reference to it?
06:56 < ssafejava> I see http://typescript.codeplex.com/workitem/38, that's about it. Obv. generators come first but I don't see a ticket for that
06:57 < sinclair|net> ssafejava: i was looking at this, its nice its a voted on work item
06:57 < sinclair|net> ssafejava: (we just got generics in the language) :)
07:00 < sinclair|net> ssafejava: based on this tho...http://pastebin.com/d46xb1k3 i don't really see a promises or tasks as a precursor to making things work
07:00 < ssafejava> Tbh I don't see the point, if you're a webdev, you'll need to know JS better than any transpiled language, you don't always have the luxury of starting a project from scratch
07:00 < sinclair|net> ssafejava: TS is JS
07:01 < sinclair|net> in that example, a more robust state machine for iterators would be all you really need, and the convention that the last argument is a callback
07:02 < ssafejava> This is more or less a simplified version of what tameJS or ICS does
07:03 < ssafejava> But it can't be done without some sort of transpiler
07:04 < sinclair|net> ssafejava: well, it comes down to if you embrace the X > JS compilers or not, i do
07:04 < ssafejava> Sure. So what you're saying it, TS could do it now if someone were willing to write it, and that's probably true, but it would be very complicated; ICS and TJS have been under development for quite a while and haven't nailed it 100%
07:05 < ssafejava> The best path is to simply wait for ES6 and do it right
07:05 < sinclair|net> ssafejava: maybe
07:07 < kurteknikk> I might have found a memory leak in: https://github.com/mongodb/node-mongodb-native can anybody help me here ? (before i issue a bug report)
07:08 < sinclair|net> ssafejava: if you view JS as a compilation target, and you accept that JS can do anything async await can do, then it makes sense to let a compiler take care of writing complex state machines 
07:08 < Omid> is it possoble to parse an html form while we are sending all the request data to a variable called chunks?
07:09 < sinclair|net> ssafejava: the compiler may or may not leverage yield, 
07:09 < ssafejava> sinclair|net: I understand how it works, thanks
07:09 < sinclair|net> ssafejava: getting mad ?
07:11 < ssafejava> Not at all, there's just no need for the lesson, there are other members with questions here
07:11 < sinclair|net> im not giving you are lession
07:11 < sinclair|net> *lesson
07:12 < sinclair|net> im simply stating why i think transcompilers are a better option than relying strictly on ES6 yield 
07:13 < ssafejava> That's fine. I pointed to several projects that do just that. If you want it in TS specifically and are not willing to use tameJS, fibers, ICS, or any other alternative, write it
07:14 < sinclair|net> ssafejava: well, i have been looking into what it would take to extend the TS 0.9 compiler to do just that
07:15 < sinclair|net> ssafejava: and contrasting which what Roslyn CTP AST looks like, and thinking about how i would emit asynchronous methods
07:18 < sinclair|net> ssafejava: i don't think i would waste my time tho writing anything if Microsoft are going to implement it themselves 
07:18 < sinclair|net> ssafejava: waiting sucks tho
07:29 < manish_> yo
07:29 < manish_> any one home 
07:31 < [AD]Turbo> hola
07:36 < leichtgewicht> yeah
07:42 < kevireilly> ahuh
08:05 < heruan> Hi all! I wonder how does nodejs http module parse mutlipart/form-data POST and create req.files, but I can't find where in the source this parsing is done.
08:05 < Sven_vB> heruan, does the source import a MIME module?
08:08 < leichtgewicht> So, my npm install -g seems to be broken and I really would like to get it back to work again.
08:08 < leichtgewicht> Because command line tools are fun ...
08:08 < kevireilly> in what way is it broken?
08:09 < leichtgewicht> well: it installs everything but in the end the commands are not available.
08:09 < kevireilly> check your path
08:09 < leichtgewicht> What should be in there?
08:10 < kevireilly> just for fun you can `updatedb` and `locate magicalmodule`to establish your path but something sounds borked
08:10 < kevireilly> the directory in whichi npm installs it's symlinks
08:10 < kevireilly> or whatever it does
08:10 < leichtgewicht> updatedb is not macy
08:10 < kevireilly> who is macy?
08:11 < leichtgewicht> Mac-y
08:11 < leichtgewicht> (mac has no command updatedb)
08:11 < leichtgewicht> (mac os)
08:11 < kevireilly> gotcha
08:11 < leichtgewicht> Anyways: Stupid question again: where does npm install its symlinks?
08:12 < mhradilek> leichtgewicht, npm -binary -g
08:12 < heruan> Sven_vB: not sure if I'm looking in the right place (/deps/npm/node_modules/request/node_modules/form-data/lib/form_data.js), but there it requires the 'mime' module.
08:12 < mhradilek> *"npm binary -g"
08:13 < kevireilly> leichtgewicht: what does `npm prefix` say?
08:13 < mhradilek> leichtgewicht, ok so it is "npm bin -g"  sorry
08:14 < leichtgewicht> kevireilly: it lists the cwd
08:14 < kevireilly> leichtgewicht: `npm config edit`
08:14 < leichtgewicht> mhradilek: Ah! that helps!
08:15 < leichtgewicht> yey, added the bin directory and it runs smooth again!
08:15 < leichtgewicht> thanks!
08:22 < Sven_vB> heruan, maybe it uses that one to parse multipart. i think i remember some similarities in their boundary markers.
08:27 < innociv_> How can I close a socket.io connection and stop the client from attempting to reconnect?  
08:27 < innociv_> It seems to automatically try to reconnect whenver disconnect() is called
08:46 < _d4rklit3> hello
08:46 < _d4rklit3> substack not here eh?
08:46 < _d4rklit3> anyone know best middleware plugin for browserify?
09:04 < booyaa|foo> anyone going to lnug tonight?
09:05 < booyaa|foo> the london one rather than the lagos one :D
09:05 < Rulexec> Hello. I'm need help with node-gyp. I'm created binding.cpp, pixes/pixels.cpp and pixels/IWire.hpp. Then added binding.cpp to sources, "pixels" to include_dirs in binding.gyp. In IWire.hpp I'm defined class IWire with virtual methods. All builds, but I got "undefined symbol: _ZTV5IWire" at launch.
09:07 < Rulexec> I have tried to rename IWire.hpp to cpp, added IWire.cpp and pixels/pixels.cpp to sources, but nothing.
09:35 < Rulexec> ... I'm removed all virtual methods and... all works T_T. Wtf?
09:41 < Rulexec> Oh. Problem in ~IWire() {}. Changed to ~IWire(); and all goes fancy. Thanks and sorry for grammar. Bye! :)
09:52 < bang343434> sdfsdf
09:52 < blasdhfhas343> sdfsdfs
09:52 < bang343434> sdfsdf
09:52 < blasdhfhas343> 2 all
09:52 < bang343434> yeah
09:53 < blasdhfhas343> sdfsdf
09:53 -!- blasdhfhas343 was kicked from #Node.js by Nexxy [blasdhfhas343]
09:53 -!- bang343434 was kicked from #Node.js by Nexxy [bang343434]
09:53 < `3rdEden> Nexxy: you are way to nice to just kick them only
09:54 < `3rdEden> BANTHEM@@
09:54 < `3rdEden> :p
09:54 <@Nexxy> `3rdEden, lol I like to hold out hope that it was all some big misunderstanding
09:54 < `3rdEden> Nexxy: oh, okday :p
10:03 < Siyfion> Hey guys, if I were to implement a read/write API that I want to make publicly available; would CORS be the way to go?
10:08 < r1card> folks what's the async/streaming way of reading POST fields from a request?
10:10 < aandy> r1card: parsing the multipart fields, e.g. https://github.com/felixge/node-formidable
10:11 < r1card> aandy, no built-in way?
10:11 < aandy> you have the stream yes, if you want to do it yourself
10:11 < r1card> aandy thank you
10:12 < remysharp> I'm using tap.js for testing, but need to force request.js to cancel a connection (i.e. because it's supposed to timeout). req.end() doesn't seem to do the trick. Ideas?
10:14 < aandy> r1card: you might want to check out https://github.com/tim-smart/node-multipart aswel. but to answer your follow up: no, there's not a built in way. the node "way" is to modulize (specialize and isolate) functionality
10:16 < remysharp> to answer: request.destroy() does the trick
10:17 < standoo> Hello
10:17 < megablue> guys.... i need help... Coalan's Async and Felix's mysql is killing me.... been trying to figure out what happen when felix's mysql.connect() doesn't return when pair with Async series...
10:18 < megablue> this is my code... http://pastebin.com/UVemH3p0
10:19 < megablue> it work fine without async... however it stuck at db.conenct() when i use async.
10:22 < syskk> anyone use async? im wondering if its possible to accumulate results with async.each ? its not documented. or is there another function that will pass a results param to the final callback?
10:23 < megablue> waterfall seems to be able to do that... it will pass an array to next call in the queue
10:24 < megablue> syskk, any idea with my problem? 
10:24 < syskk> let me see 1 sec
10:25 < ChrisPartridge> syskk: you can use async.map
10:25 < syskk> can you paste again on pastebin.ca or github gist please
10:25 < syskk> pastebin.com blocked here:(
10:25 < syskk> ChrisPartridge: thanks, will look it up
10:26 < syskk> ChrisPartridge: does it stop executing when u callback with an error? id like to accumulate errors and keep executing the "loop" even if an error is raised
10:26 < ChrisPartridge> megablue: you are not calling the callback
10:27 < syskk> i guess i could accumulate the errors in my results as well
10:29 < ChrisPartridge> megablue: each function you pass to series, must have a signature of function(callback) {}, and inside the function, you must call the callback before it continues
10:29 < megablue> ChrisPartridge, oic.... i will try that.
10:29 < megablue> ChrisPartridge, thanks...
10:31 < ChrisPartridge> megablue: no problems, it's a pretty pattern in the async module
10:31 < ChrisPartridge> although some methods, such as waterfall allow other input, e.g. function(waterfalledArg, callback) {}
10:33 < megablue> at first glance i thought the callback is optional
10:34 < megablue> still have a lot to learn, my callback chain isn't pretty at all...
10:35 < megablue> connect() finally returns~~ hooray~
11:06 < kutchbhi> I have a simple app- search thing. user types> gets questions, clicks on question > gets answer. simple! what security concerns would be there in such an app ?
11:06 < kutchbhi> i have filtered the incoming data and sanitized for xss. anything else ?
11:06 < kutchbhi> thanks
11:07 < kutchbhi> its a socket.io app btw
11:12 < Hounddog> Hi i am having a slight problem with node and twitter... more a conceptual proble... I am creating an app that will be spawned several times on 1 server but with different connections database etc. now i need to connect these spawned apps to a twitter stream but there is a limitation that i can only do 1 connection per ip/user from twitter... so i guess the only way around is to create an app in between which collects information for all apps and connects 
11:12 < Hounddog> to the twitter stream
11:34 < the_drow> Hi I installed node on ubuntu 13.04 using the package manager. When I type node nothing happens.
11:44 < booyaa|foo> not even the repl?
11:44 < booyaa|foo> you get a command not found?
11:45 < mscdex> the_drow: `nodejs`
11:46 < mscdex> the_drow: actually, what package did you install? 'node' or 'nodejs' ?
11:46 < the_drow> mscdex: thanks.
11:46 < the_drow> mscdex: node
11:46 < the_drow> mscdex: but nodejs works
11:46 < booyaa|foo> node is a different package
11:46 < booyaa|foo> it's an amature radio thing in ubuntu/debia
11:46 < mscdex> the_drow: i don't know about ubuntu 13.04, but i know debian uses 'node' for the ham radio package
11:47 < booyaa|foo> boom
11:47 < wushu> hey guys i need some help/advice. i am running multiple servers on local host and have been using http-proxy to have them all run on port 80. the problem is that I have to start all these servers individually so it is a hassle managing this. does anone know if it is possible to start multiple servers from one script (on multiple threads)?
11:47 < wushu> *localhost
11:47 < mscdex> yeah 13.04 does the same it looks like.... but it has packages for node modules as "node-xxxxx"
11:48 < mscdex> kinda odd :-)
11:48 < mscdex> the_drow: i would be careful about install node from the official repo though, it's probably an ancient version
11:49 <@MI6> joyent/node: Ben Noordhuis v0.10 * 89dcf22 : doc: the build requires gcc 4.2 or newer - http://git.io/EeY48Q
11:49 < booyaa|foo> yeah use chrislea's ppas
11:50 < the_drow> mscdex: 0.6.19
11:50 < mscdex> yeah that's old :-)
11:50 < mscdex> latest is v0.10.7
11:50 < SomeoneWeird> that's ancient
11:51 < the_drow> bah :(
11:51 < the_drow> Ok thanks guys. That's why bower refuses to install.
11:52 < the_drow> Does node have an official PPA?
11:52 < bnoordhuis> the_drow: no
11:53 < alexwhitman> The unofficial one that most people use is https://launchpad.net/~chris-lea/+archive/node.js/
11:55 < ckknight> What do people recommend for building command-line interfaces in node.js?
11:56 < zot> ckknight: i've been using optimist (mostly) without complaint
11:56 < ckknight> I'll check it out.
12:24 < elliottcable> Anybody here working on OS X, and ever tested their app/site in a Windows VM?
12:24 < elliottcable> I'm new to this whole process (I usually use a seperate windows machine), and am trying to figure out the basics
12:24 < elliottcable> How do I share the parent machine's network? or access file:// URLs from within the client?
12:24 < elliottcable> or do I need to host on a port, locally, and then access that port somehow from the VM?
12:31 < BIMBO> !list
12:32 < BIMBO> http://stackoverflow.com/questions/tagged/node.js
12:32 < JSalter> Hello everyone
12:34 < JSalter> I recruit for tech start-up Entrago (Kentish Town, London) who are hiring a Javascript/Nodejs Developer to join their team & advance their recently launched web-based social media platform. I'm looking for talented candidates - does anyone know anyone who may be interested?!  Happy to send over further details via email! Jon
12:39 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:42 < Chiffon> hi all
12:42 < mscdex> what about a non-web based social media platform? :-)
12:46 < deoxxa> mscdex: they have that, it's called "outside"
12:46 < freon> transaction processing - I need to setup tests with a large amount of contrived test data. whats the most appropriate tool?
12:49 < theblackbox> hello all, I'm looking for (but can't seem to locate) a method of producing time coded/limited urls for accessing my app, does anyone know of such a module or method I might look into?
12:49 < freon> I'm using mocha to run my tests, but wondering if there's a handy tool for pre-loading test data.
12:49 < theblackbox> freon:  doesn't mocha have a setup/teardown method?
12:50 < freon> hmm, yeah, but I can imagine something that gives some structure to my test data. right now I'm just writing long arrays of json fixtures, and wonder if there might be a more disciplined approach
12:52 < theblackbox> ahh, I get you… I'm having a ball-ache trying to get headless browser testing working… "disciplined approach" is definitely the key principal
12:53 < freon> *nod*. I'm not even thinking browser yet, just gotta stress test my transaction engine.
12:55 < freon> as for time code links, if I follow you, I think the way to go is to store the links in a database, so that you can store expiration independently and privately of the generated link itself. then have a cron task tidy up expired items
12:55 < theblackbox> I used siege for that, but my app isn't too complex (mostly just an API and a client lib - which is what I need the browser tests for)
12:56 < theblackbox> freon: yeah I was hoping to avoid that route, but it seemed the logical way to go
12:56 < freon> if you're talking about private expiring links targetted to users, you don't want the user or expiration data embedded in the link itself, so you gotta store it.
12:59 < theblackbox> very true, I was thinking I could plug something into my current routes and it would provide said private expiring links
12:59 < theblackbox> some connect-like middleware perhaps
13:10 < shesek> freon, you don't have to store it
13:10 < shesek> you can also attach a salted hash of the expiration time, to ensure its originated from a link generated by the server
13:11 < shesek> e.g. view?id=<id>&expiry=<timestamp>&token=sha256(<id>,<timestamp>,<secret>)
13:12 < shesek> theblackbox, ^
13:16 < theblackbox> shesek: this is kinda what I was expecting, so I would be able to decrypt the sha param inside my routes and test it against date(now)?
13:16 < shesek> no, you don't decrypt hashes
13:16 < shesek> that's what makes them hashes :)
13:16 < theblackbox> I thought that was dubious ;)
13:16 < shesek> you create the expected hash and compare it with the one supplied by the user
13:17 < shesek> when you generate the link, you create the hash and give it to the user as part of the link
13:17 < shesek> when a request comes in, you create the hash again with your secret, and check if it matches whatever the user sent
13:17 < shesek> (and of course you check the expiry time didn't pass yet)
13:17 < theblackbox> ahh, so that's the "don't need to store it" comes in ;)
13:18 < shesek> yeah. you can just validate the link was created by your server by comparing the hashes
13:18 < freon> presumes you don't mind anyone seeing what the expiry date is
13:18 < shesek> and without the secret salter, the user can't generate the token himself
13:18 < shesek> if you care about that, you could just encrypt the whole thing
13:19 < shesek> any symmetric encryption would be fine
13:19 < theblackbox> sounds good
13:22 < LuckDragon> Hello, A co-worker and I are developing a node.js application. I have a windows PC and he has a Mac. We are having trouble with differences in SSH and even in pointing to the unit test folder (using mocha). Does anyone have any recommendations on OS interoperability
13:23 < niggler> differences in SSH LuckDragon ?
13:24 < LuckDragon> I may be getting some of by acronyms wrong, he is taking care of security. We are using restify and setting up the server to work on https instead of http. We are using self signed certificates for now. Whatever Mac uses for the process is different than whatever windows uses.
13:25 < niggler> oh SSL
13:25 < LuckDragon> also just pointing at files are different. So we are trouble pointing mocha at the right file locations
13:25 < LuckDragon> across platforms
13:25 < niggler> "pointing at files" -- you should be using path.join
13:26 < niggler> try path.join("foo
13:26 < niggler> path.join("foo","bar") on windows and osx
13:29 < LuckDragon> ok, I'll give that a tryin the package.json
13:31 < Hounddog> is there any known problem to installing dnode? am getting http://pastebin.com/uLCKA9BM
13:39 < syskk> how can i get the path a require() would resolve to ?
13:39 < syskk> i want to check if the file exists
13:39 < deoxxa> syskk: ...seriously?
13:40 < syskk> yes
13:40 < deoxxa> i mean, i believe that you want to do it
13:40 < deoxxa> but could you really not find the way to accomplish it?
13:40 < syskk> probably by reading the api docs -_-
13:40 < deoxxa> that would be a great start
13:41 < deoxxa> might i suggest taking a look-see at http://nodejs.org/docs/latest/api/all.html#all_require_resolve
13:41 < syskk> thanks
13:41 < deoxxa> and in future, in docs we trust
13:43 < LuckDragon> any suggestions for cross playform files paths in the package.json file? 
13:43 < LuckDragon> for example "node_modules/.bin/mocha --reporter spec"
13:44 < LuckDragon> needs to work on a Mac and on Windows
13:44 < deoxxa> LuckDragon: that specific example can be achieved by using just "mocha"
13:44 < jfreeman> hi all, i hope you're day is going well wherever you are.. i'm trying to get page.js working and am running into some dependency issues.. i'm on latest version of OSX.. and have latest versions of node and NPM installed.. may I paste what I'm seeing here?  I'm a newbie and could use the help
13:45 < deoxxa> jfreeman: paste what you're seeing into a pastebin with sane formatting, then paste the link in here. pasting code or logs into the channel will cause people to make fun of you...
13:45 < LuckDragon> thanks, that was perfect
13:45 < syskk> well that seemed to work
13:46 < jfreeman> swallowtail:page_js jfreeman$ npm install -d
13:46 < jfreeman> npm info it worked if it ends with ok
13:46 < jfreeman> npm info using npm@1.2.21
13:46 < jfreeman> npm info using node@v0.10.7
13:46 < jfreeman> npm info preinstall page@1.3.6
13:46 < jfreeman> npm WARN package.json serve@1.2.0 No repository field.
13:46 < jfreeman> npm info build /Users/jfreeman/Desktop/page_js
13:46 < jfreeman> npm info linkStuff page@1.3.6
13:46 < jfreeman> npm info install page@1.3.6
13:46 < jfreeman> npm info postinstall page@1.3.6
13:46 < jfreeman> npm info prepublish page@1.3.6
13:46 < jfreeman> npm WARN package.json growl@1.7.0 No repository field.
13:46 < deoxxa> jfreeman: niiiice.
13:46 < jfreeman> npm WARN package.json ms@0.3.0 No repository field.
13:46 < jfreeman> npm WARN package.json formidable@1.0.9 No repository field.
13:46 < jfreeman> npm WARN package.json fresh@0.1.0 No repository field.
13:46 < jfreeman> npm WARN package.json send@0.0.3 No repository field.
13:46 < jfreeman> npm WARN package.json bytes@0.1.0 No repository field.
13:46 < jfreeman> npm WARN package.json formidable@1.0.11 No repository field.
13:46 < jfreeman> npm WARN package.json range-parser@0.0.4 No repository field.
13:46 < jfreeman> npm info ok 
13:46 < jfreeman> whoops
13:46 < jfreeman> sorry
13:46 < jfreeman> just read your note more carefully
13:46 < jfreeman> SORRY EVERYONE
13:47 < jfreeman> lol
13:47 < jfreeman> need more coffee
13:47 < jfreeman> ok everyone, let me have it
13:47 < robdodson> :)
13:47 < jfreeman> i deserve it
13:47 < jfreeman> i was warned
13:47 < deoxxa> jfreeman? more like PASTEfreeman
13:47 < jfreeman> lol
13:47 < robdodson> do you guys know what this glob pattern would expand to?    {,*/}*.coffee
13:47 < robdodson> is it equivalent to **/*.coffee ?
13:48 < jfreeman> well, fwiw, here's the pastebin URL:  http://pastebin.com/yYvFndLx
13:48 < jfreeman> thanks in advance for any assistance
13:48 < Stumbler> *points and laughs*
13:49 < jfreeman> basically, i downloaded the page.js tarfile, went inside and tried to follow the directions on the vision media page that talks about how to run page.js
13:49 < jfreeman> i think i'm missing a lot of dependencies and can't seem to get them to come along
13:51 < robdodson> jfreeman: what are you trying to do?
13:52 < robdodson> i just downloaded the zip and ran npm install and then node examples and it worked
13:52 < jfreeman> i want to run the page.js examples
13:52 < robdodson> just run npm install, don't do npm install -d
13:52 < jfreeman> i want to do what you just did
13:52 < jfreeman> well, i started with just npm install
13:52 < jfreeman> but when that didn't work i thought tacking the -d on would help
13:52 < robdodson> what node are you running?
13:53 < robdodson> node -v
13:53 < jfreeman> v0.10.7
13:53 < robdodson> i'm on 0.8.17
13:53 < robdodson> what error did you get?
13:53 < jfreeman> hang on
13:53 < robdodson> i've had issues with 0.10.7 and some projects
13:53 < jfreeman> going to patsebin it
13:54 < jfreeman> http://pastebin.com/a75nPVVf
13:55 < jfreeman> i renamed the long 'visionmedia_page… directory name to just page_js
13:55 < jfreeman> so, you can see i'm inside that directory and running nom install
13:56 < robdodson> the no repository warnings are not a big deal i don't think
13:56 < robdodson> those modules just don't define a repository property in their package.json but they still get pulled down ok, at least for me
13:57 <@isaacbw> robdodson: v.10 made a few api breaking changes
13:57 < robdodson> when you run $ node examples what do you get?
13:57 < robdodson> isaacbw: yeah I figured. I've hung around 0.8.17 till all the stuff i depend on starts working again :D
13:58 <@isaacbw> sounds like you should move on to better maintained dependencies :P
13:58 < robdodson> isaacbw: yeah I'm trying to remember now what was blowing up for us… 
13:58 < jfreeman> robdobson: when i run node examples, the server starts and I can hit the page at port 3000 but the links all throw errors
13:59 < robdodson> what errors?
14:01 < robdodson> jfreeman: clicking around works for me. on the first link i get an error that some of the images aren't loading but most of them do
14:02 < jfreeman> robdobson: here's what i see when I click on 'album' http://pastebin.com/rAvZ99V7
14:02 < robdodson> yeah that's the 0.10 error i get!
14:02 < robdodson> Arguments to path.join must be strings
14:02 < robdodson> switch to 0.8.x
14:02 < jfreeman> that's all i see when i load that page
14:02 < jfreeman> ok. how do i downgrade using brew?
14:02 < jfreeman> please?
14:03 < robdodson> hmm…i am not a brew expert...
14:03 < jfreeman> yeah, i guess I should ask in #brew
14:04 <@isaacbw> wait wait, please don't start recommending people downgrade
14:04 < robdodson> oh sorry
14:04 < robdodson> don't downgrade to 0.8.x
14:04 < jfreeman> ok.. then i'll write the maintainer of page.js and ask them to make it work with 0.10
14:04 < jfreeman> nicely
14:05 <@isaacbw> jfreeman: or better yet, fork it and take it over!
14:06 < jfreeman> isaacbw: wish i had the skills..
14:06 < jfreeman> maybe it's just a matter of changing some version/link information in the make.. 
14:06 < robdodson> jfreeman: you just gotta find the places where path.join are being called and swap em to strings I guess. then do a pull request
14:06 <@isaacbw> it doesn't look like it's been touched in almost a year
14:07 < jfreeman> robdobson: thanks.. i'll check into it later.. now i gots to go back to doing my day job!  ;-)
14:07 < jfreeman> thanks for your help!!  :-)
14:07 < robdodson> https://github.com/visionmedia/page.js/search?q=path.join&source=cc
14:07 < deoxxa> day job? more like PASTE job
14:07 < deoxxa> HA HA
14:07 < robdodson> BOOM!
14:07 < robdodson> jfreeman: good luck :D
14:08 < robdodson> so… does anyone wanna tell me what this pattern expands to:  {,*/}*.coffee
14:08 < robdodson> does that mean, nothingness or something preceded by slash..?
14:10 < deoxxa> robdodson: {,*/} will expand to [""].concat(fs.readdirSync(process.cwd()).filter(function(e) { return e.match(/\/$/); }))
14:10 < deoxxa> robdodson: so like ["", "node_modules", "public"] for example
14:10 < deoxxa> (i'm talking in javascript for some reason, but you get me)
14:11 < ForceBlast> Hello all.  I've written a private module that I'm trying to install on another project via "npm install /path/to/module/folder" and it just hangs.  I'm using node 0.10.7 and npm 1.2.21 for Mac.  I can't find anything relevant on Google/SO.  I've added the "-dd" option and it seems to hang for a really long time on "npm verb lock …".  Eventually it finishes with the error "npm ERR! TypeError: Object.keys called
14:11 < ForceBlast>  on non-object".  Any ideas?
14:11 < robdodson> so any folder in the cwd?
14:12 < deoxxa> robdodson: including cwd
14:12 < ForceBlast> I'm in the new project's folder as the cwd.  I have tried the npm install using both fully qualified path and also a relative path.  Both have the same result.
14:12 < robdodson> deoxxa: ok, cwd and any folder in cwd
14:13 < robdodson> deoxxa: thanks!
14:13 < deoxxa> \o/
14:13 < ForceBlast> Ooops, I thouht you were talking to me.
14:13 < ForceBlast> Sorry
14:14 < deoxxa> ForceBlast: paste the full logs in a gist or something
14:14 < deoxxa> ForceBlast: and perhaps the package.json from the thing you're trying to install
14:15 < ForceBlast> Okay, Give me a few.  I've used git plenty in a private setting but I've never created a gist or anything.  Let me get that setup.
14:15 < ForceBlast> Thanks :)
14:15 < deoxxa> gist.github.com allows anonymous submissions (i think!)
14:15 < ForceBlast> Cool.  I'll give it a shot.
14:22 < AlienProject> Anyone here uses riak-js?
14:28 < ForceBlast> deoxxa: Here you go… Log: https://gist.github.com/anonymous/7e7f2849340ea5de3de2
14:28 < ForceBlast> package.json: https://gist.github.com/anonymous/62a018fe7737d50d78a2
14:29 < deoxxa> ForceBlast: something that strikes me as odd straight away is the lack of version in the devDependencies entries
14:29 < ForceBlast> Oh, let me try correcting that.
14:29 < ForceBlast> I copied that from a tutorial.  Typically I use "*"
14:30 < ForceBlast> … and just get the latest.
14:31 < ForceBlast> Changed it to "mocha": "*", "should": "*"   (Same result)
14:31 < deoxxa> hrm
14:32 <@isaacbw> I prefer to use ~ versions so that I can make sure nothing breaks with major dependency changes
14:33 < ForceBlast> I hate to do this.  But something just came up and I have to step away.  I'll leave this open in case you come up with any other ideas.  Thanks so much for your help so far.  Back in a while...
14:33 < deoxxa> no problem
14:47 < theblackbox> hey all I'm trying to get testing working in CasperJS/PhantomJS but I'm stumped as to why async functions seem to great the evals - I would have expected this to be standard practice but I can't seem to find examples or help anywhere… if someone knows something I should read then I'd appreciatete the pointer. 
14:48 < kurteknikk>  I might have found a memory leak in: https://github.com/mongodb/node-mongodb-native can anybody help me here ? (before i issue a bug report)
14:51 <@isaacbw> best to just issue the report and see what they have to say
14:51 <@isaacbw> though 'memory leak' isn't very meaningful in the context of javascript
14:57 < houser> I think there is one huge flaw with node.js which is reson enough to not choose it.....its one huge mess of callback functions...and the libs that exists to try to cut down on this are not really usable :/  Normally I really love lambdas and closures and such...its awesome...but in node.js it just gets to be to much.  Is it ever gonna get better?
14:57 <@isaacbw> does anyone know the dbms that firebase uses? Is it proprietary?
14:58 <@isaacbw> houser: usually that's a design issue
14:58 < deoxxa> houser: it gets better when you write better code :>
14:58 <@isaacbw> the short answer is no
14:59 < pachet> houser better is relative
15:00 < pachet> if it moved in a direction that you thought was better re the callback issue, i might not think it had improved
15:00 < houser> pachet, but why is it so good if you have 10 levels of callbacks i would not call that pretty code
15:00 <@isaacbw> that's your code, not node
15:01 < pachet> dont nest that deep
15:01 <@isaacbw> there are almost certainly ways you could reorganize
15:01 < pachet> compose from smaller pieces
15:01 < astropriate> i have an array property of my document that is a reference to another collection's object.  but when i loop over it and copy the objects/documents inside the array.   all i get are {_type: bsonobject, _id: dfdskfsdkfsdlfs}
15:01 < flying_turtle> in a test environment, how can I launch node from a makefile, redirecting stdout to some log file?
15:02 <@isaacbw> node app.js > log
15:02 < SomeoneWeird> lol
15:02 < houser> isaacbw, well if you have layers of socket.io and database calls and result sets and what not you cant really avoid it
15:02 < SomeoneWeird> houser, yes, you can
15:02 < houser> SomeoneWeird, how?
15:03 < SomeoneWeird> don't use inline functions
15:03 < SomeoneWeird> function a() { console.log('lol'); }; something(a); instead of
15:03 < SomeoneWeird> something(function() { console.log('lol') });
15:03 < innociv_> How can I close a socket.io connection and stop the client from attempting to reconnect?  It seems to automatically attempt reconnects when disconnect() is called. And to be clear, I DO want it to reconnect when it times out and such, just not when an actual disconect() is called.
15:03 < flying_turtle> isaacbw: doesn't work, everything outputs to stdout and make never stop 
15:04 < houser> SomeoneWeird, yeah thats all good but if you need to wait for the async to return
15:04 < Xymon> :3
15:04 < SomeoneWeird> houser, ...?
15:05 <@MI6> joyent/libuv: Ben Noordhuis v0.10 * c53fe81 : unix: implicitly signal write errors to libuv user - http://git.io/pFlN2w
15:06 < pachet> houser smaller pieces. it reduces the accountability of individual services
15:06 < pachet> separate the socket io stuff from the db calls, if you need a place to start
15:08 < houser> true
15:08 < alfonsodev> anyone using zombie.js to confirm if it works with latest node.js version
15:08 < alfonsodev> ?
15:09 < innociv_> ...
15:09  * innociv_ googles what that is
15:09 < innociv_> Cute
15:09 < ilovegiraffes> I'm using it with the latest node.js version, alfonsodev
15:09 < innociv_> It was updated 3 days ago, you'd think it works.
15:10 < flying_turtle> so no way to launch node from make, with make exiting right after?
15:10 < nathan7> ..?
15:10 < ilovegiraffes> I don't think I can use it for my purposes, since it's giving me a huge memory leak
15:10 < nathan7> flying_turtle: What's so special about node that make can't run it according to you?
15:10 < innociv_> Why would you have no header, though?
15:10 < alfonsodev> thanks @ilovegiraffes
15:11 < flying_turtle> nathan7: It runs but I'd like make to exit right after, instead of waiting for node to finish
15:11 < pachet> flying_turtle then you're going to have to detach that process
15:12 < pachet> i dont recommend doing what you're attempting, on the record
15:12 < nathan7> flying_turtle: You mean like nohup, forever, or screen?
15:12 < nathan7> flying_turtle: forever is pretty win if you want to keep a service running in the background
15:12 < pachet> flying_turtle just have a little script that you call from make that spawns a new process for the node script you want to run
15:13 < innociv_> Nevermind 
15:14 < flying_turtle> Trying forever, thanks :)
15:17 <@isaacbw> or just put a & at the end
15:17 <@isaacbw> as others have said though, that's a terrible way to use make
15:19 <@isaacbw> actually no
15:19 < flying_turtle> isaacbw: Why?
15:19 <@isaacbw> don't do that
15:22 <@isaacbw> I feel terrible for even recommending it
15:25  * pachet gives isaacbw a can of coke
15:27 < flying_turtle> I'm ok not doing it, but what's the rationale behind that? It's practical to just launch my app with "make start"
15:27 < nathan7> flying_turtle: npm start
15:27 < nathan7> flying_turtle: make is a build tool
15:31 <@isaacbw> or if you want to stick with system tools, just write a shell script
15:32 < therealkoopa> If you're using Function.bind/_.bind (e.g. var F = _.bind(...)) is it possible to get the underlining function that F calls?
15:32 < freeside> isaacbw: indeed. i couldn't have said it better myself.
15:34 < flying_turtle> so it's ok if I use a shell script that's referenced in package.json to be able to use npm start?
15:35 <@isaacbw> or I think you should be able to just put shell commands in the package.json's scripts field
15:36 < ilovegiraffes> I have a page I need to monitor every 20 seconds for changed in an element, then notify me in the console. But to get to that page, I have to log in first.
15:36 < ilovegiraffes> Does anybody know a way to accomplish this?
15:38 < Domenic_> therealkoopa: no
15:39 < bnoordhuis> i was just about to say the same thing :)
15:40 < bnoordhuis> v8 has some built-in functionality for getting the object it's bound to
15:40 < bnoordhuis> but that's about it (and said functionality is hidden behind a switch)
15:40 < bnoordhuis> useless info really but now you know
15:40 < therealkoopa> bnoordhuis: ha, thanks
15:42 < flying_turtle> isaacbw: Perfect, thanks a lot for your time
15:48 < fl0w> I might be on the wrong channel, but I have a question. I'm experimenting with WebGL and would like to create a server for whatever I'm going to draw out inside the canvas. So basically a "chat-server" transporting messages back and front. For this I'd like to use Node.js. However, I might be missing the point but what's the use cases or drawbacks of using Node.js with a regular TCP connection versus a Websocket?
15:50 < fl0w> Any input or shared thoughts, resources (what have you) is appreciated, I'm kind of lost here.
15:51 < jBryan> why is my response from nodejs duplicates?
15:55 <@isaacbw> fl0w: you might take a look at firebase. I think they have a demo of a collaborative drawing app
16:07 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:08 < booyaa|foo> pretty certain o'reilly did a canvas/websockety drawing demo too
16:11 <@isaacbw> either way, sure node would get the job done
16:21 < Sven_vB> fl0w, if faye works out, use that and don't care yourself about the details of how messages are transmitted.
16:29 < aandy> fl0w: are you asking about the transport itself? depends what your alternatives are. websocket seems like an obvious choice if you'll be doing two-way communication. depending on the frequency of updates, you could do a "long" post to the server or websockets. ws will (out of the box) give you some stuff like reconnection and error handling
16:41 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:42 < fl0w> aandy: Well, messages will be short but frequent. I'm actually more worried about the latency than anything else.
16:45 < aandy> unless you want to roll out something of your own (and using http?) then ws is probably a good idea. one connection, "no" http overhead (over time), only waste being heartbeats to handle the ongoing connection
16:47 < fl0w> aandy: Yea, sounds good. But if non-http related connectivity is an option (which it is), is there any reason for me to consider it over websocket? That way I could simply use the built-in net.Socket to work with the client.
16:48 < fl0w> Or would I encounter issues down the road, because the client application will be stricly browser-based. 
16:48 < fl0w> strictly*
16:52 < Sven_vB> fl0w, check out the google robots game, it has latency as a priority too because it is a shooter game ;)
16:53 < fl0w> Sven_vB: I'll check it out.
16:53 < aandy> fl0w: as long as you handle errors and reconnection, then no, that'll be perfectly fine (and low latency)
16:59 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:08 < fl0w> I guess I'm going to do Websockets, but there isn't a native library for Node.js as far as I can see, any recommendations on a stable/good/easy-to-use npm package for Websockets? 
17:08 <@isaacbw> socket.io
17:09 < pachet> or sockjs
17:09 < fix2fax> i was about to say socket.io too
17:10 < s5fs> don't forget about shoe, stream all the things
17:10 < s5fs> fwiw streams are freakin' sweet
17:12 < mbroadst> does anyone have v8-profiler working with 0.10.4? I'm having trouble building it on ubuntu 13.04
17:12 < fl0w> Thanks for all your help guys. Much appreciated.
17:15 < aandy> good luck with your project :)
17:21 < Sven_vB> s5fs, where can i get more info about shoe?
17:22 < overra> Sven_vB: https://github.com/substack/shoe
17:23 < Sven_vB> thx
17:23 < s5fs> ^^
17:24 < jtomasrl> to verify if a variable is set should if use "if (variable)" or "if (!!variable)" ?
17:31 < r1card> Folks.
17:31 < r1card> What would happen if I start replacing global objects.
17:31 < r1card> There's no protection against it, is there.
17:36 < Sven_vB> jtomasrl, it can be set to a value of false or 0. ;D for most cases, just passing it to if should work. where not, better use a real isset function. underscore should have one included.
17:37 < jtomasrl> Sven_vBQ thanks
17:37 < Sven_vB> r1card, most probably you'd only replace your reference to them, instead of the objects themselves. also, JSLint might warn you about stupidity.
17:39 < astropriate> hello friends node not work
17:40 < astropriate> I get Segmentation fault (core dumped)
17:40 < astropriate> how can i get a segfault with javascript/v8?
17:40 < astropriate> is this actually memory leak?
17:43 < niggler> you need to give more details astropriate 
17:47 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
17:48 <@isaacbw> the short answer is no, javascript "memory leaks" won't cause segfaults
17:49 < r1card> Sven_vB, sure, my point was, it's all by convention.
17:49 < r1card> Sven_vB, like usual JS
17:58 < oti8> Using Q module (https://gist.github.com/objectiveSee/5629509) can I pass the result value of one promise to the next, w/o using an intermediate function (see my code on line 6 & 7)?
17:58 < Sven_vB> r1card, if the global objects aren't sealed or something alike, you can overwrite parts of their functionality and thus extend or randomize the workings of other code that uses them. this can be a feature.
17:59 < r1card> Sven_vB, are they sealed?
17:59 < Sven_vB> r1card, depends on the environment that provides them.
17:59 < r1card> Sven_vB, well, Node.JS :)?
17:59 < Sven_vB> r1card, dunno from head. you'd have to use introspection to know for sure.
18:00 < r1card> Ok.
18:00 < r1card> Thakns
18:00 < r1card> Thanks*
18:01 < Sven_vB> r1card, also be aware that when two moules require() another third module, they might both get a copy-on-write protected proxy of that module, keeping them from influencing each other at least through the require()d reference.
18:02 < nathan7> Sven_vB: ..no environment does that.
18:02 < r1card> Sven_vB, hmmm how would copy on write work in V8?
18:02 < Sven_vB> might also be that both get completely separate instances.
18:03 < r1card> Sven_vB, when you load a module won't it be the same module
18:03 < Sven_vB> r1card, i have no special knowledge of V8, but i think the inheritance scheme can do something pretty close to copy on write
18:04 < Sven_vB> r1card, in one project i had ecstatic use mime, and in order to modify it, also my program required mime. however ecstatic was unaffected by modifications to my program's instance of mime.
18:04 < Sven_vB> so i guess they had different instances or different views on the mime module.
18:05 < Sven_vB> nathan7, some future environment might do it, maybe to make bad old code fail early.
18:05 < r1card> Sven_vB, interesting.
18:05 < nathan7> Sven_vB: That's just local dependencies at work
18:06 < nathan7> Sven_vB: You get your own copy of the module - look in the respective node_modules dirs
18:06 < nathan7> There's no magic going on there.
18:10 < Sven_vB> npm didn't install a mime for ecstatic, because a mime module already existed at the same level where ecstatic was installed
18:11 < Sven_vB> my program did not have its own node_modules at that time. therefor i think both used the same mime.js
18:12 < Sven_vB> if they are expected to affect each other, i'll retry with a reduced example
18:12 <@isaacbw> it didn't have a node_modules? what?
18:13 <@isaacbw> I think you need to take a step back and test your understanding
18:13 <@isaacbw> maybe read the docs on package.json
18:16 < Ritzton> hello
18:17 < Ritzton> I would like to use Express.js + Socket.io + RedisStore for sessions, would you have links which show the proper way to make it please for the app.js ?
18:17 < willwh> https://github.com/alphapeter/socket.io-express
18:17 -!- mode/#Node.js [+o sblom] by ChanServ
18:19 < arsdmthe> anyone compiled node on android ?
18:24 < oreth> ritzton: I prefer https://github.com/techpines/express.io
18:25 < oreth> arsdmthe: i've compiled it on a pi which is arm based.
18:25 < oreth> takes about an hour and a half
18:25 <@isaacbw> lol
18:26 <@mbalho> theres a pi distro on nodejs.org/dist
18:26 <@mbalho> err pi binary
18:26 <@mbalho> #protip
18:26 < oreth> oh, nice.
18:26 < oreth> thanks.
18:27 < mscdex> raspberry.py
18:27 < Noturno99> do you guys have any node project online to show us?
18:27 < mscdex> Noturno99: npmjs.org
18:27 < oreth> Noturno99: i have two apps i can show you source for
18:27 < oreth> http://mixtrip.herokuapp.com
18:27 < oreth> and http://hash.codevinsky.com
18:27 < Noturno99> thanks
18:28 < Noturno99> do you recommend any server to host my apps?
18:28 < oreth> heroku is easy to start with
18:28 < oreth> it's free
18:28 < oreth> as long as they are small apps
18:28 < mscdex> free*
18:28 < mscdex> ;-)
18:28 < oreth> notice my qualifier :P
18:29 < oreth> i have a macmini at macstadium
18:29 < oreth> $25/mo hosting $25/mo machine rental
18:29 < bnoordhuis> i hesitate to ask but... why?
18:29 < oreth> bnoordhuis: my local environments are all macs
18:29 < Noturno99> great
18:29 < oreth> i'm not a linux genius.
18:30 < oreth> the difference between debian 7 and OS X is slight enough that things just didn't work.
18:30 < mscdex> slight? heh
18:30 < oreth> mscdex: that was a tongue-in-cheek remark
18:30 < oreth> i like macs. macs like me. i'm a mac guy. why not have a dedicated machine to do whatever the hell I want with?
18:31 < Noturno99> have you tried login with facebook using passportjs?
18:31 < oreth> nope
18:31 < oreth> i've not done any facebook stuff
18:31 < Noturno99> when facebook redirected the url I've got an error
18:31 < oreth> what error?
18:31 < Noturno99> that the domain name is not allowed by the app config
18:32 < oreth> is that the exact error?
18:32 < Ritzton> oreth> thanks express.io is interesting
18:32 < Noturno99> but I have everything configured properly
18:32 < oreth> can you paste the exact error
18:32 < Noturno99> yes
18:33 < oreth> (rephrase: i've not done any node+facebook stuff)
18:33 < oreth> (so far, it sounds like your facebook app isn't configured properly)
18:34 < Noturno99> I have this: Given URL is not allowed by the Application configuration.: One or more of the given URLs is not allowed by the App's settings. It must match the Website URL or Canvas URL, or the domain must be a subdomain of one of the App's domains.
18:35 < oreth> http://stackoverflow.com/questions/14474122/given-url-is-not-permitted-by-the-application-configuration
18:35 < oreth> first response on google
18:35 < oreth> the answer there should fix everything
18:35 <@isaacbw> Noturno99: this isn't really a node issue
18:35 < Ritzton> oreth> where is express.io storing session by default ? in memorystore ?
18:35 < oreth> Ritzton: i believe so.
18:36 < Noturno99> the problem is in facebook page
18:36 < d4rklit3> substack, are you around? I am trying to find the best way to use browserify as middleware
18:36 < d4rklit3> err for express
18:37 < Noturno99> I wanna use in my machine for now, should I keep the app domain as localhost?
18:37 < oreth> Noturno99: yes
18:38 < Noturno99> and I put the url as: http://localhost:5000/
18:38 < oreth> read this as well: http://stackoverflow.com/questions/3289214/how-can-i-use-localhost-while-developing-facebook-graph-website
18:38 < Noturno99> the page facebook will redirect
18:38 < oreth> I guess I'm not familiar enough with what you're doing to be much more help than that
18:39 < oreth> Facebook Authentication is a bit wonky, if you've never done it before.
18:39 < Noturno99> thanks
18:39 < oreth> but that's true for just about all OAUTH methods
18:39 < Noturno99> I can do twitter and google easily
18:39 < Noturno99> but facebook.. ¬¬
18:40 < oreth> yeah
18:40 < oreth> can you link code?
18:40 < oreth> pastebin it or something?
18:40 < elliottcable> Is there a channel for support with Mocha?
18:41 < Noturno99> it is the example inside passport example: https://github.com/jaredhanson/passport-facebook/tree/master/examples/login
18:42 < oreth> it's straight up the example?
18:42 < oreth> the only thing you added was the key/secret?
18:43 < Noturno99> yes
18:44 < oreth> and your server is running at http://localhost:3000
18:44 < oreth> ?
18:44 < frk131> hi i try to extend v8 but everytime i run getFunction() on Local<FunctionTemplate> i get a segfault, https://gist.github.com/anonymous/54334744f14864c9b242#file-gistfile1-cpp-L69  any ideas?
18:46 < Noturno99> I changed to another port just to test...
18:46 < oreth> and you changed the port on the callback as well
18:46 < oreth> ?
18:46 < Noturno99> yes
18:46 < oreth> i'm building the test so that i can help please hold
18:51 < Noturno99> thanks, buddy! 
18:51 < Noturno99> I have always the same error...
18:55 < oreth> works for me
18:55 < Noturno99> what is your app configuration?
18:56 < oreth> http://o7.no/16909XE
18:56 < oreth> then i goto http://localhost:3000/login
18:57 < filipminev> guys, I have a question about node v0.10.x
18:57 < elliottcable> Ugh.
18:57 < oreth> just… ask  it?
18:57 < elliottcable> Mocha seems to be mostly unmaintained.
18:57 < filipminev> is SIGKILL removed? i get error in this line process.on('SIGKILL', .....);
18:57 <@MI6> joyent/node: isaacs master * 52adc0d : test: Fix test-deprecation-flags - http://git.io/0KkGhw
18:57 < elliottcable> Or at least, from a submitting patches point of view.
18:58 < filipminev> it worked fine in v0.8.15, and it's crashing as i try to update to v0.10.7
18:58 < d4rklit3> does express.get usage requre express.router in the middleware?
18:58 < ManneW> Hi everyone! What is the preferred way of handling undefined properties? In my case I'm receiving some data through a WebSocket and want to extract "data.foo.bar.far" (for example).
18:58 < Noturno99> the same here, but mine does not work
18:58 < ManneW> Should I have lots of if statements or is there some better way? :)
18:58 < gigadude> how do I get the command-line options passed to the current node invokation from inside my script (i.e. I want to know if --harmony was passed to node; node eats it before process.argv gets it)
18:59 < oreth> Noturno99: paste a SS of your config and dump your code to pastebin, just to be sure.
18:59 < filipminev> oi, lots of questions :) mine got buried :S
18:59 < oreth> filipminev: what error do you get?
18:59 < filipminev> oreth: Error: uv_signal_start EINVAL
19:00 < windsurf_> I want to write a program that stitches a batch videos together with cross fades or fade in/outs. Anyone have any leads on this? so far I have node-fluent-ffmpeg and know that ffmepg can do fade in/out on a single clip and can concat clips (but not the two in one action)
19:00 < s5fs> ManneW: i usually just use typeof to see if something is defined
19:00 < oreth> windsurf_: you'll have to write a module for it.
19:00 < bdiu> I really like the ease of deployment to modulus/heroku... is there way to set up something similar on a private box?
19:01 < Noturno99> here: http://pastebin.com/6CqpVJnx
19:01 < oreth> ManneW: you could do the lazy thing and wrap it all in a try/catch
19:01 < oreth> ManneW: also: look into "assert"
19:01 < windsurf_> oreth: unless there's another module someone can recommend?
19:01 < s5fs> ManneW: like if (typeof(data.foo.bar.baz) != 'undefined') { console.log('we haz data'); }
19:01 < oreth> Noturno99: and a screen shot of your facebook config?
19:02 < d4rklit3> i am trying to make sense of this
19:02 < d4rklit3> https://github.com/ForbesLindesay/browserify-middleware
19:02 < ManneW> s5fs: Ah, didn't know that you could use typeof for the whole "chain" (I thought that would cause an error as well)
19:02 < d4rklit3> it uses app.get()   doesn't this require router?
19:02 < gigadude> never mind, found it (process.execArgv)
19:03 < oreth> d4rklit3: sorry. I know nothing about browserify
19:03 < ManneW> oreth: Perhaps. I did a quick try/catch before, but the error wasn't caught. Never really looked closer into it, though :) I'll check out assert!
19:03 < bdiu> anyone use stagecoach?
19:03 < d4rklit3> oreth  well in express, can you do an app.get without app.use(app.router)
19:03 < s5fs> ManneW: you could also use an isset function, like from underscore or whatever
19:03 < ManneW> s5fs: Will check that out as well :)
19:04 < ManneW> oreth s5fs Thank you both for the help! :)
19:04 < oreth> d4rklit3: absolutely
19:04 < oreth> app.get doesn't just pertain to routes. it also is app level config and variables
19:04 < d4rklit3> aah ok
19:05 < oreth> however.
19:05 < oreth> app.get('/',function() {..}); requires the use of router or another middleware handler
19:05 < oreth> also: why you would use express without app.router is beyond me
19:05 < d4rklit3> i am using it
19:05 < Noturno99> here: http://postimg.org/image/aganlu9yx/
19:05 < d4rklit3> its assigning the router after my middleware and static assignments
19:06 < d4rklit3> but this browserify middleware is using app.get without a router
19:06 < Noturno99> oreth: pretty much the same as yours
19:07 < oreth> Noturno99: so you're running the server on 3000 now and it still doesn't work?
19:07 < oreth> (after adding id and key)
19:07 < Noturno99> nothing...
19:07 < oreth> d4rklit3: is it not working? or is it one of those "How exactly is this working?" questions?
19:07 < Noturno99> I am using win7 right now
19:07 < d4rklit3> the latter oreth 
19:07 < d4rklit3> im trying to understand what im reading here
19:08 < oreth> oh. gotcha.
19:08 < oreth> Noturno99: are you on a school or work network?
19:08 < Noturno99> work
19:09 < oreth> I have no idea.
19:09 < oreth> i remember having this issue before
19:09 < oreth> create a new app and try again.
19:09 < Noturno99> okay
19:10 < oreth> sometimes, facebook apps seem to get "stuck"
19:10 < Noturno99> hahahahaha
19:10 < Noturno99> what did you do to create your app?
19:10 < Noturno99> maybe I can compare your steps...
19:10 < oreth> https://developers.facebook.com/apps
19:10 < oreth> click "Create New App"
19:10 < oreth> Give it a  name "passport-js"
19:11 < oreth> Once it loads, make sure everything is correct before you click "save changes"
19:11 < Noturno99> did you choose any hosting in the checkbox?
19:11 < oreth> nope.
19:11 < oreth> don't need it.
19:11 < oreth> not for local dev, anyhow
19:12 < oreth> if you selected that last time, there may have been some settings somewhere else that got futzed
19:12 < oreth> i set the appdomain to localhost
19:12 < oreth> and the siteurl to http://localhost:3000
19:12 < Noturno99> okay
19:12 < oreth> then clicked saved
19:12 < oreth> nothing else
19:13 < Noturno99> oreth: I'll try here
19:14 < Noturno99> oreth: now it is working...
19:14 < Noturno99> hahahahahahahah
19:14 < Noturno99> what???
19:14 < oreth> it worked, didn't it
19:14 < ManneW> s5fs: I couldn't get it working. If I have "data.foo.bar.far" and, for example, foo is undefined, I get an error when trying to do "typeof data.foo.bar.far". Do I have to check each part of the "chain" separately? I was hoping there were some way to not have "if (typeof data.foo) …if (typeof data.foo.bar) … and so on :)
19:14 < Noturno99> oreth: yeah, thanks a lot, buddy!
19:14 < Noturno99> but I don't know what happened, but... anyway, thanks for your help!
19:14 < oreth> no problem
19:15 < erhlee> clear
19:16 < fix2fax> any good suggestions where to look at NodeJS UDP servers?
19:17 <@konobi> fix2fax: one of the tftp ones?
19:17 < fix2fax> konobi, my end goal is audio streaming. i just started experimenting with nodejs so looking for any good pointers
19:19 < erhlee> clear
19:20 < _6a68> fix2fax: maybe start here http://pedromtavares.wordpress.com/2012/12/28/streaming-audio-on-the-web-with-nodejs/
19:22 < sshaginyan> guys quick question. I'm creating a child_process which in tern is creating processes. When I kill the child process however, it doesn't kill it's own children.
19:22 < fix2fax> _6a68, thanks for the link, but as far as i know icecast (and shoutcast), both run over TCP. that is actually what my project is all about- alternative to shoutcast and icecast
19:22 < sshaginyan> HOw would I go about this?
19:22 < _6a68> fix2fax: oh, cool!
19:23 < fix2fax> goal of my life- remove that 5 sec broadcast delay :)
19:25 < frk131> hi i try to extend v8 but everytime i run getFunction() on Local<FunctionTemplate> i get a segfault, https://gist.github.com/anonymous/54334744f14864c9b242#file-gistfile1-cpp-L69  any ideas?
19:26 < oreth> sshaginyan: because each individual process is it's own entity, killing one will not kill it's children
19:26 < oreth> you'd have to catch the kill command in the child, and then kill all child processes individually
19:26 <@isaacbw> so I managed to break chrome and make it explode with new processes
19:27 <@isaacbw> yay
19:27 < oreth> isaacbw: that's not hard to do. it's chrome :(
19:27 <@isaacbw> it's usually a pretty solid piece of software
19:28 < sshaginyan> oreth I can't do a kill on a gorup process id?
19:29 < oreth> i suppose you could, but then you'd kill the main process as well
19:30 <@konobi> fix2fax: audio streaming (especially if in combo with video) is pretty damn tricky
19:31 < fix2fax> konobi, yeah i realize it will take me a while. especially since I'm the beginner. but it looks very promising to do this project using nodejs and websockets
19:31 < fix2fax> it will be audio only btw
19:35 < Sven_vB> fix2fax, could it be the delay is caused by conservative buffer lengths in the server or client? if you want absolutely no delay, make sure none of both use a buffer... or at least a very tiny buffer if not having one at all fails
19:35 <@isaacbw> you'll certainly run into performance issues trying to do any sort of non-trivial audio processing with node
19:36 <@konobi> fix2fax: have a read of the bbc iplayer technical blog, lots of info there on how they got past sync issues
19:36 < fix2fax> konobi Sven_vB thanks
19:38 < Noturno99> hey guys, what is the command to highlight somebody here in the channel's chat?
19:38 < fix2fax> Noturno99, write their name and then the message
19:38 < Noturno99> fixfax2, does it work?
19:38 <@isaacbw> there's no command. Most clients highlight lines when your nick is mentioned
19:38 < Noturno99> fix2fax, sorru
19:38 < fix2fax> Noturno99 yes it worked :)
19:39 < Noturno99> okay, 'cause i've tried many times and my client here does not show anything different
19:39 < Noturno99> ahhahahahahaahah
19:39 < Noturno99> I'm using x-chat
19:39 < fix2fax> yeah Noturno99 , it depends on the client. 
19:39 < Noturno99> okay
19:40 < mscdex> xchat can do highlighting
19:40 < Noturno99> changing a little bit, node is one of the most fantastic tools created in the last years!
19:50 < oddover> hi all. I'm fairly new to node.js. I'm having trouble. I'm creating a custom module, and in it, I'm defining a function that returns some data from a postgres database. The issue is getting that data back out to the main program that uses the module.
19:50 < oddover> http://pastebin.com/yVqkXNnB
19:50 < oddover> that's part of my code
19:51 < oddover> if I console.log(fc) inside of the query function, it logs the right data, but if I do it outside (right before the return), it says fc is undefined)
19:52 < RLa> make sure you understand what are async operations
19:52 < gdbz> thats because the return is called before the query is finsihed. 
19:53 < oddover> ok. I thought that might be the problem, but how do I resolve it?
19:53 < gdbz> You should use callbacks instead. 
19:54 < oddover> got a good example?
19:54 <@isaacbw> every single node example uses callbacks
19:54 < frk131> hi i try to extend v8 but everytime i run getFunction() on Local<FunctionTemplate> i get a segfault, https://gist.github.com/anonymous/54334744f14864c9b242#file-gistfile1-cpp-L69  any ideas?
19:55 < Industrial> ecstatic from npm fails to install, anyone know what's up? https://gist.github.com/Industrial/0b597d4e13fc43a21d7e
19:55 < upstream> why would you use -e (--eval) versus -p (--print) when using the node binary to run some JS?
19:55 < upstream> I don't understand the differences, the -p seems to just print "undefined" always after your code is executed
19:56 < nathan7> node -p '1 + 1'
19:56 < nathan7> node -e '1 + 1'
19:56 < upstream> ah I see
19:56 <@isaacbw> -g nodejs example @ oddover 
19:56 < purr> oddover: node.js <http://nodejs.org/>
19:56 <@isaacbw> -g node examples @ oddover 
19:56 < purr> oddover: Node.js Web Application examples/tutorials - Stack Overflow <http://stackoverflow.com/questions/3823403/node-js-web-application-examples-tutorials>
19:57 < Industrial> jesusabdullah: ping
19:57 < frk131> really nobody can help me, i spend last 4 days with this segfault :(
19:57 < upstream> so does node -p mimic more the results of running in the node repl ?
19:57 <@isaacbw> frk131: you might not want to spend time with v8 if you don't know your way around c++. It's miserable enough to use *with* c++ knowledge
19:58 < mscdex> gah, pdf.js has no node.js build target :-\
19:58 < Jester831> Eyy, I'm getting this error "Error: ENOTDIR, rename '/tmp/ea5210cf4fe61490a1692f4685859d03/2106316_460s.jpg'" when using fs.rename
19:58 < Jester831> any insights would be appreciated
19:59 < mscdex> Jester831: does the destination path (minus the filename) exist?
19:59 < Jester831> yea
19:59 <@isaacbw> we need a #node.js-help channel for simple questions
19:59 < ashnur> É)
19:59 < ashnur> :(
19:59 < Jester831> yea we do
19:59 < frk131> isaacbw: yeah, i really try to learn but i need a project for that, and v8 looks awesome, i created objects, functions, now i refactored my code and it fails. now i want to learn why. most of my code are comments to learn :)
19:59 <@isaacbw> Jester831: (like yours ;) )
19:59 < Jester831> oh mabye not
20:00 < ashnur> i barely get any responses here when i have questions, now i will have to ask them at two places?
20:00 < Jester831> I assumed compound.root would work as c.root wihtin my controller
20:00 <@isaacbw> frk131: learning c++ with v8 isn't going to work very well
20:00 < Jester831> good call, I was chasing the wrong rabbit
20:00 < Industrial> ashnur: the inverse would be moving a subset of people here into another channel and actually answer questions there :P
20:01 < frk131> isaacbw: i think i have a v8 related problem, not c++.
20:01 < segomos> v8 is the best place to learn c++
20:01 < Industrial> with another help channel, I don't think anyone is going to know the difference (anyone new would be joining #node.js anyway?) and it'd result in lots of questions and then referrals instead of answers ..
20:02 < _6a68> isaacbw: or a #node.js-dev channel
20:02 < upstream> so what is node -p doing exactly, is it wrapping the entire string in something like console.log? what if the input to node -p was multi-line?
20:02 < _6a68> isaacbw: to filter out non-newbish questions
20:02 < segomos> it's how perl deals with noobs
20:02 < Industrial> _6a68: I would assume it would be about development to nodejs, not it's ecosystem
20:02 < _6a68> ah, true
20:02 < segomos> #node.js-help 
20:03 < mscdex> frk131: i think you want New and not &getPosX for FunctionTemplate::New()
20:04 < ashnur> Industrial: i don't think it would mean that more questions get answered
20:04 < s5fs> isaacbw: i don't know, I enjoy the mix of dev and newbie questions and it saves me from idling in one more channel
20:04 < ashnur> Industrial: but of course i might be wrong
20:04 < Industrial> ashnur: that's what I'm trying to say :p
20:04 < frk131> mscdex: new is in the line above, i really want to register the funcktion getPosX, i tried getPosX modul::getPosX, &getPosX ... :)
20:05 < ashnur> Industrial: oh, then I completely misunderstood, sry
20:05 < werle1> juliangruber: "Yeah, a 3 line node module. That's how I node!"
20:08 < frk131> mscdex: look at : http://nodejs.org/api/addons.html  "Wrapping C++ objects" same here, but they called the method "plusOne". i also tried it using PrototypeTemplate [...]
20:08 < mscdex> frk131: here's what i would do: https://gist.github.com/mscdex/99f7ea0059e81ff1d34f
20:08 < jesusabdullah> Industrial: pong
20:10 < frk131> mscdex: i dont use node :) but i read the code around NODE_SET_PROTOTYPE_METHOD and try this.
20:11 < oti8> Is anyone a Q expert? I'm trying to see if Q can save me a couple lines of code: https://gist.github.com/
20:11 < oti8> https://gist.github.com/objectiveSee/5630515
20:11 < mscdex> frk131: gist updated
20:11 < mscdex> frk131: well, this is the node channel ;-)
20:12 < frk131> mscdex: yeah, think this is my last chance to find a solution :P but i try to read around NODE_SET_PROTOTYPE_METHOD :)
20:15 < Industrial> Anyone know if there's an open source alternative to https://trace.gl ? I think the idea is awesome but the implementation leaves to be desired, so this is a classic example of why open source is a better model and this again is just (imho) someone trying to make a quick buck :|
20:15 < pr0ton> how do i add a local dependency in package.json ?
20:16 < mscdex> pr0ton: use the path
20:16 < nathan7> Industrial: It's not quite a quick buck
20:16 < Industrial> I understand that :)
20:16 < Industrial> but still, meh :( waiting for a ticket, wtb fork
20:17 < pr0ton> so instead of lets say "karma": "~0.8.5" i should use "/Users/me/blah/karma": "~.0.8.5" ?
20:17 < mscdex> pr0ton: i think it's "karma": "/foo/bar/baz/karma"
20:17 < pr0ton> thanks
20:17 < brycebaril> pr0ton: use npm install /path/to/karma --save
20:18 < pr0ton> i want to specify it in my package.json file
20:18 < brycebaril> right, the --save will put it in there
20:19 < pr0ton> ah ok
20:20 < brycebaril> Hmm, looks like that might not write the relative path in
20:22 < pr0ton> brycebaril, mscdex that doesn't work
20:22 < pr0ton> i'm actually doing something like developing package A that depends on package B that depends on package C
20:22 < pr0ton> B and C are both local
20:22 < nathan7> pr0ton: Like npm link?
20:23 < pr0ton> it should be temporary though
20:23 < gbit86> so with socket.io essentially being a wrapper to websockets is there really much benefit in using socket.io?
20:23 < brycebaril> pr0ton: you may want to read this https://npmjs.org/doc/link.html
20:23 < s5fs> gbit86: it also provides fallback methods, like long polling and flash sockets
20:24 < pr0ton> ok, it should be simpler than this imo
20:25 < gbit86> I just don't want to obfuscate websockets underneath and make it more difficult to learn what all is available to me because I want to use some simplifying wrapper.
20:25 <@isaacbw> if you just want the simplest solution, make a symlink in node_modules
20:25 < ManneW> gbit86: socket.io is very easy to get started with. There are alternatives, though. Like SockJS (https://github.com/sockjs/sockjs-client)
20:25 <@isaacbw> ln -s /home/me/library node_modules/library
20:26 <@isaacbw> other "more complicated" solutions are intended to be more maintainable
20:28 < s5fs> gbit86: you could always start with socket.io and get some easy wins, then dig deeper once you feel confident with sio
20:28 < gbit86> yea, I guess I will probably go that route
20:29 < gbit86> lately it seems like I am best off working my way from the ground up though
20:29 < Jester831> anyone use mongoose-attachments? it's killing me ;x
20:29 < gbit86> I don't like the idea of not knowing what's beneath either
20:29 < oreth> gbit86: i did that. I created sockets fromt he ground up
20:29 < oreth> You'll learn a lot
20:29 < oreth> but it's a pain in the ass
20:30 <@isaacbw> http://linux.die.net/man/7/socket
20:30 < oreth> socket.io has both front and back-end taken care of.
20:30 <@isaacbw> work your way up
20:30 < gbit86> oreth: nice lol.. but I didn't mean I wanted to start with the atoms.
20:31 <@isaacbw> if you don't implement a tcp network interace yourself, you aren't a really programmer
20:31 <@isaacbw> *interface
20:31 <@isaacbw> *real
20:31 <@isaacbw> damn, typing is hard
20:31 < oreth> if you do, you're a pedant :P
20:31 < s5fs> haha, leaving poor udp out in the cold, e h?
20:31 < oreth> grab socket.io (or express.io if you're into that)
20:32 < gbit86> it's ok, you don't have to type right to be a real programmer either lol.
20:32 < d4rklit3> anyone familiar with browserify, this middleware stuff is killing me
20:32 <@isaacbw> someone should set up a startup renting out quantum computer time
20:32 < frk131> mscdex: now i have the segfault here: https://gist.github.com/anonymous/5630655#file-gistfile1-cpp-L95, it's up to "GetFunction()" ....
20:33 < substack> d4rklit3: middleware is dumb
20:33 < substack> it's killing you because it's not a good idea
20:33 < d4rklit3> yeah what i had before worked fine
20:33 < substack> then why did you change it?
20:34 < d4rklit3> i thought middleware was the better approach for express
20:34 < d4rklit3> like I just set up a route
20:34 < d4rklit3> for a js file and then user browserify to make it normally and then write to the fs because i wanted the file to actually exist
20:35 < d4rklit3> this middleware shit doesn't even write hte file
20:35 < substack> it's not supposed to
20:35 < d4rklit3> i like stylud' middleware ;)
20:35 < d4rklit3> stylus*
20:36 < substack> I like it when abstractions have obvious inputs and obvious outputs
20:36 < d4rklit3> ok well the version that had worked was browserify 1.15, i updated to 2.14
20:36 < d4rklit3> substack , here is what im making,   input is the source.coffee output is where the js file should go on the fs
20:36 < d4rklit3> upon request, the file is built
20:37 < substack> browserify source.coffee -t coffeeify > bundle.js
20:37 < substack> why do you need middleware? commands work just fine
20:37 < d4rklit3> i mean i prefer to use a js api
20:37 < substack> why?
20:37 < d4rklit3> because node is in js?
20:37 <@isaacbw> lol
20:37 < d4rklit3> its a build server
20:38 < substack> build servers have bash
20:38 < d4rklit3> hwo do you run cli commands from node?
20:38 < substack> require('child_process')
20:38 < segomos> you can't
20:38 < substack> or just do "postinstall": "browserify source.coffee -t coffeeify -o bundle.js" in your package.json
20:39 < substack> or you can use the browserify api which is documented extensively on the readme
20:39 < d4rklit3> well i want it to bundle on request
20:39 < substack> why?
20:39 < substack> that is crazy slow
20:39 < d4rklit3> only for development
20:39 < substack> http://npmjs.org/package/beefy
20:39 < mscdex> frk131: what about scope instead of (*scope) ?
20:39 < d4rklit3> if its in production just build the file and serve it from the fs
20:40 < frk131> mscdex: i'll try
20:40 < frk131> mscdex: but i tryed before, same :)
20:40 < d4rklit3> substack, im making something specific for my work
20:40 < substack> d4rklit3: it sounds like you are really hell-bent on middleware but I have no idea why since it doesn't seem to be a good fit for what you want
20:41 < d4rklit3> im not 
20:41 < frk131> mscdex: here is the code that calls the function ... https://gist.github.com/anonymous/092b55a6f7bf8b62a37f
20:41 < d4rklit3> i mean
20:41 < d4rklit3> im find with using a route
20:41 < d4rklit3> to serve the file
20:41 < frk131> mscdex: at line 103
20:41 < substack> d4rklit3: I don't understand what your objection even is.
20:42 < d4rklit3> substack, what approach would you take if you needed browserify to generate a file upon request
20:42 < substack> I wouldn't do that.
20:42 < d4rklit3> like GET /js/main.js    should bundle    ../source/app/main.coffee  and all its dependencies
20:42 < substack> because that would take multiple seconds to compile
20:43 < d4rklit3> well only in development mode
20:43 < d4rklit3> would you suggest setting up browserify once and having it watch the files?
20:43 < substack> I just run the browserify command when I want to compile my code
20:43 < substack> it is the simplest possible thing
20:43 < d4rklit3> yeah i know that is simple
20:44 < d4rklit3> but i want some1 to just run the server
20:44 < substack> people make everything way too complicated
20:44 < d4rklit3> and when their html requests .js files it will deliver them from the most current source
20:44 < substack> that's a dumb thing to want
20:44 < d4rklit3> i need it to write the to the FS because i want the dev to just be able to take the deploy folder and deliver it
20:44 < d4rklit3> these apps have to be server agnostic
20:44 < substack> configure your deployment process to have a build step
20:44 < substack> you probably already have something if you do `npm install` to fetch deps
20:45 < frk131> mscdex: if i just use scope it's still the same ...
20:45 < d4rklit3> i got my package.json
20:45 < mscdex> frk131: why pass by reference? does it not work when just passing in `global` and then having `Handle<ObjectTemplate> scope` ?
20:45 < d4rklit3> that defines dependencies
20:45 < d4rklit3> if i use the server as a production server i'll push it to heroku
20:45 < frk131> mscdex: i tryed this, same issue
20:45 < substack> then configure a postinstall to run your build steps
20:45 < d4rklit3> i have no idea how to do this right now
20:45 < substack> like a bash script or something really stupid easy
20:46 < mscdex> frk131: i dunno then, you might have better luck asking on #v8
20:46 < d4rklit3> like a cake file?
20:46 < substack> echo -e '#!/bin/bash\nbrowserify main.js > bundle.js' > make.sh
20:46 < substack> chmod +x make.sh; ./make.sh
20:47 < substack> what the fuck does cake even do
20:47 < d4rklit3> make in coffee
20:47 < substack> what for?
20:47 < d4rklit3> i dunno
20:47 < d4rklit3> for some1 more comfortable in coffee?
20:47 < substack> why not just use make or bash?
20:47 < d4rklit3> i dunno dude
20:47 < elliottcable> I like cake, actually.
20:47 < d4rklit3> i think having an on request build for development is perfectly acceptable 
20:47 < elliottcable> Make is goddamned evil and terrible and every other negative adjective you can name.
20:48 < elliottcable> Shell scripts are okay, but tend towards unmaintainability.
20:48 < d4rklit3> esp for my dev style, I like to change code and then refresh
20:48 < d4rklit3> everything i do is, after all, in the browser and thus, request based
20:48 < elliottcable> If you'd say why use cake instead of shell, though, well ... you might as well ask every Node user why they're using JavaScript instead of ISO C.
20:48 < elliottcable> different strokes, different folks, different tasks.
20:49 < substack> why not just use the package.json scripts field?
20:49 < substack> npm run NAME
20:49 < substack> then you can shell out to bash or node or whatever for anything that's not a one-liner
20:49 < substack> so easy
20:49 < frk131> mscdex: i added the complete project to github ... https://github.com/timglabisch/jsfastcgi
20:50 < d4rklit3> i agree with elliottcable's different strokes, different folks argument
20:50 < elliottcable> I grew up with rake, so the format suits me quite well
20:50 < elliottcable> cake's like rake, but possibly even quicker/cleaner/easier-to-maintain
20:50 <@konobi> d4rklit3: or you could use the program 'watch'
20:50 < elliottcable> which is saying a lot because Rake was very nearly a dream for project management.
20:51 < d4rklit3> konobi , i had watch enabled for stuff like telling me the syntax is off
20:51 < d4rklit3> but i noticed it started to throw exceptions in placed i couldn't find
20:51 < d4rklit3> like i had all my bundle shit in a try/catch but it would still throw an error and exit
20:51 < rudiX> konobi: not related but I mentioned watch is part of "forever" ... how exactly ... is it possible to restart script on change
20:51 < d4rklit3> yeah rudiX, I like watch to just help me with syntax errors
20:52 < AviMarcus> nodemon also does restarts
20:52 < d4rklit3> but its useless for debugging runtime errors which is 95% of all errors when it comes to js/coffee
20:52 < d4rklit3> I rather just have this stuff on request
20:52 <@konobi> rudiX: i'm talking about the actual posix command
20:52 < rudiX> AviMarcus: using nodemon too
20:53 < rudiX> but to run the server for the client I must - forever stop script ; nodemon shit.js  ... finish job ... then again forever start ...
20:53 <@konobi> or https://github.com/joh/when-changed
20:54 < rudiX> "Starting to feel like a mindless drone" lol
20:54  * Sven_vB has a dev-loop.sh with inotify-wait and self re-exec
20:54 < rudiX> i am pretty sure its implemented in "forever" ... 
20:55 < rudiX> "  -w, --watch      Watch for file changes"
20:55 < rudiX> tried  "forever -w start server.js" ... fail
20:56 <@konobi> rudiX: restarting a server is not running a command to compile stuff
20:56 < whyhankee> rudiX: don't know forever, i use nodemon for that
20:57 < rudiX> whyhankee: so how do you keep your processes running
20:57 < rudiX> whyhankee: screen node server.js ?
20:58  * chilts uses upstart on Ubuntu
20:58 < chilts> it's awesome
20:58 < whyhankee> rudiX: i use nodemon only for development, ah you are talking about production? sorry :)
20:58 < chilts> restarts it on reboot, which many other 'monitor' type scripts fail to do
20:58 < chilts> on dev, I use supervisor
20:59 < rudiX>  chilts did upstart restart on error
20:59 < rudiX> the thing here is ... i need workarround of "screen nodemon server.js" with forever
20:59 < ashnur> substack: "stupid easy" only if you know about it, and you are confident about it. there is no guide for these things, people like you know them from experience, which is hard to get, when you are new to this field
21:00 < chilts> yep, gets restarted when it craps out
21:00 < chilts> rudiX: ^^
21:00 < substack> if you've ever used a shell you've used bash probably!
21:00 <@isaacbw> no guides on the shell? there are tons
21:00 < ashnur> substack: using something !== knowing something
21:00 < substack> a bash script is just a sequence of commands that you can play back like a tape recorder
21:01 < rudiX> chilts: thanks man ... i guess upstart is lighter than the damn forever
21:01 < substack> ashnur: I'll do a quick blog post about this
21:01 < substack> unfancy build tools
21:01 < chilts> yeah, I don't like forever, _so_ much stuff
21:01 < _6a68> substack: unfancy everything tools
21:01 < substack> chilts: while true; do COMMAND GOES HERE; done
21:02 < ashnur> substack: it's not WHAT it is, it's about how it all fits together. it's just like with streams. I know conceptually what streams are, i even know most of the API, i still can not confidently build an authentication upon dnode. i would not know if it works as I want, or it is just working for my usecase but it is easy to break it
21:02 < chilts> yep ... still gotta stick it in a script, so I use upstart as my script :)
21:02 < astropriate> don't stick it
21:03 < substack> ashnur: authentication in dnode has nothing to do with streams
21:03 < substack> authentication is not a problem where streams matter
21:04 < substack> not everything should be a stream
21:04 < substack> it's just an abstraction to be aware of like any other
21:06 < ashnur> substack: see, i don't understand these things. I want to have streams which are session aware, to use dnode with functions which are user specific, and are not callable by any other user. I thought it relates to stream somehow, as it works on them
21:07 < ashnur> and I am saying, these things come from experience, to know what to build using what tool. it is not as easy without that. not even if you tell me what tool i should use, if I am not used to that tool, I find it very hard (and I think I am not alone with this) to relate to the concrete problem
21:08 < rudiX> substack: chilts forever start --watch server.js  ... found the solution :) ... and I think its awesome
21:09 < rudiX> "error: restarting script because /usr/share/nginx/html/admin/server.js changed"
21:09 < substack> ashnur: streams are not a very good abstraction for any of that
21:09 < d4rklit3> now my router isn't work
21:09 < d4rklit3> ing
21:10 < ashnur> substack: okay. 
21:10 < substack> streams are for shuffling data from one place to another place, perhaps transforming it along the way
21:11 < Guest57340> hey
21:12 < d4rklit3> ok so i have app.use router, then app.get '/some/path' , =>   
21:12 < d4rklit3> nothing happens
21:13 < _anewbie> Hello all
21:14 < _anewbie> just a quick, newbie question. What IDE do you guys use on a mac to work on Node?
21:14 < d4rklit3> sublimetext
21:15 < rudiX> sublime yep
21:16 <@konobi> vim
21:16 < whyhankee> _anewbie: macfusion + sublimetext
21:17 < _anewbie> Thanks everyone
21:17 < oreth> sublime
21:17 < _anewbie> I'll go with sublime
21:17 < oreth> though, you might want to checkout LightTable
21:17 < oreth> it's free and a new contender
21:17 < _anewbie> I was thinking if I there wouldn't be a fancier option to deal with the C++ layer
21:17 < _anewbie> if thereª
21:17 < oreth> can do code inspection during run time
21:17 < oreth> it's pretty swag
21:18 < ashnur> substack: well, i get that i am not even as close of this dnode session auth thing as i suspected i could be. :) but thanks for the clarification, at least i am not confusing it with streams now.
21:18 < oreth> http://www.lighttable.com/
21:18 < _anewbie> oreth: sounds great! Will take a look
21:18 <@MI6> joyent/node: Trevor Norris master * 2868bf9 : src: upgrade to new v8 api (+2 more commits) - http://git.io/wNUV0w
21:20 < d4rklit3> substack what do i use instead .use on a browerify
21:20 < d4rklit3> 2
21:20 < d4rklit3> i had use stringify('html')
21:21 < substack> d4rklit3: you don't
21:21 < d4rklit3> so.. how would use stringify
21:21 < substack> I have no idea what you're trying to do
21:21 < substack> .use() is gone for good and it's never coming back ever
21:21 < d4rklit3> i dunno i had js with html templates in them
21:22 < d4rklit3> i think you even told me to do that
21:23 < d4rklit3> oreth , i backed that proejct a while ago
21:23 < d4rklit3> then i had backer's remorse cuz the onlyu thing i ever saw for it was in clujure 
21:23 < d4rklit3> clojure**
21:23 < oreth> d4rklit3: it does node now
21:24 < d4rklit3> cool
21:25 < d4rklit3> anyways substack, i want to browserify js with strings of html in it
21:25 < d4rklit3> like i require '../path/to/file.html' inside my coffee
21:26 < Stumbler> Hey guys, is there a way to pipe the stdout from one process to the stdin of another process from the command line?  I'm not sure where to start looking for a solution.
21:26 < elliottcable> Stumbler ⑊ ...
21:26 < elliottcable> Stumbler ⑊ do not know if trolling
21:27 < Stumbler> unfortunately no, I just need to brush up on my unix knowledge :\
21:28 < Stephen> substack: Flavia module?
21:29 < d4rklit3> damn it, browserify 2 seems like it really doesn't want to be used in JS
21:29 < d4rklit3> it used to just compile coffee out of the box
21:32 < d4rklit3> substack, in your docs, you make references to passing [files] or [opts] to browserify, but i can't really see wher you describe what opts are.. are the same opts you pass into bundle? what is the difference here?
21:35 < substack> d4rklit3: the only opt is noParse
21:36 < substack> which is documented
21:36 < d4rklit3> right
21:36 < d4rklit3> so i have to use transform for coffee now?
21:37 < d4rklit3> man i need an example of how to use this... 
21:39 < d4rklit3> substack  is there a way to use coffeeify with api?
21:40 < Sven_vB> Stumbler, most shells use a pipe symbol for stdout -> stdin
21:40 < Sven_vB> as to where to start looking: the man page of your shell.
21:40 < AlienProject> anyone uses riak-js?
21:41 < Sven_vB> ex. $ yes olol | tee /dev/sd*
21:41 < substack> d4rklit3: you should just read the source code and/or docs
21:42 < Stumbler> Sven_vB:  well, to rephrase a little.  I have a long running node process that I'd like to be able to connect to from a new process, sort of like a client/server model without the network overhead.
21:42 < substack> your last 2 questions have been in the docs
21:42 < substack> yes using b.transform('coffeeify')
21:42 < d4rklit3> im reading up and down the docs
21:42 < d4rklit3> it says
21:42 < d4rklit3> "popular transforms: coffeeify" 
21:42 < d4rklit3> thats it
21:42 < d4rklit3> shows how to use it cli
21:42 < substack> false
21:42 < d4rklit3> https://github.com/substack/node-browserify ?
21:43 < substack> https://github.com/substack/node-browserify#btransformtr
21:43 < ddod1> Could someone help me understand subdomains in Express.js? I'm not sure how I'd go about routing to dynamic subdomains (e.g. user.platform.com)
21:43 < d4rklit3> yeah i know , no mention of coffeeify, it uses coffee-script and through
21:44 < d4rklit3> OR use the cli
21:44 < substack> because coffee-script is just one of many transforms
21:44 < substack> it's not psecial
21:44 < substack> *special
21:44 < d4rklit3> so i am to infer that i can use coffeeify instead of coffee?
21:44 < substack> you should forget everything about the old browserify
21:44 < Sven_vB> Stumbler, in that case you might want to try tmux or screen for the "keep on running even if not cnnected" part, and run their clients in a ptty to start listening to output. in cases where buffer delay is not a problem, you can also send output to a file and use tail -f to read from that file. if you can make sure to read the buffer fast enough, you can also use named pipes (man mkfifo)
21:45 < substack> it seems like you were using all the terrible features that got removed
21:45 < ashnur> :)
21:45 < d4rklit3> i would like understand this, i really would
21:45 < d4rklit3> i admit this is confusing
21:45 < substack> I already told you
21:45 < d4rklit3> all i want is for browserify to give me an output in a string format of all my shit
21:45 < substack> b.transform('coffeeify')
21:45 < substack> just do that
21:46 < Stumbler> Sven_vB: Thank you for your guidance. I'll dive into that
21:46 < Sven_vB> Stumbler, reading the last part of your question a 2nd time, i see the network keyword. if that is the only problem, consider unix sockets.
21:46 < substack> https://github.com/substack/node-browserify#api-example
21:46 < substack> d4rklit3: every single thing you've asked is already in the docs
21:47 < substack> I suggest consulting the docs first
21:47 < d4rklit3> perhaps im not reading them right
21:47 < d4rklit3> im used to asdoc format
21:47 < Stumbler> Sven_vB:  Perfect! That looks exactly like what I want.
21:47 < d4rklit3> where i can see class
21:47 < Stumbler> Sven_vB: Thanks again :D
21:47 < Sven_vB> Stumbler, also, if you neet to be web 2.0 complient, read into RabbitMQ and its friends.
21:47 < d4rklit3> its methods, properties, etc
21:47 < ashnur> d4rklit3: you have to actually read everything :)
21:47 < ashnur> even the code examples
21:47 < substack> there are no classes
21:48 < substack> that wouldn't make sense
21:48 < Sven_vB> glad i could help :)
21:48 < d4rklit3> what is pipe() ?
21:48 < Ritzton> sorry I have a javascript question, if I am doing app.io.route('ready', function(req) { /* here "this" */ }) will the this inside the function be 'app.io' ?
21:48 < ashnur> d4rklit3: there are no classes in javascript.
21:48 < d4rklit3> ok
21:48 < d4rklit3> ok ok o ok
21:48 < d4rklit3> lol
21:48 < substack> ashnur: there basically are, it's just that they're not strictly necessary and often counter-productive to dwell at that level
21:49 < substack> d4rklit3: it's like `|`
21:49 < substack> in bash
21:49 < Sven_vB> d4rklit3, the pipe() i know creates two entangled streams (mostly, sockets) and returns them.
21:50 < Sven_vB> man reminds me they are connected only in one direction.
21:51 < d4rklit3> so.. does bundle even return anthing?
21:51 < Ritzton> anybody could tell me about this inside the function ?
21:52 < substack> d4rklit3: it returns a stream
21:53 < d4rklit3> ok it seems that i fucked everything up in my setup
21:53 < Sven_vB> Ritzton, if the docs tell you what "this" will be set to, believe them. if they don't tell you about it, don't rely on what your exploration (using util.inspect) yields, because it might change in future versions.
21:53 < Sven_vB> d4rklit3, welcome to snafu club
21:54 < ashnur> :))
21:55 < d4rklit3> lol.... ok   
21:55 < Ritzton> Sven_vB> so for  app.io.route('ready', function(req) {} ); to get app.io inside the function it is better to pass an argument to the function ?
21:56 < d4rklit3> substack , does browserify still recursively loook for files required and compiles them, and if so, do i need to now specify they are .coffee files?
21:56 < Ritzton> Sven_vB> I mean like that  app.io.route('ready', foo(app.io)); ?
21:57 < ashnur> d4rklit3: all you have to make sure that you specify full file names
21:57 < ashnur> require('whatever') for whatever.coffee will not work
21:57 < d4rklit3> it used to :(
21:57 < Sven_vB> Ritzton, i dunno what the traditional way in app.io is; i'd probably use closure aspects to make my handler inherit references to what it should work with.
21:58 < ashnur> yeah, https://github.com/substack/node-browserify/issues/326 check this out d4rklit3 
21:58 < Sven_vB> Ritzton, and foo creates a closure that contains the reference?
21:58 < Sven_vB> Ritzton, be sure not to immediately invoke your handler with those parens
21:59 < ashnur> sometimes the tools you use force you to make choices you don't want to make; but this is just how the world is :)
21:59 < Ritzton> Sven_vB> could you write a small example for me to better understand what you will do ?
22:00 < Sven_vB> Ritzton, also there's always .bind() to create a proxy with a known context
22:00 < Sven_vB> Ritzton, nope, not today; but if inheritance of references into closures is new to you, make sure to watch Douglas Crockford's talks on JS first.
22:01 < aet> I'm getting 500 Error: ENOENT, rename '/tmp/571a37cfff47f701fbf494bd197813e0' using fs.rename    I assume its a permissions thing, how can I fix it?
22:01 < Ritzton> Sven_vB> .bind seems to look better, I dont really like closure
22:01 < substack> ashnur: I don't get why adding .coffee to require() filenames is such a huge deal
22:01 < substack> I add .js to my require() calls sometimes
22:01 < chilts> same
22:01 < chilts> I think it makes it more explicit
22:01 < substack> being explicit is nice
22:01 < Sven_vB> Ritzton, i think it will be hard to use JavaScript without closures. ;)
22:01 < ashnur> substack: it is not, when it is my code. it is when i am just requiring something maintained by somebody else.
22:01 < chilts> indeed :)
22:02 < d4rklit3> ok.. so    b.bundle().pipe(process.stdout)    taht just floods my console with the output
22:03 < ashnur> substack: in such cases i either hack, or chose not to use one of the libs because they are incompatible. 
22:03 < d4rklit3> so how do i make it not do that? can i pass something else into pipe?
22:04 < substack> ashnur: why are people publishing modules that don't use a prepublish hook to compile to js?
22:04 < d4rklit3> in node, how do i write the stream to a file?
22:04 < substack> coffee script just makes everything harder for such a marginal benefit
22:05 < chilts> and the compilation step means you're debugging code which is different to what you wrote
22:05 < chilts> I didn't like that the most
22:05 < ddod1> Can anyone tell me the best way to do dynamic subdomain routing in Express?
22:05 < substack> d4rklit3: .pipe(fs.createWriteStream(filename))
22:05 < d4rklit3> there we go
22:05 < substack> chilts: that issue is addressed by source maps, which just work
22:06 < substack> at least in browserify
22:06 < chilts> ah right, interesting
22:06 < chilts> thanks
22:06 < chilts> not that that'll make me use coffeescript :)
22:07 < ashnur> substack: if i would have to ask questions the form "why are people doing <something>" this question wouldn't make the top 1000
22:08 < Sven_vB> Ritzton, also, if you paste JSLint-compliant code to paste.ohai.su, i might try and give you some hints how to best pass your data to your functions
22:13 < d4rklit3> what are the different stream modes
22:13 < d4rklit3> default is 438
22:14 < d4rklit3> are these like chmod ?
22:14 < Sven_vB> >> 438.toString(8)
22:14 < purr> Sven_vB: SyntaxError: Unexpected token ILLEGAL
22:15 < Sven_vB> >> (438).toString(8)
22:15 < purr> Sven_vB: (string) '666'
22:15 < Sven_vB> looks very much like permissions
22:15 < aet> Im trying to upload a picture using firefox which stores temporary files to /tmp and my fs.rename for example doesnt have the permissions for it... How can I fix this?
22:16 < aet> I'm on ubuntu btw
22:16 < nathan7> d4rklit3: that's umask
22:16 < nathan7> d4rklit3: oh, wait, mode
22:16 < mscdex> aet: chmod /tmp?
22:16 < nathan7> d4rklit3: nvm, that's the file mode (like chmod)
22:16 < mscdex> aet: chmod /path/to/destination ?
22:16 < aet> mscdex i did chmod and chown on /tmp still getting the error
22:16 < _6a68> aet: does the web server user have perms on /tmp
22:17 < d4rklit3> ok thats what i thought
22:17 < aet> _6a68 thats what i think is the problem, how can I change the servers permissions?
22:18 < aet> sorry i phrased that wrong i guess
22:18 < aet> #1 how do i check what the web server user is, its running out of my ~/ so I would assume that user yes?  
22:19 < aet> and if it is me, then I chown that user to /tmp it still doesnt work
22:20 < _6a68> aet: I was looking for a reasonable reference on linux file permissions, this looks pretty good: http://serverfault.com/questions/357108/what-are-the-best-linux-permissions-to-use-for-my-website
22:20 < _6a68> aet: the short story is, make sure that, if it's running as you, that you have write permissions on that directory
22:21 < d4rklit3> substack, i think i almost have it here. couple more questions. If i have .html templates required in my coffee, i don't need stringify anymore?
22:21 < chilts> aet: I've done that before ... where you are renaming the file to is where you must have permission for the user running the server
22:21 < chilts> what is the user you're running the server as?
22:22 < chilts> _6a68: the file written to /tmp/ will be the same user as the webserver, so the permission on the destination is the one that's probably causing the problem :)
22:23 < _6a68> chilts: yeah! webserver needs /tmp/ write access, either group or user
22:23 <@konobi> may also need to set umask
22:23 < chilts>  /tmp usually allows that anyway
22:24 < aet> oh god, i had my destination folder in the wrong parent
22:24 < chilts> I think the fs.rename() is the problem
22:24 < aet> sorry guys
22:24 < aet> lol
22:24 < chilts> yeah
22:24 < _6a68> aet: I still suggest doing some reading about linux file permissions. there's a whole collection of bugs that will stop being so confusing if you spend an hour or two digging through the docs.
22:24 < _6a68> heh
22:24 < chilts> true
22:24 < mackwic> Hello everybody, I'm dealing with express and passport. Do you know if there is a way to ensure that a rule will be called for every route ?
22:25 < mackwic> Seems that putting an app.use(check_auth) before app.use(app.router) is not enough
22:25 < chilts> mackwic: a rule? do you mean a middleware?
22:25 < chilts> app.use() will run for every route
22:25 < chilts> what is 'check_auth' doing?
22:26 < Sven_vB> bye folks, i'm off for today
22:26 < mackwic> chilts: exactly what the name suggests, it call passport to make sure the user can access to this rule
22:26 < substack> d4rklit3: I don't know what stringify is
22:27 < d4rklit3> so then... .html requries will work?
22:27 < substack> you can use http://github.com/substack/brfs
22:27 < substack> no
22:27 < substack> don't require() html files
22:27 < substack> require() is for loading code
22:27 < d4rklit3> those are my templates
22:27 < d4rklit3> i want to compile them into my code
22:27 < d4rklit3> cuz they load client-side
22:27 < substack> then use something that isn't require()
22:27 < substack> like fs.readFileSync()
22:27 < substack> which brfs gives you
22:28 < d4rklit3> ok brfs looks good
22:28 < mackwic> I think it should be a middleware as it clearly don't depend on routing, but apparently it's still run before some rules, so the page is partially rendered, then I have a refresh to the login page. :/
22:29 < mackwic> s/before/after/
22:31 < d4rklit3> how come when i have stylus middleware generating the css file, it becomse static, so then when i set express.static after my middleware and routes it no longer works
22:33 < mackwic> Ok, I partially found the thing. The static rule was by far too high
22:35 < d4rklit3> how do i enable dynamic routing and middleware stylus together this is nuts
22:36 < d4rklit3> app.get ("/*" ) overrides all my middleware
22:37 < mackwic> when we call passport.authenticate(), if we set an failureRedirect, that don't really break the control flow. If we had 5 request, they terminate, then the redirection is done 
22:39 < diwu1989> hi, is anyone experience slow NPM installs today again? similar to how it was really slow yesterday?
22:44 < d4rklit3> substack does browserify watch anymore?
22:45 < d4rklit3> im sorry dude, but you changed this library completely 
22:46 < d4rklit3> i don't think i can do this anymre:  window.Backbone = require('backbone-browserify')
22:50 < EyePulp> d4rklit3: What are you trying to do?  I haven't been paying attention
22:50 < d4rklit3> well apperatnyl i cant use browserify as middleware
22:51 < d4rklit3> i cant even explain this anymore.... ive wasted the entire day on ths shit
22:51 < d4rklit3> i just want to have a build server thats request based
22:51 < substack> use a module
22:51 < d4rklit3> if you request this file, build it and serve it
22:51 < substack> https://github.com/substack/node-browserify#third-party-tools
22:51 < substack> also in the docs
22:51 < substack> instead of wasting time you could have just read the docs[3~[3~[3~[3~[3~[3~[3~[3~
22:52 < ashnur> :)))
22:52 < substack> not very much there to read
22:52 < d4rklit3> dude... i just dont make sense of them
22:52 < d4rklit3> use a module instead of require it in the client?
22:52 < d4rklit3> is that what you're saying?
22:52 < ashnur> no
22:53 < samholmes> Using Stylus, how do I support all the vendor prefixes for a property?
22:53 < d4rklit3> get nib
22:53 < ashnur> d4rklit3: move back a few steps. where are you now? what do you have working?
22:53 < samholmes> Isn't there a shim stylesheet I could use for common things like gradients?
22:53 < ashnur> samholmes: yeah, use nib
22:53 < d4rklit3> lol can i pm you so i dont flood the channel?
22:53 < ashnur> d4rklit3: i won't respond to pm
22:54 < d4rklit3> ok...
22:55 < ashnur> try being a bit more concise, what do you have right now? i am sure you got some code "working" you want to expand on...
22:55 < d4rklit3> Ok i have an express server, it uses stylus as middleware, and then this browserify thing is a route to build the js file, it also has a get("/*", res.sendfile(index.html)) so anything non-static will load as the index.html
22:55 < d4rklit3> i want my scripts to be static files but have the router intercept them
22:56 < ashnur> d4rklit3: the most ugliest, but working solution would be to add a new route for the js file. then when that is requested you use the browserify module and its API to bundle and serve the file
22:56 < ashnur> it will be slow as hell, and not very good
22:56 < d4rklit3> well i only needs to do this when in development mode
22:56 < ashnur> but it will "work"
22:56 < d4rklit3> if its not in dev mode it will just serve the files as is
22:57 < d4rklit3> never using stylus or browserify
22:57 < ashnur> be sure to add the route before the /* route
22:57 < substack> d4rklit3: you want weird things that don't sound like very good ideas
22:57 < substack> *why* do you want a static file and ALSO want a middleware route to build on demand
22:57 < substack> that doesn't make any sense
22:58 < d4rklit3> this is so taht the dev, can copy and paste the /public folder's contents and deliver it
22:58 < ashnur> to be honest, i used this approach yesterday :P
22:58 < d4rklit3> i want the result to be server agnostic
22:58 < ashnur> i was just as confused at some point as d4rklit3 is
22:58 < substack> d4rklit3: consider revising your requirements to be more coherent
22:59 < d4rklit3> how is this not coherent ?
23:00 < d4rklit3> i want to be able to server files that exist on the fs but intercept the request and rebuild them
23:00 < d4rklit3> the issue im currently having is the order of which tehse things happen in express is impossible now
23:00 < d4rklit3> either i have all source files compile by middleware
23:00 < d4rklit3> or all source files compile via the router
23:01 < ashnur> d4rklit3: router does not compile
23:01 < d4rklit3> learnboost made stylus middleware exactly as it should work
23:01 < d4rklit3> dude i know this, what i mean is that when the router gets the request it would use the browserify module to compile the source file
23:01 < d4rklit3> and update the one on th fs
23:01 < ashnur> d4rklit3: you like that only because you copy pasted the example code and it worked as you expected :)
23:01 < ashnur> not because that is any better
23:02 < d4rklit3> i like things that work
23:02 < d4rklit3> what can i say
23:02 < ashnur> everything "works"
23:02 < ashnur> not always as you expect it, but that is usually because faulty expectations
23:03 < d4rklit3> well i don't know
23:04 < d4rklit3> i think i need to be using this : https://github.com/ForbesLindesay/browserify-middleware
23:04 < substack> maybe browserify isn't a good fit for whatever it is you're trying to do
23:04 < d4rklit3> however substack thinks that despite putting that library on his docs, no1 should ever use it
23:05 < redhotsly> How would I start (or activate) Chrome and load a url using on a Mac from a nodejs program
23:05 < substack> I don't use things like that. I don't care what other pople use.
23:05 < ashnur> d4rklit3: there are a ton of people using it without problems :)
23:05 < d4rklit3> ashnur, i want to browserify to update files on the filesystem through middleware. is this possible?
23:06 < ashnur> i am not familiar with middlewares
23:06 < d4rklit3> like currently the middleware will create a virtual route
23:06 < substack> that doesn't make sense!
23:06 < d4rklit3> like this:  app.use('/js', browserify('./client', {external: shared}))
23:06 < unstable> http://pastie.org/7945544 ... I have weinre and node installed. I installed node/npm in ~/.node; Then I added ~/.node/bin to my $PATH; I want to be able to do 'node weinre --boundHost -all-', though this fails as you can see from my pastie. If I do `/home/john/.node/bin/node /home/john/.node/bin/weinre --boundHost -all-` that works fine.
23:07 < unstable> How can I make it so I don't have to use absolute paths, and it will still find the module?
23:07 < substack> middleware is just an approach to handling (req,res) pairs that handles routes in a stack
23:07 < d4rklit3> so if i request,   /js/main.js it should compile /.client/main.coffee? 
23:07 < substack> why don't you just do
23:07 < ashnur> d4rklit3: but i think it is absolutely possible, but not sure why would you want to do it? you have 2 situations. in one you want it bundled on request (or better, on change, which you can get with some of the tools). on another, you want it when you publish, which you can have by using npm scripts
23:07 < ashnur> d4rklit3: there is no situation when you want to bundle, then write to file, then serve. 
23:08 < ashnur> not even if you saw the stylus middleware doing this
23:08 < substack> if (req === '/bundle.js') { var b = browserify(); b.add('whatever.coffee'); b.transform('coffeeify'); b.pipe(fs.createWriteStream(__dirname + '/bundle.js')) b.pipe(res) }
23:08 < d4rklit3> ashnur I actually don't mind having the file be watched and recompiled on change
23:08 < substack> this concept of "middleware" is just obscuring what you actually want
23:08 < substack> which is 2 outputs for a build
23:08 < substack> response and a file
23:09 < ashnur> hah. thanks substack for that example :D 
23:09 < d4rklit3> the issue all this is causing is that the actual physical files taht are generated are getting caught by express.static, and the app.get calls no longer work
23:09 < substack> actually scratch that it should be var s = b.bundle(); s.pipe(...); s.pipe(...)
23:09 < ashnur> :D :D
23:09 < substack> d4rklit3: so don't use express
23:09 < substack> if it doesn't behave the way you want
23:09 < ashnur> d4rklit3: change the order of app.use statements
23:09 < d4rklit3> ashnur thats is what im trying to do now
23:10 < d4rklit3> ok so screw it, lets just say i want to bundle on the files changing
23:10 < ashnur> i still think simpler is better. i wouldn't want to write to file when i don't need a file, just data to be served 
23:11 <@MI6> joyent/node: Trevor Norris master * f58eb8f : src: remove unused comment - http://git.io/aseMjw
23:11 < Aartsie> Hi all
23:11 < d4rklit3> ok i ahve     (source, path)    source being the .coffee file. path being the route for the compiled bundle. could i have an example of how to set it up to watch the source for changes and update the file
23:12 < d4rklit3> i think this browserify-middleware is ideal for that
23:13 < ashnur> d4rklit3: the watcher is a completely separated process from your server
23:13 < ashnur> that is the point
23:14 < d4rklit3> so i need to just use something to listen for when files change
23:15 < d4rklit3> and on that event i rebundle them/
23:16 < ashnur> yup
23:18 < d4rklit3> ok so if i understand correctly, browserify 1 had all this stuff built in
23:18 < d4rklit3> but now...
23:18 < d4rklit3> it got stripped away
23:18 < d4rklit3> and all browserify does is create bundles
23:18 < d4rklit3> the end
23:19 < substack> yes
23:19 < substack> that's all it should have ever done
23:19 < substack> if you disagree then just use v1 forever
23:19 < substack> it's still on npm
23:19 < d4rklit3> it is
23:19 < d4rklit3> i would prefer to use versions taht are maintained 
23:20 < ashnur> d4rklit3: yeah, but version 2 can do things v1 could not, or just very painfully
23:21 < _6a68> you could always fork+maintain v1, it's open source :-)
23:22 < d4rklit3> ok next q, substack, can i no longer include say...  jquery-browserify in the    main.coffee file ? 
23:22 < mikolalysenko> a quick post on multidimensional arrays in javascript:  http://0fps.wordpress.com/2013/05/22/implementing-multidimensional-arrays-in-javascript/
23:23 < substack> d4rklit3: I have no idea what you're talking about
23:23 < d4rklit3> ok
23:23 < d4rklit3> so jquery-browserify
23:23 < d4rklit3> is jquery you can use a browserify module?
23:23 < d4rklit3> as a*
23:23 < ashnur> d4rklit3: you should use jquery in a different script tag
23:24 < ashnur> that is what i think 
23:24 < d4rklit3> i mean for example
23:24 < d4rklit3> there is also backbone-browserify
23:24 < substack> jquery isn't a very good module
23:24 < ashnur> (actually, you shouldn't use jquery)
23:24 < substack> it's too greedy
23:24 < substack> it tries to patch a bunch of globals and whatever
23:25 < _6a68> ashnur: heh
23:25 < d4rklit3> what about backbone-browserify?
23:25 < substack> just require('backbone')
23:25 < substack> what are you even doing
23:25 < substack> why are you even asking these questions
23:25 < d4rklit3> i mostly make single page apps
23:26 < d4rklit3> marketing shit
23:26 < substack> why aren't you just trying and seeing
23:26 < substack> for yourself
23:26 < substack> instead of bugging me
23:28 <@isaacbw> jquery is designed to take over your javascript
23:28 < defunctzombie> d4rklit3: https://github.com/shtylman/node-enchilada
23:28 < defunctzombie> d4rklit3: that is what you want, just use that
23:28 <@isaacbw> jquery is for bums
23:28 < _6a68> isaacbw: heh
23:29 < d4rklit3> yes
23:29 < _6a68> I love the jquery trolling. 
23:29 < d4rklit3> that is way better than that browserify-middleware
23:29 < d4rklit3> lol...   its like the standard for most websites in the world, and is used by basically ever web developer. in clonclusion its terrible and should never be used.
23:29 < substack> _6a68: http://substack.net/weaning_yourself_off_jquery
23:29 < _6a68> disclaimer: I can *actually* write javascript
23:30 < substack> jquery isn't good for writing reusable components
23:30 < _6a68> substack: totally agree. so often I've wanted *just* the part of YUI which is the pubsub stuff (Event and Attribute).
23:30 < substack> we should be writing more reusable components
23:30 < substack> ergo we should be using less jquery
23:30 < _6a68> substack: but it's all one huge mondo blob. even with the loader, it's not straightfoward to just grab what you need.
23:30 < d4rklit3> jquery plugins are great
23:30 < substack> yes!
23:30 < substack> split things up into separable components
23:30 < substack> jquery plugins are by far the worst part of jquery
23:30 < _6a68> substack: and if you need to load YUI over https, you have to host your own. it's a bummer.
23:30 <@isaacbw> _6a68: aw man, you could get that stuff up and running yourself in no time
23:30 < defunctzombie> jquery plugins are not great, they are actually pretty bad API wise in general
23:31 < _6a68> isaacbw: I know. 
23:31 < _6a68> isaacbw: I don't need it for anything at the moment, it's just the one thing I really love about YUI. 
23:31 < _6a68> like how I really love dojo.Deferred. nice to see those ideas percolating outward the past few years.
23:31 < _6a68> and dojo's funky functional extensions are pretty sweet.
23:32 < _6a68> this stuff http://lazutkin.com/blog/2008/jun/30/using-recursion-combinators-javascript/
23:32 < _6a68> I could take or leave 99% of it, though
23:32  * _6a68 shrugs
23:32 < d4rklit3> shit like jquery is imporant cuz of browser compatibility
23:32 < d4rklit3> i ahte having to deal with fucking shit browsers all the time
23:32 < _6a68> d4rklit3: you are talking but you don't know.
23:32 < d4rklit3> like IE8
23:32 < _6a68> DOM abstraction is really not that hard.
23:32 < d4rklit3> well i have like... max 4 weeks
23:32 < d4rklit3> to build a website
23:32 < substack> d4rklit3: see my article. Nearly all of those work down to IE8.
23:32 < d4rklit3> idiot marketing and creatives always changing shit
23:33 < substack> I listed the browser compat for everything
23:33 < _6a68> sure, agency work is rough :-)
23:33 < stagas> mikolalysenko: nice stuff
23:33 < d4rklit3> all i want to do is make this build server
23:33 < d4rklit3> : (
23:33 < _6a68> heh
23:33 < d4rklit3> it will be reusable
23:33 < substack> d4rklit3: I think you don't actually know what you want.
23:34 < d4rklit3> i know exactly what i want substack 
23:34 < d4rklit3> im not sure on the approach to getting it
23:35  * mackwic like this chan
23:35 < mackwic> _6a68, nice link ! :)
23:36 < mikolalysenko> stagas: thanks!
23:36 < _6a68> mackwic: oh yeah, that stuff gets hairy real quick :-)
23:37 < _6a68> mikolalysenko: yeah, nice article! is it on HN yet?
23:37 < mikolalysenko> _6a68: not yet
23:37 < mikolalysenko> _6a68: if you want, go post it
23:38 < _6a68> mikolalysenko: done https://news.ycombinator.com/item?id=5754484 :)
23:38 < mackwic> _6a68, as a functionnal programmer, I *love* when we are talking shit like this
23:38 < _6a68> :-D
23:39 < mikolalysenko> _6a68: upvoted!
23:39 < _6a68> mackwic: lazutkin wrote I think 3? articles in that series, it leads very quickly to some hardcore combinator juggling. really good stuff.
23:42 < d4rklit3> when i try to install enchilada:  npm ERR! Error: No compatible version found: browserify@'shtylman/node-browserif
23:42 < d4rklit3> y#2.6.0-dz0'
23:44 < mackwic> I don't see the point of this article. Of course simple dimensional array is faster...
23:46 < mackwic> time to go. Good night folks !
23:57 < d4rklit3> defunctzombie , this guy shylman or w/e   made it so enchilada looks for the wrong version of browserify
23:57 < defunctzombie> it does not look for a version of browserify, it has one it uses
23:58 < d4rklit3> i get errrrooooorsss trying to install it
23:58 < d4rklit3> sayingwrong installtarget
23:58 < d4rklit3> ther is a closed issue, but it was cuz the dude had old version of node
23:58 < d4rklit3> that didn't help me
23:58 < d4rklit3> its just saying wrong target for me
--- Log closed Thu May 23 00:00:13 2013
