--- Log opened Tue Feb 05 00:00:27 2013
--- Day changed Tue Feb 05 2013
00:00 < myndzi> put the tests in the module file? :P
00:04 < airtanah> s5fs: i always though programming was 90% feeling stupid, and 10% feeling like a genious
00:06 < krgn> ah found it! deep copy'ing Buffers seems to be a no-no :)
00:06 < spion> asdfn, if they can be tested in isolation, why not split to another module? :)
00:06 <@TooTallNate> krgn: do you have a standalone test case for what you're talking about?
00:06 <@TooTallNate> krgn: toString() shouldn't crash node :)
00:08 < mscdex> krgn: you're doing a deep clone of the actual Buffer object?
00:08 < krgn> TooTallNate: an assertion fails, its not a segfault as I initially thought, sorry
00:09 < krgn> mscdex: yep
00:09 < mscdex> ah
00:09 < krgn> I'm new to this, so forgive my ignorance
00:09 <@TooTallNate> krgn: oh ok, assertions errors are ok :)
00:09 < krgn> k then, at least I found the culprit
00:11 < s5fs> TooTallNate: hey, mdns built! thanks for the help with the pathing, seems to have cleared some things up! highest of fives!
00:11 <@TooTallNate> s5fs: nice :)
00:11 <@TooTallNate> seems i'm on a roll today
00:12 < s5fs> TooTallNate: i hear you're so good today, even your mistakes are successes
00:19 < krgn> good nite ppl
00:19 < CrawfordComeaux> would it make sense to build a web app in node using thoonk (https://github.com/andyet/thoonk.js) that processes user-uploaded images with a python script and spits the results back out to the user?
00:19 < CrawfordComeaux> the results do need to be persisted & will be operated on later
00:24 < mansoor-s> CrawfordComeaux, hey!  I suppose it would make sense if you already have a codebase in python and don't want to rewrite it
00:26 < CrawfordComeaux> mansoor-s: I don't think js would be right for the image processing. basic feature detection now, but it's going to start getting more complex down the line
00:38 < isaacbw> mscdex, is there any way for streaming in a message with fetch to fail?
00:40 < mscdex> isaacbw: not really, unless the connection terminates unexpectedly of course
00:41 < isaacbw> would there be any way to catch that?
00:41 < mscdex> isaacbw: the 'error' or 'end'/'close' event?
00:41 < mscdex> on the imap object
00:41 < isaacbw> oh! okay. I wasn't looking broad enough. Sorry to bother you ;)
00:42 < isaacbw> thanks
00:42 < mscdex> no problem :-)
00:50 <@Nexxy> \o/
00:51 < isaacbw> I think I'm in love with q
00:51 < isaacbw> both the promises library and the character from star trek
00:52 <@Nexxy> get. out.
00:52 < s5fs> Nexxy: hai
00:52 < isaacbw> :D
00:52 <@Nexxy> s5fs, soup!
00:52 < s5fs> Nexxy: question re: disco-maps, when you start it up are you getting avahi compat warnings?
00:53 < s5fs> Nexxy: had a heck of a time getting it built today on the beagle, TooTallNate was a huge help. dude didn't laugh at me once, but he was entitled to at least a few chuckes imho
00:53 <@Nexxy> haha
00:53 <@Nexxy> TooTallNate, always a gentleman
00:54 < s5fs> Nexxy: double-also, were you able to verify that mdns deletions worked correctly? over the weekend i couldn't get records to remove, but it could just be the tools i was using.
00:54 < s5fs> Nexxy: i'll PM if that's okay, haha
00:54 <@Nexxy> sure!
00:54 <@Nexxy> :P
00:54 <@Nexxy> like you have to ask
00:55 < s5fs> Nexxy: well, i didn't wanna keep polluting the channel with my questions. i've asked enough dumb stuff for one day.
00:56 <@Nexxy> psh
00:56 <@Nexxy> learning is never dumb!
00:56 < jorge_> Hi, in expressjs, if I upload a 1 gb file, do I get stuck before the routes get even checked?
00:56 < isaacbw> that awesome object-based router idea is turning out to be a pain in the ass
00:56 < isaacbw> too much indenting
00:56 < isaacbw> it's hard to follow
00:57 < jorge_> I must be doing something wrong... it doesn't make sense to have a bodyParser capturing a 1gb files before checking the routes on expressjs (anybody has hints?)
00:58 < isaacbw> here, enjoy: https://gist.github.com/4711192
00:59 < isaacbw> is there a bot here that will leave messages?
00:59 < isaacbw> and maybe give me a list of recent users? that asdf guy will like this, but I've forgotten the numbers he has in his nick
01:00 < isaacbw> I don't think he realized how simple it was though
01:00 < isaacbw> bots
01:00 < isaacbw> bot
01:00 < jorge_> isaacbw: was that related with the body parser question?
01:01 < isaacbw> no, this was an old conversation, sorry
01:01 < jorge_> oh, ok, thanks (sorry)
01:01 < isaacbw> I'll try and help though
01:01 < isaacbw> you can reorder your middleware any way you like
01:01 < isaacbw> you can also do the body parsing yourself if you only want it in certain routes
01:01 < isaacbw> it's pretty easy stuff
01:02 < jorge_> right
01:02 < jorge_> was thinking about limiting the request.. somehow
01:02 < isaacbw> limiting it?
01:02 < jorge_> yea, put a limit on the size
01:02 < isaacbw> you could write middleware to do that
01:03 < isaacbw> or put logic in http-proxy
01:03 < jorge_> without relying on content-size header... but at the same time to check the routes
01:03 < jorge_> http-proxy?
01:03 < isaacbw> it's a module that lets you write reverse proxy servers really easily
01:04 < isaacbw> but what I mean is, write a custom bodyParser middleware that will return an error if the request it too large
01:04 < isaacbw> put that before any routes
01:06 < jorge_> the middleware exists for that (connect.limit) .. but I'm trying to not have the whole thing being uploaded to the server (temporary local space) before even checking for a route
01:07 < jorge_> the ideal is: req.pause, check everything, and when necessary, req.resume and get the rest of the stream
01:08 < asdf12> why cant you stop it on the web client
01:08 < jorge_> the web client can be evil
01:08 < jorge_> (like someone trying to bring the server down)
01:08 < asdf12> huh
01:08 < isaacbw> but I just had another brilliant routing idea
01:08 < isaacbw> god I love myself so hard
01:08 < isaacbw> :O
01:09 < asdf12> well idk im just joining in mid way
01:09 < isaacbw> oh hey asdf12. I decided the object routing idea was too hard to follow and posted a gist
01:09 < isaacbw> here, enjoy: https://gist.github.com/4711192
01:10 < isaacbw> there's not much to it
01:11 < asdf12> its long
01:12 < isaacbw> whaaat
01:12 < isaacbw> it's not even 100 lines
01:13 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
01:13 < asdf12> for like 1 function
01:13 < jrajav> Yeah, I'd say that's pushing it for a good function length
01:13 < isaacbw> you guys are crazy
01:14 < jrajav> I try to keep it to one screen
01:14 < isaacbw> no way, that's nothing
01:14 < jrajav> It's not that hard, actually
01:14 < isaacbw> chalk it up to style
01:14 < jrajav> Well, fair enough
01:14 < asdf12> besides idk why it has to be that long when routes are just key,value 
01:15 < jrajav> But I think higher modularity and higher granularity is generally looked upon favorably
01:18 < robmozart> how can i start a node application through ssh and let it run after i close the ssh session?
01:18 < redshadowhero> try screen if you want something basic.
01:19 < redshadowhero> Or do you want something more complex?
01:19 < janmower> nohup node server.js &
01:19 < robmozart> redshadowhero: basic for now, thanks
01:20 < isaacbw> jrajav, I like to avoid splitting my code up when there is no need for generalization
01:20 < isaacbw> it ruins the conceptual flow
01:20 < jrajav> I disagree
01:20 < isaacbw> so I wont' split up a function just for the sake of splitting up a function
01:21 < jrajav> I think that modularizing your code provides ready-made insightful abstractions to AID understanding and debugging
01:22 < spion> hey isaacbw, i noticed that you are interested in IRC-related stuff for node, so if you get the chance check out  https://github.com/spion/ircee - i think i polished the rough edges and have a very sensible API and a clean README now.
01:22 < isaacbw> spion, sure, maybe a bit later
01:22 < spion> cool
01:23 < NodeNoob> hey everyone, any node ninjas here?
01:24 <@konobi> no... but then again... how would you know... they're ninjas
01:24 < jrajav> I hired all of the ninjas to kill all of the rockstars
01:24 < jrajav> Then I killed the ninjas
01:24 < NodeNoob> I'd settle for a padawan, master konobi
01:26 < NodeNoob> Could someone help me in figuring out how to load css files just using node?
01:27 < asdf12> JUST USING node?
01:27 < asdf12> what were you using before
01:27 < context> nodenoob: pretty sure node doesn't know how to read css
01:27 < spion> do you want to read them as strings?
01:28 < context> its kind of like opening an excel file ONLY using notepad
01:28 < NodeNoob> aahh,
01:28 < jrajav> Uh. CSS is just plain text guys.
01:28 < context> correct
01:28 < context> he said *load* a css file, not read it
01:28 < spion> if yes, you might want to look at require.extensions
01:29 < jrajav> "Loading" a CSS file does not usually imply PARSING it and applying it to an HTML document, even in the context of browsers.
01:29 < NodeNoob> oh, so you can't *load* a css file using base node.js?
01:29 < jrajav> You can indeed read in a text or a binary file
01:29 < jrajav> Node doesn't really care if that happens to be a CSS file, of course
01:29 < NodeNoob> I want to apply the syles to the document, 
01:29 < jrajav> You should perhaps clarify your goal
01:30 < jrajav> Right
01:30 < jrajav> So, what's your end goal? Why do you think that it needs to be applied to this document?
01:30 < NodeNoob> I want to mess around with loading a basic page before I get into different modules and frameworks
01:30 <@konobi> NodeNoob: that'd be obiwan kEnobi
01:30 < samholmes> I want hacker buddies.
01:30 < samholmes> Anyone else want to be my hacker buddy?
01:30 < samholmes> XD
01:30 < jrajav> NodeNoob: Do you know how pages are usually loaded in a web browser?
01:31 < jrajav> Usually, you request a URL which routes to a main index.html or similar, which references several .js, .css, and similar files. As those files are referenced in the main HTML file, other requests are sent out to retrieve those files
01:31 < jrajav> The web browser will take care of parsing and making sense of those various types of files
01:32 < jrajav> But the server that is sending those files to the web browser could care less if they're main.css or The Art of War
01:32 < asdf12> oh oh
01:32 < NodeNoob> But if I try to reference it in the html file, it doesn't work correctly
01:32 < asdf12> i think i know what he means
01:33 < jrajav> Okay, so, are you trying to retrieve files or a directory WITH a web browser, FROM a basic Node.js server?
01:33 < spion> NodeNoob, you do want some kind of framework, node offers you a minimal http server and expects you to fill in the rest (even serving html and css files) with modules.
01:33 < jrajav> Right; the "hello world" example doesn't serve up files by default. To do that, you need to code it
01:34 < jrajav> It will literally just respond with "Hello world" to every request
01:34 < omnipotentJS> hi
01:34 < omnipotentJS> good morning all
01:34 < NodeNoob> Yes, when I look at the network tab in chrom tools, it seems like it is loading the css file as a text/html with the same file size as my html. The "initiatior" says 127.0.0.1:5 parser
01:35 < context> you need to code it if you want it to serve up a css file
01:35 <@konobi> so the content of your css file is "Hello World"
01:35 <@konobi> (as far as the browser is concerned)
01:35 < NodeNoob> jrajav => No
01:37 < spion> NodeNoob, but, a scaffolded express app serves files you put in 'public' by default. npm install -g express && express && npm install && node app.js
01:37 < spion> :)
01:37 < NodeNoob> can I pm you jrajav?
01:37 <@konobi> NodeNoob: http://tinyurl.com/tehxyprob
01:37 < jrajav> No.
01:37 < spion> presto, an express app that listens on port 3000 and serves files you put in its "public" dir as localhost:3000/public/file.css
01:37 < jrajav> To be honest, others will be better at helping you with this :P
01:38 < jrajav> Besides, I need to leave
01:38 < NodeNoob> is there a way to do it without express, or is it a pain in the ass?
01:38 < gabrieluk> presto!
01:38 < gabrieluk> alacazam!
01:38 < gabrieluk> abracadabra!
01:38 < gabrieluk> sinzalabn!
01:38 < gabrieluk> sinzalabin!
01:38 < spion> NodeNoob, you need to parse the client request URL to extract the file, create a read stream for the static file, pipe it to the response.
01:39 < spion> its not really a pain, but...
01:39 <@konobi> don't re-invent the wheel
01:39 < gabrieluk> NodeNoob, why not go te easy way? Aren't you a noob?
01:40 < gabrieluk> or is it just the name?
01:40 < asdf12> he's doing it to learn
01:40 < asdf12> so more power to him
01:40 <@konobi> NodeNoob: http://docs.nodejitsu.com/articles/HTTP/servers/how-to-serve-static-files
01:40 < NodeNoob> just to learn about how the internals work...
01:40 <@konobi> there's a basic way
01:40 < gabrieluk> just read the node for beginners book so
01:41 < gabrieluk> it teach you  how raw routing nd modules works
01:41 <@konobi> but for proper compliance with RFCs, probably best to go with a framework in the long run
01:42 < jorge_> nodenoob: just trying to serve a css file? 
01:42 < NodeNoob> Thanks for the link Konobi. That sort of helps
01:43 < gabrieluk> NodeNoob, do you know js?
01:43 < jorge_> if you res.write the headers (like content-type: text/css) and read from the filesystem and res.write it, it should work, make sure you write "content-length"
01:43 < gabrieluk> if so, read the book, it is good http://www.nodebeginner.org/
01:44 < gabrieluk> at least the beginning, which is free ^^
01:44 < NodeNoob> jorge: I am reading the index.html file, then, on success, response.end(content, 'utf-8').
01:45 < jorge_> NodeNoob: so, does it work?
01:46 < jorge_> NodeNoob: on the css request, you if(req.path=="f.css") ... 
01:46 < jorge_> (not sure about req.path, there is probably some other name for the var)
01:47 < jorge_> read the css file and response.end(cssContent)
01:47 < NodeNoob> yes, I'm ok with js
01:48 < jorge_> NodeNoob: make sure you use console.log(request) for debugging, very helpful
01:49 < jorge_> now if I could only buffer that stream for a moment before sending it directly to s3....
01:51 < chilts> jorge_: are you sending uploads to Amazon S3?
01:51 < jorge_> yea
01:51 < chilts> try connect-stream-s3 ... might be worth a go :)
01:51 < jorge_> but I'm trying to avoid the local storage
01:51 < chilts> ah ok
01:52 < chilts> I decided not to avoid that since if the upload to S3 fails, you don't have anything to retry
01:52 < chilts> whereas if you stream to disk first, at least you can retry :)
01:52 < TheAceOfHearts> so, I wanna have a website that generates URLs similar to what imgur does, any tips to point me in the right direction?
01:52 < jorge_> chilts: hm.. I think that's a bad option, if I fail to s3, I send back to the client the fail
01:53 < jorge_> the server stays lightweight
01:53 <@konobi> TheAceOfHearts: there's probably already one on npm
01:53 < chilts> fair enough, if you're happy they might have to re-upload a large file
01:53 < TheAceOfHearts> I figured, but I'm not really sure what terms to look for :(
01:53 < TheAceOfHearts> just URL?
01:53 < chilts> no reason not to retry before sending the client an error
01:53 < jorge_> chilts: yeap, no problemo
01:53 <@konobi> TheAceOfHearts: shorten
01:53 < chilts> fair enough
01:54 < TheAceOfHearts> perfect
01:54 < TheAceOfHearts> just found one
01:54 < TheAceOfHearts> thanks
01:54 < jorge_> chilts: chance is, s3 will not fail, while my server might become bloated easily
01:54 < chilts> S3 can and will fail :)
01:54 < chilts> as for your server, are you talking about code or files on disk?
01:54 < jorge_> yes, but that it like... 2 days in a year
01:55 < chilts> I'm uploading lots of files to S3, happens a few times per day
01:55 < azylman> How many is "lots"?
01:55 < chilts> a few thousand
01:56 < jorge_> chilts: files on disk I guess...
01:56 < Tabmow> Hey all, if I am installing testem via npm on a windows server, how do I install it into a global context instead of the users profile I am running it as?
01:56 < chilts> then just delete them when the upload suceeds
01:56 < chilts> anyhow, I don't know your use-case, but just giving you options :)
01:57 < jorge_> chilts: well.... (of course) but writing to the local machine in ec2 is probably not as performant as having the stream directly to s3
01:57 < chilts> so whatever makes sense for your use-case
01:57 < chilts> jorge_: my plan is to make some middleware which does the stream to S3 and disk at the same time
01:57 < chilts> but I haven't done that yet
01:57 < chilts> as for writing to localstorage on your EC2 instance, it's probably faster than you think
01:57 < samholmes> Friends, friends...who are nerds
01:58 < chilts> have you profiled it?
01:58 < jorge_> hm.. maybe (no, no profiling)
01:58 < samholmes> No seriously, anyone know of any good ways to network in San Diego county?
01:58 < chilts> you're probably right if it's to an EBS store, but prolly not localstorage
01:58 < jorge_> by the way, you're using a database?
01:59 < azylman> Interesting that you have so many failures writing to s3
01:59 < jorge_> I set up recently mongo with volumes in raid
01:59 < jorge_> in aws... been wondering if it was worth since I haven't gone to production with this setup yet
02:00 < isaacbw> aws has its own nosql service
02:00 < isaacbw> I haven't looked very closely though
02:00 < chilts> SimpleDB and DynamoDB
02:00 < jorge_> used it... not worth in my case (talking about dynamo)
02:00 < chilts> SimpleDB is deprecated, but they'll probably just keep it alive for a while
02:00 < isaacbw> is dynamodb available locally?
02:00 < jorge_> "locally"?
02:00 < isaacbw> I would hate to rely on a remote paid service for development
02:01 < isaacbw> as in, can you install it on a local machine, or is it only available in the aws cloud
02:01 < jorge_> ah.. no, you have to develop online
02:01 < isaacbw> not my cup of tea
02:01 < chilts> DynamoDB is available in all regions
02:01 < isaacbw> if only because time warner decides to slow my connection to a crawl every few hours
02:01 < jorge_> isaacbw: yeaa... no local machine development 
02:01 < isaacbw> how similar is it to mongo?
02:01 < jorge_> someone has done a mockup of it to develop locally
02:02 < isaacbw> I know that aws's caching service is memcached-compliant
02:02 < jorge_> mongo has way more features
02:02 < jorge_> but envolves a bit of sysadmin
02:02 < isaacbw> I love mongo
02:02 < jorge_> dynamo is just there, ready, with a few limitations
02:02 < jerrysv> Nexxy: ping!
02:04 < airtanah> isaacbw: yah, i am skeptical of anything i cant run locally
02:04 < airtanah> isaacbw: skeptical is the wrong word, i'm down right hostile
02:04 < isaacbw> not only that, but it locks you into aws
02:04 < xk_id> To what extent is it possible to run a Node.JS app inside a browser, completely?
02:04 < isaacbw> it isn't?
02:04 < airtanah> isaacbw: i use auto-scaling groups which also kind of locks you into aws, but it's less of a big deal than locking into a database
02:05 < airtanah> easier to re-write the deploy scripts
02:05 < jorge_> xk_id: should be possible, I've seen people running linux compiled to js in a browser
02:05 < isaacbw> that's called a browser application
02:05 < xk_id> -.-
02:06 < chilts> xk_id: take a look at browserify, that might help you get to where you want to be
02:06 < chilts> assuming that's what you actually want :)
02:06 < samholmes> Is it generally better to stream files than just fs.readFile ?
02:06 < isaacbw> airtanah, I may just hunker down and get a dedicated server. All this cloud business ruffles my feathers
02:06 < xk_id> I actually just want to understand thee xtent.
02:06 < isaacbw> I would go with co-location if it weren't so damned expensive here
02:07 < samholmes> fs.readFile will take up a lot of memory right? If I stream the file instead, the data will just pass through memory instead.
02:07 < jorge_> samholmes: that makes sense
02:07 < samholmes> jorge_: Did you know that?
02:07 < xk_id> basically, can I run an app that would otherwise run on the serverside, on the client side inside the browser?
02:07 < jorge_> samholmes: sure
02:07 < samholmes> jorge_: Why so ambiguous?
02:08 < airtanah> isaacbw: i like cloud because i can just deploy a new cluster each update, once it's automated it beats the pants off of update-in-place
02:08 < jorge_> samholmes: what do you mean? 
02:08 < airtanah> isaacbw: cost is more, per cycle/cpu/gig whatever, but the felxibility is what I'd rather have
02:08 < samholmes> jorge_: Idk, maybe it's just me, but "sure" to me translates more to a "maybe" then a "yes".
02:08 < samholmes> Is that just me?
02:08 < isaacbw> I suppose that's a pretty significant advantage
02:09 < samholmes> Even though, technically "sure" is something certain.
02:09 < jorge_> samholmes: ah! well, my background is computer science, so I understand streams and what not -- node js is just recent for me
02:09 < samholmes> jorge_: I see.
02:09 < jorge_> samholmes: streaming and reading to memory existed before nodejs
02:10 < samholmes> jorge_: :D
02:10 < samholmes> Anyone here from SD county?
02:11 < jorge_> uk-europe here
02:13 < airtanah> isaacbw: this is a great video on cloud deployment https://www.youtube.com/watch?v=cCAO9moDucI
02:13 < jrajav> Oh sweet I've been looking to deploy me some clouds
02:14 < jorge_> chilts: so -- just a question, so if I upload a file to your server of 1gb, how do you prevent the upload from finish if the route is invalid
02:15 < jorge_> chilts: because most people just use expressjs with bodyparser and so on... and a naive setup could have someone easily clutter the server bandwidth with bad requests
02:15 < samholmes> jorge_: Oh. I was just asking cause I'm looking to network. :)
02:15 < jorge_> samholmes: (ok)
02:15 < naomi> when i do `var proc = new child_process.spawn(...)` when does the actual proc start running?
02:15 < naomi> nextTick ?
02:15 < samholmes> jorge_: why the ()
02:16 < chilts> jorge_: you can set an upload limit. There is middleware to do that.
02:16 < chilts> e.g. 10MB or whatever you need
02:16 < jorge_> samholmes: because I felt like it
02:16 < samholmes> jorge_: oic
02:16 < samholmes> i'm hyper on coffe
02:16 < samholmes> e
02:17 < jorge_> chilts: but then I could send a bunch of 10mb uploads ... and your server would try to write them all to the disk
02:18 < jorge_> even before realizing the upload request is bad (like bad user auth)
02:19 < chilts> your argument can be said of your way too .. you're uploading to S3 immediately
02:20 < chilts> that's a matter of moving your auth and your bodyParser() or S3 uploading stuff around, nothing to do with whether you're writing to disk or uploading to S3
02:20 < jorge_> auth in the top will have even simple image request running that code 
02:21 < chilts> ??
02:21 < jorge_> true, the s3 direct upload is not in question to be better in this case
02:21 < chilts> yep
02:22 < jorge_> the issue is be able to "momentarily" buffer the request "data" events, run the router and other "deciding" factors to deny the request (attacks) and when sure, resume the stream and process
02:22 < jorge_> parsing json or upload whatever
02:23 < jorge_> this is what is missing in expressjs/connect (in my opinion)
02:23 < naomi> when i do `var proc = new child_process.spawn(...)` when does the actual proc start running? process.nextTick, i'm guessing?
02:24 < chilts> do all of that before bodyParser() or your S3 thing - done :)
02:25 < jorge_> chilts: right, but I can't run my route before body parser can i?
02:26 < jorge_> I mean I can... if I put the body parser invididually inside every route
02:26 < NodeNoob> Awesome Jorge, your advice worked!
02:26 < jorge_> naomi: the spawn is probably immediate if it returning the proc
02:26 < jorge_> NodeNoob: awesome!
02:27 < NodeNoob> I forgot that createServer is called on each request and I need to parse every url to determine the content-type
02:27 < jorge_> the callback passed to the createserver is, yes, on every request
02:28 < pspeter3> Does anyone have suggestions for an XML parser?
02:28 < jorge_> pspeter3: xml to json?
02:28 < pspeter3> jorge_ works for me
02:28 < jorge_> pspeter3: there was one ... probably called actually xml2json
02:28 < pspeter3> jorge_ Thanks
02:29 < NodeNoob> Is it better to learn node without Express at the beginning?
02:29 < naomi> jorge_: that's unlikely because you can only attach event listeners to the proc after you initialize one. e.g., `var proc = child_process.spawn(...); proc.stdout.on("data", ...); proc.on("exit", ...);`
02:29 < naomi> so, there's no way it starts running immediately as some stdio buffers might miss data
02:31 < pspeter3> NodeNoob yes
02:31 < jorge_> naomi: well, the child process is "spawned" ... but the it might not yet be running your code that writes data to stdout
02:31 < pspeter3> NodeNoob I would focus on trying to use node as a client before you try to use it as a server
02:31 < naomi> jorge_: so that's my question, when does it actually start "running" ?
02:32 < jorge_> naomi: that probably depends on the OS a bit
02:33 < jorge_> naomi: there are many factors about starting a new process... including assigning a processor if running on a multicore
02:33 < naomi> jorge_: assume no other special arguments are passed
02:34 < naomi> literally, var proc = child_process.spawn("ls", ["-a", "-l"]);
02:34 < naomi> something as basic as that
02:34 < jorge_> naomi: well, I just don't think that your node will have it in next tick, it has to way for the OS to decide
02:35 < naomi> way == wait ?
02:35 < NodeNoob> (pspeter3: why would you use node on the client side?
02:35 < jorge_> naomi: yea, thanks
02:35 < pspeter3> NodeNoob not on the client side as in a browser
02:35 < naomi> also, jorge_ what is a "tick" officially ?
02:36 < pspeter3> NodeNoob more like a client of web services. So play around with request. https://github.com/mikeal/request
02:36 < NodeNoob> pspeter3 ahh, thanks for the clarification
02:36 < jorge_> noami: good question -- I would assume to be the next "instruction" in line, in the middle of all the async stuff waiting to run
02:37 < jorge_> naomi: but could be just deferring to the end of the call stack....  not sure actually
02:38 < naomi> jorge_: ok, well thank you for your help
02:39 < NodeNoob> pspeter3 I can use this request package to do some scraping?
02:39 < pspeter3> NodeNoob: Yep. Though there are some ones built on top of it that inject jQuery for you
02:39 < NodeNoob> pspeter3 Aahh, for easier DOM manipulation?
02:40 < pspeter3> NodeNoob yep
02:43 < jorge_> chilts: by the way, if s3 fails, the upload will fail immedially on the user client -- no harm is done in terms of time, or local disk space
02:46 < mclenithan> If i have a API test - node test/apitest.js - and I place the is test in package.json, how do I ensure it starts "node server.js", runs tests, then closes server through npm?
02:47 < chilts> jorge_: not true, S3 can also fail at the end of the upload
02:48 < jorge_> ok, but in that case, the user connection can fail as well at the end of the upload to your local storage
02:49 < chilts> very true
02:49 < chilts> which would affect both ways of doing it
02:50 < jorge_> I guess
02:53 < airtanah> anyone here run websockets over non-ssl?
02:57 < jorge__> airtanah: I did that a few times
02:57 < airtanah> jorge__: i just watched a video advising against it, curious if you ran into issues with it
02:57 < jorge__> airtanah: had a few problems in mobile networks, since some operatores re-write headers and mess up the web socket connection
02:57 < airtanah> they said proxies can muck with the websocket connection unless its encrypted
02:58 < jorge__> airtanah:  yes, true
02:58 < airtanah> well i heard it in a video, plus you verified it... that's two data points. i'm concluding that it's a bad idea to run un-encrypted
02:59 < jorge__> airtanah: probably
02:59 < naomi> jorge_: http://d.pr/n/ABYS
02:59 < naomi> jorge_: i thought i would share this with you
03:00 < jorge__> naomi: going...
03:01 <@konobi> airtanah: what, you actually trust "encryption" over proxies?
03:01 < jorge__> naomi: ok
03:01 < naomi> jorge__: so it's worth noting that the console.log and spawn() calls are not synchronous
03:01 < airtanah> konobi: yes, because i have done all the math classes behind cryptography
03:01 < naomi> but there are equal console.log and spawn() calls
03:01 < jorge__> naomi: expected, no?
03:02 < airtanah> konobi: mind you, it doesn't help when idiot authorities sign rogue certs
03:02 <@konobi> airtanah: heh... it's a little more involved, but you can MITM attack encryption too
03:02 < naomi> jorge__: kind of. it proves that the process doesn't just start with nextTick()
03:02 < jorge__> naomi: console.log is node.js, spawn is OS
03:02 < airtanah> konobi: very true, but it's never the math that fails, it's usually just human stupidity
03:02 <@konobi> airtanah: yup, or badware installed bad root certs
03:02 < naomi> jorge__: right
03:03 < naomi> jorge__: i guess i was expecting to see a perfect interlacing
03:03 < airtanah> konobi: i also rely on the fact that hacking our site is slightly more expensive than the financial gain you'd achive by doing so
03:03 < naomi> 100
03:03 < naomi> 1360032835783193000
03:03 < naomi> 101
03:03 < naomi> 1360032835785714000
03:03 < naomi> ...
03:03 < cloudbender> Well I gave it the old college try.  IndexedDB is a piece of shit on firefox
03:03 <@konobi> yar
03:03 < ZenBalance> does anyone have a good explanation of how express-resource works?
03:04 <@konobi> naomi: when pasting multiple lines, please use a gist or a pastebin
03:04 < ZenBalance> Digging through it right now: https://github.com/visionmedia/express-resource but a little confused about how it maps over
03:04 < jorge__> naomi: right, well, its possible if you want to
03:05 < MiracleBlueWork> Yo dudes
03:05 < naomi> jorge__: that's part of what i'm working on, which is why i wanted to know if i had a consistent window of time before spawning the process and the process actually running
03:05 < MiracleBlueWork> Are there *any* reliable zip libraries that allow me to zip up an entire directory contents without having to specify each file in the directory?  I've gone through node-native-zip and adm-zip so far :(
03:06 < jorge__> naomi: now you know, good work
03:06 < isaacbw> zip
03:06 <@Nexxy> MiracleBlueWork, you could just use child_process.exec
03:06 < isaacbw> just exec zip
03:06 < naomi> jorge__: thanks again; i thought i'd share my findings with you since you helped me
03:06 < MiracleBlueWork> Nexxy: Oh right
03:06 < MiracleBlueWork> Is there good docs for that?
03:06 < jorge__> naomi: thanks for sharing
03:06 < naomi> jorge__: also, note that node.js crashes teh while loop after 587 procs are spawned in this instance
03:06 < isaacbw> MiracleBlueWork, the api docs
03:06 < MiracleBlueWork> And can I specify a callback to run afterward?
03:06 <@Nexxy> http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback
03:06 < MiracleBlueWork> cool
03:06 < spion> i had a revelation about unit testing today - its probably fairly obvious to anyone that writes a lot of unit tests :)
03:07 < MiracleBlueWork> Thanks dudes you rock :)
03:07 < isaacbw> and yes
03:07 <@Nexxy> yep, it gets err, stdout & stderr
03:07 < MiracleBlueWork> Dudes and dudettes
03:07 <@Nexxy> lol
03:07 < jorge__> naomi: interesting
03:07 < spion> what is the best way to organize your code? the best way is the one that make it easier to test.
03:07 < isaacbw> and follow
03:07 < isaacbw> and debug
03:07 < isaacbw> and expand
03:07 < jorge__> and read
03:08 <@Nexxy> and, you know... actually function
03:08 < spion> but follow is abstract.
03:08 < isaacbw> and collaborate, if that's a concern
03:08 <@Nexxy> don't forget that part
03:08 < isaacbw> which is often is
03:08 < spion> what makes it easy to follow?
03:08 <@Nexxy> isaacbw, stop
03:08 <@Nexxy> collaborate
03:08 <@Nexxy> and listen
03:08 < spion> debug can be uncertain too.
03:08 < isaacbw> lol
03:08 < spion> (what makes it easier to debug?)
03:09 < MiracleBlueWork> Bugger :( the windows zip solution from command line seems al ittle more complicated then just calling "zip"
03:09 < MiracleBlueWork> From my googling so far.
03:09 < spion> but making it easy to write the test is straightforward... just be lazy when writing the test and if something is too hard to mock, the API is bad.
03:09 < spion> :)
03:09 < isaacbw> so my housemate thinks the smell of my cooking is seeping under her door and making her clothes smell bad
03:09 < isaacbw> MiracleBlueWork, get yourself on a linux box
03:09 < MiracleBlueWork> Lol
03:10 < MiracleBlueWork> Easier said than done at the moment.
03:10 < MiracleBlueWork> Oh well, I'll find a way around it.
03:10 <@konobi> vmware has free versions
03:10 < MiracleBlueWork> what I mean is, the connection here at work is rather awful for the next few weeks
03:11 < MiracleBlueWork> and I'm just on a temp machine at the moment anyway.  Hmm.
03:11 < MiracleBlueWork> I'll figure it out I guess :) thanks guys.
03:11 < isaacbw> or use mingw
03:11 < MiracleBlueWork> mingw?
03:11 < isaacbw> for compiling linux programs on windows
03:11 < isaacbw> it might actually include zip on its own
03:13 < jrajav> That would be msys
03:13 < jrajav> mingw is just the compiler
03:13 < isaacbw> oh that's right
03:13 < isaacbw> I'm fairly sure mingw includes some utilities
03:14 < isaacbw> mm, nevermind
03:15 < MiracleBlueWork> all good.
03:15 < MiracleBlueWork> I'll figure it out.
03:15 < MiracleBlueWork> Thanks though :)
03:15 < isaacbw> no, mingw will let you use zip on windows
03:15 < isaacbw> linux zip, I mean
03:16 < MiracleBlueWork> Oh, will it?  just out of the box?
03:16 < isaacbw> no, you would have to compile it
03:16 < MiracleBlueWork> Ah.
03:16 < MiracleBlueWork> Is there a step by step I can read over for that?  Or should I just google that?
03:17 < isaacbw> oh, this could help to: http://www.info-zip.org/Zip.html
03:17 < isaacbw> yea, use that
03:17 < MiracleBlueWork> Ooo
03:17 < isaacbw> it looks neat
03:17 < MiracleBlueWork> :d
03:17 < MiracleBlueWork> :D*
03:17 < daleharvey_> rvagg: around?
03:18 < daleharvey_> or anyone thats familiar with levelup, been having problems with the build for a while - https://travis-ci.org/daleharvey/pouchdb/builds/4585202
03:18 < MiracleBlueWork> Bugger, first link doesn't work, I'll try the other two.
03:19 < MiracleBlueWork> Oh might be my connection hang on I'll switch over
03:23 < Manobi> There are any module compatible with node.js 0.8.x that can daemonize the current process ?
03:28 <@konobi> Manobi: searched for "daemon" on npmjs.org?
03:29 < Manobi> tks konobi, but daemon, daemonsauce node-prefork are not working on node 0.8
03:30 <@konobi> daemonize2?
03:31 < rvagg> daleharvey_: that's the same darn problem that you were having last time, but this time it's happening on travis!
03:33 < daleharvey_> rvagg: I know, the problem is this one doesnt work by cleaning my cache, I figure its some crappy version incompatibility upstream of you, so if I moan upstream then you can moan upstream and eventually someone can fix it :P
03:33 <@konobi> `npm cache clean`
03:33 < rvagg> daleharvey_: unfortunately I can't since I own errno too!
03:33 < rvagg> daleharvey_: I'm suspecting an npm shrinkwrap issue, it's just odd
03:33 < Manobi> @konobi The daemonize2 api do not let clear how to daemonize the current process, it looks more like how to daemonize an external module
03:34 < daleharvey_> heh, that was a quick root to source at least
03:35 <@mbalho> mikeal: request({method: "PATCH"}} sends POSTs :(
03:35 < mikeal> what?
03:35 < mikeal> that's crazy
03:35 < mikeal> i don't mutate it
03:35 < mikeal> does core work?
03:36 <@mbalho> mikeal: trying now
03:36 < mikeal> also, PATCH is a dumb dumb dumb HTTP method
03:36 <@konobi> silly svn
03:37 <@mbalho> mikeal: well yea but the github api requires it :(
03:38 < rvagg> daleharvey_: since the dependencies for LevelUP have shallowed somewhat I might stop publishing it shrinkwrapped for now, that'll probably fix it
03:39 < Manobi> konobi: indexzero/daemon suggest to use detached child process this do not work well for me
03:40 < indexzero> Manobi: why not?
03:40 < isaacbw> neat http://netflix.github.com/asgard/
03:41 < daleharvey_> who said npm solved all the dependancy hell problems again? :P
03:41 < rvagg> daleharvey_: published 0.5.3-1, same as 0.5.3 but without a shrinkwrap
03:41 < st_luke> daleharvey_: everyone
03:41 < Manobi> indexzero: is hard to explain but it's related to some declared variables
03:42 < indexzero> Manobi: Well you really shouldn't use daemon.node, libuv (part of node.js) is not fork-safe
03:42 < daleharvey_> rvagg: cheers, will kick off a build and see if it helps
03:43 < Manobi> indexzero: daemon.node have a perfect interface for me, I was using it on 3 large projects
03:45 < indexzero> Manobi: well it's not going to work in several scenarios; there's nothing to be done to fix that
03:45 < rvagg> daleharvey_: bingo, looks good
03:45 < daleharvey_> rvagg: success
03:45 < rvagg> heh
03:45 < rvagg> cept you have failing tests of your own... nmp!
03:46 < daleharvey_> yeh theres stuff in progress for node-qunit
03:47 < Manobi> indexzero: I don't know what to do now, I have procrastinated some deploys hoping to find a solution
03:47 < indexzero> Manobi: well w/o a code sample or gist it's kind of impossible to help
03:48 <@mbalho> mikeal: wtf nevermind i have some weird bug
03:48 < Manobi> indexzero: I'm already happy for your attention
03:49 <@konobi> using a detached child process i believe is the only way to guarantee daemonization safely
03:50 < isaacbw> wow, when I'm typing code blocks into emacs with markdown-mode, it does brace and paren matching for me
03:50 < isaacbw> it's the little things
03:57 < Manobi> indexzero: I'm posting a gist to be more clear
03:58 < MiracleBlueWork> Hey people :)
03:59 < isaacbw> weren't you just here
03:59 < MiracleBlueWork> I managed to wrangle a library into working after trying a few solutiosn for command line windows zip that were just a little more than broken entirely
03:59 < MiracleBlueWork> :O
03:59 < MiracleBlueWork> No >.>
03:59 < MiracleBlueWork> <.<
03:59 < MiracleBlueWork> I totally wasn't here earlier.
03:59 < Milos> yes you were
03:59 < isaacbw> hmmmmmmmmm
03:59 < MiracleBlueWork> Shhhh
04:00 < MiracleBlueWork> Anyway, I got node-native-zip to work by spoon-feeding it a recursive directory list
04:00 < MiracleBlueWork> I'm gonna make additions to it to fix some of its unexpected error behaviour (as in, not giving errors at all) sometime when I have the time.
04:00 < Manobi> indexzero: here is the gist with some code: https://gist.github.com/manobi/9b6389bb7cf5e2e68292
04:00 < MiracleBlueWork> Yay!  Contributing to the community!
04:00 < MiracleBlueWork> Thanks for the help though guys and gals :D
04:00 <@konobi> MiracleBlueWork: might want to check out fstream
04:01 < Milos> speaking of node.js
04:01 < MiracleBlueWork> konobi: Will do :)
04:01 < Milos> why can't node.js write to a character device?
04:01 < Milos> it's pretty annoying
04:01 < Manobi> konobi: can you suggest something based on my use case ? https://gist.github.com/manobi/9b6389bb7cf5e2e68292
04:01 < isaacbw> Milos, what
04:01  * Milos will file a bug
04:01 < Milos> isaacbw, what what
04:01 < isaacbw> Milos, what what what
04:02 < Milos> can't write to character device, get errno 58 which is something to do with illegal seek
04:03 < Milos> fs.writeFile('/dev/ttyACM0', buffer, null, function(err) { console.log(err || "Success"); });
04:03 < Milos> no work
04:04 < Milos> y u no work
04:04 < Milos> Y U NO WORK
04:04 < isaacbw> is the buffer encoded?
04:04 <@Nexxy> Milos, use node-serialport
04:04 < isaacbw> encode dat buffer
04:04 < Milos> isaacbw, it's hex
04:04 < Milos> encode in what
04:04 < isaacbw> oh
04:04 < Milos> Nexxy, ok, I haven't heard of that, I'll look into it
04:04 <@Nexxy> Milos, it's great
04:05 < Milos> but seriously
04:05 < Milos> that file is like any other file
04:05 < Milos> so why the error?
04:05 < Milos> works in bash, works in any other language
04:05 < isaacbw> encode dat buffer
04:05 < Milos> encode in wat
04:05 <@konobi> Manobi: i can't see an issue
04:05 < isaacbw> utf8 or something
04:05 < Milos> isaacbw, r u sure
04:05 < isaacbw> no
04:05 <@Nexxy> what error are you getting?
04:05 < Milos> :P
04:05 < Milos> Nexxy, errno58
04:05 < Milos> illegal seek
04:05 < isaacbw> I actually have no idea what I'm talking about, but it's worth a try
04:05 < Milos> I mean WTF
04:06 <@konobi> MiracleBlueWork: use open() then write()
04:06 < isaacbw> man, I just made the most delicious beans
04:06 < isaacbw> I lost my wallet and have no money
04:06 < Manobi> @konobi the problem is that it was using node.daemon which is not more working in node 0.8.x
04:06 < Milos> konobi, you mean me?
04:06 < isaacbw> and thought I was going to starve
04:06 < isaacbw> and then I looked in my cabinet and made these beans
04:06 < isaacbw> mmmmmmm
04:06 <@konobi> Milos: um, yes
04:06 < Milos> konobi, and I kind of tried that, but there are way too many irrelevant params
04:06 < Milos> that being said
04:06 < Manobi> konobi the problem is that it was using node.daemon which is not more working in node 0.8.x
04:06 < Milos> writeFile should just to write() underneath
04:07 <@konobi> Manobi: prolly just daemon
04:08 < isaacbw> Milos, encode dat bufer
04:08 <@konobi> Milos: to write a "file", it needs to seek to 0, unless you put it into append mode
04:08 < obe-wan-konobi> konobi, I'll try again, but if writeFile doesn't work why would write()
04:09 <@konobi> you're skipping the implicit seek
04:09 <@konobi> and are you taking the piss or just wanting to annoy me?
04:10 < obe-wan-konobi> I thought it was funny, but anyway
04:10 <@konobi> *le sigh*... that'd be obi-wan kEnobi
04:11 < Milos> I'm aware ;)
04:11 <@Nexxy> I LOVE STAR TREK
04:11 < Milos> hahah
04:12 < isaacbw> star trek is the shit
04:12 <@konobi> so while character devices and sockets, etc appear as files on the file system, they may not support all operations
04:12 < Milos> isaacbw, encode dat buvver
04:12 < isaacbw> do eeeeet
04:12 <@Nexxy> I only watch one episode
04:12 <@Nexxy> Trouble with Tribbles
04:12 < isaacbw> which show
04:12 < Milos> konobi, just reading docs for write() and I'll let you know what happens
04:12 < isaacbw> original?
04:12 < isaacbw> yea original
04:12 < isaacbw> original got pretty silly
04:12 <@konobi> Nexxy: http://www.youtube.com/watch?v=AphxyjrH4SE ?
04:13 < gkatsev> I want a martian cat. a tribble will suffice, I guess
04:13 <@mbalho> fun fact: node core doesnt support serial port file descriptorsb
04:13 < daleharvey_> rvagg: btw if you wanna turn up to the meeting tomorrow thatd be awesome :)
04:13 < isaacbw> get a liger
04:14 < Milos> konobi, what's offset?
04:14 < Milos> "offset and length determine the part of the buffer to be written."
04:14 < Milos> is that meant to be understandable
04:14 < Milos> because it isn't
04:14 < Manobi> konobi: daemon.node is not working and node-prefork also not
04:14 <@konobi> Manobi: best bug indexzero
04:14 < Milos> I'll go with offset 0..
04:15 < Milos> wtf is position
04:15 < Milos> these docs are madness
04:15 < isaacbw> MADNESS
04:16 <@konobi> Milos: sounds like you want node-serialport anyway
04:16 < owen1> how to send udp to a muilticast channel?
04:16 < Milos> konobi, yeah I know, but I'm going to give this /one/ more go.
04:16 < Manobi> konobi: indexzero is not maintaining the project anymore
04:17 <@konobi> bbl
04:17 < owen1> i am trying to send a udp packet from 1 host to another. it's only working when the sender is the same as the reciever. any idea why?
04:18 < Milos> wtf
04:18 < Milos> http://dpaste.com/ WHAT ARGUMENT
04:18 < Milos> I mean
04:18 < Milos> http://dpaste.com/909117/ what argument
04:19 < Milos> talk about the most useless traceback in the history of all things
04:25 < styol> Milos: offset
04:25 < Milos> what?
04:26 < styol> Milos: i think it is saying that the `offset` provided to fs.write from server.js was bad
04:26 < Milos> how do you know?
04:26 < styol> 433:11
04:27 < styol> 11 characters in on the arguments is offset
04:27 < Milos> no
04:27 < Milos> the 11 is the caret
04:27 < Milos> which is pointing at the letter w
04:27 < Milos> which as you can see has nothing to do with my code anyway
04:28 < Milos> hence crappy traceback
04:28 < Milos> I didn't write fs
04:29 < jerrysv> Nexxy?
04:31 <@Nexxy> jerrysv, 
04:31 <@Nexxy> hai
04:31 < jerrysv> Nexxy!
04:31 <@Nexxy> I went to pong you earlier but you weren't here
04:31 <@Nexxy> jerrysv!
04:31 < jerrysv> troy chatted with me today, said that you and i should chat about a cool hardware track for nodepdx
04:31 <@Nexxy> yup!
04:31 <@Nexxy> :D
04:31 < Milos> !
04:32 < jerrysv> also, i'm speaking at the first ever pdxnode event on thursday, you should come!
04:32 <@Nexxy> o snap
04:32 < jerrysv> Nexxy: woo! (we were taking our director of the beijing r&d center to lunch when suddenly Troy!)
04:33 < Milos> Nexxy, do you use node-serialport then?
04:33 <@Nexxy> Milos, yes
04:33 < jerrysv> Nexxy: wondering how many pi's we could get our hands on in the short term
04:33 < Milos> Nexxy, well wtf is this
04:33 < jerrysv> Milos: i think everyone does :)
04:33 < Milos> Nexxy, it installed fine
04:33 < Milos> but when I start node, I get this:
04:33 < Milos>    info  - socket.io started
04:33 < Milos> /root/node_modules/serialport/serialport.js:3868: Uncaught TypeError: Object #<Object> has no method 'emit'
04:33 < jerrysv> Nexxy: and i was thinking of controlling helicopters with node
04:34 <@Nexxy> jerrysv, like with othiym23's lib?
04:34 < jerrysv> Milos: that's what we call an exception
04:34 <@Nexxy> wifly
04:34 < jerrysv> Nexxy: yup! i have 2 of those now :)
04:34 < Milos> jerrysv, sure, I know what it is, I'm just new to node
04:34 < Milos> jerrysv, so what's going on?
04:34 <@Nexxy> gist the code maybe
04:34 <@Nexxy> I'm nto familiar with that error 
04:35 < jerrysv> me either, i was just being sardonic - what does your code look like?
04:35 <@Nexxy> is that like a tonic made with sardines?
04:35 < jerrysv> Nexxy: also control via an ardiuno or pi with node
04:35 < jerrysv> Nexxy: yes, the fish makes the gin even more awesome
04:35  * Nexxy cringe
04:35 < jerrysv> wow, that's a first
04:36 <@Nexxy> lol
04:36 < xk_id> do my functions all need to have "return" at the end, if I want my code not to leak?
04:36 <@Nexxy> no
04:36 <@Nexxy> your code will leak anyway
04:36 < xk_id> Are there any general guidelines for identifying leakage? Node.js warns me, though. 
04:37 < jerrysv> xk_id: don't make circular references
04:38 < Milos> Nexxy, looks like it was because I was doing
04:38 < xk_id> https://gist.github.com/arisolt/4708487
04:38 < Milos> var derp = new require('serialport').SerialPort(...);
04:38 < Milos> I don't want to create two variables just to initiate a serial port are you kidding me
04:38 < jerrysv> Nexxy: i wonder if we can get digisparks in time
04:39 <@Nexxy> Milos, the parsers are also in serialport
04:39 < Milos> what do you mean?
04:40 <@Nexxy> var serialport = require('serialport'); sp = new serialport("path", { baudrate : 115200, parser : serialport.parsers.readline("\n") });
04:40 <@mbalho> Milos: instead of complaining in IRC you should send pull requests
04:40 < Milos> Nexxy, I see.
04:40 < Milos> mbalho, ;)
04:41 <@konobi> ah, a T1 and a cup of tea later and i'm good
04:42 <@Nexxy> lol
04:43 < mscdex> T1000
04:43 <@konobi> that's what i get for cleaning and dusting our apartment
04:43 < Milos> Nexxy, ah beautiful, serialport works just fine.
04:43 <@Nexxy> Milos, indeed!
04:44  * jerrysv obd2'd his car in the garage one day with a laptop and node-serialport
04:45 <@Nexxy> jerrysv is legit
04:45 < jerrysv> Nexxy: awww
04:45 < mscdex> did you turn off the check engine light?
04:45 < jerrysv> mscdex: no, i let the repair people clear the code after i got the repair done. stupid ethanol
04:45 < jerrysv> mscdex: it gives them a feeling of accomplishment
04:46 < mscdex> :-D
04:46 < jerrysv> mscdex: it did make me hunt out a gas station that sells ethanol-free fuel, though
04:47 <@konobi> ob2?
04:47 <@konobi> obd2 even
04:48 < jerrysv> konobi: on-board-diagnostics "2"
04:48 <@konobi> ah
04:48 < jerrysv> konobi: every car since i think 1998 has a port you can connect to the car computer via
04:48 < jerrysv> konobi: and there are some nice bluetooth adapters that you can connect to via node
04:49 <@konobi> geekmyride style
04:49 < jerrysv> paranoid car owner that happens to have technical knowledge style
04:50 < jerrysv> and hardware is cool
04:51 <@konobi> jerrysv: geekmyride.org ... came across that on hackaday or similar a while back
04:51 <@konobi> oh, maybe it was when i was looking for small hires screens
04:51 < jerrysv> konobi: neat! will spend some time there. not sure i'm ready to cut into my car though, paranoid about theft of cool gadgets from it :(
04:53 < jerrysv> konobi: small hires screen = https://github.com/JerrySievert/4dlcd
04:55 <@konobi> jerrysv: ah... i'm looking for a 8" high dpi panel that has a seperate touch digitizer
04:55 < jerrysv> konobi: a little beyond what i've built for :(
04:56 <@konobi> yeah, just for a pi
04:56 < xk_id> Can this kind of information be useful in identifying a potential memory leakage? I get this warning shortly after I run the app, but ""FATAL ERROR: Evacuation Allocation failed - process out of memory"" occurs only much later. https://gist.github.com/arisolt/4708487
04:56 < jerrysv> i've been waiting for the power supply for my better-than-pi replacement
04:57 <@konobi> reminds me i need to test the speed of the h264 encoder on the pi
04:57 < jerrysv> konobi: i picked up an odroid, a little more expensive, but 8x the power (at least)
04:59 < isaacbw> if you don't build your own system by hand-soldering a surface mount ARM to a protoboard, you aren't col
04:59 < isaacbw> *cool
04:59 < Lorentz> more like if you don't build your own analog computer with some wire, wire cutter, and metal balls, you aren't cool
05:00 < jerrysv> isaacbw: too little work. http://www1.idc.ac.il/tecs/plan.html
05:00 < jerrysv> if you're going to do it, do it right. start with the gates and work your way up
05:00 < isaacbw> build your transistors out of crystal fragments
05:00 < jerrysv> isaacbw: or out of lego
05:01 < jerrysv> isaacbw: http://goldfish.ikaruga.co.uk/logic.html
05:01 < isaacbw> I wrote a paper on babbage's computer once
05:01 < isaacbw> that shit was intense
05:02 < isaacbw> man, mind blank. What's the component called that keeps its binary state
05:02 < jerrysv> isaacbw: memory?
05:02 < isaacbw> a single bit
05:02 < isaacbw> you can build memory out of it
05:02 < isaacbw> flip flop
05:02 < isaacbw> I wonder if there are any insects you could get to act like flip flops
05:03 < jerrysv> cockroaches. they can do anything
05:03 < isaacbw> I wish I had the know-how to build a computer out of cockroaches
05:03 < jerrysv> and on that note: Nexxy - i'll text you some thoughts, we should get together and come up with a plan sometime in the next week?
05:04 < isaacbw> or maybe interface with the cockroach brain as small computation units
05:04 <@Nexxy> jerrysv, certainly!
05:04 < jerrysv> Nexxy: woo! it will be awesome!
05:04 < jerrysv> night!
05:04 <@Nexxy> nanight!
05:04 <@konobi> ruh-roh... it's a mutiny!
05:08 < isaacbw> do you guys find this idea interesting: https://github.com/isaacbwagner/node-egress I'll definitely be using it privately, but if others would find it useful then I will put time into writing code to take a beating
05:08 < isaacbw> no point in wasting time if it will never lead my hard drive though
05:09 < airtanah> isaacbw: kind of finagle?
05:10 < airtanah> a restful RPC framework?
05:10 < berderquentin> Hi, I would like to know what solution there is to package my Nodejs app as a desktop app? OSX will be awesome. Thanks!
05:11 < isaacbw> airtanah, all it does is the routing, so it will make sense to use it within something like Connect
05:11 <@konobi> isaacbw: ah, looks like chained controllers
05:11 < isaacbw> I took the chaining syntax from angularjs
05:12 < airtanah> been meaning to learn angular
05:12 < isaacbw> it's incredible once you get it
05:12 <@konobi> berderquentin: appjs.org
05:13 < AAA_awright> isaacbw: Chaining syntax?
05:13 < berderquentin> @konobi thanks, I was looking at it, I was only wondering if something else was around.
05:13 < isaacbw> AAA_awright, ctrl-f "Methods can be chained together"
05:13 < styol> berderquentin: another one is https://github.com/rogerwang/node-webkit but its similar
05:13 <@konobi> berderquentin: there's an #appjs irc channel
05:13 < isaacbw> basically each function returns self
05:13 < AAA_awright> isaacbw: Well that's a core feature of ECMAScript
05:14 < AAA_awright> Hence my question
05:14 < AAA_awright> I see the backlog
05:14 < berderquentin> Awesome! I will get started, thanks @styol @konobi 
05:14 < isaacbw> how is it a core feature
05:14 < AAA_awright> e.g. string.substr().concat().length
05:14 <@konobi> AAA_awright: for a route, you chain functions together, /a/b/c -> c(b(a()))
05:14 < isaacbw> it's easy to implement, but it isn't a feature of ecmascript so much
05:15 < isaacbw> this idea just works better for me conceptually than the way restify and express do it. Rather than an HTTP method having a url, urls have methods
05:15 < isaacbw> functionally it's almost identical
05:16 < AAA_awright> It sounds like that could end up violating a lot of Web principles
05:16 < isaacbw> or, rather than responses having urls, urls have responses
05:16 < isaacbw> in what way AAA_awright 
05:16 <@konobi> isaacbw: /user/:user/post/:post/comments 
05:17 <@konobi> that idea?
05:17 < AAA_awright> URL templates like that are alright
05:17 < isaacbw> it's for RESTful APIs, yea
05:17 <@konobi> isaacbw: so one method handles the user, the next the post and the next the comments?
05:17 < AAA_awright> But if you're crafting method calls based around your URI then that sounds like you're crafting transparent URLs which is a no-no
05:18 < isaacbw> AAA_awright, I really want to understand what you mean, but I don't
05:18 < isaacbw> how is this functionally different from the express router
05:18 < isaacbw> konobi, potentially, via Route#pre
05:18 < AAA_awright> isaacbw: I mean like, a core concept of URIs is that they're opaque, they don't have any meaning except what they identify
05:18 < isaacbw> right
05:19 < AAA_awright> Also how is one supposed to revision API versions?
05:19 < isaacbw> I'm sorry?
05:19 < AAA_awright> If I need to add a field, or remove support for a field in a resource, what do I do?
05:19 < AAA_awright> Normally you craft a new media type
05:20 < isaacbw> have you used express?
05:20 < AAA_awright> But it sounds like that wouldn't be supported
05:20 < isaacbw> or restify?
05:20 < AAA_awright> No, too much abstraction, and I haven't heard of the latter
05:20 < isaacbw> I see
05:20 < jtomasrl> whats better choice in production, bash, forever, upstart, something else?
05:20 < isaacbw> AAA_awright, what does your routing code look like?
05:21 < isaacbw> and have you worked with RESTful APIs?
05:21 < AAA_awright> I route things in two stages, I have a 30-40 line async URL router, but normally there's only a handful of routes
05:21 < AAA_awright> Mostly I store URIs in a table
05:22 < isaacbw> this is just another way of constructing that table
05:22 < isaacbw> and instead of a table, it is stored as a tree
05:23 < AAA_awright> Well internally your table has optimizations, and is compressed, and such, but at the data model level we call it a table
05:23 < isaacbw> it really is a tree in this case
05:23 < isaacbw> each step (?) in a URI is a node in the tree
05:24 < AAA_awright> Each hierpart? (Directory)
05:24 < isaacbw> right
05:25 < isaacbw> and executing the router traverses the tree based on the URI
05:25 < AAA_awright> That sounds a bit too transparent
05:25 < isaacbw> in what way
05:25 < AAA_awright> If I want to give each user a URI /username for instance
05:25 < isaacbw> so /username/:user?
05:25 < isaacbw> or /:username?
05:26 < AAA_awright> No, /username or maybe /~username
05:26 < isaacbw> right
05:27 < isaacbw> so you mean, how would you add those to the router?
05:28 < AAA_awright> Well at least in express you'd just need a bunch of wildcard routes
05:29 < isaacbw> this would be the same. You could do root.path(':username').get(function(req, res) {... } ) and do a database lookup
05:29 < isaacbw> you would have access to the username through req.params.username
05:30 < isaacbw> it's not very different from express. It just lets you do a bit more with building routes
05:30 < rvagg> daleharvey_: I believe it'll be 2am my time, I'm trying not to encourage my insomnia so I don't think I'll be able to make it!
05:30 < Tabmow> Anyone familiar with testem and jenkins integration here? testem ci works from the cmd line, but when ran through jenkins it just stalls...
05:34 < paradoxquine> anyone mind linking me to a good tutorial on setting up mocha in browser? I cant seem to find instructions
05:36 -!- mode/#Node.js [+o TooTallNate] by ChanServ
05:38 < sshaginyan> Can someone tell me which is faster node.js http server or tomcat...?
05:39 <@mbalho> sshaginyan: what does the server do
05:39 < othiym23> sshaginyan: depends on what you're trying to do
05:39 <@mbalho> do do do
05:39 < mscdex> node.js is faster!
05:39 < mscdex> no questions about it!
05:39 < othiym23> Node.js is probably better compared to jetty than Tomcat, though
05:39 < mscdex> :-D
05:39 <@mbalho> big data is faster but only in china
05:39 < mscdex> this channel is not biased in any way
05:39 < sshaginyan> othiym23: I'm doing a backbone application
05:39 < sshaginyan> for macys
05:40 < sshaginyan> So it's the Macys mobile site
05:40 < othiym23> well OK, but what's the server doing?
05:40 <@mbalho> ahh for macys i'd say tomcat would be faster
05:40 < othiym23> if you're jut serving up static assets, nginx is probably faster than either of Node or Tomcat
05:41 < othiym23> is the Macys storefront still using moovweb for mobile?
05:41 < mscdex> on an unrelated note: being able to push to many servers as a single remote is so awesome
05:41 < sshaginyan> othiym23: It's not only static files dynamic too
05:41 < sshaginyan> othiym23: yes
05:41 < mscdex> s/remote/git remote/
05:41 < sshaginyan> But there moving away
05:41 < othiym23> OK
05:41 < sshaginyan> othiym23: So tomcat...?
05:42 < othiym23> well, it's not an apples-to-apples comparison, because you're going to have to write some app logic
05:42 < sshaginyan> othiym23: I don't want tomcat :(
05:42 < othiym23> and depending on how much there's already there, it could be a lot easier to adapt whatever Java / Spring / grails / what-have-you you already have than write a new back end
05:43 < othiym23> especially if one of the goals is to have one stack serving up both the mobile and non-mobile sites
05:43 < othiym23> like, you could swap Node in for moovweb, but that's still gonna be kind of gross tobe using Node as a proxy / scraper
05:43 < jtomasrl> what do debian users use instead of upstart
05:43 < sshaginyan> they are writing a new backend and all they're doing is getting json from a backend parsing it in tomcat/spring and serving it to backbone
05:44 < othiym23> jtomasrl: sysv init or rc-scripts
05:44 < othiym23> jtomasrl: there have been some people working on getting systemd working on Debian, but last time I checked it was kind of a clusterfuck
05:44 < othiym23> sshaginyan: Node's real good at serving and transforming JSON
05:44 < jtomasrl> othiym23: any recomendation?
05:45 < sshaginyan> So node then?
05:45 < othiym23> for that particularly application, it's probably faster than Tomcat
05:45 < othiym23> but there are no absolutes here, gotta benchmark it
05:45 < othiym23> jtomasrl: for running Node services? Don't use Debian ;)
05:45 < danheberden> you can also add `@reboot /path/whatever` to your crontab
05:46 < jtomasrl> othiym23: why not
05:46 < othiym23> Debian's nodejs packaging is horrendous, and upstart is sweet
05:46 < danheberden> jtomasrl: ^
05:46 < othiym23> although for all I know there are decent packages for upstart in unstable
05:46 < othiym23> danheberden: yeah, but that doesn't restart the service if it falls over dead
05:46 < othiym23> upstart and systemd are a lot more than just init scripts
05:46 < danheberden> ah, i thought he was just asking for the init portion
05:46 < danheberden> my bad
05:47 < jtomasrl> does upstart really wrth changing from debian to ubumtu?
05:47 < othiym23> jtomasrl: if you want to use Debian, build node from source and find some upstart packages
05:47 < jtomasrl> i did build from source
05:47 < othiym23> jtomasrl: I think so, but uh my boss when I was running a Node cloud was the former CTO of Canonical, so there might have been some influence there
05:48 < owen1> is there anything special with a variable named config? i can access this variable from any module in my codebase, even if this module never recieved this variable!
05:48 < Milos> How am I meant to send data on client connection when I can only get data from the serial port when I use .on()? There's no .read() and I need synchronous access here...
05:48 < Milos> http://bpaste.net/show/WEJ8MrO4xH4w6c1kHeFy/
05:49 < othiym23> owen1: somewhere in a module you assigned to config without putting var on it and it got attached to the global scope
05:49 < othiym23> two ways to fix: 1. add 'use script' to the header of all your files 2. find where you leaked it as a global and fix it ;)
05:50 < othiym23> oops 'use strict' not 'use script'
05:50 < othiym23> there is definitely a point in the day after which I should no longer be allowed to write code or give technical advice
05:50 < owen1> othiym23: i read about 'use script' but always assumed it's for client side!
05:50 < owen1> thank you!
05:51 < othiym23> strict mode definitely works in V*
05:51 < owen1> i think it should be a best practice for node
05:51 < othiym23> V8
05:51 < othiym23> I hear tell it can have negative impacts on performance, but I'm not sure if that's true
05:52 < owen1> someone from the node core team, is othiym23 speaks the true?
05:52 < isaacbw> lol
05:53 < owen1> http://stackoverflow.com/questions/9031888/any-way-to-force-strict-mode-in-node
05:53 < owen1> i am going to try 'node --use_strict'
05:54 < cloudbender> wow my logs are from three days ago
05:54 < othiym23> owen1: that's another way to do it, and it looks like it doesn't make much difference to V8's performance: http://jsperf.com/how-much-performance-is-gained-from-use-strict
05:54 < mscdex> jtomasrl: upstart scripts are definitely easier to write than sysvinit scripts
05:55 < owen1> mscdex: but upstart is not available in debian
05:55 < owen1> (if u care)
05:56 <@TooTallNate> mscdex: indeed, on my pi i resorted to an init.d script
05:56 <@TooTallNate> though upstart *is* in the repository
05:56 <@TooTallNate> it's not installed by default
05:56 < mscdex> owen1: i thought he was talking about moving to ubuntu?
05:56 < othiym23> you can make the upstart magic happen if you're willing to force the issue: http://web.dodds.net/~vorlon/wiki/blog/Upstart_in_Debian/
05:56 < owen1> mscdex: they all do. he will end in debian. just wait
05:57 < isaacbw> arch 4 lyfe
05:57 < mscdex> centos 4 lyfe
05:57 < mscdex> jk
05:57 < isaacbw> lol
05:58 < mscdex> centos is tolerable, but i wouldn't use it for my main desktop os
05:58 < othiym23> Debian's absolutely infuriatingly terrible handling on Node has tempted me to bail on it, but I have Debian running on way too many oddball architectures that Ubuntu doesn't support
05:58 < isaacbw> just install node from source
05:58 <@Nexxy> that only takes 2 hours
05:58 < othiym23> isaacbw: that's what I do, but JESUS the policy discussion around the name change irritated me
05:59 < mscdex> takes less than a minute for me
05:59 < owen1> node --use_strict showing me issues with mongodb client library. i guess i'll add it to each file );
05:59 < echo> Depending on your level of processing.
05:59 < othiym23> never have I been prouder to have been too lazy to become a Debian Developer
05:59 <@Nexxy> mscdex, cross compiling?
05:59 < mscdex> same arch? :S
05:59 < othiym23> what, there are code quality issues with node-mongodb-native?!?
05:59 < othiym23> I DON'T BELIEVE IT
05:59 <@Nexxy> oh I thought you were talking about pis
05:59 < owen1> othiym23: (:
05:59 < mscdex> no, nate was :-)
05:59 < sshaginyan> othiym23: So here is the deal I'm going to serving a bunch of files initially such as require.js, query.js underscore.js backbone.js and much much more and going to paint the header footer and navigation only once. then I'm going to have a content area where my content views will painted and repainted.
05:59 < mscdex> i only have a pandaboard
05:59 <@Nexxy> mscdex, your context module is broken
06:00 < mscdex> i don't use a context module!
06:00 <@Nexxy> there's your problem
06:00 < sshaginyan> othiym23: after the initial load node.js is basically going to be serving json objects and that's it
06:00 < mscdex> excessive dependencies ftl
06:00 < othiym23> I write all my context handler by hand using only JS valid as of ES3
06:00 < sshaginyan> othiym23: So to node.js or not to node.js that is my question
06:01 < mscdex> to node.js is the answer!
06:01 < othiym23> sshaginyan: yeah, you can use something like Restify with a static middleware or push the serving of your static assets off to a server like nginx and it should be relatively straightforward to do in Node
06:02 < othiym23> if you're going to be writing a JSON-based API server, I strongly recommend Restify over Express, if you're not just going to use the built-in http library
06:02 < othiym23> hi niallo, how was the Developer Week thinger?
06:06 < owen1> sshaginyan: just use node - https://github.com/oren/node-website-template
06:06 < owen1> sshaginyan: no need for a framework. node is build for web services
06:06 < sshaginyan> owen1: Will it be faster than tomcat?
06:07 < owen1> sshaginyan: everything in express can be done with modules that people wrote. yes it will.
06:07 < othiym23> sshaginyan: honestly, there's no way to tell without benchmarking
06:07 < sshaginyan> k
06:07 < othiym23> and don't use Express for API services ;)
06:09 < echo> othiym23: Do you have a specific recommendation to follow that advice up with?
06:09 < asdf12> hapi looks cool
06:10 < owen1> asdf12: but might be hard to get help. isn't it super new?
06:11 <@Nexxy> owen1, have you seen the docs?
06:11 < asdf12> its not super new
06:11 < othiym23> echo: yeah, Restify
06:12 < othiym23> hapi is interesting but has a loooot of stuff crammed into it, some of which seem pretty tightly coupled to Eran's specific use cases
06:12 < xdomox> should i use web sockets for comet?
06:13 < xdomox> i want to update a calendar in real time as events are created
06:13 < othiym23> web sockets is an alternative to Comet, not an implementation of it
06:13 < othiym23> is? are.
06:14 < asdf12> well...
06:14 < asdf12> just remember, hold on when you get love, and let go when you give it
06:15 <@Nexxy> deep thoughts, with asdf12 
06:15 < othiym23> xdomox: sounds like a good application for socket.io / engine.io, which takes care of dealing with all the WebSockets / XHR / long-polling bullshit for you
06:20 < Milos> Nexxy, you happen to be around?
06:20 < Milos> Or anyone else really.
06:20 < othiym23> so when I'm using the Node debugger, how the hell do I actually get a breakpoint to work?
06:20 <@Nexxy> Milos, always
06:21 < othiym23> it would be awesome if I could make a breakpoint work without having to fire up node-inspector every single time
06:22 < Milos> Nexxy, I've got this simple code working with serialport, but I'm wondering how on earth to do a synchronous read, in other words: http://bpaste.net/show/rk3gF3k7KXudoXWMR6IT/
06:23 < owen1> Nexxy: no
06:24 <@mbalho> Milos: https://npmjs.org/package/concat-stream
06:24 < Milos> wat
06:29 <@mbalho> Milos: i was just guessing the answer without reading your code
06:29 < Milos> well is it relevant?
06:29 < Milos> It looks kind of relevant but not sure
06:30 <@Nexxy> Milos, you want to write to the server and wait for a response?
06:30 < Milos> what I need to do is this
06:30 <@Nexxy> s/server/servo
06:31 < Milos> the client connects, so the server sends the client the current servo position. in order to get the current position, it queries over serial. that part is easy. now how do I READ that response synchronously and reply.
06:31 <@Nexxy> I think the answer is probably that you don't
06:31 < Milos> wat
06:32 <@Nexxy> you can add an event listener to serial when the client connects
06:32 <@Nexxy> 1 sec
06:32 < echo> Milos: Feel free to ignore me, I'm just curious. Why would you need the read to be synchronous?
06:32 < Milos> ok
06:32 < Milos> echo, because in my brain I have this: "query serial port, read serial port, send answer"
06:32 < Milos> echo, you can't to the latter without reading first.
06:33 < Milos> node.js has too much callback business that is making it difficult to manage
06:33 < skaag> I think you're going about it wrong
06:34 < Milos> yup sure, so what's the suggestion
06:34 < skaag> I think you need to have another, parallel process reading the servo all the time
06:34 < skaag> stick the values in redis
06:34 < Milos> wtf is redis?
06:34 < skaag> then when a node.js call comes for those values, you hand them out immediately
06:34 < skaag> redis = memcache, same thing
06:34 < Milos> for my purposes I don't need anything continually reading the serial port
06:34 < skaag> some kind of shared memory
06:35 < echo> Rofl, it's a key->value store that's highly efficient in using memory similar to memcached.
06:35 < Milos> when I want to read from the serial port, I want to read from it. and when I want to read from it I expect to be able to compute the response on the following line of code, which I cannot do
06:35 < skaag> sure but it's still a better way to do it, because it decouples the serial port from node requests
06:35 < skaag> imagine you get 1000 requests per second
06:35 < skaag> you're not going to query the servo 1000 times!
06:35 < Milos> why not!
06:35 < skaag> per second?!
06:35 < Milos> per second!!
06:36 < skaag> because in some cases you would even overrun the serial connection speed
06:36 < Milos> lol
06:36 < skaag> 10,000 per second?
06:36 < skaag> 100,000?
06:36 < skaag> :-)
06:36 < Milos> 1,000,000!!!!
06:36 < Milos> anyway what's your pint
06:36 < skaag> point is, it's better to decouple the two
06:36 < Milos> yeah, and then?
06:36 < skaag> update shared memory with the servo state
06:37 < skaag> and just serve it from memory when a node.js request comes
06:37 < skaag> I think that's a much healthier design
06:37 < skaag> not only are you returning a result immediately, but you seriously simplify your code
06:37 < skaag> and you query the servo on its own terms
06:38 <@Nexxy> Milos, try this? http://bpaste.net/show/75170/
06:38 < skaag> that will keep things stable for you
06:38 < Milos> you realise there's much more than just querying for the position skaag 
06:38 < Milos> if I have a global read function
06:38 < skaag> what else?
06:38 < Milos> how the flip am I meant to know wtf it's going to send back
06:38 < skaag> it's just a servo isn't it?
06:38 < Milos> it's a servo that can do things -_-
06:38 < Milos> a global read function is a no-no
06:38 < Milos> I'm not going to do things like
06:38 < Milos> var wtfAmIDoing = "reading position";
06:39 < Milos> if wtfAmIDoing = "reading positon" { ...
06:39 < gildean> Nexxy: that's good, but sends the data to all the clients when it comes from the serial, not just the one that asked for it
06:39 < Milos> } else if { ...
06:39 <@Nexxy> gildean, it does?
06:39 <@Nexxy> oh, right
06:39 <@Nexxy> I guess if that's not the intent
06:40 < Milos> it wouldn't be ideal
06:40 < skaag> Milos: you can read statuses of all your serial connected hardware, and put them all in separate variables
06:40 < Milos> thanks for the effort though I'm looking into it
06:40 < Milos> skaag, how am I meant to know what the reply is for
06:40 < Milos> skaag, the reply is just a value
06:40 < Milos> skaag, it doesn't reply with "ok you want the position here's the position"
06:40 < Milos> it just sends the position
06:40 < skaag> the reply is for the last read value
06:40 < skaag> for servo X1
06:40 <@Nexxy> Milos, you could also just use something like
06:41 <@Nexxy> in the serial's on data listener
06:41 <@Nexxy> serial.position = position;
06:41 < skaag> again, you get that parallel process, querying your servo, say, 10 times per second, or 100 times per second
06:41 < Milos> how do I know if that's what I'm getting?
06:41 < gildean> Milos: i'd say it's just a matter of breaking the code into events, emitting some events and responding with other events
06:41 < skaag> and saving the value in shared memory key
06:41 <@Nexxy> well, unless I'm misunderstanding what you're trying to do
06:42 < skaag> so whenever you query that key, you get the last read value, which is from the last 10ms
06:42 <@Nexxy> perhaps it might be better to find a reasonable interval to query the servo's position
06:42 < Milos> asynchronous is mind-boggling, because I'm now having an ondata event that can be for any data
06:42 <@Nexxy> and then just respond to a client's request with the most recent value
06:42 < skaag> that's what i'm suggesting to him
06:42 < Milos> how am I meant to know what is being replied to
06:42 <@Nexxy> you could use a request ID, or use something that allows you to use a callback
06:42 <@Nexxy> I don't know socket.io very well
06:43 <@Nexxy> maybe it does
06:43 < Milos> I've got lots to think about then
06:43 <@Nexxy> but with dnode you just use a callback
06:43 < skaag> thinking is fun
06:43 < skaag> :)
06:43 < Milos> either that or change my language to something that doesn't use callbacks all the time
06:43 < cloudbender> If I have the follwing model .....
06:43 < asdf12> thats why i switched to php
06:43 < Milos> only using node.js because it means I can do TCP over the browser
06:43 < Milos> well that's socket.io, but yes
06:44 <@Nexxy> serial is async anyway
06:44 <@Nexxy> so it's best to just embrace it instead of pretending it's not
06:44 < Milos> yes
06:44 < Milos> it makes things take way too long
06:44 < Milos> I have such a simple situation but it's getting complex
06:44 < asdf12> no way 
06:44 < penzur> hey, where's my pancake?
06:44 <@Nexxy> the interval solution is quite simple
06:45 < penzur> opps xsend
06:45 < cloudbender> ( function (window) { ... 5000 lines of code ...})(window)
06:45 < cloudbender> IS this a sandbox model ?
06:45 < cloudbender> ( function (window) { ... 5000 lines of code ...})(window))
06:46 < Milos> depends, do you live on the beach?
06:46 < cloudbender> Only on my good days
06:46 < Milos> ;)
06:46 < asdf12> what does you mean sandbox
06:46 < airtanah> cloudbender: the sandbox isn't 100%
06:47 < cloudbender> The whole module is a self calling function wrapped in parens
06:47 < cloudbender> with global as the passed parm
06:47 < airtanah> okay i was thinking of another sandbox
06:47 < asdf12> yea everything gets local scoped inside that function
06:48 < cloudbender> Is that becuase in javascript one must be 'this' obsessive ?
06:48 < SomeoneWeird> lol
06:48 < SomeoneWeird> scope issues
06:48 < cloudbender> 'thissive'
06:48 < cloudbender> 'thistic'
06:48 < gildean> Milos: socket.io clients have a .id value that can be used
06:48 < Milos> gildean, hm
06:48 < Milos> gildean, so I have to keep track of them like that...
06:49 < cloudbender> What do the outermost parens do ?
06:49 < cloudbender> or assure
06:49 < gildean> Milos: if you can pass the socket.id around the functions that handle the serial-ports events, then you could just pass the id first there and then on answer go like: io.sockets.socket(< session id>).emit('event name', arguments)
06:50 < Milos> gildean, yeah, probably... wow, I still can't believe it has to be this complicated
06:51 < gildean> Milos: well you are creating a server that handles thousands of connections and relaying data from those to a single serial-port
06:51 < cloudbender> So it draws the scope into (this) module, and gives me a global reference to where I can 'toss poo' out of the sandbox.
06:52 < Milos> and so I expect it to block
06:52 < cloudbender> >> me ?
06:52 < purr> cloudbender: SyntaxError: Unexpected end of input
06:52 < asdf12> cloudbender: you don't have to pass in window
06:52 < asdf12> why are you tossing poo
06:52 < cloudbender> out of the sandbox
06:53 < cloudbender> << is hygenic
06:53 < Milos> no that would be for a litter box
06:53 < cloudbender> I know it seems simple, but I don't get why he used the outermost parens
06:53 < cloudbender> ( function (window) { ... 5000 lines of code ...})(window))
06:55 < asdf12> cause
06:55 < asdf12> its an anonymous function alone
06:55 < asdf12> in a scary world
06:55 < gildean> Milos: the problem i see with your program is that you can't easily bind the write and data events of the serial port together
06:55 < asdf12> it needs to be cradled and held by some loving ()
06:55 < Milos> gildean, yeah and it's driving me nuts
06:56 < Milos> because on any other langauge I'd just read from the serial port, synchronously
06:56 < gildean> Milos: so like, there's no guarantee that when you write that the data coming next is from that particular write
06:56 < cloudbender> sniff, sniffle, ... what a beautiful sentiment
06:56 < Milos> gildean, exactly...
06:57 < asdf12> and also it has no identity
06:57 < asdf12> so even more reason to be scared
06:57 < Milos> should I just not use node.js
06:57  * Milos looks for other websocket-compatible solutioms
06:57 < Milos> s/ms/ns/
06:58 < gildean> Milos: what are you trying to do, because i've seen people do socket.io + serial + robots with multiple users
06:58 < gildean> so there's some solutions out there
06:58 < gildean> did you try checking the other projects out?
06:58 < Milos> atm I have a slider on a webpage, which needs to initialise to the current servo position
06:59 < Milos> that's not ALL I'm trying to do
06:59 < Milos> because sure for a simple situation like this I could just ignore half the problems that go with using async
06:59 < cloudbender> Milos do you understand servo-loops ?
06:59 < asdf12> cloudbender: but anyway,y ou dont have to pass in window
06:59 < asdf12> its a global
06:59 < cloudbender> I know.  I think thats a question of 'form'
06:59 < Milos> cloudbender, um, I don't know what 'servo-loops' is, why?
07:00 < cloudbender> You have a slider, and a servo position.  The two are either in balance, or they are not.  Act to maintain the balance.
07:00 < Milos> wat
07:00 < Milos> dude
07:01 < cloudbender> Both are subject to a central equation
07:01 < Milos> I have the solution, I just can't implement it without overcomplicating the server-side of things
07:01 < tprice> why am i getting this error. this is the error http://webui.mangoraft.com/history and this is the code https://github.com/MangoRaft/webui/blob/master/server.js#L51
07:02 < gildean> Milos: you could just do what Nexxy suggested first, and just send the data to all clients when new data comes from the serial
07:02 < Milos> that's really impractical for the future and a waste of bandwidth in cases where I only have GPRS coverage
07:03 < asdf12> so
07:03 < asdf12> whats this all about eh?
07:03 < asdf12> you want to send new data to specific clients ?
07:03 < Milos> I'll just look into python which is more of my native tongue, and see how that goes, but node.js is interesting nevertheless
07:03 < cloudbender> Twenty-seven faces, with thier eyes up to the sky ?
07:04 < penzur> what is an inception pattern?
07:04 < Milos> don't look into it or you'll never get out
07:04 < asdf12> is that what you're trying to do? why don't you implement a pub/sub object
07:04 < cloudbender> SOmething you avoid in'bladerunner'
07:04 < daurnimator> is string interpolation of the type ":foo :bar" something built into node?
07:05 < Milos> asdf12, are you talking to me?
07:05 < asdf12> yea
07:05 < Milos> asdf12, so what's your suggestion?
07:05 < gildean> Milos: i'm not getting how you'd waste bandwidth?
07:05 < asdf12> why don't you make a pub/sub
07:05 < Milos> gildean, sending lots of people an update only one of them needs
07:05 < Milos> asdf12, a pub sub and then?
07:05 < asdf12> like client subscribes to x, y, z data
07:05 < asdf12> your server gets data, its x sends it to the subscribers to x
07:05 < Milos> because it's as simple as this.
07:05 < gildean> Milos: well why is there multiple people connected then?
07:06 < Milos> client requests data. server reads serial port, sends client data. that's how easy it is. but not with node.ks ;)
07:06 < TheAceOfHearts> so, I had a bit of spare time and I decided to make a quote-sharing site. anyone wanna check it out and give me feedback? http://kwoter.aws.af.cm/ :D
07:06 < Milos> gildean, because there will be serveral people using it
07:06 < asdf12> Milos: so you really just want permissions?
07:06 < gildean> Milos: ok, well that's not hard, let me show you
07:06 < Milos> okay
07:06 < asdf12> thats really easy if you just want to do permissions -_-
07:07 < Milos> asdf12, what do you mean by permissions?
07:07 < Milos> asdf12, I just want a client to be able to ask for something and get it back without sending to everyon else.
07:07 < Milos> It's that simple.
07:07 < daurnimator> anyone want to answer my question?
07:08 < cloudbender> Oh and garbage collection ... sandboxes improve the GC, yeah awesome
07:08 < Milos> gotta put those poos somewhere right?
07:08 < cloudbender> yar
07:09 < cloudbender> duarnimator I'm not sure what you are asking
07:09 < cloudbender> er, daurnimator
07:09 < asdf12> client---> socket.emit('request', my_client_id) ; socket.on(my_client_id, function() { i got data }) || server ---> socket.on('request', function() { get data... socket.emit(my_client_id, the_data  )  })
07:10 < asdf12> WHYS THAT HARD
07:10 < daurnimator> cloudbender: in a few libraries I see you provide a formatting string like ":foo my text :bar" and it swaps out foo for some parameter the library generates
07:10 < Industrial> What's the best way to implement mixins in javascript? right now I'm just injecting stuff into objects: https://gist.github.com/Industrial/68d598da7da76e6cfc85
07:10 < Milos> asdf12, the underlying issue is accessing data from a serial port.
07:10 < asdf12> wtf
07:11 < cloudbender> I think you are looking for a function on a regular expression, in javascript.
07:11 < asdf12> i thought you were complaining about everyone getting your data when you emit 
07:11 < asdf12> it
07:11 < Milos> that was the second problem
07:11 < Milos> did you see my source or not?
07:11 < asdf12> well i fixed your second problem
07:11 < Milos> asdf12, http://bpaste.net/show/rk3gF3k7KXudoXWMR6IT/
07:13 < asdf12> what is line 18
07:13 < Milos> asdf12, sending the given servo ID a new position to move to
07:14 < asdf12> you do that after a client requests data or before
07:14 < asdf12> your web client
07:14 < Milos> I need the web client to receive the servo position immediately on page load, hence the need to write to the serial port on connect. then I need to read the port immediately after and send the response back to the web client.
07:15 < Milos> in every other language, that would happen like this: servoWrite(...); send(servoRead(4096));
07:15 < airtanah> Milos: have you ever done any c++ addons?
07:15 < Milos> airtanah, nah, did you think to write my own node.js extension?
07:16 < airtanah> Milos: i wonder if it would it fix the problem?
07:16 < TheAceOfHearts> http://kwoter.aws.af.cm/ feedback please :D?
07:16 < Milos> if node.js supports blocking then yes, otherwise no
07:17 < airtanah> Milos: you can block at the c++ layer
07:17 < Milos> I'm more interested in just reading about the websockets protocol and writing my own server in any language of my liking
07:17 < Milos> airtanah, well, maybe one day
07:17 < Industrial> whee, https://github.com/Industrial/Observable
07:20 < airtanah> Milos: not liking node?
07:20 < asdf12> http://hastebin.com/wobabicalu.coffee
07:20 < asdf12> miles ^
07:20 < asdf12> FIXED
07:20 < asdf12> there wasnt hard
07:21 < asdf12> now you can not emit to all the web clients, and only respond to web clients who ask for stuff
07:21 < airtanah> why does it say .coffee?
07:21 < asdf12> idk
07:22 < airtanah> anyone here use node-spdy?
07:23 < Milos> airtanah, because coffeescript
07:23 < Milos> asdf12, taking a look now
07:24 < asdf12> its not coffeescript
07:24 < Milos> I'm aware
07:24 < Milos> asdf12, so, how do I now read other values from my servo, that only have one byte in the response?
07:25 < asdf12> i dont know anything about servo
07:25 < Milos> traditionally, I'd do it like this. servoWrite('give me thing1'). servoRead(4096); // returns some bytes. servoWrite('give me thing1'); servoRead(4096); // returns several bytes
07:25 < Milos> yes I know you don't
07:25 < Milos> but the way I am reading from the servo as you can see, is hardcoded to take a position, but that's not everything I can read from the serial port
07:25 < Milos> so it immediately gets more complicated
07:26 < Milos> sorry the second part was meant to say thing2 and return one byte
07:26 < Milos> but just an example
07:26 < Milos> so how am I meant to know what I'm being given, I need to have contexts, etc
07:27 < Milos> airtanah, it might not be suited for my purpose
07:28 < asdf12> well
07:29 < asdf12> http://hastebin.com/jugucuxaru.coffee
07:29 < asdf12> that would be what you're describing
07:29 < asdf12> but it does not scale well
07:29 < airtanah> Milos: spdy question was a tangent, whoops
07:30 < asdf12> cause theres a 0.12r411xz% chance you will get the wrong 'context' when you read the data
07:30 < asdf12> really depends on how many web clients are writing to the 'servo' or whatever
07:31 < asdf12> but if you want it to be simple, and like 'sync' then yea
07:31 < Milos> yeah
07:31 < Milos> a bit strange
07:31 < Milos> I gotta go though, thanks for the chat, will be back later
07:33 < asdf12> Milos: i mean if you wanted to make it slightlyyyyy more complex
07:33 < asdf12> just a tinsy bit
07:33 < asdf12> is just make a array and queue up write/reads
07:34 < asdf12> that way you can always ensure context
07:39 < ckknight> Is there a better way to get the global object, not knowing whether one is in the browser or node (or some other theoretical environment) than this: typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : this
07:46 < asdf12> what would be the point?
07:48 < ckknight> asdf12: of getting the global object?
07:48 < asdf12> like, what are you trying to do
07:49 < asdf12> i think it'll be better to just test if you're in node
07:49 < ckknight> I'm trying to get the global object, regardless of environment.
07:50 < asdf12> glob = typeof modules !== 'undefined' ? global : this
07:50 < asdf12> i'd do that
07:51 < ckknight> why not check if typeof global !== 'undefined', though?
07:51 < asdf12> well actually
07:52 < asdf12> it'll be better to do typeof module.....etc && modules.exports or whatever
07:52 < asdf12> ckknight: i guess it doesn't matter
07:52 < asdf12> but you would want 2 conditions
07:52 < asdf12> JUST in case for instance modules exists in the global name space, but its not node
07:58 < tprice> how do i format the code in cloud9?
08:19 < amurdaca> hey guys
08:19 < amurdaca> trying to install npm on my FreeBSD box but i get WARN cannot run in wd
08:20 < amurdaca> and installation stop
08:20 < amurdaca> i have successfully compiled and installe node
08:20 < amurdaca> but i don't understand this error _-_
08:23 < TheAceOfHearts> https://github.com/isaacs/npm/issues/2984 ??
08:26 < isaacbw> amurdaca, which version are you running
08:27 < isaacbw> you mean when you try to run npm install?
08:27 < isaacbw> https://github.com/isaacs/npm/issues/2984
08:27 < isaacbw> oh
08:40 < [AD]Turbo> hola
08:41 < isaacbw> who goes thar
08:47 < TheAceOfHearts> http://kwoter.aws.af.cm/ anyone wanna give some feedback :P?
08:47 < TheAceOfHearts> slightly revised version, fwiw: http://cl.ly/image/2f3r2G0m3H0o
08:47 < mscdex> offtopic: anyone here ever use zabbix?
08:50 < asdf12> you minified your html?
08:50 < isaacbw> it's a lot of work just to share a quote
08:52 < isaacbw> are there any good web interfaces for testing snippets of code
08:52 < isaacbw> in node
08:52 < asdf12> i shared a quote
08:52 < asdf12> kwoter.aws.af.cm/q/VVu8qwdwgM
08:52 < ckknight> asdf12: what's wrong with minimizing HTML? some templating languages (like jade) can do it for you super-easy
08:52 < asdf12> http://kwoter.aws.af.cm/q/VVu8qwdwgM
08:52 < isaacbw> like, you paste a snippet, it gets evaluated, then you have a console you can use to execute functions
08:53 < isaacbw> or whatever
08:53 <@Nexxy> there is this thing
08:53 <@Nexxy> called a REPL
08:53 <@Nexxy> ;o
08:53 < nb-ben> you cannot have a browser imitate the entire node.js infrastructure without creating a custom browser
08:53 < asdf12> btw i can't believe morgan freeman said that
08:53 < isaacbw> Nexxy, the REPL is fugly
08:53 < isaacbw> and makes it hard to edit the snippet being evaluated
08:53 <@Nexxy> oh, not enough gradients and drop shadows?
08:53 < isaacbw> it's very barebones
08:53 < isaacbw> not quite what I'm talking about
08:53 < ckknight> Nexxy: nah, it's the lack of rounded corners.
08:53 < isaacbw> ILL SHOW YOU
08:54 < isaacbw> I'LL SHOW YOU ALL
08:54 <@Nexxy> lol
08:54 < asdf12> my text editor is the REPL what you mean its hard to edit!
08:54 < isaacbw> lol
08:55 < asdf12> ckknight: nah its that i noticed the html is minified but theres a 1megaton bootstrap css file
08:55 < asdf12> so i thought it was funny
08:55 < ckknight> ha
08:56 < asdf12> but if jade automates that i see i see
08:57 < asdf12> also i don't read red dit
08:57 < asdf12> i heard there's naked women on that site, so i avoid it
08:57 < ckknight> asdf12: lol
08:58 < ckknight> only in the NSFW parts
08:58 < asdf12> no
08:58 < asdf12> dont tell me where to go look
08:58 < asdf12> i wont give in
08:59 < asdf12> besides, you don't mix news and naked women, what is this playboy
09:00 < ckknight> more like hustler
09:05 < cho> asdfasdf
09:06 < MDA> Hi
09:06 < asdf12> TheAceOfHearts: http://kwoter.aws.af.cm/q/PTljMhdAgM you should make your sites tag line "misquoting people since 2013"
09:06 < asdf12> haha
09:08 < ckknight> TheAceOfHearts: you should have a list of like the top 10 popular quotes of the day somewhere.
09:10 < asdf12> yea, make it more professional
09:10 < asdf12> so people will be like whoa. i guess luke skywalker did say that, its on a website
09:13 < spots> hi
09:13 < echo|> Hullo
09:13 < spots> can anyone tell me why this isn't working? http://pastebin.com/eNcMTs6e
09:15 < vahnpaper> route.get('/', function(req, res) {    res.writeHead(200);    res.end('hello index page ' + datetime);});
09:17 < spots> vahnpaper?
09:17 < vahnpaper> router module is unknown
09:17 < spots> var router   = require('router');
09:17 < spots> var route    = router();
09:18 < spots> 2nd and 3rd line
09:18 < spots> the server is running but the timeout won't update datetime
09:18 < vahnpaper> wait..
09:18 < vahnpaper> wait, ill try to run it
09:18 < spots> i should have said that before... :/
09:19 < TheAceOfHearts> ckknight: thanks for the tip, sorry for the slow reply
09:19 < TheAceOfHearts> I was fixing up some things
09:19 < TheAceOfHearts> I'm thinking of having most popular quotes too
09:19 < TheAceOfHearts> http://cl.ly/image/1Y213R3r0p1c I got G+, Twitter and FB to align just perfectly
09:19 < asdf12> TheAceOfHearts: thats a lot of if else statements in your code
09:20 < vahnpaper> (5:15:26 PM) spots: the server is running but the timeout won't update datetime <-- same here
09:20 < TheAceOfHearts> I know D:
09:20 < TheAceOfHearts> is there any better approach to it?
09:22 < asdf12> WELL
09:23 < asdf12> you could return early
09:24 < TheAceOfHearts> return early? I'm not sure I'm following you
09:24 < ckknight> if (stuff) { return; } doStuff();
09:27 < TheAceOfHearts> do you have any examples I could take a look at, by any chance? 
09:28 < isaacbw> heh
09:29 < asdf12> sometimes its also
09:29 < asdf12> how you control the flow
09:29 < asdf12> if you feeeeeeel me
09:30 < TheAceOfHearts> yeah, I do, but… that's pretty much been a big issue for me since I started playing around with express, I'm not sure how to organize my code… so I've been winging it
09:34 < asdf12> TheAceOfHearts: http://hastebin.com/dosihiqeso.sm
09:34 < asdf12> oops that if (result) should have else {}
09:34 < amurdaca> TheAceOfHearts: express --session --ejs myapp
09:35 < amurdaca> and you get directoy structure
09:35 < asdf12> but the top one is your original
09:35 < amurdaca> then cd myapp && npm install && node app
09:35 < TheAceOfHearts> amurdaca: I do that already :p
09:35 < amurdaca> oh so whats wrong?
09:35 < TheAceOfHearts> asdf12: I think I get your idea now
09:35 < asdf12> TheAceOfHearts: but anyway, it reads more clearer
09:36 < TheAceOfHearts> yeah, you're right
09:36 < asdf12> because the bottom one is WHAT you actually want instead of you trying to account for all possible situations
09:36 < TheAceOfHearts> yeah, that makes sense, I think I get you
09:36 < TheAceOfHearts> thanks
09:44 < asdf12> http://hastebin.com/bolupifixa.js TheAceOfHearts 
09:44 < asdf12> thats what i mean about returning early
09:45 < TheAceOfHearts> ahh
09:46 < TheAceOfHearts> oh, yes, this makes a lot more sense, thanks a lot
09:47 < TheAceOfHearts> I think I really get it
09:47 < TheAceOfHearts> thanks a lot
09:48 < hallas> anyone with experience using uglifyjs?
09:48 < asdf12> yea so you just have 1 render, and no if else if else statement which is like creating 10,000 different paths when you really have 2
09:48 < asdf12> it errors or it doesn't etc.
09:49 < TheAceOfHearts> yes, that makes sense, it's so obvious once you think about it
09:55 < CoverSlide> hallas: what is your question?
09:56 < hallas> CoverSlide: I need to know how to use the --define option when using the binary
10:27 < spots> is there still noone who can tell me why this won't work (value is not updated): http://hastebin.com/fitemebila.javascript
10:29 < SomeoneWeird> because you're overwriting it
10:29 < SomeoneWeird> datetime is already global, you don't need to pass it to the function
10:30 < spots> oh wrong version
10:30 < SomeoneWeird> lol
10:30 < SomeoneWeird> that'd help
10:31 < spots> http://hastebin.com/joroxiyahu.js
10:31 < spots> doesn't work either
10:31 < spots> datetime never changes
10:32 <@Nexxy> spots, that's because you only retrieve the date once
10:32 < spots> line 6
10:32 <@Nexxy> you just keep turning it into an ISOSTring
10:32 <@Nexxy> that's not getting a new date
10:32 < spots> oh, i have to create a new date each time
10:32 <@Nexxy> that's getting the ISOString of the same date over and over
10:33 < spots> d'oh, that's mean
10:33 <@Nexxy> datetime = (new Date()).toISOString()
10:33 <@Nexxy> will do just fine
10:33 <@Nexxy> and then you won't need to set var date
10:34 < spots> hmm doesn't work either
10:35 < spots> http://hastebin.com/dawebopufa.js
10:36 < spots> ok works, sources weren't updated
10:36 < spots> thanks
10:36 <@Nexxy> ;)
10:36 < spots> i was thinking theres something wrong with the scope or something
10:40 < spots> can i somehow make that setTime work in background?
10:40 <@Nexxy> it does
10:40 <@Nexxy> every 3 seconds
10:40 < spots> i inserted a long for loop, and the whole server is blocked until its finished
10:41 <@Nexxy> yeah you will have to do stuff like that in a separate process
10:44 < spots> hmm if i do that in background with a process, then i would define a callback function (which also blocks, but it just assings that value). if some http requests would block node, the the callback is also blocked and i cannot garantee that its updated every 3 seconds?
10:47 < stanonyime> Having problems using the node-validator from chriso with node 0.818
10:47 < stanonyime> Property 'match' of object [object Object] is not a function
11:05 < isaacbw> man, there's something uniquely satisfying in solving the same problem over and over again in new ways
11:07 < mpajor_op5> it always is ;)
11:08 < _ior> sounds like why i got out of programming as a career
11:08 < isaacbw> heh
11:08 < isaacbw> it's less fun if someone is telling you to redo it over and over again
11:09 < _ior> after the fiftieth "use java to make enterprise bubbly thing or perhaps to talk to some less-bubbly-but-mission-critical-fortran thing" request, i just couldn't take it anymore
11:10 <@Nexxy> _ior, what do you have against bubbles?
11:10 < _ior> i like bubbles!
11:10 < _ior> i just don't like enterprise java bubbles
11:11 < spots> http://www.youtube.com/watch?v=s7IYR_rELyE
11:12 < isaacbw> I have no idea what a bubble is
11:12 < isaacbw> what's a bubble :(
11:12 < isaacbw> bubbblless
11:14 < _ior> i think the worst enterprise java bubble task i ever received went something like: boss: "so, _ior, someone upstairs read the most recent issue of 'red herring' and they saw a two-paragraph blurb about 'portlets' and they decided that we need 'portlets' too. it's your job. you have one month, everyone else is going to be on holiday, and please deliver it when we return"
11:14 < _ior> it turned out that "portlets" were some whitepaper that had been 5 years in development by 'leading java architects at sun' and yet all it had was a whitepaper.
11:14 < _ior> so, yeah, guess how that one went
11:15 < isaacbw> god, that's the worst
11:15 < _ior> also, it sounded like something one might order at a steakhouse.
11:15 < isaacbw> non-technical managers should just say "make it work" and let you do your thing
11:16 < _ior> hah yeah
11:16 < spots> _ior: do you know the ibm buzzword bingo commercial?
11:16 < _ior> i think they were described in the white paper as "like applets, but for portals"
11:16 < isaacbw> hmm, do banks usually let you get into a safety deposit box without an id
11:16 < _ior> so i made a class factory and called it "done"
11:16 < isaacbw> that barely makes any sense _ior 
11:16 < isaacbw> lol
11:16 < _ior> spots, i'm familiar with buzzword bingo, but not the ibm commercial
11:17 < spots> http://www.youtube.com/watch?v=ZIxcxfL5jas
11:17 < _ior> isaacbw, tell me about it! that's when i got out of programming as a career XD
11:17 < foobar321> Can anyone explain difference between ToString vs ToDetailString  in v8?
11:20 < _ior> spots, sadly, the downside of getting out of programming as a career is that i now find myself often talking to people with whom the only way to communicate is to use such language :(
11:20 < _ior> so, i'm not sure if that was a net gain or not.
11:38 < amurdaca> hey guys
11:38 < amurdaca> what's the best way to use Layout and Block with express+ejs?
11:38 < amurdaca> i'm coming from Twig template engine 
11:39 < amurdaca> so i don't understan how to override things in my layout in ejs/express
11:39 < amurdaca> i found ejs-locale but isn't updated since 3 months :/
11:41 < sshaginyan> If I have 5 objects created from the same constructor and only want 3 of those objects to inherit a property using prototype, how would I go about doing this?
11:45 < squeakytoy|work> what module do you guys recommend to find files recursivly (based on filename)?
11:48 < ohcibi> hi, i installed grunt as a dependencie declared in package.json with npm install, now it resides in node_modules, however there is no binary 'grunt', how to run it?
11:48 < SomeoneWeird> npm install -g grunt
11:49 < ohcibi> SomeoneWeird: okay, but what if i just want to intall it as dependency in ./node_modules? doesnt it work?
11:51 < ohcibi> SomeoneWeird: i should add that i'm using grunt 0.4.0 isnt there no binary anymore?
11:53 < MCHammer> hi there
11:54 < sshaginyan> Sorry let me rephrase the question if I have 4 objects instantiated from the same constructor and I was two of these objects to share a property amongst each other. HOw would you do this?
11:55 < sshaginyan> So how would you do .prototype on only two of these objects?
11:57 < MI6> joyent/node: Ben Noordhuis v0.8 * 5fe0546 : doc: don't suggest to reuse net.Socket objects  Using Socket.prototype.co - http://git.io/6RdRdA
12:01 < MCHammer> i need to save 4.096×10¹³ values each of one byte into a file.
12:01 < MCHammer> what would be a good way to do that in node?
12:03 < ckknight> sshaginyan: you could make one inherit from another, or make them both inherit from a third which inherits from the original prototype.
12:05 < isaacbw> MCHammer, is that a joke?
12:06 < isaacbw> that's 10 terrabytes
12:06 < isaacbw> 40 terrabytes
12:07 < Kakera> given an uint containing an IP address, what's the simplest way to convert it to a string that I can use to connect to a socket?
12:07 < isaacbw> how will a uint contain an ip address
12:08 < MCHammer> yeah, it is a joke
12:08 < MCHammer> miscalculated sth. :F
12:08 < MCHammer> sorry
12:08 < listochkin> MCHammer: use streams
12:08 < isaacbw> nevermind, I'm retarded
12:08 < isaacbw> bitwise operations 
12:09 < Kakera> oh right
12:09 < Kakera> I could just apply 4 masks
12:31 < Kakera>  [].join.call(buf, '.');
12:31 < Kakera> применяет к 
12:31 < Kakera> oops
12:31 < Kakera>     var buf = new Buffer(4);
12:31 < Kakera>     buf.writeUInt32LE(number, 0);
12:31 < Kakera>     return [].join.call(buf, '.');
12:31 < Kakera> much better than masks :P
12:34 < isaacbw> wtf, I thought it was a saying
12:34 < isaacbw> there are actual fucking rocks in this bag of dried beans
12:34 < mpajor_op5> did you think the beans actually "rock"? ;-)
12:34 < isaacbw> lol
12:35 < isaacbw> wut
12:36 < isaacbw> man, that just ruined this awesome bowl of beans for me
12:36 < isaacbw> I can't finish this
12:36 < isaacbw> it's like getting a pit in an olive on a pizza
12:36 < isaacbw> damn
12:38 < mscdex> the real question: why are you eating pizza with olives on it?
12:40 < isaacbw> mmediterranean man
12:40 < isaacbw> mediterranean
12:40 < isaacbw> kalamta olives, feta
12:40 < isaacbw> other stuff
12:41 < isaacbw> I haven't had a good pizza in a while though
12:43 < isaacbw> I'm really fighting the urge to use promises in this library
12:46 < S7> Kakera: http://phpjs.org/functions/long2ip/
12:49 < Kakera> S7, I like my solution better
12:50 < isaacbw> what are you doing with an integer ip address anyway
12:50 < Kakera> isaacbw, that's how I receive it from the server
12:50 < Kakera> can't help it
12:50 < isaacbw> strange
12:51 < Kakera> how is it strange
12:51 < Kakera> it's the most efficient way to store an IP address
12:52 < isaacbw> that isn't usually a concern
12:52 < isaacbw> it's just a bit unorthodox
12:52 < amurdaca> i want to say that i love node!!!!!!!!!!!!!!!!!
12:52 < isaacbw> if you wait long enough, node might love you back
12:52 < amurdaca> sure!
12:52 < amurdaca> i can't wait to see a master v1 version in future
12:53 <@Nexxy> amurdaca, don't listen to isaacbw 
12:53 <@Nexxy> node loves you
12:53 < amurdaca> lol
12:53 < isaacbw> ;D
12:53 < amurdaca> i'm converting all my php project to node now lol
12:53 < isaacbw> php drools node roolz
12:53 < amurdaca> most are web design but i have some custom cms
12:53 < amurdaca> also i'm starting to use nosql (mongo) and leave mysql
12:54 < isaacbw> mysql is for dweebs
12:54 < SomeoneWeird> it has its uses
12:54 < SomeoneWeird> but not many
12:54 < _ior> postgres is superior
12:54 <@Nexxy> rofl
12:54 < amurdaca> even if i'm a newbe to javascript (i know C and php) everything seems so easy to understand
12:54 < Sly> Nexxy <3
12:55 <@Nexxy> Sly, <3
12:55 < Sly> How you doing?
12:55 < isaacbw> amurdaca, make sure to understand closures
12:55 < amurdaca> i'm gonna fully die into node apis while using express
12:55 <@Nexxy> fucking fabulous!
12:55 < amurdaca> i know closures from php5.4
12:55 < Sly> Awesome. :D
12:55 <@Nexxy> n u?
12:55 < isaacbw> oh
12:55 < amurdaca> but i don't fully understand how to combine like Async with Node
12:56 < Sly> I'm good. :D
12:56 < Sly> Off work today.
12:56 < isaacbw> amurdaca, don't make apis with express
12:56 <@Nexxy> \o/
12:56 < Sly> Was going to sleep in, but I fell asleep at like 8:30 last night. xD
12:56 < amurdaca> don't know where i don't have enough knoledge
12:56 < Sly> So I woke up at like.. 6:30
12:56 <@Nexxy> oh my
12:56 < isaacbw> promises!
12:56 < isaacbw> yay! promises for everyone
12:56 < isaacbw> a promise for you and you and you
12:56 < isaacbw> hold on to those until they get resolved
12:56 <@Nexxy> lol
12:56 < amurdaca> isaacs my project are in "production" so express helps me now
12:56 < isaacbw> they'll be important one day
12:56 < amurdaca> isaacs don't want to re-code everything only in node...for now
12:56 < isaacbw> wrong isaac
12:57 < amurdaca> yeah lol
12:57 <@Nexxy> so many isaacs
12:57 < isaacbw> isaacs is all the isaacs
12:57 < amurdaca> is someone so nice to explain me what async is for?
12:57 < amurdaca> and when to use it?
12:57 < _ior> to not lock the process, and always
12:57 < isaacbw> to avoid crazy callback pyramids
12:57 < _ior> oh, you mean the async package
12:58 < amurdaca> i mostly do web devlopment/apis if this helps
12:58 < isaacbw> you mean the async module, or asynchronous patterns?
12:58 < amurdaca> async.js
12:58 < isaacbw> it's to simplify callback patterns
12:58 < isaacbw> but be cool and use promises instead
12:58 < isaacbw> https://github.com/kriskowal/q
12:58 < isaacbw> soooo coool
12:58 < amurdaca> mmm but i mean, in which case should i use async/promise?
12:58 < isaacbw> we can hang out next to the fence and talk about how dumb everyone else is
12:59 < amurdaca> releated to web development/web apis
12:59 < isaacbw> when you're chaining a lot of callbacks
12:59 < amurdaca> oh
12:59 < amurdaca> becouse i found this http://justjs.com/posts/page-templates-with-ejs-finally-we-can-have-nice-things
12:59 < isaacbw> it just simplifies how you combine async operations
12:59 < amurdaca> and it uses async to do the setup in series
12:59 < amurdaca> don't understand much
12:59 < isaacbw> you could do it without async, it would just be a lot harder to read
13:00 < amurdaca> what is he doing here:
13:00 < amurdaca> async.series([setupDb, setupView, setupApp, listen], ready);
13:01 < amurdaca> it makes sure setupDb is called BEFORE setupView?
13:01 < isaacbw> yea
13:01 < isaacbw> it will call setupView once setupDb is done
13:01 < isaacbw> etc
13:01 < isaacbw> and when they're all done, it will call ready
13:01 < amurdaca> mmm if not in *node* they will be executed in "parallel"?
13:01 < isaacbw> just look here: https://github.com/caolan/async
13:01 < isaacbw> wait, what?
13:02 < amurdaca> i mean
13:02 < mda> i say what what
13:02 < amurdaca> not using async.series
13:02 < isaacbw> in 
13:02 < isaacbw> the butt
13:02 < mda> hahaha kudos
13:02 < isaacbw> amurdaca, that's right
13:02 < amurdaca> all that callbacks get executed in parralel by default in node?
13:02 < isaacbw> more or less
13:02 < isaacbw> effectively parallel, though node is single-threaded
13:02 < amurdaca> that's ok i know understand
13:02 < isaacbw> but they may end in a different order
13:03 < spion> the I/O is parallel, yep.
13:03 < amurdaca> yeah i studied thread in posix under linux in CS class :D
13:03 < isaacbw> async stuff is usually networking stuff, so you might want to do other work while waiting for a server response
13:04 < isaacbw> you usually do
13:04 < amurdaca> so i'll do a paraller async?
13:04 < amurdaca> *parallel
13:05 < isaacbw> what
13:05 < amurdaca> for doing stuff while wanting to do other stuff i use async.parallel right?
13:05 < isaacbw> just don't worry about the async module for now
13:06 < isaacbw> eventually you'll understand how it's helpful
13:06 < amurdaca> without waiting a callback to finish
13:06 < isaacbw> no
13:06 < isaacbw> async just makes things cleaner
13:06 < isaacbw> you use callbacks
13:06 < isaacbw> I need to go, someone else jump in
13:06 < amurdaca> thank you isaacbw
13:07 < isaacbw> amurdaca, just start using node
13:08 < isaacbw> it will all make sense
13:08 < isaacbw> and don't worry about the async module for now
13:08 < isaacbw> it's not necessary
13:08 < isaacbw> it's just a helpful utility
13:08 < isaacbw> you can do things in parallel without it
13:08 < isaacbw> I'll be on later
13:08 < isaacbw> o/
13:15 < mda> Trait
13:16 < mda> whups
13:23 < _ior> suddenly i want to listen to some george clinton
13:23 < _ior> i'm not entirely sure why
13:23 <@Nexxy> my bad
13:26 < mda> i
13:33 < t0th_->  hi 
13:33 < mda> hi
13:33 < t0th_->  i am creating a api, why you suggest node.js and not a php light framework ? 
13:34 < mda> i dont suggest anything
13:34 < mda> ^^
13:34 < mda> it's more what you'd prefer
13:46 < xk_id> My code is leaking memory. After a couple of hours, it fills up the entire memory and crashes. I've simplified my code here, would anybody be able to tell if this looks like it leaks? Thanks. https://gist.github.com/arisolt/4714520
13:46 < mda> LAL
13:53 -!- mode/#Node.js [+o bnoordhuis] by ChanServ
13:54 -!- mode/#Node.js [+qm *!*@#Node.js] by bnoordhuis
13:54 -!- mode/#Node.js [-qm *!*@#Node.js] by bnoordhuis
13:55 -!- mode/#Node.js [+q mda!*@*] by bnoordhuis
13:55 <@bnoordhuis> xk_id: have you checked with something like node-inspector or node-heapdump what objects are leaking?
13:56 < xk_id> No. I've only tried with nodetime, and there is a "buffer" object leaking, but it doesn't tell me which one. 
13:56 < wao> hello, what do u use instead of node-supervisor?
13:56 < xk_id> I'll look into your recommendations, hopefully they will be more specific?
13:56 < wao> or is the one of the best?
13:56 < t0th_->  i am creating a api, why you suggest node.js and not a php light framework ? 
13:57 <@bnoordhuis> xk_id: possibly. i'm not that familiar with nodetime
13:58 <@bnoordhuis> t0th_-: 'i am creating a api' is hopelessly vague
13:58 < sohcahtoa> 'a api'
13:58 < t0th_->  an api 
13:58 < SomeoneWeird> and not proper English either
13:58 < SomeoneWeird> :P
13:58 < t0th_->  oks, 
13:58 < t0th_->  thanks 
13:58 < SomeoneWeird> node is good for an api
13:59 < SomeoneWeird> evented, async
13:59 -!- mode/#Node.js [-o bnoordhuis] by bnoordhuis
14:01 < AntelopeSalad> is this a reasonable implementation of cluster to spawn a multi-core web server wrapper? it's only a few lines of code -- https://github.com/Skookum/base12/blob/master/lib/balance/index.js
14:01 < AntelopeSalad> i ask because it didn't really do anything for me in terms of the performance of the web server
14:13 < sorensen> AntelopeSalad: i would build something in there to rate limit the fork()'s
14:13 < sorensen> so the cluster doesnt fork forever when theres a crash
14:14 < AntelopeSalad> sorensen: i just ripped it and put it into an isolated express app , as is it it didn't change the reqs/s in the slightest bit but it pegged both of my cores instantly
14:16 < sorensen> right, but try putting an error in the child process that doesnt effect the master and it will crash/fork forever
14:16 < xk_id> in debugging mode, is there a way to see how much memory various objects are taking? I'm trying to identify a leak in my app.
14:16 < AntelopeSalad> isn't that the exact opposite of how it should work though, i mean if i have 2 or 4 cores... shouldn't i see at least close to but not quite linear improvement?
14:17 < AntelopeSalad> maybe like 75% or even 66% increase
14:17 < sorensen> we are talking about different things i think
14:17 < AntelopeSalad> yeah this was more of a side question
14:17 < sorensen> i usually use n-1 cores
14:18 < wao> 15:10 < Nathan_> Today, "JavaScript" is a trademark of Oracle Corporation.
14:18 < wao> wtf
14:18 < sorensen> theres a writeup out there somewhere about leaving one open for other operations as to not pay a context switching penalty
14:18 < bnoordhuis> xk_id: not atm
14:19 < AntelopeSalad> the load looked much better when i only used 1 worker on a dual core machine
14:19 < bnoordhuis> better built-in heap inspecting facilities is on my todo list
14:19 < AntelopeSalad> the 2nd core barely broke a sweat, but with 2 workers they were both insta'd to 100%
14:19 < xk_id> bnoordhuis: node-inspector is great, but it doesn't show much memory each object is taking. 
14:19 < xk_id> I'm now looking into your second recommendation.
14:21 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:21 < xk_id> Ohh, I cannot install it... I'm following the instructions and getting a "arg[0] directory does not contain a wscript file" on "node-waf configure"
14:21 < xk_id> :,
14:21 < xk_id> :<
14:23 < bnoordhuis> xk_id: why are you using node-waf?
14:23 < jesusabdullah> presumably this is a module that's still using node-waf?
14:23 < nathan7> wao: I'm fairly certain Mozilla owns it
14:23 < jesusabdullah> perhaps it never got updated
14:24 < bnoordhuis> jesusabdullah: i know for a fact that's not the case
14:24 < xk_id> bnoordhuis: it's part of the installation instructions: https://github.com/davepacheco/node-heap-dump#setup-creating-a-snapshot
14:24 < bnoordhuis> because i'm the guy that wrote it
14:24 < bnoordhuis> xk_id: ah, different heapdump, drop the dash
14:25 < bnoordhuis> i didn't know dave had written something similar. great minds
14:28 < xk_id> bnoordhuis: "gyp: binding.gyp not found (cwd: /root/nodecrawler) while trying to load binding.gyp" hmm..
14:29 < bnoordhuis> xk_id: how are you installing it? just `npm install heapdump` should do it
14:29 < bnoordhuis> though you arguably shouldn't install things as root
14:29 < xk_id> bnoordhuis: oh, okay. i thought building it was necessary too
14:29 < bnoordhuis> no, npm takes care of that
14:30 < xk_id> thanks.
14:40 < AntelopeSalad> sorensen: do you remember where you saw that article by any chance?
14:40 < sorensen> i'll take a look
14:44 < sorensen> AntelopeSalad: im afraid not
14:44 < sorensen> might google around for it though
14:45 < sorensen> theres a little bit about it here: https://engineering.gosquared.com/optimising-nginx-node-js-and-networking-for-heavy-workloads
14:45 < sorensen> but thats not the original article i read
14:45 < sorensen> theres a section in there about context siwthing
14:48 < xk_id> bnoordhuis: unfortunately it's beyond me to cruise through the heap dumps. butm thanks
14:48 < xk_id> *but,
14:49 < AntelopeSalad> sorensen: any idea why other people see 50-60% improvements when using 2 on a dual core machine?
14:49 < sorensen> no
14:49 < AntelopeSalad> example: http://stackoverflow.com/questions/10663809/how-do-i-use-node-js-clusters-with-my-simple-express-app
14:50 < sorensen> it gets pretty specific to what your app is doing
14:50 < AntelopeSalad> doing nearly the same test on my end results in no difference at all
14:51 < sorensen> yeah im really not sure, i generally see a big improvement running locally on osx
14:51 < AntelopeSalad> the cpus.length is showing up as 2 inside of a linux vm
14:52 < strk> ==2453== 55 bytes in 2 blocks are definitely lost in loss record 815 of 1,246
14:52 < xk_id> My code is leaking memory. After a couple of hours, it fills up the entire memory and crashes. I've simplified my code here, would anybody be able to tell if this looks like it leaks? Thanks. http://stackoverflow.com/questions/14710208/is-this-leaking-memory
14:52 < strk> ==2453==    by 0x5CDFF1: uv_fs_readlink (fs.c:624)
14:52 < sorensen> if you have 2 cpus you should probably only use 1 for the node app
14:52 < strk> node version v0.8.11 
14:52 < sorensen> leaving the other for the system processes
14:54 < AntelopeSalad> yep, i just wanted to see if i could see the difference based on his test on my end but i was unable to do so
14:54 < AntelopeSalad> in his tests he had 2 cores too
14:54 < strk> 2012.12.13, Version 0.8.16 (Stable), 1c9c6277d5cfcaaac8569c0c8f7daa64292048a9
14:54 < strk> * fs: fix WriteStream/ReadStream fd leaks (Ben Noordhuis)
15:01 < Jee5us_w> Hey. I have a question. Can you create a web client in node.js that can manipulate input fields and use js functions? Not creating a malicious soft but need to create bots for my chat that I need to benchmark.
15:02 < kkrgn`> Jee5us_w: you could use phantomjs/caspar to do this sort of thing, given your chat is in the browser
15:04 < Jee5us_w> ok...so it is.
15:04 < Jee5us_w> phantomjs... alrighty. I'll look into it.
15:04 < Jee5us_w> but is it able to init js functions and so on?
15:05 < krgn> Jee5us_w: it can do anything a user could on a site (uses headless webkit)
15:05 < Jee5us_w> ok..cool I'll look into some examples. Thanks krgn
15:07 < thl0_> what is a good code coverage lib?
15:09 < DarkArgon> expressjs.com and mongoosejs.com is down?
15:09 < DarkArgon> is it just me?
15:10 < wesbos> DarkArgon: just you
15:10 < DarkArgon> now they r also back up here
15:11 < wesbos> self healing websites
15:11 < wesbos> part of node 1.0
15:11 < DarkArgon> :D
15:11 < DarkArgon> also self developing?
15:11 < wesbos> i qiah
15:11 < wesbos> I wish
15:12 < DarkArgon> what's the best practice to catch 404s in express?
15:12 < Colin__> Anyone want to tackle an easy node.js project to make some easy $$? I have the specs written up already. Lemme know if this is an inappropriate request..
15:12 < wesbos> Colin__:  I might be available - wes@wesbos.com
15:13 <@konobi> Colin__: gun.io is prolly a better spot
15:14 < Colin__> Thanks konobi, will check it out.
15:14 < wesbos> DarkArgon: you last route should be the 404
15:14 < wesbos> https://github.com/robrighter/node-boilerplate/blob/master/templates/app/server.js#L22 and linke 78
15:14 < DarkArgon> so just a app.get('*'
15:14 < wesbos> app.get(
15:15 < wesbos> '/*'
15:15 < sorensen> why bother with the /
15:15 < wesbos> I think star would work just as well though
15:17 < DarkArgon> this way u won't get post 404s
15:19 < DarkArgon> app.all('*') seems to cover that
15:27 < Technodrome> hey guys 
15:27 < Technodrome> so are these language-to-javascript sorta like the new cool thing to make / do?
15:28 < DarkArgon> your talking about coffescript?
15:29 < DarkArgon> *coffeescript
15:29 < bradleymeck> Technodrome; for people who don't like the idea of JS possibly not being a toy language (see: internet denial), or people with legitimate reasons to constrain JS (see: typescript); yes.
15:30 < Technodrome> i was really talking about http://ympbyc.github.com/LittleSmallscript/
15:30 < Technodrome> and i must say, it is pretty cool :) 
15:30 < Technodrome> and the javascript is super human readable, not no ridiculous complex thing 
15:31 < sorensen> that looks painfull
15:31 < DarkArgon> for me the js is more readable than that
15:32 < Technodrome> sorensen:  if you love smalltalk then it's cool 
15:32  * Technodrome does love smalltalk 
15:32 < sorensen> i hope im not alone in thinking JS is an easy enough syntax it doesnt need abstracting
15:32 < Technodrome> i agree
15:32 < Technodrome> 100 percent
15:32 < Technodrome> but i still find it cool 
15:32 < sorensen> i do find them interesting
15:33 < sorensen> coffeescript for example is a very interesting project, but i would never use it
15:33 < Technodrome> coffee script is sorta a new language all together
15:33 < Technodrome> smalltalk has been around since like forever and is a very simple syntax
15:34 < andreligne> Hi! I'm wondering how I should use a database with node. I will have multiple controllers and some of them will need to make database queries. Should I just make a databaseController and then have multiple connections which each instance of this controller?
15:35 < sorensen> Technodrome: never used it :P
15:39 < DarkArgon> what db andreligne?
15:39 < andreligne> DarkArgon: mongodb
15:40 < DarkArgon> guess u are using the native driver?
15:40 < andreligne> Probably 
15:43 < DarkArgon> so what would be the alternative to a databaseController with multiple connections (so basically a connection pool?)?
15:45 < andreligne> DarkArgon: No idea. Feels like if I make one controller with a bunch of functions and a connection within each of these, that it's waste of memory making multiple connections with each include of this file in every other controller?
15:45 < andreligne> I'm not sure that javascript works that way, that's why I'm asking :))
15:47 < DarkArgon> ok gotcha. so each controller has its own process, or are we just talking about modules?
15:48 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:48 < Jee5us_w> Does anyone know if socket.io can and how communicate between servers. one server has like 1k clients and other recieves and debugs the info.
15:49 < andreligne> DarkArgon: Exactly!
15:49 < DarkArgon> eeh. ok, thats the question, module or process?
15:50 < Technodrome> sorensen:  never used which?
15:50 < andreligne> DarkArgon: using the require-thingy
15:52 < clone1018> So I have a framework which spits a page into 3 parts, the parts are eval()'d in order from top to bottom, I'm having a problem where the end is done rendering before the middle got results from an api call back, I don't mind "switching" to sync for this part, how would that happen?
15:57 < Fly-Man-> Goodmorning fellow Node.js people
15:57 < euoia> Good morning Fly-Man- 
15:57 < Fly-Man-> I have a strange question but I am sure there's somebody in here that can tell if Node.js is usable for this
15:58 < Fly-Man-> I am trying to create an asset server that can PUT/GET/POST assets from virtual worlds to both database and filesystem
15:58 < Fly-Man-> when an asset is PUT, it needs to write a record in a database and also save the asset to disk
15:59 < Fly-Man-> when the next time, it tries to PUT the same UUID, it should not create the same record but just acknowledge that the asset already exists
15:59 < Fly-Man-> Also, the current asset server is getting 2000 hits a second
15:59 < Fly-Man-> Is Node.js capable of doing about the same that my current asset server does with saving the assets in a database
16:00 < Fly-Man-> and still being fast
16:00 < ckknight> Fly-Man-: yes
16:01 < clone1018> Fly-Man-: Yeah but something like nginx would be faster at serving your static content
16:01 < Fly-Man-> clone1018: the problem with assets is that they tend to come more then once
16:01 < clone1018> Explain?
16:01 < AntelopeSalad> does anyone have a gist handy which sets up the lib "up" and express properly? the docs on the lib are kind of lacking
16:01 < Fly-Man-> With Opensim/AuroraSim ( virtual world software)
16:01 < clone1018> Ah
16:01 < Fly-Man-> we tend to use something called OAR files
16:02 < Fly-Man-> and those happen to have a lot of the same UUID's
16:02 < Fly-Man-> and I want to make sure I am not saving 200 tmes the same asset
16:02 < Fly-Man-> but just 1 reference that can be used, over and over again
16:03 < Fly-Man-> At this moment, we're pushing the complete asset ( mostly 1 Mb or more)  into a MySQL/MariaDB
16:03 < Fly-Man-> but the databases are at this moment, about 1 Tb
16:03 < Fly-Man-> running a query on it takes a longer tme
16:03 < clone1018> Ouch, don't store files in a DB :p
16:03 < Fly-Man-> and we know about 49% that's in it
16:03 < clone1018> Only reference them if you must
16:03 < Fly-Man-> is the same UUID
16:03 < Fly-Man-> only rferences for each region seperate
16:03 < ckknight> filesystems are way better at storing files
16:04 < Fly-Man-> Well, that's why someone had already wrote something in Ruby
16:04 < Fly-Man-> which took away about 19%
16:04 < Fly-Man-> but my Ruby skills are lacking
16:04 < Fly-Man-> and especiallu the Ruby on Rails combination I am not too happy about
16:04 < Fly-Man-> Then someone told me about Node.js
16:05 < Fly-Man-> and that it has perfect things like its own system for creating seperate workers under 1 port
16:05 < Fly-Man-> And I found an Oreilly book yesterday that showed a simple IRC server and HTTP server that can handle a lot of traffic
16:06 < ckknight> Fly-Man-: node.js is very good at handling a lot of IO
16:06 < Fly-Man-> ckknight: That's a + there :D
16:06 < ckknight> cpu-centric tasks it's less great at
16:07 < ckknight> you'd want to relegate that to workers or C code
16:07 < Fly-Man-> Well, the machine that runs the asset server now is a 6 core machine
16:07 < ckknight> or to other apps
16:07 < Fly-Man-> and the asset server only uses 2 cores at most
16:07 < ckknight> okay
16:07 < shapeshed> Fly-Man-: can you not push to a CDN for the assets?
16:07 < ckknight> you want it to be more parallel, right?
16:08 < Fly-Man-> Well, mu main reason is that I want all those assets out of the DB and onto the filesystem
16:08 < Fly-Man-> so I can make sure I don't get 20.891.111 times the same asset (wooden block)  in the system
16:08 < ckknight> right
16:09 < Fly-Man-> and I hope to find that Node.js is able to create more subtasks when it gets heavy
16:09 < Fly-Man-> so the asset server doesn't choke on 20 people tring to load the same OAR file
16:09 < Fly-Man-> with the same assets in it
16:09 < ckknight> hehe, a single instance of a node app could handle 1000, easy
16:09 < ckknight> assuming you're not doing much actual CPU load
16:10 < clone1018> Anyone know how to throw an eval or a vm.runInContext into a sync or give it a callback?
16:10 < Fly-Man-> Well, the grid server is a quite simple 
16:10 < Fly-Man-> it uses it's connections to handle the region server
16:10 < ckknight> here's an idea: store the file as its MD5 or SHA code or something, that way you don't get dupes
16:10 < Fly-Man-> sends off the informatio about them moving around
16:10 < Fly-Man-> All assets are referenced with an unique UUID
16:10 < ckknight> clone1018: into async, you mean?
16:11 < clone1018> No.
16:11 < ckknight> clone1018: vm.runInContext is sync by default
16:11 < Fly-Man-> so when 2 OAR files have the same UUID, they are identical
16:11 < ckknight> Fly-Man-: alright.
16:11 < clone1018> ckknight: Yes, but the code inside isn't.
16:11 < clone1018> Actually, scratch that
16:11 < clone1018> That might be true for vm.* but I forgot we can't use those functions, eval() is needed
16:12 < ckknight> clone1018: oh, what I do is wrap the text with a function () { }, then get the result of that, and call the function
16:12 < ckknight> wait, then it won't be done inside the context
16:12 < ckknight> that's a toughie.
16:12 < ckknight> and use Function()(), not eval()
16:12 < ckknight> it's cleaner
16:13 < Fly-Man-> ckknight: A good example from SRAS, the product someone wrote in Ruby at this moment
16:13 < Fly-Man-> https://github.com/fly-man-/asras/blob/master/lib/sras.rb
16:13 < clone1018> ckknight: function()()?
16:13 < ckknight> clone1018: capital F
16:13 < clone1018> var adder = new Function("a", "b", "return a + b");
16:13 < clone1018> Oh I see
16:14 < ckknight> Fly-Man-: this'd be very easy to do in node
16:14 < Fly-Man-> ckknight: That's the words I am looking for
16:15 < ckknight> Fly-Man-: if you were to store the files by their UUID, then you'd be able to eliminate a lot of DB strain, especially on access you could probably eliminate it entirely.
16:15 < Fly-Man-> The idea that the team has
16:15 < Fly-Man-> * save asset as <UUID>.asset
16:15 < ckknight> because then you could just serve from /somedir/assets/uuidfirsthalf/uuidsecondhalf.blah
16:15 < Fly-Man-> * reference the asset in the database
16:16 < Fly-Man-> * when UUID already exists, just send back the details
16:16 < Fly-Man-> or when importing the same UUID, just tell we already have it
16:16 < clone1018> ckknight: Function makes it run inside a new context, we need it in the global context
16:16 < ckknight> split it up however you want, it'd be based on your filesystem. ext2/3 break down after about 64k files/dirs in a single directory.
16:16 < Fly-Man-> Ubuntu 12.10 x64
16:16 < ckknight> clone1018: it runs inside the global context, not the current context (unlike eval)
16:16 < ckknight> Fly-Man-: is that ext3 still?
16:17 < clone1018> ckknight: Right, so it doesn't have access to essentials like require()
16:17 < ckknight> clone1018: yes it does.
16:17 < clone1018> No, it doesn't :p
16:17 < ckknight> unless you run it with vm.runInContext
16:17 < aib> how do I read an HTTP request's form data from the (req,resp) function passed to createServer?
16:17 < clone1018> I justed tested it
16:17 < ckknight> clone1018: well you're testing it wrong somehow.
16:17 < ckknight> oh
16:17 < ckknight> require isn't a global
16:17 < ckknight> it's a node thing that's added per-file
16:18 < ckknight> you can pass it in with Function("require", "blah")(require)
16:18 < Fly-Man-> ckknight: It's installed as ext3
16:18 < clone1018> So then I also have to pass everything else node has set globally?
16:18 < clone1018> err
16:18 < clone1018> whatever, not globally
16:18 < clone1018> evla is working great, however this isn't a fix to the sync issues
16:18 < ckknight> Fly-Man-: yeah, so based on the size of your UUID, I'd split it up every 4-8 chars or so, based on how distributed it is.
16:19 < Fly-Man-> the UUID's are 36 chars
16:19 < ckknight> clone1018: you mean async
16:19 < Fly-Man-> with 4 times a - in between
16:19 < clone1018> ckknight: Yes
16:20 < ckknight> clone1018: well, if you use Function, then you can pass in your own callback immediately. If you want to retain eval, which I don't recommend, you can wrap the inside in a function(callback) { }, then invoke that
16:21 < ckknight> clone1018: or perhaps even better: reevaluate why you're trying to eval code in the first place ;-)
16:21 < ckknight> Fly-Man-: I'd probably simply split it up by the -
16:22 < Fly-Man-> ckknight: So, this is a random UUID we use
16:22 < Fly-Man-> f5731d28-b5d4-4bcf-99c7-651344a6ed32
16:22 < ckknight> alright
16:22 < aib> <aib> how do I read an HTTP request's form data from the (req,resp) function passed to createServer?
16:23 < Fly-Man-> so it would be f5731d28 / b5d4 / 4bcf / 99c7 / 651344a6ed32 
16:23 < ckknight> Fly-Man-: sure
16:23 < clone1018> ckknight: Haha, I love when people use that argument!
16:23 < Fly-Man-> ckknight: And now comes the main part
16:23 < Fly-Man-> Which modules would I be using for this script
16:24 < ckknight> Fly-Man-: fs and http, minimally
16:24 < Fly-Man-> So far, I came up with the cluster, http, fs
16:24 < Technodrome> why does javascript hard to read for some people 
16:25 < clone1018> ckknight: There are __many__ uses for evaling code, http://aspen.io/simplates/ (not just evaling though, vm.* works and Function too
16:25 < euoia> Technodrome: why does English hard to write for some people
16:26 < ckknight> clone1018: I was just pointing it out. A lot of people use it improperly. Wasn't saying you were.
16:26 < clone1018> Ah. Alright then.
16:26 < Fly-Man-> But I see cluster is still experimental
16:26 < guor> there is no reliable tooling for javascript, so it's no surprise it's also hard for human
16:26 < Technodrome> euoia: its actually very easy :) 
16:26 < Fly-Man-> Meaning that it's better to not use it ?
16:27 < clone1018> NodeJS is still experimental in its core, I like to argue
16:27 < clone1018> It's a fun thing to work with but it doesn't have 10+ years behind it :P
16:27 < clone1018> Then again all you're doing is virtual worlds so why not
16:27 < ckknight> Fly-Man-: cluster works fine (the one that's part of node now)
16:28 < Fly-Man-> clone1018: *laughs*
16:28 < Fly-Man-> clone1018: Let's say I do more then just virtual worlds ;)
16:28 < clone1018> Regardless
16:28 < Fly-Man-> But rather new to NodeJS
16:28 < Fly-Man-> Heard really good stories on NodeJS
16:28 < Fly-Man-> And seen the movies from NodeConf
16:32 < Fly-Man-> ckknight: But as I understood correctly, it's def. an idea to create something like that
16:32 < Fly-Man-> and it wouldn't be too heavy on the machine 
16:32 < ckknight> oh no, certainly not.
16:32 < Fly-Man-> since it can use all the cores of the machine
16:32 < ckknight> just use the async methods and you'll be fine.
16:33 < ckknight> sure, just run N node processes where N is the number of cores + 1 or 2
16:33 < ckknight> ish
16:33 < ckknight> eh, do some benchmarks and see what runs best
16:33 < Fly-Man-> Well, the current asset server is 1 worker
16:33 < ckknight> you'll probably find out you only need to run it on one core or something ridiculous
16:33 < Fly-Man-> so anything with current + 1 should be good :P
16:35 < Fly-Man-> ckknight: Thank you for the excellent explanation :)
16:36  * Fly-Man- is gonna have some dinner and start crafting
16:36 < clone1018> Fly-Man-: Cluster is stable compared to http://nodejs.org/api/crypto.html
16:37 < Fly-Man-> clone1018: Thank you, that explains a lot :)
16:37 < t0th_->  hi 
16:40 < AAA_awright> What git repo is socket.io-parser ?
16:42 < AAA_awright> Who do I poke about socket.io
16:43 < mashumafi> hey, i downloaded nodejs bin for my flashdrive, is there a npm bin that i can put on my flashdrive too?
16:43 < mashumafi> for windows*
16:45 < strk> fs.c is still leaky, according to valgrind
16:45 < strk> ==10214==    by 0x5CEB51: uv_fs_readlink (fs.c:624)
16:46 < strk> the line is:
16:46 < strk>       /* Cannot conceivably fail since it shrinks the buffer. */
16:46 < strk>       buf = realloc(buf, size + 1);
16:47 < strk> sounds like a valgrind bug ?
16:49 < t0th_->  hi]] 
16:52 < strk> ==10214==    by 0x5CEB51: uv_fs_readlink (fs.c:624)
16:52 < strk> ==10214==    by 0x585884: node::ReadLink(v8::Arguments const&) (in /usr/local/bin/node)
16:52 < strk> where could node::ReadLink be ?
16:53 < strk> I can't find it in node.js sourcecode
16:53 < strk> does that come from a module ?
16:57 < CoverSlide> strk: bro, do you even grep?
16:57 < CoverSlide> src/node_file.cc:466:static Handle<Value> ReadLink(const Arguments& args) {
16:58 < strk> sorry, found (too late)
16:58 < strk> I'm too tired by a day long debugging session
17:00 < t0th_->  hi 
17:07 < Kakera> how would you store a collection of IP addresses and ports?
17:07 < Kakera> an array of objects, an array of arrays, or something else?
17:08 < Kakera> *a collection of IP address + port pairs
17:10 < isaacbw> it depends entirely on how it will be used
17:10 < Kakera> I will pick a random pair
17:11 < isaacbw> then what do you think you should do
17:11 < Kakera> I'm thinking of doing it like this [ {ip: '1.1.1.1', port: 2345}, {ip: '2.2.2.2', port: 2345} ]
17:12 < isaacbw> looks good to me
17:12 < isaacbw> I would say host instead of ip though
17:12 < isaacbw> unless it really can only be ip addresses
17:13 < isaacbw> you could also just combine them and have ['1.1.1.1:2345', '2.2.2.2:2345']
17:13 < Kakera> only ip addresses
17:13 < void> I am new to node, I want to see coverage of package which uses qunit. any recommendations on how should I do that/which package to use?
17:13 < Kakera> if I combine them then I'll need to split by ':' and access with [0] and [1] which I think is ugly
17:15  * sohcahtoa looks around
17:15 < sohcahtoa> any node-canvas people around? I have a question with timeouts associated with image loading ... like where can you change this if applicable.
17:16 < aib> anyone know how to call q's Q() function given var Q = require('q'); in node?
17:17 <@ryah> 1010 people on the channel. dang.
17:17 < Kakera> omg ryan is here
17:18 < isaacbw> aib, just do Q()
17:19 < aib> isaacbw: object is not a function at Q(123); hmm, I guess I could do Q.when(123).
17:19 < isaacbw> huh
17:19 < isaacbw> okay
17:24 < Aikar> thats not a real ryan
17:24 < Aikar> its his ghost
17:24 <@ryah> Oo
17:24 < Aikar> hi :P
17:24 < Octagonking> oo
17:24 < Aikar> I feel like a stranger in here now. Been gone from the node community so long :(
17:24 < Aikar> its growing so fast
17:25 <@ryah> me too :>
17:25 < Aikar> I got sucked into Java development in Minecraft....
17:25 < yati> Hi. I'm trying to install Testacular, but am not able to do so as it is trying to install in /usr/local/lib/node_modules. Doesn't npm install into ./node_modules or the first one in the current directory's ancestry? I have a ./node_modules and would like testacular to be installed there.
17:25 < Octagonking> Octagon,JS
17:26 < Aikar> Got so much work to do there dont see me coming back full speed to node any time soon :( but I do have some ideas for our server I want to do in node but :shrug: dunno I may end up using java for it too
17:27 < bradleymeck> Aikar: sid enote: voxel.js?
17:27 < t0th_->  any use limestone? 
17:28 < daekano> What an unfortunate name for a testing suite
17:28 < Aikar> bradleymeck: I just saw that the other day, very cool
17:28 < gkatsev> yati: global modules go there, I think
17:29 < yati> gkatsev, A module can decide if it wants to install globally?
17:29 < gkatsev> um... I dont think so. But maybe a preinstall script is doing some stuff?
17:31 < yati> gkatsev, where do I find that preinstall script? The error happens after npm downloads the tarball and tries to mkdir in that location. But I swear I have installed other stuff like volo relying on npm installing it in my local node_modules :|
17:33 < yati> gkatsev, I'm sorry, I was pasting the command and did not notice the -g option :) My bad.
17:33 < gkatsev> also, testacular, should be installed with -g as well
17:33 < gkatsev> ok :)
17:33 < gkatsev> yati: you should just chown and chmod that directory
17:33 < gkatsev> or you could do sudo npm install
17:34 < isaacbw> woo, my 1080p monitor arrived
17:34 < isaacbw> now I just have to plug my desktop in
17:35 < yati> naw. I do a lot of Python and the idea of a local node_modules is similar to the wonder virtual environments in Python. I like keeping project deps at one place on a per project basis :)
17:35 < yati> *wonderful
17:35 < owen1> is it better to use callbacks over event emitters? is there a guideline?
17:35 < gkatsev> install node-virtualenv?
17:35 < gkatsev> owen1: isn't it the same thing?
17:36 < isaacbw> owen1, callbacks only have one 'subscriber'
17:36 < isaacbw> and should only be fired once
17:36 < isaacbw> events are for events, callbacks are for work being done
17:37 < yati> gkatsev, you mean nodeenv?  I did not know that existed :) Thanks
17:37 < owen1> got it. so if it's one time it should be callback, if it's multiple, it might better be event
17:37 < isaacbw> also, if you want multiple listeners, it should be an event
17:37 < DarkArgon> might be a very stupid question, but why does module.exports = blah; works and just exports = blah; does not?
17:37 < isaacbw> they're just different patterns
17:37 < isaacbw> if in doubt, ask here 
17:37 < gkatsev> yati: idk how good it is, but I noticed it existed. Also, you can still install different versions of each package
17:38 < isaacbw> some events are only fired once, like 'end'
17:38 < isaacbw> you use callbacks as a way of asking for asynchronous work to be done
17:39 < owen1> any good guide for emitting events? http://nodejs.org/api/events.html this is not a great guide. i am confused. i need a little code that shows how to emit and listen.
17:39 < owen1> i am sure 5 lines can cover that.
17:39 < isaacbw> it's really really basic
17:40 < isaacbw> the API doc describes all you need to know
17:40 < gkatsev> emitter.on('foo', function(){ console.log(arguments); }); emitter.emit('foo', 1, 2, 3, 4);
17:40 < gkatsev> done.
17:44 < DarkArgon> emitter.on('foo', function(arguments){ console.log(arguments); }); 
17:45 < gkatsev> you shouldn't be naming things 'arguments'
17:45 < owen1> gkatsev: var emitter = require('events').EventEmitter;  didn't work
17:45 < isaacbw> yea don't do that
17:45 < isaacbw> arguments has special meaning
17:45 < isaacbw> owen1, you should learn some javascript
17:45 < isaacbw> var emitter = new require('events').EventEmitter;
17:46 < isaacbw> EventEmitter()
17:46 < isaacbw> usually you will have EventEmitter in the prototype though
17:47 < owen1> isaacbw: var emitter = new require('events').EventEmitter();  also not working - 
17:47 < daekano> Go buy a book owen1
17:47 < daekano> read it
17:47 < daekano> :P
17:47 < owen1> daekano: ??
17:48 < owen1> what we need is a 3 lines of code here: http://nodejs.org/api/events.html
17:48 < isaacbw> huh
17:48 < owen1> how to create event emitter. i still don't know even with your awesome help
17:48 < owen1> var emitter = new require('events').EventEmitter(); emitter.on('foo', function(){ console.log(arguments); }); emitter.emit('foo', 1, 2, 3, 4); 
17:48 < owen1> not working - TypeError: Cannot call method 'on' of undefined
17:49 < isaacbw> >> var EventEmitter = require('events').EventEmitter; var emitter = new EventEmitter();
17:49 < purr> isaacbw: ReferenceError: require is not defined
17:49 < isaacbw> that's what it would be
17:49 < gkatsev> owen1: var EventEmitter = require('events').EventEmitter; var emitter = new EventEmitter(); emitter.on('foo', console.log.bind(console)); emitter.emit('foo', 1, 2, 3);
17:51 < clone1018> Is there a way to "store" the context of a vm.runInContext so the data set and generated it remains the same (until the process ends of course)
17:51 < owen1> gkatsev: fantastic! and i was suppuse to figure this out from http://nodejs.org/api/events.html
17:51 < owen1> ?
17:52 < gkatsev> yes. it tells you how to access the class.
17:52 < gkatsev> you then apply some JS knowledge.
17:53 < owen1> gkatsev: can different object, let's say user object, listen to foo event?
17:53 < isaacbw> objects don't listen to events
17:53 < owen1> gkatsev: since in your example the emitter is also the listener.
17:53 < isaacbw> https://developer.mozilla.org/en-US/docs/JavaScript/Guide
17:53 < isaacbw> no it isn't
17:55 < gkatsev> owen1: the listener is the console.log function
17:56 < owen1> gkatsev: oh
18:11 < clone1018> Can you store the context of a vm.runInContext?
18:15 < bradleymeck> clone1018: vm.createContext?
18:15 < asdf12> oh
18:15 < asdf12> github is down
18:15 < clone1018> Using what as the parameter for making the context? bradleymeck?
18:16 < isaacbw> gah
18:16 < isaacbw> I can't function without github
18:16 < s5fs> no!
18:16 < bradleymeck> clone1018: what to bootstrap as globals: http://nodejs.org/api/vm.html#vm_vm_createcontext_initsandbox
18:16 < DarkArgon> panic!
18:16 < asdf12> its status page says it up heh
18:16  * s5fs runs in circles
18:16 < pachet> its okay
18:17 < pachet> i brought koolaid
18:17 < pachet> "koolaid"
18:17 < pachet> time to commit to the big repo in the sky
18:17 < s5fs> well crap, no github. hm..  so how's everyone doing today?
18:17 < bradleymeck> clone1018: just do not expect the vm module to completely secure you, it is a sandbox not a jail
18:17 < clone1018> bradleymeck: Yeah, but I want what's defined in the first runInContext to decide the globals for the context?
18:18 < clone1018> I'm not using it as a jail
18:18 < clone1018> I'm using it as an context aware eval
18:18 < bradleymeck> if it is blank (no properties), it just creates a new one with the builtins for ecmascript
18:20 < clone1018> Maybe I should more explain my problem
18:21 < clone1018> This framework's pages work like a CV (controller view), you have 3 sections of a page, top is ran once, when the page is first loaded, it's for use with defining globals and requiring libraries and what not, middle is ran every time, bottom is what we render
18:21 < clone1018> I'm currently trying to use vm.runInContext to keep all of the code within it's own context and to not bleed in and out, but I'm having a hard time "caching" the code ran in the first part of the page
18:22 < CoverSlide> yay github is down again
18:23 < s5fs> wait it's back!
18:23 < isaacbw> woo
18:24 < bradleymeck> clone1018: soo use vm.createScript for w/e the top is, run it. You can reuse w/e context there in the middle. If you need to cache the results of top, be aware they will not be deep copied in runs so they can cause oddities if shared between different pages.
18:25 < clone1018> It doesn't need to be shared between pages
18:27 < bradleymeck> var top = vm.createScript(topSrc, 'top'), middle = vm.createScript(midSrc, 'middle'), ctx = vm.createContext(); top.runInContext(ctx); middle.runInContext(ctx); middle.runInContext(ctx)
18:27  * bradleymeck just noticed that method is missing in official docs...
18:28 < bradleymeck> but its there
18:28 < CoverSlide> http://nodejs.org/api/vm.html#vm_vm_createscript_code_filename
18:29 < bradleymeck> CoverSlide: script.runInContext(...)
18:29 < CoverSlide> oh
18:30 < nb-ben> which mongodb driver would you guys recommend using
18:31 < jaha> Need some advice on this workflow, I have a node instance running on Nodejitsu and among other things it is serving up multiple apps/games to clients that are requesting them, I want to manage the apps/games outside the source for the server and possibly do a continous deployment where when i push to master say on Bitbucket it will update the served files on the server or perhaps on S3. Any suggestions on hwo to set this up?
18:33 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:35 < isaacbw> nb-ben, it depends on if you want models or not
18:36 < isaacbw> your two choices are basically mongoose or mongodb
18:36 < asdf12> jaha: you can setup a service post hook
18:37 < jd823592> Hello, is it possible to pass context through require? to for example share one connection to db across multiple files?
18:37 < isaacbw> you can pass whatever you want through require
18:37 < bradleymeck> jd823592: use a fn and pass as arguments
18:38 < jaha> asdf12: any idea how to do that without say using an ec2 instance? is there a direct way to s3?
18:38 < jd823592> isaacbw: like require("something", [ "this is", "context", "maybe" ])
18:38 < jd823592> isaacbw: ?
18:39 < isaacbw> no
18:39 < clone1018> bradleymeck: Because of the way it's cached, it now loads on first page load but no others, https://github.com/zetaweb/aspen.js/blob/add_renders/aspen/aspen.js#L33 there's the code
18:39 < isaacbw> require is a one way deal
18:39 < jd823592> isaacbw: so i cant then
18:39 < isaacbw> not like that
18:40 < isaacbw> but you can share the connection between files
18:40 < asdf12> jaha: https://confluence.atlassian.com/display/BITBUCKET/POST+Service+Management
18:41 < jd823592> isaacbw: in what way? does the variable get visible to the required code? or do you suggest that most connections are singletons in their implementations so that i can use them from different modules at once seemlessly?
18:42 < isaacbw> 24 in 1080p
18:42 < isaacbw> I wonder how many lines I can show in emacs
18:42 < bradleymeck> clone1018: this iife https://github.com/zetaweb/aspen.js/blob/add_renders/aspen/aspen.js#L41 is never told to do anything except to render the middle once, so it does it called on every request? (check using the console etc)
18:42 < isaacbw> jd823592, I'm sorry. I didn't sleep last night so I don't think I can explain it in an intelligable way
18:42 < isaacbw> someone else explain
18:43 < isaacbw> intelligible
18:43 < isaacbw> I promise it's really simple though
18:43 < isaacbw> oh wait yea
18:43 < isaacbw> I meant most connections be singletons
18:43 < isaacbw> or you could hav like
18:43 < isaacbw> a 'sharing' module
18:43 < clone1018> bradleymeck: the middle and bottom are rendered and evaled on every request
18:43 < isaacbw> which acts as a sort of cross-file global
18:43 < isaacbw> that's dirty though
18:43 < isaacbw> so dirty
18:44 < harbhub> access-control-allow-origin
18:44 < harbhub> i'm trying to load to memory an audio file from a website
18:44 < harbhub> so that i can play it using web audio api
18:44 < isaacbw> though honestly you should try to encapsulate your modules so you aren't sharing connections between them
18:44 < harbhub> but i get that error
18:44 < harbhub> i'm using JSBIN
18:44 < harbhub> any help?
18:44 < isaacbw> choo choo
18:44 < isaacbw> train
18:44 < jd823592> isaacbw: thanks
18:45 < bradleymeck> clone1018: im not sure I understand, cache is some global that should have it set I presume? and when you run top, it never gets set to anything in that code so I presumed somewhere it gets set outside of this code
18:45 < isaacbw> there's a competition to do something clever with nyc's payphone infrastructure
18:45 < asdf12> ?
18:45 < asdf12> link
18:45 < isaacbw> I think it should be a matrix you can plug yourself into
18:45 < isaacbw> I dunno, google it
18:45 < isaacbw> and like
18:46 < isaacbw> future
18:46 < clone1018> bradleymeck: Cache is just a var name to make sure the top is ran once
18:46 < isaacbw> memcached 4 lyfe
18:46 < isaacbw> memcached is the shit
18:46 < isaacbw> wo woo
18:47 < isaacbw> who gots da eggs i gots da eggs
18:47 < isaacbw> eggs out a chicken butt
18:48 < isaacbw> have any of you used node-jsamine
18:48 < isaacbw> jasmine-node
18:49 < isaacbw> I like jasmine
18:49 < isaacbw> and I like node
18:49 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:49 < bradleymeck> isaacbw: mobile tether points for ppl who have a phone that ran out of batteries/need inet (use credit cards) + google maps / cab calling
18:49 < isaacbw> cab calling is a pretty awesome idea
18:49 < asdf12> isaacbw: my proposal will be a bill & ted style pay phone
18:49 < asdf12> you travel through time
18:49 < isaacbw> I think it would be cool if you could buy a 'nyc phone' which is like a cellphone but only works in nyc
18:49 < isaacbw> but is super cheap
18:50 < asdf12> oh SHEET hurricane sandy, beep beep boop , you travel out of that there
18:50 < bradleymeck> clone1018: so top only ever gets run once, and middle only ever gets called once in the current code? im not sure i understand after reading it
18:50 < isaacbw> the worst part of sandy was not having cell access
18:50 < isaacbw> I felt
18:50 < isaacbw> lost
18:50 < isaacbw> HOW CAN I FIND MY WAY HOME
18:50 < isaacbw> and also
18:50 < isaacbw> sleep is good for human people
18:58 < joeferner> Can someone answer a question about the new stream API? If I pipe a readable file stream into lets say a CSV parser and then pipe that into a data processor. How should the CSV parser and data processor communicate?
18:58 < joeferner> I would like the data processor to drive when data is pulled from the file.
19:01 < asdf12> isaacbw: i dont think, it seems like a fun idea, but they expect you to build a working demo
19:03 < asdf12> i dont know* i mean, and it takes an quite a bit of time too to do the research just to make mock ups and conceptualize stuff
19:03 < nathan7> joeferner: a CSV parser would be a transformation duplex stream
19:04 < nathan7> joeferner: the data processor will .read() from the CSV parser which .read()s from the file
19:04 < nathan7> joeferner: Everything works like magic
19:04 < joeferner> nathan7: but would the CSV parser return a parsed line (JSON) instead of a buffer?
19:05 < nathan7> joeferner: AFAIK Raynos recently made object streams work with streams2
19:06 < isaacbw> asdf12, no they dont
19:06 < joeferner> nathan7: cool, I'll take a look
19:06 < asdf12> isaacbw: well if you are chosen as a semi finalist you have to present a demo
19:07 < asdf12> but even just submitting a proposal you need to make a mock up, and optional video etc.
19:07 < Raynos> Streams always worked with strings
19:07 < sohcahtoa> fuuuu
19:08 < sohcahtoa> this is not something I am use to, a script not running right then running it again and it does work. am I on windows now?
19:09 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
19:09 < asdf12> so you did the 'try turning it off and on again' trick, nice
19:09 < sohcahtoa> I did the pressing up arrow and running the script again
19:10 < airtanah> i watched a talk about using SPDY as an internal RPC mechanism... but node has no SPDY client 
19:11 < database34523> does anyone know how to get around the Error: spawn EMFILE error?
19:11 < database34523> my ulimit -n is set to around 65K
19:12 < asdf12> isaacs: plus if you don't work on a demo during the submission process.... and you wait till you hear if you're a finalist then to do the demo, you have like 2 weeks max 
19:12 < asdf12> though i suppose its not a big deal if you were a team rather than individual
19:13 < airtanah> i looked at the SPDY source, anyone want to try wrapping the cpp lib with me?
19:14 < geNAZt> why cpp wrap ?
19:14 < jaha> asdf12: any idea on how to structure the POST hook to S3? im having a hard time following the aws docs, just thought id ask to see if you happened to know
19:14 < asdf12> jaha: why s3?
19:15 < jaha> asdf12: i want bitbucket to post hook send the updated files to S3 for static serving
19:16 < asdf12> you want to static serve your code files?
19:16 < nb-ben> any mongodb users who could help me with the library?
19:16 < diogogmt> anybody know what's up with the Step lib? There are several pending pull requests and the lib hasn't been updated in years
19:16 < diogogmt> nb-ben: are you using the native mongodb driver?
19:16 < nb-ben> yes
19:16 < asdf12> diogogmt: use async instead
19:17 < nb-ben> looks like collection.find( .. ) just returns the results?
19:17 < nb-ben> it has no callback?
19:17 < jaha> asdf12: yes, I am creating multiple "html5" games/aps that will be hosted and served on s3
19:18 < nb-ben> diogogmt, http://mongodb.github.com/node-mongodb-native/markdown-docs/queries.html does not specify a callback, they also expressed something that looks like this: "collection.find( .. ).toArray( function ( err, results )  {} )"
19:18 < jaha> asdf12: i was hoping to have the workflow as , PUSH to master on bitbucket, POST hook to S3
19:18 < asdf12> jaha: well whatever you're trying to do, you set up the service hook, it makes a http post req to a server (you set this up) and you basically everytime it gets one of these post req, it pulls the files from your repo, then updates s3
19:19 < jaha> asdf12: yea i was trying to bypass the server part and POST directly to S3 (apparently its possible)
19:19 < nb-ben> or does it issue the query once I call toArray ?
19:20 < asdf12> jaha: i dont see how, since it doesn't post any of the files
19:21 < asdf12> the post req just contains commit information
19:22 < jaha> …
19:22 < jaha> im an idiot
19:23 < jaha> asdf12: yea im an idiot, thanks ;)
19:26 < jtomasrl> should i use monit or forever?
19:30 < chandra> getting error while installing node.js on Solaris virtualbox
19:30 < chandra> ./configure throws below error
19:30 < chandra> cc: Warning: option -- passed to ld usage: cc [ options] files.  Use 'cc -flags' for details cc: Warning: illegal option -dumpversion usage: cc [ options] files.  Use 'cc -flags' for details Traceback (most recent call last):   File "./configure", line 473, in <module>     configure_node(output)   File "./configure", line 371, in configure_node     cc_version, is_clang = compiler_version()   File "./configure", line 331, in compiler_
19:30 < chandra> any guess ?
19:32 < database34523> any one have any insight on the EMFILE error?
19:36 < CoverSlide> database34523: what's your ulimit?
19:36 < database34523>  ulimit -n  returns 65536
19:37 < Deathspike> With mongoosejs, is there any way to accomlish population for a batch of properties? I have a property in a document that looks like this, {a: [refs..], b: [refs..], c: [refs..]}, and calling .populate for each property (stuff.a, stuff.b, stuff.c) seems weird.
19:37 < database34523> i have running lsof with the PGID of node and all the spawned child processes
19:38 < database34523> the total line count from lsof is ~500
19:38 < database34523> which seems well below the limit
19:40 < geNAZt> database34523: what did ulimit -u tell you ?
19:40 < robinson_k> isaacs: i added overall counts to npm-www but i can not test them. even tried to get counts by npm installs with the client settings set to the dev-app.
19:40 < database34523> 257370
19:41 < geNAZt> well then you have way to much open files
19:42 < database34523> lsof | wc -l returns around 4300
19:42 < database34523> which isn't that many for a server
19:42 < robinson_k> isaacs: pushed the changes to https://github.com/robertkowalski/npm-www/tree/download-count but as i said i can not test them before making a pull request. do you have any hints?
19:42 < CoverSlide> overall counts? how is that different from what's there now?
19:42 < geNAZt> EMFILE occurs only if the kernel cant open more files ( too much open files error )
19:42 < timkuijsten> is it not possible to convert binary data to utf8 and then back to the same binary by reading it as utf8 in a new buffer?
19:43 < CoverSlide> oh i guess it just has last month
19:43 < geNAZt> timkuijsten: no it isnt
19:43 < database34523> so that would only happen when the 65536 is hit?
19:43 < geNAZt> yes
19:43 < timkuijsten> geNAZt: i see, short explanation why?
19:43 < geNAZt> or whatever sysctl is set to
19:44 < database34523> when calling exec or execFile is there anything that needs to be done to make sure it cleans up properly?
19:44 < geNAZt> utf8 has 8 bits to describe a char
19:44 < geNAZt> binary has more (it takes that what he needs since it isnt char based)
19:45 < geNAZt> so if u put binary bits into a utf8 string ( buffer.toString("utf8") ) it gets destroyed
19:45 < geNAZt> cause it gets encoded wrong
19:46 < timkuijsten> geNAZt: doesn't have utf8 a variable amount of bits (up to 4) to describe a char?
19:47 < geNAZt> for the first 128 chars thats true
19:50 < robinson_k> CoverSlide: currently there are just "last day", "last week" "last month" - no overall counts
19:50 < robinson_k> + counts
19:55 < cloudbender> I may have asked this before, but how can I incorporate node in the client side ?
20:00 < CoverSlide> incorporate node in the client side?
20:00 < CoverSlide> you mean run node from the browser?
20:00 < Robert00001> like node-webkit?
20:01 < sohcahtoa> need to make a js VM you can run node in first 
20:02 < wubino> I am using ubuntu and npm installs packages but they are not available from the command line
20:02 < wubino> Any quick fixes?
20:03 < CoverSlide> what is the output of `npm config get prefix`
20:03 < CoverSlide> take that directory, add `/bin` to it, append to your path
20:03 < CoverSlide> *PATH
20:04 < CoverSlide> also, you're installing with -g right?
20:04 < jrdn> how can i install a npm's master branch
20:05 < wubino> /usr/local
20:06 < CoverSlide> so /usr/local/bin is in your PATH? and you're installing these command line modules with the -g flag?
20:07 < wubino> CoverSlide: why is the -g flag not default?
20:07 < wubino> aside - that was the problem
20:07 < sohcahtoa> because it isn't?
20:08 < CoverSlide> because the default is to install locally to be used as a library
20:08 < CoverSlide> you can't use a globally installed module as a library, only as a command-line executable
20:08 < wubino> ok.
20:09 < wubino> how was the coffee comiler made?
20:09 < CoverSlide> you can read the source
20:10 < jrdn> wubino, /usr/local ???
20:10 < jrdn> ....
20:10 < Robert00001> it is compiled coffeescript
20:11 < gkatsev> I kind of wish the coffee-script module didn't exist. That way people couldn't mark it as a dependancy when they released their modules.
20:11 < wubino> by that answer alone I would have to say llvm played some role but I have not read about an association
20:11 < wubino> answer == compiled in coffeescript
20:13 < CoverSlide> the coffeescript compiler just read coffeescript, outputs equivalent javascript
20:13 < CoverSlide> no llvm required
20:19 < jrajav> llvm lol
20:20 < jrajav> Coffeescript is not that sophisticated (That's a good thing). It's just a kind of "alias" syntax for Javascript, that compiles directly into it
20:21 < jrajav> Why would you think llvm is related to anything Node.js or Javascript?
20:21 < tjfontaine> probably emscripten stuff
20:24 < tjfontaine> academically it would be interesting to see the result of v8 ssa -> llvm-ir -> llvm optnz -> v8 ssa
20:33 -!- mode/#Node.js [+o bnoordhuis] by ChanServ
20:41 < jd823592> Hi again, does anyone know why when i create mongoose Schema {user: {type: Schema.ObjectId, ref: "User"}, text: String} and then create an entry in model with this schema any subsequent queries return objects that do not have 'user' field (not even after populate("user")
20:43 -!- mode/#Node.js [-o bnoordhuis] by bnoordhuis
20:43 < Kakera> converting an IP from string to number is much simpler than the opposite
20:44 < Kakera> new Buffer(ip.split('.')).readUInt32BE(0)
20:51 < clone1018> How do I add a callback to vm.runInContext ?
20:51 < nathan7> clone1018: You don't, really
20:52 < CoverSlide> it runs synchronously
20:52 < clone1018> Yes but the contents don't
20:54 < clone1018> So if you try and print variables set inside of a long ajax call in the same context, they dont exist yet
20:55 < CoverSlide> maybe you can give it a callback in the context you pass to it
20:57 < clone1018> Like the code being ran?
20:58 < CoverSlide> how else would you call a callback from the code?
20:58 < clone1018> Well see, this is user code, requiring them to add a callback is silly
20:59 < asturel> hi, whats the best way to count online users?
20:59 < nathan7> clone1018: There's contextify
20:59 < nathan7> clone1018: https://github.com/brianmcd/contextify
20:59 < CoverSlide> unfortunately, it's not as if it runs in a thread and you can tell when the thread finishes
20:59 < asturel> could i just use an array with session key and last req value?
21:00 < clone1018> nathan7: Thanks, I'll look into it
21:08 < clone1018> Don't know if contextify will work
21:16 < mharsch> given a socket, is there a way to determine the netmask of it's underlying interface?
21:16 < tjfontaine> local or remote socket?
21:17 < clone1018> nathan7: It seems like a heavy dependancy for a framework, thanks anyway
21:17 < mharsch> tjfontaine: local
21:18 < nathan7> clone1018: Yes, it is rather heavy
21:18 < clone1018> Hrm
21:18 < nathan7> clone1018: Why do you want to use that anyway?
21:18 < clone1018> Use what?
21:18 < clone1018> vm?
21:20 < tjfontaine> mharsch: you could SIOCGIFNETMASK on the fd of the socket, but looking I don't see that exposed in core
21:21 < clone1018> nathan7: this but NodeJS http://aspen.io/simplates/
21:22 < nathan7> clone1018: new Function()
21:23 < clone1018> I looked into that earlier, per someones advice, how do I wrap a callback around it?
21:23 < nathan7> clone1018: you can pass arguments
21:23 < phrearch> hey
21:24 < nathan7> clone1018: You can do new Function('cb', "var fs = require('fs'); fs.readFile('someshit', cb)")
21:24 < nathan7> clone1018: the last argument is the function body
21:24 < nathan7> clone1018: all the ones before it are argument names
21:24 < clone1018> right
21:24 < nathan7> clone1018: the above is equivalent to function(cb) { var fs = require('fs'); fs.readFile('someshit', cb) }
21:25 < phrearch> im trying to check for errors in nodejs with the lesscss parser, but as soon there is one error during compilation, rebuild will always fail with the same error, while the bug is corrected
21:25 < phrearch> is the filecontent cached or something?
21:25 < nathan7> That's probably the LESS parser doing that
21:25 < nathan7> Are you doing new Parser every time?
21:25 < nathan7> Because the Parser object might be caching shit
21:26 < clone1018> nathan7: I understand all that, but how is the callback called if the functionBody arg is the content of the simplate we're evaling?
21:26 < phrearch> nathan7: no, im reusing the same parser
21:27 < phrearch> ill try to spawn a new one on a parser error. thanks for the suggestion!
21:27 < nathan7> clone1018: Why do you need a callback?
21:28 < clone1018> ANYTHING can go inside the code we're evaling, including long ajax requests for example, the problem is by the time we've finished the ajax call we've already moved on to the bottom part of the simplate, so the variable isnt set and we cant use it
21:29 < nathan7> clone1018: well
21:29 < nathan7> clone1018: Either you ensure cb() is called at some point
21:29 < clone1018> https://gist.github.com/clone1018/4717817 there's the snippet
21:29 < nathan7> clone1018: You could pass a magic this
21:29 < Vendethiel> Hi! I'm looking for a way to make my script hang (it's basically a watcher)
21:32 < MI6> joyent/node: Ben Noordhuis v0.8 * 6b99fd2 : zlib: pass object size hint to V8  Inform V8 that the zlib context object (+1 more commits) - http://git.io/N7L44Q
21:33 < bnoordhuis> Vendethiel: for (;;);
21:33 < clone1018> nathan7: we have to be transparent for the developer
21:33 < Vendethiel> well yes but then I can't receive events from chokidar :p
21:34 < bnoordhuis> Vendethiel: function f() { setTimeout(f, 1000); } f() ?
21:34 < Vendethiel> will try
21:34 < Vendethiel> ty
21:35 < nathan7> clone1018: You can have a this object with a getter for the callback
21:35 < clone1018> Explain?
21:35 < nathan7> clone1018: If the user retrieves the callback then assume he's doing async stuff
21:37 < nathan7> clone1018: var cbUsed = false, rendered = template.call({ get cb() { cbUsed = true; return cb }); if (!cbUsed) cb(null, rendered)
21:38 < MI6> joyent/node: Ben Noordhuis v0.8 * a86ebbe : blog: remove dangling symlink  Fixes #4716. - http://git.io/YAD82Q
21:41 < LogicOpinion> hello, i am using node v0.8.18 when using node-inspector i do not see profiles tab, any ideas?
21:42 < bnoordhuis> LogicOpinion: i think you need to install v8-inspector as well
21:43 < LogicOpinion> bnoordhuis, ok, let me try it
21:43 < phrearch> nathan7: that worked. thanks!
21:44 < diogogmt> I'm taking a closer look at the Step lib: https://github.com/creationix/step/blob/master/lib/step.js#L80 and on the parallel method, line 80, it retrieves only the first argument from the arguments var, shouldn't retrieve all the arguments of the callback? Or am I missing something?
21:44 < LogicOpinion> npm ERR! 404 'v8-inspector' is not in the npm registry. whats that?
21:45 < bnoordhuis> LogicOpinion: check node-inspector's readme, it should be documented in there somewhere
21:46 < nathan7> Vendethiel: as long as you can receive events node shouldn't exit..
21:46 < nathan7> Hey bnoordhuis 
21:46 < bnoordhuis> ho nathan7
21:48 < LogicOpinion> can't find one
21:48 < marsilainen> I can't help but feel like I want to throw up at the idea of JS on the server... but am I just wrong?
21:48 < ryanrolds_w> Are links to the various versions of the docs linked somewhere on nodejs.org, or does a person just need to know where they a stored to get at them?
21:49 < nathan7> marsilainen: Maybe you're used to shitty JS
21:49 < marsilainen> maybe
21:49 -!- mode/#Node.js [+o bnoordhuis] by ChanServ
21:49 < bradleymeck> marsilainen: JS != IE's JS
21:49 < marsilainen> everytime I look at JS it's full of anonymous functions and things like that which make it feel very non-OO
21:49 < nathan7> It's very non-OO.
21:49 < nathan7> Functions are king.
21:50 < marsilainen> maybe that's why I don't like it
21:50 < nathan7> If you're taught to hate everything non-OO, yes, functional languages will seem disgusting.
21:50 < bradleymeck> node is def not OO like Java, but then again most things aren't OO once you get sufficiently complex… (irony when wanting speed and extensibility)
21:50 < marsilainen> do Node.JS people think that OO isn't a good idea then?
21:50 < nathan7> Java is forcing everything into OO
21:50 < nathan7> Forcing everything to be OO is a bad idea.
21:50 < ryanrolds_w> No, it has it's uses.
21:51 < nathan7> OO can be a useful tool.
21:51 < nathan7> marsilainen: I like having a toolbox.
21:51 < ryanrolds_w> You will generally see OO in modals.
21:51 < nathan7> marsilainen: Not just a hammer.
21:51 < nathan7> When all you have is a hammer..
21:51 < cloudbender> So, isn't cool how they inserted noops into the localSstorage engine ? yeah.
21:51 < marsilainen> it's not just Java that is OO though is it? C# is OO, Ruby is OO - I guess I thought that the world had decided that OO is the way to go
21:51 < ryanrolds_w> Modals, DAO are usually very OO, routes and other things will have a lot of anon functions, same with I/O.
21:51 < bradleymeck> marsilainen: i love oo for persisting state
21:51 < bradleymeck> marsilainen: doing flow control due to OO is very… bad
21:52 < lohkey> scala has a good OO/FP approach
21:52 < lohkey> they're async model is pretty good too
21:52 < lohkey> s/they're/their/
21:52 < azylman> Anonymous functions isn't necessarily non-OO
21:52 < ryanrolds_w> ^
21:52 < lohkey> they go for futures/promises instead of continuations though
21:53 < lohkey> and scala "streams" are typically based off of the iteratee IO model from haskell
21:53 < marsilainen> azylman: maybe not, but generally they seem to be used to achieve something which is more elegantly done in OO IME
21:53 < azylman> marsilainen: They're used a lot for the same things you use them for in js: callbacks
21:54 < lohkey> marsilainen: promises/futures are the OO way to async typically, which you can still do in node.js
21:54 < ryanrolds_w> I'm sure many Node.js user prefer the flexibility that Node.js affords.
21:54 < marsilainen> azylman: yes, exactly - callbacks generally aren't needed in OO so much because of inheritance & polymorphism which, to me, is more beautiful
21:54 < ryanrolds_w> *users
21:55 < nathan7> marsilainen: That's an unrelated matter
21:55 < marsilainen> nathan7: I don't think it is
21:55 < marsilainen> the simple fact is that in OO languages you don't see things like callbacks & anonymous functions so much, which to me seems more elegant
21:55 < marsilainen> but maybe it's just a preference
21:56 < bradleymeck> marsilainen: the "Watcher" paradigm in most "OO" is just a callback thats been crammed into an object
21:56 < nathan7> Observers, Watchers..
21:56 < azylman> marsilainen: not sure what kind of OO stuff you've worked on, but I've used callbacks a lot... though they're usually implemented as anonymous classes since Java before 7 didn't have lambdas
21:56 < marsilainen> OO code just looks cleaner and more beautiful
21:56 < bradleymeck> see Digital Mars' D language and `delegate` for a clearer example
21:56 < azylman> marsilainen: see things like: http://stackoverflow.com/questions/355167/how-are-anonymous-inner-classes-used-in-java
21:57 < nathan7> marsilainen: I have input, I have output, I define their relationship as a pipeline
21:57 < cloudbender> CoverSlide ?
21:57 < azylman> That's a VERY common pattern in Java
21:57 < marsilainen> I bet you wouldn't show you're anonymous function ridden code to your grandmother - she would laugh you out of the room
21:57 < cloudbender> brb
21:57 < CoverSlide> cloudbender ?
21:57 < cloudbender> Permission to PM ?
21:57 < CoverSlide> permission granted
21:57 < azylman> marsilainen: It's a very accepted pattern... not like something gross
21:58 < CoverSlide> my grandmother likes the actor model
21:58 < nathan7> marsilainen: I think you should take a look at Haskell
21:58 < bradleymeck> marsilainen: i would, but if you have more than 2 nested anon functions in your code… we need to sit down and have a talk about why you want your code all in the same fn in any language doing similar
21:58 < bradleymeck> also name your damn inline fns
22:02 < hhuuggoo_> just wanted to check since I'm new, is there anything wrong with doing require("../file.js") to require a file which is outside you're directory?
22:03 < _ior> only that it obfuscates your dependency tree
22:04 < azylman> I think require(__dirname + "/../file.js") is more accepted, but I dunno for sure
22:04 < azylman> Also dunno why
22:05 < mscdex> hhuuggoo_: i'd say it's acceptable as long as the .. doesn't take you outside the root of the project
22:06 < hhuuggoo_> thanks
22:06 < hhuuggoo_> that's what i thought
22:07 < samholmes> How do I recursively remove a directory using the fs module?
22:13 < azylman> samholmes: you can't. I've used the library "rimraf" for that
22:14 < azylman> Er, actually, I might be remembering wrong... I might have used that just because it doesn't complain if the directory doesn't exist
22:14 < samholmes> azylman: found that thanks
22:21 < _ior> so i have a node app that at some point calls a child_process.exec that's a critical section. so i mutexed it (using a simple lock with a process.nextTick()  and also a bakery algo that doesn't do empty spinning) , yet node hits 30-99.9% cpu time
22:21 < _ior> but only during mutex
22:21 < _ior> what
22:22 < kschzt> ior
22:22 < kschzt> how you mutexing with nextTick?
22:22 < _ior> if the function is in use, push the function to nextTick
22:22 < _ior> reflection
22:23 < _ior> anyway, current mutex is bakery, which doesn't nextTick at all
22:23 < _ior> but instead callbacks whatever's next in the queue
22:23 < _ior> but node still hits massive cpu
22:26 < hoodoos> hey guys, sorry for offtop, but anybody used youtrack from jetbrains for scrum? and if not maybe anyone can give me suggestion on good solution?
22:27 < Skaag> I use ChiliProject + Backlogs
22:27 < Skaag> I really like it because it's simple and does the job
22:27 < Skaag> No complicated hoo-ha like Jira
22:28 < Skaag> I'm also now testing gitlab, looks very interesting - kinda like Github, but totally lacking scrum-wise so not really what you are looking for :)
22:28 < CoverSlide> we used Jira + Greenhopper for scrum
22:29 < CoverSlide> before that we used AgileZen
22:29 < Skaag> Jira rubs me the wrong way
22:29 < Skaag> Too many buttons, links, options, my goodness...
22:29 < Skaag> :)
22:30 < kschzt> ior sec
22:30 < CoverSlide> I agree, JIRA was a pain to navigate
22:30 < CoverSlide> we used it though cause it had good reporting, burndown
22:30 < CoverSlide> and a bunch of customizability
22:33 < Gambit--> hola folks
22:33 < Gambit--> any joyent folk around, or other active developers?
22:35 <@bnoordhuis> Gambit--: yes
22:35 -!- mode/#Node.js [-o bnoordhuis] by bnoordhuis
22:35 < Gambit--> bnoordhuis: which, out of curiosity?
22:36 < bnoordhuis> Gambit--: which what? joyent employee or developer?
22:36 < CoverSlide> if you need joyent help, there's a #joyent channel
22:37 < Gambit--> Sorry, I got called simultaneously.
22:38 < Gambit--> bnoordhuis, yeah, joyent or node engine dev?
22:38 < Gambit--> CoverSlide: that's a good idea, I might slip over there, first.
22:38 < bnoordhuis> Gambit--: former joyeur, current maintainer
22:39 < CoverSlide> if it's a problem with node itself, then report it on github
22:39 < cloudbender> Does the node httprequest have the same origin problem ?
22:39 < Gambit--> I'm going to be going through the node engine looking at embedding it into another process, and was curious how awkward that was going to be.
22:39 < CoverSlide> or you can chat about it here
22:39 < Gambit--> And also if some of the changes I was making were appropriate for a pull request.
22:39 < CoverSlide> cloudbender: no, that's an arbitrary rule browser makers implemented
22:40 < bnoordhuis> Gambit--: depends. it's not strictly impossible to embed node but it's not something we actively support
22:40 < robinson_k> hm. anyone an idea how to test the downloads count in the npm-www development version?
22:40 < Gambit--> bnoordhuis: would you be interested in changes necessary to support it?
22:41 < Gambit--> or do you have some words of wisdom regarding such an endeavor?
22:41 < bnoordhuis> Gambit--: only if they're not intrusive and take zero effort to maintain :)
22:42 < bnoordhuis> Gambit--: re words of wisdom, you want to tweak the build to exclude src/node_main.cc and then call node::Start yourself
22:44 < kschzt> _ior still there?
22:44 < _ior> hi
22:45 < kschzt> _ior so, why mutex, and what you trying to do there 
22:46 < _ior> i have a child_process.exec that has to be mutexed
22:46 < Gambit--> bnoordhuis: Yeah, I got that.  I'm kinda worried about globals and statics.  I've cleaned V8 up, but does node have a lot of those to contend with as well?  Any allocations at load time, for example?
22:46 < kschzt> _ior, so, only can be run once as a child by any one process?
22:47 < _ior> at any given time, yeah
22:47 < _ior> any others "processes" that come to that part of the code need to wait their turn
22:48 < bnoordhuis> Gambit--: many
22:48 < Gambit--> *sighs*
22:48 < kschzt> ior, are you in charge of the process group? meaning, in control of what processes are spawned?
22:48 < Gambit--> Why does no one work clean, anymore.
22:48 < bnoordhuis> you can't create two "instances" of node in one process, if that's what you mean
22:48 < Gambit--> bnoordhuis, well, I can't /yet/.
22:49 < _ior> kschzt, no, this segment of the code can be reached by users interacting with the ui
22:49 < kschzt> ior, could you do it via a http://nodejs.org/api/cluster.html master
22:49 < CoverSlide> there's that threads-a-go-go package that uses isolates
22:49 < bnoordhuis> we actually tried that in the pre-v0.8 days but that got dropped
22:49 < kschzt> ah ok
22:49 < Gambit--> dropped due to lack of a good usecase, or due to complexity?
22:49 < CoverSlide> which is now webworker-threads
22:49 < bnoordhuis> the overhead both in maintenance and performance from making everything thread safe wasn't worh it
22:49 < bnoordhuis> *worth
22:49 < _ior> kschzt yeah, cluster won't solve the issue
22:49 < kschzt> ior, then use eg. redis, just for locks
22:49 < Gambit--> oh, in this scenario that would be solved by pushing everything into it's own thread.
22:50 < _ior> i dunno kschzt, that's an awfully big dependency for just a mutex
22:50 < Gambit--> how about having multiple exclusive node.js contexts?  Is that feasible?
22:50 < bnoordhuis> Gambit--: you mean thread local storage?
22:50 < Gambit--> (all accessed from the same thread, just having different js environments)
22:51 < kschzt> ior, you can't make a clustering mutex without that :)
22:52 < Gambit--> there's only 251 globals, that's not actually that bad.  70 of them are from v8 too (thought I'd gotten rid of more of those, hm)
22:52 < kschzt> ior, that being a 3rd shared system
22:52 < _ior> kschzt, well the mutex i showed you is actually working correctly
22:52 < samholmes> browserify doesn't really report syntax errors at all if one of my modules do have one
22:52 < _ior> so is the mutex from the bakery algo
22:52 < _ior> it's just that it causes node to go eat insane amounts of cpu
22:52 < kschzt> ok?
22:52 < Gambit--> bnoordhuis: ^^^^
22:53 < bnoordhuis> Gambit--: tell me, why do you want this?
22:53 < bnoordhuis> i ask because i don't think it's something we care about
22:53 < Gambit--> bnoordhuis: Which part of this?
22:53 < marlun> Is there a recommended way of using mustache.js templates with express.js?
22:53 < Gambit--> bnoordhuis: also, which we? :)
22:53 < bnoordhuis> Gambit--: being able to run several instances of node
22:53 < Gambit--> ah
22:53 < kschzt> ior, roger, lms
22:53 < bnoordhuis> and we === us maintainers
22:53 < Gambit--> bnoordhuis: also, ah.
22:53 < Gambit--> Do you mind switching to pm?
22:54 < bnoordhuis> well, we're a very open community
22:54 < substack> samholmes: how are you running browserify?
22:54 < substack> if you use the api you need to listen for 'syntaxError' events
22:54 < substack> or just use the command-line tool already
22:54 < substack> I don't use the middleware and it's about to go away so stop using that
22:54 < samholmes> substack: Never! I say no to command-line tool!
22:54 < Gambit--> well, in channel I think I can say that I'm looking at embedding nodejs in my companies product.
22:55 < Gambit--> It's all very speculative at the moment - I can talk about technical issues, if that's what you're interested in, but not market.
22:56 < bnoordhuis> Gambit--: okay. as an anecdote, a big russian company paid us a lot of money back then to add isolates to node
22:56 < bnoordhuis> but eventually we called it off because of the aforementioned maintenance/performance drawbacks
22:56 < Gambit--> right
22:56 < _ior> kschzt, lms?
22:56 < bnoordhuis> and the upsides were all very speculative
22:56 < bnoordhuis> but sure, pm me
22:57 < Gambit--> bnoordhuis: I'm fairly annoyed at v8 for that reason - for something that's nominally designed to be a library that's embedded in a larger application, it's a really bad citizen.
22:57 < kschzt> ior lms your mutex sec
22:57 < bnoordhuis> i kind of agree. node is not a lib though
22:57 < Gambit--> bnoordhuis: sure - the /start/ of my problems lies with v8 :)
22:57 < CoverSlide> https://npmjs.org/package/webworker-threads << uses isolates
22:58 < Gambit--> CoverSlide: I'll take a look at that, thanks.
22:58 < Gambit--> bnoordhuis: Let me type a few lines out of general scenario, and then maybe you can offer me some good advice.
22:58 < bnoordhuis> okay
23:00 < robinson_k> ah were able to test it. thanks anyway.
23:04 < kschzt> http://github.com/cujojs/when <3 
23:05 < JohnnySS> hi. i want to learn how to program in node but unfortunately i don't know how to program in javascript. any good resources ?
23:05 < CoverSlide> http://eloquentjavascript.net/
23:05 < gkatsev> JohnnySS: check out eloquentjavascript.net
23:06 < gkatsev> CoverSlide: damn you!
23:06 < gkatsev> :P
23:06 < CoverSlide> wooo!!
23:06 < gkatsev> there's no trigger for that here
23:06 < Gambit--> I know how to program in javascript - I think - but it makes me feel dirty every time I do it.
23:06 < gkatsev> yet
23:06 < gkatsev> Gambit--: no reason why it should
23:07 < kschzt> o_O
23:07 < Gambit--> gkatsev: I come from decades of C, C++ background.  Debugging javascript (in the browser) is like a stabbing party in a cotton candy factory.
23:08 < gkatsev> lol
23:08 < gkatsev> it's not that bad
23:08 < tjor> JohnnSS suggest looking at Codeschool and Codecademy too
23:08 < dabarnes> what a wonderful way to put it
23:08 < CoverSlide> also, once you learn JavaScript, http://bonsaiden.github.com/JavaScript-Garden/
23:08 < CoverSlide> ^ this gets you past some of its rougher features
23:08 < kschzt> >> console.time('a'); process.on('exit', function() { console.error('what'); }); console.timeEnd('a');
23:08 < purr> kschzt: ReferenceError: process is not defined
23:09 < kschzt> O_o
23:09 < gkatsev> just plain-old js
23:09 < gkatsev> it isn't run in node OR browser context
23:09 < Robert00001> yup
23:09 < CoverSlide> yeah, exposing process, that wouldn't be very safe
23:09 < Gambit--> gkatsev: everything gets sticky, tangled up, and invariably you puncture a child.
23:09 < JohnnySS> code school and code academy ? are those videos ?
23:10 < gkatsev> JohnnySS: no, they're websites with exercises
23:10 < gkatsev> I'm not a huge fan of them, though
23:10 < kschzt> you kidding me? this is #node.js :)
23:10 < nathan7> Gambit--: Maybe you should try writing reasonable code.
23:10 < JohnnySS> oh ok
23:10 < nathan7> Debugging shitty code is no fun.
23:10 < kschzt> of course we should have a sandboxed @purr
23:10 < gkatsev> kschzt: the js is already sandboxed.
23:10 < Gambit--> nathan7, starting with an ad hominem attack?  Cute.
23:11 < kschzt> @gkatsev without the node api?
23:11 < JohnnySS> so i am starting out with eloquent javascript book. is that correct ?
23:11 < gkatsev> kschzt: yes
23:11 < gkatsev> JohnnySS: yes
23:11 < kschzt> what is a js bot without the node.js api doing on #node.js?
23:11 < echo> They're good for a first run, imo. I.E. If you've never used ruby, ever and you want a high dive into it, do one of those, get a helicopter-level understanding and pick up some early best-practices instead of making basic mistakes early on.
23:11 < gkatsev> kschzt: it's written in node. Also, just being able to run js sometimes is good.
23:12 < JohnnySS> ok thank you very much :)
23:12 < kschzt> gkatsev, just get it right.
23:12 < gkatsev> echo: I think elqouent does a better job. Though, codeacademy and school I guess look better.
23:13 < nathan7> Gambit--: 00:06:45 < Gambit--> gkatsev: everything gets sticky, tangled up, and invariably you puncture a child.
23:13 < nathan7> Gambit--: I'm making a general statement here.
23:13 < nathan7> Gambit--: I've written JS. I've hated JS.
23:13 < gkatsev> also, isn't C much worse to debug?
23:14  * gkatsev heads to get food
23:14 < nathan7> gkatsev: First, you get a segfault.
23:14 < echo> gkatsev: I've yet to try eloquent. However, I've found tutsplus, codeschool and codeacademy to be helpful when I want to start from scratch and learn something I know nothing about. I'll keep eloquent in mind though, thanks :)
23:14 < nathan7> gkatsev: Then, you jump off a building.
23:14 < tjor> JohnnySS CodeSchool & Codecademy are very high level and great for an intro. But I'm a noob too, so I'd listen to the channel
23:14 < gkatsev> nathan7: yep
23:14 < nathan7> gkatsev: No debugging necessary
23:14 < nathan7> gkatsev: though I am making assumptions about what hell contains here
23:15 < gkatsev> eloquent is also high level. But I think it explains things better and has more correct info, though, I think it may be getting slightly dated.
23:15  * gkatsev bbls
23:25 < lyaunzbe> hey guys, is there any way to see what a child process is executing? I know what args Im passing, but I want to see how spawn constrcuts the command and args togethor
23:25 < CoverSlide> each item in the args array is an argument
23:29 < lyaunzbe> coverslide: I'm assuming it starts from the 0 index? One of my arguements is actually a long string of arguements, (example: '0.8 0.7 -t'), could that be the issue?
23:30 < CoverSlide> yeah
23:30 < CoverSlide> each item in the array is a single argument
23:30 < lyaunzbe> oh damn, okay
23:30 < CoverSlide> if you pass it a string with spaces like that, then that's one argument
23:30 < lyaunzbe> thanks, that helps me a lot!
23:31 < CoverSlide> like if you put quotes around it
23:34 < JohnnySS> ok..i started out with code school and it seems very friendly :)
23:35 < JohnnySS> i ll have eloquent in mind if i won't get covered by it
23:35 < JohnnySS> but what i also want to ask is this
23:35 < JohnnySS> what is my first step with node after i try some javascript ?
23:35 <@Nexxy> installing it
23:36 < JohnnySS> sorry guys i meant code academy before*
23:37 < JohnnySS> lol Nexxy all right i get the point
23:37 <@Nexxy> JohnnySS, what? ;o
23:38 < JohnnySS> you mean i have some time before i get my hands on node ?
23:38 <@Nexxy> you can do it whenever you like!
23:38 < tjor> JohnnySS - I started with SAMS Teach Yourself Node.js. I've also been using CodeSchool, Codecademy & Udemy js and Node.js courses. Lots of great resources / discover on GeekList too :)
23:38 < CoverSlide> I learned node by downloading it and writing code
23:39 <@Nexxy> geeklist? I've heard of that place!
23:39 < JohnnySS> tjor, is this book good ?
23:39 < tjor> Been listening here too :)
23:39 < amurdaca> i was also thinking to get SAMS teach yourself nodejs
23:40 < amurdaca> but i think it's outdated now
23:40 < amurdaca> so reading the docs is funny
23:40 < JohnnySS> hmmm
23:40 < amurdaca> and not so difficult though
23:40 <@Nexxy> you could also look for meetups + confs in your area
23:40 < tjor> JohnnySS good starting point if coming from php or python. Again, I'm a noob, so apprecaite the high level basics as a first stop.
23:40 < CoverSlide> geeklistomania! Think less but see it grow! like a riot like a riot oh!
23:40 <@Nexxy> I've learned a lot from the ones I've attended
23:40 < tjor> Agree on docs of course :)
23:41 < CoverSlide> also look for videos on youtoube / vimeo
23:41 <@Nexxy> like that blackwaterops video
23:41 <@Nexxy> very educational
23:41 < JohnnySS> i am a programmer but not coming from the open source 
23:41 <@Nexxy> http://www.youtube.com/watch?v=1e1zzna-dNw
23:42 < JohnnySS> so its gonna be difficult to me
23:42 < xk_id> Nexxy: what's his problem? :P
23:42 <@Nexxy> xk_id, he (like most people) formed an opinion before he understood everything (anything)
23:43 < JohnnySS> thats why i m gonna go with the book and/or code academy i suppose
23:43 < tjor> JohnnySS - its never too late to see the light :)
23:43 < xk_id> JohnnySS: have you done any programming in the past?
23:43 < JohnnySS> a lot programming in the past!
23:44 < CoverSlide> well node is for programming in the future!
23:44 < JohnnySS> but not this kind of programming unfortunately
23:44 < JohnnySS> i guess so thats why i am here !
23:44 < JohnnySS> but its all new to me
23:44 < tjor> JohnnySS, my guess is you will be running at it quick so.
23:45 < JohnnySS> tjor, its all new to me i guess
23:45 < JohnnySS> javascript, node...
23:46 < JohnnySS> i also have very little knowledge of html and no css
23:46 < amurdaca> JohnnySS is not that hard uh...
23:46 < JohnnySS> and if i need to quit now just tell me so lol
23:46 < amurdaca> and node is not just about html/css/front-end stuff (correct me if im wrong)
23:47 <@Nexxy> JohnnySS, you should never quit
23:47 <@Nexxy> node is mostly about networking 
23:47 < JohnnySS> look html i had a crash course and i think i got it !
23:47 < JohnnySS> its not that difficult
23:47 < JohnnySS> css i think is way tooooo difficult to me
23:47 < JohnnySS> so i ll stick to ready made templates
23:48 < tjor> For me, I'm enjoying the one language to rule them all :)  Less learning overhead and quickly getting stuff running. Deployment is too easy to call it an activity.
23:48 < echo> amurdaca: You're right. It's the inverse of client-side. Although, it's highly innovative and agile. So, server-side rendering of content, html, templating, etc. Is all still just as easy and possible as it is on the browser side.
23:49 < JohnnySS> but i would like for example to try out to process an html form with data with node
23:49 < JohnnySS> like one would have done in php for example
23:49 < JohnnySS> is that correct or wrong ?
23:50 < echo> By process, do you mean parse or read in an existing html form? Or generate an html form?
23:50 < CoverSlide> you can do that, but you would probably be best with connect, so you're gonna have to learn npm and its module system
23:50 < JohnnySS> i mean reading and process the user input
23:50 < tjor> JohnnySS this community is also pretty friendly :)
23:50 < CoverSlide> if you want to get up and running with a web app, use express / connect
23:51 < JohnnySS> i know express is a web framework right ? but what is connect ?
23:51 < echo> I second CoverSlide, even if you don't take advantage of templating, and do it manually, it's still one of the most widely used server-side web frameworks. 
23:51 < tjor> JohnnySS +1 on Express
23:52 < tjor> Johnny use 'the google' on expressjs
23:52 < echo> Connect is what express is built upon. http://www.senchalabs.org/connect/
23:52 < mmalecki> c
23:52 < CoverSlide> express is a web framework, connect is a library to do the dirty work of common web servers, like most of the stuff that's built-in to PHP
23:53 < JohnnySS> now that you said PHP
23:53 < CoverSlide> and express is built on top of connect
23:54 < JohnnySS> you said before that programming in node is the future right ?
23:54 < CoverSlide> yes
23:54 < JohnnySS> you think node can compare itself with PHP and the like ?
23:54 < CoverSlide> with the right libraries, sure
23:54 < JohnnySS> i thought it was good only for real time apps right ?
23:55 < JohnnySS> that's what they say
23:55 < CoverSlide> it's good for anything python or ruby is good for
23:55 < CoverSlide> and php ... well ... that's for people who like magical stuff to be handled on its own
23:55 < tjor> Start with the books and tutorials, but I found this useful a few months ago too http://shapeshed.com/creating-a-basic-site-with-node-and-express/
23:57 < JohnnySS> thanks tjor 
23:58 < tjor> JohnnySS ur welcome
23:58 < JohnnySS> anyways i came here because i want to learn javascript for starters
23:58 < amurdaca> buy Javascript definitive guide
23:58 < amurdaca> and Javascript the good parts
23:58 < amurdaca> best books ever
23:59 < JohnnySS> the books from o'reilly ?
23:59 < amurdaca> yup
23:59 < JohnnySS> i know them yes
23:59 < JohnnySS> but i need something to get me started at this point
23:59 < JohnnySS> i think code academy is ok
--- Log closed Wed Feb 06 00:00:00 2013
