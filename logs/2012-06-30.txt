--- Log opened Sat Jun 30 00:00:01 2012
00:00 < dmilith> I'm not using ports
00:00 < dmilith> I applied patch and it's on test compilation
00:00 < EhevuTov> dmilith, apostate
00:00 < dmilith> we'll see
00:01 < dmilith> EhevuTov: apostate?
00:01 < EhevuTov> dmilith, did you browse the patches from the port system as well? There are a few patches you might want to check out
00:02 < dmilith> I did a couple months ago
00:02 < dmilith> nothing special
00:02 < EhevuTov> dmilith, I'm just joking with you
00:02 < EhevuTov> sinner
00:02 < dmilith> ;]
00:02 < dmilith> this is not funny! I need node stuff on my fbsd!
00:02 < dmilith> ];]
00:03 < EhevuTov> dmilith, also be careful if you already have other libs installed, like V8. Ben helped me catch that my build was trying to use the V8 of my system and not the V8 of node's included depenencies
00:04 < EhevuTov> dmilith, hey I hear you, I use Node on fBSD as well. i just don't need 0.8 yet so I'm not quite in your boat. Ben seems to be aware of the issue though(seems like it was a dependencies problem)
00:04 < dsirijus> :(
00:04 < dmilith> yup I know ;]
00:05 < dmilith> still killing my cpu
00:05 < EhevuTov> dmilith, also, have to communicated with the maintainer of the node port?
00:05 < dmilith> don't have time to talk with them
00:05 < dmilith> I'm expecting app to be fbsd ready ;]
00:05 < dmilith> ah. success
00:06 < dmilith> 0.8.1 built with clang
00:06 < EhevuTov> yeah, but I'd think you would both be on the same path
00:06 < EhevuTov> you do a patch?
00:06 < EhevuTov> I use clang as well
00:06 < dmilith> fiend ~ (id: 500) % uname -a
00:06 < dmilith> FreeBSD fiend 9.0-RELEASE FreeBSD 9.0-RELEASE #0: Sun May 13 20:49:55 CEST 2012     root@fiend:/usr/obj/usr/src/sys/VerKnowSys  amd64
00:06 < dmilith> fiend ~ (id: 500) % node -v
00:06 < dmilith> v0.8.1
00:06 < EhevuTov> awesome
00:06 < EhevuTov> d00d submit the port fix :-)
00:07 < EhevuTov> I'd assume they'll wait on the upstream fix though
00:07 < dmilith> https://gist.github.com/b10406eb6cae567ab3c8
00:07 < dmilith> nothing special
00:07 < xocel> When compiling is there an equivalent configure option to 0.6's --libdir= in 0.8.1 ?
00:07 < EhevuTov> oh easy
00:08 < dmilith> EhevuTov: yea.
00:08 < bnoordhuis> xocel: no
00:08 < bnoordhuis> xocel: there's only --prefix now
00:09 < xocel> :(
00:09 < bnoordhuis> xocel: what do you need it for?
00:09 < xocel> slack puts 32bit apps in /usr/lib 64bit in /usr/lib64 
00:09 < xocel> so for consistency really
00:10 < bnoordhuis> xocel: node doesn't install any libraries (binary libraries, that is)
00:10 < xocel> oh, just noticed, its modules and scripts etc. it can just stay in lib :)
00:14 < EhevuTov> dmilith, once you patched that diff, did it compile right out of the box?
00:16 < captain_morgan> hey Isaacs, I've rebased that commit for npm-www does it need a new pull request?
00:16 < augustl> was fs.lchown added recently? It's not available in 0.8 on linux
00:17 < EhevuTov> augustl, was fs changed to path in 0.7?
00:17 < augustl> lchmod also doesn't seem to be available
00:17 < dmilith> EhevuTov: yea
00:17 < augustl> EhevuTov: not to my knowledge
00:17 < augustl> the APIs that is
00:18 < augustl> ah right, some things did move
00:18 < augustl> http://nodejs.org/api/fs.html say lchown is in fs though
00:18 < augustl> all the methods that actually poke the fs is now in fs :)
00:19 < augustl> kind of strange that lchmod and lchown isn't available in 0.8 though
00:19 < EhevuTov> I know fs.exists changes to path, dunno about the others
00:19 < bnoordhuis> augustl: it's only available on *BSD systems (and OS X)
00:19 < EhevuTov> makes sense
00:20 < augustl> they're present in http://nodejs.org/docs/v0.8.0/api/fs.html
00:20 < augustl> bnoordhuis: ah, I see
00:20 < bnoordhuis> i guess that should be documented
00:20 < augustl> that would make sense :)
00:21 < bnoordhuis> augustl: make that OS X only
00:21 < EhevuTov> Vacation starts in a few minutes, then off to #Nodeconf for a few days \o/
00:23 < augustl> bnoordhuis: ah, interesting
00:23 < augustl> is it a HFS thing maybe?
00:23 < augustl> also interesting, "man 2 lchown" exists on Ubuntu
00:23 < CIA-93> node: Ben Noordhuis v0.8 * rb9abb64 / doc/api/fs.markdown : doc: fs.lchmod() is only available on OS X - http://git.io/H6vnHA
00:24 < bnoordhuis> augustl: no, it depends on open(O_SYMLINK) working
00:24 < bnoordhuis> augustl: which is only the case for OS X
00:24 < augustl> I see
00:25 < bnoordhuis> i think it was added as a workaround for some npm issue
00:32 < myndzi> so the configure script in node 0.8.1 appears not to run properly on python 2.7
00:32 < myndzi> anyone have one that will?
00:32 < myndzi> i fixed all the ifs but now i am getting into things i understand less well
00:34 < myndzi> ah, system python is 2.4
00:34 < myndzi> i have 2.7 installed but which isn't showing the path wtf
00:50 < tim_smart> python 2.4, long time no see
00:50 < tim_smart> arch pacman -S python install 3.x now
00:51 < tim_smart> I almost always symlink 2.7 to `python` though
00:52 < FesterCluck> my favorite alias:
00:52 < FesterCluck> la="ls -lastr"
00:52 < FesterCluck> and:
00:52 < FesterCluck> sn="nano -w"
00:53 < tim_smart> Everytime I use nano, I'm always like "why won't this thing exit insert mode"
00:53 < tim_smart> Then I realise it isn't vim
01:08 < xocel> If anyone using slack is interested: https://github.com/iquidus/SlackBuilds/tree/master/sublime_text SlackBuild for Sublime Text 2 
01:16 < AlbireoX`Laptop> Hi, does anyone have any idea why Mongoose would populate refs on one machine but not another? o_0
01:17 < FesterCluck> "populate refs".. could you be more specific?
01:17 < FesterCluck> Automatically recursing dbrefs?
01:27 < CIA-93> libuv: Ben Noordhuis v0.8 * re4a68bb / (src/unix/internal.h src/unix/stream.c src/unix/tcp.c): unix: move uv__connect() to tcp.c - http://git.io/rISOIQ
01:27 < CIA-93> libuv: Ben Noordhuis v0.8 * r1a6b6b7 / src/unix/tcp.c : unix: deduplicate socket creation code in tcp.c - http://git.io/lLq2hA
01:27 < CIA-93> libuv: Ben Noordhuis v0.8 * r0971598 / (src/unix/internal.h src/unix/stream.c src/unix/tcp.c): unix: fix EINPROGRESS busy loop - http://git.io/yxL8-g
01:27 < CIA-93> libuv: Ben Noordhuis v0.8 * r1d1dd9b / (test/test-list.h uv.gyp test/test-tcp-unexpected-read.c): test: add 'unexpected read' tcp test - http://git.io/jrs18w
01:27 < CIA-93> libuv: Ben Noordhuis v0.8 * r3b8c0da / src/unix/stream.c : unix: fix busy loop on unexpected tcp message - http://git.io/FVOHaA
01:28 < CIA-93> node: Ben Noordhuis v0.8 * r7e5aeac / (7 files in 3 dirs): deps: upgrade libuv to 3b8c0da - http://git.io/KLKBlQ
01:31 < FesterCluck> AlbireoX`Laptop: To answer your question quickly, I'm betting one system is using the populate() function, while the other is using find() or query()
01:31 < AlbireoX`Laptop> FesterCluck: It's the same code and the same version of all libraries... :/
01:32 < FesterCluck> Are you sure the DBRefs made it into db #2?
01:32 < FesterCluck> Basically, there's no good reason they shouldn't work
01:32 < AlbireoX`Laptop> It says the type is ObjectId("...")
01:32 < FesterCluck> DBRefs are just another object, with the id of the other object
01:33 < FesterCluck> There's not even any real linking there
01:33 < FesterCluck> It all has to do with the libraries reading the data
01:33 < FesterCluck> Well, yeah, DBRefs are ObjectID's
01:33 < AlbireoX`Laptop> when I do printjson(db.games.find().toArray()) it says the object I want to populate is an ObjectId
01:33 < FesterCluck> Yup
01:33 < AlbireoX`Laptop> but it doesn't populate
01:33 < FesterCluck> That's how Mongo works
01:34 < AlbireoX`Laptop> no, i mean in mongoose it doesn't populate
01:34 < FesterCluck> If you want it to populate, you need to use db.games.populate().toArray()
01:34 < AlbireoX`Laptop> I know, i mean in Mongoose
01:35 < AlbireoX`Laptop> FesterCluck: http://pastebin.com/rzbTeB7E
01:35 < AlbireoX`Laptop> that's what i'm doing
01:35 < AlbireoX`Laptop> and rankings.player doesn't populate
01:35 < FesterCluck> Are both machines using the same mongodb driver?
01:36 < AlbireoX`Laptop> Yes
01:36 < AlbireoX`Laptop> version 2.0.6
01:36 < mattrobenolt> isaacs: 404 on https://new.npmjs.org/profile/_edit
01:36 < AlbireoX`Laptop> mongod --version shows the same thing on both
01:36 < mattrobenolt> Actually, technically a 500.
01:36 < AlbireoX`Laptop> wait, git version isn't the same though
01:37 < FesterCluck> :-)
01:37 < AlbireoX`Laptop> i wonder if that's the problem? o_0
01:37 < FesterCluck> Now, mongodb does NOT automatically do this resolution
01:37 < FesterCluck> but some /drivers/ for nodejs do.
01:38 < FesterCluck> hmm... is this coffeescript?
01:38 < AlbireoX`Laptop> yes
01:40 < AlbireoX`Laptop> FesterCluck: http://github.com/simplyianm/savagegames/ is my code if you want it
01:40 < AlbireoX`Laptop> I think i'm using the same drivers, but I thought Mongoose was the one that did the populating
01:41 < FesterCluck> It will, you just need to use the right method
01:41 < FesterCluck> .find() wont do it
01:41 < FesterCluck> Then again, you might just want to install Mongoose-dbref
01:44 < AlbireoX`Laptop> FesterCluck: I'm using populate in mongoose
01:46 < FesterCluck> AlbireoX`Laptop: it looks like 2.7.1 is the stable one, you have that on both?
01:48 < AlbireoX`Laptop> Ians-MacBook-Pro:savagegames-site simplyianm$ mongod --version
01:48 < AlbireoX`Laptop> db version v2.0.4, pdfile version 4.5
01:48 < AlbireoX`Laptop> FesterCluck
01:49 < FesterCluck> do this:
01:49 < FesterCluck> npm info mongoose
01:50 < AlbireoX`Laptop> FesterCluck: 2.7.1
01:50 < AlbireoX`Laptop> yeah, i have that on both
01:50 < AlbireoX`Laptop> sorry, thought you were talking about mongo
01:53 < FesterCluck> it's all good
01:54 < FesterCluck> Is it possible that the objectid's no longer match on the second system?
01:55 < jtnt> anyone added authentication to a local cloud9 install?
01:57 < AlbireoX`Laptop> FesterCluck: No, the ids do match
01:59 < AlbireoX`Laptop> it's very, very strange o_0
01:59 < toothr> why is #libuv +i?
02:02 < FesterCluck> toothrot: I'm betting is has to do something with privacy & sanity
02:17 < toothrot> FesterCluck, yeah... probably.. i'll have to follow development from afar i suppose
02:18 < FesterCluck> lol
02:18 < FesterCluck> libuv is node's abstraction layer, yeah?
02:20 < AlbireoX`Laptop> this bug is so annoying -_- I think i'll resort to doing queries for each thing
02:20 < AlbireoX`Laptop> unless there is any other way, is there FesterCluck?
02:20 < FesterCluck> lol
02:24 < FesterCluck> AlbireoX`Laptop: http://docs.mongodb.org/manual/applications/database-references/
02:25 < AlbireoX`Laptop> FesterCluck: I already know i have a dbref
02:25 < AlbireoX`Laptop> just wondering, what do you use for mongodb?
02:25 < AlbireoX`Laptop> and node
02:26 < FesterCluck> mongoose, mongoose-types, mongoose-misc, and mongoose-admin
02:27 < AlbireoX`Laptop> for populate, do you use similar code as me or what?
02:28 < FesterCluck> So, to use populate, you just have to add an extra line for the object you're resolving
02:29 < FesterCluck> db.games.find().populate('players')
02:29 < FesterCluck> That would find all "games" documents, and resolve their child "players" DBRef to it's actual object.
02:30 < FesterCluck> If you are serious that the driver you use on the other machine auto-resolves, I'd suggest hunting the driver
02:32 < CIA-93> node: Ben Noordhuis v0.8 * rf315029 / configure : build: rename openssl configure switches - http://git.io/-YvZSw
02:34 < alejandromg> what are the risk or adventages of compiling node with the `--without-snapshot` flag?
02:42 < styol> othiym23: around by chance?
03:00 < bnoordhuis> alejandromg: node will start up a little more slowly
03:00 < bnoordhuis> not that the difference is noticeable by your average human
03:04 < alejandromg> bnoordhuis: right! I'm getting "pure virtual method called" and i found a issue where you (btw) suggest that
03:45 < cshop> hello
03:46 < cshop> has anyone ever installed dnode?
03:46 < cshop> dnode-php? anyone?
03:51 < substack> cshop: installed? lots of people
03:51 < substack> just npm install dnode
03:51 < substack> not sure about dnode-php though, I haved used that
03:52 < substack> but it seems popular with lots of folks
04:22 < nykac_> what is the prefered method of using multiple cores w/ node? The built in cluster module, or the learnboost cluster module?
04:23 < Karmaon> nykac, built-in
04:23 < Karmaon> vmware player runs ubuntu so poorly i'm thinking about developing on windows
04:24 < nykac_> Karmaon: thanks, I was leaning that way as well.
04:24 < Karmaon> although it is experimental
04:25 < nykac_> should one spawn a lot of threads if your cpu is fast enough?
04:25 < Karmaon> nykac, learnboost cluster supports only up to 0.4.x
04:25 < Karmaon> we're up to 0.8.x now
04:26 < Karmaon> nykac, a thread for how many cpu cores you have
04:28 <@Nexxy> nykac_, in general spawn 1 instance per core
04:30 < MadonnaIsMyMommy> A PHP programmer, auto executive, and topless dancer walk into a bar.
04:30 < MadonnaIsMyMommy> ...And the bar tender says to the PHP guy "Hey man, put a shirt on! No one wants to see that."
04:32 < nykac_> 21:29 < MadonnaIsMyMommy> A PHP programmer, auto executive, and topless dancer walk into a bar.
04:32 < nykac_> 21:29 < MadonnaIsMyMommy> ...And the bar tender says to the PHP guy "Hey man, put a shirt on! No one wants to see that."
04:32 < nykac_> sry
04:32 < nykac_> laptop.
04:38 < phillyDesignr> anyone use mongohq?
05:07 < denysonique> If I compressed/minified my node.js code + the modules, would that reduce the memory footprint?
05:08 <@Nexxy> no
05:08 < timetunr> lol
05:08 <@Nexxy> maybe the require cache
05:08 < denysonique> at least by some kb it would
05:15 < timetunr> any opinions from the node community for this: http://jsperf.com/fors-vs-while/28 ?
05:19 < unomi> timetunr, any particular angle?
05:19 < timetunr> firefox 12 ?
05:19 < timetunr> ops
05:19 < timetunr> vs chrome
05:19 < timetunr> aka v8
05:23 < unomi> timetunr, nothing would please me more than to see further leapfrogging in the js engine arena
05:24 < gkatsev> timetunr: dont worry about it. just use whatever feels best for whatever you're doing at the moment. Then when you are done with your app, if it is slow and has problems, profile it and then optimize. There's no point in always using the simple reverse while loop
05:24 < unomi> timetunr, but jsperf in an of itself is not all that useful for capturing relative performance across browser versions of different clients
05:25 < unomi> it could be that chrome is skewed by all those slow macs :p
05:25 < gkatsev> by those kernel panics :P
05:26 < unomi> timetunr, have you tried doing runs on Chrome vs firefox on the same machine?
05:26 < timetunr> not yet. updating firefox then going to try
05:27 < timetunr> but yeah I agree gkatsev
05:28 < gkatsev> running it in chrome 20 to compare
05:28 < gkatsev> hm... I like how google decided to install chrome 32bit on my 64bit linux :/
05:28 < gkatsev> at least, that's what browserscope is seeing
05:29 < timetunr> there's a chrome 64 bit?
05:29 < tim_smart> timetunr: Were they all run on the same computer?
05:29 < gkatsev> firefox 15 completely beat chrome 20.
05:30 < gkatsev> I ran both on the same computer
05:30 < tim_smart> Cool, time for Google to hit back
05:30 < tim_smart> Then our node will get faster :p
05:30 < gkatsev> hehe
05:30 < unomi> well, they got their VM guys working on Dart
05:30 < timetunr> wtf firefox beat chrome dead
05:31 < unomi> thats pretty awesome.
05:31 < unomi> 3 cheers for browser tech progress
05:31 < gkatsev> firefox 15 (aurora build) is pretty fast
05:32 < unomi> so .. ahem.. spidernode?
05:33 < timetunr> well. firefox 15+ for browsing it seems. will remind myself to inform my non-techy friends to think about switching back lol
05:33 < gkatsev> heh
05:34 < timetunr> chrome for dev is awesome though
05:34 < timetunr> definitely not switching for dev
05:34 < unomi> might even get some more momentum behind the nginxJS project
05:35 < gkatsev> timetunr: watch some of the google io videos about the new tooling that's available. It's really awesome
05:35 < tim_smart> I'm more excited about luvit than javascript right now
05:36 < unomi> wutz luvit?
05:36 < tim_smart> luajit kicks ass in lots of places
05:36 < unomi> ah
05:36 < tim_smart> unomi: lua + libuv
05:36 < unomi> never did try lua
05:36 < gkatsev> ugh, wtf, I can't run stable and unstable on linux at the same time? LAME
05:36 < unomi> gkatsev, for FF?
05:36 < gkatsev> chrome
05:36 < unomi> sure you can
05:36 < unomi> I do
05:36 < unomi> but I use chromium for stable
05:37 < gkatsev> ah
05:37 < unomi> in any case you can do it if you build your own unstable and have it in a prefix
05:37 < gkatsev> I installed google-chrome-unstable and it overrode google-chrome
05:37 < tim_smart> The discussion on the es-discuss mailing list is starting to scare me
05:38 < unomi> es-discuss is completely disconnected from the reality of web development in my opinion
05:38 < tim_smart> Yeah, yet they still get to decide the future of the ecma spec.
05:39 < gkatsev> that's why angus croll started the github thing
05:40 < unomi> the whole grawlix / who can get their name in the books with new syntax contortions is painful
05:41 < unomi> the voting aspect of it is good, as long as it doesn't turn into a popularity thing.
05:42 < unomi> I just want a first class event system
05:44 < unomi> I don't get their obsession with classes or function syntax
05:47 < tim_smart> unomi: Built in event emitter you say?
05:48 < tim_smart> I would argue event stuff is user-land
05:52 < unomi> tim_smart, yes built-in event emitter as a starting point
05:53 < tim_smart> Please no :(
05:53 < tim_smart> Just give a solid, simple language with the browsers providing some decent standard functions
05:53 < unomi> tim_smart, I absolutely agree about userland stuff, but relative to Classes I would say that events are a better place to start
05:55 < unomi> tim_smart, can't disagree with you there, but since it seems that the es-discuss gang is hell-bent on adding bells and whistles, might as well make them ring rue
05:55 < unomi> s/rue/true/
05:56 < tim_smart> I'm glad I only really code servers, and not browser stuff then.
05:56 < unomi> as ryah said "I wish they would stop being all oooh Fancy Pants"
05:56 < tim_smart> I can switch languages :p
05:57 < tim_smart> unomi: Browsers should just give as some alternate vm's to run scripts with.
05:57 < unomi> yes, that is what I urged Brendan to pursue 
05:58 < unomi> He was fairly adamant that this had been an option explored and abandoned
05:58 < unomi> shrug
05:59 < unomi> tim_smart, what do you have against Events?
06:00 < unomi> meanwhile: https://status.heroku.com/incidents/386
06:05 < benatkin> I thought npm was on IrisCouch, and IrisCouch was on AWS East. Whatever the case, good to see that npm is still up!
06:10 < tim_smart> unomi: Nothing against events, I'm against them being a part of the ecma spec
06:11 < tim_smart> ecma should just be functions, strings, arrays, numbers, objects etc
06:11 < tim_smart> With a decent way to use the awesome prototypical inheritence.
06:12 < tim_smart> Obviously for, while, if etc. is part of that too.
06:15 < tim_smart> I guess they need a good dictator like node did to say yay or nay all the time.
06:15 < denysonique> Has anyone written a deployment framework for Node.js? Such as Capistrano
06:17 < konobi> crapistrano? what's that?
06:26 < denysonique> konobi: something like Jake tasks which deploy to the server
06:26 < denysonique> konobi: a deployment framework which would be similar to Jake
06:27 < denysonique> http://howtonode.org/intro-to-jake -- jake seems to be very similar to rake b tw
06:36 < Industrial> I used substack's Seq to implement this function that recursively loads each node in each dir in parallel, eventually returning the dir tree as a nested object so I can 'res.send templates.admin.index env'
06:36 < Industrial> https://gist.github.com/e700edb9c7da640aae09
06:37 < Industrial> but I'm not sure I like the Seq version any better then the CoffeeScript one :\ Did I do it right?
06:38 < Industrial> erm, I mean this one; https://gist.github.com/10de62889b422eea0940/f0e9d35df560b6129280288929bce432ab7058c0
06:53 < konobi> denysonique: obviously you missed the joke =0)
06:54 < konobi> Industrial: there's fstream too
07:19 < AlbireoX> Hi guys, this is a general question, but how could I make any host that isn't a certain host redirect to my main host?
07:19 < AlbireoX> Like redirect www. to just the normal
07:22 < benatkin> AlbireoX: here's how it works https://en.wikipedia.org/wiki/Virtual_host#Name-based
07:22 < benatkin> AlbireoX: and here's a connect middleware http://www.senchalabs.org/connect/vhost.html
07:25 < marcosmlopes> Hey node.js is suitable for an HTML5 streaming server? Like icecast and so on? I want to implement in node.js because i like the simplicity of using javascript on server-side.
07:26 < konobi> marcosmlopes: should be doable... voxer is a node app
07:27 < benatkin> marcosmlopes: yes. node is fast enough for things that are IO-bound and its buffers handle binary safely
07:27 < marcosmlopes> Cool! I was thinking in use ffmpeg to publish to the server. And the server republish to the clients
07:28 < marcosmlopes> what do you guys think?
07:31 < benatkin> marcosmlopes: sounds likely to work
07:31 < marcosmlopes> nice ;) Thanks a loot guys. I love this community
07:32 < benatkin> marcosmlopes: you're welcome. seems the real authorities are asleep. I hope I'm right about what I told ya :)
07:33 < marcosmlopes> benatkin: thanks
07:37 < AlbireoX> thanks benatkin
07:40 < AlbireoX> benatkin: that source was just what i needed
07:41 < benatkin> AlbireoX: I had the same problem a while back, so it was easy for me to track it down
07:58 < f> hello
07:58 < f> too quiet
08:03 < mandric> howdy
08:04 < mandric> wondering if anyone might have a tiny linux vm (minimized) with only node installed...
08:05 < mandric> i mean a custom linux vm with only node deps installed (stripped down)
08:06 < firebalrog> yes
08:07 < mandric> do you have a torrent link possibly? do you distribute/share it?
08:07 < firebalrog> well kinda using 128m vm 
08:08 < mandric> sweet i'm looking for tinyest i can find
08:08 < firebalrog> sorry no built myself from base debian min install
08:08 < saamyj> :isaacs I'm hacking on the npm-www a bit, do you know why I get an auth token expired error? And how can I get rid of it?
08:08 < mandric> firebalrog ah ok yea easy enough i guess
08:23 < spolu> hi guys is there a secure way to limit a server inbound connections to the local host?
08:24 < tim_smart> spolu: Check the remote address?
08:24 < spolu> tim_smart: is this secure?
08:24 < tim_smart> spolu: Only if you don't have a load balancer in front
08:25 < spolu> tim_smart: I don't get your point?
08:26 < tim_smart> Basically, only if your node app is recieving the remote connections
08:26 < tim_smart> If you proxy or http forward you would only get the ip address of the proxy / balancer
08:27 < tim_smart> But the best way is to probably make sure the port is blocked with a firewall
08:27 < spolu> tim_smart: ok I see. more like a reverse proxy running locally.
08:28 < tim_smart> If it is all on the one machine, you can use unix sockets
08:28 < spolu> tim_smart: yep unfortunately not possible in the context I'm in: basically the idea is to run a server for a web-based editor (don't' want to wrap it in a native app)
08:28 < spolu> tim_smart: unfortunately probably not supported by the browser :)
08:30 < tim_smart> Ah I see, then just take a look around http://nodejs.org/api/net.html#net_socket_remoteaddress
08:30 < tim_smart> request.connection.remoteAddress etc
08:31 < spolu> I guess 127.0.0.1 => loopback interface and cannot really be faked… but I'm not 100% sure
08:32 < deoxxa> you could just listen on localhost
08:32 < spolu> deoxxa: how would I do that?
08:32 < tim_smart> Yeah, or listen to local connections ^
08:32 < tim_smart> listen(port, '127.0.0.1')
08:33 < deoxxa> spolu: i would start by reading the comprehensive api documentation available at nodejs.org/docs/latest/api/all.html
08:33 < spolu> deoxxa: I know it pretty well. Just wondering about a corner case here
08:34 < deoxxa> it appears your and my definitions of "pretty well" are not the same
08:34 < spolu> deoxxa: right fine
08:34 < deoxxa> that's a pretty basic part of the http (or net) createServer api
08:35 < spolu> deoxxa: you are right please excuse my ignorance
08:35 < tim_smart> deoxxa: host isn't really explained. It assumes that the reader knows about the underlying syscalls and constants
08:36 < deoxxa> http://nodejs.org/docs/latest/api/all.html#all_server_listen_port_hostname_backlog_callback
08:36 < deoxxa> server.listen(port, [hostname], [backlog], [callback]) << seems really, really clear to me
08:37 < deoxxa> spolu: not trying to be condescending by the way - i've just seen a lot of people ignore the documentation for no good reason and i like to hammer it into new users that the api docs are the first place you should go if you have questions about core functionality
08:37 < tim_smart> Clear to me as well, but I know the concepts of binding to ports
08:37 < tim_smart> For someone new to linux that wouldn't be clear.
08:38 < tim_smart> But they shouldn't be programming I guess
08:38 < spolu> tim_smart: that's my point what I needed was more to refresh my knowledge of basic TCP concepts rather than the nodeJS api
08:38 < spolu> anyway
08:38 < spolu> thanks guys! 
08:38 < spolu> :)
08:39 < spolu> tim_smart deoxxa: plus I'm still not completely convinced it's 100% secure. but that has nothing to do with nodeJS...
08:39 < deoxxa> spolu: define secure
08:40 < tim_smart> spolu: Read up on ip spoofing and its limitations and you should be convinced.
08:40 < spolu> deoxxa: only connections going through the loopback interface would be accepted
08:40 < deoxxa> correct
08:40 < deoxxa> unless your routing is -incredibly- broken, that would be only local clients
08:41 < deoxxa> and i mean broken to the point where you probably can't accept connections from anywhere else anyway
08:41 < spolu> deoxxa: sounds great then!
08:41 < tim_smart> spolu: Basically it is as secure as the user (you)
08:41 < spolu> deoxxa: yep
08:41 < spolu> tim_smart: that's the security model I'm looking for
08:42 < tim_smart> Don't go giving out your private keys for your ssh server etc :)
08:42 < spolu> tim_smart: :)
08:42 < deoxxa> spolu: http://nodejs.org/docs/latest/api/all.html#all_server_listen_path_callback << might be relevant
08:42 < deoxxa> i think that uses named pipes on windows as well, but don't quote me on that
08:43 < spolu> deoxxa: yep definitely but the client is a browser unfortunately :)
08:43 < deoxxa> ah
08:43 < deoxxa> looks like localhost is the way to go then
08:43 < spolu> deoxxa: looks like it indeed
08:43 < deoxxa> what's that thing that adobe just released?
08:43 < spolu> brackets
08:43 < spolu> ?
08:43 < deoxxa> yeah, that's the one
08:43 < deoxxa> sounds similar
08:43 < spolu> they embed into a native app
08:44 < deoxxa> i had a bit of a play with brackets, it's actually quite nice
08:44 < deoxxa> yeah
08:44 < spolu> solves the pb but kind of a pain in the ass
08:44 < spolu> deoxxa: http://github.com/spolu/envi not quite finished yet at all but if you like vi and dwm, I hope you'll give it a try :)
08:44 < deoxxa> i've used cloud9 and various other ACE things, but in the browser you still have that whole "i'm in a browser, keyboard shortcuts are going to be weird" thing working against you
08:45 < deoxxa> even if you can get them to work perfectly, it still seems weird using them
08:45 < tim_smart> spolu: Why should I use it over my cli tools and vim?
08:45 < deoxxa> that's just me though, probably
08:45 < tim_smart> Sell me.
08:45 < spolu> deoxxa: that's exactly the point! I'm rewriting the vi mode entirely and it starts to feel natural
08:45 < spolu> deoxxa: and the point is to edit local files
08:46 < spolu> tim_smart: the goal is 1- dwm + vi is awesome 2- you stream your edits to your teammates or publicly (if working on node as an example) 
08:46 < deoxxa> i'm yet to see a good implementation of that sort of thing yet
08:46 < spolu> tim_smart: basically if you were to use envi later on, and hacking node source code, I could plug into you and see what you are working on
08:46 < spolu> deoxxa: which part 1 or 2
08:46 < deoxxa> the second part
08:47 < spolu> deoxxa: yep right
08:47 < deoxxa> i mean they've all been technically fine
08:47 < deoxxa> but i just can't really see the purpose... something's missing
08:47 < spolu> deoxxa: and I decided read-only is the way to go. collaborative edition is kind of broken I agree
08:47 < deoxxa> yeah, definitely
08:47 < tim_smart> Streaming changes doesn't work, because it is hard to see context to what the developer is thinking
08:47 < deoxxa> ^^ this
08:48 < spolu> tim_smart: unless it's your teammate and you work remotely on the same project
08:48 < tim_smart> Diffs work in that context though
08:48 < deoxxa> maybe pair it with a voice chat or something
08:48 < deoxxa> then it could be useful
08:48 < spolu> tim_smart: when I say diffs I mean you see what he sees
08:48 < spolu> deoxxa: yep but Skype is good at that :)
08:48 < deoxxa> true
08:48 < tim_smart> So you should make sure you show a git diff for the last 5 minutes or something
08:49 < spolu> tim_smart: I'm more thinking streaming the keys typed in
08:49 < spolu> tim_smart: you really see what the guy does
08:49 < deoxxa> might it not be easier to add this functionality to vim, as opposed to recreating the vim experience in a browser?
08:49 < tim_smart> Sure, but I don't think in key strokes.
08:49 < deoxxa> for the server side, at least
08:49 < tim_smart> I think in logical blocks
08:49 < spolu> deoxxa: totally
08:50 < deoxxa> like, a vim user isn't going to switch away from vim to code
08:50 < deoxxa> but they might be willing to install a plugin
08:50 < spolu> tim_smart: I totally agree with you. but when working on a same project with a coworker you kind of get what the guy is doing by looking at his screen right?
08:50 < tim_smart> Only if I really know the file he is working on well
08:50 < spolu> deoxxa: you are probably right but it's all about having fun as well :)
08:51 < spolu> tim_smart: that's true. I mean it's not completely perfect and all, but I think it might be useful for remote teams
08:51 < tim_smart> I think something that could work quite nicely is live streaming your local git repo
08:51 < spolu> tim_smart: and it's still a total experiment, so we'll see :)
08:52 < spolu> tim_smart: how would you consume the info?
08:52 < deoxxa> gitteh was looking promising... not so much now
08:53 < tim_smart> It would show diffs against HEAD as they edit etc
08:53 < tim_smart> Present it nicely and it would be pretty cool.
08:53 < spolu> tim_smart: and you would always see the total diff across files right?
08:53 < spolu> tim_smart: so that you get the context
08:54 < tim_smart> spolu: Similar to a live git pull request I guess
08:54 < spolu> tim_smart: yep
08:54 < spolu> tim_smart: I see your point it's very interesting!
08:54 < tim_smart> Then you could comment on things as changes are being made
08:55 < tim_smart> I just throwing ideas out here
08:55 < spolu> tim_smart: the only downside I see to that is that a bunch of programmers (me included) are not very attentive to their "commit structure"
08:56 < tim_smart> commits won't matter, it would just be a diff against master or something
08:56 < deoxxa> i am, but only in batches
08:56 < spolu> tim_smart: but it would be naturally incentivized here
08:56 < deoxxa> i'll do a whole bunch of `git add -i; git commit;' sequences
08:56 < spolu> tim_smart: yep indeed
08:56 < spolu> deoxxa: do you rebase?
08:56 < deoxxa> nope
08:57 < deoxxa> though i don't work with other people very often
08:57 < deoxxa> i'd say 95% of my commits are never seen by anyone else
08:57 < deoxxa> ...which sounds kind of lonely now i think about it
08:57 < spolu> deoxxa: me neither… but tim_smart is right. a diff against a remote or something could be useful… most people use github with a remote these days right?
08:57 < spolu> deoxxa: :)
08:58 < spolu> anyway a whole lot of fun to have hacking stuff around that subject :)
08:58 < deoxxa> mmm definitely
08:58 < spolu> deoxxa tim_smart thanks for your ideas! :)
08:59 < tim_smart> spolu: Make it work by default with file system watchers etc. so you can use any editor, and then slowly make plugins and other tools to add realtime support.
09:01 < tim_smart> If you package it and present it well, you could turn it into a startup project aimed at small teams.
09:01 < tim_smart> Wack on issue tracking and you would have a pretty cool system for project management.
09:02 < tim_smart> team communication.
09:02 < tim_smart> *and
09:03 < spolu> tim_smart: :)
09:04 < spolu> tim_smart: well I find issue tracking kind of solved 
09:04 < spolu> tim_smart: wouldn't want to compete there
09:04 < tim_smart> Well yeah, so maybe some sort of api for integration
09:04 < spolu> tim_smart: but a nice tool for realtime code review could make sense
09:04 < spolu> tim_smart: for startups
09:05 < spolu> tim_smart: yep
09:05 < tim_smart> I think it would be the better solution compared to live code editing session.
09:05 < spolu> tim_smart: totally agreed
09:06 < tim_smart> Trying to fit two minds into a small box is limiting.
09:06 < spolu> tim_smart: that's a nice summary of how it feel to use live coding solutions :)
09:08 < AlbireoX> Hi, what's the best way to test if your UDP packets are actually sending? I could almost swear that there's a bug in dgram.
09:12 < deoxxa> AlbireoX: tcpdump
09:13 < AlbireoX> deoxxa: it's UDP?
09:13 < stride> that's supported by tcpdump
09:13 < deoxxa> don't let the name fool you
09:14 < AlbireoX> oh, thanks
09:17 < AlbireoX> deoxxa: tcpdump isn't displaying anything with sudo tcpdump -vv... is there a #tcpdump or something? :p
09:18 < deoxxa> there is! you simply type `man tcpdump' into your terminal! :D
09:18 < shanse> sudo tcpdump -vv -i lo0 udp
09:19 < AlbireoX> lol
09:22 < AlbireoX> thanks shanse
09:22 < AlbireoX> Well, either I figured out my app doesn't work or idk how to use tcpdump
09:22 < deoxxa> AlbireoX: what version of node, and what platform?
09:22 < AlbireoX> node v0.8.0 on mac osx
09:23 < deoxxa> i've heard people talk about UDP bugs for a while now, but i've never been able to confirm them myself
09:23 < deoxxa> hmm, what version of OS X?
09:23 < AlbireoX> Lion
09:23 < deoxxa> hm
09:23 < AlbireoX> Funny thing is, I didn't write the code
09:23 < AlbireoX> someone else did and even has tests
09:23 < AlbireoX> https://github.com/simplyianm/node-mcquery
09:24 < AlbireoX> AFAIK the Minecraft protocol hasn't even changed since the guy wrote this.
09:24 < deoxxa> well that's not the minecraft protocol - that's the gamespy query protocol
09:24 < AlbireoX> ...?
09:24 < deoxxa> the actual minecraft smp protocol is a whole other can of worms :P
09:25 < deoxxa> the "query" protocol in the official minecraft server is actually the gamespy query protocol
09:25 < AlbireoX> interesting :o
09:25 < deoxxa> sorry, gamespot
09:25 < deoxxa> is that the one you were looking for?
09:26 < AlbireoX> sure.. i guess?
09:26 < AlbireoX> I'm using what i got from that link
09:26 < deoxxa> i only ask because i've seen people confused before about which protocol to use
09:26 < AlbireoX> and all of a sudden the tests are failing on both mac and centos
09:26 < deoxxa> hm that is odd
09:27 < AlbireoX> yeah :/
09:28 < deoxxa> apparently it needs the TEST_HOST and TEST_PORT environment variables defined
09:28 < deoxxa> otherwise it doesn't have a server to connect to
09:28 < AlbireoX> they are defined
09:28 < AlbireoX> localhost and 25565
09:28 < deoxxa> ok
09:29 < AlbireoX> i have a server running on my comp
09:29 < deoxxa> oh
09:29 < deoxxa> oh ok i see yep
09:29 < deoxxa> hm
09:29  * deoxxa doesn't know :(
09:29 < AlbireoX> me neither >:(
09:30 < AlbireoX> i might resort to setting up an apache server just so i can query these servers
09:30 < AlbireoX> i really am starting to think it's a bug in node, though it's really, really hard to believe
09:32 < AlbireoX> ://
09:32 < AlbireoX> dangit this will be really annoying -_-
10:08 < dsirijus> so, i have this node.js app with http-proxy that basically exposes all my other apps over 80 & 443 out, all apps run with forever...
10:08 < dsirijus> so, when i add new app, i need to change the proxy app, stopping it and running it again?
10:08 < dsirijus> rendering all other apps DOWN as i do it?
10:09 < dsirijus> that can't be true :)
10:09 < unomi> anyone have advice on where to migrate an app that is currently on Heroku?
10:09 < dsirijus> unomi, haha, the outages?
10:10 < unomi> dsirijus, the app hasn't responded in ~8hours
10:11 < dsirijus> i've been fine with rackspace, but i've never needed anything above 2GB of ram
10:11 < unomi> 'outages' is a pretty mild term for it
10:11 < dsirijus> and i have stuff both on us east and eu west with it, so i'm pretty much fine with it
10:12 < unomi> more critically, the app in question has an MVP review on Monday 
10:13 < dsirijus> unomi, i think azure is closest to heroku, as long node.js is concerned
10:13 < dsirijus> but haven't used it
10:13 < unomi> yeah, I think the client would prefer being able be within a 'managed' environment
10:13 < dsirijus> there's sort of 'managed' at rackspace, but haven't used it
10:14 < unomi> that would probably be something they would find 'reassuring', can't say I've tried it myself though
10:14 < unomi> anyone here used Azure?
10:15 < dsirijus> so, how about my problem? killing main http-proxy kills service to all apps?
10:18 < unomi> dsirijus, why do you have to restart it? 
10:18 < unomi> can't you make it so it can load in the config file on the fly
10:19 < dsirijus> unomi, i've just started with node yesterday
10:19 < dsirijus> http://pastie.org/4176333
10:19 < unomi> not sure how much you have in there besides url routes -> url:ports
10:20 < dsirijus> that last server is just for testing, i don't have actual apps yet there
10:21 < unomi> dsirijus, so imagine that you have an array or object literal populated with httpProxies
10:21 < unomi> and they aren't defined within the code, but in a config file that you read in.
10:22 < unomi> reloading the config file will remove the ones not in the file, leave the ones that are already instantiated, and create the ones in the file but not instantiated
10:22 < dsirijus> unomi, any examples out there for it?
10:23 < dsirijus> i'm new to javascript too :)
10:24 < dsirijus> "i've yesterday fired everyone from my company" is the explanation for my ineptness with tools i need to get in production by monday :)
10:24 < unomi> dsirijus :)
10:25 < dsirijus> node.js, javascript and mongodb and hosting it all in production mode in a weekend, sounds fun
10:25 < dsirijus> really is :)
10:25 < unomi> http://search.npmjs.org/_list/search/search?startkey=%22proxy%22&endkey=%22proxyZZZZZZZZZZZZZZZZZZZ%22&limit=25
10:26 < unomi> Can't really steer you better than that
10:27 < dsirijus> “We live in a society absolutely dependent on science and technology, and yet have cleverly arranged things so that almost no one understands science and technology. That’s a clear prescription for disaster.” Carl Sagan
10:28 < unomi> Smart guy.
10:28 < dsirijus> unomi, https://github.com/remy/proxy
10:28 < dsirijus> that seems like it should do it
10:28 < unomi> dsirijus, I wish I could help you more, but unfortunately on a mission of my own at the moment
10:29 < dsirijus> no, just thinking out loud
10:29 < dsirijus> it's fine :)
10:29 < dsirijus> you've steered me in perfectly fine direction
10:29 < unomi> I think however that you should consider why you using node to proxy rather than proven tooling for just that
10:30 < dsirijus> unomi, zen thing, i guess
10:30 < dsirijus> i had it running yesterday perfectly fine with nginx :D
10:30 < unomi> unless you need websockets on all of them etc. nginx seems fairly robust for that kind of thing
10:30 < unomi> haha
10:31 < unomi> procrastineering.
10:31 < dsirijus> sure
10:31 < unomi> well, gotta keep it fun and interesting, I can related completely.
10:31 < unomi> s/related/relate/
10:31 < unomi> happy hacking
10:32 < dsirijus> thanks
10:32  * unomi knuckles down
10:51 < pancake> do npm obeys git contents to select the files to publish?
11:01 <@konobi> mwuahahaha... phear my wrath
11:24 < augustl> will any of the FS APIs that takes a callback fail if the callback is not provided?
11:25 < augustl> I know it's silly to perform a stat without havinga callback, it's just a curiousity ;)
11:26 < RLa> they should not
11:44 < space_> hello
11:46 < spaceSub> Is this the right place to ask stuff about npm?
11:58 < deoxxa> spaceSub: it's not the wrong place
11:59 < Industrial> Anyone use Hogan templates with Express 3?
11:59 < Industrial> I can't get partials to work. They are just not rendered (though present)
12:00 < Industrial> eg res.render('a') and in a.html I have a {{> b}}, b is never printed.
12:20 < unomi> anyone here fiddled with sourcemint?
12:22 < deoxxa> UGH
12:22 < deoxxa> sourcemint can go die in a fire
12:22 < deoxxa> "hey wouldn't it be cool if we could manage dependencies with a command line tool and install them automatically when you pull down a project and if all the modules you needed were on there"
12:22 < deoxxa> "yes it would be, and it's a thing. it's called npm."
12:23 < deoxxa> "yeah wouldn't it be cool? let's make that!"
12:28 < unomi> deoxxa, mhhm, I can kinda dig how they also seem to be wrapping yui-loader client-side functionality into it
12:29 < unomi> but.. right now I am trying to figure out how to change one of the mappings away from a 502 producing nodeload.github.com resource
12:52 < eeemsi> hi there
12:53 < eeemsi> i just noticed https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager … however in the debian section there is a dot behind git clone … why?
12:57 < eeemsi> oh … many compile warnings … …
13:04 < eeemsi> this is what comes out after make test -> http://pastebin.com/MXPp5Qae
13:25 < aliem> eeemsi: the dot behind the clone commad is the target directory (/tmp/build/node in this case) probably node can't, for some reason, listen to the broadcast... are you root?
13:25 < eeemsi> aliem: i am not root … 
13:26 < aliem> try running tests as root, it should work as espected
13:58 < dz0ny> hi anyone else having this problem https://github.com/joyent/node/issues/3319
13:58 < dz0ny> TCP ZeroWindows with net module
14:30 < augustl> I said I would write it myself if it didn't already exist, right? :) https://github.com/augustl/nodejs-sandboxed-fs
14:32  * augustl hopes someone will tell him that a module like that already exists and that he is crazy for writing his own
14:48 < red5> hi guys! 
14:49 < red5> i would like to know if have an alternative driver for mysql ?
14:49 < augustl> having problems with the canonical one?
14:49 < red5> i've tried db-mysql but have problem with db-mysql installation 
14:51 < red5> this the message when i try to install db-mysql -> "sh "-c" "node-waf configure build"` failed with 127"
14:51 < augustl> are the mysql dev packages installed on your system?
14:52 < red5> augustl: good question !!!
14:52 < red5> i'll see!
14:53 < red5> augustl: only libmysqlclient-dev 
14:54 < red5> augustl: is it necessary more than this ?
14:54 < augustl> not sure
14:58 < red5> augustl: i installed nodejs-dev here and works fine. thx
15:12 < Fabryz> Hello, anyone here ever interacted with node and Foursquare realtime API? even with node-foursquare
15:12 < Fabryz> any tutorial to suggest?
15:17 < deoxxa> any reason #libuv is +i?
15:20 < switz> Hey, anyone know how i can disable caching on http.get?
15:23 <@bnoordhuis> deoxxa: err, odd. i can't get in either and i'm supposed to be an op
15:23 < deoxxa> someone fudged the chanserv settings
15:23 < deoxxa> haha
15:23 <@bnoordhuis> yeah, it was piscisaureus
15:26 <@bnoordhuis> isaacs: ping
15:26 <@bnoordhuis> isaac's probably off to nodeconf by now...
15:27 <@bnoordhuis> switz: what do you mean by caching? connection pooling?
15:28 < switz> I'm just trying to figure out the download time of a website... the first time I run this: http://hastebin.com/miquwerice.coffee it always takes 200+ ms more than every time I run it again
15:30 <@bnoordhuis> switz: could be the dns lookup
15:31 <@bnoordhuis> also, a pastebin that doesn't work without javascript enabled...
15:33 < switz> sorry about that
15:33 < switz> well, do you have any suggestions as to the best way to test page load time in node?
15:47 < jamiemill> switz Maybe the connection is kept alive? Looks like you can opt out of connection pooling with agent:false.
15:50 < RushPL> hi guys, I am trying to follow this wiki https://github.com/joyent/node/wiki/How-to-migrate-from-eio_custom-to-uv_queue_work with Node.JS 0.8.1 but I do get "FatalException" not defined, what's the proper way to throw such exception then?
15:57 < CIA-93> node: Ben Noordhuis v0.8 * rf78ce08 / configure : build: handle output of localized gcc or clang - http://git.io/8FgXkw
15:58 <@isaacs> can someone try to /join #libuv and see if you get an invite-only blah blah blah?
15:58 <@bnoordhuis> isaacs: piscisaureus broke it :(
15:59 <@isaacs> bnoordhuis: i +s'd you, so you can fix it
16:00 <@isaacs> bnoordhuis: and if my irc-fu is strong this morning, i undid the +i
16:00 <@isaacs> but i'm not sure.
16:00  * isaacs has weak irc-fu
16:05 <@bnoordhuis> isaacs: yep, works again
16:05 <@bnoordhuis> deoxxa: ^
16:05 <@isaacs> sweet
16:06 < deoxxa> \o/
16:07  * isaacs to PDX!
16:08 <@bnoordhuis> have a good trip, isaacs
16:41 < RushPL> I would like to throw exception from C++/Node addon,  " Local<Value> arg1(args[0]);   if(!arg1->IsFunction()) { node::FatalException(...) "  - but I kind of do not know how to use the FatalException in such a use case.. what's the alternative?
16:41 < RushPL> if anybody can point me in the right direction.
17:06 < owen1> do people prefer for loop or forEach ?
17:09 < augustl> forEach, om nom
17:09 < augustl> owen1: watch this http://vimeo.com/43382919 :)
17:10 < owen1> augustl: i jush did (:
17:10 < owen1> augustl: but the performance of forEach can be a problem
17:12 < owen1> forEach is about 5 times slower
17:13 < augustl> owen1: how did you measure that?
17:13 < augustl> kind of strange that V8 doesn't make it run as fast or faster
17:13 < owen1> augustl: they guy from the talk did it toward the end of his talk
17:14 < augustl> that's jsbench I think, does he say which browser it runs in?
17:14 < augustl> even if he runs it in chrome, it's possible that the V8 version in node does more optimizations than the browser one
17:14 < augustl> possible on a conceptual level, no idea if it's actually true ;)
17:29 < bingomanatee> hi there
17:30 < owen1> i don't think he mention the browser he runs it on
17:31 < bingomanatee> I have a question about mnogoose.
17:31 < bingomanatee> I am trying to create a tree structured collection with a parent docref.
17:31 < bingomanatee> However some nodes won't have a parent, and their parent property will be null. 
17:32 < bingomanatee> How can I achieve this? currently saving documents with a null parent field fails. 
17:34 < zutto> ..this guy really likes flooding
17:39 < zutto> zchr: done spamming yet?
17:40 < SrPx> Is there any way I kill an openned node.exe process from node.js?
17:43 < emilsedgh_> SrPx: process.kill
17:44 < SrPx> emilsedgh_: I mean kill an openned process
17:44 < SrPx> emilsedgh_: that is, other node.exe, not the node.exe running
17:46 < zutto> you can use child_process.exec();
18:08 < emilsedgh_> SrPx: process.kill takes a PID. you can pass it pid of any process
18:08 < emilsedgh_> although, i have no idea how that works on windows
18:08 < SrPx> =/
18:08 < emilsedgh_> http://nodejs.org/api/process.html#process_process_kill_pid_signal
18:09 < emilsedgh_> many of functions listed on that page say 'only available on posix'. kill does not have that.
18:18 < williamcotton> hey, so I'm brand-spanking new to node… I'm going through some tutorials and what not
18:19 < williamcotton> I came across child_process
18:19 < williamcotton> which is neat, because it allows for a non-blocking call
18:19 < williamcotton> but my question is, how do I just create a child_process that isn't geared around issuing a command?
18:20 < ccowan> Do you have an example?
18:20 < williamcotton> yeah
18:20 < williamcotton> https://gist.github.com/05c46d69d8815cdcfcff
18:21 < jhsto> hey guys, any idea how i can choose all results of split?
18:21 < williamcotton> so like, I'm just slowing it down artificially with that ridiculous loop
18:21 < williamcotton> obviously any other requests would be blocked by that
18:21 < williamcotton> and child_process looks along the lines of what I need to use
18:22 < williamcotton> but again, it seems like it is geared towards commands
18:22 < williamcotton> unless I'm just not understanding it properly
18:23 < williamcotton> like, I just want to put that long running code in a thread, you know? but I don't get the "node way" to do that yet, haha
18:23 < ccowan> child_process is mainly for forking a command (from my understanding). You can also fork a process but I don't think that's the solution you're looking for.
18:23 < ccowan> Have you hit that wih AB
18:24 < ccowan> or http_perf or siege
18:24 < williamcotton> so like, if you run that code, it'll serve up a 4.9kb text file, but it takes awhile to download, because of that for loop… like 10 seconds… and obviously it blocks
18:24 < williamcotton> so how do I make that non blocking?
18:24 < ccowan> are you sure it's blocking?
18:24 < williamcotton> yeah
18:24 < ccowan> I mean obvious for the request it's blocking
18:24 < ccowan> but the server can server more then one request at a time
18:24 < ccowan> so it's not really blocking
18:25 < ccowan> just for that one request
18:25 < ccowan> http://howtonode.org/understanding-process-next-tick
18:25 < williamcotton> well
18:25 < williamcotton> if I open up Chrome and start the download
18:26 < williamcotton> and do the same right after in Safari
18:26 < williamcotton> Safari waits to start the download until Chrome is finished
18:26 < ccowan> now if you want to make that loop not block and for the request to just serve while that loop runs after the request is server the you need to create a function that will cal lthe process.nextTick() method
18:26 < ccowan> In all honesty though I would recommend using something like ExpressJS
18:27 < williamcotton> hmm
18:27 < williamcotton> well, this isn't really going to be for a web app, rather a little streaming download app
18:27 < ccowan> ok
18:27 < williamcotton> which I almost started writing in C but then someone told me to check out node.js
18:27 < williamcotton> haha
18:27 < ccowan> SO you should look at the process.nextTick()
18:28 < williamcotton> ok
18:28 < ccowan> http://howtonode.org/understanding-process-next-tick
18:28 < ccowan> that article should give you what you need
18:28 < williamcotton> sweet, thanks
18:28 < williamcotton> the tutorial I was using makes no mention of nextTick :)
18:28 < ccowan> yeah
18:29 < williamcotton> http://www.nodebeginner.org/
18:29 < williamcotton> which was very informative!
18:29 < ccowan> A hello world server isn't going to do much blocking
18:29 < SrPx> sigh guys nobody?
18:29 < SrPx> )=
18:30 < SrPx> just need access to the list of openned processes and their ids
18:34 < alejandromg> SrPx: like "ps aux"?
18:35 < SrPx> ?
18:36 < alejandromg> type that on your console and tell me if that's what you want 
18:37 < emilsedgh_> SrPx is a windows dude i guess
18:37 < emilsedgh_> and i think he wants node api for getting process list
18:37 < alejandromg> OH! well that isn't going to work then
18:38 < SrPx> sigh I will still manage to change to ubuntu
18:42 < ccowan> I'm not sure how people can develop on Windows (maybe I'm a *nix snob). I watched a friend doing some web development on windows and it looked so painful I had to stop watching him.
18:52 < tom21> hello everyone
18:53 < dmmm> is training.c9.io down for some reason?
18:53 < dmmm> Cloud 9 IDE was touting it as a training site for node.js
18:53 < tom21> I'm a student and began to learn javascript and html because I'm interested in web develoment
18:54 < tom21> I heard about node.js which seems pretty awesome, is it right that it just uses the javascript language to work?
18:54 < jesusabdullah> yes
18:55 < gkatsev> technically it uses C/C++ :P
18:55 < tom21> so I could use my javascript skills for both client and server side right?
18:55 < gkatsev> but yes, it's javascript
18:55 < gkatsev> and yes
18:55 < tom21> wow :)
18:55 < jesusabdullah> yes. It's a little different, especially wrt to modules (or the lack thereof on the client)
18:56 < gkatsev> tom21: it's written on top of the v8 javascript engine
18:58 < tom21> @gkatsev: so I basically will need to install node.js on the server and that's it?
18:59 < gkatsev> yep
18:59 < gkatsev> you can also, of course run it locally and use it for scripting and stuff as well
18:59 < STRML> tom21: Welcome to Narnia
18:59 < gkatsev> STRML: haha
18:59 < jesusabdullah> It's fun for writing little cli apps :)
19:00 < STRML> I love it even for simple scripting (although you can use phantomJS for that). I'm not a wizard with bash, especially if I have to manipulate any data. V8 is certainly "fast enough"
19:01 < gkatsev> node all the scripts
19:01 < jesusabdullah> yyeah, I actually really like node for data munging
19:02 < STRML> Yeah. There are faster alternatives but in the world of cheap computing, programmer time is more valuable
19:02 < tom21> sounds cool. and it's a full replacement for php for example? do you think it has a bright future?
19:02 < STRML> tom21: Yes, that's why we're here :)
19:02 < jesusabdullah> request('some-couchdb-view', function (err, res, body) {  body = JSON.parse(body); /* do whatever */ });
19:03 < jesusabdullah> body.rows.forEach(function (row) { /* */ }); // :)
19:03 < STRML> The typical nodejs codebase (depending on the coder) is much cleaner than the typical PHP codebase. Excuse the sweeping generalization...
19:03 < STRML> And of course very simple to scale. The cluster module is a dream
19:03  * gkatsev has never touched php and will never do so.
19:04 < tom21> ok :)
19:04 < jesusabdullah> I've seen some php but not enough to say I have any actual php skillz
19:04 < jesusabdullah> and, really, I don't see a compelling reason for me to get leet at php right now
19:04 < dsirijus> is there any 'standard' way to deploy node.js applications/servers?
19:04 < STRML> One of my favorite things about node is that it's not very memory-heavy, at least not in my workload. So the 1.5c/hr rackspace server with 256 megs of memory can easily run 4 nodejs instances
19:04 < dsirijus> as in, in /var/www or /srv/www?
19:05 < STRML> dsirijus: I just put mine in /usr/local and run it with upstart
19:05 < tom21> well I'm entering a new world ^^ Is there any other language you would recommand for web development (websites, interactive websites, blogs, even little content like soial media one day ?)
19:05 < dsirijus> STRML, interesting enough, that EXACTLY answered my question
19:05 < dsirijus> STRML, the 4 instance on 256 :D
19:05 < dsirijus> *my next question
19:05 < STRML> Yep. I run two load-balanced servers using cluster.
19:05 < STRML> It handles a pretty impressive number of requests for 3c/hr
19:05 < jesusabdullah> tom21: probably ruby or python if you wanted to branch out.
19:05 < williamcotton> hmm, I'm still missing something with this whole process.nextTick thing… can anyone take a look at this and guide me along the write path? Do I need to be messing with events and pipes? https://gist.github.com/504808998b2c118b2f7e
19:06 < dsirijus> STRML, i need  more information on permissions of dirs where node is to be deployed?
19:06 < STRML> Williamcotton: You hardly ever actually use process.nextTick() in non-tutorial code... check out express
19:06 < williamcotton> I don't need to build a web framework
19:06 < dsirijus> i have a sudoer
19:06 < williamcotton> this is for a streaming downloads server
19:06 < tom21> jesusabdullah: what can they do what node.js can't?
19:07 < STRML> dsirijus: You just have to put it in any directory that your user account has r/w permissions to
19:07 < STRML> I have a www-data user on my instances,
19:07 < STRML> and I make sure that it has permissions to read/write any file in my project by running a script every time I deploy
19:07 < jesusabdullah> tom21: not a whole lot.
19:07 < STRML> hold on let me make you a quick gist
19:07 < dsirijus> STRML, thanks
19:08 < williamcotton> so, where is my thinking going wrong in that example?
19:08 < jesusabdullah> tom21: The biggest caveat with node comes from using binary modules. v8 is optimized for pure js and not for jumping back and forth between c(++) land and js land
19:08 < tom21> but with node.js I won't be able to programm desktop or mobile application? (I will never programm heavy stuff but little apps why not)
19:09 < jesusabdullah> tom21: whereas the ruby and cpython interpreters are such that the barrier is much much less significant. So, if I had a server that I wanted to use, say, blas functions with, I'd probably go python due to the existing scientific computing ecosystem
19:09 < jesusabdullah> tom21: I mean, desktop and mobile are a whole 'nother animal
19:09 < jesusabdullah> tom21: most other ecosystems have more mature desktop ui bindings
19:10 < jesusabdullah> tom21: for native mobile your options are severely constrained, but look at apache cordova if that's what you're into
19:10 < gkatsev> tom21: there are already qt and gtk modules. There are also modules that add a chromium build so you could just use that
19:11 < tom21> ok
19:11 < jhsto> how do i choose all elements of an array?
19:11 < tom21> jesusabdullah: what do you mean with jumping between c++ and js land?
19:11 < STRML> Okay, still here dsirijus?
19:11 < dsirijus> sure
19:11 < STRML> This is the basics of what I use for hosting
19:12 < STRML> https://gist.github.com/3025133
19:12 < jesusabdullah> tom21: So, you have a native module written in c++, right? And the bulk of your code is in js, right?
19:12 < jesusabdullah> tom21: So, that javascript is in a highly optimised vm and the c++ is effectively outside that vm
19:12 < STRML> The update-project.sh file is what I run when I want it to pull from git and restart
19:12 < STRML> the my-project.conf file is a simple upstart script that runs node
19:12 < STRML> and the fixperms.sh file makes sure everything has r/w permissions for the www-data user
19:12 < jesusabdullah> tom21: So every time you send data back and forth between your js code and your c++ code, v8 is jumping through some non-trivial hoops
19:13 < tom21> jesusabdullah: ah ok. A nit new all this. So you won't have a 100% node.js server?
19:13 < dsirijus> STRML, great, thanks
19:14 < STRML> NP, good luck with it. Shouldn't be too difficult.. nice thing about nodejs is that you almost never run into global dependency problems, so it doesn't take much more than this to do it right
19:14 < jesusabdullah> tom21: No, node allows you to write native extensions in c++
19:14 < dsirijus> STRML, i was using forever though, for now
19:15 < STRML> forever?
19:15 < STRML> Oh sort of like nodemon. I get you
19:16 < STRML> Even something like forever or nodemon needs to be started by something like upstart, so that it runs if you reboot the server
19:16 < dsirijus> yup
19:16 < williamcotton> I really basic working node example that shows this in action will probably be all that I need: A HTTP server that makes all incoming requests sleep for 5 seconds before responding with "hello" and is non-blocking
19:16 < dsirijus> upstart cuts the middleman, in your examples
19:16 < tom21> jesusabdullah: ok... initially I thought you write your js files and run them with node to start your server. sorry if I write some confusing stuff, as I said I'm new to all this ^^
19:17 < williamcotton> like, how do I spin things off in to event land?
19:17 < STRML> dsirijus: Yep, 'respawn' is a great thing
19:17 < williamcotton> I'm coming from a paradigm where I would use a thread pool
19:17 < STRML> I run that in concert with cluster so if any child process dies, cluster reboots it, and if the cluster dies, upstart reboots it
19:17 < williamcotton> so I don't really get this yet
19:17 < dsirijus> STRML, a bit too much for me now
19:17 < STRML> Actually,
19:17 < STRML> let me add to the gist, because I love this
19:18 < STRML> cluster is incredible
19:18 < dsirijus> :D
19:18 < STRML> I moved my app from server.js to app.js,
19:18 < dsirijus> STRML, have you tried running many cheap low mem instances with it?
19:18 < STRML> and replaced server.js with what's about to be in the gist
19:18 < STRML> yes
19:18 < STRML> Rackspace 256mem cloud instances are perfect for this
19:18 < dsirijus> ...which is what i'm using
19:18 < dsirijus> bb in 5
19:18 < dsirijus> sorry
19:21 < RLa> williamcotton, if you are using connect or express, use middleware that uses setTimeout to call next middleware
19:22 < STRML> dsirijus: check the gist again
19:22 < RLa> i actually created such middleware for testing
19:22 < STRML> https://gist.github.com/3025133
19:22 < williamcotton> why do you guys want me to be using a web framework?
19:22 < STRML> williamcotton: cuts the boilerplate
19:22 < williamcotton> I'm trying to learn here :)
19:22 < STRML> Well, a lot of projects use it
19:22 < STRML> You'll learn plenty.
19:22 < lrvick> Anyone know a way to avoid this nasty loader block at the top of every plugin in my project and still maintain browser/node compatbility? https://github.com/Tawlk/hyve/blob/modular/src/hyve.twitter.js#L3-15
19:22 < STRML> http://expressjs.com/
19:23 < williamcotton> I won't be building a web app in node, though, that's the thing
19:23 < RLa> williamcotton, if you are doing something very simple, just put your response writing code in setTimeout
19:23 < williamcotton> just a really simple streaming download HTTP server that is reading chunks off of Redis
19:24 < williamcotton> RLa, ah, ala client side JS
19:24 < williamcotton> is there a better way?
19:24 < williamcotton> you mention "if it is simple"
19:24 < williamcotton> :)
19:24 < RLa> not client side, node has setTimeout too
19:24 < williamcotton> yeah, that's what I was referring to
19:25 < RLa> there is not better way
19:25 < dsirijus> STRML, haha, damn simple
19:25 < STRML> dsirijus: Right? Never expected it would be so easy
19:25 < williamcotton> what about using EventEmitters?
19:25 < tom21> And has that html5 and js for mobiles through cordova or similar projects a real future or should I learn a low level language like java (not really motivated...)
19:25 < dsirijus> STRML, though, plenty of stuff with node ends up like that
19:25 < STRML> dsirijus: I threw that into my dev server and ran blitz.io against it... damn near 4x scaling
19:25 < dsirijus> i've just started devving yesterday
19:26 < RLa> williamcotton, you still need something to generate timeout event
19:27 < dsirijus> STRML, leave the gist on live, will ya?
19:27 < STRML> dsirijus: No intention of removing it, it'll be there
19:27 < williamcotton> it is still blocking
19:27 < RLa> what you mean
19:27 < STRML> williamcotton: pastebin code?
19:27 < williamcotton> https://gist.github.com/be62be35e6b983338b28
19:28 < RLa> wtf, that's no setTimeout
19:28 < williamcotton> RLa: what do you mean?
19:28 < RLa> you have sleep() too
19:29 < williamcotton> yeah..
19:29 < marcosmlopes> Hey, someone have an resource explaining how to use node.js stream object? Thanks.
19:29 < williamcotton> what are you trying to say?
19:29 < RLa> why you use that shit instead of using 200 * 100 as setTimeout argument
19:30 < williamcotton> this is all dummy code
19:30 < RLa> hm oh
19:30 < williamcotton> I'm just trying to figure out how to do this
19:30 <@maxogden> marcosmlopes: maxogden.com/node-streams
19:30 < williamcotton> I wanted to simulate responding to a request that will take some time to generate a response
19:31 < RLa> anyway, sleep is not going to do it
19:31 < williamcotton> sleep is not going to do what?
19:31 < williamcotton> simulate a long response?
19:31 < RLa> yes
19:31 < williamcotton> I think it does that just fine
19:32 <@maxogden> sleep will block your CPU long responses shouldnt do that
19:32 < williamcotton> hey max
19:32 < williamcotton> haha
19:32 <@maxogden> long responses just means async io
19:32 <@maxogden> williamcotton: oh wassup
19:32 < williamcotton> I'm finally trying to learn some node, haha
19:32 < RLa> you need to replace that sleep with setTimeout
19:33 <@maxogden> williamcotton: imagine you are querying a database and it takes 30ms, the query isnt going to peg your cpu for 30ms
19:33 < williamcotton> yeah
19:33 <@maxogden> williamcotton: its just going to fire the callback when the data comes back but in the meantime node can handle other requests
19:33 < williamcotton> the thing is, the response being generated, will take some time
19:33 < williamcotton> like, maybe 5 minutes
19:33 <@maxogden> williamcotton: but that sleep function blocks which is bad
19:34 < williamcotton> because the data is being generated as the download is happening
19:34 < saschagehlich> what kind of argument does `localAddress` expect? (Net, HTTP, ...)
19:34 <@maxogden> williamcotton: yea but you should do that in an async fashion either by generating it your database or in another process
19:34 < STRML> williamcotton: check comments on your gist
19:34 <@maxogden> williamcotton: i wouldnt recommend buffering 5 minutes worth of download into memory
19:35 < williamcotton> well, that won't be happening
19:35 < williamcotton> it'll read chunks
19:35 < williamcotton> from redis
19:35 < williamcotton> so like, imagine that I'm uploading to a server, and storing it in redis, and you start downloading before the upload is finished
19:36 < williamcotton> that's what I'm trying to implement
19:36 <@maxogden> yea you can use streams for that
19:37 < STRML> williamcotton: Yeah that's going to be stream city, that will be a fun project
19:37 < williamcotton> got a good primer on that?
19:38 < STRML> I can't find one, but here's a stackoverflow post related to what you're asking
19:38 < STRML> http://stackoverflow.com/questions/2558606/stream-data-with-node-js
19:38 < marcosmlopes> maxogden: thank you!
19:38 <@maxogden> this uses streams to upload a csv and store it in couch and stream the results back to the resp https://github.com/maxogden/datacouch/blob/4944608a42659d47512fdbc121f723b6b0ad3cb2/service/csv_uploader.js
19:39 < williamcotton> awesome guys
19:39 <@maxogden> williamcotton: upload.pipe(redisQuery); redisQuery.pipe(resp)
19:39 < williamcotton> thanks!
19:39 < RLa> williamcotton, try something like that: https://gist.github.com/78aa15e6ae75e6e864e9
19:40 < RLa> williamcotton, that removes sleep
19:40 < williamcotton> hah, thanks :)
19:55 < augustl> hmm.. Would be interesting to implement clojure-style persistent data structures with Buffers
20:37 < zezikaro> does anyone know why npm gave me lots of error 3 when trying to install, then it ran out of stack, and said it installed just fine?
20:37 < zezikaro> but didn't
20:38 < zezikaro> npm ERR! not ok code 3
20:54 < kkdEEP> hi fellas
20:55 < kkdEEP> does anyone knows about Termkit installation on ubuntu?
20:56 < sechrist> I'm getting unspecified errors when mongoose loads the model and runs ensureIndexes
20:56 < sechrist> started happening this morning with no code changes over the past few days, however there were massive AWS failures last night and I use mongohq
20:56 < sechrist> haven't been able to get a meaningful error out of it
20:57 < sriley> anyone use buster.js with buster-coverage?
21:10 < augustl> sriley: buster-coverage isn't finished yet
21:10 < augustl> sriley: it's sort of work in progress for an older and probably not API compatible version of buster :)
21:10 < augustl> <excuse>butser is in 0.x so it's ok</excuse>
21:10 < augustl> sriley: also, #buster.js :)
21:10 < sriley> that would probably be why :)
21:11 < augustl> it warms my heart to see buster mentioned in here, and also scares the living shit out of me as buster is very much in beta
21:12 < sriley> playing around with how best to test including code coverage, so far jscoverage works but its a bit dated
21:13 < augustl> it'll be in place by the time we ship 1.0 ;)
21:14 < sriley> gonna head off, cheers for letting me about buster-coverage not being ready yet, saves poking around at it. cya
21:17 < rampr1> request for socket.io.js file returns 200 OK with no data in socket.io. Any ideas on what am I doing wrong ?
21:17 < rampr1> the same thing via curl works, but via the browser it returns no data
21:18 < tbranyen> that sucks
21:18 < tbranyen> are you doing a cross domain request?
21:18 < tbranyen> well that shouldn't matter at all
21:18 < tbranyen> how are you loading it in the page?
21:20 < rampr1> it's in the html. it's a script tag
21:20 < rampr1> I even manually typed the url in the browser and the same thing happens
21:21 < rampr1> no it isn't a cross domain request tbranyen
21:23 < tbranyen> weird
21:23 < tbranyen> but it works in curl?
21:23 < tbranyen> O_o
21:24 < rampr1> yeah it works via curl
21:24 < rampr1> tbranyen:  this is the url - http://games.hashcube.com/socket.io/socket.io.js
21:26 < tbranyen> thats bizarre
21:27 < rampr1> yeah it is strange
21:27 < rampr1> it returns nothing with a browser but via curl I get the data
21:28 < tbranyen> yeah thats really weird
21:44 < nykac_> what does "RangeError: Maximum call stack size exceeded
21:44 < nykac_> mean?
21:45 < gkatsev> tbranyen: rampr: the encoding wasn't set.
21:47 < rampr> gkatsev:  encoding where ?
21:47 < gkatsev> in the header of when you're getting the file.
21:47 < gkatsev> rampr: the error i'm getting: "The character encoding of the plain text document was not declared. The document will render with garbled text in some browser configurations if the document contains characters from outside the US-ASCII range. The character encoding of the file needs to be declared in the transfer protocol or file needs to use a byte order mark as an encoding signature."
21:50 < rampr> gkatsev:  I don't understand completely. you get this error in a browser is it? I'm curious doesn't socket.io handle setting of encoding ?
21:51 < gkatsev> I'm getting it in firebug.
21:51 < zhodge> how would I go about adding lines to a plain text file in node? 
21:52 < zhodge> i.e. not creating a new file, but appending data to an already existing one 
21:52 < zhodge> should I read the contents of it and then just add the data and write back?
21:52 < gkatsev> open it with the 'a' mode
21:53 < rampr> gkatsev:  okay. I don't see errors in my firebug. Can you tell if the Content Length was 0 when you requested it ?
21:54 < gkatsev> rampr: yep
21:54 < rampr> gkatsev:  the weird thing is there is content when I request the same url via curl.
21:55 < gkatsev> yeah
21:55 < rampr> but not when I request via a browser
21:55 < gkatsev> probably because curl doesn't care as much about the response header
21:55 < rampr> do you think if I set content encoding this would be fixed ?
21:55 < gkatsev> probably
21:57 < gkatsev> zhodge: I meant, open it with the 'a' flag.
21:57 < rampr> okay. Content Encoding is gzip now. but I still have the same issue now
21:57 < zhodge> gkatsev: what does that mean exactly? 
21:58 < gkatsev> fs.open('file.txt', 'a', function(error, file){}) 
21:58 < gkatsev> zhodge: it means to open the file for appending
22:00 < gkatsev> zhodge: http://nodejs.org/api/fs.html#fs_fs_open_path_flags_mode_callback
22:00 < zhodge> gkatsev: awesome, thanks a lot
22:01 < gkatsev> np
22:02 < gkatsev> rampr: try adding `; charset=utf-8' to the content-type
22:19 < Killswitch> What's the easiest way to update node?
22:19 <@maxogden> git pull
22:20 < mc> apt
22:20 < Killswitch> I don't remember how I installed it (did a while back, haven't played with it lately), I can't find where node is installed to remove it and reinstall.
22:20 < mc> brew
22:20 < mc> from source
22:20 < Killswitch> Ubuntu is the OS
22:20 < mc> which node
22:21 < Killswitch> v0.7.10-pre
22:21 < tbranyen> wat
22:21 < mc> no, i mean run the command: which node
22:21 < mc> that'll tell you where the binary is
22:21 < Killswitch> Haha, my bad
22:21 < Killswitch> I thought you asked which version. That dang which command.
22:22 < Killswitch> So I just rm the binary and can reinstall that way?
22:23 < tbranyen> yea
22:23 < tbranyen> depends
22:23 < tbranyen> might be able to get away with just reinstalling
22:23 < mc> might
22:23 < Killswitch> lol
22:23 < mc> it really depends on how you installed it in the first place
22:23 < williamcotton> STRML, RLa, maxogden: thanks for the direction earlier, I got this bad boy all worked out!
22:23 < tbranyen> yeah, i mean you can always specify the --prefix
22:23 < STRML> williamcotton: WTG, glad to hear it
22:24 < Killswitch> Like I said, I don't remember.. Went through and setup a bunch of VM's with different dev environments and just haven't had thetime to play with node and there's since been updates :(
22:24 < tbranyen> Killswitch: the path is all that matters, just ./configure; make; make install and if its not showing the right version, delete the binary in which and it'll fall back to the new one
22:25 < tbranyen> or play it safe and just rm it
22:25 < Killswitch> Alright, I'll give it a whirl, if I screw up, you'll be hearing from my lawyers!! 
22:25 < Killswitch> I'm kidding.
22:25 < Killswitch> Or am I?
22:25 < Killswitch> No no, I am just playing.
22:25 < Killswitch> Or am I serious?
22:25 < tbranyen> I'm listening to really load music, so I probably won't hear anything.
22:25  * Killswitch needs to stop watching Wilfred
22:25 < tbranyen> loud*
22:25 < mc> Killswitch: no, you don't
22:26 < mc> watch more.
22:26 < Killswitch> Haha, love that show.
22:26 < Killswitch> Watched the 5th episode baked out of my mind last night and he did that "or am I?" bit for like 5 minutes (at least that's what it seemed like to me)
22:26 < mc> it was nearly 5 minutes
22:27 < Killswitch> All I know is I laughed like a dumbass the while time
22:28 < Killswitch> Dang you mc now I want to say screw it and go watch Wilfred.
22:28 < mc> it's a good show
22:28 < Killswitch> Indeed.
22:29 < s5fs> woo nodeconf! who all is going?
22:30 < s5fs> i could't afford to attend but hope to get some good hang time afterwards (i live in town)
22:30 < mc> not me
22:30 < mc> only three people from my work are going
22:31 < s5fs> mc: you from outta town?
22:38 < Killswitch> Okay, got that done, but now when I run node it doesn't work as the location went from /usr/local/bin/node to /usr/bin/node
22:39 < AlbireoX> nodeconf looks expensive 
22:39 < s5fs> AlbireoX: yeah, it was like $700 or something
22:39 < s5fs> not sure if that included lodging or not though
22:39 < AlbireoX> aren't there conferences that are like $200 and below? why is it so expensive?
22:39 < s5fs> user groups
22:40 < AlbireoX> lots of demand i guess :/
22:40 < s5fs> maybe, they did rent out an entire hotel (albeit a small one)
22:41 < Killswitch> mc or tbranyen ?
22:41 < s5fs> i didn't go last year, only started futzing with node this year and even still, on a non-commercial basis. i can't justify dropping that kinda coin yet.
22:41 < s5fs> Killswitch: whatchu trying to do, just get node installed?
22:42 < Killswitch> s5fs: I got it installed, but the location went from /usr/local/bin/node to /usr/bin/node and I forgot how to fix that, and nothing I googled returns anything
22:42 < rampr> tbranyen:  gkatsev, when I send Accept Encoding: gzip as part of the headers I could see the same problem in curl too
22:42 < rampr> it looks like gzip is failing
22:43 < s5fs> Killswitch: does it really matter where the binary lives as long as it's in your path?
22:43 < Killswitch> s5fs: Well when I run node myapp.js it don't work because it's looking in /usr/local/bin for it
22:44 < Killswitch> josh@node:~$ node
22:44 < Killswitch> -bash: /usr/local/bin/node: No such file or directory
22:45 < s5fs> Killswitch: okay, you could create a symlink then. ln -s /usr/bin/node /usr/local/bin/node
22:45 < s5fs> hai josh!
22:45 < Killswitch> That's a good work around, but I'd rather fix it properly, if that's possible. Also hai. Haha.
22:46 < s5fs> Killswitch: hm. I'd delete /usr/bin/node, re-download the tarball and recompile/reinstall. just make sure you are "josh@node" for the entire install (although i think 'make install' requires root)
22:47 < Killswitch> https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
22:47 < s5fs> Killswitch: I just installed 0.8 a couple days ago, that's the process i followed
22:47 < Killswitch> That's how I installed it, under Ubuntu
22:48 < s5fs> Killswitch: i'm running ubuntu 12.04 and chose to NOT use the package. installing by hand is easy enough, and i'm guessing you can't tell the package where to drop the binary.
22:48 < Killswitch> Meh, just did a symbolic link
22:49 < Killswitch> Not gonna go through with removing and reinstalling from source when a symbolic link fixes it.
22:49 < s5fs> Killswitch: symlinks are a better approach imho, that way you can repoint the symlink to different node versions w/o messing with code
22:49 < Killswitch> I don't plan on having multiple versions, just upgrading as needed.
22:50 < s5fs> understood, but it's nice to allow programs to live side-by-side sometimes, such as when porting between versions
22:50 < Killswitch> This is just a development VM for me to improve my node skills 
22:55 < niteshade> hi room... installation problem node 0.8.1, on webfaction.com. (centOS) some python problem, can't figure it out
22:56 < s5fs> niteshade: what's the error?
22:56 < niteshade> I have the same error as in this thread, but I am using Py2.6: https://groups.google.com/forum/?fromgroups#!topic/nodejs/b8NCoJauipc
22:57 < niteshade> at least I think I am... "which python" points to the correct py version
22:57 < s5fs> niteshade: run a python -V just for giggles too
22:57 < s5fs> why? cuz i'm low on ideas, that's why!
22:58 < niteshade> Python 2.6.8
22:58 < niteshade> lol thanks for looking, a5fs
22:58 < marcosmlopes> maxogden: Hey, great talk about node stream on summerofnode. Thanks, i learned a lot.
22:59 < niteshade> hey, I'm a node n00b... best forum recommendation for node community?
23:00 < marcosmlopes> niteshade: stackoverflow ;)
23:00 < niteshade> marcosmlopes: comedians abound ;)
23:01 < s5fs> niteshade: hm, i read that link and don't have much more to add. you could always compile the binary elsewhere and then deploy it yourself to your host, haha!
23:04 < niteshade> s5fs: thanks anyways!  yeah, might have to compile and upload.  boo
23:05 < s5fs> niteshade: i don't know anything about your hosting provider, but they look like a shared host. often times you don't get full build environments, have you successfully compiled node there before?
23:06 < niteshade> s5fs: webfaction is not quite a shared host... something between a vps and a shared... they give you full ssh.  I was able to compile tar for example, a few mins ago
23:06 <@maxogden> marcosmlopes: you are welcome
23:06 <@maxogden> marcosmlopes: pay me back by publishing a npm module or two!
23:06 < niteshade> s5fs: following this recipe: http://davestevens.us/articles/setting-up-nodejs-on-webfaction-revised
23:08 < niteshade> s5fs: of course, the tut is from last year, and uses node 0.4.
23:14 < s5fs> niteshade: hm, i read the first part of the tutorial and it seemed okay. good to know you can compile stuff.
23:15 < niteshade> s5fs: yeah, WF seems legit, especially for Django and py stuff
23:15 < s5fs> niteshade: it asks you to create an alias for python, try removing that alias (or log out, then log back in) and try the ./configure again
23:16 < niteshade> s5fs: why didn't I think of that.  ok one min
23:19 < octane--> how do i get connect.logger to stream to a file.. i did stream: foo.log but it has no write method. do i need to invoke fs first?
23:29 < niteshade> s5fs: still happening.  I even put the alias in my ~/.bash_profile, and it loads after logout and login
23:30 < niteshade> weird
23:40 < s5fs> niteshade: if you already had python in your path, the alias was unnecessary
23:41 < niteshade> s5fs: didn't have py2.6 in path
23:41 < niteshade> s5fs: any prob with node and aliases?
23:42 < s5fs> niteshade: i wouldn't expect any
23:42 < s5fs> niteshade: the alias just tells the configure script where to find the python program, nothing too fancy
--- Log closed Sun Jul 01 00:00:10 2012
