--- Log opened Mon Jun 24 00:00:10 2013
--- Day changed Mon Jun 24 2013
00:00 < peterlubiana> Hi I have a question about event-loops! Is it true that Event loops like they are implemented in browsers / in node.js in theory are threads that have a while-loop that listens for say 240 different events again and again ?
00:00 <@isaacbw> true based on what
00:00 <@isaacbw> who said that
00:00 <@isaacbw> who's telling you these things
00:01 < peterlubiana> I'm asking because i want to understand, that is as far as i understand it right now.
00:01 < nathan7> peterlubiana: it's pretty much while (true) { processEvent(waitForAnEvent()) }
00:01 < peterlubiana> I'm looking for information on this but can't find it anywhere!
00:01 <@isaacbw> you could look through libuv
00:01 <@isaacbw> and see exactly how node does it
00:01 < peterlubiana> nathan7: Cool thx!
00:01 <@isaacbw> there are different ways to implement them
00:02 < peterlubiana> isaacbw: thx for the tip!
00:02 < serapath> hah, it installed "Visual Studio", "Visual Studio 8", "Visual Studio 9" and "Visual Studio 11"
00:02 < serapath> there is a vcbuild.exe in C:\Program Files\Microsoft Visual Studio 9.0
00:02 < nathan7> peterlubiana: node knows about when no more events will ever happen again
00:02 < serapath> so u think adding that one to my path might help?
00:02 < serapath> :-)
00:02 < nathan7> peterlubiana: so it's while (eventsCanHappen())
00:02 <@isaacbw> serapath: does it have VCBuild in it?
00:02 < serapath> yes, the only version with a vcbuild.exe in it
00:02 <@isaacbw> then sure, try it
00:02 < nathan7> peterlubiana: your program automatically exits when nothing can happen anymore
00:03 < peterlubiana> nathan7: Aha. How the !)(#=)"! can it be idle? How can it know that a user f.ex won't request something?
00:03 < nathan7> peterlubiana: if that happens
00:03 < nathan7> peterlubiana: an event comes in
00:03 <@isaacbw> because you aren't waiting for user input
00:04 < nathan7> peterlubiana: a user requesting something is an event
00:04 <@isaacbw> oh wait no it's magic
00:04 <@isaacbw> :O
00:05 < peterlubiana> nathan7: But isnt that what the event loop while(shitcangodown()) is there for? How can it stop listening and then an events comes in ? is the process on sleep in the OS ?
00:05 < serapath> isaacbw: no same error
00:05 < serapath> isaacbw: could i execute it manually with vcbuild.exe somehow?
00:06 < nathan7> peterlubiana: it's epoll-ing
00:06 < nathan7> peterlubiana: libuv contains the event loop, check it out
00:06 < serapath> maybe its because it updated my .NET from 3.5 to 4.5 ?
00:06 <@isaacbw> serapath: are you sure you added it to path?
00:06 < nathan7> peterlubiana: shitcangodown is basically 'are there external events that are waiting to happen'
00:06 < serapath> mhhh
00:06 < peterlubiana> nathan7: OH, new word epoll-ing! .. okay thx wont bother you anymore.. Sry im just so )!"("= curious.
00:07 < serapath>  i added C:\Program Files\Microsoft Visual Studio 9.0
00:07 < serapath> but maybe i need to add a subfolder
00:07 < serapath> damn
00:09 < serapath> ok, so vcbuild.exe is in C:\Program Files\Microsoft Visual Studio 9.0\VC\vcpackages
00:11 < serapath> isaacbw: hah, at least that did something. have a new error message :-) http://pastebin.com/S6EsT1Hy
00:11 < peterlubiana> Ah..I think i get it now.. The node program listens to shit on one or several ports, when something comes in to that port.. node starts a query from f.ex a database, and then the thread idles and 'waits' for it to finish.. When the query has finished, the OS says to Node: dude wake the fuck up shit is going down! And then Node runs the code in the callback function that you specified.. and then the OS says sleep now node... sleep!
00:12 <@isaacbw> serapath: this is a node-gyp module right?
00:12 < serapath> i dont know
00:12 < serapath> bcrypt
00:12 <@isaacbw> probably. You might have to ping TooTallNate when he's around
00:12 < serapath> ok
00:12 < serapath> thx very much
00:12 < serapath> :-)
00:13 <@isaacbw> or install openssl somehow on windows
00:13 < nathan7> peterlubiana: That's pretty much it
00:13 <@isaacbw> but I have no idea how windows does include paths
00:13 <@isaacbw> actually, that's probably what you have to figure out now
00:13 < serapath> so if i install openssl that might do the trick?
00:13 < serapath> ok
00:13 < serapath> thx, i'll google for it
00:13 <@isaacbw> well, that's the main error you have, is it can't find openssl headers
00:13 < peterlubiana> nathan7: Omg you have no idea.. how sweet this feels.. God JESUS i kinda get it now... thx so much i've been troubled by this for a while XD
00:14 <@isaacbw> the rest are warnings
00:14 < peterlubiana> isaacbw: and ty to you too.
00:14 <@isaacbw> don't thank me, I'm a facetious asshole
00:15 < nathan7> peterlubiana: [=
00:16 < serapath> isaacbw: do u think this might help? http://chocolatey.org/packages?q=openssl
00:17 < peterlubiana> isaacbw: Thx for atleast giving me some attention, even though with a significant amount of, what should i say, sarcasm / roflkopterness XD
00:17 <@isaacbw> I don't know what that is serapath 
00:17 <@isaacbw> this is really not going to be fun serapath ;)
00:17 <@isaacbw> unless you can find some vc++ compiled binaries of openssl
00:18 <@isaacbw> and then
00:18 <@isaacbw> I have no idea
00:18 <@isaacbw> http://slproweb.com/products/Win32OpenSSL.html
00:18 <@isaacbw> that's probably what you want
00:20 <@isaacbw> serapath*
00:20 <@isaacbw> it seems to be the "official" windows openssl project
00:21 < serapath> isaacbw: i installed http://gnuwin32.sourceforge.net/packages/openssl.htm and it enabled me to start openssl from windows command line
00:21 < serapath> but the error did not change
00:22 <@isaacbw> well you need the headers somehow
00:22 <@isaacbw> I don't know how vc++ works
00:22 < serapath> what does it mean?
00:23 <@isaacbw> the error means that you don't have openssl headers where vc++ can find them
00:23 < serapath> ah, u mean the .h files? is that source files? because it did not download the source
00:23 < serapath> if i need that, it offered an option to include the source files too
00:23 <@isaacbw> well, do that
00:23 < serapath> ok, thx, i'll try :-)
00:24 <@isaacbw> then figure out how to tell vc++ where they are
00:25 < darkPassenger> When you declare a global variable you can use it everywhere and wherever you use it might affect future usage wherever you use it in the same file, right ? 
00:25 < darkPassenger> what I mean is : is there anything unusual i should know about javascript global variable ? 
00:25 <@isaacbw> that's how javascript works, yea
00:25 <@isaacbw> no
00:25 <@isaacbw> it's just a variable
00:25 < darkPassenger> ok
00:25 <@isaacbw> in the top-most scope
00:26 <@isaacbw> top-level
00:26 <@isaacbw> highest
00:26 <@isaacbw> top
00:26 <@isaacbw> uppermost
00:26 <@isaacbw> outermost
00:26 < darkPassenger> allright...
00:26 < nathan7> darkPassenger: you rarely want to use global variables
00:27 <@isaacbw> unless your module has some state which is weird
00:27 <@isaacbw> except maybe like connection pooling
00:27 < darkPassenger> no, no 
00:27 < serapath> isaacbw: ok, installed it. the file from the error message "rand.h" is now in C:\Program Files\GnuWin32\include\openssl but error while installing bcrypt stays the same
00:27 < darkPassenger> I have an issue with a snippet
00:27 < serapath> if i put that into my path
00:27 < serapath> might that help?
00:27 < darkPassenger> its about an array who gets value pushed from a called function in the success ajax field, let me show you ? 
00:28 < nathan7> isaacbw: then you just put it in your module's scope
00:29 < serapath> damn, didnt help
00:31 <@isaacbw> nathan7: isn't that what he's asking about?
00:31 <@isaacbw> am I confused
00:31 <@isaacbw> serapath: I doubt vc++ looks in path for include files
00:31 <@isaacbw> you might have to do some research here
00:33 < darkPassenger> nathan7: yes I understand
00:33 < darkPassenger> but i have a very specific situation
00:33 < darkPassenger> can i show you the code ?
00:33 <@isaacbw> do it
00:33 <@isaacbw> on a paste site
00:33 < darkPassenger> http://pastebin.com/8rQT0n26
00:33 < darkPassenger> its kind of quick and dirty 
00:33 < darkPassenger> sorry about that
00:34 < nathan7> jQuery bullshit, grand
00:35 < serapath> isaacbw: already doing it. found something that tells me how to set the path from the visual stdio gui, but i cant start visual studio, because i have no key, but maybe i'll find something that helps.
00:35 < serapath> but thanks for telling me what to look for
00:35 < serapath> :-)
00:35 < darkPassenger> nathan7: what bs , the ajax part ? 
00:38 <@isaacbw> serapath: I bet there's a standard folder that vcbuild looks in
00:46 < darkPassenger> meh..
00:47 < niggler> is it easier to use cygwin or dev-c++ or is it easier to use visual studio?
00:50 < darkPassenger> the easiest for me as been bash + vim
00:50 < Zolmeister> Linux
00:51 < darkPassenger> yep
00:56 <@isaacbw> niggler: if you're trying to replicate unix development in windows, vs is a nightmare
00:56 <@isaacbw> oh, niggler: http://trillian.mit.edu/~jc/humor/ATT_Copyright_true.html
00:57 < niggler> I'm tired of switching into a windows VM isaacbw
00:57 < niggler> lol isaacbw that's hilarious
00:57 < dorkmafia> how do you return an array from a c wrapper to node js?
00:57 < niggler> I'm actually confused as to why those blank lines exist in the first place
00:57 < niggler> shouldn't line 3 of the first version be commented?
00:58 < darkPassenger> i have a windows machine at home and a linux laptop, to which i ssh into when needed 
00:58 <@isaacbw> lol
00:59 < ssafejava> niggler: they don't do anything, blank or not... it could be 1 blank line or 100
00:59 < ssafejava> love that story
00:59 < ssafejava> I'm curious what makes it v1.6
00:59 < niggler> that's understood ssafejava 
01:00 < niggler> but if the copyright text has a blank line
01:00 < niggler> shouldn't that line be commented?
01:00 < ssafejava> I guess it's just a style thing
01:01 < codingstream> anyone know if node works with dtrace on freebsd ?
01:04 < darkPassenger> about that code snippet...
01:10 < serapath> isaacbw: not sure what to look for. but found this file http://pastebin.com/b1ADhhH4 which might be edited according to this http://stackoverflow.com/questions/335408/where-does-visual-studio-look-for-c-header-files
01:10 < serapath> but looks daunting
01:10 <@isaacbw> serapath: you shouldn't have to edit any files
01:11 <@isaacbw> there might be a flag or something you can pass to node-gyp
01:11 < serapath> but all i do is "npm install bcrypt" ...how can i pass any flags?
01:11 <@isaacbw> I think npm might forward flags to node-gyp but I'm not sure
01:12 < serapath> the thing with the "folder visual studio looks for" is, that its settable in the Visual Studio GUI, or was... until VS 2012, where it has been removed and is only settable for individual projects
01:12 <@isaacbw> but you aren't using the IDE
01:12 <@isaacbw> the IDE would just pass flags to vcbuild
01:12 < serapath> no
01:12 <@isaacbw> or whatever
01:12 < serapath> k
01:12 < serapath> probably
01:13 < serapath> so how would i change "npm install bcrypt" to eventually forward the openssl/rand.h header file to node-gyp
01:13 < serapath> thats what i have to do, right?
01:13 <@isaacbw> maybe
01:14 <@isaacbw> http://msdn.microsoft.com/en-us/library/cz553aa1(v=vs.80).aspx
01:14 <@isaacbw> oh hey, maybe you can just add it to the INCLUDE environemtn variable
01:14 <@isaacbw>  /useenv might be set by node-gyp
01:14 <@isaacbw> dammit tootallnate
01:14 <@isaacbw> where are you :P
01:14 < serapath> ok, i see
01:15 < serapath> i dont call node-gyp directly and i do not call vcbuild directly
01:15 < serapath> can npm forward it?
01:16 <@isaacbw> I don't know, but I'm saying it may not matter
01:16 <@isaacbw> add the openssl source directory to INCLUDE and see if it works
01:16 < serapath> how do i do it? download bcrypt source and edit c files?
01:17 <@isaacbw> um, no
01:17 <@isaacbw> what
01:17 <@isaacbw> do it however you did PATH
01:17 <@isaacbw> in your system settings or something like that
01:17 < serapath> i added the directory with the openssl header files to my path
01:17 < serapath> did not help
01:18 <@isaacbw> not your path
01:18 < serapath> the header files are in C:\Program Files\GnuWin32\include\openssl
01:18 <@isaacbw> dude
01:18 <@isaacbw> okay, add C:\Program Files\GnuWin32\include to the *INCLUDE* environment variable
01:18 < serapath> is INCLUDE another windows variable i could add stuff to?
01:18 <@isaacbw> not path
01:18 <@isaacbw> you can make whatever variables you want
01:18 <@isaacbw> so yes
01:18 <@isaacbw> and dont add the \openssl part
01:19 < serapath> i see
01:19 < serapath> ok
01:19 < serapath> so vcbuild will look in INCLUDE ?
01:19 <@isaacbw> maybe
01:20 <@isaacbw> did you read the link I gave you?
01:25 < dorkmafia> do I use v8::Array in the c warpper to return an array of values to node js?
01:25 < niggler> c++ wrapper, which in many ways is a C warper
01:25 < serapath> yes, it did not say much. there is options for vcbuild (although it describes vs 2005 version) and one is /usenv  ...but it doesnt say much beside that. but because i do not call vcbuild or node-gyp which might pass it to vcbuild manually, i dont know how to leverage that information isaacbw 
01:33 < dorkmafia> :(
01:34 <@isaacbw> serapath: I feel like you aren't listening to what I'm saying
01:34 <@isaacbw> node-gyp may pass /usenv by default
01:34 <@isaacbw> so just try adding the openssl headers to INCLUDE and see what happens
01:35 < serapath> i did the command seems to be: setx INCLUDE "C:\Program Files\GnuWin32\include"
01:35 < serapath> it says it was successful
01:35 < serapath> but didnt change anything
01:36 < niggler> will ubuntu ever use 'node' to mean nodejs?
01:36 < serapath> i also rightclicked "computer" and added a new "environment variable" named "INCLUDE" and set its value to "C:\Program Files\GnuWin32\include"
01:36 <@isaacbw> serapath: you can check environement variables my right clicking my computer and going a bit deeper
01:37 <@isaacbw> you've reached the limit of my windows knowledge
01:37 < serapath> yes did that too. sadly made no difference
01:37 < serapath> *sigh*
01:37 <@isaacbw> alright
01:37 < serapath> hey, but thanks a lot for ur help and patience
01:37 < serapath> :-)
01:37 <@isaacbw> try to ping TooTallNate when he's around
01:37 <@isaacbw> he made node-gyp
01:37 < niggler> serapath might i recommend switching to a more pleasant OS like linux or osx?
01:37 <@isaacbw> lol
01:37 <@isaacbw> that would be too easy niggler 
01:38 < serapath> hehe
01:38 < serapath> is there an alternative to bcrypt?
01:40 < serapath> niggler: i will switch to linux, but changing my OS will take more time and running it in a VM is not an option, because my notebook is too weak for that
01:40 < niggler> there is also aws/linode/azure
01:40 < serapath> means what?
01:40 < serapath> i use appfog
01:40 < niggler> oh you can register with one of those services and get a very cheap or free VM
01:41 < serapath> but being able to build locally would be cool
01:43 < serapath> isaacbw: would it help to manually download https://github.com/ncb000gt/node.bcrypt.js/tree/master/src and change sourcefiles to include what i need?
01:45 < serapath> seems as if this file: https://github.com/ncb000gt/node.bcrypt.js/blob/master/src/bcrypt_node.cc mentions openssl/rand.h
01:45 < serapath> maybe i could change the path to an absolute, telling it where to find it
01:45 < gmturbo> hey everyone
01:46 < gmturbo> is it possible to download a file from a server using tcp?
01:46 < Stumbler> So, every time I copy a node-webkit project from one mac to another, I get notified that it may be corrupt or incomplete, and can not be opened. everything is there, it's an uncompressed content folder... is there something really basic I'm missing about how mac applications are structured that would cause this? or is this a node-webkit specific problem?
01:47 <@isaacbw> serapath: that would be incredibly messy and terrible
01:47 < serapath> isaacbw: in the future i'll use linux, but for now i just have to get it to work and as a one time solution maybe that would solve it
01:47 < rhalff> pretty cool project: http://todomvc.com/ I thought I was the only one getting dizzy with all these frameworks.
01:48 <@isaacbw> serapath: https://github.com/TooTallNate/node-gyp/wiki/Visual-Studio-2010-Setup
01:48 < Stumbler> *bookmarking* cool resource rhalff!
01:49 < serapath> isaacbw: thx, sounds good. so first i better uninstall visual studio 2012, right?
01:49 <@isaacbw> I don't think that todomvc really gives you a meaningful view of how large projects look in these frameworks
01:49 <@isaacbw> there's a big difference between building a tiny little demo in angular and building a full web app
01:49 <@isaacbw> serapath: I don't know, I don't think so
01:49 <@isaacbw> it wouldn't hurt though
01:50 < serapath> k
01:50 < serapath> thx, i'll try
01:59 <@isaacbw> cfdsasafdsfsdafsda
02:00 < rhalff> isaacbw, ok, but it does give a good overview of what is available and makes it easy to at least compare the basics. But I must say the Extjs example doesn't really show what Extjs is capable of, true.. :-)
02:00 < ssafejava> isaacbw: amen
02:00 < ssafejava> rhalff: ha the extjs demo does tell you one thing. It takes 1.1MB minified to do a simple project
02:01 < rhalff> ssafejava, yeah but ext you can also compile to only include what you actually use. 
02:01 < ssafejava> Yeah but it's not that easy, unfortunately
02:02 < ssafejava> I wrote a few projects in ExtJS & Sencha Touch. Aside from being a huge pain in the ass, dealing with incomplete docs, inflexible views, and tons of ExtJS "magic", I could never, ever get my build below just above a meg
02:02 < rhalff> anyway for normal websites you do not use extjs
02:02 < ssafejava> there are a number of basic views that have insane dependencies that can't be removed. 
02:02 < ssafejava> yeah you're right. I never would again. I switched to Backbone and never looked back
02:03 < ssafejava> I figured it would make sense to do an ExtJS/ST2 hybrid app so I could easily target desktops and phones. just slowed our dev cycle to a crawl instead
02:03 < ssafejava> upside: the projects shared about 95% common code. Downside: both apps were awful and features took forever to write
02:04 < zomg> I have never seen an Ext based app other than the demos on their website
02:04 < zomg> Should tell you something...
02:04 < zomg> :D
02:04 < ssafejava> zomg: they're heavily used in large corps & gov. gov loves extJS for giving them IE-compatible JS datatables
02:05 < zomg> ssafejava: yeah sounds about right
02:05 < zomg> enterprisey shiz
02:05 < zomg> =)
02:05 < rhalff> ssafejava, think so and for that it's a very good option I think.
02:05 < zomg> Ext is ok if you have the patience to learn it but tbh there are nicer alternatives
02:05 < ssafejava> yeah I agree. I think sencha touch gives off the wrong idea. it's just not ready and inherits way to much Ext cruft
02:06 < ssafejava> both projects deeply suffer from how old they are
02:06 < rud> hmm anyone owning a novation launchpad ? working on a node app that needs testing :p
02:06 < ssafejava> if they were rewritten today without back compatibility they'd be great
02:06 < ssafejava> rud: oh those are great. what's the app?
02:07 < rhalff> rud, you actualy just invented a new business model, crowd testing based on the hardware you own. :p
02:07 < rud> https://github.com/kelexel/midiosc a midi <> o/c bridge with virtual device capabilities .. i.e., pick a launchpad an make it emulate a monome
02:07  * rhalff will never get rich...
02:07 < rud> rhalff: heh it's multi-hardware friendly, we just started testing with this device :)
02:07 < zomg> rhalff: lol, I was just thinking that I need to choose between getting a new car or having a long holiday 
02:08 < zomg> Damn it for not having the money to have both!
02:08 < ssafejava> rud: interesting. I'd be interested to know how the latency goes 
02:08 < rud> ssafejava: so far, there is none noticeable
02:08 < rud> it runs in the browser with node-webkit
02:08 < ssafejava> very cool
02:09 < rud> there's no socket, direct port of serialosc lib
02:09 < rud> (web)socket
02:09 < rud> we just need testers :p
02:09 < rud> (who know node preferably :)
02:15 -!- mode/#Node.js [+o TooTallNate] by ChanServ
02:23 < serapath> isaacbw: downloaded the source of bcrypt manually, installed node-gyp globally, did node-gyp configure in the directory of bcrypt-src where i put all the files, did node-gyp build
02:23 < serapath> openssl/rand.h failed
02:23 < serapath> edited source file and gave it the full path which worked, but sadly, the openssl/*.h files itself have relative paths too
02:24 < serapath> i dont want to change them all and so i thought, maybe i could just copy the openssl directory including all the header files to the bcrypt src directory
02:24 < serapath> but did not wor
02:24 < serapath> work
02:25 < serapath> before i change all the includes to absolute paths, is there another option using node-gyp ???
02:25 < serapath> like with the /usenv option of it u mentioned? how would i do that?
02:25 < serapath> the path to openssl is C:\Program Files\GnuWin32\include\openssl
02:29 <@isaacbw> serapath: follow that complete guide that I linked from tootallnate
02:44 < serapath> isaacbw: still installing the stuff from tootallnates link.
02:45 < serapath> isaacbw: meanwhile changed all the includes to absolute paths and now its not having trouble of finding all that which is needed, but it throws syntax errors. wtf?
02:46 < serapath> line 176 of file ossi_typ.h is: typedef struct ocsp_response_st OCSP_RESPONSE;
02:47 < serapath> isaac but error message is http://pastebin.com/neqQijXK
02:48 < kumavis> i've got a web implementation of MIT's Scratch initially working, but I'm having trouble with the styles in codemirror - could someone give me a hand?
02:49 < serapath> isaacbw: maybe the source i am using is too up to date? some files changed a couple of days ago. how do i get the source which is used by the normal npm install bcrypt?
02:50 <@isaacbw> serapath: I don't know, sorry, I'm about to go to bed
02:50 < serapath> ok, thx isaacbw :-) so good night then.
02:50 <@isaacbw> good luck
02:51 <@isaacbw> just follow that guid
02:51 <@isaacbw> *e
02:51 < kumavis> viewable here, click on a category to the left, and choose an item. then click on the javascript tab  http://75.101.102.108:3000/
02:51 < serapath> isaacbw: it says nothing beside what software of visual studio to install. i do it, but wonder if it will work then
02:56 < dorkmafia> anyone know how to return an array of to nodejs from c/cpp wrapper?
02:59 < dorkmafia> do I use the v8::Array?
03:18 < kumavis> CodeMirror - running into some trouble with styles - Its using the original styles but I think something is interfering. The app is viewable here, click on a category to the left, and choose an item. then click on the javascript tab  http://75.101.102.108:3000/
04:19 < gimli_8bit> Hello all!
04:49 < josephg> Does anyone know if there's an equivalent of node-inspector that lets you use the profiler?
04:49 < josephg> I've seen something like that once, but I can't find it
04:50 < gkatsev> josephg: node-webkit-agent
04:50 < josephg> aaah thats the one! Thanks!
04:50 < gkatsev> np
04:50 < gkatsev> if only they both would update :/
05:07 < BAMbanda> Can someone help me with node.js for creating a proxy extension for firefox?
05:07 < BAMbanda> not the xul, ui stuff, but the actual code that would make it functional? I'm new to this stuff, but gotta do it for my internship
05:34 < gimli_8bit> \away afk
05:55 < srs> hi how to install a steam module in node.hs
05:55 < srs> sorry node.js
05:56 < Guest55381> while installing the node.js it shows an exception can any body tell me how to solve that error its important and urgent for me
05:56 < Oddman> perhaps you should show the error?
05:56 < Oddman> we can't read your mind.
05:56 < Oddman> Yet.
05:57 < Guest55381> D:\Node\node-steam-chat-bot-master\node_modules\steam\node_modules\ref>node "C:\Program Files\nodejs\node_modules\npm\bin\node-gyp-bin\\..\..\node_modules\node-gyp\bin\node-gyp.js" rebuild gyp ERR! configure error gyp ERR! stack Error: spawn ENOENT gyp ERR! stack     at errnoException (child_process.js:980:11) gyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:771:34) gyp ERR! System Windows_NT 5.1.2600 
05:59 < Guest55381> gyp ERR! configure error gyp ERR! stack Error: spawn ENOENT gyp ERR! stack     at errnoException (child_process.js:980:11) gyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:771:34) gyp ERR! System Windows_NT 5.1.2600 gyp ERR! command "node" "C:\\Program  this error only it showing while installing
06:05 < ningu> Guest55381: do you have a C compiler installed? I don't know what you need to use gyp on windows
06:05 < ningu> but presumably at least that
06:11 < Guest55381> <ningu> i dont have a c compiler surely i ahve to install the c compiler?
06:12 < ningu> presumably
06:12 < ningu> google what you need for node-gyp on windows
06:13 < Guest55381> <ningu> it shows python but i already installed python in my system
06:14 < bulkan> having fun with node.js :)
06:14 < ningu> what shows python?
06:14 < ningu> Guest55381: node-gyp is written *in* python but that isn't all that it needs
06:14 < Guest55381> https://github.com/TooTallNate/node-gyp
06:15 < Guest55381> in this url only they mentioned like that
06:15 < ningu> Guest55381: can you read?
06:15 < ningu> it says Microsoft Visual Studio C++
06:16 < Guest55381> yes
06:17 < Guest55381> in my system there is a 32-bit os
06:17 < ningu> Guest55381: that's fine
06:17 < Guest55381> it becomes any problem for running a node.js
06:17 < ningu> no
06:18 < Guest55381> ok thank u so much now i will try to install the c++
06:19 < OODavo> Is there a function that works like child_process.exec in that it has a callback, but that also takes arguments in an array, like child_process.spawn? exec is mostly closer to what I want, but I don't need the command run through a shell and would for instance prefer to avoid having to quote the arguments.
06:20 < OODavo> Oh, wait. That seems to be what child_process.execFile is for.
06:20 < ningu> hehe
06:22 < OODavo> Yep, that's exactly that execFile is for. That's what I get for skimming the docs.
06:28 < owen1> OODavo: what does it mean " does not execute a subshell but rather the specified file directly"
06:30 < OODavo> child_process.exec spawns a shell (probably /bin/sh) and then runs the command line you asked for in that shell. child_process.execFile doesn't start a shell; it can avoid this because it makes you pass the arguments in as an array, so they don't need to be parsed apart by a shell. So this is handy in situations where you don't need shell features like globbing.
06:31 < OODavo> Hmm okay, that's weird. curl called from a shell with a --cookie flag works as intended, while curl called using execFile with the same flag ignores the cookie. Clearly I've missed something here. :p
06:35 < owen1> OODavo: got it. so if i need globbing or if i want to get a stream of updates about my child process. i should use spawn.
06:35 < OODavo> spawn doesn't work with globbing either. exec is the one that uses a shell and therefore can glob.
06:35 < owen1> oh
06:35 < owen1> so spawn and execFile are not using a shell
06:36 < OODavo> Yep.
06:36 < owen1> so i should use them if possible.
06:36 < owen1> cool
06:38 < OODavo> Yep. Go with exec if you specifically need globbing or & for parallel processes or pipes or some other shell feature. Or if you're too lazy to use the others. :P
06:41 < Guest55381> D:\Node\phantachat-master\node_modules\now\node_modules\node-proxy>node "C:\Program Files\nodejs\node_modules\npm\bin\node-gyp-bin\\..\..\node_modules\node-gyp\bin\node-gyp.js" configure build gyp ERR! configure error gyp ERR! stack Error: spawn ENOENT gyp ERR! stack     at errnoException (child_process.js:980:11) gyp ERR! stack     at Process.ChildProcess._handle.onexit (child_process.js:771:34) gyp ERR! System Windows_NT 5.1.2
07:23 < newuser> Hello
07:24 < Freze> HI
07:25 < newuser> Freze: Does WebHosting Control Panel exists that supports Node.js server?
07:26 < Freze> not sure I'm wondering about that too
07:26 < Freze> I'm curious how to deploy nodejs on a vps ubuntu box
07:26 < newuser> Freze: Apparently gandi.net offers a solution
07:27 < newuser> Freze: But I think they have hired programmers to deploy there on web backend...
07:27 < Freze> newuser: good prices
07:28 < Freze> I found leaseweb as a possible VPS
07:28 < Freze> bit cheaper
07:30 < newuser> Freze: en.wikipedia.org/wiki/Comparison_of_web_hosting_control_panels
07:30 < newuser> Freze: Thnks..Let me look...
07:32 < Freze> why do you want a control panel newuser
07:34 < Freze> hey newuser check this https://gist.github.com/stagas/754303
07:36 < [AD]Turbo> hola
08:24 < MrLogaz> HI
08:40 < OODavo> Is there something that works like Q.all but also puts out progress notifications as items in the array are fulfilled, or should I just code it myself?
09:02 < Ezku_> OODavo: how would the progress notifications be delivered?
09:03 < OODavo> Ezku: Through the progress callback on the promise-for-the-whole-array.
09:06 < saanplus> HI Guys, HOW CAN I MANAGE A CENTRAL MODEL TO SAVE APPLICATION DATA TO BE USED IN DIFFERENCT ROUTES INDEX FILES IN ONE PLACE, JUST LIKE KNOCKOUT.JS OR ANGULAR.JS WE MAKE MODELS AND CAN ACCESS THEM ANYWHERE THROUGH OUT THE APPLICATION. 
09:06 < saanplus> ?
09:06 < Trangar> saanplus, start by disabling your caps lock key and asking again
09:07 < OODavo> Ezku: Q's promises have that feature. :P I'm not sure other promise libs have them, but I'm only using Q on this project anyway.
09:09 < zaphod1984> hi, i'm trying to determine if a http server is still running (or yet running) thus accepting connections. i know there is the possibility to check for server._handler but that seems rather hacky to me
09:09 < saanplus> @Trangar, is there a problem with upperCase? Is it some kind of rule that i am unAware of
09:09 < saanplus> ?
09:09 < Trangar> saanplus, it's called "normal social interaction", you might've heard of it
09:09 < saanplus> @Ezku, what is Q
09:10 < saanplus> then maybe i am not good at that, sorry
09:11 < bnoordhuis> saanplus: just a fyi, in some channels typing in ALL CAPS like that is a bannable offense
09:12 < saanplus> i think i must go through the manual then, before comming to IRC then. anyways, thanks for my correction. 
09:12 < Trangar> No problem
09:16 < Ezku> OODavo: ah, sure. Had kind of forgotten the API has that. If Q's all doesn't invoke the progress callback, they must've as well... :p
09:17 < OODavo> Maybe they don't do it because most promises don't have it.
09:17 < OODavo> I've just basically copied the source of Q.all and slotted in a call to deferred.notify.
09:20 <@MI6> joyent/node: Ben Noordhuis v0.10 * 3fac415 : doc: fs: synchronize watchFile/unwatchFile warning - http://git.io/6vOvAA
09:20 < saanplus> so regarding my question, nothing with in express to manage the model, and use them in different js files?
09:21 < OODavo> saanplus: Would just using Node's standard module system work for you?
09:22 < aandy> ugh, i'm trying to do some CORS in express, but i end up with xhr's (or jquery getjson or or or) turning POST into OPTIONS. (well, sending OPTIONS before POST, that is). anyone know what i should set exactly? currently i have these headers set: http://pastie.org/private/s545jqnu2szbyq5bbco0w
09:23 < saanplus> OODavo: sure why not
09:24 < nathan7> aandy: that's how CORS works
09:25 < OODavo> saanplus: Are you familiar with how Node.js modules work? Look over http://howtonode.org/creating-custom-modules if not.
09:25 < aandy> nathan7: so i'll have to add an OPTIONS handler?
09:27 < saanplus> OODavo: i am new to node, but regarding node modules, all i know is how to use npm to install all depencies in packege.json
09:28 < OODavo> saanplus: Ah. Fair enough. Take a look at that tutorial, then.
09:28 < saanplus> thanks man
10:05 < JuPaname> irc://irc.jupaname.fr/#!accueil!
10:08 < rees> i want to install now module but iam getting following error 1705 info install ws@0.4.25 1706 verbose unsafe-perm in lifecycle true 1707 error Error: spawn ENOENT 1707 error     at errnoException (child_process.js:980:11) 1707 error     at Process.ChildProcess._handle.onexit (child_process.js:771:34) 1708 error If you need help, you may report this log at: 1708 error     <http://github.com/isaacs/npm/issues> 1708 error or email it to:
10:08 < rees> can any body help me how to resolve this
10:10 < rees> Error : spawn Enoent at errnoException(child_process.js:980:11) at process.childprocess._handle.onexit(child_process.js:771:34) windows_NT 5.1.12600
10:21 < ak5> hey guys, I am kinda hung up on async testing with mocha: I have an async function that returns an array, how do I test that the array should.be.an.instanceOf(Array); ?
10:22 < RLa> ak5, async, and returns array?
10:23 < RLa> you want to check in callback?
10:23 < ak5> RLa: yeah, sorry callback that has function
10:23 < ak5> has array*
10:23 < ak5> my brain is fried apparantly
10:23 < RLa> just run assert in callback, then call done() at the end of callback
10:24 < RLa> add done as the test function formal argument
10:24 < RLa> it('should get array', function(done) { fun(function(err, arr) { check; done() }); })
10:24 < ak5> RLa: so I have an object I am giving a search method, that is async. It scrapes some webpage and returns the results in an array in a callback that sets properties on the object with the search method <-- does that make sense?
10:25 < RLa> something like that
10:25 < RLa> i guess it does
10:26 < ak5> RLa: so I do var foo = new SearchObject(); foo.search(function(){this.myArray[0]//my first search result});
10:27 < ak5> is that a good way to do this? I am not very big on OOP
10:27 < ak5> It seems like the node modules are built this way though
10:29 < RLa> most (all?) node async functions use function(err, data) style of callbacks
10:30 < RLa> so it could look like foo.search(function(err, results) { if (!err) { "results is an array"; } })
10:31 < oceanbreeze> Nodejs development on windows xp is fine?
10:31 < ak5> RLa: I don't understand. How do I continue, using that data?
10:32 < accc> node rocks. my api for a website/service have a load time under 20ms from request to response. on both ways: socket and http/s :]
10:33 < RLa> oceanbreeze, unless you want native modules (need to install compilers etc.), i would prefer linux or mac instead
10:34 < accc> RLa: ack
10:34 < RLa> ak5, just use results argument
10:34 < Vermicelli> oceanbreeze, just install vagrant or virtualbox.
10:34 < Vermicelli> it would be easier 
10:35 < oceanbreeze> i am using very limited internet access from office where most ports are blocked etc.
10:35 < oceanbreeze> I have installed virualbox with slitaz linux distro, but due to lack of internet access i am struggling to install nodejs on it
10:36 < oceanbreeze> Should i use preconfigured vdi image?
10:39 < Vermicelli> look nodejs without internet access will be very difficult. 
10:40 < Vermicelli> You need npm to get packages, right
11:15 < Debloper> Not sure why, but Formidable is writing my uploaded file twice on single upload action. Any pointer?
11:17 < bulkan> does anyone use https://github.com/component/dom ?
11:18 < bulkan> just getting confused, I just want to run something on when document is ready
11:18 < bulkan> like with jQuery $(document).ready(function() { .. });
11:22 < bencevans> bulkan: try https://github.com/ded/domready
11:22 < bulkan> thanks !
11:22 < bulkan> bencevans: the search on components.io didn't show that
11:23 < bencevans> bulkan: I've only come across it because of I think it was substack's examples for browserify ;)
11:24 < tasslehoff> In my node.js/express application I use node-archiver and pipe my zip file to the response object. How do I detect if someone cancels a transfer in their browser?
11:26 < dazld> hey
11:26 < dazld> just posted up a question
11:26 < dazld> http://stackoverflow.com/questions/17274142/setting-a-handlebars-helper-to-return-a-specific-value-per-async-request-in-expr
11:26 < dazld> i guess its more an express thing, but if theres something in node core that might help, all ears
11:32 < bencevans> tasslehoff: not sure but you could try creating a listener on the socket for 'close' or it may be reported to 'clientError'
11:38 < tasslehoff> bencevans: thanks. will try that.
11:52 < substack> bulkan: if you put your <script> at the end of the </body> you don't need domready events
11:53 < bulkan> substack: hmm that is true
12:08 < MrLogaz> Здесь есть русские разработчики? 
12:16 < MrLogaz> hi, there is Russian developers?
12:18 < MrLogaz> Из России есть кто?
12:19 < staar2> MrLogaz, I am kinda near russia
12:19 < staar2> >D
12:20 < prettyrobots> Good morning.
12:31 < oceanbreeze> Водка
12:35 < MrMtDew> Looking for help with openssl error
12:35 < hipsterslapfight> Object [object Object],[object Object],[object Object],[object Object],[object Object] has no method 'each' 
12:35 < hipsterslapfight> nice
12:36 < RLa> too much underscore?
12:37 < RLa> or too little :)
12:37 < MrMtDew> I can perform a curl request successfully; however, when I try the same request via node https I get an openssl error of unknown protocol? anybody come across this?
12:37 < nathan7> hipsterslapfight: forEach
12:37 < hipsterslapfight> nathan7: i know :v 
12:37 < hipsterslapfight> i just loved the error reporting
12:37 < hipsterslapfight> too much probably RLa
12:37 < nathan7> hipsterslapfight: Array.prototype.toString = function() { return this.map(function(item) { return item.toString() }).join() }
12:37 < nathan7> hipsterslapfight: pretty much
12:38 < nathan7> scratch that
12:38 < nathan7> Array.prototype.toString = function() { return this.map(function(item) { return item + '' }).join() }
12:39 < hipsterslapfight> messing with prototypes :(
12:39 < nathan7> hipsterslapfight: that's just what Array#toString *is*
12:39 < hipsterslapfight> oh haha
12:39 < hipsterslapfight> wow is that really all it is
12:39 < MrMtDew> I have even tried to recompile node against the latest version of openssl
12:39 < hipsterslapfight> well fair enough nathan7 i see why you pasted that
12:39 < nathan7> hipsterslapfight: the actual implementation in V8 is in C++land probably
12:40 < nathan7> but it behaves the same as this, assuming it is called with an actual Array and Array#map and Array#join have their original values
12:41 < tasslehoff> Any idea how I can stop/kill node-archiver in the middle of an append?
14:05 < serapath> re
14:06 < serapath> isaacbw: what are tootallnates usual times?
14:06 < bnoordhuis> serapath: PST office hours
14:08 < serapath> bnoordhuis: thx
14:41 < merpnderp> I've been searching but can't find any. Have any NLP libs been ported to node? Might make a good project.
14:42 < merpnderp> Plus I'm curious how fast V8 will perform. The debian shootouts show V8 doing regex faster than any other language. 
14:49 < pagination> ping
14:49 < pagination> have a question regarding pagination and its implementation
14:50 < pagination> how to implement whenall results from db in one object limit list to x items and provide additional list links
15:00 <@isaacbw> merpnderp: it wouldn't be very fun in javascript
15:01 < kenperkins> morning isaacs, wonder if the streams2 hate is purely a function of communication?
15:02 < merpnderp> isaacbw: Why do you say that?
15:03 <@isaacbw> merpnderp: I suspect it would end up being a huge mess
15:03 <@isaacbw> other languages are far better suited to nlp
15:04 <@isaacbw> if you want to try pushing the limits of node, do some high speed network app
15:04 < merpnderp> isaacbw: because of text encoding?
15:04 <@isaacbw> no, not at all
15:06 < merpnderp> isaacbw: I've seen lots of impressive NLP projects in Java, but I don't know what it is about Java that makes it more appropriate than JS.
15:06 < merpnderp> Even some good libs in Perl. 
15:07 <@isaacbw> perl would be okay. Java would be better than javascript, but not by much
15:07 <@isaacbw> have you written anything large with javascript?
15:07 < merpnderp> isaacbw: So what makes Perl better than Java? regex as first class operators?
15:07 < merpnderp> hah, no.
15:08 < thomblake> isaacbw: How is JS not suited to nlp?
15:09 <@isaacbw> you guys
15:09 <@isaacbw> I need to drink my coffee
15:09 <@isaacbw> just do it and come back when you're completely bonkers
15:09 <@isaacbw> and tell me about how the peanut butter stole your glasses
15:09 < merpnderp> Writing large Perl apps would be just as hard as large JS apps it seems.
15:09 <@isaacbw> perl would be okay. Java would be better than javascript, but not by much
15:09 <@isaacbw> er
15:10 < pagination> anyone  built any web apps with pagination?
15:10 <@isaacbw> *java would be okay. Perl would be better than javascript, but not by much
15:10 < merpnderp> but most of the major NLP projects are written in Java.
15:10 <@isaacbw> that's mostly just a function of java being the pet language of academia
15:10 < merpnderp> I wish you could give specifics. 
15:10 < squeeks> It's only that because private enterprise told it to.
15:11 < merpnderp> JS is less well suited for NLP than Perl because of "X".
15:11 <@isaacbw> merpnderp: I had perl and java flipped
15:12 < squeeks> Where X = Everything under the Lingua:: namespace, Wordnet, etc
15:12 < merpnderp> squeeks: this whole thing started because I was thinking of porting those libs to JS.
15:12 < merpnderp> noce
15:12 < merpnderp> node.js that is
15:12 < squeeks> any reason why it needs to be node specific?
15:13 <@isaacbw> are you worked up over this? No one is stopping you from just trying it
15:13 < merpnderp> not at all except for fileaccess.
15:13 <@isaacbw> I know that if I wanted to start an NLP project, *I* wouldn't even think of using js
15:13 <@isaacbw> but that's just me
15:13 < merpnderp> isaacbw: once again, I wish you could give a single example for your reasoning.
15:13 <@isaacbw> if you're just porting anyway, it won't be an issue
15:14 < ckknight> if I wanted to start an NLP project, I would get someone else to do it for me and make a black-box service I can call
15:14 < ckknight> :P
15:14 < thomblake> I am so confused.  Since when is Java the pet language of academia?  and NLTK uses Python.
15:14 <@isaacbw> merpnderp: dynamic typing, no compile-time error checking, lack of mature build tools with invariance and unit testing, verbose regex semantics, verbose everything else
15:14 < ckknight> thomblake: around the mid-late 90s academia started to cling onto Java, ousting Pascal, C, or C++ from their previous thrones
15:15 <@isaacbw> thomblake: that's the trend now, but most schools still teach introductory classes with java
15:15 < merpnderp> isaacbw: don't those mostly apply to Perl also?
15:15 <@isaacbw> a few are switching to C++ and a few are switching to python
15:15 < ckknight> I'm not sure how things are nowadays in academia
15:15 < ckknight> not that I have much respect for academia anymore
15:15 <@isaacbw> merpnderp: scroll up, I said a few times that I had perl and java flipped
15:15 < merpnderp> isaacbw: ah, I see
15:15 < thomblake> I was under the impression most academics were about functional languages.
15:15 <@isaacbw> some are
15:16 <@isaacbw> most compsci professors I know use python for their personal projects if they can
15:16 <@isaacbw> functional language researchers are the crazy kids on the block
15:17 < merpnderp> isaacbw: It sort of sounds like you're making an argument against JS for any significantly sized project.
15:18 <@isaacbw> merpnderp: NLP is one of those things where it can be near-impossible to figure out what went wrong if everything isn't working properly
15:18 <@isaacbw> again though, if you're just porting stuff it probably doesn't matter
15:19 <@isaacbw> seriously, this is just my opinion, do it if you want
15:19 < thomblake> Has anyone checked out natural?
15:19 <@isaacbw> and if you pull it off, more power to you
15:20 <@isaacbw> and if you go crazy, then you'll have a better understanding of javascript
15:21 <@isaacbw> it's just going to be verbose and fugly
15:21 < nathan7> what's going to verbose and fugly?
15:22 <@isaacbw> writing an nlp library for node
15:22 < merpnderp> What is so special about NLP that makes its use case so much different from other projects. I've probably read the source of most of the perl libs 20 times. 
15:22 < merpnderp> I just don't see what's so special.
15:22 <@isaacbw> then do it, don't listen too closely to what I have to say
15:23 <@isaacbw> make sure to put it on github so we can read through it and see how wrong I am
15:23 <@isaacbw> I would appreciate a kick in the ass
15:23 <@isaacbw> in the
15:23 <@isaacbw> in the what
15:23 < nathan7> we know about the things you appreciate in your ass, dear.
15:24 < ckknight> nathan7: lulz
15:25 <@isaacbw> why do people listen to me
15:25 <@isaacbw> this damn op status is a curse
15:25 <@isaacbw> I have to explain myself
15:25 < ckknight> isaacbw: because people mistake you for isaacs and think you actually know something
15:25 < ckknight> :P
15:25 <@isaacbw> I've put in the topic a few times that I have no idea what I'm talking about
15:25 < ckknight> but no one listens
15:25 <@isaacbw> ah well
15:25 < ckknight> and just assume your word is truth
15:26 < ckknight> a heavy burden
15:31 < zaphod1984> i'm trying to determine if a http server is still running (or yet running) thus accepting connections. i know there is the possibility to check for server._handler but that seems rather hacky to me (internal api)
15:40 < phrearch> hey
15:41 < phrearch> anyone knows if mediastreams can be used with https://github.com/maxogden/websocket-stream ?
15:41 < phrearch> and if so, are there methods to provide routing with stream data?
15:42 < phrearch> i use to add some binary data in front of the actual payload, which is then decoded on the server, but dont know how that works with streams
15:42 < phrearch> like metadata
15:44 <@isaacbw> metadata 4 lyfe
16:10 < zaphod1984> does anyone have thoughts on that http server thing?
16:10 < merpnderp> isaacbw: I've always had trouble managing large apps in languages that don't have nice IDE's. For python, perl, and javascript I've always just used VIM and been happy enough. But I've just started playing with Webstorm for JS and am in love. This is like have visual studios for JS. All sorts of code completion, declaration finding, code reformatting magic. Might solve the large scale code management problems for me.
16:11 < bnoordhuis> zaphod1984: in or ex process?
16:12 < remysharp> Is there a way to read which environment variables have been set on the command line? *the keys, not the values* - ie. I want to enumerate the user's env switches to pass to a child process.
16:12 < remysharp> Or can I fire up a child process that inherits the parent's process.env?
16:14 < bnoordhuis> remysharp: you can specify an env when you create a child process
16:15 < remysharp> bnoordhuis: I've thought about just iterating process.env and using everything when I fire up the child, but I wondered if there was a more elegant way to do it.
16:16 < zaphod1984> bnoordhuis: inside the process. somthing like: var server = http.createServer(...); .... if(server.running()) { ... }
16:17 < bnoordhuis> zaphod1984: you can keep track of that yourself, right? the server won't go away until you .close() it
16:19 < zaphod1984> bnoordhuis: yes, that's true. in one case i tried .close() the server but actually the server was not already running, so the invocation of close threw another error.
16:19 < remysharp> hmm, seems the env values *were* being passed down. ignore me!
16:22 < zaphod1984> bnoordhuis: what i was trying to do: https://gist.github.com/zaphod1984/5851332
16:24 < bnoordhuis> zaphod1984: don't use 'uncaughtException', it's evil
16:25 < bnoordhuis> besides, in your example it's superfluous
16:25 < bnoordhuis> the uncaught exception will kill the process and therefore the server
16:27 < mscdex> zaphod beeblebrox!
16:27 < zaphod1984> bnoordhuis: i know it's evil, i just wanted to show my use case, the same applies for usage of domains. why would the uncaugt exception kill my server? the exception handler catches it and and shutting down the server (thus i can be sure that no other users are involved) i'm shutting down the process. afterwards it gets restarted.
16:28 <@isaacbw> merpnderp: Typescript might also be useful to you
16:29 <@isaacbw> the main reason that NLP in javascript doesn't appeal to me is that javascript's core usefulness is in callbacks, which I can't imagine being very useful for NLP which is pretty linear
16:29 <@isaacbw> javascript itself isn't that great without callbacks
16:29 < mscdex> :O
16:29 <@isaacbw> woops
16:29 <@isaacbw> javascript rocks!
16:29 < ckknight> anything that can be written in JavaScript will be written in JavaScript
16:29 < qard> blasphemer!
16:30 < qard> Shun the non-believer! :O
16:30 < ckknight> shunnnnn
16:30 < mscdex> sssshhhhhhunnnn
16:30 < merpnderp> isaacbw: the thing that caught my attention was the debian shootout for V8 regex. It was 7 times faster than Java8 and 16 times faster than mono.
16:30 < cla_> hello, I'm trying to run 2 apps on different ports but i get "listen EADDRINUSE" when i lunch the second app even thoungh the ports are different, the ports are not used by others applications
16:30 <@isaacbw> merpnderp: it's also missing a few semantics
16:31 <@isaacbw> but that's not a bad reason
16:31 <@isaacbw> I use regex in js all the time
16:31 < ckknight> merpnderp: have a link?
16:31 <@isaacbw> yea I want to see this
16:31 < ckknight> I know in Java and .NET, Regexes tend to be slow unless compiled
16:31 <@isaacbw> cla_: post some code
16:31 <@isaacbw> paste
16:31 < merpnderp> https://www.google.com/search?q=debian+shootout&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-beta
16:32 < ckknight> in V8, the JITter compiles Regexes as-needed
16:32 < ckknight> merpnderp: that's not a real link
16:32 < merpnderp> http://benchmarksgame.alioth.debian.org/u64/javascript.php
16:32 <@isaacbw> regex is pretty pluggable via libraries so I don't think it should be a huge influence in language choice
16:32 < bnoordhuis> cla_: evidently the operating system thinks otherwise
16:33 <@isaacbw> I'm not trying to disuade you from using js, that would be silly
16:33 <@isaacbw> man what am I even saying
16:33 < bnoordhuis> cla_: what OS is it?
16:33 <@isaacbw> I need to go outside
16:33 < cla_> osx mountain lion
16:33 < merpnderp> not even going to play with the benchmark?
16:33 <@isaacbw> plan9
16:33 < jdelgado> couchdb > cassandra?
16:34 <@isaacbw> erm
16:34 < merpnderp> oh, looks like it was java7 and JS was only 6 times faster and only needed 1/3rd the code.
16:34 <@isaacbw> jdelgado: they aren't in the same class
16:34 < ckknight> apples > oranges
16:34 < bnoordhuis> cla_: ah, os x... maybe check with lsof what if anything is tying up the port
16:34 < ckknight> we can all agree on that
16:34 <@isaacbw> cassandra is for big distrbuted redudnant data
16:34 <@isaacbw> *redundant
16:35 <@isaacbw> I've developed a taste for bananas
16:35 < jdelgado> And couch isn't? I've used cassandra in production, but someone just recommended couch to me
16:35 <@isaacbw> it's aight
16:35 <@isaacbw> aight
16:35 <@isaacbw> a'ight
16:35 < jdelgado> lmfao
16:35 < ggwalle> hi all
16:35 < ggwalle> how can i share cache in cluster?
16:36 < jdelgado> redis
16:36 < ckknight> ggwalle: redis is a good option, there are others.
16:36 < ckknight> memcached, for example
16:36 < ckknight> depends on your needs
16:36 < _6a68> YOU ENTER A CHAMBER FILLED WITH FLAMES.
16:36 < ggwalle> jdelgado: can i use mongo to cache data?
16:36 < jdelgado> honestly
16:36 <@isaacbw> jdelgado: did you do any cassandra schema design or did you just consume it?
16:36 < merpnderp> mongo is web scale
16:36 < ckknight> ggwalle: you could, but I wouldn't recommend it
16:36 < ggwalle> jdelgado: is mongo cache effective?
16:36 < jdelgado> isaacbw: Did it brah :D
16:36 < ckknight> merpnderp: well that's true
16:37 < jdelgado> ggwalle: Depends how fast you want it to be... redis is way faster.
16:37 <@isaacbw> woo cassandra 4 lyfe
16:37 < Lunar_Lamp> w/in 35
16:37 < ckknight> _6a68: I take the fire hydrant out of my inventory and use it on the flames
16:37 < _6a68> THERE ARE TROLLS TO THE NORTH AND SOUTH AND EAST AND WEST.
16:37 < _6a68> ckknight: YOU CANNOT GET YE FLASK
16:37 < ggwalle> jdelgado: compare with vert.x shared maps?
16:37 < ggwalle> jdelgado: http://vertx.io/core_manual_js.html#shared-maps
16:37 < ckknight> _6a68: I entire into the fire and allow this mortal vessel to be cleansed.
16:37 < merpnderp> http://www.xtranormal.com/watch/6995033/mongo-db-is-web-scale
16:38 <@isaacbw> I AM A GRUE. LET'S TALK ABOUT THIS
16:38 < jdelgado> isaacbw: But as my projects continue, the cassandra querying becomes more and more painful... :(
16:38 < jdelgado> ggwalle: Never heard of it
16:38 < ckknight> merpnderp: the one bad thing about that video is that MySQL is treated as the only other option. Postgres is a much better SQL solution, imo.
16:38 < ggwalle> jdelgado: thanks :-)
16:39 < eighty4> Trying to connect to a weechat relay using tls on node.js. On wee I get a "disconnected message". Any way to debug the connection a bit more on nodes side? Current code: http://paste.is/1256/
16:39 <@isaacbw> jdelgado: cassandra is for crazy people
16:39 < jdelgado> ggwalle: Good luck
16:39 < jdelgado> isaacbw: What chu you bruh
16:39 < merpnderp> ckknight: What is this MySQL you speak of? Is it somehow related to MariaDB?
16:39 < jdelgado> isaacbw: What chu you use* bruh
16:39 < ckknight> merpnderp: hehe
16:39 <@isaacbw> especially the latest versions which are more or less undocumented
16:39  * _6a68 takes off shirt, reveals ORACLE 4 LYFE tattoo
16:39 < merpnderp> ckknight: postgress++
16:39 < ckknight> :)
16:39 <@isaacbw> jdelgado: mongo and postgres
16:40 <@isaacbw> not at the same time
16:40 < jdelgado> shiiittt man, I want to like mongo, but its soo unstable
16:40 < ckknight> c'mon, isaacbw, you know you wanna replicate all your data in two places
16:40 <@isaacbw> yea?
16:40 <@isaacbw> lol
16:40 < ggwalle> jdelgado: can redies store js object?
16:40 < ckknight> ggwalle: you mean JSON?
16:40 <@isaacbw> redis can store anything you can serialize
16:40 < jocafa> flat files, suckahs!
16:40 < jocafa> ¬¬
16:40 < jdelgado> ggwalle: Yeah, just use hash for a JSON object
16:41 <@isaacbw> jdelgado: why do you say it's unstable?
16:41 < ggwalle> jdelgado: i mean, i use an js object as value
16:41 <@isaacbw> jdelgado: I'm seriously curious
16:41 < jdelgado> ggwalle: That's JSON. :)
16:41 < ckknight> ggwalle: so, JSON?
16:41 <@isaacbw> and don't doubt it
16:42 < jdelgado> isaacbw: I've had it shit out on me - we had a datacenter failure and it just sits there for hours rebuilding
16:42 < ggwalle> jdelgado: do i need call JSON.serials and stingfiy every time>
16:42 < ckknight> ggwalle: not if you use a sane library to do that for you
16:42 <@isaacbw> jdelgado: aw, that sounds miserable
16:42 < jdelgado> isaacbw: And for some reason, I had replication to two nodes just stop in production for no reason
16:42 < ckknight> is JSON web-scale? Eh, probably not, better write my own serializer and parser that runs at 1/20th the speed.
16:42 < jdelgado> isaacbw: lol
16:42 <@isaacbw> how long ago was that jdelgado?
16:42 < jdelgado> ggwalle: Yeah
16:42 < ggwalle> ckknight: what is sane library mean?
16:43 < ggwalle> ckknight: give me an chooise?
16:43 < jdelgado> isaacbw: Like 6 months ago
16:43 <@isaacbw> oh wow okay
16:43  * jocafa pets protobuf
16:43 < jdelgado> isaacbw: yeah... and BSON makes my eyes bleed
16:43 < ckknight> ggwalle: pretty much any library you use will handle serialization/deserialization for you.
16:44 < fostahgix> hey has anyone here used node-http-server?
16:44 < jdelgado> ggwalle: I'm not positive, but i'm sure theres a module on npm for this...
16:44 < ggwalle> ckknight: ok, thanks
16:44 < jdelgado> fostahgix: What on earth is that
16:44 < ggwalle> jdelgado: how fast socket.io is ?
16:45 < jdelgado> ggwalle: It's.. instant..
16:45 < ggwalle> jdelgado: is there any bechmark of current version of socket.io?
16:45 < fostahgix> jdelgado: its a proxy server for node.js written by nodejitsu, and im trying to find a way to use it to handle redirects
16:45 <@isaacbw> as fast as the internet
16:45 < jdelgado> ggwalle: In terms of what?
16:45 < qard> It can send messages back in time! :O
16:45 < manacit> I'd hazard a bet that socket.io is fast enough to not be the slowest part of your app
16:46 < ggwalle> jdelgado: performance
16:46 <@isaacbw> lol
16:46 < jdelgado> ggwalle: It won't be your bottleneck, don't worry abou it.
16:47 < qard> Performance of socket.io is great. I'd be more worried about stability.
16:47 < prettyrobots> Greetings.
16:47 < ggwalle> jdelgado: ok, now i'm very care about node is cluster can work well.
16:47 < ggwalle> jdelgado: because node's design is sigle process
16:47 < jdelgado> Yeah, all my clients run short pulls because there were way too many requests not getting triggered
16:47 < ckknight> ggwalle: cluster works great
16:48 < qard> Yep, cluster is pretty stable.
16:48 < jdelgado> ^
16:48 < ggwalle> ckknight: ok, thanks, but it's not marked as stable
16:48 < ggwalle> jdelgado: :-)
16:48 < ckknight> it's pretty stable
16:48 < ckknight> if you're worried about it, don't bother using node.js until it hits 1.0
16:49 < ckknight> we're on somewhat of the bleeding edge and have to deal with that
16:49 < jdelgado> ggwalle: I think you're looking at the documentation - which means the API's might change
16:49 < ckknight> things work most of the time
16:49 < qard> It's only marked stable because the API could still change.
16:49 < qard> not marked*
16:49 < ckknight> and if things change, it's not as if the API will magically change one day, you'd have to update your node version and everything.
16:49 < cla_> bnoordhuis: no issue, only the 2 node pid on the 2 ports
16:50 < ggwalle> jdelgado: yes
16:51 < ggwalle> jdelgado: i can not understand why node is so slow http://www.techempower.com/benchmarks/
16:52 < qard> Anything marked as experimental is a stable release is usually stable enough in terms of not crashing your app, just the API is not necessarily locked down yet.
16:52 < jdelgado> ggwalle: That's just a bench on how it responded to some pre-formulated thing. Node is fast.
16:53 < ggwalle> jdelgado: but why in  pre-formulated things, node is 2x slow than vert.x
16:53 < ggwalle> jdelgado: i have check the bechmark code of node part, it's use cluster...
16:54 < jdelgado> ggwalle: Are you trolling?
16:54 < jdelgado> I can't tell
16:55 < ggwalle> jdelgado: sorry..
16:55 < merpnderp> ggwalle: you're also missing a major point of node.js. Memory usage will tend to be much smaller.
16:56 < noocx> hi
16:57 < jdelgado> hi
16:57 < ggwalle> merpnderp: to speed, i'm no very care memory usage...
16:58 < ggwalle> merpnderp: 2x memory usage to get 2x speed, i think it's good things..
16:58 < merpnderp> ggwalle: well for 20 DB queries, node.js is roughly the same speed as Java servlet queries. Not that anyone would every write a web app using raw anything.
16:59 < ggwalle> merpnderp: "Not that anyone would every write a web app using raw anything." i can not understand, sorry
17:00 < merpnderp> ggwalle: without a web framework. 
17:00 < ckknight> also, those benchmarks use various different db backends and such
17:00 < ckknight> surely that would cause different results
17:00 < ckknight> testing how everything fares using the same tools would make more sense, wouldn't it?
17:00 < _6a68> jdelgado: http://www.quickmeme.com/meme/50vd/ ?
17:01 < jdelgado> _6a68: lmfao!
17:01 < ckknight> _6a68: didn't you hear that quickmeme is dead now? :P
17:01 < merpnderp> It's a pretty poor benchmark. But no, JS isn't going to be as fast as Java or .Net or C or C++. If you want speed, you should apparently use the Gemini Java framework.
17:01 < _6a68> ckknight: I usually use giphy to spam IRC, but that'n is classic
17:01 < jdelgado> skebcio: _6a68 Pshh no it's not - i'm on there all the time
17:01 < _6a68> evergreen, methinks.
17:01 < ckknight> merpnderp: actually it depends on the case. It could be faster than or on-par with Java or .NET in the right circumstances.
17:02 < ggwalle> ckknight: you can check vertx and node in that table, both of them use mongo..
17:03 < jdelgado> I'm getting my das keyboard tomorrow, pretty exciting
17:03 < _6a68> merpnderp: are you trolling?
17:03 < _6a68> merpnderp: JS JIT technology gets awfully close to C speeds for CPU-intensive stuff
17:03  * _6a68 can't tell if everyone is trolling this morning
17:04  * ckknight thinks _6a68 is trolling
17:05 < _6a68> ckknight: heh. just want to avoid lies being spread about JS engines. they are stupid good.
17:06  * ckknight hugs V8
17:06 <@isaacbw> asm.js gon be da shit
17:06 < ckknight> I also keep being pleasantly surprised at SpiderMonkey's performance
17:06 < ckknight> isaacbw: I'm skeptical until it gets wider support.
17:06 < ckknight> but I am excited about it
17:07 <@isaacbw> the nice thing is that you can use asm.js code in any old js runtime
17:07 < ggwalle> ckknight: is socket.io include redis default? so i no need to install redis node support?
17:07  * _6a68 nods
17:07 < ckknight> yeah, but it tends to run pretty poorly for the cases when you actually need near-native speeds
17:07 < _6a68> I'm actually super excited to try to nab an odinmonkey t-shirt, the design is fantastic
17:07 < ckknight> ggwalle: I don't know
17:09 < nathan7> ckknight: meh
17:09 < nathan7> ckknight: V8 is being optimised for asm.js style code
17:09 < nathan7> ckknight: It doesn't do the whole "use asm" thing - they're just going to make their VM faster, not add another specific VM
17:10 < ckknight> yeah
17:10 < ckknight> that's a better solution, imo
17:10 < nathan7> mhm
17:10 < ckknight> (x|0 + y|0)|0 can be optimized quite efficiently
17:10 < nathan7> Yeah
17:11 < ckknight> it would be nice if they even get the case of x = (x|0 + 1)|0 faster than ++x
17:12 < _6a68> ckknight: there are lots of tricks you can use independent of asm.js to help the JIT be faster. but it's really really hard to benchmark effectively, since there's a warming period involved
17:12 < ckknight> yeah
17:14 < _6a68> ckknight: I haven't kept up with the JIT magic tricks, aside from catching dave mandelin's mind-melting talk at velocity a few years ago. do you know of any good articles/talks on the subject?
17:15 < _6a68> I figure game devs would have uncovered a lot of this stuff
17:15 < ckknight> _6a68: http://www.youtube.com/watch?v=UJPdhx5zTaw
17:15 < ckknight> and http://www.html5rocks.com/en/tutorials/speed/v8/ is also handy
17:16 < _6a68> ckknight: great! thanks very much :-)
17:16 < kenperkins> mikeal anyone else had troubles with npm install nodeconf2013
17:16 < mikeal> not that i know of
17:16 < mikeal> lunny had issues, but they were crazy local npm bugs
17:16 < _6a68> ckknight: link to the slides/blog post about dmandelin's talk https://blog.mozilla.org/dmandelin/2011/06/16/know-your-engines-at-oreilly-velocity-2011/
17:23 < kenperkins> mikeal: https://gist.github.com/kenperkins/d5bd3ab9378306e4dd39
17:23 < kenperkins> caveat: I'm by no means an npm expert :P
17:25 < darkPassenger> Hi all
17:26 < darkPassenger> if I was to route a dynamic url in order to write an xml file and return son html p messages, how would I go about the http method to use ? 
17:26 < darkPassenger> would I use a post
17:27 < ckknight> you're fetching data, not creating a resource, right, darkPassenger?
17:28 < darkPassenger> im creating one
17:28 < darkPassenger> i write an xml file
17:28 < ckknight> sounds like you're wanting a POST or PUT, then
17:28 < darkPassenger> ok . 
17:28 < darkPassenger> ill try ill brb
17:28 < plops> ajjaa
17:29 < plops> interesante.... como tor funciona...
17:29 < plops> muy interesante
17:29 < plops> Sorry
17:30 < fiws> kenperkins, might be because u use windows.. (?)
17:30 < kenperkins> except im on osx?
17:30 < kenperkins> lol
17:30 < rossk> System Darwin 12.4.0
17:30 < fiws> *might be because u use osx
17:31 < rossk> kenperkins: I'm testing on osx
17:31 < rossk> but I think we're on diff node/npm versions
17:31 < kenperkins> npm ini can switch
17:31 < darkPassenger> i keep getting 404
17:31 < darkPassenger> but when I get to the url manually it works
17:32 < ckknight> darkPassenger: going to the URL manually does a GET
17:32 < kenperkins> rossk: I can switch easily
17:32 < rossk> kenperkins: I'll ping you when its done installing
17:32 < rossk> my poor macbook air is gasping for air
17:33 < mikeal> kenperkins: ping isaacs about that
17:33 < mikeal> it looks like an npm problem
17:33 < kenperkins> mikeal: that's what I expected 
17:33 < kenperkins> haven't seen isaacs active yet today :P
17:35 < rossk> kenperkins: worked here for me on osx, v0.8.21, 1.2.11
17:35 < rossk> osx 10.8.3
17:35 < kenperkins> yea not for me :P
17:36 < rossk> :-/
17:36 < kenperkins> tried 0.10.12, 10.5, 8.23
17:36 < kenperkins> (with matching npms)
17:36 < zbzzn_> isaacbw was active couple hours ago
17:36 < kenperkins> that's not isaacs :P
17:36 < zbzzn_> its the black and white version?
17:42 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:53 < jdelgado> Anyone ever use couchbase in production?
17:54 < jdelgado> Looking at it now.. the documentation looks a little too good to be true
18:12 < jaCen915> jdelgado: looks worth exploring
18:14 < jaCen915> jdelgado: although if you look at the getting started video the only person to comment on the video has a nazi swastika so I'm going to have to now assume couchbase is for bad people
18:18 < jdelgado> jslatts: lmfao
18:20 < jslatts> jdelgado: i'm sure that was an autocomplete error, but strangely enough, we do use couchbase in production :)
18:20 < jdelgado> jslatts: Any problems?
18:20 < jslatts> not with couchbase itself. but the node.js drivers are… sad
18:20 < jslatts> clients i mean
18:21 < jdelgado> Yeah, I noticed...
18:21 < jslatts> the cluster admin is super easy and so far has been very reliable for us
18:21 < jslatts> i just upgraded them all today actually, to 2.0.1
18:21 < jdelgado> Do you do cross-datacenter replication?
18:21 < jslatts> and dropped a node, upped the sizes of the rest. it was all very easy
18:21 < jslatts> not yet, but thats something we are planning on doing
18:22 < jdelgado> I'm just trying to find a good database that doesn't suck for multi-master cross datacenter
18:22 < jslatts> thats why we chose it
18:22 < jslatts> but we have been taking it slowly. our alternative was cassandra.
18:23 < jdelgado> Nice, well maybe i'll slap it on some instances
18:23 < jslatts> which seemed a bit easier to shoot yourself in the foot with if you don't really know what you are doing
18:23 < jaCen915> jslatts: I saw couch base against Mongo and looks like CB wins out, but have you bench tested any of it or can you verify?
18:24 < jdelgado> Yeah, we're using cassandra right now, I can't handle the queries anymore.. we have a elastic search cluster paired with it to just so simple stuff.
18:24 < jslatts> jaCen915: re performance? no, we haven't. Performance was not a big concern for us, resiliency and ease of cluster growth were our main criteria
18:25 < jaCen915> jslatts: :) 
18:25 < jslatts> we are also very read heavy which is another ding against cassandra
18:25 < jdelgado> I wish we could get all these brilliant database developers in a room and pump out a perfect one.
18:26 < jslatts> something about CAP theorem :)
18:26 < jdelgado> I couldn't do it to save my life... the CAP theorem scares me.
18:27 < jslatts> jdelgado: just too many things to know these days. i could probably keep someone busy full time just managing our data storage
18:29 < jdelgado> Indeed
18:30 < jslatts> jdelgado: I guess the only thing I will say about couchbase is that it does feel magical… which has always been a bit of a warning sign to me. But i'm not sure how mongo or cassandra would be any less difficult for me to debug if things so sideways
18:30 < jslatts> s/so/go
18:31 < Skullclown> is there any way to encrypt a specific node.js server.js file and decrypt it when the server runs? I know the concept of node.js and how javascript works but someone mentioned it was possible, so I'm just asking again to be sure.
18:31 < jdelgado> jslatts: Yeah, I know that feeling
18:32 < bnoordhuis> Skullclown: not really
18:32 < jdelgado> Skullclown: You can using other languages
18:32 < jdelgado> Skullclown: Like a C file that loads it...
18:32 < jdelgado> Skullclown: But they can just see the decryption key in the file, so that it kind of useless
18:33 < Skullclown> jdelgado: I'm not expecting magical encryption :) I just don't want it to be as easy as right-clicking a file
18:34 < Skullclown> I would prefer to use filesystem encryption but I don't know of any linux encryption software that can encrypt specific files
18:34 < gildean> use ssl to encrypt and decrypt the file
18:34 < jas-> Skullclown: what are you trying to protect? technically if your trying to use some opaque symmetric encryption the key will be loaded into memory already due to high loads the applications need to decrypt prior to runtime. Because of this process if the server has been compromised the memory could easily be read providing the attacker easy access to decrypting the source for your node instance
18:35 < jas-> Skullclown: GPG & OpenSSL (as gildean) can do what you want
18:36 < Skullclown> jas-: I don't mind as much if the server is compromised. it's a raspberry pi. I just don't want it to be as easy as plugging the SD card into another computer and just reading the file :)
18:36 < Skullclown> I also don't expect them to do that, I'd just like -something- for peace of mind
18:36 < jas-> Skullclown: I was afraid I typed that too fast to make sense
18:37 < Skullclown> ideally, when plugging the SD card into another computer, they won't be able to read it. but plug it into the raspberry, let it boot, and it should do its thing.
18:38 < peterlubiana> Hi! I'm moving into node.js world and wondering if any of you guys have a well-written book to recommend me?
18:38 < squeeks> by the time someone prints a book on it, it'd be out of date.
18:38 < peterlubiana> squeeks: Ofc.. But books are powerful. And for a newb its a good thing!
18:38 < jas-> Skullclown: For a small footprint there are tons of GPL'd AES encryption examples, or you could take it a step further and use the scrypt library.
18:39 < peterlubiana> squeeks: I feel like a book can give a decent overview so i can know where to go next ++
18:39 < jaCen915> peterlubiana: I like nodejs up and running
18:39 < _6a68> peterlubiana: I also like to read books on a topic rather than troll the web for unrelated blog posts. how well do you know JS?
18:39 < Skullclown> jas-: node-scrypt?
18:40 < peterlubiana> _6a68: I know JS pretty well.
18:40 < peterlubiana> jaCen915: Thank you i'll write that down!
18:41 < jdelgado> Skullclown: Sorry, I went AFK. If you want system level, then it doesn't matter what language it is in
18:41 < jas-> Skullclown: As for the actual key being used to encrypt or decrypt the file in question you can write a custom piece of software to read in physical device attributes such as memory, IRQ's, etc to generate a unique (per system hardware) encryption key to protect the source code. I was thinking scrypt in C or C++. Using node-scrypt may work within the node instance but to protect the running...
18:41 < jas-> ...source it would prove useless
18:42 < jdelgado> Skullclown: Couldn't you just do a git-pull everytime you want to run it, then delete it? 
18:42 < Skullclown> jdelgado: no access to the internet :)
18:42 < Skullclown> (the raspberry pis *)
18:42 < _6a68> peterlubiana: ok, so just node. node up and running is the best one I've read, there isn't any really great book though. nothing like the wrox JS for professionals book for learning front-end JS, for instance.
18:42 < jdelgado> Skullclown: Why are you trying to encrypt it then? If someone steals it?
18:43 < Skullclown> ideally, I'd love to encrypt both the system (if possible, limit it to a specific folder) and the code (content of the .js file)
18:43 < Skullclown> jdelgado: I don't think someone would steal it. but in the small chance that someone would try, I just don't want it to be as easy as plugging it into another computer and just reading it :)
18:43 < jas-> Skullclown: Encrypted filesystems are supported on all linux distro's (ext2, ext3, ext4, reiserfs etc)
18:43 < squeeks> murderfs
18:43 < jdelgado> Skullclown: Then why don't you do that..? lol
18:44 < jas-> Skullclown: When setting up the filesystem simply run cryptSetup luksEncrypt /dev/<hdd0>
18:44 < peterlubiana> _6a68: Thank you so much ! I'm getting it now. Really kind of you to take the time _6a68 May all the gods on all the religions && science bless you!
18:44 < Sonicrida> thoughts on this book? http://www.manning.com/cantelon/ I'm just starting as well and a bit lost myself.
18:44 < jdelgado> Science bless you... I just might start using that.
18:45 < jaCen915> jdelgado: lol
18:45 < jaCen915> peterlubiana: check the link i sent
18:45 < peterlubiana> same to you jaCen915 !
18:45 < jas-> Skullclown: lol, or you could simply run a live honeypot like i do... and sorry it is cryptsetup luksFormat /dev/<hdd0>
18:46 < _6a68> Sonicrida: I haven't read it, sorry. worst case, it's a weekend day spent wading through an unenlightening draft :-)
18:46 < peterlubiana> Forgive me jaCen915 I cant see any link! I dont know how to go into private conversations if that was how you sent it to me! Im running this weird version of irc inside emacs so i'm completely helpless XD
18:47 < jaCen915> peterlubiana: ah that's why
18:47 < Skullclown> jas-: is it in any way possible to encrypt a specific folder instead of an entire partition?
18:48 < Sonicrida> _6a68: That's a pretty nice way to put it haha. I'll check it out.
18:48 < _6a68> Sonicrida: :-)
18:48 < jaCen915> peterlubiana: see if you can figure out how to private message me, if not no worries :)
18:48 < Skullclown> apparently eCryptfs can do that?
18:49 < peterlubiana> jaCen915: on it ! Need to learn how to deal with this blasted monster sooner or later 
18:49 < jaCen915> peterlubiana: :P
18:56 < bnoordhuis> >> var eps = 0.5; while (1.0 + eps > 1.0) eps *= 2; eps
18:56 < purr> bnoordhuis: Timeout Error: Execution time exceeded 2 seconds
18:56 < bnoordhuis> you'd think it converge eventually but no
19:01 < Sirisian|Work> I need someone's help who has used node.js and the ws module  with nginx preferably with SSL: http://pastebin.com/4BWHLMnX That's my configuration currently. Can't figure out what root should be set to or proxy_pass.
19:01 < jdelgado> Sirisian|Work: Is this for the same node, or you're using it as a proxy?
19:02 < jdelgado> Sirisian|Work: Just looked at the config - why not just go straight to node?
19:02 < Sirisian|Work> I'm not sure what you mean.
19:02 < vk_> Where can I find the docs for the --dev option of npm install?
19:03 < jdelgado> Sirisian|Work: You have nginx acception incoming connections, decrypting ssl, then passing it to node, no?
19:03 < Sirisian|Work> jdelgado, not sure what's happening. First time using node.js or nginx.
19:04 < jdelgado> Sirisian|Work: Get rid of nginx, just pipe your requests straight to node.
19:04 < someprimetime_> I'm using Q, and I'd like to be able to skip some methods in the chain if the incoming request doesn't satisfy the requirements for my promises… for example I've got a user settings page where the user can upload an avatar (optionally), as well as change their name, email, password (all optional as well). If they change both their name, email, and upload an avatar, I'd like to only make one update call to the database 
19:04 < someprimetime_> instead of separate ones
19:04 < someprimetime_> but if they don't upload their photo but change their name, I'd like to just skip the photo uploading portion
19:05 < T0bsn> anyone here working with neo4j? need some help with relations
19:05 < someprimetime_> I can post my current code but I'm not sure what the best way to handle this with Q is
19:05 < someprimetime_> I was thinking I could break it up into 2 separate chains
19:05 < someprimetime_> one for the photo uploading
19:05 < someprimetime_> another for the text info updating
19:05 < someprimetime_> but ideally, at the end I'd like to just make one db update
19:05 < jdelgado> someprimetime_: spamming is bad
19:06 < someprimetime_> jdelgado: life pro tip
19:08 < Sirisian|Work> jdelgado, If it's so easy to just not use nginx then why isn't anyone else doing that? All I see online are people using nginx and node.js
19:09 < jdelgado> Sirisian|Work: I haven't seen anything doing that in at least a year. Old articles?
19:09 < Sirisian|Work> jdelgado, do note that I plan to have https content and node.js running on the same port and ip
19:09 < kcbanner> I'm having an issue where node-gyp is using clang and it should be using gcc, yet the CC/CXX env vars don't seem to do anything
19:10 < jdelgado> Sirisian|Work: All you have to do is include the https module, import your key and cert like the doucmentation defines, and you just eliminated the extra hop of nginx.
19:11 < Sirisian|Work> jdelgado, And this will still allow nginx to run on port 443?
19:11 < Sirisian|Work> Also what documentation are you referring to?
19:12 < jdelgado> Sirisian|Work: Get rid of nginx, read the node.js documentation in the https section and you're done.
19:13 < kmczn> someprimetime_:  your db update is the only async operation?
19:13 < someprimetime_> kmczn: no, I'm also using gm to resize the uploaded photos
19:16 < kmczn> someprimetime_:  maybe the fin function is what you're looking for.
19:18 < kmczn> can't find a link but just search for fin here: http://documentup.com/kriskowal/q/
19:18 < someprimetime_> thanks reading it now
19:18 < someprimetime_> appreciate it
19:22 < darkPassenger> i keep getting 404e
19:22 < darkPassenger> exit
19:22 < darkPassenger> sorry
19:24 < Sirisian|Work> jdelgado, hmm following the documentation and I get "Error: DEPTH_ZERO_SELF_SIGNED_CERT" when my server is running. I created the key and cert correctly.
19:25 < merpnderp> _6a68: I wasn't trolling. Just pointing out that for most use cases Java is going to be faster.
19:27 < Sirisian|Work> oh hmm soemthing about rejectUnauthorized: false needs to be used
19:29 < _6a68> merpnderp: I dunno about that particular blanket statement ;-) did you know the HotSpot team wrote V8 and maintained it until recently (sadly they're now working on Dart)?
19:29 < _6a68> merpnderp: JS JIT compilers are sufficiently advanced that, like "C++ vs Java" shootouts, it really depends on the specific application
19:36 < Beg_> Hey, I got a link some days ago that showed what to think about when writing a authentication system?
19:38 < merpnderp> _6a68: notice I started on this channel this morning pondering a port of Perl's NLP libs to JS because the debian shootout shows JS to have the fastest regex processing of any language but C.
19:39 < _6a68> merpnderp: I didn't see that in the scrollback. what's the shootout link?
19:39 < merpnderp> _6a68: http://benchmarksgame.alioth.debian.org/u64/benchmark.php?test=all&lang=v8&lang2=java&data=u64
19:39 < _6a68> merpnderp: nice! thanks
19:40 < merpnderp> _6a68: it's a fun link and kept relatively up to date.
19:40 < merpnderp> _6a68: heh, but notice there is no implementation of the pidigits test for JS :P
19:41 < zeekay> eh where did it go
19:42 < zeekay> v8 used to look bad compared to most of the other implementations
19:42 < zeekay> which used gmp
19:43 < zeekay> i remember because I rewrote the js version to use gmp for fun
19:43 < nathan7> zeekay: JS-to-C is slow
19:43 < zeekay> https://gist.github.com/zeekay/2829221
19:43 < nathan7> zeekay: on V8
19:44 < nathan7> zeekay: so that kind of fucks it over for reasons unrelated to JS's speed
19:44 < zeekay> which brought it into within 2x of the C/C++ versions i think
19:49 < zeekay> no luajit, no pypy anymore
19:51 < vk_> Is there a way to install top-level devDependencies while in a production environment with npm?
19:51 < merpnderp> poor perl gets smoked by JS on the regex test.
19:52 < nathan7> vk_: make them into dependencies. they clearly aren't devDependencies since you need them in production.
19:53 < Havvy> merpnderp: That's ironic...
19:53 < vk_> nathan7: I've got a staging area that will be switched into a production area, I'd like to keep the dependencies seperate if possible.
19:53 < jdelgado> Sirisian|Work: Why are you using a self signed cert?
19:54 < Sirisian|Work> jdelgado, Because I'm just testing an idea atm. Should I get a signed cert? I tried setting rejectUnauthorized: false and it did nothing.
19:54 < Sirisian|Work> It looks like you can't use unsigned certs and I can't find a workaround.
19:55 < jdelgado> Sirisian|Work: It will work fine, but your client probbably wont accept it.
19:55 < jdelgado> jdelgado: Explicitly allow it on your client, or it wont trust the server
19:55 < jdelgado> Thats the entire point of SSL... trust
19:56 < Sirisian|Work> I'm using the node.js's ws module. Documentation doesn't have an ssl client example
19:56 < Sirisian|Work> I assume it's the same Websocket as in the spec though. I'll check for an option.
19:56 < jdelgado> Sirisian|Work: Why dont you just use socket.io like everyone else
19:58 < Sirisian|Work> I read online that ws was better
19:58 < jdelgado> Sirisian|Work: You also read that nginx + node.js was a good idea... :)
19:59 < Sirisian|Work> jdelgado, I'm still not sure if your way is the best. From what I can tell by not proxyign through nginx I lose port 443 for nginx on that ip
19:59 < jdelgado> Sirisian|Work: There is a reason why it is one of the most starred packages
20:00 < jdelgado> Sirisian|Work: I don't know where i'm loosing you.. you monitor port 443 on your node instance
20:00 < jdelgado> Sirisian|Work: All nginx did was move something from one port to another.. a completely useless middleware.
20:01 < Sirisian|Work> yeah I turned off the nginx stuff I'm using just node.js for the moment.
20:01 < durangooo> Is there anyway to send a JS object across the network to another JS application?
20:01 < Engin> i've did some node.js before but forgot the ecosystem mostly. it was basically a scalable tcp/ip framework. what if i want to serve a http api ? what is the recommended mixture ?
20:01 < durangooo> Without using JSON stringify etc.
20:01 < jdelgado> durangooo: dnode?
20:02 < jdelgado> Engin: I use express for my api
20:02 < durangooo> jdelgado:  oh that might work actually let me try thanks! :)
20:03 < jdelgado> durangooo: Best of luck to you, dir
20:03 < jdelgado> durangooo: Sir*
20:03 < durangooo> jdelgado:  https://github.com/substack/dnode/blob/master/lib/dnode.js#L3 dont think itll work
20:03 < Sirisian|Work> jdelgado, socket.io uses ws for it's websocket implementation :P
20:04 < jdelgado> durangooo: I thought you meant without having to invoke it on your own - why can't you use it?
20:04 < jdelgado> Sirisian|Work: Yes - and it also supports ssl...
20:04 < durangooo> jdelgado: im trying to setup one process to manage databsases, and im using sequelizejs for that
20:05 < durangooo> which has circular references
20:05 < durangooo> in another app, im trying to talk to the model app in a way where i can just retrieve "all of the models" :)
20:05 < jdelgado> durangooo: http post to eachother..?
20:05 < durangooo> but axon-rpc uses json.stringify for JSON objects as a codec :/
20:06 < durangooo> jdelgado: i dont think that would solve my problem either tbh :/
20:06 < Engin> jdelgado: ok, i'll check
20:06 < durangooo> since JSON.stringify *still* regardless of what protocol it uses can't stringify circular references
20:06 < durangooo> so i was wondering if there was a way to just straight up send a JS object
20:06 < Beg_> jdelgado-> Did you give me that password practice page from stackoverflow a couple of days ago? Could you relink it if it was you.. :p
20:07 < Beg_> I tried searching for it but I cannot find it
20:08 < jdelgado> durangooo: Yeah, I don't know how you would send a javascript object... that just isn't really how the processor works.. I suppose you can create a c module..
20:08 < durangooo> jdelgado:  right
20:08 < jdelgado> Beg_: I could have, but I don't remember, sorry
20:08 < durangooo> ok thanks :)
20:09 < jdelgado> durangooo: Heh, I wish I could be more help - good luck
20:09 < Beg_> http://stackoverflow.com/questions/549/the-definitive-guide-to-forms-based-website-authentication/477578#477578
20:13 < ts33kr> Hey everyone. Is there away for "files" field in the package.json to include only contents of a given folder, without the actually folder prefix?
20:13 < Stew-a> durangooo: you could probably write a wrapper or pre/post-processor for json.stringify and .parse that converted your circular references into some kind of 'magic marker' and back again at the other end, i don't know of anything that already exists to do it though
20:14 < ts33kr> That is, if I have lib/dir1, lib/dir2, is there a way to include dir1 and dir2 directly in the package? Without lib/ prefix?
20:14 < durangooo> Stew-a: sounds complicated :P I'll just restructure my app I suppose :(
20:17 < samholmes> How do I write unit tests for my module, finisher?
20:20 < jaCen915> samholmes: have you tried assert / restler ?
20:20 < samholmes> no
20:21 < samholmes> isn't restler a http client lib?
20:21 < jaCen915> samholmes: not positive restler will help because it pings the API (not just a module) but assert can do simple equals, not equals
20:21 < samholmes> what does restler have to do with testing code?
20:21 < jaCen915> samholmes: we use it to make http requests and check the returned data with assert
20:25 < Kneta> j angularjs
20:25 < Kneta> oops =)
20:28 < deanclkclk> hello node.js people
20:33 < daslicht> hello 
20:48 < samholmes> If I put test in a /test dir in my github repo, how can I prevent this dir from being shipped with the package in npm?
20:48 < samholmes> Do people who write tests just ship the tests with the package?
20:49 < jdelgado> samholmes: First question, .npmignore works the same as .gitignore - second question, most people leave the tests incase someone wants to modify your package downt he line.
20:50 < samholmes> I'm going to write the tests with vanilla JS, is there a convention I should follow?
20:50 < squeeks> just use assert().
20:50 < jdelgado> samholmes: I'd just write it with chai and mncha
20:51 < jdelgado> mocha*
20:59 < Shayanjm> If I have three separate instances for my development/staging/production environments respectively
20:59 < Shayanjm> what are some node best practices for deploying/keeping code tidy?
21:08 < jdelgado_> Got disconnected, so sorry if this is a repeat
21:08 < jdelgado_> Shayanjm: I just develop locally, then when I'm happy with it, I'll put it to git and do a pull on the testing server - have the beta terters take a crack at it for a month, then do a production pull
21:08 < Shayanjm> gotcha
21:16 < Technodrome> hey, i want to add like a live support kinda thingy to my site 
21:17 < Technodrome> whats the best way to get started with that in node, any packages that people use etc for this?
21:17 < merpnderp> Technodrome: socket.io
21:17 < Technodrome> i was just thinking about implementing it over xmpp 
21:17 < jdelgado> Technodrome: It's a lot more complicated than you think - I've gone down that road
21:18 < Technodrome> well, i don't have many options, it can be pretty simple 
21:18 < Technodrome> and i've been programming for years, it really shouldn't be that impossible i wouldn't think :) 
21:18 < chadams42> I'm trying to use Q with node, updating a db using mongoose, I want to add records in a forEach, how would I setup the Q promises in this situation?
21:19 < radu> @chadams42 use Q.all()
21:19 < radu> here s an example: https://gist.github.com/samsonradu/18d41ba9fba9e37c7f24
21:19 < neeky_> Shayanjm, I have three branches in Git, one dev, one production, and one staging
21:20 < neeky_> when I git push any branch I then log into the respective server, switch to that branch and pull
21:20 < Shayanjm> gotcha
21:20 < jdelgado> indeed ^ neeky_ 
21:21 < neeky_> you can go a bit further and use git post-commit hooks to fetch and restart automaticaly on your serverd
21:21 < neeky_> you just need a hidden route in your app that your post-commit hook does a curl on
21:22 < jdelgado> Man, I wish we had enough of a budget to keep testing servers on 24/7
21:22 < jdelgado> that would be amazing
21:22 < neeky_> i cherry-pick, merge, etc between branches as fixes are made
21:22 < Technodrome> jdelgado: what caused you the issues?
21:24 < neeky_> jdelgado, a micro instance at aws is free for 1 year for new users
21:24 < jdelgado> Technodrome: web sockets dont always fire, problems with sessions not matching up due to refreshes, just a slew of things that make it take longer than it should.
21:24 < Technodrome> i want to use web sockets, but use the comets way as a backup 
21:24 < jdelgado> neeky_: We're PCI complaint, so we have to do copy the entire infastructure over :(
21:24 < neeky_> thats what i'm using for testing and production
21:24 < neeky_> ugh
21:25 < jdelgado> Yeah, tell me about it.
21:25 < neeky_> yeah, I will be HIPAA compliant once in production
21:25 < jdelgado> Technodrome: I would do a short poll as a backup
21:25 < neeky_> but HIPAA is actually easire that PCI
21:25 < jdelgado> Hell yeah it is
21:25 < neeky_> i run mongoose on ecryptfs volumes, use ssl, and I've pretty much nailed it
21:25 < jdelgado> lol
21:25 < jdelgado> I wish
21:26 < paulkon> hippa complaince for which app?
21:26 < neeky_> paulkon, for the app I'm writing
21:26 < Technodrome> jdelgado: so either web sockets or poll? just skip the whole comets thing?
21:27 < jdelgado> Even though AWS is PCI Level 1 Compliant, we still have to get permissions to let the auditor on sight, then he complains about data being streamed across regions, even though its trice encrypted.. it's just a joke.
21:27 < Technodrome> jdelgado: this live support will be extremely simple, but at the same time, very much linked in to the system
21:28 < jdelgado> Technodrome: I would just do a short poll, sockets kind of suck, they're not 100%
21:28 < Technodrome> its either that, or modify the hell out of a php one, i think node will be the best way 
21:28 < neeky_> yeah, AWS is easily HIPAA compliant, I hopefully will always outsource any PCI stuff to 3rd party gateways
21:28 < Technodrome> jdelgado: most people prefer long polling over that
21:28 < jdelgado> Technodrome: Doing it php would be a lot more difficult
21:28 < Technodrome> there has got to be some libraries out there that do this?
21:28 < Technodrome> like send to server if web sockets available, if not comet , if not poll 
21:28 < neeky_> theres a bunch of drop in web chat plugins
21:28 < jdelgado> Technodrome: Not really, that's why I said it would take more time then you thought. :)
21:29 < jdelgado> Yeah, you can grab something that someone has already done, but doing it yourself will take a bit
21:29 < Technodrome> i got a week or so 
21:29 < Technodrome> like i said, its a very critical part, its a high revenue business, so its worth it 
21:29 < jdelgado> neeky_: Lucky
21:30 < Technodrome> it will link in with the customer profiles, add the convo's right there, and i got some other  things to 
21:30 < jdelgado> neeky_: I wanted to oursource all of our payment stuff, but to allow multiple merchant accounts, we have to store the credit cards ourselves. Fun shit!
21:30 < Technodrome> modifying some PHP one, would be hell 
21:30 < neeky_> Technodrome, heh, my business brain is just the opposite - if it's not THE revenue gerating object, do it as quickly and timely as possible and move on
21:31 < jdelgado> Technodrome: neeky_ exactly what I was thinking
21:31 < neeky_> yeah, I'll (famous last words) only ever need 1 gateway, and they do the storage for me
21:32 < Technodrome> neeky_: i would most definitely agree with you, but its pretty revenue generating , i kid you not 
21:32 < neeky_> the chat itself?
21:32 < Technodrome> out of all the acquisitions a day, 50 percent come through chat first
21:32 < jdelgado> neeky_: We're developing a POS system, we initially wanted only one gateway, but it kind of all fell apart when the business department wanted as many locations as possible. lol
21:32 < neeky_> are you upselling in the chat?
21:32 < neeky_> ah
21:32 < paulkon> is it a red flag when the primary feature on your web app is using an API and not built in-home?
21:32 < Technodrome> and people ail lsay, this or that person said this in a chat, and then we have to go look through logs , its horrible 
21:33 < jdelgado> paulkon: It's an easy way to go out of business in a hurry
21:33 < paulkon> like moderate use of twilio
21:33 < paulkon> to make a product basically
21:33 < neeky_> yeah, POS is going to want to be flexible, since your customers probably already have merchant accounts
21:33 < paulkon> where without twilio, you would have to do it all in house
21:33 < jdelgado> paulkon: What are you doing in a nut shell and i'll give you my honest opinion
21:33 < jdelgado> neeky_: Yeah
21:34 < paulkon> ok like if I'm using tokbox as an important feature in my app
21:34 < paulkon> something to that effect
21:34 < paulkon> where making it in house would be a pain
21:35 < paulkon> and since I have no expertise in the area to begin with
21:35 < jdelgado> Is that your entire app?
21:35 < paulkon> no
21:35 < jdelgado> what else?
21:35 < paulkon> that's maybe 30%
21:35 < samholmes> jdelgado: can I just write my tests as a script that spits to standard out?
21:35 < merpnderp> Technodrome: Why not use socket.io? It falls back from websockets, to flash, to long polling, to multipart streaming, to iframes, to jsonp polling. It would be easy to have helpdesk operators with an open socket waiting for the server to connect them to a customer socket and allow them to chat, then move on to another customer.
21:35 < neeky_> the iisue is if your business REALLY depends on that feature, and if that feature disappeared without notice, how would you recover?
21:35 < samholmes> Are tests just run like 'node test.js'?
21:36 < paulkon> neeky_: that's the thing, I don't think it would recover
21:36 < paulkon> which is a problem
21:36 < jdelgado> samholmes: Yes, you just have to custom code it.
21:36 < samholmes> what does assert do that console.log doesn't?
21:36 < paulkon> I mean, I wish there was an ec2 equivalent for tokbox sometimes
21:36 < neeky_> then you gotta outsource as little as possible, especially if the outsourced item is a service
21:36 < paulkon> something with that level of reliability
21:36 < paulkon> yeah
21:37 < neeky_> If it's just a project on Github, no bifg deal, fork it and move on
21:37 < jdelgado> samholmes: It's just a testing library.. like assert(true).is(true)...
21:37 < samholmes> jdelgado: http://nodejs.org/api/assert.html
21:37 < samholmes> ?
21:37 < bengl_> hi all, i have a nodeconf CampOut ticket that i almost definitely won't be able to use. is anyone interested?
21:37 < paulkon> ok, but what about dropbox using s3 for storage
21:37 < samholmes> there is no .is
21:37 < paulkon> is that a comparable scenario?
21:37 < paulkon> or no
21:37 < jdelgado> paulkon: Have you heard of that company that went under because they relied on data from twitter and they cut them off?
21:37 < neeky_> well, I use AWS for my app servers.  AWS ist going anywhere
21:37 < neeky_> IMO
21:37 < s5fs> bengl_: what? why aren't you coming?
21:37 < neeky_> thats a business cal
21:38 < jdelgado> samholmes: I have no idea, I use chai and mocha... It's something similar though.
21:38 < paulkon> so, it's more of a reliability issue if the web app is making profit
21:38 < neeky_> publicly traed companies have FTC requirements - they can't just 'go away'
21:38 < neeky_> yeah
21:38 < jdelgado> That is why you never publically trade
21:38 < paulkon> so in that case would it make sense to eventually develop an in-house system when the app is stable and making some money?
21:38 < paulkon> or has money
21:39 < jdelgado> in addition to dumbasses try to tell you how to run your company
21:39 < bengl_> s5fs: it's simply not practical for me to be there this weekend. i have too much prep-work to do for an upcoming trip.
21:39 < neeky_> that's how I feel about it
21:39 < jdelgado> paulkon: I'd come up with something that doesn't rely on anyone else.
21:40 < paulkon> that's difficult if you want real progress though
21:40 < paulkon> using facebook/twitter/ anything else.. yeah I understand why not to
21:40 < jdelgado> paulkon: Not really.... It just takes a little longer.
21:40 < neeky_> I use the term MVP a lot - minimum viable product  - prove it inthe easiest way possble, then if you can make $$$, spend the time and effort to 'do it right'
21:40 < paulkon> but giant services like twilio and aws
21:40 < paulkon> not sure how to replicate that for a quick private beta release
21:40 < neeky_> that's what I'm doing at the moment with the app I'm hosting at AWS
21:40 < paulkon> yeah
21:40 < paulkon> MVP
21:40 < paulkon> that's exactly what I'm trying to do
21:41 < s5fs> bengl_: I understand, sorry you cannot attend. really cool to offer your ticket though, and if you're 100% unable to attend, it may make sense to ping mikeal and let him know. I bet he's got a list of ppl interested in a free ticket.
21:41 < jdelgado> Well, you have to rely on some stuff, like You will always need servers, be it AWS or a rack, but you always need to have a backup
21:41 < Industrial> Say I would want to create a (dnode) server that executes tasks (shell commands, node programs, maybe more kinds) at set intervals in time (so a job scheduler) or when events happend (to be specified by clients and initiated by them). Would you give every task/job an identifier? Would you store them in memory or in a database?
21:41 < bengl_> s5fs: yep, pinged via email.
21:41 < jdelgado> Industrial: Just coded that last week, use redis
21:41 < paulkon> Industrial: redis + queues
21:41 < jdelgado> indeed
21:42 < s5fs> bengl_: nice! are you in the bay or somewhere else? i'm up in portland or.
21:42 < Industrial> dnode is a stream so already a queue right?
21:42 < bengl_> s5fs: erm, also, not free. yep, in SF
21:42 < bengl_> s5fs: discounted maybe
21:42 < s5fs> bengl_: ah, so you
21:42 < paulkon> Industrial: https://github.com/solid/queue
21:43 < s5fs> bengl_: whoops! looking to resell the ticket, gotcha. most of the folks i know here are already paid up for nodeconf (since we also need plane tickets).
21:44 < Industrial> I'm trying to create a toolit of servers that do stuff. So far I've got a directory watcher and now a job scheduler. Any other ideas? :) Love to read up on other peoples' setups.
21:44 < Zaxnyd> I'm writing an api-based app.  I'm wondering if I should require my own app to log in via oath, or treat it special?  any thoughts on this?
21:44 < koalallama> to replace what? puppet?
21:46 < rud> anyone using node-webkit would know how to make webkit save a string to a file ..?
21:46 < jdelgado> Zaxnyd: Is it going to be an app? If so, treat it as if your code is public and anyone can get those credentials. Most likely keep it like another app.
21:46 < Industrial> paulkon: are you keeping it in redis just to keep the data safe? streams already request new data when they need it themselves through _read() right?
21:47 < jdelgado> Industrial: Most people run crons on non-application machines so you don't have massive spikes in cpu
21:47 < Zaxnyd> jdelgado, it's a webapp.  my only qualm is that it seems odd for a user to go to the site to be redirected to another site.
21:47 < Zaxnyd> I suppose I could try and make it as transparent as possible by keeping the scheming similar
21:47 < Zaxnyd> the styling, etc
21:48 < squeeks> I run crons on all machines. If I'm worried about spikes, sleep rand(300) before the job.
21:48 < Industrial> jdelgado: right, but that doesnt mean the communication between servers should happen inside a database right? streams and tcp (and dnode and seaport) make RPC really easy ..
21:48 < jdelgado> Well, just do a password grant for yourself to get the access_token?
21:48 < jdelgado> Zaxnyd: ^
21:48 < Zaxnyd> so have the client handle the whole auth process?
21:48 < Industrial> my app node can tell my scheduler directly ..
21:48 < jdelgado> Industrial: It is more of a 'keeping it so it doesn't get lost' type of queue, assuming you have a system failure, that cron still needs to get done
21:49 < Industrial> (not saying its better, I just want to learn why :))
21:49 < jdelgado> Industrial: So you have multiple machines watching out for it
21:49 < Industrial> right
21:49 < jdelgado> Zaxnyd: Yeah, if you do the password_grant, they login to your client, it does the API dance and it comes back with a access_token, totally seamless
21:49 < paulkon> redis pub/sub with a queue behind it + persistance is the way to go imo
21:50 < jdelgado> indeed
21:50 < Zaxnyd> jdelgado, that's kinda what I was thinking
21:50 < Zaxnyd> is that still oauth2.0 compliant?
21:50 < jdelgado> yes
21:50 < Zaxnyd> I'm looking at the docs
21:51 < jdelgado> thats how facebook does it
21:51 < Industrial> ok ill give it a go :)
21:51 < jdelgado> good luck
21:51 < Industrial> Seems Legit(tm)
21:51 < Industrial> xD
21:51 < jdelgado> lol
21:52 < Zaxnyd> jdelgado, is that example listed? 
21:52 < Zaxnyd> http://tools.ietf.org/html/draft-ietf-oauth-v2-10
21:52 < Zaxnyd> I don't see it
21:52 < Zaxnyd> http://tools.ietf.org/html/draft-ietf-oauth-v2-10#section-1.4.2 ?
21:52 < testMeDerp> I was wondering if anyone had suggestions on an appropriate module for irc handling, more so client side. Most of what I see either is geared towards botting, or just isn't very mature. Suggestions?
21:52 < jdelgado> Zaxnyd: Control f + grant_type
21:52 < squeeks> irc… client side… good luck.
21:53 < mscdex> merpnderp: fwiw socket.io doesn't do multipart streaming, not for a long time
21:53 < jdelgado> brb
21:54 < mscdex> merpnderp: nor iframes
21:54 < merpnderp> mscdex: hmm, guess the docs need to be updated
21:54 < gaf> hi, by any channce you know about m2m development with node? if there's pkgs or things ppl is doing related to it?
21:55 < squeeks> yes and yes.
21:55 < testMeDerp> interesting, I've got client side working with server as a relay, I guess I should just bump out some updates the the irc module I was using...
21:55 < squeeks> whoever is looking after node-irc is slack, I've got a pull request that's been sitting around for months.
21:56 < testMeDerp> ouch
21:56 < radu> should I be running my express app inside clusters? Because I cannot afford for it to crash even if I have forever spinning it up again almost instantly (the sockets reconnect and some realtime activity is suspended)
21:56 < gaf> squeeks, that is good to know
21:56 < chadams42> http://pastebin.com/9xqVmdHx anyone know what my products are not being saved into the database?
21:57 < jdelgado> ...and back
21:59 < chadams42> it's definitely an issue with Q
22:02 < Zaxnyd> jdelgado, so I'm trying to understand... the resource owner provides the client with their username and password.  the client relays it to the resource server server... now does this replace the access grant step?  i.e. does the client simply send all required information and gain an access token?
22:03 < Zaxnyd> or does it still do that dance?
22:03 < jdelgado> Zaxnyd: No, the password method is just for you instead of the 'Request Permission' hop, everything else is the same, but rather than a code, you are suppling the username/password
22:03 < bengl_> that nodeconf ticket i mentioned is now available from the nodeconf ticketing page https://tito.io/nodeconf/nodeconf-2013
22:03 < Zaxnyd> with every request?
22:03 < jdelgado> Zaxnyd: No, you trade it for the access_token
22:03 < Zaxnyd> ok so it still does that
22:03 < Zaxnyd> gotcha
22:04 < jdelgado> Zaxnyd: Yes
22:04 < jdelgado> :)
22:05 < Zaxnyd> jdelgado: so I take it the resource server will only allow this process for specific clients.
22:05 < Zaxnyd> ones that it trusts to handle the user's credentials.
22:05 < Zaxnyd> trusted apps
22:06 < jdelgado> Zaxnyd: Yeah, I only allow the grant_type of password for the master client_id
22:06 < jdelgado> You dont want to allow everyone to grab passwords
22:06 < squeeks> why not?
22:06 < Zaxnyd> oauth :)
22:06 < Zaxnyd> lol
22:06 < Zaxnyd> it's the reason it was made
22:07 < Zaxnyd> once a 3rd party has un/pw, it has complete control over your account
22:07 < squeeks> what to confuse the idea between authorisation and authentication? brilliant idea.
22:07 < squeeks> Hey, I can feel a user story coming on.
22:07 < markbirbeck> NickServ identify 28091964
22:07 < squeeks> better change it mark, before I ghost it.
22:08 < s5fs> squeeks: change it for him, like a good friend would
22:08 < testMeDerp> lol squeeks
22:08 < Skullclown> inb4 markbirbeck uses the same password for other auths using the same nickname
22:09 < Jamy> Or he uses that as the pass for his email :O
22:10 < testMeDerp> facebook ;)
22:10 < Skullclown> fb, twitter, email, paypal, bank account, ...
22:10 < s5fs> "like"
22:10 < Jamy> paypal would be nice
22:10 < s5fs> HN
22:10 < Jamy> I need some money
22:10 < Skullclown> not nice, illegal.
22:10 < Sirisian|Work> anyone ever seen this: npm config set strict-ssl false, what is the point of it?
22:10 < Jamy> true :P
22:10 < Skullclown> ಠ__ಠ
22:10 < Zaxnyd> jdelgado, I was thinking, while oauth is well and good, it only works if the user is smart enough not to provide its un/pw to third party apps when asked (which most aren't)
22:11 < Zaxnyd> because otherwise a third party could just usurp the whole process
22:11 < Zaxnyd> I could create a twitter app that just asks for un/pw, and yay, I have your account.
22:12 < testMeDerp> What exactly are you doing Zaxnyd?
22:12 < Sirisian|Work> oh I see. "npm config set strict-ssl false" is just for downloading packages.
22:12 < Zaxnyd> what do you mean, testMeDerp?  I'm creating an api-based app that uses oauth to log in.
22:13 < Zaxnyd> meanwhile musing that while oauth is well and good, it can't protect people from themselves.
22:13 < Skullclown> Zaxnyd: nothing can protect people from themselves
22:13 < testMeDerp> I just was listening to your ponderings
22:13 < Zaxnyd> exactly :)
22:14 < Skullclown> but that doesn't mean we should try to protect people from themselves
22:14 < Skullclown> natural selection ftw
22:14 < Zaxnyd> lol
22:14 < Zaxnyd> so you're saying I should go forward with the twitter app? =P
22:14 < squeeks> You don't live in a country with the Health and Safety Executive, do you?
22:16 < rhalff> This nickname is registered. Please choose a different nickname, or identify via /msg NickServ identify <password>.
22:20 < deanclkclk> question
22:20 < testMeDerp> answere
22:21 < Zaxnyd> answhere?
22:21 < deanclkclk> if I am writing front end code that utilize socket.io...does all frontend need node.js installed?
22:21 < Zaxnyd> no
22:21 < testMeDerp> "installed"
22:21 < testMeDerp> ?
22:21 < testMeDerp> no
22:21 < Skullclown> deanclkclk; socket.io client
22:21 < Zaxnyd> the client needs nothing but a browser and the socket.io script
22:24 < deanclkclk> where is the socket.io script coming from?
22:25 < testMeDerp> nodejs
22:25 < Zaxnyd> the server
22:25 < deanclkclk> so u are saying the server script I wrote
22:25 < Skullclown> not necessarily
22:25 < deanclkclk> try to include it in the client?
22:25 < Skullclown> you can host the socket.io client yourself
22:26 < Skullclown> if you don't want your node.js server to serve it
22:26 < Zaxnyd> http://socket.io/
22:26 < testMeDerp> the socket.io script is necessary for the client to communicate with nodejs
22:26 < Zaxnyd> http://socket.io/#how-to-use
22:26 < testMeDerp> check the socket.io examples
22:27 < jdelgado> Zaxnyd: Sorry, was AFK. That's why you limit passwords to your client_id
22:29 < Zaxnyd> jdelgado, my point was that that doesn't stop malicious sites from 'posing' as a third party app and prompting for usernames and passwords themselves.  and since some apps set this as a precedent, it's less clear to the dumber users.
22:29 < Zaxnyd> but as I and others said, you can't protect users from themselves
22:29 < jdelgado> Zaxnyd: Well no matter what you do, if they get a password, they are in.
22:29 < Zaxnyd> they should be careful to whom they give passwords
22:30 < Zaxnyd> at least now there are passwordless alternatives.
22:30 < jdelgado> Zaxnyd: I think you aren't understanding. Everyone else goes through the 'give permission' stage, like normal oAuth, but for your apps, you do a special grant-type
22:32 < Zaxnyd> yeah I get it.  but someone malicious could pretend to be this special grant type as well.
22:32 < Zaxnyd> and prompt the user to provide their un/pw.
22:32 < Zaxnyd> even though they can't do anything with it
22:33 < jdelgado> Anyone can no matter what...
22:33 < Zaxnyd> yep
22:33 < jdelgado> I can say hey look at me, I'm PayPal
22:33 < jdelgado> lol
22:33 < Zaxnyd> exactly
22:33 < jdelgado> So it doesn't matter
22:33 < Zaxnyd> it just comes back to the user being cautious about to whom they provide their credentials
22:33 < jdelgado> yes
22:33 < jdelgado> and have other features like 2fa
22:34 < Zaxnyd> yeah
22:34 < Zaxnyd> exactly
22:35 < Zaxnyd> it's just perhaps training stupid users to be stupider.  "third party apps can access my info.  i don't know how or why, but I have a twitter app.  I remember logging in.  I guess I can do that here too"
22:35 < jdelgado> Stupid users will always be stupid
22:35 < Zaxnyd> yep :)
22:35 < jdelgado> and usually, the stuff you write for stupid people gets red by everyone but the intended user
22:36 < jdelgado> read* lmfao I sound illiterate
22:36 < jdelgado> brb
22:36 < Zaxnyd> haha
22:39 < Technodrome> so there is no networking library that will try web sockets, then comet, then polling in that order?
22:39 < Technodrome> there was to be 
22:40 < Technodrome> ok so socket.io does this 
22:40 < Technodrome> sadly enough i've never used socket.io 
22:40 < Technodrome> heh, i remember using flash for true sockets , that was fun (2003) 
22:43 < RLa> Technodrome, socket.io is quite popular library
22:44 < RLa> you should try it out
22:48 < jdelgado> back
22:49 < willwh> Technodrome: socket.io rocks
22:50 < willwh> Technodrome: http://www.willwh.com/stream
22:51 < willwh> socket.io / express / twitter stream api and some jquery on the client side
22:51 < Zaxnyd> willwh: Uncaught TypeError: Cannot call method 'replace' of undefined 
22:51 < willwh> I am using nginx to serve static stuff -> everything else proxied to node
22:51 < willwh> o_O
22:52 < Zaxnyd> tweets.js:5
22:52 < willwh> ye I have a console >.>
22:52 < Zaxnyd> lol
22:52 < willwh> must be getting some bunk dataz
22:53 < willwh> hmmmmmmmmmm, I will hunt that down later... my console.log is spitting just fine
22:53 < willwh> :P
22:55 < Zaxnyd> in chrome fwiw
23:06 < jdelgado> Man, I remember the good old days when I had my own box for stuff like that
23:06 < jdelgado> Now I have to do corprate stuff all day
23:06 < testMeDerp> sounds familiar
23:07 < jdelgado> I cant remember the last time I had a console to live production
23:19 < gaf> squeeks, bingo :) #mqtt
23:21 < Technodrome> willwh: whats the twitter stream api for
23:21 < Technodrome> ?
23:30 < willwh> tracking stuff ^_^
23:30 < willwh> stuffing info in to mongodb
23:30 < willwh> :P
23:34 < owen1> how to encrypt and sign a cookie without using express?
23:41 < garthk> owen1: dive to the lower level modules that do the job. 
23:42 < garthk> owen1: e.g. https://npmjs.org/package/serializer
23:47 < owen1> garthk: thanks. i was looking at https://hacks.mozilla.org/2012/12/using-secure-client-side-sessions-to-build-simple-and-scalable-node-js-applications-a-node-js-holiday-season-part-3/
23:48 < owen1> they replaces connect's session and cookieParser with ANOTHER MIDDLEWARE
23:48 < owen1> which i can read it better than the connect's version - https://github.com/mozilla/node-client-sessions/blob/master/lib/client-sessions.js
23:49 < garthk> So, what's the problem? 
23:50 < owen1> garthk: i have no idea how to convert a middleware to non-middleware ): but this will be my goal for this evening.
23:50 < owen1> any tips?
23:52 < garthk> owen1: well, first you need to figure out how middleware works. Then you can figure out what the middleware is doing. Then you can do it manually, view by view. 
23:53 < owen1> garthk: i guess i should build a hello world with connect + node-client-sessions first and understand it.
23:54 < garthk> owen1: that might help. Also, reading the code in node_modules/connect/lib so you can see how it works.
23:55 < owen1> garthk: yeah. i guess if i want to build apps with express, i have to dive in
23:55 < owen1> thanks a lot
23:56 < ccowan> isaacs: Are you using coconut oil in a misto spray with a cast iron skillet to cook your eggs over easy?
23:56 <@isaacs> ccowan: not a mist
23:56 <@isaacs> ccowan: just coconut oil straight in the pay
23:56 <@isaacs> *pan
23:57 < ccowan> ah… What kind of pan are you using?
23:57 <@isaacs> ccowan: heat on high for 30s, should be watery consistency.  turn down to medium-high, crack two eggs in. cover, set a timer for 30 seconds. flip, and take off the heat. count to 10. remove from man.
23:57 <@isaacs> *pan
23:57 <@isaacs> put INTO man ;)
23:58 < ccowan> ha ha
23:58 < ccowan> my technique isn't so scientific
23:58 <@isaacs> ccowan: a cheapo pan that's beat up and cruddy
23:58 <@isaacs> ccowan: there's so much coconut oil, it doesn't matter.
23:59  * paulkon wishes mdn had a repo
--- Log closed Tue Jun 25 00:00:18 2013
