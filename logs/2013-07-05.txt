--- Log opened Fri Jul 05 00:00:48 2013
00:01 < cj3kim> Hi, I want to use layouts and partials without jade. Is there an easy way to do this? I haven't seen any information about this after googling. 
00:01 < azbyin> isaacbw, wait around to make a joke like mine? heh
00:02 <@konobi> cj3kim: read the jade docs?
00:02 < cj3kim> konobi: without jade?
00:03 <@isaacbw> jade is one of many templating frameworks
00:03 <@isaacbw> another popular one for node is ejs
00:04 < cj3kim> konobi: Or, are you saying that information would be there in the jade docs?
00:05 <@konobi> it'll be specific to whatever templating framework you are using
00:06 < cj3kim> konobi: I see. Thank you. 
00:22 < Beg__f> i had the talk a couple of days ago with someone, but would you guys have this as a solution ? compiledEmails[email]=(compiledEmails[email]||[]).concat();
00:23 <@isaacbw> Beg__f: what do you think concat does
00:24 < Beg__f> combines two arrays....
00:24 <@isaacbw> are you missing some code in that example?
00:24 < Beg__f> yeah
00:24 <@isaacbw> oh
00:24 <@isaacbw> lol
00:24 < Beg__f> i noticed it now
00:25 < Beg__f> i wrote it, then i wondered if that was a proper solution
00:25 <@isaacbw> it's fine
00:25 < Beg__f> alright
00:25 <@isaacbw> a little hacky, but whether that's good depends on who you ask
00:25 <@isaacbw> it would be nice if js had something like nil.concat([a]) which returns [a]
00:26 < Beg__f> it is only handling small amounts of information
00:26 <@isaacbw> just ask yourself whether it aids or impedes readability
00:26 <@isaacbw> aids is a terrible disease
00:28 <@isaacbw> js is semantically lacking
00:29 <@isaacbw> but syntactically awesome
00:30 <@MI6> joyent/node: Ben Noordhuis v0.10 * 806e300 : src: fix memory leak in UsingDomains() - http://git.io/1HxrcA
00:31  * Aredridel picks a fight with ometajs and lises.
00:34 < Beg__f> i found a error with my solution isaac
00:34 < Beg__f> isaacbw-> nvm, i'm wrong
00:34 < Tyrantelf> lol
00:35 <@isaacbw> Beg__f: it should work if you do it right
00:35 <@isaacbw> sort of
00:35 <@isaacbw> something else is going on
00:35 < Beg__f> exactly.
00:35 < euphrate> hi friends
00:36 < Beg__f> no it was only artifacts :)
00:37 < Beg__f> That's whats scary about javascript and freedom, artifacts :/
00:37 <@isaacbw> watchu talkin bout
00:38 < Beg__f> I had remade the structure of the information, and got confused why the results looked differently than expecting.
00:38 < Beg__f> so I had to reset the database
00:40 < Beg__f> and what I mean, because we have freedom in how we make objects in javascript, we can encounter artifacts, object structures from the past :(
00:40 < azbyin> lol, object structures from the past
00:41 < Beg__f> :D
00:41 < Beg__f> I am using wrong terms, don't hate on me
00:41 < azbyin> did you make some archaeological digs?
00:41 < azbyin> nah, we're just messing with you
00:41 < Beg__f> I did some bitcoin mining and then i encountered them
00:42 < azbyin> uh, bitcoin..
00:42 < Beg__f> along with some russian dinosaurs from the cold war
00:42 < Beg__f> i am bad.
00:42 <@MI6> joyent/node: Ben Noordhuis master * 30e7d08 : Merge remote-tracking branch 'origin/v0.10' (+10 more commits) - http://git.io/lsh1Rw
00:43 < Beg__f> gonna go do what i think i'm good at.
00:43 <@konobi> isaacbw: [].concat(['a']) ?
00:44 < Beg__f> konobi, he ment undefinedvar.concat(['a'])
00:44 <@konobi> Beg__f: undefinedvar = [].concat(['a'])
00:45 < Beg__f>  undefinedvar = [].concat(['a']);  undefinedvar = [].concat(['a']);  undefinedvar = [].concat(['a']); 
00:45 < Beg__f> = ['a']
00:45 < azbyin> >> 1
00:45 < purr> azbyin: (number) 1
00:45 < azbyin> >> undefinedvar = [].concat(['a']);  undefinedvar = [].concat(['a']);  undefinedvar = [].concat(['a']);
00:45 < purr> azbyin: (object) ['a']
00:45 < azbyin> whats wrong again?
00:47 < Beg__f> >> for (var a in [1,2,3,4,5]) { undefinedvar = [].concat([a]) } 
00:47 < purr> Beg__f: (object) ['4']
00:47 < azbyin> err.. what exactly are you trying to do in that loop?
00:47 < Beg__f> >> for (var a in [1,2,3,4,5]) { undefinedvar = (undefinedvar||[]).concat([a]) } 
00:47 < purr> Beg__f: ReferenceError: undefinedvar is not defined
00:47 < azbyin> lol ?
00:48 < Beg__f> that shouldn't happend :D
00:48 <@konobi> Beg__f: you initialize once and then undefvar.concat(['b']) for the rest
00:49 < Beg__f> yes but the initialize is an unnecessary step, thats what he ment by "you should be able to"
00:49 <@konobi> you have to initialize the var regardless
00:50 < Beg__f> yes right now, but what he ment was that he wishes for it to be possible to do undefined.concat([a])
00:50 < azbyin> >> undef = []; for (var a in ['a','b','c','d']) { undef = undef.concat([a]); }
00:50 < purr> azbyin: (object) ['0', '1', '2', '3']
00:51 < azbyin> notice how you made a slight error about enumeration earlier. for in will be using indexes rather than the actual values
00:51 < azbyin> or rather keys instead of the values, and keys in an array are the indexes
00:51 < Beg__f> I was merely using the numbers to easily distinguish it was an array
00:52 < azbyin> Beg__f, why? so one is able to use vars willy nilly without checking if they are actually containing any values?
00:52 < Beg__f> Well, that is javascript..
00:53 < azbyin> theres a lot of bad ideas (some would say) that are encouraged by js. lets not add to that list
00:53 <@konobi> no, that's bad programmer
00:54 < azbyin> this type of code is what gives js a bad name
00:54 <@mbalho> guns dont kill people
00:55 < azbyin> mbalho, a slightly different matter; unless someone's writing js code to handle medical surgeries, etc!
00:55 < Beg__f> one day, when I am done with this project and this sumemr study course, I'll see what javascript strict is.
00:56 < FMJaggy> mbalho: it doesn't? oh man i hope i still have the reciept them
00:57 < FMJaggy> then*
01:33 < fesener_> Hi everyone, I've implemented the tutorial on the http://maxburstein.com/blog/realtime-django-using-nodejs-and-socketio/ but my nodejs server prints out "warn  - handshake error error" everytime I load the page and the system doesnt work, would someone help me ?
01:38 < ChrisPartridge> fesener_: is there a proxy in front of your app?
01:39 < fesener_> ChrisPartridge, all I'm using is django and this tutorial i've sent
01:39 < fesener_> I have no other setting
01:39 < azbyin> fesener_, the reason he asked is that some proxies have problems with ws connections..
01:39 < fesener_> i use "node chat.js" and "python manage.py runserver"
01:40 < fesener_> i dont have any settings just fresh install of ubuntu django and this tutorial
01:40 < azbyin> but that should no longer be an issue with socket.io as it uses the new engine.io.. so proxies be damned. it should still work
01:40 < fesener_> I've just changed port from 4000 to 8000 in chat.js because my django works on localhost:8000
01:41 < fesener_> node chat.js 
01:41 < fesener_>    info  - socket.io started
01:41 < fesener_>    warn  - handshake error error
01:41 < fesener_> this warn shows again everytime i reload
01:41 < azbyin> where on the console where you run 'node chat.js'?
01:42 < fesener_> didnt understand
01:42 < fesener_> i go to the directory where chat.js is
01:42 < fesener_> and node chat.js
01:42 < fesener_> this is my chat.js http://pastebin.com/aUaSUwD7
01:42 < azbyin> yes, and the warning is whoen there?
01:42 < azbyin> shown
01:42 < fesener_> warning shows up when i load the page
01:43 < azbyin> is the page 'live' somewhere?
01:43 < fesener_> yes it's a django app
01:43 < fesener_> so i just load my django website using localhost:8000
01:44 < fesener_> i've set up everything as shown in that tutorial on django side
01:44 < azbyin> yes, where? i mean can i access it? and the warning is shown in your browser console?
01:44 < fesener_> you cant access it, its on my local server
01:44 < fesener_> warning is shown in the console where i start nodejs server
01:45 < fesener_> the console where i start django shows no errors so everything is OK on django side
01:45 < fesener_> what causes handshake error in http://pastebin.com/aUaSUwD7 ?
01:45 < fesener_> io.configure(function(){ ... } seems like OK to you azbyin  ?
01:46 < fesener_> since it says "handshake error error" there must be something adding that extra "error" to the error itself am i wrong?
01:52 < fesener_> please someone help -.-
01:52 < fesener_> what causes handshake error in http://pastebin.com/aUaSUwD7 ?
01:55 < fesener_> my console output is Failed to load resource: the server responded with a status of 500 (Internal Server Error) http://localhost:4000/socket.io/1/?t=1372989230723
01:55 < fesener_> please someone help me
01:56 < fesener_> http://localhost:4000/socket.io/ prints Welcome to socket.io.
01:56 < fesener_> http://localhost:4000/socket.io/1/  prints handshake error
01:56 < harbhub> fesener_, i'd love to help but i don't know how
01:57 < harbhub> why don't you send a useful link to a gist?
01:57 < harbhub> with your code
01:57 < fesener_> harbhub, how can I do that ?
01:58 <@konobi> fesener_: tried #socket.io ?
01:58 < fesener_> no
01:58 < fesener_> tried django and node.js so far
01:59 < fesener_> should I try socket.io channel now ?
01:59 <@konobi> well, if you're having socket.io issues, would make sense
02:00 < fesener_> is handshake error caused by socket.io ?
02:00 < harbhub> what is django
02:01 < fesener_> a python web framework
02:01 < fesener_> like ruby on rails
02:01 < fesener_> for python
02:01 < harbhub> just learn node.js
02:01 < harbhub> lol
02:01 < harbhub> that is my ultimate suggestion
02:01 < harbhub> learn to program using javascript, then learn nodejs
02:01 < fesener_> i'm trying to learn
02:01 < harbhub> and join us  :)
02:01 < fesener_> but on my first tutorial i get this error
02:01 < fesener_> and i cant find anyone to help me
02:01 < fesener_> :)
02:02 < ChrisPartridge> fesener_: more than likely related to the socket io connection, are you testing local?
02:02 < fesener_> yes ChrisPartridge 
02:02 < fesener_> how can I debug this ?
02:02 < ChrisPartridge> fesener_: gist/pastebin your node code
02:02 < fesener_> http://pastebin.com/aUaSUwD7 ChrisPartridge 
02:03 < harbhub> fesener_ your server doesn't handle the incoming requests
02:03 < fesener_> ?
02:03 < harbhub> var server = http.createServer().listen(4000);
02:03 < harbhub> that does nothing with the requests
02:03 < ChrisPartridge> harbhub: pretty sure his django server is doing that
02:03 < harbhub> it just hangs them
02:03 < ChrisPartridge> er
02:04 < harbhub> you should use inside the ()
02:04 < harbhub> function (req, res) {res.end();}
02:04 < harbhub> at least to close the response, then again i know nothing about django lol
02:04 < fesener_> where should I put this ?
02:05 < harbhub> var server = http.createServer(function (req, res) {res.end();}).listen(4000);
02:05 < harbhub> not sure how django works, though
02:05 < harbhub> so you might screw up the request handling that it does
02:06 < fesener_> i'll try it
02:06 < fesener_> changed noth
02:06 < ChrisPartridge> socket.io should handle the handshake and upgrade iirc
02:06 < fesener_> nothing*
02:06 < fesener_> woah
02:06 < ChrisPartridge> ughhhh, netsplits
02:06 < fesener_> harbhub, it changed nothing mat
02:06 < harbhub> lol what happened?
02:06 < ChrisPartridge> fesener_: socket io should be handling the handshake/upgrade
02:06 < harbhub> sorry  :(
02:06 < harbhub> i tried
02:07 < fesener_> ChrisAnn_, and?
02:07 < fesener_> ChrisPartridge, and what can I do =
02:07 < fesener_> none replying in socket.io channel
02:08 < harbhub> you could stop using django, switch to nodejs, use nodejitsu to host your website/application
02:08 < harbhub> but that is a huge shift
02:08 <@isaacbw> is i
02:08 <@isaacbw> t
02:08 < harbhub> idk lol
02:09 < harbhub> for me it isn't, i naturally went towards the node-light
02:09 < ChrisPartridge> fesener_: it's not getting into the 'connection' callback?
02:09 < fesener_> how can I check that ChrisPartridge 
02:09 < ChrisPartridge> console.log that bad boy
02:10 < ChrisPartridge> I'm guessing you got a redis instance running? ;p
02:10 < fesener_> ChrisPartridge, this is my first tutorial about these styff
02:10 < fesener_> would you please be more noob-friendly
02:10 < fesener_> :P
02:10 < ChrisPartridge> fesener_: have you installed redis?
02:10 < fesener_> yes
02:11 < oren> i see benchmarks for creating buffers. it say buffer 1, buffer 128, buffer 1024. are those numbers the size of a buffer?
02:11 < ChrisPartridge> fesener_: if you chuck "console.log('got here')" or w/e, in the node code - it will spit messages out to the console, quick and dirty way to debug
02:11 <@konobi> what websocket client are you using?
02:11 < vrlogrs> hey guys ..
02:11 < fesener_> ChrisPartridge, ok which part should I console.log now
02:12 <@konobi> fesener_: tried removing the authorization part for the meantime?
02:12 < ChrisPartridge> ^^ yeah try that
02:12 < ChrisPartridge> and just put a console.log inside the on('connection' callback
02:12 < fesener_> hmm?
02:13 < vrlogrs> having trouble with spawning .. http://pastebin.com/t66QQbmy
02:13 < fesener_> can I just remove whole "io.configure(function(){
02:13 < fesener_>     io.set('authorization', function(data, accept){"
02:13 < fesener_> ?
02:13 < vrlogrs> anyone know what could be wrong? :S
02:13 < ChrisPartridge> yep, just remove the io.set('authorization' stuff, might wanna leave the log level
02:14 < fesener_> ok
02:14 < fesener_> removed
02:14 < fesener_> its still same
02:14 < ChrisPartridge> are you restarting the node server?
02:14 < ChrisPartridge> did you add the console.log ?
02:15 < vrlogrs> sry, had a typo: http://pastebin.com/R0iYgi1j
02:15 < fesener_> i didnt restart
02:15 < fesener_> sec
02:15 < ChrisPartridge> you need to restart the node app, each time you make a change
02:15 <@isaacbw> did you offer it a treat?
02:15 < fesener_> ChrisPartridge, chrome no longer gives any error on console
02:15 < fesener_> but it doesnt work either
02:15 <@isaacbw> they like treats
02:15 < fesener_> it says "connect" and "test" in console
02:16 < vrlogrs> isaacbw: me?
02:16 <@isaacbw> yea
02:16 <@isaacbw> wait no
02:16 < ChrisPartridge> fesener_: and is one of those console logs, inside the connection callback?
02:16 <@isaacbw> fesener_: 
02:16 < vrlogrs> lol, ok
02:17 < vrlogrs> i just have 1 line of code .. if someone has a minute to help
02:17 < fesener_> yes ChrisAnn_ 
02:17 < fesener_> yes ChrisPartridge 
02:17 < harbhub> vrlogrs, gist it
02:17 < fesener_> "connect" comes from connection callback
02:17 < ChrisPartridge> fesener_: still getting an error?
02:17 < vrlogrs> gist?
02:17 < fesener_> no, no error now
02:17 < ChrisPartridge> vrlogrs: getting an error? whats the actual issue?
02:17 < harbhub> gist.github.com
02:17 < fesener_> but it simply doesnt work
02:17 < vrlogrs> the child just exits instantly
02:17 < \malex\> is there a way to trace the execution of a program under node.js? something that works like bash -x, where it prints out every line of source it's about to execute
02:17 < harbhub> paste your line of code there, and give us the link here
02:18 < vrlogrs> doesnt run for even a second
02:18 < vrlogrs> it runs fine if i run it through terminal
02:18 <@konobi> fesener_: that's gotten you further... the rest you can debug by slimming everything down
02:18 < harbhub> child will exit if it completes its tasks
02:18 < ChrisPartridge> vrlogrs: check the exit code?
02:18 < vrlogrs> exit code is 1
02:19 < fesener_> konobi, i dont know enough to slim everything down
02:19 < fesener_> ChrisPartridge, since that deletion made errors stop, what does it mean ? 
02:19 < fesener_> where the problem seems to be
02:19 < ChrisPartridge> vrlogrs: so its erroring?
02:19 <@konobi> look for an intensely slimmed down example
02:19 < vrlogrs> yeah ChrisPartridge
02:19 < vrlogrs> i dont understand why
02:19 <@konobi> fesener_: you didn't have auth cookie... so you accept('error', false)
02:19 < ChrisPartridge> fesener_: probably in the authorization stuff maybe
02:19 < vrlogrs> if i put that line in terminal, it works fine
02:20 < vrlogrs> but it wont work through spawn
02:20 < vrlogrs> do i have the syntax correct?
02:20 <@konobi> that's where that extra "error" came from
02:20 < vrlogrs> shoot, sorry
02:21 < vrlogrs> i had an arguments check in the child that was incorrect
02:21 < vrlogrs> sorry
02:21 < vrlogrs> thanks though
02:21 < ChrisPartridge> vrlogrs: console log the args, and make sure everything is correct
02:21 <@konobi> \malex\: trace.gl
02:21 < ChrisPartridge> vrlogrs: haha
02:21 < neeky> sometimes I wish my brain could/would turn off its overwhelming desire to constantly refactor code
02:22 < ChrisPartridge> vrlogrs: you could also do var child = spawn('cp'); then child.stdout.pipe(fs.createWriteStream('some.log')) for extra node awesomeness :)
02:22 < vrlogrs> i had alot of pipe errors past couple days
02:22 < vrlogrs> never doing pipes again
02:22 < vrlogrs> very irratating
02:22 < ChrisPartridge> vrlogrs: bah, streams are the bomb
02:22 < vrlogrs> lol
02:23 < vrlogrs> whats the benefit, compared to this?
02:23 < fesener_> ChrisPartridge, could you help me about fixing that authorization stuff ?
02:23 <@konobi> fesener_: use a saner error message
02:24 <@konobi> "Authorization failed, missing django cookie" or something
02:24 < fesener_> how can I do that ?
02:24 < fesener_> I've just typed whatever tutorial told me to
02:24 < ChrisPartridge> vrlogrs: https://github.com/substack/stream-handbook
02:24 <@konobi> accept('error' ---> accept("Author....
02:24 < Aredridel> WTF. I do not understand why this parser is failing.
02:25 < ChrisPartridge> fesener_: tutorials are good and all, but you need to start reading and understanding the code, most people here don't use django, so that part of the code is something we can't help with
02:26 < harbhub> yeah
02:26 < ChrisPartridge> I guess that django code is probably setting a cookie somewhere
02:26 < harbhub> also, we don't give two shits about django
02:26 < harbhub> we won't learn it just to help you unfortunately
02:26 < \malex\> konobi: that looks pretty freaking nifty
02:27 < fesener_> i just wanted to know what may cause the error from http://pastebin.com/yAcr1uDw this 6 lines of code
02:27 <@konobi> harbhub: perhaps you could rephrase comments like that in future... this isn't #javascript
02:27 < fesener_> and you tell me that you wont learn django because to help me 
02:27 < \malex\> konobi: thanks for the pointer
02:27 < harbhub> let's see fesener_
02:27 < fesener_> i want to know if its because of django or should I do some settings in node.js or socket io
02:27 < harbhub> i already tried helping
02:28 < harbhub> and at this point it seems no one can help you
02:28 < harbhub> because it is a django thing
02:28 < serapath> hi
02:28 < fesener_> IS IT a django thing ?
02:28 < serapath> anyone could help me out with jade?
02:28 < harbhub> sorry for the language, but i wanted to make it crystal clear that this is not a django chat room
02:28 <@konobi> fesener_: yes... it even said it in the comment
02:28 < serapath> i'm copying some template stuff from a youtube tutorial, but it complains and i dont know what to do
02:28 < harbhub> your code was unreadable to me after line 2, where you didn't even handle the incoming requests heh
02:28 < serapath> https://www.youtube.com/watch?v=Y1vC7S385x8  like minute 10:45
02:29 < harbhub> i.e. django does it wayyyy different
02:29 < harbhub> anyways, i gave you the best advice earlier
02:29 < harbhub> learn nodejs
02:29 < harbhub> switch to nodejitsu for your host
02:29 < serapath> its just a few lines. The problem is, jade seems to not like the onsubmit: send(), because the closing bracket of send closes the jade tag
02:29 < fesener_> ok if django causes that error from that node.js file than you guys cant help me so thanks anyway
02:29 < serapath> what could i do about it?
02:30 < serapath> and why does it seem to work for in the tutorial?
02:31 < ChrisPartridge> serapath: probably because the tutorial was written ~2 years ago
02:31 < ningu> serapath: if you put the code up at pastebin.com I'd be happy to take a look
02:31 < ChrisPartridge> recorded, even
02:32 < serapath> http://pastebin.com/DgHBJR3K
02:33 < fesener_> ChrisPartridge, thank you I've tested to console.log my data.headers.cookie information and it returned undefined
02:33 < fesener_> so that must be the issue
02:33 < fesener_> not my node.js/socket.io settings
02:34 < ningu> serapath: form(id='form', onsubmit='send(); return false;')
02:34 <@konobi> may be running into cross domain policy with cookies
02:34 < ningu> and so on for your other html attributes
02:34 < serapath> i know
02:34 < serapath> how would i do it instead?
02:34 < vrlogrs> on another note ..
02:34 < serapath> the tutorial has that exact same code at 10:45.
02:34 < ningu> serapath: I just told you, change the colons to equals
02:34 <@isaacbw> how old is the video
02:34 < serapath> Its presented by Guillermo Rauch for a socket io chat tutorial
02:34 < serapath> i dont know
02:34 <@isaacbw> look
02:34 < vrlogrs> ever since i started using spawn to create other node.js apps, ive been getting these weird mysql closed connection issues
02:35 < serapath> december 2011
02:35 < vrlogrs> i keep reading about pools
02:35 < fesener_> konobi, nah I've added @csrf_exempt to my node_api function that shouldnt be it
02:35 <@isaacbw> almost two years
02:35 < serapath> isaacbw: i was looking in that moment
02:35 <@isaacbw> that's an eternity in node land
02:35 < vrlogrs> is there another way to fix the issue, without having to recode all my mysql queries?
02:35 < serapath> isaacbw: yes i know, but couldnt find a good tutorial on socket.io which explains the basics
02:35 < ningu> serapath: have you tried it with the =?
02:35 < ningu> serapath: also, you didn't say what the error was
02:35 <@isaacbw> serapath: it's just 'send message, get message'
02:35 < serapath> ningu: where?
02:35 < harbhub> socketio is about as basic as it gets
02:35 <@isaacbw> do you have any specific questions/
02:35 <@isaacbw> ?
02:35 < ningu> <ningu> serapath: form(id='form', onsubmit='send(); return false;')
02:36 <@konobi> fesener_: that's not csrf
02:36 < serapath> the error message says '500 SyntaxError: Unexpected token )'
02:36 < harbhub> socket.on('event', function (data) {//do something});
02:36 < serapath> ah
02:36 < serapath> ok
02:36 < serapath> i try that
02:36 < serapath> thx
02:36 < ningu> serapath: on which line?
02:36 < harbhub> socket.emit('event', 'some data to send');
02:36 < fesener_> konobi, cross domain policy is not related with CSRF ?
02:37 <@isaacbw> they're different things
02:37 <@tjfontaine> niggler: blah blah all rights reserved :P
02:37 < ChrisPartridge> fesener_: http://en.wikipedia.org/wiki/Cross-origin_resource_sharing
02:37 < serapath> w00t 
02:37 < niggler> haha tjfontaine you published at a terrible time
02:37 < serapath> lots of love :-) thx@ ningu 
02:37 <@tjfontaine> is this is an autoresponse bot? :)
02:37 < niggler> i went to npmjs.org and yours was the most recently updated item
02:37 <@tjfontaine> ah
02:38 < fesener_> ok ChrisPartridge thank ypu
02:38 < fesener_> i'll try to figure out
02:38 < niggler> every time i want to look up a module, i stop at the homepage first and look at the most recently updated package
02:38 < niggler> every once in a while i see something cool
02:38 < ningu> niggler: which module?
02:38 <@tjfontaine> I assure you it was not cool :)
02:38 < ChrisPartridge> fesener_: its essentially "set a bunch of headers and if its a OPTIONS request, send a 200 response if you want to allow it"
02:38 < ChrisPartridge> its ultra simple
02:38 <@isaacbw> cinnamon in mah mouf
02:38 < niggler> ningu https://npmjs.org/package/lstream
02:38 <@isaacbw> cinammon mon
02:39 < ChrisPartridge> isaacbw: what are you on? ;p
02:39 < niggler> and that was missing a license field and a license attribution in the code
02:39 <@isaacbw> ChrisPartridge: cinnamon mon
02:39 < ningu> tjfontaine: oh cool, is this to replace the sub-standard previous attempts to do the same?
02:39 <@tjfontaine> doesn't even have a readme, what kind of awful person wrote that module :P
02:39 < vrlogrs> http://pastebin.com/R0iYgi1j -- it's not actually outputting to the log file :S
02:39 <@tjfontaine> ningu: just something I've been using in different things that I threw together
02:39 < vrlogrs> any suggestions guys?
02:39 < niggler> tjfontaine the description excited me
02:39 < niggler> because i think i ended up hacking something like that together many times
02:40 < ningu> tjfontaine: there are two modules that already exist to do it, but one breaks the stream api and the other I think is pre-streams2
02:40 <@tjfontaine> niggler: ya many have
02:40 <@tjfontaine> ningu: nod
02:40 < niggler> so i figured that tjfontaine's version might become the defacto standard
02:40 < ChrisPartridge> defactor standard might need a README ;p
02:40 <@tjfontaine> there's certainly hope
02:40 < ningu> vrlogrs: spawn() does not invoke the shell afaik
02:40 < ChrisPartridge> defacto*
02:41 <@tjfontaine> ChrisPartridge: no doubt
02:41 < vrlogrs> ningu: is there any way i can? :S
02:41 < vrlogrs> i need to direct the outputs to a log file
02:41 < niggler> doesn't spawn take a shell option?
02:41 < ningu> oh, it might
02:41 < ningu> or you can just pipe the stdout yourself
02:41 < fesener_> ChrisPartridge, may that be causing GET http://localhost:4000/socket.io/1/?t=1372991951435 500 (Internal Server Error) ?
02:42 < ChrisPartridge> vrlogrs: cp.stdout.pipe(fs.createWriteStream('somelog')) ?
02:42 < ningu> no shell option for spawn
02:42 < ningu> ChrisPartridge: is defactoring like refactoring?
02:42 < pensmit> What is the most efficient way to pass data between node and a local socket.io/jquery?
02:42 < ningu> I think a lot of software needs a defactor
02:42 <@konobi> fesener_: localhost:80 != localhost:4000
02:42 < pensmit> Should you use json?
02:42 < vrlogrs> ChrisPartridge: does that work cleanly? 
02:42 < fesener_> konobi, var server = http.createServer().listen(4000);
02:42 < ChrisPartridge> ningu: yup, you pretty much copy paste methods and duplicate code everywhere
02:42 < niggler> does exec use the shell/
02:43 < ningu> niggler: exec does, execFile does not
02:43 < ChrisPartridge> ningu: then come back and refactor, and your bosses think you're working hard ;-)
02:43 < harbhub> pensmit, i use JSON.stringify if i want to pass an object, and then just JSON.parse the data on the receiving end to rebuild the object
02:43 < ningu> ChrisPartridge: oh see, I was thinking of defactoring as taking lots of code out and making the program do less
02:43 < ChrisPartridge> vrlogrs: yes, it does, if pipe didn't work, node would be in trouble
02:43 <@konobi> fesener_: but as far as the broswer is concerned, they're entirely different servers... so cookies set on one, won't get set on the other
02:43 < pensmit> Thanks harbhub...I was watching a video where the guy said JSON.stringify actually slowed node down a lot.
02:43 < vrlogrs> so, thats all the code i need?
02:43 < ningu> vrlogrs: why don't you go and try it?
02:44 < harbhub> never had a problem with it myself
02:44 < fesener_> konobi, isnt this whatredis for ?
02:44 < AAA_awright> fesener_: Be really careful, the security model of the Web depends on user agents not giving one party information generated by another party... CORS potentially enables third parties to impersonate their users
02:44 < vrlogrs> ningu: i had it, and i spent 2 days figuring out why i kept getting an EPIPE error
02:44 < harbhub> i can send an object in a millisecond, :)
02:44 < vrlogrs> it was really irratating
02:44 < ChrisPartridge> vrlogrs: a child process is essentially a duplex stream, stdin and stdout, you could even pass them to the duplexer module if you wanted a nicer interface
02:45 < vrlogrs> hmm, i will give it another try
02:45 < vrlogrs> thanks
02:45 < fesener_> AAA_awright, are you saying this because of cookies I'm trying to get ?
02:45 < ChrisPartridge> vrlogrs: read the stream handbook, and write lots of little stream tests and get the hang of it
02:45 <@konobi> fesener_: you could run both django and node behind a proxy so they share the same origin
02:45 < vrlogrs> will do - thanks
02:45 < pensmit> http://www.youtube.com/watch?feature=player_detailpage&v=oSe6QC-teUY#t=647s
02:45 < pensmit> Json.parse stringify?
02:46 < harbhub> JSON.parse('string version of the object')
02:46 < harbhub> JSON.stringify(object)
02:46 < harbhub> pensmit, just don't use it on massive objects or else i guess it might slow things down
02:46 < fesener_> konobi, i've checked a few tutorials and they were all starting django on different port and node.js different
02:46 < harbhub> JSON.stringify(require('util'))
02:46 < harbhub> that might be time consuming
02:46 < fesener_> should they all be not working then?
02:47 < pensmit> Ahh I see
02:47 < harbhub> but small objects:
02:47 < harbhub> JSON.stringify({'name': 'john doe', 'password': 'hashed password x10,000 iterations'}
02:47 < pensmit> harbhub can I chat with you in private real quick
02:47 < harbhub> sure
02:47 <@konobi> fesener_: no idea
02:47 < fesener_> the tutorial I'm following now has "var server = http.createServer().listen(4000);" and start django server with python manage.py runserver localhost:3000, no mention of proxy etc.
02:48 < fesener_> ok thank you 
02:48 <@konobi> fesener_: haproxy is a decent option
02:48 < vrlogrs> so, like this: http://pastebin.com/PfQwaTkX
02:49 < ChrisPartridge> vrlogrs: run it and see ;p
02:49 <@konobi> fesener_: yeah, may depend on how they've configured django i suppose... but can't help you there
02:49 < vrlogrs> it didnt create the file ChrisPartridge :(
02:49 < vrlogrs> the output file
02:50 < fesener_> ok konobi thank you
02:50 < ChrisPartridge> vrlogrs: did the child actually output anything?
02:50 < vrlogrs> yeah
02:50 <@konobi> *yawn* food time
02:50 < vrlogrs> i connected to the server -- it outputs connection
02:51 < vrlogrs> it's supposed to
02:51 < vrlogrs> oh shoot
02:51 < ChrisPartridge> :p
02:51 < vrlogrs> sry, wrong name
02:51 < ChrisPartridge> might want to also, use the path module
02:51 < vrlogrs> dam .. i need to take a break :(
02:51 < ChrisPartridge> to make it cross platform, if required
02:51 < ChrisPartridge> but yeah, breaks are always good 
02:51 < vrlogrs> whats that?
02:52 < ChrisPartridge> http://nodejs.org/api/path.html
02:52 < ChrisPartridge> specifically, path.resolve
02:53 < serapath> hey everyone, probably a silly question, but where do i get my socket.io.js for the clientside from?
02:53 < harbhub_> hey pens
02:53 < harbhub_> my computer shut off by accident
02:53 < harbhub_> still here?
02:54 < serapath> ha ok, sry, found it
02:55 < ChrisPartridge> anyone know of a simple body parser module, just for x-www-form-urlencoded ?
02:56 < harbhub_> formidable?
02:56 < harbhub_> ChrisPartridge, does formidable work?
02:56 < serapath> ...not
02:56 < AAA_awright> ChrisPartridge: querystring.parse in node core
02:56 < serapath> Github says i should look in ../node_modules/socket.io-client/socket.io-client.js
02:56 < serapath> but there is no socket.io-client
02:57 < ChrisPartridge> harbhub_: bit heavy for the situation
02:57 < AAA_awright> Be sure to pass /[;&]/g for seperator since ; is a legal seperator
02:57 < ningu> ChrisPartridge: I thought you could use the connect one just for that
02:57 < ChrisPartridge> AAA_awright: ahhhh, yes - ty :)
02:58 < ningu> ChrisPartridge: the connect bodyParser actually consists of 3 parsers
02:58 < ningu> and you can use them individually
02:58 < ChrisPartridge> ningu: it's a simple app, just sticking to KISS 
02:58 < serapath> ah ok, found it. theres another nodes_modules
03:01 < serapath> actually, there is a lot of stuff in socket.io-client is 14,5 MB
03:01 < serapath> do i need it all on the client side?
03:01 < azbyin> nope.. you need only the client js file
03:02 < azbyin> and ofcourse you need the minified version of it
03:02 < azbyin> serapath, did you even look at the example on socket.io ?
03:02 < serapath> i cant find a file called socket.io.js in there
03:02 < azbyin> it lists the most simple server and client
03:03 < ningu> serapath: it's in the docs
03:03 < serapath> yes, but the examples only say: <script src="/socket.io/socket.io.js"></script>
03:03 < serapath> u mean the FAQ?
03:04 < ningu> serapath: have you tried that?
03:04 < ningu> you can't expect much sympathy if you've read the docs but not followed them
03:04 < serapath> yes, it tells me it cannot find socket.io.js
03:04 < ningu> ok, now we're getting somewhere
03:04 < azbyin> mkdir /tmp/dodo; cd /tmp/dodo; npm install socket.io; cd node_modules/socket.io/node_modules/socket.io-client/dist; ls -l
03:04 < azbyin> what do you see there?
03:05 < serapath> nothing
03:05 < serapath> the folder doesnt exist, or at least i dont know where to look
03:05 < azbyin> what? did you follow that command list fully? copy paste that *entire* command line i just pasted
03:05 < serapath> ah nice
03:05 < serapath> the /dist folder
03:05 < azbyin> and run it in your console
03:06 < serapath> thats what i needed to know i guess
03:06 < azbyin> lol, speaking before you checked the folder, eh?
03:06 < serapath> i didnt know i need to check the /dist folder
03:06 < mbalho> you should probably just give people in IRC your computer password
03:06 < azbyin> thats why i pasted the cmdline..
03:06 < mbalho> then we can fix your stuff 
03:06 < serapath> lol
03:06 < mbalho> trust us we are reputable
03:06 < niggler> tjfontaine lol you forgot to include license in your package.json
03:09 <@tjfontaine> meh
03:09 <@tjfontaine> they'll figure it out
03:09 < azbyin> which package is this?
03:10 <@tjfontaine> niggler: anyone who actually cares will look at more than the package.json
03:10 < neeky> ChrisPartridge, you could copy Connect's form parser
03:10 < neeky> it IS open source....
03:10 < niggler> heh fair enough tjfontaine 
03:12 < neeky> is there an open source that says you can't use my software to be a dickhead? I should write my own - is that too arrogant?
03:12 < neeky> Basically MIT with a clause that says you are not allowed to use my software for douchy-ness
03:13 <@tjfontaine> that clause would of course be toothless :)
03:14 < neeky> Of course, it's just a statement of goodwill
03:14 <@tjfontaine> neeky: sounds like you need http://blog.izs.me/post/48281002063/free-as-in-hugs-licence
03:14 <@konobi> json licence
03:15 < neeky> There you go, I have just adopted the json license
03:15 < ChrisPartridge> neeky: wanted the simplest option for parsing the form data, its a tiny app (single form, to collect some data), but AAA_awright hit the nail on the head
03:15 < neeky> That is exactly MIT with a no evil clause
03:16 < neeky> cool, i misse dthat in my scroll-back
03:17 < serapath> actually, the examples on http://socket.io mention var io = require('socket.io').listen(80); but what i did was var io = require('socket.io').listen(httpServer);
03:17 <@konobi> of course "evil" is subjective =0)
03:17 < serapath> does socket.io need its own port?
03:17 < AAA_awright> I prefer the Chicken Dance License http://www.theregister.co.uk/2011/03/26/chicken_dance_open_source_license/
03:18 < AAA_awright> ... If one is going to make a mockery of licenses, I mean. Else I prefer http://unlicense.org/
03:18 < serapath> that means, if there is already an http server running on port 80, does it hurt socket.io?
03:21 <@konobi> serapath: you can just hang socket.io off your http server
03:26 < astropriate> Error
03:26 < astropriate>     at new JS_Parse_Error
03:26 < astropriate> wow
03:26 < astropriate> so helpful!!!
03:27 < astropriate> fuck you jade
03:27 < astropriate> you too*
03:28 <@isaacbw> man, doesn't anyone like html
03:28 <@isaacbw> html is nice
03:28 <@tjfontaine> I came here for some server side man
03:29 < Aredridel> I like me some HTML. I parse it so I can deal with it in Javascript.
03:29 < Aredridel> On the server.
03:29 <@isaacbw> that's because you're a crazy bastard
03:29 < astropriate> I inherited this pile of BS 
03:30 <@isaacbw> if I were in your position astropriate I would spend time getting rid of jade
03:30 < ChrisPartridge> ^ +1
03:30 < astropriate> isaacbw, that is most defiantly on the list of things to do
03:30 < astropriate> unfortunately product is going public end of next week <_<
03:30 < astropriate> and its big
03:30 <@tjfontaine> twitch -- definitely.
03:30 <@tjfontaine> there's no a
03:31 <@tjfontaine> ever.
03:31 < astropriate> i dont care.
03:31 < astropriate> .
03:31 <@isaacbw> three cheers for jade hate circlejerk
03:31 < astropriate> include me in all circlejerks
03:31 < astropriate> :D
03:32 < niggler> woah woah isaacbw what's the template engine of the week?
03:33 < niggler> jade is so may 2013
03:33 <@isaacbw> lol
03:33 < ChrisPartridge> haha
03:33 <@isaacbw> I really hardly ever do server side rendering
03:34 <@isaacbw> if I was doing serverside though I would use some logic-little system like handlebars
03:34 < ChrisPartridge> I just use underscore/lodash templates, still one of the faster, works server/client, and easy to change to handlebars style tags if you really dont like asp style tags
03:34 < niggler> we've got a winner: https://github.com/malgorithms/toffee
03:34 < astropriate> now seriously wha tthe hell is this
03:34 < astropriate> why is there no error?
03:34 < niggler> its a templating language, AND it uses coffeescript
03:34 < ChrisPartridge> lol
03:34 < ChrisPartridge> are you trying to create a black hole niggler? 
03:34 < niggler> sorry, it is "based on coffeescript"
03:35 < niggler> lol ChrisAnn_ 
03:35 < niggler> * ChrisPartridge 
03:35 < astropriate> hahaha
03:35 < astropriate> jade went full retard
03:35 < astropriate> you never go full retard
03:35 < ChrisPartridge> https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcQtiOqeQzQN7Cjxck9gCIzB5TdrU0B3gq5iH18MMUTucWfUWwOX
03:36 < niggler> astropriate what did you do to astropirate?
03:37 < astropirate> on work computer 
03:37 <@isaacbw> "the slickest syntax ever"
03:37 < niggler> ah 
03:38 <@isaacbw> is logic-little a term
03:38 < niggler> i wonder how toffee is related to toffee-script: https://github.com/jiangmiao/toffee-script
03:39 < serapath> damn, it my chrome console still complains about /socket.io/socket.io.js doesnt exist :/
03:39 < ChrisPartridge> niggler: they both slipped through the same inter-dimensional worm hole, from a dimension where coffee script IS javascript
03:39 < niggler> serapath are you sure you are using socket.io?
03:40 < niggler> is coffee script the new jquery?
03:40 < niggler> haha cquery
03:40 < serapath> yes i do
03:41 < niggler> serapath can you directly hit /socket.io/socket.io.js ?
03:41 < serapath> no
03:41 < serapath> my console logs: info  - socket.io started
03:41 < serapath> so i think the serverside works, but the client cannot find its library
03:42 <@isaacbw> have you ever met a coffee scripter face to face? It's a strange moment
03:42 < AAA_awright> Yes
03:42 < niggler> lol isaacbw coffee scripters are like old hipsters
03:42 < niggler> the young hipsters are using live script or icedcoffeescript or toffee-script
03:43 <@konobi> serapath: got a pastebin?
03:43 < serapath> konobi: of what exactly?
03:43 <@konobi> your socket.io server code
03:44 < serapath> its split across several files
03:44 < ChrisPartridge> gist allows you to paste several files, in a nice format
03:44 < niggler> ChrisPartridge https://github.com/gkz/LiveScript/issues/116
03:45 < ChrisPartridge> lol, -10000
03:51 < niggler> i think the saddest part ChrisPartridge is https://github.com/jashkenas/coffee-script/issues/2715#issuecomment-14049937
03:51 < niggler> " legacy coffeescript"
03:51 < niggler> is coffee script that old that there's *legacy* CS?
03:52 < Sly> lulz
03:52 < harbhub_> lol
03:52 < Sly> I didn't think so, but okay.
03:53 < ChrisPartridge> the meme says it all
03:53 < serapath> konobi: http://pastebin.com/S8GH22cS
03:53 < niggler> i think the bottom line is unnecessary
03:57 < serapath> the client code is just two lines
03:57 <@konobi> serapath: where are you calling httpServer.listen(80) ?
03:58 < ChrisPartridge> brianc: seen you have a streams2 branch on GH for node-pg - get very far with it?
03:58 < kumavis> i need a bidirectional XML<-->JSON tool. an npm search returns many options-- Any suggestions?
03:59 < serapath> konobi: i dont, i do: app.listen(80, 'localhost', function(){console.log('server running on localhost:80');});
03:59 <@konobi> serapath: do httpServer.listen
03:59 < serapath> oh ok
04:00 < serapath> i thought, since i pass app to  require('http').createServer(app)
04:00 < serapath> it will do it
04:00 < serapath> thx, i'll try
04:00 < ChrisPartridge> nope, that just says let "app" handle some stuff
04:00 < serapath> ah damn, ok.
04:01 < serapath> so should i remove app.listen or can i let the http server listen on the same port or...
04:02 < ChrisPartridge> serapath: just listen on the http server
04:02 < sinclair|net_> hi ChrisPartridge 
04:03 < ChrisPartridge> hey sinclair|net_
04:03 < sinclair|net_> ChrisPartridge: hey, instead of console.log() how do i out to the console via process.stdout?
04:03 < ChrisPartridge> stdout is just a stream
04:04 < ChrisPartridge> so, yeah, either pipe to it, or just .write
04:04 < sinclair|net_> all good
04:05 < jwm> in date.now in a mongoose schema
04:05 < jwm> is that when you actually do a save
04:05 < jwm> or when you create the object
04:06 < jwm> I need a more accurate timestamp since I delay saving data until everything is processed
04:06 < jwm> and by then a few minutes would've gone by
04:06 < jwm> otherwise I can just save the date in the field manually
04:06 < ChrisPartridge> jwm: i don't use mongoose, or mongo, but perhaps set it before the commit/save
04:07 < ChrisPartridge> surely there is something in mongo though
04:07 < jwm> well it is there
04:07 < jwm> I am just wondering when it fires
04:07 < jwm> :)
04:07 < SomeoneWeird> mongo is just javascript so just do new Date()?
04:07 < jwm> yeah 
04:07 < serapath> :D OH MY GOODNESS :-) ...and how i am :P
04:07 < jwm> I'm just wondering if the schema definition is evaluated on object creation or .save()
04:07 < serapath> it works, or at least new bugs
04:07 < serapath> but it found the file
04:07 < serapath> yay
04:08 < serapath> thx so very much
04:09 < ChrisPartridge> jwm: test it :P
04:09 < ChrisPartridge> setTimeout(function() { doc.save() }, 500000000000000000)
04:09 < ChrisPartridge> maybe set a smaller timeout :)
04:11 < serapath> it now tells me: GET http://localhost:31337/socket.io/1/?t=1372997307716 403 (Forbidden) 
04:12 < serapath> btw, changed port from 80 to 31337 when i switched to server.listen
04:12 < serapath> the 404 is gone
04:13 < jwm> ChrisPartridge: yeah I just looked at my db saves
04:13 < jwm> it looks like it is done on object creation
04:13 < jwm> which is what I wanted :)
04:13 < ChrisPartridge> swoit
04:14 <@konobi> serapath: got some authentication going on?
04:15 < serapath> hmm
04:16 < serapath> my routes are not protected through middleware, only a couple of them
04:17 < serapath> and i dont use wildcard protection or something
04:17 < jwm> what do you guys recommend for semi large data rpc across the net from node to node
04:17 < jwm> right now I am using socket.io which seems to work ok with xhr-polling and callbacks
04:18 < jwm> I've got a stupid proxy between the nodes 
04:18 < serapath> if i hit a url that doesnt exist, e.g. /foo, it gives me Cannot GET /foo
04:18 < jwm> and against policy to do a vpn..
04:18 < Beg_> >> var x = [1]; x.Contains(1);
04:18 < purr> Beg_: TypeError: Object 1 has no method 'Contains'
04:18 < ChrisPartridge> jwm: node to node? check out https://github.com/substack/dnode
04:19 < jwm> yeah I already tried it out
04:19 < jwm> socket.io is a lot simpler since it already does all of the emit 
04:19 < jwm> emit binding heh
04:19 <@konobi> serapath: change the log levl
04:19 < jwm> I did find his turtle rapping example and I got it to work that way
04:20 < serapath> konobi: i just deactivated passportjs, but didnt change a thing. what kind of loglevel?
04:20 <@konobi> jwm: shoe
04:20 <@konobi> serapath: socket.io has one
04:21 <@konobi> connect/express too, iirc
04:21 < serapath> currently it gives me: debug - served static content /socket.io.js   ....and ... warn - illegal origin: http://localhost:31337/redistest
04:21 < serapath> currently using:  var sio  = socketIO.listen(httpServer, {origins: '":"', log: true})
04:22 <@konobi> why double quotes?
04:22 <@konobi> well, double quotes inside single quotes
04:23 < jwm> get your socket listening code out of your route code
04:23 < jwm> it already binds to the httpserver and intercepts
04:25 < scathen^C> hey all, anyone know of good docs/tutes on deployment and deployment best practices (if there are any)
04:25 <@konobi> scathen^C: depends on the app
04:27 < jwm> autossh is so nice
04:27 < jwm> :)
04:28 < serapath> konobi: dont know, removed the double quote, but didnt change a thing
04:30 <@konobi> serapath: try the default of *:*
04:32 < serapath> konobi: ok, now it works... but i still get the 403
04:32 < serapath> konobi: ah no, doesnt work :/
04:33 <@konobi> now you just have to track it down to either your express app or your socket.io config
04:33 < serapath> what should i look for? console tells me: warn  - illegal origin: http://localhost:31337/redistest
04:34 < ChrisPartridge> serapath: that comes back to cors stuff, iirc
04:35 < serapath> cors stuff?
04:35 < ChrisPartridge> http://en.wikipedia.org/wiki/Cross-origin_resource_sharing
04:37 < serapath> yes, thx. just found something on stackoverflow
04:37 < ChrisPartridge> serapath: can you see the browser doing a "OPTIONS" request?
04:37 < serapath> i wonder why it does that
04:37 < ChrisPartridge> serapath: security
04:37 < serapath> because, i use an up to date chrome
04:38 < ChrisPartridge> yes, and chrome is probably doing the right thing
04:38 < serapath> how can i look if the browser does so?
04:38 < ChrisPartridge> your server has to allow it though
04:38 < ChrisPartridge> look at the requests, in the networkt ab
04:38 < ChrisPartridge> network tab
04:38 < ChrisPartridge> menu -> tools -> developer tools
04:39 < serapath> oh, wow, lots of things going on there
04:39 < ChrisPartridge> can you see, under the method column
04:39 < ChrisPartridge> one with "OPTIONS" ?
04:40 < serapath> CTRL+F option doesnt give me a hit
04:40 < serapath> cant see anything with option
04:40 < serapath> but the forbidden GET is marked in red
04:40 < ChrisPartridge> serapath: go to network tab, refresh the page
04:41 < ChrisPartridge> and it will probably be at the bottom of the list
04:41 < serapath> no nothing there
04:41 < serapath> only lots of stuff which was initiated by parser, and then one by script (thats the socket.io thing)
04:42 < ChrisPartridge> might need to be configured with socket io then
04:42 < ChrisPartridge> try, io.set('origins', 'the.domain.you.are.coming.from:port')
04:43 < serapath> the first one loads the html, then all js scripts are loaded, then an image file is loaded, then the last one is the 403 socket.io thing
04:43 < azbyin> niggler, lol @ that comment on 'legacy coffeescript'
04:44 < azbyin> did you see this one: https://github.com/jashkenas/coffee-script/issues/2715#issuecomment-14067292  a whole lot more lol at that comment
04:46 < serapath> ChrisPartridge: no, didnt solve it. but now my server crashed with a bit of logging by socket.io
04:46 < ChrisPartridge> serapath: not sure, haven't used cors+socket.io - http is simple as pie, so perhaps do a bit of googling
04:46 < serapath> thats what it told me http://pastebin.com/rz259sq9
04:47 < serapath> ChrisPartridge: i would if i only knew what to look for :P
04:49 < ChrisPartridge> serapath: just google "socket.io" "cors" maybe
04:49 < ChrisPartridge> someone has probably done it
04:49 < ChrisPartridge> tried #socket.io ?
04:50 < serapath> oh, didnt know it exists
04:50 < azbyin> nothing to do with socket.io really..
04:50 < azbyin> you need to set the right headers
04:51 < azbyin> i think this is most relevant to you: http://stackoverflow.com/questions/7067966/how-to-allow-cors-in-express-nodejs
04:51 < serapath> btw, why does it use cors?
04:52 < serapath> it sounds like its using some kind of fallback mechanism
04:52 < ChrisPartridge> azbyin: i got him to check for OPTIONS requests, so i assumed cors was diff when it comes to websockets
04:52 < serapath> like, socket.io uses different stuff when websockets is not available or something
04:52 < azbyin> no idea. you need cors if you are accessing cross domain stuff
04:53 < azbyin> ChrisPartridge, not really. if you see the stackoverflow question i linked to, you'll see that essentially his routing isn;t setup properly
04:53 < azbyin> serapath, is there a place where you've pasted all your client and server code?
04:53 < azbyin> are you using express?
04:53 < ChrisPartridge> *shrugs* I've done plenty of http cors stuff without issue, so yeah, if chrome isnt sending the OPTIONS request, might be deeper issues
04:55 < serapath> azbyin: i am using express and no, there isnt a place where i pasted all of it. code is a bit o messy, tons of comments, because i'm still learning. but i could paste a couple of files somewhere
04:56 < azbyin> http://enable-cors.org/server_expressjs.html
04:56 < serapath> maybe my server file and the routing file or something
04:56 < serapath> guess its a pretty simple thing, because i feel like i'm doing only basic stuff
04:56 < azbyin> edit your server file to add stuff appropriately from that link
04:56 < serapath> and i'm on an up to date chrome and up to date version of mostly everything
04:57 < serapath> btw, does a socketio connection always use CORS?
04:57 < ChrisPartridge> azbyin: problem is, the CLIENT isn't sending an OPTIONS request, so if that ain't happening, then the headers aren't going to do anything
04:58 < serapath> do i have to include these Access-Control-Allow-Origin on every route?
04:58 < ChrisPartridge> serapath: any route that you want to allow cors on, and you must respond with a 200 OK on the OPTIONS request
04:59 < serapath> i added the app.all from that link
04:59 < serapath> didnt change a thing
05:00 < ChrisPartridge> yep... as I said, the first issue is with socket.io not making a proper cors request
05:00 < azbyin> ChrisPartridge, the actual standard requires the pre-flight request only for non-trivial content  https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS?redirectlocale=en-US&redirectslug=HTTP_access_control
05:00 < ChrisPartridge> but you will need those
05:00 < azbyin> serapath, could you paste the server code and a sample client file?
05:00 < serapath> my last call on the /redistest route is           res.status(200).render('redisSocket', { data : data });
05:00 < azbyin> i cannot see why this would not work.
05:01 < serapath> is it ok to create a couple of pastebins?
05:02 < azbyin> sure
05:02 < ChrisPartridge> azbyin: but is that what the browsers do in practice?
05:03 < azbyin> yup, i've seen no options request on xhr stuff that simply gets some stuff
05:03 < azbyin> atleast a while back on chrome
05:03 <@konobi> serapath: https://github.com/LearnBoost/socket.io-client/issues/333
05:03 < azbyin> but i've also seen the reverse, i.e. chrome sending options requests even when the request was a silly get
05:04 < azbyin> so yes, the browsers are a little weird i guess. but that still shouldn;t make it 'not work'
05:04 < ChrisPartridge> azbyin: yeah, I've got an API, which we have several apps hanging off - chrome sending pre-flight for GET's.. for sure
05:04 < kenperkins> best part of fireworks is watching all the money your neighbors blew go down the drain
05:04 < ChrisPartridge> thanks for pointing that out though, I'll do some testing
05:05 < ChrisPartridge> kenperkins: haha
05:05 < serapath> so first one is the server file
05:05 < serapath> http://pastebin.com/ubuVu0BF
05:05 < azbyin> uh, ok. regardless, to make cors work properly you need to be able to handle the options request. so if you;ve got that down pat, options or no options it should work cos the server looks at the origin (for non-preflighted) requests
05:05 < serapath> did say that to me?
05:06 < serapath> i dont understand a thing of that
05:06 < serapath> what? :P
05:06 < azbyin> nope, was to ChrisPartridge 
05:06 < serapath> ah ok
05:06 < azbyin> :)
05:06 < serapath> *phew*
05:09 < astropirate> did jade change its front end API?
05:09 < astropirate> the template() function is no longer available
05:09 < astropirate> ReferenceError: template is not defined
05:09 < astropirate> i recently upgraded
05:09 < serapath> this is the router http://pastebin.com/A8pS8QQg
05:10 < serapath> i just realized, maybe line 218 will do something that i dont want?
05:11 < oren> i currently use nodeup + rss to catch up with node related stuff. are there useful twitter accounts i should follow?
05:11 < oren> i heard people mention twitter as a way to get updates about node. i just don't understand how 140 chars can be helpful.
05:11 < serapath> ah no, its in comments, but by removing something, i removed a /*
05:11 < serapath> so nevermind. its not active
05:14 < serapath> thats the user router http://pastebin.com/0dJV8reM
05:15 < serapath> so what else would be important? maybe the jade files and maybe the custom socket io javascript stuff i use in that jade file, right?
05:15 < serapath> so the client side
05:16 < serapath> btw. its my first nodejs project, so if i do something very unusual or weird, i would be happy to learn
05:17 <@konobi> strip everything down with comments first =0)
05:21 < serapath> what u mean? should i repaste it without the comments?
05:23 < mscdex> node.js rules!
05:25 < astropirate> mscdex, give it time...
05:26 <@konobi> ?
05:27 < astropirate> &
05:27 < mscdex> astropirate: i've given it over 9000 already
05:27 < astropirate> give it over 9001
05:28 < astropirate> lol by thati mean
05:28 < mscdex> impossible!
05:28 < astropirate> work on a big project with multiple people
05:28 < astropirate> specailly if one or two of them leave :)
05:28 < astropirate> thats where javascript will bite you a**
05:28 < mscdex> why? what about big projects by myself to start with? ;-)
05:28 < serapath> server.js http://pastebin.com/ubuVu0BF , router.js http://pastebin.com/Gh9VD1uw , user.js http://pastebin.com/d9JHM5k9
05:28 < ChrisPartridge> astropirate: that's not nodes problem though :p
05:29 < astropirate> ChrisPartridge, thats directly a node problem
05:29 <@konobi> doesn't that just describe software projects in general?
05:29 < ChrisPartridge> pretty much
05:29 < astropirate> well yes
05:29 < astropirate> but not to this extent
05:29 < astropirate> javascript is so easy to work with
05:29 < mscdex> people like to complain, but i don't encounter their problems with javascript/node
05:29 < serapath> any idea why socket.io doesnt behave?
05:29 < astropirate> its extremely flexible 
05:29 < astropirate> but that is exactly what comes back to bite you, if you + yoru team isn't disciplined 
05:29 <@konobi> i have the same issue with bash projects
05:29 < astropirate> its a javascript problem
05:30 < astropirate> but node inherits JS problems
05:30 < mscdex> i'm a lucky noder!
05:30 < mscdex> s/problems/awesomeness
05:30 <@konobi> mscdex: btw, want a PR for that ncurses solaris fix?
05:30 < ChrisPartridge> you're super human mscdex, so you don't count :p
05:30 < mscdex> :-D
05:30 < astropirate> anyway
05:30 < astropirate> so whats the deal with jade's templates?
05:30 <@konobi> you're using jade
05:30 < astropirate> i am trying to define templates and it is trying to run the template instead of just defining it
05:31 < mscdex> konobi: sure, i may not get a chance to look at it until after the weekend though
05:31 < astropirate> and complaining about accessing properties from undefined
05:31 < mscdex> so jaded
05:31 <@konobi> mscdex: well, I have a binary version i can use for the meantime... but i'll file that sometime over the weekend
05:31 < serapath> azbyin: any idea?
05:32 < azbyin> whyd you put stuff in /app/server/ ? grr..
05:32 < azbyin> lemme create the dir structure
05:32 < serapath> i have app/server and app/client
05:32 < astropirate> I sooooo wish there was a jade => HTML/Handlebars converter
05:33 <@konobi> i don't think i'd use jade for anything non-trivial
05:34 <@konobi> cute 'n all... 
05:34 < serapath> konobi: why?
05:34 < AAA_awright> astropirate: That's kind of what the official Jade library does... Generates HTML, you know?
05:34 <@konobi> serapath: hard to put my finger on it exactly
05:35 < serapath> ok. actually, i use jade because many tutorials use it and its somehow the default for express and the author is awesome
05:35 < serapath> but i want to switch to handlebars or something in the future
05:35 < serapath> actually, only because i believe its easier to share work with designers if i dont use jade
05:36 <@konobi> ejs tends to be the one i see used more
05:36 < serapath> but beside that, jade is pretty conscise, and i like that
05:36 < serapath> had some tutorials with ejs too, but i dont like ejs
05:36 < serapath> i think jade is awesome. like stylus
05:37 < serapath> because indentation matters, i can write very short templates. and assigning ids and classes with .foo or #bar is nice
05:37 < serapath> azbyin: beside the dir structure, is there anything obvious that i do wrong?
05:38 <@konobi> doT is also an option
05:38 < ChrisPartridge> if you're working with designers/ui guys, something like jade is just a pita
05:38 < serapath> theres many which use some kind of mustache syntax. dont know yet which one to use
05:38 < serapath> but i like it and i believe its very easy for designers to just use {{foo}} in their html
05:39 <@konobi> http://olado.github.io/doT/
05:40 < ChrisPartridge> +1 for dot, or underscore/lodash templates if you are already using it
05:42 < mscdex> indentationhell.com
05:42 < serapath> i have bookmarked doT, but theres many awesome teomplateing stuff and constantly new stuff... dustjs, swig, doT, handlebars, and something from nodejitsu that has something with nunchucks in its name
05:42 < serapath> and then there is stuff like beardless and weld
05:43 < serapath> jsdom stuff or something. havent yet understood how to use that, but it sounds cool
05:44 <@konobi> i had fun with a mustache style thing... http://search.cpan.org/~konobi/Template-Teeny-0.00_002/lib/Template/Teeny.pm
05:46 < ChrisPartridge> what is this code you have linked to that is not javascript ;)
05:48 <@konobi> =0P
05:51 < serapath> azbyin: are u still there?
05:51 < azbyin> yeah, still here.. working on some stuff..
05:51 < azbyin> wait lemme make a small express app now including sio
05:52 < serapath> ah node-jinjs was the templating thing i forgot
05:53 < serapath> but i think i will try handlebars or dustjs, maybe swig ...am undecided yet.
05:53 < serapath> but eventually i try beardless and/or weld 
05:53 < serapath> afaik, they use jsdom to constract everything instead of using a templating language, but my understanding is still pretty fuzzy
06:01 <@konobi> jsdom seems kinda heavy for serverside template rendering
06:02 < serapath> i read it would be fast
06:02 < serapath> because templating needs to rerender the whole page
06:03 < serapath> but with jsdom, i could somehow only update what i need to update? havent understood it yet, but read some articles and sounded cool
06:03 < serapath> :P
06:03 < ningu> jsdom is very slow
06:03 < ningu> use cheerio if you want to go that route
06:03 < ningu> or use one of substack's hyper* modules
06:03 < serapath> hyper?
06:04 < ningu> hyperglue
06:04 < serapath> when it comes from substack its probably uberawesome
06:04 < serapath> what do u think of beardless or weld?
06:04 < ningu> never used them
06:06 <@konobi> yeah... there's always sides... like the phantomjs vs chimera decision
06:08 < serapath> guess my main problem is, that i dont really understand the problem yet
06:08 < serapath> so thats why i cant decide for myself what i should use :-D
06:09 < serapath> azbyin: hey, u take pretty long. i start to feel bad about that, i mean u still doing stuff for me? 
06:10 < serapath> azbyin: i really have no clue what the socket problem is, but if u have some awesome hints or something, i could google too and try to solve it somehow
06:10 < serapath> :-)
06:11 <@konobi> serapath: start a new folder and then do the minimum amount possible to get sio and express working together... then build up from there
06:12 <@konobi> (ie: ignore routes, views, external libs, etc.)
06:12 < serapath> thats what i probably would have tried next, but i wonder if azbyin does something before i start this. he wanted to give me hints on how to better structure my code and complained about app/server app/client folders
06:13 < serapath> btw, whats with phantomjs and chimera. for me, chimera sounds awesome
06:13 < azbyin> eh.. bleh.. i've been busy with stuff
06:13 < azbyin> sorry if i gave the indicationt hat i was working 100% on this :)
06:14 < azbyin> ok, i'll spend 100% now for a few mins on this
06:14 < serapath> wow, thx :-) i mean i would start a new project and try to get it to work and then try a merge with my current one, but if u have some hints for me, would be awesome
06:14 < azbyin> right, default express app generated, package.json edited to add socket.io, editing the default app.js now
06:16 < azbyin> right, added in socket.io on the server to simply dump a message on console that a new connection was recvd
06:16 < azbyin> seems to work fine. i need a client html file now
06:18 < serapath> so i paste the jade file and custom socket js script it uses, right?
06:18 < serapath> brb :-) and btw thx
06:18 < azbyin> jade? i'm not touching that
06:19 < serapath> oh, ok i render it to html
06:19 < azbyin> i'm creating a default express app, then adding in socket.io and creating a static html file as the client to make sure ws connections are working
06:21 < azbyin> right.. here you go
06:23 < serapath> http://pastebin.com/NqfUXaz5
06:23 < serapath> thats my client file
06:23 < serapath> with the javascript dumped into it
06:23 < azbyin> serapath, https://gist.github.com/anonymous/5932356
06:23 < serapath> oh cool
06:24 < azbyin> so the server dumps a new date object as a 'news' item every 2 seconds
06:24 < azbyin> you might want to increate it to 5 seconds cos i just realised it was sending too much output to my console on the browser lol
06:24 < serapath> one thing i noticed a lot is, that some examples use app.configure(function(){ ... } and some dont
06:25 < serapath> ok thx :-)
06:25 < azbyin> don;t ask me the specifics of express though
06:25 < serapath> ok
06:25 < serapath> :-) hey thx a lot
06:26 < azbyin> lol no worries.. apologies if i gave the impression of working on this for a long time, heh.. i had a lot of other things to do
06:28 < azbyin> also not sure why you needed cors here. everything is running within the same domain
06:37 < meanpath> git
06:37 < Trangar> Are you calling me a git?
06:50 < serapath> should something happen?
06:50 < serapath> it runs, but nothing happens
06:51 < serapath> ah ok, took its time, set the timer to high
06:51 < serapath> thx :-)
06:51 < azbyin> serapath, lol ok
07:09 < mkozjak> i'm trying to switch from using the 'data' event to the streams2 interface. so how do i create a tcp server now? still with the 'net' module?
07:09 < raduu> https://github.com/substack/stream-handbooka
07:10 < mkozjak> thanks
07:15 < serapath> is this not legal? 	socket.on('message', function(data) { if ('buffer' in data) { /* do stuf */ } });
07:18 < azbyin> serapath, is there an error you are getting?
07:21 < serapath> Uncaught TypeError: Cannot use 'in' operator to search for 'buffer' in [object Object] 
07:23 < azbyin> >> myobj={ name:"myobj" }; 'buffer' in myobj; myobj.buffer="buf"; 'buffer' in myobj
07:23 < purr> azbyin: (boolean) true
07:23 < azbyin> bleh, only last output shown
07:23 < azbyin> >> myobj={ name:"myobj" }; console.log('buffer' in myobj); myobj.buffer="buf"; console.log('buffer' in myobj)
07:23 < purr> azbyin: undefined; Console: false, true
07:24 < azbyin> serapath, what kind of browser are you using? or is this within node?
07:25 < serapath> no browser
07:25 < serapath> chrome
07:25 < serapath> i now use hasOwnProperty
07:25 < serapath> that works
07:25 < serapath> but now i have again a problem iwth socket.io ... i use socket.broadcast
07:26 < serapath> but it tells me there is no such method
07:26 < serapath> maybe removed and the tutorial that used it was too old?
07:27 < azbyin> io = require('socket.io').listen(httpServer); io.socket.on(   its not just io = require('socket.io'); io.socket.on(
07:29 < serapath> actually i do:     sio.sockets.on('connection', function(client) { client.broadcast ...
07:33 < [AD]Turbo> hi there
07:36 < serapath> ah solved
07:37 < serapath> its client.broadcast.emit(...) not client.broadcast(...)
07:37 < serapath> i never again use old tutorials
07:49 < Fabryz> Hello, has anyone ever tried to share a queue betweet Node and Laravel4? I'm trying to produce stuff in node and consuming them, but it seems the payload created is not formatted correctly (using beanstalker/IronMQ)
07:53 < ChrisPartridge> Fabryz: getting any specific error? are messages getting into the queue?
08:06 < sinclair|net_> https://github.com/sinclairzx81/appex <-- yay
08:07 < sinclair|net_> ChrisPartridge: my new module
08:07 < sinclair|net_> and, it even plugs into express
08:13 < Fabryz> ChrisPartridge https://gist.github.com/Fabryz/371b2cc4507131a108d5 using iron_mq atm, I don't understand how I should format the message payload to be compatible with the L4 unpacker
08:13 < Fabryz> welp I'll give a look at the vendors
08:15 < Fabryz> silly question: is it supposed to work this way? I mean, it's 2 different applications working on that queue
08:15 < Fabryz> or should queues be used only inside the single application
08:16 < ChrisPartridge> sinclair|net_: cool - but you know I'm not too big on TS :p
08:17 < sinclair|net_> ChrisPartridge: yeah i know
08:17 < ChrisPartridge> Fabryz: well, it looks like IronMQ has a HTTP interface
08:17 < ChrisPartridge> Fabryz: So i would assume, POST to the queue, then your otherside takes it from queue
08:18 < ChrisPartridge> Fabryz: where is that error coming from
08:18 < ChrisPartridge> looks like PHP?
08:18 < ChrisPartridge> Fabryz: from that stack trace, it looks like whatever component that is, is trying to decrypt the message
08:29 < Fabryz> ChrisPartridge goddamn I confirm that in L4 it expects a message formatted in a certain way, like a JSON with 3 fields, base64 encoded :/
08:30 < sinclair|net_> niggler: are you still here?
08:30 < fesener_> Would someone please guide me, I'm pretty new to this stuff and so confused, I want to build a lobby as a django app, this lobby will have 2 sections; 1- list of currently active members in this app, 2- list of currently active games which have been built by some of these members. When a player selects a game from the list he will see other members in this game. When a player creates a game, it'll create a "game" object in the database and then creator
08:30 < fesener_>  of the game will chose amongst the users that are in this game at the moment. All of these lists will be updated automatically. There will be 2 teams so he'll assign players to these 2 different teams, after game's full he'll start it and system will just generate a random number and sent to chosen users in this game and then system will update the database object that creator of the game made (alter is_active to false). Which tools should I use to cr
08:30 < fesener_> eate such system? Is ajax enough or should I use nodejs, socket.io etc. ?
08:36 < ChrisPartridge> Fabryz: heh, you should be able to do pretty easy in node
08:37 < fesener_> ChrisPartridge, would you explain how the system should be built ? just a summary
08:38 < Fabryz> ChrisPartridge I just supposed it worked in plain text messages, now I will have to replicate L4 encryption on the node app I guess
08:42 < `3rdEden> fesener_: look at Primus, it's a module i released a couple of minutes ago, which makes it easy to build a real-time application: https://github.com/3rd-Eden/primus
08:43 < ChrisPartridge> fesener_: sorry, heading home now - im exhausted, but there are lots of socket.io guides out there that do very similar things
08:43 < ChrisPartridge> Fabryz: yup, probably so it can handle small amounts of binary data etc
08:43 < ChrisPartridge> anyway, im off!
08:43 < fesener_> what should I be searching for ChrisPartridge would you give me a keyword before you leave
08:44 < fesener_> `3rdEden, i'm reading the doc now, i hope its usable for a newbie like me thanks
09:02 < oren> anyone got an example of express.js + domains? i loved the domains session at nodeconf but lost my notes.
09:03 < sinclair|net_> why does all my stuff appear last on npm :(
09:14 < timoxley> when invoking a grep via spawn, how can I make believe it's printing to the terminal? 
09:15 < timoxley> i.e. I get differently formatted output via spawn than I do with invoking the command on the commandline
09:15 < timoxley> I'm inheriting stdio
09:15 < timoxley> and process.env
09:19 < dagerik> i am making links in my nodejs app like this: return 'http://localhost/' + id
09:19 < dagerik> but when i deploy, that URL obviously fail.
09:19 < dagerik> how should i resolve this?
09:21 < sCoRpi> dagerik: just remove http://localhost ?
09:21 < sCoRpi> and in your html template maybe set a baseurl
09:21 < dagerik> sCoRpi: the link needs to be put in an email
09:23 < timoxley> dagerik a config var? or conditional based on NODE_ENV?
09:24 < timoxley> dagerik e.g. if (process.env.NODE_ENV === 'production') root = 'http://domain.com'
09:59 <@MI6> joyent/node: Tim Oxley v0.10 * 2d6d461 : doc: remove obsolete spawn() stdio options - http://git.io/Ilzq1g
10:17 <@MI6> joyent/libuv: Ben Noordhuis v0.10 * 37d0209 : unix: fix build when !defined(PTHREAD_MUTEX_ERRORCHECK) - http://git.io/LT4D5Q
10:17 <@MI6> joyent/libuv: Ben Noordhuis master * 13f73fa : Merge remote-tracking branch 'origin/v0.10' (+1 more commits) - http://git.io/IgFRMw
12:03 < sinclair|net_> niggler: !
12:10 < vatson> Hi guys. Is there someone who uses debugging of coffescript that is compiled by nodejs on fly?
12:10 < sinclair|net_> vatson: nope, i use typescript :)
12:11 < sinclair|net_> i compile that on the fly
12:11 < vatson> sinclair|net_: how do you manage source mapping in this case?
12:11 < sinclair|net_> https://github.com/sinclairzx81/appex - have a look
12:13 < sinclair|net_> vatson: ideally, you need to run compile on the fly coffeescript in a child_process, and be smart with its stdout
12:13 < vatson> I'm not sure that I follow you
12:17 < SomeoneWeird> run
12:17 < Chiffon35> hi all
12:17 < HappyUser> hi
12:18 < HappyUser> Does somebody know if http-proxy is suitable for content manipulation? (HTTP)
12:18 < HappyUser> https://github.com/nodejitsu/node-http-proxy
12:57 -!- ServerMode/#Node.js [+o isaacbw] by hitchcock.freenode.net
12:58 -!- ServerMode/#Node.js [+o MI6] by hitchcock.freenode.net
12:58 -!- ServerMode/#Node.js [+o xyxne] by hitchcock.freenode.net
12:58 -!- ServerMode/#Node.js [+o trevnorris] by hitchcock.freenode.net
12:58 -!- ServerMode/#Node.js [+o konobi] by hitchcock.freenode.net
13:04 < schuranator> Anyone live to chat?
13:08 < Tyrantelf> whats up?
13:10 < schuranator> I have a question about using node.js as a api
13:11 < Tyrantelf> ahhh, thats why I was just dropped.
13:12 < schuranator> I'm using an expresstrain angular seed and did some changing around my goal is to get angular on my phone using phone gap and login and authenticate the user. So I have passport.js and was able to login and pass the user back to the phone. But when I use req.isAuthenticated or req.session it seems like the phone isn't storing the session I was wondering if there might be a good example or something to look at
13:13 < Tyrantelf> look at all the guests.
13:13 < GlitchMr> So fun. The NickServ went, and required everybody to relogin.
13:16 < schuranator> Holy smokes
13:20 -!- ServerMode/#Node.js [+o MI6] by hitchcock.freenode.net
13:20 -!- ServerMode/#Node.js [+o konobi] by hitchcock.freenode.net
13:21 -!- ServerMode/#Node.js [+o xyxne] by hitchcock.freenode.net
13:28 -!- ServerMode/#Node.js [+o trevnorris] by hitchcock.freenode.net
13:40 < Tyrantelf> dis place is as dead as I've ever seen it
13:43 < zipp> Heyy, did anyone get pictures of a guy with a mohawk hat at Node Conf? I'm trying to put together a presentation / blog post, and I realized the only pics and videos I have are ones I took of me building things :o
13:43 < faraway> Is here someone developing node applications with eclipse? I running into a problem while debugging an application.
13:43 < faraway>  I have an object that contains 3700 keys, which seems to be to much for the eclipse debugger, because instead of showing any variables it either displays nothing or an error message. Is that somehow solvable?
13:45 < zomg> faraway: you could dump it as a string with JSON.stringify(bigThing)
13:45 < zomg> Obviously sorting through 3700 keys may be a bit of work when it's a string but... :P
13:46 < zipp> Start a server, dump it out over http, and then debug it in the browser :P
13:48 < faraway> zipp: thats what i do right now ;)  reminds me of the good old says debugging IE with alert ^^
13:48 < faraway> days
13:50 < faraway> zipp: i do not really need access to the object itself. but as soon as the objects has to many keys i event cannot look at other variables … thats what is really annoying about it.
13:50 < gigo19801> @sinclair|net_ : sorry my internet lag. so now i am back again
13:50 < zipp> faraway: those were good days :D and quite simply: oh.
13:50 < zipp> faraway: think you're hitting a buffer limit or something?
13:51 < gigo19801> what are the fastes webservice technologie that can be used with other technologies for nodejs ?
13:51 < gigo19801> i have to write mass concurrency application
13:52 < sinclair|net_> gigo19801: you could try this for writing the web services https://github.com/sinclairzx81/appex
13:52 < sinclair|net_> in terms of redis, not to sure
13:53  * sinclair|net_ smells a future project
13:54 < zipp> sinclair|net_: i've done distributed systems using node and redis' insanely fast pub/sub for event distribution. works pretty freaking awesome.
13:54 < faraway> zipp: that or a timeout … seems like eclipse tries to create the whole tree for the variable (at least it is doing something until it tells me that displaying variables failed).
13:54 < sinclair|net_> zipp: nice
13:55 < zipp> combine it with engine.io, and you've got lightning fast realtime data
13:55 < sinclair|net_> zipp: ill have to check it out
13:55 < sinclair|net_> zipp: i've been meaning to look at message queue/bus options with nodejs
13:56 < sinclair|net_> zipp: notably for that project i just linked
13:56 < gigo19801> so i ll take a loog on this 2 links
13:57 < zipp> sinclair|net_: ahh gotcha. a former colleague of mine wrote this module amino, and i've used it a couple times for shucking events around easily on top of redis
13:57 < zipp> https://github.com/amino/amino
13:57 < mkozjak> what is an alternative to net.createServer if i want to switch from using 'data' to using streams2? does this question make any sense at all?
13:57 < mkozjak> do i use 'net' at all if i want to use streams2 to open a duplex stream to communicate with clients
13:58 < mkozjak> ?
13:58 < sinclair|net_> zipp: yeah, thats quite nice :)
14:15 < r04r> I'm having some issues with the stdin stream... I'm using the terminal-menu module, and am trying to get it to relinquish control over stdin and stdout so I can do other things with them, which seems to work correctly, but for some reason an error event on stdin is being generated for "Error: read EIO". Anyone have a clue what this means?
14:15 < mkozjak> is there an example code of a tcp/http server which takes connections and writes to sockets using streams2 interface?
14:16 < mkozjak> can anyone give me an intro?
14:26 < r04r> Does anyone know how to switch a stream back to new mode, after havign switched it to old mode using resume() or pause()?
14:38 < Absolute0> Should I run make install with root access when installing node?
14:40 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:42 < spion> Absolute0, yes unless you have a reason not to
14:47 < Absolute0> spion: ubuntu answered the question for me with "you don't have permission..."
14:48 < Absolute0> :)
14:48 < spion> sudo make install ?
14:48 < Absolute0> yup
14:48 < Absolute0> With node are there two main threads? One for the current file, and one for all the callbacks?
14:48 < Absolute0> A main thread and an event loop?
14:49 < Absolute0> Or do the callbacks get their own threads?
14:50 < Absolute0> because even if one callback gets placed on the event loop, won't that block the next callback in line?
14:50 < Absolute0> http://www.nodebeginner.org/, claims that event-driven asynchronous callbacks fixes the issue of blocking the server
14:51 < zipp> Absolute0: it's a single thread. event-driven asynchronous callbacks fix the issue of blocking the server :P
14:51 < Absolute0> Where are the callbacks run?
14:52 < Absolute0> If it's another dedicated thread, then users will still experience blocking
14:52 < Absolute0> database.query("SELECT * FROM hugetable", function(rows) { var result = rows;
14:52 < Absolute0> });
14:52 < Absolute0> console.log("Hello World");
14:52 < Absolute0> especially in that case
14:53 < zipp> Absolute0: you can run things synchronously, but they don't have to block. @izs would be a good person to ask, I'm not too familiar with that level of Node :x
14:54 < Absolute0> zipp: both users will see "hello world" but the second user, or nth user, will have to wait quite a while to see the results of the database query
14:54 < Absolute0> if all those callbacks run on a separate single event loop
14:55 < zipp> Absolute0: sure, but that's blocking a single asynchronous function, not the entire process
14:56 < zipp> Absolute0: and only because that action has to be performed synchronously. but it can occur concurrently, and when it finishes, boom callback.
14:57 < zipp> I'm really good at understanding Node. I'm really bad at explaining Node. Someone who can explain it better? >:3
14:57 < Absolute0> say you have 100,000 concurrent users. For each user you query a million records. Assuming caching isn't implemented, the 100,000th user will see "Hello World" immediately, but will get the contents of the query after maybe 20 minutes.
14:58 < Absolute0> Does node do anything else to reconcile that?
14:58 < Absolute0> Creating multiple threads for the backgrounded callbacks would fix the issue.
14:59 < zomg> Yeah if the JavaScript execution takes most of your app's time then it might be tricky to optimize it
14:59 < mikecsh> Hi all. I'm trying to get started with Node + express and I'm having a problem getting express/connect to serve static files
14:59 < mikecsh> Can anyone spare a moment to look at this gist and give me any pointers? https://gist.github.com/anonymous/934ab790a266061049fa
15:00 < Absolute0> zomg: so node isn't ideal for resource intensive applications?
15:00 < mikecsh> My hello route works fine, but when trying to access the static files I get the error "Cannot get /"
15:00 < koalallama> Absolute0: you create a worker to do the intensive work, when it's done, a callback can write to the original socket
15:00 < Absolute0> got it
15:00 < zomg> Absolute0: it depends on which part of it is the resource intensive one I think :)
15:01 < koalallama> I'm still experimenting with it, but that's what appears to work for me now
15:01 < zomg> Absolute0: if you can delegate the processing that takes a long time to another process, then it will be perfectly fine
15:01 < Absolute0> and that's what a worker is for?
15:01 < koalallama> yup
15:01 < Absolute0> kewl
15:02 < zipp> Absolute0: Oh, I see what you're saying. In that case you chould probably stream the database response to the client so the client isn't just sitting around for a synchronous request to complete, and you're not taking up huge amounts of memory on the server buffering a response..
15:03 < Absolute0> zipp: that won't help since all the queries before the 100,000th user are running on the event loop.
15:03 < xanadu> anyone have any experience working with reverse proxies?
15:03 < Absolute0> So you still get blocking in a "non-blocking framework"
15:04 < zipp> Absolute0: sure, they're all running on the event loop, and they're all sending data from the database to the client. If there's a bottleneck there, it's the database and not Node.
15:04 < zipp> And then you have to figure out how to handle backpressure within Node.
15:05 < xanadu> mikecsh: i wonder if this would help - http://stackoverflow.com/questions/7069360/express-static-nodejs
15:06 < xanadu> mikecsh: i don't really know about the ssl part though
15:07 < mikecsh> xanadu: Thanks, I found that and was able to get it to work. The SSL part is quite important for me though
15:08 < mikecsh> xanadu: I'm a bit confused by different examples starting the server with different objects. I'll keep googling!
15:09 < xanadu> i need help with this: https://gist.github.com/ajwinn/5935094
15:09 < gigo19801> hi all, do you prefer to write the hole code in javascript notation or should i use coffeescript or any other notation ?
15:10 < mikecsh> xanadu: It does definitely seem to be related to the HTTPS though, it works fine if I just use http.createServer :/
15:11 < xanadu> gigo19801: are you asking about a specific project or just for the sake of learning, you're wondering what most people do?
15:11 < pachet> mikecsh you probably need to redirect http traffic to https
15:12 < pachet> gigo19801: what is javascript notation :[
15:12 < pachet> you mean write it in javascript?
15:12 < mikecsh> pachet: Even if I'm accessing the https://localhost URL?
15:12 < gigo19801> yes i am mean js
15:12 < gigo19801> i am writing an rest api with express
15:13 < pachet> mikecsh: in that case no
15:13 < pachet> mikecsh: where do you serve the file for /
15:13 < pachet> or where do you define that route
15:13 < pachet> if that's even what you're requesting :[
15:14 < mikecsh> pachet: I thought that 'app.use(express.static(webclientPath));' defaulted to /
15:14 < mikecsh> pachet: But if I'm not using HTTPS, I can access http://localhost:3001/index.html
15:14 < mikecsh> pachet: changing to https server and in the URL results in:
15:14 < mikecsh> Error: Connection closed
15:15 < mikecsh>     at SendStream.pipe (/Users/mikecsh/Code/ALTAS/NodeTAS/node_modules/express/node_modules/send/lib/send.js:322:26)
15:15 < mikecsh>     at Object.oncomplete (fs.js:297:15)
15:16 < pachet> mikecsh: and what's the error if you request /index.html over https?
15:16 < mikecsh> pachet: that is the error over https, using http the file is served correctly
15:23 < pachet> mikecsh: try adding `requestCert : true` to your https options object
15:24 < mikecsh> pachet: No difference :(
15:25 < pachet> mikecsh what version of node are you running?
15:26 < mikecsh> pachet: v0.8.17
15:28 < rfish> What is a good IDE for node.js?
15:29 < mikecsh> Seems as though in send.js SendStream.pipe the socket handle has been lost
15:29 < paulkon> rfish: use sublime text or brackets
15:29 < mikecsh> No idea why this would be - guess I'll stick with HTTP for the time being
15:29 < mikecsh> pachet: Thanks very much for your help
15:29 < rfish> paulkon: sublime text doesn't have debugging
15:30 < rfish> paulkon: I'm looking for an IDE not an text editor
15:30 < tboyt> hey npm wizards: is there a way to create a postinstall script that only runs if dev dependencies are installed?
15:30 < sinclair|net_> rfish: visual studio or web matrix are pretty good
15:30 < tboyt> i.e. if "npm install ." is used and not just "npm install package-name"
15:31 < rfish> sinclair|net_: There is no debugging for node in visual studio?
15:31 < sinclair|net_> well, there is node-inspector i suppose
15:31 < rfish> being able to watch variables and put break points is important to me
15:31 < happyfac1> Anyone use node-mysql? I'm trying to bulk insert a nested array but ? is only outputting the first item in the list, unlike the docs say.
15:31 < rfish> sinclair|net_: Then I have to constantly switch between text editor and IDE which is very ennoying
15:32 < pachet> mikecsh yeah sorry, i havent hit this particular error before
15:32 < pachet> mikecsh also i highly recommend upgrading
15:32 < pachet> at least to 0.8.20
15:32 < mikecsh> pachet: No problem, appreciate you taking a look
15:32 < mikecsh> OK, will upgrade now
15:32 < sinclair|net_> rfish: well, welcome to node
15:32 < pachet> there was a fix in .20 that addressed these sorts of http hangup issues
15:32 < paulkon> use visionmedia/debug statements
15:32 < paulkon> or node-inspector
15:33 < paulkon> other than that you can use the debugger in the browser
15:33 < paulkon> directly
15:33 < sinclair|net_> paulkon: someone really needs to make a node editor in the browser
15:33 < sinclair|net_> npm install node-editor
15:34 < sinclair|net_> which comes packages with node-inspector, and a assortment of other useful goodies
15:34 < paulkon> http://brackets.io/ looks cool
15:34 < paulkon> not sure how it would work with node though
15:34 < rfish> So why do people prefer node if debugging sucks in it.  Why not use Java or .net?
15:34 < paulkon> because the pros outweight the cons
15:35 < paulkon> of using it, maintaining it, performance
15:35 < matbee> Whoever has experience with PassportJS, does anyone know how to get the token from the response, so I can do some oauth requests?
15:35 < rfish> developer speed is the most important thing
15:35 < nsno> no, no it is not
15:35 < nsno> that's is completely nonsensical
15:35 < paulkon> node development is pretty speedy for me
15:35 < nsno> -'s*
15:35 < VoidAtValhalla> ... depends on preferences of project
15:36 < nsno> write tests, write code, fail tests, fix code, pass tests, repeat
15:36 < paulkon> I never understood how you can write tests before you know what the api will look like
15:37 < rfish> I unno, .Net MVC is pretty good at all that
15:37 < VoidAtValhalla> well you need input set and output set ...
15:37 < VoidAtValhalla> *know
15:37 < sinclair|net_> rfish: you a .net developer?
15:37 < nsno> you can't, but you know the ins and outs of a function surely
15:37 < rfish> sinclair|net_: Ya
15:37 < paulkon> I mean, I know writing tests after the program is not super optimal but it works for me
15:37 < paulkon> write the program, test it for what you want it to do, fix
15:38 < paulkon> seems to work with node
15:38 < paulkon> maybe if I'm super sure about how the code will work
15:38 < nsno> i do both in tandem myself. 
15:38 < paulkon> then i write the test beforehand
15:38 < paulkon> yeah
15:38 < VoidAtValhalla> usually you should make application model before coding ... but everyone hates it so nobody cares :D
15:38 < pachet> the best code i write is completely test driven
15:38 < pachet> the worst code i write is completely un-test driven
15:38 < nsno> hack away for a bit, see what i'm actually doing, write the tests, write the code.
15:38 < paulkon> yeah
15:39 < paulkon> I prefer that approach
15:39 < perlitch> anyone have tips for setting up a testing environment with a browserify project? specifically one that integrates a code coverage tool like blanket.js
15:39 < nsno> regardless of when you write the tests, as long as you're aware that code that isn't tested is broken then all is well :)
15:40 < paulkon> definitely
15:40 < paulkon> merging without tests is asking for issues
15:40 < VoidAtValhalla> ^
15:40 < VoidAtValhalla> amen
15:41 < mikecsh> pachet: thanks for the heads up - I installed node using homebrew on Mac with out of date formulas, had no idea it was so far behind!!!
15:45 < mikecsh> pachet: Annnnd that has fixed my https problem as well. Thanks very much and sorry for wasting your time because I didn't check the versions!
15:47 < pachet> mikecsh no sweat, glad its working :]
15:55 < neeky> could I encourage any frequent users of Mongoosejs to join #mongoosejs? it's quiet in there and I'm not able to give much help to people asking questions
15:56 < neeky> and most users leave disappointed when no one is there to help work through something
16:04 < b3tamax> neeky: Sure thing. Good idea.
16:05 < gigo19801> i have an error in my coffeescript (nodejs) app...
16:05 < gigo19801> i get ReferenceError: Terminal is not defined
16:05 < gigo19801> where should i include the file that holds ther terminal object
16:05 < gigo19801> in the main app ?
16:05 < neeky> gigo19801, hastebin some code
16:06 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:06 < neeky> is Terminal an object you have created?
16:06 < gigo19801> http://hastebin.com/xiliqosise.coffee
16:07 < gigo19801> http://hastebin.com/telomosowi.sm  <— that is my terminal object
16:07 < neeky> I'm not a coffeescripter, but Terminal isnt an object in that file
16:08 < b3tamax> gigo19801: Debug the require statement on the terminal file to see if it's being resolved correctly.
16:08 < neeky> so, in coffeescript, you dont assign the file you are requiring to a local variable?
16:09 < neeky> as in "term = require '../model/terminal'" ?
16:09 < b3tamax> neeky: that makes more sense to me, right? I'm no CoffeeScripter either.
16:10 < gigo19801> so i have each time to asign that again ?
16:10  * neeky knows why he doesnt use coffeeescript if that's true
16:10 < neeky> I would think so
16:10 < neeky> you have to assign the module to something scoped in the current context
16:11 < b3tamax> gigo19801: This might be a question for the coffeescript IRC
16:12 < gigo19801> as there an alternative to coffeescript ? or is this the way if you do not whant to write everything in javascript ?
16:12 < neeky> i dont think coffeescript does any object analysis to try to resolve 'Terminal'
16:13 < neeky> don;t use node?
16:13 < neeky> Node is a javascript based framework
16:13 < b3tamax> gigo19801: Why don't you just write JavaScript?
16:13 < neeky> I guess you could use twisted and python
16:14 < b3tamax> var Terminal = require( '../models/Terminal' )
16:14 < neeky> from a philosophical POV, people choose Node.js TO write javascript
16:14 < gigo19801> http://hastebin.com/gabojobeqi.js  <— that is the compiled code of my model object
16:15 < neeky> at least that's why I'm here
16:15 < neeky> whats the compiled code of the calling object?
16:16 < gigo19801> i send it … in my last post
16:16 < neeky> That looks liek the Terminal module, where is the module that requires terminal?
16:16 < gildean> gigo19801: you're not exporting anything out of the terminal module
16:17 < neeky> the one exporting all the methods
16:17 < gigo19801> http://hastebin.com/xinipiburo.coffee
16:17 < gildean> gigo19801: and in your main file you're not assigning the required module to any variable
16:17 < gildean> gigo19801: in the main file you need: terminal = require('../models/terminal')
16:18 < gildean> and in the terminal module you need: module.exports = Terminal
16:18 < neeky> ^^^
16:18 < gildean> at the bottom
16:19 < gigo19801> ok this works, fine
16:19 < gigo19801> thx gildean
16:20 < gildean> np
16:26 < astropriate> i am trying to define templates and Jade is trying to run the template instead of just defining it.  And  then it complains about accessing properties from an undefined
16:26 < astropriate> any ideas?
16:26 < astropriate> this happened after a jade upgrade
16:32 < jergason> why does npm install --save throw up if your package.json doesn't have a dependencies object? seems like it should be smart and create one
16:36 < oren> anyone got an example of express.js + domains? i loved the domains session at nodeconf but lost my notes.
16:37 < sinclair|net_> hey, is it possible somehow to create a breakpoint in nodejs?
16:38 < oren> sinclair|net_: 'debug node server.js'
16:38 < sinclair|net_> oren: what does that do?
16:38 < oren> and u can add 'debugger' anywhere in the code
16:38 < sinclair|net_> is that it?
16:38 < oren> sinclair|net_: as far as i remember, yes
16:39 < mkozjak> are there any tcp server examples using streams2 interface?
16:39 < sinclair|net_> oren: alright, thanks mate
16:40 < oren> np
16:40 < mkozjak> http://pastebin.com/raw.php?i=dnRTbrrB getting Error: not implemented
16:40 < awaterma> Hiya Oren!
16:41 < mkozjak> seems like 'socket.on('readable' cannot be used this way
16:42 < awaterma> @Oren, did you see this: https://github.com/mikeal/nodeconf2013
16:42 < awaterma> I think domains is in there.
16:42 < oren> sinclair|net_: http://nodejs.org/api/debugger.html
16:43 < oren> awaterma: i did. let me see if there is a code sample
16:43 < sinclair|net_> oren: nice one
16:43 < awaterma> oren: yea, nice one on the debugger link there.
16:48 < oren> awaterma: i see domains folder, but it's the slides. i remember they gave us a usb with some sample express app
16:48 < awaterma> Yeah it's in the nodeConf package
16:48 < Guest29307> anyone know how http data in an app.post can be passed on to a socket session?
16:49 < oren> awaterma: oh. let me see
16:49 < awaterma> Let me check my laptop
16:50 < Guest29307> I want node.js to verify data thats been posted before opening a socket
16:51 < Guest29307> but if valid take that data and allow the individual socket to access the data
16:51 < Guest29307> can anyone help with this?
16:51 < awaterma> oren: npm install nodeconf2013
16:52 < oren> awaterma: https://npmjs.org/package/nodeconf2013   in what package it should live?
16:52 < oren> maybe it's just express.js example folder?
16:52 < awaterma> oren: then the "nodeconf2013" module, the folder, "domains"
16:52 < oren> ok
16:52 < neeky> Guest29307, well, any data POSTed to noide is in the request object
16:53 < awaterma> in he domains folder is the crasy-server example we did together, along with the express-middleware stuff.
16:53 < neeky> and you can use a module like bodyParser in Connect or req.body in Expressjs to get it
16:53 < awaterma> I think that and the slides will let you continue.
16:53 < Guest29307> ok, so how can that be linked the the individual socket connection
16:53 < awaterma> oren: have you ever used the elasticsearch npm module?
16:53 < oren> awaterma: sweet. thanks! 
16:53 < oren> awaterma: no
16:53 < neeky> I don't know about socket.io I just know about posted data :(
16:54 < awaterma> oren: cool. no worries. see ya around. :)
16:54 < Guest29307> here is the most basic example. Express loads a form that has the user enter the username. Then if the username is x, y, or z then open a socket and send welcome x, y, or z
16:55 < Guest29307> Im coming from tornado where I could open as socket only if the post data was valid or match some sort of filter. In node I ended putting that in the app.post and started socket server left and right. So I had to start the socket server on load but later when I get data from a post the socket code has already been loaded and I dont know how to interact with it.
16:55 < oren> awaterma: i'll put i nice video of nodeconf soon. i'll let u know
16:56 < awaterma> Oh cool. :)
16:57 < Guest29307> Is there a way a way for a socket to access the request data of its page load?
16:59 < gigo19801> does anyone use node_redis to store javascript objects ?
16:59 < gigo19801> what about serialization, on redis i get only "[object Object]"
17:01 < wankdanker> gigo19801: as far as I am aware, you have to JSON.stringify(obj) before you store stuff in redis
17:02 < wankdanker> gigo19801: or you could try https://github.com/wankdanker/node-redis-jsonify which will do it for you automatically.
17:06 < Danielss89> anyone using Primus?
17:06 < Danielss89> getting a "TypeError: object is not a function"
17:06 < Danielss89> on "var primus = new Primus(server, { parser: 'JSON' });"
17:07 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:23 < oren> awaterma: when using domains, does it mean i don't have to do if(err) {cb(err)} in so many places in my code?
17:24 < mikeal> no, it does not :)
17:25 < oren> mikeal: but for try/catch it does, right?
17:25 < mikeal> you should still use try/catch where it makes sense
17:26 < mikeal> domains solve a different problem
17:26 < mikeal> like, when you access a property that doesn't exist and cause an exception
17:26 < mikeal> and you're in a callback somewhere, you can figure out which HTTP response gets a 500
17:27 < oren> so for stuff i can't really predict?
17:28 < oren> i thught that it's also for code like JSON.parse .    since i don't need to wrap it with try/catch my code is easier to read and perform better... i guess this is not really the case.
17:28 < mikeal> JSON.parse/stringify you should still try/catch
17:28 < vrlogrs> hi guys
17:29 < mikeal> the thing is, if a domain traps an error you probably want to schedule the process to be cycled
17:29 < oren> mikeal: oh. 
17:29 < mikeal> because there's all kinds of unknown state problems
17:29 < oren> mikeal: cycled = restart, right?
17:29 < mikeal> json.parse/stringify you can trap and continue from pretty cleanly
17:29 < mikeal> oren: yup
17:29 < vrlogrs> could soemone direct me to a nice explanation of why pools are necessary and how to implement them properly .. im struggling to find a guide i can understand :(
17:29 < vrlogrs> in mysql
17:30 < oren> mikeal: i heard that try/catch are hard to optimize by the v8 so it's better to let domains handle it (:
17:30 < oren> so many rumors around the 'magic' of domains
17:30 < mikeal> whatever is *in* the try/catch opts out of optimization
17:30 < neeky> vrlogrs, you may be in the wrong group, but connection pools let you service multiple requests with fewer conenction requests
17:30 < mikeal> which JSON.stringify/parse you don't worry about
17:31 < mikeal> because those are builtin functions and already optimized
17:31 < topherbullock> Yah V8 just deopts the stuff inside.
17:31 < vrlogrs> neeky: i mean for node.js module mysql
17:31 < vrlogrs> i keep getting a connection lost error with mysql protocol
17:31 < vrlogrs> and it seems pools are the solution to that
17:31 < neeky> vrlogrs, its the same thing
17:32 < vrlogrs> so, ask in #mysql instead?
17:32 < neeky> a pool keeps a number of connections open, and requests share this pool
17:32 < oren> mikeal: so the main goal of domains is: centralize the error handling of UNEXPECTED ERRORS only. i still need try/catch and i still need if(err){foo}
17:33 < mikeal> correct
17:33 < neeky> the driver just uses the mysql native pool feature
17:33 < vrlogrs> hmm
17:33 < mikeal> it allows you to scope and contextualize unexpected errors that travel between cycles of the event loop
17:33 < vrlogrs> but, theoretically, when would there be an issue if you're not using the pool
17:34 < neeky> I'm not positive a pool solves a connection error
17:34 < neeky> is the DB on the same machine as the app?
17:34 < vrlogrs> yep
17:34 < vrlogrs> it's always worked without issues .. only after i started spawning node.js apps that this issue seems to have risen
17:35 < neeky> how many apps are you spawning?
17:35 < vrlogrs> 7
17:35 < neeky> one per client request?
17:36 < vrlogrs> i have 7 game servers, that are monitored by the main app
17:36 < neeky> does it haeepn to break at the 5th process every time?
17:36 < vrlogrs> no, not really
17:36 < vrlogrs> it seems to happen after a long period of time
17:36 < neeky> a pool MAY help then
17:36 < vrlogrs> several hours later, one-two of them fail
17:37 < topherbullock> child_process.spawn ??
17:37 < neeky> pools are just liek a carpool
17:37 < vrlogrs> yes
17:37 < oren> mikeal: i can't install nodeconf2013. i only need it for the domains folder. is there a way to browse the nodeconf2013 on github? i only know of this webpage - https://npmjs.org/package/nodeconf2013
17:37 < neeky> you 'loan' out a connection thread to service a request
17:37 < neeky> when the request is up, you give the conenction back to the pool
17:37 < mikeal> github.com/mikeal/nodeconf2013
17:37 < vrlogrs> but, these 7 apps are different, how are they going to share the pool?
17:38 < vrlogrs> 7 processes right
17:38 < FrozenFire> I'm relatively new to writing code for node, but I have a fairly complicated and important suite of node code to maintain. I'm having an issue that I'd be interested to get some insight on, if anyone's willing.
17:38 < oren> mikeal: thanks!
17:38 < vrlogrs> and, this didnt happen before -- only after i started spawning them from one app, instead of individually from the terminal
17:38 < neeky> that may not help you - I thing accesses to the pool have to come from the same object
17:38 < mikeal> np
17:39 < vrlogrs> right, thats what i was thinking
17:39 < FrozenFire> The code I maintain handles much of the SMS traffic to/from the internet, and I'm having an issue with one of our SMPP carrier binds. They implement a sort of throttling which is a bit funky. What they do is instead of simply *not* accepting messages, they send responses to our delivery attempts saying we're being throttled.
17:40 < FrozenFire> This is rather problematic because our carrier binds are basically simple asynchronous push-pop workers on a redis queue
17:40 < neeky> vrlogrs, check your mysql.cnf to make sure you are not limiting connections
17:40 < FrozenFire> The obvious solution in a synchronous setting would be to re-up the message that we were trying to deliver into our own queue, then sleep.
17:40 < adammh> when I'm running "npm install" on packages that have C deps is there an easy way to limit the number of concurrent compiles?
17:40 < FrozenFire> But with multiple workers, and them working asynchronously, that might create a huge problem for throughput.
17:40 < vrlogrs> #max_connections        = 100
17:41 < neeky> vrlogrs, did you see this? https://github.com/felixge/node-mysql#server-disconnects
17:42 < vrlogrs> hmm
17:42 < kenperkins> mikeal were there any other commits in that release? 2.22?
17:43 < mikeal> kenperkins: yeah, there were some dep bumps
17:43 < kenperkins> minor stuff tho?
17:43 < vrlogrs> wouldnt something like this be built into the module? :S
17:43 < kenperkins> i should probably bump pkgcloud today
17:44 < othiym23> oren: if you want an alternative to if (err) {}, take a look at domain.intercept: http://nodejs.org/api/domain.html#domain_domain_intercept_callback
17:44 < kenperkins> hey oren :P
17:44 < oren> kenperkins: hi! great blog post
17:44 < kenperkins> ty!
17:45 < oren> kenperkins: working on a 5 minutes video
17:45 < kenperkins> realized after the fact that I didn't shower mikeal with all due props like I should have
17:45 < othiym23> one of the things that domenic and I worked out over the time we were talking about domains at NodeConf is that with a little bit of care / prior design, you should be able to write domain-based error-handling that completely eliminated the need for try/catch blocks
17:45 < kenperkins> blog fail
17:45 < oren> kenperkins: and will update u
17:45 < GaveUp> so I'm trying to install node in ~/local ... do a ./configure --prefix=~/local && make && make install ... everything runs without an error but the node binary doesn't show up in ~/local/bin
17:45 < neeky> vrlogrs, I would guess that the drive is a 1:1 copy of the native mysql driver
17:46 < vrlogrs> interesting .. so, i would have to use pools right?
17:46 < oren> othiym23: that would be awesome. no more try/catch
17:46 < vrlogrs> but, i would have 7 pools, 1 for each app
17:46 < vrlogrs> i dont see the point
17:46 < othiym23> oren: the design part is based on setting things up so all your user code is being evaluated within the context of a domain, either implicitly through run() or explicitly via binding (which is what intercept) is doing under the hood
17:47 < neeky> does each app normally have multiple requests happining?
17:47 < vrlogrs> nope
17:47 < vrlogrs> well, i guess they could
17:47 < vrlogrs> but rarely
17:47 < neeky> if so, a small pool per process would work fine
17:48 < vrlogrs> but wouldnt they still interfere with one another -- the apps?
17:48 < vrlogrs> wouldnt i still have the same disconnect issue either way?
17:48 < neeky> but a single connection per app is also probably sufficient - the main purpose of pools is to keep memory overhead low I think
17:49 < vrlogrs> so, i can solve the disconnect issue without pools? :S
17:49 < gordonwritescode> othiym23: thanks for the tip (domain.intercept) !
17:49 < neeky> vrlogrs, the ultimate goal would be to figure out where the disconnect error is happening
17:50 < vrlogrs> hmm, not sure how i can do that ..
17:50 < vrlogrs> it seems so random
17:51 < othiym23> gordonwritescode: np, it's easy to overlook in the docs
17:54 < neeky> then a pool would help, so when you DID get a disconnect, there is another pooled connection that can take over to retry whatever query you were performing
17:55 < vrlogrs> hmm .. ok, ill give it a try
17:55 < vrlogrs> thanks neeky
17:55 < neeky> no prob
17:56 < neeky> maybe 3 connections per pool?
17:57 < oren> othiym23: is that the correct code for the first middleware my express should use? http://pastebin.com/DLNQ6LiJ
17:57 < vrlogrs> neeky: i think i'll try the server disconnect callback function first..
17:57 < vrlogrs> see if i get some error codes that make sense
17:57 < vrlogrs> and then try pools after
17:58 < othiym23> oren: d.run will already run the rest of the middleware chain, so "return next()" will end up running the middleware chain again, this time outside the domain
17:59 < eddiemonge> if i have a pacakged installed as -g, and have that packaged listed as a peer dependency in a package.json, why wouldnt npm install see the global version?
18:00 < oren> othiym23: got it. thanks
18:01 < oren> awaterma: i lost the code we were working on. so i try to recreate the middleware for domains ):
18:01 < oren> awaterma: http://pastebin.com/ucybiKcQ
18:01 < othiym23> eddiemonge: "npm -g install" is pretty much exclusively so you can access binaries provided by modules, not to share modules across applications
18:01 < awaterma> oren: I have the code on my laptop. 
18:02 < awaterma> oren: I can share it with you as a gist. It's really pretty simple. :)
18:02 < oren> awaterma: please do. gist/email/dropbox
18:02 < othiym23> tjfontaine: that discussion of setImmediate vs nextTick is giving me weird flashbacks to classic MacOS programming and remembering to yield the event loop
18:02 < neeky> vrlogrs, i see that that driver is listed as alpha, so you might capture as much as you know about the error and open an issue on the github project
18:03 < oren> had to switch laptops so lost my nodeconf experiments (:
18:03 < vrlogrs> will do, thanks
18:03 <@tjfontaine> othiym23: oh man, do we need to contact someone for your PTSD?
18:04 < eddiemonge> othiym23: oh. well that sucks.
18:06 < othiym23> eddiemonge: not really! modules are small :D -- if space is a consideration, read up on npm link
18:06 < othiym23> tjfontaine: nah, it's just funny how much of Node's design is actually super old
18:07 < awaterma> Oren: here's the crashy-server exercise: https://gist.github.com/awaterma/5936191
18:07 < eddiemonge> i use npm link but it doesnt do it by default. id rather have it link to existing global installs instead of installing a local version
18:07 <@tjfontaine> othiym23: battle tested :)
18:07 < awaterma> oren: And the domainifier (for express domains level 1 exercise): https://gist.github.com/awaterma/5936204
18:08 <@tjfontaine> othiym23: what are your thoughts, should we purge the immediate queue each tick, or should it continue to work as it does now?
18:08 < othiym23> I think we should swap the names of nextTick and setImmediate
18:09 < othiym23> they both provide valuable functionality -- nextTick to ensure that functions are always async without paying the perf penalty, setImmediate to ensure that the event loop doesn't get starved, especially with tnorris's recent changes
18:09 < othiym23> tjfontaine: ^^
18:10 <@tjfontaine> othiym23: ya, but there may be a middle ground that is sufficient, if you haven't read the documentation it can be surprising that if you queue 10 cbs in setImmediate it takes 10 ticks for all to be satisfied
18:11 <@tjfontaine> nextTick is what pretty much everyone is always going to use though, because it's been around for so long
18:12 < othiym23> tjfontaine: OTOH, that may be *exactly* what I would have expected ;)
18:12 <@tjfontaine> :)
18:13 <@tjfontaine> this purge-on-tick could be monkey-patched in by someone if they needed that functionality
18:13 < othiym23> I dunno, I think mostly what the docs need is a clear explanation of the differences between process.nextTick / setImmediate / setTimeout(fn, 0) in terms of use cases and operational semantics
18:14 <@tjfontaine> that pretty much describes our docs as a whole :)
18:14 < othiym23> also nextTick should probably be on global and not process, if only so the documentation could be centralized
18:14 <@tjfontaine> nod
18:15 < oren> awaterma: perfect!
18:15 < awaterma> oren: enjoy!
18:16 < oren> awaterma: is that all we neeed for express? maybe the missing part is to deal with pooling.
18:16 < awaterma> oren: we only did the first exercise for express. There were 2 more to do.
18:16 < oren> oh
18:17 < othiym23> awaterma / oren: pow-server is WAY more brutal than the express example, if you want to learn a bunch more ;)
18:18 < othiym23> I only know of one non-counselor who got it mostly working at NodeConf
18:18 < awaterma> othiym23 / oren : Forrest said there was a much more gnarly example in there ...
18:18 < awaterma> othiym23: is the pow-server example in the npm bundle?
18:18 < othiym23> awaterma: yeah (also othiym23 = Forrest)
18:18 < awaterma> LOL
18:19 < awaterma> Thanks Forrest! :) 
18:19 < oren> (:
18:19 < othiym23> yr welcome!
18:19 < oren> you got the horse mouth right here
18:19 < awaterma> Exacto.
18:19 < liam> I have a game in development for Node.JS we have just done a test with many users, and a common problem is node seems to keep a few people off like 20 seconds after they join. This seems to be specific on my laptop and the same problem occurs on my own laptop. Any suggestions?
18:19 < oren> "I only know of one non-counselor who got it mostly working" - sounds easy peasy (:
18:20 < liam> specific to laptops ****
18:20 < liam> or any suggestions how i can debug this
18:20 < awaterma> othiym23: So just in the "pow-server" folder? README.md explains all?
18:21 < othiym23> awaterma: yeah, also be sure to read all the code comments, as there are lots of hints / further katas in there
18:22 < gildean> liam: insufficient data for meaningful answer
18:22 < oren> othiym23: the problem is i have an express server. the pow is vanilla.js
18:22 < awaterma> othiym23: Thanks! It's on my homework list for the weekend. :) Nearly made it through all the stream work as well; once I discovered substack's posting on streams on github, things are much clearer. 
18:24 < othiym23> oren: yeah, that's true, if all you care about is Express, stick with express-middleware until you have that nailed down
18:24 < liam> can you think of any reasons why node will disconnect though?
18:24 < liam> thats seems to be whats happening
18:25 < oren> othiym23: i don't like it, but that's what i have to work with (: i'll read the non-express for my own projects. thanks a lot.
18:25 < liquid-silence> hi all I am doing some node development with coffee script, is there a way that the coffee command can be added to my path, if installed as a node module
18:25 < liquid-silence> at the moment I have to do node_modules/coffee-script/bin/coffee app.coffee
18:25 < NickTomlin> liquid-silence: the coffee script compiler should be available as "coffee" on your path
18:26 < liquid-silence> NickTomlin I did not install it via homebrew
18:26 < liquid-silence> its a node module that is added to package.json
18:27 < othiym23> liquid-silence: 1. PATH=`pwd`/node_modules/coffee-script/bin:$PATH
18:27 < othiym23> liquid-silence: 2. npm -g install coffee-script
18:27 < NickTomlin> liquid-silence: or install it globally
18:27 < othiym23> liquid-silence: 3. read up on npm scripts and add a script to do what you want to package.json
18:27 < liquid-silence> what if I require multiple versions of coffeescript?
18:28 < NickTomlin> liquid-silence: then modify our path ala othiym23
18:28 < othiym23> liquid-silence: then you're going to want to read the sectio on scripts in https://npmjs.org/doc/json.html
18:28 < liam> is there anyway to log the reason for a disconnection?
18:29 < liam> with socket.io
18:30 < bluesm> What should I choose to change my php to node ?
18:31 < bluesm> I mean what package handles template systems
18:31 < liquid-silence> othiym23 is it common though?
18:31 < liquid-silence> to not have coffee script installed globally 
18:31 < gildean> bluesm: depends on the templating language
18:32 <@tjfontaine> othiym23: thanks for your comment on that, I appreciate it
18:35 <@tjfontaine> othiym23: actually, can you cross post that to the issue? 5798
18:36 < awaterma> bluesm: I just started reading up on jade: http://jade-lang.com/tutorial/
18:38 < Stephen> rwtsr
18:41 < EaterOfCorpses> Tyrantelf, thanks for the help yesterday ^^ node runs perfectly fine now :D
18:42 < matbee> bluesm, I prefer EJS, myself.
18:43 < vrlogrs> wow .. 
18:43 < vrlogrs> i may have found the problem to why my servers are crashing .. 
18:44 < vrlogrs> everytime, there seems to be someone coming online and then it crashes :S
18:44 < vrlogrs> could he/she be deliberately crashing it somehow?
18:45 < vrlogrs> mainly something to do with socket.io
18:45 < vrlogrs> maybe he's killing it somehow
18:47 < othiym23> tjfontaine: will do
18:47 <@tjfontaine> thanks
18:47 < vrlogrs> same guy connected to chess and go .. and both servers crashed, while the other 5 stayed alive
18:47 < vrlogrs> he must be doing something
18:47 < EaterOfCorpses> block his ip vrlogrs 
18:47 < vrlogrs> anyone have any ideas what he could be doing?
18:48 < vrlogrs> i would rather fix the issue EaterOfCorpses
18:48 < EaterOfCorpses> sending wrong packages?
18:48 < vrlogrs> is there no way to handle that?
18:48 < EaterOfCorpses> does your protocol support packages that you didn't create yourself?
18:49 < EaterOfCorpses> I mean if I send a random string via that websocket to your server, does it crash then?
18:49 < vrlogrs> it shouldn't .. do you have a minute to help me test? http://www.funnode.com/games/checkers
18:49 < defaultro> if let say folks a hardware device is able to connect to our REST api but we would also want to connect to the device via it's protocol(after configuration), how would I use nodejs to connect to it? Is there a web sockets library?
18:50 < vrlogrs> its really annoying ..
18:50 < mrvisser> defaultro: there is a raw sockets library, if the device's protocol isn't http
18:50 < vrlogrs> he's been doing this for at least the past week
18:50 < defaultro> cool mrvisser 
18:51 < defaultro> is it something i need to install?
18:51 < mrvisser> !google nodejs sockets
18:51 < defaultro> i have npm tool
18:51 < mrvisser> aww, no google bot :(
18:51 < defaultro> :(
18:51 < mrvisser> http://nodejs.org/api/net.html
18:51 < mrvisser> it's a core module, so you already have it
18:51 < defaultro> k
18:52 < EaterOfCorpses> looks nice vrlogrs 
18:52 < vrlogrs> thanks .. but obviously theres an issue :(
18:52 < vrlogrs> he comes in everyday and crashes it
18:52 < vrlogrs> somehow 
18:52 < EaterOfCorpses> yeah btw
18:52 < vrlogrs> need to figure it out
18:52 < EaterOfCorpses> use forever
18:52 < defaultro> wanted to make sure what i think about nodejs. It's server side. 
18:53 < mrvisser> indeed it is
18:53 < vrlogrs> EaterOfCorpses: im actually using a monitoring script i use
18:53 < vrlogrs> i coded*
18:53 < EaterOfCorpses> Awesome
18:53 < vrlogrs> problem is, i cant have it crashing when people are playing
18:53 < vrlogrs> i need to fix whatever the issue is
18:53 < vrlogrs> would you know how to go about crashing the node.js server?
18:54 < vrlogrs> if i knew how, maybe i can prevent it
18:56 < Tyrantelf> Hey EaterOfCorpses!
18:57 < Tyrantelf> your welcome :P
18:57 < EaterOfCorpses> :)
18:57 < vrlogrs> any ideas guys? will appreciate it
18:57 < EaterOfCorpses> Im looking at it vrlogrs D:
18:57 < vrlogrs> thank
18:57 < vrlogrs> s*
19:00 < Tyrantelf> vrlogrs: theres no error when it crashes/
19:00 < vrlogrs> no :(
19:01 <@isaacbw> do you know who's beautiful?
19:01 <@isaacbw> you are
19:01 < b3tamax> .
19:01 < vrlogrs> this guy came onto chess and go at the same time (10:17) and both servers became offline
19:01 < vrlogrs> must be something to do with socket.io right?
19:02 < vrlogrs> but there's no socket.io('error' .. 
19:02 < vrlogrs> socket.on('error' *
19:03 < EaterOfCorpses> do you have his IP?
19:03 < EaterOfCorpses> maybe you can log his behaviour?
19:03 < vrlogrs> ill check
19:04 < defaultro> so can nodejs do this? Nodejs listens and serves http traffic(like a normal web server) but will also connect to another server(raw traffic) if it's required
19:04 < EaterOfCorpses> yeah
19:04 < defaultro> cool
19:06 < defaultro> can someone please show me a sample code that listens on port 80 and displays hello world but also connects to another nodejs server running on 7777 which will respond with OK string. This OK string is sent back along with hello world string to the browser. The browser should not know about 7777 tcp server 
19:06 < dshaw_> #nodeup starting now!
19:07 < EaterOfCorpses> dshaw_, what? ;o
19:08 < othiym23> nodeup nodeup nodeup
19:08 < awaterma> All right!
19:08 < vrlogrs> i think its 86.88.25.197
19:08 < awaterma> othiym23: Forrest is live!
19:08 < zipp> booyah nodeup happening :D
19:09 < zipp> Dude, nodeconf rocked. I gave a random talk there after hackday. Definitely wasn't expected, but was lots of fun.
19:10 < EaterOfCorpses> vrlogrs, try to log everything he does from now on and look what he does?
19:11 < Tyrantelf> vrlogrs: why not just ban him from accessing the site?
19:11 < Tyrantelf> I mean, I get you want to find the problem
19:12 < Tyrantelf> but if it's just him, and he's doing it constantly..
19:13 < oren> awaterma: kenperkins nodeup about nodeconf
19:13 < jdelgado> How do you update a package on NPM?
19:13 < kenperkins> ? 
19:13 < oren> eran hammer from walmart talks about hapi/express session
19:13 < oren> #nodeup
19:13 < kenperkins> #nodeup
19:13 < oren> (:
19:14 < awaterma> oren: yep, I'm listenin. :)
19:14 < defaultro> with nodejs, will I still be able to display normal html forms?
19:14 < Beg> yes
19:14 < kenperkins> nodejs is just a framework :) 
19:14 < defaultro> ok. Once i see an example, it will help me better understand how it works
19:16 < Beg> defaultro-> are you familiar with apache?
19:16 < Beg> and php?
19:16 < defaultro> yes
19:16 < Beg> well, nodejs is on the same layer as apache and php is
19:16 < defaultro> ok
19:16 < Beg> html is on the client
19:17 -!- mode/#Node.js [+b *!*neeky@*.mob.bellsouth.net] by isaacs
19:17 -!- neeky was kicked from #Node.js by isaacs [neeky]
19:17 < Beg> http://www.petri.co.il/images/osi_model.JPG
19:17 < Beg> lol
19:17 < defaultro> i was thinking that with nodejs, I'll get rid of apache since nodejs will be handling it
19:17 < Beg> fake neeky?
19:17 < Beg> yes you will get rid of apache
19:17 -!- mode/#Node.js [-o isaacbw] by ChanServ
19:18 < defaultro> ok, so whatever html files, all nodejs has to do is send it to browser, it doesn't need to parse it
19:18 < darkpassenger> curl get me empty response, even though my server res.send data
19:18 < darkpassenger> what would be good troubleshooting steps
19:19 < defaultro> i'm following this now, http://stackoverflow.com/questions/6084360/node-js-as-a-simple-web-server
19:19 < darkpassenger> since i dont know */*t
19:19 < Beg> defaultro-> node.js can do alot of things, and one of the many features node.js offers is a simple web server.
19:20 < defaultro> ok, I got it working. I needed to specify the filename to display the webpage in my firefox
19:20 < Beg> You can use javascript to alter the results that is sent to the client.
19:20 < defaultro> ok
19:21 < defaultro> now, I can just continue developing html files the way I've been doing it
19:21 < Beg> if you work with static html files sure
19:21 < defaultro> write forms the way I wrote them
19:21 < defaultro> cool
19:21 < defaultro> then if I want interactivity, then that's when I introduce javascript code
19:22 < defaultro> how do I attack this? I want my form when I submit, it will connect to another tcp instance created by nodejs
19:22 < defaultro> the other nodejs instance will return "Here is your data"
19:22 < Beg> sec
19:22 < defaultro> thanks
19:23 < Beg> which example are you running?
19:23 < defaultro> the second one
19:23 < defaultro> the answer in number 6 from http://stackoverflow.com/questions/6084360/node-js-as-a-simple-web-server
19:24 < defaultro> now I need to make a simple form on my index.html which will contain a code that will connect to another nodejs on port 7777
19:24 < defaultro> maybe via ajax?
19:24 < Beg> no no
19:25 < defaultro> oh
19:25 < Beg> no, i'll help you :)
19:25 < Beg> sec
19:25 < defaultro> :)
19:25 < defaultro> btw, as much as possible, only the nodejs server will connect to the other nodejs tcp daemon, not the browser
19:26 < Beg> are you using express?
19:26 < defaultro> client ----> 8080 nodejs web server ----> 7777 nodejs socket server
19:26 < defaultro> express?
19:26 < defaultro> what is express?
19:27 < Beg> http://pastebin.com/StDzFQuu is this the exampel you use?
19:27 < defaultro> looking
19:27 < defaultro> i haven't' tried that. I'm very new to nodejs
19:27 < defaultro> I can try that code
19:28 < defaultro> i'm getting an error
19:28 < Beg> yeah you don't have express
19:28 < Beg> you need to do npm install express
19:28 < defaultro> ok
19:28 < defaultro> i tried but failed too
19:28 < Beg> are you running in windows?
19:28 < Beg> then you need to install npm i think
19:29 < defaultro> Error: Cannot find module '/Library/WebServer/Documents/install'
19:29 < Beg> not node instal
19:29 < defaultro> i have nom since I was able to install connect
19:29 < defaultro> oh, lol
19:29 < defaultro> thanks :D
19:29 < Beg> npm install
19:29 < defaultro> it's installed now :D
19:29 < Beg> defaultro-> You seem to be lacking knowledge about how the infrastructure of web applications work, no offense, but there is a few things you should know. 
19:29 < defaultro> express is running now
19:30 < Beg> You can try your approach and learn how to use javascript and nodejs, but you will just reinvent the wheel going that route, if you want to be productive you should look into solutions like handlebars.
19:30 < defaultro> browser received Hello!! :)
19:30 < Beg> Alright
19:30 < Beg> if you look at that code
19:30 < defaultro> ok
19:31 < defaultro> opening the file again
19:31 < Beg> app.get("/", function(request, response){ //root dir <-
19:31 < defaultro> i see it
19:31 < Beg> the "/" is the "file" you open.
19:31 < vrlogrs> Tyrantelf: i'd rather prevent the issue by fixing it than cure it by blacklisting the guy :)
19:32 < defaultro> k
19:32 < Beg> then you have a callback function with two arguments, request and response.
19:32 < defaultro> k
19:32 < Jester831> Hi guys, I'm having some troubles with Socket.IO in non-browser environments, specifically IOS. I realize that Socket.IO uses http to create the session. Is there a non http work around?
19:32 < Tyrantelf> vrlogrs: I see your point, but if it's not throwing even the slighest exception, then finding what the problem is is going to be interesting
19:33 < Beg> The request argument is all information about the client and also what the client requested of you, here you will find your >post< information, headers etc.
19:33 < vrlogrs> yeah, its definitely going to be hard
19:33 < Beg> Note, to access the post information, you need to change the app.get to app.post
19:33 < vrlogrs> i just dont understand how it doesnt throw an error
19:33 < vrlogrs> is that even possible? :S
19:33 < Beg> the response, is a argument to an object which handles the information returned to the client
19:34 < defaultro> got it
19:34 < Beg> you can see below, that it does response.send("hello")
19:35 < Beg> you can type whatever there, and that is how you would create dynamic content
19:36 < defaultro> pretty cool!!!
19:36 < defaultro> i sniffed the traffic to see what's really going on :D http://pastebin.com/4MfjEFff
19:37 < Beg> that's one way to do it :P
19:37 < othiym23> hi dtudury!
19:37 < defaultro> so all the require function need to be written on top?
19:38 < Jester831> Does socket.io actually need a session?
19:38 < Beg> they don't have to, but you would have to know javascript to determain if you need them and where you need them :)
19:38 < defaultro> k
19:38 < Beg> but yes, it is recommended to have them on top
19:38 < defaultro> cool
19:39 < Beg> javascript is very flexible and doesn't cause crashes as most other programming languages do
19:39 < defaultro> ok
19:39 < Beg> let me rephrase
19:39 < defaultro> can I use require('fs') to serve json files?
19:39 < M28> Beg: lol
19:40 < M28> the api causes crashes, not the language
19:40 < Beg> yes, I know hence I rephrase ^^
19:41 < Beg> What I ment was as m28 points out, mos tof the crashes is from the api. and ignore that line.
19:41 < Beg> defaultro-> static json files?
19:41 < Beg> there is a better option, letme find it for you
19:42 < defaultro> how would the code look like if I want my nodejs web server to connect to a nodejs socket server running on port 7777 when the uri is http://localhost/gettemp/
19:43 < Beg> You want nodejs to connect to a server on port 7777 to grab information to put out to your client requesting information of nodejs?
19:43 < defaultro> yes
19:43 < Beg> may i ask what is running on port 7777?
19:43 < defaultro> it's a nodejs server that will be eventually serving json responses
19:43 < Beg> you should just have one server to do both things
19:44 < defaultro> i'm trying to simulate our requirement
19:44 < Beg> you can use server.use('/media', express.static(__dirname + '/media')); <- to server static files
19:44 < defaultro> ok
19:44 < Beg> mind you, use app.use not server.use
19:45 < defaultro> don't know that one right now :)
19:45 < Beg> app.use('/media', express.static(__dirname + '/media'));
19:45 < defaultro> got it
19:46 < Beg> also in my example i linked to you before, you can add a folder named public
19:46 < defaultro> where can I find these commands so I can read it later during my train ride later?
19:46 < matbee> Any ideas why passportjs is throwing an error 500 for every request after authenticating?
19:46 < Beg> http://expressjs.com/api.html
19:46 < defaultro> thanks
19:46 < matbee> My only error is 500 [object Object] :'(
19:46 < Beg> http://nodejs.org/api/index.html
19:47 < defaultro> cool
19:47 < b3tamax> Backbone_Bootstrap v0.1.1 released to GitHub (http://ow.ly/mHrif) *and* NPM (http://ow.ly/mHrlx)!
19:47 < defaultro> so express is a plugin. Is that's how it's called in nodejs world?
19:47 < Beg> package
19:47 < defaultro> k
19:47 < Beg> or module
19:48 < defaultro> so above, /media is a directory?
19:48 < Beg> I believe so, i am not sure
19:48 < defaultro> k
19:49 < Beg> Basically most things you try to do will already exist.I am using Meteor, it's a complete solution.
19:49 < Beg> but i think it requires you to have some understanding of how node works
19:49 < defaultro> ok, first time hearing meteor :D
19:50 < defaultro> will start from basic for now
19:50 < Beg> meteor is a bunch of modules + some meteor modules, combined into a finished solution ^^
19:50 < upshoot> generic convention question.  I'm using the "#" prefix in my mocha tests when writing my unit tests:   it("#get_update should update the feed data") for the instance method, "get_update"... What's the convention for Class methods?
19:50 < Beg> defaultro-> I guess that's fine. 
19:50 < defaultro> yup
19:51 < Beg> defaultro-> you should try to keep everything on one node server
19:51 < defaultro> k
19:51 < defaultro> the reason why i wanted to include socket is because the device can understand clear text command. I still don't know yet
19:52 < Beg> which device, cellphone?
19:52 < defaultro> maybe, I can try my printer at home that is listening or running lpd daemon
19:52 < defaultro> or maybe CoAp protocol
19:52 < Beg> I have no experience with sockets in nodejs
19:53 < Beg> can't help you with that
19:53 < defaultro> it's ok
19:55 < owen1> i am adding a domains middleware - http://pastebin.com/bMu3tdXd   can someone explain what does    d.on("error", next);  do?
19:56 < owen1> i already have  d.on("error", function (error) { console.log("Found an unexpected error!", error); process.exit(); });
19:56 < owen1> so why do i have two places to handle error event?
20:04 < niggler> is free node working now?
20:05 < upshoot> Does anybody else use the #instance_method when writing mocha tests?  Not sure where I picked up that convention.
20:07 < owen1> othiym23: ^
20:07 < othiym23> owen1: you want only one domain error handler, and when you're doing d.on("error", next), the presumption is that you're using the default Express / Connect error handler (added to the end of the middleware chain)
20:08 < owen1> othiym23: got it. so process.exit() should be in the default connect middleware!
20:09 < othiym23> owen1: no, if you're going to shut down the process (which is a really really good idea!), you'll want to do that *instead* of using the default express error-handler
20:09 < owen1> othiym23: interesting. so i don't even need the  d.on("error", next);
20:10 < owen1> keep the d.on('error', function(){ process.exit();  })
20:12 < othiym23> owen1: yeah, there's the two approaches I go over in the slides
20:12 < chapel> othiym23: couldn't you at least let the express error handler send an appropriate response before exiting
20:13 < othiym23> chapel: you coooooould, I gueeessss
20:13 < othiym23> ;)
20:13 < othiym23> so it would be something like d.on("error", function (error) { res.end(500, "woops hurf durf ouch"); process.exit(1); })
20:14 < othiym23> I always come up with the most helpful diagnostic messages on the fly
20:14 < chapel> othiym23: yeah, that would work for me :)
20:14 < chapel> othiym23: always nasty to have the process just die, and no response is given
20:15 < othiym23> very internetty, though
20:15 < owen1> chapel: thanks! i'll try that 
20:16 < zipp> http://nodejsreactions.tumblr.com/post/52064099868/process-on-uncaughtexception-function
20:16 < mbalho> haha
20:16 < vrlogrs> this looks like a possible cause: http://clock.co.uk/tech-blogs/preventing-http-raise-hangup-error-on-destroyed-socket-write-from-crashing-your-nodejs-server
20:16 < vrlogrs> maybe this is whats happening
20:17 < vrlogrs> because im using v0.8.0
20:18 < owen1> http://nodejsreactions.tumblr.com/post/54603937353/flying-a-drone-for-the-first-time-at-nodeconf
20:19 < othiym23> zipp, mbalho: that's basically what a friend of mine does, only with a feeble attempt to ship the error off to Airbrake somewhere in there
20:19 < zipp> owen1: when I had the potentiometer wired up to my drone to control the z-access, that was every flight
20:21 < owen1> zipp: did we talk during nodeconf?
20:22 < zipp> owen1: I had a mohawk hat. You probably saw me. I probably talked to you :P
20:23 < zipp> Oh, yeah, I gave a demo too. https://gist.github.com/zipp/5893175
20:26 < owen1> zipp: oh, now i know
20:26 < zipp> owen1: did we talk? irc isn't good for faces.
20:27 < owen1> zipp: no. i am scared of your hat (:
20:27 < defaultro> do you guys have a pdf version of our api documentation? I don't have internet when I am in train
20:27 < zipp> owen1: -(:D
20:32 < sorensen> owen1: brilliant
20:34 < sorensen> owen1: my reaction: http://sd.keepcalm-o-matic.co.uk/i/keep-calm-and-do-a-barrel-roll-15.png
20:37 < euphrate> hi friends
20:44 < owen1> sorensen: nice
20:51  * Aredridel does the mad science dance.
21:05 <@tjfontaine> Aredridel: nice, ometajs usage
21:06 < spacysp1ff> can someone recommend me a lib to use to load fixtures for mongodb
21:07 < timkuijsten> spacysp1ff: what would you want the lib to do more than inserting some sort of json file?
21:07 < spacysp1ff> do referencing if possible
21:08 < Aredridel> Thanks, tjfontaine!
21:23 < niggler> hi friends
21:23 < niggler> hi euphrate 
21:24 < euphrate> hi niggler 
21:24 < qwebirc80258> npm ls
21:25 < qwebirc80258> npmbro npm ls
21:26 < mbalho> i wanna say npmbro got banned but i forget
21:26 < Stumbler> Anyone ever have any problems with socket.io maintaining an open connection for 8+ hours?
21:33 < isaacbw> ehh
21:41 < bluesm> What the best templating package 
21:41 < bluesm> ?
21:42 < bluesm> I mean, why there are several ?
21:43 < Abraxsi> anyone can make a templating package and really it's down to personal preference which one each person may choose to use.
21:43 < niggler> why are there several bluesm ?
21:43 < niggler> there's no resistance to making your own
21:43 < niggler> I'm surprised no one made a template for templating packages
21:44 < niggler> a template-template, as it were
21:44 < Abraxsi> I haven't extensively used any yet, but from my research Jade and EJS seem to be popular choices
21:44 < isaacbw> bluesm: I hate making decisions too
21:44 < isaacbw> DAMN YOU LOW BARRIER TO ENTRRRYYYYYY!!!!!!!!!!
21:45 < niggler> bluesm http://xkcd.com/927/
21:45 < eddiemonge> bluesm: templating for what?
21:46 < Abraxsi> haha. Today I had to make crappy decisions.. as to the granularity of how far to take modelling a problem with respect to the database model.
21:46 < dtudury> underscore… and by the time you find that tedious instead of interesting you'll probably know which one is right for you :)
21:46 < Abraxsi> judging how complex a project MIGHT get in the future is a pain
21:46 < bluesm> I'm beginner with node, I have intermediate JS knowledge. And I do need badly focus on JS, and go away from PHP.
21:47 < niggler> bluesm stay away from phpjs
21:47 < niggler> npm.im/php
21:47 < niggler> lol that exists
21:48 < Abraxsi> niggler, love the comic
21:48 < eddiemonge> bluesm: you still didnt answer what kind of templating you are looking for
21:49 < bluesm> eddiemonge:  html templating.
21:49 < bluesm> niggler:  npm.im/php ? 
21:49 < eddiemonge> bluesm: what is your project backend? php? rails? expressjs?
21:49 < dtudury> if you're new to JS you should focus on underscore.template
21:49 < eddiemonge> static html?
21:50 < dtudury> otherwise you're learning javascript and...
21:50 < eddiemonge> are you sure you need a templating engine and not say a html preprocessor?
21:51 < isaacbw> now we're gettin down n dirty
21:52 < owen1> eddiemonge: i am intriged. what's html preprocessor?
21:52 < eddiemonge> well you cant just answer a question like "What the best templating package" without knowing the details
21:52 < eddiemonge> owen1: jade, haml
21:52 < niggler> owen1 it preprocesses html
21:52 < isaacbw> duh
21:53 < niggler> eddiemonge I'd consider something like SSI to be closer to "html preprocessor"
21:53 < isaacbw> I keep making pretty interfaces and being frozen by their beauty
21:53 < Abraxsi> the html preprocessing packages are templating packes in the node.js paradigm tho
21:53 < isaacbw> unable to do anything else
21:53 < isaacbw> but stare
21:53 < isaacbw> mmmmmmm yea look at dem box shadows
21:54 < isaacbw> look at dat opacity transition
21:54 < niggler> isaacbw you have become a jhipster
21:54 < isaacbw> mmmmmmmmmmmmmmm
21:54 < eddiemonge> niggler: ssi as in server side includes?
21:54 < isaacbw> niggler: damn
21:54 < niggler> yeah eddiemonge 
21:54 < niggler> isaacbw do you like the smell of your own farts?
21:54 < isaacbw> I'm not going to answer that
21:54 < isaacbw> but I think you can guess
21:54 < niggler> https://www.youtube.com/watch?v=OM9jhGiIAFM
21:54 < eddiemonge> niggler: yeah, id consider ssi more ssi than preprocessors
21:54 < isaacbw> lol
21:55 < niggler> indeed, preprocessors are less ssi than ssi
21:55 < isaacbw> I've never seen a distinction between templating and preprocessing html before
21:55 < isaacbw> is this real life?
21:56 < niggler> consider C++
21:56 < niggler> there's templating (template metaprogramming) and preprocessing (macros)
21:56 < eddiemonge> templating to me involves replacing variables with actual data. preprocessing is converting one input language to another
21:56 < owen1> eddiemonge: thanks. is ejs also preprocessor?
21:56 < niggler> its a complexity thing eddiemonge isaacbw
21:57 < niggler> simple text substitution is preprocessing
21:57 < isaacbw> I think it's not a real distinction
21:57 < eddiemonge> owen1: not really. thats more of a templating thing
21:57 < owen1> eddiemonge: but in jade u combine data + template => htmtl
21:57 < isaacbw> or at least, everyone has a different definition
21:57 < niggler> what's the difference between compiling and translating?
21:57 < dtudury> preprocessing is a build step… templating is less specific
21:57 < Abraxsi> nothing
21:57 < isaacbw> html 4 lyfe
21:58 < eddiemonge> owen1: not really. jade can take templating data and convert that as part of its process, but so can normal html. its more for converting to html
21:58 < isaacbw> I'm so cool that I use the <template> tag
21:59 < niggler> if we get <sh*t> or <f*ck> tags, will there be a politically correct HTML5 engine which filters them out?
22:00 < eddiemonge> niggler: those tags exist already. you just have to implement them
22:00 < Abraxsi> ok so.. home project... messing around with node... at the point of data storage... do i play with mongoDB or mysql? (on a windows machine) ((don't shoot me))
22:00 < owen1> eddiemonge: so ejs is template engine but jade is preprocessor
22:00 < owen1> i am so confused
22:00 < niggler> Abraxsi go with mysql
22:00 < bluesm> eddiemonge: PHP
22:00 < niggler> owen1 they both solve the same higher level problem
22:01 < owen1> niggler: separation of data/presentation?
22:01 < niggler> "programming" douchebaggery
22:01 < eddiemonge> bluesm: why are you asking in #node.js then?
22:01 < eddiemonge> even though this feels like the ##php channel currently
22:03 < niggler> eddiemonge i daresay that the people of #node.js have more PHP competency than the people of ##php
22:03 < bluesm>  eddiemonge: I want to switch to node.js
22:03 < brycebaril> othiym23: do you think domain creation should be done in modules, or should domains only be created in user-land?
22:04 < eddiemonge> its the same code anyway isnt it? one uses .php and the other .js
22:04 < bluesm>  eddiemonge: Just what is the leading "templating system"
22:04 < eddiemonge> bluesm: for what purpose?
22:04 < jdelgado> niggler: ;)
22:04 < owen1> brycebaril: a framework!
22:04 < eddiemonge> bluesm: do you have a specific goal in mind that nodejs is solving for you or you just want to jump on the bandwagon?
22:04 < niggler> bluesm as an intermediate step, familiarize yourself with mustache
22:04 < niggler> there are mustache implementations in JS and php
22:04 < owen1> so people will build framework specific code that will not work with non-frameworky stuff
22:05 < Beg> hey guys, starting out with a new project and I would like to localize it, what are your tips.
22:05 < niggler> isn't there a get text module?
22:05 < dtudury> bluesm: underscore.template will solve all your problems…
22:05 < niggler> or i18n
22:06 < niggler> Beg https://npmjs.org/package/i18n https://npmjs.org/package/gettext
22:06 < Beg> niggler-> thanks
22:06 < owen1> niggler: when should i consider template engine and when preprocessor?
22:07 < Abraxsi> templating engines are node.js's answer to preprocessing!?
22:07 < niggler> what are you trying to do owen1 
22:08 < niggler> i don't think there's a simple answer to that question
22:08 < Abraxsi> so php, jsp, asp.... take html documents with junk inside them and preprocess them so it makes a 'finished' html
22:08 < niggler> the analogue to php's <?php -style is EJS
22:08 < Abraxsi> node.js packages such as jade do basically the same thing
22:09 < niggler> jade is different
22:09 < Abraxsi> only in syntax. not in purpose
22:09 < euphrate> jade invents some new syntax but it does the same thing
22:09 < owen1> niggler: just trying to understand if it matters whether i use jade or ejs in terms of speed, SEO and code sharing (server/client)
22:09 < niggler> its like saying coffee script is javascript because both do the same thing
22:09 < euphrate> not really lol
22:10 < euphrate> but both js and coffeescript can accomplish the same thing
22:10 < euphrate> if need be
22:10 < eddiemonge> but niggler 'The golden rule of CoffeeScript is: "It's just JavaScript".'
22:10 < Guest______> Would an op unban me please?
22:10 < eddiemonge> if you are talking then you arent banned lol
22:10 < jdelgado> Guest______: What did you get banned for
22:11 < niggler> eddiemonge the golden rule of butt sex is "it's just sex".  Doesn't make it any less painful
22:11 < Guest______> I have no idea, my regular nick was banned by isaacs for no reason
22:11 < mbalho> niggler: :(
22:11 <@xyxne> Guest______, there's usually a reason
22:11 <@xyxne> Guest______, PM me your nick and I'll see what's up
22:11 < niggler> Guest______ there's probably a good reason
22:11 < Guest______> well, only isaacs knows
22:11 < niggler> mbalho what part of that analogy are you disagreeing with?
22:12 < mbalho> niggler: dont play stupid, its 100% inappropriate for this channel
22:12 <@xyxne> Guest______, please speak with isaacs if you'd like to contest your ban
22:12 < Abraxsi> ok.. this is playing with semantics now. owen1, use which ever one takes your fancy. niggler is right that if you're used to php then EJS should look familiar to you
22:12 -!- mode/#Node.js [+b *!*625acfc5@*.98.90.207.197] by xyxne
22:12 -!- Guest______ was kicked from #Node.js by xyxne [Guest______]
22:12 -!- niggler was kicked from #Node.js by xyxne [niggler]
22:13 < owen1> Abraxsi: never done php. i like both jade and ejs. just curious if any of them has adventage in term of SEO or client/server code sharing.
22:13 < euphrate> it wouldn't make a difference
22:13 < euphrate> they both spit out html
22:13 < jdelgado> lol what did niggler do?
22:13 < dtudury> if you're learning JS; also learning coffeescript or jade will only make your road rougher
22:13 < euphrate> it's up to preference owen1 
22:14 < qard> Using coffeescript because you aren't comfortable with Javascript is probably a bad idea.
22:14 < Abraxsi> yes, SEO and code sharing are not affected by your choice of templating engine
22:14 < owen1> euphrate: ok. so there is no inherent difference that i should care about. cool
22:14 < niggler> if you're using coffee script, you're going to have a bad time
22:14 < jdelgado> indeed ^
22:14 < owen1> +1 for bad time
22:14 < euphrate> i don't think anyone was talking about cs lol
22:14 < qard> Coffeescript is not bad, but you HAVE to understand Javascript properly to use it.
22:15 < Beg> jdelgado-> Hi.
22:15 < euphrate> i'm not a fan of it though
22:15 < jdelgado> It's bad
22:15 < jdelgado> Beg:  Hi
22:15 < qard> Which makes its value questionable to most.
22:15 < dtudury> is that not true of jade too? (you have to understand js properly)
22:15 <@MI6> joyent/node: trevnorris created branch maxtickdepth-doc-remove - http://git.io/44Mqag
22:15 < qard> jade less so than coffeescript.
22:15 < euphrate> both EJS and jade allow you to use JS in your templates
22:15 < qard> Not so much logic in jade.
22:15 < euphrate> but you aren't doing a lot of logic
22:15 < euphrate> yeah
22:15 < eddiemonge> dtudury: no. you dont need to know anything about js to use jade
22:16 < eddiemonge> dtudury: you do have to understand html though
22:16 < qard> That, and it is closer to Javascript than coffeescript.
22:16 < euphrate> jade allows you to put JS in your templates but you don't need to as often
22:16 < Abraxsi> so.. does anyone use coffeescript?
22:16 < jdelgado> Beg: For some reason, that -> after your metions make my client ignore them, so sorry if I ever miss it
22:16 < Beg> Alright, I'll remake it
22:16 < Beg> jdelgado > better?
22:17 < dtudury> eddiemonge: I'd say if it's totally orthogonal to js then it's even worse for the newcomer, no?
22:17 < qard> I use coffeescript for prototyping or throwaway bits of things sometimes. Usually I stick to js though.
22:17 < jdelgado> Beg: Fixed!
22:17 <@MI6> joyent/node: Trevor Norris master * 71ade1c : doc: remove mention of maxTickDepth - http://git.io/LW_p_Q
22:17 < Abraxsi> isn't the advantage just supposed to be that it leaves out bits of javascript that are annoying? bleh i should probably do more reading on it
22:17 < eddiemonge> dtudury: no. it has nothing to do with js other than it use js in the background to compile it to html. you do know what jade is right?
22:17 < qard> If your app grows beyond a few hundred lines, coffeescript starts to become a pain to maintain though.
22:18 < dtudury> eddiemonge: (though based on the cries of the congregation, nothing could be worse than CS ;)
22:19 < qard> Coffeescript doesn't so much as change functionality as it does just push its opinion of what good syntax should be.
22:19 < qard> If you like Ruby, you'll probably like Coffeescript. Otherwise, it'll probably just feel clumsy.
22:20 < dtudury> eddiemonge: based on jade-lang.com it's a simple proprietary language that maps directly into html (and… no, not really)
22:21 < eddiemonge> dtudury: exactly. its only relation to js is that it uses it. its a html preprocessor
22:21 < isaacbw> do you know what I like?
22:21 < isaacbw> roses
22:21 < isaacbw> dey so pretty
22:21 < euphrate> oh you mean rose.js
22:21 < euphrate> new templating lang that looks great
22:22 -!- mode/#Node.js [-b *!*neeky@*.mob.bellsouth.net] by ChanServ
22:22 < isaacbw> lol god
22:22 < isaacbw> why does everyone have to make web development so hard
22:22 < isaacbw> we have more people working on web development tools than we do on websites
22:22 < dtudury> eddiemonge: unfortunately it's on my list of proprietary technologies that have made learning js from the trenches very very difficult...
22:22 < qard> Is there any word that HASN'T been used yet to name a templating language?
22:23 < euphrate> :)
22:23 < euphrate> was kidding
22:23 < euphrate> i hope
22:23 < dtudury> I just bought rosejs.org who's in?
22:23 < neeky> :)
22:23 < euphrate> this'll be the next great thing
22:24 < qard> Until 30 seconds from now.
22:24 < isaacbw> has there been a harmony proposal yet for multiple value return statements?
22:24 < eddiemonge> dtudury: huh? it shouldnt be part of your js learning. it should be part of making websites but it wont teach you js at all
22:24 -!- mode/#Node.js [-b *!*625acfc5@*.98.90.207.197] by xyxne
22:24 < euphrate> pfft isaacbw who needs that
22:24 < isaacbw> just syntactic sugar over arrays
22:24 < euphrate> with destructuring 
22:24 < qard> let {foo, bar} = baz()
22:24 < euphrate> that's enough syntactic sugar for me
22:24 < euphrate> ^
22:25 < euphrate> works for arrays or objects
22:25 < euphrate> great
22:25 < dtudury> eddiemonge: that's the "from the trenches" part… in order to understand how a given feature works I have to understand several supporting technologies
22:25 < euphrate> function now() { return [2, 6, 2013, 8, 0]; }
22:25 < euphrate> var [m, d] = now(); // m = 2, d = 6
22:25 < qard> I prefer destructuring to multiple returns anyway.
22:26 < euphrate> yeah i think multiple returns would overcomplicated things
22:26 < eddiemonge> dtudury: no you dont
22:26 < isaacbw> let's just do all our web development with c
22:26 < niggler> neeky were you banned?
22:26 < dtudury> eddiemonge: yeah huh ;)
22:26 < othiym23> brycebaril: I think it's less confusing if you leave domain management to applications, and just have libraries take advantage of domains if they're there, but I don't think that's a hard and fast rule
22:26 < euphrate> isaacbw: you say that as a joke but i know people who do
22:26 < niggler> isaacbw that's an awesome idea
22:26 < eddiemonge> i dont understand how assembly language works but i can still make websites
22:27 < neeky> I'm back, baby
22:27 < othiym23> brycebaril: as domains become more ubiquitous, I think modules will naturally start to take on more error-handling responsibility themselves
22:27 < eddiemonge> dtudury: go play with jade. then youll realize, it isnt using js for anything but its backend so you arent exposed to it
22:27 < qard> Multiple returns seems a little confusing to me. var a, b, c = foo(), bar(); // is that a, b contains returns from foo() and c contains returns from bar()? Is it c = foo() and bar() assigns to nothing?
22:28 < isaacbw> euphrate: lol I do too
22:28 < isaacbw> and they're invariably excited about how "cool" it is
22:28 < euphrate> isaacbw: well you know, only real programmers program websites in C
22:28 < mindcruzer> isaacbw: well, theres this http://cppcms.com/wikipp/en/page/main
22:28 < euphrate> you know of the incredible performance increase i'm sure
22:28 < othiym23> qard: a & b will be undefined, c will equal foo(), bar() will be discarded (aside from side effects)
22:29 < othiym23> , is higher precedence than =
22:29 < euphrate> either way, using destructuring is more useful
22:29 < niggler> mindcruzer C != C++
22:29 < qard> Yeah, that is how it works currently. But with multiple returns?
22:29 < euphrate> and can accomplish the same things
22:29 < niggler> C is to C++ as java is to javascript
22:29 < neeky> I actually got pretty stoked when I saw you could do cgi in C
22:29 < neeky> niggler, noooo
22:29 < euphrate> niggler: i wouldn't say they were that different
22:29 < isaacbw> maybe more like java is to scala
22:29 < euphrate> ^
22:30 < mindcruzer> niggler: got that, just pointing out that people apparently write C++ for websites
22:30 < othiym23> I think for multiple return you need either destructuring assignment or some kind of contextual rules
22:30 < qard> Destructuring seems a lot more sane to me.
22:30 < othiym23> i.e. Perl / Ruby's list context sensitivity
22:30 < euphrate> yeah othiym23 you do that's what he was trying to say
22:30 < brycebaril> othiym23: thx
22:30 < niggler> C++ might actually be worse than C in this context
22:30 < isaacbw> writing any sort of web application without a garbage collector just seems like a recipe for disaster
22:30 < neeky> mindcruzer, there are tons of websites still using the cgi model doing c++
22:30 < neeky> its disgusting
22:30 < mindcruzer> well it sounds terrible
22:30 < euphrate> i don't know of many websites coded in c/c++
22:31 < qard> We should code all our websites in binary.
22:31 < othiym23> people use Go for web services now
22:31 < qard> You can get better performance when you are closer to the metal, right guys? :O
22:31 < niggler> template<class WebServer, class WebEnvironment, class HttpRequest, class HttpResponse> int HandleRequest(WebServer *ws, HttpRequest *req, HttpResponse *res, WebEnvironment *env)
22:31 < isaacbw> go was sort of designed for web services
22:31 < niggler> beautiful
22:32 < othiym23> and I do know a bunch of performance-sensitive web services written in C
22:32 < euphrate> meh
22:32 < euphrate> go looks alright
22:32 < mindcruzer> so clear... what could possibly go wrong
22:32 < Beg> jdelgado > what are you developing in?
22:32 < othiym23> Go is great for everything except string processing
22:32 < isaacbw> bastard
22:32 < jdelgado> Beg: Node
22:32 < Beg> jdelgado > what text editor
22:32 < jdelgado> Beg: Oh lol, sublime 3
22:32 < niggler> lol othiym23 probably the most important thing a web service does
22:32 < isaacbw> I submitted string processing patches to Go like two days after it was released
22:32 < othiym23> niggler: I know, right?
22:32 < neeky> Is go that thing from google?
22:33 < Beg> jdelgado > any useful mods? I would like some auto indent or tidy javascript, got tips for any?
22:33 < euphrate> at least go has a garbage collector
22:33 < isaacbw> bastards led me on until the patch was ready 
22:33 < VoidAtValhalla> right ... but closer you get to metal -> slow development
22:33 < euphrate> we can all be thankful for that
22:33 < othiym23> it's a baffling oversight, because so much of Go is beautiful
22:33 < othiym23> but I find doing string stuff in it to be a huge pain in the ass
22:33 < isaacbw> "text processing is only useful for a text editor, we think"
22:33 < isaacbw> "sorry"
22:33 < isaacbw> :/
22:33 < othiym23> basically no higher-level than working with string.h
22:33 < jdelgado> Beg: Auto indent is built in, I use sublimelinter with jshint for just basic linting
22:34 < neeky> does google actually use go for their own sites?
22:34 < isaacbw> niggler: I'm on vim for good now
22:34 < qard> I want going to jokingly say vimacs, then I discovered it's a real thing.
22:34 < othiym23> neeky: in places
22:34 < VoidAtValhalla> othiym23: come on at least regex.h
22:34 < neeky> if so, it's worth a gander
22:34 < othiym23> VoidAtValhalla: doing string processing with regexes leads to all kind of code grossness
22:35 < othiym23> using regexes to split strings on simple delimiters is such overkill that it actually offends me
22:35 < VoidAtValhalla> othiym23: depends on what processing :), but i agree that a _lot_ of people uses it everywhere *facepalm*
22:37 < VoidAtValhalla> othiym23: but without regex.h you would have to write "huge" finite automats for some applications
22:38 < dtudury> go is great for everything except for writing into a forum not receiving morally indignant elitism...
22:38 < ningu> automats? like those old places you'd go to get a sandwich and they'd put it on a turntable and give it to you?
22:39 < niggler> go is the dart of the C world
22:39 < t4nk862> yo node js crew
22:39 < ningu> niggler: so what you're saying is, google can't create a language?
22:39 < t4nk862> is javascript the future or what?
22:39 < euphrate> no t4nk862 
22:39 < VoidAtValhalla> ningu: finite-state-machine automata/automats or how its written in English
22:39 < euphrate> what niggler is saying is that dart is the future
22:39 < t4nk862> no?
22:40 < euphrate> and that we should all embrace the dart vm
22:40 < t4nk862> what you saying redman?
22:40 < niggler> ningu i don't think a committee of people can create a good language
22:40 < niggler> it has to be a rambo effort
22:40 < jdelgado> Beg: Did that answer your question?
22:41 < t4nk862> languages arent made by comittee
22:41 < Beg> jdelgado > yeah trying to install those, and i want somethnig like FORCED INDENT, so I don't have to think about indents
22:41 < t4nk862> they are made by people chatting shit
22:41 < ningu> niggler: I prefer rambotans
22:41 < Beg> jdelgado > fixing indents for readability is a pain :/
22:41 < ningu> indented servitude
22:41 < mbalho> JasonSmith: can you add me as a collaborator to browser-request
22:41 < jdelgado> Beg: Jsbeautifier? Idk if there is a sublime equivelent
22:42 < niggler> rambutan ningu 
22:42 < isaacbw> t4nk862: plenty of languages were/are made by committee
22:42 < euphrate> is anybody seriously a fan of array comprehension? 
22:42 < t4nk862> so im here in hong kong off my tits on various substances. why aren't you guys living it as well?\
22:42 < euphrate> i don't think it was necessary at all
22:42 < euphrate> maybe i'm the only one
22:42 < Beg> yes jdelgado 
22:42 < niggler> euphrate list comp, not array comp
22:42 < dtudury> I love array comprehension but I'm new here
22:42 < isaacbw> harmony makes no sense
22:42 < euphrate> niggler: no it's array comp in JS
22:42 < isaacbw> "let's put in everything ever!"
22:42 < euphrate> list comp in python
22:42 < t4nk862> made my committee = necessarily shit
22:43 < ningu> niggler: both are valid
22:43 < jden> I WANT MORE THINGS
22:43 < jden> NOT ENOUGH THINGS IN MY JAVARSCRIPTS
22:43 < owen1> VoidAtValhalla: would u use String.split instead of regex whenever possible?
22:43 < mbalho> t4nk862: can you slow your roll a bit and try to not be offensive
22:43 <@xyxne> E_NOT_ENOUGH_TROLLING
22:43 < euphrate> python has list comprehension, ES6 has array comprehension :P
22:43 < ningu> niggler: in older forms of Malay o and u are not distinctive, it was a regional difference
22:43 < kenperkins> is there any reason why 5 simultaneous streams would result in an ECONNRESET error? 
22:43 < euphrate> either way, i don't like it
22:43 < kenperkins> tried setting maxSockets, but no dice
22:43 < euphrate> i like a lot about ES6 though
22:43 < isaacbw> you can do cool things with comprehensions, but I don't think they make much sense in es
22:43 < euphrate> well i mean
22:43 < euphrate> with the new function syntax
22:43 < euphrate> you don't save many characters
22:43 < t4nk862> mbalho: i'll do my best
22:43 < jdelgado> isaacbw: Oh noes, I just notice you lost your op!
22:44 < niggler> The number of languages that call the phenomenon "List comprehension" far exceeds the number of languages that call the phenomenon "array comprehension"
22:44 < isaacbw> jdelgado: oh shit when did that happen
22:44 < euphrate> niggler: yes but in ES6 it's called array comprehension
22:44 < ningu> I want incomprehensions
22:44 < othiym23> bye bye irccloud
22:44 < jdelgado> isaacbw: you'll still be my favorite op
22:44 -!- mode/#Node.js [+o isaacbw] by ChanServ
22:44 <@isaacbw> :P
22:44 <@isaacbw> woo
22:44 < t4nk862> good client for hiding spam?
22:44 < VoidAtValhalla> owen1: i hate questions with "whenever possible" 
22:44 < ningu> t4nk862: in irc you mean?
22:44 < ningu> irssi does it pretty well sometimes
22:44 < niggler> ah ningu 
22:44 < ningu> it didn't work that time for me
22:45 < t4nk862> preferably html5\
22:45 < willwh> ./ingore #channel PARTS JOINS QUITS NICKS
22:46 < willwh> irssi <3
22:46 < t4nk862> im guessing most of you guys have never seen the splendour of hong kong?
22:46 < niggler> t4nk862 are you edward snowden?
22:46 < t4nk862> indeed
22:46 < t4nk862> i might as well be
22:46 < niggler> NSA NSA!  we cornered edward snowmen!  He's in this little village called #node.js
22:47 < euphrate> inb4server down
22:47 < mbalho> this channel is already publicly logged
22:47 < othiym23> I think I can handle working AND watching the Tour de France OR working AND lurking on #node.js, but not both
22:48 < t4nk862> this is where i am http://media.treehugger.com/assets/images/2011/10/hong-kong-at-night-01.jpg
22:48 < Abraxsi> Despite working with mysql for 5 years using workbench and ...sql... I've not had to set an instance up before, as the other bloke did that before. Am I supposed to be attempting to install a cluster?
22:48 < ningu> othiym23: needs more parens
22:48 < othiym23> or rather all three
22:48 < othiym23> parens are for the weak
22:48  * niggler wonders if mbalho is actually an NSA agent
22:48 < othiym23> the strong have the precedence hierarchy memorized
22:48 < t4nk862> snowden is a nodejs guy
22:48 < ningu> othiym23: do you celebrate precedence day?
22:48 < othiym23> no, I live it every day
22:48 < neeky> Abraxsi, only if you need a cluster
22:49 < neeky> normally you install a standalone for dev work, then join it to a cluster if needed for production
22:49 < niggler> othiym23 can you handle watching the Tour de France and lurking on #node.js?
22:49 < Abraxsi> the mysql website is pretty sucky. lots of random links. ok cheers. I didn't know whether they just worked with a cluster as default these days
22:49 < ningu> I think we need node.js-powered gadgets on Tour de France bikes
22:50 < t4nk862> sql is dead. long live nosql
22:50 < ningu> sql will never die
22:50 <@tjfontaine> sigh, I switch into the channel and am already getting trolled
22:50 < niggler> nosql is dead.  long live nonosql
22:50 < t4nk862> bullshit
22:50 < t4nk862> old people will never die
22:50 < euphrate> how is sql dead lol
22:50 < willwh> ningu: I doubt it :p
22:50 < willwh> wups
22:50 < Abraxsi> well i'm wondering whether I should spend my time learning mongodb instead of how to install mysql.
22:50 < willwh> I mean I agree
22:50 <@tjfontaine> this conversation is going to go nowhere good
22:50 < willwh> ;D
22:50 < mindcruzer> nonosql is indeed good, can confirm
22:50 < t4nk862> interesting prjects dont use it that much
22:51 < ningu> how about nanosql?
22:51 < willwh> Abraxsi: that depends on your dataset >.>
22:51 < euphrate> i'm a big fan of some-sql
22:51 < othiym23> niggler: signs point to no
22:51  * VoidAtValhalla is fan of nosql
22:51 < willwh> I use mongo for a bunch of projects
22:51 < willwh> but I also use psql and mssql :p
22:51 < willwh> whatever works :>
22:51 < ningu> the thing is, the different nosql solutions aren't exactly comparable to each other
22:51 <@isaacbw> I see mongo as more of a tool for completing tasks than building systems
22:51 < euphrate> i'm using mongo in a project i'm working on now
22:51 <@isaacbw> but I dunno
22:51 < euphrate> we'll see how it turns out in the end
22:51 < ningu> at least, not as closely as the different sql solutions
22:52 < jdelgado> I still don't understand how anyone can use mongodb in production
22:52 < jdelgado> it scares the shit out of mer
22:52 < jdelgado> me*
22:52 < othiym23> jdelgado: because they hate their data
22:52 < jdelgado> honestly
22:52 <@isaacbw> postgres 4 lyfe
22:52 < ningu> jdelgado: yeah, I don't feel safe without transactions
22:52 < othiym23> MongoDB is no MangoDB
22:52 < mindcruzer> can you eat it?
22:52 < ningu> othiym23: it's more of a polynesian RongoDB
22:52 < euphrate> rethink db looked interesting 
22:53 < jdelgado> euphrate: Except no failover
22:53 < Abraxsi> ningu aren't transactions more of a framework thing than a db ctyle thing
22:53 < euphrate> yeah idk
22:53 < jdelgado> I still think CouchBase is the best solution
22:53 < ningu> Abraxsi: no
22:53 < othiym23> https://github.com/dcramer/mangodb
22:53 < t4nk862> the next database system will be a nginx of mongodb
22:53 < niggler> that would be mingodb t4nk862 
22:53 < t4nk862> lightweight, sexy, agile
22:53 < ningu> if you try transactions at the framework level you will have all sorts of problems, imo
22:53 < ningu> concurrency is hard
22:53 < jdelgado> amen to that
22:54 < othiym23> RethinkDB will be interesting once they stop shoving entire products' worth of features into it between minor releases
22:54 < t4nk862> is mingo good
22:54 < niggler> what's an agile database system?
22:54 < kenperkins> anyone ever heard of multiple concurrent streams not working? I.e. 6 no, 5 yes?
22:54 < ningu> niggler: it has very fast reflexes
22:54 < jdelgado> I was really excited for FoundationDB until I tried it on a server
22:54 <@isaacbw> niggler: like mongo is very easy to get something up and running
22:54 < t4nk862> google redirects to mongo
22:54 < VoidAtValhalla> "agile" another bussiness word
22:54 < euphrate> someone needs to write a rethink ORM for node
22:54 <@isaacbw> no need to worry about schema 
22:54 < Abraxsi> ningu, could you elaborate... i've used java spring in the past. and that allows you to annotate transactional methods.. so I assumed the framework was rolling back the changes if the method didn't complete. perhaps I am wrong
22:54 < othiym23> kenperkins: http outbound? if so, check what's going on with your http.globalAgent
22:54 <@isaacbw> I think agile is more meaningful than people make it out to be
22:54 < ningu> Abraxsi: no, that's just an interface to the db's transaction feature
22:55 < jdelgado> Lets take a quick poll, shall we? Production DB?
22:55 < neeky> If I am a undeniably lazy programmy, and need to run tests on my code, which testing package for node allows me to remain lazy, but still run proper tests?
22:55 <@isaacbw> postgres
22:55 < ningu> postgresql
22:55 <@isaacbw> sql
22:55 < t4nk862> personally i like mongo but it's too heavyweight
22:55 <@isaacbw> ql
22:55 <@isaacbw> ql
22:55 <@isaacbw> ql
22:55 < kenperkins> othiym23: I checked that
22:55 < kenperkins> seemed to have no impact
22:55 < t4nk862> it's trying to be everything
22:55 < Abraxsi> ok. I think I realised I did actually know that in some part of my brain I am not using today.! yes that makes sense
22:55 < jdelgado> im couchbase
22:55 < niggler> jdelgado do flat files count?
22:55 < t4nk862> and it needs to be a specific niche
22:55 < jdelgado> niggler: Hmm?
22:55 < othiym23> neeky: node-tap / tape
22:55 < t4nk862> couche vs mongo = 
22:55 < t4nk862> ???
22:55 < othiym23> but it sort of depends on what kind of laziness we're talking about
22:56 < jdelgado> t4nk862: Night and day
22:56 < ningu> crouchdb sounds very agile
22:56 < t4nk862> meaning?
22:56 < neeky> BTW I'm using mongo and will go into production unless I hit a brick wall with it in the next few months
22:56 < jdelgado> I love it
22:56 < niggler> jdelgado I love the .TXT database
22:56 < jdelgado> t4nk862: Mongo is bad, Couch is great... in my opinion at least
22:56 < jdelgado> niggler: Ahmen to that!
22:56 < ningu> niggler: depends what you are doing. for storing data of certain sorts, fine. for concurrent writes, not so much
22:56 < t4nk862> redis vs mssql?
22:56 <@isaacbw> lolwut
22:57 < jdelgado> He was joking nigu :)
22:57 < ningu> jdelgado: no he wasn't
22:57 < jdelgado> lol for real niggler ?
22:57 < euphrate> a lot of people in this channel can't spot a joke
22:57 < Abraxsi> so what is mongo's answer to ... money out of account A ... money into account B else roll back money into account A ?
22:57 < t4nk862> why though j?\
22:57 < neeky> why is mongo bad?
22:57 < niggler> I'm actually serious about loving text files
22:57 < jdelgado> neeky: Data consistancy for days
22:57 < niggler> they are simple and don't impose any sort of structure
22:57 < neeky> transactions?
22:57 < jdelgado> niggler: Whattttt
22:57 < euphrate> niggler: json master race
22:57 < othiym23> I'm amazed nobody's mentioned levelup / leveldown / couchup yet
22:57 < t4nk862> eventual consistency ftw
22:58 < othiym23> I thought everything was going to be done in LevelDB forever and evermore amen
22:58 < jdelgado> neeky: Yeah, and the fact that the entire thing could crash in seconds
22:58 < neeky> do transactions in the controller, no the model, problem solved
22:58 < ningu> jdelgado: different use cases are different
22:58 < jdelgado> ningu: I guess so! Crazy
22:58 < niggler> mongodb is the coffee script of the nosql universe
22:58 < jdelgado> ^
22:59 < Abraxsi> do transactions in the controller... 
22:59 < neeky> I'm pretty sure its in heavy production in several places, without issues
22:59 < owen1> othiym23: some people prefer to save time by using db that gives them a few features in one install.
22:59 < neeky> I do not work for mongodb btw
22:59 < Abraxsi> so you assume the db updates will never fail half way through basically
22:59 < jdelgado> I used cassandra for a month in production, crazy powerful for replication but the queries sucked. CAP theorem all day
22:59 < othiym23> then they should be using Oracle like the good Lord intended
22:59 < niggler> ORACLE NOSQL SERVER!
22:59 < pachet> othiym23: praise him
22:59 < ningu> niggler: so how would you decide whether to use an existing format like json or yaml for your flat file versus one you make up?
22:59 < owen1> levelup is awesome but u have to collect a few packages to make it robust.
22:59 < niggler> http://www.oracle.com/technetwork/products/nosqldb/overview/index.html
22:59 < neeky> Abraxsi, no, I handle that failure in the controller
23:00 < euphrate> yaml is the coffeescript of the json universe
23:00 < niggler> ningu its based on the end users
23:00 < niggler> json if I'm just dealing with javascript
23:00 < owen1> othiym23: do u know of anyone using couchup?
23:00 < niggler> TSV or CSV if I plan on integrating with stuff like awk scripts
23:00 < othiym23> I hear this guy named Mikeal Rogers is using it for a few things
23:00 < neeky> BUT I'm not doing high transaction atomic operations either
23:00 < jdelgado> owen1: Eww ruby
23:01 < mikeal> what am i doing?
23:01  * othiym23 is sorry for all the metatrolling
23:01 < niggler> jdelgado rewwby
23:01 < ningu> mikeal: good question, what are you doing?
23:01 < owen1> mikeal: using couchup?
23:01 < othiym23> mikeal: using couchup
23:01 < jdelgado> lmao
23:01 < Abraxsi> neeky how is that possible? simple example... you do it in the controller, and then goto update the db.. and one update makes it through (debiting account A) and the command to credit account B doesn't make it?
23:01 < owen1> so cochup users is mikeal 
23:01 < mikeal> not in production, it's like 2 weeks old :)
23:01 < neeky> oh god I hate yaml as bad as I hate jade - with every fiber of my being
23:01 < othiym23> mikeal: shh that's not how you build mindshare
23:01 < ningu> neeky: why is that?
23:01 < ningu> I use yaml in moderation
23:01 < mikeal> but my goal is for it to be compelling enough to move npm to it in the next 6 months
23:01 < mbalho> i use couchup for mindblowing big data in the extreme west pacific
23:01 < owen1> neeky: i thought u are nexxy and came to her at nodeconf and thanked her for helping on the irc..
23:01 < mbalho> yes, in production
23:02 < othiym23> of COURSE it's production-ready, it's on npm
23:02 < neeky> I hate formatting that is as heavily dependent on whitespace as both
23:02 < pachet> extreme west pacific
23:02 < pachet> so like la?
23:02 < ningu> I use yaml when I do for two reasons: (1) no trailing comma issues, (2) comments
23:02 < jdelgado> othiym23: lmfao - I hear that on the daily
23:02 < euphrate> i don't mind jade but i'm not a fan of yaml
23:02 < mbalho> pachet: thats east pacific, im talking china market
23:02 < pachet> mbalho bad joke
23:02 < neeky> owen1, not me
23:02 < ningu> in general I don't actually like yaml very much but json doesn't have those benefits and sometimes they are necessary
23:02 < ningu> config files without comments can be problematic at times
23:03 < owen1> neeky: i realized it after she was a bit shocked
23:03 < euphrate> well anything's better than xml
23:03 < neeky> heh
23:03 < niggler> xml isn't the worst idea ever
23:03 < ningu> so what is the worst idea ever?
23:03 < neeky> xsl is though
23:03 < othiym23> pretty sure ASN/1 is the worst idea ever
23:03 < VoidAtValhalla> euphrate: you clearly didnt see m4 scripts :D
23:03 < FMJaggy> every idea has had it's place/time
23:03 < neeky> yaml is on the list for me as a text/file based data storage format
23:03 < rvagg> SOAP has a place?
23:04 < niggler> ningu that's a moving targett
23:04 < neeky> and json is the best
23:04 < ningu> rvagg: we all need to be clean
23:04 < pachet> brief lull while everyone things of clever things for 'worst idea ever'
23:04 < niggler> every day i find something new that deserves the title "worst idea ever"
23:04 < VoidAtValhalla> you mean something like ... html ?
23:05 < ningu> html isn't even in the running
23:05 < neeky> I still can't poke any holes in html, except the little goofy unclosed elements
23:05 < neeky> liek <img>
23:05 < ningu> oh, yeah
23:05 < ningu> html has plenty annoying things about it
23:05 < niggler> there are lots of surprises with HTML
23:05 < ningu> but it isn't anything like the worst idea ever
23:05 < neeky> again, for because it's not positional, just somewhat order dependent
23:06 < euphrate> yeah unclosed elements are weird
23:06 < FMJaggy> rvagg: i believe it does
23:06 < kenperkins> othiym23: lol
23:06 < ningu> ok I found the worst idea ever
23:06 < ningu> http://xplusplus.sourceforge.net/
23:06 < kenperkins> I had no idea http.globalAgent !== https.globalAgent
23:06 <@isaacbw> sounds like you just need a better editor
23:06 < neeky> one hidden tab in yaml or jade and you are going to waste lots of brain cells figuring out why it's not working
23:06 < kenperkins> I always assumed they shared the agent
23:07 < niggler> ningu there has to be a standard
23:07 < neeky> I thought f# sucked
23:07 < niggler> probably "at least 3 people have used it"
23:07 < VoidAtValhalla> i find html really ... it was good idea back in stone-age
23:07 < Abraxsi> wait, wasn't the worst idea ever that operating system for windows 95 where it was like you were in an office
23:07 < niggler> F# is not the worst thing to come out of microsoft neeky 
23:07 < niggler> LINQ is far worse
23:07 < ningu> what's so bad about linq?
23:08 < ningu> I've never used it but lots of people like it
23:08 < niggler> those are the same people that like SQL
23:08 < ningu> well, I'm one of those
23:08 < ningu> SQL has many annoyances but I haven't found a better replacement for it
23:08 < neeky> as heh, I wrote a node jlinq library
23:08 < niggler> I agree that there aren't better replacements, but that doesn't mean you have to like SQL
23:08 < neeky> and never used it.
23:08 < ningu> niggler: ok, fair enough
23:08 < othiym23> kenperkins: most people don't even know about the Agent at all, so you're already ahead of the game
23:08 < neeky> I'm an idiot
23:09 < ningu> niggler: but given that you want to use it as best you can
23:09 < FMJaggy> rvagg: http://programmers.stackexchange.com/a/112211
23:09 < niggler> its like HTML
23:09 < ningu> niggler: but I don't know whether linq actually will help you use SQL better or just do stupid things, since I've never used it
23:09 < Abraxsi> what on earth was that windows OS thing that made it appear like you were in a house where you moved from room to room and your programs were on shelves and desks
23:10 < ningu> Abraxsi: that was a thing?
23:10 < mindcruzer> a gibson?
23:10 < niggler> ningu the problem is that it made C# a much larger mess
23:10 < ningu> people seem to like C# too
23:10 < VoidAtValhalla> uh
23:10 < ningu> I don't have enough experience with either C# or linq
23:10 < Abraxsi> yeh.. the worst thing. but i can't remember what its name was. trying to find it on google
23:11 < niggler> C# > java
23:11 < kenperkins> bnoordhuis did any progress ever get made on the http connection pooling code?
23:11 < kenperkins> i.e. keep-alive even when queue is empty
23:11 < mindcruzer> Abraxsi: I think I know what you mean, I can't recall the name either though
23:11 < neeky> linq is the _ for sql
23:11 < othiym23> F# > C#
23:11 < ningu> niggler: yeah, nothing I've seen of C# makes me recoil but I just don't know enough to know if it's actually "good"
23:11 < VoidAtValhalla> i really dont like java but its still better than C#
23:11 < neeky> it just didnt catch on
23:11 < mindcruzer> it was indeed stupid
23:12 < ningu> hmm, so people don't actually use linq much?
23:12 < neeky> apply, sort, group, etc
23:12 < ningu> it's often pointed out as some super-special thing you can only do in C# and no one else can do
23:12 < niggler> I'm comfortable asserting that P(X > Java | X is a programming language that is used by at least 10 people) > .5
23:12 < othiym23> LINQ is used all over the place, and not just for SQL
23:12 < niggler> othiym23 it seems misguided to query a collection using a syntax that resembles SQL
23:12 < neeky> its better with json than sql imo
23:13 < VoidAtValhalla> well i even like brainfuck more than C# :D so iam biased
23:13 < othiym23> that's only because nobody's implemented Production D yet, niggler
23:14 < neeky> see, and I like c# - it's just MSjava
23:14 < niggler> othiym23 the key guy was hired by Facebook iirc
23:14 < neeky> when sun stopped letting MS deliver java runtime is when c# was born
23:14 < niggler> so we may never see it
23:14 < othiym23> yeah, but if you use F#, you have access to the .NET API, which is pretty nice, from a real functional language, which is also pretty nice
23:15 < niggler> othiym23 ironpython
23:15  * othiym23 is gonna keep banging the F# drum forever because he finally realized that OCaml's tooling is an irremediable pain in the ass
23:16 < neeky> my life is consumed by javascript and java , and that's all the languages I can deal with at one time
23:16 < othiym23> niggler: nobody has *ever* accused Python of being a real functional language
23:16 < othiym23> not even Guido
23:16 < niggler> othiym23 jane street uses ocaml
23:16 < othiym23> Guido "I hate lambdas" Van Rossum
23:16 < Abraxsi> hmm metro looks suspiciously like windows 3.1 with bigger text
23:16 < othiym23> niggler: didn't they switch pretty much wholesale to F# about a year and a half ago?
23:17 < afflicto> Hey all, I'm trying to install node on ubuntu. I downloaded the binary tar.gz file, what now? I'm familiar with "building" stuff.
23:17 < othiym23> their (incredibly irritating) OCaml proselyte sure did
23:17 < niggler> they may have
23:18 < othiym23> afflicto: you can unpack the .tar.gz under /usr/local as root, or you can add chrislea's PPA and install Node via apt-get
23:18 < mindcruzer> afflicto: what not just do this https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
23:19 < MILLIONAIRE> hi
23:19 < MILLIONAIRE> did the set syntax get deprecated for express
23:19 < MILLIONAIRE> and people use send now?
23:19 < niggler> express was deprecated
23:21 < MILLIONAIRE> what do peope use then
23:21 < ningu> plenty of people still use express
23:21 < euphrate> oh express is evil now?
23:22 < ningu> anyway, yes, I believe the set method was deprecated
23:22 < MILLIONAIRE> is it deprecated? or is that a joke?
23:22 < othiym23> that's a joke
23:22 < othiym23> a "joke"
23:22 < niggler> MILLIONAIRE i was not being serious
23:22 < MILLIONAIRE> ok
23:22 < niggler> but i figured in the past month a few new frameworks probably emerged
23:23 < Abraxsi> mindcruzer, found it! http://stepsandleaps.files.wordpress.com/2009/08/msbobstudy.jpg - it was called 'Microsoft bob'
23:25 < mindcruzer> Abraxsi: lol yeah... no words
23:25 < Abraxsi> and for those desperate to install it... apparently it is possible to get working on windows 8 lol
23:25 < hagi_82> is there a good example for a duplex transform stream using the new api ?
23:30 < mbalho> require('through')
23:32 < owen1> "express was deprecated" got to love #node
23:33 < Abraxsi> owen1, huh?
23:37 < owen1> Abraxsi: niggler wrote that a few minutes ago and people started asking for a replacement
23:38 < owen1> quote from the planning of nodeconf's domain session: "Express is probably the worst framework to use to demonstrate the usefulness of domains, because TJ does a huge pile of crazy closure + try/catch malarkey to trap and log errors within Connect itself. Figuring out how to wrest errors free of Connect is one of the least pleasant things I've done recently (and if you look at what I do at my day job, I do a
23:38 < owen1> lot of pretty crazy / bad stuff). Bare require('http') or Restify would be my choices." - https://github.com/mikeal/nodeconf2013/issues/6#issuecomment-13115059
23:38 < owen1> (another reason why we should all start using vanilla.js for websites/web services)
23:41 < neeky> I've not put a microscope on express, but connect seems to be a decent middleware plugin
23:41 < neeky> niggler, is it evil too?
23:41 < niggler> i disagree with owen1 
23:41 < niggler> i'm a fan of vapor.js
23:42 < neeky> I ONLY use it for routing, sessions, cookies, and the view engine
23:42 < neeky> oh, I thought owen1 was quoting you
23:43 < niggler> (vapor.js is like vanilla.js :P)
23:43 < niggler> i like building from the raw http
23:44 < neeky> I like vapor.js
23:44 <@isaacbw> I exclusively use github vaporware
23:44 < neeky> I use it all the time
23:44 <@isaacbw> if it has a readme, it's too mainstream for me
23:44 < jdelgado> isaacbw: lmfao hipster!
23:45 < neeky> isaacbw, thats actually my complaint about express - "here's a possibly great library, but you'll need to figure out how to use it by reading the source"
23:45 < owen1> neeky: it's quote from othiym23
23:46 < owen1> neeky: do u use no-framework approach for websites?
23:46 <@isaacbw> neeky: it's basically sinatra
23:47 <@isaacbw> nodejs is heavily inspired by the ruby community
23:47 < neeky> well, this is my first real node.js project and as a general rule i try not to use many libraries
23:47 < owen1> and middleware is not needed in node since we only have 1 server - http.createServer.
23:47 < andrewaclt> Is there a way to create dynamic filters in jade that can work on template variables? I'd love to be able to do something like #{myvar|slugify}
23:47 <@isaacbw> neeky: you can write an application pretty easily just using http
23:47 <@isaacbw> the http api
23:47 < neeky> but the utility functions are mainly what I use: bodyParser, the router, cookies, sessions, etc
23:47 <@isaacbw> parse your urls with regex
23:47 <@isaacbw> write a simple router
23:48 < owen1> in ruby/python it was needed so frameworks (rails/django) would work with web servers (thin, mongrel etc)
23:48 <@isaacbw> maybe monkey patch request/response objects a little like express does
23:48 < neeky> but lazy-DRY
23:48 <@isaacbw> sessions are good to understand yourself anyway
23:48 <@isaacbw> cookies too
23:48 < neeky> Dont Repeat Others - DRO maybe
23:48 < owen1> neeky: https://github.com/oren/node-website-template
23:49 <@isaacbw> damn, I can't figure out a good color to fill this hole
23:49 <@isaacbw> erm
23:49 <@isaacbw> this empty patch
23:49 < owen1> isaacbw: do u have examples for that approach? what's your github?
23:49 < neeky> i understand cookies and sessions intimitaley, I just don't want to write the code when I know it exists already
23:49 <@isaacbw> owen1: no, not really
23:49 < neeky> BUT i hate black boxes
23:49 <@isaacbw> I love your spelling
23:49 < owen1> neeky: https://github.com/oren/cookies-example
23:50 < owen1> neeky: i was hacking at nodeconf with myles. not sure if he is on the chat
23:50 < neeky> so that's why i try to stick with utility libraries that just save me time, but don't try to be magic
23:50 <@isaacbw> burn the witch
23:50 < owen1> neeky: i wanted to replace cookieParser and cookieSession with regular functions.
23:50 < othiym23> writing your own cut-down examples of the built-in middleware functions for Express is a great way to understand how the piece fit together
23:51 <@isaacbw> owen1: the one thing I would pull in would be a mimetype module if you would be serving static files
23:51 < othiym23> it's also a great way to learn how to write your own web stack once you decide that Express is just too damn complicated
23:51 <@isaacbw> since mimetypes are an annoying pita
23:51 < owen1> isaacbw: or st ar ecstatic
23:52 < owen1> isaacbw: never heard of mimetype. thanks
23:52 <@isaacbw> I just meant "mime type"
23:52 <@isaacbw> but mimetype is good
23:52 <@isaacbw> I think it's a little wrong with some fonts though
23:52 < owen1> isaacbw: isaac's st is nice
23:53 < neeky> for some reason the concept of stacked, ordered middleware click in my head
23:53 < owen1> this is the cookies i am going to use in my cookies-sample project - https://github.com/jed/cookies
23:54 < owen1> (to take care of save/get cookies)
23:54 < andrewaclt> Is there a way to write a dynamic filter for jade? In my templates I'm doing #{item.name.replace(' ', '-')} all over the place and I'd much rather do something like #{item.name|slugify}
23:54 < euphrate> yes
23:54 < euphrate> just add a function to locals
23:54 < ningu> ugh, github is being unbearably slow for me right now
23:54 < owen1> neeky: because express is the place everyone direct you when u'r new to noe
23:54 < owen1> node
23:54 < UserCC> hi everyone
23:54 < neeky> owen1, your cookies example does nothing with cookies :(
23:55 < UserCC> does anyone know how can i do this http://www.2011.neon-night.ru/ ? how this is called?
23:55 < euphrate> that page is using flash
23:55 < mbalho> step 1: be russian
23:56 <@isaacbw> damn russians
23:56 < UserCC> here's an english one
23:56 < UserCC> http://www.lakelandelectric.com/Portals/0/docs/pdf/SmartGrid/smart-grid-smarter-power/
23:56 <@isaacbw> I'm fairly sure one of my old roommates had a father in the russian mafia
23:57 <@isaacbw> UserCC: you just want flash
23:57 < Aredridel> UserCC: try megazine3.
23:57 < euphrate> what are you even asking
23:57 < neeky> UserCC, thats still flash
23:57 < Aredridel> UserCC: There's no good javascript implementations; trust me, I've looked.
23:57 < euphrate> what do you want to do?
23:57 <@isaacbw> you want specific flash software for creating books
23:57 <@isaacbw> I think there's like one major package for that
23:57 < owen1> neeky: https://github.com/oren/cookies-example/blob/master/server.js#L62-66
23:57 <@isaacbw> in flash
23:58 < owen1> it's commented
23:58 < mindcruzer> UserCC: http://www.flippagemaker.com/flippingbook-maker/
23:58 < owen1> neeky: it's work in progress (:
23:58 < UserCC> i'm quite a noob one mates, i want to do the same as the two above with a pdf
23:58 < UserCC> but the same thing, not with alternatives
23:58 <@isaacbw> oh hey look what google did http://www.3d-book.com/3D-Book-Demos/demo.shtml
23:58 < andrewaclt> euphrate, is their reading information about that anywhere I've googled but I don't quite understand
23:58 < neeky> I see now
23:58 < Aredridel> UserCC: I did so, with some nasty server-side processing. It eventually writes out megazine configurations and jpegs/pngs of the pages. It's evil.
23:59 < euphrate> andrewaclt: app.locals.slug = function(text) { return ...; }
23:59 < mindcruzer> UserCC: i had a retarded client that wanted his website product catalog literally duplicated in the form of a flipbook... and guess what I used... it works though
23:59 < euphrate> then you can call slug as a function within templates
23:59 < neeky> I gotta get off of here, I have done little work today - putting off the inevitable: work
--- Log closed Sat Jul 06 00:00:02 2013
