--- Log opened Thu Apr 04 00:00:16 2013
00:00 < zivester> syncan https://en.bitcoin.it/wiki/MtGox/API/Streaming
00:00 < zivester> I'm trying socket.io-client again... restricting to 'websocket' transport
00:04 < ningu> so there was a poll of american voters asking among other things the question "Do you believe that shape-shifting reptilian people control our world and gaining political power to manipulate our societies, or not?"
00:04 < brutalhonesty> ninju: Hey, I installed async via npm, and here is my second attempt: http://jsfiddle.net/NKceB/1/
00:05 < monokrome> Does anyone know why my `npm prepublish` creates files, but they don't end up in the final tar archive on npm? http://github.com/rentlytics/json-brunch
00:05 < monokrome> Doesn't make any sense. I've been trying to figure this out off-and-on for about a week now.
00:05 < MI6> joyent/node: bnoordhuis created branch tjfontaine-review-this - http://git.io/TgZC6w
00:05 < brutalhonesty> ningu: issue this time is: Error: Cannot enqueue Quit after invoking quit.
00:06 < ningu> brutalhonesty: (1) don't close the connection until the end, (2) return train_samples isn't going to work, you need to pass a callback and call it
00:06 < ningu> also, don't throw an error but pass it in a callback
00:07 < brutalhonesty> ningu: so invoking the call back will be in function getTrainedSamples(<HERE>)?
00:07 < ningu> brutalhonesty: just a sec will pastebin it for you
00:07 < brutalhonesty> ninguL kk thank you!
00:08 < brutalhonesty> ningu: *thanks
00:09 < ningu> brutalhonesty: http://hastebin.com/fekonajexu.js
00:09 < syncan> ugh
00:10 < ningu> brutalhonesty: whoops one sec :)
00:10 < brutalhonesty> ningu: hehe
00:10 < ningu> ok http://hastebin.com/komufaxona.js
00:10 < brutalhonesty> ningu: awesome, thanks a lot, I see whatcha mean now. so if I call getTrainedSamples, that should now give me the object returned
00:11 < ningu> brutalhonesty: you have to call the callback for each function in async.parallel when you're done. first argument of the callback is always the error
00:11 < ningu> brutalhonesty: yes but you have to pass it a callback, first argument is error, second is train_samples
00:11 < ningu> brutalhonesty: this is how all async code in node works so best to get familiar with it :)
00:12 < brutalhonesty> haha, will do, so just to summarize, if later on in the code i do: getTrainedSamples(error, localTrained), its how it would be if I did something like localTrained = getTrainsSamples(error)?
00:13 < ningu> brutalhonesty: no, getTrainSamples(function (error, localTrained) { /* handle result */ });
00:13 < ningu> brutalhonesty: and you put whatever you want to happen when the db queries complete in that function
00:13 < ningu> *not* in the following lines
00:14 < brutalhonesty> ningu: ok, thanks, ill give it a shot!
00:15 < ningu> you might want to read callbackhell.com
00:15 < brutalhonesty> haha, i saw this last night on reddit
00:15 < ningu> really? what's the link?
00:15 < brutalhonesty> think it was in a comment
00:16 < MI6> joyent/node: Ben Noordhuis master * b9655fc : build: fix windows build, disable postmortem  Always define v8_postmortem - http://git.io/ngpJ6Q
00:16 < ChrisPartridge> brutalhonesty: you could also clean it up by using an object in parallel, and passing the async iterator callback to the query, then format the data in the async completion callback
00:17 < brutalhonesty> ChrisPartridge: never seen so many keywords in one phrase, trying to process it all lol, i'll give that a shot as well
00:17 < brutalhonesty> as far as the reddit link, think its lost in the sea, though i think it was in node.reddit.com
00:17 < ChrisPartridge> brutalhonesty: just look at the second example in the async docs, for parallel, where an object is used instead of an array of functions
00:18 < brutalhonesty> Chris: oooo got it
00:19 < ChrisPartridge> brutalhonesty: e.g. https://gist.github.com/anonymous/5306632
00:20 < brutalhonesty> Chris: so simple <_<
00:20 < ningu> "Node.js is 10 years behind Python in asynchronous libraries. (This 10 year old library is the Python version of Node.js http://twistedmatrix.com/trac/)"
00:20 < ChrisPartridge> brutalhonesty: yup, node can be pretty too :)
00:20 < chilts> yeah, I'm not so sure about that comment ... but yeah, it's not a competition :)
00:21 < ningu> chilts: hehe i agree
00:21 < ningu> I've never used twisted
00:21 < ningu> no reason to think it's good or bad
00:22 < ningu> in my experience what differentiates node is the whole platform is conceived of as async from the start -- so you can use pretty much every module that way
00:22 < chilts> it's interesting to have event driven stuff in traditionally procedural languages, since a lot of the time you kinda have to choose between two different sets of stuff
00:22 < chilts> same in Perl with the various Any::Event stuff
00:22 < chilts> yeah, exactly as you said
00:22 < chilts> heh, we're thinking the same
00:22 < ningu> chilts: so what do you do in perl or python if you want to use an sql driver that is sync? you can't wrap it can you?
00:23 < ningu> without using threads or some nasty hack
00:23 < chilts> erm, in Perl I use DBI, that just gives a sync interface (not sure if the backed actually does sync or async)
00:23 < chilts> I guess it'd be sync
00:24 < tracker1> ningu, agreed there... I tend to point out to new tools/libraries when they don't follow either the event-emitter and/or .do(params, callback) patterns
00:24 < ningu> it's a shame because I love some of the apis you have in perl (and perhaps python too just less experience) but perl is slow and doing async is painful as well
00:24 < chilts> Perl itself isn't slow - which part do you mean when you say it's slow?
00:24 < ningu> DBI is a good example, any-db is nice as I recently discovered, it's fine for my needs
00:25 < ningu> but DBI is better
00:25 < ningu> chilts: I don't know, I've found it to be rather slower than v8 in general but maybe I'm wrong
00:25 < brutalhonesty> ningu: your hastebin is magical, I console.log'd my local Trained samples and i has everything in it :D thanks again!
00:26 < ningu> brutalhonesty: hehe np
00:26 < ningu> chilts: keep in mind I'm a perl coder converted to node, I am not anti-perl by any stretch :)
00:27 < chilts> me too! :)
00:27 < chilts> did Perl for 12 years, still doing some Perl now
00:27 < ningu> I made a bunch of contributions to DBIx::Class in 2005 or so
00:27 < chilts> cool
00:28 < ningu> I recently did a git blame and still found myself 
00:28 < howdynihao_> whats the deal with perl 6
00:28 < ningu> good question
00:28 < ningu> I asked around about that recently
00:28 < howdynihao_> its been in development since forever
00:28 < chilts> it'll be ready by Christmas!
00:28 < ningu> the current implementation is called rakudo
00:28 < ningu> that is, the most up to date one
00:29 < howdynihao_> didnt they start like 10 years ago?
00:29 < ningu> not rakudo, you may be thinking of parrot
00:29 < mscdex> isaacbw: afaik there was nothing for imap that had to be change for 0.10
00:29 < chilts> it's a research project tbh
00:29 < chilts> so it's worth just thinking of it in terms of that
00:29 < ningu> a lot of perl6-inspired stuff has been backported to perl5 though
00:29 < mscdex> isaacbw: i work on a lot of modules though, so who knows :-)
00:30 < ningu> Moose is pretty cool
00:30 < howdynihao_> ningu: unfortunately no one uses perl anymore to know that
00:30 < ningu> howdynihao_: not sure that's really true
00:30 < ningu> it hangs on in a lot of places
00:30 < bnoordhu1s> i still use perl
00:30 < brutalhonesty> ningu: so I got that sorted out, the reason for me needed a function with a return value is because I wanted to use the return in conjunction with another function, any thoughts on that?
00:30 < howdynihao_> "it hangs on" haha
00:31 < ningu> brutalhonesty: you need to use callbacks instead
00:31 < brutalhonesty> ah, alright
00:32 < ningu> callbacks are how node does all async operations
00:32 < howdynihao_> like all the major linux distros use to come with perl as part of their core, now... its been replcaed
00:32 < ningu> and lots of people argue about whether that makes everything ugly or not
00:32 < ningu> howdynihao_: they still do. what distros are you talking about?
00:32 < brutalhonesty> lol don't care about ugly, just want it to work efficently :D
00:32 < brutalhonesty> efficiently*
00:32 < howdynihao_> well i know ubuntu and debian don't
00:33 < ningu> brutalhonesty: well, there are various ways to make callbacks look nicer
00:33 < chilts> howdynihao_: Perl comes as standard on all Debian-based distros
00:33 < brutalhonesty> o rly?
00:33 < howdynihao_> does it? oh
00:33 < tracker1> brutalhonesty, well, ugliness leads to spagetti, which makes maintainance harder and more costly...
00:33 < chilts> yeah, it's not going away anytime soon
00:34 < chilts> if you wanna make money in the future, learn Perl and do what Cobol programmers are doing now! :)
00:34 < tracker1> brutalhonesty, there are ways to make just about any language/platform pretty.
00:34 < bnoordhu1s> well, chilts already mentioned cobol
00:34 < brutalhonesty> prettify.js obv :D
00:35 < ningu> if you really want to see the future you can port your cobol to Tcl
00:35 < ChrisPartridge> #timemachine
00:36 < howdynihao_> i would love to see perl get popular again
00:36 < howdynihao_> dont get me wrong
00:36 < acidjazz> what the fuck am i reading
00:36 < acidjazz> what about perl
00:36 < acidjazz> lol tcl
00:37 < ningu> what really matters is if the language is enterprise and web scale for your tps reports
00:38 < monokrome> Does npm pull files from your git repository when you publish?...
00:42 < chilts> monokrome: it just reads what you have locally
00:43 < s5fs> chilts: haha, i wrote cobol for a few years
00:44 < monokrome> chilts: Then why would it be ignoring the fact that I have a lib folder?
00:45 < monokrome> I even manually created a tar file with the lib folder in it
00:45 < monokrome> specified that, and it wasn't in the resulting npm package
00:46 < chilts> s5fs: how was it?
00:46  * chilts has done Ada83 (Ravenscar Profile) in the past
00:46 < monokrome> If I add the directory to git
00:46 < monokrome> Then it ends up
00:46 < monokrome> So, npm is literally reading the package.json, noticing it has a git repo, and cloning the git repo
00:46 < monokrome> which is beyond silly
00:47 < chilts> monokrome: do you have lib/ it in your .gitignore or .npmignore?
00:47 < monokrome> gitignore 
00:47 < monokrome> not npmignore
00:47 < howdynihao_> so there you go
00:47 < chilts> npm also ignores stuff in your .gitignore, so if lib/ is in your .gitignore it'll ignore it
00:47 < monokrome> It uses .gitignore? That's completely silly
00:47 < s5fs> chilts: I dunno, prob exactly what you would expect. it was only 20-40% of my time on average.
00:47 < chilts> say that when you're drunk! :)
00:47 < monokrome> Can I put `!/lib/*` in .npmignore to reverse that?
00:48 < s5fs> chilts: the weird stuff was having different debuggers for batch programs versus interactive. the lame stuff was how massive the files were (10k lines was nbd). the lack of intrinsic functions (like length, etc) wasn't fun either.
00:48 < chilts> ah right, crap that (not having those intrinsic functions)
00:49 < s5fs> chilts: i was using COBOL 85, microfocus compilers and was developing on the Lawson ERP
00:50 < chilts> crazy
00:50 < s5fs> for the first 18mo of that job, I could only use ksh/sed/awk for automation, my boss didn't know and didn't trust perl
00:51 < ljharb_> monokrome: why would you want something published to npm that you don't want in your repo
00:51 < s5fs> chilts: i'm still angling for an opportunity to learn ada or fortran
00:52 < monokrome> ljharb_: Because my repository is for my code. The built files in lib are all based on the code in src. I don't care to have a bunch of transcompiled JS in my repository. It makes no sense.
00:52 < ljharb_> monokrome: then use a prepublish script to build, and a postpublish script to clean it up.
00:52 < monokrome> That'd be like throwing all my object files in my C++ projects
00:52 < ljharb_> monokrome: and yes, it does - it's very widely encouraged to store JS in your repo.
00:52 < ljharb_> since the majority of users of your module will want to look at your JS, not whatever you're using.
00:52 < monokrome> ljharb_: I do use a prepublish script to build it, but if it's not in gitignore then git still looks for it
00:53 < ljharb_> so use a postpublish script to clean it up.
00:53 < monokrome> ljharb_: Then they can look at npm, where the coffeescript shouldn't be and the JS should be
00:53 < ljharb_> monokrome: "look at npm"?
00:53 < monokrome> Yeah
00:53 < ljharb_> that's what github is for. to look at code.
00:53 < ljharb_> it's up to you, but non-CS devs almost certainly won't use your module if your repo doesn't have JS in it.
00:53 < monokrome> Great. If you can't read coffee-script then get out of my repository. The JS generated by coffee-script is crap for reading anyway.
00:54 < ljharb_> i agree with that. part of why i don't use cs.
00:54 < ljharb_> and again, up to you, but that attitude is a great reason to never use your module :-)
00:54 < monokrome> I don't care. I publish it as JS and develop with CS. There's no reason to put both in git just so some people who can't read CS don't want to read it. They can go rewrite it.
00:54 < monokrome> It's completely redundant.
00:55 < monokrome> Should I throw all of my .o files into my C++ files for the people who want to read assembly?
00:55 < monokrome> No.
00:55 < chilts> there are plenty of other cs packages, I'd take a look at those and see what they are doing
00:55 < monokrome> I've seen what they are doing. It's silly.
00:55 < chilts> heh, ok
00:55 < chilts> then you're on your own
00:56 < ljharb_> JS isn't assembly.
00:56 < monokrome> I never said that it was.
00:56 < monokrome> CS produces JS
00:56 < ljharb_> you compared it to .o files
00:56 < monokrome> C++ produces ASM
00:56 < monokrome> Only in the fact that I'm writing code that produces them
00:56 < monokrome> Not in that they have the same purpose
00:56 < monokrome> The point is that it is completely silly to throw artifacts of your build process into your repository.
00:57 < monokrome> If someone really doesn't want to use my code because they are too stubborn to read CS, then more power to them. They can write their own tools or use a different one.
00:57 < ljharb_> in a compiled and linked language i'd agree
00:57 < ljharb_> JS isn't that.
00:57 < ljharb_> transpiling isn't the same, and you shouldn't treat it the same.
00:57 < howdynihao_> oh my goodness
00:58 < howdynihao_> i finally realized what CS means
00:58 < ljharb_> the advice i was trying to give is, that means the majority won't use your code. again, it's totally up to you
00:58 < monokrome> I shouldn't have two different variants of the same codebase that are potentially not representing the same features (IE, if someone fixes something in the CS and commits without rebuilding) just because somebody wants to read JS
00:58 < monokrome> That's silly
00:58 < s5fs> howdynihao_: "cheese sandwich" obviously
00:59 < monokrome> Even if they were always tracking the same code in two different languages, it's still silly to have a ton of code sitting in parallel to my CS that is generated from a build step of the CS. If someone is too stubborn to read CS, and too lazy to download the library and run "make" then that's ridiculous.
00:59 < ljharb_> of course, what would be really not silly is to just write JS in the first place.
00:59 < s5fs> monokrome: personally, if i were expecting the JS community at large to embrace and support my code, I'd probably aim for the most commonly supported language and toolset.
00:59 < monokrome> ljharb_: Yeah, I agree with that quite often.
01:01 < monokrome> s5fs: If people want to support my code then great. If they want to use it then great. However, I am not doing silly things just because someone might use it. If they really prefer to reimplement it just because they don't want to read the CS and they don't want to clone it and run my Makefile then let them write it themselves.
01:01 < ljharb_> or they'll just fork your repo, build the JS, delete the CS, and publish another module, and then everybody will use theirs instead
01:01 < s5fs> monokrome: that's totally fine, too. your code, your rules.
01:02 < monokrome> ljharb_: Good for them. That's why my repos are all MIT licensed.
01:02 < s5fs> ljharb_: in my experience they'll just pass this module over in favor of one they could support themselves
01:02 < ljharb_> true
01:02 < s5fs> i'm totally okay with that.
01:02 < monokrome> I don't care what they want to do.
01:02 < ljharb_> monokrome: but to your original question - npm ignores things that git does, and if your workflow totally contradicts that, then thats you being silly and you'll have to work around it :-)
01:02 < monokrome> I'm not building my code for them. I just give it away. If people don't like how I give it away, they can solve the problems that they're inventing
01:03 < s5fs> exactly right
01:03 < monokrome> ljharb_: That's why I asked if I can put !/lib/* into .npmignore
01:03 < mscdex> lovely, github is changing their news feed page again :/
01:03 < ljharb_> monokrome: no, npmignore uses the same syntax as gitignore, so there's no negations
01:04 < monokrome> gitignore has negations
01:04 < ljharb_> ok, then npmignore does too. i don't have complex gitignore files :-p
01:04 < monokrome> You still have missed the question
01:04 < monokrome> My questionis regarding which one takes precedence
01:05 < acidjazz> npmyourmom
01:05 < ljharb_> tias
01:05 < bright_day> i'm using xpath to do some search in html but i have one problem. after find every article for example and start searching on each snapshotItem that dosn't work whats problem :( i tried it on my browser it works but not in node.js
01:06 < monokrome> IE, does npm ignore .gitignore if there is a .npmignore? or does it read the .gitignore first and then layer .npmignore over it? or the opposite direction maybe?
01:06 < ljharb_> bright_day: node has no DOM. you can't search it for elements without a module that gives you one.
01:06 < ljharb_> monokrome: it's one of the latter two - both are used.
01:07 < monokrome> hopefully not the last one
01:07 < monokrome> that one would make no sense
01:07 < syncan> hey zivester: are you using the version of node you have listed in dependencies, or later version?
01:07 < ljharb_> i'd expect gitignore first, then npmignore.
01:08 < bright_day> ljharb  i'm using wgxpath
01:08 < ljharb_> then show some code, but it's probably a bug in that module.
01:08 < ljharb_> xpath is gross anyways :-p
01:08 < zivester> syncan, I'm using v0.11.0
01:09 < syncan> aha
01:09 < syncan> i think i found the answer to the first issue
01:09 < monokrome> cool
01:09 < monokrome> It's the second version, so it overlays npmignore over your gitignore
01:09 < monokrome> which means that I can distribute only the JS and no CS in my package
01:09 < monokrome> woot
01:10 < syncan> the DOA connection using nextTick and not close
01:10 < syncan> with the recent change of nextTick coming right back from the call before IO now it never fires
01:11 < syncan> i was able to replicate the issue
01:11 < syncan>  // event on the connection object to occur immediately.
01:11 < syncan> +process.nextTick(function() {
01:11 < syncan>  // Skip sending the close frame to a dead socket
01:12 < mscdex> Leeol2: fwiw there's a fastPut for sftp now in the latest version of ssh2 on npm
01:12 < bright_day> ljharb_ http://hastebin.com/resuqekase.coffee
01:12 < syncan> so actually
01:12 < syncan> that's probably solves the second
01:12 < ljharb_> bright_day: please select ".js" if you must use hastebin.
01:12 < MI6> joyent/libuv: Ben Noordhuis v0.10 * f1215b7 : unix: include uv.h in src/version.c  Include uv.h so the compiler sees th - http://git.io/6wMbUQ
01:12 < syncan> ending up with zombie FDs
01:12 < ljharb_> bright_day: where's your window.install(xpath)?
01:13 < ljharb_> bright_day: that's in the readme on npmjs.org
01:13 < syncan> i'm going throw this fork up
01:13 < syncan> them once i'm done vomiting utensils, i'll commit my code to git
01:14 < brutalhonesty> ningu: finally got the hang of it, and my info is coming back as expected, thanks again for all your help
01:14 < brutalhonesty> you too ChrisPartridge
01:16 < bright_day> ljharb_ what does that install function does i don't get or what should i give it 
01:16 < ljharb_> i have no idea. i don't like xpath, but i'm sure it's in the docs.
01:16 < MI6> joyent/libuv: Ben Noordhuis master * 78e8034 : Merge remote-tracking branch 'origin/v0.10' (+2 more commits) - http://git.io/cZUr-Q
01:17 < ljharb_> monokrome: my favorite npm module: https://github.com/gjohnson/coffeefilter
01:18 < Raynos> Error handling question
01:19 < zivester> syncan, here's a gist of mine, that i would expect to keep trying to connect indefinitely... but it throws an error after the first try https://gist.github.com/zivester/5306901
01:19 < Raynos> if you write a flow control function parallel(listOfOperations, callbackOrReturnPromise)
01:19 < Raynos> and multiple operations result in an error what can you do?
01:20 < syncan> zivester: thanks, i'll take a look in a few
01:20 < zivester> basically all I'm trying to do, is create a module that will never give up trying to connect to a particular websocket... whether that be it doesn't exist, it disconnects, it fails to respond... etc
01:20 < ljharb_> Raynos: i'd say you'd need 2 parallel methods. parallelAll and parallelAny. All would fail if any failed, any would succeed if any succeeded.
01:20 < syncan> never gives up trying 
01:20 < Raynos> ljharb_: that doesnt get around the error problem
01:21 < faceleg|work> ningu: ljharb_ you know I've been refactoring the crap out of the module I'm working on, pretty much full rewrite
01:21 < syncan> constant hit polling?
01:21 < faceleg|work> and now I've forgotten what I was going to use the module for
01:21 < Raynos> the general question is if your api takes a callback or returns a promise and at the implementation detail triggers TWO errors how should it bubble them up
01:21 < ningu> haha
01:21 < ljharb_> Raynos: as an array of errors to the "failure" callbacks on the promise
01:22 < Raynos> so the `err` property is either a single error or an array?
01:22 < Raynos> or is it always an array?
01:22 < syncan> what's the strategy / use case around it?
01:22 < ljharb_> i'd find it easier to always be an array
01:22 < ljharb_> then you don't have to special case "1 thing"
01:22 < Raynos> ljharb_: that goes against both node core & most promises
01:23 < Raynos> the multiple errors is an edgecase
01:23 < ljharb_> hm
01:23 < ljharb_> oh
01:23 < ljharb_> if "parallel" returned an array of promises to match listOfOperations, then each error would go to a specific promise.
01:23 < Raynos> :p
01:23 < ljharb_> there's no need to return a single promise, since promise libs can take an array of promises in a when()
01:23 < Raynos> ljharb_: `listOfOperations` is a list of promises
01:24 < ljharb_> what's "parallel" doing then? if they're already promises, the work is already spun out onto the loop
01:24 < Raynos> The thing you want is `parallel :: [Future Any] -> Future [Any]` for some definition of Future
01:24 < nezzario> Is there no debian packages still?  Or is development just moving too fast?
01:24 < ljharb_> raynos: when(promises).then(finalPromise)?
01:25 < Leeol2> mscdex: Worth a lot, ty :)
01:25 < Raynos> ljharb_: so im asking if your implementing `when` and two promises error how does `finalPromise` get those errors?
01:27 < ningu> nezzario: chrislea has debs but they are for ubuntu I believe
01:27 < ljharb_> Raynos: ah, yes. according to http://promises-aplus.github.com/promises-spec/ that's up to the implementation of the "when" function
01:27 < ljharb_> Raynos: ie, you can pick whatever you like
01:28 < nezzario> ningu: Those PPA things?  They work for debian but require some hacking that's frowned upon
01:28 < ljharb_> i've definitely written promise things that get arrays of errors
01:28 < Raynos> I see
01:28 < Raynos> I might make a MultipleError data type
01:29 < ningu> nezzario: not sure then
01:30 < ningu> there is nothing on the official node site?
01:30 < ningu> http://packages.debian.org/search?searchon=names&keywords=nodejs
01:31 < ningu> experimental 0.10.1 package
01:32 < chilts> Raynos: err should be null or an array with at least one item
01:33 < chilts> an empty array doesn't make sense
01:33 < ningu> yeah, you want to be able to test if (err)
01:33 < chilts> yep
01:33 < ljharb_> Raynos: if it's an array, i'd pass one where the length is the same as the promises array, but it has nulls when it's not an error
01:33 < Raynos> chilts: so it's `err = null | [Error]` ? 
01:33 < chilts> I think so
01:33 < Raynos> wow this sounds so complex >_<
01:33 < chilts> not sure what you guys are talking about with promises though :)
01:34 < Raynos> well its the same for a callback(err, value)
01:34 < Raynos> should it have a single error or a list
01:34 < ljharb_> node core would say a single error
01:34 < ningu> yeah, promises aren't in core so there isn't really a core answer to this
01:37 < ningu> I also think it's somewhat tricky to handle this case cleanly
01:38 < ningu> no matter what you're using
01:39 < syncan> i like the way twisted does it's success/error changing on defers
01:40 < syncan> it gives you a few options
01:40 < syncan> chaining
01:40 < syncan> just caught your convo, not sure if you mentioned it already
01:40 < samholmes> How do I do `npm install` for a directory that isn't the current working directory?
01:40 < syncan> or if i'm even fully in sync with what you're talking about
01:41 < samholmes> this is so that I can run npm install on a git post-receive hook
01:41 < ningu> samholmes: afaik you don't
01:41 < ningu> change directories
01:41 < samholmes> ningu: oh shit.
01:41 < samholmes> is there a way to trick bash into thinking I'm in that directory?
01:41 < ningu> what's stopping you from doing that from your post-receive script?
01:41 < samholmes> Surely I say unto you, there must be a way
01:42 < ningu> cd $DIR
01:42 < samholmes> ningu: Idk how
01:42 < samholmes> ooooh
01:42 < samholmes> dur
01:42 < ningu> hehe
01:42 < samholmes> thanks
01:42 < deoxxa> samholmes: https://github.com/deoxxa/plz/blob/master/bin/plz-npm-install :>
01:42 < samholmes> is this asyncronous though?
01:42 < deoxxa> `plz npm-install /path/to/package'
01:44 < faceleg|work> >>     "3" -+-+-+ "1" + "1" / "3" * "6" + "2"
01:44 < purr> faceleg|work: (string) '42'
01:44 < chilts> WLG ✈ AKL, then AKL ✈ SFO
01:45 < faceleg|work> AKL! AKL! Hail, fellow NZR
01:45 < samholmes> deoxxa: npm install -g plz?
01:45 < tylerbre>  Aukland?
01:45 < monokrome> Does anyone know where I could find a deb file for nodejs 0.10.x?
01:45 < tylerbre> *Auckland
01:45 < faceleg|work> yes auckland
01:45 < samholmes> and then I can use plz npm-install /apps/myapp from within post-receive?
01:45 < chilts> faceleg|work: have you joined the Node.js NZ group I started?
01:45 < ningu> faceleg|work: I'm going to meet him in SF, he beat you here
01:45 < deoxxa> samholmes: it's not on npm
01:45 < chilts> if not, you should!!! :)
01:45 < samholmes> deoxxa: bow chicka bowwow?
01:45 < tylerbre> Nice, I've been there once
01:46 < samholmes> deoxxa: damn..
01:46 < deoxxa> i use it with https://github.com/deoxxa/instagit
01:46 < deoxxa> it's pretty easy to put together
01:46 < ningu> I suppose now is the time to say that if any fellow noders in the bay area want to get together friday evening let me know
01:47 < mscdex> monokrome: chris-lea ppa
01:47 < chilts> faceleg|work: https://groups.google.com/forum/#!forum/nodejs-nz
01:47 < chilts> do eeeet
01:48 < faceleg|work> chilts: yes member
01:49 < faceleg|work> tylerbre: yeah I've been there a few times
01:49 < chilts> faceleg|work: which one might you be?
01:49 < chilts> gotchyer
01:50 < chilts> so you're closer to Hamilton rather than Auckland?
01:50 < monokrome> Thanks, msdex
01:50 < ningu> chilts: he's the one with the face leg, isn't that obvious?
01:50 < chilts> ningu: yeah, I just looked it up, you're right
01:53 < ningu> in the bay area we just have Oakland
01:53 < chilts> ningu: faceleg|work: you guys know each other already?
01:53 < ningu> in a manner of speaking
01:54 < ningu> just on this channel
01:54 < chilts> cool
01:54 < ningu> he's been having C++ issues 
01:54 < chilts> unsurprisingly?
01:54 < ningu> and I've been racking my brains from when I used to code C++
01:54 < chilts> I stopped trying to remember my C++ days
01:55 < ningu> well, it's necessary if you want to do bindings with gyp
01:55 < chilts> yep
01:55 < jhgaylor> is there a canonical style guide for javascript, and can someone link me or tell me the name?
01:55  * chilts &
01:55 < ningu> jhgaylor: there are programs like jslint and jshint
01:56 < jhgaylor> ningu: what would i read if I wanted to write a linter?  I don't want to, but I read pep8 before i used a python linter and i think it helped.
01:57 -!- mode/#Node.js [+o TooTallNate] by ChanServ
01:57 < ningu> you don't want to use one of the existing linters? one of them (jshint I think) has a lot of options
01:57 < jhgaylor> i do want to use one.  i just want to know what it expects of me so I can avoid the majority of issues
01:57 < ningu> oh
01:57 < jhgaylor> i use a python linter, but i read pep8 which describes how python code should look.
01:58 < ningu> well I don't remember where the original explanation of jslint is
01:58 < jhgaylor> okay :)  ill dig around
01:58 <@Nexxy> jhgaylor, there are a few popular style guides
01:58 < jhgaylor> i ask because I'm considering contributing to a js project and i don't want to look a fool
01:58 <@Nexxy> jhgaylor, I like this one https://github.com/felixge/node-style-guide
01:58 < ningu> http://www.jslint.com/lint.html
01:58 < NodeNewb> is there any way in Mongoose to combine the count with the query results, without having to run two queries?
01:59 < ningu> NodeNewb: why not just get the .length property of the query results?
01:59 < jhgaylor> is two space tabbing really a thing >.<
01:59 <@Nexxy> definitely
01:59 < ningu> sure
01:59 < jhgaylor> i guess it would get intense in js with closures and what not to have 4 space tabs
02:00 <@Nexxy> I code w/ 4 hard tabs
02:00 <@Nexxy> 4 space hard tabs*
02:00 < Stuk> promise
02:00 < NodeNewb> hmm...nice...will that work if there are fields that contain other documents within the results?
02:00 < Stuk> whoops, wrong window
02:00 < ningu> NodeNewb: they're just arrays... not really sure what the question is
02:01 < NodeNewb> sorry I'm still in a RDB state of mind, I'll just test it out...thanks ningu!
02:03 < AAA_awright> jhgaylor: No, use common sense. Use space wisely, use patterns like "return void", know when to use functions, name your functions, please use tabs
02:03 < ningu> spaces instead of tabs
02:03 < ningu> :P
02:04 < ningu> we can probably all agree that you should never *mix* spaces and tabs
02:04 < jhgaylor> which way?  in python i use spaces not tabs.  i think i should just keep it consistent with their code?  they put the commas in dictionary entries as the first thing on the next line.  what gives with that?
02:05 < ningu> jhgaylor: lots of js coders do that as well (with commas)
02:05 < jhgaylor> so i should just get over how ugly i think it is?
02:05 < ningu> lots of people do it the other way too
02:07 < nezzario> jhgaylor welcome to c style languages
02:07  * nezzario is a hardcore hard tab user
02:07 < nezzario> and nobody is gonna stop me .. NOBODY ...! hahaha \t\t\t\t\t
02:08 < monokrome> jhgaylor: The commas on the next line are a nice way of saying, "This line is continuing the last line"
02:08 < ningu> nezzario.replace(/\t/g, '  ');
02:08 < monokrome> for things like javascript's var keyword
02:08 < jhgaylor> yea, i guess python just has 4 spaces hard coded into me.  with relevant white space, consistency is very important.
02:08 < monokrome> PEP8 is a 4-width soft tabs
02:08 < monokrome> I usually use 2-width soft tabs for languages that don't have a strong convention
02:09 < jhgaylor> soft tabs sounds like a nice way of saying spaces to me
02:09 < monokrome> but for things like Python, not using 4-space is soft tabs is silly
02:09 < monokrome> soft tabs are spaces
02:09 < jocafa> consistency is certainly more important, i think.
02:09 < jhgaylor> i wasn't sure
02:09 < jocafa> if you're anal about consistency, then anything that's inconsistent will scream at you
02:10 < jhgaylor> i can get used to 2 spaces, but I'm sure to forget the commas. i hope sublime linter is working with st3 :D
02:10 < jocafa> (trying to drill that into a coworker hehe)
02:11 < monokrome> I'll never be happy with any editor
02:11 < monokrome> Unless something amazing comes out :'(
02:11  * jocafa pets vim :)
02:11 < monokrome> I have vim, sublime, and pycharm open right now
02:11 < monokrome> all do something better than the other
02:11 < monokrome> :/
02:11 < jocafa> haha
02:12 < monokrome> IntelliJ does refactoring so well, sublime has that nice "THANKS FOR SAVING MY FILE, NOW BUY ME!" popup, and vim is great for just raw editing
02:13 < jhgaylor> monokrome: have you tried turning on vintage mode in st2?
02:13 < monokrome> Yeah, I use it
02:14 < jhgaylor> k.  i don't use it, but have been meaning to find the time to learn it.
02:14 < monokrome> https://github.com/monokrome/sublime-text-config
02:14 < monokrome> just learn vim
02:14 < monokrome> vim does it better
02:14 < NodeNewb> ningu tried your idea, wish it worked...apparently 'length' isn't valid on a resultset from mongo, shows undefined
02:14 < jocafa> agreed.  vintage mode is getting better and is showing promise, but it's still not vim hehe
02:15 < monokrome> It's command mode is a joke imo
02:16 < monokrome> and Sublime's splits are horribly inflexible
02:17 < jhgaylor> i don't know vim and am not saying i think its bad, but sublime lets me do so much of what i hear people say about vim. i don't think knowing vim is going to help me code better or faster. maybe one day ill think differently and on that day ill learn vim :)
02:17 < monokrome> If it had good splits, a better command mode, and the splits were inside of tabs it'd be a great edit
02:17 < monokrome> editor*
02:17 < monokrome> Also, it doesn't have marks :(
02:18 < jhgaylor> marks?
02:19 < monokrome> in Vim, everything is based on movement commands - so you can hit `ma` to mark a position in the file. If you delete a line, the position stays with whatever symbol was marked. Then you can go somewhere else and (as an example) you could hit "v" for visual mode and then hit 'a to move back to mark a
02:19 < monokrome> which selects everything from where the cursor is back to your mark
02:20 < jhgaylor> yea, sublime has multiple cursors but i not marks.  they sound pretty sweet though
02:20 < jhgaylor> I wonder if it could be done with a plugin
02:20 < monokrome> Sublime also doesn't have block selection mode :(
02:30 < syncan> you mean selecting by column blocks?
02:30 < syncan> btw sublime has a package for Mark and Move, I use it a ton - it rocks :)
02:32 < faceleg|work> << d = new Date("couldn't you please throw an exception here instead?"); d.getTime();
02:32 < faceleg|work> >> d = new Date("couldn't you please throw an exception here instead?"); d.getTime();
02:32 < purr> faceleg|work: (number) NaN
02:35 < faceleg|work> >> Math.min() < Math.max();
02:35 < purr> faceleg|work: (boolean) false
02:50 < howdynihao_> beer & mozeralla sticks, good combo
02:51 < ChrisPartridge> beer & <insert any greasy food here>, good combo
02:53 < howdynihao_> you may be on to something chris
02:58 < trusktr> syncan, If only sublime was FOSS.
02:59 < sshaginyan> Hey guys is it better to create/destroy html elements than reuse/rearrange them?
03:00 < Raynos> creatonix: what would you call a pure function that takes a continuable and returns a new one? like the result of map ( https://gist.github.com/Raynos/484693963b9ef499f446#file-callbacks-js-L3 )
03:00 < passcod> sshaginyan: better in what way? performance? side effects?
03:00 < sshaginyan> performance 
03:01 < passcod> I would assume reuse to be better, but it depends how one does it (innerHTML sucks). Bench it? :)
03:03 < monokrome> isaacs: Hey. Are you around? I think that npm ignore is not working as the documentation describes.
03:04 < sshaginyan> passcod: Would it be smart to have a pool of elements at the beginning and then simply keep track of them/resue them for a particular task?
03:05 < faceleg|work> passcod: fancy meeting you here
03:05 < sshaginyan> kinda like a thread pool for html elements
03:06 < passcod> sshaginyan: mmmm. It's an interesting idea, but I wouldn't move on it without making a jsperf out of the different options :)
03:06 < faceleg|work> sshaginyan: i assume reuse as well, making sure you add / remove them in groups if possible, each dom change requires re-layout
03:06 < sshaginyan> passcod: Well load them up initially when the page is rendered then map them to a reference and manipulate them
03:06 < passcod> hi faceleg|work :)
03:07 < faceleg|work> passcod: I'm @codeofinterest
03:07 < passcod> I know
03:07 < faceleg|work> HOW
03:07 < passcod> you're faceleg on github, no?
03:07 < faceleg|work> yes
03:07 < passcod> same avatar
03:07 < faceleg|work> yes
03:07 < faceleg|work> well
03:07 < faceleg|work> different
03:07 < faceleg|work> but yes
03:09 < xcm> hi all, i am here looking for a freelancer job, anybody can help?
03:09 < sshaginyan> xcm: location?
03:10 < sshaginyan> xcm: Go to meet ups. They always ask
03:10 < jhgaylor> sshaginyan: are you suggesting meet ups are a good place to find work or find a worker?
03:11 < jhgaylor> or both?!
03:11 < passcod> both
03:11 <@Nexxy> bolth.
03:11 < sshaginyan> jhgaylor: both
03:11 < howdynihao_> im scared to
03:11 < monokrome> Oh, I think npm just has memcached running or something and it's breaking my instal
03:11 < xcm> Right now i am in Beijing, we don't have that much meet up here
03:11 < howdynihao_> major city the meetups will have > 100 people
03:12 < howdynihao_> they need like meetups where its like < 25 people and you mostly drink beer
03:12  * monokrome just moved to SF and doesn't know wtf the meetups are, but gets emails about the all the time now
03:12 <@Nexxy> howdynihao_, that's all there is
03:14 < passcod> a meetup is a place where the amount of beer and food exceeds the amount of code
03:15 < ryan_> We need online meet up where we sit in-front of webcams all with our beers & greasy food /: if you're in a small place like new zealand working locally is pretty much 'out'
03:15 <@Nexxy> I think that's called g+ hangout
03:16 < mscdex> a node-powered hangout!
03:16 < ryan_> oh yeah get with the times lol
03:17 < cxreg> re-asking since maybe someone else knows this; is there a correct way to url-encode a Buffer?
03:17 < cxreg> require('querystring').stringify({ foo: new Buffer([0xFF, 0xFE]) }) <- doesn't work
03:18 < mscdex> cxreg: encodeURIComponent(buf.toString('binary')) ?
03:18 < cxreg> > encodeURIComponent(new Buffer([0xFF, 0xF8]).toString('binary'))
03:18 < cxreg> '%C3%BF%C3%B8'
03:18 < cxreg> o_O
03:19 < cxreg> that looks like some utf8 confusion
03:20 < cxreg> yeah, that's exactly what it is; it utf8 converted it before url escaping it
03:21 < mscdex> then use buf.toString('hex') or something
03:21 < mscdex> or 'base64'
03:21 < mscdex> or a loop over the buffer, creating a string manually
03:21 < cxreg> the remote end is expecting the binary data simply url-encoded
03:21 < cxreg> i may just do the loop variant.  sad, but .. oh well
03:21 < cxreg> ok thx
03:24 < passcod> cxreg: isn't url encoding just hex with % signs? so just use .toString('hex') and insert % wherever necessary, no?
03:24 < cxreg> that seems hackish but works too
03:24 < cxreg> i wonder if the loop is faster, i should write both and bench it
03:25 < mscdex> cxreg: b.toString('hex').replace(/([a-zA-Z0-9]{2})/g, '%$1')
03:26 < cxreg> i'd just do (..)
03:26 < cxreg> why complicate things :)
03:26 < passcod> cxreg: post the results here ifwhen you do bench it? twould be interesting…
03:26 < cxreg> ok
03:40 < NodeNewb> any reason why two fields (identical names) will be rendered as field[0] and field[1] but field.length is blank? (express question, I guess)
03:41 < brycebaril> escape((new Buffer([0xFF])).toString('binary'))
03:41 < brycebaril> '%FF'
03:41 < NodeNewb> two FORM fields, after a post, that is
04:03 <@mbalho> Nexxy: hey i might actually be in portland in may do you still need speekerz
04:24 < vicapow> anyone know how mocha knows when your anonymous function has an argument?
04:24 < vicapow> seems like some kind of black magic
04:25 < tmpvar> function.length
04:26 < monokrome> wtf... Why is it that this URL has a lib folder, but installing `inform-shared` results in a package where lib is gone? http://registry.npmjs.org/inform-shared/-/inform-shared-0.0.0.tgz
04:27 < monokrome> s/URL/archive/
04:27 < passcod> monokrome: not sure. what's the package.json like? or the .npmignore? mmm
04:28 < monokrome> passcod: http://github.com/informjs/inform-shared/
04:28 < monokrome> That's the repository
04:28 < passcod> well there you go
04:29 < passcod> the .gitignore has /lib/*
04:29 < monokrome> Doesn't matter. The .npmignore doesn't have lib in it
04:29 < passcod> npm takes the .gitignore into account if it's there, iirc
04:29 < monokrome> only if .npmignore isn't there
04:29 < monokrome> the lib folder ends up in the tar.gz
04:29 < monokrome> maybe I can't ignore .npmignore in the tar.gz file
04:34 < Cainus> hey all... anyone know why `new Buffer("\u00a0", 'utf8').length` is 2?  shouldn't a utf8 encoding drop the first byte?
04:37 < monokrome> Nope, that didn't fix anything
04:41 < medice> Cainus: http://en.wikipedia.org/wiki/UTF-8#Description two bytes
04:42 < Cainus> ahhh it's in the 2-byte range  :\
04:43 < Cainus> thanks... that was driving me nuts
04:43 < itsTodd> I am using mongodb as my datastore. Is it better to have 1 longstanding open database connection that I use for all of my requests or should I be initiating and closing connections to mongodb each time a web request comes in?
04:44 < Cainus> string.length != new Buffer(string).length   :)
04:44 < Cainus> itsTodd: better to re-use an existing connection, or pool of connections
04:44 < itsTodd> Thanks Cainus
04:45 < Guest74856> itsTodd: I personally prefer having a persistent connection with sanity checking, in the event it fails, attempt to reopen it.
04:57 < shmoon> using NVM i have to source ~/.profile everyday, how do get around this ?
04:58 < monokrome> shmoon: Do it in your bashrc
04:58 < monokrome> or whatever shell you have
04:58 < deoxxa> it's surprising that .profile isn't sourced already
04:58 < monokrome> yeah
04:59 < monokrome> bash doesn't source .profile any more, it's a legacy filename
04:59 < monokrome> it's .bash_profile now
04:59 < monokrome> sh sources .profile
04:59 < shmoon> on every boot?
04:59 < monokrome> every login
05:00 < shmoon> there's no ~/.bash_profile it seems
05:06 < passcod> shmoon: depends on the OS and the settings. iirc, Ubuntu has .bash_profile and .bashrc, while Arch only has .bashrc. Also, it's different if you use zsh :)
05:10 < passcod> Is there a place in the Node community that's like RubyFlow? I.e. where people can announce new libraries, versions, news, etc?
05:10 < mscdex> passcod: https://npmjs.org/browse/updated
05:11 < tmpvar> or the mailing list
05:11 < passcod> mscdex: not exactly what I meant :)
05:11 < mscdex> :-)
05:16 < xissy> Hello guys! What's the most stable AWS module?
05:17 < shmoon> passcod: i am on ubuntu+bash
05:18 < deoxxa> xissy: awssum!
05:19 < xissy> awssum yeah I heard it.
05:34 < mscdex> node.js rules!
05:36 < ChrisPartridge> +1
05:46 < shmoon> monokrome: hm i think it doesnt sources .profile cuz i am not using bash in interactive login mode?
05:47 < monokrome> shmoon: I don't think that bash ever sources .profile. I think that sh does.
05:47 < monokrome> Bash sources .bash_profile
05:47 < monokrome> in .bash_profile you could add
05:47 < monokrome> source .profile
05:47 < monokrome> well
05:47 < monokrome> source ${HOME}/.profile
05:49 < ljharb> my nvm installed to bash_profile
05:57 < hueniverse> What's the new recommended way to have multiple listeners on stream data? since on('data') is 
05:57 < hueniverse> What's the new recommended way to have multiple listeners on stream data in 0.10?
05:58 < ningu> hueniverse: on('data') still works but you can now do on('readable') and then call stream.read()
05:59 < hueniverse> ningu: I know 'data' still works, but I don't want to use old style. 'readable' doesn't provide an easy way for multiple listeners on the same data. I can emit a custom event on the stream, but is there a more formal new way of doing this?
05:59 < ningu> hueniverse: you can't do multiple readable listeners?
05:59 < hueniverse> for example, I want to both output the data in one place, and count size in another
05:59 < hueniverse> you can
05:59 < ningu> but they aren't in sync?
05:59 < superjoe> am I doing something wrong here? https://gist.github.com/superjoe30/5308169
05:59 < hueniverse> but once one of them read() its gone
06:00 < ningu> oh, right
06:02 < ljharb> hueniverse: you could use promises :-)
06:03 < superjoe> https://github.com/joyent/node/issues/5216
06:03 < superjoe> I think it's a real bug
06:06 < deoxxa> superjoe: var s = (new require('stream')).PassThrough();
06:07 < deoxxa> typo?
06:07 < deoxxa> require("stream") gives you the old stream class
06:07 < superjoe> what
06:08 < deoxxa> (new require("stream")).PassThrough() would try to call .PassThrough() on a new Stream
06:08 < deoxxa> (from your issue description)
06:08 < superjoe> ok maybe that is a typo but after I fixed it I get the same results
06:08 < deoxxa> oh yeah, i was just saying it looked odd
06:08 < superjoe> fixing
06:09 < superjoe> looks like a bug right?
06:09 < deoxxa> yeah
06:09 < deoxxa> looks weird
06:09 < superjoe> was really confusing for an hour when I ran into this in my real codebase
06:12 < superjoe> deoxxa, here's the workaround until it's fixed: https://github.com/joyent/node/issues/5216#issuecomment-15881371
06:13 < deoxxa> ohh
06:13 < deoxxa> yeah
06:13 < deoxxa> no i've got that kind of thing all over the place now
06:13 < deoxxa> i have a sink() function i use for that kind of thing
06:14 < deoxxa> function sink() { var s = new stream.Writable(); s._write = function _write(input, encoding, done) { done(); }; return s; }
06:14 < deoxxa> wait
06:14 < deoxxa> no what
06:14 < deoxxa> ohhhhhhh
06:14 < deoxxa> yeah i'm retarded
06:14  * deoxxa should have gotten more sleep last night
06:15 < superjoe> it's 2am here on a workday, but I've almost finished my formidable rewrite with streams2...
06:15  * superjoe thinks it's about time you should be able to stream your multipart uploads to s3
06:17 < deoxxa> you can do that weird chunked stuff
06:17 < superjoe> what's that?
06:17 < deoxxa> where you make multiple uploads
06:18 < superjoe> huh. I tried to get knox and formidable to cooperate but they refused
06:18 < superjoe> so I'm rewriting formidable
06:19 < superjoe> hopefully knox respects proper streams. if not... a PR is coming up for that project
06:31 < deoxxa> superjoe: oh yeah, not sure if it does real node streams
06:31 < deoxxa> superjoe: but there's some thing where you can do partial uploads to s3
06:31 < deoxxa> it's really strange
06:38 < booyaa> has anyone written a tool to look at your deps and see if any of them are passing their tests on travis-ci?
06:38 < booyaa> yes you can have that idea for free
06:39 < booyaa> want to see what the fall out is for an app when i move to v0.10
06:40 < howdynihao_> i think it would be better if you just ran the tests locally than through travis
06:40 <@mbalho> superjoe: wanna see somethin kewl? http://maxogden.github.com/minecraft-mca/ wait for the .mca file to load in web inspector then click on the screen
06:41 < howdynihao_> because the module might not use travis, might only have it for the wrong branch/version, might be wrong
06:41 < booyaa> also what happens if they don't host on travis 
06:41 < booyaa> snap
06:41 < howdynihao_> booyaa: with that being said. itll probably be easier to just run your own project with 0.10 :p
06:41 < howdynihao_> and see if it breaks
06:42 < superjoe> mbalho, I see a blank blue screen
06:42 < superjoe> do I have to surrender my mouse cursor for it to work?
06:42 < booyaa> howdynihao_: very true,
06:42 <@mbalho> superjoe: probably yea, i literally just got it working
06:42 < superjoe> oh cool
06:42 < superjoe> yep that did it
06:43 < superjoe> argh dvorak
06:43 <@mbalho> haha
06:43 < superjoe> that's really cool
06:43 <@mbalho> superjoe: how do you do the chunk parsing in your thing?
06:43 < superjoe> mbalho, through the protocol
06:44 < superjoe> https://github.com/superjoe30/mineflayer/blob/master/lib/plugins/blocks.js
06:44 < ningu> I think a good april fools joke would be to rename travis to providing continuous disintegration
06:44 < booyaa> bit late bro
06:44 < ningu> booyaa: eh?
06:44 < booyaa> you'll have to wait next year
06:44 <@mbalho> superjoe: ahh yea compressedChunkData looks similar to the .mca contents
06:44 < ningu> oh, yeah, I thought of it after
06:45 < howdynihao_> ive had tests run perfectlly fine locally and blow up when travis runs them
06:45 < superjoe> that's hardly surprising
06:46 < ningu> planetnodejs.com is down
06:47 < howdynihao_> why do you need it
06:47 < howdynihao_> you have #node.js
06:49 < howdynihao_> so
06:49 < howdynihao_> you know what was one of the silliest uh i dont know what you would call it, 'guesses'? i had 
06:50 < howdynihao_> back when twitter was new, there was a competing site called pounce
06:50 < howdynihao_> i thought pounce was going to be the winner, haha
06:56 < zaleb> so yesterday I found out 10.2 was there
06:56 < zaleb> and now we have 10.3
06:56 < zaleb> it goes so fast : >
06:57 < superjoe> all bug fixes too
06:58 < howdynihao_> i think thats a good thing
06:58 < zaleb> I agree
06:58 < superjoe> no kidding
06:58 < howdynihao_> i know some people hold off
06:58 < howdynihao_> unless its really urgent
06:58 < zaleb> hmmyeah
06:58 < zaleb> I update our production servers once every two weeks
07:04 < howdynihao_> whats with this 'flat' design trend
07:04 < superjoe> hurray, all tests passed!
07:09 < tylerbre_> howdynihao_ windows metro
07:11 < booyaa> i'm not keen on the metro look, it's too boxy
07:12 < tylerbre_> booyaa but it is "flat"
07:12 < booyaa> too much use of primary colour, but that could be microsoft's look and lack of colour identity. i.e. red/white = gmail
07:12 < cxreg> passcod: you around?
07:13 < zaleb> I think it works nice on windows phone
07:13 < zaleb> not sure 'bout desktip tho
07:13 < tylerbre_> zaleb seems like most windows peeps I know absolutely loathe it
07:14 < zaleb> desktop?
07:14 < zaleb> i can imagine :p
07:15 < tylerbre_> zaleb yeah, desktop
07:15 < garthk> Anyone tried addons? I'd like to adapt one of the blazingly fast no-copy not-entirely-conformant XML parsers for something speed-critical. 
07:16 < ningu> what exactly do you mean by "addons"?
07:17 < tylerbre_> garthk maybe you are referring to amd modules?
07:17 < cxreg> passcod: https://gist.github.com/anonymous/5308457
07:18 < garthk> Well, the Node docs call them "addons". http://nodejs.org/api/addons.html#addons_hello_world
07:18 < cxreg> the method brycebaril pasted here is by far the fastest, and is also deprecated
07:18 < cxreg> poo
07:18 < cxreg> that is, buffer.toString('binary')
07:18 < cxreg> why is that deprecated?
07:27 < sbarcteam> hi guys. I'm learning nodeunit + nodejs tech, and I'm not clear on how to resolve this: http://dpaste.com/1046664/
07:29 < JoshLeaves> sbarcteam: Add this line 18: "module.exports = mymodule;"
07:31 < cxreg> JoshLeaves: doesn't change the fact that private_message is an anonymous function
07:31 < cxreg> im not sure you *can* test it.  if you need to unit test something, name it.
07:31 < JoshLeaves> Not anonymous, private
07:31 < JoshLeaves> And if you really want to test it, you have to export it
07:32 < JoshLeaves> if (process.env.NODE_ENV === 'unit_test') { module.exports = everything; } else { module.exports = mymodule; }
07:33 < ljharb> you shouldn't need to test private things
07:33 < ljharb> alternatively, you could put it in its own little module that the main one requires, and test it that way.
07:34 < JoshLeaves> ljharb: You mean "split everything in modules and submodules Java-style"? :D
07:34 < ljharb> that's not java style. that's node style.
07:35 < ljharb> but yes, each module should ideally export one function, and each module/function should be simple and do as few things as possible.
07:35 < JoshLeaves> Was j/k =)
07:36 < ljharb> :-p
07:36 < JoshLeaves> I know submodules are the best way, I just say "Don't end up with Problem.js, ProblemFactory.js and ProblemFactorySingleton.js" :D
07:38 < [AD]Turbo> hi there
07:52 < Aartsie> Hi all
07:53 < carlcalderon> Hi Aartsie 
07:56 < zaleb> Moin Aartsie 
08:03 < howdynihao_> howdy aartsie
08:04 < zot> I have a lib that uses the request lib underneath, and I want to use sinon to mock error cases; should I be able to overwrite request.prototype.start function?  (cuz so far I can't make it work)
08:11 < sbarcteam> JoshLeaves: AFTER the module has been called ?
08:15 < JoshLeaves> sbarcteam: Tie your module to a variable, then tie that variable to module.exports. IE: "var mymodule = (function(){ return MODULE; }); module.exports = mymodule;
08:18 < randy__> anyone here
08:18 < bigx> hello there! is there any good api/lib in node js to play different sound on each outputs of my soundcard?
08:20 < ningu> bigx: I'd just like for a binding to something like sdl or whatever people use nowadays
08:21 < JoshLeaves> bigx: What about require('fs').createStream('/dev/sound/', function (stream) { }); ?
08:22 < bigx> ningu: seems legit! JoshLeaves: I unfortunately aim windows on this one :(
08:22 < unr3al012> hey guys
08:23 < ningu> I meant "look for" obviously. anyway, I don't know if sdl is the right choice but there should be something out there
08:24 < faceleg> ningu:  you should create a binding module
08:24 < faceleg> it is so much fun you'll love it
08:25 < bigx> haha faceleg
08:26 < JoshLeaves> bigx: More seriously, there already are Node.js bindings to Qt
08:26 < JoshLeaves> You could look into that, I think the Qt API got sound abstractions
08:27 < ningu> huh... are there gui apps written in node?
08:27 < JoshLeaves> Sure: https://github.com/arturadib/node-qt
08:28 < ningu> that's kind of nuts
08:28 < SNE> I currently use express.cookieParser + express.cookieSession  to create sessions for app.VERB operations, how do I address those sessions with socket.io?
08:28 < JoshLeaves> "Node-Qt provides native bindings to the Qt library as a Node.js addon. The focus is on graphics and audio bindings."
08:28 < bigx> i'm looing at this right now, but I suck at c++ stuff, i'll stick with some java on this one
08:29 < ningu> SNE: you don't :) you have to keep track of it yourself I believe
08:29 < SNE> ningu: oh the joy of life! :)
08:29 < ningu> SNE: if you google there are various discussions of this issue
08:29 < faceleg> anyone know of a good C++ linter/intellisense providing addon for ST2?
08:29 < faceleg> yes websites
08:29 < faceleg> i'm on fire
08:29 < faceleg> ugh where are the libuv docs
08:29 < faceleg> api docs I mean
08:29 < faceleg> not "guides"
08:29 < ningu> it's not that hard to tie it together
08:29 < faceleg> herp derp found it
08:29 < faceleg> javascript?
08:29 < faceleg> nodeqt sounds like what you want
08:29 < faceleg> hahaahah bazinga
08:30 < ningu> SNE: maybe someone made a module for it even
08:30 < SNE> ningu: can u give me a link to a good discussion? (I searched for it as well but its a real mess out there :))
08:30 < ningu> SNE: don't know offhand, sorry
08:30 < SNE> ningu: ok np, and thx
08:30 < ningu> faceleg: are you alright? you said like 10 things in one second
08:31 < faceleg> entertainment720
08:31 < faceleg> it's in my blood
08:31 < faceleg> ningu: no I have a stupid issue with my module
08:31 < faceleg> preventing me from pushing my epic commits upon the world
08:31 < ningu> the one you can't remember why you want to use?
08:32 < faceleg> holy crap I think I fixed it
08:32 < faceleg> no I think I remember what I want it for
08:32 < faceleg> haha
08:32 < faceleg> a super awesome world shattering web app bound to get me 10 yachts
08:32 < faceleg> no I fixed it
08:32 < faceleg> wasn't uv_closing some uv_blahs when they should be closed
08:32 < faceleg> herp; derp.
08:33 < ningu> a while back I asked some folks what uv actually stood for
08:33 < faceleg> I bet it crashes in ubuntu now or something
08:33 < ningu> turns out it doesn't really stand for anything
08:33 < SNE> maybe its sitting for something
08:33 < faceleg> oh yeah, I admit more than a passing interest
08:33 < faceleg> great.
08:33 < ningu> it's a fork of libev where ev is short for events and they changed the e to u to mean universal apparently as in: supports windows
08:36 < echoSMILE> Hi. I have something like "return escaped_text.replace( regx, function(var) { otherfunction(function (var) { return foo; }); });" but I always get undefined from it when the foo has the value I want. Where is my mistake?
08:36 < sbarcteam> JoshLeaves: I'm confused at the location you suggest.
08:36 < sbarcteam> Specifically, you said line 18, but line 18 has } )();
08:36 < faceleg> I will continue to believe it stands for unimaginable violence
08:36 < faceleg> what is the best stand-in for plural "you"?
08:37 < ljharb> echoSMILE: don't you have to return "otherfunction()"?
08:38 < zaleb> yes he has to
08:38 < ningu> faceleg: "you"
08:38 < ningu> unless you mean you want it to be unambiguous
08:38 < echoSMILE> ljharb: ok, let me try
08:38 < faceleg> ningu: I just wish En had a better way
08:39 < faceleg> I do know you is both, just other lang have explicit differences between the two. Chinese even has one for "us" that means "us that can hear me righ tnow"
08:42 < JoshLeaves> sbarcteam: After line 18 and after line 19.
08:42 < echoSMILE> ljharb: I got [object Object]
08:44 < superjoe> deoxxa, you're right - there's something funky going on with s3
08:44 < superjoe> I'm getting a socket disconnect even when it looks like I did request.end()
08:44 < deoxxa> superjoe: yeah it's a bit odd
08:44 < superjoe> do you have any more info on this?
08:44 < ljharb> echoSMILE: you're probably converting an object to a string.
08:45 < superjoe> s/disconnect/timeout/
08:45 < SNE> ningu: https://npmjs.org/package/express.io 
08:45 < deoxxa> superjoe: i haven't looked into it at all, just kind of wrote it off as "eh, i'll look at this again in a few months"
08:45 < ningu> SNE: oh, cool
08:46 < echoSMILE> ljharb: inside 'otherfunction()' I only have: return 'string';
08:46 < deoxxa> superjoe: we're not actually using S3 at work, so i haven't had a reason to look into it unfortunately :<
08:47 < superjoe> damn. I think I'm going to have to sleep before I can troubleshoot this
08:48 < superjoe> my brain is toast
08:48 < deoxxa> lol
08:48 < superjoe> anyway, check it: https://github.com/superjoe30/node-multiparty
08:51 < echoSMILE> ljharb: Ok I got it.
08:51 < echoSMILE> tks
08:54 < deoxxa> superjoe: +1 for the name
08:54 < superjoe> it passes all of formidable's tests
08:55 < superjoe> benchmarks at the same speed
08:55 < superjoe> and it's like 2,000 lines less
08:55 < superjoe> ok, only about 500
08:55 < superjoe> should have checked that before talking
08:56 < deoxxa> still, neat!
08:56 < sbarcteam> JoshLeaves: http://dpaste.com/1046722/
08:57 < ningu> superjoe: so can I use this as a drop-in replacement in express? it load the files automatically into req.files
08:57 < ningu> but bodyParser() must be using formidable
08:57 < deoxxa> i made a cool thing today
08:57 < superjoe> ningu, yes bodyParser() uses formidable
08:58 < superjoe> fun fact, you can't turn off temp files
08:58 < ningu> well maybe someone will write a replacement middleware
08:58 < ningu> should be easy enough
08:58 < deoxxa> https://gist.github.com/deoxxa/5308872
08:59 < deoxxa> http://d.pr/i/OQqB
08:59 < superjoe> so if you use express.bodyParser() as middleware for your site, I could spam any of your endpoints with upload requests and create unlimited temp files
08:59 < ningu> superjoe: to be fair any high traffic site will need some sort of rate limiter anyway or other way to control traffic
08:59 < deoxxa> (requires the jetty module to work)
09:00 < ningu> the only site of mine that takes uploads isn't public
09:00 < superjoe> do you have a site that doesn't take uploads, but takes a POST request for a form?
09:00 < superjoe> even just creating a comment?
09:00 < ningu> hmmm
09:01 < superjoe> because if those use bodyParser, then I can use that endpoint to create temp files on your system.
09:01 < superjoe> that's what formidable does
09:01 < ningu> the site I have that takes post requests doesn't use bodyParser
09:01 < superjoe> you should be good then
09:01 < ningu> it takes only json so I just use jsonParser
09:01 < ningu> err
09:01 < ningu> express.json()
09:01 < superjoe> smart man
09:01 < deoxxa> i use jsuck!
09:02 < deoxxa> https://github.com/deoxxa/jsuck :>
09:02 < superjoe> deoxxa, you always use modules with crazy names
09:02 < deoxxa> i love crazy names
09:02 < ningu> the json post's are so small it doesn't matter
09:02 < sbarcteam> here's the correct version: http://pastebin.com/SQtFaQeT
09:02 < SNE> whats the diff between express.session & express.cookieSession ?
09:02 < ningu> what would help me is a streaming json stringifier
09:02 < ningu> they exist but don't do quite what I need
09:02 < deoxxa> ningu: GOT YOU COVERED BRO
09:02 < deoxxa> ningu: https://github.com/deoxxa/jspit
09:02 < ningu> hehe
09:02 < ningu> ok
09:02 < deoxxa> (jsuck + jspit, lol)
09:03 < deoxxa> there's also https://github.com/deoxxa/jlick if you don't want to commit to a full parsejob
09:03 < deoxxa> i'm so immature
09:03 < deoxxa> seriously
09:03 < faceleg> gh
09:03 < faceleg> ugh
09:03 < faceleg> *
09:04 < JoshLeaves> sbarcteam: http://dpaste.com/1046726/
09:04 < faceleg> smart git + github can't handle my 160+ commits being pushed at once
09:04 < echoSMILE> ljharb: the thing is, the returned string don't exists inside the object, btw, the otherfunction() is the request() https://github.com/mikeal/request
09:04 < ningu> deoxxa: so umm... how wouuld you use this exactly?
09:05 < deoxxa> ningu: i (almost literally) do req.pipe(new JSuck()).pipe(application.createStream()).pipe(new JSpit()).pipe(res)
09:05 < deoxxa> ningu: but the stuff i'm dealing with is exclusively newline-delimited json input/output
09:05 < ningu> deoxxa: I'm generating json from an sql query
09:05 < deoxxa> well, you could still use this
09:05 < deoxxa> something like
09:06 < ningu> it's an object with a few properties and the main one is an array with one element for each row
09:06 < ningu> and the db driver emits a 'row' event that I could use but haven't been
09:07 < ningu> I know what all the properties will be before the db query except for the one that says how many results were returned
09:07 < ningu> substack has a module for this too
09:08 < ningu> https://github.com/substack/node-gutter
09:08 < sbarcteam> JoshLeaves: T H A N K    Y O U !!!
09:08 < sbarcteam> :)
09:08 < sbarcteam> COOL!
09:09 < deoxxa> ningu: sorry, housemate came and bugged me for a minute
09:09 < ningu> unfortunately I can't use gutter because it doesn't support streamed strings, only arrays and objects
09:10 < deoxxa> ningu: you could do like `var stringify = new JSpit(); stringify.pipe(res); cursor.on("row", stringify.write.bind(stringify)); cursor.on("end", stringify.end.bind(stringify));' or something
09:10 < ningu> hrm
09:10 < deoxxa> it's kind of pointless to "stream" anything smaller than a single record
09:10 < deoxxa> since stringifying JSON is all synchronous anyway
09:10 < JoshLeaves> sbarcteam: Work your exports better than the quick'n'dirty hack I did and you should be set
09:11 < ningu> deoxxa: right but most of the response actually consists of this results array, it makes sense to stream that but I need to be sure the rest of the object is intact
09:11 < Dv0rak> Hey folks, I suppose this is a noob-friendly forum. So as a complete beginner to Web Development, will you suggest that I should/can learn Node.js? :D
09:12 < ningu> deoxxa: so as far as I see I can't pass an object to write() that is just a key and value for the object 
09:12 < Siyfion> Dv0rak: Can, yes. Should, yes.
09:12 < ningu> but with substack's thingy you can do that
09:13 < ningu> the reason I need to stream a string is because otherwise I have to specify its value before the other streams have completed
09:13 < ningu> but I won't know until the row stream is done how many rows there were
09:13 < Dv0rak> Siyfion: I think I have read somewhere that Node.js is somewhat new so may contain some amount of errors. Is that correct?
09:13 < ningu> so I need to create a stream that sits waiting and then I write the value to it -- actually, a number, not a string :)
09:14 < deoxxa> ningu: so the rest of the data doesn't actually get sent to the client until you've sent that number?
09:14 < ningu> deoxxa: right now it isn't streamed at all
09:14 < ningu> but it's fine to start sending rows right away if I can do it
09:14 < Siyfion> Dv0rak: It's been around for a while now, I'd be surprised if you came across any crippling errors in node now.
09:14 < ningu> deoxxa: the problem is I don't know the final bit that has "resultNum": 63 or whatever until the end
09:14 < Siyfion> Dv0rak: Plus, with a community like this.. Bugs don't stay broke for long ;)
09:15 < deoxxa> ningu: ohhhh, i see what you mean
09:15 < ningu> deoxxa: gutter solves the problem of the other object keys that I *do* know already
09:16 < thrcka> Hey guys, can someone tell me why some packages in npmregistry have tarballs on url:  http://registry.npmjs.org/<modulename>/-/<modulename>-<version>.tgz and some don't?
09:17 < deoxxa> ningu: the way i've gotten around that by just saying "json objects are separated by newlines. deal with it.", and using "content-type: application/json; layout=line-stream", but if you want the response to be a real object, maybe you could just go super lo-fi with it and .write('{"objects":[') ... .write('],"resultNum":' + x + '}');
09:17 < ningu> deoxxa: I'd much rather have the results be one object, it greatly simplifies the api and more really isn't necessary
09:17  * deoxxa nods
09:18 < ningu> I sort of see the wisdom of separating out the results array into subsequent newline-separated results
09:18 < deoxxa> yeah what i'm dealing with is actual streaming data, like there's no real end to the response. kind of like twitter's firehose thing
09:18 < passcod> cxreg: wow. too bad 'binary' is getting deprecated
09:18 < ningu> but... it's just going to get too complex
09:18 < ningu> ah, ok
09:19 < ningu> deoxxa: I just figured since I'm getting the rows as they come in I should make use of that by responding immediately but it's kind of tricky
09:19 < ningu> I could just remove the resultNum thing and let the client deal with it, not the end of the world
09:19 < deoxxa> ningu: you could, with some hackery, make it work both ways
09:20 < ningu> plus for debugging you can turn pretty-print on. I guess what I'd do is just turn off streaming for the debug mode
09:22 < deoxxa> ningu: .write('{"objects":[\n') var first = true; cursor.on("row", function(row) { if (first) { first = false; } else { .write("\n,\n"); } .write(JSON.stringify(row) + "\n"); }); .write("\n"); .write('],"num":' + x + '\n');
09:22 < deoxxa> hahaha
09:22 < deoxxa> i'm a bad person
09:22 < ningu> hehe
09:22 < deoxxa> as long as whoever is consuming it can ignore rows that don't contain valid json
09:22 < deoxxa> that'd work as both streaming and not streaming
09:22 < ningu> pretty-printed json is valid
09:22 < ningu> just not newline-terminated
09:22 < deoxxa> well yeah
09:23 < deoxxa> that's the distinction between jsuck and jlick - one of them does proper token-by-token parsing using clarinet and the other just splits on a specified character and tries to JSON.parse() chunks
09:23 < ningu> deoxxa: ever used msgpack btw? I looked into it but it seems to be not worth it at least in node
09:23 < deoxxa> i've used it in c++
09:24 < deoxxa> gave it a go in node, it did what it said on the tin
09:24 < deoxxa> but JSON is cheap
09:24 < deoxxa> i've been using https://github.com/naomik/burro lately
09:24 < ningu> and in node JSON is actually faster
09:25 < _youjelly> hi ningu 
09:25 < ningu> yeah, burro isn't really suitable for a public api
09:25 < ningu> hello again
09:25 < deoxxa> yeah
09:26 < ningu> I guess the length prefix is also only really necessary for a "real" stream
09:26 < ningu> which is continuously open
09:26 < ningu> whereas I'm dealing with responding to a single http request
09:26 < deoxxa> yeah
09:27 < yug> anyone is here?
09:27 < ningu> deoxxa: anyway it looks like you've gone the full-stream route and don't use things like socket.io
09:28 < yug> is anyone familier with the issues of websockets over port 80 using node.js?
09:28 < deoxxa> correct, ningu
09:28 < ningu> speaking of socket.io...
09:28 < yug> in some networks it does not seem to work
09:29 < superjoe> socket.io is icky
09:29 < superjoe> just use https://github.com/einaros/ws
09:29 < ningu> superjoe: I switched to sockjs recentky
09:30 < ningu> recently*
09:30 < passcod> yug: is that a node.js problem? have you tested websockets/80 using another language/library in the same network?
09:31 < yug> http://websocketstest.com/ I have tried this and got the same result - websocket is not working on port 80
09:32 < yug> and then I read about this :https://github.com/LearnBoost/socket.io/wiki/Socket.IO-and-firewall-software
09:32 < ningu> yug: firewall issue maybe?
09:32 < yug> might be. but not suppose to be. why would the firewall block port 80?
09:33 < ningu> no idea
09:37 < leb> I am doing npm install uglify-js
09:37 < deoxxa> cool story bro
09:37 < leb> I don't get an error but the module isn't showing up
09:37 < leb> any ideas bro?
09:37 < ningu> leb: is it in node_modules?
09:37 < deoxxa> is it in node_modules?
09:37 < deoxxa> oh
09:37 < leb> no
09:38 < leb> npm list shows it
09:38 < leb> I did a search for it
09:38 < JoshLeaves> leb: Shouldn't you install it globally (-g) ?
09:38 < JoshLeaves> Look in node_modules/.bin
09:38 < leb> I am a n00b when it comes to node and npm
09:39 < leb> I didn't install anything else that way and I have a bunch of modules installed
09:39 < leb> hang on 1 sec
09:39 < zaleb> leb
09:39 < zaleb> you should run the npm install in the same dir as your project
09:39 < ningu> I wonder if it seems weird if you come from the uk or australia to think some crucial parts of your OS are in the /bin
09:40 < JoshLeaves> ningu: You mean the /bin(aries) folder?
09:40 < ningu> JoshLeaves: yeah, in british/australian english bin = trash can
09:41 < leb> I think I should install it -g
09:41 < leb> correct?
09:41 < deoxxa> ningu: australian here! /bin doesn't conjure up the image of a trash can for me :P
09:41 < ningu> leb: yes, if you want to run the command rather then load the module
09:42 < JoshLeaves> ningu: I know, but I'm pretty sure someone will /opt out of making a /mnt out of old conventions, especially a fellow /dev person at /home.
09:42 < unflores> WHAT THE SHIT!  you guys have just blown my mind with that bin talk.
09:42 < leb> ok
09:42 < ningu> unflores: how so?
09:42 < leb> thanks
09:42 < leb> appreciate the help
09:42 < ningu> deoxxa: but would you actually call it a trash can?
09:43 < deoxxa> i actually do
09:43 < unflores> b/c if I were a brit, I'd probably be like, "not the best naming scheme"
09:43 < leb> trying to get d3, cube, and cubism working
09:43 < unflores> maybe I'll alias bin to "trash_can"
09:43 < unflores> seems to be inline with some of the stuff I write : D
09:43 < leb> it's "bin" real
09:43 < unflores> too far
09:43 < unflores> you go too far
09:43 < deoxxa> ningu: people mistake me for american/british/random-ethnicities all the time because i don't speak like i'm australian, lel
09:44 < ningu> iirc the people who pick up the trash are the bin men
09:44 < ningu> and a dumpster is a tip
09:44 < ningu> or something associated with it
09:44 < deoxxa> no, no, a dumpster is a dumpster
09:44 < ningu> then what's a tip?
09:44 < passcod> and a tip is a tip
09:44 < deoxxa> a dump is a tip (and vice versa)
09:44 < unflores> just the tip
09:45 < deoxxa> just to see what it feels like
09:45 < ningu> so a tip is the action of putting the rubbish in the dumpster?
09:45 < unflores> that's littering
09:45 < deoxxa> ningu: a tip is like a landfill
09:45 < ningu> oh, ok
09:45 < deoxxa> ningu: like the place where you drive your americamobile filled with fireworks wrappers and spent shotgun shells to get rid of them
09:46 < ningu> deoxxa: yeah, we call it a dump too
09:46 < deoxxa> (i can only assume that's how it works)
09:46 < deoxxa> both terms are acceptable here
09:46 < JoshLeaves> Are we really having a discussion about "Trash bins around the world" in here? x_x
09:47 < deoxxa> anyway, shower + bed for me
09:47  * deoxxa gone
09:47 < ningu> apparently
09:47 < ningu> I was bored
09:47 < asturel> there is no nodejs in debian apt?
09:48 < unflores> sorry joshie
09:48 < zaleb> asturel, no
09:48 < zaleb> just build from source, it easy
09:49 < ningu> I met some people built from source once, could really tell which of them had -O2 on
09:50 < echoSMILE> https://github.com/mikeal/request#super-simple-to-use here how can I return the body without get the object of the function?
09:50 < ningu> echoSMILE: huh?
09:51 < ningu> you can only get the body in the callback
09:51 < asturel> linux binaries isnt ok?
09:51 < echoSMILE> imagine instead of the console.log() I want to return the body inside other function
09:51 < asturel> http://nodejs.org/dist/v0.10.3/node-v0.10.3-linux-x86.tar.gz
09:51 < ningu> echoSMILE: so what's stopping you?
09:52 < echoSMILE> when I return the whole function I get some object and not the body.
09:52 < passcod> that's because you're getting the return of the request() function
09:52 < joshie> sorry for?
09:53 < echoSMILE> passcod: sure, but how I get the body outside the request() ?
09:53 < ningu> echoSMILE: you have to get it inside the callback.
09:53 < ningu> then use it however you want.
09:53 < passcod> you call a function with it or assign it to a var in a higher scope
09:54 < echoSMILE> ningu: what you mean get inside the callback?
09:55 < ningu> the callback is the second argument to request(), in the example function (error, response, body) { ... }
09:55 < echoSMILE> passcod: a function with it how?
09:56 < passcod> echoSMILE: you do realise that request() is asynchronous, right?
09:56 < echoSMILE> passcod: yep
09:56 < echoSMILE> ningu: is inside callback I'm doing the return.
09:56 < ChampS666> whats the matter if I build node and there is no module directory? :o
09:57 < passcod> so you can't return inside the callback and expect to magically get the value back as if it executed synchronously
09:59 < echoSMILE> passcod: sure. so I should make a async function with the request inside and return it? 
09:59 < echoSMILE> I didn't understand very well what I need to do.
10:00 < ningu> echoSMILE: no, you need to call another function, or set a variable in a higher scope, like passcod said
10:00 < passcod> echoSMILE: you cannot return something from a callback. period. no matter how hard you try.
10:01 < echoSMILE> let me try to set a var.
10:02 < echoSMILE> ningu: about call another function, my doubt is, if the function is async, the issue will not be the same?
10:03 < Torsten85> Hey, Is it possible to NOT be redirect to the last page after a successful login?
10:03 < ningu> echoSMILE: http://callbackhell.com/
10:04 < echoSMILE> tks
10:06 < passcod> Torsten85: err, technically, yes, but here's probably not the right channel?
10:07 < ChampS666> whats the matter if I build node and there is no module directory? :o
10:17 < unr3al011> hey
10:22 < ChampS666> the whole node_modules directory is missing :<
10:22 < unflores> tadah
10:23 < unflores> maybe it was just put somewhere weird?  try update.db and locate maybe?
11:17 < ChampS666> hey I've a problem with my node.js modules
11:17 < ChampS666> if I want to start my code 
11:17 < ChampS666> there is an error 
11:18 < ChampS666> Error: Cannot find module '/path/to/my/code.js'
11:18 < ChampS666> don't know why my code should be a module :o
11:22 < gildean> ChampS666: you're requiring something incorrectly
11:24 < zaleb> node_modules can be required with their name, asuming they are installed localy or the folder is in your approot
11:24 < zaleb> the rest requires a relative/absolute path
11:25 < ChampS666> ok but why is node showing that my index.js (my project code) is a module which cannot found
11:26 < zaleb> requier('./index.js')  ??
11:27 < echoSMILE> passcod: the problem I had before, still can't deal with it. take a look the whole code http://pastebin.com/G5NL4Kqg
11:27 < leb> anyone want to look at a few lines of D3 .js code and tell me what's wrong?
11:27 < echoSMILE> how I return then from the function wpapi() to return escaped_text... ?
11:27 < ChampS666> there is no requier('index.js')
11:27 < ChampS666> just requier('net')
11:27 < ChampS666> that's it
11:28 < zaleb> pastbin error + code?
11:28 < leb> http://pastebin.com/jTvzs6Di
11:29 < leb> maybe I should have pasted the whole function
11:29 < leb> but  it complains about a syntax error
11:29 < ChampS666> Error: Cannot find module '/var/www/proggers4you/NuntiusWeb/index.js'
11:29 < leb> I should just go to bed
11:29 < ChampS666>  at Function.Module._resolveFilename (module.js:338:15)
11:30 < ChampS666> so don't know just have a require('net')
11:30 < zaleb> cd /var/www/proggers4you/NuntiusWeb && node index
11:30 < zaleb> ?
11:31 < ChampS666> i'm at this path the whole time
11:31 < leb> i.html:87SyntaxError: Unexpected token '.'
11:32 < leb> at       .call(context.horizon().height(120));
11:32 < zaleb> yeah
11:32 < zaleb> dont terminate with ; at every sentence
11:32 < leb> yea
11:33 < leb> I had something more like that before
11:33 < leb> ok
11:33 < leb> I will figure it out
11:33 < leb> it's just too late
11:33 < leb> thanks for helping
11:35 < echoSMILE> Before somebody told me to call another function or set a variable in a higher scope to use the result of a callback into another function, but I can't deal with it, can someone take a look at the code? http://pastebin.com/G5NL4Kqg
11:36 < zaleb> echoSMILE, you still have a return in your wpapi callback
11:36 < zaleb> this makes no sense
11:36 < echoSMILE> zaleb: yes, this is my original code.
11:37 < echoSMILE> zaleb: my idea was put another return in line 13 and everything works, but ofc things dont work in this way.
11:40 < zaleb> you could pass the var to containt the return value to the callback, and set it there
11:40 < echoSMILE> zaleb: which var?
11:41 < zaleb> well if assuming you do something like var foo = urlify('blaat')
11:41 < zaleb> I mean foo
11:42 < echoSMILE> zaleb: the thing is, the text can have more then 1 url. so the check need to be done inside checkurls() to be the new text to the replace 
11:51 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:56 < Galazy283> Not sure if this is the right channel but is anyone able to assist me with Ford Fulkerson Algorithm in Python Implementation?
12:00 < unflores> python channel maybe?
12:00 < unflores> or the ford fulkerson channel
12:02 < Galazy283> there's a ford fulkerson channel?!
12:03 < Galazy283> Python isn't helpful at all, they don't understand how ford fulkerson works.
12:03 < unflores> I think this is your general problem, with any room you go to
12:04 < unflores> what makes the node room more inclined to know about ford fulkerson blah blah?
12:05 < Galazy283> Eh just trying my luck.
12:06 < unflores> what you might want to do is try implementing it, in whatever language and when you run into an issue with something language specific ask about that.  Because your chances of actually finding someone who actually knows about the alg are pretty slim.  Normally, I just find what I need and implement it, and then abruptly forget the specifics.
12:10 < Galazy283> Yeah I've found the program for python implementation really - my problem is interacting it with the table full of nodes and edges.
12:11 < unflores> see?  just go ask those crazy bastards how to do that.  
12:11 < Galazy283> lol already did and they criticised the python implementation that was found at numerous different sources.
12:12 < Galazy283> not the interaction which I'm having problem with. >.>
13:25 < zaleb> blegh forever-monitor 1.1.0 in NPM has exports.kill = function(pid, killTree, callback) 
13:25 < zaleb> and forever-monitor 1.1.0 in github has exports.kill = function(pid, killTree, signal, callback) 
13:31 < James> Hi, does anyone use netroute module?
13:33 < Guest50392> Anyone?
13:35 < jtc-workstation-> how to utilize a http post from external site to node.js server ? 
13:35 < jtc-workstation-> what should i write in node.js to accept the request ? : /
13:35 < jtc-workstation-> pointers in the right direction gets awarded with jedi status
13:36 < zaleb> try express
13:37 < jtc-workstation-> I'm using express atm
13:37 < zaleb> app.post(url, function(req, ers) { } ); ?
13:37 < Guest50392> var express = require('express'); var app = express(); app.post('//path to resource//', //function to deal with it//);
13:38 < pachet> what do you mean by external site? :[
13:39 < jtc-workstation-> I'm using a device called Twine, now this allows me to set a HTTP request POST, with a query string. So i need to send it to my localhost:port/?query, and make node.js response to that request
13:40 < jtc-workstation-> I think i need to setup node so i can see all activity made to the server somehow, so i can see if it detects any activity
13:40 < Guest50392> var express = require('express'); var app = express(); app.post('//query//', //function to deal with it//);
13:46 < Guest50392> I'm using netroute module to discover my gateway, but I have a very unstable network. This can bring the network down and the module to fail, the netroute module does not offer any exception. There is any way I can catch the error anyway
13:47 < pachet> jtc-workstation: is node itself listening at that port?
13:48 < pachet> or do you have something else acting as a server at that port :[
13:48 < Guest50392> I think the module executes some OS commands to get the gateway
13:48 < Guest50392> when there isnt any it fails
13:50 < durre> I want to build a community and looking for a framework with very high productivity and finished modules to choose from (security, db-access etc). I hear meteor is nice… does node have more frameworks to take a look at?
13:52 < pachet> meteor and community aren't exactly connotative neighbors ;[
13:53 < durre> I'm not familiar with the word connotative
13:55 < rcombs> http://nodejs.org/api/buffer.html#buffer_class_slowbuffer <-- shouldn't "Kb" be "KiB" here?
13:55 < rcombs> "Kb" would be kilobits, yeah?
13:56 < pachet> durre: meteor is kind of at a right angle to the way node open source in general is heading
13:56 < pachet> eg monolithic whupass framework vs cherrypicking modules with highly specific functionality and weaving them together to fit your use case
13:57 < thanpolas> durre would you care for closure-library?
13:58 < zaleb> rcombs, yes
13:59 < durre> pachet: maybe it's not the "node way". but rails & play! framework are doing just that. I'm fine with either way
14:00 < pachet> it boils down to preference
14:00 < pachet> i prefer the feeling of safety in numbers
14:01 < pachet> or safety in biodiversification would be more apt
14:01 < durre> thanpolas: nah, not at the moment. I'm doing scala development at my daytime job… I'm looking for something other than functional programming for recreational programming :)
14:02 < thanpolas> closure is 100% OO, but it's also more low level than what you might need
14:02 < durre> thanpolas: ahh, sorry. closure…. I read clojure :)
14:02 < thanpolas> durre, on the other hand, there are no "high level" frameworks
14:03 < thanpolas> durre closureplease.com
14:07 < harryhcs> hi there! how do I get the referring server host name that a post is coming from
14:07 < harryhcs> ?
14:07 < harryhcs> in the post request
14:08 < JoshLeaves> req.headers['referer']
14:12 < sirkitree> Thursday Thrash! http://turntable.fm/lullabot
14:17 < harryhcs> ah, thanks!
14:26 < harryhcs> is there a way to get the referer domain only, with you the whole url?
14:27 < harryhcs> i can slice about and get it, just wondering
14:30 < timoxley> harryhcs if you're using express: req.get('referrer');
14:30 < harryhcs> ah nice, I am
14:30 < harryhcs> great stuff
14:31 < timoxley> harryhcs for more info https://github.com/visionmedia/express/blob/master/lib/request.js#L22
14:32 < harryhcs> timoxley, thanks for that
14:32 < timoxley> harryhcs https://github.com/visionmedia/express/blob/master/test/req.get.js#L22
14:32 < timoxley> harryhcs np
14:34 < Skeeter-> Hello, is there a way to sync 2 node.js. 1 using mysql as the data backend and the other sqlite or sth else?
14:35 < J4s0n> Hi can I set timeout option to http.get()
14:37 < cicoder> anyone got advise or sample code on what is the best way to record dynamic user activities in a gamification platform?  user => liked => post || user => sent => gift => holly
14:37 < cicoder> im doing it in mongoosejs
14:37 < spencera> j4s0n: You could call the returned request's abort() after a timeout  http://nodejs.org/api/http.html#http_request_abort
14:38 < spencera> J4s0n: missed this http://nodejs.org/api/http.html#http_request_settimeout_timeout_callback
14:38 < J4s0n> spencera: I've found this http://stackoverflow.com/questions/12800357/including-timeout-in-nodejs-http-get-while-getting-large-number-of-image-downloa 
14:39 < J4s0n> spencera: thanks!
14:39 < spencera> nice
14:39 < spencera> for sure
14:45 < timoxley> cicoder that's a pretty big question
14:46 < cicoder> it is. just need a push in the right direction - seeking advise (am currently looking at this:http://www.slideshare.net/danmckinley/etsy-activity-feeds-architecture)
14:47 < timoxley> cicoder it's going to be slow as fuck if you store everything as a reference
14:47 < cicoder> what do you suggest timoxley
14:47 < timoxley> cicoder might be easiest to just store exactly what you want
14:47 < cicoder> direct information instead of reference.
14:47 < timoxley> cicoder yes
14:48 < cicoder> what if Keivn changes his name?
14:48 < harryhcs> timoxley,req.get("referee") returns null in post
14:48 < timoxley> cicoder how often is that going to happen
14:48 < timoxley> cicoder when was the last time you changed your name?
14:48 < cicoder> fair enough.
14:48 < cicoder> lol.
14:48 < timoxley> and how important is it that the log reflects that
14:48 < timoxley> cicoder if it really is important, run a batch job to update it
14:48 < cicoder> hrm. I guess I can include the ID as a field and upon changing their name, it goes into the activities table and updates it?
14:49 < cicoder> lol. timoxley same idea
14:49 < timoxley> cicoder yep
14:49 < cicoder> thanks :)
14:49 < harryhcs> timoxley,undefined, not null
14:49 < cicoder> thanks :) timoxley
14:49 < timoxley> harryhcs "referee" ?
14:49 < harryhcs> referer
14:50 < timoxley> harryhcs possible the referrer header isn't set?
14:50 < harryhcs> timoxley, why would it not be set?
14:50 < harryhcs> its a post form a server to mine
14:51 < timoxley> harryhcs perhaps you're not looking for referrer
14:51 < timoxley> harryhcs "When visiting a webpage, the referrer or referring page is the URL of the previous webpage from which a link was followed."
14:51 < timoxley> harryhcs you may be looking for the host
14:51 < timoxley> harryhcs http://expressjs.com/api.html#req.host
14:52 < timoxley> cicoder good book on this topic: http://www.amazon.com/50-Tips-Tricks-MongoDB-Developers/dp/1449304613
14:52 < cicoder> thanks timoxley
14:54 < harryhcs> timoxley, host would be my own server name
14:54 < harryhcs> let me readup a but
14:54 < timoxley> harryhcs req.host
14:55 < timoxley> actually
14:55 < timoxley> you might be right
14:55 < timoxley> rtfm
14:55 < timoxley> harryhcs http://expressjs.com/api.html
14:55 < timoxley> it's in there somewhere
14:55 < harryhcs> shweet
14:57 < nathan7> Hey timoxley, 'sup?
14:58 < timoxley> hello nathan7. I'm eating a sandwich
14:58 < nathan7> Excellent.
14:59 < timoxley> nathan7 how about you
15:00 < nathan7> timoxley: doing ridiculous things with jq
15:01 < cxreg> passcod: an updated one: https://gist.github.com/cxreg/5311075
15:01 < cxreg> this one is interesting because the broken loop is as fast as a single loop, and goes back to the event loop every ~2.5ms
15:01 < cxreg> making it probably my preferred one
15:01 < timoxley> nathan7 as in http://stedolan.github.com/jq/ or jquery
15:02 < nathan7> timoxley: the former
15:02 < timoxley> cool
15:02 < nathan7> timoxley: I'm not getting near jQuery q=
15:02 < timoxley> nathan7 that's for the best
15:04 < nathan7> timoxley: [=
15:09  * mscdex shakes a fist at empty exception messages
15:13 < divanvisagie> This is the last place i want to see talk of jQuery
15:18 < spobat> hi, any idea about that? :S http://ideone.com/pDa38N
15:20 < cborg> guys what's the nicest lib for scraping webpages w/ node?
15:21 < mikeal> i use cheerio
15:21 < mikeal> w/ request, of course
15:21 < cborg> mikeal request to pull the html cheerio to extract what you want?
15:21 < mikeal> yup
15:22 < cborg> mikeal thanks :-)
15:22 < divanvisagie> spobat, what exactly are you trying to do there?
15:22 < mikeal> cheerio is seriously awesome :)
15:22 < spobat> divanvisagie, I think I got it.
15:22 < spobat> a `new` before `function` did it :D
15:22 < spobat> trying to do some very crazy js stuff
15:24 <@isaacs> monokrome: ping
15:24 <@isaacs> monokrome: how is npm misbehaving?
15:30 < cborg> mikeal trying to scrap a site that requires js to be 'enabled' - presumably request isn't designed for this use case?
15:31 < mikeal> i don't know anyone that does that well
15:31 < mikeal> maybe phantomjs
15:31 <@isaacs> ircretary: tell niggler Are you still interested in doing this? https://github.com/joyent/node/pull/5041#issuecomment-15539865
15:31 < ircretary> isaacs: I'll be sure to tell niggler
15:32 <@isaacs> cborg: request does not run javascript of the thigns you request, no.
15:32 <@isaacs> cborg: request is like curl in javascript, not like a web browser in javascript.
15:33 < smdahlen> cl
15:33 < cborg> isaacs understood - so what're my options?
15:34 <@isaacs> cborg: jsdom, i guess?
15:34 <@isaacs> cborg: phantomjss
15:35 <@isaacs> stuff like that
15:35 <@isaacs> cborg: there is not a really air-tight "just like a browser" implementation in node that isn't at least in some ways terrible.
15:37 < cborg> isaacs roger that
15:40 < pachet> there isn't a browser that isnt in some ways terrible :[
15:43 <@isaacs> pachet: true that :)
15:43 <@isaacs> pachet: to clarify, there's no "just like a browser" impl in node that isn't terrible in some ways that browsers are not also terrible :)
15:43 <@isaacs> pachet: one of the ways that it can be terrible is by NOT being terrible in a way that browsers ARE terrible ;)
15:43 <@isaacs> software is hard.
15:44 < masch> Hi guys. I have a ~20 LoC script that runs on my server and after some hours it just starts consuming 100% CPU load and doesn't react to sockets anymore. after restarting the node process, everything works fine for some hours until .. "boom", heres the code: http://pastebin.com/iKcrWgC0  reti is just a simple redis wrapper that wrapps zadd and zrangebyscore, no magic involved
15:49 < cicoder> timoxley: found this, https://github.com/ciberch/activity-streams-mongoose
15:50 < timoxley> cicoder looks abandoned
15:51 < timoxley> cicoder if it works for you, go for it. with these things, chances are you'll need to modify it heavily though
15:52 < cicoder> timoxley: agreed, it's a little more complex then what I need. :)
15:52 < timoxley> cicoder for now, why not just push some html into redis that does what you need
15:52 < judu> Hello, I'm trying to build node.js from sources (the 10.3 version). Do I really need to use the embedded v8 engine?
15:52 < timoxley> cicoder in fact, why not just push it into a file
15:52 < timoxley> cicoder this is basically just a log
15:52 < cicoder> true.
15:52 < divanvisagie> judu: I just use nvm to download and install versions
15:52 < timoxley> cicoder keep it simple until you definitely need it
15:53 < timoxley> judu why not?
15:53 < timoxley> judu what would you do otherwise
15:56 < timoxley> masch net.createServer returns a connection listener
15:56 < judu> timoxley: I already have v8 on my system. So I would like to use this (vanilla) one. But if you say to me that the one that's in the lib dir is patched for node, I won't search further.
15:56 < timoxley> masch so every time someone connects, you're adding a listener to the client
15:56 < masch> ohhh
15:57 < timoxley> masch ohhh
15:57 < masch> thats not clever, i see
15:57 < timoxley> :D
15:57 < adam___> Hi #node.js. I'd like to run different node projects with different node.js versions. Is there a setup where I could just run "node app.js" and the version of node used will be automatic based on the engines in package.json. Or should I be thiking along the lines of doing a "nave use 0.8.19" switch each time before I even execute node?
15:57 < timoxley> adam___ the latter
15:57 < timoxley> adam___ you could put that nave stuff in a makefile
15:58 < judu> adam___: or write a wrapper :)
15:58 < timoxley> or that
15:58 < adam___> ok - makes sense (it's kind of how the command line works I guess). Just thought it would be neat for node to chose it's version based on the package.json file. (A bit like Heroku does it)
15:58 < dukedave> Hmm, what's a good routing library for a newbie? I just want to be able to match paths to functions, nothing fancy or heavy
15:59 < judu> adam___: the problem is that node does not care about package.json. npm does.
16:00 < timoxley> dukedave I'd use express until you outgrow it
16:00 < adam___> judu - good point
16:00 < judu> The other problem is that there are (at least) two version managers for node
16:00 < judu> So node should first find the version manager then use it.
16:00 < dukedave> timoxley, ah yes, I've seen that come up a few times
16:01 < dukedave> I'll use that then
16:01 < dukedave> timoxley, can I use it 'lightly', i.e. without generating an app?
16:02 < dukedave> Or is that a path to madness?
16:02 < adam___> judu: I see. I guess I've just got lazy with Heroku wrapping node.js with some automatic version management and need to do it for myself on my dev machine
16:02 < judu> Oh, and btw, I'm not sure that a nave wrapper would work, because last time I checked, nave creates a subshell
16:02 < nathan7> Yep, it does
16:02 < judu> adam___: or try http://nodejs-cloud.com/ ;)
16:03 < adam___> but "nave use x.x.x; node app.js" would work wouldn't it?
16:03 < judu> So, about nave : I'm not sure that "nave use 0.10 && node app.js" will work
16:03 < timoxley> dukedave I don't think so. It's pretty light. I know someone extracted the router somewhere. There's also flatiron/director
16:04 < judu> because node app.js won't be started in the nave subshell.
16:04 < timoxley> dukedave I find I usually need the rest of the express stuff pretty quickly though
16:04 < judu> but, try it to be sure.
16:04 < dukedave> timoxley, okay thanks, it looks good acutally
16:05 < judu> (adam___: if it does not work, use nvm. If it does work, be happy and use nave ;))
16:06 < adam___> timoxley, judu, thanks for your help
16:10 < echoSMILE> I can't figure out this. In this code http://pastebin.com/G5NL4Kqg on line 19 I have in a wrong way the return. Can someone tell me how can I use the 'body' from the callback of the request() inside checkUrls() ?
16:10 < masch> timoxley: the problem was much easier (and more stupid). I never closed the client sockets...
16:11 < timoxley> masch cool
16:11 < masch> timoxley: i must be drunk m(
16:18 < SmokingSlim> zup masters, im trying to use a static dirname with express but i cant get it to work when trying to call an app.get('/test/:text', function(req,res)) function
16:19 < SmokingSlim> this is how i've setup my app.js with app.use('/index.html', express.static(__dirname + '/index.html'))
16:21 < gildean> SmokingSlim: that's not enough to give any solutions, we'd need to see your app.js
16:22 < nateener> Hello, I'm looking for resources on how to implement peer-to-peer style connections using Node.js for a multiplayer game.  We want to use a peer-to-peer connection to let players connect directly to each other so that we can avoid having to run a server.  Is this possible?
16:22 < SmokingSlim> http://pastebin.com/Gun0kJp8
16:22 < SmokingSlim> nateener sockets.io ?
16:22 < timoxley> SmokingSlim I'm pretty sure that's not how you use static
16:23 < gaf> peer-to-peer is no good. authority server is the way to go
16:23 < timoxley> SmokingSlim specifically the '/index.html'  in the app.use
16:23 < gaf> nateener
16:23 < gkatsev> nateener: 1) if you have a brand new browser, you can implement direct p2p, via WebRTC's data channel. Otherwise, you can use something like socketio and shuttle everything throughl
16:24 < gkatsev> s/otherwise/2)/  lol
16:24 < nateener> I was under the impression that sockets also required a server, is this not the case?
16:25 < gildean> SmokingSlim: you should put the static files into a dir of their own and change the static call to: app.use(express.static(__dirname + '/staticdir');
16:25 < timoxley> SmokingSlim https://github.com/senchalabs/connect/blob/master/test/static.js#L289
16:25 < gaf> you need a server, perr-to-perr games is a mess to sync
16:25 < gaf> unless, your game is ok for huge lags, etc
16:25 < gkatsev> webrtc allows you to have direct p2p, but you probably need a server to handle the handoff
16:25 < gildean> SmokingSlim: also put the static middleware below your other routes, or else every req goes through it first (unnecessary check)
16:26 < nateener> @gaf the game is lightweight and designed for mobile, we were thinking that very little information would actually have to be passed around, just player position and state
16:29 < SmokingSlim> yeeee.... that didn't seem to work at all...
16:29 < gaf> nateener, mm, i see...i'm learning also about the subject
16:30 < gaf> proably if you have a prototype of the engine, other people could give you a better opinion
16:32 < gkatsev> nateener: you can't get rid of a server completely, but you can minimize the amount of webservers you need. Unfortunately, seems like webrtc data channel isn't an option for you currently.
16:33 < nateener> @gkatsev is there a way I can just use one of the player's devices as the server?
16:33 < gkatsev> nateener: nope
16:34 < gkatsev> nateener: not without having them download and install and run an app or w/e.
16:34 < nateener> @gkatsev you mean a secondary app?  Players would have to download the game anyway....
16:35 < gkatsev> nateener: ah, if it's an app you are writing you could probably do something
16:35 < gaf> not to mention you will always need to validate something, to prevent cheating, so you need the server anyway in the end
16:35 < gkatsev> in which case why are you asking in the #node.js channel? :P
16:36 < gaf> you can try #gamedev
16:38 < nateener> @gaf I was trying to implement it with node, but I'll head over to #gamedev and ask around.  Thanks for the info.
16:38 < gaf> np
16:38 < jpotts> Anyone have issues with the each node_module ? Her is my problem http://pastebin.com/m61BMW0D
16:38 < jpotts> here*
16:48 < syncan> hola
16:52 < perlitch> is there a way to make the connection process for websockets synchronous?
16:52 < perlitch> not socket.io
16:52 < perlitch> just vanilla WebSocket
16:52 < gkatsev> why would you want to do that?
16:53 <@mbalho> perlitch: use a callback
16:53 < perlitch> widgets in my app depend on the connection being open
16:53 < gkatsev> also, I'm not sure you could without changing the way node works
16:53 < syncan> can you do like a long poll w/ a callback?
16:54 < perlitch> yea but i'd just use the onopen property
16:54 < willwh> why not socket.io?
16:54 < perlitch> so i guess just start the app when the connection is made
16:54 < willwh> :)
16:54 < nsm> perlitch: can you delay your widgets until the connection is done?
16:54 < nsm> i mean have them put stuff in a queue
16:54 < perlitch> nsm: i was thinking that
16:54 < perlitch> like with a promise or something
16:55 < perlitch> willwh: project specs :-/
16:55 < syncan> make it fold some proteins
16:55 < perlitch> if it were up to me, i'd use socketio
16:55 < perlitch> syncan: oh i get it. sarcasm.
16:56 < perlitch> :D
16:56 < syncan> ;)
16:57 < syncan> what all are you waiting for on initialization with the widget?
16:59 < perlitch> just the ws connection. im actually running in to the problem in my test suite. inside of the setup function i am opening the ws connection, then inside the tests, this.ws.send("anything") is failing because the connection hasnt been established
17:01 < syncan> heh, i wonder if it's the same problem i was trying a fix out on yesterday in a fork
17:01 < perlitch> i am making a "Datasource" wrapper class for the websocket… oh hm maybe i can make a promise in the constructor for the connection establishment, then if a ws method is called on the wrapper, it checks if the connection is established; if it is, it just calls ws.send(), otherwise it just gets added to promise.done() 
17:07 < syncan> btw, not socket.io? :)
17:08 < syncan> hehe
17:08 < syncan> but that sounds reasonable to me
17:23 < innociv_> What is the best way to compare two sockets?  I'm seeing that if I change something on a socket, it may no longer match
17:25 < innociv_> nvm
17:26 < syncan> length?
17:26 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:26 < perlitch> syncan: the deferred method worked like a charm
17:27 < syncan> sweet
17:32 < syncan> perlitch: what type of widget are you using?
17:33 < syncan> eg. library
17:33 < perlitch> mostly rolling my own but they are written with backbone
17:33 < perlitch> i just registered tabled with npm which is a gmail-esque table
17:34 < perlitch> backed by a collection
17:34 < perlitch> that updates as models get updated blah blah blah
17:34 < syncan> had you ever used YUI prior to that?
17:34 < syncan> and very cool
17:35 < perlitch> man im bad at determining if something is sarcasm. ive heard nothing but bad things about YUI
17:35 < syncan> completely serious on that one
17:35 < perlitch> even my friend whose the lead at yahoo news hates it but is forced to use it
17:36 < syncan> i've heard bad stuff too
17:36 < JohnMcLear> YUI dropping in popularity, severly
17:36 < syncan> i look at it and i like the way it looks
17:36 < perlitch> really?
17:36 < JohnMcLear> I can't remember where I read that so I can't provide a source
17:36 < syncan> but i've just steered away due to people's hands on experience
17:37 < perlitch> apparently it doesnt take advantage of prototypal inheritance, or so i believe
17:37 < syncan> yeah, i like the widget construct; it reminds me of QT - that probably sounds odd
17:37 < perlitch> the way my buddy described it was "started off as a good idea, then went horribly wrong"
17:37 < syncan> but it also looks pretty cumbersome so
17:38 < perlitch> hm unfortunately QT was a bit before my time as a developer 
17:38 < perlitch> im a late bloomer, what can i say
17:40 < perlitch> im hoping that a standard protocol for writing reusable backbone UI components emerges
17:40 < perlitch> analogous to jquery plugins
17:41 < syncan> that's what i actually want to do
17:43 < perlitch> tabled was my second try at that
17:43 < syncan> i've been thinking about the amount on dependency on backbone, and if it would be worth abstracting away into more of an interface design
17:43 < syncan> and what i really mean is just more of a mediator/signal middleware bit
17:44 < perlitch> yea that sounds about right
17:44 < nathan7> syncan: check out component
17:44 < syncan> cool
17:44 < nathan7> syncan: https://github.com/component/component/wiki/Components
17:44 < nathan7> The eventual goal of components is that you use only the pieces that you need, not large libraries like jQuery or underscore, these should be application-level dependencies, if used at all. However if you must use them for now, design your APIs in such a way that these are merely implementation details, for example $(selector).mylibrary(options) is not a good choice, so that they can be phased out. Try your best to create components everyone may ...
17:44 < nathan7> ... use, then create backbone-<name> based on that code when possible, otherwise the community will remain fragmented.
17:45 < syncan> apparently i have; i've starred it
17:45 < syncan> ah yes
17:46 < syncan> i thought this was a really great initiative 
17:46 < perlitch> i think i've seen this too
17:48 < syncan> nathan7: i completely agree with that philosophy
17:48 < nathan7> syncan: [=
17:49 < syncan> nathan7: it's a bit like aspect oriented
17:49 < syncan> imo
17:50 < nathan7> somewhat
17:50 < syncan> obviously not cross-cutting into each other so much
17:50 < syncan> but when you compare this kind of "anti-framework" to others
17:50 < unr3al011> syncan: pm?
17:52 < syncan> unr3al011: heya
17:54 < syncan> nathan7: how do you think something like component and npm distinguish themselves? or would?
17:54 < nathan7> syncan: they're orthogonal
17:54 < nathan7> syncan: arguably npm should be able to fill this role
17:54 < nathan7> syncan: and it does, with browserify
17:55 < nathan7> syncan: but CSS isn't really happening with npm
17:55 < syncan> that's kind of what i thought
17:55 < nathan7> syncan: and the clean divide between the browser-side and the server-side is lacking
17:55 < nathan7> syncan: I have a bunch of generic modules, I have a package.json and a component.json
17:56 < EvanCarroll> people who complain Node is hard to debug, have never debugged a Perl/POE app.
17:57 < syncan> nathan7: that divide can be particularly challenging in the node domain as well
17:57 < syncan> obviously
17:57 < nathan7> syncan: hm?
17:57 < nathan7> syncan: npm is full of clientside
17:58 < nathan7> syncan: the component ecosystem appeals, however
17:58 < syncan> oh i know
17:59 < syncan> i just saying that node/js is a breed of potentially blurred and messy lines
17:59 < syncan> i suppose java isn't too far off though
18:00 < syncan> oh speaking of which ..
18:00 < syncan> what about something like Maven
18:01 < nathan7> syncan: I try to accomodate everyone, I have package.json and component.json for all clientside and universal stuff
18:02 < JoshLeaves> nathan7: What is component.json used for? Oo
18:02 < syncan> yeah, i think the set up is great
18:03 < nathan7> JoshLeaves: for component
18:09 < syncan> nathan7: two DI packages. one of them 404s :)
18:09 < nathan7> syncan: DI?
18:09 < syncan> dependency injection
18:10 < syncan> are you familiar with DI at all?
18:12 < nathan7> syncan: not very
18:12 < nathan7> syncan: never wrote Java
18:12 < nathan7> syncan: well, not for fun
18:12 < syncan> it's not fun
18:13 < syncan> i made people write it for me
18:13 < syncan> but
18:13 < syncan> did you write the preface on the component page?
18:13 < txdv> use scala!
18:13 < syncan> i'm assuming so
18:14 < nathan7> syncan: no, TJ did
18:14 < syncan> ah
18:15 <@isaacbw> DI isn't java-specific
18:15 < syncan> nope
18:15 < syncan> though it's often paired with it
18:15 <@isaacbw> it's actually a very nice pattern 
18:16 < syncan> i've created my own for AS3
18:16 < syncan> even though they have swift suspenders and such
18:16 < syncan> DI and Reflection
18:16 < syncan> are both great
18:16 < syncan> IMO
18:16 < syncan> control how much decoupling, very testable
18:17 < nathan7> isaacbw: it's not too necessary in JS
18:17 < syncan> Nathan7: well the reason I brought it up ..
18:17 < syncan> i read the components page .. and look at NPM on the whole
18:17 < syncan> the whole philosophy
18:18 < syncan> artifact version management
18:18 < nathan7> small components forming a larger program
18:18 < syncan> yeah
18:18 < syncan> so take a look at Apache Maven
18:18 < syncan> it aligns with NPM quite a lot
18:18 < syncan> Maven, Ivy
18:18 < nathan7> As the Zen of Python says: Complex is better than complicated.
18:19 < syncan> artifact management
18:19 <@isaacbw> Ivy and Maven make Java less horrible
18:19 < syncan> and stable builds with recursive or "cyclic" dependencies
18:19 < syncan> isaacbw: exactly
18:20 < dukedave> I seem to be passing a MongoDB client around a lot in my 'new to node' code, it feels like an anti-pattern? :
18:21 < preyalone> How could I define my JSLint settings in a file separate from my main code? Something like ~/.jslint.js, or ./jslint-settings.js
18:21 < syncan> heck, a pom.xml gives hints of package.json
18:21 < syncan> :)
18:23 < syncan> incidentally, i installed IntelliJ IDEA for the first time ever yesterday
18:23 < syncan> so I rigged it up to work with NPM and project.json
18:24 <@isaacbw> haha
18:24 <@isaacbw> nice
18:24 < syncan> hehe
18:26 < syncan> preyalone: you could have it as a global install, but i'm not sure if you refer to your main code as project or other global installs
18:27 < preyalone> syncan: Yes, I've installed jslint globally so that the jslint binary is always available in PATH.
18:30 < robinson_k> hey
18:32 < robinson_k> i decided to check in my node modules for a deployed website, like isaacs suggest at npm-www, but i use one module (Mongoose) which has a native c++ extension
18:32 < robinson_k> as i am using osx and the deployment target is smartOS this would get me into trouble, or am i wrong?
18:34 < nooga> what's the most trendy promise lib nowadays?
18:35 <@mbalho> callbacks
18:36 < scalatron> What is the best way to test an express app with authenticated routes? I tried supertest but can not find a good way to do a login before each request in the mocha tests.
18:36 < syncan> robinson_k: i've compiled mongoose with brew
18:37 < syncan> nooga: hollaback.js
18:37 < syncan> i just made that up, but now i have to make it 
18:38 < syncan> or pretend i did
18:40 < syncan> never mind, it exists and it's an event emitter
18:40 < nathan7> nooga: I've been using then/promise
18:41 < nathan7> nooga: it provides promises, nothing more
18:41 <@isaacbw> Q is the only promise library you should ever use
18:41 < syncan> sounds like a lot of people i know
18:44 < syncan> issacbw: i was wondering that myself actually. good to know
18:44 < nathan7> isaacbw: I've just been building on top of bare promises and writing little utility functions to compose them further
18:45 < syncan> looks very twisted inspired
18:45 < syncan> i love twisted
18:45 < Domenic__> did someone say Q
18:45 < nathan7> Q seems like a utility grab bag
18:45 < nathan7> Ohai Domenic__ 
18:45 < Domenic__> Q's only drawback right now is perf, which we are working on
18:46 < syncan> is that due to the nextTick update?
18:46 < monokrome> isaacs: Hey. Just saw your ping. I am confused about an NPM thing. Either there is some caching issue, or I'm confused.
18:46 <@isaacs> monokrome: k, what's the issue?
18:46 < monokrome> on http://registry.npmjs.org/json-brunch/0.0.0
18:47 < monokrome> the tar.gz file has a lib directory in it, but `npm install json-brunch` doesn't end up with one in node_modules/json-brunch
18:47 < nathan7> npm cache clean, retry
18:47 < monokrome> Sorry, the package is inform-shared
18:47 < monokrome> not json-brunch, mixing things up here
18:47 < monokrome> on http://registry.npmjs.org/inform-shared/0.0.0
18:47 < nathan7> Either way
18:47 < nathan7> Can you see if a cache clean clears it up?
18:48 < monokrome> I tried that. It doesn't make a difference. This also occurs on TravisCI
18:48 < nathan7> Mhm
18:48 < nathan7> Okay
18:48 < syncan> n blew up my NPM yesterday
18:48 <@isaacbw> nathan7: does the library you use catch thrown errors as rejections?
18:48 < monokrome> I also rm -rf ~/.npm to make sure that I wasn't using npm cache wrong
18:48 < nathan7> isaacbw: Of course
18:49 < nathan7> isaacbw: https://github.com/then/promise
18:49 < Domenic__> syncan: no it's due to Q having lots of features, especially long stack traces, but also some internal message architecture to support e.g. promises for remote objects
18:49 <@isaacbw> ah, cool
18:49 < monokrome> isaacbw, nathan7: The source to the project is at https://github.com/informjs/inform-shared
18:49 < nathan7> new Promise(function(resolve, reject) { /* ...*/ }) and .then is the only API it has
18:50 <@isaacbw> I'll take a closer look at it
18:50 < monokrome> isaacs: ^
18:50 < monokrome> sorry for the out-of-context mention, isaacbw 
18:51 <@isaacbw> haha, no worries. That's really the only reason I'm an op
18:51 <@isaacbw> is so I get the out-of-context pings instead of the other way around
18:51 < monokrome> rofl
18:52 < herokudevacct> got a fresh Express install.  calling "next()" in a route handler returns an error that next is not defined. that makes no sense to me, and the google doesn't have meaningful answers (yet). 
18:52 < syncan> Domenic__: yeah was just checking out the code
18:52 <@isaacs> monokrome: i tricked isaacbw to take those hits, since he's actually looking at irc a bit more often than i am :)
18:52 < herokudevacct> here's the code: app.get('/foo', function(req,res){ next(); });
18:52 < syncan> Domenic__: very good stuff
18:52 < herokudevacct> here's the error: 500 ReferenceError: next is not defined
18:52 < herokudevacct> I must be missing something very obvious
18:53 < monokrome> :}
18:53 < monokrome> isaacs: Any ideas on why npm would be either caching that tar.gz wrong, or not including lib in the final result?
18:53 < Domenic__> syncan: thanks. honestly i think the code is a bit of a mess by now, but it's been a tradeoff to get adoption. e.g. one file with UMD-style wrappers and such instead of modularizing.
18:54 <@isaacbw> herokudevacct: app.get('/foo', function(req, res, next){ next(); });
18:54 < syncan> Domenic__: i can definitely see where there might be stack issues, of course. especially if someone is just using it without any idea of its internals
18:54 <@isaacs> monokrome: do you have an example that *doesn't* depend on zmq?
18:54 <@isaacs> ../binding.cc:28:17: warning: zmq.h: No such file or directory
18:54 <@isaacs> monokrome: i'd rather not have to install new binary things just to debug this for you
18:55 < monokrome> one moment
18:55 < monokrome> trying to find one
18:55 <@isaacs> monokrome: seems like i get the right things in the tarball: https://gist.github.com/5313072
18:55 <@isaacs> monokrome: how are you installing it?
18:55 < monokrome> Yeah, the tarball is right but when I `npm install` the lib folder is missing
18:55 <@isaacs> monokrome: k, well, that's strange.
18:55 < monokrome> As a dependency for this:https://github.com/informjs/inform-daemon
18:55 <@isaacs> monokrome: how are you installing it?
18:56 < nathan7> Domenic__: there's the browserify UMD wrapper thing
18:56 < monokrome> Just running `npm install` in that packge
18:56 <@isaacs> monokrome: > inform-daemon@0.0.0 preinstall /Users/isaacs/dev/js/x/node_modules/inform-daemon
18:56 <@isaacs> > make
18:56 <@isaacs> mkdir -p "lib/informd"
18:56 <@isaacs> coffee -o lib/informd -c src/
18:56 <@isaacs> make: coffee: No such file or directory
18:56 <@isaacs> make: *** [all] Error 1
18:56 < Domenic__> nathan7: yeah but then people can't just grab q.js from GitHub and go running
18:56 <@isaacs> monokrome: that package is incorrect, i'm afraid.
18:56 < nathan7> Domenic__: that's fine, sort a build
18:56 < nathan7> oh jesus
18:57 < monokrome> isaacs: Yeah, I want to convert that part to JS. It error'd because you haven't done `npm install` and so coffee doesn't exist, however
18:57 <@isaacs> monokrome: exactly.  that's what i mean by "incorrect"
18:57 < monokrome> The make generates the `lib` folder that's in the tar.gz file
18:57 <@isaacs> monokrome: it is not installable.
18:57 <@isaacs> monokrome: scripts.install will disappear eventually.
18:57 < monokrome> It uses prepublish
18:58 <@isaacs> monokrome: it didn't when you published it..
18:58 < monokrome> Yeah, it did. prepublished made the lib directory which is in npm's tar.gz file
18:58 <@isaacs> oh, well... it also has a preinstall
18:58 <@isaacs> which obv fails.
18:58 < monokrome> I'll fix that
18:58 <@isaacs> kk
18:58 < monokrome> I meant to get rid of the install when I added the preinstall
18:59 < monokrome> hmm
18:59 < monokrome> There's no install script in the package.json
19:00 < monokrome> This is on inform-shared or json-brunch?
19:00 <@isaacs> inform-daemon
19:01 <@isaacs> monokrome: json-brunch has a lib/index.js
19:01 <@isaacs> monokrome: remind me again how coffee-script is supposed to make things easier...? ;P
19:01 <@isaacs> monokrome: you should just use JS.  if you really want to annoy people, you can use comma-first, and 3-space indentation, and put spaces around your . operators.
19:02 <@isaacs> it's more fun than using coffeescript, and works much better.
19:02 < monokrome> isaacs: I don't like CS much, either. I argue with myself about whether to use it or not.
19:02 < monokrome> I did an unpublish and publish on inform-daemon
19:02 <@isaacs> monokrome: the way i see it, fi you're going to use a crappy garbage collected virtual-machine monstrosity like js or cs or ruby or python, it may as well be one that everyone knows.
19:03 <@isaacs> and works by default everywhere
19:03 <@isaacs> monokrome: inform-daemon still uses zmq
19:03 < syncan> another vote for "i don't get it"
19:03 <@isaacs> monokrome: do you have an example that *doesn't* use zmq?
19:04 < monokrome> isaacs: Well, my example is specifically that one package dpploying different data than is in the tar.gz file
19:04 < Domenic__> nathan7: nice package
19:05 < monokrome> My other example is that json-brunch project, but that one seems to work
19:05 <@isaacs> monokrome: ok.  i guess I'll just club node-gyp for the moment...
19:05 < monokrome> If you're opposed to installing zmq (understandable) I could give you a shell on a private server or something like that
19:06 < nathan7> Domenic__: hmm?
19:06 <@isaacs> monokrome: works for me.  https://gist.github.com/5313169
19:06 < nathan7> Domenic__: which package?
19:06 < Domenic__> nathan7: lazy-promise
19:06 < nathan7> Domenic__: [=
19:06 <@isaacs> monokrome: i just occasionally go into npm/node_modules/node-gyp/bin/node-gyp.js and change the first line to "return"
19:07 < nathan7> Domenic__: It just wraps around then/promise
19:07 <@isaacs> monokrome: suddenly binary packages are NO PROBLEM!
19:07 <@isaacs> :)
19:07 < nathan7> Domenic__: I'm building little things with promises
19:07 < monokrome> :D
19:07 < nathan7> Domenic__: and as I go writing modules to tie stuff together
19:07 <@isaacs> monokrome: so, works for me, not for you.  what's `npm cache ls` report?
19:08 < Domenic__> nathan7: lovely :)
19:09 < monokrome> isaacs: node_modules/inform-shared has a lib directory?
19:09 < monokrome> npm cache ls says `~/.npm`
19:09 <@isaacs> monokrome: yep. https://gist.github.com/isaacs/5313169
19:09 <@isaacs> monokrome: sorry!  i mean, `npm config ls`
19:10 < monokrome> isaacs: Does require('inform-shared') work?
19:10 <@isaacs> monokrome: https://gist.github.com/5313212
19:11 <@isaacs> monokrome: well, no, because i clubbed node-gyp
19:11 <@isaacs> > require('inform-shared')
19:11 <@isaacs> Error: Cannot find module '/Users/isaacs/dev/js/x/node_modules/inform-shared/node_modules/msgpack/lib/../build/Release/msgpackBinding'
19:11 < monokrome> Hmm, but the files are there - so, that's interesting
19:11 <@TooTallNate> am i missing something?
19:11 < monokrome> https://gist.github.com/monokrome/a0428ae750a159764af3
19:11 < nathan7> TooTallNate: He purposefully botched his node-gyp
19:11 < monokrome> oh woops
19:11 < monokrome> rofl
19:11 < monokrome> ignore that
19:12 < monokrome> https://gist.github.com/monokrome/a0428ae750a159764af3
19:12 <@isaacs> monokrome: if i comment out those, i get this: > require('inform-shared')
19:12 <@isaacs> { Notification: [Function: Notification] }
19:12 < monokrome> isaacs: That's correct
19:12 <@isaacs> TooTallNate: just debugging some npm stuff.  i put a `return` in node-gyp.js so that i could skip installing zmq
19:13 < monokrome> isaacs: The same issue that I have locally occurs on travisci (https://travis-ci.org/informjs/inform-daemon/jobs/6037335)
19:14 <@isaacs> monokrome: run this:  `npm cache clean; npm rm inform-shared; npm install inform-shared --loglevel=silly &>silly.out` and gist the resulting giant `silly.out` file.
19:14 < monokrome> The weird thing is that I can install inform-shared outside of inform-daemon and I get the lib file
19:14 <@isaacs> k
19:15 <@isaacs> monokrome: inform-daemon has a src/ but no lib/
19:15 < monokrome> in it's tar.gz?
19:15 < monokrome> That's expected
19:15 <@isaacs> monokrome: in the install folder.
19:16 <@isaacs> monokrome: no, it is not expected, its prepublish says `make`
19:16 < monokrome> I am trying to understand how .gitignore and .npmignore merge together with inform-shared before I move my npmignore configuration from this into the other repos
19:16 < monokrome> .gitignore ignores lib
19:16 < monokrome> but .npmignore ignores src
19:16 < nathan7> if there's no .npmignore, .gitignore is used
19:17 <@isaacs> monokrome: there's no .npmignore in inform-daemon
19:17 <@isaacs> monokrome: put one there.
19:17 < monokrome> otherwise gitignore was ignored? somebody in here was saying that they were overlayed in here yesterday
19:17 < monokrome> isaacs: I know, because I want to see inform-shared work before I throw one into inform-daemon. However, I will copy it over for testing
19:17 <@isaacs> monokrome: if you have a .npmignore, the .gitignore is excluded from the package.
19:17 < monokrome> okay
19:17 <@isaacs> monokrome: if you have a .gitignore, but no .npmignore, then it renames your .gitignore to .npmignore
19:18 < monokrome> isaacs: Is the gitignore getting applied to a dependency?..
19:18 <@isaacs> monokrome: shouldn't be, nop
19:19 < monokrome> https://gist.github.com/monokrome/ec931affefbc7d9e711f
19:19 < monokrome> That's the silly.out you asked for
19:20 <@isaacs> monokrome: so, i see it extracting those files into places: npm sill gunzTarPerm extractEntry lib/inform-shared/index.js
19:20 <@isaacs> npm sill gunzTarPerm extractEntry lib/inform-shared/notification.js
19:21 < monokrome> sorry, I did it in the wrong folder *facepalm*
19:21 < monokrome> different results if I do it in the right one
19:21 < monokrome> one second, I'm going to see if the npmignore fixed anything
19:21 < monokrome> I republished inform-daemon with one
19:21 <@isaacs> k
19:22 < monokrome> so that didn't fix it
19:22 < monokrome> I'll create a silly.out in this directory too so we can compare what's happening
19:22 <@isaacs> k
19:22 < monokrome> Again, thanks for your help. I'm not sure if this is npm or user error - but it's confusing either way.
19:22 <@isaacs> np
19:22 <@isaacs> you should probably skip all this makefile coffeescript shenanigans and just write JS
19:22 <@isaacs> imo
19:23 < monokrome> You're probably right
19:23 < monokrome> I miss named functions :/
19:23 <@isaacs> just a few functions, prototypes, and util.inherits(), at the very most.  it's so liberating, trust me.
19:24 < monokrome> Now I'm really confused
19:24 < monokrome> isaacs: I started with NodeJS around v0.2 and didn't use coffee until about 0.6
19:24 <@isaacs> LEMME GUESS.  NOW IT WORKS!
19:24 < monokrome> JS has been my favorite language since like 2001
19:25 < gluxon> I like Coffee... but CoffeeScript makes me scared.
19:25 <@isaacs> monokrome: it will be here always, ready to welcome you back in its curly embrace
19:25 < monokrome> here's the confusing part
19:25 < monokrome> your command works
19:25 < monokrome> However, if I do `npm install` in inform-daemon
19:25 < monokrome> there is no lib
19:25 < nathan7> isaacs: CoffeeScript has little cool language features
19:25 < nathan7> isaacs: and they bite
19:25 <@isaacs> monokrome: wait a second... you mean in the inform-daemon checkout?
19:25 < nathan7> isaacs: because the grammar isn't actually sound
19:26 < gluxon> Hm.. question for all. Does Allman's style curly braces annoy you?
19:26 < monokrome> Not sure what you mean by checkout, but if I `npm install` from inform-daemon it seems the package is different
19:26 <@isaacs> monokrome: how do you mean "from inform-daemon"?
19:26 <@isaacs> monokrome: what does that mean?
19:26 < nathan7> gluxon: is that "if (...)\n{"?
19:26 <@isaacs> cd path/to/where/i/git/cloned/inform-daemon; npm install?
19:27 < monokrome> Specifically in the case where inform-daemon is my CWD
19:27 <@isaacs> monokrome: or `npm install path/to/inform/daemon`
19:27 < gluxon> nathan7: It is curly brace on the line after if.
19:27 < nathan7> gluxon: Yeah, that's annoying as fuck
19:27 < gluxon> if (expression)
19:27 < gluxon> {
19:27 < gluxon> // code here
19:27 < gluxon> }
19:27 < monokrome> cd inform-daemon && npm install .
19:27 <@isaacs> gluxon: well, in JS, i find that that style inevitably leads to me doing `return\n{\nsome:'object'}` which doesn't actually work
19:28 < nathan7> I have a lot of screen space in the horizontal direction
19:28 <@isaacs> monokrome: ok, how do i get that folder?
19:28 < nathan7> and little in the vertical
19:28 < nathan7> wasting a full line of my screen on a brace really annoys me
19:28 < monokrome> creates a different result than `cd inform-daemon && npm install inform-shared`
19:28 <@isaacs> monokrome: $ git clone git://github.com/LimpidTech/inform-daemon
19:28 <@isaacs> Cloning into inform-daemon...
19:28 <@isaacs> fatal: remote error:
19:28 <@isaacs>   Repository not found.
19:28 < monokrome> isaacs: https://github.com/informjs/inform-daemon
19:28 < gluxon> isaacs: So you support it in other languages :'(
19:28 < monokrome> It's not LimpidTech, google is broken
19:28 < nathan7> isaacs: .git
19:28 < nathan7> oh
19:29 <@isaacs> monokrome: wrong git url in the package.json
19:29 < monokrome> sorry! fixing
19:29 <@isaacs> monokrome: again, works for me
19:30 <@isaacs> https://gist.github.com/5313363
19:30 < monokrome> is there something like --logfile for npm install?
19:30 < syncan> >
19:31 < nathan7> npm-debug.log is created on failure, monokrome 
19:31 < monokrome> okay
19:31 < monokrome> There's no failure however
19:31 < monokrome> so I need to create a log
19:31 < monokrome> npm says it all went okay, but the directory doesn'te xist
19:31 < gildean> what's the switch? --verbose?
19:32 < rynop> I'm gonna write a daemon that goes off and concurrently d/l lots of rss feeds, and parses em. I'm a node noob trying to fig out if node will not do this well. I've read stuff about the single threaded event loop and async worker threadpool, but what I dont get is how it acts on a problem like this (not http server).  If I do 2 concurrent URL requests and both come back @ same time - will I only be able to parse XML on one at a time? 
19:32 < rynop> or does node handle spinning the work in the callback off into 2 worker threads?
19:33 < monokrome> https://gist.github.com/monokrome/52242a5854be240a55d2
19:33 <@isaacs> rynop: run it in a child process.
19:33 < monokrome> There's an example `npm install --verbose` for when it doesn't work
19:33 <@isaacs> rynop: the I/O will be async, but any high-CPU activities (like parsing RSS, perhaps, if you do enough of it) will not be.
19:34 <@isaacs> rynop: if you're blocked primarily on I/O, then yes, node will handle this well (and i suspect that the "downloading" will be most of the time spent anyway)
19:34 < rynop> isaacs, u have a pointer to something i can read that will explain what u mean by child process? How do you create a child process in node?
19:35 < monokrome> isaacs: Does that log help at all?
19:35 <@isaacs> monokrome: so it's running your prepublish before installing coffee-script
19:35 <@isaacs> rynop: api.nodejs.org/child_process.html
19:35 < monokrome> isaacs: why would it run my prepublish? I'm not publishing anything
19:35 < monokrome> the lib directory for inform-shared fs in npm's tarball
19:36 <@isaacs> monokrome: oh, nvm
19:36 <@isaacs> monokrome: i get it, in node_modules/inform-shared/lib/ is missing
19:37 < monokrome> So, npm's tarball has a lib/ directory. If I install inform-shared anywhere else, it has a lib directory in node_modules/inform-shared, but if I install from `npm install .` on inform-daemon- the lib for inform-shared is missing
19:37 < monokrome> isaacs: Yep, exactly. And the issue is also reproduced in this build: https://travis-ci.org/informjs/inform-daemon/jobs/6059109
19:37 <@isaacs> monokrome: ok, reproduing.
19:37 <@isaacs> this is a weird edge.
19:37 < monokrome> Thanks again! :}
19:38 < monokrome> Yeah, I thought that it was odd.
19:38 <@isaacs> monokrome: https://gist.github.com/5313447
19:39 <@isaacs> monokrome: so, it's NOT in the cache tarball.
19:39 < monokrome> isaacs: Yeah, I thought that maybe there's some confusing cache issues going on with npm
19:39 <@isaacs> monokrome: but then, if i clean the cache, and then install the packge *explicitly* it gets it
19:39 < monokrome> exactly
19:40 <@isaacs> so, it's like the ignore rules are getting confused at some point..
19:40 < monokrome> but then if you npm clean and do `npm install .` from the daemon project again - the error is reproduced
19:40 < rynop> isaacs, u have any experience with how child_process scales? does it fork the entire process?
19:40 < monokrome> I was thinking that maybe my .gitignore was getting applied to inform-shared or something, but adding that npmignore didn't fix it
19:40 < monokrome> so I have no idea what's going on
19:41 <@isaacs> rynop: it's a fork/exec, yes.
19:41 < passcod> Look around line 311
19:41 <@isaacs> monokrome: easy reproduction: `npm rm inform-shared; npm cache clean inform-shared; npm install` <-- broken
19:41 < monokrome> yep
19:41 <@isaacs> monokrome: easy reproduction: `npm rm inform-shared; npm cache clean inform-shared; npm install inform-shared` <-- works
19:41 < monokrome> Yep. Isn't that peculiar?
19:42 <@isaacs> monokrome: HAHAH!!!
19:42 <@isaacs> monokrome: found the problem.
19:43 <@isaacs> monokrome:         "inform-shared": "git://github.com/informjs/inform-shared"
19:43 < monokrome> oh
19:43 <@isaacs> monokrome: when you do `npm install` it pulls from the git url, it looks like
19:43 < mscdex> ooooooo
19:43 < monokrome> devdependencies
19:43 < monokrome> rofl
19:44 < monokrome> I had to do that hack to get the build server to use current code
19:44 < monokrome> rofl
19:44 < monokrome> *facepalm*
19:44 < MikeKlimin> Hi guys
19:44 <@isaacs> monokrome: PA!
19:44 < MikeKlimin> somebody known howto setup node to auto-terminate all forked processes?
19:44 < MikeKlimin> Im use a "cluster" module and child_process
19:45 < monokrome> I wish that installing devDependencies was explicit (--develop) instead of production
19:49 <@isaacbw> haha
19:49 <@isaacbw> Solved!
19:49 < jrdn> if i have a javascript client, what's the best way to store oauth tokens for subsequent requests?  (if a user opens a new tab, they'd have to reauth if i didn't store it in some kind of way)
19:49 <@isaacbw> I went out to grab lunch and you were still talking about it when I got back
19:49 <@isaacbw> jrdn: cookies?
19:50 < monokrome> Thanks, isaac
19:50 <@isaacbw> that would be a better question for ##javascript though
19:50 <@isaacs> monokrome: np
19:50 < jrdn> isaacbw, yeah i mentioned that and someone yelled at me due to it being "insecure"
19:50 <@isaacs> monokrome: i still think this was more confusing than it had to be.
19:51 <@isaacs> monokrome: i really wnat to rewrite all that junk about the parts where npm downloads the package and puts it in a place.
19:51 <@isaacbw> I've never used oauth, so I don't really know
19:51 < jrdn> so perhaps a https cookie would suffice
19:51 < jrdn> kk
19:51 <@isaacs> monokrome: that part of npm kind of is shitty code.
19:51 <@isaacs> monokrome: also the bits where it figures out what to download, and where ti put it
19:51 <@isaacs> monokrome: that's my second least favorite thing npm does.
19:51 < draginx> is there a way to list all files and folders within a folder rather than just files? O_o
19:52 <@isaacs> draginx: find .
19:52 < draginx> so id have to spawn?
19:52 < webdesserts> isaacs, what's your least favorite?
19:52 < bitmage> folders are files...
19:52 <@isaacs> draginx: oh, you mean, like in a node program?
19:52 <@isaacs> draginx: npm install glob
19:52 < draginx> isaacs: yeah
19:52 < draginx> but what does glob use? =x
19:52 <@isaacs> webdesserts: the first one, the part where it downloads a thing and puts it in a place.
19:53 <@isaacs> draginx: glob uses fs and regexps and javascript.
19:53 < bitmage> http://nodejs.org/api/fs.html#fs_fs_readdir_path_callback
19:53 < draginx> so which fs command allows me to get directories? :(
19:53 < bitmage> this includes directories
19:53 < draginx> i thought fs.readdir only did files
19:53 < nathan7> fs.readdir() reads a dir
19:53 <@isaacs> draginx: readdir includes dirs.
19:53 < draginx> oh interesting
19:53 < nathan7> fs.stat() lets you see if its a dir
19:53 <@isaacs> draginx: but it's not recursive (sorry, that's what i thought you were talking about)
19:53 < nathan7> *it's
19:53 < draginx> ahh
19:53 < draginx> i dont think I need recursive
19:54 <@isaacs> draginx: glob('**/*.js', cb) would find all js files in any dir
19:54 <@isaacs> for example
19:58 < howdynihao_> random question, whats the best site to book hotel+airfare
20:01 <@Nexxy> howdynihao_, kayak is pretty nice
20:01 <@Nexxy> it will also launch searches for competitors too
20:02 < dukedave> I have a MongoClient which I'm using in many places in my code, how should I reference it? (presently I'm just passing it around everywhere)
20:04 < nathan7> dukedave: have one module that exports it, require() it in multiple places
20:05 < dukedave> nathan7, aha, okay, yeah
20:05 < dukedave> But wait, I'll need to make sure its open method is only called once
20:06 < dukedave> Hmm, what would it look like :/
20:09 < diminoten> okay is node-inspector buggy with Chrome
20:10 < diminoten> maybe I'm doing something wrong
20:12 < vincentmac> I'm looking to create an api server in node.js.  I have no problem accomplishing this using express; however, I would like to have a better/deeper understanding of node.js and was wondering if someone could point me in the right direction.
20:14 <@isaacbw> vincentmac: the first thing you can do is start using connect
20:14 <@isaacbw> or if you know what you're doing, just read the docs on the http module
20:14 <@isaacbw> it's not terribly complicated, just tedious
20:16 < Stephen> agreed
20:17 < vincentmac> I wasn't sure if using connect was the way to go.  I seem to recall dshaw saying that was one of the drawbacks of express.  I don't think i would run into any performance issues either way, I just want to have a better understanding of whats going on.
20:17 < Stephen> There's a certain amount of callback and/or event hell you avoid walking down by implementing a library
20:17 < Stephen> vincentmac: What kind of api is it?
20:17 < Stephen> What are you exposing access to?
20:18 < vincentmac> it's for a back office system.  So transactional data (most likely stored in Riak)
20:19 <@isaacbw> express pretty much *is* connect, with a bit of extra fluff
20:20 < draginx> isaacs: is there anyway to get the file's stat .on('match' with glob? :/
20:20 < draginx> even when stat is set to true in the options
20:20 < draginx> nvm ill just do .end
20:21 < draginx> wait nope still doesnt do it mmm
20:24 < diminoten> are there alternatives to node-inspector
20:26 < merpnderp> Should all node modules be installed as 'sudo npm install -g moduleName' ?
20:27 < thomblake> merpnderp: Yes, you should probably always never do that.
20:29 < thomblake> merpnderp: Generally, you want to be in the folder where you're using node, and just npm install modulename, or better yet list the dependencies in the package.json and then just npm install
20:34 < merpnderp> thomblake: I'm confused then. I thought there was a big discussion in the early days of NPM over if it would change to a user with as little perms as possible when installing.
20:35 <@Nexxy> merpnderp, you should prefer sudo, you don't need -g unless you're installing a system tool
20:39 < merpnderp> Nexxy: yes, this seems (in not 100% clear language) to say that you should use sudo: https://npmjs.org/doc/README.html
20:45 < thomblake> merpnderp: I was responding to the -g, not the sudo.  As I understand it, use sudo if you trust npm more than package authors, which is probably true.  Or don't bother to which is also fine probably.
20:46 < bradleymeck> anyone know a good way of detecting if a point is to the right, left, or inside a bezier curve?
20:49 < merpnderp> thanks thomblake
20:50 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
20:52 <@isaacbw> is anyone else having issues loading the npr web player or is it just my shitty internet connection
20:53 <@isaacbw> this is really putting me in a bad mood. I can't get work done without talking voices to listen to
20:54 < pachet> and from the medtronic foundation
20:54 < jrdn> so, i have an oauth2 server written in node.js… what happens if a client decides to expose all my user's tokens who are authenticated?  How can one protect their API against this?
20:54 < pachet> the john d and catherine t macarthur foundation
20:55 < pachet> on the web at macfound.org
20:55 <@isaacbw> I can feel myself calming down
20:55 <@isaacbw> thanks pachet
20:55 < pachet> lol, anytime
20:55 < jrdn> i.e.) i can auth to the github api via oauth and see the token in my cookies… I can go to a different browser and authenticate using that cookie.. but what if that site accidentally exposes my token?
20:59 < onel0p3z> @isaacbw: have u tried http://coffitivity.com/ ??
21:00 < pachet> bradleymeck: just to help me understand what you mean - if you have a bezier curve that looks like a C, and the point you're trying to place is directly above the midpoint of C's width
21:00 < pachet> .
21:00 < pachet> C
21:00 < pachet> would that be to the left or the right :[
21:03 <@isaacbw> onel0p3z: hah, cool. I hadn't heard of that
21:03 <@isaacbw> I think it's just a tad too noisy though
21:03 < bradleymeck> left is going to be a point that has a greater dependent variable value than that of the current point on the curve as seen going from origin to destination, something on the left is a point outside the C if it was connected from origin to destination
21:03 < bradleymeck> pachet: ^
21:03 <@isaacbw> it would be cool if you could fine-tune different channels, like voices, typing, dishes, espresso machine, etc
21:04 < onel0p3z> @isaacbw: you can adjust volume ... I use it with music on top
21:04 < bradleymeck> all curves will be normalized generally so you cant have a C shape since origin and destination will be on an axis
21:04 < bradleymeck> independant*
21:07 < bradleymeck> guess ill have to do it the hard way
21:08 < upstream> I've got a node web app that's making requests to another server and i'm getting this error back: CERT_UNTRUSTED
21:08 < upstream> I have no idea what that means...
21:08 < upstream> it works on my local machine but not in my test environment
21:08 < draginx> will fs.rename overwrite the file if it's the destination name exists or will it throw an error?
21:08 < upstream> anyone ever run into "CERT_UNTRUSTED" errors?
21:08 <@isaacbw> bradleymeck: sounds like a question for a mathematician
21:09 < bradleymeck> reading the MS stuff, makes me dislike all the steps
21:09 < upstream> it's like an ssl issue but wtf?
21:09 < passcod> upstream: that means the SSL certificate is untrusted. it's probably self-signed or not valid somehow and your app must be requiring ssl validation somehwere
21:13 < upstream> passcod: ok, so my machine is running on http and the server it's talking with is https
21:13 < upstream> so that server has self-signed or otherwise has an untrusted cert?
21:13 < upstream> is there a way then to like add it's cert to my machines trusted list?
21:14 < upstream> it's odd too that my local machine must already have the cert added or something, becuase it only fails in my test server
21:14 < rcombs> is Buffer.slice(start, end) really Buffer.slice(start, end-1)?
21:14 < passcod> upstream: there is a way, but I do not know it offhand. also, it could be a problem with your test machine's netstack
21:14 < rcombs> judging by the docs, I would expect the start and end indexes being the same to result in a 1-length Buffer
21:15 < rcombs> but it doesn't
21:15 < upstream> passcod: thanks for the tip, i'll look into adding certs.. what's a netstack?
21:16 < passcod> network stack, config, etc
21:16 < passcod> upstream: if you run a curl -vvv https://thathost.com/foobar on both machines you should be able to see a better picture of what's happening.
21:16 < nathan7> rcombs: consistent with String#slice
21:16 < rcombs> ah
21:17 < rcombs> nathan7: it may be a good thing to document that a bit more explicitly
21:17 < upstream> passcod: thanks i'll give it a shot
21:17  * rcombs just spent about 5 minutes testing Buffer stuff in the REPL because it didn't seem logical
21:18 < nathan7> > 'abc'.slice(1, 1)
21:18 < nathan7> ''
21:18 < nathan7> > (new Buffer('abc')).slice(1, 1)
21:18 < nathan7> <Buffer >
21:18 < rcombs> yeah, I get you
21:18 < rcombs> I see why the behavior would be duplicated; it'd just be nice for it to be explained a bit better in the API docs
21:20 < rcombs> right now the examples show the output well, but a reading of the text suggests it'd work like (new Buffer("abc")).slice(1,1) > <Buffer 62>
21:21 < rwaldron> Domenic_ ping
21:22 <@Nexxy> rcombs, 0 index throwing you off?
21:24 < rcombs> Nexxy: it's more the inconsistency with array.slice
21:24 < rcombs> but yeah, I suppose it does feel like the first arg is 0-indexed and the second is 1-indexed
21:24 < Domeni___> rwaldron: what's up
21:25 < rwaldron> Domeni___ so wehave this issue in jQuery 2.c beta that was filed.
21:25 < rwaldron> jsdom still wants window.jQuery
21:25 < rwaldron> which is fine
21:25 < Domeni___> huh
21:25 < rwaldron> I just need to know if this mega-naive fix will do: https://gist.github.com/rwldrn/5314469
21:25 < rwaldron> otherwise we're not going to fix it
21:26 < Domeni___> i'm pretty sure it will.
21:26 < ryanaz> hey guys..  if I were to build a website driving as much traffic as Facebook (just for the sake of talking about scale) would node.js be a good fit? 
21:26 < rwaldron> rad
21:26 < rwaldron> thanks
21:26 < Domeni___> np
21:26 < rcombs> ryanaz: well it'd be a better fit than PHP :3
21:26 < ryanaz> I've read a lot on the topic, I like Node.js for the speed and simplicity of the platform, but i'm concerned about scale.
21:26 <@isaacbw> Facebook has many many components
21:27 < Domeni___> why do i exist 3 times in this chat room. madness.
21:27 <@isaacbw> node.js can certainly scale
21:27 < rcombs> ryanaz: Node.js can scale up quite well; I'd look at Node and Rails for something like that
21:27 <@isaacbw> Domeni___: are you registered with freenode?
21:27 < Domeni___> isaacbw: no, someone took my name
21:27 <@isaacbw> hah, okay
21:27 < ryanaz> From what I can tell, node.js keeps the entire website in memory.  All the logic for everything.
21:28 <@isaacbw> node.js only does what you tell it
21:28 < rcombs> ryanaz: that entirely depends on how you write your site
21:29 < rcombs> ryanaz: you can have your whole site in memory, you can have just the logic in memory and go to the disk for resources, you can have some basics in memory and go to the disk for pages and their logic, etc…
21:29 < rcombs> ryanaz: it's quite flexible
21:29 < ryanaz> rcombs:  Right…   
21:30 < rcombs> (unlike, say, mod_php, where everything lives on the disk and gets loaded into memory for every request)
21:30 < ryanaz> rcombs:   How does it work when you have 1000's or 10,000's of users actively on the site at the same time, and the database starts going slow.. Because it's single threaded won't it respond to each user in the order they come in, not at the same time? 
21:31 < ryanaz> so wouldn't it recursively get backed up ? 
21:31 < rcombs> ryanaz: you can run multiple node processes on the same machine and have them all share an HTTP port through the cluster module
21:31 < rcombs> brb
21:31 < chilts> and also set up multiple connections to the DB
21:32 < chilts> from the same process
21:32 <@isaacbw> you probably wouldn't serve tens of thousands of users from a single process
21:32 < chilts> or from multiple as rcombs says
21:32 < ryanaz> rcombs: isn't the cluster module stability - 1 ?   (experimental) 
21:33 <@isaacbw> that's why it's fun!
21:33 <@isaacbw> :P
21:33 < howdynihao> ryanaz: you dont gotta use that, just use whatever http proxy in front of it
21:33 < howdynihao> ryanaz: and you're right it would, but the point is, its way more efficient about it because it's async
21:34 < ryanaz> I watched a presentation by the founder (Ryan?) and he said you would want to start up a bunch of instances on different ports and put a load balancer in front of it.
21:34 < howdynihao> ryanaz: how do other languages solve this problem? the answer is they dont really or they use threads
21:38 < rcombs> ryanaz: the cluster module effectively works as a load balancer for multiple Node processes; it just does some of the work for you
21:38 < rcombs> ryanaz: experimental means that there may be some API changes in future versions (unstable API); it's not necessarily a comment on the stability of the software itself
21:38 < ryanaz> rcombs: that makes sense.. 
21:39 < howdynihao> so like
21:39 < rcombs> ryanaz: in PHP or similar, you'd be spawning a process for each request, and having each one open one or more DB connections. Sure, you've got multiple running at once, but once you have more processes than vcores you're bogging yourself down already
21:39 < howdynihao> its pointless to use the cluster module
21:39 < Matthaeus1> Can someone please direct me to the proper channel in which to ask a question about node.js websockets?
21:39 < rcombs> howdynihao: no
21:39 < howdynihao> yes
21:40 < howdynihao> because in the end you will need a http proxy/load balancer in front of your 'clusters'
21:40 < rcombs> Matthaeus1: do you mean Socket.io? Node.js itself doesn't do anything with web sockets
21:40 < howdynihao> if you really want to scale
21:40 < rcombs> howdynihao: now that's true
21:40 < howdynihao> so its pointless to even use it
21:40 < Matthaeus1> rcombs:  I'm using the ws module, not socket.io
21:40 < rcombs> howdynihao: and at that point, you may as well spawn your processes yourself on different ports and load-balance them externally
21:41 < rcombs> howdynihao: but for smaller sites that run on one server, it's convenient
21:41 < rcombs> Matthaeus1: ah. I'm not sure if there's a dedicated channel for that, so this might be the right place
21:43 < Matthaeus1> Alright.  Here's my question:  I'm using ws, and trying to catch an error via a callback thus:  socket.send(data, function(err) { console.log(JSON.stringify(err); });  I'm seeing empty objects as errors (not undefined or null as with success, but literally {} on error).  How can I track down what type of error this is?
21:44 < rcombs> Matthaeus1: try just logging the Error object itself
21:44 < rcombs> > JSON.stringify(new Error("Stuff!"))
21:44 < rcombs> >> JSON.stringify(new Error("Stuff!"))
21:44 < purr> rcombs: (string) '{}'
21:44 < rcombs> ^ see?
21:44 < rcombs> >> new Error("Stuff!")
21:44 < purr> rcombs: (object) {arguments: undefined, message: 'Stuff!', stack: (Getter/Setter), type: undefined}
21:45 < rcombs> the error message doesn't stringify
21:45 < Matthaeus1> rcombs:  Thank you so much!
21:45 < rcombs> welcome!
21:47 < boygrmn88> http://amateurgirlfuckedhard.blogspot.com/2013/04/the-best-amateur-and-pornstar-collection.html
21:47 < rcombs> <_<
21:48 < draginx> lawls
21:58 < draginx> Any idea why im sending POST but expressJS thinks it's "OPTIONS"? :/:/:/
21:58 < draginx> 'access-control-request-method': 'POST',
21:59 <@isaacbw> where are you sending it from?
21:59 < draginx> from jquery
21:59 < draginx> simple $>post
22:00 < LeoRochael> Hi, I've got an npm problem. I'm trying to install uglify-js with npm@1.1.4, which depends on { 'source-map': '~0.1.7', optimist: '~0.3.5' }, but it's failing to install source-map
22:00 < LeoRochael> it complains it can't find an appropriate version
22:00 <@isaacbw> draginx: is this CORS?
22:00 < Domeni___> LeoRochael: you need an npm released within this calendar year
22:01 < Industrial> Does nodejs have an asset pipeline that includes browserify or can be configured to use browserify (and perhaps after that a minifier/obfuscator) ?
22:01 < LeoRochael> Domeni___: not really, I just need to understand why npm only sees source-map versions [ '0.0.0', '0.1.0', '0.1.1', '0.1.2', '0.1.3' ] 
22:01 < Industrial> package*
22:01 < LeoRochael> Domeni___: when clearly the latest version is 0.1.22
22:02 < draginx> isaacbw: yeah why
22:02 < Domeni___> LeoRochael: https://github.com/mozilla/source-map/blob/master/package.json#L26
22:02 < Domeni___> as you can see only versions of node/npm released post-dinosaur extinction are supported.
22:02 <@isaacbw> draginx: from http://www.w3.org/TR/cors/: "It gets slightly more complicated if the resource author wants to be able to handle cross-origin requests using methods other than simple methods. In that case the author needs to reply to a preflight request that uses the OPTIONS method and then needs to handle the actual request that uses the desired method (DELETE in this example) and give an appropriate response."
22:03 < draginx> right but uhm
22:03 < draginx> its just POST :P
22:03 <@isaacbw> I don't think you read what I just pasted
22:03 <@isaacbw> your browser is sending an OPTIONS request to first make sure the server will accept your POST
22:03 <@isaacbw> so in node.js you need to respond properly to OPTIONS with cors headers
22:04 < mscdex> ^
22:04 <@isaacbw> which browser are you using?
22:05 < mscdex> CORS Lite
22:05 < draginx> isaacbw: im using Chrome
22:05 < rcombs> draginx: I'm late to the party on this, but yeah, POSTing cross-domain will send an OPTIONS first, then a proper POST if the OPTIONS comes back with proper headers
22:06 < draginx> ah ok I see
22:06 < draginx> thanks! :)
22:06 <@isaacbw> draginx: here's how I was handling it with connect http://hastebin.com/fedocehaje.js
22:07 <@isaacbw> er
22:07 < draginx> yeah
22:07 <@isaacbw> and http://hastebin.com/fimexeveli.js
22:12 < faceleg|work> who wants to be overly excited about something to help inflate my ego and make me feel like my time wasn't totally wasted?
22:12 < faceleg|work> Don't all jump up at once
22:13 <@Nexxy> faceleg|work, OH MY GOD THAT'S ABSOLUTELY AMAZING
22:13 < faceleg|work> I'm wiggling like my 18 month old does when she's happy right now
22:13 < faceleg|work> in full view of my colleagues
22:13 <@Nexxy> all is right in the world
22:13 < LeoRochael> Domeni__: thanks. I misunderstood your first message for a question... duh
22:14 < draginx> why am I getting EXDEV error with a file that does exist for fs.rename?
22:14 < draginx> the destination folder does in fact exists too
22:15 < draginx> oh wait this is a debian issue gah
22:19 < faceleg|work> more like dumbian amirite
22:19 < faceleg|work> real devs use windows
22:20 < ljharb_work> lol
22:21 < faceleg|work> ljharb_work: o o o o you look http://nodegit.github.com/ I rewrote like we discussed
22:21 < nathan7> faceleg|work: OH MY GOD
22:21 < ljharb_work> faceleg|work: you should specify a minimum version of git
22:21 < nathan7> faceleg|work: LIBGIT2 BINDINGS
22:21 < nathan7> DO THEY WORK ARE THEY AWESOME
22:21 < rcombs> faceleg|work: ooh!
22:22 < nathan7> faceleg|work: can it do the backend magic?
22:22 < ljharb_work> faceleg|work: why is "commit" an event on the history object, and not on the branch itself?
22:22 < passcod> faceleg|work: oh yeah, you were working on that, weren't you. is it usable now?
22:23  * rcombs wonders if npm will end up using that
22:23 < nathan7> Probably not.
22:23 < ljharb_work> faceleg|work: ps, in your async example, you can just probably just pass "commit.sha", "commit.time", etc in instead of the lambda
22:23 < JohnMcLear> I have a really weird issue with sessions in express, we have our own session manager and for some reason express calls SET on each HTTP request despite the GET request being succesful, I can't figure out how to solve it..  Anyone can spare a few mins to cast their eyes over it please?  https://github.com/ether/etherpad-lite/commit/e06da4bf650d
22:23 < ljharb_work> faceleg|work: could you make "commit.time" just return a date object? when wouldn't you want one?
22:24 < ljharb_work> faceleg|work: also can i get a commit's parent SHA(s)? if it's a merge commit there will be more than 1
22:24 < nathan7> faceleg|work: ..what is a commit object if it doesn't even hold the sha
22:26 < faceleg|work> ljharb_work: branch is just a commit
22:27 < faceleg|work> passcod: yes apparently (I use it)
22:27 < ljharb_work> faceleg|work: but a branch name should be a live pointer to a commit - ie, should always represent the HEAD commit
22:27 < ljharb_work> faceleg|work: in other words, when a new commit comes in, "branch" should point to it ideally
22:27 < ljharb_work> faceleg|work: the same applies for tags
22:27 < faceleg|work> ljharb_work: re time because after discussing with someone here I decided to leave it as a timestamp, I originally wanted to return a Date obj as well
22:28 < passcod> well, good work, faceleg|work, and good luck. apparently, developer interest is significant ;P
22:28 < faceleg|work> re commit.parents return an array always
22:28 < faceleg|work> passcod: lol ys not what I expected
22:28 < ljharb_work> faceleg|work: right, an array always makes sense
22:28 < faceleg|work> ljharb_work: seems I haven't documented commit fully, will do so tonight
22:29 < ljharb_work> cool
22:30 < faceleg|work> ljharb_work: tags are not implemented yet
22:30 < faceleg|work> https://github.com/tbranyen/nodegit/issues/58
22:31 < faceleg|work> nathan7: a commit object is a wrapper around the libgit2 git_commit struct, which has a bunch of associated functions used to get various aspects of the commit, one of which is git_commit_id, which looks up the git_commit's Oid in the ODB, which is potentially blocking, hence commit.sha(function{})
22:31 < nathan7> faceleg|work: mhm
22:32 < nathan7> faceleg|work: any bindings for node ODBs?
22:32 < faceleg|work> ljharb_work: repo.branch gets the HEAD commit
22:32 < faceleg|work> nathan7: unless it's related specifically to Git, no
22:32 < ljharb_work> faceleg|work: right, but on('commit') it will be a different commit at HEAD
22:32 < nathan7> faceleg|work: I mean, libgit2 backends
22:33 < faceleg|work> branch.history walks the history from the HEAD backwards
22:33 < ljharb_work> faceleg|work: also, are you listening for more than just "commit"? what about "reset", or "rebase", or "merge", or "pull" (which is an alias for merge or rebase)?
22:33 < faceleg|work> ljharb_work: it's not listening, walking the history backwards
22:33 < ljharb_work> ohhh, "commit" is just a stream event
22:33 < ljharb_work> got it
22:33 < nathan7> faceleg|work: what does it do when there's a fork in the commit history?
22:33 < faceleg|work> ljharb_work: I haven't implemented any history
22:33 < gildean> JohnMcLear: that commit isn't saying anything about when and where the set is called
22:33 < nathan7> faceleg|work: so a merge for example - >1 parent
22:33 < gildean> also the project is too big for me to start randomly looking
22:33 < faceleg|work> nathan7: don't know, haven't tested. I joined the project about 2 months ago and have just finished rewriting it to be more modern
22:34 < faceleg|work> gildean: git itself is big and this project aims to wrap all of it
22:34 < gildean> faceleg|work: ?
22:34 < faceleg|work> ljharb_work: yeah you do think I should make this more clear in the docs? that history returns an event?
22:34 < ljharb_work> yes - altho the fact that it's on "history()" makes it easier
22:35 < ljharb_work> maybe if your example didn't chain it. intermediate vars are a good thing™
22:35 < faceleg|work> ljharb_work: true fact
22:35 < nathan7> a promise wrapper around all this would kick ass
22:36 < nathan7> promises are rarely important enough to wrap shit in them
22:36 < faceleg|work> nathan7: I'm not sure what would happen, I will make an issue to remind myself to make a test fo rthis in the future
22:36 < nathan7> but *damn*, this is one of those things..
22:36 < ljharb_work> promises would be great on it
22:36 < nathan7> you could cache all the things
22:36 < ljharb_work> PROMISE ALL THE THINGS
22:36 -!- mode/#Node.js [+o TooTallNate] by ChanServ
22:37 < nathan7> apply when-every-key to a commit object, get all the data
22:39 < faceleg|work> nathan7: not sure what you mean about odb bindings (I'm thick like that sometiems)
22:39 < nathan7> faceleg|work: I want an ODB written in JS
22:39 < faceleg|work> nathan7: https://github.com/tbranyen/nodegit/issues/64
22:39 < faceleg|work> oh right
22:39 < nathan7> faceleg|work: I have an ODB I'm working on, I'd love to prototype it
22:39 < faceleg|work> tbh I haven't looked into libgit2's odb functions, just those I need to get the mos tbasic useful git feature set
22:40 < faceleg|work> thanks for your feedback, I really do appreciate it. 
22:50 < barbazboom> How do I use node-mysql to join tables but have the child tables under a property?
22:50 < barbazboom> var row = results[0]; row.primaryId; row.child_table.primaryId;
22:51 < barbazboom> Is there anyway to do this?
22:56 < barbazboom> #node.js is dead today
22:58 < barbazboom> should I use jesus or forever
22:58 < barbazboom> i'm already using forever. shuld I switch?
22:59 < rvagg> deoxxa, ping
22:59 < rvagg> barbazboom: you should switch, IMO, forever is kind of bloated
23:00 < barbazboom> that's kinda what I say
23:00 <@Nexxy> you could also just use upstart
23:00 < xk_id> I prefer a bash script
23:00 < samholmes> upstart on ubuntu
23:01 < deoxxa> rvagg: sup
23:01 < samholmes> ?
23:01 < samholmes> does debian have upstart?
23:01 < xk_id> if [ $(ps ax | grep -v grep | grep "node" | wc -l) -eq 0 ]
23:01 < xk_id> :)
23:01 < xk_id> you don't need upstart
23:02 < samholmes> xk_id: what's all that mean?
23:02 < samholmes> I don't know bash well enough
23:02 < xk_id> it's a simple bash script that checks if node is running
23:02 <@Nexxy> at least once
23:02 <@Nexxy> with any script
23:02 < rvagg> deoxxa: question about jesus vs forever, he seems to have gone tho
23:02 < xk_id> for (( ; ; ))
23:02 < rvagg> scroll up
23:02 < samholmes> what's that good for
23:02 < samholmes> rvagg: I'm still here
23:02 < xk_id> if you don't have upstart.. and/or you want to make your own
23:02 < deoxxa> aw
23:03 < samholmes> deoxxa: I"m right here
23:03 < samholmes> just changed nicks is all
23:03 < _youjelly> If I do io.sockets.emit('someeventname','message) is that broadcast on all sockets and handled on the sockets subscribed for that event or multicast
23:03 < samholmes> xk_id: I've had bad experiences with upstart
23:03 < xk_id> samholmes: would you like me to share the bash script with you?
23:03 < samholmes> No. I'm not jelly.
23:03 < xk_id> are you sure?
23:03 < samholmes> xk_id: That's okay. I don't know bash that well.
23:03 < deoxxa> samholmes: sorry, playing CS: go right now
23:04 < deoxxa> will brb soon
23:04 < samholmes> CS?
23:04 < _youjelly> the bomb has been planted
23:04 < xk_id> fire in the hole
23:04 <@isaacbw> I had two stars on CS: Go before I played drunk, and now I can't play anymore because I get matched up with really awful people
23:04 < jocafa> someone set us up the bomb
23:04 < combataircraft_> hi all. I wrote a guide about how to write declarative JavaScript, here it is; https://github.com/azer/declarative-js
23:04 < samholmes> deoxxa forgot to write `npm install -g jesus` in the readme
23:05 < combataircraft_> feedbacks appreciated. 
23:05 < combataircraft_> and its HN entry is: https://news.ycombinator.com/item?id=5495730
23:05 < samholmes> combataircraft_: Y U NO use gist?
23:06 < combataircraft_> samholmes: I use but found a repo is more useful for me
23:06 <@isaacbw> do people really use gist as a blog?
23:06 < _youjelly> so?
23:06 < ljharb_work> isaacbw: check out https://github.com/substack/glog
23:06 < _youjelly> If I do io.sockets.emit('someeventname','message) is that broadcast on all sockets and handled on the sockets subscribed for that event or multicast?
23:06 < combataircraft_> guys I wanna hear more about the guide itself. not the way I publish it. I believe that it's easy to read. 
23:08 <@isaacbw> You have no power here!
23:08 < samholmes> isaacbw: yup
23:09 < aslant> stream2 question - are we not supposed to emit objects? 
23:10 < deoxxa> ashnur: {objectMode: true}
23:11 < aslant> deoxxa: I've got objectMode set to true. I have one transform stream piped into another
23:12 < rvagg> Nexxy, deoxxa, samholmes: agreed re upstart, use that if it's not a problem, but I have had situations where it's much easier to use jesus than mess around with upstart
23:12 < aslant> deoxxa: if I have this.push({ key:true }) on the first, the second receives it as '[object Object]'
23:12 < aslant> deoxxa: i.e. toString() is called on it somewhere along the way
23:13 <@isaacbw> I still thing someone should set up a forum for hacking discussion
23:13 <@isaacbw> *think
23:14 < samholmes> re?
23:14 < samholmes> wtf is re
23:14 < aslant> samholmes: I have no idea about the context of your question but I'd guess regular expression?
23:15 < jocafa> "regarding"
23:15 < syncan> resident evil
23:17 < aslant> so if I want to modify objects through a chain of Transform streams - do I really have need in my _tranform() functions (1) JSON.parse(o) (2) // set properties of o (3) this.push(JSON.stringify(o)) ?
23:17 < samholmes> `npm install -g jesus`
23:17 < ashnur> almost
23:18 < samholmes> aslant: Nexxy, deoxxa, samholmes: agreed re upstart, use that if it's not a problem, but I have had situations where it's much easier to use jesus than mess around with upstart 
23:18 < samholmes> rvagg said that
23:19 < s5fs> jesus?
23:19 < rvagg> he's good at resurrection
23:19 < rvagg> npm.im/jesus
23:20 < s5fs> thanks, was wondering if it was a new module. I'm currently using systemd to start my web stack but need a watcher for node itself
23:21 < aslant> excuse me modifying my question to correct typo:
23:21 < aslant> so if I want to modify objects through a chain of Transform streams - do I really have need in my _tranform() functions (1) JSON.parse(chunk) (2) // set properties of o (3) this.push(JSON.stringify(o)) ?
23:37 < ryanaz> systemfault: hey man
23:37 < systemfault> Hi
23:43  * deoxxa is done getting his butt kicked in CS
23:43 < deoxxa> samholmes: saw your issue on gh, will sort it out :>
23:44 < samholmes> haha cool
23:45 < deoxxa> done!
--- Log closed Fri Apr 05 00:00:22 2013
