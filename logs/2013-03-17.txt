--- Log opened Sun Mar 17 00:00:28 2013
00:28 < skython> Any suggestion for an enterprise node.js framework with a stable ORM and simple REST interface? I have some experience with Pylons and RoR but would rather use a node.js solution.
00:41 < OliverJAsh> does anyone know how to get browserify to stop producing it's own require function definition and instead provide one in a separate file? i want to add require to the global namespace
00:59 < asterokid> So let's imagine my server is expecting a url like http://www.mysite.com/user/jimmy and on my apache server I create a proxypass of jimmy.mysite.com that points to http://www.mysite.com/user/jimmy. Is this normal then it does not work... Knowing that I am using request.url on the server to figure out all my sh*t. What is the right way to proceed?
00:59 < substack> OliverJAsh: use -r if you want to expose modules to the outside
00:59 < OliverJAsh> substack: and browserify will create a global require in the bundle?
01:00 < substack> yes
01:01 < substack> OliverJAsh: https://github.com/substack/node-browserify#external-requires
01:05 < niggler> substack are you familiar with node code?
01:12 < korilo> that js-git will be amazing
01:21 < OliverJAsh> substack: browserify currently looks for node_modules. it would be great if it looked for bower components, too. i'm trying to achieve this: npm == server modules. bower == client components.
01:22 < OliverJAsh> substack: i'm using browserify to use sever code of course, but just not node modules. my own code.
02:18 < sancty> Hey, can someone assist me with providing a callback to the entire express app?
02:56 < Abzter> hi, i am following https://github.com/joyent/node/wiki/Installation#installing-on-windows to manually install node .. all seems fine when i give npm root -g it shows correct path. When i give npm bin -g it erros .. nay help?
03:00 < willwh> hey guys :)
03:01 < kornnflake> hey ;)
03:01 < kornnflake> got a redis related question
03:01 < kornnflake> [03:56:00] <kornnflake> any idea how to get all hmsets?
03:01 < kornnflake> [03:56:15] <kornnflake> saving them via: hmset("log:" + id, log)
03:01 < kornnflake> [03:56:44] <kornnflake> hgetall("log:*") doesn't work
03:01 < kornnflake> [03:57:37] <kornnflake> any other way than looping through them?
03:25 < sshaginyan> Guys when do you use a ipc vs process environment variable?
03:26 < sshaginyan> So if I needed to pass in the staid file path from master to worker I'm currently doing cluster.fork({stuff…….}) Is this good practice?
03:26 < sshaginyan> vs ipc?
03:41 < nathanbl> is it better to do a http call to a php script or directly call the php script from the command line from nodejs.
03:42 < nathanbl> i assume directly calling the script would be alot faster since it wouldnt need to use apache etc
03:43 < Techie-Micheal> If the PHP script is written for being executed through Apache (returns HTML, for example), then you'll want to consider that when parsing the output. I think calling from the command line would be faster/less process intensive.
03:45 < nathanbl> it returns json :).
03:45 < nathanbl> is there an easy way to replace the http request with a non blockign command line call 
04:01 < aeosynth> are there any references for fixing memory leaks? i'm just finding a bunch of blogs
04:03 < samholmes> Damnit, stole my idea. :/ https://github.com/hij1nx/node-chrome
04:05 < niggler> samholmes node-webkit was another thing
04:06 < samholmes> niggler: yeah? I was thinking of making more of an application platform with app icons and shiz
04:06 < aeosynth> also appjs, topcube
04:06 < niggler> https://github.com/rogerwang/node-webkit
04:07 < aeosynth> https://github.com/appjs/appjs
04:07 < aeosynth> https://github.com/creationix/topcube
04:08 < hij1nx> samholmes: oh?
04:08 < hij1nx> niggler: very large codebase :)
04:08 < samholmes> hij1nx: yeah
04:09 < hij1nx> samholmes: yep, i think lots of people of thought of this, its a great idea :D
04:09 < samholmes> hij1nx: But it's my idea. :(
04:09 < niggler> hij1nx i suspect there'll be many efforts until they standardize
04:09 < hij1nx> samholmes: you know once enough people are thinking the same thing, its time to execute :)
04:09 < hij1nx> samholmes: oh, are you serious?
04:09 < samholmes> hij1nx: no
04:09 < hij1nx> samholmes: lol, ok ;)
04:10 < samholmes> hij1nx: :D
04:10 < hij1nx> samholmes: someone was talking about a dnode interface to replace plain websockets, that would be near
04:10 < hij1nx> s/near/neat
04:32 < Aquilas> Hey guys I was wondering how to query the database and send the json client side with html
04:32 < Aquilas> query the database on server side before the html is loaded
04:57 < distilledchaos> So I got a raspberry pi, and I want to put node on it.
04:57 < distilledchaos> I want the node process to be persistent
04:57 < distilledchaos> (i.e. start on boot, relaunch on crash)
04:57 < distilledchaos> what's a good method for doing so?
04:59 <@mbalho> distilledchaos: i put upstart on mine and then used mon + mongroup with this conf, works great https://gist.github.com/maxogden/4322201#file-startup-mongroup-conf
05:22 < aeosynth> https://github.com/nodejitsu/forever
05:22 < aeosynth> @distilledchaos
05:22 < aeosynth> oops, he's gone
05:41 < zeromodulus> if you use --prefix=/foo to ./configure, doesn't it also look in /foo/lib for libraries?
05:47 < ningu> zeromodulus: no, that's the install prefix
05:47 < zeromodulus> I thought the exec-prefix would inherit from prefix.
05:48 < ningu> well, yes. but again that's the prefix for installing files
05:48 < zeromodulus> okay...
05:49 < zeromodulus> hmm... this is so weird, I can clearly see a bunch of references to tgetent, an ncurses symbol, but zsh and screen are like, "uh, no libncurses bro."
05:50 < ningu> LDFLAGS and CPPFLAGS
05:50 < zeromodulus> oooohhhh
05:50 < blobaum> hello
05:52 < zeromodulus> yay!
06:14 < terinjokes> is the documentation for http.ServerResponse wrong?
06:19 < terinjokes> hrm, seems i should be looking at http.IncomingMessage
06:20 < terinjokes> and it seems the 'end' Event won't ever fire if there's no 'data' events, even if the server doesn't send data
07:00 < owen1> great blogpost by substack - http://substack.net/many_things#so-it-is
07:01 < owen1> too bad i don't understand how to use most of his modules and also don't understand the usecase for using them.
07:06 < substack> owen1: when you have the problems that those modules narrowly solve then they will be useful, otherwise not
07:06 < substack> and that is a good thing
07:07 < ningu> substack: how do you decide what modules to write, then... is it because you were having that narrow problem? or that you determined that others were?
07:12 < substack> ningu: I only solve my own problems.
07:13 < ningu> substack: I guess I don't know what sort of apps you write so it often isn't obvious to me what you were working on that required something
07:13 < substack> solving problems that you yourself are not presently having is not a good way to write software that anybody will want
07:13 < owen1> substack: i don't understand most of your modules, so even if i have a relevant problem, i will not be able to use your modules. stuff like shoe or many of the streaming modules you and raynos and dominic are writing are awesome, but many people don't understand what and how to use them. we need a real life example sometimes.
07:14 < owen1> i hope i'll be able to make it to nodeconf. i am sure i'll learn a ton there.
07:14 < Raynos> owen1: wut?
07:14 < substack> owen1: that's why I wrote the streaming handbook
07:14 < substack> http://github.com/substack/stream-handbook
07:15 < owen1> let me take a look.
07:15 < owen1> for example many people use socket.io even thought there are good modules that can do similar things.
07:15 < jb55> yeah the lxjs video was good as well
07:18 < owen1> jb55: i disagree with u. i see all those videos and they are cool. but i don't know what to do with this or how to apply it on my projects.
07:19 < owen1> maybe i don't write a lot of projects that require streams
07:19 < jb55> takes a bit of imagination :)
07:20 < owen1> i just love to see substack struggle with his thinkpad + tiled WM + external monitor
07:20 < jb55> scuttlebutt for instance, its general enough to be used for lets say syncing state between peers in an html5 game perhaps?
07:20 < owen1> jb55: that's exactly what is missing from those videos!!
07:21 < owen1> use cases for all those modules
07:22 < owen1> it might just be me.
07:22 < Raynos> owen1: just use what makes sense for your use cases
07:22 < jb55> its just because theres nothing to compare it to, they are relatively new tools that haven't existed in previous forms
07:23 < Raynos> and favor small things from npm
07:25 < nutcase> what kind of server requirements are needed to run a node.js server?
07:25 < nutcase> from my understanding of it 
07:25 < nutcase> it just allows me to run other stuff to build a static website of sorts
07:25 < nutcase> or am I completely off base here?
07:25 < owen1> nutcase: very little. depends on your load
07:25 < nutcase> so I could run it on a 128mb vps?
07:25 < owen1> nutcase: sure
07:25 < jb55> yes
07:26 <@mbalho> node runs on the kindle
07:26 < nutcase> woah nice
07:26 < nutcase> am I wrong about what node does exactly?
07:26 < owen1> jb55: thanks for the insights of scuttlebut. i am reading in the stream-handbook about other 'state streams' - crdt and delta-stream
07:26 < nutcase> sorry I am just trying to learn more about website development and everything
07:27 < ningu> nutcase: I run node on a 256mb vps and it works fine for my purposes
07:27 < ningu> but my purposes are fairly limited :)
07:27 <@mbalho> nutcase: node is a streaming I/O library, you can do whatever you want with it. some problems are better suited than others
07:28 < jb55> nutcase: I recommend watching the original talks of ryan describing node, they are quite insightful
07:29 < GreenDog> i use node on a single 128mb vps to run google
07:29 < GreenDog> that would actually sincerely impress me
07:30 < nutcase> jb55: where would I find those at?
07:30 < jb55> nutcase: should be on the node homepage
07:31 < nutcase> okay ill check it out thanks
07:31 < nutcase> jb55: https://github.com/jenius/roots
07:32 < nutcase> that uses node.js right?
07:32 < jb55> nutcase: if it has a package.json that's a good sign that it is :)
07:33 < nutcase> ah
07:33 < nutcase> thats what I wanted to try to run
07:33 < nutcase> I mean I guess I could try to set it up locally on this linux mint netbook that has 8gb of ram since thats more than any of the VPSes I have
07:34 < owen1> jb55: are there more small module u are familiar and can give me a 1 liner usecase?
07:34 < jb55> pick one and I'll try
07:34 < owen1> shoew
07:34 < owen1> show
07:35 < owen1> sorry- shoe
07:35 < jb55> shoe is just a wrapper around sock.js
07:35 < jb55> sock.js is just a wrapper around websockets
07:35 < owen1> sock.js
07:35 < owen1> (:
07:35 < jb55> its a nice api around websockets basically
07:35 < jb55> with dumbness abstracted away
07:35 < jb55> so you dont have to think about it
07:36 < owen1> so shoe wrapp sock since sock is hard to use?
07:36 <@mbalho> it implements fallbacks like socket.io, if you dont care about fallbacks https://github.com/maxogden/websocket-stream/blob/master/index.js is just websockets + is only 50 lines of code
07:37 < jb55> not necessarily hard to use just not elegant
07:37 < jb55> right and fallbacks
07:37 < jb55> usecase: implementing realtime chat
07:40 < owen1> jb55: so shoe, unlike sock.js and similar to socket.io implements fallbacks?
07:40 < owen1> or engine.io
07:41 <@mbalho> sock.js = socket.io written in coffeescript, shoe = streams on top of sock.js
07:43 < CoverSlide> well, correct me I'm wrong, but wasn't sock.js written for other platforms first?
07:44 < CoverSlide> I believe it's supported on more platforms at least, or that's one of the goals
07:45 < visnup> what up mbalho?!
07:45 <@mbalho> visnup: YO DAWG look at this https://www.shadertoy.com/view/4ds3zr
07:45 < CoverSlide> and while there are implementations of socket.io on other platforms, i think they're all unofficial / unsopported ports
07:45 < visnup> whoaaaa
07:46 < CoverSlide> where does he get such wonderful toys?
07:46 < owen1> so if i want to do some realtime i have the following options - socket.io, engine.io, sock.js, shoe, and plain websockets
07:46 < visnup> mbalho: I'm itching to write an adventure game
07:46 < CoverSlide> you could implement polling yourself
07:47 <@mbalho> owen1: if you want crossbrowser + streams use shoe, if you dont need crossbrowser and want streams use websocket-stream, otherwise most people use socket.io
07:47 < CoverSlide> visnup: which type? IF, point & click?
07:47 < ningu> I thought engine.io never materialized
07:47 <@mbalho> visnup: yea i wanna write one too, lets collab
07:47 < CoverSlide> engine.io is being used in the wild all the time
07:47 < CoverSlide> i don't think it's merged into socket.io yet though
07:48 <@Nexxy> can coco be the protagonist?!
07:48 < CoverSlide> but i don't follow / use socket.io anyway
07:48 <@mbalho> visnup: my current idea is a world that you have to script to win, you are a dwarf engineer with a spanner in your hand and you can go up to voxel robots and program them to automate tasks
07:48 < CoverSlide> plain websockets for me
07:48 <@mbalho> visnup: so it would basically teach people how to be WoW gold farmers
07:48 < visnup> mbalho: ooh, when you said "go up" it made me imagine different levels to a world
07:48 < visnup> like the surface world is all voxels
07:49 <@mbalho> visnup: hah
07:49 < visnup> subterranean world is all 8-bit
07:49 < visnup> and below that, ASCII!
07:49 < owen1> mbalho: so shoe is very similar to socket.io but with streams. what scenario would streams support be relevant?
07:49 <@Nexxy> owen1, every
07:49 <@Nexxy> since streams are already everywhere else
07:50 <@mbalho> owen1: require('fs'), require('net'), require('http')
07:50 < visnup> CoverSlide: not sure yet...
07:50 < GreenDog> i don't understand what shoe gives me that sock.js doesn;t
07:50 < visnup> Nexxy: coco can at least be an easter egg
07:50 <@mbalho> GreenDog: streams
07:50 <@Nexxy> visnup, \o/
07:50 <@Nexxy> visnup, I framed that picture you took of me with coco
07:51 <@mbalho> lol
07:51 < visnup> Nexxy: hot
07:51 < substack> streams: pretty great
07:51 < visnup> Nexxy: where does it hang?
07:51 < owen1> mbalho: i understand that fs, net and http all using stream. but i don't understand how to use it with shoe. can u give a real example?
07:51 <@mbalho> substack wrote XML today
07:51 <@Nexxy> visnup, in my office
07:51 < substack> mbalho: fact
07:51 < substack> getting all enterprise
07:51 <@mbalho> owen1: require('fs').createReadStream('bigdata.china').pipe(shoeStream)
07:52 <@mbalho> owen1: https://github.com/substack/stream-handbook#introduction
07:52 < visnup> substack: lemme know when you write protobufs
07:52 < substack> owen1: socket.io actually gives a much higher-level api than just a dumb polyfill on top of websockets
07:52 < owen1> mbalho: let me stare at this for a while (:
07:52 < visnup> substack: omg mind will blow
07:52 <@Nexxy> visnup, what is your interest in protobuf
07:52 <@mbalho> chrisdickinson is writing protobuf i think, or maybe it was msgpack
07:52 < chrisdickinson> protobuf
07:52 < substack> owen1: but having clever higher-level apis is not so great if you need to implement modular layering for packing multiple reusable abstractions over the same data pipe
07:53 < visnup> Nexxy: I'd like more language support
07:53 < substack> or for using custom protocols like dnode over the transport link
07:53 < chrisdickinson> visnup: http://npm.im/protobuf-parser (for reading spec files)
07:53 < visnup> Nexxy: square uses them and I don't want to have to drop to Java to interact with those services
07:53 < chrisdickinson> haven't quite gotten to writing the actual implementation yet
07:54 <@Nexxy> visnup, I was looking into implementing it when I was still working on a riak client
07:54 < chrisdickinson> but will be guaranteed to need to in the future
07:54 < owen1> substack: thanks. it will take me a few weeks/months to understand what u wrote. i'll probably have to write more code to understand all those terms.
07:54 < chrisdickinson> protobufs seem pretty neat for, e.g., encoding game updates
07:57 < CoverSlide> i do like msgpack, esp if you have binary data that you want nested inside a hash
07:58 < CoverSlide> i haven't had a look at protobufs yet though
07:59 < owen1> mbalho: so .pipe(shoeStream) is piping the file into the shoe object that will send the data over the wire (to the browser or to the server, depens where the code is running) ?
07:59 <@Nexxy> I'm interested in seeing how much of a performance boost it would give me over riak http
08:09 < visnup> Nexxy: no idea either
08:10 < visnup> Nexxy: if you're doing a lot of traffic, maybe.. but it also sounds like early optimization
08:14 <@Nexxy> visnup, but thinking of all those well formed packets would make me happy
08:14 < visnup> Nexxy: compact packets
08:15 < visnup> Nexxy: compackets!
08:15 <@Nexxy> MMM!
08:15  * visnup eats a cookie
08:15 <@Nexxy> you would.
08:16  * visnup eats a second cookie
08:17 < visnup> Nexxy: did mbalho tell you that he coco-sat for like 2.5 weeks?
08:17 <@Nexxy> WHAT?!
08:17 <@Nexxy> I'm so fucking jealous right now
08:18 <@Nexxy> visnup, thank you for choosing such a responsible person to look after my dog
08:18 < visnup> she got a bath too!
08:19 <@Nexxy> bubble bath I hope
08:21 < visnup> idk
08:21  * visnup eats another cookie
08:22 <@Nexxy> it's too bad google reader is dying
08:22 <@Nexxy> you could set up an RSS feed to update people on your cookie eating activities
08:22 < azharr> Hi Guys
08:22 <@Nexxy> azharr, not now, visnup is eating cookies
08:23 < Havvy> Anybody know of a simple blog module?
08:23 < azharr> ?
08:24 < Havvy> I don't have time to write a blog platform myself.
08:24 <@Nexxy> Havvy, markdown + static template?
08:24 < jb55> substack just wrote a pretty neat one powered by git pushes + markdown https://github.com/substack/glog
08:25 <@Nexxy> oh, what do you know
08:25 < azharr> what do you guys do for a living?
08:25 < terinjokes> substack: any ideas why I can't get oppessor to work?
08:26 < azharr> is nodejs part of HTML 5 - flash is running clunky on Ubuntu
08:27 < terinjokes> substack: pretty much copying the example straight from the stream-handbook
08:27 < Havvy> azharr: Nodejs is not a part of HTML5.
08:28 < Havvy> Nodejs is a platform for server side code. HTML5 is a platform for client side pages/applications.
08:29 < ningu> and flash is part of neither
08:29 < Havvy> jb55: Nice.
08:30 < Havvy> Flash is also a client side platform for applications, and can be embedded in HTML. But stictly speaking, it is not HTML.
08:31 < sheldonh> i guess another angle on the question, though, is whether javascript is "part of" html5. in other words, can a browser claim html5 support without support for javascript?
08:32 < Havvy> sheldonh: That's probably answered in the HTML5 spec.
08:32 < Havvy> But seeing all the options to disable JS in browsers, I'm going to say "Yes".
08:32 < sheldonh> what, you're not going to do my reading for me? pffft!
08:33 < Havvy> Nope. I'm not.
08:33 < Havvy> I've going to see if I can get glog working.
08:38 < vrlogrs> guys ..
08:38 < vrlogrs> is there a memory-related bug with 0.10.0 ?
08:39 < vrlogrs> i upgraded from 0.8 today, and suddenly, my node servers are using up 50-60MB more memory than before
08:46 < faceleg> should I trust valgrind in os x 10.8 yet?
08:46 < ningu> faceleg: you've got me experimenting with angular, my head is about to explode
08:47 < faceleg> ningu: lol
08:47 < faceleg> ningu: because awesome?
08:47 < ningu> well, it's pretty awesome but it's also confusing
08:47 < faceleg> ningu: dammit yes it is
08:47 < faceleg> *very* confusint
08:47 < faceleg> it gets less so
08:47 < ningu> yes, it's getting better, slowly
08:47 < faceleg> I think I had say, 5+ epiphanies with it
08:47 < faceleg> where I was like ooooooooooooh
08:48 < ningu> I finally figured out a way to inherit one controller from another kinda
08:48 < faceleg> oh yeah that's weird
08:48 < ningu> I just invoke its controller
08:48 < faceleg> I sort of get that
08:48 < ningu> maybe there's a better way
08:48 < faceleg> how do you do it?
08:48 < ningu>     MatrixCtrl.call(this, $scope, $element);
08:48 < faceleg> hmmm didn't know that onw
08:48 < faceleg> one*
08:48 < ningu> well it's just plain js
08:49 < faceleg> but my controller's were just simple
08:49 < ningu> basically it lets you pull in functionality
08:49 < ningu> my controllers are multiplying rapidly
08:49 < ningu> maybe I'm "doing it wrong" 
08:49 < faceleg> sub controllers work too 
08:49 < faceleg> no idea haha
08:49 < ningu> I know
08:49 < ningu> but these things aren't amenable to that
08:49 < faceleg> <div cont=1> <div cont=2></div></div>
08:49 < ningu> this is like where I want one app behavior but have it be conditional on which "flavor" of controller
08:49 < faceleg> the cont=2 controllers scope shoul dhave the things put on it from cont=1
08:49 < faceleg> as far as I recall
08:49 < faceleg> mm yeah
08:50 < ningu> like, there's a delete record method but it needs to call the right url
08:50 < faceleg> ahah
08:50 < faceleg> maybe it should be a service
08:50 < ningu> how would that help?
08:50 < faceleg> I don't think controllers are supposed to make http calls
08:50 < ningu> oh
08:50 < faceleg> well both controllers woul duse teh sam eservice
08:50 < faceleg> it's like models with Backbone
08:50 < ningu> how do you make a controller use a service?
08:50 < faceleg> angualr has them to, sort of
08:50 < ningu> I don't know backbone
08:51 < faceleg> $scope, $location, ... yourService
08:51 < ningu> oh, that's right, you just magically ... right
08:51 < faceleg> that socketIo example I hastebinned you
08:51 < faceleg> was a service
08:51 < faceleg> yeah magic, haha...
08:51 < ningu> yeah, so does the service ... hrmm
08:51 < ningu> well I will think about it
08:52 < faceleg> here is one example that doesn't look totally stupid at first glance
08:52 < faceleg> http://stackoverflow.com/a/14852393/187954
08:52 < ningu> thing is I don't really want to separately implement the delete method on every controller
08:52 < ningu> I just want to do service.delete(foo)
08:52 < ningu> but the service will have to read my controller's $scope
08:52 < ningu> otherwise it's pointless
08:52 < faceleg> $scope.delete = service.delete?
08:53 < ningu> nah, I don't need to do something hackish like that
08:53 < faceleg> mm
08:53 < ningu> I can just do like ng-click='service.delete(foo)'
08:53 < ningu> as long as the service knows my $scope
08:54 < zomg> ningu: I think to make it less coupled, it might make sense to instead have a function in the controller that passes the necessary values from the scope to the service's method
08:54 < ningu> I suppose
08:54 < ningu> but it will be the same in each one
08:54 < faceleg> mm
08:54 < faceleg> couldn't you do what you are doing with inheritance
08:54 < ningu> just the value will be different
08:55 < faceleg> yeah
08:55 < faceleg> "value"?
08:55 < faceleg> what value?
08:55 < faceleg> the model value?
08:55 < ningu> $scope.foo -- it will always be foo
08:55 < ningu> but the value will not always be the same
08:55 < faceleg> scope.foo('value')?
08:55 < ningu> huh?
08:55 < faceleg> I dont' know
08:55 < faceleg> I'm confused about waht "value" is
08:56 < ningu> it's just an attribute of the $scope object
08:56 < ningu> I set it in my js code
08:56 < faceleg> oh
08:56 < ningu> it only links up with the html because I set a certain chunk as ng-controller="blah" and that's how it knows to use those $scope values for actions defined in that bit
08:57 < faceleg> could you do scope.foo(scope.value)
08:57 < faceleg> or do I still not get it
08:57 < ningu> no, zomg's question was a design question
08:57 < ningu> I know how to code it regardless
08:57 < faceleg> oh right
08:57 < substack> terinjokes: it could be related to the new streams
08:57 < ningu> he was basically saying I'm implementing it as a service but not really decoupling it
08:58 < faceleg> oh right
08:58 < terinjokes> substack: no, the version on npm doesn't contain the 'return dest' fix
08:58 < terinjokes> so .pipe is broken
08:58 < substack> terinjokes: oh that is documented in the handbook actually
08:58 < substack> damn mikeal still hasn't fixed that >_<
08:58 < substack> well anyways you can use fs.createReadStream()
08:58 < terinjokes> substack: i just told npm to install from his github, have no idea why he never published a new release
08:59 < faceleg> ningu: unrelaated. do I need to copy structs I have been given as func arguments if Im' going to pass them off to another thread? how do I know if it's going to be free'd before I'm done? If it helps, this is a const type *
08:59 < faceleg> or can I just put them onto a baton and throw it at the other thread without worries?
08:59 < ningu> if you didn't allocate it you can't assume anything about when it will be free'd unless it's guaranteed somewhere
09:00 < ningu> I don't know what a baton is
09:00 < ningu> guaranteed = the person who wrote it explicitly tells you it won't be free'd till whenever
09:00 < faceleg> oh a struct used to pass data between threads
09:00 < faceleg> oh ook
09:00 < faceleg> so I need to copy each of the struct's values?
09:00 < ningu> I would just copy the whole thing
09:00 < faceleg> on can do that?
09:00 < faceleg> one*
09:00 < ningu> why not?
09:01 < faceleg> i'm noob & c++?
09:01 < faceleg> also, how does one copy something in C++?
09:01 < ningu> Foo *f = (Foo*)malloc(sizeof(Foo));
09:02 < faceleg> and this will deep copy the struct?
09:02 < ningu> memcpy(f, sourceObject, sizeof(Foo));
09:02 < ningu> maybe there is a more C++ way to do it
09:02 < ningu> if it's a class there could be a custom deep copy method when you do Foo a = b;
09:03 < ningu> but if it's just a blob of data you need to copy over byte for byte that will do it
09:03 < faceleg> this is a c struct, from the c lib I'm wrapping
09:03 < ningu> yeah, then do it that way
09:03 < faceleg> memcpy or malloc?
09:03 < ningu> you need both
09:03 < ningu> malloc to allocate the new object, memcpy to copy from the old one
09:03 < faceleg> oh right
09:03 < ningu> and then free when you are done
09:04 < terinjokes> substack: i wouldn't mind a good intro to streams2, fwiw… especially since that bit me earlier today
09:04 < ningu> faceleg: keep in mind I haven't actually done this for real in forever, maybe someone has found some newfangled/better way
09:04 < ningu> but that works
09:04 < faceleg> ningu: meh works is what I need
09:04 < ningu> C, at least, seems to have not changed very much as far as practices go
09:05 < faceleg> ningu: are you using this sort of thing for you rmodels? assuming you are using REST
09:05 < faceleg> http://docs.angularjs.org/api/ngResource.$resource
09:06 < ningu> yeah, I saw that
09:06 < ningu> unfortunately my app doesn't do anything as nice as that so I can't use it
09:06 < faceleg> lol yeah I had that same issue
09:06 < ningu> basically all the html is server-side generated
09:06 < ningu> and I tested it out client-side but it was too slow with 500 table rows
09:06 < faceleg> yeah
09:06 < faceleg> does it have to render all 500 at once?
09:07 < ningu> so I'm just going to use angular to manage the ui interactions
09:07 < ningu> well, I suppose not but that's for if you set the page size to 500
09:07 < faceleg> oh right
09:07 < ningu> and for this app that's a useful setting
09:07 < ningu> actually it goes up to 2000
09:08 < faceleg> jeez
09:08 < ningu> well it's fine if I render it on the server
09:08 < faceleg> fair enough
09:09 < ningu> anyway for the kinds of things you'd be using this site for, which sometimes involves quickly scanning a table of data for something, it helps to not have 70 pages of data
09:11 < faceleg> actually I was wrong
09:11 < faceleg> it seems it must be "OK" to put $http in controllers
09:11 < faceleg> I was under the assumption that it should be out of a controller
09:11 < faceleg> my bad
09:11 < ningu> well, I still will have to ponder the design of this a bit more
09:12 < faceleg> yeah 
09:12 < faceleg> it's confusing
09:12 < faceleg> with other frameworks I've learned one or two big things
09:12 < faceleg> with angular is't like all the things are new things
09:12 < ningu> basically I have 3-4 kinds of records and there can be a link anywhere on any page to (almost) any kind of reord
09:12 < ningu> record*
09:12 < ningu> and those links will pull up a dialog with detailed info
09:13 < faceleg> directive
09:13 < ningu> so I need to be able to pass along those record id's
09:13 < faceleg> with a directive
09:13 < faceleg> I direct you to use a directive
09:13 < faceleg> that was just overkill
09:13 < faceleg> and I don't even know if you should use a directive
09:13 < ningu> ok and how do I pass arguments to directives? just a string?
09:13 < faceleg> but I "feel" it
09:13 < faceleg> element attrs?
09:14 < ningu> yeah... but
09:14 < ningu> ok there's show, edit, and delete actions, and there are the 3-4 record types, and each record has an id
09:14 < ningu> so it would be like foo="show:user:username"
09:14 < ningu> and I split on it
09:14 < faceleg> yeah maybe not then
09:14 < faceleg> more like
09:14 < faceleg> foo
09:14 < faceleg> user="..."
09:14 < faceleg> username="...
09:14 < faceleg> "
09:15 < ningu> as long as I can ultimately rewrite foo as a link
09:15 < faceleg> well
09:15 < faceleg> I don't know if it's going to be what you should do
09:16 < faceleg> but here is some info on binding a directive's attribute to the scope
09:16 < faceleg> http://stackoverflow.com/a/12881431/187954
09:16 < ningu> plus in some cases I have a table and all the actions are the same for a particular column
09:16 < ningu> but I'd just be repeating <foo url="users"> or whatever
09:16 < ningu> I guess that isn't so bad
09:17 < faceleg> a directive can be applied to an ele by using an attr
09:17 < faceleg> doesn' need to be the tagname
09:17 < ningu> I know
09:17 < faceleg> oh
09:18 < ningu> ok and say I want to do something when this thing, which gets re-rendered as a link, is clicked
09:18 < ningu> do I do $element.bind('click', ...) ?
09:18 < ningu> since I can't use ng-click, I have my own directive
09:20 < faceleg> https://groups.google.com/forum/#!msg/angular/5zLSjKrY4Wk/nnxsF76OpXYJ
09:20 < faceleg> ?
09:20 < aMoniker> ningu: $element.on('click', …);    bind() is deprecated
09:21 < faceleg> I think ng-click is something you can copy from
09:21 < faceleg> well there you go
09:21 < ningu> aMoniker: oh, thanks
09:21 < faceleg> brb have to read insurance contract, sigh
09:21 < ningu> hehe ok
09:29 < faceleg> well that was boring
09:35 < faceleg> ningu: std::vector's iterator
09:35 < faceleg> how do I get the value...?
09:35 < faceleg> yes I'm googling as well
09:35 < faceleg> specifically in the first example for this answer: http://stackoverflow.com/a/409396/187954
09:36 < faceleg> if my vector contains T myStruct
09:36 < faceleg> how do I get the equive of myStruct.hat inside my loop?is it it.hat?
09:37 < ningu> can't remember, sorry
09:37 < ningu> oh
09:37 < ningu> yeah, you just dereference it
09:37 < ningu> *it
09:38 < faceleg> *it.hat?
09:38 < ningu> no, that would be it->hat
09:38 < ningu> which is equivalent to (*it).hat
09:38 < faceleg> please explain to me in < 200 lines what "dereference" means
09:38 < faceleg> oh god.
09:39 < ningu> a pointer is a memory address
09:39 < ningu> 32-bit architecture means all memory addresses are 32 bits
09:39 < ningu> likewise for 64-bit
09:39 < faceleg> understood.
09:39 < ningu> if you want to access whatever is stored there, you dereference the pointer
09:40 < ningu> int foo = 1; int *bar = &foo;
09:40 < ningu> that sets bar to the address of foo
09:40 < ningu> then if you do *bar = 2;
09:40 < mvta> morning mates
09:40 < ningu> and check foo it will be 2 as well
09:40 < ningu> if you do, bar = 2; it will be more or less nonsense
09:41 < faceleg> so will *bar = 2?
09:41 < vrlogrs> is there any way i can debug a memory leak for a node server in the terminal?
09:41 < mvta> could anybody recommend me any node.js framework or module or something that provide to me a way to develop similar as Symfony ?
09:41 < ningu> = or ==?
09:41 < faceleg> latter
09:41 < ningu> *bar = 2; is an assignment
09:41 < ningu> equivalent to foo = 2; in this case
09:41 < faceleg> yes I'm a real programmer honest
09:41 < faceleg> so as bar is a pointer reference (right?)
09:42 < ningu> it's a pointer, not a reference
09:42 < faceleg> to make it "act" like a value I have to "dereference" it
09:42 < faceleg> ok
09:42 < ningu> reference is also a technical term, at least in C++
09:42 < faceleg> ok
09:42 < ningu> int bar& = foo;
09:42 < faceleg> so bar is a pointer
09:42 < ningu> that bar is a reference
09:42 < faceleg> to get the var I need to dereference it
09:42 < faceleg> too much too much
09:42 < ningu> basically it's a pointer that C++ derferences automagically
09:42 < faceleg> klaxxons sound in my brain
09:42 < vrlogrs> anyone? :S
09:42 < faceleg> valgrind?
09:43 < ningu> faceleg: pointers and references are the same thing with different syntax, that's all
09:43 < faceleg> valgrind node your_server.js
09:43 < ningu> faceleg: but you should understand pointers first
09:43 < ningu> the syntax is clearer
09:43 < faceleg> ningu: I used to, honest. it was years and years ago however
09:43 < ningu> faceleg: anyway, to access its value, yes, you dereference it
09:44 < ningu> the -> operator is used to access the property of a pointer
09:44 < faceleg> ooooh
09:44 < ningu> so if you have a pointer to a struct and that struct has a property, you do foo->bar to access the bar property of what foo points to
09:44 < ningu> if it was not a pointer you would do foo.bar
09:44 < vrlogrs> anyone know of a way to debug a node server in the terminal? basically looking for memory leaks
09:44 < faceleg> so if mys { int *bar }
09:44 < faceleg> I'd do mys->bar?
09:44 < ningu> if mys is a pointer, yes
09:44 < faceleg> and mys.bar if it was just mys { int bar }
09:45 < vrlogrs> after upgrading to 0.10.0 today, suddenly my servers are using 50-60MB more
09:45 < vrlogrs> with no change in code
09:45 < ningu> faceleg: no
09:45 < faceleg> dammit!~
09:45 < ningu> it doesn't matter what type bar is, it matters what type the variable is
09:45 < aMoniker> is there a decent convention to indicate that a function returns a promise?
09:45 < ningu> struct foo { int bar; }; foo a; foo* b;
09:45 < ningu> faceleg: you would do a.bar and b->bar
09:45 < ningu> same if it's int* bar, it doesn't matter
09:46 < faceleg> oh right
09:46 < ningu> faceleg: also, foo a; allocates "a" on the stack
09:46 < faceleg> so it depends on the "type" that the struct is, pointer of value(?)?
09:46 < ningu> the variable
09:46 < faceleg> variable ok
09:46 < ningu> the struct *is* a type, it doesn't have types :)
09:47 < ningu> foo *b = malloc(sizeof(foo)); allocates "b" on the heap instead of the stack
09:47 < faceleg> give me back pure js
09:47 < faceleg>  /joke
09:47 < ningu> if it's on the heap you always have to do malloc, or new
09:47 < vrlogrs> any clues guys?
09:47 < ningu> or something that calls them
09:48 < ningu> faceleg: I'm surprised you managed to forget this stuff honestly... maybe it was the age I learned it at :)
09:48 < faceleg> vrlogrs: all I can recommend is valgrind
09:48 < faceleg> maybe
09:48 < vrlogrs> what is that?
09:48 < faceleg> I started learning programming when I was 22+
09:48 < ningu> yeah, I learned C when I was 14 or so
09:48 < faceleg> and did it as part of a cogsci degree, equal parts phil, psyc * comp
09:48 < faceleg> well there you go :P
09:49 < faceleg> also I only did C++ for 3 months, it was the first language I learned, and I hated it
09:49 < ningu> I was more confused by perl
09:49 < faceleg> HATED
09:49 < faceleg> lol perl
09:49 < ningu> well, I've been doing perl for half of my life at this point
09:49 < faceleg> I only started liking programming when I realised that phil,psyc would never get me a house
09:49 < ningu> so it's less confusing but it has weird corners
09:49 < ningu> hehe
09:49 < vrlogrs> ok, thanks faceleg -- ill take a look
09:49 < ningu> a house in san francisco is an unlikely prospect
09:50 < faceleg> I have a house in a crap town
09:50 < faceleg> once you get a house the bank sees you differently
09:50 < faceleg> so when I move to a better town
09:50 < faceleg> I have proof that I'm not a massive risk
09:50 < faceleg> banks are dumb
09:51 < aMoniker> if by dumb you mean frighteningly smart
09:51 < ningu> well on the plus side my directive seems to be working
09:52 < faceleg> aMoniker: || the populace is just might dumb
09:52 < faceleg> ningu: at least one of us is "getting" it
09:53 < ningu> I even found a way to check the scope, so I can set some things globally and will be overridden by an attribute
09:53 < faceleg> ningu: wow nice
09:53 < ningu> unfortunately scope: {foo: '@'} will set foo to undefined if you leave out the attribute
09:53 < ningu> so I had to take that out
09:53 < faceleg> care to put htat in a hastebin/blog post for my future reference?
09:53 < ningu> sure
09:54 < ningu> how do you set the language there again?
09:54 < faceleg> change the extension
09:54 < faceleg> magic
09:54 < ningu> hmm ok
09:54 < ningu> http://hastebin.com/gexipotaco.js
09:55 < faceleg> right yeah
09:55 < faceleg> of course
09:55 < faceleg> that's cool
09:55 < ningu> yeah, I don't know if it's elegant or what but it seems to work
09:55 < faceleg> I think, as far as I know, the only place one is allowed to directly change th dom is in a directive
09:55 < faceleg> well it does what you need in one place
09:56 < faceleg> and you can apply it to n elements with minimal fuss
09:56 < ningu> I mean, for a long time people were of the opinion that you shouldn't sprinkle interface functionality across the dom
09:56 < ningu> and we seem to have come full circle
09:56 < faceleg> lol
09:56 < faceleg> yeah
09:57 < Dirkos> What is the best way to load the socket.io.js from the server at the client side? Since the server is not available from http? If i copy that file to my project it still gives me an error
09:57 < ningu> faceleg: you might like this one too, http://hastebin.com/bojayoloca.js
09:57 < ningu> oh, wait, let me put an example in
09:59 < ningu> http://hastebin.com/qesuhokefo.js
10:01 < faceleg> angular is the best
10:01 < faceleg> damn
10:01 < ningu> I also made an ng-show thingy that will fade in/out
10:02 < faceleg> valgrind is apprently useless on os x 10.8
10:02 < faceleg> haha nice
10:02 < ningu> copied someone else's code
10:04 < faceleg> ningu: http://hastebin.com/yohuceqoxa.cpp
10:04 < faceleg> how do I access the value of iterator
10:05 < faceleg> or rather
10:05 < faceleg> how do I get at the git_diff_delta hidden in there somewhere?
10:05 < ningu> with *iterator
10:05 < ningu> oh, wait
10:06 < ningu> *iterator will give you a git_diff_delta*
10:06 < faceleg> ah
10:06 < faceleg> that's what I wnt
10:06 < ningu> if you want a field of it you'd do, (*iterator)->foo
10:06 < faceleg> member reference type 'git_diff_file' is not a pointer
10:07 < faceleg> with (*iterator)->foo
10:07 < ningu> so, (*iterator)->old_file
10:07 < ningu> well, what is old_file?
10:07 < faceleg> not a pointer?
10:07 < faceleg> :P
10:07 < ningu> I mean, you seem to think it has a path property
10:07 < ningu> if it's a plain struct it would be old_file.path
10:07 < faceleg> yeah it's a const char*
10:07 < ningu> oh
10:07 < ningu> well then it has no properties
10:07 < ningu> just a string
10:08 < faceleg> ok
10:08 < faceleg> old_file sorry
10:08 < faceleg> is a struct
10:08 < faceleg> path is a const char
10:08 < faceleg> *
10:08 < ningu> right but what is old_file declared as in git_diff_delta?
10:08 < faceleg> git_diff_file
10:08 < faceleg> git_diff_delta old_file == a git_diff_file
10:08 < ningu> yes, but not a pointer
10:09 < ningu> so it's (*iterator)->old_file.path
10:09 < faceleg> 2no
10:09 < faceleg> yep 
10:09 < faceleg> no = no it's not a pointer
10:09 < faceleg> one day I'll fully get this
10:09 < faceleg> and you will be able to get on with your work peacefully
10:09 < ningu> hehe
10:10 < faceleg> so basically
10:10 < faceleg> if it's not declared as *
10:10 < faceleg> then use . as it's not a pointer and therefore doesn't need to be dereferenced
10:10 < faceleg> else use ->
10:10 < ningu> right
10:10 < ningu> the -> is just to save you some parens
10:10 < ningu> a->b is equivalent to (*a).b, always
10:10 < faceleg> ok
10:11 < faceleg> so is (*a) "referencing" the value ?
10:11 < ningu> yes
10:11 < faceleg> om
10:11 < faceleg> ok*
10:11 < faceleg> is there a less hideous way to do this
10:11 < ningu> in this particular case? I doubt it
10:11 < faceleg> so I don't have (*iterator)-> on every line while I'm converting my struct into a JS Object
10:11 < ningu> oh
10:11 < faceleg> waht about git_diff_delta *temp = (*iterator)
10:11 < ningu> sure
10:11 < faceleg> temp->blah.blah
10:12 < faceleg> and temp will not be a copy
10:12 < faceleg> just another pointer aimed @ iterator's memory ... point
10:12 < ningu> it will be a copy of the pointer :)
10:12 < ningu> but not the object
10:12 < faceleg> yes but not a copy of the struct
10:12 < faceleg> ok
10:12 < faceleg> so I dont have to free it, or I do?
10:13 < faceleg> as in
10:15 < ningu> no
10:15 < ningu> it's on the stack
10:15 < faceleg> that's like telling an antelope that a plane is in the air
10:15 < ningu> it's just a 32 (or 64)-bit int
10:16 < ningu> you don't usually malloc/free ints
10:16 < faceleg> ok
10:16 < faceleg> I hesitate to open another can of worms
10:16 < faceleg> but why?
10:16 < ningu> because they're small and fit on the stack :)
10:17 < ningu> if you do char *foo = (char*)malloc(1024); you have 1024 bytes allocated
10:17 < ningu> somewhere in memory
10:17 < ningu> the pointer foo will be on the stack, i.e. it will be stored in a place associated with the code that's currently executing
10:17 < ningu> the data at foo's address could be anywhere
10:18 < ningu> when you do free(foo) it doesn't free the pointer, it frees up the allocated memory so something else can allocate it
10:18 < faceleg> ok
10:18 < ningu> the C compiler takes care of managing the stack for you and unwinding it and gets rid of the foo pointer when it goes out of scope
10:19 < faceleg> protip: c & their ilk are noob friendly
10:19 < ningu> a pointer is just a variable
10:19 < ningu> it just happens to store a memory address
10:19 < faceleg> es
10:19 < ningu> you don't free() variables, you free memory
10:19 < ningu> which you have requested from the OS
10:20 < ningu> and you don't free mumia unless you're in berkeley
10:21 < faceleg> mimia?
10:21 < ningu> http://en.wikipedia.org/wiki/Mumia_Abu-Jamal
10:22 < ningu> you occasionally see people around here with signs
10:22 < faceleg> oh
10:22 < faceleg> should he be freed?
10:22 < ningu> I have no idea
10:22 < ningu> they think so
10:23 < faceleg> who knows
10:23 < faceleg> just not in my town
10:25 < faceleg> IT'S ALIVE
10:26 < faceleg> in v8
10:27 < faceleg> is copying in-memory data from c structs to v8 handles in preparation for a JS function call considered blocking?
10:32 < Dirkos> I have a chat in my app but what is a good way to protect the messages from xss? Found several things on the web but anyone experience with it?
10:32 < ningu> well that was weird
10:33 < faceleg> what was
10:33 < ningu> my laptop slipped off my lap as I was getting up and somehow the battery got disconnected
10:34 < faceleg> laptop sounds like a tough beast
10:35 < ningu> well, it's fine, just had to re-set it
10:35 < faceleg> mine can't handle being away from mains for more than 0s
10:35 < ningu> definitely never happened before though
10:36 < nathanbl> whats the best way to call a commandline option from node
10:36 < nathanbl> use a child process ?
10:36 < nathanbl> use a promise ?
10:37 < ningu> what do you mean by "call a commandline option"?
10:37 < ningu> call a commandline program?
10:37 < noway421> child process is pretty good
10:37 < nathanbl> I wanna call a php script
10:37 < nathanbl> instaed of using apache
10:37 < noway421> lol
10:37 < nathanbl> to test it out see if it reduces load
10:37 < nathanbl> currently it does an ajax call to apace
10:37 < nathanbl> so remove that
10:37 < nathanbl> :P
10:38 < noway421> use apachebench
10:38 < nathanbl> I don't think relative
10:38 < faceleg> ^^
10:39 < nathanbl> node of course is faster
10:39 < noway421> think relative, whats problem?
10:39 < faceleg> ngnx will likely be what you need
10:39 < faceleg> node isn't really a server
10:39 < nathanbl> i'm already using varnish
10:39 < noway421> apachebench wrote in c++
10:39 < nathanbl> it's not something that can be cached
10:39 < faceleg> noway421: nathanbl wants to use node as a server for PHP?
10:39 < nathanbl> therefore it's best if I completely remove apache
10:40 < nathanbl> no no
10:40 < noway421> i dont know what he want, lol
10:40 < faceleg> nathanbl: if you're looking for a better server then use ngnx
10:40 < faceleg> noway421: neither really
10:40 < nathanbl> faceleg nope
10:40 < noway421> i think he want to benchmark his php site
10:40 < nathanbl> I just want to compare running php from cgi rather then php from apache
10:41 < faceleg> then like noway421 said, use ab
10:41 < noway421> use apachebench!
10:41 < nathanbl> so therefore I would have to basically do a command line php call
10:41 < faceleg> it's not related to apache the server
10:41 < nathanbl> gah
10:41 < ningu> the successor to ab could be called cd
10:41 < faceleg> oh I've got it!
10:41 < ningu> but no one would be able to run it
10:41 < faceleg> use bash!
10:41 < faceleg> haha!
10:41 < faceleg> php your_script &; * a million
10:41 < noway421> lol
10:42 < ningu> hehe
10:42 < nathanbl> :)
10:42 < Ralt> ningu: nice one
10:42 < nathanbl> basically it makes sense to me that removing apache from the process will reduce load on the server
10:42 < nathanbl> so instead of node -> apache ->php 
10:42 < noway421> but...
10:42 < nathanbl> it just goes node -> php
10:42 < faceleg> what?
10:42 < faceleg> node -> apache -> php? waht madness is this
10:43 < noway421> how you would answer to http request without web server?
10:43 < ningu> haha
10:43 < ningu> yeah, wtf is nathanbl trying to do
10:43 < noway421> lol, his mad
10:43 < ningu> php is not a server
10:43 < Ralt> php can include an http server nowadays
10:43 < Ralt> and next version will include it natively
10:43 < ningu> hmm
10:43 < ningu> didn't know that
10:43 < noway421> even javascript can it
10:44 < faceleg> php 5.4 does include server
10:44 <@Nexxy> you could also just execute php with child_process and pipe the stdout to the request object O_o
10:44 < nathanbl> as I said
10:44 < faceleg> which is current version
10:44 < noway421> v8, node.js... you know
10:44 < faceleg> sad that I know that
10:44 < nathanbl> basically just use php 
10:44 < nathanbl> nexxy gets it
10:44 < Ralt> faceleg: afaik, it's just "beta" though
10:44 < ningu> nathanbl: but it won't appear to the php script like a regular request
10:44 < faceleg> Ralt: i've been using it in production for a year
10:44 < Ralt> Oh.
10:44 < noway421> yep, spawn child process
10:44 < nathanbl> ningu that's fine
10:44 < Havvy> Why not use nginx and point to php or nodejs as needed?
10:44 < nathanbl> I can change the script 
10:44 < Ralt> faceleg: is it good?
10:45 < nathanbl> we have a really bad htaccess file
10:45 < ningu> nathanbl: well, sure I guess
10:45 < nathanbl> that I cbf fixing for nginx :)
10:45 < ningu> if it's that easy to change the script I'd probably just rewrite it
10:45 < ningu> in something else
10:45 < nathanbl> so we just use varnish
10:45 < noway421> better use jquery library for this
10:45 < faceleg> +1 jquery
10:45 < nathanbl> the part of making the php run from command line is easy
10:45 < ningu> how fast is php anyway? I've heard very conflicting reports
10:45 < faceleg> ningu: do I need to copy a char variable?
10:45 < ningu> faceleg: a char*?
10:45 < nathanbl> the rewritin it into nodejs would be rather time consuming
10:45 < faceleg> ningu: php is one of the faster web languages
10:45 < faceleg> char (no *)
10:46 < ningu> nope
10:46 < faceleg> ningu: it's also one of the worst
10:46 < faceleg> the php array is an rray AND a hash map
10:46 < ningu> oh, I definitely don't want to discuss whether php is a good or a bad language
10:46 < Ralt> no
10:46 < faceleg> but it's neither when you want it to be
10:46 < ningu> just how fast it is
10:46 < faceleg> pretty fast
10:46 <@Nexxy> and you get to do setup/teardown serialize/deserialize for *every* request :D
10:46 < Ralt> arrays in php are just like arrays in js, really
10:46 < nathanbl> fast enough for facebook :P
10:46 < faceleg> ralt no
10:46 < faceleg> [], {} different
10:46 < noway421> facebook use c++
10:46 < faceleg> in php, [] = {}
10:47 < Ralt> no
10:47 < faceleg> fb special case
10:47 < faceleg> Ralt: yes
10:47 < noway421> yep, hiphop
10:47 < Ralt> fb has stopped using C++
10:47 < noway421> orly?
10:47 < Ralt> it's working on a jit compiler for php now
10:47 < nathanbl> honestly very few websites couldn't be run on php
10:47 < nathanbl> like the top 1%
10:47 < faceleg> in js can you do this? $a = []; $a['hat'] = 'face'
10:47 < Ralt> faceleg: yes
10:47 < noway421> yep
10:48 < ningu> js arrays are a particular kind of object
10:48 < Ralt> in js, arrays are just objects with numeric index and a special length property
10:48 < ningu> yeah
10:48 < noway421> all objects in js
10:48 < faceleg> dammit!
10:48 < faceleg> dammit!
10:48 < ningu> and things like push etc.
10:48 < noway421> :D
10:48 < ningu> as methods
10:48 < faceleg> how can I not know this
10:48  * faceleg hangs head in shame
10:48 < Ralt> which is why I told you js arrays are very much like php arrays :P
10:48 < faceleg> Ralt: I concede the point
10:48 < noway421> but v8!
10:49 < faceleg> dammit! 
10:49 < noway421> It optimize it
10:49 < faceleg> mod please strike the past 30 lines from the record
10:49 < Ralt> http://imgs.xkcd.com/comics/duty_calls.png
10:49 < Ralt> I win! :D
10:50 < Ralt> it's not everyday ~~
10:50 < faceleg> Ralt:  hahahaha
10:50 < noway421> lol
10:50 < noway421> |0
10:50 < faceleg> I was in my anti-php mode
10:50 < faceleg> better switch that off
10:50 < Ralt> hehe
10:50 < Ralt> I don't like PHP either :P
10:50 < faceleg> or whatever excuse makes me look less dumb
10:50 < faceleg> I have to write it every day
10:50 < Ralt> same.
10:50 < faceleg> my fingers curl back from the keyboard
10:51 < Ralt> I prefer JS, but I don't like js either.
10:51 < Ralt> although I write most of my open source projects in it
10:51 < faceleg> I think I prever Cocoa
10:51 < Ralt> I like Lisp.
10:51 < faceleg> but I don't write it hardly
10:51 < faceleg> ningu: howoto hashmap in c++
10:51 < noway421> Haskell
10:52 < ningu> faceleg: there's an STL thing for that
10:52 < Ralt> I tried haskell
10:52 < faceleg> ningu: is it "web scale"?
10:52 < Ralt> and didn't like its over strict typing 
10:52 < noway421> lol, is there any "web-framework" for c++?
10:52 < ningu> if all you need is a hash map, sure
10:52 < Ralt> noway421: cppcms
10:52 < noway421> i think i hear about one
10:53 < noway421> yep, that one
10:53 < faceleg> I present for your inspection, vigil: https://github.com/munificent/vigil
10:53 < faceleg> "Infinitely more important than mere syntax and semantics are its addition of supreme moral vigilance. This is similar to contracts, but less legal and more medieval.
10:53 < faceleg> "
10:53 < Ralt> dunno if you guys are open source contributors, but I've found this very useful since I am: https://github.com/Ralt/easier-git-checkout
10:54 < faceleg> I use zshell + oh-my-zshell which provides git * autocompletion
10:54 < faceleg> Ralt: https://github.com/robbyrussell/oh-my-zsh
10:55 < Ralt> couldn't go all the way with zsh...
10:55 < faceleg> it does all the things
10:55 < Ralt> might be a reason to.
10:55 < ningu> faceleg: so suppose that when I click a button and that opens a modal dialog, I need some particular code to run in that dialog... I guess I'll use a controller
10:55 < faceleg> ningu: yeah I think that'll work
10:55 < faceleg> on the outermost ele of your dialog?
10:55 < ningu> sure
10:55 < faceleg> oh that's right I'm supposed to be looking up hsahmaps
10:56 < ningu> std::map
10:56 < ningu> C++ has a lot of stds
10:56 < faceleg> haha
10:56 < Ralt> well, about data structures it's mostly about std::map and std::vector though
10:57 < faceleg> ugh I'm going to haveto do map[old_file + '-' + new_file] = line_content
10:57 < faceleg> well array of line content
10:57 < faceleg> ugh so gross
10:57 < nathanbl> gah
10:57 < Ralt> why?
10:57 < faceleg> "simply wrap git_diff_tree_to_tree" has taken many more hours
10:57 < faceleg> because one callback gets teh diff
10:57 < nathanbl> I can't do my hack, unless I do some session fun :(
10:57 < Ralt> oh, diffs.
10:57 < faceleg> delta struct I mean
10:57 < faceleg> another gets the hunk data
10:57 < faceleg> another gets each line
10:57 < Ralt> well your structure looks good enough for a diff
10:58 < faceleg> and I have to glue it all together, each diff into a ... no wait
10:58 < faceleg> screw doing this in C++
10:58 < ningu> so now the question is... and this shouldn't be hard... how do I do an ajax call to fill up the dialog? I guess I need the $http guy
10:58 < faceleg> ningu: mmm
10:58 < faceleg> you could
10:58 < faceleg> ... specify a src for the controller
10:58 < faceleg> and uh
10:58 < faceleg> a service for the data?
10:58 < faceleg> but not sure how to tell service what id's etc to use
10:58 < ningu> well, I suppose
10:58 < faceleg> I'd say do it how you think
10:59 < faceleg> and if it doesn't "feel angular" then it isn't and start looking 
10:59 < faceleg> yea screw this data management crap in JS
10:59 < faceleg> I'm gonig to consider just dumping all the things to JS
10:59 < faceleg> *js = c++
10:59 < faceleg> and handling it there
10:59 < ningu> but the thing is the button to open the dialog is not *in* the dialog element of course
10:59 < faceleg> C++ no fun for this type of thing
10:59 < ningu> so it doesn't have access to that controller
11:00 < Ralt> you're writing a node.js native module?
11:00 < faceleg> yeah
11:00 < faceleg> ningu: yeah that's a tough one
11:00 < Ralt> good luck :)
11:00 < ningu> faceleg: I shall ponder it
11:00 < Ralt> I'd say: don't do it till perf needs it
11:00 < faceleg> Ralt: yeah
11:00 < Ralt> and you can probably find better perf in js by changing your algorithm
11:00 < faceleg> Ralt: it's open source so I like tomake it as good as possible
11:00 < Ralt> unless it's raw cpu punching
11:01 < faceleg> it's just getting the right lines assoc. with the right files
11:01 < faceleg> lame thing is libgit2 doesn't give the delta struct an id
11:01 < Ralt> then do it all async with js, it's good enough
11:02 < Ralt> a friend had to use C++: he encoded/decoded mp3 in real time
11:02 < Ralt> that's... a real use case.
11:02 < faceleg> well
11:02 < faceleg> I *have* to use C++ because I'm wrapping a C library 
11:02 < faceleg> for use in node
11:03 < faceleg> I'm wrapping libgit2 into an async node lib
11:03 < faceleg> only way to do async in my project is to use C++ and threads
11:03 < Ralt> why don't you simply use CLI?
11:03 < faceleg> hence bothering
11:03 < faceleg> because that is lame
11:03 < Ralt> spawn is async afaik
11:03 < faceleg> spawn is lame
11:03 < Ralt> :)
11:03 < faceleg> npm install nodegit, use it like a node module
11:04 < Ralt> or another way: write the protocol to talk with git in js.
11:04 < faceleg> not npm install nodegit oh snap no git installed
11:04 < faceleg> Ralt: this is exactly what I'm doing
11:04 < faceleg> libgit2 *is* git
11:04 < Ralt> but yeah, I was looking for something like this yesterday
11:04 < Ralt> no I meant
11:04 < Ralt> rewrite libgit2
11:04 < faceleg> in js?
11:04 < Ralt> yeah
11:04 < faceleg> I don't think that would be wise
11:04 < faceleg> wrapping it is fine
11:05 < faceleg> and I get to capitalize on the large commuinty that libgit2 has
11:05 < faceleg> and it will be fast, and async
11:05 < Ralt> can you bundle it though? for windows/linux/osx?
11:05 < faceleg> yes
11:05 < faceleg> libgit2 is cross-platform
11:05 < Ralt> license allows you to bundle?
11:05 < faceleg> gpl
11:05 < Ralt> so your code has to be too
11:05 < faceleg> as I said, it's open source
11:05 < faceleg> and no my code doesn't
11:05 < faceleg> only if I distribute it
11:06 < Ralt> well, if you push it on npm...
11:06 < faceleg> but yes the lib is
11:06 < faceleg> I'm not selling the lib
11:06 < faceleg> I will use it in an app I'm making
11:06 < faceleg> that will sit on the server
11:06 < Ralt> oh, you won't put it on npm? :(
11:06 < faceleg> it is on npm
11:06 < faceleg> but I need it for a site I'm making
11:06 < faceleg> and the other git wrappers didn't live up to my expectations
11:06 < Ralt> yeah
11:07 < faceleg> so I asked to help with nodegit dev
11:07 < Ralt> the only git wrapper I found just sucks
11:07 < faceleg> and here we are
11:07 < faceleg> which was it?
11:07 < faceleg> I've likely used it
11:07 < Ralt> git-wrapper
11:07 < faceleg> lol
11:07 < faceleg> is it the one that only works in node .6?
11:07 < Ralt> didn't look at that
11:07 < Ralt> I looked at the code
11:07 < Ralt> it's just a wrapper around spawn
11:08 < faceleg> yeah
11:08 < Ralt> the code is like 20 lines
11:08 < faceleg> lame
11:08 < Ralt> I can do that myself, thanks ~~
11:08 < faceleg> I know
11:08 < faceleg> right
11:08 < Ralt> oh btw, I want to boast a little bit
11:08 < Ralt> https://github.com/Ralt/or/issues/1#issuecomment-14940411
11:08 < Ralt> Array.prototype.find will come in es6
11:09 < Ralt> and it's exactly what my "or" module is :P
11:09 < faceleg> nice one
11:09 < Ralt> the "it's only 20 lines" made me think of this...
11:10 < Ralt> a 5 lines modules can be very nice.
11:10 < Ralt> git-wrapper definitely isn't.
11:10 < faceleg> few things that just wrap system calls are that great
11:11 < Ralt> true
11:12 < Ralt> the example up there is exactly why I love open source btw
11:12 < Ralt> anyone can change the world
11:21 < faceleg> ningu are you there?
11:21 < ningu> yeah
11:22 < faceleg> is this somehow wrong? std::hash_map <std::string, std::vector<std::string> fileDeltasContent;
11:22 < faceleg> I want a hash of file delta vectors
11:22 < Havvy> Yes.
11:22 < faceleg> Havvy: thanks.
11:22 < Havvy> You are missing a closing >
11:22 < faceleg> haha
11:22 < faceleg> I mean more idealogically
11:22 < faceleg> as in "would a C++ do this"
11:22 < ningu> it looks ok other than that
11:23 < faceleg> but thanks, i'll amend my source code
11:23 < Havvy> Idealogically, it looks correct.
11:23 < faceleg> Wouldn't want to go to jail or get shot or anything
11:24 < Havvy> Then quit aiming the gun at your foot. ;)  :P
11:24 < faceleg> Havvy: this is C++ I'm not even sure what end is teh gun
11:25 < faceleg> *bang* what was that
11:25 < Havvy> Hint: Anything about C compatibility is the wrong end.
11:25 < ningu> well you can inject into directive arguments too
11:25 < ningu> cool
11:25 < faceleg> oh yeah
11:25 < faceleg> angular is a bit of a junkie lik that
11:26 < ningu> it's weird that factory creates a singleton
11:27 < frdmn> has someone some minutes to look at my node js hubot script, i have some questions and i am a total node newbie
11:27 < frdmn> :/
11:45 < saschagehlich> Hey, when I do `npm install` it will also install the devDependencies, but the devDependencies' devDependencies - example: https://travis-ci.org/compoundjs/nib/jobs/5566951
11:45 < saschagehlich> co-assets-compiler has stylus as a devDependency, but it was not installed - therefor, my tests fail :/
12:38 < MI6> joyent/node: Outsider v0.10 * f56bb1c : doc: fix typo in crypto docs - http://git.io/J-Z6mA
12:49 < MI6> joyent/node: Trevor Norris v0.10 * a0867e1 : node: revert removal of MakeCallback  In 0168109 an implementation of Mak (+1 more commits) - http://git.io/rMML2A
12:52 < Industrial> I can link a nide server to the web through HTTP, but how does a node connect and talk to another node? What's the easiest way to do that? (Preferrably 'raw', without a library)
12:52 < Industrial> s/nide/node/g
12:52 < geNAZt> with a tcp server socket ?
12:52 < Industrial> for example
12:53 < geNAZt> well thats the answer
12:53 < geNAZt> with a tcp socket :D
12:54 < geNAZt> and maybe a udp broadcast
12:54 < Industrial> yeah okay say my API on the server takes a string and returns a string. it does random work to the string. If I send an even from the client it will be a data even right? How do i know on the client server that when I sent one data event that when I get a response back, that response is for a perticular data event that I sent?
12:55 < Industrial> event*
12:55 < geNAZt> what ? :D
12:55 < Industrial> haha :P
12:56 < geNAZt> i dont understand what you want to do
12:56 < Industrial> say I have 3 things, internet <-> website <-> apiserver
12:56 < geNAZt> yes
12:56 < Industrial> for each request I might or might not do a call to the api server. that's essentially sending a data event right?
12:57 < geNAZt> well you ask the api or not
12:57 < Industrial> can I get back something for each data request (so I can fire a callback?)? ?
12:57 < geNAZt> what was wrong with federation ?
12:58 < Industrial> I don't understand that if it's a stream which is a queue like thing, how the 'response' from the api server is identified to be belonging to a request i made
12:58 < geNAZt> with an identifier
12:59 < Industrial> so a client would cache all its pending requests for which there is no response yet, and when a response occurs find the request it belongs to, remove it and send out the response to the internet?
12:59 < geNAZt> { 'reqID': 1, 'request': { 'make': 'something' } } => { 'reqID': 1, 'response': { 'done': 'making something' } }
13:00 < geNAZt> yes
13:00 < geNAZt> thats how proxies work :D
13:00 < geNAZt> it holds the connection open until a response arrives
13:00 < Industrial> ok, so now it makes sense how this pipes & filters things work :P
13:00 < Industrial> yeah but what if I send 300 requests asynchronously
13:00 < Industrial> the order is not guaranteed at all
13:00 < Industrial> right?
13:01 < geNAZt> yes it is
13:01 < geNAZt> tcp is guaranteed orderd
13:01 < Industrial> so for each data event i send , wach data event I get back is belonging to the last write I did?
13:01 < geNAZt> no
13:01 < geNAZt> if you send 1,2,3,4,5,6 in one write
13:02 < geNAZt> i can be 2 or more chunks (data events) on the other side
13:02 < Industrial> right
13:02 < geNAZt> in the first data event there is 1,2
13:02 < geNAZt> then 3,4,5
13:02 < geNAZt> and the 6
13:02 < geNAZt> one write => three data avents
13:02 < geNAZt> events*
13:03 < geNAZt> it depends on the tcp frame size
13:06 < Industrial> https://github.com/Industrial/registry/blob/master/index.js this is what I have now, sorry for the lack of docs. It's supposed to be mapping host/port to name/version for clients, so they can do registry lookups through this service without needing to know the host
13:07 < Industrial> geNAZt: there's nothing wrong with federation per se, I'm just doing this to learn how it works. Seeing as I'm not getting these kinds of fundamental right, It's a good thing to learn =D
13:08 < geNAZt> yes on qour setup you should get "lol" in one chunk
13:08 < geNAZt> but your setup would break on long writes
13:08 < Industrial> long writes of what?
13:09 < geNAZt> data
13:09 < geNAZt> try: var str = ""; for(i=0;i<256000;i++) { str += "a"; } client.write(str);
13:10 < Industrial> why would it fail?
13:10 < geNAZt> because it is too long for one data event
13:10 < geNAZt> it will split up into more data events
13:11 < Industrial> so I should buffer data and look for \n's
13:11 < Industrial> or \r\n ?
13:11 < geNAZt> depends on what os you have and what data you have
13:11 < geNAZt> if you send json data
13:12 < geNAZt> a search for \n would be fine
13:12 < geNAZt> if you start to send binary files over it (download or upload of binary data) it will fail
13:12 < Industrial> I might do JSON yeah
13:12 < Industrial> right
13:12 < geNAZt> so maybe do not search for chars
13:13 < geNAZt> you need some kind of framing (https://github.com/geNAZt/tcp-stream-muxer/blob/master/lib/framecoder.js)
13:13 < geNAZt> that is my framing i am using in a tcp based game framework
13:18 < Industrial> geNAZt: could I use JSONStream for this communication?
13:19 < geNAZt> if you use pure jsons yes
13:19 < geNAZt> but if you only use json you dont need a framing
13:20 < geNAZt> you can use the \n to end a json line
13:20 < Industrial> k. I was also thinking of moving a pure JSOn message over the network, eventually forming a HTTP response, being sent back to the prox to ebe sent to the client
13:21 < Industrial> proxy to be, sorry slow internet :(
13:21 < geNAZt> yes its better then send the http request arond
13:21 < Industrial> yeah and I can use a message header field to be an array of nodes it travelled across for easy debugging etc
13:21 < geNAZt> yes
13:22 < geNAZt> with a json you are more flexible then with a http request
13:22 < Industrial> but how hard does the overhead of serializing and deserializing in each node hit your http response time?
13:23 < geNAZt> try it, build a test case
13:23 < Industrial> i should :) ty for the info
13:23 < geNAZt> np
13:23 < Industrial> filter ALL THE PIPES!
13:23 < geNAZt> :D
13:27 < ningu> well, I am officially a convert to angular.
13:27 < ningu> finally starting to make a bit of sense.
13:28 < Industrial> Anyone have an example of e.g. 10MB of JSON data, something that will definately generate more then one data request? or can I fake it by doing .write('{a: '); .write('123'); ?
13:28 < geNAZt> you can make an array of pushes
13:28 < geNAZt> and then stringify it and send it
13:29 < Industrial> k
13:30 < geNAZt> >> var arr = []; for(i=0;i<65535;i++) { arr.push([1,2,3,4]); }; console.log(JSON.stringify(arr).length);
13:30 < purr> geNAZt: undefined; Console: 655351
13:30 < fb55> Industrial: "{'a':'" + Array(5e7).join("a") + "'}";
13:53 < Industrial> https://gist.github.com/Industrial/2da4610bc4a3abed9c74 is what I have now. What if line 74 fails ?
13:54 < geNAZt> well for that you can use a try catch (which will catch a thrown object) or use domains 
13:54 < Industrial> domains
13:55 < Industrial> ?
13:55 < geNAZt> http://nodejs.org/api/domain.html
13:55 < Industrial> I'm very inclined to use https://github.com/dominictarr/JSONStream here ..
13:56 < geNAZt> yes that can work but you close the connection after sending the json
13:56 < geNAZt> if you use and pipe the jsonstream into the tcp socket
14:04 < geNAZt> and it has currently a bug with huge amount of json data
14:07 < Industrial> hmm, ok
14:11 < kayokenx5> anyone know what the best operating system for general development is?
14:11 < geNAZt> the best development os is the same os you would use for the production server
14:14 < Industrial> https://gist.github.com/Industrial/beb27bef7fe81940af3c
14:15 < Industrial> so it happens twice in the framing
14:15 < Industrial> right?
14:15 < geNAZt> and now you have the thing i said :D
14:15 < geNAZt> you should use a chunk buffer
14:15 < geNAZt> and append to it if you have no \n
14:16 < geNAZt> if you have a \n split it at the \n
14:16 < geNAZt> and json.parse the 0th index and the next chunk starts with the 1th index
14:16 < geNAZt> you know what i mean ?
14:17 < Industrial> yes I understand
14:17 < Industrial> but I'd have used a string. I guess a BUffer is nicer
14:18 < geNAZt> a buffer cant be changes
14:18 < geNAZt> a buffer is always at a fixed size
14:23 < Industrial> https://gist.github.com/Industrial/beb27bef7fe81940af3c/ef0d174d6da6dfbfe8c1e1274f2e676c87a00920#file-index-js-L74
14:23 < Industrial> howcome last is undefined here?
14:24 < kenperkins> it's too early
14:24 < geNAZt> no
14:24 < geNAZt> its not
14:24 < Industrial> no its undefined all the way through 100 writes
14:24 < geNAZt> the definition of last is on connection
14:24 < geNAZt> the usage on data of that connection
14:24 < Industrial> some scope is lost?
14:24 < geNAZt> so the variable should be defined if the connection comes in
14:24 < geNAZt> maybe yes
14:24 < geNAZt> append it to the c object
14:25 < geNAZt> c.lastData
14:25 < geNAZt> or something
14:27 < Industrial> geNAZt: doesn't seem to work :S I tried binding the forEach callback to the connection callback this scope aswell
14:28 < geNAZt> well it should work oO
14:29 < geNAZt> if i test it it works
14:32 < Industrial> https://gist.github.com/Industrial/beb27bef7fe81940af3c/a33945830529c2fefe85cfc870a29a18270475f1#file-index-js-L76
14:32 < geNAZt> does it work ?
14:33 < Industrial> no, i get the error in the bash.output.txt 1000 times
14:33 < Industrial> since its undefined (c.last)
14:34 < Industrial> man, might aswell use a while loop
14:34 < geNAZt> i get an output like this: http://hastebin.com/bocisehame.cmake
14:35 < Industrial> geNAZt: weird
14:35 < Industrial> (that it doesnt work for me)
14:36 < geNAZt> weöö i only tested the network part
14:36 < geNAZt> not the Q part
14:36 < geNAZt> or the redis part
14:36 < geNAZt> only the network one
14:36 < geNAZt> https://gist.github.com/geNAZt/2a0bb1b54787c68133a7
14:37 < geNAZt> oh i found your error :D
14:38 < geNAZt> https://gist.github.com/geNAZt/2a0bb1b54787c68133a7#file-test-js-L36
14:38 < belfare> hi there, I'm look at the jade templating module… I was hoping to actually just write the pages directly in html5… is there a reason to go one way or the other?
14:38 < geNAZt> there is no variable named "msg" so it is undefined
14:38 < kenperkins> man I hate api design
14:38 < Industrial> ohoh, woops
14:39 < Havvy> belfare: If you want to write in HTML syntax, Jade is not the tool for you.
14:39 < geNAZt> belfare: use swig :D
14:39 < Havvy> In which case I would recommend Swig or EJS
14:39 < Industrial> ok got it working now, thx geNAZt 
14:39 < geNAZt> np
14:40 < belfare> and I can still use express+swig no issues?
14:40 < geNAZt> yes
14:40 < belfare> brilliant
14:41 < belfare> i really am enjoying node… very intuitive and loving the native non-blocking structure
14:41 < tuhoojabotti> ME too
14:41 < geNAZt> it is not non-blocking
14:41 < geNAZt> but okay :D
14:41 < belfare> well
14:41 < kenperkins> async i/o !== non-blocking :D
14:42 < belfare> close enough for me
14:42 < kenperkins> it's important to understand the difference. if you don't have something in a chain of callbacks that yields to I/O, you could block for a damn long time
14:43 < geNAZt> kenperkins: right :D
14:44 < belfare> I understand the difference, but in other languages I need to manage the callback and threading scenarios myself… in any case… i'm liking it so far
14:44 < belfare> still some quirks, but it's getting much better
14:44 < geNAZt> yes but it isnt non blocking
14:44 < kenperkins> this, for example, is one reason why if you're going to build a lot of templates for front-end markup with node, I'd consider making templating it's own webservice that you async out to
14:44 < kenperkins> as templating is quite expensive
14:45 < geNAZt> kenperkins, MVP ? :D
14:45 < kenperkins> rather, templating *can be expensive
14:45 < kenperkins> uh, no?
14:45 < kenperkins> lol
14:45 < kenperkins> no time, just started a new job
14:45 < geNAZt> no MVP would save you the time of compiling a template
14:45 < belfare> well, I was going to do a combination of pulling the raw HTML files from disk, caching, and regenerating dynamic content only when necessary
14:45 < geNAZt> cause the client makes it
14:46 < geNAZt> its like xslt
14:46 < kenperkins> wait, MVP as minimum viable or MVP as in?
14:46 < belfare> should alleviate the need to constantly orchestrate views.
14:46 < geNAZt> Model, View, Presenter
14:46 < kenperkins> oh
14:46 < kenperkins> well, I'm not against client templating
14:46 < kenperkins> but the reality is it sucks balls for SEO
14:46 < geNAZt> correct :D
14:47 < belfare> dynamic page caching has worked well for me in the past
14:47 < geNAZt> the most new html5 / async / socket things suck balls for seo :D
14:47 < kenperkins> yep
14:47 < saschagehlich> can i somehow force npm to install devDependencies recursively? right now it only installs the devDependencies of my module, but not THEIER devDependencies (just their dependencies)
14:47 < kenperkins> why would you need their dev dependencies?
14:48 < kenperkins> unless you're programmatically using their tests, etc
14:51 < belfare> ken… do you recommend pulling static pages (login and such) directly from disk (or cached in memory); and only render the dynamic stuff as needed, or do you recommend pulling those elements via API calls into the browser?
14:51 < belfare> just curious
14:52 < geNAZt> the second one with the api async loading can cause ball sucking for seo :D
14:52 < kenperkins> so I have a particular "attitude" wrt how you factor node web-apps
14:52 < belfare> but if it's all 'after login' stuff… that should mess with SEO too much
14:52 < kenperkins> first and foremost, any asset that is served is always from a buffer
14:52 < kenperkins> in theory, you should have nginx and/or CDN in front of node.js, so imho you should have very minimal asset serving from node
14:53 < belfare> i would agree with that
14:53 < kenperkins> secondly, for pages, don't make them rich SPA on the client unless there's truly a UX benefit
14:53 < kenperkins> i argue that heavy client JS just for the sake of it is not, by itself, a good thing
14:53 < shmoon> how do you guys do validations for forms?
14:54 < kenperkins> shmoon: there's lots of toolsets
14:54 < kenperkins> client or server
14:54 < belfare> well, if you have a CDN in front… you can aggressively cache the page, excluding the dynamically rendered components via API calls...
14:54 < shmoon> like? I am looking at node-validator, but i wonder how to form a list of error messages from that
14:54 < kenperkins> we always server the HTML with no-cache
14:54 < kenperkins> serve rather
14:55 < kenperkins> we micro-cache the HTML at the nginx layer
14:55 < belfare> wut… with no-cache? why?
14:55 < kenperkins> ~5 sec I think
14:55 < belfare> yeah that's fine… you can do that with your CDN as well if needed
14:55 < kenperkins> because I *HATE* pages that swap in the user login via client js
14:55 < kenperkins> or any auth'd parts of the chrome
14:56 < belfare> no, after login I would recommend a full redirect… that allows for greater offload; on the authenticated portions.. you cache the full html base page, and pull in necessary components as needed… within reason
14:57 < kenperkins> for example, if you have markup that says "Hi, Belfare" in your chrome
14:57 < kenperkins> you either have to template that in via client code
14:57 < kenperkins> or have the markup include it from the server
14:59 < saschagehlich> kenperkins: i need their dev dependencies because my module needs their dev dependencies to exist (for testing)
15:00 < kenperkins> belfare: maybe I'm missing something? :D
15:00 < belfare> heh… maybe i'm not explaining it welll
15:02 < belfare> I do want the fastest approach, but I would also use caching of some type… I can cache api calls via some identifier… so dynamic content could be orchestrated at the host for 'authenticated' pages… if the pages aren't authenticated; I can probably just cache the whole thing for a long time (at least in my instance) so I don't need to use JS of anytype to pull content… only internally to speed up the rendering
15:02 < belfare> host=client on that one
15:02 < shmoon> so how do you guys handle validations server side?
15:03 < geNAZt> shmoon, with regex
15:03 < belfare> validations.. depends on the input
15:03 < shmoon> i'd like to see some code geNAZt 
15:03 < shmoon> like if i have 10 fields i write functinsons separately for each
15:04 < swaj> node-validator
15:04 < geNAZt> you can
15:04 < belfare> shmoon… traditionally you would write a validator for each content type...
15:04 < shmoon> but whats a proper decent reusable way
15:04 < swaj> node-validator
15:05 < belfare> e-mail gets a validator, alphaNum is a validator, alphaNumSpecial is one… etc.
15:05 < geNAZt> https://github.com/chriso/node-validator
15:05 < geNAZt> has all this
15:05 < belfare> yeah
15:06 < belfare> and built in filters… nice
15:06 < geNAZt> and there is a express middleware to build it in easy
15:06 < geNAZt> https://github.com/ctavan/express-validator
15:10 < belfare> alrighty… now for a more philosophical question… if I want good performance, and scalability for big data; what data store should I use?  someone recommended Couch or Cassandra
15:10 < geNAZt> depends on the type of data
15:11 < geNAZt> and what you want to do with it
15:11 < shmoon> i heard for big data people use hadoop and hbase
15:11 < belfare> I'd prefer document, so I can store profiles and such
15:11 < belfare> need to retrieve them relatively fast
15:12 < belfare> the DB shouldn't get bigger than a few terrabytes though
15:12 < belfare> so… probably not really big data...
15:13 < belfare> cassandra looks like a good fit for what i'm needing to do
15:14 < belfare> decent performance, good supportability
15:14 < belfare> I should never need more than a few TB… at least I think that now… :)
15:31 < ningu> ng-init='id="#{i.entry._id}";note="#{i.note || ''}"'
15:31 < ningu> wheeee
15:32 < ningu> I decided not to compromise on quotes
15:46 < mscdex> node.js rules!
15:46 < shmoon> did you use mongoose?
16:20 < Sven_vB> how do i best sandbox foreign javascript in my node? can i just prepend code that nulls out global variables and replaces require() with my own implementation of it?
16:21 < niggler> Sven_vB sandbox node itself
16:21 < MI6> joyent/node: Fedor Indutny master * 14a8fb8 : tls: write pending data of opposite side  Fix stucked CryptoStream behavi - http://git.io/qXnECA
16:21 < Sven_vB> niggler, you mean fire up a separate instance of node for each untrusted function i'd like to execute?
16:22 < niggler> no i meant run node in a chroot jail et 
16:22 < Sven_vB> yeah ok, i implied that :)
16:22 < MI6> joyent/node: Fedor Indutny v0.10 * b5ddc0c : tls: write pending data of opposite side  Fix stucked CryptoStream behavi - http://git.io/ziKaIg
16:22 < niggler> you can run one instance of node within a chroot jail and have it run all of the untrusted functions
16:23 < niggler> unless you mean something different
16:23 < Sven_vB> so make a separate chroot and separate node process ... is the easiest way to drop capabilities like require and global object access?
16:24 < Sven_vB> in addition to cripple its network of course
16:24 < niggler> var require = function(){}
16:24 < Sven_vB> i think there must be easier ways
16:24 < niggler> i think you can use vm.runinnewcontext
16:24 < niggler> *vm.runInNewContext
16:25 < fusiongrokker> anyone know where I can find a list of valid timezone strings ala "Europe/Copenhagen" or "America/Los_Angeles"? Best if I can request them from a library, but I'll settle for a hard-coded list somewhere which I can embed in my app...
16:26 < Sven_vB> i read about that, but it still sounded quite expensive
16:26 < Sven_vB> i'll read again, maybe i missed something
16:27 < fusiongrokker> hm, this works: maybe I'll make a module that contains its data: http://en.wikipedia.org/wiki/List_of_tz_database_time_zones
16:27 < Sven_vB> now i remember, it was the Caveats section that made me search other solutions
16:28 < Sven_vB> fusiongrokker, you could ask debconf which selections it would accept
16:28 < niggler> Sven_vB the safest way is to chroot node
16:32 < Sven_vB> niggler, that of course. i'll still try and find something cheaper. maybe even indeed fallback to use caja or adsafe
16:40 < geNAZt> well which Caveat does hurt you ?
16:41 < geNAZt> maybe a domain + contextify could do the job
16:43 < prettymuchbryce> Is it okay to user node modules (exports object) as classes in my project, and if so is there a way to define a constructors for a module ?
16:43 < prettymuchbryce> use*
16:49 < Sven_vB> geNAZt, especially that part aboud sandboxes "their behavior varies between different versions of Node."
16:49 < Sven_vB> but i'll have a look into contextify, too :)
16:56 < Kakera> I'm trying to install serialport on windows and I get "fatal error C1083: Cannot open include file: 'atlstr.h'", any suggestions?
16:58 < ForSpareParts> Could someone explain how Jade works? I know you can either have templates compiled client-side or have them precompiled, but it looks like "precompiled" templates still run some kind of helper function on the client side?
16:59 < ForSpareParts> I'm used to HAML in Ruby, where the server compiles the markup, hands it off, and the client just gets straight HTML.
16:59 < Sven_vB> Kakera, do you have that file anywhere in the first place?
17:00 < Kakera> Sven_vB, no idea, but it worked before
17:01 < freewil> ForSpareParts, jade is the same - normally you just use it to generate html to output directly to the browser, but you can also compile the templates and render html on the client side instead
17:01 < Sven_vB> ForSpareParts, i think pre-compile there means to compile the template. the template still has slots for data. to get plain markup, you'd have to render the template, possibly with data for those slots
17:02 < Sven_vB> Kakera, so what did you change since then?
17:03 < Kakera> Sven_vB, upgraded node to 0.10, then downgraded
17:03 < ForSpareParts> freewil: So, how would I do it the first way? It seems like the docs only have instructions for client-side rendering.
17:04 < freewil> ForSpareParts, are you using connect or express?
17:05 < ForSpareParts> freewil: At the moment, I'm making something in node-webkit. I'd be interested to know how it works in a more normal scenario, too, of course, since I'll probably end up building a proper web app in Node at some point.
17:06 < freewil> ok, well this is what you want: https://github.com/visionmedia/jade#public-api
17:06 < freewil> under Public API
17:06 < freewil> so what you probably want to do is call fs.readFile() to a get a string of a jade template from a file
17:07 < freewil> and then once you read the jade template from a file call jade.compile()
17:07 < freewil> then you will have your compiled template which you can pass your variables into (locals)
17:09 < ForSpareParts> And when I call that function with my variables, it'll output an HTML string?
17:09 < freewil> yeah
17:09 < ForSpareParts> shiny
17:09 < ForSpareParts> thanks
17:18 < keeger> i wrote a simple console app to start another process and kill it.
17:18 < keeger> but how can i check that it is dead?  
17:19 < keeger> when i issue child.kill, the event for close/exit is not triggered on the child object
17:20 < Goddel2> Good morning, just wondering whats the best way to test how many request per second my nodejs server can handle?
17:20 < geNAZt> apache benchmark
17:21 < Goddel2> do it from my computer or the ec2 instance?
17:21 < Goddel2> i keep crashing my router i guess
17:21 < geNAZt> no you dont crash your router
17:21 < geNAZt> you only would fuck up your firewall (so turn it off for the test)
17:23 < Goddel2> I've been trying jmeter, everytime i create 3k threads my wireless dies
17:23 < geNAZt> or you could use load.io
17:23 < geNAZt> or loader.io
17:23 < geNAZt> i dont know the excact domain
17:26 < Goddel2> loader.io looks cool
17:26 < keeger> so i downloaded the binary 0.10 for ubuntu and i can't seem to get npm working
17:28 < w0uter> what's the problem keeger?
17:28 < keeger> turns out i suck with symlinks
17:28 < w0uter> ah
17:28 < keeger> could use some docs on the site about the binary locations
17:28 < w0uter> i'm glad you already found out, I have no idea what I'm talking about
17:29 < keeger> there's not script to setup links or anything :(
17:31 < w0uter> isn't it the easiest to just install nodejs and npm via aptitude?
17:32 < niggler> don't do that w0uter 
17:32 < w0uter> why not?
17:32 < niggler> when you decide ubuntu sucks 
17:33 < w0uter> then what? ;)
17:33 < niggler> or when you decide to start improving node
17:33 < niggler> you won't have strange OS issues
17:33 < keeger> it seemed to me that upgrading was easier if i used binary packages
17:33 < keeger> node doesn't seem to have a lot of dependencies
17:34 < keeger> but i might have to now, cuz npm isn't quite right heh
17:34 < niggler> w0uter i still use debian :)
17:34 < niggler> so packages aren't really updated quickly
17:35 < w0uter> lol i'm completely oblivious as to how to install anything without aptitude or ubuntu software center
17:35 < Industrial> Anyone use zmq? https://gist.github.com/Industrial/1ca7e30da1f5e69b4b9c
17:35 < w0uter> might need to look into that
17:35 < Industrial> Why am I only seeing one res message
17:35 < Industrial> (with id 0)
17:36 < keeger> i wish i knew wehre to put the node_modules folder.  i symlinked npm and it seemed ok, but after installing a module, it says it can;t find it when i say require
17:36 < keeger> but npm shows it installed!
17:36 < w0uter> you mean after globally installing it?
17:37 < niggler> keeper did you install using -g?
17:37 < keeger> no -g
17:37 < niggler> then it installs in the node_modules subdirectory
17:37 < niggler> and you should be able to run from that directory
17:38 < keeger> i did it with -g same problem heh
17:38 < keeger> but i think i know how to fix it now
17:39 < w0uter> ok great :)
17:41 < keeger> or not
17:41 < keeger> pos!
17:42 < vrlogrs> hey guys
17:42 < w0uter> are you running the npm install commands inside your project folder (where your app.js or something like that is located) ?
17:42 < vrlogrs> does anyone here use socket.io with node.js and is seeing major memory usage from it?
17:42 < keeger> w0uter, i did, but i'm also doing it with -g now
17:43 < vrlogrs> my mem usage jumps from 3mb to 30mb as soon as socket.io is requirede
17:43 < keeger> npm show ps-node shows me it's installed i think
17:43 < w0uter> -g means global, so that's not necessary in most cases
17:43 < purr> w0uter: There's More to Life Than Being Happy - Emily Esfahani Smith - The ... <http://www.theatlantic.com/health/archive/2013/01/theres-more-to-life-than-being-happy/266805/>
17:44 < w0uter> npm install should just create a node_modules folder in the folder you're currently in, and install the module inside that folder
17:44 < keeger> interesting, list shows an error with the module
17:45 < vrlogrs> before, i used just 3mb ..
17:45 < keeger> installing it without -g worked
17:45 < vrlogrs> ever since updating node and the modules, it jumped from 3mb to 30mb
17:45 < vrlogrs> is this normal?
17:46 < w0uter> lol purr
17:46 < w0uter> installing with -g can be useful at times keeger. If it doesnt work, it's probably because you didnt use sudo
17:48 < keeger> i did use sudo.  i removed and installed it with -g and it lists ok now. but no workie in my app
17:48 < vrlogrs> anyone got any tips?
17:49 < w0uter> which module are you using keeger?
17:50 < keeger> ps-node
17:51 < w0uter> let's see if it works for me
17:52 < keeger> ah ha!
17:52 < keeger> i needed to set an env var
17:53 < w0uter> great ;)
17:53 < w0uter> someday I'll also try to walk the world of linux without aptitude
17:53 < w0uter> some day
17:53 < keeger> :)  now i can kill my child procs and know when they are actually dead
17:54 < w0uter> nice :D
17:54 < keeger> i wonder if it is a bug in child_processes that the exit() callback doesn't fire 
17:54 < Kakera> has anyone here experienced "fatal error C1083: Cannot open include file: 'atlstr.h': No such file or directory" when compiling serialport on windows?
17:57 < vrlogrs> can someone at least tell me if they use socket.io and if so, which version?
17:59 < keeger> thx for your help guys
18:00 < padre> does anyone khow how fork process http reqest and response objects
18:01 < niggler> are there any known npm permissions issues when using a git endpoint dependency?
18:01 < niggler> for some reason a module with a git dependency seems to mess up the permissions of /usr/local/lib/node_modules
18:08 < vrlogrs> going from 3mb -> 9mb (express) -> 11mb (socket.io) -- is this normal??
18:08 < geNAZt> yes
18:08 < peterschmidler> How can i convert a string to a color that I can apply darken(color, 30) to. I get RGB or HSL value expected, got a literal white... 
18:08 < bingomanatee> Are there any physics majors here? trying to turn http://www.energy.gov.yk.ca/pdf/computer_models_wind_flow_mesoscale_mountainous_terrain.pdf into a simulation of global wind, and my physics/math skills are tapping out. 
18:09 < peterschmidler> ^In Stylus, of course ;)
18:10 < peterschmidler> I created the string like this: new stylus.nodes.Literal('white')
18:12 < bingomanatee> https://github.com/harthur/color-convert
18:13 < vrlogrs> i dont understand .. loading up a node server seems to be consuming 50-60MB of ram 
18:13 < vrlogrs> but, the server process is only using 11MB
18:13 < vrlogrs> does node.js have a leak or something?
18:13 < geNAZt> no
18:14 < geNAZt> at what value are you looking ?
18:14 < peterschmidler> bingomanatee: The stylus documentation says stylus supports the #rrggbbaa notations e.g.  #fc08 // => rgba(255,204,0,0.5)
18:15 < vrlogrs> geNAZt: im using at the % in top command
18:15 < vrlogrs> it says 3.1%
18:15 < vrlogrs> which is about 15mb
18:15 < geNAZt> the % in top is the rss
18:16 < geNAZt> if you use process.memory() and look at the heap it is different
18:16 < vrlogrs> so, it should be using 50-60mb? o.O
18:17 < vrlogrs> until yesterday, it was working fine -- after updating to 0.10 and socket.io, the mem usage is off the charts
18:17 < geNAZt> http://hastebin.com/julunogoyi.lua
18:17 < geNAZt> thats my server
18:17 < geNAZt> without socket.io
18:17 < geNAZt> first is heap used / heap allocated - rss (the value you see in top)
18:18 < vrlogrs> so, 51mb is what that process is using?
18:18 < geNAZt> so a nodejs webapp consuming 50-60+ MB of rss is normal
18:18 < geNAZt> 51 mb is that what v8 has allocated in his heap
18:19 < geNAZt> u use 29 MB of it (variables, objects) javascript
18:19 < vrlogrs> can i reduce it initially, and have it dynamically increasing?
18:19 < geNAZt> all other things like c++ modules + nodejs natives will be added
18:19 < geNAZt> it increases dynamicly
18:20 < geNAZt> http://hastebin.com/kojubiduyu.lua
18:20 < geNAZt> as you see here (a complete startup from the server)
18:20 < geNAZt> it starts at 20 MB
18:20 < geNAZt> and if you add things it consumes more memory
18:21 < vrlogrs> but, is this from the new updates?
18:21 < geNAZt> no
18:21 < vrlogrs> cause until yesterday, before i updated everything, it was hardly using 20mb
18:21 < geNAZt> all node versions do that
18:22 < vrlogrs> that is odd :(
18:22 < geNAZt> wait i test that with a 0.8 node
18:22 < vrlogrs> 0.8.3 i think i had
18:23 < geNAZt> http://hastebin.com/tubemejufo.lua
18:23 < vrlogrs> its just mind blowing really .. in my vps, with 5 servers running, i was using about 40% of my ram .. now, im using 81%
18:23 < geNAZt> 0.9.9
18:24 < geNAZt> and it uses 20 MB less ram
18:24 < geNAZt> oO
18:24 < vrlogrs> see what i mean
18:24 < vrlogrs> 0.8.3 used even less i bet
18:24 < geNAZt> i dl 0.8.22
18:25 < vrlogrs> just seems like theres alot of garbage running :P
18:25 < vrlogrs> with the new versions
18:26 < geNAZt> http://hastebin.com/duheveliju.lua
18:26 < geNAZt> 0.8.22
18:26 < vrlogrs> basically 20mb less with older versions
18:27 < geNAZt> what was the last version before 0.10 ?
18:27 < vrlogrs> did nobody notice this? o.O
18:28 < geNAZt> i am testing the lastest release before 0.10
18:28 < vrlogrs> stable release?
18:28 < geNAZt> http://hastebin.com/mamelitavu.lua
18:28 < geNAZt> 0.9.12
18:29 < geNAZt> no latest unstable before 0.10.0
18:29 < geNAZt> 0.8.22 was the latest stable before 0.10
18:29 < vrlogrs> wow - see how much less ram
18:29 < vrlogrs> thats ridiculous
18:29 < geNAZt> http://hastebin.com/duheveliju.lua => 0.8.22
18:29 < geNAZt> http://hastebin.com/kojubiduyu.lua => 0.10.0
18:29 < geNAZt> http://hastebin.com/tubemejufo.lua => 0.9.9
18:30 < geNAZt> http://hastebin.com/mamelitavu.lua => 0.9.12
18:30 < vrlogrs> so, does anyone know why theres such a crazy increase in usage now?
18:30 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:31 < geNAZt> i must be a change between 0.9.12 and 0.10.0
18:31 < vrlogrs> depressing .. im gonna have to upgrade my vps
18:32 < geNAZt> use older versions of node ?
18:32 < geNAZt> or do you have code requiring node 0.10 ?
18:32 < vrlogrs> well, ive upgraded all my modules ..
18:32 < vrlogrs> not sure how it will fair
18:32 < geNAZt> they should run with 0.9.12
18:32 < vrlogrs> and, im not really sure how to downgrade :S
18:33 < geNAZt> well try it running on an older stable
18:33 < geNAZt> and if that doesnt go try the latest unstable 0.9.12
18:33 < geNAZt> and file a issue :D
18:34 < alexfu> Hello guys, I'm having some trouble saving an image to disk from raw data. After the image is saved, I can't seem to view it. I'm using the fs.writeFile() method. Is there a better way to do this?
18:35 < vrlogrs> ok .. ill try some stuff -- thanks for the help geNAZt
18:35 < geNAZt> np
18:36 < OliverJAsh> when i update the package.json file with a new version of some dependency, what's the best way to tell npm to apply those changes (install the newly referenced version)?
18:37 < OliverJAsh> npm update will do all modules. will npm update <module> do the job?
18:37 < geNAZt> delete the module
18:37 < geNAZt> and reinstall it
18:38 < fusiongrokker> anyone want to offer feedback before I npm publish this? https://github.com/atuttle/node-tz-db
18:39 < geNAZt> fusiongrokker, maybe you should add a number of seconds ?
18:40 < fusiongrokker> geNAZt: good thought. minutes should be sufficient, I think that the few places that don't use full hours use 30 minute increments
18:40 < jamesflorentino> Question,  In a tile-based game with around, say 100 entities? Is it a good idea to use EventEmittter as a Base Class for each unit?
18:40 < geNAZt> well the tought i had was (new Date().getTime() - tz.tz[req.locale].timeoffsetInMS)
18:40 < geNAZt> or something
18:41 < geNAZt> so that you can bind it to moment.js
18:41 < geNAZt> or some other date manipulation
18:41 < geNAZt> (i would use it for it)
18:41 < fusiongrokker> true, but to be fair you could multiply minutes
18:41 < geNAZt> yes ofc
18:42 < geNAZt> but the db should give a value i can calculate with
18:42 < fusiongrokker> moment also supports larger chunks ;)
18:42 < fusiongrokker> moment().add(-5, 'hours')
18:42 < geNAZt> yes
18:43 < geNAZt> but the current db you have made doesnt give me the chance to get the raw number of addition
18:43 < geNAZt> that i have to make in moment
18:43 < geNAZt> and another thing
18:43 < geNAZt> it would be nice that i can search for locale strings
18:43 < geNAZt> :D
18:43 < geNAZt> but thats far beyond your db :D
18:44 < fusiongrokker> what do you mean? what sort of api?
18:44 < geNAZt> tz.getTimeZone('de_de')
18:44 < geNAZt> or ('en_us')
18:44 < fusiongrokker> ah
18:44 < fusiongrokker> so filter by locale
18:44 < geNAZt> so i can feed in something out of the i18n module
18:44 < fusiongrokker> sure. I'd accept a pull request for that ;)
18:44 < geNAZt> :D
18:46 < geNAZt> http://david.uebelacker.ch/2010/05/13/java-retrive-locale-and-timezone-from-request/
18:46 < geNAZt> a little table :D
18:48 < fusiongrokker> "This solution doesn’t work for countries with more than one timezone"
18:48 < geNAZt> yes
18:48 < geNAZt> but better then nothing :D
18:49 < geNAZt> because that mapping would be better then no mapping
18:49 < geNAZt> because no browser sends its timezone
18:51 < Aria> Wow. And SCREWS speakers of other languages.
18:52 < Aria> That's horrible.
18:52 < geNAZt> well
18:52 < geNAZt> again its better than nothing
18:52 < Aria> I'm pretty sure it's not.
18:53 < Aria> I mean, IP country is a better match than that...
18:53 < geNAZt> well better then displaying all times in the seervers timezone
18:53 < geNAZt> yes you could use geoip for guessing the ips locale
18:54 < Aria> fusiongrokker: Any reason you sourced that from Wikipedia and not the Olsen database?
18:54 < geNAZt> but again there should be a function that can search a timezone depending on the locale string
18:54 < Aria> Sure, if you give all the possible timezones in a list.
18:54 < Aria> Which is all timezones because PEOPLE TRAVEL.
18:54 < geNAZt> okay 
18:54 < Aria> I speak Spanish, my locale is set to en_UK, and I'm -0400.
18:54 < geNAZt> then leave it
18:54 < geNAZt> -_-
18:54 < purr> geNAZt: ಠ_ಠ is an IRC client/IRC client framework.
18:54 < geNAZt> yes and ?
18:55 < fusiongrokker> Aria: link? I went with wikipedia because it was the first I found and seemed comprehensive.
18:55 < geNAZt> geoip would tell me taht your ips locale is es
18:55 < geNAZt> you never get 100% correctness on this
18:55 < geNAZt> but you can get far to it
18:55 < Industrial> Can anyone help me with zeromq? https://gist.github.com/Industrial/1ca7e30da1f5e69b4b9c/9e76ca306765cdd74d869dab6417df728e7e13b9#file-client-js-L27
18:56 < Aria> fusiongrokker: http://en.wikipedia.org/wiki/Tz_database; http://www.iana.org/time-zones
18:56 < Aria> geNAZt: Actually, geoIP would tell you that my locale is se_SE often, but that's another matter. The rest of the time it would be en_US.
18:56 < Aria> Half-solutions like this are just horrible for users because it does magic that nobody understands.
18:57 < fusiongrokker> Aria: I think this is where the Wikipedia data is sourced from; and wikipedia's formatting is far easier for me to scrape through..
18:57 < geNAZt> well and if you can change it ?
18:57 < geNAZt> like you can change the language of the site ?
18:57 < Aria> ... but my timezone doesn't depend on the language I speak.
18:57 < geNAZt> loooool
18:58 < geNAZt> you dont understand or ?
18:58 < Aria> Changing the timezone would be acceptable. 
18:58 < geNAZt> Language: [dropdown of langauges], Timezone: [dropdown of timeszones]
18:58 < Aria> That's reasonable. As long as it's initializing defaults, that makes more sense.
18:58 < geNAZt> it starts guessing if there is not value that the user has given
18:59 < geNAZt> and if the user changes it it uses that
18:59 < Aria> That's relatively reasonable UX
18:59 < geNAZt> or you could use a socket.io call to ask the browser
18:59 < geNAZt> in which timezone he is
18:59 < icodeforlove_> whats that website that lets you create a demo node server, is like the jsfiddle for node.js
19:00 < Aria> cloud9?
19:00 < geNAZt> icodeforlove_, cloud9 can do that
19:00 < icodeforlove_> theres another one though
19:00 < icodeforlove_> it works just like jsfiddle
19:00 < alexfu> I can't seem to save an image from raw data properly... http://paste.kde.org/698660/ the resulting file is not readable. Any suggestions?
19:01 < geNAZt> http://jsapp.us/
19:01 < geNAZt> ?
19:01 < icodeforlove_> :(, man i can't believe i lost it
19:01 < icodeforlove_> it was on HN a while back, ill link you when i figure it out
19:02 < Aria> alexfu: Well, you should use createWriteStream and pipe, but that's neither here nor there. Is what you're getting actually a jpeg? 
19:02 < geNAZt> http://jsapp.us/ <=====
19:02 < geNAZt> icodeforlove_
19:02 < icodeforlove_> @geNAZt it was much slicker than that
19:02 < alexfu> Aria: yes. the image i am receiving is a JPEG
19:03 < geNAZt> but it does that what you search :D
19:03 < alexfu> Aria: i hard-coded the filename/extension for testing purposes
19:03 < Aria> alexfu: The hard-coded filename isn't an issue -- you're just buffering. Oh! As a string.
19:03 < Aria> There's your problem. Javascript strings aren't arrays of bytes. You want buffers, and to concatenate them.
19:03 < icodeforlove_> @geNAZt Aria found it, https://runnable.com/
19:04 < geNAZt> ah nice
19:04 < geNAZt> bookmarked :D
19:04 < Industrial> nice
19:04 < Industrial> ANyone here use zeromq?
19:05 < geNAZt> Industrial, no sorry
19:05 < alexfu> Aria: oh damn. didn't realize I was appending to a string.
19:07 < Industrial> geNAZt: I guess it's not really zeromq specific, the problem is https://gist.github.com/Industrial/1ca7e30da1f5e69b4b9c/1f9cdb563145da61cae1e9a195b5d1cce4c802a4#file-client-js-L27
19:07 < geNAZt> yes but where does the message come from ?
19:07 < Industrial> from the serverj in the other file
19:08 < geNAZt> well maybe append an identifier to the data ?
19:08 < fusiongrokker> geNAZt: added seconds
19:08 < geNAZt> fusiongrokker, nice
19:08 < Industrial> the problem is I don't know if I can just liberally attach event listeners inside a method like that. they have to be cleared when the data arrives or something?
19:08 < Aria> That's definitely zeromq specific, since most other socket APIs have a 1:1 mapping of receiver to socket
19:09 < geNAZt> well you have the point where the http request arrives
19:10 < geNAZt> and if you add an id to each request
19:10 < geNAZt> you know which response goes to which request
19:16 < codingstream> anyone using digital ocean hosting?
19:27 < alexfu> Aria: when you say 'pipe', could you elaborate?
19:29 < Aria> req.pipe(fs.createWriteStream(file))
19:30 < Aria> plumb the two together, let them handle the details. Rather than buffering the whole thing in ram.
19:30 < fusiongrokker> geNAZt: converted to index.json so that it's even useful outside of node
19:31 < michael-robinson> Seen this? http://sokolovstas.github.com/SublimeWebInspector/
19:32 < Aria> I did. Looks super fun
19:33 < alexfu> Aria: so if I understand correctly, the new piece of code would be http://paste.kde.org/698684/
19:34 < Aria> Pretty much. Or wait for end, then res.send. But yes.
19:34 < Aria> (also, careful, you have ;); in there)
19:34 < alexfu> oops
19:35 < alexfu> Aria: image is still unviewable
19:35 < Aria> Hm. What's the file command say about it?
19:36 < mscdex> alexfu: what is the content-type of the request?
19:36 < alexfu> Aria: dest.jpg: JPEG image data
19:37 < mscdex> ah ok
19:38 < mscdex> alexfu: any difference if you replace res.send() there with `req.on('end', function() { res.end(); });` ?
19:39 < alexfu> mscdex: content type seems to be.. application/x-www-form-urlencoded
19:39 < MI6> joyent/libuv: Ben Noordhuis master * ab935a2 : include: use x macros for uv_any_{handle,req} unions  Generate the member - http://git.io/_0Genw
19:39 < mscdex> well that's odd....
19:40 < mscdex> is this from a form with a file input element?
19:42 < alexfu> mscdex: no. I'm testing using CURL.
19:42 < mscdex> alexfu: what options are you passing to curl?
19:43 < alexfu> mscdex: well, I can definitely tell you i'm not setting headers. 
19:43 < mscdex> right
19:44 < alexfu> mscdex: but even setting Content-Type to 'image/jpeg', doesn't fix the issue.
19:44 < mscdex> usually when there's file(s) being uploaded, the content type is `multipart/form-data` or something
19:45 < mscdex> are the original and uploaded file sizes even the same?
19:46 < alexfu> mscdex: actually, no. the source is ~300KB larger than the one i'm saving.
19:46 < mscdex> alexfu: and you tried delaying res.send() until the req's 'end' event?
19:47 < mscdex> it might be cutting the connection before all the data gets there
19:49 < alexfu> mscdex: so your suggestion was to do this? http://paste.kde.org/698690/
19:49 < mscdex> well, yeah, but res.send('hello world'); or something instead of res.end();
19:49 < mscdex> or manually do res.writeHead(200); res.end();
19:50 < mscdex> inside the callback
19:50 < alexfu> mscdex: no change.
19:51 < geNAZt> how can i catch a process exit on windows ?
19:52 < geNAZt> on linux i get a SIGTERM or a SIGINT if i Strg^C the app
19:52 < mscdex> geNAZt: process.on('exit', function(){}); ?
19:52 < geNAZt> it doesnt work
19:52 < geNAZt> https://gist.github.com/geNAZt/0a84482e29c08379b3da
19:52 < geNAZt> i have this
19:52 < geNAZt> on linux it works
19:52 < geNAZt> on windows it doesnt
19:54 < mscdex> geNAZt: this works for me: https://gist.github.com/mscdex/a9ad19bb13e16a432348
19:54 < geNAZt> yes if the node process exits itself
19:54 < geNAZt> but try a setInterval(function() {}, 5000);
19:54 < geNAZt> and Strg^C it
19:55 < geNAZt> on linux you get a signal
19:55 < geNAZt> on windows you have no chance
19:55 < mscdex> well, Windows doesn't really have "signals"
19:55 < geNAZt> yes i know
19:55 < geNAZt> but the exit event should fire if the app i going to be shutting down
19:55 < geNAZt> but this isnt the case
19:55 < niggler> what does npmjs.org use for processing markdown?
19:56 < mscdex> niggler: marked
19:56 < niggler> and how frequently is it updated
19:56 < mscdex> https://npmjs.org/package/marked
19:56 < niggler> actually nvm he hasn't version bumped yet
19:56 < mscdex> npm-www is still using 0.2.4
19:58 < tklun> Anyone here have any experience running MongoDB on a Raspberry Pi? I'm wondering if that's too much for a Pi to handle.
19:58 < geNAZt> well the rasp has very limited memory
19:58 < geNAZt> so it isnt the best idea
19:59 < alexfu> mscdex: so, any idea why I could be losing bytes?
19:59 < tklun> Limited memory, and limited storage space. Do you have any other recommendations?
19:59 < mscdex> alexfu: not sure, i've never run into that. but the content-type doesn't seem right....
19:59 < geNAZt> dont use a dbms on a rasp :D
20:00 < alexfu> mscdex: i changed it to multipart/form-data
20:00 < tklun> geNAZt, yeah, I'm leaning that way. I'm logging data with it, but it might make sense to send it elsewhere.
20:00 < alexfu> mscdex: i wonder if curl could be the problem... ?
20:01 < geNAZt> yes but the storage should be on a computer that has more memory / storage
20:01 < mscdex> alexfu: what arguments are you passing to curl?
20:01 < mscdex> it should send the right content-type automatically
20:02 < alexfu> curl -X POST -H "Content-Type: multipart/form-data" -d @/home/alex/data/source.jpg http://localhost:3000/
20:03 < alexfu> mscdex: 
20:03 < alexfu> mscdex: wait...
20:03 < alexfu> mscdex: i may have solved it
20:03 < mscdex> :-)
20:04 < tklun> geNAZt, I'm trying to build a node alternative to an existing php/mysql project. So I was hoping that maybe there would be something that had less of a 'barrier to entry' to get people using the Node version. But oh well.
20:04 < alexfu> mscdex: yep... I ended up using the --data-binary flag instead of the -d flag...
20:06 < faceleg|work> tklun: I can't imagine mongo running well on such a tiny thing
20:06 < faceleg|work> esp considering they way it allocates space for its dbs
20:07 < tklun> Worse than Mysql?
20:07 < faceleg|work> well
20:07 < faceleg|work> I think my default it allocates 500MB for a db
20:07 < faceleg|work> even if the db is using 1 MB
20:07 < tklun> ha
20:07 < faceleg|work> then if you use 501 MB, it goes to 1GB
20:07 < tklun> yeah that wouldn't work...
20:07 < faceleg|work> it's engineered for massive data
20:08 < faceleg|work> It's configurable, but that is the paradigm for mongo when it comes to allocating space
20:08 < faceleg|work> once you reach the current allocation it doubles it
20:08 < tklun> I'm not storing stupid amounts of data, but I will be logging it very consistently for a days. So eventually space will be an issue.
20:08 < faceleg|work> `yeah
20:08 < faceleg|work> yeah*
20:08 < faceleg|work> can you log it in mysql or even a flat file
20:09 < faceleg|work> and the periodically either gzip it or ideally move it off to a more appropriate file server?
20:09 < tklun> they're currently logging to flat files, but 'want to move it to a db'
20:09 < faceleg|work> why?
20:09 < tklun> because.
20:09 < faceleg|work> Aha! Because reasons.
20:09 < faceleg|work> Can't refute tyhat
20:09 < tklun> I'm not sure they're thinking it through, but that's their project.
20:09 < Industrial> All this code does what it says (to me): https://gist.github.com/Industrial/1ca7e30da1f5e69b4b9c/7855875f1845189d6ff0febb4b0c4aa61e2b6285 but I still don't understand how to make PortClient#register/unregister/query asynchronous.
20:09 < tklun> why they're doing it in php is beyond me anyway, but hey, whatever
20:10 < faceleg|work> I'd like to know their reasons - sounds silly to me
20:10 < faceleg|work> I mean
20:10 < faceleg|work> yeah +1 for why using php
20:10 < niggler> screw php
20:10 < tklun> their reasons, as far as I know, are that they're php developers
20:10  * faceleg|work hugs niggler
20:10 < faceleg|work> well that's not a reason
20:10 < faceleg|work> that's lazy
20:11 < faceleg|work> php is not even a hammer
20:11 < niggler> there needs to be a gateway drug
20:11 < faceleg|work> let alone a universal one
20:11 < tklun> heh, well, if any of you guys are homebrewers and want to help with a Node version of an arduino temperature controller
20:11 < tklun> hit me up
20:11 < niggler> something that eases transition from php to nodejs
20:11 < Industrial> Anyone have an idea on my zeromq problem?
20:11 < faceleg|work> niggler: I think it's called client side js
20:11 < tklun> I'm a lone node guy in a room of php guys
20:11 < tklun> heh, nice
20:11 < Industrial> I've just gone and implemented the whole API I had planned for it, but it still doesn't work in an async way on the client :(
20:12 < faceleg|work> I just don't know how anyone could *like* php
20:12 < tklun> by never trying anything else?
20:13 < faceleg|work> even then
20:13 < tklun> heh
20:13 < faceleg|work> I work with a guy who knows several languages, although none of them as well as PHP
20:13 < faceleg|work> but still
20:13 < faceleg|work> he tried ruby under the tutelage of a pro for a month and *hated* it, I mean couldn't stand it
20:13 < tklun> the current project's codebase is pretty rough, but that was never the focus as much as getting it to work; so now there are some excited php guys who want to rebuild it
20:13 < faceleg|work> he does love windows though
20:14 < faceleg|work> ... in php
20:14 < faceleg|work> no matter what it's going to be rough
20:14 < Industrial> Anyone have an example of a ZeroMQ network service/server that does multiple things request/reply style e.g. it offers an interface to talk to? Right now I have register(name, version, host, port), unregister(name, version) and query(name, version).
20:14 < niggler> php is the windows of web development?
20:14 < tklun> it's python AND php
20:14 < faceleg|work> niggler: YES
20:14 < Industrial> .NET/Spring
20:14  * Industrial ducks for cover
20:14 < tklun> might have to borrow that quote
20:15 < faceleg|work> niggler: https://twitter.com/codeofinterest/status/313382049442582531
20:15 < niggler> ++ faceleg|work 
20:15 < Industrial> #zeromq is le dead :(
20:15  * faceleg|work hopes his boss doesn't see
20:17 < mscdex> geNAZt: readline uses raw mode to detect ctrl-c as 'sigint' on Windows
20:17 < mscdex> geNAZt: so here's a solution that basically does what readline does: https://gist.github.com/mscdex/a9ad19bb13e16a432348
20:18 < OliverJAsh> hey, if i update the version of a dependency in package.json, what's the quickest way to install the changes? npm update <package> just seems to use the default version, not the one specified in package.json.
20:19  * Aria goes back to figuring out how level-scuttlebutt works
20:19 < tklun> faceleg|work, thanks for the tips
20:20 < faceleg|work> tklun: np hope it was helpful
20:20 < faceleg|work> OliverJAsh: tried npm install?
20:20 < tklun> Helpful: yes. Though I'm not sure I'll be able to match the "ease of use" of a php/mysql solution. 
20:20 < geNAZt> mscdex: there is no other way ?
20:21 < OliverJAsh> faceleg|work: would that recognise the change in my package.json and only install that change?
20:21 < geNAZt> i an depending on the normal behaviour of the stdin (emit ever line as data event)
20:21 < mscdex> geNAZt: not currently, i don't know if it's just something node hasn't implemented or what
20:21 < geNAZt> which the rawMode would break
20:21 < faceleg|work> OliverJAsh: I don't know
20:21 < faceleg|work> tklun: if it's a PHP dev's idea of ease of use it probably isn't easy to use
20:22 < tklun> Then the race is on...
20:24 < tklun> it's actually more of an 'easy to install' thing, getting Node on a Pi sucks.
20:24 < geNAZt> so i have to built a workaround
20:24 < geNAZt> dislike :D
20:25 < faceleg|work> tklun: bash!
20:25 < tklun> it's like a 3 hour compile..
20:25 < mscdex> geNAZt: looks like this could be of use: http://msdn.microsoft.com/en-us/library/ms686016%28VS.85%29.aspx
20:27 < geNAZt> does any readable stream has the rawMode ?
20:27 < geNAZt> so that i could copy the stdin
20:27 < geNAZt> one for normal line emit
20:27 < geNAZt> and one for raw mode
20:28 < Aria> So make a simple line buffer.
20:28 < geNAZt> and even sigterm doesnt get through
20:29 < geNAZt> the exit event on windows is shit
20:29 < mscdex> isaacs: node v0.10 docs say "v0.10.0-pre" at the top
20:30 < Aria> https://github.com/aredridel/node-linebuffer is simplistic but does the job, geNAZt.
20:30 < Aria> (not streams2, but I should port that soon)
20:31 < Kakera> I reinstalled visual studio and I'm still getting "Cannot open include file: 'atlstr.h': No such file or directory" when trying to install node-serialport
20:31 < geNAZt> well it depends on sys
20:31 < geNAZt> which is gone i think
20:31 < Kakera> does anyone have any idea what could be causing this?
20:32 < faceleg|work> Kakera: I'd say atlstr.h is missing
20:32 < geNAZt> well i will file a issue for this
20:32 < Kakera> faceleg|work, why would it suddenly become missing if it worked before?
20:33 < faceleg|work> Kakera: it might not have been missing before?
20:33 < faceleg|work> does node-serialport list any dependencies?
20:34 < Industrial> How do I make this API asynchronous? (see also line 10) https://gist.github.com/Industrial/1ca7e30da1f5e69b4b9c/2ec45c115b73d7d5a8d45aca956f0481f694749f#file-client-js-L47
20:34 < Kakera> no
20:34 < tklun> Kakera, yes it does.
20:35 < Kakera> tklun, except for visual studio obviously
20:35 < Kakera> tklun, which, as I mentioned, I have just reinstalled
20:35 < mscdex> Industrial: it looks like it's "async" already
20:36 < Industrial> mscdex: well, yes, up to the point ot line 10 in client.js
20:36 < Industrial> of*
20:36 < faceleg|work> Kakera: did you install vs 2010?
20:36 < geNAZt> https://github.com/joyent/node/issues/5054
20:36 < Kakera> faceleg|work, yes I did
20:36 < Industrial> I'm not sure how to get it from there (or somewhere else) into a callback then provided to register/unregister/query.
20:36 < mscdex> Industrial: what do you mean? register() is just sending stuff on the socket
20:36 < geNAZt> can someone look for it and say if they can understand what i mean ?
20:37 < mscdex> Industrial: store the callback?
20:38 < mscdex> geNAZt: if zeromq has no way to associate requests with responses, then you'll have to keep your own queue
20:38 < mscdex> er
20:38 < mscdex> Industrial: ^
20:38 < geNAZt> wrong guy :D
20:38 < Industrial> https://gist.github.com/Industrial/1ca7e30da1f5e69b4b9c/06d1ea41d9424895dccc784a39aa8581c1399096#file-client-js-L31
20:38 < faceleg|work> Kakera: paste the full installation output
20:38 < Industrial> this is not really async, it's just calling the callback rightafter sending to the socket
20:38 < tklun> node-serialport has dependencies, but it seems you're having issues before you get to that point
20:38 < Industrial> how do I call the callback after the data for that request has come back on the socket?
20:39 < mscdex> geNAZt: so it seems libuv actually already has support for the control handler that i mentioned a bit ago
20:39 < geNAZt> yes but node doesnt use it then
20:39 < mscdex> Industrial: that's what i'm talking about
20:39 < mscdex> Industrial: you store the callback and execute it when the data comes in
20:39 < Industrial> mscdex: srry, still had to code it out cause I didn't unsderstand how to do it
20:39 < Industrial> ah
20:39 < Kakera> faceleg|work, https://privatepaste.com/46df7b7b5d
20:39 < Kakera> I doubt it's going to help though
20:40 < Industrial> mscdex: so it is handy, after all, to communicate request/response id's?
20:40 < mscdex> Industrial: like i said, i'm not familiar with zeromq's protocol, so if there is no built-in way to associate requests with responses, you'll have to do it yourself one way or another
20:40 < Industrial> (because else when data arrives how do I know which of the saved callbacks to call)
20:41 < mscdex> Industrial: whether that solution is using your own in-band request/response id-type thing, or forcing everything to be in-order
20:41 < faceleg|work> Kakera: http://social.msdn.microsoft.com/Forums/en-US/Vsexpressvc/thread/e8d7f018-de5d-4ad5-ab14-dfc8a9a49a53/
20:41 < faceleg|work> Kakera: did you find that when you were googling?
20:41 < Kakera> faceleg|work, yes
20:42 < Kakera> faceleg|work, but if you read what I said above, you'll see that it worked before
20:42 < Kakera> also, it works perfectly on another computer which also has the express version
20:42 < faceleg|work> Kakera: http://forums.d2jsp.org/topic.php?t=36830040&p=
20:42 < tklun> Anything change with your python install?
20:42 < faceleg|work> Kakera:  it worked before you reinstalled VS
20:42 < Virunga> Could you help to understand why this code http://pastie.org/6585688 serves the 5 parallel requests node by default sends for each connection, then it gets stuck for a few minutes and the serves another 10 requests?
20:42 < Industrial> mscdex: assuming it's in order (it's bahviour has led me to believe so ..), I should just keep an array and array.splice(0, 1) and .push() it? is splice a heavy operation?
20:42 < Kakera> faceleg|work, no, it worked before I did something I don't remember
20:42 < Kakera> the reinstallation was a last ditch effort
20:42 < mscdex> geNAZt: but definitely SIGTERM is not handled because apparently Windows doesn't have an event for something like that
20:43 < faceleg|work> Kakera: lol.
20:43 < Kakera> faceleg|work, very helpful
20:43 < faceleg|work> do you need to tell VS where ATL is?
20:43 < faceleg|work> Kakera:  I'll lol if I want, if you don't think I;m trying thelp then sovle it yourself
20:43 < geNAZt> mscdex, yes i know, but then the exit event should fire
20:44 < geNAZt> mscdex, even on windows a application knows when it should end, windows doesnt go and kill it without signaling the process (i hope)
20:44 < mscdex> Industrial: well, if you are push()'ing onto a callback queue, then just shift() on each response. if you have a very, very large array, you might notice performance issues
20:44 < mscdex> Industrial: you'll just have to test
20:45 < Industrial> oki
20:46 < douglaslassance> For some reason I cannot make npm run-script stuff work... What I am doing is pretty simple though. Anyone can help?
20:46 < Industrial> mscdex: I'm not sure this server will be hit much relatively. mostly on starting other nodes that are going to query this for the location of other nodes by name/version
20:47 < mscdex> Industrial: then i probably wouldn't worry about it then
20:51 < Virunga> Could you help me please, to understand why this code http://pastie.org/6585688 serves the 5 parallel requests node by default sends for each connection, then it gets stuck for a few minutes and the serves another 10 requests?
20:53 < Virunga> With or without the setTimeout is the same
20:59 < matjas> question: `echo "foo" | ./bar.js` → how do i get the piped value "foo" in bar.js?
21:00 < Virunga> with process.argv
21:00 < Virunga> it's the third element
21:01 < taterbase> Virunga: the surprising aspect is the intermittent nature of the requests?
21:01 < taterbase> Like 5, wait, 10, wait...?
21:01 < matjas> Virunga: heh, doesn’t seem to work over here, no third argument
21:01 < matjas> Virunga: $ echo 'a = 42' | ./foo.js
21:02 < matjas> [ 'node', '/tmp/foo.js' ]
21:02 < spion> matjas, process.stdin
21:02 < Virunga> matjas: try to use readline and bind it to process.stdin
21:02 < Virunga> taterbase: yes, the gap is really big
21:03 < spion> Virunga, by default http.request uses an "agent" that limits the maximum number of parallel requests to 5
21:03 < matjas> spion: but then how do i get the piped value? i read http://dailyjs.com/2012/03/08/unix-node-pipes/ but i need to do it synchronously
21:03 < taterbase> I don't know much about node core, but I imagine it has to do with how node queues up the requests. It most likely makes a decision 
21:04 < faceleg|work> If anyone was willing to glance at this http://stackoverflow.com/questions/15466165/binding-keypress-to-contenteditable-label
21:04 < taterbase> based on how many pending requests there are then limits them to allow other things to happen between each time slice
21:04 < faceleg|work> I'd be gratefull
21:04 < taterbase> spion++
21:04 < spion> process.stdin.pipe(split()).on('data', function(line) { /* this function will be called for each line */ }
21:04 < spion> where split is a module from npm:
21:04 < spion> https://npmjs.org/package/split
21:05 < Virunga> taterbase: spion: yes i know. But each request take max half second and it prints that it has served 5 requests for each server then stops for like 5/10 mins
21:05 < taterbase> Virunga: is the gap between requests consistent? Each time you run it it's the same amount?
21:05 < matjas> spion: thanks. any way to do it synchronously? or to easily detect if something is being piped or not? (kind of like bash `-t`)
21:05 < Virunga> Doesn't look normal
21:05 < Industrial> mscdex: https://gist.github.com/Industrial/1ca7e30da1f5e69b4b9c/a35a3dda0421d95558744dcbd5b441575bb3feca it works now :)
21:05 < Virunga> taterbase: wouldn't know.. I think so
21:06 < Industrial> except the schema doesn't allow for more then one host/port ver name/version
21:07 < Virunga> It prints this http://pastie.org/6585895
21:07 < taterbase> Virunga: I just tried the sample code
21:07 < taterbase> No latency
21:07 < taterbase> oh wait
21:07 < Virunga> Does it go smoothly?
21:07 < taterbase> Yeah no hiccups
21:08 < Virunga> all the 200 requests?
21:08 < taterbase> Yeah
21:08 < Virunga> :\
21:08 < taterbase> What platform you on?
21:08 < Virunga> Mac
21:08 < taterbase> same here
21:08 < Virunga> os z
21:08 < taterbase> Using node .8
21:08 < taterbase> .8.18
21:08 < Virunga> i use 0.10.0
21:09 < taterbase> I'll try with that
21:09 < Virunga> i'll try with .8..
21:09 < mscdex> Industrial: cool :-)
21:09 < spion> matjas, you mean like tty.isatty(fd) ?
21:09 < duko> hi everyone I update my node installation to version 0.10 and express hangs unresponsive after its first response
21:10 < duko> when I downgrade to 0.8 everything is fine
21:10 < taterbase> Virunga: I get the stall on .10
21:10 < taterbase> That's interesting!
21:10 < Virunga> taterbase: let me know please :)
21:10 < Virunga> I'm installing .8
21:10 < taterbase> Yeah it totally hangs on .10
21:10 < Virunga> see? xD
21:10 < taterbase> Crazy
21:10 < taterbase> You found a bug good sir!
21:10 < Virunga> :O
21:11 < duko> does anyone know why this happens or what to do about it?
21:11 < Virunga> Coooooooooll!!!!
21:11 < Virunga> If it is, is also big, don't you think? But it's strange no one point this out
21:12 < taterbase> Virunga: yeah seems like a big one
21:12 < taterbase> You should open an issue on github.com/joyent/node
21:13 < Virunga> I've never done this before, should i paste the code and explain the issue?
21:13 < jrajav> Your first time is always exciting
21:13 < taterbase> Virunga: yes, just create issue, paste the code and explain exactly what happens and how the behavior is different on .8 and .10
21:14 < Virunga> jrajav: :D
21:14 < taterbase> If you need help don't hesitate to ask
21:14 < Virunga> gosh, it works on my machine too with the .8
21:15 < Virunga> Ok, thanks
21:20 < duko> is anyone else having the same problems with express and node 0.10.0?
21:20 < duko> is this problem specific to my setup or is something that affects everyone?
21:29 < faceleg|work> duko: I've not been brave enough to use .10 yet
21:29 < Virunga> Should i put the code inside the issue or use a pastebin?
21:29 < Virunga> Because it appear like normal text in the preview
21:29 < faceleg|work> Virunga: github?
21:29 < Virunga> Yess
21:30 < faceleg|work> do it like this
21:30 < faceleg|work> (wait a minute)
21:30 < Virunga> ok
21:30 < matjas> fwiw, re-posted my earlier question here: http://stackoverflow.com/q/15466383/96656 thanks for the suggestions so far!
21:30 < faceleg|work> Virunga: http://hastebin.com/marolicese.md
21:31 < Virunga> Cool, thanks faceleg|work
21:31 < faceleg|work> Virunga: np
21:31 < faceleg|work> Virunga: for massive amounts of code
21:31 < terinjokes> is there a good example module to look at for Duplex stream2?
21:31 < faceleg|work> decide first whether it's all relevant
21:32 < faceleg|work> and if it really is then use an external service as no-one will read your 1000's of lines of source code pasted into an issue ;)
21:32 < faceleg|work> Virunga: usually no more than ~50 lines inside the issue, as a good rule of thumb. 
21:33 < Virunga> Got it ;)
21:35 < CrazyArseMutt> what is node?
21:35 < faceleg|work> depends on the context
21:35 < faceleg|work> you talking about the lymph system?
21:36 < viva890> hi all, can you recommend a background task processing library for node?
21:36 < niggler> ?
21:37 < ashnur> :)))
21:37 < CrazyArseMutt> radar.oreilly.com/2011/07/what-is-node.html is that about right?
21:37 < ashnur> i don't even know what that does
21:38 < niggler> i disagree with the claim “Are you cool enough to use me?”
21:38 < CrazyArseMutt> lol
21:39 < niggler> that's a title best suited for an esoteric language like ruby+rails
21:39 < CrazyArseMutt> should node be learned first?
21:39 < niggler> js should be learned first
21:39 < CrazyArseMutt> javascript?
21:39 < niggler> yeah
21:39 < CrazyArseMutt> ok - i'm getting it now
21:39 < CrazyArseMutt> nodebeginner.org  is that a good site for when i'm ready?
21:39 < niggler> at the end of the day, you are writing javascript code
21:40 < CrazyArseMutt> thank you niggler 
21:40 < faceleg|work> niggler: +1
21:40 < faceleg|work> niggler: for president
21:41 < CrazyArseMutt> thanks you
21:41 < viva890> i have some cpu expensive operations which are desirable to execute outside of the main event loop, i'm thinking to queue them and process with the external processes
21:42 < niggler> viva890 child_process
21:42 < Virunga> Is it ok for you? https://github.com/joyent/node/issues/5057
21:42 < Virunga> taterbase: ^
21:42 < ashnur> i am not cool enough to use anything but php
21:42 < kornnflake> any idea how to call a callback after a while loop is done?
21:42 < faceleg|work> ashnur: we know
21:42 < faceleg|work> callback()!
21:42 < faceleg|work> next question
21:43 < viva890> niggler: child_process doesn't scale well, i need some queuing library
21:43 < bnoordhuis> what does "doesn't scale well" mean?
21:43 < niggler> is your cpu intensive work written in js?
21:43 < niggler> bnoordhuis maybe they are small but frequent, in which case the fd limit would impinge
21:43 < taterbase> Virunga: looks good, I would mention the behavior that happens on .8 as well to let them know there is no hang 
21:43 < Virunga> My first issue submit ^^
21:43 < Virunga> ahahahah
21:44 < Virunga> Oh, right!
21:44 < faceleg|work> bnoordhuis: when I'm done with that stuff I was asking about (uv_async, uv_thread)
21:44 < Virunga> I'll do it
21:44 < bnoordhuis> niggler: where does ulimit -n enter the equation? i'm confused now
21:44 < faceleg|work> can I ask you to have a quick look at the code to make sure I'm not being a moron?
21:44 < kornnflake> sry for reposting: any idea how to call a callback after a while loop is done? thanks
21:44 < bnoordhuis> faceleg|work: sure, if i'm not busy
21:45 < ashnur> faceleg|work: how do you know that?
21:45 < faceleg|work> bnoordhuis: yes of course. Won't be until it actually works, just would be good to know from someone .. who knows that is't not all stupid and crappy. Well, not *too* stupid and crappy
21:45 < faceleg|work> ashnur: it was a joke
21:45 < niggler> #open processes (+1) versus #open fds (1-3 depending on arguments)
21:47 < viva890> bnoordhuis: i don't want to fork many processes
21:48 < faceleg|work> viva890: have you tested what you're doing to show it is actually a performance issue?
21:48 < faceleg|work> or is this premature optimization
21:49 < Industrial> How do I save this best in redis? {name: {version: [{host: '*', port: 123}, ...]}} or should I try/use another db engine (I love open ended questions)?
21:49 < Aria> Saving is easy. How do you want to retrieve it?
21:50 < Aria> (Probably either a simple set, or an hset.)
21:50 < Industrial> by name and version or only name (then it picks the highest version). results should be any in the array.
21:51 < Aria> Will it get updated?
21:51 < bnoordhuis> viva890: maybe the cluster module with num_workers = os.cpus().length?
21:51 < bnoordhuis> if you're doing cpu intensive things, you'll have to fork if you want to use all those cores
21:52 < Industrial> yes, I would love the list to get updated as services get added/removed, I'm not sure how to update it when e.g. a service fails. I guess then at some point a connection fails, ends or times out?
21:52 < viva890> bnoordhuis: this library looks like a solution https://github.com/learnboost/kue
21:52 < Aria> Is this maintaining a registry of workers?
21:52 < bnoordhuis> i think kue does a similar thing
21:52 < Aria> (Sounds like something Gearman has already worked through)
21:53 < bnoordhuis> but where's the fun in using an off-the-shelf library. that's not how Real Men work!
21:53 < Industrial> Aria: any of my nodejs servers. I could use this to query servers by name instead of host
21:53 < Industrial> bnoordhuis: exactly.
21:53 < niggler> bnoordhuis is there a way to use multiple v8 isolates in node ?
21:54 < Aria> This isn't something Redis has good crash-recovery for -- there's no 'delete-on-disconnect'
21:54 < bnoordhuis> niggler: yes, but not without an add-on
21:54 < Industrial> doing things for the excercise isn't allowed anymore. it has to be meaningful and add unique value to the total community.
21:55 < Industrial> (isnt this exactly how we learn?)
21:56 < Aria> But you'd set multiple keys in redis. One by version (or use a ranked set for versions)
21:56 < Aria> And look up in different keys based on the criteria.
21:57 < Industrial> say I save a set per name:version key by doing rpush to that every time I register\
21:58 < Industrial> how do I query all members of the set (which may even bet json objects for all i care)?
21:58 < Industrial> or better, of all sets matching query name:version or name:*
22:00 < kenperkins> what's cracking
22:00 < viva890> well, there is a whole section for queueing libraries in the node wiki https://github.com/joyent/node/wiki/Modules#wiki-message-queue
22:02 < Industrial> lrange, I see
22:03 < viva890> thank you for your comments
22:03 < Aria> kenperkins: What's not being merged.
22:04 < kenperkins> :(
22:04 < Aria> Industrial: You use a ranked set, use the ranks as keys, do the query in the ranked set for the index you want, then go retrieve the actual keys.
22:05 < Industrial> Aria: I don't follow.
22:11 < owen1> compiling node from source. which branch should i use - origin/v0.10 or origin/v0.10.0-release ?
22:13 < Havvy> I'm going to take a guess and say 'release'.
22:13 < Havvy> Since I'm pretty sure origin/v0.10 has the stuff for v0.10.1
22:13 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
22:17 < bnoordhuis> owen1: you can also use the tag, v0.10.0
22:18 < bnoordhuis> and what Havvy says is correct, the v0.10 branch is the upcoming v0.10.1 release
22:19 < niggler> bnoordhuis you get a chance to look at my PR?  I added a few more tests (and I actually don't see any tests that try to force interactive mode)
22:22 < owen1> bnoordhuis: Havvy : thanks
22:23 < matbee> Question, Anyone aware of a way to async merge two arrays together as such: Array[0] = "hello"... Array2[0]="world"... and make Array3[0]={key:"hello", value: "world"}; ?
22:24 < bnoordhuis> niggler: i already work seven days a week. you want me to burn out? :(
22:24 < bnoordhuis> (it's sunday evening and i'm doing some light hobby programming)
22:24 < bnoordhuis> (while drinking beer)
22:25 < bnoordhuis> and everyone knows drinking and reviewing PRs don't mix
22:25 < niggler> heh bnoordhuis i noticed that there were actually no interactive tests in the test suite
22:25 < niggler> I'm drinking red bull total zero if thats of any consolation :)
22:25 < bnoordhuis> niggler: define 'interactive'? there's a bunch of repl tests
22:26 < niggler> the repl tests all appear to use -e or -p
22:26 < Havvy> niggler: Why should there be interactive tests?
22:26 < niggler> Havvy actually that's the test that was needed for the PR in question
22:26 < niggler> https://github.com/joyent/node/pull/5041
22:36 < Aria> Industrial: Redis access is all about choosing the right data structure(s) for your access pattern.
22:48 < switz> lets say i want to have an npm module download an mp3 file via an api, how should I pipe that so the user of the npm module can use it?
22:48 < switz> http://www.subsonic.org/pages/api.jsp#stream
22:53 < owen1> damn, i missed nodeup 
23:01 < mscdex> owen1: missed it? it was on 3/3
23:05 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
23:06 < owen1> mscdex: i got an email this morning but looks at my email just now
23:07 < phonebook_> sry if this is the wrong place/time - a guy i know asked me why i love node.js. i said [because it makes everything in one language and allows developers to solve problems; it eliminates programming language barriers]. also, it is faster sometimes. he didn't buy it. 
23:07 < owen1> i believe it was episode 41
23:08 < faceleg|work> phonebook_: he was lying
23:08 < mscdex> phonebook_: most people are skeptical at first. however the reasons you stated are not the only strengths
23:08 < faceleg|work> he bought it. Some devs just don't like to admin that their language pales in comparison to node
23:08 < faceleg|work> mscdex: face it, some people just don't like node
23:08 < mscdex> trolls don't :-)
23:09 < faceleg|work> ugh tell me about it
23:09 < faceleg|work> that dzuiba guy sure doesn't
23:09 < phonebook_> mscdex, that its a common language and async are the main points i know. 
23:09 < Havvy> Node vs. Twister. *Go*
23:09 < faceleg|work> ahhahaah 
23:09 < niggler> node's not a language
23:09 < faceleg|work> libraries
23:09 < faceleg|work> niggler for president
23:09 < Havvy> niggler: Twisted isn't a language either.
23:10 < ningu> ah, the ol' forgot to inject my dependencies issue
23:10 < mscdex> wait, what's Twisted? ;-)
23:10 < niggler> twisted is, well, twisted
23:10 < mmalecki> Havvy: I mean, I like playing twister
23:10 < niggler> the name is apt
23:10  * faceleg|work gently strokes node, whispering "don't listen to them node-y"
23:10 < faceleg|work> twisted is python event lib isn't it?
23:10 < Havvy> faceleg|work: Yes.
23:10 < ningu> niggler: python folks seem to rave about it... I haven't looked at it. but node's async style is not necessarily easy code to read either
23:10 < mscdex> yes
23:10 < mmalecki> twisted is terrible
23:10 < mmalecki> tornado tho, is nice
23:11  * mscdex shakes a fist at Twisted
23:11 < ningu> mmalecki: any concrete reason?
23:11 < mmalecki> if anything, that's what I'd compare node to
23:11 < niggler> i remember building an irc bot in python
23:11 < faceleg|work> i'd compare node to a mountain of <favourite pudding>
23:11 < niggler> and writing "from twisted.words.protocols import irc" gave me nightmares
23:11 < ningu> mmalecki: just wondering what the objection is, I only know node
23:11 < niggler> that's a hair away from java
23:11 < mscdex> Python is the number one killer of tab keys.
23:11 < faceleg|work> your honour, there was no objection
23:11 < mmalecki> ningu: objects, objects everywhere
23:12 < mmalecki> ningu: take a look at http://twistedmatrix.com/trac/
23:12 < Havvy> niggler: To be honest, that isn't /that/ bad.
23:12 < mmalecki> EchoFactory, Echo
23:12 < mmalecki> tornado tho, http://www.tornadoweb.org/en/stable/
23:12 < Havvy> Since Python doesn't have a way of having library specific libraries (like node does. :) )
23:12 < ningu> not to mention protocol.Protocol :)
23:12 < niggler> your right Havvy its not quite generalizedabstractbeanfactory or whatever it was
23:12 < mmalecki> Just Enough Objects (tm)
23:12 < mmalecki> this is how I got into node actually
23:13 < mmalecki> and got my first actual job
23:13 < ningu> I like that joel on software post about factory factory factories
23:13 < mmalecki> so Tornado is and will be close to my heart
23:13 < Havvy> ningu: Did you know that Jeol on Software is a book?
23:13 < faceleg|work> ningu: hahahaah yes
23:13 < faceleg|work> Havvy: waht? link  please
23:13 < niggler> http://www.amazon.com/Joel-Software-Occasionally-Developers-Designers/dp/1590593898
23:13 < Havvy> (It is the same content as the blog)
23:13 < ningu> Havvy: yeah, I heard that.
23:14 < ningu> I find him to be somewhat cranky actually, but he's often good to read
23:14 < faceleg|work> Havvy: ningu check this out https://github.com/Herzult/SimplePHPEasyPlus
23:14 < Havvy> http://fvrl.ent.sirsi.net/client/default/search/detailnonmodal/ent:$002f$002fSD_ILS$002f467$002fSD_ILS:467656/ada?qu=joel+on+software
23:14 < rdpanek> hello
23:14 < rdpanek> I need a module to generate the json from json schema. Anybody got any experience?
23:14 < ningu> I remember he had a whole post from the late 90s about how mozilla was doomed because they rewrote the browser from sratch
23:14 < ningu> scratch*
23:15 < mmalecki> faceleg|work: hahahahahahhah
23:15 < kornnflake> hey, could someone please take a quick look on my code? http://paste.pm/5k5.js var logs stays empty :(
23:15 < ningu> ah yeah, I've seen that library :)
23:15 < niggler> havvy: its not quite InternalFrameInternalFrameTitlePaneInternalFrameTitlePaneMaximizeButtonWindowNotFocusedState
23:15 < faceleg|work> initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bitmapFormat:bytesPerRow:bitsPerPixel:
23:16 < niggler> faceleg|work thats objective c not java
23:16 < Havvy> niggler: To be fair, this URL is better than what we had two years ago.
23:16 < faceleg|work> https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/ApplicationKit/Classes/nsbitmapimagerep_Class/Reference/Reference.html#//apple_ref/occ/instm/NSBitmapImageRep/initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bitmapFormat:bytesPerRow:bitsPerPixel:
23:16 < niggler> the actual method is initWithBitmanDataPlanes
23:16 < niggler> fair enough Havvy 
23:16 < faceleg|work> niggler: fine fine
23:17 < rdpanek> : I need a module to generate the json from json schema. Anybody got any experience?
23:17 < phonebook_> what is a json schema?
23:17 < phonebook_> JSON.parse() // now you have an object
23:18 < iain__> { "uhoh": 1 }
23:18 < rdpanek> phonebook_: http://json-schema.org/
23:19 < ningu> now that my ependencies are fully injected I feel better
23:19 < ningu> dependencies*
23:21 < phonebook_> rdpanek, JSON.parse(myObj) is a nogo?
23:35 < ningu> faceleg|work: so I have pretty much ported my app to angular now. but my app's main js file is now about 10 lines longer than it used to be. I want my money back.
23:36 < niggler> but ningu now you can claim to be a kool kid
23:37 < ningu> to be fair the code is *much* cleaner than it was
23:37 < ningu> and my html templates are cleaner too
23:38 < Aria> rdpanek: Do you need a generator? What would a generator do that a simple builder does not?
23:42 < ningu> niggler: angular's scope concept is really ingenious and useful
23:42 < rdpanek> Aria: yes, I need to generate from json schema to json
23:43 < faceleg|work> ningu: I don't recall being paid
23:43 < faceleg|work> does your site's js compress into something smaller than it iwas?
23:43 < faceleg|work> another thing I've read people harp on about is angular's compressibility
23:44 < ningu> it's pretty small minified
23:44 < ningu> I don't compress my main js, it's not worth it
23:45 < faceleg|work> swt
23:45 < faceleg|work> well so long as it's easier to read / debug / test then I'd call it a win
23:46 < Aria> rdpanek: Generate what? How generalized?
23:46 < faceleg|work> in other news, I find myself to be very slow @ c++ coding compared to javascript
23:47 < faceleg|work> in terms of "work done over time"
23:47 < faceleg|work> is this a thing generally or am I still noob
23:47 < faceleg|work> I mean, I *know* i'm still noob, but is c++ generally harder to produce actual results quickly in compared to say js?
23:48 < Havvy> faceleg|work: Yes.
23:48 < rdpanek> Aria: sorry, my english is bad. From http://json-schema.org/examples.html to json
23:48 < faceleg|work> Havvy: yes I'm a noob?
23:48 < faceleg|work> Havvy: or it is a thing
23:48 < Aria> rdpanek: Well, those schemas /are/ json, so ... not sure what you're trying to do.
23:48 < Havvy> Yes, C++ is generally harder to produce actual results quickly.
23:48 < faceleg|work> Havvy: thanks 
23:49 < Havvy> You have to be more strict and know more about what you are doing.
23:49 < faceleg|work> "know more about what you are doing" I lol'd
23:49 < rdpanek> Aria: schemes are used to validate json. and I need one of these settings to generate pure json
23:50 < Aria> ... So generate some json?
23:50 < Aria> I'm not sure what you want it to do, what its API might look like.
23:50 < Aria> You want more than JSON.stringify?
23:51 < faceleg|work> is there an alternative to valgrind? 
23:52 < faceleg|work> hey guys google is this new thing
23:52 < ningu> I met a google guy today
23:52 < rdpanek> Aria: yes
23:53 < rdpanek> Aria: JSON.stringify to convert json object literal 
23:53 < rdpanek> JSON.stringify to convert object literal to json
23:54 < Aria> Well, it makes objects and other data structures into a serialized JSON string.
23:54 < Aria> JSON.parse is the reverse.
23:54 < rdpanek> Aria: only
--- Log closed Mon Mar 18 00:00:34 2013
