--- Log opened Fri Jul 13 00:00:02 2012
--- Day changed Fri Jul 13 2012
00:00 < llrcombs_> Anyone know of a Slackware package for Node 0.8+?
00:02 < bnoordhuis> llrcombs_: yes. git clone git://github.com/joyent/node.git && cd node && ./configure && make install
00:02 < bnoordhuis> (i half-kid of course but source installs are still slackware's MO)
00:03 < llrcombs_> bnoordhuis: one does not simply make install on UNRAID, whose root FS is a RAM disk
00:03 < sven_oostenbrink> bnoordhuis: yes! Ah, sorry, on wrong account here.. I'll switch..
00:03 < Phoenixz> bnoordhuis: Better.. Anyway, I still have the same error..
00:04 < bnoordhuis> Phoenixz: hah, no need to switch
00:04 < bnoordhuis> Phoenixz: do you have a test case for me?
00:05 < Phoenixz> bnoordhuis: pheww.. I'd love to but this is for a site of our company here... Plus, the bug seems... random... 
00:05 < Phoenixz> bnoordhuis: Its for a file upload routine I have.. Maybe I could just pick the most important parts, and see if I can recrate the bug with that
00:06 < bnoordhuis> Phoenixz: yes, please. i can't do much otherwise
00:06 < bnoordhuis> Phoenixz: are you guys using binary add-ons?
00:08 < Phoenixz> bnoordhuis: I use https://github.com/Valums-File-Uploader/file-uploader to do XHR file uploads.. using express app.post(), I get the request, ws = require('fs').createWriteStream(fileName), then on each req.on('data') from the express post, I do ws.write(data); until I get the ws.end...
00:09 < Phoenixz> bnoordhuis: nope.. All we have is this inhouse written http XHR file upload code as I described it above
00:09 < bnoordhuis> Phoenixz: i would *strongly* prefer a test case without third-party dependencies, i.e. just plain node, no modules
00:09 < bnoordhuis> Phoenixz: but i'll take what i can get in this case
00:10 < Phoenixz> bnoordhuis: Well.. the only 3rd party module that is more or less involved would be express
00:11 < bnoordhuis> Phoenixz: okay, i can live with that :)
00:11 < Phoenixz> I'll try to setup a test case
00:14 < Phoenixz> bnoordhuis: I also use node's internal cluster.. That would probably not be a problem, right?
00:14 < bnoordhuis> Phoenixz: it shouldn't be
00:19  * llrcombs_ is getting: ../deps/v8/src/../include/v8stdint.h:33:20: fatal error: stddef.h: No such file or directory
00:19 < bnoordhuis> llrcombs_: you need to install dev headers
00:19 < llrcombs> bnoordhuis: I've got /usr/include/linux/stddef.h
00:20 < bnoordhuis> llrcombs: that's not the iso c stddef.h that v8 is looking for
00:23 < llrcombs> bnoordhuis: I'm having trouble finding a Slackware package that has that
00:23 < tjholowaychuk> Phoenixz if you're using bodyParser() you're opting into having it handle multipart for you
00:23 < llrcombs> I do have /usr/lib/gcc/i486-slackware-linux/4.2.4/include/stddef.h
00:23 < tjholowaychuk> so that will have an impact
00:23 < bnoordhuis> llrcombs: yes, that's the header you need
00:24 < tjholowaychuk> Phoenixz you can opt-out of that but using the json() and/or urlencoded() middleware on their own and ignore multipart()
00:24 < llrcombs> bnoordhuis: how do I tell the compiler to use it?
00:25 < bnoordhuis> llrcombs: i've no idea. i haven't used slackware in 15 years
00:25 < llrcombs> this isn't even full slackware
00:25 < llrcombs> generally, how do I set an include path for make? Isn't there an env var?
00:26 < SubStack> there are lots of ways
00:26 < SubStack> not all of them work all the time
00:26 < bnoordhuis> llrcombs: you can run make with `make CFLAGS+=-I/a/b/c CXXFLAGS+=-I/a/b/c`
00:26 < SubStack> but you can set CFLAGS or CXXFLAGS
00:26 < bnoordhuis> llrcombs: but if your compiler fails to pick up stddef.h by default, something is wrong
00:29 < llrcombs> bnoordhuis: same error with that
00:30 < othiym23> is there a jsdoc convention for documentint callback parameters?
00:30 < othiym23> or jsdoclike tool that lets you document callback parameters in a way that gets prettily formatted?
00:31 < llrcombs> ohwait, just realized that didn't mean what I thought it meant
00:37 < llrcombs>   CXX(target) /root/node/node-v0.8.2/out/Release/obj.target/v8_base/deps/v8/src/compiler.o
00:37 < llrcombs> /tmp/cc5Mc4Ct.s: Assembler messages:
00:37 < llrcombs> /tmp/cc5Mc4Ct.s:3916: Error: unrecognized symbol type "gnu_unique_object
00:41 < Phoenixz> tjholowaychuk: bodyParser? thats part of Express? or how?
00:42 < distracteddev> Phoenixz: Believe its part of connect
00:42 < tjholowaychuk> Phoenixz yeah, it's optional via app.use(express.bodyParser())
00:42 < distracteddev> It gave me more troubles then its worth, not even sure what it adds.
00:42 < tjholowaychuk> it parses json forms and multipart forms for you
00:43 < Phoenixz> tjholowaychuk: And this would change.. what part exactly? just so I get it :) I would receive one file that I can write in one pass instead of bits and pieces?
00:43 < llrcombs> anyone know anything about that error?
00:43 < distracteddev> JSON forms?? you mean POST requests with JSON in the body?
00:43 < tjholowaychuk> it looked liky ou were wanting to do req.on('body' etc so if  you wanted that with multipart you can just leave out the .multipart() middleware
00:43 < tjholowaychuk> if you want to handle that yourself
00:44 < tjholowaychuk> distracteddev no application/x-www-form-urlencoded
00:44 < tjholowaychuk> browser forms
00:44 < distracteddev> Oh and it parses them into JSON for you, I see.
00:45 < tjholowaychuk> into objects yeah
00:45 < tjholowaychuk> if you need to stream stuff that's easy too, just depends on your needs
00:46 < distracteddev> I remember hearing about another forms module, it got quite popular, but can't remember its name now
00:46 < tjholowaychuk> formidable?
00:47 < tjholowaychuk> that's what connect uses
00:47 < tjholowaychuk> for multipart
00:47 < distracteddev> tjholowaychuk: +++ that was it
00:48 < distracteddev> Not sure why bodyParser() breaks Flatiron apps, I should probably look into that
00:48 < Spencer> what are some examples of major applications of node.js?
00:49 < SubStack> Spencer: voxer, learnboost, linkedin mobile
00:49 < distracteddev> Voxer, www.nike.com/jumpman23/riseabove, Ensighten's tag management app.
00:49 < Spencer> SubStack: danke
00:50 < tjholowaychuk> has anyone tried shapeways?
00:50  * prettyrobots Gerk
00:50 < tjholowaychuk> know if you could print wheels that actually function well?
00:50 < tjholowaychuk> i was thinking maybe stick bearings in
00:54 < llrcombs>   CC(target) /root/node/node-v0.8.2/out/Release/obj.target/uv/deps/uv/src/cares.o
00:54 < llrcombs> /tmp/cctlHuqO.s: Assembler messages:
00:54 < llrcombs> /tmp/cctlHuqO.s:82: Error: unknown .loc sub-directive `discriminator'
00:54 < llrcombs> /tmp/cctlHuqO.s:82: Error: junk at end of line, first unrecognized character is `1'
00:55 < othiym23> has anyone tried wrapping Node around octave / matlab to stream datasets?
00:55 < Trindaz> zlib for uncompressing results from a webpage. i can't get it happening. gunzip is giving me a totally blank result. first question - how can I know what encoding to use on the buffer? assumer base64?
00:56 < llrcombs> http://search.npmjs.org/#/linspace <-- mayhaps, othiym23
00:56 < llrcombs> http://search.npmjs.org/#/mst <-- also, this
00:57 < Trindaz> anyone?
00:57 < othiym23> mst is an interesting start
00:57 < aroman> what's the `hoarders` package about?
00:58 < othiym23> my goal is to have something I can use to stream data to use in d3
00:58 < othiym23> and instead of reimplementing all that fun MATLAB stuff, just deal with getting the data out of the number-crunching program and streaming it off somewhere else to be rendered
00:59 < othiym23> aroman: I'm guessing it's jesusabdullah making fun of SubStack
00:59 < othiym23> could be wrong, though
00:59 < llrcombs> aroman: it depends on practically everything
01:00 < aroman> llrcombs: yeah that much I figured out, but i just didn't know why lol
01:00 < llrcombs> it's so you can install a whole lot of stuff with one command
01:00 < llrcombs> I dislike it, personally
01:01 < TooTallNate> llrcombs: it was a joke
01:01 < aroman> why would I ever want to do that?
01:01 < TooTallNate> i mean, don't install it
01:01 < aroman> yeah clearly i'm not lol
01:01 < TooTallNate> it'll probably destroy your comp :p
01:01 < TooTallNate> i don't even think jesusabdullah has installed it :p
01:01 < othiym23> seems like a "fast" way to "mirror" npm on your laptop
01:01 < SubStack> couchdb replication is much faster
01:02 < othiym23> thatsthejoke.gif
01:10 < jonpacker> the hoarders package.json broke my browser
01:10  * jonpacker shakes fist
01:16 < llrcombs>   CC(target) /root/node/node-v0.8.2/out/Release/obj.target/uv/deps/uv/src/cares.o
01:16 < llrcombs> /tmp/cctlHuqO.s: Assembler messages:
01:16 < llrcombs> /tmp/cctlHuqO.s:82: Error: unknown .loc sub-directive `discriminator'
01:16 < llrcombs> /tmp/cctlHuqO.s:82: Error: junk at end of line, first unrecognized character is `1'
01:17 < llrcombs> anyone ever seen that?
01:32 < bnoordhuis> llrcombs: i think you have build chain issues
01:33 < bnoordhuis> llrcombs: e.g. a gcc / binutils mismatch
01:33 < llrcombs> sounds right
01:33  * llrcombs upgrades his binutils to match his gcc
01:39 < llrcombs> bnoordhuis: you seem to be a bit of a Buffer expert. Out of curiosity: what data is in a Buffer when it's first allocated? I noticed while working with a weird API yesterday that `new Buffer(number)` isn't filled with 0's.
01:40 < bnoordhuis> llrcombs: random data, i.e. what's on the heap when the buffer is allocated
01:40 < mAritz> any modules that do json strinify but including functions? (i don't want to eval them, just display)
01:41 < SubStack> mAritz: you could do a recursive transform
01:41 < SubStack> traverse(obj).map(function (x) { if (typeof x === 'function') return String(x) })
01:41 < llrcombs> interesting
01:41 < mAritz> substack: yeah, but using a module would be so much cleaner :D
01:41 < llrcombs> could be a good way to quickly get non-cryptographically-safe pseudorandom bytes
01:41 < SubStack> mAritz: var traverse = require('traverse')
01:42 < mAritz> .... :P
01:42 < jesusabdullah> traverse *is* a handy module when you run into that kind of promblem
01:42 < bnoordhuis> llrcombs: well... there's technically nothing stopping a malloc() implementation from zeroing the memory for you
01:43 < llrcombs> that's valid
01:43 < mAritz> oh, there is a module called traverse. search.npmjs.org just took a couple of seconds, so i thought you meant i should write my own traverser and require it :D
01:43 < mAritz> awesome, thanks
01:43 < llrcombs> maybe Node should default to zeroing it unless a speedup flag is set, for consistency
01:45 < bnoordhuis> llrcombs: we've experimented with zeroing the buffer but the performance penalty is unacceptable
01:45 < bnoordhuis> llrcombs: as in, you can easily get a +50% drop in performance
01:45 < jesusabdullah> and how often do you *really* want to zero out your buffers?
01:45 < jesusabdullah> THINK ABOUT IT
01:46 < bnoordhuis> and if you do, there's buffer.fill()
01:46 < llrcombs> sensible enough
01:46 < jesusabdullah> if you're zeroing out a ton of entries anywhere you may want to think of a more efficient way to store sparse data
01:47 < llrcombs> jesusabdullah: when the API you're working with expects large stretches of null bytes for no good reason
01:47 < llrcombs> but I suppose that's an edge case
01:47 < jesusabdullah> llrcombs: lulz---I mean, that makes sense I guess
01:48 < jesusabdullah> I mean, if you actually need to stream out a ton of null bytes, that makes sense
01:48 < bnoordhuis> jesusabdullah, llrcombs: mmap /dev/zero with node-mmap and bufferify it
01:48 < bnoordhuis> that's about the only thing node-mmap is good for...
01:49 < llrcombs> it's not a ton, but it can be about 48 null bytes out of a 100-200-ish-byte buffer
01:49 < llrcombs> 40 of which are sequential
01:50 < bnoordhuis> llrcombs: oh, just use buffer.fill() for that
01:50 < llrcombs> I could just set all the values that need to be 0 to 0 with fill, but the lag on this is already small enough with just filling the whole thing with 0 that I'm not concerned
01:50 < llrcombs> bnoordhuis: ninja'd
01:50 < bnoordhuis> 40 zero bytes, that's 5 stosqs on a x64 machine
01:50  * llrcombs has no idea what a stosqs is
01:50 < bnoordhuis> llrcombs: an assembly opcode :)
01:51  * llrcombs doesn't usually do low-level memory allocation stuff
01:51 < bnoordhuis> i guess my point is that zeroing out 40 bytes is roughly equal to zero in the grand scheme of things
01:52 < llrcombs> should I see a significant difference between zeroing the 40 particular bytes and the other spots that need to be 0 and zeroing the whole buffer, assuming it's rather small?
01:52 < bnoordhuis> llrcombs: how large are your buffers gonna be?
01:52 < bnoordhuis> 100-200 bytes?
01:53 < llrcombs> max I could see going out is... lemme figure this real quick
01:54 < llrcombs> 12 version header bytes (4 nulls there), 8 useful header bytes, 24-ish data, 4 more version, 44 nulls, and a null-terminated wide-character XML string that probably won't hit more than about 100 characters
01:55 < llrcombs> so 200-ish bytes
01:56 < jesusabdullah> probably not, then
01:56 < bnoordhuis> llrcombs: just zero the whole buffer. creating the js buffer object itself is probably 10x as expensive
01:56 < llrcombs> cool; that's already what I'm doing
01:56 < llrcombs> by the way, that weird build issue was a chain thing. Fixed my binutils, now all better
01:56 < llrcombs> aww netsplit D:
01:59 < llrcombs> I won't be using it for this, but my module _does_ have a multiple-messages-in-one-packet feature (it was easier to add than it would be not to because of how the XML is structured). With multiple messages in one packet, the buffer _could_ hit 1KB (max I can see anyone possibly wanting to send at once)
01:59 < jesusabdullah> llrcombs: I'd just roll with what you got until it becomes a problem
01:59 < llrcombs> it's just key-value data; the XML setup they're using makes it way too complicated
01:59 < jesusabdullah> and, like, it probably won't become a problem
01:59 < llrcombs> that sounds like a generally good philosophy for small resource use
02:00 < llrcombs> it's already fast enough, even over wifi, that I can't perceive the difference from when I hit enter on the readline interface and when the device reacts
02:01 < jesusabdullah> perfect.
02:01 < jesusabdullah> AH YES THE POWER OF NODEJS
02:03 < xydudu> How nginx proxy a socket.io service?
02:03 < llrcombs> How grammar a sentence?
02:04 < chrisdickinson> poorly?
02:04 < llrcombs> does doing that make me a bad person?
02:04 < chrisdickinson> (unless things have drastically changed.)
02:04 < bnoordhuis> llrcombs: yes if the other guy isn't a native speaker
02:04  * llrcombs is probably a bad person
02:04 < bnoordhuis> xydudu: i don't think nginx supports websockets natively
02:04 < chrisdickinson> (does nginx support websockets now? or is it still a "patch the code and sure, it'll do websockets" sort of thing?)
02:05 < jesusabdullah> almost definitely the latter from what I know, but I don't really follow nginx
02:05 < chrisdickinson> a shame. nginx makes running django et al much easier.
02:06 < xydudu> like you say, so how can I deal with ?
02:06 < num1> google returns this: http://www.letseehere.com/reverse-proxy-web-sockets
02:06 < num1> essentially, you use the tcp_proxy module
02:07 < num1> since websockets are just tcp connections
02:08 < xydudu> I rebuild nginx with tcp_proxy modle..but websocket connection still 502
02:09 < bnoordhuis> xydudu: #node.js may not be the right place for that, you may have more luck in #nginx
02:10 < xydudu> sadly news
02:10 < xydudu> so , socket.io is not for production?
02:10 < jesusabdullah> no, socket.io is for non-nginx environments
02:10 < jesusabdullah> or, environments that support websockets anyway
02:11 < jesusabdullah> and really, you can use socket.io without websockets, it's just less cool
02:11 < xydudu> your are right, but I want my application cooler.
02:12 < bnoordhuis> don't we all?
02:12 < xydudu> so, I want make it work.
02:12 < jesusabdullah> xydudu: use a cooler proxy? XD
02:13 < xydudu> what is the cooler proxy? :(
02:13 < jesusabdullah> http://github.com/nodejitsu/node-http-proxy is capable of proxying websockets in production
02:13 < jesusabdullah> I know this cause, well
02:13 < jesusabdullah> I work for nodejitsu
02:13 < jesusabdullah> and we use this to proxy websockets on our platform
02:13 < chrisdickinson>  there's also haproxy, or so i've heard
02:13 < jesusabdullah> yeah, haproxy might support websockets by now
02:13 <@maxogden> soliciting feedback on this! http://callbackhell.com/ open github issues please
02:14 < jesusabdullah> either way, the basic idea is to use a different proxy/balancer, and then proxy to nginx for gnginx things
02:14 < chrisdickinson> maxogden: one paragraph in and it's amazing.
02:14 < xydudu> jesusabdullah, very thanks
02:15 < jesusabdullah> maxogden: Very nice.
02:15 < jesusabdullah> xydudu: Where are you from? I'm guessing English is not your first language?
02:15 < bnoordhuis> maxogden: run-on sentence? does it depend on js for formatting?
02:16 < xydudu> jesusabdullah. yes, I am not good at english
02:16 < xydudu> sorry
02:16 < jesusabdullah> It's okay xydudu! I'm just curious: Where do you live?
02:17 < devaholic> https://github.com/tblobaum/redis-stream
02:17 < xydudu> China..
02:17 <@maxogden> bnoordhuis: sorry which one is a run-on sentence? i am not a gifted copy editor
02:17 < devaholic> stream everything
02:18 < SubStack> all the things
02:18 < SubStack> all of them
02:18 < jesusabdullah> xydudu: Right on. I don't know much about china but I do know that there are a number of reasonably good node hackers from China if you're looking for company. I usually see them on the mailing list.
02:18 < SubStack> beh I feel kinda crappy right now >_<
02:18 < bnoordhuis> maxogden: everything. it's one big blob of text, no markup or anything. i run noscript though
02:19 <@maxogden> bnoordhuis: ahh yeah its markdown text. i thought it would look okay withotu script turned on but i guess i was wrong
02:20 < chrisdickinson> maxogden: use a <pre> and replace it in your script
02:20 <@maxogden> ahha
02:20 < xydudu> jesusabdullah: haaa..thanks a lot.
02:23 <@maxogden> chrisdickinson: view source... i would need to insert &nbsp; everwhere. i'll figure something out later, opening a github issue for now
02:27 < deltab> maxogden: you may find this interesting: http://dreid.org/2012/03/30/deferreds-are-a-dataflow-abstraction
02:41 < Trindaz> zlib for uncompressing results from a webpage. i can't get it happening. gunzip is giving me a totally blank result. first question - how can I know what encoding to use on the buffer? assumer base64?
02:43 < llrcombs> zlib.gunzip(buffer, callback);
02:43 < llrcombs> why do you need an encoding?
02:44 < llrcombs> and how does base64 make sense?
02:44 < llrcombs> if you're streaming, just pipe to http://nodejs.org/api/zlib.html#zlib_zlib_creategunzip_options
02:44 < deltab> Trindaz: you mean an http request? the headers should tell you that
02:45 < llrcombs> Trindaz: it may help to paste some code on pastebin
02:48 < Trindaz> http://pastebin.com/ztCyKpxV
02:48 < Trindaz> Thanks llrcombs and deltab
02:48 < Trindaz> I know for a fact that the response includes the headers   'content-type': 'text/plain; charset=utf-8',   'content-encoding': 'gzip',
02:49 < thealphanerd> has anyone here ever done i2c with node?
02:51 < jesusabdullah> I've not, but I'm sure it's not too bad
02:53 < llrcombs> Trindaz: fixing...
02:53 < thealphanerd> jesusabdullah: fair enough…. might be a good excuse to make a package D:
02:53 < thealphanerd> :D
02:54 < jesusabdullah> thealphanerd: Hell yeah
02:54 < jesusabdullah> thealphanerd: I'd use it (maybe/probably). I like embedded stuff, wish I had more time for it
02:54 < thealphanerd> jesusabdullah: doing a bunch of sensor stuff with the raspi
02:54 < Trindaz> thanks. I just realized I pasted without the 'base64' encoding, but it makes no difference - same result each time which is blank
02:54 < jesusabdullah> thealphanerd: word.
02:54 < thealphanerd> going to create a framework using infusion
02:54 < jesusabdullah> thealphanerd: I kinda want an arduino/raspi-based measurements platform
02:55 < thealphanerd> some nice private name spaced components that can be used for async polling of sensors
02:55 < thealphanerd> all lint free :D
02:55 < jesusabdullah> like, you plug the sensors into the box, do some clicky-click, and now you can take your box out and mash "run experiment", then pull the data out as a csv or something
02:55 < jesusabdullah> like, a web-configurable platform like that would be baller
02:55 < thealphanerd> like making a box with a bunch of inputs
02:55 < thealphanerd> any sensor can plug into any input
02:56 < thealphanerd> with i2c you could even have it automagically detect which sensors 
02:57 < jesusabdullah> thealphanerd: Exactly. And if you can't auto-detect (like a thermocouple using an analog signal) you could configure it just by clicking, "ytes this is a type T thermocouple" and maybe adjust some constants
02:57 < thealphanerd> even better :P
02:57 < thealphanerd> we are thinking of turning an arduino into an adc
02:57 < jesusabdullah> but yeah, support i2c and maybe another digital sensor protocol, plus the analog stuff, give it a web ui and you're g2g
02:58 < jesusabdullah> nice
02:58 < thealphanerd> this is for a project with data vis
02:58 < thealphanerd> but the idea is to decouple it
02:58 < thealphanerd> modules with indepent models for each sensor
02:58 < thealphanerd> async polling
02:58 < thealphanerd> and a parent function that can poll the models all at once (based on a time stamp) and push the data into json files
02:59 < thealphanerd> then send the json files via resful api
02:59 < thealphanerd> to the machine on the network that will be doing the datavis
03:00 < jesusabdullah> thealphanerd: Sounds like a plan. You gonna github this thing when it's worth sharing?
03:00 < llrcombs> Trindaz: http://pastebin.com/mmftgEkA
03:00 < thealphanerd> oh yeah
03:00 < jesusabdullah> sweet
03:01 < thealphanerd> idea is to break out core functionality (such as i2c) into packages
03:01 < thealphanerd> then all the sensor stuff into a library with a basic api that can be extended
03:01 < Trindaz> thanks llrcombs - so the problem was that i was storing it as a string?
03:01 < thealphanerd> then the data vis will be an entirely different app
03:01 < dsheets> I get "RangeError: Maximum call stack size exceeded". How do I get node to show me the stack? Passing debug causes and assertion error.
03:02 < llrcombs> Trindaz: possibly? I just decided there was no good reason to do the thing that you were doing and rewrote it all
03:02 < llrcombs> if you need to auto detect the content-encoding, there's some more code. You want that?
03:03 < Trindaz> error: Cannot call method 'pipe' of undefined
03:03 < Trindaz> i think i can fix it. just fyi.
03:04 < llrcombs> that's a bit of a WTFer
03:04 < llrcombs> because request is supposed to return a readable stream
03:05 < distracteddev> llrcombs: Mikeal's request or native?
03:05 < Trindaz> it's a custom method that I wrote. just a tic - i can fix that
03:05 < llrcombs> wait, there's a native now?
03:05 < llrcombs> Trindaz: that explains it. I expected Mikeal's.
03:10 < Trindaz> still doesn't work - now my code never returns, the script never finishes executing though no idea what it's doing
03:10 < thealphanerd> Trindaz: wanna post a gist or pastebin?
03:11 < llrcombs> try removing the event listener
03:13 < xeodox> Hi, how do I upgrade to 0.8.2 easily?
03:13 < xeodox> i'm currently on 0.6.7
03:13 < thealphanerd> what os?
03:13 < llrcombs> xeodox: what OS are you on?
03:13 < llrcombs> ninja'd
03:13 < Trindaz> here's the whole thing. it's a scrape for project search at guru.com
03:13 < Trindaz> http://pastebin.com/PY4FyNQR
03:13 < xeodox> ubuntu 
03:14 < thealphanerd> xeodox: did you install with apt-get?
03:14 < llrcombs> upgrade with your package manager
03:14 < xeodox> I did *not* install node.js 0.6.7 with apt-get. I used the source file from github
03:14 < thealphanerd> do you have the source files you installed from still?
03:14 < llrcombs> Trindaz: pipe the response, not the request
03:15 < llrcombs> don't call setEncoding
03:15 < xeodox> thealphanerd:  yes
03:15 < thealphanerd> xeodox: cat make | grep uninstall
03:16 < deltab> Trindaz: "Accept-Encoding":  "gzip,deflate,sdch", -- do you actually have working support for all those?
03:16 < thealphanerd> see if there is an uninstall option in the make from source
03:16 < llrcombs> will you ever need to check if it's gzipped or not?
03:16 < thealphanerd> if so ./make uninstall
03:16 < llrcombs> deltab: no, he doesn't
03:16 < deltab> :-)
03:16 < thealphanerd> then install via apt-get by following the instructions on the wiki
03:16 < Trindaz> thanks deltab. still blank.
03:16 < Trindaz> llrcombs - not for now
03:17 < llrcombs> Trindaz: then change Accept-Encoding to just "gzip"
03:17 < deltab> or not at all
03:17 < thealphanerd> xeodox: https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
03:17 < deltab> let it send uncompressed
03:18 < xeodox> thanks!
03:18 < deltab> Trindaz: you also have content-length: is that accurate?
03:18 < thealphanerd> xeodox: make sure you uninstall it first
03:18 < Trindaz> yes. if I don't use any of this gzip stuff and just printout what response is raw then i get all the garbled content come out to console
03:18 < thealphanerd> before you install via package manager
03:18 < Trindaz> there's no problem getting the response from the server
03:19 < Trindaz> as soon as i try adding any gzip features to unzip the response then either the script never terminates, or it does with no output
03:19 < deltab> Trindaz: dump the response body to a file and run 'file' on it
03:19 < Trindaz> haven't found any examples on the net yet - i don't get why it should be so complicated
03:25 < joeandaverde> I'm trying to create a node.js clone that shows how node.js combines libuv and v8 to create network servers. I like some guidance on some code i've written. I'm fairly inexperienced with c++. I'm also a bit uncertain of what a good pattern would be to invoke callbacks into js when a connection comes in over http.
03:25 < joeandaverde> here's what i've done: https://github.com/joeandaverde/joed/blob/master/joed.cpp
03:26 < joeandaverde> Any tips or discussion is invited
03:26 < jesusabdullah> no idea, joe
03:28 < joeandaverde> all good jesusabdullah… figured i'd just put it out there
03:31 < llrcombs> protip, Trindaz: never copy all the headers from your what your web browser sends.
03:49 < Trindaz> 4why not?
04:01 < Trindaz> I'm sorry, but are there any examples anywhere on the net or in any documentation anywhere where node.js is able to unzip a compressed response from a webserver, particularly with gzip?
04:03 < thealphanerd> https://github.com/andris9/fetch
04:03 < thealphanerd> ?
04:03 < thealphanerd> https://github.com/egorich239/node-compress
04:03 < thealphanerd> that lib seems to be able to uncompress
04:03 < thealphanerd> but its old
04:12 < prettyrobots> Adam Crabtree?
04:12 < prettyrobots> Nope.
04:14 < thealphanerd> ?
04:17 < Trindaz> Thanks thealphanerd
04:17 < Trindaz> I was just checking out fetch
04:17 < Trindaz> I don't understand the meaning of line 333 at https://github.com/andris9/fetch/blob/master/lib/fetch.js
04:18 < Trindaz> what do the square brackets mean?
04:18 < thealphanerd> possibly that zlib is an object
04:18 < thealphanerd> and "create"+type is the name of the function you want to call
04:19 < thealphanerd> same as zlib.createtype()  except you can't use variable that way
04:22 < thealphanerd> http://nodejs.org/api/zlib.html#zlib_zlib_creategunzip_options
04:22 < thealphanerd> Trindaz:  you can just use zlib.createGunzip([options])
04:24 < Trindaz> that's amazing - i'd never seen a function with a dynamic name called like that. makes total sense! brilliant
04:24 < Trindaz> because in js they're all just members of the obj aren't they!
04:27 < thealphanerd> yeah… it is kinda like polymorphism
04:28 < thealphanerd> you can concattinate strings
04:31 < Trindaz> This is really interesting - My code wasn't wrong at all when it comes to decompression. The site I'm pulling data from is crashing Fetch too - there's something curly going on
04:36 < thealphanerd> are you scraping data?
04:36 < Trindaz> up
04:36 < Trindaz> *yup
04:36 < livinded> If I'm keeping a user object in memory for the duration of a user's connection is it cleaner to store a copy of socket and database client in the object or pass them as parameters to the functions that need them?
04:36 < ljharb> ew, don't scrape.
04:37 < Trindaz> guru.com
04:37 < Trindaz> http://pastebin.com/PY4FyNQR
04:37 < thealphanerd> can I tell you something?
04:37 < Trindaz> sure
04:37 < thealphanerd> I quickly browser through it
04:37 < thealphanerd> and see ASP.NET
04:37 < thealphanerd> and just stop
04:38 < thealphanerd> :P
04:38 < Trindaz> yeah it wouldn't surprise me
04:38 < Trindaz> it's probably doing some weird thing that chrome et al know how to handle but that is totally abnormal
04:38 < Trindaz> so it's breaking standard gzip etc.
04:38 < Trindaz> but what could it be? how would I debug it more?
04:39 < thealphanerd> why are you scraping guru.com ?
04:39 < livinded> Trindaz: write out the raw data and trying using the gunzip binary
04:39 < Trindaz> just want updates on the projects they have available
04:39 < livinded> see if you can reproduce it
04:39 < ljharb> yes. don't scrape. in some places it's illegal, and in some places it's against their TOS, and in some places it's against your ISP's TOS.
04:39 < Trindaz> yeah good point livinded
04:40 < livinded> ljharb: is that really a reason not to do it?
04:40 < ljharb> it's also unethical
04:40 < livinded> so?
04:40 < ljharb> and THAT is a good reason not to do it.
04:40 < Trindaz> hey ljharb, there's probably a legals channel on here that would be more interested in comments like that
04:40 < ljharb> they're not talking about scraping in there.
04:40 < ljharb> if youre not interested in the opinions of others, don't say something in a room full of people. scraping is unethical.
04:41 < thealphanerd> *slow clap*
04:41 < livinded> ljharb: no, scraping when it's not permitted is unethical
04:41 < ljharb> yup. i'm making a pretty educated guess that he doesn't have express permission.
04:41 < livinded> and it still comes down to the question of who cares
04:41 < ljharb> implicit permission would be an API
04:41 < ljharb> people who aren't douchebags?
04:41 < thealphanerd> I think if people wanted you to scrape they would make an api
04:42 < thealphanerd> ljharb: you beat me to it
04:42 < prettyrobots> ljharb: Im
04:42 < prettyrobots> ljharb: I'm a douchbag and even I care!
04:42 < ljharb> more accurately, people who aren't sociopaths.
04:42 < ljharb> if i'm sticking to the textbook definition of sociopath.
04:42 < livinded> ljharb: then I guess I'm a sociopath
04:42 < ljharb> they've got pills for that i'm sure.
04:43 < prettyrobots> ljharb: No. They don't really.
04:43 < livinded> I'm pretty content
04:43 < prettyrobots> ljharb: Read the Psychopath Test. Excellent read.
04:43 <@maxogden> topic node.js - also feel free to use this channel to discuss intellectual property and psychological disorders
04:43 <@maxogden> oops
04:43 < ljharb> naturally. sociopaths don't care that they defy societal conventions and are capable of being horrible people.
04:43 -!- maxogden changed the topic of #Node.js to: node.js - also feel free to use this channel to discuss intellectual property and psychological disorders
04:43 < thealphanerd> maxogden: AHAHAHA
04:43 < ljharb> lol
04:43 < jesusabdullah> MAYBE I WILL MAX
04:43 < jesusabdullah> MAYBE I WILL
04:43 -!- maxogden changed the topic of #Node.js to: node.js - a place to discuss node.js among colleagues and peers
04:44 -!- maxogden changed the topic of #Node.js to: node.js - a place to discuss node.js amongst colleagues and peers
04:44 < livinded> meh, as far as I'm concerned if I have permission to do it personally I have permission to script it
04:44 < thealphanerd> so ummm… anyone else playing with node on the pi?  mmmm node-pi
04:44 < jesusabdullah> people are, but not I
04:45 <@maxogden>  /join node-libertarians
04:45 < jesusabdullah> I was probs gonna buy a pandaboard for my embedded-ish nodestuffs
04:45 <@maxogden> jesusabdullah: whats that do
04:45 < ljharb> livinded: if you've received explicit permission, certainly. but absolutely the default assumption is that somebody does not have permission.
04:45 < thealphanerd> there has been alot of ground work… 
04:45 < jesusabdullah> a pandaboard? It's like a next-gen beagleboard
04:45 < jesusabdullah> same people
04:45 <@maxogden> jesusabdullah: so its like arduino?
04:45 < jesusabdullah> yet another small ARM-based platform
04:45 < Trindaz> ok doing all the gzip stuff off of disk now based on the server response
04:45 < Trindaz> brb
04:45 < jesusabdullah> maxogden: more like raspberry pi
04:45 < jesusabdullah> maxogden: it can easily run node
04:45 < livinded> ljharb: guess we'll just have to agree to disagree. It's easier to ask forgiveness than it is to get permission
04:45 < thealphanerd> jesusabdullah: I'm thinking of doing an npm package to do i2c… you knowif anyone has done anything like that?
04:45 <@maxogden> jesusabdullah: ooooh
04:46 < jesusabdullah> npm search i2c
04:46 < npmbro> jesusabdullah: Please see http://eirikb.github.com/nipster/#i2c
04:46 < livinded> ooo, did you see those new cortex a9 arm boards on hackernews today?
04:46 < jesusabdullah> thealphanerd: ^^ npmbro's link
04:46 < ljharb> livinded: certainly easier. it's just not ethically RIGHT to transgress when you know you'll need to ask forgiveness. it's also often illegal.
04:46 < thealphanerd> No matching records found
04:46 < livinded> $130 and quad core. Fuck raspberry pi
04:46 < thealphanerd> and that was good!
04:46 < thealphanerd> hahaha
04:46 < thealphanerd> it has a lot of stuff already built in
04:46 < thealphanerd> and linaro
04:46 < jesusabdullah> livinded: Right! It's just a little bigger, but also way more available and has nice specs
04:46 < thealphanerd> BUT… it is not suported for battery power
04:46 < thealphanerd> !
04:47 < livinded> jesusabdullah: seriously, the raspberry pi chips are super old in comparrison
04:47 < jesusabdullah> ljharb: So what are we discussing as non-ethical? Scraping web pages?
04:47 < ljharb> jesusabdullah: yup, implied is "without permission" because "permission" usually translates to "theres an API"
04:47 < livinded> I heard arduino is releasing an a8 based board this year or already has
04:48 < jesusabdullah> ljharb: What about for personal use? I mean, I can understand if someone probably didn't want that to happen, but other times I think people are just inept
04:48 < thealphanerd> livinded: one nice thing is the raspi runs at 3.3v
04:48 < jesusabdullah> ljharb: for example, suppose I wanted a JSON api for NASCAR RACE RESULTS
04:48 < jesusabdullah> ljharb: but the web sites for it are all meant for humans---rednecks in particular
04:48 <@maxogden> https://scraperwiki.com/docs/python/faq/#data_ownership
04:49 < jesusabdullah> ljharb: so I don't think scraping a fan site's NASCAR RACE RESULTS and exposing them over a nice api is unethical necessarily
04:49 < jesusabdullah> especially if you come at it as ALSO A FAN of FAST LOUD THINGS
04:49 < ljharb> lol
04:49 < jesusabdullah> I mean, that's just an example
04:49 <@maxogden> "It is our view that, where a web server responds to an unauthenticated HTTP request, there is an implied licence to use the HTML that is returned for reading and automatically extracting that information. This, in our view, is how the web is designed to operate."
04:49 < livinded> thealphanerd: nothing I'd want to build I'd have that low of a power requirement for with needing that powerful of hardware
04:49 < ljharb> jesusabdullah: it's definitely a very nice way to do something unethical. but you're using bandwith, messing with advertiser metrics, etc, in a way that they likely don't want you doing.
04:49 < livinded> I can use avr for that type of stuff
04:50 < jesusabdullah> ljharb: I mean, you have a point. I think common sense goes a long way here.
04:50 < ljharb> maxogden: obviously a site on scraping is going to interpret things in a way that allows scraping :-)
04:50 < ljharb> jesusabdullah: yeah totally - i was making a blanket statement that "scraping is bad" because then the few that might have a good use case for it have to defend that use. as they should.
04:51 < livinded> If I'm keeping a user object in memory for the duration of a user's connection is it cleaner to store a copy of socket and database client in the object or pass them as parameters to the functions that need them?
04:51 < prettyrobots> ljharb: Things like Pocket and Instapaper do scraping. I don't think that's all that bad.
04:51 < jesusabdullah> Sure. Powerful tools can be used for both good and evil.
04:51 < Trindaz> how do i get a stream as a string?
04:51 < jesusabdullah> and scraping is the ultimate "I do what I want"
04:51 <@maxogden> scraping is how the web works
04:51 <@maxogden> if you dont want your content taken by other people then put it behind authentication
04:51 < prettyrobots> Trindaz: Or vice versa. If you find out let me know.
04:52 < ljharb> jesusabdullah: i guess i'm differentiating between scraping + crawling, and just converting a single page to another format.
04:52 < jesusabdullah> fwiw I approve of people scraping publically-exposed nodejitsu sites
04:52 < livinded> maxogden: seriously HTTP 401 exists for a reason
04:52 < thealphanerd> how do you guys feel about wget?
04:52 < jesusabdullah> So, making a funnyjunk clone by scraping reddit: ya ya or nischt nischt?
04:52 < ljharb> wget is the same as a browser when downloading a single page. when you use it with the "download site" option, you're scraping the entire site, and i think that's just as unethical as any other form of crawling + scraping
04:53 < ljharb> whatever option thats called, i forget.
04:53 < thealphanerd> I scrape reddit the old fashioned way… with the enhancement suite
04:53 < jesusabdullah> It's certainly a scrapebomb
04:53 < livinded> ljharb: --mirror
04:53 < jesusabdullah> but thealphanerd imagine the ADVERTISING REVENUE
04:53 < thealphanerd> ljharb: what about cloning a wiki
04:53 < ljharb> thealphanerd: most wikis allow that use, such as wikipedia. if they don't, its unethical.
04:53 < prettyrobots> thealphanerd: Unethical.
04:53 < livinded> ljharb: is the wayback machine unethical?
04:53 < jesusabdullah> so, nischt nischt?
04:54 < prettyrobots> livinded: Wayback respects robots.txt.
04:54 < jesusabdullah> what about eating really chocolatey things like all the time?
04:54 < thealphanerd> a robot would say that prettyrobots 
04:54 < livinded> prettyrobots: what if your scaper respected robots.txt
04:54 < thealphanerd> ethicalscrape.js?
04:54 < prettyrobots> livinded: Ethical.
04:54 < ljharb> livinded: obviously we can start getting into gray area pretty easily
04:55 < ljharb> livinded: but the default position on scraping should be "unethical" and it should be justified into doing it, rather than the opposite direction.
04:55 < livinded> ljharb: what's gray about it, it's scraping
04:55 < prettyrobots> ljharb: Yes. Like Instapaper took forever to add page stitching for (I believe) ehtical reasons.
04:55 < livinded> who determines what scraping is ethical?
04:55 < ljharb> i think instapaper only does page stitching when there's a "view all" link
04:55 < jesusabdullah> ljharb. He'll be here all week!
04:55 < ljharb> livinded: usually, the law.
04:55 < livinded> ljharb: no, they pull out actual content
04:55 < ljharb> hahaha
04:56 <@maxogden> the internet is for people with crappy servers to make money by having accurate advertising dashboards
04:56 < livinded> so the law gives archive.org explicit permission to scrape websites but nobody else?
04:56 < ljharb> livinded: i didn't answer your question about wayback. they don't have permission any more than anyone else does.
04:56 < jesusabdullah> livinded: Look into "fair use" vs. "making money on someone else's work"
04:57 < livinded> jesusabdullah: nobody ever mentioned making money
04:57 < prettyrobots> I'm going to scrape this conversation and make millions.
04:57 < ljharb> "fair use" is the very fuzzy determination if something is illegal or not, and it does NOT require making money off of something to not be considered "fair use"
04:57 < livinded> original topic was for personal use which falls under fair use
04:57  * prettyrobots rubs hands
04:57 < jesusabdullah> No, I'm just saying, those are two extremes of re-exposing content
04:57 < thealphanerd> are you making money off it
04:57 < ljharb> "personal use" and "fair use" are absolutely not the same thing in all cases.
04:57 < livinded> prettyrobots: I demand royalties!
04:57 < ljharb> thealphanerd: and "not making money" does NOT equal "fair use"
04:58  * jesusabdullah bandies around more legal terms
04:58 < prettyrobots> livinded: Do you take BitCoin?
04:58 < livinded> prettyrobots: no, only real money
04:58 < thealphanerd> ljharb: I would argue with you… if someone is not financially profiting off of this kind of work then it qualifies as academic research
04:58 < thealphanerd> thus fair use
04:58 < ljharb> thealphanerd: thousands of US courts disagree with you.
04:59 < ljharb> it'd be nice if that WAS fair use, but it's verifiably not.
04:59 < thealphanerd> BUT
04:59 < thealphanerd> I don't live in the US
04:59 < prettyrobots> Gasp!
05:00 < jesusabdullah> WHY NOT THEALPHANERD
05:00 < ljharb> when you get international it starts getting very fuzzy indeed. usually you have to abide by your own country's rules. however i think many countries consider any US site/company to fall under the US's rules, because the US gets snippy with countries that don't follow our rules
05:00 < jesusabdullah> in soviet russia all webscraping is ethical.
05:00 < ljharb> in soviet russia, webpage scrapes you!
05:00 < livinded> thealphanerd: I'll accept cool australian money as well
05:00 < ljharb> but obviously you'll always be safe if you abide by the strictest set of laws between your country, and the country of the site/company you're interacting with.
05:00 < thealphanerd> I'm moving to the states in 2 months
05:00 < thealphanerd> very excited actually :D
05:01 < livinded> from where?
05:01  * thealphanerd is a canuck
05:01 < jesusabdullah> but thealphanerd everyone knows the grass is greener in canuckistan!
05:01 < livinded> you people have that fake electric money too
05:01 < livinded> the royal mint is pushing it
05:01 < jesusabdullah> actually, I really liked the parts of Canada I rolled through
05:01 < thealphanerd> great nature
05:01 < jesusabdullah> the Dawson Creek WalMart had ketchup chips
05:02 < jesusabdullah> and the mall in Vancouver had a combination kfc and taco bell
05:02 < jesusabdullah> where you could get nachoed french fries
05:02 < livinded> and they say americans eat shitty food
05:02 < jesusabdullah> and believe me, I *did* get nachoed french fries.
05:02 < thealphanerd> poutine is way better than nacho fries
05:02 < livinded> we don't have fries covered in gravy
05:02 < jesusabdullah> Dude. Ketchup chips are actually empirically known to be delicious
05:02 < kop48> whoa… this is so weird. I haven't been on IRC in 5 or so years...
05:02 < jesusabdullah> well yeah thealphanerd it's poutine
05:03 < jesusabdullah> hard to beat poutine with nacho cheese
05:03 < jesusabdullah> THAT SAID I did not get to eat poutine as I was in west canada
05:03 < thealphanerd> pulled pork poutine
05:03 < thealphanerd> there
05:03 < thealphanerd> beat
05:03 < jesusabdullah> but I *did* get to drive through Hope, BC, and then joke about how shitty it was with Brian Leroux when I met him a few monthys later
05:03 < ljharb> pulled pork + foie gras poutine!
05:04 < livinded> thealphanerd: where may I find that?
05:04 < thealphanerd> livinded: buy ingredients
05:04 < thealphanerd> put in bowl
05:04 < jesusabdullah> I would eat the shit out of pulled pork poutine
05:04 < ljharb> bring me a pig and a fat goose and some poutine!
05:04 < livinded> foie gras just got banned here
05:04 < ljharb> there's still loopholes.
05:04 < jesusabdullah> I'm okay with skipping the unethical foodages
05:04 < ljharb> it will be served in the Presidio, plus there's underground events
05:04 < thealphanerd> ethical or unethical: foie gras
05:05 < livinded> ironic that ljharb is willing to find loopholes for foie gras but not scraping
05:05 < ljharb> ha. personally i think it's fine. birds don't breathe through their throats, and if left alone they'll eat the exact same amount of food and get just as fat, they'll just do it slower.
05:05 < jesusabdullah> unethical. bird-feelings are small but measurable.
05:05 < ljharb> livinded: i don't anthropomorphize birds. websites are owned by humans.
05:06 < jesusabdullah> birds have very strange personalities.
05:06 < jesusabdullah> you have to remember, they're closely related to velociraptors. More closely to them than us definitely.
05:06 < ljharb> jesusabdullah: that said tho, i'm all for non-force-fed fois gras farms. only the french require the gavage to call it "foie gras".
05:06 < thealphanerd> ljharb: who's the sociopath now
05:06 < thealphanerd> :P
05:07 < jesusabdullah> ljharb: Yeah, I'd be down for that too., truth be told, but the force feeding makes me slightly uneasy
05:07 < ljharb> "sociopath" relates to humans. birds aren't human, and it's a mistake to think that we could possibly know what they think or feel, one way or the other.
05:07 < thealphanerd> ljharb: living things don't enjoy dying or being in pain
05:07 < jesusabdullah> I don't feel TOO bad for geese and ducks, they're assholes in general. Especially geese.
05:07 < ljharb> jesusabdullah: they're not choking while being force fed, and it's the same amount they'd otherwise eat, so i think it's fine
05:07 < livinded> ljharb: alright nagel
05:07 < thealphanerd>  ljharb they basically eat themselves to death
05:07 < thealphanerd> kind of fitting actually
05:07 < ljharb> thealphanerd: you can't possible tell me with certainty that celery feels enjoyment, or pain.
05:08 < jesusabdullah> well, like
05:08 < jesusabdullah> people eat themselves to death
05:08 < thealphanerd> ljharb: I don't care… I need celery
05:08 < thealphanerd> can't make a good caesar without it
05:08 < ljharb> thealphanerd: i need foie gras!
05:08 < livinded> it's every animals right to eat itself to death
05:08 < jesusabdullah> ljharb: did you know I have a pet parakeet? He's way cooler than some stupid goose but he IS a bird!
05:08 < ljharb> jesusabdullah: awesome! i like birds. i like cows too but i still love burgers.
05:08 < thealphanerd> birds give me the heebeejeebees… but that's because I'm surrounded by pidgeons
05:09 < livinded> jesusabdullah: I'm sorry for you. Parakeets so fucking annoying
05:09 < ljharb> lol
05:09 < jesusabdullah> pffsht
05:09 < jesusabdullah> my parakeet is rad
05:09 < jesusabdullah> a bit clingy
05:09 < livinded> I fed one to my snake once
05:09 < jesusabdullah> very sassy
05:09 < livinded> that's the only time I ever owned a parakeet
05:09 < chilts> funny thing is I was just in France and saw that Foie gras and didn't know what it was, so I left it - just had a read and am glad I did now
05:09 < jesusabdullah> ljharb: Like I said, a far cry from some stupid goose. I'll eat the shit out of poultry.
05:09  * chilts is back from holiday
05:09 < thealphanerd> livinded: Adam sandler?
05:10 < jesusabdullah> but like, I'm the sort of person that would apologize before butchering.
05:10 < livinded> thealphanerd: ?
05:10 < ljharb> yeah actually i feel weird about eating octopus, because cephalopods are so freaking smart
05:10 < jesusabdullah> Not that the chicken cares
05:10 < thealphanerd> "I fed one to my snake once" is that from an adam sandler cd?
05:10 < livinded> thealphanerd: no, I really did
05:10 < ljharb> jesusabdullah: sure i'd do that too. "i love you goose! i hope your life was happy!" *snick* *cook* *fois gras* yum.
05:10 < thealphanerd> ohhhh
05:10 < livinded> the snake leaped into the air and grabbed it
05:11 < livinded> fucking crazy
05:11 < ljharb> once i saw a cat grab a bat out of mid air and start eating it.
05:11 < ljharb> nature's fucked up.
05:11 < livinded> nature is awesome
05:11 < ljharb> also that.
05:11 < jesusabdullah> well, more like, cluckcckcluck-glugglugglugFLAPFLAPFLAPFLAPFLAPFLAPFLAPFLAPFLAPFLAPFLAP...FLAP...FLAP......FLAP...............FLAP
05:11 < livinded> just sucks being low in the food chain
05:11 < ljharb> jesusabdullah: lol
05:12 < chilts> jesusabdullah: congrats on the launch of the public beta :)
05:12 < chilts> (I'm just catching up on emails)
05:12 < jesusabdullah> chilts: haha! Thank you!
05:12 < jesusabdullah> It also seems to have gone rather smoothly
05:12 < chilts> it's awesome to see it all happening
05:12 < chilts> yeah
05:12 < jesusabdullah> which was mildly surprising considering we'd JUST migrated to Joyent
05:12 < livinded> jesusabdullah: any advice on front ends for proxying websockets?
05:13 < jesusabdullah> closest thing I can recommend, livinded, is https://github.com/nodejitsu/node-http-proxy
05:13 < livinded> gonna be deploying something in a couple weeks and need to start looking into options
05:13 < jesusabdullah> The api is a bit obtuse, I'll admit, but we've been using it in production since the beginning
05:13 < jesusabdullah> and websockets are a big market differentiator for us so we're pretty on top of ensuring socket.io works on it
05:13 < livinded> would definitely look into nodejitsu but this all needs to be local
05:14 < jesusabdullah> right, so you use our proxy module, which is open source, to put together your own balancer
05:14 < jesusabdullah> Some assembly required.
05:15 < jesusabdullah> bouncy may also support websockets. It's smaller, leaner, etc., but slower and with fewer bodies maintaining it
05:15 < jesusabdullah> or at least, last I heard it was slower.
05:15 < livinded> ya, I was considering that as well as haproxy
05:16 < thealphanerd> jesusabdullah: have you tried coupling socket.io with osc messages?
05:16 < livinded> it's gonna be a small deployment, I just need something that can handle being attacked by 200+ hackers for 50 or so hours
05:16 < thealphanerd> really seamless way of sending messaegs between applications
05:16 < jesusabdullah> give node-http-proxy a good kick on the tires
05:16 < jesusabdullah> thealphanerd: I had not! osc as in open sound protocol?
05:16 < livinded> jesusabdullah: I'll definitely look into it. Looks pretty simple to setup for my needs
05:17 < jesusabdullah> livinded: Definitely. My advice is to just use the .proxyRequest method
05:17 < thealphanerd> jesusabdullah: it's mostly an abstraction on top of udp
05:17 < livinded> let you know how it stands up to a few hundred hackers hammering it after defcon
05:17 < jesusabdullah> livinded: Word. Forward any security sploits to us as well.
05:17 < livinded> will do
05:25 < thealphanerd> I love my solid state.  My computer just died and I had to plug it in… restart… and relogin.  less than a minute
05:29 < SubStack> jesusabdullah: yep, it's slower
05:29 < SubStack> and not as well maintained
05:29 < SubStack> I should probably just switch back to the version that used node's http parser
05:30 < SubStack> since that was fast and the test that lead me to conclude that there was a bug was wrong anyways
05:30 < SubStack> the api is a little bit nicer though I would wager
05:31 < SubStack> at any rate, programmable balancer are the best thing ever
05:31  * tim_smart just found mutt. Tim like it.
05:32 < smathy> The email client?
05:33 < tim_smart> Yeah
05:34 < smathy> There's a mutt-ng (next generation) which has some good additional features over the basic/older mutt.  In case that's not what you're using.
05:34 < smathy> Been a while though, so my info might be outdated now.
05:35 < smathy> I loved mutt before switching to the gmail web client.
05:50 < tim_smart> smathy: I'm using mutt-sidebar for now
05:50 < tim_smart> I'll take a look at mutt-ng
06:02 < jamescarr> ah, nothing like a late night accidental vim shortcut to send you on a half hour exploration to understand why your code is broke :S
06:26 < tim_smart> jamescarr: :q! ?
06:30 < jamescarr> tim_smart :)
06:34 < Trindaz> llrcombs, thealphanerd: solved the gunzip problem. My request code was forcing the encoding to utf-8 so the data was wrecked before even trying to unzip. Gotta be base64 all the way. New problem of truncated results, but at least the leading snippet that I get is totally valid html!!! THANKS!!!
06:35 < thealphanerd> scraper :p
06:36 < livinded> Trindaz: you pull down the data and try it with gunzip/look at it in a hex editor?
06:38 < Trindaz> didn't need hex editor. used almost identical code to my first attempt 6 hours ago, except this time I just changed res.setEncoding('utf-8'); to res.setEncoding('base64');
06:38 < Trindaz> i was so close that whole time
06:38 < Trindaz> i still have virtually no understanding of basic encoding concepts
06:38 < jesusabdullah> Trindaz: Do some wikipedia reading, is my suggestion.
06:38 < llrcombs> Trindaz: stop trying to set encodings!
06:38 < jesusabdullah> It's actually pretty interesting!
06:38 < jesusabdullah> look up EBCDIC >:)
06:39 < Trindaz> I understand that encoding changes the meaning given to the underlying bits - e.g. how many bits are used to define one char in the codepage you're using to present the data, but why does changing encoding actually destroy the underlying data
06:39 < Trindaz> Oh i've read plenty of articles about it in the past. Joel Spolsky's post about it, wikipedia etc. It still makes no sense.
06:40 < llrcombs> Trindaz: stop setting encodings because you should be using raw buffers for this and passing the data from the request directly into gunzip
06:41 < Trindaz> llrcombs: I have to set encodings. gunzip requires an encoding param to be able to unzip the buffer
06:41 < llrcombs> Trindaz: false
06:42 < llrcombs> Node's zlib requires no such thing
06:42 < llrcombs> Node's zlib takes raw buffers as input, not strings
06:42 < Trindaz> llrcombs: true. Node's zlib requires it, as proved by the code I just ran after your suggestion about not using encodings.
06:43 < Trindaz> llrcombs: you must be suggesting that I not do any assigning-to-a-string-of-response-data before then gunzipping it. Just attach listeners to the data events of the response and pipe it in right?
06:43 < llrcombs> or just response.pipe(gunzip)
06:44 < Trindaz> so here's another thing that i just don't get about encoding: what is so bad about storing the data in a string before then sending it gzip? why is gzip so unable to just automatically unzip string data if it's so great when dealing directly with a buffer?
06:45 < llrcombs> my recommendation: on the first data event, check the headers and see what the content-encoding (compression) is, create an object to deal with it (unzip, gunzip, or deflate), then send it in
06:45 < llrcombs> Trindaz: because zlib doesn't _support_ string input
06:45 < Trindaz> if strings weren't capable of storing *ANY* series of bites then why is it possible for the console output to show such bizare characters for string values?
06:45 < Trindaz> sorry llrcombs you're write. I meant a new buffer created with a string of previously created data
06:46 < jesusabdullah> Trindaz: Because strings *are* capabable of storing pretty much any bytes, but they're not the right abstraction. Using strings for binary data is a ****hack**** at best
06:46 < jesusabdullah> at worst, the status quo.
06:46 < llrcombs> converting buffers to strings can leave out certain characters (e.g. using ASCII will drop the high bit and only use the last 7 in each byte)
06:47 < jesusabdullah> depending on the encoding
06:47 < llrcombs> if you CAN use Buffers for binary data, do so.
06:47 < jesusabdullah> ^^^^^^^^^^^^^^^
06:47 < llrcombs> jesusabdullah: ^5
06:47 < jesusabdullah> :)
06:48 < Lorentz> http://www.joelonsoftware.com/articles/Unicode.html
06:48 < Lorentz> for those who aren't into charsets
06:48 < jesusabdullah> Trindaz: It just happens that utf-8 maps well to octets.
06:48 < jesusabdullah> because all the data's expected to be in 8 bit chunks
06:49 < jesusabdullah> but that doesn't mean every possible series of bytes can be converted into well-specified unicode characters really
06:49 < llrcombs> also, if whatever you're getting is compressed, send the first data value directly in and then call .pipe();. Otherwise, you can gather data in a string (since it's plaintext). Use .once() instead of .on() so you only get the first event.
06:49 < jesusabdullah> check out ebcdic, really. It's a very interesting piece of history.
06:49 < Lorentz> Unicode has its own fickle ways of making sure you can tell it's continuing of previous byte
06:49 < Lorentz> so I still wouldn't use it to store binary blob data
06:49 < llrcombs> jesusabdullah: here's the problem he was having: he was using Base64, which does NOT do well with concatenation
06:50 < thealphanerd> anyone have a comment on Normalize.css or HTML5-Boilerplate?
06:50 < jesusabdullah> concatenating base64?
06:50 < jesusabdullah> oh gawd that's a whole 'nother thing
06:50 < llrcombs> concatenating 2 base64 strings and then de-base64ing it will not give you the original 2 strings concatenated
06:50 < jesusabdullah> no, nonono
06:50 < llrcombs> Trindaz: so, the lesson is, don't call setEncoding when you're expecting binary data
06:51 < jesusabdullah> I actually rarely, if ever, setEncoding.
06:51 < jesusabdullah> I usually just explicitly .toString the buffer
06:52  * llrcombs wonders if there's a read/write-able string that lets you write to it endlessly, then get everything you wrote as a Buffer
06:52 < llrcombs> OOH!
06:52 < llrcombs> I remember there is
06:53 < llrcombs> part of BufferUtils, which should be a native part of Node
06:53 < llrcombs> that'd be perfect for this type of stuff
06:54 < llrcombs> pipe to it, then get the contents on("end")
06:54 < Trindaz> llrcombs: lesson very well learned already. I still can't see why there was any good reason that setting the encoding destroyed the data. it obviously did but i haven't seen any comments to address that. It would have to be true that some encodings simply allow series of bits that other encodings don't. Is that the case?
06:54 < llrcombs> Trindaz: that is correct, but not the cause of your problem
06:54 < llrcombs> you were using base64, yes?
06:54 < devaholic> streaming redis client http://news.ycombinator.com/item?id=4237919
06:54 < llrcombs>  <llrcombs> concatenating 2 base64 strings and then de-base64ing it will not give you the original 2 strings concatenated
06:56 < Trindaz> i WAS using utf-8 which wrecked everything, base64 seemed to solve it but the final output was truncated. piping the buffer straight to gzip is obviously what i'm going to do next.
06:56 < Trindaz> what is 'de-bas64ing'?
06:57 < llrcombs> atob(btoa("foobar ") + btoa("baz")) <-- just try doing this in a WebKit inspector
06:57 < llrcombs> de-base64ing would be taking Base64-encoded Strings and converting them to Buffers
06:57 < savadi> hello peeps, which tool can i use to parse v8.log in ubuntu ?
07:00 < llrcombs> not sure what problems utf8 would cause; my guess is there was something wrong with the code that I missed because I was too busy trying to get you to use buffers
07:03 < llrcombs> did you say "utf-8" or "utf8" in the code? The former would have thrown.
07:06 < sabermonk> hi, is there a way to implement mutex in node ? though node is single threaded but what if multiple node instance are centending for a shared resource?
07:07 < EhevuTov> sabermonk, use a callback?
07:08 < jesusabdullah> sabermonk: you mean, contending ?
07:08 < jesusabdullah> sabermonk: I mean, isn't a mutex basically just a lockfile?
07:08 < sabermonk> yes , that was type
07:09 < jesusabdullah> wait, type of what?
07:09 < jesusabdullah> NOW I'm confused
07:09 < sabermonk> yes,** typo
07:09 < jesusabdullah> lulz
07:09 < sabermonk> i look on the screen when i type .. 
07:09 < jesusabdullah> but yeah, just use the fs module to check for a lockfile
07:09 < jesusabdullah> and react accordingly
07:10 < jesusabdullah> maybe respond by polling every n ms until the file isn't there anymore?
07:10 < jesusabdullah> Or, use some communication protocol
07:10 < jesusabdullah> I mean, I haven't really ran into that problem irl
07:11 < sabermonk> thanks for answer, that would have the solution if i had a lock file, 
07:11 < sabermonk> i think i should rephrase my question
07:12 < sabermonk> i want to implement a mutex scenario where in a piece of code is execited exclusively altogether
07:13 < sabermonk> such as .. function (cb){ check_system_resource(<res_name>) { cb(null,true); } }
07:13 < sabermonk> now there are multiple node instances accessing this function
07:15 < sabermonk> what if , if two node instances access this function at the same time, and both return with status = available
07:15 < sabermonk> but actually, as soon as one instance return status = available , isn't the other node instance say it is blocked?
07:15 < devaholic> sabermonk: is the function being executed in the same context
07:16 < sabermonk> context as in?
07:16 < devaholic> are you communicating to a process that the function always runs in, or are the node processes each executing that function in their context
07:17 < sabermonk> the latter . node processes each excute that function in their context
07:17 < devaholic> if its the former, just flip a bit, if its the latter, use a lockfile like jesusabdullah said
07:17 < sabermonk> how to use a lockfile, haven't used it before?
07:22 < DTrejo> npm docs lock
07:22 < npmbro> DTrejo: No results
07:22 < DTrejo> npm docs lock-file
07:22 < npmbro> DTrejo: No results
07:22 < DTrejo> npm search lock file
07:22 < npmbro> DTrejo: Please see http://eirikb.github.com/nipster/#lock%20file
07:22 < DTrejo> ayyy there it is
07:22 < DTrejo> npm docs lockfile
07:22 < npmbro> DTrejo: Please see http://github.com/isaacs/lockfile#readme
07:22 < jetienne> hi
07:23 < DTrejo> hey j
07:30 < [AD]Turbo> hola
07:31 < devaholic> dominictarr: https://github.com/tblobaum/redis-stream/blob/master/example/hgetall-parse.js
07:32 < dominictarr> devaholic, do you have a stream that parses the redis protocol?
07:33 < devaholic> yes its in /index.js
07:33 < sabermonk> does the command npm docs lockfile , opens the readme in a browser?
07:33 < devaholic> dominictarr: the reply parser could be optimized a bit, but it works
07:36 < devaholic> dominictarr: also i had to es.pipe two es.pipe's or else i'd sometimes get writable=false on the last stream before some writes made it through that should have, im not sure if thats a bug or how i'm using it
07:36 < dominictarr> that sounds like a bug.
07:36 < dominictarr> es.pipe is really old. 
07:37 < dominictarr> I wrote that before you could call stream.pipe(...).pipe(...)
07:37 < dominictarr> what sort of thing where you doing?
07:38 < devaholic> this, just without the two inner es.pipe's https://github.com/tblobaum/redis-stream/blob/master/index.js#L28-43
07:39 < dominictarr> so what happened if you just used a single pipe?
07:40 < devaholic> data wouldnt make it through, it would get through the first es.map, make it to _redis, then get lost somewhere in es.split or the last es.map
07:40 < dominictarr> do you have a test case?
07:41 < devaholic> basically, calling .end() only sometimes worked as expected (flushing the queue) and sometimes things just wouldnt make it through the pipe
07:41 < dominictarr> did it happen every time, or just in particular situations?
07:41 < devaholic> well if you take out the inner es.pipes and run npm test there is your test
07:41 < dominictarr> cool.
08:29 < sh1mmer> mikeal: holy fuck
08:29 < sh1mmer> I'm so angry I actually can't sleep
08:33 < mmalecki> dominictarr: I have beer
08:33 < mmalecki> dominictarr: is it enough for you to fly in?
08:34 < fatAgnes> hi
08:35 < fatAgnes> i really love cloud9 but it seems to be down a lot
08:35 < fatAgnes> the ide is awesome
09:00 < xeodox> Is setTimeout() blocking in node.js?
09:02 < kmiyashiro> xeodox: why would it be?
09:02 < xeodox> i swear to god it slows my server down
09:03 < ljharb> xeodox: pretty sure you should use process.nextTick instead
09:03 < xeodox> how do I do that?
09:03 < sh1mmer> depends what you want to do
09:03 < sh1mmer> they do different things
09:03 < ljharb> what's the difference?
09:04 < sh1mmer> setTimeout with 0 says I'd like you to issue this callback after at least 0ms
09:04 < sh1mmer> so it gets added to the event queue
09:04 < ljharb> oh right, nextTick is the same as setImmediate or setTimeout 0?
09:04 < sh1mmer> nextTick is a special queue ahead of the main event queue
09:04 < ljharb> ah, ok
09:04 < sh1mmer> so it get priority
09:05 < sh1mmer> the difference is kind of pushing to the front or the back of the queue
09:05 < sh1mmer> but not exactly because nextTick is also a queue
09:47 < tim_smart> ljharb: Doing setTimeout(fn, 0) will create a timer, where nextTick just push/pops a simple queue.
09:47 < tim_smart> Unless they optimize the setTimeout(fn, 0) case.
09:49 < tim_smart> Looks like it justs gets trasformed into a 1ms timer https://github.com/joyent/node/blob/master/lib/timers.js#L175
09:49 < tim_smart> *just
09:54 < sh1mmer> timeout only promise to be after X time
09:54 < sh1mmer> not on X time
09:58 < eldios> join the party.. open a shell and -> while (true );do for i in $(echo -e '\\\o\n\o)\n(o)\n\o/\n(o)\n(o/\no//\n(o/\n(o)\n\o/\n(o)\n\o)');do clear;echo $i;sleep 1s;done;done;
09:59 < upb> \,,/ (>_<) \,,/
10:03 < Trindaz> I can print the output of gunzip to console just fine, but I want it as a string. What should I do to this code to be able to get it as a string for further processing? res.pipe(gunzip).pipe(process.stdout)
10:14 < sabermonk> hi,
10:15 < sabermonk> i was trying to use lockFile to achieve mutex operation on a certain function that is hit by multiple node instances at the same time ..
10:15 < sabermonk> here is the gist .. https://gist.github.com/2a88b55c3ca29af7ad71
10:16 < sabermonk> what should i add/remove to so that the function runs exclusively . ..
10:17 < sabermonk> Note : issacs lockfile is used : https://github.com/isaacs/lockfile
10:23 < dmilith> anybody tried to build node 0.8.2 on bsd?
10:23 < livinded> not I
10:23 < livinded> built it on os x though
10:24 < livinded> userland is pretty similar
10:24 < RLa> dmilith, it should build fine
10:25 < dmilith> not on bsd 9
10:26 < RLa> what errors you get
10:26 < dmilith> it lacks entry freebsd9 in tools/gyp/pylib/gyp/common.py
10:26 < dmilith> it tries to use linux headers.. cause freebsd 9.0 isn't detected properly
10:27 < dmilith> I have patch for 0.8.1, but I need to make it again for 0.8.2, which is painful
10:27 < RLa> hm
10:27 < dmilith>      'freebsd8': 'freebsd',
10:27 < dmilith> +    'freebsd9': 'freebsd',
10:27 < dmilith> this is ALL in that patch
10:27 < livinded> dmilith: make it against master and submit a pull request
10:28 < livinded> oh...
10:28 < dmilith> do a fork of whole tree for this one liner?
10:28 < dmilith> isn't that just stupid? ;]
10:28 < livinded> it does need to be fixed...
10:28 < RLa> why not just send patch by mail or attach to an issue
10:28 < dmilith> livinded: I suggest adding also freebsd10 which is upcoming release
10:28 < RLa> yes, it needs, expecially when the fix is so trivial
10:29 < livinded> why are they specifying specific versions of fbsd?
10:30 < dmilith> don't ask me. ;]
10:30 < livinded> meh, it's 3:30am think it's time for bed
10:30 < dmilith> ^^
10:30 < dmilith> 12:30 here 
10:30 < livinded> It was probably a mistake to start building this massive real time app two weeks before it has to be deployed
10:31 < dmilith> ;']
10:31 < livinded> especially when there's still much more work to be done with the rest of the project
10:31 < dmilith> what technologies were used?
10:31 < livinded> in the realtime part?
10:32 < dmilith> yes
10:32 < livinded> node.js, postgres, socket.io as of right now. I'm probably going to end up adding in 0mq so I can separate administration from user facing and possibly redis so I can load balance
10:32 < dmilith> postgres for real time? :o
10:32 < livinded> dmilith: for the relational data
10:33 < livinded> it's a scoreboard for a contest I'm running
10:34 < dmilith> I think that redis master in memory + redis backend with save() would be 100x faster for realtime 
10:34 < livinded> I didn't realize how much work it was going to be until I started writing it
10:34 < dmilith> but yes, it lacks relational model ;]
10:34 < RLa> and unless you have big data which does not fit into ram
10:34 < livinded> dmilith: the data is very relational and I want the records
10:34 < dmilith> yes
10:34 < livinded> none of it really stays in memory long enough to need redis
10:34 < dmilith> RLa: or unless you have 64GiB of RAM on servers ;]
10:35 < RLa> oh
10:35 < livinded> the only thing we're storing in memory right now is user objects for each connection which is what I'd end up storing in redis for load balancing if the instances end up needing to share the user objects
10:35 < dmilith> but let me be honest.. realtime is just pure dream.. it should be doable to make it "almost" realtime
10:36 < dmilith> but without somthing like QNX on backend.. it might be tough
10:36 < livinded> why is it tough?
10:37 < dmilith> it depends on "what do you mean saying 'realtime'" 
10:37 < livinded> once you have websockets in place it's no different than thick clients connected via tcp
10:37 < dmilith> quite interesting.. this "freebsd9 element is already there in master
10:37 < upb> its the difference between realtime and 'web developer realtime'
10:37 < upb> heheheh
10:37 < dmilith> in tools/gyp/pylib/gyp/common.py
10:37 < dmilith> upb: exactly
10:38 < dmilith> for phisics modeling.. realtime means realtime ;]
10:38 < livinded> what's "web developer realtime"?
10:38 < dmilith> livinded: TBH, it's almost impossible to have realtime when using GC
10:38 < dmilith> (I said almost, cause with proper tweaking software with GC can achieve short enough pauses time)
10:39 < dmilith> web realtime is.. websockets ;]
10:39 < dmilith> system realtime.. means.. no windows, no osx, no linux (yea, realtime patch is a crap)
10:39 < dmilith> and .. no bsd either ;]
10:40 < livinded> that's a pretty shitty definition of real time
10:40 < dmilith> QNX is one I played with, but it was extremely unstable that time
10:40 < dmilith> I didn't define realtime ;]
10:40 < livinded> even with an RTOS you're still doing process scheduling
10:40 < livinded> well not process, but time sharing
10:42 < dmilith> but with extremely lower timings.. in wide used OSes, when You're doing getNanoTime() you're dealing with measurement error bigger than unia ;]
10:42 < dmilith> unit*
10:42 < livinded> just seems like an overzealous definition
10:43 < dmilith> in real time systems, nanosecond is measurable.. that's why it's used in military, medical facitilities and so on
10:43 < dmilith> livinded: try to measure it on Your system. Try to achieve measurement error for nano seconds which will be lower than 1 us
10:44 < dmilith> and You'll get what I mean
10:44 < livinded> I understand what you mean
10:45 < dmilith> monolithic kernels just cannot be realtime in that "system realtime" mean. 
10:45 < dmilith> That's why we said "realtime" and "web realtime" ;]
10:45 < dmilith> (or maybe I'm wrong? and there's a monolithic kernel which is realtime?) 
10:46 < dmilith> but I haven't seen such thing yet
10:46 < livinded> I guess we just need to adopt a better word to describe stateful apps
10:47 < mmalecki> hey guys, anyone seeing js errors on airbnb site? like here: http://www.airbnb.pl/rooms/304902
10:48 < dmilith> mmalecki: only "Warning: invalid or missing user cookie." on Safari 6 (osx)
10:48 < livinded> but ya, this project is gonna suck to knock out in time. I'm just gonna give up on building a web ui to handle administration and build a simple cli tool
10:48 < mmalecki> dmilith: thanks, might be my google chrome dev, then
10:48 < bmatusiak> any alternatives to this? https://gist.github.com/3104208
10:48 < dmilith> mmalecki: it's -dev of Safari ;]
10:49 < dmilith> mmalecki: I mean Safari 6 is dev too
10:49 < mmalecki> "Uncaught TypeError: Cannot set property 'JST' of undefined " <- what I'm getting
10:49 < livinded> new safari is awesome now that they finally have the awesome bar
10:49 < livinded> not willing to get off the chrome nightlies though
10:49 < dmilith> it's not awesome yet.. cause they had to work on stability issues.. 
10:50 < dmilith> but yes, chrome way of unified bar is cool
10:50 < livinded> safari is just way too far behind in terms of html 5 features when you've been running chrome nightlies for the paste year+
10:51 < dmilith> safari dev isn't that far behind. It's chrome, safari, void, void, void.. ff, opera.. 
10:51 < livinded> ya, safari dev isn't, but the one that ships with os x is
10:51 < dmilith> latest opera 12 is so broken.. in terms of html5..
10:52 < dmilith> livinded: unfortunatelly It's true
10:52 < livinded> wonder if node is going to get btoa and atob anytime soon or if we just have to keep using buffers to convert
10:53 < dmilith> ok I don't get something..
10:54 < dmilith> https://gist.github.com/3104251
10:54 < dmilith> maybe I'm just stupid or sth..
10:54 < dmilith> but where this "flavors" are used here?
10:54 < dmilith> it's hardcoded linux ?
10:54 < dmilith> maybe this is the reason why it cannot be compiled under fbsd 9
10:55 < dmilith> isaacs: am I right, or am I blind or sth?
10:56 < dmilith> will check it out on my bsd box right now
10:56 < livinded> shit did tj just leave. I thought I saw him join
11:01 < sabermonk> hi, any help with his, i am really stuck at this ... https://gist.github.com/2a88b55c3ca29af7ad71
11:02 < sabermonk> anyone? 
11:02 < mickhansen> might callbacks
11:02 < mickhansen> mighty*
11:02 < sabermonk> was it for me?
11:03 < mickhansen> heh yea - Just a nested callback hell. But whats the issue?
11:04 < sabermonk> need to find available ports, multiple node instances are hitting this function
11:05 < sabermonk> so thot using a lockfile
11:05 < sabermonk> well.. if file in unlocked, i proceed. find the port and return ..
11:05 < sabermonk> in the meantime the getport operation is in progress the lock  remains
11:06 < sabermonk> if in this span of time another node isntance hits this functions it finds the lock
11:07 < sabermonk> but what i need to do here it if a lock is encountered, that instance should wait for the lock to be free and the proceed
11:07 < mickhansen> ah, out of my ballpark sorry
11:08 < sabermonk> hmm ... ok ..i hope i am using node properly..
11:17 < Orion-> Hi there
11:18 < SubStack> monaco!
11:18 < Orion-> I'm writing a native node module and wonder how to Set a NaN V8::Number ?
11:18 < Orion-> Hey
11:19 < SubStack> Number() can take a string value I think
11:20 < SubStack> or maybe just a v8::String but you could try both
11:20 < Orion-> Nop V8:Number::New(double value)
11:24 < Orion-> Not much activity here
11:24 < dmilith> Orion-: you probably should ask on #v8
11:24 < Orion-> dmilith: that's an idea :)
11:25 < dmilith> I'm not familiar with native v8/node code, but there should be NaN identifier somewhere
11:26 < Orion-> dmilith: I didn't find it yet...
11:27 < kiur> any news on socket.io 1.0 ?
11:29 < Orion-> Hey `3rdEden :) ltns
11:29 < `3rdEden> Hello! :)
11:29 < upb> sabermonk: you arent checking for error
11:30 < upb> and from the looks of it https://github.com/isaacs/lockfile/blob/master/lockfile.js
11:30 < upb> retryWait is only used when retries is specified
11:31 < sabermonk> upb: i cud have checked for errors but for brevity i have trimmed the code, the objective is to get a valid port
11:32 < upb> yes but if acquireing the lock fails you just proceed
11:33 < sabermonk> if acquiring the lock fails i need to make that process wait , until the lock is freed
11:33 < upb> indeed
11:33 < upb> https://github.com/isaacs/lockfile/blob/master/lockfile.js#L114 see here
11:36 < sabermonk> this means both retries and retryWait are to be used togather.
11:37 < sabermonk> but what is the point of keeping them together?
11:37 < mickhansen> well, retried is how many times you want it to retry - and retryWait is the delay between
11:37 < mickhansen> atleast thats my guess
11:38 < sabermonk> yes, precisely,
11:38 < sabermonk> say if retryWait is 10 it will check on the lock 10 times, in each process tick
11:38 < kiur> `3rdEden, do you happen to know about socket.io's 1.0 release date?
11:39 < sabermonk> new gist, will this work? https://gist.github.com/ca4b4c8512134bfd5953
11:39 < bmatusiak> anybody ever try this loop? https://gist.github.com/3104208
11:46 < tim_smart> bmatusiak: Why not just do a async check + lock?
11:46 < tim_smart> Sorry, sabermonk ^
11:48 < sabermonk> async check+ lock meaning checking in the lock in async manner?
11:48 < bmatusiak> humm
11:48 < tim_smart> sabermonk: Ya
11:48 < tim_smart> bmatusiak: What are you trying to do?
11:50 < bmatusiak> i was just removeing my my for loops into something nonblocking / with ability to pause
11:50 < sabermonk> tim: i tried with this . https://gist.github.com/ca4b4c8512134bfd5953
11:50 < sabermonk> but didn't work
11:50 < tim_smart> sabermonk: Are you using a module for lockfile>
11:51 < tim_smart> *?
11:51 < sabermonk> yes
11:51 < sabermonk> https://github.com/isaacs/lockfile
11:54 < tim_smart> sabermonk: You can use the built in retries and retryWait options if you want.
11:55 < upb> heh, what i told him 30 mins ago
11:56 < sabermonk> i used them as well, but even if i use them, ideally, the currect process is supposed to wait and check again, and until then next hit upon the same function comes from another process
11:56 < sabermonk> so all is queued to wait.
11:57 < sabermonk> whan the lock is free, it shud continue with the primary waiting process
11:57 < sabermonk> but that is not happening
12:00 < tim_smart> bmatusiak: I would probably do something like https://gist.github.com/3104543
12:08 < dmilith> is it possible to set system name on ./configure time?
12:08 < dmilith> to not detect bsd as linux?
12:10 < dmilith> In file included from ../deps/uv/src/unix/eio/eio.c:41:
12:10 < dmilith> ../deps/uv/src/unix/eio/config_linux.h:4:10: fatal error: 'linux/version.h' file not found
12:10 < dmilith> #include <linux/version.h>
12:10 < dmilith>          ^
12:10 < dmilith> 1 error generated.
12:11 < kiur> any clue why we lost the multiple-argument functionality in process.nextTick() ?
12:12 < kiur> if thats a mistake then here is a patch: https://github.com/joyent/node/pull/3704
12:21 < level09> how does nodejs server performance compare to apache/nginx ?
12:21 < dmilith> level09: nginx is faster, but it's designed to be proxy/ static file serve
12:21 < deoxxa> level09: you can't compare it like that
12:21 < dmilith> yes, it's different thing
12:22 < deoxxa> level09: that's like comparing IIS to C# or something
12:22 < level09> I know, just thought about creating a web service in node
12:22 < dmilith> ;]
12:22 < deoxxa> they're just different things
12:22 < dmilith> level09: and I assumed exactly that ;]
12:22 < level09> deoxxa: but many website now run on node 
12:22 < dmilith> the only matching(comparable)
12:22 < level09> so its like they replaced the server 
12:22 < deoxxa> level09: i know - i personally run a few websites with node.js playing a part
12:22 < dmilith> with nginx as proxy server, and static files
12:23 < level09> so its stil better to put nginx in front of node ?
12:23 < level09> okay got it
12:23 < dmilith> safer, and faaster. yes
12:23 < deoxxa> again, it depends on what you're doing
12:23 < dmilith> nginx has OOTB features designed to be proxy server
12:24 < dmilith> round robin for example
12:24 < dmilith> which would need to be programmed in node process level
12:24 < level09> okay what about load balancing node, do you guys use nginx as well?  or something like HAProxy
12:24 < dmilith> don't reinvent the wheel. use nginx as a proxy
12:25 < deoxxa> dmilith: too bad if you want websockets, right?
12:25 < dmilith> level09: usually cluster/cluster2 + nginx is enough
12:25 < dmilith> deoxxa: why?
12:25 < dmilith> you just need separate port for that
12:25 < dmilith> this is missing feature - if you're talking about it
12:26 < level09> hmm haven't tried cluster yet will have a look 
12:26 < dmilith> node has some feature itself built in
12:26 < deoxxa> i'm just saying you shouldn't give such definite answers without explaining the "gotchas", dmilith
12:26 < dmilith> but i don't think it's desired to be main server.. maybe
12:26 < dmilith> I just care about secrurity, and I don't take node as "high security" thing yet
12:27 < level09> does cluster2 (in other words) utilize the processing power (in case of many cores exist) ?
12:27 < dmilith> look at ruby. It's > 12years old.. and it's one big flaw ;]
12:27 < dmilith> level09: yes
12:27 < level09> that's great
12:27 < dmilith> level09: it spawns numOfCoresOnMachine() forks by default
12:28 < dmilith> but it's very configurable
12:28 < level09> perfect, hope it will be easy to integrate with socket.io
12:28 < dmilith> it's simple
12:28 < dmilith> just works
12:28 < dmilith> look into their wiki
12:29 < dmilith> node-v0.8.2/deps/uv/src/unix/eio/config_linux.h
12:29 < dmilith> why it's config_linux not config_freebsd9 ? :o
12:29 < level09> hope it will support sticky sessions though
12:30 < dmilith> sticky?
12:32 < dmilith> express supports it IIRC
12:32 < level09> alright, thanks, time to do some tests on that :D
12:34 < dmilith> hf
12:36 < dmilith> ok something's really bad here
12:36 < dmilith> I checked out node master branch
12:36 < spionHL> heh, caolan's async.auto looks like a makefile
12:36 < dmilith> and moved to v0.8.2 branch
12:37 < dmilith> and there's 'freebsd9' in gyp's common.py
12:37 < dmilith> but in tarball there isn't?
12:39 < dob_> I want to implement an advanced generic table rendering. Currently I am using jade as template engine. I want features like paging, sorting and filtering.
12:39 < dob_> Is there already a kind of tablecontrol project out there?
12:55 < dmilith> ok. my bad  again http://u.verknowsys.com/eJS4
12:58 < CIA-93> libuv: Fedor Indutny v0.8 * rdc97d44 / (7 files in 3 dirs): unix: move uv_set_process_title() to proctitle.c - http://git.io/iZ9qxQ
13:07 < CIA-93> libuv: Ben Noordhuis v0.8 * ra87abc7 / src/unix/proctitle.c : unix: avoid buffer overflow in proctitle.c - http://git.io/RNQ36Q
13:16 < chuwiey> Hey all, I've got an application that i've already built using php... Now I want to incorporate some real time features - from searching around it seems node.js is my best option for websocket implementation. Can anyone point me to a reference for app architecture incorporating node.js alongside an existing php app layer... ?
13:20 < kiur> chuwiey, see www.socket.io
13:20 < kiur> can anyone comment on https://github.com/joyent/node/pull/3704 ?
13:22 < chuwiey> kiur: already seen it.. but i'll read it again if it holds some example architectures...
13:22 < chuwiey> thanks
13:25 < bradgignac> chuwiey: not sure how much you'll find at socket.io in terms of architecture
13:25 < bgkittrell> I'm trying to serving a video from node using util.pump.  It works fine in desktop safari, but not in mobile safari.  I know it's not the video itself, because it works if I serve it from apache.  iOS just drops the connection.  Any thoughts on how I might debug this?
13:25 < bradgignac> chuwiey: here's how it would typically work
13:25 < bgkittrell> after it starts pumping theres a data event on the read stream, then a drain, then another data, then nothing
13:26 < bradgignac> your app lives at www.myapp.com and you have a socket.io server running at www.myapp.com:SOME_OTHER_PORT
13:26 < bradgignac> whenever the PHP portion of your app has something to push to the browser, it sends a message to the socket.io server
13:27 < bradgignac> usually this would happen through a message queue, but it could be any sort of trigger you want
13:27 < bradgignac> the socket.io server would then push the message to the browser
13:27 < bradgignac> chuwiey: helpful?
13:28 < bradgignac> chuwiey: you might also look at HTML 5 server-sent events
13:29 < kiur> sry a newbie question (havent used git for a while): how to clone a specific branch from a github repository?
13:29 < bgkittrell> kiur: clone the repo, then 'git checkout mybranch'
13:30 < kiur> thanks
13:30 < chuwiey> bradgignac: yes, that was very helpful... is there a specific protocol for messages sent by php to socket.io server?
13:31 < chuwiey> i'm assu,ing that socket.io runs on node.js...
13:31 < `3rdEden> github.com/learnboost/socket.io-spec
13:31 < bradgignac> chuwiey: not really. we wrap our socket.io server in a node application. the node application listens for rabbitmq messages and then tells the socket.io server to push it to the browser.
13:32 < bradgignac> chuwiey: using that technique, you could use just about any protocol: redis, http, even writing a temp file to disk (i don't recommend that last one)
13:35 < chuwiey> bradgignac: last two questions (and thanks a lot)... 1) are messages distributed to specific channels or via events? (ie. a user is subscribed to a specific channel for updates, or to an event?) 2) rabbitmq - meaning I need to run the rabbitmq server?
13:36 < sgimeno> hi, is it possible to bind a socket to a local address / local path before connecting to a server? I'm trying to do this with a unix stream socket with no luck
13:36 < bradgignac> 2) yes, you'll need to run a rabbitmq server or some other method for telling the socket.io server to do things. there isn't necessarily a reason you couldn't tell the socket.io server to do things over websockets, but i've never tried.
13:37 < booyaa> lo chaps, idea why npm would be giving this error? https://gist.github.com/3104920
13:37 < booyaa> i've been unable to install any packages
13:37  * booyaa is using arch linux node/npm package for arm chipset
13:38 < chuwiey> bradgignac: great... and in regards to 1?
13:38 < bradgignac> 1) here's how we handle user subscriptions. upon login each user is given a unique identifier (similar to a session ID). when our main app wants to push a message to the user, we include the unique identifier in the rabbitmq message and the socket.io server knows to only send it to that user. you can also expand that approach to do more interesting things like...
13:39 < c3l> I want to run several node applications on port 80  (say example.com/foo and example.com/bar). what is the recommended way of doing this? I found node-http-proxy, it looks good. But I also see that people discourage others from running node as root.. but I want port 80, what to do?
13:39 < deoxxa> plenty of options, c3l
13:39 < bradgignac> we have an account, which has many users, who have many windows open at the same time. if the unique id is generated per browser window/tab, we can send messages to all users on an account, one specific user on an account, or even one window for one user on an account
13:40 < bradgignac> chuwiey: ^^
13:40 < deoxxa> you can throw nginx or another load balancer in front, or drop privileges after listening on port 80, or set up a firewall rule to redirect port 80 to a higher port internally
13:41 < chuwiey> bradgignac: so alongside my regular user, i would create these other "Accounts" and have them be different distribution lists... ?
13:41 < spionHL> does http.client automatically limit the number of requests per host (or host+port) ?
13:41 < spionHL> (the number of parallel requests that is)
13:42 < deoxxa> yes
13:42 < spionHL> can you get around that?
13:42 < elguapo99> what are the best learning solutions for node?  best hosting environment to experiment...  ?
13:42 < deoxxa> yes
13:43 < bradgignac> chuwiey: our accounts are an existing concept. that was just an example of how to expand the unique ID concept. if you only need to target single users, a single unique id should suffice
13:43 < c3l> deoxxa: Id like to limit the programs involved, looking for a rather simple solution. which is preferred of dropping privileges vs internal port redirection? also, I take it node-http-proxy is good?
13:43 < chuwiey> bradgignac: thanks for all the help! :)
13:43 < bradgignac> np
13:44 < deoxxa> c3l: dropping privileges is easy - http://nodejs.org/docs/latest/api/all.html#all_process_setuid_id
13:44 < deoxxa> c3l: i can't speak for what everyone else thinks, but that would be my approach
13:45 < c3l> deoxxa: cool, thanks :)
13:45 < spionHL> deoxxa, can't find it in the docs. Will I need to fork more processes? :)
13:46 < deoxxa> spionHL: http://nodejs.org/docs/latest/api/http.html#http_class_http_agent
13:48 < spionHL> deoxxa, ah, so specifying agent:false or setting agent.maxSockets - thanks! :)
13:48 < deoxxa> \o/
13:49 < dob_> did someone create nice, generic tables? I want to create dyanmic tables with sort, pager etc
13:49 < deoxxa> dob_: that's a very, very vague thing
13:50 < dob_> in php I created a controller class which rendered my table based on my data dynamically, formatted dates, added headers, added pagers, make them sortable, set max string length etc etc etc
13:51 < dob_> I hoped there is something like a jade or node module which does the same thing
13:51 < JasonJS> dob_: How large (rows) are the tables you are dealing with?
13:52 < dob_> 20000 entries and growing
13:53 < JasonJS> dob_: Gotcha - I was going to suggest cheaping out and going with a pure browser side solution but that just won't cut it for that volume :)
13:53 < dob_> and it should also work without enabled JS
13:55 < JasonJS> SubStack: Hey Sub - Are you available for a couple of dnode questions?
13:57 < Phoenixz> bnoordhuis: Hey, good morning.. I'm that phoenixz guy with the node crash, if you recall? Just to let you know that I nearly have a testcase ready, but once I have it ready, where can I send it?
13:57 < bnoordhuis> Phoenixz: hey. file a bug report at joyent/node
14:03 < Phoenixz> bnoordhuis: will do, thanks!
14:04 < Phoenixz> bnoordhuis: meanwhile, just to try something, I am going to change the uploader to first store all data in memory, then once finished, it will flush it all to disk at once.. See if that makes any difference (currently, I write each data block that comes in straight to disk)
14:04 < Phoenixz> bnoordhuis: one (probably silly) question.. What is the proper way to close a req. connection? I use req.end(), but that seems not to work very well..
14:05 < kiur> Phoenixz,  how isnt that working well?
14:05 < boutell> Whoa the channel topic is not snarky today! Am I in the right place???
14:07 < deoxxa> needs moar flap
14:08 < Phoenixz> kiur: well, I wrote a small test that will upload a file (from a php script, using curl) and the node script will receive the file, write it to disk, then close with req.end() and the curl instance just stays open until I kill the node server 
14:09 < deoxxa> erm
14:10 < deoxxa> res.end()
14:13 < Phoenixz> :) doh
14:13 < Phoenixz> *slap*
14:14 < Phoenixz> coffe... 
14:16 < Phoenixz> question, if I want to store raw data (say an image) in a variable, then write it to disk, what would be recommended? just a simple var data = ''; and on each req.on('data', reqdata) do data += reqdata; ? Or should I use buffers? I don't have file size available and from what I've seen, I need to specify array or size..
14:17 < boutell> Phoenixz: is this a file upload situation?
14:17 < Phoenixz> boutell: yes
14:19 < Phoenixz> I get an XHR file upload, I get lots of chuncks of files.. Right now I write each to disk as they arrive, but that gives me one horrible node crash.. so to a) make it a bit more efficient, I suppose, and b) hoping to avoid this node crash, I'd like to store data first in a buffer, then write it to disk in one write..
14:19 < boutell> Phoenixz: open to using Express?
14:19 < Phoenixz> boutell: I actually HAVE express though I was condering dropping it since I don't use anything express specific yet..
14:20 < Phoenixz> But if express can help me fix this, I'm all ear :)
14:20 < Phoenixz> well, eye, in this case
14:20 < boutell> the last answer here puts it well: if you use express.bodyParser(), you get everything in req.files. See: http://stackoverflow.com/questions/5149545/uploading-images-using-nodejs-express-and-mongo
14:21 < boutell> ... one of the last answers rather
14:21 < boutell> you don't have to hand-pump your uploads unless you have a compelling reason to
14:21 < Phoenixz> boutell: sweet :) But that will work for XHR uploads as well? (which this is)
14:22 < boutell> Phoenixz: I think so, I believe it's built on top of Formidable
14:25 < Phoenixz> another quick quiestion... These files that express write, will have unique filenames? If 2 persons upload the same file at the same time, etc.. and I'll get the original filename somewhere in req.body I suppose?
14:25 < boutell> in req.files 
14:26 < boutell> the temporary filename will not be what the user submitted (unless the authors of express are complete security dumbasses, which I strongly doubt)
14:26 < Phoenixz> boutell: Will give that a try, thanks a lot !
14:26 < boutell> but the original filename will be available
14:30 < arinel> hi guys! does anyone know how one would structure a node.js application if they had disparate modules (self-contained apps), which would all make use of the same node_modules ?
14:30 < timetunr> self-contained apps have different node_modules folders, always
14:31 < timetunr> that's the npm way and it helps to keep out of dependency hell
14:31 < boutell> arinel: 'require' will search for node_modules in parent folders actually.
14:31 < arinel> timetunr: so I'd have to install 'express' inside every module?
14:31 < arinel> ah
14:31 < boutell> no, you don't have to do that.
14:31 < timetunr> well you don't have to
14:31 < arinel> I have just read about that, but didn't make the connection :)
14:31 < timetunr> but that's the cleanest way to do it
14:31 < sgimeno> bnoordhuis: about issue 3705
14:31 < boutell> if npm doesn't see a node_modules folder in the current directory it'll look upstairs and install there, etc.
14:31 < arinel> hm, sounds like this would work.
14:31 < arinel> now, in terms of routing
14:31 < bnoordhuis> sgimeno: yes?
14:32 < timetunr> that's if they are essentially subapps
14:32 < ebright> Hi! I'm also having difficulty structuring my app.
14:32 < boutell> if you are just trying to organize your code and you are positive you're going to keep things on consistent versions of the code, it's fine to share modules.
14:32 < ebright> I like the look of this approach: https://github.com/visionmedia/express/blob/master/examples/route-separation/app.js
14:32 < sgimeno> something like $ socat /tmp/local_socket UNIX-CONNECT:/tmp/remote_socket
14:32 < timetunr> like I said...dependency hell awaits
14:32 < boutell> the "npm installs everything separately" thing is more useful for dependencies of modules you're publishing on npm, where you have no idea and don't care what versions the other guy installing your module has (:
14:32 < boutell> but for maintaining your own project and just having a sensible division of code into a few folders, it is not necessary
14:33 < timetunr> that's true
14:33 < arinel> I have a bit of a special case here. if two modules are unaware of each other, how would I resolve routes such as: /([A-Za-z0-9]+)  , where one module would do one thing, and the other something else? these modules could potentially run on separate machines.
14:33 < ebright> but I have my database defined in the main app.js (var db = require('nano')('localhost:5984/my_couch') ) and now I don't know how my routes files can access my db
14:33 < sgimeno> bnoordhuis: something like $ socat /tmp/local_socket UNIX-CONNECT:/tmp/remote_socket
14:34 < timetunr> but if you're worried about memory management then it doesn't make a difference since npm can tell that express 3.x in one node_modules folder == express 3.x in another node_modules folder if the apps are truly connected
14:34 < bnoordhuis> sgimeno: okay. what good does that do?
14:34 < arinel> should I just start each module with node on a different port?
14:34 < boutell> timetunr: define "truly connected?" I wasn't aware of this "figure out they are the same" feature...
14:34 < sgimeno> bnoordhuis: i use it in an application as a way to know who's connecting to me
14:34 < timetunr> truly connected means that the modules are not all self-contained
14:35 < timetunr> meaning: node app.js and all the modules are required from another module in the chain
14:35 < timetunr> they aren't being run independently basically
14:35 < arinel> anyone interested in my question? :)
14:35 < bnoordhuis> sgimeno: ah, i see
14:35 < boutell> arinel: sounds like a more fundamental problem with your routes to me. A route that matches "pretty much any string of stuff" with no prefix can't magically target two apps unless you have a way of making a distinction.
14:35 < timetunr> this way npm can resolve all the modules together and check which modules are essentially dupes
14:36 < boutell> is it that the distinction is only known once you look up that magic blob in a database somewhere?
14:36 < bnoordhuis> sgimeno: i guess we'd only add that if windows has a similar feature
14:36 < bnoordhuis> sgimeno: which i'm not sure it has
14:36 < bnoordhuis> piscisaureus_: ^
14:37 < sgimeno> bnoordhuis: ok, good to know, thanks! if not, could it be done as a separate module?
14:37 < arinel> boutell: the idea is to have allow 2 use-cases: 1) the administrator deploys one module on one public computer, and another module on a private computer, for security purposes. 2) a user installs both modules on the same computer (maybe a local VM)
14:37 < bnoordhuis> sgimeno: yes
14:38 < arinel> boutell: so when they're both on the same VM, I wonder how does one resolve the route issue. I can have a config file that enables/disables application modules
14:38 < boutell> arinel: you can 'require' modules of your own, pass an app object to them, let them add their own routes with app.get/app.post. They don't have to be separate apps in the "independently listening to port whatever" sense of the word.
14:38 < sgimeno> bnoordhuis: ok, thanks
14:39 < boutell> arinel: what do you actually want? Separate hostnames? Separate virtual subdirectories of one hostname, like foo.com/one and foo.com/two?
14:39 < arinel> boutell: both.
14:39 < arinel> boutell: or, either
14:39 < arinel> boutell: because one module would have the URL to the other module
14:41 < boutell> arinel: open-ended "I might do this or this or this" questions rarely have clean answers. But this is interesting: http://www.senchalabs.org/connect/middleware-vhost.html
14:41 < boutell> it looks like connect (which is part of express) can do virtual hosting 
14:41 < boutell> for subdomains
14:42 < arinel> boutell: ok, so that would mean that each module runs on its own port
14:42 < arinel> I guess that's the cleanest way to separate them
14:43 < arinel> while also being able to run them on the same machine
14:43 < Phoenixz> boutell: Not working... :( In any case, I do a few very specific things that makes the do-it-yourself approach a bit more attractive.. If I'd wanted to receive all data in a memory buffer, what would be recommendable? Just var data = ''; and on each req.on('data', reqdata) do data += reqdata; ? Or should I use buffers?
14:47 < darrenlooby> So, I'm using Node.js to connect to a Asterisk AMI socket. It keeps dropping, so I'd like to perform some sort of keep alive... any ideas, clues, tips etc?
14:47 < arinel> boutell: thanks for the help!
14:49 < ebright> I have a call app.get('/api/foos', foo.load). In my routes/foo.js file I exports load as exports.load = function(req, res){...}. As part of that function I want to access my database. But I assigned my database to var db in my app.js file..
14:50 < ebright> how do I structure my app so that my route files can access my database?
14:52 < ebright> my app.js already includes var foo = require('/routes/foo.js')
14:52 < ebright> I don't get how I can expose my db inside of foo.js :(
14:54 < strk> npm ls -g | grep zlib
14:54 < npmbro> strk: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20ls%20-g
14:54 < strk> └── zlib@1.0.5
14:55 < strk> Error: Cannot find module 'zlib' at Function._resolveFilename (module.js:317:11)
14:55 < strk> why ?
14:55 < strk> the offending line is var zlib = require('zlib');
14:56 < strk> node is v0.4.10
14:56 < Benvie> that was introduced in node 0.6
14:57 < darrenlooby> Anyone know any keep alive stuff for node js?
14:58 < JasonJS> darrenlooby: What os?
14:59 < darrenlooby> Ubuntu JasonJS 
14:59 < darrenlooby> Ubuntu 12.04 at the mo
15:00 < darrenlooby> To be clear, I'm wanting to keep a socket alive
15:00 < JasonJS> darrenlooby: Ah - never mind then :)
15:00 < darrenlooby> Not run Node as a service, which I'll do later
15:00 < darrenlooby> No probs :)
15:00 < JasonJS> darrenlooby: Are you using vanilla node sockets (net)?
15:01 < darrenlooby> I'm using a module for asterisk written by someone else...
15:01 < darrenlooby> I bevlieve the net module is being called though
15:02 < JasonJS> darrenlooby: Behind the scenes at some point, I'm sure. Many of the networking modules have some concept of reconnect/keep-alive. If the one you are looking at does not you may need to manually look for 'end' and 'error' events and kick off the reconnect manually.
15:03 < JasonJS> darrenlooby: Or whatever the module provides you to let you known that the connection has died
15:04 < darrenlooby>  JasonJS - yea, currently it just errors with Unhandled 'error' event
15:04 < JasonJS> darrenlooby: If it doesn't provide anything else you are probably stuck adding a listener for that event and then creating the connection again
15:06 < Deathspike> Blasphemy question; I was just watching a presentation on C#5 and ASP.NET MVC4 with all their async/await stuff that basically introduces evented i/o into that stack, and was wondering, would that actually have similar or better performance than Node?
15:08 < booyaa> Deathspike: i suspect performance/benchmarks won't be available for a while. it's fairly new stuff
15:09 < booyaa> i know $MSFT have been looking at this stuff for some time signalir and rx come to mind
15:09 < booyaa> although let me check my sources those might be independently written i.e. not by $MSFT
15:09 < booyaa> Deathspike: mvc4 is a fairly serious reboot of mvc again. for the good methinks
15:10 < Deathspike> They talked about SignalR as well in that presentation. I must say that it looked quite impressive, but they didn't talk about async database access for example, so I suspect that will be quite a bottleneck for that stack for a while. But serving files and simpler I/O (incl. scraping), I think it *might* get on-par. Was wondering about that.. :D
15:11 < Deathspike> MVC4 seemed like more stuff jammed into a system, not cleaning up existing stuff?
15:13 < booyaa> considering that microsoft have now written an async module for mssql it wouldn't be too difficult for them to back port to .net
15:13 < booyaa> really liked c# 4 when dynamic object started to appear
15:14 < Deathspike> And TPL. C#5 uses a lot of that. But I didn't know about async-stuff for mssql tho.
15:16 < booyaa> have you looked at webmatrix2 recently?
15:16 < Deathspike> No, I haven't.
15:16 < Deathspike> WHAT! Nodejs code completion in a MS product?!
15:17 < booyaa> hahaha
15:17 < booyaa> thought you'd like that
15:17 < booyaa> it'll even do intellisense for 3rd party modules
15:18 < Deathspike> What the hell, I tried getting intellisense into VS2010 (I have Ultimate@work) and that didn't fan out, but a free product has it? It's madness. :D
15:18 < booyaa> i think it may have knocked jetbrain's gui editor of the top spot
15:18 < booyaa> off the top spot
15:18 < Deathspike> Support for LESS, Jade.. really, wow.
15:19 < Deathspike> Kudos to MS?
15:19 < booyaa> totally
15:19 < booyaa> i know the guys here are seasoned vim-ers but this is a nice way to code
15:19 < booyaa> sadly local preview doesn't work on xp
15:20 < booyaa> but then again i think the guys hadn't planned on fools still running xp
15:20 < booyaa> easy fix though, just run node via command line
15:20 < Deathspike> Haha, the main problem I have with working w/ Node is the fact that IDE's are all so horrible. No code completion whatsoever, so whenever I need to learn I have to dive into documentation (that's often not very good). This is going to be a godsend *downloading*
15:20 < booyaa> well my job is done here
15:21 < Deathspike> booyaa: If I could give you kudos or likes, you'd have them all :P
15:21  * booyaa heads back to redmond
15:21 < booyaa> :P
15:21 < booyaa> just spread the word to our fellow cohorts interested in node
15:21 < Deathspike> Count on it. :)
15:22 < Deathspike> Even for PHP, what are they doing, knocking out all other IDEs :D
15:22 < booyaa> i definitely think it's a charm offensive to get people to use azure
15:23 < booyaa> nice to see microsoft getting it though, make really nice tool for devs and they will use your platform/moon/etc
15:23 < CIA-93> libuv: Ben Noordhuis v0.8 * ra9f6f06 / (src/unix/freebsd.c test/test-process-title.c): unix: fix format string vulnerability in freebsd.c - http://git.io/7MVsSw
15:24 < Deathspike> booyaa: Unfortunately Azure price is a bit steep, but otherwise I'd even consider using it. It looks good, and especially if they ship out good tooling for it, it ever becomes more popular. I believing that good tooling is the base of any good platform.
15:24 < booyaa> agreed on all counts
15:25 < booyaa> i know there's a trial, but people are looking at this and what is on offer from aws/nodejitsu/et al
15:25 < booyaa> i hope they've fixed their spin up latency, i heard it was 15mins af ew months back
15:26 < booyaa> this is a considerable improvement from 5 hours when they first started trialing
15:26 < Deathspike> Looking at the current presentations, it happens almost instantly (in the case of node, at least). There are vids at azures main page to introduce people to nodejs and azure.
15:41 <@isaacs> strk: Hey
15:41 <@isaacs> strk: you know, you can do `npm ls -g zlib` in the latest npm
15:42 <@isaacs> strk: and it'll show you all instances of packages named zlib, and the path to them
15:42 < Jakey> well what if i dont' have the latest npm
15:46 < strk> isaacs: thanks for the tip -- I was testing something on node-0.4 though, I dubt latest npm works there
16:06 < conanbatt> i gt this silly npm question. Im making a modification on a package, and i would like to re-package it and be able to install it on my server. 
16:06 < conanbatt> Is there a way to do that with npm?
16:06 < bwen> increment version, npm publish
16:06 < bwen> ?
16:07 < conanbatt> its really a personal modification of someone elses library, im not really updating it
16:07 < conanbatt> except i publish it as a different name altogether and only i use it..
16:07 < conanbatt> but that sounds silly :S
16:07 < bwen> then increment vresion then npm publish
16:07 < bwen> :P
16:08 < context> conanbatt: id modify in a seperate module
16:08 < conanbatt> hey guillermo :)
16:08 < context> extend / modify, or require, hijack what you need to after the fact if possible
16:08 < conanbatt> small world
16:09 < conanbatt> im not sure what you mean, are you saying that i shold use the published package, and make the modifications on file ?
16:11 <@isaacs> strk: no, it won't
16:11 <@isaacs> strk: the last one to work on 0.4 is 1.0.10something
16:11 <@isaacs> 1.0.103 maybe
16:13 < schutteh> hi, hoping someone can help me, i'm very new to node.js, and trying to use npm to install a module
16:14 < context> "npm install {module name}"
16:14 < schutteh> getting the following error for any npm commands i run: Error: npm doesn't work with node v0.8.2
16:14 < context> its relatively simple
16:14 < context> schutteh: upgrade npm
16:15 < context> you can try: npm -g update npm
16:15 < context> but that might not work either
16:15 < schutteh> yes, that's not working either
16:15 < schutteh> i used: "curl http://npmjs.org/install.sh | sh"
16:15 < schutteh> that did start the upgrade, but ends up failing with the same issue
16:48 < Fudge_> When you run node.js code, its compiled to machine code first, isn't it?
16:52 < smathy> Yes.
17:00 < necros> hi
17:01 < Fudge_> smathy: http://www.youtube.com/watch?v=1e1zzna-dNw
17:01 < necros> I'm looking for js coding standards
17:01 < Fudge_> This guy doesn't really make much sense...
17:01 < necros> is there any "The gide" out there?
17:01 < smathy> Fudge_, a lot of people don't make much sense.
17:02 < Fudge_> smathy: He says that /JavaScript/ is slow. That makes absolutoly no sense. Speed is dependant on the VM/compiler
17:02 < thealphanerd> necros: js the good parts
17:02 < smathy> necros, you mean for contributing to node?  Just take your cues from the other code.
17:03 < thealphanerd> http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742
17:03 < thealphanerd> bunch of good stuff here
17:03 < thealphanerd> http://www.crockford.com/javascript/
17:03 < thealphanerd> these video are awesome http://yuiblog.com/crockford/
17:03 < smathy> None of those are *The* Guide though.
17:03 < necros> thealphanerd: thanks a lot
17:03 < smathy> There is no such thing.
17:04 < thealphanerd> smathy: yes but you can avoid a ton of edge cases by using that instead of this
17:04 < thealphanerd> writing in closures
17:04 < thealphanerd> and can create more flexible modules
17:04 < thealphanerd> necros: also look us js lint
17:04 < thealphanerd> necros: http://www.jslint.com/lint.html
17:05 < thealphanerd> necros / smathy: http://fluidproject.org/blog/2008/07/21/about-this-and-that/
17:05 < necros> thealphanerd: awesome man!
17:05 < thealphanerd> this is just one way to approach js… but it is mind blowing if you can wrap your head around it
17:06 < thealphanerd> fluidproject makes a framework called infusion that wraps a bunch of this stuff together
17:08 < Deathspike> Would it generally be considered bad practive to use ONLY everyauth for i.e. twitter/facebook/google instead of local sign up (to avoid writing a bunch of login and reg stuff)
17:11 < yawnt> any reason why the same code would work in plain C++ and would throw a 'Segmentation Error' when bundled in a nodejs module?
17:15 < plato> deathspike, won't you still need to handle serialization/deserialization to your user db?
17:20 < Deathspike> plato: Sure, but captcha, e-mail validation, forgetting passwords etc is just a hassle.
17:28 < smathy> Deathspike, it's more a marketing decision, than a technical one.
17:29 < plato> you can also take a look at mozilla's browserid/persona
17:30 < smathy> Deathspike, basically you need to decide whether you're happy to do without any customers who don't have those other auth provider accounts -or- who don't understand delegated auth and get blocked.
17:38 < charuru> hey guys i want to run
17:38 < shavus> run
17:38 < charuru> untrusted code in nodejs
17:38 < charuru> it could be infinite loop
17:39 < charuru> how do I do it safely?
17:39 < charuru> does the vm module help with it?
17:41 < teadict> lawl, he wants to run
17:41 < teadict> or she
17:41 < charuru> he
17:41 < charuru> lol
17:41 < charuru> any help?
17:41 < riven> or it
17:45 <@maxogden> npm install jefe
17:45 < npmbro> maxogden: No results
17:45 <@maxogden> wat!
17:45 <@maxogden> npm search jefe
17:45 < npmbro> maxogden: Please see http://eirikb.github.com/nipster/#jefe
17:45 <@maxogden> charuru: https://github.com/fictorial/jefe
17:46 <@maxogden> weird that its not on npm
17:46 <@maxogden> (it also seems to be not maintained anymore)
17:46 < charuru> thanks maxogden 
17:46 <@maxogden> also google has a project called caja
17:57 < hellopat> hi @all.  Question regarding require paths: if I restructure my app and I move a file to a new directory on different level, is there any way to modify the require paths so I don't have to change the string?
17:58 <@maxogden> hellopat: have you considered using node_modules instead of relative requires?
18:00 < hellopat> maxogden: hmm.. I haven't, although I haven't developed my app with a 'modular' mindset
18:01 <@maxogden> hellopat: its not much more work than what you have now, you jsut have to make some package.json files and move your stuff into node_modules
18:01 <@maxogden> hellopat: then you can require things by name and they will work anywhere within your app
18:01 < qubit[01]> how do I tell npm not to unbild a library when it fails ? i need the debug log its erasing
18:02 < hellopat> maxogden:  Seems easy enough.  Thanks for the info!
18:03 <@maxogden> hellopat: lotsa docs on that stuff here http://nodejs.org/docs/latest/api/modules.html
18:04 < qubit[01]> also I have a larger problem of having to update my server with libraries so that I can build node modules ( like canvas and soap ) , how can I tell npm to statically build these libraries ?
18:05 < hellopat> maxogden: wonderful.  Thanks!
18:21 -!- Topic for #node.js: node.js - a place to discuss node.js amongst colleagues and peers
18:21 -!- Topic set by maxogden [~max@ve.5bpbxlsy.vesrv.com] [Fri Jul 13 04:44:05 2012]
18:30 < Jamoka> sudo gem install rubygems-update
18:41 < austinbv> I have been working on a lib that works fine in the browser but not in node as a module, do you need to, it seems like the npm module is passing the function as reference
18:42 < jkevinburton> Jade Users:::::  I have a config file, and one of my variables is in HTML.. ex: config.site.site_name_pretty	= "<strong><em>be</em></strong>strong<strong>buddy</strong>"; and in my template I have p Welcome to #{config.site_name_pretty} but it spits the html on the page (in it's literal sense) instead of formatting... something special I need to do?
18:43 < tjholowaychuk> jkevinburton !{} is the non-escaped variant
18:43 < jkevinburton> thanks tjholowaychuk
18:43 < jesusabdullah> BOOM goes the dynamite
18:43 < felix__> awesome
18:43 < strk> can you see any reason why an http request never signals 'response' or 'error' ?
18:43 < jkevinburton> I'm new to Jade... so far it rocks, and allot less coding
18:43 < strk> with node-0.8.0
18:44 < strk> ops, sorry, node-0.6.19 actually
18:45 < bradleymeck> strk, cause the other end just never sends anything back over the wire, it times out
18:47 < strk> it's an express instance
18:47 < strk> k, will move to debug that one
18:51 < austinbv> do you have to completly build a hash before you export it or can you export it then build it
18:52 < livinded> austinbv: you can export it first
18:53 < charuru> timers are blocked in node right?
18:53 < charuru> like if you have an infinite loop
18:53 < charuru> and you have a timer
18:53 < charuru> the timer wouldn't work
18:53 < charuru> because the loop is stil going?
18:56 < austinbv> livinded: why would a lib not work it repl but work in the debugger then repl or work in an app
19:00 < austinbv> node seems to pass a function around as reference is that common
19:00 < jesusabdullah> "common" ?
19:00 < jesusabdullah> austinbv: It's how javascript works. nothing particular to node about that.
19:03 < austinbv> jesusabdullah: well the browser seems to pass by value
19:03 < austinbv> is why I say node
19:03 < austinbv> or copy
19:03 <@maxogden> austinbv: http://nodejs.org/docs/latest/api/modules.html
19:03 < austinbv> I have read that maxogden 
19:04 < jesusabdullah> why the Hell would you pass a function by-fvalue?
19:04 < jesusabdullah> that doesn't sound all that useful (to me)
19:04 < austinbv> jesusabdullah: or copy
19:04 < austinbv> I want to duplicate the global.Date
19:05 < jesusabdullah> why?
19:05 < austinbv> so if date is stubbed or mocked I can still time out in a test lib
19:05 < jesusabdullah> who's stubbing out Date?
19:05 < jesusabdullah> that sounds like a terrible idea
19:05 < austinbv> sigh glad you can help
19:05 < jesusabdullah> hey, this is helpful!
19:05 < tjholowaychuk> austinbv just hold a reference to it in a function
19:06 < tjholowaychuk> var Date = global.Date
19:06 < tjholowaychuk> global.Date = mymockthing
19:06 < jesusabdullah> ^^ this will work
19:06 < tjholowaychuk> and put it back after
19:06 < jesusabdullah> it's not a copy though, it's reassigning to a new variable
19:06 < austinbv> tjholowaychuk: I do that but for some reason in REPL it does not copy
19:06 < jesusabdullah> that's cause the repl sucks
19:06 < austinbv> or reassign
19:07 < austinbv> works in app browser and debug console from repl
19:07 < jkevinburton> perhaps someone with more knowledge than me can help me out here... in my template, im loading /css/style.css but in my node app.js, I want /css/style.css to actually be served from /themes/beta/css/style.css  is there a express route regex to catch all css, js, and img files to load from a theme dir?
19:08 < jkevinburton> (without revealing the /themes/default to the user in the template)
19:08 < austinbv> tj check out https://github.com/austinbv/Timecop.js in repl it does not work but seems to work in everything else
19:08 < austinbv> install and uninstall work so that makes sense
19:08 < tjholowaychuk> im not sure of repl internals
19:09 < austinbv> but install then Timecop.NativeDate fails
19:09 < austinbv> it also freezes mocha
19:09 < tjholowaychuk> it might evaluate with the vm module and have its own globals
19:09 < CIA-93> node: isaacs reviewme * r9d43624 / (291 files in 77 dirs): npm: upgrade to 1.1.41 - http://git.io/mpGKBg
19:09 < tjholowaychuk> im not sure
19:09 < austinbv> :)
19:09 < CIA-93> node: isaacs reviewme * ref1b7dd / tools/installer.js : build: Move npm shebang logic into an npm script - http://git.io/J_I1ZA
19:09 < Deathspike> jkevinburton: '/css/([a-z]+)\.css', then serve the proper file?
19:09 < austinbv> should still be using the 'local' globals
19:09 < jkevinburton> Deathspike: I'll try that, ty
19:10 < austinbv> so it's similar to in mocha how you copy date... and it really doesn't
19:11 < tjholowaychuk> austinbv yeah in mocha's case that should definitely work
19:11 < austinbv> which is why Timecop.freeze() actually stops mochas execution
19:12 < Deathspike> jkevinburton: Uhm, you probably want '/css/:file([a-z]+)\.css' so you can get req.params.file ;)
19:13 < tjholowaychuk> i like this stack trace "Error: EISDIR, read"
19:13 < motiooon_> does anyone has experience with image macick and nodes ?
19:14 < motiooon_> image magic and nodejs
19:15 < drudge\work> tjholowaychuk: still using chocolat?
19:15 < tjholowaychuk> nope
19:15 < tjholowaychuk> haha
19:15 < drudge\work> :P
19:15 < tjholowaychuk> I still like it better in a lot of ways but I'm too slow with it
19:15 < drudge\work> wrote a quick script to add node completions to it
19:15 < drudge\work> from the api docs
19:15 < jkevinburton> Deathspike: lol. thanks, I was just going to ask how to get out of req.params
19:15 < austinbv> tjholowaychuk: check out these tests https://github.com/austinbv/Timecop.js/blob/remove-ruby-deps/test/TimecopSpec.js#L109 they stop mocha
19:15 < austinbv> gotta run :)
19:16 < CIA-93> node: isaacs v0.8 * ref1b7dd / tools/installer.js : build: Move npm shebang logic into an npm script - http://git.io/J_I1ZA
19:16 < CIA-93> node: isaacs v0.8 * r9d43624 / (291 files in 77 dirs): npm: upgrade to 1.1.41 - http://git.io/mpGKBg
19:26 < CIA-93> node: isaacs master * rdb59c84 / (282 files in 77 dirs): Merge remote-tracking branch 'ry/v0.8' (+31 more commits...) - http://git.io/IkNEog
19:29 < benatkin> I wish coffee-script would remove the feature that gets triggered by this, and make people use an external library for doing direct coffee-script requires. :/ https://github.com/isaacs/coffee-cleanse
19:30 < benatkin> another project w/ >50 watchers that coffee-cleanse is effective on http://news.ycombinator.com/item?id=4240336
19:37 < tjholowaychuk> benatkin guillermo made a suggestion that we should have beautifuljs.com to show people that js isn't all that ugly
19:37 < tjholowaychuk> just people are writing ugly js
19:39 < DTrejo> ++
19:41 < benatkin> tjholowaychuk: that's an awesome suggestion, beats uglycoffeescript.com
19:41 < benatkin> tjholowaychuk: optimism-based approach ftw
19:41 < tjholowaychuk> haha yeah, you could easily have wtfcs.com
19:41 < benatkin> tjholowaychuk: I don't discuss plans about unregistered domain names though. I snagged it, and I can transfer it to you at will!
19:44 < benatkin> tjholowaychuk: you can register the transfer with whoever you want, and I don't mind pitching in for a year of registration :)
19:44 < tjholowaychuk> hahaha sweet i'll let guillermo know
19:45 < benatkin> cool, ben@benatkin.com
19:48 < jonocosa> just testing 
19:53 < benatkin> I would like a page to point aspiring javascripters to that warns them about the pitfalls of cutting their teeth on coffeescript
19:54 < jroes> alright guys, can't figure out what I need to do to get the npm binary linked up properly with multiple versions of node via n
19:54 < tjholowaychuk> benatkin plus chances are if they write bad js.. their cs is going to be horrid, confusing cs is a lot worse than confusing js
19:54 < tjholowaychuk> implicit returns are terrible
19:54 < benatkin> or rather compile-to-js libraries
19:54 < rwaldron> +9001 to all of these ideas
19:55 < benatkin> it's sad how confusing it is to aspiring programmers. I talked to a friend last night who was wondering about LiveScript
19:55 < benatkin> not just the issue of compile-to-js, but what's important in programming in general
19:55 < benatkin> now if coffee-script is a rabbit hole, choosing a fork of coffee-script is much worse
19:56 < tjholowaychuk> i'd rather see people compile to js with paradigm shifts
19:56 < tjholowaychuk> than a bit of sugar
19:56 < tjholowaychuk> if you love haskell and want to use haskelljs or whatever, that sort of thing sure why not i guess
19:56 < jroes> liked icedcoffee or whatever?
19:56 < tjholowaychuk> certainly not for public code
19:57 < livinded> I'd rather see languages like coffeescript target an actual vm
19:57 < rwaldron> emscripten is nice for that
19:57 < livinded> compile to other language languages are just a dumb idea
19:57 < benatkin> tjholowaychuk: yeah me too. for people who really only feel ready to dev on a static server, I think the new RequireJS syntax is clever
19:57 < jroes> http://maxtaco.github.com/coffee-script/
19:57 < rwaldron> compile other real languages to JS
19:57 < livinded> rwaldron: I've seen emscripten, it's use case is different
19:58 < benatkin> tjholowaychuk: it does a toString(), finds require's, and adds them to the list of deps to load before actually calling the function it toString()'d on
19:58 < livinded> it's not designed to be used for writing actual code, it's used for getting real code to work in js
19:58 < tjholowaychuk> benatkin oh nice
19:58 < tjholowaychuk> maybe i'll use it now
19:58 < tjholowaychuk> haha
19:58 < tjholowaychuk> didn't know that
19:58 < tjholowaychuk> i was wondering why there's no commonjs -> amd type of tool
19:58 < tjholowaychuk> commonjs is obviously nicer to work with
19:59 < rwaldron> livinded ... I think you're picking nits. The point that I was making is: write some C, make bytecode, use emscripten to compile to js
19:59 < benatkin> yeah, it's a computationally cheap alternative to define(['one', 'two'], function(one, two)
19:59 < rwaldron> (C => substitutable for others)
19:59 < benatkin> only cheap because it runs once per module
19:59 < livinded> rwaldron: alright
19:59 < benatkin> but that's good enough for me!
20:00 < livinded> as a language I think coffeescript is fine, they should just target an actual vm or build machine code compiler
20:00 < benatkin> rwaldron: lol
20:00 < livinded> nobody sane wants to use a rube goldberg language
20:00 < rwaldron> livinded haha
20:01 < benatkin> js is assembly => you don't need a better debugging interface than a compiler toolchain, dammit!
20:01 < tnorris> anyone see a better way to write the following one liner: [].concat.apply([], [[1,2,3],[4,5,6]])
20:01 < tjholowaychuk> benatkin is that on requirejs site? I can't seem to find it
20:01 < jroes> tjholowaychuk: you still maintaining n?
20:01 < tjholowaychuk> jroes yeah, just the npm thing is broken still
20:01 < livinded> benatkin: js is assembly?
20:01 < jroes> cool, just checking. yeah, the npm thing is giving me a little trouble :)
20:02 < benatkin> tjholowaychuk: http://requirejs.org/docs/api.html#cjsmodule
20:02 < benatkin> livinded: I've heard people say that it should be treated like that
20:02 < Cat4D_> is there a memory and array management lib, possibly something with a machine sequencer so i can just rewrite everything in asm primitives and convert it over?
20:02 < benatkin> livinded: not my statement, a straw man :)
20:02 < Cat4D_> or any cross-browser JIT style JS compilers lib that properly selects data management array or io options based on browser?
20:03 < tjholowaychuk> jroes to be honest I was kinda curious how long it woudl take someone to patch but it's been months
20:03 < tjholowaychuk> so i should probably just do it
20:03 < livinded> benatkin: those people obviously never took a class in computer architecture or assembly
20:04 < tjholowaychuk> benatkin ohhh i see
20:04 < tjholowaychuk> so it's not really commonjs
20:04 < jroes> tjholowaychuk: ah, this isn't a complete fix? https://github.com/visionmedia/n/pull/69
20:04 < benatkin> tjholowaychuk: well exports and module are passed in there, so it sort of acts that way
20:05 < tjholowaychuk> jroes oh maybe, forgot about that one i'll try it
20:05 < benatkin> tjholowaychuk: someone built a tool that loads commonjs with requirejs. going to see if I can find it.
20:06 < tjholowaychuk> benatkin cool yeah that would be nice. I like the lack of build requirement for AMD but I really really really don't think that should be how people write public scripts
20:06 < tjholowaychuk> tough call, the build stuff can be annoying if you're trying something out
20:12 < benatkin> npmbro search asset
20:12 < npmbro> benatkin: Please see http://eirikb.github.com/nipster/#asset
20:16 < benatkin> tjholowaychuk: I can't remember the name of the module even after searching, maybe I was thinking of r.js
20:16 < tjholowaychuk> someone must have built that
20:17 < benatkin> tjholowaychuk: I've read about too many asset packagers to keep track of them. need to start keeping a journal when I research
20:18 < tjholowaychuk> it would be nice to have a package manager that lets you publish commonjs
20:18 < tjholowaychuk> but converts it to AMD for people as well
20:18 < tjholowaychuk> delegate that task to the server
20:18 < tbranyen> tjholowaychuk: yeah i guess its not too hard to do it either, airbnb does it
20:18 < tjholowaychuk> yeah we were going to but it's gotta be out there
20:18 < tbranyen> i'd like to make backbone boilerplate work that way
20:18 < tjholowaychuk> without regexp hacks
20:19 < benatkin> tbranyen: ooh sounds familiar, maybe that's where I read about that
20:19 < tbranyen> i think it was airbnb
20:19 < tbranyen> one of those startupies using backbone
20:19 < tbranyen> trying to find it
20:20 < TimeTurner> so what's the summary for the whole module story?
20:20 < TimeTurner> checked in a little late :/
20:20 < tbranyen> oh soundcloud benatkin 
20:20 < tbranyen> thats right
20:20 < benatkin> tbranyen: aha
20:20 < tbranyen> http://backstage.soundcloud.com/2012/06/building-the-next-soundcloud/#comment-557286395
20:21 < tjholowaychuk> nice
20:22 < tjholowaychuk> using amd for the css is kinda lame though
20:22 < tjholowaychuk> CSP will hate you for that
20:22 < tbranyen> i only use AMD for javascript modules
20:22 < tjholowaychuk> yeah
20:22 < tbranyen> i don't use it for templating, although SlexAxton has been trying to get me to switch
20:22 < tjholowaychuk> all the PMs miss out on the whole "component" part
20:22 < tbranyen> i might at some point
20:22 < tjholowaychuk> js is only part of that
20:23 < benatkin> if you need to fry up css, you should fry it up on the server rather than in the browser
20:23 < tjholowaychuk> we do really similar to them
20:23 < TimeTurner> what are your thoughts on require.js though?
20:24 < arinel> hey guys, how do I change the e-mail for my user on the npm registry ?
20:24 <@maxogden> arinel: new.npmjs.org
20:25 < benatkin> I prefer unindented auto-wrapping of commonjs with the simplified syntax
20:25 < benatkin> ...I think
20:25 < tjholowaychuk> benatkin same
20:25 <@maxogden> benatkin: got an example of that
20:25 <@maxogden> benatkin: +?
20:26 < benatkin> tjholowaychuk: it's easy to see people who use the Backbone.extend{foo:function() {})} people not minding an extra wrapping
20:26 < tjholowaychuk> i cant stand the wrappers that's why we have the build step
20:26 < tjholowaychuk> it's annoying but meh
20:26 < benatkin> tjholowaychuk: but people who use Foo.prototype.baz = function() {} find it a bit awk
20:27 < arinel> maxogden: thanks! however, I have just published a package and when I do "npm owner ls" it shows my old email. Is there a way to change that email ?
20:28 < benatkin> maxogden: nope, that's why I added "I think" - haven't really used requirejs yet
20:28 <@maxogden> arinel: two places: in your package.json and on new.npmjs.org in your profile. if those dont change it then its probably a caching thing
20:29 < tjholowaychuk> benatkin that's why I think we should be serving components from a PM
20:29 < tjholowaychuk> not just js
20:29 < tjholowaychuk> just arbitrary components
20:29 < tjholowaychuk> all that translation stuff can be on the server
20:29 < tjholowaychuk> and serving css via js loaders is really bad
20:29 < tjholowaychuk> for progressive rendering
20:29 < tjholowaychuk> but it's easy to bypass that if you have a concept of a component
20:30 < arinel> maxogden: thanks! i published with --force and that did the trick
20:31 < benatkin> tjholowaychuk: agree, a simple component API could help a lot
20:31 < tjholowaychuk> plus you should be able to cache them independently
20:31 <@maxogden> does someone have a github project for arguing about the ultimate component api
20:31 <@maxogden> cause that should exist
20:31 < benatkin> tjholowaychuk: I'm thinking just require a function to return js and css, when it gets plugged into the asset packager
20:32 < tnorris> '
20:32 < benatkin> tjholowaychuk: an object with one function for each, that is
20:32 < tbranyen> tjholowaychuk: i take it you've been reading up on web components?
20:32 < tjholowaychuk> the server, package manager and builders should all be seperated
20:32 < tjholowaychuk> not bound to npm etc
20:32 < tjholowaychuk> tbranyen no
20:33 < tjholowaychuk> drupal has been doing this for like 10 years
20:33 < tjholowaychuk> just not at the right scale
20:33 < benatkin> tjholowaychuk: yeah
20:33 < benatkin> tjholowaychuk: to separating all the concerns :)
20:33 < tbranyen> tjholowaychuk: that will never work in a web environment unfortunately
20:33 < tjholowaychuk> it does
20:33 < tjholowaychuk> we're doing it right now
20:33 < tbranyen> too much is left up to convention
20:34 < tbranyen> no you aren't
20:34 < tbranyen> you have a very specific filesystem
20:34 < tbranyen> designed a very specific way
20:34 < tbranyen> and you conform to it
20:34 < tbranyen> thats not the web
20:34 < tjholowaychuk> no
20:34 < tjholowaychuk> lol
20:34 < tjholowaychuk> consumption of the components is completely arbitrary
20:34 < tjholowaychuk> how you build / serve them doesn't matter
20:34 < tbranyen> i'd be very interested to know how you've designed something nobody else has been able to do
20:35 <@maxogden> its easy when you have a build step
20:35 < tjholowaychuk> yeah
20:35 < tjholowaychuk> the build step is definitely where things get opinionated
20:35 < tjholowaychuk> but there's no point forcing that on people anyway since they'll use ruby/blah/php/js
20:36 < benatkin> tjholowaychuk: it should def be similar to connect-style middleware
20:36 < tjholowaychuk> it doesn't need to be anything fancy
20:36 < tbranyen> you can't separate those tools
20:36 < tjholowaychuk> just a shift in terms of
20:36 < tjholowaychuk> components not js modules
20:37 < tjholowaychuk> tbranyen ? why not?
20:37 < tjholowaychuk> anything should be able to talk to an http server
20:37 < tbranyen> tjholowaychuk: i'm think about how yeoman is being designed
20:37 < tjholowaychuk> anything should be able to build the components
20:37 < tbranyen> which has package management
20:37 < tbranyen> but its still not even close to being ideal yet
20:37 < tjholowaychuk> so...
20:37 < tjholowaychuk> that doesn't mean anything
20:37 < tbranyen> its the only tool out there that does it that i can compare to?
20:38 < tbranyen> ender... lol
20:38 < tbranyen> what else is there?
20:38 <@maxogden> tbranyen: yeoman link?
20:38 < tbranyen> maxogden: its private atm
20:38 <@maxogden> ...
20:38 < tbranyen> you could probably ask addy or paul for access
20:38 <@maxogden> cool site addy
20:38 <@maxogden> nah its cool ill wait for them to deliver it from the google heavens
20:38 < tbranyen> i've been messing with it, its got a lot of work left to go
20:39 < tbranyen> but again, its like the only thing "available" i can compare to
20:39 < tbranyen> so unless someone can put up something else...
20:39 <@maxogden> its not available its a private google repo
20:39 < tjholowaychuk> the tools are irrelevant, rub should be able to talk to this server, js can talk to this server
20:39 < tbranyen> maxogdemahence the "i"
20:39 < tjholowaychuk> pull deps down, have another tool to build them however you like
20:39 < benatkin> yeoman isn't components, it's modules
20:40 < tjholowaychuk> nothing fancy at all, just simply that a component is not javascript, it's javascript/images/css/*
20:40 < tbranyen> welp this internet is awful
20:40 <@maxogden> node modules are just folders with a json file describing contents
20:40 < tjholowaychuk> haha yeah exactly it's really arbitrary
20:41 < tbranyen> tjholowaychuk: yeah we're talking bout mucho different things 
20:41 < tbranyen> re: package management
20:41 < tjholowaychuk> the PM doesnt matter
20:41 < tjholowaychuk> at all
20:41 < tjholowaychuk> that's easy
20:41 < tjholowaychuk> it's all easy
20:42 < tjholowaychuk> just not done
20:42 < tbranyen> well it does if one only accepts JS and the other does not
20:42 < tbranyen> like when you have a component that depends on a specific version of jquery
20:42 < tbranyen> and another component that depends on a different
20:42 < tbranyen> and both components are on the page
20:42 < tbranyen> you srsly gonna load both?
20:42 < tjholowaychuk> that's all just stupid details
20:42 < tjholowaychuk> the package manager does not matter at all
20:42 < tbranyen> isn't that the package managers job?
20:42 < tbranyen> to enforce versions
20:42 < tjholowaychuk> grab components from a server, do things with them
20:42 < tjholowaychuk> what's hard about that
20:43 < tbranyen> didn't i just give you a pretty basic problem with that solution?
20:43 < tjholowaychuk> no
20:43 <@maxogden> satisfying people who read steve souders books is hard about that
20:43 < tbranyen> are your components 100% generic or something?
20:43 < tjholowaychuk> our components are mixes of server-side stuff assets, images, css etc
20:43 < tjholowaychuk> server-side stuff will never be in a public repo obviously
20:44 < tjholowaychuk> but the rest is simple
20:44 < tjholowaychuk> we use npm right now but that part doesnt matter
20:44 < tjholowaychuk> we could use something else
20:44 < tbranyen> tjholowaychuk: may i see your implementation some time?
20:44 < tbranyen> pleaseeeee
20:44 < tjholowaychuk> i've been working on a blog post it's only 1/2 finished though
20:45 <@maxogden> tjholowaychuk: is it similar to uikit where theres a build step that puts templates into closures
20:45 < tbranyen> cool, i'll look forward to that
20:45 < tjholowaychuk> maxogden more or less yeah, it's really nothing other than saying instead of this module being javascript
20:45 < tjholowaychuk> this module is everything it needs
20:46 < tjholowaychuk> but it gives you that uikit-like workflow
20:46 < tjholowaychuk> we've been using it for a few months now
20:46 < tjholowaychuk> it's a really nice way to work
20:46 < tjholowaychuk> vs ./{views,public/stylesheets,public/javascripts} etc
20:46 < benatkin> maxogden: I like your idea of having a repo, could just be for documenting what components should be, could have a reference implementation if a spec gets figured out
20:47 < tjholowaychuk> https://github.com/component/dialog
20:47 <@maxogden> the main thing that cooks my noodle about client side module patterns today is the global namespace closure modifying bullpocky
20:47 < tjholowaychuk> simple example using gross package.json augmentation
20:48 <@maxogden> tjholowaychuk: that style of augmentation is endorsed by isaacs actually
20:49 < tjholowaychuk> bootstrap is a great example, each component much like uikit would just have its own assets
20:50 < tjholowaychuk> ideally with only structural css
20:50 < tjholowaychuk> then if you want the bootstrap "theme"
20:50 < tjholowaychuk> add it as a dep
20:50 < tjholowaychuk> a component with only stylesheets
20:51 < tbranyen> global namespace closure wat?
20:51 <@maxogden> tbranyen: every jquery module ever for instance
20:51 <@maxogden> tbranyen: where module authors decide what the export namespace is and extend globals on load
20:51 < tbranyen> oh you mean an object
20:51 < tbranyen> not a closure
20:52 < tbranyen> that was hecka confusing
20:52 <@maxogden> tbranyen: yea but i was referring to the "pattern name" i thought 
20:52 < tbranyen> yeah i hate that too
20:52 <@maxogden> whatevs
20:52 < tbranyen> i used to have a window.app
20:52 < tbranyen> and attach everything to that
20:53 < tjholowaychuk> that's one really shitty thing right now since the defacto way to kinda share your js right now
20:53 < tjholowaychuk> is to handle commonjs / amd / nothing
20:53 < tjholowaychuk> manually
20:53 < tbranyen> umd yea
20:53 <@maxogden> yea frealz
20:53 < tjholowaychuk> it would be nice if the server could just transform shit for you
20:53 < tjholowaychuk> and give you what you want
20:53 < benatkin> it's an awkward situation
20:54 < tbranyen> then you depend on a server which breaks phonegap/air/etc environments
20:54 < tjholowaychuk> yeah it's like hmm i want anyone to be able to use this, but i really need an event emitter
20:54 < tbranyen> its not a solution by any stretch of the imagination
20:54 < tjholowaychuk> and then shit goes to hell
20:54 < tbranyen> and then you have a server dependency for something that is totally irrelevant from the server :-/
20:54 < tjholowaychuk> and you have 15 event emitters
20:55 < benatkin> I just want a link I can add to a readme, where a web app can serve up an AMD wrapped module or a module that attaches itself to the global namespace
20:56 < tbranyen> benatkin: automatic amd wrapping of libs sucks sometimes
20:56 < tbranyen> especially with optional dependencies
20:56 < tjholowaychuk> yeah that would make a nice little web service
20:56 < tbranyen> wanna use backbone with lodash and zepto... sorry we use jquery and underscore in our generated version
20:56 < tjholowaychuk> public js should ditch deps like jquery etc all together
20:56 < benatkin> tbranyen: hmm, good point. but this would just be a replacement for the cases where the module author successfully accomodates everyone by adding extra code
20:56 < tjholowaychuk> use just what you need
20:56 < tjholowaychuk> not just supporting things with $(str).find() etc
20:57 < tjholowaychuk> easier said than done but that would be ideal
20:57 < tjholowaychuk> even dumb stuff like https://github.com/component/domify
20:57 < tjholowaychuk> that i yanked from jquery
20:57 < tjholowaychuk> when you really only need a $() for that
20:59 <@maxogden> tjholowaychuk: side note you can use document.createRange() and createContextualFragment() for that
20:59 < Fudge_> lmfao
20:59 < Fudge_> http://screencast.com/t/ibF2Q9T3
21:00 < tjholowaychuk> maxogden there are lots of ways to do it but x-browser?
21:01 <@maxogden> tjholowaychuk: touche
21:04 <@maxogden> tjholowaychuk: how do i install the component cli utility
21:05 <@maxogden> e.g. https://github.com/component/dialog/blob/master/Makefile#L3
21:05 < tjholowaychuk> it's private right now, it's not user-friendly enough
21:05 <@maxogden> :(
21:06 < tjholowaychuk> another nice feature for the "component server" might be to allow people to just write vanilla CSS no prefixes or crazy -webkit-keyframes etc and allow the package manager to request a transformed variant
21:06 < tjholowaychuk> with whatever browser support you need
21:09 < benatkin> tjholowaychuk: I like that. I also like the idea of a CSS parser that punts on stuff it doesn't understand and puts the ball back in the users' court
21:09 < tjholowaychuk> benatkin browsers support messed up css though
21:09 < tjholowaychuk> they just ignore it
21:09 < tjholowaychuk> in most cases at least
21:09 < tjholowaychuk> but from a producer/consumer point of a view
21:09 < tjholowaychuk> i think it would maybe work
21:10 < benatkin> tjholowaychuk: I'd rather a not-quite-complete css parser tell the user it didn't understand something than just try to work with it
21:10 < CIA-93> node: George Shank v0.8 * r8721667 / (doc/index.html doc/images/forkme.png): doc: update 'Fork me at Github' ribbon - http://git.io/3txOsA
21:10 < booyaa> awesome name
21:11 < tjholowaychuk> people who want less/stylus/sass etc could still use them in their private components like we are now but ideally just normal css that doesn't have all these vendor concepts
21:13 < chapel> tjholowaychuk: its sad there isn't a proper bootstrap stylus/jade port
21:13 < benatkin> tjholowaychuk: yeah I believe that CSS has conceptual integrity
21:13 < tjholowaychuk> chapel shouldn't need one!
21:13 < benatkin> tjholowaychuk: a build tool could automatically scope stuff and vendor prefix stuff
21:13 < tjholowaychuk> benatkin that gets sketchy
21:13 < tjholowaychuk> if it was optional
21:13 < tjholowaychuk> then definitely
21:13 < chapel> tjholowaychuk: well shouldn't, but a proper stylus based one would be nice
21:14 < benatkin> tjholowaychuk: yeah should be optional...point is that css is a pretty simple language, and it isn't broken, as I often hear from the Sass community
21:14 <@maxogden> https://github.com/substack/css-prefix ftw
21:14 < tjholowaychuk> benatkin yeah if you take a way the 4 or 5 prefixes
21:14 < tjholowaychuk> it's fine
21:14 < benatkin> maxogden: +1
21:15 < AlbireoX> I'm posting here because nobody is responding in #mongodb.  is it faster to get documents by their ObjectID or could I use my own unique string and have it be the same speed?
21:15 <@maxogden> https://github.com/substack/yarnify has some cool stuff in it too
21:15 < hunterloftis> Is there a way to spawn a process in node, but exit the node process? Or at least to transfer total control of STDIN/OUT to the child easily? I guess I can pipe stuff all over but I'd basically just like to run ssh.
21:15 < chapel> AlbireoX: it only matters if there is an index
21:15 < DTrejo> dtrejo++
21:15 <@maxogden> DTrejo--
21:15 < booyaa> heh lame
21:16 < TimeTurner_> dude, you repped yourself
21:16 < chapel> AlbireoX: objectids are unique per collection, so they index better
21:16 < chapel> AlbireoX: versus a string you setup, though, if the string is unique, then it will be as fast
21:16 < AlbireoX> Ok, thanks chapel
21:16 < booyaa> anyone seen this before? (node installed via arch linux package on a raspberry pi) tried installing some modules and getting big fail: https://gist.github.com/3104920
21:17 < TimeTurner_> Objectids aren't unique per database?
21:17 < chapel> TimeTurner_: well, you query per collection
21:17 < jamescarr> maxogden, thanks for pointing out https://github.com/substack/yarnify
21:17 < jamescarr> looks interesting
21:17 < TimeTurner_> Right. Just wanted to make sure :)
21:17 < chapel> TimeTurner_: Im sure more than not, they are unique per db
21:17 < DTrejo> i wish kohai was back in this channel
21:17 < DTrejo> I could !tweet at ppl
21:17 < DTrejo> and it was good
21:18 < hunterloftis> isaacs: I posted some more investigation at https://github.com/isaacs/npm/issues/2597 and would love to try any suggestions you have for working around the environment variable issue
21:18 < jamescarr> bleh, I need to get around to writing an example app that showcases http://jamescarr.github.com/mongoosastic/
21:18 <@maxogden> npm search request
21:18 < npmbro> maxogden: Please see http://eirikb.github.com/nipster/#request
21:18 < jaha> If im looking to distribute multiple JS based apps(modules) through a node locally served "mother" app, how does using npm sound to manage the download and installation of these client-side apps? Any other suggestions? Im thinking it would work like this: msg sent to mother app to load app1, mother checks to see if it has it, it doesnt, so it downloads the package via npm(git) and once ready, loads the app
21:18 < chapel> jamescarr: my boss likes mongoosastic
21:18 < DTrejo> jaha: sounds good to me
21:18 < chapel> jamescarr: only snag is he had issues with your existing doc index
21:19 < jamescarr> chapel, oh?
21:19 < chapel> jamescarr: he had to fork and change it
21:19 < jamescarr> ah, where is his fork? I'd be more than happy to accept pull requests :)
21:20 < chapel> https://github.com/geeklist/mongoosastic/commits/geeklist
21:20 <@isaacs> hunterloftis: remote: GIT_DIR=.
21:20 <@isaacs> hunterloftis: unset that, and it'll work.  i'll make npm do this explicitly as well.
21:21 <@isaacs> hunterloftis: GIT_DIR= npm install
21:21 < jamescarr> chapel, nice... I'll be more than happy to take a pull request for it
21:21 < chapel> kk, Ill let him know :)
21:21 < hunterloftis> isaacs: so explictly set GIT_DIR= npm install in the post-receive hook? thanks, I'll give it a shot!
21:21 <@isaacs> hunterloftis: yeah, that should do it
21:22 < hunterloftis> (npm install as a DIR seems weird)
21:22 < jaha> DTrejo: cool, any suggestions on handling the serving of the package once downloaded, for example it know i can programmatically use npm to manage the package but im not sure about how to have it served to the client
21:22 < jamescarr> so are you guys using mongoosastic at geeklist?
21:22 < chapel> jamescarr: working on it, still have pieces to convert
21:22 < chapel> we are currently using riak for search, but going to switch
21:22 < chapel> es is really nice :)
21:23 <@isaacs> hunterloftis: no, don't set npm install as the dir.
21:23 <@isaacs> hunterloftis: change the npm install line to be this, exactly:  "GIT_DIR= npm install"
21:23 <@isaacs> hunterloftis: ie, set the GIT_DIR to "" for the purpose of the npm install command
21:23 < benatkin> tjholowaychuk: I think the retina image problem might be a good use case to make sure a component system isn't *too* simple
21:24 < hunterloftis> isaacs: aah, hah. thanks
21:24 < hunterloftis> isaacs: overlooked the space
21:25 < benatkin> tjholowaychuk: to me an automatically generated manifest of available 2x images would help make it be efficient
21:27 < hunterloftis> isaacs: same story :/ I wonder if setting GIT_WORK_TREE is breaking it? (setting that to checkout to the deployment dir)
21:28 <@isaacs> hunterloftis: well, in this case, it's GIT_DIr
21:28 <@isaacs> but why not unset them both?  GIT_DIR= GIT_WORK_TREE= npm install
21:31 < DTrejo> jaha: what do you mean by serve it to someone? you could do a require to get access to the module, just know that require is sync & will maybe slow things down
21:35 < tnorris> any recommendations on a speed test/benchmark library?
21:37 < benatkin> tnorris: seems this might be a case where an obvious name happens to be attached to one of the best libraries https://github.com/bestiejs/benchmark.js
21:38 < jamescarr> chapel, I've actually been curious how Riak's full text searching capabilities are
21:38 < jamescarr> I haven't had a chance to give it a try
21:38 < tnorris> benatkin: ah, saw that one on search.npm, but didn't think anything of it because it says it hadn't been updated in 222 days.
21:38 < tnorris> thanks for the ref
21:39 < DTrejo> tnorris:  i recommend you use nipster:
21:39 < benatkin> tnorris: I want a node benchmark lib too
21:39 < DTrejo> npm search benchmark
21:39 < npmbro> DTrejo: Please see http://eirikb.github.com/nipster/#benchmark
21:39 < benatkin> npm bro benchmark
21:39 < npmbro> benatkin: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20bro%20benchmark
21:40 < chapel> jamescarr: sadly for us, its not what we need
21:40 < DTrejo> if you do npm docs benchmark then it will work as expected
21:40 < matjas> tnorris: it’s under active development, but we don’t really version bump regularly
21:40 < benatkin> DTrejo: beat me to it, and got it right :)
21:40 < matjas> tnorris: fwiw, it’s what we use on jsperf.com
21:40 < chapel> it doesn't have full solr features, and in our case we have nearly unfixible corrupted data :(
21:40 < DTrejo> i have a small advantage ;)
21:40 < chapel> at one point our riak server couldn't stay up more than a day before crashing constantly
21:40 < benatkin> knew I'd heard of a node.js benchmark tool before https://github.com/substack/node-ben
21:41 < DTrejo> chapel: do you pay for riak support?
21:41 < chapel> DTrejo: no
21:41 < tjholowaychuk> tnorris: some more https://github.com/logicalparadox/matcha https://github.com/visionmedia/vbench
21:42 < jamescarr> chapel, yeah, I kept thinking some of the ES features come in handy 
21:42 < tnorris> DTrejo: nice tool. that should make searching easier.
21:42 < DTrejo> :)
21:42 < chapel> DTrejo: I asked on the mailing list, and they knew about the issue, but didn't really have a solution
21:42 < jamescarr> I've actually been wondering how to benchmark commandline commands
21:42 < DTrejo> yea, riak is young
21:42 < chapel> DTrejo: except for manually editing the corrupted data with a hex editor
21:42 < tnorris> matjas: ok, thanks info
21:43 < DTrejo> jamescarr: I recommend "time node myprogram.js" for simple stuff
21:43 < jamescarr> chapel, yikes... I haven't had the experience of having that happen yet
21:44 < jamescarr> DTrejo, yeah... plan on doing benchmarks of Webdriver vs. PhantomJS
21:44 < chapel> jamescarr: very weird edge case, we got into the state due to a poorly configured server, but now we are stuck with it :(
21:44 < DTrejo> sounds fun
21:44 < chapel> jamescarr: search still works luckily, but just a constant issue
21:44 < DTrejo> (the benchmarking)
21:44 < chapel> DTrejo: :)
21:45 < tnorris> matjas: would you say that HEAD is pretty much always stable?
21:45 < tnorris> tjholowaychuk: great refs. thanks. I like the output on those.
21:47 < hunterloftis> isaacs: definitely did something, but we may have to give it a real dir: "remote: npm ERR! git checkout master fatal: Not a git repository: ''"
21:54 <@isaacs> hunterloftis: heh.
21:54 <@isaacs> hunterloftis: then yeah, unset
21:55 <@isaacs> hunterloftis: unset GIT_DIR; unset GIT_WORK_TREE; npm install
21:58 < hunterloftis> isaacs: cool thanks for the help by the way
21:58 < hunterloftis> isaacs: giving that a shot
22:00 < jamescarr> how do you update text in place in the console?  
22:00 < jamescarr> I've done it before, but the project I did it in eludes me
22:03 < chapel> jamescarr: charm
22:03 < chapel> npm charm
22:03 < npmbro> chapel: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20charm
22:03 < chapel> npm install charm
22:03 < npmbro> chapel: Please see http://github.com/substack/node-charm#readme
22:04 < jamescarr> nice
22:06 < DTrejo> ryah: hmm azealia banks + shystie. https://soundcloud.com/azealia-banks/neptune-ft-shystie
22:07 <@isaacs> hunterloftis: just pushed a fix for this to the latest npm HEAD
22:07 < hunterloftis> isaacs: awesome thanks, just posted a fix on the issue (your unset suggestion works, thank you)
22:08 < hunterloftis> isaacs: some of our devs were trying node 0.8, and installing with n, then getting npm errors. Do you have a 'best practices' way of toggling between 0.6 and 0.8? (eg, perhaps we should not be using n)
22:10 <@isaacs> hunterloftis: i use nave.
22:10 < hunterloftis> isaacs: cool thanks, I'll tell our guys to try that instead.
22:10 < mmalecki> isaacs: FOR SOME REASON YOU DO
22:11 < mmalecki> I use give
22:11 < mmalecki> its quite awesome
22:11 < jamescarr> I use... nvm :-P
22:11 < yawnt> ^ me too
22:11 <@isaacs> mmalecki: i use nave because i prefer to install from releases.  if i want to install from git, i can already do that, from git
22:11 <@isaacs> if i'm switching versions, i want to be closer to what an actual user will see who just downloads the release and installs it
22:11 < mmalecki> isaacs: give kinda automates that tho. I'm happy that you did look at it :)
22:12 <@isaacs> mmalecki: yeah, i did
22:12 <@isaacs> and i obviously install from git most of the time :)
22:12 < mmalecki> yeah, you're involved with node development or something, arent you?
22:12 <@isaacs> mmalecki: if give checked out, then did a `make node-v....tar.gz` and then unpacked that tarball, and then built it, it'd be better.
22:12 < chapel> who is this isaacs fellow?
22:12 <@isaacs> but it'd also be awful.
22:13 < mmalecki> isaacs: give performs a quasi-checkout
22:13 < mmalecki> isaacs: except its faster than a checkout
22:14 < mmalecki> and it involves tarballs, yeah
22:15 < mmalecki> oh wow, im so drunk i cant watch .gifs anymore
22:15 < chapel> mmalecki: hai
22:15 <@maxogden> unpossible
22:15 < smathy> Pornitis.
22:16 < mmalecki> maxogden: I THINK IT'S 'IM'
22:19 < benatkin> I looked and saw that the coffeescript docs don't encourage people to do what coffee-cleanse stops, the coffee-script code just provides a means to do so. suggested adding a warning though https://github.com/jashkenas/coffee-script/issues/2441
22:21 < nlf> hmm.. anyone know of a way i can get access to the response headers *before* piping to a destination with request? (ping mikeal)
22:22 < mmalecki> nlf: use node core?
22:23 < nlf> yeah, that's what i was hoping to avoid.. he's got a bunch of stuff i'd rather not reimplement if i don't have to
22:25 < benatkin> nlf: maybe save the data to a buffer with on('data', ...), and then in on('header', ...) write before piping, and remove the on('data', ...) handler
22:25 <@maxogden> nlf: headers are on the request object right?
22:25 <@maxogden> nlf: oh sorry response headers
22:25 < nlf> benatkin: does it fire a header event? i haven't dug far enough into his code to find out
22:26 < benatkin> nlf: it can, in general there's a way to access the underlying node.js http lib with request
22:28 < nlf> really.. that, i did not know
22:28 < benatkin> nlf: doh, could be wrong, looking at the source now
22:31 <@maxogden> nlf: try piping your request to a bufferedstream and then making your response request and waiting until .on('response') to pipe the bufferedstream to the response request stream
22:31 <@maxogden> similar to https://gist.github.com/1748217
22:32 < nlf> that makes sense, i'll give that a shot
22:32 < benatkin> I am wrong. Emits several of the other events.
22:32 < nlf> thanks maxogden 
22:33 <@maxogden> https://github.com/dominictarr/pause-stream should work too
22:39 < Swaagie> getting `xhr-polling closed due to exceeded duration` constantly on the native browser in android with socket.io, inspection of traffic with wireshark shows keep connection alive for the header, android v: 2.3.7
22:41 < nlf> maxogden: buffered stream worked great, thanks. i didn't even think about it
22:47 < ccowan> OT: Have you watched "The Machine that Changed the World"? It's so fun to watch computer history from 1992
22:47 < ccowan> They are going nuts over modems 
22:55 < ccowan> I love it!
23:03 < pooya> Hi
23:03 < sven_oostenbrink> I need a VERY simple XHR fileupload javascript library.. Basically I need to have a class with a method that, once called, shows the file requester in the browser, user selects the file, then I need events... "submit" event fires when the upload starts, "cancel" event fires either if the user canceled the file requester, OR if a "cancel" method has been called.. A "progress" like event for giving me a % of total uploaded.. And a "finish" for when 
23:03 < sven_oostenbrink> the file finished.. Basically in other methods, I'\d need the "cancel" method, thats all
23:03 < sven_oostenbrink> Who could recommend a library that does this and that does NOT have an entire framework entangled with HTML elements etc  that limits me to their design?
23:04 < sven_oostenbrink> Ah, also, if it has some methods and events for drag drop, that would be great too :)
23:04 < pooya> can someone tell me, what is the default context of a nodejs script? 
23:04 < pooya> why do i get different outputs from this in node.js shell (REPL) vs when i save it in a script: var f=function() {}; console.log(this.f);
23:05 < jesusabdullah> pooya: are you suggesting that "var f" will attach to the global namespace? Or a "this" in general?
23:05 < jesusabdullah> pooya: Cause f will only attach to the global namespace if you drop "var"
23:08 < pooya> @jesusabdullah if i try that in node shell "var f" will attach it to global namespace, but the very same code in a .js file will not do the same 
23:09 < pooya> i don't want to drop var and i don't want to attach to global scope but i assumed it should be stored in "this" while it is not
23:15  * monokrome is amazed that the framework he wrote over a year ago for node v0.2.2 still works in v0.8.1
23:16 < jesusabdullah> monokrome: niiiice
23:16 < jesusabdullah> pooya: bad assumption. Don't use globals, don't expect "this" to resolve to global.
23:17 < jesusabdullah> pooya: As it happens, the repl runs commands against a vm context
23:17 < jesusabdullah> I believe
23:18 < jesusabdullah> anyways, there are a number of very subtle ways in which the repl differs from the file's "environment"
23:24 < pooya> jesusabdullah: i see. so any suggestions? let me tell you what i want to do
23:24 < pooya> want to start a REPL somewhere mid my code as a debug console
23:25 < pooya> and I want access to all variables and globals and essentially exact same thing up to that point
23:25 < pooya> without going back and changing "var"s
23:27 < pooya> is that even possible?
23:28 < monokrome> jesusabdullah: Moreso surprising! I haven't touched it once in the last year
23:28 < monokrome> and that was when I was using v0.2.2
23:32 < sven_oostenbrink> I am looking for an upload class (for browsers) that can do XHR uploads, that only has methods to open the file requester, and cancel uploads, that has events for start, end, cancel, and progress of the file upload and that has some extra methods / events for drag-drop file upload.. NO HTML interface whatsoever, I can do that myself around it very simple.. Anybody who could recommend me something?
23:33 < sven_oostenbrink> I know its the node.js channel, but since its JS anyway, I hope somebody might know something
23:33 < tjholowaychuk> sven_oostenbrink do you care about old browsers?
23:33 < livinded> sven_oostenbrink: I have some code actually
23:34 < livinded> It still needs some work but you're more than welcome to use it in it's current state
23:35 < livinded> I need to reqrite the ajax stuff to make it submit multipart for proper file uploading rather than just a string of base64 encoded data and I want to rip out the jQuery ajax function but it does work
23:36 < livinded> sven_oostenbrink: https://gist.github.com/3108236
23:36 < monokrome> livinded: Have you tried ##javascript ?
23:37 < livinded> monokrome: I'm not looking for help...
23:37 < monokrome> sorry, I meant sven_oostenbrink 
23:37 < monokrome> :)
23:37 < livinded> did have code him though
23:37 < sven_oostenbrink> tjholowaychuk: IE7+, chrome and FF just max 1 year old I suppose :)
23:37 < sven_oostenbrink> livinded: checking!
23:37 < tjholowaychuk> sven_oostenbrink ah nvm
23:38 < sven_oostenbrink> monokrome: yes, a few times, but no reply so far
23:38 < TimeTurner> IE...is a no go
23:38 < livinded> not sure IE7 supports querySelector but you can rip all that out and switch to jQuery's selector. Everything else works
23:38 < livinded> also, IE7 probably doesn't support the drag and drop events
23:39 < sven_oostenbrink> livinded: I do have jQuery already for the project.. This looks very nice.. thanks!
23:39 < livinded> sven_oostenbrink: I'm gonna upload a much more complete and more standards compliant version next month once I have time to finish
23:39 < livinded> I want it to support multipart forms so that you can degrade gracefully to non-ajax uploads
23:41 < sven_oostenbrink> livinded: The problem I am having with most (afaik, all) upload things is that they have an entire framework integrated, do their own HTML and CSS (from JS), its a mess... I cant get any to work well AND look well at the same time, AND actually work on all browsers. I just want to have ome that works on the background, I'll tie it to my HTML myself, and everybody will be happy :)
23:41 < livinded> sven_oostenbrink: that's heavily modified from one of those things you found. I basically ripped out EVERYTHING and rewrote parts of it
23:42 < sven_oostenbrink> livinded: If you make this in a real project, please please, dont do any HTML :) We can do that ourselves.. Just give lots of hooks to connect to, events to respond to and methods to control eveyrhing..
23:42 < livinded> it was heavily coupled to jQuery which I'm trying to move away from
23:42 < livinded> sven_oostenbrink: that's my plan
23:42 < sven_oostenbrink> TimeTurner: IE may be a nogo, but 80% of our customers are on it.. What will I do? :D
23:42 < livinded> I want to allow the dev to specify callbacks to handle all those things themselves
23:44 < CIA-93> node: Bert Belder v0.8 * r23dc099 / benchmark/tls-connect.js : benchmark: add single process tls connection benchmark - http://git.io/_Eo99A
23:45 < jesusabdullah> pooya: use eval() in a custom evaluator to be passed into repl.start()
23:45 < jesusabdullah> pooya: not that this is necessarily a good idea. I like to attach like a handful of methods to the scope of my repl, keeping everything else unexposed
23:46 < TimeTurner> tjholowaychuk: what were you going to suggest if IE support is not needed?
23:46 < TimeTurner> for XHR uploads etc
23:46 < tjholowaychuk> TimeTurner nothing specific, i have a little lib but it needs multipart support
23:46 < tjholowaychuk> it's not very robust yet anyway
23:46 < tjholowaychuk> the ones with UIs are pure madness
23:47 < TimeTurner> are you putting multipart into superagent?
23:48 < tjholowaychuk> on the client side? yeah I'd like to eventually
23:48 < TimeTurner> yeah
23:48 < tjholowaychuk> it's getting big though I want to move some stuff out
23:58 < sigwhite> When using node.js, do I have to worry about thread safety on async operations (say, reading from and writing to a shared counter variable)?
23:59 < tjholowaychuk> just "async safety" but once you're used to closures that's really natural
23:59 < tjholowaychuk> so in short no
23:59 < sigwhite> Well, I'm used to client side JS.
--- Log closed Sat Jul 14 00:00:04 2012
