--- Log opened Tue Oct 16 00:00:05 2012
--- Day changed Tue Oct 16 2012
00:00 < EuroNerd> apples and oranges?
00:00 < Aria> I don't use either, I hand-code 'em. But whichever one you understand is good.
00:00 < Aria> Understanding is key, really.
00:00 < cxreg> can someone please help me figure out how i'm being stupid?  every time i try to use https it turns into a request to localhost on 80
00:00 < EuroNerd> ok
00:00 < cxreg> > require('https').get('https://google.com', function(res) {});
00:00 < cxreg> { output: [ 'GET / HTTP/1.1\r\nHost: localhost\r\nConnection: keep-alive\r\n\r\n' ],
00:01 < cxreg> ill try the options-as-an-object syntax, i guess
00:01 < MI6> joyent/libuv: piscisaureus created branch multisig - http://git.io/JlA9Yw
00:04 < dazld_> out of curiousity, is there a framework close to a rails kind of feature set (scaffolding, generating models, i18n, routes, views, prod/test/dev env variables etc) for node?
00:05 < dazld_> that's being updated regularly, with good documentation?
00:05 < dazld_> :D
00:06 < othiym23> dazld_: take a look at Geddy
00:06 <@isaacs> isn't railwayjs also a thing?
00:06 <@isaacs> is that still happening?
00:06 < zane> In this Stack Overflow answer, it is suggested that there are multiple ways to create ambiguous code that leads to leaks; (1) is this a correct anwser? (2) does anybody know where I can read more about other things to watch out for? http://stackoverflow.com/questions/5733665/how-to-prevent-memory-leaks-in-node-js
00:06 < othiym23> keep in mind that its primary author is always wearing a Zildjian T-shirt, so bonus points to you if you also like Objectivist Canadian prog
00:07 < dazld_> i can deal with that
00:07 < dazld_> thank you both, ill investigate those
00:08 < ChrisPartridge> oh, geddy site has been updated, looks like a microsoft site now
00:08 < superjoe> dazld_, generally we look down upon frameworks in favor of lightweight modules that do contained, useful things
00:08 < dazld_> that's great for once you're deep into how it works
00:08 < dazld_> maybe
00:09 < superjoe> dazld_, "how it works" is very simple
00:09 < superjoe> it's frameworks that are complicated
00:09 < othiym23> ChrisPartridge: MS owns Geddy (indirectly), so that makes sense
00:09 < othiym23> haha "copyright 2112"
00:09 < othiym23> the jokes never end
00:09 < ChrisPartridge> othiym23: really?
00:09 < dazld_> well, unless you have a very clear concept about how those modules will fit together, sometimes it's nice to look at a framework to learn a bit more
00:09 < othiym23> yeah, maintainer works for Yammer, which got bought by MS
00:10 < ChrisPartridge> ah
00:10 < dazld_> to me anyway, i find that works well as a learning exercise
00:10 < othiym23> dazld_: learn however works best for you, but trying to make Node like Rails / Ruby starts feeling like pounding a square peg into a round hole pretty quickly
00:10 < ChrisPartridge> amen
00:11 < superjoe> dazld_, sure, you're free to do whatever you want. just giving a heads up to how the node.js community generally does things
00:11 < jmoyers> whoa, i'd never seen geddy.
00:11 < dazld_> appreciate that ;)
00:11 < dazld_> othiym23: how come?
00:12 < othiym23> dazld_: different paradigms at root -- async programming is the soul of Node, and even if you're using EventMachine, Ruby still feels much more synchronous
00:12 < dazld_> that's something that confuses me a bit
00:12 < superjoe> it's amazing how much you can abstract once you assume async
00:13 < superjoe> it's much easier to avoid leaks
00:13 < ChrisPartridge> and streams are a dream
00:13 < superjoe> +1
00:13 < dazld_> i can handle async when it's in the browser, but how that relates to different pages, say you're navigating between links..
00:13 < othiym23> superjoe: I think it's more that lambdas / procs / blocks are confusingly similar in Ruby, and there's really only the one mechanism in Node / JS, and people go hog wild
00:13 < superjoe> othiym23, good point
00:14 < othiym23> dazld_: the best way to figure all that out is really just to start building up a simple web app from the built-in http module, and start trying to solve problems like "callback hell" and routing and setting up DB connections for use by more than one route handler by yourself
00:14 < othiym23> it'll be a pain in the ass, but a very educational one
00:14 < niggler> every pain in the ass is educational
00:14 < othiym23> not always!
00:15 < holzp`> you just need to be on your toes and "think async"
00:15 < superjoe> dazld_, you may also want to check out express. it's a bit more structured and will give you a powerful starting point
00:15 < superjoe> I mean it's a bit more structured than using the http api directly
00:15 < dazld_> express is really nice, but i wanted something with models built in
00:16 < othiym23> Express + Mongoose / Sequelize seems to be where most people start
00:16 < jmoyers> i've never seen anything with models built in except for geddy
00:16 < context> railway
00:17 < jmoyers> aaaaaah
00:17 < jmoyers> all these are wild
00:17 < jmoyers> built in orm
00:17 < jmoyers> makes me sadface
00:39 < bubbles10101> would love if anyone in the all-js camp (eg no static css/html), explain how to use this paradigm with outside frontend designers in a team
00:40 <@Nexxy> lolwat
00:40 <@Nexxy> that exists?
00:40 <@Nexxy> what do you mean by no static css/html?
00:40 < chilts> sounds like everything is created with JavaScript
00:40 <@Nexxy> that's what it sounds like to me but seems far too unreasonable to actually be a thing
00:41 < bubbles10101> mmm.. what im asking is that if you have an "only js app", eg no css or html templates
00:41 < chilts> apart frmo a basic but empty HTML page
00:41 < bubbles10101> how do you interact with designers?
00:41 <@Nexxy> nerf guns
00:41 < bubbles10101> am i making sense?
00:41 < chilts> heh
00:41 < othiym23> bubbles10101: in what universe does such a thing exist?
00:41 < chilts> yeah, but never had experience of it so far :)
00:41 < bubbles10101> meteor for example is pure js iirc
00:42 < thomasd_> Why is coffeescript so common in node?
00:42 < bubbles10101> you can also build node based apps using js only
00:42 < othiym23> nah dogg, meteor uses templates just like everybody else
00:42 < bubbles10101> how is this surprising?
00:42 < bubbles10101> mmm
00:42 < othiym23> I mean, there's a wide variety of templating strategies, and you can argue that something like jade is "pure JS", but I'm not sure many people would agree with you
00:43 <@Nexxy> thomasd_, it's not
00:43 < bubbles10101> no - i dont consider jade or any templating "pure"
00:43 < bubbles10101> well.. i guess i just assumed there were people building pure js.. i mean its not infeasible to do
00:43 < chilts> thatguydan: coffeescript isn't so common, but it is used ... I think it's about 10-15% of npm (that's from memory, can't remember the exact figures)
00:44 < etcetera> thomasd_: honestly while these js abstractions are fine, there is poor debugging support for them.
00:44 < etcetera> except for possibly...dart.
00:44 < bubbles10101> ok.. well if no-one is building pure-js stuff.. then why not?
00:45 < etcetera> I'm actually not a big fan of pure js.
00:45 < bubbles10101> although i find that hard to believe...
00:45 < bubbles10101> etcetera: yeah...?
00:45 < etcetera> I'm actually not a big fan of dynamic languages for critical code.
00:46 < ChrisPartridge> bubbles10101: because it's a nightmare to manage, especially if you are dealing with a designer
00:46 < etcetera> </troll>
00:48 < othiym23> building up a web page from pure DOM / CSSOM elements is just time-consuming and unwieldy
00:48 < thomasd_> I have a concern Node is constantly warning me about a change in express witch i don't use is there any way to turn off this output?
00:48 < context> cssom ?
00:49 < context> nnm
00:49 < othiym23> if there's no template anywhere in there, you're basically making, like, Ur/Web or something, only without the correctness guarantees that make Ur/Web worth contemplating
00:50 < bubbles10101> ChrisPartridge: yeah.. this is what i suspected.. which was my actual question from the start :)
00:50 < bubbles10101> was wondering if anyone had suffered the pain... and figured out a way around it
00:50 < bubbles10101> but yeah...not that optimistic given the responses :p
00:50 < context> im not even going to ask
00:50 < thomasd_> Is there a way to install node without express?
00:51 < ChrisPartridge> er
00:51 < othiym23> thomasd_: uh yes?
00:51 < othiym23> rm -r node_modules in your app -- Express all gone!
00:51 < llrcombs> Do I need to install anything extra to use Coffeescript modules, or does Node support those OOB?
00:51 < context> uhh whats express have to do with node ?
00:51 < context> last i checked express never has installed when you install node
00:52 < thomasd_> where are global moduels located?
00:52 < context> npm -g prefix
00:52 < superjoe> I'm looking at node code that has an integer constant 0755. in the REPL I see that that evaluates to 493 in decimal and that 0x755 evaluates to 1877 in decimal. this code is broken right?
00:52 < context> llrcombs: install coffeescript
00:53 < thomasd_> why is everything i run  giving me this output http://pastebin.com/i6UgMeAJ
00:53 < context> superjoe: 0755 is common default permissions
00:53 < superjoe> context, I feel like you didn't address my question
00:53 < context> thomasd_: you are coding against express 2, not express 3 which you have installed
00:54 < context> thomasd_: well, you failed to define "broken"
00:54 < context> err superjoe *
00:54 < thomasd_> I don't have express installed
00:54 < context> well you are running something that does depend on express
00:55 < thomasd_> one sec
00:55 < llrcombs> context: where's that come from?
00:55 <@Nexxy> superjoe, that sounds like it's working as intended
00:55 < JohnMcLear2> Heh, the express API change still causing problems.
00:55 < context> llrcombs: the https://npmjs.org/package/coffee-script module.
00:55 < superjoe> Nexxy, but didn't the coder mean to write 0x755?
00:56 < superjoe> those numbers are different
00:56 < llrcombs> context: alright, thanks
00:56 <@Nexxy> no clue what the intention is
00:56 < CoverSlide> usually they mean 0755
00:56 < ang3lfir3> ohh noes that will get em started 
00:56 < JohnMcLear2> I love TJ but that upgrade path was kinda painful.
00:56 < CoverSlide> if they mean file permissions
00:56 <@Nexxy> but 0755 is common perms
00:56 < ang3lfir3> we gots coffee haters in here :p 
00:56 < CoverSlide> there's nothing significant about 0x755 
00:56 < superjoe> ah, 0x is hex, not oct
00:57 < superjoe> that's my problem
00:57 < CoverSlide> not your only problem ...
00:57 < context> haha
00:57 < superjoe> -_-
00:57 < purr> superjoe: ಠ_ಠ is an IRC client/IRC client framework.
00:57 < context> bicycles on underscores ?
00:57 < ChrisPartridge> unicycles?
00:57 < othiym23> superjoe: if 0755 is in a fs call, it's doing some magic to do the right thing, but either way you should replace it with '0755'
00:58 < niggler> how do i get node to give a stack trace at a particular point?
00:58 < thomasd_> Ok sorry I installed phantom for some test driven development https://github.com/sgentle/phantomjs-node/ and aparantly it uses express for Inter-process comunication somehow 
00:58 < othiym23> niggler: new Error().stack
00:58 < superjoe> othiym23, thanks - *that's* the answer I was looking for
00:58 < niggler> (new Error(
00:58 < niggler> err
00:58 < thomasd_> however I dont have express installed yet it works
00:58 < niggler> >>> (new Error()).stack
00:58 < purr> niggler: (string) 'Error\n    at irc:1:3\n    at Sandbox.execute (/srv/irc/purr/lib/sandbox/v8/shovel.js:56:12)\n    at Object.run (evalmachine.<anonymous>:386:12)\n    at Sandbox.<anonymous> (/srv/irc/purr/lib/sandbox/v8/shovel.js:45:38)\n    at Socket.<anonymous> (/srv/irc/purr/lib/sandbox/v8/shovel.js:27:13)\n    at Socket.emit (events.js:64:17)\n    at Pipe.onread (net.js:35…
00:58 < superjoe> othiym23, I suppose I should have simply taken a re-peek at the api docs. 
00:58 < context> i installed phantom from brew so i dont get errors :/
00:58 < ChrisPartridge> thomasd_: it has to be installed somewhere
00:58 < niggler> >>> new Error().stack
00:58 < purr> niggler: (string) 'Error\n    at irc:1:6\n    at Sandbox.execute (/srv/irc/purr/lib/sandbox/v8/shovel.js:56:12)\n    at Object.run (evalmachine.<anonymous>:386:12)\n    at Sandbox.<anonymous> (/srv/irc/purr/lib/sandbox/v8/shovel.js:45:38)\n    at Socket.<anonymous> (/srv/irc/purr/lib/sandbox/v8/shovel.js:27:13)\n    at Socket.emit (events.js:64:17)\n    at Pipe.onread (net.js:35…
00:59 < context> </spam>
00:59 < othiym23> superjoe: JS's lack of octal literals and people's terror of using parseInt('0755', 8) combines to make for some weird Node code
01:00 < niggler> is the order of precedence in javascript different from C++?
01:00 < othiym23> niggler: probably?
01:00 < context> 0755 does give me 493, same as parseInt
01:00 < niggler> yeah looks like it
01:00 < othiym23> I just know from experience that you don't have to put constructor calls in parentheses to use the returned value
01:01 < superjoe> context, it's deprecated
01:01 < othiym23> >>> parseInt('0755', 8)
01:01 < purr> othiym23: (number) 493
01:01 < othiym23> y hello dere, purr, how long have you been there?
01:03 < superjoe> it is silly to put commas at the beginning of the line
01:03 < superjoe> why do people insist on it
01:04 < othiym23> super convenient for diffs and moving stuff around
01:04 < othiym23> LEADING COMMAS 4 LYFE
01:04 < superjoe> you know what's even more convenient? a line break after the { and a comma after *every* line
01:04 < superjoe> }
01:04 < superjoe> sorry, had to close it
01:05 < othiym23> I only do it for my require and big var declaration blocks
01:05 < othiym23> I used to do the same thing in package.json, but then I just started letting npm deal with package.json / running it through jsonlint
01:05 < othiym23> it would be awesome if the Node world had something like gofmt, but I'm afraid that ship has sailed
01:06 < superjoe> yeah it is too bad that valid json doesn't accept a trailing comma
01:08 < ang3lfir3> superjoe, that gets me all the time.... especially when switching from C# initializer syntax to JS .... gets me every time... 
01:08 < CoverSlide> that's why i use comma-first
01:09 < ang3lfir3> meh comma first looks like a typo .... make my vimstinks hit shft+J 
01:09 < superjoe> same
01:09 < superjoe> vimstinks
01:09 < ang3lfir3> the emacs guys are gunna love that one
01:11 < niggler> fuck emacs
01:11 < niggler>  </flamewar>
01:11 <@Nexxy> mentlegen.
01:12 < niggler> of course Nexxy shows up
01:13 <@Nexxy> niggler, do I get to grep the logs again?
01:13 < niggler> I'm surprised you haven't set up a cronjob to do that Nexxy 
01:13 <@Nexxy> ohhh
01:13 <@Nexxy> good idea
01:13 < context> haha
01:16 < janmower> hey anyone have a question about node+building extensions: how do I add a single .o to the final call to linker?
01:16 < janmower> i have my targets defined in node.gyp, but my call to final link fails
01:16 < rvagg> janmower: what's the error? it should take care of that for you
01:17 < janmower> it's a symbol not found error
01:17 < janmower> where the symbols are in a generated .o file
01:17 < TooTallNate> janmower: what's your gyp file look file?
01:17 < TooTallNate> janmower: you should be able to add the .o file to a "libraries" section of the file
01:17 < RickJ> hdon, are you there?
01:17 <@Nexxy> niggler, https://gist.github.com/3829271 updated
01:17 < janmower> TooTallNate: thanks i'll try that
01:17 < niggler> dammit only 92
01:17 <@Nexxy> soon we'll start running stats on it
01:18 < janmower> rvagg: thanks as well
01:18 < CoverSlide> fuck niggler
01:18 < niggler> wait wait wait Nexxy that's not fair: 17:33 <@isaacs> niggler: my ircretary backlog is all you fucking things.
01:18 < niggler> that's not me
01:18 < niggler> fuck CoverSlide 
01:18 < niggler> and his passionate defense of evil mantras
01:19 < TooTallNate> lolwtf https://gist.github.com/3829271
01:19 < superjoe> lol
01:19 < TooTallNate> Nexxy: nice stats!
01:19 < rvagg> hah!
01:20 < CoverSlide> fuck niggler's mother
01:20 < niggler> nexxy: the grep needs to be cleaned up 
01:20 < TooTallNate> CoverSlide: hey now…
01:20 < othiym23> niggler's a randy fellow
01:21 <@Nexxy> CoverSlide, settle down
01:21 < niggler> see now i will be penalized, using a blind grep, for CoverSlide's inability to simma down
01:21 < superjoe> NigglerBot?
01:21 < blez> sounds like niggler repeat himself
01:21 < mmalecki> Nexxy: awww
01:21 <@Nexxy> mmalecki, wat
01:21 < mmalecki> Nexxy: that log reminds me of my high school :3
01:22 < mmalecki> this is how most conversations looked like
01:22 < mmalecki> ah, the memories!
01:22 < blez> what's _so_ wrong with typescript
01:22 <@Nexxy> nothing
01:22 < niggler> in no less than 10 circumstances typescript broke javascript compatibility
01:22 < niggler> but that's not even the biggest issue
01:22 < CoverSlide> reminds me of http://www.youtube.com/watch?v=sK4j_ht7ijk
01:22 <@Nexxy> shhh
01:22 < niggler> there are real things they could innovate
01:23 < niggler> everything in typescript could be done with a more advanced jshint
01:23 < CoverSlide> typescript is just a way to make js intellisense-friendly
01:23 < niggler> its not moving the bar
01:23 < CoverSlide> in other words, utterly useless outside of ms-land
01:23 < niggler> instead of making typescript why not make js intellisense friendly in the first place?
01:23 < niggler> that would have made much more sense
01:24 < niggler> http://xkcd.com/927/
01:24 < superjoe> niggler, how would you do that
01:24 < othiym23> superjoe: it's simple: just remove "Script" from the name
01:24 < othiym23> all done!
01:25 < superjoe> ha!
01:25 < niggler> actually intellisense has some support for javascript already
01:25 < superjoe> to be fair, it *is* super nice when trying to debug a java program, and you know exactly who is calling who
01:25 < CoverSlide> yeah i've used it
01:25 < superjoe> in eclipse
01:25 < CoverSlide> I've spent 2 years in .NET
01:25 < othiym23> this is definitely my cue to go home
01:25  * othiym23 poofs
01:25 < superjoe> ha
01:25 < CoverSlide> 23:06 < niggler> fuck .net
01:25 < niggler> superjoe: you don't lose that in javascript -- it's node that has problems
01:26 < superjoe> niggler, uh, yes you do. properties can be added dynamically
01:26 < superjoe> therefore perfect intellisense is impossible
01:26 < niggler> "o be fair, it *is* super nice when trying to debug a java program, and you know exactly who is calling who"
01:26 < niggler> you still have a stack in javascript -- that doesn't go away
01:26 < superjoe> I mean at compile time
01:27 < superjoe> static code analysis. it's not worthless. that's all
01:27 < niggler> that's a different statement
01:27 < niggler> yes you can't do static code analysis, but that's not "to be fair, it *is* super nice when trying to debug a java program, and you know exactly who is calling who"
01:27 < CoverSlide> but when you have no way of telling the IDE what type the arguments are, or what properties they may or may not have
01:27 < superjoe> or methods
01:28 < superjoe> I guess methods count as properties
01:28 < niggler> how does AS do it?
01:28 < CoverSlide> there are no methods in javascript
01:28 < superjoe> whatever. callable things
01:29 < CoverSlide> a method is a property with typeof == 'function'
01:29 < superjoe> sounds like a good definition
01:29 < CoverSlide> AS is its own statically-typed language 
01:29 < CoverSlide> it's basically typescript with some java thrown in
01:30 < CoverSlide> var myInt:Number = 10;
01:31 < CoverSlide> it's like you get two girls, one named javascript, the other named java, then you introduce a cup between them
01:31 < CoverSlide> that's actionscript
01:33 < superjoe> omg
01:33 < superjoe> there's a --save-dev argument
01:33 < superjoe> why did I not read this manual earlier
01:34 < st_luke> superjoe: there are a lot of awesome npm options like that :)
01:34 < ChrisPartridge> CoverSlide: that's a worrying analogy
01:37 < TehShrike> CoverSlide: LOL
01:38 < deoxxa> https://github.com/joyent/node/blob/master/lib/stream.js#L77 why
01:38 < deoxxa> why oh why
01:39 < deoxxa> i don't want to have to reimplement .pipe(), how do i disable that
01:40 < janmower> TooTallNate: Thanks man that was it!
01:41 < janmower> TooTallNate: added a libraries section to my target and it showed up to linker call
01:43 < deoxxa> great. now i have to catch errors and re-pipe when they come up...
01:44 < TooTallNate> janmower: kewl :)
01:45 < TooTallNate> deoxxa: an "error" event usually means it's unsafe to do any more piping
01:45 < TooTallNate> i.e. the stream is in an undefined state
01:46 < deoxxa> yeah
01:46 < deoxxa> i'm seeing that
01:46 < deoxxa> i think that was a misunderstanding on my part
01:46 < deoxxa> i was using "error" to mean "something went wrong that you probably want to know about"
01:46 < deoxxa> not "everything is on fire, gtfo"
01:46 < deoxxa> i'll just emit "warning" events
01:46 < SomeoneWeird> lmao
01:47 < TooTallNate> deoxxa: yup, do that
01:47 < superjoe> deoxxa, I'm not looking at your code, but if there's an error, you should send it up the stack
01:47 < superjoe> either fail, or pass it up the stack
01:47 < deoxxa> superjoe: i am, which is the problem
01:47 < deoxxa> superjoe: i was handling errors too well, to the point where they were no longer fatal
01:48 < superjoe> deoxxa, that means the code that is using your code isn't checking the error
01:48 < deoxxa> ...
01:48 < deoxxa> yes, it was
01:48 < deoxxa> but there are certain errors i don't care about
01:48 < deoxxa> see https://github.com/joyent/node/blob/master/lib/stream.js#L77 for what my issue was
01:48 < deoxxa> basically Stream.pipe un-pipes the two streams whenever there's an error
01:48 < deoxxa> completely unconditionally, mind you
01:49 < deoxxa> i don't actually want that, but there's no practical way to disable it
01:49 < deoxxa> so instead, i'm just not emitting "error" anymore
01:49 < superjoe> ah, I see.
01:53 < CoverSlide> listen for the error on your streams then
01:54 < deoxxa> CoverSlide: are you serious?
01:54 <@Nexxy> STREAM MUCH?!
01:54 < deoxxa> CoverSlide: you read that entire conversation, and that's your reply?
01:54 < superjoe> I think CoverSlide made the same reading mistake I did
01:55 < CoverSlide> yeahi've got a small window
01:56 < CoverSlide> and i don't know how to read
01:56 < deoxxa> i see
02:10 < fmarier> why would i get 401s when trying to "npm install jade" ? (same thing happens with "redis")
02:11 < fmarier> (that's with npm 1.1.63 using the Ubuntu PPA)
02:11 < chilts> fmarier: works here - try doing an : npm cache clear
02:11 < LouisT> fmarier: something to do with your npm user info i would assume
02:11 < LouisT> i had that issue before, i had to clear my username and password to fix it
02:12 < chilts> sorry, clean - not clear :)
02:12 < fmarier> LouisT: you're right. it works now that i've removed my .npmrc
02:13 < fmarier> chilts: cleaning the cache didn't do anything
02:13 < fmarier> i guess i should file a bug against npm if there isn't one already
02:26 < chilts> fmarier: ah ok, a username/password thing, not a cache thing?
02:27 < chilts> cool
02:27 < jamiel> Hmm what would be causing portage to not try the gentoo mirrors first and going straightto SRC_URI ?
02:35 < jamiel> wrong chan sorry :S
02:37 < cory_> now that the "binary" encoding is deprecated for Buffers, what's the best way to write binary data out to something like base64 and then read it back into binary format? I've been trying to get zlib compressed strings in base64 to decompress... but the header check fails every time.
02:43 < Aria> Use the base64 encoding?
02:43 < RLa> doesn't it make buffers useless when binary encoding gets removed?
02:44 < cory_> I've been using new Buffer(..., 'base64')
02:44 < RLa> how else would you deal with binary data then?
02:44 < cory_> but when I feed that into zlib.createGunzip() it fails the header check
02:44 < cory_> I'm assuming it's because it's converting the buffer to utf8 and not binary
02:51 < cory_> anyone want to take a look at a test program I have to help diagnose?
02:51 < cory_> it's short ;)
02:53 < SomeoneWeird> cory_, pastie it anyway
02:55 < cory_> https://gist.github.com/3897000
03:02 < cory_> well... I found a workaround, thanks anyhow
03:05 < kenokabe> hi to anyone online
03:07 < kenokabe> will reboot to install
03:38 < bubbles10101> what do peeps think of browserify?
03:38 < superjoe> sucks
03:38 < othiym23> awesome
03:39 < Gregor> I am neutral towards it.
03:40 < bubbles10101> well i kinda thought it was like 'meh' before.. but saw substack give a talk on it today, and he was doing some interesting things with it
03:40 < RLa> what else you use for your client-side code?
03:41 < Kep> I like the Harry Potter browserify logo. :P
03:41 < othiym23> Kep: that is the best piece of art on the entire internet and I'll fight anyone who argues otherwise
03:42 < superjoe> ha that is pretty good
03:42 < superjoe> looks like it was drawn with a track pad
03:42 < othiym23> bubbles10101: if you spend most of your time living in Node, are comfortable hacking with streams, and aren't super worried about interoperability with other back-end stacks, browserify is super powerful
03:43 < othiym23> however, it's sort of a totalizing abstraction and probably not super awesome if you're used to using a lot of front-end libraries already
03:45 < bubbles10101> hmmm yeah he was doing nifty stuff with streams  curling and cating things which updated dom elements.. kinda like i guess derby or meteor would
03:45 < othiym23> not.. really
03:46 < othiym23> browserify is a set of shims to make a browser look sort of like a Node instance that's suddenly grown a DOM
03:46 < othiym23> derby and meteor are more intent on blurring the distinction between browser and server
03:46 < bubbles10101> othiym23: ok... forgive me for all the questions. trying to get my head around it :)
03:47 < bubbles10101> also. what do you mean by "totalizing abstraction "
03:49 < othiym23> I mean that once you start using browserify, it starts sucking everything into itself
03:49 < RLa> is that really so bad
03:50 < othiym23> like, I don't hear people talk about mixing browserify and, oh, just picking a random MVVM framework here, Ember
03:50 < othiym23> RLa: I don't think it's bad
03:50 < RLa> i see it more as a tool to resolve require() calls
03:50 < othiym23> it's just a thing
03:50 < superjoe> it's evil
03:50 < superjoe> witchcraft is evil
03:50 < superjoe> that's what my mom taught me
03:51 < othiym23> RLa: the people who are using browserify a lot are using the require()-y bits only as glue to get at shoes or mux-demux or whatever
03:52 < bubbles10101> yeah.. i mean he was passionate about promoting it as an *ecosystem* (at least that was my impression)
03:53 < bubbles10101> i mean i think its more than syntactic convenience
03:53 < bubbles10101> but wondering whether it will get traction and worth investing in that knowledge path.... mmmmmm
03:54 < othiym23> substack is your one-stop shop for substack
03:54 < othiym23> gather.at is powered by browserify and it's pretty neat
03:55 < othiym23> bubbles10101: I think the only way to find out is to get your hands dirty and knock out some projects
03:55 < othiym23> the great thing about substack's approach is that almost everything he writes is small enough to pick up and use in an afternoon
03:56 < bubbles10101> yeah. ok thats true....... its not a big investment. thanks!
04:10 < TheEmpath2> hail.  what are the obfuscation benefits of having a tls server that rotates its certs every time everyone logs off it?
04:10 < TheEmpath2> and by rotates, i mean generates a new one
04:20 < ChrisPartridge> TheEmpath2: seems a bit extreme
04:20 < TheEmpath2> i like extreme
04:21 < timeturner> well, obviously there are benefits
04:22 < timeturner> but those benefits are, in js terms, a noop.
04:22 < timeturner> unless you're operating a bank website there's probably no reason to do so
04:23 < TheEmpath2> ah
04:23 < TheEmpath2> thats a good point
04:23 < ChrisPartridge> and if you are a bank, gimme some money
04:23 < timeturner> yeah haha
04:23 < ChrisPartridge> :)
04:23 < TheEmpath2> you're credit isn't high enough
04:23 < TheEmpath2> D:
04:23 < TheEmpath2> YOUR*
04:25 < clever> TheEmpath2: id think that would screw up some browsers
04:25 < clever> TheEmpath2: chrome for example, you can configure it to remember the cert, and give a warning
04:25 < TheEmpath2> ah
04:25 < clever> so even if somebody manages to fake a CA and sign their own false certs, chrome knows
04:26 < clever> most other browsers, i think just check if its valid and forget it asap
04:26 < clever> biggest issue i can see with the whole ssl design, every root CA has equal power over everything
04:27 < clever> so in theory, china could sign their own cert for paypal.com and then intercept all encrypted traffic for paypal
04:27 < clever> making the ssl effectively useless against them
04:27 < TheEmpath2> interesting
04:28 < clever> if you have control over any ca root (from any country), you can sign certs for any domain
04:28 < clever> and if you can somehow hijack the tcp connection (many ways), your cert will be treated as perfectly valid
04:29 < TheEmpath2> very interesting.. okay... what about tls servers for say SSL chat?
04:29 < clever> TheEmpath2: whats worse, is BGP
04:29 < clever> the traffic doesnt even have to flow thru your country normaly for you to intercept it
04:30 < clever> BGP basicaly controls where on the web every IP gets routed
04:30 < timeturner> so how do we prevent all of this from happening?
04:30 < clever> if you abuse your BGP level access, you could reroute ALL traffic for any ip, world wide, to your datacenter
04:30 < context> whats wrong with bgp
04:31 < timeturner> as app developers what precautions can we take
04:31 < clever> context: whats to stop me from re-routing, say www.paypal.com's ip, to my datacenter?
04:31 < context> the real question is are you talking about iBGP or eBGP
04:31 < context> clever: peers
04:31 < TheEmpath2> i gained a level!
04:31 < clever> timeturner: about all you can do is get an ssl cert and hope nobody abuses their perms :P
04:31 < TheEmpath2> learning mode activated!  continue plz
04:32 < clever> context: does that assume the peers for my datacenter are configured to know where paypal belongs?
04:32 < context> clever: it assumes your peers are retards and will let you route ip's that aren't yours
04:32 < TheEmpath2> what about self-signed certs for SSL chat?
04:33 < context> anyway time to go to bed, google the 'bgp' learn more
04:33 < clever> TheEmpath2: there is no way to verify that its the right self-signed cert, enless you have the public key writen down on a piece of paper (or a .txt file)
04:33 < clever> thats why you have root CA authoritys
04:34 < clever> i believe each root is a normal self-signed cert, which is specialy added to the browser as a trusted root cert
04:34 < TheEmpath2> aye.  thats why i wanna generate a new one at regular intervals
04:34 < clever> and then all normal sites are signed by a root cert
04:35 < clever> you can get chains, for example your main cert can then sign a second set of certs
04:35 < clever> just not sure on the details of how to do it properly
04:35 < clever> and i believe the rules on what you can do (what you can sign) are part of what the root signs
04:35 < clever> so the root has to agree to that ability before you can use it
04:37 < clever> timeturner: ive read an article on BGP before, where a country (i think iraq?) tried to ban youtube for everybody in the country
04:37 < clever> timeturner: so they used BGP to route the youtube subnet to a null point
04:38 < clever> by mistake, they configured it to broadcast world wide :P
04:38 < TheEmpath2> lol
04:39 < clever> every ip in that block just up and stopped working, world wide
04:39 < tmpvar> does anyone know of some addon code that takes a callback, stores it, and calls it with argv[0] as a Buffer?
04:40 < tmpvar> (calls it at a later time)
04:53 < mscdex> Nexxy: eh?
04:55 < zivester> is it possible to have a module work with both a require('somemodule') and require('somemodule')(someparams) syntax ?
04:58 < timeturner> if you export a function then it will work fine
04:59 < timeturner> require('module') just gives you whatever you exported from ./module
04:59 < timeturner> simple
05:02 < ChrisPartridge> zivester: not sure if it's still the recommended way, but generally you export a method such as create{Server|Client|Instance} etc, which takes params and returns and instatiated object
05:11 < zivester> a bit confused... I want require('module') to return an object, and I want require('module')(params) to also return a module, just a different one.. is there a simple example of this?
05:12 < zane> Can anybody help me start node.js using forever with command line flags? StackOverflow detailed question: http://stackoverflow.com/questions/12901358/starting-node-js-using-forever-with-nouse-idle-notification-and-other-flags/12901450#comment17475734_12901450
05:22  * zivester s/return a module/object/
05:25 < timeturner> module.exports = function(params) { if(params) /* return params stuff */ else return /* someObject {} */ }; require('module')() or require('module')(params)
05:28 < wookiehangover> but that's a stupid pattern and you should avoid it
05:28 < hemanth> node hackers, what's your say on coffeescript?
05:28 < SomeoneWeird> gtfo
05:28 < SomeoneWeird> lol
05:29 < SomeoneWeird> thats my say
05:29 < wookiehangover> it's great for making code that runs well in IE6
05:30 < arvin_> i'm happy enough with normal javascript syntax, but i've nothing against coffeescript
05:30 < timeturner> I can't understand coffeescript
05:31 < timeturner> or the stuff it geenrates
05:31 < wookiehangover> I used it on a frontend project for about 8 months, it has its advantages
05:31 < arvin_> i might try it if debugging tools support it natively
05:31 < timeturner> generates*
05:31 < wookiehangover> but will I ever choose to use it again? no.
05:31 < wookiehangover> arvin_: debugger; still works
05:31 < timeturner> I mean it takes me longer to understand the generated code then the code I would have written in javascript
05:31 < wookiehangover> so people that bitch about debugging it are #doingItWrong
05:32 < timeturner> or maybe it's just because I'm not used to all the shimming and stuff
05:32 < zivester> timeturner: so I must always have the require('module')() with the second set of parenthesis?
05:32 < arvin_> might be mistaken here, but I thought I
05:33 < arvin_> I'd have to debug the generated javascript?
05:33 < timeturner> well you could export a self executing function which would pass the params to another function and return the params object or return your default object from the self executing function but honestly it's a bas pattern to do this
05:33 < timeturner> bad*
05:33 < zivester> I noticed mongoose has require() and require().someFunction syntax... maybe that's what I'm suppose to be using
05:33 < timeturner> that's just exporting an object
05:34 < wookiehangover> arvin_: you do, but `debugger` inserts a manual breakpoint, so you can easily get your bearings
05:34 < Oddman> what timeturner said
05:34 < timeturner> and calling the keys of the object
05:35 < arvin_> Okay, so why do you say you'd never use it again?
05:35 < zivester> I guess, what's a good use case for require('module')(params) ... or if I need to pass things should I always do require('module').someFunc(params)
05:36 < hemanth> SomeoneWeird, :P
05:36 < hemanth> wookiehangover, nice to hear that 
05:36 < timeturner> it's easier just to do require('module')() and use my first snippet of code
05:37 < ChrisPartridge> zivester: what does this module do?
05:37 < hemanth> arvin_, how do you avoid callback hells? Naming them all is also a pain 
05:38 < zivester> a couple different ones... one passing in mongoose to models, another one passing express app into routes, and a third passing in an optional param into a config.js file
05:38 < arvin_> I prefer the common js promises pattern... asyncOperation.then(...)
05:39 < wookiehangover> zivester: just use dependency injection
05:40 < zivester> it's more the last case that I'm tring to take care of... i.e. require('./config') should just return my nconf module... but if it's something special, like require('./config')(db) I would only want to return the object releated to the database
05:40 < wookiehangover> have the module expose a function that takes those arguments... then just use it
05:40 < arvin_> What about everyone else... what do you think about callbacks vs promises
05:40 < wookiehangover> var myFoo = require('myFoo'); myFoo( config, blah, blah );
05:40 < zivester> DI in node O_o Can't get get it to work in Angular
05:41 < wookiehangover> arvin_: I'm a big fan of promises/deferreds, but I do appreciate the simplicity of the callback(err, result) pattern
05:41 < wookiehangover> gets the job done
05:45 < zane> Is there any way to run forever with flags like -nouse-idle-notification ?
05:45 < Nena33> helloo thereeeEEEeeee
05:45 < zane> I need the flags, but my prod server also needs forever :(
05:45 < Nena33> :)
06:00 < zane> hm if I simply start node via "node index.js &" from the SSH terminal into my server, the process dies when the terminal dies. Aside from forever, is there a  way around this?
06:00 < superjoe> zane, there's screen, nohup, daemonize
06:01 < RLaa> i think it's sighup that will "kill" the node
06:01 < RLaa> so if you handle sighup in node to not shut down 
06:01 < zane> superjoe: thanks :) gives me stuff to research
06:01 < RLaa> but yeah, there are tools for it
06:02 < zane> RLaa: didn't quite follow that
06:03 < RLaa> zane, process.on('SIGHUP', function() {"do nothing"});
06:04 < RLaa> hm, actually i have no idea where std streams go when you log out
06:04 < RLaa> so better use those libs/tools
06:05 < SomeoneWeird> screen -S index.js
06:05 < SomeoneWeird> node index.js
06:05 < SomeoneWeird> then press ^A then d
06:06 < etcetera> anyone have a primer on aws?
06:06 < zane> hmm, with nohup, NODE_ENV=production suddenly doesn't work
06:06 < syskk> anyone using mongoose? Im building a rest api with mongoose and i was wondering if it was possible to override the .toJSON method so that I can hide some sensitive fields like password hash or such
06:07 < SomeoneWeird> zane, use screen, do what i write up there ^
06:07 < syskk> zane, have you tried `NODE_ENV=production nohup' or 'nohup NODE_ENV=production' maybe one of those will work
06:08 < SomeoneWeird> export NODE_ENV=production && nohup node index.js
06:08 < syskk> zane, i had same problem with sudo and sudo NODE_ENV=production node index.js worked
06:08 < zane> syskk: I use mongoose, but I'm not sure I understand your question. Why not do a limited query, eg, model.find({'_id': abc},{'username':true}); ?
06:09 < syskk> zane: right. because almost everywhere i return a json object or render a view depending on the accept header. it would be nice if i didnt have to write almost the same query twice
06:09 < zane> SomeoneWeird: hm, doesn't seem to like my cmd line flags
06:09 < SomeoneWeird> what, screen?
06:09 < SomeoneWeird> it just runs it normally
06:10 < syskk> zane: but i guess what i use in my view is almost the same as my json
06:10 < zane> syskk;
06:10 < zane> tried bouth of those, syskk, no dice
06:11 < syskk> SomeoneWeird: if you don't know screen already you should probably go with tmux (screen is pretty much a dead project right now)
06:11 < SomeoneWeird> heh
06:12 < zane> "screen -S node --expose-gc index.js" =>> "Error: Unknown option --expose-gc"
06:12 < syskk> zane: guess I'll add an issue if it's something others are interested in might write it
06:13 < syskk> maybe try quoting after -S ?
06:13 < zane> syskk: ah, yah, as a convenience method that would be nice. Could just use some middleware tho, no?
06:13 < SomeoneWeird> no
06:13 < SomeoneWeird> type screen -S index
06:13 < SomeoneWeird> press enter
06:13 < SomeoneWeird> then type whatever command runs your file
06:14 < SomeoneWeird> then press control+a then d
06:14 < syskk> zane: ah, how would i do that? is there a middleware before toJSON or something?
06:15 < zane> SomeoneWeird: not sure if this is even viable, given that I need to create a bash script that starts my node.js app on server startup
06:15 < syskk> zane: ah, there's already an issue for that https://github.com/LearnBoost/mongoose/issues/1020
06:16 < zane> syskk: tbh I haven't looked at mongoose's middleware extensively, 
06:16 < zane> syskk: oh nice
06:16 < zane> man this problem is really grating at me...
06:16 < zane> my server runs fine now with "forever start index.js"
06:16 < zane> but I need to add some flags to it
06:16 < zane> and can't find a freaking way to do it...
06:18 < superjoe> zane, you can wait for me to solve this issue... https://github.com/indabamusic/naught/issues/15
06:18 < superjoe> I might do it tomorrow
06:18 < superjoe> gotta run
06:18 < zane> suerjoe: oh man that'd be amazing
06:19 < zane> My server is very unstable atm and I think that the --nouse-idle-notifications will fix it
06:19 < zane> but can't test on production yet ;)
06:28 < chovy> zane: i wrote a script to do just that
06:29 < chovy> zane: https://github.com/chovy/node-startup
06:29 < zane> chovy: really !? could you send it my way?
06:30 < Raynos> https://github.com/Raynos/chain-stream/tree/dev#example
06:31 < Raynos> Now you can do crazy functional programming
06:31 < Raynos> with streams
06:32 < Raynos> promises are to return values as streams are to arrays
06:32 < chovy> syskk: you can with mongoose only return specific fields in the query
06:32 < ZacS1234> hi
06:33 < syskk> chovy: yeah i know
06:33 < chovy> zane: if your node app isn't app.js then this script needs to be edited.
06:34 < ZacS1234> im having some issues with Mongoose, I am not setting the auto_reconnect flag, which I believe should be true by default, but as soon as I get a disconnect it never seems to attempt to reconnect
06:35 < chovy> ZacS1234: try #mongoosejs just ask and wait
06:35 < ZacS1234> thanks chovy 
06:35 < chovy> i'm using mongoose too, but i haven't had that problem.
06:37 < syskk> chovy: I've posted on the issue https://github.com/LearnBoost/mongoose/issues/1020
06:39 < chovy> zane, i just updated the script
06:39 < chovy> should work now
06:40 < chovy> syskk: i think all you need to do is delete user.password
06:40 < chovy> just don't save it
06:40 < chovy> right before you render it
06:40 < syskk> chovy: im not saving it but i am saving the hash
06:40 < chovy> i mean don't do user.save()
06:41 < chovy> delete user.password
06:41 < syskk> chovy: anyways im doing the following right now: https://gist.github.com/3897570
06:41 < syskk> chovy: I do have to save the password hash in my db though
06:41 < chovy> yeah, thats what i was saying
06:42 < chovy> i mean just delete it before you output it, and don't call save() on it.
06:42 < chovy> otherwise you would loose the pw
06:42 < syskk> chovy: yea. i still think it should be a standard feature of mongoose. im doing this in a lot of places and would be nice if there was a way to change the default behavior of toJSON
06:43 < chovy> i know you can include fields
06:43 < syskk> chovy: I believe other ORMs like activerecord have this feature as well
06:43 < chovy> would be nice to have the opposite.
06:43 < syskk> true, safer
06:43 < chovy> where you give a list of fields to hide
06:44 < chovy> did yuo see the deselect()?
06:44 < syskk> feel free to comment on the issue, there are some alternatives proposed as well
06:44 < chovy> looks like that does what you want
06:44 < chovy>  salt: {type: String, select: false}
06:44 < chovy> that's even better
06:44 < syskk> yeah but the thing is sometimes i need those fields in my view but i dont want them in the json
06:44 < syskk> ah yeah, that's not a bad idea too
06:45 < chovy> oh, maybe these are just suggestions
06:45 < chovy> i thought they were implemnted
06:45 < syskk> yeah they are
06:46 < chovy> i don't think toJSON() is the right place to be adding it 
06:46 < chovy> that shouldn't have options
06:47 < syskk> chovy: right, I think it should be done in the schema definition, not when you call toJSON
06:47 < syskk> with a way to bypass the filters when you are sure you want the true json representation
06:48 < chovy> the only way to do it now is to do this:
06:48 < chovy> var fields = ['field1', 'field3']; //skip 'field2'
06:49 < chovy> Adventure.findOne({ type: 'iphone' }, fields, { safe: true }, callback);
06:49 < chovy> oh, this is good
06:49 < chovy> query.select('a b -c');
06:49 < chovy> it already exists
06:50 < chovy> query.select('name email -salt')
06:50 < chovy> http://mongoosejs.com/docs/api.html#query_Query-select
06:50 < chovy> you probably can just do query.select('-salt')
06:50 < chovy> hopefully
06:51 < chovy> i should do that too
06:51 < chovy> it would be nice to do this on the schema though so you don't have to remember to do it.
06:53 < syskk> chovy: i know about select chovy, as I said I would rather have a default filter in my schema, so I don't have to filter out the same fields every time i do a query in my handlers
06:53 < syskk> chovy: which leads to a lot of code duplication
06:53 < chovy> the only problem if it's on the schema is that it needs to be visible when you actually login
06:53 < syskk> yep, that's one example
06:54 < syskk> i mean, that's why i want to limit this to the toJSON call so my actually app has access to everything
06:54 < syskk> only when i render the json i want to hide the fields
06:54 < chovy> i think what you have there is decent in the gist
06:57 < chovy> schema.set('toJSON', { hide: 'password salt' })
06:58 < chovy> i want sub-populte in mongoose
06:58 < chovy> .populate('list.items.created_by')
06:58 < chovy> so i can do list.items.created_by.username
06:58 < chovy> in my views
07:32 < ZacS1234> anyone here have experience with mongoose, and in particular the auto reconnect?
07:54 < [AD]Turbo> hi there
08:02 < ZacS1234> anyone had any experience with auto reconnect with mongoose?
08:03 < NodeX> auto reconnect to the mongod?
08:04 < ZacS1234> NodeX: yeh auto reconnect to the mongod when the connection drops
08:04 < NodeX> you shouldn't pollute your Mongod with lots of connections
08:04 < NodeX> that's what pooling is for
08:05 < johnnode> anyone had example of jade & express for CRUD website
08:05 < ZacS1234> as far as I can tell from the docs with mongoose 3.x it should be passing the auto_reconnect to the mongodb driver, which should auto reconnect on a disconnect, but I never seem to get any reconnects
08:06 < NodeX> connection management and thread pooling changed alot in mongodb 2.2 - perhaps it's something to do with that
08:07 < ZacS1234> NodeX: I am using the default pool size of 5, I am trying to handle the situation where there is an intermittent connection or the db shuts down and my node app loses its mongo connection, I want to reconnect when the server is back up
08:13 < ZacS1234> any ideas NodeX ?
08:30 < Cogito_Ergo_Sum> hi
08:31 < Cogito_Ergo_Sum> i'd like to ask, does node's main event loop run on the same thread as the event handler ?
08:31 < ferdinandsvehla> Do we have a merge in node.js yet?
08:43 < ferdinandsvehla> Hash/Object
08:46 < chovy> in mongoose, how do i add a collection to a schema that already has an existing doc?
08:46 < chovy> i have a user object already, and i want to add user.friends as an array of users
08:48 < trodrigues> Cogito_Ergo_Sum: short answer: no
08:50 < trodrigues> Cogito_Ergo_Sum: in depth stuff http://www.youtube.com/watch?v=nGn60vDSxQ4
08:51 < Cogito_Ergo_Sum> trodrigues but it would be better to run the event handler on a different thread so that while(1) loops or long running functions wouldn't be blocking
08:51 < Cogito_Ergo_Sum> hm
08:51 < Cogito_Ergo_Sum> you said no
08:51 < trodrigues> Cogito_Ergo_Sum: i think you misunderstood my answer :p
08:52 < trodrigues> you asked if they run in the same thread, and I said that no, they don't
08:52 < Cogito_Ergo_Sum> well then why is a while(1) loop blocking or a long running function?
08:53 < Cogito_Ergo_Sum> for example i want to run a function inside a while(1) loop AND i want to interrupt it, but that's not possible, the only way is to call the function recursively with process.nexttick which is EXTREMELY slow
08:54 < trodrigues> ah well, it also depends on how you write your code, yes
08:54 < trodrigues> i'm not too good at explaining this to be honest but there's a lot of good writing on that stuff. let me try to point you to something
08:55 < Cogito_Ergo_Sum> http://howtonode.org/understanding-process-next-tick
08:55 < Cogito_Ergo_Sum> http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/
08:55 < Cogito_Ergo_Sum> i'm reading this right now
08:55 < Cogito_Ergo_Sum> these*
08:56 < Cogito_Ergo_Sum> i think the first article explains it very well
08:57 < Cogito_Ergo_Sum> "This is why Node is a great fit for I/O bound tasks, and definitely not for CPU intensive tasks."
08:58 < syskk> is there any OAuth 2 server implementation for express/connect?
08:58 < icebox> syskk: OAuth is dead, so it seems
08:58 < icebox> syskk: OAuth2, I mean
08:58 < trodrigues> Cogito_Ergo_Sum: hah, that's true. i was trying to find a certain post but I can't find it right now
08:58 < trodrigues> Cogito_Ergo_Sum: what you can do, if you still want to do that with node, is just create a separate process for that
08:58 < syskk> icebox: well OAuth 1 then. don't most major websites use oauth2 though?
08:59 < icebox> syskk: http://hueniverse.com/2012/07/oauth-2-0-and-the-road-to-hell/
08:59 < trodrigues> you can either create an entirely separate app or use stuff like cluster
08:59 < syskk> icebox: yea read that before, but that doesn't mean everyone agrees with him. i believe both FB and Twitter use oauth2
09:00 < icebox> syskk: well... he was the lead author and editor
09:00 < syskk> icebox: anyways, dont really care about the version actually
09:01 < icebox> syskk: https://github.com/ammmir/node-oauth2-provider
09:01 < icebox> syskk: https://github.com/ciaranj/node-oauth
09:02 < icebox> syskk: node-oauth support oauth1/2
09:02 < Cogito_Ergo_Sum> trodrigues yes i see spawning a new process
09:02 < Cogito_Ergo_Sum> hm but would i be able to interrupt the new process?
09:03 < Cogito_Ergo_Sum> never worked with spawn() yet
09:04 < icebox> syskk: https://github.com/bnoguchi/everyauth
09:07 < trodrigues> Cogito_Ergo_Sum: if you use cluster you can send messages to and from the workers
09:08 < icebox> syskk: eventually http://blog.jeffdouglas.com/2012/04/27/node-js-demo-with-force-com-rest-api-oauth-express/
09:08 < syskk> icebox: im already using passport.js for oauth authentication. but now i want my web app to become an oauth provider. node-oauth2-provider looks good
09:09 < icebox> syskk: nice passport.js
09:19 < lyetz> Could anyone tell me how to call a function that's in another file?
09:20 < lyetz> I setup generic-pool in db.js, yet when I call it from another file (after adding a require line), I get 'Object has no method'
09:30 < icebox> lyetz: did you export the function you call in db.js?
09:31 < lyetz> I think that might have been my problem, icebox
09:31 < lyetz> I was calling module.exports after defining the function
09:31 < lyetz> rather than var pool = module.exports = blablabla
09:31 < icebox> lyetz: see http://nodejs.org/api/modules.html#modules_modules for an example
09:32 < lyetz> thanks icebox 
09:32 < icebox> lyetz: you are welcome
10:08 < whitman> Should process.title get displayed when running `ps`?  Currently "node" is being displayed instead.
10:11 < dileep> i have some problem in runnning this code'
10:12 < dileep> like cannot find module: /home/dileep/blog.js att Function.Module._resolve Filename
10:13 < dileep> plz tell me
10:13 < DCdeBrabander> back
10:13 < dileep> anybodyy there tto help me ou
10:14 < dileep> hello is there node.js developer 
10:14 < RLaa> whitman, you on osx?
10:14 < whitman> RLaa, Ubuntu 12.10
10:14 < dileep> ubuntu
10:14 < RLaa> whitman, i remember reading it was broken on some os
10:15 < RLaa> it should work fine on linux tho
10:15 < whitman> RLaa, yea I've seen that but nothing about Ubuntu / Linux
10:15 < dileep> yup
10:15 < RLaa> whitman, node version?
10:15 < dileep> latest
10:15 < dileep> 0.8.9
10:15 < RLaa> dileep, what's your problem
10:15 < dileep> cannot find module: /home/dileep/blog.js att Function.Module._resolve Filename(module.js:338:15)0
10:16 < whitman> RLaa, 0.8.12
10:16 < dileep> like this
10:16 < dileep> yeah that one.12
10:16 < arvin_> dileep, does the file exist and have read permissions
10:16 < arvin_> ?
10:16 < dileep> yes
10:17 < RLaa> dileep, how you require() it?
10:17 < dileep> i  am tryingg his code from   https://github.com/furtivefelon/blog.js
10:17 < dileep> i am running that application
10:18 < arvin_> "open blog.js, and edit BLOG_PREFIX to the full path to the blog.js folder."
10:19 < arvin_> from his documentation... have you done that?
10:19 < dileep> Rlaa, i am simply put that code in to my virualbox ubuntu,but the following kind of error comes to me
10:20 < dileep> arvin,yeah i had done all the things written on that
10:20 < arvin_> okay, what's the directory where you've put the code?
10:21 < dileep> arvin,      /home/dileep/blog.js
10:21 < RLaa> aww, why not put configuration into a json file
10:22 < dileep> Rlaa,mean what u wanna to say
10:24 < arvin_> dileep, when you get that cannot find module error, can you see the full stack trace and tell me the file/line number of the require() call?
10:28 < dileep>  Function.Module._resolverFilename(module.js:338:15) at Function.Module._load(module.js:280:25) at Module.runMain (module.js:492:10) at process.sttartup.processNetTick.proceess._tickCallback(node.j:244:9
10:28 < dileep> arvin check this outt plz
10:30 < RLaa> uh, this code seems to contain lot of global variables
10:30 < arvin_> wait a second, /home/dileep/blog.js is a directory right?
10:30 < RLaa> why use it at all?
10:31 < RLaa> i have no idea
10:31 < arvin_> try running node blog.js/blog.js
10:31 < dileep> arvin ,yyes right directoryy is
10:31 < arvin_> you have to give a filename not a directory name
10:32 < dileep> arvin,mean file name
10:33 < arvin_> are you typing "node blog.js" to start the application?
10:33 < Cogito_Ergo_Sum> trodrigues even with a cluster the problem persists: if the child process is on a while(1) loop ( or long running function ) it CANNOT get messages from the parent for interrupting etc
10:33 < arvin_> try "node blog.js/blog.js"
10:33 < dileep> filename is blog.js and am running via node blog.js
10:33 < arvin_> or do a "cd blog.js" before your "node blog.js"
10:34 < dileep> yeah do that
10:36 < dileep>  cannot find module error ./underscore/undersscore
10:36 < dileep> arvin can u please check it through tem iewer
10:36 < arvin_> no i'm afraid i can't do that
10:37 < dileep> why
10:37 < dileep> plz
10:37 < arvin_> the problems you're facing are related to using the unix command line and using git
10:38 < arvin_> please ask in #ubuntu or #git, you'll get better answers there
10:38 < arvin_> you need to do these steps: "cd blog.js; git submodule init; git submodule update"
10:39 < arvin_> by the way I'd recommend against using the furtivefelon/blog.js code, it doesn't seem to be an active project
10:40 < dileep> Submodule underscore() registered for path undersocre
10:40 < dileep> error
10:43 < SomeoneWeird> lol @ topic
10:43 < arvin_> that doesn't seem to be an error, try running it now.
10:43 < trodrigues> Cogito_Ergo_Sum: oh, right. well that makes sense. you can probably only stop it in between iterations of that loop. i guess without understanding the problem better I can't really tell you what's the best way to solve your problem :(
10:44 < dileep> arvin it is the error coz it isnot update
10:44 < dileep> na
10:45 < arvin_> i don't really know, never used git submodules
10:45 < SomeoneWeird> don't use a project that isn't active, in any case
10:45 < arvin_> you should ask in #git what that error means
10:45 < SomeoneWeird> it's probably full of security bugs
10:46 < dileep> Ok
10:46 < arvin_> yup, like SomeoneWeird said, you probably shouldn't use that project... check for things that have been updated recently
10:47 < dileep> i just wanna run that code... to learn
10:48 < SomeoneWeird> learn from something better :)
10:50 < dileep> hey If u have some better codes to learn  please  mail me
10:51 < dileep> arvin,SomeoneWeird please help me
10:56 < syskk> is there any web based oauth client out there i can use to test my oauth server?
10:59 < graeme_f> Can anyone explain why I might want to pipe a stream back to itself like this? https://github.com/substack/stream-handbook#duplex I just don't grok… :/
11:01 < graeme_f> i suppose b could be transforming the data and then it gets sent back...
11:01 < dileep> arvin,someoneweird,,,, go the same problem with     https://github.com/endtwist/AjaxIM
11:02 < deoxxa> graeme_f: basically that's the complement of a "through" stream
11:02 < deoxxa> graeme_f: with a through stream, whatever you push in the "write" side comes out the "read" side (probably a little differently)
11:03 < deoxxa> graeme_f: with a duplex stream, the write and read parts of the stream aren't necessarily related
11:03 < arvin_> dileep, got to go do some work now, but if you want to get started with node try the examples from express.js
11:03 < graeme_f> deoxxa: ah yes, maybe that's what is making my brain hurt
11:03 < deoxxa> graeme_f: so writing to it isn't specifically going to eventuate in data to read from it
11:04 < arvin_> also if you're more comfortable with windows, use node on windows
11:04 < arvin_> i think most stuff will work
11:04 < aandy> for basic web stuff, it works just fine on windows, yeah
11:04 < dileep> k
11:05 < arvin_> good luck!
11:05 < aandy> the linux depenend stuff might not. e.g. if you need tail, you'll need to find a win bin for it. same with some stabilities, e.g. fs.watch, but mostly it will run ok
11:05 < dileep> thanku arvin may i have ur email id plz
11:06 < graeme_f> deoxxa: cheers. i *think* that has helped… ;)
11:06 < deoxxa> graeme_f: yay!
11:07 < graeme_f> deoxxa: I'm trying to understand what is happening server-side in this example from substack https://github.com/substack/stream-handbook#roll-your-own-socketio
11:07  * deoxxa looks
11:08 < graeme_f> var stream = parser.pipe(shoe('/sock')).pipe(parser); <== finding this very hard to understand
11:08 < graeme_f> deoxxa: oops i mean browser-side
11:09 < deoxxa> hokay
11:09 < deoxxa> well
11:10 < graeme_f> think it's just weird because the start is in the middle ;)
11:11 < graeme_f> sock emits data, it gets parsed, then emitted as an event AND gets piped back to shoe?
11:11 < deoxxa> ok that's actually a few things going on at once
11:11 < CestSebastian> hey guys, how does require work? for instance i have a.js with require('./b'); require('./c'), and in c.js i have require('./b') again, because c.js could be included from other scripts as well, i there a better way to do this?
11:11 < deoxxa> graeme_f: hold on, let me read up on JSONStream before i say the wrong thing here ;)
11:12 < graeme_f> deoxxa: lol, hope it helps ;)
11:13 < graeme_f> deoxxa: as i understand it, it subscribes to data events that come with arrays of bytes, parses them, and emits what it parsed as a data event with an object
11:13 < askabt> CestSebastian, that will work as expected, both a.js and c.js will get the same instance of the b.js module
11:14 < askabt> b.js runs only once
11:15  * graeme_f tries not to say anything inappropriate about "b.js".
11:15 < askabt> lol :)
11:15 < deoxxa> graeme_f: oh dear, now my head is broken
11:15 < deoxxa> i no longer understand streams
11:15 < SomeoneWeird> we knew that already deoxxa 
11:15 < deoxxa> that JSONStream thing has got me puzzled
11:16 < graeme_f> deoxxa: try turning it off and turning it back on again?
11:16 < deoxxa> why is it being piped -into- shoe?
11:16 < graeme_f> deoxxa: *exactly*
11:16 < Ophidian> hello
11:17 < graeme_f> it looks like it's unnecessary as I don't see it eing read on the server side - maybe substack can enlighten us :)
11:17 < roryclw> hi. Is there a UK/London version of http://jobs.nodejs.org/ ? I have a prototype project for a realtime system for hospital emergencies I could do with some help with.
11:18 < graeme_f> i think the sample needs a bit of editing
11:18 < deoxxa> yeah...
11:18 < eddyb> wow http://devongovett.github.com/png.js/ https://github.com/devongovett/png.js/
11:18 < eddyb> it can even load animated PNGs?
11:18 < graeme_f> unfortunately I used it as the basis for my port from socket.io :/
11:19 < graeme_f> it works now, but i certainly learned a lot more than i wanted to along the way ;)
11:20 < Ophidian> i have an problem with an object literal containing an number attribute wich is incremented from an function of this object by this.number++ but number keeps alsways 0. can anyone help me what i'm doing wrong?
11:20 < deoxxa> graeme_f: well, i can't help you with that example, but a good fictional example is piping two sockets into each other
11:21 < deoxxa> graeme_f: imagine you have socket a and socket b - both are duplex streams as they're readable and writable, but the actions aren't necessarily linked
11:21 < graeme_f> eddyb: ironically the image in the corner doesn't load ;)
11:22 < deoxxa> graeme_f: if you a.pipe(b).pipe(a), that's doing `a.pipe(b); b.pipe(a);', so writing the output of `a' into the input of `b' and vice-versa. that'd be a really simple proxy of sorts.
11:22 < graeme_f> deoxxa: yeah, i think i'm getting it now
11:22 < deoxxa> graeme_f: it doesn't make sense if neither of them are duplex streams though, because then you'd just get a feedback loop
11:22 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:22 < roryclw> deoxxa: sorry, just a question. If the second pipe is on pause is there the possibility of running out of memory very quickly?
11:23 < deoxxa> roryclw: no, they should both end up being paused if that's the case
11:23 < eddyb> looking at the coffeescript code for png.js and the resulting JS code makes me think coffeescript is so nice, even if I hate that syntax
11:23 < roryclw> deoxxa: cool. I was confused about that point from Dominic Tarr's video from LNUG
11:24 < deoxxa> roryclw: the .pipe() method wires up all the "drain", "data", etc events correctly so backpressure is maintained
11:24 < graeme_f> deoxxa: i think chaining the pipes together like that is really confusing in that case
11:24 < graeme_f> deoxxa: i understand it easily if you split it into 2 lines
11:25 < roryclw> deoxxa: that really is extremely interesting and I hadn't thought about it when using bash pipes although I do that all the time
11:25 < graeme_f> deoxxa: chaining pipe()s suggests that the same data is flowing through, but it isn't necessarily true in the duplex case
11:26 < deoxxa> roryclw: the key is that when you write() to a stream, it'll tell you whether or not to keep writing or to back off for a while by returning true or false. after returning false, it'll tell you "hey i'm ready for more data" by emitting "drain". by wiring up the "write() returned false" case of the target stream to the pause() method of the source stream, and the "drain" event of the target stream to the resume() method of the source stream, you get thi
11:26 < deoxxa> graeme_f: yeah, that is a bit confusing
11:27 < deoxxa> graeme_f: you tend to read things left to right and assume it's one unbroken line
11:27 < deoxxa> graeme_f: now that i think about it, i find myself splitting things like that into two separate statements
11:27 < graeme_f> deoxxa: yep. maybe it's not so bad once you've seen it a few times?
11:27 < Ophidian> someone?
11:27 < roryclw> deoxxa: that makes complete sense if you think of it the other way around; which is you can't process data faster than you can read it off disk
11:28 < deoxxa> roryclw: exactly - but more importantly, you don't want to generate data any faster than you can put it onto disk, lest you end up blowing out your memory usage
11:28 < roryclw> graeme_f: nice example at http://www.forwardtechnology.co.uk/videos/50310116  minute 20
11:29 < graeme_f> roryclw: ooh cheers :)
11:29 < roryclw> deoxxa: so are Node gurus using streams a lot because otherwise you could have memory/io "tailbacks"?
11:30 < deoxxa> roryclw: that's one part of it, but i think a lot of it is just that streams make a heck of a lot of sense for some types of applications
11:31 < Ophidian> no one can/want help me?
11:31 < roryclw> deoxxa: yeah, I guess I can see that particularly from the point of view as Node as a cross-app router
11:31 < graeme_f> roryclw: they're a good fit for your typical node app that connects services and stuff together
11:32 < deoxxa> Ophidian: can you make a gist demonstrating your problem?
11:32 < graeme_f> looks like there are a few talks about streams in dublin this week… can't wait :D
11:32 < wltsmrz> Node
11:32 < wltsmrz> Node's HTTP req / res are streams, incentivizes using them quite a bit.
11:32 < Ophidian> i try it
11:33 < roryclw> I'm trying to find some Node freelancers, ideally in London : any thoughts?
11:34 < wltsmrz> How about remote freelancers? :)
11:34 < graeme_f> i'm trying to find a permie dev just outside london, it's proving tough so far :/
11:34 < wltsmrz> There is a freelancing thread on Hacker News, might want to make a post.
11:34 < roryclw> wltsmrz: yeah, that is possible. 
11:34 < roryclw> wltsmrz: I'll try that, thanks
11:35 < wltsmrz> http://news.ycombinator.com/item?id=4596379
11:35 < roryclw> wltsmrz: much appreciated
11:36 < Ophidian> deoxxa: https://gist.github.com/3898772
11:38 < roryclw> deoxxa: thanks for the chat, and the point about backpressure. Cheers
11:40 < CestSebastian> thanks, askabt 
11:40 < deoxxa> Ophidian: seems to work for me
11:41 < Ophidian> deoxxa: hm ok
11:41 < edmellum> I've ended up with a stream of streams. Is there a recommended way of doing that? Looking at node-tar which has an event emitter that emits custom events which contain streams.
11:42 < edmellum> I've ended up in a situation where I need to make a stream of streams rather, I'm not using it.
11:42 < Ophidian> deoxxa: but it isn't :( for me
11:43 < graeme_f> edmellum: what do you need to do with the streams?
11:44 < edmellum> graeme_f: Pipe them to other streams. I'm implmenting the stream out of streams by the way, not just using it.
11:46 < Ophidian> deoxxa: ok seems to be some other problem this example runs as expected thanks anyway
11:46 < deoxxa> Ophidian: good luck!
11:46 < Ophidian> thx
11:46 < graeme_f> edmellum: should just work, shouldn't it? e.g. you could write each stream to a file (i.e. extract the files from the tar)
11:47 < Topcat> so you're not supposed to use global modules now is that right? does that apply with modules like express where --global gives you things like scaffold generating. Is there a preferred way? 
11:48 < deoxxa> Topcat: globally installing a package is useful only in the case where the package provides a command line utility, such as with express
11:48 < edmellum> graeme_f: Oh yeah, it should totally work, but I'm wondering is if there is a recommended way to implement it is. Using an event emitter emitting streams works.
11:48 < graeme_f> Topcat: your package should work without any globals - you can still use them as tools though
11:48 < deoxxa> Topcat: you should still install the package locally, however, if you are using it as a library in your application
11:48 < graeme_f> edmellum: sounds neat to me :)
11:49 < deoxxa> edmellum: do you want it to be an actual stream?
11:49 < Topcat> I thought it was something like that. Makes sense Cheers
11:49 < deoxxa> edmellum: i.e. with .pause() and .resume() etc?
11:49 < deoxxa> edmellum: where the "data" event is still another stream, of course
11:50 < edmellum> deoxxa: I thought that would make most sense, but then I'd need to actually serialize the stream. Since Isaac doesn't do that with Tar I assumed it was bad.
11:50 < deoxxa> edmellum: you don't need to serialise it - you can just emit a data event where the argument isn't a buffer
11:51 < deoxxa> edmellum: everything in node core emits buffers, but that's not a required behaviour of a stream
11:51 < edmellum> deoxxa: stream.emit('data', substream) didn't work for me
11:51 < deoxxa> well whatever's reading from it has to be able to handle the data event type
11:51 < deoxxa> so you won't be able to pipe it into a file, for example
11:52 < deoxxa> not directly, anyway
11:52 < deoxxa> it's confusing because of the nesting of streams here, but consider the case of objects
11:53 < deoxxa> object_stream.on("data", function(object) { console.log(JSON.stringify(object)); });
11:53 < edmellum> deoxxa: I must have misjudged the error I got. I thought it was saying stream.js didn't like the object.
11:53 < deoxxa> object_stream.write("make an object out of me")
11:53 < deoxxa> in that case you have a stream that emits objects and accepts strings
11:54 < edmellum> I should just read stream.js so I know what's really going on I guess. Sort of waste since it's being changed, but still.
11:54 < deoxxa> heh
11:55 < deoxxa> anyway, the base Stream class doesn't care what you're write()ing or emit()ing
11:55 < edmellum> deoxxa: Awesome, thanks for the help! :D
11:55 < deoxxa> no problem :)
11:55 < deoxxa> hooray streams!
11:56 < edmellum> I feel like I'm approaching stream nirvana now with streaming streams
11:57 < deoxxa> edmellum: careful there, icarus
11:58 < edmellum> deoxxa: So true, especially since I am now realizing this might not work for my purposes. Might need some extra metadata.
11:58 < deoxxa> heh
11:59 < edmellum> I guess it'll still work. Just need to stream an object with the metadata and the stream in it.
12:05 < phrearch> hi
12:06 < phrearch> is it possible to import node modules from a certain namespace?
12:06 < phrearch> like an installed module registers itself in an application, by being into the namespace
12:07 < phrearch> i would like my application to detect which modules are installed in node_modules
12:07 < phrearch> not sure what the most common way is to do this
12:08 < CestSebastian> is there a solution in node to create a synchronous request? i have google-d the issue, but there only seems to be 3rd party solutions
12:12 < SomeoneWeird> no CestSebastian 
12:12 < SomeoneWeird> you'll have to use a 3rd party thing
12:17 < CestSebastian> ok, thanks SomeoneWeird 
12:22 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:53 < graeme_f> deoxxa: https://github.com/substack/stream-handbook/pull/17 ;)
12:54 < deoxxa> \o/
12:54 < yawnt> \ò/
12:54 < yawnt> ohnowait
12:54 < yawnt> no github
12:54 < yawnt> :'(
12:54 < deoxxa> haha
12:54 < yawnt> DUDEE
12:54 < yawnt> FEEL MAH PAIN
12:54 < deoxxa> you should be studying anyway
12:54 < graeme_f> ouch
12:54 < deoxxa> gb/2 books
12:54 < yawnt> deoxxa: i'm having lesson atm
12:54 < deoxxa> do your homework
12:54 < yawnt> they're talking bout factorial
12:54 < deoxxa> rofl
13:21 < phrearch> hm __dirname should contain the current script execution dir?
13:21 < phrearch> its undefined when i check for it
13:21 < phrearch> ow ehm nm. its not 
13:22 < pachet> was about to be like, wat
13:23 < phrearch> sorry, my bad
13:39  * rounce^work clouts phrearch 
13:39 < rounce^work> __ !== _
13:39 < rounce^work> =D
13:39 < rounce^work> HAI
13:41 < therealkoopa> What's the best way to take an array [1, 'foo', 2, 'bar', 3, 'widget'] and transform it into {1: 'foo', 2: 'bar', 3: 'widget']
13:47 < phrearch> hey rounce
13:47 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:51 < superjoe> what's a good async flow control lib that works in --use-strict mode?
13:51 < superjoe> caolan/async does not
13:51 < jetienne> any idea of a good name for a library doing function attributes ? current one being functionattr.js
13:52 < eddyb> therealkoopa: for(var i = 0; i < arr.length; i += 2) obj[arr[i]] = arr[i+1];
13:52 < jetienne> superjoe: is that the same as 'strict-mode' in browser ?
13:52 < pyrotechnick> jetienne: i called mine funky
13:52 < eddyb> what's strict-mode?
13:52 < superjoe> jetienne, not sure. it's a v8 parameter that you pass to node with --use-strict
13:52 < eddyb> "use strict"; // maybe?
13:53 < superjoe> https://github.com/caolan/async/issues/189
13:53 < pachet> eddyb: yes
13:53 < pyrotechnick> jetienne: http://www.visca.com/regexdict/
13:53 < jetienne> pyrotechnick: ok
13:53 < jetienne> \
13:53 < eddyb> that's not "in the browser"
13:53 < pyrotechnick> these help me alot
13:53 < pachet> its just referring to the es5 strict mode sentinel
13:54 < jetienne> superjoe: i got an async lib.. it never caused trouble… but i never explicitly tried
13:54 < superjoe> anyway, whatever the fuck you want to call it, is there an async library that doesn't break when it's on?
13:55 < jetienne> https://github.com/jeromeetienne/gowiththeflow.js 
13:55 < jetienne> and i use three.js all the time .. which is in strict mode… 
13:55 < jetienne> so if you fancy to try i would be interested by the result
13:56 < pyrotechnick> jetienne: i also used to use google wonder wall but they ditched it ;(
13:56 < pyrotechnick> wheel*
13:56 < pyrotechnick> lol
13:56 < superjoe> jetienne, I like how small it is. but why do I have to instantiate it to use it?
13:57 < eddyb> superjoe: I just looked at the code, you can require it from node.js
13:57 < superjoe> eddyb, looked at what code?
13:57 < eddyb> superjoe: https://github.com/jeromeetienne/gowiththeflow.js/blob/master/gowiththeflow.js#L25
13:58 < jetienne> superjoe: one need to maintain a context. timers, result of the previous par() etc… the intensiation splits the context, thus you can have multiple flow without issue
13:59 < superjoe> I'd rather that instantiation was hidden under the covers
14:01 < jetienne> I'm not sure how this could be done shorter than ```Flow().seq()```
14:01  * pachet puts that in the pickup line dictionary
14:02 < superjoe> anyway, it's still better than async since it works with harmony and strict mode turned on.
14:02 < superjoe> thanks
14:05 < mscdex> strict mode is overrated ;-)
14:06 < draginx> Hey superjoe I was wondering if there was a way to *not* log anything from naught
14:06 < superjoe> draginx, not currently. feel free to make an issue
14:07 < draginx> superjoe: will do thanks :)
14:07 < superjoe> draginx, curious, why would you desire this?
14:08 < draginx> superjoe: if I get a ton of hits its less I/O to write to a file
14:08 < draginx> performance essentially even if it's writing to a stream asynchronously
14:08 < draginx> and log files cna get *huge* no?
14:08 < superjoe> draginx, you know you can just remove the log statements right?
14:09 < superjoe> by default naught rotates log files after 10 MB
14:09 < draginx> Oh I see it'll only write if I want to? :)
14:10 < superjoe> draginx, well it's simply directing your stdio. so if you don't write to stdout or stderr... nothing goes in the log file
14:10 < draginx> ahhh ok cool :) now I need to figure out expressjs a little bit more to see if I can get rid of these things :P
14:11 < superjoe> you probably app.use'd a logging middleware which you don't want
14:11 < pachet> used and app.used
14:12 < draginx> app.use(express.logger('dev')); <-- this?
14:12 < superjoe> yep
14:12 < draginx> Im assuming it only logs during development NODE ENV trhough right?
14:12 < draginx> it'll just be silent if it were set to production
14:13 < superjoe> I'm not familiar with that middleware. I'm sure the source is simple
14:16 < superjoe> draginx, read the docs here: https://github.com/senchalabs/connect/blob/master/lib/middleware/logger.js
14:16 < superjoe> ur doin it wrong
14:16 < draginx> thanks :D
14:16 < superjoe> np
14:29 < TehShrike> heh. http://www.nczonline.net/blog/2012/10/16/does-javascript-need-classes/
14:30 < pyrotechnick> the real question is: does the tech industry need to continue the circlejerk?
14:31 < pyrotechnick> aren't we above that?
14:31 < syskk> is there a quick way to find which npm packages i have installed but that are not in my package.json?
14:31 < TehShrike> pyrotechnick: which circlejerk?
14:32 < pyrotechnick> the "this is what X does for me so it can't possibly Y for you, you Z" circlejerk
14:32 < TehShrike> Is that in relation to the link I posted, or something else?
14:33 < pyrotechnick> it's another brick in the wall
14:33 < pyrotechnick> not that i blame anyone getting caught up in it
14:33 < TehShrike> I don't follow
14:33 < pyrotechnick> it's becoming unavoidable
14:33 < TehShrike> What is
14:33 < TehShrike> I don't even know what you're talking about
14:33 < pyrotechnick> soon you'll need a licence to code under duress
14:34 < TehShrike> Are we having a non-sequitur party? :-x
14:34 < TehShrike> But then I put on pants, and my code looked way brighter!
14:34 < pyrotechnick> no you
14:34 < TehShrike> NO UUUUUUUUU!!11
14:34 < Sh4rK> hi
14:34  * TehShrike coughs
14:34 < pyrotechnick> nein, du
14:35 < TehShrike> syskk: I think so, but I don't know how.
14:35 < Sh4rK> I have a package.json in a directory (just starting a project) with dependencies in it.
14:35 < Sh4rK> When I tun npm install, shouldn't it download these dependencies into the folder the package.json is in?
14:36 < Sh4rK> (and where I run npm install)
14:36 < syskk> Sh4rK: in the folder node_modules
14:36 < TehShrike> Well, in the folder where the package.json is
14:36 < Sh4rK> yes, but under the cwd
14:36 < syskk> Sh4rK: you run it in same directory as your package.json
14:36 < TehShrike> npm install .
14:36 < Sh4rK> but instead, it creates a folder named this folder in the global node_modules folder
14:37 < Sh4rK> and installs things there
14:37 < TehShrike> Did you use -g?
14:37 < Sh4rK> no
14:37 < syskk> or maybe you have an older version of npm installed.. this used to be the default behavior a long while ago IIRC
14:38 < Sh4rK> is there an opposite switch to -g?
14:38 < syskk> npm --version;
14:38 < Sh4rK> I just dl-ed the newest node and npm
14:38 < Sh4rK> 1.1.63
14:38 < TehShrike> Depending on your OS and the current alignment of the planets, you might want to throw a . in there to specify your cwd.
14:38 < Sh4rK> I tried that too
14:38 < Sh4rK> I'm on windows btw
14:38 < syskk> i recall its possible to install global by default. this would probably be in ~/.npmconfig or some file like this
14:38 < TehShrike> Then it worked, and you're imagining everything!
14:39 < TehShrike> Or it could be one of the useful things syskk suggests
14:39 < syskk> lol
14:39 < TehShrike> But if you're rolling with the defaults, I would expect it to work fine.  I run on Windows too.
14:39 < Sh4rK> syskk, you win
14:40 < Sh4rK> I left it there some time ago accidentally :D
14:40 < Sh4rK> thx
14:40 < syskk> eheh :)
14:56 < eddyb> pffft
14:56 < eddyb> png.js is broken :(
15:04 < icebox> I have been compiling a native thirdy-party module... how to overwrite common.gypi? I need to add a few flags to the compiler.
15:06 < nathan7> icebox: edit it and npm rebuild
15:07 < icebox> nathan7: no... I have been installing that module
15:08 < icebox> nathan7: I mean 'npm install contextify' and I need to add to the compiler options /EHsc
15:08 < bradleymeck> isaacs: do you ever set argv for npm's scripts?
15:09 < icebox> nathan7: I should override 'ExceptionHandling' with 1, because now it is 0
15:09 < nathan7> icebox: It probably uses external CCFLAGS
15:10 < icebox> nathan7: I am on a windows box
15:10 < ashnur> i thought it's an ice box
15:11 < nathan7> icebox: You should switch to a linux system and run IceWM
15:11 < nathan7> *rimshot*
15:11 < icebox> ashnur: ice box mission was another one :)
15:13 < icebox> this is the "reference" for the authors of the modules: https://github.com/TooTallNate/node-gyp/issues/26
15:14 < icebox> I thought there was a sort of user common.gypi
15:15 < icebox> or theris this open issue: https://github.com/TooTallNate/node-gyp/issues/110
15:31 < Industrial> I want to close my database instance as a cleanup activity when my NodeJS process gets exited. How do I do that?
15:31 < Industrial> oh, process.on 'exit'.
15:32 < MI6> joyent/libuv: Bert Belder multisig * aebd55d : unix: support signal handlers outside the main loop (+4 more commits) - http://git.io/vt6IFg
15:40 < cpetzold> does anyone know of any c++ addon examples that expose a class you can subclass in js?
15:40 < niggler> are there javascript built-ins for manipulating arrays of arrays?
15:40 < niggler> like taking an array of arrays and pulling the first element from each
15:44 < pyrotechnick> pew pew http://dailyjs.com/2012/10/15/preparing-for-esnext/
15:52 < MI6> joyent/libuv: Bert Belder multisig * c3bf03c : unix: support signal handlers outside the main loop - http://git.io/FeeeCw
15:56 < syskk> im getting a weird error: TypeError: Object #<Object> has no method 'existsSync'
15:56 < syskk> only getting this on my server, my local machine is fine
15:58 < CoverSlide> syskk: what version are you running on your server?
15:58 < syskk> v0.6.12
15:58 < syskk> the ubuntu package nodejs
15:58 < syskk> weird, cause i was running the exact same code earlier and didnt have this problem
15:58 < syskk> maybe someone reinstalled the package or something
16:00 < CoverSlide> well fs.existsSync is present on v0.8.x, but not on v0.6.x
16:00 < syskk> ah. strange
16:00 < syskk> im sure it was working earlier
16:00 < CoverSlide> I'm assuming you're trying to call fs.existsSync
16:00 < syskk> where can i get version specific info of node.js
16:00 < syskk> yep
16:01 < peterschmidler> I just installed jade via "npm install jade" without errors, but when I run "jade index.jade" from the command line I get "-bash: jade: command not found" What can I do?
16:01 < CoverSlide> http://nodejs.org/docs/
16:01 < syskk> thanks
16:02 < CoverSlide> peterschmidler: you have to do a global install if you want to use executables of your modules
16:02 < syskk> is there any more up to date package for ubuntu or should i compile
16:02 < CoverSlide> npm -g install jade
16:02 < draginx> http://pastie.org/private/gu4bnpwhqpqn1sskye5pkq would this not module.export for any reason?
16:02 < CoverSlide> syskk: use this PPA: https://launchpad.net/~chris-lea/+archive/node.js/
16:02 < CoverSlide> although I recommend compiling
16:03 < draginx> I fixed the three dots thing
16:03 < peterschmidler> CoverSlide: Thx 
16:03 < draginx> JSON is valid too in those files
16:04 < CoverSlide> ... since when is three dots a recognized path?
16:04 < CoverSlide> where do you expect the three dots to refer to
16:06 <@isaacs> bradleymeck: no.
16:06 < CoverSlide> draginx: also, this is asynchronous, so even if it did work, you wouldn't be able to use it immediately. the module.exports wouldn't get populated until after the fs.exists callback returned
16:07 <@isaacs> bradleymeck: it's just whatever the script says
16:07 < draginx> CoverSlide: i fixed the three dots
16:07 < draginx> and OK I see, so call existsSync? :/
16:07 < camwest> Hey folks, has anyone successfully deployed a heroku app with a private repository as a dependency to heroku?
16:07 < CoverSlide> yeah
16:08 < CoverSlide> var exists = fs.existsSync( etc., etc.
16:08 < bradleymeck> camwest: use bundledDependencies
16:09 < draginx> CoverSlide: thanks dude :)
16:09 < camwest> bradleymeck: I looked at that. Do I need to commit node_modules/bundled_dependency to the repo then?
16:09 < bradleymeck> camwest: during pushing yes
16:09 < camwest> bradleymeck: so I can just make a pre-commit hook that copies it over and commits it or something?
16:09 < bradleymeck> sure
16:10 < camwest> bradleymeck: ok thanks, that's at least a plan =)
16:10 < camwest> bradleymeck: I know npm supports ssh for dependencies, any idea if it supports basic auth?
16:11 < bradleymeck> camwest: for http it does, but you can do a preinstall i guess if its something else
16:11 < camwest> so I'd do something like "git+https://username:password@github.com/.…" ?
16:12 < bradleymeck> dont need the git+
16:15 < camwest> https://gist.github.com/3900291 is my package.json. It's generating a 404 not found on the private repo
16:17 < superjoe> I need the equivalent of the unix command `which`  as a node module. does it exist?
16:17 < superjoe> hot damn it does
16:17 < superjoe> by isaacs, nonetheless
16:18 < superjoe> s/nethe/ /
16:19 < superjoe> <3
16:19 < JohnMcLear2> heh
16:24  * brianc waves
16:25 < rybnik> Hi there, the #mongoosejs is somewhat idle… so I'll ask here… anyone care to give a few hints on the problem described here https://gist.github.com/3900332 ? Thanks!
16:29 < jergason> rybnik: i am confused by your question
16:29 < jergason> rybnik: just make trainSamples of type {} in your schema
16:29 < jergason> and you can put whatever you want in there
16:30 < jergason> alternatively, set strict: false in the schema options
16:30 < jergason> and you can save properties not defined on the schema
16:30 < rybnik> jergason: I know, but I would like to enjoy some validation cosiness without having to write a custom preSave method to enforce validation
16:30 < rybnik> *to enforce proper format
16:31 < jergason> rybnik: as far as I know, there is no way to have a field defined on your schema that is dynamically validated based on the value of another field
16:31 < jergason> so you are going to have to do custom stuff anyways
16:31 < jergason> if you want validation
16:31 < noden00b> confused re: current status of UTF-8 support outside the BML.  I thought JS spec said UCS-2 and only UCS-2, and V8 devs said they wouldn't support 4-byte encodings.. but I just read that 0.8.x has support?  can anyone explain status?
16:32 < jhsto> Is it possible to mask all websocket data?
16:33 < rybnik> jergason: I was more hopping to get some basic format enforcement, by let's say: The trainSamples will have variable amount of properties in the following format String:Number 
16:33 < rybnik> jergason: Does that makes any sense to you ?
16:33 < jergason> rybnik: ah yeah
16:34 < jergason> hrrm still not sure how you would do that though
16:34 < jergason> why do libsvm stuff in js?
16:34 < jergason> i dabble in machine learning but am trying to learn more
16:36 < Sh4rK> hi again
16:36 < Sh4rK> I would like some advice
16:37 < Sh4rK> I have to create a web app that is basically a database manager
16:37 < Sh4rK> It needs to present tables
16:37 < Sh4rK> and let people to edit stuff
16:37 < Sh4rK> and be pleasant to use
16:37 < Sh4rK> what framework should I use?
16:38 < rybnik> jergason: I'm developing a speechAnalytics platform and the project core language is Javascript, me and my team have already gone a long way writing "native" PCM data interpreters and implementing hi performance filters such as the turlach runmed filter so it's quite natural for the project to have the classification tier wrapped in Javascript.
16:38 < jergason> oh yes
16:38 < jergason> i know some of those words
16:38 < Arjit> Hi everyone, I am able to run a code on my local server but while trying to run it on appfog.com, I am facing problems. Could someone please try and run this code on their Node.Js web-host please? https://github.com/lrvick/grfety
16:39 < jergason> rybnik: when you say speech analysis, you mean speech to text stuff?
16:40 < rybnik> jergason: I mean, gender estimation, speech endpoint extraction, … and well… also we've built some ASR capabilities on top of Julius 
16:41 < niggler> >>> new Error().stack
16:41 < purr> niggler: (string) 'Error\n    at irc:1:6\n    at Sandbox.execute (/srv/irc/purr/lib/sandbox/v8/shovel.js:56:12)\n    at Object.run (evalmachine.<anonymous>:386:12)\n    at Sandbox.<anonymous> (/srv/irc/purr/lib/sandbox/v8/shovel.js:45:38)\n    at Socket.<anonymous> (/srv/irc/purr/lib/sandbox/v8/shovel.js:27:13)\n    at Socket.emit (events.js:64:17)\n    at Pipe.onread (net.js:35…
16:41 < drunkgoat> Sh4rK: this can be achieved with almost any framework... 
16:42 < jergason> rybnik: speech endpoint extraction - is that detecting boundaries between words?
16:42 < jergason> google fails me
16:42 < Sh4rK> but, for example can I use socket.io and bootstrap with each one?
16:43 < Sh4rK> or, can I actually use socket.io with bootstrap?
16:43 < jergason> Sh4rK: those two technologies are at completely different layers
16:43 < jergason> Sh4rK: bootstrap is a CSS framework
16:43 < jergason> to help you style your site
16:43 < jergason> sortof
16:44 < rybnik> jergason: ln a nutshell: Speech signal might have 3 kinds of data, voiced frames, unvoiced frames and silence frames, the goal of endpoint extraction is to separate voiced frames from unvoiced or silence frames.
16:44 < jergason> Sh4rK: socket.io is a client and server component to let you do real-time communication
16:45 < jergason> Sh4rK: that is like asking "I want to make a painting. Can I use oil paints and a paint studio together?"
16:45 < rybnik> jergason: a friend just solved the issue it's on the gist comments if it interests you…. actually it was not that hard… just needed some scheme readjustment …. 
16:45 < CoverSlide> rybnik: source?
16:45 < jergason> rybnik: sure, always down to learn more about mongoose
16:45 < rybnik> CoverSlide: for the gist?
16:46 < jergason> CoverSlide:  https://gist.github.com/3900332
16:46 < CoverSlide> rybnik: no, is your framework FLOSS?
16:48 < xeno> hello is anyone here?
16:48 < pyrotechnick> maybe
16:49 < xeno> :) hi
16:49 < rybnik> CoverSlide: Some parts will be released for the community such as the pcm library, the high performance median filter, a mongoose-gridfs plugin, the libsvm wrapper and a few speech analytics functionalities such as f0 based gender estimation … but we've no schedule for that at the moment, we're not ready yet.
16:49 < CoverSlide> icic
16:49 < rybnik> CoverSlide: also a julius Wrapper 
16:49 < niggler> is there anyway to precompile / optimize js?
16:49 < xeno> Im trying to install node.js on a vps with hostupon... Does anyone know of some links or reference to help in the process?
16:49 < jergason> rybnik: who is "we" btw?
16:49 < pyrotechnick> niggler: google closure compiler and friends
16:50 < CoverSlide> niggler: uglify-js
16:50 < rybnik> CoverSlide: I can however share a few insights and some of the code
16:50 < jrajav> closure and uglify *minify* the js
16:50 < pyrotechnick> xeno: what OS is it running?
16:50 < jrajav> There's no way to "precompile" it
16:50 < C0deMaver1ck> jrajav: was just about to say that
16:50 < Sh4rK> jergason, so bootstrap doesn't come with any built-in interface updating things?
16:50 < pyrotechnick> jrajav: no they kill and optimise it
16:50 < CoverSlide> well i have 0 experience with audio / speech stuff, but your project piqued my interest
16:51 < C0deMaver1ck> I thought I heard of a way to compile code in with the V8 engine so that it's all packaged together
16:51 < CoverSlide> jrajav: they do some optimization
16:51 < jrajav> They don't optimize in the sense of C though
16:51 < pyrotechnick> jrajav: they recognise bad patterns and fix them
16:51 < jrajav> Only code-level refactoring
16:51 < pyrotechnick> jrajav: that's what he's asking
16:51 < jergason> Sh4rK: it is just a CSS framework
16:51 < rybnik> jergason: sorry I don't work alone so I'm used to state my worked as authored by "we", which is a team composed of me and two more mathematicians, we're freelancers researchers, but just actually starting
16:51 < jergason> rybnik: that is rad
16:53 < xeno> can someone give me some advice as to how to install Node.js on vps?
16:53 < rybnik> jergason: no actually no, we just need to pay the bills if we could we would be starting out own company…. 
16:53 < pyrotechnick> xeno: maybe if you answer their questions, i asked, what os is it running?
16:54 < xeno> linux
16:54 < pyrotechnick> xeno: which kind
16:54 < CoverSlide> xeno: git clone https://github.com/joyent/node ; cd node ; ./configure && make && make install
16:54 < pyrotechnick> run this: `uname -a`
16:54 < pyrotechnick> xeno: is it ok to pm you?
16:55 < xeno> gimme a min to find that information
16:55 < xeno> yea you can pm me
16:59 < yashodhan_> hello...
16:59 < yashodhan_> can anyone help me node.js?
17:00 < yashodhan_> ?
17:00 < yashodhan_> anyone?
17:00 < durango> Dont ask to ask
17:00 < durango> just ask
17:01 < CoverSlide> !help
17:01 < yashodhan_> sorry.
17:01 < shinaku_> yogurt_truck: what's your question?
17:01 < durango> Also, anyone here have any recommendations for a test framework? :) More specifically.. I want to test going to a website, logging in (with correct credentials and incorrect credentials), submitting forms, etc.
17:02 < CoverSlide> durango: phantomjs
17:02 < CoverSlide> it's non-node htough
17:02 < durango> thats what I thought too but thats just a wrapper right? I mean it can assert tests can it?
17:02 < durango> I need to look into it more, but phantomjs sounded awesome when I first saw it'
17:02 < pyrotechnick> what's a decent ssh client for windows?
17:03 < yashodhan_> I am using node.js to build scalable web application/site where I wish to implement elastic search functionality and I plan to use mongo db for persistent storage..  
17:03 < icebox> pyrotechnick: putty?
17:03 < yashodhan_> I am new to all these technologies anyone aware of all these technologies n how they can be integrated?
17:03 < pyrotechnick> one that doesn't make you hate the world
17:03 < CoverSlide> you can also try some of the jsdom-based frameworks like Zombie or tobi, but I'm less a fan of those
17:03 < icebox> pyrotechnick: or securecrt
17:03 < pyrotechnick> thanks
17:04 < icebox> pyrotechnick: http://www.chiark.greenend.org.uk/~sgtatham/putty/
17:04 < CoverSlide> I use FuTTY
17:04 < CoverSlide> http://code.google.com/p/futty/
17:04 < yashodhan_> I am using node.js to build scalable web application/site where I wish to implement elastic search functionality and I plan to use mongo db for persistent storage.. I am new to all these technologies anyone aware of all these technologies n how they can be integrated?
17:05 < pyrotechnick> CoverSlide: this looks promising, thankyou
17:05 < CoverSlide> elastic search?
17:05 < CoverSlide> I say don't reinvent the wheel and use solr for that
17:06 < yashodhan_> it's used for scaleable search...
17:06 < CoverSlide> apparently solr is not web scale ...
17:06 < yashodhan_> http://www.elasticsearch.org/
17:06 < rybnik> durango: I use frisby.js (http://frisbyjs.com) for my REST-testing needs perhaps that will suit your needs
17:07 < chapel> yashodhan_: they all work well together
17:07 < durango> thanks rybnik :) do u code in a large production environment or just personal use?
17:07 < chapel> there is a mongoose addon called mongosastic which integrates mongodb with elasticsearch
17:07 < yashodhan_> I am new to all these technologies can you help?
17:09 < yashodhan_> <chapel> I did google that din't get anything
17:09 < rybnik> durango: define large?
17:09 < chapel> http://jamescarr.github.com/mongoosastic/ yashodhan_
17:09 < durango> uhhhh an entire website that gets about 100 req/s (it isnt large but I mean something other than personal projects)
17:10 < rybnik> durango: I do, some of my software is used by 50.000 users daily.
17:10 < yashodhan_> thanks for help chapel_
17:10 < rybnik> durango: do you need any assistance ?
17:13 < durango> rybnik: well I am just trying to deliver a solid product to my boss ya know?
17:13 < durango> Ive *never* done testing other than manual testing tbh
17:13 < durango> The guys from sequelizejs moved from jasmine to buster or w/e its called though
17:13 < durango> which got my questioning which is better etc.
17:16 < rybnik> durango: What's your required test coverage? and what're are you mainly testing?
17:16 < pspeter3> Is there a way to have common js compile a module into one file to be served on the client side?
17:16 < yawnt> isaacs: ping, you there?
17:16 < rybnik> durango: I mean, is an interface you're trying to test? Is a procedure? ….?
17:16 < durango> Like I said, mostly just web stuff and basic REST I want to test going to certain pages, asserting some values were found, etc.
17:16 < durango> uhh both?
17:17 < durango> https://github.com/joshbuddy/ghostbuster I could always use this :D
17:17 < durango> although this is ruby rawr
17:18 < rybnik> durango: I would go with frisby for the Rest part since it is vary straightforward and for the web interface I would use something like selenium http://en.wikipedia.org/wiki/Selenium_(software) 
17:18 < durango> ok thanks :)
17:19 < rybnik> durango: Selenium has a record/playback capability that might be useful 
17:19 < durango> right
17:28 <@isaacs> yawnt: yo
17:28 < yawnt> isaacs: is there a way to track how many bytes are actually sent with a socket?
17:28 <@isaacs> yawnt: you don't need me to answer that.  best to just ask that kind of thing to the room in general.
17:28 <@isaacs> yawnt: but, yes.
17:29 < yawnt> i've asked anywhere and the answer was no lol
17:29 < yawnt> isaacs: i need bytes sent though, not written
17:29 <@isaacs> yawnt: http://nodejs.org/docs/latest/api/net.html#net_socket_byteswritten
17:29 < yawnt> that's written
17:29 < yawnt> what i want to do is like.. upload a file and track progress
17:30 <@isaacs> yawnt: well, there's this._bytesDispatched
17:30 < yawnt> if i use bytes written it's faster then the net connection.. and the file upload ends way after every byte has been written
17:30 <@isaacs> but that'll still only give you the number of bytes that have been sent to the underlying net layer
17:30 < yawnt> yeah i saw that too
17:30 < yawnt> mmm
17:31 <@isaacs> yawnt: you'd have to track it yourself
17:31 < yawnt> yeah, thought so
17:31 < yawnt> just wanted to make sure there was no dark magic somewhere
17:31 < yawnt> that's why i asked you :D
17:31 <@isaacs> yawnt: sock.write(chunk, function() { bytesSent += chunk.length })
17:31 < yawnt> sorry if i bothered
17:31 <@isaacs> np
17:32 <@isaacs> it's a good idea for the stream2 api to provide.
17:32 < yawnt> nowait
17:32 < yawnt> sock.write?
17:32 <@isaacs> bytesWritten, bytesFlushed or something?
17:32 < stonecobra> is there an official node doc page that lists all the flags supported, like --prof, etc?
17:32 <@isaacs> yawnt: yeah, you're uploading a file, right?
17:32 < yawnt> isaacs: yep
17:33 <@isaacs> yawnt: so, you're writing chunk after chunk
17:33 < yawnt> isaacs: i was using something like that.. 
17:33 <@isaacs> yawnt: thoguh, you're probably just using fs.createReadStream(file).pipe(socket)
17:33 < yawnt> but it doesn't work cause it's basically the same as bytesWritten
17:33 < yawnt> or was i doing something wrong?
17:33 < yawnt> isaacs: yep, i was doing that
17:33 <@isaacs> yawnt: it might be the same as bytesWritten
17:33 < yawnt> except socket is coming from request
17:33 <@isaacs> yawnt: but it should be often 1 chunk behind
17:33 <@isaacs> since sometimes the chunk won't be accepted.
17:34 < yawnt> mh it looks way more behind in my tests
17:34 <@isaacs> yeah
17:34 < yawnt> the only last way i can think of is to track down the actual unix socket
17:34 <@isaacs> depends on net speed
17:34 <@isaacs> the callback doesn't get called until the write is fully accepted and "done"
17:34 < yawnt> yeah
17:34 <@isaacs> ie, when the libuv req is "over"
17:34 < yawnt> but basically what i get is like
17:34 < yawnt> progress bar super fast
17:34 < yawnt> then hangs
17:34 < yawnt> then done
17:34 <@isaacs> k
17:34 <@isaacs> normal
17:34 <@isaacs> :)
17:35 <@isaacs> there are buffers all along the way, you do realize this, yes?
17:35 < yawnt> yep
17:35 <@isaacs> so, you're going to fill up until someone backs up, and then it'll tell you to wait
17:35 <@isaacs> it's not actually a series of tubes.
17:35 <@isaacs> it's a series of copy-paste buffers :)
17:38 < tmpvar> is this the best way to create a buffer in c++ to be returned into js? http://sambro.is-super-awesome.com/2011/03/03/creating-a-proper-buffer-in-a-node-c-addon/
17:39 < yawnt> isaacs: so either that approssimative solution or nothing yet.. ok thanks ;)
17:39 <@isaacs> yawnt: using the write() callback is the best that you can possibly do.
17:39 <@isaacs> yawnt: the underlying subsystems lie.
17:39 <@isaacs> yawnt: there's just no way around that
17:39 <@isaacs> yawnt: you think that's bad, dig into how filesystems work.
17:39 <@isaacs> they lie like CRAZY
17:40 < yawnt> isaacs: nah not really.. i just wanted to know if there was a better way
17:40 < yawnt> sucks to do ugly stuff if there are better solutions, doesn't it?
17:40 < yawnt> D:
17:40 <@isaacs> yawnt: well, another thing, when you say "fills up fast, then hangs", i mean, that's actually what's happening.
17:40 <@isaacs> yawnt: that's how tcp work
17:40 <@isaacs> s
17:40 < yawnt> no no
17:40 < yawnt> i was talking about the socket filling up
17:40 <@isaacs> yawnt: as a human, used to pushing physical objects around, it seems counterintuitive.
17:41 < yawnt> *i wasn't
17:41 < yawnt> but yeah i got what you mean :D
17:41 <@isaacs> like, if you have a progress bar showing a file upload, it won't upload in a nice smooth way.
17:41 <@isaacs> it'll go 0-80% in 1 ms, then hang for a second, then jump to 100%
17:42 <@isaacs> that's why actual progress bars lie :)
17:42 <@isaacs> UIs are always lies.
17:42 < yawnt> looks like i'll really have to count bytes on the servers :D
17:42 <@isaacs> yawnt: or just don't.
17:42 <@isaacs> yawnt: just use the socket bytesWritten, and fuzz it
17:42 <@isaacs> yawnt: like every other progressbar in the world :)
17:42 < yawnt> true
17:43 <@isaacs> yawnt: or accept that it's chunky and weird-looking
17:52 < Cogito_Ergo_Sum> guys is there a way to be able to interrupt a long running ( cpu intensive ) function without resorting to the use of .nextTick which is very slow?
17:53 <@isaacs> Cogito_Ergo_Sum: run it in a child process
17:53 <@isaacs> Cogito_Ergo_Sum: then you can SIGHUP it or whatever
17:53 <@isaacs> Cogito_Ergo_Sum: you can also use an actual other CPU to do the workd
17:54 < Cogito_Ergo_Sum> isaacs i tried running it in a cluster and tried to pass a message to the worker, but the message doesn't get passed because the worker is running the long running function ( a while(1) loop )
17:54 <@isaacs> Cogito_Ergo_Sum: well, yeah
17:54 <@isaacs> there's no way to get messages from the event loop except to check for messages from the event loop :)
17:55 <@isaacs> Cogito_Ergo_Sum: you can interrupt the process, like, by killing it.
17:55 <@isaacs> Cogito_Ergo_Sum: but there's no way to pause the JS operation, do some stuff, then come back where you left off, no.
17:55 < Cogito_Ergo_Sum> by interrupting i mean giving commands to the long running function through IO
17:55 <@isaacs> right
17:55 <@isaacs> you'll have to have the long-running function check for messages
17:56 <@isaacs> run your loop for 10,000 iterations, then do a setImmediate
17:56 <@isaacs> or nextTick in 0.8 and before
17:56 <@isaacs> it isn't as fast, because you're doing more work.
17:56 <@isaacs> sorry, that's physics :)
17:57 < Cogito_Ergo_Sum> hm
17:57 <@isaacs> you can do some jiggery pokery stuff with a C program, of course.
17:57 <@isaacs> but the point of node is that it removes a lot of the jiggery pokery from your js land.
17:57 < Cogito_Ergo_Sum> yes that's what i was going to ask, is that valid for a C/C++ program as well ? ( the inability to interrupt it )
17:58 < Cogito_Ergo_Sum> ( i'm not very good at C )
17:58 <@isaacs> so there's no API for "unschedule this program from the CPU, monkey around with its instruction pointer, then put it back on cpu for a little while, etc"
17:58 <@isaacs> i'd stay away from that stuff
17:58 <@isaacs> run cpu-intensive stuff in a child process.
17:58 <@isaacs> or in a thread, from C++
17:58 < Tixz> Why did Crypto get reduced to unstable?
17:58 <@isaacs> then you can interrupt it
17:58 <@isaacs> Tixz: because it's changing somewhat in 0.10
17:58 <@isaacs> Tixz: it's explained in detail in the doc.
17:58 < Tixz> Alright will look there, thanks :)
17:59 <@isaacs> Tixz: http://nodejs.org/docs/latest/api/crypto.html#crypto_proposed_api_changes_in_future_versions_of_node
17:59 <@isaacs> grr... typo
17:59 <@isaacs> arguemnt
18:00 < Cogito_Ergo_Sum> isaacs, something else: wouldn't it be better if node.js was either a waiter ( http server ) or a chef ( backend worker like php/perl etc. ) instead of trying to be both ?
18:00 < MI6> joyent/node: isaacs v0.8 * 627f0d2 : doc: Typo. s/arguemnt/argument/ - http://git.io/zTBtkQ
18:01 <@isaacs> Cogito_Ergo_Sum: no, i think that that distinction is artificial and weird.
18:01 < jhsto_> Does anyone happen to know how to enable masking in nowjs?
18:01 < Cogito_Ergo_Sum> it's more modular that way
18:01 <@isaacs> Cogito_Ergo_Sum: node is for scripting systems that are networked.
18:01 <@isaacs> Cogito_Ergo_Sum: you can break up your node programs however you want.
18:01 <@isaacs> there's no need to have an http server in every node program
18:02 <@isaacs> it can be a chef, a waiter, a stove, or a robot butler.
18:02 < Cogito_Ergo_Sum> no but as far as i can see, i will have to resort to jiggery pokery as you said if i want a real http server ( cookies, sessions etc )
18:02 <@isaacs> Cogito_Ergo_Sum: i don't see why that is.
18:02 <@isaacs> Cogito_Ergo_Sum: there are a lot of "real http servers" that have cookies and sessions, and never have to do any of that garbage.
18:02 <@isaacs> Cogito_Ergo_Sum: why do you have a while(1) loop in your http server, is the real question :)
18:03 < cnd> how can you pause an http req *before* it has already handled the beggining of the body of the request?
18:03 < Cogito_Ergo_Sum> isaacs, no my while(1) was not about my http server question, it was about another project involving number crunching, totally irrelevant to the http/backend question 
18:04 <@isaacs> oh, ok
18:04 <@isaacs> so, why do you need to control the instruction pointer and send hardware interrupts to run an http server?
18:04 <@isaacs> Cogito_Ergo_Sum: i mean, npmjs.org has cookies and sessions.  it's an http server.  it's only using js
18:04 <@isaacs> Cogito_Ergo_Sum: what "jiggery pokery" are you talking about?
18:05 < Cogito_Ergo_Sum> the fact that node.js can do pretty good network connections etc, but it's not a real http server with the configurations and features of apache or nginx
18:06 < Cogito_Ergo_Sum> and someone would have to resort to modules sticked to node in order to have sessions for example, which are something default to any http server
18:06 <@isaacs> Cogito_Ergo_Sum: "real http server"?
18:06 < Tixz> Does anyone know if Passport.js local strategy actually encrypts the passwords or just stores them in plain text?
18:06 <@isaacs> Cogito_Ergo_Sum: "resort to modules"?
18:07 <@isaacs> Cogito_Ergo_Sum: node does less by default, sure.
18:07 < Tixz> I can't seem to find anything in the source referencing enctryptiong
18:07 < Tixz> *encryption
18:07 < russfrank> Cogito_Ergo_Sum: I believe your understanding of a module is different from a module in 'the node world'
18:07 <@isaacs> Cogito_Ergo_Sum: but that's because node is a high-level programming platform, and much more easily extended than nginx or apache
18:07 < Cogito_Ergo_Sum> isaacs i mean, the wheel of http servers is already invented, why reinvent the wheel?
18:07 <@isaacs> Cogito_Ergo_Sum: do you think that there is no room for innovation in the world of wheels, or http servers?
18:07 <@isaacs> Cogito_Ergo_Sum: i hate that metaphor.  ti's so absurd.
18:08 <@isaacs> Cogito_Ergo_Sum: "don't reinvent the wheel" = "i don't like that you're not satisfied with the current tech stack"
18:08 < jhsto> You guys should know that is masking data sent to client from a websocket ideal?
18:08 <@isaacs> Cogito_Ergo_Sum: have you ever tried to write an apache extension module?  or nginx?
18:08 <@isaacs> Cogito_Ergo_Sum: it's way way more tricky than writing a node module.
18:09 < Cogito_Ergo_Sum> it's true though, at least the way i see it ( i don't claim to be an expert ) but since we have for decades now, proven, fully featured http servers apache, iis, nginx, node trying to be among others a new http server means it will have to reinvent the wheels and solve the problems all those http servers did since their inception
18:09 <@isaacs> Cogito_Ergo_Sum: there's a reason why things like rails and sinatra and django are so popular.  because you can actually build an app in a fast and easy way, using a high-level language, that is a website.
18:09 < russfrank> Cogito_Ergo_Sum: sometimes it's a good idea to look at what exists; and say, "This isn't working, let's try something new"
18:09 <@isaacs> Cogito_Ergo_Sum: Wheels should be reinvented occasionally.
18:09 < russfrank> we've found that there are some problems that these existing technologies are very bad at solving
18:09 <@isaacs> Cogito_Ergo_Sum: A little revolution is a good thing.
18:10 <@isaacs> Cogito_Ergo_Sum: php was a baidaid on the core problem which was that writing Apache extensions is a huge pain in the ass.
18:10 <@isaacs> Cogito_Ergo_Sum: and apache *doesn't* do all the things that every web app needs.
18:10 <@isaacs> Cogito_Ergo_Sum: imo, apache does way too much, already.
18:11 < Cogito_Ergo_Sum> but apache is not a web-app platform
18:11 <@isaacs> Cogito_Ergo_Sum: nginx does less, and does it *very* well, but it is even harder to extend, and is very opinionated, so not so great for many types of use cases.
18:11 < Cogito_Ergo_Sum> it's just serving files
18:11 < Cogito_Ergo_Sum> it's not a programming language
18:11 <@isaacs> Cogito_Ergo_Sum: no, apache can serve anything.
18:11 <@isaacs> Cogito_Ergo_Sum: its programming language is C
18:11 <@isaacs> Cogito_Ergo_Sum: same with nginx.
18:11 <@isaacs> you can write extension modules for it.
18:11 <@isaacs> it's just a lot of work :)
18:12 < Cogito_Ergo_Sum> yes technically you can write modules for apache in C but it's a PITA
18:12 <@isaacs> it has a fastcgi interface, though, which is how people typically run php on nginx
18:12 <@isaacs> Cogito_Ergo_Sum: right
18:12 <@isaacs> so, that's what php aimed to solve.
18:12 < Cogito_Ergo_Sum> so having a language sticked to it like php was a nice addition
18:12 < Cogito_Ergo_Sum> agreed
18:12 <@isaacs> oh, also, apache has SSI or whatever.
18:12 <@isaacs> the html-and-magic-comments thing for loading templates.
18:12 < Cogito_Ergo_Sum> why not then having nodejs as an apache/nginx/IIS module TOO ?
18:12 <@isaacs> and php was basically a much nicer one of those.
18:12 <@isaacs> (at first)
18:12 <@isaacs> Cogito_Ergo_Sum: what's the benefit of that?
18:13 <@isaacs> Cogito_Ergo_Sum: having a systems programming language that can spin up http servers whenever is a *remarkably* powerful tool.
18:13 < Cogito_Ergo_Sum> the fact that i would prefer a real web server such as apache or nginx to be the fronend waiter (http server) and let the work done be by a real programming language ( node.js )
18:13 <@isaacs> also, you can use it for building websites.
18:13 <@isaacs> Cogito_Ergo_Sum: you're going to have to define "real" here.
18:14 <@isaacs> Cogito_Ergo_Sum: because imo, node is a "real web server"
18:14 < russfrank> Cogito_Ergo_Sum: so proxy nginx to node
18:14 < Cogito_Ergo_Sum> ok ok, not real, if that sounds insulting, i mean, good-old-http-server
18:14 <@isaacs> Cogito_Ergo_Sum: and C is a "real programming language"
18:14 <@isaacs> Cogito_Ergo_Sum: how old?
18:14 <@isaacs> Cogito_Ergo_Sum: how good?
18:14 < Cogito_Ergo_Sum> good=proven by the years
18:14 <@isaacs> Cogito_Ergo_Sum: how many years?
18:14 <@isaacs> Cogito_Ergo_Sum: it seems silly to prove something by "years" rather than by utility.
18:14 < tnorris> Cogito_Ergo_Sum: are you basically asking that you can create a .conf file, start up a node process and be running an http server?
18:15 < Cogito_Ergo_Sum> and having all the features ( sessions, cookies, virtualhosts, etc. etc ) that standard web servers have
18:15 < russfrank> tnorris: no I think he wants mod_node
18:15 < Cogito_Ergo_Sum> yes russfrank :P
18:15 < Cogito_Ergo_Sum> russfrank yes i have been suggested proxying nginx to node but it's an ugly hack in my opinion
18:16 <@isaacs> Cogito_Ergo_Sum: i agree.  you shouldn't do that.  you should just use apache :)
18:16 < tnorris> russfrank: yeah, i'm totally lost. this may sound meta, but node is exactly what it needs to be.
18:16 < tnorris> isaacs: lol
18:16 < russfrank> tnorris: agreed
18:16 <@isaacs> Cogito_Ergo_Sum: or, you should just accept that your "conf file" is written in javascript, and that you already have that.
18:16 <@isaacs> Cogito_Ergo_Sum: JavaScript is ust a much more powerful configuration language.
18:16 < aandy> i have a slightly "meta" question:
18:16 <@isaacs> Cogito_Ergo_Sum: which tells the node process how to behave.
18:17 < tnorris> Cogito_Ergo_Sum: how is that an 'ugly hack'. it's configurable, flexible, and has allowed for a lot of cool applications.
18:17 < aandy> i built a html5 backed video "streaming" app, where i want to allow users to mark regions, like from 0:00-1:00: "funny part!" (i guess, kind of like comments on soundcloud). making the request to store this info is what troubles me
18:17 <@isaacs> aandy: put it in a db or something?
18:17 < aandy> is cookies + POST /whatever: start: ..., end: ..., text: ..., enough? being chronically afraid of XSS, CSFR and the like, i'm wondering if there's a collection of best practices when interacting with user input (just broad, general terms is fine)
18:17 < aandy> isaacs: sorry, i was still typing. i mean in respects to request "authenticity"
18:17 < russfrank> csrf
18:18 <@isaacs> aandy: oh, ok
18:18 <@isaacs> aandy: well, don't trust the input :)
18:18 < aandy> russfrank: right
18:18 < Cogito_Ergo_Sum> isaacs ok i will give an example why not doesn't sound a "real" web server: you even have to code in .js the writeHead(blabla), you don't have to do that with apache, i have to actually "implement" ( ok in high level )  the web server in node
18:18 < Cogito_Ergo_Sum> why node*
18:18 <@isaacs> Cogito_Ergo_Sum: npm install st
18:19 < aandy> hehe, in terms of sanitizing, i never do, but i'm also wondering with "hacker" users (not penetration, just general programmers like us in here). while true; do curl http://.../add_mark -D "..", HEHE ruin service :p
18:20 < russfrank> aandy: they'd have to have the cookie, no?
18:20 < aandy> i use csrf protection in cookies, but i'm just wondering if that's enough, or if i'm forgetting something. (thus using cookies and app logic to limit spam, throttle and such)
18:20 < durango> Anyone here used casperjs with nodejs?
18:20 < Cogito_Ergo_Sum> tnorris: it's an ugly hack because you are redirecting nginx to node which adds one more layer of http request reply
18:20 < aandy> russfrank: right, all will be logged in and unique
18:21 <@isaacs> Cogito_Ergo_Sum: npm install st -g ; st -h
18:21 < russfrank> Cogito_Ergo_Sum: sortof like the fastcgi request / reply, no?
18:21 <@isaacs> Cogito_Ergo_Sum: so, node doesnt' assume you want to run an http server.
18:21 <@isaacs> Cogito_Ergo_Sum: node !== apache
18:21 <@isaacs> Cogito_Ergo_Sum: you realize you'd have the same exact problem with rails or python, right?
18:22 <@isaacs> Cogito_Ergo_Sum: node lets you configure much more than apache does.
18:22 < Cogito_Ergo_Sum> isaacs: yes well, I'm just a php guy
18:22 <@isaacs> Cogito_Ergo_Sum: yeah, i was, too :)
18:22 < tnorris> Cogito_Ergo_Sum: having multiple proxies allows for use of multi-core systems. and even distribution of loads.
18:22 < justen> If I have a route like this: /user/:user_id/register and for the resource call, the parameter :user_id is omitted, will it still call that route? 
18:22 < CoverSlide> justen: what exactly would that call look like
18:22 < Cogito_Ergo_Sum> tnorris but there are already PROVEN :P load balancers, no need to re-implement a load balancer :P
18:22 < AndreasMadsen> me too, the transition from PHP to node was quite hard :)
18:23 < s5fs> I found the transition from client-side js to server-side js hard.
18:23 < justen> CoverSlide: Just in the controller that handles that route, I want to know if I can do a logical statement like if req.params.user_id, or if I need a separate controller altogether
18:23 < s5fs> real mind-bender in some respects, but now i think of "node" as "perl" or "python" and it makes more sense (in my head, anyways)
18:23 < jefffan24> Anyone got any tips for an experienced programmer starting with node?
18:23 < justen> separate function()
18:24 < Cogito_Ergo_Sum> isaacs i understand that node lets you configure more, but you have to re-invent the wheel, should i mention here .htaccess which its ton of configurations ( mod_rewrite ) etc. etc
18:24 < jefffan24> It looks promising :)
18:24 < s5fs> jefffan24: read the API docs
18:24 < tnorris> Cogito_Ergo_Sum: what do you mean by proven? and I guess you don't believe nginx proxying is "proven"?
18:24 < CoverSlide> try putting websockets behind nginx
18:24 <@isaacs> Cogito_Ergo_Sum: When you have reinvented a few wheels, you'll see it's not as bad as people say.
18:24 < s5fs> jefffan24: i screwed around with node for about a month before diving into the docs and truly wish i'd have started there. don't NOT dork around, but make sure you read the docs too, at least give them a good deep skim. that's my advice!
18:24 <@isaacs> Cogito_Ergo_Sum: Try to notice every time you say or think the "reinvent wheel" line
18:25 <@isaacs> Cogito_Ergo_Sum: typically, it belies a lack of understanding of both invention, and wheels.
18:25 < jefffan24> thanks s5fs will definetly do that :)
18:25 < aandy> russfrank: whenever you go to sites like gmail, youtube, facebook and such, it looks like it's mainly "confussious say", as the complexity reduces some transparency. i was just wondering in the simple case, if csrf was "enough" to keep users from being jerks ;)
18:25 < Cogito_Ergo_Sum> isaacs, I'm with you in this, I would prefer node ( js ) as a backend language, instead of PHP, but my point is why not ALSO have the option to be just backend as a mod_node for example for those who would like to use other solutions for : a) http serving b) proxying c) load balancing
18:25 < CoverSlide> i believe the invention of the rubber-based wheel was a good one
18:26 < CoverSlide> i don't know how mod_node would even make sense
18:26 <@isaacs> Cogito_Ergo_Sum: how can I trust that you know anything about invention, if you've never tried to invent a wheel?  And how can i believe that you know anything about wheels, if you've never tried reinventing one?
18:26 < CoverSlide> there's always teajs
18:26 < tnorris> s5fs: very true. i occasionally just re-read the docs, and i'm surprised how much is forgotten about stuff I don't use often.
18:26 < s5fs> jefffan24: I'm about 75% done with a deep read and have less than 2hrs invested. understanding with node core provides helps immensely when you start looking at modules. knowing where a module starts and core stops is very important (imho). also, it helps to keep things in perspective, most modules provide a ton of functionality but if you were forced to write it yourself, it's totally possible (because node code is pretty darned good already)
18:26 <@isaacs> Cogito_Ergo_Sum: everyone should write their own http framework and flow control library.
18:26 < justen> CoverSlide: Do you know?
18:26 <@isaacs> Cogito_Ergo_Sum: you might end up using Express or whatever, and that's fine.
18:26 <@isaacs> Cogito_Ergo_Sum: but it's a fascinating and wonderful exercise!
18:27 < s5fs> isaacs: fully agreed, and with node it's not that hard to write your own 'mini-express'
18:27 < Cogito_Ergo_Sum> isaacs i did not profess to be expert at inventing, what i said why re-invent, an excercise that will take alot of time when there are already tools for that
18:28 < Cogito_Ergo_Sum> i would agree that re-inventing is good at times
18:28 < eddyb> I don't know who to tell this: I have a system that can (with small improvements) not only grab an website's CSS and make colors variable (say, have a colorpicker that changes the looks on the entire site), but also turn image-based gradients into CSS gradients
18:28 < Cogito_Ergo_Sum> but i don't see why this time is a good to re-invent BOTH the waiter AND the COOK
18:28 < timeturn> ugh manual http...
18:28 <@isaacs> Cogito_Ergo_Sum: why re-invent nodejs, then?
18:29 <@isaacs> Cogito_Ergo_Sum: i mean, clearly people are using it to great success.
18:29 < CoverSlide> integrating node into apache would take a hell of a lot of coding with little result. using node as its own http server would be much simpler. if you want apache's stuff in front of node, there's mod_proxy, mod_fcgi
18:29 <@isaacs> Cogito_Ergo_Sum: and personally, as a someone who came up in his webdev life as an apache and php user, i can tell you that the freedom node offers, and the consistency of interface and language, is quite fun and enjoyable.
18:29 < Cogito_Ergo_Sum> isaacs i hereby claim that its usage would be 10x time of its current use if it was ALSO offered ( as an option that is ) as an extension to known web servers
18:29 < CoverSlide> not every language needs an apache module
18:29 < justen> If I have a route like this: /user/:user_id/register, for the function this route calls, can I do an if statement like if(req.params.user_id), or do I need a separate function altogether?
18:30 <@isaacs> Cogito_Ergo_Sum: prove it :)
18:30 <@isaacs> Cogito_Ergo_Sum: write mod_node
18:30 < pyrotechnick> what's it actually called when people are comparing apples to oranges?
18:30 < CoverSlide> to all the php users who use nginx, i ask why there isn't an nginx-php module
18:30 < pyrotechnick> besides a false dichotomy
18:31 <@isaacs> pyrotechnick: that's called "fruit shopping"
18:31 < Cogito_Ergo_Sum> isaacs it's easy to prove, people would just write applications in .js instead of trying to re-implement an http server which would serve node's results
18:31 < pyrotechnick> thanks
18:31 < CoverSlide> if you wanted js in apache, use teajs
18:31 <@isaacs> Cogito_Ergo_Sum: but people just write apps in Express, if they want that.
18:31 < s5fs> Cogito_Ergo_Sum: you realize that 'writing your own web server' in node is a 5-line exercise, correct?
18:31 <@isaacs> Cogito_Ergo_Sum: i mean, you're not "reimplementing the http server"
18:31 <@isaacs> Cogito_Ergo_Sum: it's two function calls, and an event handler.
18:32 < Cogito_Ergo_Sum> s5fs how would you reimplement mod_rewrite, etc etc
18:32 < s5fs> Cogito_Ergo_Sum: in fact, for one of my embedded projects we just dropped lighttpd in favor of node.js for the serving of static content since it's much lighter weight.
18:32 <@isaacs> Cogito_Ergo_Sum: if you want to reimplement an http server, use require('net') instead of require('http')
18:32 <@isaacs> s5fs: have you blogged about this?
18:32 <@isaacs> s5fs: if not, please do :)
18:32 < Cogito_Ergo_Sum> oh guys, you know what i'm trying to say :P
18:32 <@isaacs> Cogito_Ergo_Sum: i know what you're trying to say, and i'm saying, it's completely wrong in a fundamental way.
18:32 < Cogito_Ergo_Sum> i think you are missing the point i'm trying to say :P
18:32 <@isaacs> Cogito_Ergo_Sum: node HAS an http server already.
18:32 < s5fs> isaacs: i cannot, i'm under NDA. all my best projects are under nda or worse (govt)
18:32 <@isaacs> s5fs: /o\
18:33 < robo> It would certainly be more "convenient" to have a mod_node or whatever
18:33 <@isaacs> Cogito_Ergo_Sum: you don't re-implement it, you just tell it what to do.
18:33 <@isaacs> robo: speak for yourself.  setting up apache is a pita
18:33 < Cogito_Ergo_Sum> but how it's wrong ? having chained little tools has been proved to be a very successful strategy since the early unix times
18:33 <@isaacs> for node servers, i just have to hook up `node server.js` into the os's init/service stuff.
18:33 < russfrank> Cogito_Ergo_Sum: there's nothing little about apache buddy
18:33 < s5fs> isaacs: once I get the go-ahead I'll do a writeup
18:34 <@isaacs> s5fs: awesome!  ping me when you do, and i'll retweet on @nodejs
18:34 < Cogito_Ergo_Sum> russfrank you are being pedantic, you know what i mean, tools specialized at 1 job :P
18:34 < s5fs> isaacs: sweet, thanks!
18:34 < Bonuspunkt> i havnt done websockets & server side events/eventsource at apache, but at iis this is frustrating
18:34 < timeturn> what is apache good at these days?
18:34 < timeturn> I find it hard to believe that they haven't shut it down yet
18:35 < Cogito_Ergo_Sum> isaacs: i thought about proving it by implementing it ( mod_node), however my coding skills are not that good
18:35 < CoverSlide> writing an apache module is not a trivial task
18:35 < CoverSlide> writing a http server in node is
18:35 < eddyb> I've done it once with v8-gearbox, back when I thought I had a chance at beating node.js
18:36 < russfrank> timeturn: apache and php will still get you pretty far
18:36 < eddyb> actually, before I knew node.js even existed
18:36 < russfrank> you just can't do cool web socket type things
18:36 < eddyb> s/far/deep (into shit)/
18:36 < Cogito_Ergo_Sum> CoverSlide wouldn't it be just be a matter of tying node to a C wrapper as an apache module ?
18:37 < s5fs> timeturn: apache has a ton of useful modules that facilitate easy integration (imho)
18:37 < CoverSlide> Cogito_Ergo_Sum: keep telling yourself it's that simple
18:37 <@isaacs> Cogito_Ergo_Sum: "just a matter" yes.  It's just writing lines of code.
18:37 < Cogito_Ergo_Sum> since node is already written in C, i don't believe it would be difficult? ( I may be talking rubish here, I have no idea here how apache modules are written )
18:37 <@isaacs> CoverSlide: psshhh.  you just type the correct bytes into your editor, then run it.
18:37 <@isaacs> CoverSlide: it's not THAT hard.
18:37 <@isaacs> Cogito_Ergo_Sum: it wouldn't be difficult.
18:38 <@isaacs> Cogito_Ergo_Sum: but it would be less powerful, less awesome, and much more clunky to use, and provide no additional value.
18:38 < timeturn> my intro to web programming: php for a month, then node for 6 months to present
18:38 < timeturn> php is such a wrong model
18:38  * timeturn confused me so much web I started using node
18:38 < timeturn> when*
18:38 < timeturn> node has a ton of useful modules that facilitate easy integration
18:39 < Cogito_Ergo_Sum> isaacs we could put infinite monkeys coding and at some point the right code for making a mod_node would magically appear :P
18:39 < CoverSlide> Cogito_Ergo_Sum: go reasearch how to create an apache module. Then research how to set up fcgi or a proxy. tell me which one would be easier
18:39 < Cogito_Ergo_Sum> isaacs: less awesome is just a geeky matter, not a production matter, also I don't understand the "less powerful"
18:39 < timeturn> I don't understand the logic behind php
18:39 < timeturn> I mean why is it combining the view and the server side stuff and the rendering
18:39 < timeturn> the model is pretty screwed up
18:40 < CoverSlide> PHP grew from the frustrations people had when all that was available was perl and CGI
18:40 < Cogito_Ergo_Sum> timeturn php is a general programming language, also used for server side stuff
18:40 < s5fs> timeturn: that's not a language issue, that's a framework issue. you can develop mvc frameworks in php too
18:41 < CoverSlide> fuck php
18:41 < kuja> PHP is not general purpose
18:41 < s5fs> hey, php still has utility
18:41 < CoverSlide> actually, php is general purpose
18:41 < kuja> PHP lacks some fundamental things that make it suitable for general purpose tasks
18:41 < CoverSlide> it began as a DSL
18:41 < timeturn> php is in no way general purpose as of now
18:41 < CoverSlide> kuja: name them
18:41 < kuja> CoverSlide: Garbage collection is a big one
18:41 <@isaacs> you guys, php definitely IS general purpose
18:41 < Ezku> kuja: dude.
18:41 <@isaacs> whatever you can do in bash, yo ucan do in php
18:42 <@isaacs> you can write a whole web server in php.  there's even an async IO library for it.
18:42 < Ezku> PHP definitely has garbage collection.
18:42 < timeturn> it's become this web client-server mix framework for the masses
18:42 < Cogito_Ergo_Sum> general purpose refers to what you can DO ( purpose )
18:42 < Ezku> how's a dynamic language to work without?
18:42 < s5fs> Ezku: magic..?
18:42 < kuja> Yes, not saying it doesn't ahve garbage collection. It just doesn't have the kind of garbage collection you would want in a general purpose language
18:42 < kuja> PHP *never* frees memory from its running process.
18:42 <@isaacs> PHP's garbage collection left a lot to be desired in pre 5.3
18:42 < Bonuspunkt> hmm is it after 13hours to late to edit a comment at a github issue?
18:42 < CoverSlide> kuja: yes it does
18:42 < kuja> Whatever memory is allocated to PHP, *stays* allocated to PHP until the process dies.
18:42 <@isaacs> kuja: your objection is correct, but outdated.
18:42 < kuja> No, it does not.
18:42 < Ezku> kuja: a shitty general purpose language, then. And since 5.3, yes it does.
18:42 < CoverSlide> when you exit a function
18:43 < Cogito_Ergo_Sum> how does the GC is relevant to whether or not the language is general purpose ?
18:43 < timeturn> who in the right mind would use it for general purpose stuff on the server with things like node around
18:43 <@isaacs> kuja: it has mark-and-sweep now.
18:43 < kuja> Oh well fine then I'm out of touch :/
18:43 < s5fs> timeturn: those who don't have node available
18:43 <@isaacs> kuja: i'm not saying it's great, or at the same level as V8's GC algo's, but it's there.
18:43 < kuja> isaacs: It's a start, I guess.
18:43 <@isaacs> kuja: yeah.
18:43 < Ezku> and I might be mistaken, but the GC pre-5.3 did in fact work but not for cyclic graphs
18:43 < s5fs> timeturn: not everyone gets to choose their tools, sometimes you gotta make due
18:43 <@isaacs> kuja: when i left php, it didn't even have first-class functions.
18:44 < tnorris> there are a mother load of templating modules. can anyone save me time and recommend well-vetted ones?
18:44 < CoverSlide> tnorris: ejs, handlebars, and jade tend to be pretty popular
18:44 < timeturn> no one should have to settle on using the wrong or inefficient tool for the job
18:44 < tnorris> CoverSlide: awesome, thanks. i'll start there.
18:45 < timeturn> even though reality goes against that...
18:45 < timeturn> still
18:45 < CoverSlide> http://farm8.staticflickr.com/7226/7095238893_5000f6e57d_m.jpg << the right tool for the job
18:45 < lpin> tnorris i use jade
18:45 < jhsto> Can I mask the connection between server to client in websockets?
18:45 < jhsto> And hopefully someon will this time answer, this is my fourth time asking I think.
18:46 < kuja> Ezku: My recollection of pre-5.3 was that it definitely did not do circular references, but more importantly, it did not free memory at all. The best you could do was re-use allocated memory by removing all references to something :(
18:46 < CoverSlide> jhsto: define "mask"
18:46 < jhsto> Oh, I mean, can I mask the frames between server and client.
18:46 < CoverSlide> you can use ssl
18:46 < s5fs> timeturn: fully agree in spirit!
18:46 < hydrozen> What's the "standard" entry point for a node app? index.js? app.js? server.js?
18:46 < lpin> hydrozen whatever you like
18:47 < lpin> app is used generally
18:47 < kuja> Glad to hear it's all changed :D
18:47 < tnorris> hydrozen: I use index.js if I'm writing a http server, main.js if I'm writing a module.
18:47 < s5fs> hydrozen: for express it seems to be app.js, for my stuff i name it "myapp.js"
18:47 < CoverSlide> hydrozen: index.js is common since you can require a directory
18:47 < jhsto> CoverSlide: So SSL should do it?
18:47 < Ezku> kuja: alright, that's an interesting distinction then
18:47 < CoverSlide> jhsto: i don't know what you really mean by "masking"
18:47 < jhsto> Wait
18:47 < CoverSlide> but you can have websockets over ssl
18:47 < CoverSlide> and so the data will be encrypted and secure
18:48 < kuja> We've been discouraging the use of PHP as a general purpose language in ##php for over a decade now. And it's still the case... there you have it :p
18:48 < s5fs> kuja: I thank you for your efforts!
18:50 < tnorris> whoa, jade is hard core short syntax. is it based on zencoding?
18:50 <@isaacs> hydrozen: for require()-> index.js (or package.json "main" field).  for `npm start`-> server.js (or package.json scripts.start field)
18:50 < jhsto> CoverSlide: http://www.websocket.org/echo.html go there
18:50 <@isaacs> hydrozen: those are just the defaults.
18:50 < `3rdEden> tnorris: no, it's based on haml
18:50 <@isaacs> hydrozen: i usually use {module-name}.js
18:51 < jhsto> after pressing connect you should see websocket connection, and after sending a message you should see the data tables
18:51 < hydrozen> @isaacs: thanks. I'll try to follow those principles
18:51 < hydrozen> thanks to everyone else who replied
18:51 < `3rdEden> isaacs: is there a way to use `tar` to untar or extract data from a buffer instead of a file on disk/
18:51 < `3rdEden> s/\/?/
18:51 < jarred> hi all
18:52 < tnorris> `3rdEden: thanks. there are so many [a-z]aml syntaxes out there it's ridiculous.
18:52 < jhsto> the data in those frames is what i want to mask
18:52 < jhsto> i dont want the data in there to be naked
18:52 < jhsto> but i have no idea is this accepted by some protocols
18:52 <@isaacs> `3rdEden: yeah, just use the tar.Extract() and then write(myBuffer) into it
18:52 < s5fs> jhsto: by 'masked' do you mean 'encrypted'?
18:52 < jhsto> yeap
18:52 < `3rdEden> isaacs: awesome, thanks
18:52 <@isaacs> `3rdEden: e = tar.Extract({path:'/path/where/you/want/it'}); e.end(fs.readFileSync(tarball))
18:53 < `3rdEden> totally forgot that it was just a plain stream
18:53 < s5fs> jhsto: okay, cool. you can use web sockets over ssl, which should encrypt the traffic between the client and the server.
18:53 <@isaacs> `3rdEden: yep :0
18:53 <@isaacs> :)
18:53 < jhsto> s5fs, if I press enable TLS on the echo example, the data in the frames is still exposed
18:54 < s5fs> jhsto, yes, but if it's working correctly, only you and the server can see the data.
18:55 < jhsto> s5fs, if thats true, im so pleased
18:55 < CoverSlide> jhsto: you want to prevent the user from being able to see it in dev tools?
18:55 < s5fs> jhsto: you can probably confirm this by running wireshark and sniffing the network traffic
18:55 < jhsto> CoverSlide: well, if the browser can access it, so should any client too
18:55 < jhsto> s5fs, cool, thanks
18:56 < jarred> I'm not very familiar with the Node.js ecosystem, but I'm familiar with Ruby/Ruby on Rails' ecosystem. I need to make a Node.js app that has a JSON API, an ORM, and some kind of background jobs similar to delayed_job. What would be a good combination of packages/tools to do this? (or a single framework?)
18:56 < s5fs> jhsto: you're welcome, good luck!
18:57 < eindoofus> Hi, I'm debating what to learn next and I'd like to learn a web framework. I believe I
18:57 < kuja> jarred: You can build your API with express or restify.
18:57 < s5fs> eindoofus: check out express, all the kids are using it
18:57 < eindoofus> accidentall hit enter, but what is express?
18:58 < s5fs> jarred: for the ORM side, it depends on your database. check out mongoose for mongodb, it's a good starting point.
18:58 < jhsto> eindoofus, a simple web framework
18:58 < s5fs> eindoofus: it's a little framework for node.js
18:58 < s5fs> eindoofus: expressjs.com
18:59 < eindoofus> is it a subset, or it's own seperate framework? will express commands work in node
18:59 < jarred> s5fs: I've heard not-so-good things about MongoDB. However, I've merely heard that -- I don't know first-hand. I've had a good experience with PostgreSQL though, are there good ORMs for it for Node?
18:59 < kuja> sequelizejs.com seems to be a popular one
18:59 < kuja> at least based on the number of watchers/forks on github
19:00 < eindoofus> is there any web framework that is dominating on the backend for mobile apps?
19:00 < kuja> Only MySQL though :/
19:00 < kuja> eindoofus: express seems to be popular for all things web in node
19:00 < CoverSlide> kuja: i think it supports other SQL
19:00 < CoverSlide> ,ust check ...
19:00 < s5fs> jarred: everything has trade-offs and not knowing specifically what you are after, mongo is a good starting point. if you're more familiar with rdbms systems, then you can stick with postgres and look into node-postgres or similar modules
19:01 < s5fs> jarred: i haven't worked with node-postgres personally, nor have i heard much about it, so grain of salt
19:01 < eindoofus> kuja, does the knowledge of express carry over to node.js? and why not just use node.js?
19:01 < CoverSlide> SQL dialects
19:01 < CoverSlide> With v1.3.0 of Sequelize, it is possible to use non-mysql dialects. For now sqlite is available, but other dialects can and will be implemented. 
19:01 < kuja> CoverSlide: Yeah you're right. I was reading the paragraph on the main page and that threw me off.
19:01 < kuja> I see now that it supports postgres, mysql and sqlite
19:02 < CoverSlide> we need a good TDS library for node so they can add MSSQL
19:02 < jamescarr_> hey, is there an npm package to clone js objects in node?
19:02 < jarred> s5fs: It's going to be an NZB indexing API (Files hosted on Usenet) -- so lots of reads, lots of writes every 5 minutes or so, and lots of searching
19:02 < s5fs> eindoofus: great question! i started out with express and then worked my way backwards down into the 'guts' of node. express just abstracts things so it's easier to build a web app.
19:03 < eindoofus> s5fs: would you recommend taking that path, or starting with node?
19:04 < s5fs> eindoofus: it really depends on what you're after, and how you learn. if you get discouraged quickly or get bored with little 'learner' projects, start with express (you'll get more functionality for your investment). however, you shoudl most certainly read the node API docs just to get a feel for what node provides all by itself.
19:04 < CoverSlide> jamescarr_: underscore does it I think, but deep cloning is pretty trivial, i'm not sure someone would dedicate an entire module to it
19:04 < CoverSlide> i suggest reading the source in /lib
19:04 < s5fs> eindoofus: that being said, you're not learning a java framework so it's not like you'll invest 100hrs and then throw it all away.
19:04 < jamescarr_> CoverSlide, it's code I don't want to write over and over ;)
19:05 < jamescarr_> CoverSlide, I've done it more times than I care to count
19:05 < CoverSlide> jamescarr_: https://npmjs.org/package/clone
19:05 < CoverSlide> and it's starred by substack
19:06 < eindoofus> s5fs: I was also considering learning Ruby on Rails, what do you think will be beneficial in the long-term in terms of the job market?
19:06 < jamescarr_> yep, found it
19:06 < jamescarr_> thanks
19:06 < CoverSlide> for the job market? learn PHP and ASP.NET
19:06 < s5fs> eindoofus: haha, learn java!
19:06 < CoverSlide> and some rails on the side
19:06 < s5fs> eindoofus: forget programming entirely, become a lawyer or a banker
19:06 < eindoofus> lol
19:07 < jamescarr_> eindoofus, well they have a point
19:07 < jamescarr_> a large segment of the market you'll find yourself at the mercy of clueless managers
19:07 < superjoe> durango, I implemented your feature request
19:07 < s5fs> eindoofus: but, if you're dead set on programming, the better question is 'which do i learn first'
19:07 < durango> superjoe: thanks :) is npm updated?
19:07 < CoverSlide> I've seen more rails shops crop up recently
19:07 < superjoe> durango, yes
19:07 < s5fs> eindoofus: so, right now, rails seems more marketable, there's a lot more available rails positions. node is still niche, meaning that you're competing for less positions with less candidates.
19:08 < durango> awesome thanks man :)
19:08 < kuja> Not a bad thing IMO, I wish the PHP job market would shrink. I firmly believe it to the source of much agony in the entire web development community :p
19:08 < s5fs> kuja: so many ppl have invested years in php that it'll be a very slow death indeed
19:08 < pyrotechnick> php is awesome
19:08 < phrearch_> hello
19:08 < eindoofus> do you think it will die, or will people just stick to it?
19:09 < phrearch_> what documentation generators are out there for node.js?
19:09 < kuja> See s5fs's reply for an answer to that :)
19:09 < s5fs> eindoofus: i wrote cobol for 8 years.. i'm 32. it seems nothing ever truly dies.
19:09 < phrearch_> i want to setup function documentation, but dont know what syntax/style is being used generally
19:10 < s5fs> eindoofus: in general, i say follow your bliss. play with rails, play with node. dive deep into learning whichever you find more attractive, do whatever makes you happy. both pay well and neither will be the only tool you need.
19:10 < tnorris> phrearch_: if you find it, let me know.
19:11 < eindoofus> thanks. do you know where I could find a good book on express, or some documentation
19:11 < kuja> Yep... don't do something because that's where the market is, because chances are if you are good at something you can get a job doing it. Whether that's Rails, Django, Node, PHP, Java, ASP whatever
19:11 < kuja> Just do whatever you have the most fun doing
19:11 < s5fs> eindoofus: expressjs.com, read their docs. then, go find their github repo and read the examples.
19:11 < eindoofus> cool, will do.
19:11 < s5fs> kuja: that and once you learn something, you also learn its defects. everything i use sucks, everything ;-)
19:12 < eindoofus> lol
19:12 < phrearch_> tnorris: i found docco and groc
19:12 < eindoofus> thanks you guys for all you input. take care
19:12 < s5fs> eindoofus: if you want detailed tutorials, screencasts, etc then go rails. it's got a lot larger community behind it and more hand-holding for new users. node is a bit more rough-and-ready, still pretty new and you have to be a bit more of a self-started. i think node folks are the hardier of the two groups, but i'm clearly biased.
19:13 < tnorris> phrearch_: I used jsdoc way back when. this looks like a more recent implementation: http://jsdoc.info/
19:14 < phrearch_> tnorris: looks good
19:14 < phrearch_> i like the doc coverage part. hope thats included
19:15 < phrearch_> heh awesome. generates straight from github
19:18 < syskk> chovy: https://github.com/LearnBoost/mongoose/pull/1160 ;) let me know what you think about this syntax
19:18 < Cainus> hey all... anyone know how I can catch EPIPE exceptions from a pipe()?  Do I attach an 'error' event handler to the readable first?
19:19 < CoverSlide> Cainus: yes
19:22 < Cainus> CoverSlide: thanks
19:29 < vicapow> so apparently there IS a difference between require('Canvas') and require('canvas') :(
19:31 < eddyb> vicapow: modules are stored in folders that have the name of the module. filesystems (well, apart from ancient stuff like FAT) are case-sensitive, but windows likes to hide that
19:32 < vicapow> eddyb: they're not *really* case-sensitive
19:32 < eddyb> NTFS is case-sensitive
19:32 < eddyb> windows abstracts that away
19:32 < vicapow> if I cd node_modules/Canvas or  that's the same thing as cd node_modules/canvas
19:32 < vicapow> (in unix)
19:32 < eddyb> vicapow: as I said, that's windows, not the FS
19:33 < eddyb> you cannot do that in unix, what's wrong with you?
19:33 < vicapow> eddyb: yeah you can
19:33 < eddyb> also, you have a strange char in your first node_modules
19:33 < vicapow> there's no need to attack my character..
19:33 < eddyb> vicapow: what FS is that on?
19:33 < vicapow> OS X
19:33 < eddyb> and what FS does it use?
19:34 < eddyb> I want to look it up before I continue spewing stuff at you :)
19:34 < CoverSlide> OSX you can format to case-insensitive
19:34 < vicapow> i have no idea
19:35 < carlmunn> vicapow: you can't 
19:35 < vicapow> but i do know that require('Canvas') and require('canvas') cost me like two hours of debugging ;(
19:35 < vicapow> carlmunn: you can't wait?
19:35 < CoverSlide> vicapow: type mount in terminal
19:35 < CoverSlide> /dev/disk0s2 on / (hfs, local, journaled)
19:36 < vicapow> CoverSlide: why?
19:36 < eddyb> http://en.wikipedia.org/wiki/File_system#OS_X
19:36 < eddyb> uhm, is OS X the only UNIX in use that actually does that stupid shit?
19:36 < CoverSlide> I think it comes case-insensitive by default
19:36 < eddyb> the FS is case-sensitive, so it must be the OS
19:36 < CoverSlide> i think so
19:37 < s5fs> eddyb: other unices do different stupid shit ;-)
19:37 < eddyb> vicapow: but I'm curious what mount says for you
19:37 < s5fs> unixes? wtf is the term these days /grump
19:37 < eddyb> s5fs: unisex
19:38 < s5fs> unisex unitards for eunuchs
19:38 < janmower> there was a couple CaseInsensitive unixes out there, and they all sucked balls
19:38 < eddyb> I'm a perfectionist, so by definition, I hate everything
19:38 < CoverSlide> weird, i do stat /DEV/RANDOM and i get file not found, but stat /DEV/random I get stuff. i guess devfs is still case sensitive
19:38 < eddyb> I just happen to hate on windows more
19:38 < eddyb> CoverSlide: that's just wrong
19:39 < CoverSlide> stat /ETC/BASHRC works
19:40 < eddyb> vicapow: anyway, if you wouldn't have assumed case insensitivity (what's wrong with you, you're supposed to write JS code), you wouldn't need hours of debugging to fix it
19:40 < janmower> question: how are pull requests for nodejs made?  against master?  i signed up for ml+clickthru agreement
19:40 < eddyb> </rant language=enUS.partially_broken>
19:40 < CoverSlide> janmower: for general features I think it's master
19:40 < CoverSlide> for bugfixes i think you work on the branch
19:41 < janmower> CoverSlide: that's what I was assuming, but you know what they say about assuming
19:41 < vicapow> eddyb: my os assumes case insensitivity. why shouldn't my program? it loaded the same module, but in two difference instances. so i ended up with two different js modules loaded from the same file
19:42 < eddyb> vicapow: oh, so you're complaining because node.js doesn't cache your two *obviously different modules* as the same instance
19:42 < eddyb> vicapow: why should node.js conform to a broken default setting?
19:42 < vicapow> eddyb: yeah. but they were they loaded the same file, just in two different instances
19:44 < eddyb> engrish. and 'canvas' != 'Canvas'. mind you, that's the operator that tells you 0 and '' aren't different
19:44 < vicapow> eddyb: also. exactly. i don't think node.js should conform to a broken default setting. that's why it require should be case insensitive
19:44 < eddyb> vicapow: case insensitivity is wrong
19:45 < vicapow> eddyb: that's a convincing argument
19:45 < eddyb> I'm about to go take a well-deserved sleep
19:45 < eddyb> internet, please take over
19:45 < cpetzold> does anyone know how to make a c++ add-on class extendable in js?
19:46 < eddyb> vicapow: http://drewthaler.blogspot.com/2007/12/case-against-insensitivity.html
19:46 < vicapow> cpetzold: should be the same way you would do it with regular js.
19:47 < cpetzold> vicapow: i'm having a problem with the internal field count of "this": https://github.com/joyent/node/blob/master/src/handle_wrap.cc
19:47 < cpetzold> erm sorry
19:48 < cpetzold> vicapow: https://github.com/joyent/node/blob/master/src/node_object_wrap.h#L71
19:48 < Sonderblade> an oft cited study done a decade ago or so found that case-insensitive languages were easier to learn for beginners than case sensitive ones
19:49 < jamescarr_> mikeal, is there a good example of using request with multipart/form-data?
19:49 < jamescarr_> mikeal, the example in the readme shows appending stuff to the form, but leaves the callback portion out
19:49 < cpetzold> when i call Wrap here: https://github.com/cpetzold/toy/blob/master/src/Game.cc#L17
19:49 < CoverSlide> the solution to that is to never use uppercase
19:51 < vicapow> just seems like node should mimic the behavior of the os in this case. my os things its the same file but node things is different :(
19:51 < cpetzold> it works fine when i instantiate 'Game' by itself, but when i try to instantiate an extended class from it, it fails with "ssertion failed: (handle->InternalFieldCount() > 0), function Wrap, file ../src/node_object_wrap.h, line 71."
19:52 < vicapow> cpetzold: in the class you're extending, are you sure you're also calling your Game constructor?
19:53 < vicapow> cpetzold: well. in the constructor of the class extending game, that is
19:54 < CoverSlide> cpetzold: define "extended class"
19:54 < cpetzold> vicapow: yeah, i believe so.. i'm using coffeescript, and i believe it's calling it the same way you would with just vanilla js: https://github.com/cpetzold/toy/blob/master/examples/pong/src/pong.coffee
19:55 < cpetzold> let me try util.inherits
19:55 < cpetzold> with vanilla js
19:55 < vicapow> cpetzold: sorry. i dont know coffee script
19:56 < cpetzold> or just a simple __proto__ = 
20:00 < fnguest> hi, i'm trying to loop through a list of items in dust.js but it doesn't seem straightforward.  is there a templating system that makes it easier to have for loops?
20:04 < cpetzold> vicapow: CoverSlide: http://pastie.org/private/yrbvqi9suxsfyax7x0jw8q
20:04 < cpetzold> still gives me the same error :(
20:05 < AttackingHobo> fnguest: I have not used dust.js
20:05 < AttackingHobo> but can't you just do the forloops the java way?
20:05 < AttackingHobo> javascript
20:06 < vicapow> cpetzold: I'm sorry. I don't have the expertise to help you more then that.
20:06 < cpetzold> vicapow: np, thanks :)
20:06 < vicapow> cpetzold: you might have better luck posting your question to the node.js mailing list
20:11 < scttnlsn> creating a pipeline of readable/writeable "through" streams that process the given data...can those streams be async like this http://pastie.org/5069597 ?
20:12 < CoverSlide> scttnlsn: soytinly, why not
20:13 < AndreasMadsen> scttnlsn: streams do ussually invoke something async, but you should consider supporting backpressure
20:13 < AndreasMadsen> *usually
20:13 < scttnlsn> why do modules like map-stream exist?  is that purely to make it easier to write async through streams or are there weird race conditions to watch out for
20:16 < AndreasMadsen> scttnlsn: after a quick read of the map-stream I can say that is supports backpressure and that is usually important when preventing race conditions
20:16 < jamescarr_> man
20:16 < AndreasMadsen> man node
20:16 < lohkey> scttnlsn: it's just a convenience abstraction for through streams
20:17 < lohkey> kind of hard to associate back pressure with race conditions
20:18 < AndreasMadsen> lohkey: why is that, if I'm writing to a stream there don't support buffering and don't support backpressure and the stream is busy, then you have writen to fast to it without knowing. Is that not a race conditions?
20:19 < lohkey> AndreasMadsen: dropped data isn't a race condition issue, thats a data issue
20:20 < lohkey> also, back pressure isn't buffering
20:20 < AndreasMadsen> lohkey: ^-- did I say that? 
20:20 < lohkey> the nagle algorithm in tcp _without_ buffering is a good example of back pressure
20:21 < scttnlsn> so say that you want to provide back pressure if the async call fails- how do you do that?  it's already to late to return false
20:21 < lohkey> race conditions are more along the lines of 2 concurrent operations munging a single data point due to bad/missing locking or bad concurrency
20:22 < scttnlsn> map-stream does not address this either
20:22 < jamescarr_> anyone here using mikeal's request module to submit multipart/form-data with files?
20:22 < lohkey> scttnlsn: depends on your concurrency flow
20:23 < CoverSlide> jamescarr_: https://github.com/mikeal/request#forms
20:23 < AndreasMadsen> scttnlsn: you will return false immediately and emit drained when writing is allowed again.
20:24 < scttnlsn> AndreasMadsen: ahh, right
20:24 < jamescarr_> CoverSlide, yeah, I filed an issue about the docs
20:24 < jamescarr_> CoverSlide, it doesn't show actually submitting the form after appending to it
20:24 < jamescarr_> I'm lost. How do I submit it? Where does my callback to handle the response go?
20:24 < AndreasMadsen> lohkey: I agree, my bad. But I assume we can agree that backpressure is important :)
20:25 < lohkey> well yeah of course, no one said it wasn't :p
20:26 < othiym23> are there any good node.js JSON schema validators?
20:26 < jamescarr_> CoverSlide, I've tried piping it, calling the submit method, putting the cb in the request method call, etc
20:26 < jamescarr_> nothing
20:26 < othiym23> asking for a friend
20:27 < othiym23> although I'll probably use it myself, as I have some sorta noxious JSON I would not mind tying to a schema
20:27 < jamescarr_> othiym23, https://npmjs.org/package/jsonschema ?
20:27 < aandy> othiym23: validators how? as in boolean valid or not, or "syntax error at char X"?
20:28 < othiym23> aandy: the latter would be k-rad, although an oracle is better than nothing
20:28 < othiym23> looking at kriszyp/json-schema and indexzero/resourcer right now
20:29 < indexzero> othiym23: You shouldn't be looking at resourcer. I rewrote more of that into flatiron/resourceful: https://github.com/flatiron/resourceful
20:29 < othiym23> k thx indexzero 
20:29 < indexzero> othiym23: resourceful uses the revalidator JSON schema validator: https://github.com/flatiron/revalidator
20:29 < othiym23> even better!
20:30 < othiym23> thx d00d
20:30 < lohkey> AndreasMadsen: you're a ninja, how'd you find me on github :p
20:30 < CoverSlide> ok seriously, there needs to be a character limit on package names
20:30 < CoverSlide> these modules like 'a' or 'i' ... wtf
20:32 < CoverSlide> we gon' rock this club, we gon' go all night, we gon' light it up, like it's dy-no-mite!
20:33 < AndreasMadsen> lohkey: it was quite easy (ninja language) I search for you on google found your npm page, that described the link between and JosephMoniz on github, however there was some url issue so I tried some random inputs until I found your github page.
20:34 < lohkey> cool :)
20:35 < AndreasMadsen> lohkey: I don't hope that lohkey is your secret hacker name :)
20:37 < AndreasMadsen> wee, reached 50 github watchers :)
20:37 < lohkey> AndreasMadsen: lol, definitely not a secret, i just wish i could use it everywhere
20:38 < othiym23> CoverSlide: but then q wouldn't have nearly as distinctive a module name!
20:40 < eMarek> hi
20:42 < eMarek> does anybody here has some experiance with forever and nodemon?
20:43 < AndreasMadsen> eMarek: perhaps, but consider asking at #nodejitsu about forever, since they write the module.
20:44 < superjoe> eMarek, what's the question?
20:44 < eMarek> AndreasMadsen: tnx, i will try there
20:44 < eMarek> superjoe: i am trying to use forever and nodemon
20:45 < eMarek> forever works and nodemon works, but when i am using them together, i got somekind of error
20:45 < eMarek> error:   Cannot start forevererror:   script /root/nodemon does not exist.
20:45 < superjoe> eMarek, I don't think you can use those things at the same time
20:46 < superjoe> eMarek, I recommend using node-dev in development
20:46 < eMarek> i got the idea right here https://github.com/remy/nodemon#using-nodemon-with-forever :)
20:52 < jamescarr_> +
20:53 < rodyhaddad> Hey guys, what's the easiest way to install node.js on OSX?
20:53 < eMarek> superjoe: will node-dev restart the node process, if there is somekind of bug?
20:53 < siksia> rodyhaddad: either download from nodejs.org or brew install node
20:54 < superjoe> eMarek, yes. and instead of watching a folder, it actually overrides require so it will restart no matter what file is changed
20:54 < pyrotechnick> rodyhaddad: by pkg: http://nodejs.org/download/
20:54 < rodyhaddad> oh, thx :D
20:55 < pyrotechnick> rodyhaddad: you can even skip the installer with https://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man8/installer.8.html
20:55 < eMarek> superjoe, nice. do you recommend node-dev for production server?
20:55 < superjoe> eMarek, absolutely not
20:55 < superjoe> IMO you should not have something waiting to restart your server when a file timestamp changes
20:55 < eMarek> why not?
20:56 < pyrotechnick> rodyhaddad: instructions http://codesnippets.joyent.com/posts/show/322
20:56 < siksia> eMarek: would totally leave a gaping hole in your app security-wise
20:56 < siksia> could let someone root your system
20:57 < siksia> REALLY bad idea
20:57 < rodyhaddad> pyrotechnick, it's good, I finished installing :P (last time I installed node on a mac, there wasn't an installer, it made it a lot easier :D)
20:57 < pyrotechnick> thank siksia
20:57 < pyrotechnick> siksia is a pretty cool guy and doesn't afraid of anything
20:58 < s5fs> anything?
20:58 < eMarek> siksia, superjoe, i am very new to node. why is there problems with sercurity while restarting the node process?
20:59 < eMarek> i don't understand
21:00 < pyrotechnick> eMarek: FUD if they're touching your files you have bigger problems than your server restarting
21:00 < s5fs> eMarek: if I, a rogue hacker, am able to upload a file to your server, it will immediately be put into production after the node process restarts. that's the security concern, someone can deploy a file and it will go right into production.
21:00 < pyrotechnick> logical fallacies are being committed
21:01 < s5fs> pyrotechnick: while i agree, security is about layers and removing the "restart" step from the "deploy" step helps, even if it's just a tiny bit
21:01 < pyrotechnick> that's obscurity not security
21:01 < pyrotechnick> security by obscurity is a myth
21:02 < s5fs> pyrotechnick: it's not obscurity at all, i'm not obscuring anything, merely adding an additional step (in addition to deploying a 'bad' file, the attacker also has to restart my node process)
21:02 < pyrotechnick> my point still stands: if they're touching your files you have bigger problems than your server restarting
21:02 < s5fs> obscurity alone is not a valid security model, but it certainly doesn't hurt. why else would you run ssh on a non-standard port?
21:02 < s5fs> pyrotechnick: again, i agree. i'm just saying that this method has *some* value, not *zero* value.
21:02 < eMarek> so you guys manually restart node process, when you develop something new?
21:03 < s5fs> meeting, gtg
21:03 < pyrotechnick> to break down standards and conventions and inconvenience yourself and your team
21:03 < pyrotechnick> in the pursuit of feeling more like a badass rockstar hacker
21:04 < siksia> eMarek: big difference between dev and prod
21:04 < siksia> in dev it's totally ok to do things to make your life easier
21:04 < pyrotechnick> staging is where it's at
21:04 < siksia> in prod, you shoot for stability
21:05 < siksia> hence, hot-reloading files is a really bad idea
21:05 < siksia> security (non)issues aside, it's a really bad practice
21:05 < pyrotechnick> FUD
21:06 < siksia> pyrotechnick: give me a scenario where it would be a good idea to hot-reload code changes on a production server
21:07 < pyrotechnick> siksia: reality
21:07 < eMarek> hm. good thinking.
21:07 < eMarek> i have one good example
21:07 < eMarek> let's say
21:07 < CoverSlide> WRONG
21:08 < superjoe> siksia, what exactly do you mean by "hot reload changes"?
21:08 < pyrotechnick> CoverSlide: fuddy was quite good, thankyou
21:08 < pyrotechnick> futty
21:08 < eMarek> i have a bug in my code. when user click klick sth, he just kill node proc
21:08 < pyrotechnick> CoverSlide: i've already began to forget that entire windows encounter. that's progress
21:08 < eMarek> and it is bug, that you need one day to fix them
21:09 < CoverSlide> eMarek: that's why you test your code before putting it into production
21:09 < eMarek> so one day the aplicaion will be down?
21:09 < siksia> superjoe: server polling filesystem for file changes and reloading the code
21:09 < superjoe> ah. yes that sounds like a nightmare
21:09 < eMarek> CoverSlide: maybe you are true
21:09 < siksia> not a bad idea for config files, but definitely not code
21:09 < superjoe> eMarek, are you merely looking for a way to deploy code to production?
21:10 < CoverSlide> usually in that case you'd revert to an older version until you're sure the code is good
21:10 < EyePulp> is there a "force" or overwrite method for npm to install my package.json?
21:10 < CoverSlide> if there is no older version, then that's a good reason to wait to put something in production
21:10 < EyePulp> I see update
21:10 < eMarek> superjoe: yeah
21:10 < superjoe> eMarek, you can try this: https://github.com/indabamusic/naught
21:11 < TehShrike|Work> I haven't messed with hot-loading modules yet, but if I did, I'd be pretty tempted to try it via running multiple processes that could communicate via dnode
21:11 < pyrotechnick> EyePulp: `npm help install`
21:11 < pyrotechnick> EyePulp: --force
21:12 < EyePulp> pyrotechnick: thanks - I didn't see --force
21:12 < pyrotechnick> EyePulp: sometimes you have to be looking for it to see it
21:12 < superjoe> ha
21:12 < EyePulp> pyrotechnick: that's very zen of you
21:12 < pyrotechnick> you gotta have faith
21:13 < groundup> I am just starting to learn Node.js (haven't even installed it yet). Everything tells me to use Nginx as a front-end which makes sense to me. However, is there a reason to use HTTP over FastCGI for node.js?
21:13 < TehShrike|Work> The first step to getting your eyes poked out is opening them
21:13 < pyrotechnick> nice and self-defeatist of you
21:13 < TehShrike|Work> ;-)
21:13 < TehShrike|Work> groundup: you don't need a front-end for node.js
21:14 < TehShrike|Work> People use them, for various reasons
21:14 < pyrotechnick> my favourite is php's new inbuilt http server
21:14 < TehShrike|Work> But a traditional HTTP server is a bit more complicated than some other solutions
21:14 < groundup> I know that I don't need it but everyone highly recommends it
21:14 < TehShrike|Work> pyrotechnick: srsly?
21:14 < pyrotechnick> you'll never know
21:14 < _kud> Hello
21:15 < eMarek> CoverSlide: i am php developer and working on one big aplication. we dont user testing unit or similar. we have so may bugs, that our aplication will be constantly down, if we were using node :)
21:15 < pyrotechnick> nevertheless it's a nice honey-pot for scriptkiddies
21:15 < pyrotechnick> it's rather confuzzling
21:15 < _kud> I've a got a question. I'm using an ubuntu virtualmachine on my windows and as I use shared folders I can't do any symlinks between my vm and the shared folders
21:15 < CoverSlide> eMarek: all the better reason that YOU don't push code immediately to production
21:15 < _kud> npm though uses symlinks and so it's broken when i want to install any node_modules
21:16 < _kud> do you have any solution to install modules on a shared folder so?
21:16 < pyrotechnick> _kud: i found them to be kinda dodgy. my advice is to treat the vm like a remote server and use scp or git or something
21:17 < _kud> hmmm
21:17 < _kud> for the moment i install modules via -g and cp my module to my project
21:17 < pyrotechnick> _kud: the skills you learn in the process help out when you deploy later anyway
21:17 < _kud> it works but a bit boring
21:17 < siksia> eMarek: you need to invest some time in testing -- it will save you loads in the long run
21:17 < eMarek> CoverSlide it is allways the deadline problem. i am just a developer, i thnik we have some problems at work organization
21:17 < _kud> the thing pyrotechnick is I edit my files via sublime text on windows
21:18 < _kud> on my shared folder
21:18 < gkatsev> isn't there npm link for linking a global module to current node_modules?
21:18 < eMarek> siksia i know, tell to my boss :D
21:18 < siksia> eMarek: pad your estimates to include time for testing
21:18 < TehShrike|Work> _kud: hey, I'm about ready to start doing the same thing!  What are you using?
21:18 < TehShrike|Work> I was figuring on using WebDrive
21:18 < _kud> what do you mean TehShrike|Work?
21:18 < pyrotechnick> you can lead a horse to water but you can't make it drink
21:18 < _kud> I use virtualbox with shared folders
21:18 < TehShrike|Work> _kud: ah, cool
21:19 < _kud> and I use my VM as terminal for my windows
21:19 < _kud> with all unix/linux stuff
21:19 < _kud> can easily install ruby, npm, nginx, whatever
21:21 < prestonparris> can anyone explain to me why if i define an array , var test = ["blah",,"bleh"]; test.map(function(i){ return i.prop; }); returns [undefined, , undefined] and not [undefined, undefined, undefined] ??
21:22 < CoverSlide> prestonparris: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/map#Description << read the first paragraph
21:23 < eMarek> superjoe: i like naught
21:23 < eMarek> maybe i will try it
21:31 < prestonparris> CoverSlide: thanks, so basically it just never iterates over the blank item in the array and returns it?
21:34 < pringlescan> I have a weird question. I was looking for modules to do an HTTP proxy in node, but not a reverse proxy, an HTTP proxy in the normal sense, that I'd use with my browser. I need to do some testing and analyze requests.
21:34 < pringlescan> Do you guys think it's better to run a proxy in node or pipe log output from squid or another proxy?
21:39 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:46 < MI6> joyent/libuv: Bert Belder multisig * 8f9f158 : fixup: fix valgrind warnings in test helpers - http://git.io/vsw_qQ
21:47 < mikeal> there is an example of using multipart form in the README :)
21:54 <@Nexxy> OMG... *the* mikeal?!
21:55 < nathan7> mikeal: Ahoy
21:56 < nathan7> mikeal: I was thinking of writing a patch to allow for per-domain request limits
21:56 < nathan7> mikeal: like, an API that allows 1 req/sec
21:56 < nathan7> mikeal: I should be able to fire request() and not worry about that
21:57 < LouisT> greetings
21:59 < mikeal> nathan7: the agent already has a max size for concurrent requests
21:59 < mikeal> also, if you just queue them, it's basically leaking :)
22:12 < GtoXic> Hiya, anyone online to help?
22:13 < AviMarcus> GtoXic, lots of folks here. Best bet is to ask a clear, coherent question and see what happens.
22:14 < pyrotechnick> it's okay i already read his mind, then read the minds of everybody who would otherwise response then telepathically answered for us
22:14 < pyrotechnick> as you were.
22:15 < context> gtoxic: no. no one is online at all
22:15 < pyrotechnick> only you're online http://en.wikipedia.org/wiki/Solipsism
22:15 < GtoXic> I have https://gist.github.com/c20bb8871eacce58f7bc but nothing is being returned by testServer() whatsoever.
22:16 < context> is it solipsistic in here or is it just me?
22:16 < pyrotechnick> you know.
22:17 < context> i have a shirt that says that
22:17 < context> gtoxic: does the connection ever close ?
22:17 < pyrotechnick> your mind has thought of a shirt that says that
22:17 < pyrotechnick> nothing more.
22:17 < context> woooo...
22:18 < context> gtoxic: given we have /no/ idea what you are connecting too
22:19 < GtoXic> context: my server at port 22, and no, but now that you mention it, how would I go about that? conn.on('connect',function(){ conn.end(); }); ?
22:19 < context> gtoxic: connect() takes a connection listener
22:20 < context> actually
22:20 < context> no where do i see net.connect() takes server, host in that order for params
22:20 < GtoXic> I've just thought of a better way to do this
22:20 < context> i see port, host
22:20 < context> gtoxic: calling methods the proper way ?
22:22 < duko> i would like a recommendation for a non-jquery javacript calendar
22:23 < GtoXic> https://gist.github.com/c20bb8871eacce58f7bc <-- new code
22:23 < GtoXic> still nothing being returned
22:23 < GtoXic> actually, it's acting as if testServer() isn't being called
22:23 < context> gtoxic: is it reading servers.json properly ?
22:24 < context> MOAR console.log
22:24 < GtoXic> yep, I checked that
22:24 < context> console.log == THE best debugging tool evar !@#
22:24 < GtoXic> node poll.js
22:24 < GtoXic> { 'toxic-productions': { host: 'toxic-productions.com', port: 22 } }
22:25 < context> hash has a forEach method ?
22:25 < context> undefined here
22:25 < GtoXic> see the prototype
22:25 < context> err object
22:25 < context> i see an object
22:25 < context> object here has no forEach method
22:26 < GtoXic> if ( !Object.prototype.forEach ) {
22:26 < context> oh nm
22:26 < Puru> how to organize a node.js project
22:26 < context> gtoxic: so inside your forEach, console.log(server)
22:26 < dweekly> I'm running into some interesting edge cases with the node-imap module by mscdex_ (you around? :) )
22:26 < context> console.log after the testServer call, and validate its returning
22:27 < context> that /should/ return instantly saying "Failure"
22:27 < Gottox> gosh, I really should remove my "tox" highlight on this channel.
22:28 < context> or... nearly instantly
22:28 < context> gottox: object.length gives me undefined as well.
22:28 < context> your forEach isn't doing anything/
22:29 < context> gottox: MOAR console.log will cure your problems.
22:29 < GtoXic> for(var server in servers){ works but the forEach doesn't
22:29 < GtoXic> I blame the interwebs
22:30 < GtoXic> ok, so we have some kind of success
22:30 < GtoXic> Error: connect ECONNREFUSED
22:31 < GtoXic> new code https://gist.github.com/c20bb8871eacce58f7bc
22:31 < GtoXic> now I just need to make it return the time and not "Failure" :/
22:32 < GtoXic> only thing I hate with asynchronous functions :(
22:34 < GtoXic> context: Any ideas?
22:36 < jack78> Hello
22:45 < groundup> I am kind of confused on something. Say I have a MySQL query that I run and the results of that are part of a condition later on in the code. How do I wait for the result so I can check the condition?
22:48 < astropirate_> groundup, in the callback
22:48 < astropirate_> dostuff(  function(error, result) {  i can haz results?  }  )
22:49 < groundup> In the callback, wait? How about I have a bunch of queries which get parsed and then later on they are used in a template. The template must be done in a specific order
22:55 < tnorris> looking at bootstrap for the first time. it must have taken effort to use every hipster js syntax in existence.
22:55 < ChrisPartridge> tnorris: they tried pretty hard
22:56 < ChrisPartridge> groundup: don't get stuck in call back hell, use an async library, or abstract your data layer to something more manageable
22:56 < tnorris> ChrisPartridge: i'm being facetious, but do you think they actually tried to?
22:57 < groundup> ChrisPartridge: what I don't understand though is how the callback populates the necessary objects before I output the template.
23:00 < MI6> joyent/libuv: Bert Belder multisig * 621e45e : address comments - http://git.io/Dye0Jw
23:07 < ChrisPartridge> groundup: you need to compile the results of all the queries into an object, that can be passed to your template
23:08 < fnguest> hi, i'm trying to loop through a list of items in dust.js but it doesn't seem straightforward.  is there a templating system that makes it easier to have for loops?
23:08 < groundup> That I understand. How do I wait for the results of the queries before I call the template function?
23:09 < ChrisPartridge> groundup: can you gist some code of what you have at the moment?
23:09 < groundup> I don't have anything. I am only trying to learn the basics.
23:09 < MI6> joyent/libuv: Bert Belder multisig * 9847b7f : fix os x - http://git.io/ad-Izw
23:10 < VooDooNOFX_> What's the recommended way to debug an app? I'm used to python's interactive debugger providing tracebacks with local() and global() introspection. Anything like that for a node.js server-side app?
23:11 < ChrisPartridge> VooDooNOFX_: you could try node-inspector
23:12 < groundup> In pseudo code: get_db(); cars = db.query('SELECT * FROM cars'); for(i=0;i<10;i++) console.log(cars[i]) + '<br>';
23:13 < ChrisPartridge> groundup: generally you are dealing with async, so you dont do cars = query, you do query('blah', function(err, result) { // do stuff here with result });
23:13 < groundup> That would be a sync query, but lets say I used a callback there...
23:14 < ChrisPartridge> fnguest: don't you just do {#nameOfArray}<html>here</html>{/nameofArray} ?
23:15 < fnguest> ChrisPartridge: i'll try
23:19 < ChrisPartridge> groundup: you want to go async, otherwise no point really using node IMO
23:21 < groundup> I guess my question is confusing... so, I get the route I want to take, then I figure out all of the data that I need to get from the database, then I load a template and I want to fill in values in that template based on what was in the database. That is 3 "parts" to the system. Each system should be async but the parts need to run in-sync.
23:22 < chovy> groundup: if you've done any ajax requests client side, it's the same model. You provide a callback for when the event is finished
23:22 < groundup> ok, I guess that makes more sense.
23:22 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
23:27 < MI6> joyent/libuv: Bert Belder master * 1e32cb0 : unix: support signal handlers outside the main loop (+4 more commits) - http://git.io/DFSkBg
23:43 < _ritch> anyone able to get JS function names using dtrace/flamegraphs w/ 64bit node on smartos?
23:45 < othiym23> _ritch: bcantrill told me that it doesn't work and to use 32-bit instead
--- Log closed Wed Oct 17 00:00:23 2012
