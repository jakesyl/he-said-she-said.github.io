--- Log opened Wed Nov 07 00:00:26 2012
00:27 < tehlulz> Morning guys
00:30 < MI6> joyent/node: Nathan Rajlich master * 3c91a7a : readline: use a "string_decoder" to parse "keypress" events  While updati (+1 more commits) - http://git.io/VqEXhg
00:32 < wookiehangover> morning, tehlulz
00:32 < wookiehangover> AUS?
00:33 < tehlulz> I certainly am :)
00:48 < mscdex> how did Roseanne Barr get on the ballot?
00:48 < mscdex> with 2,000 votes
00:48 < mscdex> :S
00:55 < othiym23> mscdex: perhaps it was her stirring rendition of the national anthem in days of yore
01:06 < mnaser> FUCK YES.
01:06 < mnaser> FINALLY SOLVED
01:28 < dested> http://blog.iceddev.com/2012/11/05/node-js-in-chrome/ this is really interesting, anyone try this yet?
01:29 < dested> im gonna try to run my node project in it, might make for easier debugging and profiling 
01:32 < jtmitch> is voodootikigod around?
01:35 < jtmitch> his package always errors out on downloading node-v0.8.14.tar.gz and I don't get it
01:44 < severla> what NODE_PSYMBOL does ?
01:48 < jtmitch> no idea
01:48 < polotek> severla: I believe it's a macro that creates a persistent string handle in v8
01:49 < polotek> severla: https://github.com/joyent/node/blob/master/src/node.h#L98
01:50 < polotek> Creating a symbol reuses the same memory for the string instead of creating a new one each time.
01:50 < polotek> More efficient for things like common property names.
01:51 < severla> ah got it :)
01:54 < mdedetrich> hey boys and girls
01:55 < WarheadsSE> jtmitch: huzzah
01:56 < jtmitch> huzzah WarheadsSE 
01:57 < WarheadsSE> so what now, broke how?
01:57 < jtmitch> I didn't say broke
01:57 < jtmitch> ;/
01:57 < jtmitch> I was trying to get serialport loaded through npm install and voodootikigod (I think) had mentioned there was some headaches with Arch Arm in that regard
01:58 < WarheadsSE> None that I have been made aware of.
01:58 < voodootikigod> not with node
01:58 < voodootikigod> just have never 
01:58 < voodootikigod> tested sp + arch + rasp-pi
01:58 < WarheadsSE> ah
01:58 < voodootikigod> so like
01:58 < WarheadsSE> mine isnt hooked up and I can't do that atm
01:59 < jtmitch> but the gist I sent him indicated that it was getting stuck downloading node-v0.8.14.tar.gz
01:59 < tooijar> Anyone know of a good set of HDMI display glasses?
01:59 < TooTallNate> jtmitch: can you show me the output with --verbose?
01:59 < jtmitch> https://gist.github.com/4024319
01:59 < jtmitch> oh...sure TooTallNate 
02:00 < jtmitch> the gist is from npm install when trying to install johnny-five
02:00 < jtmitch> fyi
02:00 < WarheadsSE> I knew he'd chime in :P
02:00 < TooTallNate> jtmitch: are you behind a firewall?
02:00 < jtmitch> I'm going to wish I had cat'd that aren't I
02:00 < jtmitch> at this time... yes
02:01 < jtmitch> I don't suppose verbose dumps to a log by any chance?
02:01 < TooTallNate> jtmitch: negative
02:01 < TooTallNate> jtmitch: what happens when you access http://nodejs.org/dist/v0.8.14/node-v0.8.14.tar.gz in your browser though?
02:01 < jtmitch> well... rookie shits
02:01 < jtmitch> TooTallNate: it downloads 
02:01 < WarheadsSE> jtmitch: ever used sprunge?
02:02 < TooTallNate> jtmitch: oh, cause proxy is configured in the browser probably
02:02 < jtmitch> WarheadsSE: negative
02:02 < TooTallNate> jtmitch: you can pass --proxy=http://url-of-my-proxy.com
02:02 < jtmitch> TooTallNate: Negative...ish
02:02 < jtmitch> I don't use a proxy for my browser - at least not one that I set
02:02 < TooTallNate> jtmitch: can you download the file via curl?
02:02 < jtmitch> sometimes - when I'm feeling all rebelious - I sshuttle and use my home net too look at... stuf
02:03 < jtmitch> TooTallNate: one minute...
02:03 < jtmitch> pi can only do like 0.4 tasks at once....
02:03 < TooTallNate> jtmitch: i'm aware :p
02:03 < jtmitch> I have it's cpu overclocked to operate at the speed just below frustration
02:03 < TooTallNate> jtmitch: n8.io runs on a pi
02:03 < jtmitch> what is n8.io?
02:04 < TooTallNate> my blog
02:04 < jtmitch> lol
02:04 < jtmitch> google just answered that as well
02:04 < jtmitch> but on raspian (debian version) ?
02:05 < WarheadsSE> I'd bet :P
02:05 < jtmitch> can I gist a file from command line?
02:05 < jtmitch> for the output of --verbose?
02:06 < WarheadsSE> i think there is a command...
02:06 < TooTallNate> jtmitch: npm install gist
02:06 < TooTallNate> :p
02:07 < WarheadsSE> <command> | curl -F 'sprunge=<-' http://sprunge.us
02:07 < TooTallNate> WarheadsSE: woah, neat
02:08 < jtmitch> Love commedians....
02:08 < jtmitch> comedians too
02:09 < TooTallNate> jtmitch: there's actually a npm package call "gist"
02:09 < TooTallNate> which gives you a command line util
02:09 < TooTallNate> to pipe into
02:09 < WarheadsSE> mm
02:09 < TooTallNate> though i like to think im pretty funny from time to timeâ€¦
02:09 < jtmitch> if only i had node working....
02:10 < TooTallNate> jtmitch: well you're having trouble with node-gyp (native modules) from what I can tell
02:10 < jtmitch> TooTallNate: yes
02:10 < TooTallNate> jtmitch: "gist" is a pure JS module, so it should be easier to install
02:10 < jtmitch> ah...
02:10 < WarheadsSE> Hmm.
02:10 < TooTallNate> though "sprunge" sounds neat too
02:11 < WarheadsSE> node-gyp.. probably related to a python2/3 issue
02:11 < WarheadsSE> have a look, its got some handy features for non-node uses too
02:11 < jtmitch> curl downloads fine
02:12 < jtmitch> and I screwed up getting output from --verbose... not my day
02:12 < WarheadsSE> TooTallNate: node-gyp uses python correct?
02:12 < TooTallNate> WarheadsSE: indeed
02:13 < WarheadsSE> K
02:13 < jtmitch> what do I do to pipe the output of verbose into a file?
02:13 < WarheadsSE> let me have a look at something
02:13 < jtmitch> I had npm install --verbose >> npm.log
02:13 < jtmitch> but... it's not what you want
02:13 < TooTallNate> jtmitch: npm install --verbose 2>&1
02:13 < jtmitch> thanks
02:14 < WarheadsSE> Is node-gyp supposed to be available on path
02:14 < TooTallNate> WarheadsSE: not usually (npm comes with it's own internal copy), but if you `npm install -g node-gyp` then it will be available
02:14 < WarheadsSE> K, just wanted to check
02:15 < WarheadsSE> yeah I see that looking at the file list
02:16 < styol> Why might one require() a module using const instead of var? I'm seeing it in an HTTPS / SSL example -- IE: const crypto = require('crypto'), require('fs'), require('http');
02:17 < jtmitch> I also symlinked python2 to python and removed python(3)
02:17 < Aria> 'cause someone didn't kick in strict mode?
02:18 < WarheadsSE>  http://sprunge.us/aVCN TooTallNate 
02:18 < jtmitch> https://gist.github.com/4029216
02:18 < styol> Aria: that response is for me I'm guessing? So, const is or isn't recommended?
02:18 < jtmitch> TooTallNate: verbose output in that gist
02:19 < TooTallNate> gyp ERR! stack Error: 400 status code downloading tarball
02:19 < WarheadsSE> jtmitch: there is a sed in the package that does that replacement in the python sources
02:19 < WarheadsSE> might have failed somewhere in there though
02:19 < TooTallNate> jtmitch: ^ so i'm not entirely sure why you're getting a 400 response code
02:20 < jtmitch> well... its comforting that my confusion is no longer lonely
02:20 < WarheadsSE> 0o
02:20 < Aria> styol: Not recommended nor common, really.
02:20 < WarheadsSE> npm is returning 400s?
02:20 < styol> Aria: gracias. Thought it was strange, then again it is from 2010 and they're using 'http' instead of 'https' -- i think I'll stick to the docs ;)
02:21 < jtmitch> WarheadsSE: I know not of this sed package you speak of
02:21 < Aria> Yeah. Download a few packages from npm too and see what they do. The practices are reasonable in most of 'em.
02:22 < jtmitch> TooTallNate: work around?
02:22 < WarheadsSE> jtmitch: basically, its supposed to be packaged to so that you can safely simply use python2 for you.
02:23 < TooTallNate> jtmitch: i'm gonna need to make node-gyp dump the HTTP response output upon failure
02:23 < TooTallNate> jtmitch: you can't give me access to that box temporarily, can you?
02:23 < jtmitch> I've never made a package take a dump
02:23 < adlwalrus> Aria: hey dude, I got it working, btw.  just figured I'd let you know...
02:23 < WarheadsSE> lmao
02:23 < Aria> Awesome, adlwalrus. Anything surprising?
02:23 < jtmitch> hmm... it's a technical problem more than a personal ethical one
02:23 < Aria> (And it's dudette ;-))
02:24 < adlwalrus> Aria: my battery died just after I was on with you.
02:24 < TooTallNate> jtmitch: WarheadsSE: it's not downloading from the npm registry, it's downloading from nodejs.org/dist
02:24 < adlwalrus> Aria: oh, oops.
02:24 < jtmitch> how can I give you access to this little pi dingle berry
02:24 < WarheadsSE> darfurq
02:25 < jtmitch> darfurq?
02:25 < adlwalrus> Aria: umm, yeah. I mean after I fixed the writeFileSync calls, it didn't like "for(var p in o) { o.hasOwnProperty(p) || continue; do(stuff); bar(foo);}"
02:25 < adlwalrus> Aria: "unexpected token continue"
02:25 < WarheadsSE> jtmitch: derpy the fuck
02:26 < Aria> adlwalrus: Aha! YEah, javascript doesn't like ruby-style syntax shortcuts. Gotta use 'if' and such.
02:26 < jtmitch> I like how I've gone from slightly amused to intangibly bewildered - mental note - never ask WarheadsSE for a clarification 
02:26 < TooTallNate> jtmitch: you'd have to forward the ssh port
02:26 < jtmitch> yeah - I can't do that from where I'm at....
02:26 < adlwalrus> Aria: is there ANY other way? I hate having all those curlies when they seem unnecessary.
02:27 < Aria> adlwalrus: No.
02:27 < Aria> adlwalrus: Embrace the syntax.
02:27 < jtmitch> I can ssh into my home server from work with the Pi... does that buy us anything?
02:27 < WarheadsSE> lol jtmitch 
02:27 < jtmitch> I opened up 443 at home and routed it to the ssh server on my ... server
02:27 < adlwalrus> Aria: haha, ok.
02:28 < TooTallNate> jtmitch: maybe try localtunnel? http://www.freesoftwaremagazine.com/articles/hasslefree_reverse_ssh_tunneling_localtunnel
02:29 < jtmitch> 'll try
02:29 < WarheadsSE> yeah, i remember seeing that
02:29 < Aria> adlwalrus: Seriously, though, javascript culture tends to be uncontentious in regards to syntax -- it's very vanilla. Flexible to indentation, but braces everywhere. The syntax golfers go coffeescript.
02:29 < jtmitch> and I'll darfurq it
02:29 < jtmitch> ?
02:30 < adlwalrus> Aria: "uncontentious"?
02:30 < jtmitch> WarheadsSE: what's the quickest webserver I can get on this pi from Arch?
02:31 < Aria> adlwalrus: Not lots of options, not a lot of weirdness in its syntax. It's pretty regular, it's not breaking any new ground.
02:31 < adlwalrus> Aria: ah, ok.
02:31 < Aria> (node's claim to fame is not any terseness, it has little or no perl and ruby style 'code golf')
02:31 < WarheadsSE> jtmitch: eh, nginx? Apache? everything in the Arch repos
02:32 < jtmitch> so.. nginx is probably kinda fast to get going
02:32 < adlwalrus> Aria: it's pretty cool, though.
02:32 < styol> Hrm.. thus far I've only used express for http requests and I'm trying to tread lightly on this project, so I've foregone express for the time being. I need to parse out GET variables which is something that express handled with the req.query object, but I'm not seeing something similar in the core http(s) module. Anyone know if I'm missing something or do I need to do my own parsing of the req.url object to extract GET variables?
02:33 < styol> â€¦or visit the express source code and see/copy how they're doing it
02:33 < adlwalrus> Aria: the one thing I don't really like is the asynchronicity, though
02:33 < sinclair> hey guys, what are the ways to dynamically load in js in node?
02:33 < adlwalrus> Aria: it's just not how *I* like to think about my programs... seems like it would lead to lots of spaghetti.
02:34 < Aria> It doesn't.
02:34 < Aria> Turns out it just makes you deal with the complexity sooner.
02:34 < adlwalrus> Aria: but it's still uber confusing for me to wrap my head around.
02:34 < tehlulz> sinclair: what are you wanting to load in dynamically
02:34 < adlwalrus> Aria: is there any such thing as "synchronous I/O for JS"?
02:34 < sinclair> tehlulz: a js string
02:34 < Aria> Yeah. The syntactic tricks for dealing with "callback hell" is to name your functions, move them up a level (or ten) in scope, and use events.
02:34 < Aria> adlwalrus: Some. Not popular, though.
02:35 < tehlulz> sinclair: sorry, I'm not understanding :(
02:35 < tehlulz> as in
02:35 < adlwalrus> Aria: ah, well.
02:35 < tehlulz> a module?
02:35 < tehlulz> from a string?
02:35 < Aria> adlwalrus: Move up a level of abstraction. Stop trying to think of "do this, then this", think "When this, then this"
02:35 < sinclair> tehlulz: what don't you understand... require(filename) right?
02:35 < tehlulz> var module = 'fs';
02:35 < tehlulz> mod = require(module);
02:35 < adlwalrus> idk, I haven't taken a stab at trying to move my thinking over to that style yet, I just know that I'm really not looking forward to having to do so.
02:35 < tehlulz> kinda thing
02:35 < Aria> adlwalrus: It's not actually bad. If you're finding it complex, you need to change levels of abstraction. Make streams of events YOU care about. 
02:35 < sinclair> tehlulz: that loads fs from disk
02:36 < tehlulz> yeh
02:36 < tehlulz> so
02:36 < tehlulz> change the path
02:36 < sinclair> tehlulz: i don't want to load from disk
02:36 < tehlulz> to:
02:36 < tehlulz> okay
02:36 < Aria> adlwalrus: Yeah, it's a mental stretch. But once you realize there's NO concurrency, it's actually a lot easier to deal with.
02:36 < tehlulz> what are you wanting to load from
02:36 < sinclair> tehlulz: a string, so memory
02:37 < sinclair> tehlulz: how is this confusing...?
02:37 < adlwalrus> Aria: huh? concurrency?
02:37 < Aria> sinclair: You can make new functions with "new Function(string)"; you can eval; you can write to files and require (And hack the require cache to allow reloading)
02:37 < Aria> adlwalrus: Asynchronous programming feels weird at first if you're used to threads, where stuff does happen at the same time. Ish. 
02:37 < sinclair> Aria: what about module.exports._compile(code); ?
02:37 < Aria> adlwalrus: Node doesn't do that. So you're actually only doing on thing at a time.
02:38 < adlwalrus> Aria: BTW, I care less than ZILCH about performance...
02:38 < Aria> sinclair: Oh god, that sounds like madness. (you probably want the VM module if you're doing stuff like this, too)
02:38 < WarheadsSE> jtmitch: serialport right
02:38 < WarheadsSE> not serialport**
02:38 < sinclair> Aria: how so?
02:38 < jtmitch> right
02:38 < Aria> sinclair: It's just not a public API.
02:38 < jtmitch> correct
02:38 < sinclair> Aria: its hardly madness
02:38 < jtmitch> awaiting localtunnel startage
02:39 < Aria> sinclair: It's weird, which means you're not gonna get much help with it if it breaks ;-)
02:39 < WarheadsSE> Hmm, no issues on a v5 .
02:39 < WarheadsSE> wai
02:39 < WarheadsSE> i see it
02:39 < WarheadsSE> node-gyp rebuild
02:39 < adlwalrus> Aria: thanks again for all the friendly tips and welcoming... I should prob. get back to work.
02:39 < adlwalrus> TTYL, perhaps.
02:39 < sinclair> Aria: its not weird, dynamic compilation is common in other languages
02:40 < WarheadsSE> call sback to http://nodejs.org/dist/v0.8.14/node-v0.8.14.tar.gz
02:40 < Aria> adlwalrus: Ta!
02:40 < Aria> sinclair: Yes, but module._compile is a private API.
02:40 < sinclair> Aria: oh ok
02:40 < Aria> sinclair: the vm module is not, new Function is not, eval (gack!) is not.
02:40 < Fauntleroy> is anyone here familiar with announcing a new node.js module? Where would a good place for that be?
02:40 < sinclair> Aria: i wasn't planning on using eval
02:40 < jtmitch> WarheadsSE: arch arm doesn't have ports shut down by default does it?
02:40 < TooTallNate> jtmitch: as a workaround, you can checkout the nodejs source, and then do `npm install --nodedir=~/node` or whatever
02:41 < Aria> sinclair: Sometimes it's the right solution, but usually "new Function" or vm is.
02:41 < TooTallNate> WarheadsSE: did the file download as expected for you though?
02:41 < sinclair> Aria: what is VM?
02:41 < sinclair> a module?
02:41 < WarheadsSE> TooTallNate: jtmitch : got this- http://pastie.org/5338127
02:41 < jtmitch> TooTallNate: For the tar.gz file it wants or you mean the whole source for node.js?
02:41 < WarheadsSE> jtmitch: nope.
02:41 < sinclair> hopefully not a native module
02:42 < TooTallNate> jtmitch: oh, well it looks like it worked finally
02:42 < TooTallNate> jtmitch: oh nvm, that was WarheadsSE's
02:42 < TooTallNate> ok so it works for WarheadsSE 
02:42 < TooTallNate> jtmitch: either really
02:43 < TooTallNate> jtmitch: downloading and extracting the tarball manually is probably the best way
02:44 < WarheadsSE> that was on a v5
02:44 < jtmitch> anywhere I should put that particular tarball?
02:44 < WarheadsSE> why he is getting a 400 idk
02:44 < sinclair> Aria: oh, vm is built into node
02:44 < sinclair> Aria: that's awesome
02:44 < Aria> Yeeah.
02:44 < jtmitch> well... hmmm
02:45 < Aria> There's a reason I was pointing to it ;-)
02:45 < jtmitch> well.. let me tunnel the pie to my home network and try again
02:45 < jtmitch> how large is the download of that file? it's only like 11 megs or so right?
02:47 < TehShrike> isaacs: I had to reset my npm password (again) and I got an error :-x
02:47  * TehShrike hits the "submit an issue" button
02:47 < TehShrike> isaacs: https://github.com/isaacs/npm-www/issues/196
02:48 < styol> Is anyone else somewhat scared when a module requires 10+ dependencies or is it just me?
02:49 < Aria> I definitely think it's doing too much in that case.
02:49 < Aria> I'm surprised when there's more than 10. I'm sad when there's more than 3 direct dependencies.
02:49 < jtmitch> TooTallNate: I'm goign to try and do the normal install on the pi after I tunnel into my home net
02:49 < jtmitch> see if that doesn't improve things
02:50 < styol> Aria: damn. I was looking at potentially using restify for an API interface but this seems to be the case. Simple GET variables look appealing by comparison it seems, granted lacking a REST type structure
02:51 < Aria> "simple get variables"?
02:51 < WarheadsSE> jtmitch: what was the code you were getting?
02:52 < styol> Aria: /?method=something&other=variables -- express called it a query, i may be referring to it in a PHP sense, whoops ;)
02:52 < Aria> Ah. Yes, Query string.
02:52 < Aria> (that's what the URL RFC calls it, and what Apache calls it.)
02:52 < jtmitch> 400 at the time
02:53 < jtmitch> WarheadsSE: this is entertaining somewhat - watching sshuttle output while npm install in another window... lots of shtuff 
02:53 < styol> Aria: thanks a bunch, that is the keyword I'm lacking and core does appear to have the querystring.parse() method that I can use against https' req.url
02:53 < Aria> styol: "route matching" is pretty simple -- regexes can do it, it's not difficult to get "clean" URLs (which is what I think you're calling REST)
02:53 < WarheadsSE> 400 to get the nodejs source, or npmjs sources?
02:53 < Aria> (It has nothing to do with REST)
02:53 < jtmitch> son of a bitch - it's downloading
02:53 < Aria> styol: Awesome.
02:53 < jtmitch> first one I think...
02:53 < jtmitch> I had a gist for that didn't I?
02:54 < styol> Aria: ah, I'm aware REST is completely unrelated, just a certain style of request with CRUD and what not yah
02:54 < Aria> (REST basically means "use HTTP verbs properly, and don't leave the state implied, TRANSFER the state")
02:54 < styol> gotcha
02:54 < adlwalrus> Aria: actually, my script's not fully working yet. do u mind having another look?
02:55 < Aria> adlwalrus: Sure. (can I suggest gist, rather than your last pastebin? You can put multiple files in a single post)
02:55 < jtmitch> TooTallNate: WarheadsSE it's slow - but it's downloading - I'll let you know soon
02:55 < adlwalrus> Aria: sure.. it's just loading now.
02:55 < TooTallNate> jtmitch: what changed?
02:55 < WarheadsSE> jtmitch: its a pi :p
02:55 < jtmitch> thanks for the help so far
02:55 < WarheadsSE> TooTallNate: he proxy tunneld home
02:55 < jtmitch> TooTallNate: I tunneled the pi into my home server
02:55 < adlwalrus> Aria: but I accidentally opened my other browser profile which has 155 tabs in it, so now my comp is totally not responding.
02:55 < Aria> Hehe. Oops!
02:56 < jtmitch> I mean - it's not done yet , but it didn't 400 the package
02:56 < adlwalrus> Aria: it wasn't me, it was node's fault!
02:56 < TooTallNate> ok so i'm concluding it was a proxy issue then
02:56 < adlwalrus> npm faq opens your default browser without warning you!!
02:56 < jtmitch> TooTallNate: I have no evidence to support anything different
02:57 < WarheadsSE> inline proxy maybe
02:57 < adlwalrus> Aria: I mena, I didn't change anything escept for the calls to writeFileSync...
02:57 < WarheadsSE> So may package looks sane after all
02:57 < WarheadsSE> :) TooTallNate jtmitch 
02:57 < TooTallNate> WarheadsSE: which one now?
02:58 < adlwalrus> Aria: so what's happening is that it's outputting to both *.js and *.min.js, but the files are identical -- no minification seems to be happening.
02:58 < WarheadsSE> tobmastr: nodejs-0.8.12-armv6.pkg.tar.xz
02:58 < jtmitch> WarheadsSE: it worked
02:59 < jtmitch> your package is fine - so far.. it's not.. derpy fucked
02:59 < adlwalrus> Aria: https://gist.github.com/d5b69cba7cfee5191073
02:59 < Aria> Look at line 38. You're writing the wrong thing to that file.
03:01 < adlwalrus> Aria: hahaha. that was dumb, thanks though!
03:01 < Aria> Sure thing!
03:02 < jtmitch> still here
03:02 < jtmitch> indeed I am
03:02  * adlwalrus crosses his fingers as he tests it again.
03:02 < adlwalrus> hooray!!!
03:03 < WarheadsSE> whoops, misquote tobmastr sorry. TooTallNate disappeared rather timely.
03:06 < adlwalrus> lol! douglas cockford and JSLint are having a field day with my minified code.
03:06 < adlwalrus> suck it, poopholes.
03:06  * WarheadsSE poof
03:07 < Aria> Hehe. Ignore crockford on some of the finer points.
03:07 < adlwalrus> Aria: indeed, I do.
03:08 < yug> hi 
03:09 < yug> can anyone help me with websockets and node.js?
03:10 < Aria> Perhaps.
03:11 < yug> actually it is also on websockets in general 
03:11 < yug> so i want to send a binary uint8array 
03:11 < yug> but i need to send with it some attribute 
03:12 < yug> what i would like to send is something like that
03:12 < yug> ws.send({type:type,data:data})
03:12 < yug> but this is not possible - you an either send a string or binary but it seems that not together
03:14 < Aria> Indeed.
03:15 < Aria> json is restricted in what it can represent without quoting.
03:15 < Aria> And websockets has only framing, not any deeper formatting.
03:15 < yug> any way to work around that?
03:18 < Aria> Quote.
03:18 < Aria> invent your own protocol on top of it.
03:18 < Aria> Netstrings and json inside of that ;-)
03:19 < yug> i thought of just convert the attributes to uint8 and append them and then decode it
03:19 < yug> what do you mean invent your own protocol
03:19 < yug> what would you do?
03:19 < sinclair> Aria: the node vm stuff is quite powerful
03:19 < Aria> sinclair: Isn't it?
03:19 < Aria> yug: what you're doing is inventing a protocol just there ;-)
03:20 < yug> i know
03:20 < sinclair> Aria: erm, read again
03:20 < Aria> yug: You might need a separator, but that'd work.
03:20 < yug> but it seems like over kill
03:20 < yug> it suppose to be a very simple task 
03:20 < Aria> That's a very simple protocol. Don't overthink it!
03:21 < yug> just moved from socket.io to websocket cause socket.io does not support binary sending
03:21 < sinclair> Aria: the vm context essentially lets you restrict what client script can do
03:21 < dshap> hey all - anyone here have any experience with asset packaging libraries for node?  i'm looking at connect-assetmanager and piler right now and i'd be curious to know if there are others that perform similar functions 
03:21 < sinclair> Aria: which is quite cool
03:21 < Aria> sinclair: YEP!
03:21 < yug> Aria how would you implement something like that?
03:21 < Aria> dshap: Lots of people write stuff using grunt, and Yahoo's pipeline too.
03:22 < Aria> yug: If the data is text-dominant, I'd quote the binary and embed in json. If the data is characters JSON can't do dominant, I'd send binary with json embedded for other parts; I'd use netstrings, probably, or some simple delimiter to break the pieces apart.
03:22 < Aria> yug: netstrings just being length as a unit32, followed by data.
03:23 < Aria> (Or you could protobuf if you wanna get fancy)
03:23 < yug> the data is uint8array (arraybuffer) and the text is just pain text
03:23 < voodootikigod> Did jtmitch get it working?
03:24 < dshap> Aria: interesting - i hadn't heard of grunt before...i like that connect-assetmanager & piler automatically render script tags to my templates though - grunt seems like it would just help me manipulate my static assets and it would stop there, right?
03:25 < Aria> dshap: Usually, yes. Some people like having their tools do less at once (I'm one, though not a grunt user either)
03:26 < jtmitch> voodootikigod: so far
03:26 < jtmitch> thanks
03:26 < voodootikigod> nice
03:26 < jtmitch> see if I can get a robot programmed with it all now
03:26 < jtmitch> I'm anxious to try Johnny-five out and seee what it brings
03:26 < dshap> Aria: gotcha
03:28 < voodootikigod> bear in mind j5 is designed for arduino
03:28 < voodootikigod> not pi
03:28 < voodootikigod> and not pi GPIO
03:29 < mscdex> what's the name of that minimal buffering stream module?
03:29 < mscdex> :S
03:32 < mscdex> implementing custom streams is such a PITA
03:33 < Aria> It's getting better. There's boilerplate to simplify.
03:33 < voodootikigod> fs
03:37 < harrydog> anyone know how i would connect an android app (written in java) to a node server running socket.io?
03:39 < dogmatic69> harrydog: same way you would fetch json, html or any other data.
03:39 < joeandaverde> harrydog: create a java adapter for socket.io
03:40 < joeandaverde> harrydog:  i started a C# adapter that might be similar to adapt for java https://github.com/joeandaverde/socket.io-csharp-client
03:41 < harrydog> cool thanks
03:42 < harrydog> so the socket.io js client is good for webviews or browsers, right? but if i want to emit or recieve "messages", i'll need to write the client myself
03:43 < harrydog> but how does it trigger a listener on the server, like emit("news" â€¦, is there some format
03:43 < joeandaverde> yes
03:43 < substack> it has its own message framing yes
03:43 < joeandaverde> socket.io has a special protocol for message transfer
03:44 < joeandaverde> im actually using socket io for this chat: 
03:44 < joeandaverde>  
03:44 < joeandaverde> 5:::{"name":"message","args":[{"to":"#node.js","from":"joeandaverde","text":"im actually using socket io for this chat: "}]}
03:45 < harrydog> so, is it just string/json format
03:47 < harrydog> maybe i'll just try to use the client for android listed on the socket.io github page
03:51 < jamescarr> hey... anyone familiar with submitting a form with an attachment using request?
04:01 < devatwork> hey guys. For nodejs, what are some of my persistent storage options ?
04:02 < Aria> filesystem, git, svn, s3, mongo, riak, mysql, postgresql, bdb, couchdb
04:02 < Aria> imap mailboxes
04:03 < devatwork> Aria, alright, thanks
04:05 < jtmitch> voodootikigod: no no .. I got that
04:05 < jtmitch> it will let the pi tell the arduino what to do and get data back in though yes?
04:05 < fivesigma> evening folks!
04:07 < jtmitch> voodootikigod: but node..js can talk to gpio's correct?
04:09 < devatwork> Aria, what about redis ?
04:09 < styol> Aria: thanks again for your help earlier. Much appreciated.
04:10 < Aria> Oooh, redis too.
04:10 < Aria> And memcache and membase.
04:10 < styol> Oh and regarding couchdb, couchbase has been working on a node client. Couchbase is pretty delicious.
04:10 < Aria> styol: You're welcome.
04:11 < styol> Actually, I guess Couchbase is closer to memcache and membase than couchdb
04:11 < devatwork> like ill most likely just need something that stores/retrieves json objects
04:11 < devatwork> i can always stringify i guess xD
04:12 < Aria> Indeed. 
04:12 < Aria> I'm actually basing something on git + json in files.
04:12 < devatwork> how scalable is that though ?
04:13 < Aria> Scaling over what?
04:13 < devatwork> i mean if what im writing gets quite large
04:14 < chrisbislr> devatwork: would make sense to have a layer of abstraction
04:14 < chrisbislr> so you can change things later as/if it grows
04:14 < Aria> Pretty good, if you either prune stuff or want a permanent archive.
04:14 < devatwork> hmm alright, thanks
04:14 < Aria> It really depends on your use case. In my case, I want audit logs of all changes (accounting!)
04:14 < Aria> So git is PERFECT. 
04:15 < Aria> Commits + signatures + hashes of everything = almost exactly what you want.
04:15 < Aria> plus, new stuff is based on history in accounting, as in git.
04:15 < devatwork> ah, neat
04:16 < chrisbislr> Aria: that is a pretty awesome idea actually, I like that
04:17 < Aria> chrisbislr: Planning on open speccing the scheme, trying to create some data format interop between some light accounting packages.
04:18 < chrisbislr> Aria: that's an excellent idea too, even with accounting stuff moving to "the cloud" the interoperability as far as I know, sucks
04:18 < chrisbislr> and git's history is so good in terms of making it accountable, so to speak
04:19 < Aria> Exactly!
04:19 < Aria> Also, syncing. 
04:19 < Aria> Git has that down, merging is pushed up to the application layer.
04:52 < MI6> joyent/libuv: Ben Noordhuis master * a320d46 : test: fix type casting style issue - http://git.io/2mYcqg
05:21 < airtanah> what database migration module should i use?
05:22 < airtanah> i've come across https://github.com/rsandor/node-migrate
05:22 < airtanah> and https://github.com/nearinfinity/node-db-migrate
05:22 < airtanah> anything better?
05:25 < Aria> Heh. Yow. Guess I should start porting Modyllic to Javascript.
05:25 < Aria> 'cause it's awesome despite being written in PHP.
05:31 < mdedetrich> does anyone know if there is a reliable schedular
05:31 < mdedetrich> which runs as a PaaS
05:31 < mdedetrich> that uses node.js?
06:34 < niggler> gobama!
07:17 < mscdex> node.js rules!
07:19 < chrisbis_> no, barack does
07:20 < mscdex> whitehouse.js
07:48 < jtmitch> anyone use the johnny-five package?
07:48 < jtmitch> some off chance?
07:49 < chrisbis_> i use it to prop my door open when i'm making love to my wife
07:49 < chrisbis_> we need a solid air flow into the room
07:49 < jtmitch> that's sweet
07:49 < chrisbis_> hehe
07:49 < chrisbis_> what does the package do/
07:51 < jtmitch> controls robots
07:51 < jtmitch> maybe a more solid question - how can I tell which version of firmata I'm using?
07:51 < chrisbis_> oh very nice. would be much cooler if you said "controls all of the robots"
07:52 < jtmitch> well - I'm sure the dev would be tickled if that happened
07:53 < chrisbis_> i wish i'd made it to the parrot programming day
07:57 < deoxxa[cookies]> i demand that there be some node integration with http://www.indiegogo.com/robotdragonfly
08:14 < _geo> hello
08:15 < chrisbis_> hi _geo
08:40 < [AD]Turbo> hola
08:54 < TehShrike> Where was isaacs doing that "ask me questions" thing
08:54 < TehShrike> I don't remember the site
08:56 < ako> tehShrike, reddit?
08:56 <@Nexxy> TehShrike, crowdhall
08:56 < TehShrike> Nexxy: YES thank you
08:56 < TehShrike> I just couldn't think of it
09:00 < chrisbis_> haha
09:00 < chrisbis_> I love the idea of hardcore redditors forgetting the name of the site
09:00 <@Nexxy> what is reddit?
09:01 < chrisbis_> man I want to post pictures of my slightly overweight girlfriend pleasuring herself, what was that website where I could get all the attention?
09:01 < chrisbis_> I forget its name!
09:01 <@Nexxy> you must be new here
09:01 < TehShrike> "internet.com"
09:01 < deoxxa[cookies]> chrisbis_: email directly to me
09:12 < dook> Anyone playing with Geddy 0.6?
09:48 < chovy> req.flash(); res.redirect() doesn't flash if the url is the same.
10:05 < tradefortress> looks like a net split -.-
10:12 < MI6> joyent/libuv: Bert Belder v0.8 * f372fd4 : windows: map ERROR_GEN_FAILURE to UV_EIO - http://git.io/vIVt-Q
10:13 < MI6> joyent/libuv: Bert Belder master * 0097280 : windows: map ERROR_GEN_FAILURE to UV_EIO - http://git.io/Ut8jqw
10:17 < SomeoneWeird> anyone know if it's possible to embed lua in a node app?
10:19 < abrkn\> is there an extension to node-postgres that allows nicer insert syntax, like .insert({ k: v, k2: new Date() }) instead of manual parameterization of queries?
10:21 < Tom______> Hey, could anyone assist me with this question? http://stackoverflow.com/questions/13267594/how-to-avoid-the-need-to-delay-event-emission-to-the-next-tick-of-the-event-loop
10:22 < tradefortress> node.js is amazing
10:22 < tradefortress> also, stackoverflow is back up :D
10:24 < _geo> anyone knows a website that offers for free nodejs hosting+1 or 2 mysql databases ?
10:26 < tradefortress> _geo: how about setting up a local server
10:26 < tradefortress> port forward it
10:27 < tradefortress> disregard your ISP rules against hosting servers.. tons host minecraft servers, tf2 servers, cod server hosts etc etc etc
10:27 < cactus> so, I have an EventEmitter
10:28 < cactus> what's the best way to inform the user that his provided password turned out to be wrong?
10:28 < _geo> its a small blog app in expressj and i just need online 24/7 for 2 months..
10:28 < tradefortress> cactus: socket.io
10:28 < tradefortress> _geo: you might look into sharing hosting with a friend or whatever
10:28 < cactus> it's not http
10:29 < cactus> my library is a wrapper around a single socket
10:29 < tradefortress> I am like a noob
10:29 < tradefortress> I came from the dark hells of php
10:29 < tradefortress> so sorry :3
10:29 < cactus> _geo, have you looked into heroku?
10:29 < tradefortress> _geo:  actually amazon offers free micro hosting
10:29 < tradefortress> for a year
10:29 < tradefortress> you get ssh and can install node or whatever
10:29 < cactus> and you don't have to host the database and the server on the same hosting
10:30 < _geo> cactus , thanks i'll check it
10:30 < tradefortress> Okay, so here's info about my project
10:31 < tradefortress> I'm building a site and a web chat game.
10:31 < cactus> TF2-related?
10:31 < tradefortress> The site is in PHP and is basically static
10:31 < tradefortress> cactus: nope :P
10:31 < tradefortress> The chat game is in node.js
10:31 < tradefortress> I want to add websockets live-chat to my site
10:32 < tradefortress> Is it a good idea to use Node.js + Socket.io soley for that.... just emit things to clients
10:35 < tradefortress> I might
10:35 < tradefortress> just use node.js / socket.io as a wrapper
10:35 < tradefortress> and handle everything entirely in css
10:35 < tradefortress> js**
10:37 < path[l]> is there any reason for me to do require(__dirname + '../foo/bar'), is it the same as doing require('../foo/bar')?
10:38 < tradefortress> path1: fs read those two and see if they respond to the same
10:38 < tradefortress> if yes then ignore dirname
10:42 < path[l]> tradefortress:  I didnt follow. are you suggesting I test it?
10:44 < path[l]> tradefortress: I noticed that when I ran my program from a different directory. my requires which were using './' seemed to work fine. But fs.readFileSync had an issue
10:59 -!- mode/#node.js [+o piscisaureus_] by ChanServ
11:18 < cactus> so, there's a 'steam' module on npm that's basically a wrapper around the Steam WebAPI and hasn't been updated for almost a year
11:18 < cactus> and I'm actively working on a library that lets you communicate with Steam servers directly as if you were an actual Steam client
11:19 < sfoster_> anyone know how to manipulate the response from express/connect's static middleware before it gets sent? 
11:19 < cactus> I was wondering if I should try to claim the 'steam' name
11:19 < sfoster_> I'm obviously failing to understand middleware (again)
11:24 < cactus> who should I email regarding the legality of a module?
11:24 < cactus> my library is technically against Valve's TOS, but they have done absolutely nothing against SteamKit2 and are pretty obviously supporting it
11:25 < cactus> so it depends on how strict npmjs is
11:26 < jhsto> Hey, guys, any idea how I can output html tags as text in jade? I would need to output an example with <head> tag
11:27 < sfoster_> pastebin of what I have so far (attempting to manipulate response from static), I'm looking at ~ line 50: http://pastebin.mozilla.org/1920963
11:33 < sfoster_> I can just bypass static and handle the .css request myself, but that seems to defeat the point of reusable middleware. 
11:59 < _geo> appfog free plan looks promising, but i can't understand why everything is written in ruby ...
14:22 < Kottizen> Good day! How would I make this synchronous? http://paste.ubuntu.com/1339897
14:23 < AAA_awright> Kottizen: What is 'client'?
14:24 < Kottizen> AAA_awright: Oh, sorry, it's a connected and fully functional MySQL client from the "mysql" library.
14:24 < AAA_awright> Kottizen: Without being sure which of the MySQL libraries it is, there's no synchronous network functions that would let you do so
14:24 < AAA_awright> Nor would you want to do so
14:25 < Kottizen> AAA_awright: Hmm, alright... But then I'm not sure how to solve my problem. Let me explain it.
14:27 < Kottizen> AAA_awright: I'm making a web based chat using Socket.IO and Node.JS. In my MySQL database I have two tables of importance, "conversations" and "participants". "conversations" keeps track of all conversations, with their subjects and date of last message. "participants" keeps track of who's in which conversation - each row has a conversation_id and a user_id.
14:27 < Kottizen> AAA_awright: Now I want to give the client a list of all conversations he's a member of, along with their participants.
14:27 < Kottizen> AAA_awright: So basically what I'm doing now is that I 1.) fetch the list and then 2.) loop through it and fetch all participants for the current conversation
14:28 < AAA_awright> Kottizen: So just do it how you currently have it, process the results inisde a function
14:29 < AAA_awright> Kottizen: Also be sure you're not substituting variables into SQL directly, you should be using variables and a list of values, or prepared statements, or similar
14:30 < Kottizen> AAA_awright: This is how it currently looks like - the last "Send everything to the user" fails because it's initialized before the array "conversations" has been fully populated
14:30 < Kottizen> AAA_awright: http://paste.ubuntu.com/1339925
14:31 < AAA_awright> Yarg
14:31 < AAA_awright> (1) http://callbackhell.com/
14:32 < AAA_awright> ...WHERE `mail_participants`.`conversation_id` = " + results[index].id + " AND... <-- Bad idea
14:32 < Kottizen> AAA_awright: I'll read up on that Callback Hell page, what's the bad idea with the MySQL query?
14:33 < AAA_awright> Kottizen: Normally, you should keep track of the callbacks yourself, and call another "finished" function yourself when you're done
14:33 < AAA_awright> Kottizen: Howver, this is SQL, so you should be doing only two queries, one with a JOIN
14:33 < AAA_awright> Kottizen: And the problem with that query is you're substituting a value directly into a statement, you should be using some form of prepared statement
14:34 < AAA_awright> Along the lines of: ...WHERE `mail_participants`.`conversation_id` = :conversation_id AND...
14:34 < context> aaa_awright: avoid 'interpolation' when doing queries. its only a matter of time before you start putting user input in there, then you are begging for sql injection.
14:34 < context> aaa_awright: correct.
14:34 < AAA_awright> context: WHy ping me?
14:35 < Kottizen> context: I've taken care of SQL injections already
14:35 < context> err oops
14:35 < context> i was reading that conversation wrong :x
14:35 < Kottizen> JOIN sounds like something I should spend some time learning though
14:35 < AAA_awright> Kottizen: And table aliases for that matter
14:35 < context> kottizen: yes... but the more you just keep shoving whatever directly into the query string the more likely its going to happen in the future.
14:36 < context> thats like a drunk driver saying he will never get caught cause he is careful
14:36 < context> just avoid it altogether
14:36 < AAA_awright> SELECT `mail_conversations`.* FROM `picknick`.`mail_conversations`, `picknick`.`mail_participants` WHERE `mail_participants`.`conversation_id` = `mail_conversations`.`id` AND `mail_participants`.`user_id` = " + socket.user_id + " ORDER BY `mail_conversations`.`date_lastmessage` DESC
14:36 < AAA_awright> SELECT c.* FROM mail_conversations c, mail_participants p WHERE p.conversation_id = c.id AND p.user_id = ? ORDER BY c.date_lastmessage DESC
14:37 < superjoe> what's the case convention for events?
14:37 < superjoe> squashedunderscore?
14:37 < superjoe> camelCase?
14:37 < superjoe> s/underscore/lowercase/
14:38 < AAA_awright> superjoe: Take for example process.uncaughtException
14:38 < superjoe> ah, good point
14:38 < superjoe> thanks
14:39 < context> kottizen: it appears conn.query() allows ? replacement right there. you get auto escaping AND it makes your code look cleaner.
14:39 < context> why not do it
14:39 < AAA_awright> Kottizen: YOu seem to be doing one join (where you have WHERE p.conversation_id = c.id), just do another
14:40 < Kottizen> context: Didn't know that existed - I will definitely use it from now on
14:40 < Kottizen> AAA_awright: Will try, thank you!
14:41 < context> it does if you are using: https://npmjs.org/package/mysql
14:41 < Kottizen> I am
14:42 < AAA_awright> Kottizen: SELECT * FROM mail_participants p JOIN mail_participants p2 ON p.conversation_id=p2.conversation_id WHERE p.user_id=?
14:43 < Kottizen> AAA_awright: That is just what I am looking for, thank you very much!
14:43 < Kottizen> AAA_awright: I should only blame myself here, but I think I need to read up a little about how JOIN actually works before I use it though.
14:46 < context> kottizen: that'd prolly be a good idea
15:10 < tardyp_> Hey, I'm trying to upload a new npm package. when npm login, I got that: http://paste.pound-python.org/show/27469/
15:11 < darach> tardyp_ I did that too. You need to register a user then its all good.
15:12 < tardyp_> I did register on the website
15:12 < tardyp_> darach, looks like other people have same issue just right now https://github.com/isaacs/npm-www/issues/197
15:12 < darach> Weird.
15:14 < AAA_awright> I hope we find a replacement for npm real quick :-\
15:17 < claudio> (troll bait?)
15:18 < tardyp_> it works if I create the another user with npm directly..
15:18 < AAA_awright> claudio: Which trolls here would I be baiting? O.o
15:18 < AAA_awright> Oh, wait, #Node.js is a troll-free channel now :p
15:19 < claudio> yes it is. No flames since 2011
15:20 < MI6> joyent/libuv: Ben Noordhuis master * b45a363 : test: fix compiler warning  Fix the following warning by not using a stat (+1 more commits) - http://git.io/20hbqg
15:21 < MI6> joyent/libuv: Ben Noordhuis master * 91faa3e : test: fix compiler warning  Fix the following warning by not using a stat (+1 more commits) - http://git.io/0Sz4Dg
15:22 < jrajav> Why do we need language-specific package managers anyway? >_>
15:22 < jrajav> I feel like there's something basic I'm missing
15:28 < AAA_awright> jrajav: I think the idea is that it's kept Node.js more nimble, but you don't have a package manager to thank for that
15:29 < jrajav> It's not just node though
15:29 < jrajav> Ruby, perl, haskell, chicken scheme..
15:31 < jrajav> Is it just that they provide a "safe" repo for dumping any and all packages, vs. the slightly-higher-barrier-of-entry mainstream package managers?
15:31 < jrajav> Or is there another intrinsic benefit?
15:34 < RLa> jrajav, i think apt-get, rubygems etc can't handle package hell easily
15:57 < MI6> joyent/libuv: Ben Noordhuis master * d56434a : build: support building a .so  You can now select to build a shared objec (+1 more commits) - http://git.io/ta6Djg
16:05 < AAA_awright> jrajav: It's the barrier to entry
16:05 < AAA_awright> The respective communities want a system for downloading software that works on all platforms
16:11 < EuroNerd_> I'm writing a real-time, single-page app that will communicate through websockets. I'm wondering how should I do user login: go for sockets from the start and authenticate that way, or start with a separate login page and upon success forward to my app?
16:16 < russfrank> jrajav: npm has a pretty awesome dependency model
16:17 < brainv> any recommended framework like rails?
16:17 < russfrank> it works well with node's purpose
16:19 < substack> brainv: I use this framework http://npmjs.org
16:20 < substack> it has a pretty sweet plugin system
16:20 < AAA_awright> russfrank: How is it different than any other dependency model?
16:20 < substack> brainv: by which I mean, tiny focused libraries are usually the way to go
16:20 < bradleymeck> substack: lol
16:21 < AAA_awright> substack: In seriousness, I wouldn't even begin to say "plugin system"
16:21 < substack> tiny libraries that do just what you need and not so many other things
16:21  * brainv slaps substack 
16:21 < bradleymeck> AAA_awright: java uses shared namespaces, python encourages a global registry, npm uses disk space more but does neither
16:21 < AAA_awright> bradleymeck: That's Node.js though, not npm
16:21 < substack> AAA_awright: npm did that before node
16:21 < substack> remember symlinks?
16:22  * brainv slaps substack 
16:22 < AAA_awright> Remember when npm installed EVERYTHING to the system directory, because it "had to"?
16:22 < substack> node's module system was changed to make npm work better
16:22 < AAA_awright> I call bs on that
16:22 < AAA_awright> npm had to change because Node's system made it obsolete otherwise
16:22 < substack> isaacs can back me up on this
16:23  * brainv slaps substack 
16:23 < AAA_awright> I was using relative modules and symlinks way before npm was
16:23 < AAA_awright> I think I can go back through the IRC logs and find this
16:23 < bradleymeck> AAA_awright: it was possible to do it manually, but its still possible to manually do that in most other places where its just painful to do
16:23 < AAA_awright> npm was the one changing require.paths and touching a bazillion files that only contained "module.exports = require('./actual/path/to/file.js');"
16:24 < AAA_awright> substack: Is that not true?
16:24 < bradleymeck> i was not going to set up symlink scripts for versioning issues (we have 2 projects that need multiple versions).
16:25 < bradleymeck> AAA_awright: im unsure what you are saying, a long time ago require.paths was used but that was a very early npm and has not been used for a while.
16:25 < AAA_awright> The point is Node.js had require() correct from the beginning
16:26 < AAA_awright> And I think the require() system is absolutely fantastic (for the most part)
16:27 < russfrank> how is it different?
16:27 < russfrank> it doesn't actually do dependency resolution, it just recursively satisfies every dependency.
16:27 < AAA_awright> The fundemental semantics of require() haven't changed very much
16:27 <@mbalho> module.exports = function(){}
16:27 < russfrank> and yeah, require() has to work in a certain way for that to work
16:27 < russfrank> but that's a pretty significant difference to regular package managers 
16:28 < AAA_awright> http://magnode.org/nodejs-design-demantics Everyone should read this
16:28 < russfrank> you *can't* have a dependency conflict, it just isn't possible 
16:28 < AAA_awright> russfrank: For modules, or...?
16:28 < russfrank> when installing packages or whatever
16:28 < russfrank> it eliminates the diamond dependency issue
16:28 < AAA_awright> Because if two packages (not the same things as modules) depend on the same package series, but depend on mutually incompatible versions
16:29 < AAA_awright> That's what "package hell" is
16:29 < AAA_awright> That's the very definition
16:30 < russfrank> AAA_awright: we agree :]
16:30 < AAA_awright> npm doesn't solve it, it ends up installing two copies of the same module, which breaks the semantics of ECMAScript that lots of applications depend on (i.e. that a String created in one module will === String in another)
16:30 < russfrank> imo that solves it
16:30 < russfrank> okay, so we do disagree
16:31 < AAA_awright> russfrank: if I have two different versions of a certain module installed, let's say ObjectId, then if(oid typeof ObjectId) ends up being false
16:32 < AAA_awright> And I don't consider it proper to rely on duck typing because that opens you up to lots of security holes
16:34 < russfrank> mmm, you're right, there's a possibility for some issues there
16:34 < AAA_awright> russfrank: Now there is a use-case for having multiple versions of a package installed, but it's with applications, e.g. I have multiple versions of Unison installed because portage is awesome like that
16:35 < AAA_awright> I have multiple versions of the Linux kernel installed, etc
16:36 < AAA_awright> Some package managers have to work around that with creating a different package for each line, i.e. there might be linux-2.6 and linux-3, but that doesn't get you anywhere
16:39 < russfrank> the only edge case is triple equality, and it's probably possible to work around that issue in node
16:41 < russfrank> and instanceof checks, though those are grouped with === 
16:48 < AAA_awright> russfrank: Well even with == they won't compare
16:48 < AAA_awright> === only affects primitives
16:48 -!- mode/#node.js [+o piscisaureus_] by ChanServ
17:18 < marshall> has anybody used everyauth's linkedin with express? I'm having some trouble getting req.user
17:24 < WarheadsSE> Fast question: is there a clean way to check for the arch in a waf wscript?
17:25 < WarheadsSE> ever present o3 -msse2 flags on ARM.
17:25 < bradleymeck> WarheadsSE: waf does not like arch detection
17:26 < bradleymeck> WarheadsSE: i would go into node-waf/tools/addon.py (forget actual file) and set it manually
17:26 < bradleymeck> or move to gyp
17:26 < CoverSlide> what a gyp
17:26 < WarheadsSE> well, it's not mine ;) tell piscisaureus_ 
17:26 < WarheadsSE> hes the last one to apparently have touched it
17:30 < Cheery> I still wonder for that name.
17:30 < WarheadsSE> whos
17:30 < Cheery> it's damn hard because everything has been taken
17:30 < Cheery> by libraries that do something entirely irrelated
17:31 < marshall> does anybody know how to message somebody directly on github?
17:31 < siabuabu> hi everyone!
17:31 < siabuabu> i'm newbie on node
17:32 < siabuabu> i'd ask something about how to uninstall node modules
17:32 < marshall> siabuabu sup?
17:32 < Cheery> it's a library for graphics device access.
17:33 < siabuabu> i didn't know how to uninstall or purge remove my node modules
17:33 < siabuabu> because i've got installed nvm
17:33 < siabuabu> so, i got 2 node version
17:33 < siabuabu> and in my old version, i didn't know how to uninstall it
17:34 < siabuabu> would you help me please anyone?
17:34 < Cheery> heh. there's libgdev that does similar things already, except that seems to be someone's sunday project.
17:34 < txdv> you go to node_modules
17:34 < txdv> and rm the folder
17:34 < txdv> xD
17:35 < Cheery> >:)
17:35 < siabuabu> txdv : really??
17:35 < siabuabu> txdv : i'm not sure with ur answer anyway :p
17:35 < siabuabu> i've 2 node version v.0.9.2 pre and v.0.8.14
17:36 < txdv> good for you
17:36 < siabuabu> and i just tried to uninstall the v.0.9.2 version but nothing's happen
17:36 < txdv> o you are talkign about nvm node packages
17:36 < siabuabu> yup
17:37 < txdv> who the fuck knows, I do install them all by hand from sources
17:37 < siabuabu> yesterday i was installed the nvm
17:38 < siabuabu> mmhh, ok sorry.. i just want to know how to uninstall it. cz i'm noob in node
17:38 < bingomanatee> good morning node
17:38 < siabuabu> and i use ubuntu 12.04
17:38 < bingomanatee> Does anyone have a number formatting javascript library they especially like?
17:39 < bingomanatee> I need commas, fixed, etc. 
17:40 < jocafa> bingomanatee:  i'm using accounting.js in a project...
17:41 < bingomanatee> thx
17:42 < mscdex> i have plenty of commas and semicolons for you bingomanatee
17:42 < mscdex> but only if they're used properly
17:46 < bingomanatee> ...
17:48 < siabuabu> does anyone here from indonesia??
17:50 < CoverSlide> i don't from indonesia
17:52 <@isaacs> AAA_awright: the node_modules folder thing was invented to provide a way to get rid of npm's shis
17:52 <@isaacs> *shims
17:52 < siabuabu> oh, ya thanks. i think there is no one here from indonesia except me
17:52 <@isaacs> substack: yes, you are absolutely right.
17:52 < marshall> i am also not from indonesia
17:53 <@isaacs> AAA_awright: you could do relative requires like require('./foo/bar.js') always, but node 0.4 add require('foo') that looks in node_modules/foo
17:54 <@isaacs> AAA_awright: npm 0.3 set things up this way so that it would not need shims, but still used them.  npm 1.0 got rid of the shims entirely.  npm 1.1 started using the built-in gzip and javascript tar implementation
17:54 < substack> node core crypto makes me sad
17:54 < substack> it's impossible or very, very hard to do the things I want to do with it
17:54 < AAA_awright> Right there's definite uses for using a relative name versus a path lookup. Though I do think defining a particular method of doing a path lookup, e.g. "look inside node_modules/" is somewhat out of the scope for Node.js
17:55 < substack> doing a diffie-hellman key exchange manually NOT through tls is so hard
17:55 < substack> and tls sucks for encrypted peers
17:55 < substack> since the key types are assymetric
17:55 < substack> private/public everywhere
17:55 < substack> is the way to go
17:56 < AAA_awright> substack: Don't do crypto yourself, is the way to go O_O
17:56 < AAA_awright> It's stupidly easy to get D-H wrong
17:56 < CoverSlide> The son was an ok guy, They had a pet dragonfly.
17:56 < siabuabu> substack : what the function of core crypto?? 
17:56 < jocafa> crypto all the things!
17:56 < AAA_awright> Even at the protocol level
17:56 < substack> siabuabu: crypto.createDiffieHellman() and crypto.DiffieHellman are pretty much useless
17:56 < substack> you can't just give them pem strings like you can with verify/sign
17:57 < substack> well you CAN do dh.setPrivateKey, dh.setPublicKey
17:57 < substack> but only after you initialize the dh object
17:57 <@isaacs> substack: paaaaaaattttch!!
17:57 < substack> which you can only do with p and g params (only available after parsing dsa, not rsa)
17:57 < substack> isaacs: but then I would need to use the latest version of node
17:58 <@isaacs> substack: yeah, so?
17:58 < WarheadsSE> we're talking stable or unstable?
17:58 <@isaacs> substack: write a better api that shims to the 0.6/0.8 api, and then send me a patch that makes that The API
17:58 < CoverSlide> make it v0.8.x compatible
17:58 <@isaacs> substack: must be backwards compatible.
17:58 < substack> isaacs: all I want is for the DH constructor to take pem strings
17:58 <@isaacs> substack: in other words, i agree, it's terrible.
17:58 < siabuabu> i use 0.8.14 version
17:58 < substack> that would give me enough to do what I need
17:58 <@isaacs> substack: ok
17:59 <@isaacs> maybe node's crypto should have a thing to decode pem strings to a buffer...
17:59 < substack> I already wrote that
17:59 < substack> it's not enough
17:59 <@isaacs> orly?
17:59 <@isaacs> why not?
17:59 < substack> http://github.com/substack/rsa-unpack
17:59 < substack> because DiffieHellman can't use any of these values to make an instance
17:59 < substack> it only *might* work with dsa
18:00 <@isaacs> lame
18:00 <@isaacs> ok
18:00 < substack> because DiffieHellman wants (p,g) params in one of its signatures
18:00 < substack> but I haven't tested that
18:00 <@isaacs> ok
18:00 < substack> I have no idea if it's even possible to generate p and g params from an rsa key
18:00 <@isaacs> i don't really have brain-space for dealing with that at the moment.
18:00 < substack> I know those are params in the dsa key
18:00 <@isaacs> that's why i'm suggesting that you make node work the way you want it to
18:01 <@isaacs> i think it's likely that you'er exploring mostly unexplored territory
18:01 <@isaacs> in terms of node usage, anyway
18:01 <@isaacs> i mean, obv dh and rsa have been around for ages
18:01 < substack> basically https/tls style crypto is really shit for encrypted peers
18:01 < substack> certs are horrible
18:01 < substack> every node should have the same kind of keys
18:01 < substack> that's what public key crypto is FOR
18:02 <@isaacs> yep
18:02 < substack> but every api ever gets this wrong
18:02 <@isaacs> most people use tls for that.
18:02 <@isaacs> though it is not ideal, as you say
18:02 <@isaacs> substack: actually... what i'd love is to one day just throw away our crypto binding entirely and do it properly.
18:03 <@isaacs> but that's a much bigger tast.
18:03 <@isaacs> *task
18:03 < substack> this is the api I'm trying to make https://gist.github.com/4028525
18:04 <@isaacs> nice
18:04 <@isaacs> i like it
18:05 < substack> crypto is such a nightmare
18:05 < substack> I want all that noise to go away
18:12 < tiagoa> somebody use the request module? https://npmjs.org/package/request
18:16 < linuxR> Hi, When I have a node.js server application that does some expensive calculations (in javascript!), e.g. encryption stuff, is it correct that executing such an operation would still block the server and all connected clients?
18:17 < deoxxa[cookies]> linuxR: yep
18:17 < mmalecki> tiagoa: no, nobody does
18:17 < mmalecki> never heard of it, in fact
18:17 < deoxxa[cookies]> linuxR: you know there's the crypto module, though, right?
18:17 < deoxxa[cookies]> linuxR: i.e. http://nodejs.org/docs/latest/api/all.html#all_crypto
18:17 < linuxR> deoxxa[cookies], yes that was just an example for illustration
18:17 < niggler> using npm how do i remove all of the dependencies?
18:17 < tiagoa> well.. thats ok because my problem is with other module
18:17 < deoxxa[cookies]> niggler: `rm -rf node_modules'
18:17 < mmalecki> tiagoa: also, it's better to just ask the question
18:18 < tiagoa> thanks
18:18 < niggler> deoxxa[cookies]: there's no NPM way to remove those specified in package.json
18:18 < deoxxa[cookies]> open package.json -> delete the entries -> save
18:18 < deoxxa[cookies]> so no
18:18 < niggler> :/ was looking for something like npm clean
18:19 < deoxxa[cookies]> actually i wonder if npm uninstall --save does that
18:20 < deoxxa[cookies]> hm, it does
18:20 < niggler> what does it do?
18:21 < nathan7> niggler: the opposite of install --save
18:21 < niggler> where is that specified in the docs
18:21 < tiagoa> I'm using this Request module to test my server, so the test perform a loop with 100 interactions that makes an HTTP request to my server. But only the 5 first connections are logged in my server. This server makes Long Polling request that makes my sever hang these requests.(sorry for the bad english)
18:21 < linuxR> and another question: I don't yet understand how multiple requests can be handled "concurrently" by node.js.  Is there some technical documentation somewhere how this is implemented?
18:22 < niggler> nvm its in install's doc
18:22 < deoxxa[cookies]> tiagoa: http.Agent has a default limit of 5 connections to each remote host
18:22 < niggler> maybe the uninstall doc should also indicate that it supports --save
18:22 < niggler> https://npmjs.org/doc/uninstall.html
18:23 < linuxR> is it correct to say that there is just one global variable stack per application that is "shared" by all requests, e.g. with the potential of requests overwriting variables "used" by other requests?
18:23 < tiagoa> I've perceived that have an limit. Can I alter this limit?
18:24 < niggler> so afaict there's no way to do the opposite of the default behavior of npm install
18:24 < niggler> `npm install (with no args in a package dir)`
18:24 < nathan7> niggler: /away bbl
18:25 < niggler> nathan7: ill submit an issue to npm
18:25 < nathan7> niggler: npm uninstall does nada?
18:25 < nathan7> niggler: poke isaacs 
18:26 < niggler> npm uninstall doesn't do the opposite of npm install
18:26 < nathan7> hrmpf
18:26 < nathan7> Why do you want to do this anyway?
18:27 < niggler> I'm trying to clean and then push some files to a server
18:30 < tiagoa> I've changed the way I perform the request from request module to http.Agent, so now it makes 1000 requests. Thanks a lot
18:33 < nathan7> tiagoa: You can give request an agent pool
18:34 < tiagoa> sorry.. but, what this means?
18:35 < nathan7> tiagoa: try doing var request = require('request').defaults({ agent: { maxConnections: 1000 } });
18:35 < nathan7> tiagoa: err
18:35 < nathan7> tiagoa: try doing var request = require('request').defaults({ agent: { maxSockets: 1000 } });
18:36 < tiagoa> nathan7: I already using agent:false
18:36 < nathan7> tiagoa: agent:false is the default
18:36 < nathan7> tiagoa: ie use the global pool
18:37 < tiagoa> nathan7: I already solved my problem
18:37 < tiagoa> thanks
18:37 < nathan7> mhm
18:40 < Bootstrapper> anyone can help me with an alias? alias f="find . -name $1 -exec ls -G -d {} \;"
18:40 < Bootstrapper> i keep getting unknown primary or operator
18:52 < larzconwell> Bootstrapper,  You can't use variables in alias' create a function for it instead..
18:53 < Bootstrapper> larzconwell:  alias f="find . -name $1" works fine
18:54 < Bootstrapper> larzconwell: can you point me to how to create a function/
18:54 < Bootstrapper> ?
18:54 < larzconwell> Odd, well it's really easy you can just do f() { // code }
18:55 < larzconwell> Or you can also do function f { // code }
19:02 < josephsaliba> Hey guys I need some help with asynchronous calls
19:02 < josephsaliba> Here's my code
19:02 < josephsaliba> http://pastebin.com/NLcDiAks
19:03 < josephsaliba> In updateProducts() functionâ€¦ I call flushNewProducts() which is an asynchronous function
19:03 < josephsaliba> But i want updateProducts() to return only when flushNewProducts i done...
19:04 < mscdex> josephsaliba: you can't "return only when flushNewProducts is done" if it's async. what you can do is pass in a callback
19:04 < josephsaliba> #msdex I was doing it by callback
19:05 < josephsaliba> but the problem is that I always reached the stack limit 
19:05 < josephsaliba> because of recursive calls
19:05 < Nopik> hi all.. is there any way to pass some context along all chain of callbacks/events? i mean, except of passing it explicitly as argument
19:05 < coffeecup_> does the latest socket.io version support sending typed arrays / binary data?  
19:05 < Nopik> Domain module seem to be very close to what i'm looking for
19:05 < coffeecup_> josephsaliba: have a look at https://github.com/caolan/async
19:06 < vicapow> Boolean('false') returns true ...
19:06 < josephsaliba> coffeecup_: I looked at it â€¦ but it uses callbacks too
19:06 < josephsaliba> and my problem is that I always reach the call stack limit
19:09 < josephsaliba> @msdex: Would Deferred Objects solve my problem?
19:09 < josephsaliba> mscdex*
19:09 < mscdex> josephsaliba: where are the recursive calls?
19:09 < styol> josieliang: just curious, checking out couchnode?
19:09 < josephsaliba> I just changed my code
19:09 < mscdex> josephsaliba: you're passing a callback to flushNewProducts which gets called _once_ in your writeFile callback
19:10 < josephsaliba> ok i'll show you my code as it was before
19:10 < josephsaliba> give me some minutes
19:13 < niggler> anyone use npm with an application?
19:13 < niggler> *npm + package.json to manage dependencies for an application, not a module
19:13 < CoverSlide> niggler: all node apps are modules
19:14 < CoverSlide> usually what you do is edit package.json -> "dependencies"
19:14 < CoverSlide> then npm install
19:14 < niggler> but npm requires a name and version
19:14 < CoverSlide> or npm upgrade
19:15 < CoverSlide> or update ... can't remember
19:15 < niggler> https://github.com/isaacs/npm/issues/2932
19:15 < CoverSlide> so?
19:15 < CoverSlide> just make them up then
19:15 < niggler> i thought i was doing something wrong
19:15 < CoverSlide> you don't need to publish it in the end
19:16 < josephsaliba> mscdex: Here's my code 
19:16 < josephsaliba> http://pastebin.com/T9zg70Pm
19:17 < Leo__> Is anyone using geoip? It doesnt seem to install via npm... does anybody know a alternative to get the geolocation of an ip?
19:17 < LowValueTarget> Leo
19:17 < LowValueTarget> Leo__: I have created a simple JSON webservice for GeoIP information
19:18 < Leo__> i need to test thousand of ip's sometimes.. is it ok '-'? guess not a free webservice rsrs correct?
19:19 < LowValueTarget> Leo__: Here's something to get you started. Unfortunately I do not have access to my webservice code at the moment
19:19 < LowValueTarget> http://pastebin.com/EmEVbHj0
19:19 < LowValueTarget> that should get you on the righ track.
19:19 < LowValueTarget> s/righ/right/
19:19 < Leo__> Thanks.
19:34 < CoverSlide> Lisztomania! Think less but see it grow! Like a riot like a riot oh!
19:36 < larryapplegate> I am trying to recreate the MongoDB example in "Smashing Node.js"
19:37 < larryapplegate> I have posted the first part of the example, which is supposed to present the Sign up form, using Jade
19:37 < larryapplegate> https://github.com/larryapple/Smashing-MongoDB
19:38 < larryapplegate> When I run it, the browser shows the title, but not the form. Can anyone help me figure out why Jade does nothing?
19:41 < CoverSlide> larryapplegate: you need to indent under your 'block's
19:41 < CoverSlide> otherwise it will think it's just an empty block
19:43 < larryapplegate> Converlide: Wow! Thanks for the help!
19:43 < tnorris> have a question about use of buffers and typed arrays. anyone think they could help?
19:44 < mscdex> tnorris: shoot
19:51 < tnorris> mscdex: it's possible to wrap a Buffer in a Typed Array, but when you assign values they all get assigned in reverse.
19:51 < tnorris> mscdex: I'll create a gist explaining what I mean
20:02 < linuxR> hi all, is there something as request-private variables in nodeJS?
20:06 < mscdex> linuxR: using scoping to keep them private?
20:07 < tnorris> mscdex: is a Buffer essentially the same as an ArrayBuffer? I mean, I can work with them the same way.
20:07 < mscdex> tnorris: not quite the same API-wise. implementation-wise, i'm not sure as i haven't really looked at the latest implementation for typed arrays in v8
20:07 < aalex-sat> Hi
20:08 < mscdex> tnorris: i think the node team did add slice to typed arrays the other day
20:08 < aalex-sat> I have an addon built. Fine. Now, how do I install it so that we can use it without specifying its whole path?
20:09 < mscdex> aalex-sat: make it a module?
20:09 < mscdex> aalex-sat: module/package/whatever
20:09 < tnorris> mscdex: ok, what I'm getting at is I think the Buffer implementation is strange. here's an example: https://gist.github.com/4034041
20:09 < aalex-sat> mscdex, I have my package.json ok. Now, what do I do?
20:09 < aalex-sat> mscdex, How do I install it?
20:10 < mscdex> aalex-sat: is this a private addon or something you're publishing to the public npm repository?
20:10 < tnorris> mscdex: if I wrap a Buffer in say a Uint16Array, I can use it to save utf8 characters and it's length is a multiple of 2. But if I create a Buffer with a utf8 character than length is a multiple of 3...
20:11 < linuxR> mscdex, yes is that possible?
20:11 < aalex-sat> mscdex, well, it's open source, but requires a library that is not part of Debian yet.
20:11 < mscdex> linuxR: sure... it's a part of the language
20:11 < tnorris> mscdex: if that's the case, then serialized data over net sockets could be reduced by 1/3 if the implementation changed.
20:11 < aalex-sat> mscdex, it's a bit early to publish it, but the idea is to make it public when ready.
20:12 < linuxR> mscdex, I mean in the context of the nodejs architecture ... 
20:12 < linuxR> which I have not yet fully understood ;)
20:12 < mscdex> aalex-sat: ok, well until then you can just create a node_modules subdirectory and make a subdirectory under that with the name of your package/module (e.g. node_modules/foo and package.json has `"name": "foo"`)
20:13 < mscdex> aalex-sat: then make sure you have your 'main' set in package.json to point to your addon. after that in your top level directory you can simply do `require('foo')`
20:13 < aalex-sat> mscdex, ah and then manually copy it there
20:14 < aalex-sat> mscdex, the "node_modules" is in my app, right? (my app and the addon are two separate projects)
20:14 < samholmes> I miss the lonely island on snl
20:15 < mscdex> linuxR: i guess i don't quite understand what you're asking. scope and such is a function of the language, not node. node is "just" the I/O layer on top of the language
20:15 < aalex-sat> mscdex, and the package.json is in the app as well?
20:15 < mscdex> aalex-sat: package.json is in node_modules/foo (your addon is/will be a package) and node_modules is in your app's directory
20:16 < linuxR> mscdex, I mean how can node.js associate variables with specific requests?
20:16 < mscdex> aalex-sat: you can create a package.json in your app directory too if you want, and set a dependency for your addon package, but that's not really necessary unless you deploy and want to dynamically install things
20:17 < mscdex> linuxR: two ways: scope and/or tacking on properties to a request object
20:19 < linuxR> mscdex, I wonder about the part of node.js that is not visible in the code examples and that keeps everything running
20:19 < aalex-sat> mscdex, so... my app contains a node_modules/tempi/ directory, which contains the whole Git repository of my tempi addon, and then my app would require("node_modules/tempi") given that node_modules/tempi/package.json contains "main:"node_modules/tempi"" ?
20:20 < aalex-sat> I am confused
20:20 < aalex-sat> So I must nest the two Git repositories?
20:20 < linuxR> e.g. a step-by-step description of what node.js does when data arrives at the node.js process
20:20 < linuxR> could not find any such documentation :(
20:21 < flexd> is node-db horribly outdated?
20:21 < flexd> it looks fairly nice but the latest blog update is from 2011 :/
20:22 < aalex-sat> So I must nest my Git respositories so that I use my addon in an app?
20:23 < mscdex> aalex-sat: you have your app in /app. your addon lives in /app/node_modules/myaddon. /app/node_modules/myaddon/package.json has 'name' set to 'myaddon' and 'main' set to 'path/to/myaddon.node'. /app/foo.js simply contains `require('myaddon');`
20:23 < mscdex> 'path/to/myaddon.node' is relative to /app/node_modules/myaddon
20:24 < aalex-sat> mscdex, ah ok, thanks! So yes, I must nest my repositories.
20:24 < mscdex> flexd: what were you looking to use it for?
20:25 < ericelliott> here's an odd question, maybe.. I want to get the version of my app into JS that gets delivered to browsers. I'm thinking that grunt could look at package.json and build a browserify module that my browser bundle can then require (using browserify)
20:25 < ericelliott> does that sound sane?
20:26 < flexd> mscdex: I want to use mysql with a express application
20:26 < flexd> well, a restify.js application to be more specific :)
20:26 < ericelliott> I'm already using grunt and browserify
20:26 < flexd> I don
20:26 < flexd> I do not really need a ORM, so just having a simple abstraction layer like node-db looks nice :P
20:26 < mscdex> linuxR: node "polls" for events, whether it's from the file system, network, etc. when those events come in, they're pushed to the javascript layer from C++ land
20:27 < flexd> err - "nice :p", accidentally pasted something :/
20:27 < larryapplegate> Coverslide: I believe I've fixed the indention, and made sure everything is exactly like in the book. Still doesn't display the form.
20:29 < mscdex> flexd: well, there are modules that create SQL statements for your via a set of high level, chainable methods. so using something like that with the `mysql` or `mariasql` (my module -- i confess ;-) should work
20:29 < flexd> Yeah, that's what I am looking for
20:29 < aalex-sat> mscdex, "main":"build/Release" ?
20:29 < aalex-sat> (my app doesn't find it right now)
20:29 < flexd> I am already using node-migrations for migrations, just need something simple to query with high level chainable methods
20:29 < CoverSlide> larryapplegate: which form? /signup ?or /login ?
20:30 < flexd> hm, github is super slow today
20:30 < larryapplegate> all of them
20:30 < CoverSlide> sorry, lemme pause my ddos
20:31 < mscdex> flexd: there's at least half a dozen listed here: https://npmjs.org/browse/keyword/sql
20:31 < CoverSlide> larryapplegate: it doesn't look like you indented login.jade
20:31 < CoverSlide> still looks the same
20:31 < mscdex> aalex-sat: "main": "build/Release/something.node"
20:32 < aalex-sat> ah
20:33 < flexd> mscdex: There's a lot to choose from
20:33 < flexd> I don't want to find some obscrure thing nobody else uses :p
20:33 < mscdex> tnorris: Buffer('string') defaults to utf8 encoding, which the 3 bytes you were seeing is correct: e2 9c 93
20:34 < mscdex> flexd: just have to look at popularity, commit frequency, outstanding issues/pull requests and comment activity on them, etc
20:34 < mscdex> flexd: as far as i know, there is no "standard" for that kind of module
20:35 < larryapplegate> Coverslide: I did fix it, but must have failed to save. But anyway, it makes not difference, and signup should be the first output. I even copied the signup code to layout.jade, to no avail
20:36 < aalex-sat> mscdex, node just crashes with a "Error: invalid argument". Any way to get more info?
20:36 < aalex-sat> The traceback is not much verbose.
20:36 < flexd> mscdex: there should be hehe
20:36 < CoverSlide> larryapplegate: literally, i git cloned your repo, indented everything below block in all your view/*.jade and it works for me
20:36 < CoverSlide> larryapplegate: http://coverslide.me:3000/
20:36 < aalex-sat> It's when I require my addon, of course.
20:36 < mscdex> aalex-sat: hard to know without seeing any code, etc.
20:37 < aalex-sat> of course
20:39 < larryapplegate> Coverslide: I was careful to use spaces and not tabs, thought I had it. 
20:40 < aalex-sat> mscdex, the addon's package.json: http://code.sat.qc.ca/redmine/projects/node-tempi/repository/revisions/develop/entry/package.json
20:40 < CoverSlide> larryapplegate: this has nothing to do with spaces vs tabs
20:40 < CoverSlide> this has to do with making your indenting correct
20:40 < aalex-sat> mscdex, my app: http://code.sat.qc.ca/redmine/projects/tempi-snake/repository/revisions/develop/entry/proto-snake.js
20:40 < CoverSlide> when you have a `block body`
20:41 < CoverSlide> and below it the next line is at the same indentation level, then the block is empty
20:41 < aalex-sat> mscdex, the traceback: http://pastebin.com/4kKT6urP
20:42 < CoverSlide> larryapplegate: to have the body contained within the block, you need to set up the hierarchy to know that all the markup is a child of block
20:42 < CoverSlide> larryapplegate: to do this, it needs to be one indentation level more than block
20:42 < larryapplegate> it all looks correct to me
20:43 < CoverSlide> larryapplegate: if that's what you have on your github right now, then it's all wrong
20:43 < CoverSlide> you have it like this:
20:44 < CoverSlide> block body
20:44 < CoverSlide> form ...
20:44 < CoverSlide> it needs to be like this:
20:44 < CoverSlide> block body
20:44 < CoverSlide>   form ...
20:44 < CoverSlide> you see the difference
20:44 < larryapplegate> i understand - i'm trying to push my changes back yet again
20:44 < mscdex> aalex-sat: in your addon source, are you supplying the correct name in NODE_MODULE() ?
20:44 < CoverSlide> and all the stuff under form needs to be indented one more level
20:45 < mscdex> aalex-sat: it should be something like: NODE_MODULE(tempi, init); // init is your Initialize function
20:45 < linuxR> mscdex, but there is no way of interrupting current execution when a new event arrives, right? no preemption?
20:45 < mscdex> aalex-sat: the first argument has to match the filename of your .node file
20:45 < mscdex> aalex-sat: minus the extension of course
20:45 < mscdex> linuxR: correct
20:46 < aalex-sat> mscdex, ah! no I wasn't!! I see.
20:46 < aalex-sat> mscdex, ah, I was afraid it would name clash with the name of my c++ namespace.
20:46 < aalex-sat> mscdex, now it works! many thanks!
20:46 < aalex-sat> yeah
20:46 < mscdex> aalex-sat: awesome :-)
20:47 < aalex-sat> sorry for keep asking... I really wanted to sort that out.
20:47 < mscdex> no problem
20:47 < aalex-sat> mscdex, then, I will later publish it on npm index
20:47 < linuxR> mscdex, so when I have 100 request "currently" being processed, I have actually 1 request being processed and 99 pointers to some location in the request handler?
20:48 < tnorris> mscdex: I'm not understanding how a Buffer only uses the minimum size for each character in a string, then can decode it properly.
20:49 < tnorris> mscdex: for example (new Buffer('hâœ“')).length === 4
20:50 < mscdex> linuxR: erm, not quite. for network I/O there is a backlog buffer at the kernel level, so node keeps calling accept() while there's still something to accept. every time it accepts the connection, it raises events in javascript land
20:50 < mscdex> tnorris: that's how utf-8 works
20:50 < mscdex> tnorris: http://en.wikipedia.org/wiki/Utf-8#Description
20:51 < linuxR> okay mscdex thanks, thats very interesting
20:52 < nlf> right, not every character is more than one byte is my understanding
20:52 < nlf> ucs-2 on the other hand
20:54 < mscdex> yeah, ucs-2/utf-16 is a different thing, it can store the entire character in a single byte since \u2713 is less than \uFFFF or whatever the technical max character code is for utf-16
20:54 < mscdex> er not a single byte, but you know what i mean :-)
20:55 < nlf> right
20:55 < nlf> i've spent entirely too much time in buffer land lately
20:55 < Codeir> heya, any of you use vows?
20:57 < tnorris> Codeir: yup
20:58 < Codeir> I have a folder full of tests (binder full of tests, lol). When I run vows lib/test/* it flips out and says it can't find the module. I imagine I need either a package.json or an index.js that requires all of them?
21:00 < tnorris> nlf, mscdex: ok, well. I clearly didn't know how char encoding works. now I'm curious how isaacs will migrate to typed arrays and preserve that functionality.
21:00 < nlf> yeah, i'm curious myself
21:01 < flybyme> does npm have an irc chan?
21:01 < flybyme> can someone help me with my npmjs.org account
21:03 < mscdex> isaacs: ^
21:03 < mehdi_> why i can't access to 80 port in node.js?
21:03 < flybyme> mehdi_> you need sudo user
21:03 < mscdex> mehdi_: you can, but only if you run as root, or you redirect port 80 to something higher than 1024 via iptables
21:03 < nlf> or use something like authbind
21:04 < tnorris> Codeir: is the project public?
21:04 < mscdex> or try verbal reasoning with node
21:04 < mscdex> :-P
21:04 < nlf> yup, argue with it
21:04 < nlf> "come on buddy, you can do it.. just try again"
21:04 < mehdi_> aha! tnx <flybyme> and <mscdex>
21:07 < sx> When using the 'request' module to scrape a website, how can I return the response html POST all javascript rendering
21:07 < FunnyLookinHat> If I'm writing a module that is initialized with params - and I need params.myVar to be set - but it isn't... what's the best way to handle that?  throw an exception or ... ?
21:07 < sx> by default, I am just getting the skeleton html. I need to allow the javascript to run and then get the rendered HTML
21:09 < invisib> Is it possible to have an API with NodeJS do real-time updates?
21:09 < flybyme> invisib> yes
21:11 < invisib> How does Node compare to Backbone?
21:11 < mscdex> invisib: two totally different things
21:11 < invisib> Figured you'd say that
21:11 < mscdex> :-)
21:11 < flybyme> lol
21:11 < mscdex> well, they are
21:12 < mscdex> backbone is a client side thing
21:12 < mscdex> (almost always anyway)
21:12 < flybyme> isaacs?
21:13 < invisib> So right now I'm trying to make an app with Django/TastyPie(makes APIs with Django models) and using Backbone/Pusher as the client. It does what I want (realtime updates to Django database and the page the user is currently viewing), but it seems like a lot of working parts. Could I replace my technique with Node?
21:14 < russfrank> you could replace your server portion with node
21:14 < mscdex> yeah
21:14 < russfrank> node does not run in a browser, however
21:15 < tnorris> Codeir: as an example of really simple working tests, here's an example: https://github.com/trevnorris/cbuffer
21:16 < mscdex> FunnyLookinHat: if it's a sync function, i would throw in that case
21:16 < tnorris> Codeir: all you should have to run from your projects root directly is `./node_modules/.bin/vows` and it should auto run all the tests.
21:16 < graeme_f> mscdex: on it! cheers :D
21:16 < mscdex> graeme_f: eh?
21:17 < qubit[01]> we really need a live edit javascript for the browser, so when I save my file, the javascript gets updated automatically
21:17 < qubit[01]> how has this not been done :/
21:17 < graeme_f> mscdex: thanks for the hint about diagnosing my seg fault...
21:17 < CoverSlide> c9 does it? right
21:17 < CoverSlide> ?
21:17 < mscdex> graeme_f: ohhhh hehe :-)
21:17 < CoverSlide> also, you can live edit in chrome dev tools
21:18 < CoverSlide> i'm not sure what wizardry it uses
21:18 < CoverSlide> but it's awesome
21:19 < CoverSlide> but it doesn't save back to your server, obviously
21:19 < qubit[01]> yeah, I guess I'm wanting some webstorm integration
21:20 < graeme_f> mscdex: can i do something similar with node-waf? one of the deps uses it by the looks of things
21:22 < mscdex> graeme_f: for node-waf.... you might be able to get away with setting the appropriate environment variables before `node-waf configure` and/or `node-waf build`
21:22 < graeme_f> mscdex: ok, i'll do some digging. thanks :)
21:23 < sinclair_> mscdex: i have a question for you
21:23 < mscdex> graeme_f: (e.g. something like: `CFLAGS=-g CCFLAGS=-g node-waf configure rebuild`)
21:23 < mscdex> sinclair_: i hope it's not typescript related
21:23 < larryapplegate> CoverSlide: Thanks, finally got it. Problem was that I duplicated and moved the project and the index.jade file in TextMate was still pointing to the old file.
21:23 < sinclair_> mscdex: its always TS related
21:23 < mscdex> sinclair_: :-(
21:24 < sinclair_> mscdex: the question was to do with web workers
21:24 < sinclair_> mscdex: and what the node equivalent of a web worker was
21:24 < mscdex> sinclair_: cluster? it's a different API and it's child processes vs threads, but similar function
21:25 < graeme_f> mscdex: hmm, i'll come back to that one - might get lucky and find the problem in one of the gyp deps
21:25 < sinclair_> mscdex: i thought cluster allowed you to run things on different threads, why would one use a cluster over a child_process?
21:25 < mscdex> there once was a node module that emulated web workers with child processes, but that was a long time ago
21:26 < mscdex> sinclair_: cluster uses child processes
21:26 < sinclair_> mscdex: the reason im asking is to push TS compilation out to a worker
21:26 < sinclair_> mscdex: oh i see
21:26 < mscdex> sinclair_: at least the core cluster module
21:26 < sinclair_> mscdex: how do processes communicate, with streams?
21:26 < mscdex> sinclair_: yes
21:27 < mscdex> sinclair_: http://nodejs.org/api/cluster.html#cluster_how_it_works
21:27 < sinclair_> mscdex: so, if i emit the compilation out to the standout out, i can host the host process read that right?
21:28 < sinclair_> mscdex: i just write the child process out to the console right?
21:29 < sinclair_> mscdex: and have the host redirect the child_process output stream?
21:36 < schalkneethling> hey all
21:37 < tnorris> sinclair_: slightly more complicated than that. here's a thoughput test I created: https://gist.github.com/4034650
21:37 < sinclair_> tnorris: thanks, ill take a look
21:37 < tnorris> sinclair_: run `node single-parent.js` or `node multi-parent.js` and the child will report how much data was transfered by sec.
21:38 < schalkneethling> I am using package.json to have npm install dependencies for a project. Thing is, it will install it locally in node_modules and it is not picked up from the command line so, I am wondering. How can I install these dependencies globally or, tell nom that it needs to run nom link after installing the modules?
21:40 < schalkneethling> s/nom/npm
21:40 < tnorris> sinclair_: remember that data is not guaranteed to be sent in a single packet. so you'll need to do some type of buffering until it's done.
21:40 < graeme_f> schalkneethling: npm install -g each of the deps you want globally installed
21:40 < tnorris> sinclair_: I created an extension to Stream to allow for that: https://github.com/trevnorris/deluged/blob/master/lib/segp.js
21:41 < tnorris> sinclair_: it will automatically buffer objects and send them to a child process in a round robin fashion as data is received.
21:41 < graeme_f> schalkneethling: only do the ones you want to run from the command line, though, better to have the others installed locally
21:41 < schalkneethling> graeme_f: yeah, but how will I specify this in package.json? I want the user to simply run npm install and the rest happens automigically
21:41 < schalkneethling> graeme_f: yeah, all of these are command line, grunt tools
21:42 < graeme_f> schalkneethling: oh right, sorry. you can't specify that in package.json because it would be really annoying :/
21:42 < schalkneethling> hmmmm
21:42 < tnorris> sinclair_: let me know if you have any questions. took me a week straight to figure this stuff out.
21:43 < graeme_f> schalkneethling: imagine you did npm install foo and it globally installed bar baz and qux for you automaticallyâ€¦ yuck
21:43 < sinclair_> tnorris: thanks mate :) i should be cool, done things like this in other languages in the past
21:43 < schalkneethling> graeme_f: yeah, I was wondering about that. so it will install all dependencies of the dependency globally as well?
21:44 < graeme_f> schalkneethling: yes, but only inside that module's node_modules folder
21:46 < graeme_f> schalkneethling: dependencies listed in package.json will only be installed in the node_modules folder that's found in the same folder as package.json
21:47 < graeme_f> schalkneethling: it's a lot simpler than i'm making it sound :)
21:48 < schalkneethling> graeme_f: so perhaps the best thing to do after npm install might be to add the node_modules folder to the PATH
21:48 < graeme_f> schalkneethling: why not just do npm install -g on each of the tools?
21:49 < schalkneethling> one can, but that is a lot of typing ;)
21:49 < graeme_f> schalkneethling: oh, right, i remember :)
21:55 < AviMarcus> There any up-to-date bzip2 mods for node.js? The most recent is ~1yr from Woodya/node-gzbz2 it looks like and build fails with fatal error: node_events.h: No such file or directory
22:12 < styol> Is gzip compressing JSON responses recommended or is the cost too expensive to justify? The documentation for zlib / gzip is kind of scaring me and I'm not entirely sure how one might cache potentially dynamic responses and/or how to cache them in general http://nodejs.org/api/zlib.html
22:30 < AviMarcus> OK I must be dumb. https://github.com/nearinfinity/node-unzip provides gives me an "entry"... and then.. how do I see the data??
22:30 < AviMarcus> it seems a waste to decompress it to disk first. but that part looks easy..
22:33 <@isaacs> flybyme: what's up?
22:34 < flybyme> @isaacs> can you help me out. i dont know why but i have two accounts with npmjs.com but with the one email
22:34 < flybyme> i cant get into the second account
22:35 < schalkneethling> any suggestion where one can talk about grunt and the related plugins?
22:35 < schalkneethling> or is this a good place?
22:36 < deoxxa[cookies]> schalkneethling: #grunt iirc
22:36 < schalkneethling> deoxxa[cookies]: thanks will try
22:36 < schalkneethling> well, I suppose one question is relevant, why would a module not add an entry to the node_mobules/.bin folder?
22:41 <@isaacs> flybyme: what are the accounts?
22:41 < flybyme> flybyme,tim
22:41 <@isaacs> flybyme: having two accounts with the same email is perfectly fine.  i have a whole bunch with the same email.
22:42 < flybyme> really i cant recover the pass of tim
22:42 <@isaacs> flybyme: "tim" is not yours.
22:42 <@isaacs> flybyme: it's tbranyen's
22:42 <@isaacs> flybyme: https://isaacs.iriscouch.com/public_users/org.couchdb.user:tim
22:42 < flybyme> https://npmjs.org/~Tim
22:43 <@isaacs> oh, capital.
22:43 <@isaacs> yeah.
22:43 <@isaacs> no caps allowed any more, sorry
22:43 < deoxxa[cookies]> > The site's security certificate is not trusted!
22:43 <@isaacs> deoxxa[cookies]: meh.  inspect it.  you'll see why.
22:43 < flybyme> @isaacs> so what do i do with the account then?
22:43 < flybyme> i cant get into it
22:44 <@isaacs> flybyme: i can add "flybyme" as the owner on all Tim's packages, and remove Tim, and then you can just use flybyme
22:44 <@isaacs> flybyme: is that ok?
22:44 < flybyme> yeah
22:44 <@isaacs> one sec
22:51 < tnorris> isaacs: I was thinking about the migration from Buffers to TypedArrays, and I'm sure how it could happen. Right now Buffers to some awesome string encoding and detection, which aren't possible with Typed Arrays.
22:52 < tnorris> isaacs: you could extend ArrayBuffers with the Buffer prototype, but any views would prevent the typed of .toString() support Buffers currently offer.
22:53 <@isaacs> tnorris: honestly, it might not ever be possible
22:53 <@isaacs> i haven't looked into it carefully
22:53 <@isaacs> it just sounds nice :)
22:53 < AAA_awright> Hey, we're finally talking about UInt8Array?
22:54 < AAA_awright> Sweet
22:55 < tnorris> isaacs: You can currently wrap a Buffer in a typed array view (e.g. new Uint8Array(new Buffer())) and it works great, and super fast. but utf8 string encoding with any typed array views just isn't possible.
22:57 < FunnyLookinHat> What do you guys use to manage lists with push/pop type of functionality?  Just the default array type ?
22:57 < AAA_awright> FunnyLookinHat: Array yes
22:57 < FunnyLookinHat> I want to be able to push things to the front and pop them off the end
22:57 < FunnyLookinHat> AAA_awright, ah ok
22:59 < FunnyLookinHat> Ooh - unshift() - that's what I was missing
23:00 < tnorris> FunnyLookinHat: if you'll be doing many unshifts and performance is important then i'd consider using a circular buffer.
23:00 < FunnyLookinHat> tnorris, I probably will be - 
23:00 < tnorris> (circular array)
23:00 <@isaacs> flybyme: look right? http://registry.npmjs.org/-/by-user/flybyme
23:00 <@isaacs> flybyme: http://registry.npmjs.org/-/by-user/Tim
23:00 <@isaacs> flybyme: the website will update as the caches expire
23:01 < tnorris> FunnyLookinHat: here's an implementation I did little while back: https://github.com/trevnorris/cbuffer
23:01 < FunnyLookinHat> tnorris, got a link to a good example of implementation ?
23:01 < tnorris> FunnyLookinHat: you'll just need to know the minimum length before hand.
23:02 < flybyme> this is not me https://npmjs.org/package/cssax
23:02 < flybyme> @isaacs> looks like a few extra repos
23:03 < tnorris> FunnyLookinHat: that implementation can be used for browser or node. I've been planning on making a node optimized version.
23:04 < flybyme> @isaacs> looks like this accounts repos https://npmjs.org/~timoxley
23:04 < FunnyLookinHat> tnorris, Great thanks!
23:04 < FunnyLookinHat> I'll probably rewrite just to make sure I know the concept in and out  :)
23:05 < tnorris> FunnyLookinHat: cool. good luck!
23:06 < kaizokuace> I'm having an issue, i want to listen on http and https, do i just call listen on each server object? is there some catch?
23:07 <@isaacs> kaizokuace: just create two servers :)
23:07 < kaizokuace> hmmm, thats what i did and its not working 
23:07 <@isaacs> kaizokuace: s1=http.createServer(handler); s2=https.createServer(options,handler); s1.listen(80); s2.listen(443)
23:08 <@isaacs> kaizokuace: then function handler(req, res) { do stuff here }
23:08 <@isaacs> kaizokuace: i bet you did something else :)
23:09 < kaizokuace> should i do listen on both after creating the servers?
23:09 < kaizokuace> or can i do it inline?
23:09 < blparker> either or
23:09 < kaizokuace> this is the error its giving me
23:09 < kaizokuace> Error: listen EACCES
23:09 < blparker> Verify that you dont' have any other applications already listening on port 80
23:10 < kaizokuace> one is on port 8080 and the ssl is 443
23:10 < kaizokuace> hmmmm
23:10 < kaizokuace> ok im dumb, i dont even have 443 open on this vagrant box
23:10 < blparker> what happens if you curl http://localhost:8080?
23:10 < blparker> Cool
23:11 < kaizokuace> so if it doesnt have the port it will just throw an error?
23:11 < st_luke> EADDRINUSE is the error for if the addr/port is in use
23:11 < larzconwell> http://pubs.opengroup.org/onlinepubs/000095399/basedefs/errno.h.html
23:12 < kaizokuace> oo thanks for error list larzconwell
23:12 < kaizokuace> thanks guys 
23:13 < larzconwell> Welcome.
23:17 < airtanah> kaizokuace: 443 is privileged, you need to bind as root
23:20 < charuru> is bower a competitor to component?
23:24 < kaizokuace> airtanah: thanks for that info! im pretty new to networking.  i just picked some other open port and it works
23:33 < FunnyLookinHat> What's the best way to do a for( i in arr ) backwards ?
23:33 < FunnyLookinHat> Just with a regular for( i = arr.length - 1; i >= 0; i--) ?
23:35 < tracker1> Anyone in here happen to work on the less compiler?
23:38 < tnorris> FunnyLookinHat: yes
23:38 < FunnyLookinHat> tnorris, rad
23:39 < FunnyLookinHat> tnorris, Is there a common lib that people use to build out the basic functionality of JS in Node for nice c-ish code ?
23:39 < tnorris> FunnyLookinHat: http://nodejs.org/api/addons.html
23:39 < FunnyLookinHat> i.e. underscore, etc. ?
23:39 < FunnyLookinHat> Ah right ok thx.
23:39 < FunnyLookinHat> was looking here: https://npmjs.org/
23:39 < TooTallNate> FunnyLookinHat: what are you trying to do exactly?
23:40 < tnorris> FunnyLookinHat: are you asking to write a C addon?
23:40 < FunnyLookinHat> TooTallNate, get up to speed
23:40 < FunnyLookinHat> oh no
23:40 < FunnyLookinHat> Just trying to make JS work a bit more efficiently in some places
23:40 < dshaw_> Is #nodebots the node hardware channel?
23:40 < FunnyLookinHat> in terms of syntax, etc.
23:40 < TooTallNate> FunnyLookinHat: just write JS code like it was C
23:40 < dshaw_> Nobody's home.
23:41 < FunnyLookinHat> TooTallNate, fair enough
23:41 < TooTallNate> FunnyLookinHat: i.e. functional, not object-oriented, if that's what you're looking for
23:42 <@isaacs> dshaw_: i think ti's robotsjs?
23:42 < FunnyLookinHat> stuff like this is nice...   :)    http://underscorejs.org/#arrays
23:43 <@isaacs> dshaw_: /join #robotjs
23:43 < tnorris> FunnyLookinHat: and after the basics, learn optimizations, like using Typed Arrays.
23:43 < dshaw_> isaacs: thanks
23:44 < tnorris> FunnyLookinHat: also learn how the v8 engine works. a lot of optimization can be achieved by writing code that v8 understands better.
23:44 < tracker1> grrr.. is there some weird memory constraint in node 0.8.14 windows x64?  node keeps just dropping, getting an errorlevel -1073741819
23:45 < tracker1> code that's been working for months now.. just updated node.
23:45 < FunnyLookinHat> tnorris, ooh ok good to know - thanks  :)
23:45 < FunnyLookinHat> tnorris, ooh ok good to know - thanks  :)
23:45 < FunnyLookinHat> ...
23:46 < FunnyLookinHat> sorry.
23:46 < tnorris> tracker1: example code?
23:47 < tracker1> tnorris, trying to create a simple enough example... it's happening in my build script that compiles a bunch of less files, and min-merges the css and js.
23:48 < tnorris> tracker1: only change in v0.8.14 that might have effected that was an update to v8.
23:48 < tracker1> tnorris, was on 0.8.12 before the update...
23:51 < DaMorpheuS> can someone help me out with express and authentiction?
23:51 < DaMorpheuS> authentication
23:51 < chilts> DaMorpheuS: what kind of authentication? Passport, EveryAuth, something else?
23:56 < DaMorpheuS> chilts are you there?
23:59 < tnorris> tracker1: I dropped while we were chatting. you have that code snippet?
--- Log closed Thu Nov 08 00:00:17 2012
