--- Log opened Mon Aug 20 00:00:51 2012
00:08 < Raynos> What's a non-buggy way to watch a directory for all changes recursively?
00:15 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
00:15 < AnonymousFunctio> Raynos: I haven't tried it on recursive directories, but I've found that Hound is very reliable.  https://npmjs.org/package/hound
00:16 < AnonymousFunctio> It requires a recent version of Node, 0.7.1 or later.
00:17 < AnonymousFunctio> Even if it doesn't support recursive checking, that should be easy enough to do yourself.
00:21 < Raynos> AnonymousFunctio: Does it watch new files automatically?
00:21 < Raynos> So if I create a new file will it watch changes to those
00:22 < AnonymousFunctio> Raynos: I am not sure, but it has two modes of operation.  You can use it to watch directories and files.  Give it a try and see if it alerts you to file changes on the directory mode.
00:22 < Raynos> it appears to
00:22 < AnonymousFunctio> Raynos: Worst case scenario, it is trivial to add a new file watcher for new files.
00:23 < Raynos> true
00:57 < deoxxa> http://blog.caustik.com/2012/08/19/node-js-w1m-concurrent-connections/ pretty impressive
01:00 < rvagg> deoxxa: "I think itâ€™s pretty reasonable for 1M connections to consume 16GB of memory" is kind of an understatement
01:00 < deoxxa> no kidding
01:06 < wingy> does uglify obfuscate?
01:06 < wingy> that is renaming variable/function names
01:09 < rvagg> wingy: yes, its part of the minification process
01:09 < rvagg> wingy: but there are plenty of options, check out the docs
01:09 < wingy> ok thx
01:16 < AnonymousFunctio> Speaking of minification/obfuscation, anyone known of a good obfuscator for Node.js applications that can handle require statements, building the application into one file?
01:16 < AnonymousFunctio> I don't care about folks reading my source, but have a legal requirement to at least attempt obfuscation for a project I"m working on.
01:16 < AnonymousFunctio> The goal is not to make the source unreadable, but to have legal recourse should someone outright copy it, above and beyond protections from copyright.
01:16 < jesusabdullah> I'd use uglify for obfuscation/minification
01:17 < deoxxa> yeah, uglify is the best there
01:17 < jesusabdullah> the process of minification happens to somewhat obfuscate code, good enough for your use case
01:17 < AnonymousFunctio> Cool, I'll check it out.  Last I looked at it, it didn't seem to like the require statements, but I'm looking at the readme now and it seems to support it.
01:17 < deoxxa> it shouldn't break anything it doesn't have permission to
01:17 < jesusabdullah> as far as compiling your code into a single bundle, check out browserify
01:18 < gkatsev> google closure compiler *can* get better results than uglify if you run it at the super-duper extra strength level
01:18 < jesusabdullah> yeah but like, fuglify's really easy
01:18 < jesusabdullah> I don't like thinking that hard
01:19 < jesusabdullah> also it really should've been called fuglify
01:19 < gkatsev> fuglify? uglify?
01:19 < AvianFlu> jesusabdullah: ++
01:19 < mscdex> node.js rules!
01:19 < gkatsev> oh, lol
01:19 < jesusabdullah> AvianFlu: sub and I joked about that a number of times
01:19 < gkatsev> jesusabdullah: yeah, definitely, unless you really need the ultra-strength minifcation uglify is best
01:20 < AnonymousFunctio> Thanks for the input, I'll check them out.
01:30 < rvagg> AnonymousFunctio: also Ender is an alternative
01:37 < AnonymousFunctio> rvagg: Thanks, I'll check into it.
01:39 < jesusabdullah> rvagg: ender does minification? Or do you just mean the assembly?
01:39 < Dragonblade> I was wondering what is the correct code for reading multiple files for fs.readFileSync()
01:40 < jesusabdullah> Dragonblade: one for each file
01:40 < Dragonblade> Ah alright
01:40 < jesusabdullah> Dragonblade: also can I recommend readFile over readFileSync? ;)
01:40 < Dragonblade> sure Ill give that a try. It will prolly stream the mp3's much better reducing the skipping anywho XD
01:42 < jesusabdullah> oh in that case createReadStream
01:42 < jesusabdullah> readFile buffers the whole shebang into memory
01:42 < jesusabdullah> reminds me: How are you playing the mp3s?
01:43 < jesusabdullah> I want bindings to portaudio but I'm so noob at C and it looks involved
01:45 < rvagg> jesusabdullah: Ender uses uglify for standard minification and also replaces copyright blocks of appended modules
01:45 < jesusabdullah> I see
01:46 < rvagg> jesusabdullah: new version of Ender (not quite ready for release but available as ender@dev in npm) does minification with either uglify or closure, yui will be added too, takes a --minifier option
01:46 < jesusabdullah> word
01:48 < Dragonblade> Jesusabdullah: Ill upload the player to my mediafire for ya to have a look at. My friend wrote it but he is usually busy. So I figured I would mess with it for Game server streaming
01:48 < Dragonblade> It streams into its own http
01:48 < jesusabdullah> hmm
01:48 < jesusabdullah> I want portaudio bindings for node
01:48 < Dragonblade> usually thats 8080 by default right?
01:48 < jesusabdullah> wait whaaaat
01:49 < jesusabdullah> these exist
01:49 < Dragonblade> at least thats I see
01:49 < Dragonblade> Ill upload NoRTiMS XD
01:49 < mscdex> yeah, i was about to say, someone did portaudio bindings..
01:49 < jesusabdullah> dudes: https://github.com/joeferner/node-portaudio
01:49 < jesusabdullah> way cool
01:50 < jesusabdullah> mscdex: well I remember there not being good audio bindings like 6 months ago
01:50 < mscdex> i think a couple others did bindings to other audio systems too, back when there was that contest to build such things
01:50 < jesusabdullah> hmm
01:51 < jesusabdullah> rvagg: does ender do sync requires or amd? I don't remember
01:53 < rvagg> commonjs, packed in a single file
01:54 < rvagg> have a semi-working source maps implementation too, that should be fun when it's ready
01:55 < Dragonblade> The coding on the player looks so simple but then again I just dove head first into Node.js :P
02:07 < Dragonblade> jesusabdullah: you were right on the multiple files. But on the readFile() it tells me the maximum size limit was exceeded
02:09 < Dragonblade> Maximum call stack size exceeded
02:09 < Dragonblade> thats what it is XD
02:12 < blazes816> recursion bug?
02:12 < Dragonblade> I believe so
02:12 < Dragonblade> If Im reading this correctly
02:13 < Dragonblade> Here is the error
02:13 < Dragonblade> /music/node_modules/priority-queue/src/PriorityQueue.js:0
02:13 < Dragonblade> (function (exports, require, module, __filename, __dirname) { /**
02:13 < Dragonblade> ^
02:13 < Dragonblade> RangeError: Maximum call stack size exceeded
02:13 < blazes816> does it require itself?
02:14 < deoxxa> paste mode codez
02:14 < deoxxa> (gist plox)
02:14 < Dragonblade> Blaze: Im not sure I just jumped head first into Node.js XD
02:14 < Dragonblade> so Im learning
02:14 < blazes816> haha, me too brother
02:15 < blazes816> it's a pure guess on my part
02:15 < Dragonblade> I can paste the music.js coding
02:17 < blazes816> Dragonblade: the error looks to be in the priority-queue module, not your code
02:17 < Dragonblade> hmmm
02:17 < blazes816> can you link to where you got it?  my google-fu is failing me
02:18 < Dragonblade> you mean the player?
02:19 < blazes816> no, node_modules/priority-queue/
02:19 < niftylettuce> anyone here work with node on ARM?
02:19 < blazes816> that priority-queue module.  did you build it or download it?
02:19 < Dragonblade> OH that came with the player my friend wrote up
02:19 < niftylettuce> e.g. compiling it on ARM and working with it, if so what version did you use?
02:19 < Dragonblade> He didnt really work out the bugs yet
02:19 < blazes816> gist.github.com that file yo
02:19 < Dragonblade> k yo
02:31 < Dragonblade> Yay found another error
02:31 < Dragonblade> This one is the server timing out really
02:31 < Dragonblade> but I think it's to do with the priority-queue as well
02:31 < Dragonblade> /music/nortims.js:56
02:31 < Dragonblade>         b1 = this.currentSong.readUInt8(p);
02:31 < Dragonblade>                               ^
02:31 < Dragonblade> TypeError: Cannot call method 'readUInt8' of undefined
02:31 < Dragonblade>     at NortimStreamer.<anonymous> (/music/nortims.js:56:31)
02:31 < Dragonblade>     at NortimStreamer.handleFrame (/music/nortims.js:4:61)
02:31 < Dragonblade>     at NortimStreamer.<anonymous> (/music/nortims.js:66:14)
02:31 < Dragonblade>     at NortimStreamer.handleFrame (/music/nortims.js:4:61)
02:31 < Dragonblade>     at NortimStreamer.<anonymous> (/music/nortims.js:66:14)
02:33 < beginner> hai I am new to node.. I saw a module being exported like this module.exports = function(x,y) {}
02:33 < ljharb> Dragonblade: looks like this.currentSong is undefined
02:33 < beginner> this is  the first time I am seeing anonymous function being exported
02:33 < ljharb> beginner: you can export anything you want
02:33 < beginner> anybody minds to explain to me?
02:33 < beginner> ah
02:33 < ljharb> beginner: it's better to use a named function imo, for stack traces, but certainly you can export a function. or a number. or whatever.
02:34 < Dragonblade> Ill have a look at the music.js then
02:34 < Hotroot> Quick mongodb question. Is there a way to get all subchildren? Like db.parent.find() but it would also find the things in db.parent.subparent
02:34 < Hotroot> Sub-collections I suppose
02:34 < beginner> so how do I call a function in it from another module? (let says the module name is test.js?)
02:35 < beginner> by preceeding it with the name of the module?
02:35 < ljharb> Hotroot: what's a subparent?
02:35 < ljharb> beginner: var a = require('test.js'); a(); ?
02:36 < Hotroot> Hmm, I could be looking at this the wrong way
02:36 < Hotroot> I did gamedb.items.potions.save(blah) for each potion
02:36 < Dragonblade> Yeah I don't think I defined the 2 test tracks. To google I go on how to define files now XD
02:36 < Hotroot> I assume I'm not suppose to go that "deep", and just have a db called "items" instead
02:37 < Hotroot> Although I can gamedb.items.potions.find() just fine
02:40 < beginner> ok. Thanks, ljhard!!
02:41 < beginner> *ljharb
02:41 < ljharb> np
03:01 < mscdex> what do osx users here use for a package manager? macports or homebrew?
03:05 < deoxxa> homebrew here
03:06 < Dragonblade> Alright
03:06 < Dragonblade> Did my testing it stops always near the end of the last song in the playlist
03:06 < Dragonblade> I wanna say its because I dont have the for loop added
03:12 < llappy> Is it possible to make NPM ignore permissions and not try to set them? I've got to do some things on a FAT32 volume and I get all sorts of NPM errors as a result
03:14 < ProLoser|Mac> anyone here use jerk?
03:14 < mscdex> hmmm.. homebrew is behind in mariadb versions, but neither homebrew or macports have a client-only package
03:14 < mscdex> :-\
03:21 < Raynos> Anyone want to recommend a file watching library before I write my own?
03:22 < thealphanerd> file watching?
03:24 < Raynos> yes a recursive one
03:26 < chilts> watch, watch-tree, watchfd, watchman, watchn, watchr <- probably something which will suit you there
03:26 < chilts> npm search watch # can help
03:26 < Raynos> i did that
03:26 < Raynos> i searched for watch file and half of them dissappeared
03:27 < chilts> actually, that was a npm search watch file
03:28 < chilts> fs-watcher, fs.notify, filechangemitter, filemonitor, filenotify, filewatcher, filewatch, fswatch
03:28 < Dragonblade> Music Player now works (y)
03:28 < chilts> are you sure that none of those do what you want?
03:28 < Dragonblade> just need to fix the frame skipping
03:29 < Raynos> I dont have time to check whether any of them are not buggy
03:29 < Raynos> its faster for me to write my own then try and verify them
03:30 < chilts> wow, that's ridiculous
03:30 < chilts> but, each to their own
03:30 < chilts> this is why we already have greater than 15 modules doing the same thing
03:30 < Raynos> chilts: I wasted three hours trying to debug & fix two watching libraries so far :/ I could have written a watcher in those 3 hours
03:31 < chilts> so why couldn't the other two be fixed? which ones did you try? did you raise a bug on the original project for them?
03:33 < Raynos> I tried browserify's in build watcher & hound. I can't fix them because I have no idea why they don't work. I didn't raise a bug because I havn't isolated them and I rather spend time finding or creating something that works. 
03:34 < aaronj1335> is anyone else seeing that npm 1.5.51 (the one that's shipping w/ node 0.8.7) fails to install man pages?
03:36 < chilts> aaronj1335: my version of npm with node 0.8.7 is 1.1.49?
03:36 < chilts> where did you get 1.5.51 from?
03:37 < aaronj1335> s/1.5.51/1.1.51/
03:37 < aaronj1335> that's what seemed to be installed via nvm on os x
03:38 < aaronj1335> although i could have run an npm update somewhere
03:39 < aaronj1335> chilts: are man pages installed for you? i've only got node.1, no npm, and nothing from other packages
03:39 < stagas> http://penteli.meteo.gr/stations/chania/webcam.htm
03:40 < Raynos> oh
03:40 < Raynos> its not a bug in these libraries
03:40 < Raynos> its a bug in node 
03:40 < aaronj1335> Raynos: i don't think node, i think it's a bug in npm
03:41 < Raynos> aaronj1335: different bug
03:41 < aaronj1335> Raynos: my bad
03:51 < aaronj1335> so everyone else has man pages for npm under node >= 0.8.6? 
04:14 < AshleyWaffle12> Hi
04:34 < pringlescan> Does anyone here use Kue?
04:57 < thatguydan> Hey, I should really know this, but fs.writeFile implicitly closes the fd before it runs the callback, correct?
05:00 < jesusabdullah> I hope so!
05:02 < thatguydan> me too lol, but i'm getting some super weird behaviour on an omap where if i hard reboot ~5seconds after a writeFile has returned callback, the file will exist but be empty
05:02 < thatguydan> Just checking the obvious things first
05:02 < pringlescan> thatguydan, what os an what version of node?
05:03 < thatguydan> ubuntu@omap:~$ uname -a
05:03 < thatguydan> Linux omap 3.2.18-psp14 #1 Sat Jun 9 05:26:22 UTC 2012 armv7l armv7l armv7l GNU/Linux
05:03 < thatguydan> ubuntu@omap:~$ node -v
05:03 < thatguydan> v0.6.12
05:04 < pringlescan> you're running V8 on arm?
05:04 < thatguydan> yup
05:04 < pringlescan> *shrugs* you can use lsof apparently to view open file handles if you're wondering I'd log it to a file and read it in a text editor, mine was huge
05:04 < thatguydan> mmkay, cheers, forgot about lsof
05:05 < pringlescan> Is it normal to have almost 7k files open on a desktop?
05:05 < pringlescan> â€¦ Skype doesn't close the file handles to any of it's image resources?
05:06 < thatguydan> hahaha
05:06 < thatguydan> performance? i hate skype
05:06 < pringlescan> â€¦ or any other osx appâ€¦ must be an os thing. i don't know why they'd need to leave the file handles open
05:06 < pringlescan> i thought you read something into memory then closed it
05:08 < pringlescan> Microsoft is the least offender, I have office apps open and it has less open file handles than LibreOffice or the Mail app
05:09 < wookiehangover> isaacs: jifasnif <3
05:09 < pringlescan> LibreOffice leaves a file handle open to every font on your system, yet none of the other apps that use fonts do that, I'm kind of amazed by this.
05:09 <@isaacs> wookiehangover: :D
05:10 < wookiehangover> isaacs: that was pulled out of a presentation I gave at boulder.js last month http://boulder-js.jit.su/
05:10 <@isaacs> nice :)
05:13 < pringlescan> wookiehangover, I'm so glad I clicked that link, haha
05:14 < wookiehangover> pringlescan: thanks! nice nick btw
05:14 < pringlescan> thanks
05:17 < deoxxa> i keep reading it as "pringle scan"
05:20 < pringlescan> deoxxa, it's a nick name from my old job at a photoshop so that's not far off, everyone thinks it's a reference to the cantenna
05:20 < deoxxa> heh
05:25 < pringlescan> whatttttâ€¦. my osx had the limit for file descriptors set to 256â€¦ no wonder I couldn't even do ls | wc on large directories or use mv * on large directories :-(
05:25 < pringlescan> that seems awefully low I thought the default was 2048
05:30 <@maxogden> which is more correct: "programming javascript", "programming in javascript", or "programming with javascript"
05:31 < gkatsev> yes
05:31 < AAA_awright> maxogden: You program with Node.js in ECMAScript
05:31 < ljharb> maxogden: http://www.googlefight.com/index.php?lang=en_GB&word1=programming+in&word2=programming+with says "programming in"
05:32 < gkatsev> barely, lol
05:32 < gkatsev> I stick with my answer
05:33 < ChrisPartridge> maxogden: "with" sounds proper to me, but I'm not very proper ;)
05:35 <@maxogden> one pedant, one statistician, and one gut feeler
05:35 <@maxogden> thanks ya'll!
05:43 < jesusabdullah> I think the first and second reflect a model of using human languages ("writing English" and "writing in English")
05:44 < jesusabdullah> whereas the third suggests like, more of a tool
05:44 < jesusabdullah> more like, "painting with watercolors" than "writing with English"
05:45 < joshthecoder> Well both "in" and "with" can be used to describe the "means" of a task.
05:45 < jesusabdullah> cutting with saws
05:45 < jesusabdullah> more like that
05:45 < jesusabdullah> perhaps it's tied to the tense
05:45 < jesusabdullah> er, plurality
05:45 < Dragonblade> wow
05:46 < Dragonblade> I had a tongue twister with that word
05:48 < joshwnj> jesusabdullah i think you're on to something there... "in" => material, "with" => tool
05:49 < joshthecoder> Got to love the ambiguous nature of English. :)
05:49 < jesusabdullah> If only I could throw syntax errors
05:50 < joshwnj> isn't that swearing? ;)
05:51 < Nuck> So, I'm looking at couch surfing around SF for a few days during NKO, any tips? :P
05:52 < Nuck> Also, is it bad that I think the callback hell is easier to read than the other examples on the callbackhell.com?
05:55 < joshthecoder> Nuck: I think those are just bad examples.
05:55 < joshthecoder> no offense to the guy who wrote them. :)
05:55 < Nuck> joshthecoder: Probably, but the callback hell is pretty
05:56 < joshthecoder> Nuck: really depends if you need the extra scoping closures provide in that case.
05:57 < joshthecoder> if your next "step" is independent of it's enclosing function, I would avoid a closure.
05:59 < joshthecoder> like "getThingFromHardDrive" might have a sub-step to "read file" which depends on a reference to the "db" handle defined in "getThingFromHardDrive".
05:59 < Nuck> Ah true
05:59 < joshthecoder> in that case it would make sense to use a closure for "read file" callback.
06:04 < Domenic> Does npm have vanity URLs for profiles?
06:05 <@konobi> https://npmjs.org/profile/<user>
06:05 < Domenic> yeah, was looking for a shortened version like they have for packages
06:08 < ljharb> "vanity" and "shortened" are usually mutually exclusive
06:09 < Nuck> What about tinyurl.com/myname?
06:09 < Nuck> Those things
06:09 < ljharb> that's a custom short url, but not a "vanity" url because it redirects away from it.
06:11 < Nuck> ljharb: It's a Vanity URL, technically.  Redirects don't invalidate vanity
06:11 <@maxogden> joshthecoder: nuck: if you rewrite the first code snippet on callbackhell to be less contrived i will merge it in
06:12 < ljharb> Nuck: it's totally an opinion thing since there's not really an answer. but anything that redirects wouldn't be a vanity url for me
06:13 < Nuck> maxogden: I'll make it just as contrived but actually functional :D
06:13 < Domenic> This is where I got the "vanity" term from: https://twitter.com/npmjs/status/232615556182851585
06:13 < SomeoneWeird> lol @ hoarders
06:13 < joshthecoder> Nuck: and add in the missing semicolons! ;)
06:14 < ljharb> ah "vanity short url", fair enough
06:14 < Nuck> joshthecoder: YUS!
06:14 < Nuck> SomeoneWeird: I'm loling too
06:14 < Domenic> yes semicolons on callbackhell please
06:14 < ljharb> and curly braces!
06:14 < jesusabdullah> YOU're a curly brace!
06:14 <@maxogden> goddamn you all
06:14 <@maxogden> semicolons are a personal choice
06:14 < jesusabdullah> YOU're a personal choice
06:14 < ljharb> according to brendan eich, they're an error.
06:14 < Nuck> maxogden: And I personally choose to use them :D
06:15 < ljharb> ASI is an error correction mechanism, he's said.
06:15 < ljharb> so you can personally choose to be wrong, sure!
06:15 < jesusabdullah> That's cause he's a noob
06:15 < Nuck> SEMICOLONS 4 LYFE
06:15 < Nuck> Can we just get a shirt that has a semicolon on it?
06:15 <@maxogden> i personally dont care until people start bikeshedding
06:15 <@konobi> Domenic: like npmjs.org/~<author> ?
06:16 < ljharb> Nuck: i'd definitely buy that shirt
06:16 < Domenic> konobi: that would be cool! /cc isaacs
06:17 < Nuck> I must say I'm loving the new nom site
06:17 < Nuck> It's gorgeous
06:17 < Nuck> And replacing the old search with Google is probably a wise decision :P
06:17 < ljharb> maxogden: i'd say that since there's more rules to remember when you avoid semicolons (about when you have to use them) than when you use them (about when you don't), it's best to teach use of semicolons, and leave the "choice" of omitting them to advanced programmers.
06:18 < Domenic> Let's not seriously have a semicolon debate.
06:18 < Domenic> Let's just, not do it.
06:18 < Nuck> ljharb: I believe we should all use semicolons because newbies copypaste it and fuck upâ€¦ I did :P
06:18 <@maxogden> all of these arguments have been made before
06:18 < Nuck> Then again, not all noobs are as stupid as I am
06:18 < Nuck> Soooooooo
06:18 <@maxogden> many of them on the node mailing list
06:18 < Nuck> s/am/was/
06:18 < Nuck> maxogden: I've noticed
06:18 < ljharb> lol i'm not having a debate about the merits of one over the other here.
06:18 < ljharb> i'm just saying, in the context of teaching.
06:19 < Nuck> "HOW I NODE 4 FISH"
06:19 < joshthecoder> The eternal return of the semicolon....
06:19 < jesusabdullah> I mean, I use semis but it's definitely due to a) workplace style guide and b) a sense of "academic writing style", and not because it's actually worse
06:19 <@maxogden> its the most bikesheddable thing but actually has close to 0 impact on how you write js
06:19 < jesusabdullah> mostly b
06:19 < Nuck> jesusabdullah: Ditto
06:19 <@konobi> VENTISUGARFREEHALFCAFFSCRIPT FTW
06:19 < ljharb> maxogden: i find it has lots on how i read it, though.
06:19 < Nuck> I mostly do it because, wellâ€¦ Standards, man
06:19 < jesusabdullah> but not even standards
06:19 < Nuck> konobi: OH GOD NOT ANOTHER COMPILE-TO-JS LANGUAGE
06:19 < jesusabdullah> it's like writing in the third person
06:20 < jesusabdullah> versus the first
06:20 <@maxogden> ljharb: thats because it is a personal style and you have yours and i have mine
06:20 < jesusabdullah> Writing in the first person is liberating, but in some contexts it's more "proper" to write in an apersonal tone
06:20 < jesusabdullah> even though it's not really any better
06:20 < Nuck> jesusabdullah: See, I find it's hard to set workplace standard style guide for when semicolons are needed, so I just say "fuckit use them"
06:21 < jesusabdullah> It's setting a certain "professionalism" tone to the work though
06:21 < Nuck> My big angry thing in code is when programmers use spaces instead of tabs
06:21 < ljharb> lol "Bikeshedding, The Sequel"
06:21 <@maxogden> i use semicolons instead of whitespace
06:21 < jesusabdullah> that's retarded nuck, spaces are the best
06:22 < Domenic> If nothing else your code looks ugly on GitHub when using tabs
06:22 < Nuck> I will rage at people over spaces instead of tabs (for indentation), simply because soft tabs allow adjustable width (I do 3 tabs, my coworkers do 4 or 2)
06:22 < joshthecoder> Domenic: I think they fixed that
06:22 < Domenic> joshthecoder: nope
06:22 < Nuck> I think they did too
06:22 < ljharb> i'm a 4-space-width tab man, myself
06:22 <@konobi> spaces ftw
06:22 < Nuck> I used to do 4-wide tabs, but I switched to 3 because it's narrower and I started doing Node.js
06:22 < jesusabdullah> excepting for makefiles of course
06:23 < Domenic> huge tabs on GitHub: https://github.com/addyosmani/todomvc/blob/master/architecture-examples/backbone/js/views/todos.js
06:23 < Nuck> Tabs ar still eightwide
06:23 < Nuck> :(
06:23 < Nuck> IDK if CSS can control that
06:23 < Nuck> Can somebody make it not suck and then send a pull request to GitHub?
06:23 < Nuck> :D
06:23 < ljharb> Domenic: that's a flaw in github though, not a flaw in the character that semantically means "indentation"
06:23 < Domenic> ljharb: you're a flaw
06:24 < ljharb> nice.
06:24 < dr0id> heh
06:24 < joshthecoder> Tabs are a pain when it comes to alignment.
06:24 < Nuck> Actually
06:24 < ljharb> joshthecoder: tabs for indentation. spaces for alignment. problem solved.
06:24 < Nuck> Apparently there is a tab-size CSS property
06:24 < Nuck> ljharb: Exactly what I do
06:24 < jesusabdullah> I loike spaces because all the white space is consistently just spaces and newlines
06:24 < Nuck> And if you do that combo, you can change your tab width from 1 to 24 without alignment ever breaking
06:24 < jesusabdullah> like*
06:24 < joshthecoder> ljharb: I like things to be consistent. All spaces and the code looks the same everywhere. :)
06:25 < Nuck> joshthecoder: I use configs for that
06:25 < ljharb> joshthecoder: so you force fonts and syntax highlighting on other devs too? thats kind of fascist
06:25 < jesusabdullah> and I also appreciate the freedom of being able to do "half-tabs" or "quarter-tabs"
06:25 < Nuck> ljharb: Exactly!~
06:25 < ljharb> just like my IDE, and my syntax highlighting, is up to me, so too should be my indentation :-)
06:25 < joshthecoder> ljharb: why can't your IDE just render spaces wider if you want?
06:25 < jesusabdullah> See, as an author I'm writing my code to be crafted in a certain manner.
06:25 <@maxogden> cwhile (true) {
06:25 <@maxogden> ;;;;if (semicolons === "awesome") {
06:25 <@maxogden> ;;;;;;;;console.log('semicolons 4 lyfe')
06:25 <@maxogden> ;;;;}
06:26 < ljharb> Nuck: only firefox and opera support tab-size i believe
06:26 <@maxogden> }
06:26 <@maxogden> forget that c
06:26 < ljharb> joshthecoder: show me an ide that can do that?
06:26 < jesusabdullah> maxogden: Hell yeah
06:26 < Nuck> maxogden: THIS.
06:26 < ljharb> joshthecoder: also i don't want the spaces between words to be wider. that's just silly.
06:26 < jesusabdullah> It's not my fault if you don't like my brushstrokes
06:26 < Nuck> ljharb: The bug report requesting it in WebKit is marked RESOLVED FIXED
06:26 < ljharb> jesusabdullah: yes but that only holds up if you're writing private code by yourself
06:27 < ljharb> jesusabdullah: if you work with anyone elseâ€¦
06:27 < whiskers75> my bot now does bit.ly, ops, weather and calculations (plus/minus/mult/div).
06:27 < Nuck> ljharb: :O it works!
06:27 < whiskers75> it's on ##node-irc-bots
06:27 < Nuck> ljharb: I just applied tab-size: 3 to GitHub and it worked!
06:27 < jesusabdullah> you work with like-minded individuals, or you make concessions in order to achieve a common standard
06:27 < ljharb> Nuck: thats probably in safari 6 then, not 5.1
06:27 < jesusabdullah> neither one is worse than the other
06:27 < Nuck> jesusabdullah: My common standard is soft-tabs
06:27 < Nuck> ljharb: I'm in Chrome
06:27 < Nuck> 21
06:27 <@konobi> chrome... that is all
06:28 < ljharb> chrome's not stable enough for me.
06:28 < Nuck> Does Safari really matter?
06:28 < whiskers75> wow, so many ops are not afk :D
06:28 < whiskers75> i like Firefox
06:28 < jesusabdullah> I for one appreciate maxogden's work generally
06:28 < Nuck> Where do I send a feature request for tab-size customization on CSS?
06:28 < whiskers75> (it comes with Ubuntu, anyway)
06:28 < ljharb> safari stores tab URLs when the tabs begin loading - chrome stores then when they finish. if i have my internet off, for example, and chrome crashes, i lose all my tabs.
06:29 < Nuck> ljharb: Ahh, I can see that being a problem, yeah
06:29 < Nuck> I never had trouble with it tho
06:29 < Nuck> (I always have internet TBH)
06:29 < whiskers75> ljharb: yep that could be annoying
06:29 < ljharb> also i hate the omnibox, and hiding the "http" is just stupid.
06:29 < jesusabdullah> what if all the tabs are already loaded, then you lose internet, then chrome crashes?
06:29 < whiskers75> I DON'T LIKE HIDDEN HTTPS
06:29 < jesusabdullah> presumably this only is an issue for tabs that are still loading during the crash
06:30 < ljharb> jesusabdullah: in that case, yes, they'd be kept in chrome, but then if i reopen it, and it crashes again before all the tabs are fully loaded, i lose half of them
06:30 < ljharb> right
06:30 < ChrisPartridge> Why does it keep crashing? :o
06:30 < whiskers75> when is or was Node Summercamp?
06:31 <@maxogden> early sept
06:31 < whiskers75> shoot.
06:31 < ljharb> ChrisPartridge: oh i dunno, some page crashes it or something. the point is its brittle, i've lost tabs, and thats unacceptable.
06:31 < Nuck> ljharb: Pages don't crash the whole browser
06:31 < joshthecoder> ljharb: you sure love your tabs :)
06:31 < Nuck> ^
06:31 < whiskers75> the notice said "opper bots are in the penalty bin until at least Node SummerCamp"
06:31 <@konobi> i should probably get myself down to that this year
06:31 < ChrisPartridge> Yeah, my "tab" generally crashes, I think i have the same chrome session since I installed this PC
06:31 < ljharb> Nuck: oh believe me, they do. especially in chrome.
06:32 <@maxogden> here: this avoids all semicolon bugs https://gist.github.com/3401560
06:32 < whiskers75> USE FIREFOX
06:32 < ljharb> ew
06:32 < whiskers75> what's ew?
06:32 < Nuck> maxogden: Why is Node Summercamp happening at the end of summer?
06:32 <@maxogden> you never know when you might get bit by a semicolon bug so you better put semicolons in your code
06:32 < ljharb> firefox :-p its web inspector is junk
06:32 < Nuck> This is damn near fall
06:32 < Nuck> I just contacted GitHub to ask them to add support for tab-size :D
06:32 <@maxogden> Nuck: summercamp is during summer
06:32 < Nuck> Hope they do this
06:33 <@konobi> maxogden: bagsie a spot!
06:33 < Nuck> Firefox is shit.
06:33 <@konobi> =0P
06:33 < dr0id> exactly
06:33 < Nuck> I miss the days when Firefox didn't suck :(
06:33 < ChrisPartridge> maxogden: i think you missed a semi colon dude
06:33 < Nuck> Y'know, before Firefox 4
06:33 < whiskers75> On Ubuntu, it doesn't suck
06:33 <@konobi> Nuck: actually some of the more recent ones have been okay... but not enough to make me moce from chrome
06:33 < Nuck> whiskers75: True, Ubuntu sucks far less
06:33 < ChrisPartridge> Have you all seen the 3D dom inspector?
06:33 < ChrisPartridge> (in firefox)
06:33 < Nuck> konobi: Same.  And they're adding gimmicks.  Like the 3D DOM view
06:33 < whiskers75> and I use Ubuntu, so... :)
06:33 < Nuck> That's so ridiculous
06:33 < dr0id> old news cHris
06:34 < Nuck> When the fuck would I need to see the page in 3D?
06:34 < whiskers75> the 3d dom view :D
06:34 < whiskers75> it looks so wierd
06:34 < ljharb> Nuck: that hasn't been since before version 3.
06:34 < ChrisPartridge> it's hillarious
06:34 < whiskers75> AND NOT NEEDED
06:34 <@konobi> i just prefer the tooling in chrome over all... that and it's much quicker and eaier in general
06:34 < dr0id> Firefox sucks in ubuntu too btw
06:34 < Nuck> ChrisPartridge: It is hilarious
06:34 < Nuck> konobi: Ditto
06:34 < ChrisPartridge> "Let's waste our time on a useless 3d dom tool, instead of making useful dom tools"
06:34 < dr0id> firefox is shit, its slow. it should start using webkit.
06:34 <@konobi> Nuck: played with appjs yet?
06:35 < Nuck> maxogden: I like to put curlies on their own lineâ€¦ Won't that break with that?
06:35 < Nuck> konobi: Not sure, let me find out momentarily
06:35 <@konobi> appjs.org
06:36 < dr0id> http://appjs.org/
06:36 < joshthecoder> konobi: that's an interesting project.
06:36 < whiskers75> check out the new version of the opper bot: ##node-irc-bots :D
06:36 < Nuck> It looks interesting, but rather bulky
06:37 <@konobi> but... it's node... in a desktop app!
06:38 < ChrisPartridge> konobi: what does it use to render the actual dom?
06:38 <@konobi> chromium
06:38 < Nuck> konobi: ahem, didn't they do that on WebOS
06:38 < Nuck> And fail?
06:38 <@konobi> or CFE to be exact
06:38 < Nuck> Well, I hear WebOS actually was pretty good, only dragged down by HP
06:38 <@konobi> b2g is similar
06:39 <@konobi> but a single target for multiple platforms is pretty appealing
06:39 < joshthecoder> Nuck: well it was in hot waters before HP took over.
06:39 < Nuck> joshthecoder: And in hotter waters since then
06:39 < ChrisPartridge> konobi: Your project? (appjs)
06:39 < joshthecoder> HP just gave it a quicker death.
06:40 < Nuck> konobi: B2G isâ€¦ meh
06:40 < Nuck> I'd rather not have the Gecko engine weighing me down
06:40 < Nuck> It's not exactly known for incredible speed, y'know?
06:40 < joshthecoder> I just can't get that excited about "html" based apps.
06:40 <@konobi> ChrisPartridge: i keep trying to find a project for it... but i'm more a systems guy
06:40 <@konobi> Nuck: that's assuming it's gecko
06:41 <@konobi> (not sure really... but i know they're pretty open on that sort of thing)
06:41 < Nuck> konobi: You meant boot2gecko, right?
06:41 <@konobi> yup
06:41 < joshthecoder> Nuck: they have done some work on making Gecko better in this use case.
06:41 < Nuck> I'm assuming by boot to "GECKO" they meant booting into gecko
06:41 < whiskers75> BTW, I am now hosting npmbro here 24/7!
06:41 <@konobi> or at least something referred to as "gecko"
06:41 < Nuck> whiskers75: purr is still better.
06:41 < Nuck> konobi: Could just be a salamander
06:42 <@konobi> minimo was referred to as gecko
06:42 < whiskers75> purr? ill get right on it :D
06:42 < whiskers75> purr? link plz
06:42 < Nuck> purr is a damm beast
06:43 < Nuck> As I recall, it was able to run things on spider monkey or v8 at one time >_>
06:44 < whiskers75> link? :D
06:44 < Nuck> whiskers75: No clue, TBH
06:44 < Nuck> I think I got a link like a year ago
06:45 < whiskers75> oh well, just do with npmbro
06:45 < whiskers75> npmbro
06:45 < npmbro> Powered by http://jit.su/         Available commands: npm search | npm docs | npm install | npm stats | npm help | npm node | npm credits
06:45 < whiskers75> (powered by Nodejitsu) :D
06:46 < Nuck> ahh
06:46 < Nuck> whiskers75: So you threw npmbro onto Nodejitsu?
06:47 < nicholas_> anyone here using mysql and mocha? I want to find a nice way to clean my database in my beforeEach clauses
06:47 < dr0id> npmbro
06:47 < npmbro> Powered by http://jit.su/         Available commands: npm search | npm docs | npm install | npm stats | npm help | npm node | npm credits
06:48 < whiskers75> yeah i did
06:48 <@konobi> is it hosted for free on jitsu?
06:48 < whiskers75> yeah
06:48 <@konobi> mkay, fair enough
06:49 < whiskers75> my bots are hosted on Nodester
06:49 < whiskers75> i used jitsu onlt because Nodester didn't work
06:49 < Nuck> Nodester is a bitâ€¦ iffy still
06:49 < Nuck> Nodejitsu is battle-tested
06:49 < Nuck> Nodester seems like it'll grow into something great though
06:50 < whiskers75> yes - my bot works, but npmbro doesn't
06:51 < Nuck> Somebody wrap the Skype dbus API for me, so I can access it in Node.js <3
06:51  * Nuck is dumb with dbus
06:52  * whiskers75 has no clue what dbus is
06:52 < Nuck> whiskers75: Some communication thing in Linux
06:52 < Nuck> Seems to be an IPC system
06:53 < AAA_awright> It's rather stupid I thinks
06:53 < Nuck> AAA_awright: Ditto
06:53 <@konobi> Nuck: https://npmjs.org/package/dbus
06:53 < Nuck> konobi: I know there's wrappings for dbus
06:53 < Nuck> But there's no good wrappings for the Skype API, and their api isâ€¦ uggggggh
06:53 <@konobi> well, should be easy enough from there surely
06:53 < Nuck> My brain dies to read the docs
06:54 < AAA_awright> It's like "Hey, instead of conneting to a server, connect to a server that'll connect to a server! Let's use a proxy in the same system for no good reason!"
06:54 < Nuck> I'm pretty sure the API just relays their backend protocol onto you over DBUS
06:55 <@konobi> hubot-skype ?
06:55 <@konobi> oh noes... coffeeshit
06:55 < whiskers75> afk a while
06:57 < Nuck> konobi: That's essentially what I want to do, is make a bot for Skype
06:57 < Nuck> Since my startup cofounders refuse to use XMPP, and we have too many for Campfire
06:58 < SomeoneWeird> too many?
07:01 < Nuck> Too many people
07:01 < Nuck> Campfire is free for teams of 4 or less â€”Â I want a bot, we have 4 founders, uh oh, too many people
07:02 < AAA_awright> Nuck: Lol really?
07:02 < Nuck> AAA_awright: Really what?
07:03 < AAA_awright> I just use IRC
07:03 < AAA_awright> Like, this is how I get 80% of my communication done
07:03 < AAA_awright> ANother 10% is email and 10% is skype voice
07:03 < Nuck> AAA_awright: We have a Windows user, etc.
07:03 < AAA_awright> Maybe like 1% in person becuse we're far away
07:03 < AAA_awright> How does Campfire work for communication?
07:03 < joshthecoder> Nuck: fire the window user. problem solved.
07:04 < Nuck> joshthecoder: He's my best programmer, sadly
07:04 < AAA_awright> Hahaha
07:04 < Nuck> We're 90% Skype, 10% deviantART Chat, and 0% in-person
07:04 < zomg> Best programmer, cannot use IRC
07:04 < zomg> Seriously?
07:04 < zomg> :D
07:04 < Nuck> zomg: He can
07:04 < AAA_awright> Get Quassel
07:04 < zomg> Okay maybe I misunderstood the issue then
07:04 < zomg> lol
07:04 < Nuck> He just doesn't, because all IRC clients on Windows suck ass
07:04 < AAA_awright> That's been a lifesaver
07:04 < zomg> Tell him to install Irssi then :p
07:04 < Nuck> zomg: I've used irssi on Windows.  It's terrible.
07:04 < zomg> And claiming that windows irc clients suck ass is such a silly statement to begin with...
07:05 < Nuck> They do
07:05 < Lorentz> best programmer and he doesn't have a vps host somewhere with linux or other *nix on it for irssi + screen + ssh + putty?
07:05 < joshthecoder> m
07:05 < AAA_awright> I have Quassel core running on my server, and I'm using the UI here on my Gentoo box, but also on my Windows box or Ubuntu notebook
07:05 < zomg> Nuck: if you can use it to chat what else does it need to do?
07:05 < zomg> All windows irc clients suck way less than say Windows Live Messenger
07:05 < zomg> :P
07:05 < AAA_awright> Lorentz: I think that's just going backwards. Quassel has a lot of weird bugs and it's still more usable than irssi
07:05 < Nuck> zomg: Tha'ts not saying much
07:05 < zomg> Or you could just use IRCCloud or something
07:05 < Lorentz> AAA_awright: dunno, I find irssi very usable
07:05 < Nuck> I should point him at Quassel and IRCcloud
07:05 < Lorentz> so much that I haven't bothered looking at new things
07:06 < AAA_awright> Nuck: Or my IRC service if I can get it running soon :p
07:06 < AAA_awright> IRC client over SSH, web browser, Quasselclient! ... maybe someday
07:06 < Nuck> I use irssi as a proxy and remote terminal "home away from home" IRC client
07:06 < Lorentz> hrm, qt4
07:06 < Nuck> And then I use Textual to access irssi-proxy
07:06 < Lorentz> not quite the way I roll, but ok
07:07 < zomg> I just use Irssi over ssh
07:07 < joshthecoder> there's probably an IRC client in Node as well...
07:07 < AAA_awright> Nuck: So you want a bot in Skype, which you're already using?
07:07 < zomg> Irssi: Uptime: 329d 11h 51m 21s
07:07 < zomg> =)
07:07 < Nuck> AAA_awright: I want to attach the shitty CoffeeScript bot to Skype mostly
07:07 < zomg> joshthecoder: sure, but they blow
07:07 < Nuck> Y'know, the thing GitHub made
07:07 < zomg> joshthecoder: seems many of them are unmaintained
07:08 < Nuck> Of course, I might be able to convince everybody to GTFIN IRC
07:08 < joshthecoder> zomg: yeah I imagine most are just hobby projects.
07:08 < AAA_awright> I like the idea of IRC
07:08 < Nuck> We *have* an IRC room (and are awaiting recognition by Freenode as an organization)
07:08 < AAA_awright> Good luck with that happening
07:08 < zomg> Nuck: if someone refuses to use irc because the client is bad they're just fucking morons... even ircII is tolerable to use for basic irc'ing :P
07:09 < AAA_awright> Yeah, Skype client is awful? Pretty much any IRC client should be usable?
07:09 < Nuck> zomg: He already uses Skype for chatting with normal people, so he's hesitant already, and the crappy state of Windows IRC clients just dog piles onto the dread to switch
07:09 < AAA_awright> Nuck: Why the group-regristration? You don't normally need to file a group regristration
07:09 <@maxogden> 400 retweets DAYUM https://twitter.com/maxogden/status/236717575084584960
07:10 < zomg> Nuck: I still don't get it how windows irc clients are bad. You press a button, it shows you a chat window. What else do you need? =)
07:10 < zomg> Sure they might not look that great but come on, if you just chat in one fucking channel, who gives a crap?
07:11 < Nuck> AAA_awright: This was about a year ago
07:11 < Nuck> AAA_awright: This was before GRF-F came out (and long before it closed)
07:11 < Nuck> Apparently my application didn't get processed, hrm
07:11 < AAA_awright> Yeah, those aren't going to get looked at, like, ever
07:11 < Nuck> And GRF's queue is dead
07:12 < Nuck> I should've refiled under grf-f but that was for "fast-track only"
07:14 < AAA_awright> Was there a need for it?
07:14 < AAA_awright> I don't think even Node.js has a GRF
07:16 < Nuck> AAA_awright: It doesn't, but it's always good to have your group registered (adds professionalism)
07:17 <@konobi> are there any good spots to check for node-related consulting/contracting ops?
07:18 < Nuck> ops?
07:18 < whiskers75> back
07:18 < Technodrome> anyone here ever use geddy, how does it stack u to express?
07:19 < whiskers75> Nuck: ????
07:20 < Nuck> whiskers75: Just grouping a nick for my startup's internal bot
07:20 < whiskers75> oh
07:20 < Nuck> I just realized I can architect a bot with multiple access points
07:20 < whiskers75> how come DTrejo has his own channel - #DTRejo with ONE #
07:20 < whiskers75> ?
07:20 < Nuck> I'm preparing a VM with Arch Linux to work on making a Skype-dbus lib
07:20 < whiskers75> cool
07:20 < Nuck> whiskers75: Because Dtrejo is a group, duh
07:21 < whiskers75> OH
07:21 < whiskers75> i don't have accounts for my bot - too complicated
07:22 < whiskers75> actually, maybe not...
07:22 < Nuck> Well, considering "Artuous" is the name of my startup, I ought to keep it close to me
07:22 < IRCbot_Master> wait 
07:22 < IRCbot_Master> this nick is banned :D
07:23 < IRCbot_Master> LOL
07:23 < IRCbot_Master> just grouping, tho
07:23 < Technodrome> whats more popular right now express or flatiron?
07:23 < timeturner> express
07:23 < Nuck> I'd say Express
07:23 < timeturner> is king
07:23 < IRCbot_Master> how do you group?
07:23 < Nuck> IRCbot_Master: /msg NickServ GROUP
07:24 < sk8ball> i'm an asp.net developer - and im wanting to get into nodejs development at the moment primarily to write a fairly simple web api.  i know this channel is obviously biased but how does nodejs measure up to asp.net mvc 4's web api?
07:24 < Nuck> sk8ball: Node.js is the best thing evar.
07:24 < Nuck> And yes, very biased.
07:24 < whiskers75> ta daaa
07:24 < sk8ball> heh
07:25 <@konobi> Nuck: opportunities
07:25 < Nuck> konobi: The Node.js job board?
07:25 < sk8ball> ok - win7 dev machine, netter to install the windows version of node or a linux VM?
07:25 < sk8ball> better*
07:25 <@konobi> Nuck: maybe, i suppose
07:25 < Nuck> whiskers75: Is there a hubot-quality bot which isn't written in CoffeeScript (yuck)
07:25 < Technodrome> so flatiron vs express â€¦..express wins? :P 
07:26 < Nuck> konobi: Does gun.io or StackOverflow Jobs have spots?
07:26 < Technodrome> i mean it seems like all the other popular frameworks got purged out 
07:26 < Nuck> Technodrome: by far
07:26 < Technodrome> express is sinatra style, is there any plugins or what not to build 'routes" in the traditional sense? 
07:26 < Technodrome> instead of defining at every function 
07:27 < joshthecoder> sk8ball: asp.net web api looks much more high level than Node.
07:27 < Technodrome> .net web api is cool but your tied to ms architecture for all the cool stuff
07:27 <@konobi> Nuck: meh... more interested in referral-esque sorta stuff... but good to check these things once in a while
07:28 <@konobi> and !employment =0/
07:28 <@konobi> sk8ball: go for a VM
07:29 <@konobi> Technodrome: 'routes', or there's also restify
07:29 < Technodrome> and that works on express konobi  ?
07:29 <@konobi> it works on node, for sure =0)
07:30 < Technodrome> sounds like a deal
07:30 < whiskers75> Nuck: no idea
07:38 < [AD]Turbo> hi there
07:41 < whiskers75> how do i UNgroup a nick? :D
07:46 < sk8ball> so is Express what all the cool guys are using? =[]
07:46 < timeturner> yep
07:47 < timeturner> you're cooler if you use vanilla http module
07:47 < timeturner> :P
07:47 <@konobi> pppfffttt... net module is all you need
07:47 < timeturner> haha
07:47 <@konobi> =0P
07:48 < whiskers75> shoot servs are down
08:05 < luckyruby> How do I read in data from a client via a tcp socket until received data includes '</foo>'?
08:11 <@maxogden> depends on how memory efficient you want to be
08:12 < Allyz> hi guys (and gals), looks for troubleshooting -> runnig bash script in terminal plays nice, running in node.js using ChildProcess.spawn or .exec gives problems. The specific bash command in question is XCODEBUILD anyone tried this before?
08:14 < luckyruby> maxogden: at this point, whatever works. Client is sending in a variable length xml message. I want to read in data until </foo> gets received, send the xml message in the request body of an HTTP POST, and write the HTTP response back to the client.
08:16 <@konobi> on('data' ...
08:17 < radiodario> Allyz: it could have something to do with environment variables?
08:17 < radiodario> Allyz: are you trying to build a node.js app that builds xcode projects?
08:17 < Allyz> hmmm i did 'env' on both terminal and from script
08:17 < Allyz> the output was very similar
08:17 < Allyz> i can pass in evnironment vars to Spawn right?
08:18 < radiodario> i don't know man i use linux
08:19 < Allyz> @radiodario hmm k.. what should i be looking for PATH ?
08:20 < radiodario> $PATH
08:20 < radiodario> you could do like spawn('echo $PATH'... and console.log the stdout?
08:21 < sk8ball> techno, still there?
08:22 < Allyz> @radiodario is there anything else I should look for .. I know my PATH is going to be difference but I take that into account in the script
08:22 < timeturner> what is the difference between spawn and fork?
08:24 < Allyz> @radiodario ever use Xcode?
08:24 < Allyz> (i guess not if your on linux box)
08:24 < sk8ball> technodrome, yeah i've been pretty much a .net developer through and through for SEVERAL years. Definitely aware of how MS ties you into its tech for the "cool stuff" - but considering this is a web api (hitting a database of course) ... i dont see where be tied to MS stuff is a problem.... but you mention nodejs is a lot lower level...why do you say that?
08:25 < bubbles10101> good evening chaps. what's everyone using as a proxy server/front end to node.js port bound processes?
08:25 < Technodrome> sk8ball: its not a bad thing 
08:25 < bubbles10101> nginx or something else?
08:25 <@Nexxy> bubbles10101, node
08:25 < Technodrome> sk8ball: you will like node.js i assume, its nice and JS is quite easy 
08:25 <@Nexxy> bubbles10101, https://github.com/nodejitsu/node-http-proxy
08:26 < Technodrome> although i must say c# is a beautiful language
08:26 <@Nexxy> bubbles10101, https://github.com/substack/bouncy
08:27 < bubbles10101> interesting... nexxy, thnks are those good for use in heavy production?
08:27 < bubbles10101> or more dev env orientated
08:28 <@Nexxy> bubbles10101, yes
08:29 < jesusabdullah> bubbles10101: nodejitsu uses this in production.
08:29 < jesusabdullah> node-http-proxy, anyway
08:30 < bubbles10101> hmm yeah i see they do, thnks jesusabdullah, although most wouldnt not consider nodejitsu.com a high traffic site
08:31 <@Nexxy> bubbles10101, what did you have in mind?
08:31 < bubbles10101> well i was wondering whether to use nginx instead
08:32 <@Nexxy> yes, do that
08:32 <@Nexxy> screw websockets
08:33 < bubbles10101> but obviously gonna reconsider now
08:33 < bubbles10101> :p
08:33 < bubbles10101> and have to learn more
08:33 <@Nexxy> oh, good.
08:33 < luckyruby> konobi: something like buf = new Buffer(4096); buf.write(data,'utf-8'); ?
08:34 < luckyruby> sorry if I sound like an idiot. I'm literally 45 min into node.js.
08:36 <@maxogden> 01:33 < bubbles10101> but obviously gonna reconsider now
08:36 <@konobi> luckyruby: var foo; on('data' ... foo = foo + data; <do some checks> ...
08:36 <@maxogden> oops my mouse is freaking out
08:37 <@Nexxy> maxogden, I don't blame it with all those cats about
08:37 <@maxogden> i am sitting next to a cat right now
08:39 <@Nexxy> maxogden, like... right... now?!
08:41 <@maxogden> yea
08:42 <@maxogden> http://distilleryimage0.instagram.com/539e361aea7711e1adc122000a1c91be_7.jpg
08:42 < whiskers75> cats! yay
08:43 <@maxogden> jsforcats.com im just gonna leave that here
08:43 < luckyruby> konobi: thanks, got it working
08:43 < whiskers75> how do i tell Nodejitsu 'ok' in my app?
08:44 <@konobi> eh?
08:45 < whiskers75> when deploying, i get a wall of text (my app's logs) and then Nodejitsu not ok!
08:46 <@maxogden> look for the error
08:47 < whiskers75> http://pastie.org/4555188
08:47 < whiskers75> IRC bots take ages to connect
08:48 < whiskers75> but npmbro works fine...
08:48 < whiskers75> any ideaz
08:48 < whiskers75> ?
08:50 < whiskers75> anyone?
08:50 <@Nexxy> whiskers75, your app has to listen for new http connections to deploy properly on nodejitsu
08:51 <@konobi> process.env.PORT usually, right?
08:51 < whiskers75> well npmbro does not
08:51 < whiskers75> does it? :?
08:51 <@Nexxy> it would have to if it's on nodejitsu
08:52 <@Nexxy> whiskers75, https://github.com/DTrejo/npmbro/blob/master/npmbro.js#L288
08:52 <@Nexxy> it certainly does
08:52 <@Nexxy> copy/paste 286-288 into your app
08:52 <@konobi> or port 8080
08:52 < whiskers75> well then - time to make a dummy http server
08:53 <@Nexxy> nodejitsu should grab any port you listen on
08:53 < jesusabdullah> npmbro does
08:53 < npmbro> jesusabdullah: Please see npm's documentation at https://duckduckgo.com/?q=site%3Ahttp%3A%2F%2Fnpmjs.org%2Fdoc%2F%20does
08:53 < jesusabdullah> naw that's cool bro
08:53 < jesusabdullah> also glad to see npmbro back in the game
08:53 < whiskers75> Hosted on Nodejitsu, by me :D
08:56 < whiskers75> yay! Nodejitsu ok
08:56 <@Nexxy> hooray!
08:57 < whiskers75> but my bot's code does not work
08:57 < whiskers75> it doesnt take PMs
08:57 < whiskers75> so cannot be init'd
08:57 < whiskers75> help me here: github.com/whiskers75/IRC-bot
08:58 < whiskers75> !shorten http://github.com/whiskers75/IRC-bot
08:58 < whiskers75> oops
08:58 < whiskers75> i meant to run that in my channel
08:58 < whiskers75> < IRCbot_Master> Shortened URL: http://bit.ly/S93YT2
08:58 < whiskers75> Nexxy: my bot has more tools now
08:58 <@Nexxy> oh, joy.
08:59 < SomeoneWeird> x.X
08:59 < whiskers75> have a look! :D
08:59 < whiskers75> ##node-irc-bots
09:00 < zomg> Oh, is there a tolerably good irc library for node now?
09:00 < SomeoneWeird> 'irc'
09:00 < whiskers75> zomg: yeah
09:00 < whiskers75> npmbro docs irc
09:00 < npmbro> whiskers75: Please see http://github.com/martynsmith/node-irc#readme
09:00 < whiskers75> there ^
09:01 < zomg> Last time I used node-irc it used to crash when the client was unable to connect..
09:01 < zomg> I wonder if they patched that yet
09:01 < whiskers75> zomg: dunno
09:01 < whiskers75> zomg: i'd want it to do that
09:01 <@Nexxy> zomg, maybe you should have added an error handler ;)
09:02 < zomg> Yes, the problem is that in order to catch the error they caused would be to add the all errors handler 
09:02 < zomg> whatever it was called
09:02 < whiskers75> Nexxy: my bot has weather, calculator and bit.ly
09:02 < whiskers75> bit.ly is helpful
09:02 < zomg> adding an error handler to the irc connection did not catch it
09:02 < whiskers75> try/catch?
09:02 <@Nexxy> it's an event emitter
09:03 < zomg> it caused an error event in the node main event loop
09:03 < whiskers75> try{ blah } catch(e){blah}
09:03 < zomg> no way to catch it besides adding the global error handler hook which is generally not recommended
09:03 < luckyruby> konobi: http://pastie.org/4555241 thanks the help. Am I doing this right?
09:04 < whiskers75> come on over to my bot channel
09:04 < luckyruby> it's working but just wanna make sure I'm not doing anything retarded.
09:04 < zomg> It was rather fun when the irc bot component in my application would crash the whole application
09:04 < zomg> probably should just split it into multiple processes next time although that's going to be one more annoyance to deal with..
09:04 < whiskers75> oh :D
09:04 < zomg> =)
09:05 < zomg> Not to mention that since it caused an error right away when connecting, the automatic script which brought the application back online in case of a crash would also fail
09:06 < zomg> In the end I patched it myself to include a way to get the socket it used for irc comms so I could just add the damn error handler to it
09:06 < zomg> :P
09:06 < zomg> But it was pretty hacky since I was just fed up with it and wanted it to just work and be done with it
09:06 < whiskers75> nowadays, there is a super-easy module for irc bots
09:07 < whiskers75> i forget its name
09:07 < zomg> I saw one which used node-irc under the hood...
09:07 < zomg> so it would probably have had the same problem
09:07 < zomg> lol
09:07 < whiskers75> they all do
09:07 < whiskers75> zomg: come to ##node-irc-bots
09:07 < zomg> Why?
09:08 < whiskers75> to see my bot
09:08 < SomeoneWeird> if poeple wanna join your channel they will
09:08 < whiskers75> and try to crash it as \n has been doing :(
09:08 < zomg> I'm not really interested in seeing your bot =)
09:08 < whiskers75> "!calc 9999999999999999999 add 99999999999999999"
09:08 < whiskers75> ok
09:08 < SomeoneWeird> ...?
09:08 < zomg> lol
09:08 < whiskers75> SomeoneWeird: it has a calculator
09:09 < SomeoneWeird> congrats
09:09 < SomeoneWeird> irc.say(channel, argv[0] + argv[1])
09:09 < SomeoneWeird> so hard
09:09 < whiskers75> nope you need a parser
09:09 < zomg> whiskers75: out of curiosity, are you new to node and/or js stuff in general? =)
09:09 < whiskers75> yes
09:10 < zomg> Heh, yeah was just wondering since you seemed to be very excited about relatively mundane things :D
09:10 < zomg> But yeah it's fun stuff
09:11 < zomg> Node makes all sorts of things so easy to do in comparison to many others
09:11 <@Nexxy> wow way to rain on his parade
09:11 <@Nexxy> whiskers75, don't listen to zomg 
09:11 <@Nexxy> he is just a jaded, cynical, bitter old man
09:11 < zomg> haha
09:11 < whiskers75> zo< IRCbot_Master> Shortened URL: http://bit.ly/S93YT2
09:11 < zomg> Sorry I didn't mean to make it sound like that
09:11 < zomg> lol
09:11 < whiskers75> random
09:14 <@Nexxy> "OH YOU THINK THIS STUFF IS FUN?! YOU MUST BE NEW HERE"
09:14 < SomeoneWeird> <whiskers75> nope you need a parser < irc.say(channel, parseInt(argv[0])+parseInt(argv[1]));
09:14 < SomeoneWeird> lmao Nexxy 
09:14 < whiskers75> yes
09:14 <@Nexxy> "CURB YOUR ENTHUSIASM, THE REST OF US JUST DO THIS FOR A LIVING"
09:19 <@Nexxy> zomg, btw the socket for irc.Client is available via cli.conn
09:27 <@maxogden> substack: eff yea! https://github.com/thisandagain/logo
09:30 < whiskers75> what the --- http://pastie.org/4555339
09:31 < whiskers75> helpz
09:31 < SomeoneWeird> you can't split something that's undefined.
09:32 < SomeoneWeird> var line = content.split('\r\n')
09:34 < whiskers75> ok, rebooting bot...
09:37 < whiskers75> http://pastie.org/4555356
09:37 < whiskers75> huh?? 
09:39 < SomeoneWeird> content.toString().split
09:40 < whiskers75> ok, rebootin'
09:42 < whiskers75> http://pastie.org/4555380
09:42 < SomeoneWeird> ugh, npm down again?
09:43 < SomeoneWeird> you forgot the ()'s
09:43 < whiskers75> oops
09:43 < whiskers75> npmbro
09:43 < npmbro> Powered by http://jit.su/         Available commands: npm search | npm docs | npm install | npm stats | npm help | npm node | npm credits
09:43 < whiskers75> it is up
09:47 < whiskers75> yay the bot is now functional
09:48 < milani> whiskers75, what does npm install do then? installs a module where?
09:48 < dr0id> current directory
09:49 < dr0id> ./node_modules/
09:49 < whiskers75> milani: in ./node_modules
09:49 < milani> dr0id, I mean the bot.
09:49 < milani> npmbro 
09:49 < dr0id> /home/npmbro/node_modules
09:49 < whiskers75> npmbro install
09:49 < whiskers75> npmbro install irc
09:49 < dr0id> npmbro install socket.io
09:49 < dr0id> tell me when done
09:50 < whiskers75> well, it's hosted on NodeJitsu
09:50 < whiskers75> npmbro
09:50 < npmbro> Powered by http://jit.su/         Available commands: npm search | npm docs | npm install | npm stats | npm help | npm node | npm credits
09:50 < dr0id> that was enlightening
09:50 < dr0id> so is this bot going to change the way we learn node.js ?
09:51 < whiskers75> it's not mine, its DTrejo's, but I'm hosting it on NJ
09:54 < zomg> Nexxy: yeah I forgot how I hacked it but yeah. And try reading again what I said 'cause I didn't say anything about it not being fun :P Infact I emphasized the fact that it's fun.
09:55 <@Nexxy> zomg, nope!
09:58 < zomg> Huh?
10:02 < whiskers75> i cant wait until Node Summercamp (opper bots!)
10:04 < zomg> Opper bots?
10:04 < zomg> That nonsense with bots opping everyone on this channel? :P
10:05 < whiskers75> yeah
10:05 < zomg> That's just... asking for trouble
10:05 < whiskers75> "opper bots are in the penalty bin until at least Node SummerCamp"
10:06 < zomg> They might as well just make an irc client for this channel which shows everyone as opped
10:06 < zomg> Same result, less morons doing stupid shit
10:06 < whiskers75> yeh
10:07 < whiskers75> grr "/nick @whiskers75" "@whiskers75 Erroneous Nickname"
10:11 < entitydigital> Does anyone know if node-mysql supports connections over SSL?
10:18 < bubbles10101> there seems to be some disagreement whether node_modules should be checked in to the git repository.. what's everyone opinion on this?
10:19 < bubbles10101> https://github.com/github/gitignore/commit/541e85287f1f6077581271e1de6ca1160dcf6968
10:19 < thatguydan> It depends on environment, but generally it's a bad idea
10:19 < whiskers75> bubbles10101: it shouldn't, really
10:19 < thatguydan> If you have all js dependencies it's fine, you're screwed if there is compiled code and prod is on a different environment to dev
10:21 < thatguydan> unless you have an nom rebuild in your deploy
10:21 < thatguydan> npm*
10:23 < thatguydan> FWIW I've done both in production, and I had problems with rebuilding some dependencies that had shitty wscripts. Honestly I wouldn't check them in unless you know they are all on gyp and npm rebuild works properly
10:25 < Nuck> Wooo, only took me like 4 hours, but I've got a Linux VM running Skype :D
10:25 < Nuck> Time for sleep, then dbus + Skype + Node.js in morning :D
10:26 < whiskers75> Nuck: cool
10:43 < bubbles10101> thamks thatguydan yeah i think its bad too
10:44 < deoxxa> so i want to read/write from/to a local git repository with node
10:44 < thatguydan> I think it's a good idea in theory, and we should aim for it, but practically it depends on your dependencies
10:44 < deoxxa> there's roughly 2^100 modules to do this
10:45 < deoxxa> which one should i use? any suggestions?
10:47 < metal55> Hello All
10:48 < metal55> Dose anyone know if there is a good SCSS (SASS) implementation for node.js?
10:48 < metal55> Ideally my server would watch a directory of SCSS files and compile them when there is a change.
11:06 < jhsto> is there a way to determine the IP of incoming request?
11:10 < jhsto> should have tried looking up from express api first - problem solved
11:10 < llappy> request.connection.remoteAddress
11:10 < llappy> but also, the X_FORWARDED_FOR header when there's a proxy
11:11 < jhsto> so X_FORWARDED_FOR penetrates proxy?
11:12 < deoxxa> penetrates?
11:12 < jhsto> well - sees trough it
11:12 < jhsto> or can 'notice' it
11:13 < jhsto> you are probably lolling so you wont respond deoxxa
11:13 < SomeoneWeird> lolllll
11:13 < SomeoneWeird> yes
11:13 < deoxxa> you're probably going to want to read about what that header is - if you trust it implicitly you're opening yourself up to a whole range of spoofing possibilities
11:14 < jhsto> well i would like to use server-side code over that
11:14 < deoxxa> the short version is that you have to trust the direct upstream host the connection is coming from if you want to use that header in any meaningful way
11:14 < jhsto> express seems to have req.ip
11:14 < jhsto> which should work
11:14 < jhsto> oh okay deoxxa
11:15 < deoxxa> otherwise someone can just make a request to your service and add on "X-Forwarded-For: 123.123.123.123"
11:16 < jhsto> I see.
11:16 < jhsto> I don't want that to happen so I guess I have to deny it.
11:16 < deoxxa> well you don't have to, if you know the proxy is good
11:16 < deoxxa> i.e. if it's your proxy
11:16 < deoxxa> say you have nginx sitting in front of express, for example
11:17 < deoxxa> then you know that the data coming from it is good, so you can trust it
11:17 < jhsto> ah
11:17 < jhsto> well thats not the case
11:17 < deoxxa> but if your application is just directly exposed to the big, bad internet, you probably don't want to
11:17 < jhsto> so i guess no for the header
11:17 < deoxxa> yeah
11:17 < jhsto> thanks
11:18 < jhsto> ugh
11:18 < jhsto> nodejitsu is failing on me
11:25 < whiskers75> back
11:25 < whiskers75> jhsto: how?
11:26 < whiskers75> jhsto: it's hosting my IRC bots just fine :)
11:26 < jhsto> stuff hangs up and internal errors
11:26 < jhsto> npm install failed
11:26 < whiskers75> full error log?
11:48 < whiskers75> how do I "wait until" in Node?
11:48 < whiskers75> if i have a callback
11:49 < mmalecki> you don't
11:49 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:49 < whiskers75> ?
11:49 < mmalecki> you can't wait until a callback happens
11:50 < substack> you could but that would be stupid
11:50 < substack> because you can just add code to the callback
11:50 < mmalecki> yeah, and wasting computing power
11:56 < whiskers75> ok
11:57 < whiskers75> how could I load a Redis auth from a file outside of a git repo (to protect the account)?
11:58 < substack> whiskers75: you could make a config.json and not check it into git
11:58 < substack> there's also .gitignore to keep you from accidentally adding it
12:01 < whiskers75> substack: i am coding in cloud9, and git pulling into my local machine...
12:06 < whiskers75> tell me more about config.json...
12:08 < Hoppertje> socket.io question: which is better...  using broadcast and emit for echo the client, or does it not matter if you simply loop through the desired sockets and emit them ?
12:09 -!- mode/#Node.js [+o bnoordhuis] by ChanServ
12:09 -!- mode/#Node.js [-o bnoordhuis] by bnoordhuis
12:29 < milani> where can I find the list of error codes that fs module may throw?
12:37 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:42 < mscdex> milani: they're just the standard unix errnos
12:42 < milani> :) ok.
12:43 < milani> mscdex, Thought there are constants for them in noed.
12:43 < milani> * node
12:49 < jQuy> How can I set expires headers on js and css files? I'm using Express and jade.
12:50 < mscdex> jQuy: response.setHeader ?
12:50 < jQuy> mscdex: what is that response object?
12:52 < mscdex> jQuy: http ServerResponse
12:53 < mscdex> milani: fwiw you can generate the values from perl here: http://www.perlmonks.org/?node_id=274896
12:56 < milani> mscdex, Having fs.NO_ERROR, fs.ERR_OUT_OF_SPACE etc. would be fine. 
12:56 < milani> anyway, are these errors the same at win32?
12:56 < milani> * on win32
12:57 < mscdex> milani: not sure
12:59 -!- mode/#Node.js [+o Nexxy] by ChanServ
13:14 < jQuy> Can someone help me with exprires headres?
13:14 < jQuy> *headers
13:15 < jQuy> Yslow performance score is 95 / 100 and I really would like to have js & css files cached somehow. Anyone?
13:16 < draginx> If I'm implementing an MVC architecture for express, do I need to require('sequelize') in every file..? Does this degrade performance drastically?
13:16 < SomeoneWeird> no its cached draginx 
13:16 < draginx> But I would have to keep calling the connection :/
13:17 < RLa> draginx, why not set up connection once
13:17 < SomeoneWeird> then create the object, then pass that object to each file
13:17 < draginx> Well thats what im really trying to figure out on how to do
13:18 < draginx> OK so in my app.js I can do..
13:18 < milani> jQuy, see http://developer.yahoo.com/performance/rules.html/
13:18 < draginx> modue.exports.db = the_db_var
13:18 < milani> you can see how to set expires header a long with other info.
13:18 < draginx> and then in my models/whatever.js I can do db.define(); ?
13:18 < milani> res.setHeader('Expires',' a date in the future');
13:19 < RLa> draginx, just create module that initializes connection and require it
13:19 < draginx> or I guess I can do app.set('db', db);
13:19 < RLa> jQuy, cached? with expires header?
13:21 < RLa> jQuy, using express?
13:21 < jQuy> RLa: yes
13:21 < RLa> try: var maxAge = 1000 * 60 * 60 * 24 * 365; app.use(express.static(config.public, { maxAge: maxAge }));
13:21 < RLa> but make sure you have cache buster implemented
13:22 < RLa> otherwise you won't be able to update your files on clients browsers when you change them
13:26 < twosevenzero> Can someone point me in the right direction. I am looking to "monitor" a remote json document for chages and then act on those changes. Is there an example or module that someone can point me towards?
13:26 < deoxxa> remote json document?
13:26 < deoxxa> define "remote"
13:26 < yawnt> i need a desktop sharing website
13:26 < yawnt> quick
13:26 < yawnt> :(
13:26 < yawnt> yo deoxxa 
13:27 < deoxxa> herro yawnt
13:27 < twosevenzero> deoxxa: ie: domain1.com/doc.json
13:27 < deoxxa> logmein.com
13:27 < hillerstorm> yawnt: chrome remote desktop? :)
13:27 < hillerstorm> https://chrome.google.com/webstore/detail/gbchcmhmhahfdphkhkmpfmihenigjmpp
13:27 < drudge_> teamviewer.com ?
13:27 < deoxxa> twosevenzero: can you trust the last modified headers from the site?
13:27 < twosevenzero> deoxxa: yes
13:27 < deoxxa> awesome
13:28 < yawnt> hillerstorm: thanks!
13:28 < twosevenzero> deoxxa: I assume I can. I want to build a quick little app that monitors the json in mlb.com's gameday files
13:29 < deoxxa> twosevenzero: you'll want to stitch together oibackoff (http://github.com/appsattic/oibackoff) and optionally request (github.com/mikeal/request)
13:29 < deoxxa> that'd be my approach anyway
13:29 < twosevenzero> deoxxa: awesome. thanks for the info. I will check it out
13:29 < deoxxa> \o/
13:30  * deoxxa hat tip to chilts for oibackoff
13:30 < yawnt> now you can do stuff like
13:30 < yawnt> { where: { id: /baw/ }
13:30 < yawnt> in hater
13:30 < yawnt> and it matches via like
13:31 < yawnt> i feel cool :3
13:31 < deoxxa> heh
13:31 < deoxxa> that's pretty cool
13:31 < yawnt> of course it is
13:31 < yawnt> i coded it :|
13:31 < SomeoneWeird> lollll
13:31 < deoxxa> yawnt: should detect when it's a more complex regex and use the actual regex stuff in the database engine
13:31 < yawnt> my biggest quality is modesty
13:31 < yawnt> in case you haven't noticed
13:31 < yawnt> :(
13:31 < yawnt> i know that's the plan
13:32 < yawnt> support stuff like \w+
13:32 < yawnt> etc
13:32 < yawnt> but it's gonna take a whole lib to to regex to SQL
13:32 < yawnt> someday, when urlship's done
13:32 < deoxxa> don't have to at the start
13:32 < deoxxa> mysql has actual regex afaik
13:32 < deoxxa> not sure about pg
13:34 < RLa> oracle has regex too, we used it for parsing xml :)
13:34 < yawnt> it'd be cool
13:34 < yawnt> to use regexes to parse regexes
13:34 < yawnt> :3
13:34 < deoxxa> RLa: rofl
13:34 < RLa> deoxxa, tho later we had to rewrite it
13:34 < deoxxa> yawnt: you can't - ironically enough, regexes aren't regular
13:35 < yawnt> deoxxa: i can
13:35 < RLa> with string operations because oracle regexes were too slow
13:35 < yawnt> i'd just use exec on regex.source
13:35 < yawnt> :3
13:35 < yawnt> with regex-chars escaped
13:35 < deoxxa> lol
13:35 < yawnt> who's crazies now HUH?
13:35 < RLa> i think you can tokenize regexes with regexes
13:35 < yawnt> *brofist*
13:38 < sebicas> Anyone knows an easy way to add Authentication to http://actionherojs.com/
13:38 < sebicas> ?
13:41 < whiskers75> nope
13:41 < whiskers75> not me, sry
14:00 < rayfranc_> Hi there ! Is there a good module/wrapper/midware to make POST queries a little more sexy with node/express ? What would you guys recommend ?
14:01 < rayfranc_> I'm pretty new to node, so maybe I missed it (maybe it is implemented in expres/connect or something...)
14:04 < rayfranc_> Maybe I should write my own wrapper..?
14:08 < TehShrike> maxogden: I laughed quite heartily at your new semicolon style
14:09 < TehShrike> rayfranc_: I'm not sure - you may want to check in #express
14:09 < jasonkuhrt> Are there community-accepted techniques to hide node_modules via .node_modules?
14:09 < mmalecki> jasonkuhrt: why'd you do that?
14:10 < rayfranc_> TehShrike: thanks, I'll try there.
14:10 < jasonkuhrt> mmalecki in order to focus my project directory down to the files I edit manually
14:10 < jasonkuhrt> node_modules being something managed via npm, I'd prefer not to see it unless I explicitly want to
14:10 < dr0id> 1 folder can't hurt that bad
14:10 < dr0id> then install globally maybe :P
14:11 < jasonkuhrt> dr0id: I'm just trying to find out if it's possible
14:11 < jasonkuhrt> dr0id: death by a 1000 paper cuts
14:11 < TehShrike> Yeah, if you really care about that, install your modules in the next directory up or something
14:12 < Domenic> jasonkuhrt: maybe not what you're looking for, but I just put node_modules in .gitignore. Anything in .gitignore is "not part of my project"
14:12 < jasonkuhrt> tehShrike: I suppose, in a sense basically adding a top-level folder to every project
14:12 < jasonkuhrt> Domenic: thanks, but I'm just interested in the visual noise at the moment
14:13 < jasonkuhrt> I wonder what use there would be to allow a custom node_modules name set via package.json
14:13 < nyuszika7h> hi, any idea why this fails?
14:13 < nyuszika7h> http://paste.debian.net/184742/
14:13 < nyuszika7h> when I do \ping, bot crashes with:
14:14 < nyuszika7h> http://paste.debian.net/184743/
14:14 < jasonkuhrt> ala how an entry file can be specified
14:15 < Domenic> think you're just going to have to get used to it. that's how node projects work ("community-accepted")
14:18 < nyuszika7h> got it
14:18 < nyuszika7h> I'm supposed to use it on text, not message
14:19 < rayfranc_> TehShrike: what I was looking for is Request : https://github.com/mikeal/request :) Thanks
14:21 < TehShrike> Sweet!
14:32 < jasonkuhrt> Domenic: I guess/expect so, anyway we'll see what people say https://github.com/isaacs/npm/issues/2734
14:35 < zonetti> does anyone have already used zombiejs inside mocha tests?
15:05 < draginx> Whats the best way to like.. go in order in terms of console.log('Creating routes...', function() { build_my_routes(function() { 'Finished creating routes!'; })}); ?
15:05 < draginx> async.js library?
15:12 < Xeon06_> Hey folks
15:12 < Xeon06_> Is there anywhere I can find Windows installers for older versions of node?
15:13 < ccowan> Xeon06_: http://nodejs.org/dist/
15:13 < ccowan> click on the version
15:13 < ccowan> installer should be in there
15:13 < Xeon06_> ccowan: shit that's exactly what I want. Thanks
15:14 < ccowan> (I just right clicked on the download link for the current one... Clicked copy link, then delete all the version stuff)
15:22 < ccowan> Sweet.. I just got a phishing email in the form of an iTunes email.
15:23 < ccowan> It was a reciept with a bill for $922 worth of iTunes charges
15:23 < pandemic> Haha, I just got the same thing. Weird.
15:24 < ccowan> The CSS/HTML was just slightly off. If they could improve the quality of their email I bet they could make a killing.
15:25 < pandemic> the thing that is also off is the link to the order status isn't correct
15:25 < pandemic> mouse over it and it reveals the real URL
15:25 < ccowan> yeah
15:25 < ccowan> Does that work on outlook. I'm on a mac so it's really easy to see fishy stuff like that.
15:26 < pandemic> I'm using thunderbird on a mac
15:27 < pandemic> I haven't touched outlook in forever. Thunderbird/gmail for me :)
15:28 < ccowan> I'm sure they will get enough marks with that email
15:29 < pandemic> yeah, haha
15:30 < ccowan> our support email address get's a ton of Phishing emails and Nigerian Scams. It's kind of fun to see all the different types of attacks out there.
15:30 < ccowan> Some of them are pretty good.
15:31 < pandemic> haha, yeah, i think that's why I get them
15:31 < pandemic> i'm on our support list too
15:38 < Chatterbox> Hi all,
15:38 < Chatterbox> I am trying node.js to run a chess engine, named stockfish
15:38 < Chatterbox> I write this prototype, and it worked fine:
15:38 < Chatterbox> http://www.pasteall.org/34595
15:39 < Chatterbox> It runs stockfish, and sends the stdout to the browser
15:39 < Chatterbox> But the problem started when I tryed to do it like this:
15:39 < Chatterbox> main.js:
15:39 < Chatterbox> http://www.pasteall.org/34596
15:39 < Chatterbox> ./uci/uci.js:
15:40 < Chatterbox> http://www.pasteall.org/34597
15:40 < Chatterbox> When my methods run, but no child_process spawns
15:40 < Chatterbox> I don't know why it doesn't start any process
15:43 < wlaurance> is 'stockfish' in its path?
15:43 < Chatterbox> wlaurance: Yes, it is
15:43 < Chatterbox> wlaurance: The first try workd fine
15:44 < Chatterbox> wlaurance: it even gived me a pid, but no process exists out there
15:48 < wlaurance> Chatterbox: I am trying to run it. What platform are you on?
15:48 < Chatterbox> wlaurance: I am on Linux, Archlinux, to be more precis
15:49 < wlaurance> Chatterbox: this is my first run of it http://www.pasteall.org/34598
15:51 < Chatterbox> wlaurance: What did you change?!
15:51 < wlaurance> Chatterbox: not a thing
15:52 < Chatterbox> wlaurance: Wow, it doesn't work for me
15:52 < wlaurance> I am on ubuntu 12.04 node 0.6.19
15:52 < Chatterbox> wlaurance: I logs my texts, but stockfish does not run
15:52 < Chatterbox> wlaurance: my node is version 0.8.3
15:52 < wlaurance> Now that was output from the terminal, not the browser
15:53 < Chatterbox> wlaurance: No problem if I could get the data from SF
15:54 < wlaurance> chatterbox: just tried with 0.8.1 and it still works for me
15:58 < Uii> Hi I am new here. Node.js is amazing, is there any possibility for joining the development team?
15:59 < mscdex> Uii: well, if nothing else the node core devs are open to pull requests :-)
16:02 < Uii> mscdex: hi, does that mean everyone can submit their patches? But it is commit not pull...
16:03 < mscdex> Uii: yes, if you fork the project on Github, you can create a branch on your fork that is for some change, and then submit a pull request on github from your branch
16:03 < context> uii: correct. you send a pull request, they look it over, and if they like, they merge it in
16:06 < Uii> Okay, got it. Thank you mscdex and context.
16:31 < luckyruby> http://pastie.org/4557225 This app handles about half the throughput of a comparable version in ruby + eventmachine. Can I get some help on making this faster? 
16:35 < mscdex> luckyruby: try setting 'agent' to false in your `options` variable. also, you should use Buffer.byteLength() for string variables for Content-Length values
16:36 < luckyruby> ok, benchmarking now
16:36 < mscdex> luckyruby: also, are the two strings you're checking for always at the end of the document you're receiving?
16:36 < luckyruby> mscdex: yes
16:37 < mscdex> ok, then you can probably optimize that a bit more by just checking for those strings in the 'end' event instead of each 'data' event
16:37 < AntelopeSalad> does eventmachine use multiple cores automatically because that node example isn't
16:37 < draginx> AntelopeSalad: how would u use multiple cores?
16:37 < PSvils> Hey all! I'm looking for a framework similar to Socket.IO, except not being tied to websockets, just a plain old tcp socket server.
16:38 < AntelopeSalad> draginx: http://nodejs.org/api/cluster.html
16:38 < mscdex> draginx: cluster module for the server
16:38 < draginx> ahh cluster, thanks :)
16:38 < PSvils> specifically I like the advantages of simple user data saving and handling reconnecting
16:38 < draginx> O_o why not use zeromq PS?
16:38 < luckyruby> mscdex: for sock.on or res.on or both?
16:38 < mscdex> PSvils: that's fairly trivial, just use some framing protocol or something
16:39 < PSvils> don't follow mscdex :)
16:39 < PSvils> and draginx, I'll check it out! :)
16:39 < mscdex> PSvils: if you want a really simple protocol, use one that is TLV-based: <message type value><message length><message>
16:40 < PSvils> I wanted to use binary, just begin with an integer that denotes the type of message etc.
16:40 < mscdex> PSvils: i even wrote a module that uses that kind of framing fwiw: https://github.com/mscdex/xfer
16:40 < PSvils> more compact.
16:40 < mscdex> luckyruby: res.on
16:40 < mscdex> luckyruby: oh wait, sorry, sock.on
16:40 < PSvils> but more specifically a library with fancy features was my main goal to find.
16:41 < mscdex> luckyruby: move lines 9-37 into the sock 'end' event handler
16:41 < luckyruby> mscdex: buffer isn't actually a Buffer so I can't use byteLength() right?
16:41 < PSvils> draginx: that doesn't seem to be what I need at all.
16:41 < mscdex> luckyruby: byteLength is a static function, so you use it like so: Buffer.byteLength(string)
16:42 < luckyruby> ooh
16:42 < PSvils> or at least I don't understand how
16:43 < luckyruby> oh wow
16:44 < luckyruby> just changing agent to false and using byteLength made it go from 35 req/s to 87
16:45 < ephesius> exit
16:49 < mscdex> luckyruby: also, you might try using a regex to do your trimming instead of lines 30-32
16:50 < luckyruby> mscdex: if I move 9-37 into 'end' event, how does that work if I'm calling sock.end() from within that event?
16:50 < luckyruby> i would think the socket never gets closed then
17:05 < bradleymeck> did specifying the outbound network interface ever get into core?
17:17 < PSvils> draginx: does zmq need to be on the clientside as well?
17:17 < PSvils> because my front-end will be Flash, with a Node.js back-end
17:27 <@isaacs> konobi: good idea: https://npmjs.org/~konobi
17:27 <@isaacs> konobi: made that the official user profile url.
17:29 < mscdex> bradleymeck: yes
17:29 < bradleymeck> mscdex: i saw localaddress
17:31 < aaronj1335> so does anyone else notice that npm doesn't install man pages for node 0.8.7? (i think 0.8.6 as well).  man page installation seems to be broke both for npm itself and any packages you install. 
17:34 <@konobi> isaacs: o.O
17:35 < Ramone> hey all... anyone have a suggestion for logging basic req/res info at the time of res.end() across my app?  (other than the obvious way)
17:38 < bradleymeck> Ramone res.connection.on('close') ?
17:38 <@isaacs> konobi: i heard that npm.im/~username was your idea
17:39 < Ramone> bradleymeck: how do I hook into that across all res objects, without putting that in every sliver of code where I have a res object though?
17:40 < bradleymeck> Ramone: do it per server httpServer.on('request', function (req, res) {}) , i mean how many servers are you running in a single app?
17:41 < Ramone> yeah I think that's doable actually
17:41 < Ramone> alright thanks :)
17:48 <@konobi> isaacs: indeed
17:52 < Ramone> bradleymeck: bah... looks like the 'close' event only fires when the client hangs up before res.end() is called
17:53 < Ramone> I was kind of hoping for an event that happens when res.end() is called
17:53 <@isaacs> konobi: yeah, i CD'd that shit.  it's live now
17:54 <@isaacs> my continuous deployment involves ssh'ing in and git-pulling
18:01 < Xeon06_> Would anyone have any recommendations for a no-sql no hassle database? What I'm doing is very simple and I just want to be able to store objects without needing an additional server and complicated configuration
18:05 < Ramone> Xeon06_: mongo is probably easiest
18:06 < Ramone> usually you use multiple mongo servers in production though
18:06 < Xeon06_> Ramone: what bums me is the need to have an additional server started, and the need to install and config it in prod, etc
18:06 < Ramone> well usually that's because production environments have scaling requirements
18:07 < Xeon06_> http://www.youtube.com/watch?v=b2F-DItXtZs
18:07 < Ramone> you can run mongo on the same machine, but you don't get the failover features
18:08 < zipp> Morning all :)
18:08 < Xeon06_> Yeah. I was thinking of something like SQLLite for PHP, where it simply uses a MySQL scheme and stores it into text files locally without a server
18:08 < whiskers75> Xeon06_: yeah
18:08 < whiskers75> Xeon06_: but Redis is EASY
18:08 < Ramone> well you said no-sql
18:08 < whiskers75> although it needs a server
18:08 < whiskers75> a seperate server
18:09 < Xeon06_> Ramone: yeah I meant the part where they don't need a server
18:09 < Xeon06_> Yeah I think i'll just have to use another server
18:09 < Xeon06_> Even though I'm not happy about it
18:09 < Ramone> "server" == "machine" in this case?
18:09 < Ramone> or a second process?
18:09 < Xeon06_> Ramone: no
18:09 < Xeon06_> Secodn process
18:10 < tgriesser> Xeon06_: how simple is the app
18:10 < Ramone> I have no idea what your production environment is... but usually they require running more than one app server
18:10 < Ramone> in which case direct file-io with multiple writers is going to die quickly
18:11 < Xeon06_> tgriesser: It's a golf tournament score tracker. It's pretty simple, and doesn't need to scale for 1000 simultaneous users
18:11 < Xeon06_> Ramone: Yeah I'm just being a little bitch
18:11 < tgriesser> why not just use sqlite as you mentioned?
18:11 < tgriesser> or the filesystem
18:11 < TehShrike|Work> Is this as awesome as I think it is? https://github.com/kriskowal/collections
18:12 < Xeon06_> tgriesser: Because I like the idea of just being able to store a JS object as is without structure
18:12 < Xeon06_> tgriesser: Yeah I could probably roll my own thing too
18:12 < Ramone> or just get a mongo server from mongohq.com and get back to real problems ;)
18:12 < tgriesser> Xeon06_: so your schema could be    id  |  json
18:12 < Xeon06_> tgriesser: Good point
18:12 < tgriesser> it just wouldn't have the cool features of being able to query on the json like mongo
18:13 < Xeon06_> Ramone: hahaha yeah
18:13 < tgriesser> but if it's as simple as you say you wouldn't need it
18:13 < tgriesser> read it into memory and use it there
18:13 < Ramone> TehShrike|Work: nice
18:14 < Xeon06_> Thanks for all the suggestion folks
18:14 < Ramone> TehShrike|Work: love the visualizations too
18:14 < plato> hi guys
18:15 < plato> i have need to make a chunk of code at the top of my file synchronous... i have to test if a DB exists, if not create it
18:15 < plato> further down, my code assumes the db exists
18:15 < plato> is there some function that will let me say 'Execute this entire async callback synchronously, then proceed to the subsequent lines of code'
18:16 < Xeon06_> plato: No.
18:16 < whiskers75> is there any free Node.js MUD host?
18:16 < Xeon06_> plato: Rewrite it asynchronously
18:16 < plato> Xeon that would mean putting my entire application in a callback
18:16 < Xeon06_> plato: Welcome to node.js haha
18:16 < timeturner> everything is in a callback anyways
18:16 < whiskers75> CALLBACK HELL
18:17 < zipp> I'm a big fan of callback hell
18:17 < timeturner> it's become second nature now...
18:17 < whiskers75> I HATE IT
18:17 < whiskers75> sometimes
18:17 < zipp> When I first started coding in Node, I'm all like, "Where the fuck are these passed arguments coming from? I didn't declare them anywhere"
18:17 < timeturner> the only part of node that isn't async is the require() implementation lol
18:18 < timeturner> in terms of module building
18:18 < mscdex> timeturner: and the optional fs sync methods
18:18 < timeturner> yeah
18:18 < tgriesser> are those going to be deprecated at any point?
18:18 < tgriesser> the fs sync methods
18:18 < timeturner> imagine if require() was async...
18:18 < mscdex> not as far as i've hard
18:18 < timeturner> I would go crazy
18:18 < mscdex> s/hard/heard
18:18 < tgriesser> okay cool
18:19 < whiskers75> is there any free Node.js MUD host? (a MUD is basically a telnet server, on port 5001 in my case)
18:19 < mscdex> timeturner: yeah, there are issues when doing async require
18:19 < Xeon06_> plato: To really answer your question, this is what people do. I would suggest looking at a few apps examples so you can wrap your head around it. It's one of the hardest things to do when starting out in Node, but you get used to it
18:19 < plato> Xeon06_: i am familiar with it
18:19 < plato> this is a special case
18:19 < Xeon06_> plato: How so?
18:20 < context> whiskers75: doubtful
18:20 < bahamas10> hey, i think i found something weird in node v0.8 around child_process.spawn
18:20 < bahamas10> https://gist.github.com/3406380
18:20 < timeturner> tbh that's why I don't really use AMD...it's easier to just load modules in a sync fashion and let the client wait for a few seconds. it's not life-threatning or anything
18:20 < plato> it only applies when the server starts up, and only needs to delay if the db doesn't exist. see lines 3-16 https://github.com/therealplato/metal-compass/blob/master/app.js
18:20 < zipp> I really don't think that's an uncommon case. db.on('connect', function() { // Check if shit exists });
18:20 < bahamas10> it seems to fire the child's exit event early... before stdout is produced
18:21 < plato> no zipp. this is to check if the database itself exists. its persistent, that only happens on first run
18:22 < zipp> plato: Right. But you can still check if the DB exists when you connect to the DB. And if you're testing to see if the DB connection can be created, throw it into a try/catch block?
18:22 < plato> you know what fuck it
18:22 < plato> i will just throw it in a new file init.js
18:22 < plato> and tell users to run that first
18:22 < plato> try/catch may be what i'm looking for I will investigate
18:22 < ccowan> substack: Do you have link to a site that's using browserify?
18:23 < context> bahamas10: nice.
18:23 < Xeon06_> Ah nStore seems to be like something I'm looking for. https://github.com/creationix/nstore Anyone ever used it?
18:25 < Xeon06_> Oh it's by Tim Caswell. It must be okay then
18:26 < mscdex> bahamas10: both scripts are the same ("../exec-test.js" and "~/exec-test.js")?
18:27 < context> mscdex: i just tested the script in 0.8 here, one of the exec's returns nothing
18:27 < context> as his pastie shows
18:28 < bahamas10> mscdex: yes, same script (different name :( )
18:29 < bahamas10> in a last ditch effort i scp'd the script to the machine running v0.6, and it just worked
18:33 -!- mode/#Node.js [+o bnoordhuis] by ChanServ
18:34 < mscdex> bahamas10: it's because `ls` is exiting before the streams are closed
18:34 < mscdex> bahamas10: there is a 'close' event for that now in 0.8
18:35 < bahamas10> mscdex: oh, that actually makes more sense (the way 0.8 does it).. let me test that
18:41 < bahamas10> mscdex: that's definitely what it was, listening for the 'close' event makes everything happier
18:42 < draginx> Is there anyway I can fetch the function that was called from app.get() ?
18:42 < bahamas10> well, happier to v0.8, not v0.6..
18:42 < draginx> like I have var routes = require('./routes').Routes; and app.get('/', routes.index);
18:42 < draginx> I'd like ot get info about the [Function]
18:43 < _bat> always fun digging into a new module before the README is written :) https://github.com/dominictarr/h/blob/master/index.js
18:43 < zipp> plato: any luck?
18:45 < mncharity_> Does anyone know of any examples of modules which are installed-module constructor/mutators?  By that I mean:
18:46 < mncharity_> start state: modules foo and foo-mutator have been installed.  then user makefile does stuff.  end state: there's a new installed module foo-mutant .
18:48 < mncharity_> any thoughts?
18:48 < mscdex> bahamas10: gotta keep up with node ;-)
18:48 < bahamas10> mscdex: lesson learned :).  now the fun part of trying to make this work for both v0.6 and v0.8
18:48 < luckyruby> looks like node.js is the one to beat in my benchmarks so far
18:49 < mscdex> bahamas10: you can easily just switch on process.version or whatever
18:49 < luckyruby> so far, i've tested scala+akka, ruby+em, and ruby+celluloid.  erlang is next on my list.
18:50 < bahamas10> mscdex: i was hoping for a cleaner way.  I prefer the try to do something, and fall back if it can't do it... but i don't know if that's possible here
18:50 < mscdex> luckyruby: it's not just speed, but it's the ability for node to do other things while i/o is being performed
18:50 < bahamas10> mscdex: if (child.willFire('close')) .... // not really
18:50 < luckyruby> mscdex: I think the other implementations can do the same
18:51 < AviMarcus> luckyruby, if you are rendering a page for a user which includes DB calls that take some time or other stuff.. it's not so easy to do that in other languages
18:51 < AviMarcus> erm to do other stuff while waiting.
18:51 < luckyruby> akka, celluloid and erlang use the actor model to handle that
18:52 < luckyruby> and eventmachine works kinda like node
18:52 < _bat> mncharity_: modules are loaded the first time require is called with them; after that they're stored in a cache and the cached value is returned
18:53 < luckyruby> AviMarcus: http://pastie.org/4557850
18:53 < _bat> mncharity_: it's really simple - you should be able to call require('mkdirp').foo = true; in one file and access it in another file
18:54 < _bat> mncharity_: usually it isn't a good idea but there are exceptions
18:54 < context> luckyruby: does that work
18:55 < luckyruby> yeah
18:55 < context> i didnt realize () were optional in js
18:55 < gnujach> hi, someone have  a example de sql INSERT in node-mysql?
18:55 < drudge_> isn't that coffee? :)
18:56 < gkatsev> context: they are? news to me.
18:56 < context> oh :x yeah it is haha
18:56 < context> im a dork
18:56 < gkatsev> drudge_: technically, in something like `var d = new Date;' you dont need the parens for the Date()
18:57 < gnujach> this code mark error: http://bin.cakephp.org/view/82875198
18:57 < _bat> mncharity_: if a node author wanted to prevent this they could use an ES5 feature to freeze the exports, but stuff can easily be tacked onto modules
18:58 < context> gnujach: it helps if you say what error you are getting
19:00 < gnujach> context: of course: TypeError: object is not a function http://bin.cakephp.org/view/764631523
19:01 < context> gnujach: id question why the function has a name, but other than that not sure what is wrong :/ maybe check node-mysql issue tracker
19:03 < plato> zipp: yeah i just moved the sync code into a separate file and said 'run this first' in readme
19:03 < gnujach> context: thank i go to issue tracker.
19:04 < bahamas10> mscdex: https://github.com/bahamas10/node-exec/commit/490cb45688f43fa22a9f042e73b0f2a616432b9c < node-exec now handles v0.6 and v0.8, thanks for your help!
19:05 < mncharity_> _bat: tnx for reply.  regrettably, my use case requires foo-mutant to have different code on disk than foo.   now I could publish foo-mutant instead of
19:06 < mncharity_> foo-mutator, but then the user can't choose which foo version they want anymore.
19:07 < gnujach> context: 'll have some example of query insert?
19:12 < _bat> mncharity_: you'd have to re-require it, but you can delete a module from the cache and next time it gets required it will force a reload
19:13 < _bat> mncharity_: if the code that you want to use a new module is loaded only once and calls require only once I don't see how you can change it to the new code, though
19:14 < _bat> mncharity_: I suppose you could go through and change all of the keys of the live reference
19:15 < _bat> mncharity_: if you type require into a node console and hit enter you can see the cache
19:15 < ccowan> what's the preferred way of registering an extension? require[ext] = handler or requrie.registerExtension?
19:17 < mmalecki> require.extensions[ext] = ...
19:18 < _bat> ccowan: require.registerExtension.toString() (it's gone)
19:19 < draginx> Is there anyway to get the name of the function that's called in a callback?
19:20 < ccowan> ooh... _bat thanks for that nice little trick 
19:20 < ccowan> :D
19:20 < _bat> draginx: arguments.callee.name ?
19:20 < draginx> let me try that _bar
19:20 < draginx> _bat*
19:21 < _bat> draginx: yep, that's it
19:22 < _bat> justicefries: going to the HTML5 group tonight? (this is benatkin)
19:25 < justicefries> hmm I could do that.
19:26 < _bat> justicefries: nice, hope to see ya there :)
19:31 < zipp> html5 group where? 
19:34 < anaguasoft> anything about node?
19:34 < zipp> (I happen to be near Oakland right now. Maybe I should drop in on Maxogden or Substack :P)
19:36 < substack> zipp: oh sweet
19:38 < xfaq> call back hell is really a hell of a thing
19:38 < substack> xfaq: not a real place
19:38 < superjoe> xfaq, try an async library or iced-coffee-script
19:39 < xfaq> im looking into it right now.
19:39 < substack> neither
19:39 < xfaq> substacj asl.
19:39 < substack> do these things http://callbackhell.com/
19:41 < xfaq> sub im right there
19:43 < myndzi> what would i put in package.json to make require look in the lib subdir for stuff to include?
19:43 < substack> myndzi: you possibly want the "main" field
19:44 < myndzi> "main": "lib" ?
19:44 < substack> myndzi: what are you trying to do?
19:44 < myndzi> guess not
19:44 < myndzi> just trying to use require('module') without a path
19:44 < myndzi> on other files in the same package
19:45 < myndzi> actually, i think i understand, nm
19:45 < zipp> SubStack: You wanna grab coffee or pizza or something sometime this week? :D
19:45 < substack> myndzi: don't do that
19:45 < substack> myndzi: just use relative paths
19:45 < substack> zipp: sure!
19:45 < gkatsev> coffee pizza?
19:45 < substack> zipp: /join #nerdtracker to coordinate
19:46 < myndzi> i had a server.js in the root folder
19:46 < myndzi> i'll just set up npm start and put everything in the same folder :)
19:46 < substack> myndzi: you can just require('./lib/blah')
19:47 < substack> require('modulename') is for stuff in node_modules/
19:47 < substack> and core libs
19:48 < myndzi> mmk
19:48 < myndzi> it just seemed cleaner to avoid it
19:48 < substack> to avoid which?
19:48 < myndzi> relative paths
19:49 < myndzi> i liked being able to use just the module name :)
19:50 < gkatsev> var module_name = relative_path + "/module_name"; var module_name = require(module_name);
19:50 < gkatsev> :P
19:51 < substack> gkatsev: gross
19:51 < gkatsev> yeah, definitely not saying you should do that, but it is a possibility
19:51 < myndzi> naw, was just curious
19:52 < freewil> since i use coffeescript i actually do that to run code coverage on the compiled js if im in the test env
20:00 < mncharity_> _bat: ah, allow me to clarify.  the user wants foo version X, with changes.  the changed foo doesn't need to, and really shouldnt, pretend to be foo.  next,
20:01 < toddf_> Need a create a rate-limiting proxy for API spike arrest/throttling.  Looked at node-http-proxy, but interested in other options.  Suggestions?
20:01 < mncharity_> because of the way foo is written, the changes can only be made by modifying foo's source to permit them, and regretably that's not fixable.  which seems to leave two options,
20:03 < mncharity_> I can write a foo-changer, which given a version of foo, and a new name fooX, creates fooX with the modified foo code.  or, not really an option, create a sea of foo-vN-changed modules.  I was
20:03 < mncharity_> hoping there was an existing example of the first strategy.
20:05 < mncharity_> I would welcome another alternative.  Choose one version, and force users to use that, is regrettably insufficient.
20:11 < mncharity_> Basically I'm abstraction wall busting.  foo has a use case, a few users have a different one.  trying to support both would make foo's code cruftier, so isn't the right thing.  foo is complex, and development continues,
20:13 < mncharity_> so I don't want to maintain a tracking fork.  happily, foo's code can be mechanically massaged to expose the needed hidden bits.  so the question  becomes, how to package this,
20:13 < mncharity_> given that different users are using different versions of foo.
20:16 < mncharity_> Ideally I'd like users to just  {dependencies: "foo":whatever, "foo-modifier":whatever} and in their own makefile say: npm run-script gimme-my-own-modified-foo-from-this-copy-of-foo-and-this-new-name.
20:18 <@konobi> toddf_: restify
20:18 < mncharity_> or rather "make me a new module, with this name I give you, based on this copy of foo over here"
20:20 < mncharity_> without breaking shrinkwrap, etc.
20:21 < timeturner> is there a nodemon alternative
20:21 < timeturner> for some reason it doesn't detect rsync changes
20:22 < timeturner> anyone?
20:22 < chrisjaure> timeturner: i like https://github.com/fgnass/node-dev
20:23 < timeturner> whoa it has growl notifications
20:23 < timeturner> thanks, chrisjaure!
20:24 < chrisjaure> np
20:41 < substack> isaacs: npm is using the metadata from npm with this git repo instead of using the package.json from the git repo :(
20:47 < substack> isaacs: or it could be optionalDependencies
20:48 < substack> isaacs: yep, optionalDependencies is fucking everything up
20:56 < AshleyWaffle12> Hi, I'm new to node. I want to write an IRC bot for it. Anyway, my first question is: How do I create a connection and get a socket from it?
20:56 < AshleyWaffle12> Thanks for your help :)
20:59 < edr> AshleyWaffle12, there is a github project that could be a good starting point (https://github.com/ktiedt/NodeJS-IRC-Bot) although there isn't a lot of activity
20:59 < AshleyWaffle12> edr: Thanks, but I'm looking to write it from scratch so that I can learn more. :)
20:59 < timeturner> anyone ever played with remote growl notifications?
21:00 < timeturner> from server to dev machine
21:00 < chilts> AshleyWaffle12: you could try this project as your base : https://github.com/martynsmith/node-irc
21:01 < chilts> a lot of people do :)
21:03 < AshleyWaffle12> chilts: I installed it :)
21:03 < chilts> sweet
21:12 < theBrettman> anyone do node in webmatrix? it says something is wrong with the web.config but idk what...
21:13 < theBrettman> not sure if it has something to do with using iis express instead of iis and that the names need changed in the config or what...
21:20 < mscdex> The webmatrix has you!
21:22 < ccowan> Sharing javascript with the frontend is a total pain the ass
21:24 <@isaacs> substack: what are you talking about?
21:24 <@isaacs> substack: what thing has optional dependencies, now?
21:25 < TehShrike|Work> Do any of you guys know of a JS Markdown renderer with syntax highlighting baked in, ala github flavored markdown?
21:25 <@isaacs> TehShrike|Work: marked handles that
21:25 < TehShrike|Work> A quick bit of searching didn't turn up any JavaScript implementations of gfm itself
21:25 <@isaacs> TehShrike|Work: but you have to syntax-highlight it yourself
21:25 <@isaacs> it just adds <code class="lang-whateveryouwrotethere">
21:26 <@isaacs> TehShrike|Work: marked is pretty much the best markdown util ever
21:26 < TehShrike|Work> Good to know!
21:26 <@isaacs> it's hecka fast
21:27 < merpnderp> chjj's marked library?
21:27 <@isaacs> merpnderp: the same!
21:28 < substack> isaacs: sockjs
21:28 <@isaacs> substack: k
21:28 <@isaacs> substack: what happens that shouldn't, with sockjs?
21:28 < substack> isaacs: rbytes doesn't work on windows
21:28 <@isaacs> k
21:28 < substack> and npm tries to pull it down anyways
21:28 < substack> but then it fails
21:28 < substack> and the whole package won't install
21:28 < merpnderp> isaacs: sweet, that lib looks awesome
21:28 <@isaacs> what version of npm?
21:28 < substack> even though rbytes is an optional dependency
21:28 < TehShrike|Work> <-- sockjs not working on Windows made me sad last week
21:29 <@isaacs> substack: what version of npm?
21:29 < substack> I was experimenting locally with it on npm 1.1.41
21:30 < substack> windows servers are running 1.1.12
21:30 < substack> same behavior
21:30 < substack> also optionalDependencies seem to be merged into the dependencies field in `npm view`
21:31 <@isaacs> substack: works for me: https://gist.github.com/3408083
21:31 < substack> isaacs: https://github.com/sockjs/sockjs-node/issues/80
21:31 <@isaacs> i only support the last 30 releases of npm, 1.1.12 is deprecated ;P
21:32 < substack> ok
21:32 < substack> good to know!
21:35 <@isaacs> it's merged in with dependencies in view &c because it's an implementation detail
21:35 <@isaacs> whenever a dependency fails, npm checks if that key exists in optionalDependencies, and if so, it continues
21:37 < wookiehangover> whenever an optionalDependency fails, an angel gets its wings
21:39 <@isaacs> same behavior in 1.1.41: https://gist.github.com/3408135
21:39 <@isaacs> substack, TehShrike|Work:seems to work^
21:39 <@isaacs> wookiehangover: gets his wings BACK
21:40 <@isaacs> wookiehangover: npm uses the wings of angels to install optionalDependencies
21:40 <@isaacs> if it fails, then it returns them.
21:40 < wookiehangover> lol
21:40 <@maxogden> npm install old-testament
21:40 <@isaacs> there's actually a lot of angelic bodyparts all over npm
21:40 < kuja> I'm implementing a parse() function specific to my project that accepts some XML input and a callback for the resulting object. I'm using sax-js and I would like my function to be both asynchronous and synchronous. Is there a way to synchronously parse the document so I can return it from my parse() function?
21:40 <@isaacs> couchdb?  ha! you think i'd really use THAT?
21:41 < TehShrike|Work> :-P
21:41 <@isaacs> no, npm writes down your package contents on angel skin, staples it to an angel, who flies it up to the giant registry in the sky.
21:41 <@maxogden> i think angels did a contract with boeing recently
21:41 <@maxogden> so they only have to fly until cloud cover for PR
21:41 < TehShrike|Work> Yeah, node-waf is actually the wall I ran into when trying to get sockjs on Windows
21:41 <@isaacs> maxogden: i think you're thinking of the raiders
21:42 <@maxogden> haha
21:42 < ccowan> isaacs: I'm an atheist... how's that work again?
21:42 <@isaacs> ccowan: atheism?  pretty well.
21:42 < substack> you can believe in angels without believing in any gods I guess
21:42 < ccowan> hum... I think they go hand in hand
21:42 < substack> you can believe whatever your internal neural network lets you believe it's pretty crazy
21:43 < ccowan> ha ha
21:43 <@isaacs> i mean, shit, i actually believe all you word-names are real PEOPLE
21:43 < TehShrike|Work> lol
21:43 <@isaacs> and not just some elaborate computer game
21:43 < ccowan> isaacs: maybe you need to give each of us the turring test one by one
21:43 < TehShrike|Work> You now, now that you've mentioned it, I don't remember ever passing a Turing test
21:43 < substack> angel brackets
21:44 <@isaacs> substack: OMG IM GOING TO CALL {} ANGEL BRACKETS FROM NOW ON YES
21:44 < ccowan> TehShrike|Work: jinx... you owe me a coke
21:44 < TehShrike|Work> :-x
21:45 <@isaacs> }else{  // <-- angel
21:45 < ccowan> at your next public speaking event you when describing code you should say... left angel wing foo colon single quote bar single quote right angle wing;
21:46 -!- isaacs changed the topic of #Node.js to: how many semicolons can dance on the head of an angel?
21:47 <@isaacs> kuja: hey
21:47 <@isaacs> kuja: sorry, a bit loopy
21:47 <@isaacs> kuja: "both sync and async" <-- this confuses me.  why do you want that?
21:47 < ccowan> Didin't someone do a whole language with {}{}{}?
21:47 < kuja> isaacs: I really don't care just providing an async version, figure I'd provide it as a convenience function in the case a callback is omitted.
21:48 < kuja> Just wondering if it was easily possible or not worth doing
21:49 < mscdex> imho automagically changing the behavior depending on whether a callback was supplied is bad
21:49 < mscdex> if you're going to have a sync function, append 'Sync' to the end of the function name
21:49 <@isaacs> kuja: so, what happens if they don't have the whole document yet?
21:49 <@isaacs> mscdex: well, we do that all the time in node's internals.  but yes, for public functions, they should be either async always, or sync always.
21:50 < mscdex> yes, i mean public-facing functions :-)
21:50 <@isaacs> kuja: so, sax-js is actually synchronous, just interruptible
21:50 <@isaacs> kuja: ie, it doesn't do any io
21:50 < kuja> isaacs: the parse function only accepts the whole document anyway
21:50 <@isaacs> kuja: oh, ok, then
21:50 <@isaacs> kuja: just make it return the result,then
21:50 <@isaacs> that's easiest
21:50 <@maxogden> stream || die()!
21:51 < mscdex> skate || die();
21:51 <@maxogden> precisely
21:51 < jesusabdullah> maxogden: ReferenceError: die is not defined
21:51 < mscdex> death not found
21:51 <@maxogden> npm install death
21:51 < mscdex> ha
21:52 < jesusabdullah> var die = require('seppuku');
21:52 < mscdex> i bet death pulls in lots of dependencies
21:52 < kuja> isaacs: I only get the result after parser.onend though, so can I do that?
21:52 < kuja> I mean, the full result
21:52 <@maxogden> jesusabdullah: that exports a single IIFE right?
21:55 <@isaacs> kuja: function parse(data) { parser.ontagopen=doStuff;parser.onblah=doOtherStuff;parser.onend=domorestuff; parser.end(data); return stuff }
21:55 <@isaacs> kuja: but probably doStuff and doOtherStuff, etc, should do something to some data object that you end up returning
21:56 < kuja> oh, I see. I was using parser.write(data).close()
21:56 <@isaacs> kuja: then the parser will go through byte by byte, and do its thing, and eventually call onend or onerror
21:56 <@maxogden> substack: you will be happy to hear that 25,000 people downloaded some of your cat art this weekend
21:56 < kuja> isaacs: Thanks for that. Also, I love sax-js :)
21:56 <@maxogden> isaacs: also i want to commission substack to draw aristotle
21:56 <@isaacs> maxogden: i tried to teach aristotle some javascript with that website over the weekend.
21:56 <@maxogden> isaacs: for jsforcats
21:56 <@maxogden> isaacs: is he on github now?
21:57 <@isaacs> maxogden: a) he was disappointed that he was not featured.  hurt, really.
21:57 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:57 <@maxogden> DAMNIT IM SORRY!
21:57 <@maxogden> i dont know what i was thinking
21:57 <@isaacs> maxogden: b) he was not hurt, because he is a cat, and only cares about food going in his tummy, and then his tummy being rubbed.
21:57 <@isaacs> maxogden: he didn't learn very much javascript, though.
21:57 <@maxogden> ah
21:57 <@isaacs> so the site still needs some work.
21:57 <@isaacs> it's promising, though
21:57 <@isaacs> :)
21:58 <@maxogden> isaacs: check out this new section http://jsforcats.com/#loops
21:59 < kuja> isaacs: Just one more thing, going back to earlier, is it considered better practice to have separate functions for async and sync behavior?
21:59 <@maxogden> kuja: node for instance has fs.readFile and fs.readFileSync
21:59 <@isaacs> kuja: yes.
21:59 < kuja> Ah okay
22:00 <@isaacs> kuja: even if they call the same function internally
22:00 <@isaacs> from an api design standpoint, it's better to always be sync or always be async.
22:00 <@isaacs> even if you can short-circuit an async operation, you should use process.nextTick to present an async-like interface
22:00 <@isaacs> (or a truly async interface in 0.8)
22:01 < kuja> Makes sense. I'll have to read up on the process.nextTick, though :)
22:01 < kuja> Thanks for the advice
22:01 < draginx> Anyone know how to make flash sessions for expressjs 3.0+ ?
22:03 <@isaacs> kuja: process.nextTick(function(){}) is like setTimeout(function(){},0)
22:03 <@isaacs> kuja: ie, it runs it right away-ish, but after everything else is finished
22:04 < kuja> ah nifty :)
22:05 < varmose> draginx: you can use connect-flash. see https://github.com/jaredhanson/connect-flash
22:05 < draginx> varmose: not really though
22:05 < draginx> since I need to include it every time :/
22:06 < draginx> which is annoying
22:06 < draginx> I guess I don't have much choice though
22:15 < theBrettman> i think the error isn't in the webconfig but server.js. I'm using the express site template in webmatrix. webmatrix says 'static' is a new reserved word and should not be used as an identifier. it's in the app.configure function: app.use(express.static(__dirname + '/public'));
22:15 < luckyruby> what do you guys recommend for logging?
22:15 < CoverSlide> you can use express['static']
22:16 < theBrettman> oh yeah, lol
22:17 < varmose> draginx: if you really want to avoid that you could write a simple module that automatically configure's express with connect-flash and what else you might need
22:17 < theBrettman> it doesn't like that either. does all the attributes go in the brackets or?
22:18 < tjholowaychuk> draginx that's the nature of dependencies, you add them as dependencies
22:18 < theBrettman> if it was .static(args) would it be ['static'](args) or ['static(args)']?
22:18 < tjholowaychuk> that concept was too high-level and opinionated
22:18 < draginx> varmose: and tjholowaychuk thanks :) I think I'm going to add a middleware though
22:18 < tjholowaychuk> and flash is a terrible ruby name
22:18 < CoverSlide> express['static'](__dirname + '/public')
22:18 < draginx> and just use app.set('flash')
22:18 < draginx> so in the views i can just use settings.flash :D
22:19 < theBrettman> I get 4 errors when I do it that way. 3 expected identifier and one expected expression
22:19 < theBrettman> oops, the expected expression was cuz I forgot to delete th .
22:19 < varmose> np
22:20 < theBrettman> I'm gonna ignore the other errors and see if it works
22:20 < timeturner> isn't flash just saving to redis and getting the value, then giving it to the next route's res.render as a local?
22:20 < theBrettman> nope
22:21 < draginx> If I have a db.js file in the app's main directory and inside that file I do the actual connection
22:21 < draginx> but then require('db') in seeveral different areas
22:21 < draginx> do i connect each time I require
22:21 < draginx> or only once?
22:21 < theBrettman> wonderful, no error logs to go off of either
22:21 < timeturner> only once
22:21 < timeturner> require() caches on the next turn
22:22 < draginx> ah ok cool :)
22:22 < timeturner> you can look at the log of your db daemon and double check that
22:22 < theBrettman> I hate that nothing ever works for me :/
22:28 < bentkus> I want to stream json via the http server, but if I write to the socket, it won't flush it immediately
22:28 < bentkus> what are the solutions?
22:34 <@maxogden> bentkus: jsonReadStream.pipe(httpResponseObject)
22:35 < bentkus> and what is jsonReadStream?
22:35 < bentkus> i am generating the data myself
22:35 <@Nexxy> a stream of json!
22:35 <@maxogden> it would be somethign that implements the Stream API to emit json data
22:36 <@maxogden> for example fs.createReadStream('data.json')
22:36 <@maxogden> or require('request')('http://someAPIThatReturnsJSON')
22:36 <@Nexxy> maxogden, FTFY https://gist.github.com/3408693
22:37 <@maxogden> haha
22:37 <@maxogden> but that would appease the normal semicolon using crowd
22:37 <@maxogden> whereas i want to make their heads explode
22:38 < bentkus> so i am creating json (basically an object in node.js) and you want me to write it down to a file and then open it with that stream just so i can pipe it to the response i receive from the webserver?
22:39 <@Nexxy> maxogden, you;could;always;start;using;the;semicolon;as;your;everyday;delimiter;
22:39 <@maxogden> bentkus: you didnt define your problem very well, i didnt know you were creating json in memory
22:39 < bentkus> im sorry
22:39 <@maxogden> bentkus: you can just .write data to an httpresponseobject
22:40 < bentkus> o yeah, i see, it works now
22:40 < bentkus> with /r/n
22:59 -!- isaacs changed the topic of #Node.js to: CIA is awol. First to write a replacement gets a sticker, and everlasting fame.
23:01 <@Nexxy> isaacs, better get whiskers75 on it
23:02 <@isaacs> if whiskers75 wants a sticker and fame, then that's cool with me
23:04 <@Nexxy> I kinda want that
23:04 <@Nexxy> although you already promised me a new npm sticker
23:05 < zipp> Nexxy: require('stickers');
23:08 <@Nexxy> nexxy@starbrite:~$ node
23:08 <@Nexxy> > var stickers = require('stickers');
23:08 <@Nexxy> Error: Cannot find module 'stickers'
23:08 <@Nexxy> ._.
23:09 < zipp> lol sadface
23:09 < zipp> I'll make a module called stickers that wraps around imagemagick or something :P
23:11 < yoklov> just out of curiosity, how many of you guys use javascript's object system beyond simply emulating classes
23:11 <@maxogden> do you mean prototype system?
23:12 < yoklov> right
23:12 <@maxogden> i dont emulate classes, i just use prototypes
23:13 <@Nexxy> ^^^^^^^
23:13 < zipp> ^
23:13 < zipp> I think that's common in the community at large.
23:15 < yoklov_> blarg, lost internet for a second there.
23:15 < shurex> Hi there , if anyone knows where I can find bit more detailed manual for ActionHero framework then on github wikipage ?
23:15 < yoklov_> maxogden: when you write in other langs do you miss prototypes?
23:16 < gkatsev> not if the other langs are lua or self :P
23:16 < yoklov_> haha, right
23:16 < gkatsev> personally, I tend to use javascript functionaly
23:17 < yoklov_> i do that sometimes, but there get to be a lot of return statements after a while
23:17 < yoklov_> :p
23:18 < gkatsev> yeah, of course you should use the right tool. Sometimes inheritence makes more sense :)
23:18 < yoklov_> Also `this` makes functional programming more awkward. 
23:18 < gkatsev> there's .bind and .call and .apply
23:18 < gkatsev> yoklov_: in fact it makes it even better since you can delegate to functions via .call and .apply
23:18 < yoklov_> yup, but those are ugly and awkward imo
23:19 < gkatsev> nah
23:19 < yoklov_> hm
23:19 < gkatsev> it's not like you use them everywhere just where they're needed
23:20 < zipp> The more I use express, the more I hate it.
23:21 < zipp> :x
23:21 < yoklov_> hm, yeah, i guess they do give you more power than you'd have without.
23:21 < zipp> I know its goal is to be minimal, but I find it too minimal in some respects. Does anyone hate the way it handles routing / middleware, or am I crazy?
23:27 < varmose> what do you hate about the routing?
23:28 < varmose> i think it does it quite well
23:30 < zipp> Eh, I guess I don't like that it really has no sense of data validation, and that my attempting to do data validation for dynamic routes looks kinda hacky
23:34 < zipp> https://github.com/ctavan/express-validator this might halp actually.
23:34 < varmose> yeah okay. i can see how that could be useful
23:36 < zipp> I mean my problem is when I have to validate a bunch of stuff, like app.get('/stuff/:rawr/:potato/:derp/edit', callback) .. My router ends up looking like shit, and I feel like some MVC would do nicely, wherein I have my controller do validation and handle rerouting if needed.
23:36 < zipp> It's more a matter of style than function :p
23:37 < ansdev1> hi, i've installed nodejs via the only windows installer i could find that worked.. it installed npm so that i can run it from inside /prog files/nodejs/ and this directory is also in my paths env variables so that "node" works... but npm still doesn't work from outside this directory
23:37 < ansdev1> what am i doing wrong?
23:42 < AAA_awright> I really wish people would tag their Git repositories correctly
23:43 < AAA_awright> And name their git repositories when they push packages to npmjs.org
23:45 < chilts> AAA_awright: I usually end up doing a pull request if what I see in 'git show <pkg>' isn't correct :)
23:47 < AAA_awright> chilts: Well I mean, TJ Holowaychuk isn't naming any of his Git repositories in npmjs.org and it's rather annoying because I have to go and search for their location, by hand
23:47 < AAA_awright> And it's worse because each of his packages depends on a dozen others so I'm manually searching for two dozen repositories
23:48 <@maxogden> by 'name git repositories' you mean 'add the repository to package.json' right?
23:48 < AAA_awright> Yeah
23:48 < AAA_awright> Well, not two doesn, just fifteen
23:48 < AAA_awright> >:(
23:49 < AAA_awright> maxogden: Well, not necessariailly package.json, but that's usually what you use to update information on npmjs.org
23:50 < AAA_awright> Like, where am I supposed to find 'methods'?!
23:52 < AAA_awright> Seriously, anyone know where I'm supposed to download that?
23:54 < chilts> AAA_awright: are you not using npm for installing modules?
23:54 < AAA_awright> chilts: I'm using Git
--- Log closed Tue Aug 21 00:00:57 2012
