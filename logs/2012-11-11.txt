--- Log opened Sun Nov 11 00:00:06 2012
--- Day changed Sun Nov 11 2012
00:00 < rvagg> zell: what cmds are you trying
00:00 < zell> rvagg: ender add backbone-browserify
00:01 < zell> node v0.8.14
00:01 < rvagg> zell: try the 1.0-pre release version of Ender, it's a bit more solid
00:01 < rvagg> zell: npm install ender@dev -g
00:01 < zell> rvagg: thx
00:01 < rvagg> and... I don't know if backbone-browserify is ender compatible, maybe just `backbone` is tho, it was last time I looked (long ago)
00:02 < rvagg> although the AJAX required you to use reqwest in compat mode, see https://github.com/ded/reqwest about that
00:04 < zell> rvagg: Filesystem Error: no such file or directory [ender.js]
00:04 < rvagg> ah, so you don't have an ender build already?
00:04 < rvagg> `ender add` is for an existing build
00:04 < zell> ohh
00:04 < zell> i see
00:04 < rvagg> if you're starting from scratch then use `ender build` instead
00:04 < zell> roger that
00:04 < rvagg> something like `ender build jeesh reqwest underscore backbone`
00:05  * rvagg is guessing... not being a backbone user
00:05 < rvagg> tho! I'll be very interested to hear how your backbone+ender use goes, if there are issues then we should get that sorted out
00:05 < zell> rvagg: i already used build earlier, but removed it manually ^^
00:06 < rvagg> zell: ah ok, well if you don't want to use ender.js then for build you use `--output foo` and then when you `add` and `remove` you tell it where your build is with `--use foo`
00:06 < zell> rvagg: for now everything seem to work fine except browserify ...
00:06 < rvagg> zell: hm, using browserify and ender together may not be a great idea
00:07 < zell> rvagg: yeah i'm thinking of stoping using that damn browserify
00:07 < zell> rvagg: that's why i'm looking into ender ^^
00:07 < rvagg> heh, don't say that too loud around here! heh
00:08 < rvagg> ok, well if you give ender a spin and find it wanting then please leave feedback as an issue on github, https://github.com/ender-js/ender/issues
00:08 < rvagg> lots in flux for 1.0
00:08 < zell> rvagg: with pleasure
00:09 < Slade-> is ender good stuff?
00:09 < rvagg> Slade-: it's awesomesauce
00:09 < rvagg> http://ender.jit.su
00:09 < Slade-> are you biased? ;)
00:09 < rvagg> slightly
00:12 < Slade-> that was on my list of things to learn, along with backbone
00:13 < Bilge> hipster.js
00:13 < Slade-> tho backbone was on my list as a starting base of something to rip the hell outta ;p
00:13 < rvagg> Bilge: vapour.js is the true hipster.js
00:14 < rvagg> sorry, vapor.js
00:14 < rvagg> http://vaporjs.com/
00:15 < substack> http://teh-wizzards-of-stre.nko3.jit.su/
00:18 < rvagg> substack: that sprite is working brilliantly!
00:18 < rvagg> takes a while to download resources tho, perhaps you should switch to Ender
00:18 < owen1> substack: i see a wizard and i can move around..is there anything else i should be able to do?
00:19 < substack> owen1: you can change colors
00:19 < rvagg> I'm assuming that the panel on the right will become a code interface to a game?
00:20 < owen1> rvagg: how is ender different than bower.js?
00:20 < owen1> 'bower install backbone jquery'
00:20 < rvagg> owen1: bower is just a distribution/repository(ish) system, all it does is register and fetch resources
00:20 < owen1> will put everything in components folder
00:20 < rvagg> Ender bundles and does common-js stuff
00:21 < Bilge> rvagg why is there a link to the mdn regex page
00:21 < rvagg> Bower may become an optional back-end to Ender, we have a ticket for that but it'll depend on how bower goes
00:21 < rvagg> Bilge: that's a random link to boost mdn pagerank
00:22 < rvagg> Bilge: promotejs.com I think
00:22 < owen1> rvagg: so ender replaces browserify? 
00:22 < rvagg> pff! ender came before browserify I think
00:23 < rvagg> they are competing in a similar space, yes owen1, currently browserify gives you a much better node-experience for the browser, Ender is targetted more towards just being a modular library builder
00:23 < rvagg> and ender shuns browserify-style magic...
00:24 < owen1> rvagg: got it. thanks
00:29 < rvagg> voodootikigod: is promotejs.com yours? appears to be down, or have we given up on promoting mdn these days?
00:32 < warz> what are the acceptable failure scenaro actions to take inside of a node C++ addon's initialize function?
00:33 < warz> it looks like throwing an exception causes a pretty scary stack trace dump
00:33 < warz> so that doesnt seem nice
00:38 < rvagg> warz: if you have throwable scary stuff then perhaps you should defer it to an explicit call that you can return an error to a callback
00:39 < rvagg> foo.init(function (err, something) { if (err) return handleError(err); something.woot() })
00:39 < rvagg> then you generate the error data instead of throwing
00:39 < rvagg> and pass it arg 1
00:39 < rvagg> (0)
00:40 < rvagg> like so: https://github.com/rvagg/node-levelup/blob/master/src/async.cc#L36-41
00:44 < warz> hm alright
00:46 < mscdex> woohoo! ssh2 key auth working!
00:46 < mscdex> \o/
00:55 < Slade-> yea ender seems cool.
00:55 < Slade-> i guess it just exposes 'require' 
00:56 < rvagg> mm
00:56 < Slade-> tho its prepackaged
00:56 < Slade-> the $ stuff i'm still working out from the overview
00:57 < rvagg> $ is just a convenience, everything is appended to $ so you can use it jquery style
00:57 < rvagg> $('#element').hide()
00:57 < rvagg> where the .hide comes from Bonzo.hide
01:03 < Slade-> underscore seems clever too
01:03 < Slade-> so many libs :P
01:04 < rvagg> so many libs, so little time!
01:09 < mscdex> so many libs, so much time!
01:11 < jonno11> Ok my brain hurts. How can I return this value back once the value has been found? Basic javascript, but I've hit a roadblock, it's late :P
01:11 < jonno11> http://pastie.org/5358447
01:12 < mscdex> jonno11: you can't for async stuff like that
01:12 < jonno11> I know
01:12 < mscdex> jonno11: pass in a callback to getFromTime and call the callback with the result
01:13 < mscdex> jonno11: with error first if there was an error, or 'null, c' on success
01:13 < jonno11> mscdex: great call, thanks mate
01:34 < fruitFly_> I have been told node.js is a monstosity from functinal programmers. What do you think? How easy is node at deploying a web server and simple service? Is it just duh better than php? What else competes?
01:36 < bitfed> Depends on your goals and your skill level
01:37 < bitfed> There's a lot more PHP projects out there than there are node
01:37 < niggler> node is still nascent
01:40 < fruitFly_> I learned a little about html, js and php and am thinking I want to create websites (and web services) for clients. I am thinking I want to be self employed and provide hosting myself. I think node might fit the job, else if I was working for someone else then I guess I might have to learn php. Am I in over my head? Advice would be greatly appreciated
01:41 < niggler> what's your day job?
01:41 < fruitFly_> I recently quit an IT job
01:41 < rvagg> fruitFly_: see the homepage http://nodejs.org/ - there is "AN EXAMPLE: WEB SERVER", that's how easy it is to "deploy" a web server, no apache/nginx required, just that
01:42 < fruitFly_> I can program but need to get more experienced with js 
01:42 < Slade-> nodejs hosting is slightly harder to find. its nice stuff tho
01:43 < fruitFly_> I've seen the hello world example of a webserver. I'm just wondering if it's not painstakingly difficult to independently solicit clients and host myself with node. And how does it compare to php, and what might be the advantages and disadvantages.
01:43 < fruitFly_> rvagg: 
01:44 < Slade-> where would you host yourself? php has lots more prefab. i'd probably go with that unless you were making specialized sites
01:44 < rvagg> check out nodejitsu.com
01:45 < niggler> fruitFly_: are you looking to do your own hosting or to do contracting work?
01:46 < fruitFly_> Slade-: prefab? I would invest in a server and host at my home and create a simple disaster recovery plan.
01:46 < Slade-> fruitFly_: dont do that. use commercial hosting
01:46 < Slade-> its cheaper and less of a pain
01:46 < larzconwell> Where is the actual Node REPL source at? Wanting to see how it manages the line history
01:47 < fruitFly_> niggler: Contracting work? Like just the website itself? I might be interested in hosting as well, but what are the commercial options for node?
01:47 < Slade-> by prefab i mean things that are already ready to use. 
01:47 < fruitFly_> Slade-:  I think that would be the best bet to start But what are commercial hosting options for node? And what is prefab for php?
01:47 < niggler> there's a spectrum fruitFly_ 
01:47 < niggler> y
01:47 < niggler> you can either focus on hosting for node (like nodejitsu)
01:48 < niggler> or focus on building sites for clients using node (contracting)
01:48 < niggler> or build a site of your own
01:48 < Slade-> fruitFly_: php has lots of things already done. you're probably going to be doing basic sites, with blogs or shopping carts and stuff, jumping into php is faster and easier
01:49 < Slade-> fruitFly_: you've got almost 20 years of other peoples work with php. chances are you wont be doing anything overly unique
01:50 < niggler> Slade-: suppose someone is asking for career advice.  where would you start the discussion
01:50 < Slade-> niggler: with "go into health care"
01:51 < fruitFly_> Slade-: Probably. But is it really that much more difficult to put shopping carts, and databases into node?
01:51 < mscdex> larzconwell: https://github.com/joyent/node/blob/v0.8/lib/repl.js
01:51 < mscdex> ;-)
01:51 < bitfed> fruitFly: There are nice open source frameworks for that type of stuff in PHP
01:52 < bitfed> Not so much in node yet
01:52 < pr0xy> I get ECONNREFUSED in the browser when I try to connect to my local/private IP address
01:52 < larzconwell> mscdex,  Yeah I know of that module but it doesn't have line history(by default I see)
01:52 < niggler> fruitFly_: it sounds like you are asking the wrong questions from the start.  what exactly is it that you want to do (forget about node and php for a moment) and then go from there
01:52 < pr0xy> as in 192.168.0.12 from other computers on my networks.
01:52 < mscdex> larzconwell: next to check would be readline, which repl uses: https://github.com/joyent/node/blob/v0.8/lib/readline.js
01:52 < larzconwell> Wait nevermind yeah it does.
01:52 < larzconwell> mscdex,  Sorry about that it DOES infact have line history
01:52 < mscdex> ok, readline has some history stuff in it too
01:53 < niggler> mscdex: is there something that provides full deadline functionality (like dotfiles for history)?
01:53 < mscdex> deadline?
01:53 < niggler> (and history search)
01:53 < niggler> *readline
01:54 < niggler> mac autocorrect pissing me off
01:54 < larzconwell> I think he means cross repl session history like storing it in a file a loading it later.
01:54 < niggler> if you've used rlwrap, for example
01:54 < mscdex> niggler: i dunno, i haven't looked at the repl and readline sources much
01:54 < niggler> le
01:54 < niggler> it gives you persistent history and emacs or vim-style history search and command editing
01:55 < mscdex> you can't use rlwrap with node?
01:55 < fruitFly_> niggler: I want to start making some money pretty soon. I have a programming mind and want to be self employed if I can. I'm also somewhat interested in the client side of the web and possibly want to creating some of my ideas into webservices.
01:55 < niggler> no they clash
01:56 < niggler> 'rlwrap node and try hitting up arrow a few times
01:56 < niggler> it starts printing 'A'
01:56 < larzconwell> niggler,  I'm seeing if I can implement it somehow now, if I get anything good working I'll ping you?
01:56 < larzconwell> the persistent history part I mean.
01:57 < niggler> oh absolutely larzconwell 
01:57 < mscdex> niggler: it works for me
01:57 < niggler> I'm spending my saturday night refactoring code, so any distraction is welcome
01:57 < niggler> mscdex: are you on osx?
01:57 < mscdex> no
01:58 < niggler> yep just like with ncurses
01:58 < niggler> i
01:58 < niggler>  su
01:58 < mscdex> `env NODE_NO_READLINE=1 rlwrap -pGreen -S "node >>> " node`
01:58 < mscdex> that works on Linux :S
01:58 < niggler> oh NODE_NO_READLINE
01:58 < niggler> yeah that works
01:58 < mscdex> :-)
01:59 < niggler> oh that makes me happy mscdex 
01:59 < mscdex> \o/
02:00 < niggler> and of course ~/.node_history works
02:02 < fruitFly_> Slade-: niggler: I want to start making some money pretty soon. I have a business and logical mind and want to be self employed if I can. I'm also somewhat interested in the client side of the web and kinda want to create some of my ideas into websites and services. I am also attracted to hip solutions like node.
02:02 < niggler> fruitFly_: your answer is too broad
02:03 < fruitFly_> niggler: priority decreases in my post
02:04 < blakmatrix> fruitFly_: you never make money by planning and asking questions
02:04 < fruitFly_> niggler: Slade-  first sentence most important, second next important...
02:04 < blakmatrix> fruitFly_: doing is what makes success
02:04 < niggler> blakmatrix well you should know what you are doing and what type of runway you have before you start doing
02:04 < fruitFly_> blakmatrix: I'm trying to discern weather I should learn node, use php or something else
02:05 < niggler> you are asking the wrong question fruitFly_ 
02:05 < blakmatrix> niggler: maybe... success has come from much less
02:05 < niggler> start from what you want to do
02:05 < niggler> and then ask what tools are suitable for the job
02:10 < jonno11> Any mongoose users here? I was wondering how I'd be able to sort a result with an expression. I have two fields (upVotes + downVotes) and I need to be able to sort them via the result of (upVotes-downVotes) expression. Any ideas how I could achieve this? Thanks!
02:12 < exit2> Do people couple angular and node together?
02:22 < jonno11> Any mongoose users here? I was wondering how I'd be able to sort a result with an expression. I have two fields (upVotes + downVotes) and I need to be able to sort them via the result of (upVotes-downVotes) expression. Any ideas how I could achieve this? Thanks!
02:24 < timeturner> jonno11: you'll have to do that manually
02:24 < timeturner> sorts are done by natural ordering
02:24 < timeturner> ascending and descending
02:25 < jonno11> timeturner: How would I do that?
02:25 < timeturner> get all the stuff and then manually map all the docs collected to another array
02:25 < timeturner> then return
02:25 < timeturner> it's something that you can't do in the scope of mongoose
02:26 < jonno11> woah
02:27 < jonno11> so what happens if you have 10,000 docs, then want to return the top 10?
02:27 < jonno11> I guess the only option I have is to have another field of sumVotes
02:27 < vicapow> jonno11: you should store the result of upVote - downVote before you save the document
02:28 < MI6> joyent/libuv: Ben Noordhuis master * 6253400 : test: fix close of uninitialized handle  The test closes all handles afte (+1 more commits) - http://git.io/1pud9A
02:28 < vicapow> jonno11 oh, yeah. just saw your last comment
02:28 < vicapow> but yeah. that's what you def want to do
02:37 < fruitFly_> what doe node do better than php?
02:39 < jerrysv> fruitFly_: nothing. stick with php.
02:39 < fruitFly_> jerrysv: cereal? well I don't have much php experience anyway
02:40 < shripadk> mjr_: ping :)
02:40 < fruitFly_> jerrysv: seriously? what brings you in node then?
02:40 < jerrysv> fruitFly_: you asked a very loaded question.
02:41 < jerrysv> fruitFly_: have you spent any time in the javascript world and done a compare/contrast with other languages?
02:41 < a_meteorite> fruitFly_: just about everything
02:41 < a_meteorite> PHP is inherently broken in many ways
02:41 < shripadk> mjr_: is this a bug? using node_redis for NKO and if i leave the app idle (without it serving requests) for some time it throws an error: "Auth error: ERR timeout" (https://gist.github.com/4053449)
02:42 < jerrysv> a_meteorite: shhh, let the conclusion come naturally
02:42 < a_meteorite> heh
02:42 < a_meteorite> it's only popular because it was easy. apache module and all that...
02:43 < fruitFly_> What are the advantages and disadvantages for someone who wants to become self employed in building websites and simple webservices?
02:43 < fruitFly_> of node vs php
02:43 < niggler> fruitFly_: the best way to do this is to start from an idea
02:43 < jerrysv> fruitFly_: what are the advantages and disadvantages of using a credit card versus a debit card? same question
02:43 < niggler> and then ask which is better
02:43 < jerrysv> fruitFly_: let's look at languages and libraris
02:44 < niggler> jerrysv: that's a bad comparison
02:44 < jerrysv> niggler: in this case, i disagree
02:44 < jerrysv> niggler: each has their pros and cons, it's a matter of critical thinking
02:44 < jerrysv> Nexxy: did you make it home ok?
02:45 < fruitFly_> Primarily I want to become self employed, but I also have an interest in the web and that makes me want to try node out.
02:45 < fruitFly_> jerrysv: debit card you can't get in debt
02:45 < niggler> ok here;s a project
02:46 < niggler> fruitFly_: build a tank game in the browser
02:46 < niggler> you know, driving tanks around, shooting, I'm sure it already exists
02:46 < jerrysv> fruitFly_: but you are also limited to exactly how much money you have, and can't move your debt. it's a serious question
02:46 < fruitFly_> but the advantages and disadvantages are subjective to the individual? do they have a spending problem etc jerrysv 
02:47 < niggler> now, if you start from a project, then you can look at what you need and what serves you best
02:47 < jerrysv> fruitFly_: so, the question starts at: what are the difference in the languages and libraries? what are you trying to accomplish?
02:47 < fruitFly_> jerrysv: you can do more with a credit card
02:47 < jerrysv> buying a car, you tend to buy on credit.  buying a candy bar?
02:47 < fruitFly_> jerrysv: I want to efficiently become self employed in building websites and simple web services
02:47 < jerrysv> fruitFly_: then stick with php for another 2 years.
02:48 < Slade-> so I cant tell whats dated and what isnt.. does express automatically handle gzipping files?
02:49 < jerrysv> fruitFly_: if that's your only reason to look at other languages: "what can help me build websites for money", then why bother?
02:49 < niggler> programming isn't about making money
02:49 < jerrysv> if you are serious about languages, and want to learn, and want to understand the awesomeness of node.js, then node is your way to go
02:49 < fruitFly_> I don't know php that well though, I built a simple messaging app using a text file database.. it worked on my local host but not when I deployed it... that's it
02:49 < jerrysv> but if it's all about money, do what you know until what you know is worthless.  look at cobal in 1999
02:50 < Slade-> look at cobol in 2012
02:50 < jerrysv> javascript is an awesome language. node is an extension of javascript
02:50  * Slade- just hired a new cobol developer last week.
02:50 < niggler> lets be fair here: look at C in 2012
02:50 < jerrysv> (full disclosure: i was a cascadiajs organizer)
02:50 < jerrysv> niggler: i <3 c
02:51 < niggler> :)
02:51 < niggler> if you build something really cool
02:51 < niggler> a
02:51 < niggler> n
02:51 < niggler> d
02:51 < niggler>  you are hiring
02:51 < niggler> you can get others to join the language of your choice
02:51 < fruitFly_> jerrysv: Slade-: I'm just trying to get an idea of how much more effort it will take to create tools for clients with node and what is the difference in learning curve of node vs php
02:51 < Hotroot> Uh oh, just got here, don't tell me we have another random node hater
02:52 < niggler> Hotroot: we've got a bit flipper
02:52 < Slade-> fruitFly_: you're in the node channel, and everyone is telling you to use php.. 
02:52 < Hotroot> I find the differences pretty simple
02:52 < Hotroot> Want a slow language that is supported everywhere and is fairly stable? Go PHP or whatever. Want something new, fast, dynamic, and not supported by most hosts? Go node.
02:53 < niggler> in PHP your work will be stuff like supporting frameworks
02:53 < niggler> drupal
02:53 < niggler> i think drupal devs are still paid fairly well
02:53 < jerrysv> drupal. ugh.
02:53 < Hotroot> I'm getting so into express right now, async is the shit
02:53 < niggler> fruitFly_ is focused on money
02:53 < jerrysv> express. ugh.
02:53 < fruitFly_> I hear you Slade-: But could you provide some estimates for my last question?
02:53 < fruitFly_> Not totally
02:53 < Hotroot> Haters will hate, but I love express atm
02:53 < Hotroot> Only the docs are meh
02:54 < jerrysv> fruitFly_: stick with php for the next 2 years. you will make money. if you care about the future, get out now.
02:54 < jerrysv> Hotroot: sloooooooooooooow
02:54 < fruitFly_> I am interested in programming, but fire is under my ass. I just came from learning haskell and it's webframeworks for building scalable applications but I was moving too slow
02:54 < jerrysv> fruitFly_: go learn erlang
02:54 < Hotroot> Isn't slow for me
02:54 < jerrysv> fruitFly_: seriously.
02:54 < jerrysv> Hotroot: how many million hits do you receive a day?
02:54 < Hotroot> How many do you?
02:55 < Slade-> fruitFly_: no, i cant provide you an estimate without knowing the project and your ability to learn
02:55 < jerrysv> Hotroot: how many millions customers do you need to deal with?
02:55 < fruitFly_> 11-13
02:55 < fruitFly_> jk lol
02:55 < jerrysv> Hotroot: when i had to deal with drupal: 12 million members, 100,000,000 hits/day
02:55 < jerrysv> Hotroot: guess what? it failed.
02:55 < Hotroot> What? I'm talking about express
02:55 < Slade-> fruitFly_: honestly if this is even in your top 10 list of concerns with being a freelance web dev. you're  in trouble
02:55 < a_meteorite> niggler: tank game in the browser? are you psychic?
02:55 < fruitFly_> Ability to learn: HIGH. I'm curious what might typical clients want? Shopping carts, database connections... credit card shit... what else?
02:56 < a_meteorite> that's exactly what I'm doing.
02:56 < jerrysv> Hotroot: you asked how many hits, thought you were referring to drupal, sorry :)
02:56 < a_meteorite> https://github.com/dvicory/TvT
02:56 < jerrysv> Hotroot: when it comes to express, i look more at load average
02:56 < Hotroot> If express can't handle a lot though, with some benchmarks, I might have to look for something else
02:57 < Slade-> fruitFly_: then it'll take you like 2 hours to learn to put together your first php site. based on whatever the specs are.. 
02:57 < Hotroot> I don't expect this project to get more than a few thousand hits a day, tops though
02:57 < jerrysv> Hotroot: it can, there is better though :)
02:57 < niggler> a_meteorite: you know what i want?
02:57 < niggler> that looks cool
02:57 < Hotroot> I'm simple, and lazy. I like that express does content type, etc. for me
02:57 < niggler> but i fucking want to play MMO star fox 
02:57 < a_meteorite> I'm cutting corners because it's actually for a class project
02:57 < niggler> star fox 64 has a special place in my heart
02:57 < a_meteorite> and my group sucks
02:58 < jerrysv> Hotroot: even my blog can hit tons/day, but that depends on how cool of an entry i put out, and how long it stays on hackernews #1 :)
02:58 < a_meteorite> https://github.com/dvicory/TvT/graphs/contributors
02:58 < niggler> and i want to see a 16 person match
02:58 < Hotroot> niggler: Same here, but nobody will play it with me because I'm too good
02:58 < niggler> hehe that's why we need a game like that
02:58 < niggler> so we can try it out
02:58 < fruitFly_> Slade-: I'm interested in node, seriously. I just don't want to do it if I am going to spend a lot of time rebuilding/polishing tools already available in php
02:58 < niggler> its my december 2012 project
02:58 < jerrysv> wait a second, why aren't you folks competing on node knockout?!!!!!
02:58 < Slade-> fruitFly_: dude. you need to stop trolling. seriously
02:58 < Hotroot> fruitFly_: Yes, libs can be a slight problem. Just try it though
02:58 < jerrysv> fruitFly_: stick with php
02:58 < Hotroot> Build a test project
02:59 < a_meteorite> libs aren't really a problem in node
02:59 < Hotroot> Uhh
02:59 < a_meteorite> I mean, I dunno what you're doing in PHP, but *I* haven't had issues
02:59 < Hotroot> I'm doing 2 mongo connections because I can't even do sessions with mongolian
02:59 < a_meteorite> maybe a year ago
02:59 < fruitFly_> Fuck it. I'm gonna try node. Just because it's js
02:59 < jerrysv> mikeal: missed you this last week
02:59 < Hotroot> If you like JS, you will like node
02:59 < Hotroot> And learning how http works is cool too
03:00 < Hotroot> Or TCP, etc.
03:00 < jerrysv> Hotroot: some of us knew http well before node :)
03:00 < fruitFly_> and if I freelance, can I just use nodejitsu or whatever it is?
03:00 < Hotroot> I know, but node kinda forces you
03:00 < Hotroot> fruitFly_: Or just use a VPS
03:00 < Hotroot> I'm looking at this place currently
03:00 < Hotroot> https://hostigation.com/?page=KVM
03:00 < barranger> sorry to butt in, but any reasons against using Heroku for node stuffs?
03:01 < Hotroot> Still working on the project I will need it for though, so I can't testify to how good they are
03:01 < bitfed> Also cloud9.io
03:01 < slaskis> barranger: the main reason for me would be that they don't support requests longer than 30s
03:01 < Hotroot> bitfed: Site is dead
03:01 < bitfed> oops, make that c9.io
03:01 < fruitFly_> have any of you used underscore.js?
03:01 < slaskis> which makes sockets and the async easy things in node quite pointless
03:01 < bitfed> Decent free account
03:02 < Hotroot> Infinite freedom with a VPS though, and they are pretty cheap
03:02 < barranger> slaskis: makes sense
03:05 < jerrysv> trolololol. :(
03:07 < Hotroot> Ah, that was nice. Entire registration code in like 40 lines and it's async.
03:09 < niggler> fruitFly_: why don't you help a_meteorite with the tank game?
03:11 < niggler> sounds like he could use some help and you'd probably learn quite a bit
03:17 < goku22> url.parse turns '\' in a param to '\\'
03:17 < goku22> how to get it back
03:18 < niggler> unescape
03:19 < mscdex> goku22: url.parse works fine, are you looking at a quoted version of the param?
03:20 < mscdex> goku22: if so, then you will see the \\, but if you `console.log(param)`, you'll see just one
03:20 < goku22> ì:GQî\u000bôÔc(/:BÐn 
03:20 < mscdex> s/quoted version/literal
03:20 < goku22> when trying to compare with another value
03:21 < goku22> console.log gives me two \\
03:21 < goku22> ì:GQî\\u000bôÔc(/:BÐn
03:23 < goku22> unescape has no effect
03:24 < jerrysv> s/\\\\/\\/g
03:24 < jerrysv> ?
03:28 < goku22> yeah i was trying JSON. stratify cause the other value was giving out a tab instead of \u
03:29 < goku22> i get it thanks for the pointer mscdex
03:29 < goku22> stringify*
03:51 < mikeal> jerrysv: yeah, too much happening lately
03:51 < mikeal> i leave monday for Australia, Japan and Korea
04:04 < Hotroot> Oh free CSS templates, how you save nerds like me
04:13 < ryan_stevens> anyone tried out the new systemtap probes in node core for linux?
04:13 < ryan_stevens> I'm having trouble compiling it on fedora
05:00 < dylang> does `npm unpublish` not remove the page on https://npmjs.org?
05:08 < Aria> There's some caching there. Be patient.
05:11 < Hotroot> Do you guys do DDoS protection in your app, or do you rely on your host / a prevention program?
05:16 < niggler> I stand outside my server with a cosh
05:17 < devatwork> what do ppl use to run nodejs in the background ?
05:18 < devatwork> currently im using "forever", but that thing spawns way to many processes
05:20 < niggler> ? it should never spawn many processes in paralle
05:20 < niggler> l
05:20 < devatwork> its spawning like 10 of em
05:20 < devatwork> thinking of just using nohup node server.js
05:20 < niggler> that's not the same thing
05:20 < niggler> w
05:20 < niggler> hat forever does is restart if your process crashes
05:21 < devatwork> oh, hmm
05:21 < niggler> and optionally watch on a path and restart if files change
05:21 < niggler> nohup just runs the process in the background
05:21 < devatwork> does it come with some sort of config file i can tweak ?
05:21 < niggler> there are command line flags
05:22 < larzconwell> Would it be cool to add file history to the REPL module?
05:22 < niggler> my shell script is forever=node_modules/.bin/forever; if [ ! -e $forever ]; then forever=forever; fi; $forever -w ./dev.js ./config_file
05:23 < niggler> larzconwell: please make the file default to ~/.node_history so that it plays nice with rlwrap
05:23 < niggler> but more importantly, can you add stuff like completion?
05:23 < niggler> *additional completion
05:24 < devatwork> niggler, heres a snapshot http://goo.gl/oFe4k
05:24 < devatwork> so thats just after running forever start <blah> on two scripts
05:24 < larzconwell> Do you think they'll merge it into core? :p
05:24 < niggler> you must have run forever multiple times
05:25 < niggler> larzconwell: the problem is that not all targets have gnu *readline
05:25 < devatwork> niggler, yea ran it twice, since i have 2 scripts
05:25 < niggler> devatwork: i can't see the ppid
05:25 < larzconwell> not that hard to read a file line by line.
05:25 < devatwork> whts that ?
05:25 < niggler> there should be a column 'ppid'
05:25 < devatwork> hmm dont see it in htop
05:26 < niggler> larzconwell: I'm talking about http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html
05:26 < niggler> devatwork: is there a way to add columns?  if so add the parent or ppid column
05:26 < niggler> then you can see how they are spawned (for all we know a script may have been fired twice)
05:26 < niggler> a
05:27 < devatwork> hmm ok
05:27 < niggler> also, why use htop when you can just use top?  htop when i last used it was a memory and cpu hog
05:28 < devatwork> niggler, got it
05:29 < devatwork> http://goo.gl/jUyZX
05:29 < niggler> so I'm guessing based on pids that you launched your script that does "forever" twice or somehow it got called twice
05:30 < niggler> how are you launching your app, and when you run the script do you check if a process is already running?
05:30 < devatwork> so i do a forever stopall -> forever start app.js -> forever start log.js
05:31 < devatwork> this is all from the console fwiw
05:31 < tmiw> hm
05:31 < tmiw> bodyParser() in express doesn't seem to be working for me
05:31 < niggler> try killing all of the process and then start it once
05:31 < tmiw> I should be seeing a body property in the request object if it's working, right?
05:31 < niggler> killall forever (you may need to do killall monitor)
05:32 < niggler> and then run once (no stop all) and be sure that you are only seeing one pair of forever instances
05:32 < devatwork> ok so killed all of them. Now, going to forever start app.js
05:32 < jrajav> Has anyone tried detecting file types with node?
05:33 < jrajav> Specifically, text files and hopefully their encoding as well
05:33 < niggler> jrajav: using magic number or file extension?
05:33 < niggler> t
05:33 < niggler> there was something that tried to detect mime types
05:33 < jrajav> I'm just wondering if there's a more specific module than libmagic flying around
05:33 < devatwork> niggler, this is right after running that one command http://goo.gl/8ePiV
05:34 < niggler> what is the exact command you are using devatwork when you fire up forever?
05:34 < niggler> jrajav: magic is probably the best you'll get
05:34 < devatwork> sh-4.1$ forever start app.js
05:34 < devatwork> and i get one line output : info:    Forever processing file: app.js
05:35 < niggler> in a screen, can you run forever app.'s?
05:35 < niggler> $ forever app.js
05:35 < niggler> best to do this in a tmux or screen
05:35 < devatwork> hmm let me check
05:35 < niggler> this won't run in the background
05:36 < devatwork> http://goo.gl/AwOpw
05:36 < devatwork> So its similar to running node app.js...except if i run "node app.js" i dont get so many processes. Just one
05:37 < niggler> did you kill the old instances first?
05:37 < devatwork> yup
05:37 < devatwork> all those 4 entries arise right after i execute : sh-4.1$ forever app.js
05:38 < niggler> can you put up the code to app.js
05:38 < devatwork> sure, sec
05:41 < devatwork> niggler, http://pastebin.com/gKaiDxHj
05:44 < niggler> ok that's strange i tried it on my machine and get one instance of forever and of node
05:44 < niggler>  ps -ef | grep test.js | grep -v grep
05:44 < niggler>   501 43593 26862   0 12:41AM ttys004    0:00.31 node /usr/local/bin/forever test.js
05:44 < niggler>   501 43594 43593   0 12:41AM ttys004    0:00.18 /usr/local/bin/node /Users/Niggler/test.js
05:44 < devatwork> maybe its htop
05:44  * devatwork checks
05:44 < niggler> htop is claiming they are different pids
05:45 < devatwork> get one entry from ur command
05:45 < niggler> using regular top how many instances do you see?
05:45 < niggler> not htop
05:46 < devatwork> one as well
05:46 < devatwork> scumbag htop, wth
05:46 < devatwork> weird..htop has never failed me before :\
05:47 < niggler> i think a meme is coming
05:47 < niggler> scumbag htop, makes you see double
05:47 < devatwork> but yea it claims pids 9473/9474 are used by node, whereas both top and ps show only 9473
05:50 < devatwork> niggler, appreciate the help
05:50 < niggler> nice break from this massive code restructuring
05:51 < devatwork> re-factoring at midnight eh ?, always a good idea :D
05:51 < niggler> 1 AM
05:52 < niggler> i don't drink, so the sleep deprivation acts as the brain mushing that gets me through this
05:53 < devatwork> heh
05:54 < sinclair> hmm, anyone here tried web matrix?
05:55 < niggler> wtf is webmatrix?
05:56 < sinclair> niggler: a small web development development tool from MS
05:56 < sinclair> niggler: not exactly Visual Studio, but seems reasonable for nodejs dev
05:57 < sinclair> niggler: only downloaded it today for the first time, but honestly, im not sure if i like it
05:57 < niggler> oh god
05:58 < sinclair> niggler: it kinda supports everything
05:59 < niggler> you know, one would get the feeling that you are a microsoft employee lol
05:59 < sinclair> niggler: i already said im not sure if i like it or not
05:59 < sinclair> niggler: it reminds me of the IIS web installer crap
06:00 < sinclair> niggler: honestly, how long does it take you to set up a express site with npm?
06:00 < niggler> im allergic to express
06:00 < sinclair> niggler: oh really?
06:01 < niggler> but yes, its far shorter than IIS
06:01 < sinclair> right, so webmatrix has click create of the site, it installs express (and ONLY) express, and away you go
06:01 < niggler> holy shit git is pissing me off
06:02 < sinclair> niggler: anyway, webmatrix appears to do things like, install cms packages for PHP, .NET, Python and Java
06:02 < sinclair> and lots of other things 
06:03 < sinclair> it also provides a IDE (of sorts), with a basic text editor, and a few other things
06:03 < niggler> are you a git wizard?
06:03 < niggler> a gizzard
06:03 < sinclair> hell no, Microsoft Team Foundation Server here
06:04 < sinclair> (was joking about TFS)
06:04 < niggler> sorry, git is just pissing me off
06:05 < niggler> you would think if a file is already in a repo and if someone later puts the file in gitignore, then the file should either be staged or removed.  
06:05 < niggler> instead of complaining if you try to do either
06:11 < AAA_awright> niggler: Why would it?
06:11 < AAA_awright> gitignore specifies the files that are ignored when scanning
06:11 < niggler> so if a file is already in a repo
06:11 < niggler> a
06:11 < niggler> and then its added to gitignore
06:11 < niggler> t
06:11 < niggler> he file is still in the repo!
06:11 < niggler> so why would the gitignore take precedence over what's already in the repo
06:12 < niggler> its fair to say that it should take precedence, except the gitignore also precludes removing the file from repo or moving it
06:12 < AAA_awright> niggler: Of course it is still in the repo
06:12 < AAA_awright> What specifically are you trying to do?
06:13 < niggler> so i committed a file in node_modules and now i want to get rid of it
06:13 < niggler> except in a different commit i added that path to gitignore
06:13 < niggler> i ended up having to remove it from gitignore and then removing the file and then adding the line back into gitignore
06:13 < sinclair> niggler: http://tomasz.janczuk.org/2011/11/debug-nodejs-applications-on-windows.html
06:14 < AAA_awright> niggler: `git rm`
06:14 < niggler> yeah git rm was complaining that the file was in gitignore
06:14 < AAA_awright> What's the command?
06:14 < niggler> git rm is right
06:14 < niggler> if i want to remove the file
06:15 < niggler> but since the file was already in a path that was ignored
06:15 < niggler> git refused to do it
06:15 < AAA_awright> If you want to remove a file from versioning only, you use --cached
06:15 < niggler> the question is why does adding a file to gitignore essentially freeze it
06:15 < niggler> *adding a file already in the repo
06:16 < niggler> id agree that either "allowing deletion" or "allowing changes" are internally consistent
06:16 < niggler> b
06:16 < niggler> u
06:16 < niggler> t 
06:16 < niggler> f
06:16 < niggler> reezing it isnt
06:17 < AAA_awright> niggler: What's the specific command you're using, and what's the specific error you're getting
06:17 < AAA_awright> Because Git shouldn't be doing that
06:17 < niggler> `git rm` and the error message is The following paths are ignored by one of your .gitignore files: node_modules
06:18 < AAA_awright> If you're trying to remove it from versioning, however, merely adding it to .gitignore doesn't do anything
06:18 < niggler> and if i try to just change the file and `git add` it gives the same error
06:18 < AAA_awright> niggler: What's the specific command
06:18 < niggler> i put node_modules in .gitignore to prevent the issue in the future
06:18 < AAA_awright> git rm ...
06:18 < niggler> git rm node_modules/foo.js
06:18 < niggler> where node_modules/foo.js was committed about 15 revisions ago
06:19 < Sly> niggler, have you tried forcing it?
06:19 < Sly> `git rm -f`?
06:19 < niggler> heh yeah that worked
06:20 < niggler> but normally it would tell me to force it
06:20 < niggler> hmm still is strange
06:20 < Sly> Oh. Well, it probably doesn't expect you to be using Git to manage something you have in .gitignore.
06:20 < Sly> Which leads to funky error messages.
06:20 < niggler> its not an implausible situation
06:21 < niggler> but duly noted, next time remove all files before adding to gitignore
06:21 < AAA_awright> I can't reproduce that situation, Git runs the commands without error
06:21 < AAA_awright> But you do have to name the specific files, otherwise it gets skipped when scanning
06:23 < niggler> mkdir test; seq 1 5 | test/foo; git add foo; git commit -m t1; echo test/ >> .gitignore; git add .gitignore; git commit -m t2; echo 6 >> test/foo; git add test/foo; git rm test/foo
06:23 < Sly> niggler, just don't hold me to that. I haven't looked into the source of Git to see what that exact "error" is. But it sounds like to me it's just telling you "Why are you doing that? You already have the folder ignored, so I'm not uploading it anyway."
06:23 < niggler> the last two lines both bomb out
06:23 < micheas> I am looking for help rewriting a single line of js (I think) to make it compatible with express() 3. I don't seem to be able to follow the instructions on the wiki. (which are probably completely clear to someone that knows what they are doing)
06:24 < niggler> Sly: i think i may not have properly understood gitignore
06:24 < niggler> wait a second, no I'm right there's something queer going on
06:24 < niggler> "Files already tracked by git are not affected"
06:24 < niggler> http://www.kernel.org/pub/software/scm/git/docs/gitignore.html
06:24 < niggler> "The purpose of gitignore files is to ensure that certain files not tracked by git remain untracked."
06:24 < Sly> Yeah, I know.
06:24 < Sly> But I'm saying..
06:25 < Sly> The error it gave you, that's what it sounded like it was trying to say.
06:25 < niggler> its possible that they changed the behavior
06:25 < Sly> Regardless of what the Git docs say.
06:25 < Sly> It could be a regression issue.
06:25 < Sly> Maybe ask around and see if anyone else has had that problem?
06:25 < Sly> If so, I'd file a bug about it.
06:25 < niggler> as per the docs (at least i know I'm not going insane) my expectations are correct
06:25 < micheas> It is just "io = socket_io.listen(server, connection info); " This seems really simple, but I can't seem to figure out the correct place to find code to crib from.
06:26 < Sly> niggler, yeah. Your expectations are correct. Any file that's already tracked when you add a .gitignore will already be in the Git history and *SHOULD* be uploaded regardless of Git.
06:26 < micheas> once git knows about the file you have to do a git rm to get git to stop tracking it.
06:26 < Sly> But.. like I said.. could be a regression case.
06:27 < Sly> *regardless of .gitignore, I should say
06:27 < niggler> micheas: the issue is that in my case i could neither add changes nor remove nor rename the file
06:27 < niggler> e
06:28 < Sly> Yeah, niggler. It's pretty easy to bypass stuff like that if it allows a --force option.
06:28 < Sly> Which, most things Git related allow you to force operation.
06:28 < micheas> IIRC when I had that fight with git I had to remove the file from gitignore than do a git rm then add the file to git ignore then recreate the file.
06:28 < Sly> Which is good and bad. It lets you do what you want, but it can also fuck the whole tree sideways.
06:28 < Sly> xD
06:29 < Sly> micheas, he got it to stop tracking from what I understand.
06:29 < Sly> Just had to force it to rm.
06:29 < micheas> I missed that part.
06:30 < Sly> It's cool. :D
06:30 < niggler> tried to leave the warm bubble of subversion
06:30  * Sly gags @ SVN
06:30 < Sly> Last time I used SVN was *YEARS* ago..
06:30 < Sly> And I haven't looked back since I switched to Git. xD
06:31 < niggler> old habits die hard
06:31 < Sly> I know. I didn't want to learn Git.
06:31 < Sly> Now I don't want to go back to SVN.
06:31 < niggler> there are certainly many cool things
06:31 < niggler> t
06:31 < niggler> h
06:31 < niggler> *the hooks are very nice
06:31 < niggler> svn hooks are a pain 
06:32 < micheas> Is there a node.js forum for newbies that are dealing with hacking other peoples code?
06:33 < Sly> micheas, I'm sure there is. Have you tried Google? lol.
06:33 < timeturner> Google is your only friend...
06:33 < timeturner> or SO
06:33 < micheas> Yes, I seem to be failing at my search skills.
06:34 < Sly> http://lmgtfy.com/?q="node.js"+coding+forum
06:34 < micheas> Sly, thanks
06:34 < niggler> why is node.js quoted but not coding or forum?
06:34 < Sly> niggler, cause of "node.js" having punctuation..
06:35 < Sly> Just a habit.
06:35 < Sly> Google likes to ignore punctuation sometimes, so I use "".
06:35 < niggler> i meant "node.js" coding forum as opposed to "node.js coding forum"
06:35 < Sly> Yeah, I could have.. but yeah. xD
06:35 < Sly> The only thing with making it like that, tough, niggler..
06:36 < Sly> Is it would *have* to match "node.js", "coding", AND "forum" in order.
06:36 < niggler> hehe "forum node.js coding"
06:36 < Sly> Splitting it up like that allows coding and/or forum to be anywhere in relation.
06:36 < niggler> is there a version of lmgtfy that uses ddg?
06:36 < Sly> Uhm. I think there is.
06:37 < Sly> I think I saw one the other night.
06:37 < Sly> http://lmddgtfy.net/
06:37 < niggler> excellent!
06:37 < micheas> ironically, multiple pages link back here to this irc forum.
06:38 < Sly> lol, micheas.
06:40 < niggler> "Is there a node.js forum for newbies that are dealing with hacking other peoples code?" isn't that EXACTLY what SO is?
06:41 < Sly> Not really. SO is more of a Q&A.. not really people helping you dig into code.
06:41 < Sly> That's for when you need an answer about a specific problem.
06:41 < Sly> If you leave it too open, they'll close it as off topic.
06:41 < Sly> Like.. "What's the best..." questions.
06:41 < Sly> They'll close those like.. instantly.
06:44 < mscdex> woohoo! interactive shell session in ssh2!
07:57 < graeme_f> i need to push a callback on the end of the queue (so IO events get processed first) - do I use setTimeout(fn, 0) for that?
07:57 < tuhoojabotti> process.nextTick
07:57 < graeme_f> doesn't process.nextTick push onto the head of the queue (i meant 'tail' rather than 'end')
07:58 < tuhoojabotti> hmm
07:58 < tuhoojabotti> I don't really understand your problem
07:59 < graeme_f> there's a queue of functions that get called by the loop - i want this one to happen after any others that are already queued
07:59 < tuhoojabotti> You mean node's event loop? or your own event loop?
08:00 < tuhoojabotti> And why
08:07 < graeme_f> node's event loop
08:08 < graeme_f> i'm processing images that come from an ardrone and need to discard them when the processing can't keep up
08:08 < graeme_f> https://github.com/GraemeF/qrcode-emitter/blob/FixTerribleLag/index.js
08:16 <@Nexxy> graeme_f, you could use something like async's queue
08:16 < yawnt> or a ninjablock
08:16 < tuhoojabotti> I was just about to say that
08:16 <@Nexxy> then just do your img stuff on the drain callback
08:17 <@Nexxy> yawnt, lol
08:17 < graeme_f> is that better? :)
08:17 < tuhoojabotti> https://github.com/caolan/async#queue
08:17 <@Nexxy> graeme_f, seems like it'd be easiest
08:18 < graeme_f> setTimeout should work though, right?
08:18 < graeme_f> (as in the code i linked to)
08:18 < tuhoojabotti> feels awfully hacky, though
08:19 < tuhoojabotti> I don't know how async
08:19 < tuhoojabotti> does it
08:19 < tuhoojabotti> nextTick
08:19 < yawnt> Nexxy: what'ya laughing at? it's serious business
08:19 < graeme_f> looks like async would make it easy to process in parallel (if I'm reading that correctly)
08:20 < tuhoojabotti> graeme_f: You might want something like workers if you are processing lots of images.
08:20 < graeme_f> yeah, it doesn't really matter for this though
08:21 < tuhoojabotti> https://github.com/audreyt/node-webworker-threads :P
08:22 < graeme_f> it's scanning QR codes so it'll mostly be scanning the same thing so it doesn't matter if it can only do a few a second
08:22 < graeme_f> wish nodecopter had a second day so i could try it :'(
08:23 < tuhoojabotti> graeme_f: Maybe you should make QR a writable stream, then return false in the write function when you need to slow down.
08:23 < tuhoojabotti> then you can pipe images to it
08:23 < chovy> anyone know why supervisor can't be found on mac?
08:24 < graeme_f> tuhoojabotti: i did consider that, but had to be quick and dirty yesterday ;)
08:24 < tuhoojabotti> streams ♡
08:25 < tuhoojabotti> graeme_f: How do you like my aproach for an irc client? https://github.com/jslush/node-irc-stream#example
08:26 < graeme_f> tuhoojabotti: lovely! :)
08:28 < graeme_f> tuhoojabotti: the ardrone emits an event each time there is a new image, and the data is a png
08:28 < tuhoojabotti> yeah
08:28 < graeme_f> tuhoojabotti: is it easy to convert that to a proper stream?
08:29 < tuhoojabotti> event-stream module rocks
08:32 < graeme_f> hmm i suppose that would do it… i've used it before but haven't had to worry about dealing with backpressure myself
08:34 < chovy> i figured it out
08:34 < tuhoojabotti> graeme_f: From what I gather the problem is that the ardrone pushes too many images and the qr reader blocks the whole thing so the images are queued?
08:34 < graeme_f> spot on
08:35 < tuhoojabotti> The biggest problem I see is the qr reader, I would probably use a child process for it
08:35 < SomeoneWeird> anybody got any helpful tips on managing sockets? i'm trying to generate a player for each connection and then assign that player the socket, but its seeming difficult >.>
08:35 < tuhoojabotti> That way you can feed it images when it's ready and not worry about blocking
08:35 < graeme_f> tuhoojabotti: yeah - that becomes possible with streams
08:35 < tuhoojabotti> discard images in between
08:36 < graeme_f> tuhoojabotti: i'll give that a try if i get my hands on an ardrone again :)
08:36 < tuhoojabotti> with streams you still have the problem that the write calls can't be handled while the qr reader is working, because it's probably CPU intensive, right?
08:37 < tuhoojabotti> well it's async
08:37 < tuhoojabotti> it might work :P
08:37 < graeme_f> yep, but i'm guessing it could use async.queue to deal with that
08:38 < tuhoojabotti> oh well, good luck with the project. :P
08:38 < chovy> it was surprisingly easy to switch my node project from debian to mac
08:38 < graeme_f> use saturated and drain to control back pressure
08:38 < chovy> thanks everyone :)
08:38 < tuhoojabotti> chovy: Node is nicely cross platform
08:38 < graeme_f> tuhoojabotti: thanks - i learned a few things :)
08:38 < tuhoojabotti> yeah
08:38 < tuhoojabotti> I learned to love streams, I can't wait for the new streams in 0.9 :P
08:39 < chovy> my debian server crashed on me today after a power outage
08:41 < SomeoneWeird> anyone? :X
08:42 < graeme_f> SomeoneWeird: player.socket = socket ?
09:10 < raphie> what do you folks use for scheduling jobs? should I just store tasks in mongodb and query for those tagged at time x every y seconds?
09:14 < tuhoojabotti> Hmm
09:15 < tuhoojabotti> is there a commandline utility that I can pipe stdout to and then filter the stdout
09:15 < tuhoojabotti> maybe I should make one. :P
09:16 < tuhoojabotti> Like if my program outputs lots of debug data to console I could just type for example "unhandled" and it displays all the lines with that string in them.
09:18 < chovy> grep?
09:19 < chovy> cat app.log | grep 'DEBUG:'
09:20 < chovy> tuhoojabotti: i have my node app write all output to ./log/app.log and then you can tail that
09:20 < tuhoojabotti> chovy: I would like it to be interactive
09:20 < tuhoojabotti> when the program is running I can change the filter
09:21 < chovy> tuhoojabotti: 
09:21 < chovy> node $APP_DIR/app.js  1>$APP_DIR/log/app.log 2>&1
09:21 < chovy> then $ tail -f ./log/app.log | grep WHATEVER
09:22 < tuhoojabotti> yeah
09:22 < tuhoojabotti> I knew it was possible
09:22 < chovy> that'll write all stderr/stdout to ./log/app.log
09:22 < tuhoojabotti> I know how that works
09:24 < tuhoojabotti> hmm
09:25 < chovy> when i try to run my mocha test, i get this: https://gist.github.com/ca0ae56eb50b237b5945
09:25 < tuhoojabotti> chovy: I suppose it wouldn't be hard to make that into a script that reads a line and greps it then if the line is "exit" it terminates
09:25 < tuhoojabotti> or sigint
09:25 < tuhoojabotti> for someone more experienced. :P
09:25 < chovy> tuhoojabotti: not sure what you're trying to do
09:26 < chovy> you want to tail your log and exit the node app if you see 'exit' ?
09:27 < tuhoojabotti> chovy: basically what you did there, but just like "script app.js" that does the setup and allows me to change the grep filter on the fly
09:28 < tuhoojabotti> and kills the node app when I'm done
09:29 < tuhoojabotti> just for convenience
09:29 < tuhoojabotti> I repeat that step so often when I'm programming
09:30 < tuhoojabotti> Maybe I'll just create a nice json logger and a program that streams it to a web ui with socket.io. :P
09:33 < yoshbu> can anybody shed some light---- using socket stream, need to make a route to /${someID}, where ${someID} is information I can use when rendering the page
09:33 < yoshbu> is that possible?
09:36 < ZBZZN> hi
09:37 < ZBZZN> Anyone knows if NPM doesn't read the BOM on package.json is intentional or not?
09:38 < ZBZZN> At least there should be a better error message for this case
09:38 < xavier_> Hey, socket.io works fine locally, but not on nodejistu
09:39 < xavier_> XMLHttpRequest cannot load http://localhost/socket.io/1/?t=1352626330664. Origin http://tech-to-the-people.nko3.jit.su is not allowed by Access-Control-Allow-Origin.
09:39 < xavier_> Is there something to set as a param somewhere?
09:40 < No9> xavier_ gist the client code 
09:42 < xavier_> No9: duh 
09:42 < xavier_> io.connect('http://localhost');
09:42 < No9> thought so :)
09:42 < No9> Had it yesterday at coderdojo :)
09:43 < xavier_> ok, I need to find where is the server name in the env param I suppose
09:47 < yoshbu> can anybody answer a routing/url question in socket stream?
09:47  * Nastya http://vk.com/id189043294 - it's me join me)
09:47 < xavier_> actually, even simplier: io.connect('/');
10:00 < chovy> is it possible to set NODE_ENV inside my test case?
10:00 < chovy> i'm afriad i might run 'make test' on my dev db and loose all my data
10:00 < Sly> NODE_ENV=yourenv make test
10:01 < Sly> NODE_ENV=yourtest npm test
10:01 < Sly> Should work
10:01 < chovy> ok
10:01 < chovy> my Makefile sets it too, so I guess i'm safe.
10:02 < chovy> what if i type npm test on accident
10:02 < chovy> when NODE_ENV is development
10:02 < chovy> i would rather the tests just fail
10:03 < Sly> You can make the tests check for process.env.NODE_ENV being set to whatever.
10:03 < Sly> Put it at the beginning of your script.
10:03 < Sly> If it doesn't match, exit the process.
10:03 < chovy> how do i exit?
10:03 < Sly> if (process.env.NODE_ENV !== 'development') process.exit(1);
10:03 < chovy> ok, thanks
10:05 < chovy> i ran npm test and that didn't kill it
10:05 < Sly> It won't kill *all* of the tests. It will just kill the one you put it in.
10:06 < Sly> You would need to put it in *all* of them that you don't want to run.
10:06 < chovy> yeah, well i only have one
10:06 < Sly> try doing console.log(process.env.NODE_ENV);
10:06 < chovy> i typed echo $NODE_ENV and it is empty
10:07 < chovy> hmm, it is picking up test from somewhere
10:07 < chovy> maybe the Makefile set it?
10:07 < Sly> Dunno. Do you have this code on Github?
10:07 < chovy> i do not.
10:08 < Sly> k. Make a gist with the Makefile and the test, then.
10:08 < chovy> ok
10:08 < Sly> Oh, and your package.json
10:08 < Sly> If you're using npm test
10:09 < chovy> https://gist.github.com/5b375d61e85f5c576057
10:09 < chovy> ahh, i think tht's is it
10:09 < chovy>     "test": "make test"
10:09 < Sly> Nope.
10:09 < Sly> Line 4 in your Makefile.
10:09 < Sly> @NODE_ENV=test
10:10 < Sly> You're forcing it to always be test there.
10:10 < chovy> yeah, npm test runs 'make test'
10:10 < Sly> What are you trying to prevent it from running on?
10:10 < chovy> which uses Makefile
10:10 < chovy> I just didn't want to run it on the wrong db on accident.
10:11 < chovy> because i empty collections in the test
10:11 < Sly> chovy, what environment variable do you not want it to run on?
10:11 < Sly> NODE_ENV=production?
10:11 < Sly> NODE_ENV=development?
10:11 < chovy> i only want it to run NODE_ENV=test
10:11 < chovy> i have those 3
10:11 < chovy> you mentioned
10:12 < Sly> Have you tried running `node test.js`?
10:12 < chovy> i have not
10:12 < Sly> Because the way I see it, you have it setup right.
10:12 < chovy> ok
10:12 < chovy> $ node test/model.user.js 
10:12 < chovy> undefined
10:12 < chovy> Woops, you want NODE_ENV=test before you try this again!
10:12 < chovy> yeah, that works
10:13 < Sly> Yeah. Your Makefile is forcing NODE_ENV=test when you call `make test`. `npm test` is calling `make test`, so it's always forcing NODE_ENV=test.
10:13 < Sly> Hence, no failure.
10:13 < chovy> got it, thanks
10:13 < Sly> np
10:13 < chovy> weird, it didn't empty my collection though
10:13 < Sly> What didn't?
10:14 < chovy> https://gist.github.com/bdcda8f2154ebd094810
10:15 < chovy> the first beforeEach should run on all child describes?
10:15 < Sly> Oh.
10:15 < chovy> which empties the user
10:15 < chovy> collection
10:15  * Sly doesn't know anything about mongo
10:15 < Sly> *yet*
10:15 < chovy> User.remove() is supposed to remove the collection.
10:15 < chovy> it works on the first describe
10:16 < chovy> but not on the second it looks like
10:16 < Sly> No clue. >_>
10:17 < chovy> i'm new to mocha
10:17 < chovy> describe / beforeEach 
10:17 < Sly> I've only used Mocha a few times, and that was a while ago.
10:18 < chovy> i guess i don't understand when beforeEach gets ran
10:31 < chovy> alirght, peace out
10:37 < astropirate> Greetings Nodelings
10:38 < SomeoneWeird> URM HAI
10:45 < Ancien> hi
10:45 < Amfy> hi Ancien 
10:46 < Ancien> hi i need help and that my code : http://pastebin.com/b0jR6CXf
10:48 < Amfy> what doesn't work exactly?
10:48 < Ancien> it works but i don't know how can i get back "user_data"
10:56 < Ancien> amfy do you have any idea ?
10:57 < Amfy> Ancien nah, not really. Sorry. I'm not that JS / Node expert as I should be...
10:57 < Ancien> np is there a js expert here ?
11:00 <@mbalho> jsforcats.com has all the answers
11:03 < nathan7> mbalho: heh, I like the use of the yarnify logo
11:03 <@mbalho> yea i wish substack would draw some more cats
11:04 < alchimista> hi every one, 
11:04 < alchimista> I have to Schema, in my routes index I want to query this two schema and pass(render) two json to my view 
11:04 <@Nexxy> mbalho
11:05 <@mbalho> Nexxy
11:05 <@Nexxy> there was a guy with a giant beard @ CascadiaJS
11:05 <@Nexxy> I thought it was you for a second
11:05 < alchimista> can u help me two query two schema , for one schema i do like this https://gist.github.com/fce1eb8982ecb0f7accb
11:05 <@mbalho> I SAW A PHOTO
11:05 <@mbalho> IT WAS WEIRD
11:05 <@Nexxy> haha
11:05 <@Nexxy> yeah I took a picture of him to show you
11:05 <@mbalho> he had a red mustache
11:05 <@mbalho> IMPOSTER
11:05  * franck34 looking for a way to create node modules ... on the fly
11:06 <@mbalho> franck34: text editors are pretty useful for that
11:06 < alchimista> lets say this is another schema for which i wanna query https://gist.github.com/2a1f6f88fbf59238044b 
11:06 <@Nexxy> have you ever looked at the back of a 20 dollar bill?
11:06 < franck34> mbalho: "on the fly" !
11:07 <@Nexxy> have you ever looked at the back of a 20 dollar bill... on the fly?
11:07 <@Nexxy> franck34, how is that phrase precluding the use of a text editor?
11:07 <@Nexxy> you're still going to have to write javascript
11:08 <@Nexxy> by hand.
11:08 < franck34> Nexxy: js will be written dynamycaly by my app
11:08 <@Nexxy> ah huh.
11:08 < franck34> :)
11:08 <@Nexxy> what is your question?
11:08 < nathan7> ..what
11:08 <@Nexxy> wat
11:09 < necco> wut
11:09 < franck34> Nexxy: is prehistoric "nodules" module always working (testing right now) ? or what's the way to load remote modules ? or what's the way to dynamicaly write node modules ?
11:10 < alchimista> so how i have to modify routes exports.index inorder to pass a json from user and another from todo lists?
11:10 < alchimista> some one read my question?
11:10 < alchimista> wanna help me in this regard?
11:11 <@Nexxy> franck34, that's not something I've had to do
11:11 < franck34> for sure ..
11:11 <@Nexxy> I'd imagine you could get by just fine with eval
11:11 < franck34> Nexxy: that's the way i started to investigate
11:12 <@Nexxy> franck34, sounds like you're on the right track
11:14 < franck34> Nexxy: i'm making a bot, bot minimal feature is ping (keepalive) and download module, you see ?
11:15 < franck34> i regret that using npm programmaticly does not support natively url
11:15 <@Nexxy> I can see clearly now
11:16 <@Nexxy> brb, johnny nash
11:34 < Ancien> can someone help me that's my code : http://pastebin.com/b0jR6CXf
11:59 < abrkn> is json rpc widely used?
11:59 < SomeoneWeird> yes
12:00 < abrkn> and for web sockets, any rpc there?
12:02 < necco> abrkn: You could JSON encode an object with your method and arguments for web sockets
12:03 < abrkn> right, so it'd look like json rpc
12:04 < abrkn> just trying not to invent something new that is an effort for anyone to implement
12:04 < necco> it would be up to the server to route the message to the correct rpc end point
12:06 < necco> To minimize implementation, REST may be a better option depending upon your data structure. For example Ember.js had a data component that supports REST for models. An RPC protocol would require additional code.
12:09 < logik-bomb> I'm using jade for the first time and I can't figure how to add a space between my string and the variable. https://gist.github.com/1205d88dacac46d3afce
12:09 < logik-bomb> any clue? Thanks
12:11 < necco> &nbsp; ?
12:11 < AAA_awright> logik-bomb: What's with the colon?
12:11 < SomeoneWeird> eww nbsp
12:11 < logik-bomb> room name: varialbe
12:11 < necco> or include it inline with a space
12:12 < AAA_awright> Oh I see
12:12 < AAA_awright> SomeoneWeird: That's if you want a non-broken space
12:12 < AAA_awright> Oh I see
12:12 < SomeoneWeird> i know AAA_awright 
12:12 < SomeoneWeird> but you shouldn't use it
12:12 < AAA_awright> logik-bomb: p Room name: #{variable}
12:12 < logik-bomb> AAA_awright.. thanks!
12:20 < _geo> which is the most common used validator module for filtering and sanitizing input?
12:22 < SomeoneWeird> node-validator
12:43 < SomeoneWeird> anyone know how I can encrypt a buffer with a priv key i have ?
12:50 < shdw_> Hello. Could anyone be able to help me set up mysql-libmysqlclient on local environment on osx?
12:51 < shdw_> I get "TypeError: Cannot read property 'MysqlConnection' of null" error everytime. The same things happen on vagrant server.
13:26 < abrkn> how can i obtain the content of a request to restify as a string?
13:26 < abrkn> params is filling params, but i need the raw aswell
14:01 < captain_morgan> Someone want to be a lamb and see if the auth on my #nko app actually work? http://derpatron.nko3.jit.su/ thaaannnkks
14:05 < AAA_awright> captain_morgan: Seems to work
14:05 < abrkn> yikes,, just had a terrible bug of some kidn
14:05 < AAA_awright> captain_morgan: Though I don't get what I'm doing once it's identified me by my name
14:06 < AAA_awright> But it works
14:06 < abrkn> module.exports = { derp: function() { body = "hello"; request({ url:'/yo', body: body }, function(body) { ... }); } };
14:06 < abrkn> what is body in that case? global leaked?
14:06 < captain_morgan> Thanks, that is I needed to know, i'm getting a lot of hit on the page, but no one is actually trying to get in
14:08 < AAA_awright> And if anyone wants to test http://magnode.org/ for me, installing the application, give me a ping
14:08 < AAA_awright> I'd like some people ordering me around saying "Hey, I'd like to make a blog but I need XYZ to do so!"
14:13 < Kakera> is there a shorthand to commit to both git and npm?
14:14 < nathan7> npm hs no such thing as commits
14:14 < nathan7> if you want to bump the npm version, use npm version, which will commit the version bump to git immediately (and make a git tag)
14:14 < zell> rvagg: I got an issue with ender, how can i use socket io with it ?
14:15 < Kakera> cool
14:15 < zell> rvagg: i always have some weird dependancies error
14:17 < nathan7> AAA_awright: http://magnode.org/ =~ s/sacrafice/sacrifice/
14:19 < AAA_awright> Where's it say that? :-\
14:19 < AAA_awright> Oh wow
14:42 < zell> As for now my personnal opignon is that client's require is not reqdy
14:45 < zell> browserify is super shitty (not maintained, bad debug, you need to link individually all your lib), ender is nice but require still some dev because many libs seem to not be supported yet (socket.io), onejs seem nice but has no website (or it's not referenced on github) and almost no documentation
14:49 < abletony84> Hey
14:49 < abletony84> How can I convince my sysadmin to install Node?
14:49 < abletony84> i need something a little bit better than "I need it for my app" :-)
14:51 < kaizokua_> abletony84: tell him that his narrow security minded point of view gets the company nowhere!
14:52 < abletony84> kaizokua_: is there a security risk in instaling node.js?
14:53 < kaizokua_> no but a sysadmin sees everything as a security risk
14:53 < sexsymbol> hey small question
14:53 < sexsymbol> whats the faster right now? buffers or strings
14:53 < sexsymbol> ???
14:54 < kaizokua_> strings are faster
14:54 < kaizokua_> but you have to ask why 
14:54 < kaizokua_> buffers were made for binary data
14:54 < sexsymbol> yeah
14:54 < sexsymbol> why????
14:55 < kaizokua_> strings are built into V8 and allocate memory in the vm directly
14:55 < sexsymbol> and?
14:56 < kaizokua_> and buffers were made for binary data 
14:56 < kaizokua_> so for like pushing thru sockets its better to have binary data
14:57 < kaizokua_> in some cases it seems to be way faster to convert a buffer to a string to do some operations 
14:58 < sexsymbol> so writing strings in a socket are faster???
14:58 < sexsymbol> just give me a clear answer please
14:58 < Kakera> does npmjs.org take some time to update, or am I doing something wrong?
14:58 < zell> main argument of node is pub/sub
14:59 < sexsymbol> i should use binary strings or buffer if im writing in a socket?
14:59 < Kakera> buffer
14:59 < kaizokua_> buffer is beter for socket 
15:00 < Kakera> strings for text, buffers for bytes
15:00 < sexsymbol> and strings is better for what???
15:00 < kaizokua_> once u have the data tho i suggest converting it to string to do operations on it 
15:01 < Kakera> not unless he knows the data he receives IS text
15:01 < kaizokua_> true
15:01 < sexsymbol>  okay kakera
15:01 < sexsymbol> thks
15:02 < Kakera> interesting, npm deducted the description for my package from the README.md file
15:03 < kaizokua_> what!
15:03 < Kakera> and the formatting is broken
15:03 < Kakera> https://npmjs.org/~seishun
15:03 < kaizokua_> was it not in the readme at somepoint? did it just roll back or something?
15:04 < Kakera> come on npm, if you want to be smart, you should at least parse markdown properly
15:05 < kaizokua_> hehheeh dude 'markdown' and 'parsing properly' are not normally in the same sentence
15:06 < Kakera> does anyone know how long it takes for npm to update the website after a push?
15:07 < kaizokua_> i want to know this too, sometimes its forever
15:08 < Kakera> can I update the description without bumping up the version?
15:11 < kaizokua_> dont think so
15:11 < kaizokua_> it would be nice if they had readme editing in the page
15:11 < kaizokua_> like github
15:13 < sexsymbol> best twitter module?
15:13 < sexsymbol> kakera
15:13 < Kakera> no idea
15:14 < sexsymbol> someone knows here????
15:17 < Kakera> gotta love npm unpublish and git reset --soft HEAD^
15:18 < sexsymbol> kakera
15:18 < sexsymbol> are my buffers also gc?
15:18 < Kakera> of course
15:18 < sexsymbol> i mean by node
15:19 < tuhoojabotti> by V8
15:19 < tuhoojabotti> I think I used ntwitter
15:19 < sexsymbol> thks
15:19 < sexsymbol> kakera says buffers are outside of v8
15:20 < tuhoojabotti> They are
15:20 < sexsymbol> tuhoojabotti how can the v8 gc could see them???
15:20 < tuhoojabotti> The memory is outside of V8, but they are handled as js objects in V8 I think.
15:21 < sexsymbol> js objects???
15:21 < sexsymbol> which one? 
15:21 < sexsymbol> strings? lol
15:21 < tuhoojabotti> Buffer objects
15:22 < tuhoojabotti> I'm not sure of the implementation details, but it would be mighty stupid not to GC them.
15:22 < sexsymbol> Buffer objects from a class w/ strings properties?
15:22 < Kakera> V8 probably calls Node when it wants to GC a buffer
15:23 < tuhoojabotti> Look at the source code if you're so interested. :P
15:23 < sexsymbol> dont have time
15:23 < sexsymbol> and im a noooob
15:24 < sexsymbol> and im 15 :)
15:24 < tuhoojabotti> I'm 18
15:24 < sexsymbol> okay
15:24 < sexsymbol> where to look then?
15:25 < sexsymbol> just for node buffers impl details
15:25 < sexsymbol> and no c++ code everywhere krkrkr
15:26 < sexsymbol> kakera any link?
15:27 < Kakera> why do you even care?
15:27 < Kakera> there's no doubt they are GCd
15:27 < Kakera> or is it something else you want to know
15:28 < Bilge> Hello programmer mannens
15:29 < Bilge> If you have a push socket pushing data really fast like ten times a second and the client can't keep up with that kind of transfer rate, what happens?
15:30 < Kakera> something will overflow
15:30 < Bilge> That sounds very specific and accurate just like a typical programmer mannen
15:30 < Bilge> I want to know exactly what happens on the server and client in that scenario
15:31 < Bilge> IN GRUELLING MEATY DETAILS
15:31 < tuhoojabotti> It gets buffered I suppose.
15:31 < tuhoojabotti> Until you run out of memory
15:32 < Bilge> So the server actually suffers if it has a client that is underperforming?
15:32 < tuhoojabotti> Buffered in the client if the client is slow
15:32 < Bilge> That means it's trivial for clients to exploit the server
15:32 < tuhoojabotti> depends on the client
15:32 < tuhoojabotti> of course
15:32 < Kakera> socket.on('data', function() {var time = Date.now(); while (Date.now() < time + 10000000); });
15:32 < Bilge> I think your details are lacking meat
15:32 < Kakera> try it
15:33 < tuhoojabotti> Bilge: I haven't done anything large scale yet, sorry man!
15:33 < Kakera> (probably with a different number of zeroes)
15:33 < Bilge> We're not talking about large scale, we're talking about FAST SCALE!¬
15:41 < sexsymbol> kakera
15:41 < Kakera> yes, sexsymbol?
15:42 < sexsymbol> is there any way i can see one api changes
15:42 < sexsymbol> the evolution or something like that
15:42 < sexsymbol> (dont tell the logs please :))
15:43 < sexsymbol> if i take the streams api for exple, how can i view the evolution???
15:44 < sexsymbol> kakera?
15:45 < Kakera> I don't think you can
15:45 < Kakera> and I'm not the smartest man here so please don't highlight me
15:45 < sexsymbol> lol
15:45 < sexsymbol> but ure my friend here :)
15:46 < sexsymbol> tuhoojabotti: any idea?
15:46 < tuhoojabotti> You don't have time for it.
15:47 < sexsymbol> time?
15:47 < tuhoojabotti> 1722 <    sexsymbol> dont have time
15:48 < sexsymbol> huhu, good point
15:48 <@mbalho> sexsymbol: go read this http://nikhilm.github.com/uvbook/
15:48 < sexsymbol> mbalho: i know this
15:49 < sexsymbol> thks anyway
15:50 < sexsymbol> tuhoojabotti: so u have a tool for that or not?
15:50 < shdw_> Hello, does anyone could help me to deal with mysql-libmysqlclient integration on local environment?
15:50 < tuhoojabotti> sexsymbol: No, I don't.
15:51 < sexsymbol> or i think i should make one myself
15:51 < jrajav> Anyone had experience using UTF-8 strings in node?
15:51 < sexsymbol> in my no-time of course
15:52 < jrajav> I understand using iconv for converting any encoding to utf8 to begin with, but is there anything that needs to be done after that? JS strings are utf16 by default, right?
16:27 < Cyberfit> How many bytes is the overhead of a client to server ArrayBuffer send?
16:27 < Cyberfit> I'm getting 6 byte overhead, and sending the same data back from server to client I get 2 byte overhead
16:27 < jrajav> Err, what exactly is the point of StringDecoder?
16:28 < jrajav> What's the difference between doing new StringDecoder('utf8').write(buffer) and buffer.toString('utf8')?
16:32 < Cyberfit> Has anyone tried implementing WebRTC Data Channels via node.js?
16:36 < AAA_awright> Cyberfit: There's no implementations yet and the standard is changing by the day
16:36 < AAA_awright> Sometimes it's not even been in the standard
16:36 < AAA_awright> idk if that's changed recently
16:37 < Cyberfit> AAA_awright: It's in firefox highly now https://hacks.mozilla.org/2012/11/progress-update-on-webrtc-for-firefox-on-desktop/
16:37 < Cyberfit> nightly*
16:37 < AAA_awright> Huh
16:38 < mscdex> jrajav: string decoder makes sure that multi-byte characters stay intact iirc. buffer.toString('utf8') uses stringdecoder under the hood i believe
16:38 < jrajav> The documentation seems to say the opposite
16:38 < jrajav> "It is a simple interface to buffer.toString() but provides additional support for utf8."
16:39 < jrajav> Which is doubly confusing because buffer.toString() does support utf8
16:39 < jrajav> It's the default, even
16:39 < Cyberfit> AAA_awright: Do you think it would be possible to stream UDP to it via node.js datagram?
16:39 < Cyberfit> It's a bit tacky at the moment. Apparently you need to keep a fake audio stream open for it to work.
16:43 < mscdex> jrajav: i've never used stringdecoder standalone before
16:43 < Cyberfit> jrajav: What's buffer.toString()? Is it for converting ArrayBuffers to UTF8?
16:43 < Cyberfit> I would love an endian safe way to do that!
16:43 < jrajav> I only looked at it because I'm trying to figure out how to best handle reading in text files of arbitrary encodings
16:44 < jrajav> And it's extremely difficult to find any resources on handling Unicode and such in Node.js
16:44 < jrajav> Node.js' often outdated and always sparse official documentation doesn't help......
16:45 < jrajav> So far I'm thinking I'll go with a frankenstein combination of Buffer, iconv, and libmagic
16:46 < mscdex> Cyberfit: it's for Buffer, not WebGL *Buffers
16:46 < jrajav> Guess the encoding with libmagic, convert with buffer if it's utf8 or utf16le, if it's any other Unicode run iconv to convert to utf8, if it's a non-unicode encoding just try to read as utf8
16:46 < jrajav> I don't know if this is the best way to do it, but as I said, I can't find anything that does say what the best way to do it is
16:47 < jrajav> Maybe no one has actually cared enough to figure it out yet :P
16:47 < jrajav> And by the way, I'm working with files, not network requests
16:48 < Slade-> so, for a configuration system. I'm thinking about using a module.. and have everything write their data to that modules exported table.. and then save it at the end.. does that seem reasonable?
16:48 < Slade-> or would i be happier using nconf or something
16:56 < nathan7> Slade-: I really recommend nconf
16:59 < Slade-> how come?
16:59 < nathan7> It lets me use multiple config sources with ease
16:59 < nathan7> I can use other sources such as environment vars
16:59 < Slade-> dont i have to reload the configuration files for every module that uses them?
16:59 < nathan7> You could also just use a JSON config
16:59 < nathan7> You can require() a JSON file
17:00 < Slade-> this is true. :)
17:00 < jrajav> Uh, can you really just require a raw JSON file and have it work?
17:00 < nathan7> Yep.
17:00 < jrajav> Sweet
17:01 < jrajav> I thought you'd have to at least put in a 'exports = '
17:01 < nathan7> http://nodejs.org/api/modules.html#modules_file_modules
17:01 < nathan7> jrajav: Not sure in which node version it was added
17:02  * Slade- needs to learn about .node files ;P
17:02 < nathan7> .node files are native extensions
17:02 < zell> w/in 2
17:02 < nathan7> You shouldn't need them most of the time
17:02 < Slade-> i knwo what they are :)
17:02 < nathan7> They are to be avoided, but sometimes necessary
17:03 < jrajav> Hmm. Seems that they have to be named with .json extension, though
17:03 < strmClnt610> Hello World!
17:05 < strmClnt916> Crashed :P
17:06 < nathan7> jrajav: Yes.
17:14 < Cyberfit> Does anyone know of  an IRC-channel where browser game developers idle?
17:27 < tuhoojabotti> Is it possible to use readline *and* collect key press events
17:32 < mks> moin moin
17:32 < mks> anybody experienced EPIPE clientErrors while serving partial GET requests (mp3) to iOS devices?
17:36 < niggler> is there a version of ejs that does not depend on express?
17:37 < bradleymeck> tuhoojabotti: TooTallNate's keypress lib
17:38 < tuhoojabotti> bradleymeck: I'm using readline so it works without it?
17:38 < bradleymeck> i think it can double up with readline
17:38 < tuhoojabotti> I just found that module
17:38 < tuhoojabotti> But, yeah it's working.
17:42 < strmClnt1147> hi
17:43 < tuhoojabotti> oops
17:43 < strmClnt1233> maybe this time this works!
17:44 < strmClnt1233> lol
17:44 < strmClnt1233> not
17:51 < strmClnt242> hello
17:51 < strmClnt242> noni
18:09 < niggler> how do you build .node files
18:11 < tuhoojabotti> hmm
18:12 < mscdex> niggler: node-gyp
18:13 < mscdex> niggler: and compiler of course
18:14 -blakmatrix:#Node.js- ATTN: NodeKnockout Contestants Please upgrade your jitsu client to 0.11.3 (`npm i jitsu -g`)
18:36 <@isaacs> Node point javascript: Mama said Node Knockout
18:36 -!- isaacs changed the topic of #Node.js to: Node point javascript: Mama said Node Knockout
18:37 < robinson_k> nko: tired but happy
18:39 < mscdex> nko ends today?
18:40 < etcetera> anyone have a fav markdown plugin for sublime?
18:42 < MI6> joyent/node: isaacs streams2-net * 6eae7f0 : wip http (+71 more commits) - http://git.io/LmnP6Q
18:42 < MI6> joyent/node: isaacs master * e2bcff9 : bench: Use hrtime in throughput benchmark - http://git.io/0LsOFA
18:45 < mscdex> anyone here ever used host-based authentication with ssh?
18:58 < Arro> hello.  i have a somewhat urgent issue with streams.  hoping someone can help.
18:58 < Arro> is there a way to force close a readible stream, say from the twitter streaming api?
18:58 < Arro> stream.destroy() doesn't seem to be doing it.
18:59 < Arro> restarting the node process does.  
18:59 < Arro> but that's my only current workaround
19:11 <@isaacs> Arro: it really depends on the stream implementation
19:11 <@isaacs> Arro: somewhere, there is likely a tcp socket.  .destroy() on that, and it'll be destroyed, for sure
19:11 < niggler> is there a mime type for EJS
19:12 < Arro> @isaacs do you mean the stream implentation from the provider?  or what I'm running to catch it?
19:17 <@konobi> proper jewish bagels ftw!
19:18 <@isaacs> Arro: from whatever API you're using
19:18 <@isaacs> Arro: ie, somewhere int here, it makes a TCP (or HTTP, but http is just TCP with extra baggage) connection to a host.
19:19 <@isaacs> Arro: that socket object is what you hvae to kill
19:20 < Arro> @isaacs i see.  if i console.log the stream object can I find it that way?  btw it's from twitter.  i didn't realize streams varied provider to provider
19:29 <@isaacs> Arro: i don't know what a "provider" is
19:29 <@isaacs> Arro: do you mean the host that you're connecting to?  if so, that has no effect.
19:29 <@isaacs> Arro: if you mean the module that created the object and is giving you data, then of course the API etc will be dependent on the code in that module.
19:29 <@isaacs> Arro: i am not the author of that module, so i can't tell you what it does.
19:30 < Arro> @isaacs gotcha.  think I gotta workaround.   thanks 
19:55 < zezikaro> Hi does anyone use node soap? https://github.com/milewise/node-soap
19:55 < zezikaro> It seems to return an array when there's more than 1 item in it, and an object when there's exactly 1
19:55 < zezikaro> and undefined when there's none
19:55 < zezikaro> is there a way to change that?
19:55 < zezikaro> i would've expected an array regardless of size
19:56 < zezikaro> potentially undefined when length is 0
19:56 < jrajav> Well, you could just check typeof for "object"
19:57 < jrajav> Err. Wait :P
19:57 < jrajav> The reverse would work - Using Array.isArray
19:57 < jrajav> Or _.isArray from underscore/lodash
19:59 < Hotroot> jrajav: Doesn't node's Util lib have it built in?
20:00 < slaskis> anyone recognize this socket.io error? https://gist.github.com/12a83bc4bb7e7a9a3aa3 
20:00 < jrajav> So it does
20:00 < sshaginyan> Is anyone familiar with jsdom?
20:00 < jrajav> Seems kind of redundant
20:00 < zezikaro> jrajav what is redundant?
20:01 < jrajav> Util having isArray
20:01 < sshaginyan> Can I make jsdom.env non blocking?
20:01 < zezikaro> hm
20:01 < Hotroot> I just found out that apparently mongo runs on startup on this PC 0.o
20:01 < Hotroot> I had no idea
20:02 < jrajav> >> Util.isArray([]) == Array.isArray([])
20:02 < purr> jrajav: ReferenceError: Util is not defined
20:02 < jrajav> >> util.isArray([]) == Array.isArray([])
20:02 < purr> jrajav: ReferenceError: util is not defined
20:02 < jrajav> Derp
20:02 < Hotroot> I don't think that works anyway
20:02 < jrajav> >> require('util').isArray([]) == Array.isArray([])
20:02 < purr> jrajav: ReferenceError: require is not defined
20:04 < Hotroot> >> var v1 = {x:1}; var v2 = {x:1}; if (v2 != v2) {console.log("Hmm");}
20:04 < purr> Hotroot: undefined
20:05 < zezikaro> >> console.log("hm"); 1
20:05 < purr> zezikaro: (number) 1; Console: 'hm'
20:05 < zezikaro> cool
20:05 < Hotroot> Why didn't that work?
20:05 < Hotroot> Just did it in dev console and it works fine
20:06 < Hotroot> >> var v1 = {x:1}, v2 = {x:1}; v1 == v2;
20:06 < purr> Hotroot: (boolean) false
20:06 < Hotroot> There we go
20:07 < jrajav> Hotroot: What does that have anything to do with what I was doing?
20:08 < jrajav> Hotroot: Both .isArray methods return a boolean
20:09 < Hotroot> jrajav: Whoops, read that wrong, thought you were trying to compare them
20:14 < Slade-> if i need to do 10 items at startup. whats the best way to do something when they are complete? i know there are a few libs out there
20:15 < lacksme> hey can someone tell me if my javsacript clieint side code is good practice
20:15 < lacksme> please
20:15 < lacksme> if its good code
20:15 < Aria> Not quite the right forum for it, lacksme.
20:16 < lacksme> aria, i cnat get help
20:16 < lacksme> anywhere else
20:16 < Aria> This is node.js, not Stuff In A Browser.
20:16 < lacksme> i know
20:16 < Aria> ##javascript?
20:16 < lacksme> but i think ppl would know
20:16 < lacksme> i cant get in
20:16 < lacksme> aria
20:16 < lacksme> can u look?
20:16 < lacksme> please
20:17 < Aria> Can't get in, eh? Why on earth not?
20:17 < lacksme> someone banned me for asking too many uestions
20:17 < Cyberfit> ...
20:17 < lacksme> which is bullshit
20:17 < Cyberfit> big surprise there :P
20:17 < Aria> Perhaps, then, your style could be improved.
20:17 < lacksme> take a look at the code, please?
20:17 < Hotroot> Haha
20:17 < Aria> Like asking good questions in appropriate forums.
20:17 < lacksme> i tihnk the problem is that computer programmers are very aspie
20:17 < lacksme> they have no social skills
20:18 < lacksme> because who gives a fuck what room u are in
20:18 < lacksme> honestly
20:18 < Hotroot> No wonder you got banned
20:18 < lacksme> ppl are ppl
20:18 < Aria> A portion fit that description.
20:18 < Cyberfit> lacksme: learn from your mistakes man, asking the same question over and over despite being told no is NOT social skills
20:18 < Aria> ... You are perhaps exemplifying.
20:18 < Hotroot> Don't insult the people you are asking for help from
20:18 < lacksme> ur not giving me help so its time to insult ur decision
20:18 < lacksme> its wrong and unfriendly
20:18 < lacksme> it would take u guys two seconds to look at teh code
20:18 < lacksme> and u are experts
20:18 < lacksme> some of the few experts
20:18 < Aria> We're here for node, bud.
20:19 < Hotroot> I was going to until you insulted us all and started talking about "fuk da roomz"
20:19 < Aria> Yeah, me too.
20:19 < Cyberfit> Me three
20:19 < lacksme> really
20:19 < lacksme> please help im sorry
20:19 < lacksme> i am under considerable pressure
20:19 < lacksme> u guys are great for offering to help
20:20 < Hotroot> Just paste the damn link
20:20 < Cyberfit> ^^
20:20 < lacksme> http://jsfiddle.net/TVRh2/5/
20:20 < lacksme> im just wondering if this is a good pattern
20:20 < lacksme> and mvc compliant
20:21 < lacksme> i am using closures for encapsulation
20:21 < Hotroot> " return {   "
20:21 < Hotroot> I have never seen someone return a block before, does that even work?
20:22 < lacksme> yeah dude
20:22 < lacksme> its called closure
20:22 < lacksme> have u heard of closure
20:22 < Cyberfit> works
20:22 < Cyberfit> it's returning an object
20:22 < Cyberfit> in this case a public method
20:22 < Hotroot> Yes, I know what closures are.
20:22 < Hotroot> Ah, I see
20:23 < Cyberfit> he's doing it for private / public I think
20:23 < lacksme> right
20:23 < Hotroot> Interesting way of doing it
20:24 < Cyberfit> I didn't know you could reference a function before initializing it though
20:24 < Hotroot> The hoist rules are weird
20:25 < Hotroot> I prefer defining them first, but to each his own
20:25 < Cyberfit> same here
20:26 < Slade-> closures rock
20:26 < Hotroot> lacksme: Minor nitpick here, you can use === instead of == for this purpose I believe
20:26 < Hotroot> (ajax.readyState==4 && ajax.status==200)
20:26 < lacksme> reference afunction before intializing it?
20:26 < lacksme> where does that happen?
20:26 < Hotroot> The very start
20:26 < Cyberfit> lacksme: regardless of the code, I think you could make it more readable. Right now things are moving around a lot without proper tabbing
20:27 < Hotroot> Cyberfit: I think fiddle makes it wonky
20:27 < lacksme> it is being initalized in the very start
20:27 < lacksme> i mean thats what it is doing
20:27 < Hotroot> Err
20:27 < Cyberfit> you don't need brackets for that?
20:27 < lacksme> brackets?
20:27 < Cyberfit> {}
20:27 < Cyberfit> as in C
20:28 < Cyberfit> i.e.  var controller = controller(){}; 
20:28 < Cyberfit> I didn't know you could do that without the brackets
20:28 < lacksme> why would i need that
20:28 < lacksme> its not an object
20:28 < lacksme> and its not being defined tehre
20:28 < lacksme> there is a fucntion called controller
20:29 < lacksme> i mean is this proper mvc code or what
20:29 < Hotroot> Cyberfit: He's using  var hoisting, again, sort of strange
20:29 < aandy> http://javascriptweblog.wordpress.com/ has a lot of good short writings on how javascript works, including consequences of assigning functions before/after use
20:29 < lacksme> what is var hoisting
20:29 < Cyberfit> I know, I'm just voicing my surprise
20:29 < Cyberfit> Hotroot: Yeah, I'm a bit surprised
20:29 < Hotroot> Your func def gets hoisted to the top, which lets you do controller = controller();
20:29 < Hotroot> Then you can reference that var from anywhere in a sub function
20:30 < niggler> is there a web socket client in node?
20:30 < Hotroot> Anywhere in center I mean
20:30 < niggler> alternatively can socket.io be used as a client in node
20:30 < aandy> lacksme: http://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/ this one in particular
20:30 < lacksme> why does it get hoisted?
20:31 < Hotroot> Yeah, read what aandy linked
20:31 < Hotroot> lacksme: I assume you are a C++ coder, or something similar?
20:31 < lacksme> no
20:31 < Hotroot> Hmm
20:31 < Hotroot> Your code just seems to reflect certain styles
20:32 < Hotroot> I think it mostly looks fine though, aside from using == instead of ===
20:32 < Hotroot> You can always run it through jslint too, for more detailed critique
20:32 < lacksme> i still think
20:32 < lacksme> i dont get the big deal about the hoisting
20:33 < lacksme> ur saying "it brings it to the top"
20:33 < lacksme> it executes the function into a variable
20:33 < lacksme> which in this case is an object
20:33 < aandy> lacksme: i haven't look over all of your code, but a small nitpick: make sure you urlencode the search values you pass to spotify
20:33 < lacksme> ok
20:33 < lacksme> thx
20:34 < Hotroot> lacksme: I mean you are able to do controller = controller(); because controller (the function) gets hoisted
20:34 < Hotroot> It pretend that you defined it beforehand, when really it has to look down for it
20:34 < lacksme> oh
20:34 < lacksme> do u know why that happened?
20:34 < Hotroot> Because you defined it after using it? It isn't really a problem
20:35 < Hotroot> You should read up though on function declaration vs function expressions
20:35 < lacksme> no i know
20:35 < Hotroot> I never assign functions to vars, haven't seen the need yet
20:35 < aandy> it's all explaining in plain english, if you bothered to spend 3 minutes reading something rather than looking for easy answers :)
20:36 < lacksme> i did read what u sent aandy and its too complicated for me to explain without u explaining
20:36 < lacksme> so would u guys consider this to be "good" code?
20:37 < lacksme> maintainable
20:37 < lacksme> following mvc principles
20:37 < mks> no
20:37 < lacksme> performs well
20:37 < lacksme> why not
20:37 < mks> if it was, you were not asking
20:37 < lacksme> ok you idiot
20:38 < mks> thanks
20:38 < lacksme> that is a very logical thing
20:38 < aandy> fine, ignored. sunday's full of trolls it seems
20:38 < lacksme> u need to socialize more
20:38 < lacksme> its violent emotional hurt
20:39 < mks> just explain why that controller() pattern instead of a plain object
20:39 < mks> that is
20:39 < mks> what is returned in the end by the function you call
20:39 < mks> that gets hoisted.
20:39 < mks> do you find that logical?
20:40 < mks> by the way. this has nothing to do with node.js
20:40 < aandy> mks: he was banned from the javascript chan, so he had to come here :)
20:41 < mks> ok.
20:41 < lacksme> because
20:41 < mks> but since i spent 50 second reading the "code" wanted to understand why...
20:41 < lacksme> u need to be consistent
20:41 < lacksme> everything else has private cars
20:41 < lacksme> vars
20:41 < lacksme> that are wrapped in closure
20:41 < lacksme> contorller has no private vars but it shouldnt be a new object
20:42 < lacksme> nothing else in there is
20:42 < lacksme> and also
20:42 < lacksme> theres only gonna be one instance
20:42 < mks> ...
20:42 < mks> doesn't make much sense to me
20:42 < lacksme> i think new basically u want to use that whne there are gonna multle isntances of an object
20:42 < mks> by the way, if you like it that way, it is ok.
20:43 < lacksme> well tell me why its bad
20:43 < mks> ok
20:44 < mks> first of all: do you know what "instance" means?
20:44 < mks> instance of what?
20:44 < mks> you are just calling a function
20:44 < lacksme> right
20:45 < lacksme> its called the module pattern
20:45 < mks> ...
20:45 < lacksme> what im saying is new keyword would be appreciate 
20:45 < lacksme> appropriate
20:45 < lacksme> if i was going to create more than one controller
20:46 < mks> a plain object is appropriate if you need only one "instance" of it.
20:46 < lacksme> so u dont like this calling a function creating closure stuff
20:47 < mks> ...
20:47 < lacksme> ...
20:47 < lacksme> u mean an object literal
20:48 < lacksme> yeah
20:48 < mks> i mean that if you are not using the scope created by the closure
20:48 < lacksme> i mean whats the difference between this and just creating object literals, idk
20:48 < mks> that pattern you used is just confusing.
20:48 < mks> confusing is not maintenable
20:48 < mks> you want to be consistent
20:49 < mks> and that is good
20:49 < mks> so, start wrtiting proper javascript
20:49 < lacksme> how is it confusing, sir?
20:49 < mks> with proper capitalization
20:49 < mks> ok.
20:52 < lacksme> ?
20:52 < mks> you know
20:52 < mks> usually there is a convention
20:52 < lacksme> i mean the returning object
20:52 < lacksme> is a convention
20:52 < mks> constructors shuld be Capitalized
20:52 < lacksme> called the module pattern
20:52 < mks> please stop.
20:52 < lacksme> there is only one constructor, center
20:52 < mks> i know javascript quite well
20:53 < mks> you don't have to say to me what a "module pattern" is.
20:53 < mks> just an advice
20:53 < mks> you asked
20:54 < mks> but looks like you just want to hear "YO!"
20:54 < mks> so ok. your code is the most beautyful piece of code i have ever read.
20:54 < lacksme> ok dude jesus
20:54 < lacksme> im listening to you
20:55 < lacksme> i just want to learn from u how i can make this better
20:55 < lacksme> i am following every piee of advie u give
20:55 < mks> too bad that i'm not here to teaching you anything
20:55 < lacksme> ok
20:55 < lacksme> ur nice
20:55 < mks> but to wait if someone willing to help me with my node.js problem arrives.
20:56 < mks> your problems are related to code structure in general
20:56 < mks> and before that in javascript in general
20:56 < lacksme> what is wrong with my code structure
20:56 < mks> and this one is not the right place
20:56 < lacksme> mks please
20:56 < lacksme> i need to know this
20:56 < lacksme> what did u observe?
20:58 < lacksme> mks plz
21:03 < luyang> Hey is node.js mainly useful for real time web pages?
21:04 < luyang> And the single thread model... sounds like it doesn't utilize multi core systems?
21:07 < Gue______> luyang: it's an eventloop based approach, it doesnt neet threads
21:07 < Gue______> &need
21:07 < Gue______> well, a couple, but not one for every request
21:08 < luyang> Gue______: yeah well I just read online that they recommend you to start a node.js instance per thread and have an application in front o fit which load balances to them to achieve maximum efficiency on a multi core machine
21:08 < luyang> http://stackoverflow.com/questions/2387724/node-js-on-multi-core-machines
21:09 < Gue______> yes, you can do that altough in most apps not really necessary
21:09 < luyang> the weird thing about node.js is that it shares state between requests
21:09 < luyang> Gue______: ok
21:09 < Gue______> other way around, weird that other platforms use a thread per request
21:10 < luyang> it might be a good thing though that it keeps the state... but when it's http server it sounds complicated
21:10 < Gue______> luyang i moved from cs,java, ruby and what nots to node.js after some time its get all awesome and you never want to program something else again
21:11 < Gue______> except for cobol ofcourse
21:11 < luyang> Gue______: I wish I could get the same feeling
21:11 < luyang> node.js feels toyish
21:11 < substack> fact
21:11 < substack> node is like playing with duplos
21:11 < luyang> is there any large corporation that actually uses node.js for their mission critical systems?
21:12 < substack> tiny building blocks that fit together through simple connectors
21:12 < substack> luyang: loads
21:12 < luyang> I've been thinking of using node.js as a back-end to my future android app
21:12 < luyang> substack: yeah? 
21:12 < substack> linkedin, ebay, voxer, yahoo
21:12 < Gue______> zendesk
21:13 < Gue______> you still need to be a good coder to code for node
21:14 < Gue______> it maybe feels toyish because many scriptkiddies no js and move to node.js, but to be good at it, and write pretty, functional code still takes a while
21:15 < luyang> substack: I wonder if node.js is slower than java...
21:15 < Gue______> hmm
21:15 < Gue______> v8 is slower
21:15 < Gue______> so node is slower
21:15 < luyang> Gue______: I love the idea of functional programming... what is the main benefit of that anywayz
21:15 < luyang> Gue______: so say I wanna make an efficient android server backend... on a single machine... then I should code it in Java huh?
21:16 < Gue______> omg no just use node and hack it together
21:17 < luyang> wow
21:17 < Gue______> u need to understand what async means
21:17 < luyang> Gue______: Async is like a thread
21:17 < Gue______> eh 
21:17 < Gue______> no
21:17 < luyang> when the result is back it calls a callback function
21:17 < luyang> that's async
21:18 < Gue______> yeah, well but its just one thread, and the callbacks are done on kernel level
21:18 < Gue______> but the idea is, even if node.js the v8 core is slower, then java bytecode, because everything in node.js is async, its most of the time still faster then java
21:19 < Gue______> when you build an app that talks to databases, webservices etc. you get more cpu utalization.
21:19 < Gue______> but if you do heavy intensive calculations like calculating prime numbers and no other systems involved then java maybe better
21:19 < Gue______> or c for that matter
21:19 < luyang> I could code in Java using num_cores threads to achieve similar concurrency I feel...
21:20 < luyang> mm it's a hard decision
21:20 < Gue______> not the same concept
21:20 < luyang> it'd be fun to start writing app more seriously and host the android server on my mac mini... but that would require super great performing server
21:20 < Gue______> you need to read why threads are  evil
21:20 < luyang> I don't wanna go for a cloud solution
21:21 < Gue______> well, i think this is a good case just to try to build it in node.js
21:22 < Gue______> you can always go back to java if you want
21:33 < luyang> Gue______: thanks for the chat, it's time to sleep
21:36 < niggler> is there any way to catch errors?
21:36 < niggler> in particular, using the redis client, I'm trying to catch if createClient throws an error
21:36 < niggler> but try { redis = require('redis').createClient(); } catch(e) { } doesn't actually catch the error
21:38 < topaxi> niggler: i guess you have to attach an error event handler (redis.on('error', func))? not sure though, don't know the API :)
21:39 < niggler> the issue is that if redis is not running then it throws an error which i can't seem to catch
21:41 < niggler> oh wait nvm it happens asynchronously
21:41 < niggler> so the try/catch is meaningless 
21:43 < necco> you have to listen on the Redis client, client.on('error', function (err) {
21:44 < niggler> but this is happening when I'm creating the client
21:45 < niggler> regardless, that seemed to work
21:45 < topaxi> :D
21:45 < necco> you should be passing in the connection parameters, otherwise it is probably trying to connect to localhost
21:46 < necco> redis.createClient(config.db.port || 6379, config.db.address || 'localhost', config.db.options);
21:46 < niggler> right so i do that
21:46 < niggler> but for some reason i thought the connection happened right when that call is made
21:46 < topaxi> niggler: remember that all your code runs sync
21:46 < Gue______> all your code!
21:47 < necco> it is, inside createClient(): net_client = net.createConnection(port, host);
21:47 < necco> but the connection process is async
21:47 < niggler> so in terms of sequence of events, putting client.on('error',… would happen after createClient is called
21:47 < niggler> so theoretically
21:47 < niggler> if a ton of stuff were to happen in the main process between the createClient and the error handler
21:48 < topaxi> yes, but the connection is made async, so your code runs first
21:48 < niggler> then redis could bomb out before the error handler is assigned
21:48 < topaxi> no it can't
21:48 < topaxi> your code is run before anything else
21:48 < niggler> so lets say my script was
21:49 < niggler> var client = require('redis').createClient(7265);
21:49 < niggler> for(var i = 1; i < 1000000000;++i) console.log(i);
21:49 < niggler> redis.on('error', function(err) { });
21:49 < topaxi> should work fine
21:49 < niggler> id imagine console.log is asynchronous too
21:49 < niggler> unless its raw
21:50 < topaxi> mh i'd say console.log isn't asynchronous
21:51 < necco> I think stdout is synchronous
21:57 < vicapow> I'm trying to write a native module and I'm using the Buffer object. how can i turn an argument into a buffer object and call the Length member?
21:57 < vicapow> Buffer::Length(args[0]) doesn't work
22:01 < vicapow> figured it out: Buffer::Length(args[0]->ToObject())
22:08 < edmellum> Anyone here with node-redis or just general Redis experience?
22:18 <@Nexxy> omg, omg... *the* mikeal?!
22:21 < Hotroot> omg, omg... *the* Nexxy?!
22:21 < mscdex> Nexxy, \o/
22:21 <@Nexxy> totally. \o/
22:23 < mscdex> i wish readmes could write themselves
22:25 < s5fs> i thought the code *was* the documentation
22:25 < gluxon> s5fs: I wish.
22:28 < mscdex> s5fs: maybe for simple projects ;-)
22:33 <@Nexxy> mscdex, excuses!
23:05 < sorensen> less than an hour to go
23:05 < sorensen> woooooo
23:06 < mscdex> sorensen: pizza delivery?
23:08 < sorensen> NKO!
23:08 < sorensen> :D
23:08 < sorensen> and then pizza
23:08 < sorensen> om nom nom nom
23:08 < mscdex> :-)
23:26 < KiNgMaR> what's the name of the node-based program where you dump lots of data (stats) into and it render some nice graphs again? I forgot :(
23:33 < jayohen> hey, i was wondering if there was anyway to read the nodejs documentation from the command line?
23:33 < LouisT> you mean like man pages or the actual docs?
23:34 < jayohen> like man pages
23:34 < jayohen> something similar to rdoc maybe
23:34 < LouisT> hm.. i don't think those have been converted.. they might have been but i've never seen anything like it
23:35 < jayohen> gotcha, thanks
23:35 < jayohen> yeah it would be pretty cool to have this: http://nodejs.org/api/index.html
23:35 < jayohen> on the command line so you could just query a method man page
23:39 < ack006> jayohen: go get'em make a module :-)
23:39 < jayohen> thats what i was planning on :)
23:40 < jayohen> but didnt want to make it only to find out something much better and more standardized was out there
23:41 < ack006> jayohen: ah the joy of node, sometimes you start writing something, and while you're at it s/o publishes a module that does just that ;-)
23:42 < ack006> besides man page for functions, i'd love to see a grunt module which tracks npmjs updates and meeps if something you like comes around.
23:43 < jayohen> point noted! 
23:44 < ack006> jayohen: erhm meant growl not grunt (i've got to lay down the node book and pick up chimpsky) what with all those animal noises :)
23:58 < mscdex> there used to be node man pages
23:58 < owen1> i want to read a regex from a few log files all the time and do something if the string was found. i see all kind of tail-like packages. anyone heard of https://github.com/whitesheep/node-tail-native
--- Log closed Mon Nov 12 00:00:54 2012
