--- Log opened Mon Sep 24 00:00:10 2012
00:30 <@Nexxy> you guys jerrysv is doing some seriously cool stuff 
00:30 <@Nexxy> srsly liek woah
00:30 < jerrysv> Nexxy: awesome, i look forward to see what you are able to pull off with the same awesome hardware
00:31 <@Nexxy> mhmm
00:33 < SomeoneWeird> yea
00:33 < jerrysv> it's always nice to run into Nexxy at your local pub
00:33 < deoxxa> i'd feel bad, i'd probably knock her over :<
00:34 < SomeoneWeird> lold
00:36 <@Nexxy> lol
00:36 <@Nexxy> I am liek 6'
00:37 <@Nexxy> I would knock *you* over!
00:37 < jerrysv> it's true!
00:46 < jerrysv> Nexxy: btw, the sd card on that has gfx and stuff on it, feel free to add more
00:46 <@Nexxy> oooh
00:46 < jerrysv> it's the bailey's set up right now
00:46 <@Nexxy> bi
00:46 <@Nexxy> lol woops
00:46 <@Nexxy> was bitten
00:47 <@Nexxy> nice
00:47 < jerrysv> it also defaults to 115200 baud rate, forgot to tell you - or 9600 without the card in there
00:47 <@Nexxy> yeah you will have to come see it when we are running
00:47 < jerrysv> i will. we were working out bike paths from home (i'd rather not drive anywhere if i can help it)
00:49 <@Nexxy> down vaughn/ st helens
00:49 <@Nexxy> or you can take bus 17 to nw 30th and ride from there
00:50 < jerrysv> yeah, that too. laurie is the major transit rider. i tend to stick to bike and in extreme cases car (like having to go to fry's)
00:51 <@Nexxy> yeah
00:51 <@Nexxy> Ive been there twice in three days lol
00:51 < jerrysv> that's what my weekend was like, trying to get ready for this install
00:51 <@Nexxy> got heat shrinks and a heat gun!
00:52 < jerrysv> i use a hair dryer, i am ashamed
00:52 < Lorentz> congrats
00:52 <@Nexxy> well it looks great
00:52 < jerrysv> thanks!
00:52 < Lorentz> I use either a lighter, or the soldering iron itself
00:52 < jerrysv> i should be speaking at pdxjs, if you want to come listen to a madman talk about plv8 (wednesday)
00:52 <@Nexxy> you guys should do a vlog about it
00:52 <@Nexxy> I has no tixx
00:52 < jerrysv> i'm working on a blog entry - that's part of what i'm doing here
00:53 < jerrysv> pdxjs is free!
00:53 <@Nexxy> ooh
00:53 < jerrysv> it's at appfog, starts at 7pm
00:53 < jerrysv> every month :)
00:53 < jerrysv> next month carter is coming up
00:54 <@Nexxy> twilio carter?
00:55 < deoxxa> Nexxy: i'm 6'5" and like 110kg - i think i have the mass advantage here
00:56 < jerrysv> yes, twilio carter :)
00:56 <@Nexxy> cool!
00:56 <@Nexxy> althougj technically he is coming *down&
00:57 <@Nexxy> :P
00:57 <@Nexxy> stupid android.
00:57 < jerrysv> yeah, whatever
01:17 < hillct> Good evening all. How safe would people say using Mongoose is, relative to implementing the JSON-schema standard http://tools.ietf.org/html/draft-zyp-json-schema-03 myself and building models around it on my own?
01:17 < hillct> I guess I'm trying to gauge how mature it is at this point
01:24 < templaedhel> hillct We use mongoose in production, and it's mature, but quirky
01:25 < templaedhel> Especially when you get into getters and setters
01:25 < hillct> templaedhel: hmm. quirky in what way?
01:26 < hillct> templaedhel: It seems that if I'm going to use it to construct object models, it'd get deeply embedded into my app rather quickly, thus my caution
01:26 < templaedhel> We've found that there is some black magic around some of the edge functionality. Getters and setters, what order they are applied in, etc.
01:26 < templaedhel> It's safe
01:26 < templaedhel> I've used it for every project I use mongo in
01:26 < hillct> hmm. Thanks
01:27 < hillct> I spent some time writing my own document models which seem to work but so somewhat incomplete valuation, so I find myself re-evaluating things
01:27 < davidban_> Is there a way to declare non-npm dependencies in my package.json ?
01:27 < jerrysv> davidban_: yes.
01:28 < hillct> davidban_: sure. You can define git repos, or tarballs directly
01:28 < jerrysv> davidban_: in dependencies - "4dlcd": "git://github.com/JerrySievert/4dlcd.git",
01:28 < jerrysv> etc
01:29 < davidban_> Ahh, sorry, should have been clearer. It's not a commonjs thing I want to require, but a system package. npm install gm requires that graphicsmagick be installed on the system, but doesn't seem to check for it. I want to make it explicit that you need that in order to run the app.
01:30 < hillct> davidban_: nom handles that internally
01:30 < davidban_> hillct: It doesn't seem to in this case. gm will install happily without the package being present on the system.
01:30 < hillct> davidban_: the gm package has a builtd script that executes and checks for it
01:30 < hillct> oh, that is ugly
01:31 < hillct> yeah, I remember experimenting with GM. It did install without certain packages, then limited available image formats
01:31 < hillct> not sure if you can express dependency on specific system files, within package.json
01:31 < totallymike> Has anyone here any experience with writing Windows 8 UI software, specifically networking?
01:32 < davidban_> hillct: Ahh, right. So maybe have a test script that checks for it or something?
01:32 < hillct> somewhere there were complete docs of available keys
01:32 < hillct> yeah, that's likely the way I'd go
01:32 < davidban_> hillct: Cool, thanks for your help.
01:32 < hillct> wish it were more useful
01:33 < davidban_> hillct: No probs. A test script will be fine. All I really want is "Hey, you forgot to install the package you big idiot."
01:34 < hillct> davidban_: you might see about pushing such a test script up to the node-gm package maintainer
01:34 < davidban_> hillct: Will do.
01:35 < deoxxa> davidban_: gyp is good for that
01:36 < davidban_> deoxxa: As far as I can tell gyp only supports building a binary from source, not making use of the system's package manager if present. Is that right?
01:36 < deoxxa> correct
01:37 < deoxxa> but you can add checks for libraries in there
01:37 < deoxxa> libraries/applications
01:37 < davidban_> deoxxa: Oh okay, so don't actually build from source, just use gyp to run a check to see whether it's present then alert/throw if it isn't?
01:37 < deoxxa> yeah, something like that
01:38 < davidban_> Yeah, seems like a neater way to go than a standalone shell script.
01:42 < derpie> is there anyway I can tell where an event is emitted from?
01:43 < davidban_> derpie: Would it not be emitted from the emitter you're listening to?
01:43 < chilts> derpie: from whatever emits the event :)
01:44 < chilts> maybe your question needs to be re-worded or something :)
01:44 < derpie> well im console.loging where im actually emitting it, but that only happens once
01:45 < derpie> in the .on() i also console.log.... that happens 2 times
01:45 < derpie> that make better sense?
01:46 < davidban_> derpie: So the code must be aThing.on('someevent', ... right?
01:46 < davidban_> So the event in that case is being emitted from aThing
01:48 < derpie> im aware of that, and I found it, just wasn't looking in the right spot -_-
01:49 < davidban_> Good to hear it's fixed!
01:53 < nykac> how can i tell npm to user the C++ bson parser from the package.json for use with node-mongodb-native?
01:54 < hillct> templaedhel: It's not clear to me whether Mongoose schemas are consistent with the standard http://json-schema.org/ based on the docsâ€¦ Does mongoose conform to the specification?
01:56 < hillct> nykac: I haven't worked that one out myself. If you find a way, please let me know
02:01 < benDos> substack, you still around?
02:15 < nykac> how can i set an config option in the package.json that applies for the modules it depends on?
02:18 < nykac> i can set one in my ~/.npmrc but i really need to do this in the package.json
02:19 < cody--> is it possible that a socket.io socket is being closed when a tls  connection disconnects
02:19 < cody--> my app opens a socket to the client and the client triggers when to connect to an IRC server via tls
02:19 < cody--> the client can use /quit to disconnect from the irc server, they should be able to connect again but when they click connect nothings emitted to the server... leading me to think the socket to the app server is closed
02:29 < jonathanberi> Does anyone know if there's finally an updated build for Raspberry Pi/ARM?
02:29 < jonathanberi> I keep having to build from source, which is fine, but takes forever
02:30 < nykac> jonathanberi: you could cross compile ...
02:31 < jonathanberi> @nykac sure, but that doesn't really help getting closer to apt-get install...
02:32 < mscdex> jonathanberi: but it's much faster!
02:36 < jonathanberi> @mscdex have you tried crosscompling for ARM?
02:38 < jonathanberi> Ah, @TooTallNate already wrote a blog on it http://n8.io/cross-compiling-nodejs-v0.8
02:39 < mscdex> jonathanberi: yep, i do it for my pandaboard
02:39 < mscdex> jonathanberi: but i've also done it for other arm platforms too
02:41 < runvnc> hello ppppaul
02:49 < runvnc> hello cat4d
02:52 < EhevuTov> mscdex, I think I found the answer to my question about stream processing here: https://github.com/dominictarr/event-stream
02:53 < chovy> EhevuTov: https://github.com/chovy/nodejs-stream
02:54 < EhevuTov> chovy, thanks! I'll study that. Do you understand my issue? I'm wanting to process a stream and pipe it
02:55 < EhevuTov> I know it's going to be simple. I'm just not use to JS and node mindset regarding streams and processing yet
03:05 < tinx> how do you destroy a object and all it's listeners in node?
03:27 < saamyjoon> does the path module expand the tilde '~' for a given file name in unix/linux ?
03:29 < saamyjoon> or is there a module that does?
03:34 < chilts> saamyjoon: usually you have to do that, ie. it's not automatic
03:36 < saamyjoon> yeah. I'm running into a problem where I want some data to persist through npm updates for a cli app and I want a file that I can write to w/out root access and I was relying on ~/fileName.data to be writable
03:36 < saamyjoon> any ideas? I may be going about this in a sloppy way
03:38 < chilts> saamyjoon: npm show tilde-expansion
03:38 < chilts> that might work
03:39 < saamyjoon> yeah, will check it out. Thanks
03:40 < chilts> no worries
03:40 < saamyjoon> i also realized echo '~/file' should do it in exec, but that's sloppy
03:42 < Daegalus> Nexxy: lispyscript, yay or nay? :P
03:43 < mscdex> saamyjoon: maybe you could also just use `process.env.HOME` ?
03:43 < mscdex> process.env.HOME + '/fileName.data'
03:45 < saamyjoon> indeed. thanks
03:46 < chilts> heh, I never realise env.HOME existed :)
03:46 < chilts> makes sense
03:46 < mscdex> it does on *nix :-)
03:46 < chilts> yeah, even though I knew about it in bash or your terminal, I didn't think it'd be in process.env
03:46 < chilts> silly me
03:47 < saamyjoon> yeah
03:47 < chilts> that makes things a lot nicer
03:47 < saamyjoon> makes total sense. much better solution
03:47 < saamyjoon> so it doesn't work on windows I'm assuming, correct?
03:47 < chilts> at the lack of portability ... which you may or may not be worrying about
03:47 < chilts> guess not
03:48 < saamyjoon> yeah. I honestly don't care. If somebody wants it on windows, they can figure that out. It's a pretty niche module anyways
03:49 < chilts> there is also : npm show osenv
03:51 < mscdex> on Windows it's something like HOMEPATH
04:03 < saamyjoon> thanks for the help guys. working great now
04:15 < chilts> saamyjoon: good stuff :)
04:26 < niggler> anyone here?
04:26 < deoxxa> 1) ask question
04:26 < deoxxa> 2) ???
04:27 < deoxxa> 3) profit
04:27 < niggler> excellent
04:28 < niggler> does node us 32 or 64 bit floating point numbers when built for x86_64?
04:28 < deoxxa> it uses doubles, because javascript uses doubles
04:29 < niggler> ieee754 ?
04:31 < MitchW> that'd be a safe assumption, I'm sure there's documentation on javascript and ieee754 somewhere
04:31 < niggler> im sure its written in the standard
04:31 < niggler> is there an official javascript standard?
04:32 < MitchW> ECMA 262
04:32 < jmar777> deoxxa: hold on... doubles?
04:32 < MitchW> http://ecma-international.org/ecma-262/5.1/
04:32 < jmar777> deoxxa: i believe all numbers are 64 bit floats
04:32 < deoxxa> jmar777: otherwise known as a double
04:33 < MitchW> all javascript Number types are "primitive value corresponding to a double-precision 64-bit binary format IEEE 754 value"
04:33 < niggler> 4.3.19
04:34 < jmar777> deoxxa: woah... learned something new
04:34 < deoxxa> \o/
04:34 < deoxxa> learning is awesome
04:35 < jmar777> deoxxa: lol indeed. feeling rather dumbstruck that i didn't know that's what a double was...
04:35 < MitchW> I never understood why they're called half/singles/doubles for 16bit/32bit/64bit
04:35 < niggler> hmm it says that some operations are 32 bit though
04:35 < MitchW> if it refers to machine word sizes, that's a bit of a misnomer on many 64bit/128bit architectures :\
04:36 <@konobi> niggler: if you need something specific there's bigint and bignum libraries available
04:36 < Lorentz> welcome to wonderful world of different computer architectures and describing data!
04:36 < MitchW> I don't think it can be related to machine word size actually
04:36 < MitchW> the term double pre-dates common place 32bit machines
04:37 < MitchW> *confused*
04:38 < niggler> standardization occurred later MitchW 
04:38 < deoxxa> MitchW: a double is a double-width floating point number, where floating point numbers are 32 bit
04:38 < MitchW> deoxxa: that makes more sense :)
04:38 < deoxxa> MitchW: it's integers that are screwy
04:38 < deoxxa> MitchW: byte, short int, long int, long long int
04:39 < deoxxa> 8/16/32/64
04:40 < MitchW> indeed
04:45 < mscdex> don't forget nibble!
04:46 < niggler> fuck nibble
04:46 < niggler> hey mscdex are you still working on ncurses?
04:46 < niggler> *node-ncurses
04:46 < mscdex> niggler: not lately
04:47 < mscdex> i didn't think anyone was actually using it to be honest :-)
04:47 <@konobi> mscdex: other than me =0P
04:47 < niggler> i wish you made a few more features from ncurses more accessible
04:48 < mscdex> niggler: like?
04:48 < niggler> subwin/newwin
04:54 < owen1> can anyone gist nginx.conf for serving two node websites. www.foo.com => 3000, www.bar.com => 4000
04:58 < AAA_awright> owen1: You just create two http entries...
04:58 < AAA_awright> You might want to split them into seperate config files, put it under /etc/nginx/sites/foo.com.conf
04:59 < owen1> AAA_awright: what about a main config file?
04:59 < AAA_awright> Uh, what about a main config file?
04:59 < AAA_awright> You have /etc/nginx/nginx.conf (usually)
04:59 < AAA_awright> Add a second http entry for the other domain name
05:00 < owen1> yeah. but it's a default one. don't i need to tweak it?
05:00 < AAA_awright> http://wiki.nginx.org/ documents most of the configuration options for Nginx, I'd go there
05:01 < NaN> I had installed nodejs for fedora but now I can't install chromium because a v8 version problem, how can I install chromium and use the v8 version that I have?
05:02 < owen1> AAA_awright: ok. i'll read that link. btw, i notice a folder called site-enabled
05:02 < owen1> and inside i see default
05:02 < AAA_awright> Uh, that's probably something distribution-specific
05:02 < owen1> i guess i can put 2 new files there, 1 for each site
05:02 < owen1> debian
05:02 < AAA_awright> I'd nuke it and use a single folder, /etc/nginx/sites
05:03 < AAA_awright> If you want to disable sites just rename the file, e.g. /etc/nginx/sites/example.com/conf-disabled
05:03 < AAA_awright> If you want to disable sites just rename the file, e.g. /etc/nginx/sites/example.com.conf-disabled
05:04 < n2liquid> Hi guys, I have a question: are there plans for node to support newer module specifications such as Modules/1.1 or AMD?
05:05 < substack> n2liquid: the module system is not changing
05:05 < substack> like, ever
05:05 < substack> well maybe in a few years it will be considered
05:05 < substack> but not any time soon
05:05 < n2liquid> @substack: Reason being backwards compatibility, I'm guessing?
05:05 < substack> it's very hot code that every node program ever touches
05:06 < n2liquid> Well, yeah, I understand
05:06 < substack> yes backwards compatibility with the module system is crazy important
05:06 < substack> especially since there are 15k packages on the public npm
05:06 < n2liquid> Just wanted to know
05:06 < n2liquid> Sure
05:06 < substack> if you want to AMD there are some userspace libs to let you do that
05:06 < n2liquid> Does Harmony have enough potential to change things, though?
05:06 < harbhub> hey
05:06 < substack> n2liquid: I hope not
05:06 < substack> at least in its present form
05:07 < harbhub> substack:  i like your modules dnode and shoe
05:07 < substack> harbhub: thanks!
05:07 < EhevuTov> tim_smart, Hi, I'm trying to use your 'node-filter'. Is it still being maintained?
05:07 < substack> harbhub: shoe is barely any code, importantly
05:07 < substack> streams are excellent like that
05:08 < substack> harbhub: if you like dnode+shoe you might like https://github.com/substack/stream-handbook
05:08 < EhevuTov> tim_smart, just asking, cause I'm following your example and I'm not getting the 'write' func to work right
05:08 < owen1> AAA_awright: should i copy the 'load balancing example'? - http://wiki.nginx.org/LoadBalanceExample
05:08 < n2liquid> @substack: I don't want to use AMD or Modules/1.1 or anything in particular, I'm just really trying to get a hang out of them all, and trying to decide upon stuff at least knowing the shortcomings of what I'm doing, etc.
05:09 < EhevuTov> substack, what do you recommend I use for stream filtering? For instance, I want to run a regex on a stream
05:10 <@konobi> depends on the stream i suppose
05:10 < EhevuTov> like process.stdin.pipe(filter(<regex_pattern>).process.stdout
05:10 < EhevuTov> it's a CSV ASCII stream that emits a 'data' on each line
05:10 < substack> EhevuTov: you can write that with es.mapSync from http://github.com/dominictarr/event-stream
05:11 <@konobi> so you want captures only?
05:11 < substack> es.mapSync(function (line) { return /beep/.test(line) })
05:11 < EhevuTov> substack, ah, thanks. I was already using his split!
05:11 < substack> nice
05:12 < EhevuTov> konobi, I'm not sure what you mean, but I think this mapping per line using es might work well for me
05:12 <@konobi> substack: how would you tend to represent a tree of dirs/files as streams
05:12 < n2liquid> @substack: Oh btw, are there still known issues with relative paths in Browserify, in particular with "../"? Have them all been taken care of?
05:13 <@konobi> (say if you only had a single object to represent either a dir or a file)
05:14 < substack> n2liquid: pretty much all of that is fixed
05:14 < substack> unless you're on windows
05:14 < n2liquid> Oh boy, I am...
05:14 < AAA_awright> owen1: How would I know? Is that what you need?
05:14 < substack> n2liquid: some of those bugs are fixed on windows
05:15 < substack> dominec has been sending a steady stream of windows fixes
05:15 < AAA_awright> Though it looks like I should have said, you want additional "server" sections, not http
05:15 < substack> on account of how he's building a windows mobile app using browserify
05:15 < gildean> owen1: you didn't get any of the node based proxys working correctly, or why did you decide on nginx?
05:15 < gildean> iirc this was your home server
05:15 < owen1> i want www.foo.com to go to 3000 and www.bar.com to 4000. i found this - http://wiki.nginx.org/FullExample  but have no idea what to tweak. i just added server entry, listen 3000 but not sure about all the settings there.
05:16 < owen1> gildean: bouncy and my-little-proxy both didn't work for me.
05:16 < substack> owen1: didn't work how?
05:16 < n2liquid> @substack: Well, I'll try sticking to Windows for a while, and I'll move to Linux if that doesn't work out well; thanks anyway! :D
05:16 < gildean> owen1: why not? also, try node-http-proxy, just copy one of the examples and you're good to go
05:16 < owen1> substack: first i have issues with sudo. i can't remember all the details, but i am willing to try both of them again if you guys are curious.
05:17 < substack> bouncy(function (req, bounce) { bounce({ 'foo.com' : 3000, 'bar.com' : 4000 }[(req.headers.host || '').replace(/^www\./,'')]) })
05:17 < owen1> is the problem with nginx is it's complex config? 
05:18 <@konobi> ha... nginx config is simple
05:18 < substack> owen1: are you doing https or something fancy too?
05:18 < owen1> substack: no
05:18 < owen1> simple node sites
05:18 < harbhub> substack:  baudio let's me stream audio!?
05:18 < substack> harbhub: sort of
05:19 < substack> baudio lets you generate a stream of audio with javascript functions
05:19 < substack> a stream that you can pipe to a file or sox to listen to it live
05:20 <@konobi> substack: now you need to add a livecoding feature
05:20 < harbhub> i need something that let's me stream audio files (play), upload audio files to the server, and generate a list of the audio files available for playing/streaming
05:20 <@konobi> over http?
05:20 < harbhub> i can upload using fs
05:20 < harbhub> yep
05:20 < n2liquid> Can two Browserify bundles require() stuff from each other on a single page or are both "sandboxed"?
05:22 <@konobi> harbhub: use http then...
05:22 < harbhub> i am
05:22 < harbhub> but the data format must be off
05:23 < harbhub> i had an mp3 file
05:23 <@konobi> there's nothing specific in node
05:23 < harbhub> and it wouldnt play in jplayer
05:23 < substack> n2liquid: they're both separate bundles
05:23 <@konobi> harbhub: you probably want chunked encoding
05:23 < substack> n2liquid: you should write a thing to let bundles share files
05:23 < harbhub> substack:  browserify... how did you make that work?
05:23 < harbhub> konobi:  not sure how to chunk encode the stream
05:23 < n2liquid> @substack: Gotcha. Still just curious.
05:23 < substack> harbhub: gradual changes over 2 years
05:24 < harbhub> substack:  do you develop for a hobby or a living?
05:24 <@konobi> harbhub: google it! =0)
05:24 < tuhoojabotti> lulz
05:24 < harbhub> i love you guys lol
05:25 < substack> harbhub: yes
05:25 < harbhub> i'm gonna use browserify to use bcrypt to hash something on the client side
05:25 < harbhub> just cuz
05:25 < niggler> lol screw browserify
05:25 < harbhub> niggler:  what do you recommend?
05:25 < niggler> i had to hack my own thing together to solve some issues i had with browserify
05:25 < harbhub> why didnt you commit those changes to the module?
05:25 < substack> niggler: was this before v1.14?
05:26 < substack> that's when I went in and fixed all the path resolution issues
05:26 < niggler> i found out about node, javascript, etc a week ago lol
05:26 < harbhub> niggler:  what language is your strongest?
05:26 < niggler> substack: was it pushed to npm?
05:27 < niggler> harbhub: x86 assembly lol
05:27 < substack> niggler: those issues were fixed like 4 or 5 month ago
05:27 < substack> so if you've just started using it I don't know what problems you could have had
05:27 < niggler> substack: lemme see if i can construct a minimal test case
05:28 < owen1> substack: the first problem i have with bouncy is sudo /home/owen/nvm/v0.8.9/bin/bouncy routes.json 80 => /user/bin/env: node: no such file or directory   which might be an issue with my machine? i installed it with nvm.
05:28 < gildean> owen1: i made a small gist for you, this is basically how is use the node-http-proxy: https://gist.github.com/3774377
05:28 < substack> owen1: just use bouncy programatically
05:28 < gildean> save that and run it with sudo
05:28 < substack> or http-proxy, also programatically
05:28 < substack> it's like a one-liner either way
05:28 < owen1> gildean: wow. thanks!
05:29 < harbhub> niggler:  what is the most epic thing you've ever programmed?
05:29 < owen1> substack: i'll try both
05:29 < tuhoojabotti> I just started my first project that has tests
05:29 < tuhoojabotti> I feel so proud of myself
05:29 < tuhoojabotti> and I feel that vows isn't very good.
05:30 < harbhub> gildean:  does that http-proxy help with load balancing?
05:30 < niggler> lol harbhub i run a low-latency equities trading firm, so the full stack would probably be the most epic thing
05:30 < harbhub> low-latency means what in your context?
05:30 < gildean> harbhub: well, kind of, but it's mainly just for vhost-routing
05:30 < niggler> sub-microsecond end to end processing
05:30 < niggler> but that's not relevant to my interest in node
05:31 < harbhub> niggler:  i'm going to make a program from civil engineering Project Scheduling, Resource Leveling, Cost Estimation
05:31 < niggler> the problem im trying to solve, and maybe you could give some input: excel sucks
05:31 < harbhub> i want to make a monte carlo simulation that analyses cumulative frequency diagrams etc
05:31 < gildean> harbhub: or do you mean the module as a whole? it does provide means for load-balancing yes
05:32 < harbhub> excel sucks
05:32 < harbhub> that is why i want to make my monte carlo simulation
05:32 < harbhub> using javascript
05:32 < niggler> if google spreadsheets were open source i'd just hack on that
05:32 < harbhub> let's make our own lol
05:32 < niggler> harbhub: are you familiar with low discrepancy sequences?
05:32 < niggler> actually that's what im doing harbhub 
05:32 < harbhub> no
05:32 < niggler> they reduce the number of variates you need
05:32 < harbhub> okay
05:32 < harbhub> what i was doing was
05:33 < harbhub> generating a table with X rows and Y columns
05:33 < niggler> assuming a purely random source of variates, you need N^2 points to get error O(1/N)
05:33 < harbhub> as determined by the user
05:33 < harbhub> and each cell was just an input
05:33 < harbhub> so you could type into any/all the cells and the value would be used by the program
05:33 < owen1> i think i can't require global packages. i get "can't find module 'bouncy'"
05:33 < harbhub> i tagged each cell with its row# and column#
05:34 <@konobi> niggler: why aren't you doing C instead?
05:34 < harbhub> i like talking to you niggler, you know things
05:34 < niggler> konobi: i want a fucking website, that's why!
05:34 < harbhub> niggler
05:34 < niggler> harbhub: if you want some math, koksma-hlwaka inequality
05:34 < harbhub> i love math
05:34 <@konobi> niggler: for sub-second trading!?
05:35 < niggler> konobi: 
05:35 < niggler> this is for somethin different
05:35 <@konobi> oh right
05:35 < niggler> i have some reports
05:35 < niggler> and i want to share them with others
05:35 < niggler> but i dont want to use google spreadsheets
05:35 < niggler> (because they are confidential)
05:35 < niggler> and i dont want to pass excel sheets around etc
05:35 < harbhub> niggler
05:35 < niggler> so a simple hosted excel solution is desired
05:35 < harbhub> lets work together
05:35 < harbhub> i want what you want
05:35 < niggler> hehe harbhub 
05:35 < harbhub> i was making a monte carlo simulation program
05:35 <@konobi> ah... i was thinking NYSE Tech level sorta thing... that would have been an interesting nodejs use case
05:36 < gildean> owen1: did you try the proxy i gisted? save it, npm install node-http-proxy and then sudo screen node savedfilename.js
05:36 < harbhub> i can help
05:36 < owen1> anyone using copy-packages ?
05:36 < harbhub> give me twenty minutes
05:36 < owen1> in nvm?
05:36 < harbhub> i will hack something up
05:36 < harbhub> and host it
05:36 < niggler> konobi: can't do it -- about a third of the code is kernel hacking
05:36 < harbhub> brb team, don't go anywhere niggler!
05:36 < niggler> harbhub: i have some basic stuff
05:36 < owen1> gildean: first i am trying bouncy. as soon as i am done with it, i'll try your gist!
05:36 < Lorentz> some kind of RTOS stuff happening there
05:36 <@konobi> niggler: oh i know... i have friends at NYSE Tech
05:37 <@konobi> hell, they change hardware for it
05:37 < niggler> ooh they were in trouble recently
05:37 < owen1> gildean: right now my problem is i can't require a global package. nvm issue, i think.
05:37 <@konobi> like faster NICs, etc.
05:37 < niggler> kernel bypass on the 10g and 40g nics
05:37 < owen1> gildean: i read about copy-packages in nvm but not what it does.
05:37 <@konobi> rocket something, iirc
05:37 < Lorentz> they _make_ hardware for it
05:37 < Lorentz> iirc
05:37 < z0NE> scrim?
05:38 <@konobi> yeah, mostly it's insanely fast TSO
05:38 <@konobi> and related
05:38 < z0NE> free node hes innocent
05:38 < gildean> i always thought it was a she
05:39 < z0NE> its Hermaphrodite
05:39 < hemanth> npm install forever FTW! :)
05:40 < z0NE> invite me to security 
05:40 <@konobi> z0NE: start making sense or be gone
05:41 < z0NE> esta bien.
05:41 < niggler> mscdex: you still here?
05:45 < Axsuul> Do you guys typically put both node.js and rails apps in the same git repo?
05:46 <@konobi> rails? people still use that?
05:46 <@konobi> =0P
05:47 < ljharb> Axsuul: git repos should be small. separate all the repos.
05:47 < niggler> whats rails
05:47 <@konobi> Axsuul: tbh, it really depends on youre development practice
05:48 < ljharb> big repos isn't a good practice, i don't care who you are.
05:49 <@konobi> ljharb: i suppose you're also a proponent of submodules and that kinda bullshit
05:49 < ljharb> well, i do like submodules (and not sure how they're bullshit), but you don't need submodules just because you have separate repos.
05:49 < ljharb> you can also just decide that they'll be siblings in a directory
05:50 <@konobi> i suppose they did improve them around 1.7.4-ish... but anwyays
05:51 < etcetera> what differentiates socket.io websockets from standard stockets?
05:51 < Axsuul> To have it one repo has one benefit, when using vagrant
05:51 < etcetera> trying to utilize .NET TcpClient with socket.io and it's a bit...cumbersome.
05:51 < ljharb> either way, splitting repos is hard, combining them is easy.
05:52 <@konobi> etcetera: socket.io supports more than websockets
05:53  * etcetera tries to convert a Java socket.io client.
05:53 < etcetera> since the C# versions are...lacking.
05:54 <@konobi> c#... poor man
05:56 < gildean> etcetera: socket.io wraps websockets with some readymade functions etc.
05:56 < gildean> with a fallback for older browsers
05:56 < etcetera> konobi: honestly, I'm finding the java implementations convoluted.
05:56 < etcetera> moving on to objective-C.
05:56 < ljharb> it's java, of course it's convoluted.
05:56 <@konobi> etcetera: how about the JS version?
06:00 < etcetera> konobi: har har.
06:00 <@konobi> etcetera: ?
06:00 < etcetera> honestly, the objective-C style is far more similar to C# than js is.
06:00 < niggler> how's xpath support in js?
06:01 < etcetera> implementation style*
06:01 < etcetera> not language style*
06:01 <@konobi> sure... but it's concise enough to translate
06:01 <@konobi> but yeah... java has way to many abstractabstractfactoryfactoryabstracts to deal with
06:01 < etcetera> not nearly, look at the dependencies.
06:02 < etcetera> https://github.com/pkyeck/socket.IO-objc/blob/master/SocketIO.m
06:02 < mdedetrich> what is the common way to debugging in node
06:02 < mdedetrich> I have an issue where the session is never saving and I have tried everything
06:02 < mdedetrich> so want to debug the issue
06:02 <@konobi> etcetera: websockets, or everything that socket.io does?
06:03 < etcetera> konobi: I don't know the scope of work required to be feature complete for the JS version.
06:03 < etcetera> but that objective-C impl looks like a good proxy for what I want to accomplish.
06:03 < substack> so many features
06:03 <@konobi> mdedetrich: webkit-devtools-agent is pretty awesome
06:03 < EhevuTov> how is one able to 'star' an npm package in npmjs.org?
06:03 < mdedetrich> @konobi: this is server side stuff
06:03 <@konobi> etcetera: you know there's a socktio channel?
06:03 < mdedetrich> @konobi: not browser
06:03 <@konobi> mdedetrich: your point?
06:03 < etcetera> konobi: no, I did not. thanks :-)
06:03 < mdedetrich> @konobi: oh ok, didn't know that also worked
06:03 < mdedetrich> thanks
06:04 <@konobi> it's v8 dude
06:05 < mdedetrich> I thought webkit implied browser
06:05 < mdedetrich> I know node.js runs off v8
06:05 <@konobi> nope... just the same tooling... it can do browser or node
06:07 < mdedetrich> konobi: how do you install a package globally again?
06:07 < terinjokes> reversing protocols suck
06:07 < niggler> -g
06:07 < purr> niggler: No search results found.
06:08 < mdedetrich> niggler: and what do you use with require.js to pick up the package
06:08 < mdedetrich> *i mean require
06:08 < mdedetrich> require('webkit-devtools-agent') not working when package is installed globally
06:09 < niggler> i dont know how requirejs works but i imagine it doesnt pick up global modules
06:09 <@konobi> add it to your package.json
06:10 <@konobi> then `npm install .`, that'll make it available from node_modules
06:10 < mdedetrich> Â¡oh you have to add it to package.json
06:10 < substack> requirejs isn't made to install modules directly off of npm using ast traversal, it uses manifest files
06:15 < owen1> gildean: works! thanks. how to make it also work for www.  can i use *foo.com ?
06:17 <@konobi> owen1: you can have foo.com or *.foo.com
06:17 < owen1> konobi: so *.foo.com will catch foo.com and www.foo.com ?
06:17 <@konobi> no
06:18 <@konobi> you can have one or the other or both
06:18 < owen1> konobi: oh. so i can have 4 entries - 2 for each site 
06:19 <@konobi> yar
06:20 < mdedetrich> @konobi: I seem to be getting Runtime.releaseObjectGroup is not implemented errors
06:20 < mdedetrich> @konobi: when running webkit-devtools-agent
06:21 < owen1> konobi: also, from some reason, when i am home, i can't ssh to my home server with it's public ip. only with the private ip. any clue why? is it some configuration on my router?
06:21 < NaN> I had installed nodejs for fedora but now I can't install chromium because a v8 version problem, how can I install chromium and use the v8 version of node?
06:21 < gildean> owen1: yeah, that means you don't have nat reflection from inside your network
06:22 < gildean> it's quite common for home routers not to have nat reflection
06:25 < gildean> owen1: the solution is to enable nat reflection(if possible) or to use names and set up split dns
06:25 < owen1> gildean: it's a bit annoying. i had to go outside now and connect to an outside wireless network so can test http-proxy. since foo.com and bar.com, my domains, are only accesable from the outside. in my house, i have to use the private ip.
06:25 < mdedetrich> man ffs
06:25 < hemanth> any light weight JSON DB suggestion, anyone?
06:25 <@konobi> owen1: NAT loopback
06:27 < gildean> owen1: set up split dns for your home network so you don't have to mess with natting (reflecting nat has some drawbacks)
06:27 <@konobi> nat loopback is easy enough to fix
06:27 < owen1> guys. i am doing googling for all those terms..
06:27 < gildean> konobi: that depends on the router
06:28 <@konobi> gildean: sure... doesn't mean it's not an easy enough fix
06:29 < owen1> motorola nvg510
06:29 < AustinYun> a
06:30 <@konobi> owen1: http://imbuzu.wordpress.com/2011/12/28/having-problems-with-wifi/
06:32 < gildean> owen1: as konobis link says it seems split dns is the way to go with that router
06:33 <@konobi> or use wwdrt/tomato
06:33 < gildean> for a lazy mans solution: add the hostnames and local addresses in your hosts-file
06:33 <@konobi> that's also good
06:34 < owen1> gildean: hosts file sounds easy. let me think..
06:34 < gildean> it is easy
06:34 <@konobi> not doable for wildcards though
06:34 < gildean> not particulary good
06:34 < gildean> but should work in your situation
06:35 <@Nexxy> Daegalus, lol
06:36 <@konobi> Nexxy: did isaacs get us sorted on the chanserv front?
06:36 <@Nexxy> konobi, I've had no chance to talk to him yet ;x
06:37 -!- mode/#Node.js [+b LIST!*@*] by konobi
06:37 <@Nexxy> rofl
06:37 -!- mode/#Node.js [-b LIST!*@*] by konobi
06:37 <@konobi> oh bah... nm
06:42 < owen1> gildean: <private ip>    www.foo.com              but i still can't access it
06:42 < owen1> (http-proxy is still running)
06:43 < gildean> owen1: does it resolve?
06:43 < gildean> to the local address that is
06:43 < owen1> gildean: i don't understand what u mean
06:44 < owen1> by resolve
06:44 < gildean> owen1: try ping www.foo.com
06:44 < owen1> i can access my sites with <internal ip>:3000 and :4000
06:44 < gildean> what does it say the address is
06:44 < owen1> 192.168.1.66
06:44 < gildean> ok, so press ctrl+f5 in your browser
06:45 < owen1> that's my server's internal ip
06:45 < gildean> yeah, it means the hosts-file is correct
06:45 < gildean> and the name is resolved to the local address
06:46 < gildean> but your browser is prolly caching the address
06:46 < owen1> gildean: i just tried with FF, doesn't go anywhere
06:47 < gildean> owen1: what os?
06:47 < owen1> debian
06:47 < owen1> 'the universal os'
06:47 < gildean> what does your /etc/nsswitch.conf say?
06:47 < owen1> ad-free
06:48 < gildean> the order should have hosts as the first item
06:48 < gildean> but that should be correct as the name is resolved
06:50 < owen1> http://pastebin.com/k6GF2wne
06:51 < gildean> yeah, that looks correct
06:52 < gildean> i'm not sure why your browser isn't going to the right address if it's obviously being resolved by the hosts-file
06:52 < owen1> let me try to remove the www
06:53 < owen1> didn't help
06:53 <@Nexxy> please don't remove the internet
06:53 <@Nexxy> we need it
06:54 < owen1> only the www i think the guy that created the http:// said it was a stupid idea.
06:54 < owen1> tim maybe?
06:54 < ootje> erm.. is there no "tell" or "seek" in the 'fs' module? stuff like read() can "read from the current position" if you don't pass a position argument, but how can you tell where it is positioned? :p
07:10 < hemanth> i'm on shared hosting, with node in it, unable to install sqllite modules...any suggestions ?
07:10 < terinjokes> is there a good way to easily create binary buffers?
07:10 < terinjokes> hemanth: go somewhere else?
07:10 < hemanth> terinjokes, heh heh :\
07:12 < hemanth> terinjokes, will try out nstore...
07:13 < mscdex> niggler: kind of
07:14 < mscdex> terinjokes: Buffer?
07:15 < terinjokes> mscdex: a Buffer containing binary (non-string) data
07:16 < mscdex> terinjokes: yeah, that's what Buffer is for
07:16 < terinjokes> mscdex: data to be sent as a response to an HTTP request
07:16 < mscdex> terinjokes: yep
07:17 < terinjokes> i've been hardcoding for testing (new Buffer("0048656C6C6F", "hex")) but I'll really need to generate responses on the fly
07:18 < mrmowgli> whoa, busy room! 
07:18 < mscdex> terinjokes: and you can do that with Buffers :-)
07:19 < terinjokes> mscdex: right, except I'm asking for a good way of doing that
07:19 < mscdex> terinjokes: depends on where your binary data is coming from
07:20 < terinjokes> there's a protocol I'm implementing, there's a basic format for responses
07:20 < terinjokes> but it's not like the data is coming from the disk or anything
07:21 < mscdex> terinjokes: well, you can write strings, integers, floats, and doubles to a Buffer at whatever offset you want
07:21 < mscdex> if that helps any
07:21 < vkm> Any good blog module for node.js I am using blogit (https://github.com/dshaw/blogit) which is simple and good. I am looking for alternatives.
07:23 < terinjokes> so, in the above, I could create a buffer with room for 6 bytes, write hex 00 for offset 0, and then the string "hello" at offset 1?
07:24 < mrmowgli> Anyone happen to know what causes stylus to compile a style sheet?  hitting a missing .css file where a .styl file exists?
07:25 <@konobi> terinjokes: ctype
07:25 < terinjokes> konobi: excuse me?
07:26 <@konobi> terinjokes: npm ctype library
07:26 < mscdex> terinjokes: yep
07:26 < terinjokes> node-ctype?
07:28 < mscdex> terinjokes: http://nodejs.org/docs/v0.8.9/api/buffer.html
07:29 < terinjokes> mscdex, konobi: reading both docs
07:32 < [AD]Turbo> hi there
07:34 < terinjokes> konobi: ctypes does look like what I want, assuming the output of writeData
07:34 < terinjokes> is what i expect it is
07:39 <@konobi> terinjokes: should be... if not, bug rmustacc... i can chase on my end too
07:40 < terinjokes> konobi: the docs aren't clear on how I should handle setting values on typedef fields in a struct
07:44 <@konobi> terinjokes: check the examples/tests
07:50 < EhevuTov> can anyone confirm if csv2json is broken or not? It's not working for me even in the simple example
07:51 <@Nexxy> did you try turning it off and back on again?
07:51 < EhevuTov> ha, yep
07:51 < terinjokes> konobi: seems obvious (for now): { point: { type: 'point_t', value: [ 23, 42 ] } }
07:51 <@Nexxy> EhevuTov, try blowing on the cartridge
07:51 < EhevuTov> it's telling me parseRow is undefined
07:51 < EhevuTov> LOL
07:54 < terinjokes> konobi: don't see any examples or tests where they're writing to an array of points (though docs seems to suggest this is possible)
07:54 < terinjokes> i'll play around with it
07:58 < ashnur> morning
08:02 < adrianlang> ff
08:02 < adrianlang> sorry, wrong channel
08:19 < ProLoser|Mac> anyone know a client-side lib i can use for live syncing across browsers?
08:23 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
10:49 < Damien__> good morning
10:50 < Damien__> So i had an installing question, i've tried different ways of installing node but it wont run any of my scripts. it just returns ...
10:53 < rounce^work> eh?
10:54 < rounce^work> pastebin a script example?
10:58 < Damien__> ok gimme a sec
10:59 < Damien__> its just a simple : console.log('Hello world');
10:59 < Damien__> if i input it directly into node its no problem. But the moment i want to call any .js file with node it will just return 3 dots
10:59 < Damien__> even node --version wont return anything else then 3 dots
10:59 < hemanth> js key value store module suggestion, anyone?
10:59 < aandy> Damien__: you're in the node interactive console, aren't you?
11:00 < aandy> means unfinished statement
11:00 < Damien__> I believe I am yes..i just started trying it out and ive been bullying myself for 2 days now to get it work on my own :). 
11:01 < aandy> no problem. when you start going over 5 lines, you should consider writing to a .js file, and run with # node my.js
11:01 < Damien__> thats exactly what i did XD
11:01 < Damien__> thats the problem
11:01 < Damien__> the direct input it no problem it returns it. But now i want to use a .js file and i try to call it but it wont return anything else then ...
11:01 < Damien__> even the check for the version wont return any data
11:02 < aandy> and you're running node from the shell (not the node interactive shell)?
11:02 < Damien__> uhmm...i have no idea what the difference is yet :(
11:03 < Damien__> when im in the terminal and i activate node , is that the interactive shell? I presume , atleast.
11:03 < aandy> sorry, i mean. normally you have some promt, where you do commands like list dir, change dir, whatever. and then there's node's shell, which is launched if you run node without any arguments
11:03 < aandy> yes
11:03 < jarr0dsz> hi everyone im try to replace my ajax .load with sockets.io and node.js but have some hard time getting the relevant info from all the docs
11:03 < aandy> if you do just "node(.exe?)"
11:03 < aandy> Damien__: which platform are you on?
11:04 < jarr0dsz> what would be needed a simple sockets.io server implementation + some client.js to reload ?
11:04 < Damien__> if i do node in the terminal it just activates it no problem 
11:04 < Damien__> mac osx
11:04 < aandy> ok
11:04 < Damien__> I tried looking for the 3 dot return on google but no-one seems to have had the problem or just doesnt want to talk about it haha 
11:06 < Damien__> is there a specific area I should save my files to perhaps? First i was thinking that that might be the problem
11:06 < aandy> can you try to open a new window in terminal, do a short example of what you do, and when it replies "..." to version, then copy/paste the entire window to pastebin?
11:06 < Damien__> yeah sure
11:07 < aandy> depends how you supply the script. # node myfile.js, will look in your current working dir (homedir for instance), # node /some/absolute/path.js or # node relative/path.js will look similarly to how you "cd" or navigate
11:08 < Damien__> http://pastebin.com/2YQRFyLm
11:09 < aandy> ah, yes. okay
11:09 < Damien__> now im expecting i just made a silly mistake haha :D
11:09 < aandy> you don't have to enter the interactive shell (line 25) to use node to execute scripts
11:10 < aandy> just type it like you did on line 26
11:10 < Damien__> oooh ok let me try it :D
11:10 < aandy> ctrl+c twice will exit the interactive node
11:11 < Damien__> thank you so much haha :') see i knew it was a silly mistake or something XD
11:12 < aandy> hehe no problem
11:12 < Damien__> So the interactive shell is for direct input. And just in the terminal you can run the scripts without activating the interactive shell :D!!!
11:12 < aandy> correct
11:13 < Damien__> Thanks alot again, now i can start working on my research project for school :D
11:13 < aandy> :)
11:13 < Damien__> have a nice day and goodbye :)
11:20 < Bonuspunk> i downloaded http://nodejs.org/dist/v0.6.21/node.exe and node -v says v0.6.21-pre
11:22 < SomeoneWeird> y u use old node bonuspunk
11:22 < Bonuspunk> which leads to a problem, if i try to install node-sqlserver because of gyp
11:23 < Bonuspunk> got a issue with 0.8 want to check if it is present with 0.6
11:23 < Nuck> Try 0.6.20?
11:24 < Bonuspunk> that was also my solution, but i was thinking i should tell somebody so it can be fixed
11:24 < Bonuspunk> so who should i highlight? :)
11:25 < aderuwe> hi, wondering what's the best way to debug a leaky node app? (i'm sure it's my code ;)
11:38 < rvagg> Bonuspunk: you could file an issue on github, that might be appreciated, https://github.com/joyent/node
11:38 < Bonuspunk> k
11:38 < strk> semver.lt('2', '2.1.0') is false... would you expect that ?
11:43 < jarr0dsz> hi, having a basic node.js example up and running but anyone can help me in right direction to replace the contents of a div?
11:44 < jarr0dsz> i have this jquery ajax load that checks /data every second how would one implement this in node.js with sockets.io?
11:44 < jarr0dsz> bascially /data is the route to a rails app that return a list of timestamps
11:52 < aandy> strk: yes, because '2' is not a valid semver
11:52 < aandy> > semver.valid('2') => null
11:53 < jarr0dsz> ah great finally.. found a good writeup http://www.gianlucaguarini.com/blog/nodejs-and-a-simple-push-notification-server/
11:53 < jarr0dsz> this stuff is amazing, node.js is the best thing i came across this year webdev related!
11:54 < noxoc> "node.js is the best thing i came across this year webdev related!" I second that! 
11:54 < aandy> jarr0dsz: btw, I would recommend you use document.createDocumentFragment when replacing. faster and better memory wise
11:54 < Bonuspunk> i never really got the point why ppl use websockets when server side events (EventSource) is all they need
11:55 < aandy> noxoc: read that as webdav related :( 
11:55 < jarr0dsz> aandy: thx i have to look into that and how it relates to the article zero newbie here ;p
11:55 < noxoc> but I'd weirdly say it's the "new JavaScript" in general 
11:55 <@Nexxy> javascript is still javascript
11:55 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:55 < jarr0dsz> argh damn.. the codes from that example do not work ;,
11:55 < noxoc> yupâ€¦ but since nodejs it has a new feel attached to it imho 
11:56 < aandy> jarr0dsz: basically you just create a documentFragment, then you add your content from /data to it, and yourdiv.replaceChild(yourdocfragment, old_content)
11:56 <@Nexxy> noxoc, a fresh feeling?
11:56 < noxoc> being able to write js on the server side and client side is a whole new experience
11:56 < aandy> Nexxy: even coffeescript!? ;)
11:56 <@Nexxy> aandy, don't start!
11:56 < jarr0dsz> I had to fix an issue where page reloads would break my faye implementation
11:56 < aandy> hehe
11:56 < jarr0dsz> i have some webapp that works with timers, and a background process executed faye commands to client listening channel but on reload of client at same time faye data was send it would break
11:57 < jarr0dsz> so now i have a queue in the html page of the client with some countdown timers that execute certain actions, now sure if i could optimize this more with node even
11:57 < jarr0dsz> the idea is there is a /app/queue that generates output with timers this injects inside the client page, any thoughts if i could maybe improve it more with node / sockets.io?
11:59 < aandy> jarr0dsz: i haven't used faye, but that's also aimed to be used in node. the example off of the frontpage can be 1:1 to sockets.io
11:59 < aandy> you would still have the same underlying problem: how to handle refreshes
12:00 < jarr0dsz> yes this was a big problem i think i have it solid now.. more or less
12:00 < jarr0dsz> on every page reload + constant each sec it loads this /queue action that injects some timers in the client html
12:00 < aandy> not sure of your page layout, but a mix of localstorage cache (for the previously received messages, if they're not stored in the .html response), and sessions (to keep the "same" connection to the same user)
12:00 < aandy> i had a similar problem once, where, if the app was open in two taps, the user would be spammed in both, hehe
12:01 < jarr0dsz> yes i prevent users to login 2x
12:01 < sinclair> i wish i had 4 monitors
12:01 < jarr0dsz> im trying to get that example from above to work but it seems to not work anymore :( the video demo does though
12:02 < jarr0dsz> http://www.gianlucaguarini.com/blog/nodejs-and-a-simple-push-notification-server/ from feb 2012  copied exact same code like there and did all instructions
12:02 < jarr0dsz> any of you guru's know if there some issues perhaps things changed in node last months ?
12:03 < deoxxa> wow, all that code is backwards
12:03 < aandy> check out the examples on http://socket.io/ in a nutshell, you have two parts of logic: first, the incoming/disconnect (where you might want to add your "don't login twice, don't break for refresh", then the ongoing emitting to "listeners" (subscribers)
12:07 < jarr0dsz> aandy: it does sees the changes debug - websocket writing 5:::{"name":"notification","args":[{"test":{"sample":["Hell"]},"time":"2012-09-24T12:06:02.403Z"}]}
12:07 < jarr0dsz> it only doesent update the client.html
12:08 < aandy> jarr0dsz: do you receive it in the client? if you're on Chrome, you can use the network tool to inspect the websocket frames
12:08 < jarr0dsz> aandy: not sure i have firebug don't think its recieved in the client text is not updating
12:09 < jarr0dsz> in firebug, network there is just 1 request and if i change file no more requests appear so don't think so
12:10 < aandy> try adding some debug info like socket.on('notification', function (data) { console.log(data); ... rest of it }
12:12 < noxoc> Does anyone know how well SocketsIO (or similar) performs with 1 server and roughly 200 clients? 
12:13 < aandy> noxoc: I was about to ask the same. wondering what the best practices are on many connections
12:16 < aandy> noxoc: perhabs http://stackoverflow.com/questions/8779492/websocket-scalability-broadcasting-concerns is relevant for you
12:16  * djazz is making a simple webserver with cache control, gzip/deflate support and directory listings http://djazz.mine.nu:7000/
12:18 < noxoc> aandy: thanks! looks highly relevant at first glance
12:20 < jarr0dsz> very cool, i can't even get basic example to work hehe ;p
12:20 < aandy> a crude estimate would be <your outgoing inet speed>/avg_websocketframe = max users (but that might very well be way above your max simultanious connections on your OS)
12:21 < aandy> jarr0dsz: can you try the (very) basic example from the frontpage of sockets.io?
12:21 < aandy> i think perhabs your client doesn't connect, but not sure
12:21 < jarr0dsz> aandy: yes that works i tried before, i shall try again
12:22 < noxoc> Well this is very very early in the projectâ€¦ but we were just asked a few minutes ago if there i a way to manage "high" ( up to 200 clients, but slowly increasing) concurrency and offer realtime updates. 
12:23 < noxoc> Reallyâ€¦ that question sounds like a perfect use case for nodejs :D 
12:23 < aandy> noxoc: i'm not the guy to answer that question, but there are services (think mirrors) where your app just publishes to that, and the mirrors handle the outgoing traffic
12:24 < substack> noxoc: it varies a ton how much data and how frequently you send messages to and from the clients
12:25 < sinclair> geez, .net is just getting more and more amazing,
12:25 < noxoc> aandy: ops. didn't mean to ask a question. I rather wanted to express my excitement about the clients question asking for nodejs as a quite obvious solution
12:25 < noxoc> substack: the amount and frequency is rather low
12:25 < sinclair> the MICROSOFT .NET asynchronous programming model is just tops
12:26 < substack> noxoc: you should be good up into the thousands with infrequent small updates then
12:26 < aandy> noxoc: damn, because I'd love to hear the answer ;) but yes, node is an obvious use case for that kind of IO heavy apps
12:26 < firedfox> i think 200 clients is ok. nodejs handles large set of connections very well. it mainly depends on how much data you broadcast at once.
12:26 < jarr0dsz> aandy: the normal examples seem to work fine im on osx with latest firefox client
12:26 < sinclair> i know this is a little off the topic of nodejs, but its nice to see a just as applicable technology
12:26 < sinclair> its a shame .NET is ignored in node circles, i really think some here would enjoy it
12:27 < noxoc> the amount of data that is send to ~4 clients at the same time is much less than what a tweet contains.
12:27 < aandy> sinclair: ignore how? node is highly supported on azure, but i don't know if it's integrated into visual studio or .NET 
12:27 < sinclair> aandy: let me check 2012 :)
12:28 < aandy> jarr0dsz: then i'd expand from that example instead :) 
12:28 < noxoc> if the client aggrees it seems like javascript will be my primary language for the next (at least) 2 years \o/ 
12:28 < sinclair> aandy: there don't appear to be any nodejs templates in NuGet
12:29 < aandy> noxoc: nice, glad for you :)
12:29 < aandy> sinclair: ok, it's just as an instance then
12:29 < aandy> but since you can run node on windows, you could integrate it with powershell
12:29 < sinclair> aandy: VS does allow you to configure build options to run node tho
12:29 < noxoc> I get confused these days when people speak of .net and have to think twice whever they talk about #appnet or .NET. 
12:29 < noxoc> aandy: thanks :) 
12:29 < sinclair> aandy: http://i.stack.imgur.com/aFyWV.jpg <-- see here
12:30 < aandy> hehe
12:30 < sinclair> anyway, the way i see it, nodejs doesn't really do anything .NET doesn't
12:31 < sinclair> but both are the only "viable" options for the realtime web thing, (ignoring rails)
12:31 < aandy> sinclair: https://github.com/WindowsAzure/azure-sdk-tools and http://dailyjs.com/2012/06/21/windows-and-node-6/
12:31 < deoxxa> sinclair: does .net have an awesome module system?
12:31 < sinclair> deoxxa: it has assemblies
12:31 < deoxxa> soooo
12:31 < substack> can .net do concurrent versioning?
12:31 < deoxxa> that's a... no?
12:31 < sinclair> define module system
12:32 < sinclair> npm?
12:32 < sinclair> deoxxa: ?
12:32 < deoxxa> no, modules
12:32 < substack> does .net have a package manager and package repository that anybody can publish to?
12:32 < deoxxa> as in require("name-of-module")
12:32 < sinclair> substack: yes, its call NuGet
12:33 < sinclair> deoxxa: .NET has that
12:33 < substack> sinclair: good to hear
12:33 < deoxxa> with the same (or equivalent) semantics?
12:33 < substack> deoxxa: compiled languages always fuck up the module system from what I've seen
12:33 < sinclair> deoxxa: its a bit more work, but entirely possible. plus, loaded modules (assemblies) can be loaded into sandboxed app domains
12:34 < deoxxa> sinclair: that's still sounding a lot like "no"
12:34 < sinclair> deoxxa: furthermore, if you follow well defined patterns (like IoC "Inversion of Control") then you get really nice dependency injection
12:34 < deoxxa> sinclair: so that's the thing node does that .net doesn't
12:35 < sinclair> deoxxa: it does do it tho
12:35 < substack> sinclair: javascript programmers don't use that term
12:35 < substack> they just call it "programming"
12:35 < deoxxa> ^^ this
12:35 < sinclair> substack: hackery?
12:36 < sinclair> substack: professional programming is a good thing
12:36 < sinclair> anyway, its not the topic
12:36 < substack> giving a name to every damned thing is an anti-pattern
12:36 < substack> especially when it's crazy obvious in a language with non-ceremonious closures
12:37 < sinclair> deoxxa: .net handles assembly loading, C# parsing, and can bind JS, Python, and just about any other scripting language 
12:38 < sinclair> deoxxa: require isn't offering anything other than that
12:38 < deoxxa> sinclair: and that's why it's awesome
12:38 < sinclair> deoxxa: but sandboxing is a nice feature
12:39 < sinclair> deoxxa: if you don't want script "X" accessing certain resources "network, disk, etc" you can't limit JS's ability to these resources
12:39 < sinclair> deoxxa: this is SUPER important when you step outside of require, and into dynamic scripting 
12:39 < deoxxa> sinclair: sure you can
12:39 < sinclair> deoxxa: really?
12:39 < substack> vm.runInNewContext() lets you do that
12:39 < sinclair> oh really?
12:39 < deoxxa> ^^ this
12:40 < substack> vm.runInNewContext(src, context)
12:40 < sinclair> ok ok, that's really nice, i am corrected
12:40 < substack> I mostly only use that stuff in tests and source transform hackery
12:40 < sinclair> i really like node you know (although it might not sound like it)
12:40 < deoxxa> sinclair: my point where i said "that's why it's awesome" is that require has -incredibly- simple semantics, as opposed to a zillion different edge cases
12:41 < sinclair> deoxxa: that's a double edged sword in most scenarios
12:41 < deoxxa> sinclair: you can explain require() in less than a paragraph, but explaining domains and sandboxes and assemblies etc could fill a whole book
12:41 < sinclair> deoxxa: simplicity often kills flexibility 
12:41 < deoxxa> hm, i've found it to be exactly the opposite
12:41 < substack> sinclair: if you need a more complicated thing you can use a module that does exactly what you need and not other things mildly related
12:42 < substack> http://www.faqs.org/docs/artu/ch01s06.html#id2877917
12:42 < sinclair> deoxxa: what do you think of C# nowadays?
12:42 < sinclair> deoxxa: honest opinion
12:44 < deoxxa> sinclair: haven't used it for a long time. the core language itself is nice enough and the CLR is a decent runtime, but the ecosystem around it (in general) is really really bad
12:44 < sinclair> deoxxa: when did you last check the eco system?
12:45 < deoxxa> probably like 2008
12:45 < sinclair> deoxxa: its a LOT better now, i agree, it was crap back in 08
12:45 < sinclair> deoxxa: especially looking for ASP.NET resources
12:45 < deoxxa> by "bad" i mean "enterprise-driven"
12:45 < sinclair> deoxxa: enterprise is generally bad regardless
12:46 < deoxxa> all of my experiences with C# have involved ServiceFactorySingletonContainerLoader.cs etc
12:47 < sinclair> hmm
12:47 < sinclair> deoxxa: as a language, C# has really picked up
12:47 < sinclair> deoxxa: its always been best in class, but has evolved really gracefully
12:47 < sinclair> deoxxa: mind you, im still a bit 'err' about the async/await/Task<> stuff
12:48 < sinclair> deoxxa: especially as it was deemed a flagship language feature
12:49 < sinclair> anyway, .NET does a lot nodejs doesn't (due to its age), i guess at the end of the day, i just need a really really good reason to use nodejs. 
12:49 < sinclair> something nodejs would do better than .net
12:50 < deoxxa> i find it's better at being fun
12:50 < sinclair> deoxxa: is that it?
12:50 < deoxxa> you'd be surprised at how important that is
12:50 < deoxxa> happy programmer -> productive programmer
12:51 < sinclair> deoxxa: yeah, i think node is fun too, but to warrant it as a commercial development platform, fun and commercially viable are not mutually inclusive
12:51 < aandy> noxoc: http://stackoverflow.com/a/4737648/1241785 if you need an argument for scaling :)
12:51 < substack> fun technologies tend to really get out of your way
12:51 < aandy> there's also a pure node alternative for that if you can't use HA
12:52 < sinclair> HA?
12:52 < aandy> HAproxy
12:52 < substack> enterprisey software is usually bad at getting in your way with details that you don't want to need to care about
12:52 < substack> because somebody somewhere needed it to behave exactly such
12:52 < sinclair> substack: yes, ive had awful experiances with enterprise software
12:52 < substack> for businessy reasons
12:53 < substack> and now everybody ever is along for the ride, forever
12:54 < substack> lots of stakeholders
12:54 < noxoc> aandy: thanks again! :D 
12:54 < aandy> noxoc: which is https://github.com/nodejitsu/node-http-proxy
12:54 < substack> who all want something different
12:54 < aandy> i actually use that on top of nginx in a setup :D
12:54 < sinclair> node vs rails? thoughts there?
12:54 < sinclair> ive never been a rails developer
12:54 < substack> sinclair: category error
12:54 < noxoc> sinclair: not comparable 
12:54 < sinclair> ok
12:54 < substack> node vs event machine, more like
12:54 < sinclair> right
12:54 < deoxxa> pancakes vs node
12:54 < deoxxa> go
12:55 < aandy> haha
12:55 < substack> Syrup. Discuss.
12:55 < aandy> well, i like pancakes
12:55 < aandy> but i also like node
12:55 < deoxxa> substack: that's a sticky topic
12:55 < noxoc> i like trains. 
12:55 < substack> Strawberries? [y/n]
12:55 < deoxxa> substack: pretty sweet though
12:55 < aandy> substack: what's the default value???
12:55 < sinclair> a lot from the rails community give node a hard time
12:55  * noxoc gets hit by a train.
12:55 < sinclair> why is that?
12:56 < deoxxa> jealousy!!!!!11!1!!!eleven
12:56 < noxoc> sinclair: I currently work with rails as my primary webdev tool, but can't second that really
12:56 < sinclair> hmm, ive seen a very us vs them mentality on the web
12:56 < aandy> +1 for jealousy :)
12:57 < noxoc> what I know about is that it always seems like nodejs claims as the pioneer of this event oriented design. 
12:57 < deoxxa> sinclair: we've stolen a few high profile rails guys iirc
12:57 < noxoc> gosh my english sucks hard todayâ€¦ mondays. 
12:57 < substack> some people really like the rails abstractions
12:57 < substack> this I will never understand
12:58 < aandy> also, hater's gonna hate
12:58 < sinclair> substack: scaffolding is a good thing
12:58 < substack> sinclair: I strongly disagree.
12:58 < aandy> as do i
12:58 < substack> in the strongest possible way
12:58 < substack> scaffolding is SUCH a bad idea
12:58 < sinclair> substack: in the web space, its a good thing
12:58 < deoxxa> noxoc: it's ok, i've been speaking it for ~20 years and i still find mondays tough sometimes
12:58 < sinclair> substack: why?
12:58 < aandy> but if you do want scaffolding, there's Expressjs.org (to some extend)
12:58 < noxoc> It's always a matter of purpose and luckily i think node and rails couldn't be more far away from another. 
12:58 < substack> it's one of those ideas that I thought was the canonical example of a thing not to do
12:58 < sinclair> substack: why?
12:59 < substack> sinclair: because you're modifying generated code
12:59 < substack> if the library changes out from under you due to upgrades you're really fucked
12:59 < deoxxa> noxoc: sometimes all i can manage is to grunt and point at coffee ;)
12:59 < sinclair> substack: the goal is to keep the code as generated as possible
12:59 < noxoc> scaffolding is a good thing - when you're prototyping a rails app or just getting started. 
12:59 < substack> sinclair: what is a dynamic language doing generating code
12:59 < substack> why isn't it dynamically doing that stuff at runtime instead
13:00 < substack> that's what dynamic languages are *for*
13:00 < sinclair> substack: i don't know, i like scaffolding, most due to it provides 80% of the common things you need, the rest is customization of that scaffold
13:00 < noxoc> substack: in fact there are dozens of libraries for rails that do just tat
13:00 < noxoc> *that
13:00 < substack> sinclair: so a few things:
13:01 < sinclair> ...
13:01 < substack> 1. abstractions are meant to handle common things, not code generation
13:02 < sinclair> the generated code is not a abstraction, its a convention 
13:02 < sinclair> carry on
13:02 < substack> why use modules at all when you can just generate a scaffold that does most of what you need but leaves room for you to customize?
13:02 < sinclair> substack: i don't follow on your second point
13:02 < substack> 2. you're left with an impenetrable mess of code in plain view that if you modify in the wrong way will blow up
13:03 < sinclair> substack: that's incorrect
13:03 < substack> look at how many files `rails create` makes
13:03 < aandy> 2.1 and if left unused, is waste :)
13:03 < substack> you need to be tuned into the "rails culture" in order to know which files are socially acceptable to modify
13:03 < sinclair> substack: i haven't dealt with rails scaffolding stuff, my most experiance with scaffolding is ASP.NET MVC scaffolding
13:03 < substack> it breeds cargo-cultism
13:03 < sinclair> substack: and its awesome
13:04 < sinclair> substack: its awesome because microsoft does awesome stuff 
13:04 < substack> scaffolds are always bad
13:04 < substack> always
13:04 < dominictarr> sinclair, the thing is, the node is still new, and everyone here is still inventing how to use it best.
13:04 < substack> there is always a better alternative, which is to use modules instead
13:04 < BennyLava> scaffolds--
13:05 < dominictarr> if you want best practice patterns, come back in a year or two.
13:05 < sinclair> substack: they don't limit you, they steer you in the right direction, the community convention for doing "things"
13:05 < substack> if you think you need scaffolding, what you actually need is more modules
13:05 < substack> go and write some
13:05 < sinclair> substack: this prevents a billion made up conventions
13:05 < substack> you shouldn't prescribe conventions like that
13:05 < substack> conventions should emerge spontaneously
13:06 < sinclair> substack: there is a right way, and a wrong way of doing things, scaffolding not only shows you the "correct way" but accelerates your development in the process
13:06 < substack> if you don't take the time to let people adequately explore the solution space then you end up with suboptimal configurations and local maxima
13:06 < sinclair> substack: the order should be "convention" -> "scaffolding" not the other way around
13:06 < substack> there is no such discourse as "right" and "wrong"
13:07 < sinclair> substack: of course there is, 
13:07 < sinclair> substack: measured in many different contexts
13:07 < substack> the solution space of all possible abstractions is very all over the place
13:07 < sinclair> substack: i have a huge problem with developers just making stuff up to solve a problem, when solutions already exist.
13:08 < sinclair> substack: again, i don't believe scaffolding is a abstraction at all
13:08 < substack> publish them to a package repository then
13:08 < aandy> sinclair: i'd argue that that is exactly what modules can be used for
13:08 < substack> I feel likewise about reuse but scaffolding prescribes patterns of use onto developers and we should reject it
13:08 < substack> categorically
13:09 < sinclair> substack: well, lets agree to disagree on that one
13:09 < substack> scaffolding is nothing but overbroad prescriptivism
13:09 < sinclair> substack: all i can say is, if you walk into a dev house that uses a scaffold, you are going to learn that codebase 1000 times quicker than if some developer made it up on the spot
13:10 < aandy> if the developer is a bad developer, sure
13:10 < substack> it's a false dichotemy to have scaffolding vs ad-hoc NIH
13:10 < substack> developers pull api inspiration and approaches from many contexts
13:10 < jarr0dsz> got the example working finally. can node and sockets.io load external url in, and check for changes also?
13:11 < jarr0dsz> so instead of http://pastie.org/4790939 using some path and check for  changes like the regular ajax .load
13:11 < strk> I'm trying to do this: "a:2 a:4 a:6"  ---> "a:4 a:8 a:12": convert any "a:#" to "a:" + (#*2)
13:11 < sinclair> substack: got an example?
13:11 < substack> you can build a shared pluralistic understanding of common techniques without anybody bossing other folks around with scaffolds or other such silly instruments
13:11 < strk> any advice is welcome
13:11 < substack> sinclair: streams
13:12 < substack> streams in node evolved from many sources and are still evolving
13:12 < strk> ah, function replacement !
13:12 < substack> I'm writing https://github.com/substack/stream-handbook to describe what's going on with streams and is ongoing
13:12 < substack> but not to prescribe
13:13 < substack> sinclair: so suppose there were such thing as a "stream scaffold"
13:13 < aderuwe> anyone here use node-irc?
13:13 < substack> that set up everything you need to create a readable, writable, or duplex stream
13:13 < substack> like a railsy command like `stream create duplex`
13:14 < substack> did all the stream.write = ..., stream.destroy = ..., stream.end = ...
13:14 < dominictarr> substack, scaffolds are really about building appliciations. a stream isn't a whole application.
13:14 < sinclair> substack: sorry, i wasn't talking about anything other than web contexts
13:14 < substack> somebody could just come along and write a library to hack that library down to nothingness
13:14 < dominictarr> except on the cli.
13:14 < substack> like through
13:16 < substack> dominictarr: but what does a scaffold provide that modules can't provide?
13:16 < aandy> jarr0dsz: server side? sure
13:16 < aandy> client side depends on allow origin
13:16 < jarr0dsz> yeah im browsing docs just can't find the synonym for .load
13:16 < dominictarr> substack, well a scaffold is justa framework, except it utilizes code generation, rather than abstraction.
13:16 < substack> if you understand a problem well enough to write a scaffold you should use that knowledge to write a module instead
13:16 < aandy> jarr0dsz: http://nodejs.org/api/all.html#all_http_get_options_callback ?
13:17 < substack> dominictarr: code generation is such a poor version of modularity
13:17 < jarr0dsz> ah great something like that yes, that would load a page 1 time right?
13:18 < Benvie> what about ast manipulation
13:18 < substack> with real modules you get: tooling (npm), explicit versioning, the guts stay out of your way
13:18 < aandy> it's to make a GET request and return the response, yes
13:18 < jarr0dsz> this i want to do in node and sockets.io http://pastie.org/4790970
13:18 < dominictarr> substack, agreed. although, it is necessary, to create package.json etc.
13:18 < substack> with scaffolds you get: more customizable
13:18 < substack> yes but package.json is data not code
13:18 < dominictarr> you can just update your framework, if there is a bug, but if there was a bug in generated code, start over.
13:18 < aandy> jarr0dsz: that's client side, you want to do it server side now, right?
13:19 < jarr0dsz> aandy: yes thats the preferred way
13:19 < substack> what I'm saying applies to code which owing to its dynamic nature lends itself to modularity
13:19 < aandy> do you have control over the /data endpoint? then i'd integrate them, so your (socket.io) server doesn't pull from it all the time
13:19 < substack> there is no relevant notion of modularity for ordinary data, it's far too general
13:19 < dominictarr> substack, agree. the thing is you should not edit generated code, if you have to do it, use macros or something.
13:20 < Benvie> I made a thing that adds .toAST to all the builtin prototypes and includes .toCode
13:20 < dominictarr> closures can do all that anyway, though. and are in the language, so use them instead.
13:20 < substack> dominictarr: yes exactly, you handle upgrades to scaffolds by checking everything manually
13:20 < sinclair> substack: i like modularity btw, its not a new concept 
13:21 < Benvie> array.toAST().scopedDefinition().toCode()
13:21 < dominictarr> sinclair, it's never been implemented as effectively as in node.js though.
13:21 < sinclair> dominictarr: that's debatable
13:21 < jarr0dsz> aandy: yes i have control over the /data endpoint
13:22 < dominictarr> sinclair, the big win we have here, is that npm does not have dependency hell. 
13:22 < dominictarr> you can depend on A which needs C, and B which needs C', and there are no problems.
13:22 < jarr0dsz> aandy: im bit lost on all the terms techniques involved, but what i have now is the ajax load that checks every second.. if /data endpoint has changed data it should push this to the client ;somehow ;p
13:23 < dominictarr> most other languages/platforms break in a case like that.
13:23 < dominictarr> I'd love to hear about some other systems that can handle that though, so if you know any, please tell.
13:24 < aandy> jarr0dsz: that's what i meant, yes. so your socket.io server shouldn't be doing a GET /data request every second, it should announce/broadcast/emit when data is updated
13:24 < aandy> i mean, you can do it however you want, but i'd recommend that you let the /data push
13:24 < sinclair> i really should have a good sit down with node
13:24 < TehShrike|Work> dominictarr: except for the packages in npm that rely on make
13:24  * sinclair ive been researching it for months now
13:24 < TehShrike|Work> But there aren't too many of those thankfully
13:24 < jarr0dsz> aandy: yes thats right, but have no clue where to start :( i have this example working it checks example.xml and on changes pushes these to client
13:25 < jarr0dsz> no i need to find way to integrate instead of file check a /data endpoint changed content check ill assume
13:25 < dominictarr> TehShrike, you mean that depend on C libs?
13:25 < TehShrike|Work> Yup
13:25 < aandy> jarr0dsz: where do you mange the /data endpoint? in what language?
13:25 < jarr0dsz> aandy: in ror ruby on rails
13:25 < dominictarr> TehShrike|Work, yeah, basically things that use $PATH are shit.
13:26 < dominictarr> which is most things. node_modules is WAY better.
13:26 < TehShrike|Work> Word.
13:26 < dominictarr> way of the future.
13:26 < aandy> jarr0dsz: you could use a message system (or socket.io itself), so your node app opens a websocket connection to your ror app, and your ror app pushes /data updates through that
13:26 < aandy> as a means of sharing resources
13:26 < dominictarr> just need to get lang authors to understand this. unfortunately, outsiders don't take node.js seriously because it's "too hipster"
13:27 < TehShrike|Work> Hipster = new in the last 5 years that I don't use yet
13:27 < TehShrike|Work> :-D
13:27 < TehShrike|Work> ooh, that sounds almost tweetworthy
13:27 < dominictarr> TehShrike|Work, more or less.
13:28 < aandy> i used node even before there was node, ultimate hipster :(
13:28 < jarr0dsz> aandy: thx for the help http://pastie.org/4791001 this is my server.js
13:28 < jarr0dsz> so how does one integrate a node server inside an existing app? i shall check some docs , writeups on rails and node integration i think ;p
13:29 < TehShrike|Work> jarr0dsz: https://github.com/substack/dnode
13:30 < aandy> jarr0dsz: what I'd do is connect to your ror app using socket.io. var socket = new io.Socket('your_ror_app'); there's something like socket.io-rack or em-websocket for ruby
13:31 < SomeoneWeird> oh god ror
13:31 < SomeoneWeird> GET OUT
13:31 < SomeoneWeird> :p
13:31 < jarr0dsz> ok thx guys i have to do some serious more reading on this all ;p sorry for the newbie questions
13:31 < substack> jarr0dsz: you could put the node pieces and rails app both behind an http proxy and route dynamically
13:31 < aandy> SomeoneWeird: at least he's using node aswel :)
13:32 < jarr0dsz> this is going to be exterme complicated ;p
13:32 < substack> jarr0dsz: another useful approach is to use http to let the old app send requests to the node server
13:32 < aandy> jarr0dsz: no problem. be sure to check back if you have more questions
13:33 < substack> dominictarr: related to how $PATH is lame, I've started writing a modules clone in node AGAIN
13:34 < substack> this `modules`: http://modules.sourceforge.net/
13:34 < substack> loved using this command at ARSC
13:34 < substack> it uses tcl for module files though
13:35 < substack> it's pretty much nave for any program, not just node source
13:35 < aandy> Am I the only one getting chills every time I se the word tcl?
13:35 < ashnur> no
13:36 < substack> it's really excellent how you don't actually need a system package manager for most packages, it can all be done in userland
13:36 < substack> disk space is plentiful enough these days to remove the storage concerns that modeled early approaches
13:37 < TehShrike|Work> I look forward to the day when I can install the bignum library off of npm without having to slog around setting up a C environment
13:38 < ashnur> ++
13:44 < aandy> hi, i've never used twitter for 3rd party login, so this might be a dumb question, but: are there ways to request API access for testing purposes? I don't really have any "this app will do what?", "url for app" etc, yet. I just want to take it for a spin
13:44 < ootje> i think you can just enter some random url there. it's for display when someone auths against your app, iirc
13:45 < aandy> ok, so apps aren't generally reviewed?
13:45 < ootje> well, you can enter a url of your webpage or something
13:45 < ootje> i've never had any trouble with it
13:45 < aandy> right, what i meant was more so that whatever info i'd put in would be bogus - and probably not be an allowed app
13:46 < aandy> okay, thanks :)
13:46 < ootje> i'm not sure. if you want to do auth via twitter, then the urls are used in displaying info about the app and stuff iirc
13:46 < ootje> if you just want to use the api to do searches and/or streaming then i haven't had any trouble with my generic urls
13:46 < ootje> generic as in .. some url to my own, unrelated website
13:48 < aandy> ok, that's fine
14:05 < TehShrike|Work> Can anyone recommend a good minifier on npm that you can point at a directory full of folders full of .js files and have it spit that same directory structure out somewhere else, with minified code?
14:07 < SomeoneWeird> try uglifyjs
14:08 < plato> aandy: ootje: the domain name you enter on dev.twitter's 'new app' page must match the domain of your callback url
14:08 < plato> (for 'Login With Twitter')
14:09 < plato> i simply used http://127.0.0.1:3000 for a callback url
14:09 < plato> localhost:3000 mysteriously made errors
14:10 < SomeoneWeird> lol thats really not gunna work
14:10 < SomeoneWeird> er, wrong channel
14:11 < xico> Hi all
14:11 < xico> Is there a view engine or a way of rendering only partials without rendering the page layout again and again?
14:11 < xico> As a webpart in sharepoint
14:17 < bradgignac> xico: i think you are probably looking for ajax
14:17 < bradgignac> xico: but there isn't any magic way to do it.
14:18 < TehShrike|Work> Does node's fs library provide an easy way to tell if a filename returned by fs.readdir is a directory or not?
14:20 < substack> TehShrike|Work: nope, you'll need to fs.stat each of the results
14:20 < TehShrike|Work> aww.
14:20 < xico> bradgignac: thanks. That is a possibility.
14:21 < aandy> plato: yeah that's what i had in mind too. thanks for sharing your experience :)
14:30 < niggler> is there a browser replacement for the node fs module?
14:30 < yawnt> browserify fs i think
14:30 < yawnt> https://github.com/CrabDude/fs-browserify
14:31 < aandy> what's the usecase for that btw? to work with html5 fileapi or?
14:32 < yawnt> think so.. never really had the time to dig into it
14:34 < efbeka> Great discussion between dominictarr and substack
14:34 < efbeka> i learned a lot :)
14:34 < pachet> anytime substack speaks
14:34 < efbeka> +1 for substack ^^
14:34 < pachet> learning happens
14:35 < efbeka> oh yes
14:35 < aandy> very positive externality :)
14:36 < guybrush> bahhhhhhh since it changed path.exists changed to fs.exists i have to look it up all the time
14:36 < guybrush> my brain is just too slow for node-release-interval
14:37 < guybrush> the next big thing i fear is alphabetical ordered doc, i wont find all the things for some time
14:38 < aandy> guybrush: what do you mean? the node api docs are anything but alphabetically ordered
14:38 < guybrush> aandy: not yet :p
14:38 < aandy> actually, i'm not sure what it's ordered by. chaos maybe
14:39 < aandy> but that's what ctrl+f is for
14:39 < guybrush> i have seen a PR which does sort it
14:39 < aandy> PR?
14:39 < guybrush> pull-request
14:40 < aandy> well, whenever they get around to it. it's nice to have, but definately not needed for me anyway
14:41 < natsume> hello, does anyone have a tuto to cross-compile node.js for android ?
14:41 < aandy> natsume: what does that mean?
14:41 < aandy> running node on android ?
14:42 < natsume> yes
14:42 < natsume> my device is a little different
14:42 < natsume> it's a pandaboard running linaro-android
14:43 < aandy> a quick google search suggests running debian on the device, but before you go rebooting, try https://github.com/paddybyers/anode/downloads perhabs
14:43 < aandy> https://github.com/paddybyers/node is the node on android itself
14:43 < natsume> yes but the question is i have to run it on android os
14:44 < aandy> right, and that's what that branch of node is for
14:44 < aandy> android port of node
14:44 < natsume> i have tried this one out
14:44 < natsume> but it's not stable
14:45 < natsume> and i have probs with javascript console
14:45 < jarr0dsz> anyo f you guys have integrated node.js with a ruby on rails project?
14:45 < jarr0dsz> it seems theres not much info on that, now i have the node part in basics setup would be nice to integrate it somehow
14:46 < aandy> jarr0dsz: i think your best bet is to share resources, or use a message queue (like RPC or similar)
14:46 < aandy> but to answer your question: no, i haven't done that for node+ror in particular
14:46 < jarr0dsz> yes i saw the link but was hoping for something more fancy but rpc could do too
14:47 < aandy> fancy like..?
14:53 < sinclair> takes a while to build node
14:54 < mscdex> not if you have many cores
14:54 < mscdex> :-D
14:54 < sinclair> i have 8
14:55 < sinclair> im in uncharted territory here
14:55 < sinclair> does anyone code node on linux?
14:56 < mscdex> sinclair: yep
14:56 < niggler> sinclair: you mean running on linux or using a linux desktop?
14:56 < sinclair> linux desktop
14:57 < sinclair> where do people normally put project code on linux, in the /usr directory?
14:58 < niggler> your dev work should be in your home directory
14:58 < sinclair> actually, what development tools exist for developing node
14:58 < sinclair> niggler: sorry, im new to linux
14:58 < niggler> *generally, not just for node
14:58 < sinclair> these might sound like dumb questions
14:59 < niggler>  /home/your-username
14:59 < niggler> e.g. /home/niggler
14:59 < sinclair> yeah, found it
14:59 < sinclair> i have a shared windows drive
14:59 < niggler> it should be the starting directory if you open up a terminal
15:00 < sinclair> i guess i could put it there
15:00 < niggler> you can symlink to it
15:00 < sinclair> niggler: what do you use to start and restart node?
15:00 < niggler> sinclair: dont ask me about node -- i literally started a week ago
15:00 < sinclair> niggler: i started 5mins ago
15:00 < sinclair> you are pretty much an expert in comparison 
15:01 < niggler> mscdex should opine
15:01 < aandy> sinclair: there's "forever"
15:01 < SoulRaven> hello
15:01 < sinclair> aandy: is that a software package?
15:01 < sinclair> on windows, i found some package that would start and restart node on save
15:02 < sinclair> as im in linux, i have no idea
15:02 < niggler> aandy: does that just watch the process?
15:02 < aandy> forever will do that
15:02 < aandy> https://github.com/nodejitsu/forever
15:02 < SoulRaven> way when i have a buffer like this, var test = new Buffer('something', 'hex'); test.readUInt16BE(0); i get the undefined method readUInt16BE(0) error
15:02 < aandy> niggler: and watch
15:03 < SoulRaven> any ideea way i get this error?
15:04 < aandy> i'm sure there are other alternatives, i've just used that one the most, not based on anything in particular other than being the first find + fit :)
15:04 < natsume> aandy, do you have any idea of building paddybers' node.js port for android
15:04 < natsume> there's nothing on the git
15:05 < aandy> natsume: no, but yes there is: https://github.com/paddybyers/node scroll down to the readme
15:06 < aandy> natsume: step by step here: https://github.com/paddybyers/anode/wiki/Build (includes anode also, but you can skip the parts you don't want)
15:07 < SoulRaven> anyone?
15:08 < mscdex> SoulRaven: what version of node are you using?
15:08 < aandy> SoulRaven: can you provide an example? other than reading beyond the length, it works for me
15:09 < SoulRaven> http://bin.cakephp.org/view/770018731
15:09 < SoulRaven> the avl_data has 900 or bore bytes
15:09 < aandy> var test = new Buffer('FFFF', 'hex'); test.readUInt16BE(0)
15:09 < SoulRaven> so i am not reading beyond length
15:10 < aandy> how so? we don't know what avl_data is
15:10 < mscdex> SoulRaven: you're using the wrong variable
15:11 < mscdex> :-)
15:11 < mscdex> you want avlData.read...
15:11 < aandy> :D
15:15 < simong> Is there a way to forcefully close an http server (in code) even if it has connections open? (I don't want to set a timeout on incoming connections)
15:18 < sinclair> hey guys, ive started a simple node web server, but i cannot access it across a network
15:18 < mscdex> sinclair: what does your .listen() look like?
15:18 < sinclair> im running linux, is there anything i need to do? i have enabled ufw and allowed the port
15:19 < sinclair> mscdex... .listen() ?
15:19 < sinclair> mscdex: sorry, im totally new here
15:19 < mscdex> sinclair: in your code
15:19 < mscdex> sinclair: somewhere you should have server.listen(...)
15:19 < sinclair> .listen( 9981, 'localhost' );
15:19 < substack> simong: there are some ways
15:19 < mscdex> that's why
15:19 < sinclair> i need it to be the IP of the server?
15:19 < simong> substack: cool, any doc or pointers?
15:20 < sinclair> i see, is there a way to automatically resolve the ip of the server in node?
15:20 < mscdex> sinclair: easiest way is to just use .listen(9981);
15:20 < SomeoneWeird> just leave localhost out
15:20 < sinclair> ah ok, thanks guys, ill give it a try
15:20 < substack> simong: you can do something like var cons = []; server.on('connection', function (c) { cons.push(c) }); function destroy () { cons.forEach(function (c) { c.destroy() }); server.close() })
15:20 < sinclair> thanks, works great
15:21 < sinclair> :)
15:21 < mscdex> \o/
15:21 < substack> probably should also c.on('end', function () { cons.splice(cons.indexOf(c), 1) }) too
15:21 < sinclair> so, i hear express is the way to go for web applications on node?
15:21 < bradleymeck> why is function.bind soo slow?
15:21 < substack> sinclair: meh
15:22 < bradleymeck> sinclair: that or geddy are the 2 biggest i would say
15:22 < simong> so basically collect each connection as it comes in?
15:22 < substack> I mostly just use the core http server anymore
15:22 < bradleymeck> sinclair: grab some flatiron stuff for general purpose things and mix it up to get an easier experience for various things
15:22 < simong> and then close any that are left open when I want to shut down
15:22 < sinclair> bradleymeck: cool, i really just need a good templating engine
15:22 < mscdex> bradleymeck: http://stackoverflow.com/questions/8656106/why-is-function-prototype-bind-slow
15:22 < substack> and pass the (req,res) to modules as necessary
15:22 < mscdex> ;-)
15:23 < SomeoneWeird> use ejs sinclair 
15:23 < sinclair> substack: on appengine, i got by with just a templating engine
15:23 < sinclair> django there
15:23 < sinclair> well, django templates
15:23 < sinclair> SomeoneWeird: what other options exist outside of ejs?
15:24 < SomeoneWeird> jade
15:24 < bradleymeck> mscdex: bleh :/
15:24 < SomeoneWeird> and that's all I can think of
15:24 < sinclair> SomeoneWeird: what do you use? ejs?
15:24 < SomeoneWeird> yep
15:25 < sinclair> SomeoneWeird: what about mustache ?
15:25 < substack> sinclair: I don't use templates anymore either
15:25 < SomeoneWeird> ahyeah, theres that too
15:25 < mscdex> bradleymeck: there's even an issue on the v8 tracker: http://code.google.com/p/chromium/issues/detail?id=110430
15:25 < SomeoneWeird> i've only used ejs (havn't looked at the others, ejs has everything I need)
15:25 < sinclair> substack: your code must be ultra maintainable
15:25 < substack> websockets make templates not such a great fit
15:25 < SomeoneWeird> sinclair, haha it is :p
15:25 < substack> sinclair: I only ever have static content anymore
15:26 < sinclair> substack: what does that even mean?
15:26 < jmoyers> i don't think websockets preclude models with change events
15:26 < jmoyers> which driving templating
15:26 < sinclair> substack: your server "should" maintain a "state"
15:26 < mmalecki> instanceof was recently optimized on ia32
15:26 < jmoyers> just depends how minimalist you are ;-)
15:26 < sinclair> substack: operations run over your socket update the state, and broadcast it to clients, 
15:27 < bradleymeck> sinclair: depends on your app, i really avoid state if possible
15:27 < substack> sinclair: templates are built around the idea that the server is going to do some i/o and render a mostly complete page that the browser will consume
15:27 < substack> but web apps aren't like that as much anymore
15:27 < substack> and certainly not the apps that I tend to build
15:27 < sinclair> substack: use socket.io much?
15:27 < substack> not any more
15:27 < sinclair> why not?
15:27 < substack> I use streaming abstractions instead
15:27 < rounce^work> code example?
15:27 < sinclair> what does that even mean?
15:27 < rounce^work> I can haz
15:28 < substack> sinclair: this is why: https://github.com/substack/stream-handbook#roll-your-own-socketio
15:28 < mscdex> http://jsperf.com/apply-vs-call-vs-invoke/6
15:28 < mscdex> wow
15:28 < rounce^work> substack: thx dawg
15:29 < substack> frameworks are all-or-nothing
15:29 < substack> libraries are use-me-or-don't
15:29 < sinclair> substack: so you are throwing out all the GOOD abstractions around long polling, polling, events and web sockets?
15:29 < substack> the latter wins when you have a vibrant package ecosystem
15:29 < sinclair> substack: why would you throw these things out?
15:30 < sinclair> substack: or bother to write your own
15:30 < substack> sinclair: sockjs already has all that stuff without the baggage of channels, a very brittle reconnect engine, and horrible configuration management
15:30 < simong> substack: That does work, but it's a pretty big hack. Can't you just force node to close down all it's open http sockets?
15:30 < sinclair> substack: i could understand if you were writing a better socket.io
15:30 < substack> and shoe is just a tiny streaming wrapper on top of sockjs
15:30 < bradleymeck> sinclair: `npm substack` and `npm search substack`
15:30 < mbalho> sinclair: it is hard to fix bugs and contribute to huge monolithic projects
15:31 < substack> huge monolithic projects are huge and monolithic first of all
15:31 < bradleymeck> he likes small modules, and building large things with many
15:31 < substack> if you ever need to do anything slightly different from what the authors intended expect a painful experience
15:31 < substack> I learned that the very hard way with socket.io
15:31 < substack> after fighting it for about 2 years
15:32 < sinclair> substack: that's fin and all, but you are throwing away a lot of required functionality to get things working across browsers
15:32 < substack> sinclair: sockjs already supports all the same browsers
15:32 < substack> except it doesn't try to invent its own channeling and event system and reconnect logic
15:33 < substack> it just implements exactly the websocket api with fallbacks
15:33 < substack> that is it
15:33 < substack> no baggage
15:33 < sinclair> those things are practical, but i can understand why you would want to throw them out
15:33 < sinclair> so, you handle long polling?
15:33 < rio{> is it the array inserts that are so damn costly or have I done something wrong? http://jsperf.com/fibiterative
15:33 < aandy> sinclair: they need to be practical to substack . you asked why he doesn't use socket.io, not why no one should use socket.io
15:34 < substack> sinclair: I threw them out because they are far too opinionated, severely hurt performance, and make it hard to write reusable components on top of them
15:34 < bradleymeck> rio{: array resizing is costly and gets more costly the bigger the array
15:34 < substack> I did use socket.io for a really long time
15:34 < substack> I don't anymore
15:34 < sinclair> substack: any thoughts on SignalR?
15:34 < substack> what socket.io provides is much better provided by the modules I listed in that chapter of the stream handbook
15:35 < substack> simong: process.exit() :p
15:35 < substack> sinclair: never used it
15:35 < sinclair> substack: the entire socket layer should be abstracted, thats fine, but SignalR does make assumptions about protocols and data
15:35 < mscdex> rio{: it's more efficient if you know the array length to begin with
15:36 < sinclair> substack: but you know what
15:36 < substack> so if you want an abstraction that is great! but it should only do one thing and should play nicely with other abstractions so you can implement layering
15:36 < substack> so you aren't stuck with a technology forever
15:36 < substack> getting out from under frameworks when your needs change is such a time sink
15:37 < substack> swapping a tiny library that just does one simple thing is far simpler
15:37 < TehShrike|Work> Does anyone know where I can find a definition of the error objects/messages that I could get in a fs function callback?
15:37 < sinclair> substack: not only does signalR provide the abstraction (really tight programming model) but it also provides a protocol for clients to conform to, this means not only browsers can consume signalR but desktop applications, mobile, and win8 tiles (of course)
15:37 < substack> sinclair: that sounds over-engineered
15:38 < sinclair> substack: thats only the 'Hubs" component of signalR, you are able to strip all these things back 
15:38 < substack> text is the universal interface
15:38 < substack> json is a close second
15:39 < TehShrike|Work> heehee
15:39 < bradleymeck> its apparently hard to get to the actual examples of signal ir if i dont want to download zips...
15:39 < jmoyers> transport should be transport
15:39 < bradleymeck> wait there is one
15:39 < sinclair> subtrack: what im trying to say is, there is a lot of benefit in frameworks like SignalR and socket.io
15:39 < mscdex> TehShrike|Work: it's probably in libuv somewhere
15:39 < sinclair> subtrack: more so, because the entire community can get on board
15:39 < substack> sinclair: so first thoughts, the release engineering on this project super sucks
15:40 < substack> where is the command I can run to start messing with it
15:40 < substack> oh here we go,  Install-Package
15:40 < substack> whatever that is
15:40 < substack> at least it's a thing
15:40 < sinclair> substack: NuGet is just as good as npm
15:40 < jcrew> are we referring to this signalr ?  https://github.com/SignalR/SignalR
15:40 < SomeoneWeird> nuget sucks compared to npm
15:40 < substack> ok so there's no code on the readme or project page
15:40 < st_luke> oh lord
15:40 < st_luke> nuget
15:41 < substack> major demerits for that
15:41 < substack> where is the code
15:41 < sinclair> what do you mean, where in the code
15:41 < sinclair> in microsoft, we trust?
15:41 < bradleymeck> substack: its in the wiki quickstart things
15:41 < mscdex> TehShrike|Work: https://github.com/joyent/libuv/blob/master/include/uv.h#L68
15:41 < bradleymeck> but it seems incomplete
15:41 < substack> all I see is a sample/ directory with subdirs full of xml
15:41 < st_luke> jcrew: what a nightmare
15:41 < jcrew> no kidding
15:42 < substack> bradleymeck: poor placement
15:42 < TehShrike|Work> mscdex: oh excellent, thanks
15:42 < TehShrike|Work> I was browsing around in the .c files
15:42 < sinclair> substack: microsoft intend to bundle SignalR with ASP.NET eventually, this has been a good and a bad thing in the past, 
15:42 < substack> sinclair: I mean when I look at a project I don't know what the fuck it is until I see some example code
15:42 < bradleymeck> substack: hence my confusion up above, it seems to just be like socket.io with a written spec, which is better i guess
15:42 < jmoyers> hide yo' code, ..
15:42 < substack> if you don't show me example code right away I will just bounce and never look at it again
15:42 < jmoyers> its like a cisco product page
15:42 < jcrew> jmoyers: lol
15:42 < substack> jmoyers: indeed
15:42 < jmoyers> where's the product?
15:43 < sinclair> substack: there is plenty of references out there, and i expect there will be more on MSDN in future
15:43 < mscdex> msdn.js!
15:43 < TehShrike|Work> substack.showCode(function(err) { if(err) return "NO U" })
15:43 < substack> sinclair: that's horrible to delegate showing a simple example to third parties
15:43 < aandy> is this a case of the old "nice try, microsoft employee"? :D
15:43 < sinclair> substack: its temporary 
15:43 < substack> very poor developer impression
15:44 < mscdex> do they still ship msdn with visual studio?
15:44 < substack> code or gtfo is my usual approach to new technology
15:44 < sinclair> mscdex: they do, but no one i know installs it
15:44 < mscdex> heh
15:44 < mscdex> i remember it used to come on 2 cds in the vs6 days
15:44 < sinclair> mscdex: its HUGE nowadays
15:44 < mscdex> i'd imagine so :-)
15:45 < TehShrike|Work> That's why they started putting it on the internet
15:45 < niggler> bizspark is awesome btw
15:45 < jmoyers> the internet? fuck that
15:45 < jmoyers> cd's are the best
15:45 < TehShrike|Work> lol
15:45 < sinclair> substack: i used to be a lot like you, except instead of node, i was all about openGL
15:45 < TehShrike|Work> I like floppies, the bigger the better!
15:45 < aandy> not sure if i have 2012 or 2010, but i think it was 2-3gb when i installed it for a course 
15:45 < mscdex> who needs cds when we can just log into the microsoft bbs and browse them there
15:45 < TehShrike|Work> LOL
15:45 < niggler> intel used to ship the x86 programming guide as books for free
15:45 < TehShrike|Work> Oh man, a Microsoft BBS
15:45 < niggler> now they send CDs
15:45 < TehShrike|Work> That would be so awesome
15:45 < sinclair> substack: i wrote my own renderers, i wrote a tonne of tech around graphics, scene graphs, and all sorts
15:45 < mscdex> first one to create an ANSI microsoft logo gets a cookie
15:46 < substack> sinclair: I don't really care about node
15:46 < substack> I wish people would stop working on node actually
15:46 < substack> then I wouldn't need to upgrade
15:46 < TehShrike|Work> substack: where do you wish that dev time would get invested?
15:46 < substack> I care about software design and craft
15:46 < substack> and unix philosophy
15:46 < sinclair> substack: thing is, you are wasting a lot of time on solved problems
15:46 < rounce^work> sinclair: and then you realised that there were bigger teams of smarter more experienced people, who were more specialised in writing low level library code
15:46 < substack> and how to build robust composable software that will keep on working for hundreds of years
15:46 < sinclair> rounce^work: something like that
15:46 < rounce^work> yeah
15:46 < st_luke> sinclair: the unix philosophy problem isn't solved as long as people continually build things that go against it
15:46 < rounce^work> it's good to know then
15:47 < rounce^work> *though
15:47 < jmoyers> happpppy monday!
15:47 < sinclair> rounce^work: don't get me wrong tho, i wrote a lot of good code that runs fine today
15:47 < substack> sinclair: the problem with those "solved problems" is that people for the most part didn't solve them once and for all
15:47 < mscdex> jmoyers: that's an oxymoron
15:47 < substack> when you solve something once and for all it stays solved
15:47 < substack> like openssl
15:47 < substack> shit's solved
15:47  * jmoyers looks sadly at his coffee
15:48 < sinclair> rounce^work: but when you are up against massive teams developing the same things, one off developers don't really come off well (except if the tech is implemented for something useful)
15:48 < substack> like who would even notice if gnu stopped publishing new versions of `wc`
15:48 < niggler> substack: it seems that the problem is upstream
15:48  * aandy looks in envy at jmoyers' coffee
15:48 < substack> people will still be using `wc` in 100 years
15:48 < niggler> if javascript were solidified, node would be solved
15:49 < niggler> node solves a problem which has a moving target
15:49 < sinclair> substack: my graphics software still runs today....
15:49 < pachet> show me a problem that isn't a moving target
15:49 < jmoyers> geez. i thought we pointed to a particular version of v8 :P?
15:49 < bradleymeck> all i really want more in node is pipe(2) somehow compatible with windows, and the new read streams
15:49 < jmoyers> not exactly a moving target
15:49 < sinclair> substack: i have dealt with years of low level graphics programming
15:50 < jcrew> sinclair: i don't think that is substack's point
15:50 < niggler> pachet: are you familiar with "FIX"?
15:51 < substack> sinclair: when people solve problems but only inside of a bigger framework they are not solving problems once and for all
15:51 < niggler> financial information exchange, iirc
15:51 < SomeoneWeird> girls, girls, settle down
15:51 < sinclair> jcrew: the thing is, writing these low level things are pointless outside of academia 
15:51 < substack> when you solve a problem once and for all you only solve exactly that problem and not other problems
15:51 < niggler> the format has been standardized, and each new changes occurs in such a way that you don't need to rewrite software to handle the new version
15:51 < niggler> substack: what is node's problem?
15:51 < niggler> *what is the problem that node is trying to solve?
15:52 < substack> niggler: event systems in dynamic languages are really shitty, let's make a nice one
15:52 < substack> that is what node does
15:52 < niggler> that's not what node does
15:52 < sinclair> substack: if socket.io is too bloated, then why don't you fork it and try modularize it, it would be far better time spent.
15:52 < jcrew> sinclair: low level problems have their place outside of academia, like on tooling.  again though, there are bigger fish to fry
15:52 < substack> sinclair: because that's pointless
15:52 < niggler> if that were node's goal they'd have abandoned far more of the javascript constraints
15:52 < substack> sinclair: there's already sockjs
15:52 < bradleymeck> wasnt there someone who had the new readstreams emulated in js land?
15:53 < niggler> the requirement to align with javascript is what leads to many of the concerns
15:53 < substack> sinclair: modularizing socket.io would be "reinventing the wheel" because sockjs already exists
15:53 < jmoyers> pontificating
15:53 < jmoyers> i think it was said best on a nodeup, referencing marco
15:53 < jmoyers> "how comfortable with abstraction are you. all arguments boil down to this"
15:53 < sinclair> jcrew: i agree about the bigger fish to fry, i got too old to be messing around in low level software.
15:53 < mscdex> i thought LearnBoost was already modularizing socket.io?
15:54 < mscdex> with engine.io and stuff?
15:54 < pachet> niggler: yeah i've heard of it, but mine was sort of a rhetorical question. 'new change' kind of speaks to a moving target, but i guess i was using 'moving target' to mean something outside of 'format standardization'
15:54 < TehShrike|Work> jmoyers: which nodeup was that?
15:54 < TehShrike|Work> That sounds like a fun discussion
15:54 < substack> mscdex: sort of but engine.io was on github for like a year before they published it to npm and I had already written it off by that point
15:54 < jmoyers> uh, i think it was the one where they had "callers from the internet"
15:54 < gerconfused> How do I make a locomotive node app restart on changes in the code?
15:54 < jmoyers> and they started talking about testing, some dude is ranting
15:54 < gerconfused> Can I use node-dev?
15:54 < substack> if it's not on npm and it's a node project it doesn't exist to me
15:55 < mscdex> heh
15:55 < niggler> sinclair: you are never too old to mess around in low level software
15:55 < tlorenz> substack: +1
15:55 < mscdex> and never too young! :-D
15:55 < niggler> actually that's a real problem mscdex 
15:56 < TehShrike|Work> Do the fs functions expect "mode" to be an integer, string, or either?
15:56 < niggler> kids these days (sad im saying "kids") aren't particularly interested in low level stuff anymore
15:56 < sinclair> niggler: yeah, im too old, and have no time for it anymore, eventually, every developer races in desperation to keep up with emerging technologies
15:56 < mscdex> TehShrike|Work: i think either one
15:56 < substack> it's not even about low vs high levels
15:56 < TehShrike|Work> mscdex: thankee
15:56 < substack> it's about doing 1 thing or doing more than 1 thing
15:56 < niggler> substack: but cs education is gimped nowadays
15:57 < substack> you can do 1 thing at a very high level with lower-level primitives as dependencies
15:57 < niggler> few understand the mathematical underpinnings
15:57 < sinclair> niggler: i used to worry about being a bitter and twisted delphi programmer when i got older, turns out, im a bitter and twisted .net developer who refuses to change
15:57 < substack> doing more than 1 thing is a recipe for technical debt and maintenence problems later on
15:57 < mscdex> heh delphi
15:58 < substack> there is no natural limit for >1 semi-related things in the same package so features drift and creep all the fuck over the place
15:58 < sinclair> anyway, low level is fairly trivial, its high level abstractions that mean the most
15:58 < substack> and it's hard to keep in your head exactly which functionality belongs to where
15:59 < jmoyers> speaking of keeping shit in your head
15:59 < jmoyers> i hate the ast
15:59 < jmoyers> god damn tree of nightmares
15:59 < substack> but when all separable functionality is a first-class, top-level package in a repository, you can use exactly that package with no baggage
15:59 < sinclair> far more conceptual things in high level abstractions, and those high level abstractions are representations of a changing industry, i prefer to "exist" there
15:59 < TehShrike|Work> I... like making software
15:59 < substack> and the scope is defined by the problem, not by the contingent circumstances that you find yourself in when you solve the problem
16:00 < mscdex> lego.js!
16:00 < TehShrike|Work> I should just code for Mindstorms robots
16:00 < mscdex> oh wait, that's a trademark
16:00 < mscdex> brick.js!
16:00 < substack> as in, whenever I write webapps, I use templates, therefore my thing must bundle a template engine!
16:00 < substack> don't do that
16:00 < pachet> mscdex: as in 'brick your phone'
16:00 < mscdex> leg-go your phone
16:01 < mscdex> alright back to work now :-D
16:29 < kevin__> I have a quick question, it's been a long day, so I am sure the answer is a facepalm .... Im using Passport for Facebook - in the Strategy there is a function FacebookStrategy.prototype.userProfile = function().... and I include it in my app like so: FacebookStrategy = require('passport-facebook').Strategy; but I need to change that function, so I do after the require... FacebookStrategy.userProfile = f
16:29 < kevin__> unction()... but it doesnt seem to override it.  thoughts...
16:40 < RabidFire> kevin__: you're probably looking for Facebook.prototype.userProfile = ...
16:52 < matthew-> google's failing to help me. Is there a neat way to convert from Node's Buffer to a Typed Array or DataView?
16:53 < matthew-> Ideally, I'd just like to read some files in directly as an ArrayBuffer
16:53 < matthew-> not a NodeJS Buffer
16:53 < niggler> jdataview
16:54 < hemanth_> I'm running an express app at http://bookurevent:3000/post; $.ajax() on the same fails, missing something? 
16:54 < mbalho> look at web inspector
16:54 < matthew-> niggler: yup, that'll do, thanks.
16:55 < niggler> matthew-: use duckduckgo: if you search for node buffer dataview it looks like jdataview is first
16:55 < niggler> https://duckduckgo.com/?q=node+buffer+dataview
16:55 < hemanth_> mbalho, ?
16:56 < TehShrike|Work> Are there any standards for packaging libraries that are accessible via require() or command-line?
16:56 < TehShrike|Work> I'd like to have my require()-accessible library in one file, and the command-line wrapping shizzle in another
16:56 < hemanth_> 'Access-Control-Allow-Origin', '*'
16:56 < TehShrike|Work> But then which one do I make the main file in package.json?
16:56 < niggler> TehShrike|Work: why not put it in the same file?
16:56 < mbalho> hemanth_: if you look in your browsers web inspector you will probably get helpful info. saying something 'failed' isnt very specific
16:57 < TehShrike|Work> niggler: because I don't want command-line handling stuff in the library that exports the single useful function
16:57 < niggler> hemanth_: code!
16:57 < TehShrike|Work> That's my thinking, anyway
16:57 < niggler> TehShrike|Work: you can check
16:57 < gerconfused> What kind of object to POST data go to with express/locomotive.js?
16:57 < tnorris> Does `process.std<in|out|err>.setEncoding` use `ReadStream.prototype.setEncoding` from lib/fs.js?
16:57 < niggler> something like if (typeof require !== 'undefined' && typeof exports !== undefined)
16:58 < niggler> err
16:58 < niggler>     if (typeof module !== 'undefined' && require.main === module) 
16:58 < niggler> and in there you can import the command line stuff
16:59 < sinclair> does anyone have any recommendations of linux text editors, or, an IDE that is suitable for node?
16:59 < TehShrike|Work> niggler: when would module not be defined when running in node?
16:59 < hemanth_> niggler, https://gist.github.com/81301612d3af04df0939
16:59 < tnorris> sinclair: vim works fine for me. sublime text 2 seems to be popular.
16:59 < TehShrike|Work> sinclair: I've been falling in love with SublimeText
16:59 < janmower> sinclair: learn vi/m and you'll thank yourself
17:00 < pachet> sinclair: i definitely second vim
17:00 < niggler> TehShrike|Work: I have a script that i can include in the web browser and in node as a module and can run directly
17:00 < Pilate> loving sublime 2
17:00 < niggler> that's why you have that check
17:00 < sulaiman> Hi
17:00 < sinclair> ok, vim
17:00 < niggler> hemanth_: listen on 0.0.0.0
17:01 < janmower> i've been using vim for years and i still keep searching help docs and man pages...
17:01 < niggler> add a get target and see if you can hit it hemanth_ 
17:01 < sulaiman> I once came across some javascript framework, that I believe used nodejs, for tracking client events, like clicks on a page
17:01 < sulaiman> I didn't bookmark it, and can't google it
17:01 < thl0> sinclair: I use vim with SyntasticCheck plugin - jshints my code on save
17:01 < janmower> so if it seems confusing at first, try watching someone who knows it for a few minutes and ask how they do things
17:01 < niggler> janmower: you have to go piece by piece and just thoroughly learln
17:01 < niggler> for example, spend a day just playing with netrw
17:02 < TehShrike|Work> niggler: oh sure, I've done that lots of times too
17:02 < TehShrike|Work> But in this case, it will never be usable in a browser
17:02 < thl0> niggler: I have seen if (module.parent) in lots of places
17:02 < TehShrike|Work> It will, however, be usable from the command-line
17:02 < thl0> niggler: is your method the preferred one?
17:02 < niggler> the only reason TehShrike|Work it wouldnt be usable in the browser is if you use a shebang
17:03 < TehShrike|Work> niggler: ...or lots of node's fs modules
17:03 < niggler> thl0: fuck if i know what the preferred one is lol i started a week ago
17:03 < niggler> TehShrike|Work: what i did, as a pseudo cheat:
17:03 < thl0> niggler: :)
17:03 < hemanth_> niggler, negative; http://bookurevent.com there the sign up hits http://bookurevent.com:3000/post and POST is not happening  
17:04 < niggler> hemanth_: bookyourevent.com is being hosted by node or by your web server?
17:04 < TehShrike|Work> niggler: see all the libraries in here?  http://nodejs.org/api/  They're not usable in the browser (except for a few of them, using the browserify library)
17:04 < niggler> im saying add something like app.get("/", ..)
17:04 < hemanth_> niggler, webserver
17:04 < niggler> right hemanth_ so you need to see if you can hit the *node* server
17:04 < Shedal> hi
17:04 < niggler> TehShrike|Work: so im working on this thing that needed FS as well
17:05 < niggler> so the way i did it is
17:05 < niggler> i created a config script and put it in the root directory and in the node_modules directory
17:05 < hemanth_> niggler, node server is on the same machine as the webserver is
17:05 < niggler> because of how "require" works in node, the node_modules version is used
17:05 < TehShrike|Work> >_<
17:05 < sinclair> guys, by vim, you mean the terminal editor right?
17:06 < Shedal> does anybody know, why all sites require their users to confirm their email addresses by clicking a link in the confirmation email?
17:06 < niggler> and i hacked a web version and used the version in the root to point to that one
17:06  * TehShrike|Work backs away slowly
17:06 < niggler> for the browser, "require" was a 10-line hack that uses xmlhttp
17:06 < hemanth_> :|
17:06 < thl0> sinclair: http://www.vim.org/download.php
17:06 < substack> niggler: you are underestimating what require() actually does
17:06 < niggler> hemanth_: where are you hosting?
17:06 < kevin> if a require has a Strategy.prototype.userProfile and then module.exports = Strategy; in my app, how do I override the Strategy.prototype.userProfile with my own function
17:07 < hemanth_> niggler, both are on the same server, dreamhost
17:07 < gerconfused> I'm really stuck on this post data thing
17:07 < niggler> hemanth_: is port 3000 blocked?
17:07 < TehShrike|Work> substack: care to share your opinion on the matter? "Are there any standards for packaging libraries that are accessible via require() or command-line? I'd like to have my require()-accessible library in one file, and the command-line wrapping shizzle in another"
17:07 < substack> niftylettuce: http://nodejs.org/docs/latest/api/modules.html#modules_all_together
17:07 < niggler> substack: if i just create a cache
17:07 < substack> wups
17:07 < substack> niggler: http://nodejs.org/docs/latest/api/modules.html#modules_all_together
17:07 < gerconfused> getting Cannot POST /users/create from locomotive.js
17:08 < drudge> gerconfused: lets see some code
17:08 < hemanth_> niggler, NO
17:08 < hemanth_> sorry about the caps 
17:08 < niggler> http://bookurevent.com:3000/post oh it works now -- it wasnt working about 5 minutes ago
17:08 < hemanth_> hmm
17:09 < TehShrike|Work> substack: how do I make the library both require()-friendly and command-line friendly, without having the command-line stuff in the regular library file?  Should my index.js just have exports.myFunction = require('my-module.js') and then go on to handle the command-line case?
17:09 < gerconfused> drudge: I basically have no code in the corresponding controller function for create, because I don't know what to put in it with locomotive.js, it's pretty undocumented
17:09 < thl0> substack: knowing your opinion about mocking, wanted to know if you find something like: https://github.com/thlorenz/proxyquire still usefull
17:09 < substack> TehShrike|Work: use the browserify field in package.json to specify a different entry point than the main field
17:09 < gerconfused> drudge: http://pastebin.com/W8J8VaQE
17:10 < substack> thl0: I haven't needed something like that
17:11 < thl0> it's sometimes usefull even to just quiet the logger during tests
17:11 < thl0> i.e. override the log module
17:11 < drudge> gerconfused: what does your routes.js look like
17:11 < drudge> you'd need something like this.resources('users'); to hook up the controller
17:11 < TehShrike|Work> substack: this isn't for browserify, though, this is just for supporting require('my-module') and node my-module [command-line arguments] 
17:12 < thl0> substack: btw, thanks for turning me on to tap that thing is awesome
17:12 < hemanth_> niggler, missing something?
17:13 < drudge> gerconfused: http://locomotivejs.org/guide/routing.html
17:13 < gerconfused> drudge:  yes, that is accomplished, I just don't know how to actually view the form input
17:13 < gerconfused> drudge: I
17:14 < gerconfused> drudge: I just don't know where it goes. In CodeIgniter it was available through fx $this->input->post('fieldname')
17:14 < drudge> gerconfused: are you using the bodyParser middleware (this is express stuff)
17:14 < drudge> you should be able to use this.param('some_form_field')
17:15 < gerconfused> drudge: yes, I am. so I should look at express docs for this?
17:15 < drudge> gerconfused: http://locomotivejs.org/guide/controllers.html
17:15 < drudge> See Parameters
17:15 < drudge> A controller will often inspect data sent in the request, in order to construct an appropriate response. Use the param() function to access data contained in route, query, or body parameters.
17:16 < drudge> in express it would be req.body, in locomotive you can use this.request.body or this.param('some_field')
17:17 < gerconfused> drudge: that is very helpful, thank you
17:17 -!- mode/#Node.js [-b *!*@gateway/web/freenode/ip.98.154.231.236] by Nexxy
17:17 -!- mode/#Node.js [-b *!*@hsrp-bgp.4over.com] by Nexxy
17:17 -!- mode/#Node.js [-b *!*@cpe-98-154-231-236.socal.res.rr.com] by Nexxy
17:17 < drudge> gerconfused: anytime
17:22 < thl0> TehShrike|Work: you could just require a separate module that exports a function into which you pass the command line args and it does it's thing
17:22 < thl0> TehShrike|Work: you'd only require and call it when module.parent is null 
17:22 < thl0> TehShrike|Work: i.e., it isn't required by another module
17:22 < bradleymeck> anyone know of a good ORM for MySQL in Node? (person asking me in RL)
17:26 < sulaiman> Lil Brother, found it
17:32 < superjoe> bradleymeck, try sequelize
17:33 < aandy> clever name
17:36 < gerconfused> drudge: made it work now, thank you so much. It's pretty cool that you can post stuff to the controller root and that it redirects by itself
17:36 < drudge> gerconfused: awesome, glad you got it working. Locomotive is pretty cool
17:38 < cyberd0m> Hi, I'm a bit puzzled with express-expose. When I call app.expose, it's undefined. However, I clearly require it. Also, if I go in the afromentioned library and add console.log(app.expose), it's defined. 
17:39 < cyberd0m> It seems like express-expose add the .expose() function to the wrong app variable.. 
17:40 < aldus> hello. When using http.get I see that the execution flow keeps going on... how can I stop the script execution until I have results from the http.get request?
17:42 < Spion> you provide your code in a function which you pass to http.get e.g. http.get(url, function(res) { /* code continues here */ });
17:45 < thl0> aldus: Spion: it should actually be: function (err, res) { /* handle err if present and continue */ }
17:45 < Spion> thl0, are you sure?
17:46 < thl0> Spion: actually I was wrong http://nodejs.org/api/http.html#http_http_get_options_callback
17:47 < Spion> yeah apparently its an exception for some reason.
17:47 < Spion> and errors are handled like in eventemitters
17:47 < thl0> Spion: looks like http.get can't error?
17:47 < thl0> Spion: yeah, that's it
17:48 < thl0> I think you can also do http.get(..).on('data', fn) or something similar (ie pass no callback
17:48 < aldus> thl0, Spion, thanks - I thought I could do it without putting my procedure inside the function...
17:49 < Spion> you can, but its not exactly standard. for example, you can use fibers.
17:49 < thl0> aldus: I'd stay away from flow control libs at first in order to understand how things work under the hood
17:50 < thl0> aldus: after that you can use one if you like the code better (there are about a gzillion out there)
17:50 < gabrieluk> aldus, if you are confused on how things are working async, go here http://callbackhell.com/
17:50 < aldus> thl0, gabrieluk thank you i'll check that out
17:51 < thl0> aldus: I wrote one: http://github.com/thlorenz/runnel - only 70 loc - read through it in order to get a better idea of flow control in nodejs
17:53 < Spion> but really, at the end, the only way to truly *wait* for a function to finish is to use fibers and its libraries ( https://github.com/laverdet/node-fibers )
17:54 < Spion> all other ways are based on continuation-passing style.
17:56 < thl0> Spion: fibers must be rewriting your code for that to work right?
17:57 < Spion> no. I think it recompiles V8. Not sure, in any way it does involve quote some C++ code. But it doesn't transform code.
17:58 < thl0> Spion: ok, wonder how you would use that on a deployed site (i.e. nodjitsu) since their node will not be recompiled
17:59 < Spion> I'm not sure if it needs to patch (recompile) node. Maybe its just a C++ module.
18:00 < thl0> Spion: I guess it's an option in case you wanna get around the callback model all together
18:00 < thl0> Spion: I personally like the nodejs style and wouldn't deviate further from it than just rearranging my callbacks
18:00 < cyberd0m> Why this is not working? : https://gist.github.com/3777310
18:00 < Spion> yup, at least until harmony generators come to V8
18:01 < noxoc> What is currently the most popular javascript bdd/tdd library? I'm used to RSpec and I'd prefer a similar one for node testing.  
18:02 < draginx> http://clock.co.uk/tech-blogs/deploying-nodejs-apps are there better alternatives nowadays instead of Jake/Monit/Upstart?
18:03 < Spion> noxoc, i think mocha is the most popular at the moment ( http://visionmedia.github.com/mocha/ )
18:04 < noxoc> Spion: ahâ€¦ the syntax looks comfortably familiar :) thanks!
18:04 < cyberd0m> I thought I was simply adding a variable to a prototype and printing it.. I really don't get how this doesn't work ;(
18:05 < Spion> use constructorFunction.prototype.property = value
18:07 < tnorris> in src/node_buffer.cc, `AsciiSlice` and `Utf8Slice` are the exact same. Does that mean <buffer>.toString('utf8') will always equal <buffer>.toString('ascii')?
18:07 < cyberd0m> Isn't require('express').application returning the prototype?
18:15 < Guest81196> niggler: hey
18:16 < niggler> hellp Guest81196 
18:16 < niggler> *hello Guest81196 
18:16 < Guest81196> it's harbhub
18:16 < Guest81196> :)
18:16 < niggler> why Guest81196 ?
18:16 < Guest81196> i dont know
18:16 < Guest81196> let me log out and back in
18:16 < niggler> does your client not support custom nicks?
18:16 < niggler> wait Guest81196 
18:16 < Guest81196> lol
18:16 < niggler> try /nick harbhub
18:16 < Guest81196> my name is harbhub!
18:16 < thl0> noxoc: for node testing I'd go with: https://github.com/isaacs/node-tap
18:16 < harbhub> got it
18:17 < harbhub> thanks  :)
18:17 < harbhub> niggler:  so each cell has tags
18:17 < harbhub> 'cell' 
18:17 < harbhub> 'row#'
18:17 < harbhub> 'column#'
18:17 < simong> Is there a way to close all open http connections in node without manually keeping them in a hash somewhere?
18:17 < thl0> noxoc: it mimics the actual api use better i.e. your tests look like the code that would use the function you are testing
18:17 < Spion> cyberd0m, no. if it were, you would have to use var app = new express();
18:17 < harbhub> so we can target all cells, specific rows, specific columns, or even specific cells!
18:18 < noxoc> thl0: okay, thanks! I will have a look at it :)
18:18 < cyberd0m> Spion: ok thanks
18:18 < ksmth> hey guys
18:18 < Spion> express probably has the constructor function defined internally. don't know how its called. Perhaps they'll know in #express
18:18  * Spion checks the source
18:20 < ksmth> does anyone know a well working background queueing solution like resque in ruby?
18:20 < mbalho> i use js callbacks for that
18:21 < ksmth> hmm, even for long running tasks?
18:21 < mbalho> depends, child_process is pretty nice for long running evented stuff
18:21 < thl0> ksmks: if it is used in same process and should be lightweight have a look at: https://github.com/thlorenz/minimal-queue
18:22 < Spion> cyberd0m, it looks like it doesn't use prototypical inheritance.
18:23 < Spion> (at least not native-JS prototypical inheritance: it does copy all attributes from the application.js prototype manually)
18:27 < thl0> ksmth: for something more powerful look at: https://github.com/flatiron/neuron
18:27 < katt> anyone care to take a look at why this is giving me a "Can't set headers after they are sent."-error? Seems to be line 24 that is causing this... http://pastebin.com/N8PPUMZB
18:27 < thl0> ksmth: uses reddis under the hood
18:27 < ksmth> thl0: it's not that advanced, I just need to get a status on the task, whether it's running or not.
18:27 < ksmth> thl0: thanks, I will look into both :)
18:36 < katt> anyone care to take a look at why this is giving me a "Can't set headers after they are sent."-error? Seems to be line 24 that is causing this... http://pastebin.com/N8PPUMZB
18:37 < kevin> im getting a Error: version not found: 0.3.0 : express-expose/0.3.0 ; anyone else have this issue when doing a npm install express-expose
18:37 < kevin> yes katt
18:38 < kevin> you are running next(); after the if
18:38 < kevin> which is triggering before the if statement ends
18:38 < kevin> and there is an issue in your if statement
18:45 < harbhub_> niggler: hey
18:45 < harbhub_> i got punted
18:45 < kevin> anyone? im getting a Error: version not found: 0.3.0 : express-expose/0.3.0 ; anyone else have this issue when doing a npm install express-expose
18:46 < harbhub_> niggler!
18:46 < niggler> .
18:49 < kevin> hi guys.  katt and I would like to know the best way to have something fire only after the forloop is done executing....
18:50 < CIA-118> node: Nathan Rajlich v0.8 * r0f2ed2b / (lib/http.js test/simple/test-http-client-response-domain.js): http: make the client "res" object gets the same domain as "req" - http://git.io/yP34Nw
18:53 < balgarath> @kevin not sure if its the best way - inside the loop but at the end, do a check to see if you are on the last leg of the loop - and run the code if you are
18:54 < clever> balgarath: the npm async module also has stuff to help with that
18:55 < balgarath> clever: thanks, hadn't ran across that before
19:02 < lrvick> At the risk of starting a flame war, could those who subscribe to isaacs npm style js comment on the sanity of my backbone styling here? http://pae.st/dSWJ/
19:04 -!- mode/#Node.js [+o piscisaureus] by ChanServ
19:06 < tnorris> i'm trying to figure out what operation in `Buffer:Utf8Slice` is taking the most time, but don't have much cpp experience. anyone have an idea how I could output time taken on each line?
19:07 < eventhor1zon> t/quit
19:08 < harbhub> niggler: hey
19:08 < harbhub> i keep getting D/Ced
19:08 < niggler> harbhub: lets do it over email or gchat
19:08 < harbhub> ok
19:08 < harbhub> gchat
19:12 < q_> whats the most mature futures library that you guys use ?
19:15 -!- mode/#Node.js [+o ryah] by ChanServ
19:16  * jetienne is tempted
19:18  * terinjokes hits jetienne with a large trout
19:24 < gkatsev> it's slaps around a bit
19:26 < staar2> where i could find more articles about nodejs and developed apps ?
19:28 < TehShrike|Work> staar2: what do you want to read about?
19:28 < EyePulp> I forget - what's the symbol to use in a package.json to get the latest of something versus a particular version?  "foo" : "?"
19:29 < staar2> more on web dev
19:29 < staar2> express
19:29 < TehShrike|Work> EyePulp: * or empty string, or >version to specify a minimum https://npmjs.org/doc/json.html
19:29 < staar2> and scaling
19:29 < CoverSlide> "*"
19:29 < q_> ugh, so many promises library, anyone have any recomendations ?
19:30 < bradleymeck> avoid them?
19:30 < daviddripps> agreed
19:30 < bradleymeck> promises must wrap every api if they want to look sane
19:31 < EyePulp> TehShrike|Work: danke - don't know how come I couldn't figure that out. =)
19:31 < q_> bradleymeck, what do you use ?
19:31 < BennyLava> EyePulp: they have this cool thing called 'documentation'
19:31 < bradleymeck> async.js generally is enough
19:32 < q_> I have to loop through an array, async data lookup, add to a list, and finally callback with the completed list
19:32 < CoverSlide> you could roll your own
19:32 < q_> bradleymeck, ok checking
19:32 < CoverSlide> all you need it to have a counter
19:32 < q_> I have a hand rolled, I'm not crazy about it
19:32 < thl0> q_: the most mature one is: https://github.com/kriskowal/q
19:32 < thl0> async is not a promis lib
19:32 < livinded> is it that hard to just wrap callbacks?
19:32 < EyePulp> BennyLava: And I've heard they're working on a thing called "funny jokes" but clearly they're not there yet. =)
19:32 < CoverSlide> it's named q, it must be stupid
19:32 < thl0> solves a similar problem though
19:33 < BennyLava> EyePulp: I'm afraid I don't see how jokes are relevant to what I said :|
19:33 < TehShrike|Work> oh ffs
19:33 < TehShrike|Work> BennyLava: please stop trolling
19:33 < TehShrike|Work> Just in general
19:33 < BennyLava> TehShrike|Work: excuse me?
19:33 < EyePulp> BennyLava: agreed. 
19:33 < thl0> q_: for s super simple flow control lib try: http://github.com/thlorenz/runnel
19:34 < BennyLava> TehShrike|Work: I'm very sorry if reminding people of the existence of docs is considered bad form; will you please accept my apologies?
19:35 < q_> thl0, q looks nice
19:36 < thl0> q_: it is, however, I prefer nodejs callback style and maybe a small flow control module
19:37 < BennyLava> TehShrike|Work: don't leave me hanging here bro, let me know if you accept my apologies!!
19:40 < TehShrike|Work> 8-|
19:40  * TehShrike|Work extends the scepter of internet forgiveness
19:53 < jeffsmykil1> Anyone have trouble installing grunt recently?
19:54 < thl0> jeffsmykil1: isn't there a grunt task for that?
19:54 < thl0> jeffsmykil1: sorry, couldn't help myself
19:55 < jeffsmykil1> thl0: even as a complete node newb i still appreciated it
19:56 < Robint91> hi, how good is node.js/v8 for control applications? What I mean is that I want to use node.js or the v8 javascript engine to do some control stuff (read real hardware, "light on, light off, read binary input") and show that information on a webpage, ...
19:56 < Robint91> I need to execute the controll loop every 10ms, 
19:57 < jeffsmykil1> Robint91: I think Rebecca Murphy wrote about some of that type of stuff iirc
19:58 < q_> bradleymeck, this asynch https://github.com/caolan/async ?
19:58 < bradleymeck> yes
19:59 < q_> thx
20:01 < thl0> q_: I know lots of people use that async lib, but imo it's way too big an should have been split up into several modules
20:01 < thl0> q_: ie. simple flow control (sequential) and another for parallel tasks
20:01 < superjoe> if I put "npm prune" in "scripts" in package.json, and then run the script with "npm run ..."  it does not have any effect, but if I run it like "npm prune" it does. what gives?
20:04 < thl0> superjoe: use 'npm run-script ...'
20:04 < noxoc> I'm a bit confused: is module.exports (seen in node modules) roughly the same as exports (seen in express modules) 
20:04 < noxoc> ?
20:04 < superjoe> thl0, run is an alias for run-script.
20:04 < thl0> superjoe: and you have to name the script
20:05 < thl0> superjoe: see here https://github.com/thlorenz/dog/tree/master/examples/blog-site
20:05 < thl0> superjoe: that script is set up here: https://github.com/thlorenz/dog/blob/master/package.json#L12
20:06 < superjoe> thl0, my package.json is set up correctly. it is running the command
20:06 < superjoe> npm prune appears to have behavior depending on environment variables that npm sets when you run a script.
20:07 < thl0> superjoe: hm, try to just put prune (without npm)
20:08 < bradleymeck> noxoc: read up on node's require
20:09 < superjoe> thl0, no go
20:09 < superjoe> thl0, I told you, it's *running the command*
20:09 < hillct> isaacs: how do I pass build arguments for dependencies within package.json? For example my app depends upon mongodb and I want to always pass the argument --mongodb:native to coerce it to build the binary BSON parser. Is there a way I can indicate this within my package.json? Or to at least default to native binary builds where possible?
20:10 < superjoe> hillct, define a "start" script
20:10 < superjoe> and it's rude to call out people by name without an invitation
20:10 < thl0> superjoe: sorry, can't help you then, why do you want to have prune as a packagejson script anyways?
20:10 < hillct> superjoe: where the start script does what? Executes the nom call, with the args?
20:10 < superjoe> thl0, I have a build script which gets run on deploy - I want my deploy script to do npm prune && npm install && make build
20:11 < superjoe> hillct, sorry, I misread your question
20:11 < Hupo> yesss
20:11 < Hupo> no more errors from firefaux
20:13 < thl0> superjoe: looks like you want a pre/post install script, maybe this helps: https://npmjs.org/doc/scripts.html
20:13 < superjoe> nope
20:13 < Hupo> hey Mayhem
20:14 < Hupo> does 4chan X like in any way ever touch the mobile dom elements and so?
20:14 < Hupo> or does it just work on the desktop elements
20:15 < thl0> superjoe: well, if you can't find anything there, then I assume what you ar trying to do is not supported
20:15 < superjoe> thl0, yeah, I think it's a bug. making an issue now
20:15 < Hupo> oops, wrong channel
20:18 < superjoe> thl0, https://github.com/isaacs/npm/issues/2827
20:19 < thl0> superjoe: still don't understand, why you'd want to auto via a script, why not just run 'npm prune' instead of 'npm run-script doit'?
20:20 < thl0> superjoe: auto should have been prune
20:20 < superjoe> my actual script is     "build": "npm prune && npm install && coke build",
20:20 < qballer> Hey guys, I wonder if you can help me out with these stuff ? http://stackoverflow.com/questions/12229079/sharing-binary-buffer-between-node-js-server-and-browser
20:23 < thl0> superjoe: why not make 'coke build' a post install script?
20:23 < thl0> superjoe: then you can just 'npm install' and 'coke install' runs also
20:23 < superjoe> thl0, because I'm never doing a post install. I'm checking out a branch and then hot-swapping code
20:23 < thl0> superjoe: seems like a very special case - good luck
20:24 < superjoe> thl0, what's the normal case?
20:24 < thl0> superjoe: put all your dependencies in package.json and run npm install
20:25 < thl0> superjoe: if you need specific branches from a git repo, you can specify that url as a dependency
20:26 < superjoe> thl0, that's how I am doing things
20:27 < superjoe> thl0, I suppose I could move "npm prune && coke build" to "post-install" but that wouldn't solve the problem
20:27 < Hupo> goddamn chrome
20:27 < Hupo> it keeps interpreting my string of CSS as a octal literal
20:27 < thl0> superjoe: this page summarizes most of your options:https://npmjs.org/doc/json.html
20:27 < Hupo> and then says they're not allowed in strict mode
20:28 < superjoe> thl0, I've read that page twice
20:28 < thl0> superjoe: scroll down to second half - 'dependencies' to read about pulling depencies from a url
20:28 < thl0> superjoe: :)
20:28 < Nuck> Hupo: That's an interesting bug, I must admit
20:28 < superjoe> thl0, I'm not trying to deploy dependencies from a URL. I'm deploying the app itself
20:29 < thl0> superjoe: maybe run a bash script then to deploy the app
20:30 < Hupo> I have no idea what exactly it is even interpreting as an "octal literal" here, especially since if there is 0XXX or whatever somewhere in the string it's smack-dab in the middle of it surrounded by a whole bunch of other text
20:30 < Hupo> so why on earth would chrome think of the whole thing as an octal literal?!
20:30 < superjoe> thl0, jesus christ. I have the dependency managment and deployment for my app set up fine. I was just asking about this npm bug I discovered. 
20:30 < Hupo> so now as a result I just have to develop with strict mode off :\
20:31 < thl0> superjoe: as I said, your case doesn't seem to come up many times therefore might not be supported, but good luck with it!
20:31 < superjoe> thl0, thanks.
20:32 < katt> anyone wanna take a look a this? http://pastebin.com/cMWLh0vL :)
20:33 < peterbraden> anyone have any experience debugging build
20:33 < peterbraden> 's on travis ci?
20:33 < peterbraden> at the moment I have to push a change to trigger a build - is there a way to get a console to get more immediate feedback
20:34 < thl0> peterbraden: not that I know off, but the console output should give you good info about what went wrong
20:34 < thl0> peterbraden: otherwise, add more logging to your app and redeploy to get a better idea of what is wrong
20:35 < peterbraden> I have a missing library so I want to poke around the apt install directory (http://travis-ci.org/#!/peterbraden/node-opencv/builds/2549470) - it's just gonna take a lot of pushes to debug
20:37 < katt> anyone wanna take a look a this? http://pastebin.com/cMWLh0vL :) (shameless repost)
20:37 < thl0> peterbraden: that looks pretty tough to solve without console access
20:38 < thl0> peterbraden: I'd set up a Ubuntu virtual box, install same node version and try to repro it in there
20:38 < peterbraden> th10: yeah :(
20:38 < peterbraden> th10: do you know if they have a VM with the same setup available?
20:39 < peterbraden> presumably they are spinning them up from an image somewhere
20:39 < thl0> no, but you can easily set one up
20:39 < thl0> peterbraden: all you need to install is node 0.6 and you should be ready to go
20:44 < gbhatnag> hi there - anyone here have experience with using handlebars with node?
20:45 < gbhatnag> I'm new to node + handlebars and want to pre-compile templates on the server, but am not sure how best to send them over to the client
20:46 < thl0> gbhatnag: look into http://github.com/thlorenz/hotplates
20:46 < thl0> peterbraden: found this, not sure if it helps: https://github.com/travis-ci/travis-cookbooks/tree/master/ci_environment
20:48 < Venom_X> gbhatnag: use hbs https://github.com/donpark/hbs
20:48 < thl0> gbhatnag: as an example look at this snippet from my website: https://github.com/thlorenz/thlorenz.com/blob/master/app.js#L69
20:48 < peterbraden> thanks - I'm downloading a virtualbox image for ubuntu
20:48 < gbhatnag> member:thl00, thanks taking a look now
20:48 < peterbraden> lemme check out those cookbooks
20:49 < thl0> gbhatnag: hotplates allows you to use templates and partials client and server side (I have to update the documentation a bit to make that clearer)
20:50 < katt> anyone wanna take a look a this? http://pastebin.com/cMWLh0vL :) (shameless repost)
20:50 < katt> all necessary info in pastebin
20:51 < thl0> gbhatnag: feel free to ask if you don't understand something, (preheat is preparing the client side tempates)
20:52 < gbhatnag> thl0, cool, thanks - looking through the docs now
20:57 -!- Topic for #Node.js: node.js - latest stable: http://nodejs.org/dist/v0.8.9/ - latest beta: http://nodejs.org/dist/v0.9.2/
20:57 -!- Topic set by bnoordhuis [~bnoordhui@ip125-96-214-87.adsl2.static.versatel.nl] [Tue Sep 18 11:17:27 2012]
20:57 [Users #Node.js]
20:57 [@isaacs          ] [ cpsubrian       ] [ gregmoreno      ] [ kraft         ] [ ph^             ] [ stylus         ] 
20:57 [@konobi          ] [ creationix      ] [ Gregor          ] [ kranius       ] [ PhantomSpark    ] [ styol          ] 
20:57 [@Nexxy           ] [ crodas          ] [ grumpyOldRussian] [ krishna       ] [ philip__        ] [ substack       ] 
20:57 [@piscisaureus    ] [ cronopio        ] [ gsf             ] [ kuja          ] [ philips_        ] [ substans_      ] 
20:57 [ [[zz]]          ] [ cryptops1       ] [ gshipley        ] [ Kullt         ] [ PhilK           ] [ sugyan         ] 
20:57 [ [diecast]       ] [ CStumph         ] [ Guest27403      ] [ kuplatupsu    ] [ pifantastic     ] [ superjoe       ] 
20:57 [ \13k            ] [ cxreg           ] [ Guest32542      ] [ L_star        ] [ pig             ] [ sveisvei       ] 
20:57 [ \ask            ] [ cyberd0m        ] [ Guest42394      ] [ langworthy    ] [ Pilate          ] [ SvenDowideit   ] 
20:57 [ \mSg            ] [ cyphase         ] [ Guest55156      ] [ Lartsa_       ] [ plato           ] [ Swaagie        ] 
20:57 [ __class__       ] [ D4RK-PH0ENiX    ] [ Guest81631      ] [ lazyshot      ] [ polyrhythmic    ] [ swaj           ] 
20:57 [ __doc__         ] [ Daegalus        ] [ Guest93138      ] [ Lee--         ] [ poorman         ] [ Swizec         ] 
20:57 [ __main__        ] [ daffl           ] [ Guiltymosquitoes] [ Leeol2        ] [ pquerna         ] [ t0mbstone5     ] 
20:57 [ __sri           ] [ daleharvey      ] [ guor            ] [ leev          ] [ prasm           ] [ Taar779_w      ] 
20:57 [ _baton_         ] [ damartin        ] [ guybrush        ] [ LeftWing      ] [ prettyrobots    ] [ tahu           ] 
20:57 [ _br_            ] [ dambalah        ] [ gwoo            ] [ legind        ] [ Proditor        ] [ taky1          ] 
20:57 [ _kill-9_        ] [ danheberden     ] [ haarg           ] [ Lemminkainen_ ] [ prosquare       ] [ tanepiper      ] 
20:57 [ _kud            ] [ danielfilho     ] [ halfhalo        ] [ lempa         ] [ przemoc         ] [ taquter        ] 
20:57 [ _mdp            ] [ danielfilho|w   ] [ happosade       ] [ leonardo      ] [ psino           ] [ tassmjau       ] 
20:57 [ _root_          ] [ Danielss89      ] [ hatch           ] [ leptonix      ] [ purr            ] [ tchopper       ] 
20:57 [ _sorensen       ] [ darkc0met       ] [ heatxsink       ] [ levi501d      ] [ pyykkis         ] [ tchopper1      ] 
20:57 [ _sri            ] [ davidbanham     ] [ hellopat        ] [ lillis        ] [ q_              ] [ tdmackey       ] 
20:57 [ _th_n           ] [ davidcoallier   ] [ hemanth         ] [ littlebear    ] [ qballer         ] [ tec27          ] 
20:57 [ a2n             ] [ daviddripps     ] [ herbnerder_     ] [ ljharb        ] [ qbit            ] [ TechnoCat      ] 
20:57 [ AAA_awright     ] [ davidsklar      ] [ heroux          ] [ llrcombs      ] [ qFox            ] [ teff           ] 
20:57 [ aalex-sat       ] [ dawolf          ] [ herzi           ] [ lmatteis      ] [ r0tha           ] [ TehShrike1     ] 
20:57 [ aandy           ] [ dazld           ] [ herzogharker    ] [ lmjabreu      ] [ RabidFire       ] [ TehShrike|Work ] 
20:57 [ AaronMT         ] [ dec             ] [ hevets          ] [ loglaunc1     ] [ radiodario      ] [ tellnes        ] 
20:57 [ AaronO_         ] [ dekz            ] [ hexreel         ] [ Lorentz       ] [ radmiraal       ] [ terinjokes     ] 
20:57 [ aderuwe         ] [ deltab          ] [ hide            ] [ lpin          ] [ rafaelverger    ] [ terite         ] 
20:57 [ admc            ] [ Demux           ] [ hilefoks_       ] [ lrvick        ] [ ral             ] [ tetbert        ] 
20:57 [ ag4ve           ] [ deoxxa          ] [ hillct          ] [ luite         ] [ ralphholzmann   ] [ tg             ] 
20:57 [ agnat           ] [ Derander        ] [ hipsterslapfight] [ lukegb        ] [ ramitos         ] [ tgriesser      ] 
20:57 [ ahbritto_       ] [ dested          ] [ hlindset        ] [ lushious      ] [ Rantanen        ] [ The24z_away    ] 
20:57 [ Aikar           ] [ devdazed_       ] [ homingli        ] [ lz            ] [ rauchg          ] [ theCole        ] 
20:57 [ ajpiano         ] [ dgathright      ] [ hortinstein     ] [ m0            ] [ raydeo          ] [ thedaywi1lcome ] 
20:57 [ akshayms        ] [ dguttman        ] [ Hosh            ] [ Mack          ] [ Raynos          ] [ TheDracle      ] 
20:57 [ AlbireoX        ] [ dhpe            ] [ Hupo            ] [ magn3ts       ] [ raz             ] [ TheFuzzball    ] 
20:57 [ alek_b          ] [ diegoviola      ] [ i42n            ] [ mainerror|away] [ rcrowley        ] [ thejefflarson  ] 
20:57 [ alexgordon      ] [ diminoten       ] [ iaincarsberg    ] [ majek         ] [ rcs             ] [ TheJesus       ] 
20:57 [ alextucker      ] [ ding            ] [ ianl`_          ] [ malcolmva     ] [ redir           ] [ TheJH          ] 
20:57 [ AllStruck       ] [ disnet          ] [ idefine         ] [ maletor       ] [ reid            ] [ TheMoonMaster  ] 
20:57 [ Almindor        ] [ djazz           ] [ ifarkas_away    ] [ mandric       ] [ Reko            ] [ TheNumb        ] 
20:57 [ alta            ] [ dKc             ] [ igl             ] [ ManneW        ] [ rektide         ] [ therealk_      ] 
20:57 [ Amfy            ] [ dleary          ] [ iksik           ] [ manuelbieh    ] [ remysharp       ] [ thl0           ] 
20:57 [ andrewde`       ] [ dlg             ] [ im0b            ] [ mape          ] [ rendar_         ] [ thomblake1     ] 
20:57 [ andrewffff_     ] [ dmilith         ] [ imarcusthis     ] [ maqr_         ] [ retornam        ] [ thread         ] 
20:57 [ anoemi          ] [ dmoffett        ] [ ImBcmDth_       ] [ marienz       ] [ retrostyle|13   ] [ thunders_      ] 
20:57 [ AntelopeSalad   ] [ dmrz            ] [ inarru_         ] [ markwubben    ] [ rgmarcha_       ] [ tilgovi        ] 
20:57 [ apa-_           ] [ dnyy            ] [ inimino         ] [ marlun        ] [ rhutchison__    ] [ tim            ] 
20:57 [ Apage43         ] [ doffm           ] [ initohen        ] [ Martz         ] [ RichardBronosky_] [ tim_smart      ] 
20:57 [ appr            ] [ dogmatic69      ] [ innociv         ] [ maru_cc___    ] [ rickibalboa     ] [ timeturner     ] 
20:57 [ apraxas         ] [ doki_pen_       ] [ ins0mnia        ] [ masch         ] [ rjmt_           ] [ timkuijsten    ] 
20:57 [ aromasca        ] [ dommy_          ] [ insin           ] [ matt_c        ] [ rmill           ] [ timmywil       ] 
20:57 [ ashb            ] [ don_jones       ] [ Internet13      ] [ mattgifford   ] [ robde           ] [ TimTim`        ] 
20:57 [ asherkin        ] [ Drager_         ] [ intripoon       ] [ MattJ100      ] [ Robdgreat       ] [ Tivs           ] 
20:57 [ Astro-          ] [ Draggor         ] [ irclogger_com   ] [ matuzak       ] [ robinson_k      ] [ tizzo-afk      ] 
20:57 [ audreyr         ] [ dragon          ] [ IrishGringo     ] [ MaxGaudronBNC ] [ Robint91        ] [ tlync__        ] 
20:57 [ augustl         ] [ drey            ] [ isaacs_         ] [ mbalho        ] [ rodr1go         ] [ tnorris        ] 
20:57 [ aus3ys          ] [ drodger         ] [ ivan\           ] [ mc            ] [ roger_raymond   ] [ tobmaster      ] 
20:57 [ AustinYun       ] [ DrPizza         ] [ ivan`           ] [ Mch1          ] [ Rolken          ] [ tokuhirom      ] 
20:57 [ aut0mata        ] [ drspin          ] [ jackyyll        ] [ mde_          ] [ rook2pawn       ] [ tom-tomaso     ] 
20:57 [ autif           ] [ drudge          ] [ jacobrask       ] [ Me1000        ] [ rookiebrawnpower] [ tomaw          ] 
20:57 [ average_drifter ] [ dscape          ] [ jaequery_       ] [ med_          ] [ rounce          ] [ tomb           ] 
20:57 [ AvianFlu        ] [ DTrejo          ] [ jakehow_        ] [ medice        ] [ rovar           ] [ tomilaine      ] 
20:57 [ Axsuul          ] [ Dubzik          ] [ jalcine         ] [ mekwall       ] [ royh            ] [ TomRone        ] 
20:57 [ azend           ] [ duko            ] [ jamesd          ] [ mephux        ] [ rphillips       ] [ TomWij         ] 
20:57 [ badem4o         ] [ duncanbeevers   ] [ jamiep          ] [ MerlinDMC     ] [ rtgibbons[away] ] [ TooTallNate    ] 
20:57 [ baer            ] [ dz0ny           ] [ janmower        ] [ merrihew      ] [ rudolfrck       ] [ toothrot       ] 
20:57 [ bakadesu        ] [ dzajdband       ] [ jaredrhine      ] [ mertimor      ] [ RushPL          ] [ topaxi         ] 
20:57 [ balgarath       ] [ ebright         ] [ jareiko         ] [ meso_         ] [ russell_h       ] [ totallymike    ] 
20:57 [ balupton        ] [ eckoit          ] [ jarek           ] [ metadaddy     ] [ RussellB28      ] [ toxico`        ] 
20:57 [ barneybook      ] [ ed2093          ] [ jarr0dsz        ] [ metellus      ] [ russfrank       ] [ tphummel       ] 
20:57 [ barneybook_work ] [ edr             ] [ jaseemabid      ] [ methoddk      ] [ rvagg           ] [ tralamazza     ] 
20:57 [ batmania        ] [ edsu            ] [ jasonpincin     ] [ mickhansen    ] [ rwaldron        ] [ traph          ] 
20:57 [ bburhans        ] [ EdwardIII       ] [ jasonrm         ] [ mikeal        ] [ ryanfitz        ] [ trb            ] 
20:57 [ beasty_         ] [ edwardly        ] [ JasonSmith      ] [ mikedg_       ] [ ryanj           ] [ trepan         ] 
20:57 [ beawesomeinstead] [ einaros         ] [ jayne           ] [ mikegerw1tz   ] [ ryanRT          ] [ triptec        ] 
20:57 [ ben_alman       ] [ ejnahc          ] [ jbpros          ] [ mikey_p       ] [ ryanseddon      ] [ trodrigues     ] 
20:57 [ BennyLava`      ] [ eldios          ] [ jbueza          ] [ mirzu         ] [ s5fs            ] [ truedat101     ] 
20:57 [ Benvie          ] [ elijah-mbp      ] [ jcrew           ] [ MitchW        ] [ s5fs_           ] [ ttilley        ] 
20:57 [ beppu           ] [ elliottcabl3    ] [ jdeibele        ] [ mjr84         ] [ saamyjoon       ] [ tuhoojabotti   ] 
20:57 [ bid             ] [ elliottcable    ] [ jeedey          ] [ mmalecki      ] [ saapaz          ] [ Twelve-60      ] 
20:57 [ bigkevmcd       ] [ else-           ] [ jefferai        ] [ mon           ] [ saikat          ] [ txdv           ] 
20:57 [ bigmeow         ] [ emilsedgh       ] [ jemparing       ] [ monokrome     ] [ salsamontes     ] [ Typo           ] 
20:57 [ billy           ] [ emjayess        ] [ jeremyhammer    ] [ moonlite      ] [ samstefan       ] [ Validatorian   ] 
20:57 [ bindr           ] [ EnosFeedler     ] [ jergason        ] [ Morkel        ] [ Sapr0           ] [ vanb777        ] 
20:57 [ Blorb           ] [ entitydi1ital   ] [ jesusabdullah   ] [ Mortchek      ] [ satyr           ] [ Venemo         ] 
20:57 [ blueadept       ] [ epa_            ] [ jgornick        ] [ Motest003     ] [ sawjig          ] [ Vennril        ] 
20:57 [ blup            ] [ Epelii          ] [ jibay           ] [ mridgway      ] [ sawrubh         ] [ Venom_X        ] 
20:57 [ bnoordhuis_     ] [ epokmedi1       ] [ jiboumans__     ] [ mrkurt        ] [ sbook           ] [ version2beta   ] 
20:57 [ bodisjw         ] [ er1c_           ] [ jimbot1         ] [ MrMaksimize   ] [ schredder       ] [ VesQ           ] 
20:57 [ boltR           ] [ Erriond         ] [ jimrhoskins     ] [ mrmoneyc      ] [ scott_gonzalez  ] [ vinc_          ] 
20:57 [ BombStrike      ] [ estebistec      ] [ jimt            ] [ MrNibbles     ] [ scttnlsn        ] [ visnup         ] 
20:57 [ Bonuspunk       ] [ esundahl        ] [ jjbohn          ] [ mscdex        ] [ sdboyer         ] [ visnup_        ] 
20:57 [ booo            ] [ etcetera        ] [ JJMalina        ] [ munro         ] [ sdboyer_        ] [ voodootikigod  ] 
20:57 [ bowen199        ] [ euoia           ] [ jkarsrud        ] [ mwilson`      ] [ SecretAgent     ] [ Wa             ] 
20:57 [ bradgignac      ] [ EyePulp         ] [ jkridner_       ] [ mynameis      ] [ seich           ] [ wadey          ] 
20:57 [ brainproxy      ] [ Ezku            ] [ jlord           ] [ N3RG4L        ] [ Sembiance       ] [ wang           ] 
20:57 [ bren2010        ] [ Fabryz          ] [ jmoney          ] [ nail_         ] [ Senji           ] [ wankdanker     ] 
20:57 [ brennen         ] [ fastest963      ] [ jmoyers         ] [ naquad        ] [ sente           ] [ wao            ] 
20:57 [ briancray       ] [ faulkner        ] [ JmZ_            ] [ nathan7       ] [ serapath        ] [ webguynow      ] 
20:57 [ brianloveswords ] [ faulkner-       ] [ jn              ] [ nd__          ] [ serby           ] [ wereHamster    ] 
20:57 [ broofa          ] [ fcoury          ] [ jnylen          ] [ neersighted   ] [ SeriousGoose    ] [ whitman        ] 
20:57 [ brooss          ] [ fearphage       ] [ jocafa          ] [ nerph         ] [ SevenSomething  ] [ Will|          ] 
20:57 [ Bwild           ] [ Fike`znc`znc`znc] [ joeytwiddle     ] [ nfn           ] [ sfurnival       ] [ wink_          ] 
20:57 [ bwinton         ] [ filleokus       ] [ john3909        ] [ niallo        ] [ sh1ftpgdn       ] [ Wizek          ] 
20:57 [ cainus          ] [ FIQ             ] [ john999         ] [ nic4m         ] [ shac            ] [ wizonesolutions] 
20:57 [ callumacrae     ] [ fivetanley      ] [ johncoogan      ] [ nicholasf     ] [ Shadda          ] [ wycats         ] 
20:57 [ CannedCorn      ] [ flagg0205       ] [ jolo2           ] [ niclone       ] [ shajith_        ] [ xandy          ] 
20:57 [ caolanm         ] [ flexd           ] [ Jonghwan        ] [ niftylettuce  ] [ shanlar         ] [ xat-           ] 
20:57 [ carolyns        ] [ Fli-c           ] [ JonnyFunFun[Zzz]] [ niggler       ] [ shanse          ] [ xenol          ] 
20:57 [ cbobo           ] [ foldedcat       ] [ joschi          ] [ niko          ] [ shiawuen        ] [ xenplex        ] 
20:57 [ cce             ] [ foraks          ] [ joshfinnie      ] [ NimeshNeema   ] [ Shrink          ] [ xocel          ] 
20:57 [ ced_            ] [ forzan_         ] [ joshie          ] [ nkuttler      ] [ shuaib          ] [ xonecas        ] 
20:57 [ chadskidmore    ] [ foxbunny_afk    ] [ joshontheweb    ] [ nlogax1       ] [ siksia          ] [ xSmurf         ] 
20:57 [ chapel          ] [ framlin         ] [ joukokar        ] [ nmartin       ] [ simewn          ] [ yankhate1      ] 
20:57 [ chayin          ] [ francisl        ] [ jp-js_          ] [ NodeX         ] [ simong          ] [ yankhates      ] 
20:57 [ Cheery          ] [ Franz__         ] [ jpe__           ] [ nodokodo      ] [ sinclair        ] [ yano           ] 
20:57 [ chiel           ] [ freeformz       ] [ jrdn            ] [ nohu          ] [ sir_tyrion      ] [ ybit           ] 
20:57 [ chilts          ] [ freewil         ] [ jryans          ] [ nphase        ] [ SirFunk         ] [ ybit2          ] 
20:57 [ chjj            ] [ fritzy          ] [ jslatts         ] [ nsm           ] [ sirkitree       ] [ yenz_          ] 
20:57 [ chnops          ] [ frogstarr78     ] [ jso             ] [ nuba          ] [ sj26            ] [ yorick         ] 
20:57 [ chrisdickinson  ] [ Fuu             ] [ jsonified       ] [ Nuck          ] [ Slashbunny      ] [ your_name      ] 
20:57 [ chrisina1ar     ] [ Fwny            ] [ JumpLink2       ] [ nym           ] [ SlexAxton       ] [ YoY            ] 
20:57 [ chrisjaure      ] [ gabriel         ] [ jvolkman        ] [ octane--      ] [ slickplaid      ] [ Ytserman       ] 
20:57 [ Christian87     ] [ gabrieluk       ] [ jxie_           ] [ odyniec_      ] [ slurp           ] [ Yuffster_fun   ] 
20:57 [ CIA-118         ] [ garann          ] [ jxson           ] [ ofan          ] [ Sly[afk]        ] [ yuwang         ] 
20:57 [ cjackson        ] [ Garo_           ] [ Jygga           ] [ ohcibi        ] [ smi^2__         ] [ yzap           ] 
20:57 [ cjm             ] [ garrensmith     ] [ jzacsh          ] [ olasd         ] [ snez            ] [ zackiv31       ] 
20:57 [ ClaudioAlbertin ] [ garrettwilkin   ] [ kaen            ] [ omni5cience   ] [ snuglepuss      ] [ zaheera_       ] 
20:57 [ clever          ] [ gaYak           ] [ Kai`_           ] [ onre          ] [ SomeoneWeird    ] [ zak            ] 
20:57 [ Clex            ] [ gbhatnag        ] [ kall            ] [ ootje         ] [ sorensen        ] [ zaphod1984     ] 
20:57 [ cmwelsh         ] [ gdbz            ] [ kalle           ] [ optixx        ] [ spectre256      ] [ Zauberfisch    ] 
20:57 [ codelahoma      ] [ gedex           ] [ kanzure         ] [ Orbitrix      ] [ Spion           ] [ zedas          ] 
20:57 [ codepal         ] [ generalissimo   ] [ kaspertidemann  ] [ orospakr      ] [ spionL          ] [ Zelfje         ] 
20:57 [ codepal_        ] [ gerard0         ] [ katt            ] [ othiym23      ] [ springmeyer     ] [ zemm           ] 
20:57 [ coderarity      ] [ gerconfused     ] [ kborchers       ] [ owen1         ] [ sqawasmi        ] [ zivester       ] 
20:57 [ codycraven      ] [ ghoti           ] [ keeto           ] [ owenb         ] [ sreeix          ] [ zk             ] 
20:57 [ colinclark      ] [ gildean         ] [ Kester          ] [ owensmartin   ] [ sriley          ] [ zodiak         ] 
20:57 [ combataircraft  ] [ githogori       ] [ Kester`         ] [ Pagan         ] [ srl295          ] [ zonetti        ] 
20:57 [ Connorhd        ] [ gkatsev         ] [ kevindente      ] [ pandark_      ] [ st_luke         ] [ ZorgHCS        ] 
20:57 [ context         ] [ gmci            ] [ Killswitch      ] [ pandark__     ] [ stagas          ] [ zorzar         ] 
20:57 [ coolnalu        ] [ gnarf           ] [ killtheliterate ] [ pandeiro      ] [ stalled         ] [ zykes-         ] 
20:57 [ copongcopong    ] [ gnoirzox        ] [ Kingdutch       ] [ papertigers   ] [ stbuehler       ] [ zz_lazyshot    ] 
20:57 [ Corey           ] [ goraxe1         ] [ KiNgMaR         ] [ patspam       ] [ stephank        ] [ zz_shykes      ] 
20:57 [ cosmincx        ] [ gorillatron     ] [ klobucar        ] [ paulwe        ] [ stisti          ] 
20:57 [ Couto           ] [ Gottox          ] [ kofno           ] [ pavelz        ] [ Stoob__         ] 
20:57 [ CoverSlide      ] [ graeme_f        ] [ konobi_         ] [ pct1          ] [ strax           ] 
20:57 [ cpetzold        ] [ grange|blubb    ] [ kookielawnmower ] [ peterbraden   ] [ stride          ] 
20:57 [ cpg             ] [ greenfire       ] [ kordless_       ] [ petschm       ] [ stutter         ] 
20:57 -!- Irssi: #Node.js: Total of 895 nicks [4 ops, 0 halfops, 0 voices, 891 normal]
20:57 -!- Home page for #node.js: http://nodejs.org/
20:57 -!- Channel #Node.js created Sat Jan 30 07:48:24 2010
20:58 -!- Irssi: Join to #Node.js was synced in 31 secs
20:59 < gbhatnag> thl0: sorry if these are really basic questions, I'm pretty new to the node/express world -- from the example, it looks like the templates are being used on the server side with the given 'ctx' context to create index.html
20:59 < gbhatnag> w
21:00 < gbhatnag> tlh0: I'd like to compile the templates and then put them into index.jade to send to the client
21:00 < gabrieluk> ops, sry, wrong channel
21:00 < gbhatnag> tlh0: based on this example, would the compiled templates live in preheated.js?
21:01 < gbhatnag> and, the handlebars files located in '../node_modules/handlebars/handlebars' would be where I would store the pre-compiled handlebars files?
21:03 < thl0> gbhatnag: correct
21:03 < thl0> gbhatnag: the ones for client side
21:04 < thl0> gbhatnag: server side ones are accessible as explained here: https://github.com/thlorenz/hotplates#the-templates
21:04 < thl0> gbhatnag: you store them anywhere, just have to tell your server where to serve this file from
21:05 < katt> should it be possible to store objects in app.locals?
21:05 < gbhatnag> thl0: so, if I were to only need the templates to be precompiled server side and then sent to the client (b/c I'm using Jade for server-side templates), I could just use hotplates.preheat - is that correct?
21:06 < thl0> gbhatnag: the server side templates are functions that are stored in memory and you just call them to render html (passing in context)
21:06 < thl0> gbhatnag: hotplates works only with handlebars templates
21:06 < context> dOt works like that too
21:07 < context> err, doT
21:07 < gbhatnag> thl0: ok, so if I just did a preheat and had the target set to 'preheated.js' -- 'preheated.js' would not contain the compiled templates?
21:09 < gbhatnag> thl0: I guess I'm looking for an automated way to compile handlebars templates on the server to be able to send them over to the client (I've got a single-page app going based on Backbone.js) -- is hotplate a good fit for this use case?
21:09 < thl0> gbhatnag: yes
21:10 < gbhatnag> thl0: cool, I'll give it a try right now and report back with any questions :)
21:14 < thl0> gbhatnag: sounds good, feel free to raise issues if you run into bugs/problems
21:16 < mscdex> woohoo! node.js-powered xfce4 panel plugins! :-D
21:21 < cellvia> anyone here worked a lot with streams a la substack style?
21:25 < cyberd0m> For a new project, would it better to use express3 or stick with express<3? I ask because I have lots of trouble updating all the depedencies (lots are just for <3)..?
21:26 < thl0> gbhatnag: be aware though that backbone has super simple templating built right in, which may also be a way to go
21:27 < CoverSlide> cyberd0m: for a new project, you'd want to stick with the version that's more future-proof. you may have plugins that don't support v3 now, but over time, these will get less supported
21:27 < superjoe> just deployed production code with https://github.com/superjoe30/naught
21:27 < superjoe> woot!
21:29 < CoverSlide> wtf is a cokefile?
21:29 < superjoe> CoverSlide, https://github.com/satyr/coco/
21:30 < CoverSlide> oh, so it's like a cakefile only it uses coco
21:33 < superjoe> CoverSlide, correct. but that's not relevant to you - the package is in npm as pure JS
21:33 < CoverSlide> great, just what we need, more make wannabes
21:33 < superjoe> CoverSlide, I feel the same way, but using it is simpler than not in this case
21:35 < niggler> is there any way to generate a file in javascript and have it "download" to the user?
21:35 < niggler> the problem with data-uri is that you cant specify filename
21:37 < superjoe> niggler, there's an http header for that
21:38 < superjoe> file type attachment or something, look it up 
21:38 < BennyLava> ..
21:38 < niggler> that requires me to hit the server superjoe 
21:38 < niggler> ive generated a CSV file in javascript directly
21:38 < superjoe> niggler, ah, I misunderstood.
21:38 < niggler> i could send it back to the server and download, but that's a mess
21:38 < superjoe> niggler, yeah, you send them to a data url
21:39 < niggler> the data URI lets me download the file, but i cant specify filename
21:39 < niggler> and i dont want to have them do any more clicks than necessary
21:39 < superjoe> niggler, wow, double time misread. so sorry. I think I need a break.
21:39 < niggler> lol superjoe 
21:39 < superjoe> niggler, you might try the folks in #html5 or #javascript
21:41 < mscdex> niggler: fwiw: https://github.com/eligrey/FileSaver.js
21:41 < BennyLava> there's no way to do it
21:41 < superjoe> that's pretty shitty
21:41 < superjoe> it's one of the last things that browsers can't do
21:42 < superjoe> ooh look at this: http://www.w3.org/TR/file-writer-api/
21:42 < mbalho_> niggler: look at filebakery.com for an example, source is on github too, uses filesaver.js
21:48 < niggler> thanks everyone, the filesaver looks cool
22:06 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
22:08 < isaacs_> hillct: there's no way to do that from your module.
22:08 < isaacs_> hillct: you'd just have to tell your users to set that flag
22:08 < hillct> isaacs_: ok. thanks
22:09 < isaacs_> hillct: it'd be nice if the mongodb native bit was an optional dep, rather than a flag.
22:09 < isaacs_> hillct: posting a feature req now :)
22:11 < drudge_> what ssl provider is everyone using?
22:12 < isaacs_> hillct: https://github.com/mongodb/node-mongodb-native/issues/713
22:14 < isaacs_> mbalho: mranney called jifasnif "that thing max is always saying"
22:15 < isaacs_> mbalho: i knew i should've protected that IP more aggressively!
22:18 < gerconfused> I'm having some troubles with the locomotive-passport-boilerplate, never receiving a response, not even on the static standard page. Any experiences?
22:20 < mbalho> isaacs_: hahaha
22:20 < mbalho> CO-OPTED!
22:21 < mbalho> isaacs_: also i wish i was OP again so i could set punny channel topics :/
22:21 < isaacs_> oh, snap, i didn't even realize that.
22:21 < isaacs_> one sec
22:21 < mbalho> isaacs_: also vinsup is gonna build a bench at my house at like 7pm
22:21 < mbalho> or some such nonsense
22:21 < mbalho> substack: cc o/
22:22 -!- mode/#Node.js [+o isaacs] by ChanServ
22:22 -!- mode/#Node.js [+o mbalho] by ChanServ
22:22 <@isaacs> kaboom.
22:22 <@isaacs> mbalho: i'm in sf today
22:22 <@isaacs> visnup_: how you getting to oak town?
22:23 < mikrowelt> hey guys
22:23 <@isaacs> mikrowelt: o/
22:23 < mikrowelt> can some one help me
22:23 <@isaacs> mikrowelt: not unless you tell us your problem.
22:23 <@mbalho> mikrowelt: try upgrading your version of node, running npm install or asking in #socket.io
22:23 <@isaacs> mikrowelt: actually, if you want some random help, I can probably help you.
22:24 < mikrowelt> when i use socket.on(...) how can i get the socket object inside th callback funstion??
22:24 < terinjokes> oh dear, someone OPed isaacs, the end is near!
22:24 <@isaacs> mikrowelt: When riding public transportation, do not block the doors.  walk all the way into the train.  there are other people behind you.
22:24  * isaacs is helping
22:24 <@mbalho> YES I CALLED IT
22:24 <@isaacs> mikrowelt: if you have "socket" then the callback function already can see the socket object...
22:24 <@mbalho> mikrowelt: socket.on('foo', function() { // socket is available here due to javascripts buitl in functions cope })
22:24 < mikrowelt> i tried 'this' but it didnt help also tried 'socket'
22:25 <@isaacs> mikrowelt: socket.on('eventName', function () { socket.whatever() })
22:25 < mikrowelt> yeah i know htat
22:25 <@isaacs> mikrowelt: 'this' is also a reference to the socket in the socket's event handlers.
22:25 < mikrowelt>  i try usinf socket
22:25 <@isaacs> mikrowelt: socket.on('foo', fooHandler);   // then later ...   function fooHandler() { var socket = this; socket.kajigger() }
22:25 < mikrowelt> hmmm...
22:25 < mikrowelt> yeah i know ))
22:25 < mikrowelt> i can google that tnx )
22:25 <@isaacs> mikrowelt: in general: eventEmitter.on('whatever', function () { assert(this === eventEmitter) }
22:26 < mikrowelt> but
22:26 < mikrowelt> it doesnt wok
22:26 <@isaacs> mikrowelt: try using a normal frying pan
22:26 <@isaacs> ;P
22:26 <@isaacs> mikrowelt: or gist the actual code, rather than describing it
22:27 < mikrowelt> im using it like this
22:27 < mikrowelt> function getname(socket){socket.get('nickname', function(err, name){return name;}
22:27 <@isaacs> mikrowelt: ok.
22:27 < mikrowelt> and it doesnt return a thing
22:27 <@isaacs> mikrowelt: right
22:27 <@isaacs> because the getname function has already returned by the time that the callback fires.
22:27 <@isaacs> mikrowelt: try this style instead:
22:28 <@isaacs> mikrowelt: function getname(socket,cb){socket.get('nickname',function(err, name){cb(err, name)}) }
22:28 <@isaacs> mikrowelt: or more simply:
22:28 < mikrowelt> oohhh
22:28 < mikrowelt> tnx mate 
22:28 <@isaacs> mikrowelt: function getname(socket,cb){socket.get('nickname', cb)}
22:28 < mikrowelt> ill try that
22:28 <@isaacs> then to call it:
22:28 < mikrowelt> hmmm
22:28 < mikrowelt> w8
22:28 <@isaacs> getname(socket,fucntion(er,name) { .. in here you have the name })
22:28 < mikrowelt>     socket.on('chat_cycle', function(data){io.sockets.in(data.room).emit('chat_cycle', {'nick': getname(socket), 'msg': data.msg, 'room': data.room});}); 
22:29 < mikrowelt> wont it wait for the retunr in this case
22:29 < mikrowelt> ?
22:29 <@isaacs> mikrowelt: read through this site: http://callbackhell.com/
22:29 <@isaacs> mikrowelt: you are on the verge of getting it :)
22:29 < mikrowelt> the name tell me everu thing mate
22:29 < mikrowelt> tnx alot ^^
22:30 < mikrowelt> name of the ur
22:30 < mikrowelt> url
22:30 <@isaacs> mikrowelt: :D
22:30 <@isaacs> mikrowelt: the key is this:  this happens first; asyncFunction(function(){ then this happens third }); this happens second
22:30 <@isaacs> mikrowelt: indentation = time
22:30 <@isaacs> (sorta)
22:31 <@isaacs> mikrowelt: imagine this:  function x() { setTimeout(function(){return 100}, 20000); return 1 }
22:31 <@isaacs> mikrowelt: it doesn't sit there sleeping for 20 seconds.
22:31 <@isaacs> mikrowelt: it returns 1 right away
22:31 <@isaacs> mikrowelt: and it *schedules* a function to run in 20 seconds
22:32 <@isaacs> mikrowelt: and that function returns 100, but who cares?  no one's listening to that return value.
22:33 < dedelhart> hi there
22:33 <@isaacs> dedelhart: hola
22:33 < dedelhart> I am trying to build node (0.6.18) on my new MountainLion OSX box
22:33 < dedelhart> I tossed xCode on the box and it is not recognizing the C compiler there in.
22:33 < mikrowelt> mate can you tell me when i make func abc(asd, callback){ callback();} is crashes?
22:35 <@isaacs> mikrowelt: maybe because that's not valid javascript?
22:35 <@isaacs> mikrowelt: "func" isn't a keyword.
22:35 < dedelhart> is that coffeescript?
22:35 < dedelhart> ?
22:35 < Gottox> no
22:37 < mikrowelt> i know i was just lasy to type all toghether
22:37 < mikrowelt> node says that callback() is not defined
22:39 < dedelhart> okay -- btw the solution is apparently you have to reinstall command line tools from xcode/preferences. 
22:40 < mikrowelt> anyway mate if i do something cool with node u ll be on "thanks to" list ^^
22:44 < chilts> mikrowelt: did you pass a callback in to your abc() function?
22:45 < gerq> I am doing fs.watch on about 133 files and getting the EMFILE exception, lsof says user has 690 files open, ulimit says there's 1024 available. Any weird reasons for EMFILE?
22:45 < mikrowelt> yeap but it still doesnt wok i need to do some inspection )
22:45 < superjoe> isaacs, I just saw how many github issues you have to deal with
22:45 < superjoe> damn dude
22:45 < gerq> If I retry I get more EMFILE so it seems to have something to do with count
22:45 < superjoe> I almost felt bad reporting a new one
22:45 < superjoe> almost
22:45 < EhevuTov> Anyone successfully using cvs2json? I'd like to see some example code. The module example code isn't working for me: https://github.com/twilson63/node-csv2json
22:45 < EhevuTov> csv2json I mean
22:45 -!- mode/#Node.js [+o konobi] by ChanServ
22:45 <@isaacs> superjoe: my eventual plan is to change my name and shave my head and come back as a new identity
22:46 < superjoe> gerq, fs.watch has a limit to how many you can do. I recommend using fs.watchFile instead which is timer based.
22:46 < gerq> Any more news on that limit? I'd rather fly under the radar there!
22:46 < chilts> mikrowelt: paste you code to gist.github.com and we can take a look
22:47 < superjoe> gerq, it's os-dependent, which makes it unreliable to depend on
22:47 < gerq> I can do about 130
22:47 < superjoe> gerq, and you can increase the limit on your OS, but it's rude to require your users to do so
22:48 < gerq> I'll research it then. lsof also tells me that if I do fs.writeFile near spawn, the child holds on to the parents open file. Is that a bug or fact of life?
22:49 < superjoe> gerq, I'm not sure what you mean by "near spawn"
22:49 < superjoe> gerq, example code?
22:49 < dedelhart> BTW, http://noogle.io is under heavy development (again) â€¦ 
22:50 < gerq> I do spawn, then use fs.writreFile to write the new pid to a  file. Guess what: the spawned child has the parent's file open according to lsof.
22:50 < dedelhart> so fair warning, your IRC chats will soon be much more searchable :D
22:51 <@konobi> isaacs: best quote i've seen about romney... "He is like a walking Sascha Baron Cohen movie."
22:52 < CoverSli1e> He should demand an open window on his next plane flight
22:53 < superjoe> gerq, the parent's file? what is that?
22:53 < superjoe> gerq, can I see your process spawning code? maybe you're setting up IPC.
22:56 < q_> I have an async module question, this code here http://pastebin.com/Ce7nEshJ , if instead of ret.push() , I do callback({ ... }), I only get one item in my final callback function, if I just use callback() with no arguments, I get all the elements etc ...
22:56 < CIA-118> node: Bert Belder master * r5691e8a / node.gyp : windows: fix typo in node.gyp - http://git.io/ft4Asw
22:57 < gerq> Well, I write to a json file in the parent. lsof tells me what filenames a process has open. The child process has multiple write instances open of a file the parent wrote. ie. if the parent has some unrelated writeFile going on while doing child_process.spawn, you will leak against ulimit open file. My stuff is suppoed to run for months, AND be perfect...
22:58 < gerq> I suspect fs.writeFile decides to not close immediately, and for some reason the child inherits the file descriptors, and they are only closed in the parent.
23:00 < gerq> Unless this can be avoided, which it probably can't, I have to launch a bare child process that I in turn instruct to launch further children. Not my dream solution.
23:00 < superjoe> gerq, that might be an operating system-specific thing. as long as the file descriptors are cleaned up appropriately without requiring you to write more code, is there really a problem?
23:01 < gbhatnag> tlh0: as you were saying, looks like hotplates relies on using handlebars for server-side templates
23:02 < coderarity> isaacs, hey, would you mind bring ircretary back when you get the chance, please?
23:07 < gerq> True, you're right: I need child_process**2 extra file handles available, just in case. There are also 24 leaked watchers. Anyway, I'll look into refactoring with an extra process.
23:08 < superjoe> gerq, try using fs.watchFile instead of fs.watch
23:09 < gerq> I'' look into it, thanks!
23:11 <@isaacs> ircretary: hi
23:11 < ircretary> isaacs: Hello :)
23:11 <@isaacs> coderarity: ^
23:11 <@isaacs> coderarity: no idea why it disconnected
23:11 < coderarity> isaacs, thanks :D
23:14 < garthk> It's a Node programming day! Whee!
23:16 < drudge-> everyday should be Node programming day
23:17 < parlance> hi
23:18 < parlance> can anyone help me with a specific problem? I'm having a hell of a time with child_process.spawn specifically with stdin and stdout
23:19 < superjoe> parlance, ask, don't ask to ask
23:20 < parlance> I'm using child_process.spawn to spawn a powershell process
23:20 < parlance> and whether or not I use options with ['pipe', 'pipe', 'pipe']; for stdio
23:20 < parlance> powershell hijacks the node.js console window
23:20 < parlance> and from there it's all very weird
23:21 < parlance> ideally I'd write commands into stdin and read back the output from stdout
23:21 < parlance> apparently node.js doesn't receive anything on stdout, which is patently false
23:21 < parlance> anything I write to stdin has no effect
23:22 < q_> how do I _force_ async.forEach 's callback method to treat everything as an item to push on to the results array ??
23:22 < niggler> you have a code sample parlance 
23:22 < superjoe> q_, you probably want map, not forEach
23:24 < q_> superjoe, same :S, something weird is going on
23:24 < AviMarcus> Hey anyone here have a canada landline or cell phone? I wanna know if my new toll-free number works properly in canada..
23:31 < mrmowgli> If require is passed a directory of modules, does it load each?  What's the behavior there?
23:31 -!- mode/#Node.js [+o xyxne] by ChanServ
23:32 < chilts> mrmowgli: it looks for directy/index.js
23:32 < chilts> directory/index.js
23:33 < mrmowgli> chilts: ahhhhhhh, ok that explains a lot.  Thanks!
23:33 < aandy_> anyone who've used passport? i'm a bit unsure what the difference between authenticate and authorize is. from the guide it seems to be tying together accounts from different providers, but fails to show the logic for this. there's an added "account" property, but i don't see how this is different? 
23:35 < mike-d> aandy_: it's a standard definition: http://en.wikipedia.org/wiki/AAA_protocol
23:36 < mike-d> authentication: who you are, authorization: what you can do
23:36 < chilts> his question is how they differ in passport
23:36 < chilts> I think they can both be used to authenticate, but yeah, I'm not entirely sure either
23:36 < aandy> ah okay, so in this context, it would be rights to post to twitter/read from timeline and such? (the tokens)
23:37 < chilts> certainly that's what authorisation is for :)
23:37 < chilts> ie. to let you do something
23:37 < chilts> authentication just tells someone you are who you say you are
23:38 < aandy> hehe, what i mean is, that's how i'd expect it to be. but from the code i can't really tell if that's the case
23:38 < chilts> yeah, me either ... I was looking at this the other day too :)
23:40 < aandy> neither the facebook or twitter strategy implements the authorize function, and the generic is just "add .account = {}" :P
23:45 < garthk> Long shot: when configuring a private dependency in npm, is there some way to target Mercurial repositories? 
23:46 < JonathanMH> aandy: since you're working with passport, can you tell me what I'm messing up? https://github.com/Turbo87/locomotive-passport-boilerplate/issues/2
23:47 < aandy> JonathanMH: no, sorry. i've used it for 2 minutes :(
23:47 < JonathanMH> well, worth a shot :) hope you'll succeed
23:48 < aandy> chilts: i *think* the idea is that you authenticate with one provider, thus giving you an account for whatever page you're making. adding additional credentials (so you can log in with one or more, and get to the same account) you *authorize*. not sure how that translates to AAA mike-d mentioned, but that's the idea I get from the source code
23:49 < aandy> JonathanMH: i'll be sure to take a look once i get a chance to dig into this
23:49 < garthk> Hmm. lib/cache.js, lib/submodule.jsâ€¦ my, git stuff is scattered all through npm.
23:50 < aandy> JonathanMH: you do include session middleware the right way though, so could be a bug (or your mongodb is borked)
23:52 < JonathanMH> aandy: well it's a boilerplate I've downloaded and I've tried to isolate the error I get. Maybe some of the mongodb stuff is funny on mac os
23:55 < AviMarcus> so, nobody living in canada here right now?
23:56 < JonathanMH> AviMarcus: I was there on a study trip, maybe I'll move there some day. You have some nice niagra falls
23:56 < garthk> No, AviMarcus. They had to evacuate the country.
23:57 < AviMarcus> lol garthk 
23:57 < AviMarcus> JonathanMH, I don't live there... but I've been to niagra falls 2x, was quite nice
23:58 < AviMarcus> I was warned to test my new Toll Free number from a real Canadian phone to ensure it worked, but I haven't been able to get hold of a canadian yet.
23:58 < JonathanMH> I have bad flashbacks about lying my ass off with my classmates to avoid the legal drinking age at 17, unbelievable it worked.
23:59 < aandy> yeah i'm 18, you can tell by my batman underwear
23:59 < JonathanMH> AviMarcus: You basically are looking for somebody to call you? O.o If we wouldn't be on freenode, I'd think you were trying to find a friendly female being.
--- Log closed Tue Sep 25 00:00:16 2012
