--- Log opened Wed Jan 23 00:00:11 2013
00:07 < TehShrike> This question shouldn't have been closed http://stackoverflow.com/q/6474318/201789
00:08 < TehShrike> :-P
00:08 < CoverSlide> oh that stupid slepp-sort thing
00:10 < CoverSlide> yeah it was very trolly. you know it's good when it comes from 4chan
00:12 < cloudbender> So, by avoiding class constructs, we can delete or re-type a property without violating anything.
00:12 < cloudbender> ... within an object I mean
00:16 < othiym23> there are only a few types in JS, cloudbender: objects, strings, numbers, and undefined
00:16 < othiym23> you can definitely mutate an object from one kind to another, either by changing its prototype or through other forms of extension
00:17 < cloudbender> right, still thinking about objects as distinct types me.
00:17 < pspeter3> Is there a good recommendation for a line buffer
00:17 < othiym23> but it doesn't really make sense to think of JS in terms of classes or types, just objects with constructor functions and prototype chains
00:17 < othiym23> pspeter3: for reading from stdio, or for a REPL?
00:17 < cloudbender> right I'm beginning to see that.  Old habits die hard.
00:17 < pspeter3> othiym23: stdio
00:20 < CoverSlide> it's fairly trivial to write one, although i've seen a few lying around
00:20 < CoverSlide> usually i do my own
00:21 < pspeter3> othiym23 is carrier good?
00:21 < garrettwilkin> othiym23: hey man
00:21 < garrettwilkin> anyone know johnnyfive in here?
00:25 < bingomanatee> has anyone used soda? it doesn't run under the latest version.
00:25 < bingomanatee> Or is there some equivalent of soda/selenium you like for browser tests?
00:33 < othiym23> garrettwilkin: hey Garrett
00:33 < othiym23> pspeter3: carrier is what I use all the time, it's very simple and very easy
00:33 < othiym23> pretty low-overhead as well
00:34 < pspeter3> othiym23: 
00:34 < pspeter3> It seems that way
00:34 < othiym23> although I mostly use it for process control and not primarily I/O
00:35 < othiym23> I'd probably be more likely to write something streamier and more task-specific if I needed to handle a lot of input and output
00:35 < pspeter3> othiym23: It's a one of script to handle a long running shell process
00:36 < othiym23> perfect
00:36 < othiym23> carrier will handle that for you just fine
00:37 < redshadowhero> well, that's another long day out of the way.
00:37 < cloudbender> Can someone expand the term 'native prototypes' ?
00:38 < othiym23> cloudbender: give more context plz
00:38 < cloudbender>  ... "It is recommended to always use hasOwnProperty. Assumptions should never be made about the environment the code is running in, or whether the native prototypes have been extended or not."
00:39 < othiym23> ah, that's talking about inheritance
00:39 < holzp> probably means untouched prototypes that are built into the env
00:39 < cloudbender> ok
00:39 < holzp> like in pre-existing "objects"
00:39 < redshadowhero> I think they mean like the difference between a property of an object that's there by spec/standard, or added via SomeObject.prototype.newthing
00:39 < cloudbender> right
00:39 < othiym23> so let's say you create a new object: "var object {a: 'foo', b: 'bar'}"
00:39 < holzp> String.prototype
00:39 < holzp> Object.prototype
00:40 < othiym23> and meanwhile some tool has extended Object's prototype: Object.prototype.c = 'baz'
00:40 < cloudbender> Gotcha
00:40 < othiym23> now if you do for (var thinger in object) without hasOwnProperty, you're going to get c showing up as a key in Object
00:40 < othiym23> which is probably not what you want
00:40 < othiym23> oops object not Object
00:41 < othiym23> if you're only writing code for node, Object.keys(object).forEach(function (o) {}) is a better solution, because it filters non-own properties for you without you having to remember to do it
00:42 < othiym23> but that's an ES5-ism and isn't a super great idea (although underscore and lodash include similar functions)
00:42 < CoverSlide> >> var a = {b:1},b = Object.create(a);[Object.keys(b),Object.getOwnPropertyNames(b)]
00:42 < purr> CoverSlide: (object) [[], []]
00:42 < CoverSlide> hmm
00:43 < CoverSlide> oh that's right, keys and hOPN both do the top level, keys only does enumerables
00:44 < cloudbender> copy filters non-own
00:45 < cloudbender> still it's nice to keep good form
00:46 < cloudbender> oooooh resizable arrays mmmmm yummy, can I get a coffee with that ?
00:46 < cloudbender> I know resizing is expensive.
00:47 < cloudbender> But sometimes worth it.
00:47 < othiym23> cloudbender: it depends on the runtime -- Arrays are just objects, and are sometimes implemented internally as hashtables
00:48 < cloudbender> copy hashtables ~ vm
00:48 < CoverSlide> >> var a = [1,2,3],b = Object.create(a);a.push(4);console.log(b[3]);b.push(5);console.log(a[4])
00:48 < purr> CoverSlide: undefined; Console: 4, undefined
00:51 < cloudbender> yeah ?
00:52 < cloudbender> Oh becuase of zero-indexing agains a ?
00:56 < cloudbender> but dang that's really nice geez
00:59 <@isaacs> ircretary: tell cowboy all glob tests should be passing on windows now.
00:59 < ircretary> isaacs: I'll be sure to tell cowboy
01:10 < fmarceau> hi gang
01:10 < fmarceau> is there a way to avoid having too many callback calls when you loop over something?
01:11 < fmarceau> i.e. I'm parsing a CSV file and doing a DB call for each entry
01:11 < fmarceau> I could bulk insert my items but is there another way to do it?
01:12 < chovy> fmarceau: i would do bulk insert
01:12 < chovy> multiple db queries is not ideal.
01:12 < chovy> especially if your list is large
01:12 < chovy> but if you really want to do that, look at async library.
01:13 < chovy> i think that will help you avoid a bunch of nesting.
01:13 < chovy> loop through an array, and then do something at the end.
01:13 < othiym23> async.queue would probably be handy in this case
01:13 < othiym23> run x inserts / upserts at a time
01:15 < cloudbender> Well, I think it's time to fire up node and a text editor.
01:16 < mscdex> upserts?
01:17 < cloudbender> <<< still uses hotbot, likes it.
01:17 < othiym23> mscdex: a strange, terrible MongoDB thing it's best not to think about too hard
01:17 < fmarceau> ah ok.. I didn't know that async was doing that
01:17 < gsgasgsaagsags> .
01:17 < fmarceau> that's great... will look at it... tnx
01:19 < cloudbender> whew ... mscdex .... you scared me for a second.  That was the name of the DOS cd-rom extension.
01:19 < brycebaril> ahh hotbot... a blast from the past
01:20 < brycebaril> wow hotbot doesn't look like 1997 anymore
01:20 < CoverSlide> it looks like 1999 now
01:20  * CoverSlide fires up lycos
01:20 < cloudbender> nope, but it doesn't mess with me
01:20 < brycebaril> hostbot: start page in the 2000s, results page 1999 :/
01:20 < MI6> joyent/node: Ben Noordhuis master * 2cbf458 : http: close connection on 304 and chunked encoding  Force the connection  - http://git.io/ezRkOw
01:22 < CoverSlide> I've been liking ddg
01:29 < cloudbender> The old vista clunker has to earn it's keep for 7 more months.
01:29 < cloudbender> I guess I should call it the vista cruiser
01:39 < garrettwilkin> what the solution when socket.io gives a 404 when you try to add it to a page?
01:40 < garrettwilkin> i have seen it a bunch, but i can't remember how to fix it
01:40 < garrettwilkin> its like the script tag isn't working
01:40 < garrettwilkin> <script src="/socket.io/socket.io.js"></script>
01:41 < CoverSlide> garrettwilkin: do you have socket.io server listening on the same http server?
01:41 < garrettwilkin> yes i do
01:41 < garrettwilkin> well
01:41 < garrettwilkin> i have this
01:41 < garrettwilkin> var io = require('socket.io').listen(1337);
01:42 < garrettwilkin> so its the same port
01:42 < garrettwilkin> my createServer
01:42 < CoverSlide> except you can't listen on the same port like that
01:42 < garrettwilkin> ends like this 
01:42 < garrettwilkin> .listen(1337, '127.0.0.1');
01:42 < CoverSlide> ahh
01:42 < CoverSlide> that's the issue
01:42 < garrettwilkin> popâ€¦ so what did i screw up?
01:42 < garrettwilkin> *ooops
01:43 < garrettwilkin> i had this working with a flatiron app previously
01:43 < garrettwilkin> and called listen(app.server);
01:43 < garrettwilkin> do i need to pass in the result from the createServer call?
01:44 < CoverSlide> you can't have them listen on the same port, if you listen on a specific ip address, then requests will go to either one or the other, not both
01:44 < CoverSlide> you need var io = require('socket.io').listen(app.server)
01:44 < blazes816> or use a different port for you socket server
01:45 < garrettwilkin> i got it
01:45 < CoverSlide> yeah but he'd have to change the src attribute
01:45 < garrettwilkin> i just passed in the server
01:45 < garrettwilkin> like this
01:45 < garrettwilkin> var serv = http.createServer(function (req, res) {
01:45 < garrettwilkin> and then 
01:45 < garrettwilkin> var io = require('socket.io').listen(serv);
01:45 < CoverSlide> yup that's the way
01:46 < CoverSlide> and the express.listen(serv) as well
01:48 < cloudbender> hmmm the node.js installer ended prematurely rollback was OK ( x86.msi )
01:48 < CoverSlide> odd
01:50 < cloudbender> maybe try as admin
01:53 < cloudbender> nope it gets to 99.995% copying new files then starts the rollback
01:53 < cloudbender> I'll dig the system requirements.
01:53 < cloudbender> ... tomorrow.
01:53 < cloudbender> supper time
01:53 < cloudbender> btw rollback feature is pretty slick
01:54 < cloudbender> but nor error indicator dang
02:18 < smango> I'm using node/express/jade. Every time my jade file is rendered I want it to display a certain div (along with whatever else it's displaying) whose content is generated by node. Is there a better way to do this than to just pass the output of the node function as a parameter in render() every time? because I'm calling render() in a lot of different places
03:01 <@Nexxy> \o/
03:02 < phonebook_> can someone tell me if i am using send properly. the callback never fires. http://pastebin.com/A7T5u1QS
03:02 < phonebook_> send... not send. socket.write(
03:02 < SomeoneWeird> i didn't think send takes a callback
03:03 < SomeoneWeird> oh, hmm
03:03 < SomeoneWeird> not sure
03:04 < isaacbw> no, it doesn't
03:04 < SomeoneWeird> actually according to the docs it does
03:05 < SomeoneWeird> "socket.write(data, [encoding], [callback])"
03:05 < SomeoneWeird> phonebook_, try setting encoding to something other than null
03:05 < isaacbw> oh, sockets
03:06 < phonebook_> okay, hold on
03:06 < isaacbw> what, where are you seeing that SomeoneWeird 
03:06 < SomeoneWeird> http://nodejs.org/docs/latest/api/net.html#net_socket_write_data_encoding_callback
03:06 < isaacbw> oh man, brain fart
03:07 < isaacbw> yea, having encoding be null fucks with optional argument processing
03:09 < phonebook_> did ascii, utf8 (explicitly), and base64 but no dice
03:09 < isaacbw> mr worf
03:09 < isaacbw> fire
03:09 < isaacbw> duh duh duh
03:09 < isaacbw> duh duh duh
03:09 < isaacbw> duh duh duh
03:10 < isaacbw> post the code with the utf8 encoding
03:11 < SomeoneWeird> wait, why are you sending http headers using sockets
03:11 < isaacbw> hoo ha ha
03:12 < gehko> bw - boy wonder?
03:12 < SomeoneWeird> lol
03:12 < gehko> sorry, i am waiting for node to compile and i read the topic 60 times
03:13 < phonebook_> http://pastebin.com/hiLxR3LY <-- just the upgrade callback -------------------------------- the entire thing --> http://pastebin.com/hpwiUQ0A
03:14 < SomeoneWeird> phonebook_, use .setHeader instead of writing them
03:14 < SomeoneWeird> http://nodejs.org/docs/latest/api/http.html#http_response_setheader_name_value
03:15 < isaacbw> how do you know it's even getting to that point, phonebook_ 
03:15 < munichlinux> is there anyway we can say function declaration or function expressions one better over the other?
03:15 < isaacbw> what
03:15 < phonebook_> brilliant. that might be it. give me a couple seconds
03:16 < SomeoneWeird> wat munichlinux 
03:16 < isaacbw> munichlinux, no
03:16 < isaacbw> http://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/
03:16 < isaacbw> just different
03:17 < SomeoneWeird> wait, and you do know there are websocket libraries right, phonebook_ 
03:17 < munichlinux> isaacbw: when you define functions what do you use? 
03:17 < munichlinux> or is there a best practice ?
03:18 < isaacbw> no, just do whatever you want
03:18 < isaacbw> I use use declarations by default and use expressions when I need to
03:18 < isaacbw> you're overthinking it
03:19 < isaacbw> find a javascript style guide
03:21 < ezrafree> greetings all
03:21 < ezrafree> i was wondering, how can i roll back to another version of node in npm?
03:21 < gehko> statically defined function expressions declared using methods 
03:43 < phonebook_> SomeoneWeird, it didnt work cause there is no response object in the arguments. i figured id learn more if i did it myself so thats why. but still no dice. brb
03:56 < isaacbw> shit, my .local folder is 84 gigs
03:56 < isaacbw> wtf
03:57 < isaacbw> oh fuck
03:57 < isaacbw> that's all trash
03:57 < isaacbw> fucking fuck
03:57 < isaacbw> since when is trash stored in a trash folder
03:57 < isaacbw> fuck this shit
03:58 < isaacbw> all this time I've been 'deleting' stuff into another folder
03:58 < SomeoneWeird> hahaha
04:05 < isaacbw> I just bought socks at a deli
04:06 < isaacbw> they had socks and I was like, shit I need socks
04:14 < isaacbw> yuck, people shouting at each other in the hallway
04:23 < gehko> snooze.js
04:31 < andyburke> Hey guys, I'm running node 0.8.18 on both my local machine (OSX) and a hosted server (Ubuntu).  On OSX, response.req.connection is a net.Socket, but on my linux machine, response.req.connection appears to be something else, which has a member 'socket'
04:31 < andyburke> I'm really confused by this, why is this different on each platform?
04:34 < andyburke> Ah wait, I'm an idiot.  It's different between HTTP/HTTPS I guess?  Still pretty confusing.
04:38 < phonebook_> so not 100% there YET but found out the problem is the way i was writing the headers. should be \r\n\r\n not \r\n another line cause it looks pretty \r\n
04:39 < phonebook_> its at least throwing an error on the client now
04:39 < Don_Pellegrino> Hello fellow Node enthusiasts, I have a question for you
04:39 < crabtree> hello Don_Pellegrino
04:39 < Don_Pellegrino> Let's say I have a string such as "0110", how can I load it into a buffer?
04:40 < Don_Pellegrino> the "binary" option doesn't seem to work and is deprecated
04:40 < phonebook_> var buffer_base64 = new Buffer("abc")
04:40 < phonebook_> er
04:41 < phonebook_> just var Bugger = new Buffer("myString"); optional second argument for encoding but it defaults to utf8
04:41 < phonebook_> buffer, whatever
04:41 < Don_Pellegrino> yeah, there's an option for "binary", but it doesn't work on 0.8 afaik
04:42 < crabtree> why do you need to use binary?
04:42 < Don_Pellegrino> I'm experimenting with compression
04:42 < mscdex> Don_Pellegrino: well, you can convert it to a number first with `parseInt("0110", 2);`
04:42 < Don_Pellegrino> ooooh thank you so much
04:43 < Don_Pellegrino> I completly forgot that existed
04:46 -!- mode/#Node.js [+o TooTallNate] by ChanServ
05:04 < perezd> hey, if you were designing an HTTP-protocol-based API, would software packages should I check out? Already know about express, wondering if there is more specialized tooling..
05:05 < FMJaguar> more specialized in what way?
05:05 < perezd> for designing *just* an HTTP-based API server
05:05 < perezd> REST isn't a requirement persÃ©
05:07 < FMJaguar> the http package in node? http://nodejs.org/api/http.html#http_http
05:07 < AAA_awright> perezd: HTTP is by its nature RESTful
05:07 < AAA_awright> So that's all a bit redundant
05:08 < perezd> yes, I just mean something that doesn't overemphasize resource-oriented APIs
05:08 < AAA_awright> Well I can't imagine anything else that HTTP operates on, except resources
05:09 < perezd> right, its resources, maybe I'm just saying not in the exact CRUD-y Rails implementation of REST
05:10 < AAA_awright> Ah, yeah, that's all a bit over-used
05:10 < perezd> thats really what I want to avoid
05:10 < AAA_awright> I'd just design the thing
05:10 < perezd> I have a more nuanced problem space 
05:10 < perezd> I have the HTTP API designed, I just need to implement it in something now.
05:10 < AAA_awright> Define your types of resources, and define the methods you can use on them
05:11 < perezd> I like express and stuff, so I was wondering if there was like an express-based framework that is designed more for just designing APIs
05:11 < AAA_awright> "PUT to a certain class of resources with a media type of text/json; profile=http://example.com/schema.json has X affect"
05:11 < perezd> http://walmartlabs.github.com/hapi/
05:11 < AAA_awright> effect
05:11 < perezd> this is interesting
05:11 < perezd> but probably no better than express
05:12 < devaholic> walmart o.o
05:12 < AAA_awright> Huh
05:16 < perezd> this actually looks really good.
05:23 < chovy> i'm using express+less for css compiler. And just recently, my .less file doesn't get compiled when i restart my app.
05:33 < chovy> i foudn the problem
05:34 < perezd> is there a node module that is basically *just* the request router of express?
05:36 <@Nexxy> perezd, connect
05:36 < perezd> connect doesn't appear to have the request router 
05:36 < YayMe> I'm looking at async.js and it puts everything in epoxrts.blabla, how do I go from there to making the types global scope? Just do it all in there then end it with someType = exports.typeIWantPublic ?
05:36 <@Nexxy> I could be mistaken
05:36 < YayMe> *exports
05:37 < perezd> i thought it did too
05:37 < YayMe> what a garbage typo
05:37 < perezd> but it appears to not
05:37 < SomeoneWeird> YayMe, var something = exports.something = "lol";
05:37 < SomeoneWeird> ?
05:37 < YayMe> I'm garbage at remembering the semantics of javascript
05:37 < AAA_awright> It's not that hard to write your own, it only takes 10 lines or so if you need something synchronous
05:37 < perezd> ege?
05:37 < perezd> eg*
05:37 < YayMe> SomeoneWeird: Is that how you would globalize your types?
05:37 < YayMe> rather, publicize
05:37 < AAA_awright> And you really should write your own if it's not going to have complex functionality
05:37 < SomeoneWeird> i suppose
05:38 < perezd> AAA_awright: yeah, thats what I was thinking..
05:38 < SomeoneWeird> it'll set something & exports.something to lol at the same time
05:38 < perezd> I may want to just start basicâ€¦I understand my protocol needs pretty well.
05:38 < YayMe> right
05:38 < perezd> prob should just design for that.
05:38 < YayMe> SomeoneWeird: Perfect, I just found where it's doing exactly that. Thanks. The semantics of javascript kill me for like a week everytime I try to get back into it..
05:39 < YayMe> trying to get my emacs to do a node.js repl just like I have it for haskell seems to be a pain
05:39 < AAA_awright> YayMe: Often it's more readable just to use exports.property everywhere
05:39 < YayMe> Anyone got tips on the simplest elisp for it?
05:40 < YayMe> AAA_awright: that's what I'm doing inside, but I want to publicize a couple main parts
05:40 < YayMe> AAA_awright: is that "exports" a common pattern?
05:40 < AAA_awright> exports.* is the stuff that gets exposed...?
05:41 < AAA_awright> YayMe: Yeah! http://nodejs.org/docs/latest/api/all.html#all_modules
05:43 < YayMe> Ahhh cool
05:43 < YayMe> thanks
05:48 < phonebook_> i have a problem coming in about 10 minutes. will have a picture!
06:01 < phonebook_> k, here http://i.troll.ws/15fe2052.png
06:02 < phonebook_> what wikipedia says the values should be is not what the values are. i dont understand why
06:05 < phonebook_> http://pastebin.com/pFY40AVE 
06:07 < mscdex> phonebook_: you're calling `new Buffer()` without passing the appropriate encoding option
06:07 < mscdex> so it's interpreting "hash" as a string not hex
06:08 < phonebook_> !!
06:08 < mscdex> that'd be my guess
06:10 < phonebook_> negative 1d29ab734b0c9585240069a6e4e3e91b61da1969
06:11 < mscdex> works for me
06:11 < SomeoneWeird> new Buffer(hash, 'hex')
06:11 < mscdex> new Buffer(hash, 'hex').toString('base64')
06:11 < phonebook_> ah sorry!!!!!
06:11 < mscdex> on a side note... why are you doing websocket stuff manually?
06:11 < phonebook_> sry 
06:11 < SomeoneWeird> also you do know there is a websocket library right
06:12 < phonebook_> hell yes... HELL YES
06:13 < phonebook_> thanks man. crowd
06:13 < switz> http://stackoverflow.com/questions/14473433/is-it-possible-to-use-passportjs-for-multiple-accounts-from-the-same-network
06:18 < NuZZ> anyone know any modules that automate create SSL certificates etc. for TLS connections?
06:18 < NuZZ> scenario: irc client connected to ssl network automatically 
06:19 < NuZZ> sorry for the english, i've a migraine
06:19 < NuZZ> that was meant to be engrish. god damn it
06:19 < SomeoneWeird> haha
06:21 < NuZZ> so yeah let me say that again. Need a module or guide to creating a SSL connection to an SSL only IRC network via a TLS connection, completely automated.
06:44 < amitdrupal> how we use node js in my php project
06:47 < owen1> i plan to store in db both the unix time and more readable time. does it matter if the second one will be something like this 'Tuesday January 22 2013 10:41:07 PM' or is this one better? '2012-03-30T21:11:25+0000'
06:48 < zomg> owen1: why store both?
06:49 < othiym23> at most you should need to store a unix time and a GMT offset
06:54 < eydaimon> fg
06:55 < owen1> zomg: one for easy sorting and the other for human eyes
06:56 < zomg> owen1: it would be a better idea to just convert the raw timestamp into a nice formatted value :)
06:56 < zomg> If you have two values, you add complications to it.. every time you update the values you're gonna need to update both the date fields and things like that
06:59 < NaN> with npm, how can I install a module globally to use it on all my sistem? if I use npm install <module> it installs on the current folder and create a "node_modules" folder
07:00 < crabtree> -g
07:00 < purr> crabtree: No search results found.
07:00 < NaN> crabtree: thanks man
07:00 < crabtree> ?!!?
07:00 < devaholic> NaN: you can use npm install -g to install to $NODE_PATH but installing globally is recommended for command line tools
07:00 <@mbalho> crabtree: haha weird
07:00 < NaN> devaholic: I suppose uglify is a tool, so it's ok
07:01 < owen1> zomg: got it
07:05 < mscdex> crabtree: i think '-g' is a command for purr to google search or something
07:05 < mscdex> -g nodejs
07:05 < purr> mscdex: node.js <http://nodejs.org/>
07:05 < mscdex> ^
07:05 < crabtree> i'd have assumed so yeh
07:05 < mscdex> -g node.js rules!
07:05 < purr> mscdex: node.js - Is there any rules engine implemented on NodeJS / in ... <http://stackoverflow.com/questions/9001750/is-there-any-rules-engine-implemented-on-nodejs-in-javascript>
07:05 < mscdex> heh
07:05 < medice> why can't i hold all these colors
07:09 <@mbalho> -g pizza
07:09 < purr> mbalho: Domino's Home Page - Domino's Pizza, Order Pizza Online for ... <http://www.dominos.com/>
07:09 <@mbalho> awesome
07:09 <@mbalho> -g james halliday
07:09 < purr> mbalho: Wine Reviews | Australian Wines | James Halliday | Australian Wine ... <http://www.winecompanion.com.au/>
07:09 <@mbalho> substack: ahahaha
07:10 <@mbalho> -g node.js irc
07:10 < purr> mbalho: Community - node.js <http://nodejs.org/community/>
07:11 < substack> mbalho: oh right I am kind of a big deal when it comes to wines
07:11 < substack> but only in australia
07:11 < substack> it's a thing
07:11 < zomg> -g jani hartikainen
07:11 < purr> zomg: CodeUtopia - The blog of Jani Hartikainen <http://codeutopia.net/>
07:11 < zomg> oh neat
07:11 < medice> -g lemonparty
07:11 < purr> medice: Lemon Party | Know Your Meme <http://knowyourmeme.com/memes/lemon-party>
07:11 < SomeoneWeird> lol, substack 
07:11 < zomg> whenever I do that google search it just tends to give a wikipedia article for someone who shares my name but apparently is more famous than I am
07:11 < zomg> =)
07:17 < yalamber> is fs.readStream deprecated on latest version of node? 
07:18 < yalamber> Hello?
07:19 < foofoobar> I'm trying to add fixtures with mongoose. I catching errors but they are always null. The script does not end and the data is not inserted.. I don't know why. Any suggestions? https://gist.github.com/4602795
07:38 < Tom___> Why is res.writable true after res.end() ? see http://stackoverflow.com/questions/14456452/why-is-res-writable-never-set-to-false-even-though-it-is-a-writablestream
07:46 < Tom___> .
07:50 < tdanh0310> hello
07:58 < dileep> i am using the exif code  from the link but it doesnt work,any kind of help in this regard      https://github.com/jseidelin/exif-js#readme
08:00 < dileep> anybody here for the help
08:32 < [AD]Turbo> hi there
09:12 < cinvoke> can someone point me to a good source that would help me decide the benefits of clojure vs nodejs?
09:13 <@konobi> nope
09:14 <@konobi> (mainly because 99% of us know nothing about clojure)
09:14 < cinvoke> nope you have no clue?
09:14 < cinvoke> why 99%?
09:15 <@konobi> cinvoke: we're javascript folk =0)
09:15 < cinvoke> makes me think that the devs that use node use for majorly diff reasons
09:15 < cinvoke> but its backend right?
09:16 <@konobi> server-side yes
09:16 < cinvoke> and fast as hell for many small tasks?
09:16 <@konobi> wether that be web, tcp or hell, even phone
09:16 <@konobi> depending on the task, yes
09:17 < cinvoke> @konobi: so lets say i wants to make a robotic arm... many signals and async processing
09:17 < cinvoke> so it could possibly be used for this and other autonomous projects, right?
09:17 <@konobi> sure, there's pre-exiting libraries for that
09:18 <@konobi> npmjs.org
09:18 < yarco> i think it is very important that nodejs has both sync and async way to do codes
09:18 <@konobi> firmata among others
09:18 < yarco> but it seems hard to merge them into one style
09:18 <@konobi> yarco: generally it's async only
09:18 < cinvoke> checking that out. ty :)
09:18 <@konobi> there are a few sync options, but that's more for use during startup
09:19 <@konobi> (it's why require() is sync, for example)
09:19 < cming> Guys, i want have my mongoose requests log out into a express application.
09:19 < cming> any clue?
09:20 < yarco> konobi: http://nodejs.org/api/fs.html
09:21 < yarco> if nodejs only support async, then it brings some un-needed things when doing code sometimes.
09:22 <@konobi> yarco: as I said, there are a few
09:23 < yarco> konobi: yes, certainly. but what i said is it is better to support both
09:23 <@konobi> not really
09:24 <@konobi> ryan would have preferred none at all (other than require()) but the few that are around are compromises
09:25 < yarco> konobi: but if the operation is simple, and wont cost a lot of time and you rely on the result, you are still trying to do async code?
09:25 < yarco> that is really bad idea
09:25 < shihan> i tried doing some 3d printer control with nodejs... it wasnt overly sucessful, but i didnt spend long with it... but timing moves in real time on more then one axis at once is really difficult from node
09:25 <@konobi> yarco: depends if you're doing it at startup or during normal operation
09:26 < yarco> konobi: for example connect to a database server
09:26 <@konobi> async
09:27 <@konobi> reading a file, to work out which database and the info to connect to it... may as well be sync
09:27 < yarco> konobi: so you have a  { { { { { code
09:27 < SomeoneWeird> 0.o
09:28 <@konobi> i don't store my moustaches on top of code printouts, no
09:28 < yarco> konobi: i think async or sync should be chosen by developer
09:28 < yarco> and depends on different cases
09:28 <@Nexxy> yarco, I'm pretty sure using nodejs constitutes a choice for async
09:28 <@konobi> Nexxy++
09:30 <@konobi> there is no sync version of http request
09:30 <@konobi> or tcp, or the like
09:31 < Anna30F> ____________Hello __________
09:31 < _ior> if i were doing something that i knew would rely heavily on synced operations, i really would not choose node
09:32 < yarco> â€¦??? what about use mongodb to get a collection and then update a record?
09:33 <@konobi> 2 async requests
09:33 < yarco> i dont think async help much on such code
09:33 < yarco> so you prefer  `collection.find().toArray(function(err, docs){` comparing to var ret = collection.find().toArray()?
09:33 <@konobi> yarco: then maybe you're missing the point
09:33 < _ior> there's probably always going to be some non-zero unavoidable sync i/o in nearly any project
09:34 < _ior> but regularly blocking is kinda silly in a single threaded, evented environment
09:35 <@konobi> yarco: you've watched ryah's presentation on io latency at different layers? (register/l1/l3/ram/disk/network/etc) 
09:35 < yarco> konobi: what's that?
09:36 <@konobi> yarco: worth a watch, it's on youtube somewhere
09:39 < yarco> okâ€¦another way to explain my point is: yes, you can do async
09:40 <@konobi> in node, only things that are explicitly marked as "Sync" are sync... otherwise it's _all_ async
09:42 < yarco> i mean for example,       var ret = func( 'async', 'xxx');  // then the func is executing in async mode, which is just like you do something in callback
09:42 < yarco> var ret = func('sync', 'xxx'); // it is normal way...
09:42 < yarco> certainly you can change the style...
09:42 <@Nexxy> yarco, wat
09:43 <@konobi> yeah, wtf are you on about?
09:43 < _ior> okay, let's pretend you're writing a webserver, and you allow users to upload a file that you then write to disk. let's pretend you use fs.writeSync to write the file, and then let's pretend a user on a 56k modem uploads a 2 gig file
09:43 < _ior> you will be serving *no responses to anyone else* during the entire 5 months
09:43 < _ior> it takes to upload that file
09:44 <@Nexxy> but the code will be *so much* easier to follow!
09:44  * Nexxy stares blankly
09:44 < _ior> haha
09:44 <@konobi> JS is JS... it executes in order as normal... IO calls are async
09:45 < yarco> i mean i'm not voting againt async, i vote against the coding style....
09:45 < yarco> why not var ret = func() is async?
09:45 <@Nexxy> yarco, but JS is flexible enough that you can invent your own coding style
09:45 <@Nexxy> yarco, javascript... is synchronous
09:45 < yarco> :(
09:45 < yarco> get it...
09:45 < yarco> yes
09:45 <@Nexxy> node isn't changing javascript
09:46 <@konobi> but, when node does IO (where latency is actually expensive) it's async
09:46 <@Nexxy> I'm on a horse
09:46 <@konobi> Nexxy: get off dshaw
09:46 < yarco> then we need a async version of javascript?
09:47 <@Nexxy> what, no
09:47 <@Nexxy> konobi, dshaw is a unicorn
09:47 <@Nexxy> certified, bluestar
09:47 <@konobi> yarco: no latency measured in picoseconds isn't really latency
09:47 <@konobi> Nexxy: =0P
09:47 <@Nexxy> have a little breed respect!
09:47 <@Nexxy> :P
09:48 <@konobi> yarco: you could run a million-billion JS operations in the time it takes to read a chunk of a file
09:48 <@konobi> make sense?
09:48 <@Nexxy> a... brazilion operations
09:48 < _ior> latency measured in picoseconds is HUGE if your unit of time is the planck unit
09:48 < _ior> :)
09:48 <@konobi> Nexxy: sounds painful
09:48 < Gottox> initialising a async function can be expensive than calling a function synchronously.
09:49 < Gottox> +more
09:49 <@Nexxy> uhm
09:49 <@Nexxy> _ior, 
09:49 <@Nexxy> planck units are for physical measurement
09:49 <@konobi> planck is string or quantam base?
09:49 < _ior> nexxy, planck units are also for time
09:49 <@Nexxy> not temporal measurement
09:49 <@Nexxy> (IIRC)
09:49 < _ior> http://en.wikipedia.org/wiki/Planck_time
09:50 < _ior> One Planck time is the time it would take a photon traveling at the speed of light to cross a distance equal to one Planck length.
09:50 <@Nexxy> I sit corrected
09:50 <@Nexxy> s/sit/recline/
09:50 < _ior> but i'm happy to talk about attoparsecs per microfortnight, too, i'm just not as fluent in the system :)
09:51 <@Nexxy> LOL
09:51  * konobi goes for internet beats... metric ftw
09:51 < _ior> one of my favourite wiki pages: http://en.wikipedia.org/wiki/List_of_unusual_units_of_measurement
09:51 < Gottox> Node.js is so fast, we're talking about planck time in the channel!
09:51 <@Nexxy> lol
09:52 <@Nexxy> swatch time
09:52 <@Nexxy> that went over well
09:52 < Gottox> wasn't that this day/1000 time measurement from the 90s?
09:52 <@konobi> i lost $x lbs recently... until someone converted it to kg for me... then i was like... yeah... maybe i should check in with the doctor
09:53 <@konobi> =0)
09:53 < _ior> haha yeah swatch time was pretty hilarious
09:53 <@Nexxy> mhmm
09:53 <@konobi> damn imperial measurements!
09:53 < _ior> yeah! how dare they measure things based on commonalities of the human body!
09:54 < _ior> i mean, who wants to be able to use the length from the first knuckle to the tip of the thumb to measure distance!
09:54 < _ior> that's just silliness.
09:54 <@konobi> 14ths, 16ths... nah nah... that's all fine... o.O
09:54 < _ior> the worst thing about the imperial system is that if you go to the US and your order a pint of beer, you actually only get .75 of a pint
09:55 <@Nexxy> shhh!
09:55 <@konobi> "this horse is 24 hands", "Um.. it's a shetland pony", "Yeah... i'm a dwarf... what of it?"
09:55 < _ior> on the other hand, you're probably ordering delicious beer like stone or aztec brewing co or mother earth or or or
09:56 <@konobi> _ior: canuckistan ftw!
09:56 < _ior> eh
09:56 < _ior> oot and aboot?
09:56 <@Nexxy> I think there needs to be a Godwin's law about beer
09:56 < _ior> how would it read?
09:56 < _ior> what's the unmentionable that causes a loss?
09:57 <@Nexxy> lol
09:57 <@Nexxy> given enough time, any online discussion will eventually devolve into discussions of beer
09:58 < _ior> :O~
09:59 <@konobi> given enough beer, any discussion in node.js will eventually devolve into discussions of relative time measurements
09:59 <@Nexxy> lol
09:59 <@konobi> Nexxy: which is oddly true
09:59 < _ior> hm
10:00 < _ior> then why am i still sober?
10:00 < _ior> is it because it's only 11am and i'm at work?
10:00 <@konobi> at the wrong employer
10:00 <@Nexxy> konobi, I was thinking the same thing
10:00 <@konobi> =0P
10:01 < _ior> haha
10:10 <@Nexxy> does anyone know if OSX gives predictable interface names to network devices?
10:10 <@Nexxy> e.g. is ethernet always en0 and wifi en1 on a system w/ both?
10:13 < foofoobar> Can someone help me with my mongoose fixtures? The script runs without any errors, but it's not ended and also the data is not inserted: https://gist.github.com/4602795
10:17 < shihan> Nexxy, fwik, its a case of "Set at install, persists thru reboots, but can be changed in config"... similar i guess to linux in alot of ways
10:20 <@Nexxy> shihan, oki thanks... it'd just be nice if there was a difference between the two... you know, like wlan0 eth0?
10:22 < shihan> oh right, yeah afaik they dont really make a distinction in most cases
10:25 <@konobi> Nexxy: go by mac addr
10:36 <@Nexxy> konobi, that doesn't help me!
10:41 < yanivge> Hi Guys
10:42 < yanivge> an one here ever worked with : " io.set('authorization', function (handshakeData, callback) {"
10:43 < yanivge> i cant understand the callback method
10:44 < yanivge> cause no matter what i return on the call back, i never get to the 
10:44 < yanivge> io.sockets.on( 'connection', function ( socket ) {
10:47 <@konobi> Nexxy: best check using a reliable method =0)
10:54 < Industrial> #livescript
10:54 < Industrial> ups
11:12 < Garo_> has anybody here worked with v8 internals? I'm trying to get Script object from a Function->GetScriptId() call.
11:20 < foofoobar> Can someone help me with my mongoose fixtures? The script runs without any errors, but it's not ended and also the data is not inserted: https://gist.github.com/4602795
11:23 < up2beer> foofoobar: try to use safe option
11:26 < foofoobar> up2beer, safe option?
11:27 < up2beer> ...save({safe: true}, callback) || ...connect('mongodb://localhost/test', {safe: true})
11:27 < up2beer> foofoobar: ...save({safe: true}, callback) || ...connect('mongodb://localhost/test', {safe: true})
11:27 < foofoobar> up2beer, okay. What will this do?
11:27 < up2beer> foofoobar: more errors=)
11:31 < foofoobar> up2beer, this does not change anything :/
11:32 < up2beer> foofoobar: http://mongoosejs.com/docs/guide.html#safe
11:35 < foofoobar> up2beer, yeah, I tried it inserting this to the model-creation
11:35 < foofoobar> but as I said, no additional error messages :/
11:38 < up2beer> foofoobar: I don't like it=)) may be you need to use create instead save?
11:44 < foofoobar> sorry I got a disconnect
11:44 < foofoobar> someones answered already?
11:46 < foofoobar> Why is it so hard to get this mongoose fixtures thing working
11:46 < Bergle_1> case you arnt petting it the right way ? 
11:46  * Bergle_1 isnt helping ignore him, to much sugar ;)
11:47 < foofoobar> Bergle_1, but also no one can help me how to do it the right way
11:47 < Bergle_1> i cant, dont even know what lib/thing/framework it is :)
11:48 < up2beer> foofoobar: try to use create instead save
11:49 < foofoobar> up2beer, I get Object â€¦. has no method 'create'
11:56 < Docc> Hello, I'm having some trouble while trying to `npm install` on Windows: I get an error message that my version of Python (I've tried 2.6.0 and 2.7.3) aren't supported by gyp (>= 2.5.0 && < 3.0.0)
11:56 < Docc> Google hasn't been much help, does anyone recognise this problem?
11:56 < up2beer> foofoobar: Mongoose: jobs.insert({ __v: 0, _id: ObjectId("50ffcf4a500ad37027000001"), date: new Date("Wed, 23 Jan 2013 11:53:46 GMT"), title: 'Foobar' }) {}
11:57 < up2beer> foofoobar: it's working
11:57 < Bergle_1> Docc - i installed node.js last week iwth python 2.7.3 and installed a few modules seemed ok.
11:58 < foofoobar> up2beer, what is "jobs" ?
11:59 < up2beer> foofoobar: mongoose append 's' to collection name=)))
11:59 < up2beer> foofoobar: if collection name == 'job', mongoose create collection named 'jobs'
11:59 < Docc> Bergle_1: I've only come across node.js a few days ago, so I may not be understanding correctly. I think it's trying to build/install the memwatch module but everything goes wrong when it classifies my version of Python as wrong
12:00 < foofoobar> jobs: undefined
12:00 < foofoobar> also you are not inserting it via the schema
12:00 < Docc> I've tried the --python option with the same results
12:01 < up2beer> foofoobar: I'm use your example from gist, and it's work
12:01 < foofoobar> where have you inserted the job.insert line?
12:01 < up2beer> foofoobar: echo  "db.jobs.find()" | mongo foobar
12:02 < foofoobar> ???
12:02 < foofoobar> where have you inserted the jobs.insert() line ?
12:03 < virtualjoker> Hello there
12:03 < up2beer> foofoobar: mongoose use insert, not me=)
12:03 < up2beer> foofoobar: i copy your code and run it
12:03 < virtualjoker> There is any Brazilian guy here ?
12:12 < sadasd> woo....so many ppl in this room, any great book or tutorial for node beginners?
12:14 < sadasd> any one?
12:14 < AREZ> I am so beginner
12:14 < AREZ> and I dont know what can do
12:15 < sadasd> hi AREZ, you the the first one who talked to me in IRC...
12:15 < sadasd> I mean, all the irc I tried...
12:16 < AREZ> ok , this is my 2th or 3th use of Irc
12:17 < AREZ> in ##physics you can found more person
12:17 < cloudbender> good morning
12:17 < cloudbender> document.write(this content is ill-formed and will cause an error);
12:18 < SomeoneWeird> lmao
12:19 < AREZ> why?
12:20 < sadasd> can use Node.js to build a chatroom like this?
12:20 < sadasd> is it suitable?
12:22 < AREZ> I don't know , I use chatzilla and with it you can build chtrm in this way: IRC\join channel\channel
12:24 < cloudbender> <<<< bites tongue, needs coffee
12:28 < shubh> from where can i join node js work shop 
12:29 < virtualjoker> searching for Brazilian people.
12:32 < rounce^work> shubh
12:32 < rounce^work> where are you?
12:32 < rounce^work> btw
12:32 < rounce^work> anyone going to LNUG tonight?
12:34 < shubh> rounce i from india 
12:46 < rounce^work> Have you looked for local Node user groups?
12:47 < shubh> @rounce no 
12:48 < rounce^work> oh :(
12:48 < shubh> can you help me to provide some reffrence 
12:49 < shubh> or refer some books/website 
12:51 < rounce^work> for getting started?
12:51 < rounce^work> http://www.nodebeginner.org/
12:52 < shubh> yes 
12:54 < shubh> ok i will start reading it 
12:54 < shubh> http://www.nodebeginner.org/ :)
12:58 < foofoobar> up2beer, sorry, I had to go
12:58 < foofoobar> so, yeah
12:58 < foofoobar> I get this Mongoose: jobs.insert.. stuff in my console, too
12:58 < foofoobar> But when I look into my database
12:58 < foofoobar> there are no values
12:58 < foofoobar> so the inserting had not worked
12:59 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:59 < mpajor_op5> what is considered best-practice in regards to authenticating users from client to server-side? eg. when a client opens up a connection, should he send in a md5-string that I then try to match against on the server with a "secret"-string?
13:00 < Exx2xxO> Hey ! Does anybody know how to recognise when ReadStream reaches the end of a file? stream.on('end', function() {}); does not work :( 
13:01 < MI6> joyent/node: Trevor Norris master * 3d286b6 : buffer: remove float write range checks  Removed range checks when writin - http://git.io/5qoI4A
13:05 < cloudbender> Exx2xxo I think the on.end event indicates the stream is ended, per the vm
13:06 < foofoobar> So maybe someone else can help me with my mongoose problem: I try to add fixtures. I get NO error, the debug looks fine but the values are not inserted: https://gist.github.com/4602795
13:07 < Exx2xxO> So how can I tell my app "When stream reaches end of file start function xy" ?
13:08 < cloudbender> Exx2xxo honestly i'm a bit new to node. I stream in c well, but node is a bit different.  Someone else will help I am sure.
13:09 < cloudbender> The idea behind node is that it relies on the events fired by the vm for such indications, if I read it right.
13:11 < cloudbender> There are a few experts here who will gladly help, but some are not on yet.
13:12 < zomg> Exx2xxO: have you looked at the docs for ReadStream?
13:13 < zomg> stream.on('end', function() { console.log('foo'); }); *should* work
13:17 < Exx2xxO> but sadly it doesn't it never stops reading the file :(
13:17 < SomeoneWeird> 0.o
13:17 < SomeoneWeird> you mean like fs.createReadStream ?
13:17 < zomg> Exx2xxO: try using the 'data' event and dump all the output you get
13:17 < zomg> 'end' should fire on EOF though..
13:17 < SomeoneWeird> it should ya
13:17 < cloudbender> may use end as a trigger to close the stream ? Or would that kill the connection ...
13:18 < cloudbender> I'll stop talking now
13:18 < supersym> can anyone tell me what the difference is between 'createDomain' and 'create' in the node core Domain module?
13:19 < Exx2xxO> Oh I see a big mistake in my question ^^ I am using createReadStream and this never ends
13:19 < SomeoneWeird> that makes no sense
13:19 < SomeoneWeird> got some code?
13:19 < cloudbender> <<< has prototype chains all over him, is struggling
13:20 < jesusabdullah> protip: if someone says "we need to go DEEPER" smack them
13:20 < jesusabdullah> you only really want to go "one deep" on the prototype chains
13:20 < jesusabdullah> like, "oh okay inherit from EventEmitter"
13:20 < jesusabdullah> that's sane
13:20 < cloudbender> You are wise jesusabdullah
13:21 < jesusabdullah> but you don't want to inherit like 3 or 4 levels deep, that's just kind of insane
13:21 < jesusabdullah> if you can help it anyway
13:21 < jesusabdullah> I can't imagine very many cases where you would want to do that
13:21 < cloudbender> sometimes I can't help it.  I'm bad for that.  It's me.  It's who I am.
13:21 < Exx2xxO> SomeoneWeird http://pastebin.com/i0vXcn8G
13:22 < jesusabdullah> I've only really seen it in inheriting from like, a SpecificStream to make a MoreSpecificStream
13:22 < jesusabdullah> usually what I do though is search npm for the type of stream I want, or close to it
13:22 < jesusabdullah> because I am lazy
13:22 < jesusabdullah> and then just straight modify any properties I don't like once I have the instance
13:22 < cloudbender> right
13:23 < jesusabdullah> also dominictarr wrote libraries for pretty much any stream type you'd want
13:23 < jesusabdullah> if he didn't like, raynos did
13:23 < rounce^work> jesusabdullah
13:23 < jesusabdullah> yes
13:23 < jesusabdullah> yes this is dog
13:23 < rounce^work> you wouldn't inherit it's prototype
13:23 < rounce^work> you'd merge it
13:24 < rounce^work> not the same
13:24 < jesusabdullah> in what context?
13:24 < jesusabdullah> Do you mean that util.inherits() really merges prototypes instead of overwriting them? Because that would be true
13:24 < rounce^work> yes
13:24 < jesusabdullah> but util.inherits() is what I mean when I say "inherits"
13:24 < rounce^work> but that's not the same as assigning a definition to the prototype chain
13:24 < jesusabdullah> not, "assign the prototype, whatever"
13:25 < jesusabdullah> I never said it was
13:25 < rounce^work> but they're quite different
13:25 < jesusabdullah> you can call both of them inheritance, it's just a vernacular
13:25 < rounce^work> "but you don't want to inherit like 3 or 4 levels deep, that's just kind of insane"
13:25 < jesusabdullah> it's not called util.mixinsButForPrototypes() is it?
13:25 < rounce^work> because it mimics it
13:26 < rounce^work> but the prototype chain retains it's depth
13:26 < jesusabdullah> but you called util.inherits 4 times
13:26 < jesusabdullah> and when you read the code
13:26 < jesusabdullah> you have to be like,
13:26 < jesusabdullah> util.inherits(SpecificStream, LessSpecificStream)
13:26 < rounce^work> yeah
13:26 < jesusabdullah> and then be like, "oh shit what's LessSpecificStream?"
13:27 < jesusabdullah> util.inherits(LessSpecificStream, EvenLessSpecificStream)
13:27 < rounce^work> I think you're missing the point
13:27 < jesusabdullah> and then, util.inherits(EvenLessSpecificStream, ProbablyLikeAReadableStreamOrSomething)
13:27 < _ior> i see where this is going
13:27 < _ior> util.inherits(LeastSpecificStream, TotallyGenericStream)
13:27 < _ior> it's turtles all the way down!
13:27 < jesusabdullah> No, I understand that pedantically using util.inherits and assigning Constructor.prototype are not the same
13:27 < rounce^work> but you don't want to inherit like 3 or 4 levels deep, that's just kind of insane < yes, performance can be a factor with a very deep prototype chain
13:28 < rounce^work> but the same implications don't really apply for util.inherits()
13:28 < jesusabdullah> I don't care about performance at ***ALL***
13:28 < jesusabdullah> I care about code readability
13:28 < rounce^work> the chain doesn't get longer, it gets fatter at the current depth
13:30 < rounce^work> but this isn't about YOU
13:30 < rounce^work> it's about helping cloudbender
13:30 < jesusabdullah> and we're discussing readability
13:30 < jesusabdullah> not perf
13:30 < jesusabdullah> and I feel like cloudbender wasn't all that confused on this matter THOUGH I COULD BE WRONG
13:31 < jesusabdullah> anyhoo
13:31 < rounce^work> well, given he was having trouble with closures yesterday, I'd say there are some ambiguities with scope on the way for him
13:32 < jesusabdullah> fair enough
13:32 < cloudbender> I am struggling with letting go of the class model.  Watching your discussions closely.
13:33 < jesusabdullah> hmm
13:33 < cloudbender> I am a Java/Delphi/C programmer
13:33 < jesusabdullah> I started programming with a focus on functional techniques
13:33 < cloudbender> right
13:33 < rounce^work> ^ in that case you need to really understand protoypal inheritance
13:33 < rounce^work> not you jesus
13:33 < cloudbender> I am learning to think in terms of functional programming
13:33 < rounce^work> I meant cb
13:33 < jesusabdullah> haha
13:34 < rounce^work> cloudbender, not having the class keyword doesn't a functional make
13:34 < jesusabdullah> cloudbender: Have you tried using closures to generate objects with private state?
13:35 < jesusabdullah> I learned to think in terms of functions for 2 reasons: one is that I was doing numerical methods and don't like for loops or state machines. The other was SubStack.
13:35 < jesusabdullah> maybe a touch of reading through Land of Lisp
13:35 < jesusabdullah> XD
13:35 < SomeoneWeird> lol
13:36 < rounce^work> valid
13:37 < Exx2xxO> So nobody has an answer to my weird problem that createReadStream never ends reading a file?
13:37 < cloudbender> With node, it seems to me, you want to write solid asynchronous code, and it's scripted.  I'm allowing my brain to adjust, but it takes time.
13:37 < tomaso> hello, I would like to use nodejs to return data about our torque (aka OpenPBS) server - the torque has C API - could you guys recommend a good guide how to write node.js modules?
13:42 < rounce^work> cloudbender: https://gist.github.com/4605683
13:42 < cloudbender> thanks rounce^work
13:43 < cloudbender> nice thanks
13:51 < Exx2xxO> nothing is working stream.on('end' ; stream.once('end' ; stream.on('close' is there any way to emit the 'end'-event manually once the end of the file is reached?
13:51 < niix> hi everyone
13:55 < onr> is forever module still the best way to keep scripts running?
13:57 < brettlangdon> onr, I think there are a few others, but I use forever and am fairly happy with it
13:57 < brettlangdon> I even use it for a few non-node applications
13:58 < niix> do people actually use visual studios to make node apps?
13:59 < onr> brettlangdon: that's nice. do you use it for node.js daemons too?
13:59 < brettlangdon> onr, yeah, we run a hubot and a "play" server, so I use forever to keep both processes running
13:59 < brettlangdon> hubot is node and play is ruby
14:00 < brettlangdon> works fairly well IMHO
14:00 < brettlangdon> other than, if you application fails to start, by default forever will continuously try to restart itâ€¦ forever
14:00 < brettlangdon> but there are settings for that, I do believe
14:01 < onr> i like its simplistic approach
14:03 < onr> brettlangdon: do you use anything like cluster module to implement multi-process workers?
14:04 < brettlangdon> onr, I have before, nothing in production though
14:04 < brettlangdon> fairly easy and again, works well
14:11 < yanivge> guys, is there a way in node.js to catch the program and run some code before the program is terminated
14:11 < yanivge> like END block in perl?
14:13 < hipsterslapfight> like http://nodejs.org/api/process.html#process_event_exit yanivge?
14:13 < niix> is passport good for basic auth?  Like having a user sign up with email and password type things?
14:14 < nik9000> Hey irc channel - I have a question about winston configuration and how to use it in a module - is this the right place to ask it?
14:18 < _ior> auth: use bcrypt. use bcrypt. use bcrypt. use bcrypt.
14:19 < _ior> EOL
14:22 < _ior> or, well, use pbkdf2
14:22 < _ior> or maybe use scrypt
14:22 < _ior> but otherwise: use bcrypt
14:25 < AAA_awright> _ior: No, bcrypt is modified blowfish. I don't trust that for a second. Use PBKDF2. Use PBKDF2. Use PBKDF2.
14:26 < AAA_awright> Also, PBKDF2 ships with Node.js
14:26 < _ior> i know just enough about crypt to know i shouldn't trust myself to design or judge crypto
14:26 < _ior> :)
14:27 < niix> Does anyone here have any experience with connecting to a MSSQL database in Node?  From a Mac, not from a Windows machine
14:27 < _ior> the machine you're connecting from shouldn't matter
14:27 < AAA_awright> _ior: That's good advice
14:28 < _ior> niix and i did use an mmssql library but had to do some custom hacking to get it to work right, but i don't remember what the issue was
14:29 < brettlangdon> niix, re: passport, yeah passport is great
14:29 < niix> _ior: do you recall which module you used?  I wrote and entire app in Django and I had to connect to a mssql legacy db for info and I'm having some serious issues.  Was hoping I could resolve with node
14:29 < brettlangdon> I just started another project last night and have it use github auth with passport-github, works like a charm
14:29 < niix> brettlangdon: I've used the twitter and github strategies and they work awesome
14:29 < _ior> niix, trying to find it again now 
14:29 < niix> but have you used it for basic user signup and sign in?
14:30 < niix> I guess maybe that's what 'passport-local' is for
14:30 < _ior> tedious, i think
14:30 < niix> _ior: I was looking at that one, thanks I'll give it a shot
14:30 < brettlangdon> niix, I think so, the basic passport module lets you define you own auth function, so you can do db looks and etc, you have to handle the sign-up code yourself
14:30 < niix> brettlangdon: ok cool thanks
14:31 < niix> I'm sure there are examples on sign up w/ passport out their somewhere on github :P
14:32 < brettlangdon> niix, yeah, I'm sure I've done it before
14:35 < Industrial> livescript
14:35 < Industrial> again..
15:04 < rideh> Having a little difficulty configuring nginx for first time on debian. in /opt/nginx/conf/nginx.conf i added include for /etc/nginx/sites-enabled and have ln -s a config file but something is wrong with my config file I believe. Output: emerg] host not found in upstream "app_m.myapp.com" in /etc/nginx/sites-enabled/m.myapp.com:20 (domain obscured)
15:05 < rideh> my config file: http://pastebin.com/pPrQ66Ls
15:06 < bigkevmcd> rideh: might want to try #nginx
15:06 < rideh> bigkevmcd: yeah never really sure where to ask when trying to mash stuff up
15:16 < Industrial> Getting this error I can't make sens of yet with seaport / airport: https://gist.github.com/e97621797778abf61c54/132b28f9ff33c97dee580b9f133f0ce04ebbabf7
15:16 < Industrial> happens when I run the js
15:20 < Industrial> correct api, same error: https://gist.github.com/e97621797778abf61c54/56b8ca4142fa4bce31cc6fb6b505d2de38663816
15:29 < Exx2xxO> Hey me again with the same problem: http://pastebin.com/DTh0V5dy the stream in this code never emits the 'end' event I don't know why... anyone here you knows why?
15:29 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:34 < Industrial> got it working using dnode and seaport without airport
15:37 < tonka> `3rdEden: thank you
15:38 < Exx2xxO> Okay I discovered that the two functions I made pump() and process() maybe interrupt this event. Because if I delete them stream.on('end',... works perfect oO anyone knows waht these two functions do to stop that event?
15:39 < ekryski> This is a pretty noobish question but I'm having a debate at work and I have never really considered if there is anything wrong with using exceptions to handle errors. I personally don't like the style but is there any reason not to use exceptions in JavaScript, compared to emitting error events other than possibly flexibility and personal style?
15:39 < timoxley> Exx2xxO for one "lenght"
15:40 < timoxley> Exx2xxO line 24
15:40 < timoxley> ekryski you can't safely catch exceptions in js
15:40 < timoxley> if they happen in another tick
15:41 < timoxley> e.g.
15:41 < timoxley> there's no way to catch setTimeout(function() {throw new Error}, 0)
15:41 < timoxley> afaik
15:42 < Exx2xxO> timoxley change it but still not working :/
15:42 < niix> I love that I can misspell 'install' with npm and it still works
15:42 < ekryski> timoxley: ah I see. Then I also suppose they would be problematic with web workers.
15:42 < timoxley> ekryski problematic as soon as you do anything async
15:43 < timoxley> ekryski web workers, um, not sure, perhaps the process that spawns them will catch the errors
15:43 < timoxley> never actually used web workers
15:44 < ekryski> timoxley: Huh. So the contexts get messed up with async calls? I wonder what the root cause of that is. You would think that the exception could be caught in the callback or even globally
15:46 < timoxley> ekryski it'll get caught globally if the behaviour you want is having your program crash every time any exception occurs
15:46 < ekryski> timoxley. ha ha. Ya that's the argument I was making at work.
15:47 < timoxley> ekryski http://nodejs.org/docs/latest/api/all.html#all_event_uncaughtexception
15:48 < ekryski> timoxley: thanks for the insight :-)
15:49 < timoxley> ekryski note the warnings in that documentation
15:50 < timoxley> ekryski just use the callback(err) pattern to handle errors locally
15:53 < ekryski> timoxley: Yes that is what I always do. I'm not a noob to NodeJS or JavaScript. I had just never given exceptions much thought because I always use the callback(err) pattern. Was just wondering about the negatives of exceptions. Thought I should be able to back up why I don't like them instead of being blindly opinionated.
15:54 < ekryski> timoxley: They are using exceptions client side anyway. No server side at all. But the same rules apply I suppose.
15:55 < aalex_> So, I made a nodejs addon that wraps my library. How do I install it system-wide? Or at least for my user?
15:56 < aalex_> (On Ubuntu Precise with node-gyp and node 0.6.12)
15:57 < ekryski> timoxley: thanks again for the discussion
15:57 < supersym> you could use domains for wrapping the context and bubble up the proper exceptions 
15:57 < supersym> but thats all very experimental
15:58 < timoxley> supersym and doesn't work clientside
15:58 < Exx2xxO> Okay so as I can't find the solution for my problem.. can anyone tell me how to emit the 'end' event by myself?
15:59 < rshade98> I am trying to compile 0.8.18
16:00 < rshade98> I am getting   File "./configure", line 360
16:00 < rshade98>     1 if options.unsafe_optimizations else 0)
16:00 < rshade98>        ^
16:00 < rshade98> SyntaxError: invalid syntax
16:00 < rshade98> [root@domU-12-31-39-16-20-DB node-v0.8.18]# make -v
16:00 < rshade98> GNU Make 3.81
16:00 < tjfontaine> your python is too old
16:00 < rshade98> any ideas? 
16:01 < rshade98> tjfontaine I have python26 installed
16:01 < rshade98> do I need to point it to the right binary
16:02 < tjfontaine> rshade98: run configure with: python26 configure
16:02 < rshade98> awesome, thanks
16:03 < diminoten> hey is there an express channel
16:03 < tjfontaine> when you make you might want to: make PYTHON=python26
16:03 < diminoten> I'm wondering if the anti-csrf measures in express also protect against xss
16:03 < rshade98> I updated the Makefile
16:03 < Kakera> was there a node.js update that disallowed creating Buffers with too big length?
16:04 < Kakera> 0.8.8 just creates a 0-length Buffer, 0.8.16 throws an error
16:04 < Kakera> but one is on 64-bit Linux, another is on 32-bit Windows
16:04 < Iszak> When trying to run forever I get the error "Error: Cannot find module './daemon.v0.8.18'" any known issues with this? node.js 0.8.18
16:04 < supersym> @timoxley yeah I missed that part in the convo :P
16:06 < Kakera> I don't see any such change in the changelog
16:06 < Kakera> either I'm missing it, or it works differently in Linux and Windows
16:07 < ezrafree> oh wow there's a daemon module? that's pretty sweet
16:07 < ezrafree> Kakera: did you install it as a global module? as in, with "npm install -g daemon"
16:08 < Kakera> ezrafree, I asked about buffers
16:08 < ezrafree> oh sorry, i meant to ask Iszak that
16:08 < ezrafree> Kakera: sorry, i don't know about buffers
16:09 < Iszak> sorted my issue out, just deleted the global node_mdoules folder
16:14 < marry5030> what is the last index on anrray reffered to when doing slice
16:14 < marry5030> ?
16:14 < marry5030> any help appreciated
16:14 < context> marry5030: ?
16:15 < context> marry5030: -1 ?
16:15 < context> is that run bot still in here
16:15 < marry5030> thanks so -1 is refered to the last index?
16:15 < context> >> [1,2,3,4].slice(-1)
16:15 < purr> context: (object) [4]
16:16 < context> >> [1,2,3,4].slice(-2)
16:16 < purr> context: (object) [3, 4]
16:16 < niix> why doesn't <% layout('layout') -%> work with ejs anymore?
16:17 < Exx2xxO> okay another question: Is there a way in express to redirect and sending a message with this redirection? Something like redirect('/register',{errorMsg:'This account already exist'}); ?
16:17 < marry5030> so if i want the entire array do i do slice(0, -1)?
16:17 < hipsterslapfight> ekryski: res.redirect("/register?msg=Thisâ€¦");
16:18 < hipsterslapfight> or you could always set something in the session too
16:20 < marshall> hey node
16:20  * xk_id waves
16:21 < marshall> http://planetnodejs.com is down, which is linked to on http://nodejs.org/community/
16:21 < skope> http://savanne.be/articles/deploying-node-js-with-systemd/
16:21 < skope> thoughts?
16:22 < marshall> and the link to the mailing list is broken too
16:22 < Kakera> could someone try typing `new Buffer(2342324240)` in REPL?
16:22 < context> marry5030: works here
16:22 < context> planetnodejs.com that is
16:22 < context> err marshall *
16:23 < marry5030> thanks >context
16:24 < Kakera> for some reason new Buffer(2000000000) throws, but new Buffer(2342324240) returns an 0-length buffer
16:24 < tonka> what's planetnodejs.com?
16:25 < tonka> site returns a 500 fo rme
16:25 < tonka> for* me
16:27 < marry5030> something.slice(0, -1) should this capture index 0 through last index? 
16:28 < marry5030> it is not working for me
16:29 < marshall> context: planetnode works when you try to visit it?
16:30 < mscdex> tonka: keep trying, i've noticed that lately
16:32 < timoxley> marry5030 what does "capture index 0 through last index" mean
16:33 < marry5030> I am trying to store 0 through last
16:33 < timoxley> marry5030 as in, everything?
16:33 < marry5030> yes
16:33 < marry5030> sorry
16:33 < timoxley> marry5030 why not just
16:33 < timoxley> use "something" directly
16:33 < marry5030> just?
16:34 < timoxley> e.g.
16:34 < timoxley> stuff(something)
16:34 < timoxley> marry5030 do you need a copy?
16:34 < timoxley> marry5030 try just slice()
16:34 < marry5030> okay
16:34 < marry5030> thanks
16:35 < timoxley> or slice(0)
16:35 < pachet> hi all. with node-mysql is there a way to change an active connection on the fly to accept multiple statements? rather than have to tear it down and pass in that param as true to the constructor
16:35 < timoxley> marry5030 also read what the slice params do: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/slice
16:36 < marry5030> okay thanks :)
16:36 < timoxley> pachet connections to multiple dbs?
16:36 < timoxley> or
16:37 < timoxley> pachet run multiple queries at once
16:37 < Kakera> now this is interesting
16:37 < marry5030> slice () and slice(0) isnt working for me .. i have used slice(1) to store everything but the first element and worked so i hoped i would be able to do the entire thing too
16:37 < Kakera> http://pastebin.com/weF0HxDA
16:37 < tonka> mscdex: yep. i'll try later -- so far no luck
16:38 < Kakera> why would this happen?
16:38 < Kakera> it's 0.8.8 btw
16:38 < pachet> timoxley: multiple statements at once
16:38 < pachet> timoxley: trying to kick the stored procedure can down the road a bit
16:38 < Kakera> apparently Uint32Value returns 0 for everything between max int and max uint
16:40 < timoxley> pachet https://github.com/felixge/node-mysql/blob/master/test/integration/connection/test-multiple-statements.js
16:40 < timoxley> pachet https://github.com/felixge/node-mysql/blob/master/test/integration/connection/test-multiple-statements-streaming.js
16:40 < tonka> client switch
16:41 < nik9000> I asked this about an hour ago but didn't get any traction so I'll use different words this time: what is the normal way for a module to log stuff?
16:41 < holzp> I use watson as a logger
16:42 < holzp> wut?
16:42 < TehShrike> nik9000: when I have questions like that, my instinct is to http://nodezoo.com/#q=log
16:42 < mscdex> Kakera: you might try 0.8.18
16:43 < pachet> timoxley: yeah, i was browsing those earlier. in both cases he's passing the multipeStatements flag to the connection constructor
16:43 < pachet> oh well
16:43 < Kakera> mscdex, it works fine on 0.8.16
16:43 < Kakera> I suspect it was a v8 bug that got fixed somewhere between 0.8.8 and 0.8.16
16:43 < mscdex> Kakera: yeah, there were a few buffer-related changes on v0.8
16:43 < holzp> nik9000, proble mI found is a module should be working with whatever logger the program using it has
16:44 < holzp> wtf, can a mod ban this guy?
16:44 < mscdex> bey0nd: please stop spamming
16:44 < mscdex> Nexxy: ping
16:44 < holzp> for modules I use in my own programs, sort of self-modules I pass a logger in as an arg
16:44 < mscdex> konobi: mbalho: ping
16:44 < nik9000> TehStrike: I'm not looking for a library to help me so much as what the general "right way to do it" is - I like winston but using it in a module seems to get me a module specific copy of it which can't be configured globally
16:44 < mscdex> Kakera: no, it's a Buffer thing so not v8
16:44 < holzp> so i can have the main program setup the logger as it wants and the module is subbordinate 
16:45 < nik9000> holzp: that makes sense
16:45 < Kakera> mscdex, UInt32Value returns wrong values
16:45 < Kakera> so yeah it's v8
16:45 < holzp> its a tricky problem
16:46 < nik9000> holzp: I'd expected there to be a neat solution to it I suppose
16:46 < holzp> how did I earn this enmity from a bot?
16:46 < mscdex> piscisaureus_: ping
16:46 < holzp> couldn't find one I looked 
16:47 < nik9000> holzp: I come from java and there is a "right way to do it" in the sense that if you jump through all the right hoops you can filter logging from any library and they all merge together in a useful way
16:47 < holzp> well yeah but it took years for that right way to develop
16:47 < holzp> node is still young, patterns are still being figured out
16:48 < nik9000> sure, but we stand on the shoulders of giants and all that
16:48 < holzp> yeah but the giants are still getting large!
16:49 < nik9000> this isn't the first problem I had - but it came up pretty quick
16:49 < nik9000> given there is something like winston I figured this was the logical next thing to think about
16:49 < holzp> ha me too
16:49 < draginx> So is nothing truly async unless it's wrapped in a process.nextTick or does that simply queue it up for the next *available* tick?
16:50 < nik9000> actually, I kinda figured someone had though long and hard about this before implementing a billion different appenders for winston
16:50 < cool_boy> hello everyone !
16:50 < holzp> nope dont think so not yet!
16:50 < nik9000> draginx: stuff can also be async because it is waiting on an external resource
16:52 < nik9000> draginx: but just calling a function isn't async
16:52 < cool_boy> can some one tell me what this regex does?
16:52 < cool_boy> var regex = /^(\d\d:\d\d:\d\d)(?:\.\d+)?$/;
16:52 < cool_boy> it is being used for dates
16:53 < mscdex> cool_boy: http://www.regular-expressions.info/reference.html
16:53 < holzp> LOOKS LIKE TIME
16:53 < holzp> WOAH
16:53 < holzp> sorry
16:53 < RLa> 00:00:00.456 <- looks like time from iso 8601?
16:53 < holzp> looks like time with optional microseconds
16:53 < RLa> yeah
16:54 < holzp> hh:mm:ss(:mmm)
16:54 < mscdex> durango: yeah nextTick will queue it up for the next tick
16:54 < nik9000> I like this one, btw: http://www.regexper.com/
16:54 < holzp> i need to spend so much time learning regex its so important
16:54 < durango> ah ok so the only requirement is really just making a callback/function for async
16:54 < cool_boy> mscdex: thanks but i wanted to know if it auto formats dates ? like i can see the changes on front end date and month are interchanged if both are less than 12 and year is in two digits
16:54 < durango> unless ur doing incredibly CPU intensive task but in that case id just throw it to a separate process anyway, thanks! :)
16:55 < cool_boy> i dont know even a little about js stuff
16:56 < cool_boy> or is there some good regex for check dates?
16:57 < mscdex> cool_boy: a regex by itself is merely for parsing, but you can use it with something like string.replace() to reformat
16:58 < cool_boy> this is the function which I am looking right now
16:58 < cool_boy> http://pastie.org/5838266
16:58 < cool_boy> is it responsible to convert two digits year into four digits?
16:59 < cool_boy> like if i write 22 it becomes 2022
16:59 < mscdex> well parseExact isn't pure javascript
16:59 < mscdex> some library must be mutating Date
17:00 < Tobsn> does anyone know how i can use a form as .form-horizontal and then within the same form use the normal top align layout? (bootstrap)
17:02 < cool_boy> mscdex: so it is not .js library?
17:02 < cool_boy> function?
17:05 < Sicp> can we watch this please? http://meteor.com/screencast
17:05 < Sicp> I have a couple of questions about it
17:06 < Sicp> specifically about minute 7 where the guy introduces a disadvantage of this framework (latency compensation (i.e. slow))
17:07 < Sicp> and I am thinking...well that's because you're still synchronous, if you were to Node, you would solve that. But turns out that you deploy to a Node server
17:08 < Sicp> will Node start treating internal meteor requests asynchronously and thereby making this framework asynchronous just by virtue of an asynchronous parent (Node) handling the framework's behavior?
17:08 < andrew12> are there any libraries to decode a url encoded string into a buffer
17:08 < andrew12> like %d59%11c%90%82%a0%cdX%d2%bb%e6q%07b2%0aj%f0%1d
17:09 < tonka> Scip: perhaps, at #meteor they'll be able to answer that
17:09 < tonka> Sicp*
17:09 < mscdex> andrew12: not directly, but you could either easily write a loop manually or urldecode it first then do `new Buffer(decodedString, 'binary')`
17:09 < Sicp> but it runs on Node in the end
17:09 < Sicp> ok I will check there as well
17:11 < tonka> Sicp: np, i am also interested to know
17:11 < Sicp> <edulix> Sicp: it's not a disadvantage, it's a feature
17:11 < AAA_awright> I'd like to take this time to impress upon people how small a project Node.js really is
17:11 < Sicp> hehe
17:11 < AAA_awright> It took me longer to `git pull` than it took to recompile Node.js
17:11 < Sicp> I will see if he will return some answer
17:11 < AAA_awright> And the entire thing was done in ~20 seconds
17:12 < andrew12> it doesn't take that long to recompile any project
17:12 < andrew12> especially if not a lot of code was changed
17:12 < mscdex> AAA_awright: sure, with a fast processor and many cores :-)
17:13 < AAA_awright> mscdex: 4 cores, 2.4 Ghz
17:13 < mscdex> yeah
17:13 < AAA_awright> But also a 100Mbps connection
17:14 < AAA_awright> Which I can and do saturate
17:14 < durango> haha
17:16 < durango> quick question for nodejs.. if I have an express app.. simple one with like app.get('/hello', function(req, res){ console.log('hi'); var variable = undefined; var hello = 'world'; res.send(200); }); <-- why that request to '/hello' be blocked until we get to res.send for the next client?
17:19 < Ramone> durango: it shouldn't
17:20 < durango> ah ok thanks :)
17:20 < Ramone> there's probably more to the reproduction of your problem than what you wrote
17:20 < durango> i mena obviously thats a nanosecond example the real function would require more
17:20 < durango> what do u mean?
17:21 < Ramone> ie, I doubt that would happen if I started a new express app and only did what you wrote
17:21 < brettlangdon> durango, can you share more code, through gist or something?
17:21 < durango> brettlangdon: it was just a theoritcal question tbh
17:21 < brettlangdon> oh
17:22 < brettlangdon> then, no, shouldn't block
17:22 < durango> trying to understand and grasp the concepts of what is async vs what is not in nodejs
17:22 < Ramone> network and file i/o are asynch
17:24 < durango> that's it? :P
17:24 < Ramone> pretty much
17:25 < Ramone> there are some minor exceptions that you don't need to worry about when you're starting
17:31 < squeakytoy> Guys. I have a strange problem I cant figure out. I am doing an AJAX request, sending JSON to my Express webserver https://dl.dropbox.com/u/8183146/Image2.png -- but when I read the body (I have done app.use( express.bodyParser() ); ) with request.body, but then I get back: { '{"username":"234","email1":"34","email2":"234","key":"234"}': '' }
17:31 < squeakytoy> It seems like, for some reason, the response is wrapped inside another json..
17:33 < DTrejo> bnoordhuis: hey, i think it might be cool to write a thing that that runs your program, and does some v8 introspection to see what types were guessed, and then output a typescript version of all your code. Any thoughts?
17:33 < DTrejo> (I need to do more research on it still)
17:35 < polotek> squeakytoy: you're posting as url form encoded
17:36 < polotek> try application/json
17:38 < AAA_awright> Alright, I'm a little creeped out right now
17:38 < AAA_awright> I wrote ~100 lines of code and I tried it for the first time and it's all working perfectly
17:38 < AAA_awright> 175 lines actually
17:38 < AAA_awright> I have reached a NEW LEVEL OF CODING CONSIOUSNESS
17:42 < holzp> it probably just means your bugs are subtle and will be fusterating
17:42 < Kakera> is there any ETA for 0.10?
17:47 < CoverSlide> Kakera: last i heard it's basically ready to go, except maybe some performance regressions
17:50 < durango> would this example https://gist.github.com/16aece202d55c0825a7d be considered "blocking" ?
17:51 < dabarnes> no?
17:52 < squeakytoy> Guys. I have a strange problem I cant figure out. I am doing an AJAX request, sending JSON to my Express webserver https://dl.dropbox.com/u/8183146/Image2.png -- but when I read the body (I have done app.use( express.bodyParser() ); ) with request.body, but then I get back: { '{"username":"234","email1":"34","email2":"234","key":"234"}': '' } -- It seems like, for some reason, the response is wrapped inside another json..
17:52 < squeakytoy> polotek, that shouldnt matter though. Its a node.js problem, why it acts like this
17:53 < bradleymeck> creationix: clarify `this` in https://twitter.com/creationix/status/294122268173430784
17:53 < squeakytoy> polotek, if i do: "application/json; charset=utf-8" <-- i get an error deep in express
17:53 < durango> dabarnes: ah ok http://howtonode.org/understanding-process-next-tick this article just got me confused
17:54 < CoverSlide> durango: all non-io stuff is blocking in node. i don't really see any io there
17:54 < dabarnes> squeakytoy so you are sending '{"username":"234","email1":"34","email2":"234","key":"234"}': '' } and its not in the req.body?
17:54 < durango> ahhh now im starting to understand a bit :) yeah that article I just linked really f'ed with my head then
17:54 < Ramone> squeakytoy: can't tell without seeing code.
17:54 < squeakytoy> dabarnes, my req.body is: { '{"username":"234","email1":"34","email2":"234","key":"234"}': '' }
17:55 < dabarnes> so the object you are send is the key?
17:55 < dabarnes> not the value
17:55 < Ramone> use something other than ajax? like postman or restclient, and then you can tell at least if it's a clientside problem or a serverside problem.
17:55 < creationix> bradleymeck, "this" was referring to binary bytecode in the browser
17:55 < squeakytoy> dabarnes, http://pastebin.com/yx04mW0u
17:55 < bradleymeck> ah, same convo but twitter didnt link
17:56 < creationix> swf, java applets, etc..
17:56 < CoverSlide> binary bytecode? like with NaCl?
17:56 < creationix> yeah, a future version of NaCl will have platform independent bytecode using llvm
17:56 < CoverSlide> or maybe some vs that uses DavaViews?
17:56 < CoverSlide> *vm
17:56 < creationix> right now you have to compile for every arch you support
17:56 < danmactough> diminoten: Absolutely not
17:56 < squeakytoy> Ramone, http://pastebin.com/yx04mW0u - i mean*
17:57 < CoverSlide> I think PNaCl is actually a great idea
17:57 < dabarnes> squeakytoy that looks fine to me but I'd wonder how you are posting the json
17:57 < bradleymeck> creationix: i thinks its a pipe dream, does not abstract out the OS entirely and so doing complex things will still be painful
17:57 < Ramone> squeakytoy: looks like an incomplete paste
17:57 < bradleymeck> and you probably only want it for complex things...
17:57 < squeakytoy> Ramone, its complete, concerning the chain
17:58 < CoverSlide> the largest issues with swf and java were their horrible security models
17:58 < CoverSlide> other than that, they were widely popular
17:58 < dabarnes> squeakytoy, how are you posting the data?
17:59 < creationix> I think an llvm style bytecode with access to browser APIs would be neat
17:59 < squeakytoy> dabarnes, via jquery ajax
17:59 < CoverSlide> less so with java, but compared to the size of the web at the time it was probably about equal
17:59 < creationix> the browser is *the* cross-platform platform
17:59 < Ramone> squeakytoy: you're probably POSTing wrong
17:59 < bradleymeck> CoverSlide: for security models, its really f'in hard to secure an OS with a program running with privileges and getting the plugin to not have the privileges while still being sane
17:59 < squeakytoy> Ramone, why do you think so?
17:59 < Ramone> squeakytoy: use something other than ajax? like postman or restclient, and then you can tell at least if it's a clientside problem or a serverside problem.
18:00 < Ramone> cut your debugging in half
18:00 < CoverSlide> I'm sure it is
18:00  * bradleymeck wishes bsd,linux,solaris,mac,and windows could agree on a security model
18:01 < dabarnes> squeakytoy, It looks like the json string is getting set as the key
18:01 < Ramone> or at elast look in your brwoser's web dev tools and see what's going across the wire
18:01 < holzp> the One True Model
18:01 < holzp> I bet that would end up being less secure
18:01 < squeakytoy> dabarnes, yea
18:02 < asturel> is there board/forum module for nodejs?:D
18:02 < asturel> some very basic
18:02 < mscdex> asturel: google groups
18:02 < mscdex> oh wait nvm
18:02 < CoverSlide> I haven't really looked into (P)NaCl much, but if we truly want HTML / JavaScript to be the cross-platform platform, then we need a way of doing calculations faster and at a lower level than what JavaScript can provide
18:02 < asturel> mscdex i mean application
18:02 < asturel> :D
18:03 < asturel> i didnt found anything with npm.. and google throws google groups forums...
18:03 < polotek> squeakytoy: I just tested this with latest request
18:04 < polotek> application/json works, application/www-form-urlencoded does not
18:04 < dabarnes> squeakytoy so i would try something like just posting to object instead of a string, or make confirm the fact that its getting set wrong and go require("request").post({url: "", json: {}}, blah blah)
18:04 < dabarnes> squeakytoy just to make sure its not your route
18:13 < CoverSlide> shouldn't it be application/x-www-form-urlencoded?
18:14 < CoverSlide> btw i really hate the enctype
18:14 < squeakytoy> works now, thanks guys
18:14 < CoverSlide> i used to always have to look it up, i got it memorized after 2 years
18:14 < dabarnes> cool
18:15 < holzp> enctype feels like a legacy thing that should just be automatic now
18:16 < CoverSlide> yes, it could be easily inferred, but I'd rather have my server know what it should be looking for than needing to infer that information
18:16 < squeakytoy> it works with: "Content-Type: application/json; charset=UTF-8" and "Content-Type: application/x-www-form-urlencoded; charset=UTF-8" <-- but i dont know which is correct to use for a POST and Json
18:17 < Ramone> I bet you can guess :)
18:17 < CoverSlide> i'd rather read the header first, then start parsing, then start parsing, iterate through all the possible types until i find a match, then finish parsing
18:17 < Ramone> form-url-encoded looks like:   asdf=1234&qwer=56785
18:17 < CoverSlide>                                                          ^ s/then/than
18:18 < Ramone> it's not easily inferred at all? remember http handles a lot mor than just json and form-url-encoded
18:18 < CoverSlide> i'm just saying inference isn't ideal
18:19 < CoverSlide> i'd rather the client tell me what the content type is
18:19 < CoverSlide> the client should know
18:22 < andrew12> querystring.unescapeBuffer
18:24 < cloudbender> so, where as a named function is stated in code memory, anonymous functions are stacked ?
18:25 < cloudbender> and reference counted for preservation ?
18:26 < CoverSlide> seems implementation-specific
18:27 < cloudbender> Well, anonymous functions passed as a value, they are stacked and reference counted ?
18:28 < cloudbender> <<< believes there is science behind all appearant magic.
18:28 < CoverSlide> i would hope and assume so
18:29 < Ramone> stacked = ?
18:29 < Ramone> put on the stack?
18:29 < cloudbender> Yes ramone, it's an old school parlance
18:30 < Ramone> I don't know why they'd be anywhere near the stack until they're executed
18:32 < CoverSlide> the storage would all depend on the engine. i think i remember an issue with IE<9 and using named function expressions, it might have been a leak issue
18:33 < cloudbender> consider an anonymous function returned to a caller
18:34 < CoverSlide> perhaps "heaped" would be the right word
18:34 < cloudbender> OK heap
18:39 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:45 < mansoor-s> whattt
18:45 < mansoor-s> are strings not immutable?
18:47 < _ior> hi
18:47 < _ior> so, uh, i'm trying to debug a call of child_process.execFile(), where the thing i'm doing seems to fail near the end because of CWD problems, i'm guessing. so as a workaround, i'm dynamically writing a bash script and calling that with execFile(), which then fails with Error: Command failed: execvp(): No such file or directory
18:47 < bradleymeck> mansoor-s: ?
18:47 < mansoor-s> I am declaring a functions inside another and using variables fromt eh parent function... when I execute the inner function.. it seems like the stack has been garbage collected
18:47 < mansoor-s> (ignore the part abotu strings)
18:47 < _ior> googling for that indicates its probably an environment issue, so i pass opts = { env: {PATH: '/bin' } }
18:47 < Exx2xxO> Maybe one of you can solve this problem of my project partner : http://stackoverflow.com/q/14484274
18:47 < _ior> but same error message. any thoughts anyone?
18:48 < bradleymeck> _ior opts.env = process.env.PATH, and gist code
18:48 < ben_alman> isaacs: is it possible to point npm at a local directory or something so that you can npm install unpublished, in-development modules that are cross-linked?
18:48 < bradleymeck> mansoor-s: gist
18:48 < mansoor-s> doing, removing sensative stuff
18:48 < bradleymeck> ben_alman: npm link $DIR?
18:49 < ben_alman> npm link only allows one link per module name which doesn't allow different in-development versions of the same module to be linked simultaneously (into multiple projects)
18:49 < ben_alman> since all links are "global"
18:50 <@isaacs> ben_alman: like npm install ../foo?
18:50 <@isaacs> ben_alman: yes.
18:50 <@isaacs> but not in package.json
18:50 < mansoor-s> bradleymeck, https://gist.github.com/b681b028202c5a7cde53
18:50 < ben_alman> oh
18:50 < _ior> bradley thanks for the tip. let me check it out before i try to make it meaningfully gistable :)
18:50 < ben_alman> yeah but npm install ../foo means i'd have to keep track of the dev locations separately from package.json
18:50 < ben_alman> hmmn
18:50 < ben_alman> i've actually created a tool to do all this inter-linking, but i'd rather just use npm
18:51 < ben_alman> the tool works great but doesn't do things that npm does like scripts or set up bin etc
18:51 < bradleymeck> mansoor-s: https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Closures , the variable j is shared and the loop completes before execution, so j would beâ€¦ len
18:51 < ben_alman> it just does the linking
18:52 < mansoor-s> bradgignac, how do I copy that string?
18:52 < mansoor-s> var str = keywords[j] + "";  ?
18:52 < mansoor-s> well i'd need to do that outside of the closure
18:52 < mansoor-s> OK
18:52 < mansoor-s> i see the problem
18:53 < mansoor-s> thanks bradgignac 
18:53 < bradleymeck> mansoor-s: easiest? keywords.forEach(â€¦) the foreach function will keep the appropriate reference to the index
18:53 < bradleymeck> since it uses it as an argument rather than shared closure
18:55 < Kakera> sometimes I feel like whenever I do `git reset --soft HEAD^` shortly followed by `git push --force`, someone powerful kills a small animal
19:02 < MI6> joyent/node: Scott Blomquist master * 0774798 : build: Add some gyp artifacts to .gitignore - http://git.io/NtgwJw
19:05 < _ior> bradleymeck, still having issues, same error. here's a gist: https://gist.github.com/c6271f208ac2e902a16e
19:06 < Lee_> I'm working on an app that lets you run server side code (node) in the browser. Anyone interested in a preview? I'm looking feedback to make it better http://j.mp/RsNEhF
19:06 < _ior> with error being:  Error: Command failed: execvp(): Permission denied
19:06 < CoverSlide> whenever i `git pull --rebase` i feel like i just killed a large animal and made a beautiful fur coat out of it
19:06 < bradleymeck> _ior set the executable flag when writing the file
19:06 < _ior> guhhhh
19:07 < bradleymeck> OS will complain otherwise
19:07 < bradleymeck> wellâ€¦ the shell will really
19:07 < _ior> 667 ok?
19:07 < _ior> or does it need to be 777?
19:11 < bradleymeck> _ior i generally would have 766 or less, having non-owners execute isâ€¦ wierd
19:11 < bradleymeck> weird*
19:14 < _ior> i would agree :) i did mean to type 766 :) thanks for the tip, adding that chmod solved the problem
19:15 < bradleymeck> Lee, I've actually seen runnable a couple of times
19:16 < bradleymeck> made my eyes bulge at first
19:17 < asturel> Lee_ why dont make public beta?:D
19:28 < therealkoopa> Has anyone used browserify-ftw? The dry run prints out a ton of files that should change, but when I run it outside of dry run mode, nothing changes.
19:30 < squeakytoy> gus, i am so confused how i should do error handeling in my code. Should I use throw+try/catches, or force an error-callback function as argument
19:30 < squeakytoy> guys*
19:30 < zomg> If your function is asynchronous, you probably should follow the same practice as used in other node code
19:30 < squeakytoy> it isnt
19:30 < zomg> That being, the first parameter to the callback is the error, or null if no error
19:30 < zomg> If it isn't async, then exceptions are a good option I think
19:30 < squeakytoy> why null, why not undefined?
19:31 < zomg> tbh I don't know whether it should be null or undefined, it's probably enough if it's falsy =)
19:31 < nik9000> so long as it is falsy it would work with my code as well
19:31 < squeakytoy> but i want my whole code to follow the same convention, not depending if its sync/async
19:33 < squeakytoy> one of the biggest flaws in js, i think
19:33 < squeakytoy> 30 different ways to do something
19:33 < nik9000> better than perl, at least
19:34 < squeakytoy> why is node.js' convention usually that the callback's first parameter is error
19:34 < squeakytoy> its so messed up :S
19:35 < squeakytoy> if you had to put an error-callbackfunction as an argument, atleast you can reuse the same error-function
19:35 < zomg> squeakytoy: it makes sense in cases where you may have an arbitrary number of arguments or such
19:35 < zomg> but yeah the fact that async and non async funcs require different handling is a bit meh
19:35  * squeakytoy shakes head
19:35 < zomg> it's not really such a big deal once you get used to it though :P
19:35 < squeakytoy> makes no sense, i said!
19:35 < zomg> it's just the way it works
19:36 < squeakytoy> its poorly designed, i say!
19:36 < nik9000> its organically grown
19:36 < geNAZt> hiho
19:36 < zomg> squeakytoy: use one of the libs that fake asyncs into non asyncs or the other way around
19:37 < zomg> or use one of the other languages that convert into javascript that can bypass the issue
19:37 < zomg> =)
19:37 < bradleymeck> squeakytoy: the alternatives (ala windows 8's async functions) prove to be difficult since they encourage tree based continuation flow rather than single flow continuation
19:37 < bradleymeck> but you can transform between each pretty easy
19:38 < bradleymeck> though depends on if your flow is closer to a tree or straight which is better
19:39 < isaacbw> do any of you have experience moving to Canada from the US as a freelancer?
19:39 < zomg> If you use Fay, it's pretty neat that you can use the continuation monad to pretend async functions are sync =)
19:39 < squeakytoy> bradleymeck, 3?
19:39 < squeakytoy> oh, tree
19:39 < squeakytoy> not three
19:41 < squeakytoy> well, as i said, if you provided an error callback function, you could reuse / decrease the code
19:42 < Ramone> isaacbw: what would your status be in canada?
19:42 < bradleymeck> squeakytoy: basically doing something like a join or breaking a function chain early in the fn(errcb,successcb) style gets a little weird if nested in a non-lexical manner, while reusing errcb in fn(errfirstcb) is verbose
19:42 < isaacbw> Ramone, a work visa, I assume
19:42 < isaacbw> I wouldn't be looking for permanent residency
19:42 < bradleymeck> squeakytoy: ive spent a lot of time trying to beat async.waterfall and async.parallel for code flow, :-/
19:42 < isaacbw> I just think it might be fun to live in Montreal for a while
19:42 < zomg> I would think that one of the reasons for using error first arg style is simplicity
19:42 < Ramone> tn visa usually needs sponsorship by a real company
19:42 < isaacbw> there's a bit about it on their website: http://www.cic.gc.ca/english/immigrate/business/index.asp
19:43 < isaacbw> but it doesn't really indicate how difficult it is
19:43 < zomg> This allows you to keep it simple if you want to, but it's extensible by using custom handling functions to provide for other styles if you want to
19:43 < isaacbw> http://www.cic.gc.ca/english/immigrate/business/self-employed/index.asp
19:44 < Ramone> ohh I guess tn is the other way around
19:44 < Ramone> I went the other way and I'm sure it's waaay harder
19:44 < Ramone> montreal is very cool too
19:47 < Olivier> hi
19:47 < Olivier> Do you guys know where to find nodejs roadmap ?
19:48 < isaacbw> Ramone, oh, you can with sponsorship?
19:48 < isaacbw> *came
19:48 < isaacbw> maybe I should look at that option first
19:48 < Ramone> yeah I came to US from canada with sponsorship
19:48 < Ramone> used to be freelance in canada though
19:49 < isaacbw>  oh I see
19:49 < isaacbw> the other direction
19:49 < cloudbender> AAA_awright you've been quiet a loooong time..... whazaaap ?
19:49 < cloudbender> <<<< was reading his earlier post.
19:50 < AAA_awright> From where?
19:50 < cloudbender> '175 lines of code ...'
19:50 < AAA_awright> Oh heh
19:50 < cloudbender> just ribbing you
19:50 < AAA_awright> I'm continuing to work on it
19:50 < AAA_awright> Now adding ETag/If-Match support
19:57 < Ramone> AAA_awright: what are you adding that to?
19:57 < AAA_awright> My own framework of sorts
19:57 < Ramone> ha cool? I'm about to do the same? to my own framework of sorts :\
19:57 < Ramone> everyone's got their own framework now I guess
19:58 < AAA_awright> http://magnode.org/ It's more of an application, but it can be a framework too
19:58 < AAA_awright> Ramone: Browse through and see if there's any design concepts you like, it's very different than anything I've seen
19:58 < AAA_awright> Hence why I'm the one stuck with making it :p
19:59 < Ramone> percolatorjs.com
19:59 < AAA_awright> Ramone: The specific idea I'm working on now is that you specify a JSON Schema which contains metadata on how to modify the database when you make a request with or for that media type
20:00 < AAA_awright> So if you specify If-Match in the header, you get to define which property gets looked for in the database to decide if to fail or not
20:01 < Ramone> heh yeah looks a bit like mine
20:01 < Ramone> I use schemas in the payload format as well
20:02 < AAA_awright> Hmm
20:02 < AAA_awright> JSON Schema?
20:02 < Ramone> yeah
20:02 < AAA_awright> Because until about 1 month ago there weren't any libraries that had good coverage
20:02 < AAA_awright> of the spec
20:02 < cloudbender> If I install the chrome browser on Vista will the JavaScript implementation node-compatible ?
20:02 < AAA_awright> I had to make a series of 30 commits to an existing Git repository, which is the jsonschema package
20:02 < AAA_awright> Now we're 100% :)
20:03 < Ramone> I use JSV? not as good?
20:03 < AAA_awright> What's that?
20:03 < Ramone> https://npmjs.org/package/JSV
20:04 < AAA_awright> We also have things like the ability to specify your own schema properties, callbacks to modify instance values during validation-time, and full URI support
20:05 < AAA_awright> I don't think I saw that when I was doing research
20:05 < Ramone> what do you mean by "full uri support"?
20:06 < AAA_awright> The ability to resolve relative URIs properly, and fragment dereferencing
20:06 < Ramone> ahh cool
20:06 < Ramone> yeah I don't do any front-end in mine at all, so don't run up against that
20:06 < AAA_awright> I don't think I've seen a single validator that does anything but use "id" as an opaque token,
20:08 < Ramone> sounds interesting? where do I see code?
20:08 < AAA_awright> Ramone: http://magnode.org/2012/jsonschema-for-updating-content is an article I'm working on publishing... somewhere
20:10 < Somelauw> Can node.js be compiled with clang?
20:11 < Ramone> AAA_awright: reminds me of http://jsonary.com/feature-tour/stage3/ 
20:12 < Ramone> also: http://caines.ca/blog/programming/hyperjson-a-first-draft/ kind of sort of
20:12 < AAA_awright> Ramone: And if you didn't catch it, https://github.com/Acubed/jsonschema is my fork
20:12 < Ramone> cool
20:14 < chovy> i hate when you joina  team, and they've abstracted everything  you would do normally.
20:15 < AAA_awright> chovy: But depending on 20 modules with 10 lines of code each is a good thing! ...right?
20:16 < Ramone> chovy: they replaced you with an abstraction?
20:16 < AAA_awright> Haha
20:16 < chovy> they've written an abstraction layer ontop of backbone.
20:16 < Somelauw> Is npm part of node.js or is it separate?
20:16 < chovy> Somelauw: it ships w/ the latest node
20:17 < Somelauw> Because I installed node.js, but there is no npm.
20:17 < chovy> it used to be separate
20:17 < chovy> Somelauw: what version/os?
20:17 < Somelauw> git clone git://github.com/ry/node.git
20:17 < chovy> i just installed it on mac w/ homebrew and i got npm
20:18 < Somelauw> ./configure
20:18 < Somelauw> sudo checkinstall
20:18 < chovy> i don't know about installing from source
20:18 < niix> you can also download it from http://nodejs.org/download/
20:18 < Somelauw> oh and a make of course
20:18 < chovy> i usually grab a .tgz file or use homebrew on mac
20:18 < CoverSlide> Somelauw: i don't think ry/node still exists
20:18 < CoverSlide> it should be joyent/node
20:19 < Somelauw> CoverSlide: It did install a javascript console.
20:19 < CoverSlide> if you have an old repo from the ry/node days, it probably isn't up-to-date
20:19 < Somelauw> What's the new repo?
20:22 < CoverSlide> 12:14 < CoverSlide> it should be joyent/node
20:31 < Somelauw> Okay, I think I'm installing the good version now. Code is compiling again.
20:35 < Ramone> wow large numbers in json suck
20:36 < Somelauw> this version is too big
20:36 < Somelauw> still compiling
20:37 < chovy> i hate abstraction layers. wtf do we need our own Template.Render() instead of just using the built in render.
20:37 < chovy> its not like we're going to keep any of this code if we move away from Backbone to something else.
20:38 < Ramone> Backbone's an abstraction layer ;)
20:38 < chovy> we're abstracting the abstraction layer.
20:39 < Ramone> if you think you've only got 2 abstraction layers, you're way off ;)
20:39 < CoverSlide> JavaScript is an abstraction layer
20:39 < chovy> i suppose the argument could be made. but really it just makes all this shit unreadable.
20:40 < Somelauw> it failed to build the debian package :-(
20:41 < CoverSlide> don't build the debian package, do make install
20:41 < chovy> Somelauw: the debian node package is probably very old. Just compile from source
20:41 < jcrugzz> Javascript + dom apis + browserify = win on the front end
20:41 < chovy> view the README
20:41 < CoverSlide> or use nvm / nave / n
20:41 < chovy> http://nodejs.org/download/
20:41 < chovy> Linux Binaries (.tar.gz)
20:42 < chovy> or install from source.
20:42 < CoverSlide> Ramone: where are you using large numbers in JSON? ideally you shouldn't have any number larger than 2^53
20:42 < Ramone> CoverSlide: twitter API
20:43 < Ramone> their ids are huge
20:43 < CoverSlide> oh aren't their numbers all string now?
20:43 < CoverSlide> id numbers that is
20:43 < Ramone> luckily they have a secondary id_str
20:43 < CoverSlide> oh ok
20:43 < Ramone> but I'm writing a cache, so the json I cache for my consumers has id != id_str 
20:44 < Somelauw> chovy: I installed the latest version using checkinstall.
20:44 < Ramone> I may just not parse at all, or I might figure out a BigNum solution
20:44 < Somelauw> error in Version string 'v0.8.18-1': version number does not start with digit
20:45 < Somelauw> chovy: I did compile from source
20:45 < Ramone> Somelauw: you're doing everything except what's being recommended
20:46 < cloudbender> <<< does things that aren't recommended.
20:46 < dawolf> rebel
20:46 < chovy> Somelauw: are  you on debian?
20:46 < Somelauw> chovy: mint debian
20:46 < chovy> Did you use this? http://nodejs.org/dist/v0.8.18/node-v0.8.18.tar.gz
20:47 < Somelauw> I followed the steps on: https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
20:47 < Somelauw> http://nodejs.org/dist/node-latest.tar.gz
20:47 < chovy> Somelauw: just download that .tgz i pasted, and follow the README.md instrcutions
20:47 < chovy> should be as simple as:     ./configure
20:47 < chovy>     make
20:47 < chovy>     make install
20:47 < Somelauw> ok
20:48 < Somelauw> although probably the same version
20:53 < CoverSlide> wow, debian sid is using v0.6.19
20:54 < othiym23> CoverSlide: there was a gnarly mailing list thread about that not too long ago
20:54 < othiym23> major impedance mismatch between the debian and node communities
20:54 < Somelauw> but it should work with checkinstall, right?
20:55 < othiym23> CoverSlide: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=692312 has the grisly details
20:55 < CoverSlide> othiym23: which mailing list?
20:55 < CoverSlide> oh thanks
20:55 < CoverSlide> i guess technically if you want super-duper stable, v0.6.19 would fit that
20:56 < othiym23> CoverSlide: here's the group thread: https://groups.google.com/forum/?fromgroups=#!searchin/nodejs/debian/nodejs/W_6avRSG_a8/f7y0onBt8x8J
20:56 < cloudbender> beware the 'red underline of doom'
20:57 < othiym23> it takes a perverse definition of "stable" to consider 0.6.19 stable
20:57 < othiym23> it's not even the most recent version of 0.6
20:57 < CoverSlide> right
20:57 < othiym23> not to mention how much of the npm world depends on 0.8 features at this point
20:57 < CoverSlide> but also, v0.x.0 versions tend to be the buggiest versions coming through the gate
20:57 < CoverSlide> of the non-dev releases
20:58 < othiym23> that's why I suggested that they move to 0.8 before thinking about moving to 0.10
20:58 < CoverSlide> right
20:59 < othiym23> also dynamically linking to libv8 makes me incredibly squeamish
20:59 < othiym23> I don't really feel like the version of libuv and libv8 are particularly divisible
20:59 < CoverSlide> right, none of them should be doing that
21:00 < CoverSlide> the arch release just recently removed the --shared-v8 option
21:00 < CoverSlide> but by then i stopped using the packaged version
21:00 < CoverSlide> i can't remember if it removed --shared-ssl either
21:00 < CoverSlide> it used to have them both
21:00 < CoverSlide> oh well, static linking ftw!
21:03 < jerrysv> mbalho: https://github.com/geoloqi/terraformer/
21:07 < Somelauw> Okay, I got it eventually installed.
21:08 < Somelauw> But it doesn't work with checkinstall, although that might be a problem with checkinstall as well.
21:08 < Somelauw> console works great and I got npm
21:08 < Somelauw> thanks
21:10 < niix> Somelauw: congrats
21:17 < squeakytoy> what test frameworks do you guys use?
21:21 < chovy> squeakytoy: mocha+shouldjs
21:21 < chovy> selenium for ui
21:31 < othiym23> squeakytoy: mocha + chai for unit tests, node-tap for integration tests, cover for coverage generation
21:31 <@mbalho> jerrysv: whoa cool!
21:31 < othiym23> although if I were starting over from scratch, I'd probably use node-tap for everything
21:31 <@mbalho> jerrysv: make some sweet demos with http://voxeljs.com !
21:31 < othiym23> mocha has too much magic if you're writing code that tests error handling and event emitters extensively
21:31 < jerrysv> mbalho: demos coming soon, we released today for a demo and conference call
21:31 <@mbalho> sweet
21:32 <@mbalho> jerrysv: looks good
21:32 < jerrysv> mbalho: that's the geo stuff i was talking about, a lot more to come, but at least it's released finally
21:33 < othiym23> jerrysv: looks good
21:33 < jerrysv> othiym23: thanks, it's been a fun project
21:33 < othiym23> woulda been super handy back when I was working on the locker project
21:34 < squeakytoy> chai or should.js
21:35 < othiym23> either is fine, but chai has a bunch of interesting plugins and supports both should() and expects()-style APIs
21:35 < jerrysv> is there a naan.js yet?
21:36 < othiym23> jerrysv: "async and flexible currying for node.js"
21:36 < CoverSlide> haha
21:36 < jerrysv> naanument.js?
21:37 < othiym23> that one's all you, big boy
21:37 < othiym23> jerrysv: Nexxy either of you interested in checking out nodepdx? (http://www.meetup.com/nodepdx/)
21:38 < othiym23> I met Ben at RealtimeConf and he seems like a solid dude
21:38 < jerrysv> othiym23: i spoke last year, i'll be there
21:38 < othiym23> I'll probably go the next time I'm in PDX for one
21:38 < othiym23> this is a monthly meetup, jerrysv, not a con
21:39 < jerrysv> othiym23: that's interesting. wonder if he knows about the conference of the same name
21:39 < squeakytoy> thanks nn all
21:39 < jerrysv> othiym23: or about javascript admirers
21:39 < othiym23> man, I would *totally* go to a meetup named "Clojerks" if I were in Portland on the regular
21:39 < othiym23> jerrysv: probably no on the former, yes on the latter
21:40 < othiym23> he's been doing JS in PDX for a while now
21:40 < jerrysv> othiym23: i think i've seen him. i should call him out real quick on the name. that's a bad collision. know his twitter handle?
21:40 < othiym23> hold on a sec
21:41 < othiym23> jerrysv: @nvcexploder
21:41 < jerrysv> thx
21:42 < othiym23> jerrysv: what's all the "this.type" stuff about in Terraformer?
21:43 < othiym23> debugging?
21:43 < jerrysv> othiym23: line?
21:43 < jerrysv> othiym23: the library was written by 2 people, while tested it hasn't had extensive code reviews
21:43 < othiym23> jerrysv: 388, 391, 394, 421, 424 etc
21:44 < othiym23> (in terraformer.js)
21:45 < jerrysv> othiym23: "type" is supposed to be the geojson "type"
21:45 < othiym23> ah K
21:45 < othiym23> seems sorta redundant to have it in all of the clauses, is all :)
21:45 < jerrysv> othiym23: check out wkt.yy for my best contribution
21:45 < jerrysv> and agreed
21:46 < othiym23> I do love me a good parser grammar
21:46 < jerrysv> me too
21:47 < jerrysv> othiym23: i'll see about doing a quick refactor pass on the primitives this weekend
21:47 < othiym23> that is among the cleaner bison-style grammars I've seen
21:47 < othiym23> good job!
21:48 < jerrysv> othiym23: heh, thanks. it had been about 20 years since i'd written a full parser, so i had to dredge up those brain cells
21:53 < cloudbender> <<< needs to improve his case-sensitivity in the workplace
21:53 < TehShrike1> blurgh.  I need to write a WebDAV client with node.js, but I'm not at all familiar with the WebDAV protocol.  Can anyone point me at a good place to start reading?
21:54 < TehShrike1> I've gathered that it uses... HTTP... and stuff
21:54 < TehShrike1> And I'd rather not have to read through http://www.ietf.org/rfc/rfc4918.txt
21:54 < CoverSlide> webDAV is an extension on HTTP using new verbs not supported in the main HTTP spec
21:54 < TehShrike1> I've got that part
21:55 < TehShrike1> I just need to know what the verbs are
21:55 < TehShrike1> And what is expected in the body
21:55 < cloudbender> Did you check wikipedia ?
21:55 < davidcornu> I have a Mocha question, why does the following code (https://gist.github.com/4614035) lead to set1 running the given file and set2 completely ignoring it?
21:55 < TehShrike1> cloudbender: Wikipedia does have the new verbs
21:55 < cloudbender> ok
21:56 < CoverSlide> noone likes webdav, the only people who have implemented it probably used the spec and were so horrified by the experience they vowed never to write any documentation about it
21:56 < TehShrike1> hah
21:57 < TehShrike1> So to reference directories/files do I just add their path to the end of the URL after the path to the WebDAV root?
21:58 < TehShrike1> If I'm writing a file with PUT, do I just dump the whole file contents into the HTTP request body, or do I have to do anything else?
21:58 < Somelauw> cool that undefined variables actually give an error instead of being equal to undefined
21:58 < TehShrike1> How do I get directory listings?  >_<  Those RFCs were big and scary
21:58 < othiym23> davidcornu: calling process.exit is not a sane way to interact with a test framework
21:58 < othiym23> you're basically nuking your test from orbit
21:59 < davidcornu> member:othiym23: that's what the example in the wiki does
21:59 < Somelauw> maybe I will use node.js as a general purpose scripting language like python or ruby
21:59 < CoverSlide> Maybe you do a GET on a Collection?
22:00 < davidcornu> othiym23: https://github.com/visionmedia/mocha/wiki/Using-mocha-programmatically
22:00 < TehShrike1> CoverSlide: yeah, I'll guess I'll just have to start poking at things with curl and see what happens :-\
22:00 < CoverSlide> :p
22:00 < TehShrike1> Somelauw: that's what I've started doing
22:00 < othiym23> davidcornu: that's only in the case in which process.exit is running after all the tests have completed, and even then it's not a super good idea
22:01 < TehShrike1> I found an existing module for running a WebDAV server, but nothing for clients
22:01 < TehShrike1> Maybe I should just read that server's code :-P
22:01 < othiym23> TJ loves to use process.exit, and it's one of the reasons I don't really trust mocha for integration tests
22:01 < othiym23> TehShrike1: yeah, most of the non-RFC docs I would use would be to find a good WebDAV implementation and read the source
22:01 < CoverSlide> oh that's shitty
22:01 < othiym23> which probably means wading through Java, but there you have it
22:02 < TehShrike|Work> othiym23: yeah, I suppose so.
22:02 < TehShrike|Work> I did find https://github.com/mikedeboer/jsDAV
22:02 < davidcornu> othiym23: Sure but as I'm only running process.exit once the suite has run, I don't think that's the issue
22:02 < TehShrike|Work> I'll probably scan through that
22:02 < CoverSlide> or jusst fork it
22:02 < TehShrike|Work> It's a server, though
22:02 < TehShrike|Work> I just need to talk to a server
22:03 < TehShrike|Work> I mean, for all I know, it wouldn't even be worthwhile to write a wrapper over the http module
22:03 < othiym23> davidcornu: I'd have to look at the implementation of suite.run (I use the BDD interface), but it's possible set2 hasn't had time to do its bookkeeping and report at the point at which process.exit is called
22:03 < TehShrike|Work> Beyond the fact that the module would serve as documentation :-P
22:04 < davidcornu> othiym23: interesting, I did notice quite a lot of emit() stuff in the suite setup
22:04 < davidcornu> othiym23: might not have had time to setup the next suite
22:05 < othiym23> davidcornu: an easy, if time-consuming, way to find out for sure is to step through the whole example using a debugger
22:06 < davidcornu> othiym23: I was hoping to avoid that. 15mins going through the code on github led me to more questions than answers
22:06 < othiym23> I feel you, but I've also been living in the debugger for 14 hours a day the last five days, so I'm practicing what I preach ;)
22:07 < davidcornu> othiym23: that sounds painful
22:09 < othiym23> only way to really understand what's going on in the guts of Express and Connect, aside from having been inside TJ's head when he wrote them
22:18 < durango> tjfontaine: can your imagick script handle 30+ images at once? :/
22:19 < tjfontaine> durango: you tell me?
22:20 < tjfontaine> durango: I would suggest a set of child process workers though instead of a single process trying to churn through it all
22:20 < nardi> I'm having issues with file locking in node.js on OS X. See this reduced case: https://gist.github.com/4614552
22:20 < nardi> Is this a known issue?
22:20 < durango> tjfontaine: well i was going to use axon
22:20 < durango> but im not sure if thats the best thing to do
22:21 < CoverSlide> nardi: on windows?
22:21 < CoverSlide> oh osx
22:21 < CoverSlide> who the hell knows what OSX does with anything?
22:22 < othiym23> Amit Singh!
22:25 < CoverSlide> nardi: doesn't throw an error for me for anything
22:25 < CoverSlide> nardi: is it supposed to?
22:26 < CoverSlide> I tried on linux and OSX Lion
22:26 < nardi> "OPENING WITH SHARED LOCK" should print after "CLOSED EXCLUSIVELY LOCKED FILE"
22:26 < CoverSlide> hm
22:27 < nardi> because it should wait for the exclusive lock to be done
22:27 < barce> nardi: not sure if node waits for anything.
22:27 < CoverSlide> that's what I got
22:27 < CoverSlide> oh really?
22:27 < CoverSlide> ...
22:28 < Industrial> substack: what version of seaport should I use that works with airport right now?
22:28 < nardi> barce: I don't expect it to block, I expect it to call my open callback after the file handle with the exclusive lock is closed
22:28 < nardi> CoverSlide: ?
22:29 < nardi> you saw EXCLUSIVE LOCK/CLOSED/SHARED LOCK?
22:29 < asidjazz> is there a node / express solution for javascript tahts not as nuts as coffeescript.. like if i just want small server-side things like including js files in js files
22:30 < CoverSlide> nardi: no, i see exclusive / shared / closed on all platforms
22:30 < nardi> right...that's the issue
22:30 < CoverSlide> open a ticket
22:30 < barce> nardi: i'm running into issues with err.message
22:30 < TehShrike|Work> asidjazz: you mean, besides node.js' built-in modules system?
22:30 < asidjazz> TehShrike|Work: im talking client-side js
22:30 < CoverSlide> yo dawg...
22:30 < asidjazz> TehShrike|Work: built in or not.. something on the line of tools like stylus and jade
22:30 < TehShrike|Work> asidjazz: aah.  Perhaps you want browserify?
22:31 < nardi> barce: I guess change the code to do util.inspect(err)...not sure what the contract is for err
22:31 < asidjazz> TehShrike|Work: i believe you hit the nail right on the head
22:31 < TehShrike|Work> asidjazz: since you're referencing coffeescript, I'm assuming you're talking about a compile step, instead loading via http
22:31 < TehShrike|Work> asidjazz: sweet!
22:32 < asidjazz> oh i see.. not just an include
22:32 < asidjazz> but it modulizes the includes
22:32 < asidjazz> hmm i guess my only issue is thisll be harder to debug 
22:32 < Industrial> anyone know a seaport version that works with airport? latest seaport breaks it
22:33 < Industrial> 0.8.2 !
22:33 < Industrial> :p
22:34 < barce> nardi: ya, get that working i get a bad argument error when you call fs.close(fd);
22:35 < TehShrike|Work> asidjazz: TypeScript comes with its version of includes: ///<reference path='./whatever.ts' />
22:36 < TehShrike|Work> asidjazz: though as you mentioned, a compile-to-JS language might be a bit overkill (though TypeScript is far less extreme than CoffeeScript, being a superset of JS)
22:38 < CoverSlide> so what's wrong with browserify in this?
22:39 < asidjazz> TehShrike|Work: yea i might just suck it up w/ this and not be OCD about 10 includes in my html for dev
22:39 < asidjazz> its nice to be able to debug seperate js files in the browsere
22:39 < jcrugzz> asidjazz: trust me, browserify doesn't make it harder to debug with how it structures the bundle.js
22:40 < CrawfordComeaux> Anyone happen to be interested in helping build a realtime dashboard to be used in the Super Bowl press room?
22:40 < CrawfordComeaux> pm if so
22:40 < jcrugzz> it compiles to one js file that has nice defines you can easily search through
22:40 < jcrugzz> browserify just enables you to write more reusable code the node module way
22:41 < asidjazz> jcrugzz: i dont even mean at that level.. jsut the 1st step that its one file
22:41 < TehShrike|Work> Having multiple tabs in Chrome's dev tools is nice
22:41 < asidjazz> well i can still reuse the same code if all my js is inlcuded right
22:41 < asidjazz> yea :/
22:41 < asidjazz> ill try it out though either way
22:41 < asidjazz> looks well made
22:46 < AviMarcus> Anyone around with experience with the npm SIP module? I can't seem to get it to do some very basic things. Not sure why..
22:50 < durango> is there a good tutorial on how to handle a shitload of images at once?
22:51 < TehShrike|Work> durango: what do you want to do to them?
22:51 < durango> TehShrike|Work: tbh atm I simply want to just identify their size plus DPI
22:51 < durango> on each image
23:00 < durango> TehShrike|Work: any ideas?
23:06 < CoverSlide> just parse the file headers
23:06 < CoverSlide> of course you would need a parser for eah format
23:06 < CoverSlide> but tbh that would probably be the best way
23:07 < CoverSlide> otherwise, maybe some imagemagicky thing
23:08 < redshadowhero> It feels good to leave work on time for once.
23:09 < durango> CoverSlide: tried 3 different implementations of imagick
23:09 < CoverSlide> maybe pipe each one to identify
23:09 < CoverSlide> and parse the stdout
23:09 < durango> all didn't run well under heavy load
23:09 < durango> hmm
23:09 < durango> i didnt realize u can do that?
23:09 < CoverSlide> me neither
23:09 < CoverSlide> i'll have to test it out
23:12 < CoverSlide> are you getting these files as streams? or as filenames?
23:12 < CoverSlide> because invoking identify with ['-'] as args will read from stdin
23:14 < CoverSlide> you probably want to do som queue thingy too to limit the number or processes started
23:14 < jbergstroem> Hey. I'd like to know how upstream v8 security issues are handled in node. For instance CVE-2012-5153, CVE-2013-0836. Not sure the 3.11.x branch is kept up to date anymore by the v8 crew. Does this leave node vulnerable? 
23:16 < cloudbender> TehShrike|work does the chrome install give you a complete node and SDK ?
23:17 < jbergstroem> Are perhaps similar issues reviewed and deemed applicable (and if they are, patched) by nodejs developers/community? This branch doesn't seem to back that up https://github.com/joyent/node/commits/v0.8/deps/v8
23:18 < isaacbw> cloudbender, are you developing on windows
23:19 < cloudbender> yes, I'm stuck with vista for a few weeks, maybe till end feb
23:19 < durango> CoverSlide: as file names :(
23:19 < durango> and yeah ive tried using async.queue but after "25" it just literally stops
23:19 < ertjes> Is there a document/post on NodeJS code conventions? Best practices for organizing your code and callback management etc.
23:19 < durango> ertjes: http://nodeguide.com/
23:19 < cloudbender> It's OK, most stuff works for what I'm doing right now
23:20 < cloudbender> mozillafox
23:20 < isaacbw> jbergstroem, a lot of v8's security holes don't apply to node because you don't have to worry about browser sandboxing
23:20 < Industrial> I started a service with airport called 'proxy@0.1.0' and when I try to query with seaport (0.8.2) i get nothing
23:20 < ertjes> Thanks, the "Style Guide" seems to be spot on.
23:21 < Industrial> if I use seaport from the commandline i.e. seaport localhost:9000 query proxy@0.1.0 it shows me that its working
23:22 < Industrial> oh, I forgot to local install seaport 0.8.2 aswell
23:22 < jbergstroem> isaacbw: Yes, I get that - I guess my question is more about how security issues are handled and how to deem them applicable or not.
23:23 < isaacbw> if you mean that you've run into a security hole that's affecting node, you should share it in the node issue tracker
23:23 < CoverSlide> jbergstroem: there was one vulnerabilitty in regards to djb2 hashing, but that was fixed almost immediately on discovery. it might have been fixed on v8 as well
23:24 < holzp> wait wut?
23:24 < holzp> http://nodeguide.com/convincing_the_boss.html
23:24 < holzp> "HP (formerly Palm)"
23:24 < holzp> Is this a different HP?
23:25 < hipsterslapfight> hp bought palm out in 2010 and then proceeded to run them (further) into the ground
23:25 < jbergstroem> isaacbw: Its a bit complicated since I don't have access to upstream tracks (ref chromium link here http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5153). I don't have anything to report other than curiosity for how upstream v8 CVE's are handled in nodejs.
23:25 < holzp> right, but who  says HP(formerly Palm)
23:25 < durango> CoverSlide: i could just enter in each image file name at once :)
23:25 < durango> I wonder if there's a good way to throttle all of this though
23:26 < holzp> Apple formerly (NeXT)
23:26 < hipsterslapfight> well palm doesn't exist anymore holzp 
23:26 < hipsterslapfight> holzp: techincally true if you're talking about OS X :v
23:26 < holzp> right, was Palm a big node user before HP bought them?
23:26 < holzp> it just seems odd to not call HP HP
23:26 < CoverSlide> Microsoft (formerly Skype)
23:26 < hipsterslapfight> yes holzp i believe that's the point being made there
23:27 < holzp> was Palm really using node before HP bought them?
23:27 < CoverSlide> webos shipped with node on the touchpad
23:27 < CoverSlide> not sure about the pre
23:27 < CoverSlide> i'm not even sure node existed when the pre shipped
23:28 < holzp> right
23:28 < durango> is there a way to "group" arrays into 5 elements per index?
23:28 < hipsterslapfight> best story about palm is here http://www.theverge.com/2012/6/5/3062611/palm-webos-hp-inside-story-pre-postmortem
23:28 < holzp> I'm just thinkg if I actually used that to "convince the boss" id get laughed out of their office, they dont know shit about node, but they sure know HP is HP not Palm
23:28 < durango> like [1,2,3,4,5,6,7,8,9,10] becomes [[1,2,3,4,5],[6,7,8,9,10]]
23:29 < CoverSlide> durango: something like .reduce
23:30 < holzp> or just loop and slice
23:30 < JohnMcLear2> I'd loop n slice prolly
23:30 < CoverSlide> yeah that's probably better
23:30 < hipsterslapfight> loop slice and push
23:30 < JohnMcLear2> yerp
23:30 < durango> yeah reduce is the opposite of what I would want
23:31 < holzp> http://stackoverflow.com/questions/8495687/split-array-into-chunks
23:31 < JohnMcLear2> Has any discussion been had on rate/reviewing/commenting on plugins on npmjs.org ?   cc isaacs
23:31 < holzp> Array.truffleShuffle()
23:31 < JohnMcLear2> Also is isaacs even responsible for npmjs any more?  I forget..
23:31 < durango> thanks :)
23:34 < cloudbender> property chains ok. beware of null.
23:35 < cloudbender> er, prototype chains I mean
23:39 < cloudbender> Can properties be toggled between readable and writable and back again ?
23:40 < cloudbender> I guess I can fifure that out, sorry.
23:44 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
23:45 < TehShrike|Work> cloudbender: Chrome doesn't give you node, no - I develop on Windows too, what's the question?
23:46 < cloudbender> That was the question.  My vista can't implement node from the installer, I thought there might be a layer included with chrome.
23:47 < TehShrike|Work> Reeeally?  That's surprising.  What errors do you get?
23:47 < asidjazz> hilarious error from jade: 'section is not defined'.. really jade? dont know about <section> ?
23:47 < cloudbender> Well, blogs say XP or greater, but ...
23:48 < holzp> I've done sections in jade i think
23:48 < cloudbender> I tried it anyway, and ...
23:48 < TehShrike|Work> cloudbender: what error do you get, exactly?
23:48 < TehShrike|Work> And when does it occur?
23:48 < asidjazz> holzp: how?
23:48 < cloudbender> ok let me try it again, wait ...
23:48 < holzp> just used it
23:49 < holzp> what version of jade do you have?
23:49 < asidjazz> 0.28.0
23:49 < holzp> 1m using 1.1.62
23:49 < asidjazz> whys mine so old
23:50 < holzp> beats me
23:50 < asidjazz> how can i update it .. im jus using npm
23:50 < asidjazz> installing it globally
23:50 < asidjazz> there some global packages.json im not aware of?
23:50 < akkava> hiya
23:50 < asidjazz> akkava: NO
23:51 < akkava> asidjazz: hey, I still haven't even asked a question! I think it's polite to say hi first!
23:51 < asidjazz> akkava: valid point
23:52 < cloudbender> I need to reboot first, brb, and btw the intsaller from nodejs.org is node-v0.8.18-x86.msi
23:52 < akkava> asidjazz ta
23:52 < asidjazz> holzp: how do i upgrade jade globally 
23:53 < CoverSlide> npm -g install jade? or maybe npm -g upgrade
23:53 < akkava> Anyone getting an "Error: Protocol:https: not supported." when attempting a https.get(...) ?
23:53 < context> you update the package.json file for every project that uses it
23:53 < holzp> uh something like that yeah
23:54 < asidjazz> CoverSlide: hmm not going past 0.28
23:54 < asidjazz> akkava: NO
23:54 < akkava> asidjazz you've got some wicked sense of humour! 
23:54 < asidjazz> holzp: u bastard 0.28 is the latest.. theres no 1.x https://github.com/visionmedia/jade
23:55 < holzp> hm your right
23:55 < holzp> so what the hell am i sunning!
23:55 < context> https://npmjs.org/package/jade
23:56 < holzp> oh yeah that was the version of npm
23:56 < holzp> duh
23:57 < holzp> hm im using 0.27.5
23:57 < holzp> and sections complie just fine for me
23:57 < asidjazz> holzp: ran some tests.. section seems to be fine in the tests.. must be something else
23:58 < holzp> error may mean "section" of template not section element?
23:58 < holzp> i find whitespace can really screw with my jade too
23:58 < asidjazz> "section is not defined" is not from the file
23:58 < CoverSlide> akkava: don't set protocol
23:59 < akkava> CoverSlide: thanks gonna try that!
23:59 < akkava> ah but I'm not setting it, I'm just using the simpler https.get( url , ... )
23:59 < asidjazz> aha!
--- Log closed Thu Jan 24 00:00:09 2013
