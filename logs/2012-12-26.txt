--- Log opened Wed Dec 26 00:00:27 2012
00:40 < raphie> is there any difference between starting a worker as a child process or doing something like require("./worker.js").init() ?
00:47 < Iszak> raphie what exactly is worker.js ?
00:48 < raphie> Iszak: worker.js is a worker that needs no connection to the other components. uses node-cron to load database entries into a work queue
00:49 < Iszak> is this a npm?
00:50 < raphie> not at the moment
00:50 < raphie> well, no, it's not
00:51 < Iszak> It's not part of the stdlib is it?
00:51 < raphie> it's simply a file that should be run when the main app starts. I'm wondering if I should start it using a child process, or simply add an init method to the file and require it from my main app
00:52 < raphie> no, it's just a file I wrote to manage my work-queue
00:53 < raphie> do you get what I mean, Iszak?
00:56 < Iszak> Sorry got distracted, kind of raphie.
00:57 < Iszak> raphie personally I would want explicit invocation as opposed to implied through requirement, if that calls the child process in worker.js then so be it.
00:57 < raphie> let me simplify things. the file worker.js contains code I want executed on startup. what is the best method to invoke it?
00:57 < raphie> worker.js doesn't contain any child processes. for the sake of simplicity, it could just contain console.log("Hello World");
00:59 < Iszak> raphie right well you could have require('./worker.js')();
00:59 < Iszak> I think that would probably be best.
00:59 < raphie> sweet, lemme try that out
01:00 < raphie> actually, now that I remember Iszak, require() returns the exports object of the required file
01:01 < raphie> so if worker.js had exports.init = function() { }, require("./worker.js") should return {init: ...}
01:02 < Iszak> well I wouldn't use init… no need for that.
01:02 < Iszak> module.exports = function(){};
01:23 < octinyum> hi everyone, is there anybody here can help a newbie about an installation problem on MAC OS X M.Lion
01:24 < Iszak> octinyum don't ask to ask, just ask.
01:24 < octinyum> i'm tryig to install node.js on my MAC, but it gives an error same as here: http://stackoverflow.com/q/12607155/458679 but i can't resolve my problem with the directions here.
01:24 < octinyum> and my current error output is here: http://pastebin.mozilla.org/2019334
01:25 < raphie> octinyum: you could just download it from here: http://nodejs.org/
01:25 < raphie> or try your luck with nvm
01:26 < Iszak> octinyum I would recommend against what raphie said, you should avoid compiling directly, even though homebrew compiles it, it's indirectly.
01:26 < raphie> er, lemme rephrase. you can download the installer from there
01:26 < raphie> a .pkg
01:27 < Iszak> raphie sorry, I should have given you the benefit of the doubt, just had so many people say to compile it.
01:27 < octinyum> oh, boys sorry i think i got the problem. i've already installed from pkg, and also i'm trying to install via homebrew.. so it gaves me error. Thanks @raphie @Iszak
01:28 < deoxxa> Iszak: got any reasons why one shouldn't build node from source?
01:29 < Iszak> deoxxa sure, so lets say node.js releases a security release, you have to be aware of the update and then manually recompile it. Multiply this for multiple packages and it soon becomes a nightmare tracking and maintaining all these installations. A better solution of course is to use a package manager.
01:34 < raphie> nvm does just that, Iszak
01:34 < Iszak> no one mentioned nvm :P
01:34 < deoxxa> raphie did
01:35 < Iszak> I'm not familiar with nvm, but by looking at it's README.md it allows installation of specific versions but doesn't facilitate updating/upgrading or installing a minor version e.g. 0.8.x 
01:35 < Iszak> perhaps I am wrong, if I am can someone please correct me with the correct command to upgrade/install a minor release.
01:35 < deoxxa> Iszak: the flipside of this is that you should be on top of any releases for software you rely on
01:36 < deoxxa> Iszak: i.e. you shouldn't just trust a package manager to do everything for you in the right way
01:36 < Iszak> deoxxa simply not feasible.
01:36 < deoxxa> oh, isn't it?
01:37 < deoxxa> Iszak: i've still got applications running in production that rely on node 0.4.12 - if i had used a magical psychic package manager, it would have been upgraded away from the version it requires
01:37 < deoxxa> thus breaking the application
01:37 < deoxxa> perhaps in a way that affects security
01:37 < deoxxa> Iszak: it's perfectly feasible, because i do it :)
01:37 < Iszak> deoxxa not the case, if you were using a package manager it would not upgrade to 0.6.x it would only backport security fixes from newer releases to 0.4.x and also release newer 0.4.x versions
01:38 < deoxxa> where's this magical package manager that does this?
01:38 < Iszak> they usually freeze the release and only do bugs/security fixes
01:38 < Iszak> apt
01:38 < Iszak> yum
01:38 < deoxxa> oh ok, so if i want to use a later version for another application, what do i do?
01:38 < Iszak> You use an alternative repository such as a PPA.
01:38 < deoxxa> rofl
01:39 < deoxxa> so what you're saying is
01:39 < deoxxa> to attain the highest quality of security
01:39 < deoxxa> i should run binaries, compiled by someone i don't know, someone who isn't an actual member/employee of the distro i'm using, with no way of telling if they're valid or not?
01:39 < Iszak> I never said that.
01:39 < deoxxa> cool story, bro
01:40 < Iszak> Clearly someone doesn't like to be wrong.
01:40 < raphie> guys, let's keep it civil and such
01:40 < deoxxa> Iszak: you're just making some insane blanket statements here, which can't possibly be correct (because i'm the living embodiment of them being so)
01:40 < deoxxa> s/being/not being/
01:41 < Iszak> There are very few reasons you should compile software without a package manager.
01:42 < Iszak> deoxxa what OS do you run? how many packages do you manually maintain?
01:43 < deoxxa> on any box that matters? debian. i manually maintain node, mongodb, couchdb, elasticsearch and all of our internal applications.
01:43 < Iszak> I don't know about you but I'm running ubuntu with 778 packages installed, to manually maintain all of them, to test them all and dependencies before upgrading will be a nightmare. Granted debian is a bit more lightweight but I don't imagine the task will be much easier.
01:44 < deoxxa> i never said you should maintain all of them manually
01:44 < Iszak> deoxxa where does it stop? why not maintain everything?
01:44 < deoxxa> and nor did you say you shouldn't
01:44 < deoxxa> you were speaking specifically about node
01:44 < deoxxa> as was i
01:45 < Iszak> Why did you choose to manually maintain them?
01:45 < deoxxa> because i want to be able to review compatibility with new versions of node before upgrading
01:45 < deoxxa> and i need to be able to run specific versions
01:45 < deoxxa> more than one at the same time
01:46 < Iszak> Don't you have any faith in newer versions of node.js not breaking BC? or your maintainers to properly test it? The second reason is perfectly valid but If people can avoid it, they should. If you can avoid it, I'm sure you would to, but then again I don't know you.
01:47 < substack> just use the old versions
01:47 < substack> they still work
01:48 < jtane> hi - how can i check if a stream is in old vs new mode? just for debugging...
01:50 < razic>  i love you all
01:56 < octinyum> hi boys again, I'm installing express with npm but i have to use sudo to work it properly. I read that this is not recommended. So what i did wrong, why i have to use sudo when installing a package via npm
01:59 < jtane> octinyum: are you installing it globally?
02:00 < octinyum> yes @jtane
02:00 < octinyum> so i have to sudo, you mean?
02:01 < jtane> octinyum: /usr/local is probably owned by root
02:01 < jtane> octinyum: which is where global installations go
02:03 < octinyum> i set the path: export PATH=$HOME/local/node/bin:$PATH 
02:05 < jtane> octinyum: that just tells your shell to look for executables there
02:05 < octinyum> jtane how can i find that? My node folder is in /usr/local/Cellar/
02:06 < octinyum> ok i got thanks @jtane
02:08 < jtane> octinyum: I like to install versions of node in my home folder, solves the sudo problem
02:31 < yept> someone read this? lol
02:31 < yept> https://github.com/yeptlabs/wns check it out
02:33 < RLa> link at the bottom is broken
02:35 < yept> yeah, working on that
02:35 < RLa> hm, wanted to see code about the M part of MVC
02:36 < yept> its under development, so 
02:36 < yept> if you want to help lol
02:37 < RLa> i have recently thought about different M representations
02:38 < yept> different M?
02:38 < yept> like what?
02:41 < RLa> today i wanted to put my model code into mongodb
02:42 < RLa> i.e having a collection that describes other collections
02:43 < RLa> then i saw that it's exactly what couchdb does
02:43 < Iszak> yeah model is quite open in it's definition.
02:48 < yept> yeah i know, but like i said its under development
02:48 < Iszak> alright well best of luck!
02:48 < yept> and some parts still need to be worked
03:06 < ineb> Hello, I've problem with npm
03:14 < tjfontaine> ineb: shall we divine what that problem is?
03:15 < deoxxa> ineb: the problem is on line 4 of your app.js file
03:15 < deoxxa> fix that
03:16 < SomeoneWeird> lol
03:25 < ab> hi everyone
03:25 < ab> i need a help with socket.io
03:25 < ab> on amazon-ec2
03:29 < Guest15516> Hi there
03:29 < Guest15516> i need a help with socket.io
03:29 < Guest15516> on amazon-ec2
03:31 < deoxxa> Guest15516: try asking a question
03:31 < Guest15516> I want to run the node instance on specific port i.e 3000
03:31 < Guest15516> which works fine on server side
03:32 < Guest15516> but when i load my website and when the io.connect tries to connect the server
03:32 < Guest15516> it doesnt connect to the port
03:32 < Guest15516> dont know what to do..
03:34 < roger_rabbit> check your firewall settings in amazon security console
03:34 < roger_rabbit> make sure you allow traffic in and out on those ports
03:35 < Guest15516> how can i do that ?
03:35 < Guest15516> i am a newbie to amazon
03:36 < Cronoh> lol
03:37 < roger_rabbit> bit.ly/ZzdV2J
03:39 < Guest15516> Thanks roger_rabbit
03:40 < roger_rabbit> np
03:49 < razic> hey
03:50 < razic> when would one want to use https://github.com/einaros/ws versus http://coffeescriptcookbook.com/chapters/networking/bi-directional-server
03:50 < deoxxa> lol coffeescript
03:50 < razic> they both look like they do the same thing except the bi directional server is in the standard library
03:50 < razic> deoxxa: not here for trolling, thx
03:50 < deoxxa> shouldn't have opened with "why would i not want to use coffeescript" then
03:51 < deoxxa> but to answer your question, it's because ws implements the WebSocket protocol
03:51 < deoxxa> net doesn't, it's just tcp
03:51 < razic> ah
03:51 < razic> thanks
03:52 < razic> now to the other question… why not coffeescript?
03:52 < razic> i'm looking for speed so obviously a the websocket protocol is better than tcp for me
03:52 < razic> i try to find a good reason not to use coffee script but never find a good enough reason
03:53 < razic> the only problem i've ever had was scoping issues but that was due to my own insufficient knowledge
03:55 < razic> deoxxa: ? i'm willing to switch on this one but i need some convincing
03:55 < deoxxa> i'm all snarked out for the day
03:55 < deoxxa> suffice it to say that coffeescript, as a piece of software, is of spectacularly low quality
03:55 < deoxxa> and it would make me physically sick to rely on it in any capacity for production software
03:56 < deoxxa> all you have to do is read the source to the "compiler" to see that
03:56  * deoxxa lunch time
03:56 < razic> hm
04:12 < razic> deoxxa: you've convinced me
04:22 < mistertwig> i'm really wondering how i'll be able to do this in node :S
04:23 < SomeoneWeird> mistertwig, what?
04:23 < mistertwig> a game server
04:24 < SomeoneWeird> what's the problem?
04:24 < deoxxa> not possible
04:24 < mistertwig> well
04:24 < mistertwig> i'd need some loop running every 600msish
04:24 < mistertwig> along with the normal socket events
04:24 < deoxxa> writing a game server in node is a silly idea
04:24  * deoxxa shakes head
04:24  * deoxxa coughs: https://github.com/deoxxa/jsmc
04:24 < SomeoneWeird> setInverval(function loop() { }, 600);
04:24 < mistertwig> that loop could possible be doing some heavier computations 
04:24 < SomeoneWeird> lol de
04:24 < mistertwig> yeah i know the loop is possible
04:24 < SomeoneWeird> deoxxa
04:25 < SomeoneWeird> sillie
04:25 < mistertwig> i was just going to do a recursive setTimeout
04:25 < mistertwig> deoxxa: oh great
04:25 < mistertwig> maybe i can get tips from you then :P
04:26 < mistertwig> i'm just worried that the game loop might take too long and slow the internal event loop down
04:26 < mistertwig> it would only be handling a max of 2k players but still
04:27 < mistertwig> sending large amounts of computated data to 2k people in a loop might take a while :P
04:27 < SomeoneWeird> horizontally scale it
04:27 < owen1> how to mock my db during my tests? i thought of this but it looks ugly: var db = (environment === 'test') ? require('./mockDb.js') : require('./db.js');
04:27 < SomeoneWeird> and yes, it would
04:27 < SomeoneWeird> especially a 600ms loop
04:27 < mistertwig> yeah it would be about 600ms
04:27 < mistertwig> how would i do that SomeoneWeird?
04:28 < mistertwig> i know with like webservers you can just run multiple processes and load balance
04:28 < mistertwig> but this needs to have a consistent state
04:28 < RLa> that's tradeoff, you can't get both
04:29 < mistertwig> get both? what
04:29 < RLa> you need to weaken consistency for scaling
04:29 < mistertwig> well i don't think it would be possible then with node
04:30 < RLa> if you manage to partition users between multiple processes then it's easy
04:30 < mistertwig> at least possible in an efficient manner
04:30 < SomeoneWeird> how would you do it with another lang then?
04:30 < mistertwig> well other langs implement threads
04:30 < SomeoneWeird> and
04:31 < mistertwig> well threading for the game loop and threading for the socket communication 
04:35 < mistertwig> i guess i'll cross that bridge when i get to it :P
04:41 < maderogue> merry christmas
04:41 < jcrew> merry christmas
04:41 < deoxxa> ~38 hours late for me :<
04:44 < SomeoneWeird> yeah hah
04:44 < maderogue> Is there a node project where I can look at some of the best practices?
04:56 < vikash> hi Everyone, I have results coming from mysql and I am using JSON.stringfy() for response.write in the server. Now I want to access the element one by one, so how can I do that? I am new to node and js though
05:45 < alladin> o
06:12 < AAA_awright> TehShrike: Yeah
06:12 < AAA_awright> What of it?
06:15 < jcrew> mistertwig: what are you doing on your server that you need a loop every 600ms?
06:17 < TehShrike> AAA_awright: I wasn't sure what you meant to imply by posting the link.  I thought maybe you actually thought the spec didn't include asi
06:17 < AAA_awright> TehShrike: No, I said it spans three printed pages
06:19 < AAA_awright> But in any event, point is, a trailing ; is an easy to read method of saying "That's all, folks"
06:19  * TehShrike shrugs
06:19 < TehShrike> My brain likes newlines
06:19 < AAA_awright> That's why I usually trail a ; with a newline
06:19 < AAA_awright> :)
06:20 < TehShrike> Now when I see semicolons, all I can think of is somebody cramming multiple statements onto a single line
06:20 < TehShrike> When I first started writing JavaScript I didn't know about asi
06:20 < AAA_awright> occasionally that's justified, I can't recall doing that recently though
06:20 < TehShrike> And it was with some shock that I realized that code that I had written where I had forgotten semicolons hadn't actually broken
06:21 < TehShrike> So I learned the times where I *couldn't* get away with it, and avoid those, and dropped semicolons entirely
06:21 < TehShrike> And now I'm glad
06:29 < jcrew> http://inimino.org/~inimino/blog/javascript_semicolons
06:29 < astropirate> Who wants to work for me? 
06:30 < astropirate> I can pay you with chewed bubble gum and pocket lint
06:30 < jcrew> how much do you pay
06:30 < jcrew> that's far less than what i'm being underpaid currently
06:31 < TehShrike> jcrew: indeed, I sent that link to AAA_awright the other night when this discussion started :-)
06:31 < astropirate> must have 10 years of experience with all of these: Java, C++, C, Java Script, VB, .NET, C#, Haskell, OCaml, Node.js, jQuery, XML, XSTL ...
06:31 < TehShrike> a recruiter!
06:31 < jcrew> missing haskell
06:32 < zomg> I have all.
06:32 < zomg> Okay not ocaml and not 10 years
06:32 < zomg> but...
06:32 < zomg> otherwise!
06:32 < astropirate> Also must be whilling to relocated to the north pole
06:32 < TehShrike> need 10 years experience with HTML5!
06:32 < jcrew> is it okay if i fly there on my reindeer?
06:33 < zomg> astropirate: I am already quite close to the north pole
06:33 < zomg> ;>
06:33 < astropirate> :p
06:34 < AAA_awright> TehShrike: Just because you _can_ doesn't mean you _should_
06:34  * astropirate needs a J.O.B :|
06:34 < AAA_awright> The rules lead to bizarre pitfalls
06:34 < zomg> astropirate: just look for php jobs. I'm sure you'll find one
06:34 < zomg> if you're that desperate
06:34 < zomg> =)
06:34 < TehShrike> AAA_awright: same goes for semicolons
06:34 < jcrew> i wouldn't use the ASI either but it's pretty neat
06:35 < TehShrike> AAA_awright: just because I can use semicolons doesn't mean I should.  The pitfalls are not bizarre, they are quite easily written off if you code like a sane person
06:35 < AAA_awright> No, it's the other way around
06:35 < astropirate> zomg, eewwwwwwwwwww
06:35 < astropirate> i need to and take a long bath now
06:35 < AAA_awright> Just because you can leave them out doesn't mean you should
06:35 < astropirate> for even considering that
06:35 < AAA_awright> You can't leave them out in all cases
06:35 < TehShrike> AAA_awright: of course, that is true.  The opposite is also true.
06:35 < AAA_awright> And leaving them out leads to bizarre traps
06:36 < AAA_awright> Leaving them in never does
06:36 < jcrew> AAA_awright: it looks like you can leave them out in nearly all cases
06:36 < TehShrike> AAA_awright: no, not in all cases.  But in all the cases I write, you can.
06:36 < AAA_awright> Therefore, just because you can leave them out, doesn't mean you should
06:36 < AAA_awright> (And not the inverse)
06:36 < TehShrike> I can understand the motivation for the argument
06:36 < zomg> Not entirely sure how I'd find work I'd enjoy here tbh
06:36 < TehShrike> It's the same one for various indentation styles
06:36 < TehShrike> "it's what I'm used to"
06:36 < TehShrike> And it motivates my styles, too, so I can't really mock it much
06:36 < zomg> 99.99% of jobs here don't allow you to work remote
06:37 < jcrew> TehShrike: what did you begin developing in?
06:37 < AAA_awright> It's not a matter of what people are used to, it's a matter of what is objectively proper
06:37 < TehShrike> jcrew: C++!
06:37 < TehShrike> AAA_awright: lol
06:37 < TehShrike> Now I know you must be young
06:37 < jcrew> lol, and no semicolons? !!
06:37 < AAA_awright> Tabs, semicolons, in-line var
06:37 < AAA_awright> etc
06:37 < TehShrike> jcrew: I know, right?  It seemed abhorrent to me at first as well
06:37 < jcrew> i hate the look of VB and ruby
06:37 < SomeoneWeird> <TehShrike> Now I know you must be young< wow 
06:37 < TehShrike> But I decided to give it a go, and found myself tremendously pleased within a few weeks even
06:37 < elliottcable> I may genuinely be an idiot
06:37 < AAA_awright> Most of these things you can actually make an argument for
06:38 < elliottcable> Has anybody here successfully used the node-devtools-agent/node-webkit-agent to profile their code?
06:38 < TehShrike> AAA_awright: indeed, and I have
06:38 < elliottcable> or any *other* approach, for that matter?
06:38 < jcrew> no semicolons, no goatse operator, etc
06:38 < elliottcable> )=
06:38 < AAA_awright> TehShrike: The only argument I've seen is "I can leave them out so that's what I'll do"?
06:38 < AAA_awright> To hell with readability
06:38 < TehShrike> AAA_awright: which is why I'm not going to call you an idiot for arguing for semicolons or anything, because I have (and still do) make similar arguments for similar reasons
06:38 < SomeoneWeird> omg stop arguing againa
06:38 < SomeoneWeird> again*
06:38 < TehShrike> lol
06:39 < TehShrike> It's a friendly argument (I think)
06:39 < AAA_awright> SomeoneWeird: Nothing wrong with debate
06:39 < AAA_awright> Of course it is
06:39 < SomeoneWeird> lol
06:39 < SomeoneWeird> SEMICOLONS FTW
06:39 < AAA_awright> -_-
06:39 < purr> AAA_awright: ಠ_ಠ is an IRC client/IRC client framework.
06:39 < elliottcable> wait, are we discussing code style?
06:39 < elliottcable> I WANT IN ON THIS
06:39 < elliottcable> where's the code we're talking about
06:39 < AAA_awright> Thank you, purr
06:39 < AAA_awright> rdf
06:39 < jcrew> elliottcable: http://inimino.org/~inimino/blog/javascript_semicolons
06:40 < AAA_awright> hmm
06:40 < TehShrike> AAA_awright: The only thing I'd call "wrong" is claiming that there is an "objectively proper" style of indentation.  I think my styles are quite rational, but other intelligent people would disagree with me, and when it comes down to it, a lot of it is just what I'm used to.
06:40 < elliottcable> jcrew ⑊ yes, familiar with his post; is that what's being discussed?
06:40 < TehShrike> Though seriously, tabs are made for indentation, and spaces are not.  DUH
06:40 < elliottcable> fuck tabs.
06:40 < TehShrike> ;-P
06:40 < elliottcable> https://gist.github.com/4350333
06:40 < jcrew> elliottcable: just the semicolon aspect
06:40 < elliottcable> obv. the best code.
06:40 < elliottcable> ;)
06:41 < elliottcable> AAA_awright ⑊ purr loves you, too
06:41 < TehShrike> I like tabs because I can have my editor make them look as indented as I want
06:41 < AAA_awright> TehShrike: Well, tabs are linear whitespace explicitally designated for indentation, so programmers can set an indentation width suitable for them
06:41 < AAA_awright> If you use spaces then you're forcing people to use a certain indent width and that's a Bad Thing
06:41 < TehShrike> Exactly
06:41 < elliottcable> disagree.
06:41 < TehShrike> lol
06:42 < AAA_awright> So I would say tabs are objectively superior in all cases.
06:42 < elliottcable> the “indentation width” of the code is an integral element of the design of the code as a whole; and there's no point giving the user control over *just that*, if you can't give them control over the rest of the code's design, for their reading pleasure.
06:42 < TehShrike> As would I, but obviously there are many who differ
06:42 < AAA_awright> Not to be confused with aligning code up
06:42 < AAA_awright> Which necessitates spaces anyways
06:42 < TehShrike> Which should be done with spaces, obviously
06:42 < elliottcable> if we had a CSS_like language for “styling” code, i.e. presence/absence of semicolons, when-and-where to line-break, maximum width, indentation style, commas-first or commas-last, etceteras ... that'd be great.
06:42 < elliottcable> but indentation *specifically*? no.
06:43 < elliottcable> AAA_awright ⑊ take a look at the code I linked a moment ago; let's look at a specific example:
06:43 < AAA_awright> elliottcable: In what case would letting a programmer set indentation width hurt the program?
06:43 < elliottcable> if I used tabs for indentation, then I wouldn't be able to align the commas-first *within* that “indentation column.”
06:43 < TehShrike> But anyway, because so many of these things come down to what people are used to, I try to err on the side of not claiming that any arguments about styles are actually based on objectivity (even though I like to think most of my arguments are)
06:43 < AAA_awright> If it's set to a width that's harmful then just fix it
06:43 < TehShrike> elliottcable: wait, say that again?
06:43 < elliottcable> it restricts my ability to design the source-code for whatever goals are applicable (maximum readibility, maximum modify-ability, drawing attention to a particular section, etceteras.)
06:43 < TehShrike> elliottcable: I haven't heard any arguments related to commas before
06:44 < AAA_awright> elliottcable: Alignment != indentation
06:44 < elliottcable> again, take a look at the code I linked.
06:44 < TehShrike> Why not just [n tabs] + comma + space + code?
06:44 < elliottcable> as just *one* example.
06:44 < elliottcable> TehShrike ⑊ because then the code after the commas is not aligned with the code *not* having commas.
06:44 < elliottcable> that is ... unless you add two spaces, after the tabs, to the code without the commas.
06:44 < TehShrike> Oh yeah, I don't think that alignment is worth worrying about, myself
06:44 < AAA_awright> elliottcable: That's exactly what you do
06:45 < jcrew> honestly that code is awful to read
06:45 < elliottcable> AAA_awright ⑊ yes, which is why I'm arguing *for spaces*
06:45 < elliottcable> jcrew ⑊ subjective.
06:45 < TehShrike> jcrew: though really, that's just because you're not used to it
06:45 < astropirate>  ⑊
06:45 < elliottcable> my point isn't specifically re: that code, or any other *particular* style
06:45 < AAA_awright> Indent with tabs, align with spaces.
06:45 < AAA_awright> Though in many cases alignment is unnecessary anyways, but that's another argument
06:45 < elliottcable> simply that using hard-tabs *gives* your reader very little,
06:45 < elliottcable> and *loses* you the opportunity to give your reader other, more substantial, benefits.
06:45 < TehShrike> If my tab width is 4 spaces, and I do comma-last style with newlines before each variable name, all my variable names line up with each other, but that's just a happy accident and not an ideal that I'll give up indentation-correctness for :-)
06:45 < deoxxa> lol @ ⑊
06:45 < jcrew> TehShrike: i know, but it's really kind of ridiculuous
06:46 < AAA_awright> elliottcable: What is the benefit being lost, again?
06:46 < jcrew> the argument, i mean
06:46 < AAA_awright> We're only talking about indenting
06:46 < elliottcable> the ability to *design* your source-code. Again, the code I linked is one easy-to-hand example.
06:46 < jcrew> he's talking about lines 15-19 not lining up with the lines above
06:46 < elliottcable> I'd provide more, except I'm sure most of those in this channel would find them abhorrent.
06:47 < jcrew> ignoring the commas
06:47 < elliottcable> jcrew ⑊ no, not at all. That's entirely missing the point.
06:47 < elliottcable> Let me re-phrase:
06:47 < jcrew> that's literally what you said you wanted
06:47 < AAA_awright> And also, O_O at that code
06:47 < TehShrike> I suppose that could be considered an argument against the comma-first style >_<
06:47 < jcrew> we should just write minified js from the start
06:47 < elliottcable> “If I use spaces for indentation, then I'm *capable* of modifying the indentation for purposes of alignment.” (Or, if you like, s/alignment/any other code-design goal./)
06:47 < astropirate> ohh are we having the tab vs space discussion? 
06:47 < astropirate> http://thehealthydivadotcom.files.wordpress.com/2012/02/toiletpaper-thegreatdebate.jpg
06:48 < TehShrike> B!  OF COURSE
06:48 < SomeoneWeird> astropirate, something like that
06:48 < elliottcable> (obviously, toilet paper should fall over the *front*.)
06:48 < jcrew> astropirate: lol
06:48 < jcrew> i agree with elliot
06:48 < SomeoneWeird> something we can agree on !
06:48 < SomeoneWeird> lmao
06:48 < astropirate> :D
06:48 < jcrew> side b is most appropriate
06:48 < elliottcable> fun fact: having circulated widely on that topic,
06:48 < elliottcable> it turns out nobody actually *likes* A.
06:48 < astropirate> yet.. we still find it
06:48 < elliottcable> it's not a dichotomy of “people who like A” and “people who like B”
06:49 < astropirate> one of the great misteries 
06:49 < TehShrike> Only argument I've heard in favor of A is that it keeps cats from unrolling all your toilet paper
06:49 < TehShrike> I have met people who favored A
06:49 < elliottcable> it's a dichotomy of “people who like B” and “people who don't care.”
06:49 < astropirate> its like the fermi's paradox
06:49 < deoxxa> astropirate: as if anyone would choose A
06:49 < elliottcable> with the people who don't care fucking us over every time we go into a restroom.
06:49 < deoxxa> TehShrike: they're not people
06:49 < elliottcable> fuck you, people who don't care.
06:49 < elliottcable> fuck you.
06:49 < jcrew> i'll second deoxxa's argument
06:50 < astropirate> So, I've been working on a little project, anyone got time to give me feedback?
06:50 < elliottcable> I wish
06:51 < elliottcable> too busy hating myself and the world, because there's no profiling tools for Node
06:51 < jcrew> astropirate: what kind of project?
06:51 < jcrew> elliottcable: do you have a regex i can parse my xml files with?
06:52 < elliottcable> hahhhhhahah
06:52 < astropirate> jcrew, a web framework :)
06:54 < astropirate> jcrew, don't parse xml with regex :D
06:54 < astropirate> use an xml parser
06:54 < jcrew> you guys are like a one note song with xml parsing
06:54 < SomeoneWeird> xml2json ftfw
06:55 < deoxxa> jcrew:
06:55 < deoxxa> you're a bad person
06:55 < deoxxa> that is all
06:55 < jcrew> lol
06:55 < astropirate> ohhhh snappp
06:55 < jcrew> i just belly laughed
06:56 < jcrew> i need to find a new one now that i told you that i do that every month or so
06:57 < deoxxa> jcrew: the #express version is asking how to write controllers in coffeescript
06:57 < jcrew> hahahaha
06:57 < AAA_awright> elliottcable: https://gist.github.com/raw/4378445/baf41ea929291fe52e90170ccefb2aca040255ec/Function..curry.js
06:57 < AAA_awright> elliottcable: Seriously, are you trying to make more work for yourself?
06:58 < jcrew> that's at least readable
06:58 < AAA_awright> idk what that's even supposed to do so I've probably got something wrong
06:59 < AAA_awright> Wait, are you trying to re-create the behavior of bind()?
06:59 < AAA_awright> >_<
06:59 < elliottcable> AAA_awright ⑊ nope.
06:59 < elliottcable> bind() is exactly *not* what I want; curry() has a different goal to bind().
07:00 < elliottcable> read the description at the top.
07:00 < AAA_awright> It doesn't say what the goal of the function is
07:00 < AAA_awright> Who would prefer to use an actual Function-subclass, and what in the world is a Function-subclass?
07:00 < elliottcable> hahahahaha.
07:01 < astropirate> elliottcable, what language are you coming from?
07:01 < elliottcable> I've got an array of tools for “subclassing” Function (i.e. making objects, that prototypally inherit from something *other* than Function.prototype, so you can add methods to them; but that are themselves callable, i.e. `my_object()`)
07:01 < AAA_awright> TehShrike: But see, that's a quality example of why you want semicolons. Line 15 is missing a semicolon. Was one supposed to be there, or is it supposed to be a comma?
07:02 < elliottcable> astropirate ⑊ Many. Ruby, Schemes, ISO C and ObjC, Lua, Factor and some Haskell ... and a huge array of ones I know, but don't *use*.
07:02 < astropirate> ahh ok cool
07:02 < AAA_awright> There's no telling where the 'var' expression ends and the next expression begins
07:03 < TehShrike> AAA_awright: well... that's one reason I put "var" on each line when I'm declaring multiple variables, and don't really use the comma operator that much
07:04 < AAA_awright> TehShrike: Indeed
07:04 < AAA_awright> Point is elliottcable's code is the worst possible combination of "where does this expression actually end, and the next one begin?"
07:05 < TehShrike> Oh, probably not the *worst* :-P
07:05 < deoxxa> someone's never maintained perl programs
07:05 < deoxxa> it's literally impossible to know from looking at the code sometimes
07:05 < deoxxa> see http://www.perlmonks.org/?node_id=663393
07:08 < AAA_awright> deoxxa: hmm
07:18 < GreenDog> wow, node is fast
07:18 < GreenDog> at least on the really simple test i just did
07:24 < astropirate> GreenDog, good good, your transformation is almost complete
07:24 < TehShrike> lol
07:37 < noahs> .
07:48 < pspace> has anyone used derby.js before 
07:51 < ViciousPlant> I'm curious when the request in https://github.com/mikeal/request actually happen
07:52 < ViciousPlant> Why the request object could still be modified after request.post/get calls?
07:52 < ViciousPlant> var r = request.post('http://service.com/upload')
07:52 < ViciousPlant> var form = r.form()
07:52 < ViciousPlant> form.append('my_field', 'my_value')
08:19 < SoulRaven> hello
08:19 < SoulRaven> there is any module similar to superagent
08:19 < SoulRaven> but with multiple options
08:19 < SoulRaven> like rules for each http status codes
09:18 < elliottcable> Where is node-gyp installed, by default? I don't seem to get it in a Homebrew installation. Yet npm packages install fine; I just can't run it manually.
09:18 < elliottcable> It's nowhere in my $PATH, nor is it in Homebrew's Cellar for the Node version I'm using.
09:26 < nb-ben> hi I need some assistance here :P
09:26 < nb-ben> using the example here: https://github.com/masylum/linkedin-js
09:27 < nb-ben> does the application wait for a request on '/message' and only then issues an api call to linkedin? or does it make the api call upon execution of .post
09:28 < dawra> http://pastie.org/5579335 - what does this mean ?
09:29 < deoxxa> dawra: http://lmgtfy.com/?q=ENOENT
09:29 < SoulRaven> there is any module similar to superagent
09:29 < SoulRaven> but with multiple options
09:29 < SoulRaven> like rules for each http status codes
09:30 < deoxxa> SoulRaven: define "rules"
09:30 < deoxxa> SoulRaven: also define "multiple options"
09:35 < wuhaifeng> hello
09:35 < wuhaifeng> anybody is here 
09:35 < dawra> hi feng
09:36 < wuhaifeng> I am working on a program write by node
09:36 < wuhaifeng> but something seems wrong
09:36 < serdem> shoot it
09:37 < wuhaifeng> I used connect-mongo for cookies
09:38 < elliottcable> anybody here used node-inspector with v8-profiler, successfully?
09:38 < elliottcable> https://github.com/dannycoates/node-inspector/issues/126
09:38 < wuhaifeng> but when I use "supervise app.js",it come out a problem said "var Store = connect.session.Store;                              ^ TypeError: Cannot read property 'Store' of undefined
09:45 < elliottcable> konobi ⑊ I'm really sorry to bother you, but I can't find anybody else who's successfully used *any* of this stuff, and I desparately need to figure out a way to profile this code.
09:45 < elliottcable> konobi ⑊ I'm now trying node-inspector and v8-profiler; and I can't get it to work any more reliably than the node-devtools-agent one. )=
09:49 <@konobi> running your node app with node --prof?
09:51 < elliottcable> konobi ⑊ yep, yep
09:52 < elliottcable> https://gist.github.com/27a99e774fe6f3dc59c7
09:52 < elliottcable> http://ell.io/i3L4U
09:52 < serdem> <wuhaifeng> is ther any problem when you run it without supervise?
09:52 < serdem> there* ther
09:52 < elliottcable> the code in question has profiler.stopProfiling and startProfiling calls as necessary, by the way
09:53 <@konobi> elliottcable: it's been a while since i've used it
09:53 < elliottcable> The entire setup seems hopelessly broken and unmaintained. Ick. )=
09:53 < elliottcable> konobi ⑊ thanks for the pointers, in any case.
09:54 <@konobi> devtools-agent was the only one i could get working
09:54 <@konobi> https://npmjs.org/package/webkit-devtools-agent
09:54 < elliottcable> yeah, tried that one first; was even more broken
09:54 < elliottcable> I'm going to go make another stab at that one, since *you're* more familiar with it, and here.
09:55 < elliottcable> and since this one is no less broken, so far, and *far* less maintained. )=
10:05 < elliottcable> m'kay. I installed directly from the git repo, to ensure I had a version that I could agent.start(), because that seems to be missing from the npm version
10:06 < dawra> i have an array.forEach inside which there is a function call which is async. i dont want the foreach to iterate until that call ends, how do i go about implementing this?
10:09 < SomeoneWeird> dawra, use the 'async' module forEach
10:09 < SomeoneWeird> it exposes a callback which you call when the current iteration is finished
10:10 < dawra> https://github.com/caolan/async ?
10:10 < SomeoneWeird> yep
10:10 < dawra> ok thanks
10:23 < dawra> cant make it work :/ seems to behave like normal foreach
10:27 < dawra> require('async').forEach(emais, function(email, cb) {}); i dont even call the cb() inside that main callback and that main callback gets called on all emails, SomeoneWeird 
10:28 < timoxley> dawra can you post a gist
10:41 < elliottcable> konobi ⑊ just of your note; I posed the overall question to camilo. Here's hoping he has some insight.
10:41 < SomeoneWeird> dawra, huh
10:41 < elliottcable> konobi ⑊ https://github.com/c4milo/node-webkit-agent/issues/20
10:57 < deoxxa> dawra: read the async docs
10:57 < deoxxa> dawra: there's a method there that does exactly what you want - you just have to find it :)
10:58 < Industrial> Is there a preferred way to deep clone an object?
11:13 < StuPig> Hey guys
11:14 < StuPig> i set "publishConfig" in my package.json. when i "npm publish", i got this error "Error: Cache dir is required"
11:17 < astropirate__> Industrial, not realy
11:19 < Industrial> with node-optimist, how do I demand the presence of argv._[0] ?
11:20 < Industrial> e.g. I have one commandline program that I want to use to start other commandline programs so that it becomes parent some-task-name options
11:21 < Industrial> I want the task name to be required and then I just pass the rest of the options to that program
11:21 < Industrial> this way I only have to symlink the parent program
11:24 < substack> Industrial: var argv = require('optimist').demand(1).argv
11:24 < substack> although I usually just do if (argv._.length < 0) showHelp()
11:25 < substack> s/0/1/
11:25 < Industrial> substack: thanks :)
11:53 < JamesS237> Hi, is there anybody online that is good with Deployment and Capistrino with Node.js
12:00 < JamesS237> Anyone on that is good with that stuff
12:04 < Sembiance> :)
12:06 < deoxxa> JamesS237: if you preface every question with another question asking whether anyone is here who might be able to answer your main question, things will take at least twice as long as they need to
12:06 < SoulRaven> hat is the diference between host and hostname in http options?
12:06 < SoulRaven> @what
12:08 < JamesS237> @deoxxa: Will note that, sorry. Still getting used to IRC.
12:08 < deoxxa> JamesS237: the general formula is 1) ask question 2) wait a long time
12:09 < deoxxa> >> require("url").parse("http://127.0.0.1:1234/")
12:09 < purr> deoxxa: ReferenceError: require is not defined
12:09 < deoxxa> hrm
12:09 < deoxxa> SoulRaven: require("url").parse("http://127.0.0.1:1234/")
12:10 < JamesS237> deoxx: Yeah. There is so may idlers!
12:10 < JamesS237> *deoxxa
12:12 < JamesS237> *many
12:13 < Sembiance> mmm... idle...
12:13 < Sembiance> JamesS237: never used capistrano
12:16 < JamesS237> @Sembiance: What would you recommend instead?
12:18 < Sembiance> JamesS237: well, I'm a team of one. I only have 2 or 3 servers, so I wrote my own deployment script. So I'm afraid I don't have anything to recommend.
12:19 < Sembiance> JameS237: once the east and west coasts of america wake up, this room will be a lot more active.
12:19 < Sembiance> JamesS237: if you ask in a few hours, you'll get a lot more responses :)
12:19 < JamesS237> @Sembiamce
12:19 < JamesS237> I hate hitting send before I am done, sorry
12:20 < JamesS237> How have you written your deploy script. Is it based on git?
12:21 < deoxxa> JamesS237: i use https://github.com/deoxxa/instagit and https://github.com/deoxxa/plz for deployment
12:21 < deoxxa> it's based on git :D
12:24 < JamesS237> Would it be stable enough for production?
12:24 < deoxxa> i use it for production
12:24 < deoxxa> there's not a whole lot of code there
12:24 < Sembiance> JamesS237: I have loads of image files that I don't check into git, so a pure git-based deployment approach isn't feasable for me. My little node.js deploy scripts use rsync ;)
12:24 < Guest7623> hi
12:25 < deoxxa> i think he broke himself
12:25 < JamesS237> Cool, thanks.
12:26 < deoxxa> JamesS237: if there are any bugs, it won't be hard to track them down
12:28 < Industrial> can gruntjs ensure that some js files have chmod +x ?
12:28 < deoxxa> Guest7623: hi there
13:11 < Iszak> what ORM do people use? I'm trying to use node-orm but it's documentation sucks.
13:13 < deoxxa> Iszak: no orm ftw
13:13 < Iszak> I should also mention I don't want to restrict myself to a single database e.g. mysql
13:13 < Iszak> deoxxa NIH syndrome FTW?
13:14 < deoxxa> sure, if the "i" stands for "in use"
13:14 < yawnt> o/ deoxxa 
13:14 < deoxxa> herro mr yawnt
13:16 < gildean> Iszak: i bet you can find multiple orms if you search that from npm
13:16 < Iszak> gildean I'm sure I can, whether they're actively maintained or not is another story.
13:17 < Iszak> what would be even better is one that can be used for client and server side.. but I'm not pushing my luck.
13:22 < Iszak> Right after taking a better look at sequelize it appears it does support other dialects such as postgresql even though it labels itself as "The Sequelize library provides easy access to a MySQL database...'
13:30 < JamesS237> Mongoose for MongoDB is amazing.
13:39 < Iszak> Unfortunatley not using mongodb, but found sequelize but documentation on events seem scarce. Also found jugglingdb which seems nice as well.
13:41 < Iszak> anyone used jugglingdb?
13:46 < Sembiance> RethinkDB looks cooler than mongodb :)
13:47 < drim> is it a way to merge 2 arrays ?
13:48 < Iszak> [1,2,3].concat([4,5,6])
13:49 < nb-ben> js really needs a good documentation standard that goes along with the language itself
13:50 < nb-ben> currently all documentation is like lambda-dumb
13:53 < PigDude> nb-ben, jsdoc-toolkit works fine
14:12 < elliottcable> substack ⑊ is there a way to retreive the original *index* of a particular arg, with optimist?
14:12 < elliottcable> substack ⑊ specifically, I'd like to process a series of -a 12 -a 34 -b 56 -a 78 -b 90 arguments *in order*
14:13 < elliottcable> I can get an array of a's, and an array of b's, but I'd like to zip-up those two into an ordered array of (a's + b's)
14:13 < elliottcable> zipping it up is easy enough, but it will always be either (all a's) *then* (all b's), or (all b's) *then* (all a's)
14:15 < jrajav> I'm having an issue using a compiled module
14:15 < jrajav> I'm trying to use mmmagic with node-webkit, and I get this error:
14:15 < jrajav> [8667:1226/080449:INFO:CONSOLE(485)] "Uncaught Error: dlopen(/Users/jon/Development/nv/node_modules/mmmagic/build/Release/magic.node, 1): no suitable image found.  Did find:
14:15 < jrajav>  /Users/jon/Development/nv/node_modules/mmmagic/build/Release/magic.node: mach-o, but wrong architecture", source: module.js (485)
14:15 < jrajav> It works fine outside of node-webkit
14:16 < jrajav> I'm assuming the issue is that node-webkit is using a custom 32-bit version of node
14:16 < jrajav> Is there a simple way to build mmmagic 32-bit with npm?
14:17 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:18 < olleman> eel that seems kidna cool
14:19 < olleman> node-webkit that is
14:22 < ins0mnia> anyone here that used scuttlebutt?
14:24 < jrajav> The method given here to force 32-bit compiling doesn't work: https://groups.google.com/forum/#!topic/nodejs/yCmAvH7H6Yw
14:24 < jrajav> (As in, it doesn't compile the module as 32-bit)
14:27 < jrajav> Never mind, I got it! I had to set the 'node_config_arch' environment variable to ia32
14:27 < jrajav> As per https://groups.google.com/forum/?fromgroups=#!topic/nodejs/5NKgPvatueE
14:39 < slickplaid> Is there a clean way to exit a child_process.fork() process when the parent process gets forcibly quit? I'm assuming it'll have to be done via messaging, ie: checking to see if the IPC connection is still up, else quitting itself. child.send()
14:44 < JamesS237> I'm repeating my question from a few hours ago to see if there is anyone new online who can help
14:45 < JamesS237> Is there anyone on who is good with deployment of node.js with git (with, for example, capastrino)
14:56 < elliottcable> substack ⑊ I'm trying to invoke optimist as follows; and -f and --file arguments are not getting merged into one array:
14:56 < elliottcable> substack ⑊ https://gist.github.com/b283027d8e7c38a10c3e
14:57 < elliottcable> substack ⑊ also, the various arguments are not available on `argv.file` or `argv.start`, only `argv.f` and `argv.s`
14:59 < elliottcable> substack ⑊ ... and the .s is not properly initialized to the declared default of `true`
14:59 < elliottcable> /=
15:19 < rudiX> hello
15:19 < rudiX> I am looking for advice how to render html webkit to image
15:19 < rudiX> without phantomjs 
15:20 < rudiX> it really kills my server performance
15:20 < CoverSlide> phantomjs is probably the best option
15:21 < CoverSlide> are you using node-phantomjs?
15:21 < CoverSlide> or or just cp?
15:21 < rudiX> https://github.com/fzaninotto/screenshot-as-a-service
15:21 < rudiX> tryed this on amazon ec2 large
15:21 < rudiX> and it is still hungry
15:22 < rudiX> also the good advice would be to hint me how to format text and graphics
15:22 < rudiX> http://php-cube.rhcloud.com/ttf/godini/tmp/72.jpg
15:22 < CoverSlide> hmm
15:23 < rudiX> using gd ... but the text is not fit the way I can do it with html
15:23 < CoverSlide> usually when I use gd i need to measure the pixel width of the text and adjust accordingly
15:24 < rudiX> there was other methods I am not familiar with
15:24 < rudiX> pdf 
15:25 < rudiX> https://github.com/LearnBoost/node-canvas
15:25 < rudiX> hmm
15:26 < CoverSlide> canvas is good
15:26 < rudiX> is there any examples
15:27 < rudiX> i am really not great coder
15:27 < rudiX> :)
15:28 < rudiX> the good thing would be something to format text without counting characters and splitting
15:33 < JamesS237> Repeating because Internet cut out: is there anyone online who can help me with deployment for node.js that is git based (like Capistrano)
15:35 < prawnsalad> JamesS237: look into git hooks
15:36 < prawnsalad> you will simply push into a git repo as normal, which calls any hooks (scripts) you have automatically. these scripts is where you would restart/rehash/whatever on your production app
15:37 < JamesS237> I've seen git hooks, I just want a more node.js based approach. Kinda like fleets git server. But with capastrino like syntax
15:37 < JamesS237> *capistrano
15:37 < CoverSlide> DIY
15:37 < prawnsalad> so.. you dont want a git approach?
15:38 < JamesS237> I want git, just with a node.js server. So it's virtually zero downtime 
15:39 < prawnsalad> im not sure i understand what you mwan by "I want git, just with a node.js server"
15:40 < JamesS237> Like, a git server that written in node.js, so i can call functions in node instead of hooks
15:41 < CoverSlide> have a node service listen on those hooks then do whatever
15:41 < prawnsalad> that would be a wrong way to go about it. if you want a git approach.. use git itself. you could use the hooks to communicate with your nodejs server perhaps
15:42 < CoverSlide> you can make that zero downtime
15:44 < prawnsalad> anyone know why i would get a MODULE_NOT_FOUND error when trying to require(), yet i can .readFileSync() the file no problem?
15:46 < JamesS237> prawnsalad: What are you requiring, 'fs'?
15:47 < JamesS237> I want to modify: https://github.com/substack/propagit to act like Capistrano, so I can push code to a small server that runs the module forever-monitor
15:48 < prawnsalad> im requiring a file? eg. (the reolve is here is for debugging) require(require('path').resolve(module_filename));
15:52 < JamesS237> Anyone know how I could do that?
15:58 < JamesS237> Anyone?
16:07 < draginx> can .forEach also hld index values? O_o
16:07 < draginx> oh nvm its blocking anyway
16:08 < MelkorNemesis> hehe
16:09 < draginx> :)
16:10 < draginx> but i could use async forEach! :D but it does not provide index :(
16:12 < SomeoneWeird> or you could use a for loop!
16:13 < draginx> for is async?
16:13 < draginx> also, has anyone in here used msgpack?
16:13 < draginx> on a production server
16:16 < JamesS237> Sorry for repeating, I've got a deadline :(. I want to modify: https://github.com/substack/propagit to act like Capistrano, so I can push code to a small server that runs the module forever-monitor
16:16 < JamesS237> How could I do this?
16:17 < niggler> JamesS237 just set up a second repo
16:17 < niggler> its not hard to do it manually with two repos
16:17 < niggler> (that's actually what I do now)
16:20 < JamesS237> I want to be able to run the code (tar.gz file) through git via a push, then node builds it with a config file, then pushes it to another repo on a new server. But I call it from a Capistrano like file, but in node.js
16:30 < JamesS237> Any idea how I'd do that?
16:30 < Draggor> There is a HUGE list of testing libs.  Any particular one that comes with a recommendation for testing restful APIs?
16:30 < niggler> JamesS237 read that link
16:31 < niggler> oh i didnt send it
16:31 < niggler> http://joemaller.com/990/a-web-focused-git-workflow/
16:34 < JamesS237> I'll look into it
16:35 < eydaimon> I just started using git flow. it's pretty straight forward and a very reasonable process
16:38 < JamesS237> The thing I am trying to do is use substack's propagit library to build a node.js like capastrino "server" that takes in "recipes" and uses them as config files
16:43 < JamesS237> How would I do that?
16:43 < rgb247> hello.. I'm using node.js for a chat web server using web sockets. I have problems when I try to delete a user from the array of connected sockets
16:46 < rgb247> how can I find out which user has been disconnected?
16:46 < rgb247> I have a structure like this: clients[client_id].push(connection); 
16:54 < prawnsalad> rgb247: in your socket.io disconnect event, you will have to iterate through your client array and match the socket that way
16:54 < rgb247> prawnsalad: I don't use socket.io
16:55 < rgb247> prawnsalad: I'm using websocket server..
16:55 < prawnsalad> oh, thought you said socket.io for some reason. but yea, same applies with normal sockets :)
16:55 < slickplaid> You should set up an event emitter to catch the disconnect event with the client_id, and then handle it. Handle it good.
16:55 < prawnsalad> if you store the client_id on the socket, you could read that within the disconnect event
16:57 < rgb247> prawnsalad: I'm tried something like this: when I'v inserted the connecton in clients array, I saved the ID in a index variable to delete it after..
16:57 < rgb247> prawnsalad: but the problem are if anybody will connect after, the index will be overwrited..
16:59 < prawnsalad> create an object similar to: {socket: client_socket, id: your_id}, and push that object into your clients array instead of just the socket
17:00 < prawnsalad> or insert the client_id within the socket object itself
17:00 < squeakytoy> i am curious, what is the "best" JavaScript and/or CSS minifier for Node.js? If any exists. I know about Yahoo minifier, but thats java
17:01 < rgb247> prawnsalad: I'm tried something like this.. to insert the connection into array and to save the index where it was saved, but the problem is that when other will connect, this index which I've saved, will be overwrited
17:01 < prawnsalad> squeakytoy: a common one is uglify-js
17:01 < prawnsalad> rgb247: paste your code somewhere so we can take a look how youve got things
17:01 < michaelsokol> Hey all. Does anyone know a way I could get the server's URL (I'm using Express). app.adress() doesn't work on 3.0
17:02 < rgb247> prawnsalad: a second..
17:02 < rgb247> http://paste2.org/p/2651887
17:02 < rgb247> prawnsalad: tell me please how can I delete a user when it close the connection
17:04 < prawnsalad> rgb247: your var client_id; is in the main scope, so it will be shared between every connection you have
17:04 < prawnsalad> if you put is soemwhere round line 104, that will keep it within the connection scope only
17:05 < prawnsalad> meaning it will be different for each connection - not being overwritten
17:05 < rgb247> thank you
17:05 < ins0mnia> squeakytoy: UglifyJS and clean-css
17:07 < rgb247> prawnsalad: so, how can I keep an index to be unique for each connection, not to be overwritten
17:07 < prawnsalad> 17:02:32] prawnsalad:	 if you put is soemwhere round line 104, that will keep it within the connection scope only
17:07 < rgb247> prawnsalad: if you see, on line 102 I have a variable called index, in this variable I want to keep position where a connection is inserted in array
17:08 < draginx> squeakytoy: uglifyjs
17:08 < draginx> https://github.com/mishoo/UglifyJS2
17:08 < squeakytoy> thanks
17:08 < ins0mnia> rgb247: use a uuid
17:08 < prawnsalad> rgb247: anything within this function will be unique to that connection. wsServer.on('request', function(request) { … })
17:09 < draginx> squeakytoy: it really depends on ur needs too :) but hopefully that works if not then google's closure compiler works well
17:09 < prawnsalad> anything outside of that function, will be in the wrong scope
17:09 < squeakytoy> draginx, google closeure.. is not js though?
17:09 < draginx> it is O_o
17:09 < draginx> *shrugs* I use it for js xD but only simple optimizations like stripping white space and newlines
17:10 < prawnsalad> closure compiler is java 
17:10 < prawnsalad> java app that compiles the javascript into.. smaller javascript :)
17:11 < draginx> oooo i thought he meant compilong JS not the langage its built in my bad xD
17:14 < sebmck> has anyone had any recent experience with node using 100% cpu when you pump it full of requests?
17:15 < prawnsalad> how many requests are you throwing at it?
17:15 < squeakytoy> Hm, i see there is a new UglifyJS.. Number 2
17:15 < jrajav> 1 meelion
17:15 < squeakytoy> UglifiyJS2.. something i should use instead of the original UglifyJS?
17:15 < prawnsalad> squeakytoy: give it a try :)
17:16 < sebmck> prawnsalad: it varies from a couple of hundred to thousands
17:16 < prawnsalad> sebmck: if the server is doing much with the requests it may start eating your cpu with large amounts of requests
17:17 < prawnsalad> if its just static content.. then that should cope with ease on a modern cpu
17:17 < sebmck> i can manage to replicate it by running require('http').createServer(function(req, res){ res.end('foo'); }).listen(8080);
17:18 < sebmck> and then by running apachebench sending a lot of requests
17:19 < prawnsalad> running ab on the same machine?
17:19 < sebmck> yes
17:19 < prawnsalad> sure its not ab causing the cpu spike then?
17:20 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
17:20 < sebmck> since htop says node, i'm sure it's it
17:23 < niggler> htop is terrible
17:23 < sebmck> regardless of your preference it's not incorrectly reporting my cpu usage since top and gnome-system-monitor say the same thing
17:23 < sebmck> it's also pretty hard to confuse the roaring sound of my fans for something else
17:24 < prawnsalad> sebmck: what ab parameters are you using 
17:24 < mmalecki> sebmck: track what sys calls it does
17:25 < sebmck> all i have to do is run `ab -n 1000000 -c 1 http://127.0.0.1:8080/` against the code snippet i posted above and it rockets to 90% cpu
17:28 < prawnsalad> ab appears to be broken on this laptop :(
17:29 < prawnsalad> well.. something is.
17:34 < sebmck> i've managed to replicate it on another machines too
17:35 < sebmck> other*
17:35 < sebmck> two different minor versions as well
17:36 < jcrew> it happens on my server as well, with the code you posted above
17:38 < jrajav> Has anyone done debugging with node-webkit?
17:38 < jrajav> It seems to, well.. not work.
17:40 < RLa> jrajav, doesn't the built-in chrome's debugger work?
17:40 < jrajav> No.
17:40 < astropirate> Greetings
17:40 < jrajav> Well, rather... this IS Chrome's built-in debugger
17:41 < jrajav> But it doesn't work to set a breakpoint in any node code
17:41 < jcrew> astropirate: was there a verdict on spaces vs tabs or can i continue using tabs?
17:41 < astropirate> jcrew, yes, use spaces
17:41 < RLa> jrajav, any filed issues on it?
17:41 < jcrew> astropirate: lol
17:42 < jrajav> RLa: Seems so, actually: https://github.com/rogerwang/node-webkit/issues/256
17:42 < jrajav> :(
17:43 < jrajav> There's obviously no way to set a breakpoint on code that runs on load without setting it and then refreshing the page
17:43 < jrajav> So the debugger has to preserve the source and breakpoints on refresh
17:43 < jrajav> I could also try refactoring it to run the code after a timeout of 10 seconds or so...
17:44 < RLa> why you need to refresh the page?
17:44 < jcrew> RLa: can't set the breakpoint before the browser has the code
17:45 < jcrew> or loads it, at least
17:46 < RLa> but it works once the code has been loaded?
17:48 < jcrew> jrajav: is the browser not saving the code/breakpoints on refresh?
17:48 < jrajav> jcrew: Right
17:50 < scar> i have a PHP app that takes forever running, bc it grabs the source of a website and checks for stuff via regex for # of images, wheter the title exits, etc etc etc. it came to my attention that javascript is the easier way to do this, and more efficient. would this still be so if passing the js parsing load to Node.js (back to the server), instead of having the user/client run the code?
17:50 < jrajav> Yes, it DOES work normally, RLa, I just confirmed
17:50 < jrajav> (By setting a long timeout and setting the breakpoints in the initial load)
17:50 < jrajav> So it's just the refreshing that's broken
17:51 < jrajav> I understand that it's not trivial, but it's kind of necessary for debugging to be useful
17:51 < jrajav> Unfortunately, I know absolutely nada about Webkit and I have little experience with C++, so I can't contribute to this project
17:51 < jrajav> Not without a few months of study, at least
17:52 < RLa> jrajav, is it possible to set breakpoints programmatically?
17:52 < jrajav> No
17:52 < jcrew> scar: you can run the js client side to do that and pass the results back to a server
17:53 < jcrew> jrajav: can you write the code so, in debug mode you have to type or click something, that way you get enough time to set break points?
17:53 < RLa> jcrew, does not work for load-time code
17:53 < jrajav> jcrew: That's probably the workaround I'll go with for now, yeah
17:54 < jrajav> RLa: That actually does work; As long as I can load things up, and then have time to set breakpoints before the initial code runs, everything works peachy
17:54 < jcrew> RLa: true, but it sounds like he just wants to debug 
17:54 < jrajav> So I'll probably have a debug flag put in that causes the init function to wait for a button press or something
17:55 < RLa> btw, isn't there a way to drop into debugger by executing some special function?
17:55 < jrajav> I don't know
17:55 < jrajav> That would be interesting
17:55 < jrajav> Apparently you can: http://stackoverflow.com/questions/6801577/can-i-programmatically-open-the-devtools-from-a-google-chrome-extension
17:55 < jcrew> jrajav: try the command: 'debugger;'
17:55 < jrajav> I'm not sure how that helps though
17:56 < jrajav> Oh, you mean not just opening the dev tools, but actually breaking there
17:56 < jrajav> Okay I see
17:57 < jrajav> Yeah that would be very useful
17:57 < jrajav> No, debugger; does not work
17:59 < jrajav> Never mind. It does work if I have the dev tools open when that statement runs
17:59 < jrajav> jcrew: Thanks!
17:59 < scar> jcrew, well, i actually need the results sent to the client.... i'd prefer not to have the JS source revealed to the user, and Node.js allows that, since it runs it server side. I imagine it would be much more efficient doing this task in JS rather than PHP
17:59 < jrajav> And that even works on refresh!
17:59 < jrajav> Problem solved :)
17:59 < jrajav> (Kinda)
18:01 < jcrew> scar: what kind of sites are you scraping?
18:02 < jcrew> jrajav: at least it's cleaner than a button
18:04 < scar> jcrew, whatever site gets entered. it's a site tester function. "tester" being just a simple syntax and checks a few things i put in there
18:04 < scar> nothing for sale, nothing. just info purposes, but i'd rather not have someone just download my JS file and bam they have my exact testeer lol
18:04 < scar> php is yielding a high burden  w/ all the regex
18:05 < jcrew> scar: is it going to be used by people outside of your network for private networks, etc?
18:06 < scar> jcrew, it will be used on a website, and the website will have a form that accepts the URL, sends to my node.js (if possible) and retrieves the result.
18:06 < scar> jcrew, assume this "form/widget" can be placed, and will be placed, on any possible website.
18:07 < alonecuzzo> hey
18:07 < jcrew> scar: ahh, that is not too difficult then - you might want to just benchmark some of your regexs with node before you build the whole thing out
18:07 < scar> i am new to Node.js, so i figure this is a great test. i already figured out how to run the webserver w/ sockets, etc, and i believe i can simply grab a URL, and use Node.js to parse, then send result back. I can only imagine this being much nicer to my server resources ratther than the PHP option
18:08 < scar> jcrew, i plan on rewriting the whole thing. someone showed me very simple JS to grab # of IMG in a site.
18:08 < jcrew> or if you just want an excuse to learn something awesome then this is a good one
18:08 < scar> js parses / handles this stuff much betterr (and yes, i want an excuse to learn something awesome)
18:08 < scar> and it gives me a chance to convert this PHP monster into a JS lightweight
18:08 < jcrew> so what are you looking to know? where to start?
18:09 < scar> well, if i have a form on an external site
18:09 < scar> do i have a script on my site/server that accepts a url via GET vars, and then have that parse the URL into a safe URL, and then send the request to node.js?
18:09 < scar> or is there a way to directly communicate with node.js, or is that unsafe?
18:10 < scar> i envision my-test.php accepts ?url= and then will output a percentage?
18:10 < scar> (i do a % score)
18:10 < jcrew> scar: you can write a webservice with expressjs to receive the url directly
18:11 < scar> jcrew, similar to the node.js tutorial video currently on the homepage?
18:11 < scar> jcrew, i guess thats where im stuck. i cant visualize how it would work. i dont need the code to create the server just yet, just logics on it. so  i have scar.com that is a domain on the same server as my node.js
18:11 < jcrew> yea it's similar but expressjs is a built up web server module that would let you just drop right into receiving and parsing urls
18:11 < scar> and i have jcrew.com, and you want my site test on your site
18:12 < scar> so where would your form action be pointing to on jcrew.com/site-test/ ?
18:12 < scar> scar.com/my-script.php ? or my-script.js? or neither? perhaps scar.com:1234 ?
18:13 < vikash> I am quering from mysql stored procedure. It returns a JSON. Now I want to store this json into another var, but when I return the result from the object nothing is being returned at all
18:13 < jcrew> scar: probably scar.com:3000/  and your node app listens on 3000 for a POST request containing data
18:13 < scar>  jcrew do i need to worry about someone placing this code on a crappy webhost that doesnt allow socket connections?
18:13 < scar> or is that irrelevant
18:14 < jcrew> scar: irrelevant depending on how you design it.  form request is handled like visiting any other site and the node server is the same thing (unless you use socket.io to communicate with the form, which would be overkill)
18:15 < scar> jcrew, what if the crappy webserver doesnt allow outgoign connections to 3000?
18:15 < jcrew> yours or theirs?
18:15 < bright_day> i
18:15 < jcrew> forms are sent from the client computer
18:15 < vikash> I am quering from mysql stored procedure. It returns a JSON. Now I want to store this json into another var, but when I return the result from the function nothing is being returned at all cc: rouan 
18:16 < bright_day> am trying to get stream in node.js but this one doesnt work. i
18:16 < jcrew> scar: meaning the webservers aren't involved in transferring the information - just the client machines
18:16 < vikash> or I also think, because the query takes a lot of time or is blocking, its being executed at the last, so how can I tackle this cc: rouan 
18:16 < bright_day> am tryng to read byte chunks form post request and write it to pdf file but doenst work code: http://hastebin.com/pigawibafe.coffee
18:17 < scar> jcrew, ahh, so do i have to worry about a client's machine behind a firewall? meaning should i pick a POPULAR open port?
18:17 < scar> jcrew, i am wanting to use AJAX, is that still parsed thru the client?
18:17 < jcrew> scar: yea, 443 is usually not a bad choice - if you're limited to 80 or 443 then you can use a reverse proxy
18:18 < jcrew> yup
18:18 < rouan> vikash, I avoid sql like the plague
18:18 < scar> jcrew, is AJAX parsed thru client as well?
18:19 < rouan> but you can try console.log(returnedobject)
18:19 < scar> i suppose i meant to say that i was using ajax in beginning (obviously with a non-js fallback)
18:19 < rouan> to check that there is actual data
18:19 < vikash> rouan: No worries.. may be someone else can help
18:19 < rouan> what do you get then?
18:19 < vikash> rouan: console.log() shows the exprected output
18:19 < jcrew> scar: yea
18:19 < scar> jcrew, another reason i wanted to use node.js, it lets me use JS even for non-js browsers, since its parsed via server
18:19 < rouan> so returnedobject.whatever has your sub data
18:19 < vikash>  but when I try to store the result in some other varianble, it isnt
18:20 < scar> jcrew, okay so, scar.com:443/site-test.js ?
18:20 < rouan> well you might have to do deep copy of the object
18:20 < scar> jcrew, or do i send hidden posts var "scar_action" = "site_test"
18:20 < rouan> or easier.. JSON.stringify(returnedobject)
18:20 < scar> post*
18:20 < vikash> rouan: I will surely try it right away.
18:20 < vikash> brb, thanks
18:21 < bright_day> can anyone help? pls
18:21 < rouan> var newobject = JSON.parse(JSON.stringify(oldobject));
18:21 < rouan> but that is weird ;p
18:21 < scar> jcrew, if i am asking too much too fast, lemme know. i know you are busy too haha, you just offered to open my floodgate of questions =P
18:22 < jcrew> scar: no trickery or anything, when you look at the expressjs docs you'll see the best way to handle it - you're basically writing a webservice to handle incoming urls and adding them to a queue for parsing
18:22 < rouan> scar whats wrong... you want to get node on port 80?
18:22 < scar> jcrew, but i want to leave it open so its not SOLELY a site test server
18:22 < jcrew> scar: are you trying to get immediate feedback on the site?
18:22 < rouan> try sudo, running it as root
18:22 < scar> jcrew, immediate feedback?
18:22 < jcrew> rouan: he's new to node and wants to port his current project over
18:23 < scar> jcrew, im wanting a url jcrew.com to have a form that sends a URL, and receives a number 0 - 100
18:23 < jcrew> so he's looking to find out how it all works together
18:23 < rouan> well, side by side with apache is a bit of a mess
18:23 < jcrew> scar: when they post the form via ajax or whatever are you trying to get the data back immediately
18:23 < scar> yes, asap
18:23 < jcrew> he's not even to that point yet : - )
18:23 < rouan> but... you can use jquery to call data from your node process
18:24 < scar> rouan, i'm at the point where i watched the videos and understand concept, but want to piece the logic together by asking my questions i have, then create the server, make sure im getting ANY output on my form / ajax call, and then i can handle the simple JS needed by converting my PHP project to this JS
18:24 < scar> jcrew, would i have my node.js grab the source?
18:25 < scar> or does the source need passed to it?
18:25 < scar> "source" being the URL source code thats being tested, jcrew 
18:25 < koik> http://www.carolinaherrera.com/212/es/areyouonthelist?share=4E6KNqzno-zbtWT0_x6PKfLlK5hjDFlsY1_lhX3raZnkz4rz3EUUdzs6j6FXsjB4447F-isvxjqkXd4Qey2GHw#episodio-7
18:26 < jcrew> scar: it'd make sense to have node grab the source for the url from a client perspective, unless they need to be logged in somewhere
18:26 < scar> and i would just use javascript code to grab the source, not some node.js addon?
18:27 < jcrew> scar: yea you'd look in the node docs 'http' module for http.get
18:28 < jcrew> or you could use a 3rd party module called 'request' or any other number of http request modules 
18:28 < jcrew> i usually use request because it's a qt
18:28 < rouan> scar, that took me months to get through.. I'm busy cleaning up code on my server architecture
18:28 < scar> jcrew, well, http request module.. is that a js module or apache?
18:28 < jcrew> scar: all node.js
18:29 < rouan> its esssentially <300 lines of node that gives you database/realtime data updown etc
18:29 < scar> rouan, i am pretty sure i won't be far from it once i just have my source. i should have probably created the site tester in JS first, but i wanted to make sure this node.js could handle my project
18:29 < rouan> have you tried express?
18:29 < scar> would have sucked to port it to JS, then have my wishes not come true.
18:29 < scar> rouan, i will thru jcrew 
18:29 < scar> per*
18:29 < scar> lol
18:29 < rouan> http://expressjs.com/
18:31 < scar> jcrew, is this the same express u spoke of?
18:31 < jcrew> yea
18:31 < jcrew> it be the one
18:31 < rouan> so you've got: <form  method="post" action="/form">
18:32 < scar> rouan, i need to build it as a drag and drop code... so anyone could put on thier site
18:32 < scar> so i need
18:32 < scar> scar.com:443/form ?
18:32 < rouan> ye
18:32 < rouan> that can work
18:32 < scar> rouan, how does the node.js know /form ?
18:32 < rouan> node has listener
18:32 < scar> jcrew, rouan what is the file structure of the node.js ?
18:32 < scar> so /form would simply yield a different js http path?
18:32 < rouan> so with pure example, .. i think its console.log(req.body)
18:33 < scar> and node.js listens on all?
18:33 < rouan> should give you your form data
18:33 < rouan> yes, unless you have a router
18:33 < scar> what if i want to restrict what it does for scar:443/form and just scar:443/ ?
18:33 < rouan> express has nice framework
18:33 < rouan> or use req.path 
18:33 < vikash> rouan: ;The code is here
18:34 < vikash> rouan: https://gist.github.com/4382050
18:34 < jcrew> scar: it will make sense when you check it out in the express docs how to change what it does for / vs /form 
18:34 < vikash> may be with this you can point out all the mistakes... 
18:34 < rouan> wow support in here is 24/7 job hey
18:34 < rouan> ]haha
18:34 < scar> ahh
18:34 < jcrew> app.get("/",function(){ code for "/" }   vs   app.get("/form",function(){ code for "/form" })
18:34 < vikash> and solve the issue.. the result has no data inspite of the function call
18:35 < bright_day> i figured it out you should not end response before data is written to stream. thanks anyway..
18:35 < scar> jcrew, ahh. hmmm. so maybe i should now build my app first, or should i setup the node.js first?
18:35 < jcrew> scar: setting up node.js would be best so you can do incremental testing and experimenting as you go
18:35 < scar> jcrew, i can create the tester and just change the method to retrieve the HTML code first
18:35 < scar> jcrew, true that. im just being apprehensive. way to push me off the cliff =P
18:36 < scar> my next hurdle is i have a cpanel server. only heard it _could_ affect PERL
18:36 < jcrew> scar: one thing at a time
18:36 < scar> though , ihave no perl apps on here (except i think the WHM/cpanel interfaces, but i have a managed server, so thatll get fixed right away)
18:36 < rouan> vikash, I dont know how to help you since you have total different methodology
18:36 < jcrew> scar: is your host willing to reverse proxy or allow you to run node instances on the server?
18:36 < scar> jcrew, well to setup node.js, i gotta set it up on my server right? thats the next step now that i've confirmed this is my best next method?
18:36 < rouan> I rather serve static html, and html has jquery doing IO with node
18:36 < scar> jcrew, yeah its a dedi
18:36 < rouan> through api
18:37 < rouan> without sql
18:37 < scar> jcrew, i'd PREFER to only have node.js listen on a DOMAIN, not IP if possible.
18:37 < rouan> so node just has data in memory to server clients
18:37 < rouan> and saves to disk when memory changes
18:37 < rouan> faster, simpler
18:37 < owen1> in order to mock my db during my tests i require my mock file - var db = (environment === 'test') ? require('./mockDb.js') : require('./db.js');   it feels ugly. any other approaches for mocking?
18:37 < scar> rouan, my tester is simply grabbing the HTML from a given url, and generating a score based on the results of a JS parsing of that html
18:38 < vikash> rouan: if you dont mind, can you share some bits of the code you think that is right
18:38 < vikash> so I can try that
18:38 < scar> jcrew, they said they would install it for me whenever i wanted, and that they would _not_ configure it. so i figure let them install, no? managed dedi support
18:38 < vikash> my only preoblem, even after function call and, line 32 , result is nothing
18:38 < vikash> and nothings gets stored in that
18:39 < vikash> rouan: ^ and ^^
18:39 < jcrew> scar: do you have apache?
18:39 < scar> jcrew, it's cpanel, so i imagine its apache
18:39 < scar> not sure if that's a difference though. there are people that run node.js and cpanel w/o problems
18:39 < scar> jcrew, is it possible to bind to a domain only ?
18:39 < jcrew> scar: do you have .htaccess files?
18:40 < scar> yeh
18:40 < scar> i know its apache, but not sure if its cpanel version of apache
18:40 < rouan> app.get('/', function (req, res) {
18:40 < rouan> 	var arrowevent = arroweventmake(req);	
18:40 < rouan> 	arrow.data.push(arrowevent);
18:40 < rouan> 	io.sockets.emit('event',  arrowevent );	
18:40 < rouan> 	var site = fs.createReadStream('sites/index.htm');
18:40 < rouan> 	site.readable = true;
18:40 < rouan> 	site.pipe(res, {end: true}); 
18:40 < rouan> });
18:40 < rouan> with express
18:40 < scar> pastebin, rouan  ;)
18:40 < rouan> yeah yeah.. i'll release this as something of a wordpress done in node
18:40 < rouan> when it is ready
18:41 < jcrew> scar: get node set up and just worry about getting that to work on a non-standard port first
18:41 < scar> jcrew, k let me call to have them install it
18:42 < scar> it's a nice server.
18:42 < scar> we use ServInt
18:42 < rouan> dont you have ssh access?
18:42 < scar> i don't pay the bills =P
18:42 < scar> yes
18:42 < rouan> root?
18:44 < scar> rouan, yeah
18:57 < othiym23> mbalho: I literally ran into jerrysv within 30 seconds of walking out of the parking garage on my arrival for my first day of work in PDX
18:57 < othiym23> mbalho: but I totally forgot what you wanted me to ask him :(
19:04 < prawnsalad> would anyone have any idea why i get a module not found error using require(), but i can .readFileSync() the file without an issue?
19:04 < jcrew> prawnsalad: what does your require look like?
19:05 < FunnyLookinHat> and are you sure that npm installed it correctly / fully ?
19:05 < prawnsalad> jcrew: currently my debugging require is: require(require('path').resolve(module_file));
19:05 < prawnsalad> module_file is './folder/script.js'
19:06 < prawnsalad> when that exception is caught, i can do require('fs').readFileSync(require('path').resolve(module_file), 'UTF8') without an issue though
19:06 < jcrew> prawnsalad: why not "./" + module_file ?
19:07 < prawnsalad> [19:03:30] prawnsalad:	 module_file is './folder/script.js'
19:07 < rouan> https://github.com/fluentart/templates/tree/master/01_modules
19:10 < prawnsalad> the actual error states: 'Cannot find module './server_modules/kiwi.js'', so it is definately starting with the ./
19:10 < rouan> two '' 
19:10 < rouan> ??
19:10 < prawnsalad> no that was me just quoting for irc 
19:11 < rouan> all i can think of is access rights
19:11 < rouan> otherwise move it into the same folder and try ./kiwi.js
19:11 < prawnsalad> cannot be that if .readFileSync() works on the file though
19:11 <@mbalho> othiym23: lol i had some raspberry pi questions but figured them out 
19:12 < prawnsalad> another point: it works on my osx machine, but its failing on a linux box
19:14 < rouan> oh prawnsalad try this
19:14 < rouan> var company = require('./server_odules/kiwi');
19:14 < rouan> no .js
19:15 < prawnsalad> just tried that actually, no change in the require() call 
19:18 < prawnsalad> ohhh… got it
19:19 < prawnsalad> earlier in the app i change the apps working directory. forgot that require() is based off the script dir, not wrking dir
19:20 < prawnsalad> so many hours trying to debug that :(
19:23 < rouan> prawnsalad, i've updated the git template
19:23 < rouan> prawnsalad, https://github.com/fluentart/templates/tree/master/01_modules
19:23 < prawnsalad> hm?
19:23 < rouan> so theres subfolder module loading working
19:24 < rouan> i duno what you are missing in your code
19:24 < rouan> but this template works
19:24 < prawnsalad> oh, see above. ive got it working :p
19:24 < rouan> aaah >_<
19:24 < prawnsalad> 19:16:51] prawnsalad:	 earlier in the app i change the apps working directory. forgot that require() is based off the script dir, not wrking dir
19:24 < prawnsalad> thanks though :p
19:24 < rouan> doh ;)
19:25 < prawnsalad> i would have though require() would work with absolute paths though. ie /usr/lib/script.js
19:27 < owen1> in order to mock my db during my tests i do this: var db = (environment === 'test') ? require('./mockDb.js') : require('./db.js');   it feels ugly. any other approaches for mocking?
19:29 < bright_day> hello.. i need some good npm packages with clear code to learn from it. any suggestions?
19:30 < prawnsalad> owen1: have a config file for each environment (production, staging, dev). either require('config.js') and have the relevant config in each environment, or require() in the relevant file based on a environment flag somewhere
19:30 < rouan> bright_day, what level stuff?
19:32 < bright_day> rouan intermediate but i want small packages with clear code
19:33 < rouan> bright_day, feels like im spamming this.. but ye
19:33 < rouan> bright_day, https://github.com/fluentart/templates/tree/master/01_modules
19:33 < prawnsalad> heh
19:33 < rouan> so you'll run like this: node main.js
19:35 < owen1> prawnsalad: i have var config = require('./config/' + environment + '.js');     is this what u were talking about?
19:35 < prawnsalad> thats works too
19:35 < prawnsalad> so youd only need that once at the start of your app and the rest of your code no longer needs to check which environment its running under
19:35 < owen1> but what about my mockDb.js, where do i load it? inside config/test.js ?
19:36 < owen1> and to access it inside server.js i'll do config.db ?
19:36 < prawnsalad> config/dev.js, config/production.js, config/mock.js, name them however you like
19:36 < rouan> config.db = 'mockdb';   or config.db = 'productiondb'; 
19:36 < rouan> something like this
19:37 < owen1> got it, just add my db or any other dependency into the cofig object that is exposed via config.js
19:37 < owen1> via config/test.js
19:37 < bright_day> rouan thank you i will try other tempalates too
19:37 < owen1> or config/dev.js etc
19:37 < prawnsalad> correct
19:37 < rouan> bright_day, check the 01_fundamentals one
19:37 < owen1> prawnsalad: rouan awesome!
19:38 < rouan> ;)
19:38 < prawnsalad> rouan: i notice youve played with arduino+nodejs
19:38 < prawnsalad> fun :)
19:38 < rouan> yes!
19:39 < rouan> mind blowing stuff
19:39 < rouan> and you?
19:39 < prawnsalad> i was playing with raspberry pi+sensors with nodejs, interfacing with an arduino also
19:40 < prawnsalad> been working on a gps sensor + gps tracker for a weather balloon with it all interfacing together
19:40 < prawnsalad> nodejs app for streaming its location onlone for google maps/etc
19:40 < prawnsalad> *online
19:46 < yaymukund> What does this mocha test output (with the tap reporter) mean? https://gist.github.com/7decaf600afc35eb7dbe
19:47 < yaymukund> specifically, it says there are 16 tests but only 15 passes, but I only see that 15/15 tests passed.
19:49 < rouan> prawnsalad, thats cool man
19:51 < cellvia> hi friends, if i want to include custom properties in my package.json to be analyzed by a separate build process for my own purposes... is there anything preventing me from doing that?  or anything i should keep in mind?
19:51 < cellvia> will it break my npm submission
19:59 < isaacbw> are there any more advanced node shells, kind of like what IPython does for python?
19:59 < isaacbw> the main thing I want now is command recall so I can open up the shell and go back to the last command I used
19:59 < isaacbw> for testing libraries
19:59 < isaacbw> and/or a way to run a script and then drop into an REPL
20:00 < prawnsalad> more advanced than the node command line itself?
20:02 < isaacbw> at the very least, recall by pressing 'up'
20:02 < isaacbw> and loading and executing text from a file and then returning to the REPL
20:02 < cellvia> i think there is something called ultra repl
20:03 < isaacbw> huh, that's neat. It doesn't look quite like what I want though. ultra-repl looks more like a whole development environment
20:03 < isaacbw> and it's for windows
20:03 < isaacbw> nevermind about the windows
20:10 < cellvia> theres other ones
20:10 < cellvia> i think one by visionmedia 
20:13 < isaacbw> there's inode which hasn't been touched in a year
20:56 < s5fs> I'm getting an error when I run ./configure for 0.8.16 on a beagleboardxm. The error is pointing to gyp_node and it's complaining about 'no module named filecmp'. This is python 2.7.2.
20:57 < rouan> you can run node on a beagleboard?
20:58 < s5fs> rouan: I don't see why not, I can run it on a rasppi.
20:58 < rouan> suddenly arduino looks like crap ;p
20:58 < s5fs> I'm using both arduinos and rpi for my personal projects, both have their place.
20:59 < rouan> although, not getting errors like that
20:59 < isaacbw> is there any way to get rid of the '>' in the interactive mode
20:59 < rouan> isaacbw, check repl
21:00 < isaacbw> rouan, ah I wasn't looking in the right place. Thanks
21:00 < isaacbw> this is perfect :)
21:00 < rouan> :)
21:01 < sohcahtoa> man I gotta get an updated linux machine for devel. trying to do this on windows is unpossible (or too hard for me anyway)
21:02 < s5fs> sohcahtoa: fun times
21:02 < rouan> sohcahtoa, too many things not compatible on windows yeah
21:03 < rouan> think its mostly because of c compilers etc
21:03 < s5fs> rouan: whatever dude, office runs there, 'nuff said. brb, pivot table.
21:04 < Gottox> Is someone visiting 29c3 in Germany this week?
21:04 < sohcahtoa> I'm gonna tell dude I need to upgrade this devel machine it's got like php 4.2 on it or something which isn't good
21:04 < othiym23> mbalho: my dad got me a WiSpi for Christmas, so as soon as it shows up, I'll upgrade the wifli module to stream video and be one step closer to single-rotor world domination via node.js
21:05 < othiym23> I wonder how much of my parents' house / garage I'll destroy before I get everything working
21:07 < Industrial> I can't find where in fleet it loads fleet.json .. I'd like to place it somewhere else then in the project dir
21:07 < Industrial> well, in a sub directory.
21:10 < Industrial> oh, remote.js line 7, yey ack.
21:52 <@mbalho> othiym23: are the wifly and wispi two produts by the same company?
21:52 < isaacbw> any idea why adding ansi codes to readline text is adding random spaces at the end of the line?
21:55 < isaacbw> actually, it only happens with readline.question
21:56 < isaacbw> nevermind, all readline output
22:00 < jcrew>  
22:02 < batman1> anyone here familiar with Macs and Testacular? I have a friend who is trying to run it but it keeps telling him "error (config): Config files does not exist"
22:02 < astropirate> HAHAH
22:09 < othiym23> mbalho: http://www.interactivetoy.com/IATC1011/home/index.html
22:09 < ljharb> is there a good npm module for handling command line arguments, or should i just use process.args?
22:09 < EyePulp> nopt is nice
22:10 < EyePulp> ljharb: -^
22:10 < ljharb> sweet, thanks, checking it out
22:14 < AviMarcus> ljharb, https://github.com/substack/node-optimist is quite popular - 882 stars, 46 forks
22:14 < ljharb> ah, thanks
22:15 < AviMarcus> ah npm depends on nopt.. so that's not going away..
22:15 < AviMarcus> I like using http://eirikb.github.com/nipster/ to find popular things, but "command line args" didn't really give good results here
22:16 < AviMarcus> (more stars + more forks = presumably more users = presumably more bug fixes/polishing = presumably longer maintenance of the package)
22:16 < busata> is there a way to get the size of a file in nodejs aside from stat? trying to read the last 128 bytes of a file(mp3) , was using fs.read with a buffer size of 128
22:17 < AviMarcus> busata, you can specify a start: flag for the read, but I don't think so
22:18 < JamesS237> Hi. I need some guidance on writing a server that is based on substack's propagit. I can git push to it, and it unzips a file I've pushed, sand creates config files from a "recipient" I've sent.
22:20 < koik> http://www.carolinaherrera.com/212/es/areyouonthelist?share=NVq56AQ2vxgECOtvW_3-cC_MeqWSEVkU2vlXs7SL5zHkz4rz3EUUdzs6j6FXsjB4447F-isvxjqkXd4Qey2GHw#teaser
22:21 <@mbalho> grr spammers
22:24 < stefan41> seems like overloading a task based on the role should be trivial, but that doesn't seem to be the case?
22:27 < isaacbw> man, this is getting annoying. Trying to use ansi color codes in a readline prompt causes there to be a whole bunch of random space after the  prompt before the cursor
22:28 < isaacbw> ah http://stackoverflow.com/questions/12075396/adding-colors-to-terminal-prompt-results-in-large-white-space
22:28 < Iszak> So I'm finding my app.js file is becoming quite cumbersome, it's currently express.js + socket.io. I'm thinking I should split it into two files which share common models/services and thus two processes. This will of course be more performant I'm guessing, any pitfalls or opinions on this approach?
22:28 < isaacbw> should this be intended behavior? seems like node ought to figure that out
22:30 < AviMarcus> Iszak, nearly everything should be a separate module. are you hitting 100% cpu? if you do async properly 2 threads won't necessary help.
22:30 < Iszak> AviMarcus no absolutely not hitting any resource limit. I just feel it's becoming quite cumbersome to manage..
22:31 < AviMarcus> right - so learn how to break everything out into separate modules, then each piece does very few things and mentally is easier to see the parts
22:32 < AviMarcus> e.g. my last project was ~6 different modules and then one script that pulled it together (basically just a queue)
22:32 < AviMarcus> my API is a script that calls restify and sets up the routes, then includes the authorization, authentication middleware and each route-group has it's own module that's included
22:33 < Iszak> AviMarcus oh yeah all my models/services/etc are all separate. This is just the process worker, the http server.
22:33 < Iszak> I feel like it may be a case of YAGNI but in the long run it'll make the servers harder to fall over.
22:34 < flybyme> where can i find a copy of ry's node_chat?
22:34 < flybyme> i cant find it on his git page
22:34 < AviMarcus> Iszak, oh. Well you can use fork and pass stuff to it.
22:35 < Iszak> AviMarcus yeah could do that.
22:35 < Iszak> I think I might leave it, just wanted some insight on it
22:37 < rouan> flybyme, I have a copy. ry-node_chat-f72a42e.tar.gz
22:38 < flybyme> rouan> is it up on git?
22:38 < rouan> i can put it there or email?
22:39 < flybyme> is**
22:40 < flybyme> lol no its ok
22:41 < flybyme> oh i found a copy too https://github.com/icegithub/nodejs-exercise/tree/master/ry-node_chat-f72a42e
22:42 < rouan> cool
22:46 <@mbalho> Raynos: http://danielribeiro.github.com/WebGLCraft/ + http://mrdoob.com/projects/voxels/#A/SfaeiUhUhcje + http://mrdoob.github.com/three.js/examples/misc_controls_pointerlock.html
22:49 < euoia> does anyone have examples of express and socketio working together? Everything I on the front page of google seems to be outdated, using express v2.*
22:51 < FunnyLookinHat> euoia, http://www.github.com/funnylookinhat/nodejs-chat
22:51 < FunnyLookinHat> euoia, You're probably interested in app.js and libs/static.js
22:54 < euoia> FunnyLookinHat: okay great, will have a look
22:54 < FunnyLookinHat> euoia, I'll be around for a little while more if you have questions, but there isn't really too much that needs explaining  :)
22:55 < euoia> FunnyLookinHat: great, thanks. Initially I am trying to do a chat program, since I figured it's really the most basic thing to start with.
22:55 < FunnyLookinHat> euoia, that tends to be the "hello world" app for socket.io
22:55 < euoia> FunnyLookinHat: Indeed!
23:07 < euoia> FunnyLookinHat: Hmm, I was looking for something that uses express sessions to store the username
23:07 < myndzi> how would i go about inheriting from a class that forks worker processes cleanly?
23:07 < euoia> FunnyLookinHat: There appears to be no validation that the username the client sends is in fact the username they signed in as
23:08 < myndzi> read the post with sockjs about why you don't want to do that (?)
23:08 < euoia> good job on the design, it looks nice
23:08 < myndzi> i mean, re: linking websockets and sessions together
23:09 < myndzi> it's best to authenticate them separately iirc, but i forget why anymore
23:09 < euoia> myndzi: oh really? can you send me the link?
23:09 < myndzi> trying to find it, i could be misremembering a specific
23:09 < myndzi> such as it being a particular of internals
23:10 < myndzi> i just remember that sockjs didn't provide a mechanism for it and had a reason for it
23:10 < euoia> myndzi: so it recommends a one-or-the-other approach?
23:11 < myndzi> https://github.com/sockjs/sockjs-node
23:11 < euoia> I mean, let's say the user needs to authenticate by entering their username and password. That could either be handled as an express request or a socketio request
23:11 < myndzi> bottom of that page, though i thought i read an email thread that was in more detail or something like that
23:12 < myndzi> Basically - cookies are not suited for SockJS model. If you want to authorise a session - provide a unique token on a page, send it as a first thing over SockJS connection and validate it on the server side. In essence, this is how cookies work. <- this is how i've been doing it
23:12 < myndzi> like two-factor auth, or whatever they call it when you supply a unique token for forms
23:13 < myndzi> yeah, that's not the right term, blah
23:14 < euoia> Okay, I understand... I just means that I kind of have to pick a single architecture for all requests on the site that require some kind of session authentication
23:15 < euoia> Possibly a stupid question, but if the page refreshes is the websocket still open?
23:15 < myndzi> it should be enough to assign a unique token to their session each page load, and have them verify that token over the websocket
23:15 < myndzi> i think that may be browser dependent
23:16 < myndzi> http://stackoverflow.com/questions/4812686/closing-websocket-correctly-html5-javascript
23:17 < euoia> goodness me!
23:17 < myndzi> so apparently: sometimes
23:17 < myndzi> ;P
23:17 < myndzi> but leaning towards 'no'
23:19 < FunnyLookinHat> euoia, myndzi is right
23:19 < euoia> The challenge here is how to organize the project when some requests will be straight http requests and some will be socketio (or socketjs) 'events'
23:19 < FunnyLookinHat> err wow I'm WAY late
23:19 < FunnyLookinHat> sorry
23:19 < FunnyLookinHat> You're best off taking a verified name + key and passing that along through another request to init the socket.io stuff
23:19 < euoia> *sockjs
23:20 < myndzi> sockjs != socket.io
23:20 < myndzi> they both do the same thing, but in different ways
23:20 < myndzi> i found sockjs to be appealing to my sensible side but a pain to use
23:20 < myndzi> lol
23:20 < myndzi> http requests or ajax requests? 
23:21 < euoia> I am wondering whether socketio and sockjs provide enough of an advantage over straightforward ajax long polling to be worth the pain
23:21 < myndzi> socket.io is like magic
23:21 < myndzi> it also falls back to long polling automatically
23:21 < myndzi> like anything it depends on what you're doing though
23:23 < MI6> joyent/node: Shigeki Ohtsu master * 8bf0c15 : stream2: fix to emit end event on http.ClientResponse (+4 more commits) - http://git.io/d5c82g
23:24 < euoia> myndzi: how did you hear about sockjs? what do you like about it compared with socketio?
23:26 < MI6> joyent/node: Ryunosuke SATO master * 31cffae : repl: add 'domain' to automatic loading libs  `domain` should be a member - http://git.io/xala3A
23:27 < MI6> joyent/node: Ryunosuke SATO master * 0db521d : repl: remove 'repl' from automatic loading libs  In repl, calling `repl`  - http://git.io/ObV5Gw
23:29 < mwwwww> Hi folks I'm about to build a little node.js app for myself but was wondering about hosting options. I was really looking for something just a couple of dollars a month and support custom domains with my own ssl cert. Any suggestions?
23:29 < MI6> joyent/node: isaacs v0.8 * 54740c8 : lint - http://git.io/31vzrg
23:36 < thealphanerd> https://www.youtube.com/watch?v=dkZFtimgAcM&list=PLEC8BD6C4D4911BA6&index=10
23:36 < thealphanerd> monads!
--- Log closed Thu Dec 27 00:00:32 2012
