--- Log opened Sat Jan 26 00:00:21 2013
--- Day changed Sat Jan 26 2013
00:00 < substack> geb: perhaps try base64 encoding the file
00:00 < substack> grrr ignore that
00:00 < substack> geNAZt left
00:04 < harth> now for the question I pop into node.js and ask every 6 months...What is the best test framework these days?
00:05 < azylman> Probably the same as last time
00:05 < azylman> Mocha
00:05 < substack> harth: I like tap
00:05 < azylman> I kid, I've only ever used mocha so I can't really evaluate it in relation to others
00:05 < substack> but I use tape mostly these days because it works in browsers
00:05 < azylman> But I do love mocha
00:05 < Havvy> I've only used Jasmine...and I'm frustrated with it.
00:05 < Stephen> There is one with dependancy inject these days
00:05 < substack> https://github.com/isaacs/node-tap https://github.com/substack/tape
00:05 < Stephen> Tape!
00:05 < substack> harth: plus it's really easy to run tape tests in the browser with testling-ci and/or browserify
00:06 < azylman> lol, rolled your own
00:06 < azylman> Nice
00:06 < substack> also possible with mocha but not as nice
00:06 < Havvy> Stephen: I just build DI into my objects as optional parameters.
00:06 < jcrugzz> simpler the better
00:06 < substack> azylman: I just copied the node-tap api and made it work in ie6
00:06 < azylman> Ah, I see
00:06 < Stephen> Fuck ie6, ahem
00:08 < Stephen> What are you testing?
00:08 < jcrugzz> or just fuck IE all around
00:08 < aho> IE11 might be okay
00:08 < Stephen> IE9 is fine
00:08 < aho> IE9 doesn't support the history api, text-shadow, webgl...
00:08 < jcrugzz> microsoft will still try and hold back web standards
00:08 < azylman> Just pull a Google and drop support for everything less than IE9
00:09 < aho> IE9 is also 21 months old. people shouldn't use it anymore
00:09 < cxreg> maybe im missing something, but how would i do greater or lesser than using should and/or mocha
00:09 < Stephen> But it works right on all it supports. that's tge important
00:09 < isaacbw> ie9 isn't bad
00:10 < Stephen> Windows 7, no choice ie9
00:10 < Stephen> Ie10 is win8 only
00:10 < aho> ie8's support of the css 2.1 stuff was also okay
00:10 < aho> but it's old now
00:10 < Stephen> So's your argument
00:11 < aho> yes
00:11 < aho> outdated browsers suck
00:11 < aho> it's a very old argument indeed
00:11 < harth> substack: azylman: Stephen thanks
00:11 < cxreg> i guess (comparison expression).should.be.true
00:11 < harth> no need to test in browser for me, but will check out tape neways
00:12 < substack> cool!
00:12 < substack> tap has more stacktrace information if you're just in node and the tape and tap apis are pretty interchangeable
00:13 < isaacbw> what should my path look like with JSONStream if I want each 'data' event to be an element in an array
00:13 < isaacbw> say, myArray
00:13 < isaacbw> or actually, 
00:13 < substack> the thing I like best about the tap approach is that you can just `node test.js` and your test will run
00:13 < isaacbw> the stream itself should be an array
00:13 < substack> no need for a harness program but tap also has a harness to run all the tests in a directory
00:13 < isaacbw> mm, no
00:14 < substack> isaacbw: do you have an example of some input data?
00:14  * substack has hacked on the JSONStream path code
00:14  * Stephen needs to tead about JSONStream
00:15 < isaacbw> let's say something like { status: 0, messages: [...] } and I want an event for each element of messages
00:15 < substack> Stephen: it's one of my favorite node libs
00:15 < substack> isaacbw: JSONStream.parse([ 'messages', true ]) should work
00:16 < harth> substack: does tape also take an entire directory of test files as input?
00:16 < isaacbw> cool, thanks
00:16 < substack> harth: the cool part is you can use the `tap` script to run tests written in tape
00:16 < harth> substack: nm
00:16 < harth> oh okay
00:16 < substack> because all `tap` cares about is that the files all produce tap output on stdout
00:16 < jcrugzz> substack: you, dominictar and Raynos need to setup a streams training camp
00:16 < substack> so you can just npm install -g tap
00:16 < substack> then tap test/*.js
00:17 < Raynos> jcrugzz: west coast or east coast?
00:17 < substack> it was a huge eye-opener when I figured that out
00:17 < substack> and then isaacs was just all "oh of course that's how it works that's why tap is great"
00:17 < Raynos> I have a index.js that requires the rest of my tests 
00:17 < Raynos> That way my tests run in node, phantom and on testling servers
00:18 < Bacta> Does that Steve Klabnik douche hang out here?
00:18 < Raynos> it's the simplest way to do tests that run in multiple environments
00:18 < jcrugzz> Raynos: Im partial to east coast
00:18 < Bacta> I read what he did on Reddit .. What a dropkick loser
00:19 < isaacbw> what did he do
00:20 < Bacta> Ripped on this girls github project
00:20 < isaacbw> oh, the 'replace' thing?
00:20 < Bacta> Yep
00:20 < ricardobeat> Bacta: that was like, last year
00:20 < Bacta> What a douchebag
00:20 < CoverSlide> the tweets were this year
00:20 < Bacta> I bet he only apologized after being found out
00:21 < isaacbw> that's how it goes
00:21 < Bacta> He shows bad character
00:21 < CoverSlide> isn't steve klabnik more a ruby guy?
00:21 < Bacta> No idea
00:21 < Stephen> ... delete drama;
00:21 < isaacbw> assholes usually don't know they're assholes
00:22 <@Nexxy> you guys
00:22 <@Nexxy> Steve is a nice guy
00:22 < Bacta> Normally they think they're gods gift to the world
00:22 <@Nexxy> he said some things that were out of character
00:22 <@Nexxy> he feels bad
00:22 < isaacbw> and people sometimes just have bad days
00:22 < cxreg> haters gonna hate
00:22 < isaacbw> AS LONG AS HE FEELS BAD EVERYONE ELSE IS HAPPY
00:22 <@Nexxy> was it OK? no, do we need to condemn him? no.
00:22 < Bacta> I'm just tired of all the arrogance in the wider coder/hacker community
00:23 < Bacta> I fucking hate it
00:23 <@Nexxy> Bacta, calling him a douche is the exact same kind of thing
00:23 < Stephen> browserify(drama); delete drama; require(substack);
00:23 < azylman> Yep
00:23 < Bacta> Anyway
00:23 < azylman> Bacta, you're being just a teensy bit hypocritical
00:23 < Bacta> I'm only here because he was going on about Node on Twitter
00:23 < Bacta> And then mentioned something about Freenode
00:23 < azylman> He ripped on a project he thought was pointless, you're attacking someone directly
00:23 < azylman> One of those is way worse
00:24 <@Nexxy> I don't think it's helping any to decide which is worse
00:24 < CoverSlide> one would say ack was pointless, except it's not
00:24 <@Nexxy> they're both bad
00:24 < nlf> so you came here looking for a confrontation?
00:24 <@Nexxy> we should be focused on improving the condition and encouraging each other to do better
00:24 < jxson_> Nexxy: <3
00:24 <@Nexxy> not casting judgment on people we've seen acting in less than desirable ways
00:25 <@Nexxy> jxson_, <3
00:25  * CoverSlide gives hugs to everyone and throws flower petals in the air
00:25 < Bacta> Please don't take this the wrong way but there are too few women in open source
00:25 < isaacbw> you guise
00:25 < Bacta> And I think attitudes like this are scaring those who do contribute off
00:25 <@Nexxy> Bacta, there are too few people of every minority in OS
00:25 < substack> beep boop
00:25 < isaacbw> stop being turds
00:25 < Bacta> Anyway
00:25 < Bacta> ./rant
00:25 < isaacbw> WHO LIKES NODE I DO
00:25 < Stephen> So, I really need to convert my php project. Problem is, I'm busy. Solutions?
00:25 < isaacbw> DO YOU GUYS LIKE NODE
00:26 < Bacta> Node?
00:26 < CoverSlide> there aren't enough samoans in open source
00:26 < Bacta> It's fucking JavaScript running on the fucking server
00:26 < Bacta> What's not to like?
00:26 < jcrugzz> Stephen: quit your job obviously
00:26 < azylman> JavaScript
00:26 <@Nexxy> semicolons.
00:26 < azylman> BOOM
00:26 < Bacta> It's a circus
00:26 < Bacta> But that's just me
00:26 < redshadowhero> I see I'm missing all the hot drama action.
00:26 < Stephen> Can you smell what duane is forking?
00:27 < LouisT> Bacta: A shitty server would be an issue, but I assume that's not your point.
00:27 < Bacta> Anyway
00:27 < Bacta> Goodbye
00:28 <@Nexxy> lol
00:28 < holzp> is there where we discuss DOM Node manipulation in JS?
00:28 < nlf> did that person seriously just come in here looking for a confrontation?
00:28 < azylman> Yep
00:28 < CoverSlide> it would appear so
00:28 < nlf> people are ridiculous
00:28 < redshadowhero> ...
00:28 < redshadowhero> wait wait.
00:28 < CoverSlide> apparently it's Steve Klabnik's birthday or something
00:28 < redshadowhero> lemme go back and read.
00:28 < Stephen> It backs a browser extension & site. Until recently it would have sucked, no remote scripts allowed. But now browserify ;-)
00:30 < redshadowhero> Huh. I apparently missed quite a few things since yesterday.
00:30 < redshadowhero> but it's the weekend! And I just have a few more files to write.
00:30 < Stephen> I wonder how well browserify scripts support extension level js
00:30 < CoverSlide> extension level js?
00:30 < CoverSlide> now you're making up words
00:31 < Stephen> Chrome level *in Firefox terms
00:31 < jcrugzz> browserify just wraps it so you can write everything as a node module. Shouldn't matter if its a web app or an extension
00:32 < jcrugzz> as long as you include the bundle.js in the extension code
00:32 <@konobi> mscdex: you should hit up baudehlo about pcre
00:32 < isaacbw> aaaarrgghgh headache
00:32 < Stephen> Does it clutter global scope?
00:33 < jxson_> Stephen: there is no reason why you couldn't use browserify for writing an extension's js
00:33 < mscdex> konobi: why's that?
00:34 < Stephen> It usually has more to do with rules than func. Like socket.io... Used to require loading a remote js file.
00:34 < CoverSlide> is node-prce any faster than RegExp in js?
00:35 < Stephen> Abd thus dnode did
00:35 < Stephen> Then dnode got new shoes.
00:36 < Stephen> And life got better.
00:36 < Stephen> Substack: how's voxel-life?
00:36 < CoverSlide> or is this just to fix edge case regex stuff js doesn't support like backreferences?
00:36 <@konobi> mscdex: it's probably useful for haraka plugins
00:37 < CoverSlide> or whatever they're called
00:37 < substack> Stephen: just been hacking at that on the side
00:37 < substack> I've got a neat matrix patch in the works so we can build spaceships and robots
00:37 < Stephen> Quite a damn hack i must say.
00:37 < CoverSlide> er lookbehind
00:37 <@konobi> CoverSlide: there's a lot that js regexps don't support
00:37 < mscdex> CoverSlide: it has more features like named capture groups and a bunch of other stuff
00:37 < CoverSlide> ok
00:37 < CoverSlide> how's performance?
00:38 <@konobi> i miss /gsmx
00:38 < mscdex> i haven't done any benchmarking yet
00:38 < substack> Stephen: mbalho, shama, and chrisdickinson are doing all the hard work
00:38 < TehShrike> isaacs: well now I'm all excited for No
00:38 < mscdex> probably won't until i get JIT support in there
00:38 < substack> I'm just poking and prodding when I'm not hacking on testling-ci stuff
00:38 < substack> which is coming along pretty great
00:40 < darach> Ooh. Where's @izs hiding?
00:40 < Stephen> Hmm.. so theoretically voxels could be passed around like json objects.
00:41 < Havvy> Theoretically, anything can be passed around like JSON Objects.
00:41 < CoverSlide> theoretically
00:41 < CoverSlide> doesn't mean JSON is the best suited transport for that
00:41 < Stephen> Voxel-portal gave me a laugh. Does it actually render the portalled view?
00:42 <@konobi> disgusting... treating JSON Objects like that... they  have feelings TOOO
00:42 < isaacbw> I keep getting these weird tingly feelings
00:42 < isaacbw> when I realize how close I am to a functional prototype of this project
00:42 < LouisT> hm.. read that as "they have feelings TODO"
00:42 < CoverSlide> can't contain all the feels
00:43 < isaacbw> trying to store voxels in json would be insane
00:43 < isaacbw> unless you just have one field which is a string
00:43 < Stephen> Id prolly use a websocket and bson or something
00:43 < isaacbw> voxel data can get very large
00:44 < CoverSlide> a nice lightweight binary protocol wouldn't be bad
00:44 < isaacbw> unless you just mean a 3D boolean array or something
00:44 < isaacbw> but that's not really voxels
00:45 < isaacbw> minecraft tainted the term voxel
00:45 < isaacbw> https://www.youtube.com/watch?v=VpEpAFGplnI
00:45 < Havvy> So, what is a voxel then?
00:45 < CoverSlide> ken silverman did some awesome work with voxels
00:45 < Stephen> The voxel objects themselves, sans things like the image data/funcs
00:46 < CoverSlide> not sure if there were any in duke but there definitely some in blood
00:46 < darach> havvy: http://lmgtfy.com/?q=what+is+a+voxel+then%3F
00:46 < isaacbw> https://www.youtube.com/watch?v=fAsg_xNzhcQ
00:47 < CoverSlide> http://advsys.net/ken/voxlap.htm
00:47 < isaacbw> voxlap is interesting but not very modern
00:47 < CoverSlide> right
00:49 < darach> Are you planning on slinging voxels over the wire? I'd be more concerned about bandwidth efficiency than how modern the format was...
00:49 < Havvy> So then the only difference between Minecraft's Blocks and Voxels is that voxels can be different sizes?
00:50 < isaacbw> voxels can't be different sizes, really
00:50 < CoverSlide> tehcnically voxels shouldn't be different sizes
00:50 < CoverSlide> there's a big difference between a voxel and a "constrained cubic mesh"
00:50 < Havvy> CoverSlide: And that is?
00:51 < CoverSlide> well meshes are like vector graphics
00:52 < isaacbw> that's a good way of putting it
00:52 < Stephen> It was a consideration. Handing boxes around the net sounds fun.
00:53 < CoverSlide> they can be turned in different directions, resized, scaled, etc
00:53 < CoverSlide> with voxels, a voxel is a single unit of the whole entire engine. it is like a pixel, if you turn an object with voxels it won't have a smooth surface, it will be jagged
00:55 < Stephen> DOM augmentation through independent voxel objects which can be moved, even across domains
00:55 < isaacbw> what
00:55 < isaacbw> you crazy
00:55 < Stephen> Build a wall over a site
00:55 < isaacbw> you so cray
00:56 < Stephen> Or build a tiny castle in the dot of an I
00:56 < Stephen> Let people play
00:56 < isaacbw> I think it would be awesome to have a minecraft-like environment with augmented reality
00:56 < isaacbw> so anyone can edit this world which is superimposed over the reality we see normally
00:57 < isaacbw> which you can't see until you put on the goggles
00:57 < darach> firewall transcendant voxel walls - that would be an epidemic anti firewall? that isn't crazy, it's genius ...
00:57 < Stephen> I do that with websites, butit needs moar fun.
00:59 < isaacbw> I remember something like that where you could draw on websites with a browser extension and other people with the extension could see what you drew
00:59 < Stephen> But making microdata/crawl/thesaraus fun objects is hard
00:59 < isaacbw> or maybe it was a bookmarklet
01:00 < darach> add bitcoin - now the voxel is hard cash and can be sent anywhere - suddenly this is useful...
01:00 < isaacbw> your premise is that bitcoins are useful
01:00 < Stephen> This game is more about linking pages more semantically, but a) not losing privacy and b) being fun
01:01 < darach> isaac: a fair cop
01:01 < isaacbw> bitcoins are useful for buying drugs and fake IDs
01:01 < Stephen> They are useful to gpu vendors
01:02 < Stephen> And freenet..back to drugs again
01:02 < jcrugzz> isaacbw: Bitcoin is a deflationary currency whos transport and creation is backed by computing power
01:02 < isaacbw> I know how it works
01:02 < isaacbw> that doesn't make it useful
01:02 < jcrugzz> its not useful yet
01:02 < isaacbw> aside from buying drugs
01:02 < Stephen> Its useful as long as exchanges are around.
01:02 < AAA_awright> Eh? Bitcoin is inflationary by definition
01:03 < jcrugzz> AAA_awright: there is a finite # of bitcoin that will ever be in existence
01:03 < AAA_awright> That's the definition of an economic resource, yes
01:03 < Havvy> AAA_awright: There could theoretically be infinite USD.
01:04 < jcrugzz> Indeed, the lovely fiat money system
01:04 < othiym23> *Treasury Secretary signs the 1/0 dollar bill, reality explodes*
01:04 < Havvy> Hmm...that'd be interesting...
01:04 < AAA_awright> Then it would be a hyperinflationary currency :p Technically there is some limit, you have to store those bits somewhere
01:04 < othiym23> but only in the JavaScriptiverse
01:04 < AAA_awright> Practically you can't inflate very much before the currnecy becomes worthless
01:04 < Havvy> Infinity bills: By law, they can pay for one purchase.
01:05 < othiym23> in the mathiverse, the Treasury Secretary has created a discontinuity and merely wrecked the monetary system
01:05 < jcrugzz> AAA_awright: very true, which is why its interesting that the Fed is printing 40billion a month
01:05 < harth> Hmm, I think I'm going to go with tape instead of mocha b/c it has plan(), but the tap output is hard to read
01:06 < harth> needs colors
01:06 < CoverSlide> the tap output is meant to be easy to read by a computer
01:06 < AAA_awright> Also it's not very meaningful to talk about what the USD *could* be, fact is as of *now* it's merely inflationary
01:06 < harth> CoverSlide: yeah, but I'd like to read it sometimes too
01:06 < othiym23> harth: there's nothing stopping you from using node-tap as a front end for tape
01:06 < AAA_awright> (Well, there is some element of risk, but beyond that)
01:06 < othiym23> it's still not colorful, but it's more readable than the simple tapfile output
01:06 < othiym23> or you could use any of the Perl TAP front-ends
01:07 < othiym23> one of those has to have an angry fruit salad mode
01:07 < Stephen> Wait until all that foreign owned investment income gets dumped from the markets to spending. Life will suck.
01:07 < harth> othiym23: yeah, using node-tap to run from the cli, but don't see any options to make it look more human-readable
01:08 < othiym23> dudes, the simple fact of the matter is that until there's a meaningful alternative hegemon to the US, US currency is even more a fiat currency than most
01:08 < Stephen> Node -huhwuh
01:08 < othiym23> harth: opinions differ on its readability, but the nice thing about using TAP is that it's a cross-language standard, and there's gotta be something out there already that does what you want
01:08 < othiym23> maybe for Ruby or whatever
01:09 < harth> othiym23: ok, thanks
01:09 < Stephen> I really want to use fluidinfo & common-crawl with this.
01:10 < Stephen> If only api requests would allow one to redirect the response.. remote callback like.
01:11 < Stephen> 'I don't want the response, send it here.'
01:13 < othiym23> harth: it looks like tap4j will (probably?) do what you want, although it's got a Maven-generated website
01:13 < othiym23> which is to say a shitty website
01:15 < othiym23> harth: or use tapr https://npmjs.org/package/tapr
01:16 < harth> hm, alright
01:16 < isaacbw> damn UPS guys ignoring the intercom code on my package
01:16 < Stephen> Remote promises, for api to api communication
01:19 < ryanneufeld> hey guys, I'm having some trouble figuring out why npm install is failing. I've got the things I've tried here https://github.com/isaacs/nave
01:20 < ryanneufeld> whoops wrong link
01:20 < ryanneufeld> here: https://gist.github.com/4639411
01:21 < substack> harth: a program to prettify tap output would be pretty great I think
01:21 < ryanneufeld> I'm fairly new to the node world, but I was told this is the place to get some help
01:21 < CoverSlide> sounds like a problem with node-syslog
01:21 < substack> harth: something like node test.js | tap-pretty
01:22 < substack> oh it looks like tapr does that kind of thing
01:22 < substack> neat
01:23 < jtomasrl> is there a good advanced js book (not applied to web browser)
01:25 < ryanneufeld> anyone/
01:25 < ryanneufeld> ?
01:25 < jtomasrl> do u have gyp installed?
01:26 < cjroebuck> Hi. Can anyone recommend distributed queue for use with node.js
01:26 < xk_id_> ryanneufeld: when npm install was giving me an error, I reinstalled npm and it started working again.
01:26 < isaacbw> jtomasrl, it's not a book, but mdn is one of the best javascript resources
01:26 < xk_id_> ryanneufeld: I've also heard other people claiming that some packages might break npm
01:26 < isaacbw> oy
01:26 <@TooTallNate> ryanneufeld: your node-gyp is super old
01:26 < isaacbw> that's like some websites breaking routers
01:27 <@TooTallNate> ryanneufeld: update node, which should update npm & node-gyp
01:27 < jtomasrl> Mozilla Developer Network?
01:27 < owen1> how do i emmit LWES(lwes.org) events from node?
01:27 < xk_id_> jtomasrl: this was recommended to me http://www.amazon.de/Professional-Node-js-Building-Javascript-Scalable/dp/1118185463/ref=sr_1_1?ie=UTF8&qid=1358715179&sr=8-1
01:28 < isaacbw> owen1, do a google search for node lwes
01:28 < Stephen> Consider using git and building the packages from there
01:28 < jtomasrl> xk_id_: did u bought it?
01:28 < CoverSlide> ach du lieber!
01:28 < ryanneufeld> TooTallNate: npm@1.2.3 /usr/local/lib/node_modules/npm & node v0.9.8
01:28 < ryanneufeld> TooTallNate: Does that seem right?
01:28 < xk_id_> jtomasrl: I did not.
01:28 < CoverSlide> it's all germanified
01:28 <@TooTallNate> ryanneufeld: well that's bleeding-edge (read: possibly unstable) new, but ya that should work
01:29 < ryanneufeld> TooTallNate: gyp WARN EACCES user "root" does not have permission to access the dev dir "/root/.node-gyp/0.9.8"
01:29 < isaacbw> wtf
01:29 <@TooTallNate> ryanneufeld: don't use sudo
01:29 < isaacbw> who's doing developent as root
01:29 < isaacbw> development
01:29 < isaacbw> you crazy
01:30 < Stephen> owen1: udp / multicast events...
01:30 < ryanneufeld> isaacbw: I'm not deving as root
01:30 < isaacbw> also, how did you manage to not have access to root/ as root
01:30 < ryanneufeld> isaacbw: hell if i know
01:31 < ryanneufeld> drwx------  32 root     root     4.0K Jan 25 16:59 root
01:31 <@TooTallNate> isaacbw: ryanneufeld: it's because of the way npm downgrades permissions when run as "root"
01:31 < Stephen> lol
01:31 <@TooTallNate> in short… don't run npm as root
01:31 < CoverSlide> never ever
01:31 <@TooTallNate> everrrrrrr
01:31 < CoverSlide> npm config set prefix $HOME
01:32 < gluxon> Is there a better way to run Node applications on port <1001 on LInux boxes?
01:32 < Stephen> owen1: describe your setup
01:32 < gluxon> Without root?
01:33 < isaacbw> you will need root
01:33 < owen1> isaacbw: i could'nt find emiting..
01:33 < isaacbw> it's okay to run servers with root for deployment
01:33 < Stephen> gluxon: reverse proxy?
01:33 < CoverSlide> iptables
01:34 < Stephen> iptables++
01:34 < gluxon> Stephen: Not a bad solution..
01:34 < ryanneufeld> I don't see how me being root is the problem
01:34 < nlf> gluxon: linux?
01:34 < ryanneufeld> I did exactly the same thing on another machine as root
01:34 < ryanneufeld> and it worked fine
01:34 < nlf> authbind is nice if so
01:34 < gluxon> nlf: Linux services require root to bind to a host less than 1001.
01:34 < nlf> not with authbind
01:34 < ryanneufeld> and when I try as non-root
01:34 < ryanneufeld> it still doesn't work
01:34 < CoverSlide> i personally run haproxy on my server and modify accordingly
01:35 < nlf> haproxy works great as a reverse proxy to handle it
01:35 < owen1> Stephen: this is the ruby version - http://pastebin.ca/2307415
01:35 < nlf> that's what we use
01:35 < nlf> little more complicated to setup, if you're just running one process and you need it to bind on a low port, just use authbind
01:36 < Stephen> ryanneufeld: its fine. You just need newer versions. Manually grab new versions from github and build one at a time
01:36 < nlf> or run your server as root and drop privileges in code after it binds
01:36 < nlf> http://nodejs.org/api/process.html#process_process_setuid_id
01:36 < ryanneufeld> Stephen: what I'm trying to say, is that I have done the exact same thing (same versions) on two other servers and it worked fine
01:37 < ryanneufeld> but it's okay, I'll worry about it on monday
01:37 < ryanneufeld> thanks guys
01:38 < Stephen> owen1: google commonjs lwes, your name is everywhere
01:38 < mscdex> ok, so it seems that so far with the fairly simple regexps, node-pcre with or without a JIT-compiled pattern is faster than the built-in v8 regex
01:38 < owen1> Stephen: will do!
01:39 < mscdex> s/simple regexps/simple regexps i've tried/
01:40 < owen1> Stephen: are u sure? i just googled for commonjs and lwes and nothing insightful came up
01:42 < isaacbw> no one here knows, you're just asking people to do your research for you
01:43 < phonebook_> can someone help me understand this: http://i.troll.ws/8cc3d76a.png
01:43 < owen1> isaacbw: sadness. i don't understad LWES or datagrams
01:43 < isaacbw> then why do you want to use it
01:44 < owen1> isaacbw: i need to send some data about the perfarmance of each of my request
01:44 < isaacbw> and what's wrong with HTTP
01:44 < owen1> a fet strings and some ints
01:44 < isaacbw> or even TCP
01:44 < phonebook_> (message[0] & 0x80) is comparing the first number in the buffer to ...128?
01:44 < owen1> isaacbw: we use LWES. i can't chose it.
01:44 < isaacbw> ah
01:45 < CoverSlide> >> 0x81 & 0x80
01:45 < purr> CoverSlide: (number) 128
01:45 < CoverSlide> phonebook_: what part are you confused about?
01:47 < phonebook_> well from what i have read it is checking that index in the buffer and comparing it to 0x80. if they are the same it returns !0
01:48 < phonebook_> so it is looking at the first digit in the buffer?
01:48 < CoverSlide> it's looking at the first byte
01:48 < phonebook_> which is 81
01:49 < CoverSlide> and applying a bitwise AND to check if the bit at 0x80 is set
01:49 < CoverSlide> >> (0x80).toString(2)
01:49 < purr> CoverSlide: (string) '10000000'
01:50 < CoverSlide> so that would be the highest bit in the byte
01:50 < phonebook_> ohhhhh (sort of)
01:51 < CoverSlide> the next couple lines check the next 3 bits
01:52 < CoverSlide> opcoed checks the next 4 bits, which should return 1
01:52 < isaacbw> does communicating across ports on the same domain count as CORS
01:52 < Havvy> Can we use Sets and Dictionaries in Node yet?
01:53 <@mbalho> {} yo
01:53 < CoverSlide> Havvy: --harmony
01:53 < CoverSlide> s/Dictionaries/Maps
01:53 < Havvy> mbalho: Those are objects, theoretically.
01:53 < CoverSlide> isaacbw: protocol, port, and domain must match
01:54 <@mbalho> Havvy: what do sets and dictionaries do? are they the same thing?
01:54 < Havvy> And yes, I can use them for Maps and Sets. Doesn't mean I don't want to use the ES6 features.
01:54 < phonebook_> so it views them both in binary and if any of the digits, in the same place, are both 1 the result is !0?
01:55 < Havvy> http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets
01:55 < azylman> You can definitely think of an object as a dictionary
01:55 < azylman> Got the same run time performance, as far as I know
01:56 < phonebook_> okay sorry
01:56 < phonebook_> the bit at ox80. so its looking at 0x80 in message[0] to see if it is 1?!?
01:57 < phonebook_> *0x80
01:57 < Havvy> azylman: Sure. But maps are more self-documenting.
01:57 < azylman> In terms of function names vs access?
01:58 < azylman> map[key] = val vs map.set(key, val) and map.get(key)
01:58 < Havvy> Yes.
01:58 < azylman> That's like... the worst part of maps in java
01:58 < CoverSlide> phonebook_: yes
01:59 <@konobi> phonebook_: lookup bitmaps and bitmasking
02:00 < azylman> I came to javascript from a java background and I was so happy to get away from get and set
02:01 < azylman> But I'm excited for sets
02:01 < azylman> I feel gross every time I simulate a set with a map
02:01 < phonebook_> i am. 
02:02 < Havvy> azylman: There's also the fact that once iteration comes through properly, I won't have to filter out enumerable properties on the prototype.
02:03 < azylman> Havvy: Yeah, there's definitely lots of nice things about ES6. But I don't think Map is one of them...
02:03 < azylman> Seems like an unneccessary abstraction on objects
02:03 < ckknight> it most certainly is not
02:03 < ckknight> how do you have a map on non-string to whatever?
02:03 < ckknight> of*
02:04 < ckknight> you can't just using Object
02:04 < ckknight> that's where the nicety is
02:04 < ckknight> one could see Object as a very tight subset of Map
02:04 < ckknight> it's fine if you only need string keys
02:04 < ckknight> but not everyone does
02:04 < azylman> I feel more like that's something that should be fixed on objects
02:04 < azylman> Rather than a reason to add a new data structure
02:04 < Havvy> azylman: You'd break backwards compatability hard if you did that.
02:05 < azylman> Adding features doesn't break backwards compatibility
02:05 < ckknight> yes, it can.
02:05 < ckknight> o[someDate] = blah
02:05 < ckknight> changing that fundamental meaning would break the internet
02:05 < azylman> I guess I can't envision some time where someone expects o[someDate] and o[otherDate] to map to the same thing
02:06 < ckknight> I expect o[someDate] and o[someDate.toString()] to reference the same thing.
02:06 < azylman> That's reasonable, I guess
02:06 < azylman> I don't write code that way
02:06 < azylman> But you can
02:06 < ckknight> nor do I
02:06 < ckknight> but it would break the internet.
02:07 < ckknight> thus, changing Object in such a fundamental way is unfeasible
02:07 < azylman> I'm not arguing anymore, you're right
02:07 < azylman> That doesn't mean I have to like the syntax
02:07 < ckknight> fair enough.
02:08 < azylman> Seems like there should be some way to just keep the same syntax as what objects use
02:08 < ckknight> and have map[obj] = value?
02:08 < ckknight> that'd be nice.
02:08 < azylman> Yeah
02:08 < ckknight> I'd rather have o["a"] and o.a be separate operations, a la python
02:08 < azylman> I don't know python - what's the difference?
02:09 < CoverSlide> o would be a class instance
02:09 < ckknight> they're just different operators. One deals with items on the object, one deals with attributes
02:09 < CoverSlide> and a would be a method on that instance
02:09 < ckknight> in JavaScript, they're both called properties
02:09 < azylman> Ah, I see
02:10 < azylman> So o and o aren't actually the same type there
02:10 < CoverSlide> o['a'] is accessing a dictionary key if o was a dictionaty
02:10 < ckknight> they are.
02:10 < azylman> One is a class and one is a dict
02:10 < ckknight> dict.items() vs dict["a"]
02:10 < AAA_awright> Yeah python has some pretty nasty inconstistencies
02:10 < ckknight> for instance
02:10 < ckknight> AAA_awright: how is that at all inconsistent?
02:10 < CoverSlide> I wouldn't say dictionary syntax vs object property syntax inconsistent
02:10 < AAA_awright> Well how is one supposed to access an arbitrary method?
02:10 < CoverSlide> they're two different things
02:10 < AAA_awright> dict['items']
02:11 < ckknight> AAA_awright: getattr(dict, "items")
02:11 < AAA_awright> Fair enough
02:11 < ckknight> it's a pretty atypical thing to do, though
02:11 < ckknight> unlike JavaScript
02:11 < AAA_awright> And it's confused if something is supposed to be a function or a method
02:11 < ckknight> because it's available, it's common
02:11 < AAA_awright> like how are you supposed to get the length of a string?
02:11 < ckknight> AAA_awright: len(s) in python
02:12 < AAA_awright> And how are you supposed to get the length of a list/vector/array?
02:12 < ckknight> len(array)
02:12 < AAA_awright> Yeah. Oops.
02:12 < AAA_awright> And so on.
02:12 < ckknight> it just calls array.__len__()
02:12 < ckknight> whatever array might be, a string, list, dict, whatever
02:12 < AAA_awright> Well then you have a domain on your len function
02:13 < AAA_awright> Which needs to be checked and can produce an error, and so on
02:13 < ckknight> len works on any object that implements __len__
02:13 < AAA_awright> The point is you should be calling array.len()
02:13 < AAA_awright> Or rather, array.length
02:13 < ckknight> that's more of a stylistic difference.
02:13 < AAA_awright> But by that time you may as well be using ECMAScript
02:14 < ckknight> and .length is arguably a special property
02:14 < ckknight> nothing else really has it
02:14 < ckknight> map and other such collections use .size()
02:14 <@konobi> ckknight: feel free to take your arguments up with brendan and the committee
02:14 < CoverSlide> >> 'what?'.length
02:14 < purr> CoverSlide: (number) 5
02:14 < AAA_awright> At least ECMAScript knows what it is, python can't figure out when it wants to be OO and when it wants to have global-namespace functions
02:15 < ckknight> konobi: I'm not positing a solution.
02:15 < AAA_awright> At least they fixed print()
02:15 < ckknight> AAA_awright: oh yeah, I definitely don't like the global function mania in python
02:15 < CoverSlide> in the version that noone uses
02:15 < ckknight> I much prefer OO-style methods
02:16 < ckknight> a la Ruby
02:16 < CoverSlide> agreed
02:16 < isaacbw> woo, I feel clever
02:16 < azylman> So if I said I liked Java
02:16 < azylman> Would I be kicked out?
02:16 < AAA_awright> Ruby is still a bit odd too, I haven't figured out its object model... ECMAScript's prototype system is so simple in comparison
02:16 < ckknight> isaacbw: good for you
02:16 < AAA_awright> azylman: DIE
02:17 < CoverSlide> Java isn't bad
02:17 < ckknight> azylman: that's like saying you like Ham at a Hamburger convention.
02:17 < isaacbw> ckknight, do I sense insincerity
02:17 < CoverSlide> It's just a bitch to use
02:17 < AAA_awright> http://static.springsource.org/spring/docs/2.5.x/api/org/springframework/aop/framework/AbstractSingletonProxyFactoryBean.html
02:17 < azylman> A bitch to use how?
02:17 < AAA_awright> "Convenient proxy factory bean superclass for proxy factory beans that create only singletons."
02:17 < ckknight> isaacbw: no, I like when I feel clever, too
02:17 < AAA_awright> Everything that is wrong with Java, in one convienent class
02:17 < azylman> That's not a java problem, that's a spring problem
02:17 < azylman> lol
02:17 < ckknight> let's all build factory factory factories
02:17 < AAA_awright> That's a Java problem
02:17 < ckknight> they'll make everything
02:17 < janmower_> now don't besmirch java with spring
02:17 < azylman> How is that a java problem?
02:18 < AAA_awright> You shouldn't need factory singleton factories
02:18 < janmower_> that's like saying python sucks because twisted is hard to figure out
02:18 < azylman> That's like me posting some shitty ass js codebase I wrote and being like "Look! Look what is wron gwith js!"
02:18 <@konobi> it's a java culture issue... job security
02:18 <@konobi> =0P
02:18 < azylman> I never needed a factory singleton factory when I wrote Java
02:18 < azylman> And I don't know anyone who did
02:18 < ckknight> has Java been able to get its head out of its ass about lambdas yet?
02:18 < AAA_awright> azylman: I'm further asserting that you can't program in Java without some of those patterns, so yes, it does apply to Java in general
02:19 < CoverSlide> the super-duper strict typing makes exensibility difficult, the module system is fucked, writing maven poms and and buld.xml a bitch to do by hand
02:19 < AAA_awright> But ES has its share of horrible coders too
02:19 < AAA_awright> Well I like static typing
02:19 < ckknight> CoverSlide: if XML isn't working like you want it to, just use more. It's like violence in that way.
02:19 < azylman> AAA_awright: Do you have any evidence for that assertion?
02:20 < CoverSlide> static typing is fine, but no traits or mixins?
02:20 < azylman> Again, I never used a Factory Singleton Factory pattern and I wrote a shit ton of Java
02:20 < AAA_awright> azylman: How does one write a Hello World in Java?
02:20 <@konobi> touche
02:20 < CoverSlide> so I have to make an interface that has no functionality, and then copy/paste things that have the same method name that basically do the same thing
02:20 < azylman> http://introcs.cs.princeton.edu/java/11hello/HelloWorld.java.html
02:21 < azylman> There you go.
02:21 < azylman> That's Hello World in Java
02:21 <@konobi> console.log("hello world")
02:21 < CoverSlide> ok, let's get into maven and ant now
02:21 < isaacbw> do subdomains count as CORS?
02:21 < azylman> I'm not disputing Java has more boilerplate, lol
02:21 < sosa> (format t "hello world")
02:22 < azylman> But AAA_awright is claiming that you can't write java code without having a Factory Singleton Factory Proxy in your code base
02:22 < CoverSlide> basically impossible to use Java without a massive IDE
02:22 < AAA_awright> Not any code, but some things require it or encourage it
02:22 < CoverSlide> or you can use curl and do all types of other dumb shit that any other language has figured out from a command line
02:23 < azylman> Singletons, yes.
02:23 < azylman> Factories, yes
02:23 < CoverSlide> puts "hello world"
02:23 < azylman> But not a Singleton Factory Proxy Factory
02:23 < CoverSlide> ruby wins
02:23 < ricardobeat> what encoding is used when you send buffer data over a socket?
02:23 < azylman> And I would argue that javascript uses both singletons and factories as well
02:23 < CoverSlide> ricardobeat: it's raw tcp
02:23 < azylman> You just don't call them that
02:23 <@konobi> ricardobeat: it's binary
02:23 < zomg> CoverSlide: PHP wins because you can just have plain hello world in that ;)
02:24 < CoverSlide> haha true
02:24 < sosa> true
02:24 <@konobi> but that's also like saying node print_args.js "hello world"
02:28 < ricardobeat> CoverSlide: of course :/
02:30 < styol> Anyone using a multiple server deployment strategy that they love? I've been looking at a couple today and am curious if there are some that I haven't found yet or if I need to stop trying to find node specific deployment strategies. Any feedback of any sort would rox.
02:34 < phonebook_> :) pretty awesome. just learned how bitwise/bitmasks work. he's applying the bitmask to the first 32 bits, one bit at a time for the first 4 and then 4 bits for the opcode, etc. as outline in this doc http://tools.ietf.org/html/rfc6455#page-28 thx guys. i had no clue where to even start
02:34 < phonebook_> somewhat shameful i didn't know any of that
02:35 < phonebook_> ...would that diagram be a... packet?
02:36 < phonebook_> or just a structure that is part of the protocol and can arrive in many packets?
02:37 <@konobi> it's just part of the protocol
02:42 < mscdex> phonebook_: are you writing your own websocket module?
02:43 < phonebook_> yes sir. coming along (slowly)
02:44 < Havvy> I bet a websocket module would be harder than an ircsocket module.
02:45 <@konobi> o.O
02:52 < mscdex> phonebook_: did you try any of the existing websocket modules?
02:53 <@konobi> phonebook_: for example, https://npmjs.org/package/ws
02:55 < CoverSlide> there's also websocket-server, and websocket for pure JS implementations
03:05 < min|dvir|us> Do people usually check node_modules in
03:05 < min|dvir|us> ?
03:05 < azylman> No
03:09 < isaacbw> wtf
03:10 < isaacbw> I am sending out Access-Control-Allow-Origin headers from node.js, but when I investigate the headers that were returned in Chrome, it's Accesse-Control-Allow-Origin
03:10 < isaacbw> a random e was added
03:10 < isaacbw> what the actual fuck
03:10 < ckknight> isaacbw: just turn that around and you've got ftw
03:11 < Havvy> isaacs: Is there a typo in your code?
03:11 < isaacbw> Havvy, no
03:11 < isaacbw> and wrong isaac
03:12 < ckknight> maybe isaacs has a typo in his code affecting yours
03:12 < ckknight> it's the only possible reason
03:12 < isaacbw> it must be
03:12 < isaacbw> grep -s 'Accesse-Control' `find .` in my project is giving me nothing
03:12 < isaacbw> oh wait
03:13 < isaacbw> thank god
03:13 < isaacbw> I was about to go mad. It was in my nginx config
03:13 <@konobi> grep -R dood
03:13 < azylman> lol
03:15 < isaacbw> finally, holy fuck was that an ordeal
03:15 < isaacbw> for some reason my node headers weren't making it out of node
03:19 < SomeoneWeird> lol
03:19 < jtomasrl> should i check json client side or server side before inserting to a db?
03:19 < ckknight> never trust the client.
03:19 < SomeoneWeird> both
03:19 < mscdex> both
03:19 < ckknight> but yes, both
03:19 < ckknight> definitely server-side, no matter what
03:20 < ckknight> if you do it client-side as well, that's just good karma
03:20 < jtomasrl> so i check every allowed key
03:24 < mscdex> checking client-side helps prevent a trip to the server
03:25 < mscdex> jtomasrl: probably, perhaps also validate the data according to some expected format
03:26 < jtomasrl> mscdex: is there a good example for this? sounds cpu intensive
03:27 < isaacbw> it depends on your application
03:29 < jtomasrl> i need to validate presence, just a loop cmparing keys with an array?
03:29 < azylman> If it's a user filling out a form, I'd do form validation client-side and then do what you said server-side
03:30 < isaacbw> are IMAP UIDs unique to a folder?
03:30 < isaacbw> or an account?
03:30 < isaacbw> mm, shitty chili gets better in the fridge
03:33 < isaacbw> yea, it's unique to the folder
03:33 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
03:39 < hackygolucky> evening. Anyone here attend the NodeConf Summer Camp last year?
03:43 < anoemi> hackygolucky: hey, i did. whats up?
03:45 < hackygolucky> what'd you think of it? I'm trying to make the best use of my time this year and wondering if that's a good place to focus it.
03:45 < hackygolucky> conference-wise, that is.
03:45 < hackygolucky> or un-conference.
03:46 < anoemi> i thought it was incredible. depends on what you're looking for of course.
03:46 < anoemi> have you been to nodeconf?
03:46 < hackygolucky> I have not.
03:46 < nickkthequick> is it in the same place every year?
03:46 < anoemi> hackygolucky: how about JSConf?
03:46 < LouisT> good evening
03:47 < hackygolucky> anoemi: I have not been to any conferences at all. I've looked at most of these and wondering, if I had to pick one, which should I go to?
03:48 < anoemi> if you have any serious interest in making node a big focus for yourself (or if it is already) you should go
03:48 < hackygolucky> I had considered JSConf but the tickets sold out before I had even woken up that day.
03:48 < anoemi> hackygolucky: ha yeah, those things move fast
03:50 < hackygolucky> anoemi: was there a lot of hacking going on or mostly talking?
03:50 < anoemi> bottom line, you're going to get to hear talks from the people who know this tech better than anyone in the world and are driving it forward. then you're going to get blind drunk with them.
03:50 < hackygolucky> oooh.
03:50 < hackygolucky> sounds like a super nerdy good time.
03:50 < anoemi> and eat really good food. and make friends. if node is your thing, it really doesnt get better than this.
03:51 < hackygolucky> very cool. Thanks anoemi
03:51 < anoemi> hackygolucky: yw :)
03:58 < isaacbw> shit
03:59 < isaacbw> I opened too many IMAP connections with gmail and the timeout period is over half an hour
03:59 < isaacbw> lol
03:59 < isaacbw> nevermind I'm stupid
04:00 < LouisT> Is there a way to truncate a file with a WriteStream each time you write to it?
04:00 < isaacbw> truncate?
04:01 < LouisT> clear it
04:02 < isaacbw> there's a write mode for that
04:02 < LouisT> Such as w+ when you first create the WriteStream. ('w+' - Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).)
04:02 < isaacbw> truncated doesn't exactly mean clear
04:07 < aeosynth> a chat room is the 'hello world' of nodejs, but i'm having trouble finding a chatroom-as-a-service. disqus is real time, but i have to manually click 'show new comment'. does a real time embedded chat app exist (for free)?
04:09 < LouisT> aeosynth: there have been many made if I understand your question.. I assume you want something using websockets?
04:10 < aeosynth> that'd be nice, but as long as i'm not running the backend i don't care
04:11 < isaacbw> I think a simple server is the 'hello world' of nodejs
04:11 < AAA_awright> You'd think, right?
04:11 < AAA_awright> I'm working on exactly that actually
04:11 < isaacbw> working on what
04:11 < Havvy> isaacbw: My first NodeJS project was an IRC bot.
04:11 < AAA_awright> Chatroom as a service
04:11 < isaacbw> IRC!
04:11 < AAA_awright> It is IRC
04:11 < isaacbw> you're making IRC
04:12 < isaacbw> waht
04:12 < aeosynth> irc is too complicated for normal users
04:12 < isaacbw> normal users will use facebook
04:12 < LouisT> what!?
04:12 < Raynos> aeosynth: I made some free p2p backend as a service things
04:12 < isaacbw> the kinds of people who want to use IRC will be able to use it
04:12 < LouisT> how is IRC too complicated?
04:12 < aeosynth> if disqus didn't force me to click 'show new comments' i'd use them
04:12 < Raynos> You can trivially build chat on top of them
04:12 < Raynos> https://github.com/Raynos/painter/tree/master/examples/chat <-
04:12 < Raynos> Go crazy!
04:13 < aeosynth> i can trivially build a chat app on my own
04:13 < aeosynth> i want something like disqus where i don't have to manage it
04:13 < Raynos> There are a bunch of them out there
04:13 < Raynos> good luck finding them :D
04:13 < aeosynth> link?
04:14 < aeosynth> i think livefyre might be it
04:14 < onr> disqus uses nginx as app framework
04:14 < LouisT> You could find a chat app you have to run yourself, but throw it up on some free node cloud host or something.. aside from that, you'll have to search a bit.
04:20 < isaacbw> component does not have requested interface
04:20 < isaacbw> that's a new one
04:22 < MI6> joyent/libuv: piscisaureus created branch win-ipv6-fixes - http://git.io/RHqeVw
04:31 < min|dvir|us> What's the best promises/deferreds lib for Node?
04:39 < min|dvir|us> What is the right tool for the job if I want to see which callback executes first?
04:40 < mscdex> isaacbw: UIDs are unique within a single mailbox
04:41 < aeosynth> min|dvir|us: console.log?
04:41 < mscdex> min|dvir|us: for EventEmitters you can get a list of the current listeners, they're executed from first to last iirc
04:41 < min|dvir|us> aeosynth: programmatically I mean.
04:41 < min|dvir|us> OK, here's my goal.
04:42 < min|dvir|us> I want to do something, but if it takes to long, I want it to time out and not do anything.
04:42 < min|dvir|us> *too
04:42 < aeosynth> setTimeout?
04:43 < min|dvir|us> Right, I'll use setTimeout, but I was wondering if there's a tool that will allow me to pass in two callbacks and have it execute just the first.
04:43 < min|dvir|us> Err, two functions that accept callbacks.
04:44 < min|dvir|us> Are promises/deferreds the right solution?
04:44 < min|dvir|us> What's the de-facto promises lib?
04:44 < ashnur> q
04:45 < aeosynth> w/ promises you can have an error callback that only executes your first cb
04:45 < TehShrike> blah, who wants to criticize my internet resume? http://resume.joshduff.com/
04:45 < aeosynth> you would have to manually make that error cb
04:45 < ashnur> https://github.com/kriskowal/q
04:45 < iwalkbarefoot> anyone ever use wswd.net hosting?
04:45 < min|dvir|us> aeosynth: that's what I'm thinking.
04:46 < min|dvir|us> I just don't know what promises lib to use.
04:46 < min|dvir|us> I've never heard of Q before you, ashnur.
04:46 < mscdex> TehShrike: is it being rendered and served by a node process?
04:46 < aeosynth> you don't really need promises. you can do everything without them
04:46 < min|dvir|us> Sure, but I want my code to be clean.
04:46 < ashnur> min|dvir|us: you never heard of promises before me :P
04:47 < TehShrike> mscdex: naw, it's just static files >_<
04:47 < mscdex> well, then it needs fixing :-D
04:47 < TehShrike> mscdex: if you can give me a good excuse to back it with node, I'm all for it!
04:47 < TehShrike> Also, note the "fork me" button at the top ;-P
04:47 < min|dvir|us> ashnur: that's not true at all.
04:48 < min|dvir|us> What's the de-facto promises lib?
04:48 < ashnur> Q!
04:48 < min|dvir|us> Can anyone vouch for Q?
04:48 < ashnur> no one uses promises
04:48 < min|dvir|us> ...
04:48 < min|dvir|us> Which explains why there are a million promises libraries.
04:49 < min|dvir|us> Also explains why you are so familiar with them.
04:49 < aeosynth> angularjs uses promises
04:49 < ashnur> I've spen the past 5 weeks reading and learning promises
04:49 < ashnur> spent*
04:50 < phonebook_> mscdex, yes. a couple. for me part of learning node is getting to more "raw" code without a lot of bloat. like go to node and the first thing everyone says is to install a bunch of add ons. well i want to learn some stuff and i want my junk to be clean even if it only serves my little purpose. have learned a lot not by not going with socket.io
04:50 < aeosynth> and what have you learned in those 5 weeks
04:50 < TehShrike> phonebook_: addons?  You mean modules?
04:50 < isaacbw> socket.io will be a better option in the end
04:51 < phonebook_> sry modules
04:51 < isaacbw> it's always better to use proven solutions than to roll your own
04:51 < aeosynth> any word on socket.io 1.0?
04:51 < min|dvir|us> So what's the de-facto promises lib?
04:52 < ashnur> here isn't anything better than q, only that deferred from medikoo is faster.
04:52 < min|dvir|us> I don't care what's faster.
04:52 < min|dvir|us> I want to know what's the most popular.
04:53 < jtomasrl> why "ab -n 2 -c 1 http://127.0.0.1:4000/" works well some times but then i get 100% CPU and 2Gb of ram for a res.send("hi")
04:53 < ashnur> no one uses promises :)
04:53 < min|dvir|us> Bullshit.
04:53 < ashnur> i am not joking,
04:53 < min|dvir|us> I use them.
04:53 < min|dvir|us> You use them.
04:53 < ashnur> stay here for a week and ask it in every hour and you will not get 15 more people.
04:53 < min|dvir|us> Want to bet?
04:54 < ashnur> no
04:54 < min|dvir|us> Because you'd lose.
04:54 < ashnur> whatever
04:56 < jayz_> You have to be careful with promises in node.  Make sure you understand what is happening.  THe way V8's engine interprets the code, it isn't able to optimize anything within a promise.  Basically treats it as a try/catch.  End story, be really careful how much you put "into" your promise. 
04:57 < min|dvir|us> I want to execute a function, passing a callback, but if the callback hasn't executed within a certain amount of time, I want to do something else.
04:58 < phonebook_> promises are a jquery thing though. not native js
04:58 < min|dvir|us> Promises are abstract.
04:59 < min|dvir|us> So, any promise lib suggestions?
04:59 < min|dvir|us> What lib do most people use for promises?
04:59 < TehShrike> I've never used promises :-x
04:59 < TheAceOfHearts> I don't use promises 
04:59 < min|dvir|us> Well then I'm not asking you. :P
04:59 < TehShrike> If what you've stated above is your goal, my instinct would be to make a quick module that does that
05:00 < min|dvir|us> TehShrike: I can do it very easily with very little code, but I'd be faking a promise.
05:00 < TehShrike> Maybe you don't need real promises... maybe a wink and a nod would be good enough?
05:00 < min|dvir|us> I don't settle for that stuff.
05:00 < ashnur> :D :D
05:00 < TehShrike> :-)
05:00 < Benvie> TehShrike: is your name in reference to the bird or the metal monster
05:01 < min|dvir|us> Benvie: you have to have a promise lib recommendation.
05:01 < TehShrike> Benvie: the bird!
05:01 < ashnur> :))
05:01 < Benvie> there's only like two main promise libs out there. Admitedly I just roll my own as I need
05:01 < TehShrike> Benvie: common guesses also include the ship from Tribes, very few people guess the bird :-)
05:01 < min|dvir|us> Benvie: what's the most popular one?
05:01 < Benvie> probably Q
05:02 < min|dvir|us> Awesome!
05:02 < ashnur> yeah. don't believe me.
05:02 < min|dvir|us> Forgive me if I take Benvie's word over yours.
05:02 < Benvie> that doesn't mean it's the best
05:02 < min|dvir|us> Benvie: it means it's the most supported, though.
05:02 < Benvie> I can't say, lack of experience
05:02 < yangchenyun> Hi, any suggestion on a good library which has a database interface with file storage.
05:02 < Benvie> but I'm fairly sure it's the most used
05:02 < Benvie> by a lot
05:02 < ashnur> jquery's implementation might be used even more :D
05:03 < SomeoneWeird> yangchenyun, leveldb (i think) or sqlite
05:03 < Benvie> well yeah but you have to then use all of jquery which is often not desirable
05:03 < Benvie> especially if you're looking for something to use in node
05:03 < Benvie> in which case you have no use for most of jquery
05:03 < ashnur> :D
05:05 < phonebook_> min|dvir|us, you can use jquery in node! if you write a scraper with anything else just stop. imo
05:05 < ashnur> i am wondering if Crockford will respond one more time. I asked him about his crazy code, and he wrote back "What?" so I set up this http://ashnur.github.com/question-about-vow.js/ and sent it to him.
05:05 < ashnur> that old bastard
05:05 < ashnur> i really hope he has a good explanation for this
05:07 < yangchenyun> @SomeoneWeird,  is there anything lighter? Such like using a JSON file as storage, but has an query interface.
05:07 < min|dvir|us> phonebook_: ?
05:07 < yangchenyun> SomeoneWeird,  is there anything lighter? Such like using a JSON file as storage, but has an query interface.
05:08 < phonebook_> they have a cuda module for node. theoretically speed up processing database queries ~30x by using the gpu! http://pbbakkum.com/db/bakkum.sql.db.gpu.pdf | https://github.com/kashif/node-cuda ...except nvidea is for posers
05:13 < phonebook_> min|dvir|us many people use jsdom for it. domino + zeptune worked for me
05:14 < min|dvir|us> For what?
05:14 < phonebook_> use jquery inside node
05:14 < min|dvir|us> OK?
05:14 < phonebook_> invaluable if parsing html or xml
05:26 < min|dvir|us> What's the best way to split a string by any newline?
05:26 < SomeoneWeird> .split(/\r?\n/g) ?
05:27 < min|dvir|us> Doesn't include \r alone, but I could do \n?.
05:27 < min|dvir|us> Wait, no I couldn't.
05:28 < SomeoneWeird> that will split by \r\n or \n
05:29 < SomeoneWeird> >> "ha\r\nha".split(/\r?\n/g)
05:29 < purr> SomeoneWeird: (object) ['ha', 'ha']
05:29 < SomeoneWeird> >> "ha\nha".split(/\r?\n/g)
05:29 < purr> SomeoneWeird: (object) ['ha', 'ha']
05:44 < jtomasrl> is this a good way to store a mongo connection? https://gist.github.com/4640425
05:47 < cloudbender> Does yangchenyung show up here often ?
05:55 < mscdex> ugh gotta love php's bugtracker. they don't allow you submit a bug report for anything older than php 5.3.21 even if it's a bug in the most recent version of a pecl package that supports the older php version
05:59 < SomeoneWeird> php
05:59 < SomeoneWeird> lold
05:59 < AAA_awright> mscdex: What's the package?
06:04 < mscdex> AAA_awright: APC
06:04 < mscdex> newest version doesn't compile at all on php 5.1
06:04 < mscdex> despite the pecl page saying 5.1 or newer
06:04 < mscdex> :S
06:05 < SomeoneWeird> update php then
06:05 < SomeoneWeird> lol
06:07 < mscdex> SomeoneWeird: it's CentOS
06:12 < switz> hey, can anyone help me with passportjs? I keep getting Error: local authentication strategy requires a verify function
06:13 < switz> mostly following this code: https://github.com/madhums/nodejs-express-mongoose-demo/blob/master/config/passport.js
06:14 < switz> i think I got it
06:31 < AAA_awright> mscdex: I'm using APC on PHP 5/4
06:31 < AAA_awright> *5.4
06:32 < mscdex> yeah, i know it works on 5.4
06:32 < AAA_awright> So then I don't see the problem?
06:32 < mscdex> this system in question is running CentOS 5 and PHP 5.1.6
06:33 < AAA_awright> >_>
06:33 < AAA_awright> Definitely time to upgrade PHP
06:34 < mscdex> i'd love to, but there's such a huge php codebase and i don't keep track of major breakage things that happened between 5.1 and something like 5.4
06:34 < mscdex> i'll just stick to the previous apc version
06:34 < mscdex> meh
06:36 < mscdex> i'm hoping to eventually replace all this php with node anyway in the not-so-distant-future
06:36 < AAA_awright> PHP is pretty good about not breaking things, to the point that it's a serious problem
06:36 < mscdex> well, there's changes in behavior
06:36 < mscdex> that can bite you
06:36 < AAA_awright> I mean like, what have they broken? You can't use variables in break statements anymore?
06:36 < AAA_awright> Who ever did that
06:36  * AAA_awright waits for someone to raise their hand
06:38 < AtomicDog> What does anyone think would be a good database solution for a gambling game website?
06:45 < cloudbender> g'nite
07:08 < min|dvir|us> This IRC lib is fantastic.
07:22 <@konobi> isaacs: ping
08:10 < rootcoma> how do I make a head request with nodejs? I dont want to respond to head requests.. I want to make head reqeusts to other servrs
08:14 < mscdex> rootcoma: set `method` to 'head' in request()
08:14 < rootcoma> thanks mscdex
09:46 < squeakytoy> ok, time for a stand up meeting. I'll start. Is is stupid to create an ordinarie (nothing special) website with node.js, or is it really better to use node.js for special cases?
09:46 < min|dvir|us> squeakytoy: 'ordinary'?
09:46 < squeakytoy> typicle
09:46 < min|dvir|us> I know what 'ordinary' means, but not when you say it.
09:47 < squeakytoy> anyone else want to comment?
09:48 < min|dvir|us> squeakytoy: how long is an acceptable time after nobody answers that I can insult you?
09:48 < squeakytoy> min|dvir|us, huh? what is your problem?
09:48 < min|dvir|us> squeakytoy: what's yours?
09:49 < squeakytoy> why are you trolling my question? stop it
09:49 < geNAZt> the problem is that you cant decide for or against any language if u dont know the full case
09:49 < min|dvir|us> I was trying to help and then you said something really dumb.
09:50 < squeakytoy> min|dvir|us, i dont even continue discussion with you now. please just respect that.
09:50 < min|dvir|us> I can say whatever I want to you, squeakytoy.
09:50 < squeakytoy> min|dvir|us, even if i phrased myself "dumb", you started to act like a jerk.
09:50 < min|dvir|us> No, I didn't. You did.
09:51 < squeakytoy> you seriously want to start an argument here?
09:51 < min|dvir|us> Sure.
09:52 < squeakytoy> geNAZt, i was more thinking about if there are any pros or cons on creating websites on node.js, or if its really just suited for fast-paced short-data websites.
09:53 < geNAZt> for pure static websites no node.js, for a normal host service ( like free webhosting or managed hosting ) php, for everything else you can try to use node
09:53 < min|dvir|us> Yeah, PHP is always a good idea. Not.
09:53 < geNAZt> lol
09:53 < geNAZt> read the whole sentence
09:53 < min|dvir|us> There is no case where PHP is a good solution.
09:53 < geNAZt> for u maybe
09:54 < min|dvir|us> geNAZt: for you too. You'll come around once you have some years under your belt.
09:55 < squeakytoy> min|dvir|us, im getting the feeling you are not really popular here
09:55 < geNAZt> min|dvir|us: whats your problem ? i listed some use cases on which you can depend on. Much managed or free hosting services have php as single dynamic language, it isnt that bad
09:55 < geNAZt> so stop trolling around
09:56 < min|dvir|us> squeakytoy: I really care what people here think about me.
09:56 < min|dvir|us> Like so much.
09:56 < min|dvir|us> Please like me.
09:56 < min|dvir|us> geNAZt: if I gave you a list of things that are utterly broken with PHP, you'd argue with me.
09:57 < geNAZt> if i show you that big applications written in php run without a failure and it can scale good what would you say ?
09:57 < geNAZt> oh yes wait: it bullshit -.-
09:57 < min|dvir|us> I would say I already know.
09:57 < squeakytoy> min|dvir|us, "I am an ambitious, highly proficient self-taught developer, and I make mission-critical product. If I sound like the kind of guy with whom you'd like to work, tell me!" -- No, you sound like a jerk. You have to change your website.
09:58 < min|dvir|us> squeakytoy: you're hurting my feelings. :(
09:58 < min|dvir|us> :'(
09:59 < geNAZt> if php would be so shitty why do much sites use it ? why do companies search php developer ? why do managed hosting do php dynamic and not ruby or python or node ? the community around php is big, much good software like symfony2 or wordpress, cakePHP and so on
09:59 < min|dvir|us> That is a great question, geNAZt.
09:59 < geNAZt> the only thing php isnt design to do is persitent connection
09:59 < squeakytoy> min|dvir|us, You do know that what you do here, will reflect upon http://transparensee.com/ - the company you currently work at
09:59 < min|dvir|us> PHP is basically the first language that made web easy.
10:00 < geNAZt> lol that is wrong
10:00 < crabtree> oh yay php discussion
10:00 < smango> http://me.veekun.com/blog/2012/04/09/php-a-fractal-of-bad-design/
10:00 < min|dvir|us> Then everyone adopted it.
10:00 < smango> :D
10:00 < min|dvir|us> smango: that is the de-facto article.
10:00 < min|dvir|us> Everyone who likes PHP should read that.
10:00 < crabtree> i don't agree with everyone on it
10:01 < crabtree> but i don't think php is a good language at all
10:01 < crabtree> :P
10:01 < min|dvir|us> It's the laughing stock of the programming community.
10:01 < geNAZt> Ruby was released 1993, PHP 8. Juni 1995
10:01 < crabtree> wish some more node libraries would mature
10:01 < crabtree> seems like a lot get stuck in early stages
10:01 < min|dvir|us> geNAZt: but RoR was released in 2004.
10:01 < rootcoma> Woot, got my head request working, not my chat only embeds images with the proper content-type and content-length :D
10:02 < geNAZt> RoR yes
10:02 < min|dvir|us> squeakytoy: I just want to make sure you realize what you're saying.
10:02 < geNAZt> but you would be able to write websites in ruby, c / c++, java
10:02 < min|dvir|us> Think about how bad of a person you are.
10:02 < geNAZt> which are much older
10:03 < min|dvir|us> You are threatening me because I insulted you.
10:03 < min|dvir|us> I feel bad for you. :)
10:03 < squeakytoy> min|dvir|us, threatening you? how?
10:03 < min|dvir|us> squeakytoy: you're so clueless it hurts my head.
10:04 < squeakytoy> yea, lol. Okay, I am threatening you, but i am so cluless about it.
10:04 < min|dvir|us> There we go.
10:04 < min|dvir|us> Go ahead, let it all out.
10:04 < smango> ruby is from 1993?!?!?!
10:04 < crabtree> ahead of its time
10:05 < geNAZt> yes
10:05 < min|dvir|us> geNAZt: like I said, the first language that made web dev easy is PHP.
10:05 < min|dvir|us> That's why PHP is popular.
10:05 < min|dvir|us> It does so many things wrong it's hard to believe.
10:05 < squeakytoy> min|dvir|us, please Daniel Kaplun who works at transparensee.com ( http://transparensee.com/ ) - if you start to act like a jerk in IRC, it will come back to you.
10:05 < geNAZt> y and ? nobody cares about, everybody knows it and everybody can work with that
10:05 < geNAZt> oO
10:06 < min|dvir|us> squeakytoy: I will act like a jerk to you for as long as I live, scum.
10:06 < min|dvir|us> You're vile and pathetic.
10:07 < min|dvir|us> geNAZt: I recommend learning something else if you want to progress as a programmer.
10:07 < min|dvir|us> Programming languages are like sinks. PHP is like a knee-level sink with both faucets labeled C.
10:08 < crabtree> so are ORMs recommended for websites written in node?
10:09 < geNAZt> min|dvir|us: how can you know in which languages i programm in ? i dont say php is the best, it has its space and i fits good in his space
10:09 < min|dvir|us> geNAZt: because you like PHP.
10:09 < crabtree> if not, how else would one approach the MVC design
10:09 < min|dvir|us> That's how I know.
10:09 < geNAZt> looooooooooool
10:09 < min|dvir|us> If you tried another language, you'd dislike PHP.
10:09 < crabtree> you have to do more than try another one
10:09 < geNAZt> i had VB.net, python, java and php
10:09 < geNAZt> and all have their good and bad sites
10:09 < min|dvir|us> PHP does not have any good sides.
10:10 < crabtree> well programming in java will not make you like it more than php
10:10 < crabtree> min|dvir|us: that isn't true
10:10 < geNAZt> and arguing that php is the pure evil and its the baddest thing on earth is wrong
10:10 < min|dvir|us> Here's where I'm coming from.
10:10 < crabtree> PHP is evil but it does have a few good parts
10:10 < crabtree> :P
10:10 < min|dvir|us> I used to work for a company. We had a bunch of programmers getting hired.
10:10 < min|dvir|us> I interviewed some of them.
10:11 < min|dvir|us> The ones that said PHP could talk the talk, but when they started writing code, it was messed up.
10:11 < min|dvir|us> It took me a while to recover from PHP myself.
10:11 < crabtree> was my first language
10:11 < phonebook_> min, how do you hire good programmers?
10:12 < min|dvir|us> phonebook_: it's absurdly difficult.
10:12 < min|dvir|us> Good question to ask is about ADTs.
10:12 < phonebook_> are they rare or hard to pick out?
10:12 < min|dvir|us> Time complexity.
10:12 < min|dvir|us> phonebook_: both, I'd say.
10:12 < geNAZt> if programmer mess up their own code they arent good at it :D
10:12 < geNAZt> easy as that
10:12 < min|dvir|us> geNAZt: like I said, you'll come around.
10:13 < min|dvir|us> Or you'll quit programming.
10:13 < geNAZt> yes yes master blablabla
10:13 < min|dvir|us> :)
10:13 < phonebook_> i want to be a programmer someday
10:14 < min|dvir|us> phonebook_: you're a programmer.
10:14 < geNAZt> cause he can write code into an editor ? lol
10:14 < min|dvir|us> Yes, that's exactly right.
10:14 < min|dvir|us> Doesn't mean he's a good programmer.
10:14 < crabtree> "A person who writes computer programs."
10:15 < geNAZt> then everybody who do bat scripting is a programmer
10:15 < geNAZt> good to know
10:15 < squeakytoy> phonebook_, dont worry - min|dvir|us studied music in university, but yet he is here teaching the rest of us what languages are good or bad
10:15 < min|dvir|us> geNAZt: yes.
10:15 < phonebook_> you know who was a programmer? the woz. now theres a programmers progammer
10:16 < min|dvir|us> squeakytoy: so you rescind your nice little PM apology?
10:16 < crabtree> why wouldn't someone who writes programs be called a programmer
10:16 < crabtree> not be called a programmer*
10:16 < crabtree> :P
10:16 < geNAZt> cause he dont know what he does
10:16 < geNAZt> how a os works
10:16 < crabtree> you don't need to know how an operating system works to be a programmer 
10:16 < geNAZt> a guy that puts text in an editor is a coder
10:17 < min|dvir|us> geNAZt: yes.
10:17 < min|dvir|us> Big surprise: you are a coder. :)
10:17 < crabtree> coder is another word for computer programmer 
10:17 < geNAZt> so a java copy and paste snippet guy is a programmer
10:17 < min|dvir|us> geNAZt: yes.
10:17 < geNAZt> until the whole thing fucks up
10:17 < squeakytoy> min|dvir|us, i guess i threatened you again, but i obviously missed it myself :|
10:17 < min|dvir|us> squeakytoy: nothing you say has any value.
10:17 < geNAZt> yes i am a coder
10:17 < geNAZt> okay
10:17 < squeakytoy> min|dvir|us, nothing to you at least ;)
10:18 < min|dvir|us> squeakytoy: objectively speaking.
10:18 < geNAZt> lol
10:18 < squeakytoy> min|dvir|us, you cant really give an objective opinion, as you are very much part of the discussion.
10:18 < min|dvir|us> squeakytoy: well, you've not said anything useful.
10:18 < min|dvir|us> So there's that.
10:19 < squeakytoy> You win.
10:19 < min|dvir|us> I know.
10:19 < geNAZt> all that is against you meaning is not useful to you
10:19 < crabtree> he has conjured up public information!
10:19 < geNAZt> so arguing with you doesnt make any sense
10:20 < squeakytoy> geNAZt, i just really dislike people like min|dvir|us, but i will stop now.
10:20 < phonebook_> do you honestly think bill gates would approve of this behaviour?
10:20 < min|dvir|us> Will you? You sure?
10:20 < min|dvir|us> I'll miss you.
10:20 < SomeoneWeird> okaaaaaay people lets just stop there
10:20 < geNAZt> squeakytoy: me too, i will go afk to get a packet out of the post office
10:20 < phonebook_> this is nothing less than jquery infiltrating node.js
10:21 < phonebook_> he said outloud
10:22 < phonebook_> dont fuck up node. 
10:23 <@konobi> now now children, behave
10:27 <@konobi> "01:45 < min|dvir|us> squeakytoy: how long is an acceptable time after nobody answers that I can insult you?"
10:28 <@konobi> infinity
10:28 < inolen> ^^ :)
10:29 < squeakytoy> ah, the line that started the flame war. Out of the blue, min|dvir|us just blunty asks me when he can insult me
10:29 < min|dvir|us> squeakytoy: welcome back!
11:59 < squeakytoy> embedded database is not really scalable, huh
11:59 < squeakytoy> Hmm
12:16 < squeakytoy> is there a more popular embedded database to use than nstore?
12:17 < nathan7> LevelDB is all the rage these days
12:46 < nb-ben> squeakytoy: personally, I just use mongodb for almost everything
12:47 < nb-ben> ah, embedded
12:47 < nb-ben> squeakytoy: sorry about that comment
13:23 < squeakytoy> if i create a website that uses an embedded database, like nstore, have I ruined scalability now? Or how could I scale this website, yet using nstore?
13:31 <@konobi> yes and no
13:31 < squeakytoy> okay, tell me how you are thinking
13:32 < ashnur> lol
13:32 <@konobi> i was just answering your 2 questions
13:32 < ashnur> with neurons firig together in synchronicity
13:33 < squeakytoy> hm
13:36 < squeakytoy> ill be back in a short while, but if anyone has a great idea on how to solve that, just write here :P
13:37 < ashnur> =)
13:37 <@konobi> squeakytoy: sorry, we do not condone cheating on your homework here
13:38 < squeakytoy> home work?
13:38 < vervain> konobi: I was wondering that when these questions were asked in #web :/
13:38 < squeakytoy> is this really homework questions? :|
13:38 < ashnur> :))))
13:39 < squeakytoy> if i create a website that uses an embedded database, like nstore, have I ruined scalability now? Or how could I scale this website, yet using nstore? <-- thats a home work question? really? ;)
13:39 <@konobi> kinda, yeah
13:39 < vervain> squeakytoy: It wouldn't make a bad one.
13:40 < squeakytoy> i think most questions here would be good homework questions.
13:40 < vervain> it would be a hell of a lot better if they used 'embedded datastore' rather than 'database' <shrug>
13:41 <@konobi> "if i take this kids tricycle, do you think I can use it to transport a 747 across the continent"
13:41 < squeakytoy> i am really worried that I am going to make a bad decision now, when I need database functionality. I like the idea that you can checkout the project, and it has a database embedded. Out of the box solution. But i think that makes the whole solution very hard to scale.
13:43 < squeakytoy> and the second part is, if i let a third party host the website, i cant control the number of instances they might create. Hence, how would I link all these intances together
13:43 < vervain> squeakytoy: There is of course the counter argument... by the time you have to worry about scale you will most likely have the resources to fix the problem after the fact.  Use whatever floats your boat now, worry about 'scale' later.
13:43 < squeakytoy> even if i found a synchronization solution
13:44 < squeakytoy> :|
13:56 < jtomasrl> should i use global.mongo.collection(this.coll, function(err, collection) {} or var collection = global.mongo.collection(this.coll)
14:03 < daleharvey_> rvagg: ping
14:26 < rvagg> daleharvey_: installs for me, I think you may have a bad npm cache
14:26 < rvagg> daleharvey_: try this: rm -rf ~/.npm/bufferstream/
14:26 < rvagg> then npm install levelup again
14:33 < rvagg> daleharvey_: actually there's something odd about the version it's trying to install in your gist: "bufferstream@'bufferstream@~0.5.1'"
14:34 < rvagg> daleharvey_: perhaps upgrade npm, 1.2.3 is available: npm update npm -g
14:34 < rvagg> daleharvey_: and remove levelup from your npm cache too: rm -rf ~/.npm/levelup/
14:36  * rvagg retreats back to bed, sleep attempt take 2
14:36 <@konobi> npm cache clean
15:01 < robertj> how do I change how my object is represented as a string?
15:01 < robertj> foo.__someToStringFun = foo?
15:11 < Engin> OK, I have a little more time to spend on node.js, I found myself in the positiojn to write a testcase which I need to send a request to a service and check the response. How do you do it with nodeunit ?
15:11 < Engin> I'm basically creating a http.IncomingMessage to forge a request to test my service
15:12 < Engin> is that the way to go ?
15:20 < davve> this is a js-specific question but i hope someone might know..
15:20 < Engin> and to interprete the response I have write a parser to decode chunked response
15:20 < davve> { fun1: function(){ ... }, fun2: function() { ...how would i from here refer to/evaluate fun1?... }
15:20 < Engin> davve: you can't, are you trying to use OOP patterns ?
15:21 < davve> Engin: sort of..
15:21 < davve> Engin: your answer is what i needed to hear though
15:22 < Engin> davve: try something like function MyClass(){ var m_f1 = function(){}; var m_f2 = function(){m_f1();}; this.f1 = m_f1; this.f2 = m_f2; } }
15:23 < davve> Engin: quite interesting. i will try it out. thanks :)
15:23 < Engin> davve: search for OOP in JS 
15:24 < Engin> to learn best practices
15:24 < davve> Engin: will do
15:24 < Engin> you can also check node.js's JS implementations for their patterns -- which seems rather easy
15:25 < davve> if i was trying to adapt a pattern right now it would be the facade :)
15:26 < davve> but not a strict one
15:26 < davve> anyway, thanks
15:29 < davve> MDN has a nice summary on the subject
15:36 < stagas> davve: you can, if you called fun2 with obj.fun2() it would be available as this.fun1()
15:43 < cloudbender> Good morning
15:49 < mscdex> mornin'
15:50  * cloudbender wishes there was a repeat ... until in javascript
15:51 < yawnt> use while?
15:51 < cloudbender> while tests the condition before the block.  repeat tests it after the block.
15:51 < yawnt> no i mean
15:52 < cloudbender> yes I use while true alot
15:52 < yawnt> do { ... } while()
15:52 < yawnt> ^ this while
15:52 < cloudbender> Oh I see, cool
16:14 < geNAZt> if i am working on a Buffer object can i splice data out of it like in an normal array ?
16:15 < geNAZt> if not how should this be solved
16:16 < geNAZt> for the case: i have a chunk buffer that gets fed with bytes from a tcp stream and a frame parser, if one frame is complete i want it to be removed from the buffer and the contents remaining in the buffer to get to the offset 0
16:25 < mscdex> geNAZt: you can do slice, but the slice references the same memory
16:27 < geNAZt> that is the problem if i destroy the old buffer the new buffer is corrupted or ?
16:43 < inzania> Hey all, I'm looking for a solid implementation of a full-text search algorithm in Node.js which supports ranking, eg, "Search for this" +"and this" -"but not this". Something like Sphinx or ElasticSearch is far too sophsiticated for my needs, and those modules I've found so far don't quite cut it. Any ideas?
16:46 < mscdex> geNAZt: destroy how? like using `delete` on the full Buffer? i think if you use slices it adds to a reference counter so the original Buffer won't go away until any/all slices are GC'ed, but i'm not 100% sure
16:56 < cloudbender> Gecko adds the __proto__ property so that each object has a local reference ?
16:57 < cloudbender> stop messin around
17:00 < Havvy> Well, this is annoying. What does "SyntaxError: Illegal let declaration outside extended mode" mean?  (I'm using `node --harmony let.js)
17:01 < Havvy> https://gist.github.com/3834d8afc80f4683a388 for let.js
17:02 < Havvy> And Googling the error just gives me the bug where that error was added to v8.
17:04 < sschultz> Quick Mongoose question: I'm trying to setup a model, and I want one of the attributes to be of type object. How do I set that up int he schema - I know string, etc, but can't seem to find object. Thanks!
17:07 < inzania> sschultz: model('Test', { 'myfield': {} });
17:07 < sschultz> inzania: Thank you, but what if I don't know what the titles of the items in the object are going to be?
17:08 < inzania> sschultz: that's exactly what I just covered. A loose declaration type.
17:08 < inzania> sschultz: myfield, in this case, will accept any object.
17:09 < sschultz> inzania: Ahhhh. Got it. Thanks!
17:11 < inzania> Is there a proper/better name for boolean text searches, eg: "Search for this" +"and this" -"but not this"? I'm trying to find a node module which supports boolean text searches, but because a "boolean search" is something very different, I'm having a hard time finding hits
17:12 < zomg> inzania: that's usually called fulltext search
17:12 < inzania> zomg: hm, ok. Happen to know any decent implementations for node?
17:12 < zomg> I can recommend ElasticSearch which is a full text search engine which is quite straightforward to set up
17:12 < zomg> It is a separate application though, but there is probably a node api for using it
17:14 < inzania> zomg: I looked @ that briefly but discarded it because, while cool, I'm running on the amazon cloud and adding a whole new app to my production servers is... challenging
17:15 < zomg> Oh, don't really know about that, out of aws offerings I've only used ec2
17:15 < zomg> I'm not aware of any node-native full text search engines
17:16 < cloudbender> inzania are you satisfied with amazon ?
17:16 < cloudbender> I have to make a choice in the fall
17:16 < zomg> I wouldn't be if it makes it hard to add applications to it like ElasticSearch :P
17:16 < cloudbender> noted
17:17 < zomg> I would imagine you could run an ec2 instance or whatever
17:17 < zomg> and put ES there
17:17 < zomg> and then just use the REST API or node libraries (if available) to access it from the cloud app
17:18 < zomg> so maybe it's not that challenging if you're open to running it on another box
17:19 < cloudbender> I will be running hosted for sure.
17:19 < inzania> cloudbender: generally, yes. I use RightScale + Amazon, but have not personally worked with other cloud configs. I have a lot of flexability and scalability, which I need for the load on my product
17:19 < cloudbender> noted thank you
17:21 < Havvy> I apparently needed to use node --use-strict --harmony let.js
17:23 < inzania> Hm. I'm about to start creating an algorithm to convert a Full-Text search string into a RegExp for querying my MongoDB. Yet, this feels... dirty.
17:24 < zomg> haha
17:24 < zomg> if it serves your purpose, it's probably ok
17:24 < zomg> keep in mind using a proper full text search would allow more than just simple + and - queries
17:24 < zomg> they support things like fuzzy searches (eg. if there's a typo in the word) and other useful things
17:24 < inzania> haha, true. Still, I feel like if it were something that made sense to do, there would be premade implementations... oh well.
17:25 < inzania> yeah... I found node-search. It looked perfect, even did ranking, except the results appeared to be bunk...
17:28  * cloudbender hates bunk
17:46 < Havvy> Is there a way to run mocha or jasmine with node/v8's harmony and use-strict flags?
18:16 <@konobi> isaacs: ping
18:16 < alxFradiani> Hi guys
18:17 < mpajor_op5> does anyone know of a function where I can convert unix-timestamps to eg. "3 minutes ago" or such?
18:19 < spion> mpajor_op5, you would probably want it on the client-side right?
18:20 < mpajor_op5> spion: hmm not quite sure, would it be better to convert it client-side or perhaps server-sdie?
18:21 < alxFradiani> So, i'm using v0.8.18 and following ryan's introduction video (http://www.youtube.com/watch?v=jo_B4LTHi3I)… when doing the basic example to explain the idling feature, i'm not getting the results progressively (setTimeout), the server justs waits the 2 secs and then sends the whole 'hello world'
18:21 < asdf12> hey how do i do var a = require('blah') || my_own_blah; ?
18:21 < mpajor_op5> it's for a chat-server spion 
18:21 < spion> mpajor_op5, there is a jquery plugin called timeago - it updates the text dynamically as time goes by.
18:21 < mpajor_op5> spion: hmm interesting
18:22 < spion> otherwise "2 minutes ag"o will become wrong after 1 minute :)
18:22 < somekittens> How is it possible that requiring a .js file returns something other than module.exports?
18:23 < mpajor_op5> spion: you are correct, go figure, I didn't think of that hehe
18:25 < alxFradiani> curl outputs the right http headers… but i don't why it behaves differently
18:25 < alxFradiani> *know
18:27 < mpajor_op5> spion: thanks for suggesting timeago; it looks great. Do you know how I would go on with using correct timestamps that I can pass to timeago? eg var timestmap = Date.now(); ?
18:28 < spion> I think toISOString of Date should work
18:29 < spion> >> new Date().toISOString()
18:29 < purr> spion: (string) '2013-01-26T18:26:33.993Z'
18:30 < mpajor_op5> spion: thanks a lot
18:32 < callen> is there a vhost server/load-balancer that supports websockets?
18:32 < mpajor_op5> callen: HAproxy?
18:32 < callen> I wasn't aware haproxy supported websockets.
18:32 < mpajor_op5> I don't see why it wouldn't?
18:32 < LouisT> does anyone know if appjs supports getUserMedia?
18:33 < callen> mpajor_op5: after reading that nginx didn't, I lost all hope.
18:33 < mscdex> alxFradiani_: if you're in a browser, it's probably doing some buffering
18:33 < mscdex> websockets should work pretty much everywhere now
18:34 < mscdex> for any proxies that support http 1.1 that is
18:34 < callen> mscdex: nginx doesn't support them which also means heroku doesn't.
18:34 < mscdex> that's why i was quick to clarify ;-)
18:37 < callen> mscdex: good to know haproxy still rocks though. thanks :)
18:41 < MI6> joyent/node: Fedor Indutny master * 99f0b02 : stream_wrap: reference handle before uv_write2  Before sending handle to  - http://git.io/hVQHoQ
18:41 < mpajor_op5> 		var timestamp = "<abbr class='timeago' title='+ timeago +'></abbr>";
18:41 < mpajor_op5> does anyone know how I can add a javascript variable into the timestamp var? "timeago" is a variable
18:41 < mpajor_op5> cant seem to get it right at all
18:42 < asdf12> why are you missing double and single quotes
18:42 < asdf12> mixing*
18:42 < nlf> so he doesn't have to escape the single quotes within the double quotes
18:42 < mpajor_op5> I am not sure, just cant get it right hehe
18:42 < nlf> the problem is that you're missing two double quotes
18:42 < mpajor_op5> nlf: oh?
18:42 < nlf> var timestamp = "<abbr class='timeago' title='"+ timeago +"'></abbr>";
18:43 < mpajor_op5> Aha, that makes sense
18:59 < tpayne> where is NODE_ENV usually set?
19:00 < somekittens> tpayne command line
19:00 < somekittens> NODE_ENV=production node app.js
19:00 < asdf12> its a shell environment variable
19:00 < tpayne> got it
19:00 < tpayne> do you guys use forever?
19:00 < tpayne> trying to launch in prod right now
19:01 < Havvy> Is there an environmental variable to make node run in --use-strict and --harmony?
19:01 < somekittens> Nah, I use nodemon
19:01 < tpayne> i use nodemon too, but unless i keep my terminal open, it goes bye bye
19:01 < asdf12> background it
19:01 < Havvy> tpayne: >> /dev/null &
19:02 < tpayne> then i log out
19:04 < tpayne> hmm perhaps it worked
19:04 < tpayne> thanks
19:04 < tpayne> anyone here use dream host with node? I need to setup a proxy for apache i guess
19:04 < tpayne> to my port
19:44 < tpayne> any dreamhosters here?
19:52 <@konobi> i wouldn't even try
19:58 <@konobi> using node on dreamhost that is
20:09 <@konobi> oh, looks like they diversified their offering a bit
20:22 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
20:22 < asdf12> i forget is harmony adding syntax for array << 1 ?
20:23 < Havvy> asdf12: I've not seen any post about that.
20:26 < asdf12> that sucks
20:31 < mscdex> asdf12: what is that supposed to do?
20:32 < asdf12> puts 1 at the end of the array
20:33 < asdf12> and before you wonder why, i think its more readable, its easier to me to write
20:34 < mscdex> easier to write maybe, but more readable is debatable
20:35 < asdf12> yea, cause seeing dot notation and a word throughout JS, << won't stick out?
20:35 < asdf12> and it's pretty obvious the arrows kind of mean you are sending 1 to the array
20:36 < asdf12> like do you rather see, 1.plus(1) or is 1 + 1 really obvious when scanning code
20:38 < asdf12> not only does it pop out at you in a sea of dot then method name text, you do not have to question what x is in x << 1
20:38 < ako> + means addition. << means... well... bit shifting.
20:38 < asdf12> because otherwise you'd have to wonder well is x actually an array, is it an array like object? or is it an object that has a similar method name to an array
20:39 < asdf12> if it was written in dot notation
20:40 < Havvy> asdf12: If you saw the line "let b = a << 1;", what would you expect b to be?
20:42 < asdf12> well, i was just saying, it would be nice
20:42 < ako> i disagree
20:43 < Havvy> It would be adding ambiguity to the << operator.
20:43 < asdf12> no well you see
20:45 < asdf12> i understand that, but my point is, it makes arrays a bit more special, treats it kind of like a primitive by raising its status a bit with a special operator
20:46 < asdf12> mainly you have to admit, it makes x << 1, x stand out more when scanning code, makes it easier to know x is an array, and not some array like object, or some object that happens to also have a similar method name to an array etc
20:47 < ako> i recommend to use arrays instead of array-like objects
20:47 < asdf12> all valid points yea? no? oh well, it was just a thought, doesn't even have to be '<<' thats just what other languages chose
20:48 < ako> which?
20:48 < asdf12> ruby
20:48 < asdf12> im sure others
20:48 < asdf12> oh i think dart supports that too
20:49 < mpajor_op5> if I do something like usernames[credentials.username] = credentials.username; <- how can I count how many usernames I have in usernames[...] ?
20:49 < ako> in dart, List only defines the operators [] and []=
20:50 < ako> http://api.dartlang.org/docs/releases/latest/dart_core/List.html
20:50 < ako> "add" is used for, well, adding things
20:50 < Havvy> mpajor_op5: var count = 0; for (key in object) { if (Object.hasOwnProperty(key) { count += 1; } }
20:51 < Havvy> Or if you just want a function:
20:51 < Havvy> var len = function (object) { var count = 0; for (key in object) { if (Object.hasOwnProperty(key) { count += 1; } } return count; };
20:52 < mpajor_op5> Havvy: oh? I need to actually for each to get the amount of keys in it?
20:52 < mpajor_op5> thanks for the function, let me try it out
20:53 < Havvy> mpajor_op5: array.length() is special in that it tells you the highest numeric key value in an array object.
20:53 < mpajor_op5> thus meaning if I remove keys from the array it wont decr the actual count?
20:53 < Havvy> But it doesn't know or care about the actual number of elements in the array (if the array has holes for example) or if there are keys that aren't numeric.
20:54 < mpajor_op5> aha, got it :)
20:54 < Havvy> [1, undefined, 3].length === 3
20:54 < ako> var foo=[];foo[100]='bar';console.log(foo.length); // 101
20:55 < asdf12> cough
20:55 < asdf12> see example of how it's broken
20:56 < asdf12> is usernames an array? and array-like object? you can't tell just by looking at it
20:56 < ako> use an "isArray" utility function to figure out if it's an array
20:57 < asdf12> ill do that when im scanning through js src
20:57 < ako> https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/isArray
20:57 < asdf12> good point, it shouldnt be obvious by just reading it
20:57 < ako> polyfill it if necessary
20:58 < asdf12> i know how to test, this isn't about debugging, this is about readability
20:58 < ako> and you think overloading << would help?
20:58 < mpajor_op5> ako, Havvy: appreciate the help - thanks
20:58 < asdf12> it makes the whole array situation worse when you also have bracket notation that works for arrays and objects!
20:59 < Havvy> mpajor_op5: You're welcome..
20:59 < Havvy> asdf12: Arrays ARE objects.
20:59 < asdf12> ako: have you not seen some of the ideas they've thrown out for harmony?
20:59 < asdf12> if you are concerned about overloading the language...
20:59 < Havvy> The only difference is the magic length property.
20:59 < asdf12> Havvy: thats my point?
21:00 < Havvy> And the prototype functions.
21:00 < ako> `let` was introduced 6 years ago. you still can't use it.
21:00 < asdf12> Havvy: scroll up and see me saying how arrays need to be elevated to a more primitive like status
21:00 < ako> harmony is kinda far away
21:00 < Somelauw> I want to make a script to automatically set random wallpaper. (I'm not easily offended, but I quickly get bored). I'm using node + chimera to accompish this. I have two problems: 1. How to do a os.sytem call from nodejs 2. Chimera won't close when it's done, not even if I do a Chimera.close() in my code.
21:01 < asdf12> thats the whole point of all this, it is because arrays are objects that makes it hard READABILITY wise to distinguish if x.shift() for instance, is x an array? array-like? just an object with shift property? add in bracket notation ? its like what?
21:02 < asdf12> so rather than completely change array, just give it some array only operators so now when you read js code, you KNOW when something IS an array
21:02 < asdf12> simple solution
21:02 < Havvy> So instead of having one simple means of combination of primitives, you want two?
21:03 < asdf12> go on defending something that is broken
21:03 < asdf12> go on defending how length is not broken too
21:04 < Havvy> Length is definitely broken.
21:04 < Havvy> Adding more primatives won't make it less broken.
21:04 < boutell> anyone working with socket.io? I'm reading about solutions for mixing passport and socket.io, and it all seems like a bit of a nasty hack at best
21:04 < asdf12> Havvy: no my point isn't to make array a primitive, but instead just give it a few operators to make it obvious something is an array when reading
21:05 < boutell> I get the impression the session id cookie is encrypted with a secret so the browser doesn't actually know the session ID and I can't just send it as the first socket.io message and let the server pull that session to verify their identity or something 
21:05 < asdf12> thus you can make arrays 'special' again instead of just an object, which is part of the confusion when reading js code
21:05 < tpayne> hello. When I attempt to leave my node process in the background, it keeps getting stopped. Does anyone know how to prevent this?
21:05 < boutell> https://npmjs.org/package/passport.socketio is probably the least broken implementation? But it looks like it still relies on cookies, and the flash transport can't see those.
21:06 < boutell> tpayne: is this on your own machine or some hosting service
21:06 < tpayne> some hosting service, but it's a virtual private server
21:06 < Havvy> tpayne: Redirect the output to a file (or /dev/null) and send the operation to the background.
21:06 < Havvy> node yourProgram.js >> /dev/null &
21:06 < tpayne> i'm doing nodemon
21:06 < boutell> tpayne: that shouldn't be a problem, my guess is that you're reading from standard input
21:06 < tpayne> nodemon app.js >> /dev/null &
21:06 < boutell> when does it get stopped?
21:07 < tpayne> when i start doing other shit
21:07 < tpayne> maybe i'll stop doing other shit
21:07 < boutell> like, you put it in the background and whack enter twice and it's immediately stopped?
21:07 < tpayne> yeah
21:07 < boutell> tpayne: that sounds like it's trying to read from standard input.
21:07 < tpayne> NODE_EVN=production PORT=8001 nodemon app.js >> /dev/null &
21:07 < tpayne> is the command i use
21:07 < boutell> tpayne: does it work on your own box with exactly the same syntax?
21:09 < tpayne> maybe it has something to do with port 8001
21:09 < tpayne> because i tried a different port and now it's working
21:09 < tpayne> meh nm
21:09 < tpayne> spoke too soon
21:10 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:10 < tpayne> maybe i need to run at root?
21:10 < boutell> tpayne: no. What happens when you run exactly this command on your own box? 
21:11 < tpayne> boutell: i don't have a local env
21:11 < boutell> tpayne: what exactly happens when it "stops?" 
21:11 < tpayne> it says [1] Stopped
21:11 < tpayne> wait i changed it from nodemon to node
21:11 < tpayne> and it's working
21:11 < tpayne> yay!
21:11 < Somelauw> I want to make a script to automatically set random wallpaper. (I'm not easily offended, but I quickly get bored). I'm using node + chimera to accompish this. I have two problems: 1. How to do a os.sytem call from nodejs 2. Chimera won't close when it's done, not even if I do a Chimera.close() in my code.
21:12 < tpayne> excellent, thanks!
21:12 < smango> What's the best way to get an array of values corresponding to an array of keys from redis using node? 
21:12 < smango> since mget expects a list of arguments, not an array
21:20 < Somelauw> Can I force quit node.js?
21:21 < FunnyLookinHat> Somelauw, Control + C ?  Or from a script ?
21:22 < FunnyLookinHat> Or process.exit() ?
21:24 < RIcky12q> Hey guys, i have a couple questions about node's event system
21:25 < RIcky12q> Say i'm building an application that i would like 3rd parties to make plugins for. is it realistic to use node's events as the hooking architecture?
21:25 < Somelauw> process.exit! works. Problem was that I'm using chimera, which has a function chimera.exit, but that function doesn't work, so need to circumvent it somehow.
21:26 < Somelauw> Cool, you can use shebang with node.js
21:26 < RIcky12q> basically how many events can node handle before it starts to lag?
21:28 < RIcky12q> basically how many events can node handle before it starts to lag?
21:31 < mscdex> RIcky12q: it depends on how long each event handler takes
21:31 < RIcky12q> or is using events wrong for this situation?
21:38 < Somelauw> Done, I made a random background downloader in 25 lines of code.
21:45 < mscdex> RIcky12q: it depends on if you need input from the functions or not. if it's just a one-way broadcast kind of thing, then events would work pretty well for that
21:50 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:52 < nathan7> ohai piscisaureus_ 
22:36 < mathiask> Hey there! I've got a question. Is it possible to build a standalone version of a Node.js script?
22:37 < min|dvir|us> mathiask: ?
22:37 < min|dvir|us> You mean like a single binary executable?
22:38 < mathiask> yes
22:39 < min|dvir|us> mathiask: yes, it's possible, but it's a bad idea.
22:39 < min|dvir|us> Make an installer.
22:39 < yakubori> for something triviial, like fixing a documentation typo, can a pull request simply be done from the master branch?
22:40 < RIcky12q> go does that
22:41 < mathiask> min|dvir|us: Why is it a bad idea? 
22:41 < min|dvir|us> mathiask: because nobody does that.
22:41 < min|dvir|us> Therefore solutions are likely not robust.
22:41 < mathiask> Python and Ruby do also
22:41 < min|dvir|us> No, they don't.
22:41 < min|dvir|us> They can, but don't.
22:43 < zip_> https://github.com/andrewhodel/node-json-rrd - a pure JS [r]ound [r]obin [d]atabase library for Node.js with JSON i/o
22:44 < mathiask> min|dvir|us: What do you mean with 'make an installer?'
22:44 < min|dvir|us> I assume you're on Windows?
22:44 < min|dvir|us> Since you want an an installer.
22:44 < min|dvir|us> I mean, single executable.
22:45 < min|dvir|us> mathiask: yes?
22:45 < mathiask> Windows/Linux , yes a single executable
22:45 < Havvy> The installer for Node on windows was annoying last I tried it.
22:45 < min|dvir|us> If you want a single executable for Linux, it's because you've never used a package manager.
22:46 < mathiask> min|dvir|us: So I dont have to install all stuff(node, packages, python...) on every machine
22:49 < mathiask> min|dvir|us:  Im novice in Linux :) however i like it platform independent
22:50 < min|dvir|us> mathiask: on Windows they're called installers. Mac and Linux people call them packages.
22:50 < min|dvir|us> Make a .msi file.
22:50 < min|dvir|us> Have it install Node, and your program.
22:51 < min|dvir|us> mathiask: also, a single binary executable will never be platform-independent.
22:51 < bnoordhuis> yakubori: yes, but see the CONTRIBUTING guide
22:53 < mpajor_op5> I've ran into a problem here. I am building a chat-server and I was wondering waht the easiest way to store all usernames for a specific channel would be? I basically want to be able to count them and list all usernames. Something like this? var usernames[room][username] = username; ?
22:53 < mathiask> min|dvir|us:  thats right. but as example pyInstaller supports Windows Linux Mac Solaris.. But i dont get this project.. it is called installer like u said but converts a python project into a single executable?!
22:54 < min|dvir|us> ?!?!?!?!?!
22:54 < RIcky12q> s2shs, shouldn't a room contain users?
22:55 < RIcky12q> room[name][user1]
22:55 < mathiask> it is calles 'Installer' like you explained me. but doesnt generate an installer like *.msi but a single executable
22:55 < min|dvir|us> For twelve platforms.
22:55 < min|dvir|us> Very interesting that you say that.
23:00 < owen1> In order to be able to run my test files alone or part of a test suite I check whether the code is running directly with the node executable.  if that's the case i run my server before running the test. if the file was required by the test suite runner, i just export the test so the runner will call it.  Here are 2 version of one of the test files - http://hastebin.com/koviwopome.js  they are doing the 
23:00 < owen1> same thing, except that I moved the runServerBeforeTest function to it's own helper file.  I found the first version more readable but it's more verbose and I need to repeate that in each test file.  Any opinions or different approaches for testing?
23:01 < yakubori> bnoordhuis: i read it, and signed the agreement. with regards to changing markdown files, does the tool to create the html/json files need to be run manually (and included with the commit)?
23:01 < nathan7> Hey bnoordhuis 
23:02 < bnoordhuis> yakubori: `make doc` builds the docs. re 'included with the commit', not sure what you mean but i guess the answer is 'no' :)
23:02 < bnoordhuis> nathan7: hi
23:05 < yakubori> bnoordhuis: I suppose what I should ask is, am I supposed to run 'make doc', or something similar, to update any html/json files based on the markdown changes, so they can be included in a commit
23:06 < bnoordhuis> yakubori: no, no need. we regenerate them with every release
23:07 < yakubori> cool. ok. thanks :)
23:07 < mathiask> min|dvir|us: Thank you and sorry for my english skills, not my native language ;)
23:29 < MI6> joyent/node: Rick Yakubowski v0.8 * 5abde81 : doc: fix typo in cluster module documentation  Fix a small typo in the cl - http://git.io/t733nQ
23:29 < bnoordhuis> yakubori: ^
23:30 < yakubori> sweet! :D
23:30 < yakubori> thanks bnoordhuis 
23:53 < parkermoore> exit
--- Log closed Sun Jan 27 00:00:33 2013
