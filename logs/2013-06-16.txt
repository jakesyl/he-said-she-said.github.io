--- Log opened Sun Jun 16 00:00:34 2013
00:19 < shvelo> Hi everyone!
00:20 < adarq> hey, anyone know how i could get the full path to a file im wtching with fs.watch().. The arguments to the callback are cb(event,file).. it's giving me just a filename without the full path.. Anyone know how i could provide data to the callback or something so i knowwhich directory it came from?
00:20 < adarq> i'm watching multiple directories
00:21 < shvelo> TooTallNate, hey you didn't respond to my question about Node-GYP
00:26 < evanmoran> @adarq I remember the filePath externally to watch. You can't get the info from there, but when the file is referenced on the command line you can path.dirname it
00:26 < evanmoran> @qrada
00:27 < qrada> hm thanks.. confused a bit.. maybe i can wrap that callback and pass my argument to it
00:27 < qrada> (function(...){})(event,file,myargument)
00:27 < qrada> or something
00:36 < sdwrage> hey all
00:36 < joshskidmore> hey
00:39 < evanmoran> @qrada just let the callback capture your variable through the closure. No need to pass it
00:40 < evanmoran> @qrada function watchWithFullPath(filePath, includePath){     fs.watch function(){  … includePath …   }
00:41 < qrada> ah
00:41 < qrada> thanks alot man
00:42 < niggler> "npm WARN package.json policyfile@0.0.4 'repositories' (plural) Not supported." <-- is that due to a local issue?
00:43 < niggler> actually nvm that was fixed in 0.0.5
00:55 < qrada> any of you know how to reload a module completely.. this is just for the dev environment.. i used to be able to delete require.cache['module'] etc.. and re-require it
00:55 < qrada> doesn't seemlike i can do that now
00:56 < qrada> im using nodejs 0.10.x
00:59 < qrada> ah
00:59 < qrada> i forgot this
00:59 < qrada> delete require.cache[require.resolve('/path/to/module.js')]
00:59 < qrada> works
01:58 <@isaacbw> loooooooooooooooooooooooooooooooooooooooooooool
02:06 <@isaacbw> I just realized that ken thompson worked on go
02:06 <@isaacbw> neat
02:37 <@isaacbw> lololol http://news.cnet.com/8301-13578_3-57589495-38/nsa-admits-listening-to-u.s-phone-calls-without-warrants/
02:37 < echo|> I assumed everyone knew that already
02:37 < echo|> Allegedly all US telephone calls are recorded
02:38 <@isaacbw> they were denying it until now
02:38 <@isaacbw> are you in the US?
02:38 < echo|> Yes
02:39 <@isaacbw> maybe you haven't been following the news lately?
02:39 < echo|> I have been, I just meant - in general - so many people find this news shocking (not to say you do)
02:41 <@isaacbw> I just think it's hilarious given how adamantly and publicly everyone has been denying wiretapping, almost as a defense that they wouldn't go that far
02:41 <@isaacbw> it's not so surprising though
02:41 < echo|> Oh definitely
02:42 < echo|> I strongly believe there is no actual privacy anymore
02:42 < rmill> isaacbw: "Absolute power corrupts absolutely." ;)
03:03 < niggler> isaacbw did you really believe in digital privacy?
03:04 < niggler> its like high-performance java
03:05 < squeeks> as in "doable, only smart people can pull it off"
03:05 < niggler> a myth squeeks 
03:05 < squeeks> nope. a reality. I do most days.
03:05 < niggler> does IOI still give a 5x leeway for java?
03:06 < squeeks> what
03:07 < niggler> ioi = international olympiad in informatics
03:08 < niggler> C programs had to run within a second, but when they introduced java they gave 5 seconds for java (keeping 1 second for C)
03:09 < squeeks> jvm startup time will continue to suck. but once its running, its performant. how often are you restarting an entire VM on a server?
03:09 < niggler> what's "performant"
03:11 < Aria> ... I start a vm at least a dozen times in our old build process.
03:11 < Aria> It SUCKED
03:13 < squeeks> good question. "oh look, serving 50k r/s off, all the interfaces are saturated and the CPU isn't even trying" is a good metric.
03:16 < niggler> have you compared to an equivalent implementation in another language?
03:16 < niggler> *language / framework
04:28 < gotjosh> now that ntwitter is semi-dead which npm is recommended for twitter interaction?
04:28 < gotjosh> twitter API*
04:57 < ejexin> in ES6, is the var statement even useful anymore?
04:58 < Aria> It is. It's got the old scoping rules.
04:58 < ejexin> yeah i'd understand for supporting legacy code 
04:58 < ejexin> but is there a scenario where it's useful to have the old scope rules?
05:01 < AAA_awright> As opposed to... new scoping rules?
05:01 < ejexin> let's scoping rules :P
05:01 < ejexin> vs var's scoping rules
05:01 < Havvy> ejexin: No.
05:01 < ejexin> alright just making sure
05:01 < ejexin> thanks
05:01 < Havvy> Well, actually, there is one place.
05:01 < Havvy> The global context.
05:01 < Havvy> Using var will put it on window.
05:01 < Havvy> Using let won't.
05:02 < Havvy> And if you don't know which environment your code is running in...
05:02 < AAA_awright> window is a browser-specific construct
05:02 < ejexin> wouldn't it be better and set it explicitly as a property
05:02 < ejexin> ?
05:02 < ejexin> oh true
05:02 < ejexin> if you don't know the env
05:02 < Havvy> But that's such a dodgy use case.
05:03 < ejexin> yeah i'd probably just check if window  exists, if it does set it as a property to window otherwise make it a local variable
05:03 < ejexin> something like that
06:12 < olalonde> anyone interested in writing an ORM? :O
06:12 < olalonde> I could use some help :)
06:12 < gkatsev> only if you call it yao.
06:13 < AAA_awright> Haha
06:13 < olalonde> i don't have an objection to that
06:13 < gkatsev> lol
06:13 < AAA_awright> olalonde: Why Yet Another ORM
06:13 < olalonde> :)
06:13 < AAA_awright> In particular, what unique functionality do you propose
06:13 < olalonde> was wondering eheh
06:14 < olalonde> eager loading many-to-many relationships for a start
06:14 < olalonde> (which sequelize does not support)
06:14 < gkatsev> AAA_awright: all the dbs!
06:15 < AAA_awright> I'm having trouble enough supporting just one DB
06:15 < gkatsev> haha
06:16 < olalonde> you wrote an ORM AAA_awright ?
06:16 < AAA_awright> Not as such, more like a CMS
06:16 < olalonde> ok 
06:17 < olalonde> well I plan to support postgresql as a start and eventually will test against other RDMS and eventually NoSQLs (maybe)
06:17 < ejexin> olalonde: sequelize supports eager loading
06:17 < ejexin> it was recent 
06:17 < olalonde> ejexin: yes, but very basic
06:17 < ejexin> i'd like an ORM that didn't force me to use their own method of defining things
06:17 < olalonde> ejexin: still does not support many-to-many relationships through a join table
06:18 < ejexin> i wish i could define thinks through constructors or objects
06:18 < ejexin> things*
06:18 < ejexin> i'd like to use JS's pseudo-classes :P
06:18 < olalonde> right
06:18 < AAA_awright> olalonde: It's about as a generic ORM as you can get though, it works on the principle you have resources, and they map to the database, which from there gets formatted into JSON or HTML or whatever you like
06:18 < AAA_awright> And it works in reverse on this principle
06:19 < olalonde> the way I build my ORM, it's very flexible. I could write a function that analyzes an object and builds a schema accordingly
06:19 < AAA_awright> That's easier said than done
06:19 < ejexin> i like being able to define limits though
06:19 < olalonde> ok
06:19 < olalonde> I know :)
06:19 < ejexin> VARCHAR(12)
06:19 < ejexin> CHAR(60)
06:19 < ejexin> etc.
06:19 < ejexin> sequelize lets me do this which i like
06:19 < olalonde> it's not my first ORM so I know the JOIN hell I am facing
06:20 < olalonde> ejexin: with my ORM, you only list attributes. then for each adapter you can optionally map attributes to a database column/type. but so far, it's only assuming that your JS attributes map perfectly to your db columns
06:21 < olalonde> I'm still at the very beginning
06:21 < olalonde> writing an ORM is quite a big project I'm aware of that
06:21 < AAA_awright> Often there's not a direct mapping
06:21 < AAA_awright> People write a JSON schema quite differently than they'd write an HTML schema or a relational DB schema
06:22 < olalonde> yes, it's a must feature
06:22 < olalonde> won't be hard to implement
06:22 < AAA_awright> In JSON you might have {subject:"http://example.com/resource", label:"Title", body:"HTML"} but in HTML, the link would be <h1><a href="http://example.com/resource" rel="self">Title</a></h1><p>body</p>
06:23 < olalonde> anyways, here is my work in progress: https://github.com/olalonde/worm it will get better within a few days/weeks hopefuly
06:23 < AAA_awright> that is, the direct mapping to JSON from HTML would look more like {link:{href:"...", title:"Title"}, body:{format:"html", content:"<p>body</p>"}}
06:24 < olalonde> haha would be cool to have an HTML datastore 
06:24 < AAA_awright> People seem to forget, REST requires hypertext. Which usually means, HTML
06:25 < olalonde> right
06:25 < olalonde> I like the idea
06:25 < AAA_awright> Put another way: http://twitter.com/ is more RESTful than http://api.twitter.com/ (their "REST API")
06:25 < ejexin> i would prefer JSON over HTML
06:25 < AAA_awright> You can support Content-Type negotiation
06:26 < AAA_awright> But really, I think I like the contept of HTML APIs. You have all sorts of tags: <h1>, <table>, <ol>, <ul>, <dl>, etc...
06:27 < olalonde> that's a bit unrelated to ORMs though :)
06:27 < AAA_awright> That covers sections, tables, arrays, and dictionaries right off the bat
06:27 < ejexin> er
06:27 < ejexin> i really don't lol
06:27 < ejexin> it's fine for the browser but that's it
06:27 < olalonde> but it doesn't map well to JS objects.. that's not good :(
06:27 < AAA_awright> olalonde: Well it touches on my point, how are people going to write/read data?
06:28 < olalonde> AAA_awright: it's a developer library. it is not really concerned with what you are mentioning
06:28 < AAA_awright> ejexin: Perhaps because there's not a good API for that, you can't really go ol.forEach(/**/);
06:29 < olalonde> you could $('ol').each(); with jQuery
06:30 < AAA_awright> olalonde: Right, how will the developer read/write data?
06:30 < AAA_awright> You say you have multiple backend interfaces, but what about frontend?
06:30 < AAA_awright> Is it only JSON, or maybe other formats?
06:31 < olalonde> no frontend, not really part of my goals
06:31 < olalonde> it's all Javascript
06:31 < AAA_awright> How do people read data without a frontend >_>
06:31 < olalonde> mmmm I'm not sure I'm following
06:31 < AAA_awright> I want to get a particular resource, schema:User, id:5
06:31 < AAA_awright> How is that data returned
06:31 < olalonde> my library is a replacement for writing SQL queries by hand basically
06:32 < olalonde> returned as a javascript object
06:32 < AAA_awright> So, only JS (ES)
06:32 < olalonde> well yes. that's kind of the point :) mapping from various databases to JS
06:32 < AAA_awright> Probably JSON+Date+other stuff
06:33 < AAA_awright> Just that, though?
06:33 < olalonde> yes haha
06:33 < olalonde> quite a bit of work to be honest :)
06:34 < olalonde> https://github.com/olalonde/worm/blob/master/test/level1flat/getAll-where.js#L63
06:34 < olalonde> the syntax is a bit ugly at the moment :)
06:37 < olalonde> for now, i have support for postgresql, (mysql and websql but haven't tested) and only support 1-to-1 relationships lazy loading and eager loading. I am currently working on 1-to-many relationships
06:38 < olalonde> got started only a few days ago
06:57 < Freze> hi all
06:57 < Freze> are there any blog frameworks like jekyll for node
06:57 < olalonde> I think so, cant remember the name though
06:58 < olalonde> maybe http://zespia.tw/hexo/
06:59 < Freze> Nice
07:00 < Freze> Looks good I'll check it out
07:02 < Freze> what database does it use
07:11 < qrada> hey, anyone have an idea why my app.use() middleware is not firing before my app.post/app.get routes
07:11 < chovy> howdy
07:11 < qrada> sup
07:12 < chovy> how can i pass an argument that is a filename to a node script? The filename has spaces in it.
07:12 < qrada> node code.js path\ to\ filename
07:12 < qrada> node code.js "path to filename"
07:12 < qrada> either of those
07:12 < chovy> qrada: i want to use tab completion
07:13 < chovy> how do i read it in?
07:13 < qrada> i dont really get the q tbh, you are doing this on the command line?
07:14 < olalonde> qrada: make sure your other middlewares are above app.router
07:15 < olalonde> chovy: tab completion depends on your shell
07:15 < olalonde> zsh completes fine after I type: node <tab>
07:15 < olalonde> not sure about bash
07:15 < qrada> ya it is above app.router, hum ;/
07:16 < qrada> investigating
07:18 < qrada> olalonde: i have some controllers which add routes as they are loaded, this happens after express is already configured with my middleware, app.router, etc... could that be the issue?
07:18 < qrada> those routes are triggering fine.. it's just that they seem to bypass the middleware
07:19 < olalonde> anything above app.router should fire
07:19 < olalonde> which middleware is not firing?
07:19 < qrada> some custom one of mine.. it's firing for anything that i havn't explicitly done an app.get/app.post for
07:19 < qrada> which is odd
07:20 < olalonde> probably your calling next too early or twice
07:20 < olalonde> or it's after app.router :)
07:20 < olalonde> can you paste your code?
07:20 < qrada> it's def not after app.router but, it may be the next() issue
07:20 < qrada> well it's in a bunch of files so it'd be abeyotch to post atm
07:20 < qrada> lemme check the next's tho
07:21 < olalonde> just poste the code that sets up your connect stack
07:27 < lethalduck> Hi All. I'm using express 3.2.4, jade 0.30.0 in a web app. I started off by using the code from here: https://github.com/SeraphimSerapis/Bootstrap-for-Jade but I'm getting an error. http://pastebin.com/SUbaeia1
07:28 < qrada> olalonde: i found it... but i don't get it... pp.use('/assets', express.static(conf.strings.base+'/assets'))
07:28 < Zolmeister> lethalduck: check your jade templates
07:29 < qrada> pp/app
07:29 < Zolmeister> lethalduck: home.jade:23
07:29 < qrada> that app.use is what caused my middleware not to call
07:29 < qrada> but
07:29 < lethalduck> Zolmeister: Yip. Looking at it. Been looking at it for the last couple of hours
07:29 < qrada> i dno, that app.use static call it before my middleware func, i wasn't under the impressionthat mattered though since im specifying the route
07:30 < Zolmeister> lethalduck: (post it?)
07:30 < lethalduck> Not much in it.
07:30 < lethalduck> Zolmeister: http://pastebin.com/nSi2BfPv
07:31 <@MI6> joyent/node: Fedor Indutny master * dc50f27 : tls: share socket._hadError with http_client (+8 more commits) - http://git.io/zZPI5g
07:32 < Zolmeister> lethalduck: div.container!= body (layout.jade)
07:32 < Zolmeister> lethalduck: g2g, good luck
07:49 < qrada> im probably develping insanely broken code
07:49 < qrada> like usual. lul
08:20 < ralf_> hey there, is that the correct way to implement a loop with callbacks?: function loop(min,max){ someObject.doSomething(function(){ if (min++<max) { loop(min+1,max) } }) }); ...... loop(0,10);
08:22 < AAA_awright> ralf_: That doesn't look like it'll work, but you should consider trying it and see
08:23 < AAA_awright> I'd consider something like
08:23 < ralf_> AAA_awright: its just some pseudo code, i did it in that way.. but my question is more generelly, what about stackoverflow or something? i mean, its recursion? 
08:24 < AAA_awright> function iterate(i, count, callback){ if(i>=count){return void callback();} get(function(){ /* do something*/; iterate(i+1, count, callback); }); }; iterate(0, 10, function(){/*done*/});
08:25 < AAA_awright> ralf_: It's not considered recursion because the function passed to get() function here isn't called by get()
08:25 < ralf_> ..yes, what i said, but with callback i missed ;)
08:26 < AAA_awright> It'll be called by the event loop when the database operation (for example) returns data
08:26 < ralf_> ah ok
08:26 < ralf_> AAA_awright: so iam doing it correctly, thanks
08:26 < AAA_awright> ralf_: Uh no, you have an min++ which you probably don't want
08:27 < ralf_> AAA_awright: i want a loop from 0 to 10
08:27 < ralf_> AAA_awright: not from 0 to infinite
08:27 < AAA_awright> ralf_: You have both min++ and min+1
08:27 < ralf_> AAA_awright: yes, sorry, typo
08:27 < AAA_awright> That'll go 0, 2, 4, 6, 8
08:27 < AAA_awright> Alright
08:27 < ralf_> thanks
08:40 < doryz> can anyone help ?
08:40 < doryz> I'm looking at AirBnb Rendr...
08:40 < doryz> would love opinions..
08:40 < doryz> http://stackoverflow.com/questions/17131127/how-stable-is-airbnb-node-js-rendr
08:40 < tuhoojabotti> Anyone know a module that listens for a file and streams new data?
08:40 < tuhoojabotti> Or do I have to build it myself with fs.watch and readStream
08:41 < jfisk1987> hey all
08:42 < doryz> tuhoojabotti, try looking at socket.io
08:42 < jfisk1987> if i want to make my own RESTFul API with node whats the best way to auth if i dont want to use fb/twitter sign on?
08:42 < yields> any good alternatives to mongoose ?
08:42 < tuhoojabotti> doryz: I'm not handling with clients.
08:42 < jfisk1987> i saw this, but since im very new t all this i figured id ask: https://github.com/jaredhanson/oauth2orize
08:42 < substack> tuhoojabotti: is it line-delimited?
08:42 < tuhoojabotti> substack: Yeah, I plan on watching some log files.
08:43 < substack> tuhoojabotti: http://github.com/substack/slice-file https://github.com/substack/logdir
08:43 < tuhoojabotti> substack: I knew I could count on you.
08:45 < substack> doryz: you haven't asked for any objective answers
08:46 < substack> "how stable is ..." is hugely subjective
08:47 < substack> "has anyone used" is also a really poor question that tells you nothing
09:49 < faceleg> how does one make a module serve some static JS?
09:59 < faceleg> done
10:15 < OODavo> So I'm trying to set up Browserify using https://github.com/andreypopp/connect-browserify to work on CoffeeScript sources (since apparently it works on CoffeeScript sources). Currently I'm getting an error on running the app about being "Unable to resolve or reject the same promise twice"; I suspect this error isn't really specific enough to troubleshoot effectively.
10:18 < andreypopp> OODavo: hi, it seems like browserify calls callback twice which looks like a bug... let me check
10:19 < OODavo> Aha. I've narrowed it down a little: The file I was trying to use does a require('jquery'), and the npm jQuery package I have installed isn't the browserify-capable one. So that particular error may in fact be my fault.
10:20 < substack> OODavo: can you get your thing working with the regular browserify on the command line?
10:20 < OODavo> However, when I comment out that require, I'm finding that requiring other CoffeeScript modules isn't working right. With source require('./submodule') and a file 'submodule.coffee' in the same dir as that script, I get an error like "module "./submodule" not found".
10:20 < andreypopp> OODavo: hm... but it still seems a bit weird... it looks like browserify calls callback several times (one per each error encountered)
10:21 < OODavo> I think the added stuff to support .coffee extensions isn't working right?
10:21 < substack> OODavo: you should require('./submodule.coffee') explicitly
10:21 < substack> no magic required
10:21 < andreypopp> substack: connect-browserify uses my fork right now...
10:21 < andreypopp> magical fork apparently :-)
10:22 < andreypopp> substack: it seems like browserify calls callback on bundle several times — do you consider this a possible bug?
10:23 < OODavo> Yeah, one of the main reasons I'm trying connect-browserify over other stuff (node-enchilada for instance) is that it has magic for .coffee extensions. :P
10:24 < andreypopp> OODavo: does it work w/ browserified version of jquery?
10:26 < OODavo> andreypopp: Doesn't look like it does. Same error.
10:27 < andreypopp> can you run "node ./node_modules/connect-browserify/node_modules/browserify/bin/cmd.js YOUR_ENTRY_FILE"
10:28 < OODavo> Sure.
10:28 < OODavo> It produced a bunch of correct-looking browserified JS and then this error:
10:28 < OODavo> > Error: module "./lib-cov/express" not found from "/Users/david/projects/browserify_example/node_modules/express/index.js"
10:29 < substack> coffeescript makes everything so needlessly difficult
10:29 < substack> for such a marginal gain
10:30 < andreypopp> OODavo: I'm not sure it makes sense to have express in the browser... but anyway browserify cmd calls process.exit(1) on first error so it doesn't say us if there are further errors... 
10:31 < OODavo> Oh wait, hang on.
10:32 < OODavo> I entirely misinterpreted what you were asking and ran browserify on my /serverside/ main file instead.
10:32 < OODavo> Whoops.
10:32 < OODavo> I'll try that again. :P
10:33 < OODavo> Okay, it's not finding jQuery, either as 'jquery' or 'jquery-browserify'.
10:34 < OODavo> It's also not finding the submodule unless I coffee -c it first, but that's probably not surprising since browserify doesn't look at .coffee by default, right?
10:34 < andreypopp> OODavo: ah, you should supply "-e '.coffee'" argument
10:35 < andreypopp> w/o doublequotes
10:35 < andreypopp> but regarding jquery — you probably don't have it installed in your node_modules
10:35 < OODavo> When I add a -e '.coffee' I get: > Error: module "/Users/david/projects/browserify_example/.coffee" not found in require()
10:37 < andreypopp> OODavo: sorry again, --extension '.coffee'
10:37 < OODavo> Ah.
10:37 < andreypopp> I probably have to get some sleep :-)
10:37 < OODavo> Alright, with --extension '.coffee' and also -t coffeeiy added on, it produces this one: Error: module "./submodule" not found from "/Users/david/projects/browserify_example/public/js/app.coffee"
10:39 < andreypopp> OODavo: that's strange — it works for me... in my test case
10:39 < andreypopp> OODavo: do you have /Users/david/projects/browserify_example/public/js/submodule.coffee ?
10:40 < OODavo> Yep, that file does exist.
10:40 < viperfx> hey guys I am working with this module here: https://npmjs.org/package/omxcontrol and socket.io. At this line: I know that the exec call has exited and I want to send a socket emit back to the client. https://github.com/rikkertkoppes/omxcontrol/blob/master/index.js#L52
10:41 < viperfx> Could anyone help me out on how I can do this?
10:41 < andreypopp> and you run "node ./node_modules/connect-browserify/node_modules/browserify/bin/cmd.js --extension '.coffee' -t coffeeify /Users/david/projects/browserify_example/public/js/app.coffee" ?
10:41 < OODavo> My exact commandline is this: node node_modules/connect-browserify/node_modules/browserify/bin/cmd.js --extension '.coffee' -t coffeeify public/js/app.coffee
10:42 < viperfx> I am calling omx.start in my app.js which goes to that line in the module.
10:42 < OODavo> (The pwd is the project root, /Users/david/projects/browserify_example)
10:43 < andreypopp> can you try once with "./public/js/app.coffee" instead of "public/js/app.coffee" — I remember browserify sometimes behaves differently on these...
10:44 < OODavo> Produces exactly the same error message.
10:44 < andreypopp> then I'm out of options... sorry :-(
10:45 < OODavo> Hmm. Your browserify fork relies on forks of browser-resolve and module-deps, right?
10:46 < OODavo> At least, all three such packages have forks mentioned in the connect-browserify package.json dependencies.
10:47 < andreypopp> OODavo: hm... that could be a problem — I depend on forks only for connect-browserify not for browserify itself...
10:47 < zenetik> hi, is there a way to disable debugger when sending SIGUSR1 to a node process ?
10:48 < OODavo> Yeah, that's what I'm getting at. Your forked browserify doesn't point to the other forks in its own package.json. Maybe it should?
10:48 < airtonix> i'm looking for something like sphinx for javascript projects
10:48 < andreypopp> OODavo: yes, you're right
10:48 < viperfx> airtonix: why dont you setup an API using an existing client?
10:49 < viperfx> airtonix: or do you need a nodejs solution
10:49 < andreypopp> OODavo: node-browser-resolve already have my patch merged, I think substack will merge needed changes to module-deps and browserify soon — so maybe we should just wait a little...
10:49 < airtonix> viperfx: i need something that compiles the docstrings in my javascript into a nice readable html
10:50 < viperfx> ah sorry i thought you were talking about sphinxsearch
10:50 < airtonix> viperfx: python has this with sphinx. 
10:50 < viperfx> Does anyone have a suggest for my issue?
10:50 < airtonix> viperfx: yeah spinx search is just the search component of sphinx documentation generator
10:50 < viperfx> suggestion*
10:50 < OODavo> andreypopp: Hmm. Fair enough.
10:51 < andreypopp> OODavo: in the meantime you could just do "rm -rf ./node_modules/connect-browserify/node_modules/browserify/node_modules/{module-reps,browser-resolve}" — then ones from "./node_modules/connect-browserify/node_modules/" will be used
10:51 < OODavo> I'll see if that works.
10:51 < airtonix> viperfx: http://stackoverflow.com/questions/9263005/javascript-documentation-generation
10:51 < OODavo> Hmm. Getting another error after doing that.
10:52 < OODavo> > TypeError: Cannot read property 'main' of undefined
10:52 < airtonix> actually yuidoc looks good
10:52 < OODavo> Does Node indeed resolve dependencies to "higher" node_modules directories when they're not found deeper in?
10:53 < andreypopp> OODavo: it should
10:55 < OODavo> Right, resolving them to the right node_modules wasn't a problem. I tried copying them into browserify's own node_modules and that didn't change anything.
10:56 < andreypopp> OODavo: I fixed reps and pushed a new version of connect-browserify
10:57 < andreypopp> OODavo: browserify works w/ .coffee on a clean installation for me no
10:57 < andreypopp> now*
10:58 < andreypopp> rm -rf ./node_modules/connect-browserify && npm install connect-browserify
10:58 < andreypopp> it should install connect-browserify 0.4.1
10:58 < viperfx> For long running calls, is it best practice to use an eventemitter to check the progress
10:59 < substack> viperfx: do you have a more concrete example of what you're trying to do?
10:59 < viperfx> could you see my question above?
10:59 < OODavo> andreypopp: That installed but it's producing the same error I got after manually removing the "wrong" modules from browserify/node_modules.
11:00 < viperfx> substack: should i repost it?
11:00 < substack> I found it.
11:00 < substack> I don't use socket.io so I'm not going to offer an opinion.
11:00 < OODavo> It looks like the error is being produced in connect-browserify/node_modules/browser-resolve/node_modules/resolve/lib/async.js.
11:01 < OODavo> It may in fact be a problem with recent versions of resolve?
11:01 < viperfx> okay thats fine, i think this is more of a JS/nodejs problem 
11:01 < OODavo> Actually, yep, it's this one: https://github.com/substack/node-resolve/issues/22
11:01 < viperfx> the socket.io stuff is not an issue once I can get something back to app.js
11:02 < substack> I just use streams everywhere.
11:02 < andreypopp> OODavo: hm...
11:03 < viperfx> substack: how can I use it with the example I showed?
11:05  * OODavo tries rm'ing and npm installing connect-browserify again. Not that that is likely to make a difference if upstream is the same.
11:08 < OODavo> Yeah, still having that issue. Something about that version of browserify with that version of resolve doesn't mesh properly, it seems.
11:15 < andreypopp> OODavo: that's strange because it works actually for me
11:16 < andreypopp> OODavo: https://gist.github.com/andreypopp/495eb146ad5313fde2d2
11:20 < OODavo> andreypopp: Huh. Okay, that exact example works for me too. In fact, the error I'm getting only arises when I try to require('browserify-jquery'); perhaps that needs to be updated to work with more recent versions of browserify or something?
11:20 < andreypopp> OODavo: by the way I use jqueryify
11:21 < andreypopp> OODavo: browserify-jquery was updated 2 years ago and has version 1.6.3
11:21 < andreypopp> OODavo: http://npmjs.org/package/jqueryify is of 2.0.0 version
11:22 < Antix_> quick q: is dota2lounge using node js?
11:22 < andreypopp> OODavo: you can also install 1.9.1 if you care about older browsers
11:22 < OODavo> Aha, cool.
11:23 < OODavo> Hmm, does connect-browserify support package mapping? Like require: {jquery: 'jqueryify'}?
11:23 < OODavo> (This may or may not actually be called package mapping.)
11:24 < andreypopp> OODavo: don't think so, I probably should expose a function which configures bundle in the API
11:26 < OODavo> Okay cool, I went with the horrible horrible hack method to make sure it works (ln -s jqueryify jquery) and it does indeed work perfectly.
11:28 < OODavo> Right, so the main thing I need to keep in mind here is that browserify-jquery is a million years old.
11:31 < andreypopp> Yeah, there are lot of jqueries on npm :-)
11:35 < OODavo> Excellent. Everything's working as wanted now.
11:35 < OODavo> Thanks for the help. c:
11:35 < substack> OODavo: just use a <script> tag for jquery
11:35 < substack> so much simpler
11:36 < substack> jquery sucks anyways
11:36 < substack> best to avoid it completely if you can
11:36 < OODavo> Perhaps, but this wasn't really about getting jQuery to work specifically. Just getting the modules going in general so I can use more useful ones. :P
11:57 < viperfx> yea got my event emitter to work! 
11:59 < viperfx> i realised what i was doing wrong in the shower :)
12:23 < shoshy> hey, i'm seeking for some help using r.js ... :/ been sitting and reading for hours and testing with out success..
12:51 < az> hey all. Can you suggest any hosting for node.js ?
12:51 < Guest46606> hey all. Can you suggest any hosting for node.js ?
12:51 <@isaacbw> you're such a lovely human being
13:34 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:35 < accc> hi
13:37 < demio> just woke up to go to the bathroom
13:37 < demio> err wrong window
13:42 < kad_> hello everyone
13:42 < kad_> can someone here tell me how I can use source maps with node-inspector ?
13:43 < kad_> I thought the feature was added but it don't seem to be working
13:53 <@isaacbw> demio: lol
14:11 < tuhoojabotti> substack: http://lahdenvuo.info/irc/#mc Here's what I managed to cobble together.
14:11 < tuhoojabotti> In this afternoon.
14:16 < tuhoojabotti> http://lahdenvuo.info/irc/#node
14:23 < Aria> tuhoojabotti: That looks spiffy!
14:24 < tuhoojabotti> Thanks. :)
14:24 < Aria> Almost seizure inducing as it starts, but I like how it settles.
14:24 < tuhoojabotti> Heh, yeah.
14:25 < Aria> Any interesting backend to it? 
14:25 < tuhoojabotti> you can drag and drop the nodes.
14:25 < tuhoojabotti> I'm pushing it to Github as we speak.
14:28 < tuhoojabotti> Aria: https://github.com/tuhoojabotti/NodePieSpy
14:30 < Aria> Fun! All in-core graph.
14:31 < tuhoojabotti> Quite simple.
14:36 < tuhoojabotti> Aria: Feel free to contribute. :P
14:42 < Aria> My interests in graphs lie in the other end of the spectrum -- massive graph stores and queries, rather than small visualizations.
14:43 < Aria> Basically if nodes > available pixels, you have my attention ;-)
14:44 < tuhoojabotti> Aria: Well maybe this project could use a better backend than a .log file. :P
14:44 < Aria> Hehe. 
14:44 < Aria> 4store might be my go-to for something like this.
14:49 < Keva161> very cool! and impressive for an afternoons work
14:50 < tuhoojabotti> Thanks. :)
14:52 < zenetik> i missed what you are speaking about
14:52 < zenetik> tuhoojabotti: _
14:52 < tuhoojabotti> http://lahdenvuo.info/irc/#node
14:52 < tuhoojabotti> https://github.com/tuhoojabotti/NodePieSpy
14:56 < zenetik> tuhoojabotti: nice
14:56 < tuhoojabotti> Thanks to you, too.
14:56 < tuhoojabotti> zenetik: I just need to implement more advanced heuristics.
14:57 < tuhoojabotti> And relationship decay.
14:57 < tuhoojabotti> And real-time updates with socket.io
14:57 < zenetik> tuhoojabotti: ha. That's the point, real-time updates
14:57 < zenetik> tuhoojabotti: exactly was i was thinking about
14:58 < tuhoojabotti> zenetik: The only problem is that I didn't want to make it a bot, instead it parses irssi logs and they don't update in real time.
14:58 < zenetik> tuhoojabotti: btw many people are using socket.io, i'm using faye module with pub/sub channel
15:00 < tuhoojabotti> zenetik: It allows client-to-client messaging?
15:00 < zenetik> tuhoojabotti: just code the entry point of realtime update using socket.io or faye, perhaps code an .on('newircline') event 
15:00 < tuhoojabotti> I don't think that's necessary
15:01 < tuhoojabotti> zenetik: The problem is not updating, it's getting the data.
15:01 < zenetik> tuhoojabotti: what's the data input ? an irc message ?
15:01 < tuhoojabotti> Irssi log.
15:02 < zenetik> you need a minimal history for heuristic
15:03 < zenetik> (i suppose)
15:03 < tuhoojabotti> zenetik: I need binary, direct and indirect interference heuristics. :P
15:04 < zenetik> tuhoojabotti: i don't know what you are speaking about :)
15:04 < tuhoojabotti> zenetik: Me neither, but I can cheat: https://github.com/mchelen/piespy/blob/master/org/jibble/socnet/DirectAddressingInferenceHeuristic.java
15:05 < zenetik> tuhoojabotti: lol :)
15:06 < Trudko> Hi guys, i am looking for first bigger app in nodejs and I am courious about technology stack. So far I have Express, Socket.IO, Connect, Jade, JqueryUI/Bootstrap, Some MVC on client and I am looking for some ORM yet, Did I forget something important ?
15:08 < Trudko> and something for testing
15:33 < nodenoob> hello guys, i'm using mongoose and express in a project, how do you usually validate forms data?
15:33 < nodenoob> do you validate on the controllers level or do you use mongoose validation?
15:33 < nodenoob> if you use the latter (at the model level) how can you define a custom error message to return to the user?
15:35 < nodenoob> also don't know if this is the correct place to ask, but do you know anyone good and available for consulting/freelancing?
15:36 < h22> guys, Is Unix time timezone dependent? That is, if we both use (new Date( )).getTime( ) now, will we get different numbers?
15:36 < nathan7> h22: No.
15:36 < nodenoob> it's GMT
15:36 < nathan7> no
15:36 < nathan7> It's UTC
15:36 < nodenoob> if i'm not wrng
15:36 < nodenoob> ok
15:36 < nathan7> GMT includes daylight savings
15:36 < nathan7> UNIX time is seconds since 00:00 January 1st 1970 UTC
15:36 < nathan7> JavaScript time is milliseconds since 00:00 January 1st 1970 UTC
15:37 < h22> nathan7: Thank you :)
15:42 < nodenoob> nathan7: GMT does not include daylight saving, it's always +0
15:42 < h22> Btw, Gmt === Utc+/- few seconds always no daylight (UK uses BST in summer).. but that's srsly off-topic
15:43 < nodenoob> exactly :)
15:43 < nathan7> nodenoob: mkay
15:43 < h22> and how I know this? Video games :P
15:43 < nathan7> anyway, it's defined as UTC, I couldn't care less what GMT is
15:43 < nodenoob> nathan7: almost the same thing UTC was GMT before 1972
15:44 < nathan7> nodenoob: mhm
15:44 < mscdex> OMGMT
15:45 < h22> Before UTC, Americans used "Z".. the British used GMT.. 
15:56 < nodenoob> i'll try to ask again later when ppl are not sleeping
15:58 < niggler> mikolalysenko poke
15:58 < niggler> sup nodenoob 
15:59 < niggler> its sunday and its father's day
16:02 < nodenoob> niggler: not much i'm in a validation nightmare
16:02 < robertkowalski> got a jscnf.eu ticket. yeah!
16:02 < nodenoob> so i was trying to figure what were common practices
16:03 < nodenoob> my question was where do you put validation? On routes/controllers level
16:03 < nodenoob> or on model level (i'm using mongoose)
16:03 < squeeks> all of the above.
16:04 < squeeks> validating endpoints: router. validating query/post data: controller. validating before storing data: model.
16:04 < nodenoob> isn't that redundant?
16:05 < squeeks> no?
16:05 < nodenoob> if you validate on post route why validate again on model before saving?
16:05 < squeeks> okay maybe it is if you don't actually do any work in your controller.
16:07 < jaya> Why there is no Documentation for SOCKET.IO ???
16:08 < nodenoob> jaya check the wiki page on github
16:08 < jaya> How we are supposed to Learn
16:08 <@tjfontaine> use the source luke
16:08 < nathan7> tjfontaine++
16:08 < mscdex> Boost your Learning!
16:08 < nathan7> heh
16:09 < jaya> There is no Good Tut for Socket.IO ... It's a Drag
16:10 < mscdex> jaya: http://socket.io
16:10 < JohnMcLear_2> Or sock.js
16:11 < JohnMcLear_2> Various librarier exist.
16:11 < JohnMcLear_2> -r+s
16:12 < nodenoob> jaya: https://github.com/learnboost/socket.io/wiki
16:16 < h22> jaya: maybe you're looking for __wrong__ tut? You should be looking for websockets tut.
16:25 <@isaacbw> jaya: there's not much to it
16:25 <@isaacbw> you just send and recieve messages
16:27 < niggler> nathan7 why do you postincrement?
16:32 < mikolalysenko> niggler: yo
16:33 < niggler> i ended up sending an issue your way mikolalysenko 
16:33 < nathan7> niggler: because preincrement is silly as a statement by itself
16:36 < niggler> x++ seems sillier than ++x
16:36 < mikolalysenko> for loop increments?
16:36 < mikolalysenko> for primitive types (and in js) it makes no difference
16:37 < mikolalysenko> but in C++, it is faster/better to use ++x
16:37 < niggler> for primitive types, sure
16:37 < niggler> exactly mikolalysenko 
16:42 <@isaacbw> wussup pretty people
16:42 <@isaacbw> have I told you I love you recently
16:43 < badem4o> :-*
16:43 < niggler> isaacbw what did you do for fathers day?
16:44 <@isaacbw> bought new pens
16:45 < Gabriel403> Fancy
16:45 <@isaacbw> I don't like them very much
16:46 <@isaacbw> too scratchy
16:47 < niggler> ?
16:47 < niggler> scratchy pens?
16:47 < tuhoojabotti> isaacbw: I did this: http://lahdenvuo.info/irc/#node
16:48 < niggler> dafuq tuhoojabotti ?
16:48 < tuhoojabotti> niggler: ?
16:48 < nathan7> HEY I SEE A ME
16:48 <@isaacbw> damn irc
16:48 <@isaacbw> now I have to try to make my dot as small as I can
16:49 < nathan7> isaacbw: NEVER
16:49 <@isaacbw> what to the edges mean?
16:49 < tuhoojabotti> relationships!
16:49 < nathan7> isaacbw: when I talk to you
16:49 < nathan7> isaacbw: it thickens
16:49 < tuhoojabotti> relationships everywhere
16:49 < nathan7> ..that sounds wrong out of context
16:49 < tuhoojabotti> nathan7: Well it doesn't count hilights yet.
16:49 <@isaacbw> nooooooo
16:49 < nathan7> You could make it realtime
16:49 < tuhoojabotti> nathan7: It's the plan.
16:50 < nathan7> I think it's something like ForceLayout#update
16:50 < niggler> wait wait nathan7 wouldn't your dot thicken?
16:50 < niggler> why would isaacbw's dot also thicken?
16:50 < nathan7> niggler: it would
16:50 <@isaacbw> did you do the physics yourself?
16:50 < nathan7> niggler: no, the edge would
16:50 < nathan7> isaacbw: d3 has builtin force stuff layouts
16:50 < niggler> why is isaacbw saying noooo in response to your comment then nathan7 ?
16:50 < nathan7> force-directed
16:50 < nathan7> niggler: the edge
16:50 < tuhoojabotti> isaacbw: D3.js
16:51 < nathan7> d3 is <3
16:51 <@isaacbw> ah cool
16:51 < tuhoojabotti> Just copied an example.
16:51 <@isaacbw> lol nice
16:51 < nathan7> I'm building a molecule editor with d3
16:51 < niggler> is this realtime?
16:51 < nathan7> niggler: not yet
16:51 < tuhoojabotti> niggler: No, but that's the plan.
16:52 < niggler> nathan7 know of any good web chemdraw program?
16:52 < nathan7> niggler: I use gchempaint (not web)
16:52 < overra> tuhoojabotti: nice stuff
16:52 < nathan7> niggler: it's the best I've used
16:52 < nathan7> niggler: Most feel more clunky
16:52 < niggler> better than chemdraw nathan7 ?
16:52 < nathan7> I tried ChemDraw
16:52 < nathan7> found it inconvenient to use
16:52 < nathan7> also gchempaint's grouping system is awesome
16:53 < nathan7> you can create a reaction entity from a bunch of things on the left, an arrow, bunch of things on the right
16:53 < nathan7> but there's no support for adding more than one thing above the arrow
16:54 < niggler> i assume you can write something above and below the arrow
16:54 < niggler> lol nathan7 http://www.cambridgesoft.com/Ensemble_for_Chemistry/ChemDraw/ChemDrawforiPad/Default.aspx
16:54 < nathan7> it supports labeling what the thing above the arrow is (temperature, reactant, yield, etc)
16:54 < nathan7> niggler: nope
16:54 < nathan7> niggler: just one thing, above it
16:54 < nathan7> which is my major issue with it
16:54 < niggler> :/
16:54 < nathan7> and it's C++ and a bit crashy
16:55 < nathan7> I've gotten halfway adding nicer stuff for it but the C++ is awful
16:55 < nathan7> and it's this really nice French-Canadian dude who develops it so you can't even shout at the dev
16:55 < niggler> from what i recall (i took orgasmic chemistry many years ago) chemdraw was the standard tool
16:56 < nathan7> I've drawn countless synths in gchempaint, I've grown to love it
16:56 < nathan7> but I'm working on a nicer one in JS for the browser
16:56 < tuhoojabotti> Contributions welcome! https://github.com/tuhoojabotti/NodePieSpy
16:56 < tuhoojabotti> Frontend not included in repo yet.
17:03 <@isaacbw> c++ really isn't very fun
17:03 <@tjfontaine> heh
17:03 <@isaacbw> I love c, but c++ is meh
17:03 < niggler> isaacbw you haven't played with boost
17:03 <@isaacbw> lol, I have
17:04 <@isaacbw> it only hardens my feelings
17:04 <@tjfontaine> boost is frackin huge
17:04 < niggler> the only thing which i like from C++ is template metaprogramming
17:04 <@tjfontaine> and so many templates, it makes the linker so slow
17:04 <@tjfontaine> heh
17:05 < niggler> then you don't end up with many different functions for different argument types
17:05 < niggler> abs, cabs, fabs, labs llabs
17:05 <@tjfontaine> yes you do, it's just automagical in the preprocessor, and noisey in the errors in the linker :)
17:06 < niggler> i meant in the code, not in the binary
17:07 < niggler> the errors really become messy when you start using STL with strings and other complex types
17:07 < niggler> basic_string<char> yada yada
17:07 <@tjfontaine> well it is in the code, you just dont' see it, it's only there when you compile :)
17:07 < niggler> ah
17:10 < qrada> hey, if anyone has a sec, can anyone gtell me why this doesn't trigger fs.watch at all: http://hastebin.com/xupuyejago.js
17:10 < qrada> im trying to have it return the full path to me, so im returning a function in the argument
17:10 < qrada> but it doesn't console.log at all
17:10 <@isaacbw> I love C, so it's not like system programming hatred or anything. C++ just feels like a huge mess
17:11 <@isaacbw> a nasty-ass attempt at OO
17:11 <@isaacbw> x11 is better though
17:12 < algesten> try objective-c, and run screaming to huddle up in foetal position in a corner.
17:12 < niggler> C++ tried to adapt every cool feature from programming in the past 20 years
17:12 < niggler> algesten objective-C is pretty well organized
17:12 < niggler> C is still the best
17:12 < algesten> niggler it's probably the ugliest language foisted upon the world, ever.
17:13 <@isaacbw> the syntax was designed by a robot
17:13 < niggler> are you saying that C++ is somehow better than objective C?
17:13 < algesten> niggler a true clusterfuck of irritating syntax and unnecessary verbosity.
17:13 < algesten> niggler. i'd chose C++ any day.
17:13 < Aria> Heh. Weirdo.
17:14 < algesten> but to be honest it's not a decision i want to make :)
17:14 <@isaacbw> lol
17:14 < niggler> we are in agreement that C > C++ and C > ObjC
17:14 <@isaacbw> woo
17:14 <@isaacbw> c 4 lyfe
17:14 < algesten> yes. this is correct.
17:14 < algesten> but then, i'm having too much fun writing javascript to worry about c now ;)
17:14 < niggler> C-style javascript!
17:15 < qrada> hah it's because if the path.search
17:15 < qrada> ok fixed
17:16 < enzo> hello
17:17 < caitp-> I've got a mongo daemon running on a remote machine, would it make sense to have client node scripts try to connect directly to it, or would it make more sense for there to be trusted scripts on the database machine that deal with all the data management/validation, and just access it over a secure tunnel?
17:17 < enzo> I'd like to fetch the outdated npm packages, so I do npm --global outdated, but If I do a script runned by nagios, this command returns nothing (however the script is working If i execute myself), any idea why ?
17:18 < enzo> npm checks some env settings maybe ? tty or so ?
17:28 < chibiskuld> Hello, I am having an issue with node js. When I spawn a new process with vm, and try to execute setTimeout(cb, to), I get the error:
17:28 < caitp-> lets say someone swipes a card and so Ive got their RFID code, I want to do something like ACLServer.authenticate(rfid, function() { /* Authenticated Successfully */ }, function() { /* Authentication failed */ }); or something like that. I'm just trying to figure out how to make this infrastructure work with mongo and node-control
17:28 < chibiskuld> ReferenceError: setTimeout is not defined
17:29 < caitp-> I don't want to make the client (eg maglock control) perform user authentication locally, that would seem problematic. ]=
17:37 < dschatz> Hi all, is there a way to set priorities for events in nodejs?
17:38 <@tjfontaine> you mean specify an order for listeners of a given emitted event?
17:39 < dschatz> I mean I have a filestream and a network stream and if both are readable, I rather prioritize the network stream over the filestream
17:40 <@tjfontaine> you could use something like TooTallNate's throttle transform and stick it on the network, but really streams work with a backpressure mechanism such that you're going as fast as you can regardless so I'm not sure what you expect a priority to give you
17:45 < dschatz> well I have some work that I want to do as long as I dont have network traffic to handle. My thought is that if the network stream event was higher priority than my other work, then I will always service the network first
17:49 < chibiskuld> You could write your own stack handler, but that could get slow and messy.
17:50 < dschatz> so theres no priority levels of events? or a background event?
17:50 < chibiskuld> It sounds like you are assuming Javascript is multithreaded?
17:50 < dschatz> no
17:51 < dschatz> I just have two workloads of different priorities, an event driven style is still appropriate
17:51 < not_a_number> hello
17:52 < chibiskuld> Then if you understand that javascript is not multithreaded, how do you suppose priorities would even work?
17:52 < not_a_number> does anyone know what the "gitHead" attribute in package.json mean & do I need to update it manually when I release or push code?
17:52 < not_a_number> I tag my releases so maybe not necessary?
17:52 < dschatz> I mean event priorities, for example I assume that on linux nodejs uses epoll, I could imagine separating events into three different epoll groups and always prioritizing them
17:54 < dschatz> im not asking for preemption, just that in the case that there are two events to choose from, I have some way to control which one should be preferred
17:55 < chibiskuld> What I'm saying, is you will never have two events to chose from. They will fire sequentially no matter what.
17:55 < dschatz> if a packet read completes and a file read completes while im in an event, then when I complete my event, I have two pending events
17:56 < chibiskuld> You will need to capture those events and write an event manager that some how determines what, "At the same time is" and determine which code to execute.
17:56 < dschatz> its an event loop, the same time is just when I check the loop
17:57 < nathan7> not_a_number: leave them out
17:57 < nathan7> not_a_number: npm adds these on installation, they are added on npm init for some odd reason
17:57 < nathan7> I should figure out why
17:58 < nathan7> it's been bugging me for a while
17:58 < not_a_number> ah great!  thanks for the clarification
17:59 < chibiskuld> dschatz, what does your event loop look like?
17:59 < dschatz> im not writing an event loop, nodejs has one, im wondering how I set event priorities
18:04 < chibiskuld> I see what's going on here. It looks like, unfortunately, there is no way to set priority. My suggestion would be to keep track of the priority yourself, and in your loop execute your events in order of your priority.
18:04 < chibiskuld> http://comments.gmane.org/gmane.comp.lang.javascript.nodejs/20231
18:05 < dschatz> looks like libev lets me set priorities but nodejs doesn't expose it =(
18:06 <@isaacbw> dschatz: why do you want to do that
18:07 < dschatz> I have network messages that I want to respond to at a higher priority than some other "background" work
18:07 <@isaacbw> you should probably start a new process
18:07 < qrada> hey, anyone here know how to delete a route in express, so that i can then re-add it
18:08 < qrada> with a different callback
18:08 < qrada> this is only for development stuff
18:09 < dschatz> isaacbw: I will probably have to do that, is there a reason not to expose libev's priorities though? A new process is a bit heavyweight for what I want
18:10 <@tjfontaine> 1) we no longer use libev, 2) support of such functionality is dubious in my estimation
18:10 < dschatz> what do you guys use now?
18:11 < Aria> qrada: I'm not sure -- though I did https://github.com/aredridel/require-reload to solve that myself.
18:11 <@tjfontaine> dschatz: github.com/joyent/libuv
18:11 < qrada> aria cool lemme check
18:12 <@isaacbw> dschatz: I think it's also somewhat of an abstraction issue
18:12 <@isaacbw> node.js programs aren't mean to think too much about the event loop
18:12 < qrada> aria,will that effect express routes though? because i am reloading the module... removing it from require.cache then re-requiring
18:12 < dschatz> isaacbw: really? That seems like the definining feature of nodejs
18:13 <@tjfontaine> dschatz: also I'm curious why you don't trust your operating system and event loop to satisfy your requests in a timely manner
18:14 <@isaacbw> dschatz: definitely, but it's like reading/writing files. You expect your OS to deal with the file system, the hard disk, etc.
18:14 <@isaacbw> but maybe it's just that no one has gotten around to exposing it
18:14 < Aria> qrada: It actually updates the object returned from require -- so yeah, it can work. It's just one (Sloppy) technique though
18:16 < dschatz> tjfontaine: for the same reason nodejs is event driven rather than spawning a bunch of threads, the OS is designed for certain scenarios that may not be ideal
18:16 <@tjfontaine> dschatz: the fs layer is threaded though
18:16 <@tjfontaine> but anyway your feature request should start in libuv, so feel free to file an issue
18:17 < dschatz> you mean the implementation of asynchronous reads and writes?
18:17 <@tjfontaine> yes
18:17 < Aria> Priorities in an eventloop leave some fun edge cases -- leads to starvation and such.
18:17 <@tjfontaine> indeed
18:17 <@tjfontaine> Aria: or priorities simply not working
18:18 < Aria> It's not usually what you want: you probably want to queue the work and accept it with extreme regularity, then actually _do_ the work according to your application's priority.
18:18 < dschatz> tjfontaine: that seems more like a problem with linux's interfaces than anything else
18:18 < Aria> (Push into heap, work on min-heap, spin loop.)
18:18 <@tjfontaine> this is all accomplishable with streams2 transform
18:19 < Aria> dschatz: Nah, it's actually that one can talk to oneself (directly and indirectly) that leads to most of the glitches. It's a powerful foot-gun, too.
18:19 < dschatz> yes, im aware that there are a number of hairy issues regarding it, was wondering if this was a concious decision not to support it in nodejs
18:19 < Aria> (and not usually what you want. You usually have to actually evaluate the work to do and defer the work to do it right, not defer the acklowedgement of the work)
18:19 < Aria> I don't think conscious, but I think there was a collective shying away from it.
18:20 < dschatz> ok
18:20 < Aria> One of those "this seems like a good idea... OH GOD THE EDGE CASES. RUN AWAY!" moments.
18:20 < qrada> bleh
18:20 <@tjfontaine> well also an expediency issue for getting libuv to stable
18:20 < Aria> But anyway -- try your own priorities. Insert jobs in a heap, work on min-heap, spin event loop. Repeat.
18:20 < qrada> it was working the entire time
18:21 < qrada> i'm just a retard eh... i auto-create a /auth/ route for example... but, when i parse the routes in the controller, that's not there, so i was only deleting /auth/create /auth/destroy etc..
18:21 < qrada> hehe
18:21 < Aria> Derp!
18:21 < qrada> ya
18:21 < qrada> :D
18:21 < qrada> im full of derp
18:21 < qrada> thanks for your help though aria
18:21 < Aria> Sure thing.
18:21 < Aria> I'm full of derp too ;-)
18:21 < qrada> im basically doing what you're doing, reloading modules when modified
18:22 < Aria> Yeah. It's a common idea.
18:22 < qrada> the only thing was, if i didn't explicitly remove the route from express... it would use the old callback
18:22 < Aria> I just did it myself to understand the loader well.
18:22 < qrada> so maybe yours deletes the dependencies much better
18:22 < qrada> cool
18:22 < Aria> Yeah, I took a different approach -- return a proxy function.
18:22 < qrada> ah
18:22 < qrada> interesting
18:22 < Aria> (Works for functions, needs harmony proxies to do it for objects)
18:24 < gblack> Hi guys, I'm new to node and working with XMPP. I'm using the module node-xmpp to handle the XMPP-Protocol. Currently I'm fighting with presence stanzas. Does somebody have experience with XMPP and Node and might help me?
18:27 < algesten> I'm having one of those The Awesomeness of Event Loop moments. Needed to do a script to download prod data to make test data. Around 2000 odd large-ish images that needs downloading. So I got an array of urls and my first thought is, ok, spawn child processes, say 10 of them, process a queue each. But then… I remember this is node.js, and the network *will* be the bottleneck, so why bother spawning anything? Just fire off 10 parallel 
18:27 < algesten>  VPN-connection be well saturated before my node process even breaks a sweat.
18:50 < wchoy> ![](http://f.cl.ly/items/1b3g3i1w120Z2U082I3G/Image%202011.11.07%202:31:35%20AM.png)
18:51 < Linkedipsoul> what's that irc client ?
18:55 < wchoy> IRC client (Linkinus)
18:55 < wchoy> Just trying to create a IRC Client on node.js
18:55 < wchoy> by following an example in a book
18:56 < wchoy> so just ignore me
18:59 <@isaacbw> wchoy: have you read the irc rfc?
19:00 < wchoy> I'm not that board
19:06 <@isaacbw> I see
19:32 < neeky> irc is actually a very easy protocol - 
19:32 < neeky> i wrote a few bots when I was first learning socket programming in c#
19:33 <@tjfontaine> it's the first step after hello world
19:35 <@isaacbw> it also gives you a bit of practice reading protocol specs if you haven't before
19:35 < neeky> the next step is SMTP client and then server
19:35 <@isaacbw> it's a very simple spec
19:35 <@isaacbw> no way, the next step is tcp
19:35 <@isaacbw> implement all the tcp layers
19:36 < neeky> gah
19:36 < neeky> hell I even form a caching DNS server in c#
19:36 < neeky> just to see if I could
19:36 <@isaacbw> nice
19:36 <@isaacbw> lol
19:37 < neeky> s/form/wrote/
19:38 < skope> can i call module function from inside the module?
19:39 < neeky> a cool bot would be a node app that watches #node.js and when it sees your nick it connects to Google Cloud Messaging and sends your phone an alert.
19:41 < neeky> skope, declare your function outside the export block
19:41 < neeky> then export it at the bottom of the module
19:42 < skope> neeky: okay, thanks
19:42 < neeky> var foo = function(){}; var bar = function(){return foo();}; module.exports = {foo: foo, bar:bar}
19:43 < qrada> i need to redo my darqbot in node.js.. it's written in C/asm lul
19:43 < qrada> bot writing is pretty fun tho
19:43 < neeky> a good way to get kicked too - test in your own channel first!
19:43 < neeky> that's from experience - 
19:44 < qrada> i test on my own ircd because i need to flood channels with huge jp2ascii's
19:45 < neeky> skope: you can also save a reference to the module outside the export scope
19:45 < qrada> https://github.com/adarqui/darqbot/blob/master/README
19:45 < qrada> lul. pretty hard to get that thing to compile tho
19:45 < neeky> var _this = this; exports.foo = function(){};
19:45 < qrada> it has a pretty diesel lisp-like syntax to communicate with it
19:45 < neeky> then you can use _this inside any exported function
19:48 <@isaacbw> does anyone know of an api that will initiate a conference call by calling all (including you) participants?
19:48 <@isaacbw> I know that google voice can do it internally, but they don't have a damn API yet
19:49 < squeeks> trello?
19:49 < neeky> isaacbw, like on a schedule?
19:49 < neeky> @2pm call 1,2,3,4,5
19:50 <@isaacbw> neeky: what is that last line for?
19:50 < Determinist> yo guys, any way to know when some object gets garbage collected?
19:50 < neeky> isaacbw, I was asking if you were referring to a scheduled call, like: "@2pm, call numbers1,2,3,4,5, and join them into a conference"
19:51 < Havvy> Determinist: No.
19:51 <@isaacbw> neeky: oh, yea
19:51 < Determinist> Havvy: no way to tap into the V8 underlying engine using some kinda plugin?
19:51 <@isaacbw> well, it doesn't have to do scheduling internally if there's just an API entry point for initiating the call
19:51 <@isaacbw> it's easy enough to do scheduling myself
19:51 < neeky> you could roll your own in freeswitch pretty easily
19:52 <@isaacbw> ah cool, I'll take a look
19:52 <@isaacbw> thanks
19:52 < Determinist> i've always wondered if there's a way for me to know if some incoming request left anything behind after being destroyed
19:52 < Havvy> Determinist: Perhaps if you had a C++ module....
19:52 < neeky> np - i was a freeswitch contributert for a while - it's easy to control it in javascript
19:52 < squeeks> twilio, not trello.
19:53 < neeky> it embeds spidermonkey javascript engine
19:53 < squeeks> http://www.twilio.com/docs/api/rest/conference
19:53 < Determinist> ok, let me ask this instead: is there any unique ID assigned to each object/function behind the scenes that can be retrieved?
19:54 < qrada> anyone know how to specify a field as unique, with node-orm2?
19:54 < qrada> i want to make say, username, UNIQUE
19:54 < qrada> i don't see anything in the docs
19:54 < Havvy> Determinist: I would assume so.
19:54 < Havvy> Since you can compare objects by identity.
19:54 < Determinist> Havvy: any way to expose that to the JS layer?
19:55 < Determinist> just trying to see if there's any point in me digging in that direction
19:55 < Havvy> Probably by doing something in the C++ layer. 
19:55 <@isaacbw> it would be really easy to leak memory with a native module
19:55 < Havvy> But I've not looked at the C++ layer. So I'm not sure how feasable (or infeasable) it would be.
19:55 <@isaacbw> if that's what you're into
19:56 < Determinist> isaacbw: i'm just wondering if there's a way to check if some incoming HTTP request left anything behind after being destroyed, really.
19:56 <@isaacbw> why
19:56 < Determinist> to test for memory leaks?
19:57 <@isaacbw> v8 has a garbage collector
19:57 <@isaacbw> all js has garbage collectors
19:57 < Determinist> isaacbw: so you're telling me there's nothing I could potentially do to cause a memory leak?
19:57 <@isaacbw> you can't get no damn memory leaks wit a garbage collector
19:57 <@isaacbw> you can get
19:57 <@isaacbw> memory
19:57 <@isaacbw> hemeroids
19:57  * Determinist blinks
19:57 < squeeks> isaacbw: wrong. you *can* memory leak.
19:58 < Determinist> some silly closure and a reference to something that's not strictly created by the request scope (like a DB object or some caching object)… i could imagine how that would create a memory leak.
19:58 < squeeks> … are you actually leaking
19:58 < squeeks> ?
19:59 < qrada> hey im a derp with databases.. usually my primary key for a 'users' table, is the id (auto increment/pri)... node-orm2 is only allowing me to use one 'unique key', should i make that unique key the 'username' ?.. i'll probably be referencing users by id though
19:59 < Determinist> leaking in the sense that something that was created/needed by a specific request and is no longer needed/relevent after the request has finished could be left lingering behind
19:59 <@isaacbw> it's still not really a leak
19:59 <@isaacbw> a memory leak is where you lose all references to the memory location so it's impossible to free the memory, and since js has no concept of memory locations...
20:00 < Determinist> semantics, it may not be a leak in the c/c++ sense, but it is in memory and is no longer necessary once the request has finished.
20:00 <@isaacbw> that's pretty easy to avoid if you aren't doing anything crazy
20:00 < squeeks> isaacbw: so you're saying that authors of VM code write perfect code?
20:00 <@isaacbw> if that's the concern, then you should be profiling v8, not a node app
20:00 < Determinist> isaacbw: you don't need to do crazy things to create such leaks… just a misunderstanding with some framework being used could end up with such leaks easily.
20:01 <@isaacbw> people say memory leak all the time, it's just silly, misleading, and irksome
20:01 <@isaacbw> so if you want to keep saying it, you have company
20:01 < Determinist> isaacbw: you're confusing me...
20:01 <@isaacbw> that's okay, I'm completely bonkers
20:01 <@isaacbw> don't pay me too much attention
20:01  * Determinist grins
20:01 < Determinist> alright
20:02 < qrada> anyone know if there is a node-orm2 channel
20:02 < qrada> on freenode
20:02 < Determinist> qrada: if there is, there's usually something indicating that in the project page/readme… is there?
20:02 < Segrel> qrada: I have no experience with node-orm2, but usually on relational databases you should have primary key on id, as well as keys you often reference stuff by
20:02 < Segrel> usually you can have multiple indexes (indices)
20:03 <@isaacbw> in short, no, there's not really any way short of watching the node process's memory usage
20:03 <@isaacbw> which isn't a very useful metric
20:03 < Segrel> but only one primary
20:03 < qrada> Determinist: ya im not finding anything so just figured id ask
20:03 < Determinist> qrada: *nod*
20:03 < qrada> ya segrel, with node-orm2 though i can't specify multiple keys.. or like, a primary ID and then unique username
20:03 < qrada> i mean i can mod the source but im wondering if it's not necessary
20:03 < qrada> don't see anything about it in the docs
20:04 < Segrel> wow, that sounds rather odd
20:05 < qrada> ya,.. the only thing i see is setting a new primary key
20:05 < qrada> from id to something you specify
20:05 < qrada> but i don't see anything about specifying multiple unique keys
20:07 < neeky> node-orm2 doesn't sound that useful if that's the case
20:07 < qrada> ya, i can't imagine this to be the case tho.. fuuuuuuuuuuuuufufuu
20:08 < qrada> https://github.com/dresende/node-orm2#advanced-options
20:09 < qrada> am i mistaken? im only seeing being able to change the primary key, one key solely
20:10 < Aria> Why not use database integrity checks for that?
20:11 < qrada> havn't thought of that, not sure if orm2 does that
20:11 < qrada> sec
20:11 < Aria> Call me curmudgeonly, but I still don't get this ORM fad. Rows are tuples are objects, database connectors make a nice way to load and store them, and you're never gonna hide an SQL-based RDBMS satisfactorily, so admit it and use it well.
20:11 < Aria> So CREATE UNIQUE INDEX foo_username ON foo (username); and call it a day ;-)
20:11 < neeky> qrada, you could enforce uniqueness ina pre-save hook probably by looking it up yourself
20:12 < Aria> Not unless you have database transactions.
20:12 < qrada> for sure aria.. i just wanted to do it through orm2 tho
20:12 < qrada> everything through that api
20:12  * Aria looks at it and kinda cringes. 
20:12 < qrada> y
20:13 < Aria> I still think ORMs automate the easy part of using SQL and keep the hard part hard.
20:13 < neeky> Aria, ORM comes into it
20:13 < neeky> s own with MongeDB
20:13 < neeky> MOngoDB
20:13 < Aria> Or at least most ORMs do. Since most ORMs don't map much between relations and objects.
20:13 < qrada> ya aria but, ifi wanted to switch backends on the DB
20:13 < neeky> crap - can't type
20:13 < qrada> i could do so, very ez
20:13 < qrada> kind of what i want atm
20:13 < Aria> Heh. Mongo's not relational so ORM is a misnomer ;-)
20:13 < qrada> so that's why im using it
20:13 < Aria> SQL2003 doesn't get you that?
20:13 < qrada> :w
20:14 < qrada> not familiar with that
20:14 < neeky> Aria, that's why an ORM is an ORM -  
20:14 < neeky> it allows you to define relation between objects - I'd never use an ORM on an RDBMS 
20:15 < neeky> relations are already there
20:15 < neeky> noSQL has its place
20:16 < neeky> like with document based storage
20:16 < qrada> im just writing a small mvc framework, modeling it after sailsJS, and sailsjs uses sails-waterline.. so im kind of mimic'n that with node-orm2. ok im out, thanks for the help everyone
20:16 < Aria> ORM means "Object-relational". If you're not mapping to relations ... it's not an ORM
20:16 < qrada> pc
20:19 < neeky> In my case, I use Mongoose for the rich schema features on top of schema-less mongodb
20:19 < neeky> so in my MVC app, M is mongo, C is 90% Mongoose
20:20 < neeky> I implement much of my controller in Mongoose stastics and methods
20:21 < neeky> but, i'm not a trained computer scientist, I'm just a hacker - so I may be wrong, but it works for me
20:21 < squeeks> "trained computer scientist" wat
20:21 < neeky> I don't have a degree in a computer firld
20:21 < neeky> field
20:21 < Gottox> either one is trained or one is scientist.
20:22 < neeky> I also type like shit
20:22 < Gottox> but it sounds like you're mixing controller and modell.
20:23 < neeky> Gottox, I am for sure. It would be hard to impossible to rip out mongoose and replace it with MySQL 
20:24 < Gottox> but MVC is hard to learn from books, imho. You've got to read and write some code to get a feeling what belongs to the controller and what to the model.
20:24 < neeky> but I also don't plan to.
20:24 < Gottox> It's hard to get rid of mongoose once you started using it. :)
20:24 < neeky> but people use stored procedures for controller logic too, so I don;t lose a lot of sleep over it - 
20:27 < Gottox> To me, mvc feels naturally in Java. But when it comes to node.js or RoR, I'm often finding myself in moving code between model and controller, because I just can't find the right place.
20:36 < neeky> same here
20:38 < opus_> Hey guys
20:39 < olalonde> hola
21:07 < sinclair|net> anyone feel like a discussion between angularjs, knockoutjs, backbone and ember?
21:08 < squeeks> not really, no.
21:08 < Havvy843> sinclair|net: Sure. Don't use any of them. :P
21:08 < sinclair|net> Havvy843: oh?
21:08 < sinclair|net> why not?
21:08 < ejexin> neither do i
21:09 < sinclair|net> i think it would be crazy not to use them
21:09 < sinclair|net> (one of them at least)
21:09 < sinclair|net> at this point in time, i really really like knockout
21:09 < Aria> And I love Backbone.
21:10 < sinclair|net> Aria: a lot of people do
21:10 < sinclair|net> Aria: i think it would be good to talk about them
21:10 < Aria> (I kinda like the simplicity, and the acyclic nature of event handling. Things only flow one way.)
21:10 < Segrel> only ever coded backbone and ember, but of those backbone feels better
21:10 < Aria> But I don't have strong opinions here. Backbone's easy to integrate with, which is a win to me.
21:10 < Aria> And it's small, so if it pisses you off, you can replace it.
21:10 < sinclair|net> Aria: i think backbone and knockout have different goals as projects
21:11 < Aria> Indeed, quite different.
21:11 < sinclair|net> Aria: do you use marinette?
21:11 < sinclair|net> with backbone?
21:11 < Aria> I don't.
21:12 < Aria> Seems too large. I like micromanaging tiny modules. Also, I'm not building single-page apps. I'm replacing some sidewide jquery soup, lots of components.
21:12 < Aria> And mostly server-side rendering.
21:12 < sinclair|net> Aria: well, the reason i really like knockout, is i can populate some in browser model (pure data), and apply that model to a ko template, 
21:13 < sinclair|net> Aria: so, i can do a ajax request, to populate data for the page, then i just need to write the template for that, and when the data changes, the DOM changes, 
21:13 < Aria> Indeed. Nothing keeps you from doing that in Backbone, too. It's just an orthogonal component. Doesn't need to be tied to Backbone except maybe as far as doStuffWithTemplate(model.attributes)
21:13 < mzarella> why would you do: exports = module.exports = createApplication; instead of: exports createApplication; ?
21:13 < sinclair|net> Aria: right
21:13 < Aria> Yeah, I do that with Backbone, but I keep control of the plumbing.
21:13 < mzarella> exports = createApplication; i mean
21:13 < mscdex> angularjs!
21:13 < Aria> mzarella: Because setting exports alone doesn't escape the module.
21:14 < sinclair|net> Aria: got 5 mins to look at something?
21:14 < Aria> Only 5, but sure.
21:14 < Aria> mzarella: The exports = is the superfluous part, but some people prefer the brevity.
21:15 < trolzie> hey all, newbie here, trying to figure out something in my terminal. Im getting "/private/etc/sudoers is mode 0644, should be 0440 sudo: no valid sudoers sources found, quitting" when trying to "sudo npm install node-dev -g" anyone know how i can fix this? any help would be appreciated
21:15 < monokrome> Does anyone know where the client-side code for jade is supposed to come frmo?
21:15 < monokrome> from*
21:15 < monokrome> I'm getting an error that it's trying to require('fs') from the client side :/
21:15 < mzarella> also http://nodejs.org/api/all.html#all_util_format_format shows that %j represents a json object, but http://nodejs.org/api/all.html#all_cycles seems to return a Boolean value. Is there something else I'm missing?
21:16 < mzarella> Aria: escape the module?
21:17 < Aria> mzarella: Node modules are in a closure. So merely assigning a variable (as opposed to a property on an object referenced from outside, like module) does nothing to the outside environment.
21:17 < mzarella> oh i see, you are setting exports to module.exports which is a global
21:18 < Aria> Yep.
21:18 < mzarella> which means this is then available to other modules/files
21:18 < Aria> Or is at least referenced by the loader, not really global.
21:18 < mzarella> thank you Aria
21:18 < Aria> (so it can be returned from require)
21:18 < Aria> Sure thing.
21:18 < Aria> I wish that modules were defined by return, but that ship sailed. Oh well!
21:19 < Multiply> Is there a way to spawn a process, in it's own process group?
21:20 < mzarella> JSGI is "500x faster than connect", but it hasn't been updated in a couple years. i wonder why connect is used more often, and why jsgi hasn't been updated
21:20 < mscdex> Multiply: set `detached` to true in the spawn options object
21:20 < Aria> "500x faster than connect" needs substantiation
21:20 < nathan7> mzarella: Your module is prefixed with function(module, require, exports) {
21:20 < mzarella> http://www.sitepen.com/blog/2010/06/11/jsgi-vs-connect-for-node-middleware/
21:20 < AAA_awright> Aria: That's a rather lousy reason not to change the behavior
21:21 < Multiply> mscdex: Thanks, I'll try it out.
21:21 < AAA_awright> Even if it did break reverse-compatability, increment the major version number to indicate it
21:21 < Multiply> mscdex, I can't believe I missed that. Doh.
21:22 < AAA_awright> Aria: But actually, ES prohibits a "return" statement that's not itself inside an explicit function(){} block. Node.js does this internally, though not necessarially.
21:22 < Aria> AAA_awright: Sure. Then we'd have broken the world at least a dozen extra times. I like having the library of working parts instead.
21:22 < Aria> AAA_awright: And yeah, node can say it's allowed. So I see no problem with it.
21:22 < AAA_awright> ES *shouldn't* prohibit a statement, there's no reason it should... but it does, V8 enforces that
21:23 < Aria> Yeah. Return just doesn't MEAN anything with nothing to return from.
21:23 < AAA_awright> Well, not necessarially
21:23 < AAA_awright> It means stop execution
21:23 < Aria> If you define it to mean that, sure ;-)
21:23 < Aria> Unless it means stop execution  but leave callbacks running.
21:23 < AAA_awright> That's literally part of what it does
21:24 < AAA_awright> Just because there might not be something to return to, doesn't mean you can't offer a value to return anyways
21:24 < Aria> No, it pops the stack and continues running.
21:24 < Aria> Exiting a process is inherently different ;-)
21:24 < AAA_awright> return != exit
21:24 < AAA_awright> The module is treated as a function body
21:25 < AAA_awright> A module literally is a function
21:25 < AAA_awright> If you enabled "return" in a code block, it would mean the exact same thing as it does currently
21:30 < Aria> 'cept doesn't return to anything
21:32 < AAA_awright> So?
21:32 < Aria> That is indeed the question.
21:32 < AAA_awright> >> (function(){return;})(); // does that return to anything?
21:32 < purr> AAA_awright: undefined
21:33 < AAA_awright> Aria: And actually under your suggestion, that I like, it would return to something, it would be the return-value of require()
21:33 < Aria> It does indeed. It returns to its caller right there in the REPL.
21:35 < AAA_awright> Aria: Also that's a construct of the evaluation function implicitly reading the value of the statement as an expression
21:36 < AAA_awright> >> (function(){return;})(), void 0; // does that return to anything?
21:36 < purr> AAA_awright: undefined
21:36 < Aria> Anyway. I must run.
21:36 < AAA_awright> >> void (function(){return;})(); // how about that
21:36 < purr> AAA_awright: undefined
21:37 < olalonde> Uncaught TypeError: Converting circular structure to JSON
21:37 < olalonde> is there any way to get around this with util.format?
21:38 < Aria> Use util.inspect instead?
21:39 < AAA_awright> olalonde: Do you have a toJSON property defined on one of the objects?
21:40 < olalonde> no
21:40 < olalonde> I guess I could use util.inspect but it sucks having to include util everywhere :(
21:40 < olalonde> (I'm using node-debug)
21:41 < olalonde> would be nice if util.inspect would let me hide some properties
21:41 < olalonde> I guess I should use toJSON
21:42 < mzarella> 17:19  nathan7: mzarella: Your module is prefixed with function(module, require, exports) {
21:42 < mzarella> nathan7: i don't know what you are talking about there
21:42 < mzarella> was that directed at someone else?
21:43 < nathan7> mzarella: no, concerning your modules things
21:43 < nathan7> mzarella: exports = blah assigns to the local variable exports
21:47 < mzarella> cool, thanks for clarifying
21:47 < Multiply> Can you actually spawn a child process, from your main process's process.on('exit', ..) event?
21:49 < paulkon> Multiply: sure
21:49 < Multiply> It's weird, as it doesn't seem to start at all.
21:49 < Multiply> No errors, tho.
21:50 < paulkon> but if you want to have like a catch then I would start node within a monitoring program
21:50 < paulkon> like https://github.com/visionmedia/mon
21:50 < paulkon> that takes care of the process respawn and script exec, etc.
21:50 < Multiply> My main process starts serveral child processes, but for some reason, killing the parent process, always leaves one grandgrandchild process running, so intead I spawn a pkill. The actual pkill never happens, however.
21:51 < Multiply> instead*
21:51 -!- mode/#Node.js [+o TooTallNate] by ChanServ
21:54 < Multiply> paulkon, seems like using exec instead of spawn did the trick.
21:55 < mscdex> Multiply: there's also this from the spawn() docs: "When using the detached option to start a long-running process, the process will not stay running in the background unless it is provided with a stdio configuration that is not connected to the parent. If the parent's stdio is inherited, the child will remain attached to the controlling terminal."
21:56 < Multiply> mscdex, that, for my application is fine, however.
21:56 < Multiply> Atleast for now.
21:56 < paulkon> yeah if you don't need stdio then just exec
22:02 < eviltik> mscdex: ping
22:03 < eviltik> mscdex: do you know if stephenwvickers available on irc ?
22:03 < eviltik> (raw-socket)
22:04 < mscdex> eviltik: no idea
22:06 < eviltik> mscdex: ok thanks. i've succesfully sent a syn using raw-socket, but no syn+ack response, my packet is malformed, and i have no more google keyword for tcp buffer content
22:07 < eviltik> mscdex: i've already open a ticket for to add IPPROTO_TCP in raw-socket. Thanks a lot for your response
22:08 < ejexin> should I use app.js or node-webkit?
22:08 < squeeks> both.
22:09 < Gottox> there was a nice podcast which explained the difference between them.
22:09 < ejexin> it looks like app.js handles things by working sort of like a webserver
22:10 < eviltik> ejexin: i've made an app using app.js. Next will be webkit. Look at last commit date of appjs
22:10 < olalonde> what's app.js?
22:10 < eviltik> olalonde: https://github.com/appjs/appjs
22:11 < olalonde> cool, looks nice
22:11 < Gottox> one of them uses the same eventloop for browser and node.js, so you can share objects between browser and node.
22:11 < ejexin> eviltik: what, is node-webkit updated more often?
22:11 < Gottox> or do they both?
22:11 < olalonde> I wonder how it is different from other such projects
22:11 < olalonde> like mozilla prism IIRC
22:11 <@isaacbw> appjs is for turds
22:11 < olalonde> the fact that it uses Node.js is a big plus I guess
22:12 < ejexin> ic
22:12 < ejexin> turds
22:12 < Gottox> https://groups.google.com/forum/#!topic/appjs-dev/3u9dSsp0dUM
22:13 < ejexin> dunno
22:13 < eviltik> ejexin: read Gottox link, and make your choice
22:13 < ejexin> yeah i am
22:13 <@isaacbw> ejexin: you got it
22:13 < Gottox> and here's a padcast about node-webkit, also mentioning app.js: http://javascriptjabber.com/035-jsj-node-webkit/
22:14 < ejexin> i think node-webkit looks more appealing 
22:14 < Gottox> -pad+pod
22:14 < ejexin> since i'd rather write it like a web-app
22:14 <@isaacbw> ejexin: on account of it not making you a turd and all
22:15 < ejexin> :P
22:15 < ejexin> isaacbw: why do you prefer it?
22:16 < eviltik> does somebody got knowledge regarding raw-socket ? (node module, or related)
22:17 < jfisk1987> hey everyone, is there an equivilent of php sessions in node?
22:17 < jfisk1987> im working on a backend where facebook handles the auth through an iOS client and im new to node
22:19 < eviltik> jfisk1987: depend of your middlewar. express got sessions. probably over frameworks too
22:19 < jfisk1987> eviltik: im using express
22:21 < eviltik> jfisk1987: so you can use session
22:21 < eviltik>     app.use(express.session({ secret: 'nothingSecretHere' }));
22:21 <@isaacbw> ejexin: because I don't want to be a turd
22:21 < eviltik> wtf is a turd ?
22:22 < jfisk1987> eviltik: thanks, now i just need to figure out how to implement hat with faceboo kconnect. Ive only done basic username/pw logins and using php sessiosn in a web app this is all new :)
22:22 < ejexin> eviltik: vulgar. A lump of excrement.
22:22 < eviltik> jfisk1987: good luck
22:23 <@isaacbw> yuck, let's be more civilized and not talk about stuff like that
22:23 < eviltik> +1
22:23 < ejexin> he asked
22:23 <@isaacbw> maybe he's a turd
22:23 < eviltik> no. Just a shift
22:23 < olalonde> what's a turd?
22:23 < eviltik> SHIT
22:23 < olalonde> is it like a monad?
22:23 <@isaacbw> and is throwing us off the trail
22:24 <@isaacbw> monads are cool
22:24 <@isaacbw> ish
22:25 < olalonde> nomads too
22:25 < OliverJAsh> how can i get the running node version in my launch agent script (xml file)? i'm running node via NVM…
22:26 < OliverJAsh> and i don't want to hardcore it's location
22:26 <@isaacbw> OliverJAsh: can you elaborate
22:26 < nathan7> node -v?
22:26 < olalonde> launch agent?
22:26 < nathan7> process.version?
22:27 < OliverJAsh> isaacbw: i have a launch agent script to start a node module on start up (OS X machine). it takes XML and it wants a path to the binary for execution. i need to get the path to the node binary
22:27 < olalonde> maybe $(which node)
22:27 < OliverJAsh> olalonde: will that work inside XML?
22:27 < olalonde> no :(
22:27 < OliverJAsh> <string>[path]</string>
22:27 < eviltik> ...
22:27 <@isaacbw> OliverJAsh: doesn't nvm set up a symlink
22:27 <@isaacbw> just point to that symlink
22:28 < olalonde> it will if your script uses bash to launch node...
22:28 <@isaacbw> if it doesn't set up a symlink then it's just a turd
22:28 < OliverJAsh> isaacbw: where to?
22:28 <@isaacbw> probably /usr/bin/node
22:28 <@isaacbw> or maybe /usr/local/bin/node or maybe in your home
22:28 < olalonde> isaacbw: it doesn't
22:28 <@isaacbw> I'm sure nvm can be configured
22:28 < OliverJAsh> :(
22:29 <@isaacbw> why are you using some crazy xml launch thing anyway
22:29 < olalonde> it adds /Users/user/.nvm/vX.X.X/bin/ to your PATH
22:29 < eviltik> <turd>xml</turd>
22:29 <@isaacbw> olalonde: oh yuck
22:29 <@isaacbw> yea, probably which then
22:29 <@isaacbw> or you could do /usr/bin/env node probably
22:30 <@isaacbw> and if it needs a path, write a bash script that calls /usr/bin/env node
22:30 < olalonde> yea, that seems to  work
22:30 <@isaacbw> it depends on your stupid launch tool
22:31 < olalonde> your server is OS X? that's kind of unusual
22:31 < OliverJAsh> cool, thanks isaacbw. the launch thing is just an OS X thing.
22:31 < OliverJAsh> i think.
22:31 < nathan7> launchd!
22:31 < OliverJAsh> it's not a server. it's my machine :D
22:31 <@isaacbw> xml is so last year
22:31 < olalonde> and why do you need nvm in production?
22:31 < olalonde> weird requirements
22:32 < olalonde> why do you need an OS X launch script on your machine?
22:33 <@isaacbw> clicky keyboards are awesome with earplugs in
22:33 < OliverJAsh> olalonde: it's my machine, not a server. the node process i want to run on start up is just a handy utility for aliasing URLs https://github.com/phuu/distra
22:33 <@isaacbw> did /usr/bin/env node work for you?
22:33 < OliverJAsh> it needs to be kept alive.
22:33 < OliverJAsh> i haven't tried it yet. will try now
22:33 < olalonde> I see
22:34 <@isaacbw> and if if you can't do arguments for some stupid reason, just make a shell script
22:34 < olalonde> I'm fairly sure you can have an OS X launch script that does not use an XML file though :)
22:34 <@isaacbw> EVERYONE IS BEAUTIFUL AND SO ARE YOU
22:34 <@isaacbw> why can't open source developers make desktop environments as awesome as os x
22:35 <@isaacbw> why does dwm have to feel like the best option
22:35 < olalonde> and nvm will not work if the user who launches your script does not have nvm set up
22:35 < OliverJAsh> is there any way to run a globally installed NPM module via the node binary/CLI itself? as the path to the NPM module is something like ~/.nvm/vX.X.X/node_modules/…
22:35 < OliverJAsh> (sorry, didn't think this one through)
22:35 < eviltik> 00:33 <@isaacbw> why can't open source developers make desktop environments as awesome as os x
22:35 < OliverJAsh> olalonde: how else can you compose a launch script?
22:35 < olalonde> haha touche.
22:35 < eviltik> cause geek mode will not die
22:36 <@isaacbw> lol
22:36 <@isaacbw> it's not like they don't try. Ubuntu's Unity and Gnome 3 and all that. But they're pretty universally not so great
22:36 < jfisk1987> in my iOS app, the facebook auth stuff is done on the client, and i have a server that maps the user's facebook id to a reord in my datababse. The thing im trying to figrue out is how do i securely authorize a user for MY api?
22:36 < eviltik> agree
22:36 < nathan7> isaacbw: awesomeWM <3
22:36 < OliverJAsh> tried ubuntu, moved back to os x. i'm a sucker for aesthetics. 
22:36 < nathan7> isaacbw: though that's more of a WM-building toolkit than a WM
22:36 < nathan7> isaacbw: like node to a web framework
22:37 < nathan7> isaacbw: https://github.com/nathan7/awesomesauce + awesomeWM is what I run as WM
22:37 < OliverJAsh> tried various DEs on ubuntu too. nothing compared to OS X's DE.
22:37 <@isaacbw> nathan7: nice
22:37 <@isaacbw> OS X is the gold standard for desktop environments
22:37 < olalonde> OliverJAsh: I'm not sure. Maybe just launch a script that will launch your node daemon
22:37 < OliverJAsh> could do…
22:38 < olalonde> OS X is nice 
22:38 <@isaacbw> yea, what kind of crazy ass startup system uses xml
22:38 < olalonde> it runs on macbook airs
22:38 < jfisk1987> Mavericks is great
22:38 < olalonde> :)
22:38 < jfisk1987> big battery boost
22:38 <@tjfontaine> what's the problem with launchd scripts?
22:39 <@isaacbw> kde is huge, gnome is being dumbed down with each passing day, xfce doesn't work properly in archlinux, unity is stupid
22:39 <@isaacbw> the gnome developer ecosystem is pretty awful
22:39 < eviltik> isaacbw: try windows 8 !!
22:39 < OliverJAsh> tjfontaine: i need to run a globally installed npm module via a launchd script, but my node is managed via nvm and i don't want to hard code the path
22:39 < olalonde> who needs GUIs anyways
22:39 < olalonde> GUIs are overrated
22:39 < olalonde> :D
22:40 <@isaacbw> everything should be a curses application
22:40 < OliverJAsh> olalonde: haha, each to their own. i'm not clever enough to go without.
22:40 <@tjfontaine> OliverJAsh: oh ok
22:40 < olalonde> I like to watch my movies in the terminal
22:40 < olalonde> im just kidding OliverJAsh  :)
22:40 < eviltik> curses is overkill. everything should be like bal under prolog
22:41 < OliverJAsh> olalonde: some people honestly hold that opinion. to be fair though, it works for some people.
22:41 < olalonde> related xkcd: 
22:41 < olalonde> http://xkcd.com/378/
22:41 < olalonde> guess it's alright if all you do is system development
22:42 <@isaacbw> the only GUI I really use is my web browser
22:42 <@isaacbw> everything else is text based
22:43 < jrdn> random stupid silly question: i know how to structure files & directories for a library.. but what about the actual application (tests, coverage, and all)?  i'm trying to find a clean one out there.
22:43 <@isaacbw> and I open up a visual file manager every once in a while I guess
22:43 <@isaacbw> jrdn: it's pretty free-form and especially depends on how you're doing your tests
22:44 <@isaacbw> I like to have a src/ directory and a test/ directory under the root directory
22:44 <@isaacbw> but since there's no format build process, it doesn't matter much
22:44 <@isaacbw> *formal
22:44 < jrdn> @isaacbw, yeah that's what i currently have
22:44 < jrdn> what about assets / html
22:44 < jrdn> app/ directory in the root?
22:44 <@isaacbw> or static or www or whatever
22:44 <@isaacbw> or have it in a separate folder altogether and have nginx serve it
22:45 <@isaacbw> or if it's templates, a templates/ folder
22:45 <@isaacbw> really whatever tickles your fancy
22:45 < jrdn> and what about functional tests for that… have tests/src/blah or tests/www/blah
22:45 < jrdn> haha yeah, i'm just super OCD which is offing annoying. lol
22:45 < eviltik> https://code.google.com/p/syn-scan-lib/source/browse/trunk/RawSocketSniffer/SYNPackage.cs --> line 21, i'm looking for the buffer structure, 4 first bytes are src/dst ports
22:45 < jrdn> effing*
22:45 <@isaacbw> e2e/ maybe
22:45 <@isaacbw> test/e2e/ seems pretty good to me
22:46 < jrdn> e2e?
22:46 <@isaacbw> end to end
22:46 < jrdn> ah i see.
22:46 <@isaacbw> you're talking about testing behavior in a browser, right?
22:46 < jrdn> welp, that's just about the direction i was thinking.  thanks dude!
22:46 <@isaacbw> woo
22:46 < jrdn> ^^ yeah
22:47 < jrdn> or creating a separate repository for static that communicates to the rest app, etc.
22:47 <@isaacbw> people usually say e2e for browser testing
22:47 <@isaacbw> because it looks fancy
22:47 < jrdn> rofl
22:48 < paulkon> browserstack.com
22:48 < paulkon> works for me
22:48 <@isaacbw> or if you want to host it yourself, karma is the up and coming thing
22:49 <@isaacbw> SO MANY OPTIONS
22:49 <@isaacbw> IT'S DRIVING ME CRAAAAAAAZZY
22:50 < paulkon> pick the one that allows you to think less then :P
22:50 < paulkon> for browser testing... I just want it to work
22:50 <@isaacbw> man, testing is for turds
22:50 < paulkon> then what
22:50 < jrdn> yeah eff testing
22:50 <@isaacbw> I deploy and wait for angry emails
22:50 < jrdn> just deploy to deproduction
22:50 < Gottox> I use a very simple naming for my folders. They're all called foo with a different count of O's at the end.
22:50 < jrdn> don't even use git either
22:50 < paulkon> yeah... screw it
22:50 < jrdn> just rsync that crap
22:51 < olalonde> opinions are overrated
22:51 <@isaacbw> just make the contact page really hard to find and it won't be a big problem
22:51 < ChrisPartridge> haha
22:51 < jrdn> you know what, actually… connect to your server via FTP and upload… or use dropbox on all your servers and every time you save, it'd live
22:51 < jrdn> it's*
22:51 < paulkon> contact: youangrybro@betterbeimportant.com
22:51 < ChrisPartridge> just develop on the server
22:51 < jrdn> yeah
22:51 < jrdn> just make your laptop the server actually
22:52 < paulkon> dropbox that shit
22:52 < jrdn> lolol
22:52 <@isaacbw> make sure to use a dynamic dns so you can keep your app up when you go to a coffee shop
22:52 <@isaacbw> common rookie mistake
22:52 < paulkon> "dude.... it's going into production. let the dropbox sync finish"
22:52 < olalonde> haha :D
22:52 < paulkon> "DONT TOUCH IT"
22:52 < paulkon> it's working man!
22:53 < olalonde> I accidentally dropbox
22:53 < olalonde> shit
22:53 < olalonde> server down :(
22:56 < jrdn> haha @isaacbw dyna dns
22:56 < jrdn> you're reminding me of the olden days of hosting websites
22:57 < jrdn> seriously.. off my PC with dynadns .. sooooo fun.
22:57 < olalonde> .ath.cx
22:57 < olalonde> ulimit
23:01 < olalonde> i need inspiration
23:02 < olalonde> what should i use to test one-to-many relationship
23:02 < paulkon> one post, many comments
23:02 < olalonde> building - appartment
23:02 < olalonde> ah good idea
23:03 < olalonde> thanks
23:04 < paulkon> making a blog for databasing/templating/REST/sockets practice is the equivalent to making a game for canvas/webgl app practice imo
23:05 <@isaacbw> a blog is a good exersize
23:05 <@isaacbw> exercise
23:05 <@isaacbw> eexorsize
23:05 <@isaacbw> exorcize
23:05 <@isaacbw> DRIVE OUT DA DEMONS
23:06 <@isaacbw> THE POWER OF CHRIST COMPELS YE
23:12 < olalonde> -_-
23:12 < JohnMcLear_> \o/
23:12 < JohnMcLear_> isaacbw been drinking? :P
23:12 <@isaacbw> JohnMcLear_: I'm just going crazy is all
23:12 < olalonde> he's been programming with Java maybe
23:13 < JohnMcLear_> ah
23:13 < JohnMcLear_> that'd explain
23:14 < ChrisPartridge> isaacbw: you'll love this http://www.ebay.com/itm/Hand-made-Guinea-Pig-Scale-Mail-and-Helmet-Armor-/321142440749?afsrc=1
23:14 < olalonde> why is comment a reserved word in javascript :(
23:14 < olalonde> or is it?
23:14 < olalonde> my syntax highlighter does funky stuff for Comment
23:15 < ChrisPartridge> not that i'm aware of
23:15 <@isaacbw> ChrisPartridge: lol I do love that
23:15 < olalonde> yeah, it seems "comment" is a reserved word in Javascript
23:15 < olalonde> haha
23:16 < olalonde> well according to W3schools so I guess it is not
23:16 < ChrisPartridge> lol, w3schools?
23:16 < sinclair|net> ChrisPartridge: what is wrong with w3schools?
23:16 < olalonde> everything :)
23:17 < sinclair|net> such as?
23:17 < shoky> you just got an example now
23:17 < sinclair|net> nothing, that's what
23:17 < squeeks> http://w3fools.com/ start reading.
23:17 < olalonde> assuming you are not trolling w3fools.com
23:17 < olalonde> haha
23:18 < sinclair|net> er
23:18 < olalonde> it is filled with inaccurate/wrong information
23:18 < sinclair|net> this page is a troll, w3schools has a metric ton of useful information
23:18 < sinclair|net> such as?
23:19 < olalonde> such as "comment" is a reserved key word
23:19 < squeeks> "it's a troll" doesn't mean what you think it means.
23:19 < olalonde> I think sinclair|net is trolling us
23:19 <@isaacbw> man, does bitbucket not have ssh for write-access
23:19 < mmalecki> w3schools is the worst docs site for frontend I've ever seen
23:19 < olalonde> but hard to tell given Poe's law
23:20 < shoky> that page used to have tons of examples, where did they all ago
23:20 < sinclair|net> mmalecki: yeh, but who cares about the frontend
23:20 < shoky> go
23:20 < sinclair|net> mmalecki: i have spent hours trawling .txt files on opengl specifications, 
23:21 < sinclair|net> if the argument that w3schools is shit because of its front end, well, thats a pretty lame reason not to like it
23:21 < sinclair|net> i find the information in there useful from time to time
23:21 < mmalecki> sinclair|net: I mean, "frontend docs". it has terrible frontend docs.
23:21 < olalonde> maybe it has good info on opengl
23:21 < olalonde> but it does not have good info on javascript
23:21 < sinclair|net> olalonde: it doesn't have any info on opengl
23:22 < sinclair|net> afaik
23:22 < sinclair|net> olalonde: also, prior to w3schools, most of the web was filled with JS hacks and stupid ways of doing things
23:22 < olalonde> http://www.w3schools.com/js/tryit.asp?filename=try_win_blur
23:22 < olalonde> this for example
23:22 < olalonde> no var declaration… mixing javascript and html
23:23 < sinclair|net> olalonde: so?
23:23 < jrdn> sexy
23:23 < jrdn> turns me on
23:23 <@isaacbw> w3schools is what you use if you don't know about mdn
23:23 <@isaacbw> or if you're 12
23:23 < olalonde> sinclair|net: those are bad practices. I can point you to some blog posts if you are interested.
23:23 < skope> isaacbw: burn
23:23 < sinclair|net> isaacbw: don't be stupid
23:24 <@isaacbw> nothing wrong with being 12
23:24 < sinclair|net> olalonde: the page is not there to proclaim the use of 'var', its demonstrating how to do something
23:24 <@isaacbw> w3schools is for a different era
23:24 < sinclair|net> also, it was likely written years ago
23:25 <@isaacbw> the copy-paste era of javascript
23:25 < ejexin> mdn is superior 
23:25 <@isaacbw> with fancy spinny dots around your cursors because it looks so cool
23:25 < sinclair|net> isaacbw: pfft,. as if it isn't a copy paste era now
23:25 <@isaacbw> lol
23:25 < ChrisPartridge> throw in some dynamic drive scripts and you're set
23:25 < olalonde> sinclair|net: it's showing you how to do something the wrong way, that's what is bad. there is a good and wrong way btw
23:25 <@MI6> joyent/node: Ben Noordhuis master * 0581f5c : stream_wrap: fix signed/unsigned comparison warning (+1 more commits) - http://git.io/S70HRg
23:26 < sinclair|net> olalonde: its a inane example
23:26 < sinclair|net> olalonde: 3 lines of example javascript does not equate to it being bad, it does what it does
23:27 < sinclair|net> olalonde: i would probably take a offense to the javascript you write, doesn't mean its wrong,
23:27 < olalonde> sinclair|net: I don't really have time to explain all the ways w3schools is bad. you'll have to trust other people who have learned javascript through w3schools
23:27 < squeeks> sinclair|net: what does sand taste like?
23:28 < squeeks> I've never shoved my head in a bucket like that, sounds like you're well informed.
23:28 < olalonde> sinclair|net: I didn't say their javascript will throw errors. it's just a terrible website for learning javascript
23:28 <@isaacbw> sand is okay
23:28 <@isaacbw> I always think it will be more filling than it is
23:28 <@isaacbw> and less painful
23:29 < olalonde> sinclair|net: they also do have factually wrong information but i dont have time to go through their site right now :)
23:29 <@isaacbw> it's mostly just old
23:29 < sinclair|net> olalonde: most sites do
23:29 < olalonde> sinclair|net: by all means use w3schools but you've been warned!
23:29 < sinclair|net> and yeah, its mostly old
23:29 < ejexin> that's fine if most sites do but the mdn is a wiki
23:29 < ejexin> so if it does you can fix it yourself
23:29 < sinclair|net> olalonde: i don't need to use w3schools
23:29 < sinclair|net> i use mdn
23:29 < sinclair|net> (and msdn)
23:30 < olalonde> well there you go
23:31 < sinclair|net> olalonde: just because i don't use w3schools, doesn't mean i think its a shit site, it has merits being there, as does any site that provides a wealth of free information
23:31 <@isaacbw> oh there we go, bitbucket does allow write-access through ssh
23:31 <@isaacbw> that was pretty alarming
23:31 < olalonde> sinclair|net: in my opinion, it does more harm than good
23:31 < olalonde> sinclair|net: but it seems your opinion is made so let's agree to disagree
23:35 < ChrisPartridge> isaacbw: using bb for free private repos?
23:35 <@isaacbw> ChrisPartridge: yerp
23:36 <@isaacbw> I used to use github, but I kept thinking I would accidentally make a private repo public
23:36 < olalonde> I think we both agree that 1) w3schools contains sub par information 2) there is a better alternative (MDN). where we disagree is on semantics… the definition of "shit site"
23:36 <@isaacbw> which is just as possible with bitbucket
23:36 <@isaacbw> but I don't know
23:36 < paulkon> I've got to say that the most lean and most useful site I know of is stackoverflow
23:36 <@isaacbw> I like bitbucket more
23:36 < ChrisPartridge> isaacbw: oh rly, might have to give it a shot - just don't want them to come along and say "YOU PAY NOW!"
23:37 < olalonde> I use bitbucket for hosting private npm modules
23:37 < AAA_awright> olalonde: *packages
23:37 <@isaacbw> ChrisPartridge: I don't think they would. They seem to have everything together business-wise
23:37 < paulkon> what's wrong with github?
23:38 <@isaacbw> nothing's wrong with github
23:38 < paulkon> compared to bitbucket
23:38 < paulkon> why not just use github
23:38 < olalonde> paulkon: bitbucket has free private repos, github does not. I use github for public repos
23:38 < paulkon> ah
23:38 <@isaacbw> because I like bitbucket better
23:39 < paulkon> geez, who has the patience to make a guinea pig scale-mail
23:39 <@isaacbw> I prefer the tree view among other things
23:40 < olalonde> the tree view on GH sucks :(
23:40 < paulkon> that I agree with ^
23:40 < monokrome> most interfaces on GH are terrible
23:40 < olalonde> I wish they improved it
23:40 < monokrome> pull requests and issues are okay
23:40 < monokrome> that's about it
23:41 < jrdn> anyone use restify?
23:41 < olalonde> my 2 complaints about GH are : the new search bar, tree view
23:41 < monokrome> you can't configure / disable their ridiculous keyboard shortcuts
23:41 < paulkon> whoa....
23:41 < paulkon> bitbucket is cool
23:42 < paulkon> ignorance is not bliss anymore
23:42 < monokrome> lol
23:51 < motiooon> hi anyone interested in building a nodes project together?
23:51 < motiooon> i'm looking for a nodejs dev
23:51 < Zolmeister> whats the project?
23:51 < JohnMcLear_> Are you willing to pay for my time?
23:55 < blogometer> Hello.
23:56 < prettyrobots> Can I copy within the same buffer using Buffer.copy?
23:59 <@tjfontaine> sure why not? https://gist.github.com/tjfontaine/534424656ee6180521da
--- Log closed Mon Jun 17 00:00:39 2013
