--- Log opened Fri Apr 19 00:00:48 2013
00:03 < ChrisPartridge> GOMADWarrior: you can use AWS free tier, otherwise just get a cheap vps
00:09 -!- mode/#Node.js [-o gnarf] by gnarf
00:11 < tds5016> hey. I have a file as a base64 string.
00:11 < tds5016> what is the best way to send that to the client as a download?
00:12 < tds5016> or how would I send that the the client with a content-disposition of attachment?
00:12 < GOMADWarrior> whats AWS?
00:13 < tds5016> amazon web services?
00:14 < ChrisPartridge> tds5016: set the headers and send it down with encoding set to base64?
00:14 < tds5016> ChrisPartridge: do you have an example of that? I'll send you what I have...
00:15 < tds5016> http://jsfiddle.net/nYLAe/
00:16 < tds5016> That's what I have, which I'm clearly doing the wrong way. lol.
00:16 < howdynihao> i would decode it
00:17 < ChrisPartridge> yeah, and actually set the headers - intstead of just delcaring them
00:17 < danielnu> does anyone know if someone has started developing a node based CMS?
00:18 < tds5016> howdynihao: what do you mean by decode?
00:18 < AAA_awright> GOMADWarrior: Personally I'm on https://modulus.io/
00:18 < tds5016> It should already be decoded. I don't want to save the file to disk. I just want to get it in a string and spit it back as a download :-/.
00:18 < AAA_awright> danielnu: Why Node.js?
00:19 < danielnu> just curious
00:19 < GOMADWarrior> in appfog it says i need ruby
00:19 < howdynihao> res.send(new Buffer(base64uri, 'base64'));
00:19 < GOMADWarrior> is modulus free?
00:19 <@isaacbw> GOMADWarrior: why does everything have to be free
00:20 < AAA_awright> danielnu: Likise, I wonder what makes Node.js uniquely qualified for a content management system... http://magnode.org/ is my application
00:20 < GOMADWarrior> cuz then i dont have to spend money
00:21 < howdynihao> whats wrong with appfog?
00:21 < AAA_awright> GOMADWarrior: I don't think you're going to find people just donating their money so random people can have free application hosting, especially since it often requires root access
00:21 < AAA_awright> That's *expensive*
00:21 < tds5016> thanks!
00:21 < tds5016> 'Content-disposition': 'attachment; filename=meeting.pdf',
00:22 < tds5016> is that the right way to send the filename header?
00:22 < ChrisPartridge> tds5016: looks fine
00:22 < ChrisPartridge> give it a test run
00:22 < tds5016> it seems to download as downloadPDF
00:22 < AAA_awright> tds5016: What do you need it for? I consider it bad form
00:22 < tds5016> lol
00:22 < tds5016> AAA_awright: basically I generate a pdf client side.
00:23 < tds5016> and then I need to get that file to "download" on mobile safari.
00:23 < tds5016> so downloadify isn't an option :-/.
00:23 < howdynihao> tds5016: fyi, uri's have a max character size
00:23 < danielnu> AAA_awright: well, i was making a widget for my portfolio site to basically upload and store information through a back-end app with MongoDB to dynamically generate content on the front-end of a site, and it got me thinking if someone had set out to make an actual system for dynamically generating sites based of databases
00:23 < tds5016> max character size meaning?
00:23 < danielnu> using node + a database
00:23 < howdynihao> the length of a uri can't exceed like 2000 characters
00:24 < howdynihao> or something like that
00:24 < AAA_awright> danielnu: That's pretty much what I have, care to try it out?
00:24 < danielnu> AAA_awright: yeah sure
00:24 < tds5016> howdynihao: client side or server side?
00:24 < GOMADWarrior> well, at least ruby aint heavy
00:24 < AAA_awright> danielnu: Hit "Get Started" and bug me with any problems
00:24 < tds5016> howdynihao: this is essentailly a "string" that I'm senidng as a string, then resending out as a "binary"
00:25 < howdynihao> well you mentioned uri
00:25 < zamnuts> howdynihao, 2000 characters? that's a limit of what? nodejs?
00:25 < danielnu> AAA_awright: thanks a ton. I just got up and running with the Smashing Node.js book so ive been trying to see how much of my PHP/MySQL knowledge over to node/nosql haha
00:25 < howdynihao> zamnuts: thats a limit of the http protocol
00:25 < danielnu> knowlege I can transfer*
00:25 < tds5016> howdynihao: yeah. it started as a uri ;-). it basically just gets turned intoa  base64 encoded file by the time it gets down to the server.
00:26 < tds5016> and then it gets send back out as base64 encoded data.
00:26 < AAA_awright> tds5016: Is it possible to get by without sending Content-Disposition header? I try to avoid forcing people to download files if they can just as well view it in browser and use the browser's Save As option
00:26 < tds5016> AAA_awright: mmm, this really should be a download. :-/.
00:26 < zamnuts> howdynihao, RFC 2616 says there is no length for HTTP...
00:28 < howdynihao> my bad, i just saw that, it's a browser limit then
00:28 < howdynihao> http://support.microsoft.com/kb/208427
00:34 < zamnuts> howdynihao, thanks for clarifying :)
00:35 < tds5016> AAA_awright: for some reason it looks like it's not having my filename suggestion....
00:35 < tds5016> any idea how to fix that?
00:35 < AAA_awright> tds5016: It might purposefully ignore it, maybe for security
00:35 < AAA_awright> Try it on another browser
00:36 < tds5016> hmmm. is there a way to set the type so the browser knows what file extension to give it at least?
00:36 < ChrisPartridge> tds5016: are you actually setting the header? in your example before, you were defining it, but not setting it
00:37 < jaseemabid> What are my options to build a native GUI app with node? Shall I go with http://nodebox.net/ ?
00:37 < jaseemabid> Just want it to work on osx and linux. Don't bother windows. 
00:37 < tds5016> ChrisPartridge: how would I set it?
00:37 < tds5016> somehow in res.send?
00:38 < tds5016> oh snap! I see now!!!!
00:39 < tds5016> how would I actually send the headers as I've defined them?
00:39 < mscdex> jaseemabid: there's also projects like node-webkit
00:39 < AAA_awright> >_<
00:40 < AAA_awright> tds5016: So it wasn't sending the header at all?
00:40 < tds5016> AAA_awright: looks like. LOL!
00:41 < AAA_awright> So then do you even need the header?
00:41 < tds5016> I was defining them and then didn't send the with the res.send.
00:41 < AAA_awright> tds5016: Usually we prefer response.setHeader
00:41 < ChrisPartridge> well, he does need the header if he wants the filename
00:42 < AAA_awright> No? Most devices should use the filename part of the URI
00:42 < AAA_awright> danielnu: How's it coming?
00:42 < tds5016> AAA_awright: can you send me any docs on res.sendHeader?
00:43 < tds5016> sorry... sendheader
00:43 < AAA_awright> tds5016: Try the Node.js documentation...
00:43 < tds5016> bah!
00:43 < tds5016> setHeader*
00:43 < danielnu> AAA_awright: just looking through it now haha, been going back and forth between a tutorial i was doing and your app XD
00:43 < AAA_awright> nodejs.org/docs/latest/api/all.html
00:43 < AAA_awright> bah
00:43 < AAA_awright> tds5016: http://nodejs.org/docs/latest/api/all.html
00:43 < tds5016> thanks much!
00:43 < jaseemabid> mscdex Just noticed app.js 
00:45 < tds5016> thank you much! that worked like a charm!!!!
00:46 < tds5016> is there a way to get around the 2000 char limit on a datauri, btw?
00:46 < danielnu> again, uber noob question, but I have been doing all my node stuff locally; if I wanted to have an app (or website) hosted, who would I go through? Likewise, once you get a hosting service that supports node, how do you run your js files online?
00:46 < tds5016> I kind of hate having to do this round trip bit to get a PDF to the user that's already being created on their side. lol.
00:47 < dukedave> Okay, my first node project, it'll be polling updates from external APIs and sticking them in a MongoDB. Question: Mocha or Vows?
00:47 < AAA_awright> danielnu: You upload them and specify some sort of configuration, which file to launch, any environment variables to use, etc. And then it runs that, and reports back to you the output of the program and such.
00:48  * dukedave just started using vows, and now I'm reading blogs telling me to use mocha XD
00:49 < danielnu> AAA_awright: so you don't use terminal? Or you would upload the files and then SSH into your service and launch it from there?
00:49 < AAA_awright> danielnu: Depends on the service, some of them are minimalistic, don't offer SSH, effectively the same as shared hosting
00:49 < AAA_awright> (Usually it is)
00:51 < danielnu> AAA_awright: so essentially, if SSH wasn't offered, it would just have some option asking which file to launch with any environmental variables specified, and then you could go to whatever domain you have it hooked up to and it would be viewable like any website?
00:51 < mmalecki> danielnu: I'd recommend going with nodejitsu, but I'm biased (I work for them)
00:51 < mmalecki> check out the deployment process, it's really simple
00:53 < danielnu> mmalecki: Hahaha no worries regarding bias. I looked at it earlier, and I don't think I really understand the concept of a drone or when you would need multiple...the term wasnt covered in the book I am learning from :P could you explain this further?
00:53 < AAA_awright> Personally I use a VPS, same price and root access
00:54 < mmalecki> danielnu: sure. it's basically a single instance of application. if you're just learning, one is totally fine. one drone was able to handle front page of HackerNews kind of traffic before 
00:54 < ChrisPartridge> mmalecki: you guys are running on top of joyent right?
00:55 < mmalecki> ChrisPartridge: we are. also telefonica, but that's the same technology stack
00:55 < ChrisPartridge> mmalecki: smartos ftw
00:55 < mmalecki> I know, right?
00:56 < mmalecki> it has some quirks tho. I have a strong love-hate relationship with it.
00:56 < ChrisPartridge> yeah, slowly getting used to it - you guys using KVM instances for drones?
00:57 < mscdex> jaseemabid: afaik app.js doesn't actually merge the event loops between node and webkit, it does some message passing thing
00:58 < mmalecki> ChrisPartridge: we're using tiny 256 MB instances, Joyent handles this for us. they are zones under the hood
00:58 < mmalecki> and damn, they are performing nicely
00:59 < mscdex> 256mb is enough for anybody
00:59 < danielnu> mmalecki: okay sweet! yeah its just for my portfolio site to start so it won't be anything too crazy. now, regarding domain and storage, how does that work when using nodejitsu?
01:00 < mmalecki> mscdex: it actually encourages specific type of thinking about your application
01:01 < mmalecki> and you can get bigger instances too
01:01 < mmalecki> danielnu: you can have a custom domain with every plan we offer. we can also provision database instances for you. HD is like 2 GB, but does not persist between deploys
01:03 < danielnu> mmalecki: awesome. thanks for the answer :]
01:05 < mmalecki> danielnu: pleasure :)
01:46 < nemothekid> How should I host my node app in production? Are there any suggested options besides  putting it behind nginx?
01:46 < ChrisPartridge> mmalecki: awesome, so telefonica are using smartos/sdc?
01:48 < mmalecki> ChrisPartridge: yup, http://cloud.telefonica.com/instantservers/
01:54 < ChrisPartridge> nemothekid: use iptables (or equiv) to forward traffic from 80/443 to nginx/node-http-proxy/your app
01:55 < John__> hi gais baibai
02:08 < glitch273> I made a guide using SockJS, Redis, Node.js if anyone is interested :)  http://jinzhang.me/blog/3/ 
02:20 < ChrisPartridge> glitch273: looks good
02:21 < glitch273> ChrisPartridge: thank you :)
02:56 < breck7> anyone know how to refresh a https://npmjs.org/package/* page?
02:56 < breck7> the page for a package i updated is out of date
02:58 < breck7> nm
02:58 < breck7> was just cached
03:12 < kenperkins> breck7: It seems to take ~15 minutes to update in my experience
03:16 < GOMADWarrior> for appfog, what ports are allowed?
03:22 < howdynihao> 80,443 i believe
03:23 < GOMADWarrior> welp, it seems appfog doesnt support websockets
03:23 < GOMADWarrior> and I even downloaded ruby to use it
03:23 < howdynihao> yep
03:23 < neataroni> what are the tradeoffs between http request/response cycle vs pure websockets for say, an admin dashboard
03:24 < neataroni> the reason i ask is i am using sockets for the pieces of info, but why not just use them for the entire pages too?
03:26 < neataroni> like, anything missing from this discussion? http://stackoverflow.com/questions/8041710/build-a-whole-site-using-just-websockets-via-socket-io-and-node-js-no-ajax
03:29 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
03:29 < howdynihao> idk, do you need websockets?
03:29 < howdynihao> i mean the latency bit of that discussion isn't as a major factor as it is today
03:30 < howdynihao> err, isn't as a major factor today*
03:34 < hoogoo> hi,
03:34 < TheAceOfHearts> hi
03:34 < ChrisPartridge> hi
03:35 <@Nexxy> hi
03:36 < hoogoo> how can i start a timer in v8?
03:41 < duko> hi I'm wondering if anyone here can think of any major reasons why it would be better to render data to html on a client as opposed to retrieving and rendering fully formed html fragments
03:41 < ChrisPartridge> hoogoo: i'd suggest starting here http://nodejs.org/api/timers.html
03:42 < Havvy> duko: Because if you have general JSON services, you can use it for other things than just HTML.
03:42 < duko> if a person has a server that reliably responds with fully rendered html -is it useful to fully transition to client rendering or is it best to try something in between
03:42 < JamesMGreene> ChrisPartridge: Are you familiar with the new ReadableStream API?
03:44 < duko> I ask because I'm in a position where I need to present an argument for full client-side rendering to people who are in favor of simply binding some behaviour to links to render fully formed html to one or two elements in the document
03:44 < duko> I'm not sure if my position has enough strong points
03:45 < nlf> depends on a lot of things
03:45 < duko> specifically, the people who I'm working with want to implement something similar to this http://www.usatoday.com/?ajax=true
03:45 < nlf> how many users there are, how dynamic the content is, etc etc
03:45 < duko> usatoday was serves static pages but they have some shallow functionality when the links instead fetch these ajax=true links
03:45 < duko> and attach some limited behaviour with this data
03:46 < ChrisPartridge> JamesMGreene: I've had a play with them, I'm still mainly using 0.8.x though
03:46 < nlf> if the content is the same for every user, as in you could render the html server side once and simply deliver it 10,000 times it'd be a good way to go
03:46 < nlf> if each of 10,000 clients need to render completely different content, i'd let the clients do it or you're putting unnecessary load on the server
03:46 < JamesMGreene> ChrisPartridge: ditto, struggling to grok the full extend of the new API
03:47 < JamesMGreene> So I'm using the isaacs' "readable-stream" module
03:48 < mscdex> JamesMGreene: readable-stream is just streams2 from node 0.10.x extracted into an npm module
03:49 < JamesMGreene> mscdex: Understood, still doesn't mean I understand the new API :)
03:49 < mscdex> heh
03:49 < duko> nlf: what do you mean 'render completely different content'?
03:49 < duko> I'm thinking that usa today has it figured out
03:49 < nlf> basically if the server can't cache it and reuse it, it's not worth doing on the server
03:50 < duko> nlf ok thanks
03:52 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
03:57 < GOMADWarrior> http://tilebased.hp.af.cm/
03:58 < AAA_awright> nlf: It's highly unlikely that CPU is the bottleneck
04:03 < howdynihao> why do you load jquery but you dont use it?
04:03 < s5fs> "just in case"
04:04 <@Nexxy> it's too bad hoarders is gone
04:04 < howdynihao> whoever that was
04:04 < howdynihao> i just got you!! by throwing a sword at you
04:04 < s5fs> Nexxy: the $ blings it up a bit, the extra kb is worth the spice
04:05 <@Nexxy> var $ = require('mah-bling')
04:05 <@Nexxy> ;
04:05 < kenperkins> Nexxy what's attendance look like at pdx
04:06 <@Nexxy> for what?
04:06 < kenperkins> nodepdx
04:06 <@Nexxy> oh
04:06 <@Nexxy> very good!
04:07 <@Nexxy> I have it on good authority that it will be... 'off the hook'
04:09 < rking> niggler: You around, meyn?
04:12 < JamesMGreene> isaacbw isaacs konobi mbalho Nexxy piscisaureus_ substack et al: OK, so I think this gist illustrates my confusion about the new readable stream APIs. Can someone take a look? https://gist.github.com/JamesMGreene/5418084
04:24 < othiym23> Nexxy: of course it's going to be off the hook, *I'm* going to be there!
04:25 < othiym23> I need to talk to those guys some more about how many helicopters I should order, need to get that rolling
04:26 < s5fs> othiym23: whats this about helicopters?
04:26 < s5fs> i'm trying to get info on summer of drones
04:27 < kenperkins> man, I'm not sure I can swing another trip to portland
04:27 < s5fs> aww, weather is just starting to get nice
04:28 <@Nexxy> othiym23, o sweet
04:28 <@Nexxy> s5fs, is going to be there too
04:28 <@Nexxy> and mbalho !?
04:29 < othiym23> s5fs: if I can get my shit together, I'm going to do some Node programming of cheap single-rotor helicopters (from another computer)
04:29 < othiym23> it's sorta like quadcopters, but faster cheaper and more out of control
04:29 < s5fs> othiym23: sounds like a blast
04:29 < othiym23> Nexxy got to witness my "awesome" demo at the Voxer hardware hack day last December, when everything worked great except for my actual demo
04:29 < s5fs> that's a demo for you
04:29 < othiym23> it was "special"
04:30 < othiym23> nobody was injured or otherwise permanently damaged, at least
04:30 < s5fs> thats good, helicopters get both more dangerous and more impressive as the grow in size
04:30 < othiym23> I'm also gonna talk about a bunch of stuff you shouldn't do in Node, because I did it and it was a bad idea
04:30 < s5fs> oh, such as?
04:31 < othiym23> yeah, these are not teeny, but they're smaller than the Parron AR drones
04:31 < othiym23> the stuff I've done to try to instrument apps for New Relic
04:31 < othiym23> don't want to give away too many details beforehand ;)
04:31 < s5fs> you still over at new relic? i worked in the commonwealth for a while
04:31 < s5fs> at a non-profit
04:32 < s5fs> sounds like a fun talk!
04:32 < othiym23> I'm in SF, the PDX crew are in Big Pink now
04:32 < s5fs> yeah, i knew they were moving but wasn't sure when it was happening.
04:33 < othiym23> oddly enough, I'm a Portland native and my dad worked out of the 35th floor of Big Pink for years, so it's always a little weird visiting the Portland office
04:33 < kenperkins> othiym23 for whom?
04:33 < othiym23> Nexxy: pret. sure mbalho's gonna be around, yes
04:33  * kenperkins was in portland this week
04:33 < s5fs> how are you liking sf? i spent 8yrs down in the bay
04:34 < othiym23> kenperkins: Miller, Nash (Portland's perennially 2nd-largest law firm)
04:34 < othiym23> s5fs: I've been here since '95, and I like how much stuff happens here
04:34 < othiym23> and New Relic's SF office is right on the water and is gorgeous
04:34 < othiym23> also the weather is 1B times better than Portland's
04:34 < s5fs> othiym23: nice. i miss the bay, energy matches mine a bit better than portland
04:35 < othiym23> I love my home town but it's too white and too cloudy for me
04:35 < s5fs> indeed, after moving back it felt strange. huge lack of asian population.
04:35 < s5fs> really weirded me out
04:36 < othiym23> yeah, I live in the Parkside, so my neighbors are predominantly Chinese and Russian, and I like the diversity a lot
04:37 < s5fs> how big is the sf office compared to portland? are you also growing?
04:38 < othiym23> New Relic is exploding
04:38 <@Nexxy> easy now
04:38 < othiym23> the San Francisco office is probably 1.5x the size of Portland's, but that's largely down to the sales team
04:38 < othiym23> they're ~120 or so strong
04:38 < s5fs> wow!
04:38 < othiym23> I'm still 100% of New Relic's Node team, though ;)
04:39 < s5fs> ah, that's really interesting!
04:39 < othiym23> there are some other talented Node developers on the eng team, but they're all doing stuff on their own time
04:40 < s5fs> yeah, you've got some good talent over there, no doubt
04:40 < othiym23> we're not nearly as cultish as our presence at the food trucks might make it seem, either
04:41 < s5fs> it's the matching clothing that really sets the tone
04:41 <@Nexxy> lol
04:42 < s5fs> you know who else wore track suits and did webdev? the heavens gate folks
04:45 < othiym23> if we actually had track suits, I would wear one to work every day
04:45 < othiym23> just to be creepy
04:45 < s5fs> team zissou
04:52 < s5fs> othiym23: thanks for sharing about NR, the few folks I know over there seem to really like it.
04:52 < othiym23> no problem!
04:52 < othiym23> I like my job!
04:52 < s5fs> that's really important
04:52 < othiym23> although it's pretty hard and frustrating, technically speaking
04:52 < othiym23> should make for a decent presentation
04:53 < s5fs> i'm looking forward to it.
04:53 < s5fs> my talk is on a little wireless sensor network i built, just cuz it sounded fun
04:54 < othiym23> yay
04:54 < s5fs> my work is more pedestrian, business programming and as of late, a bit of embedded work. i'm fascinated by the really large and the really small haha
04:54 < othiym23> have you seen pinocc.io yet?
04:54 < s5fs> i don't think so
04:55 < othiym23> it's neat -- a coworker from my last job is one of the cofounders
04:55 < s5fs> oh man, there's so many of these little companies springing up
04:55 < othiym23> it's not as sexy as Ninjablocks, but they're little cut-down Arduino duders with built-in sensor / radio stuff on the PCB
04:55 < s5fs> it's really awesome, so much cool stuff going on
04:55 < s5fs> NB is freaking cool
04:55 < othiym23> yeah, I'm really looking forward to getting my box o' devices from pinocc.io
04:56 < othiym23> gonna quantify my house
04:56 < othiym23> I think Ward Cunningham's going to be talking about some home sensor stuff as well
04:57 < othiym23> he touched on some of it at RealtimeConf last fall, but he was mostly talking about Smallest Federated Wiki, so I'm curious to learn more about what he was doing
04:57 < s5fs> yeah, i saw that, should be interesting. i've seen him talk about his federated wiki at the pdx js admirers meeting, cool stuff
04:58 < othiym23> he's probably talked about SFW enough, tbh ;)
04:58 < s5fs> have you tried it?
04:58 < othiym23> it's really neat, but I saw his presenatation at Fluent and RealtimeConf and they were pretty similar
04:59 < othiym23> yeah, I've played with both the Ruby and the Node versions
04:59 < othiym23> I thought and think it's one of the most interesting evolutions of wiki I've seen (unsurprisingly enough)
04:59 < s5fs> it's an interesting concept for sure
05:04 < Asterokid> Hey, Can you use and github http adress for a devDependency in package.json?
05:06 < othiym23> Asterokid: sure, you can use GH URLs for any of the *depenedencies fields
05:07 < Asterokid> othiym23 thx :D
05:11 < JamesMGreene> isaacbw isaacs konobi mbalho Nexxy piscisaureus_ substack et al: OK, so I think this gist illustrates my confusion about the new readable stream APIs. Can someone take a look and field my ~2 questions? https://gist.github.com/JamesMGreene/5418084
05:16 < Tsad> hey all, im new to node and looking for a bit of advice, anyone has a few minutes for me ?
05:21 < JamesMGreene> Really? No one? :(
05:23 < howdynihao> the doorbell ninjablock confuses me
05:23 < howdynihao> it says get notified on your phone, never miss a delivery again, so if you're not home how can you get the delivery anyway??
05:24 < howdynihao> and if you are home, how does one not hear the door bell ring but hears their phone ring
05:37 < ningu> anyone know if there's a module to do something like perl's tr///?
05:40 < AAA_awright> ningu: What are you looking to do? What is that?
05:40 < ningu> AAA_awright: just a convenience method. it lets you do $str =~ tr/abc/def/; and each a becomes d, each b becomes e, etc.
05:41 < ningu> obviously I could write the equivalent myself, just wondering if someone has saved me the trouble
05:41 < AAA_awright> It's a two-liner
05:42 < AAA_awright> Uh
05:42 < ningu> yeah, pretty much
05:42 < ningu> I'll just write it :)
05:43 < AAA_awright> >> '0123abcxyz'.replace(/[abc]/g, function(v){ return ({a:'d', b:'e', c:'f'})[v]; });
05:43 < purr> AAA_awright: (string) '0123defxyz'
06:00 < jjore> What are people using for source code style to allow javadoc-style API doc generation and outlines to be just trivially created?
06:19 < TehShrike> https://dl.dropboxusercontent.com/u/5764687/why/037_FIGHTS.pdf
06:20 < TehShrike> jjore: they write a module that does ~1 thing, and then write a readme.md file explaining how using that thing works
06:20 < TehShrike> Generally
06:21 < TehShrike> For the more technical stuff, they write test cases
06:21 < emostar> pboos: hows it going?
06:21 < jjore> Dang. That's really disappointing.
06:21 < howdynihao> jjore: check out dox
06:23 < pboos> emostar: good :D stop writing me on gtalk ;-)
06:23 < emostar> pboos: just making sure things are going well ;)
06:23 < TehShrike> I've been working with Java for the last month or so.  The quality of most javadocs seems to be less than the mean quality of most node.js module readme's
06:24 < jjore> Shrug. You were using poor code?
06:24 < brycebaril1> jjore: you could try JSDoc 3, it supposedly can output to html
06:24 < brycebaril> not sure if you can use it for Eclipse smarts
06:25 < jjore> I was /really/ hoping for Eclipse-smarts that would just work if handed typically class-y code.
06:26 < jjore> since classy code is pretty much exactly what Eclipse knows how to work with already.
06:39 < Asterokid> I have a hard time figuring out why npm install does not work with all these github dependency packages
06:39 < Asterokid> help :D
06:41 < ChrisPartridge> Asterokid: like which packages
06:41 < Asterokid> leapjs
06:41 < Asterokid> ChrisPartridge
06:44 -!- mode/#Node.js [+o gnarf] by ChanServ
06:46 -!- mode/#Node.js [+o Nexxy] by ChanServ
06:56 < kornnflake> any idea why spellcheck wont install?
06:56 < kornnflake> http://sprunge.us/TOIJ
07:08 < deoxxa> i have a bug: https://gist.github.com/deoxxa/0405c3fefdb7f8c25d37
07:08 < wolfspraul> my readline rl.on('line') eats tabs...
07:08 < deoxxa> basically streams are not fun when the whole thing is synchronous
07:08 < wolfspraul> tabs are converted to a series of spaces, don't know why or where
07:08 < deoxxa> i.e. no setImmediate or process.nextTick
07:08 < wolfspraul> is that inside readline?
07:22 < trinitas> i have a node irc (irc.js library) client but all users gets my ip when connecting. is it possible to get the real hostname and ip? 
07:24 < ChrisPartridge> trinitas: your server is making the connection, so most likely not
07:25 < trinitas> the node app and irc server is on the same computer
07:25 < trinitas> ChrisPartridge
07:26 < ChrisPartridge> how are users connecting to the server? through your node app?
07:26 < ChrisPartridge> trinitas: ^
07:26 < trinitas> ChrisPartridge, yes
07:28 < ChrisPartridge> trinitas: do your users install the node app? or just access the copy you are running?
07:28 < ChrisPartridge> if the latter, then ofcourse they will have your IP address
07:28 < trinitas> ChrisPartridge, they acces it by webb interface. by adding nodes dns "var dns = require dns" i can get the hostname in the console. 
07:29 < trinitas> or ip
07:30 < trinitas> maybe i can trick the irc server somehow?
07:31 < trinitas> irc library: martynsmith/node-irc
07:31 < howdynihao> you can't
07:31 < kornnflake> can you recommend me a twitter module?
07:31 < chrismatheson> Hi, just sroping in to aska general . . . (best approach) type question . . . I need to collate & re-arrange 3-10 large XML files into a sinlge object that can then be passed to handlebars. so far im using xpath but ive got quite a lot of nested loops and it dosent feel particularly 'nice'
07:31 < kornnflake> want to send tweets and access the streaming api
07:32 < chrismatheson> are there any sugestions as to tacling these kind of problmes ??
07:32 < chrismatheson> *droping
07:32 < trinitas> howdynihao, really?
07:33 < chrismatheson> kornflake i used "twitter" package in a project. it was really easy to get up and running npm install twitter
07:33 < howdynihao> trinitas: ya really... why is that a shock heh
07:34 < howdynihao> if you dont want them to have your ip, then have your web app make them do the connection
07:36 < trinitas> howdynihao, is it possible to make them connect with no download of my app?
07:36 < deoxxa> isaacs: i have a weird stream edge case! i know how much you love them! https://github.com/joyent/node/issues/5337
07:37 < [AD]Turbo> yo
07:50 < trinity> howdyn someone stole my name. any ideas?
07:50 < trinity> about my problem
07:50 < trinity> irc problem
07:52 < howdynihao> no, no way you'd be happy with
07:52 < trinity> howdynihao, flash socket?
07:53 < howdynihao> if youre fine with using flash then yea use flash
07:56 < trinity> must be a workaround...
07:56 < trinity> somehow
07:59 < howdynihao> well what is the purpose, is this just a private thing?
07:59 < howdynihao> or are we talking connecting to irc servers in general
08:01 < trinity> howdynihao, i made a irc web chat client and people can't connect cuse of the max ip per user and it's not safe to have that to unlimited
08:02 < trinity> and i don't think it's possible to have it unlimited either
08:05 < howdynihao> oh ok, then yea, you can't really do anything about it
08:05 < trinity> ...
08:08 < howdynihao> well, i mean if its just 1 irc network, you can ask a network staff to set something up for you so you're not limited
08:18 < trinity> howdynihao, i have an own irc server so i can make people connect. but how does mibbit connect people then?
08:21 < trinity> howdynihao, ah it uses java
08:21 < trinity> hm
08:22 < howdynihao> hmm? no thats not it
08:22 < howdynihao> they have an agreement setup with the networks
08:22 < howdynihao> if you control the irc server then you can do the same
08:22 < howdynihao> raise the limit or allow spoofing
08:23 < trinity> howdynihao, hm i will check that "spoofing" up thx
08:34 < radiodario> morning
08:52 < trinity> orbited2.org that looks exactly what i need to my irc problem
08:52 < trinity> "All without Flash or java"
08:54 < trinity> js.io lets the server run in the client browser. that is what i need!
08:55 < trinity> howdynihao, what do you think about that?
09:02 < ome> Do you guys ask subjective questions around here?
09:02 < gildean> we don't ask questions to ask questions here
09:04 < deoxxa> ome: genuine lol
09:18 < geNAZt> someone knows a good firebird db driver for nodejs ? with local file support ?
10:03 < MI6> joyent/node: Sean Silva v0.10 * 63466e5 : doc: document value of `this` inside listeners  Fixes #5326. - http://git.io/vzu9SQ
10:07 < mattrichards> Hey all.  npm (1.1.65) install --save (node v0.8.14) has suddenly stopped updating package.json - any nudge in the right direction massively appreciated, thanks in advance.
10:08 < mattrichards> To clarify; npm install mocha --save (for example) grabs everything but doesn't update package.json - it was yesterday, will do further investigation but wondered whether I was missing something obvious.  
10:16 < mattrichards> It seems the issue is related to git submodules.  Where should I report this stuff?  I get the impression not a lot goes on in here?
10:45 < radiodario> :fit
10:45 < radiodario> oops
10:46 < radiodario> mattrichards: you could open an issue on github
10:48 < mattrichards> radiodario: thanks, that's what I'll probably do.  It's definitely something related to git submodules, after pulling from origin npm install --save is now working as expected.  Does npm log any useful output (other than the usual) anywhere?
10:48 < radiodario> i've never used --save
10:48 < radiodario> sounds cool
10:48 < deoxxa> mattrichards: when it crashes it'll write out a log file
10:49 < deoxxa> mattrichards: other than that, you can ask it to log in a more verbose fashion
10:49 < mattrichards> radiodario: it's really great when it works, saves a few keystrokes when bootstrapping a project.
10:49 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
10:49 < deoxxa> radiodario: there's also --save-dev which is great :>
10:50 < deoxxa> mattrichards: you can use -ddd for super crazy logging
10:50 < mattrichards> deoxxa: i'll see if I can milk some more verbose logging from npm, it's doesn't crash, it just doesn't update packages.json (under certain circumstances).
10:50 < deoxxa> mattrichards: see `npm help config'
10:50 < mattrichards> deoxxa: +1 thanks!
10:50 < deoxxa> :D
11:27 < eddyb> is there any chance the 0.8 branch will receive a v8 upgrade?
11:28 < eddyb> s/upgrade/update/roll/
11:29 < eddyb> with recent v8 versions (since around 3.17.something), I get "error: 'class v8::Object' has no member named 'GetPointerFromInternalField'" and "error: 'class v8::Object' has no member named 'SetPointerInInternalField'"
11:30 < eddyb> the only 0.8 build I have is 0.8.18 from 3 april, and it doesn't run with latest v8
11:34 < berkbozkurt> is it required to use layout such as jade for angular.js + node.js ???
11:37 < berkbozkurt> any angular.js guru here =) ? 
11:42 < x1a0> Hi:) what's the best way to watch a dir for all file change/create/remove? kind of what `coffee -w` does. Thanks!
11:44 < berkbozkurt> is it required to use layout such as jade for angular.js + node.js ???
11:54 < Harkole> is anyone else having problems loading nodebits.org?
11:57 < mikeyMike> hi
11:58 < mikeyMike> anyone has been using Node.js with freaking IIS?
11:58 < mmalecki> I myself do not enjoy pain, others might do tho
12:18 < sandfox> mikeyMike: why for the love of all that is right would do that?
12:34 < djs> hello everybody
12:36 < djs> I have built a lightweight node.js web based IDE if anyone would like to take a look
12:36 < ashnur> unless
12:37 < gildean> djs: i'll check it out if you give us a link
12:37 < djs> https://npmjs.org/package/noide
12:37 < djs> http://davidjamesstone.github.io/noide/
12:37 < djs> https://github.com/davidjamesstone/noide
12:37 < djs> http://www.youtube.com/watch?v=xrVsNPMtGGI
12:38 < djs> Sorry about the video - it's very grainly and basically useless at the moment
12:41 < RLa> djs, you could make it install a command
12:42 < djs> you mean to run it straight from the command line?
12:42 < geNAZt> djs, does it support profiling ? it doesnt seem so
12:43 < RLa> djs, yes :)
12:43 < djs> no it doesn't.
12:45 < djs> RLa, do you know of any standard boilerplate code for this which supports *nix & windows installations?
12:45 < geNAZt> npm ?
12:48 < RLa> djs, it should be cross-platform: https://npmjs.org/doc/json.html#bin
12:49 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:50 < RLa> djs, i really like this project
12:52 < motaka2> Is it wise to write large scale applications using node.js?
12:56 < bnoordhuis> motaka2: define 'large scale'?
12:56 < bnoordhuis> also, is it wise to write large scale applications in general?
12:57 < bnoordhuis> from a maintenance perspective, small, self-contained applications that interoperate through a common protocol are a lot easier to maintain
12:57  * bnoordhuis gets off his soapbox
12:58 < leonvv> bnoordhuis: are you one of node's developers ?
12:58 < bnoordhuis> leonvv: yep
12:58 < leonvv> Cool :)
12:59 < leonvv> Are you dutch ? Just wondering because of your name
12:59 < bnoordhuis> leonvv: i am. i take it you are as well?
12:59 < leonvv> Yes :)
12:59 < bnoordhuis> bert (our windows guy) is dutch too btw
13:00 < bnoordhuis> where are you from?
13:00 < djs> RLa, thanks. I'll get the code stitched in
13:00 < leonvv> Zuid-Holland/Oegstgeest, you ?
13:00 < bnoordhuis> zuid-holland/gouda
13:00 < leonvv> That's close !
13:01 < bnoordhuis> yeah :)
13:01 < bnoordhuis> though admittedly i probably wouldn't be able to pinpoint oegstgeest on the map
13:01 < bnoordhuis> somewhere near leiden is the closest i'd get, probably
13:01 < leonvv> Lol, I can imagine, it is very close to leiden
13:01 < leonvv> exactly ;)
13:04 < MI6> joyent/node: Ben Noordhuis master * 223607c : build: fix arm build after v8 upgrade  V8 was upgraded to 3.18 in commit  - http://git.io/J02euw
13:13 < eddyb> bnoordhuis: mind if I ask, is 0.8 going to get a v8 update/fix?
13:17 < bnoordhuis> eddyb: what v8 fix?
13:17 < eddyb> bnoordhuis: with recent v8 versions (since around 3.17.something), I get "error: 'class v8::Object' has no member named 'GetPointerFromInternalField'" and "error: 'class v8::Object' has no member named 'SetPointerInInternalField'"
13:18 < bnoordhuis> eddyb: oh, like that. no, the major v8 version in stable releases is fixed
13:18 < bnoordhuis> i.e. in v0.8 it's v8 3.11 for all eternity
13:18 < eddyb> bnoordhuis: okay, thanks
13:18 < bnoordhuis> that particular error is easy to work around though
13:18 < bnoordhuis> let me link you to something
13:19 < bnoordhuis> eddyb: https://github.com/bnoordhuis/node-iconv/blob/master/src/binding.cc
13:19 < eddyb> OBS uses shared v8 for builds, but the v8 is up-to-date and 0.8.* fails to build
13:19 < bnoordhuis> right, you may be SOL in that case
13:20 < bnoordhuis> things like that are the reason we ship a particular v8 version :)
13:20 < eddyb> so I'm wondering, can I patch node.h or something, to add those defines after including v8.h?
13:21 < bnoordhuis> eddyb: sure. voids your warranty, of course
13:22 < eddyb> bnoordhuis: thanks, I'll try that and see if it builds with latest 0.8
13:23 < eddyb> I'd like to setup the 0.10 build anyway (not sure why nobody has done that), although I need to find how to have both versions in parallel
13:23 < eddyb> (in the repositories, not installed)
13:26 < mrvisser> anyone node-amqp to talk to rabbitmq by any chance?
13:27 < marshall> hey node
13:27 < marshall> I have some "models" in two seperate files
13:28 < marshall> and deleting an instance of one affects the other, but reading the other one requires the original
13:28 < marshall> so it's a bit of a circular dependency
13:28 < marshall> i'm thinking I could just put the 
13:29 < marshall> 'require' statements for each other in the methods
13:29 < marshall> but i'm wondering if there's a better way to go about this?
13:29 < eddyb> "statements" - they're just regular function calls :P
13:30 < marshall> sure, regular function call
13:30 < eddyb> marshall: require returns from a cache if the module has been already loaded
13:30 < eddyb> marshall: if the module is being loaded, it just returns the currently available exports
13:30 < marshall> so it's not that bad if i put the require inside a method
13:31 < eddyb> marshall: it might be a bit slow, even if it hits the cache
13:31 < marshall> but i won't get excommunicated or anything, right?
13:31 < eddyb> I'm not exactly sure what you're trying to do
13:31 < eddyb> can you gist a minimal example?
13:34 < marshall> sure
13:34 < MI6> joyent/node: Trevor Norris master * 0a4ebc3 : src: replace Holder() with This()  Switch to always use args.This() to re - http://git.io/ngglSw
13:35 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:43 < marshall> eddyb: https://gist.github.com/jeffmarshall/5420414
13:43 < eddyb> marshall: heh you can have multiple (and named) files in gist :P
13:44 < eddyb> marshall: in your case, it's simple
13:46 < eddyb> marshall: https://gist.github.com/eddyb/5420427
13:47 < eddyb> it looks like a deadlock, but it should work
13:48 < eddyb> marshall: basically, export everything before you require something that might require you
13:52 < Gottox> http://pi.s01.de:3000/ - A quick demo to my terminal.js terminal emulator library which runs in node and in browsers.
13:53 < marshall> eddyb: oooh nice
13:53 < marshall> eddyb: thanks
13:54 < eddyb> Gottox: you're late to the party https://github.com/chjj/tty.js/ :P
13:54 < Gottox> eddyb: Yea, I know tty.js
13:55 < Gottox> but tty.js is monolithic and the terminal emulator stuff only runs in the browser.
13:55 < eddyb> Gottox: because why would you emulate a terminal anywhere else?
13:58 < Gottox> eddyb: there are some reasons to let node.js now the state of a terminal.
13:58 < Gottox> e.g. recorded terminals, which play back on the browser.
13:59 < eddyb> Gottox: what exactly about the state do you need?
14:01 < Gottox> the server can generate keyframes from recorded session, send them to the client and afterwards the client can replay the session by itself.
14:01 < eddyb> Gottox: how is that useful in any scenario?
14:02 < eddyb> also, what's wrong with just recording data?
14:02 < eddyb> why do you need a half-implemented vt100 or so emulator in node.js?
14:04 < Gottox> actually it's not half implemented.
14:04 <@isaacbw> eddyb: because it's cool?
14:04 < ashnur> if I have a readable stream which I want to pipe somewhere. letssay stdout, how can I extend prepend and append some strings to the content which is piped?
14:05 < Gottox> I spend quite some time on writing it.
14:06 < eddyb> Gottox: is there anything that you can't use raw data for?
14:06 < eddyb> isaacbw: topic says I shouldn't listen to you >:P?
14:07 <@isaacbw> oh yea :(
14:07 < Gottox> eddyb: you can render everything from the raw stream, yes.
14:07 < Gottox> but one needs the full raw stream to reconstruct the session.
14:08 < Gottox> which is quite heavy on ncurses applications.
14:08 < eddyb> I don't see why you need this "sessions" thing
14:09 < toad-br> anyone know an "access control list" to indicate? I'm studying using "connect-roles"
14:09 < ashnur> i don't know how to phrase my question more clearly, if anyone could tell me anything I missed or said wrong that would be very helpful
14:09 < ashnur> I always try to ask clearly, but I clearly fail every time because I rarely get responses...
14:10 < werle> ashnur: Maybe Passthrough?
14:10 < eddyb> ashnur: there's few people around at this time
14:11 < Gottox> think of streaming a live shell session to the client, the client wouldn't be able to draw the whole screen until the shell has redrawn completely.
14:11 < ashnur> werle: i do not know what Passthrough is
14:11 < werle> @ashnur or Transform?
14:11 < Gottox> which can take some time on ncurses applications.
14:11 < werle> @ashnur http://nodejs.org/api/stream.html
14:12 < eddyb> Gottox: have you tried tty.js?
14:12 < eddyb> Gottox: it works fine as a remote shell
14:12 < strk> is there a method to reverse new Buffer(array) ?
14:12 < strk> to get an array back 
14:12 < ashnur> werle: thanks, i will read them. apparently i was reading only half of that page until now
14:13 < strk> or do I have to "manually" iterate?
14:13 < Gottox> eddyb: as you said tty.js is a remote shell, terminal.js is a rendering library.
14:13 < eddyb> XD
14:13 < eddyb> "the client wouldn't be able to draw the whole screen until the shell has redrawn completely."
14:13 < eddyb> ^^ that sounds like misconception to me
14:13 < werle> @ashnur no problem, its streams2 stuff so its new
14:14 < eddyb> Gottox: "rendering" is a bit silly, but I'll ignore that. tty.js is a terminal emulation library with a remote shell demo
14:14 < eddyb> and live streaming is just that - a remote shell
14:14 < Gottox> well, vt100 is 30 years old and it worked just fine back then.
14:15 < rcaskey> btw, is there a simple socket.io remote shell?
14:15 < eddyb> rcaskey: tty.js :)
14:15 < `3E> yes, it's called a browser
14:15 < rcaskey> nice, i'll look into it. I was thinking it might be nice to have an option to share it and then let you approve input buffers
14:15 < rcaskey> so ou could have a remote help roundtable and let folks see your screen and folks could suggest fixes and you could say 'ok yes' or 'no, let's not do that rm -rf /'
14:16 < eddyb> rcaskey: you can have something between the client and the server (which spawns a new pty)
14:16 < werle> has anyone put anything together with josh.js and socket.io?
14:17 < eddyb> werle: why would anyone do that?
14:17 < rcaskey> eddyb the idea would it it would have to be a real easy install so that users could use it via remote support. 
14:17 < eddyb> rcaskey: you just have to come up with a mechanism for that fine control that you've mentioned
14:18 < eddyb> like, an "UI"
14:18 < rcaskey> eddyb, yeah I might take a gander, I just didn't want to deal with all the terminal muckity-muck
14:18 < werle> eddyb: it was something a few folks and I were talking about and I thought I'd just ask
14:18 < rcaskey> basically i'd just add a button to disable enter/return, etc
14:19 < eddyb> yeah, that would be easy to do
14:19 < rcaskey> and then a shared pastebin type buffer that could be wgetted
14:19 < eddyb> rcaskey: you mean typing some commands in a shared online document then running them with wget?
14:19 < rcaskey> helpmeedit foo.file would copy it to a pastebin, they could edit it locally on their end and paste it back, and then youw ould get an approve/reject
14:20 < rcaskey> eddyb, generally no
14:20 < eddyb> werle: looking at josh.js, it's specifically client-side, it makes no sense to add socket.io in
14:20 < eddyb> rcaskey: aah, I see
14:20 < rcaskey> eddyb, it would be an interactive shell session with special facilities for editing text files
14:20 < eddyb> because nano is too hard to use :P?
14:20 < rcaskey> eddyb, because if I am diasbling enter then nano is hard to use for someone helping
14:21 < rcaskey> so helpers could help either via a pirate pad like setup or by some kind of pastebin-type setup
14:21 < eddyb> that sounds trickish
14:21 < eddyb> and if you don't do it good, users are going to hate you
14:21 < rcaskey> it does, its an ugly hack but I think it would be workable
14:21 < rcaskey> eddyb, so you get 2 commands, helpme and helpmeedit
14:22 < rcaskey> helpmeedit ~/frob.sh
14:22 < rcaskey> and then you go to a pirate pad
14:23 < rcaskey> and when you are done you click 'suggest save and quit' and the user being helped says 'blah suggest save and quit, please review and click yes or no'
14:23 < rcaskey> and so they say yes, and at that point helpmeedit would download the txt file from the pad and then clobber the local one with it
14:25 < rcaskey> and of course, if you trust this person you just would disable the restriction on enter and they could edit it right there in vim
14:37 < ashnur> streams are hard
14:39 < werle> ashnur: what are you trying to do?
14:41 < ashnur> werle: run mocha tests in a browser so that i can get the results back in cli
14:41 < ashnur> werle: more specifically, i want to write to a stream, the pipe to it, then write again.
14:42 < werle> ashnur: So what is in the readable stream that you want to spy on?
14:42 < ashnur> Transform is doing something else if I read it correcly
14:42 < ashnur> spy on? i am not sure if I want to spy
14:42 < ashnur> i don't even know what spying means in this context
14:42 < werle> Well you want to pipe something to stdout?
14:43 < ashnur> browserify.bundle() gives a readable stream
14:43 < werle> aj
14:43 < ashnur> which I send to browser-run
14:43 < werle> ah*
14:43 < ashnur> which works fine
14:43 < ashnur> but because it is a mocha test, it expects the mocha context
14:44 < MI6> joyent/node: isaacs created branch v0.11.1-release - http://git.io/TPyJrA
14:44 < ashnur> which is kinda straightforward to set up from js, just load the script, add an elemet, easy  
14:45 < ashnur> but if I write to the browser-run then the pipe does not have the expected result and the test will not be in the bundle.js file 
14:45 < ashnur> there is something i am doing terribly wrong, but i have no idea what :)
14:46 <@isaacs> deoxxa: thanks! that is a juicy edge case :)
14:46 < werle> ashnur: so high level, what is it that you want to do with the stream?
14:47 < ashnur> werle: which stream?
14:48 < ashnur> werle: https://github.com/juliangruber/browser-run see the example browserify('main.js').bundle().pipe(browser()).pipe(process.stdout);
14:49 < werle> ashnur: Ah I see
14:49 < ashnur> i want to write something to the browser() before and after that pipe
14:50 < ashnur> it would be easier if i could feed mocha to browserify, because i could use transform, but it fails for some mystic reason 
14:50 < werle> ashnur: I'll try to write a gist
14:51 < ashnur> thanks, i will read stream docs and examples in the meanwhile. maybe i will get what I am missing from the picture
14:52 < werle> ashnur: no problem, happy learning
14:55 < werle> ashnur: What are the contents of your main.js looking like?
14:55 < ashnur> werle: i am actually trying with this file https://github.com/ashnur/rationals/blob/master/test/test.js
14:56 < ashnur> locally of course
14:59 < werle> ll
14:59 < werle> ashnur: so I assume test.js in place of main.js?
15:00 < ashnur> yes
15:00 < Domenic_> So what're people using for https in node these days. I vaguely remember stud being a thing?
15:00 <@isaacbw> cool people use a reverse proxy
15:01 < werle> issacbw: +1
15:01 < werle> isaacbw: +1
15:01 < sandfox> nginx isn't bad
15:03 < geNAZt> is it better to do callbacks in nextTick ? or is it okay to give them in the current tick ?
15:06 < kenperkins> geNAZt: I generally use nextTick if the method is expected to be async
15:06 < kenperkins> http://markdawson.tumblr.com/post/43705616205/honour-thy-async-signature
15:06 < kenperkins> sandfox: agree, I like nginx
15:06 < eddyb> https://build.opensuse.org/package/live_build_log?arch=x86_64&package=nodejs&project=home%3Aeddybb%3Abranches%3Adevel%3Alanguages%3Anodejs&repository=openSUSE_12.3
15:25 < zivester> is there a client side version of http://nodejs.org/api/events.html ?  do people just use: https://github.com/Wolfy87/EventEmitter ?
15:32 < geNAZt> does someone know a key/value store (like ndirty) that can be encrypted ?
15:33 <@isaacbw> you can encrypt the data in any key value store
15:34 <@isaacbw> wtf is ndirty
15:34 < geNAZt> line seperates JSON store
15:34 < geNAZt> seperated*
15:36 < geNAZt> well it is a local key/value store, i search for a storage that can is located at the client, but it must be secured against sniffing
15:36 < geNAZt> -can
15:36 < MI6> joyent/node: isaacs v0.11.1-release * 4babd2b : 2013.04.19, Version 0.11.1 (Unstable)  * V8: upgrade to 3.18.0  * uv: Upg (+1 more commits) - http://git.io/xH1R7A
15:36 <@isaacbw> just encrypt your data before storing it then
15:37 < geNAZt> does json take aes encrypted data ?
15:38 <@isaacbw> json is just a data format
15:38 <@isaacbw> http://json.org/
15:38 <@isaacbw> it doesn't "take" anything
15:38 < bodisiw> it takes text, though
15:39 < kenperkins> so base64 encode it
15:39 < Havvy> Can't it take anything inbetween the ""?
15:41 < kenperkins> Havvy: seems like it, so long as it's escaped correctly: http://www.ietf.org/rfc/rfc4627.txt
15:42 < Havvy> Oh right. The \u0000 codes.
15:44 < geNAZt> doesnt work :D
15:44 <@isaacbw> what doesn't work
15:45 < geNAZt> http://hastebin.com/yilutigida.js
15:46 <@isaacbw> 15:32 < kenperkins> so base64 encode it
15:47 < kenperkins> yea what isaacbw said :D
15:48 < werle> ashnur: I don't think its going to work out the way you want it to
15:48 < geNAZt> does nodejs has a base64 encoder ?
15:48 < kenperkins> Buffer.toString('base64') ?
15:48 < geNAZt> brainbug sry :D
15:48 < dypsilon> isaacbw, are you isaacs?
15:48 < geNAZt> crypto has a ouput encoding setting
15:49 < kenperkins> isaacbw: we need a daily counter for the isaacs question
15:49 < dypsilon> :)
15:50 < dypsilon> thre should be a faq on this channel
15:50 < geNAZt> with base64 it works
15:50 < geNAZt> thanks alot
15:51 <@isaacbw> hah, I thought the topic would be enough
15:52 < dypsilon> oh yeah, sorry, i never pay attention to the topic
15:52 <@isaacbw_is_not_i> it's just funny, no worries
15:53 < dypsilon> actually you could just leave isaacbw_is_not
15:53 < dypsilon> because the next in the user list is always isaacs
15:53 <@isaacbw> ooh
15:53 < dypsilon> :)
15:53 < ashnur> werle: why do you think that?
15:54 < ashnur> werle: i got this far: https://gist.github.com/ashnur/5421082
15:54 < werle> ashnur: does that work?
15:57 < werle> ashnur: What is Webconsole?
15:57 < werle> ashnur: Third party runner?
15:58 < dypsilon> what is the best way you've seen to write automated tests for a rest api (based on hapi)
15:58 < dypsilon> ?
15:58 < kenperkins> dypsilon: you mean with mocks?
15:58 < ashnur> werle: the gist has a description where i wrote this
15:58 < kenperkins> or real integration tests
15:58 < dypsilon> integration
15:58 < ashnur> werle: it's a reporter
15:58 < werle> ah
15:58 < ashnur> werle: for mocha
15:58 < werle> ashnur: I see
15:59 < ashnur> werle: no, it "doesn't work", in the sense that it is still complaining that describe is not defined
15:59 < ashnur> so even though i include mocha and everything, apparently it does not populates the describe function
16:00 < dypsilon> kenperkins, integration tests
16:01 < kenperkins> dypsilon: you mean without having a client for your REST api?
16:01 < dypsilon> kenperkins, yes, the tests should be a client.
16:01 < werle> ashnur: Yeah, the Mocha executable does all of that for you
16:02 < kenperkins> dypsilon: what's wrong with mocha
16:02 < dypsilon> kenperkins, it feels very generic. But you are right, nothing wrong with it, just trying to figure out how to use it most effectively for rest.
16:03 < ashnur> werle: i know that, that's how I use it usually, but that is not working if I want to test something in the browser
16:03 < tjholowaychuk> you can create DSLs on top of it if you feel like that would help
16:04 < tjholowaychuk> dypsilon https://github.com/visionmedia/express/blob/master/test/req.fresh.js#L29
16:04 < tjholowaychuk> I still put the assertions inside personally but you can have the DSL generate the test cases themselves
16:05 < chadams42> is it possible to have a SOAP web service that when called, returns imediately, and then does some processing in another thread?
16:05 < chadams42> using node of course
16:05 < kenperkins> chadams42: nodejs is single threaded, so there's that
16:06 < kenperkins> if the work to be done isn't cpu intensive, just do it async, otherwise you'll need to farm it out via some kind of worker
16:06 < dypsilon> tjholowaychuk, so you are basically using supertest in conjunction with mocha?
16:06 < chadams42> well the http needs to return ASAP
16:06 < tjholowaychuk> dypsilon yea but you could do similar and abstract out mocha all together if that's more what you're looking for
16:06 < tjholowaychuk> something more declarative
16:07 < kenperkins> chadams42: I don't think you know how async works? 
16:07 < deoxxa> ASAP. STAT. VERY QUICKLY.
16:07 < kenperkins> so just do res.send before doing the work?
16:07 < jocafa> tjholowaychuk:  btw, we (finally) started using mocha at work :)
16:07 < kenperkins> chadams42: lemme gist you some pseudo code
16:07 < chadams42> if it's single threaded, will it not have to wait for the asyc before ethe http returns?
16:08 < deoxxa> chadams42: define "processing"
16:08 < chadams42> I'm doing this now with PHP but it's kinda a hack, 
16:08 < dypsilon> tjholowaychuk, thank you, I'll do that, you are awesome as always.
16:08 < kenperkins> chadams42: https://gist.github.com/kenperkins/5421331
16:09 < chadams42> I have someone sending me requests every few ms, really fact, if a call takes linger than a few ms, it will totally shut down their requests, (to prevent cueing)
16:09 < kenperkins> chadams42: realize if the "doWork" is doing something like computing a prime to 1000 digits, probably not a great idea 
16:09 < deoxxa> chadams42: define "processing"
16:09 < kenperkins> deoxxa++
16:09 < chadams42> the work is mostly doing database inserts
16:10 < jocafa> "Processing… PROCESSING!"
16:10 < deoxxa> so it's not really processing, but more i/o
16:10 < deoxxa> good news: node fits!
16:10 < deoxxa> chadams42: if most of your time is spent waiting for some other system to respond, node will probably fit really well
16:10 < chadams42> kenperkins: thanks! this really helps
16:11 < chadams42> deoxxa: this is great news, I'm looking to switch to node then to clean this up and make it less hacked together (like it s now in PHP)
16:11 < deoxxa> chadams42: if most of your time is spent doing actual cpu work (crunching numbers, processing strings, whatever), node might still work fine, but you might hit a wall a bit quicker as far as concurrent requests go
16:11 < kenperkins> chadams42: I strongly encourage you to read this:http://stackoverflow.com/a/8989174
16:11 < kenperkins> chadams42: or any other article on node.js's evented async architecture
16:12 < werle> ashnur: I'm taking lunch. Let me know if you figure something out
16:12 < chadams42> kenperkins: thanks you have given me a great place to start my research
16:13 < kenperkins> chadams42: this is probably closer to what you're doing
16:13 < kenperkins> https://gist.github.com/kenperkins/5421331
16:13 < kenperkins> fire and forget inserts basically
16:14 < chadams42> kenperkins: perfect, we are using couched, but  I'm sure it's the same idea
16:14 < kenperkins> yep
16:15 < kenperkins> if you need something more durable, could use a message queue
16:16 < kenperkins> for example, mixpanel (And others I'm sure) just takes the web request and immediately stuffs it into a queue. thus making the front end very simple and easy to scale
16:16 < kenperkins> and mitigating the risk of an outage at the front door layer
16:17 < chadams42> hm… yea we are getting around 10-20 requests per second, each needs to make a request that returns lots of xml data, and then perform inserts into the database
16:17 < MI6> joyent/node: isaacs created tag v0.11.1 - http://git.io/ugQP_Q
16:19 < motaka2> Is it wise to write a large application in Node.js ?
16:19 < MI6> joyent/node: isaacs master * e4406b7 : Now working on 0.11.2 (+3 more commits) - http://git.io/CwuWxw
16:19 < kenperkins> motaka2: why wouldn't it be?
16:19 < superjoe> motaka2, that's a pretty philosophical question
16:19 < manacit> I would say yes
16:20 < motaka2> I cause javascript is typle lose , it does not support protected methods and a lot of OOP features
16:20 < kenperkins> motaka2: the ability to write a large/complex application in any platform is (generally) more of a function of the aptitude of the engineers and less the framework
16:20 < greatergreg> depends on the definition of large
16:21 < kenperkins> it's a spectrum right? google is on one end, hello world on the other
16:21 <@isaacbw_is_not> node.js definitely makes it easy to build a massive clusterfuck
16:21 < motaka2> I prefer using PHP - I never had a mutual understanding with js
16:21 < kenperkins> isaacbw_is_not++
16:21 < kenperkins> motaka2: if you like PHP, keep on keeping on
16:21 < deoxxa> motaka2: the solution is not to write large applications :)
16:21 < dypsilon> motaka2, PHP ist _not_ the right tool for building large applications either.
16:21 < dypsilon> not at all
16:21 < dypsilon> nope
16:21 < werle> yeah, this is the wrong room for you
16:21 < deoxxa> motaka2: write lots of small applications, assemble them into an army of functionality to achieve a task
16:22 < dypsilon> werle, that's harsh
16:22 < motaka2> What's the best editor for node.js 
16:22 < motaka2> ?
16:22 < manacit> I use SublimeText 2
16:23 < dypsilon> +1 for sublime
16:23 < deoxxa> i use nano because i'm a nubbin
16:23 < werle> +2 for sublime
16:23 < Stanislav0> I use vim
16:24 <@isaacbw_is_not> the urge to write my own text editor is becoming increasingly difficult to resist
16:24 < kenperkins> oh god, not the "which editor is best" topic :D
16:24 < werle> haha
16:24 <@isaacbw_is_not> obligatory "emacs 4 lyfe"
16:24 < kenperkins> and for the record, webstorm is awesome, integrated debugging, etc etc (if you like a proper IDE)
16:24 < dypsilon> it's not about which editor is the best, it's about _my_ editor is the best
16:24 < kenperkins> notice, I didn't say that webstorm was better than anything else.
16:25  * dypsilon bought a webstorm license, not using it.
16:25 < alexander__> VIM rocks!
16:25 < kenperkins> dypsilon: any reason?
16:25 < werle> vim +1
16:25 < kenperkins> (and when was that)
16:25 < Havvy> Sublime Text, because your settings are JSON.
16:26 < werle> what is an argument for using webstock for Node development?
16:26 < werle> webstorm**
16:26 <@isaacbw_is_not> I started using DuckDuckGo. The targeted ads seconds after searching for something have finally gotten too creepy
16:26 < MI6> joyent/node: isaacs v0.10 * 0b04abc : blog: v0.11.1 does not work on windows x64 (+2 more commits) - http://git.io/gBFlSg
16:26 < werle> isaacbw_is_not: do you have a .emacs file?
16:26 <@isaacbw_is_not> I do
16:26 < werle> a good .emacs file**
16:26 <@isaacbw_is_not> nope
16:27 <@isaacbw_is_not> it mostly just installs extensions
16:27 < werle> hm
16:27 < kenperkins> werle: a few things that I really like: #1 really rich javascript syntax parsing. can resolve and follow  definitions, etc. #2 really nice project support #3 the best open file by word wheel I've seen #4 integrated nodejs debugging
16:27 < kenperkins> I could go on :S
16:27 <@isaacbw_is_not> http://hastebin.com/nacacojosa.lisp
16:27 < werle> nice
16:28 <@isaacbw_is_not> emacs' js2-mode has superb javascript parsing
16:28 < logicalcat> hi all, sorry to interrupt the editor war (vim!), but I have a newb async/series question about appendFile. Here's the code: https://gist.github.com/rbhughes/5225533
16:28 <@isaacbw_is_not> no autocomplete though if you're into that kinda thing
16:28 < werle> anyone have a good one on github?
16:28 < dypsilon> kenperkins, don't know, don't like it. big, bulky, not fun
16:28 < dypsilon> sublime is fun
16:28 < werle> kenperkins: Thanks
16:29 < werle> dypsilon: sublime is really funny and easy to extend which is what makes it so awesome
16:29 < dypsilon> logicalcat, go away with your importnat suff, we are talking edditors here!
16:29 < dypsilon> :)
16:29 < werle> haha
16:29 <@isaacbw_is_not> the same day that I added the line to disable autosaves is the day that I accidentally deleted a few hundred lines of code without commiting
16:29 <@isaacbw_is_not> *committing
16:29 < werle> oh shit
16:30 <@isaacbw_is_not> this is the fork of js2-mode you should use with emacs: https://github.com/mooz/js2-mode
16:30 < werle> isaacbw_is_not: oh shit, thank you!
16:30 < logicalcat> :(
16:30 < dypsilon> logicalcat, glanced over your code, what's the problem with it?
16:31 < kenperkins> dypsilon: yea I understand, webstorm is not "lightweight" for sure
16:33 < logicalcat> dypsilon: First, I wrote it with gvim on Windows. Then...nothing. It works, but I had to use appendFileSync instead of appendFile. I thought the nimble.series would have mad it work.
16:33 < logicalcat> (I mean nothing is wrong with it. The code works, I just wanted it to work with appendFile)
16:34 < dypsilon> logicalcat, so your problem is solved?
16:37 < logicalcat> dypsilon: Not a problem--just want to understand why I can't use appendFile. If I don't use appendFileSync, the first block in the series finishes too fast and the file isn't generated before the second block and res.sendfile( sends a blank file.
16:40 < dypsilon> logicalcat, because you are calling the callback _before_ appendFile is finished. What you need to do is moving the callback from line 11 to line 26 so it's called after the file is written.
16:41 < ctorp> Can anyone help me with this Gruntfile? https://gist.github.com/anonymous/96757db68506ea52d809 .. the exec is not firing as a task method, but the console output before it does. And it works if it is part of an event.on call, but then it isn't syncronous.
16:41 < kenperkins> ctorp: have you tried grunt channel?
16:42 < dypsilon> logicalcat, imagine async as branching, on line 8 the interpreter opens a new "branche" and executes it _while_ it executes line 11 and so on.
16:42 < ctorp> I have not, although I have been idling in #gruntjs.
16:42 < ctorp> I will try #grunt
16:43 < dypsilon> logicalcat, and because line eleven gets to execute earlier as your programm is done writing the file to the disk, async finishes earlier. That's called racing condition, you can get a lot mor information on those internets everyone is talking about.
16:43 < logicalcat> dypsilon: ahh, I was _hoping_ the loop in line 8 would somehow magically complete first. I'll have to wrap the whole thing in a callback. Thanks!
16:43 < dypsilon> logicalcat, you are welcome
16:46 < ashnur> werle: this almost works, https://gist.github.com/ashnur/5421082, the only problem is that i have to load the http://localhost:22555/ in the browser so that I get a response. dunno why. but after that, the tests run and pass as expected
16:49 < werle> ashnur: Why do I get this? TypeError: Object 22555 has no method 'match'
16:51 < pats_Toms> I have application with socket.io and it crashes time in a 3 hours
16:52 < pats_Toms> with error "Error: socket hang up"
16:52 < pats_Toms> any ideas?
16:53 < RobW> Has anyone noticed that if you use the read module for prompt input, if you put in too many characters for the prompt the cursor is bumped up a line?
16:54 < pats_Toms> seems like I need to update
16:55 < Guest29426> can I use node.js inside html files like php can do <?php echo 'hello' ?>
16:56 < werle> you need a templating engine
16:56 < Guest29426> so like can I do <?node console.log('hello') ?>
16:56 < kenperkins> Guest29426: I think what you're really asking is, can you have server side generated templates with inline code and markup
16:56 < kenperkins> Guest29426: answer is yes, look into Express and templating engines like Jade, EJS and others
16:56 < werle> http://embeddedjs.com/ http://jade-lang.com/
16:57 < Guest29426> so its not even a native feature? what kind of server code cant do that?
16:57 < dypsilon> Guest29426, you can do that even better as php does, using one of the popular template engines. Those include: jade, ejs, handlebars, dust.js and so on. 
16:58 < dypsilon> Guest29426, yeah, I'm not feeding the trolls here.
16:58 < werle> Guest29426: yeah wrong room
16:59 < Guest29426> Thanks guys. I was showing a friend the difference between the node community vs others :)
16:59 < dypsilon> Guest29426, you are welcome
16:59 < werle> Guest29426: cheers
16:59 < kenperkins> Guest29426: big takeaway is that node is much more that just a "web server" platform
17:00 <@isaacbw_is_not> werle: saying wrong room isn't terribly constructive
17:00 < Guest29426> This room is like canada. too nice
17:01 < Havvy> <?node print("Oh gawd, why?"); ?>
17:03 < Guest29426> serious question this time: if my script crashes with an error that doesnt show the stack trace or line number, how do I go about debugged why it happened?
17:04 < Guest29426> searching the error wasnt helpful. it was some socket error connect, I dont have the string anymore to paste it
17:04 < werle> Have you looked into debugger?
17:05 < werle> Is it just an Error and error name in the buffer?
17:05 < werle> in stdout
17:06 < Guest29426> yes thats all it was. Im looking at this right now http://nodejs.org/api/debugger.html cant believe I didnt know about it
17:07 < s5fs> Guest29426: i didn't know about it either, don't be sad
17:07 < Guest29426> wait is that node debugger just similar to https://github.com/dannycoates/node-inspector ?
17:08 < werle> mm no I dont think so
17:09 < s5fs> Guest29426: similar in goals, but looks fairly distinct in usage
17:11 < Guest29426> I havent seen the error since I upgrade node so I think its fixed. but still, is there a proper way to go about debugging an error with no stack trace?
17:13 < s5fs> isaacbw_is_not: fun topic
17:18 < dypsilon> Guest56806, interactive debugger will probably help. The only other way is ghetto debugging, but I never ever had to do that.
17:19 < kenperkins> dypsilon: I refuse to ghetto debug
17:19 < kenperkins> dypsilon: I refuse to ghetto debug
17:19 < MI6> joyent/node: Ryan Doenges master * 9026675 : path: add path.isAbsolute(path)  An absolute path will always open the sa - http://git.io/Vgn1xg
17:19 < kenperkins> so much so that I say it twice
17:19 < deoxxa> do you have any idea how hard it is to get roaches out of a ghetto apartment?
17:19 < ljharb> console.log, reload, console.log, reload :-)
17:19 < ljharb> love it.
17:20 < dypsilon> kenperkins, ok, just stare at the code till you find the error :)
17:20 < gildean> ghetto debugging ftw.
17:20 < kenperkins> i mean, I use node inspector or webstorm's built in debugger
17:20 < kenperkins> that's all
17:20 < kenperkins> I debug extensively
17:20 <@isaacbw_is_not> deoxxa: it can't be done
17:20 < kenperkins> just try to avoid console.log
17:21 <@isaacbw_is_not> you learn to live with them
17:21 < ljharb> i really don't like the debugger
17:21 < kenperkins> ljharb node-inspector you mean?
17:21 < perlitch> by default browserify wont perform transforms on modules required without a path (i.e., from node_modules). is there any way to make this happen?
17:21 < dypsilon> gtg bye
17:22 < ljharb> any debugger, i don't really use them
17:22 < gildean> i have no problem just throwing console.log everywhere, it tells me a good story
17:22 < ome> ljharb: You're either a very smart coder or totally the other way around, haha.
17:22 < jchimene> I have a question about porting node.js
17:23 < ljharb> lol
17:23 < ljharb> as always, a little of both
17:23 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:23 < jchimene> Are there any porting guides?
17:24 < ome> I can't live without std::err, console.log and the family. :)
17:24 < ome> jchimene: Well, it depends what do you mean by portin, are you trying to port Node.js to a new platform or bring port JavaScritp to Node.js?
17:24 < ome> s/portin/porting/g
17:25 < kenperkins> ljharb node-inspector you mean?
17:25 < kenperkins> damnit
17:25 < kenperkins> sorry :D
17:25 < kenperkins> keep cmd-tab to the wrong window
17:25 < jchimene> The former to a new architecture, in fact. I realize it's not just node.js. It's also the V8 engine as well as other tools. The arch is IA64
17:26 < ome> jchimene: Will, as you have figured you will need to port the V8 and Libuv as well.
17:26 < ome> And of course, both of these has their own dependencies which needs to ported if not already there.
17:27 < perlitch> substack: is there a way to for browserify to transform modules included from node_modules? it seems that by default it doesnt. I made a quick example using brfs so i knew i wasnt crazy: https://github.com/andyperlitch/br-transform-nodemodules
17:33 < jchimene> ome: sorry, don't know what you saw....
17:33 < jchimene> How would upstream patches be handled? e.g. v8 patches to google or to node.js?
17:37 < pie_> is there a way to make http-server not use so much 
17:37 < pie_> RAM? Im trying to send my friend a 1.6GB file
17:38 < happyface> pie_: buffer to file instead of memory?
17:38 < pie_> buffer a file to a file?
17:44 < pie_> hm I probably need to find an overall better way to do this
17:46 < ctorp> Can anyone help me with this Gruntfile? https://gist.github.com/anonymous/96757db68506ea52d809 .. the exec is not firing as a task method, but the console output before it does. And it works if it is part of an event.on call, but then it isn't syncronous.
17:50 < ryanaz> mscdex: u around?
17:52 < ryanaz> i'm trying to implement 'dicer' and I have implemented the example he has there… and when uploading files I keep only seeing "end of parts", I don't see any of the other things like "New Part!" or "Part header" ..  https://github.com/mscdex/dicer
17:58 < ryanaz> i'm trying to implement 'dicer' and I have implemented the example he has there… and when uploading files I keep only seeing "end of parts", I don't see any of the other things like "New Part!" or "Part header" ..  https://github.com/mscdex/dicer
18:09 < chrisdickinson> what's the purpose of including gitHead in the package.json?
18:10 < chrisdickinson> i'm assuming it's for when you specify a dep through git?
18:12 < ljharb> i don't see that on https://npmjs.org/doc/json.html
18:13 < deoxxa> ljharb: if you `npm init' inside a git repository, npm will add a gitHead property in the generated package.json
18:14 < ljharb> um, really? i've run npm init and never seen a gitHead
18:14 < ljharb> what version of node?
18:14 < deoxxa> ljharb: give it a go, create an empty repository, make a commit, then run npm init in the repo
18:14 < deoxxa> um, lemme check
18:14 < deoxxa> 1.2.15 here
18:14 < deoxxa> (for npm)
18:14 < deoxxa> 0.10.2 for node
18:15 < ljharb> 1.1.14 for me, and i'm using whatever comes with node
18:15 < ljharb> so maybe it's new
18:15 < deoxxa> mayhaps
18:15 < MI6> joyent/node: Ben Noordhuis master * 2efb6cf : v8: reapply floating patches (+1 more commits) - http://git.io/Rsio5A
18:16 < ljharb> *sorry 1.2.15
18:16 < ljharb> .14
18:16 < ljharb> gah
18:18 < ljharb> deoxxa: maybe it does that only if your commit isn't pushed?
18:18 < deoxxa> ljharb: `mkdir derp; cd derp; git init; git commit --allow-empty -m derp; (while true; do echo; done) | npm init; cat package.json;'
18:19 < ljharb> yup, that's only if you have an unpushed commit
18:19 < deoxxa> oh, interesting
18:19 < deoxxa> is that documented?
18:19 < ljharb> doesn't seem to be
18:19 < deoxxa> hrm, i wonder what the purpose is
18:19  * deoxxa opens an issue
18:20 < Guest82961> hi
18:22 < deoxxa> chrisdickinson: https://github.com/isaacs/npm/issues/3363 << now we wait!
18:23 < ljharb> <useless comment so i'm a participant>
18:23 < deoxxa> :>
18:23 < ryanaz> Hey guys, I'm stuck.  I'm trying to implement dicer with express.   Here's my code ..  http://pastebin.com/B06YsEUd  here's my output:  http://pastebin.com/QDBJZhLy
18:24 < ryanaz> if you notice, the only console.log I see is "end of parts".. i never see any of the other console.log sections.
18:24 < ryanaz> I pasted the 'preamble' output to maybe help with a clue
18:24 < chrisdickinson> ljharb: at the bottom of the pull request you can click "watch thread"
18:24 < RLa> are you receiving multipart request at all?
18:25 < ljharb> yes but that won't list me as a participant :-p
18:25 < ryanaz> RLa: Yah,  the regular expression to get boundary is working
18:25 < ljharb> if it listed watchers somewhere that'd be great
18:26 < ryanaz> is there a debug option for res.pipe ? 
18:26 < ryanaz> req.pie
18:26 < ryanaz> req.pipe
18:28 < ryanaz> I just realized the time .. i need to go.. 
18:36 -!- mode/#Node.js [+o sblom] by ChanServ
18:39 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:41 < perlitch> chrisdickinson: you around?
18:43 < chrisdickinson> perlitch: yep
18:43 < chrisdickinson> what's up?
18:43 < chrisdickinson> oh yeah! beefy patch
18:43 < chrisdickinson> womp
18:43 < perlitch> haha actually im havin a problem with browserify and figured you might be able to help if you have a sec
18:44 < chrisdickinson> oh sure, what's up?
18:44 < perlitch> by default, browserify wont perform transforms on top-level modules
18:44 < perlitch> any idea how to make that happen?
18:44 < perlitch> made a quick repo illustrating: https://github.com/andyperlitch/br-transform-nodemodules
18:45 < perlitch> from substack's browserify readme, it sounds like i can add something to my package.json
18:46 < perlitch> btw beefy is still incredible and i use it for every browserify project i work on now
18:47 <@mbalho> me too
18:48 <@mbalho> i wish npm install --save-dev beefy browserify didnt have so much code though, e.g. if there was a 'lite' version of browserify
18:48 < chrisdickinson> perlitch: thanks!
18:48 < chrisdickinson> :D
18:49 < chrisdickinson> yeah, i want to simplify the live-reload stuff in beefy so it doesn't pull down the entire universe
18:49 <@mbalho> i probably have like 60 copies of browserify on my computer
18:49 < chrisdickinson> same :|
18:49 < perlitch> mbalho: it doesnt bother me cuz its just my dev environment. my build step is the easiest its every been and my dist is super lightweight
18:49 < chrisdickinson> technically you could install browserify just once
18:49 < perlitch> but yea
18:49 < chrisdickinson> beefy'll find it
18:49 < chrisdickinson> but then you have to worry about what version of browserify people have :(
18:50 <@mbalho> yea
18:50 < chrisdickinson> perlitch: so, transforms are scoped to the current module
18:50 < chrisdickinson> if testmodule needs brfs, it should specify it itself in its own package.json
18:51 <@mbalho> chrisdickinson:  i think its mostly deps that are accidentally plump like uglifyjs which is 1mb but could be like 100k
18:51 <@mbalho> chrisdickinson: cause maybe the authors dont use npmignore?
18:51 < chrisdickinson> yeah
18:51 < perlitch> chrisdickinson: yea i figured as much, and i even see in the module-deps readme that its something to do with transformKey but i dont see any examples
18:52 < chrisdickinson> i bet you could require('./node_modules/testmodule/index') to make it work
18:52 < chrisdickinson> though that's sorta gross :(
18:52 < perlitch> tried that :-/
18:52 < perlitch> i looked in module-deps source, and it actually looks for "node_modules" in the path (i think)
18:53 < chrisdickinson> ah
18:53 < chrisdickinson> hm
18:53 < chrisdickinson> yeah, about the only thing i can think of is to add it to the package.json for the module
18:53 <@mbalho> sounds like a substack question. though he is likely sleeping
18:53 < chrisdickinson> which, if you don't own the module, means you've gotta find the module on github, then fork it and pr the change
18:53 < perlitch> haha
18:53 < perlitch> fortunately i do
18:53 < chrisdickinson> woooo
18:54 < perlitch> (own the module)
18:54 < perlitch> hehe i know, thank god
18:54 < chrisdickinson> i don't think there's any concept of "bundle-wide" transforms
18:54 < chrisdickinson> i sort of want 'em, but only sort of
18:54 < perlitch> yea, im totally fine specifying in the package.json, but i dont know the syntax and there's no examples and im sorta dumb so...lol
18:55 < perlitch> i feel like the answer is in here: https://github.com/substack/module-deps#transforms
18:55 < perlitch> those last two paragraphs
18:56 < chrisdickinson> browserify is getting to the point that it very much needs good docs
18:56 < chrisdickinson> like, structured, outside-of-blog-posts-and-readmes docs
18:56 < perlitch> heavily agree
18:59 < perlitch> i think if it did, a lot more people would use it instead of requirejs
18:59 < perlitch> which, most of the time, seems cumbersome and overkill
19:03 < werle> Anyone a fan of component?
19:06 < perlitch> werle: looked at for a second a while back but wasnt particularly grabbed
19:08 < werle> perlitch: I've been using it and it is pretty useful. Still pretty new to it and I've been using browserify with it recently 
19:11 < perlitch> my question is why not just use npm
19:13 < deoxxa> werle: i'm wearing a component t-shirt right now
19:13 < werle> deoxxa: +1 You are awesome.
19:14 < deoxxa> werle: http://d.pr/i/reBo
19:14 < perlitch> so thug.
19:14 < werle> deoxxa: hell yeah, that is awesome. 
19:14 < CoverSlide> s/thug/hobo/
19:14 < deoxxa> hehe
19:15 < werle> those shirts are $
19:15 < deoxxa> my beard provides +1 defence against charity collectors
19:15 < CoverSlide> as a plus, if you hold your hand out long enough, someone will inevitably drop change into it
19:15 < werle> deoxxa: I love ginger btw, haven't used it in prod yet, but having fun hacking with it. 
19:15 < werle> haha
19:16 < deoxxa> werle: timoxley made my shirt and i got it for free at jscamp.asia
19:16 < timoxley> :D
19:16  * deoxxa grins
19:16 < werle> timoxley: hook it up!
19:16 < werle> I'm sure tjholowaychuk would love that
19:16 < deoxxa> werle: good to hear that you're digging ginger! i'm slowly working on a rewrite of it at the moment
19:16 < timoxley> werle they were limited edition
19:17 < werle> timoxley: anyway to make that edition not so limited? :)
19:17 < deoxxa> actually that shirt was a lifesaver, timoxley
19:17 < deoxxa> lol
19:17 < timoxley> and have deoxxa not feel so special?
19:17 < werle> deoxxa: It is pretty great. 
19:17 < mbroadst> hey I'm trying to walk /sys/class/net on linux using node to build up network interface statistics, but it seems like none of the "walk" modules (node-walk, walker) actually want to do that, any suggestions?
19:17 < CoverSlide> just go to customink
19:18 < werle> timoxley: I didn't think about that haha
19:18 < werle> CoverSlide: true
19:18 < zamnuts> mbroadst, you sure the person executing node has permission to read /sys/class/net ?
19:18 < deoxxa> werle: when tim gave me that shirt, i'd had my bag stolen a few days before and i had like 2 shirts total to last me ~5 days, so it meant i had 50% more shirts total and infinitely more clean shirts to wear
19:18 < timoxley> hahah
19:18 < mbroadst> zamnuts: yeah, I mean I can ls any of those directories, I'm not at the point of readfile yet :)
19:19  * deoxxa brofist
19:19 < mbroadst> zamnuts: I think its related to symbolic links, but node-walk claims to support that
19:19 < timoxley> deoxxa you got your bag stolen, I had my phone stolen. that event was expensive
19:19 < werle> deoxxa: that does sound like a lifesaver 
19:19 < werle> deoxxa: brogrammers
19:19 < deoxxa> timoxley: damn straight - totally worth it though
19:19 < timoxley> agreed
19:20 < werle> deoxxa timoxley cheers to you both for surviving it and repping component 
19:20 < timoxley> deoxxa hope you feel the same way if you lose anything at the upcoming campjs 
19:20 < deoxxa> looking forward to campjs this year! (you should all look at http://campjs.com/ if you don't know already)
19:20 < deoxxa> ha
19:20 < deoxxa> yeah
19:20 < timoxley> deoxxa can't accept tickets at the moment. paypal nightmare
19:20 < deoxxa> oh no!
19:20 < timoxley> yep
19:20 < deoxxa> well, keep it bookmarked
19:21 < timoxley> turns out being a nomad has downsides
19:21 < deoxxa> such as no mailing address?
19:21 < timoxley> that's the issue
19:21 < deoxxa> bingo :P
19:21 < timoxley> waiting for some bills to be rerouted to my parents to use their address
19:21 < deoxxa> "i'm sorry sir, we can't accept 127.0.0.1 as your home address"
19:21 < werle> haha
19:21 < zamnuts> mbroadst, did you try a simple approach first using node's native fs?
19:22 < zamnuts> mgroadst, try to isolate the problem
19:22 < zamnuts> mbroadst* ^
19:27 < stefan41> has anyone in here used node-orm with express? I'm trying to figure out how to load externally defined models with that pattern;
19:27 < djs> hi all. would really appreciate if you have a go of my new webased  nodejs IDE
19:27 < roark> anyone know a good way of implementing a log bomb in node?
19:28 < roark> logic*
19:28 < djs> davidjamesstone.github.io/noide/
19:31 < zamnuts> djs, does it support profiling?
19:32 < mbroadst> zamnuts: yes fs.readdir shows me the contents of /sys/class/net
19:32 < mbroadst> zamnuts: I can also use fs.readFile on any of the files within
19:32 < zamnuts> mbroadst, well it sounds like it is a problem with node-walk then eh
19:33 < mbroadst> zamnuts: yurp, I can definitely trace it back and fix it, just wondered if I came here I might find someone who's run into this already. thanks
19:33 < werle> djs: What are some cool features that make this worth using?
19:33 < djs> zamnuts: no not yet.
19:33 < zamnuts> mbroadst, gotcha, yea, i've never used node-walk :(
19:36 < djs> werle: I like the split screen debugging with node-inspector and the ability to run/manage muliple child processes
19:37 < djs> its also lightweight for vm installations
19:37 < djs> its only a prototype but I find it useful
19:38 < werle> djs: Nice, I'll check it out and give you some feedback. Anything in particular that makes it standout from Cloud9? 
19:39 < djs> tooling for node is slim pickings and this really grew out of the need for something simple and lightweight
19:40 < lacrymology> how can I do things like basename(filename) and such? is there a path parsing lib?
19:40 < lacrymology> of course
19:40 < lacrymology> parse
19:40 < lacrymology> I mean path
19:41 < djs> its easier to install locally than cloud9 and it supports multiple child processes which im not sure c9 does. 
19:41 < werle> lacrymology: look into the path module
19:42 < werle> djs: nice, sounds cool
19:42 < lacrymology> werle: I'm looking. There seems to be nothing to remove the extension?
19:42 < lacrymology> convert /path/to/file/name.ext into "name"?
19:43 < djs> after that c9 has more features but if you are after a bootstrap/node/backbone IDE with small footprint then try it out
19:43 < werle> lacrymology: path.basename(p).replace(path.extname(p), '')
19:43 < werle> where p is the path to the file
19:45 <@mbalho> kewl http://www.jseverywhere.org/
19:45 < djs> werle, thanks. twitter is @node_ide if you feel it's worth a mention
19:46 < lacrymology> werle: ah, extname, I wasn't finding it
19:47 < werle> lacrymology: yeah, good old path.extname :)
19:47 < werle> djs: Cool, giving you a shout out 
19:49 < crashsystems> Has anyone used the websockets package? I'm trying to use it, but right after connection I'm getting a 426 upgrade required response, which kills the browser-side websocket object.
19:50 < werle> crashsystems: by okubo?
19:51 < crashsystems> correct
19:51 < crashsystems> I assume packages on npm must all have unique names(?)
19:51 < werle> yeah
19:51 < werle> looks pretty old have you tried using something else?
19:52 < crashsystems> No. Is there one you'd recommend over that?
19:52 < werle> socket.io is very good
19:52 < werle> websocket is too
19:53 <@mbalho> npm install shoe is good
19:53 < crashsystems> I'll give that a go. How do I delete a package from my project? npm remove sockets ?
19:53 < crashsystems> websockets*
19:53 < zamnuts> hey node.js community, does anyone want to give me a walkthrough on fixing a memory leak in node.js v0.10? I've been going at this for nearly 2 weeks now with no luck.
19:54 < werle> npm rm <pkg_name>
19:54 < werle> npm rm websockets
19:54 < crashsystems> that makes sense
19:54 < crashsystems> thanks
19:55 < werle> no problem
19:55 < werle> zamnuts: what are you dealing with?
19:56 < zamnuts> welre, i can't get any good profiling data out of any tools. v8-profiler is dead, node-memwatch is too convoluted (unless i'm not using it correctly)
19:56 < werle> tjholowaychuk: Does component have an IRC room?
19:56 < zamnuts> i don't actually need anyone to debug the code, i'm just fumbling with tools :(
19:56 < werle> zamnuts: Have you looked at the debugger module?
19:56 < tjholowaychuk> werle: yup it's #components
19:56 < werle> tjholowaychuk: thanks
19:57 < zamnuts> welre, possibly, i've been through a lot of tools, github link?
19:57 < werle> it is native
19:57 < werle> http://nodejs.org/api/debugger.html
19:58 < zamnuts> werle, ty, i've seen this. i'm not seeing how it is useful for analyzing the memory heap? i have successful tools for stepping/debugging
20:00 < zamnuts> I am hoping for something like Adobe Scout, which i've used for flex/as3 dev
20:01 < werle> hmm
20:01 < werle> I'm not sure if it can
20:01 < werle> but maybe node-inspector?
20:01 < lowtechr_> the memory thing is the biggest fear of me when it comes to nodejs. I'd have no idea to deal with it in the first place. 
20:01 < zamnuts> werle, i cannot get node-inspector to work on v0.10
20:02 < lowtechr_> So im very interested on the answers ...
20:02 < werle> zamnuts: Hmm
20:02 < werle> it looks like it hasn't been updated in about a year
20:03 < werle> major changes with 0.10 and I'm sure streams2 has something to do with it
20:03 < zamnuts> i've tried tools by dannycoates and the "fix" by fgnass, no luck still
20:04 < zamnuts> node-heapdump has been the most successful, i can dump heap snapshots and load them into chrome profiler (webkit dev tools) no problem, but i can't get the comparison function to work (tried v23-25 of chrome)
20:04 < werle> damn
20:05 < werle> A lot of maintainers of modules haven't done anything yet since 0.10
20:06 < zamnuts> which would be OK, but i can't get a good heavy heap stack to look at; i'm basically looking at "Buffer" uses 30megs - yes but where? when is it gc'd? what's the timeline? fml :(
20:06 < zamnuts> werle, yes i've noticed that. i didn't think 0.10 was that new.
20:06 < zamnuts> has anyone used microsoft's web matrix?
20:06 < ljharb> werle: it's almost entirely streams2, and it unfortunately is somewhat difficult for many use cases to fix
20:07 < werle> zamnuts:  Its new as of a month ago
20:08 < zamnuts> werle, oh snap, i thought it was around a lot longer than that, you're right 2013.03.11
20:08 < djs> installed web matrix today. it doesnt have debugging as far as I could tell
20:09 < werle> zamnuts: I guess all we can do is open issues and hope the maintainers start busting moves to make things work
20:09 < zamnuts> djs, yes i couldn't find debugging either
20:09 < zamnuts> welre, i'm gunna go sulk for a bit... maybe i should just downgrade to 0.8 or 0.9 and try my luck.
20:10 < werle> zamnuts: Don't fret too much, we just upgraded from 0.6 to 0.10 and I'm sure you can imagine the hell that was caused there
20:10 < zamnuts> werle, holy mackerel, yes i can imagine, i've been there, but not with nodejs :P
20:11 < werle> zamnuts: yeah, the last time I experienced something like that was when I was with a company who went form Php 4 to Php 5.2 
20:11 < ljharb> zamnuts: 0.8. 0.9 is the unstable build leading to 0.10
20:12 < ljharb> werle: it's usually a bad idea to upgrade more than one stable minor version at a time. 0.6 -> 0.8 -> 0.10
20:12 < werle> ljharb: I know, but I unfortunately that was the state of things when I joined (AppNexus) and the decision was not my own
20:13 < bnoordhuis> werle, zamnuts: it won't help you now but the GA release of strongloop distro will have first-class debugging and profiling support
20:13 < zamnuts> so which version should i downgrade to? 0.8? does nodejs use the same version model as apache?
20:13 < bnoordhuis> that's still a couple of months away though
20:13 < ljharb> zamnuts: 0.8
20:13 < ljharb> no ide about apache
20:14 < zamnuts> apache uses even minor versions for prod and odd for dev (e.g. 2.0 -> 2.2 -> 2.4 for stable)
20:14 < bnoordhuis> zamnuts: minor even numbers are stable, minor odd are dev releases
20:14 < bnoordhuis> i.e. 0.8.x is stable, 0.9.x is not
20:14 < zamnuts> bnoordhuis, ty
20:14 < ljharb> then yeah, it's the same
20:14 < zamnuts> i'll keep my eyes open for strongloop, but yes, for now that won't help, ty
20:14 < werle> bnoordhuis: Thanks for that
20:16 < zamnuts> so node-inspector with v0.8 is the way to go?
20:16 < crashsystems> I don't think socket.io likes me very much
20:16 < bnoordhuis> zamnuts: for now, probably yes
20:17 < zamnuts> bnoordhuis, kk i'll give it a whirl, any issues on windows or x86_64?
20:21 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
20:23 < bnoordhuis> zamnuts: not afaik
20:24 < zamnuts> bnoordhuis, kk ty
20:42 < doug> what's a good templating system to use with angularjs?
20:49 < bobosomfan> Is there a channel for jade-related questions?
20:51 < gildean> bobosomfan: #express is pretty good for that
20:51 < bobosomfan> gildean: thanks!
20:58 < motaro> Hola como están?
20:59 < werle> motaro: bien, que pasa contigo? :)
21:00 < motaro> Ando buscando recursos para el sustento.
21:03 < tpayne> anyone know how to print an obj in node where it prints the entire structure and formats it?
21:03 < superjoe> tpayne, util.inspect
21:03 < superjoe> or even just console.log usually
21:03 < tpayne> console.log stops at level 2 i think
21:04 < superjoe> and there's always JSON.stringify
21:05 < tpayne> yeah but that doesn't structure it lol
21:05 < werle> tpayne: Are you trying to see getter values?
21:05 < werle> tpayne: Have you seen yeoman's stringify-object?
21:05 < werle> tpayne: https://github.com/yeoman/stringify-object
21:08 < tpayne> i'll try this, thanks
21:08 < werle> no problem
21:10 < tpayne> werle: this is for the browser, not server side nodemon?
21:11 < werle> tpayne: A port to node shouldn't be hard :)
21:11 < tpayne> heh
21:16 < werle> tpayne: It looks like it is ready to go with node
21:16 < werle> if (typeof module !== 'undefined' && module.exports) {
21:16 < werle> 		module.exports = stringifyObject;
21:16 < werle> 	} else {
21:16 < werle> 		window.stringifyObject = stringifyObject;
21:16 < werle> 	}
21:27 < werle> later guys
21:31 < superjoe> tpayne, what do you mean it doesn't structure it?
21:31 < tpayne> it doesn't prettify the string
21:31 < superjoe> tpayne, check the 3rd argument
21:32 < tpayne> of JSON.stringify?
21:32 < superjoe> yes
21:32 < tpayne> ok
21:32 < superjoe> https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/stringify
21:33 < tpayne> ok let me try this
21:34 < tpayne> superjoe: nice thanks!
21:34 < superjoe> np
22:44 < robinson_k> ah! hi!
22:47 < Vendethiel> anybody knows what the fuck is "extended mode"?
22:50 <@mbalho> whoa now
22:57 < mscdex> ryanaz: are you sure the content-type is multipart/* ?
22:57 < mikeal> daleharvey: hey
22:57 < daleharvey> mikeal: yo
22:58 < mikeal> moving this all to browserify will be a really big change :)
22:58 < daleharvey> cheers, browserify version is looking nice
22:58 < mikeal> but, you'll get rid of grunt, and all the globals
22:58 < mikeal> even running the tests will get simpler
22:59 <@mbalho> +1 for pouchdb simplicitityification
23:02 < ryanaz> mscdex:  ya
23:02 < ryanaz> mscdex:  I'm wondering if it's because my form post doesn't say "enctype=multipart/form-data" ? 
23:03 < ryanaz> mscdex:  I just finished ripping it all out, i'm trying again with that form info set.
23:06 < mscdex> ryanaz: yes, you'll have to set the type because the default is usually 'application/x-www-form-urlencoded'
23:06 < mscdex> even if you file input fields in your form
23:06 < mscdex> *have file input
23:06 < ryanaz> mscdex: ok, that would have been good information on the read me. :)  
23:07 < ryanaz> mscdex:  been working on this for like 2 days and I'm a fish out of water with javascript.. this has been a lot to learn
23:07 < mscdex>  i thought it was common knowledge :S
23:07 < mscdex> ah ok
23:07 < ryanaz> /me is trying dicer once again. :) 
23:08 < ryanaz> Once i get dicer going, then I'm going to try to get it to work to upload to the S3 cloud..
23:08 < daleharvey> mikeal: I need to head off but cheers for kicking it off, if you get it to a point where it isnt finished but someone else can work on it, then it would be awesome to update with a little "what needs done" that guy thats assigned is one of the student program thing I am doing, so the more collaboration things they get to do the better
23:08 < mikeal> ok
23:08 < mikeal> i'm going to have to put it down soon
23:08 < ryanaz> mscdex: I have it working perfectly right now but using express + aws-sdk
23:09 < ryanaz> mscdex: I just hate that it uses /tmp 
23:09 < mscdex> ryanaz: yeah
23:09 < ryanaz> mscdex: and apparently dicer is way bfaster. 
23:10 < mscdex> ryanaz: well dicer is just a multipart parser, whereas formidable is much more
23:10 < mscdex> but yeah, dicer is faster than the formidable multipart parser 
23:10 < mscdex> Boyer-Moore-Horspool ftw!
23:11 < ryanaz> mscdex:  is this going to get me in trouble with other forms and stuff?  right now instead of doing bodyParser I'm switching to just having:    app.use(express.json()).use(express.urlencoded());
23:12 < ryanaz> mscdex: is this going to break all my other posts?
23:16 < ryanaz> mscdex: ok, so I only still see the "End of parts" 
23:16 < ryanaz> mscdex: hang on, my enctype didn't stick
23:20 < ryanaz> mscdex: same result
23:20 < ryanaz> mscdex: I just see "End of parts" 
23:23 < ryanaz> mscdex:  I can't seem to get it to say anything other than "End of parts"   http://pastebin.com/is6kt9ub
23:26 < ryanaz> Any ideas?
23:28 < ryanaz> mscdex: I see "BEGIN" right away and then after the finish of the upload I see "End of parts", but none of the other console.log's get triggered
23:29 < MI6> joyent/node: isaacs master * c773124 : lint (+1 more commits) - http://git.io/edZ9Dw
23:32 < SrPx> I'm trying to login on my server via SSH using node.js, but it's not working properly - I guess because ssh asks for password etc. exec('ssh my_domain',function(err,stdout,stderr){ console.log(stdout); }) // nothing happens (freezes)
23:32 < samholmes> Hey, I need some advice for how to design this pubsub system.
23:33 < ryanaz> SrPx: console.log(stderr) ;
23:34 < ryanaz> the password asking stuff displays in stderr
23:34 < mscdex> SrPx: you don't have to use a child process to connect via ssh
23:35 < SrPx> ryanaz: Hmm weird, you're right, but then, I type the password and nothing happens (obviously, I guess)
23:35 < SrPx> mscdex: so how
23:35 < mscdex> SrPx: https://github.com/mscdex/ssh2
23:35 < mscdex> ;-)
23:36 < samholmes> Say, I was designing something like twitter or facebook, a timeline or whatever. I would need a pubsub system for clients to receive real-time pushes of new posts/tweets/whatever. I could make a "new-post" channel to publish when new posts are created, but what if some posts are private or a client doesn't have authorization to receive the post?
23:36 < ryanaz> mscdex:  Any ideas for mine?   http://pastebin.com/is6kt9ub
23:36 < samholmes> How would I go about efficiently pushing these new posts down to clients?
23:36 < ryanaz> mscdex: All I see is "BEGIN" and "End of parts" … no other console.logs come through
23:36 < SrPx> mscdex: oh hm
23:36 < mscdex> ryanaz: i'm looking
23:38 < samholmes> If I made a channel for each user, then when a new post is created, I would need to publish to n channels where n is the number of users! That would be terrible.
23:38 < ryanaz> mscdex: thanks, i figured I would start with your example first, and then once that works to tweak that to work to upload to S3 
23:39 < Mortchek> samholmes, transposing it would be better – a channel per post, users to which it's visible are subscribed.
23:39 < samholmes> what does transpose mean?
23:39 < samholmes> Mortchek: could you rephrase the second part of your message?
23:39 < Mortchek> samholmes, I explained what I meant in this case.
23:40 < samholmes> the comma is confusing em
23:40 < samholmes> me*
23:40 < samholmes> channel per post or per user?
23:40 < Mortchek> Having a channel for each post would be almost entirely better than having a channel for each user.
23:40 < Mortchek> And users to which the post is visible are subscribed to it.
23:40 < Mortchek> But I'm not saying that's the best solution either.
23:40 < samholmes> Mortchek: how would this work exactly?
23:41 < samholmes> Say the channel name is post-230423569
23:41 < samholmes> how would a client know to sub to that channel?
23:41 < Mortchek> Then when the post is created, subscribe users to it based on some privacy rule I guess
23:41 < samholmes> It's a newly created channel.
23:41 < Mortchek> Honestly though using a system besides channels and subscriptions might be better
23:42 < samholmes> Mortchek: Well, I now I need to take a new post and evaluate which clients receive the post, so this is a given.
23:43 < Mortchek> I'm talking mostly abstractly because I don't actually know how you're implementing this
23:43 < ryanaz> samholmes: there's only a few logical options…  and depending on your database and infrastructure and tools the answer will be different
23:43 < samholmes> Well, I'm using Node.js and mysql
23:43 < samholmes> redis
23:43 < mscdex> ryanaz: did you also set 'method="POST"' in your form tag?
23:43 < samholmes> and linux
23:44 < ryanaz> mscdex:  Yes.  As you can see where it says "BEGIN" and "End of parts", that means that the app.post worked… 
23:44 < samholmes> Mortchek: If a user only receive a post because they're "friends" with said user, then I suppose you could publish posts to the post channel of the user who posted, then clients who are friends would be able to sub to a channel for each user.
23:45 < mscdex> ryanaz: well here's a little quick test that works for me: https://gist.github.com/mscdex/020275c1aa92267b0849
23:45 < Mortchek> samholmes, sounds reasonable.
23:45 < samholmes> That would be how I should do it then.
23:45 < samholmes> But other question.
23:46 < ryanaz> mscdex:  Am I running into a conflict with express somehow?
23:46 < samholmes> Say I didn't want a client who is not friends to open up a console and manually hack it to sub to a specific user's posts without being friends with them.
23:47 < Mortchek> Then don't give them access to your server machine? :P
23:47 < mscdex> ryanaz: could be. did you check to make sure you aren't loading the bodyParser middleware?
23:47 < samholmes> How could I prevent this? It would depend on what I'm using. I'm using dnode and shoe, and a custom pubsub (which needs work I admit)
23:47 < mscdex> ryanaz: i'm not sure what else would interfere
23:47 < ryanaz> mscdex:  Your test works fine on my form.  
23:47 < samholmes> Mortchek: stop them at the "pub step"?
23:48 < samholmes> sub step*
23:48 < ryanaz> mscdex:  Instead of bodyParser I'm using:    app.use(express.json()).use(express.urlencoded());
23:48 < samholmes> dub step
23:48 < samholmes> jk
23:48 < Mortchek> Expose only a limited interface over the network
23:48 < mscdex> pubstep.... a new music genre!
23:48 < Mortchek> That's kind of a given in all networking
23:48 < samholmes> mscdex: it's like irish dubstep
23:48 < crashsystems> I'm having issues trying to serve up a static files in Express. I've got a folder called static in my project directory, and I want to serve up anything in it under the root of the server. Anyone have some advice?
23:49 < mscdex> riverdancestep
23:49 < Mortchek> http://www.urbandictionary.com/define.php?term=Pubstep&defid=6403723
23:49 < SrPx> Hey guys cool but how do I connect to a telnet server using node.js?
23:49 < mscdex> SrPx: with the 'net' module
23:49 < mscdex> built-in
23:49 < samholmes> haha
23:49 < samholmes> didn't know pubstep existed
23:49 < Mortchek> I'm not sure it does in the form mentioned
23:50 < ryanaz> mscdex:  my form on your test worked fine..   what am I missing? 
23:52 < crashsystems> Nvm, I figured it out.
23:52  * crashsystems facepalm
23:52 < mscdex> ryanaz: i don't know, it's not either of those two middleware since they check the content type before progressing
23:52 < mscdex> ryanaz: process of elimination?
23:53 < ryanaz> mscdex:  Yah I 've tried adding in lots of console.logs but it just isn't hitting those d.on('part'…) or any of the other d.on('data'… ) 
23:54 < mscdex> what other middleware are you using?
23:55 < ryanaz>   app.use(express.cookieParser());   app.use(express.session(sessionStore(configuration.sessionStore)));   app.use(express.json()).use(express.urlencoded());   app.use(express.methodOverride());   app.use(passport.initialize());    app.use(passport.session());
23:56 < ryanaz> mscdex: is there a way to debug what req.pipe(d) is doing?  It's clearly chunking through the data.. but just not finding the parts
23:57 < mscdex> ryanaz: add a `req.on('data')` handler to see what (if anything) comes through the request
23:58 < ryanaz> mscdex: bingo … I see "DATA" everywhere now
23:59 < ryanaz> i did a console.log(data) in that function ..
23:59 < ryanaz> mscdex: so what does that mean? 
23:59 < mscdex> ryanaz: can you log the output and post it somewhere? it'd be interesting to see what dicer is missing
--- Log closed Sat Apr 20 00:00:02 2013
