--- Log opened Tue Sep 04 00:00:17 2012
00:00 < rvagg> I feel like I must have been on another planet while nginx was taking over web server mindshare, it was just suddenly a *thing* when I noticed it
00:05 < pyrotechnick> be funny if nginx had a backdoor
00:06 < Lorentz> nginx's been around for awhile though
00:06 < Lorentz> well, maybe i'm just an oldfag
00:07 < rvagg> "initial release: 2004", that's hardly a 'while'
00:07 < Lorentz> it's quite a while considering it's 8 years ago, and I've seen it ~5 years ago?
00:07 < Lorentz> in active use
00:07 < Lorentz> and 5 years is a while in webdev world imo
00:08 < zak_> backdoors get created all the time in software
00:08 <@konobi> it was the russian->english leap that really sped it up
00:09 < zak_> well, i guess it depends if you define a backdoor as something that's by design, or by accident
00:09 < zak_> Java 7 just recently had a 0-day flaw
00:09 < tuhoojabotti> I heard they renamed it everyday 
00:11 < pyrotechnick> who'se "they"?
00:14 < tuhoojabotti> pyrotechnick: https://twitter.com/corelanc0d3r/status/242244854841745408
00:15 < pyrotechnick> man numbers look shitty in Georgia
00:21 < Lorentz> zak_: backdoor in nodejs!
00:23 < AustinYun> hey
00:24 < AustinYun> can anyone tell me if there's a shorter way to do the piping thing here? https://gist.github.com/3525257
00:25 < AustinYun> modules like filed work beautifully because it's end-to-end streaming (open a readstream from a file, pipe it to a compressor, pipe the result to the response), but it seems if you have to insert something from memory into the stream stuff breaks down
00:25 < AustinYun> or, i am an idiot
00:26 <@konobi> AustinYun: seen fstream?
00:26 < AustinYun> what, from C++?
00:27 <@konobi> nope... isaacs module
00:27 < AustinYun> no
00:29 <@konobi> i've been able to use it along with node-tar and node-gzip to interleave in-memory stuff into tarballs
00:29 < AustinYun> basically what i'm trying to do is i wrote a blog engine, but i'm trying to rewrite it to be more stream-friendly, but given that pages are dynamically generated, i don't see how you elegantly stick dynamically generated stuff into the streams
00:30 <@konobi> AustinYun: other than just res.write() ?
00:30 < AustinYun> res.write() is how i'm doing it write now
00:31 <@konobi> well, that's a stream, so you're good
00:32 < AustinYun> if you look at the gist above, i guess i'm just asking if there's a way to get rid of the part in the middle where you have to assign a bit of the stream machinery to a temp variable, write to that, and then continue the piping
00:32 < AustinYun> because it doesn't seem very elegant, and when stuff seems inelegant it usually means i'm doing it wrong
00:32 <@konobi> middleware?
00:33 <@konobi> like how connect does it
00:33 < AustinYun> i should look at how connect does it sometime
00:34 < AustinYun> obviously in this day and age the only reason i'm writing a blog engine is to get to know the bits and pieces and little details of how node works
00:36 < benvie> does npm provide a way to install dependencies based on both os and arch now? is that a thing?
00:38 <@konobi> benvie: os and cpu
00:39 <@konobi> but if you're talking about optionals... i don't know
00:39 < benvie> well ideally there's one main package and then one package for each os/arch combo 
00:39 < benvie> with them each being optional
00:40 < benvie> so it fails on all but the right one
00:40 <@konobi> benvie: time to bug isaacs
00:40 < benvie> right now we're using a postinstall hook but it's unreliable and seems like it shouldn't be a thing that needs to exist
00:41 < rvagg> getting any closer to 64-bit mac benvie?
00:41 < Init--WithStyle-> Hi everyone... how does "requestAnimFrame" interact with things when it is run on a node.js server?
00:41 < Init--WithStyle-> Considering that there is no browser frame to request anim from...
00:41 < benvie> yeah there's an active development process now that was kicked off in Chromium for porting 
00:41 < benvie> and handful of people contributing to it
00:41 < benvie> it should be noted that appjs does work on osx 32bit, you just need to use the 32bit node osx binary too
00:42 < benvie> but we're planning on having 32bit and 64bit available for every platform in the next month or so
00:42 < Init--WithStyle-> Anyone know?
00:44 < EuroNerd> Init--WithStyle-, I have no idea, but I'd assume it doesn't work.
00:45 < deltab> Init--WithStyle-: where are you getting the function from on the server?
00:45 < Init--WithStyle-> Well i'm currently using a game engine library and it uses requestAnimFrame for it's tick method on the node.js side..
00:46 <@konobi> Init--WithStyle-: nowhere... no such thing
00:46 <@konobi> Init--WithStyle-: what does it do again?
00:47 < Init--WithStyle-> it ticks a game engine loop forward, supposedly
00:48 < rvagg> Init--WithStyle-: i think that comes from the DOM so you'd have to replace it with something else in Node
00:48 < Init--WithStyle-> setInterval right
00:48 < rvagg> cause Node 'aint got no DOM
00:48 < ChrisPartridge> Init--WithStyle-: yeah, it is just a setInterval
00:50 <@konobi> well... no doubt you could do it based on events + intervals
00:51 < ChrisPartridge> not sure why you would want that on the server side though :s
00:52 <@konobi> ChrisPartridge: if the entire engine is in node and the client side is just a "viewer"
01:00 < AustinYun> huh
01:01 < AustinYun> substack's fleet seems to be like, recreating erlang in the large
01:01 < AustinYun> awesome
01:01 < pyrotechnick> :s
01:02 < jmpe> Wondering if there is an established node pattern for rotating log files?
01:03 < jmpe> I am creating a write stream on a socket and logging a real time feed.
01:04 < jasonkuhrt> not sure if this is the best channel to ask (##javascript didn't work) but here goes
01:04 < jmpe> The file gets large. How would I have the write stream change to a different file on the fly?
01:04 < jasonkuhrt> can any explain how to use partial application (currying?) in order to derive extend_each from each and extend (using underscore.js)
01:04 < jasonkuhrt> 8:57 PM
01:04 < jasonkuhrt> from this:
01:04 < jasonkuhrt>    _.each Template, (template)->
01:04 < jasonkuhrt>      _.extend template, globals_dictionary
01:04 < jasonkuhrt> to this (goal):     extend_each Template, globals_dictionary
01:05 <@konobi> jasonkuhrt: that's coffeescript... get out!
01:05 <@konobi> =0P
01:05 < deltab> jasonkuhrt: isn't that just a function containing that code, with Template and globals_dictionary as parameters?
01:06 < AustinYun> hm
01:06 < jasonkuhrt> deltab taht would be the one-off way to do it, i'm asking about a partial-application way though
01:07 < jasonkuhrt> I just started looking through thread: https://github.com/documentcloud/underscore/pull/474
01:08 < pyrotechnick> has that landed in underscore?
01:08 < deltab> jasonkuhrt: oh right
01:08 < jasonkuhrt> pyrotechnick: nope
01:09 < jasonkuhrt> 5 months ago, quote: "Closing for the time being, but let's reopen this if someone comes up with some good real-world examples for currying in JS apps/pages/projects."
01:09 < pyrotechnick> so how do we answer your question?
01:09 < deltab> jasonkuhrt: the function you give to _.each is a partial application of _.extend
01:10 < AustinYun> the basic idea i think would be to use function.bind() to bind the thing you want to extend in _.extend and pass it to _.each
01:10 < jasonkuhrt> pyrotechnick: people are claiming _.bind is enough for most cases, otherwise maybe a vanilla js solution
01:10 < AustinYun> but i'm terrible at everything
01:10 < rvagg> if you're in an ES5 environment (like Node) then Function.bind is good enough for currying
01:10 < jasonkuhrt> ...thining...
01:11 < jasonkuhrt> thinking*
01:11 < pyrotechnick> the eagle never lost so much time as when he submitted himself to learn from the crow
01:11 < rvagg> you run into problems wen you need to support older IE, but if there's a _.bind then that's cool
01:13 <@konobi> AustinYun: http://ejohn.org/apps/learn/
01:13 <@konobi> very useful
01:15 < Init--WithStyle-> konobi: on a node.js server, what might be the best data structure to use for sort/find operations on an UID sorted list of objects?
01:15 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
01:16 <@konobi> Init--WithStyle-: o.O
01:16 < Init--WithStyle-> O.o
01:16 <@konobi> .sort() ?
01:16 <@konobi> there's lots of variables to that question
01:16 < Init--WithStyle-> just slap all of the objects into an array?
01:18 <@konobi> again, there's lots of variables to that question
01:44 < jasonkuhrt> how could I make this into a logEach function?
01:44 < jasonkuhrt> logEachNum = _.bind(_.each, null, {a:1,b:2}, function(item){console.log(item)})
01:44 < jasonkuhrt> I need the derived function to take an arg which is the list (hard-coded above as {a:1,b:2}
01:44 < jasonkuhrt> )
01:56 < Raynos> who else arriving outside of joyent at 10am with too much energy?
02:02 < mscdex> anyone know of a fast, well-documented multipart parser for node?
02:06 < pyrotechnick> mscdex: https://github.com/felixge/node-formidable
02:06 < mscdex> i just need the parser
02:06 < pyrotechnick> and what is this
02:07 < mscdex> formidable is more than just the parser, and i need something that's well documented :\
02:07 < mscdex> documented/commented
02:07 < pyrotechnick> https://github.com/felixge/node-formidable/blob/master/lib/multipart_parser.js
02:07 < pyrotechnick> what's to document?
02:07 < mscdex> i tried looking at his multipart parser several times, and it's difficult trying to follow the logic
02:09 < pyrotechnick> `npm search multipart`
02:14 < mscdex> that one's for creating multipart bodies :S
02:15 < pyrotechnick> man write it yourself aye you're unpleasable
03:08 < scttnlsn> is there a way to determine where a node program is spending its time on OS X?
03:08 <@konobi> dtrace
03:08 <@konobi> or... instruments.app
03:09 <@konobi> sam tech, either way
03:09 < scttnlsn> don't think dtrace was working on OS X
03:15 < scttnlsn> konobi: playing around with instruments.app...is there any way to see the JS function names?
03:26 < timoxley> is a way to easily inspect what a http server is receiving/sending without modifying any code between createServer() and res.write()?
03:27 < timoxley> i.e wrap it in something or have it send requests against a proxy that simply inspects the traffic
03:27 < deoxxa> tcpdump?
03:27 < deoxxa> and/or wireshit
03:28 < tjholowaychuk> timoxley there's NODE_DEBUG=http
03:29 < tjholowaychuk> i cant remember what it dumps though
03:30 < timoxley> deoxxa it's for debugging, should be easy enough to turn on and off within node
03:30 < ccowan> npm insatll http_trace
03:30 < timoxley> tjholowaychuk ccowan thanks! investigating
03:37 < rvagg> timoxley: if you look in http.js there is a NODE_DEBUG=http that will print guff to stderr, if you wanted to turn it on live I guess you could invalidate http from the require cache and re-require it
03:39 < timoxley> rvagg good idea
03:41 < ccowan> timoxley: what are you trying to acomplish? Do you want to inspect the data or just confirm that requests are making it to the server and the response is being sent (and closed)?
03:54 < dyer> hey guys, question, what is the equivalent of ["087f82c53666d4409bef2aad1bd902157cdcf6c77ff3c653f806379ff1573b25cddb83cc178f44a37a2ee06e"].pack('H*') in node ? I am trying to convert a script we have to Node from Ruby and I am having trouble getting this part working 
04:01 < rvagg> what does H* convert it to in Ruby?
04:01 < rvagg> you'll probably want to look at the Buffer docs dyer, stick stuff in a Buffer with a particular encoding, toString() it as a different encoding
04:02 < dyer> rvagg, yea thats what I have been looking at actually 
04:02 < dyer> but to answer your original question H* is "hex string (high nibble first)" 
04:02 < rvagg> new Buffer('str', 'in-encoding').toString('out-encoding')
04:03 < rvagg> see http://nodejs.org/docs/latest/api/buffer.html for the encodings you get with Buffer
04:03 < rvagg> if there's an encoding you want that's not there then search the npm registry, it's likely that someone has already written a module for it
04:08 < dyer> Yea, maybe I just missing something but I can't seem to find anything in node that give me the same output I am getting in Ruby
04:08 < dyer> 1.9.3p194 :014 > [token].pack('H*')
04:08 < dyer>  => "\b\x7F\x82\xC56f\xD4@\x9B\xEF*\xAD\e\xD9\x02\x15|\xDC\xF6\xC7\x7F\xF3\xC6S\xF8\x067\x9F\xF1W;%\xCD\xDB\x83\xCC\x17\x8FD\xA3z.\xE0n" 
04:08 < dyer> token = "087f82c53666d4409bef2aad1bd902157cdcf6c77ff3c653f806379ff1573b25cddb83cc178f44a37a2ee06e"
04:18 < timoxley> ccowan just want to inspect the data to see what it actually looks like. I could go hack up the module to add console.logs but figured there was a more elegant way to do it
04:20 < rev_icon> Best practices question: I'm reading some blogs on best practices, for example…   http://calv.info/node-and-express-tips/  
04:21 < rev_icon> and one of the suggestions is to make everything you write a module, for ease of code reuse, etc.  Makes sense to me, but I think I'm missing something.  I've created a couple modules, complete with package.json files, etc, but I don't seem to get the method people are using to take that module and push it somewhere where it's installable by another machine, or similarly, how
04:21 < rev_icon> do you organize your modules so that you can include them in your stack (via the dependancies section of your main package.json )
04:21 < ccowan> timoxley: you could also use https://github.com/dannycoates/node-inspector
04:21 < ccowan> then add breakpoints 
04:21 < rev_icon> This is assuming of course that the code you're writing is for internal use only and not something you would want published to the npm repository
04:22 < timoxley> ccowan also a good option
04:26 < dyer> yea, I am not seeing any existing nom's that are claiming to return a hex string (high nibble first) from a string…  
04:27 < dyer> err, nom's == npm's
04:33 < rvagg> hey dyer, this comes very close, not *quite* the same tho: new Buffer("087f82c53666d4409bef2aad1bd902157cdcf6c77ff3c653f806379ff1573b25cddb83cc178f44a37a2ee06e", 'hex').toString('binary')
04:34 < rvagg> stick your result string above into Node and you'll see it print a very similar result
04:34 < iwoj> I'm using the http library and for some reason console.log messages get returned in the response. Is that normal?
04:35 < dyer> rvagg, I am not getting the same value at all actually 
04:35 < dyer> Å6fÔ@ï*­?|ÜöÇóÆSø7ñW;%ÍÛÌD£z.àn
04:35 < rvagg> this is what you pasted: '\bÅ6fÔ@ï*­\u001bÙ\u0002\u0015|ÜöÇóÆSø\u00067ñW;%ÍÛÌ\u0017D£z.àn'
04:36 < rvagg> this is what I get from the Node code: '\bÅ6fÔ@ï*­eÙ\u0002\u0015|ÜöÇóÆSø\u00067ñW;%ÍÛÌ\u0017D£z.àn'
04:36 < dyer> maybe the client munged it ?  here is a gist --> https://gist.github.com/714a4e2e49f114b9cedc
04:36 < iwoj> when a node server prints to console.log, it should output to the command line, not the response object, correct?
04:38 < rvagg> see my comment on the gist
04:38 < gildean> iwoj: of course, unless you push it to the response-object
04:39 < etcetera> is it in appropriate to pass a reference to an express.js app to a module?
04:39 < etcetera> are there case where those maintain deep copies?
04:40 < dyer> rvagg, thank you for helping but I think u maybe misunderstanding what Iam trying to accomplish.  I am trying to get from n to s ( see comment ) 
04:46 < rvagg> dyer: right, so you want to print an escaped string
04:46 < rvagg> that's beyond JS or even Node core for those kinds of strings, you can print URL escaped pretty easily but that's not what you want
04:47 < rvagg> Mathias Bynens writes a bit about this, check out http://mathiasbynens.be/notes/javascript-escapes
04:47 < rvagg> AND, as a bonus, he has an escaper that'll do what you want I think: http://mothereff.in/js-escapes
04:48 < rvagg> stick in the binary string you get from the Buffer code and you should ge something similar to what you want. his code is on github
04:51 < dyer> rvagg, hem, so I get that its close, but why not exactly the same ?
04:51 < rvagg> I have no idea! have you run the same code on your system? perhaps it's due to OS or copy/paste differences?
04:52 < rvagg> wouldn't be surprised if there was some strange ruby magic in there either.... JavaScript isn't known for its encoding prowess but that's what we have Buffer for in Node, a native extension just for this
04:54 < rvagg> have to disappear but I'd be interested to know if you discover the answer, will check back later
04:58 < dyer> rvagg, this got me what I needed 
04:58 < dyer> new Buffer('087f82c53666d4409bef2aad1bd902157cdcf6c77ff3c653f806379ff1573b25cddb83cc178f44a37a2ee06e','hex').toString('base64')
04:58 < dyer> Thank you fro your help
07:33 < [AD]Turbo> hi there
07:36 < jarr0dsz> hi everyone! might not be total in right room but.. would like to build an instant messenger only ( no group chat )
07:37 < jarr0dsz> looking at xmpp are there any good servers to use for an instant messenger, or a writeup, example that implements one to have a good start and not reinvent the wheel?
07:37 < jarr0dsz> or an "im only server " like openfire but pre-configured to only handle instant 1-1 messasing ?
07:48 < nathan7> jarr0dsz: there are plenty of free XMPP servers you can use - there are plenty of server implementations too
07:48 < jarr0dsz> nathan7: have tried openfire and ejabberd the problem is more how to get the frontend working
07:49 < jarr0dsz> basically i need a facebook like featureset, with just some status en 1-1 only
07:49 < jarr0dsz> already search for an hour for a good document describing how to set that up
07:50 < nathan7> You're aware you're in #node.js?
07:50 < nathan7> https://github.com/astro/node-xmpp seems like an excellent XMPP lib
08:02 < jarr0dsz> has node.js a xmpp based instant messenger solution, howto, writeup somewhere?
08:02 < jarr0dsz> anyone wrote an 1-1 facebook like instant messenger with node and xmpp?
09:06 < mtsr> Hey everyone. I'm looking for a good facebook graph api library. I don't need express or connect integration (I'm using socket.io), but I'd like it to handle signedRequest validation (since I'm using the javascript sdk for fb login). I've now looked at a couple, but there are so many libraries for this around and a lot of them are fairly crappy, so I'd love some suggestions.
09:25 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
09:32 < der_On> hi. does someone use geddy here? I would like to know a couple things I wasn't able to find in forums/google etc. 1. How to register my own ViewHelper? 2. is there a viewHelper for translation?
09:33 < pyrotechnick> wow they're still devving geddy?
09:33 < pyrotechnick> that's cool
09:41 < der_On> pyrotechnick: yes, the commit log shows recent activity from a lot of devs. That's why I chose it for my new project
09:41 < pyrotechnick> it was one of the first decent projects
09:41 < der_On> well, but it's not well documented in my opinion.
09:41 < der_On> thus my questions
09:42 < der_On> maybe I'm also a bit of a node.js noob. but already made some small web-apps with it, but not yet with geddy
09:43 < der_On> I've found out that it has a i18n module on its own, but I can't find any t() or __() function
09:43 < der_On> and it has geddy.ViewHelpers, wich I tried to extend, but it gave me errors
09:44 < pyrotechnick> let me take a quick peep champ
10:14 < nickleefly> hi everyone, how to learn from node source code?
10:15 < mainerror> nickleefly: What do you mean?
10:15 < nickleefly> i mean learn how node works
10:15 < mainerror> Are you looking for the source code repository?
10:16 < nickleefly> i know the source code repo
10:16 < nickleefly> i want to learn from it
10:16 < mainerror> I don't understand the question then.
10:16 < nickleefly>  is there some wiki for getting through node source files
10:16 < mainerror> None I'd know about.
10:17 < nickleefly> k thanks
10:17 < mainerror> But that doesn't have to mean there is none.
10:17 < nickleefly> i'll try google it
10:17 < der_On> what about the API docs?
10:18 < der_On> http://nodejs.org/api
10:18 < mainerror> I think he means how to read the source code.
10:18 < der_On> oh box
10:18 < der_On> boy
10:19 < nickleefly> yea, the source code logic
10:20 < mainerror> All I know about is this. https://github.com/joyent/node/wiki/Contributing
10:20 < mainerror> However that's more the contribution conventions.
10:21 < nickleefly> thanks anyway
10:21 < nickleefly> reading it now
10:22 < pyrotechnick> nickleefly: have you watched the talks by ry?
10:23 < nickleefly> yea i watched the talk by ry
11:33 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:17 < eddyb> is there any way I can easily bypass module caching?
12:18 < pyrotechnick> eddyb: i think not, by design
12:19 < pyrotechnick> i remember something called like hotnode or somethjing
12:19 < pyrotechnick> but it was a pile of hacks
12:19 < pyrotechnick> i don't even think you're guaranteed for the module to be cached
12:19 < eddyb> I want to require a file without caching it
12:19 < pyrotechnick> i know
12:20 < eddyb> so every time I require it it loads the file again
12:20 < pyrotechnick> the other thing you can do is just eval it
12:20 < eddyb> can I access any module loading internals, like the module wrapper?
12:21 < pyrotechnick> http://nodejs.org/api/all.html#all_modules
12:21 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:21 < eddyb> pyrotechnick: I read that, basically useless :(
12:21 < pyrotechnick> next step
12:21 < pyrotechnick> the code
12:22 < RLa> redefine require :)
12:22 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:23 < RLa> then you can use specialized require for your own code and original require for modules
12:23 < RLa> anyway, it sound like a bad idea
12:24 < pyrotechnick> if you think about it, it's really impossible
12:24 < pyrotechnick> but if you really want to try
12:24 < RLa> eddyb, another hack would be to create require2 which reads the file and then eval's the content
12:24 < eddyb> :|
12:24 < pyrotechnick> http://nodejs.org/docs/latest/api/globals.html#globals_require_cache
12:25 < pyrotechnick> then just fuck with the cache object
12:25 < RLa> pyrotechnick, you can't redefine require?
12:25 < eddyb> if I want to, I can copy the entire module loader and remove the caching
12:25 < pyrotechnick> no you cant load modules without a cache
12:25 < RLa> yes you can
12:25 < gildean> eddyb: you could create a different kind of function in the module, export that and call it in the app, iirc that should read the function again even if the module is cached
12:25 < RLa> but why the hell you would do that
12:25 < gildean> i might be wrong tho'
12:25 < pyrotechnick> eddyb: it's im
12:25 < pyrotechnick> http://nodejs.org/docs/latest/api/globals.html#globals_require_cache
12:25 < pyrotechnick> Modules are cached in this object when they are required. By deleting a key value from this object, the nextrequire will reload the module.
12:25 < pyrotechnick> but think hard about what you're doing
12:26 < RLa> anything that changes semantics of require is wrong
12:26 < eddyb> pyrotechnick: thanks, direct access to the cache is enough
12:26 < pyrotechnick> understand it can completel break inter-dependent packages
12:26 < eddyb> lol?
12:26 < RLa> eddyb, why you need such system at all
12:26 < pyrotechnick> The reason this is necessary is to allow cycles to be resolved. You can see an example of this here:http://nodejs.org/docs/latest/api/modules.html#cycles. If you could invalidate the cache somehow, you could cause an infinite loop due to circular dependencies. Even if you can be reasonably confident that your application code won't cause this, it could happen in any libraries you use.
12:26 < eddyb> RLa: loading "plugins"
12:27 < pyrotechnick> RLa:  have you seen inventing on principle?
12:27 < RLa> inventing on principle?
12:27 < pyrotechnick> http://vimeo.com/36579366
12:27 < pyrotechnick> by the end you'll realise why you'd want something like this
12:28 < pyrotechnick> in fact it will pain you not to have it
12:28 < RLa> eddyb, why that need change to current require system?
12:28 < eddyb> RLa: I need to be able to reload them at any time
12:28 < eddyb> RLa: without restarting the app
12:29 < pyrotechnick> eddyb: delete require.cache[require.resolve(NAME)]
12:29 < pyrotechnick> in case you were wondering how to get the key
12:29 < eddyb> pyrotechnick: yepp, I figured that out
12:29 < pyrotechnick> sick lad
12:30 < pyrotechnick> hmm just found this
12:30 < pyrotechnick> https://github.com/tenphi/jsync
12:31 < pyrotechnick> not what you need but similar, quite cool really
12:32 < AntelopeSalad> random js question: what's the term used to describe passing an argument from an outer function to an inner function?
12:32 < pyrotechnick> argument
12:32 < pyrotechnick> parameter is the placeholder
12:33 < AntelopeSalad> hmm
12:33 < AntelopeSalad> my question stemmed from looking at this: http://pastebin.com/8WFyAe9P
12:33 < faraway> hi, i'm currently looking for the right platform that i can use with a project. it will a web application that should be able to handle many concurrent connections and long running pull requests. is there a good article about Node.js that tell's where it performs good and where not. (i for sure will do my own benchmarks, but i want to have a brief overview)
12:34 < AntelopeSalad> i'm not really sure how fn magically knows to replace x with the argument of f
12:36 < pyrotechnick> not sure what you mean bro
12:36 < pyrotechnick> nothing magic there
12:36 < AntelopeSalad> yeah i'm failing to grasp something obvious maybe
12:36 < AntelopeSalad> take a look at line 6
12:37 < AntelopeSalad> if you pass a function to memoize with 1 argument, then x becomes that argument
12:37 < AntelopeSalad> but i don't get why
12:37 < eddyb> AntelopeSalad: uhm, that's just a wrapper
12:38 < eddyb> AntelopeSalad: to be more specific, it's just a plain cache wrapper
12:38 < pyrotechnick> it cant memoize > 1 argument?
12:38 < AntelopeSalad> pyrotechnick: it can with some adjustments, i stripped the code out of an article
12:38 < AntelopeSalad> multi-arguments was coming next
12:38 < eddyb> it can only memoize one number/string argument
12:38 < pyrotechnick> what's wrong with underscore
12:39 < pyrotechnick> https://github.com/documentcloud/underscore/blob/master/underscore.js#L558
12:39 < eddyb> for other types of arguments, you need an array and indexOf, which I'm assuming it's slower
12:39 < eddyb> for multiple arguments, you have to reimplement indexOf, so it's even slower
12:40 < pyrotechnick> or hash it
12:40 < eddyb> but it's doable, I mean, I've done it
12:40 < AntelopeSalad> pyrotechnick: nothing wrong with underscore, i am just trying to learn about memoization and happened to see an article with that code
12:40 < pyrotechnick> like they are
12:40 < eddyb> pyrotechnick: hashing, uhm, sounds bad
12:40 < pyrotechnick> if you can beat underscore im sure they want a patch
12:40 < eddyb> oh, well, I don't care about underscore
12:40 < pyrotechnick> http://jsperf.com/ go nuts
12:41 < eddyb> v8 can do crazy things so I won't even bother
12:42 < astropirate> How can I get a model from mongoose by giving its name? I saw it the docs a few days ago but i cannot find it anywhere now..
12:42 < pyrotechnick> mongoose.model 'name'
12:42 < pyrotechnick> but you have to have registered it with like
12:42 < pyrotechnick> mongoose.model 'name', value
12:42 < astropirate> right
12:42 < astropirate> thanks pyrotechnick 
12:42 < CIA-116> node: Ben Noordhuis master * r83b1dda / (src/node.cc test/simple/test-cli-eval.js): cli: make argument to -p optional - http://git.io/_ff9Og
12:42 < CIA-116> node: Ben Noordhuis master * r19a4322 / test/simple/test-cli-eval.js : test: add extra checks in simple/test-cli-eval - http://git.io/r7sx8g
12:42 < pyrotechnick> and it's a fucked up abuse of commonjs
12:42 < pyrotechnick> akin to using globals
12:43 < astropirate> pyrotechnick, :O
12:43 < astropirate> how so?
12:43 < pyrotechnick> it's a global
12:43 < pyrotechnick> and undefined behaviour
12:44 < astropirate> i woudlnt have done it this way.. but you work with what you got :p
12:44 < pyrotechnick> mongoose is written rather poorly IMHO
12:44 < pyrotechnick> hope 2.0 is better
12:44 < astropirate> when Is 2.0 coming out?
12:45 < pyrotechnick> nfi
12:45 < astropirate> i dont want to write big applicationw ith this version
12:45 < pyrotechnick> it's probably an artefact of mongo's codebase sucking hard in the first place
12:45 < astropirate> and new major release come sout
12:45 < pyrotechnick> i wouldn't hold your breath
12:45 < pyrotechnick> if the trend continues it'll suck even more so
12:45 < astropirate> pyrotechnick, you aren't one for ODM  or just mongoose?
12:46 < pyrotechnick> not even it's api or anything just the actual code is
12:46 < pyrotechnick> scrappy
12:47 < drudge_> pyrotechnick: isn't mongoose on 3.0
12:47 < pyrotechnick> whatever
12:47 < astropirate> the hate is strong with this one
12:48 < pyrotechnick> the hype is strong
12:49 < gildean> astropirate: are you sure some lighter async mongodb wrapper wouldn't be sufficient?
12:50 < gildean> like mongojs for example
12:50 < astropirate> i'm open to whatever
12:50 < pyrotechnick> ...anything
12:50 < pyrotechnick> you heard it here first folks
12:51 < pyrotechnick> astropirate is DTF
12:51 < astropirate> DTF?
12:51 < astropirate> ahh
12:51 < astropirate> :p
12:52 < astropirate> the line starts behind pyrotechnick 
12:52 < pyrotechnick> i dont line up
12:53 < drudge_> astropirate: i like mongoskin/monk myself
12:53 < eddyb> pyrotechnick: I actually did it in the index.js of the directory where I'll put the "volatile" modules
12:53 < pyrotechnick> clever
12:53 < eddyb> pyrotechnick: https://gist.github.com/3620909
12:55 < eddyb> it's funny because it works when requiring it from just plain node
12:56 < AntelopeSalad> are all of the features listed in monk's readme not in mongoskin?
12:57 < AntelopeSalad> i always thought monoskin's api was really nice, but it seemed to do a lot of stuff that i didn't need
12:57 < pyrotechnick> like an appendix
12:57 < pyrotechnick> or tailbone
12:58 < pyrotechnick> or the blue-light-sensitive cells outside the range of our vision
12:58 < AntelopeSalad> i heard they made glasses for that light range
12:58 < pyrotechnick> that redshifts it?
12:59 < AntelopeSalad> i'm not sure of the mechanics of what they did, other than protect your eyes from deadly blue light
12:59 < pyrotechnick> it wouldn't work for these cells though, they're literally outside our viewable range
12:59 < pyrotechnick> ohh
12:59 < pyrotechnick> uv
12:59 < pyrotechnick> you mean sunglasses
12:59 < pyrotechnick> ?
13:00 < AntelopeSalad> they were marketed as programming glasses
13:00 < drudge_> AntelopeSalad: monk uses mongoskin
13:00 < AntelopeSalad> because lcds supposesly give off a less potent uv
13:00 < AntelopeSalad> (less than the sun, but still more than normal)
13:00 < pyrotechnick> i've seen coders use dyslexia glasses
13:00 < pyrotechnick> even when they don't have it
13:01 < pyrotechnick> and also tint their screens very very yellow almost red
13:01 < deoxxa> i use f.lux for that at night
13:01 < pyrotechnick> yeah that's it
13:02 < pyrotechnick> used to use that at my last gig but forgot the name, cheers
13:02 < pyrotechnick> there's another called shades or something
13:02 < pyrotechnick> flux is much better
13:02 < deoxxa> you don't think it's going to do anything, but i find it way easier to get to sleep at the end of the day now
13:02 < pyrotechnick> i loved it
13:02 < pyrotechnick> i miss it
13:02 < pyrotechnick> thankyou
13:02 < deoxxa> \o/
13:02 < pyrotechnick> you get used to it very quickly
13:02 < pyrotechnick> and then white sucks
13:03 < pyrotechnick> any aussies in the house?
13:03 < deoxxa> yes
13:03  * deoxxa waves
13:03 < pyrotechnick> AEST?
13:03 < pyrotechnick> good game's sleepover special about to kick off
13:03 < deoxxa> it's... 11pm
13:03 < deoxxa> so i'm not sure
13:03 < pyrotechnick> yes
13:03 < pyrotechnick> that's AEST
13:03 < deoxxa> haha
13:03 < deoxxa> i don't know what timezone i'm in anymore, due to everything adjusting itself based on location
13:04 < pyrotechnick> Stephanie bendixson <3
13:04 < deoxxa> modern conveniences
13:05 < pyrotechnick> tim's definitely watching hex
13:05 < pyrotechnick> he's all up in that shit
13:05 < pyrotechnick> tim DMDN shut down
13:06 < drey> is there a neater way of getting the db in one.js with this kind of setup: http://pastie.org/4662017
13:06 < drey> short of using globals?
13:08 < deoxxa> sure
13:09 < drey> deoxxa: oh yeah?
13:09 < deoxxa> there's a couple of ways to do it, i'll gist it
13:11 < deoxxa> https://gist.github.com/3621016 there's one way
13:11 < drey> thanks
13:11 < yawnt> http://i.imgur.com/mbptp.jpg
13:11 < deoxxa> that's the way i'd do it
13:11 < yawnt> :3
13:11 < drey> so, dependancy injection
13:12 < deoxxa> yep
13:12 < CIA-116> node: Ben Noordhuis master * r2efa3ae / tools/install.py : installer: reapply b21c8e0b, honor --without-npm (+17 more commits...) - http://git.io/xhZiiA
13:12 < deoxxa> yawnt: you know you can do `app.get("/herp/derp", function1, function2, ...)', right?
13:13 < drey> I guess it'll probably end up looking prettier
13:13 < deoxxa> drey: more importantly, it lets you swap out the "db" thing with anything that provides the right interfaces
13:14 < deoxxa> depending on what you're doing, that might be useful
13:14 < deoxxa> it can also mean your app.js becomes a huge mess of object instantiation if you take it too far
13:14 < yawnt> deoxxa: yep
13:14 < yawnt> but i like the array version more
13:15 < deoxxa> fair enough
13:15 < drey> for now I just want to be able to use the database in a few different places
13:15 < deoxxa> i guess it makes sense if you don't have inline stuff
13:15 < yawnt> deoxxa: btw i was showing the vim stuff
13:15 < deoxxa> oh
13:15 < deoxxa> heh
13:15 < AntelopeSalad> is that tmux?
13:16 < deoxxa> i use nano （°々。）
13:16 < CIA-116> node: Bert Belder issue3964 * r9236230 / (56 files in 5 dirs): doc: don't use &apos; - http://git.io/ORYVNg
13:17 < drey> but with spine, something like: class Tasks extends Spine.Controller is working because Spine is set as a global?
13:21 < yawnt> AntelopeSalad: wat?
13:22 < AntelopeSalad> yawnt: in that screenshot, it looks like your terminal is split into 2 - i was asking if you were using tmux
13:22 < Clex> Hi. Does anyone know what's wrong with that: var myBase64 = 'H4sIAF8ARlAAAyvJL8nnAgC9CH34BQAAAA=='; console.log(new Buffer(myBase64, 'base64').toString('binary'));
13:22 < CIA-116> node: Bert Belder issue3964 * r35d1da1 / (15 files in 2 dirs): doc: don't use &apos; - http://git.io/XWOdHA
13:22 < Clex> This works fine: echo 'H4sIAF8ARlAAAyvJL8nnAgC9CH34BQAAAA==' | base64 -d | gzcat
13:27 < yawnt> AntelopeSalad: not, it's a tiling wm
13:27 < yawnt> monsterwm
14:04 < CIA-116> node: Timothy J Fontaine master * rd3135e0 / (configure tools/gyp_node): build: add configure option to build with ninja - http://git.io/Ylh98g
14:04 < CIA-116> node: Ben Noordhuis master * r7b6d3ce / (Makefile configure): build: add ninja support to Makefile - http://git.io/afPQnA
14:23 < metadan> can anyone advise me on an issue i'm having compiling less files with a capistrano deploy task. The problem i have is that when i log in to the server, npm/less is installed by the root user and the user i'm in as can't run lessc
14:25 < CIA-116> node: Bert Belder issue3964 * r12e327d / (18 files in 4 dirs): doc: don't use &apos; - http://git.io/EEDYtA
14:25 < Aldus> which module would you advise for connecting to mysql, the mysql or db-mysql? 
14:27 < metadaan> anyone? Any help greatly appreciated. How can i run the node command as non root user when its installed by root?
14:28 < nkuttler> metadaan: um.. make it +x to your user/group?
14:29 < metadaan> nkuttler: ok i'll try that thanks
14:37 < guest15234> anybody here running a node.js based chat community?
14:37 < pyrotechnick> i know a couple in dev
14:37 < pyrotechnick> stickam clones
14:37 < guest15234> open source or closed, commercial?
14:38 < pyrotechnick> closed
14:38 < guest15234> thx okay
14:38 < pyrotechnick> how come
14:38 < pyrotechnick> i can hook you up if need be
14:39 < freewil> https://github.com/gravityonmars/Balloons.IO
14:40 < freewil> oh.. left
15:21 < bingomanatee> hey I just noticed the debuggable archives ('http://nodejs.debuggable.com/') seem to end at March … is there a better archive?
15:22 < bingomanatee> npm is the node.js based chat community :D
15:29 < austincheney> if i think my NPM account is corrupt who should I contact?
15:30 < timeturne> @isaacs ^
15:31 < austincheney> thank you, i did post an issue at isaacs NPM distro on github
15:31 < austincheney> just not sure if that was the correct place
15:38 < defeated> austincheney: npm mailing list probably better than a github issue: https://groups.google.com/forum/?fromgroups#!forum/npm-
15:38 < austincheney> defeated thank you
15:44 < grange> hey. does anyone have experience with everyauth? I have the problem that - if i specify the canvasPath property, the middleware does not work anymore. thanks
15:47 < superjoe> why are http and https in different modules as opposed to ssl being a possible flag for http?
15:49 < lperrin> perhaps so that you don't get the overhead of loading all https stuff if you only need http ?
15:49 < austincheney> superjoe putting https in a separate module provides more freedom to perform certificate validation and key transfer completely outside of HTTP
15:53 < bingomanatee> Whats the easiest way to get the SIZE of an http (static) page (without actually loading it)?
15:54 < RLa> bingomanatee, head request?
15:55 < jcrew> bingomanatee: a page you're serving or trying to get served?
15:55 < superjoe> is this code idiomatic? http://pastie.org/4662933
15:55 < bingomanatee> http://static.izs.me/irclogs/node.js/2012-09-01.txt
15:55 < jcrew> cool
15:56 < jcrew> is that the internet?
15:56 < bingomanatee> < stares at feet
15:56 < fresham> What is the best way to package up node modules and their dependencies into an archive so that you can install locally without an internet connection?
15:56 < RLa> bingomanatee, head request should work but it tends to hang here
15:56 < RLa> curl -X HEAD http://static.izs.me/irclogs/node.js/2012-09-01.txt
15:57 < bingomanatee> thx
15:57 < fresham> I know shrinkwrap determines a dependency graph, but how do I download all of those dependencies and package them up?
15:58 < bingomanatee> hum - thx - not getting result via curl
16:00 < RLa> hm
16:02 < RLa> bingomanatee, some curl behaviour: http://serverfault.com/questions/140149/difference-between-curl-i-and-curl-x-head
16:03 < RLa> looks like bug in curl, but you probably want to make request from node anyway
16:07 < frazercr> Does anyone know how to download an npm package and its dependencies to package them up for offline install?
16:07 < yawn> frazercr: bundledDependencies
16:08 < yawn> ?
16:09 < frazercr> I'm not sure how that works, but I'm looking it up now.
16:09 < other_guy> I'm trying to figure out a decent pattern for multiple inheritance…
16:09 < other_guy> maybe something like two-stage subclassing?
16:10 < frazercr> I just need to pack up the module and its dependencies in an archive or something.
16:11 < frazercr> yawn: bundledDependencies sounds like what I need, but I need it for an arbitrary npm module.
16:12 < frazercr> So far, the best I can come up with is run shrinkwrap on all of my node modules in my project, then use a script to download those dependencies and package them up.
16:13 < frazercr> Basically, I'm writing something that needs to be able to be installed on a machine without an internet connection.
16:15 < AAA_awright> frazercr: Usually you'd just targzip node_modules/
16:16 < frazercr> Yeah, I was thinking about doing that. Do module dependencies get installed there, though?
16:16 < astropirate> How can I have mongoskin call a function when it has connected to the database
16:16 < astropirate> Lack of API doc is terrible :(
16:16 < astropirate> mongodb-native... with its callback soup is no better
16:17 < astropirate> any alternatives?
16:17 < freewil> astropirate, have you tried mongoose
16:19 < astropirate> freewil, yes. thats where I am leaning. I was hoping to havemore options :)
16:19 < astropirate> but i guess mongoose it is
16:20 < timeturne> has anyone had to deal with two-phase commit situation with mongo?
16:22 < frazercr> AAA_awright, I tried that, but when I do the install, it still tries to go out to the web for dependencies.
16:23 < AAA_awright> frazercr: The whole point of doing a tarball is so you don't have to do a download/install
16:24 < frazercr> AAA_awright, Right. npm will install the local package, but it still goes to the internet to look for dependencies instead of getting them from the node_modules directory in the package where they're already at.
16:24 < AAA_awright> If you're shipping an application, you ship all the dependencies with the application. If your program requires setup of some sort, ship a Makefile
16:27 < frazercr> That's no problem. I just want to know if there's an easy way to do it, without having to run shrinkwrap and then use a script to parse that to all the dependency installing.
16:29 <@konobi> frazercr: npmmini?
16:29 < AAA_awright> frazercr: Maybe bundledDependencies? Installation of libraries isn't my thing
16:29 < AAA_awright> I can make a shameless plug for https://github.com/Acubed/git-node, for all your git submodule needs
16:30 < sfoster> anyone seen anything like connect middleware for front-end ajax requests? So I can adapt and wrap and manipulate request options, and then do the same with response before handing back to the caller
16:31 < frazercr> AAA_awright, Yeah, I figured it was a stretch anyway. bundledDependencies is for modules you write. I need to download an arbitray module from npm and pacakage up it and its dependencies.
16:31 < frazercr> konobi, I might be able to create a local cache and ship that.
16:31 < AAA_awright> frazercr: What are you installing?
16:31 < AAA_awright> How are you installing, rather
16:32 < AAA_awright> You're either writing your own module, in which case you have bundledDependencies, or you're writing an application, in which you can just ship the libraries out along with the tarball
16:32 < frazercr> Our own application.
16:33 < frazercr> I can tarball the modules, but when I try to install from that tarball, npm still tries to use the internet for that module's dependencies.
16:34 < AAA_awright> frazercr: You don't use npm at all
16:34 < AAA_awright> That's the whole point
16:34 < frazercr> Oh, I think I see what you're saying.
16:34 < bingomanatee> when you do request('url').pipe(dest), how do you know the piping is done?
16:34 < frazercr> npm install what I need on the machine building our installer. Then just tar up the whole node_modules directory?
16:35 < frazercr> Then for native modules, just rebuild them on the machine they go on.
16:35 < AAA_awright> bingomanatee: 'url' has a pipe function?
16:35 < bingomanatee> request(url) is a mikheal module
16:35 < PigDude> which are the most popular couchdb libraries now for nodejs?
16:35 < bingomanatee> it lets you pipe http requests.
16:35 < AAA_awright> frazercr: Yeah. You can include a Makefile with your application and do recursive make for all native modules
16:36 < frazercr> AAA_awright, Okay. That makes sense.
16:36 < PigDude> i would like to play with some of these wrappers in case i don't need to write my own :^)
16:36 < frazercr> That's probably the easiest way to do it.
16:36 < frazercr> Thanks for helping me with that!
16:36 < bingomanatee> is pipe a blocking action?
16:37 <@konobi> no
16:37 < AAA_awright> collectively the channel sighs
16:38 < AAA_awright> bingomanatee: The pipe is just an alias for something... you have to go blah.on('end', callbacl)
16:38 < Hudson> hello there
16:38 < PigDude> i see "nano" and "cradle" which both look interesting
16:38 < bingomanatee> ok
16:38 < PigDude> have you guys tried these
16:38 < AAA_awright> bingomanatee: I mean, pipe just takes input and pipes it to dest, as long as there's input to read. It'll stop when the input emits 'end' so just listen for that.
16:38 < aandy> bingomanatee: pipe's generally emit 'end' when done
16:39 < bingomanatee> thx
16:39 <@konobi> unless you see Sync in the name... it's not blocking
16:39 < AAA_awright> With some exceptions, namely require() and console.error()
16:40 < AAA_awright> And inline callbacks like [].forEach
16:40 <@konobi> that's not blocking though
16:40 < AAA_awright> blocking in what sense? It's doing I/O and blocking until the operation is done
16:41 <@konobi> i meant foreach
16:41 < AAA_awright> It's synchronous nonblocking I guess
16:42 < AAA_awright> Hence the term inline callback
16:42 <@konobi> require, yes... but only because it would be insane to do an async version
16:42 < AAA_awright> People have tried
16:42 < AAA_awright> For browsers I guess it makes sense, speed does matter
16:42 < PigDude> eh no worries  i'll figure out which i prefer more anyway
16:42 <@konobi> yup... we did it before... then ryah decided it was insane... we agreed
16:43 < aandy> AAA_awright: Sorry for the dumb question, but what do you mean by inline callback?
16:43 < AAA_awright> aandy: Any calls to the provided callback will be executed before the function returns
16:43 < AAA_awright> As a guarentee
16:44 < AAA_awright> In contrast to Node.js callbacks, where they're executed exactly once, and after the function returns
16:44 < aandy> As opposed to after?
16:44 < aandy> Ah, okay, thanks
16:45 < aandy> Hadn't seen that term before :)
16:45 < AAA_awright> I think I've seen it somewhere but I couldn't say where
16:47 < russfrank> that doesn't make [].forEach a 'synchronous' operation.. there's no implied io, so it's neither async nor sync
16:47 < AAA_awright> True
16:48 < AAA_awright> It has the same semantics as a synchronous operation, I should say
16:48 < russfrank> in that it doesn't end up executing the callback at another time?
16:49 < russfrank> if so it looks like you're connecting an anonymous function with asynchronous operations, which is still a little weird
16:49 < benvie> it doesn't yield execution to be executed on another event loop iteration
16:49 < benvie> the lines of code after it will execute after it does
16:50 < benvie> synchronous I think effectively communicates what's happening
16:52 < context> forEach is synchronous
16:55 < AAA_awright> Synchronous/asynchronous refers to I/O execution so I'd say no
16:55 < AAA_awright> It's just a function
16:55 < AAA_awright> A function with an inline callback argument
16:56 < PigDude> AAA_awright, synchronous decidedly is not exclusive to IO
16:56 < PigDude> AAA_awright, and other evaluations can certainly be performed asynchronously
16:56 < benvie> synchronicity is about the model of sychronization used for a particular thing and can apply to IO or execution
16:57 < PigDude> benvie knows his stuff
16:57 < AAA_awright> PigDude: Even if you're farming out a CPU-intensive operation, say, PBKDF2, that still involves I/O
16:57 < PigDude> AAA_awright, and that in no way helps your argument
16:57 < PigDude> AAA_awright, the IO is incidental to the operatio
16:58 < AAA_awright> I/O is a necessary condition of the operation, so yeah
16:58 < PigDude> AAA_awright, by that reasoning, var a = b is IO because bits are flipped in memory
16:58 < AAA_awright> That happens in a single execution stack so no
16:58 < benvie> javascript execution is synchronous entirely actually because the language demands run to completion semantics. We get around this by having an external event loop scheduler than provides asynchronous callbacks but this is external to js
16:59 < PigDude> no, an async version of that would use setTimeout or equivalent AAA_awright 
16:59 < AAA_awright> Likewise, I wouldn't call process.setTimeout asynchronous, nor do I say process.setInterval takes a callback argument, because it's called more than once. I say it takes an event argument.
16:59 < PigDude> okay well you're free to call things as you wish
16:59 < nkuttler> sheesh what a pita.. using feedparser, iconv-lite and iconv i can't get an iso-8859-1 feed converted to unicode...
16:59 < PigDude> but that doesn't mean you will always be understood
16:59 < AAA_awright> Words have meanings, PigDude
16:59 < benvie> so if you call something synchronous it means you're not using an external mechanism to run it asynchronously and your code will run until it's done going, top to bottom
17:00 < PigDude> and note that the mechanism can be anything
17:00 < PigDude> in the case of the browser, setTimeout
17:01 < PigDude> in the OS, real or virtual process models
17:01 < AAA_awright> benvie: That sounds like procedural code, as opposed to the various other types like dataflow
17:02 < PigDude> as a rule, throwing around more terminology only sinks you deeper into the terminology tarpit, AAA_awright 
17:02 < AAA_awright> As if more terminology is a bad thing?
17:02 < PigDude> well, when you use it wrong, or when you use it in relation to a confused understanding, then it becomes a Bad Thing
17:03 < benvie> well we were talking about forEach as an example
17:03 < PigDude> misunderstanding is easy to detect in simple language, and that's a good thing i think
17:03 < benvie> it's a use of a callback that is executed synchronously. That's the correct term for it
17:03 < PigDude> usually charlatans use terminology to cover up for holes in understanding :P
17:03 < PigDude> benvie is correct
17:04 < aandy> Async correct or..? :)
17:04 < aandy> :(
17:05 < benvie> "Thread synchronization or serialization, strictly defined, is the application of particular mechanisms to ensure that two concurrently-executing threads or processes do not execute specific portions of a program at the same time."
17:06 < benvie> so in javascript's case this is ensured by simply not allowing js to be re-entrant. It runs until it's done. A synchronous callback is a function executed without deferring to an external schedular to allow for the code to continue executing instead of blocking it
17:15 < photofroggy> anyone got any idea how I'd force socket.io to use native WebSockets?
17:16 < photofroggy> 'cause at the moment it looks like it is using xhr polling for no real reason
17:18 <@konobi> photofroggy: yeah, there's a way to force the backends used
17:19 < photofroggy> yeah but why is it going to xhr anyways?
17:19 < photofroggy> also; seems that handshakes fail all the time... no idea why
17:19 <@konobi> "transports"
17:20 < photofroggy> surely if my browser has WebSockets built in it shouldn't be falling back to anything?
17:21 <@konobi> using a proxy? or AV software?
17:22 < photofroggy> ? I'm making a WebSocket <-> socket proxy
17:22 < photofroggy> oh, and, I have pound running
17:22 < photofroggy> my web server runs on port 3000, pound maps that to 80
17:23 <@konobi> does pound support http 1.1 to the backend?
17:23 < photofroggy> I assume so?
17:23 < photofroggy> I could try disabling it, have no reason to have pound anymores
17:23 <@konobi> time to check
17:23 <@konobi> yeah, remove pound from the equation
17:24 < photofroggy> I'll have to figure that one out... set it up ages ago and haven't touched it since
17:30 < photofroggy> I can't kill pound, wtf
17:32 < jeremy_carroll> Anybody have any tips for gathering latency metrics from a production install of NodeJS? I have seen a lot of articles RE DTrace / node-profiler. I am not running an OS which has native DTrace support (Ubuntu 12.04), and I cannot run profiler on a production app.
17:33 < jeremy_carroll> We currently use StatsD to gather information about calls, but does not help when we could potentially have a blocking issue on Node. Any tips on how to gather this info? NPM modules, etc..? Coming from Java where I have jstacks / jconsole / jmx / thread dumps. Little info on these type of tools for Node.
17:39 < pyrotechnick> isaacs: why didn't you ban . from package names
17:39 < pyrotechnick> >.<
17:44 < zackiv31> anyone know of an easy way to record the number of downloads from a .static() include? maybe an npm module exists?
17:46 < jeremy_carroll> Nobody's running high performance Node not running on SmartOS / Illuminos / Etc..?
17:50 <@konobi> jeremy_carroll: ?
17:52 < photofroggy> killing pound fixed things
17:52 < photofroggy> woo
17:53 < photofroggy> now if only I didn't have a crappy internet connection...
18:13 < cnd> how do people using node tend to handle urls for socket.io connections?
18:13 < cnd> how is the domain determined?
18:13 < cnd> is it usually set in some variable and then passed in through a templating library?
18:14 < mscdex> i wish there was a cmake or vc++ project -> gyp converter
18:15 < mscdex> it'd make things so much easier for writing bindings
18:15 < cnd> nm, simple javascript is all I need, was thinking to hard about it :)
18:17 < TooTallNate> mscdex: agree'd
18:17 < mscdex> someone did write a simple SLN -> gyp converter, but it doesn't work very well
18:25 < saschagehlich> hey guys
18:26 < saschagehlich> i'm using `request` to do HEAD requests to some servers. I set options.uri but request still tells me that "options.uri is a required argument"
18:53 < bewest> howdy, I'm trying to build nodejs using openembedded for beaglebone. https://gist.github.com/3624889 there seems to be a common theme in getting do_populate_sysroot to work, seems to be a missing or unexpanded variable somewhere
18:53 < bewest> I'm not sure how to find/fix it, or alternatively how to pin my oe envrionment to create an older known build
19:09 < autif> bewest - are you using OE or yocto?
19:09 < bewest> autif: git://github.com/Angstrom-distribution/setup-scripts.git
19:10 < bewest> they have this fancy oebb.sh thingy that installs oe
19:10 < bewest> so I believe the relevant package is...
19:10 < bewest> git://github.com/openembedded/meta-oe.git
19:10 < autif> bewest: OK. Here is my recipe - it is somewhat old - http://paste.ubuntu.com/1186378/
19:11 < autif> This was done sometime ago ad you can imagine
19:12 < bewest> interesting
19:12 < bewest> so
19:12 < bewest> I've looked at a few others
19:12 < bewest> and mine looks like..
19:12 < bewest> uh
19:12 < bewest> well, the point is that I notice the .bb recipe exports several variables
19:12 < bewest> except in one spot
19:12 < bewest> I guess I should just try it
19:13 < bewest> but this does seem to point to an issue that is fixable in the .bb?
19:14 < bewest> https://github.com/openembedded/meta-oe/blob/master/meta-oe/recipes-devtools/nodejs/nodejs_0.6.20.bb
19:16 < bewest> if the temp/.../{image,sysroot} dirs are empty
19:16 < bewest> that implies that the native compile hook isn't working
19:16 < bewest> virtual-native
19:16 < autif> bewest: I would think that you need a bitbake expert, I would try the #oe or #yocto (presumably #angstrom)
19:16 < CIA-116> node: Bert Belder v0.8 * r6174ea6 / (16 files in 3 dirs): doc: don't use &apos; - http://git.io/QHUt6w
19:17 < bewest> fair enough :-(
19:18 < autif> keep in mind that many devs are on all of the channels - try #oe first, then #angstrom
19:19 < Amfy> Hey guys! :)
19:19 < plato> is fs.exists deprecated?
19:20 < plato> or perhaps brand new or something
19:20 < Amfy> Is there a way to get the shell output live? (Like the output from a ping command while it's pinging)
19:21 < eddyb> Amfy: spawn a child process and listen to it's stdout pipe. I think it's possible and easy to do
19:21 < BennyLava> its*
19:22 < Amfy> eddyb: yea, that sounds good
19:22 < eddyb> BennyLava: thanks, I never pay attention :P
19:22 < BennyLava> But the grammar police does. ;o
19:23 < Amfy> eddyb: hm, how do you mean that "listen" technically?
19:23 < plato> where can i find changelogs for v0.6.15 > v0.8.8
19:23 < Amfy> eddyb: (sorry relative new to node)
19:24 < plato> i would like to see if it will break my current code before upgrading
19:24 < context> plato: you could use nvm to have multiple versions installed
19:24 < context> and run your test suite against 0.8.8
19:24 < eddyb> Amfy: by listen I mean "listen to an event", something like stdout.on('data', function(buffer) {console.log(buffer.toString('utf8');});
19:25 < timeturn> what is the best way to get started with writing tests for modules? I was interested jn mocha and the BDD style "should" syntax
19:25 < omnipotent1> hi, I'm wondering if I can find an example of html5 websockets with node.js without using socket.io
19:25 < omnipotent1> if this question doesn't make sense, let me know, new to all of this
19:27 < omnipotent1> I'm currently under the impression that html5 websockets can't communicate with socket.io
19:28 < timeturn> omnipotent1:https://github.com/LearnBoost/websocket.io
19:29 < timeturn> socket.io is an abstraction on using all realtime transports in a prioritized way with preference given to websockets
19:30 < jammsen> hi guys, i always used node.js via log file and tail -f, but is it possible to react to mysql?
19:30 < jammsen> when system insert a chat message
19:31 < jammsen> could that be broadcasted?
19:31 < context> why not ?
19:31 < jammsen> is there an example?`
19:31 < jammsen> or a howto?
19:32 < context> insert a chat message the same way you normally do ?
19:32 < jammsen> mysql query insert
19:32 < jammsen> like always
19:33 < jammsen> or maybe i put it wrong i want only the node.js to show my messages that i insert another way, not with node.js
19:33 < plato> context: i can't get nvm to work; its readme says run the ./nvm.sh script then i should have access to nvm executable. but, after running nvm.sh, neither nvm install v0.8.8 or nvm ls works
19:36 < plato> context: got it, i needed to actually do source ./nvm.sh not just ./nvm.sh
19:46 < plato> and, nvm is still fucked up.
19:46 < plato> there must be a migration guide or changelog for 0.7 and 0.8 releases, no?
19:48 < context> plato: when i google for "nodejs changelog" i get a really nice first result
19:48 < context> and it goes all the way back to node 0.0.3
19:53 < KiNgMaR> 0.7 was just unstable 0.8, so you would be looking for a 0.6 to 0.8 migration if anything ;-)
20:08 < LuckySMack|sgs3> How does using HTML 5 SSE compare to using something like socket.io to setup pub/sub events with your server for things like live updates? SSE: http://www.html5rocks.com/en/tutorials/eventsource/basics/ 
20:09 < CIA-116> node: Ben Noordhuis master * r790d651 / (3 files in 3 dirs): http: make http.ServerResponse emit 'end' - http://git.io/N8GP1A
20:09 < dominictarr> mmalecki, we're getting hard core now https://github.com/dominictarr/scuttlebutt/issues/6#issuecomment-8272003
20:09 < etcetera> moin.
20:10 < dominictarr> and check the security branch of scuttlebutt.
20:10 < dominictarr> that is the just the first step though.
20:11 < mmalecki> dominictarr: lulz
20:12 < dominictarr> mmalecki, whats so funny?
20:12 < mmalecki> dominictarr: that's the longest github issue I've ever read :)
20:13 < dominictarr> mmalecki, except for a flamewar
20:13 < mmalecki> dominictarr: looks like a legit discussion to me :)
20:13 < dominictarr> thinking out loud, this crypto stuff is hard.
20:15 < mmalecki> dominictarr: yeah, crypto has always been hard
20:27 < mscdex> LuckySMack|sgs3: i added SSE support to my socket.io fork some time back.... but i imagine most people/UAs are more inclined to implement websockets
20:28 < mscdex> LuckySMack|sgs3: the problem is SSE is unidirectional, but that's fine if you don't care about client->server performance
20:29 < LuckySMack|sgs3> Yea, it seems to me that pure SSE is dead simple to implement. So if I can do just that, then why socket.io? Most of the things I need are basic ui updates. Not true real time like games 
20:30 < mscdex> i think the other possible disadvantage with SSE is no binary support, but that depends on your needs
20:31 < mscdex> well, unless you encode the binary data first of course
20:34 < LuckySMack|sgs3> Hrmm. That's a good thing to know
20:37 < mscdex> TooTallNate: is there a way to get more information in the console than `node-gyp -v` provides?
20:46 < Nimphious> o/
20:46 < TooTallNate> mscdex: like what?
20:47 < mscdex> TooTallNate: i'm trying to debug a problem i'm having with 'all_dependent_settings' settings not being applied to dependencies
20:49 < TooTallNate> mscdex: well that's gyp itself, so you'd have to go digging into that
20:49 < TooTallNate> but no, i don't think gyp itself offers any more verbose logging
20:56 < hackable> hi
21:08 < jocafa> aside from uglifyjs, is there a good way to dig through a script's AST?
21:08 < Spion> jocafa, buritto perhaps
21:08 < gkatsev> there's also, esprima
21:09 < Spion> jocafa, depends on what you want to do though. https://github.com/substack/node-burrito
21:09 < gkatsev> there's also falafel
21:11 < astropirate> I shall write gyro
21:11 < astropirate> the food
21:11 < astropirate> not the sensor
21:12 < Spion> yum
21:12 < plato> formidable is depositing file uploads in /tmp, which is on a different partition than the file's destionation
21:12 < plato> this means that fs.rename fails
21:12 < plato> formidable says that if defined, it will put uploads in process.env.TMP
21:13 < plato> how do I set taht?
21:16 < gkatsev> astropirate: lol
21:17 < plato> oh... ok simply process.env.TMP='./tmp1' works fine, express reports the upload as going to /tmp though. oh well
21:17 < tjholowaychuk> jocafa esprima is much better than uglify
21:18 < tjholowaychuk> plato bodyParser({ uploadDir: path }) is passed to formidable as well if TMP isnt working
21:18 < plato> Excellent I will try that tjholowaychuk 
21:22 < other_guy> Does anyone know of a way to control how an object will JSON.stringify itself?
21:22 < pyrotechnick> second param
21:22 < pyrotechnick> or third param
21:23 < gkatsev> -g mdn json.stringify
21:23 < purr> gkatsev: JSON.stringify - Mozilla Developer Network <https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/stringify>
21:23 < pyrotechnick> and yeah toJSON
21:23 < gkatsev> second param
21:23 < pyrotechnick> you can use filter in stringify or toJSON on the object
21:23 < gkatsev> you probably want toJSON the object
21:23 < other_guy> sweet, thanks guys
21:23 < pyrotechnick> we have no idea
21:24 < other_guy> no I need to use filter
21:24 < other_guy> but I didn't know that existed
21:24 < other_guy> it's perfect
21:24 < pyrotechnick> you can do anything you can do with filter in toJSON
21:24 < pyrotechnick> it's just the cardinatlity that determines which you need
21:24 < other_guy> Well I use JSON.stringify far far away from where this object is defined
21:24 < gkatsev> well, toJSON is like a toString function while the replacer is more like changing a certain symbol to something else
21:25 < pyrotechnick> multiple schemas you'd need filter
21:25 < other_guy> basically at some point down the road this object is going to get serialized, and when it is I only want it to return the string value of one of it's properties as its JSON representation
21:25 < gkatsev> it doesn't matter where the object is defined. As long as you have the reference to it and it has a toJSON function
21:26 < other_guy> Ah, so JSON.stringify will check on my object for a toJSON method
21:26 < gkatsev> other_guy: then yes, you want to set a toJSON on your object
21:26 < gkatsev> other_guy: yes
21:26 < pyrotechnick> yes
21:26 < other_guy> ah hah
21:26 < other_guy> thanks again
21:26 < gkatsev> np
21:26 < pyrotechnick> did you read the link lol?
21:26 < other_guy> Only the first few lines to see what it was
21:27 < gkatsev> lol
21:27 < other_guy> see, that info is at the very bottom :p
21:27 < other_guy> :-)
21:28 < other_guy> Oh, beautiful!
21:29 < other_guy> Basically I had something that needed to take an array of keys as an input, but I had wrapped those keys in an object so what was being sent in was an array of those wrapper objects
21:29 < other_guy> I was originally just for looping through the set and pulling the key out and assigning it to that index value in the array in place of the object
21:30 < other_guy> But with this now I can offload that to the JSON method
21:30 < other_guy> The for loop is almost certainly faster, but this is much more elegant
21:30 < jammsen> I wanna listen if in a mysql table is a new entry, and if there is one, i wanna send it to my chat or list on the website, is that even possible?
21:31 < jammsen> i dont find any howto or tutorial
21:31 < plato> tjholowaychuk: worked like a charm tkx
21:31 < deltab> jammsen: yes, but there's a lot of variation in how it can be done
21:32 < jammsen> deltab: do you got a link or something?
21:32 < deltab> not specifically
21:33 < deltab> mysql doesn't have notifications (unless perhaps you abuse locks), so you'd have to poll for new rows
21:34 < jammsen> deltab: so facebook doesnt use mysql what? :P
21:35 < deltab> it's not the *only* thing they use
21:35 < jammsen> deltab: but the server could pull every 5 seconds and distribute that result?
21:35 < deltab> yes
21:36 < jammsen> how knows node which one is new?
21:36 < jammsen> is there a function or something?
21:36 < jammsen> or all hardcoded?
21:36 < deltab> 'new' is something you have to define
21:37 < deltab> you could select rows with a timestamp greater than the last time you checked
21:38 < jammsen> deltab: but with notifications, what would be the difference?
21:39 < jammsen> i already did a chat and lifestats via using log file and tail-f spawn child instances
21:39 < deltab> it'd be more efficient
21:39 < jammsen> and more realtime right? ^^
21:39 < deltab> yes
21:39 < jammsen> so in mysql i have to gather and check for myself
21:39 < jammsen> but with logs
21:40 < jammsen> i would use my events onchange right?
21:40 < deltab> tail-f is either polling the file or listening for notifications from the filesystem
21:42 < Nimphious> Anyone feel like helping me stress test a game?
21:42 < Nimphious> \o/
21:43 < Nimphious> http://www.kongregate.com/games/Nimphious/evolved_preview?guest_access_key=09186455a41bc6737545f72666a6b91207f18e7ddc5750cb6377f040a5c0b555
21:46 < jammsen> deltab: yeah thats what i ment ^^
21:47 < Filnik> hello. Does anyone know what the MI value stends for in jsmeter? http://jsmeter.info/
21:48 < pyrotechnick> instructions?
21:48 < BennyLava> It's like PI, bit with an M
21:48 < BennyLava> True story.
21:49 < Filnik> pyrotechnick, there isn't written anywhere. Taking a look at the code seem something like BennyLava says
21:49 < Filnik> but it would be useful to know the exact meaning
21:49 < BennyLava> lolwat
21:49 < Filnik> ups, I saw PL not PI XD
21:49 < Filnik> program level
21:50 < BennyLava> lol
21:50  * Filnik thinks that he will only delete that line from the stats
21:50 < Filnik> *column
21:57 < Smashcat> Hi, anyone managed to install the websocket module on nodejs? I've installed it ok on Windows, but it fails under linux
21:58 < timeturner> usually it's the other way around :P
21:58 < BennyLava> WINDOWZE JOKES INC ANYWAY
21:58 < BennyLava> oh there
21:59  * Nimphious just uses socket.io like a big baby.
21:59 < Smashcat> timeturner: heh yeah, the install instructions state there's problems installing on windows, but I had no problems there
22:02 < Smashcat> Aha, I see someone mentioned there's a problem installing on Windows, and to use npm install websocket@1.0.3 - this seems to work on Linux. Guess the author's screwed something up
22:02 < CIA-116> node: Fedor Indutny master * r8e0c830 / (5 files in 4 dirs): tls: async session storage - http://git.io/0Ungvg
22:11 < DrLou> hello all...
22:11 < DrLou> a noob test of the waters here at node.js -- trying an early build of latest git head
22:11 < mscdex> hooray! a gypified libmariadbclient/libmysqlclient \o/
22:13 < DrLou> am fiddling with trying a few diff gccs, and am seeing cc1: error: unrecognized command line option "-fno-tree-sink"
22:13 < DrLou> how to tweak this?
22:13 < mscdex> what gcc version?
22:13 < DrLou> 4.4.4 at the moment.
22:13 < mscdex> does 0.8.8 build for you?
22:13 < DrLou> haven't yet tried...
22:14 < DrLou> perhaps should?
22:14 < mscdex> generally the latest stable release is where you want to be at
22:16 < DrLou> mscdex: Yeah, damn. You're right. 0.8.8 building quite easily.
22:16 < DrLou> was hoping to have the repo-based food chain for Node, but ...
22:19 < jocafa> (late response) i'll definitely have to look into esprima some more
22:20 < bid> hi, i upgrade to version 0.8.8 from 0.6 today restarted the server now it breaks all the time. somthing about not handling error event in event.js:66 
22:20 < bid> events.js:66
22:20 < bid>         throw arguments[1]; // Unhandled 'error' event
22:20 < bid> any idea?
22:21 < mscdex> DrLou: there is an ubuntu repo, but you can also download binary tarballs
22:21 < mscdex> DrLou: except for arm
22:21 < DrLou> yes - tks.
22:22 < DrLou> but specifically wanted to test build mileage. No ubuntu here. Solaris.
22:24 < Smashcat> Wow, don't hear much about Solaris any more. Haven't used it for about 15 years ;-)
22:24 < DrLou> It's still around - Now we call it OpenIndiana/Illumos  (!!)
22:25 < Smashcat> Ah, heh - guess it's no longer being developed by Sun?
22:25 < DrLou> but this doesn't immunize us from compiler errors when building node, apparently!
22:25 < DrLou> a bit less by anything called 'Sun', I'd have to say...
22:25 < DrLou> sadly.
22:27 < mscdex> there's also smartos ;-)
22:28 < Smashcat> Node doesn't tend to leak memory if it's left running for a month of so running a server does it?
22:28 < Smashcat> *or so
22:29 < mscdex> generally not unless there is a leak in an addon or module
22:29 < Smashcat> Cool - only have a few days to test, then it's off to an installation for 30 days, and I won't have access to it
22:34 < DrLou> hmmm…  gcc3 gets a little further, then: -D_LARGEFILE_SOURCE: Command not found
22:39 < Spion> Smashcat at the moment I have a node process that hosts a small website (but not exactly trivial, e.g. it has a running interval timer) that has been running for 50 days. Its using 30MB of RAM
22:39 < Spion> oops, smashcat is not here anymore
22:40 < mscdex> DrLou: i don't tihnk gcc3 is supported.... too ancient
22:42 < DrLou> using 4.4, I'm seeing an 'internal compiler error' in …v8/srcelements-kind.cc:44: internal compiler error: in c_expand_expr, at c-common.c:4146
22:42 < DrLou> presumably, you're all using gcc4.n versions?
22:45 < mscdex> DrLou: possibly related: https://github.com/joyent/node/issues/3659
22:48 < DrLou> mscdex: yes, tks for that. Have also built earlier versions of node from git; was hoping to trade up a bit today!
22:48 < chilts> Spion: that's cool, 30MB after 50 days
22:48 < chilts> it probably started somewhere around 10 or 15 anyway
22:48 < chilts> do you have any figures say, 1 min after it starts up?
22:49 < chilts> (as a comparison)
22:50 < Spion> around 10 is correct
22:50 < Spion> admittedly it serves < 100 hits per day.
22:50 < chilts> but that's ok, it's always good to have comparisons :)
22:51 < chilts> hard data is harder to figure out than comparisons
22:51 < chilts> (in this respect anyway)
22:51 < DrLou> yeah, v0.6.6 builds without complaint.
23:05 < AviMarcus> Is there any sort of security implementation suggestions in Node.js? e.g. a way to do object-capability model or something? I'm trying to wrap my head around an actual approach to security that can handle more than "admin" and "user" roles
23:06 < AviMarcus> e.g. for implementing a rest API where people only have access to certain things, based on their credential
23:07 < tjholowaychuk> drupal's model is pretty nice
23:07 < tjholowaychuk> you assign permissions to roles
23:07 < tjholowaychuk> and dont check for roles directly
23:07 < tjholowaychuk> user.may('do something')
23:09 < AviMarcus> tjholowaychuk, is there a way to mix that with.. can user 1000 modify this other user 1200 -- where user 1200 has e.g. "parent" marked as 1000? 
23:09 < AviMarcus> I know in general I can code this, but it would be kinda messy without a real system in place
23:09 < tjholowaychuk> if (user.may('edit other users')) {
23:10 < AviMarcus> but it's not every user. It's only certain ones with a specific property
23:10 < tjholowaychuk> well that's something you have to bake in to your logic, I don't see how you could generalize that
23:12 < AviMarcus> ah right - I'm remembering this: http://www.yiiframework.com/wiki/136/getting-to-understand-hierarchical-rbac-scheme/
23:12 < AviMarcus> gonna have to think on it. 'night
23:13 < fent> anyone familiar with socket.io internals? do you know if when broadcasting, does the data get sent to all of the connected clients, or only the ones that are listening for that specific event?
23:16 < ChrisPartridge> fent: everyone, except the person that sent it, afaik
23:26 < iggyziggy> hi
23:27 < iggyziggy> i'm having some trouble with recursive function
23:27 < zak_> what seems to be the problem?
23:28 < zak_> i remember 2 important things with recursion. you need the recursive call and a stop condition
23:28 < iggyziggy> if i set in first loop some variable to object that is also in func. param. and call the same function again with the same object, variable is not set
23:28 < zak_> can you show your code?
23:29 < iggyziggy> sure, i'll just strip it to few important lines
23:29 < iggyziggy> GameEngine.prototype.userInput = function(input, sender){
23:29 < zak_> don't paste it here
23:29 < zak_> use something like pastebin.com
23:30 < iggyziggy> it's 3 lines
23:30 < iggyziggy> you sure? :)
23:30 < zak_> yeah
23:30 < iggyziggy> ok
23:30 < astropirate> iggyziggy, more than 1 line goes to paste bin :D
23:30 < deltab> then this discussion should be there :-)
23:30 < astropirate> o_O
23:30 < zak_> don't feed the trolls
23:32 < iggyziggy> astropirate, sorry, still have to learn the rules :)
23:33 < astropirate> iggyziggy, its ok we make them up as we go along
23:33 < astropirate> :)
23:33 < astropirate> Anyone looking for a freelance JS/C++ developer? PM me :)
23:34 < zak_> iggyziggy: lets see that code!
23:37 < iggyziggy> here you go zak_
23:37 < iggyziggy> http://pastebin.com/hQsC8TBR
23:38 < astropirate> iggyziggy, the property is defined after the function
23:38 < astropirate> where is it being called from
23:38 < iggyziggy> same function
23:39 < iggyziggy> userInput calls userinput
23:39 < astropirate> iggyziggy, where is it called from the first time
23:39 < iggyziggy> and variable is set before second call, also has default value "0"
23:39 < zak_> iggy, it doesn't look like you're sending it
23:40 < zak_> this.userInput("c"+msgData[0]);
23:40 < zak_> no 2nd parameter
23:40 < iggyziggy> first time it gets called when user send that input
23:41 < iggyziggy> at Socket.<anonymous>
23:41 < iggyziggy> if that is what you mean
23:41 < zak_> see how your function takes 2 parameters
23:41 < zak_> you're only sending 1
23:41 < iggyziggy> just a sec
23:41 < zak_> when you do the recursive call
23:41 < zak_> this.userInput("c"+msgData[0], sender);
23:41 < iggyziggy> aa sh** i must be blind
23:41 < zak_> haha
23:41 < iggyziggy> :)
23:41 < zak_> dw, it happens to all of us
23:42 < iggyziggy> thnx 
23:42 < zak_> all I can say is, debugger is your friend
23:43 < iggyziggy> works fine now, thnx again :)
23:43 < jocafa> tjholowaychuk:  have you played with the harmony branch of esprima?
23:44 < tjholowaychuk> jocafa nope
23:44 < jocafa> dang
--- Log closed Wed Sep 05 00:00:22 2012
