--- Log opened Thu Nov 22 00:00:02 2012
--- Day changed Thu Nov 22 2012
00:00 < KiNgMaR> uhm
00:00 < KiNgMaR> you can actually use iptables to NAT the port
00:01 < Zelest> ah
00:01 < Zelest> is that a solid solution or more of a ugly hack?
00:02 < KiNgMaR> personally, I'd rather use nginx as a reverse proxy... but the iptables solution imposes less overhead and as far as I know does not have any drawbacks
00:03 < KiNgMaR> you could also start your listener, then drop root using process.setuid
00:05 < Zelest> ah
00:05 < Zelest> thanks, I'll play around some and see how it goes. :-)
00:27 < samholmes> How do companies track user's activity?
00:28 < othiym23> cookies, paperwork, implanted neural devices, orbital mind control lasers
00:29 < AAA_awright> Or just Google Analytics
00:29 < AAA_awright> And I think the makers of GitHub have their own realtime spying software
00:29 < AAA_awright> Err, I mean tracking software
00:30 < AAA_awright> Err, I mean usage analyzer
00:30 < othiym23> yeah, Meters
00:30 < othiym23> er Gauges
00:30 < AAA_awright> ^
00:30 < samholmes> paperwork?
00:30 < othiym23> that name is so hard to remember
00:30 < AAA_awright> samholmes: You know, print out this form, mail it to this address/cubicle, etc
00:31 < othiym23> I like that the paperwork raised questions but the orbital mind control lasers didn't
00:31 < samholmes> What's paper?
00:31 < othiym23> that's just where we're at as a civilization
00:31 < samholmes> lol
00:31 < samholmes> orbital mind control lasers I get..
00:31 < samholmes> But I didn't get this paper nonsense
00:32 < chilts> "orbital mind control lasers" <- love it
00:32 < chilts> can I have one?
00:35 < othiym23> so you've got HTTP cookkies, Flash cookies, and careful IP header bit twiddling to track stuff
00:43 < tnorris> othiym23: might want to update your comment on 1323 to @ry, not @ryah.
00:46 < mscdex> tnorris: huh?
00:47 < tnorris> mscdex: which thing are you huh-ing about?
00:47 < mscdex> anything and everything? :-)
00:48 < tnorris> lol
00:57 < jtm2> If an event is triggered with function(err, obj) how can I truly make sure that obj is not null. I do if (obj), but actually it is invalid. It has property 0 with a value null. Is there a better way to check for this?
00:58 < othiym23> tnorris: gotcha, thanks
00:58 < tnorris> np
00:58 < othiym23> everybody should be forced to use the same ID everywhere forever
01:00 < tnorris> heh, no kidding. Though Steam has stuck me with the stupid id I created when I was 14. (can't figure out how to change it)
01:02 < tnorris> piscisaureus_: fwiw, I've been keeping a doc of all the bugs i've reviewed. have ~20 left unresolved so far, and will do some more over the holiday.
01:03 < tnorris> TooTallNate: btw, thanks for all the reviews today.
01:03 < TooTallNate> tnorris: hey thanks for taking the time to go through them!
01:04 < tnorris> TooTallNate: not a problem. glad I can help out in some way.
01:07 < RLa> jtm2, obj !== null
01:08 < jrajav> RLa: That doesn't solve his issue
01:08 < RLa> oh, too bad
01:09 < RLa> ah, i read the question wrong
01:11 < jrajav> We're discussing it in ##javascript
01:14 < ericelliott> I want a test for the availability of module.exports in both node and browserify, that won't blow up if they don't exist (browser without browserify). Any ideas?
01:16 < TooTallNate> typeof module == 'undefined'
01:18 < jtm2> RLa it turned out to be me passing in null into node_redis.
01:38 < Zelest> in the https.createServer() callback, how can I see which cipher was used?
01:38 < Zelest> was/is
01:58 < othiym23> it's almost like the MongoDB driver wasn't written to be tested
02:00 < AAA_awright> Zelest: https is just a wrapper around tls+http so look at the TLS section
02:00 < Zelest> othiym23, uhm? what makes you say that?
02:01 < Zelest> AAA_awright, ah, tried to look at the docs but couldn't figure out how to get it still. :/
02:02 < AAA_awright> Zelest: cleartextStream.getCipher()
02:02 < Zelest> yeah, that much I got, but where do I get cleartextStream from? the callback only has a req and res? *confused*
02:05 < AAA_awright> Zelest: Something like server.on('secureConnection', function(cleartextStream){ ... })
02:06 < AAA_awright> Zelest: I'm reading https.js right now it's like 80 lines
02:06 < Zelest> oh
02:06 < AAA_awright> It shouldn't be hard to figure out whatever it is
02:06 < AAA_awright> It might be a parameter in req, too
02:06 < othiym23> Zelest: mocking out the bits of MongoDB that connect to the database so you can run offline unit tests requires some major Macgyvering
02:07 < Zelest> AAA_awright, tried to look in req, but no luck.. thanks. :-)
02:07 < Zelest> er, that made no sense.. lol, yeah, I'll look at the secureConnection event
02:07 < othiym23> also it's impossible to look at the source code for any length of time without noticing very obvious bugs
02:07 < AAA_awright> othiym23: You should submit bug reports
02:08 < othiym23> I should probably just fix all this shit
02:08 < AAA_awright> No, let us know what they are
02:09 < othiym23> AAA_awright: I sent Aaron a list of my requests for what I'd like to see cleaned up a few weeks back, but I'll try to set aside some time to file issues
02:09 < othiym23> a lot of the non-safe code paths do some hinky things
02:10 < AAA_awright> Zelest: What you might have to do is do httpsServer.on('secureConnection') and copy the required information over to a property on socket
02:11 < AAA_awright> Then you can read it on every HTTP request
02:11 < Zelest> :o
02:11 < mscdex> hinky
02:11  * Zelest is fairly newbiesh when it comes to JS.
02:11 < mscdex> never heard that one before
02:11 < mscdex> :-)
02:11  * othiym23 === old
02:11 < Zelest> mscdex, kinky is more frequently used? ;)
02:12 < AAA_awright> The connection and authentication is one event, every HTTP request is another event
02:12 < mscdex> Zelest: i'm not sure non-safe code paths do kinky things
02:12 < Zelest> AAA_awright, ah
02:14 < Zelest> a bit confused on the "copy it over to a property on socket" part though.. but I'll do some rtfm, thanks
02:17 < AAA_awright> Zelest: The socket object should be a property in request
02:19 < AAA_awright> Zelest: Actually, you might be able to do request.socket.getCipher()
02:19 < AAA_awright> It's a function so you won't see it in the inspector
02:19 < AAA_awright> But it's a function of the socket, which should be exposed somewhere in the request object
02:20 < xiecc> anyone interested in game programming?
02:20 < AAA_awright> Actually I'm just going to try this myself
02:20 < AAA_awright> xiecc: What kind?
02:20 < AAA_awright> I haven't done any in years, but it's a passing interest
02:20 < xiecc> any kind, we've developed a game server framework in node.js
02:20 < xiecc> as well as a MMORPG demo
02:20 < Zelest> AAA_awright, aah, that seems to work indeed.
02:21 < xiecc> http://pomelo.netease.com 
02:21 < AAA_awright> Zelest: Cool
02:21 < Zelest> thanks a ton!
02:21 < AAA_awright> Zelest: Also, why do you need to know this?
02:21 < xiecc> https://github.com/NetEase/pomelo
02:21 < Zelest> I want to add it to the request log
02:21 < AAA_awright> IDon't use it to make any security-related decisions
02:22 < AAA_awright> Zelest: In that case, just attach a function to server.on('secureConnection')
02:22 < Zelest> I thought of writing a patch to whomever wrote the express.logger() function, since it seems to be missing it.
02:22 < AAA_awright> Maybe print "New AES256-SHA connection" but I can't imagine any reason why it's important to know
02:23 < xiecc> We also have a full demo,  visit http://pomelo.netease.com/lordofpomelo/
02:23 < Zelest> It's more for statistical usage I guess.. it's added in the default ssl-log output in Apache for example.
02:26 < Zelest> AAA_awright, http://www.senchalabs.org/connect/middleware-logger.html .. seems like I just can define a token there. :-D
02:28 < AAA_awright> Zelest: Unless it's something you want to know I wouldn't bother, you can have too much information to analyze
02:55 < jaha> any idea why I cant seem to render an iframe inside a handlebars template?
02:56 < jaha> just gives me the code, the rest of the code on the same page gets rendered properly
03:02 <@konobi> ryanrolds_w: how so?
03:20 < jtm2> How bad is it to open a new client with redis for each connection on socket.io?
03:25 < mdedetrich> anyone here use mongoskin by any chance
03:30 < eighty>  hi.. i have an exisiting angular.js/node.js prototype (http://ec2-54-251-77-171.ap-southeast-1.compute.amazonaws.com:8001/app/#/     ,l/p:hanselke@openbusiness.com.sg/demo)  that i would like to build in SSO and to integrate it with an opensource BPM system ( http://ec2-54-251-77-171.ap-southeast-1.compute.amazonaws.com:8080/qa/    ,l/p:admin/bpm). That link shows a simple jsp/servlet that pulls the right data i need from the BPM sy
03:30 < eighty> i'm looking for a good developer who is familiar with nodejs, preferbly with some managed stack framework like brunch or flatiron for a few days work to build it. its essentially just a UI layer + SSO on top of a BPM system.
03:34 <@konobi> eighty: gun.io ?
03:37 < eighty> was hoping to be able to skip the hassle :P
04:02 < culturelabs> why cant i install bcrypt
04:03 < Raynos> does anyone have a node.js run command when files change
04:03 < timeturner> run command?
04:04 < vicapow> Raynos: nodemon
04:04 < Raynos> thats only for nod eprograms
04:04 < Raynos> I want `watch . "make build"`
04:04 < vicapow> Raynos: just npm install -g nodemon and then nodemon yourscript.js
04:05 < vicapow> Raynos: i'd say the easier thing would be to change your build cycle then
04:05 < timeturner> build upon request
04:05 < timeturner> easy
04:05 < Raynos> build upon request is silly
04:05 < timeturner> no need to watch
04:05 < timeturner> why is that silly
04:05 < Raynos> its too slow
04:05 < timeturner> that's what a makefile is for
04:05 < culturelabs> 144 error `sh "-c" "node-gyp rebuild"` failed with 1
04:05 < culturelabs> 145 error Failed at the bcrypt@0.7.3 install script.
04:05 < timeturner> it checks if anythign has changed
04:05 < timeturner> if not then it doesn't make
04:05 < Raynos> well im not using the make file properly
04:06 < timeturner> it's a 0.005 millisecond check
04:06 < Raynos> im using it to browserify code
04:06 < eighty> use nodemon
04:06 < Raynos> nodemon doesnt solve the issue
04:06 < eighty> it automatically rebuilds your code and even refreshes your browser
04:06 < vicapow> Raynos: can you talk a bit more why you need to run make each time?
04:06 < eighty> mmm what about brunch?
04:06 < Raynos> I have a javascript file
04:07 < Raynos> I save it.
04:07 < eighty> could try out yeoman too, if you are only doing client side stuff
04:07 < vicapow> Raynos: yeah, use nodemon for that
04:07 < Raynos> file watcher compiles it into JS. file watcher reloads browser with n ms offset
04:07 < Raynos> browser reloads with new code
04:07 < Raynos> oh nodemon has as --exec
04:07 < Raynos> interesting
04:09 < vicapow> Raynos: but you shouldn't need to manually recompile your client side js if you're using browserify 
04:10 < Raynos> browserify --watch isn't good enough
04:10 < vicapow> Raynos: in what sense?
04:11 < Raynos> vicapow: it has bugs and https://github.com/Raynos/browserify-server/blob/master/index.js#L17 I use custom things for NODE_ENV and html / svg files
05:00 < sinclair> any typescripts around?
05:00 < TehShrike> Somewhere on the internet I'm sure
05:01 < TehShrike> But I am neither a type script, or a typescripter, at least not yet
05:01 < sinclair> TehShrike: i am bothered by a single issue with TypeScript
05:02 < TehShrike> I'm interested to hear it
05:02 < TehShrike> I keep feeling like I should start working it in somewhere
05:02 < TehShrike> I do love type checking
05:02 < sinclair> TehShrike: the issue is, i want to concatenate all my ts files, and output either a commonjs or amd module 
05:03 < sinclair> TehShrike: TS will output a commonjs or amd module if i have a single TS file compiled, but if i want to split out my files, it fails to do that, 
05:03 < sinclair> TehShrike: it will however, output valid JS if i compile all my TS files, just without the exports
05:04 < sinclair> TehShrike: i have looked at resolving this myself by tweaking the compiler, but i shouldn't need to do that
05:04  * sinclair grumbles
05:04 < TehShrike> TS has specific stuff that pays attention to files-as-modules?
05:04 < sinclair> TehShrike: apparently it does
05:04 < TehShrike> Huh, I was unaware of that
05:05 < sinclair> TehShrike: on one side, it works well (for node modules at least)
05:05 < TehShrike> What does it do for modules?
05:05 < TehShrike> It pays attention to what you're assigning to exports/module.exports?
05:05 < sinclair> TehShrike: on the other hand, if you have a large module, and want to split it out to many files, you can't
05:05 < sinclair> TehShrike: yes
05:05 < sinclair> TehShrike: by default, TS outputs commonjs
05:06 < TehShrike> Huh!
05:06 < sinclair> but you can flick a compiler option and have it output AMD style if you wish
05:06  * sinclair notes, you can split your code into many files, but can't compiles with either commonjs or amd
05:07 < sinclair> you just get a large js file, 
05:07 < vicapow> does nom have an api for getting a list of modules?
05:07 < TehShrike> sinclair: for what reason do you do the compile-into-a-single-file business?
05:07 < chakrit> vicapow: what kind of list? installed modules? npm ls
05:07 < TehShrike> I know it's a thing people do, but what are you getting out of it in your case?
05:08 < vicapow> chakrit: ALL modules
05:08 < vicapow> chakrit: not just the ones installed locally
05:08 < TehShrike> vicapow: all the ones on the internet?
05:08 < TehShrike> But some of them are secret!
05:08 < sinclair> TehShrike: ummm, i wrote a small canvas library the other day, that was split out over multiple files, i used the --out flag to compile to a single file so i can include it with <script src='mycompiledfile.js'></sciprt>
05:08 < vicapow> TehShrike: yeah!
05:08 < TehShrike> vicapow: well, the non-secret ones are here https://npmjs.org/
05:08 < vicapow> TehShrike: all the public ones
05:08 < vicapow> TehShrike: right. but is there an api?
05:08 < TehShrike> vicapow: you can search from the command-line
05:09 < TehShrike> There is also an API, yes
05:09 < sinclair> TehShrike: in that instance, it made sense, 
05:09 < chakrit> vicapow: check the source https://github.com/isaacs/npmjs.org
05:09 < TehShrike> sinclair: ah, so you relied on some other modules of yours, but wanted to release the library as a single file
05:09 < TehShrike> That makes sense
05:09 < TehShrike> vicapow: https://npmjs.org/doc/
05:10 < sinclair> TehShrike: kinda, i guess, but i would like to do the same for node
05:10 < TehShrike> Why?
05:10 < TehShrike> I love npm's dependency-grabbing abilities
05:10 < sinclair> TehShrike: its nicer (at least, i feel its nicer)
05:10 < TehShrike> I can't imagine combining multiple things into a single file
05:10 < TehShrike> That would be so dirty
05:10 < sinclair> TehShrike: its just compiled output anyway
05:11 < TehShrike> In my mind, it only adds problems
05:11 < TehShrike> I want to deploy with npm install
05:11 < sinclair> TehShrike: i don't know, i kinda prefer a single compiled output, its less stress
05:11 < chakrit> vicapow: i think you can replicate npmjs.org locally and run some couchdb queries to get a full list
05:11 < TehShrike> And all I need to do to make that work is manage my package.json
05:11 < chakrit> vicapow: search for "synchronize from the public" on that github page
05:11 < vicapow> TehShrike: chakrit: still no way to get a full list from what I can see
05:12 < vicapow> via an api
05:12 < chakrit> vicapow: yeah seems there's no api. but maybe you can try running a couchdb instance and set it to replicate from npmjs.org
05:13 < chakrit> that seems possible
05:13 < vicapow> chakrit: but also sounds like a pain :(
05:13 < vicapow> but i guess it'll do
05:13 < chakrit> vicapow: well, atleast it's possible :)
05:13 < vicapow> chakrit: TehShrike: thanks for the help
05:13 < chakrit> np
05:14 < sinclair> TehShrike: i suppose i need to change the way i structure my progs
05:15 < TehShrike> vicapow: the API is the couchdb API
05:15 < sinclair> TehShrike: i appreciate all the fashion is using node dependencies, but damn, it makes some things way more complex than they need to be
05:15 < vicapow> TehShrike: that's not an api
05:15 < chakrit> vicapow: maybe you can do something with this? https://github.com/isaacs/npmjs.org/blob/master/registry/views.js#L10
05:15 < TehShrike> sinclair: now I'm really interested to hear your thoughts on that - I come from writing big C++ Win32 apps, and for me, dependency management has never been easier
05:17 < chakrit> vicapow: also, default couch port works: http://npmjs.org:5984/ but probably needs to authenticate
05:17 < vicapow> chakrit: cool. i'll give that a look
05:18 < vicapow> chakrit: wasn't planning on working on it right atm but i was wondering for an idea i had
05:21 < sinclair> TehShrike: which part do you want my opinions on?
05:22 < TehShrike> Well, I guess I'd be interested to hear how you handle sharing modules between projects now, and what advantages you're getting over using package.json to handle dependencies
05:22 < sinclair> TehShrike: oh, well, i still would use package.json
05:24 < TehShrike> Do you store your modules in your own repository?  Git or something?
05:24 < TehShrike> Or would you still keep everything in npm, but then compile all the dependencies together before deployment?
05:24 < sinclair> TehShrike: its just that, i want to split out my files for a module (and compile them into a single file) than splitting them out and requiring them.
05:24 < TehShrike> So it's more about having functions locally so you don't have to use require?
05:24 < sinclair> TehShrike: im not making use of npm or github at this stage (i have nothing of value to put up there)
05:25 < TehShrike> See, that sounds really messy to me - I don't want more variables floating around in my namespace!
05:25 < sinclair> TehShrike: yeah kinda
05:25 < TehShrike> The less variables per-file, the better
05:25 < sinclair> TehShrike: well, i like namespacing, 
05:25 < TehShrike> Do you use objects-as-namespaces?
05:25 < sinclair> TehShrike: yes, more or less
05:25 < TehShrike> I've done that for some in-browser stuff where I thought it made more sense than closures (though in retrospect I'm not sure)
05:25 < sinclair> ill give you an example
05:26 < sinclair> i am writing something to manage multiple file repositories, i have the interfaces, IFile, IFolder, and IDrive
05:27 < sinclair> i have a top level namespace called 'drive' and sub namespaces drive.local, drive.skydrive drive.googledrive etc
05:27 < sinclair> so, i would..... var drive = require('drive');
05:27 < TehShrike> Maybe I've just drunk enough of the koolaid, but I'm really starting to love the model of exporting a single function from my modules
05:27 < sinclair> var drive = drive.local.Drive();
05:28 < TehShrike> And knowing that that is the only thing that is entering my namespace
05:28 < sinclair> var drive = drive.skydrive.Drive();
05:28 < sinclair> etc
05:28 < sinclair> TehShrike: yeah, im sure it has benefits
05:28 < Max____> hello
05:28 < TehShrike> sinclair: so pre-JS, I've mostly used C++ and PHP
05:29 < sinclair> TehShrike: but no benefits as far as i can see for an ease of development perspective
05:29 < Max____> does anyone know what to do when ipm install just hangs?
05:29 < sinclair> TehShrike: me also
05:29 < TehShrike> In C++, you pull in a single large file, if you can get that other file compiled, and then you use the header to use the class, yadda yadda
05:29 < chakrit> i'm using index.js for the namespaces. best of both worlds. i.e. require('./drive').skydrive or require('./drive/skydrive') both works
05:29 < sinclair> TehShrike: yeah. that works
05:29 < TehShrike> In PHP, you go "make everything about this file happen right HERE" and then boom, it does all its messy business right where you have the include
05:30 < sinclair> TehShrike: yup
05:30 < sinclair> i am very used to this approach also
05:30 < TehShrike> With require, I feel like I get the ease of PHP including, but with the encapsulation of C++
05:30 < Max____> hello
05:30 < Max____> i've just installed node.js on windows & it seems that npm is not working 
05:30 < TehShrike> Max____: you mean npm?
05:30 < Max____> it just hangs
05:30 < Max____> with . . . 
05:30 < TehShrike> Doing what operation?
05:31 < sinclair> TehShrike: see, as far as i can tell, encapsulation (through exports) should work fine 
05:31 < Max____> when I try npm install express -g
05:31 < TehShrike> Max____: don't tags come before the module name?
05:31  * TehShrike isn't sure
05:31 < sinclair> TehShrike: but doesn't when compiling multiple source files :(
05:31 < TehShrike> I still don't understand why you'd want to do that though :-x I don't see an advantage
05:31 < Max____> or when i do sudo npm install jitsu -g
05:32 < Max____> anything npm, & it does not work
05:32 < sinclair> TehShrike: are you familiar with .net assemblies ?
05:32 < TehShrike> Max____: some issue with your global directory?  What if you don't use -g?
05:32 < TehShrike> sinclair: nah, we're still using MFC :-x
05:32 < sinclair> haha, all good tho
05:32 < sinclair> TehShrike: an assembly in .net consists or public and internal classes
05:33 < sinclair> a public class equates to a exports in node
05:33 < Max____> same thing
05:33 < Max____> just hangs
05:33 < Max____> it runs .js fine
05:33 < sinclair> a internal class is just that, only accessible to the assembly, 
05:33 < Max____> just can't install anything
05:33 < TehShrike> sinclair: it's compiled I assume?
05:33 < TehShrike> Binary?
05:33 < sinclair> TehShrike: yeah
05:33 < Max____> no
05:33 < sinclair> TehShrike: IL
05:33 < Max____> it's not compiled
05:34 < Max____> i just downloaded msi
05:34 < Max____> pre-compiled for windoes
05:34 < Max____> windows
05:34 < TehShrike> Max____: sorry, talking to sinclair.  Network issues, maybe?  Can another computer on the same network install modules with npm?
05:34 < Max____> haven't tried that yet
05:34 < Max____> port issue maybe?
05:35  * TehShrike shrugs
05:35 < sinclair> TehShrike: applications that consume an assembly only have access to its public classes, i wish TS would let me compile assemblies of JS 
05:35 < TehShrike> see, that's how I see modules
05:35 < TehShrike> I do all my dirty business in my own scope, and then I give you one function/constructor/object that you get to use
05:35  * sinclair notes, TS can compile assemblies of JS, but all the classes need to reside in a single file
05:35 < SomeoneWeird> Max____, very possible, are you behind a proxy etc.?
05:36 < TehShrike> I love that about modules.  I get all the benefits of that sort of separation between private/public, but with an ease of creation that I haven't had in any other language before
05:37 < sinclair> TehShrike: yeah, it is different
05:37 < TehShrike> And npm handles my dependencies
05:37 < TehShrike> It's different, but I'm digging it so far
05:38 < sinclair> TehShrike: still that's not the desired behavior in all situations, sadly, at this stage, the TS compiler forces you into doing things one way. but its frustrating when you can see how possible (and simple) it would be for the compiler to do it other ways
05:38 < sinclair> TehShrike: i could continue to hack the compiler, or i could write to MS and ask them politely to fix it up
05:39 < TehShrike> Sure, it might not have been hard to allow for that sort of thing, but would it have added much?  :-x
05:39 < sinclair> TehShrike: well, yeah
05:39 < TehShrike> So I know it sounds dumb to say "why aren't you doing what everyone else is doing" but... :-x it seems reasonable to me so far...
05:39 < sinclair> TehShrike: code is often grouped into namespaces, and classes within those namespaces can grow into the dozens 
05:40 < sinclair> TehShrike: on one hand, TS promotes class driven development, and on the other, it doesn't allow you to split classes into separate files as you normally would
05:41 < sinclair> TehShrike: so, if you are developing a module/namespace, you need to write all your code for that namespace in 1 file, there is no options available to split out module code into multiple files and compile it with the commonjs or amd convention. 
05:42 < TehShrike> So I haven't been using TS's classes, so I can't really talk much about developing with them
05:42 < sinclair> TehShrike: they are pretty good, but there are a few gotchas when you dig deep into the language/compiler
05:42 < TehShrike> Do you not put your usable-many-places classes in modules?
05:43 < sinclair> TehShrike: yeah, they go in modules
05:44 < sinclair> TehShrike: but i tend to find myself sub node_module-ing everything
05:44 < sinclair> which is a little frustrating, (and a quirk with the TS compiler and its import mod = module("mod") 
05:45 < TehShrike> What do you mean by sub node_module-ing?
05:45 < TehShrike> So far I've been able to maintain breaking stuff out and putting it into npm right away, I haven't ever committed a module along with its node_modules directory
05:45 < sinclair> for example .... /node_modules/namespace/nodemodules/namespace.subnamespace
05:46 < sinclair> then i have the top level namespace load up its sub namespaces and export them out
05:47 < sinclair> TehShrike: you should give TS a try, its worth the effort as the language makes coding JS very easy
05:47 < TehShrike> That sounds weird - do you have any of this code public?  I'd be interested to see your dependency tree in practice
05:47 < TehShrike> I really should give it a try
05:47 < TehShrike> I love type checking and I love JS
05:47 < sinclair> TehShrike: nothing public at this stage, ive just been experimenting with TS/node for the past few weeks
05:48 < sinclair> TehShrike: type checking is just one of the advantages of TS
05:48 < TehShrike> It's the biggest in my mind, what else has appealed to you?
05:48 < sinclair> TehShrike: reflection 
05:49 < sinclair> TehShrike: for example, you can define a class, its methods, and signatures, compile it with node, and reflect out the class by scanning over the Abstract syntax tree
05:49 < TehShrike> Huh.
05:49 < sinclair> TehShrike: where this is useful is for generating contract meta data
05:49 < sinclair> TehShrike: so, as an example....
05:50 < sinclair> class WebService extends Service { /* methods here */ }
05:50 < sinclair> you can then, scan the AST for all types of type "Service"
05:50 < sinclair> then, scan over its methods
05:51 < TehShrike> Interesting, I was unaware of that
05:51 < sinclair> then produce WSDL (or other contract) for clients to consume with their WSDL tools etc
05:52 < sinclair> TehShrike: this is hugely useful, as the Web Service Soap stuff for node requires you to manually code out WSDL documents, meaning, if you change a method of a service, you need to manually change the wsdl document. reflection essentially automates everything
05:52 < TehShrike> That is cool.
05:53 < sinclair> TehShrike: tho, this is only one example of using reflection, there are many other things you can do with it :)
05:53 < sinclair> TehShrike: ive got some code around here somewhere, let me see if i can find it
05:56 < sinclair> TehShrike: http://pastebin.com/9TcVx6ZS
05:57 < sinclair> TehShrike: as yuo can see, its fairly trivial to iterate over the AST and fish out the information you need
05:57 < TehShrike> lol, it's just that one function at the end?
05:58 < sinclair> yeah :)
05:59 < TehShrike> Well, I've worked with some pretty thick class hierarchies, but I feel like my life has gotten easier since I started thinking of modules more functionally
05:59 < TehShrike> ionno
05:59 < sinclair> TehShrike: yeah, i tend to look at module exports as public classes
05:59 < TehShrike> I'm still learning in the world of writing large apps with JS
06:00 < TehShrike> I should write up a post or two some time about the framework I've evolved for my current project at work
06:00 < TehShrike> So that other JS people can look at it and go "8-| wat"
06:00 < sinclair> TehShrike: again, i still really really like .net and the .net assembly approach, i think that would be compatible with node if only the TS compiler would let me :)
06:01 < sinclair> TehShrike: well, i subscribe to "who cares how it works, so long as it works" idea :)
06:01 < TehShrike> I started with a naive MVC idea and now I have this: http://lxw.isoftdata.com/coordinator.js http://lxw.isoftdata.com/extension_prototype.js
06:02 < sinclair> yup, nice
06:02 < sinclair> TehShrike: wouldn't it be nice to have something like....
06:02 < sinclair> var process = new Process('mycode.ts'); ?
06:02 < sinclair> process.start();
06:02 < sinclair> process.onexit(function() { process.start(); }
06:02 < TehShrike> hmm, I dunno
06:02 < sinclair> or something like that
06:03 < TehShrike> So in the case of that code, there's only ever one coordinator
06:03 < TehShrike> I would very much like to be able to load in JS dynamically
06:03 < sinclair> TehShrike: can still do that :)
06:03 < TehShrike> But I haven't tested requirejs yet on the jankety IE6-era browsers that I have to support
06:04 < sinclair> TehShrike: have you used vm for anything?
06:04 < TehShrike> vm?
06:04 < sinclair> node's vm module is pretty good at dynamically loading up code
06:05 < TehShrike> oh no, I haven't
06:05 < TehShrike> In that case, I need to do it in the browser
06:05 < sinclair> and even lets you define what is accessible to the dynamic loaded code
06:05 < TehShrike> Specifically, in a very stupid browser
06:06  * sinclair wonders if you mean IE
06:06 < TehShrike> Not just IE
06:07 < TehShrike> But the version of IE that shipped around IE6 on Windows CE
06:07 < sinclair> TehShrike: the only thing ive coded in weeks http://sinclair.azurewebsites.net/lasercat/
06:08  * sinclair was bored...
06:08 < TehShrike> lol
06:08 < gildean> sinclair: doesn't work
06:09 < gildean> gives me a permission problem
06:10 < sinclair> someone visited the top level 
06:10 < sinclair> (and started a mvc application that routes traffic)
06:10 < gildean> that was prolly me
06:10 < sinclair> let me fix it
06:11 < sinclair> fixed
06:12 < sinclair> TehShrike: as an example i coded up the canvas stuff with TS
06:12 < sinclair> http://sinclair.azurewebsites.net/lasercat/panda/panda.js
06:14 < TehShrike> So many var pandas!
06:15 < sinclair> TehShrike: yeah, i noticed that too, i think its a bug with the -out compiler option, each class is split into separate files in this instance, 
06:15  * sinclair waits patiently for updated releases
06:17 < Cibco> thanksgiving == Happy
06:17 < TehShrike> It doesn't === happy, of course
06:17 < Cibco> not for da bird
06:17 < TehShrike> But thanksgiving casts to a "happy" value
06:18 < Cibco> sheesh - got techincal REAL quick in here ! :)
06:18 < TehShrike> lol
06:18 < TehShrike> Oh come on, what chat room did you think you were in
06:18 < Cibco> That's real cool TehShrike - made me smile. funny. 
06:18 < TehShrike> :-)
06:18 < Cibco> oh, I knowz'z's - good things happen here and good people too are here usually. 
06:19 < Cibco> I've not been here for oh my - 9 months at least. 
06:20 < TehShrike> Yeah, this chat room has averaged better than a lot of others I've been in
06:20 < Cibco> been biddy with some gubbadamint contractin' er, biddy with some buggydamint stuffs.  We all like that async stuff up in the hood up at the gubbadamint.
06:20 < Cibco> TehShrike- oh it is WAY above par.
06:20 < SomeoneWeird> >> thanksgiving === happy
06:20 < purr> SomeoneWeird: ReferenceError: thanksgiving is not defined
06:20 < SomeoneWeird> dats right
06:20 < SomeoneWeird> thanksgiving no exist
06:20 < Cibco> Purr- that's because you haven't updated the Benjidamin Franklin library, it's up to 2.81 now. 
06:21 < TehShrike> I'm hoping that the friendliness scales
06:21 < Cibco> You have to recurse on the Turkey call first.
06:21 < TehShrike> The friendliness of the regulars/admins in the chat room is not in question
06:22 < Cibco> TehShrike- I scale up and out :)  I kind of just stopped by to say hi, happy thanksgiving to those in the US - and no doubt - hats off to anyone utilizing node.js
06:22 < TehShrike> <3
06:22 < aandy> anyone have some possibilities in regards to running a very little process web app. it'll basically just take some requests and store those (using it as a remote "logger"), but even a micro instance at amazon will cost me $10/month and that seems a bit pricy to me. i have no need for any particular RAM, or even space.
06:22 < TehShrike> MY HEART IS INFINITELY SCALABLE
06:22 < TehShrike> ALSO IT USES EVENTED I/O BUT THAT'S NOT IMPORTANT
06:22 < aandy> i see heroku has a plan for 1 web dyno for free, or is that in a similar trial manner like AWS?
06:23 < Cibco> I could enter into dialog that suggests I/O must be event oriented.
06:23 < aandy> TehShrike: wow, i wish my heart was scalable :(
06:23 < Cibco> but - we shall not turn over the stone of asynchronousnessosity.
06:23 < TehShrike> That word had way more vowels in it than I believe was necessary
06:24 < Cibco> aandy- that's cause you went with Sun Microsystems  ?  well- scalable up or out ? if you can't scale up ? it's Microsoft, if you can't scale out it's Sun - or maybe I got those two backwards.
06:24 < TehShrike> aandy: well, you know, at least as far as the box that is running my process can take it.
06:24 < aandy> preferably up, but with the internet and so many pics i guess out is more realistic
06:24 < Cibco> It's damned neat to see some hard work, creativity on node.js move forward such that it's sought after as a viable solution in the corporate world.
06:25 < aandy> TehShrike: ah, you should make sure to have a replication factor greater than one then
06:25 < aandy> i mean, one day the power is out and you lose your heart. bad times assured
06:25 < Cibco> I HAVE learned though, that JUST because people make money doesn't mean it's any more important.  NJS was a fine offering.
06:25 < aandy> luckily i have a glazier backup
06:25 < TehShrike> I just need to figure out how to serialize my soul so I can get it into S3 somehow...
06:25 < TehShrike> TehShrike.toString()
06:25 < aandy> ah, good idea
06:26 < Cibco> aandy - you JUST gave me an idea- what about capacitors on the die - to keep the CPU alive in case of power outage.
06:26 < Cibco> in other words, forget UPS for the entire system.
06:26 < Cibco> Just keep the 'braaaaayaaain' alive.
06:26 < Cibco> Intel couldn't pay me enough !
06:26 < aandy> TehShrike.toString = function() { return { likes: ["node.js",], hates: [] } }. fill as necessary
06:26 < Cibco> heh- I have a chip with AMD AND Intel on it - I crazy glued it to a hard drive magnet I fractured.  It keeps my super market coupons to the fridge now.
06:27 < Cibco> it's that comma before the ] that gits ya ",]
06:27 < aandy> is that your idea of a bisexual computer?
06:27 < Cibco> we;; "
06:27 < TehShrike> aandy: "the rest of the implementation is left as an exercise to the user!"
06:27 < aandy> Cibco: nah, that was intentional, as i take it he'll want to expand
06:27 < Cibco> ",],    <-  rough.
06:27 < aandy> TehShrike: precisely
06:28 < aandy> implementation is the hard part
06:28 < TehShrike> The first 90% is always the easiest...
06:28 < Cibco> "Try help"  "you see ? the more complex systems are the more help is required"   "Help refers to games and simulations"   (Wargames).
06:28 < aandy> everyone can abstract their love, but to implement it... wise words at the break of 1st cup of coffee
06:28 < Cibco> I wonder if Crockford uses ndeo
06:28 < Cibco> er, node solutions.
06:29 < TehShrike> It's the second 90% that kills you
06:29 < Cibco> Anyone else do gubbadamint contracting ? 
06:30 < TehShrike> No, thankfully >_<
06:30 < Cibco> well nows - I didn't say what gubbadamint 
06:30 < Cibco> but - heh - that's all good.
06:30 < Cibco> you see Iran today ? Anonymous ? on Gaza ? 
06:30 < TehShrike> I didn't make any assumptions
06:30 < Cibco> that was a strange baster op 
06:31 < TehShrike> I haven't been contracted by any governments yet
06:31 < TehShrike> And if I play my cards right, I likely never will :-x
06:31 < Cibco> hahaha - well day be comin' lookin' for dya if'n you show talent at an early age.
06:31 < TehShrike> Unless it's some government that I start on some island somewhere
06:31 < TehShrike> Which would be cool
06:31 < aandy> i hear iceland is up for grabs
06:32 < TehShrike> lol
06:33 < Cibco> Anyone do Cloud Connect on Oct. 10th ? 
06:34 < Cibco> I REALLY REALLY like what I see of Joyent 
06:34 < Cibco> TehShrike- you should join us in Tallosa -  http://www.kingdomoftalossa.net/index.cgi?page=ImmigrationForm
06:35 < TehShrike> ...can I work remotely?
06:35 < TehShrike> Welp, time to listen to NodeUp while walking to the liquor store.  Be back in a while
06:35 < Cibco> TehShyike- sure.  I've secured that for the last 7 years I've never had to leave my home - well- short of by CHOICE... I make sure all MY work is remoteable
06:36 < Cibco> I can assist !
06:41 < aandy> anyone used heroku to run node apps?
07:08 < sinclair> aandy: have you used azure to run node?
07:09 < aandy> not yet, no
07:10 < Cibco> how would that work ? 
07:26 < tohoe> hi all
07:28 < tohoe> who moderates the mailing list ?
07:30 < aandy> Cibco: http://www.windowsazure.com/en-us/develop/nodejs/
07:30 < aandy> like that :)
07:38 < xaka> what if my extension depends on library XXX, how do i tell node-gyp use it at link time?
07:44 < sinclair> hey guys, when coding node, do you guys use stacks at all ?
07:44 < sinclair> for example
07:44 < sinclair> i want a method call get_directories('/somepath', function(directories) {});
07:45 < sinclair> however, in order to 1) fetch the directories and 2) check the directory is actually a directory, i have 2 nested callbacks
07:46 < sinclair> because the callback expects an array of directories, it makes it difficult to build up the directories array when im nesting callbacks
07:46 < sinclair> to get around this, i added a stack, and pushed items on the stack, and popped them off when the callback has completed (i called fs.stat to determine it was a directory)
07:47 < sinclair> this was, when the stack was empty, i knew it was ok to return the directories array
07:47 < sinclair> is this common?
07:49 < SomeoneWeird> sinclair, you can't use async?
07:49 < aandy> not as a real answer to your question, but you could also use eventemitters. so your get_directories would go through the root and emit whenever an item is a directory
07:49 < sinclair> SomeoneWeird: oh, maybe
07:49 < aandy> well, or a callback, but that doesn't have to be nested, is what i mean
07:50 < sinclair> SomeoneWeird: adding the stack was fairly trivial
07:51 < AAA_awright> I try and avoid async since it hides all the logic for no reason
08:03 < eddyb> wow, ideone.com has node.js support now o_O
08:03 < jaket> wat son
08:03 < jaket> wat
08:04 < Pitel_IPEX> http://pastebin.com/d5c4BXYM any idea why this mysql queries fails?
08:05 < Pitel_IPEX> SELECT1 is ok, nested SELECT2 in callback fails
08:05 < aandy> you might be victim of this
08:05 < aandy> "this"
08:05 < aandy> try => instead of ->
08:07 < Pitel_IPEX> aandy: on SELECT1, I got `Cannot call method 'in' of undefined`
08:07 < Pitel_IPEX> on SELECT2, no change
08:08 < Pitel_IPEX> hmm, but I see what might be wrong with 'this'
08:11 < Pitel_IPEX> aandy: thanks! => (almost) eveywhere, and it's fixed :)
08:22 < gabe_hollombe> Hey all, what're the common ways folks are using commonjs style requires on the server, but then packaging them for browser consumption  Stitch looks promising (https://github.com/sstephenson/stitch) but thought I"d ask the community for others
08:23 < gabe_hollombe> +?
08:25 < nicholasf> haro
08:25 < nicholasf> what are peeps using to handle ssl certs (https traffic) to front their web apps?
08:26 < nicholasf> I want to use something on centos - stud didn't play nicely compiling there
08:26 < aandy> Pitel_IPEX: glad it worked out for you, but trust me, it's well worth it to read up on lexiscope and 'this', or you'll get a lot of grief in javascript :)
08:27 < aandy> this does not mean the same as in most other languages (self, this)
08:30 < TehShrike> Well that was an interesting evening
08:36 < [AD]Turbo> hi there
08:43 < TehShrike> o hai
09:07 < thomas`-> Hi all. Would it be better to have Node directly access my database, or let it access it through PHP (concidering nearly all my code is PHP)? What do you think?
09:09 < deoxxa> thomas`-: maybe you should shove some visual basic in the mix as well, just for variety
09:12 < TreeMonkie> Hi, I am having the exact issue mentioned in this report: https://github.com/LearnBoost/socket.io/issues/749 ... The submitter says he resolved the issue by "manually cloning uglify-js". Any hints on how I might go about doing that? Simply putting the correct uglify-js folder in node_modules/socket.io/node_modules does not work -- npm wipes that whole folder before starting it's install. Thanks.
09:17 < deoxxa> TreeMonkie: that issue is 9 months old
09:17 < deoxxa> TreeMonkie: are you trying to install an extraordinarily old version of socket.io?
09:19 < TreeMonkie> deoxxa: No, latest. And I actually just figured out out... I am developing in a linux VM, with a windows host. My dev directory is a dir on my windows host mounted via CIFS on the linux VM... the socket.io install requires symlinks which windows does not support. Installing into a directory local to the VM works fine.
09:20 < deoxxa> ah, yeah
09:21 < TreeMonkie> Irritating though... now I need to do all sorts of copying back and forth...
09:37 < clocKwize> hey
09:39 < clocKwize> I'm trying to use vows.js for the first time and I want to set up an object (just an array) and pass it in to my topic, then check the topic has done something to it - how would I go about that?
09:44 < cellvia> what is the best function 
09:47 < clocKwize> cellvia, to do what?
09:48 < cellvia> theres just so many of them
09:48 < cellvia> undefined or null, who wins?
09:48 < cellvia> i am partial to the function bind,it rocksmy world
09:48 < cellvia> and i use null but does undefined have any benefits?
09:49 < cellvia> seems more of a pain to check for
09:49 < cellvia> having to do typeof and all that ?
09:53 < clocKwize> ... what are you trying to do?
09:53 < cellvia> just have a little chat
09:53 < cellvia> programming at 4am has me feeling a little strange
09:54 < cellvia> i only ask because i generally pass null or false, but then i saw in some random mozilla docs they were passing around undefined
09:54 < cellvia> like say if you need to call a function but leave an argument blan
09:54 < cellvia> blank
09:55 < cellvia> not that it really matters much but wonder if there was any specific benefit
09:55 < clocKwize> hmm, I've never passed undefined around
09:56 < clocKwize> I'd use it if the state of my object or the parameters passed to a method don't allow for an expected behaviour
09:56 < clocKwize> i.e. undefined return value
09:56 < clocKwize> as the expected behaviour for that state is undefined
09:57 < mahesh> hi
09:58 < mahesh> can anyone help me with modifying .js source?
10:00 < mahesh> how to recompile the modified source .js files?
10:00 < deoxxa> mahesh: what
10:01 < aandy> please don't pm everybody in here. ask your question, and if someone can help you, they probably will
10:01 < deoxxa> mahesh: there's no compilation with javascript (at least not any that's externally visible)
10:02 < mahesh> I just put some prints inside js  to test but it ssems no effect
10:02 < mahesh> I mean in net.js & http.js
10:02 < deoxxa> ok, that's a different story
10:02 < deoxxa> those aren't "compiled" as such
10:03 < mahesh> how can I do that?
10:03 < deoxxa> but they are bundled into the node binary
10:03 < mahesh> I want to modify some cod einside it?
10:04 < deoxxa> i think the easiest way would be to recompile node after changing them - maybe ask in #libuv, the people in there are pretty good with node internals
10:06 < xat-> is there some service to download a npm module including all dependencies and a binary file of node without the need to have npm/node installed on the machine?
10:06 < jtm2> What is the benefit of using redis' subscribe/publish features with socket.io instead of just using socket.io's events?
10:06 < xat-> something like "wget http://npm-gateway.com/package/express"
10:07 < xat-> somekind of standalone creator
10:08 < mahesh> Thanks deoxxa
10:08 < mahesh> How ca I get tcp packet over http server?
10:40 < benjaminb> hi, does node.js supports multiple machine clustering? multicore cluster also work as far as i know only on one physical machine. we want to run a node cluster in a bladecenter on x pysical machines
10:42 < q_no> benjaminb: Have a look at "cluster" (npm install cluster). it's quite handy to fork processes on one machine
10:42 < deoxxa> q_no: did you even read the dude's question?
10:42 < benjaminb> read above please ;) we want to one node service on x physical machines, not on x cores
10:43 < deoxxa> benjaminb: not directly, no. the good news is that there's quite a lot of support code/libraries out there to make it easier for you
10:43 < q_no> I did, just wanted to give a point to start ;) fork local... and everything else behind a loadbalancer of your choice? nginx, pound,haProxy... ? ;-)
10:44 < deoxxa> benjaminb: basically node won't magically make your code work across multiple machines, but the way most stuff is written in node makes it easy for you to work out the best way to do it for your application
10:44 < benjaminb> but how about the socket connections?
10:44 < q_no> for socket connections use redisStore :)
10:45 < deoxxa> q_no: ...
10:45  * q_no shuts up
10:45 < deoxxa> benjaminb: you'll have to figure out the best way to do that for your specific use case
10:45 < deoxxa> benjaminb: with HTTP it's pretty simple - you shove a load balancer in front and let it do its thing
10:46 < deoxxa> benjaminb: for other protocols, it might not be so easy (or it might be easier)
10:46 < deoxxa> benjaminb: the moral of the story is that node doesn't know how you want your application to work, so it doesn't try to force you into doing things a specific way. in doing that, it puts a lot of the responsibility (and freedom) back on you to make sure you do things in a way that makes sense for you.
10:54 < tohoe> who moderates the node.js mailing list ?
11:12 < kurteknikk> hi guys
11:12 < SomeoneWeird> herro
11:13 < kurteknikk> @clever -- yesterday i saw you discussing something with another guy, because he said there was a bug in node sockets
11:14 < kurteknikk> i think i'm running into the same issue, do you by any change have the link he provided yesterday ?
11:22 < rafmc> anyone used browserify with express lately? can't seem to find a working example...
11:22 < freewil> yeah im using it with express 2.x
11:23 < rafmc> yeah tnx
11:28 < syskk> is there any way to alias a path to another in express?
11:29 < syskk> for example, I'd like /v1/ to behave exactly like /
11:29 < SomeoneWeird> syskk, app.get('/v1/', function(req, res) { res.redirect('/'); });
11:29 < syskk> SomeoneWeird: I don't want redirects though
11:30 < dz0ny> syskk: lol, you write function right and use same function for both calls
11:30 < SomeoneWeird> then just do function handlev1(req, res) { /* logic */ } and app.get('/', handlev1); and app.get('/v1/', handlev1);
11:30 < syskk> ok, so there's no built in way to do this..
11:30 < syskk> i meant to include every subpath as well
11:31 < Raynos> rafmc: just use browserify
11:31 < syskk> I guess I could change req.url but well
11:31 < syskk> would be nice if this feature was built in
11:31 < Raynos> syskk: do a little hack on the router
11:31 < Raynos> after you set up the routes
11:31 < Raynos> iterate over the route table
11:32 < Raynos> and copy over all /v1/ routes into /
11:32 < syskk> Raynos: yes, that sounds like a good idea
11:32 < syskk> I was thinking of modifying the URL before the router is called but that's probably even more hacky
11:32 < Raynos> yeah :P
11:33 < Raynos> the clean thing to have
11:33 < Raynos> is an add routes(version, routesList)
11:33 < Guest81412> hello help here but need help
11:33 < Raynos> then do addRroutes("/", v2) addRoutes("/v2", v2) addRoutes("/v1", v1)
11:34 < syskk> I think I'm actually going to use nginx and redirect to a different server depending on the version. so the node.js app wont even be aware of versioning
11:35 < Guest81412> actually i dnt understand about node.js is that like how could i make the applications in node.js whether havenot any kind of variiables,datatypes eetc
11:35 < syskk> and I'll be able to maintain different versions on different branches
11:36 < syskk> Guest31816: that seems like a Javascript question, not a Node.js question
11:36 < Guest81412> can u please tell me what type of code i am able to do in node.js
11:37 < syskk> Guest31816: anything you can do with PHP, Rails or Django
11:37 < SomeoneWeird> anything
11:38 < Guest81412> node.js is what a language,framework,database.what it is.i am not clearly get that
11:38 < syskk> Guest31816: it's javascript + a few builtin libraries. database support is offered by 3rd party libraries
11:39 < Guest81412> mean i ll do code in javascript,
11:43 < deoxxa> Guest81412: the first paragraph on http://nodejs.org/ explains what node.js is
12:05 < _geo> how can i test response on a socket.io server?
12:05 < `3rdEden> _geo: what kind of response
12:06 < _geo> i want to test what the socket.io server is sending back to a request
12:06 < _geo> if its the expected response.
12:11 < _geo> can i do it from browser?
12:18 < Guest42526> deoxaa,u havent  replied me.please clear ma doubt.
12:20 < `3rdEden> _geo: you can watch the network traffic
12:21 < `3rdEden> just open the web inspector and watch the network panel
12:23 < _geo> thanks, didn't notice that on chrome
12:23 < foobar321> Hi. How to turn { val: 42 } this into C++? First I have to create object Local<Object> res = Object::New(); but how to create key and value?
12:24 < foobar321> Ok. I've found in the doc
12:29 < bsnote> Hi, does anyone know when will node.js v0.8.15 will be out?
12:29 < gotwig> bsnote: no :-D
12:30 < bsnote> gotwig: thanks :)
12:31 < gotwig> :3
12:38 < thomas`-> Hello. What API does Node.js have to make Ajax-like request to a server?
12:38 < thomas`-> (URL + Post data)
12:40 < mape> thomas`-: look at request
12:40 < mape> https://github.com/mikeal/request
12:41 < thomas`-> thanks mape ill read about this
12:43 < Doomground> passportjs throws me a 500 when calling done with error
12:43 < Doomground> but as deserializeUser doesn't get res or req 
12:43 < Doomground> how can i clear user sessions or something
12:43 < Doomground> so i wouldn't get stuck in 500
12:48 -!- mode/#node.js [+o piscisaureus_] by ChanServ
13:12 < gotwig> can I install
13:12 < gotwig> nodeJS behind proxy, without Root?
13:12 < gotwig> is that a good guide? http://tnovelli.net/blog/blog.2011-08-27.node-npm-user-install.html
13:27 < foobar321> bsnote: why you're waiting for 0.8.15? Any important changes there ?
13:33 < Doomground> anyone using simple-acl?
13:33 < Doomground> how can i grant permissions to /image/:id
13:38 < sinclair_> why the hell is the google drive api so obnoxiously difficult to use
13:45 < deoxxa> sinclair_: try their BigQuery api
13:46 < sinclair_> deoxxa: googles client API's have always been craptacular 
13:46  * deoxxa nods
13:47 < deoxxa> it makes sense though, they're not exactly making a fortune off the people who use their APIs
13:50 < sinclair_> deoxxa: and they are not likely to if you continue on with the disparate crap they currently have
13:50 < sinclair_> *they
13:51 < deoxxa> yeah
13:53 < sinclair_> deoxxa: it hasn't really gotten any better in the years since ive been looking at them
13:54 < sinclair_> deoxxa: there is no nodejs support for Google Drive
13:54 < sinclair_> deoxxa: which leaves scraping around their libs for information on how to use their service accounts
13:55 < deoxxa> yeah, it's not a lot of fun
13:55 < sinclair_> deoxxa: something fun here tho .. http://i1.kwejk.pl/site_media/obrazki/2012/11/6ef328132bf85e30c5c6522aba750b26_original.gif?1353578754
13:56 < deoxxa> cats as a service
13:57 < deoxxa> i like it
14:01 < gotwig> are there problems when installing nodeJS in your home directory?
14:06 < badgerbadger> I am trying to get a function going which will accept new data coming in from the serial port and if no new data has been received in 100-300 microseconds i want it to concetanate the data and shove it out
14:07 < badgerbadger> but cant think where to start, ive already got the serial port firing when new data is received.. its just what to do with that data which is confusing me
14:07 < badgerbadger> i can use the hr.time function to get current time in nano seconds
14:08 < deoxxa> badgerbadger: setTimeout
14:08 < deoxxa> badgerbadger: also clearTimeout
14:09 < badgerbadger> okay so as soon as data is sent in set time out.. if more data comes in clear it.. once its timed out send data
14:09 < badgerbadger> that sounds like the ticket.. jsut needed the nudge. thanks!
14:10 < deoxxa> badgerbadger: \o/
14:12 < tohoe> who moderates the node.js mailing list ?
14:13 < aandy> a cluster of worker nodes
14:13 < tohoe> ^^
14:21 < deoxxa> aandy: lol
14:25 < badgerbadger> just realised something
14:26 < badgerbadger> settimeout will only work down to 1ms.. I need microsecond timeouts..
14:27 < aandy> make a callback with a while true'ish loop? if process.nextTick is too fast for you
14:31 < trankil> im piping a readable stream to a file
14:31 < trankil> and no error until the end
14:31 < trankil> BUT MY FILE IS BLANK AFTER NODE EXIT
14:32 < trankil> HELP!
14:32 < trankil> hey help!!!! aandy deoxxa badgerbadger
14:33 < aandy> based on the trategory of your letters i assume this is an emergency
14:33 < aandy> do you have a snippit we can look at?
14:33 < aandy> have you tried .resume()'ing the read stream, are you sure the write stream is open (and writeable), that the read stream is readable, that any bytes are read, and such
14:34 < aandy> strap on the utility belt, batman
14:34 < trankil> aandy: code http://pastie.org/5418401
14:35 < trankil> it inside my test
14:35 < aandy> and the end event is hit?
14:36 < trankil> yes mocha output is good
14:36 < trankil> so done() is reached
14:38 < aandy> well, i get the same as you. (empty file). sec
14:39 < trankil> okay aandy
14:39 < trankil> im comforted
14:39 < trankil> and im WAITING
14:40 < aandy> well, apart from not reaching the end event
14:44 < trankil> aandy: ?
14:44 < trankil> aandy: why?
14:45 < trankil> i rewrote like this
14:45 < trankil> http://pastie.org/5418445
14:45 < trankil> but the file is always empty after the test
14:45 < aandy> funny, i was just about to say that. separate the pipe and on
14:45 < aandy> works here
14:46 < aandy> http://pastie.org/5418459
14:49 < trankil> aandy: its not working
14:50 < trankil> I WANTO CRY
14:51 < aandy> what doesn't? have you changed your code from your last pastie?
14:52 < trankil> yes
14:52 < trankil> http://pastie.org/5418445
14:52 < aandy> and why are you setting a timeout to destroy the stream 20 secs later?
14:52 < aandy> no, that's the same pastie
14:52 < aandy> no .resume in that
14:52 < trankil> im testing and external api
14:53 < xorox90> how can I return in call back routine here is my code http://ideone.com/icKNH3 I want to getElements' value
14:55 < aandy> xorox90: by extending with another callback. your code is async (and event driven)
14:55 < xorox90> aandy// you mean I have to write cps style right?
14:56 < aandy> xorox90: something like http://pastebin.com/NAWbgF99
14:56 < trankil> aandy: like this? http://pastie.org/5418497
14:56 < aandy> for that particular example, yes
14:56 < sosnon> dear geddy users, this http://geddyjs.org/tutorial#Model vaguely states that changing defaultAdapter and installing mongo-wrapper would basically make geddy 'mongo-ready', this http://net.tutsplus.com/tutorials/javascript-ajax/persisting-your-todo-list-with-mongodb-and-geddy/ , however, explains in detail how many components of the model still have to be set up manually (validation, stripping functions off of objects etc.); is there a 
14:57 < aandy> xorox90: notice btw that i moved the "elements =" one up, otherwise you'd be returning "true", but that's nitpicking :)
14:58 < aandy> trankil: no, right after you open the pipe (or after your .on hooks)
14:58 < aandy> not inside
14:58 < sosnon> the model adapter layout feels to be just as unconvenient as doing it manually with express
14:58 < sosnon> in case geddy is not supported in here, feel free to redirect me
14:59 < xorox90> aandy//thx example I got it,  but sometimes, I want to go to middle of function for reusabilirity is there no way?
15:01 < aandy> sosnon: your msg was cut off: etc.); is there a
15:01 < aandy> xorox90: not sure i understand what you mean?
15:01 < xorox90> aandy//thx example I got it,  but sometimes, I want to go to middle of function for reusabilirity is there no way go to middle of function
15:01 < sosnon> sorry, here is the rest: ... is there a way yet (maybe even built-in) which reduces the manual setup of models? maybe a small django-like ORM?
15:01 < xorox90> hmm ok i will make example
15:02 < aandy> i don't know/use geddy, but if you're looking for mongodb ORM i think mongoose is a fairly mature one
15:02 < sosnon> admittedly, geddy offers sure a straight forward way of writing adapters, but it can quickly become a hassle for complex models, of course
15:03 < Industrial> Say I have one server running on one port that sends a message when a HTTP request occurs, can I make the receiving end (hopefully) somewhere down the line send a HTTP response? http://nodemanual.org/latest/nodejs_ref_guide/http.html#http.ServerResponse says it's used only internally.
15:04 < deoxxa> Industrial: that didn't make a whole lot of sense
15:04 < deoxxa> Industrial: try splitting it up into, say, 3 sentences
15:05 < aandy> i think we're confused as to what the "message" is in your context :)
15:05 < badgerbadger> I am really confused about this,i think its the fact that I am listening for the "on data" event from my serial port and then setting a timeout too
15:05 < badgerbadger> someone fancy helping me for 2 mins if i show them my code, its probably really easy
15:05 < deoxxa> SHOOOOW THAT SHIT
15:05 < xorox90> aandy// hmm I got it myself, what I want to is return statement for async... 
15:06 < sosnon> aandy: yeah, well, mongoose, for instance, still requires manually specifying save/all/load/remove/... (or 'CRUD', if you want) methods; so it boils down to the same builerplate for each model item, with the difference of an extra requirement (+ potential slowdown)
15:06 < xorox90> aandy// like coroutine..
15:06 < sosnon> sosnon: that is, i would still require a fairly complex adapter for each new application
15:06 < aandy> sosnon: you're looking for inheritance or?
15:06 < badgerbadger> http://pastebin.com/bcj1nSZR
15:07 < badgerbadger> obviously it wont work as I am declaring the timeout after i try and clear it
15:07 < Industrial> I'm trying to see if I can use ZeroMQ with NodeJS HTTP requests because those are Streams and ZeroMQ can do multipart messages. I figured implementing Streaming middleware was nice and maybe I could use ZeroMQ to route requests to different apps/websited depending on hostname.
15:07 < badgerbadger> but i just dont understand how and where to put the timer..  i want the serial port to keep listening for messages forever but every time theres a gap between data of a couple of miliseconds i want it to concatenate the buffer and send it off
15:08 < deoxxa> badgerbadger: the `timer' object needs to exist in a scope outside that callback
15:08 < aandy> right
15:08 < aandy> just make a periodical "emitting"
15:08 < deoxxa> badgerbadger: basically something like `var timer; sp.on("data", function(chunk) { clearTimeout(timer); ... timer = setTimeout(...); });' would work
15:09 < badgerbadger> ahh i think that makes sense.. ill write it up now and see
15:09 < aandy> well, he'd overwrite the timer variable if he's spammed with data before the timer runs out
15:09 < Industrial> But somewhere down the line an HTTP response needs to be sent. I was wondering if I can do that ina  different ZeroMQ node then the one that got the (req, res) callback. If not then all the messages through the system leading to a response must end at that seome point again? kinda meh.. :-) I'm not sure if I'm thinking about this the right way.
15:09 < deoxxa> badgerbadger: for bonus points, though, i'd wrap the entire thing in another object that'd have the timer as a property, and the data callback as a property, then .bind() the data callback
15:09 < Industrial> aandy: ^
15:09 < sparklr> different version numbers show for node -v and nodejs -v ? Can anyone help?
15:09 < sosnon> aandy: i'm a bit spoilt by django where you just specify your model and the ORM provides all cread/read/update/delete/... functionality for you (including setting up objects to fit the db used (mysql/postgres/sqlite/...)); it would be nice to have such a convenience in geddy/express/..., too
15:10 < deoxxa> sparklr: node is the official binary name - your operating system's package manager probably provided `nodejs'
15:11 < badgerbadger> deoxxa that sounds amazing but i  think its outside my realms i dont really understand what you wrote.. never midn being able to code it
15:11 < aandy> you won't find that in node now, and not sure when you would if ever. but it depends in which areas
15:11 < sosnon> aandy: i'm just wondering if there is such a all-in-one solution for node yet which would work with geddy or any other web framework
15:11 < deoxxa> badgerbadger: heh, probably not necessary anyway
15:11 < aandy> express are fairly good at doing it for some of their core projects (or connect rather)
15:11 < badgerbadger> http://pastebin.com/n4AC9Fzt
15:11 < badgerbadger> so we thinking something more like this?
15:11 < sosnon> aandy: basically just redis then
15:11 < aandy> such as the session store, which has an abundance of "drivers" for redis, mongo, mysql etc
15:12 < trankil> aandy: THANK YOUUUUU
15:12 < sparklr> deoxxa : so am i using a version 8 when nodejs -v shows v0.8 while node -v shows v0.6
15:12 < trankil> but in fact its not the resume
15:12 < sosnon> aandy: thanks for the info
15:12 < trankil> IM A NODEJS EXPERT MOTHERFUCKERRRRRRRRRR
15:12 < aandy> sosnon: i don't think there is, no. there's not a lot of boilerplate mentality in the node community
15:12 < trankil> HUHU
15:13 < Industrial> I guess the question comes down to: Given a HTTP Request, can I create a HTTP response and write to it and end() it myself?
15:13 < deoxxa> Industrial: you can't just "create" an http response
15:13 < aandy> that being said, maybe code generators are what you would write - or use inheritance as long as you can
15:13 < deoxxa> Industrial: basically the http.ServerRequest and http.ServerResponse objects are just two halves of the same network connection
15:13 < aandy> as deep*
15:14 < sparklr> deoxxa : can you check this error while doing npm install ? http://www.privatepaste.com/81e5024117
15:15 < Industrial> deoxxa: right, so if I were to create a message passing network of nodes to process the request and create a response, the responding part would always need to happen from the callback that got the response object?
15:15 < gildean> sparklr: the "node" is prolly the radio-amateur-software
15:15 < gildean> sparklr: if you're on debian/ubuntu
15:15 < sparklr> gildean: on debian/ubuntu
15:16 < gildean> sparklr: i think you can just apt-get remove node and ln -s
15:16 < aandy> Industrial: your use of "a message" is still a bit ambigeous, but yes, your requests are calling a function with the layout of function(req, res) {}
15:16 < deoxxa> Industrial: strictly speaking, it could happen on the same *machine* if you wanted to get really tricky, passing file descriptors around, but the simple answer is "yes, the response has to come from the same place the request went to"
15:16 < sosnon> aandy: i'm completely new to express/geddy/..., but as far as i can see, sometims just using a template language as view, a manually crafted adapter as model and a router/controller mashup seems just as efficient as using express, for instance, but i think i'm mistaken it for a too thin abstraction over node's core, i think
15:16 < deoxxa> sparklr: you have no package.json
15:17 < deoxxa> sparklr: and you're using some weird deployment thing, of which i have no knowledge
15:17 < deoxxa> sparklr: sounds like you need to remove/reinstall node completely
15:17 < sparklr> deoxxa : alright
15:18 < deoxxa> sparklr: i'd suggest installing node locally to a user account if you're going to be using something specialised for deployment
15:18 < aandy> sosnon: i know, but it's a mix of node still being relatively new, and coding styles still being developed (or agreed upon), so it's moving fast
15:18 < deoxxa> sparklr: there are binaries available from http://nodejs.org/dist/latest/ that can make that really easy for you
15:18 < trankil> aandy: i need you again
15:19 < MI6> joyent/node: Ben Noordhuis master * 8d2753c : constants: fix wrapping of large constants  Use Number::New() instead of  - http://git.io/3ekvKg
15:19 < aandy> sosnon: it's not really at a stage where django would be fair
15:19 < sparklr> deoxxa: ok. that error comes up on my server instance.
15:19 < trankil> aandy: whats the best way to store and emit all buffered data on my stream?
15:19 < sparklr> deoxxa: everything works locally. Trying to deploy my app on my server
15:19 < trankil> aandy: after a .pause() for exple
15:20 < aandy> but express (or geddy from the looks of it) are some of the closest you'll get right now. that and various middleware - which together should get you a long way
15:20 < sosnon> aandy: sure, django is huge and a slight bit older, of course
15:20 < trankil> aandy: im simply using an array now, but im not sure
15:21 < trankil> HELP MEEEEEEE
15:21 < Zelest> o_O
15:21 < aandy> sosnon: hehe, true, but i mean... even when i look at django, i go... man that's weird, i'd rather use tornado - and have done so in a few projects. node is even less written in stone convention wise, but it has more to do with the idea of node. you write small modules which do "one" thing, and does it well
15:21 < aandy> so it's more like building tools, than a toolbox. at least yet
15:22 < deoxxa> sparklr: well, you might have to talk to whoever maintains that bitnami thing
15:22 < clocKwize> I'm trying to use vows.js for the first time and I want to set up an object (just an array) and pass it in to my topic, then check the topic has done something to it - how would I go about that?
15:22 < Industrial> deoxxa, aandy; ok thanks.
15:22 < sparklr> deoxxa: ok thanks!
15:22 < deoxxa> sparklr: also, create a package.json - use `npm help json' for more info
15:22 < trankil> aandy: i asked you something :s
15:23 < sosnon> aandy: one more thing, there is no node-specific 'serialization' protocoll which would allow dumping data and then 'importing' it into various data stores (mongo, redis, ...) (besides JSON, of course), is there? something like pickling just for development so one could skip/delay writing adapters for a while during prototyping etc.
15:23 < sosnon> aandy: which would be a horrible indirection, of course
15:24 < MI6> joyent/libuv: Ben Noordhuis master * dcd3b55 : unix: fix thread pool race condition  Send the wakeup signal to the main  - http://git.io/tRvyRA
15:24 < trankil> sosnon: thats userland, welcome.
15:24 < aandy> json is a very obvious choice, and pretty common yes
15:25 < aandy> if you want to go smaller there's bson or what it was called, but i'm not sure how much of a gain that'd be hehe
15:25 < sosnon> aandy: bson is in fact larger (mongodb uses it); i think you mean yaml or something
15:26 < aandy> sosnon: i only speak from a few libraries i've seen where pickling'ish behaviour was needed, and they did it by serializing json
15:26 < strk> node: /usr/include/boost/thread/pthread/mutex.hpp:47: boost::mutex::~mutex(): Assertion `!pthread_mutex_destroy(&m)' failed.
15:26 < aandy> hmm, then that's not what i'm thinking of.. it was a binary form of json, which saved marginally (but losing all readability). it's rather new
15:26 < aandy> anyway, probably just a fad
15:27 < deoxxa> aandy: there's messagepack
15:27 < matbee> guys, don't forget to vote for the nodejs project in the global startup battle!! :) vote.groupnotes.ca
15:27 < matbee> (you acn vote once a day fwiw)
15:27 < aandy> trankil: in a Buffer, and emit, well... when you need it. there's a timer example from badgerbadger a few lines above :)
15:28 < sosnon> i'm not actually talking about the serialization as such, but rather the CRUD part, so i could just say 'helperthingy.save(mystuff);' and 'helperthingy.update(mystuff);' and it handles validation/duplication checking/err callbacks/... automatically; but forget it, it is a horrible way of complicating things, writing an adapter once and adjusting it for various apps seems more sane
15:28 < aandy> deoxxa: ah, right, messagepack
15:28 < deoxxa> matbee: i wanted to go to the kyoto startup weekend thing, but the dates were slightly out of line with my plans :<
15:29 < aandy> sosnon: by adapter do you mean a db abstraction? (not familiar with geddy)
15:29 < trankil> aandy: this is what i did http://pastie.org/5418678
15:30 < sosnon> no, a mini-ORM, basically, still not worth the hassle, though
15:30 < sosnon> aandy: the geddy way is actually pretty easy since it is just the mongo-wrapper in the end; i think i just have to get used to it
15:31 < Fike_> So, in my code I have a socket object. I have the event listeners set up for it, however I'm not trying to add SSL/TLS support. So, in the options object I did socket: this.socket, which works fine. However when it connects it returns all this gibberish to my terminal and my parser doesn't work on it. I have no experience with the tls module, could someone help me out? :)
15:32 < matbee> deoxxa :(
15:32 < matbee> deoxxa startup weekend is amazingly fun
15:32 < matbee> I definitely recommend it!
15:32 < trankil> aandy: how can improve, or isit totally bad?
15:32 < aandy> sosnon: ah okay :)
15:32 < matbee> deoxxa BUT you can still vote for me, right? ;)
15:34 < aandy> trankil: can't stretch around it right now, but just define your functions once
15:34 < aandy> in that paste, you're creating the afterFlush and flushBuffer function every time you resume
15:35 < trankil> aandy: thats right, thks
15:35 < trankil> aandy: but the aproach is right or not?
15:36 < trankil> omg my english is TERRIBLE!!!!!!!!
15:37 < sosnon> aandy: still one more thing (as long as i'm here): express/geddy/... allow auto-generating an app skeleton in JS; i would love to just pop in my .coffee files as needed (and extend the already generated .js files with JS, of course), then just copy then just compile the whole thing .coffee -> .js automatically with nodemon or to put it simple: 'live' extend .js projects with CoffeeScript without having to pop in a cake task for doing t
15:38 < trankil> sosnon: your writing so much, please do an effort.
15:38 < sosnon> trying to .js -> .coffee the whole thing beforehand, then just write it all with in CoffeeScript and do .coffee -> .js is an option, but does not work all the time, of course
15:39 < sosnon> trankil: sorry, feel free to ignore it, it was directed to aandy anyway
15:39 < deoxxa> ew, coffeescript
15:39 < sosnon> ew?
15:39 < trankil> sosnon: yes, but this is not a blog, the linesize is limited on irc and in the cloud.
15:39 < deoxxa> "in the cloud"?
15:40 < deoxxa> is it equal opportunity hour in here or something?
15:41 < matbee> lol
15:41 < aandy> sosnon: coffee -wc :)
15:41 < aandy> watches for changes and compiles
15:41 < trankil> sosnon: so dont write your long sentences again, nobody understand you. or you can just not write anything anymore.
15:41 < aandy> or you can use coffee in node directly, just make sure you use require('somefile.coffee'); and it'll be loaded correctly
15:42 < deoxxa> trankil: please do an effort
15:42 < sosnon> one more problem with the whole .js -> .coffee/ .coffee -> .js dance for already existing projects is the loss of comments/overheat with comments (docco, for instance does not support multiline comments while .coffee -> .js only preserves multiline comments and using a pre-commit hook just to remove all the "/*" and "*/" becomes annoying)
15:43 < sosnon> aandy: still, 1) extending auto-generated .js templates and 2) comments/docco is still not 100% perfect so far ;)
15:43 < sosnon> trankil: sorry again
15:44 < trankil> sosnon: dont be sorry, "sorry again".length == 2, thats good enougth.
15:45 < Fike_> deoxxa: think you could help me? :P
15:45 < deoxxa> Fike_: maybe!
15:46 < Fike_> deoxxa: my question is above ;)
15:46 < trankil> Fike_: "TLDR;" - everyone on this channel.
15:47 < Fike_> meh
15:47 < aandy> i think you mean "sorry again".split(' ').length === 2
15:47 < deoxxa> Fike_: are you... trying to use tls?
15:47 < Fike_> deoxxa: yes.
15:47 < deoxxa> ah
15:47 < Fike_> I want to add TLS/SSL support to the code I have
15:47 < trankil> Fike_: please do as sosnon, ask short questions, 3 words.
15:47 < deoxxa> i haven't used it that way before
15:47 < aandy> trankil: who made you the boss of sentences and grammar?
15:48 < deoxxa> trankil: dude, maybe when you're the one answering questions, you'll be able to dictate the format of those questions. until then, lol, be quiet.
15:48 < Fike_> trankil: sorry? I'll ask whatever I want whatever way I want, just because you're too lazy to read it doesn't mean others are.
15:48 < deoxxa> Fike_: lemme look at the documentation for a second
15:48 < trankil> aandy: im waiting your suggestion :s
15:48 < Fike_> deoxxa: sure
15:48 < aandy> trankil: no, you're waiting for food, and i for one will not feed the troll
15:49 < matbee> HA
15:49 < trankil> aandy: noooooooooooo
15:49 < matbee> LISTEN
15:49 < matbee> If it's too long, ask him to take it private if you're interested in helping
15:49 < matbee> If not, shut up and help if you can <3
15:50 < trankil> irc is serious, the internet is serious.
15:50 < trankil> i think aandy is the only smart guy here.
15:50 < Fike_> where did you get the idea that IRC is serious
15:51  * Fike_ runs
15:51 < Fike_> anyway
15:51 < deoxxa> Fike_: i think you want to capture the return value of tls.connect and use it for reading/writing after tls negotiation
15:51 < Fike_> deoxxa: http://pastie.org/private/i3apqhuxwwkwl1dxmpz8q
15:51 < Fike_> that's what I'm doing at the moment
15:52 < deoxxa> Fike_: something like `if (this.config.ssl) { this.socket = tls.connect({socket: this.socket}); }'
15:52 < deoxxa> i think...
15:53 < Fike_> deoxxa: I have a listener set up for the raw event that logs the data argument to the console, it seems to work but I get a pile of gibberish instead of what I expect
15:53 < Fike_> it appeared to be something to do with the SSL cert
15:53 < Fike_> I'll try what you said though
15:53 < deoxxa> Fike_: the underlying socket will still be spitting out data events with encrypted data
15:53 < Fike_> oh
15:53 < deoxxa> Fike_: those events get consumed by the tls wrapper and decrypted, then spat back out of the tls wrapper unencrypted
15:54 < deoxxa> the tls stuff doesn't modify the behaviour of the original socket in any way
15:54 < spion> is there any documentation on how should global modules (binaries) handle cache storage?
15:55 < deoxxa> spion: careful there with "global module"
15:55 < deoxxa> spion: you're making it sound like that's something special
15:55 < Fike_> hm deoxxa now it just exits
15:56 < Fike_> doesn't do anything
15:57 < spion> deoxxa, let me rephrase then :) If I'm writing a node-based binary, where do I store cached data? Do I have a module which will provide me with an os-agnostic path?
15:57 < spion> actually binary = executable
15:58 < spion> oh wait. what I just wrote is npmsearch
15:58 < spion> let me try and actually use it.
15:58 < deoxxa> ha
15:58 < Fike_> deoxxa: actually, I just realised that if I pass a callback to tls.connect() at the end, there's a data event I can utilise
15:58 < Fike_> that fires off every time data is received, unencrypted
15:59 < deoxxa> sure, as long as you understand *why* that works, go ahead :P
15:59 < gildean> spion: iirc the os-module has os.tmpDir()
15:59 < gildean> spion: yes it does, checked the api docs
15:59 < spion> its a pretty big db, I want it to persist across executions (I am downloading the past 30 days worth of downloads from npmjs)
16:01 < gildean> besides the os.tmpDir(), i'm not sure there's any cross-platform way, unless you make one in your code
16:01 < Fike_> deoxxa: don't understand why :P
16:02 < mscdex> node.js rules!
16:02 < gildean> like check if (os.platform !== 'win32')
16:02 < spion> ah. was hoping for a module that would provide the correct dir. e.g. ApplicationData on windows, ~/.something/somethingelse on linux etc.
16:02 < deoxxa> mscdex: trollbaiter
16:02 < Fike_> afaik spion you can access environmental variables such as the PATH from your module
16:02 < gildean> spion: you can do that yourself, if you know that the dir exists
16:04 < spion> I think I'll take a look at what npm does to cache its stuff
16:14 < Fike_> deoxxa: I might leave TLS/SSL support out for the first version of this module:P But adding it won't be hard, will it? I have a parse set up for data being received from the socket, I don't really want to add messy edits to it to make sure it works
16:14 < Fike_> parser*
16:25 < zorlax> Hi all. I'm using spawn to launch a child process & p.stdout.on('data' ... to display the output. Problem: not showing stdout until exit. Perhaps the problem is configuring the stdio option of spawn? Any suggestions?
16:26 < zorlax> i.e. it seems to be buffering the output of the launched program and only displaying it when the process is closed
16:29 < zorlax> well actually I get one line - then no more until close..
16:31 < manuelbieh_> is there a working forever webui out there?
16:31 < manuelbieh_> the forever-webui package seems to be broken and is not maintained anymore
16:31 < manuelbieh_> or at least i cant install it using npm
16:33 < zot> i have event handlers that are object methods; since '===' doesn't work against self.callback.bind(self), is there a clever way to use removeListener() with object methods?
16:33 < gildean> manuelbieh_: haven't even thought about that, but it sounds like a fun project to do
16:34 < manuelbieh_> indeed
16:34 < manuelbieh_> this one looks pretty cool: https://github.com/FGRibreau/forever-webui
16:34 < manuelbieh_> but as i said. i can't install it and it's no longer maintained
16:34 < zot> (pastebin for above: http://pastebin.com/uTfb4YsN )
16:35 < manuelbieh_> and the mentioned supervisord and monit are command line tool. i want something nice for my eyes
16:37 < manuelbieh_> oh 
16:37 < manuelbieh_> cool
16:38 < manuelbieh_> i can git clone it and run it that way. seems to work. everything is cool. thank you.
16:46 < ack006> anyone who would like to help out with some ventriculocordectomies?
16:47 < ack006> i'm not suggesting any cruelty to animals
16:47 < ack006> just that there's still a lot of node modules out there which are using node-waf
16:47 < matbee> I'd totally help your mom out with her ventriculordleocececctomies
16:47 < ack006> 'waf' is dutch word for the sound of a dog's bark
16:48 < matbee> like, woof
16:48 < ack006> yup
16:48 < matbee> I'll help you out if you vote for my nodejs project <3
16:48 < matbee> haha
16:48 < ack006> and any time i see npm errors about not finding node-waf i've got that urge...
16:48 < trankil> ack006: personally I do not know.
16:48 < zot> ack006: you just filled in a puzzle piece for me.
16:48 < zot> (re waf == woof)
16:48 < ack006> :-)
16:48 < trankil> ack006:  but maybe you should asked JamesBond007? 
16:49 < ack006> hahaa!!
16:49 < ack006> i'm his evil (well, sometimes) predecessor
16:49 < ack006> but mostly i ack things, especially patches
16:49 < aandy> you're the one who died in golden eye?
16:50 < ack006> like to be positive
16:50 < ack006> i'm still alive! (as in portal 2)
16:50 < trankil> ack006: no you cant be his predecessor, in the nodejs world, 006 <<< 007
16:50 < aandy> we'll see about that
16:50 < trankil> everything is async man!
16:50 < aandy> or perhabs 007.__proto__
16:50 < ack006> trankil: you get it ;)
16:52 < mscdex> deoxxa: come on, you know you love node.js
16:57 < MI6> joyent/libuv: Ben Noordhuis master * 90271e1 : darwin, freebsd: set SO_NOSIGPIPE on sockets  Suppresses delivery of SIGP - http://git.io/RDsu4A
17:00 < ack006> i know there's a node script out there which scans github repos for wscript files, but i can't find it
17:00 < zot> whoah.  Buffer has no {read,write}[U]Int64 ?!?
17:01 < ack006> if s/o can point me to it (or its output), then i can go in and debark those modules myself, send patches
17:01 < zot> am I missing sth?
17:01 < mscdex> a golang module in npm!
17:01 < mscdex> zot: rightly so since there is no 64-bit type with javascript
17:01 < mscdex> zot: er 64-bit integer type
17:01 < zot> that was my latent fear :/
17:02 < thomas`-> Hey guys. Could someone please tell me if this is the right place to put a require("http") - http://codepad.org/iw9qunIt
17:02 < mscdex> zot: you'll have to use a bigint or bignum javascript library if you need to do arithmetic or something with the numbers
17:02 < mscdex> zot: if you just need to store them, you could just keep the raw bytes around
17:03 < zot> yeah, luckily atm i can always just use paired int32s, with no math.
17:03 < aandy> thomas`-: not sure what you're doing with the code there, but yes that is correct (placing requires at the top 99% of times)
17:03 < mscdex> thomas`-: looks fine
17:03 < mscdex> thomas`-: as far as require placement goes
17:04 < thomas`-> Cool, thanks for letting me know its ok
17:29 < matbee> If you want, could you vote for my nodejs project at the global startup battle? :) vote.groupnotes.ca :D
17:29 < matbee> we're against like 500 startups in Mexico, lol :P
17:32 < MI6> joyent/node: Trevor Norris v0.8 * bb867c0 : doc: Add lines about additonal uses of Buffer  That Buffers can be used w - http://git.io/06LycA
17:44 < bigeasy_> Hi all
17:45 < jamesflorentino> hi
17:45 < bigeasy_> Is there a way I can use Underscore.js as express view engine
17:45 < bigeasy_> Someone had posted this question on stack overflow and I'm trying to do the smaae
17:45 < bigeasy_> but noone had replied to that question
17:46 < jamesflorentino> bigeasy_: 
17:46 < bigeasy_> hi jamesflorentino
17:46 < jamesflorentino> bigeasy_:  using underscore's erb-like templating?
17:46 < jamesflorentino> e.g. <%= somevar %>
17:46 < bigeasy_> jamesflorentino:no
17:46 < bigeasy_> jamesflorentino: not just the style
17:47 < bigeasy_> jamesflorentino: but the actual js also
17:47 < jamesflorentino> ahh.. got it. No Idea :(
17:47 < bigeasy_> jamesflorentino: b/c I'm using other functions from the undersore
17:47 < bigeasy_> jamesflorentino: NP
17:47 < jamesflorentino> yeah.. you mean like integrate it with jade, right?
17:47 < bigeasy_> jamesflorentino: right
17:48 < bigeasy_> jamesflorentino: basically I'm writing a form generation app
17:48 < thomas`-> Would anyone be able to confirm for me that the http.request's res.on("data", function (chunk) {}); will only be fired once, in a situation where "Content-Length" header is set?
17:48 < bigeasy_> jamesflorentino: which is mostely client side but user can hit buton to download as .html file
17:48 < bigeasy_> jamesflorentino: for that I want to use the same underscore.js
17:49 < thomas`-> in the documenation it says: "Sending a 'Content-length' header will disable the default chunked encoding."
17:49 < thomas`-> so I assumed thats what it ment
17:50 < sosnon> i run "var mongo = require('mongodb-wrapper'); mydb = mongo.db('localhost', 27017, 'todo'); madb.collection('something');" and get "Error: database name must be a string"; it's not that, right?
17:51 < sosnon> any hints where i could potentially mess up passing a string as databaseName to the mongodb-wrapper?
17:51 < mscdex> thomas`-: no, you cannot assume that
17:51 < mscdex> thomas`-: chunked encoding just means the content length isn't known beforehand
17:52 < thomas`-> mscdex, I want all the response at once
17:52 < thomas`-> is that possible
17:52 < mscdex> thomas`-: however whether or not there is a content length, multiple data packets can still come in
17:52 < thomas`-> can I make it somehow wait and only return if it has all the data
17:52 < mscdex> thomas`-: you'll have to buffer it all then. if the data is text, then you can just do `req.setEncoding('utf8');` and then chunk will be a string
17:53 < mscdex> then it's just a matter of keeping a string variable around that you keep adding to
17:53 < mscdex> use that string variable in the 'end' event handler
17:53 < mscdex> er `res.setEncoding('utf8');`
17:54 < M788> mscdex, sorry my connection was reset
17:54 < M788> Ive got that line of code set "req.setEncoding('utf8')"
17:55 < M788> Do you know an example online to buffer the string to make sure I recieve it all?
18:00 < M788> http://tech.richardrodger.com/2011/03/28/node-js-%E2%80%93-dealing-with-submitted-http-request-data-when-you-have-to-make-a-database-call-first/ - this is what you mean I suppose
18:07 < gildean> anyone familiar with the ws module?
18:08 < trankil> gildean: of course.
18:08 < gildean> i'm having problems where the 'close' event on the client doesn't fire when for example i turn off wifi
18:08 < gildean> but it fires when i turn it back on
18:09 < gildean> like it doesn't recognize connection is lost completely
18:09 < gildean> when the device the socket is opened disappears
18:09 < bigeasy_> M788: try to see if this helps https://gist.github.com/4132406
18:10 < trankil> gildean: Sorry, you are too specific.
18:11 < M788> Thanks I'll read it bigeasy_ 
18:11 < gildean> trankil: yeah, it's a bit of a mindboggle, otherwise i would've figured it out already
18:12 < bigeasy_> M788: its the second part that pertains to you namely case '/formhandler'
18:13 < trankil> gildean: Yeah, can you be a little more vague?
18:13 < gildean> trankil: i described the problem just as it is
18:14 < M788> I think i understand it now cool not so difficult
18:14 < gildean> i have an open ws-client connection, when i turn off the network device the client uses, the close event doesn't fire
18:14 < gildean> neither does error
18:14 < gildean> but the close event fires when i turn the device back on
18:14 < gildean> and then it reconnects
18:16 < trankil> gildean: sorry, we can't help you.
18:16 < trankil> gildean: Try to reconnect you on this channel, and change your pseudo, it should work, maybe.
18:16 < bigeasy_> Any body know how to use underscore.js as view eingine in Express. I'm want to use underscore.js server side to generate static html page which I will serve up to the client. I'm not just looking for underscore.js "ERB" style formatting.
18:17 < gildean> trankil: what pseudo are you talking about?
18:18 < trankil> gildean: this pseudo "gildean" isnt compatible with the ws module, so the opened socket disappears.
18:19 < gildean> you lost me completely
18:20 < trankil> gildean: just leave this channel, now, please.
18:21 < gildean> trankil: ? my question is legit, this is what happens
18:21 < gildean> you can see i'm registered with nickserv, this my nick and i've been here for a while
18:21 < gildean> trankil: what is your problem?
18:22 < mmalecki> trankil is a troll, ignore him
18:22 < mmalecki> gildean: are you getting `error` events on the socket?
18:23 < gildean> mmalecki: no errors, it's like the ws-client doesn't notice that the socket is gone
18:23 < xaka> is there any way to specify library to link with without using "condition" block in node-gyp?
18:23 < gildean> but it realizes it when the device is back on and disconnected
18:23 < mmalecki> gildean: can you try looking if its net.Socket instance gets an error?
18:24 < gildean> mmalecki: didn't think about that, let me try it
18:25 < gildean> mmalecki: just as i said that, the error event was fired on the ws-connection
18:25 < gildean> but it seems like the timeout is something like 3 minutes or so
18:27 < gildean> mmalecki: no, actually it's the close event that fires, but the timeout is really long
18:27 < gildean> so it actually works, i was just too impatient
18:27 < mmalecki> heh
18:27 < gildean> but 3 minutes is too long of a timeout imo
18:28 < mmalecki> yeah, see if you can modify that
18:28 < gildean> most likely there's some method
18:30 < fire_> hi
18:30 < M788> bigeasy_, is it safe to call req.end() like I have on Line 9? -- http://codepad.org/ppWmbcSy
18:31 < M788> :(
18:35 < Guest58743> M788: I'm not a 100% on that, but I don't thing req.end is a function
18:35 < Guest58743> M788: please check the docs
18:36 < Guest58743> M788: in other words you should be fine without res.end
18:37 < Guest58743> M788: I made a mistake before, I meant to say "res.end" not "req.end"
18:39 < dylang> when using child_process.fork is it possible to wach for the child process to fail loading because of javascript compile errors?
18:40 < deoxxa> dylang: only in the same way that you'd do it from your shell
18:40 < dylang> deoxxa: like by watching the console output?
18:40 < wereHamster> is there an event fired when the http response has been sent to the client?
18:40 < deoxxa> actually, maybe the fork() stuff is weird
18:40 < deoxxa> let me double check this
18:41 < wereHamster> I need to clean up temporary files and other stuff
18:41 < deoxxa> yeah i'm pretty sure you just have to watch the std{err,out} dylang 
18:41 < deoxxa> wereHamster: notably, no
18:42 < wereHamster> deoxxa: do you have any idea what I can use instead of the event?
18:42 < deoxxa> let me check how i did it
18:42 < deoxxa> i remember it was really annoying
18:44 < deoxxa> wereHamster: i ended up overwriting the end method
18:44 < wereHamster> this is stupid!
18:44 < deoxxa> looks like the same thing this guy did: https://github.com/mikefrey/response-end
18:44 < deoxxa> and yeah, it's a bit silly
18:44 < substack> ugh fork()
18:44 < substack> fork() is such leaky magic
18:45 < substack> just use spawn()
18:45 < dylang> okay i don't have to use fork
18:45 < substack> fork() launches a child proc anyways
18:45 < dylang> but i want a message back when the server is accepting connections
18:45 < substack> and then it does a bunch of confusing magic to share the fds
18:46 < dylang> i'm trying to write a grunt replacement for nodemon. i almost have it working. it runs my server and restarts it when server code is changed. another grunt module reloads the web page - but i need that to wait until the server has finished reloading.
18:46 < substack> I kind of want to fork node and delete all the things I hate.
18:47 < substack> as a political statement
18:47 < dylang> substack: that's how we got America :)
18:47 < dylang> we're a fork of England
18:48 < substack> the cluster module would be the first to go
18:48 < dylang> oh great i'm using the cluster module too...
18:48 < deoxxa> too bad the resource management code was broken when they added the security patches dylang 
18:49 < spion> there. https://npmjs.org/package/npmsearch - search npmjs.org from the command line. sorted by (controllable) relevance/downloads mix
18:49 < deoxxa> neat!
18:49 < spion> hopefully my "application data / home" directory discovery works well.
18:50 < deoxxa> i hope "packge typo" was intentional
18:50 < spion> where?
18:50 < spion> :P
18:51 < deoxxa> https://github.com/spion/npmsearch/commit/b9461c01a6bfe051708dc04d39b2a02ecdd23a1b
18:51 < spion> haha, it wasn't damn.
18:52 < deoxxa> lol
18:52 < othiym23> substack: just out of curiosity, is your problem with cluster strictly limited to the FD magic, or do you dislike the idea of partitioning a homogenous load across a set of worker processes all doing the same thing on different cores?
18:52 < spion> seems like my keyboard started skipping letters.
18:52 < spion> ... or I am.
18:53 < spion> the code is pretty awful but it works. half of the way making it (it was already mostly functional) i needed a word stemming library so I used it to find one and I got "natural"
18:54 < substack> othiym23: I really dislike the fd magic, having been bitten by issues with it using stdin and stdin being unavailable/totally fucked
18:55 < substack> othiym23: plus using the cluster approach means you need to use a different kind of approach for scaling out on a single machine with lots of cores vs horizontally across multiple systems
18:55 < substack> I'd rather just build to scale horizontally in the first place and ignore scaling out on multiple cores
18:55 < substack> that's what node is all about
18:55 < substack> process concurrency with nodes talking to each other over the network
18:56 < substack> if you use cluster your application will be much harder to start distributing across multiple nodes over the network
18:56 < substack> plus cluster is downright WEIRD
18:56 < substack> seriously wacky
18:56 < substack> like this isMaster/isWorker noise
18:56 < substack> cluster is presenting an api like the fork() syscall
18:56 < substack> but it's just spawning a separate process
18:57 < othiym23> it makes it really easy to handle a single listener dispatching requests to multiple workers, which seems to me like a good strategy to avoid dealing with unnecessary remarshaling overhead
18:57 < substack> leading people falsly into thinking that under the hood node is calling fork()
18:57 < substack> and the programming model presented for using cluster pushes people to use the same script file for both the master and the workers
18:57 < substack> which is really strange
18:57 < substack> and leads to all manners of confusion
18:57 < othiym23> yeah, that part is weird, and I think a lot of people don't understand what it's doing as a result
18:58 < substack> who cares about marshalling overhead, just farm things out over the network
18:58 < substack> if you really need to scale, you'll need to scale out to multiple machines anyways
18:58 < othiym23> I worked with an architecture where everything was broken down into individual pieces, and all the JSON de/serialization overhead was very unkind to performance
18:58 < Warpten> Anyone knows of a way to have a class be exported through module.exports, and keep being the same between different files of my projet ? Some sort of singleton that would just be kept across various files that require it
18:58 < othiym23> I guess?
18:59 < othiym23> if you're running on a 64-core box you're going to lose a fair amount of CPU juice to dealing with passing data around
18:59 < substack> Warpten: module references are cached by require()
18:59 < SoulRaven> hello
18:59 < othiym23> and cluster lets you avoid that by connecting the client directly to the process that's going to be dealing with the data stream
18:59 < SoulRaven> i am just curious
19:00 < substack> Warpten: module.exports = {} // this ref will be the same
19:00 < substack> but really module.exports is already {} so you don't need to do anything
19:00 < substack> just assign things onto exports
19:00 < SoulRaven> when node will support: WeakMaps, Map, Object.observ, const, let
19:00 < substack> othiym23: yes but it's way too high level for core
19:00 < Warpten> I mean
19:00 < SoulRaven> http://addyosmani.com/blog/a-few-new-things-coming-to-javascript/
19:00 < othiym23> substack: that part I agree with, I was surprised that it had gotten added to core
19:01 < Warpten> i have main.js that queries the user some strings, stores it to that object. then another file has to write in that object
19:01 < Warpten> while data should be kept between files if possible, not sure im clear here
19:01 < substack> othiym23: I gave isaacs a lot of shit when it landed at least
19:01 < substack> I WARNED YOU ALL
19:02 < othiym23> haha
19:02 < substack> basically this: http://substack.net/images/modularity.png
19:02 < othiym23> all I know is that a lot of big companies are using it
19:04 < spion> haha, sim city.
19:05 < othiym23> I see a lot of what feels like premature optimization / premature architecture in general
19:05 < othiym23> "future-proofing" your architecture is generally just adding complexity
19:07 < jtm2> Sim City!
19:11 < substack> othiym23: worse, I've seen a big company use their own custom cluster module
19:11 < substack> instead of the one in core
19:11 < substack> that's is so much worse than the one in core which is itself bad
19:12 < dylang> i'm using cluster with Doodle or Die just because we mostly code late at night and deploy often, sometimes with buggy code. thanks to cluster if a worker crashes and burns there are a couple other workers more than happy to accept the connections while the crashed worker restarts. to the end users it feels like zero downtime except for the one user who killed a worker, and a browser reload fixes that.
19:12 < othiym23> writing your own vertical scaling strategies is like writing your own crypto: generally a bad idea
19:13 < othiym23> dylang: I don't think that cluster is *bad* (although your use case sounds like using it to paper over errors, rather than use it to scale), but I do think it's complex and commonly misunderstooed
19:14 < othiym23> and that a lot of people using it don't really understand the problem they're trying to solve
19:14 < othiym23> I feel the same way about a lot of people using connection pools with database drivers
19:15 < othiym23> people are way too quick to think they need a connection pool with node
19:16 < spion> imo the biggest surprise with cluster is that going beyond one process radically alters in-process assumptions
19:16 < SoulRaven> when node will support: WeakMaps, Map, Object.observ, const, let
19:17 < SoulRaven> http://addyosmani.com/blog/a-few-new-things-coming-to-javascript/
19:17 < spion> no more shared emitters (socket.io) or data
19:17 < othiym23> spion: yeah, I think the best way to present how it works would be to have the worker and master functionality factored out into separate modules that are required to make clearer where the boundaries lie
19:18 < othiym23> SoulRaven: some of those are already in newish builds of Node via the --v8-options flags
19:18 < SoulRaven> othiym23: and when will become stable relase?
19:18 < SoulRaven> and what are avalibile ?
19:19 < othiym23> SoulRaven: probably around when TC-39 finalizes a draft of ES6, so not for a while yet
19:19 < othiym23> SoulRaven: node --v8-options | grep harmony
19:20 < Kakera> dylang, doodle or die wants me to draw "TF2 Heavy raping an Anime schoolgirl" and hangs :(
19:21 < SoulRaven> othiym23: thx for the info
19:21 < dylang> Kakera: what do you mean by hangs?
19:21 < Kakera> the page becomes unresponsive
19:22 < dylang> Kakera: like the browser hangs and you can't draw? or you tried skipping/submiting and nothing happened?
19:22 < Kakera> dylang, the tab hangs, can't do anything in that tab
19:23 < dylang> Kakera: what browser/version/extensions are you using?
19:23 < Kakera> dylang, latest chrome
19:23 < Kakera> gonna try without extensions
19:24 < Kakera> dylang, same without any extensions
19:25 < othiym23> also :( for the drawing suggestion
19:25 < dylang> Kakera: crazy. we develop using latest chrome. it's just javascript/html/canvas on the client side. there's at least 64 people playing right now so i don't think it's widespread issue.
19:25 < Benvie> node --harmony
19:25 < Benvie> that's all you need
19:26 < Benvie> node --harmony myscript.js
19:26 < dylang> othiym23: i agree with that. we are introducing groups to help with that. the 4chan group has over 500 people already and the feature isn't official yet.
19:26 < Benvie> also for fun there's an ES6 virtual machine http://benvie.github.com/continuum
19:27 < othiym23> Benvie: sure, but SoulRaven wanted to know which Harmony bits were implemented in Node, and looking at the switches is the fastest way to find out
19:27 < Benvie> oh
19:27 < Benvie> yeah
19:28 < dylang> Kakera: my son just woke so i have to go. i can help later or email support@doodleordie.com.
19:39 < matbee> If you have time and facebook, could you vote for my nodejs project at the global startup battle? vote.groupnotes.ca :D fear not the ugly interface, my group could use it <3
19:40 < jrajav> matbee: What do you have to offer over the other startups?
19:45 < matbee> jrajav, Well, that's up to your needs. Our startup is focused on the teacher and student situation. Right now (in canada atleast) teachers are finding it hard to grade individual students in group projects.
19:45 < matbee> So we're trying to help the teacher and student along with their project research methods :)
19:45 < matbee> All in real-time and cross-browser
19:46 < matbee> Mind you, some of the other startups are absolutely amazing too. But we really, REALLY have market validation. We have many teachers onboard already.
19:46 < matbee> :)
19:48 < substack> matbee: I hated group projects in school because everybody in my group was usually useless
19:49 < substack> children are so terrible at everything
19:49 < substack> except I was pretty good at javascript in middle school
19:50 < substack> matbee: the biggest thing I hate is how the circumstances of the groupings are forced by the situation of the assignment
19:50 < substack> that is pretty much how companies work too
19:51 < substack> instead of natural pairings based on mutual shared interest like open source collaboration
19:52 < substack> matbee: one thing you can do online that you can't do in a regular classroom is collaborate remotely with your actual peers
19:53 < substack> instead of whoever happens to go to the same school and is approximately the same age
19:54 < phrearch> hi
19:54 < phrearch> i wonder if there is a tool in node.js which i can use to set traces like python's pdb
19:55 < substack> matbee: and then teachers spread out the useless children in order to normalize the outcomes
19:55 < substack> I hate that.
19:55 < phrearch> like put some trace in the code and rerun the application
19:55 < phrearch> node-inspector seems great, but its a bit too extensive
19:57 < othiym23> phrearch: you could try node-dtrace if you're willing to put some time into getting comfortable with dtrace
19:58 < matbee> substack, that's a possibility.
19:58 < matbee> substack, I didn't grow up with teachers like that though. but, usa might be different.
19:59 < niggler> USA! USA! wait a second, why aren't you guys stuffing yourself with the fowl of your choice?
19:59 < phrearch> othiym23: thanks! ill give it a try
19:59 < substack> matbee: I bet it's the same everywhere
19:59 < substack> it's not the teachers so much as it's the circumstances of the situation
19:59 < matbee> I just hated group projects because I was a loner
19:59 < matbee> haha
20:00 < niggler> matbee the 90/10 rule apply to people as well
20:01 < othiym23> has anybody done anything with doctorjs lately?
20:01 < othiym23> it would be awesome if tagbar (in vim) weren't a useless piece of shit with JavaScript
20:12 -!- mbalho changed the topic of #Node.js to: node.js is thankful for electricity and computer nerds
21:00 < nicholasf> anyone here use node-http-proxy?
21:05 < clocKwize_>  #vows.js
21:06 < deoxxa> nicholasf: yessss
21:06 < nicholasf> hey deoxxa
21:06 < clocKwize_> hi
21:07 < clocKwize_> so, I'm playing with vows.js - I want to pass something in to my topic (basically, an object which my class can get/set stuff on, which in code will be localStorage and in my test will be an empty object - how do I access this from inside my assets? so I can asset the class set something on it
21:09 < bigeasy_> How can I use underscore.js as view engine in Express
21:09 < runvnc> happy thanksgiving
21:10 < runvnc> does underscore provide a templating system bigeasy?
21:10 < clocKwize_> _ does have templating
21:10 < clocKwize_> also happy thanksgiving
21:10 < clocKwize_> I'm alone coding
21:10 < clocKwize_> in my pants
21:10 < runvnc> maybe you would want to look at the code for the existing view engines and copy that patterns in them
21:11 < runvnc> copy the patterns
21:11 < bigeasy_> Good for you man. Happy Turkey to you also
21:12 < bigeasy_> runvnc: by patterns do you mean the ERB style formatting? If so then that is not the only reason why I need to use underscore
21:13 < bigeasy_> runvnc: I basically want to generate a copy of clientside html (Which is generated by underscore) on server side so that I can serve that html as static page
21:13 < deoxxa> bigeasy_: see the "template engine integration" part of https://github.com/visionmedia/express/wiki/Migrating-from-2.x-to-3.x
21:13 < bigeasy_> I want to use underscore on serverside for this b/c I was thinking that could lead to a single code base
21:15 < runvnc> ok
21:15 < runvnc> I just meant patterns in the most general sense
21:15 < runvnc> your idea sounds like a good approach
21:16 < runvnc> one way I cheated to solve that problem before was to use phantomjs to run a browser on the server and so I could use the existing client-side code to generate static pages
21:16 < runvnc> but an underscore view engine sounds cool
21:16 < deoxxa> lol phantomjs, that sounds like overkill
21:16 < bigeasy_> deoxxa: thanks a lot for pointing this out. I think I found something here also https://github.com/haraldrudell/uinexpress
21:17 < runvnc> well, it works, and it isn't particularly lightweight, but it was less than like 50 lines of code
21:17 < deoxxa> bigeasy_: ooh! that'll do it :)
21:17 < runvnc> also works with interactive guis that download data after the page loads
21:17 < bigeasy_> yeah I'm gonna start on it now
21:17 < bigeasy_> Thanks guys
21:18 < bigeasy_> yeah I started doing this with EJS and underscore
21:18 < bigeasy_> then found the a lot of code was repetitive
21:18 < bigeasy_> so I thought maybe there was a better way of doing this
21:18 < mscdex> anyone here use Angular.js?
21:18 < bigeasy_> the code that generates the form is client-side form generation tool
21:20 < runvnc> anyway does anyone know of a plugin system that is 'plug-and-play' with a front-end so that you can just install plugins and the html ui and node.js backend both get new features?
21:20 < runvnc> sort of like wordpress or joomla or django or whatever
21:22 < deoxxa> runvnc: i'm not aware of anything like that presently, but the next version of apostrophe (http://apostrophenow.org/) will apparently be built on node. i wouldn't hold out too much hope for it gaining a lot of traction though in terms of "everything just magically works with it", because of the way something like that needs to be built.
21:23 < runvnc> thanks I will look into that
21:23 < deoxxa> runvnc: basically something that has "plugins" is no longer a module, but an application in its own right. i think express is about as plugin-ish as you can get in node, while not scaring people away by locking them into some specific architecture.
21:24 < deoxxa> runvnc: i mean, take a look at how meteor turned out. they promoted it as being something that operates with node.js at the start, but then ended up having to completely change their strategy when it came to light that "wait, no, this doesn't work with anything that's not designed specifically for it".
21:25 < runvnc> well
21:25 < runvnc> yeah you have to have some level of coherence and prespecified architecture
21:25 < runvnc> but
21:26 < runvnc> look at all of those systems I mentioned
21:26 < runvnc> and how successful and useful they are
21:26 < runvnc> I know it is easy to scare people away or whatever
21:26 < runvnc> I mean
21:26 < deoxxa> sure, but those are very different environments
21:26 < deoxxa> each of those systems has everything built in
21:26 < runvnc> I built a system like what I am talking about
21:26 < deoxxa> their own ORM, templating, etc etc
21:26 < runvnc> which my own architecture and supporting plug and play
21:26 < runvnc> however
21:26 < runvnc> it is all written in coffeescript, and a lot of it basically sucks
21:27 < deoxxa> that's another problem
21:27 < runvnc> and the decisions I made, I don't know that people will agree with them
21:27 < runvnc> BUT
21:27 < deoxxa> things like that usually do suck for quite a long time
21:27 < runvnc> to come up with some kind of minimal architecture to allow for plug and play
21:27 < runvnc> I believe has a huge benefit
21:28 < runvnc> when you say that those were very different environments
21:28 < runvnc> how do you mean?
21:28 < runvnc> do you mean to say that plug and play cms/plugin systems somehow don't apply to node.js or node.js developers?
21:28 < deoxxa> they're environments and communities that don't put so much emphasis on reusability
21:28 < runvnc> well
21:28 < runvnc> not yet
21:29 < deoxxa> i can't comment on django as i haven't done anything with it, but wordpress and joomla are both "batteries included" and "all the screws are those triangle ones with a rod in the middle" deals.
21:29 < runvnc> so I guess this system doesnt exist for node.js yet.. but I am fairly sure a system like it could become popular
21:29 < deoxxa> that is to say that it's easy to get started and get running, then a thousands years of pain migrating off them when you realise your mistakes
21:29 < deoxxa> s/thousands/thousand/
21:30 < runvnc> ok 
21:30 < runvnc> one question deoxxa
21:30 < runvnc> how much programming do you think should be involved in order to install a website with a certain theme?
21:30 < runvnc> how much programming do you think should be involved to add a contact page to that website with some specific fields
21:30 < runvnc> because I think
21:31 < deoxxa> preferably minimal
21:31 < deoxxa> however
21:31 < runvnc> that since so many tens or hundreds of thousands of these things are implemented
21:31 < deoxxa> how much of the work involved making that happen should be locked into one very specific platform
21:31 < runvnc> that you should have a ui where you can say 'install this, ok, click, install that, ok thanks I am done'
21:31 < runvnc> well thats why I came on here
21:31 < runvnc> because I started my own platform
21:31 < runvnc> actually three times
21:31 < runvnc> I started
21:32 < deoxxa> what i think really needs to happen for something like that to work well (and be sustainable), is that there be 3 or 4 different implementations of that idea, all interoperable
21:32 < runvnc> what I am trying to figure out is the minimal/most flexible setup that I can do with the amount of time I have
21:32 < runvnc> that other people can plug in to
21:32 < deoxxa> basically so you have a require("something") style interface that has well defined functionality and minimal internal hacks
21:32 < runvnc> ok thats an interesting idea
21:32 < runvnc> wait
21:32 < runvnc> require?
21:32 < deoxxa> not specifically
21:32 < runvnc> thats code
21:33 < deoxxa> but i mean it needs to be as simple as that
21:33 < runvnc> I want to be able to build a front end on this
21:33 < runvnc> so that I can just click the name of the plugin
21:33 < runvnc> because
21:33 < runvnc> hundreds of thousands of people will want a website
21:33 < runvnc> all of them want a contact form
21:33 < runvnc> why should they all need to hire programmers to add a field to their contact form
21:34 < deoxxa> i'm talking about the people writing those plugins
21:34 < runvnc> oh ok right
21:34 < deoxxa> there's a couple of different reasons i personally would avoid a project like that
21:34 < deoxxa> 1) high bus factor
21:34 < deoxxa> 2) high barrier for migration
21:35 < runvnc> meaning if you want to move to a different system, you will have to rewrite a lot of code
21:35 < deoxxa> exactly
21:35 < runvnc> seems like a bit of an early optimisation to me
21:36 < runvnc> if you don't have to write any code in the beginning
21:36 < runvnc> doesnt that factor in?
21:36 < deoxxa> for an end-user, yes
21:36 < runvnc> I think the problem is that programmers like writing code
21:36 < runvnc> ultimately
21:36 < deoxxa> but are you planning on writing every single plugin for it?
21:36 < runvnc> this comes down to the definition of what programming is
21:36 < runvnc> because the more useful this system is
21:36 < runvnc> the less attractive it is to developers
21:36 < runvnc> since they won't have much code to write
21:37 < runvnc> thus detracting from their very identity
21:37 < deoxxa> are you (or the "project") going to personally curate and produce every piece of functionality?
21:37 < runvnc> of course not
21:37 < runvnc> thats the idea of the plugin system
21:37 < runvnc> otherwise
21:37 < runvnc> I could just have one github project
21:37 < runvnc> everything perfectly cohesive
21:37 < runvnc> or whatever
21:38 < deoxxa> and nobody is going to write plugins unless they feel secure in their not having to port them in 6 months time when the project stalls because you fell of a cliff
21:38 < runvnc> well, luckily I stay the hell away from cliffs
21:38 < deoxxa> this is why i think there needs to be a couple of competing implementations
21:38 < runvnc> I hardly ever even go out of my condo
21:38 < runvnc> that is a good idea deoxxa
21:39 < runvnc> competing implementations of what exactly
21:39 < deoxxa> this architecture you're suggesting
21:39 < nathan7> I'm curious what runvnc is actually trying to implement
21:39 < runvnc> what standard or system would be so inspiring or flexible that we would get competing implementations
21:39 < nathan7> contact forms?
21:39 < runvnc> nathan7
21:39 < nathan7> There's like 10 different backend storage thingies I could use
21:39 < runvnc> take all of the plug and play content management or application systems in existence
21:39 < runvnc> look at all of the types of features that are available in the plugins for those systems
21:39 < nathan7> ranging from flat files to Mongo/Couch to bloody SQL
21:40 < runvnc> that is what I would like to be available, but with a node.js backend
21:40 < nathan7> there are at least 20 different templating languages
21:40 < runvnc> right nathan there are a lot of ways to skin a cat
21:40 < nathan7> Exactly.
21:41 < runvnc> I would like this to be as flexible as possible.  however, providing a well-honed cat skinning tool in the bag wouldn't necessarily be so horrible
21:41 < nathan7> mhm
21:41 < runvnc> sorry stupid way of speaking.  I actually love cats
21:41 < runvnc> don't skin them
21:41  * deoxxa approves
21:42 < deoxxa> skinning cats is illegal
21:42 < deoxxa> (i hope)
21:48 < nathan7> deoxxa, runvnc: without a skin they can transfer their body heat to me more efficiently
21:48 < deoxxa> nuuuu
21:48 < deoxxa> hidoiiii
21:48 < nathan7> whaaaa
21:49 < nathan7> my projects are too random
21:49 < deoxxa> http://translate.google.com/#ja/en/%E3%81%B2%E3%81%A9%E3%81%84
21:58 < runvnc> they have cats without FUR at least.  http://www.youtube.com/watch?v=19Ha0D-iuVk   http://www.youtube.com/watch?v=n0BdAeZi6bc
22:00 < clocKwize_> this node is so confusing
22:01 < clocKwize_> https://gist.github.com/4133076 < so I have this, but when I do VersionDetection = require "version_detechtion", VersionDetection == {}
22:02 < clocKwize_> what am I doing wrong?
22:02 < mscdex> ahhh coffeescript! my eyes!
22:03 < clocKwize_> I just like how it makes functions less bulky (as obviously they are used copiously)
22:03 < nathan7> clocKwize_: you're doing variable assignment
22:03 < clocKwize_> instead of what?
22:04 < nathan7> clocKwize_: modifying the object exported
22:04 < nathan7> clocKwize_: module.exports = exports = {}
22:04 < nathan7> clocKwize_: if you do exports = something, exports != module.exports
22:04 < matbee> mscdex, LOL. I'm glad I'm not alone.
22:04 < nathan7> clocKwize_: You're making a local variable
22:04 < matbee> I see coffeescript and my brain yells at me
22:04  * nathan7 nods
22:05 < clocKwize_> nathan7: hmm, thats annoying, so I should always do module.exports?
22:05 < nathan7> clocKwize_: if you're exporting an entire object, yes
22:05 < clocKwize_> so if I do exports.x = VersionDetection it'll work
22:05 < nathan7> yes
22:05 < nathan7> I tend to do like var exports = module.exports = myExport;
22:05 < clocKwize_> lame ;p
22:05 < nathan7> so I can do exports.blah
22:05 < nathan7> clocKwize_: no, logical
22:05 < clocKwize_> logical only if you understand the internals
22:06 < nathan7> >> var a = {ding:1}; a=1; a.ding;
22:06 < purr> nathan7: undefined
22:06 < nathan7> clocKwize_: there are no internals
22:06 < nathan7> clocKwize_: this is plain JS
22:06 < nathan7> This is normal variable assignment
22:06 < clocKwize_> ok, if you understand that exports is a global, but setting it makes it a local, instead of setting the value of the global on module, which is the context which the code is executed in
22:07 < clocKwize_> or whatever
22:07 < mscdex> it's not global
22:07 < mscdex> every module is executed in a scope that's passed in some arguments
22:07 < mscdex> `module` and `exports` being two of them
22:07 < mscdex> `module.exports === exports`
22:08 < mscdex> so if you set `exports` to something else, the reference is gone
22:08 < clocKwize_> hm
22:13 < clocKwize_> next question, you notice in my gist I reference chrome.app.getVersion() - how can I mock this in node
22:16 < clocKwize_> I guess I could pass it in to the constructor, but its a bit crap?
22:54 -!- mode/#node.js [+o piscisaureus_] by ChanServ
22:59 < cpg> hi, what's a sane, recommende, reliable, nice way to deploy node in production in a small team environment?
22:59 < cpg> fwiw, we are used to using capistrano with rails, and it's fairly good
23:00 < cpg> looking for recommendation/advice
23:09 < baudehlo> deploy as in something like Chef?
23:10 <@konobi> cpg: you want dev/test/staging/production setups and then a "deploy" button?
23:30 < runvnc> re: plug and play node addons somewhat in the style of wordpress plugins, I am thinking of starting with one of the node modules for plugins and adding in a type of provider layer
23:31 < runvnc> I think one of the plugin modules in npm is setup already to work with browserify
23:31 < cpg> konobi: dev/test/production (staging is optional), so yes
23:31 < runvnc> what do you guys think of that idea
23:32 < cpg> baudehlo: chef is more for configuration (we use puppet)
23:32 <@konobi> 95% of what crapistrano does is config =0)
23:32 < cpg> deploy allows for migrations, version/release management in production, potentially rolling back, etc.
23:34 < cpg> konobi: no offense, but i think you must be confused. you could use capistrano for system/env configuration, but that's not what's really for or good at. we're looking for someting to not have to rely on manual deploys of node apps
23:34 < cpg> we want to start small
23:35 <@konobi> migrations are going to be data source specific, since it's not activerecord, version/release management is easy enough... atomic move of folders and rollback is changing a port number in a proxy config
23:35 <@konobi> cpg: oh, i'm not confused, i know what capistrano is
23:35 < cpg> ok, good description of the issues. is there a tool to manage those?
23:36 <@konobi> cpg: capistrano
23:36 <@konobi> at least i've heard of folks using it
23:36 <@konobi> but as to specifics no idea
23:36 < cpg> konobi: i'm not going to argue about what you know. i use and am a contributor to capistrano
23:36 <@konobi> cpg: there's also nodejitsu
23:36  * cpg goes looking
23:37 < cpg> i see that is a service
23:37 < cpg> got it
23:37 <@konobi> cpg: i meant that some folks use capistrano to deploy node apps
23:38 < cpg> i see. i can try to give that a shot. i was thinking there might be something more specific to node than capistrano
23:38 <@konobi> cpg: check npmjs.org
23:41 < cliffano> cpg: deployment often depends on the architecture of your application...  there are tools written in node.js, but i don't think there's anything specific to node.js app since various apps do things differently
23:41 < cpg> this one looks promising https://npmjs.org/package/deploy-to
23:41 < cpg> not widely used
23:41 < Spraakwaterval> 
23:41 < cpg> cliffano: kk
23:44 < owen1> is there an android channel?
--- Log closed Fri Nov 23 00:00:57 2012
