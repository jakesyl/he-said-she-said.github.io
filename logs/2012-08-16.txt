--- Log opened Thu Aug 16 00:00:28 2012
00:01 < timeturner> hola
00:01 < timeturner> bonjour
00:01 < timeturner> halo
00:02 < tprice> yello!
00:02 < etcetera> is there a DI tool for node?
00:04 < Spion_> you don't need dependency injection in dynamic languages
00:04 < bradleymeck> etcetera: DI? like broadway?
00:04 < etcetera> Spion_: wat?
00:04 < bradleymeck> Spion_ you want it for extensibility
00:05 < Spion_> no you don't
00:05 < Spion_> you get that for free with JS
00:05 < bradleymeck> apps that use plugins without DI make me cry
00:05 < etcetera> splain.
00:05 < bradleymeck> everytime you wrap a function and replace it with your own a zucchini dies
00:06 < etcetera> wat
00:06 < bradleymeck> etcetera: what did you mean by DI?
00:06 < etcetera> I want to specify a function type and argument inside module.exports and have it be resolved.
00:07 < bradleymeck> define DI, what is it standing for. and define "specify a function type and argument"
00:09 < Spion_> in JS, dependency injection amounts to "passing a different object to a function/module" its a real hack, I admit, but replacing 'require' allows you to do pretty much anything.
00:10 < bradleymeck> Spion_: we may be talking different kinds of dep injection, im talking less in the Java sense of passing an object to X and more to letting X take over hooks/add features to Y
00:12 < Spion_> i meant dependency injection for unit testing :P
00:12 < Spion_> want a fake db? no problem, just make your fake db object implements all your  real db object's functions
00:12 < Spion_> if it looks like a duck and walks like a duck, it is a duck.
00:14 < timeturner> Spion_++
00:20 < freewil> is there anyway to do a conditional top-level tag and have the following tags nested underneath it? http://pastebin.com/8LbKR4i8
00:20 < freewil> ... in jade
00:24 < timeturner> blocks
00:24 < timeturner> freewil^
00:24 < ryanrolds_w_> freewil: This isn't all that optimal, but you could put in a partial. Check in #express, a lot of people use Jade in there and if you need a definitive answer, try and catch TJ.
00:25 < freewil> timeturner, what is a block?
00:25 < ryanrolds_w_> Yeah, blocks are better way to do it.
00:25 < ryanrolds_w_> freewil: https://github.com/visionmedia/jade/#block-append--prepend
00:26 < timeturner> mixin might work too though
00:26 < timeturner> but blocks are better in this case
00:26 < timeturner> actually mixin might be better
00:26 < timeturner> don't know lol
00:29 < freewil> meh
00:29 < freewil> im just going to pass in the variable attribute value to the template
00:29 < deoxxa> yeah, using the template system properly is for IDIOTS
00:30 < freewil> thanks for the help timeturner and ryanrolds_w_ 
00:33 < LordThumper> How do you make a HEAD request with node.js?
00:34 < deoxxa> LordThumper: http.request({method: "HEAD", ...})
00:34 < deoxxa> if only there was documentation for that api
00:35 < LordThumper> oh I admit i haven't googled it yet
00:35 < deoxxa> http://nodejs.org/docs/latest/api/all.html#all_http_request_options_callback
00:35 < deoxxa> make friends with this page
00:35 < deoxxa> keep it open
00:35 < LordThumper> http://nodejs.org/api/index.html?
00:36 < LordThumper> ok thanks 
00:36 < LordThumper> I am in love with node.js
00:36 < LordThumper> Had some logic that I wanted to move from client-side to server-side
00:36 < LordThumper> And I literally had to copy+paste
00:36 < LordThumper> :)
00:44 < runvnc> hello. anyone used node-mysql before? this app opens a single connection (client, its mysql 0.9.5) and then leaves it open
00:44 < runvnc> is it possible that after several hours the connection could just go away
00:44 < runvnc> or close or something
00:45 < runvnc> I am thinking maybe I should just make  a setinterval that ends() the client and then creates a new one every so often
00:47 < owen1> what is the name of the feature in node.js that lets you create lightweight threads? (it was canceled recently)
00:48 < owen1> or lightweight processes
00:49 < tmpvar> isolates
00:49 < owen1> tmpvar: oh. thanks
00:50 <@maxogden> process spawn time was too durned big
00:55 < LordThumper> So what makes node.js so fast for multi-user applications?
00:58 < dominictarr> LordThumper, it's easy to do things the right way.
01:01 < owen1> i have a reporting system that sends me many many udp packets. i want to capture them and save them in a db. is threads_a_gogo good solution for that or do i over complicated things?
01:02 < owen1> (it's LWES information that i recieve)
01:02 < owen1> Light Weight Event System
01:03 < bradleymeck> owen1, if you are just piping them around you dont need threads at all
01:04 < owen1> bradleymeck: interesting. just pipe them into my db?
01:04 < bradleymeck> owen1 yep
01:04 < owen1> bradleymeck: is it done with 'net' module?
01:04 < runvnc> has anyone used node-mysql before and had a problem with connections timing out or anything
01:05 < bradleymeck> owen1, just setup a udp server via bind and listen require('dgram') and then however you are sending info to your db (find a db adapter) just send it using that
01:06 < bradleymeck> runvnc your mysql server would be responsible for the timeouts generally, but you could just reconnect if you get an event see https://github.com/felixge/node-mysql/#error-handling
01:07 < owen1> bradleymeck: http://nodejs.org/api/dgram.html#dgram_dgram_bind_port_address ?
01:08 < runvnc> ok thanks maybe I will add a check for an error event. or maybe just keep closing and reconnecting because this is the old version and someone said there was a problem with a query taking a long time to time outt
01:08 < bradleymeck> owen1 yes
01:08 < bradleymeck> runvnc connection pools would be better if you are doing multiple
01:09 < runvnc> I haven't been able to find an explanation for creating a connection pool with node-mysql
01:09 < owen1> bradleymeck: sweet. what if i need to scale? will i be able to do that with cluster? or do i have to use single server since i deal with udp?
01:10 < runvnc> is that a feature that is built in or are you just generally suggesting the idea of a connection pool that I would implement
01:10 < bradleymeck> owen1 ive never scaled udp but i would presume cluster could handle it
01:10 < bradleymeck> runvnc im suggesting the idea
01:11 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
01:13 < owen1> bradleymeck: thanks
01:14 < myndzi> i'm trying to make express (3.0) use a custom template engine; everything on the internet seems to make it look simple but my requests are just stalling
01:14 < myndzi> anybody know about this?L
01:21 < LordThumper> Are these options enough for an http.request:
01:22 < LordThumper> { url: url.parse("www.google.com"), method: "GET" }
01:22 < LordThumper> I am getting no exception
01:22 < LordThumper> And the code within the anonymous function passed to http.request is not run
01:24 < wltsmrz> Did you req.end() ?
01:24 < wltsmrz> var req = http.request(options, function(){}); req.end();
01:24 <@maxogden> isaacs: not bad reasoning https://github.com/volojs/volo/wiki/Prior-Art
01:25 < LordThumper> No I did not actually
01:25 < LordThumper> Thanks alot
01:25 <@maxogden> protip: npm install request
01:26 < LordThumper> What does that module do?
01:26 < bradleymeck> think of it as super curl
01:26 < wltsmrz> It's for simplifying HTTP requests.
01:26 < myndzi> ugh, why is express's documentation so spare
01:27 < bradleymeck> soo much of it is Connect is the probable reason
01:27 < LordThumper> ok going to try it out :)
01:27 < wltsmrz> Chances are at this point that it's overkill.
01:27 < LordThumper> tried to install jquery earlier with npm and it failed, maybe I didnt run as admin
01:27 < wltsmrz> In fact you shouldn't even need 'GET' in your options object. That's default (I think).
01:28 < wltsmrz> I mean, that's pretty simple as it is.
01:28 < wltsmrz> But yeah, you don't have to manually req.end(); with request :)
01:28 < LordThumper> ah yes, the method I need is "HEAD", but tried "GET" when it didnt work
01:28 < wltsmrz> I see.
01:28 < LordThumper> But yeah, req.end() did the trick, thanks again :)
01:29 < LordThumper> Hehe, I am creating a chat app, is this the app everyone does first with node? :)
01:29 < wltsmrz> Either that or scraping
01:29 < myndzi> maybe i should
01:30 < myndzi> i hate having to read source code to figure out how stuff works
01:30 < myndzi> that's the only complaint i have with node so far
01:30 < LordThumper> hehe scraping is cool too
01:30 < LordThumper> might try to do something with jQuery selectors later
01:30 < bradleymeck> myndzi why do you read node's source code, is the api doc not specific enough on something?
01:31 < myndzi> mostly modules
01:31 < LordThumper> haven't ever used xPath...
01:31 < myndzi> but sometimes node's code too
01:32 < myndzi> it's probably more like there are concepts that are familiar to people who've been doing web development but when i encounter the specific instances of them in node it's my first time and i'm like wtf is going on?
01:32 < myndzi> i can't interpret errors because i can't figure out what stuff is supposed to be doing
01:33 < pringlescan> https://github.com/jmealo/node-phoney I genuinely don't want people to use my module for evil, do you think I send a strong enough message?
01:37 < wltsmrz> I don't see any code, pringlescan 
01:37 < wltsmrz> Oh, in response to your question, I suppose so.
01:38 < wltsmrz> Not that it would be effective. But yeah.
01:38 < pringlescan> wlstmrz, I'm packaging it shortly, I'm just questioning if I should release it because I think it has less legit uses than legit ones.
01:38 < wltsmrz> Understood :thumbsup:
01:39 < etcetera> is anyone using nohm?
01:39 < pringlescan> wltsmrz, thanks for checking it out, I'm back to work. i have 200,000 things to do before tomorrow at midnight. 
01:40 < wltsmrz> Bon voyage
01:47 < airportyh> Hello all, I am running into a strange issue with child processes on windows, trying to isolate it https://gist.github.com/3365454
01:57 < etcetera> are there any good modularlized node.js apps making use of redis?
02:00 <@isaacs> maxogden: "This biggest difference is volo's desire to use GitHub as the default code registry.
02:01 <@isaacs> maxogden: I believe that this is an error.
02:01 <@isaacs> maxogden: a desire to use git as a code transport mechanism is not terrible.
02:01 <@isaacs> maxogden: but a package manager should not be tied to a single corporate entity.
02:02 < chilts> indeed, should allow for any git, bzr, svn, tarfiles, etc mechanism
02:02 < chilts> etc etc
02:07 <@isaacs> and in fact, for a tool designed for managing web assets, http seems like the ideal transport mechanism
02:07 <@maxogden> isaacs: i dont buy the 'single corporate entity' for any corporation built on a decentralized protocol
02:07 <@isaacs> maxogden: i didn't say "desire to use git as the protocol" is a mistake.
02:07 <@maxogden> me niether
02:07 <@isaacs> maxogden: i said, "desire to use github as the registry" is a mistake.
02:07 <@maxogden> i said 'decentralized protocols are awesome'
02:07 <@maxogden> :)
02:07 <@isaacs> sure
02:08 <@isaacs> but they're not using anything decentralized about it
02:08 <@isaacs> they're using github -- ie, they'recentralizing their usage of the protocol
02:08 <@isaacs> it's in fact *less* "decentralized" than npm, since you can spin up a registry and have it replicate out of the main one
02:09 <@maxogden> easier said than done
02:09 <@isaacs> but i suppose couchdb counts as an awesome decentralized protocol :)
02:09 <@isaacs> true, it is
02:09 <@maxogden> so its all shades of grey but i think as long as you can replicate a registry easily it should defeat the vendor lock-in argument
02:09 <@isaacs> but if they wanted to make it decentralized, then they should not be relying on some other entity to provide login and hosting
02:10 <@isaacs> maxogden: right
02:10 <@isaacs> it's a lot easier to replicate npm's registry than github's
02:10 <@isaacs> you can replicate indidual projects easily, of course.
02:10 <@maxogden> i dunno, git checkout is pretty easy to type
02:10 <@isaacs> maxogden: no, it's not that.
02:10 <@isaacs> maxogden: it's the login and ownership information
02:11 <@isaacs> if github is your registry, you're using github for auth and for hosting and for managing ownership and so on
02:11 <@maxogden> so youre saying when you oauth in to volo or whatever they probably wont have a way to replicate that metadata/
02:11 <@isaacs> i'm saying, if github is down, you're just as screwed with volo as you are with npm if the npm registry is down.
02:11 <@maxogden> i dont buy that argument
02:11 <@isaacs> it's not in any relevant sense decentralized.
02:11 <@maxogden> decentralization isnt about five nine guarantees
02:12 <@isaacs> unless you can just git push to publish to any git repo, and git pull to install from any git repo, and then what is your package manager even there for?
02:12 <@isaacs> then you're just using git to manage deps (which is a fine way to do it, of course)
02:12 < LordThumper> Is there a way to make an HTTP Request synchronously?
02:12 < AAA_awright> I think tj was making his own resource/package manager based on GitHub
02:12 <@isaacs> LordThumper: not in node, no
02:13 < AAA_awright> I like the idea of Git, but not "GitHub as database"
02:13 <@isaacs> AAA_awright: you mean his bash thingie?
02:13 < LordThumper> Ok, how do I attach an "end" eventhandler?
02:13 < AAA_awright> isaacs: Yes, iirc?
02:13 < LordThumper> I have http.request(resource, function (res) { });
02:13 <@isaacs> LordThumper: http://nodejs.org/api/http.html#http_http_get_options_callback
02:14 <@maxogden> isaacs: i would like to see what happens if npm got totally rewritten from scratch on top of the github api by someone with good decentralized taste
02:14 <@isaacs> LordThumper: res.on('end', doStuff)
02:14 < LordThumper> Awesome, thanks 
02:14 < nsh> where's the configure script?
02:14 < nsh> nm, i'm stupid
02:14 < nsh> downloaded wrong tarball
02:14 <@isaacs> maxogden: so, i did actually explore using git as the transport and registry in npm
02:15 <@isaacs> maxogden: also, there's homebrew, which uses git, but the package itself is the effectively the registry, and it's one git project
02:15 <@maxogden> i mean you would have to write your own equivalent of a submodule that isnt terrible
02:15 < LordThumper> Coding async is harder than I thought
02:15 <@maxogden> but i think it could be done elegantly
02:15 <@isaacs> maxogden: my initial goal with npm was to try to push the need for authority as far down as possible.
02:16 < AAA_awright> maxogden: https://github.com/Acubed/git-node
02:16 <@maxogden> hah
02:16 <@isaacs> maxogden: the tricky thing in a decentralized PM setup is ownership and identity
02:16 <@isaacs> maxogden: ie, when i do `pm install foo`, what is that?
02:17 <@isaacs> maxogden: who has the right to make that into something else?
02:17 < tmpvar> whoever pays the most bitcoins
02:17 <@isaacs> and how do you establish that you are the one with the rights to make it into something else?
02:17 <@isaacs> tmpvar: lolz
02:17 < AAA_awright> That's a perfectly valid solution...
02:17 <@maxogden> isaacs: thats just an ACL there are lots of those to use
02:17 <@isaacs> maxogden: right, so, who can change the ACLs?
02:17 <@isaacs> and where do those live?
02:17 < AAA_awright> Probably not a good allocative mechanism because most names have zero value, until they're registered or want to be used by someone
02:18 <@isaacs> i'm not saying that using github is necessarily terrible; but it's also not obviously better, and it's a question that ought to be considered carefully and thoroughly
02:18 <@maxogden> isaacs: you can fit billions of keys in a single database nowadays and there will never be a billion npm modules
02:18  * maxogden eats his own words in 2042
02:18 <@isaacs> hahah
02:19 < AAA_awright> I don't think I want to see what convoluted module names people have to come up with, if the name system isn't changed
02:19 < AAA_awright> require('Acubeds-2012-bloom-filter-revised-3');
02:20 < tmpvar> oh, well that is solvable by reverse domains.. e.g. require('com.tmpvar.monkeywrench')
02:20 <@isaacs> maxogden: actually, my ideal system for package registration would be something like dns
02:20 <@maxogden> we should have a npm 2.0 drunken whiteboarding session
02:20 < AAA_awright> Create a SRV record for Node.js packages
02:20 <@isaacs> maxogden: npm's registry is kind of not great.  ironically, i think eventually iriscouch will build something at least as good as I'd ever imagine
02:20 <@maxogden> where i will get a sugar high off mexican coke
02:20 <@isaacs> maxogden: lol
02:21 <@isaacs> maxogden: not columbian?
02:21 <@isaacs> maxogden: so, what i'd fantasize about, roughly, is that you have some number of N registries distributed around the world.
02:22 < AAA_awright> No, really... _npm._tcp.bloomfilter.node.bzfx.net -> require('bloomfilter.node.bzfx.net')
02:22 <@isaacs> AAA_awright: yep.
02:22 < LordThumper> Think this is enough node for tonight, I need to learn to write async code first. I need some data from an HTTP response, and I have no idea how to wait for that
02:22 <@maxogden> LordThumper: callbackhell.com and npm install request
02:22 <@isaacs> LordThumper: one sec..
02:24 <@isaacs> LordThumper: http.get('http://example.com', function (req) { console.error('%d %j', res.statusCode, res.headers); var content = []; res.on('data', content.push.bind(content)); res.on('end', function () { content = Buffer.concat(content); console.log(content.toString()) }) })
02:24 < AAA_awright> maxogden: What I'm working on is a pure-Git solution, use commit Ids to identify packages to install.
02:24 <@isaacs> argg!!
02:24 <@isaacs> typo!
02:24 < AAA_awright> And then systems like npm would be search engines effectively
02:24 <@isaacs> LordThumper: http.get('http://example.com', function (res) { console.error('%d %j', res.statusCode, res.headers); var content = []; res.on('data', content.push.bind(content)); res.on('end', function () { content = Buffer.concat(content); console.log(content.toString()) }) })
02:26 <@isaacs> so!
02:26 < theBrettman> someone help me understand the difference between the two ways of writing this code cuz I don't get it. it looks the same to me. what's different? http://www.nodebeginner.org/#how-function-passing-makes-our-http-server-work
02:26 <@isaacs> AAA_awright: npm does support that.
02:26 < LordThumper> isaacs: Ok I'll try to make sense from that code :) Thanks :)
02:26 <@isaacs> AAA_awright: it's good for production apps, but it's a pita for libraries
02:26 <@isaacs> LordThumper: that site maxogden said is good, too.  http://callbackhell.com
02:27 < AAA_awright> isaacs: The git support?
02:27 <@isaacs> AAA_awright: yeah
02:27 <@isaacs> { "dependencies":{"foo":"git://foo.com/foo.git#commit-ish"}
02:27 < AAA_awright> isaacs: Yeah, especially submodules which are great in theory, but Git doesn't support it in any way that's useful to Node.js (nor should it)
02:27 <@isaacs> AAA_awright: agreed
02:27 <@isaacs> i used submodules for npm's deps for a long time
02:27 < LordThumper> maxogden: callbackhell that is exactly my thoughts
02:28 <@isaacs> it's such shit.
02:28 <@maxogden> yep
02:28 < AAA_awright> I've figured that for a while, but last week I realized "hey, Git allows you to define arbritrary subcommands"
02:28 <@isaacs> maxogden: so, to publish something, you first have to create the project if it doesn't exist.
02:28 < AAA_awright> So now it's a quest to teach Git how Node.js submodules work
02:28 <@isaacs> maxogden: that would be some kind of special dns request to the network of servers.
02:28 < AAA_awright> er, modules/require
02:29 <@isaacs> which would take a while because it needs to establish with all the others that it's being claimed, so they can reject it
02:29 < ben_alman> hmmn.. npm link is acting all weird for me.. any idea why npm isn't linking things into the correct global folder? http://benalman.com/grab/7aa72c.png
02:29 < ben_alman> i've been using nave for a while, never seen this
02:29 < theBrettman> i'm so never gonna understand this node stuff. I've read the nodebeginner thing 3 times and still don't get it
02:29 <@isaacs> requiring only quorum, rather than complete unanimity
02:29 <@maxogden> isaacs: if you design it to be purely decentralized yes it will be slow
02:29 <@isaacs> maxogden: oh! but here's the thing!
02:29 <@maxogden> theBrettman: whatcha tryin to build?
02:30 <@isaacs> only establishing ownership the first time is slow
02:30 < theBrettman> not trying to build. trying to understand the beginner stuff...
02:30 <@isaacs> but to be truly decentralized, you need this
02:30 <@isaacs> this registry will span the entire universe.
02:30 < theBrettman> I don't understand what's different about these two ways: http://www.nodebeginner.org/#how-function-passing-makes-our-http-server-work
02:30 < theBrettman> it looks the same to me, what's different?
02:30 <@isaacs> unanimity will become prohibited by physics and the speed of light at some time
02:30 <@maxogden> theBrettman: callbackhell.com explains it
02:30 < theBrettman> oh
02:31 < ben_alman> isaacs: any idea why npm link is linking into /Users/cowboy/bin/ and /Users/cowboy/lib/ instead of /Users/cowboy/.nave/installed/0.8.6/... ?
02:31 -!- isaacs changed the topic of #Node.js to: Please read this first: http://callbackhell.com
02:31 <@maxogden> theBrettman: the point is that they are the same at the end of the day though, except one is easier to read
02:31 < theBrettman> thx
02:31 <@maxogden> haha
02:31 <@isaacs> ben_alman: gist?
02:31 <@isaacs> ben_alman: npm config ls
02:31 < ben_alman> isaacs: https://gist.github.com/3365834
02:32 < theBrettman> so there's no performance difference?
02:32 < ben_alman> isaacs: https://gist.github.com/3365834
02:32 < theBrettman> actually, the guy makes it seem like you have to right it that way for scalability reasons or something
02:32 < wltsmrz> If there is it isn't significant, theBrettman
02:33 < wltsmrz> That example just illustrates that you can define functions elsewhere
02:33 < theBrettman> that's why it made no sense to me.
02:33 <@maxogden> theBrettman: its more of a code maintenance thing
02:33 <@isaacs> ben_alman: npm config ls -l
02:33 < theBrettman> I guess I'm making it harder than it is but trying to follow all these callbacks is a bit much later on in the tutorial
02:34 < theBrettman> I'm trying to learn from it but I'm just getting burnt out, lol
02:34 < theBrettman> I guess I need to find something funner to play with, lol
02:34 <@maxogden> theBrettman: learning node is most fun when you are trying to solve a fun problem
02:34 <@maxogden> theBrettman: and not just reading abstract articles
02:34 < theBrettman> yeah
02:35 <@isaacs> ben_alman: i'm confused.  what's npm prefix -g
02:35 < theBrettman> eventually, I want to make a cms that is like photoshop/illustrator built in...
02:35 < AAA_awright> theBrettman: How much experience with Javascript do you have?
02:35 < theBrettman> mostly jquery
02:35 < theBrettman> just front end so this is new to me
02:35 < ben_alman> isaacs: /Users/cowboy/.nave/installed/0.8.6
02:35 < ben_alman> :/
02:36 < ben_alman> i pmmed the log to you also
02:36 < ben_alman> prefix is the same there
02:36 < theBrettman> and I do php/mysql for backend. (wordpress now but used to do it the hard way)
02:36 < AAA_awright> theBrettman: Alright, so you're somewhat familiar with experessions like (function(x){ /* */ })(value);
02:36 < theBrettman> but I want to do web apps now
02:36 < theBrettman> yep
02:36 < theBrettman> and chaining, etc...
02:36 < AAA_awright> Ewww
02:37 < AAA_awright> Avoid things that `return this;`
02:37 < AAA_awright> (personally)
02:37 < theBrettman> and passing objects and functions  is getting a lil more familiar
02:37 < ben_alman> lol
02:37 < theBrettman> this still confuses me a little
02:37 < theBrettman> and avoiding this
02:37 < AAA_awright> theBrettman: Do you understand the prototype chain?
02:37 < ben_alman> well ther'es only 7 different way this gets set so you're not the only one
02:38 < theBrettman> kind of... was reading javascript the good parts
02:38 < theBrettman> it's about inheriting from a prototype object
02:38 <@maxogden> theBrettman: my friend made this as his first node project a little while ago
02:38 < theBrettman> and overriding parts or adding parts
02:38 <@maxogden> theBrettman: https://github.com/whichlight/dancey-dots
02:40 < AAA_awright> theBrettman: So it sounds like you know enough to just start reading the Node.js documentation... http://nodejs.org/docs/latest/api/all.html
02:40 < theBrettman> sounds like yars revenge, lol
02:40 < wltsmrz> Do you understand the example you linked to now, theBrettman?
02:40 < theBrettman> oh good
02:41 < theBrettman> oh, I only played with the demo so far
02:41 < theBrettman> idk how he got midi in a browser though!
02:41 < wltsmrz> I'm asking if you understand the code.
02:41 < theBrettman> I have to see it first
02:41 < rovar> hey all...  I need something like a promise, but I would like to queue up multiple functions to be executed when the promise is fufilled, or if I queue up a function after the promise is fufilled, it executes it immediately. 
02:41 < wltsmrz> You linked to the code, theBrettman. Remember the beginner example?
02:42 < rovar> I was going to code this up, but I'm assuming someone's already done this.. so I thought I'd check..
02:42 < theBrettman> oh, not the dancey dots you mean?
02:42 < theBrettman> the problem I'm having with the tutorial is understand the reasons why they put what callbacks in which modules
02:42 < wltsmrz> This, theBrettman http://www.nodebeginner.org/#how-function-passing-makes-our-http-server-work
02:43 < theBrettman> it's a little tricky
02:43 < wltsmrz> You understand that you can refer to the function by name instead of explicitly defining it within the function call?
02:43 < theBrettman> yeah but I guess it's more the stuff after that gets confusing
02:44 < rovar> e.g.   foo = promise( function() { long_async_operation();});   foo.when(function() { some operation; };  foo.when(function() { yet another operation; }); 
02:44 < theBrettman> I was stuck there cause I thought there was a functional reason why they wrote it different
02:45 < wltsmrz> You can do the same in jQuery. function clicker(e){}; $('#something').click(clicker);
02:46 < wltsmrz> Linguistically you can expect the same thing in node & client-side javascript.
02:47 < wltsmrz> So in that example I wouldn't expect an enormous performance variation. It just looks better, especially if you want to reuse that function somewhere else.
02:49 < theBrettman> well if you look later at the modules, they move callbacks to different modules as it gets more complex like some in server.js, etc...
02:49 < theBrettman> I can't believe I've done this tutorial 3 times now...
02:50 < theBrettman> first time was 4 months ago, lol
02:50 < wltsmrz> Right. That would be for "maintainability."
02:51 < Mango_man> running node.js in powershell :D
02:51 < wltsmrz> Were you imagining that this increases the performance?
02:51 < wltsmrz> I think we can pretty much dispose of that idea.
02:51 < wltsmrz> If there's anything else you can point to that you don't understand, :thumbsup:
02:52 < theBrettman> well no, if you read it, it's for scalabilty
02:53 < wltsmrz> I found no instance of "scalability"
02:53 < AAA_awright> Functionally different !== better readability
02:53 < wltsmrz> One instance of "scalable" and that was the following sentence:
02:53 < wltsmrz> It's important to note that this asynchronous, single-threaded, event-driven execution model isn't an infinitely scalable performance unicorn with silver bullets attached.
02:53 < theBrettman> in fact, I think the guy is trying to say one way of writing is is asynchronous and the other is synchronous
02:53 < wltsmrz> Can you show me where it suggests that this improves scalability?
02:54 < wltsmrz> I'm sure that he wouldn't make that mistake.
02:55 < jesusabdullah> suggests that what improves "scalability" ?
02:57 < wltsmrz> Defining callback functions externally
02:57 < jesusabdullah> externally to what?
02:57 < wltsmrz> The function call
02:57 < jesusabdullah> wat
02:57 < wltsmrz> execFunc(function(){}); //Internal definition
02:57 < jesusabdullah> you mean, "inline"
02:57 < AAA_awright> Using closures instead of names functions
02:57 < wltsmrz> execFunc(callback); //External
02:57 < AAA_awright> *named
02:57 < AAA_awright> Comeon, there's vocabulary terms for this
02:58 < wltsmrz> I'm sorry that you can't understand what's meant by that, AAA_awright 
02:58 < AAA_awright> You know, function closures
02:59 < jesusabdullah> Defining functions inline has little/no compilation benefit or downside vs. naming functions. However, naming functions is useful on its own, since they show up as named in stack traces and can be reused elsewhere.
02:59 < AAA_awright> function A(){ var x=1; function B(){ x=2; }; B(); return x; } A()
02:59 < jesusabdullah> "scalability" is a nebulous term that has something vaguely to do with how easy it is to "spawn up another one"
02:59 < wltsmrz> > tehBrett
02:59 < AAA_awright> jesusabdullah: And if it involves sharding, then the proper term is "web scale"
03:00 < jesusabdullah> right
03:00 < jesusabdullah> sharting == webscale
03:01 < dominictarr> maxogden, was just reading your scrolled up convo with isaacs,
03:01 < dominictarr> have you read the amazon dynamo paper?
03:02 <@maxogden> dominictarr: sorta
03:06 < theBrettman> wltsmrz, the scalability part was under: http://www.nodebeginner.org/#routing-to-real-request-handlers
03:07 < theBrettman> he said sharting! lol a new word!
03:07 < wltsmrz> As I expected they are request handlers.
03:08 < wltsmrz> Which sentence of his makes you think that he's suggesting scalability improvement to defining functions _externally_?
03:08 < wltsmrz> s/improvement/benefit
03:09 < jesusabdullah> theBrettman: Just no. Ignore scalability, worry about writing code
03:09 < jesusabdullah> theBrettman: only concern yourself with "scalability" when you actually have to scale
03:09 < dominictarr> maxogden, I'll take that as a 'no'
03:09 < theBrettman> ok
03:09 < jesusabdullah> theBrettman: and if you write small apps it will be *easy* to scale.
03:10 < jesusabdullah> just don't write huge apps.
03:10 < theBrettman> I think I need to forget about this tutorial and just dig in hands on and just come here when I get stuck, lol
03:10 < wltsmrz> There's no reason to not define your route handlers in another module or something, theBrettman. Just know that it won't impact performance significantly.
03:10 < wltsmrz> Yeah, I think so too.
03:10 < theBrettman> I'm just trying to understand the basics and then move up into express and then on from there
03:11 < theBrettman> it's not about it being in it's own module. it's about what parts get called in which modules
03:11 < wltsmrz> Ok. That sounds like a fine plan. 
03:12 < theBrettman> there's multiple ways they coulda done it. just trying to understand the reasons they did it the way they did it but my brain is not absorbing it
03:12 < wltsmrz> Express is very simple but you should probably get a better feel for functions / scope in javascript.
03:12 < theBrettman> I guess I can't keep interest
03:12 < theBrettman> I understand scope
03:12 < wltsmrz> And please make sure you're on the non-beta express because that would cause you some headache I'm sure.
03:12 < wltsmrz> Make a note somewhere
03:12 < wltsmrz> "npm install express@2.5.11"
03:12 < theBrettman> lol
03:13 < theBrettman> ok
03:14 < theBrettman> I'm like the only person in fort wayne, IN that knows what node.js is, lol
03:14 < theBrettman> everyone here uses .net and I hate it
03:14 < wltsmrz> I'm in a west Texas town with a population less than 3k. You're not alone.
03:14 < theBrettman> there's no degree for it yet that's all there is around here and we have a population of ~650k
03:16 < theBrettman> I'm a rebel, I wouldn't go the .net route
03:17 < wltsmrz> Node's theme song http://www.youtube.com/watch?v=231PT-5nKhY
03:18 < theBrettman> oh hell yeah! I loves me sum primus!
03:19 < theBrettman> one of my fav songs and I seen this vid before. they're playing it at a radio station
03:22 < Init--WithStyle-> To get "GM" (graphics magick driver for node.js) working, I need my server to have the graphics magick library installed, correct?
03:25 < theBrettman> are they saying global is over top-level or that there is something over global? http://nodejs.org/docs/latest/api/all.html#all_global
03:32 < wltsmrz> Something over global, theBrettman.
03:50 < tprice> what the time line for node v0.9.x?
03:50 < tprice> 6 months 2 months?
04:12 < Init--WithStyle-> Does anyone have an idea how I might use "GM" (graphics magick node.js driver) to extract 32 bit pixel data from a .tif file?
04:15 < bradleymeck> tprice: discussion of API changes will determine, will know better in a month or so
04:45 < benatkin> has there been a discussion about a node ssh client on NodeUp yet?
04:45 < benatkin> I'm looking at attempts to build a good ssh client for node
04:46 < benatkin> ...and what other languages have done.
04:48 < benatkin> hmm, native impl's are more common than I thought. python's fabric uses one.
04:56 < AAA_awright> benatkin: Like, a GUI or just the networking?
04:56 < AAA_awright> There was an SSH server someone made, I forget who
04:57 < AAA_awright> I think it's been completed, at least, it was a WIP...
05:09 < AAA_awright> I hope I'm not the only person who has to study Wikipedia for several minutes every time I need to re-figure out which endianness is which
05:15 < AAA_awright> Also, whoever posted Captain Picard on the mailing list... bravo
05:19 < SomeoneWeird> AAA_awright, lmao
05:19 < AAA_awright> SomeoneWeird: Did you find it?
05:19 < SomeoneWeird> ?
05:19 < AAA_awright> What's the lol at?
05:19 < SomeoneWeird> githubs down noooooooooooooooooooooooo
05:20 < SomeoneWeird> the wikipedia endianneesss
05:20 < SomeoneWeird> i do that too :)
05:20 < AAA_awright> Ah, okay. (Whoo!)
05:20 < SomeoneWeird> :p
05:23 < DTrejo> isaacs: is npmjs.org down b/c github is down?
05:23 < DTrejo> nvm
05:23 < DTrejo> it's up 
05:23 < DTrejo> ignore me
05:23 < DTrejo> thank god for readmes on npmjs.org and inside packages
05:24 < AAA_awright> DTrejo: I was having weird problems with npmjs.org too
05:24 < SomeoneWeird> same
05:24 < DTrejo> i had to load twice
05:24 < DTrejo> same for you all?
05:24 < SomeoneWeird> "We encountered some problems with the database maintenance and are now rolling back."
05:24 < SomeoneWeird> from github
05:24 < SomeoneWeird> .___________.
05:24 < pringlescan> My module has data sets in JSON (non-changing)… and I know Node caches modules when they're first loaded. How should I include the JSON data, since using the fs functions will impede node's ability to cache the code, no?
05:24 < AAA_awright> Fantastic
05:25 < pringlescan> 5 minutes my ass
05:25 < AAA_awright> How is it Facebook never has to do database upgrades
05:25 < AAA_awright> But GitHub goes down, not even readable?
05:25 < SomeoneWeird> lol
05:25 < DTrejo> wonders of.... php!
05:26 < AAA_awright> Also, I'm seeing all green lights now, but still "Major service outage"
05:26 < AAA_awright> https://status.github.com/ Git and Downloads were red moments ago
05:26 < SomeoneWeird> ya
05:26 < AAA_awright> Eh I guess that means it's up
05:26 < SomeoneWeird> well its back up
05:34 < Daman> Node.JS c++ addon question, is there a way to return something like a std::vector(translated to whatever equivalent javascript format) back from a function call?
05:41 < Daman> oh, that's easy, nevermind https://github.com/joyent/node/blob/2944e03/src/node_child_process.cc#L146
05:54 < AAA_awright> Has anyone considered replacing Buffer with UInt8Array?
05:55 < AAA_awright> Is there any good reason not to?
05:57 < yyfrankyy> any body try to compile 0.8x on DSM 4.0 (synology) ?
06:01 < SomeoneWeird> lol github is screwed again
06:01 < AAA_awright> >_<
06:02 < AAA_awright> Poor developers somewhere many miles north of me, frantically wondering what's to happen to their dissappearing weekend
06:02 < rvagg> github are doing scheduled db maintenance 
06:03 < rvagg> follow @github for updates
06:06 < SomeoneWeird> rvagg, ya but they screwed it up
06:06 < SomeoneWeird> and had to roll back
06:06 < yyfrankyy> >.< again?
06:08 < EricBlade> hey guys :)  i'm guessing that this is probably something i'm going to have to roll my own for, but .. thought maybe i could get some advice as to a strategy to take on it ..  
06:10 < EricBlade> I've got a variable size JSON data stream coming in, which could be a potentially unlimited size array.  When the service sending it to me sends more than approximately 200 elements, I start getting OOM errors thanks to my node being run under memory constraints.  SO, I thought I'd see if anyone maybe has any ideas about parsing a monster string down into individual array elements, and then handling them on a much smaller scale.
06:11 < EricBlade> The OOM occurs in JSON.parse(), so I figured if I parse it in much smaller chunks, I can handle it
06:14 < rvagg> sorry SomeoneWeird, I should have read the history before blurting
06:14 < SomeoneWeird> :p
06:14 < SomeoneWeird> allgood
06:14 < SomeoneWeird> see whats happening with assange?
06:14 < EricBlade> i was just reading that
06:15 < Trindaz> hey all. github's down so my npm install of socket.io-client won't work - anywhere else I can get the required files?
06:15 < tprice> gits up
06:18 < Trindaz> yup just saw it come back up. HAZAH!
06:18 < Trindaz> thanks tprice
06:20 < ansolas> hi ho :)
06:20 < pringlescan> is it better to require() your JSON files or load them using fs?
06:20 < ansolas> I just installed nodejs on my linux server 
06:20 < ansolas> and tried some helloworld app
06:20 < tprice> require() only js file not json files
06:20 < tprice> use fs
06:21 < ansolas> i stopped the app with ctrl z but it looks like that it is still running 
06:21 < ansolas> since i cant restart it 
06:21 < ansolas> how is the linux process named ? so that i can kill it 
06:21 < tprice> ansolas> killall node
06:21 < ansolas> ?
06:21 < pringlescan> tprice, node added support that if the filename ends in .json it will parse it and return the parsed json content
06:21 < rvagg> require can open json files, not just js
06:21 < rvagg> but require is sync
06:22 < tprice> oh this is new
06:22 < tprice> cool
06:22 < ansolas> killall node did not work , i still get : throw e; // process.nextTick error, or 'error' event on first tick
06:22 < ansolas>               ^
06:22 < ansolas> Error: listen EADDRINUSE
06:22 < ansolas> ???
06:22 < pringlescan> rvagg, the files are required by my module, so should I require them so they're cached by node, or use fs, it's a toss up?
06:22 < rvagg> killall -KILL node
06:22 < rvagg> pringlescan: if you're reading more than 1 file I'd use fs
06:22 < AAA_awright> pringlescan: require() for json files is really meant for configuration files... which should be passed as command line arguments anyways
06:22 < rvagg> always prefer async
06:22 < ansolas> thats ist thank you very much !
06:23 < AAA_awright> Libraries should never require(.json) files
06:24 < deoxxa> i require() package.json
06:24 < deoxxa> so i can use package.name and package.version
06:24 < pringlescan> okay, so for my use case, i'm making a module with data for the USA, it has zip code -> coordinates, bordering states, distance functions, area codes -> coordinates, USPS abbreviations, street designators, cities, counties, field validation etc. all native in javascript. you could use it to store them in a database, but the object here is to use the data in a bunch of my data mining modules w/o duplicating it a million places.
06:24 < pringlescan> AAA_awright, why shouldn't a library require a .json file?
06:24 < yawnt> there's a package from indexzero i believe
06:25 < yawnt> which deals with package.jso
06:25 < rvagg> think of it this way, when you use sync I/O operations, like require(.json), the operation is happening in your JS/V8 thread so it blocks everything, when you use fs.readFile then libuv will pick a spare worker thread and do it outside of your main JS thread, so you can be reading multiple files at the same time
06:25 < yawnt> pkginfo it is
06:25 < AAA_awright> pringlescan: Well, there might be a good use-case, but most of the ones I can think of involve storing runtime configuration in a file (which libraries don't do), or requiring() a file at runtime, which is also a no-no
06:25 < deoxxa> yawnt: interesting
06:26 < yawnt> yeah
06:26 < pringlescan> rvagg, but that would only ever happen once, when my module is first loaded, then the JSON files would be in the cache
06:26 < rvagg> ya, so it's up to you to make that judgement
06:26 < pringlescan> so I'm just figuring that'd be preferable to relying on them to be cached by the os
06:26 < AAA_awright> s/os/node/
06:26 < pringlescan> i'm just making sure I"m not doing something entirely stupid and there's a somewhat valid argument
06:27 < rvagg> as a rule though, if you're doing this in a lib that may be used by others' then you have to think about blocking
06:27 < AAA_awright> pringlescan: What's your use case? Is this an application?
06:27 < AAA_awright> I gave two possible (bad) use cases, is it either one?
06:27 < pringlescan> it's a module. i'll be releasing it along with several data mining modules that need this data. i don't want to require the use of an external database.
06:27 < rvagg> either way, I make a habit of totally avoiding sync operations because, even for quick and dirty stuff, cause they can get lost and you may not realise you have them still in there
06:27 < pringlescan> oh, no it's neither of them, sorry… i would require everything once and that'd be it
06:28 < r0tha> is there a way for node to resolve a domain itself 
06:28 < AAA_awright> Everything is a module in Node.js... is it a library, an executable?
06:28 < pringlescan> library
06:28 < r0tha> like an /etc/hosts for the node.js server you're running
06:28 < AAA_awright> pringlescan: You probably want to pass the configuration as an argument to a function, then
06:28 < AAA_awright> Don't do it within the library
06:28 < pringlescan> it's not a configuration file though, it's a static-data file
06:28 < AAA_awright> Oh erm... Like a lookup table/
06:28 < AAA_awright> *?
06:28 < pringlescan> yeah
06:29 < AAA_awright> Oh well yeah, that's graet
06:29 < pringlescan> I wanted to know the preferable way to do that
06:29 < AAA_awright> just var data=require('someData.json');
06:29 < pringlescan> okay, that's what I thought, sorry, I should have explained myself better.
06:29 < AAA_awright> er, absolute path
06:29 < AAA_awright> require('./someData.json');
06:29 < pringlescan> javascript is wicked fast at doing everything I'd want the DB to do, so I'd rather not have DB dependencies for a module I'm releasing publically
06:30 < AAA_awright> Also consider, right now at least, JSON.parse() runs significantly slower than pure Javascript
06:30 < AAA_awright> Dunno why, you'd figure it's faster
06:30 < AAA_awright> Like, 2-5x slower
06:30 < AAA_awright> Shouldn't be an issue really
06:31 < pringlescan> I had it as native JS originally but then I had to put module.exports in each file and I wanted to think of it as strictly data
06:31 < AAA_awright> The rule of thumb is ignore what could be efficent, because in the next release of V8 it probably will be more efficent
06:31 < pringlescan> but if I'm going the require route for speed and simplicity I might as well keep it native js as the file size won't be that different
06:32 < pringlescan> so, suppose I do native JS and do module.export() and require it in my main entry point… that'll be private unless I export it in the main file as well, no?
06:33 < AAA_awright> uh, yeah?
06:33 < AAA_awright> Like, require() within a require()d file?
06:33 < AAA_awright> Why wouldn't it/how could it?
06:34 < pringlescan> nah, i mean, instead of doing var data = require(file.json) I do… require('file.js') and inside the file.js I wrap it in a module.export { }
06:39 < AAA_awright> pringlescan: That's the other way you could do it. Prepend `module.exports=` and name it .js
06:43 < pringlescan> AAA_awright, thanks
07:01 < Daman> is there a way to output directly to node.js from an addon(like cout)? for debugging purposes
07:06 < jQuy> Hi! I would like to ask about net package. It cannot be loaded by npm because readme file is missing
07:07 < jQuy> So it's not possible to build tcp server
07:08 < jQuy> And another question: Do I have to use ab (Apache Bench) with cygwin? I have windows 7.
07:11 < EhevuTov> anyone using passport.js with the latest Express? I can't get it to work and I'd like to see someones working code
07:30 <@Nexxy> jQuy, net is included with node
07:31 < jQuy> @Nexxy: oh, really...
07:35 < jQuy> @Nexxy: Thanks. Now it works :)
07:39 < jQuy> Do you have any experience about MongoDB GUIs?
08:23 < imarcusthis> anyone know a node.js app using step.js?
08:30 < radiodario> i prefer drumnbass.js
08:30 < radiodario> (bad joke)
08:32 <@maxogden> nice o/
08:38 < Industrial> Can I catch traffic from backlinks to my site and redirect them to / at all times? I have legal messages to show before users can use the site :\
08:40 < aroman> Industrial: 'catch traffic from back links'?
08:41 < Industrial> erm, when a user first visits the site, I guess.
08:41 < aroman> so store a cookie or something?
08:41 < zomg> Industrial: set a cookie on first visit, check for existence of said cookie
08:41 < aroman> if its really that important as to nag people
08:42 < Industrial> I'm required by law so yes.
08:42 < zomg> Industrial: let me guess, EU's stupid cookie directive?
08:42 < Industrial> nah, 18+ :p
08:43 < zomg> Heh
08:43 < aroman> hah
08:43 < aroman> yeah i'd just use a cookie then
08:43 < Industrial> async porn amirite, anyway cheers :p
08:43 < aroman> lul
08:53 < timoxley> recommendations for continuous deployment via github webhooks?
08:54 < stephank_w> imarcusthis: Does this help? https://npmjs.org/browse/depended/step
08:54 < imarcusthis> stephank_w: yes, thanks
08:54 < timoxley> imarcusthis if you have question about how to use step, you should perhaps ask that
08:56 < EhevuTov> timoxley, did you find a good continuous deployment solution?
08:57 < timoxley> EhevuTov not really yet, most seem to do too much or too little
08:58 < timoxley> EhevuTov probably easiest to just write little node server to listen for webhooks which runs a shell script
08:59 < timoxley> shell script would basically be: `git pull && npm install && npm start` or something
09:02 < EhevuTov> timoxley, yeah, but then you could run out of hooks on github maybe? or at least be untidy?
09:02 < whitman> Is there a text file or similar on nodejs.org which contains the latest version number?
09:02 < EhevuTov> whitman, of node?
09:03 < whitman> EhevuTov, just the version number, so at the moment it would be "0.8.7" so I can then automatically check for updates and download newer versions.
09:04 < EhevuTov> whitman, you could scrape the nodejs.org for the <p class="version">v0.8.7</p>
09:05 < whitman> EhevuTov, yea that's one solution.
09:08 < EhevuTov> whitman, something like `curl nodejs.org | grep version` and use grep's regex on just one line. And then put it into an `sh` script :-)
09:10 < timoxley> whitman https://gist.github.com/3368647
09:11 < whitman> timoxley, thanks!
09:18 < timoxley> whitman updated to be less wordy.
09:19 < timoxley> EhevuTov "run out of hooks on github"?
09:19 < EhevuTov> timoxley, is that possible?
09:21 < timoxley> EhevuTov I don't know. You'd need exactly one webhook per repo as far as I can tell
09:21 < whitman> timoxley, could probably make it a bit simpler by looking at /dist/latest/, shouldn't be a need to sort the version numbers.
09:21 < EhevuTov> right, and that sounds like it would get tedious
09:22 < deoxxa> https://github.com/visionmedia/n/blob/master/bin/n#L290
09:23 < deoxxa> whitman: ^^
09:23 < timoxley> whitman that could work as well. I just pulled the code out of n/nave
09:23 < deoxxa> oh
09:23  * deoxxa didn't look at the link
09:23 < whitman> deoxxa, that's what timoxley already pulled out :)
09:23 < whitman> Thanks though.
09:45 < imarcusthis> timoxley: actually, I was interested because we're looking at implementing something like step in a perl based web framework ;-)
09:46 < timoxley> imarcusthis cool
09:48 < deoxxa> i'm setting up a simple restful service where when you POST to / the content is analysed and an id is generated, where that id is always the same for the same content. if the content doesn't already exist on the server, 201 is returned with a location header that tells you where it was put. if the content does already exist, it seems incorrect to return 201, but 200 probably shouldn't have a location header. is 302 correct in this case?
09:48 < yawnt> 204 deoxxa 
09:48  * deoxxa looks that up
09:49 < yawnt> No Content deoxxa 
09:49 < yawnt> The HTTP response will tell you what happened as a result. In HTTP, a  
09:49 < yawnt> single resource-creating POST action will result in a 201 response  
09:49 < yawnt> with another hypertext representation (telling you what happened and  
09:49 < yawnt> what can be done next) or 204 response with the Location header field  
09:49 < yawnt> indicating the URI of the new resource."
09:49 < deoxxa> ah, neat
09:49 < deoxxa> that does it
09:49 < yawnt> sorry for the long paste
09:49 < deoxxa> heh
09:53 < yawnt> http://httpcats.herokuapp.com/204 :3
09:53 < deoxxa> mrow
09:55 < yawnt> mrow?
09:55 < deoxxa> cat noise
09:55 < deoxxa> haha
09:56 < yawnt> oh `meow}
09:56 < yawnt> *`meow`
10:12 < xico> Hello everyone, anyone able to help me with a question about DerbyJS?
10:12 < xico> Everyone on that channel is asleep
10:14 < wao> whereim
10:44 < cascalheira> Hello all... I am trying to choose a node.js mvc framework and after some google searches i still can't make my mind... someone here with experience with node mvc frameworks that can help?
10:45 < deoxxa> cascalheira: why do you want mvc?
10:45 < deoxxa> like, is there a specific reason?
10:45 < cascalheira> kinda... im using rails at the moment, and for some time i want to try and do something with node
10:46 < deoxxa> well, node isn't rails
10:46 < deoxxa> (which you obviously know already)
10:46 < cascalheira> aye, thats why i want to try node
10:46 < deoxxa> you might find that you don't specifically need traditional mvc structure
10:47 < deoxxa> express is very popular, probably one of the most popular web frameworks for node
10:47 < deoxxa> it's more like sinatra than rails
10:47 < deoxxa> do you know sinatra?
10:47 < cascalheira> oh i'm just used to mvc, thats why i was after a node mvc framework
10:47 < cascalheira> a little
10:48 < cascalheira> i will take a look at express
10:48 < cascalheira> thank you!
10:48 < deoxxa> it's pretty easy to get started with
10:48 < deoxxa> no problem :)
10:48 < deoxxa> if you do really want an mvc structure, you have some options
10:48 < deoxxa> you might be able to move part of it out to the browser though
10:48 < deoxxa> (the "v" part)
10:50 < cascalheira> indeed. I will take a look at express. I saw some other frameworks like railway or matador, but seems that they are lacking in documentation, which for a node.js beginner isn't probably a good thing
11:29 < substack> http://substack.net/audio/ramp.ogg generated with https://github.com/substack/baudio/blob/master/example/ramp.js
11:29 < tuhoojabotti> substack: What's that?
11:31 < substack> tuhoojabotti: robot sounds
11:31 < tuhoojabotti> !
11:32 < tuhoojabotti> Can't listen to it now
11:32 < tuhoojabotti> will do later
11:35 < Sembiance> morning everyone :)
11:52 < mscdex> wow... an n64 emulator in javascript
11:54 < Sembiance> mscdex: yah, but it only barely runs mario 64, but still, very impressive :)
11:55 < mscdex> it's not so much that, it's that someone would even think to even attempt something like that in the first place
12:06 < Industrial> Can anyone help me with Mountie (https://github.com/substack/mountie)? I'm not sure how I'm supposed to know the port of services in a middleware that sits in front of it ..; https://gist.github.com/5dc8fd239e00e8b7e915
12:07 < SomeoneWeird> anyone know any computer vision libraries for noe?
12:07 < SomeoneWeird> node* derp
12:09 < Sembiance> SomeoneWeird: I had looked into it at one point
12:09 < Sembiance> SomeoneWeird: but I forgot what I discovered :)
12:09 < SomeoneWeird> hrmm
12:09 < substack> Industrial: use the req.header.host
12:10 < substack> and never have a /.*/ route, that will just make all the seaport services never get routed to
12:10 < substack> never ever do that
12:10 < substack> ever
12:10 < mmalecki> ever!!!
12:10 < Industrial> just testing :p
12:11 < SomeoneWeird> lol
12:11 < RLa> Sembiance, always make notes, people forget
12:11 < RLa> :)
12:11 < Sembiance> SomeoneWeird: pretty sure I came to the conclusion to eithre process things with an external process or to write an NPM module binding to a shared lib.
12:11 < Industrial> substack: but i mean, the bounce function needs a port number on line 12, say my req.headers.host is 'www.mydomain.com', how do I send it to the 'web.mydomain' service ?
12:12 < SomeoneWeird> yeah Sembiance 
12:12 < Industrial> (not knowing the port at that moment because the web.mydomain service registers at a later point)
12:12 < Sembiance> RLa: yes, normally I do make notes for everything I discover. have a huge directory of .txt files full of stuff I've figured out. but this computer vision thing was just a few hours of curious looking, wasn't really for a real project and didn't think I'd ever need to know it again. Guess I was wrong :)
12:13 < RLa> hm, nothing in npm about computer vision
12:13 < mscdex> no opencv bindings?
12:14 < RLa> hm, there are!
12:14 < RLa> even two
12:14 < mscdex> :-)
12:16 < SomeoneWeird> hm
12:31 < Fareed> what is the diffrent between controller method in php and event in node.js
12:31 < Fareed> i mean in working metholdgy
12:36 < substack> Industrial: var port; outside then
12:36 < substack> and you can ports.query() for seaport records
12:36 < Jared> I have a basic question about node.js (in relation to how it works with mongodb, but this is just a node.js question). I have a function like this: collectionref.count({foo:"bar"}, function (err, amount) {console.log(amount)}) ; ...My database connection is good. I've been inserting records in a similar function, but nothing is showing up on my console log when i do this.
12:38 < Sembiance> Jared: well, either your callback function is never called, or it is called but amount is an empty string leading to console.log() logging nothing
12:39 < Jared> never getting called. K
12:44 < Sembiance> Jared: as to why it's never called, that will depend on what the .count() API call is doing :)
12:44 < Jared> Yeah. There are about 5 problems I could have right now.
12:45 < Jared> That .count() is SUPPOSED to be a mongodb API call, but I'm not even sure it exists. I found it on some third party blog. So first i need to make sure it's doing anything. I'll just send a query and see if it comes back at all.
12:57 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:13 < MannyCal> what's the canonical solution to running on node on port 80 (sans nginx, haproxy etc.)?
13:13 < tomb> MannyCal: bind to port 80
13:14 < Jared> Permissions issues
13:14 < Jared> Right?
13:14 < MannyCal> yeah, I mean without root/sudo
13:14 < Jared> That's a question I'd like answered too.
13:15 < Jared> Right now I'm using root/sudo, but i'm just testing stuff and it's returning one static html page. ...Going to need that answer soon.
13:16 < MannyCal> I found a solution on stackexchange involving iptables, but I don't want to poke that with a ten foot pole
13:16 < Jared> I THINK there's a way to configure your permissions so that you can bind to port 80 without root/sudo but I haven't the foggiest idea how.
13:16 < Jared> I need somebody to check me. According to the bottom two paragraphs on this page: http://mongodb.github.com/node-mongodb-native/markdown-docs/queries.html If THIS works-- collection.find({PosID:800000}).toArray(function(err, data){console.log(data)});   then THIS should too: collection.find({PosID:800000}).count(function(err, count){console.log("Matches: "+count);});
13:16 < Jared> Correct?
13:19 < Jared> I am rapidly becoming enraged to the point of breaking something. >.<
13:19 < nvoyager> In what directory should I store local modules specific to my project (non-npm modules) ?
13:21 < Jared> nvoyager some internal directory. just map the path when you call the module.  var myModule = require('./mydirectory/myModule') (pretty sure i got the syntax right, but it might be off a touch)
13:23 < nvoyager> Jared: so there is no standard directory name for local modules? 
13:23 < dibs> having trouble with NPM on a windows machine anyone had much experience?
13:23 < Jared> nvoyager: Ah you're talking best practices. ...I haven't a clue on that one. Sorry.
13:24 < rvagg> where are you in the world at the moment dominictarr?
13:24 < mmeno> Hi.. I didn't find any info on that: Am I supposed to use npm install -g as sudo?
13:30 < qballer> HI guys, I wonder if someone can give me an example on how to use Broadway for polymorphism. Need to set my own abstraction
13:31 < bradleymeck> qballer: Broadway is not really used for polymorphism. its a form of dependency injections tailored for plugin usage
13:32 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:32 < qballer> I can't load different plugin and treat them the same way? 
13:33 < qballer> I can't validate that a plug-in contains all the needed functions ? 
13:33 < qballer> Do plugin loading async ? 
13:33 < bradleymeck> qballer you could, but that is not built into broadway, you can load async via plugin.init
13:34 < qballer> How would you suggest extending it.  I'm new to all this. 
13:34 < qballer> I like the flat iron framework and I would like to base project on it as my first test for node.js./
13:43 < jetienne> var parser	= new DOMParser(); is there something like that in node.js ?
13:43 < jetienne> aka a xml parser
13:44 < substack> https://github.com/isaacs/sax-js
13:46 < dominictarr> rvagg, I'm in poland
13:46 < rvagg> ah, explains the odd timing
13:47 < dominictarr> other side of the world.
13:47 < bradleymeck> some of the best food in the world too
13:48 < dominictarr> every place has some sort of food they are good at
13:49 < rvagg> places that do funky stuff with potatoes are top of my list
13:49 < dominictarr> like in America, there is mexican food.
13:49 < rvagg> and in New Zealand, there is..... umm...
13:50 < jrajav> That's not very fair to America
13:50 < jrajav> We also perfected the lard-soaked potato slice
13:50 < dominictarr> MINCE AND CHEESE PIES!
13:50 < rvagg> venison, I'll give NZ that
13:51 < jrajav> I'm definitely retiring in Italy
13:51 < jrajav> Mainly for the food, coffee, and wine
13:51 < dominictarr> rvagg, oh yeah. man you should see how they used to hunt that stuff comersially.
13:51 < dominictarr> one guy flying the helocopter, another guy with a rifle.
13:52 < mmalecki> dominictarr: you ate polish food once, lol
13:52 < dominictarr> flying around near vertical mountains.
13:52 < mmalecki> (and I'm still not sure it was proper polish food)
13:52 < dominictarr> I had never seen food like it before, and it was in poland, so I can only assume.
13:52 < dominictarr> that it was.
13:53 < mmalecki> hopefully!
13:53 < cascalheira> If you love to eat good food, you must visit portugal! ;) if i lived somewhere else i would be a lot slimmer ;)
13:53 < dominictarr> anyway, the main polish foodstuff is vodka.
13:53 < dominictarr> haha.
13:53 < dominictarr> I'm coming to portugal, for lxjs!
13:54 < cascalheira> You can eat good in lisbon, but the better stuff is in the north
13:55 < evelyette> hi
13:55 < cascalheira> do a google search for caldo verde, cozido a portuguesa and bacalhau com broa ^^
13:55 < evelyette> I would like to know whether it's possible to connect to node.js from an android application
13:56 < evelyette> I would like to program a game with rooms, and I would like to use rabbitmq backend ... so all the users would connect to node.js, which would in turn connect to rabbitmq ... is that a good idea?
13:56 < rvagg> ok, way too late for me to be thinking about food, time to go dream about streams
13:57 < dominictarr> rvagg, night
13:58 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:58 < Hoppertje> http://pastie.org/private/ghccl2lpzy21y8ieea5ya  this breaks on line 9   i am not sure why this is a problem as i declare this in the server scope on line 6 ?
14:01 < mscdex> Hoppertje: do you need the `new` operator?
14:01 < mscdex> `var test1   = new bleh2( );`
14:01 < mscdex> ?
14:01 < Hoppertje> hmm
14:01 < Hoppertje> let me try that :)
14:01 < mscdex> is myfunc1() on the prototype or ?
14:02 < Hoppertje> that didnt work :(
14:02 < Hoppertje> myfunc1() is in a different script?
14:02 < mscdex> oh wait nevermind, i see you have the definitions below
14:03 < mscdex> the problem is that you're not creating a myfunc1 property
14:03 < mscdex> you're returning that function instead
14:03 < Hoppertje> ok
14:03 < adrianlang> Hoppertje: game_engine is not in scope in S_test
14:03 < mscdex> so with the current setup it's more like: `var thisisactuallymyfunc1 = bleh2();`
14:03 < mscdex> er
14:04 < mscdex> i need coffee
14:04 < mscdex> brb
14:04 < Hoppertje> adrianlang: i understand that, but does that not only apply when you are executing it?
14:04 < adrianlang> mscdex: I don't think so. Looks like an object with that property
14:04 < Hoppertje> can't you use this as a template?
14:05 < adrianlang> Hoppertje: What's the actual error message?
14:05 < Hoppertje> what you said
14:05 < Hoppertje> ReferenceError: game_engine is not defined
14:06 < Hoppertje> i am confused, as line 8 does work
14:06 < Hoppertje> game_engine.har() does exist
14:06 < adrianlang> game_engine is not known in S_test
14:06 < Hoppertje> ^^
14:06 < Hoppertje> but, i declared it in line 6
14:07 < adrianlang> In another file
14:07 < Hoppertje> i know what you are saying
14:07 < Hoppertje> i just thought, since i am not actually executing that script, i could use it as template :(
14:08 < adrianlang> How are you not actually executing? test1.myfunc1() executes the function in S_test
14:09 < Hoppertje> line 5 ?
14:09 < Hoppertje> game_engine 'becomes' ?
14:33 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:33 < qballer> got disconnected by mistake 
14:48 < mscdex> ahh coffee
14:49 < wdbl> Hello. Why doesn't util.js have an isString function? I would write it like this: function isString(val) { return Object.prototype.toString.call(val) === '[object String]'; }
14:49 < wdbl> is that wrong?
14:50 < wdbl> is there some other way that people are checking for strings, which is the reason why util doesn't have that function?
14:50 < context> whats everyone use to talk to mongo here
14:51 < timeturner> context: ?
14:51 < bradleymeck> wdbl typeof object === 'string'?
14:51 < mscdex> ^
14:51 < ZipZopZoobityBop> good morning :3
14:52 < wdbl> bradleymeck: that fails when the string is created like: var x = new String("Hello");
14:52 < wdbl> bradleymeck: typeof x would then return 'object'.
14:52 < bradleymeck> wdbl thats not a real string, its an object with a .toString method
14:53 < wdbl> new String("..."); is not a real string?
14:53 < bradleymeck> its an Object had Object.prototype and all
14:53 < context> timeturner: mongodb
14:53 < wdbl> so, i guess my question is....nobody is using new String("...") to create strings then?
14:53 < context> what are the popular modules
14:54 < bradleymeck> well its a bit more wdbl need to dig through spec for exact terminology but its not a low level string its called … mmmm
14:54 < wdbl> in other words, creating a string with the String constructor is not normal?
14:54 < neme> (win 8
14:54 < bradleymeck> wdbl its bad use +'' or dont use new
14:54 < wdbl> I just want to make sure nobody is really expecting new String("...") to create a new string.
14:54 < wdbl> ok that's cool
14:55 < wdbl> thank you
14:55 < wdbl> I don't want to create strings that way, but I need to check for them
14:55 < wdbl> I just use literals
14:55 < bradleymeck> Object.getPrototypeOf(x) === String.prototype is your best bet
14:55 < bradleymeck> its overkill
14:55 < bradleymeck> but meh
14:55 < mscdex> anyone using String() probably came from Java land :p
14:56 < bradleymeck> mscdex: and how!
14:56 < qballer> hi 
14:56 < wdbl> ok good that makes my life easier. as long as I know it's generally considered "wrong"
15:13 < Tom___> Hi, does anyone here knows how to use nodejs to spawn and interact with non-node.js child processes?
15:14 < Tom___> I cant seem to make the child process emit the "data" event in the parent at every stdout of the child
15:18 < jrajav> Tom___: The output is buffered
15:18 < SomeoneWeird> Tom___, have a look at carrier
15:19 < jrajav> Tom___: Look at the .spawn documentation, specifically the part where you can set the stdio: property in the options parameter
15:19 < Tom___> which one of the property should i use?
15:20 < Tom___> i know that the output buffered, but how I am deciding on what would be the best away to get a short string from my child processes programs
15:20 < Tom___> now*, way*...sorry about the typos
15:20 < jrajav> And you need it before the process ends?
15:21 < jrajav> I'm a little confused at what you mean by "every stdout", also… you probably mean every line, right?
15:21 < jrajav> Newlines don't really have any inherent significance at a low level
15:24 < Tom___> @jrajav yes
15:25 < Tom___> everyline. 
15:26 < Tom___> It turns out that I have programs that have huge preprocessing/start-up, so I want to keep them alive, and I want to get responses from this programs to node, so node can feed more "messages" to them conditionally
15:28 < jrajav> Tom___: Play around with Process.spawn and the stdio: property with a simple test program, see if you can read line-by-line stdout from a shell script that writes and then sleeps for 10 seconds
15:28 < jrajav> That'll get you 80% there
15:29 < Tom___> i was playing with it for 2-3 hours already
15:29 < Tom___> node <--> python script
15:30 < jrajav> Hm. I think I was wrong actually. Looks like that property is for redirecting the fds and not exposing them directly
15:33 < jrajav> Tom___: Look into readline
15:33 < jrajav> Do we have a docs bot?
15:34 < jrajav> Tom___: nodejs.org/api/readline.html
15:34 < jrajav> Tom___: There's also this: https://gist.github.com/1785026
15:34 < Tom___> docs bot?
15:34 < jrajav> Tom___: And finally, one third method is to roll it yourself by calling .setEncoding on the stdout stream
15:35 < jrajav> Tom___: Setting it to anything but Buffer will cause it to emit 'data' events immediately
15:38 < evelyette> hi, I'm trying to use the code example presented here: https://github.com/Gottox/socket.io-java-client the problem is that I don't know how to write a matching server.js, which would handle that example
15:38 < Tom___> readline seems hopeful. I am trying it out now, as the spawn creates 2 streams (maybe 3rd or error?) and readline seems to be able to use it
15:38 < evelyette> for now I'm just trying to send something across the web socket
15:38 < evelyette> any ideas ?
15:55 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:57 < mscdex> evelyette: http://socket.io/
15:58 < daniel_____> hey, i've got a http connection intensive application. Can anyone tell me how i can reuse connections?
15:59 < juanlas> member:daniel_____: websockets?
15:59 < daniel_____> http.request
15:59 < mscdex> daniel_____: use an http Agent?
15:59 < daniel_____> default agent
16:00 < mscdex> then connections should be reused. are you using keepalive?
16:00 < wdbl> is there a way to expand the number of graph levels that the node REPL will print for an object?
16:01 < wdbl> it seems to only go 2 levels deep
16:01 < wdbl> i'd like 4 or 6
16:01 < mscdex> wdbl: you can use require('utils').inspect() manually
16:01 < wdbl> sweet, thx mscdex
16:02 < bentkus> are there any packages to manage time, as in (hours, minute, seconds, milliseconds)?
16:02 < bentkus> date just sucks too much
16:04 < mscdex> bentkus: huh? you can supply those in a Date constructor
16:05 < evelyette> mscdex, ?
16:05 < mscdex> evelyette: the socket.io website shows you server code examples
16:07 < theBrettman> I think module.parent and module.children is backwards. since when does a parent depend on a child?
16:07 < theBrettman> and when does a parent inherit from a child?
16:07 < mscdex> theBrettman: eh?
16:07 < theBrettman> that makes no sense
16:08 < ddollar> any of the npm folks consider bumping the minor rev of npm when increasing the node dependency to 0.8 ?
16:09 < theBrettman> module.parent should be the one you require(), not module.children
16:10 < daniel_____> can any one tell me how do i construct the ForeverAgent?
16:11 < bradleymeck> ddollar: that was a nice slap to our face too
16:12 < bradleymeck> daniel_____: what is a ForeverAgent
16:13 < daniel_____> I found it in node-v0.8.7/deps/npm/node_modules/request/forever.js and https://github.com/mikeal/request/pull/148/commits
16:15 < bradleymeck> daniel_____: just http.request.forever(…)?
16:17 < daniel_____> that is what i would expect, except it's undefined
16:18 < mscdex> theBrettman: module.parent is the module that required the current module
16:19 < mscdex> theBrettman: and that makes more sense
16:19 < theBrettman> how does that make sense that a parent inherits from the child?
16:19 < mscdex> what do you mean by 'inherits' ?
16:19 < theBrettman> it's a dependancy
16:20 < mscdex> theBrettman: it's a dependency tree
16:20 < theBrettman> how can a parent depend on the child. it should be the other way around
16:20 < bradleymeck> theBrettman, dependencies are children of things, you want nodes's /deps folder to be above it in the file structure?
16:20 < theBrettman> hm...
16:21 < bradleymeck> theBrettman its not a parent, its a smaller portion of the functionality that the module that requires it
16:21 < theBrettman> okie
16:23 < jQuy> Hi! I have a problem.
16:24 < jQuy> I'm trying to connect these things together: AngularJS, Node and MongoDB. I need some glue.
16:24 < mulinux> hello 
16:24 < mulinux> i read some of explanation about (module.exports vs exports) but every time it is a bit different
16:24 < mulinux> can someone explain what is the difference between module.exports and exports in commonjs
16:24 < mulinux> ?
16:25 < jQuy> I'm really confused. There are libraries available like Express, MongoJS, Mongoose, Restify. I don't know how to go forward.
16:25 < chakrit> jQuy: your application's supposed to be the "glue"
16:26 < RLa> for mongo check out mongoskin if you want simple access to mongodb
16:26 < jQuy> chakrit: Yes but how to transfer data from mongoDB to front end (browser)
16:26 < RLa> mongoose has lots of magic, but you might like that
16:26 < gkatsev> mulinux: http://nodejs.org/api/modules.html#modules_the_module_object found that again. It's the same.
16:26 < jQuy> I tried mongoose and I managed to get data from my database with that
16:27 < mulinux> gkatsev: :D thx
16:27 < RLa> jQuy, with express, define handler for url and inside the handler pull data from db and res.send() it to client
16:27 < gkatsev> mulinux: but if you want exports to be a function, exports = function(){} wont work, you'll need to do module.exports = function(){}
16:27 < jQuy> But next think is to create some sort of JSON API for front end and I don't know how to do it.
16:27 < RLa> see express examples
16:27 < bradleymeck> mulinux: module.exports is the actual thing that will be exported (you can override this) exports is a shortcut to the original module.exports (override it again if you want)
16:27 < RLa> jQuy, or use restify, it should have examples too
16:28 < bradleymeck> basically the loader grabs module.exports, whatever that property is is what is exported
16:28 < jQuy> RLa: So I can forget mongoose and mongojs?
16:28 < gkatsev> mulinux: http://www.hacksparrow.com/node-js-exports-vs-module-exports.html might be useful.
16:29 < bradleymeck> mulinux: the important thing here is exports is a variable and not tied to the module object except by reference at the beginning of a module, if you override module.exports you need to reassign exports if you want to use that
16:29 < RLa> jQuy, no
16:29 < RLa> jQuy, you still need it to access mongodb
16:30 < mulinux> when you commonly use export and when module.export ?
16:30 < jQuy> RLa: express can't access databases?
16:30 < mscdex> mulinux: module.exports is when you want to do something like `var Foo = require('foo');` instead of `var Foo = require('foo').Foo;`
16:31 < RLa> jQuy, no
16:31 < mulinux> gkatsev: thx, this post i read before i was confused :D
16:31 < RLa> it's web framework not database driver
16:31 < gkatsev> mulinux: heh
16:31 < mscdex> mulinux: you can still do the latter with module.exports, but most people use the shorter way and use just `exports` instead in that case
16:32 < mulinux> ok thx guys
16:39 < jQuy> RLa: Do I have to have one Node.js server running and another server too?
16:39 < RLa> hm, no
16:39 < jQuy> RLa: the another server is created by Express or Restify...
16:39 < jQuy> RLa: One node server is enough?
16:40 < jQuy> RLa: no other servers?
16:40 < RLa> why you think you need many
16:40 < jQuy> RLa: because I'm still very confused :D
16:40 < RLa> go find examples :)
16:41 < jQuy> RLa: There are so many examples and libraries and other stuff. That's why I'm here.
16:41 < fennec> anyone here work with restify? specifically its REST client-side features?
16:42 < fennec> i'm trying to get it to do self-signed SSL for a test script and it's being crabby :|
16:48 < RLa> jQuy, express+mongoskin example: https://gist.github.com/3371613
16:49 < RLa> an app i'm currently working on
16:50 < RLa> jQuy, mongoose has bit less verbose api for db access
16:50 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:50 < jQuy> RLa: mongoskin... again some new library... :D oh no
16:50 < ttilley> is there a decent ORM out there that abstracts out in-memory and to-json-document, or should i say screw it and just use sqlite?
16:50 < RLa> but it's more-less same
16:50 < ttilley> actually... crap, i can't just use sqlite. on the remote i don't have direct filesystem access
16:50 < RLa> jQuy, it's thin wrapper of node-mongodb-native
16:50 < RLa> jQuy, mongoose uses the same driver
16:51 < ttilley> though i do have mysql, postgresql, redis, and mongodb access...
16:51 < RLa> just node-mongodb-native has very very verbose api
16:51 < jQuy> RLa: Should I use it instead of mongoose?
16:51 < RLa> jQuy, i had some things i could not get working with mongoose
16:51 < jQuy> RLa: interesting
16:52 < ttilley> RLa: oh?
16:52 < RLa> https://github.com/LearnBoost/mongoose/issues/1057
16:52 < RLa> i debugged it here some days ago
16:53 < RLa> but could not get around it
16:53 < bentkus> mscdex: but it is milliseconds since 1900/1/1
16:53 < RLa> jQuy, otherwise those handlers had only 1-2 lines of code with mongoose
16:53 < mscdex> bentkus: the Date constructor has multiple forms
16:54 < mscdex> bentkus: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date
16:54 < jQuy> RLa: Oh! Too complicated code for me right now :)
16:55 < jQuy> RLa: my head is already exploding
16:55 < bentkus> mscdex: i am dealing with a timespan, not with a global date 
16:55 < RLa> ttilley, https://npmjs.org/package/dirty <- checked out this?
16:55 < bentkus> I have x milliseconds and I want to know how many seconds and hours they represent
16:56 < mscdex> bentkus: simple math?
16:56 < RLa> jQuy, that's quite standard express code
16:56 < RLa> nothing fancy
16:56 < bentkus> mscdex: in java and c# there are classes
16:56 < bentkus> anyway, thanks for the help
16:56 < bentkus> ill try the internet
16:56 < mscdex> heh wow
16:57 < jQuy> RLa: that's good
16:57 < jQuy> RLa: but I'm not so familiar with Express either
16:57 < ttilley> RLa: i don't have filesystem access. this is going to be deployed to cloud foundry
16:57 < mscdex> actually, i'm not surprised java and c# would have classes for something so trivial
16:58 < RLa> jQuy, go read express guide
16:58 < RLa> ttilley, but where can you save it then?
16:58 < jQuy> RLa: I'm reading Mongoskin manuals now
16:58 < RLa> jQuy, go with mongoose if you already know how to use it
16:59 < jQuy> RLa: I know it best
17:00 < RLa> so just try to put mongoose code into your express route handlers
17:00 < ttilley> RLa: i was hoping to discover something like `resourceful` but abstracting out in-memory and mongodb rather than in-memory and couchdb. i can use postgresql, redis, and mongo... but not couch. there's a half-written mongodb shim for resourceful but, well... it's half-written. ;)
17:00 < jQuy> RLa: What are the steps... 1: build server 2: get data from database 3: build REST api for front end
17:00 < RLa> btw, restify has similar routes
17:01 < RLa> jQuy, try get working a single handler then hack forward from there
17:01 < jQuy> RLa: I'm praying and trying
17:03 < jQuy> RLa: empty file, first step :)
17:04 < jQuy> 1: build the server
17:04 < jQuy> RLa: I would like to use restify for building server if that's the best framework
17:05 < ihdev> trying to install the latest nodejs on a micro ec2 instance - my node and sudo node commands are not being recognized
17:06 < ihdev> not sure if its a routing problem
17:06 < RLa> jQuy, then use restify
17:06 < RLa> if you want it
17:06 < RLa> it has almost same api as express
17:07 < mscdex> ihdev: how did you install it?
17:07 < ihdev> mscdex: compiled from source. followed this guide
17:07 < RLa> yeah, you first need to install them to use those commands
17:07 < ihdev> http://iconof.com/blog/how-to-install-setup-node-js-on-amazon-aws-ec2-complete-guide/#installNode
17:08 < ihdev> whereas node returns /usr/bin/node /usr/lib/node usr/local/bin/node
17:08 < jQuy> RLa: I have already installed restify by npm
17:08 < ihdev> *whereis
17:08 < RLa> why it has 2 nodes
17:08 < jQuy> RLa: http://mcavage.github.com/node-restify/ <-- how the server can be built :)
17:09 < RLa> did you use his image where node was already installed?
17:09 < mscdex> ihdev: by default it installs to /usr/local
17:10 < RLa> jQuy, see Server API, it has complete example
17:10 < ihdev> yeah I set up some links but it didn't fix the issue
17:10 < mscdex> ihdev: is the node binary at least in /usr/local/bin/ ?
17:10 < jQuy> RLa: ok
17:11 < mscdex> ihdev: also, i hope you installed a newer version of node than is shown in that article :-)
17:11 < ihdev> certainly did
17:11 < ihdev> just checking now re: binary
17:12 < ihdev> i skipped the npm step as well
17:12 < ihdev> since node comes with npm now, correct?
17:12 < tomshreds> Hi guys, does anyone know a good guide or something about doing CLI tools for node packages?
17:12 < jQuy> RLa: so much info on that page
17:12 < jQuy> RLa: I'm going to be so confused :D
17:12 < RLa> jQuy, lots of good documentation
17:13 < jQuy> RLa: where are you from?
17:13 < mscdex> tomshreds: i think most packages with CLI tools use a bin/ subdirectory inside the package
17:13 < mscdex> ihdev: yes, npm ships with node
17:13 < tomshreds> mscdex: ok and that way if I npm install -g it these commands will be availaible system wide?
17:13 < mscdex> tomshreds: i believe so
17:15 < RLa> jQuy, does it matter
17:15 < mscdex> tomshreds: oh, i think you may also have to add something to your package.json
17:15 < mscdex> tomshreds: 'bin' property: https://github.com/visionmedia/express/blob/master/package.json
17:15 < jQuy> RLa: ei
17:15 < tomshreds> mscdex: lol I was gonna say : ok thx I'm going to look for packages that use it like express :P
17:15 < tomshreds> thanks
17:16 < llappy> Can an HTTP server listen on multiple ports?
17:16 < mscdex> tomshreds: from npm docs: https://github.com/isaacs/npm/blob/master/doc/cli/json.md#bin
17:16 < llappy> e.g. call .listen(<port>) twice?
17:16 < tomshreds> mscdex: really nice! thanks
17:17 < etcetera> anyone have any opinion on this kind of model architecture: http://blog.siliconvalley-codecamp.com/2012/04/15/subject-code-camp-v7-october-78-2012/
17:18 < mscdex> llappy: i don't believe so, but you can certainly re-use the request handler
17:18 < RLa> jQuy, :)
17:18 < mscdex> llappy: http.createServer(handler).listen(1234); http.createServer(handler).listen(1235);
17:19 < llappy> mscdex, what about with sticky-session?
17:19 < mscdex> llappy: sticky session?
17:19 < llappy> a module for using Socket.io with Cluster
17:19 < mscdex> etcetera: huh?
17:20 < llappy> also, I'm using socket.io, and that's probably relevant
17:20 < jQuy> RLa: eteenpäin :)
17:21 < etcetera> mscdex: curious to see whether the opinion is better to do a cleaner model.
17:21 < mscdex> llappy: i'm not familiar with that module, but indutny does pop in here from time to time
17:21 < etcetera> mscdex: where the model does not contain methods.
17:22 < etcetera> I'm wondering whether the repository pattern is better?
17:22 < mscdex> etcetera: i think i'm missing something here... you linked to a code camp
17:22 < etcetera> mscdex: whooops.
17:22 < etcetera> https://github.com/alessioalex/Nodetuts/blob/master/express_samples/products.js
17:23 <@isaacs> ben_alman: hey
17:23 < ben_alman> did you see the issue i filed?
17:23 < ben_alman> i figured it out
17:23 < ben_alman> https://github.com/isaacs/npm/issues/2726
17:23 <@isaacs> ben_alman: that issue with running npm inside of nave the other day... were you running nave as an npm script?
17:24 <@isaacs> oh, ok
17:24 < etcetera> mscdex: I mean this model architecture pattern: https://github.com/alessioalex/Nodetuts/blob/master/express_samples/products.js
17:24 < ben_alman> isaacs: this is definitely a reproducible issue
17:24 <@isaacs> ben_alman: kewl.
17:24 < ben_alman> might not be worth addressing though
17:24 < ben_alman> you'll see
17:24 <@isaacs> ben_alman: so the issue is that it thinks ~ is the prefix, due to the node_modules folder being there
17:24 < ben_alman> yep
17:24 < mscdex> etcetera: this is all in-memory only?
17:25 < etcetera> mscdex: well that's dummyd ata.
17:25 < ben_alman> it seems like this could be a common mistake
17:25 < ben_alman> i'm surprised you don't have more issues against it
17:25 < ben_alman> or maybe i'm just speshul
17:25 < etcetera> mscdex: assume it's actually plugged into a data store.
17:25 <@isaacs> ben_alman: was there a node_modules folder in /Users/cowboy/Dropbox/Projects/Repos/cowboy/grunt already?
17:26 < ben_alman> yes but i tried it without and it did a npm install there and failed on the link
17:26 < context> is there a module where i can add callbacks to it or something, and i want a certain callback to get called when they are all done
17:26 < context> getting form data, need to save multiple records to db, just want one callback to get called when they are all done
17:27 < mscdex> etcetera: i'm confused as to the goal of this. are you building some kind of db-abstracted model? if not, why not use the driver directly (e.g. mongo, redis, etc)?
17:27 < etcetera> mscdex: because I like to use a proper model pattern.
17:28 < mscdex> etcetera: well, personally i'd just create a real model "class"
17:28 < pringlescan> ever since I published something on NPM now it says I don't have permission to install other modules?
17:28 < etcetera> mscdex: right without the data access members?
17:29 < etcetera> mscdex: is there a generic repository pattern that is possible in node?
17:29 < mscdex> etcetera: right, the model instances wouldn't be per-result
17:31 < ihdev> mscdex: so I can get node to run on just fine with /usr/local/bin/node/node
17:31 < tomshreds> noob question: how do I get arguments passed by CLI? like mytool myargument. what's the function to get myargyment?
17:31 < mscdex> tomshreds: process.argv
17:31 < Sembiance> tomshreds: process.argv
17:32 < tomshreds> ahh yeah thanks
17:32 < mscdex> :-)
17:32 < Sembiance> tomshreds: look into using some modules to help, such as https://github.com/substack/node-optimist/
17:32 < tomshreds> oh dang:   Storage server temporarily offline. See http://status.github.com for GitHub system status.
17:32 < mscdex> ihdev: node/node ?
17:33 < tomshreds> Sembiance: oh thanks for this is gonna help
17:33 < Sembiance> tomshreds: :)
17:34 < ihdev> mscdex: yup its the node command I guess? If I cd there and run ./node it works
17:34 < mscdex> ihdev: it should just be /usr/local/bin/node
17:34 < mscdex> ihdev: you didn't ./configure with a --prefix ?
17:34 < tomshreds> gh status tells me its all up but: https://github.com/tbergeron/ncore
17:34 < ihdev> mscdex: ? i guess not, how should I have done it?
17:35 < mscdex> ihdev: it's not that big of a deal really, i'm not sure how it got installed to such an odd path
17:35 < mscdex> ihdev: just make sure that is in your $PATH
17:35 < mscdex> ihdev: PATH=/usr/local/bin/node:$PATH node -v
17:36 < ihdev> mscdex: so that assigns the node command to the path variable… wants the -v flag for?
17:36 < ihdev> *whats
17:36 < mscdex> ihdev: just to test that node actually works after adding to your path
17:37 < mscdex> ihdev: wait, so /usr/local/bin/node points to your node executable?
17:37 < mscdex> ihdev: in that case PATH=/usr/local/bin:$PATH node -v
17:37 < ihdev> mscdex: /usr/local/bin/node/node points to the executable
17:38 < mscdex> ok
17:39 < mscdex> ihdev: if the previous line works, append to your ~/.bashrc: export PATH=/usr/local/bin/node:$PATH
17:39 < ihdev> mscdex: so it returned 0.9.1-pre so I know its on there
17:40 < ihdev> mscdex: did that, no effect… when i hit node it still says command not found but ./node (from the /usr/local/bin did) runs fine
17:41 < mscdex> ihdev: ok.... heh..... then use `export PATH=/usr/local/bin:$PATH` instead
17:42 < ihdev> tada!
17:42 < ihdev> similar steps for npm?
17:42 < ihdev> im guessing
17:42 < ihdev> whereas npm >> /usr/bin/npm
17:43 < ihdev> hmm I can't cd to that dir
17:43 < ihdev> any suggestions?
17:43 < ihdev> cd /usr/bin/npm
17:43 < ihdev> no such file or dir
17:45 < mscdex> ihdev: npm should be in the same /usr/local/bin path
17:45 < ihdev> hmm
17:46 < ihdev> export PATH=/usr/local/bin:$PATH
17:46 < ihdev> thats in my bashrc
17:46 < ihdev> node works globally
17:46 < ihdev> npm works nowhere
17:47 < mscdex> ihdev: when building did you use `./configure --without-npm` ?
17:47 < ihdev> yes
17:47 < mscdex> that's why :-)
17:47 < ihdev> :)
17:47 < ihdev> so reinstall with the npm flag?
17:48 < mscdex> ihdev: either reinstall without that flag, just `./configure`, or install npm separately
17:49 < ihdev> oh nm
17:49 < ihdev> i did not use that flag
17:49 < ihdev> sry
17:49 < ihdev> i misread
17:49 < ihdev> haha
17:49 < mscdex> :S
17:51 < php_master> can someone help me turn a slowbuffer into a buffer+
17:51 < php_master> ?*
17:51 < mscdex> ihdev: not sure why it didn't install npm also.... but you can install it manually anyway: download https://npmjs.org/install.sh and execute that
17:59 < milani> why npm uses google search 
17:59 < Sembiance> milani: temporary until they switch to bing for search
17:59 < milani> it's not able to find all packages this way I guess.
17:59 < milani> no difference. those engines cant search in npm registry
17:59 < milani> and find new packages.
18:00 < Sembiance> milani: https://github.com/isaacs/npm-www/issues/62
18:01 < php_is_the_best> anyone know how to change slowbuffers to buffers?
18:02 < milani> Sembiance, thx. I don't know how bing can search in the registry if no one ever seen a module
18:02 < milani> like how it index that module in its database.
18:02 < milani> php_is_the_best, I thought slowbuffers are internal and shouldn't be used in modules.
18:03 < Sembiance> I don't even know what a 'slowbuffer' is rofl
18:03 < php_is_the_best> milani: yes. i am writing a C++ add on, and i have a character array. I DO NOT WANT TO TURN IT TO UTF8. i have no idea how to expose it as a buffer to the js
18:03 < ihdev> alright - /usr/local/bin/node/node -v works… so I know node is in there, but for some reason I can no longer run node globally. my .bashrc and .bash_profile both have export PATH=/usr/local/bin:$PATH
18:04 < milani> php_is_the_best, putting that into a buffer doesn't mean it will be utf8
18:04 < milani> you can set the encoding.
18:04 < bradleymeck> ihdev `command -v node`
18:05 < php_is_the_best> milani: the Buffer constructor in V8 is overloaded. anything passed to it that is not a v8 string is automatically converted to a SlowBuffer
18:05 < milani> ihdev, /usr/local/bin/node/node ??
18:05 < milani> it should be /usr/local/bin/node
18:05 < tomshreds> hey guys, how can I make a for loop that calls some async function. and make it wait for the async function to be done before proceeding with the next thing in the loop?
18:05 < ihdev> milani: yes, when I cd to usr/local/bin/node I have to run ./node to make it go :)
18:05 < bradleymeck> tomshreds require('async') from npm
18:06 < ihdev> I've got npm installing as sudo
18:06 < milani> php_is_the_best, I guess slow buffer turns into a buffer automatically. I'm not sure.
18:06 < ihdev> it just won't work as a regular user, I have to modify the bash_profile?
18:06 < php_is_the_best> milani: no it does not
18:06 < milani> ihdev, there should not be a node folder there. it should be node exec. how did u install node itself?
18:06 < tomshreds> bradleymeck: is this what you're talking about https://github.com/caolan/async/ &
18:06 < tomshreds> ?
18:07 < bradleymeck> yes
18:07 < tomshreds> ok thanks
18:07 < ihdev> ./configure, make, sudo make install with no flags, built from source followed this tutorial minus npm since it comes with it now http://iconof.com/blog/how-to-install-setup-node-js-on-amazon-aws-ec2-complete-guide/#installNode
18:07 < ihdev> but it didn't work well so now I"m building npm
18:08 < ihdev> oh and I have 0.9.2 or something, not .6
18:09 < milani> php_is_the_best, can you show me the overload ?
18:09 < milani> I mean where in node overrides v8 functions?
18:10 < php_is_the_best> milani: locate the v8 api via google
18:10 < milani> ihdev, hmmm. try adding /usr/local/bin/node to your path.
18:10 < ihdev> the problem is when I try to sudo make install npm I get an error "node not found"
18:10 < ihdev> its in there for sudo so thats working
18:10 < ihdev> node -v works
18:10 < milani> php_is_the_best, if it is v8, there is no slowbuffer there. slowbuffer is a node thing.
18:10 < ihdev> can I point npm to node somehow?
18:11 < Sembiance> ihdev: node should be part of your path?
18:11 < ihdev> yup /usr/local/bin/node
18:11 < php_is_the_best> milani: it's in the node namespace..... 
18:11 < ihdev> and /usr/local/bin
18:11 < jQuy> How can I put files on node.js server?
18:11 < ihdev> is part of $PATH
18:12 < ihdev> jQuy: are you thinking of functionality similar to ftp? node doesn't quite work like that...
18:12 < milani> ihdev, check exec permissions.
18:12 < jQuy> I'm talking about front end files like index.html and some js files
18:12 < milani> jQuy, you are talking about static file server
18:12 < ihdev> milani: for which file? 
18:12 < jQuy> ihdev: hi, can you help me?
18:13 < milani> ihdev, node executable. if it works with sude, then its permission problem.
18:13 < ihdev> jQuy: happy to try, but if you ask a global question you get the wisdom of the group, trust me I am far from well exerpeienced :P
18:13 < jQuy> I have mongoDb running and node.js running
18:13 < ihdev> milani: just "node" works… but for some reason the npm installer can't find it
18:14 < bradleymeck> ihdev are you trying to run 0.9 on purpose, it is an unstable branch to begin with
18:14 < ihdev> I am running as root, but I'm running sudo make install
18:14 < jQuy> I have managed to create REST api for front end
18:14 < RLa> jQuy, see express' static middleware
18:14 < ihdev> I just compiled latest from git, I suppose I could checkout an earlier branch, whats the latest stable?
18:14 < milani> jQuy, RLa, there are some stand alone static file server modules for node
18:14 < tomshreds> bradleymeck could you tell me if this is right? https://gist.github.com/3372274 because it seems like directories are not created in the correct order
18:14 < RLa> or if you use restify, check for static file serving modules
18:14 < RLa> yes
18:15 < jQuy> If I can't put front end files on node.js server then I have to do cross domain request
18:15 < bradleymeck> tomshreds: you forgot to have a next() argument in createDirectory and they wonts be done in order unless you do something like async.forEachSeries
18:16 < tomshreds> oh
18:16 < other_guy> Okay, so with some assistance from benblack we isolated a bug in the node.js http/https request clients.
18:16 < other_guy> The problem is that DELETE requests should neither be flagged as transfer-encoding: chunked
18:17 < other_guy> nor should they contain a body
18:17 < tomshreds> bradleymeck: do you have any example of this for me please? on the github page i dont see anything relevant
18:17 < jQuy> milani: I just need to get data from REST api for AngularJS
18:17 < milani> jQuy, you can combine your REST api with a static file server. just search github or npm registry, you will find a lot:)
18:17 < jQuy> milani: that's new area for me
18:18 < draginx> whats the best way to load a config file specified by the subdomain in expressjs?
18:18 < milani> jQuy, don't worry start it, its not difficult.
18:18 < draginx> like if i have name.domain.com and I have a name.json file
18:19 < jQuy> milani, like this one https://gist.github.com/701407 ???
18:20 < milani> jQuy, yeah something like that.
18:20 < milani> jQuy, I once saw a tutorial on how to combine restify and express.
18:20 < jQuy> milani: So I must run node.js server AND that one?
18:20 < milani> no no.
18:21 < milani> you set a route on your restify 
18:21 < milani> on then pass file contents to it.
18:21 < milani> like routing / to index.html
18:21 < milani> and then combine this static file server with your restify server. 
18:21 < milani> let me find an example.
18:22 < jQuy> milani: :D
18:22 < jQuy> milani: so I have to tell node.js where are my front end files?
18:22 < jQuy> milani: in other words
18:23 < jQuy> milani: at the moment the front end files (index.html and index.js) area on my computer (not on any server)
18:24 < jQuy> milani: *are
18:25 < milani> jQuy, https://gist.github.com/1056404
18:25 < milani> jQuy, https://github.com/mcavage/node-restify/issues/28
18:25 < milani> here we go!
18:27 < scttnlsn> are there many folks here doing freelance work with node?
18:27 < jQuy> milani: I'm still confused
18:27 < jQuy> milani: this is so new to me
18:27 < Sembiance> scttnlsn: not I. But I can say that I am indie game developer and use node.js in all my projects, so in a way, node is supporting my self-employment ;)
18:27 < Sembiance> node is awesome :)
18:28 < milani> jQuy, look at https://gist.github.com/1056404#L61
18:28 < jQuy> milani, do I have to add some of that code into my node.js app.js file?
18:28 < milani> look at line 61
18:28 < jQuy> milani: I'm looking at that
18:28 < scttnlsn> Sembiance: that's awesome...i'm wishing i could find more node projects out there
18:28 < milani> jQuy, there you see if the request refers to media/img
18:29 < milani> and use a wildcard ( * ) to match all files in that folder.
18:29 < scttnlsn> Sembiance: most are full time gigs
18:29 < milani> if the request is referring to this address, you read the file contents
18:29 < jQuy> milani, I'll copy one block of that code to my js-file
18:29 < milani> and send them back as the response with proper headers.
18:29 < Sembiance> scttnlsn: I was lucky enough to have a popular web game that brings in the bucks. so I'm not familiar with the node contractor work atmosphere
18:30 < Sembiance> node.js is so rock solid, guess companies don't need to contract out for help :)
18:30 < jQuy> milani: log is not defined
18:30 < scttnlsn> Sembiance: haha
18:30 < jQuy> milani, maybe the log is some package that I have to import using npm
18:31 < milani> jQuy, don't copy paste the code:) learn from it and implement your own.
18:32 < milani> its good to learn in this way:)
18:32 < jQuy> milani: why there is that log.w3c?
18:32 < jQuy> I don't get it
18:32 < milani> jQuy, I don't know in depth how restify works 
18:32 < milani> can you show me your code? gist it
18:33 < milani> jQuy, also take a look at https://github.com/mcavage/node-restify/issues/101
18:33 < milani> it helps you understand what is going on
18:35 < yati> Hi. I have downloaded the linux 32 bit binaries and have symlinked to them. Now, require('process') does not work saying the module can't be found. Any insight?
18:35 < jQuy> milani: thanks for the links
18:36 < milani> np:)
18:36 < jQuy> milani: I'm too tired to continue now
18:36 < jQuy> milani: I have to go home
18:36 < jQuy> milani: maybe I can continue tomorrow :)
18:37 < jQuy> milani, thanks a alot
18:37 < milani> jQuy, yeah just read node docs those explaining fs modulke
18:37 < milani> * module
18:37 < myndzi> hey it's pretty cool when gzip always zips things
18:37 < milani> and http module. then try serve static files without restify. it helps you understand the code
18:37 < myndzi> i dunno what the npm module 'gzip' is doing but it sucks and hasn't been updated in 2 years, it doesn't deserve the name :(
18:37 < jQuy> milani, this is the last thing of creating node.js app
18:37 < milani> after that add restify and combine them together
18:37 < milani> jQuy, good luck
18:38 < jQuy> milani: I already have mongodb and node running and REST service skeleton is ok in theory
18:38 < jQuy> milani, thanks
18:39 < bradleymeck> yati wtf does require('process') do? you mean just process?
18:40 < yati> oh process ain't a module? Ah I really need to re-read the docs
18:40  * yati curses the forgetfulness of a sleepy brain
18:41 < mAritz> console and process aren't. everything else is. (i think)
18:45 < tomshreds> Hey while doing a CLI tool I'm having a little problem. Since it's located in usr/local/bin the __dirname is /usr/local/bin. But how the hell can I manage to make it the current directory?
18:46 < bradleymeck> tomshreds: use process.cwd()
18:46 < tomshreds> bradleymeck: so should I change all __dirname for process.cwd() ?
18:46 < tomshreds> in my package
18:46 < bradleymeck> generally no
18:46 < bradleymeck> generally your binary should load a file that can do relative path lookups
18:47 < bradleymeck> binaries move around a lot via symlink
18:47 < bradleymeck> and hardlink even
18:47 < mscdex> mAritz: console is a module :-)
18:48 < tomshreds> oh yeah right
18:48 < php_is_the_best> :D
18:49 < mscdex> node_is_the_best!
18:53 < klawd_prime> hi! is there a module skeleis there a primer on module exports somewhere?
18:53 < klawd_prime> i just want to export a class
18:53 < klawd_prime> well, that came out wrong. heh
18:53 < klawd_prime> how do i export a single object?
18:54 < mscdex> klawd_prime: module.exports = {};
18:54 < klawd_prime> this could be anything?
18:54 < mscdex> yep
18:54 < klawd_prime> ok, thanks
18:55 < klawd_prime> so, i'm returning a prototype but it seems i can't dereference it right away
18:56 < mscdex> eh?
18:58 < tomshreds> If I install a package globally. While executing a binary from this package, how do I get the package directory?
18:58 < tomshreds> dirname == /usr/local/bin
18:58 < tomshreds> cwd = current dir
18:59 < klawd_prime> http://pastebin.com/H4YTJ8Pv
18:59 < klawd_prime> these should be equivalent, yes?
19:01 < mscdex> klawd_prime: no
19:01 < EhevuTov> klawd_prime, nah, it depends on what that module returns, too
19:02 < klawd_prime> it returns a function
19:02 < igl> is it a function or a constructor
19:02 < igl> ;)
19:02 < igl> not the same
19:02 < klawd_prime> what's the difference?
19:02 < klawd_prime> i mean: i know what a ctor is, just not what makes a function a ctor in js
19:03 < igl> the new keyword
19:03 < igl> thats it
19:03  * Determinist mumbles
19:03 < mscdex> mumbles.js
19:03 < Determinist> TypeError: Cannot call method 'destroy' of undefined <--- my server keeps crashing with this every now and then. node 0.8.7. any ideas?
19:03 < mscdex> Determinist: modules?
19:03 < klawd_prime> igl: can you show that in code?
19:03 < Determinist> mscdex: sec
19:03 < klawd_prime> how would i export a ctor?
19:04 < Determinist> mscdex: "node-uuid": "~1.3.3","async": "~0.1.22","ejs": "~0.8.0","underscore": "~1.3.3","express": "~3.0.0rc1","winston": "~0.6.2","less": "~1.3.0","request": "~2.10.0","sax": "~0.4.2"
19:04 < tomshreds> Hey guys, once a package has been 'npm install -g' it is supposed to be available system-wide eh? So if I do a require() of it anywhere it's going to work?
19:04 < Determinist> tomshreds: depends on your node environment settings
19:05 < tomshreds> Determinist what would prevent that to happen for example?
19:05 < mscdex> klawd_prime: function Foo(){}; var f = new Foo(); var f2 = Foo(); /* f !== f2 */
19:05 < tomshreds> ls
19:05 < Determinist> tomshreds: i have this in my .bashrc: NODE_PATH=/usr/local/lib/node_modules
19:05 < tomshreds> oh wrong window lol
19:05 < klawd_prime> i guess i really don't understand what the new keyword does exactly in js
19:06 < Determinist> tomshreds: i have this in my .bashrc: export NODE_PATH=/usr/local/lib/node_modules
19:06 < technocrat> tomshreds: lol
19:06 < Determinist> hehe
19:06 < Determinist> it happens
19:06 < shurex> Hi there, if someone had experience to make restify app more or less  mvc - style structured ? 
19:06 < igl> if you call a function, it returns "undefined" or whatever you want it to return with "return"
19:06 < tomshreds> oh so if you don't have it, it wont resolve the packages?
19:06 < Determinist> mscdex: any ideas?
19:06 < klawd_prime> yes.
19:06 < tomshreds> ooh you're right it works now thanks
19:06 < igl> if you call a function with "new" it returns a object defined as "this" inside of the function
19:06 < mscdex> Determinist: hard to say, use process of elimination or try using domains to track down the source of the error
19:06  * Determinist bows
19:07 < Determinist> mscdex: i was affraid you're going to say that :(
19:07 < klawd_prime> do i have to return this; in the function then?
19:07 < mscdex> Determinist: http://nodejs.org/docs/v0.8.7/api/domain.html
19:08 < Determinist> mscdex: haven't used those so far. this is production code... probably not the best place to start.
19:09 < mscdex> Determinist: of course, you should test this in development and try to reproduce the problem
19:10 < Determinist> mscdex: yeah, here's the problem tho. it doesn't happen on any of the dev environments, even under stress tests
19:12 < bradleymeck> Determinist: node version? our balancers saw that on the 0.6 branch
19:13 < styol> In the past I established that iterating over a large dataset using "for" caused blocking, so, I adopted a strategy that looped to the next iteration on process.nextTick. I've just noticed that it appears to iterate relatively slowly, approximately 1-2 seconds for each iteration. While this may indicate that something within each iteration is slow, if that is not the case, is this potentially indicative of a larger issue with the complexity of the appl
19:13 < Determinist> bradleymeck: 0.8.*. just upgraded to 0.8.7 in hope that's going to fix it. It didn't :)
19:14 < Determinist> my guess is that this is related to some exception that gets handled but leaves the request in a weird state.
19:14 < mscdex> styol: you're not avoid blocking by using process.nextTick
19:14 < mscdex> styol: you're just putting it off until the next tick
19:14 < draginx> Any idea http://pastie.org/private/qgfdvx1uhugq50r0frwga on how I can fix this?
19:15 < draginx> npm install pg wont work /
19:15 < styol> mscdex: I suppose an example of the replacement iteration would be useful.. let me try and abstract a simple example to help gauge if that is indeed the case
19:15 < gtodd> sorry for newbie q's but why/how would I use something like express instead of plack/django/plone to add apps and minimal cms like functionality (uploading etc) to an existing site?  Can node/express/(whatever) handle authentication and user admin or work with an upstream proxy like apache/nginx that handles that?
19:15 < mscdex> draginx: try npm -v install pg
19:16 < mscdex> that should get you more output
19:16 < draginx> 1.1.48
19:16 < draginx> capitali V
19:16 < draginx> gave me the same error
19:17 < mscdex> it builds/installs fine on linux
19:18 < draginx> right this is mac osx
19:18 < gtodd> handling sessions https etc. argh ... I like some of the node based server side js mvc frameworks but they seem more suited for smaller simple or internal projects than in the wild sites with user logins etc
19:18 < mscdex> styol: have you even tested if using a plain for-loop is actually a real problem in production?
19:19 < mscdex> styol: if so, one solution might be to use child processes to do the processing
19:19 < styol> mscdex: indeed, a large dataset provided to a for loop does appear to prevent anything else from occuring in the process during this iteration
19:19 < styol> mscdex: it is presently using core clustering but you are suggesting spawning another child to deal with that iteration to prevent blocking in the main process?
19:20 < AAA_awright> gtodd: You're looking for an application written with Node.js then
19:20 < mscdex> styol: it's one option, if it's something that is really blocking for that long. if you really want to keep it in-process, process the data in well-defined chunks instead of a bunch of deferred actions
19:21 < styol> mscdex: in a single core environment (or i guess any amount of cores) wont spawning an additional child potentially snatch up the available processing power for the original child?
19:22 < draginx> gtodd: klout and learnboost both use express
19:22 < draginx> if its good enough for them its good enough for you :P
19:22 < draginx> and Express comes with a VC automatically
19:22 < draginx> u just need to throw in ur own models system
19:22 < mscdex> styol: i doubt it, especially so with multi-core
19:22 < gtodd> hmm
19:24 < gtodd> draginx: so ... I  could plugin some kind of postgres module to get user info from (existing user info is in there) check to make sure the user is logged in and then let them have at the app
19:24 < draginx> You mean a basic sessions thing? O_o yeah..
19:24 < gtodd> draginx: like a "real" (old mature) cms mvc framework
19:25 < gtodd> :)
19:25 < draginx> lol, u think Rails is a "real" MVC framework I presume?
19:25 < AAA_awright> gtodd: What's so appealing about one written using Node.js?
19:25 < draginx> You will never get that with Javascript / at least in NodeJS
19:25 < draginx> u need to export
19:25 < draginx> although there is railwayjs..
19:26 < styol> mscdex: interesting, may have to adopt that strategy indeed. Just for the sack of clarity on what I was referring to earlier, here is a simple example of what I am doing presently http://pastie.org/4523094
19:26 < styol> *sake
19:27 < draginx> gtodd: http://railwayjs.com/
19:27 < mscdex> styol: why the loop.bind ?
19:27 < styol> mscdex: honestly this was recommended by someone else here and I failed to ask about that aspect, I'm not sure why
19:27 < gtodd> AAA_awright: just looking at what's out ther for adding simple apps  features to an existing site ...  so someoldsite.com/news (djangoperl/cgiapp) can have someoldsite.com/news/user/photos someoldsite.com/news/user/photos/upload someoldsite.com/news/user/photos/delete etc
19:28 < gtodd> draginx: hmm
19:28 < draginx> only reason why I dont use railway is because of no pgsql support
19:28 < gtodd> AAA_awright: node seems fast and easy to write to and deploy
19:29 < draginx> o wait jugglingdb does support pgsqlO_o
19:29 < mscdex> styol: anyway, binding can be slower than a closure, at least the last time i checked
19:29 < styol> mscdex: should just be process.nextTick(loop(n+1)); right?
19:29 < mscdex> styol: but yeah, chop the job into chunks or use a worker
19:29 < bradleymeck> anyone know of a good way to deal with multipart boundaries if you don't know the content of a stream?
19:30 < mscdex> styol: no, you'd have to use a closure, like: `process.nextTick(function(){loop(n+1)})`
19:30 < styol> mscdex: ahh now i see what you mean
19:30 < styol> mscdex: thanks for the suggestions mscdex. much appreciated
19:32 < tprice> Im looking at mikeal / request can i post a file with it?
19:32 < mscdex> tprice: i believe so
19:32 < tprice> any example of it?
19:34 < mikeal> fs.createReadStream(request.put(url))
19:34 < mikeal> whoops
19:34 < tprice> oh really that easy?
19:34 < mikeal> fs.createReadStream(file).pipe(request.put(url))
19:34 < mikeal> yup, it'll set the content-type for you based on the file extension
19:35 < mikeal> if you want to know when it's done
19:35 < mikeal> var r = request.put(url)
19:35 < mikeal> fs.createReadStream(file).pipe(r)
19:35 < mikeal> r.on('end', function () {})
19:35 < tprice> cool thanks
19:36 < tprice> oh its right on the front page
19:36 < tprice> i see
19:38 < bradleymeck> mmmm how do people deal with multipart encoding boundaries on extremely large files, it seems there is no way to present that the previous boundary should be ignored similar to adding a \ in a string...
19:39 < mikeal> multipart still sucks
19:39 < mikeal> and i'm not going to attempt to fix it until read() Streams are in
19:41 < bradleymeck> mikeal: im not even sure how to fix it after rereading the rfc
19:42 < bradleymeck> just states that the boundary cant be in the message, but i dont want to read 40GB… to see if the boundary exists...
19:42 < mikeal> you should use a UUID
19:42 < mikeal> and pray
19:43 < bradleymeck> fun
19:45 < mscdex> draginx: fwiw i was able to install pg on my osx 10.6 machine with node 0.8.7
19:45 < mscdex> and npm 1.1.49
19:45 < draginx> mscdex: yeah my problem is having python 2.5
19:45 < draginx> i need to upgrade to 2.6+
19:46 < mscdex> yeah, that is a problem :)
19:46 < draginx> :)
19:46 < draginx> im surprised mountain lion didnt upgrade me
19:46 < mscdex> i don't think node supports anything older than 2.6 anymore....
19:46 < tprice> bradleymeck I would put a limit on that file size 40gb is way over kill brake it down to 2gb or soemthing
19:48 < bradleymeck> tprice might be able to but still have to check all the parts for their boundaries and abort if any of them fail
19:48 < bradleymeck> may just swap to websocket for this… which is shameful...
19:48 < bradleymeck> but its not in browser so w/e
19:49 < mscdex> bradleymeck: if you're extra paranoid, why not use (parts of) felix's multipart parser to check ?
19:49 < tprice> bradleymeck yes but 2gb over 40 is much better, at the end of the day you cant help it
19:50 < bradleymeck> mscdex: i can just run a simple for loop to check and it would be faster probably. tprice its going to be generated data from a cluster but keeping it temporarily like that would be ok
19:51 < mscdex> bradleymeck: felix's parser uses Boyer-Moore i believe, which should be more efficient in searching
19:51 < bradleymeck> fancy dont have to write my own
19:57 < riot_> Hi all, i'm new  to node.js so i wanted to learn starting from the basics, anyone of you could help?
19:58 < mscdex> riot_: http://nodebeginner.org/ http://nodetuts.com/ http://nodeguide.com/ http://howtonode.org/
19:59 < riot_> mscdex, thanks a lot man!
19:59 < mscdex> riot_: just watch out for references to older node versions, as some things may have changed
20:00 < someone1> Hi. Has anyone tried to use node.js with buildroot ? I have arm processor and have problems compiling for it. When I use configure --dest-cpu=arm I still got version for non-arm :/
20:01 < riot_> mscdex: i'll keep it in mind
20:02 < someone1> OK. Maybe start with some simpler question: how to configure node.js for specific arm architecutre? Like armv7 or armv8 and so on ?
20:04 < TooTallNate> someone1:  `./configure --dest-cpu=arm` should to the trick
20:04 < TooTallNate> are you cross compiling?
20:07 < someone1> TooTallNate: I hope so. How to check am I doing that properly ?
20:07 < TooTallNate> someone1: you probably need to set the CC and CXX env variables to the proper cross-compilers
20:07 < TooTallNate> instead of your system ones
20:09 < bradleymeck> isaacs: can we get a minor bump on npm since it no longer like 0.6?
20:11 < someone1> Is there any additional steps needed between configure and make ?
20:11 < filenotfound> Nobody has made a Node.JS module for aspell or anything like that?
20:12 < filenotfound> I need to use something offline, not via API call.
20:12 < someone1> TooTallNate: Is there also some env variable for the linker ?
20:12 < TooTallNate> someone1: LINK I tihnk
20:13 < TooTallNate> `LINK=gnu-arm-ld` or whatever
20:13 < TooTallNate> but you probably want to just set that to whatever g++ is
20:16 < tprice> has anyone use restify?
20:16 < tprice> how do i post a file to it?
20:17 < llappy> Anyone here use sticky-session?
20:18 < llappy> I need to know if it's possible to listen on 2 different ports with Socket.io/sticky-session
20:25 < someone1> I've got a problem when I setup CC and CXX variables: NameError: name 'arm_neon' is not defined while evaluating condition 'arm_neon!=1 and arm_fpu!="vfpv3" and arm_fpu!="vfpv3-d16"'
20:25 < someone1> This is from configure
20:26 < brianc1> i want the new readable stream interface nooooowwwwwwwww
20:26 < brianc1> i wish I could halp out in some way
20:27 < klawd_prime> hi! i'm working with nano right now and i see a lot of asynchronous code. it wants me to pass callbacks to everything but i want it to wait til it finishes
20:27 < klawd_prime> is there a pattern for that?
20:28 < bradleymeck> klawd_prime: look at async from caolan
20:28 < klawd_prime> will google, thanks
20:29 < jQuy> Hieman
20:29 < jQuy> Hi
20:30 < evelyette> hi, I'm interested if websockets need to operate over HTTP, or can they operate directly over TCP ?
20:31 < EhevuTov> evelyette, I'm pretty sure they operate solely on an upgraded HTTP
20:32 < tprice> can someone help me with express/request https://gist.github.com/3373399
20:32 < tprice> req.files === undefined
20:32 < EhevuTov> evelyette, although, you can do a simple websocket server and transmit binary data; it doesn't have to be text data anymore
20:32 < jQuy> Can you suggest some static file server solution?
20:33 < evelyette> EhevuTov, but I have to use HTTP ?
20:33 < EhevuTov> jQuy, I think Connect recently released a module for static file serving
20:33 < EhevuTov> evelyette, I'm pretty sure WS uses HTTP for the handshake, but not sure
20:34 < EhevuTov> evelyette, what's your problem
20:34 < llappy> Web Socket is an upgraded HTTP, yeah
20:34 < tprice> anyone?
20:34 < evelyette> does anybody have an experience connecting together node.js with android application ?
20:34 < evelyette> I would love an example to check out how it works
20:34 < bradleymeck> evelyette: the begin as http then move to a message framed protocol over tcp basically
20:34 < llappy> evelyette, if you want to link an application to Node.js, it may be a good idea to just use a raw TCP socket
20:35 < jQuy> Connect ? Throw me url :)
20:35 < llappy> web sockets are for? web
20:36 < evelyette> llappy, aha so I should use node.js only for applications that are being displayed/interacted in a web browser?
20:36 < Pilate> no, web sockets
20:36 < llappy> evelyette, no, Node.js is fine for this
20:36 < llappy> (probably)
20:36 < llappy> web sockets, not so much
20:37 < bradleymeck> evelyette: i almost never use something that touches a browser and im full time node
20:37 < llappy> web sockets are for web browsers; Node.js is for just about anything (excepting large amounts of calculations)
20:37 < evelyette> I'm not getting it ... can somebody first explain to me the difference between websockets and node.js ?
20:37 < evelyette> aha
20:37 < Benvie> node is for desktop applications too https://github.com/appjs/appjs
20:37 < llappy> Node is crap for large uses of GPU/CPU, but for anything else, it's great
20:38 < evelyette> so websockets operate over HTTP, and node.js can operate over TCP too?
20:38 < llappy> evelyette, Node.js doesn't "operate" over anything. Node.js is a scripting language, not a protocol.
20:38 < bradleymeck> evelyette: node is a programming environment, you can think of it as java or c# w/e, its JS with a standard library that is outside of the browser
20:39 < llappy> well, not a language really
20:39 < llappy> JS is the language
20:39 < llappy> bradleymeck++
20:39 < RLa> and yes, node supports sockets, including tcp communication through them
20:40 < evelyette> so I could use plain TCP connections when linking an android app + node.js (on server) together ?
20:40 < bradleymeck> ye
20:40 < bradleymeck> yes* even
20:41 < evelyette> is there an example how to do that?
20:41 < RLa> but why would you want to do that
20:41 < RLa> you would have to come up with your own communication protocol
20:41 < DTrejo> anyone know how to list how many listeners are listening in my whole node process?
20:41 < llappy> I keep calling Node.js a language; it's not; it's a framework for running JS outside of a browser
20:42 < llappy> DTrejo, AFAIK, there's no native way to do that. lsof may be able to help
20:42 < bradleymeck> DTrejo not if its live :-/ if you want to override .on at the start of your app you could tell fairly easy
20:42 < llappy> (lsof -i, grep for your PID)
20:42 < evelyette> RLa, yeah that's whay I want to do
20:42 < RLa> evelyette, anyway, check out net module docs: http://nodejs.org/api/net.html
20:42 < DTrejo> bradleymeck: yes, i meant event emitter listeners. Okay will thing about that
20:42 < DTrejo> thanks llappy
20:43 < jQuy> How can I use Connect middleware (static file server) with restify?
20:43 < TooTallNate> someone1: maybe try "GYP_DEFINES='arm_neon=1 arm_ arm_fpu=vfpv3' CC=… CXX=… ./configure"
20:43 < TooTallNate> or perhaps more appropriate values for those 
20:44 < TooTallNate> depending on the hardware you're compiling for
20:45 < someone1> TooTallNate: thnx I've already hacked that .gyp file
20:45 < TooTallNate> someone1: ok, so you're good then?
20:45 < someone1> changed the rule to 0!=1 from arm_neon blah blah blah
20:45 < klawd_prime> bradleymeck: i don't see how async will help me :|
20:45 < astropirate> Anyone looking for a freelance JS/jQuery/Node.js/Qt developer? PM me :)
20:45 < evelyette> one more questions: how does socket.io fit into all this?
20:45 < TooTallNate> someone1: is it compiling now?
20:45 < jQuy> Do I have to create two servers? Restify-server and static file server?
20:46 < klawd_prime> bradleymeck: i have a test for a nano wrapper. i want to create a document, then read it. both create and read expect callbacks
20:46 < someone1> TooTallNate: no :/ now my cross-comp complains about in6addr_any’ undeclared (first use in this function)
20:46 < bradleymeck> async.forEach all of the things you want to do , then add it your final function at the end. you will be using callbacks any way you slice it
20:46 < bradleymeck> klawd_prime: ^
20:46 < TooTallNate> someone1: i'm not sure about that one, sorry
20:46 < TooTallNate> someone1: you should open a mailing list thread
20:47 < someone1> So I ahve to enable IPv6 but not sure is it in kernel or uclibc
20:47 < bradleymeck> klawd_prime: callbacks are part of JS, you cannot truly get rid of them without blocking CPU or stalling
20:47 < TooTallNate> what hardware is this for anyway?
20:47 < klawd_prime> bradleymeck: thing is, i WANT to stall. i want to wait for the request to go through before i go on
20:47 < bradleymeck> klawd_prime: you wont ever have your action complete, its an event loop
20:48 < bradleymeck> use a callback
20:48 < someone1> TooTallNate: http://pl.farnell.com/circuitco/bb-bone-000/kit-dev-beaglebone-cortex-a8/dp/2063627
20:48 < klawd_prime> hmmm...
20:49 < klawd_prime> i can't wrap my head around this resulting in clean code and yes, i read the link in the topic
20:50 < evelyette> RLa, can I use socket.io to connect to net module on server from android client ?
20:50 < klawd_prime> bradleymeck: i'll write something up
20:50 <@isaacs> bradleymeck: yeah, i've been meaning to just make read work with 0.6
20:50 < bradleymeck> klawd_prime: just doing have functions do too many things and its pretty easy for it to stay maintainable
20:50 < bradleymeck> s/doing/dont/
20:50 < RLa> evelyette, yes, but you might want to look at dnode
20:51 < RLa> socket.io's client side is more for browsers
20:51 < RLa> i think dnode is just one-line json over tcp
20:51 < evelyette> RLa, so node.js is for server, whereas socket.io is for clients ?
20:52 < RLa> no, it's module that helps to connect both
20:52 < evelyette> RLa, you mean this: https://github.com/aslakhellesoy/dnode-java
20:52 < RLa> it has both code for node and browser
20:53 < RLa> and this: https://github.com/substack/dnode
20:54 < klawd_prime> bradleymeck: http://pastebin.com/Q0YQvb71
20:54 < klawd_prime> the first function was what i wrote initially
20:54 < klawd_prime> and i should redesign my stuff to look like the second?
20:55 < RLa> evelyette, if anything else fails you can just exchange one-line json messages
20:55 < draginx> Cannot GET / any idea why im getting this in railwayjs?
20:55 < RLa> evelyette, does android's "java" have json implemented in standard libs?
20:55 < evelyette> RLa, yeah
20:55 < RLa> i know its not in jre
20:56 < evelyette> RLa, what about: https://github.com/Gottox/socket.io-java-client ?
20:56 < The_Fly> hello, anyone had experience of using underscore templates with express? struggling to find info on how to include another view (as you can do with jade templates) 
20:56 < bentkus> how do I post variables with the request module?
20:57 < bradleymeck> klawd_prime: yes, get explicit. callbacks show when your functions are giving up control to some temporal event. in the first it looks like a waterfall but you dont see whats going on, in the second you see whats going on. the preference in view is based on personal opinion but i far like explicit over unknown/implicit
20:57 < bradleymeck> anyway im off
20:57 < RLa> evelyette, no idea, haven't used
20:57 < evelyette> RLa, when I try to connect to the net module server (node.js) I get the following error: io.socket.SocketIOException: Error while handshaking
20:58 < RLa> evelyette, you use that telnet example?
20:59 < evelyette> RLa, yeah
20:59 < RLa> can you connect with telnet to it?
21:00 < mscdex> evelyette: the net module is plain tcp, it doesn't understand socket.io
21:00 < evelyette> RLa, yes
21:00 < RLa> you could also paste whole stacktrace somewhere
21:00 < The_Fly> hrmm, i guess everybody is sticking with jade for express. cant seem to find anything on how to do a #include under express+underscore
21:00 < evelyette> mscdex, so what is socket.io exactly ?
21:00 < mscdex> evelyette: socket.io is a high-level abstraction layer that supports browser transports and websockets
21:01 < RLa> evelyette, are you using plain tcp sockets to connect telnet example or something else?
21:01 < evelyette> RLa, http://dpaste.com/787474/
21:01 < evelyette> RLa, yes I'm using plain TCP
21:02 < RLa> can you paste your node code as well
21:03 < evelyette> RLa, node code: 
21:03 < evelyette> http://dpaste.com/787476/
21:03 < RLa> connection refused looks like wrong port/ip or node is not running
21:03 < evelyette> RLa, java code: http://dpaste.com/787478/
21:04 < RLa> evelyette, node says "server bound"?
21:04 < evelyette> RLa, yeah but the stacktrace clearly says it's trying to connect to localhost:3001, which is correct
21:04 < evelyette> RLa, yes it says that
21:05 < evelyette> mscdex, do you have any idea from the two examples I posted ?
21:05 < RLa> SocketIO socket <- is this really raw tcp or some socket.io stuff?
21:05 < filenotfound> Dammit, I just wrote a bunch of regular expressions and found remembered that Javascript doesn't support a ton of escape sequences :-(
21:05 < evelyette> RLa, I'm not sure, since I'm a beginning in all this
21:05 < RLa> uh
21:06 < RLa> well, we have no ideas about socket libs on android
21:06 < evelyette> do you have an example of java code that would connect to the node.js server correctly lying around ?
21:07 < RLa> no, i haven't done any java for years
21:07 < RLa> but i'm sure you will find examples when googling
21:07 < evelyette> so socket.io should only be used with web sockets ?
21:08 < RLa> usually yes
21:08 < Taar779_w> which is better and why: var temp = []; or var temp = new Array(); ?
21:08 < The_Fly> well, you fall back if you cant support websockets
21:08 < RLa> Taar779_w, former, with []
21:08 < timeturner> Java should be an illegal word in node.js
21:08 < timeturner> #node.js*
21:08 < evelyette> RLa, I've been googling, but didn't find anything useful, since I don't know the terms yet and don't know what to look for ...
21:09 < RLa> also, what android uses is not java
21:09 < klawd_prime> it's dalvik
21:10 < Taar779_w> Rla: why [] though?
21:10 < mscdex> evelyette: that java client uses websockets for the transport with a socket.io server
21:10 < RLa> http://www.helloandroid.com/tutorials/simple-connection-example-part-ii-tcp-communication
21:10 < mscdex> evelyette: all you should need is a standard socket.io server in node and then connect with that java client
21:10 < mscdex> evelyette: you don't need the net module or anything else
21:10 < RLa> here is a tcp example, quite verbose as java code usually is
21:11 < evelyette> mscdex, do you happen to know how to change the java client to connect to the bare TCP node.js ?
21:11 < mscdex> evelyette: if you want "bare tcp", then you're not using socket.io at all
21:11 < RLa> Taar779_w, more readable?
21:11 < mscdex> evelyette: and you're also not using websockets either
21:11 < evelyette> mscdex, yes I don't want socket.io (as it turns out)
21:11 < evelyette> RLa, I'll check it out
21:12 < mscdex> evelyette: i don't know or care enough about Java to show you how to write a tcp client, but in node it's super easy to write either a tcp server or client
21:12 < RLa> why would anyone use new Array()?
21:12 < DTrejo> What if.... github had chat integrated so you could talk to other devs
21:12 < The_Fly> less coding would be done
21:12 < RLa> mscdex, i can tell it's not in java
21:13 < mscdex> DTrejo: kind of like messaging.... oops wait they got rid of that ;-)
21:13 < DTrejo> more pull request merging might be done? The_Fly
21:13 < evelyette> mscdex, as far as I can see from the example RLa posted a link it's a simple Socket, and that's it
21:13 < The_Fly> hehe i was kidding, it could be cool
21:13 < DTrejo> but messaging was not the same as gchat
21:13 < The_Fly> as an optional feature
21:13 < RLa> mscdex, you would already need a thread to not block ui
21:13 < DTrejo> yes optional could be cool
21:13 < The_Fly> still need to hammer my question, anyone an express guru here?
21:13 < mscdex> DTrejo: i know, but if they don't want something as simple as messaging, i doubt they'd want "chat"
21:13 < DTrejo> then I could tell people whose pull requests i want to take to ask me on the github chit
21:13 < DTrejo> these days I tell them to get me in IRC
21:13 < RLa> evelyette, i think SocketIO would be better if you get it working
21:13 < DTrejo> or gchat me
21:13 < mscdex> RLa: eh? what's not in java?
21:14 < mscdex> evelyette: what is it you're trying to accomplish anyway?
21:14 < RLa> there are async server libs in java like netty but i haven't seen any clients
21:14 < evelyette> RLa, why is that ?
21:14 < RLa> no need to work with low-level sockets
21:15 < RLa> and threading
21:15 < evelyette> mscdex, RLa I'm trying to build a frontend for my rabbitmq backend ... the problem with connecting directly to rabbitmq from android clients is security related: each client uses the same rabbitmq username guest:guest, which makes it unsecure, since the clients can then read messages from any queue
21:16 < evelyette> with node.js I hope to abstract that ... so that clients connect only to node.js, which handles the rabbitmq
21:16 < RLa> try to set up socket.io on node
21:16 < RLa> and try again with your current code
21:16 < mscdex> evelyette: so all you need is a framing protocol, use websockets or something
21:16 < evelyette> RLa, and leave the client java code as it is?
21:17 < draginx> Can jugglingdb support postgres?
21:17 < RLa> btw, does the frontend have to be native app?
21:17 < mscdex> evelyette: there are standalone websocket servers and clients for node
21:17 < RLa> what about web app
21:17 < RLa> no need to write java code
21:17 < mscdex> evelyette: i would assume there are websocket clients for java as well
21:17 < evelyette> RLa, what do you mean: native app?
21:17 < EhevuTov> draginx, looks like it
21:17 < draginx> thanks
21:18 < mscdex> RLa: if you're doing on-device apps, it's Java
21:18 < evelyette> mscdex, yes
21:18 < evelyette> RLa, is there an example of node.js that uses socket.io ?
21:18 < RLa> yes, on socket.io homepage
21:19 -!- mode/#Node.js [+o Nexxy] by ChanServ
21:22 < evelyette> RLa, f*** I just remembered what I was doing wrong 
21:22 < evelyette> the android can't handle loopback address, I have to specify the LAN IP address
21:22 < evelyette> works now
21:23 < evelyette> mscdex, RLa do you think that using node.js to abstract the rabbitmq away from client is a good idea ?
21:23 < evelyette> or is there a better way to do that?
21:24 < RLa> maybe there are already such frontends
21:24 < RLa> otherwise why not
21:25 < evelyette> RLa, what about node.js clustering: is that easy to achieve ?
21:26 < RLa> relatively easy
21:26 < RLa> there's cluster module
21:26 < evelyette> cool
21:27 < RLa> you need clustering at all?
21:27 < RLa> all your clients will have persistent connections?
21:27 < evelyette> RLa, yes they will
21:27 < evelyette> because the game will be real time
21:32 < RLa> evelyette, 1m concurrent users, check it out: https://github.com/ashtuchkin/node-millenium
21:32 < evelyette> RLa, that's really cool
21:39 < draginx> partners.all({where: {name: 'NCL'}}); is this now how u use where in jugglingdb?
21:51 < dnnsmanace> express question: is the upload dir for bodyParser always a temp dir? how often are these files deleted and how does that work
21:52 <@isaacs> ben_alman: i am reproducing your but
21:52 <@isaacs> *bug
21:52 < ben_alman> my butt
21:52 < tprice> lol
21:53 < draginx> .j #Jugglingdb
21:53 < draginx> Anyone know how to go down to a raw SQL query in jugglingdb?
22:02 < pooya> using cluster, is there anyway for a worker to find its own id?
22:05 < pooya> aha, found it. cluster.worker.id
22:06 < pooya> cluster.worker (lowercase w) is not in docs. is it okay to use it?
22:15 < luckysmack> does anyone here work with railway.js?
22:17 < drudge> luckysmack: i have
22:18 < luckysmack> drudge: ok cool. im just curious about it. im looking at some frameworks to see if theres any I want to use. im looking for something MVC like. i was curious how railway separates its client side and server side code.
22:19 < drudge> luckysmack: i wasn't a way with the way railway's route separation worked, very un-node like
22:19 < drudge> locomotive is a nice express-based mvc framework
22:19 < luckysmack> some frameworks expose the controllers, or even the models to the client. which I dont want. but some that expose controllers have some cool live data bindings to update pages on the fly. which would be really cool for what I need.
22:20 < luckysmack> oh ok. i saw locomotive. havent looked yet. i will now. some others i saw were flatiron and meteor.
22:21 < luckysmack> meteor looks really nice, bit still has a lot missing since its still in early development.
22:24 < drudge> meteor isn't really node
22:24 < drudge> it is it's own thing, node is just a dependency
22:24 < luckysmack> yea i noticed. its more a javascript framework that then runs on node once you bundle it.
22:25 < luckysmack> the main thing I like about it though, it the live updating and data binding. angularjs has something similar, though a lot different. 
22:25 < dnnsmanace> Does anyone know if all the files generated by bodyParser are temporary files?
22:26 < tprice> not always
22:26 < tprice> you can change the dir
22:27 < luckysmack> drudge: i suppose i could just use something like flatiron or express/connect and make my own setup. not that adding to the plethora of frameworks is helping. heh
22:27 < luckysmack> would be a good chance to learn node/js better
22:28 < drudge> luckysmack: yeah, i've done that too. locomotive is nice because it ends up being pretty much exactly how i rolled my own mvc. it's very predictable
22:28 < styol> Does anyone know if the Array.reduce method is non-blocking?
22:29 < tprice> styol it blocks
22:29 < styol> tprice: gracias
22:29 < luckysmack> ok. is it complex like railway or is it simpler? like if I wanted to swap out a different templating engine or something else.
22:29 < tprice> its pure js
22:29 < drudge> luckysmack: simpler, and supports configuring templating just like express
22:29 < luckysmack> k
22:30 < luckysmack> thanks. reading the main site now
22:30 < wdbl> what pastebin do you guys use here?
22:30 < carlos8f> rauchg: how do you access debug() in engine.io-dev.js? seems like it's not exported?
22:30 < wdbl> you know what I mean
22:31 < styol> tprice: by chance are you aware of some non-blocking Array iterating approaches? I'm presently using something based on process.nextTick which appears to be slow by comparison but at least is not blocking. Earlier received the good recommendation of spawning a child to deal with such an operation, but part of me worries that performance of the parent might still be affected by the increased usage of a child
22:32 <@maxogden> "non blocking" refers to I/O, arrays are not I/O
22:32 < tprice> look at something like this https://gist.github.com/3374210
22:32 < tprice> just use the nexttick write your own stuff
22:33 < tprice> or you could use aysnc.overkill
22:33 < tprice> .js**
22:33 < styol> maxogden: ah, seems like a good point to make. is there an appropriate term for a process locking up while iterating over a large array? Chunks will be goods
22:33 <@maxogden> styol: cpu-bound operations
22:34 < styol> tprice: interesting, presently am using something along these lines http://pastie.org/4523094
22:34 < styol> maxogden: gotcha, thanks
22:34 <@maxogden> styol: the 'node pattern' for dealing with cpu-bound operations is to use a separate process/worker queue to take advantage of other cores/processors on your machine
22:34 < tprice> same idea
22:35 <@maxogden> but most things on the web are I/O bound so thats what node focuses on making easy
22:35 < styol> maxogden: ok cool, and I should not worry about say a single core environment where two processes are sharing a single core or does node navigate that itself, utilizing what it can where it can?
22:36 < Mee> Helli
22:36 <@maxogden> there wont be a difference between one process and two processes on a single processor
22:36 < Mee> Hello
22:37 < tprice> styol single core two processes they just slow down but dont get blocked
22:37 < styol> Awesome, thanks for the information and feedback guys. I really appreciate it.
22:37 < styol> tprice++
22:37 < styol> maxogden++
22:37 < Mee> Anybody can help?
22:38 < bnoordhuis> Mee: the golden rule of irc - just ask your question
22:39 < Mee> OK
22:40 < Realtor> Is anyone looking for work?
22:40 < Mee> I'm getting slowly to understand Node.js. Sincerely, it's the first time since 3 years of coding, I stop for that while, any way, I ask.
22:41 < mscdex> Realtor: selling houses? ;-)
22:41 < Mee> I'm building a notification system. Two type of them: 1 client posts, another should be notified. 1 clients posts a group of users should be notified.
22:41 < Realtor> haha I'll sell you one!
22:42 < Realtor> ;)
22:42 < Realtor> mscdex: I am looking to build a RE webstie
22:42 < Realtor> website*
22:42 < Mee> So I need ID for each user to deliver message (notification) to.
22:43 < Mee> I learned here: http://stackoverflow.com/questions/6913801/sending-message-to-specific-client-with-socket-io-and-empty-message-queue
22:43 < Mee> that "http://stackoverflow.com/questions/6913801/sending-message-to-specific-client-with-socket-io-and-empty-message-queue".
22:43 < Mee> that "to send a message to a specific client save every one that connects to the server in an Object."
22:45 < Mee> I'm using Symfony2 to connect users, so it's within a controller, how to save the client ID to the server, I need Javascript here, so how should I do that?
22:45 < bnoordhuis> Mee: isn't symfony a php framework?
22:46 < Mee> I lean I'l using Symfony2 for everything including logining
22:46 < Mee> yes.
22:46 < theBrettman> is there print_r() or what do I use?
22:47 < bnoordhuis> Mee: so where does node / socket.io come into play?
22:48 < Mee> @bnoordhuis, in both server and client
22:48 < theBrettman> ok, dump() doesn't work in node. what does?
22:49 < Mee> @bnoordhuis,  I don't really understand what r u referring to dear. 
22:49 < bnoordhuis> theBrettman: console.log / util.format
22:49 < theBrettman> I'm trying to see what's in an object
22:49 < bnoordhuis> Mee: well... if your server code is php, where do you use node?
22:49 < luckysmack> has anyone in here made mvc based apps? im curious as to how you handled the controllers, models and views/templates.
22:50 < theBrettman> maybe like a var_dump for node?
22:50 < luckysmack> oops, wrong room
22:50 < bnoordhuis> theBrettman: see above
22:51 < theBrettman> oh, util.inspect() but close, thx
22:53 < Mee> @bnoordhuis OK I'm getting close. I used to use PHP, but if I need a Javascript for the purpose I'll switch, no problem. Iif this is what do u mean.
22:54 < theBrettman> wow, that just returned like the whole javascript language in object form, lol
22:54 < theBrettman> maybe I should limit it a lil
22:58 < theBrettman> ugh. I just wanna see the difference of calling 'this' under global and not global...
22:58 < theBrettman> ohwell
22:58 < tprice> theBrettman this is global
22:58 < theBrettman> depending on where this is I guess
22:59 < theBrettman> that's why you have to do var that = this;
22:59 < Mee> @bnoordhuis let's return to the original quest, I'm using node.js as a server, so logining happens there, whould u give a snippet of code how to associate an ID to the connected user, I spent much time, would u save me a few and stay with me for minutes.
23:00 < tprice> theBrettman yes thats a given. your first line in a file this would be "global"
23:00 < bentkus> jsdom is very power hungry
23:00 < tprice> your true global would be here https://github.com/joyent/node/blob/master/src/node.js
23:01 < bentkus> seriously, my 1.7ghz machine needs 30 seconds to handle calling selectors 200 times
23:01 < theBrettman> I don't quite get when I can use this and when I have to use that
23:02 < tprice> theBrettman you need to leaner more about js
23:02 < theBrettman> I'm trying to
23:02 < theBrettman> reading a book
23:03 < theBrettman> and this/that part is a lil confusing
23:03 < etcetera> is there a way to enforce types in javascript?
23:04 < klawd_prime> anyone familiar with nano and know how to delete a document?
23:04 < tprice>  klawd_prime rm /apth/to/doc
23:04 < tprice> lol
23:05 < klawd_prime> LOL!
23:05 < klawd_prime> nano.js, tprice 
23:05 < tprice> klawd_prime lol kk
23:09 < RLa> etcetera, you have instanceof and typeof for forcing types
23:10 < etcetera> RLa: I basically want a generic repository pattern implementation in javascript: 
23:10 < etcetera> IRepository<T>
23:11 < mscdex> theBrettman: https://developer.mozilla.org/en-US/docs/JavaScript/Guide
23:11 < theBrettman> I'm reading javascript the good parts right now
23:11 < RLa> etcetera, so function Rep(type) { this.type = type; } Rep.protoype.someop = function(o) { if (!(o instanceof this.type)) { "errpr" } }
23:12 < RLa> etcetera, you cannot pass in random objects with it
23:12 < RLa> that might be limiting in some cases
23:12 < mscdex> theBrettman: the mdn is a good resource and that javascript guide is pretty good. there's even a section on closures, which it looks like you may be especially interested in
23:13 < theBrettman> I had enough closure for one day, lol
23:13 < RLa> etcetera, then there is vjet which uses comments for static typing
23:40 < Zebra12> I know this isn't the right channel for this question, but I was curious if anyone had suggestions on where best to look for freelancers? If i wanted to find a small shop or even a skilled individual to build projects, where is a good place to look?
23:40 < Zebra12> Anyone have some suggestions or ideas? 
23:41 < Zebra12> Not necessarily node specific devs
23:45 < linuxnewb2> Zebra12: Craigslist
23:45 < linuxnewb2> :/
23:45 < Zebra12> sonofa--!
23:46 < Zebra12> I recall that 37signals had some site for freelancers and design studios, did that take off well?
23:46 < Zebra12> resig has that ninjajobs thing
23:47 < RLa> there's gun.io too, i have seen freelance node jobs posted there
23:48 < RLa> and githire
23:48 < RLa> githire.com
23:53 < ccowan> Zebra12: I was talking to a friend today and he use odesk
23:54 < ccowan> He has a system for weeding people out
23:54 < Zebra12> odesk just seems so spammy
23:54 < The_Fly> freelance node work sounds good, any good sources?
23:54 < ccowan> looks for about 10 qualifed canidates then asks them to take a test (which he pays them for their time)
23:54 < ccowan> about 50% refuse
23:55 < ccowan> so he ends up with like 5 canidates that he actually has to pay if they complete the test
23:55 < ccowan> then he choose from those based on the results.
23:55 < ccowan> He says he usually has to pay about $100 for the canidates to take the tests but he just rolls that into the cost of the project.
23:57 < ccowan> The test is a github repository where they have to clone the repo follow the instructions (do some coding) then make a pull request.
--- Log closed Fri Aug 17 00:00:34 2012
