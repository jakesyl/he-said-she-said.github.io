--- Log opened Thu Jul 04 00:00:11 2013
--- Day changed Thu Jul 04 2013
00:00 < sorensen> i think its a very well done page
00:00 < sorensen> it helped me for sure
00:00 < Tyrantelf> sorensen: awesome, I'll look into it, too
00:00 < sorensen> nice
00:00 < Tyrantelf> but could I get this figured out :( pweese
00:00 < sorensen> whats the issue?
00:00 < sorensen> i didnt see
00:00 < Beg_> I don't need that level fo javascript right now
00:01 < sorensen> Beg_: you do
00:01 < sorensen> ;)
00:01 < Tyrantelf> sorensen: https://gist.github.com/tyrantelf/4d9731ca16e590dcea2d
00:01 < sorensen> if you write js you should look over that page
00:01 < Tyrantelf> 2nd commit is the parts giving issue, first is the entire thing
00:01 < sorensen> may common gotchas ect.
00:01 < Beg_> sorensen-> I am summer studying atm, don't have time, and I'm working a small project thats what I ment :)
00:02 < sorensen> :P
00:02 < sorensen> no worries
00:02 < sorensen> Tyrantelf: what does connect return
00:02 < sorensen> you are chaining
00:02 < Beg_> undefined
00:02 < sorensen> does .connect() return `this` in the code?
00:02 < sorensen> if not then you cant chain
00:03 < sorensen> editing...
00:03 < sorensen> Tyrantelf: https://gist.github.com/sorensen/ea7db6052a2db467bf51
00:03 < thismax> I have a link to a github module in my package.json, and whenever I npm install, I get an error along these lines: 10262 error Error: `git "clone" "--mirror" "https://github.com/goodeggs/mongoose-filer.git" "/home/ubuntu/.npm/_git-remotes/https-github-com-goodeggs-mongoose-filer-git-dd3e5cad"` failed with 128
00:03 < thismax> git clone on its own works fine
00:03 < Tyrantelf> sorensen: okay, and this will do...
00:03 < sorensen> Tyrantelf: Beg_: http://tylerneylon.com/a/learn-lua/
00:04 < sorensen> these are my type of code things
00:04 < thismax> anyone have any ideas?
00:04 < Tyrantelf> sorensen: lua = awesome
00:04 < sorensen> :D
00:04 < Tyrantelf> <3 lua, I do stuff in garrysmod with it :P
00:04 < sorensen> i learned it for the redis scripting
00:04 < sorensen> but i'm falling in love
00:04 < Tyrantelf> brackets are out
00:04 < sorensen> very noob
00:04 < Tyrantelf> semi colons
00:04 < Tyrantelf> so fucking easy
00:04 < sorensen> confused
00:04 < Tyrantelf> syntax is like "what syntax?  just toss it in here"
00:05 < sorensen> semicolon in regards to multi line strings?
00:05 < Tyrantelf> no, lua
00:05 < sorensen> right
00:05 < Tyrantelf> lua doesn't do any of this syntax shit
00:05 < sorensen> lol
00:05 < sorensen> i dont use semicolons in either language ;)
00:05 < Tyrantelf> I use semi colon example because I do php a lot :|
00:05 < sorensen> we do it in house because of that
00:06 < Tyrantelf> and in php, semicolons are the ban of my fucking existance
00:06 < sorensen> lol
00:06 < sorensen> well
00:06 < sorensen> semicolons are used in python even
00:06 < sorensen>  you just never have to do it
00:06 < Tyrantelf> anyway, should this gist work
00:06 < Tyrantelf> like, is doing "donator_db.connect(function(error) {" etc going to work
00:07 < sorensen> hmm?
00:07 < sorensen> confused
00:07 < Tyrantelf> your fix for my code
00:07 < sorensen> of course that will work
00:07 < Tyrantelf> :|
00:07 < sorensen> if you could chain it
00:07 < Tyrantelf> thanks
00:07 < sorensen> its the same right
00:07 < Tyrantelf> it appears to get by without any error
00:07 < sorensen> foo = db().connect()
00:08 < Tyrantelf> well, there is an error but it's my fault
00:08 < sorensen> foo = db(); foo.connect()
00:08 < sorensen> chaining is great for syntax but it always is about the module
00:08 < sorensen> does it return `this` ?
00:09 < Tyrantelf> it doesn't thow an error
00:09 < Tyrantelf> it returns "{ _events: {} }" apperantly
00:10 < sorensen> you never know with outside modules
00:10 < sorensen> i tend to only chain with my own code
00:10 < sorensen> or jquery
00:10 < sorensen> :P
00:10 < nathan7> Tyrantelf: that's an eventemitter
00:11 < Tyrantelf> (facepalm) Okay, talk to me like your talking to a guy who has barely ever used js before.
00:11 < nathan7> It has a .on('eventname', fn)
00:12 < sorensen> well... thats a little outside the issue
00:12 < nathan7> http://nodejs.org/api/events.html#events_class_events_eventemitter
00:12 < sorensen> the thing is that it returned a different instance other than itself
00:13 < sorensen> Foo.prototype.connect = function() {  return EventEmitterInstance.on('foo')  }
00:13 < sorensen> thats a bit of what happened from what i can tell
00:13 < jdelgado> Has anyone had a day where all their code worked?
00:13 < Tyrantelf> for all I care it could call nukes on the middle east as long as it works :|
00:13 < jdelgado> With no debug
00:14 < sorensen> jdelgado: thats just blasphemous
00:14 < Tyrantelf> jdelgado: Yeah, I was on vacation
00:14 < jdelgado> lol
00:14 < sorensen> lmao
00:14 < sorensen> nice
00:14 < Tyrantelf> Other than that, nope.  Thats not how this works
00:14 < jdelgado> I'm having one today, and I have to say I feel like the prod servers are going to fail randomly.
00:14 < Tyrantelf> there will ALWAYS be an error to go back and fix
00:15 < sorensen> Tyrantelf: thank god, id be out of a job otherwise
00:15 < jdelgado> lol
00:15 < Tyrantelf> IKR
00:15 < sorensen> let me simulate a normal day of work for you all
00:15 < Tyrantelf> if everything worked the first time, coding would be easy
00:15 < sorensen> (╯°□°）╯ ︵ ┻━┻
00:15 < Tyrantelf> lol
00:15 <@konobi> anyone used UnQLite?
00:15 < Beg_> so, why is it != and then => =<?
00:16 < sorensen> Beg_: wha?
00:16 < sorensen> what do you mean
00:16 < Tyrantelf> Day of work for a programmer: 10% writing code, 85% debugging, 5% asking yourself why you didn't see that two hours ago
00:16 < sorensen> oh i see
00:16 < Beg_> why are the operators on different ends of the equal
00:16  * sorensen shrug
00:16 < Beg_> it's inconsistent :(
00:16 < sorensen> because => and =< are only ever one way
00:16 < sorensen> you could perhaps have != or !==
00:16 < sorensen> or == or ===
00:17 < sorensen> ==!, =! ?
00:17 < sorensen> doesnt make sense
00:17 < sorensen> even more inconsistant
00:17 < Beg_> well => =< doesn't make sense :((
00:17 < sorensen> it does
00:17 < sorensen> because of prefix
00:17 < sorensen> because you can also do < or >
00:18 < Beg_> can you so !< !>? :P
00:18 < sorensen> lol
00:18 < sorensen> also
00:18 < sorensen> its <=
00:18 < Beg_> is it?
00:18 < sorensen> or >=
00:18 < Beg_> sec
00:18 < sorensen> node repl that som bitch
00:19 < sorensen> :P
00:19 < sorensen> beer anyone?
00:19  * sorensen no thanks, i've had a few
00:19 < Tyrantelf> you know takling to yourself is the first sign of insanity
00:19 < jdelgado> indeed
00:19 < Tyrantelf> also, offering beer to a minor is illegal.
00:19 < Beg_> you were right sorensen 
00:19 < jdelgado> lol
00:20 < sorensen> hehe
00:20 < sorensen> so by that logic, if i had commited a crime, i could claim insanity
00:20 < sorensen> i like you guys
00:20 < sorensen> smaaaart thinking ;)
00:21 < sorensen> Tyrantelf: talking to yourself isnt bad, its the anwering part
00:21 < sorensen> which i did anyways
00:21 < Tyrantelf> sorensen: true
00:21 < sorensen> :\
00:21 < jdelgado> Heh, i'm sure IRC logs are totes going to save you
00:21 < r00723r0> Hi. Can someone recommend a sandbox for executing JS code?
00:21 < Tyrantelf> see, your definately insane
00:21 < Tyrantelf> don't worry, I am too
00:21 < whatthepoop> whatthepoop: nevermind, figured it out.
00:21 < Tyrantelf> and me
00:21 < sorensen> r00723r0: i dont really understand what you mean
00:21 < Beg_> r00723r0-> check appjs
00:21 < jdelgado> r00723r0: On web, or node?
00:21 < sorensen> aside from your localhost?
00:21 < r00723r0> Node.
00:21 < sorensen> node is not special
00:21 < ninegrid> derp
00:21 < r00723r0> I need to exec arbitrary JS in a way that does not block the original application.
00:22 < jdelgado> Just throw up nodemon and go for it?
00:22 < sorensen> this is the same as any language you would possibly do this in, but i may be misunderstanding the question
00:22 < r00723r0> I also need a way to kill the JS after a while.
00:22 < sorensen> hmm, sandbox in prod?
00:22 < jdelgado> Or you can do a VM if you are afraid you will destroy your os
00:22 < jdelgado> or vagrant
00:22 < r00723r0> vm.runInNewContext works great but runs in the same thread/process.
00:22 < sorensen> vagrant == vm
00:22 < sorensen> in most cases
00:22 < sorensen> :P
00:22 < jdelgado> yes
00:22 < jdelgado> refined my suggestion :)
00:23 < sorensen> yeah i dont know what you mean r00
00:23 < r00723r0> I want random people to write arbitrary JS. I want to execute it safely.
00:23 < sorensen> oh
00:23 < r00723r0> Do you know what I mean so far?
00:23 < sorensen> that i get
00:23 < sorensen> this is a general issue not about environments
00:23 < sorensen> well, env's in your env
00:23 < sorensen> envception
00:24 < r00723r0> I am able to do this via vm.runInNewContext but it runs in the same thread/process, blocking everything else.
00:24 < sorensen> i dont have even a suggestion for you
00:24 < sorensen> i am sorry
00:25 < jdelgado> r00723r0: Why not vagrant or virtualbox?
00:25 < Seventoes> i'm having some trouble understanding how to correctly use the postgresql module. i hope i don't have to call pg.connect in every seperate file i make
00:25 < sorensen> thats pretty dam expensive in prod
00:25 < Seventoes> but i'm not seeing a way to do it otherwise :-/
00:25 < nathan7> Seventoes: Have one module that just exports your connection.
00:25 < sorensen> nathan7++
00:26 < r00723r0> That's a little too heavy for me.
00:26 < r00723r0> I can start a new process and run vm.runInNewContext.
00:26 < jdelgado> r00723r0: Well, what you are asking for is pretty heavy..
00:26 < sorensen> this is very true
00:26 < r00723r0> Well, the solution I mentioned is pretty light.
00:26 < nathan7> r00723r0: Yeah, child process stuff + runInNewContext seems like what you need
00:27 < sorensen> perhaps there is a diferent solution?
00:27 < r00723r0> Wondering if there's anything in npm already?
00:27 < hichaelmart> isaacs: if you're around I'd love to just finish off the chat we were having about the EPIPE analogy just to see if I understand correctly.
00:27 < sorensen> well, no
00:27 < sorensen> i dont want to get into that
00:27  * sorensen lied
00:28 < hichaelmart> isaacs: because from what I understand, in `cat myfile | grep hello | head -5` - the `cat` process does close its file descriptor down cleanly (ie, it *doesn't* read to the end of the file)
00:28 < sorensen> hichaelmart: i would try PM, he is away
00:29 < hichaelmart> sorensen: ah, cheers
00:29 < sorensen> :P
00:29 < r00723r0> hichaelmart: grep hello <myfile | head -5
00:29 < sorensen> were you at nodeconf?
00:29 < r00723r0> Or grep hello myfile | head -5
00:29 < r00723r0> cat is pretty useless.
00:29 < hichaelmart> r00723r0: you're missing my point :-)
00:29 < r00723r0> Just sayin'. :)
00:30 < hichaelmart> I'm using `cat myfile` as an analogy to fs.createReadStream
00:31 < Tyrantelf> sorensen: so what kind of coding do you do for your work?
00:31 < hichaelmart> And the fact that if you do fs.createReadStream('myfile').pipe(grep('hello')).pipe(head(5)) - the read stream doesn't close until it's read the entire file
00:31 < hichaelmart> (assuming you have a `grep` stream and a `head` stream)
00:33 < hichaelmart> (and assuming the process stays alive and doesn't exit)
00:37 <@mbalho> hichaelmart: if you want head to terminate the fs readStream when it reaches 5 in node you'd have to pass it in as an argument or something
00:38 < RangerMauve> Hey, does anyone know if an event is emitted at the end of a request in Express?
00:38 < hichaelmart> mbalho: indeed - that's the problem
00:38 < ningu> RangerMauve: I don't think so. what would it be emitted on?
00:39 < RangerMauve> I have no idea. I just want to know when to close a connection to a database.
00:39 < ningu> well, you probably shouldn't do that at the end of a request anyway.
00:39 <@isaacbw> when you don't need it anymore
00:39 <@isaacbw> don't open a new connection for each request
00:39 <@isaacbw> use a pool
00:39 < RangerMauve> Oops, I meant respionse
00:39 < ningu> same thing
00:39 < ningu> use a pool
00:40 < RangerMauve> Yeah I might as well
00:40 <@isaacbw> and you usually know when you're done responding
00:40 < ningu> yes, you can put something after app.router
00:40 <@isaacbw> I guess you could be doing something with streams, but then just look at the stream
00:40 < hichaelmart> mbalho: so I'm trying to figure out how to compose streams in a way where a read stream knows when to close because it's not needed anymore - which I believe is the same mechanism as EPIPE in unix pipes
00:41 < hichaelmart> mbalho: but without every stream being aware of every other stream in the pipe, it doesn't seem that there's a standard way to do this (or at least, I haven't found one yet)
00:42 < RangerMauve> hichaelmart: What if you have some sort of formatting for the data that coms into the stream, like for every chunk of data, specify how long it is at the start
00:42 <@mbalho> hichaelmart: gotcha, yea thats a good question. maybe Raynos knows
00:42 < RangerMauve> Then send a special character wen you want to end it
00:42 < hichaelmart> mbalho: internally, read streams keep track of how many pipes are attached - but it doesn't seem to be exposed in an easy-to-consume way
00:42 < Raynos> hichaelmart: I have used takeWhile before
00:43 < hichaelmart> Raynos: right - but does the upstream read stream close?
00:43 < hichaelmart> Raynos: or does it just keep reading and reading and reading?
00:43 < Raynos> hichealmart: upstream signals downstream somehow that it must be closed
00:43 < hichaelmart> Raynos: think of unix pipes - cat myfile | grep hello | head -5
00:44 < hichaelmart> cat doesn't signal to head
00:44 < Raynos> but head signals to grep
00:44 < Raynos> and grep signals to cat
00:44 < hichaelmart> exactly!
00:44 < Raynos> I actually dont know how it works
00:44 < Raynos> hichaelmart: so .pipe() has this
00:44 < hichaelmart> so `cat` can close the file descriptors cleanly
00:45 < Raynos> hichaelmart: https://github.com/joyent/node/blob/master/lib/_stream_readable.js#L526
00:45 < hichaelmart> but try doing fs.createReadStream('/dev/random').pipe(takeWhile(whatever))
00:45 < Raynos> hichaelmart: I kind of see the problem
00:46 < Raynos> any readable stream knows when it's pipe count is zero 
00:46 < hichaelmart> internally
00:46 < Raynos> but it doesn't know when it's pipe count will ALWAYS be zero
00:46 < hichaelmart> sure - but even if it decrements
00:46 < Raynos> you can call str.pipe(newDest) at any moment in the future
00:46 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
00:46 < Raynos> so it doesnt know when to auto destroy itself
00:46 < Raynos> this is a problem of multi pipe :/
00:46 < hichaelmart> agreed - it would need to be in the contract of the read stream
00:47 < hichaelmart> but it makes it really hard to compose otherwise
00:47 < hichaelmart> eg, dbReadStream.pipe(take(10))
00:47 < Raynos> hichaelmart: https://github.com/creationix/js-git/issues/17
00:47 < hichaelmart> The dbReadStream will just keep reading and reading and reading...
00:47 < Raynos> simple streams have a .abort() method and a lack of multi pipe
00:47 < Raynos> so recursive cleanup is baked into that protocol
00:47 < hichaelmart> Indeed: https://github.com/creationix/js-git/issues/17#issuecomment-20392117
00:48 < hichaelmart> :-)
00:48 < Raynos> hichaelmart: my suggested answer is join lalalala simple streams land
00:49 <@mbalho> yea simple answer is that streams that should be able to end upstream streams should get a reference of the upstream stream passed into their constructor
00:49 <@mbalho> #yodog
00:49 < hichaelmart> Raynos: fair enough... if streams as they stand in node.js are not *supposed* to close when they're unpiped like unix pipes, then perhaps creading a read stream from a DB is the wrong way to go...
00:50 < Raynos> hichaelmart: the problem is multipipe
00:50 < hichaelmart> Raynos: it just seems a pity
00:50 < Raynos> the other problem is lack of explicit writable consumers
00:50 <@mbalho> rvagg: how do you deal with o/ in leveldb
00:50 < hichaelmart> Raynos: even multipipe would be fine
00:50 < Raynos> you can do it with simple streams because its Writable.consume(readable)
00:50 < Raynos> so you know only ONE writable consumes one readable
00:50 -!- mode/#Node.js [+o TooTallNate] by ChanServ
00:50 < Raynos> and that writable can destroy that readable without screwing up any other writable
00:51 < Raynos> where as if you had auto cleanup, destination A would trigger auto cleanup and it would screw up destination B if one readable was piping to two destinations
00:51 < hichaelmart> Raynos: well - multipipe would be fine if they were simultaneously attached and you were happy with the stream closing when the last one unattached
00:51 < rvagg> mbalho: ? sorry, not following this conv, summary?
00:51 < hichaelmart> mbalho: leveldb uses a read stream too
00:51 < hichaelmart> mbalho: if you want to restrict it you have to provide a range
00:51 <@mbalho> rvagg: "streams as they stand in node.js are not *supposed* to close when they're unpiped like unix pipes, then  perhaps creading a read stream from a DB is the wrong way to go
00:51 < Raynos> hichaelmart: yes but that's a very narrowly defined edgecase, you can't assume that case always holds in node core
00:52 < hichaelmart> mbalho: I don't believe it will close the stream
00:52 <@mbalho> rvagg: if a tree falls in the forest and nobody is around to hear it....
00:52 <@mbalho> :D:D:D
00:52 < rvagg> mm, if it's not paused then it'll just keep on emitting I guess
00:52 < rvagg> but .destroy() is there for a reason
00:52 < hichaelmart> Raynos: yeah - although I would also contend that a stream having pipes attached, then unattached, then attached again would be a bit of an edge case too, no?
00:53 < hichaelmart> rvagg: yeah but destroy would need to be called explicitly
00:53 < Raynos> hichaelmart: node core follows the path of least wtf / most back compat
00:53 < hichaelmart> Raynos: depends on your definition of wtf :-)
00:53 < hichaelmart> Raynos: if you mean not acting like unix pipes, then yeah ;-)
00:53 < Raynos> hichaelmart: basically your going to have to abandon pipe() and do it your own way or create weird Readable and Writable sub classes
00:54 <@mbalho> hichaelmart: this has been a good discussion, thanks for bringing it up
00:54 < hichaelmart> Raynos: well I could override pipe and unpipe and keep track of what's going on
00:55 < Raynos> hichaelmart: if you monkey patch pipe to have different semantics and use .pipe() in your code it will be unreadable
00:55 < hichaelmart> Raynos: but I was searching for the "idiomatic" way to do it - and it doesn't seem there is one
00:55 < Raynos> if I use a.pipe(b) i will assume node core pipe semantics
00:55 < hichaelmart> Raynos: not monkey patch - just keep track of how many pipes are attached
00:55 < Raynos> if I see require("mart-pipe")(a, b) then I will go "oh I should see what this pipe implementation does"
00:56 < hichaelmart> Raynos: yeah, it'll still do that
00:56 < hichaelmart> it's just that on an `unpipe` the stream may close
00:56 < hichaelmart> but streams can close anyway
00:56 < hichaelmart> a readable stream can close whenever it wants
00:57 < hichaelmart> so if it chooses to close when the last pipe detatches from it... then I don't think that would cause a wtf
00:58 < hichaelmart> rvagg: if you do a db.createValueStream().pipe(grep('something')).pipe(take(5)) it'll read the entire DB, yeah?
00:58 < hichaelmart> (in levelup I mean)
00:58 < hichaelmart> assume a `grep` and `take` stream
01:00 < hichaelmart> you'd need `take` to have a reference to the source value stream to specifically `destroy` it, wouldn't you?
01:00 < hichaelmart> or the client code would have to do it or whatever
01:01 < rvagg> hichaelmart: yeah, but we have a 'limit' option that'll do that for you
01:02 < rvagg> not grep tho.. 
01:02 < hichaelmart> rvagg: right - but that works only if you know up front
01:03 < hichaelmart> in my case I want to expose a read stream for a DynamoDB scan/query - behind the scenes this will need to query in pages
01:03 < hichaelmart> ie, fetching one page from the API, then the next page, etc ,etc
01:03 < hichaelmart> so if the read stream is kept open, it could be quite expensive!
01:03 < Tyrantelf> :L for an array
01:03 < hichaelmart> you'd have to know up front how many rows you'd need...
01:04 < Tyrantelf> can you see if it's empty with array.length == 0
01:04 < Tyrantelf> basic question, but this doesn't appear to be working for me :|
01:04 < hichaelmart> Tyrantelf: yep, or even just !array.length
01:04 < rvagg> hichaelmart: so levelup's streams extend from core streams which have unpipe which I think should pause the flow
01:04 < hichaelmart> rvagg: but does it keep the connection open?
01:05 <@isaacs> hichaelmart: hey
01:05 < rvagg> hichaelmart: I don't think it does a destroy but GC ought to clean it up I think
01:05 <@isaacs> hichaelmart: so, i don't know how cat is written.
01:05 < kallisti> hey can I ask questions about express.js here? I tried #express.js but no reply yet. My question is fairly straightforward.
01:05 < ChrisPartridge> kallisti: ask away
01:05 < ningu> I thought cats are born, not written
01:05 < hichaelmart> isaacs: fair enough :-)
01:05 <@isaacs> hichaelmart: but what *i'd* do, if i were cat, is to treat an EPIPE failure from write[2] as "i am getting epiped"
01:06 <@isaacs> hichaelmart: andto just shut down with a non-zero status
01:06 < rvagg> coffee.pipe(rod())
01:06 <@isaacs> hichaelmart: you don't have to close fds if you're aborting the process.
01:06 < hichaelmart> isaacs: hmmm... non-zero you say? you reckon it's *that* bad?
01:06 < ningu> any error should be non-zero
01:06 < kallisti> okay basically I want to access app.get('env') from within a request handler, so that I can conditionally provide debugging information when in development mode. But I don't believe the app variable is in scope if you use the default express.js setup that is auto-generated for you. What is the correct way of going about this?
01:06 < hichaelmart> but it clearly doesn't return non-zero
01:07 < hichaelmart> the way it's written anyway
01:07 < Seventoes> kallisti: node exposes environment variable from process.env
01:07 < Seventoes> kallisti: so you're probably looking for process.env.NODE_ENV
01:07 < hichaelmart> isaacs: nor do most programs
01:07 <@isaacs> hichaelmart: i don't know how can handles write() errors
01:07 < hichaelmart> isaacs: they all exit fine when piped to head - any well behaving program does
01:07 <@isaacs> hichaelmart: but in any event, when cat[1] gets the SIGPIPE signal, it definitely does shut down.
01:07 < kallisti> I also have this line in my configuration: app.locals.env = app.get('env');
01:08 < kallisti> are app locals exposed to request handlers somewhere?
01:08 < ningu> app locals are for views
01:08 < kallisti> right.
01:08 < kallisti> that's what I use it for.
01:08 < Seventoes> so "env" is now available to all of your views
01:08 < Seventoes> iirc
01:08 <@isaacs> hichaelmart: on OS X cat exits with 141 when it gets an EPIPE from stdout
01:08 < kallisti> yes, it is. but not available to request handlers? seems odd.
01:09 <@isaacs> hichaelmart: $ (cat ChangeLog ; echo $? >&2) | head -n1
01:09 <@isaacs> 2013.06.18, Version 0.10.12 (Stable)
01:09 <@isaacs> 141
01:09 < Stumbler> If I were to copy an ssh key from one computer to another, should I then be able to authenticate on services like sftp just the same as the first computer could?  (i.e. there are no hardware references that would break the authentication process on the new computer), would I run into problems with two computers having the same private key?
01:09 <@isaacs> hichaelmart: in other words, cat[1] crashes if stdout closes abruptly.
01:09 < Seventoes> Stumbler: don't ever transmit your private key over the internet
01:09 < kallisti> Stumbler: a private key is like the lock of a door. it doesn't care where it is.
01:09 < Seventoes> Stumbler: in any form, ever
01:09 < Seventoes> Stumbler: it'll work, but you really really shouldn't be doing it
01:10 < ningu> he didn't say how he would be transferring it
01:10 < hichaelmart> isaacs: oh
01:10 < Stumbler> yea, I'm aware. I'm setting up an sftp client on a new system at my office, and I just wanted to make the transition seamless for my client.
01:10 < Seventoes> it'd be way better to just add multiple public keys to the auth list
01:10 < hichaelmart> isaacs: well in any case, at least it gets the signal/error
01:10 < hichaelmart> isaacs: is there a similar mechanism in node.js streams?
01:11 <@isaacs> hichaelmart: in node.js streams, it's a bit friendlier.
01:11 < hichaelmart> haha :-)
01:11 <@isaacs> hichaelmart: rather than let you keep writing to a closed socket, and get an error (which you would), we automatically unpipe on 'close' or 'finish' from the writer
01:11 < ifandelse> I'm wondering if someone might be able to smack some sense into me regarding require.cache. The node docs say "it is not a guarantee that require('foo') will always return the exact same object, if it would resolve to different files." My question - when would they resolve to different paths? 
01:12 < kallisti> I mean, I could just make app a global variable but that is probably a textbook poor design decision
01:12 < hichaelmart> isaacs: so that sounds like a specific case
01:12 < hichaelmart> isaacs: rather than a general "all downstream writers have ended" case
01:12 <@isaacs> hichaelmart: you can easily add this sort of behavior.  just do writer.on('finish', function() { reader.destroy() })
01:12 < hichaelmart> isaacs: it sounds very specific to sockets
01:12 <@isaacs> hichaelmart: if you do:  r.pipe(w)
01:12 <@isaacs> hichaelmart: and w emits 'finish' or 'close'
01:13 < hichaelmart> isaacs: but then either the writer, or the consuming code has to have access to the source readable!
01:13 <@isaacs> hichaelmart: then r.unpipe(w) happens
01:13 <@isaacs> hichaelmart: but we don't destroy r automatically
01:13 <@isaacs> in Unix, the unpipe would *not* happen
01:13 <@isaacs> instead, r would get smoe more data, write it into w, and error
01:13 < hichaelmart> isaacs: even if it doesn't happen automatically - how do you listen for it?
01:14 < kallisti> okay here's another question: does res.locals contain all of the values defined in app.locals?
01:14 < hichaelmart> if I expose a readable stream somewhere - it may or may not be the very source readable
01:14 < hichaelmart> ie it may have already had transforms or whatever
01:14 <@isaacs> hichaelmart: so, you want a back-propagating destruction call
01:14 <@isaacs> hichaelmart: you want to set fire to the whole chain
01:14 < hichaelmart> isaacs: yes - or even just a mechanism to notify about it
01:15 < hichaelmart> isaacs: i don't want to *force* it
01:15 < hichaelmart> isaacs: just to be aware of it
01:15 < hichaelmart> isaacs: and then the readable stream can choose what to do
01:15 <@isaacs> hichaelmart: well, you can listen to unpipe
01:15 < hichaelmart> isaacs: only on the writable :-)
01:15 <@isaacs> but that doesn't go back up the chain
01:15 <@isaacs> likewise, it doesn't with unix either
01:15 < hichaelmart> indeed
01:15 <@isaacs> except that the processes die and close their stdio
01:16 <@isaacs> but if you write a program that *doesn't* die on sigpipe or stdout write(2) returning EPIPE, then it won't
01:16 < hichaelmart> isaacs: well that's kinda what's happening in a truncating situation isn't it?
01:16 < hichaelmart> isaacs: the writable stream has closed
01:16 <@isaacs> right, and it automagically unpipes
01:17 <@isaacs> but the reader might still wanna send the rest of its data elsewhere.
01:17 < hichaelmart> btw, i'm really not trying to be difficult here - i'm trying to understand how best to expose a readable stream that doesn't just keep reading and reading if all the writers have closed
01:17 <@isaacs> hichaelmart: well, it'll only read until its buffer fills up
01:17 <@isaacs> hichaelmart: it won't kep reading forever.
01:18 < hichaelmart> isaacs: but it won't close either?
01:18 <@isaacs> hichaelmart: correct
01:18 <@isaacs> hichaelmart: it'll sit and wait patiently for you to consume its data.
01:18 < hichaelmart> in this case they're AWS API calls, so potentially expensive - guess it depends on the size of the buffer
01:18 <@isaacs> hichaelmart: you can .destroy() to kill it, or .resume() to flush it all out
01:19 < hichaelmart> isaacs: how would you best do it? if you wanted to expose a readable stream from a DB that can be composed into .pipe(someTransform).pipe(take(10))
01:19 <@isaacs> what's take(10)?
01:19 < hichaelmart> truncate
01:19 < sinclair|net> ive gone and birthed another npm module
01:19 < sinclair|net> yay
01:20 <@isaacs> hichaelmart: db.pipe(transform).pipe(take(10)).on('finish', function() { db.destroy() })
01:20 < hichaelmart> isaacs: so you'd always need access to the `db`
01:20 <@isaacs> hichaelmart: sure.
01:20 <@isaacs> if you wanna make it do stuff
01:21 <@isaacs> hichaelmart: node streams don't lose data by default.
01:21 < hichaelmart> isaacs: yeah, thinking more of when one module exposes the db read stream after one transform
01:21 <@isaacs> hichaelmart: that's on purpose.  you have to purposefully do a thing, to the stream itself, if you want to make it lose data.
01:22 < hichaelmart> ie, function getDbTransform() { return db.pipe(transform) } in one place
01:22 < hichaelmart> and then getDbTransform().pipe(take(10)) in another
01:23 < hichaelmart> I guess the getDbTransform function should *also* listen for finish and do the destroy?
01:23 < hichaelmart> so you do it at each point you expose the pipe?
01:24 < hichaelmart> isaacs: my point being you don't always have access to the very source read stream
01:24 < hichaelmart> it might only be the next up the chain
01:25 <@isaacs> hichaelmart: so... what if pipe()'s option object had a flag to say "destroy() the reader if the writer finishes"?
01:25 < hichaelmart> isaacs: also it reduces the usefulness of multiple downstream listeners
01:26 < hichaelmart> isaacs: hmmmm, maybe
01:26 < hichaelmart> isaacs: to be honest I'd even be happy with the readable emitting or something when the pipes get back down to null again
01:26 < hichaelmart> isaacs: whereas at the moment that's hidden in _readableState
01:26 <@isaacs> hichaelmart: right, if you have multiple writers, then... yeah.
01:27 <@isaacs> hichaelmart: oh, like a "completely unpiped and no more writers" kind of event?
01:27 < hichaelmart> yep!
01:27 <@isaacs> hm.
01:27 <@isaacs> yeah, that'd be easy
01:27 < hichaelmart> that way you can still deal with multiple pipes
01:27 <@isaacs> digging into the _readableState panty drawer is definitely not the right thing.
01:28 <@mbalho> cookie jar
01:28 <@mbalho> mattress cash wad
01:28 <@mbalho> hmm these all are bad metaphors
01:28 <@isaacs> mbalho: i keep my private goodies in my panty drawer
01:28 < hichaelmart> isaacs: obviously it would still be up to the readable whether they wanted to close in that situation or not
01:28 <@isaacs> mbalho: it's not a metaphor
01:28 < ningu> viking hoard
01:28 <@mbalho> lol
01:28 <@isaacs> mbalho: it's what the drawer is for
01:29 < hichaelmart> isaacs: not sure how much existing code there is that assumes that pipes can unattach and then reattach later - but I imagine someone's done it somewhere :-)
01:29 <@isaacs> mbalho: i control access to it with a semaphor
01:29 <@isaacs> mbalho: you never seen rhymes like this before
01:30 <@isaacs> hichaelmart: well, i'm not sure.  but from experience, changing shit like this makes people get upset
01:30 < hichaelmart> no doubt :-)
01:31 < hichaelmart> isaacs: if you were to do it in existing code how would you? just override pipe() and unpipe() and keep track of count yourself?
01:31 < ningu> isn't there a sense in which nodejs's evented model causes situations like this to arise that have canonical solutions with other models of control flow, but no one has quite figured out how to do yet with events?
01:31 <@isaacs> hichaelmart: in the mailing list thread, i showed a "destroy on unpipe" class.  it's untested, but something like that would probably work.
01:32 < hichaelmart> isaacs: so that involved the readable stream overriding the unpipe() method? cause i'm assuming it can't actually listen for unpipe - only writers can do that...?
01:34 < upshoot> I have a mongoose question that I've been stumped on for while now.. For some reason, my model does not seem to be saving.  The method "get_update" is supposed to fetch a feed and save it..  Here's the gist: https://gist.github.com/anonymous/5924253
01:35 <@isaacs> hichaelmart: you'd have to override pipe() as well.  actually, i'm not sure if pipe()'s cleanup actually calls unpipe() ever.
01:37 < ifandelse> anyone by chance see the require.cache question earlier? not trying to pester, just checking
01:39 <@isaacs> ifandelse: what was the question?
01:40 < ifandelse> @isaacs: "I'm wondering if someone might be able to smack some sense into me regarding require.cache. The node docs say "it is not a guarantee that require('foo') will always return the exact same object, if it would resolve to different files." My question - when would they resolve to different paths?"
01:41 < hichaelmart> isaacs: yep cool, so in current streams, override pipe(), increment a pipeCount, override unpipe(), decrement pipeCount and if it gets to 0, then do whatever (close, fire event, etc)
01:41 <@isaacs> hichaelmart: that'd be one way to go
01:42 <@isaacs> ifandelse: consider if two different deps both depend on 'foo'
01:42 < hichaelmart> isaacs: and it doesn't sound tooooooo stupid?
01:43 < hichaelmart> isaacs: the other options I posed on the mailing list involved overriding pipe and adding listeners to each stream that piped
01:43 <@isaacs> hichaelmart: nah, sounds ok
01:43 < hichaelmart> isaacs: but you'd still need to keep track of some sort of count in that case too, so... same thing I think
01:44 <@isaacs> hichaelmart: some kind of change to lib/_stream_readable.js to do this smarter would be ok for master/0.12
01:45 < hichaelmart> isaacs: only thing I wonder is if every transform in the pipe chain would also need to be modified too
01:46 < hichaelmart> isaacs: readStream.pipe(transform).pipe(truncate) - if truncate ends, does the readStream pipes go to null? or only the transform?
01:46 <@isaacs> hichaelmart: so, truncate will emit 'finish'
01:46 <@isaacs> hichaelmart: that'll clean up the pipe from transform
01:46 < hichaelmart> but will transform then emit finish? I guess not
01:46 <@isaacs> hichaelmart: but it *wont'* clean up the pipe from readStream -> transform
01:46 < ifandelse> @isaacs - so if modA and modB depend on foo, and foo isn't installed other than having been pulled down as deps of modA & modB, then the resolved paths are different, correct?
01:47 < hichaelmart> each transform would need to be written in that way
01:47 <@isaacs> hichaelmart: no, it'll just sit there without any readers.
01:47 < hichaelmart> hmmm
01:47 <@isaacs> ifandelse: you're there!
01:47 < hichaelmart> oh well
01:47 <@isaacs> ifandelse: so, node_modules/a/a.js does require('foo') and gets it from node_modules/a/node_modules/foo
01:47 <@isaacs> ifandelse: while node_modules/b/b.js does require('foo') and gets it from node_modules/b/node_modules/foo
01:48 <@isaacs> ifandelse: there are two entries in teh cache, despite teh fact that the arguemnt to require() was teh same, it was not FROM the same place each time.
01:48 < ifandelse> @isaacs - so if foo *is* installed as a top level dep, they resolve to same path? Or are there exceptions to that?
01:48 <@isaacs> ifandelse: the cache is based on fully resolved path
01:48 <@isaacs> ifandelse: if it's the same file, you get the cached entry
01:48 <@isaacs> ifandelse: in other words, when you do require(x), you get the entry cached at require.resolve(x)
01:49 < hichaelmart> isaacs: still seems weird to me that the events don't propagate up the chain, but I guess that's just kinda the way streams are expected to work.
01:49 <@isaacs> hichaelmart: if we were a bit more unixy about it, we'd not unpipe on a writer's 'finish' event
01:49 <@isaacs> hichaelmart: and just let you get a writeAfterEnd error
01:49 <@isaacs> hichaelmart: and then you'd blow up
01:50 < hichaelmart> isaacs: right, but there could be somewhere in the middle
01:50 <@isaacs> hichaelmart: true
01:50 <@isaacs> hichaelmart: but who cares?  the process closes now :)
01:50 < hichaelmart> guess it depends on what peoples "expected" behaviour is of transform streams
01:50 <@isaacs> hichaelmart: i mean, that IS the Unix Way, right?  crash all the way
01:50 < hichaelmart> isaacs: kinda the node.js way too ;-) Oh, that hurt
01:51 <@isaacs> hichaelmart: Node.js is inspired by Unix in many ways
01:52 <@isaacs> hichaelmart: "don't keep going on error" is sort of a best practice
01:52 < ningu> isaacs: btw, is there really no way to run node on windows except from cmd.exe/powershell?
01:52 <@isaacs> hichaelmart: like, have a domain or a uncaughtEception handler, but just log it, shut down, nad close out that worker asap
01:52 <@isaacs> ningu: yes.
01:52 <@isaacs> ningu: that is the way to run node on windows.
01:52 < hichaelmart> I agree - was just trying to figure out how to make streams more unixy :-)
01:52 <@isaacs> ningu: oh, also, the msysutils bash shell.  that works great.
01:52 <@isaacs> ningu: but technically, that's cmd
01:52 < ningu> isaacs: oh, cool. hmm.
01:53 < ningu> isaacs: basically the issue is that cmd.exe has terrible unicode support. powershell may be better.
01:53 <@isaacs> hichaelmart: what you could do, is in the stream-truncate class, instead of doing this.end(), do `this.push(null); this.write = throwerFunction`
01:53 < ningu> there are two issues, (1) getting the codepage set right, (2) finding a font that actually can display your characters.
01:53 <@isaacs> hichaelmart: that'd be more unixy, i guess
01:54 <@isaacs> ningu: yeah, i dunno
01:54 < ningu> cmd.exe's font can't be changed without annoying hackery
01:54 <@isaacs> ningu: email steve about it
01:54 < ningu> isaacs: ok, I will if I want a better answer :)
01:54 < hichaelmart> isaacs: as long as the error was only propagated up the pipe chain, then I'd be happy with that :-)
01:54 < ningu> I've been training a dozen or so folks in perl and I probably won't make the leap to node.js since most of them will get confused by doing two things at once
01:54 < ningu> but if I wanted to I'd have to solve this
01:55 < upshoot> Hi guys, just checking one more time.  Anyone see anything obvious about my mongoose model method?  For some reason,  this_fee.save is not working as shown in this gist.  How would you troubleshoot this?  https://gist.github.com/anonymous/5924253 
01:55 <@isaacs> hichaelmart: the weird thing between streams and unix pipes is that you don't often pipe a unix process back into itself, but we do this *all the time* with streams.
01:55 < upshoot> Perhaps it's a problem with my dbconnection?
01:55 < hichaelmart> isaacs: but anyway - I think I'm almost there - just need to ensure that every transform stream also exhibits the same behaviour so that the unpipe'ing happens all the way up the chain
01:55 <@isaacs> hichaelmart: like, the classic echo server is net.createServer(function(s){s.pipe(s)})
01:55 < ningu> I don't really understand how you can do foo.pipe(bar).pipe(foo)
01:56 < ningu> I guess it's like a circle
01:56 < hichaelmart> yeah, duplex streams don't really exist in unix
01:56 < ningu> I guess it only makes sense if bar changes what foo sends it
01:56 <@isaacs> hichaelmart: well.. they sorta do, but they're only ever in one spot in the chain
01:57 <@isaacs> ningu: imagine a "gzip as a service" server.
01:57 < hichaelmart> right, never in a loop
01:57 <@isaacs> ningu: you send us raw data, we send you back the gzipped version
01:57 < ningu> ok, so why would you do the pipe that way for that?
01:57 < neeky> upshoot, any errors?
01:58 < neeky> as in, what happens when this code runs?
01:58 < upshoot> neeky, nope, it just is not saving.
01:58 < hichaelmart> ningu: foo in your case would be a socket for example - data comes in to it, but you also send data back out of it
01:58 < ningu> ahh, I see
01:58 < ningu> and bar is the gzip
01:58 < hichaelmart> yep
01:58 < upshoot> I was just looking to see if body from request needs to be converted to a string from a buffer .toString('utf-8'); but that didn't help.
01:58 < ningu> ok, that actually makes sense now
01:59 < neeky> instead of console.log("save failed"), put err in there
01:59 < Tyrantelf> Okay guys, need some more hlep on this: https://gist.github.com/tyrantelf/a6a70b68278c0b9f51ce
01:59 < upshoot> Ah, yeah, that doesn't actually execute.  Never get to line "SAVING this_feed"
01:59 < Tyrantelf> line 88 isn't triggering.  It's getting the info from the database (I can see it from console.log)
01:59 < upshoot> (line17)
02:02 < upshoot> neeky, looks like my db connection is a problem.. I see a few things in the db object (this.db) that look wrong.. 
02:02 < upshoot> I'll let you know what I find.
02:11 <@isaacs> ningu: socket.pipe(gzipStream).pipe(socket)
02:11 <@isaacs> ningu: data comes in on the socket, we gzip it, then pass it back out the writable side of the socket
02:18 < upshoot> neeky, I just added a comment to the gist with the result of looking at the database object (this_feed.db),  wondering if the issue is this: "connections: [ [Circular], [Object] "
02:19 < upshoot> Here's the gist again: https://gist.github.com/anonymous/5924253  (with comment added below)
02:20 < neeky> upshoot, what does your database connection code look like?
02:23 < neeky> your app should block/exit if your db connection isnt any good
02:23 < upshoot> I'm running this from a unit test..
02:23 < upshoot> Just pasting my connection logic now..
02:25 < upshoot> Just added the connection stuff to the gist.    Basically on the before function, it sets up a mongoose.createConnection.  Maybe I should be checking for an error there.
02:26 < neeky> and unfortunately #mongoosejs is really quiet most of the time
02:26 < upshoot> neeky, good to know.
02:26 < neeky> connection.once('open', function () {done();}
02:26 < neeky> this line
02:27 < neeky> does done() get called?
02:27 < upshoot> Yep, but let me verify.  I'll comment it out, and I should get a timeout in mocha.
02:27 < neeky> just put a console.log there
02:28 < neeky> just before done() - if it prints, you are connected
02:28 < ChrisPartridge> good ol console.log
02:28 < ningu> like bumps on a console.log
02:28 < neeky> mongoose.connection.on('error', console.error.bind(console, 'connection error:'));
02:28 < upshoot> Yup, it also times out in mocha when the function is not called.
02:28 < neeky> ^^ that, just after you setup your mongoose db onject can;t hurt either
02:30 < neeky> i really don;t know how your app is structured, BUT I'm guessing your connection object is local
02:30 < upshoot> neeky, ah, I'll try adding that.
02:30 < neeky> so is not available to the rest of the app
02:30 < upshoot> neeky, yup, for now, just locally testing that model.  
02:30 < neeky> a super quick test is to do global.connection = connectio;
02:30 < neeky> ok
02:30 < neeky> so all in a single file?
02:31 < neeky> I don't use mocho, so I'n not familiar with how it is structured
02:31 < neeky> mocha
02:32 < irmbrady> Hi guys, I was wondering if anyone had recommendations for installing node on Ubuntu. I installed with apt-get; and I have read alternatives such as nvm and also adding a new  ppa to point at a more up to date repository, but I haven't really read any strong justifications for using any of these methods
02:32 < irmbrady> Would like to hear some opinions :)
02:32 < ningu> irmbrady: use chris lea's repository
02:33 < ningu> easiest way and seems to be what most people do
02:33 < ChrisPartridge> or just compile from source, which is pretty simple
02:33 < irmbrady> ChrisPartridge: But updating would have to be done manually?
02:33 < neeky> so in FeedSchema.methods, var this_feed = this; <- what is this_feed? is it a mongoose model?
02:34 < ChrisPartridge> irmbrady: pretty mcuh
02:34 < neeky> irmbrady, Ubuntu's node is terribly old
02:34 < nathan7> irmbrady: It's just an extra repo, it's a normal APT repo
02:34 < irmbrady> ningu: I figured adding his ppa would be the easiest option. Wasn't sure how up to date it was, I just read it just *is* the most up to date repository 
02:34 < nathan7> irmbrady: Ubuntu ships node from the stone age
02:34 < ningu> irmbrady: it's very up to date
02:34 < irmbrady> ningu: Well thanks for your help - will reinstall using his repository :)
02:35 < ningu> you don't have to read about it, you can just check what version it has
02:35 < neeky> and compiling from source is pretty easy too
02:36 < irmbrady> I do not doubt its easy - I just want the most convenient method to maintain in production :)
02:36 < upshoot> neeky, not in a single file, the model is in app/models, config is in config/ etct.
02:36 < neeky> so, where is the db connection made?
02:36 < upshoot> neeky, I just put in a bad connection string, and was able to see the failures from mongoose.on('error'...) but only with bad connect string.
02:37 < neeky> upshoot, so in FeedSchema.methods, var this_feed = this; <- what is this_feed? is it a mongoose model?
02:37 < upshoot> Let me try global.connection -= connection...  Where should I set that.
02:37 < upshoot> this_feed is an instance of a mongoose model.
02:37 < neeky> in once('open')
02:38 < neeky> 'a' mongoose model
02:38 < neeky> is that model derived from your active mongoose connection?
02:38 < upshoot> (this in the schema method is the instance, but when calling the nested request, this changes, so I need to pass it in this_feed..)
02:39 < neeky> what Im saying is this_feed = new connection.model('Feed');
02:40 < neeky> iaw, when you create an instance of a model, it needs to be created by the active mongoose connection object
02:40 < neeky> in your case 'connection'
02:40 < neeky> you can create models all day long, but they need to be associated with a mongoose instance that is connected to the db
02:41 < neeky> it is a bit more logical to name 'connection' 'mongoose'
02:41 < upshoot> neeky, here's the intended load sequence: 1.) feed_test.js loads mongoose and the Feed model (Feed = require('../app/models/feed')), then I establish the connection to mongoose. Maybe that's the problem.
02:41 < neeky> that way you do mongoose.connect, then var feed = new mongoose.model('Feed');
02:42 < ifandelse> @isaacs thanks for your help earlier. have a good night!
02:42 < neeky> you need to build your models after the db is connected
02:42 < joshux> when redirecting, how to modify the request paramaters?
02:42 < neeky> USING the model object from the live mongoose connection
02:42 < upshoot> neeky, that's very very helpful!  Thanks!!! I didn't really grok that.
02:42 < neeky> it's not super clear
02:42 < upshoot> I will will change the sequence.  
02:43 < neeky> i submit pull requests all the time to Aaron for mongoose docs
02:43 < neeky> they are quite sparse
02:43 < upshoot> and let you know :-)  Thansk for your patience and clarity on this.
02:43 < upshoot> neeky, totally agree on the docs, but not sure where to start : -)  
02:44 < neeky> so, var mongoose = require('mongoose');, then mongoose.connect(uri);
02:44 < neeky> then, after you know your database is connected, build your models
02:45 < neeky> but do it using the active mongoose object
02:45 < neeky> that's the ONE place where I sandbag and create a global in a node app
02:45 < neeky> is the db connection
02:46 < upshoot> I can see how that would be handy.  or just app.models
02:46 < neeky> global.mongoose = mongoose < then every module that needs to load a model can do var feed = new mongoose.feed('Feed');
02:46 < neeky> and now feed is a model attached to the active db conenction, so when you call save(), it knows where to save to
02:47 < upshoot> mpt var feed = new mongoose.model("Feed") ? 
02:47 < neeky> you can also attach it to app, sure
02:47 < upshoot> mpt = not 
02:47 < neeky> sorry, was thinking model, typed feed
02:47 < neeky> yes
02:48 < upshoot> cool.  OK, I'll test the sequencing first, then think about the global option, which seems reasonable to me.
02:48 < neeky> that should work
02:49 < neeky> keep in mind that the global cache will already have a copy of the db connection
02:49 < neeky> so you could just create a new connection object in every file/module, and you'll get the original connection
02:49 < neeky> but that is dirty to me
02:49 < neeky> it makes me sad
02:50 < hichaelmart> anyone know if there's a handy guide to when you should call end vs close vs destroy on a stream - and when you're implementing a stream which you should implement?
02:50 < hichaelmart> close and end sound like they'd be more graceful than destroy
02:51 < hichaelmart> is end perhaps only for writable streams? maybe it's just a close vs destroy debate
02:53 < hichaelmart> (I can't find anything in the API documentation about this - neither close() nor destroy() is even mentioned on the readable streams page)
02:54 < upshoot> neeky, good to know about the cache, but I agree, it's invisible, and not clear that that's happening.
02:55 < hichaelmart> Socket has a destroy() method, but no close() method - a readable file stream has both close() and destroy() although neither are documented
02:56 < hichaelmart> Hmmm, dgram.Socket has a close() method
03:00 < Beg_> okey guys I screwed up abit and I don't wanna replace a ton of lines.
03:00 < upshoot> neeky, thanks for all the help.  Don't have it working yet, but I need to fold my tent for today and head home.  Great guidance.. Much appreciated.  
03:00 < Beg_> is there a way to sort based on three strings in mongo?
03:01 < Beg_> I have Approved, pending, rejected as strings
03:01 < Beg_> and I would like to sort pending first
03:03 < mgaogw> Hey guys, quick question regarding post methods. After a form is submitted and the post is requested, how does the info from the form get stored in the receiving server - i.e. how do i access it again to save in a database?
03:05 < kallisti> so when you define a attribute on the exports object, that variable name is accessible by other functions in that module, yes?
03:06 < kallisti> I'm getting a weird error in which that doesn't seem to be the case.
03:06 < kallisti> but only for this particular function
03:06 < kallisti> ah nevermind I think I figured it out. :P
03:07 < kallisti> or maybe not.
03:07 < kallisti> I don't know anymore.
03:08 < Beg_> mgaogw-> it depends on what you are using, are you using the default http or express?
03:08 < mgaogw> express
03:09 < Beg_> mgaogw-> http://stackoverflow.com/a/4296402
03:10 < mgaogw> Beg_ -> thanks so much! exactly what I was looking for
03:10 < Beg_> np, we all been there! :)
03:23 < darkpassenger> is there anyway of getting an array out of req.body , to determine how many param the user have passed ? 
03:24 < azbyin> darkpassenger, eh.. you want either qs or querystring  if you want to grab at the params and their values
03:24 < ningu> Object.keys(req.body).length
03:24 < ningu> azbyin: no.
03:24 < azbyin> then i didn;t understand the question.
03:24 < ningu> that's for going the other direction
03:27 < darkpassenger> whats the best way to iterate on req.body keys from a user-filled forms ?
03:27 < ningu> for (var i in req.body)
03:29 <@isaacbw> if you have middleware
03:30 < ningu> if he has req.body then he has middleware
03:31 < marchtemp> Hey guys, do you use the return statement at all? Or just rely on callbacks?
03:32 < ningu> for sync methods, sure
03:32 < myndzi> been really digging promises lately
03:32 < myndzi> question of my own: what's the Class#method syntax mean?
03:33 < marchtemp> ningu: I find callbacks very, well, unintuitive. 
03:33 <@isaacbw> ningu: oh wait, I forgot which language I was developing in :P
03:33 < ningu> I mostly develop in english
03:33 < ningu> occasionally in more exotic languages
03:33 < azbyin> lol
03:33 <@isaacbw> O
03:34 <@isaacbw> I'm working on a ruby project atm and thinking in node
03:34 < ningu> marchtemp: well, they are the whole reason for node -- so you can do concurrency in one thread
03:34 < marchtemp> isaacbw: EventMachine?
03:34 <@isaacbw> nah, just ruby
03:36 < ningu> ruby rubes me the wrong way
03:37 < marchtemp> ningu: The problem is if I use an async function, I have to use a callback, even though a return would make more sense.
03:38 < marchtemp> ningu: I guess I can create a return value, and assign it in the callback, but it's not any more elegant.
03:39 < ningu> marchtemp: that's how it works in node. there are various attempts to create other models like await, yield, etc. but so far none has really completely worked
03:39 < ningu> people tend to use modules like q or async
03:40 < marchtemp> ningu: So it's easier to just use callbacks all the time?
03:40 < ningu> marchtemp: it's not a question of easier or harder. if you want to program in node, that's what you have to do.
03:40 < ningu> whether node's model is better or not is a separate question. it might depend on what you are doing.
03:41 < ningu> marchtemp: I should say, you have to use callbacks if your methods do any blocking operations, mainly i/o.
03:41 < marchtemp> ningu: I see. It just takes a while to get used to.
03:41 < ningu> if they are incrementing their argument by 1, or doing a for loop, then no.
03:43 -!- mode/#Node.js [+o TooTallNate] by ChanServ
04:12 < BuTcHeR^^> hello all! Need some advise
04:13 < BuTcHeR^^> I want to write a scrap program
04:14 <@mbalho> do it
04:14 < BuTcHeR^^> 1) I have Array of 10000 strings of different ID's to( 2) I need the application would make https requests to this id's with the url (3) The catch - I need breaks in the middle of the scrap:     - I would declare what is the Limit (int) of this breaks    - Each time the break occured - I need to close and reopen EXE file from local         directory    - After the EXE file had beed reopened - the request would continue untill it   
04:14 < BuTcHeR^^> again
04:14 < BuTcHeR^^> I I can't find the right way to control the callbacks
04:15 <@mbalho> BuTcHeR^^: https://github.com/caolan/async#queue
04:15 <@mbalho> have fun!
04:16 < BuTcHeR^^> @mbalho: I would check it out, Thanks
04:22 < hello_kitty> i'm making a mobile game which posts json from iphones/ipads to a node server. So far every message contains a playerId alongside whatever other data needs saved. I'd like to introduce a little bit of security -- any suggestions? So far all I've thought of is to generate a key at login and periodically refresh it a sorta crude copy of browser sessions.
04:23 < hello_kitty> I'm not aiming for any sort of fancy security... just enough security so that I couldnt make a webpage which posts random data into my game
04:24 < chapel> hello_kitty: the simplest way I would see doing it is basically what you're saying, when the user logs in, send them a token that is stored somewhere linking their auth session to their account
04:24 < chapel> and have it either expire or invalidate after X time
04:25 < chapel> at which a new token would need to be generated, or you could extend the existing one, whatever works best
04:28 < hello_kitty> chapel, what would you qualify as an auth session?
04:29 < chapel> well, thats just a term for when a user is logged in
04:30 < chapel> so you'd generate a token that is unique, the client would store that for all requests for X amount of time
04:30 < chapel> the server would need to store it as well to verify, you could store it in the same place you store the user data
04:30 < chapel> and after X time you invalidate or expire the token
04:31 < chapel> actual implementation varies
04:31 < chapel> you could use something like redis for the sessions
04:31 < chapel> and ttl expire the tokens
04:31 < chapel> e.g. the key would be something like auth:<token> and the data would be the users id
04:32 < hello_kitty> and then perhaps require login again? or maybe if their expired token is correct (meaning that its expired, but it is the correct token that used to be valid) issue an extension
04:32 < hello_kitty> and then onyl require login again if hey show up missing a valid (or previously valid) token altogether (expired or otherwise)
04:32 < chapel> well that is up to you
04:32 < chapel> on how you want to handle usability
04:32 < chapel> and security
04:33 < hello_kitty> ideally i'd like the user to login once, ever
04:33 < chapel> so one way is to issue a new token if the last one was valid
04:33 < chapel> maybe have some tracking for where they log in from
04:33 < chapel> so the token only works for that client
04:34 < chapel> I am not a security expert, so this is not a bullet proof system
04:37 < hello_kitty> chapel, sounds good to me, thanks for the help
04:37 < chapel> hello_kitty: np
04:38 < chapel> Im sure there are some guides on setting up things like this, and maybe some best practices you can follow
04:57 < neeky> darkpassenger, I use connect bodyParser
04:57 < sinclair|net> yay, i have birthed a brand new nodejs module https://github.com/sinclairzx81/appex
04:57 < sinclair|net> go forth, prosper 
04:58 < ningu> no package.json?
04:58 <@mbalho> #doinitrong
04:58 < ningu> no dependencies?
04:58 < sinclair|net> ningu: its in a bin directory
04:58 < ningu> huh?
04:59 < sinclair|net> ningu: commiting the package.json for you now
04:59 < sinclair|net> <_<
04:59 < ningu> so just typescript.api
04:59 < ningu> no connect etc.
04:59 < sinclair|net> ningu: https://github.com/sinclairzx81/appex/blob/master/package.json <-- haps?
04:59 < ningu> just curious
04:59 <@mbalho> the version on npm is just 'console.log('in progress')'
04:59 < sinclair|net> ningu: nope, not at this stage
05:00 < sinclair|net> mbalho: needs a cache refresh
05:00 < ningu> since that's a major decision for any framework developer -- stick with the old and well-tested or not
05:00 < sinclair|net> ningu: are you dissing me hard work?
05:02 < ningu> sinclair|net: no, I'm saying my first thought was "hmm I wonder what design decisions he made"
05:02 < ningu> and a simple way is to check the deps
05:02 < sinclair|net> ningu: modelling more after the .net mvc stack than anything else
05:02 < sinclair|net> ningu: down load the project off github, and run the app.js
05:02 < sinclair|net> youll see what it does
05:05 < neeky> serious question: what hole was TypeScript written to fill?
05:05 < neeky> lack of types?
05:05 < sinclair|net> neeky: tooling
05:05 < ningu> neeky: lack of types seems to be the main one that I can figure
05:06 < sinclair|net> neeky: well if you take a look at that project, i am using ts to give me typed information on http endpoints
05:06 < neeky> I see
05:06 < sinclair|net> as well as reflect into compiled module to generate the endpoints on the fly
05:07 < sinclair|net> so, i wrote that ts.api, i also wrote all the reflection stuff (took me months), then i made this thing with it
05:07 < ningu> at least you didn't have to invent the mirror
05:07 < neeky> will ES6 obsolete any of TypeScripts value?
05:07 < sinclair|net> neeky: not likely
05:08 < othiym23> neeky: a bunch of TypeScript is backported from ES6
05:08 < othiym23> so they're complementary rather than competitive, really
05:08 < sinclair|net> ^ yeah
05:08 < sinclair|net> so it would be amazing if someone could try out whats there
05:09 < Zak> lol sinclair|net 
05:09 < sinclair|net> downloading that github project and running app.js, and tinkering with that service.ts
05:09 < Zak> i remember you from months ago. you still typescripting?
05:09 < othiym23> I guess I should start working on that blog post isaacs asked for
05:09 < Zak> i'm glad its working out for you
05:09 < sinclair|net> Zak: its going alright
05:15 < sinclair|net> well anyways
05:28 < OODavo_> Is there an intended standard format for progress notifications from promises, like Q supports? I've written a module that's manipulating promises with progress, and it currently assumes that promises will notify of progress using a float between 0 and 1 (i.e., 0.5 is half-done). Is this at all standardised? Is there some other convention I should be using instead?
05:29 < sinclair|net> OODavo: i was under the assumption that Promises should be fairly atomic
05:29 <@isaacbw> yea that sounds messy
05:30 < sinclair|net> OODavo: so, instead of having a one promise, make many promises, and base your progress off that
05:30 < OODavo> Um. It's part of at least Q's built-in promise features that they have progress notifications. Those're the ones I'm talking about.
05:30 < OODavo> It doesn't specify what format progress should be reported in, though.
05:30 < sinclair|net> OODavo: well, promises shouldn't report feedback
05:31 <@isaacbw> Q can get a bit silly
05:31 < jwm> I'm having a problem doing udp sockets
05:31 < jwm> in 0.10.x
05:32 < jwm> bind is failing and giving me an unknown error
05:32 < othiym23> OODavo: if you dig into the es-discuss archives, you can see a discussion of progress in promises, buried in a discussion of cancellable / abortable promises
05:32 < othiym23> about a month and a half ago
05:32 < sinclair|net> OODavo: break the task into smaller tasks, then do the progress off that, and get the added benefit of parallelism 
05:32 < jwm> not sure where to go from here since it throws an error immediately as soon as I try to bind
05:32 < jwm> I can't send sockets or receive heh
05:32 <@isaacbw> what's the error
05:32 <@isaacbw> o
05:32 < othiym23> OODavo: short answer is that there isn't a standard for progress, although a bunch of people would like them to be there for DOM Promises
05:33 < jwm> Error: bind Unknown system errno 92
05:33 < jwm>     at errnoException (dgram.js:440:11)
05:33 < jwm>     at dgram.js:207:28
05:33 < jwm>     at dns.js:72:18
05:33 < jwm>     at process._tickCallback (node.js:415:13)
05:33 < othiym23> it seems unlikely that they'll be there as a standard
05:33 < OODavo> What my module does is resolve an array of promises in parallel, reporting progress as (done/total) as they complete. So it's already doing the broken-into-smaller-tasks thing?
05:33 < othiym23> jwm: what platform?
05:33 < jwm> gentoo linux
05:33 < sinclair|net> ningu: where did you go?
05:33 < othiym23> gist yr code?
05:33 < jwm> kernel 3.5.3
05:33 <@tjfontaine> #define ENOPROTOOPT 92  /* Protocol not available */
05:33 < ningu> sinclair|net: #perl
05:33 <@tjfontaine> you didn't compile your kernel with UDP support?
05:34 < jwm> yeah I did
05:34 <@isaacbw> lol what
05:34 < jwm> I can use snmpwalk
05:34 <@isaacbw> you doin some crazy shit dere
05:34 < sinclair|net> ningu: i take it you didn't try me new awesome module then?
05:34 < jwm> I wouldn't be able to use snmpwalk ..
05:34 < jwm> hehe
05:34 < jwm> or dns
05:34 <@tjfontaine> jwm: please retry with someone elses kernel config, you missed a step
05:34 < jwm> :)
05:34 < jwm> for that matter
05:34 <@tjfontaine> well something is missing
05:34 < sinclair|net> ningu: also... #perl ?
05:34 < jwm> interesting thing is someone else with this error was using gentoo too
05:34 < ningu> sinclair|net: honestly, I'd be much more likely if it was not in typescript, and not because I have some ideological preference, I just don't have the time/energy to learn something new like that unless I have to to solve something
05:35 < ningu> sinclair|net: yes, I was a perl programmer before I did node, and my current job involves perl among many other things
05:35 < sinclair|net> ningu: being fairly blunt there
05:35 < ningu> sinclair|net: being honest, it isn't personal
05:35 < jwm> I'll build another kernel
05:35 < ningu> I don't have a burning need right now for a new/better web framework
05:36 < sinclair|net> ningu: all g
05:36 < jwm> which sucks since this is kind of a slow computer
05:36 < jwm> heh
05:36 < othiym23> tjfontaine: shigeki's event loop diagram disappeared in one of the recent Github outages :(
05:36 < ningu> I compiled the linux kernel on a 286
05:37 < othiym23> good think I downloaded it
05:37 < ningu> of course that wasn't 3.5, but...
05:37 <@tjfontaine> othiym23: *sigh*
05:37 <@tjfontaine> othiym23: are you working on your blog post? I forgot to remind you sunday :)
05:37 < jwm> this machine feels like a 286
05:37 < othiym23> tjfontaine: yeah, I'll try to have a draft ready for you guys to review by Friday morning
05:37 < ningu> jwm: low end vps?
05:37 <@tjfontaine> othiym23: oh excellent
05:37 < othiym23> tjfontaine: anything you want me to get in there that wasn't in the email?
05:38 < jwm> nah really old but extremely reliable fujitsu amd
05:38 < jwm> laptop
05:38 < jwm> I am going to swap it out for a mac mini
05:38 < jwm> once I am done coding
05:38 <@tjfontaine> othiym23: lemme look at the email again, but I think your email pretty much covered it
05:38 < othiym23> I'm gonna add in the stuff for domains and do a quick re-read of MakeCallback and MakeDomainCallback
05:38 < jwm> this was the easier part of the project too I didn't expect udp socket issues heh
05:40 < jwm> is there a way I can find out what socket option is failing
05:41 <@tjfontaine> jwm: probably strace
05:41 < jwm> heh good ole strace
05:41 < jwm> good idea
05:44 < jwm> ok
05:45 < jwm> setsockopt(18, SOL_SOCKET, SO_REUSEPORT)
05:45 < jwm> reuseport is what is causing the error heh
05:46 < jwm> ahh
05:47 < jwm> that isn't in kernel < 3.9
05:48 < othiym23> I don't think we want to depend on bleeding edge versions of Linux
05:49 < othiym23> jwm: is that call coming from Node itself, or from libc / one of the other dynamically-linked dependencies?
05:49 < othiym23> i.e. is the bug on Gentoo or Node?
05:50 < jwm> trying to figure that out
05:50 < jwm> it's probably gentoo
05:50 < jwm> looks like node pulls the define from my system 
05:52 < othiym23> take a look at deps/uv/src/unix/udp.c in the Node sources
05:52 <@isaacbw> lovely gentoo
05:53 < jwm> yeah I found udp.c
05:53 <@isaacbw> lol
05:53 < jwm> now I need to find where it is getting defined
05:53 < jwm> heh
05:53 < othiym23> if you read the comment in udp.c, libuv is assuming that SO_REUSEPORT straight-up isn't being used by Linux, so there's probably a bug there too
05:56 < othiym23> seems like Node wants to be using SO_REUSEPORT on Linux to help ensure that e.g. cluster evenly shares requests across cores: https://lwn.net/Articles/542629/
05:56 < othiym23> when it's supporting it properly, that is
05:56 < jwm> hmm
05:56 < jwm> so I wonder why my system doesn't have it in the options
05:58 < jwm> well
05:58 < jwm> looks like I want to go to kernel 3.9 hehe
05:58 < jwm> I'll just undefine that option for now
05:58 < jwm> since I'll move this over to another machine anyway
06:00 < jwm> you know I think I know what happened
06:01 < jwm> I updated my system libraries before my kernel
06:01 < jwm> I bet that is what led to that getting defined heh
06:03 < othiym23> jwm: slap a note on the wiki so that others may learn from your pain
06:03 < jwm> hah 
06:03 < jwm> I don't think many people run into this
06:03 < jwm> it only cost me 3 hours
06:03 < othiym23> at least on other did, apparently
06:03 < jwm> it wasn't as bad as me finding out this network was behind a proxy
06:03 < jwm> trying to figure out why websockets were failing heh
06:03 < jwm> that cost 6 hours..
06:04 < jwm> didn't occur to me at all some pos bluecoat proxy was there
06:05 < jwm> yep
06:05 < jwm> that is exactly what it was
06:05 < jwm> I have linux-headers-3.9
06:05 < jwm> hehe
06:05 < jwm> sigh
06:06 < jwm> I love gentoo honestly
06:06 < jwm> I get a bad feeling when I am not running bleeding edge `ls` even
06:09 < jwm> should I leave the mac mini running OSX or throw linux on there
06:09 < jwm> I wonder how well node.js runs on macos
06:09 < othiym23> it runs pretty great
06:09 < jwm> I just love all of the cool kernel features in linux though
06:09 < othiym23> you can even use some of the DTrace stuff with it
06:09 < jwm> yeah dtrace is sweet
06:10 < othiym23> except for the lack of the jstack helper
06:10 < ChrisPartridge> jwm: hah, what's in bleeding edge `ls` ?
06:11 < jwm> ChrisPartridge: more colors!
06:11 < jwm> well this computer needs to be compliant with some security things
06:11 < jwm> so I am leaning towards leaving it macos
06:12 < jwm> plus it's stable as hell
06:12 < jwm> no reboot in a year
06:14 < darkpassenger> 4;5~
06:16 < darkpassenger> man
06:16 < darkpassenger> whats wrong with my coffeescript 
06:16 < jwm> its working now thank you for the strace advice
06:17 < gkatsev> since it's coffeescript, everything
06:17 < jwm> this was suppose to be the easy part
06:17 < gkatsev> :P
06:17 < hello_kitty> Could someone tell me a bit about what node will do with a bunch of database-related nested callbacks if my API gets a lot of traffic? Anything that waits for a database probably has a next() in its implementation somewhere, right?
06:17 < jwm> I had to do a http parser that did 3 rounds in succession to 900 ips
06:17 < jwm> that was harder heh
06:17 < darkpassenger> i know gkatsev lol
06:18 < darkpassenger> http://pastebin.com/1VzysxFz
06:19 < Seventoes> hello_kitty: the "wait" will happen in the background, it won't lock your application
06:19 < arvindeep> hello_kitty: while it's waiting for one query to finish, it will process other requests
06:19 < Seventoes> hello_kitty: obviously each request will wait until its own processes finish, but they won't be blocking each other in node.
06:20 < arvindeep> what do you mean by next(), by the way? i'm only aware of connect/express middleware using that pattern
06:20 < hello_kitty> so lets say i nest db queries 10 deep in respones to /api/get-user -- and then i hit this api 1000x really quickly, and then freeze time and take a look at whats happening.... many requests will be at varying depths through my nested db callbacks right?
06:20 < Seventoes> hello_kitty: node doesn't care how deeply you
06:20 < Seventoes> you're nested*
06:21 < hello_kitty> oh..  must not mean next()... next is a convention for a callback right? i just mean waiting for the next 'spin' of the serverloop (is there a server loop...?)
06:21 < arvindeep> hello_kitty: are you using felixge's mysql library by any chance?
06:21 < ChrisPartridge> hello_kitty: and if the db can't keep up, monitor query time in app, and return 503 status code until it settles down
06:21 < hello_kitty> im using mongodb and mongoose.js
06:22 < Seventoes> hello_kitty: that convention is used to tell a scope further up the stack that the deeper method is finish
06:22 < Seventoes> is finished**
06:23 < Seventoes> wether or not it blocks the main thread isn't dependent on just using that pattern :P
06:23 < jwm> my dev laptop would block just running one async db connection..
06:23 < hello_kitty> so i have match making server, and it follows this basic process: a player plays a puzzle game and then submits their score when they finish the game. The player's identity and score and then stored in a list caleld 'waitingForOpponent.' Any subsequent players that submit scores are either "matched" or added to the waitingForOpponent.
06:24 < jwm> I commented on my issue on that other stackoverflow post othiym23
06:25 < jwm> now I've got hours of building up tons of oids for snmp get
06:25 < jwm> yay me
06:26 < hello_kitty> i'm not even sure how to ask my question.. sorry let me organize it a bit better
06:27 < hello_kitty> If I ask my database to find one player from the WaitingForOpponent list, this takes time and won't block node, right?
06:27 < arvindeep> hello_kitty: yes
06:27 < Seventoes> hello_kitty: correct
06:27 < azbyin> yes, it won't block
06:27 < Seventoes> hello_kitty: when you send a query to the database, node will continue doing other stuff until the database responds
06:28 < hello_kitty> And during the period of time, i could hypothetically have that same request many times, and launch that same DB query, and thus return the same player from the WaitingForOpponent list to multiple peopel
06:28 < Seventoes> hello_kitty: each query will get its own result, they won't be coalesced into one response by node
06:29 < Seventoes> hello_kitty: i'm a bit confused though, you're sending your database a query that's going to wait for a match before responding?
06:30 < azbyin> i'm expecting the next question to be 'but now multiple people/clients have been told to play against a single player! how do i make sure only 1 player is ever assigned?'
06:30 < hello_kitty> azbyin, exactly
06:31 < azbyin> haha
06:31 < hello_kitty> although ive never had that happen, i just suspect that it could happen
06:31 < Seventoes> haha
06:31 < azbyin> you need to mark the player as 'off' when you read.
06:32 < azbyin> this is also one slight niggle for me with dbs like mongo and couch
06:32 < hello_kitty> i wish i could READ and block at the same time
06:32 < Seventoes> no you don't
06:32 < Seventoes> haha
06:32 < azbyin> transaction support, i.e. more than 1 atomic operation, completed atomically
06:33 < Seventoes> hello_kitty: how exactly do you have your query waiting for a match right now?
06:34 < Seventoes> i admit i'm not that well versed in mongo, but that kind of query doesn't sound like somehting that would be implemented :P
06:34 < hello_kitty> oh its a little ridiculous: http://pastebin.com/1fQg2T8Q
06:34 < azbyin> Seventoes, theres no waiting.. from what i gather the first available player in the 'availabletoplay' list is returned
06:34 < darkpassenger> god i hate coffeescript
06:35 < darkpassenger> what the hell is it with indentation
06:35 < azbyin> but you see when one query reads this off, it has to remove it simultaneously so that any further queries cannot arrive at the same document
06:35 < hello_kitty> yea, now if i performed a DB:write to the first available player it would temporarily be blocked, because all writes block, and then i guess i woudl work out
06:35 < darkpassenger> I mean, braces and ; are not complicated !
06:35 < darkpassenger> didnt mean to rant, just tored :P 
06:35 < darkpassenger> tired :P
06:36 < Seventoes> side note, handle errors and exit if needed, then proceed
06:36 < hello_kitty> if mongodb had like a delete and return function that would be awesome too :D
06:36 < Seventoes> if (err) {blah; return;} do normal stuff;
06:36 < Seventoes> gets rid of unneccesery indenting :P
06:37 < azbyin> uh, is that coffeescript?
06:37 < hello_kitty> my ugly stuff? nah thats JS
06:37 < Seventoes> you're missing semicolons then too :P
06:37 < hello_kitty> i'm on rehab from coffeescript
06:37 < hello_kitty> i thought JS didnt really need semicolons
06:37 < azbyin> yeah, wheres them ; ?
06:37 < Seventoes> it doesn't, but it's good practice to use them
06:38 < Seventoes> not having them can cause some weird issues 
06:38 < azbyin> also before pasting to pastebin use http://jsbeautifier.org/
06:39 < Seventoes> hello_kitty: it looks like you just need findAndModify
06:39 < azbyin> yup, and thats a DB thing rather than node itself
06:39 < Seventoes> find a WaitingForOpponent and modify it to be matched
06:39 < azbyin> ask in #mongodb or #mongo or whatever it is called
06:40 < azbyin> and ... let me know when you find an answer from them :)
06:40 < hello_kitty> findandmodify is a totally a thing in mongodb 
06:40 < hello_kitty> i thinkt hat's the answer the already
06:40 < Seventoes> hehe
06:40 < azbyin> then thats all you need
06:40 < hello_kitty> now that im clear that there will be absolutely no blocking from node at any point in this
06:41 < Seventoes> you really have to work hard to make node block you
06:41 < azbyin> now go forth and make people wait in line to play your game :)
06:41 < azbyin> yup.. quite hard to block
06:41 < Seventoes> if you're doing something that's going to block, you're going to be very aware that you're writing it :P
06:43 < hello_kitty> what happens if i launch two (non nested) db functions, and in the callback from both i return res.end('hi'); ?
06:43 < Seventoes> they'll run in parallel, the first response will be sent
06:43 < azbyin> first one will be sent
06:44 < Seventoes> first meaning first to finish, not first in the code
06:45 < hello_kitty> so if i wanted to return some confirmation to my client that their call to my api was received, i need to do it in the absolute last nested callback... unless my 'process' ends with parallel db operations, in which case i need to wrap them together and wait for both to finish and response in my own custom callback....?
06:45 < arvindeep> hello_kitty, sounds like you need an async library
06:45 < Seventoes> if you want to runm multiple things in parallel and wait for them all to finish, use the async library
06:45 < hello_kitty> omg. i love node.
06:45 < azbyin> yup, sounds like 'i need async' :)
06:45 < Seventoes> hehe
06:46 < Seventoes> async can do stuff way more complicated than that too
06:46 < Zak> async is awesome
06:46 < Seventoes> i just wrote a database schema migration/upgrade thing with async today
06:46 < Seventoes> it's very naive, but async made it pretty easy :P
06:48 < hello_kitty> im glad we had this talk, scrawled on a piece of paper i see "callBackCounter++"
06:48 < Seventoes> haha
06:49 < azbyin> lol
06:55 < azbyin> oh.. wheres hello_kitty ? i wanted to hear more questions about implementing this game :)
06:57 < Seventoes> :D
06:57 < hello_kitty> lol
06:57 < azbyin> haha
06:57 < hello_kitty> well there was a talk earlier about a custom-ish implementation of a session cookie to be carried by the mobile device that runs the game client
06:58 < hello_kitty> if you have anything to add to that, the general idea was to create a key at login, and send that alongside the json api stuff
06:58 < Seventoes> sounds like how i'd do it
06:59 < Seventoes> just make sure the token is long enough to not be guessed by hax0rs :P
07:01 < hello_kitty> i was reading about https, though that was mostly over my head.. i gathered that i could fake my own ssl cert (its not going to be opened by a browser anyways) and use https on the node server, without me having to udnerstand anythign in particular
07:01 < Seventoes> in general you should use SSL if at all possible
07:01 < hello_kitty> it seems like a freebie, from an implementation stand point
07:02 < Seventoes> but if you don't understand what you're implementing it'll be broken, making it the same as not having SSL at all :P
07:02 < Seventoes> crypto's a tricky thing to do
07:03 < Seventoes> but yeah, if your endpoints are node, iOS, and Android, working with SSL should be cake
07:03 < azbyin> you mean a piece of cake; not the entire thing ;)
07:03 < hello_kitty> my experience is limited to creating self-signed certs for some svn server i usd to host
07:04 < Seventoes> the best way would be to buy a legit cert from a CA and use that
07:04 < Seventoes> but you can generate a self-signed one and just pin it in your apps so you're sure you're talking to the right server
07:04 < Seventoes> and that'll do the job just fine
07:05 < hello_kitty> woot i like free
07:05 < azbyin> bleh, do that when you are (a) selling your game and (b) it is so popular with so many users that someone will actually bother spoofing
07:05 < Seventoes> i think using SSL by default is a good thing :P
07:05 < azbyin> i meant a proper cert
07:05 < Seventoes> ah yeah
07:05 < azbyin> by all means use ssl
07:05 < Seventoes> not like it's hard to swap it out :P
07:06 < hello_kitty> here's a question: what types of replies do api servers usually give?
07:07 < Seventoes> {result:'success'}
07:07 < Seventoes> {result:'error',error:'shit broke yo'}
07:07 < Seventoes> whatever information the client app needs to proceed
07:08 < Seventoes> and to provide useful information to the user that isn't technobabble
07:08 < azbyin> {error: 9001, message: "it's over nine thousand!"}
07:09 < azbyin> bye fore now..
07:10 < Seventoes> o/
07:15 < timoxley> hello_kitty and try communicate as much as you can using http status codes… not everything has to be in json format.
07:16 < hello_kitty> well thanks for all the help, here's a slightly old demo of the game incase you're curious: http://timetocode.tumblr.com/   The node stuff is for the matchmaking server and a whole bunch of UI stuff which I  havent put into a scren capture or vid yet.
07:16 < hello_kitty> timoxley, like for the basic stuff, send a status code instead of 'success' ?
07:17 < timoxley> hello_kitty exactly
07:18 < timoxley> hello_kitty this is an easy reading reference http://httpstatus.es/
07:18 < hello_kitty> ty
07:26 < ChrisPartridge> timoxley: that looks much nicer than the RFC page I usually have open
07:27 < ningu> you usually have an RFC page open?
07:27 < timoxley> ChrisPartridge agreed
07:27 < ningu> oh i see
07:27 < ningu> http statuses
07:27 < ningu> there's also jesusabdullah's http posters
07:36 < ningu> 305 content located elsewhere, retrieve from there
07:37 < ningu> I wish I could return that response in real life
07:40 < ChrisPartridge> ningu: i always get the 404 when i open the fridge to get a beer
07:42 < ningu> you need permalinks
07:49 < prawnsalad> hey guys. i keep getting "uv_read_stop: Assertion" errors with nodejs after a short while http://pastebin.com/76jzbyMk
07:49 < prawnsalad> node 0.10.10
07:49 < prawnsalad> killing stability for me here:/ any ideas on why ths would happen?
07:49 < prawnsalad> crashes the process completely
07:50 < ningu> weird
07:50 < ningu> what OS?
07:50 < prawnsalad> this is ubuntu
07:50 < prawnsalad> also on debian, same issues though
07:53 < ninegrid> I'm new to node and confused about something... how do i create a stream that is both readable and writable?
07:55 < substack> ninegrid: use http://npmjs.org/package/through
07:55 < ningu> prawnsalad: seems very strange, never seen anything like that
07:56 < substack> ninegrid: or use the core Transform or Duplex classes but only if you have a good reason
07:56 < prawnsalad> ningu: it happend a lot in 0.8.* too, but then i was told that the issue was fixed in 0.10.* :(
07:56 < substack> or if you have a readable and a writable stream, you can glue them together with duplexer
07:57 < ninegrid> substack: I see... I think I read your stream-handbook on github just a moment ago
07:58 < ninegrid> substack: For instance, my confusion stemmed from this tidbit http://loose-bits.com/2012/08/02/nodejs-read-write-streams-pipes.html  but as I understand it, it is using the old stream api and not the newer one.
07:59 < ninegrid> substack: I want to know though, why would I use through if there is Transform and Duplex in core?
08:01 < ninegrid> substack: nevermind, I get it... the precaution is against NIH 
08:02 < substack> ninegrid: because Transform and Duplex are hard and awkward to use
08:02 < substack> they are low-level
08:02 < substack> through is really easy
08:09 < ChrisPartridge> substack: made our UI dev drop jquery for our latest project (and gave ref to your blog), come out with ~250 LOC, gzipped with a few other assets... ~4.5kb
08:10 < substack> ChrisPartridge: but how many npm modules?
08:13 < ningu> ChrisPartridge: did you use substack's hyper* stuff or something else?
08:14 < ningu> just wondering what a UI dev who's used to jquery would end up using
08:15  * york activates lurker shield
08:20 < zkrokovane> york: how so, u didnt quit
08:22 < york> zkrokovane: i didn't think lurking and quiting was consistant
08:33 < `3rdEden> Does anyone know a module that correctly parses x-forwarded headers for ip addresses? (including multiple server hops)
08:35 < daslicht> hi
09:02 < simplegrid> hey
09:16 < simplegrid> anyone help shoe me how to add different templates to view model for ko.simplegrid?
09:19 < mkozjak> how do i handle specific errors like ECONNREFUSED, ENOTFOUND ? seems like the 'error' the function is getting from an 'error' event is 'Error: connect ECONNREFUSED'/'Error: getaddrinfo ENOTFOUND'; how to properly handle those?
09:29 < simplegrid> simplegrid template engine anyone?
09:55 < simplegrid> simplegrid template engine anyone?
10:13 < natrixnatrix89> if i have a file app.js that has require('some node module like underscore');
10:13 < natrixnatrix89> and it has a submodule in ./stuff/module.js that is also loaded by require('./stuff/module.js');
10:13 < natrixnatrix89> if my submodule also requires 'underscore'. Will it be loaded twice, or just once, and will just get the reference to the same underscore module?
10:14 < hagi_82> modules are cached based on the filenames
10:16 < SomeoneWeird> natrixnatrix89, depends if its the same version or not
10:16 < natrixnatrix89> well in both cases i'd just write require('underscore');
10:17 < Mikicacarica> FREE BRAZZERS ACCOUNTS EVERYDAY HERE ---> http://gratisbrazzers.blogspot.com
10:17 < Trangar> I wonder how many people click that
10:18 < hagi_82> @natrixnatrix89 maybe you simple check by using the building debugger {list command)
10:18 < hagi_82> sorry i mean "buildin"
10:34 < hello_kitty> > var m = {}; m['debug'+'Key'] = 'hihihi'; print(m.debugKey);
10:34 < hello_kitty> wtb bot
10:46 < b0c1> great I can´t install native nodejs ¨thinks¨ in windows8
10:47 < b0c1> I have VS2012 desktop express, and python 2.7.5 installed
10:47 < r04r> Anyone have any experience with node-ncurses? I'm trying the ListBox example but it gives "panel library error"
10:47 < b0c1> and I always get this: http://pastie.org/private/9duekfoyip5wdcbatfzg
10:48 < SomeoneWeird> b0c1, install sqlite3?
10:48 < b0c1> I try
10:48 < b0c1> without success
10:48 < b0c1> But I get same error to ejdb install
10:49 < b0c1> or any node-gyp used application
10:52 < b0c1> any idea?
10:58 < b0c1> I have no idea :|
11:06 < b0c1> the main problem, I not understand why need to rebuild the libraries
11:07 < b0c1> why not provide x64 and x86 version and byez
11:09 < noocx> hello
11:14 < statu> hi!
11:14 < b0c1> ok, currently, in win8 node-gyp unusable ==> I can´t use native libraries => nodejs is unusable
11:14 < statu> anyone can say me what is wrong in this code? http://pastebin.com/tPBe8QcG
11:15 < statu> I have the next error: TypeError: object is not a function
11:19 < simplegrid> simplegrid template engine anyone?
11:21 < bnoordhuis> b0c1: "nodejs is unusable"? in what respect?
11:21 < b0c1> because I can´t install native extension?
11:23 < bnoordhuis> okay. one could interpret "unusable" as "won't start"
11:24 < b0c1> bnoordhuis: unusable, because I can start nodejs but I can´t use properly
11:28 < mkozjak> socket.write('i write something to the socket', function() { console.log('write done'); });   -- > can i break this 'i write something to the socket' line into two so i can put another portion of the command to the next row?
11:29 < bnoordhuis> b0c1: best advice i can give you is to file bugs / submit patches
11:29 < bnoordhuis> b0c1: maybe start with checking node-gyp's issue tracker
11:29 < b0c1> bnoordhuis: I checked already, it´s contain many-many windows specific bug
11:29 < b0c1> (opened)
11:35 < zaphod1984> b0c1 have you tried using VS2011 instead of VS2012? that helped in my case when building native extensions on windows (sqlite3)
11:36 < b0c1> hmm
11:36 < b0c1> Can I use both?
11:36 < b0c1> (I need VS2012 to my projects)
11:37 < zaphod1984> b0c1 yes you can
11:37 < zaphod1984> b0c1 you have to specify the version you want to build: SET VisualStudioVersion=11.0
11:37 < zaphod1984> b0c1 details on this: http://stackoverflow.com/questions/16749986/platform-toolset-v110-is-not-installed-or-invalid
11:39 < zaphod1984> i ran into the same case because i have VS11 and VS12 installed
11:41 < b0c1> I installed vs2010 and vs2012
11:42 < b0c1> Same error
11:42 < b0c1> maybe collosion?
11:50 < b0c1> I tried all combination without success
11:52 < fkm> HI there. I'm using node-mysql and I have a query with "WHERE ?". This worked fine until I tried to have "WHERE `foo` > NOW()". I tried to pass a String but end up with "WHERE '`foo` > NOW()'". Is there a way around that except writing another query?
11:55 < b0c1> zaphod1984: :|
12:00 < b0c1> this error is come fron node-gyp configure command
12:06 < zaphod1984> b0c1 sorry thats all i know on that subject...
12:14 < jfroma> hello, is there a way (or module) to take a READABLE stream, and convert it to a sequence of smallers readable streams. ie first chunk stream, when it ends i get the second chunk stream and so on..
12:27 < davidbanham> jfroma: I think you may be confused about how streams work. Is what you want to just have a string of all the things that came through the stream?
12:30 < jfroma> davidbanham: no. Let's say I've fs.createReadableStream(100mbfile). This stream will emit,emit,emit data and end when it has emited the 100mb. What I want to do is to convert this stream into a 10mb stream, when it ends I want another stream that emits the following 10mb and so on
12:30 < jfroma> davidbanham: does it makes sense?
12:31 < jcamins> fkm: I'm pretty sure ? can be replaced only with a literal (or you can use ?? for identifiers). Probably what you want is to use escape and/or escapeId (and you'll need to handle NOW() yourself). I have not tried any complicated queries in node-mysql, though, so that's just based on my raeding of the documentation.
12:31 < davidbanham> jfroma: I'd say your best bet would be to monitor the stream, then as soon as it hits 10mb of throughput emit the 'end' event and instantiate a new stream in it's place.
12:32 < jcamins> *reading
12:44 < Coco`mo> hi
12:50 < spion> is there a way to measure node's average work (blocked) time per event loop iteration?
12:52 < VoidAtValhalla> Noob question: is there any reason to use npm and not OS distribution package manager?
12:52 < spion> and to set up warnings if the work time exceeds X, ideally (in a perfect world) displaying the list of functions that were invoked in that iteration (yeah I know... that would be hard).
12:53 < spion> VoidAtValhalla, if package A depends on both packages B and C, and package B depends on package D v1.0 while package C depends on package D v2.0, well, npm can do that easily :)
12:53 < bnoordhuis> spion: that's what nodefly's console kind of does
12:53 < bnoordhuis> (full disclosure: i work for the company that just acquired nodefly)
12:54 < spion> oh cool.
12:54 < spion> I'm going to check it out
12:55 < VoidAtValhalla> spion: i can do that with default package manager ... i wonder if there is more than copy and link stuff involved
12:55 < spion> can every default package manager do that?
12:56 < spion> also, windows doesn't really have a default package manager
12:58 < VoidAtValhalla> spion: hmm not sure if "every" but i would say that most yes ... i would understand usage of npm under windows but under linux distros iam not sure if there is any benefits (thats why iam asking, no flame intended)
12:58 < spion> VoidAtValhalla, most package managers can handle having multiple incompatible versions of the same package?
12:59 < VoidAtValhalla> spion: yeah just link + version control magic
13:00 < spion> well yeah, I suppose OS package managers do support that. my bad.
13:00 < euoia> where can I find docs for 0.6?
13:00 < spion> can most install locally?
13:00 < spion> euoia, http://nodejs.org/docs/v0.6.21/api/ ?
13:01 < euoia> spion: thanks
13:01 < VoidAtValhalla> spion: hmm i guess not, but i see integrated "chroot" functionality in some, and you can always fake root directory i guess
13:01 < spion> well npm does local installs by default
13:02 < spion> but I think that the most important reason is that node package authors would have to package their modules for every single distro package manager out there
13:03 < spion> as opposed to just one (npm), and that using a single command: (while in the package folder): npm publish .
13:04 < VoidAtValhalla> spion: yeah, i didnt said npm is unusable :)
13:04 < spion> finally npm implements semver which gives package authors some conventions (and weak guarantees) 
13:05 < spion> other package managers may or may not implement semver or may implement a different versioning system
13:06 < spion> or was it s/system/convention
13:06 < VoidAtValhalla> hmm i guess i will use npm then :), i will just patch pre-uninstall of system nodejs package (to uninstall all manually installed npm packages) :)
13:07 < VoidAtValhalla> spion: thank you for clarification and answers :)
13:08 < spion> no problem. personally I really like npm as I feel it does many things right, I think its one of node's strongest points
13:09 < mkozjak> where can i find the meaning of ECONNREFUSED, ENOTFOUND and similar socket errors?
13:09 < VoidAtValhalla> spion: iam big nodejs noob now and didnt find any pros/cons info about npm :)
13:10 < spion> VoidAtValhalla, I'm glad I could help :)
13:10 < spion> ... with the pros part that is
13:10 < spion> too biased for the cons part
13:12 < bnoordhuis> mkozjak: `man 3 errno` mostly. most node.js errors have a direct correspondence with posix error codes
13:15 < mkozjak> bnoordhuis: thanks!
13:16 < mkozjak> bnoordhuis: there's no ENOTFOUND :/
13:16 < bnoordhuis> mkozjak: ENOTFOUND is special :)
13:16 < mkozjak> bnoordhuis: to?
13:16 < mkozjak> bnoordhuis: node or js?
13:16 < bnoordhuis> node
13:17 < bnoordhuis> the posix equivalent would be ENOENT or EAI_NODATA
13:17 < mkozjak> ok :)
13:17 < bnoordhuis> EAI_NODATA is from `man 3 gai_strerror` btw
13:17 < bnoordhuis> or `man 3 getaddrinfo` depending on your system
13:19 < mkozjak> bnoordhuis: EAI_NODATA description fits :)
13:20 < VoidAtValhalla> i also see ENOTFOUND in arpa/tftp.h
13:21 < Coco`mo> hi suggestion for best MVC for node? 
13:28 < pirho> Coco`mo: what'r you making?
13:29 < Aredridel> Coco`mo: What sort of MVC? The real thing, writing a GUI app? Or some concepts wrangled into request/response form?
13:42 < jdelgado> Aren't they called MV*'s now?
13:42 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:45 < euoia> I have a net socket that I want to reconnect when the 'end' event occurs - it works, but the next time the socket is disconnected it seems the 'end' event is not emitted
13:45 < euoia> I am reconnecting with client.connect(port, host) where client = net.connect(port, host)
13:47 <@MI6> joyent/libuv: Miroslav Bajtoš master * fd45f87 : linux,darwin,win: link-local IPv6 addresses - http://git.io/QbhOEw
13:47 < euoia> anyone have any ideas about why that might be? the other events (data, connect) still seem to work the second time around
13:50 < daslicht> is it normal that the memory consumption of a node app rises with every http request ?
13:50 < daslicht> I have just tried PM2's monit function 
13:51 < daslicht> even when i create a simple hello wolrd app , with ech page refresh the consumed memory rise ?!
13:54 < anthony_> daslicht: perhaps garbage collection is just taking its time?
13:55 < daslicht> yeh maybe 
13:55 < daslicht> so therer is garbage collection  in node ?!
13:55 < daslicht> good to know :D
13:56 < gildean> daslicht: javascript uses garbage collecting as memory management
13:56 < daslicht> ok fine
13:56 < daslicht> so i dont have to worry about this part to much 
13:56 < daslicht> thanks
13:57 < sCoRpi> daslicht: depends
13:57 < sCoRpi> only things which arent' referenced anymore can be collected ;)
13:57 < daslicht> is it enough to set things to null which i no longer need?
13:58 < anthony_> daslicht: no, because you are only setting your reference to null. There may be other references to the object
13:59 < daslicht> so whats best practice on this ?
13:59 < anthony_> e.g., var A = {data: 3}; var B = A; A = null; (B will still exist)
13:59 < fkm> jcamins: That's what I feared. Anyway, I figured that it will be easier to have two queries as more unique elements surfaced (limit, offset, and order). But thank you very much for your input!
14:00 < daslicht> anthony_: so is therer a way to recursively unlink ? or how do you deal with this issue ?  
14:01 < anthony_> If they aren't referenced elsewhere, then setting to null I think it is ok. Although, I've never tested that
14:01 < anthony_> I deal with the issue by trying to never have a reference to something I don't need
14:01 < daslicht> :)
14:02 < daslicht> according to PM2 monit the memory will accumulate around 400 kb for each request !
14:20 < simplegrid> anyone here familiar with simplegrid? Knockout
14:22 < Aredridel> wow, daslicht. 400kb/req is pretty big. Time to start looking for reference leaks.
14:22 < daslicht> yeah
14:22 < Aredridel> Or if you're on smartos, mdb it up a notch and peek inside node
14:22 < daslicht> quite big
14:22 < daslicht> still not collected...
14:23 < Abraxsi> daslicht: My understanding is that Javascript engines won't bother garbage collecting until there's enough to warrant a collection. No point in sending the garbage trucks round each time a person puts out a rubbish bag. To ensure that objects no longer required are eligible for collection you need to follow good programming practices. Investigate closures, and memory leaks on google.
14:23 < daslicht> ok i see
14:23 < Aredridel> Actually not true in v8's case. It's relatively aggressive, generational collector.
14:23 < Aredridel> So it tidies up young objects frequently, since most memory allocation is very temporary.
14:24 < wyled> anyone have any luck connecting remotely to a couchbase instance with the nodejs client lib? it doesn't work for me.
14:24 < Aredridel> But yes, any retained reference -- including in a closure -- will hold onto it until that closure is freed.
14:24 < Abraxsi> Thanks Aredridel, I didn't know v8 handled it any differently
14:25 < Aredridel> Yeah. Garbage collectors are one of those things that are continuously tinkered with to get better performance out of.
14:28 < simplegrid> hey peeps - i have a query regarding this: http://pastebin.com/eQhUtNkS and knockout  - simple grid
14:28 < Aredridel> however, V8 isn't as aggressive as a pure refcounting language would be -- the freeing the memory is not inline with the last reference being dropped
14:28 < Aredridel> simplegrid: This doesn't sound very node.js related, just saying. You may get better answers elsewhere.
14:29 < simplegrid> okeydoke
14:29 < simplegrid> ty
14:29 < Aredridel> Sure thing.
14:30 < Abraxsi> a pure ref counting language?
14:31 < daslicht> is there a Node router which is reuseable on teh client side?
14:31 < daslicht> or somehow reuseable?
14:34 < Abraxsi> daslicht, that sounds a bit odd. A Node router is for deciding on a response to a request path. Why would a client need to respond in that way? Are you trying to implement a client side ajax navigation model?
14:34 < daslicht> yeh that why i wrote somehow 
14:34 < daslicht> :D
14:35 < daslicht> I try to create a gracefull degrading hijax app
14:35 < daslicht> essentially something like derbyjs
14:35 < Abraxsi> Well i imagine Node routers generally deal with Node objects and requests. It's probably better to look at the more commonly used clientside libraries that have routers like backbone
14:36 < daslicht> but independent from derby
14:36 < daslicht> hm
14:36 < daslicht> but than I have again 2 routers 
14:36 < daslicht> whioch are independent
14:37 < Aredridel> How would these routers be alike?
14:37 < Aredridel> The matching may be similar, but what you'd do based on them sounds entirely different.
14:38 < Abraxsi> yes, but I think their jobs are quite different. I can see the case for wanting one routing code style... I don't know if this would exist
14:38 < Aredridel> One could certainly write a module that takes the same route syntax as the other.
14:38 < daslicht> It was just an idea to make things easier
14:38 < daslicht> or even more dynamic
14:38 < daslicht> :D
14:39 < daslicht> looks like i just need a dynamic router for both sides
14:39 < daslicht> which are both feed with teh same items
14:39 < daslicht> somehow
14:39 < Aredridel> Sounds reasonable.
14:39 < Abraxsi> It sounds like you're looking for a framework... which I don't think exists yet
14:39 < daslicht> cool
14:43 < Aredridel> Boo frameworks. Make and use small modules.
14:44 < Abraxsi> Which class does Express fit into?
14:45 < Aredridel> It's a small framework. It's barely acceptable to me ;-)
14:45 < Aredridel> I'd love it if it were more, more orthogonal pieces.
14:46 < daslicht> +1 for small modules 
14:46 < daslicht> reuseable components
14:47 < Abraxsi> For the purpose daslicht described though, it sounded like a way of allowing similar/matching code to describe routes on both server and client would be useful, and that could only really be encapsulated in a framework I think.
14:48 < Abraxsi> but of course that's almost an opinion on semantics
14:48 < daslicht> so managing top level menu item sseams to be relative easy but how to deal with an n-level menu items :D 
14:49 < daslicht> i have to think about this
14:57 < richthegeek> I have a demon script that, for good reason, can run code that might have module dependencies that aren't in the package.json
14:58 < r04r> http://derbyjs.com/ looks awesome, does anyone have any bad (or good) experiences with it?
14:58 < richthegeek> is there any way to either automatically install these missing dependencies when they are found to be missing, or to change the require path for the daemon?
14:58 < Aredridel> "not easily".
14:59 < Aredridel> You can hack around with a script wrapping the daemon that triggers the download. You could do some crazy magic and require npm.
14:59 < Aredridel> Both sound complicated -- what are those good reasons?
15:00 < daslicht> r04r: I have some derby experience... the community around it is non existent as far as i got it
15:00 < daslicht> bbl
15:10 < jwm> is vs2012 a good ide for node?
15:10 < jwm> I'm using webstorm right now and it's slow as shit
15:10 < jwm> heh
15:10 < tomb_> a simple text editor like sublime text is sufficient
15:10 < jwm> I like to have vim plugins
15:10 < jwm> since I am a vim nut
15:11 < jwm> if I took 50 years I could setup a decent vim 'studio' 
15:11 < jwm> with custom stuff but I also am lame and like point and click
15:11 < jwm> heh
15:11 < jwm> mainly a vim bindings fool
15:12 < richthegeek> Aredridel: it's a system that parses data in mongodb according to configurations supplied by systems that depend on it, using functions provided by those systems
15:12 < richthegeek> Aria: so for example, the one i'm running up against atm is one requiring "googlemaps" to geocode addresses in a table
15:13 < richthegeek> Aria: the underlying system has no need for googlemaps but that function does. So whilst I know it needs "googlemaps", and can try installing it with npm when the function is initialised, it doesnt seem to work out like that in the end
15:14 < richthegeek> Aria: at the moment, at least, the module gets installed into the location of the script that invoked the daemon (testing script...) and so when the daemon then tries to load the file it doesnt look in the right place
15:20 < Aria> Aaah, fun.
15:21 < Aria> I suspect what you REALLY want to do (and this is ugly) is to download the script, analyze for dependencies (or better yet, make it supply its own package.json, so you get versions needed), run npm install, and then run the script.
15:21 < Aria> The versioning is going to be the thing that REALLY bites you.
15:24 < richthegeek> Aria: the function has a dependencies list of it's own (it's stored in the database, for reasons)
15:25  * Aria nods. That's not crazy!
15:25 < richthegeek> Aria: but it's not a versioned depenendices list
15:25 < Aria> Sad.
15:25 < richthegeek> haha yeah, it honestly makes sense
15:25 < Aria> I'd honestly turn it into a package.json in a new directory, npm install, run the script, delete.
15:26 < Aria> (or do the equivalent programatically)
15:26 < Tyrantelf> https://gist.github.com/tyrantelf/0ee439f9e659ac786c45 If statement at line 87 always says it's not a number, even when the function says it's a number (a console.log right before return shows that it's a number)
15:26 < Aria> That require is synchronous but package downloads are not means you have to pre-handle the dependencies, rather than doing it live.
15:26 < Tyrantelf> ideas?
15:26 < Xeon06> Hey guys
15:26 < Xeon06> I'm getting a weird error when doing an "npm install" in a directory with a package.json      npm ERR! Error: UNKNOWN, symlink '../ncp/bin/ncp'
15:27 < Xeon06> Anyone knows what's up with that?
15:27 < Aria> Tyrantelf: what's  typeof rows[0].expires?
15:27 < richthegeek> Aria; yeah the functions are all initialised to verify dependencies before the system starts passing data to them, and the functions themselves are asynchronous only
15:28 < Aria> richthegeek: Yeah. You're just gonna have to bridge the synchronous require with asynchronous dependencies. I'd do it like I suggested, but it's not gonna be pretty.
15:28 < Aria> This is where an async require would be nice. But nope!
15:30 < richthegeek> Aria: i've got it working to a degree now - it's installing the module in the right place (passing a modified process.mainModule.paths[0] into npm.load({prefix: $$}))
15:31 < richthegeek> Aria: obviously versioning would suck but given the control I have over the system, I think simply saying "you use the latest version or nothing" is valid
15:31 < Aria> Also not bad.
15:31 < Aria> Sounds like you're on the right track, but There Be Dragons.
15:31 < Aria> And you are crunchy and taste good with katchup.
15:32 < daslicht> jwm : I currently use sublimetext2
15:32 < Tyrantelf> wt hell
15:33 < Tyrantelf> in the function, it logs a number, with a type of number
15:33 < Aria> Xeon06: No idea -- though it could be your bin dir is funky, or there's a dead symlink in the package or something else weird.
15:33 < Tyrantelf> console.log the return and it's undefined w/ type undefined :|
15:33 < Tyrantelf> Aria: Any ideas?
15:33 < Xeon06> Aria: I'm running it from a Virtual Environment and I think this is my problem https://github.com/mishoo/UglifyJS/issues/453 !
15:33 < Xeon06> Thanks for the answer :)
15:33 < paulkon> how does private variable state work in commonjs modules?
15:34 < Aria> paulkon: private variable state? Like per-module variables? the whole module is in a closure.
15:34 < Aria> paulkon: function (exports, module, require) { module here }
15:34 < paulkon> so can I share state among those variables?
15:35 < Aria> Xeon06: vagrant share? Sucky.
15:35 < Aria> paulkon: Share between what?
15:35 < Aria> Tyrantelf: Oh, doh. I spotted the error.
15:35 < Tyrantelf> :D
15:35 < paulkon> other modules that are require()ing the module with the private variables which exports functions that change and return those variables
15:35 < Xeon06> Aria: Yep. Was trying to do an "npm install" from within the Vagrant machine on a shared folder in host (Windows)
15:35 < Tyrantelf> I'm an idiot probably
15:36 < Aria> Tyrantelf: ExistsInDb is an asynchronous function. It returns before execute finishes.
15:36 < paulkon> like a database
15:36 < Tyrantelf> and how would I fix this?
15:36 < Aria> Tyrantelf: so you need to get the return value as a callback -- I'd suggest node style.
15:36 < Aria> Lemme fork and show you.
15:36 < Tyrantelf> kk
15:36 < Tyrantelf> awesome
15:36 < Tyrantelf> <3 gist.  Fuck pastebin
15:36 < paulkon> what is cached when I require() for the first time?
15:36 < paulkon> the exports?
15:39 < paulkon> nm, figured it out
15:40 < paulkon> simple closures :)
15:40 < paulkon> node repl is awesome
15:41 < Aria> Tyrantelf: https://gist.github.com/aredridel/e519ea05293bce225af6
15:42 < Aria> paulkon: exactly. It's the 'module' argument that is cached, but module.exports is what's returned to the caller of require.
15:42 < Tyrantelf> Okay...
15:42 < Aria> Tyrantelf: Welcome to async programming. Once you go async, almost everything ends up in this style, "continuation passing style" -- that is, the last argument is a callback with where the results go.
15:42 < Tyrantelf> I'll go redo the other stuff now XD
15:42 < Tyrantelf> Aria: Awesome.. Yeah, you can tell I'm new to this XD
15:43 < Aria> Yep. http://nodejsreactions.tumblr.com/post/51676989355/trying-async-programming-for-the-first-time
15:43 < Tyrantelf> I'm more of a lua/php person...  I've never really been into JS that much but nodejs looked great for what I'm trying  to do
15:43 < paulkon> welcome to callback hell/heaven
15:44 < aandy> node.js rocks!
15:44 < Aria> Hehe. Yep.
15:44 < Aria> You should see our async PHP code. It's not NEARLY as nice as using Node.
15:44 < Tyrantelf> :L callbacks I fear will be tha bane of my existance
15:44 < Tyrantelf> so instead of a nice return, I gotta do callbacks now :?
15:44 < Aria> Yep.
15:44 < paulkon> yep
15:44 < paulkon> callbacks out the wazoo
15:44 < Tyrantelf> That just seems like a lot more work without any difference
15:44 < aandy> callbacks can be nice returns if price is right
15:44 < Aria> You could use promises, but there's some cognitive overhead there too.
15:44 < aandy> Tyrantelf: obligatory http://callbackhell.com link
15:45 < chris-tina> Tyrantelf, you can use alternatives, like Promises. People are working on semi-coroutines using generators as well.
15:45 < Aria> Tyrantelf: There's no difference for strictly linear tasks. But when you want to do two things at once, suddenly you win.
15:45 < aandy> read it now, before you start bad habbits :p
15:45 < Aria> Yes. Read callbackhell.
15:45 < Aria> Tyrantelf: You can actually do things like "query the database. And memcache. and read a file off the disk. And call me back when all three are done, so I can finish."
15:45 < paulkon> you could also use this https://github.com/visionmedia/co
15:46 < paulkon> but callbacks are the best place to start
15:46 < paulkon> imo
15:46 < aandy> Aria: albeit that is the "trickiest" of callback patterns. so if you can do that, i'd guesstimate that you're off to a good start
15:48 < chris-tina> Tyrantelf, btw, here's a benchmark of Promises vs Callbacks vs Callbacks + caolan/async vs Semi-coroutines by way of Co: http://chart.googleapis.com/chart?chbh=a,4,20&chs=600x400&cht=bvg&chco=3072F3,FF0000,FF9900,008000,49188F,AA0033,000000&chd=s:XUWV,UUaU,LNPL,cbaT,MLLI,PQQO,PSQO&chdl=Callback|Async|Pinky|Pinky+(sync)|Q|When|Deferred&chdlp=b&chma=5,5,5,25&chtt=Asynchronous+alternatives+(sequential+list+processing
15:48 < chris-tina> Tyrantelf, and the source for those benchmarks so you can compare each implementation: https://github.com/killdream/promises-benchmark/tree/master/scenarios/list-processing
15:48 < Tyrantelf> chris-tina: only thing out of that I understood was callbacks :L
15:48 < Aria> Hehe. Also, most people are still network bound, so benchmarks are useless.
15:49 < Tyrantelf> though I applaud your attempt at helpfulneess
15:49 < chris-tina> Co is a library that provides semi-coroutines (like Lua, but more predictable)
15:49 < chris-tina> Tyrantelf, then there are Promises, which are just a way to represent an eventual value by its dependencies alone, disregarding any time constraints.
15:50 < aandy> Aria: i usually set one callback for those three functions as callback, then provide an array of instances to wait on and if ([].length > 0) return. what is your common approach to that?
15:50 < chris-tina> Aria, that one is a benchmark of the worst-case, I still have to write benchmark for parallel computations and partially-memoised parallel computations. There is not much of a significant difference for those two, in most cases.
15:51 < aandy> and by usually i mean, when i have to. i usually queue it if it's not an important/slow process
15:51 < chris-tina> At least, theoretically. For the worst-case (all subsequent values depend on the previous ones), there's some significant overhead in choosing anything but callbacks
15:52 < Aria> aand: Same.
15:52 < paulkon> aandy: https://gist.github.com/anonymous/5928762
15:52 < paulkon> nothing fancy, but it works
15:52 < Aria> er. aandy.
15:52 < paulkon> should be renamed to consecutive
15:52 < paulkon> or something
15:52 < Tyrantelf> chris-tina, andreypopp, Aria: thank you all, I'll probably be back in a bit :P
15:53 < nodenoop> hi
15:53 < aandy> Aria: that's a nice pat on the shoulder :)
15:54 < Aria> First rule of callbacks: keep it simple. Second rule of callbacks: make it simpler.
15:55 < andreypopp> Aria: third rule of callbacks: use promises or fibers :-)
15:55 < aandy> if you can't follow your own flow nested in two callbacks, it's not simple enough
15:56 < amph1bius> what the heck is a fiber ? :D
15:56 < Aria> A non-preemptive thread.
15:57 < aandy> the most complex operation i have on a web app consitutes of 7 cumbersome functions. lost overview and scope? nope, seven: var step_x = function descriptionOfWhatItDoes() {}, with the added benefit of sequential callbacks are more readable: if (err) return bad(err); return step_x+1();
15:58 < Tyrantelf> Aria: TypeError: undefined is not a function
15:59 < Tyrantelf> on this line:       callback(null, rows[0].expires);
15:59 < richthegeek> Aria: async PHP? What?
15:59 < aandy> Tyrantelf: link?
15:59 < Aria> richthegeek: You can do it, but it's pain. And there's synchronous crap all over you have to work around.
16:00 < richthegeek> Aria: I really don't want to, but I'm curious as to how.. got any links?
16:00 < Tyrantelf> https://gist.github.com/aredridel/e519ea05293bce225af6
16:01 < chris-tina> aandy, you could have used Promises: https://github.com/killdream/liz/blob/master/bin/liz#L83-L93
16:01 < Aria> Tyrantelf: I bet I missed a callback. Look for all invocations of the ExistsInDb function and make sure all of them have a callback as their second arg.
16:01 < Aria> richthegeek: Nope. It's internal at work, a daemon that uses a gob of code that was already PHP.
16:02 < aandy> chris-tina: right, but you still define those functions.
16:03 < aandy> chris-tina: i'm not opposing promises, i'm just saying in my project it didn't make sense for me to switch (and not all steps in the same process were necessarily sequential)
16:03 < richthegeek> Aria: and you think *I* am doing silly things!
16:03 < Aria> Hehe. Not silly. Ugly!
16:03 < Aria> And I will not argue that async PHP isn't ugly.
16:03 < chris-tina> aandy, those functions aren't `"if (err) callback(err) else callback(null, x)" :3
16:04 < chris-tina> In fact, they look pretty synchronous, like: function concat(a, b){ return a + b }
16:04 < chris-tina> With a and b being promises
16:05 < Tyrantelf> https://gist.github.com/tyrantelf/0ee439f9e659ac786c45
16:06 < aandy> chris-tina: so you don't handle errors in promises? ;)
16:08 < chris-tina> aandy, the promises implementation handles errors automatically. Basically, a Promise is an `Either<Error, X>` type where you can apply transformations to either side, and the side with no transformation just propagates to the next transformation. So `error.onSuccess(doX)` will just return `error` unchanged. All the error handling in this particular script is in: `res.otherwise(raise)`, which throws the error if any occurred.
16:09 < aandy> right, but then you have one error handler to switch for all things that could've gone wrong, or?
16:11 < aandy> at least that was my take on it. but to be fair, i haven't given it a thorough chance yet (haven't had the opportunity)
16:12 < chris-tina> aandy, I only handle the error where I can handle the error. One of the things I don't like in Promises/A+ though is that they catch everything. I'd rather explicitly wrap the operations in a `catch` function and tell explicitly which kind of errors I'm interested in, let the application crash otherwise
16:13 < chris-tina> aandy, I'm writing a post on the subject of Promises/A+, with the upsides and downsides of choosing it :3
16:13 < aandy> that was my intuition aswel, on the exception part. i could very well use it for a login part, but for the other parts i need more verbosity (at least right now while prototyping)
16:14 < aandy> chris-tina: cool. i'd love to read it if you share the link
16:14 < chris-tina> aandy, but basically, no function in that script does any error handling. They just propagate the errors if any error occurs. Then at the end of all operations I display the error message if there was one. Since this is a compiler, that makes sense. But on some other cases, you might be interested in handling the errors in a few other places.
16:15 < aandy> i have an old bayesian filter which would *very much* benefit from promises ;)
16:15 < aandy> chris-tina: ok, so the proper way to add more error "flexibility" would be for a (sub) promise to return a specific error (like, { err: 'yo, i\'m b0rked' } )
16:15 < aandy> +?
16:16 < aandy> but still, the end result is not always just res.json(500, { err: err }) :(
16:17 < chris-tina> aandy, you can either do fulfill a promise with an error, or throw it.
16:18 < aandy> ok, that makes sense in the foremention cumbersome process
16:18 < chris-tina> aandy, you can even combine errors. I found this comes in handy with things like parsers. So if you have: `choice(a, b)`, and neither a nor b matches, you can catch both errors, and return a list of errors instead of a single one.
16:20 < aandy> looking forward to your post then. will you evaluate promises libraries (like q, assure etc)?
16:21 < chris-tina> aandy, basically, the main advantage of promises is that you can compose asynchronous operations just as easily as you'd compose synchronous one. So you can write things like: `write('foo', read('bar'))`. Semi-coroutines (Co) will give you something like that too, but then you'd write it as: `function* (){ yield write('foo', yield read('bar')) }`.
16:22 < chris-tina> The good thing about semi-coroutines is that they integrate with other synchronous control-flow structures, like, if/for/while, ...
16:22 < chris-tina> The bad thing is that, if you use that in a library today, no one will benefit from it :)
16:23 < aandy> ;)
16:23 < aandy> https://github.com/cujojs/promise-perf-tests#test-results when seems pretty solid (by their own benchmark)
16:24 < aandy> i like the idea of having easier access to defer (i'm a Gopher)
16:25 < Tyrantelf> Aria: Okay...  Getting an error about "ReferenceError: ExistsInDb is not defined"
16:25 < Aria> Spelling? Is that function in scope?
16:25 < Tyrantelf> Okay, rather new to js here.  explain in scope
16:26 < Aria> Functions are available in any function they're inside. 
16:26 < Tyrantelf> yes, it's in scope
16:26 < Aria> And I mean that in a textual, lexical sense.
16:26 < Tyrantelf> i got it..
16:26 < Tyrantelf> you change DB to Db in your edit :|
16:27 < Aria> ExistsInDB. Not ExistsInDb.
16:27 < Aria> javascript is case sensitive.
16:27 < Aria> Yep. Oops.
16:27 < Tyrantelf> I know it is XD
16:27 < Tyrantelf> you changed it on me :P
16:27 < Aria> Sorry about that!
16:28 < richthegeek> I have an internal node module that i'd like to be updated whenenver I run npm install
16:29 < richthegeek> is there any way to do that, or do i have to keep on bumping the version number?
16:29 < Aria> You have to keep bumping the version number. Or perhaps use a git url.
16:35 < aandy> fist bumping?
16:55 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:01 < fiws> I'm trying to make a virtual file system but my lookups suck: http://hastebin.com/qiyuherodo.js
17:01 < fiws> any clues?
17:09 < chris-tina> aandy, yes, When.js is really fast
17:11 < aep> heya, how do i catch sigpipe when writing to a unix socket? try/catch doesnt seem to work. 
17:14 < aep> ah. sock.on("error") works :)
18:00 < jdelgado> Anyone delt with the issue of PCI compliance and NPM?
18:01 < jdelgado> IE just firewealls / private registry
18:02 < AAA_awright> The threat of an attacker uploading malicous code?
18:04 < jdelgado> AAA_awright: Just the fact that firewall's have to be deny all defaulted, what the span of blocks of IP's that need to be whitelisted for NPM
18:14 < schuranator> How would I go about allowing orgins to connect to my api? Do i have to add something to the express app or nginx?
18:20 < pirho> schuranator: either
18:20 < pirho> the headers are quite extensive, best google around for them
18:20 < schuranator> Ok
18:21 < pirho> also you may need to respond to preflight requests, depending on what needs to be requested
18:23 < pirho> some clients will request an OPTIONS
18:26 < harbhub> hey fellas
18:27 <@isaacbw> DON'T TELL ME HOW TO LIVE MY LIFE
18:27 < harbhub> live your life like a boss hog outlaw, isaacbw
18:28 < harbhub> do as i command heh
18:28 <@isaacbw> your will is mine
18:28 < harbhub> lol
18:28 <@isaacbw> what is that from
18:28 <@isaacbw> wc3?
18:29 < harbhub> you will is my command
18:29 < harbhub> starcraft bw i think
18:29 < harbhub> your*
18:29 < robertkowalski> back from munich :)
18:29 <@isaacbw> oh there we go
18:29 < harbhub> is it possible to be grateful for things?
18:30 <@isaacbw> nah
18:30 < harbhub> i think i take my hearing, eyesight, and health for granted
19:08 < harbhub> is there a way to use https module to create an https server that will work in browsers without using a CA?
19:09 < Bubo> CA?
19:09 < staafl_alt> hey good people
19:10 < ningu> harbhub: it will work, it will just say the certificate is not in the trusted set
19:10 < staafl_alt> I need some wisdom
19:10 < harbhub> CA = certificate authority
19:10 < staafl_alt> how can I load a js script in the repl to play with?
19:10 < harbhub> okay ningu
19:10 < harbhub> i will test it out now
19:11 < ningu> harbhub: it would kind of defeat the purpose of a CA if you could just bypass it
19:11 < harbhub> yep
19:11 < ningu> the browser will raise a dialog asking if you want to proceed
19:11 < staafl_alt> please :-)
19:11 < harbhub> i want free CA cert
19:11 < ningu> staafl_alt: good question, not sure
19:11 < ningu> staafl_alt: you can require() but that's a bit different
19:11 < harbhub> ningu, who should i send my pem files to for a free CA cert that is trusted?
19:12 < tboyt> anyone here around to help with a kind of weird npm issue?
19:12 < EaterOfCorpses> harbhub, use https://www.startssl.com/ :)
19:12 < harbhub> 128 bit encryption or 256 bit is their max for free
19:12 < harbhub> which is not even secure, is it?
19:12 < tboyt> i have a package A that dev-depends on package B which depends on package A, but package B won't install the last stable version of package A from NPM because i guess NPM thinks it's a circular dependency
19:13 < staafl_alt> ningu, hmm... require() should work
19:13 < EaterOfCorpses> I think it is secure
19:13 < harbhub> eaterofcorpses, that site has such low bit encryption that i might as well not even use https lol
19:13 < harbhub> 1024 is more standard as something that cannot be cracked
19:13 < staafl_alt> ningu, any way to automate it? I'm not a fan of typing
19:14 < EaterOfCorpses> harbhub, http://security.stackexchange.com/questions/4687/are-salted-sha-256-512-hashes-still-safe-if-the-hashes-and-their-salts-are-expos
19:15 < ningu> staafl_alt: you might be able to do, node -i foo.js
19:15 < ningu> I haven't tried it
19:16 < harbhub> eaterofcorpses, really cool thread
19:16 < staafl_alt> ningu, unfortunately it doesn't work
19:17 < harbhub> it is all about the iterations!
19:17 < staafl_alt> neither does echo require("./script.js") | node -i
19:17 < staafl_alt> the REPL just exits
19:17 < crodas> hi! is there anyway of knowing which C++ modules are using memory?
19:18 <@isaacbw> what
19:19 < Beg_> Making a error, then using replace to correct them across the whole project.... I am so
19:19 < Beg_> scared
19:19 < crodas> I have this graph of memory usage http://cesarodas.com/foobar.html
19:20 <@isaacbw> I have ten toes
19:21 < Beg_> this is node.js not C++
19:21 < Beg_> and your question is vague, are you asking for memory monitoring modules?
19:22 <@isaacbw> Beg_: badly written native modules can do whatever they want with memory
19:22 < Beg_> with node js?
19:22 < EaterOfCorpses> harbhub, so are you gonna use startssl? :p
19:22 < harbhub> only because it is free
19:22 <@isaacbw> Beg_: sure
19:22 < harbhub> i still want 2048 bit encryption
19:22 < harbhub> :)
19:22 <@isaacbw> native modules can do whatever they want
19:22 < EaterOfCorpses> harbhub, dont forget its also trusted 
19:23 <@isaacbw> someone write a javascript runtime with c
19:23 < harbhub> are you working for them?
19:23 <@isaacbw> c++ is for dweebs
19:23 < harbhub> or do you use them?
19:23 < harbhub> or do you just think they are legit and want me to give them a shot?
19:23 < EaterOfCorpses> harbhub, I use ;) found it yesterday :P
19:23 < harbhub> okay lol
19:23 < r04r> harbhub: generate your own certificate and only upload your signing request, you can have the encryption you want
19:23 < harbhub> you sound like a sales person heh
19:23 < harbhub> r04r, what?
19:23 < Beg_> yes I know c++ has great freedom with pointers and addresses
19:23 < EaterOfCorpses> harbhub, lol Im totally not xD
19:24 < harbhub> right now i have a self signed situation, but i will try out StartSSL.com to have a CA backing me
19:24 < r04r> harbhub: if you plan on using startssl, they offer to generate your private key for you during the signup process. Don't do that.
19:24 < harbhub> i see
19:24 < harbhub> but
19:24 < harbhub> my key is 1024bit
19:24 < r04r> There's a button to skip that, and you can upload your own signing request, of your existing key. 
19:24 < harbhub> kinky let me try that
19:24 < harbhub> just give them the priv key and the cert.pem?
19:25 < r04r> no you dont have to give them priv key
19:25 < harbhub> wait i actually have an rsa 2048 bit
19:25 < harbhub> i will use that priv key
19:25 < harbhub> so i just give them the cert.pem?
19:25 < r04r> I don't recall. Either that or you need to generate a signing request
19:25 < Beg_> I will try the ssl out aswell
19:26 < r04r> Give me a minute, there was a nice article which had a step by step to securely and easily navigate startssl's horrendous interface
19:26 < Beg_> but startssl is a isreali company, I don't like that
19:26 < EaterOfCorpses> "horrendous" yep
19:26 < EaterOfCorpses> Beg_, why not?
19:26 < Beg_> EaterOfCorpses-> most viruses i encoutered are from there
19:27 < liquid-silence> hi all
19:27 < liquid-silence> wants the best way to have different versions of packages installed?
19:27 < EaterOfCorpses> Beg_, hackers know the most about the security ;)
19:27 < AAA_awright> Beg_: Guilt by association is kind of a lousy reason, if they're a good company, they're a good company
19:27 < EaterOfCorpses> liquid-silence, npm ls
19:27 < harbhub> i bet this chat room could hack some any website
19:27 < EaterOfCorpses> lol
19:28 < harbhub> if we all collaborated, we could take over the internet lol
19:28 < EaterOfCorpses> >:D
19:28 < Beg_> hahaha
19:28 < AAA_awright> Not that I'm saying they're good :>
19:28 < Stumbler> I call dibs on the weird part of youtube! XP
19:28 < harbhub> lol
19:29 < r04r> Beg_, if you do it right you never give them your private key so there is not that much to worry about besides their authority being.. unreliable
19:30 < harbhub> CA is bullshit anyways, i don't see how it fits into the RSA model
19:30 < harbhub> hey jcrugzz
19:30 < harbhub> anyone here use Backtrack and Metasploit before?
19:31 < harbhub> r04r, startssl.com is asking me to generate the private key...
19:31 < Beg_> Alright r04r, I might come across as racist but it's not my intentions, I am just unsure about what I think about isreal, I have friends that boycot them and seen plenty of bad media coverage for isreal, I'm sure it's a matter of perception and I shouldn't have said I don't like that.
19:31 < r04r> Beg_: harbhub: https://github.com/ioerror/duraconf/blob/master/startssl/README.markdown
19:31 < tboyt> http://stackoverflow.com/questions/17477086/npm-package-as-nested-dependency-of-self blerghhh
19:32 < r04r> Beg_: Unrelated to those views, I am arguing that you are not trusting the company with anything truly important, besides the green bar
19:33 < harbhub> thanks i'm following that r04r
19:33 < diogogmt> I'm trying to use the "request" lib to send put requests to a rest api end point. Anybody knows how can I set the content-type on the request?
19:33 < awaterma> Anyone know if the Oracle DB module works outside of linux? Can't seem to get it to load on OSX.
19:33 < awaterma> npm oracle
19:33 < diogogmt> that's what I have:
19:33 < diogogmt> request.put(url, {form: data}, function (error, response, body) {
19:33 < Beg_> Alright, thanks r04r 
19:34 < diogogmt> where I can place the "Content-Type" header option?
19:34 < EaterOfCorpses> r04r, this bad news is mostly because whole arabia was not happy with israel I guess
19:34 < r04r> harbhub: you can generate a csr request from your existing private/public key as well afaik
19:34 < EaterOfCorpses> I mean Beg_ 
19:34 < Beg_> response.header("content-type" I believe diogogmt 
19:34 < diogogmt> Beg_: response.header?
19:34 < diogogmt> I'm using the request lib
19:35 < Beg_> diogogmt-> oh, i tought that was a express function, then I don't know havnt worked wit hthat
19:35 < diogogmt> this request lib: https://github.com/mikeal/request
19:37 < EaterOfCorpses> How do I pipe a stream starting by the n-th byte 
19:38 < ningu> EaterOfCorpses: maybe use a transform stream to ignore the first n-1 bytes
19:39 < EaterOfCorpses> ningu, yeah I will try that :)
19:40 < mikeal> someone has to have written that
19:40 < mikeal> i just don't know who :)
19:40 < EaterOfCorpses> I will make a gist for it :P
19:41 < EaterOfCorpses> then save it in your favourites for future use :P
19:42 < Beg_> netsplit?
19:42 < Stumbler> looks like one
19:43 < EaterOfCorpses> bya bya people
19:44 < harbhub> hey r04r
19:44 < harbhub> i have finished creating the signed certificate
19:44 < harbhub> what do i use in the https module now?
19:44 < harbhub> for options
19:44 < harbhub> options = {'key':the key, 'cert': the signed cert}
19:44 < harbhub> is it just that?
19:45 < liquid-silence> omfg sails pulls in like 90% of all node modules
19:47 <@isaacbw> shit, someone just gave me an address and I wrote it down in one of my source files
19:47 <@isaacbw> and I don't remember which one
19:48 < EaterOfCorpses> looll
19:48 < ningu> https://xkcd.com/208/
19:48 -!- mode/#Node.js [+o MI6] by ChanServ
19:48 <@isaacbw> woo, ack to the rescue
19:48 < harbhub> what is ack isaacbw?
19:49 < EaterOfCorpses> perfect moment isaacbw 
19:49 <@isaacbw> harbhub: simpler grep
19:50 < harbhub> what is grep?
19:50 <@isaacbw> lol
19:50 < qard> preg spelled backwards.
19:50 < harbhub> heh
19:50 < qard> err...gerp.
19:50 < qard> perg.
19:50 <@isaacbw> prego
19:50 < harbhub> globally search a regular expression and print
19:50 <@isaacbw> it's for searching your file system for shit
19:51 <@isaacbw> and text streams
19:51 <@isaacbw> basically command line regex
19:51 <@isaacbw> it's one of those staple unix programs that you should know about
19:51 < harbhub> ok
19:55 < ningu> isaacbw: the program is called awk
19:55 < ningu> or maybe you meant sed
19:55 < ningu> anyway the xkcd was uncannily the same
19:59 <@isaacbw> ningu: no I meant ack
19:59 <@isaacbw> it's hard to google
19:59 < alexr2> lmgtfy :-)
19:59 <@isaacbw> oh, my lines about being a basic unix program was about grep, not ack
19:59 <@isaacbw> ack is hipster grep
20:00 < niekniek> hello! i'm having trouble understanding this async stuff. I have a socket.on going on. In there I display a <a> tag. In it is onclick. This runs a function. In this function  I want to do socket.emit. But that won't work because this is not part of the initial socket.on. How do I fix this??
20:01 < ningu> isaacbw: ahh, ok
20:01 < ningu> oh yeah, i've heard of it
20:02 < harbhub> niekniek, use callbacks
20:03 < substack> niekniek: why won't it work?
20:03 < substack> have you tried it?
20:03 < ningu> niekniek: don't really understand the issue. don't you have access to the socket object?
20:04 <@isaacbw> I wan't being sarcastic. Ack is a little hard to google
20:05 < ningu> I looked it up with brew info
20:07 < niekniek> excuse me, having a pebkac overhere :(
20:08 < brainproxy> ningu: silversearcher (`ag` on command line) is nice too
20:08 < ningu> hmm
20:09 < ningu> what I really want it something like sed -i that is nice for search/replace in a whole dir
20:09 < ningu> you can do it with sed but I find it not very pleasant, I think you have to do find -exec + sed
20:09 < ningu> or xarags or whatever
20:09 < ningu> xargs, even.
20:10 < brainproxy> find -exec is pretty powerful but I typically have to go lookup through google or in a collection of notes I have how to do certain things 
20:11 <@isaacbw> ningu: I usually just pull out ruby or perl for that
20:11 <@isaacbw> sed is a pita
20:11 < brainproxy> there's always tcl
20:11 <@isaacbw> lol
20:11  * Aredridel lives with find, xargs and sed.
20:12 < ningu> sed is annoying because of the backslash thing
20:12 < ningu> I can never remember
20:12 < ningu> it's just a big context switch when it isn't second nature
20:12 < brainproxy> yeah, mention of tcl tends to get lolz, but it has extremely high utility if you spend some time with it
20:12 < ningu> brainproxy: for doing what?
20:12 < ningu> I am not being sarcastic
20:12 < brainproxy> ningu: for scripting
20:13 < liamkeily> i have a game server running on node, is it possible that on an event the server restarts?
20:13 < ningu> so doing what you'd use perl for?
20:13 < liamkeily> for example i want to be able to do a command /server restart from a client, and then the server will restart
20:13 < brainproxy> ningu: http://antirez.com/articoli/tclmisunderstood.html
20:13 < brainproxy> ^ an article on tcl by the creator of redis
20:14 < awaterma> Hey all. Anybody know if the "node-db" project is moving on to other dbs? It doesn't seem to have an update since 2011. http://nodejsdb.org/
20:14 <@konobi> perl -pi -e 's/blah/foobar/g' $file
20:14 < brainproxy> for my part, I've just not had enough free time to really get comfortable w/ it, but have had fun tinkering
20:14 < EaterOfCorpses> liamkeily, use forever to start the server and just kill the server with the /restart thing
20:14 < liamkeily> oh ok
20:15 < liamkeily> does forever restart it if it goes down then?
20:15 < brainproxy> liamkeily: you can also try supervisor
20:15 < kenperkins> sup
20:15 < brainproxy> depending on use case
20:15 < EaterOfCorpses> liamkeily, yup
20:15 < liamkeily> does supervisor do the same thing?
20:15 < liamkeily> i saw the supervisor also restarts when you change server code which could be useful
20:15 < brainproxy> liamkeily: similar features
20:20 < Trudko> Guys i have simple app with authetication . So far everyhing I have is in one file -> http://jsbin.com/urorin/1/edit . I have some autheticaion ther eusing passportjs some datbaase, some basic roots for index and for authetication(login , logout, register new user etc) I want to split it into files. 
20:21 < Trudko> From what I understand I should put routes to two files based on functionality so it would be index and authetication(containing passportjs), then third file would contain basic database info(connection, table creation) fourth would be for database authetication model fifth would be general app file. does the basic idea sounds right?
20:34 < jdelgado> I have a runaway package in sublimetext 3 that is giving me an alert every second, don't have enough time to get to package control, deleting the package from roaming doesn't work - any ideas? Console command to disable? 
20:36 < jdelgado> Ah! Figured it out. Added it to the ingorned_packages in the config.
20:39 < harbhub> http://einaros.github.io/ws/
20:39 < harbhub> how are you supposed to set up the client?
20:39 < harbhub> it just says var WebSocket = require('ws')
20:39 < harbhub> but require is not part of the browser...o.0
20:39 <@mbalho> a) browserify b) websocket-stream
20:40 <@mbalho> WebSocket is part of the browser
20:40 < harbhub> but you see the example in the link i just posted?
20:49 < harbhub> mbalho, i can't figure it out
20:50 < harbhub> the ws only works with browserify?
20:50 < `3rdEden> harbhub: thats an example on how to use ws as a web socket client on node
20:50 < harbhub> oh
20:50 < `3rdEden> WebSocket is already in browsers.
20:50 < harbhub> i want a browser client heh
20:50 < harbhub> okay
20:50 < harbhub> so just skip the require step
20:51 < `3rdEden> http://www.html5rocks.com/en/tutorials/websockets/basics/
20:53 < harbhub> meh...
20:56 < harbhub> http://labs.dinahmoe.com/plink/
20:56 < harbhub> someone join me
21:00 < harbhub> lol that was fun
21:05 < qard> Anyone know a cross-platform way to identify linux kernel version and distro flavour with node?
21:06 < alho> hi there, i have a noob question about ip addresses while trying to start a nodejs instance on my server.
21:06 < alho> the example code write on the homepage of nodejs.org creates a hello world app that listens to localhost
21:07 < alho> if i set it up like that, and my server is actually accessible to the internet, can i reach this application by typing in the servers actual ip address?
21:07 < alho> or do i have to set the app to listen on the server's actual ip address
21:13 < Tyrantelf> I don't wanna jynx it, but my steam bot in nodejs is finally working!
21:13 < EaterOfCorpses> :D
21:13 < EaterOfCorpses> great work!
21:13 < EaterOfCorpses> dont scam me with your bot >:v
21:14 < Tyrantelf> It's a donation bot for my game server
21:14 < EaterOfCorpses> how does it work?
21:14 < Tyrantelf> the bot?
21:14 < EaterOfCorpses> yeah I mean when does it what?
21:14 < klaemo> Hey noders! How/by what criteria do you choose the license for your open source modules?
21:15 < EaterOfCorpses> klaemo, just this one http://license.visualidiot.com
21:15 < Tyrantelf> it takes keys/metal (TF2 items), calculates an espiration time baseed on how much you give it, then either adds the time onto your expiration in the database or makes a new entry in the database to apply donator
21:16 < Tyrantelf> then I'm going ot have a script running every 10 minutes or so with cron to apply donator on the servers/remove expired people
21:16 < EaterOfCorpses> I play TF2 myself :D
21:16 < EaterOfCorpses> so its a pay2play server kinda thing?
21:16 < klaemo> EaterOfCorpses: that's pretty sweet :)
21:17 < Tyrantelf> no, not pay2play
21:17 < EaterOfCorpses> klaemo, that guy is awesome. ;p
21:17 < Tyrantelf> just donations to keep it running
21:17 < Tyrantelf> get some cosmetic stuff ingame
21:17 < EaterOfCorpses> oh like unusual effects?
21:18 < Tyrantelf> it's also going to have a paypal option to donation, but with tf2 items so easily resellable (plus I play and like having stuff to buy items), I figure a bot will be handy
21:18 < Tyrantelf> Unusual effects on weapons, skin colors
21:18 < Kakera> Tyrantelf: using node-steam I assume?
21:18 < Tyrantelf> yes
21:19 < Tyrantelf> and node-steam-trade
21:19 < EaterOfCorpses> Great job btw, and metal and keys are always nice :D
21:19 < Tyrantelf> IKR
21:19 < EaterOfCorpses> does it work already?
21:19 < EaterOfCorpses> I got still some laying around :p
21:20 < Tyrantelf> here:
21:20 < Tyrantelf> https://gist.github.com/tyrantelf/a17656c0082ed8fdb1dd
21:20 < Tyrantelf> thats the bot
21:20 < Tyrantelf> and here it is on steam: http://steamcommunity.com/id/iondonate/
21:20 < Tyrantelf> (It used to be a scrapbank bot, ignore the avatar)
21:21 < EaterOfCorpses> lol
21:21 < Tyrantelf> you can add it and try it :P (you don't have to donate, but you can see most of how it works without actually donating)
21:22 <@isaacbw> I just used an <hr /> tag
21:22 <@isaacbw> wutwut
21:22 <@isaacbw> I bet you forgot that existed
21:23 < EaterOfCorpses> why you needed it?
21:23 < EaterOfCorpses> I did yes
21:23 <@isaacbw> to make my pages purty
21:23 <@isaacbw> I'm developing a dashboard for a service and I'm trying as hard as I can to make it look like the 90s
21:23 <@isaacbw> it's kind of hard
21:23 < Tyrantelf> the 90's?
21:23 <@isaacbw> the damn 90s
21:23 < Tyrantelf> so, black background
21:23 < Tyrantelf> green text
21:23 < Tyrantelf> no images
21:23 < Tyrantelf> right?
21:23 < EaterOfCorpses> can we see screenshot?
21:23 < EaterOfCorpses> :D
21:23 < RLa> use header banner
21:24 < EaterOfCorpses> spacer.gif
21:24 <@isaacbw> EaterOfCorpses: maaaybe
21:24 <@isaacbw> eventually
21:24 < EaterOfCorpses> pretty pleassseeee :)
21:24 <@isaacbw> no, I'm basically stealing nearlyfreespeech's design
21:24 <@isaacbw> I need to stop
21:24 < EaterOfCorpses> its nearly free
21:25 <@isaacbw> ugly green color scheme, pixel misalignments, obscure interfaces
21:25 < EaterOfCorpses> intresting
21:26 < gluxon> isaacbw: +1 for screenshot.
21:26 < Kakera> isaacbw: don't forget to add some iframes and tables
21:26 <@isaacbw> ooh, I have plenty of tables
21:26 <@isaacbw> and my links get *rid* of their underline on hover
21:26 < gluxon> isaacbw: Maybe something that says your site only works on IE.
21:26 <@isaacbw> I'm a damn contrarian
21:27 < EaterOfCorpses> "isaacbw: Maybe something that says your site only works on IE" you mean netscape?
21:27 < gluxon> EaterOfCorpses: Nope.
21:27 < Tyrantelf> god
21:27 <@isaacbw> poor netscape
21:27 < Tyrantelf> that site does look like shit XD
21:28 <@isaacbw> it's an awesome service though Tyrantelf 
21:28 < Tyrantelf> Sure
21:28 <@isaacbw> their ssh is slow as beans
21:28 < Tyrantelf> I don't mess with website hosting :|
21:28 < Tyrantelf> well, I don't mess with hosts
21:28 < Tyrantelf> I use my dedicateds
21:28 < Tyrantelf> I use for my game servers
21:28 < Tyrantelf> 2 dedi's, 32GB ram each.
21:29 <@isaacbw> nice
21:29 < Tyrantelf> shitton of space
21:29 < Tyrantelf> anyone here play modded minecraft?
21:30 < EaterOfCorpses> ^ i did. boring now
21:30 < Tyrantelf> same
21:30 < Tyrantelf> know galacticraft?
21:30 < EaterOfCorpses> nope
21:30 < EaterOfCorpses> btw anyone knows whats wrong with my shit? see > https://gist.github.com/EaterOfCorpses/2bb6033c87ad4a445013
21:30 < EaterOfCorpses> I dont understand it
21:32 < Tyrantelf> EaterOfCorpses: your server hates you?
21:32 < Tyrantelf> wait
21:32 < EaterOfCorpses> yeah I think so
21:32 < Tyrantelf> do "chmod +x npm"
21:32 < Tyrantelf> it's probably not excuteable
21:32 < Tyrantelf> and my spelling is shit
21:33 < EaterOfCorpses> chmod: cannot operate on dangling symlink `npm'
21:33 < Tyrantelf> ah, did you uninstall npm?
21:33 < Tyrantelf> basically that means that while "npm" is there, it's not pointing at anything
21:33 <@isaacbw> there go, '3d' table borders
21:33 <@isaacbw> this is the future
21:33 < EaterOfCorpses> thanks :D Tyrantelf 
21:33 < Tyrantelf> think of a shortcut with the file it's linked to missing
21:33 < mkozjak> i am having some problems with sending some data via telnet to some client: every command that has a minus sign (-) in it, doesn't work on the box (in example, 'reboot' works, 'rm -rf /flash/' doesn't). any ideas why? i'm using it like this: socket.write('rm -rf /flash/') ... 
21:34 < EaterOfCorpses> I a symlink failure :D
21:34 < mkozjak> s/box/client
21:34 < Tyrantelf> EaterOfCorpses: Welcome.  I'm great at node, but I know linux pretty well
21:34 < EaterOfCorpses> Tyrantelf, Im playing around with linux for 2-3 months now ;D
21:35 < Tyrantelf> ran it on my desktop for 6 months, been running servers on dedicated for 2 years
21:35 < EaterOfCorpses> Great work! my friend runs has a dedi with Windows :p
21:35 <@isaacbw> lol
21:35 <@isaacbw> what a bastard
21:36 < EaterOfCorpses> I have a "deadi"
21:36 < EaterOfCorpses> some arm slow thingy with 512mb ram
21:36 < Tyrantelf> lol
21:36 < Tyrantelf> you can get a vps really cheap now
21:36 < EaterOfCorpses> I know. gonna move to it when I need the capacity ;)
21:37 < EaterOfCorpses> and have my creditcard 
21:37 <@isaacbw> credit cards are nice
21:37 <@isaacbw> free moneyz?!
21:37 < EaterOfCorpses> I got the creditcard of my mom, lost it. found it back after 2 years. and we dont know the pin so now waiting till she goes to the bank to reset it 
21:38 < Tyrantelf> lol
21:38 < harbhub> guys
21:38 < Tyrantelf> paypal ftw
21:38 < harbhub> socketio isn't working for some reason
21:38 < Tyrantelf> yes harbhub?
21:38 < EaterOfCorpses> Tyrantelf, I first need that thing to get paypal :P
21:38 < harbhub> var socket = io.connect(window.location.href, {'secure': false});
21:38 < harbhub> it says there is no method "connect"
21:39 <@isaacbw> EaterOfCorpses: you lost a credit card and didn't cancel it until two years later?
21:39 <@isaacbw> wtf lol
21:39 < harbhub> this exact code used to work in an old thing i made  o.0
21:40 < Tyrantelf> harbhub: key word "old"
21:40 < Tyrantelf> stuff changes
21:40 < benny___> harbhub: Are you sure the error is not "io is not defined"?
21:41 < qard> io(window.location.href)
21:41 < qard> https://github.com/LearnBoost/socket.io-client#standalone
21:41 < EaterOfCorpses> isaacbw, its a debit card, forgot the name of those things. and I didnt ever cancel it, we just forgot the PIN and I found it soooo Im waiting on a new PIN
21:41 <@isaacbw> you'you're perfect
21:41 <@isaacbw> never change
21:42 < qard> I'm guessing you upgraded from 0.9 to 1.0.
21:42 <@isaacbw> -you'
21:43 <@isaacbw> qard: DON'T TELL ME WHAT I DID AND DIDN'T DO
21:43 < harbhub> :(
21:43 < niggler> lol EaterOfCorpses 
21:43 <@isaacbw> sorry I love you
21:43 < qard> Too bad. :P
21:44 < EaterOfCorpses> niggler, why? I dont get it D:
21:44 < niggler> i think you need to be a bit more vigilant
21:44 <@isaacbw> if you lose a card, cancel it right away and you'll get a new one in a few days
21:45 <@isaacbw> I lose my wallet more or less once a year
21:45 < EaterOfCorpses> we blocked it for some time. and I was too scared to go to the bank and tell them I lost it. and I couldnt do it via internet lol
21:46 < qard> Why would you be scared? :S
21:47 < qard> I'd be more scared of NOT telling them than someone potentially stealing it and draining my account.
21:47 < EaterOfCorpses> Because I lost it. I made a mistake. Yes Im scared that people bite me when I make a mistake :P 
21:47 < qard> You made the mistake of not telling your bank, now we're biting you for it. :P
21:47 < EaterOfCorpses> xD
21:48 < EaterOfCorpses> I thought i lost it in a pinmachine in a store so I thought it was pretty safe :P
21:48 < EaterOfCorpses> but guess where I found my card?
21:48 < EaterOfCorpses> In my wallet!
21:48 < Tyrantelf> bet you facepalmed so hard
21:48 < EaterOfCorpses> Yes I did
21:49 < EaterOfCorpses> it was hidden somewhere behind some flap thingy
21:49 < qard> Did it leave a permanent palm imprint on your forehead? :O
21:49 < qard> http://giantenemyblog.com/wp-content/uploads/2009/06/facepalm1.jpg
21:49 < EaterOfCorpses> Nope :P
21:50 < thedoktor> so I just checked my bank balance guys and got my money back in full from bitcoin-24
21:50 < Tyrantelf> and?
21:50 < EaterOfCorpses> *drumroll*
21:50 < thedoktor> and read the full sentence
21:51 < Tyrantelf> that explains nothing
21:51 < niggler> what's USDBTC currently trading at?
21:51 < Tyrantelf> how many bitcoins did you sell?
21:51 < niggler> the bubble is bursting
21:52 < paulkon> it's a way for the winkelvi to make some quick money
21:52 < paulkon> IPO and short
21:52 < thedoktor> well at present the only people being dealt refunds are those that lodged money and didn't do any trading in bit coins. So no bit coins just the euro transfer in the german account was returned to me in full.
21:53 < thedoktor> i lodged that money the day before the account was locked down
21:53 < thedoktor> got an email 1 week ago asking for my details
21:53 < qard> I think I still have about 0.7 BTC somewhere from when I ran the mining app for about an hour way back when bitcoin was still relatively easy to mine.
21:54 < qard> Just made my room really hot, from my computer working so hard, so I killed it.
21:55 < Tyrantelf> makes you wish you would of run it for like 2 weeks and saved it up, huh
21:55 < qard> not really.
21:56 < qard> Makes me wish I just spent $100 buying some off other people and sell it later.
21:56 < Aredridel> Woo currency speculation ;-)
21:57 < EaterOfCorpses> Tyrantelf, can you help me again maybe thank you :) https://gist.github.com/EaterOfCorpses/5020a4b4d52810db9b52 
21:57 < qard> Honestly though, it seemed kind of stupid to me. And it still does.
21:57 < Tyrantelf> EaterOfCorpses: you try the chmod +x again?
21:57 < paulkon> i don't understand what bitcoin does that paypal doesn't already fulfill
21:57 < paulkon> in essence
21:57 < EaterOfCorpses> Tyrantelf, I did already D:
21:57 < benny___> paulkon: You could turn that around.
21:58 < paulkon> so paypal should be replaced by bitcoin?
21:58 < Aredridel> paulkon: No central authority. That's what. 
21:59 < qard> bitcoin is a nice idea, in theory, just to dodge taxes on currency that changes hands a lot.
21:59 < Tyrantelf> EaterOfCorpses: any error?
21:59 < Aredridel> paulkon: You could have your account at PayPal frozen tomorrow. No recourse.
21:59 < EaterOfCorpses> Tyrantelf, Nope
21:59 < Aredridel> Bitcoin is nice in that it can't be embargoed short of blocking internet access in general.
21:59 < Tyrantelf> Aredridel: true, but the chances of that happening are slim
21:59 < benny___> There is a channel for bitcoins: #bitcoin
21:59 < paulkon> so how do we instill and maintain trust in bitcoin in a decentralized system?
21:59 < Tyrantelf> EaterOfCorpses: try just running "node"
21:59 < paulkon> believe I love the idea
21:59 < Aredridel> Tyrantelf: If only. Paypal accounts get suspended for stupid reasons all the time.
21:59 < paulkon> but currency is built on trust
22:00 < Aredridel> Tyrantelf: It takes only one complaint in some cases.
22:00 < niggler> you can't paulkon 
22:00 < paulkon> that's the whole reason banks are in business
22:00 < niggler> that's the fundamental problem
22:00 < niggler> fiat is a powerful thing
22:00 < Aredridel> Who do you trust more? Banks or math?
22:00 < paulkon> I trust math more
22:00 < EaterOfCorpses> Tyrantelf, then I get the stanard error not found 
22:00 < paulkon> but the guy next to me might not
22:00 < paulkon> he might stay skeptical forever
22:00 < qard> Math, until hackers sit between the input and output.
22:00 < paulkon> and if I need to do business with him
22:00 < paulkon> then I'm screwed
22:00 < niggler> i trust whatever gives me final goods
22:00 < paulkon> or I have to find someone else you takes bitcoin
22:01 < niggler> ultimately that's all that matters
22:01 < paulkon> right
22:01 < Tyrantelf> Aredridel: Verified in all ways paypal business account thats been open since 11/11/11
22:01 < niggler> so when you talk about bit coin, the thing that is most problematic is figuring out how to pay for food etc
22:01 < Tyrantelf> and while I ge tit cna be limited, I doubt it will be
22:01 < Aredridel> Tyrantelf: And mine since 2002. But if I suddenly was successful, it might get blocked for 'review' suddenly.
22:01 < niggler> so putting regulations on BTCUSD and other transactions can kill the currency
22:02 < Tyrantelf> Aredridel: all the money in mine is from donations, so even if it does get limited it's not gunna be a big blow
22:04 < Aredridel> And there's the "It's not a problem because it's not likely to happen to me" attitude. "nothing to hide"
22:04 < Aredridel> But you don't get to decide whether you have nothing to hide ;-)
22:05 < EaterOfCorpses> Grrr...
22:05 < EaterOfCorpses> Building node on my armel gives stupid buserrors
22:06 < EaterOfCorpses> and there are no 10.12 debs for armel
22:06 < EaterOfCorpses> someone halp me?
22:07 < Tyrantelf> EaterOfCorpses: what OS, and how did you install it?
22:07 < sinclair|net> niggler: hi
22:07 < sinclair|net> niggler: up for a chat?
22:08 < niggler> PMd
22:09 < EaterOfCorpses> Tyrantelf, QUERIED you :)
22:13 < raduu> catching an uncaught exception and doing console.log(err.stack) throws the following: Error: read ECONNRESET
22:13 < raduu>     at errnoException (net.js:900:11)
22:13 < raduu>     at TCP.onread (net.js:555:19)
22:13 < raduu> how can I get more?
22:13 < raduu> I need to know who calls this
22:14 < EaterOfCorpses> idk D:
22:22 < asdfasd> how to increase node.js memory?
22:23 < harbhub> what do you mean, asdfasd?
22:23 < EaterOfCorpses> var b="";while(true)b+="D";
22:23 < EaterOfCorpses> thats how you increase it :)
22:24 < asdfasd> I'm getting  FATAL ERROR: JS Allocation failed - process out of memory
22:26 < EaterOfCorpses> your RAM is prolly full D:
22:26 < asdfasd> how do I check it? it seems js has no sizeof function
22:28 < EaterOfCorpses> maybe a thing in the proccess global?
22:30 < asdfasd> wut?
22:30 < harbhub> asfdasd
22:30 < harbhub> process.memoryUsage()
22:31 < harbhub> asdfasd, did that answer your question?
22:32 < asdfasd> imma test it
22:33 < asdfasd> its in bytes?
22:33 < harbhub> it shits out three values
22:33 < harbhub> rrs, heapTotal, and heapUsed
22:33 < harbhub> so you can call it at any time, and it returns those values
22:33 < harbhub> in bytes
22:34 < asdfasd> { rss: 1502597120, heapTotal: 1447766528, heapUsed: 1443077792 }
22:34 < AAA_awright> I think the technical term is returned, but yes
22:34 < harbhub> so you can just call it, make sure you aren't surpassing your total, and BAM! now you know if you are about to blow up your ram
22:35 < asdfasd> so, any tips for using less ram?
22:35 < Aredridel> Do less, keep less around?
22:36 < harbhub> no idea sorry  :(
22:36 < Aredridel> What are you doing that allocates so much?
22:36 < asdfasd> I've heard there's some array overhead
22:36 < harbhub> dafuq are you doing anyways?
22:36 < asdfasd> I'm trying to create the biggest map I can
22:36 < harbhub> ...
22:36 < harbhub> lol
22:36 < harbhub> well you succeeded
22:36 < Aredridel> ... Well, maybe you found the limit then.
22:36 < ashnur> wtf
22:36 < asdfasd> it fails on 2048x2048
22:36 < harbhub> okay
22:36 < asdfasd> which is pretty lame
22:36 < harbhub> so that is your limit on your machine
22:36 < ashnur> i remember this question from some months ago
22:36 < harbhub> your machine is pretty lame lol
22:37 < Aredridel> What sort of 'map'? 
22:37 < bnoordhuis> asdfasd: 2048x2048 what?
22:37 < harbhub> map of the united states?  jk
22:37 < ashnur> a tiled game's map
22:37 < asdfasd> yep
22:37 < ashnur> and he wants to store the whole map in memory
22:37 < asdfasd> I asked it before
22:37 < ashnur> asdfasd: are you the same person?
22:37 < ashnur> haha
22:37 < bnoordhuis> but what does each cell contain? is it just a number or a complex object?
22:37 < asdfasd> yes
22:37 < ashnur> you still have not got it that your approach is flawed
22:37 <@konobi> 32 or 64 bit node binary?
22:38 < asdfasd> its an array of numbers
22:38 < asdfasd> dunno
22:38 < ashnur> he just has a for, and create objects for each tile, and by some Math.random() he also puts up features for tiles
22:38 < bnoordhuis> asdfasd: compile a debug build, start node with --allow_natives_syntax and check the output of %DebugPrint(map)
22:39 < bnoordhuis> it'll tell you what kind of backing store the array has
22:39 < bnoordhuis> if it's not fixed, your array is heterogenous (contains more than one data type)
22:39 < bnoordhuis> those take up more memory, sometimes a lot more
22:42 < asdfasd> DebugPrint? you mean console.log?
22:42 < ashnur> i still don't think anyone should have  2048^2 js objects in memory at a time
22:42 < bnoordhuis> asdfasd: oh btw, numbers should be between -2**29 and 2**29-1 else they turn into heap-allocated doubles
22:42 < bnoordhuis> and i mean %DebugPrint
22:43 < asdfasd> my numbers are pretty small
22:43 < Aredridel> ashnur: Nothing wrong with that. It's a lot, but not too many.
22:44 < asdfasd> that %DebugPrint doesnt work
22:44 < asdfasd> says DebugPrint is not defined
22:44 < harbhub> no, you don't work! jk
22:44 < bnoordhuis> asdfasd: is your array contiguous, i.e. do indices start at zero and count upwards? if not, fix that :)
22:45 < bnoordhuis> asdfasd: re %DebugPrint, you need a) a debug build, and b) to pass --allow_natives_syntax...
22:45 < Aredridel> asdfasd: node compiled debug, and --allow_natives_syntax?
22:47 < asdfasd> my first print, before even creating the map, is 600M
22:47 < asdfasd> { rss: 612454400, heapTotal: 591758848, heapUsed: 561564888 }
22:48 < bnoordhuis> so what are you doing that's using so much memory?
22:49 < asdfasd> it is only about node.js or about my whole pc?
22:50 < ashnur> Aredridel: i don't see why he needs all of it in memory. 
22:51 < Aredridel> That would depend on what one is doing with it.
22:51 < Aredridel> And what performance characteristics one needs.
22:51 < ashnur> ...
22:51 < ashnur> ok. yet when I try to do maths in js, everyone shouts at me
22:51 < ashnur> strange ways of things
22:52 < bnoordhuis> asdfasd: node only
22:52 < ashnur> it feels like the less thoughtful you are about a question the more likely will people help you solve it
22:53 < asdfasd> with 512x512 it uses only 138M
22:54 < owen1> according to Trevor Norris, node 0.11.3 comes with improving buffer creation speed: 
22:54 < asdfasd> I'm multiplying it by 16
22:54 < owen1> Buffer - 1: 226 ns 185 ns 22% faster
22:54 < owen1> Buffer - 128: 262 ns 192 ns 36% faster
22:54 < owen1> Buffer - 1024: 491 ns 284 ns 72% faster
22:54 < Aredridel> ashnur: Nothing wrong with maths in JS -- though without background, people often feel like berating.
22:54 < owen1> Buffer - poolSize: 2143 ns 559 ns 283% faster
22:54 < owen1> what does the numbers 1/128/1024 means?
22:55 < asdfasd> how do I make js collect something?
22:55 < bnoordhuis> collect something what?
22:55 < asdfasd> some array I only use once
22:56 < asdfasd> but its global
22:56 < bnoordhuis> ashnur: i agree that the art of asking good questions is dying... but what can you do?
22:56 < owen1> i guess it's buffer size?
22:57 < owen1> what poolSize means in the context of buffers?
22:57 < bnoordhuis> asdfasd: then don't make it global. js is a garbage collected language, remember?
22:57 < bnoordhuis> either that or .splice() it
22:57 < ashnur> has he shown the code yet? last time he had a pastebin or something with the for loop. it was quite a spectacle
22:58 < ashnur> i can't find it and I am afraid to ask for it :-S
23:00 < mkozjak> is there a way to 'pause' a socket to not raise any data events for incoming data and still be able send to that socket outside?
23:00 < EaterOfCorpses> unbinding?
23:00 < EaterOfCorpses> from the data event
23:00 < Aredridel> mkozjak: use node 0.10; never set up data handlers, use the streams2 interface.
23:00 < Aredridel> mkozjak: streams2 start paused.
23:01 < mkozjak> Aredridel: oh, never knew :/ i have the latest node and use the documentation
23:01 < Aredridel> That was the Big New Thing in 0.10.
23:01 < mkozjak> Aredridel: so socket.on('data'....) ... should be avoided?
23:02 < bnoordhuis> that switches the stream to old mode so yes
23:02 < Aredridel> mkozjak: Yep.
23:02 < EaterOfCorpses> HUH
23:02 < mkozjak> thanks, guys, never knew about this
23:02 < asdfasd> wtf, I'm testing here
23:02 < EaterOfCorpses> why isn that in the docs?
23:02 < asdfasd> 400kb an array?
23:02 < EaterOfCorpses> TELL US THE SECRETS
23:03 <@konobi> there's always typed arrays
23:03 < qard> But then they wouldn't be secret.
23:03 < asdfasd> an empty array
23:03 < EaterOfCorpses> qard: I just dont know what to say anymore
23:04 < qard> Also, that IS in the docs.
23:04 < qard> See: http://nodejs.org/api/stream.html#stream_compatibility
23:06 < EaterOfCorpses> I made a slice function for a stream yat https://gist.github.com/EaterOfCorpses/5930719 :D
23:07 < EaterOfCorpses> *yay
23:10 < asdfasd> no, its 1 kb
23:10 < asdfasd> I mean 10
23:11 < asdfasd> wut
23:11 < asdfasd> the memory usage is increasing on its own
23:14 < asdfasd> the more I print it the higher its value
23:14 < asdfasd> I wanted something that would tell me what memory I'm spending, not this random shit
23:14 < ashnur> what a strange coincidence
23:16 <@mbalho> anyone wanna read this and tell me if it makes sense or not? https://github.com/maxogden/art-of-node#how-require-works
23:19 <@mbalho> isaacs: cc o/ (goal is conceptual understanding, not necessarily low level technical understanding)
23:25 <@konobi> mbalho: not bad, might be worth mentioning it's not nessecarily a folder
23:25 <@mbalho> konobi: oh good point
23:25 <@konobi> that's tripped me up once or twice on a fuzzy day
23:26 < Tyrantelf> mbalho: Umm, your diagram
23:26 < Tyrantelf> something about it..
23:26 < Tyrantelf> subfolder b.
23:26 < Tyrantelf> needs to be under subfolder A's node_modules
23:27 < Tyrantelf> otherwise it looks like it at the same level
23:27 <@mbalho> Tyrantelf: nope subfolder A and subfolder B are both children of folder
23:27 < Tyrantelf> wait, lets see
23:27 < myndzi> i'm returning a (Q) promise from a function, but it seems to stay pending; if i tack a '.then' to the end of the return statement, it executes, but if i tack a '.then' to the end of the calling statement, it fails to execute
23:27 < myndzi> any thoughts?
23:27 < Tyrantelf> Oh, okay
23:27 < Tyrantelf> I getcha
23:28 < Tyrantelf> IT's confusing because you don't explain subfolder_a stuff till the next paragraph
23:28 < Tyrantelf> when I read "Here's an example", I think here's an example of what I've just read
23:28 <@mbalho> Tyrantelf: yea i had a hard time figuring out how to explain it at all, its such an abstract concept
23:29 < asdfasd> array.push is worse! test this http://bpaste.net/show/t1dPZy8APqw6HxXdfYLE/
23:29 < Tyrantelf> I get it, it goes up the directory chain and looks for a node_modules/foo directory in each of the folders till it gets to / 
23:29 <@mbalho> Tyrantelf: well it is supposed to be an example of that, if you following 1 - 2 - 3
23:29 < Tyrantelf> your explaination is good
23:29 <@mbalho> but yea i agree its a little confusing cause the paragraph after it explains it
23:30 < Tyrantelf> Thats my only problem with it
23:32 < Tyrantelf> mbalho: It works, but that one diagram is slightly confusing
23:43 < asdfasd> how do I make an object with no overhead?
23:43 < myndzi> uhhh
23:43 < myndzi> what
23:44 < myndzi> object pooling is what you may be looking for, but the question doesn't make much sense
23:45 < azbyin> myobj = { overhead: '' };
23:45 < azbyin> :p
23:46  * SomeoneWeird gives azbyin an internet
23:46 < azbyin> yay
23:56 <@isaacbw> bitcoins only work if you have proper exchanges
23:56 <@isaacbw> god fucking dammit scroll
23:58 <@isaacbw> I want an internet :(
--- Log closed Fri Jul 05 00:00:48 2013
