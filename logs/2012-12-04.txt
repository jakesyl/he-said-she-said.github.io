--- Log opened Tue Dec 04 00:00:01 2012
00:00 < styol> ravster: yeah you can specify a specific test to run
00:01 < ravster> styol: Okay, so if I just feed it the output of a "find . -name '*.test.js'" in my project directory, it should be able to run everything in there?
00:01 < ravster> I'm trying to keep test files in the same dirs as the files they are testing, instead of in a seperate test/ folder in my project.
00:01 < styol> ravster: "mocha dirname" should work also, otherwise you can provide each specific one like "mocha dirname/foo.js dirname/bar.js"
00:02 < styol> ravster: ah gotcha
00:03 < ravster> so I have foodir/foo.test.js, and bardir/bar.test.js
00:05 < Youdaman> q: i've written a couchapp, but i'm not sure whether i should stick with that or just use couchdb for the db side of things but have the app side of things separate, i.e. just a node app that accesses couchdb, instead of a html/js app being served out of couchdb -- what are the advantages/disadvantages re performance?
00:06 < substack> it's probably easier to just use couch for storing data and doing map/reduces
00:07 < substack> since if you need to call out to system io to do processing if you're already in node you can just do that
00:08 < Youdaman> substack: that's true. i do plan on adding functionality to send emails -- i might ask in the couchdb/cloudant etc channels about that specifically
00:08 < Guest_1448> is it possible to update connect without updating expressjs
00:08 < jsilver> in node, does coercing things onto the global object work?
00:08 < styol> ravster: provide any number of tests to run and it should work, like "mocha foodir/foo.test.js bardir/bar.test.js -R spec"
00:08 < jsilver> i want to store data there shared to all tcp clients
00:13 < garthk> Indenting: 2 spaces or 4?
00:14 < misterhat> \t
00:14 < misterhat> i'm a rebel, yes
00:16 < deoxxa> misterhat: criminal scum!
00:16 < misterhat> yes yes
00:24 < medice> 2!
00:24 < medice> (4! would equal 24 so it's wrong)
00:25 < shama> Can you get a jsonp list of npm modules filtered by a tag within the keyword, name and description fields?
00:25 < niggler> just use \t and let people specify :ts
00:25 < misterhat> yes
00:25 < misterhat> YES
00:25 < misterhat> could not agree more niggler
00:25 < misterhat> it's customisation 
00:25 < py1nb> anyone know about using memcache with compressed items? I found a blog entry on tagged, but the diff patch cant be applied to current memcached.
00:25 < shama> I have a list filtered by keyword now: http://isaacs.iriscouch.com/registry/_design/app/_view/byKeyword?startkey=[%22nodecopter%22]&endkey=[%22nodecopter%22,{}]&group_level=3&callback=? but want to get as close to npm search as possible
00:25 < s5fs> great advice, now what should I map my leader key to?
00:25 < medice> tabs are poorly supported by online services
00:25 < misterhat> like what
00:26 < misterhat> most online services convert them to spaces anyway
00:27  * medice is just gonna escape the argument
00:28 < TooTallNate> nodecopter, nice :)
00:29 < shama> TooTallNate: It's for this issue: https://github.com/nodecopter/nodecopter.com/pull/9 :)
00:30 < TooTallNate> shama: looks cool!
00:30 < shama> btw you're demo was my favorite :)
00:30 < TooTallNate> shama: were you at dronegames?
00:31 < garthk> Ok, concatenating 33,554,432 16-character strings to produce 0.5GB final string the awful way took ~4s. Slow, but not the worst thing I've ever seen.
00:31 < TooTallNate> and thanks :)
00:31 < shama> yeah I was the guy in a green shirt who volunteered to be an annoying photographer :)
00:32 < TooTallNate> shama: well i thought the pics came out good so good job!
00:32  * garthk is still waiting for TooTallNate to have a production need for node-expat on Windows, as he's given up trying to get the bloody thing to build himself. :)
00:32 < shama> TooTallNate: thanks!
00:32 < niggler> regexp > expat
00:32 < niggler> >>> 'regex[
00:32 < purr> niggler: SyntaxError: Unexpected token ILLEGAL
00:32 < niggler> >>> 'regexp' > 'expat'
00:32 < purr> niggler: (boolean) true
00:32 < niggler> purr has spoken
00:32  * niggler pets purr
00:33 < garthk> Oh, hang on. TooTallNate has  done more on his fork of node-expat in the last two months. WOot.
00:33 < TooTallNate> garthk: you probably want the main node-expat; all my stuff has been merged upstream
00:33 < garthk> TooTallNate: really? I'll try again. Thanks.
00:33 < TooTallNate> garthk: show me the error you're getting though
00:34 < TooTallNate> garthk: also, what version of windows and msvs?
00:35 < garthk> TooTallNate: oh, t'was months ago. Also, it just occurred to me that the main reason to use it was the data I just figured out I can only process at ~7MB/s with node-expat. As luck would have it, though, it's simple and repetitive. After niggler goaded me into trying regexps, I ran some tests. It's ugly, but fast. :)
00:36 < jerrysv> TooTallNate: did your patches for the pi get merged in to master?
00:37 < TooTallNate> jerrysv: yes afaik, node v0.8.15 should build properly for ARM out of the box
00:37 < garthk> Appending 64-length strings to '' one at a time 8388608 times in under 1s? Ok, so that'd bottleneck me at 512MB/s, which is way faster than I need. Woohoo!
00:37 < jerrysv> TooTallNate: it does, which is why i asked!
00:37 < TooTallNate> jerrysv: :)
00:37 < Azra-el> anybody using mongoose? if so... how can i check if result of find is empty? 
00:37 < jerrysv> TooTallNate: coming to the hardware hack this weekend at voxer?
00:39 < TooTallNate> jerrysv: link?
00:39 < jerrysv> https://tito.io/voxer-events/hard-hack
00:40 < TooTallNate> jerrysv: possibly… it's a PITA to drive into the city on weekends since i do it every weekday
00:41 < acidjazz> trying to create a sample module, test.js has : exports.func = function() { console.log('test'); }; and then i var test = require('./test'); .. i get Error: Cannot find module './test' .. any ideas?
00:41  * TooTallNate hates commuting
00:41 < jerrysv> TooTallNate: it will be awesome though. i'm bringing some touch screens and a bunch of misc hardware
00:41  * TooTallNate thinks it's better than flying though
00:41 < jerrysv> TooTallNate: yeah, leaving friday afternoon and getting home around midnight sunday :/
00:41 < acidjazz> ah i think i just figured it out
00:41 < TooTallNate> jerrysv: if it's a nice day i'd be excited to take my MiFi ar drone demo one step further
00:42 < jerrysv> TooTallNate: good excuse to come! it looks like it will be nice according to the weather app on my phone
00:42 < TooTallNate> sounds good
00:52 < Guest_1448> so um I have node 0.6.x 32 bit installed on windows
00:52 < Guest_1448> will updating to 64 bit 0.8.x cause compatiblity issues?
00:52 < Guest_1448> i'm mainly asking about x64 vs x32
00:53 < deoxxa> for anything that's got a build step, the answer is "probably"
00:53 < deoxxa> i.e. if it has to compile any c/c++ code
00:54 < Guest_1448> mmm I'll just download x86
00:54 < Guest_1448> already got the 0.6 vs 0.8 and old express version to handle..
00:55 < deoxxa> if you don't have a specific thing you want to use 64 bit node for, there's no real compelling reason to do so
00:56 < Guest_1448> I was wondering since it's the default download on the homepage
00:59 < TooTallNate> i mean the 64-bit one should be fine
01:01 < styol> JSHint sez: Don't make functions within a loop. Am I going to hell for this and may I ask why?
01:01 < styol> >>> var async = function(arg, callback) { return callback(false, arg); }; var foo = ['bar']; for (var i in foo) { async(foo[i], function(err, arg) { return arg; }); }
01:01 < purr> styol: (string) 'bar'
01:04 < kamikazeknutter> so… I'm trying to compile Node.js but to include modules as part of the binary. can anyone point me in the right direction? I know how to compile one file at a time, but a whole module/directory is something else
01:07 < xastey> anyone familar with http://faye.jcoglan.com/ here.. trying to configure my server (centos 5) to handle my connections
01:09 < xastey> after a while (a couple of days) i get Error: accept EMFILE.. seems like sockets are not being released, the active connections on the site never go above 250.. and ulimit -n is set to 4096 already
01:10 < xastey> here are my kernel config changes http://pastebin.com/S0pMZRzT
01:14 < acidjazz> so im in a module user.js .. and im in an export.list function and want to call/use another export.function in the same file.. whats the best way to do this?
01:16 < ravster> I have a bunch of helper files in my project directory.  To keep things modular, I'd like to be able to 'require' them by name but not include the file-paths. Should I put them in their own directories and then do a npm-install on them?
01:17 < ravster> They are practically libraries in their own right, but I want to keep them in the codebase of my project for now.
01:17 < ravster> instead of a seperate repo
01:25 < jrajav> ravster: If you know that you'll separate them out into their own modules later on, symlink them to node_modules dirs in your project root. If not, then just use the relative path.
01:26 < styol> acidjazz: I'm not sure it is the "best" way, but one way is -- var user = { list = function(){}, foo = function(){ user.list(); } }; user.bar = function(){}; module.exports = user; // in another file, var user = require('./user.js'); user.foo(){}; user.bar(){};
01:27 -!- mode/#node.js [+o piscisaureus_] by ChanServ
01:27 < acidjazz> styol: thats too far.. i only want to use an export function w/in an export function in the same module
01:28 < Youdaman> substack: re node + couchdb: http://www.livelycouch.org/ -- checking out whether it fits the bill
01:28 < styol> acidjazz: <guess> export.foo = function() { export.list(); }; </guess>
01:37 < ravster> jrajav: so I shouldn't use 'npm install foodir/' to copy the files to node_modules?
01:41 < jrajav> ravster: Oh, yeah, that should work. I think I misunderstood
01:45 -!- mode/#node.js [+o piscisaureus_] by ChanServ
01:59 < samholmes> I keep forgetting what dnode(cons) does. dnode's readme is very confusing to me.
01:59 < samholmes> substack: ^
02:00 < substack> samholmes: rpc
02:00 < substack> with callbacks
02:00 < samholmes> remote proceedure callback
02:00 < samholmes> But what does dnode(function...) do?
02:01 < substack> creates an object to hand off to the other side
02:01 < samholmes> So, cons is a constructor that creates on object on every remote connection?
02:01 < substack> yes
02:02 < samholmes> How is it different than d.on('remote',cb) ?
02:02 < substack> or you can pass in an object if you don't need to close over the remote object and connection
02:02 < substack> 'remote' fires with the other side's object when it becomes available
02:02 < ravster> jrajav: :D And then I'm testing this and I see that when I make a change in the code, that change isn't propagated to the node_modules part when I do a 'npm install'.  'npm update' doesn't seem to bring in updates either.
02:02 < substack> cons gets an empty remote initially which gets populated when 'remote' fires
02:02 < substack> because each side needs to send the other side its methods
02:03 < substack> so you can't know what the other side has until you've sent your own methods
02:03 <@isaacs> MARK MY WORDS. NODE 0.12 WILL SEE MASSIVE CHANGES IN HTTP.
02:03 < samholmes> I see.
02:04 -!- Topic for #node.js: Node.js - hey java smiths try the java scripts - http://nodejs.org p.s. jerks get kickbanned
02:04 -!- Topic set by mbalho [~max@ve.5bpbxlsy.vesrv.com] [Mon Dec  3 23:07:16 2012]
02:04 < samholmes> However, I'm still a bit confused, cause does this mean that every remote get's it's own version of a local on the server?
02:04 <@isaacs> mbalho: I APPROVE OF YOUR TOPIC
02:04 < xastey> anyone familar with http://faye.jcoglan.com/ here.. trying to configure my server (centos 5) to handle my connections
02:04 < xastey> after a while (a couple of days) i get Error: accept EMFILE.. seems like sockets are not being released, the active connections on the site never go above 250.. and ulimit -n is set to 4096 already
02:04 < ravster> Is there any way to make 'npm link' work only locally?
02:04 < xastey> here are my kernel config changes http://pastebin.com/S0pMZRzT
02:05 < TooTallNate> isaacs is on much caffeine right now i think :p
02:05 < ravster> I don't want to mess around with global stuff.
02:05 <@isaacs> no, not much caffiene
02:05 <@isaacs> I've just been working in http.js all day
02:05 < TooTallNate> ouch
02:05 <@isaacs> choking back the gag reflex and struggling to not say FUCK IT and rewrite the whole thing
02:05 < samholmes> TooTallNate: Every heard of these http://www.steaz.com/energy-berry/ ? :D
02:06 < TooTallNate> samholmes: can't say i have
02:06 < TooTallNate> are they good?
02:06 < samholmes> TooTallNate: I bought a 4 pack of these last night.
02:06 < samholmes> TooTallNate: I like them. :)
02:06 < TooTallNate> nice :)
02:07 < TooTallNate> hard for me to leave my Rockstar Punch'd though
02:07 < samholmes> Check out the indgredients on those bastards. Makes me fee good about being a caffiene junkie. xP
02:07 < niggler> samholmes they are all deadly
02:07 < niggler> plus its caffeine
02:07 < samholmes> TooTallNate: Rockstar Punch'd is the only flavor I could tolerate from RS. XD
02:07  * samholmes is a red bull guy
02:07 < samholmes> niggler: It's tea.
02:08 < samholmes> niggler: so how bad could it be.
02:08 <@Nexxy> everything is terminal
02:08 < niggler> i used to drink redbull
02:08 < samholmes> Nexxy: Then one must speak relatively.
02:08 < samholmes> niggler: then you took an arrow to the knee?
02:09 < niggler> indeed samholmes
02:09 < samholmes> knee meaning kidnee
02:09 < niggler> then i realized i couldnt sleep normally
02:09  * samholmes puns woohoot!
02:09  * niggler pets samholmes
02:09 < samholmes> niggler: Sleep is for the weak.
02:10 < niggler> yeah well not all tasks are flex-time
02:10 <@Nexxy> but sleep makes us live longer!
02:10 < samholmes> Well, I'm weak at times, which is why I sleep! Horay!
02:11 < jerrysv> Nexxy: when do you hit sf?
02:11 <@Nexxy> jerrysv, fridayz
02:12 < innociv_> I really need help. :|  Some DoS attack is making my node.js use up 100% cpu and become un responsive until I restart it.  I can't figure out how to prevent it from using 100% cpu like that.
02:12 <@Nexxy> innociv_, where is the DoS originating?
02:12 <@Nexxy> put some iptables up
02:12 < samholmes> So, substack. You were saying how the constructor is used to close over the remote. This would mean that every remote would create a copy of the local on the server. So, if there were 10,000 remotes, then that would mean there are 10,000 unique objects on the server in memory. Yikes!?
02:12 < innociv_> I have iptables up, and cloudflare.
02:12 < jerrysv> Nexxy: time? i'm on alaska 388 arriving at 2:50
02:12 < innociv_> It doesn't take down my server.
02:13 < innociv_> The ips are spoofed and change so it's rate limiting. I can't block the ip(s).
02:13 <@Nexxy> jerrysv, oh hey me too lol
02:13 <@Nexxy> seat 21a
02:13 < jerrysv> Nexxy: woo! 15f for me
02:13 <@Nexxy> we can probably get our seats shifted around
02:13 <@Nexxy> I always preboard anyway
02:13 < jerrysv> Nexxy: would be awesome
02:14 <@Nexxy> do you want me to pick you up?
02:14 < jerrysv> Nexxy: oooo. i might actually, i'm on your way to the airport if you take columbia
02:14 < jerrysv> Nexxy: switch to private chat for the rest of this?
02:14 <@Nexxy> sure!
02:16 < deoxxa> innociv_: you can't spoof an ip
02:17 < dnz-> deoxxa: what would you knowa bout spoofing IPs
02:17 < innociv_> Well, they're constantly changing anyway, I can't just keep banning them.
02:17 < dnz-> innociv_: you CAN spoof it
02:17 < deoxxa> dnz-: answer your phone jerkface
02:17 < innociv_> or blocking, rather.
02:17 < dnz-> you just need to learn more about IP than deoxxa
02:17 < deoxxa> tried to call you this morning
02:17 < dnz-> haha
02:17 < dnz-> deoxxa: its fucking up, did you try call ?
02:17 < dnz-> ah ok
02:17 < dnz-> yeah it lsoes reception for no reason till i reboot
02:17 < dnz-> some dodgy android rom
02:17 < deoxxa> lol
02:18 < dnz-> you back home?
02:18 < deoxxa> innociv_: probably proxies. the solution is rate limiting in any case.
02:18 < innociv_> Yeah. I have rate limiting.
02:18 < deoxxa> dnz-: yeah, got in on sunday evening/monday morning
02:18 < innociv_> The DDoS attacks are super tiny and make node.js go out of control.
02:18 < dnz-> you at work today ?
02:18 < deoxxa> yeah
02:18 < deoxxa> just about to go to lunch
02:18 < dnz-> ahh i was l8 to work or i could of trained up
02:18 < deoxxa> ha
02:19 < dnz-> i got my hose head mask today aslo
02:19 < dnz-> also
02:19 < dnz-> came from amazon
02:19 < deoxxa> innociv_: maybe do you rate limiting one level up - do you have a reverse proxy or something? i find it surprising that it's heavy enough load to peg node at 100% cpu though...
02:19 < deoxxa> dnz-: lol gay
02:19 < dnz-> its awesome
02:19 < innociv_> Yep. I use cloudflare as a reverse proxy
02:20 < deoxxa> innociv_: do they have a rate limiting option?
02:20 < innociv_> deoxxa, the dos attack just lasts for a minute and makes node.js get stuck at 100% cpu until i restart it.
02:20 < dnz-> https://www.flowdock.com/rest/flows/silverstripe-australia/main/files/0MkEd_blFlT645ncm8uyLg/IMG_20121204_112415.jpg
02:20 < dnz-> not sure if you can see that
02:20 < innociv_> deoxxa, no idea what they do exactly. They filter traffic somehow, by like recognizing it as bad somehow  then blocking it
02:20 < deoxxa> ah
02:20 < deoxxa> ok
02:20 < Lorentz> more likely you have some weird runaway code that's being triggered sporadically
02:20 < deoxxa> yeah
02:20 < Lorentz> by a certain person trying to do x on it
02:21 < deoxxa> sounds like you have an infinite loop going on or something
02:21 < deoxxa> maybe add some profiling to an instance or two
02:21 < dnz-> ok back to work
02:21  * dnz- &
02:21 < deoxxa> wait dnz- did you mean "horse head"?
02:22 < deoxxa> i'm guessing he did
02:22 < deoxxa> in which case, not lame
02:29 < acidjazz> (○｀ε´○)y-~~~ SMOKE WEED EVERY DAY
02:30 < TooTallNate> nate dogg?
02:30 < innociv_> Lorentz, that's possible as well but I can't think of what.
02:31 < innociv_> I couldn't really get profiling working though.
02:34 < Lorentz> if you want to find out, you'll have to get it working
02:35 < innociv_> I tried node-profiler, or something like that, which had a web interface, but it would always stop running after a few minutes while it sometimes took hours/days for it to spike to 100% cpu and getting stuck there.
02:43 < samholmes> substack: Why doesn't dnode emit 'end' with the remote object it's ending?
02:43 < samholmes> that's ending*
02:45 < innociv_> How do you typically profile a node.js app when you're running it with forever?
02:53 < substack> samholmes: it does
02:54 < samholmes> substack: Sorry, I meant. Why isn't the remote objected passed as an argument to the 'end' event?
02:54 < samholmes> d.on('end', function(remote){ /* do stuff with remote */ });
02:54 < samholmes> or is it?
02:55 < samholmes> It doesn't say in the documentation.
02:55 < samholmes> Well, there is no docs, or is there?
03:01 < cming> Hi, I want close the socket after
03:02 < cming> cluster fork a worker
03:02 < Youdaman> couchapp vs node+couch -- keen to hear advantages/disadvantages from those with experience
03:02 < cming> I want only worker listen on a socket and cluster don't 
03:03 < cming> anybody can help me?
03:04 < styol> Youdaman: lemme throw another curveball in there, node+couchbase
03:07 < Youdaman> styol: i'm assuming my couch is in the cloud anyway, so that's cool
03:07 < samholmes> substack: Is it possible to have a quick chat with you about dnode on skype? :) Or would that be too intrusive? xP
03:08 < substack> I don't like skype
03:08 < substack> what's wrong with irc?
03:08 < samholmes> substack: irc fine. nvm.
03:09 < Youdaman> samholmes: substack codes naked, so it might be intrusive -- for all involved
03:09 < samholmes> Youdaman: lol
03:10 < samholmes> Is the second argument in dnode's cons function anything special or is it simply what dnode returns? I ask this because it would seem as though d.on('end', cb) would do something different from within the cons function than from outside of it.
03:11 <@mbalho> substack: sometimes we wanna see your perty mug
03:12 < samholmes> https://gist.github.com/4200196
03:13 < samholmes> If you look closely, for every connection to this server-side script, we add a listener to the 'end' event. But wouldn't _every_ listener to the end event be triggered when one connection ends?
03:15 < acidjazz> is there a way in jade to display like 15 li's w/out li repeated 15 times?
03:15 < cming> end event only triggered when fin package received , FYI
03:16 < cming> @acidjazz,  try each or for statement
03:18 < substack> samholmes: it's the same, used to be a different kind of thing in the <1.0 version
03:18 < substack> samholmes: you create a custom dnode() instance for every connection
03:18 < substack> see the streaming examples
03:18 < substack> the old way works but is deprecated
03:19 < jsilver> YAY IT WORKS
03:19 < jsilver> a working node coffee gc2 server with scrollback: https://raw.github.com/jsilverMDX/GlobalChat2/master/Node-GChatServ/server.coffee
03:19 < jsilver> works with my clients
03:19 < substack> samholmes: just ignore the .listen() and .connect() and do everything this way: https://github.com/substack/dnode#streaming
03:19 < substack> .listen() and .connect() will be removed whenever I get around to that
03:19 < substack> in the 2.0 probs
03:20 < substack> duplex streams are much simpler
03:20 < substack> and work over any kind of transport
03:20 < mscdex> bnoordhuis: ping
03:20 < bnoordhuis> mscdex: pong
03:21 < LouisT> is that a person or a really slow bot?
03:21 < bnoordhuis> a bot
03:21 < acidjazz> cming: well im not looping thorugh an array or object.. i want 20 li's
03:21 < acidjazz> cming: ist here no each list(1..20) ?
03:21 < acidjazz> is there*
03:21 < mscdex> bnoordhuis: what version of chrome/chromium do you recommend for heapdump? i was trying on chrome 23. i tried the latest nightly which is 25 and it doesn't load the snapshots at all
03:22 < timeturner> is there an equivalent of gte for Dates in mongoose?
03:22 < bnoordhuis> mscdex: i'm running 24.0.1312.27 beta atm. ymmv
03:22 < mscdex> hrmmm ok
03:23 < samholmes> substack: oh god I'm so confused..
03:24 < samholmes> Okay. There's a function passed to dnode(); This function gets two arguments passed to it, remote and d. Why is d passed to this function? What is d?
03:24 < samholmes> Why is d returned by dnode() and is d === d from within the function?
03:24 < jsilver> how can I serialize an array
03:25 < rm_> Hi, how do you install node.js without much knowledge of servers?
03:26 < samholmes> I thought the function passed to dnode() (aka cons) _constructs_ an object through the `this` variable, and the `this` is the new instance for every connection, not d?
03:26 < mscdex> rm_: there's many ways
03:26 < mscdex> rm_: what platform?
03:26 < substack> samholmes: d is the connection reference
03:26 < substack> getting remote and d as arguments just lets you close over them
03:26 < rm_> can you just unpload and include a file? Linux
03:26 < misterhat> which distro
03:27 < samholmes> substack: so is what dnode() returns and what is passed to the cons function not the same thing?
03:27 < misterhat> i prefer using ppa on ubuntu but most people would probably recommend compiling from source tarball
03:29 < substack> samholmes: they are the same thing
03:30 < substack> var d = dnode(function (remote, d_) { console.log(d === d_) })
03:31 < styol> rm_: what distribution of linux?
03:32 < samholmes> substack: Then why would you need to pass d to cons in order to close over it when you have access to the outer scope anyway? More importantly, how is it that if I did d.on('end',..) from within the closure this listener only triggers on one specific remote's connection ending?
03:32 < rm_> sorry, no idea, how do I find out? 
03:32 < substack> samholmes: 1) historical api reasons and you can very easily ignore the 2nd argument
03:33 < sosnon> there are several ways to include non-node JS libraries; what is the 'right'/recommended one? this one http://stackoverflow.com/a/8808162 ?
03:33 < substack> samholmes: 2) you only ever bind 1 connection in a dnode() duplex stream
03:33 < substack> net.createServer(function (stream) { var d = dnode(); d.pipe(stream).pipe(d) }).listen(5000)
03:33 < substack> is why
03:33 < rm_> ow actually sorry. I am trying to use node on Business Catalyst. Any ideas? 
03:36 < mscdex> business catalyst?
03:36 < jw___> what's the state of cluster module is it production ready?
03:36 < substack> jw___: http://nodejs.org/docs/latest/api/cluster.html#cluster_cluster
03:37 < substack> I'm unsure what you actually mean by "production ready"
03:37 < substack> those kinds of terms always seemed really nebulous
03:37 < rm_> Yeh, adobe's business catalyst
03:38 < jw___> @substack it depends really if you ever ran a production server or not I guess
03:38 < gluxon> :O
03:38 < jw___> ;)
03:38 < gluxon> Multi-threaded Node.js! XD
03:38 < gluxon> :D
03:38 < substack> jw___: I run servers that make money with pkrumins
03:38 < jw___> :D
03:38 < substack> for about 2 years now
03:38 < jrajav> Multi-threaded Node.js is like having an F1 car with 6 rows of wheels
03:39 < sosnon> so is vm the right way to include external libraries without changing their actual code?
03:39 < asadpakistani1> wth...when did 0.8.15 come out?
03:39 < mscdex> asadpakistani1: a few days ago or so
03:40 < mscdex> rm_: do you even have ssh/shell access?
03:41 < jw___> @substack well yea 2 years doesn't mean 10 years still low millage imho 
03:41 < rm_> nope.. adobe give you nothing. You can't run server side scripts that's why I thought node.js might be a good solution for getting pdfcrowd in place. 
03:42 < mscdex> rm_: well, if you're that restricted i'm not sure how you're going to be able to get something like node to execute on there
03:43 < mscdex> rm_: node is a process that you have to start somehow
03:43 < rm_> You can run jquery and create your own html files, but no not really any further. So I take it that node uses a server side environment to operate. I dislike BC so much, but it's a clients solution atm. Thanks
03:43 < kamikazeknutter> anyone tried to compile whole modules right into the Node binary yet? would love if someone figured it out already 
03:44 < mscdex> rm_: yes, node is a server-side thing
03:44 < jrajav> rm_: That's what Node is, yes; it's a server side Javascript VM
03:44 < jrajav> Plus a few libraries to make that make more sense
03:45 < jrajav> i.e., it's a binary for running Javascript scripts, much like 'perl' is a binary for running perl scripts
03:46 < jrajav> If the world ever made sense, it might just be called 'javascript' or 'js' or even 'ecma'
03:48 < mscdex> gah
03:48 < mscdex> i'm trying all kinds of chrome/chromium builds and none of them want to do a compare view between heap snapshots
03:48 < mscdex> :\
03:49 < mscdex> all i want to do is track down a memory leak!
03:49 < jrajav> Famous last words of many an unwary hacker
03:50 < mscdex> i mean, if i call gc(); that fixes things, but... bleh
03:52 < substack> jw___: that sounds just about as meaningless as "years of experience" on a resume :p
03:58 < samholmes> Why are streams unstable?
04:00 < kamikazeknutter> have you never seen ghostbusters?
04:02 < RLa> don't cross the streams :)
04:03 < kamikazeknutter> yup :)
04:32 < dawra> if i didnt use express framework, would it be easy to do the routing part and getting post data
04:40 < jw___> @substack the true meaning is always at the bottom of all others
04:41 < jw___> @substack btw some things do have meaning
04:42 < garthk> XML Parsing for Bastards™: regexp-based ripping apart of this bulky, receptive format: 113MB/s so far. It'll drop when I deal with the innards, but it's the right order of magnitude.
04:50 < pspeter3> Is there a module that converts an options object into command line options for exec?
04:50 <@konobi> pspeter3: searched npmjs.org?
04:51 <@konobi> Nexxy: where's max these days?
04:51 < dnz-> deoxxa: http://cyrax.drkns.net/horse.jpg
04:51 < dnz-> that was img from this morning
04:52 < pspeter3> konobi: Yep
04:52 < deoxxa> oh lol
04:52 < deoxxa> ok win
04:52 < dnz-> yeah awesome
04:52 < dnz-> $25 well spent
04:52 <@konobi> pspeter3: isaacs has an options parser, tried that?
04:53 < pspeter3> konobi: I want to do the opposite and take options and convert them into the array for child_process.exec
04:54 <@konobi> pspeter3: oh... heh
04:55 <@konobi> pspeter3: should be easily hackable up
04:55 < jerrysv> pspeter3: map?
04:55 < jerrysv> forEach?
04:55 < pspeter3> konobi: yep. I figured I would check before I did
04:56 < jerrysv> pspeter3: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/forEach
04:56 < jerrysv> pspeter3: should be easy to iterate and join into a string
04:56 < jerrysv> with - or -- nomenclature
04:56 < pspeter3> jerrysv: Yep
04:57 < pspeter3> jerrysv: I was just looking for something that would ideally dedup - and -- args as well as know if something is just a boolean argument
04:58 <@konobi> i guess it would be dependent on what the child program would be wanting/needing
04:59 < RLa> dnz-, the js horse?
04:59 < RLa> oh no he's real
05:00 < dnz-> wat
05:00 < dnz-> i am a horse son
05:00 < dnz-> as you can see
05:00 < RLa> you are the js horse?
05:00 < dnz-> no
05:00 < RLa> oh
05:00 < dnz-> i dont live my life around js
05:00 < dnz-> its just another lang i can write.
05:00 < RLa> so just a horse?
05:01 < dnz-> a programming horse
05:01 < dnz-> a hacking horse
05:01 < dnz-> a rocking horse
05:01 < RLa> but you are the one who writes into twitter etc. as js horse?
05:01 < dnz-> a unix horse
05:01 < dnz-> RLa: no nigger, i am not
05:01 < RLa> or that's some other horse
05:01 -!- dnz- was kicked from #Node.js by Nexxy [dnz-]
05:01 < RLa> damn
05:01 < dnz-> pffttt
05:01 < RLa> always wanted to know who he was
05:01 < dnz-> Nexxy: y u mad bro
05:02 < dawra> easy to do routing, getting post data, etc. without express?
05:03 < substack> dawra: so many router modules
05:04 < substack> but I just use `if (req.method === '...' && req.url = '...') {}`
05:04 < substack> since I don't usually have many routes
05:04 < dawra> substack: would it be sane to write my web app without any framework like express ? i am just a little afraid but if its fine i'll just do it.
05:05 < substack> dawra: do it
05:05 < dawra> ok great
05:05 < substack> just organize your code well and it's fine
05:06 < RLa> i think that parsing form submissins etc is not that easy
05:06 < RLa> i would use small npm modules which do these bits
05:07 < RLa> then you can cover your app with unit tests and then you can start swapping out these bits for your own code if you are heavy on nih syndrome
05:10 < dawra> lol
05:15 < asadpakistani1> i installed mongodb with 10gen repository...it comes with spider monkey...does anyone know when the monkey will evolve in to v8 natively?
05:21 < deoxxa> asadpakistani1: if you want to build mongo yourself (takes about an hour for me) you can use v8 already
05:21 < deoxxa> asadpakistani1: not sure how stable it is
05:22 < deoxxa> like, mongo takes an excruciatingly long time to build
05:23 < dnz-> deoxxa: compiling things on production boxes on the 24/7
05:24 < misterhat> why would you want to use V8 for mongo
05:24 < misterhat> don't you only use javascript to interact with it manually/scripts?
05:25 < misterhat> spidermonkey isn't THAT slow for doing that lol
05:25 < deoxxa> dnz-: hey it's cool if you don't want your presents from .eu
05:25 < dnz-> :< :< :< :<
05:25 < dnz-> blaqmale like craigslist son
05:29 < mscdex> isaacs: ping
05:31 < asadpakistani1> is there a latest stable ubuntu repository for node...with upstart pre setup
05:31 < asadpakistani1> ?
05:31 < mscdex> why would there be an "upstart pre setup"? that's something that depends on your own application
05:57 < dileep> hello i am not able o found how o connect ma mongodb to server ip
05:57 < dileep> error couldnot connect to server 127.0.0.1:27017
05:58 < gildean> if it's on localhost and default port, you only need to give a db-name
05:58 < gildean> and the db doesn't have to exist prior to that
06:37 < wo0kie> hey everyone
06:38 < wo0kie> I'm new to nodejs, but wondering if using something like Restify for Nodejs would be better than building a service using JAXRS / Glassfish?
06:38 < wo0kie> for a web interface
06:38 <@konobi> wo0kie: restify++
06:39 <@konobi> i may be a little biased, but i always found it great and the tooling is really nice
06:39 < wo0kie> I see :P
06:39 < wo0kie> I really don't want to write a huge service in Java (much too verbose)
06:39 < wo0kie> and the concept of asynchronous IO sounds neat
06:40 <@konobi> wo0kie: go for it... i've done lots of stuff with restify at scale... works really nicely
06:40 < wo0kie> cheers :D
06:41 < wo0kie> I might give it a try before jumping into JAXRS / Jersey world
06:41 < wo0kie> first time here: is it ok to idle?
06:41 <@konobi> sure
06:41 < wo0kie> awesome
06:41 < wo0kie> off to bed, but I might be back with questions later ;)
06:41 < wo0kie> thanks konobi :)
06:41 < rmill> When is it ok NOT to idle on IRC?
06:41 < wo0kie> I've seen a few that nerdrage for some reason
06:42 < rmill> `Hey you, say something or GTFO!`
06:43 < wo0kie> lol
06:43 < rmill> ಠ_ಠ
06:44 < wo0kie> another quick question, where can I find crypto libraries for nodejs? I plan to use token authentication for my website
06:44 < wo0kie> http://nodejs.org/docs/v0.3.1/api/crypto.html
06:44 < wo0kie> nvm :D
06:44 <@konobi> wo0kie: builtin
06:44 < wo0kie> indeed :D
06:56 <@konobi> @nexxylove ping!
06:59 < gmg85> are there any nodemailer settings incase you are on a network that has a  proxy server?
07:00 < asadpakistani1> Does nodejs not support 32bit integers...a book MongoDB is saying that all integers will be converted to 64bit floats...i am confused please show some light
07:01 -!- konobi changed the topic of #Node.js to: Node.js - hey java smiths try the java scripts - http://nodejs.org p.s. jerks get kickbanned | this channel may or may not be logged publically... suck it up princess
07:02 <@konobi> asadpakistani1: read a JS book?
07:03 < asadpakistani1> konobi: i have read one...and in v8 there suppose to be SMIs
07:03 < asadpakistani1> konobi: i guess they are saying that beacuse they use the dumb monkey in their shell
07:03 < gildean> konobi: i liked the last topic better
07:05 <@konobi> gildean: sure... but there's sticklers
07:06 < gildean> konobi: i have no idea what sticklers are, but i takey your word on it
07:06 < gildean> take, even
07:12 < bnoordhuis> asadpakistani1: it's because js the language only has one numeric type, which is a 64 bits double
07:12 < bnoordhuis> asadpakistani1: depending on the actual value, v8 may store it as a SMI
07:14 < MI6> joyent/node: Ben Noordhuis master * 1f76a2e : fs: add long stacktrace debugging facility  Enable long stacktraces if NO (+1 more commits) - http://git.io/nEhLyA
07:15 < asadpakistani1> bnoordhuis: lets say v8 is storing it as an SMI and then I store it in my mongodb document...will it be stored and retrieved as an SMI or a double?
07:15 < bnoordhuis> asadpakistani1: probably a double. but that's more of a mongodb question than it is a node.js question
07:16 < asadpakistani1> bnoordhuis: Thanks for your help. So This stuff really isnt for working with Apps that work with money... :(
07:16 < bnoordhuis> asadpakistani1: ah... money and floating point numbers are almost never a good combination
07:17 < asadpakistani1> bnoordhuis: Yes. So what do you suggest I do...for working with money in javascript and Mongo...
07:18 < bnoordhuis> asadpakistani1: i wouldn't, i'd use python instead. failing that, fixed point math
07:20 < gmg85> is there away of configuring node.js to make all its connections to the outside world via a http proxy?
07:21 < gildean> gmg85: other than system-wide setting, i'm not sure
07:21 < gmg85> gildean, am on a network that uses a http proxy..and nodemailer is not working on that network
07:21 < asadpakistani1> bnoordhuis: this is really heart breaking...we have invested quite sometime making this solution in nodejs
07:22 < asadpakistani1> bnoordhuis: is there any module any work around
07:22 < gildean> gmg85: the system settings have the proxy in place?
07:22 < bnoordhuis> asadpakistani1: yes, probably. look around on npm for modules that do fixed point or uint64 math
07:22 < gmg85> yup
07:22 < gmg85> gildean, yup
07:23 < gildean> gmg85: i never had to test that yet, i'll let you know if i come up with an answer
07:23 < gmg85> gildean, cool
07:24 < asadpakistani1> bnoordhuis: appreciate tht
07:24 < bnoordhuis> asadpakistani1: np
07:25 < SomeoneWeird> anyone setup jenkins with jshint etc. for node?
07:26 < asadpakistani1> bnoordhuis: i found some...ill experiment with them...thanks for being so kind...bye
07:27 < gmg85> gildean, i think i might have found a solution
07:27 < gmg85> gildean, http://stackoverflow.com/questions/3862813/how-can-i-use-an-http-proxy-with-node-js-http-client
07:28 < gmg85> gildean, i have not tried it yet
07:29 < gmg85> gildean, spoke too soon :(
07:31 < dshaw_> what's up?
07:59 -!- mode/#node.js [+b *!*@121.31.250.5] by konobi
08:05 -!- konobi changed the topic of #Node.js to:  Node.js - hey java smiths try the java scripts - http://nodejs.org p.s. jerks get kickbanned
08:07 -!- mode/#node.js [+b *!*j@121.31.250.*] by konobi
08:07 -!- adlwalrus was kicked from #Node.js by konobi [buhbye]
08:08 < asadpakistani1> deoxxa: thanks
08:09 < deoxxa> wat
08:09 < asadpakistani1> deoxxa: for the suggestion...they should already switch to v8
08:09 < deoxxa> oh
08:09 < deoxxa> well
08:09 < deoxxa> there's v8 support if you want to build it yourself
08:09 < asadpakistani1> deoxxa: but for the native driver it doesnt really matter what js engine they use right
08:09 < deoxxa> but it's not considered stable yet
08:10 < deoxxa> it doesn't matter what js engine they use, period
08:10 < asadpakistani1> deoxxa: my virtual machine is going crazy with it right now
08:10 < deoxxa> unless you're doing -a lot- of map/reduce stuff
08:10 < asadpakistani1> deoxxa: so double should be fine for doing my money calculations right
08:10 < asadpakistani1> deoxxa: it just seems wasteful for my int computations
08:10 < deoxxa> erm, no
08:10 < deoxxa> don't use floating point numbers for financial calculations
08:11 < deoxxa> if you're in the position to be writing code that deals with finance, and you think using doubles or floats is ok, you've got a whole mess of problems waiting for you and i feel sorry for your customers
08:11 < asadpakistani1> deoxxa: can u ellaborate a bit more...it wun overflow for a while right
08:12 < deoxxa> i won't elaborate, but try a google search for "money" and "floating point"
08:12 < gildean> count everything in cents
08:12 < gildean> no fractions needed then
08:12 < asadpakistani1> deoxxa: ok cool...their are some BigInt modules out there for nodejs...i can try using those..and then use cents
08:13 < asadpakistani1> gildean: can cents work fine in doubles...or still danger zone?
08:13 < deoxxa> dude
08:13 < deoxxa> read some material about writing code for dealing with financial data
08:13 < deoxxa> seriously
08:13 < deoxxa> you're only going to make more and more mistakes if you don't
08:13 < deoxxa> financial stuff is something you literally can't afford to get wrong
08:14 < deoxxa> i'm not saying this to be a jerk, i'm just trying to stress how important it is to understand
08:14 < deoxxa> like, you -will- end up making a mistake that costs a lot of money, if you don't understand what's going on
08:15 < asadpakistani1> deoxxa: i do understand the precision issue
08:15 < asadpakistani1> deoxxa: but i am just tyring to find a way of dealing with this with ints
08:15 < asadpakistani1> deoxxa: ur not being a jerk at all
08:16 < asadpakistani1> deoxxa: what do you say about this : https://npmjs.org/package/bignumber.js
08:16 <@konobi> asadpakistani1: had a loot at the bitint lib or the gmp lib?
08:16 < asadpakistani1> konobi: ill have to store my numbers in strings...but i guess a little memory wun cost as much as the law suits
08:16 <@konobi> um... *look
08:17 < deoxxa> asadpakistani1: that's the right attitude there, haha
08:17 <@konobi> asadpakistani1: well, who's going to sue you in pakistan?
08:17 <@konobi> =0P
08:17 < asadpakistani1> =P
08:21 < asadpakistani1> deoxxa: i think i found exactly what i needed...https://npmjs.org/package/money-math
08:21 < asadpakistani1> deoxxa: mucho love for the showing the light
08:21 < deoxxa> \o/
08:26 < gildean> for some reason i read that modules name as "monkey-math"
08:26 < gildean> don't know why
08:26 < chakrit> Is there a good, working ring buffer implementation on npm? Couldn't find a good one.
08:34 < aandy> don't know about the good part, but there are two: https://github.com/FlorentinZorca/node-ringBuffer https://github.com/kpeng/node-ringbuffer
08:34 < aandy> the former at least being in npm
08:35 < aandy> and ironicly the least serious one. solely created to "try npm" lol
08:37 <@konobi> anyone responsible for irclogger_com in channel?
08:40 < [AD]Turbo> hi there
08:43 < chakrit> aandy, yeah tried it, didn't even work :(
08:44 < chakrit> i thought someone would've already implemented one by now.
08:44 < chakrit> i mean a serious one.. lol
08:44 < NuZZ> whats a ring buffer
08:48 < aandy> seemingly it's a buffer like rrd storage (or any fixed storage). just a constant stack of size X
08:49 < chakrit> NuZZ: it's sort of a buffer/stream hybrid with no end. you can keep putting/removing stuff to/from it without allocating new buffers everytime
08:49 < aandy> "          " -> "hey       " -> "therehey  " -> "loltherehe" ...?
08:49 < NuZZ> interesting. what is a major use case?
08:51 < chakrit> circular buffer is the other name
08:51 < chakrit> i'm using it to collect stream data inside a certain time-window in realtime
08:53 < aandy> chakrit: how would it compare to something like a fixed-sized collection in mongo?
08:53 < aandy> i mean, is the principle the same?
08:55 < chakrit> aandy, about the same i think. not familiar with mongo but the doc said it's similar
08:57 < aandy> okay :)
09:03 < jesusabdullah> Nexxy: http://www.flickr.com/photos/jesusabdullah/8244166530 sweet tree frog in my room, tasha said you'd like that
09:07 <@Nexxy> jesusabdullah, so cute
09:07 < jesusabdullah> Nexxy: yeah the picture doesn't even do justice
09:08 <@Nexxy> jesusabdullah, there is a frog in the bushes outside our window that croaks all the time but I can never find him ;<
09:08 < jesusabdullah> awww
09:08 < jesusabdullah> yeah, here there's so much wildlife you *will* find it in your house
09:08 < jesusabdullah> it's just a matter of what, exactly
09:08 < jesusabdullah> :D
09:08 <@Nexxy> why are you there?
09:09 <@Nexxy> does it have something to do with marak?
09:13 < thealphanerd> Nexxy: I have A new video of the installation for you
09:13 <@Nexxy> thealphanerd, linx!
09:14 < thealphanerd> sooon
09:14 < thealphanerd> :D
09:14 < thealphanerd> just editing out the parts where I open my mouth and sounds like a tool :D
09:14 <@Nexxy> oh yeah I know how that is
09:14 <@Nexxy> (every time I talk)
09:14 < thealphanerd> I'm fine until I need to hear myself
09:14 < thealphanerd> then I realize what a toolbox I sound like
09:14 <@Nexxy> yeah lol same
09:15 < thealphanerd> /r/cringe
09:15 < thealphanerd> hehe
09:15 <@Nexxy> I still haven't watched any of the videos of my talks
09:16 < thealphanerd> that seems reasonable
09:16 < thealphanerd> what kind of topics have you talked about?
09:16 <@Nexxy> just arduino + node hacking
09:18 < thealphanerd> just :p
09:18 < chakrit> PeekStream in case anyone's interested: https://gist.github.com/defdcbd3bc2bddb366ef
09:18 <@Nexxy> there is a list on lanyrd
09:24 < jesusabdullah> Nexxy: what is lanyrd?
09:25 <@Nexxy> jesusabdullah, it's liek a conference directory thing
09:25 < jesusabdullah> coffeescript :(
09:26 < thealphanerd> ohhhh I thought you were talking about some sort of necklace :P
09:26 <@Nexxy> lo no
09:27 <@Nexxy> http://lanyrd.com/profile/nexxylove/sessions/
09:30 < thealphanerd> Nexxy: are you in the bay area this week?
09:32 < wao> hm
09:32 < wao> oh damn
09:32 < jsilver> yay
09:32 < wao> Nexxy: u've been at jsconf?
09:32 < wao> is that u? :D
09:32 < jsilver> GlobalChat2 ServerDropper now fully configured to drop Node servers instead of Ruby GServer (stable in 1.9)
09:32 < jsilver> there is now an option to chat in either JS (Node) or Ruby (GServer) in GlobalChat2
09:33 < jsilver> both impl are 90% the same.. as the Node version is really a port
09:33 < jsilver> works great on the cloud! minimal resource usage. client's cant tell if they are chatting in Ruby or JS
09:33 < jsilver> https://github.com/jsilverMDX/GlobalChat2
09:33 < gildean> jsilver: have you done any benchmarks on which implementation is more performant?
09:34 < jsilver> i'm willing to bet node is, but that's a logical next step
09:34 < jsilver> the test i would like to do is: 1000 clients sending 1000 messages at once or in a loop
09:34 < jsilver> in theory, the ruby mutex should causes a problem where node will just stay lubed up
09:35 < jsilver> just got done writing the node version, it's feature complete with GChat_2_Server.rb
09:35 < jsilver> please excuse my use of coffee
09:35 < jsilver> also not sure the best way to do the benchmark... benchmarks aren't my forte
09:49 <@konobi> moo?
09:49 <@konobi> Nexxy: ping!
09:56 < thealphanerd> Nexxy: https://secure.vimeo.com/54842728/
09:56 < thealphanerd> op delivered
10:00 < litenull_> hi. i have a question. can you use nsmarty with express
10:00 < litenull_> ?
10:11 < tuxum> can I control jut some parts (notifications "elements") of an existing page with nodejs?
11:30 < Darsain> why do people do for (var i = 0, len = arr.length; i < len; i++), instead of for (var i = 0; i < arr.length; i++) ?
11:31 < xat-> derhasi_: so that the array length gets bufferd
11:31 < syskk> tiny optimization
11:32 < NodeX> arr.length is also in-efficient
11:32 < NodeX> every time it iterates it has to check that object, better to cache it
11:32 < syskk> won't matter in 99.999% of cases
11:32 < NodeX> var l=arr.length ... for(... i<l)...
11:32 < xat-> yeah, but the developer feels bette :)
11:32 < xat-> better
11:33 < syskk> roger that
11:33 < NodeX> every single optimisation matters
11:33 < deoxxa> benchmark time
11:33 < syskk> not really, otherwise you'd be writing asm vs javascript
11:33 < deoxxa> put up or shut up, NodeX
11:33 < Doikor> mostly just helps if the array is very big.
11:33 < NodeX> deoxxa ?
11:33 < NodeX> put what up?
11:33 < deoxxa> proof of your claim! :D
11:33 < NodeX> I dont need to prove it
11:33 < deoxxa> oh ok
11:33 < Darsain> I thought .length is updated on array manipulation, but it is actually checking for number of elements on each call?
11:33 < NodeX> I know it's right ;)
11:33 < deoxxa> well that's good
11:34 < NodeX> it's checking the length each time when it only needs to check it once
11:34 < syskk> Darsain: mmm i think so.. you're probably just saving the property lookup algorithm
11:34 < deoxxa> time to benchmark it then and see if you're right
11:34 < NodeX> go ahead ;)
11:34 < syskk> I doubt arr.length takes longer on bigger arrays
11:34 < NodeX> I have better things to do
11:36 < xat-> http://www.erichynds.com/javascript/javascript-loop-performance-caching-the-length-property-of-an-array/
11:36 < Doikor> http://jsperf.com/caching-array-length/119 you seem to get ~25% performance increase with buffered vs unbuffered
11:36 < Doikor> atleast on my machine.
11:37 < NodeX> " Below is little script I put together, but please take it as a grain of salt because JavaScript time is not accurate."
11:37 < NodeX> the length lookup is a CPU cycle, and a cache is a memory get().. get() is faster as it has NO computation it's that simple
11:38 < deoxxa> > the length lookup is a CPU cycle
11:38 < deoxxa> a CPU cycle? one?
11:38 -!- mode/#node.js [+o piscisaureus_] by ChanServ
11:39 < deoxxa> at least before you were vague
11:39 < deoxxa> now you're just plain wrong
11:39 < deoxxa> :<
11:39 < NodeX> ok cool story
11:39 < NodeX> care to err.. how did you put it... put up or shut up?
11:40 < NodeX> another kid makes the ignore list
11:40 < deoxxa> lol
11:40 < deoxxa> unfortunately since you're the one who brought up the point in both cases, the burden of proof is on you
11:40 < deoxxa> so hop to it
11:41 < deoxxa> as soon as i come in here spouting uninformed and unverified garbage, feel free to call me out on it
11:41 -!- NodeX was kicked from #Node.js by Nexxy [NodeX]
11:44 <@Nexxy> lol deoxxa 
11:44 < deoxxa> https://github.com/v8/v8/blob/master/src/objects.cc#L132 << here's the proof by the way that it's more than one cpu cycle, for anyone playing along at home
11:45 <@Nexxy> http://www.youtube.com/watch?v=uQl5aYhkF3E
11:45 <@Nexxy> deoxxa, ^ 
11:45 <@Nexxy> :P
11:45  * deoxxa taps his "jerk" badge
11:46 <@Nexxy> I'll have you know
11:46 <@Nexxy> I'm getting klined for kicking him
11:46 <@Nexxy> apparently
11:46 < deoxxa> oh dear
11:46 < guor_> deoxxa, I'm curious. Please get me up to speed, what is more than one cpu cycle?
11:46 < nodefun> Q: (hi) is there a newbie channel to ask about npm?
11:47 < deoxxa> guor_: a cpu works on the basis that it performs many operations very quickly - a single cycle is the amount of time it takes to perform one operation from start to finish
11:47 <@Nexxy> nodefun, #node.js :)
11:47 < guor_> I mean, what were  you trying to prove, that is supposed to take only one cpu cycle
11:47 < guor_> i know what a cpu cycle is
11:48 < deoxxa> oh
11:48 < deoxxa> now i feel silly
11:48 <@Nexxy> what is, computer?
11:48 < guor_> ;)
11:48 < deoxxa> guor_: basically just that a property access results in more than one operation and that at least two of those operations aren't interleavable
11:48 < nodefun> Nexxy: :-) Great - then ... is there a way to configure package.json to not install (ignore) certain directories/fieles?
11:49 < guor_> yes, but in v8, you got several optimization mechanisms
11:49 < guor_> the first time you do a lookup, it goes through slow runtime code
11:49 <@Nexxy> nodefun, could you give me an example?
11:49 < deoxxa> guor_: the IsJSReceiver check and the Is{Number,String,Boolean} checks will end up being more than exactly one cycle, i can guarantee that
11:49 < guor_> then the result is put into the inline cache
11:50 < guor_> and after a few runs, the optimizing compiler takes over
11:50 < deoxxa> that's true
11:51 < deoxxa> i suppose i'd need to trace the running of a javascript program to completely ascertain how many operations a property lookup is
11:51 < deoxxa> but i'm confident it's more than one
11:51 < guor_> in the ideal case, the code that the optimizing compiler generates does a single map check to see whether the object has the expected type, and just does a field load
11:51 < deoxxa> that there sounds like a lot more than one instruction
11:51 < guor_> but you are correct, a map check consists of two instructions
11:52 < nodefun> Nexxy: yes ... running 'npm test' in some package, it will create file.log. When calling 'npm install' in some dependent package, the logfile gets installed too. I certainly could clean up the directory before ... but often i forget...
11:52 < guor_> or three, depending on how you count. one to load the map, one to compare, and one conditional jump
11:52 < nodefun> Nexxy: an entry like ignore : [ *.log ] would be handy
11:53 < deoxxa> nodefun: there's .npmignore, and if it doesn't exist, npm will use .gitignore
11:53 < deoxxa> nodefun: .npmignore uses the exact same format as .gitignore as well
11:53 < guor_> but given the nature of javascript, there is not much better you can do. after each loop you always have to check whether the object didn't go bazinga on you and is suddenly a, say, undefined
11:54 < nodefun> deoxxa: !k  I'll check that - ty
11:54 < deoxxa> guor_: oh i know, v8 is amazingly fast and i don't doubt that the optimisations are far beyond what i could understand (i've read the v8 source - i actually died and this is my ghost typing), but i just wanted to be pedantic because nodex was getting angry about it
11:55 < guor_> :)
11:55 < Benvie> check this out https://bitbucket.org/pypy/extradoc/src/tip/talk/icooolps2009/bolz-tracing-jit-final.pdf
11:55 < guor_> if you want every single bit of performance, do it in a typed language
11:56 < Benvie> that paper made me understand more in a few pages than I have in a lot more stuff and gave me direction on how I can make my es6 vm performant
12:08 < nodefun> deoxxa: .npmignore works like a charm - ty :-)
12:26 < pyrotechnick> i need a decent ssl cert i have an unlimited budget. discuss.
12:26 < mmalecki> verisign
12:26 < sandfox> I have bridge if your interested :-p
12:27 <@Nexxy> rapidssl
12:27 < dawra> i have a file with 2 methods defined on exports. how do i call 1 from another ?
12:27 <@Nexxy> is pretty good
12:28 < sandfox> alphassl is good for cheap mobile friendly certs
12:29 < aandy> if you have unlimited budget build your own CA dude!
12:29 < guor_> build?
12:29 < guor_> buy one
12:29 < aandy> with bricks 
12:29 < aandy> well, or that
12:29 < guor_> takes less time
12:30 < sandfox> build your own internet
12:30 < guor_> i think the point of internet is that it's nobody's own...
12:30 < aandy> pff, that's communism talk
12:30 < pyrotechnick> i builded my own internets but nobody wanted what i put on it
12:31 < dawra> i have a file with 2 methods defined on exports. how do i call 1 from another ?
12:31  * Nexxy communist
12:31 < pyrotechnick> aandy: hmm
12:31 < pyrotechnick> aandy: people shouldn't suggest i do things of this calibre
12:31 < pyrotechnick> i just might
12:31 < mmalecki> pyrotechnick: do eet
12:31 <@Nexxy> you have way better things to do
12:32 < pyrotechnick> like
12:32 <@Nexxy> ohho ho ho ho
12:32 < mmalecki> also, really curious, how does one become a CA?
12:32 < pyrotechnick> socialism.
12:32 <@Nexxy> mmalecki, mone
12:32 <@Nexxy> money*
12:32 < pyrotechnick> no
12:32 < aandy> becoming a CA is easy, becoming trusted is hard
12:32 < pyrotechnick> socialism.
12:32 < sandfox> money, a lot of it, and lots of security audits
12:32 <@Nexxy> it's all a racket
12:32 < pyrotechnick> socialism.
12:32 < guor_> probably apply at IANA or something
12:32 < dawra> escuse me
12:32 < pyrotechnick> http://en.wikipedia.org/wiki/Crony_capitalism
12:32 < dawra> i have a question
12:33 < aandy> you've come to the right place at the wrong time, what's your question?
12:33 < dawra> i have a file with 2 methods defined on exports. how do i call 1 from another ?
12:34 < aandy> defined how, can you put it on pastebin? exports = { method1: function() {}, method2: function() {} } ?
12:34 < dawra> exports.meth1 = function() {}; exports.meth2 = function() {}
12:34 < dawra> from meth2 i want to call meth1
12:34 < mmalecki> don't do meth
12:34 < dawra> ?
12:35 < mmalecki> just joking around
12:35 < mmalecki> in meth2 you can just call exports.meth1()
12:35 < pyrotechnick> 2 METHS?
12:35 < pyrotechnick> you will die
12:36 < pyrotechnick> my mate did 2 meths one night
12:36 < pyrotechnick> he's still awake after several years
12:36 <@Nexxy> meths, not even two
12:37 < aandy> depends if meth.color = 'blue' obviously
12:38 < pyrotechnick> good meth is #bada55
12:38 < simong> Does writeStream.end() close the underlying file descriptor? ie: do I need to call .destroy ?
12:58 < renan_saddam> What would be the difference between doing EventEmitter.call(this) on object constructor and using util.inherits(MyObject, EventEmitter) ?
12:59 < dawra> i need some help http://pastie.org/5478722 - 'A_js_variable' i need to put a js variable there somehow so that the value of that variable gets printed, do i make sense?
13:00 < dawra> its a jade template
13:00 < aandy> i think it's =data in jade
13:01 < aandy> but that seems to be inline scripting you're showing
13:01 < aandy> a <script> tag
13:02 < dawra> yeh so how do i do it ?
13:03 < aandy> do what? render <script>var data = something_from_your_node_code</script>? your code makes it vague which is which
13:03 < aandy> you're checking if data is set, but you also call the variable data in the client side script
13:03 < dawra> yes i want to do that, something fro my node code
13:04 < dawra> print the value of a variable there so it gets assigned to client side JS
13:05 < Youdaman> dawra: https://github.com/visionmedia/jade/blob/master/examples/browser_simple.html
13:05 < Youdaman> (there are other examples one level up)
13:07 < dawra> great thanks Youdaman 
13:07 < MI6> joyent/libuv: Bert Belder master * 2e4488f : windows: improve / fix uv_interface_addresses  * If GetAdaptersAddresses( (+1 more commits) - http://git.io/8mHGFQ
13:07 < aandy> seemingly: var data = !{A_JS_VARIABLE};
13:07 < Youdaman> dawra: see also http://www.screenr.com/CV0 -- screencast by the author
13:07 < aandy> but that's not the variable you're checking for, just so you know (if (data))
13:08 < aandy> if what you want printed is the (node) value of data, then try: var data = !{data};
13:09 < dawra> ok
13:09 < MI6> joyent/libuv: Bert Belder v0.8 * 527a10f : windows: improve / fix uv_interface_addresses  * If GetAdaptersAddresses( (+1 more commits) - http://git.io/uxQL-w
13:15 < dawra> 1 more question. i am using node-mysql, code is simple, conn.connec() -> conn.query() -> conn.end() but it gives me this error first load onwards 'Error: Cannot enqueue Handshake after invoking quit.'
13:15 < dawra> any idea what could be wrong ?
13:18 < Youdaman> dawra: http://stackoverflow.com/questions/13266013/when-to-close-mysql-connection-using-node-mysql
13:18 < dawra> yeh just read. seems like I have to do createConnection on every request
13:18 < Youdaman> dawra: usually someone has seen the same error as you previously, so it's always a good idea to google it, or specifically search stackoverflow.com :)
13:18 < Youdaman> yeah
13:18 < dawra> that fixes it
13:18 < Youdaman> ^
13:18 < Youdaman> well
13:18 < Youdaman> you should be able to keep it alive no?
13:19 < Youdaman> (mind you i haven't used it before so i could be wrong)
13:19 < dawra> i dont know. from the docs it seems i have to conn.end() after every query
13:19 < dawra> i mean everytime i execute a bunch of queries
13:19 < dawra> although i remember sometime back i worked with mongodb and the connected was kept alive
13:21 < Youdaman> dawra: give me a moment while i test locally :)
13:22 < sandfox> you deco want to try to re-use connections rather than open/close every req, esp if you will have lots of connections
13:23 < Youdaman> dawra: i was able to call connect, then call query several times, then call end
13:24 < Youdaman> i.e. i just copy/pasted the example from https://github.com/felixge/node-mysql#introduction and copy/pasted the connection.query call a few times and it worked
13:24 < Youdaman> no errors
13:25 < dawra> Youdaman: well on every request you must be createConnection'ing right ?
13:26 < Youdaman> dawra: nope, i just have exactly the same code as in the example from the docs, calling createConnection just once. the only difference in my test was i copy/pasted the query a few times, i.e. the code between connect() and end()
13:27 < Youdaman> (and changed the user/password of course)
13:28 < dawra> yes i understand that, by request i mean web request. so i have an express application did a createConnection and used that connection in an app.get() request
13:28 < dawra> on refreshing the page it would give error, so basically had to createConnection on every web request to fix it, based on that SO thread. am i making sense?
13:28 < dawra> i know you can do multiple query calles between connect and end, tried that :)
13:29 < Youdaman> ah ok
13:29 < Youdaman> so where have you placed your createConnection?
13:30 < Youdaman> dawra: http://pastebin.com/ 
13:30 < dawra> right before the connect() call now
13:30 < dawra> one sec
13:30 < Youdaman> dawra: :)
13:32 < dawra> Youdaman: http://pastie.org/private/nrfuhjiruv7dkqwoh7zwng - exports.get gets clled from an app.get() on a web request
13:32 < dawra> called
13:34 < Youdaman> kk looking
13:36 < Youdaman> brb testing
13:42 < Youdaman> dawra: line 8 on the "before" section is an error and shouldn't be there
13:44 < Youdaman> dawra: i tested locally, changing the user/pass and the sql to 'SELECT 1 + 1 AS solution' and both versions worked fine calling them from a third script that simply was: require('./test1.js').get('bar', function(baz) { console.log(baz) });
13:44 < Youdaman> where test1.js was your "before" section (and i had a test2.js for your "after" section)
13:59 < xastey`> anyone familar with http://faye.jcoglan.com/ here.. trying to configure my server (centos 5) to handle my connections
13:59 < xastey> after a while (a couple of days) i get Error: accept EMFILE.. seems like sockets are not being released, the active connections on the site never go above 250.. and ulimit -n is set to 4096 already
13:59 < xastey> here are my kernel config changes http://pastebin.com/S0pMZRzT
14:07 < dawra> Youdaman: hm
14:16 -!- mode/#node.js [+o piscisaureus_] by ChanServ
14:38 -!- mode/#node.js [+o piscisaureus__] by ChanServ
15:19 < Thomas`-> Hey
15:19 < Thomas`-> Can anyone think of a way to start a timer on 2 ends of a socket at exactly the same time?
15:24 < niggler> define 'exactly the same time'
15:24 < bigkevmcd> depending on how accurately you need, start one, send a message, start the second
15:25 < bigkevmcd> or, send a message saying "start timers at 15:22:00"
15:25 < niggler> that assumes "same time" = "same second" bigkevmcd
15:25 < bigkevmcd> and if both clocks are synchronised, then "tada"
15:25 < bigkevmcd> niggler: time taken for a message over a socket would be considerably less than a second, so that's cool
15:26 < niggler> there are algorithms like PTP for submillisecond resolution
15:28 < Thomas`-> thanks for the suggestions guys. im just determining the level of accuracy ill need for my app, hm
15:28 < Doikor> start timers on both end. communicate the time started to the other and adjust it?
15:32 < Thomas`-> Doikor, adjust it how though
15:34 < Thomas`-> is it possible to calculate the time it took the packet to go over the wire if i send a timestamp of when it started and the clock offset
15:34 < Thomas`-> hm
15:36 < bigkevmcd> Thomas`-: send the start time as part of the message?
15:36 < bigkevmcd> Thomas`-: that way you can calculate it
15:37 < Thomas`-> so just Date.now() should be enough to determine it?
15:37 < bigkevmcd> depends on your accuracy requirement, but, essentially yes
15:37 < Thomas`-> ah yeah, of course
15:38 < Thomas`-> yeah, thanks bigkevmcd 
15:38 < bigkevmcd> Thomas`-: be careful of timezones tho' :-)
15:38 < aandy> and leapjerks
15:38 < Thomas`-> but Date.now() should be timezone independant?
15:39 < Thomas`-> oh like daylight savings and shit
15:39 < Thomas`-> hm
15:39 < Thomas`-> yeah it could be bad idea
15:40 < gildean> Date.now() returns the time from epoch in ms
15:41 < gildean> so it's not depending on timezones or anything, you can just parse that on each client to show up as their local time
15:43 < niggler> Thomas`- the key thing to understand about timing is that the same source should be starting and stopping the clock
15:51 < bradleymeck> creationix: labeled break/continue is the way to go a long as you can maintain a sequential order and fall through in a switch nested in a for(;;) loop
15:52 < Thomas`-> niggler, understood, thanks ill do some research and testing
15:53 < bradleymeck> creationix: there is a paper somewhere on emulating goto in js …. http://en.wikipedia.org/wiki/Goto#Emulated_GOTO
15:56  * spion set up urxvt to trigger an urgency hint on system bell and the prompt to contain the bell (\a) and now feels like node.js
15:57 < spion> event-driven, non-blocking.
15:57 < spion> :)
16:07 < bradleymeck> creationix: http://jsperf.com/loop-breaking nm, looks like hydrogen likes the state variable more, dumping opts on label?
16:11 < bradleymeck> wtf why is natural break slower than state variable… http://jsperf.com/loop-breaking
16:11 < dscape> JasonSmith: ping
16:11 < dscape> get on skype
16:30 < creationix> bradleymeck, interesting
16:30 < bradleymeck> creationix: rev 3 gives more telling info
16:30 < creationix> I guess I just need to try a few techniques and jsperf them all
16:30 < creationix> I should make a gist showing the type of code I need to emulate
16:30 < bradleymeck> creationix: basically if you have a switch DO NOT mix it with loop logic
16:30 < creationix> I wish I knew what emscriptem did
16:31 < bradleymeck> keep em separated
16:31 < creationix> yeah, switch is hard to keep fast in v8
16:31 < bradleymeck> the if else tree is at 1/2 the switch, which makes sense from the jump table
16:32 < creationix> the other option is to not generate javascript and just write an interpreter
16:32 < creationix> then I can do real jumps since I control the machine state
16:32 < creationix> but i'm pretty sure generating js and evaling will allow V8 to optimize more
16:33 < bradleymeck_> creationix: well as long as the switch logic is self contained it should be ok, i like to do my state machine and then separate out the states into functions have state = myStateAction(), its pretty easy to generate
16:33 < bradleymeck_> then just pass in the fn.name as the state name, and declare the exit state
16:33 < bradleymeck_> but thats from my ie6 days
16:33 < creationix> oh, so use the state to do the jumps
16:34 < bradleymeck_> creationix: yea
16:34 < creationix> I wish v8 had O(1) semantics for switch
16:34 < creationix> or at least better than O(n)
16:34 < creationix> at best, it's usually the same as chained if..else
16:35 < bradleymeck_> creationix: its slightly faster than if else if optimization hits
16:35 < bradleymeck_> but keeping it in opt is evil
16:35 < bradleymeck_> so push everything into fns to alleviate that
16:35 < creationix> oh yeah, David H. is in the convo now!
16:36 < creationix> yeah, the one thing I've learned about v8 is to not be afraid of functions
16:36 < creationix> they often help the optimizer a lot
16:36 < EyePulp> are their platforms/languages where functions are  a negative?
16:36 < EyePulp> (not being sarcastic, just never thought about it that much)
16:37 < bradleymeck> EyePulp: a lot of bad compilers/optimizers are out there
16:37 < bradleymeck> if it requires dynamic linking, it hurts bad
16:37 < EyePulp> interesting
16:37 < creationix> EyePulp, function calls are super slow in ruby and I think python too
16:38 < EyePulp> creationix: http://wiki.python.org/moin/PythonSpeed/PerformanceTips#Data_Aggregation
16:38 < jrajav> s/function calls/*/
16:38 < EyePulp> TIL
16:39 < creationix> EyePulp, yep
16:40 < EyePulp> jrajav: that's a bit broad.
16:45 < creationix> bradleymeck,  https://gist.github.com/4206005#gistcomment-615362
16:45 < EyePulp> so let's say I'm completely ignorant of how to do formalized testing (I assume that means unit tests, but again, ignorance) of a codebase.  I've got a node project, and am struggling with some debugging, and figure, hey, let's learn to write tests and improve our skills a bit. Any advice on how to learning the process?  
16:46 <@mbalho> EyePulp: keep it simple. use something like node-tap
16:46 < EyePulp> "how to learning"  also, any advice on using the english language properly...
16:47 < jrajav> Ruby is probably fast enough for 98% of tasks you want to perform
16:47 < EyePulp> mbalho: module recommendations are fine, but I'm also interested in the basic theory and how that applies within node (though maybee node itself isn't unique)
16:47 < jrajav> Programmers are horrible about determining when they really need to or should optimize
16:47 < jrajav> However, the fact is that it's about 10-20 times slower on average than other languages
16:49 < jrajav> Not that you can really blame the language or its implementation. It was designed with different goals in mind, and it's hard to optimize
16:49 < bradleymeck_> jrajav: until someone complains its fast enough
16:49 < jrajav> I just said exactly that..?
16:50 < bradleymeck> jrajav: i was affirming / restating?
16:50 < EyePulp> mbalho: node-tap points to here http://testanything.org/wiki/  which is somewhat humorously down... 
16:51 < EyePulp> =)
16:53 <@mbalho> haha awesome
16:53 < jrajav> EyePulp: I recommend mocha
16:53 < jrajav> + chai
16:53 < jrajav> + sinon if you need more advanced mocking/stubbing
16:54 < jrajav> +sinon-chai if you want the two working together sexily
16:54 < jrajav> http://visionmedia.github.com/mocha/
16:55 < jrajav> I actually coded up an improvement to that website a couple of weeks ago. Added a floating TOC on the right
16:55 < jrajav> That pull request is languishing :(
16:55 < kenperkins> +1 for mocha, we use that here as well
16:55 < jrajav> I wish we used Mocha where I work. Freaking OOP jack-offs
16:55 < jrajav> We're transitioning from jsunit to qunit
16:56 < kenperkins> i guess I'm lucky
16:56 < jrajav> I use it for personal projects though
16:57 < EyePulp> I'm all for module recommendations, but I'm also looking for some fundamental lessons on the approach one should use for testing.  I've never written them, and though I can guess on some things, I'm sure there are some strategies and lessons I can benefit from reading up on beforehand.
16:57  * EyePulp is googling for some tutorials
16:57 < kenperkins> well, there's quite a few categories of testing: unit, integration, build verification, suite or end-to-end, etc
16:57 < kenperkins> so first question is answering "what are you trying to test"
16:58 < jrajav> This is a fairly broad and deep topic and closely related to how best to modularize your code
16:58 <@mbalho> EyePulp: writing good async node tests is the same problem as writing good async node code
16:58 < EyePulp> kenperkins: that's a great question
16:58 < EyePulp> kenperkins: I believe the first thing would be needing unit tests to verify behavior of code and avoid regressions
16:58 < xastey`> anyone familar with http://faye.jcoglan.com/ here.. trying to configure my server (centos 5) to handle my connections, or just long-polling/websocket connections?
16:59 <@mbalho> EyePulp: i dont like test suites so i write tests like this https://npmjs.org/tap
16:59 < EyePulp> does that sound right?
16:59 <@mbalho> EyePulp: oops wrong link
16:59 < xastey`> after a while (a couple of days) i get Error: accept EMFILE.. seems like sockets are not being released, the active connections on the site never go above 250.. and ulimit -n is set to 4096 already
16:59 <@mbalho> EyePulp: https://github.com/maxogden/geojson-js-utils/blob/master/test.js
16:59 < jrajav> The short answer is test all your public-facing functionality - that is, test the reason that you made a certain module/unit of your code
16:59 < xastey`> here are my kernel config changes http://pastebin.com/S0pMZRzT
16:59 < jrajav> And ideally each of your modules should only have one main reason for existence
16:59 <@mbalho> EyePulp: if it fails it throw an exception, otherwise nothing happens
16:59 < EyePulp> xastey: I use faye, but I haven't seen that error.
17:00 < xastey`> also I done ls /proc/<pid>/fd | wc -l with two snapshots over 2 hours
17:00 < xastey`> and node has increased its fd count by 1k
17:00 < jrajav> EyePulp: That's basically just making your "suites" at file level instead
17:00 < jrajav> mbalho: ^
17:00 < jrajav> mbalho: Unless you mean you don't want to be able to use a test runner at all...
17:01 <@mbalho> sorry what is the question
17:01 < jrajav> I was responding to you "i dont like test suites
17:01 < jrajav> "
17:02 < EyePulp> xastey: faye has a reasonably active mailing list - you might get some more experienced responses there  - also jcoglan shows up here now and then
17:02 <@mbalho> jrajav: maybe 'i dont like test frameworks' is more accurate
17:02 < xastey> I have already posted there.. just covering all outlets.. thanks though
17:02 < jrajav> mbalho: All they do is solve very simple problems that you'll run into when writing raw assert/throw tests of your own
17:03 < jrajav> "How do I run all of my tests at once"
17:03 < jrajav> "How do I perform common setup"
17:03 < jrajav> That's all that most frameworks do
17:03 < jrajav> What is your objection, specifically?
17:03 < jrajav> Just "bloat?"
17:04 < jrajav> I mean you're going to put together your own makeshift framework eventually as your project grows, with makefiles or scripts or something
17:05 <@mbalho> thats assuming i have a tolerance for big projects
17:05 <@mbalho> and also an ignorance to test frameworks :)
17:05 < jrajav> Here "project grows" == >1 file :P
17:06 <@mbalho> i dont think node modules should be bigger than 1 file most of the time so yea, that is a pretty good rule
17:06 <@mbalho> its handy to have programmatic apis around tests so that you can do things like run your tests in different environments
17:07 < jrajav> Well, what if you're not writing a module, but a complete application?
17:07 <@mbalho> but frameworks that i dislike usually introduce too much sugar and/or complexity
17:07 <@mbalho> i should clarify, im just talking about unit testing
17:08 <@mbalho> integration testing is always messy
17:08 < DaMorpheuS> anyone knows how to retrieve data from my api app build in node
17:08 <@mbalho> DaMorpheuS: npmjs.org/request
17:08 < jrajav> module.exports = { 'this is a test': function () { someFunction().should.return(true); } };
17:08 < jrajav> You cannot convince me that that is sugary or complex.
17:08 < DaMorpheuS> I wnat to retrieve my info in my ember generted client
17:08 < jrajav> That's a real and complete Mocha/Chai test suite.
17:08 <@mbalho> jrajav: yea but thats probably not how you write your test suites
17:08 < jrajav> It is!
17:09 < jrajav> I use the "exports" ui module in mocha that looks precisely like that
17:09 <@mbalho> jrajav: then we're in agreement: keep it simple
17:09 < jrajav> Object properties on the exports object are suite
17:09 < jrajav> Function properties are tests
17:09 < DaMorpheuS> can I use this also in emberjs?
17:10 < jrajav> The properties' keys are the suite or test labels
17:10 < jrajav> That's it
17:10 <@mbalho> DaMorpheuS: this one works in browsers https://github.com/iriscouch/browser-request
17:10 < jrajav> Everything else is delegated to whatever assertion/mocking framework you're running, if anything
17:10 <@mbalho> DaMorpheuS: same api though
17:10 < jrajav> Just throws would work fine too
17:13 < DaMorpheuS> mbalho: can this also handle json for post and get? the examples only returns webpages
17:15 <@mbalho> DaMorpheuS: in the readme for request on npmjs.org theres documentation about the json option
17:36 < kenperkins> is there a way to output all of the files that are loaded when running a file? (i.e. all of the requires)
17:39 < ryanrolds_w> kenperkins, Is this what you're looking for? http://nodejs.org/api/globals.html#globals_require_cache
17:39 < jrajav> kenperkins: http://nodejs.org/api/modules.html#modules_module_children
17:39 < kenperkins> was just looking at require.cache actually
17:40 < ryanrolds_w> It should give you big map of abs path files to what was exported.
17:43 < belak> Hi, I was wondering if there's an easy way to distribute a node.js program in binary form or even just a simple way of distributing the interpreter
17:44 < mmalecki> belak: there are binaries for node
17:44 < mmalecki> os x packages and linux binaries
17:45 < mmalecki> also node.exe, if you're into it
17:46 < belak> mmalecki: what do those depend on
17:46 < pifantastic> mmalecki: I think he means a node app, not node itself
17:46 < ryanrolds_w> Sounds like he wants to bundle his app and node together for distribution.
17:46 < belak> Yeah, that's what I'm aiming for
17:46 < belak> If it's legal
17:46 < mmalecki> belak: no deps
17:47 < belak> So, the node binary has v8 in it?
17:47 < mmalecki> yes
17:47 < belak> Ah, ok
18:01 < gavri> I'm using express.static and am including its app.use() above the other routes. the images do get served, but the routes matching '*' included below this express.static() call are also executed. is this how it's supposed to work?
18:07 < gavri> weirdly, it's only happening after I added the following right about the express.static() calls
18:07 < gavri> app.get('/root/errors', errorsController.show);
18:07 -!- isaacs changed the topic of #Node.js to: Node.js - http://nodejs.org - http://logs.libuv.org/node.js/latest - jerks get kickbanned
18:08 -!- isaacs changed the topic of #Node.js to: Node.js - http://nodejs.org - This channel is logged http://logs.libuv.org/node.js/ (and other places) - jerks get kickbanned
18:10 <@isaacs> mscdex: pong.
18:14 <@isaacs> Nexxy mbalho bnoordhuis piscisaureus konobi ryah: If you change the /topic, please keep the log url there.  Freenode TOS requirement.  Thanks.
18:16 < EyePulp> freenode requires channel logs?
18:16 < AAA_awright> isaacs: http://freenode.net/policy.shtml is exaustive, the channel log in /topic is merely a suggestion
18:17 < AAA_awright> Also "jerks get kickbanned" goes without saying
18:17 < niggler> hmm then why weren't you banned AAA_awright :/
18:17 < AAA_awright> hm?
18:17 < niggler> :P
18:23 < mscdex> isaacs: oh hey, i was just going to ask about the download stats on npmjs.org. are they gone for good?
18:23 <@isaacs> mscdex: they're back
18:23 <@isaacs> mscdex: my logbot uploader had a bug
18:23 <@isaacs> put a bad bit of data in there, broke all the views.
18:24 < mscdex> oh ok
18:24 < mscdex> :-)
18:25 <@isaacs> AAA_awright: yes, it *should* go without saying.  but sadly, does not :)
18:27 < Aetas> Good uhh...morning.....can we still pretend its morning?
18:27 < niggler> how are downloads counted isaacs?
18:27 < Aetas> I was hoping someone would help me look at a "make test" crash
18:30 < Aetas> Would someone mind looking at a make test trace for me if I pastebin it?
18:31 < gkatsev> Aetas: there's a thing called `UGT'. So, morning when you come in, night when you leave. Regardless of where you, or anyone in the channel is located. UGT = Universal Greeting Time.
18:31 < Aetas> gkatsev: wonderful :)
18:31 <@isaacs> AAA_awright: Yes, it's not ToS, but it's a guideline, and i'd rather just comply rather than teach the whole world that everything on the internet is public.
18:32 <@isaacs> AAA_awright: Duty Calls, and all that.
18:34 < Aetas> Do you all have a preferable pastebin clone you like to use?  Some channels require certain ones
18:34 < aandy> for personal use? you can set up hastebin
18:34 < gkatsev> Aetas: gist, jsbin, jsfiddle, others
18:35 -!- mode/#Node.js [-b adlwalrus!*@*] by isaacs
18:37 -!- mode/#Node.js [-b adlwalrus!*@*] by isaacs
18:37 < tnorris> isaacs: do you know if it would it be possible to overwrite the SetFatalErrorHandler in an addon?
18:37 -!- mode/#Node.js [-b purple!*@*] by isaacs
18:38 <@isaacs> tnorris: not sure.
18:38 -!- mode/#Node.js [-b adlwalrus!*@*] by isaacs
18:39 <@isaacs> niggler: Downloads = 200 response codes to requests for tgz files within a given UTC day.
18:39 < Aetas> If someone could look at this make test trace I would be grateful:  https://gist.github.com/4207272
18:39 < niggler> isaacs is the npm check for readme.md case sensitive
18:39 <@isaacs> niggler: in the most recent version of npm, no
18:39 < tnorris> isaacs: in regards to #4330, I'd like to add calls like process.heapdump() when OnFatalError occurs. hm, I'll give it a go.
18:40 < Aetas> I searched around google to know that it is subjected to timeouts however there are no other active processes on this system taking up processor time or memory
18:40 < Aetas> and was unable to find any solution otherwise
18:40 < Aetas> I also played with ulimit -n and ulimit -m which made no difference
18:42 < niggler> isaacs the most recent version of connect gives no issue but getting version 1.9.2 complains because README.md is not found.  Looking at the tag, i see Readme.md
18:42 -!- mode/#Node.js [-b *!*j@121.31.250.*] by isaacs
18:45 < Aetas> Well, if anyone wouldnt mind taking a look, I would appreciate it.  Ill stick around for awhile and post again later if need be.  I'd like to get this working.
18:48 < exit2> Has anyone here used Locomotive?
18:49 < kenperkins> So, can anyone imagine a situation where tcp connections to server a would compromise node's connection pooling over http to server b?
18:50 < rump> are js function declarations nestable?
18:50 < kenperkins> basically, I'm seeing hundreds/thousands of connections, when doing that in an isolated test
18:54 <@isaacs> this is a great quick read: http://www.slideshare.net/dberkholz/assholes-are-killing-your-project
18:54 <@isaacs> rump: you mean, can you declare a function inside another function?
18:54 <@isaacs> rump: (if so, YES!)
18:54 <@isaacs> >> 'you here purr?'
18:54 < purr> isaacs: (string) 'you here purr?'
18:54 < Aetas> If someone could look at this make test trace I would be grateful:  https://gist.github.com/4207272   thank you in advance
18:55 <@isaacs> >> function foo () { return bar; function bar() { return 10; } }; foo()
18:55 < purr> isaacs: (function) bar
18:55 <@isaacs> >> function foo () { return bar; function bar() { return 10; } }; foo()()
18:55 < purr> isaacs: (number) 10
18:55 <@isaacs> rump: ^
18:55 <@isaacs> Aetas: the debugger tests are known-flaky
18:56 <@isaacs> Aetas: and they can cause other tests to fail.
18:56 <@isaacs> Aetas: `killall node` and try again
18:56 <@isaacs> Aetas: no one is probably too concerned, because most of us have already seen that, and it's a known flaky test.
18:57 <@isaacs> Aetas: i'm not super happy with the flakiness, but hasn't been high priority to fix it.  patches welcome.
18:57 < Aetas> ah
18:57 <@isaacs> Aetas: if you run the tests manually, does that work?  ./node test/simple/test-child-process-fork2.js
18:57 <@isaacs> Aetas: etc.
18:57 < rump> isaacs: is it an anti pattern?
18:57 <@isaacs> rump: no, it's normal.
18:58 < Aetas> isaacs: I haven't tried that actually but I can do that now
18:58 <@isaacs> rump: functions are just objects.
18:58 < rump> ty
18:59 < Aetas> isaacs: it gives an assertion at the bottom of that test but all the parents and clients connect fine
19:00 < Aetas> isaacs: the assertion comes from event.js
19:00 <@isaacs> Aetas: post an issue, then.  i don't have time to debug that right now.  thanks.
19:00 <@isaacs> Aetas: include the version of node, os, etc.
19:00 < Aetas> isaacs: so these tests are meant to be free-standing and can run individually?
19:02 < Aetas> isaacs: the line that causes the assert in that test is:  assert.ok(messageCount > 1);
19:02 <@isaacs> Aetas: yes, they are meant to be possible to run individually.
19:02 <@isaacs> Aetas: but you may need to `rm -rf test/tmp/*` first.
19:02 <@isaacs> Aetas: if you get a bunch of EADDRINUSE from all the socket tests.
19:03 < Aetas> isaacs: ah, ok, thanks for all the info
19:03 <@isaacs> np
19:06 < Aetas> isaacs: the bug I think is that you send 1 message from a parent to a child which is received and then assert messageCount > 1 but 1 message isn't greater than one, correct?
19:06 <@isaacs> Aetas: post an issue.  no time to dig into that right now.  sorry.
19:07 <@isaacs> Aetas: there are hundreds fo tests.  i don't typically keep them allin my head at once :)
19:07 < Aetas> isaacs: just trying to find issues where I can to keep the work load down :)
19:07 <@isaacs> Aetas: i appreciate that.
19:07 <@isaacs> Aetas: you can maybe bug bnoordhuis if you see him online.
19:08 <@isaacs> he's a good guide if you're interested in making tests pass.
19:08 <@isaacs> Aetas: of course, if you post an issue, he'll probably be the one to respond anyway :)
19:09 < Fike_> In the vm module, how to I prevent infinite loops?
19:09 < Aetas> isaacs: yeah, thats the bug....I don't work with open-source often but this would be a simple 1 character fix.  Can I submit a patch in with it?
19:09 < mscdex> Fike_: you can't
19:09 < Fike_> damn.
19:09 < Fike_> :P
19:09 <@isaacs> Fike_: Don't write code that has infinite loops in it :)
19:09 < mscdex> Fike_: spawn a process and use a timer
19:09 <@isaacs> Fike_: or run it in a child_process, nad kill the child
19:09 < mscdex> :-)
19:09 <@isaacs> Fike_: what mscdex said :)
19:09 < Fike_> waaaait up.
19:10 < Fike_> I'm sandboxing code for my IRC bot
19:10 < Fike_> (testing)
19:10 <@isaacs> Aetas: sure.  pull reqs are appreciated :)
19:10 < Fike_> I have a sandbox for each user
19:10 < Fike_> and it uses vm
19:10 < Fike_> unfortunately if you do !exec while(true);
19:10 < Fike_> it chokes
19:10 < Fike_> and dies.
19:10 < Aetas> isaacs: Alright, I'll take care of it
19:10 < Fike_> thing is I need to keep variables and such
19:11 <@isaacs> Fike_: communicate withthe child proc using IPC
19:11 <@isaacs> Fike_: you can send it messages and whatnot
19:11 < Fike_> mmm
19:11 < niggler> isaacs turns out that the git tag for connect 1.9.2 doesnt actually match the npm contents
19:11 <@isaacs> Fike_: then you can also run it as an unprivileged user, so i can't do fs.readFileSync('/etc/shadow')
19:12 <@isaacs> niggler: bug tjholowaychuk
19:12 < Fike_> well isaacs I don't want people accessing node.js functions
19:12 < Fike_> like
19:12 < Fike_> require()
19:12 < Fike_> etc.
19:12 <@isaacs> Fike_: right :)
19:12 <@isaacs> Fike_: don't expose process then
19:12 <@isaacs> process.binding('fs')...
19:12 < niggler> oh isaacs was saying that it wasnt an npm issue :)
19:12 < Fike_> hmmm
19:14 < bradleymeck> creationix: does v8 optimize while true like for(;;) ?
19:15 < creationix> bradleymeck, no idea
19:15 < creationix> I would hope so
19:16 < warz> hm, im sort of liking what i see with couchdb. does anybody in here use couchdb, and have had good times with it? im just thinking mongodb is not all that great, beyond simple crud use.
19:16 < matbee> I prefer mongo over couchdb now
19:17 < creationix> I think we actually use redis for data storage at c9
19:17 < warz> you went from couch to mongo?
19:17 < matbee> not to say couch isn't any good
19:17 < warz> im just tired of querying with mongo. it sucks, imo. id rather just use something like views the whole time.
19:17 < bradleymeck> warz: i use it almost exclusively due to _changes feeds
19:17 < aandy> warz: it REALLY depends on your use case
19:18 < warz> with mongo, its like embedding documents is the preferred method, but they dont have good querying on embedded documents.
19:18 < bradleymeck> can do pubsub with redis, but dont like to reparse when i can query on a beefy db server
19:18 < aandy> for instance, i use elasticsearch for partial searches, cassandra for the actual data storage, redis for the session handlings
19:18 < creationix> so redis with AOF and fsync on *every* query is pretty darn safe right?
19:18 < aandy> in a general poll i'd pick mongo over couchdb if those were my only two options though
19:19 < othiym23> couchdb is a great database but it's hella quirky
19:19 < othiym23> mongodb is a mirrorforest of edge cases and half-combined abstractions
19:19 < mscdex> sql4lyfe
19:19 < bradleymeck> sql4strife
19:20 < othiym23> I've had to spend a lot of time contending with low-level issues in the mongodb driver and that's left me pretty poorly disposed towards it in general
19:20 < aandy> i use mongo as my fallback search due to it's query flexibility (and being a sucker for regex), but it's by no means perfect
19:20 < matbee> mongo also has REALLY easy replication
19:20 < othiym23> mongodb is also a total pain in the ass, operationally speaking
19:21 < aandy> mongo is also REALLY easy to lose data in
19:21  * aandy hides
19:22 < matbee> really?
19:22 < chovy> how
19:22 < chovy> i just wrote a post about backing up a mongodb
19:22 < bradleymeck> used to have some issues back in the day where queued writes could be lost
19:22 < warz> i guess my logic was that with mongodb, if im going to have to write client code to do certain queries, like extracting embedded documents based on certain filters, then id rather just subscribe to that methodology 100%, instead of in one-off scenarios.
19:23 < bradleymeck> but that should have been fixed like last year
19:23 < matbee> Ive been hammering the hell otu of my server
19:23 < matbee> it seems good now, to me :)
19:23 < warz> and i think couchdb's views are pretty much what i'm thinking about. but maybe theyre not. ive never used it.
19:23 < othiym23> warz: if you have the discipline for it, CouchDB is a great database
19:23 < othiym23> but it forces you to have a very clear idea of how you're going to be using your data
19:23 < warz> yea, it seems like a mix between cassandra and mongo, sort of. in my mind.
19:24 < warz> have your queries defined up front, basically.
19:24 < othiym23> mongodb is clearly more flexible than just about anything out there, and until you need to really scale huge, it's got a good mixture of read / write performance for most workloads
19:24 < othiym23> warz: exactly
19:24 < yields> is there a public _bytesDispatched ?
19:25 < yields> req.bytesDispatched
19:25 < aandy> warz: right. if ad hoc querying is what you need then the goold ol' tried and tested mysql is not a bad choice
19:25 < yields> OutgoingMessage.prototype._bytesDispatched
19:25 < aandy> sure it's not hyped or nosql, but still a very good db
19:26 < aandy> and it's shipped with all the latest LAMPs!
19:26 < othiym23> or PostgreSQL
19:26 < bradleymeck> as long as your app fits sql your sysadmin will pref it, but not all workloads like sql
19:26 < othiym23> PostgreSQL is still my go-to database for just about everything, until I know what my data requirements are likely to be
19:26 < aandy> i've yet to try out postgres, but i have an application that could benifit from it, so hope to do so soon :)
19:26 < warz> i think ill give couchdb a shot. last time i tried, the site wouldnt load for like a day, so i moved on. haha.
19:26 < aandy> othiym23: exactly
19:26 < warz> we use postgres at work, along with oracle.
19:27 < aandy> is couchdb still only http interfaced?
19:27 < othiym23> Oracle makes a nice RDBMS
19:27 < othiym23> too bad about just about everything else they sell / do / say
19:27 < tnorris> anyone know if there is a simple alternative to `%` (modulus)? It's causing a DEOPT in my code.
19:27 < yields> Guys say i have a buffer that i want to upload, can i track the upload progress ?
19:27 < warz> ive actually enjoyed oracle more than postgres,r really
19:28 < aandy> i'd also like to give rethinkdb a go, but it's query engine seems horribly simplistic for what they're trying to sell in their pitch
19:28 < othiym23> tnorris: unless somehow a subtraction loop is more efficient than modulo, no
19:28 < ggoodman> anyone know a middleware / simple package to detect if a request is coming from a known webcrawler?
19:28 < othiym23> Oracle is a very powerful tool that also costs a billion dollars and is sold by one of the most malign forces in the software industry
19:29 < tnorris> othiym23: well poop. ok. for some reason having a `%` wrapped in a conditional causes a bailout.
19:29 < EyePulp> ggoodman: you can look at the user agent string for most of them
19:29 < othiym23> yields: you'll want to stream it and have a data listener to update a progress meter
19:29 < aandy> ggoodman: no, but there's a list of known crawlers that you could fire into an in-memory db and check against pretty quick
19:29 < aandy> http://www.user-agents.org/
19:30 < aandy> you could also set up your robots.txt, if they're wellbehaved :)
19:30 < othiym23> tnorris: what's the divisor you're seeking the modulo for?
19:31 < yields> othiym23 how do i stream a buffer ? this is exactly my problem don't know how to stream it.
19:31 < othiym23> tnorris: if it's 2 or 3 or a few other special numbers, you can switch to using bitops
19:31 < ggoodman> aandy: the issue is that my app is fully client-side rendered and I would like to render some crawler-specific markup
19:31 < othiym23> yields: https://github.com/substack/stream-handbook
19:31 < yields> thanks!
19:31 < othiym23> np
19:32 < tnorris> othiym23: it based on the number of arguments the user passes. so undetermined.
19:32 < othiym23> tnorris: yr screwed then ;)
19:32 < tnorris> othiym23: heh, ok.
19:32 < aandy> ggoodman: i see.. then you'd look up in that table for types != B, but there are alternatives if you're worried about your ranking
19:32 < aandy> you can submit to google and bing for instance
19:33 < othiym23> tnorris: maybe bug mraleph on Twitter and see if he has any ideas?
19:33 < tnorris> othiym23: will do. there are a few constraints I think can be used, but if they don't work out i'll give him a go.
19:34 < aandy> ggoodman: just make your check list short and generic, or something like if the UA doesn't contain safari/chrome/firefox/IE then count as crawler
19:34 < aandy> the concern being you'll slow every request down for the sake of some stupid bot
19:34 < aandy> but if it's mainly clientrendered and it's only for that frontpage, then it might be a moot point
19:35 < ggoodman> aandy: site is http://plnkr.co
19:37 < EyePulp> aandy: http://www.user-agents.org/ doesn't look like it got updated since 2010
19:38 < EyePulp> aandy: not that it's your fault =P
19:38 < aandy> true, and in the spirit of whitelist > blacklist a opera/safari/chrome/firefox/ie check might be better and faster
19:38 -!- Topic for #node.js: Node.js - http://nodejs.org - This channel is logged http://logs.libuv.org/node.js/ (and other places) - jerks get kickbanned
19:38 -!- Topic set by isaacs [~isaacs@173-203-97-118.static.cloud-ips.com] [Tue Dec  4 18:08:13 2012]
19:39 -!- isaacs changed the topic of #Node.js to: Node.js - http://nodejs.org - The internet is watching you http://logs.nodejs.org/node.js/  - jerks get kickbanned
19:39 -!- isaacs changed the topic of #Node.js to: Node.js - http://nodejs.org - The internet is watching you http://logs.nodejs.org/node.js/ - jerks get kickbanned
19:40 < aandy> ggoodman: and you'd like a crawler to be able to see the render of your snippits? i think you're already accomplishing 90% of what you want from h1.ng-binding
19:40 < bw_> hello
19:40 < ggoodman> i noticed that 3rdEden has a module useragent that keeps up to date with agent strings
19:41 < ggoodman> aandy: I've tried the view page as googlebot and noticed that none of the ajax-fetched content was being indexed
19:41 < qubit[01]> Can anyone point me to an example of serving up all http and https traffic in express with the same app ?
19:41 < EyePulp> ggoodman: I use that  useragent module on the server side - been happy with it
19:42 < ggoodman> qubit[01]: much easier w/ express@3.x
19:42 < aandy> ggoodman: no, but on your static pages. so if you had a sitemap, or updated with google directly, you could probably solve it without managing two page layouts
19:43 < ggoodman> aandy, that's an interesting point
19:43 < CoverSlide> qubit[01]: http://expressjs.com/api.html#app.listen << look at the second example
19:43 < ggoodman> push to google versus waiting for them to pull?
19:43 < EyePulp> ggoodman: not fancy, just using a regex for generic bot detection:  https://gist.github.com/1e62c6a1eb5d5e0f2491
19:43 < CoverSlide> if you haven't upgraded to 3.x you really should
19:44 < aandy> ggoodman: sort of, yes. http://support.google.com/webmasters/bin/answer.py?hl=en&answer=35769
19:44 < qubit[01]> good lord I swear I just updated express
19:44 < qubit[01]> npm needs some sort of monitoring that will alert me when my shiz is out of date :S
19:44 < aandy> bing has one too: http://www.bing.com/toolbox/webmaster
19:45 < ggoodman> CoverSlide: cool. Favorited
19:46 < aandy> CoverSlide: that is if the crawler executes the javascript though?
19:47 < aandy> you could do something similar server side like i outlined above in the cases where it doesn't
19:47 < othiym23> qubit[01]: get in the habit of running npm outdated or put it in a cron job somewhere ;)
19:47 < qubit[01]> oh cool I didnt know of that function
19:47 < qubit[01]> yeah cron job I think
19:47 < CoverSlide> aandy: I think you meant EyePulp, but it looks like it's portable. it takes a string value, so you can use it with navigator.userAgent or req.headers['user-agent']
19:48 < EyePulp> aandy: my code is serverside, so node would run it against each hit. 
19:49 < EyePulp> and CoverSlide is correct - you just pass in a user agent string
19:49 < aandy> argh brainsleep on so many levels
19:50 < EyePulp> it's nothing exhaustive by any stretch.  We use it for some simple mixpanel properties to track 
19:55 < qubit[01]> anyone know off hand where express.session.Store went ?
19:56 < samholmes> Anyone here know where I could get a cheap wildcard ssl cert for multiple subdomains on one domain?
19:56 < EyePulp> I think we use thawte
19:57 < EyePulp> but not sure where "cheap" is
20:05 < qubit[01]> ive rewritten this connect mongolian store 3 times now, is express ever going to stop making code breaking refactors :(
20:05 < bradleymeck> qubit[01]: in the far future maybe
20:07 < EyePulp> qubit[01]: you almost need an abstraction layer for it.
20:07 < EyePulp> =)
20:12 < tnorris> whoa, not sure what happened. but accidently dumped a massive output through console.log from repl in tmux and it caused my computer to hang.
20:12 < aandy> :)
20:14 < aandy> pro tip: the matrix DIY, fs.readFile('someimage.gif', function(e, data) { console.log(data.toString('base64')); });
20:14 < sampo_v2> hi. I need to stream large files (from AWS S3) and process them during the file is being downloaded. does anyone know of a S3 module which allows async processing between chunks of data?
20:16 < baudehlo> noxmox
20:16 < baudehlo> It gives you a stream, so just use a read/write stream middleman object to do the processing.
20:17 < sampo_v2> as does knox
20:18 < sampo_v2> but while it does give me the data in chunks, i can't do async processing (i need to store data into mongo) in-between chunks.
20:18 < sampo_v2> (still a newbie though, so i may have this wrong)
20:19 < baudehlo> streams have pause/resume methods
20:21 < sampo_v2> baudehlo: i did not know that. that's perfect. thanks!
20:23 < acidjazz> data-id=\"undefined50b96650c8287668a3587b30undefined\"
20:24 < acidjazz> that comes out w/ im using jade doing a.invite-list-item-name(data-id=#{user._id})
20:24 < drudge> shouldn't you just be able to do data-id=user._id
20:25 < acidjazz> that wont be interpreted as text?
20:25 < acidjazz> oo works and fixes it 
20:27 < sampo_v2> baudehlo: btw. is there a reason you said noxmox instead of knox. is noxmox more actively developed or .. ?
20:28 < baudehlo> Not sure...
20:28 < baudehlo> I just use noxmox
20:29 < baudehlo> sampo_v2: I think noxmox is a fork of knox, and thus seemed more actively developed.
20:30 < kenperkins> i have so many packages I need toupdate
20:41 < styol> Ello. Anybody know what the deal is with process.setMaxListeners(0); and whether or not it is a good/bad idea? It almost seems like one might want to increase them for more specific event emitters rather than everything in the process, but I'm not sure. Any info or opinions not easily gleaned from the docs would be great.
20:42 < Aetas> isaacs: I send my pull request in.  Maybe I'll help you guys out with some other stuff in the future.
20:46 < styol> The main reason I ask is because while doing some relatively simple benchmarks with a concurrency level of 10, I've managed to reliably reproduce complete degradation of node's performance after 2 cycles of 1000 requests. Setting the max listeners of the process to unlimited made things magical again, but I'm not sure why and I like to understand magic.
20:48 < tnorris> styol: it would probably help if you posted the benchmarks you speak of.
20:49 < styol> tnorris: a full run-down including code and such or just the results?
20:50 < tnorris> styol: preferably a script that I can run. don't bother w/ the results since I should be able to reproduce.
20:50 < styol> tnorris: ok, let me see what I can do.. may take a few to abstract
20:50 < tnorris> not a problem
20:55 < sampo_v2> baudehlo: have you dealt with gzipped files on S3?
20:56 < zipp> whoa, slow down, irc client. He said "gzipped", not zipp
20:56 < sampo_v2> baudehlo: i'm wondering what it would take to gunzip the stream coming to noxmox / knox
20:57 < sampo_v2> zipp: :)
21:01 < baudehlo> sampo_v2: I have not, but it's the same as any stream.
21:02 < sampo_v2> baudehlo: yeah. seems pretty straight forward. i guess i really need to read up on node streams
21:02 < baudehlo> see http://nodejs.org/api/zlib.html
21:02 < sampo_v2> baudehlo: thanks
21:07 <@isaacs> Aetas: thanks! :D
21:08 < Aetas> isaacs: you too....one of my first git experiences.  I'm more used to subversion but need more experience with git.  Any suggestions on doing things differently than I did?
21:14 < tnorris> Aetas: what was your pull request?
21:14 < Aikar> how does one speciiy what DNS server to use on dns.resolve etc?
21:16 < Aetas> tnorris: https://github.com/joyent/node/pull/4363
21:16 < baudehlo> you don't. It uses your resolv.conf.
21:16 < baudehlo> Aikar: if you need more control, use node-dns: https://github.com/tjfontaine/node-dns
21:17 < tnorris> Aetas: looks fine. don't expect it to be merged as-is. in my experience they'll change the commit message to reflect what part of node is affected (e.g. buffer, net, http, etc).
21:17 < sampo_v2> baudehlo: thanks for the help. the data is streaming like i wanted it to
21:17 < Aikar> baudehlo: hah... i was just looking at harakas code for an answer
21:18 < tnorris> Aetas: but then they'll resolve it by pointing to the commit.
21:18 < Aikar> trying to implement a localhost RDNSBL 
21:18 < styol> tnorris: Well, the abstraction fails in a different way. Part of the potential problems is A) https is in use versus http and B) the actual app is much more complex although only one method was being benchmarked with ab. Still worth a paste?
21:18 < tnorris> styol: sure. never hurts.
21:19 < baudehlo> Aikar: you mean an rbldnsd?
21:19 < tnorris> Aetas: also, check out the `commits` tab to get an idea of how things look.
21:19 < sosnon> what are good js documentation generators for larger projects (basic 'inline' documentation in comments + auto-generation of HTML/PDF/Markdown/... output)? maybe something that even recognizes modules/objects instead of just operating on files and functions? is there a special recommendation for node.js? things like jsDoc Tookit/docco/dox/jsduck all struggle a bit with those requirements
21:19 < Aetas> tnorris: Will do.  There's another test I'm looking at that's blocking "make tests" from running.  You got a sec for me to copy the offending line?
21:20 < tnorris> Aetas: sure, go ahead.
21:20 < styol> tnorris: is PM ok? I'm under NDA yada yada
21:20 < tnorris> styol: sure
21:20 < styol> gracias
21:21 < Aikar> baudehlo: yeah
21:21 < sosnon> styol: you sure that NDA goes along with PM ;)
21:21 < Aikar> that native-dns will work
21:21 < styol> sosnon: probably not but I guess it is best case scenario given the scenario haha :)
21:21 < baudehlo> Aikar: right. For Haraka you'd have to use a cache which can specify where to direct certain queries.
21:22 < Aetas> tnorris: In https://github.com/joyent/node/blob/master/test/simple/test-debugger-client.js   he has a home directory path in here where the bandwidth directory could be anywhere......does that seem right to you?
21:23 < tnorris> Aetas: pro tip: you can add line numbers to highlight specific areas of code (e.g. https://github.com/joyent/node/blob/master/test/simple/test-debugger-client.js#L38-42)
21:24 < sosnon> ok, so? are there recommendations for documentation generator tools in the node community yet? is there a 'standard' one thta will fit most of my needs?
21:24 < Aetas> tnorris: Ah, cool
21:24 < smith_> Could try JSDoc.
21:24 < tnorris> Aetas: so are you talking about https://github.com/joyent/node/blob/master/test/simple/test-debugger-client.js#L65 ?
21:25 < tnorris> sosnon: http://jsdoc.info
21:25 < Aetas> tnorris: right.....if thats trying to execute that bandwidth http benchmark then its never gonna happen and its going to sit and spin until timeout
21:27 < sosnon> are there experiences with node and YUIDoc?
21:27 < Aikar> baudehlo: nah didnt mean to use it in haraka, i thought haraka might have had code specifically for using localhost rbldns so i thought you might would of had my solution :P
21:28 < tnorris> Aetas: hm, yeah. interesting. but for some reason the test doesn't fail. worth looking in to.
21:29 < Aetas> tnorris: it does on my system
21:30 < tnorris> Aetas: what version of node are your running?
21:30 < Aetas> tnorris: trunk
21:31 < Aetas> tnorris: I just started messing with it today
21:31 < tnorris> Aetas: what is the output of `node -v`
21:31 < Aetas> 0.6.8
21:31 < tnorris> Aetas: yeah. so you're testing against `master` branch tests, but running an old version.
21:33 < tnorris> Aetas: what OS are you using?
21:33 < Aetas> tnorris: so you think these tests are fixed in the newer versions of em?
21:33 < Aetas> tnorris:  debian sarge x64, fresh install
21:34 < tnorris> Aetas: do the following and see if it still fails `git checkout v0.6.8; node test/simple/test-debugger-client.js`
21:34 < tnorris> and tell me if it fails.
21:35 < Aetas> tnorris: thats basically the checkout I did maybe an hour or so ago
21:35 < exit2> I'm attempting to setup twitter auth through passport and I'm following an example, when I go to actually login through twitter I get this error http://dpaste.com/841346/
21:35 < asadpakistani1> sarge? what era are we living in jeez
21:36 < tnorris> Aetas: ok, so you say you've already checked out at the v0.6.8 tag before you run the tests?
21:36 < gildean> Aetas: if it's a fresh install, why sarge and not squeeze?
21:36 < Aetas> gildean: sorry I meant squeeze
21:37 < gildean> makes more sense :)
21:37 < Aetas> tnorris: yeah, I did a checkout again and the only files replaced were my patches and a test modification I did to that debug script
21:37 < exit2> never mind, I failed to implement my call back URL via twittter
21:37 < tnorris> Aetas: ok, i'm building v0.6.8 now and will run it against the same version of test to see if I can reproduce the error.
21:39 < tnorris> Aetas: return me the first 7 chars from `git rev-parse HEAD` in your node dir.
21:39 < Aetas> tnorris: it just seems so strange that some guys home directory is listed there instead of a relative benchmarks dir
21:39 < tnorris> Aetas: yes, i'm not disagreeing with that. but I'm saying that the test doesn't fail.
21:39 < Aetas> tnorris: d18ceba
21:40 < gildean> Aetas: also, i didn't get why you were trying to build an old version?
21:40 < felixge> s
21:41 < wltsmrz> ReferenceError: s is not defined
21:41 < Aetas> gildean: didnt want the bleeding edge right now, was trying for a stable release
21:42 <@isaacs> Aetas: the current stable release is 0.8.15
21:42 <@isaacs> Aetas: git checkout v0.8.15
21:42 < gildean> Aetas: 0.8.x should be more stable than 0.6.x
21:42 < gildean> and faster
21:42 <@isaacs> gildean: Aetas: or at least, less broken :)
21:42 < tnorris> though it is funny that ryah's home dir is in a test. =P
21:42 <@isaacs> the latest 0.6 is 0.6.22
21:42 < gildean> isaacs: same thing, almost ;)
21:43 <@isaacs> 0.6.8 is almost certainly atrocious
21:44 < gildean> Aetas: in node.js, like many other oss-projects, the versions with even numbers are the stable, while the uneven are the development
21:45 < chovy> node.js is to javascript what a unicycle is to bicycling. Very awkward at first, you can pierce your scrodum potentially, but once you get the hang of it, it looks pretty cool.
21:45 < Aetas> gildean: this was more about learning than anything...I was following a tutorial as an intro to using the language and setup before I dived in
21:45 < chance> chovy: rofl
21:45 < mads-> I just made my first attempt at a node.js page outputting all the pictures from a given folder. https://gist.github.com/4209064 - however, it gives me some jambled output, as if I made a mistake thinking it would wait for the for-loop. Can anyone tell me how I should do it instead? 
21:45 < gildean> Aetas: yeah, but as isaacs pointed, 0.6.8 might not be the best version to try out
21:46 < chance> chovy: that has to be the best thing I've read all day.. and i've been procrastinating for most of it so that's saying a lot
21:46 < chovy> thanks
21:47 < wltsmrz> Forgot to close your script type, mads-
21:47 < alchimis_> hi guys, I am trying to use socket.io with my app (Expressjs) 
21:47 < wltsmrz> Line 13
21:47 < Aetas> gildean: it would be if it matched the tutorial, I have to find a tutorial to match the version or examples they give end up not working or are outdated and that was the one I found.....or rather the best I found
21:48 < wltsmrz> And you want the images to be within the body I presume, mads-
21:48 < alchimis_> I have a form,  inside routes/index.js after procession what i recieve from form and saving into mongoDB, what i want to do is to push the data to all clients online
21:48 < mads-> wltsmrz, yes please.
21:49 < gildean> Aetas: tutorial for what?
21:49 < mads-> wltsmrz,  I made a little change also. https://gist.github.com/4209064
21:49 < mads-> Now it outputs correct HTML - but is it correctly use of node.js? 
21:49 < wltsmrz> Well, what is the output?
21:50 < gildean> Aetas: just asking if i might have some links to share
21:50 < alchimis_> when i routes/index.js i do like this, socket.emit('newpin',latLong);, 
21:51 < alchimis_> the app crash, ofcourse because inside routes/index.js socket is not defined
21:51 < mads-> wltsmrz, new output is: https://gist.github.com/4209138
21:51 < mads-> So that is the desired output
21:51 < wltsmrz> It's pretty unorthodox, mads-. You know you can build your HTML output and just do a single write?
21:51 < alchimis_> in my app.js  I have this https://gist.github.com/d452192be802078da968
21:51 < mads-> wltsmrz, would that be less unorthodox? 
21:52 < tnorris> isaacs: heh, git is funny. it detected that `_stream_passthrough.js` is a copy of `test-zlib-destroy.js`...
21:52 < Aetas> gildean: node.js in general, the architecture, the language, etc
21:52 <@isaacs> tnorris: lol
21:52 < alchimis_> so any one here wanna help me in this regard, what i want to do is, that after inserting something that i recieve from form then emit something to all browsers
21:53 <@isaacs> tnorris: both files are small, and so the comment dominates them
21:53 <@isaacs> tnorris: and i deleted one and added the other
21:53 < tnorris> isaacs: lol, didn't think about that.
21:53 < gildean> Aetas: ok, well my suggestion is to start by installing the latest stable version: https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
21:53 < wltsmrz> Yeah, mads-. Not that it makes a difference really, but it looks better. Conceptually speaking it's not very wise to readdir for every request but I'm sure you know that.
21:54 < gildean> Aetas: after that i'd try and create a simple app to just do something, after that i'd look at some other simple projects and try to use a few modules
21:54 < mads-> wltsmrz, it crossed my mind. How would I do it instead, conceptually? Put it in a session? 
21:54 < gildean> Aetas: then you're pretty much ready to start writing something a bit more complex
21:55 < Aetas> gildean: I must say, I expected the syntax to be a decent bit closer to plain JS
21:56 < gildean> Aetas: it actually is, the main difference really are the modules
21:56 < wltsmrz> How would you serve some HTML pointing to image links in a directory? Assuming no images are added you could read synchronously once and store the generated HTML or pass the links to some template renderer per-request. 
21:56 < wltsmrz> If images are added in the lifetime of this thingy then you have another problem.
21:57 < alchimis_> so no one here wanna give me a hando
21:57 < Aetas> gildean: I supposed thats true
21:57 < wltsmrz> alchimis, Socket.io?
21:57 < mads-> wltsmrz, thank you for your time. I will take a look at the image serving. But thank you for fixing my stupid mistake :) 
21:58 < wltsmrz> Not stupid at all. Godspeed.
21:59 < alchimis_> waltsmrz: yes
21:59 < alchimis_> did u read my question?
21:59 < gildean> Aetas: for example here's a really simple app i created one evening i was bored, it's a bit lazy in that it uses two servers instead of just one, but as a learning-tool/something to poke at, it might be useful: https://github.com/gildean/ServerInfo
22:00 < wltsmrz> alchimis, you have one fella submit a form... and you want that submission to trigger an event in the browsers of other fellas who are viewing the same page?
22:00 < wltsmrz> I'm not 100% sure that I understand your question.
22:01 < Aetas> gildean: porn search engine?
22:01 < wltsmrz> But it sounds like the kind of thing WebSockets / Socket.IO is used for. Maybe that's worth researching, alchimis.
22:01 < s5fs> Aetas: go on..
22:01 < gildean> Aetas: wat
22:01 < sosnon> i've asked this question before, but who cares: has someone used YUIDoc in larger node projects? what are your expriences? are there caveats? i haven't used it, but, by the looks of it, it is more versatile than JSDoc (@static, @extends, language neutrality, ...) - and it is better mentained than JSDoc; or am i mistaken?
22:03 < alchimis_> wltsmrz: kind of, i mean, I have a form that when submited by a user, in server i process the data and after saving, i want to push to all other users that is on home page, not on the form  page
22:04 < Aetas> gildean: lol you said useful
22:04 < Aetas> sorry for the delays....one of these days firefox will be able to handle 400 tabs
22:05 < gildean> Aetas: the app itself is really not very useful, i meant that the source might give some insight or show a starting point of sorts
22:09 < Aetas> gildean: I don't learn the typical way usually.  Its difficult for me to follow linear teaching which is why I was terrible in school.  I usually just look at something then shoot off in the first direction that interests me the most and continue so reading code and stuff was always easier
22:19 < acidjazz> is there a way in jade to interate through a range of numbers
22:19 < gavri> how are actions in node.js typically logged so that if something goes wrong, the sequence of events is known?
22:20 < gavri> do I just litter the code with logger statements?
22:20 < gildean> acidjazz: you can use a for-loop inside a jade template
22:23 < acidjazz> gildean: not through array/objects .. i mean for i in 1-10
22:23 < acidjazz> or something
22:26 < carlo5> I am making request and displaying them on the http.createServer. The problem is the previous page is still being rendered how do I delete previous page?
22:26 < tnorris> isaacs: for _stream_readable.js, will an error be thrown if a user passes n < 0 to bufferSize?
22:27 <@isaacs> tnorris: yes.
22:27 <@isaacs> tnorris: er, i think it just treats that as if it wasn't passed an argument.
22:27 <@isaacs> tnorris: but it is not "correct", in any event.  "Undefined behavior."
22:28 < mads-> If I want to save some comments about pictures in a JSON format somehow and I don't have access to a database, how would I then do it? 
22:36 < qubit[01]> I cant seem to get this to work with the new express and node 8.15 , http://stackoverflow.com/questions/8605720/how-to-force-ssl-https-in-express-js , am I missing something ?
22:37 < qubit[01]> just need to redirect all http traffic to https
22:37 < gildean> mads-: save json to a file?
22:37 < tjholowaychuk> qubit[01]: http://expressjs.com/api.html#app.listen
22:38 < tjholowaychuk> the second block of code explains
22:38 < CoverSlide> direct all http traffic to https? you mean like a 301 redirect?
22:39 < CoverSlide> you can do that in one middleware
22:39 < CoverSlide> er callback, or something
22:40 < qubit[01]> CoverSlide, so I need two apps, one one httpApp and an httpsApp, the httpApp simply has a listener for everything and fires a redirect ?
22:42 < qubit[01]> wait I think I got it
22:42 < tnorris> isaacs: ok, cool. ah yeah. just found the assert check.
22:44 < CoverSlide> maybe try if(req.remotePort == 80){res.statusCode = 301;res.header['location'] = /* rebuild the URL here */; res.end}
22:44 < CoverSlide> *()
22:49 < timeturner> sanity check: is it better to iterate through an array of sockets and pick specific sockets based on their id or to store the socket's id in mongodb in the client's document and query mongodb for those socket ids?
22:50 < timeturner> sockets in socket.io*
22:50 < misterhat> array
22:50 < CoverSlide> qubit[01]: actually, that would be res.socket.address().port
22:50 < CoverSlide> *req
22:50 < timeturner> misterhat: option 1?
22:50 < misterhat> yeah
22:51 < timeturner> basically I'm querying though
22:51 < misterhat> you could also use an object
22:51 < timeturner> I was under the impression that querying the client's doc in mongodb would be more performant
22:51 < timeturner> since it would have an index
22:51 < qubit[01]> CoverSlide, ahh yeah that works
22:52 < misterhat> you can use an object turbolent
22:52 < misterhat> time*
22:52 < timeturner> I'm using the array iteration method atm though
22:52 < misterhat> timeturner**
22:52 < misterhat> store the sockets in an object
22:52 < misterhat> like a hashmap
22:52 < misterhat> in other langs
22:52 < timeturner> ah
22:52 < timeturner> yeah
22:52 < misterhat> and you could fetch based off id or whatever else
22:52 < misterhat> you choose
22:52 < timeturner> I'll do that then
22:52 < timeturner> I should have done that before lol. thanks!
23:02 < garbagecollectio> what happens in node if you use throw err
23:03 < timeturner> bad stuff
23:03 < tnorris> garbagecollectio: an error is thrown... but more seriously what do you want to know. like if the process quits?
23:03 < timeturner> you shouldn't throw an error outside of try catch
23:04 < garbagecollectio> i mean if i use throw err
23:04 < garbagecollectio> if (err) throw err
23:04 < garbagecollectio> it would just crash the app
23:04 < garbagecollectio> right?
23:04 < tnorris> timeturner: eh, that's for n00bs. I throw one whenever a user is stupid about the arguments the pass.
23:05 < tnorris>  /the/they/
23:05 < mscdex> garbagecollectio: unless you have an event handler for 'uncaughtException' on process
23:06 < garbagecollectio>  ice
23:06 < garbagecollectio> i mean i want the app to crash
23:07 < garbagecollectio> on errors
23:09 < mscdex> then throw without try/catch and without a `process.on('uncaughtException', ....);`
23:12 < garbagecollectio> is that appropriate?
23:13 < tnorris> garbagecollectio: um, for example check out lib/fs.js and search for "throw"
23:16 -!- mode/#node.js [-b *!*@121.31.250.5] by piscisaureus
23:20 < f3d3> I have two RESTfull apps, and I also use redis. I want to do a Makefile for running the tests, first I want to start the redis server, the start the REST apps, and the run the tests. How can I do this? Which is the best way to handle this?
23:20 < CoverSlide> shell script
23:22 < f3d3> when I start the redis, the console stays there and don't continue
23:23  * CoverSlide shrugs
23:23 < f3d3> ?
23:24 < tnorris> f3d3: you're missing a lot of info. like what OS your using, what your using to start/stop your services, etc.
23:24 < garbagecollectio> does node-mysql
23:24 < othiym23>  f3d3 I run Redis as a child process from within Node for my tests
23:25 < othiym23> and then kill it when I'm done
23:25 < garbagecollectio> can a module implement uncaught exception?
23:25 < garbagecollectio> shit
23:25 < f3d3> linux, I start the apps,  with node "app name"
23:25 < othiym23> garbagecollectio: anything can register an uncaughtException handler
23:25 < acidjazz> anyone here dabble in redering jade clientside as well as serverside?
23:25 < f3d3> the problem is if start redis this way: "redis-server &" is not easy to kill it after
23:26 < othiym23> f3d3: right, start the redis app as a child process  using node's child process module
23:26 < xdccMule[3746CL]> Ciao a tutti :P
23:26 < f3d3> and also the rest apps ?
23:26 < othiym23> you can use it with the carrier module to add something that listens to  redis's output and emits an event when Redis is ready for connections
23:27 < garbagecollectio> so can you look if node-mysql does
23:27 < xdccMule[3746CL]> alis list
23:27 < othiym23> f3d3: sure, you could do that, although if the apps are in Node, it'd probably be better to run them directly from the process that's running the Redis process
23:27 < othiym23> but that's up to you
23:27 < othiym23> garbagecollectio: no, but you can ;)
23:27 < garbagecollectio> i am not smart enough to kno
23:28 < othiym23> git clone http://github.com/felixge/node-mysql && cd node-mysql && find . -type f -print | xargs grep uncaughtException
23:29 < f3d3> othiym23: so, I have to add a target to a test, and inside I'll start the redis/apps ?
23:30 < othiym23> f3d3: I dunno! you're going to have to figure out how to set up your test infrastructure yourself -- it's your code
23:30 < othiym23> garbagecollectio: uncaughtException is not used in the node-mysql code base except in tests
23:31 < f3d3> othiym23: thanks
23:31 < garbagecollectio> othiym23: so why on their github do they have examples of using throw err
23:32 < othiym23> because it's the fastest way to get the app to crash for example code without writing special error-handling code
23:33 < garbagecollectio> how do you know its not in there
23:33 < garbagecollectio> uncaught
23:33 < othiym23> not sure I understand what you mean
23:34 < garbagecollectio> well how did you find out so fast it wasnt in there
23:34 < othiym23> garbagecollectio: by searching the source using the command line I pasted ^^^
23:34 < Mikicacarica> http://goo.gl/Co19W
23:35 < garbagecollectio> othiym23: u sure that works?
23:35 < wookiehangover> can someone concisely explain why using globals is a "bad thing" in a node app?
23:35 < othiym23> garbagecollectio: I am 100% sure that works
23:35 < tnorris> what event is emitted when someone connects to a `http.createServer()`? is it 'connection'?
23:35 < othiym23> wookiehangover: it's no worse than it is in any other JavaScript app, i.e. information leakage between modules, making a mockery of code factoring, etc
23:36 < wookiehangover> othiym23: danke
23:36 < wookiehangover> I was actually wondering more from an efficiency/memory management perspective
23:37 < othiym23> well, it's a dangling reference
23:37 < wookiehangover> so there's a real benefit from not using a global for something like a database adapter?
23:37 < othiym23> if you're generating lots of globals you're leaking memory, because the globals can never be GC'd
23:37 < wookiehangover> ok, that clears it up a bit
23:38 < othiym23> wookiehangover: well, lots of things will complain at you if you're running code that leaks globals
23:38 < wookiehangover> just in terms of warnings?
23:39 < othiym23> tnorris: the friendly documentation says 'connection'
23:39 < othiym23> wookiehangover: yeah; there's nothing stopping you from sticking a connection pool or persistent connection handle in a cleverly-labeled global, but you're still better off putting it as a field on a module
23:40 < othiym23> in the interests of sanity if nothing else
23:40 < tnorris> othiym23: ok, just wanted to solidify 'connection' -> "new TCP stream is established"
23:41 < othiym23> tnorris: 'listening' -- socket listener is ready; 'connection' -- TCP stream has been established
23:41 < othiym23> wookiehangover: also, if you do something like that in a DB driver that you release and it becomes popular, I will hunt you down, because that's yet another bizarre strategy I have to figure out how to instrument somehow ;)
23:41 < wookiehangover> othiym23: got it
23:42 < garbagecollectio> yeah why is it a problem to have global variables?
23:42 < garbagecollectio> who cares
23:42 < garbagecollectio> where did this fear come from
23:42 < othiym23> the optimizer and the garbage collector care, among other things
23:43 < othiym23> items leaked into the global namespace have to be cleaned up manually and can defeat the v8 JIT
23:43 < othiym23> also from a software engineering perspective it's jsut a terrible, terrible idea so don't do it
23:43 < tnorris> othiym23: ok, i'm trying to see the number of connections to my app, but the number of events to 'connection' doesn't change.
23:43 < garbagecollectio> can defeat the j8 vit..
23:43 < garbagecollectio> cleaned up manually
23:43 <@piscisaureus> mscdex: but the bottom line is... it is really not possible to allocate 512MB buffers on x86 windows
23:43 < garbagecollectio> you  mean v8 doesnt have access to the stack?
23:43 < othiym23> JS plays pretty fast and loose with data hiding and encapsulation as it is
23:44 < othiym23> garbagecollectio: sure it does, but you're never going to pop out above the top-level interpereter contesxt which is the scope at which the global namespace lives
23:44 <@piscisaureus> mscdex: we might make it a little more reliable my making node large address space aware (easy; patch welcome :-p) but even then you maybe could allocate 4 of them before you run out of memory again
23:44 < othiym23> tnorris: what EE are you listening on?
23:45 < garbagecollectio> so in a node.js app, how are the requires not global variables?
23:45 < tnorris> othiym23: basically `http.createServer().listeners('connection')`
23:45 < wookiehangover> because modules have their own encapsulated scope
23:45 < garbagecollectio> which is not at the top level context, its something else
23:45 < garbagecollectio> ?
23:45 < othiym23> garbagecollectio: every module is compiled by slapping it into a generated function that injects require, exports, module, __dirname, __filename and one or two other things
23:46 < garbagecollectio> ah, i was wondering how __dirname works
23:46 < garbagecollectio> what is the top level interpreter contex
23:46 < othiym23> tnorris: why not http.createServer().on('connection')?
23:46 < garbagecollectio> like
23:47 < garbagecollectio> why are the globals there? at the very top? why in a place where no one can get to?
23:47 < garbagecollectio> like what else is at the top level context?
23:47 < wookiehangover> garbagecollectio: go into a repl and type `global`
23:48 < tnorris> othiym23: I want to track the number of current connections. so you think I should increment .on('connection') and decrement .on('close')?
23:48 < othiym23> garbagecollectio: you'd have to read the standard docs to get into the whys and wherefores of that, especially as it's changed over time
23:48 < othiym23> tnorris: yeah
23:48 < wookiehangover> garbagecollectio: this is a great place to start http://es5.github.com/ :)
23:48 < tnorris> piscisaureus: totally random question, but you know if it's possible to overwrite `V8::SetFatalErrorHandler` from an addon?
23:48 < mscdex> piscisaureus: is it just a matter of passing in "/LARGEADDRESSAWARE" to msbuild ?
23:48 < tnorris> othiym23: cool, I'll give that a try.
23:49 < garbagecollectio> so it lives in the top level interpreter context and can't be cleaned up
23:49 < othiym23> tnorris: there's probably a field on the net.Server class that contains an array of all of the current connections if you want to introspect it directly
23:49 < garbagecollectio> but so what?
23:49 < garbagecollectio> they are globals
23:49 < garbagecollectio> they are supposed to be there
23:49 <@piscisaureus> mscdex: yes. But you need to edit the gyp file for that
23:49 < garbagecollectio> they are supposed to live forever and be accessed by all
23:49 < tnorris> othiym23: ah, duh. ok I'll look there.
23:49 <@piscisaureus> tnorris: well it is possible to *call* that function (if that's what you mean), but you can't hook it
23:50 < mscdex> piscisaureus: so would a patch for this be accepted to default to using that flag for 32-bit node on 64-bit windows?
23:50 < garbagecollectio> therefore global variables arent bad
23:50 <@piscisaureus> mscdex: well it doesn't affect the x64 build in any way, and it's meaningless on 32-bit windows (unless it's booted with the /3GB boot flag)
23:51 <@piscisaureus> mscdex: and yes, i would take a patch for it
23:51 < othiym23> garbagecollectio: go nuts; I believe in encapsulation and keeping my operating environment as simple and straightforward as possible, and so won't be using globals in any of my code
23:51 < wookiehangover> garbagecollectio: ahh, but with great power comes great responsibility
23:51 < garbagecollectio> yeah but so what if its there
23:51 < garbagecollectio> seriously
23:51 < othiym23> which is good, because other people are going to be running my code inside their applications and can be confident that my code's not going to stomp on theirs
23:51 < garbagecollectio> right thats the only thing
23:51 < wookiehangover> or in turn that your code won't be stomped on
23:51 < garbagecollectio> you could have collisions
23:52 < othiym23> it's not the only thing, but I don't have the time to teach you software engineering principles right now
23:52 <@piscisaureus> mscdex: the patch is probably to add something like: 'VCLinkerTool': { 'LargeAddressAware': 1 } to node.gyp
23:52 < tnorris> piscisaureus: ok. what I wanted to do was produce different types of heapdumps/logs when my app crashed (like the example patch in issue 4330), but w/o having to write code into node.cc
23:52 <@piscisaureus> mscdex: the details are for you tog ifgure out :-)
23:53 <@piscisaureus> tnorris: I think you can do that. But it's kinda hacky in the sense that at some point node itself might want to set a fatal error handler, which will sort of break your addon
23:53 < garbagecollectio> so the collisions happen at the interpreter level
23:53 <@piscisaureus> tnorris: but as such, I think it will work.
23:53 < garbagecollectio> in that top level context?
23:53 < garbagecollectio> two variables same name
23:54 < Mikicacarica> come here for free !!! >>> http://x.co/qCxH <<<<
23:54 < tnorris> piscisaureus: yeah. the problem I'm having is that node.cc passes OnFatalError to the fatal error handler. so I didn't know if I could overwrite it after the fact.
23:54 < othiym23> it kind of blows my mind that anyone thinks that hit and run spamming will work on IRC
23:55 < garbagecollectio> ppl r so anal about code
23:56 < othiym23> write a few million lines of it and that will happen
23:58 < tnorris> othiym23: i'll have to use the increment/decrement since the source uses cluster, and net.Server.connections is set to null for all forked children.
23:59 <@piscisaureus> tnorris: well you can overwrite it
23:59 < othiym23> tnorris: I think that method will do what you want anyway
23:59 < othiym23> and should be pretty cheap
--- Log closed Wed Dec 05 00:00:07 2012
