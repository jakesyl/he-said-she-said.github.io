--- Log opened Tue Jun 11 00:00:31 2013
--- Day changed Tue Jun 11 2013
00:00 < AAA_awright> samholmes: Catch SIGINT and close database connections, etc
00:00 < AAA_awright> Also SIGTERM
00:00 < AAA_awright> Especially SIGTERM
00:02 < tim_smart> felixge: Hey are you around? Was just going to ask which mocking library you recommend for unit testing. What are you currently doing for testing in your apps?
00:03 < tim_smart> Anyone who also is keen on the topic of testing ^ Looking to do tests while trying to keep IO minimal
00:09 < jschall_> do file streams have a destroy() function? i see no documentation describing that, but i see a number of websites that say to use it.
00:13 <@isaacbw> don't trust websites
00:14 < jschall_> isaacbw: i assume i can trust github, though. https://github.com/joyent/node/blob/master/lib/fs.js#L1554
00:14 < jschall_> isaacbw: seems to be there and it does check for a file descriptor so that it won't leak them...
00:15 < jschall_> isaacbw: so i'll just use it
00:16 <@isaacbw> it's not a great idea to use undocumented features
00:17 <@isaacbw> especially in javascript
00:17 < jschall_> isaacbw: just because i haven't found documentation doesn't mean there isn't any! :)
00:18 < heath> npm link is what i was wanting earlier, but i certainly just needed to install express with nvm :)
00:18 < jschall_> isaacbw: also, documentation on javascript code?!? what is this mystical unicorn? (mainly referring to the bazillions of undocumented node modules)
00:19 <@isaacbw> the node api is pretty well documented
00:21 < jschall_> isaacbw: totally agree
00:21 < jschall_> isaacbw: wouldn't be fair to claim otherwise, hence the statement in the parens
00:27 < LuckySMack> join #android
00:27 <@xyxne> NO
00:27 < LuckySMack> oops
00:27 <@tjfontaine> you can't tell me what to do
00:27 <@isaacbw> irc2hard
00:27 <@tjfontaine> YOURE NOT MY MOM
00:27 <@xyxne> ^
00:27 < LuckySMack> stupid slash character moved away from my finger
00:27 <@isaacbw> bastard
00:27 < jschall_> YOU'RE NOT MY SUPERVISOR
00:27 < LuckySMack> yea it is
00:28 < jschall_> wait... who is my supervisor?
00:28 < LuckySMack> im my supervisor :)
00:28 < LuckySMack> its a love hate relationship
00:28 <@tjfontaine> how am I not myself?
00:28 < LuckySMack> red bull might help?
00:31 < Havvy> jschall_: AND I THREW IT ON THE GROUND?
00:33 < jesusabdullah> I DONT NEED YOUR HANDOUTS
00:33 < jesusabdullah> I'M AN ADULT
00:39 < rhalff> How come it's more fun randomly talking to 2 people in the pub then it is to randomly talk to 1000 idlers. Hm, I guess Idle as something to do with it..
00:39 < Havvy> rhalff: Well, the JS channel is for support.
00:39 < jschall_> rhalff: yeah, this has to be the most populated dead channel on freenode.
00:39 < Havvy> As are most channels on Freenode.
00:39 < rhalff>  jschall_ :D
00:40 <@isaacbw> I WANT TO BE PART OF THE FUTURE
00:40 <@xyxne> it's not dead
00:40 <@xyxne> it's resting
00:40 < rhalff> jschall_,  your being a ghost of yourself, that's pretty elite.
00:40 < jschall_> pining for the fjords.
00:41 < jschall_> rhalff: i don't know what you mean by ghost and quassel just kind of sucks. i'm not elite at all.
00:45 < rhalff> jschall_, /msg nickserv ghost jschall_ <your_pass> /nick jscall,,  etc.
00:46 < jschall_> hmm
00:53 < sinclair|net> Havvy: done some updates to that ts api
00:54 < Havvy> Kk
00:57 < seldo> What is the best practice for adding comments to package.json?
00:58 < codepython777> does the new uglify not have a prse function?
00:58 < codepython777> my jakefile croaks at the line: var ast = ugp.parse(fs.readFileSync('js/elfinder.full.js').toString()); - parse not found in uglify-js
00:59 < olalonde> seldo: some people use a "_comment" property I guess
01:00 < olalonde> seldo: but you should probably try to put your comment in a README.md file
01:00 <@isaacbw> does anyone here know the name of this color scheme? http://i.imgur.com/9olL8Ds.pnghttp://i.imgur.com/9olL8Ds.pngh
01:01 < seldo> olalonde: I tried "_comment" and "//" but they both make npm barf (in "dependencies")
01:02 < seldo> I wanted to add comments to say why I'm including the modules, i.e. what features need them
01:02 < seldo> Mostly for my own benefit
01:04 <@xyxne> seldo, don't put comments in json
01:04 < seldo> xyxne: evidently it's impossible :-)
01:05 <@xyxne> yeah, without some kind of 'linting'
01:05 < olalonde> seldo: use README.md file instead
01:05 < olalonde> seldo: you can have a Dependencies section
01:05 < jesusabdullah> I'd put "comment": "whatever" outside deps
01:05 < jesusabdullah> if you know they're not gonna Object.keys it, then why not?
01:05 <@xyxne> bad
01:06 < jesusabdullah> Not necessarily, it depends on what your JSON is about.
01:06 < jesusabdullah> It's okay to attach metadata to an object, *if* it will get treated as such.
01:06 < olalonde> yea i guess there is no harm
01:06 < jesusabdullah> I do agree about READMEs though, that's the best place to say your piece.
01:06 <@xyxne> <![CDATA[
01:07 <@xyxne> some comments
01:07 < olalonde> :'(
01:07 <@xyxne> ]]>
01:07 < olalonde> yay my module is on dailyjs today :)
01:10 < jesusabdullah> olalonde: good deal
01:10 < olalonde> i almost named it asyncbdullah in your honor
01:11 < olalonde> but it was too difficult to pronounce
01:38 < jasonkuhrt> when a stream.end()s the stream.on('end') should emit yes?
01:54 < darkPassenger> hey all, 
02:01 -!- mode/#Node.js [+o TooTallNate] by ChanServ
02:54 < ningu> Picard compiling a shared library: make it .so.
02:54 < garbagegod> lmao
02:54 < seldo> ningu: go to your room and think about what you've done.
02:54 < ningu> hehe
02:56 < niggler> lol ningu 
02:56 < samholmes> AAA_awright: What's sigint and sigterm?
02:56 < niggler> SIGINT and SIGTERM are signals samholmes 
02:56 < niggler> i was tempted to say holy shit but it may offend the garbagegod 
02:57 < AAA_awright> samholmes: They're signals to ask the process to shut itself down
02:57 < samholmes> What signals usually are used?
02:57 < AAA_awright> If you're not familiar with them you should really head over to Google...
02:57 < ningu> SIGINT is usually sent by the kernel isn't it? 
02:57 < ningu> samholmes: usually used to do what? but anyway yeah this is very well documented
02:57 < AAA_awright> The other major one is SIGKILL which terminates the program immediately, it's not catchable
02:57 < garbagegod> niggler: how exactly have you inferred that I would be offended
02:57 < samholmes> Do I have to send these signals or does forever do this for me?
02:57 < ningu> also SIGHUP
02:58 < ningu> samholmes: if you just want to restart your app or stop it, forever will do it
02:58 < AAA_awright> SIGHUP is usually emitted when the viewer changes in some fashion, like disconnecting or whatever
02:58 < samholmes> Correct, but wont my existing HTTP requests be canceld?
02:58 < samholmes> canceled*
02:58 < AAA_awright> There's USR1 and USR2 which do nothing by default
02:59 < ningu> samholmes: yeah, look up "zero downtown node app restart" or something like that
02:59 < ningu> downtime*
02:59 < samholmes> If a user is uploading a photo lets say, and I restart my app, wouldn't that become corrupt?
02:59 < ningu> there are a couple solutions
02:59 < samholmes> Okay
02:59 < samholmes> thanks
02:59 < AAA_awright> samholmes: Just close existing listeners, the process should quit by itself once all the connections end
02:59 < ningu> up and fugue iirc
02:59 < niggler> ostensibly the garbagegod emits holy shit
03:00 < AAA_awright> samholmes: But your app should be robust against interruptions anyways... you shouldn't index a half-uploaded photo, for instance
03:00 < ningu> the garbagegod would be at home in the city that never sweeps
03:04 < garbagegod> please raise your hand if you prefer angular over backbone
03:05 < niggler> can i vote that both are garbage?
03:06 < garbagegod> go on
03:06 < Zolmeister> yeah, niggler, which framework do you prefer?
03:06 < Havvy> niggler: I concur.
03:06 < Havvy> Zolmeister: None.
03:07 < niggler> depending on the day Zolmeister i alternate between vanillajs and vaporjs
03:07 < AAA_awright> DOM is a perfectly suitable data model, if not better: It does hypertext!
03:07 < ningu> I think for manageable web apps you need some framework even if it's just your own
03:07 < ningu> I think angular gets a lot of things right but it's a bit unwieldly
03:07 < AAA_awright> (If you remember, hypertext is that thing that's required in order to call your API RESTful)
03:08 < garbagegod> I like the concept of angular, but I prefer the flexibility and DRYness of backbone
03:09 <@mbalho> i like a good dry rubbed short rib
03:09 <@mbalho> wait what are we walking about
03:10 < garbagegod> lol
03:10 < AAA_awright> Various ways of taking one piece of data and making it look like a different kind of piece of data that means exactly the same thing
03:10 < AAA_awright> And then doing it backwards
03:10 < garbagegod> how come I've never heard of vaporjs or vanillajs
03:11 < garbagegod> where can I stay up to date on all of this stuff?
03:11 < AAA_awright> They don't support Node.js unfortunately
03:12 < AAA_awright> Something about Node.js's not shipping with Web APIs standard
03:12 < seldo> http://vaporjs.com/ http://vanilla-js.com/ You people have too much time on your hands.
03:13 < garbagegod> this is great
03:13 < garbagegod> I'm going to recommend this to all my friends
03:13 <@mbalho> i use vapornilla its a wrapper around both
03:14 < garbagegod> okay but seriously
03:15 < Havvy> mbalho: Is the 'porn' in the middle of that name intended?
03:16 <@mbalho> oops!
03:16 < garbagegod> does anyone here get paid to node?
03:16 < garbagegod> IE is anyone here a professional node-er
03:16 <@mbalho> why do you ask?
03:16 < AAA_awright> Not that I can tell
03:18 < garbagegod> I'm trying to get into the node community, because node changed my life as a back end developer and I firmly believe it is possibly the greatest thing to ever happen to the internet since al gore
03:18 < AAA_awright> garbagegod: How so
03:19 < garbagegod> well, the JS everywhere philosophy makes a lot of sense... plenty of programmers will tell you that JS is full of flaws and I don't think anyone tries to dispute that, but google has completely changed what is possible in the JS landscape with V8
03:20 < garbagegod> additionally, merely comparing the event driven nature of JS to something like PHP or ASP just makes 1000% more sense
03:20 < AAA_awright> garbagegod: All V8 really brought was a better API - I've been working with SpiderMonkey for years doing the same sort of stuff
03:20 <@mbalho> garbagegod: you should go to a node meetup and/or conference
03:20 < AAA_awright> My God that was painful
03:20 < AAA_awright> But so cool
03:21 < garbagegod> I'll see if I can convince my company to pay for that, haha
03:21 < garbagegod> I'm actually in the process of using node to make a fairly large web application for use in hospitals
03:23 < garbagegod> Right now, I'm using node + redis for sessions + mongodb for persistent data + express + backbone + socket.io which merely provides a similar api to the REST
03:24 < garbagegod> I am convinced that in several years node will be as prolific as PHP
03:25  * ImBcmDth read '..as psychotic as PHP'
03:25 < ningu> vapornilla goes perfectly with nude.js
03:25 < garbagegod> I hope I'm not coming off as a complete tard here
03:26 <@mbalho> nah what you speak is the truth
03:27 < garbagegod> but the thing is, I don't know anyone else personally that has used it
03:27 < garbagegod> so I'm hoping to hang out here until I do
03:28 <@mbalho> are you in a large city?
03:28 < garbagegod> not quite
03:28 < ningu> garbagegod: personally used what, node?
03:28 < garbagegod> I'm probably one of the most established web developers out of Sweet Home Alabama
03:29 < garbagegod> yes, node, or really any modern JS toy
03:29 < garbagegod> and I instantly regret phrasing it that way, but there's no going back now
03:30 < ningu> garbagegod: you can get a decent window into the community in this channel
03:30 < ningu> garbagegod: also check out nodeup.com
03:30 <@mbalho> this channel is actually only 3 people with various nicknames
03:31 < ckknight> you sure it's up to 3?
03:31 < garbagegod> hah
03:31 < ckknight> pretty sure ningu is actually one of my split personalities
03:31 < garbagegod> hell, the last few times I've been here there have always been more people in #node.js than in #php
03:31 < ckknight> how he got access to a computer I'll never know
03:32 < ningu> garbagegod: my sense is the php community is much more fragmented, but I don't really know. obviously tons of people use it
03:32 < ckknight> garbagegod: I think that's because on average node.js-users are more technically inclined than PHP-users
03:32 < seldo> garbagegod: that's because we PHP types already know everything we need to know about our language ;-) </troll>
03:32 < AAA_awright> ^^^
03:32 < ckknight> I don't understand how PHP users can deal with the extremely schizophrenic standard library
03:32 < garbagegod> I would have to agree there
03:32 < AAA_awright> People overestimate how large Node.js is I think
03:32 < garbagegod> I come from a PHP background
03:32 < AAA_awright> Node.js is a *really tiny* project
03:32 < ckknight> AAA_awright: code-wise or community-wise?
03:32 < AAA_awright> Both
03:33 < AAA_awright> Code especially
03:33 < ckknight> I love that its code is tiny :)
03:33 < garbagegod> But node is so revolutionary
03:33 < ckknight> it's a good bedtime read
03:33 < AAA_awright> garbagegod: Not really?
03:33 < seldo> Understand that when PHP became popular, the best alternative was perl
03:33 < ckknight> seldo: true
03:33 < seldo> And then you will understand how PHP users could put up with basically anything
03:33 < ckknight> but I'd take perl over PHP
03:33 < ckknight> due to standard library differences.
03:33 < AAA_awright> garbagegod: Server-side ECMAScript has been around for a while, all Node.js does is add event loops, which has been around literally since the start of networking
03:34 < garbagegod> Node gives my inner dennis ritchie style purist nerd warm tinglies
03:34 < seldo> The fact that the language automatically parsed HTTP GET query strings was fucking MAGICAL at the time
03:34 < ningu> what is PHP performance like in practice, btw? people say it's really fast but I don't know
03:34 < AAA_awright> seldo: Later learned something of a misnomer, since GET can have an entity-body too, and POST can have a URL query-string too
03:34 < ningu> maybe they mean it's fast compared to perl
03:35 < garbagegod> PHP isn't fast, but it's not slow
03:35 < jesusabdullah> seldo: don't I retweet you sometimes? or am I teh crazy?
03:35 < garbagegod> PHP feels dumb to me now...
03:35 < ningu> PHP was always dumb but it got the job done
03:35 < jesusabdullah> idk php does what it does and that's a reasonable thing
03:35 < jesusabdullah> and PHP engineers are some of the most pragmatic people on earth
03:35 < jesusabdullah> and I value pragmatism
03:36 < seldo> ningu: it is crazy fast, especially when optimized for production, but raw node can be faster
03:36 < garbagegod> PHP engineers are fucking weirdos
03:36 < seldo> (see http://www.techempower.com/benchmarks/ for much useful data and many caveats)
03:36 < seldo> jesusabdullah: maybe?
03:36 < jesusabdullah> yeah probably
03:36 < jesusabdullah> if ur twittererer
03:39 <@isaacs> hey, meatbags
03:39 <@isaacs> anyone got an npm account and more than 1 email address?
03:40 <@isaacs> seldo: welcome to node!
03:40 < seldo> isaacs: thanks :-) They have been spontaneously bashing PHP for like 20 minutes, I can't tell if I'm getting trolled
03:40 <@isaacs> seldo: no, that's not just for you
03:40 <@isaacs> seldo: they do that for me, too
03:41 <@isaacs> but fuckit, php's a one-boxer language if there ever was one.
03:41 <@isaacs> C, Bash, PHP, JavaScript
03:41 < ckknight> one-boxer?
03:41 <@isaacs> you dont' need anything else
03:41  * isaacs needs to finish that blog post..
03:41 <@isaacs> ckknight: a reference to Newcomb's Paradox
03:41 <@isaacs> ckknight: http://en.wikipedia.org/wiki/Newcomb's_paradox
03:41 < ckknight> I'm reading that now :)
03:42 <@isaacs> ckknight: "If you're so smart, how come you're not rich?"
03:42 < ckknight> lol
03:42 <@isaacs> ckknight: ^ the tl;dr version
03:42 <@mbalho> i will have you know that i am not a meatbag
03:42 <@tjfontaine> if I knew what was up, I'd be rich instead of so damn good looking
03:44 <@isaacs> mbalho: "meatbag" is a gender-neutral term of affection for Hu Mons
03:44 < yalamber> Hello, I am a bit confused about nodejs and db connections, I am using node-mysql from felixge. What I am confused is I am creating a single connection from nodejs app. Now when multiple users will be using that web app and they all will be using same connection right? will they have to wait for each other query to complete in order to get results?
03:45 < ningu> yalamber: use a connection pool
03:45 < jcrugzz> isaacs: we can be bags of water as well
03:45 <@isaacs> jcrugzz: *mostly* water.
03:45 <@isaacs> jcrugzz: http://www.youtube.com/watch?v=paH97dYR6Lg
03:46 < jcrugzz> isaacs: yes, thank you
03:47 < ningu> isaacs: it is difficult to make predictions, especially about the future
03:47 < yalamber> ningu: So a simple connection without using connection pool will need users to wait for each other query to complete to get get results?
03:48 < ningu> yalamber: yes, because one db connection can only do one query at a time, even though node itself won't be blocking
03:48 <@isaacs> ningu: it is even more difficult to make predictions about the past.
03:48 < ckknight> isaacs: I have a request: process.prevTick
03:48 < yalamber> and it may not be good idea to create new connection for each request right
03:48 <@isaacs> mbalho: so you wanna try changing your email address on npmjs.org?
03:49 < ningu> yalamber: like I said, use a connection pool. I'm pretty sure node-mysql supports it natively.
03:49 <@tjfontaine> ckknight: process.randomTick
03:49 <@isaacs> ckknight: patch welcome
03:49 < ningu> yalamber: if not, use any-db.
03:49 < ckknight> isaacs: :P
03:50 < yalamber> ningu: Thanks will try connection pool, it will automatically create new connection if one is needed?
03:50 < ningu> yalamber: yes, it will manage the connections for you, you tell it how many minimum and maximum
03:51 <@mbalho> isaacs: sure
03:51 < yalamber> ningu: ok, thank you. but what happens if it crosses maximum limit of connections?
03:51 < ningu> yalamber: then you block again
03:52 <@mbalho> isaacs: i got two emails
03:52 < yalamber> so I should maximum limit to very high number?
03:52 <@mbalho> isaacs: one about Email Change Alrt and another Email Confirmation
03:53 < accc> yalamber: the maximum comes from ur mysql-server
03:53 < ningu> yalamber: I would use a normal number like 10 and test it first, then adjust it as necessary depending on your app's needs
03:53 < ningu> yes, you'll need to adjust the server too if the numbers get to be very high
03:54 < yalamber> accc: So a maximum limit will be same as a php app can connect to mysql server?
03:54 < accc> yes
03:54 <@isaacs> mbalho: awesome
03:54 <@isaacs> mbalho: the change alert should be to the first email address
03:54 <@isaacs> mbalho: and the Email Confirmation should be to th enew one
03:54 <@isaacs> mbalho: if you click the revert link in the alert, it cancels the change
03:54 < paulkon> anyone know of an article which talks about preparing for production release and a checklist, etc.
03:54 < paulkon> just to make sure I'm not missing anything
03:54 <@isaacs> mbalho: if you click the link in the confirmation email, it confirms the change.
03:55 < yalamber> accc & ningu thanks for clearing me on this
03:55 <@isaacs> paulkon: i usually just kinda roll it on out, and trust people to yell at me if it breaks
03:55 < ningu> isaacs: what random thing did you generate for the confirmation? uuid?
03:55 < accc> no problem
03:55 <@isaacs> paulkon: and then i roll stuff back
03:55 <@isaacs> .nin
03:55 < ningu> .nin?
03:55 <@isaacs> ningu: crypto.randomBytes(18).toString('base64')
03:55 < ningu> ah ok
03:55 < ningu> just curious
03:55 <@isaacs> ningu: sorry, fat-fingered the tab-complete :)
03:55 < ningu> I thought maybe .nin was like uuid, my bad :)
03:55 <@isaacs> ningu: i never got the fascination with UUID format
03:56 <@isaacs> hehe
03:56 < ningu> oh, I just like the fact that it's standard and easy and I don't have to think about it
03:56 <@isaacs> i mean, what matters is just that it's random, right?
03:56 < ningu> sure
03:56 <@isaacs> but uuid is only like 8 bytes of randomness.
03:56 < ningu> but things like postgres support it natively which is nice
03:56 <@isaacs> or something like that
03:56 <@isaacs> why not have way more randomness?
03:56 <@mbalho> dude nsa can crack that in like 3 parsecs
03:56 < ningu> primary key by string is not efficient
03:57 < ningu> but uuid is ok
03:57 < ningu> for the primary key use case you just need to avoid collisions, security is not an issue
03:59 < ningu> so on a totally other topic, I've been playing with puppet lately, and it occurred to me that node would make a good platform for hosting a config management engine
03:59 < ningu> but afaik no one has done it in a mature fashion
04:00 < ningu> it takes a while to iron out the details for that sort of thing
04:00 < ningu> but it would be cool
04:11 <@isaacs> ningu: opsmezzo
04:11 <@isaacs> ningu: /join #nodejitsu and start asking that questino
04:12 < ningu> :)
04:12 < ningu> I thought nodejitsu was just for node apps and related services, apparently not
04:17 < ningu> isaacs: cool, looks promising but not ready yet
04:20 <@isaacs> ningu: they're for a lot of stuff
04:20 < marklubi> is anyone here very familiar with net.Server?
04:21 < Stumbler> I have been using it a lot over the past month.  Idunno if I can help, but fire away and I'll see if I cant whip up a decent response, marklubl
04:21 < ningu> marklubi: just ask
04:22 < marklubi> I was in the process of upgrading our servers from 0.6.10 to 0.10.x and it seems to me that there is a memory leak occurring...
04:22 < marklubi> I've put together an example here: https://github.com/marklubi/node-net-memoryleak
04:24 < marklubi> it seems that net.Server is leaking memory with just a connect followed by a disconnect
04:25 < marklubi> I found the issue when I rolled out updates to our staging environment behind a load balancer that checks to make sure that the services are available
04:26 < ningu> marklubi: I suspect it's a streams2 issue
04:26 < ningu> that is, your code failing to handle streams2 properly issue
04:26 < marklubi> can you elaborate?
04:28 < ningu> marklubi: you are not listening to the 'data' event, which may be an issue. try socket.resume(); socket.end();
04:28 < ningu> and see if it still causes a memory leak
04:32 < marklubi> ningu:  excellent, that seems to take care of the issue
04:32 < ningu> cool
04:32 < ningu> marklubi: read up on streams2, it's worth your time
04:33 < ningu> and ultimately not that hard
04:33 < marklubi> how would I go about getting the documentation updated?  the example doesn't include anything about resume() and end() http://nodejs.org/api/net.html#net_server_listen_port_host_backlog_callback
04:34 < ningu> http://nodejs.org/api/stream.html#stream_compatibility
04:34 < ningu> marklubi: I think the docs are a github repo, you can submit a pull request for a documentation cross-link
04:34 < ningu> cross-ref I mean
04:34 < ningu> marklubi: sockets are streams and the issue is covered there
04:35 < marklubi> thanks for the help ningu
04:35 < ningu> sure
04:48 < marklubi> hey ningu, I apologize, I thought I was testing on 0.10.10 but was on an older version.  just tested with the end() and resume() and still have the same issue
04:48 < ningu> marklubi: in that case I'm not sure.
04:48 < ningu> have you tried destroy() instead of end()?
04:50 < marklubi> ningu:  still having the memory leak. GC never cleans it up
04:51 < ningu> marklubi: oh, yeah, there was discussion on the performance nodeup about idle gc being turned off by default for v10
04:51 < ningu> so I guess you need to figure out if it's just slower gc or an actual leak
04:52 < marklubi> what sort of slower GC?  1 minute, 2 minutes, longer?
04:52 < ningu> don't know
04:52 < ningu> it doesn't do gc runs every x seconds anymore, it does so "when needed"
04:53 < mmalecki> few seconds should be considered really slow GC 
04:53 < ningu> mmalecki: ok, fair enough. I was just speaking loosely, I don't know the actual default for v0.8
04:53 < ningu> there is a flag to turn the old mode on but everyone on the podcast said that was a bad idea :)
04:53 < mmalecki> yeah, it's a bad idea
04:54 < mmalecki> it's a good idea to turn idle GC off on v0.8 too :)
04:54 < ningu> marklubi: perhaps you could try turning idle GC off for v0.8 and see if you get comparable results as vanilla v0.10
04:58 < marklubi> looks like turning off idle GC on 0.8 shows the same memory growth as well
04:59 < ningu> marklubi: I don't know enough about performance under typical loads etc. to know what to do next, but I'd think you'd want to monitor the memory usage over a longer time period
05:00 < ningu> I believe you can also set the v8 heap size (although people usually do that to make it bigger :)
05:00 < Zolmeister> or just call gc() yourself
05:00 < marklubi> so, I guess I'm wondering now, what the proper way to handle the issue is.  without idle GC, the load balancer alone will cause the process to eat up all the available RAM
05:00 < marklubi> over time
05:00 < ningu> oh, didn't know you could do that
05:00 < Zolmeister> http://simonmcmanus.wordpress.com/2013/01/03/forcing-garbage-collection-with-node-js-and-v8/
05:01 < ningu> marklubi: the reason idle gc is off is that it generally ends up doing gc at inconvenient times that impact performance, and with it off the gc still happens eventually
05:01 < ningu> marklubi: how much is all available ram?
05:02 < marklubi> in staging and production we're running with 512.  with 0.6, we typically sit at around half that used
05:04 < marklubi> with 1-2 thousand concurrent connections per box
05:28 < OODavo> What's the "nicest" way to get modules in the browser that vaguely resemble the kind you get server-side with Node? browserify's ability to provide a require() looking just like Node's, and its ability to use npm packages, are both great, but the compiled file is kind of a huge mess. RequireJS and related solutions need one's code wrapped up in yet another closure. What other options are there?
05:29 < nightfly> Isn't that what browserify does?
05:29 <@mbalho> OODavo: browserify bundles arent really a huge mess
05:29 <@mbalho> OODavo: its just a require() shim then all the modules
05:30 < OODavo> Maybe they aren't really /that/ big a mess, but they seem really crazy compared to "normal" script files.
05:31 <@mbalho> yea it makes a tradeoff where it enables you to write modular code at the expense of having a simplified view-source experience
05:31 <@mbalho> but it supports source maps so you can still get correct lines in the dev tools
05:34 < OODavo> Hmm. RequireJS also offers the ability for modules in the browser, though, and it doesn't require all the modules to be bundled into one file.
05:34 < ssafejava> OODavo: Not familiar with browserify specifically, but with RequireJS, in development, it should just be ajaxing in your source files, so there's no readability problem there. And r.js (the optimizer - concat + minify) will do source maps
05:35 <@mbalho> OODavo: there are lots of blog posts out there about how browserify is a lot less crazy than require.js, but you should give them both a shot and decide for yourself
05:36 < ningu> I don't find the browserify output to be baffling at all
05:36 < ningu> but it isn't really meant to be read in that form
05:36 < ssafejava> Most of the argument I see regarding requireJS being "crazy" is that you have to define an array of names and a closure to define a module. Big whoop IMO, copy/paste is not that hard... 2 lines of boilerplate. R.js is worth it IMO
05:37 < ssafejava> the quirk I do see often that is somewhat showstopping is when library writers define AMD compatibility inside their modules. that actually breaks code for me depending on how they did it. I usually strip out the AMD code & use requireJS's `shim` config
05:38 < ningu> better to use true Intel than AMD
05:52 < OODavo> Hmm. browserify might be viable. I'm mostly inhibited by the /other/ requirements I'd like, namely that I'd like it to be able to bundle on the fly through Connect middleware /and/ pretty much all my code is going to be CoffeeScript.
05:52 < ningu> OODavo: what's stopping you?
05:52 < ningu> write your own connect middleware thing
05:53 < OODavo> I'm not really sure how one goes about doing that?
05:53 < ssafejava> OODavo: Why bundle on the fly? You could, for example, just use `grunt watch`
05:53 < OODavo> So far I've been relying on connect-assets to handle the CS compilation and serving. Probably this is not the best way.
05:53 < ssafejava> OODavo: Grunt is one of the better parts of JS development, check it out. It can do quite a lot, likely much more than you might think
05:54 < ssafejava> And it's a good way (imo) to keep your client-side code and server-side code a little more separated
05:54 < ningu> OODavo: so learn how, it isn't hard :)
05:54 < OODavo> I had a look at Grunt a while back. I couldn't convince it to run my tests and such properly until I just literally made it run the Mocha command in shell, the way I'd previously had my Cakefile doing it, so I didn't see much improvement. :P
05:55 < ssafejava> Ah. Take another look. Grunt 0.4 was a major improvement, the API was standardized between modules, and any of the grunt-contrib-* modules are quite stable and high-quality
05:55 < ssafejava> I used 0.3 for a while and I agree, it was difficult
06:06 < Stumbler> if I iterate through an object's attributes with a for..in   Should I expect to always read the attributes back in the order that they were assigned?
06:09 < pomke_> Heya everyone, the company I work for has a couple of mid/senior node roles going, based in Melbourne, Australia, it's a combo of backend node/mongo and frontend angular
06:09 < pomke_> http://www.smallworldsocial.com/who-we-are#jobs
06:09 < SomeoneWeird> oh really
06:09 < SomeoneWeird> pomke_, cbd?
06:09 < pomke_> yarly :)
06:09 < pomke_> yep
06:10 < pomke_> right off the bourke st mall
06:10 < pomke_> We're about as CBD as you can get
06:10 < SomeoneWeird> hmm
06:10 < SomeoneWeird> that means i'd have to learn angular
06:10 < SomeoneWeird> which i probably should anyway
06:11 < pomke_> enh, angular is pretty easy :)
06:12 < pomke_> SomeoneWeird: Mind if I PM you?
06:13 < SomeoneWeird> sure
06:22 < nfour> who ever says "no dont pm me"?
06:23 < ssafejava> eh you never know.
06:23 < pomke_> I think it's polite to ask.
06:23 < nfour> actually yeah I can see myself saying no but im an asshole
06:25 < ssafejava> "hey nfour i tryed 2 use nodjes but it dosent werk, can i pm u?"
06:25 < nfour> nofour has left freenode
06:26 < ssafejava> lol
06:26 < nfour> wow i forgot you can /me
06:26 < nfour> im in irc
06:26 < ssafejava> we're not in FB chat anymore, this is a full-featured chat client
06:26 < ssafejava> very 21st century :p
06:26 < nfour> ^ lol
06:27 < nfour> yep :)
06:35 < WallE> close event not working for server ????
06:49 < scathen^C> hey all. I am setting up a rest api, and I want to use a url like this /api/users/<id>/objects <- a post to this address would create an object for user(id). My question is, does this mean I need to pass the <id> to the web page, so that the page can build the correct <a> link?
06:49 < ssafejava> scathen^C: You don't want to do it that way. Do something like /api/users/create, and the response body contains the new ID.
06:50 < ssafejava> Oh I'm sorry, I misread your question, one sec
06:50 < SargoDarya> any chance to get the socket.io buffer?
06:51 < ssafejava> So yeah, if you design it in that fashion, the user will need to know his own ID in order to create an object. You could make it easier by just reading the auth token to get the user's ID and then leaving the <id> out of the URL. Otherwise you'll have to render the page with the id populated, or do it via javascript
06:53 < amagee> Is there a library that does things like fs.readFileSync but that has nicer / cross-platform exceptions? Ie. I'm currently going to do something like:  try { var s = fs.readFileSync("..."); } catch(e) { if (e.code === "ENOENT") ... }, but that's not very pretty.
06:54 < WallE> How to get Response chunked after a TimeOUt
06:55 < WallE> I'' post in pastebin
06:56 < scathen^C> ssafejava: thanks. i have one idea. As it's a single page app, I could call some base api path like /api/ which will return the currently logged in user/app info. Then when the app loads after the user has logged in, it calls this url once, and uses that to setup the client model....sound ok>?
06:56 < ssafejava> scathen^C: Yeah, the way I usually do that is via a route like /api/me, which returns a single User object corresponding to the current user.
06:57 < ssafejava> scathen^C: However I would suggest bootstrapping initial data into the main site template. This prevents a lot of awkward code where you need to make sure that data is actually loaded before proceeding. And it really speeds the page up by removing the extra round trip
06:57 < scathen^C> ssafejava: ok cool. I am using angular, so it kind of fits the service pattern though.
06:58 < ssafejava> scathen^C: The easiest way to do this (imo) is just to set up a route for a .js file, e.g. 'bootstrap.js' where, when called, returns JSON with all the data you would normally request upon loading the app
06:58 < scathen^C> ssafejava: ok thanks.
06:59 < ssafejava> sorry not JSON, obv. just JS. you can attach it to the window object and check for it on app load. helps a lot
07:03 < scathen^C> ssafejava: i'm an idiot. could i simply render the page with ejs or whatever, and just compile the page with the user info?
07:04 < ssafejava> scathen^C: Yeah exactly. E.g. render it with something like `<script> window.bootstrapData = <%= JSON.stringify(data) %>; </script>` and you're good to go
07:04 < WallE> http://pastebin.com/DhegZEDr
07:05 < WallE> It's following Single Thread Model
07:05 < WallE> Saying**
07:05 < WallE> LIKE*
07:07 < jaya> http://pastebin.com/DhegZEDr
07:08 < jaya> Its more sequential
07:08 < jaya> It cant handle concurrency
07:15 < bsnote> Hello, does anyone know where patches for V8 are stored?
08:00 < Guest85551> could anyone help me with this??
08:00 < Guest85551> http://stackoverflow.com/questions/17038921/trying-to-import-gmail-contacts-using-node-js
08:09 < Bela> asd
08:09 < RLa> Guest85551, is that the actual secret key you use?
08:09 < Multiply> Guest85551, even tho I /ignore'd you, because of your spam in query, I really hope it's not your real client ID and secret you posted in the question
08:09 < Multiply> RLa <3
08:10 < Bela> it works
08:10 < RLa> you see his contacts? :D
08:14 < jesusabdullah> RLa: no, are they lulz?
08:14 < jesusabdullah> I can't handle any more stackoverflow today
08:14 < jesusabdullah> just can't
08:24 < ningu> haha I just saw the "using the word framework when talking to substack" gif
08:25 < SomeoneWeird> ha
08:56 < zomg> Anyone wouldn't happen to know a library for generating fake data? Should function in browser too
08:57 < zomg> Seems there's a few on npm but looking for opinions if anyone has any :)
08:59 <@konobi> zomg: fake data bad... use real data
08:59 < ningu> konobi: it can be fun to mock objects, makes you feel superior
09:00 <@konobi> ningu: mocking stuff is not the same as fake data
09:00 < ningu> I was joking
09:00 <@konobi> ningu: look at my npm modules... =0)
09:00 < ningu> ok :)
09:04 < zomg> konobi: we're doing a preview of a receipt so not exactly something we should use someone else's real data for =)
09:11 < SomeoneWeird> zomg, https://github.com/Marak/Faker.js
09:17 < Zeetah> Hi, has anybody had a problem when trying to start node as a daemon service via ssh?
09:18 < Zeetah> Basicly if i start it without & it starts but it only runs till u close the terminal.. is there some workaround for this?
09:20 < ningu> Zeetah: use forever, etc.
09:20 < ningu> there are many modules for it
09:20 < ningu> forever is the most popular
09:22 < Zeetah> yep i know the forever but the sysadmins dont allow it :/ the system is some old rhel which we managed to get the node but we cant get any global modules in there :( 
09:22 < ningu> just install it in your home dir
09:23 < SomeoneWeird> don't use forever
09:23 < SomeoneWeird> use jesus
09:23 < ssafejava> bastard keeps coming back
10:01 < ssafejava> Zeetah: If you want it short & sweet, use nohup. Otherwise upstart / forever / jesus will do it
10:05 <@konobi> zomg: fake data is bad overall
10:05 <@konobi> you can always anonymize real data
10:07 < zomg> konobi: because it's going to be a lot easier to pull real data and anonymize it than plonk a JS lib down and tell it to put random data into a bunch of fields
10:07 < zomg> fields, where it's completely irrelevant whether the data bears any resembalance to actual data
10:07 < zomg> fields, where the only reason I wanted to use something to generate real looking data is so that it would look nicer
10:08 < zomg> I could just put "asdfasdf" into them and it wouldn't really matter
10:08 < RLa> hm, i use Faker to generate random data
10:08 < RLa> works well
10:09 < zomg> RLa: cheers, I'll take a look
10:09 < rafaqueque> hi there guys, what is the cheapest option to run a single nodejs script on a server? basically, it's a service that pings a few websites. i need to have this script on several locations and i'm looking for the best option (i don't even know if this is the best option)
10:10 < px> heroku
10:10 < rafaqueque> ok, thank you very much, i'll take a look at it
10:10 < px> but you will need to ping it 
10:10 < px> otherwise it will turn off
10:11 < ningu> is nodejitsu more expensive?
10:11 < RLa> azure scheduling maybe?
10:11 < rafaqueque> so are you talking about worker dyno, right?
10:11 < px> no the web dyno
10:11 < ningu> rafaqueque: do you want it also to be minimum setup, so no vps?
10:11 < px> but it can run node.js
10:12 < px> if you are still in the free category, ec2 can be the cheapest
10:12 < rafaqueque> yes ningu , only to run a single js script to check/ping several websites
10:12 < RLa> what about appfog?
10:12 < rafaqueque> i don't need too much space
10:12 < rafaqueque> maybe for logging, but i'll clean that up from time to time
10:12 < RLa> appfog has almost no local space, haha
10:15 < ningu> rafaqueque: ok, cause you can get a vps from ramnode for $15/year
10:15 <@konobi> zomg: the problem with fake data is that it has the programmers intentions in it... with real data, you find out what really happens and you get to adjust your assumptions
10:18 < zomg> konobi: I don't think it matters when this is a preview of what something might look like if the user uses certain settings on their product :P
10:18 < zomg> it's completely irrelevant, all of the fields could say "Example Name" "Example Price" or whatever and it would still be exactly the same
10:20 < zomg> konobi: I honestly don't understand why you keep telling me about how bad fake data is when it should be pretty obvious there's no point in doing all the work to actually get proper real data for something like this
10:20 < zomg> lol
10:22 < jmav> Best practice - How do you pass variables like DB connection across routes?
10:23 < jmav> Do you append it to app.set and then call it req.app.get ?
10:23 < SomeoneWeird> jmav, make it available at a higher scope
10:24 <@konobi> zomg: *shrug* just experience
10:24 < jmav> I'm using express
10:25 < jmav> having app.js & routes/someroute.js
10:25 < jmav> someroute.js is a module
10:25 < SomeoneWeird> right, so wrap someroute.js in a function that takes your db connection as a param 
10:26 < jmav> that is typical how it's done
10:27 < jmav> Is my mentioned solution passing parameter over REQ object OK?
10:30 < ningu> jmav: it's a bad idea imo
10:30 < ningu> I like to keep my db connection handle in a separate module db.js that I require()
10:30 < ningu> that way it isn't tied to express
10:32 < jmav> nigu: but how do you pass connection to other modules
10:32 < ningu> jmav: require()
10:32 < ningu> var db = require('./db');
10:32 < jmav> i have created mysql pool of connection
10:33 < jmav> Yes but with that you always initialize new db pool
10:33 < ningu> jmav: no, require() is cached per process
10:33 < ningu> it only runs once
10:33 < jmav> not one pool for all db request
10:34 < ningu> jmav: it will execute db.js once, the first time, and then cache the result object
10:34 < ningu> so var db = require('./db') will return the same object everywhere
10:34 < jmav> :)
10:34 < ningu> jmav: then you can write a script to use it too if you want
10:35 < jmav> :) thx i will tyr it
10:35 < ningu> it's just cleaner that way
10:35 < jmav> agree if it work as you sad
10:35 < ningu> it does
10:35 < jmav> :)
10:35 < jmav> I didn't know that
10:35 < jmav> thx again
10:36 < ningu> http://nodejs.org/docs/latest/api/modules.html#modules_caching
10:40 < Industrial> Something tells me I did something wrong with the mocha HTML reporter; http://images.gammatester.com/pics/264ec53be0d3392b1ecee74e448f210a.png
10:41 < Industrial> How do people integrate mocha and jenkins?
10:41 < Industrial> I'm running ltos of (integration then I guess) tests that require a DOM.
10:42 < Industrial> I see that jenkins integration is done through TAP output, but I'm not using mocha from the commandline
10:42 < Industrial> I have a test.html that loads all code, tests and mocha and then runs it in the browser
10:43 < Industrial> Can I run tests in a browser with mocha from the commandline?
10:53 < file_> 22222
11:00 < timoxley> is there a way around this issue in node 0.8.x: https://github.com/joyent/node/pull/4104
11:01 < timoxley> i want the random port a cluster child is listening on
11:01 < timoxley> I guess I could .send it
11:08 <@MI6> joyent/node: Ben Noordhuis v0.10 * 82b3524 : crypto: fix utf8/utf-8 encoding check - http://git.io/Zd_J1A
11:17 < olalonde> does V8 support native asm.js?
11:18 < bnoordhuis> olalonde: you mean does it specifically optimize for it?
11:19 < gildean> afaik only mozillas spidermonkey is optimized for asm.js, but you can run the code with v8, but probably with worse performance than handwritten js
11:21 < jetienne> gildean: do you have any bench on this case ? 
11:30 < olalonde> bnoordhuis: yes
11:30 < olalonde> gildean: ok
11:37 < bnoordhuis> olalonde: it doesn't. there's been some discussion but nothing has been implemented yet
11:37 < olalonde> cool
11:37 < bnoordhuis> i believe some of the v8 people have ideological issues with it
11:38 < olalonde> yes, i can see why
11:45 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:53 < gildean> jetienne: i remember seeing some benchmarks but can't find the article atm.
12:19 < volitek> Okay so I have two lines, the first is console logging something, the second is using that same something in a for loop, and it complains it's undefined despite logging it.       console.log(tables[game]);
12:20 < volitek>       for (var i=0; i<tables[game].handState.players.length; i++) {
12:20 < volitek> It says Cannot read property 'handState' of undefined... what's the matter?
12:21 < amagee> volitek: what's in the loop?
12:21 < amagee> is theer something that modifies `game` by any chance?
12:23 < volitek> No, but there is something that modifies tables[game]
12:24 < amagee> ok well it looks like somehow tables[game] is becoming undefined
12:26 < volitek> aha, thanks, you helped me spot it
12:26 < amagee> p
12:26 < amagee> er, *np :P
12:44 < tigg> hello everyone!
12:45 < manisabri> Hi , I have node project that uses webmake to create a js file, there are a bunch of evals for required js files and they are useless for debugging is there any way to get the actual source?
13:05 < olalonde> is there a way to search for an object in constant time in JS?
13:05 < olalonde> what i would really need is to use an object as a property name to do this i guess
13:05 < tebriel> when I try to log in with NPM I get: Error: conflict Document update conflict.: -/user/org.couchdb.user:tebriel/-rev/... any ideas on how to fix this?
13:06 < Vermicelli> 1) update your npm
13:06 < Vermicelli> 2) double check your credentials
13:06 < Vermicelli> always works!
13:09 < tebriel> Vermicelli: using 1.2.25 (from the node.js 0.10.10 installer), rm'd ~/.npmrc, ran npm login, same issue
13:10 < Vermicelli> please check with the npm site as well
13:10 < Vermicelli> if you could login
13:11 < tebriel> Vermicelli: successfully logged out and then back in
13:11 < Vermicelli> anycase you need npmrc for npm to have ur login credentials right?
13:12 < tebriel> Not sure I understood what that sentence meant. I need npmrc to store my credentials to publish packages...
13:13 < Vermicelli> i am getting the same error
13:13 < Vermicelli> i think this is some bug with db
13:13 < tebriel> okay. Is there someone I should tell? :D
13:13 < Vermicelli> issacs
13:13 < Vermicelli> is the created of npm
13:13 < Vermicelli> :)
13:14 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:22 < dbushell> Anyone know why `npm adduser` would be failing like: https://github.com/isaacs/npm/issues/3540
13:28 < Ted> Hello Node....Noders? Nodediates? Do we have a name?
13:29 < Ted> uhhh I have a quick basic question, is it normal to have so many 'ERR!' when using NPM install?
13:29 < tebriel> no, those are errors
13:30 < tebriel> ted: what do they say?
13:30 < Ted> Lol all sorts of things
13:30 < Ted> one sec
13:31 < tebriel> ted: use a gist
13:32 < Ted> https://gist.github.com/TedSoper/5756839
13:32 < Ted> I keep forgetting gist is a thing.
13:32 < Ted> thanks
13:33 < tebriel> the first time you didn't have a package.json in chatrooms so it didn't know what to install
13:33 < tebriel> this probably also means that you have a node_modules in your ~ dir
13:33 < Ted> So I need to create that first before anything else then
13:33 < tebriel> npm init will create a package.json template
13:34 < Ted> npm init....hmm the tuts I was following didnt mention that
13:34 < tebriel> ted: probably good to have already asked this, what are you doing?
13:34 < tebriel> are you creating a new node project or trying to install someone else's project?
13:35 < Ted> create a new project
13:35 < Ted> I got the Nodejs in Action Book, trying to follow along
13:35 < tebriel> okay yeah, create your base directory for your project, then do npm init, it'll create a package.json for you
13:36 < Ted> ahh...will do
13:36 < tebriel> and when you add dependencies to your project install them with npm install somePackage --save
13:36 < tebriel> that'll write them to the package.json
13:37 < Ted> I add the --save command at the end?
13:37 < Ted> interesting. Havn't seen that before
13:38 < tebriel> i always put it at the end, don't think it's required to be there. you can also add --save-dev to save develop dependencies that aren't required for running the app but are for development
13:38 < Ted> thats really cool
13:38 < Ted> thanks for the help, I knew something was wrong.
13:39 < tebriel> np
13:58 < Ted> is it weird that webstorm is throwing an 'unresolved function or method error' when using .writehead()?
14:01 < bnoordhuis> Ted: it's .writeHead()
14:01 < Ted> sorry, I did type it correctly in the code, just not in here
14:02 < Ted> it seems webstorm doesn't understand half the things Im putting in. I setup the node interpreter correctly....
14:02 < Ted> Ill probably jsut have to poke around and figure it out. Im coming from VS and C# so I'm more used to that IDE
14:03 < silv3r_m00n> hi there, just a general question, i have been writing php+mysql database applications for clients (for internal use and not as a website), can such things be written in nodejs, is it going to be better ?
14:04 < Ted> there is a mysql 'plugin' you can use for node
14:04 < silv3r_m00n> Ted: me ?
14:04 < Ted> yeah
14:05 < Ted> https://github.com/felixge/node-mysql
14:05 < Ted> node is supposed to be a lot faster than many other options
14:05 < silv3r_m00n> Ted: yeah, checked it on github, so nodejs has a built in http server and using a web f.w. like geddy with mysql, i think applications can be coded well
14:05 < Ted> and its all JS, which I like more than PHP
14:06 < Ted> I just went through a Plural sight course on express js, doing a basic database should take you no time in node with express
14:06 < silv3r_m00n> so how does nodejs handle http connections ? threads , processes or select or what ?
14:06 < bnoordhuis> silv3r_m00n: if you're building crud apps, node is not per se a noticeable improvement over php or rails or what have you
14:07 < silv3r_m00n> bnoordhuis: means, not much gain ?
14:07 < bnoordhuis> it might make sense to use node if your site gets heavy traffic
14:07 < silv3r_m00n> hmm
14:07 < Ted> its fair to say its not worse I think.
14:07 < nathan7> silv3r_m00n: It uses select internally
14:07 < bnoordhuis> nathan7: select? i think not
14:08 < bnoordhuis> epoll, kqueue, evports, iocp
14:08 < garbagegod> Morning, meatbags
14:08 < silv3r_m00n> in a typical apache+php setup, there are lots of apache processes that consume huge memory, php on the other hand connects to database on every request, i think since node.js "keeps running" and it should offer considerable performance gain
14:09 < bnoordhuis> silv3r_m00n: that's true. you'll need to use a connection pool, of course
14:09 < nathan7> bnoordhuis: epoll, close enough q=
14:09 < silv3r_m00n> in that case, even if that much is in effect, the ram usage for example should drop down to the seabed
14:10 < bnoordhuis> nathan7: my life's work, reduced to 'close enough' :(
14:10 < bnoordhuis> silv3r_m00n: you mean memory usage per request? that's quite likely true
14:10 < nathan7> bnoordhuis: such is life, dear.
14:11 < silv3r_m00n> per usage and in idle state, this server is running a crud app, and eats 500mb in idle states, mostly consumed by apache and mysqld processes
14:11 <@tjfontaine> bnoordhuis: one mans treasure is anothers trash?
14:12 < silv3r_m00n> if nodejs is using epoll or select, then the http server should be really light
14:13 < silv3r_m00n> and above all, i dont need the heavy setup for apache, the mpms, mods, vhost configuration and the entire thing
14:14 < bnoordhuis> silv3r_m00n: yep, also true. node is quite self-contained
14:16 < AAA_awright> Not really? You still need a gateway, an OS, and at least with my setup, PHP accepts requests almost identically to Node.js
14:16 < silv3r_m00n> AAA_awright: means ?
14:16 < AAA_awright> hm?
14:17 < silv3r_m00n> OS is there, what is a gateway ? the router ? 192.168.1.1 ? and php identical to node.js means ?
14:21 < pachet> AAA_awright: almost identically?
14:21 < pachet> using cli server maybe? :{
14:22 < AAA_awright> The request gets forwarded to a daemon, which handles requests
14:22 < AAA_awright> silv3r_m00n: A gateway forwards HTTP requests to another HTTP server
14:23 < silv3r_m00n> AAA_awright: why cant i use the node.js http library and use an alternative port 
14:24 < AAA_awright> Hm? That's what I mean, I think?
14:24 < silv3r_m00n> i mean for crud applications dont need to use 80, can tell the user to specify the port number
14:25 < pachet> AAA_awright: i dont think gateway is the right term for what you're describing, unless i'm missing something
14:25 < pachet> what protocols are you negotiating between :[
14:25 < AAA_awright> pachet: It's a standard HTTP server setup
14:25 < AAA_awright> I have Nginx run, and it forwards requests to the appropriate daemon, PHP or Node.js or whathaveyou
14:26 < pachet> that's not a gateway, that's a proxy
14:26 < silv3r_m00n> php daemons ? does php run well as a daemon or persistent application ?
14:48 < jas-> silv3r_m00n: There are a few existing projects that make use of the CLI version which can utilize threads, pcntl functionality etc. It runs as well as an interpreted language could as a daemon
14:49 < jas-> silv3r_m00n: http://pear.php.net/manual/en/package.system.system-daemon.examples.simple.php
14:52 < silv3r_m00n> jas-: php cli has threads ? i guess php does not have threads at all
14:58 < Boya> Trying to make an app thats realtime and updates tables on the browser whenever there is a new database entry in mongodb.  Can anyone point me in the right direction on where I would start?
14:58 < Boya> Or tutorials on it.
14:59 < emkei> hello which thing I should use when uploading and manipulating images streams or buffers?
15:00 < jas-> silv3r_m00n: Yeah, the pcntl family of functions (http://php.net/manual/en/ref.pcntl.php) allows for threaded parent/child processing. But as I mentioned this functionality is not available with the SAPI Apache/Nginix module (most common PHP use), it is only available with the CLI version of PHP. Unless of course you use this project ... https://github.com/krakjoe/pthreads which allows for...
15:00 < jas-> ...threaded processing with PHP using the SAPI module(s)
15:01 < jas-> silv3r_m00n: node.js is better as this functionality is native. No expensive deployment LAMP stack etc
15:01 < silv3r_m00n> yeah
15:02 < wankdanker> anyone know when 0.10.11 will be released and if it will contain stream assertion fix (https://github.com/joyent/node/issues/5622)
15:05 < bnoordhuis> wankdanker: probably this week and yes
15:06 < bnoordhuis> though 'fix' is not really the right word
15:06 < wankdanker> bnoordhuis: thank you. and lol. what would you say _is_ the right word?
15:06 < wankdanker> redaction?
15:13 < bnoordhuis> wankdanker: well, i added an assert and now i removed it again :-/
15:14 < bnoordhuis> i'm sure it was catching some legitimate bugs but it might have been overreaching
15:14 < wankdanker> bnoordhuis: you do great work. i'll assert that; no worries. :)
15:14 < AAA_awright> pachet: A proxy is something that a client sets up, I configure my user-agent to connect to a proxy that routes and executes a request on my behalf
15:14 < AAA_awright> pachet: A gateway accepts requests as an endpoint and always routes them to the same location, unlike a proxy
15:15 < AAA_awright> Ah, RFC 2616: gateway: A server which acts as an intermediary for some other server. Unlike a proxy, a gateway receives requests as if it were the origin server for the requested resource; the requesting client may not be aware that it is communicating with a gateway.
15:19 < jas-> Anyone familiar with sessions and session regeneration to prevent session hijacking, session fixation & session replay attack vectors?
15:24 < ZJwn> Hi. So, I've been developing with node on Windows and using Cygwin for a while now. I needed to update node, and did so with the node installer. I can't remember doing anything special last time I did, but now Cygwin simply says command not found. How can I get Node working in Cygwin again?
15:25 < jas-> ZJwn: What command exactly?
15:26 < ZJwn> Any node command.
15:26 < jas-> ZJwn: Example? It matters
15:30 < jas-> ZJwn: Technically cgwin is no longer needed for node as there is a native windows version available (http://nodejs.org/download/). If your still hell bent on using cygwin to run node, first ensure it is installed; from a prompt: whereis node. This should give you any available installed folders registered within $PATH. If you run the command; echo $PATH and the folder of your node installation is 
15:30 < jas-> not listed then simply run PATH = $PATH:/path/to/node to update it
15:33 < wsieroci> anybody here involved in some project related to webRTC?
15:36 < paulkon> ugh, apple didn't update the mbp retina with haswell...
15:36 < paulkon> the one machine that badly needed the graphics boost
15:40 < aslant> when creating a buffer using new Buffer(str, 'base64'), only the first 2048 bytes are copied to the Buffer. I'm using node v0.8.23. Is this intended behaviour?
15:45 < Rabbit> I have serious doubt in Node.js
15:45 < pachet> there's a module for that
15:47 < Ted> Back again.... had a quick question. If I change the file structure of my node project, do I have to do anything for node to see the changes. I deleted a remade a folder for my css files, im pointing to them but I keep getting 404
15:47 < bnoordhuis> Rabbit: are you going to tell us why?
15:48 < olalonde> Ted: you need to restart Node most likely. I suggest you use nodemon in development
15:48 < Rabbit> It's not following Non Blocking ... bnoordhuis 
15:48 < Rabbit> I have the Code
15:49 < Ted> ok, ill try it.
15:49 < nathan7> Rabbit: Hm?
15:49 < Rabbit> 1 min
15:49 < nathan7> Rabbit: You mean the fact that no OS on earth provides non-blocking file reads?
15:49 < nathan7> well, no commonly used OS for sure
15:50 < olalonde> ??
15:50 < olalonde> arent all file reads non blocking on linux?
15:51 < olalonde> well in the sense that the scheduler moves to another process
15:51 < nathan7> ..that means it blocks
15:51 < olalonde> then how does Node offer async file reads?
15:51 < olalonde> with the use of threads?
15:51 < Rabbit> http://pastebin.com/BH11DYYA
15:52 < Rabbit> OOps Sorry
15:54 < nathan7> olalonde: Yep
15:54 < Rabbit> Here it is http://pastebin.com/7389LXJX nathan7 
15:55 < nathan7> lol wat
15:55 < nathan7> that'll throw a ReferenceError right away
15:55 < nathan7> Your code isn't actually in the callbacks
15:55 < olalonde> ok
15:55 < nathan7> It uses a thread pool for async file reads
15:57 < Rabbit> LOL nathan7 
15:57 < olalonde> thread pool? like it creates a threads in advance just in case or something like that?
15:57 < Rabbit> Your Wrong nathan7 
15:57 < ZJwn_> Nathan7, I think you were looking at the wrong pastebin.
15:58 < nathan7> Ah.
15:58 < nathan7> Rabbit: Yes, what exactly is your issue wit this code?
15:58 < nathan7> *with
15:58 < Rabbit> It wont follow Non-blocking
15:59 < nathan7> Please do explain how it's not non-blocking.
15:59 < bnoordhuis> what does "follow non-blocking" mean?
15:59 < bnoordhuis> is that a twitter handle?
15:59 < olalonde> nathan7: someone on #linux pointed out there is http://linux.die.net/man/3/aio_read
15:59 < olalonde> haha bnoordhuis 
15:59 < nathan7> It'll handle other requests, the event loop keeps running
16:00 < bnoordhuis> olalonde: posix aio on linux runs in a thread pool
16:00 < Rabbit> nathan7 It's not happening
16:00 < Rabbit> I tried many times
16:00 < olalonde> bnoordhuis: got it
16:00 < nathan7> Rabbit: What the fuck is not happening?
16:00 < bnoordhuis> olalonde: there are native aio system calls but they have severe restrictions
16:00 < Rabbit> nathan7:1 min Moron
16:01 < olalonde> bnoordhuis: ok
16:01 < Rabbit> I'll paste my output for 5 request
16:01 < bnoordhuis> olalonde: you need to open files in O_DIRECT mode (i.e. 'skip the disk cache' mode) and even then it's possibly it'll sometimes silently block
16:01 < nathan7> Rabbit: 'moron' was't my name last time I checked, dear.
16:01 < olalonde> Rabbit: what's wrong with your code?
16:02 < Rabbit> nathan7  "What the fuck is not happening?" :D
16:03 < olalonde> Rabbit: your code looks fine although a little weird
16:03 < nathan7> ..jesus, dude.
16:03 < nathan7> You haven't clarified what you expect to happen and what happens
16:03 < nathan7> You merely state a differently worded version of "it doesn't work"
16:03 < wankdanker> Rabbit: i'm not sure what you think is blocking, but if you move `response.write("Dog is done.");` to after your setTimeout call, you will see that setTimeout does not block
16:04 < olalonde> $ curl localhost:8080                                         [master][]
16:04 < olalonde> Dog is done.Dog is running.%
16:05 < olalonde> maybe he means it's blocking the http request -_-
16:06 < olalonde> probably because write is buffered?
16:06 < ZJwn_> On my Cygwin problem (freenode's webchat cut me off, I may have missed someone's reply) I used aliases to nodejs's installed directory for the commands node and npm...
16:06 < Rabbit> olalonde for 2 request at a time from different Browser it must say {Dog is done.Dog is running ,Dog is done.Dog is running }
16:07 < Rabbit> Its saying *
16:07 < Rabbit> rather It must say {Dog is done.,Dog is done. Dog is running..Dog is running.} 
16:08 < Rabbit> for 2 request
16:08 < Rabbit> Getting ?
16:09 < Rabbit> I was talking about multiple request
16:09 < nathan7> In both browsers the response will be "Dog is done.Dog is running."
16:09 < nathan7> This code does nothing special to handle concurrent requests differently.
16:09 < Rabbit> make it on console
16:09 < Rabbit> You will see the Difference
16:10 < olalonde> haha
16:10 < nathan7> On the console it would print "Dog is done." "Dog is done." "Dog is running." "Dog is running."
16:10 < Rabbit> huh ? It's not printing Here
16:10 < Rabbit> I'm using Win 7
16:10 < nathan7> If you were to use console.log instead of response.write
16:10 < Rabbit> I used console.log
16:11 < nathan7> http://pastebin.com/ZVgcg7ze
16:12 < nathan7> Rabbit: http://sprunge.us/ITHe
16:12 < Rabbit> nathan7 I know that
16:12 < Rabbit> It's not printing as you sid
16:12 < Rabbit> said*
16:13 < nathan7> 18:09:30 < nathan7> On the console it would print "Dog is done." "Dog is done." "Dog is running." "Dog is running."
16:13 < nathan7> That's exactly what it does
16:13 < Rabbit> It's not Printing
16:13 < nathan7> maybe some odd windows issue?
16:13 < nathan7> it works just fine for me
16:13 < Rabbit> it acts like single threaded model
16:14 < olalonde> haha
16:14 < Rabbit> take 1st request process it then 2nd request
16:14 < olalonde> your setTimeout is blocking? that will be a first :)
16:14 < ZJwn_> I'm on Windows 7 as well, and indeed got  "Dog is done." "Dog is done." "Dog is running." "Dog is running."
16:14 < nathan7> Non-blocking and single-threaded, that's what node is
16:14 < olalonde> show us a screenshot Rabbit :)
16:14 < hipsterslapfight> Rabbit: are you making the two requests within 5 seconds of eachother?
16:14 < nathan7> The behaviour matches
16:15 < Rabbit> Yes
16:15 < Rabbit> 1 min
16:15 < Rabbit> yes hipsterslapfight 
16:15 < nathan7> A browser doesn't display responses right away
16:15 < olalonde> he is probably looking at the output on his browser
16:16 < Rabbit> even in my win XP the same thing is printing
16:16 < Rabbit> olalonde, too Funny
16:16 < ZJwn_> Printing where?
16:16 < hipsterslapfight> dammit i shouldn't get pulled into this ..
16:17 < Rabbit> olalonde your not  genius .... Shut the Fuck!
16:17 < olalonde> haha
16:17 < olalonde> I will :) gl with your problem
16:17 < nathan7> A bit more polite would be acceptable
16:19 < hipsterslapfight> he's obviously ESL so maybe he's not trying to be as rude as he is
16:21 < olalonde> we need #node.js-hindi :)
16:23 < Rabbit> Here it the Screenshot nathan7 olalonde http://postimg.org/image/le91vc0v7/
16:25 < nathan7> Your browser may be sending reqs sequentially
16:26 < Rabbit> How do you that ?
16:26 < Rabbit> PROVE*
16:29 < olalonde> is there any way to run 2 commands in parallel in bash?
16:30 < Rabbit> Is this a BUG ?
16:30 < gildean> Rabbit: try opening the page in two different browsers at the same time
16:30 < olalonde> $ curl localhost:8080 &;curl localhost:8080
16:30 < olalonde> $ node /tmp/rabbit.js                                         [master][]
16:30 < olalonde> Dog is done.
16:30 < olalonde> Dog is done.
16:30 < olalonde> Dog is running.
16:30 < olalonde> Dog is running.
16:30 < olalonde> solly for copy/paste :)
16:31 < jas-> olalonde: nohup curl localhost:8080; curl localhost:8080 > log; diff -Y nohup.out log
16:31 < Rabbit> I asked for a Solution
16:31 < wankdanker> Rabbit, try using two different browsers at the same time (firefox and chrome or ie)
16:31 < olalonde> jas-: thanks 
16:31 < jas-> olalonde: Wait... use this one nohup curl localhost:8080 &; curl localhost:8080 > log; diff -Y nohup.out log
16:32 < olalonde> jas-:  curl localhost:8080 &;curl localhost:8080 seemed to work fine for this purpose but thanks :)
16:32 < jas-> olalonde: no worries
16:33 < Rabbit> wankdanker why it cant work in same browser ?
16:33 < jas-> olalonde: technically without "nohup" the commands simply ran one after the other... the use of nohup forced the first curl request into the background logging to the nohup.out file while the second request ran in the foreground logging to the "log" file
16:34 < Rabbit> 2 tabs 2 new request
16:34 < olalonde> try with a timeout of 1e6 :)
16:35 < Rabbit> I increased timeout to 20ms
16:35 < wankdanker> Rabbit: first you need to prove that the browser isn't sending the requests sequentially. since that may be the cause of the weirdness.
16:36 < Rabbit> How to prove that wankdanker 
16:36 < Rabbit> I dont know wankdanker 
16:36 < wankdanker> Rabbit, try using two different browsers at the same time (firefox and chrome or ie)
16:37 < wankdanker> Rabbit: open a firefox window and a chrome or IE window. and then request the page at the same time from both browsers (within 5 seconds) 
16:38 < Rabbit> wankdankeronly in FF it's coming like this and other browser it's fine
16:38 < pachet> ><
16:38 < wankdanker> Rabbit: then the issue is with firefox serializing requests, not with node.
16:39 < pachet> there's your Solution
16:39 < Rabbit> firefox serializing requests ..How to solve it ?
16:40 < draginx> How can I authorize myself under npm?
16:40 < wankdanker> Rabbit: ask in #firefox?
16:40 < draginx> npm adduser does not work if I registered under npmjs.org
16:40 < Rabbit> OKay Thank You
16:40 < wankdanker> Rabbit: good luck.
16:52 < Vermicelli> which irc client do mac users here use?
16:52 < jaCen915> Vermicelli: Colloquy
16:52 < Vermicelli> anything else?
16:53 < jocafa> Vermicelli:  Adium
16:54 < grep_awesome> I've had issues with Adium eating cpu
16:54 < grep_awesome> it works great for other chat systems, but IRC on my MBP 2011 i7 doesn't work well
16:55 < grep_awesome> Colloquy is where I'm at now
16:55 < cTIDE> irssi > *
16:56 < Vermicelli> I am currently using colloquy but don't like it much
16:57 < grep_awesome> stock, it's ugly, but there is a lot of customization room there
16:57 < Vermicelli> also i don't want to use a command line IRSSI
16:57 < Vermicelli> what one looks better and is functional as well?
16:57 < Vermicelli> ?
16:57 < grep_awesome> hide the toolbar, use small icons, always show terminal as a channel, and change the colorscheme
16:57 < Vermicelli> ok
16:57 < Vermicelli> Thanks!
16:57 < Vermicelli> :)
16:58 < grep_awesome> Vermicelli, this is what mine looks like https://www.evernote.com/shard/s258/sh/431cb8a8-10c9-42cb-97b7-72be5d990315/89a2ea02d956cb47307bdcadaae7668c
16:58 < bryanstedman> I'm liking LimeChat
16:59 < Vermicelli> This looks neat grep_awesome
16:59 < jaCen915> Vermicelli: mine looks just like grep_awesome but waaayy better colors :P
16:59 < Vermicelli> what theme are you using?
16:59 < Vermicelli> Where can i get good themes?
16:59 < grep_awesome> jaCen915: do share!
16:59 < Vermicelli> I hate the stock themes in here.
16:59 < jaCen915> you don't really need themes
16:59 < grep_awesome> Vermicelli: I just kinda rolled my own colorscheme
17:00 < jaCen915> you just nee background color, your name color, others name color
17:00 < grep_awesome> made something that is readable for me that pops out when I'm mentioned
17:00 < Multiply> I'm currently spawning a process with a specific uid, and gid, from a root node-app. If I try "whoami" it shows the correct user, but it seems like the home directory is still /root/? I also set cwd to the correct folder. How do I go about fixing this?
17:00 < Vermicelli> You are awesome grep_awesome, not just our name contains awesome ;)
17:00 < grep_awesome> :P thanks  :)
17:00 < Vermicelli> Thanks for the help guys
17:00 < Vermicelli> lemme see how good i can do!
17:00 < Vermicelli> :)
17:01 < samrocksc> hidy ho
17:02 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:03 < jas-> Are there any node.js conferences (in the US) that come highly recomended
17:06 <@mbalho> nodeconf
17:07 < dooglus> hi guys
17:07 < dooglus> I'm having a problem with node / socket.io, trying to get it working on port 80 as a non-root user
17:08 < dooglus> I run setcap 'cap_net_bind_service=+ep' /usr/local/bin/node
17:09 < dooglus> to allow the user to listen on port 80, and that works when I access the site from chromium, but if I try using firefox, I get a whole bunch of connections to the server
17:09 < dooglus> listening on port 81 is fine - works with both browsers.  so what's special about 80?  I've shut down apache
17:11 < samrocksc> I have a slight question: has anyone installed from source the latest node on crouton(or upgraded to it)?
17:11 < Multiply> How do I load a users environment, when spawning a child_process, with a specific uid/gid? It seems to use root's environment, which isn't desired.
17:13 < Vermicelli> Its looks good now! 
17:13 < Vermicelli> :)
17:14 < Vermicelli> http://imgur.com/diYbbot
17:16 < nathan7> samrocksc: The heck is crouton?
17:23 <@mbalho> crisped bread cube
17:23 < jas-> lol
17:23 < spion> wow, the best approach I've seen so far for es6 generators and node, https://github.com/jmar777/suspend
17:30 < Multiply> How do I spawn a child_process, with the correct environment variables, for the specified UID and GID, instead of the parent environment variables?
17:31 < eugeneware> spion: yeah. pretty nice for the anti-promise camp :-)
17:32 < spion> eugeneware, I think it actually supports yielding promises too
17:32 < spion> in https://github.com/jmar777/suspend/blob/master/lib/suspend.js there is `if (typeof resumable.then === 'function') {`
17:33 < spion> so I think its pretty nice for both camps :D
17:36 < eugeneware> awesome! 
17:36 < eugeneware> I found these two articles really good (were linked to from this week's nodeup) - http://jlongster.com/A-Study-on-Solving-Callbacks-with-JavaScript-Generators   and http://jlongster.com/A-Closer-Look-at-Generators-Without-Promises
17:36 < eugeneware> really good discussion about the different options and pros and cons.
17:37 < AAA_awright> No one seems to discuss events, I mean DOM-style events
17:38 < s5fs> Multiply: you should be able to pass your env vars as key-value pairs  http://nodejs.org/api/all.html#all_child_process_spawn_command_args_options
17:39 < s5fs> check out the options object
17:39 < AAA_awright> DOM-style Events are, of course, used by EVERYTHING in the Web browser
17:40 < AAA_awright> It seems rather silly that people who claim to want to emulate Web browser behavior wouldn't adopt Web APIs to do so
17:40 < Multiply> s5fs, I know, but that means I have to read a specific users variables?
17:41 < Multiply> s5fs, I assumed, just by setting uid and gid to something else than root, it would load that users variables, however, that's not the case.
17:42 < s5fs> Multiply: you could call a shell script, and that could set up whatever environment you wish
17:42 < s5fs> but yeah, I don't think that setting UID does anything to your current env
17:43 < Multiply> Is there a way to spawn a process, from a given uid, rather than setting uid later?
17:44 < Multiply> I guess I'll just allow people to set their own environment variables, regardless of where they come from.
17:45 < s5fs> Multiply: you could look into using sudo as well
17:45 < Multiply> s5fs, it'll make it too system specific, I suppose.
17:46 < s5fs> Multiply: high-level, what are you working on?
17:46 < s5fs> I mean, I'm using child_process mainly for system maintenance tasks, bouncing interfaces, etc. all as root because I'm in an embedded device.
17:47 < Multiply> Basically, a process manager, watching a directory, full of repositories. Each repository may contain one or serveral app.json-files, that the master reads. If something changes, restart the app, on port X for domain Y.
17:47 < Multiply> port doesn't have to be defined, only the domain.
17:47 < Multiply> And then proxy everything, to the correct app.
17:47 < Multiply> All of this is done, I'm just having problems, getting the apps to use UID's environments, rather than root's
17:48 < Multiply> And it doesn't have to be run from root either.
17:48 < s5fs> your master process runs as root and then spawns workers using the UID of the connected client?
17:48 < s5fs> so when I drop an app.json file, my process is restarted and runs as user "s5fs"
17:48 < Multiply> It spawns processes, based on local files.
17:48 < Multiply> No.
17:48 < s5fs> ah, so the local file defines the user it runs as?
17:49 < Multiply> Yes.
17:49 < Multiply> The UID/GID of the file, defines which user it's run from.
17:49 < s5fs> honestly, i'd write a helper script using bash and then call that from node
17:49 < Multiply> And if you define uid/gid in the file, it's overwritten
17:49 < s5fs> then it's just a matter of parsing the app.json and passing the correct args to your shell script
17:50 < s5fs> and testing a shell script is pretty damn easy too
17:50 < Multiply> I'm still having trouble with my environment variables, then.
17:51 < s5fs> if you use sudo i think it will use the named user's environment
17:51 < Multiply> I guess it's just a matter of finding UID's home, and set that when I spawn the process
17:51 < Multiply> And I can't rely too much on sudo to work either.
17:51 < Multiply> What if they don't have sudo access?
17:51 < Multiply> It may not be run from root
17:51 < Multiply> Personally I run it from root, for testing purposes
17:51 < s5fs> maybe you can do it with regular 'su' as well, i'm not sure
17:52 < Somebody> Is there anyway to make node-gyp build nothing when on certain OS, from the .gyp file ?
17:52 < s5fs> it's rare that i run across systems without sudo though
17:53 < s5fs> Multiply: i'm interested to hear what you come up with! i'm fairly new to systems work with node and find it to be more interesting than, say, bash or perl, but it's still funky.
17:54 <@isaacbw> sudo should be the first package you install
17:54 <@isaacbw> unless you're a turd
17:54 <@isaacbw> ARE YOU A TURD
17:55 < werle> no turds allowed 
17:56 < Multiply> s5fs, I'll see if I remember it. When I'm done, I'll open-source it. :P
17:56 < jason11> Howdy all, quick question about nodejs Buffer, any special care needed to free them or are they automatically garbage collected?
17:57 < s5fs> Multiply: fantastic!
17:57 <@isaacbw> jason11: they're collected
17:57 <@isaacbw> everything is collected
17:58 < jason11> isaacbw: that's what i thought. thanks
17:58 < mscdex> isaacbw: for now
17:59 <@isaacbw> dun dun duuuuuun
17:59 <@xyxne>  /win 12
17:59 <@xyxne> damn it.
17:59 < mscdex> don't switch us away!
17:59 <@xyxne> TOO LATE
18:00 < Multiply> What have you guys been brewing today? :P
18:15 < brostachioo> I'm trying to do a post to an apache server i have running on localhost:80, but i'm getting this error
18:15 < brostachioo> getaddrinfo ENOTFOUND
18:15 < brostachioo>     at errnoException (dns.js:37:11)
18:15 < brostachioo>     at Object.onanswer [as oncomplete] (dns.js:124:16)
18:16 < brostachioo> i can reach the file from the hostname and path that i'm giving node when i put it into the browser manually
18:22 < eere> helllo
18:23 < eere> ive set var mysql, im trying to run a few sql queries in async.waterfall but "mysql" is coming up as undefined within the async function, what should i do
18:26 < mscdex> eere: so initialize it outside the waterfall?
18:26 < mscdex> eere: can you show the code?
18:47 < jasonkuhrt> Hi
18:48 < jasonkuhrt> is there a way to expose a stream that itself, say, 3 streams?
18:48 < jasonkuhrt> for instance a byline stream + a processing stream?
18:48 < jasonkuhrt> wrapping those into a single parent stream
18:54 <@xyxne> jasonkuhrt, you want something that does the .pipe()ing for you?
18:54 < jasonkuhrt> xyxne: yes, but that would also allow to be piped to and piped from
18:54 < jasonkuhrt> xyxne: I basically want to be able to cherry pick part of a pipeline and label it
18:55 <@xyxne> https://github.com/dominictarr/stream-combiner
18:55 <@xyxne> maybe
18:55 < jasonkuhrt> xyxne: thanks, that sounds relevant, checking it out
18:57 < NoiseEee> if i want to parse a file, should i be using 'fs' or streams?
19:00 < JohnMcLear_> Is it a file that is being modified or is it a static file?
19:00 < JohnMcLear_> afaik streams should be used when the file is being streamed to and you need to keep listening to it..  NoiseEee
19:01 < JohnMcLear_> Else just use fs, fs is prolly faster or single ops (less overhead preparing the read)
19:01 < NoiseEee> okay thanks. static file, need to regex some stuff in it.
19:01 < NoiseEee> thanks JohnMcLear_
19:01 < JohnMcLear_> np
19:02 < JohnMcLear_> Do double check, I don't do much caring about performance when reading from the filesystem.  I just know that fs is very mature and stable
19:30 < paulkon> ugh, apple didn't update the mbp retina with haswell...
19:30 < paulkon> the one machine that badly needed the graphics boost
19:35 < brostachioo> I'm making a post request to a php file via the node http module, but i can't seem to get php to pick anything up in $_POST
19:36 < wc-> paulkon do you know if the new air is the same size / thickness etc
19:37 < wc-> i have a mbp retina but might downsize to the air, i just dont need the computing power to write code in a shell all day :- /
19:43 < paulkon> mbp retina 13" and mbp air 13 are fairly the same size
19:43 < paulkon> mbp air is half a pound lighter though
19:43 < paulkon> and even lighter with the haswell chip now
19:43 < paulkon> slimmer*
19:43 < paulkon> I just wish they upped the resolution on the air as well
19:44 < paulkon> lets me squeeze more into the frame
19:45 < kad_> just released a nodejs module for bidirectional RPC and I want to share it with the community  http://eureca.io/
19:46 < kad_> I was using nowjs before but since it seems to be abandonned I rolled my own module with simple aproach and not relying on a single transport layer
19:47 < BoarK> Hi all, I'm interested in using log.js from https://github.com/visionmedia/log.js.  How do I instantiate a log instance to be used across multiple modules?  Do I use a global variable?
19:48 < paulkon> BoarK: create a new js file and export new Log from it
19:49 < paulkon> then require that js file from all the modules that you want to share the same instance of Log
19:49 < BoarK> paulkon: thanks.
20:00 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
20:09 <@isaacbw> exit
20:09 <@isaacbw> bloop
20:10 < thomblake> It's probably a function.  Try `exit()`
20:10 < pachet> try 'babality'
20:11 < nicholas_> tell me which nosql db to use but don't say mongo 
20:11  * nicholas_ is casting about between couchdb and whatever else right now
20:11 < jcrugzz> nicholas_: couch or leveldb IMHO
20:12 < jcrugzz> leveldb for on server db
20:12 < nicholas_> jcrugzz: ok cool. I think leveldb is being over recommended
20:12 < nicholas_> Ill stay with couch
20:12 < nicholas_> leveldb is very cool and interesting but it means you have to build your own db's behaviours, which isnt trivial
20:12 < jcrugzz> thats probably because leveldb is the node of dbs
20:12 < jcrugzz> yea
20:12 < jcrugzz> so id go with couch, thats what we run in production at nodejitsu
20:13 < nicholas_> jcrugzz: thanks. Im working with cradle right now. I just want a general purpose db 
20:13 < nicholas_> Ill persevere
20:13 < thomblake> I only ever use Mangodb.  It has auto sharting.
20:13 < nicholasf> thomblake: :)
20:14 < jcrugzz> thomblake: auto sharting sounds quite unpleasant
20:15 <@xyxne> the cool kids are using riak/leveldb these days
20:16 < nicholasf> xyxne: being cool isnt always what produces the best result
20:16 <@xyxne> I guess what I mean is
20:16  * nicholasf is cynical of cool
20:16 <@xyxne> the best.
20:16 <@xyxne> enjoy that cynicism though ;)
20:16 < nicholasf> anymore gross generalisations?
20:17 <@xyxne> you seem like a nice person.
20:17 < nicholasf> haha, thanks
20:17 <@xyxne> :P
20:17 < nicholasf> I actually looked into using leveldb for the project Im using couch on
20:17 <@xyxne> all I mean is if performance tunability is important
20:17 < kad_> is there any real reason for not using mongodb ? (I'm asking coz I'm using it in many projects)
20:17 <@xyxne> if you're into durable writes
20:17 <@xyxne> and scaling without sharting the bed
20:17 <@xyxne> consider rik
20:17 <@xyxne> riak
20:18 <@mbalho> i thought it had auto sharting built in
20:18 < nicholasf> and none of the cool/best programmers are discussing how much work is involved with having to implement your own db (and how it impacts building other features) or what it means to productivity
20:18 <@mbalho> nicholasf: everyone working with leveldb also regularly contributes to open source projects, its a different mindset than 'i have to get my consulting gig done within this deadline'
20:19 < nicholasf> mbalho: I know the people involved with it
20:19 <@xyxne> mbalho, thanks for the referral BTW, going down to check things out tomorrow!
20:19 <@mbalho> xyxne: sweetness, good luck
20:19 < jcrugzz> nicholasf: yea if you are looking to just throw some json at a db and do what you want with it, you have picked a good choice. you can make couch views index what you want in the JSON
20:19 < nicholasf> mbalho: yeh, I think leveldb is intersting for niche database problems
20:19 < nicholasf> but it is catching on a level of cool which is going to burn a general dev audience who want to build cool things
20:20 < nicholasf> not nerd it up with creating a database or a new a db product
20:20 <@xyxne> http://i.imgur.com/4wc9PDC.png
20:20 <@xyxne> wrong channel
20:20 <@xyxne> sorry
20:20 < kad_> xD
20:20 < nicholasf> if you have a set of features to build and you're adding 'implement my own database using leveldb' as the first feature you're probably going to have fun but not produce a great set of features
20:20 < TonkaTruck> In a mongoose model, I have a model method post.parseAndSave() which I intend to parse post.text for #hashtags and add a post.hashtags array to the current instance before save.  Should this be an async process?  Or just a function?  I'm new to node and not sure where/when if ever to draw the line.
20:21 <@mbalho> nicholasf: some people go on npm and pick a web framework and rarely go back, some people use a new module every day and write a new one every other day
20:21 < nicholasf> mbalho: I understand open source
20:21 < nicholasf> this is not a discussion about inventing your own solutions about problems
20:21 <@xyxne> I take it back
20:22 <@xyxne> that link is applicable here
20:22 < nicholasf> it's a discussion about understanding which problem you are trying to solve
20:22 < kad_> TonkaTruck, just a function :) let nodejs/mongodb handle the synchronisation stuff
20:22 < nicholasf> and the cool factor of leveldb is obscuring the distinction I suspect
20:22 <@xyxne> this is a discussion?
20:22 <@mbalho> nicholasf: ok i guess i dont understand, i'll go re-read everything you've said again, sorry
20:22 < FunnyLookinHat> Anyone here have a good example of code organization that limits handled requests ( with something like express ) to one request per file ?
20:22 < nicholasf> mbalho: np. I spent a few hours thinking about using it before I realised it was going to be more work 
20:23 <@xyxne> KV stores are hard
20:23 <@xyxne> best left to mad scientists
20:23 <@xyxne> feature focus
20:23 < TonkaTruck> kad_: Thanks.
20:23 < kad_> nicholasf, xyxne ... I'm using mongodb and I'm happy with it ... problem ? :)
20:24 < nicholasf> kad_: I just dont like mongo because of its history
20:24 <@xyxne> nope
20:24 <@xyxne> nicholasf, I feel the same way about the south
20:24 <@xyxne> it's also just about as relevant ;3
20:24 < nicholasf> xyxne: haha. I'm from Melbourne, Australia, but I understand the reference
20:24 < s5fs> damn
20:25 < s5fs> the american south is so backwards that people on entirely different continents know they suck
20:25 < nicholasf> I dont know. I also like Texas No Limit Holdem. Some good things have come from the south too
20:27 < s5fs> i dislike poker, but love bbq. you do have a point.
20:28 <@xyxne> I miss BYOB restaurants
20:28 < s5fs> whaat?
20:28 <@xyxne> and high quality, readily available brisket
20:29 < s5fs> the last "B" is brisket??
20:29 < s5fs> are you for real
20:29 <@xyxne> mostly jim beam
20:29 <@xyxne> no
20:29 < s5fs> ah
20:29 <@xyxne> go to a BBQ restaurant
20:29 <@xyxne> people bring their own handles of jack and what not
20:29 < s5fs> "honey, grab the kids and the brisket, we're going out!"
20:29 <@xyxne> haha
20:29 < nlf> i'd do it
20:29 < s5fs> if you bring booze to a restaurant, you may have a drinking problem
20:30 < nlf> no, the brisket
20:30 < nlf> i'll let them bring me booze
20:30 < s5fs> nlf: i'd bring my own meats too, its weird but not that weird
20:30 <@xyxne> lol
20:30 < context> s5fs: bringing your own is cheaper
20:30 < s5fs> context: well sure
20:30 < s5fs> but if i'm worried about the economics of drinking at dinner, i probably shouldn't be drinking much OR eating out
20:30 < context> is bringing your own food to the bar mean you have an eating problem ?
20:31 <@xyxne> walking into a country style restaurant and slamming down a gallon of sour mash 
20:31 <@xyxne> kind of has its bad-ass element to it
20:31 < context> but now
20:32 < context> walking into a country style restaurant, slamming a flask if the beam and throwing up all over the server and a gallon of sour mash
20:32 < s5fs> context: if the bar serves food and you're bringing your own because you don't want to eat there, maybe. if you're bringing food to eat while you wait for your food, absolutely.
20:32 < context> kind of has its own entertainment element to it
20:32 < s5fs> "style"
20:33 < s5fs> for whatever reason, the word "zazz" comes to mind, and now i'm giggling aloud to myself and the office is looking at me
20:45 < olalonde> TypeError: Object #<Socket> has no method 'unref'
20:45 < olalonde> does anyone know why im not able to call unref() on my socket?
20:46 < olalonde> oops, was using old version of node, nvm
21:09 < Foxandxss> hello, maybe stupid question but bear with me. Node (or express itself) development can take advantage of grunt?
21:09 < Aktau> Hey guys, still the same newbie from yesterday.
21:09 < Aktau> So I was doing some callback programming, and at some point I stopped
21:10 < Aktau> I realized that when I called the callback that was passed in
21:10 < Aktau> That function would forever be on the stack
21:10 < Aktau> But I also read that process.nextTick was evil, or something
21:10 < Aktau> Heavy debating ensued whilst I read
21:10 < Aktau> So what is the common accepted way to solve it nowadays?
21:11 <@mbalho> Aktau: i am confused by your qurestion but perhaps the answer is here https://github.com/maxogden/art-of-node#callbacks
21:12 < Aktau> mbalho: I'll check if that answers my question, thanks
21:13 < Aktau> mbalho: nope, doesn't answer it
21:13 < Aktau> I'll try to rephrase with a gist
21:16 < pachet> surely there has been a mistake
21:16 < pachet> maxogden has all answers
21:16 < Aktau> pachet and mbalho: https://gist.github.com/5760773
21:17 < Aktau> If he has all the answers, then either my speed-reading is off or I'm a bad interpreter of divine commands
21:17 < Aktau> I'm guessing a bit of both
21:18 < Aktau> So basically: process.nextTick appears to be evil or used-in-the-wrong-way (then what is the right way?) according to node devs, but how am I going to get this stuff of the stack?
21:18 < cjno> I set `NODE_PATH=/path/containing/modules`, then start node and `require("some-module")` (which exists in /path/containing/modules/some-module/), but it throws an error. am I doing it wrong?
21:19 < cjno> (I know node_modules is the preferred way, but NODE_PATH is more convenient for certain dev tasks)
21:20 < jesusabdullah> cjno: protip: npm link
21:21 < cjno> jesusabdullah: I'm aware, but I like the temporary aspect of NODE_PATH
21:22 < owen1> are domains being used for production apps?
21:26 < context> aktau: i think the question is.. is your function actually async.
21:27 < context> aktau: function blah(arg, cb) { ....; cb(); } is NOT async
21:27 < heath> i still prefer javascript over coffeescript
21:28 < darth_cheney> why is that not asyc, does it need to return a function
21:29 < Aktau> context: it was a stupid example function, that function is definitely async because it calls an async function
21:29 < Aktau> context: I will amend the example
21:30 < pomke_> Hello nodies :) my company has an opening for two mid/senior node devs in Melbourne, AU, it's node/mongo/aws with an angurlar frontend http://www.smallworldsocial.com/who-we-are#jobs
21:31 < Aktau> context: https://gist.github.com/5760773
21:32 < Aktau> context: is it async now or not? If not then I phrased the question wrong, but I still have a problem, no?
21:33 < context> aktau: do you actually have a problem? or are you just worrying about stuff thats in fact not a problem at all ?
21:34 < Aktau> context: I want to know out of both theoretical and practical concerns
21:34 < context> why not fs.readFile('blah', callback)
21:34 < Aktau> context: it appears my example was once again not non-trivial enough
21:34 < Aktau> context: I will amend to show that handler does some processing
21:35 < context> i think you are worrying about too much for how much you know
21:35 < Aktau> context: https://gist.github.com/5760773
21:36 < Aktau> context: if I shouldn't be worried, then I would like to know why
21:36 < Aktau> context: is it either because: node.js detects this stuff and removes the superfluous things from the callstack -or- something else happens?
21:37 < Aktau> I think it's entirely reasonable that I just have the wrong idea about how function call work in node/v8
21:37 < Aktau> I just don't know, which is why I'm asking here
21:38 < tec27> only handler() would still be on the stack there, not someAsyncFunction
21:38 < tec27> is there any particular reason why you care what's on the callstack?
21:38 < Aktau> tec27: yes, and all that handler references, which could be a lot of stuff
21:38 < tec27> I doubt 1 or 2 extra functions are going to make a difference ;)
21:38 < Aktau> tec27: yes, it might be a pretty big object
21:39 < tec27> I'm not sure what 'object' you're talking about, it'll be a function
21:39 < Aktau> tec27: closured in by handler (or created by it, doesn't matter really)
21:39 < Aktau> tec27: So if handler has var = somethingReallyBig. then it will be collected anyway?
21:40 < Aktau> tec27: that means V8 has some pretty awesome powers
21:41 < tec27> I mean, its not going to do magic for you, but if you're really worried about what's inside your closure you can just avoid creating a closure?
21:41 < tec27> or explicitly null your references to allow the things they reference to be GC'd
21:41 < Aktau> tec27: bingo
21:42 < Aktau> http://stackoverflow.com/questions/5733665/how-to-prevent-memory-leaks-in-node-js
21:42 < Aktau> Just found it
21:42 < Aktau> My fears were justified, but thankfully there is a way around it, although it's not pretty
21:45 < jasonkuhrt> how would I get the byte code for a character
21:45 < jasonkuhrt> say \n
21:45 < jasonkuhrt> charCodeAt will return 10
21:46 < jasonkuhrt> but Buffer('\n') is 0a
21:48 < Willox> jasonkuhrt // 0a is hex for 10 in decimal
21:48 < Willox> Just different bases
21:48 < bnoordhuis> jasonkuhrt: '\n'.charCodeAt(0)?
21:49 <@MI6> joyent/node: Trevor Norris v0.10 * 5d4ac27 : v8: fix pointer arithmetic undefined behavior - http://git.io/A44wjw
21:49 < jasonkuhrt> My goal is to have a user pass a string like
21:49 < jasonkuhrt> i.e. \r\n
21:49 < jasonkuhrt> and have that turned into something that can be compared to buffer contents
21:50 < Willox> jasonkuhrt // Buffer(...) is printing the data in hexadecimal while charCodeAt is returning in decimal
21:50 < Willox> It's technically the same number
21:51 < jasonkuhrt> Willox: duh, Buffer('\n')[0]
21:51 < jasonkuhrt> >> 10
21:51 < purr> jasonkuhrt: (number) 10
21:51 < jasonkuhrt> okay
21:52 < Willox> Got it working then?
22:07 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
22:07 < olalonde> is there a node.js implementation of the xhr object?
22:08 < olalonde> xmlhttprequest object
22:08 < olalonde> id like my api client to work in the browser
22:09 < jaCen915> Does anyone here recommend combining express with angular? 
22:09 < toulon> Trying pass variable count and missing something obvious https://gist.github.com/toulon/5761180 for details.
22:09 <@MI6> joyent/node: bnoordhuis created branch trevnorris-review-plox - http://git.io/BRt4Qw
22:11 < rossk> jaCen915 -- I think I've been called crazy before, but we use express on the backend, angular client-side
22:12 < ReinH> Why would `NODE_ENV=production npm install` and `npm install --production` both be installing devDependencies?
22:19 < pomke_> jaCen915: yes?
22:20 < pomke_> As oposed to what? angurlar and something more directly rest api-ish ?
22:20 < ReinH> I have also tried npm config set production true.
22:21 < pomke_> angular*
22:21 < ReinH> Nothing I do prevents npm from installing devDependencies
22:21 < jaCen915> pomke_: just with express and jade templates
22:25 < pomke_> oh
22:26 < pomke_> well, they are kinda different things, jade is server-side rendering vs angular which is client-side
22:29 < pomke_> It probably depends on your requirements, but I'm a big fan of client-side rendering, our app servers are express, rest apis only, our infrastructure bundles our apps into static single file bundles we serve directly from s3/cloudfront, all angular
22:29 < shubhamdell> I have used javascript before but I am absolutely new to node and socket. I need to create a slider on a page lets call it the display page that connects to a slider on another page, the controller page. When the slider on the controller page moves so does the slider on the display page. How do I go about creating this app using node and socket? Any links to tutorials or other resources would be very helpful and so would a simp
22:29 < jaCen915> pomke_: interesting 
22:30 < shubhamdell> any help?
22:30 < pomke_> The big advantage is, all of the reendering load is distributed to your users machines, so we can run with minimal inf. We have 3 API servers behind an ELB, and a moderately sized mongo cluster, for a fairly sizable number of users.
22:31 < shubhamdell> or anything specific I could read to crunch this out in few hours?
22:31 < pomke_> rendering*
22:31 < pomke_> In the 'old way' of server-side processing everything we'd need many more servers
22:32 < pomke_> jaCen915: hope that helps explain the difference anyway 
22:33 < shubhamdell> damn no help?
22:34 <@xyxne> shubhamdell, usually if you ask repeatedly 'any help?' your chances of getting help diminish severely
22:34 < kad_> shubhamdell, you can't do it directly between clients, you need to use an intermediate server
22:34 < jaCen915> pomke_: so you're not using template files like jade or ejs
22:34 < jaCen915> (related to express I mean)
22:34 < pomke_> nope not at all
22:34 <@xyxne> shubhamdell, you've also only been here for 5 minutes
22:34 < shubhamdell> all good man
22:34 <@xyxne> so chill
22:34 < pomke_> jaCen915: our express servers simply provide APIs 
22:34 <@xyxne> not a man but I'm glad it's good
22:35 <@xyxne> shubhamdell, I did something similar for a demo
22:35 < jaCen915> pomke_: that helps a lot
22:35 <@xyxne> only I'm assuming you're talking about socket.io
22:35 < shubhamdell> oh sweet how did u do that? 
22:35 < shubhamdell> yup yup
22:35 < pomke_> jaCen915: good luck ! :)
22:35 <@xyxne> I used sockjs & shoe
22:36 < shubhamdell> socket.io ?
22:36 < jaCen915> pomke_: thanks, I'm copying/pasting all this to a gist for myself haha
22:36 < shubhamdell> no idea about shoe 
22:36 <@xyxne> shubhamdell, https://github.com/nexxy/nodepdx2013
22:36 <@xyxne> it's more 'node idiomatic' websocks
22:36 <@xyxne> that are just streams
22:36 < shubhamdell> sweet what exactly does ur app do?
22:36 <@xyxne> it just plays music and lets people push buttons on their browser to trigger a fog machine & a laser
22:37 < kad_> shubhamdell, if you are familiar with Javascript but don't want to deal with sockets use my library http://eureca.io/ it wraps websockets with transparent RPC calls
22:37 <@xyxne> but it uses the same mechanism you describe for syncing button pushes & other data
22:37 <@xyxne> to all connected browsers
22:37 < shubhamdell> u think I could use your code and modify it for my own use?
22:37 <@xyxne> sure
22:38 < kad_> shubhamdell, you can find a simple tchat example here http://eureca.io/tchat-tutorial.html   ... usually if you can do a tchat app with websockets you cand do the rest
22:41 <@MI6> joyent/node: Ben Noordhuis master * 3b0a759 : test: fix up weakref.cc after v8 api change (+3 more commits) - http://git.io/B4ngjw
22:58 < d4rklit3> hi, has anyone ever used the aws-sdk for node.js ?
22:59 < d4rklit3> I am trying to figure out how to use these multipart upload methods
22:59 < d4rklit3> for example, http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3_20060301.html#completeMultipartUpload-property   ,  this method creates a multipartupload but I don't know how to make it track particular files being uploaded
23:08 <@isaacbw> no one in the world has ever used it
23:12 < harbhub> which linux distro is the best for nodejs?
23:13 < nightfly> any?
23:13 < nightfly> or try smartOS if you want the /best/ for nodejs
23:15 < harbhub> ok
23:15 < harbhub> but i'm testing linode.com, so it has to be linux
23:15 < harbhub> and they don't have SmartOS appartently
23:19 < ningu> btw in case anyone is interested, I've been developing some puppet modules for setting up SmartOS boxen
23:20 < ian_> is there an eta on v0.10.11?
23:21 < ningu> ian_: it's generally only been a week or two between releases
23:21 < jaha> anyone using node with raspberry pi and can suggest a GPIO lib?
23:30 < smus> i'm writing a node server to setup a proxy connection between two connected websocket clients, effectively establishing a connection between them. seems like a common use case, so can someone please point me in the right direction?
23:30 < d4rklit3> isaacbw, one person is using it now (at least)
23:34 < ningu> hmm... I wonder if any programming language has variable inderpolation
23:34 < ningu> speak of the devil
23:34 < ningu> <ningu> hmm... I wonder if any programming language has variable inderpolation
23:34 < chilts> ningu: interpolation, as in strings?
23:34 < ningu> no, inderpolation
23:34 < chilts> huh?
23:34 < ningu> inserting derp into your variables
23:34 < chilts> heh
23:35 < ningu> chilts: you still coming to SF btw?
23:35 < chilts> yeah, I need to apologise about that ... was there last week but it was crazy. Didn't shout you. :/
23:35 <@xyxne> ningu, yes?
23:35 < ningu> oh, no worries
23:35 < ningu> I've been busy too
23:36 < chilts> am just about getting over it and catching up with my tail
23:36 < chilts> :)
23:36 < ningu> xyxne: eh?
23:36 <@xyxne> > speak of the devil
23:37 < ningu> xyxne: merpnderp arrived right when I mentioned derp
23:37 < ningu> but he/she doesn't seem to have noticed
23:43 < stackpointer_> Does anyone use Xcode for developing the node.js core source code?
23:43 < stackpointer_> Since that's done in C/C++, that should be a good tool, I think
23:50 < elliotf> I'm having an issue with npm not allowing me to update a module after shrinkwrapping..
23:50 < elliotf> the doc's say that I can 'npm install <submodule>' to update it.
23:50 < elliotf> it keeps the existing version..
23:50 < elliotf> npm version 1.2.25
23:50 < elliotf> node version 0.10.10
23:51 <@xyxne> what happens when you `nom install <module>@<version-you-want>` ?
23:52 < elliotf> xyxne: I'll try
23:53 < elliotf> xyxne: it installs it, it seems...  that's kind of a drag.
23:53 < ningu> ah the classic npm nom typo
23:53 < elliotf> xyxne: the docs do not mention the need of a version number; thank you for your help.
23:53 < elliotf> nom nom nom npm
23:53 <@xyxne> elliotf, yeah I know there is a bit of unexpected behaviour surrounding shrinkwrap
23:54 <@xyxne> ningu, I have it aliased
23:54 < elliotf> hehe
23:54 <@xyxne> and haven't typed it any other way for months
23:54 < elliotf> xyxne: thanks again
23:54 <@xyxne> elliotf, quite welcome ^-^
--- Log closed Wed Jun 12 00:00:31 2013
