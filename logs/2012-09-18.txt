--- Log opened Tue Sep 18 00:00:35 2012
00:01 < spion_> tnorris, i think it caused an explosion of objects of all kinds (which should actually be functions). so a contributor, maybe. yes, I think so.
00:01 < tnorris> interesting.
00:02 < spion_> builders, factories and managers everywhere
00:02 < ang3lfir3> tnorris, guessing someone had a memory leak
00:02 < ang3lfir3> and that is pretty typical of "meh" java code
00:02 < ang3lfir3> the same crap happens with anything built in any language
00:03 < spion_> and as that complexity grows, its easier to produce dangling references to some object in some part of the code.
00:03 < tnorris> ang3lfir3: lol, learned that yesterday when I forgot to pause a node Stream and filled up 8 GB of memory and swap, crashing my system.
00:04 < spion_> ...and forgotten unclosed I/O objects (handles etc)
00:04 < ang3lfir3> java aka "the kingdom of nouns"
00:05 < ang3lfir3> tnorris, d'oh .....
00:06 < tnorris> yeah. didn't realize that Streams live outside of the js vm heap.
00:06 < tnorris> I thought if it filled up then it would just quit the node process.
00:07 < spion_> ang3lfir3, yeah as Yegge puts it. but more than that, the coupling of functions and data encourages you to save references to everything everywhere :)
00:08 < LouisT> tnorris: > db.conquers_en1.find() \n { "_id" : ObjectId("5057ba5b6bab1185bc6bc542"), "id" : "2803", "new" : [ "3071" ], "old" : [ "3050" ], "time" : [ "1150774485" ] } <-- it seems to insert a single object, but the callback never fires so i can't resume the line reader.. i have no idea what's going on http://thepb.in/private/5057bb5a88b085410b000009
00:10 < tnorris> LouisT: what's the node.js lib you're using?
00:10 < ang3lfir3> spion_, at least in C# code can be data :) 
00:10 < tnorris> I assume the official one
00:10 < tnorris> nm, found it.
00:11 < LouisT> yes the official
00:12 < tnorris> LouisT: for kicks, can you place the debug msg before .resume() and see if that logs?
00:12 < Tobsn> is anyone using 3rd-Eden/node-memcached ?
00:12 < Tobsn> i cant seem to find if the number for set is ms or sec
00:12 < LouisT> still nothing
00:13 < LouisT> Parsing ./data/conquers/en1...
00:13 < LouisT> { '$set': { id: '2803' },  '$addToSet': { time: '1150774485', new: '3071', old: '3050' } }
00:13 < LouisT> that's all i get, then it just stops because of the pause
00:13 < Tobsn> maybe you want to look into a step lib
00:14 < LouisT> Tobsn: what?
00:14 < tnorris> LouisT: is the third variable passed to the .collection() callback the collection object? (line 9)
00:15 < Tobsn> depeds on which lib youre using
00:15 < Tobsn> im using mongoq
00:15 < LouisT> tnorris: yes
00:15 < Tobsn> LouisT, https://github.com/creationix/step
00:16 < Tobsn> you might just want to use mongoq
00:16 < Tobsn> dont need to set up connection()
00:17 < tnorris> LouisT: can't see any problems immediately. have to jam, but i'll be back on in a few hours.
00:17 < LouisT> tnorris: ok, thanks for the help
00:17 < LouisT> Tobsn: i don't see how that would improve anything
00:18 < tnorris> np
00:18 < Tobsn> well then go figure it out yourself
00:18 < LouisT> i've been trying
00:26 < gowie> Anybody around who uses guard so they can write haml, coffescript, and sass?
00:35 < gluxon> Anyone know how to flush zlib output?
00:35 < gluxon> As in, use Z_SYNC_FLUSH when deflating? -> http://nodejs.org/api/zlib.html#zlib_options
00:49 < luckysmack> anyone in here use app.js?
00:58 < rashidul> Hi Everyone. This is first time I'm here
00:58 < cjbirk> hi
00:58 < mansoor-s> rashidul, Hello
00:58 <@Nexxy> rashidul, congratulations :)
00:58 < cjbirk> I'm trying to learn javascript, and i'm starting off with an echo server via node.js. My goal  is to try and get the server to take the text I type in, and instead of echoing my text  directly, echo the text in hex format. 
00:59 < rashidul> Thanks 
00:59 < rashidul> very much
00:59 < rashidul> It would be greatly appreciated if anyone let me know which package should i use for MongoDB with node.js
00:59 <@Nexxy> rashidul, although I don't use it myself, mongoose seems to be popu lar
00:59 < luckysmack> mongoose is popular and should work well
00:59 < cjbirk> My question is: how can i use buffer class to do this
01:00 < rashidul> great @Nexxy @mansoor @luckysmack @all a million thanks
01:01 < LouisT> rashidul: if you use it, let me know how it turns out.. i'm currently having issues with the official package =/
01:02 < rashidul> @louis: official package of Mongoose?
01:02 < LouisT> no, mongodb
01:02 < LouisT> node-mongodb-native
01:03 < cjbirk> no one eh
01:07 < LouisT> cjbirk: new Buffer(string).toString('hex');
01:11 < rashidul> Mongoose MongoDB ODM  npm install mongoose 208 downloads in the last day 11122 downloads in the last week
01:11 < rashidul> mongodb  A node.js driver for MongoDB  npm install mongodb 423 downloads in the last day 23696 downloads in the last week
01:11 < rashidul> I c mongodb driver downloaded more than Mongoose, so I'm confused!
01:12 < rashidul> so I'm quite confused about which one should i choose
01:12 < rashidul> any suggestion.. sorry for disturbing :(
01:13 < LouisT> rashidul: mongodb-native is ok, but as i said i've been having issues with it, so i'm going to try mongoose, native looks easier to use but i'm sure i'm just screwing something up with it..
01:14 < wlaurance> Anyone want to try a new Android app I am working on? It is a node.js documentation viewer and npm package searcher
01:14 < rashidul> LouisT ok Thanks I will go with Mongoose then will try to share experience here :)
01:15 < garthk> Hoping substack does the backpressure section next. I have a simple filter that I'd like to be a stream. It needs to handle back pressure from downstream objects, and apply it upstream so it doesn't have to maintain a lot of state. I haven't yet found simple example code.
01:15 < rashidul> I c mongoose is depends on Mongodb-native
01:16 < rashidul> looks like monggose is bigger
01:17 < rashidul> ok. Bye for now. c u soon
01:30 < brianc> TehShrike|Work: you there?
01:31 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
01:44 < jnylen_> hi all. Best practices for node.js projects question: should I put the node_modules folder under version control?
01:47 < jnylen_> testing
01:48 < jjjjjohnny> can somebody explain this pls Math.sin(1 * Math,PI) vs Math.sin(1 * 3.141)
01:48 < jjjjjohnny> sry comma
01:50 < chilts> jnylen_: there are different thoughts. Many people say yes if you've got a production environment you want to rely on.
01:50 < chilts> Others say no, but it'll depend on your use-case.
01:51 < jnylen_> chilts: I'm just writing a pretty simple set of related scripts.  However, I would like to keep track of which versions I have installed.
01:51 < chilts> you could always fix the versions in your package.json
01:51 < jnylen_> should I give my project a package.json file and let npm manage the packages?
01:51 < chilts> I think so
01:51 < chilts> if it's private, mark is as such in your package.json too ("private":true)
01:51 < jnylen_> I think I like that approach better than putting all the irrelevant stuff in node_modules into my repository
01:52 < jnylen_> I need to read about package.json more
01:52 < chilts> yep, sounds good
01:52 < jnylen_> but what if I want to make some changes to a 3rd party package?
01:52 < jnylen_> then I would move it out of node_modules somehow?
01:53 < astropirate> Are there an arguments against eventual consistency between different nodes running my application?  My application has an admin panel. that will modify the database. It would be stupid to read the db for every request for the application state. Would it be alright to simply sync the state witht what is in the DB every N milliseconds?
01:54 < jnylen_> astropirate: have you taken a look at how much performance would actually suffer?  I think you'd want to balance that with how bad it would be if you lost data
01:54 < chilts> astropirate: it totally depends on your application. If it's a blog, who cares if it's a few seconds out of date. If it's your bank balance then that's a different story.
01:54 < thejbf> astropirate, if you are going to have a single node instance, that's ok
01:54 < thejbf> but if you want to scale it out horizontally, it's going to be a problem
01:54 < jnylen_> conflict resolution is hard
01:54 < timeturner> the scale goes from blog post comment to bank account balance
01:55 < chilts> jnylen_: if you have them checked in, then you can just change locally, but it would be wise to send the patch upstream too :)
01:55 < chilts> and then update when the new package is released :)
01:55 < astropirate> I am building a generic blog/cms-ish application right now. I want this to be the basis of all of my future node.js projects
01:55 < chilts> in which case, just cache locally and update every so often
01:56 < astropirate> I'm testing out how large applications would work in node.js
01:56 < chilts> or use a cache in memcache, or redis which all instances can talk to
01:56 < thejbf> use redid or memcache + 1
01:56 < chilts> there are _so_ many ways to do this, it'll be hard to discuss every one of them here :)
01:56 < thejbf> s/redid/redis
01:56 < astropirate> right
01:56 < astropirate> so general sentiment is to update the state every so often?
01:56 < astropirate> as apposed to a complex event notification
01:57 < thejbf> i made a similar choice, written a db syncer
01:57 < chilts> yep, blog posts/comments, pages, etc, don't matter too much
01:57 < chilts> if they're out of date
01:57 < thejbf> but when we want to grow it by running multiple node instances, it became a problem
01:57 < thejbf> we had to shard data
01:57 < thejbf> across different instances
01:58 < astropirate> sorry brb life calls
01:58 < chilts> but ... this is life! :)
01:58 < astropirate> thejbf, will you be on later?
01:58 < astropirate> i want to know more about what you guys did
01:58 < thejbf> I'm about to leave the room actually :D
01:58 < astropirate> chiel, hehe how silly of me to think otherwise
01:58 < chilts> ooh, brianc - if you're the brianc who wrote node-pg ... then Thank You :)
01:58 < astropirate> darn
01:58 < astropirate> i'll catch you next time then
01:58 < astropirate> tnx
01:58 < thejbf> ok
01:58 < thejbf> see you
02:00 < brianc> chilts: you're welcome!
02:00 < chilts> :)
02:00 < brianc> chilts: if you ever have questions don't heistate to open an issue, send an email, or if you need more help you can gchat me if i'm not here
02:01 < brianc> :)
02:01 < chilts> am still figuring out transactions, but I think pauseDrain and resumeDrain :)
02:01 < chilts> is on the right lines
02:01 < chilts> oopse, didn't finish that sentence
02:01 < chilts> yeah, no worries ... thanks :)
02:02 < brianc> yeah that's a weird byproduct of auto-dispatching queries from the queue
02:02 < brianc> works great if you don't use the pool
02:02 < brianc> I'm still kinda working on a new pool API in my head
02:02 < chilts> right, each client has a queue of sql aye?
02:02 < chilts> yeah, I just saw this : https://github.com/brianc/node-postgres/issues/154
02:02 < timeturner> how do you fetch the devDependencies with npm?
02:02 < jnylen_> I want to read the "node.js is cancer" post that used to live here: http://teddziuba.com/2011/10/node-js-is-cancer.html
02:02 < jnylen_> anyone know where?
02:02 < jnylen_> timeturner: npm install -d
02:03 < chilts> I wonder if $client->begin() or $client->commit() or $client->rollback() can do both the SQL _and_ the drain stuff for you?
02:03  * chilts could patch it maybe ?
02:03 < timeturner> jnylen_: thanks
02:12 < timeturner> someone needs to look at grep's source code and implement it into a full text search engine
02:15 < ericelliott> testling has a hell of a learning curve.
02:17 < timeturner> isn't there a lib for doing browser tests?
02:17 < timeturner> like zombie
02:17 < ericelliott> timeturner: testling does browser tests in lots of browsers at the same time
02:18 < gabrieluk> i think i saw one... tobi?
02:18 < ericelliott> well, at the same time is maybe less than accurate, but in one command. =)
02:18 < timeturner> tobi is another one
02:18 < timeturner> but yeah testling tests in all browsers
02:18 < timeturner> forgot about that part
02:19 < ericelliott> there are about a dozen popular libs to do testing locally.. lots of test runners, phantomjs, etc..
02:19 < gabrieluk> https://github.com/LearnBoost/tobi
02:19 < ericelliott> qunit, mocha (with several styles), jasmine, etc etc...
02:20 < gabrieluk> yup,is full of options
02:21 < ericelliott> tobi looks like it's trying to compete with cucumber.js more closely than testling or qunit.
02:21 < ericelliott> looks more integration-test-y
02:21 < timeturner> how does testling plug into all the different browsers?
02:21 < timeturner> that's got to be some magic api
02:22 < ericelliott> timeturner: it hosts the real browsers in the cloud
02:22 < ericelliott> and it is a tiny bit magical
02:22 < ericelliott> in a hacker sorta way
02:22 < timeturner> but how does it test it programatically
02:23 < ericelliott> it bundles up all your test dependencies, sends them to the page, and loads them up with a bunch of os glue and duct-tape
02:24 < ericelliott> it's built on the same framework that browserling runs on
02:24 < ericelliott> check it out.
02:24 < ericelliott> made by them mighty wizard, substack. I think he never sleeps.
02:24  * ericelliott spreads substack rumors
02:26 < ericelliott> warning: since the browsers run on actual windows boxes, the browserling / testling services can be... iffy.
02:26 < ericelliott> sometimes they need a stern talking to.
02:27 < ericelliott> because tobi relies on should, don't expect all your assertions to run cross browser.
02:27 < ericelliott> particularly these: checkbox.should.be.enabled;
02:27 < ericelliott>   checkbox.should.be.disabled;
02:27 < ericelliott>   option.should.be.selected;
02:30 < ericelliott> I'm going to rant about relying on getters and setters for side-effects on my blog some time soon. IMO, terrible practice.
02:32 < mankins> i'm trying to install zmq-3.0, and getting zmq-3.0/binding.node: mach-o, but wrong architecture on mac 10.8. Any idea what that might be?
03:55 < gerden> hey
03:56 < SomeoneWeird> ello
03:57 < TehShrike> butts
03:58 < SomeoneWeird> no u
04:15 < cody--> anyone around?
04:18 < TehShrike> Hello cody--!  Welcome to an internet chat room.
04:18 < TehShrike> In internet chat rooms, good etiquette is to ask your question and hang around for a while to see if anybody answers
04:19 < TehShrike> Asking if anyone is around is considered bad form.
04:19 < TehShrike> I hope you enjoy your stay here in an internet chat room!
04:19 < SomeoneWeird> lol.
04:19 <@Nexxy> ur so meen
04:19 <@Nexxy> ._.
04:19 < TehShrike> I've been on the internet too long 8-|
04:20 <@Nexxy> pretentious old man
04:20 < TehShrike> Hey, I was polite :-P
04:20 <@Nexxy> s/polite/facetious/
04:20 < TehShrike> Why can't I be both?
04:20 < chapel> cody is no longer here anyways
04:20 <@Nexxy> *because* of TehShrike !
04:20 < TehShrike> dawww.
04:20 <@Nexxy> http://www.youtube.com/watch?v=76p_ncbffCE
04:21 < TehShrike> lol
04:21 < TehShrike> I was helpful!  Don't boo me!
04:21 < TehShrike> It was just helpfulness with a bit of snark, that's all!
04:21 <@Nexxy> snarkfulness?
04:22 < TehShrike> Something like that
04:23 < nonuby> is the tls stuff in node compatible with ssh, i.e. could I pull an ssh server on top of tls or is ssh's tls incompatible?
04:23 < TehShrike> I should probably just have a macro for responding to that question :-P no matter how many chat rooms I populate, it seems I see that question at least once or twice a day
04:24 < TehShrike> BUT ANYWAY
04:24 < TehShrike> Time to write something, or something.
04:24 < nonuby> TehShrike, you referring to me?
04:24 < TehShrike> Huh? Oh my no.
04:24 < TehShrike> That question sounds quite reasonable, and I haven't heard it before, and I don't know the answer :-x
04:25 < TehShrike> I was referring to the previous conversation.
04:25 < nonuby> ok, np, missed the context
04:27 < TehShrike> I'm not sure what sort of person I would have to be in order to see that question daily in every chat room that I hang out in
04:27 < nonuby>  lol
04:27 < TehShrike> A cooler person than I am now maybe?
04:27 < TehShrike> Who can say.
04:36 < TehShrike> oi, who was it who made that cssdeck thing?
04:36 < TehShrike> It seems to be going crazy
04:38 < t4nk985> d
04:38 < t4nk985> adf
04:38 < t4nk985> test
04:38 < TehShrike> >_<
04:38 < TehShrike> Welcome... to the internet? :-x
04:38 < t4nk985> irc
04:39 < t4nk985> *---*
04:40 < astropirate> o_O
04:40 < TehShrike> 0_O
04:40 < t4nk985> hello all
04:40 < t4nk985> how are you to day
04:40 < TehShrike> Fair to middling
04:41 < t4nk985> what sport do you like
04:41 < TehShrike> Table tennis.
04:41 < t4nk985> football
04:42 <@Nexxy> foosball is the devil
04:42 < t4nk985> devil is man U
04:42 <@Nexxy> http://cdn.memegenerator.net/instances/400x/24212634.jpg
04:43 < TehShrike> Is foosball mockery some sort of internet meme I am unfamiliar with?
04:43 <@Nexxy> lol
04:48 < TehShrike> Seriously though.  Table tennis is the shit.
04:48 < TehShrike> It's you versus your opponent - whose mastery of physics will prove victorious?
04:50 < TehShrike> Just to make it interesting, have a piece of wood with some rubber glued to it - now use it to bend this tiny plastic ball to your whims, proving your prowess at imparting your will onto the physical universe!
04:51 <@Nexxy> TehShrike, are you on a new drug or something?
04:51 < zivester> how do you guys choose a templating language? either with node or frontend?  using express and there are so many, dont know where to start
04:51 < TehShrike> It's called "TehShrike's life to date"
04:51 < TehShrike> It's pretty trippy
04:51 <@Nexxy> zivester, ejs is good
04:52 < mmalecki> Nexxy: NO OFFICER
04:52 < zivester> ejs reminds me of php templates X-/
04:53 < TehShrike> I haven't used a JS templating language yet, but I keep wanting to try Nova
04:53 <@Nexxy> mmalecki, WHAT DID YOU JUST SAY TO ME?
04:53 < TehShrike> STOP YEEEEEELLING
04:53 < zivester> I'm starting with this list: https://github.com/visionmedia/consolidate.js   hopefully this is an adequate starting point
04:53 <@Nexxy> lol
04:54 <@Nexxy> so consolidate is just to make "non-express compliant" templating engines... compliant
04:54 < zivester> and are there some of those that just do basic rending, while others allow inclusion of other files?
04:54 <@Nexxy> usually you will want to pick from something like jade, mustache or ejs
04:54 < zivester> handlebars... heard of that one a bunch too
04:54 < TehShrike> I'm also waiting for getify to finish grips
04:55 < TehShrike> He keeps saying really interesting things about it
04:55 < zivester> o jade... yah i dont like engines that extract that much from the html... but for 1 or 2 man projects.. i guess it's not so bad
04:55 < zivester> if it really cleans things up that much
04:57 < zivester> do any of those allow local file system rendering of complex templates? i.e. headers/footers/nav being pulled in from other files?
04:57 < zivester> similar to django (whatever its called) or perls Template Toolkit ?
04:58 < gildean> zivester: jade for example
04:58 <@Nexxy> zivester, ejs does that
04:59 < gildean> tbh almost all of them have somekind of partials or blocks or something
05:00 < zivester> kool... its crazy how fast these projects move... handlebars is now an offshoot of mustache
05:00 < zivester> and theres like hundreds of choices
05:00  * zivester does come from Perl and only one language
05:04 < luite> is it possible to let node output for which things it knows type information, instead of just how many?
05:05 < ryah2> testies
05:05 < TehShrike> Have you heard of that new brand of frozen rocky mountain oysters?
05:05 < TehShrike> Testsicles?
05:06 < TehShrike> luite: output what, to where, and how many of what?
05:08 < luite> TehShrike: if you use --trace-opt, it gives messages like this: [marking walkStack 0x14ce38ddd360 for recompilation, reason: hot and stable, ICs with typeinfo: 25/50 (50%)]
05:08 < luite> so it has type info for 50% of ICs (whatever those are?), but doesn't indicate what exactly it knows and what not
05:09 < TehShrike> ah, I'm not familiar with trace-opt
05:27 < garthk> Ok, back to the streams…
05:28 < Nuck> Is it possible to tell if a file is being required or launched by node?
05:29 < Nuck> Actually nevermind
05:29 < Nuck> I don't need that
05:39 < mscdex> don't cross the streams!
05:40 < Nuck> mscdex: Except when proxying/piping
05:41 < astropirate> HAHAH  oohhh javascript.. you make me laugh sometimes..
05:41 < astropirate> http://pastie.org/4744891
05:43 < astropirate> wacky combination of functional and procedural
05:53 < timeturner> any idea why node or express may be holding up an ajax request?
05:54 < timeturner> after like 30 consecutive ajax requests within 2ms of each other node/express kind of freezes and then replies to all the requests
06:31 < garthk> Building node-expat on Windows is still a colossal pain in the arse. 
06:44 < garthk> Can anyone suggest a good alternative streaming XML parser for Node.js that'll work under Windows?
06:44 < garthk> FFS. XmlStream also needs node-expat. Fail.
06:45 < mmalecki> garthk: isaacs wrote one
06:45 < mmalecki> I forgot the name tho
06:45 < garthk> https://github.com/robrighter/node-xml API is… weird.
06:46 < garthk> https://github.com/isaacs/sax-js “A stepping stone to a streaming HTML parser.”
06:47 < garthk> It weirds me out to see people require you to set, say, parser.onerror rather than call parser.on('error', …)
06:54 < kuja> garthk: Are you referring to sax-js? You can use sax.SAXStream is that's more comfortable for you.
06:54 < kuja> I use it for the .on() event listening and because I pipe HTTP responses to it
06:55 < kuja> var parser = sax.createStream(strict, opts); parser.on('opentag', ...)
06:56 < kuja> Also nifty for doing something like request('http://foo/bar.xml').pipe(parser)
06:57 < mmalecki> garthk: performance might be a concern here
06:57 < mmalecki> (callbacks vs ee)
06:58 < garthk> kuja: ok, might try that… I had more confidence in a wrapper around a very well known library, but if I can't get node-expat to build properly on Windows it's a bloody moot point.
06:58 < garthk> mmalecki: guess so.
06:59 < CIA-118> node: tasogarepg master * r21c4b9a / (3 files in 3 dirs): debugger: fix --debug-brk - http://git.io/-67ubw
06:59 < CIA-118> node: Fedor Indutny master * r3301c90 / AUTHORS : authors: add @tasogarepg to AUTHORS - http://git.io/Pp4RPQ
06:59 < CIA-118> node: Fedor Indutny master * r63ff449 / (6 files in 3 dirs): crypto: bring module into modern age - http://git.io/Tnozkw
07:01 < kuja> garthk: I've been using sax-js and it hasn't given my any surprises yet, and it's written in JS too so no worry about getting it to work in Windows ;)
07:03 < kuja> It's well tested and written by isaacs, what more could you ask for? :)
07:05 < garthk> kuja: a little extra performance; it's going to be wading through terabytes of XML per hour, so the sax approach isn't ideal. Sigh.
07:09 < dev_vietnam> i use datagram to streaming voice data between device
07:09 < dev_vietnam> and the question is how to send received data to all connected device
07:10 < kuja> garthk: Ah, yeah in that case I understand your pain :(
07:10 < kuja> A native mod would certainly be ideal
07:11 < dev_vietnam> any can help me?
07:11 < dev_vietnam> anyone help me
07:12 < dev_vietnam> that is pain with me. :(
07:14 < dev_vietnam> i use datagram to streaming voice data between device. And the question is how to send received data to all connected device
07:14 < dev_vietnam> i use datagram to streaming voice data between device. And the question is how to send received data to all connected device
07:14 < dev_vietnam> i use datagram to streaming voice data between device. And the question is how to send received data to all connected device
07:14 < dev_vietnam> i use datagram to streaming voice data between device. And the question is how to send received data to all connected device
07:14 < dev_vietnam> i use datagram to streaming voice data between device. And the question is how to send received data to all connected device
07:14 < dev_vietnam> i use datagram to streaming voice data between device. And the question is how to send received data to all connected device
07:14 < dev_vietnam> i use datagram to streaming voice data between device. And the question is how to send received data to all connected device
07:14 < dev_vietnam> i use datagram to streaming voice data between device. And the question is how to send received data to all connected device
07:14 < radmiraal> combataircraft: dev_vietnam
07:14 < radmiraal> eehrm, wanted to say "come on dev_vietnam" :)
07:15 < nkuttler> dev_vietnam: spamming is a good way to get ignored or kicked
07:15 < dev_vietnam>  i am sorry
07:21 < linhlc> +i
07:36 < [AD]Turbo> hi there
07:37 <@Nexxy> that awkward moment when you realize your child processes are being killed because the timeout option is milliseconds, not seconds.
07:37 < Glenjamin> does anyone know of an AMD loader for nodejs? My use-case is loading in modules written for the client-side, mostly to unit test them
07:38 < Glenjamin> I've currently rolled my own, which i'm thinking of spinning off into an npm module -  but i wanted to make sure i wasn't re-inventing the wheel
07:52 < kalle> hi all, i can't seem to install stuff using npm. npm was installed using macports. here is my npm --verbose -g install and npm -g ls  http://pastebin.ca/2205128
07:52 < kalle> what am i doing wrong?
07:54 < NodeX> using a mac lol
07:54 < tnlogy> Hi. Can you create a list of attributes for a dom-element conveniently in jade? like creating div(data-foo="3", data-bar="4") from {foo:3, bar:4}
08:01 < Nasga> kalle: what is the error when you try to install a package ?
08:05 < Trindaz> an array of 500 items works great in a sorting function I wrote in a test script (low mem use, takes less than a second). The exact same data in my app causes the app to quickly chew up about 1.3Gb of mem and then die with an out of memory issue. What's going on?
08:07 < kalle> Nexxy: all i see is in my pastebin url above
08:08 < kalle> Nasga: wrong nick in reply above...
08:10 < thanpolas> trindaz wow
08:10 < Trindaz> thanpolas any ideas?
08:11 < thanpolas> too liitle data... maybe paste some code?
08:12 < Trindaz> copy of the sorting function(s), no data though http://pastebin.com/nRzwrHMk
08:13 < thanpolas> (optimization tip, put .length out of the for statement, costs a scan on each loop)
08:14 < thanpolas> i do for (var i, l = ar.length; i < l ; i++)
08:14 < thanpolas> var i = 0... you get the picture
08:14 < thanpolas> maybe that's your issue cause i count 5 lengths in for loops
08:15 < thanpolas> that could potentially be dissastrous for many items
08:15 < BennyLava> lol.
08:17 < Trindaz> i think i've found it
08:18 < Trindaz> there's something wrong in my sorting code. the .tags list gets way too long for most items, there's something wrong in my sorting code
08:19 < samg_> I am writing my first node application (a long-polling chat room of course) and I have a concern about concurrency. I have connected a Readable Stream to a Writable Stream using pipe, but I think that shared state could mean some of my Writable Streams will only get partial content.
08:20 < thanpolas> trindaz why not use the native sorting methods?
08:20 < samg_> The code is here: https://gist.github.com/3741978  The race is between the pipe established on line 29 and the destructive modification to listeners on line 24. Is a race there possible?
08:24 < Trindaz> well, it's not just sorting. it's deduping and search using arbitrarily long "addresses" of object keys. e.g. {a:{b:{c:1}}} would need lookupKeyChain = ["a","b","c"]
08:26 < Trindaz> OK
08:26 < Trindaz> THIS IS CRAZY
08:27 <@Nexxy> HERE'S MY NUMBER
08:27 < Trindaz> calling this fixed it: combineProducts(JSON.parse(JSON.stringify(productList)),"name") instead of combineProducts(productList))
08:27 < samg_> so callback maybe?
08:27 < Trindaz> lmao!
08:27 < Trindaz> awesome
08:27 < Trindaz> i was too slow
08:28 < Trindaz> why the heck does deserializing my serialized array stop a huge memory leak?! it's the *exact* same data :O
08:28 < Trindaz> this is nuts. could it be because productList is created with dozens of productList = productList.concat(someOtherArray) call?
08:28 < samg_> because you aren't holding onto a reference of productList anymore
08:29 < samg_> </guess>
08:29 < Trindaz> samg - that makes sense. there's something "dirty" about productList that gets cleaned in serializing process
08:29 < samg_> combineProducts doesn't keep a reference?
08:30 < Trindaz> not sure what you mean
08:30 < samg_> I'm just a beginner, but I assume there is some garbage collector that starts at some root object and does some kind of mark and sweep. Is that true?
08:31 < Trindaz> idk what mark and sweep are
08:31 < samg_> Well, if you keep a reference to some value, it can't be collected. If you create a lot of values, and hold a reference to all of them, they can't be collected.
08:32 < samg_> Seems like productList references some (many?) values, and those references don't survive the serialize-deserialize phase.
08:32 < samg_> I could be so, so wrong here.
08:32 < Trindaz> that's not it. i'd get undefined errors if that were the case.
08:33 < Trindaz> and no reason missing data would cause huge mem leak, but i've never seen gc fail so anything could happen. i know nothing about gc in js
08:34 < samg_> var x = []; for (var i = 0; i < 100000; i++) { x.push(new LargeObject()) }
08:35 < samg_> now I have 1000000 large objects in memory, and they can't be collected because I am holding a reference to them.
08:35 < samg_> if I delete x, then I'm not holding a reference, and GC can reclaim that memory
08:35 < Trindaz> that's not the problem. it's only 347 items to be precise, easily console.log'able. no mem leaks happen until sorting time.
08:35 < samg_> Maybe it doesn't work that way in node/v8, though.
08:36 < Trindaz> i think you're going down the wrong path samg_
08:36 < samg_> fair 'nuff
08:37 < dhpe> samg_, are you aware whether any major js engine's GC is able to handle cycles?
08:37 < samg_> I don't know, but I do know that it's a nightmare if one can't (AS3 *cough*) and you use E4X, which loves cyclic object graphs.
09:09 < aib_233> hi. ruby output of Digest::SHA1.digest('test') gives me a completely different output than crypto.createHash('sha1').update('test').digest(). Does anyone have experience with interoperable sha1 hashes / encodings of hashes? What I need at the end is the node.js equivalent of Base64::encode64(Digest::SHA1.digest(content)). content is the md5 of multipart request body + some other request parameters
09:11 < aib_233> or equivalent of base64_encode( sha1($string_to_sign, true) ) … any hints how to get a raw sha1 hash in node.js?
09:16 <@Nexxy> aib_233, are you sure you aren't looking for crypto.createHmac?
09:19 < Sly> aib_233, works fine for me.
09:19 < Sly> > require('crypto').createHash('sha1').update('test').digest('hex')
09:19 < Sly> 'a94a8fe5ccb19ba61c4c0873d391e987982fbbd3'
09:19 < Sly> $ openssl sha1
09:19 < Sly> test(stdin)= a94a8fe5ccb19ba61c4c0873d391e987982fbbd3
09:24 < Sly> aib_233, you there?
09:24 < phrearch> morning
09:24 < Sly> Good morning, phrearch.
09:24 < aib_233> Sly: yes, sorry … I'm preparing something on paste bin to show my issue
09:24 < phrearch> hi Sly
09:25 < Sly> aib_233, I don't see any issue. Read what I posted above.
09:27 < ag4ve> can someone help me with a mongoose issue? i haven't gotten a response from the list in a few days ... https://groups.google.com/forum/#!topic/mongoose-orm/6kaOVwbEHSs
09:29 < aib_233> Sly: http://pastebin.com/j3RRLcjL
09:29 < Sly> aib_233, exactly. There is no issue. You're using crypto improperly.
09:30 < Sly> When you call `crypto.createHash('sha1').update('test').digest()`, you're using the raw output. Then you're passing it into a buffer, and base64'ing the RAW INPUT. Not the hex.
09:30 < Sly> You need to do `crypto.createHash('sha1').update('test').digest('base64')`
09:31 < Sly> `crypto.createHash('sha1').update('test').digest('hex')` will give you the actual hash output that OpenSSL would give you.
09:32 < qballer> hey guys, how do you start contributing to node.js
09:32 < Sly> Node's output matched OpenSSL's output. If Ruby is different, then it's a problem with Ruby. It should match OpenSSL.
09:32 < Sly> qballer, fork it on Github and make pull requests.
09:32 < Sly> http://github.com/joyent/node
09:33 < qballer> does node have a mentor system ? any good startup docs?
09:33 < aib_233> Sly: working java client, working php client, working ruby client, working server api, and all are doing it wrong? … 
09:34 < Sly> aib_233, as I said.. Node's output matched OpenSSL. If others are doing it improperly, that's irrelevant in this channel.
09:35 < Sly> I don't use Ruby, so I can't test it myself.
09:35 < qballer> A bug is possible Sly. 
09:35 < aib_233> Are there any modules that might reflect the inpropper behavior? 
09:36 < aib_233> from php documentation: If the optional raw_output is set to TRUE, then the sha1 digest is instead returned in raw binary format with a length of 20, otherwise the returned value is a 40-character hexadecimal number.
09:37 < Sly> What does PHP have to do with the situation? I've repeated it 3 times that the SHA1 hash that I generated with Node and OpenSSL matched.
09:38 < Sly> > require('crypto').createHash('sha1').update('test').digest('base64')
09:38 < Sly> 'qUqP5cyxm6YcTAhz05Hph5gvu9M='
09:38 < Sly> Which matches what you posted from Ruby.
09:38 < Sly> You should probably try my fix before you continue to argue about it, tbqh.
09:39 < Nuck> OpenSSL is the "reference" — everything should match with that
09:39 < Nuck> :P
09:39 < aib_233> Sly: I'm not at all argueing ;)
09:39 < Sly> ^
09:39 < Sly> Exactly, Nuck.
09:39 < Nuck> I accidentally the chat
09:40 < Sly> Noticed. :P
09:40 < Sly> Welcome back.l
09:40 < Sly> -l
09:41 < aib_233> Sly: My mistake; I'll shut up ;) thanks for the hint
09:59 < xico> Can anyone help me with a question on #Express?
09:59 < xico> About  the methodOverride() middleware
10:05 < phrearch> is there something like pdb for node.js?
10:06 < phrearch> like a console that pops up when setting a breakpoint somewhere in the app
10:07 < Glenjamin> phrearch: node debug <script>
10:08 < phrearch> Glenjamin: aha thanks
10:15 < rounce> phrearch: node-inspector is kinda cool for that as well
10:16 < bluwie> hi, im following the steps to install nodejs on ubuntu and when i did the ./configure i got this error   
10:16 < bluwie>   File "./configure", line 331n    o['default_configuration'] = 'Debug' if options.debug else 'Release'n                                          ^nSyntaxError: invalid syntax
10:17 < Nuck> bluwie: What version of python are you running (python -v, I think)
10:17 < samg_> Hooray. First nodejs app finished: http://long-chat.herokuapp.com/
10:17 < Nuck> Apparently not python -v
10:18 < Nuck> python --version
10:19 < bluwie> python 2.4,4
10:19 < Nuck> Hmmm dunno, usually that stuff is caused by using python 3
10:20  * Nuck bows out
10:21 < bluwie> nuck: thanks maybe its sum i did
10:22 < Nuck> bluwie: Can't you just sudo apt-get install nodejs?
10:22 < klaemo> xico: what about it?
10:24 < xico> klaemo: I'm getting help in the Express channel
10:24 < klaemo> ok
10:24 < xico> I always get a GET request
10:24 < xico> when submitting a form that has <input type="hidden" name="_method" value="delete" />
10:25 < xico> I declared the usage of bodyParser() before methodOverride()
10:25 < xico> but the request still comes as a GET
10:26 < phrearch> rounce: thanks for the tip!
10:30 < rounce> what's the deal with the Node community (and wider js community for that matter) being really flaky with documentation
10:31 < gerconfused> Where is le spion?
10:33 < gerconfused> I just wanted to thank people and now there absent or away, bummer
10:33 < gerconfused> they're
10:36 < wilornel> Hey guys, why is it so that the module socket.io does not have a method 'sockets'? I do var io=require('socket.io'); and its fine
10:36 < wilornel> but then, I do io.sockets('connection', ...); and it doesnt work..
10:56 < xvzf> hi there, is there a node.js function that gets a web page and stores it in a string? wget comes to my mind
10:57 < RLa> see net module or request package
10:58 < RLa> or superagent package
11:03 < xvzf> RLa: thanks
11:15 < phrearch> im trying to run both node-supervisor and node-inspector, but it seems that the debug tcp port isnt closed automagically with supervisor?
11:15 < phrearch> http://stackoverflow.com/questions/6468015/run-node-js-application-in-debug-with-supervisor
11:16 < phrearch> aha, supervisor -- --debug app.js works
11:17 -!- mode/#Node.js [+o bnoordhuis] by ChanServ
11:18 -!- bnoordhuis changed the topic of #Node.js to: node.js - latest stable: http://nodejs.org/dist/v0.8.9/ - latest beta: http://nodejs.org/dist/v0.9.2/
11:18 -!- mode/#Node.js [-o bnoordhuis] by bnoordhuis
11:22 < `3rdEden> wilornel you need to do io = require('socket.io').listen(server)
11:25 < CIA-118> libuv: Ben Noordhuis master * rea8db64 / src/unix/fsevents.c : darwin: fix 'directive in macro' compiler warning - http://git.io/jWq_hw
11:40 < ag4ve> so, i've copied console to app.settings.log in app.js and loop through it, and get what i expect: for (var i in console) { console.log(i + ": " + console.i);
11:40 < ag4ve> }ah crap
11:40 < ag4ve> wrong buffer :(
11:42 < ag4ve> ... get what i expect: log: [object Object] however, when i loop through app.settings.log in another required file (module) in my app, i get: log: undefined - what is going on?
11:43 < haggen> ag4ve: nothing to do with your problem - I think - but do not use `var` inside for()
11:44 < ag4ve> btw, i pasted a loop i did for my sanity, i'm actually doing for (var i in app.settings.log) {console.log(i + ": " + app.settings.log.i; }
11:44 < ag4ve> why?
11:44 < ag4ve> oh, because for doesn't change the scope?
11:45 < haggen> ag4ve: it is considered a bad practice, since it do nothing but slow things down, since you're telling the machine to reinitialize a variable that already is
11:45 < haggen> it does*
11:45 < haggen> ag4ve: and yes, for() does not change scope
11:45 < phrearch> hm, why is it that when i set a breakpoint in node-inspector, it tends to skip it sometimes?
11:46 < haggen> ag4ve: now, I don't actually get the context you're executing this snippet, but it looks like `app.settings.log` does not have a member `i`
11:47 < phrearch> couuld that have to do with supervisor?
11:47 < ag4ve> haggen: member?
11:47 < haggen> ag4ve: I mean property :)
11:49 < ag4ve> i mean, it loops through all the same properties, they're just undefined in the other module.
11:49 < haggen> ag4ve: so you said when you run this piece of code in one of your files it works, but when you move it to another one it doesn't, right ?
11:50 < ag4ve> yes, for instance - require('router').init(app) - inside init, it is undefined
11:50 < haggen> ag4ve: I think it's safe to say that in that other module, things aren't what you expected them to be… I mean, some code has not ran yet, or it's missing some snippet that would populate `app.setings.console` with that missing member
11:51 < haggen> ag4ve: wait a sec
11:51 < haggen> ag4ve: when you wrote "app.console.log.i" didn't you mean "app.console.log[i]" ?
11:52 < ag4ve> well, the end goal is to eventually have winston take the place of 'console' that i'm currently passing into app.settings.log
11:52 < ag4ve> i was thinking that if i put console in there, winston would be a drop in replacement
11:53 < haggen> ag4ve: hm.. I know winston but I am not familiar with its API
11:53 < ag4ve> i'm just using express-winston and hadn't figured out how to winston.add along with that middleware yet and didn't want to bother with it right now
11:54 < ag4ve> haggen: i was just explaining why i was app.settings.log = console and not just calling console directly
11:55 < haggen> ag4ve: oh, by `app.console` I meant `app.settings` sorry
11:56 < ag4ve> oh, now your point makes pirfect esnes.... brb :)
11:57 < haggen> ag4ve: hehe sorry
11:58 < ag4ve> haggen: thanks for fixing me ... it shows up as expected now... wow
11:58 < haggen> ag4ve: you're welcome :)
11:59 < haggen> ag4ve: I assume you know the difference between "a.b" and "a[b]" right ?
11:59 < ag4ve> yeah
11:59 < ag4ve> just sat there and didn't see it
11:59 < ag4ve> now i go smoke and think about what the hell the origional thing i wanted to debug was..
12:00 < haggen> ag4ve: haha I know how's that, I do typos all of the time, but usually I fix them quickly
12:00 < haggen> ag4ve: lol good smoke, but you should stop, it's consuming your brain that you'll need to make awesome apps
12:01 < ag4ve> it just got past me - it looked like it was working and i didn't think to look at it
12:16 < ag4ve> ok, why is this erroring: https://gist.github.com/3742798
12:18 < ag4ve> btw, the error line is 77 - https://gist.github.com/3742798#L77
12:19 < deoxxa> ag4ve: welcome to the fun and exciting world of "this" in javascript
12:19 < deoxxa> ag4ve: basically the "this" inside that callback is different to the "this" outside of it
12:20 < deoxxa> ag4ve: there are a few ways to fix this, the most common being to assign the value of "this" to another variable like "self", then use that inside the callback
12:20 < BennyLava> most common [citation needed]
12:20 < deoxxa> ag4ve: or you can use .bind() on the function (like function() { ... }.bind(this)) to change the scope of it
12:20 < BennyLava> Barely ever see that anymore.
12:20 < ag4ve> ah, right
12:21 < ag4ve> thanks
12:21 < deoxxa> BennyLava: true, but it has its uses - like if you specifically want the function to still have its scope messed with by whatever calls it
12:21 < johnmclear> Hey I published 2 npm modules to an account called johnmyma22 because I'm an idiot, I should have published them to johnyma22
12:21 < johnmclear> how can I move them w/?
12:22 < BennyLava> deoxxa: if you want that to happen, then there is no problem in the first place...
12:22  * BennyLava shrugs
12:22 < deoxxa> BennyLava: a good case is when the callback specifically has .bind() called by whatever it's fed into but you still want access to the current scope in the callback - you probably want to retain that behaviour so assigning "this" to another variable is the way to go
12:23 < BennyLava> Yeah I'd love to see a practical use of that
12:23 < deoxxa> https://github.com/substack/node-binary
12:23 < deoxxa> see the .loop method
12:23 < deoxxa> or .tap
12:40 < johnmclear> ah..  npm owner add johnyma22 did the trick
12:47 < spionL> so... what do you do when you need to scale beyond 1 process (e.g. with learnboost up, perhaps) yet still have clients of various processes which you want communicating with eachother?
12:51 < spionL> redis pub/sub?
12:55 < gerconfused> spionL: are you the spion spion?
12:55 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:56 < spionL> gerconfused, you mean from yesterday?
12:57 < gerconfused> spionL: yeah! it's working! you're a genius
13:04 < spionL> gerconfused, thanks :D
13:06 < zmbmartin> How do I set headers in an https.request in v0.4.12 I see in the latest ver there is an headers option but I do not see that in 0.4.12?
13:09 < gerconfused> spion: I've forked your gist and put the working script in if you're curious
13:09 < spion> gerconfused, I'll look
13:10 < spion> gerconfused, cool. also, wow, 8-spaces tabs
13:10 < spion> i find that with node, 4 is the absolute maximum
13:10 < spion> because of the pyramid of callbacks
13:12 < spion> otherwise you find your self off-screen very soon, like in a giant slashdot thread
13:12 < BennyLava> ..
13:12 < BennyLava> you shouldn't have pyramids
13:12 < BennyLava> if you do, you're just doing it wrong, period
13:13 < spion> well, thats a matter of opinion.
13:13 < BennyLava> No it's not
13:14 < spion> here we go...
13:14 < spion> BennyLava, howcome?
13:14 < spion> what is the tried and proven solution?
13:14 < BennyLava> There's plenty.
13:15 < BennyLava> Name your callbacks, or use one of many async programming libs.
13:15 < BennyLava> https://github.com/joyent/node/wiki/Modules#wiki-async-flow
13:15 < BennyLava> https://github.com/caolan/async being a favourite of many
13:17 < BennyLava> Or streamline.js
13:17 < spion> BennyLava, naming your callbacks (actually removing them) doesn't help
13:17 < spion> infact its worse for a few reasons
13:17 < BennyLava> Yes it does.
13:17 < spion> db.stuff(function(results) { var transformed = trans(results); db.stuffWith(transformed, function(endResult) { var finalTransform = final(endResult); response.end(finalTransform); }); });
13:17 < spion> solve this with names.
13:17 < BennyLava> ..
13:17 < spion> first of all, naming your callback makes it possible for people to add code between your callback and the point of call.
13:17 < spion> leading to spaghetti mess.
13:17 < BennyLava> LOL
13:18 < spion> Second, if you name two callbacks, you can't pass local variables from the first one to the next, as the second is not in the closure of the first.
13:18 < BennyLava> Talking to makes me lose brain cells, I'm done. Have fun failing.
13:18 < spion> So naming callbacks is most definitely a non-solution.
13:18 < BennyLava> to you*
13:18 < spion> BennyLava, as I said, here we go again
13:19 < spion> if you're not prepared to defend your claims, don't do them.
13:20 < Robdgreat> jumping into lava is a non-solution, but only for you, since that sort of thing is relative
13:20 < Robdgreat> ...apparently
13:23 < spion> Sure, if you mind the pyramid so much that you're willing to pass variables defined locally around or to define all your variables in an outer scope and you don't mind that the code doesn't flow from topt to bottom anymore... then yes, naming your functions is a solution
13:23  * BennyLava falls over laughing
13:24 < BennyLava> Someone call an ambulance for this guy, severe brain damage detected
13:25 < spion> ah yes, the brain damage defense: so eloquent, so beautiful.
13:25 < BennyLava> Your 'arguments' are too stupid to take seriously. Can only come to the conclusion of brain damage.
13:26 < BennyLava> Keep at it though, maybe one day you'll know what you're doing
13:41 < felideon> isaacs: any reason /usr/local/share/npm/bin would not be added to the path (mac 10.6.8) when installing the latest node binary (.pkg) from the website?
13:43 < spion> BennyLava, here is my argument: https://gist.github.com/3743154 - are you going to dismiss it, or will you actually take the time to exchange information?
13:43 < Robdgreat> ooh, ooh, I know, pick me, pick me
13:43 < boutell> Jade question: is it possible to make a class name overrideable with block/extends? It looks like I can only do that at the level of intact HTML tags.
13:43 < spion> Robdgreat, I'm asking everyone.
13:44 < Robdgreat> spion: I meant with regard to your question of dismissal, as specifically targeted >.>
13:44 < Robdgreat> I have an idea which choice will be made
13:45 < spion> I'm prepared to be enlightened, but doubtful (because I have spent some time thinking about it). But who knows, maybe I've overlooked something simple.
13:45 < boutell> spion: I missed the start of this, but it looks like async.series is in order.
13:45 < boutell> (so to speak.)
13:46 < boutell> nesting isn't terrible,but if you wind up with 28 levels of it just to express that something is sequential, that's silly.
13:46 < spion> boutell, but i don't understand how can you access local variables defined in a previous function in the series from one of the next functions in the series 
13:47 < boutell> spion: pass them explicitly. 
13:47 < boutell> oh, with async.series… hang on a sec.
13:47 < bradleymeck> spion: https://gist.github.com/3451844
13:48 < bradleymeck> thats rewritten from production code, it was around 100 lines before moving to the async stuff
13:48 < boutell> spion: you might prefer async.waterfall.
13:49 < boutell> https://github.com/caolan/async#waterfalltasks-callback
13:49 < spion> let me try to rewrite my example with async.waterfall
13:50 < abstrax1> i am using forever it logs everything that my scril outputs. how can i log just the erros ?
13:50 < abstrax1> errors
13:50 < abstrax1> in a separate log file maybe
13:50 < boutell> abstrax1: it has command line options for that, although in my case they don't work, I believe there's an issue open on it.
13:51 < boutell> if they work for you, you could tell it to write stout to /dev/null
13:51 < boutell> stdout
13:51 < boutell> you could also hush up your code in non-error situations (:
13:51 < abstrax1> hush up your code?
13:52 < abstrax1> ok, let me try -e
13:57 < abstrax1> no errors producing now lol, dam
14:00 < boutell> abstrax1: "hush up your code" -> stop printing things in the first place if it's not error-worthy
14:02 < abstrax1> you are right, its not loggng
14:02 < abstrax1> well, its a third party app dumping all XHR requests, not sure how to stop
14:02 < zmbmartin> Any ideas why forever would not start one particular app. It says it starts it and shows it in forever list. starting the app from command line with node works fine.
14:03 < abstrax1> sucks :/
14:06 < turbobug> Hello, I have one small application that runs express + socket.io. I get some user details from redis when they connect (read cookie token -> read redis (load categories as depending on category i join socket to specific room))
14:06 < turbobug> I use those rooms to broadcast specific message / room from a express .post() controller. Right now i'm wondering if is there any elegant solution for page reload, change. My web application is made in PHP, so every time they change page they will do
14:06 < turbobug> connect / disconnect and i need to retake all redis stuffs / join rooms and so on - Is there any way to make this better?
14:06 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:17 < jhsto> does anyone have idea can i use nowjs in my expressjs routing, and if yes, how?
14:22 < spion> added my pitiful attempt with async.waterfall - https://gist.github.com/3743154
14:25 < jmpe> Can anyone share the proper way to configure a node application using forever-monitor with nssm.exe on a Windows machine? 
14:25 < spion> and thats why I get really mad when someone says "if you're nesting, you're doing it wrong"
14:26 < spion> finally, streamline.js is a solution, if you're okay with source code transformation, yes.
14:26 < BennyLava> lol @ spion
14:27 < BennyLava> so because you don't understand async.js, you get mad at it?
14:27 < spion> Oh, I didn't understand it?
14:27 < spion> No, I'm just asking where I'm going wrong.
14:27 < BennyLava> bro, no one is stopping you from having mad callback pyramids - have fun! enjoy!
14:27 < BennyLava> just never show your code to anyone lest you embarrass yourself
14:28 < chrisjaure> BennyLava: give it a break
14:28 < abstrax1> wow
14:28 < Taar779_w> ...
14:28 < abstrax1> did you see this realtime html/css/js shit amazing
14:28 < bradleymeck> spion: give me a sec i can fix most of this
14:28 < bradleymeck> result2_outer will need a nest
14:29 < bradleymeck> but passing this much state is symptomatic of needing some kind of abstraction /shrug
14:29 < spion> BennyLava, on the contrary. one should always show his code and be prepared to take a hit :)
14:29 < BennyLava> spion: yeah but you sucked at taking criticism
14:29 < Robdgreat> spion: we were all 13 once
14:29 < BennyLava> Robdgreat: you too?!
14:29 < spion> BennyLava, not really, you sucked at explaining.
14:29 < shlevy> If I have a native module that links against openssl, should I somehow specify in my package.json or binding.gyp the dependency?
14:30 < BennyLava> spion: the docs are clear, no?
14:30 < BennyLava> Or can't you read docs?
14:30 < turbobug> omfg kids, go to sleep :)
14:30 < BennyLava> Sleep at 16:30?
14:30 < BennyLava> wtf
14:30 < spion> BennyLava, the benefit of doubt is over, you're from now on considered a useless troll and ignored.
14:31 < turbobug> :)
14:31 < BennyLava> spion: yay!
14:31  * BennyLava huggles spion
14:32 < spion> bradleymeck, in a language that supports immutables (constants) I'd probably make all those vals/finals/etc, so its not exactly state...
14:33 < BennyLava> lol
14:33 < bradleymeck> spion: state is data, data is state
14:34 < spion> isn't state mutable?
14:34 < BennyLava> lol
14:36 < spion> I had a real example a while ago. Let me try to find it
14:36 < bradleymeck> trying unravel this nightmare is kinda fun
14:38 < bradleymeck> having error first would help the stuffX stuff a lot
14:38 < spion> thanks a lot, I'll be glad to read any insights
14:39 < spion> in general though, my point was that nesting isn't all that bad its made out to be. and most of whats bad about it its purely about it being aesthetically unpleasing. 
14:39 < bradleymeck> just taking sec have to write up helpers since it cant use the error first ones
14:40 < BennyLava> yeah readability isn't important, good call spion
14:40 < spion> But yeah, so far I've found async helpful for parallel/serial map/foreach and queues - those are really great.
14:41 < bradleymeck> BennyLava: be more helpful.
14:41 < BennyLava> I am, I pointed him at async.js
14:42 < BennyLava> wtf else do you want from me, a cure for cancer?
14:47 < Robdgreat> yes
14:48 < Robdgreat> at least that'd be useful
14:48 < BennyLava> I'll get right on it
14:48 < BennyLava> And I'll be sure to also end all wars while I'm at it
14:48 < BennyLava> brb
14:51 <@isaacs> felideon: why is it /usr/local/share/npm/bin?
14:51 <@isaacs> felideon: did you install npm from homebrew or something?
14:52 <@isaacs> felideon: the node installer puts it right in /usr/local/bin, and assumes that's already in the PATH
14:55 < bradleymeck> rereading for errors
14:57 < therealkoopa> I'm converting my express app over to a bunch of smaller apps that are all mounted. This is working great, but I'm struggling with using socket.io in one of the mounted apps. The only way I've figured out how to get it working is to start two http servers, one for the main app, and one in the mounted app that is using socket.io. They of course just use different ports. How bad is this? Is this going to cause issues? Should I try to
14:57 < therealkoopa>  figure out how to get this working without starting two http servers?
14:58 < nmartin> #node.js, the /b of the programming world.
14:58 < bradleymeck> spion: https://gist.github.com/3743154#gistcomment-574777
14:59 < bradleymeck> i could take a lot more time and make a nice api if i knew the situation better but i gots work
15:00 < bradgignac> therealkoopa: don't you just want to start your socket.io server on a different port than your express apps?
15:01 < therealkoopa> bradgignac: I could do that. Is that a best practice? Have one server for the express app, one server for the socket.io server?
15:01 < therealkoopa> I hope/think that should work well with clustering, too
15:01 < bradgignac> yeah
15:02 < bradgignac> and your communication with socket.io server can be in-process at first
15:02 < cmdrtaco> "So if you think it's possible to hire only rock stars (as a lot of shitty job postings claim they do) you're a joke and the actual rock stars will move along to the next posting, on the off chance they're looking at listings in the first place."
15:02 < bradgignac> and if needed you can move to a message bus
15:03 < therealkoopa> I'm using a redis store for socket.io
15:03 < therealkoopa> So that shouldn't be a problem
15:07 < cmdrtaco> therealkoopa: what are the advantages of using a redis store
15:08 < therealkoopa> cmdrtaco: If you're running cluster, it's almost necessary. 
15:09 < cmdrtaco> therealkoopa: is your code online ?
15:09 < therealkoopa> cmdrtaco: Negative
15:10 < spion> bradleymeck, looking at it now
15:11 < therealkoopa> If you have multiple workers, you'll have different clients connected to separate workers. If you emit a message using a memory store, it will only go to clients connected to that worker. If you are using a redisstore (or something similar), it will publish it to the redis pub/sub, which will be handled by all workers, so all clients will get the message.
15:11 < turbobug> Hello, I have one small application that runs express + socket.io. I get some user details from redis when they connect (read cookie token -> read redis (load categories as depending on category i join socket to specific room))
15:11 < turbobug> I use those rooms to broadcast specific message / room from a express .post() controller. Right now i'm wondering if is there any elegant solution for page reload, change. My web application is made in PHP, so every time they change page they will do
15:11 < turbobug> connect / disconnect and i need to retake all redis stuffs / join rooms and so on - Is there any way to make this better?
15:12 < turbobug> do you guys think is better if i setup this in connect session middleware? and store those redis categories in there?
15:18 < cmdrtaco> turbobug: the problem is that your page reloads
15:19 < cmdrtaco> turbobug: im not sure how you can keep a websocket connection active when your php/page is refreshed
15:19 < turbobug> well, no other option cmdrtaco
15:19 < cmdrtaco> why not
15:20 < turbobug> becaus eis a php website, can;t use iframe or something
15:20 < cmdrtaco> your page can be a .html / js
15:20 < cmdrtaco> and you can refresh PHP data in divs with ajax
15:20 < cmdrtaco> or real time with socket.io
15:20 < cmdrtaco> and never refresh the whole page
15:20 < turbobug> is rly bad for google this way
15:21 < turbobug> is not like a local application, or a private one
15:21 < turbobug> is a website ...
15:21 < cmdrtaco> true
15:21 < turbobug> i also use caching for delivering static content
15:21 < turbobug> but that's ok with js
15:22 < turbobug> so i need to connect - disconnect each time a user change page / reloads page
15:22 < turbobug> and after that, for example if i need ti implement a chat one-to-one 
15:23 < turbobug> i will also have problems with this connects / disconnects
15:23 < turbobug> user online / user offline every time :|
15:23 < turbobug> so i'm stuck in here
15:24 < cmdrtaco> well, google crawler is t he only problem?
15:25 < turbobug> yes, is rly important for me to have all pages indexed
15:25 < cmdrtaco> put a crowbar server in front of it for google bots
15:25 < turbobug> too complicated
15:25 < turbobug> and not elegant ...
15:25 < cmdrtaco> good luck then
15:25 < cmdrtaco> you have no options
15:25 < turbobug> thanks for help
15:28 < thanpolas> lol
15:29 < thanpolas> turbobug the crowbar server is really the way to go, take a deep breath and think about it
15:29 < turbobug> is a lot of work, short time ...
15:29 < spion> bradleymeck, cool - I haven't used bind to curry before (my fault, really). 
15:29 < turbobug> <thanpolas> why is so bad if i isset a connect session
15:29 < bradleymeck> spion: there was an interesting article on dailyjs not to long back about functional programming in JS
15:30 < turbobug> and when user connects again i identify him again, take categories from session etc
15:30 < turbobug> ?
15:30 < turbobug> makes too much load?
15:31 < thanpolas> yes, costs too much and won't scale well
15:31 < thanpolas> and really, there's no reason why you shouldnt put the little extra efford to do this right
15:32 < thanpolas> ahoy stagas!
15:32 < turbobug> there is some already made software for this?
15:32 < stagas> thanpolas: hey :)
15:36 < cmdrtaco> thanpolas: have you used crowbar ?
15:36 < spion> bradleymeck, seems like args.pop() modifies the args before you concat them, so only results are saved :)
15:36 < spion> but thats fixable, yeah
15:37 < thanpolas> cmdr no, checking it out
15:37 < bradleymeck> spion: need test suite :(
15:38 < thanpolas> cmdr references? can't find much on google...
15:39 < spion> and if for some reason another of the transformation functions also needs the previous results, I can pass them as arguments ( xform(result, args) )
15:39 < cmdrtaco> turbobug: what http server do you run
15:39 < turbobug> nginx
15:39 < spion> bradleymeck, I have learned something new today. thanks. (But still, that tiny bug looks like it happens because code doesn't really flow from top to bottom :D)
15:39 < cmdrtaco> turbobug: and you realize to do this you have to redesign your page anyway to use ajax calls to update data instead of refresh from php
15:40 < turbobug> yeye
15:40 < turbobug> if is the only way ...
15:40 < cmdrtaco> http://simile.mit.edu/wiki/Crowbar
15:40 < thanpolas> cmdrtaco can't find crawbar... i guess you mean the #! technique when doing ajax based apps...
15:40 < cmdrtaco> install xul runner
15:41 < cmdrtaco> get crowbar put it in a directory somewhere
15:41 < cmdrtaco> we have to setup a virtual framebuffer for it to run in
15:42 < spion> closures still seem more convenient. no need to pass anything around, its already in scope. but this does make .waterfall a lot more usable.
15:42 < turbobug> wondering how big websites like facebook etc, keep theyr chat ... available and everything after reload / change page
15:42 < felideon> isaacs: it seems like i had installed node (not npm) from homebrew at some point. not sure if that's how it made it there. but when I installed the node binary from the nodejs website, it didn't put it in /usr/local/bin
15:43 < cmdrtaco> in my rc.local i have for example   nohup ./restartall.sh "400x300x8" "nice -n 19 /usr/bin/xulrunner-1.0.1 trunk/xulapp/application.ini" &
15:43 < cmdrtaco> then for like nginx config i have
15:44 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:44 < cmdrtaco> location /blah{ if ($http_user_agent ~* (bot|crawler|spider|\.com|links|lynx) ) { proxy_pass http://127.0.0.1:10000/?url=http://$http_host$uri$args;  break; } rewrite ^/blah/(.*)$ /index.php?blah=$1? last; }
15:45 < felideon> isaacs: ok so i did a 'brew uninstall node' and then re-installed the node binary, and npm is now at the right spot.
15:45 < cmdrtaco> i can give you XVFB runner script if you need it
15:56 < draginx> Anyone have a good resource for deploying and scaling nodejs apps?
16:02 < tjholowaychuk> but that's if you're on port 80 or forwarding
16:02 < tjholowaychuk> oops
16:07 < felideon> isaacs: should the node binary install npm at the right location regardless of previous [homebrew] installs?
16:10 < euoia_> is there a way get some indication of how popular / active an npm module is?
16:11 < nkuttler> euoia_: npmjs.org
16:13 < euoia_> nkuttler: thanks
16:15 < euoia> nkuttler: the search function appears to be broken
16:17 < turbobug> someone have any ideea how facebook keeps chat on page change or reload? i mean if u change page, the url is changing but the chat is not refreshing, not sending another request for this ... is like stiky in there :) have no appropiate word for it :)
16:18 < Robdgreat> I assumed it was a frame
16:18 < Robdgreat> of some sort
16:18 < turbobug> well, no :|
16:29 <@isaacs> felideon: yeah, it should
16:30 <@isaacs> euoia: look it up on npmjs.org
16:33 < euoia> isaacs: Just an FYI some of the search results are broken. I wanted to look at the relative popularity of couchdb libraries, searched for couch and the top result is broken https://npmjs.org:10073/package/couch-login
16:34 < euoia> isaacs: I can't find anything else that's not working, just that link.
16:34 <@isaacs> euoia: get rid of the :10073
16:34 <@isaacs> euoia: all the results have a <link rel=canonical> now pointing at the proper url
16:34 <@isaacs> euoia: it'll take a while for google to finish re-indexing, though
16:35 <@isaacs> euoia: https://npmjs.org/package/couch-login
16:35 < euoia> ok :)
16:35 < euoia> hah, I see it's your package
16:36 < euoia> I was just reading the source for the npm-registry-client, it looks easy enough to talk to couchdb
16:38 <@isaacs> euoia: yeah, i only wrote couch-login becuase managing the session token is a little bit fiddly
16:45 < mbalho> only if ur n00b
16:48 < gbhatnag> hi all - new to node.js and looking to create a RESTful, single-page app + API for managing students, professors, classes and docs shared within the classes. Know of any great tutorials/example apps I may be able to look at in this space? I've been looking into flatiron.js as a framework to use as well as building on top of express.js...
16:49 < gbhatnag> any pointers would be greatly appreciated!
16:54 < mscdex> node.js rules!
16:55 < superjoe> mscdex, welcome to the channel
17:05 < tnorris> how can I check if a Stream has been `pause()`ed?
17:07 < Tobsn> btw.
17:07 < Tobsn> http://eval.in/
17:07 < Tobsn> thats neat.
17:07 < Tobsn> supports nodejs
17:15 < mscdex> tnorris: stream.paused IIRC
17:15 < SoulRaven> os posibile to load a modules inside from another module?
17:15 < mscdex> tnorris: hrmm maybe not
17:16 < tnorris> mscdex: life would be so simple if it was. just trying to check whether I need to run .resume() in a specific case.
17:16 < mscdex> tnorris: i think it depends on the kind of stream. net.Socket for example has _paused
17:16 < diversario> SoulRaven, just `require` it as you would usually do
17:17 < tnorris> hm, interesting. I'll take a look at all properties.
17:18 < SoulRaven> i have this example: http://bin.cakephp.org/view/629212837
17:18 < mscdex> tnorris: also i was going to tell you that i "upgraded" the lastIndexOf on my buffertools fork to use reverse boyer-moore instead of the previous naive method. it'd be interested to see what kind of results you get with it
17:18 < SoulRaven> but when i try to load from another module, i get : DEBUG: Error: Cannot find module 'GLOBALS'
17:18 < SoulRaven> the name of the file is GLOBALS.JS
17:18 < mscdex> cakephp? really :-)
17:18 < tnorris> mscdex: awesomeness. I'll run tests in a few.
17:18 < diversario> lol :)
17:19 < diversario> SoulRaven, unless this file is in 'node_modules' directory, you will have to specify path to it
17:19 < diversario> SoulRaven, like `require('../global')`
17:19 < SoulRaven> the file is in node_modules/packetHandler/GLOBALS.js
17:19 < diversario> SoulRaven, `require('packetHandler/GLOBALS'), then
17:20 < SoulRaven> thx, is working:)
17:20 < diversario> SoulRaven, if that's the main/single file there you can just use package.json to point to it. Or call it index.js, whatever.
17:20 < diversario> SoulRaven, np :)
17:20 < SoulRaven> mscdex: do you work in cake?
17:21 < SoulRaven> i just install node, i realy don't know how to work with modules
17:21 < mscdex> SoulRaven: i tried it once, but it was horrible enough for me to not try another time :-)
17:22 < SoulRaven> is can easy, i have 2 app made in cake, and is ok:)
17:22 < diversario> SoulRaven, check this about - http://nodejs.org/docs/latest/api/globals.html#globals_require
17:22 < diversario> SoulRaven, actually, this - http://nodejs.org/docs/latest/api/modules.html#modules_modules
17:25 < SoulRaven> so, if i have 2 files inside the same module, and i want to include a file inside another file, i just use require and is ok
17:25 < SoulRaven> no other thinks
17:25 < diversario> SoulRaven, yep
17:25 < SoulRaven> and package.js is for defining the modules
17:26 < diversario> SoulRaven, yeah, package.json is a good thing to have in your module
17:26 < hotch> Hey guys, looking to bump to node latest, installer fails since upgrading to mountain lion with no error message just installation failed. ./configure errors out. Any thoughts?
17:26 < SoulRaven> and name from the package.js is posibile to have space in it right: 
17:26 < diversario> SoulRaven, you can say `main: 'file.js'` and then just `require('myModule') and it will get the file that you put in `main`
17:27 < diversario> SoulRaven, not in the name, AFAIK
17:27 < SoulRaven> like "name" : "NODEJE Teltonika Packet Handler",
17:27 < diversario> SoulRaven, that you can put in the description
17:28 < SoulRaven> "name" : "NodeJS Teltonika Packet Handler",
17:28 < SoulRaven>     "main" : "packetHandler.js"
17:29 < SoulRaven> and when i require, in fact i require the file name
17:30 < s5fs> i don't always require, but when i do..
17:30 < diversario> SoulRaven, require will return what's in the `main`, yeah
17:30 < tnorris> I'm using commander to parse cli, and want an idea how a user could pass '\n' as a cli parameter (for line separators)?
17:30 < tnorris> tried '\n' but that gets escaped.
17:31 < Industrial> \\n !
17:31 < Industrial> xD
17:31 < Industrial> (for the record i have no idea.)
17:32 < tnorris> Industrial: heh, wish that did work. commander must do some string escaping or something.
17:33 < SoulRaven> but when i require the module from outside, i still need to pass the path to the module?
17:36 < diversario> SoulRaven, if it's in some random location - yes
17:37 < SoulRaven> is in node_modules, localy
17:37 < SomeoneWeird> then no
17:38 < diversario> then probably not. Are you requiring that module from a file under node_modules?
17:38 < SoulRaven> no, inside the main folder
17:38 < diversario> SoulRaven, because if file where you require that modules doesn't know about that node_modules directory - you need to use a path
17:40 < SoulRaven> the dir structure is like this: nodeJS-TeltonikaParser -> server.js | node_modules/PacketHandler/packetHandler.js, package.json, GLOBALS.js
17:40 < SoulRaven> i require packetHandler from server.js
17:40 < diversario> yeah, that looks right
17:43 < tnorris> Industrial: actually it's node that automatically escapes cli arguments. seeing if that can be disabled.
17:48 < AndreasMadsen> Hi, I'm trying to build node.js on smartOS, but I get the following error: unrecognized command line option "-fno-tree-sink"
17:59 < draginx> Is there a way to do a forEach asynchrnously without using the asynch library? like natively to nodejs..? Seems kind of weird to *not* have that
18:00 < tnorris> anyone have an idea how to dynamically generate escape characters (e.g. '\\' + 'n')?
18:01 < Industrial> draginx: do a counter over your array, if it's array.length then it's the last one, call the callback. Also, function binding.
18:02 < Industrial> http://tech.richardrodger.com/2011/04/21/node-js-%E2%80%93-how-to-write-a-for-loop-with-callbacks/
18:02 < Industrial> random google result ^
18:02 < bodisiw> Industrial, doesnt that assume they all finish in order?
18:04 < superjoe> bodisiw, just use the async library.
18:05 < superjoe> oops, I meant draginx. sorry bodisiw.
18:05 < bodisiw> np :-)
18:05 < Industrial> no, because the scope of the loop variable is local to every callback in the loop (because you did function binding), all the callbacks get called once and only on of them will call the next eaync step.
18:05 < draginx> count over my array?
18:05 < draginx> that makes *zero* sense
18:05 < Industrial> see the blog post
18:06 < draginx> oh the for loop already does it asyncrnously
18:06 < draginx> awesome
18:06 < hemanth2> what's about npm WARN package.json ndoc@1.0.0 No README.md file found!
18:07 < hemanth2> adding readme in package.json is a must?
18:07 < TooTallNate> hemanth2: just to the root of your project
18:07 < TooTallNate> you don't need to specify anything in the package.json
18:07 < TooTallNate> regarding the readme
18:08 < TooTallNate> AndreasMadsen: what version of gcc?
18:08 < machadogj> guys, this doesn't work in windows on v0.6.18: var ps = spawn('git', [ 'init', dir ]);
18:09 < machadogj> so I am using this: var which = require('which').sync; var gitCommand = which('git'); 
18:09 < machadogj> was that fixed in newer versions of node??
18:09 < hemanth2> TooTallNate: then what's warning about?
18:10 < TooTallNate> hemanth2: "ndoc", one of your dependencies, doesn't have a readme
18:10 < TooTallNate> apparently
18:10 < AndreasMadsen> TooTallNate: Thanks, but I just solved it, was running 3.x and that was somehow prioritized over 4.x
18:10 < TooTallNate> AndreasMadsen: ahhh, well good :)
18:10 < AndreasMadsen> `pkgin remove gcc34-3.4.6nb3` fixed it
18:10 < TooTallNate> AndreasMadsen: out of curiosity, what was the "gcc_version" veritable set to in the config.gypi file for that version?
18:11 < TooTallNate> ahhh, you already removed it, nvm
18:12 < AndreasMadsen> TooTallNate: https://gist.github.com/3732950 is the hole procedure I have done, if you are really curiouse you will just do the same.
18:12 < hemanth2> aha ok
18:17 < hemanth2> nodejs cli app, if I want to make an node package to work on CLI, what must be done?…not able to recall 
18:18 < Venemo> I'm kind of new to node, so sorry for the stupid question.
18:18 < Venemo> what is the best way to separate logic between multiple files in nodejs?
18:19 < superjoe> Venemo, sounds like you should peruse the documentation
18:19 < superjoe> the require syntax is pretty straightforward
18:19 < Venemo> superjoe, are you suggesting that I just make node modules?
18:19 < machadogj> Venemo: readhttp://nodejs.org/docs/latest/api/modules.html
18:20 < machadogj> indeed
18:20 < Venemo> I was under the impression that modules were intended to be used for stuff that is intended to be packaged separately
18:22 < superjoe> cool, you can require a .json file. I did not know this
18:22 < hemanth2> bin : {} ??
18:23 < superjoe> hemanth2, check out an existing project which has this functionality
18:23 < hemanth2> superjoe: yes doing the same thnx
18:24 < superjoe> hemanth2, "bin": { "exe-name": "path/to/executable/file"}
18:25 < hemanth2> superjoe: got it :)
18:28 < Venemo> superjoe, machadogj, ok, this is cool! :) thanks for the suggestion!
18:28 < Venemo> are there any conventions when making my own modules?
18:30 < diversario> Venemo, take a look at some of the popular ones and follow the style
18:30 < diversario> Venemo, http://howtonode.org/how-to-module
18:31 < diversario> straight from the source
18:31 < Venemo> thank you diversario
18:32 < Venemo> can you give me a good example? :)
18:33 < diversario> Venemo, np. Can't, sorry :)
18:34 <@isaacs> Venemo: a good example of what?
18:34 <@isaacs> Venemo: of a module?
18:34 < Shedal> Hello. Anyone knows whether NowJS is really deprecated?
18:35 < Venemo> isaacs, of a module where I can see what kind of style/conventions are worth using. :)
18:35 <@isaacs> Venemo: most of these are good: https://npmjs.org/browse/author/substack
18:35 <@isaacs> Venemo: A few of these are ok: https://npmjs.org/browse/author/isaacs
18:36 < diversario> isaacs, does your guide describe good patterns?
18:36 < Venemo> okay, thanks isaacs :)
18:36 <@isaacs> diversario: i don't remember.
18:37 < hemanth2>  line 1: syntax error near unexpected token `('
18:37 < hemanth2> but node <my_script> works fine
18:37 < hemanth2> :\
18:37 < hemanth2> missing something?
18:38 < hemanth2> for "bin": { "exe-name": "path/to/executable/file"}
18:38 < felixge> is there a way to detect if a certain key is currently pressed in node.js?
18:38 < Shedal> Anyone here uses NowJS? Do you know whether it's still maintained?
18:38 < felixge> (I don't mean getting stdin data events, I want to check for a certain key being up/down on my own interval)
18:39 < Venemo> my other question is, is it good practice to share some .js files (eg. validation logic) between the client and server side?
18:40 < Shedal> I would say, this is one of great reasons to use node.js, no?
18:40 < async_io> seeing something weird with trying to install jade, actually through mocha but it won't install by itself either.  Getting Error: EROFS, symlink '../jade/bin/jade' on npm install jade and sudo npm install -g jade
18:40 < async_io> anybody see something similar?
18:40 < Venemo> Shedal, yeah, sounds good
18:40 < Venemo> Shedal, but I'm not sure about the negative implications, if any
18:40 < hemanth2> node index.js works fine, but after packing on cli i'm getting an error  line 1: syntax error near unexpected token `('
18:41 < hemanth2> that means, bash is trying to execute ~/.nvm/v0.8.8/bin/my_script 
18:41 < Shedal> Venemo if you have some security breaches in your validation code, everyone can see it. I would say, it is the only downside. But don't quote me on that :)
18:42 < diversario> Venemo, personally, seems kind of gimmicky to me.
18:43 < hemanth2> interpretive line missing 
18:44 < knave> having the same core validation functions exposed and used server and client side doesn't seem that crazy to me, i guess it is just the surrounding code like dealing with invalid data that might differ
18:46 < hemanth2> package review request : npm install ndocs; ndocs 
18:48 < Venemo> diversario, what do you mean?
18:49 < hemanth2> Lists all the functions in particular node module.
18:49 < diversario> Venemo, I would write server-side code to work on the server first, without worrying about client-side.
18:50 < diversario> Venemo, also, I like separation.
18:52 < Venemo> diversario, I see. but isn't validation the kind of thing which could be shared?
18:53 < diversario> Venemo, probably, if it works out for you - why not :)
18:54 < Venemo> diversario, I'm quite new to node, so I'm just experimenting with this - but I heard this as an argument about the advantages of node a few times
18:54 < diversario> Venemo, right, that's what I mean by "gimmicky" - it's often an argument for managers and stuff to sell them on the platform.
18:55 < Venemo> diversario, for managers :D
18:55 < Venemo> hehe
18:55 < diversario> Venemo, I don't think this argument is why people use node :D
18:56 < insin> you can share that sort of stuff easily enough as long as your code and its dependencies run on both sides, browserify or modules-webmake make it easy enough to bundle
18:57 < diversario> it's like a bonus
18:57 < insin> although getting a static version for free from the same code would be sweet
18:59 < Shedal> Venemo, also, your server-side validation code would normally be richer, since it can use more advanced business logic - connect to DB, etc.
19:00 < SoulRaven> there is any module that deals with write logs to files?
19:00 < diversario> SoulRaven, winston
19:00 < diversario> SoulRaven, https://npmjs.org/package/winston
19:01 < SoulRaven> and is ok? any unknow bugs?
19:01 < diversario> is there an IRC bot here for things like that? to get package info/link/whatever?
19:01 < BennyLava> any unknow bugs? <-- lolwat
19:01 < diversario> lolz
19:01 < diversario> SoulRaven, it's good
19:01 < BennyLava> did that just happen?
19:01 < BennyLava> really?
19:02 < gkatsev> yes, I know of a few unknown bugs for winston.
19:02 < BennyLava> amazing!
19:02 < SoulRaven> gkatsev:?
19:03 < diversario> there should be "Uknown issues" thing on github
19:03 < gkatsev> lol
19:03 < BennyLava> Anyway, there's ALWAYS unknown bugs.
19:04 < BennyLava> (Don't ask me to prove that please.)
19:04 < klaemo> hey, does anyone know a good way of testing the raw speed of a streaming csv parser?
19:06 < diversario> klaemo, feed it from memory and take time in ms?
19:06 < klaemo> diversario: wouldn't I need a huge csv file to get significant values?
19:07 < diversario> klaemo, I'd use something like 10MB or so
19:08 < diversario> klaemo, you can generate a CSV memory and then feed to parser
19:08 < diversario> *in memory
19:10 < klaemo> diversario: good point, thanks :) now I only need to find a big enough csv
19:10 < Shedal> Anyone here uses NowJS or Bridge?
19:11 < diversario> klaemo, really, just write a little generator :) or just get 1 line, push into an archive like bazillion times and join array with '\n'.
19:11 < klaemo> diversario: yep, i'm about to do that :) 
19:11 < medice> knockout seems aaawesome
19:11 < diversario> medice, it is
19:14 < prosquare> NowJS looks interesting
19:15 < diversario> prosquare, looks stale
19:16 < mankins> hi—i'm trying to install a module on osx and getting: no suitable image found….binding.node: mach-o, but wrong architecture does this sound familiar?
19:16 < prosquare> true
19:17 < prosquare> just noticed
19:20 < motiooon_> is it possible to upload multiple files in parallel from the browser ?
19:20 < motiooon_> like a parallel file uploader?
19:21 < Shedal> prosquare, NowJS does look awesome, but it doesn't seem to be maintained anymore
19:22 < bradleymeck> Shedal: meteor is similar, just got huge funding :-/
19:22 < mankins> would npm_config_arch=x86_64 work?
19:22 < tnorris> mscdex: tested your new implementation. about 60% faster than before. Not as fast as js for loop for single character, but much faster than raw js as the number of characters increases.
19:22 < Shedal> bradleymeck, how about Bridge? dnode? Do you know how those compare to NowJS and meteor?
19:23 < mscdex> tnorris: ah ok, yeah sometimes it can definitely be the case that js can be faster for some things
19:23 < bradleymeck> Shedal: different purposes at heart
19:23 < Shedal> bradleymeck, can you elaborate? :)
19:23 < bradleymeck> working
19:25 < mscdex> motiooon_: possibly if you're doing them via xhr, but you might run into browser limits (configurable or not)
19:26 < tnorris> mscdex: I think the reason is that in js I convert the string to a Buffer before the check, then check each numeric value in buffer[i]. where as I need to pass a string to lastIndexOf().
19:27 < mscdex> tnorris: you should be able to pass a Buffer into buf.lastIndexOf()
19:27 < tnorris> mscdex: it always returns -1, but the string will return the correct value.
19:28 < tnorris> (-1 if I pass in a buffer)
19:28 < mscdex> hmmm i tested using a Buffer and didn't run into that
19:28 < mscdex> do you have some values that reproduce it?
19:31 < Shedal> bradleymeck, ok, in Meteor's screencast, they are using server-side database API right on the client and tell me it is a feature. To me, it sounds like a huge security breach
19:31 < bradleymeck> Shedal: read their posts after that, they talk about how they are having to remove that and do mirroring if you want that
19:32 < tnorris> mscdex: here's the test case: http://pastie.org/4749091
19:35 < tnorris> mscdex: I think it has something to do with the size of the buffer, since it doesn't fail if I reduce the buffer's size.
19:35 < mscdex> jeesh, pastie.org has been really crappy lately
19:36 < qubit[01]> anyone done anything with the LiveEdit stuff ?  Like editing code and having node reload it without relaunching ?
19:36 < tnorris> qubit[01]: sort of, you mean like configurations, or the raw script code?
19:36 < bradleymeck> Shedal: basically just dont do live updates ala that stuff, there just isnt enough good experiences (im looking at you ASP WebForms)
19:37 < bradleymeck> qubit[01]: it can act a bit funny, but ive tried it on node 0.4.x a long while back
19:37 < qubit[01]> tnorris, I was hoping for fully hot swappable code, but configs would be nice
19:37 < tnorris> mscdex: you having problems with pastie?
19:37 < qubit[01]> bradleymeck, yeah Im reading an old thread and it says something about it doesnt replace existing functions, only new functions that were added - was wondering if thats still the case
19:37 < plato> mscdex: motiooon_: could you do simultaneous uploads with websockets? base64 encode the files?
19:38 < mscdex> tnorris: every once in awhile yes. sometimes it persists 5-6 times in a row (http 503 varnish error)
19:38 < bradleymeck> qubit[01]: will always be the case, heap corruption possible otherwise
19:38 < mscdex> tnorris: i finally got it to load though :-)
19:38 < tnorris> mscdex: heh, that's really strange.
19:39 < mscdex> plato: that is one way, but if the browser supports typed arrays and whatnot, you could probably do without base64 encoding since websockets support binary
19:40 < qubit[01]> bradleymeck, ahh ok, well luckily node restarts in a heartbeat anyway
19:40 < bradleymeck> qubit[01]: start up multiple side by side, use iptables or w/e to swap faster if needed
19:40 < motiooon_> thanks plato: and mscdex:, I was thinking if you know any good plugins, modules that already does that
19:40 < bradleymeck> but beware of connections losing state :)
19:41 < plato> motiooon_: why do you need parallel? why doesn't series work?
19:41 < Shedal> bradleymeck, live updates of what? Application code?
19:41 < motiooon_> plato: I'm building a photo website
19:42 < motiooon_> and I'm trying to upload hundreds of thousands of images
19:42 < bradleymeck> Shedal: live updates of data to clients.
19:42 < bradleymeck> well via ipc based mirroring*
19:43 < plato> motiooon_: oh wow. do you need to do that many times?
19:43 < Shedal> bradleymeck, I'm lost, sorry
19:43 < Shedal> bradleymeck, I thought the whole purpose was to DO live data updates
19:43 < motiooon_> plato: so I'll upload the files via this uploaded but one a t a time would take forever
19:44 < tnorris> wait, that's something I've never thought of before. So if I require() something, then make changes to the file and require() it again in the same process, it won't show the changes in the required file??
19:44 < plato> motiooon_: why not use a more traditional method? sftp, scp?
19:44 < bradleymeck> Shedal: that is their purpose, but instead of sending new data down, they send the current state of data on the remote server. which may be invalid by the time it is sent
19:44 < motiooon_> plato: it has to be a web interface
19:45 < motiooon_> plato: do you know if I'll gain any sped in uploading if I use parallel rather than a queue
19:45 < motiooon_> isn't the bandwidth the limitation ?
19:46 < bradleymeck> tnorris: correct unless you do odd things to stop the cache
19:47 < tnorris> bradleymeck: ok, then I'll assume that stopping the cache isn't a smart thing to do?
19:47 < tnorris> that could be a fun way to hot swap method prototypes on the fly.
19:48 < bradleymeck> tnorris: but if you are waiting on one async function to execute and the prototype changes underneath it?
19:49 < diversario> tnorris, you can remove a module from cache by `delete require.cache[require.resolve(modname)]`, but I'm not sure that's a good idea
19:49 < tnorris> bradleymeck: I will admit that there are some freakish race conditions waiting at the other end of this tunnel, but this could provide some fun experimentation.
19:50 < tnorris> diversario: sweet awesomeness. this is not production stuff, but going to be really fun to experiment with.
19:50 < bradleymeck> i avoid the cache unless i want that file gone forever
19:52 < tonylukasavage> JSON.parse() throws an exception... how do I get the line number?
19:52 < tonylukasavage> I used a bunch of different means to inspect the exception object, but I don't seem to see any of the properties
19:53 < tonylukasavage> I just get the SyntaxError string
19:53 < tnorris> diversario: it worked! thanks. not that restarting a node app takes that long anyways, but always fun to find cool nooks and crannies.
19:53 < diversario> tnorris, awesome :)
19:54 < tnorris> tonylukasavage: if you have static JSON, then run it through jsonlint.com.
19:54 < tonylukasavage> its part of a process
19:55 < tonylukasavage> i know what the error is. I want to be able to meaningfully convey it to a developer if they make a mistake.
19:55 < tonylukasavage> parsing JSON is one point ofa larger process
19:56 < diversario> tonylukasavage, I don't think there's a line number when you get a parsing error from JSON.parse
19:57 < mscdex> tnorris: ok i think i fixed the bug, your test works now for me
19:57 < tonylukasavage> uggghh... any other JSON parsing modules that might offer better error handling, other than the builtin JSON.parse()
19:58 < gildean> tonylukasavage: what do you mean?
19:59 < diversario> tonylukasavage, doesn't it tell you char position?
19:59 < gildean> tonylukasavage: are you trying and catching?
19:59 < tonylukasavage> yes
19:59 < tonylukasavage> what properties of the expception object should be available to me?
20:00 < tonylukasavage> I'm inspecting the object and all iget back is "[SyntaxError: Unexpected token s]"
20:01 < plato> tonylukasavage: https://blogs.adobe.com/formfeed/2009/03/handling_javascript_exceptions.html might help
20:01 < plato> also try, maybe, console.log(JSON.stringify(err, null, 2));
20:02 < tonylukasavage> console.log(require('util').inspect(err, false, null));
20:02 < tonylukasavage> what I'm doing ^^
20:02 < tonylukasavage> also tried stringify
20:02 < diversario> tonylukasavage, you have err.stack and err.message
20:02 < tonylukasavage> diversario: yes
20:03 < tonylukasavage> but if i stringify the err object, it prints "{}"
20:03 < tonylukasavage> very weird
20:03 < diversario> you can't stringify an error
20:03 < plato> k my bad
20:03 < tonylukasavage> apparently :)
20:03 < diversario> i think in the stack trace you should have a position at which error occurs
20:04 < tonylukasavage> diversario: it tells me where it executed, it doesn't tell me where in the text it was parsing that the error occurred
20:04 < diversario> tonylukasavage, ah, OK. Whelp...
20:04 < tonylukasavage> all i get is a very touch-to-track "unexpected token s"
20:04 < tonylukasavage> tough-to-track
20:04 < diversario> yep
20:05 < diversario> JSON.parse is not the best thing to deal with
20:05 < plato> tonylukasavage: maybe this helps? https://npmjs.org/package/greatjson
20:05 < diversario> tonylukasavage, is it possible to partition your JSON into smaller chunks?
20:05 < tnorris> mscdex: tested, works. thanks.
20:06 < diversario> plato, omg, that's awesome
20:06 < tonylukasavage> diversario: I know exactly what the error is, I put it there. This functionality is part of a larger framework I'm building and I need to let developers using it know where exactly errors are occurring.
20:06 < diversario> gotcha
20:06 < diversario> vanilla JSON.parse doesn't give that precision
20:07 < diversario> but greatjson looks really nice
20:07 < tonylukasavage> anyone have experience with greatjson or something else? I'm a little wary of a package at version 0.0.8
20:08 < plato> not me sry. i just found it googling 'github json parse error'
20:08 < diversario> tonylukasavage, you have the opportunity to be the first person to have experience with it!
20:08 < tonylukasavage> lol, sorry, not in a position to do that on this project
20:09 < mscdex> tonylukasavage: http://code.google.com/p/v8/issues/detail?id=1480
20:10 < mscdex> make your voice heard! ;-)
20:10 < mscdex> and/or use a different parser, like one from npm
20:11 < thlorenz> tonylukasavage it looks like you are returning a result as a first argument somewhere
20:11 < thlorenz> instead of cb(null, result) you do cb(result) and now it looks like its an error
20:13 < plato> tonylukasavage: could you perhaps pastebin the broken json you're using?
20:13 < tonylukasavage> thlorenz: I'm not usinf callbacks, I'm calling JSON.parse() synchronously
20:13 < thlorenz> ok, well then you look at err you got inside the catch() ?
20:14 < thlorenz> I doubt that a try catch would give you anything but a proper Error object
20:15 < langpavel> thlorenz trow "string" gives you string
20:15 < langpavel> *throw
20:16 < tonylukasavage> thlorenz: i mentioned above that i have e.message and e.stack, all else seems undefined
20:16 < tonylukasavage> and i have no means to inspect the object
20:16 < tonylukasavage> toString() gives only the string message with the exception name as the prefix
20:16 < Brightstar> Anybody have experience using Passport with Express? ...I'm having trouble understanding where  a message is going.
20:16 < steve-> anyone have a recommendation on an asset manager/packager in the style of the rails asset pipeline.  have tried a few (connect-assetmanager, no go), currently working with Piled and it isn't doing it for me.
20:17 < tonylukasavage> mscdex: thanks for the tip there on JSON.parse(), looks like I ain't gonna get it that way
20:17 < thlorenz> what's the message?
20:17 < diversario> Brightstar, I'm using it with express
20:17 < plato> Brightstar: yeah i've used it a bit. what are you trying to do, i don't recall using 'message' anywhere
20:18 < Brightstar> With the local strategy, he's got this "findByUsername" function in there. It has three if functions attached to, each of which has a "return" statement. ...The problem I'm running into is that the "message" on two of those error statements is going who knows where
20:19 < diversario> thlorenz, yeah, he's trying to get location of token that caused syntax error from json.parse, which it doesn't provide.
20:19 < Brightstar> https://github.com/jaredhanson/passport-local/blob/master/examples/express3/app.js code is there
20:19 < plato> Brightstar: are you using express 3.0? there were some changes
20:19 < plato> oh nvm its in url -_-
20:20 < Brightstar> :)
20:20 < etcetera> "there are some changes"
20:20 < thlorenz> try console.trace() inside the catch, that should print the stack trace
20:20 < Brightstar> K. I'll try it. Never done that before.
20:20 < Brightstar> Rather new to node
20:20 < plato> Brightstar: the message object is the third parameter passed to the done callback
20:21 < plato> the 'done' object is the third argument in the localStrategy function
20:21 < Brightstar> OK so when we take it back to the app.post function that called the whole mess in the first place, how do i send that message as a response to the user?
20:21 < Brightstar> Thats what I'm really getting at.
20:22 < plato> 'message' is some magic parameter name that passport uses. i have not used it. there is a chance that it is being added to req.locals.something, which would allow templates to access the message when rendering
20:22 < Brightstar> Gotcha. ...So probably just easier to redirect to a failure URL
20:22 < thlorenz> tonylukasavage: did console.trace() work for you?
20:22 < Brightstar> I really don't care. I just don't know what it's doing precisely.
20:22 < Brightstar> Haven't tried it yet. been busy talking here.
20:22 < diversario> plato, are you sure message is not an express thing, like there was message in express-messages?
20:23 < plato> no i am not sure
20:23 < plato> i think it had to do with req.flash
20:23 < plato> which was removed in express 3
20:23 < Brightstar> I'm pretty sure plato's right. 
20:23 < diversario> right, that's express-messages
20:23 < plato> quoting https://github.com/visionmedia/express/wiki/Migrating-from-2.x-to-3.x : " (just use sessions: req.session.messages = ['foo'] or similar)"
20:24 < tonylukasavage> thlorenz: as expected, I get "[SyntaxError: Unexpected token s]" and the stack trace, nothing more
20:24 < plato> aso, connect-flash can be used as middleware to provide req.flash()
20:25 < tnorris> where would I start if I wanted to create a compressed TCP stream?
20:27 < plato> so Brightstar i would set req.session.messages = ['Bad username or password']; then when you're ready to display that, do (assuming Jade): var _m=req.session.messages; delete req.session.messages; res.render('templatename', {messages:_m});
20:28 < Brightstar> That's the other half. I'm not using any templating at all. Just ajax to a static page.
20:28 < mscdex> tonylukasavage: there's an async JSON parser that provides more useful error information: https://github.com/dscape/clarinet
20:28 < plato> then, build your response string using req.session.messages
20:28 < Brightstar> Yeah
20:28 < mscdex> tnorris: what kind of compression?
20:28 < Brightstar> it was the req.session.messages taht I was looking for.
20:28 < Brightstar> Thanks much plato
20:28 < plato> tonylukasavage: mscdex: dscape made the nano library, which is awesome
20:28 < plato> o7
20:29 < tonylukasavage> i like a solid reputation, I'll check it out. Thanks guys. 
20:29 < tnorris> mscdex: I'm streaming log data over the network from one node app to another. wanted to see if there was a way to compress the stream.
20:29 < thlorenz> tonylukasavage: could you save the data you are JSON parsing to a file and run it through Json Lint?
20:30 < thlorenz> tonylukasavage: it looks like you are parsing invalid json - that's what the error message is telling you
20:30 < plato> thlorenz: no, his users will be using json, and he wants to provide the users better debugging info.
20:30 < tonylukasavage> plato is right
20:30 < thlorenz> plato: understood
20:30 < tonylukasavage> i know its incorrect json, I put the error in there myself. :)
20:31 < Brightstar> Thanks again guys. Much appreciated.
20:31 < thlorenz> tonylukasavage: gotcha - didn't get the beginning of the conversation
20:31 < thlorenz> is the json all on one line or is it properly formatted?
20:32 < gildean> you shouldn't tell a user wheter the password or username is wrong, on both cases just say something like "incorrect login"
20:33 < plato> qft
20:35 < mscdex> tonylukasavage: if you don't care much about scanning the JSON twice, you could use something like node-jshint to check for errors first, then parse
20:36 < mscdex> i think jshint gives better error messages as well
20:36 < tonylukasavage> mscdex: i was just about to resign myself to that. I'm not psyched about it, but I would be less psyched about replacing JSON.parse()
20:36 < tonylukasavage> there's a lot of those json validators out there.
20:36 < tonylukasavage> anyone got suggestions on a good one? other than jshint of course, just to narrow down my search
20:38 < mscdex> i've had pretty good luck with jshint myself
20:41 < chovy> does anyone use nodejitsu? I'm wondering if they support mongodb and redis, which my app uses.
20:41 < tonylukasavage> mscdex: seems a little heavy for my needs, as i only need json validation. Gonna take a look at https://github.com/zaach/jsonlint
20:42 <@Nexxy> chovy, via mongohq
20:43 < timeturn> anyone try the c port of lucene (Lucy) ?
20:43 < timeturn> I think there's only perl bindings for it though
20:45 < mscdex> are npmjs.org package pages loading for anyone else?
20:45 < tonylukasavage> now we're talkin'... (from jsonlint)
20:45 < tonylukasavage> Parse error on line 11:
20:45 < tonylukasavage> ...0",        "font": something,        "
20:45 < tonylukasavage> ----------------------^
20:45 < tonylukasavage> Expecting 'STRING', 'NUMBER', 'NULL', 'TRUE', 'FALSE', '{', '[', got 'undefined'
20:45 < thlorenz> tonylukasavage: I'd parse with JSON.parse and only if it throws get more info via jsonlint. That way it performs well when there are no errors
20:45 < tonylukasavage> thlorenz: planning on it, and jsonlint seems to be doing exactly what i need
20:46 < thlorenz> tonylukasavage: :)
20:46 < plato> sweet
20:46 < tonylukasavage> so not ideal, but definitely acceptable, thanks guys!
20:47 < diversario> I can't remember where I saw it but I think on one of the node or js related blogs there was a link to a huge table of JS equality rules.
20:48 < diversario> anyone has any idea what I'm talking about?.. :)
20:48 < Franz__> somebody here used browserify module?
20:49 < tnorris> mscdex: refined my lastIndexOf test. for anything more than 1 character, lastIndexOf is twice as fast as raw js.
20:49 < mscdex> tnorris: yeah i could probably see that
20:57 < chovy> Nexxy: damn, $15/mo for 2gb of mongo
20:57 < tnorris> diversario: you mean something like this: http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/
20:58 < diversario> tnorris, yes, but the one I saw had more comparisons, it was just huge
20:58 < plato> chovy: Nexxy: if couchdb is an option, iriscouch might be a bit cheaper http://www.iriscouch.com/service
20:59 < tnorris> diversario: hm, haven't seen one larger than that. if you find it, please share.
20:59 < diversario> tnorris, have been looking for it for some time now, will do if I find it
21:00 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:00 < mscdex> tnorris: you could use a simple zlib stream, that's built into node
21:02 -!- mode/#Node.js [+o piscisaureus__] by ChanServ
21:02 < tnorris> mscdex: ok, so in the examples they stream through fs. makes sense i could just swap out for a tcp stream.
21:04 < mscdex> tnorris: yeah pretty much
21:04 < medikoo> Franz_: why asking?
21:05 < tnorris> interesting (off to try it out)
21:06 < Franz__> med_ i read in a project its for serving the same file for client and server-side
21:06 < Franz__> i would like to know if we can use with protect ou check the codes
21:06 < med_> medikoo, ^
21:09 < noordung> When I call Buffer.toString(), does it copy data from the buffer?
21:09 < medikoo> Franz__: if you want to use node specific modules like fs or path on client-side go for it. If you just want to reuse same file organization style, and write modules same way, try also webmake (that's what I'm happy with, and I'm the author btw ;-)
21:11 < astropirate> Question about the event loop in node, when I do setInterval or nextTick     is that function executed at the beggining of the next loop or the end??
21:23 < mscdex> noordung: yes
21:23 < noordung> mscdex, so it's not layering the string on top of the buffer object, it's copying memory?
21:23 < mscdex> correct
21:24 < mscdex> noordung: the only time memory isn't copied is when you do buffer.slice(), in that case the returned slice references the original memory
21:24 < noordung> I see...
21:25 < diversario> astropirate, check this out - https://groups.google.com/forum/?fromgroups=#!topic/nodejs-dev/DvENgK8Nubw
21:25 < draginx> http://pastie.org/private/hxjbuzywx5srwid0tnsmw anyway to shorten this?
21:26 < draginx> http://pastie.org/private/jwypdoyskzxccotfkukq ive added the model
21:31 < plato> draginx: looks pretty clean to me, whatcha trying to do?
21:31 < draginx> plato: use less lines? :P
21:33 < mscdex> draginx: remove the newlines then ;-)
21:33 < draginx> lol
21:33 < draginx> i mean is there a way of shortening the number of characters? ;)
21:33 < plato> like so http://pastie.org/private/zkmnpkbaed0gtp4fxiwla
21:34 < plato> you could shrink it a tiny bit more with var _p = req.app.settings.partner;
21:35 < Monkey_b> hey guys is it ok to ask questions about zombie.js here?
21:36 < draginx> plato: ok thanks! :)
21:41 < tnorris> for kicks, anyone mind running `benchmark/throughput.js` and posting your results?
22:01 < mscdex> tnorris: for node 0.8.9: on ubuntu 12.04  i get ~14.3 gbit/sec. on windows xp64 i get a value that continually increases up to ~1.848 gbit/sec
22:02 < mscdex> both x64 systems but windows is using the x86 binary
22:02 < tnorris> mscdex: cool, thanks. on linux x64 I'm getting ~18 gbit/sec.
22:03 < tnorris> thanks for the windows stat. something I wouldn't have tested.
22:03 < tnorris> can't believe how much faster it is on linux.
22:03 < mscdex> i'll test the x64 win binary
22:03 < CoverSlide> i can't believe it's not butter
22:03 < tnorris> lol
22:04 < mscdex> looks about the same for the x64 node.exe
22:04 < mscdex> a little higher
22:04 < mscdex> ~1.86
22:04 < mscdex> :-)
22:04 < tnorris> interesting. don't know the internals well enough to guess why that would be.
22:04 < CoverSlide> I think the problem
22:04 < RLa> what version has that benchmark script?
22:04 < tnorris> (be the difference between win and linux)
22:04 < CoverSlide> is windows
22:05 < tnorris> RLa, I'm using from the v0.8.9 release.
22:05 < mscdex> same
22:06 < RLa> hm, i have no throughput.js script
22:07 < mscdex> RLa: it's benchmark/throughput.js in the source distribution
22:07 < RLa> nvm, found it
22:07 < mscdex> :-)
22:07 < RLa> it's not executable script tho
22:07 < tnorris> RLa: just run `node benchmark/throughput.js`
22:07 < mscdex> ^
22:08 < mscdex> i should try it on my win7 netbook
22:08 < RLa> nice, getting 4gbit/s with 0.8.4
22:09 < tnorris> RLa: what's your system?
22:10 < RLa> debian 6 on q6600
22:10 < tnorris> RLa: thanks.
22:11 < tnorris> I'm testing that against passing data through stdin.write on a child_process : https://gist.github.com/3746243
22:11 < tnorris> on my system I'm showing ~ 34 gbit/sec.
22:11 < RLa> what's your system
22:14 < tnorris> Lenovo W520. Xubuntu x64 12.04.
22:15 < Spion> 15gbit/s here (i5-750 desktop), 9gbit/s (i5-2450M laptop) - both running 12.04
22:15 < RLa> got 2gbit/s with 0.7.9 on smallest linode instance with debian 6
22:16 < Spion> tnorris, thats a really nice laptop there :)
22:16 < tnorris> Spion: company issued by Mozilla. =)
22:19 < tnorris> getting ~2.6 gbit/sec on a small EC2 instance.
22:20 < qubit[01]> how are you testing this ?
22:20 < tnorris> qubit[01]: grab the source and run `node benchmark/thoughput.js`
22:21 < RLa> tnorris, can you test on micro instance too :)
22:21 < tnorris> RLa: sure, have one of those fired up as well.
22:21 < mscdex> weird, on win7 i'm not getting any output at all
22:22 < mscdex> for throughput.js
22:22 < tnorris> for EC2 micro instance, bursts at ~5 gbit/sec, but slowly drops to 1.4 gbit/sec.
22:23 < tnorris> mscdex: that's really strange.
22:23 < qubit[01]> maybe stdout/stderr problem ?
22:24 < RLa> tnorris, that's still pretty good
22:24 < RLa> i guess cpu stealing kicks in
22:25 < tnorris> and if anyone wants to run a custom throughput test for child_processes, here you go: https://gist.github.com/3746243
22:25 < tnorris> RLa: yeah, definitely better than I expected.
22:30 < mscdex> tnorris: with your stdin test: ~25-30 gbit/sec on ubuntu 12.04 x64 node. ~6.8-6.9 gbit/sec on xp64 x86 node. ~5.45 gbit/sec on xp64 x64 node
22:31 < tnorris> mscdex: awesome, thanks. so writing raw buffers to child_processes is 2-3 times faster than using a net socket.
22:32 < mscdex> ok so the problem on win7 for me is that setInterval wasn't firing at all
22:32 < mscdex> in the throughput.js test
22:32 < mscdex> :S
22:32 < mscdex> the callback anyway
22:33 < tnorris> what the?
22:33 < RLa> tnorris, also faster here, 7 gbit/s
22:33 < mscdex> if i move the logic into the 'data' event, i get throughputs of ~0.3 gbit/sec
22:33 < mscdex> lol
22:34 < tnorris> mscdex: wtf?! i'd almost say that's bug worthy.
22:34 < mscdex> a normal day in Windows i'd say ;-)
22:34 < RLa> setTimeout anomalies, feels like firefox :/
22:34 < tnorris> RLa: awesome, thanks.
22:34 < mscdex> the thing is, setInterval behaves in a repl
22:35 < mscdex> on the same machines
22:35 < mscdex> i gave up trying to understand Windows some time ago
22:35 < RLa> and i never attempted it
22:36 < mscdex> i'll try the stdin test on there
22:38 < spion_> tnorris, 30mbit/s (i5-750), 20mbit/s (laptop), so exactly 2 times faster here.
22:39 < CIA-118> node: isaacs v8-3.13.7.1 * r47cfb63 / (381 files in 23 dirs): V8: Upgrade to 3.13.7.1 - http://git.io/GwrNSA
22:39 < CIA-118> node: isaacs v8-3.13.7.1 * r760af0a / (deps/v8/build/common.gypi deps/v8/tools/gyp/v8.gyp): V8: reapply floating patches - http://git.io/SS0t8w
22:39 < CIA-118> node: Bryan Cantrill v8-3.13.7.1 * r51781be / deps/v8/src/platform-posix.cc : Loosen artificial mmap constraint - http://git.io/P52IzA
22:39 < mscdex> ok i get output with the stdin test on win7.... ~1-2 gbit/sec on both x86 and x64 node
22:39 < tnorris> spion_: awesome. good to know.
22:39 < spion_> err, gbit
22:39 < tnorris> heh, figured.
22:41 < tnorris> cool. so non-windows support is stellar.
22:41 < mscdex> usually the case :-)
22:42 < tnorris> lol
22:47 < tnorris> before I go writing a test, does anyone know off the top of their head if each spawn()'ed child process has their own vm heap (so each could take like 1 gb of ram)?
22:48 < mscdex> tnorris: yes, each child process shares nothing
22:50 < tnorris> whoot! the possibilities are endless!
22:53 < spion_> tnorris, sounds like you *might* be interested in a fresh new experimental project of mine, https://github.com/spion/stractory :)
22:54 < spion_> not going public with it yet because I'd like to setup a hardware environment to test it extensively first.
22:54 < wmage> Hey, what's the easiest way to deep clone an object in Node.js?
22:55 < mscdex> wmage: a recursive copy :-)
22:55 < spion_> wmage, provided there are no functions or cyclic references, and performance doesn't matter, I'd guess JSON.parse(JSON.stringify(obj)) 
22:55 < wmage> spion_: That sounds good, thanks
22:55 < wmage> no wait, it's a CoffeeScript class
22:55 < wmage> instance of a class
22:55 < spion_> but i don't recommend it for anything except simple testing
22:55 < wmage> I assume I would lose prototype link
22:56 < RLa> isn't there package for cloning
22:58 < langpavel> RLa clone https://npmjs.org/package/clone
22:59 < RLa> nice, i thought there is
23:00 < langpavel> RLa but factory function is always better :-)
23:00 < langpavel> RLa use case?
23:01 < RLa> hm
23:02 < RLa> specific behaviour for prototype links and stuff like that
23:04 < langpavel> RLa can you use prototype chain?
23:04 < wmage> RLa langpavel does this work in browser?
23:04 < wmage> or just node.js
23:06 < langpavel> wmage not sure, but I thing yes
23:06 < RLa> it seems to support circular objects too
23:06 < RLa> huh, i need sleep now
23:07 < langpavel> RLa yes but I forgot details
23:07 < langpavel> RLa more resources can be found here http://stackoverflow.com/questions/728360/copying-an-object-in-javascript
23:09 < tnorris> spion_: looks interesting. think I'll need another red bull before I can wrap my head around the architecture.
23:09 < langpavel> RLa hmm, this is not right question on stackoverflow.. sorry don't read it :-)
23:12 < spion_> tnorris, I probably need to improve the readme though. there is a central registry and there are workers. you can connect to it and ask it to create named "actors" (basically tiny services) and it will, on a random worker. you can also ask it to get you a client to that actor. afterwards all streaming (or on higher level actors, message passing) is done between whatever process you're in and whatever worker the actor is working in.
23:23 < spion_> i built this because of: low level streams (easier to do actors that stream audio and such or use stuff like dnode) and easy deployment and creation of actors on demand (server and client functions are .toString()-ed and sent to the workers)
23:39 < tnorris> spion_: I only started using streams and child_processes last week. still wrapping my head around how it all works.
23:41 < spion_> tnorris, I know the feeling. your stdio benchmark gave me a couple of new ideas though - at least for local worker processes :)
23:41 < tnorris> heh, glad I could accidentally help.
23:57 < CIA-118> node: Bert Belder v8-3.13.7.1 * re72ac8a / deps/v8/tools/gen-postmortem-metadata.py : v8: fix postmortem metadata generation - http://git.io/ELN_vA
--- Log closed Wed Sep 19 00:00:41 2012
