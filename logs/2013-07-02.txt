--- Log opened Tue Jul 02 00:00:07 2013
00:11 <@isaacbw> ls
00:11 <@isaacbw> lol woops
00:12 <@isaacbw> bradgignac: lol what
00:12 <@isaacbw> why are you asking that here
00:12 <@isaacbw> what's johhny 5
00:12 <@isaacbw> johnny
00:14 <@isaacbw> johhny johhny don't leave me
00:15 < ashnur> hmm
00:15 < AAA_awright> Is Node.js introducing any patches to V8?
00:16 < ashnur> how does not know who johnny 5 is?
00:16 < AAA_awright> I've been unable to link to my system V8
00:24 < boterock> hello, i'm rather new to nodejs and mongodb, i am using mongolian, how do I say mongo to find in collection where id = any value of an array?
00:27 < drudge> TooTallNate: have you ever compiled node as a static lib?
00:27 <@TooTallNate> drudge: like to try and embed into another C program?
00:27 <@TooTallNate> drudge: negatory...
00:27 < drudge> yeah (a mac app specifically)
00:28 < drudge> TooTallNate: this used to work in 0.9.x land but fails now https://github.com/fileability/noddy/blob/master/deps/nodeclonebuild.py
00:30 < jayz_> Any npm publish experts out there?  I'm getting this error on trying to publish - noob: 
00:30 < jayz_> http 403 https://registry.npmjs.org/surveymonkey/0.0.1/-tag/latest
00:30 < jayz_> 82 error publish Error sending version data
00:30 < jayz_> 83 error Error: forbidden user: null not authorized to modify surveymonkey
00:30 <@TooTallNate> jayz_: you probably need to npm login
00:31 < jayz_> still get it after npm login.
00:31 < jayz_> npm whoami
00:31 < jayz_> shows correct as does npm owner ls
00:34 < jayz_> TooTallNate - thanks, but still not working after npm login and npm owner ls shows me as the owner. npm whoami looks good as well.  Any other advice?
00:40 < esya> I have another architectural question here, my app is a websocket 4 players cardgame, but with multiple rooms. I'm creating a Player Class, and a Game class.
00:40 < esya> Should I put them into different modules?
00:40 < esya> or just require them with ./myfile.js ?
00:40 < esya> I don't really know yet how to organize things properly
00:40 < ashnur> 'class'
00:41 < esya> By class I mean backbone model
00:42 <@MI6> joyent/node: Timothy J Fontaine v0.10 * 4c38742 : test: fix tls-hello-parser-failure on smartos - http://git.io/RBudRg
00:48 < RalieghFhang> How could I go about modifying this code to match this, but then save what is in between quotation marks to a new variable?
00:48 < RalieghFhang> var newNumData = stringData.match(/NEWDIR="([a-zA-Z]+)([0-9]+)"/);
00:49 < RalieghFhang> That properly finds my line    NEWDIR="xxxx20"
00:49 < RalieghFhang> Now I need to somehow parse   xxxxx20 into a new variable.
00:51 < Reflow> hello
00:52 < Reflow> can anything that is done in php be done with node js?
00:52 < RalieghFhang> From what I've gathered, yes.
00:53 < RalieghFhang> But I'm fairly unknowledgeable about it all still, so don't quote me. We switched. Well, rather, we've combined.
00:53 < Reflow> but i have a question
00:53 < Reflow> how do i make a web server run javascript and output an html file
00:53 < Reflow> instead of calling <script> in html
00:53 < Reflow> i don't understand how node works
00:54 < RalieghFhang> http://www.nodebeginner.org/
00:54 < Reflow> RalieghFhang: thanks
00:54 < RalieghFhang> Good start, even if the code in there is a little... Crazy for explanation/example purposes
00:54 < RalieghFhang> Actually read it though, it'll really help you get an understanding.
00:56 < RalieghFhang> ANyone care to help me with a simple RegEx question?  http://pastebin.com/Rcd3YNsT
01:11 < GeneralMayhem> i'm using node at work for a basic rest api with express, and i've got the basics down, but i'd like to do something more substantial to give back to the community and get more into it. Any ideas of a mid- to large-scale project that the node ecosystem needs?
01:22 < ssafejava> has anyone experimented with doing xss sanitizing on a streaming POST body? I'm thinking about using a `through` stream and parsing each chunk with node-validator
01:38 < perlitch> Raynos: i'm having issues setting up mock to work with browserify… when I try and browserify a test suite with it, it gives me a ENOENT, open 'module' error (seems like it isnt expecting to be run in the browser). Any ideas?
01:38 < __Raynos> perlitch: it doesnt work with browserify 2.0
01:38 < perlitch> crap.
01:39 < __Raynos> perlitch: PR welcome :D
01:39 < __Raynos> I don't know what the hack is to get it to work with brwoserify 2.0
01:39 < __Raynos> perlitch: ideally you dont need mocking
01:39 < perlitch> really? how would you get around that?
01:39 < __Raynos> perlitch: what are you mocking?
01:40 < perlitch> well, require()'d dependencies in a module that i am unit testing
01:40 < perlitch> for example, one of the deps would make a web service call
01:40 < __Raynos> perlitch: The way I solve these problems
01:40 < __Raynos> is to not have _stateful_ require statements
01:41 < __Raynos> so each require returns functions that take anything stateful as arguments
01:41 < __Raynos> and if the state is out of scope for the module you should pass the state in as an argument
01:41 < __Raynos> for example if your doing HTTP stuff pass in a uri config as an argument
01:42 < __Raynos> then set up a mock HTTP server on a random local port and pass in localhost:<PORT> as the uri config
01:42 < perlitch> digesting that...
01:45 < perlitch> ok i think i understand what you are saying, but help me a little… wouldnt that mean you'd have to add to your application code just to provide for testing (not necessarily a horrible thing) and also does that really cover all use-cases for mocking? not everything i want to mock is going to be an http request. then again maybe since i am just now starting testing i dont quite realize that it isnt really an issue to not mock all deps
01:47 < perlitch> __Raynos: sorry, forgot to tag you
02:25 < jdelgado> If a parent creates a child process through fork, does the child exit when the parent does?
02:26 < jdelgado> I'm assuming not
02:29 < ningu> jdelgado: pretty sure it does
02:48 < jdelgado_> ningu: Well, I guess there is only one way to find out
02:57 < jdelgado_> ningu: You were correct
03:01 < DORNER> hey, anyone here ever use node-orm2? im wondering if there is a way to update a record in a cell all in one go.. instead of doing say, a find() +modify + save()
04:01 < RalieghFhang> Having some issues with this. I'm trying to get JUST the var in between the quotes of this. NEWDIR="xxxxxx"
04:01 < RalieghFhang> http://hastebin.com/sokivadani.coffee
04:01 < RalieghFhang> However, the variable pulls NEWDIR="NameLel1",NameLel1 newNumData Variable
04:02 < RalieghFhang> It's still pulling "NEWDIR="NameLE1",    How would I go about removing that?
04:02 < Aredridel> You want .*?
04:02 < Aredridel> That's non-greedy "everything" -- it matches as little as it can.
04:02 < RalieghFhang> I want what's between the quotation marks and nothing else
04:03 < RalieghFhang> IE JUST NameLE1
04:03 < Aredridel> Ah, the matches object.
04:03 < Aredridel> newNumData[1]
04:03 < RalieghFhang> console.log(newNumData[1] <--?
04:04 < RalieghFhang> Oh wait, matches object.
04:04 < RalieghFhang> Line before it.
04:05 < RalieghFhang> Syntax error when trying that Aredridel
04:05 < RalieghFhang> Unexpected token [
04:05 < Aredridel> Hm?
04:05 < Aredridel> What was the expression you actually put in?
04:06 < RalieghFhang> I simply appended var newNumData with [1]
04:06 < RalieghFhang> var newNumData[1] = xxxx
04:06 < Aredridel> Heh. Yes, you  still want a simple declaration.
04:07 < Aredridel> Oh. I was also misreading: use the match method on the regexp.     var newNumData = /NEWDIR="(.*)"/.match(stringData); console.log(newNumData[1])
04:10 -!- mode/#Node.js [+o TooTallNate] by ChanServ
04:10 < RalieghFhang> Worked great, thank you. Care to explain what [1] actually does? Just so I kind of get a better understanding of it.
04:13 < Aredridel> regular expression matches return an array.
04:14 < Aredridel> [0] means "grab the first part"; [1] means "grab the second part"
04:14 < Aredridel> the particular array it returns has 0 being "everything that matched", 1 is 'the thing in the first group of parentheses"
04:14 < RalieghFhang> How exactly is it split up into parts? These are probably stupid questions but I have a feeling I'll be messing with a lot of regExp
04:14 < RalieghFhang> Oh!
04:14 < RalieghFhang> Got it.
04:14 < Aredridel> Hehe.
04:15 < RalieghFhang> (.*) would be [1]
04:15 < Aredridel> Yep.
04:15 < RalieghFhang> Is it possible to add more terms?
04:15 < Aredridel> and foo(.*)bar(.*) would give a [2]
04:15 < Aredridel> and you can even nest them but that gets crazy.
04:15 < RalieghFhang> Like say (haha)(test)
04:15 < Aredridel> Yep.
04:15 < RalieghFhang> And have those as [1] and [2]?
04:15 < RalieghFhang> Simple as that?
04:15 < Aredridel> Yep.
04:15 < RalieghFhang> Awesome.
04:15 < RalieghFhang> Thanks a lot.
04:16 < RalieghFhang> And just a final scenario, just to make sure I've got it
04:17 < RalieghFhang> (/NEW(D)IR="(.*)"/)     [1] would be "D", [2] would be anything in between correct?
04:17 < Aredridel> Just remember that regular expressions are actually a short set of instructions on matching. They read from left to right. Yours was "Start storing into match group 0. Match 'NEWDIR="'. Start matching into group 1 too. Match as much as you can. Then stop matching into 1, and match '"'."
04:17 < Aredridel> Yes, exactly.
04:17 < RalieghFhang> And [0] or default would be the entire thing.
04:17 < RalieghFhang> It's nice to finally understand this. Greatly appreciate it.
04:17 < Aredridel> Glad to help. It's worth reading the MDN docs on Javascript's Regexp.
04:18 < Aredridel> It's reasonably well written.
04:18 < RalieghFhang> I tried that, but it's really hard to understand without examples
04:18 < RalieghFhang> At least for me. I learn best by using/creating examples
04:18 < Aredridel> Yeah, it is, if you're not familiar with regular expressions in concept.
04:18 < demands> if you REALLY want to dig into regular expressions, there's always "learn regular expressions the hard way"
04:18 < RalieghFhang> Only past programming experience I have is AS3, which uses expressions and is OOP, but that was years ago.
04:18 < Aredridel> Regular expressions are pretty well documented as part of computer science courses, so there's tons about them. But people treat them like they're more magic than they are.
04:18 < demands> http://regex.learncodethehardway.org/book/
04:19 < RalieghFhang> So I understand basics and whatnot, just not good at syntaxing yet.
04:19 < demands> it's a deep dive
04:19 < Aredridel> Yeah. There's formal concepts at play that you can work without knowing, but you'll always be missing a little something.
04:19 < RalieghFhang> Haha, I'll give it a look if I ever get stuck on my project or have nothing to do with it.
04:20 < Aredridel> There's sites out there, too, that animate how the matching works, and you can toy with the expression and the match text. It's worth it.
04:20 < RalieghFhang> I'd enjoy a site like that.
04:21 < RalieghFhang> But as it stands now I think I understand RegExp a lot better now. Other functions/proper optimization/ways to go about doing something? Yeah, little far off.
04:21 < demands> one of them is http://rubular.com/ -- built for ruby-style regexes, but for the most part they work the same
04:22 < RalieghFhang> Oh wow, bookmarked. That's hella useful. 
04:25 < airtonix> i wouldn't say it's ruby style.
04:25 < airtonix> http://stackoverflow.com/questions/5671653/ruby-regex-vs-python-regex
04:27 < Aredridel> Yeah, every language has its own quirky extensions of regular expressions. The core is all the same though
04:27 < Aredridel> Ruby's are weirder than most.
04:28 < demands> ruby's especially weird when it comes to unicode support, because it was written by a japanese guy
04:28 < airtonix> caveat: i really don't like ruby
04:29 < demands> and so the language was built to support some crazy japanese-specific encodings alongside unicode
04:29 < demands> i'd assume JS regexes are more standard
04:30 < demands> but I have no idea
04:37 < Vbitz> strange bug, If you create a buffer with a negative number rather then throwing a error it creates a buffer with 0 length
04:38 < Vbitz> http://ideone.com/3WmEYb
04:40 < geneg1> I'm trying to build node v0.10.12 from the tarball on Fedora Core 8. I'm using gcc 4.2.4 and Python 2.7.5. As soon as I type ./configure in the node dir I get Segmentation fault (core dumped). Any idea where to start?
04:40 < RalieghFhang> Seems more like a Fedora channel question. 
04:41 < RalieghFhang> I use Debian/Ubuntu systems and know squat about Ruby so I can't personally help, sorry.
04:41 < sinclair|net> hey guys
04:41 < Aredridel> Indeed. That's pretty low-level. You could debug the crash with gdb though
04:41 < sinclair|net> if i am deploying a npm module with a dependancy, what do i need to do to the package.json?
04:42 < Aredridel> Just annotate the module you use. It should annotate its own dependencies.
04:42 < geneg1> ok thanks, I'll give #fedora a shot.
04:43 < demands> @geneg1 ./configure is a python script, are you sure python works on your machine?
04:43 < geneg1> I built Python from source, so it could certainly be broken. But the REPL starts, so I'm not sure what else i should be checking.
04:44 < demands> hmm try running /usr/bin/python ./configure
04:44 < demands> where /usr/bin/python is the path to your python install
04:44 < demands> just a shot in the dark
04:45 < s2013> im getting a fatal error: js allocation failed - process out of memory .. its just a simple script that returns the list of prime numbers
04:46 < geneg1> demands: thanks, still segfaulting.
04:46 < s2013> it works for upto the first 9 numbers..after that i get that error
04:46 < Aredridel> s2013... and are you out of memory? And how simple is this script?
04:46 < Aredridel> (And how big are these primes?)
04:46 < s2013> realy simple. im completely new to node.js
04:46 < s2013> one second
04:46 < s2013> ill paste the code
04:47 < Aredridel> Aright. gist it, please!
04:51 < ss_> ok better
04:52 < ss_> https://gist.github.com/anonymous/ae823cab2ea09b4522c7
04:52 < ss_> thats for you Aredridel 
04:52 < samholmes> Is there a module like forever only better/
04:52 < samholmes> ?
04:52 < s2013> k ss_ is my other name
04:52 < samholmes> Better in that it's lighter?
04:53 < samholmes> Just curious as to what alternatives are out there.
04:53 < TonkaTruck> I was reading about running npm as a user but everything says to edit ~/.npmrc and I don't have this file.
04:54 < Aredridel> TonkaTruck: so make one.
04:55 < RalieghFhang> Aredridel, My next task is to edit a config with multiple variables. Should I write a regExp match function for each one or is there a more streamlined way?
04:55 < Aredridel> ss_: Your variables are colliding. You never declare i with var i, so they're the same variable in both functions.
04:56 < Aredridel> ss_: Also, primeArr should be inside the function, not global as well.
04:56 < RalieghFhang> I.E. config file contains "Config1=xxx", "Config2=xxx", etc. I need to change these according to Config1, Config2 etc variables in Node.
04:57 < ss_> oh one second
04:58 < samholmes> https://github.com/deoxxa/jesus?source=cc
04:58 < samholmes> why it no work in 0.8?
04:58 < demands> RalieghFahang, you could just use String.prototype.split('=')
04:58 < RalieghFhang> Got documentation on that per-chance?
04:59 < demands> er, so, "Config1=xxx".split('=') will give you ['Config1', 'xxx']
04:59 < demands> sure, 1 sec
04:59 < demands> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split
04:59 < demands> MDN docs are my fave place for javascript documentation
04:59 < RalieghFhang> Also, a hand with this?
04:59 < RalieghFhang> http://hastebin.com/mopurefeso.coffee
05:01 < demands> are you asking about the error message at the bottom of that file?
05:02 < RalieghFhang> Correct.
05:02 < demands> looks like you have a wayward "
05:02 < demands> at the end of newNumData[1]
05:02 < RalieghFhang> Just caught that.
05:02 < RalieghFhang> Makes me wonder why the script couldn't point that out and instead hit the brackets.
05:03 < ningu> RalieghFhang: what isn't working in your code?
05:03 < Aredridel> It did point it out. Pointed right to the ".
05:03 < RalieghFhang> Nono it's fixed now, I did have a wayward quotation mark.
05:03 < RalieghFhang> Oh, supposing it did. Hah.
05:04 < ningu> RalieghFhang: also, exec() is async, it will not wait until the command has finished running
05:04 < RalieghFhang> Anyways, demands, good doc on String.split but I don't think it'll work for what I need. Alas there are about 100+ "=" signs and the items before are different.
05:04 < RalieghFhang> I'll just create separate match functions, I only need to change about 8 variables.
05:04 < ningu> RalieghFhang: match .*? instead of .*
05:04 < RalieghFhang> Any way to change that? Because it didn't CD into that directory.
05:04 < RalieghFhang> pwd shows the normal directory the script is in.
05:04 < ningu> well first of all there's a chdir command I believe
05:05 < ningu> process.chdir(foo);
05:05 < RalieghFhang> Ah. Well, for future knowledgeable if I do need to run two execs, how would I keep them from running async?
05:05 < ningu> you can't.
05:05 < samholmes> Are there any major API changes in .10 from .8?
05:05 < ningu> samholmes: streams2
05:06 <@mbalho> crypto is all streaming now
05:06 < samholmes> ningu: do the old streams still work?
05:06 < RalieghFhang> @Ningu, so say I have to save a file before I execute a command... I'm SOL?
05:06 < Aredridel> samholmes: Yes, with a tiny caveat.
05:06 < Aredridel> samholmes: You have to unpause them yourself if you never connect to the data event.
05:06 < samholmes> Aredridel: There is a caveat?
05:06 < RalieghFhang> Like I have the script edit a file's info, and then execute a bash script to start it AFTER that's done, it can't be done?
05:06 < ningu> RalieghFhang: http://nodejsreactions.tumblr.com/post/53682470195/when-async-finally-makes-sense
05:06 < Aredridel> RalieghFhang: Not at all: You start the command in the callback to the file save.
05:07 < ningu> RalieghFhang: of course it  can be done. just not the way you're doing it.
05:07 < samholmes> Do most of the major modules still work with version .10?
05:07 < ningu> samholmes: most have been fixed by now if there were any issues
05:07 < samholmes> Express, connect, etc?
05:07 < ningu> yes
05:07 < Aredridel> Yes.
05:07 < Aredridel> Backward compatibility is taken seriously.
05:07 < RalieghFhang> Well... Shit. That's basically how I've started all of this. How /can/ it be done then?
05:07 < samholmes> So all I do is run npm update to get .10?
05:08 < RalieghFhang> Also that image, haha
05:08 < ningu> RalieghFhang: the callback is called when the exec() finishes
05:08 < Aredridel> No, npm won't update node for you. You have to install node yourself. nvm, nave, n, or manually install
05:08 < demands> @RalieghFhang, that last argument to exec is a function. so you do process.exec('cat foo', function() { /* do fun stuff here */ });
05:08 < RalieghFhang> So no matter what exec commands will run first in a script, despite their location? Or am I just overthinking it and confusing myself?
05:08 < samholmes> Aredridel: what should I do?
05:09 < demands> and then fun stuff will happen after foo is done catting
05:09 < Aredridel> samholmes: I install manually (or using the packages my OS provides, since they're up to date)
05:09 < ningu> RalieghFhang: no, they don't run first. they return immediately, before they are complete.
05:09 < RalieghFhang> Demands: Lol
05:09 < Aredridel> samholmes: same way you installed 0.8!
05:09 < Aredridel> RalieghFhang: They start when you call it. But when they actually finish is ... .later.
05:10 < RalieghFhang> Understandable. What I don't understand is how to say, pause a script until it completes.
05:10 < RalieghFhang> And I've never placed a function inside an exec code, so..
05:10 < ningu> there's a first time for everything
05:11 < Aredridel> You don't. You have to queue a callback along with it.
05:11 < samholmes> I'll use n it's cool
05:11 < RalieghFhang> I need some documentation/baseline examples. This is over my head, haha.
05:11 < ningu> Aredridel: I thought that's what he meant by "place a function inside" :)
05:11 < ningu> RalieghFhang: there are examples in the api docs.
05:11 < RalieghFhang> To Google. (given I can get the right keywords)
05:11 < Aredridel> doSomething('arguments', function andWhenThatIsDone(err, result) { do_stuff_next() })
05:11 < Aredridel> RalieghFhang: Look for intros to asynchronous programming with node.js
05:12 < Aredridel> there's TONS out there.
05:12 < ss_> Aredridel, what would be the best way to do it so that i return the first 10 prime numbers instead of the primenumbers in the first 10 digits
05:12 < Aredridel> while (primeArr.length < 10)
05:12 < Aredridel> instead of your for loop.
05:12 < ss_> thats what i thought but
05:12 < ss_> it would it be outside the for loop right?
05:12 < RalieghFhang> Oh, so to simply wait until said execute command is done I place a function after it, and place code that needs to wait for it to complete inside it?
05:12 < ningu> I still think Bert is the best intro ;)
05:12 < ss_> or no
05:13 < Aredridel> It'd replace the for loop.
05:13 < RalieghFhang> Bert did give me some insight ningu, haha.
05:13 < Aredridel> RalieghFhang: Yes, more or less. The function's not magic -- it's just an argument you give to the function. 
05:13 < Aredridel> RalieghFhang: It's not so much placed after as traditionally the last argument.
05:13 < Aredridel> RalieghFhang: and node.js's core library is pretty consistent on this.
05:13 < ningu> RalieghFhang: right. and there are various modules (mainly caolan's async) to let you chain a series of things together in a less indent-y way.
05:14 < ss_> let me paste the updated code. let me know if that looks right to you
05:14 < ss_> https://gist.github.com/anonymous/51051602ddf30306bab9
05:14 < RalieghFhang> So, "exec("cd /home/shoutcast/" + newNumData[1], puts, function Check(err, result) { exec("pwd", puts); } RestofCodeHere"
05:14 < RalieghFhang> Something of that sort?
05:15 < Aredridel> Something of that sort.
05:15 < RalieghFhang> It would run the CD command first, wait until that's complete, and then check dir?
05:15 < Aredridel> Yep.
05:15 < RalieghFhang> And yes I remember chdir
05:15 < Aredridel> However, you can't execute cd as a command.
05:15 < RalieghFhang> Just an example.
05:15 < Aredridel> That only affects the subprocess ;-)
05:15 < RalieghFhang> Eh? I wasn't aware of this. I always figured whatever is in quotes there is exactly like typing it out in a terminal.
05:16 < RalieghFhang> Any other commands that can't be run via Node? Never a problem really, can always run a bash script if it's a necessary one Node doesn't support, but just curious if there's a list.
05:16 < demands> RalieghFhang: cd is a special command
05:16 < Aredridel> Shell builtins.
05:16 < demands> in that it isn't its own program
05:16 < demands> it's a shell builtin
05:16 < demands> exactly
05:16 < Aredridel> Yeah. 
05:17 < Aredridel> It's shell magic -- it makes the shell do something itself, rather than start a process that does something.
05:17 < demands> and so it will only apply to the current shell you're in
05:17 < ningu> RalieghFhang: use process.chdir() instead of exec("cd")
05:17 < RalieghFhang> Ahh, yes. And the current shell can't CD?
05:17 < RalieghFhang> And I will.
05:17 < demands> well, you're not in a shell when you're in the context of a node program
05:17 < RalieghFhang> But just for future reference if I need to run a command. I'm unfamiliar with the term shell builtin
05:18 < demands> a shell is just another program, and cd is a special keyword that it program uses
05:18 < demands> s/program//
05:19 < neo314> hi... somebody can helpme a try to write a table with jade and I can't
05:19 < ss_>  what is 'fs' ? is that filesystem? 
05:19 < ningu> neo314: pastebin.com
05:19 < ningu> ss_: yes
05:19 < ningu> neo314: show me your template
05:19 < ningu> on that site
05:20 < RalieghFhang> Silly basic question, whenever I try and add a function I get issues with closing brackets. Does a function always end itself with "});" or just "}"?
05:20 < neo314> ok, wait
05:20 < demands> a function looks like this: function() { /* code goes here */ }
05:21 < RalieghFhang> I tried adding that and it broke things. Gave me errors with closing brackets at the end of the document. Closing said function with just "}"
05:21 < RalieghFhang> Closing it with "});" fixed that, but now I'm thrown an argument error on process.chdir
05:21 < demands> but if you're CALLING a function, it looks like this: doSomething(argument1, argument2)
05:21 < samholmes> how do I list only the modules npm -g without the deps?
05:22 < demands> so if you're setting a function as the second argument of another function, it'd look like this: doSomething(argument1, function() { /* code goes here */ });
05:22 < ningu> samholmes: huh? list what?
05:22 < RalieghFhang> Basically this is what I added. 
05:22 < RalieghFhang> 	process.chdir("cd /home/shoutcast/" + newNumData[1], function Check(err, Checker) {
05:22 < RalieghFhang> 		exec("pwd", puts);
05:22 < RalieghFhang> 	});
05:23 < ningu> RalieghFhang: try reading the docs first
05:23 < samholmes> ningu: npm ls -g shows me my globally installed modules, and the module deps. How do I list just the modules and not the dep tree?
05:23 < ningu> http://nodejs.org/docs/latest/api/process.html#process_process_chdir_directory
05:23 < ningu> samholmes: oh, I see. dunno, you could just ls the directory they're in
05:24 < ss_> is anyone else taking the startup engr class on coursera?
05:24 < RalieghFhang> So I can't add a function within process.chdir?
05:24 < ningu> neo314: paste the link in the channel
05:24 < ningu> RalieghFhang: right, it's sync.
05:24 < RalieghFhang> Ah.
05:24 < neo314> http://pastebin.com/gML8Whbh
05:24 < ningu> the function is just an argument and it either takes one or not
05:24 < ningu> if it does, you can usually assume it's async
05:25 < RalieghFhang> That would explain the argument error too. Okay, that makes sense. Some commands async, some aren't. Async can use functions, everything else goes by order of listing/bracketing.
05:25 < neo314> in the console showme the attributes
05:25 < ningu> neo314: "each product in products" is a jade command, you can't use the "- " syntax with it
05:25 < ningu> RalieghFhang: yep
05:26 < ningu> neo314: try this: http://pastebin.com/ChtfBnRM
05:27 < samholmes> Anyone else having issues installing jesus?
05:28 < jesusabdullah> don't install me bro
05:30 < neo314> ningu: don't work
05:30 < ningu> neo314: what doesn't work?
05:30 < ningu> is there an error?
05:30 < smearcampaign> In a writable stream, how can I tell when it's done being written to? (this is with Streams 2)
05:31 < RalieghFhang> Question... If I run a Node script via a bash script, will the output show in my terminal? (Given there's console.log's in said script of course)
05:31 < ss_> yes RalieghFhang 
05:32 < RalieghFhang> Then that means the bash script isn't running the next one.
05:32 < neo314> ningu: the console doesn't show me any errors just doesnt print the table
05:33 < demands> smearcampaign: I'm pretty sure you can just listen for the 'end' event on the stream
05:33 < demands> http://nodejs.org/api/stream.html#stream_event_end
05:34 < neo314> ningu: but this comand print data "console.log(product.name)" in the console
05:34 < demands> oh shoot, you said writable
05:34 < ningu> neo314: well it sounds like something basic is wrong with your template setup, like, you aren't actually rendering the template or something
05:34 < smearcampaign> yeah, i'm wondering if there is a way to tell when a readable stream (reading a file for example) has reached the end of the file
05:35 < demands> smearcampaign: perhaps the 'finish' event is what you're looking for?
05:35 < smearcampaign> what would emit that?
05:36 < demands> according to the docs, it gets emitted "when end() is called and there are no more chunks to write"
05:38 < neo314> now it's working, thank you ningu, was rendering two times the template
05:38 < demands> smearcampaign: but, in my little test script, it's not getting fired
05:38 < demands> so I am afraid I am of no use to you
05:38 < smearcampaign> all good. thanks anyway :)
05:38 < ningu> it's good not to be fired
05:38 < ningu> in some cases
05:39 < demands> ningu: this is often true!
05:39 < RalieghFhang> Okay, what's the proper way to get a Node script to run with a Bash script?
05:39 < RalieghFhang> http://hastebin.com/
05:39 < demands> RalieghFhang: the same way you'd run it in the terminal, I guess
05:39 < RalieghFhang> http://hastebin.com/wahamuharo.bash *
05:39 < smearcampaign> Actually, It's firing for me! Thanks!
05:39 < RalieghFhang> That script in particular. Doesn't work for some reason.
05:40 < demands> smearcampaign: ooh, cool! I wonder what I was doing wrong?
05:41 < neo314> ningun: ok, thank again
05:41 < demands> RalieghFhang: what are you expecting it to do that it's not doing?
05:41 < demands> is it giving you an error that "node can't be found" or something?
05:41 < RalieghFhang> Okay, I run one Node script that modifies certain variables in that script, and then executes it. That script works well and outputs to terminal properly.
05:42 < RalieghFhang> I then want that bash script to run the second Node script (as seen at the bottom line). I see no output however.
05:42 < RalieghFhang> No errors either, but no output so no way to tell if it ran or not.
05:42 < demands> are you seeing output when you run the script on its own?
05:43 < RalieghFhang> If it helps I can post both JS files and the mkdir.sh
05:43 < RalieghFhang> Yes
05:43 < demands> maybe stdout is getting diverted somewhere
05:43 < demands> post the files, I'm curious
05:44 < RalieghFhang> http://hastebin.com/yuwiwogapu.coffee
05:45 < RalieghFhang> Going for a smoke break, brb
05:48 < demands> RalieghFhang: oh, I misunderstood you. the bash script you posted is called mkdir.sh yes?
05:50 < demands> you should check out http://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback.
05:51 < demands> or you can cheat and just do this:
05:51 < demands> exec("bash /home/shoutcast/mkdir.sh", puts).pipe(process.stdout);
05:53 < demands> child_process.exec returns a readable/writable stream object, and it'll buffer all the output for you, but it doesn't by default push that output to stdout
05:53 < demands> you have to manually tell it to do that
05:54 < ningu> put that in your pipe and buffer it
05:54 < demands> ;)
05:55 < RalieghFhang> So I just pop that sucker in my first script?
05:56 < demands> instead of the exec call you already have, yes.
05:57 < RalieghFhang> ChildProcess has no metod 'pipe'
05:57 < RalieghFhang> Is there a module I need to include?
05:57 < demands> oh oops
05:57 < ningu> no, it returns it in the callback I think
05:57 < ningu> http://nodejs.org/docs/latest/api/child_process.html#child_process_child_process_exec_command_options_callback
05:58 < demands> no, I think you actually want exec(...).stdout.pipe(process.stdout)
05:58 < demands> my bad
05:58 < demands> or you could do what ningu says, that would work too
05:59 < demands> though, if you do that, you won't get any output until the whole thing is done running
05:59 < ningu> if you want the other way you need to use spawn
06:00 < RalieghFhang> demands I changed it and there are no error outputs, but we're back to square one... No output from second file at all.
06:00 < demands> ningu: http://nodejs.org/docs/latest/api/child_process.html#child_process_child_stdout
06:01 < h22> Guys, how do I find which port a (somebody else's) server is running.. (port scan?)
06:01 < ningu> " Use the spawn() or fork() methods to create a Child Process instance."
06:02 < demands> oh, serves me right for not reading carefully enough
06:02 < RalieghFhang> WAit, it DOES have output... However it has the output of the bash script
06:02 < ningu> RalieghFhang: what did you expect?
06:02 < RalieghFhang> Output of the Node script that the bash script runs.
06:03 < RalieghFhang> That's what I need anyways.
06:03 < ningu> and how is that not the output of the bash script?
06:03 < RalieghFhang> Nevermind, it's not showing output, it's showing a console.log entry I forgot I placed in there.
06:03 < ningu> I mean it normally would be, afaik
06:09 < RalieghFhang> Error: Cannot find module '/root/NodeScripts/shoucastconf.js'
06:09 < plops> ????
06:09 < RalieghFhang> It exists, I can run it perfectly.
06:10 < jesusabdullah> y ur running files from root
06:10 < jesusabdullah> RalieghFhang: maybe it's a perms issue?
06:11 < RalieghFhang> http://hastebin.com/wowecateji.coffee
06:11 < jesusabdullah> also you need to not run scripts from /root
06:11 < jesusabdullah> run them locally
06:11 < RalieghFhang> How would it be a perms issue if I'm root? 
06:11 < jesusabdullah> maybe you're not root
06:11 < ningu> jesusabdullah: if you have a perm you can't be a node coder, I think it's a rule
06:11 < RalieghFhang> It's a VPS, I CBA to reinstall Node under another user.
06:11 < jesusabdullah> ningu: jheri curls!!!
06:11 < jesusabdullah> oh man I should get jheri curls
06:11 < ningu> what do they code in, php?
06:11 < jesusabdullah> everyone would hire me!
06:11 < ningu> haha
06:12 < ningu> that must be what's missing
06:12 < jesusabdullah> "what do you think Bob?" "I feel really good about him! Did you see his jheri curls????"
06:12 < jesusabdullah> "Great minds think alike, Bob!" "you said it, Bob!"
06:12 < RalieghFhang> To run the various bash scripts I'm going to need to run I need to be root anyways, so it makes sense I'm using Node as the interpreter. Given the error output, does anyone have any ideas?
06:13 < jesusabdullah> RalieghFhang: you should have all these things running locally anyway. Like, yes I know I'm not helping you figure out why it's not picking up, but it's seriously best practice to have all your files local to the project if possible.
06:13 < jesusabdullah> RalieghFhang: if you're gonna do global confs, at least follow the /etc convention eh?
06:14 < demands> RalieghFhang: jesus has a good point, you're trying to do some seriously black magick here
06:14 < RalieghFhang> jesus, you're simply stating about moving the location of the scripts right? Don't quite see how that'd solve anything. And for editing it'd require me to navigate through tons of directories. I'm trying to keep it all in one folder.
06:14 < RalieghFhang> Also, no idea what you mean by the /etc convention.
06:15 < demands> on the other hand, running a node script from a different directory shouldn't cause any problems
06:15 < demands> so I don't think that's the problem
06:16 < RalieghFhang> Me either.
06:16 < demands> I'm at a loss for what the problem actually *is* though ;)
06:16 < RalieghFhang> Me too.
06:21 < RalieghFhang> demands: It was a problem with the formatting issue of the bash script.
06:21 < RalieghFhang> I forgot to convert it to unix format. For some reason, even if edited with Nano it reverts back to DOS
06:21 < RalieghFhang> Got a new error though.
06:21 < demands> oh, good grief, that's annoying
06:21 < demands> i'm glad you figured it out
06:21 < RalieghFhang> Yes it is. I always forget to do that too.
06:22 < RalieghFhang> http://hastebin.com/cekumucuco.pas
06:23 < RalieghFhang> Got rid of the cp error and whatnot. Still the "Cannot find module" error though.
06:23  * RalieghFhang facepalms
06:23 < RalieghFhang> Typo.
06:23 < RalieghFhang> Shoucast
06:24 < demands> good find ;)
06:24 < RalieghFhang> Works beautifully now.
06:27 < RalieghFhang> Before I continue on, nestling functions is fine right?
06:27 < demands> yep, it's turtles all the way down
06:27 < RalieghFhang> Funception
06:27 < RalieghFhang> Awesome.
06:27 < demands> just so you know, you can also assign a function to a variable
06:27 < demands> and then pass the variables around just like you pass functions around
06:28 < demands> if that makes your life any easier
06:28 < RalieghFhang> Maybe someday. For now I'll just stick with what works isntead of throwing in a new loop, haha.
06:32 < RalieghFhang> demands: Care to help me? Anytime I try and add a function within something I get bracket errors. The code between the comment section was just added. I opened with a single bracket, I closed with a single. Yet it complains I have too many or too few brackets at the end of the file (can't tell which)
06:32 < RalieghFhang> http://hastebin.com/raferafibo.cs
06:33 < RalieghFhang> How do I know what I need to close with? It's getting me every time.
06:33 < jesusabdullah> you're probably missing a ) somewhere
06:33 < jesusabdullah> also coffeescript
06:33 < jesusabdullah> in the case of cs, you're probably not indenting right
06:33 < jesusabdullah> if you can't cut significant whitespace just write js like a normal person >:P
06:33 < RalieghFhang> Code worked perfectly before I added that little tidbit. There are no missing )
06:33  * RalieghFhang google's coffeescript
06:34 < jesusabdullah> yeah well I forgot you were coding coffeescript
06:34 < jesusabdullah> oh, cs is c sharp
06:34 < jesusabdullah> not coffeescript
06:34 < jesusabdullah> derp
06:34 < jesusabdullah> either way
06:35 < jesusabdullah> your indentation is all sorts of fucked up and you have commented code everywhere
06:35 < RalieghFhang> Yeah let me remove that.
06:35 < RalieghFhang> Indentation shouldn't matter though should it?
06:35  * RalieghFhang thought it was just aesthetically pleasing.
06:35 < jesusabdullah> RalieghFhang: missing ) line 30
06:35 < jesusabdullah> <--fucking called it
06:36 < RalieghFhang> Back to my original notice about that and the reason I asked in the first place...
06:36 < RalieghFhang> How do I know if I need to close with "});" or just "}". Someone answered it earlier in terms I didn't quite understand. I posted this script as an example.
06:37 < johnste> RalieghFhang
06:37 < johnste> think of the new function as just another parameter.
06:37 < johnste> fs.readFile('/sc_serv.conf', fn);
06:37 < johnste> then it's obvious
06:40 < RalieghFhang> For some reason, using that script (with fixed brackets) tells me that configure is undefined, even though I define it in the readFile command
06:42 < RalieghFhang> Fixt.
07:05 < ffog>  /exit
07:05 < ffog> ;)
07:18 <@konobi> so, anyone up for an interestinf api recoding challenge?
07:19 < HeartOfAce> having to redo someone's API isn't really my idea of an interesting monday night 
07:19 <@konobi> the api is fine, just browser vs node-isms really
07:20 <@konobi> also a good project to help define a resume-esque melarky
07:22 < jesusabdullah> konobi: is there money involved
07:23 <@konobi> jesusabdullah: nope, sorry
07:23 <@konobi> just and intersting challenge
07:23 <@konobi> jesusabdullah: mainly... https://code.google.com/p/maketext-js/
07:34 < jsmonkey> I know this question is kinda hard to answer correctly but an "between" answer would be good enough to satisfy me. Let's say I have a "done" (process) on Nodejitsu or the other node cloud vendors. How much traffic can it handle?
07:34 < jsmonkey> is it 1k, 10k, 50k. I really have no idea. Of course it depends on what type of queries etc but lets talk average joe here
07:35 <@konobi> jsmonkey: test it
07:36 <@konobi> jsmonkey: no idea what your app does, don't know what your infrastructure is, no idea what your hosting is, no idea what your median client latency is, etc. etc.
07:38 < jesusabdullah> jsmonkey: the best you can do is ask them for some case studies.
07:38 < jesusabdullah> konobi: well, you do know their hosting is nodejitsu.
07:38 < jsmonkey> konobi: as I said, I understand it's diffucult but given my user latency is average (what the hell that now is) and same goes with my code
07:39 < jsmonkey> should I expect 1 node app to handle 10k people if it's just a REST api that gets some things from a DB and send back as JSON
07:39 < jsmonkey> or is the number more around 1k
07:39 < Lorentz> could be
07:39 < Lorentz> over 9k
07:39 < jsmonkey> ok so it's more 10k then 1k , now we getting somewhere :)
07:40 < Lorentz> we're not
07:40 < Lorentz> that was a joke
07:40 < [AD]Turbo> hi there
07:40 < Lorentz> and you're terrible, we have no idea what your numbers are
07:40 < Lorentz> it could be a really slow db query, and what db? what kind of dataset?
07:40 < Lorentz> its a mystery
07:41 <@konobi> jesusabdullah: yes... but is that per-zone or multi-tenant-per-zone?
07:42 < pradeep_prm> hi
07:43 <@konobi> jsmonkey: it depends on the app... i've seen some insane benchmarks... but there's stuff involved to get to that point
07:49 < Siyfion> Soo... I have been listening to the most recent NodeUp and was wondering if anyone knew of any resources / examples that highlight the benefits of promises vs callbacks?
07:51 < sinclair|net> Siyfion: what do you mean?
07:51 < sinclair|net> Siyfion: i figured it was pretty obvious mate
07:54 < Siyfion> sinclair|net: Perhaps it is, but still not having fully grasped them, I'm not certain
07:55 < sinclair|net> Siyfion: well, first off they are composable, and easy to orchestrate 
07:55 < j3lte> Got a question. I consider myself still a rookie in the field of Node. I want to learn more about EventEmitters, do you have some tutorials (beside the one on nodejs.org) that I could use to learn?
07:55 < sinclair|net> Siyfion: they are a primitive for asynchronous operations and concurrency 
07:55 <@konobi> Siyfion: just don't use promises... done
07:56 < Siyfion> konobi: lol.. Why say that?
07:56 < jesusabdullah> j3lte: not off-hand, but conceptually they're fairly reasonable
07:56 < Siyfion> sinclair|net: Thanks, I'm taking a quick look through some resources now as well
07:57 < sinclair|net> Siyfion: i feel they would make better sense if node supported es6 generators / yield 
07:58 < Siyfion> sinclair|net: Perhaps it's simply that in my use-case I don't see me chaining them much...
07:58 <@konobi> Siyfion: node core tried promises... and then decided it was a bad idea... this was many moons ago
07:58 < Siyfion> konobi: Node core tried badly-implemented promises... no?
07:59 < sinclair|net> konobi: promises how?
07:59 < sinclair|net> konobi: i really don't see the benefit using promises in node until the generator stuff arrives. 
07:59 <@konobi> Siyfion: the prmoblems come around mainly with error handling... nothing about promises helps with that
08:00 < sinclair|net> konobi: and even then, i wouldn't be coding them with JavaScript anyway
08:00 < j3lte> jesusabdullah: I have created several apps before, and there was one: social media dashboard. Based on express, it needed to show realtime info from Twitter, FB, Instagram and more. Those different modules, when there was an update, had to add them to the database, as well as push it through SocketIO. I embraced the module pattern, but had a hard time implementing those things in a modular way. When reading about EventEmitters, I thought this might b
08:00 < j3lte> But I have some trouble understanding EventEmitters though
08:01 < j3lte> That's why I have some reading and experimenting to do
08:01 < sinclair|net> j3lte: what do you need to know about them?
08:01 < foobar321> konobi: what was the problem with promises? It does not solve any problem?
08:03 < jesusabdullah> j3lte: it's fairly reasonable. Here, check this out
08:03 < jesusabdullah> j3lte: so you create an event emitter with `var ee = new EventEmitter;`
08:04 <@konobi> foobar321: lack of context
08:04 < jesusabdullah> j3lte: Then, you add hooks onto it like, `ee.on('some-event', function (data) { /* do what you want with the data */ });`
08:04 < j3lte> sinclair|net: well, let's say I create a main app which is my express instance. I implement a module, for instance say Twitter. Can I then use a main EventEmitter on app.js that listens to 'updates', and have my different modules push an update using the EventEmitter.emit() ?
08:05 < jesusabdullah> j3lte: finally, if you later call `ee.emit('data', { bro: 'honestly' });`, it will call every function attached to the ee with `ee.on('data', someFxn)`, including function (data) { /* do what you want with the data */ }
08:05 < jesusabdullah> j3lte: and that's it!
08:05 < jesusabdullah> j3lte: make sense?
08:05 < jesusabdullah> j3lte: the asynchronous part comes from calling ee.emit inside some async callback
08:06 < jesusabdullah> j3lte: so yes, if you wanted to, you could have some modules emit different events on some common event emitter.
08:06 < j3lte> jesusabdullah: makes sense. If i emit something using the eventemitter, will this be catched by every eventemitter throughout the app that listens to that perticular event?
08:06 < jesusabdullah> j3lte: nope, just that particular event emitter
08:06 < j3lte> (so, globally speaking)
08:06 < sinclair|net> jesusabdullah: guess what
08:06 < j3lte> ah ok
08:07 < jesusabdullah> sinclair|net: I won a million dollars???
08:07 < sinclair|net> really?
08:07 < jesusabdullah> no, I'm guessing
08:07 < j3lte> lol
08:07 < jesusabdullah> sinclair|net: maybe you saved 15% or more on your car insurance???
08:08 < sinclair|net> jesusabdullah: i totally got nodejs creating http endpoints on typescript class methods today
08:08 < jesusabdullah> that's cool I guess
08:08 < jesusabdullah> I don't know a whole Hell of a lot about typescript so
08:08 < jesusabdullah> I don't think I fully appreciate the value in what you're telling me
08:09 < jesusabdullah> but it *sounds* like you're doing something similar to what big does with resources, except with typescript type defs instead of json-schemas
08:09 < jesusabdullah> and that's something I can approve of
08:09 < sinclair|net> jesusabdullah: export module services { export class customers { public create(..., cb) } } } creates.....
08:09 < sinclair|net>    /services/customers/create
08:09 < jesusabdullah> cool
08:09 < jesusabdullah> yeah, that's the big framework's bread and butter
08:09 < sinclair|net> and when i post data to that url, it pushes the message through that function
08:10 < jesusabdullah> except, like I said, json-schema instead of typescript typedefs
08:10 < sinclair|net> jesusabdullah: well, what is json schema?
08:10 < sinclair|net> jesusabdullah: tell me and ill implement it
08:10 < jesusabdullah> sinclair|net: http://json-schema.org/examples.html
08:11 < jesusabdullah> sinclair|net: and you don't have to, look at https://github.com/bigcompany/resources and the 'api' resource
08:11 < jesusabdullah> sinclair|net: also https://github.com/bigcompany/resource
08:11 < sinclair|net> jesusabdullah: is this an accepted standard?
08:12 <@konobi> sinclair|net: i'm very very tired of this typescript/coffeescript bullshit... i'm giving you a warning now, limit your chat here to plain ol' javascript unless you're talking about a specific library
08:12 < sinclair|net> konobi: wait, what?
08:12 < sinclair|net> what the hell is wrong with you?
08:13 <@konobi> there was a quote the other day on twitter that i'm trying to look up
08:13 < Siyfion> So pretending they don't exist is the way to go?
08:13 < sinclair|net> konobi: no one is discussing the pros or cons of ts vs cs
08:14 < sinclair|net> konobi: read the discussion ffs
08:14 < jesusabdullah> sinclair|net: json-schema? Yeah, it's a de-facto standard, not necessarily for reflection (the process we're discussing)
08:14 < sinclair|net> jesusabdullah: it seems to be missing a few things tho
08:14 < jesusabdullah> sinclair|net: json-schema is often used for validation
08:14 <@konobi> sinclair|net: you can't wipe out the past...  so things get remembered
08:14 < jesusabdullah> sinclair|net: oh yeah, it's fairly limited
08:15 < Siyfion> At the end of the day, node.js can be written in CS, JS, TS, whatever, surely we're here to discuss node.js patterns, regardless of language!?
08:15 < jesusabdullah> sinclair|net: that's why there are other approaches, like typescript typedefs and https://github.com/spumko/joi
08:15 < jesusabdullah> I mean
08:15 < jesusabdullah> I'm not a huge typescript/coffeescript nerd, but yes konobi I think they're permissible discussion
08:15 < jesusabdullah> I have a talk in mind about the divisive nature of these things
08:16 <@konobi> Siyfion: no... just that there's other places to have those discussions
08:16 < jesusabdullah> I submitted it to jsconf.eu 4 days late
08:16 < jesusabdullah> hopefully they're cool with it
08:16 < jesusabdullah> probably not but who knows
08:16 < Siyfion> konobi: Surely when it relates to node.js directly, this is the place
08:17 < Siyfion> agreed, you could also go and post in #coffeescript  or #typescript etc...
08:17 < sinclair|net> konobi: its no secret i think JS is crap, so what?
08:17 < sinclair|net> so what?
08:17 < jesusabdullah> w8 wat
08:17 < jesusabdullah> you take that back!!
08:17 < jesusabdullah> MAH BABY
08:17 < jesusabdullah> MAH BABY!!!
08:17 < sinclair|net> heh
08:17 <@konobi> Siyfion: not really, node.js is javascript... if you file a bug/PR against it, it needs to be javascript
08:17 < jesusabdullah> >:(
08:18 < Siyfion> konobi: And that's easily do-able with both CS and TS, you just submit compiled code.
08:18 < sinclair|net> .....anywayz
08:18 < jesusabdullah> now THIS is true. If you show up with typescript or coffeescript code you can't expect me or any of the devs to ingest it. But yes, you can debug compiled code.
08:18 < sinclair|net> jesusabdullah: that format needs a few things im not seeing in the example
08:18 < Siyfion> jesusabdullah: Do all the devs write plain ol' JS?
08:19 <@konobi> Siyfion: in the same fashion... why would we care in channel about anything that isn't JS?
08:19 < jesusabdullah> sinclair|net: the example looks pretty short (if you're discussing json-schema still). Look at some of the schemas in big's resources
08:19 < jesusabdullah> sinclair|net: generally
08:19 < sinclair|net> konobi: find your magic quote
08:19 < sinclair|net> jesusabdullah: tbh, a js format in tune with wsdl would be nicer
08:20 <@konobi> sinclair|net: q, qq, qx or qr?
08:20 < jesusabdullah> Siyfion: node is written in js and hooke dup to c and c++ libraries using c
08:20 < sinclair|net> konobi: i don't care
08:20 < jesusabdullah> bros.
08:20 < jesusabdullah> also ladies. but I suspect present company is male.
08:20 < jesusabdullah> Point is. Chill homies.
08:21 < jesusabdullah> and petition jsconf.eu to let me do my talk so I can enlighten all of you.
08:21 < sinclair|net> jesusabdullah: ideally, the format should have types, operations, and input and output on those ops
08:21 < jesusabdullah> sinclair|net: yeah maybe?
08:21 < jesusabdullah> sinclair|net: I don't have strong opinions about schemas, honestly
08:21 < sinclair|net> jesusabdullah: well, its really modelling a web service contract, 
08:22 < Siyfion> jesusabdullah: Cool, obviously I know that a lot of node itself is C++ (ironically a language I'm more familiar with than JS / CS!)
08:22 < gorhgorh> hi there fellow nodefans )
08:22 < jesusabdullah> gorhgorh: hellote
08:22 < prop> hello
08:22 < sinclair|net> jesusabdullah: its really really tempting just to json -ify a wsdl document
08:22 < jesusabdullah> Siyfion: Amusing. You look at libuv at all?
08:22 < jesusabdullah> prop: hellote
08:22 < jesusabdullah> Siyfion: wsdl sounds like it involves xml, and xml is always bad >:(
08:23 < jesusabdullah> er, sinclair|net ^^
08:23 < Siyfion> jesusabdullah: Nope, not at all... As I was trying to get into javascript / node.js programming, I purposefully stopped myself from delving too deep into it all
08:24 < Siyfion> jesusabdullah: While it might have helped my understanding, there wasn't much I could "do" at that level, for the project I'm working on
08:24 < jesusabdullah> Siyfion: I need you to go to the libuv source code, and write bindings to R for it. Can you do that for me? </horatio-caine>
08:24 < jesusabdullah> "You got it H!!!"
08:24 < Siyfion> lol
08:25 < sinclair|net> jesusabdullah: well, its a layout
08:25 < jesusabdullah> Speed, I need you to go to Starbucks and pick up a venti mocha, a venti no whip no fat latte and a medium americano." "*sigh*"
08:25 < prop> dear friends , what IDE you use ? i developed a statistics node.js infrastructure , and i use netbeans , is there something better ?
08:25 < sinclair|net> jesusabdullah: tbh, im not keen on xml formats, and xml message passing is irrelevant 
08:25 < jesusabdullah> prop: I use gedit and the cli
08:25 < Siyfion> jesusabdullah: Nooooo speed got shot :\
08:25 < jesusabdullah> Siyfion: that's why I stopped watching after season 2!
08:25 < Siyfion> prop: I just use Sublime Text 3
08:26 < Siyfion> jesusabdullah: Yeah, Miami never was my fav
08:26 < jesusabdullah> prop: every time I've used an ide for anything it's been a pretty crummy experience
08:26 < Siyfion> jesusabdullah: LV was awesome while Grissom was in it
08:26 < jesusabdullah> hahaha
08:26 < prop> intresting , i think i will try Sublime, i heared about it before
08:26 < jesusabdullah> prop: you just need a text editor, that's all
08:27 < Siyfion> prop: I tried WebStorm a while ago, but didn't really get on with it, a lot do though... maybe give that a look?
08:27 < jesusabdullah> prop: whether it's sublime, gedit, notepad++, vim, Hell even emacs, you'll be fine
08:27 < Siyfion> nano ftw.
08:27 < jesusabdullah> I mean
08:27 < prop> jesusabdullah: i know , i just like IDE for the little things , auto-complete me console.log lines and such
08:27 < jesusabdullah> even I have standards
08:28 < Siyfion> On a relates note, any of you guys seen this: http://ternjs.net/ ?
08:28 < Siyfion> prop: ^^ Might help with your auto-complete needs
08:28 < jesusabdullah> prop: hmm. You can get a lot of those things through text editor plugins. I hear sublime has good support for those. Take a look around github a little, I'm sure you'll find completion libs for noads and sublime
08:29 < Siyfion> prop: Yeah, in sublime just use a plugin called CodeIntel
08:29 < zaphod1984> we have currently the problem that a process that lives in the cluster environment hangs after i while in futex wait state. a gdb trace states the following: https://gist.github.com/zaphod1984/5907614 has anyone an idea why the process might hang in node::exit? the worker does accept connections but does not react anymore.
08:29 < jesusabdullah> I bet even vim has autocomplete if you look hard enough
08:29 < jesusabdullah> wat
08:29 < Siyfion> prop: Or alternatively, if you like living on the edge, give Brackets  whirl
08:29 < jesusabdullah> uhhh
08:29 < jesusabdullah> processing..............
08:30 < Siyfion> prop: Brackets has tern.js built-in
08:30 < jesusabdullah> zaphod1984: no idea. My only guess would be, if you're using smartos or similar, that you're getting an enomem and it's being a hater
08:30 < prop> Siyfion: thanks i saw , thinking using it in Sublime for now
08:31 < jesusabdullah> I mean, the biggest issue with Sublime is that their music is just so laid back all the time y'know?
08:31 < Siyfion> Although brackets isn't supported on linux.... hmpf.
08:31 < Siyfion> jesusabdullah: haha
08:32 < jesusabdullah> only things I need are syntax hilights and preferrably bracket matching
08:32 < Siyfion> spell checker is always a bonus! ;)
08:33 < jesusabdullah> yeah but I spel goood
08:33 < jesusabdullah> I also grammar good
08:33 < Siyfion> Being English, the number of times I try to use "color" libraries as "colour"
08:33 < Siyfion> Why American's use our language so bad?!
08:33 < jesusabdullah> maybe you should just stop being English!
08:34 < Siyfion> :P
08:34 < jesusabdullah> IM SORRY I THOUGHT THIS WAS MURICA
08:34 < Siyfion> Sorry, it's a bad habit, I know..
08:34 < jesusabdullah> Siyfion: is there a hotline for that? XD
08:35 < jesusabdullah> "every time you want to watch Downton Abbey, just chew a stick of gum!" "uhhhhh"
08:35 < Siyfion> jesusabdullah: haha..
08:36 < jesusabdullah> ;)
08:36 < Siyfion> jesusabdullah: Yes, because Downton Abbey is *exactly* what it's like over here... Sat here on my horse-powered typewriter now in fact! ;)
08:36 < Siyfion> *chewing gum*
08:37 < sinclair|net> jesusabdullah: have you looked at the es6 generators?
08:37 < jesusabdullah> sinclair|net: I've not
08:37 < jesusabdullah> sinclair|net: I mostly ignore es6, I'm not a language nerd
08:38 < Siyfion> jesusabdullah: No hotline, but this might help in the meantime:http://www.translatebritish.com/index.php
08:38 < sinclair|net> jesusabdullah: neither am i, but im curious as to how one goes about making a task based state machine with them.
08:40 < jesusabdullah> sinclair|net: liar, you're a total languages geek
08:40 < sinclair|net> since when?
08:41 < jesusabdullah> sinclair|net: since forever
08:41 < sinclair|net> jesusabdullah: looking at taskjs, they dont look all that trivial 
08:41 < sinclair|net> http://taskjs.org/
08:42 < jesusabdullah> sinclair|net: who else would be screwing around with typescript, talking about wanting to port wsdl to json, extolling the virtues of coffeescript, reading about es6 generators seriously..?
08:42 < jesusabdullah> yeah, not clicking that, I'm in stupid mode right now
08:42 < jesusabdullah> no code for me
08:43 < sinclair|net> jesusabdullah: that hardly qualifies me as a language geek, more programmer than anything else
08:44 < jesusabdullah> sinclair|net: no, that's correct, I remember.
08:50 < sinclair|net> jesusabdullah: from what i can tell, there isn't really an established json web service description format 
08:50 < sinclair|net> so, i guess i just make one up?
08:52 < sinclair|net> ill guess ill do that then....
08:52 < sinclair|net> c yas
08:57 < jesusabdullah> see? language nerd. A normal person would use json-schema.
09:04 < emilsedgh_> trevnorris: Hi. regarding issue 5345, im also available here if you want any information.
09:07 < Guest93905> hey
09:08 < Guest93905> im having a bit of trouble understanding nested callback with regards to express web framework
09:08 < Guest93905> anyone around
09:09 < hallas> Guest93905 im here
09:09 < Guest93905> heyllas
09:09 < Guest93905> hallas*
09:09 < Guest93905> sry
09:09 < hallas> pastebin some code and ill explain
09:10 < HSL> morning!
09:11 < RalieghFhang> Morning~
09:12 < RalieghFhang> Got a simple question, I'm using the match command to find the word "Password=" in a file. However, there are two in here and I only want to edit "Password=". There is another one labelled "AdminPassword=" so I assume it will match and eventually change the second one too.
09:12 < Guest93905> hallas
09:12 < RalieghFhang> How do I rectify this?
09:12 < Guest93905> http://pastebin.com/yvV6ZmCU
09:13 < HSL> I've got a strange issue, every few days clients get an SSL error when they try to connect to my node with socket.io app, a simple restart solves it, but that's not ideal :) anyone has a solution for this?
09:13 < hallas> HSL which error?
09:13 < hallas> RalieghFhang regexp?
09:13 < hallas> Guest93905 whats the problem?
09:14 < RalieghFhang> Using it. This is my string thus far.
09:14 < HSL> hallas " Failed to load resource: An SSL error has occurred and a secure connection to the server cannot be made."
09:14 < RalieghFhang> var newPassword = configString.match(/Password=).*)/);
09:14 < HSL> it's not using a selfsigned cert
09:14 < Guest93905> hallas: so im using a tutorial but im a bit confused. my understanding is that  on a get request the call to get projects is initiated - this is a db query which returns the json and the anon function is to render the page with the json data
09:14 < Siyfion> Guest93905: That's correct
09:14 < Guest93905> but i want to be able to make multiple calls to a db
09:15 < hallas> Guest93905 callbacks are asynchronous, meaning there is no garantee as to when or if they're ever executed, your code looks fine
09:15 < Siyfion> Guest93905: Ha, well you have a few options.. 
09:15 < Guest93905> so do i have to use nested calls within first function call
09:15 < Siyfion> Guest93905: Do your calls need to be syncronous or asyncronous?
09:15 < Guest93905> im new to node and this is confusing the life out of me :)
09:15 < hallas> Guest93905 then you need to checkout async libraries like https://github.com/gett/common
09:15 < Siyfion> Ah *can't spell
09:15 < Siyfion> Guest93905: or promises
09:16 < hallas> RalieghFhang you just need to add a rule like http://www.regular-expressions.info/lookaround.html
09:16 < Guest93905> yea i have checked out asyns to run multiple queries at one but how to i retun multiple results
09:16 < Guest93905> is it an array of json docs?
09:16 < r04r> Guest93905: maybe https://github.com/caolan/async#parallel would help you out?
09:17 < RalieghFhang> That page has no examples, I can't quite understand it and implement it to my code. x.x
09:17 < hallas> Guest93905 simple query all, and store them in an array or however you like, and send em along in res.render or res.send (or a third option)
09:17 < hallas> RalieghFhang you should read it
09:17 < Guest93905> lets see if i got this right
09:17 < RalieghFhang> It's for Perl for one.
09:17 < RalieghFhang> And for two I am and it's confusing the shat out of me.
09:18 < Guest93905> on my app. get i have one function with handles all db queries and that function will use the asyny library
09:18 < hallas> HSL i dunno how to fix it, would need more information, but since it's a restart that fixes it, seems like some sort of ssl handshake gone wrong
09:18 < Guest93905> so that will return the array then i can render with all the json
09:19 < HSL> hallas what information would you need? just a copy and paste of the code?
09:19 < hallas> RalieghFhang so an regular expression is essentially setting up a parser, which strings are sent through, besides match on actual text, you can match on text behind your text or infront of (a lookback and a lookahead)
09:19 < hallas> you can also NOT match on text infront or behind, which is what you need
09:20 < hallas> q(?=u) matches a q followed by an u
09:20 < hallas> RalieghFhang perl flavoured regexp is pretty universal, so i wouldnt worry about that
09:21 < hallas> HSL would take to much time right now, sorry
09:22 < RalieghFhang> hallas, I've been taking a look at all the "metacharacter" additions. Would /b work? It's supposed to find a match at the beginning/end of a word.
09:22 < RalieghFhang> Well, no that wouldn't work.
09:23 < RalieghFhang> q(?=u) doesn't quite seem to help. That doesn't "Not" match something, that just seems to be another way to search for a string of "qu"
09:23 < RalieghFhang> Or am I interpreting this wrong?
09:23 < benny___> I am fetching multiple remote pages. How can I perform a action once they are all done? (a sync point).
09:24 < hallas> well thats a lookahead, so you need (?<!Admin)Password
09:24 < hallas> which is a lookbehind
09:24 <@MI6> joyent/libuv: Ben Noordhuis master * ddd7e04 : build: switch to autotools - http://git.io/oB67lA
09:24 < Guest93905> hallas, r04r, Siyfion -> thanks for getting back about the async i think i get it
09:25 < RalieghFhang> <!
09:25 < hallas> benny___ use https://github.com/gett/common .step function its awesome
09:25 < RalieghFhang> That's what I was looking for. Couldn't find it on this list.
09:25 < RalieghFhang> http://www.w3schools.com/jsref/jsref_obj_regexp.asp
09:25 < benny___> Thank you, I'll look into it.
09:26 < r04r> hallas: is there a reason you prefer step over async or just preference?
09:26 < hallas> r04r it's just the library we've always used in copenhagen
09:27 < r04r> hallas: gotcha
09:27 < hallas> and ours has both serial step and parallel
09:27 < hallas> in the same flow, i think in asynch you have to mix?
09:29 < r04r> hallas: yes I think you have to mix for that. Are there docs for that fork of step since parallelity isn't mentioned in the readme?
09:30 < hallas> r04r not yet, i'd be very happy to write it up for you
09:30 < RalieghFhang> hallas: Something's wrong with this syntax and I can't figure out what exactly.
09:30 < RalieghFhang> var newPassword = configString.match(/?<!Admin)Password=(.*)/);
09:30 < hallas> RalieghFhang maybe something isnt escaped properly
09:30 < r04r> hallas: No rush for me, though I would be interested for sure :)
09:30 < RalieghFhang> ? Not sure what you mean by that. This is my error.
09:30 < hallas> alright, i'll get back to you :-)
09:31 < hallas> r04r ^^
09:31 < RalieghFhang> SyntaxError: Invalid regular expression: /?<!Admin)Password=(.*)/: Nothing to repeat
09:31 < r04r> RalieghFhang: your regular expression is starting with a ? which is a modifier character
09:31 < r04r> you will want to escape taht to match a literal question mark
09:31 < RalieghFhang> I do not know what you mean with the term escape, heh.
09:31 < r04r> the ? is a 0..1 quantifier which means the item before it becomes optional.
09:32 < hallas> just remove it, i dont think you need it
09:32 < r04r> Alright, so regex has characters which have a special meaning. The ? is one of them, and so is . and *. If youw ant to use those characters instead of their special meaning you escape them, which is adding a backslash in front of it
09:33 < RalieghFhang> It's what hallas tossed me. What I'm trying to do is match the string "Password=", but ONLY "Password=" and what comes after it. There's another string in this same file that has "AdminPassword". I'm trying to understand what character I need to search for specifically "Password=" and whatever after (.*)
09:33 < nathan7> /^Password=(.*)/
09:33 < RalieghFhang> It IS the carrot then?
09:34 < RalieghFhang> I had that input earlier but didn't test it since hallas tossed me that.
09:34 < hallas> RalieghFhang use nathans example and match per line
09:34 < nathan7> oh, actually
09:34 < nathan7> /^Password=(.*)/m
09:34 < nathan7> > 'a=b\nAdminPassword=x\nPassword=a\nx=y'.match(/^Password=(.*)/m)[1]
09:34 < nathan7> 'a'
09:34 < RalieghFhang> Why would I need to match multiple lines?
09:35 < hallas> ^ is also a special character, which means nothing before this point
09:35 < hallas> it matches the beginning
09:35 < nathan7> of a line
09:35 < RalieghFhang> (/^Admin)Password=(.*)/m);
09:36 < RalieghFhang> Oops
09:36 < RalieghFhang> Wrong copy
09:36 < RalieghFhang> (/^Password=(.*)/m);
09:36 < RalieghFhang> What I currently have. Would that be correct?
09:36 < hallas> why the outer parantheses?
09:37 < RalieghFhang> ((  ))
09:37 < RalieghFhang> To close the entire thing
09:37 < RalieghFhang> (.*) in its own.
09:37 < RalieghFhang> I ran that code but the output is the entire file without parsed "new lines"
09:39 < RalieghFhang> Ah wait, at the top it did find it though. Just gotta toss [1] around the log
09:40 < RalieghFhang> Perfection.
09:40 < RalieghFhang> Thanks for the assistance fellas.
09:56 < RalieghFhang> Tried searching, but couldn't find this. What does the "10" in this line actually do? I understand the bracket but not the later 10
09:56 < RalieghFhang> parseInt(newNumData[2], 10)
09:57 < GreenDog> base 10
09:57 < RalieghFhang> Got it.
10:00 < adek> I have worker process. From master I want to send it message and wait until it finishes and sends confirmation that it finished and only then allow to send next message to worker. Is there some pattern in node or package which employs this?
10:00 < adek> Worker is spawned using cluster.
10:05 < RalieghFhang> Just found a logical error I need help overcoming.
10:05 < RalieghFhang> http://hastebin.com/hacojobesu.coffee
10:19 < mkozjak> hi
10:20 < RalieghFhang> To repeat for new users:
10:20 < RalieghFhang> Just found a logical error I need help overcoming.
10:20 < RalieghFhang> http://hastebin.com/hacojobesu.coffee
10:22 < ssafejava_> you would have to fs.readFile it again.. but why would you read & write multiple times? in the script you have, you should just be making the replacements and doing a writeFile() at the end
10:25 < mkozjak> i'm trying to create a http response with socket.write('HTTP/1.1 200 OK\n\nContent-Type: text/plain\n\nTESTMSG, function() { console.log('i've sent a response'); socket.end()});
10:25 < ssafejava_> adek: you're going to want to do a loop where you pop() or unshift() a worker ID off an array of worker IDs. pop the first one, send that worker a message & a callback. on the callback, call the whole thing again, popping another ID off the array, until the array is empty
10:25 < mkozjak> the problem here is i get the callback, but the http msg is never sent
10:26 < RalieghFhang> How would I writeFile ALL of the changes then?, just keep giving it arguments? "fs.writeFile('sc_serv.conf', replaceMaxUser, replacePassword, etc);"?
10:26 < RalieghFhang> Ignoring syntax breaking for correct grammar of course.
10:27 < r04r> RalieghFhang: the second parameter for writeFile is the new file contents, you just give it a string containing it all
10:27 < r04r> So you 1) read all of the file to a string, 2) make a bunch of changes to the string, 3) write the string back to the file
10:27 < RalieghFhang> so create a new var containing all the others? Wouldn't that just make it a line of silly characters? I've no idea on how to go about that properly.
10:28 < r04r> i suppose all code is just lines of silly characters when you look at it that way
10:28 < r04r> so yeah do that
10:28 < RalieghFhang> Well not like that hah.
10:28 < adek> ssafejava_: This looks cool! Thank you for the hint
10:28 < RalieghFhang> I mean if I were to "var replaceAll = newAdminPass + newPassword + etc
10:28 < ssafejava_> RalieghFhang: no no.
10:29 < ssafejava_> RalieghFhang: Each time you're just modifying the same string. Each one of your vars contains all of the data
10:29 < r04r> RalieghFhang: http://hastebin.com/vewijiriji.coffee
10:29 < ssafejava_> so instead of `var replaceMaxUser = configString.replace...`, just do `configString = configString.replace...` and keep going
10:29 < ssafejava_> then fs.writeFile('sv_serv.conf', configString)
10:30 < r04r> oh i forgot to delete two writes, there: http://hastebin.com/hoqeroxaje.coffee
10:30 < RalieghFhang> Hold on while I try and digest the change.
10:31 < RalieghFhang> Ahhh
10:31 < RalieghFhang> I see.
10:32 < RalieghFhang> That makes a lot more sense. I wasn't aware that configString could be modified once it was set. Which in retrospect is stupid because that's exactly what I was doing one at a time.
10:37 < ssafejava_> Yep; just keep in mind, string.replace() returns the modified string, but doesn't modify the inputted string. So a line like `var a = "1234"; a.replace("1", "4");` Will do nothing. That one's bitten me a few times
10:37 < PeterNor> Guys i need Hellp
10:38 < ssafejava_> yeah go ahead
10:40 < RalieghFhang> Got it, thanks for the heads up.
10:41 < PeterNor> In Node what ever u put static files like .CSS , . JS in HTML ... It makes a request to Server in Order to get the File .... In My case i have chat-design.js in my JS folder ... On load my html <which is served by Node > It gives 404 page not found for js file
10:41 < PeterNor> Beside it is there in JS folder ... I have given path correctly ... It says it can't find
10:42 < PeterNor> I'm completely lost please Help
10:44 <@MI6> joyent/libuv: Ben Noordhuis master * d2f67b9 : build: use AM_PROG_AR conditionally - http://git.io/XJzUxg
10:52 < PeterNor> PLEASE HELP ANYONE
10:57 < bnoordhuis> PeterNor: it usually helps when you post a gist/pastie/pastebin link to your code
10:57 < bnoordhuis> for all our qualities, most people in this channel are not mind readers
10:57 < bnoordhuis> that's #esp
11:03 < PeterNor> :D OKay
11:06 < Guest93905> hello friends
11:06 < Guest93905> can some one have a look at this: http://pastebin.com/SN0uDJUw
11:06 < Guest93905> ignore the fact there is only one call in async function
11:07 < Guest93905> im just testing -> the jade  is throwin not defined on dashData
11:08 < ssafejava_> Guest93905: See docs (https://github.com/caolan/async#parallel), just return the data in the callback
11:10 < r04r> ssafejava_: agree, but that still shouldnt give an undefined there ,right?
11:15 < ssafejava_> yeah it depends on what his template is doing. he could be calling 'dashData' inside the tpl
11:15 < Guest93905> hum
11:16 < Guest93905> proj: function(callback){
11:16 < Guest93905> : = unexpected
11:16 < Guest93905> im clearly doing it wrong xD
11:18 < ssafejava_> um. what? provide some context
11:20 < Guest93905> based on the link you showed me my code now looks like : http://pastebin.com/gGmKDQuB
11:21 < r04r> Guest93905: arrays are not objects
11:21 < ssafejava_> Guest93905: Object key names can't have periods, either
11:21 < r04r> also that
11:21 < r04r> well I'm pretty sure they can actually, just need to wrap it in quotes but still
11:21 < nathan7> Of course they can
11:21 < nathan7> Any string.
11:21 < r04r> just not with dot notation is what was meant
11:21 < ssafejava_> right.
11:22 < ssafejava_> async won't create a nested object that way, though
11:22 < r04r> Guest93905: http://pastebin.com/D3efmkpd i think you are wanting something along the lines of this
11:22 < Guest93905> basically im trying to return an array of objects
11:22 < ssafejava_> hard to tell how you're planning on using it because there are lines missing from that latest pastebin
11:23 < r04r> http://pastebin.com/GR8t6ayd fixed a random quote, sorry
11:24 < r04r> shit sorry I mean http://pastebin.com/J6UnJjRb
11:25 < RalieghFhang> http://hastebin.com/dedehunajo.hs
11:25 < RalieghFhang> My problem is listed/explained at the bottom
11:26 < ssafejava_> RalieghFhang: you have the port, it's in newPort
11:26 < Guest93905> thanks for that
11:27 < RalieghFhang> ssafejava_, no it's just a bad variable name. newPort simply parses the old port data into an integer. The new port is generated on the portResult variable line.
11:27 < ssafejava_> RalieghFhang: then generate it on a different line, and pass it into the line where you do the replace
11:27 < opc0de> Hi, I want to create in javascript an integrated window to my web page that looks like a linux terminal, where the user can enter my own commands. Is node.js can help me to create that ? and, if yes, have you links for help me ?
11:27 < r04r> RalieghFhang: well move that generation to tis own line, put iti n a variable then there you go :D
11:27 < opc0de> please
11:28 < RalieghFhang> Something like  var generate = (/PortBase=(.*)/, 'PortBase=' + newPortData[1] + (newNum+10));
11:28 < RalieghFhang> Is that correct?
11:28 < r04r> opc0de: Node.JS could help if the commands are interacting with a server, but from what you described it's not likely
11:29 < ssafejava_> RalieghFhang: No, just generate the port. 
11:29 < ssafejava_> RalieghFhang: `var portNum = newPortData[1] + 10;`
11:29 < ssafejava_> i don't know what you're doing with newNum, it's always 0
11:29 < RalieghFhang> Yeah, just clicked when you said that.
11:30 < r04r> opc0de: Node.JS does not run in the web browser, it runs on a server. Anyway, there are a few nice javascript terminal libraries like hterm, jsterm and a few other ones
11:30 < r04r> 5~
11:30 < RalieghFhang> newNum will always be zero, until this starts and then it will increase the port by 10
11:31 < opc0de> ok ok r04r, thanks, i will look hterm and jsterm
11:31 < Guest93905> r04r how does that scale when calling more functions in the async pattern - i mean this line:  res.render('dash', {'projects': results[0]});  ('dash', {'projects': results[0], 'projects': ?})
11:32 < RalieghFhang> I just realized that generation data simply APPENDS 10 (making port go from 8000 to 800010)
11:32 < RalieghFhang> What's the deal with that? Haha
11:33 < SomeoneWeird> RalieghFhang, parseInt(newNum)+10
11:34 < r04r> Guest93905: Not very well. If you just want to call a bunch of async functions and pass all their results as an object to your render function you'd do something like http://pastebin.com/hECCHxVR
11:34 < r04r> notice that it gives the functions in an object now, not an array. 
11:34 < r04r> All of thisi s handled at the docs, https://github.com/caolan/async#parallel
11:36 < Siyfion> Say I have a promise in node that checks a message queue, if it finds a message it returns another promise that processes the message, if it doesn't find a message, how can I "escape the chain" of promises? I would normally throw an error, but it's not really an error per-se...?
11:36 < Guest93905> r04r: yea i tried this in the http://pastebin.com/gGmKDQuB but as i mentioned i get a server erroe when launching on the : character object : function() anyway ill read over it again im sure im doing something stupid
11:36 < Guest93905> :)
11:36 < Siyfion> Or do I just add some checks to my error handling code at the end of the chain to detect this "non-error"...?
11:37 < r04r> Guest93905: On line 4 you have [, that should be { for an object. On line 5 you haev "dashDat.proj", you probably just want "proj" or "project" there
11:38 < r04r> also Guest93905 I am not suer how async likes it that you return one of the functions (in case of error) without calling the callback. It may be fine, but I'm not sure.
11:39 < Guest93905> r04r : ah ok thanks ill play about with it - thanks for the helps
11:39 < r04r> Guest93905: Good luck
11:40 < Guest93905> it was the [ / { giving the launch err
11:45 <@MI6> joyent/libuv: Ben Noordhuis master * d0be852 : test: fix fs_chown when running as root (+1 more commits) - http://git.io/-Wf3_A
11:55 < david_> QUIT
11:59 < DelphiWorld> yo all
11:59 < DelphiWorld> can someone see this npm error? http://paste.ubuntu.com/5835993/
12:00 < nathan7> DelphiWorld: those are ancient versions of node and npm
12:01 < DelphiWorld> nathan7, what should i do? i'm in ubuntu lts
12:02 < nathan7> DelphiWorld: use the PPA
12:02 < Siyfion> DelphiWorld: It's pretty easy to sort out: https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager
12:03 < DelphiWorld> let's try it out
12:08 < DelphiWorld> LOL
12:08 < RalieghFhang> Is there a good guide on creating a webserver in node.js? Including things such as placing elements, buttons that run scripts, and variable boxes?
12:09 < DelphiWorld> Siyfion: dude, so funy... cd nodejs v* :-P
12:09 < DelphiWorld> first time i see that
12:10 < zaleb> http://expressjs.com/guide.html
12:13 < DelphiWorld> nathan7: using PPA...
12:15 < SomeoneWeird> RalieghFhang, node is backend, that's all frontend stuff
12:18 < RalieghFhang> SomeoneWeird I'm aware, but I was told not to mix HTML/PHP stuff in with Node.
12:18 < SomeoneWeird> you have to mix html stuff, how else are you supposed to write a website? :)
12:18 < RalieghFhang> Unless there's a simple way to import PHP POST variables in Node
12:18 < RalieghFhang> Not sure why I said HTML lol
12:19 < DarcyB> SomeoneWeird: you asked about writeing a webserver... not a website
12:19 < DarcyB> err RalieghFhang 
12:19 < SomeoneWeird> DarcyB, RalieghFhang asked, and yes, but he's asking about frontend components
12:19 < RalieghFhang> True. My bad on that. I'm running Apache currently.
12:20 < RalieghFhang> Simply put, is it possible to pop a simple PHP page that posts variables upon submit and have those variables read at the very start of a Node script?
12:21 < SomeoneWeird> 'start of a node script' doesn't really make sense
12:21 < r04r> Does anyone have a guesstimate on when harmony will become default in node?
12:21 < RalieghFhang> As in these variables are caught globally. At the very start before any functions or anything are ran
12:21 < RalieghFhang> I assume I could have PHP write these variables to a file and then have Node read from it, but that seems... Wrong for some reason.
12:22 < SomeoneWeird> RalieghFhang, that's not how node works, node is completely seperate from php
12:22 < RalieghFhang> Again I'm aware.
12:22 < RalieghFhang> Basically, at the VERY bottom of it I need buttons that launch scripts.
12:22 < RalieghFhang> From a website.
12:22 < RalieghFhang> Post variables and launch scripts.
12:23 < SomeoneWeird> yes, then basically on the node side, you say "when i get a POST request to /startscripts", do this function which starts the scripts
12:24 < RalieghFhang> How would I go about doing that? What language will need to send that POST request since you said PHP is bad? 
12:24 < SomeoneWeird> javascript?
12:24 < SomeoneWeird> :)
12:24 < keesj> Hi, can I talk to an admin of the jenkins node?
12:24 < SomeoneWeird> wait, what
12:24 < SomeoneWeird> just a php request?
12:24 < SomeoneWeird> just make a form submit to the endpoint
12:25 < SomeoneWeird> er, s/php/post
12:25 < RalieghFhang> I really just need a good point in the write direction for this. I've coded the backend scripts for what I need. Now I just need a way to tie in the variables from input boxes on a page, plug them into Node scripts, and run those scripts.
12:25 < RalieghFhang> write.... You can tell I've been up for a while.
12:27 < DarcyB> RalieghFhang: set the correct URL pointing at your node app within the <FORM> of the html document
12:28 < DarcyB> node runs as it's own webserver
12:28 < DarcyB> (app server to be more prescise)
12:30 < RalieghFhang> I'm terrible at understanding any of this without examples/documentation.
12:30 < RalieghFhang> Bah.
12:30  * RalieghFhang continues searching Google
12:33 < SomeoneWeird> Ralt, https://gist.github.com/anonymous/5908872
12:34 < zaleb> worst case scenario you could do shell_exec('node /path/to/yourapp.js') in php
12:34 < zaleb> but your better of having your views in nodejs
12:35 < zaleb> or as suggested POST to nodejs endpoint
12:48 < mkozjak> hmm, i'm using net.createServer to get connections, and .on('data) works (it echoes everything it gets), but .on('connection') says nothing, so it seems like that event is not triggered. why is that?
13:03 < gbit86> Anyone here have experience with setting up Stanza/Upstart scripts in Ubuntu 12?
13:03 < gbit86> I am having issues with my script not auto starting on reboot
13:03 < gbit86> start on filesystem or runlevel [2345]
13:03 < gbit86> stop on runlevel [06]
13:03 < gbit86> I don't know what is wrong with that
13:04 < gbit86> if I manually start it by typing start appName then it runs
13:23 < dagerik> how can i access "name": "tom", "cardNumber": "1337", "friendName": "dag erik", "friendTlf": "41617609", "friendEmail": "dvikan@iterate.no",
13:24 < dagerik> when i have a function exports.dosomething, how can i invoke it in same file?
13:25 < sgimeno> dagerik:  exports.dosomething ?
13:25 < sgimeno> dagerik:  exports.dosomething()
13:34 < aslant> anyone know why querystring stopped handling nested objects in node 0.3? I've seen isaacs state that it was terrible, but without explanation
13:35 < pirho> anyone know if you can interleave vertices with say, float positions and ubyte texcoords?
13:36 < pirho> i've certainly been able to interleave vertices with both float positions and texture coords or byte positions and texcoords but i can't seem to be able to interleave a mixture
13:36 < pirho> i'm using DataView
13:36 < pirho> don't really want anyone to debug my code just wondering if it's a waste of time debugging this
13:45 < DefSek> hey ppls
13:45 < DefSek> iam looking for jquery programmers with backbone js experience
13:45 < DefSek> any one interested to take a years assigment in NYC 
13:45 < DefSek> $70 per hour
13:55 < quizme> hi
13:55 < quizme> are there any good Scheme or LISPS running on the node.js platform ?
14:01 < r04r> quizme: I don't know, but... Why? I found http://fargo.jcoglan.com/
14:01 < jdelgado> DefSek: I would try HN
14:01 < quizme> r04r cuz I love node.js but i just wish it had a lisp syntax
14:02 < r04r> quizme: Ok lol
14:07 < Beg> I am getting older and i start to feel how my bad eyes are the reason of occurances of bugs
14:08 < jdelgado> Beg: Gunnar glasses - best purchase of my life
14:08 < Beg> I don't wanna look hipster, but yes, I need new glasses, thats for sure
14:09 < jdelgado> Beg: Lol, there are a couple of styles that don't look hipster.
14:09 < Beg> :DDDD
14:09 < Beg> now I had a error for 10 minutes, because I wrote cuRRRent-page
14:11 < sam__> hi
14:11 < jdelgado> lmfao
14:11 < Beg> have you tried meteor jdel?
14:11 < Beg> It's magic
14:12 < jdelgado> Beg: I would like to, but I don't really have enviorment which it would work well.
14:13 < jdelgado> Beg: Maybe the new project.
14:13 < jdelgado> next*
14:14 < Beg> It's slick and nice, it's too robust tough, it won't die because of small errors :/
14:14 < Beg> or maybe my code is bad, i think thats the reason
14:15 < jdelgado> Did they address all the security concerns? I remember in the beginning there was something that allowed full DB access to the client
14:18 < Beg> jdelgado-> I just checked it out, and they seemed to have addressed it. I havn't tried hacking it to the fullest to be able to give you a proper answer.
14:18 < Beg> You are able to write deny/allow rules
14:18 < Beg> and remove the insecure and autopublish package
14:19 < jdelgado> Right on, I might take a look sometime soon
14:19 < patate_> Hi! I don't quite get what backbone.js is. Could anyone tell me why I should be using it? 
14:20 < jdelgado> patate_: Are you trying to make a one-page browser client? If not, then you don't need it.
14:20 < patate_> jdelgado: I built an API and now I'm building a web client. So I kinda guess that's a YES to your question.
14:21 < patate_> So I should be checking it out
14:21 < patate_> It might help me turn my project into something nice instead of a jQuery hell
14:21 < jdelgado> patate_: In my professional opinion, I'd look at AngularJS and compare it to Backbone, then decide which fits what you are trying to do better.
14:22 < jdelgado> patate_: We use Angular in all our production clients
14:22 < brimstone> jdelgado: did you evaluate ember as well?
14:23 < patate_> jdelgado: any major pros/cons between both? thx
14:23 < jdelgado> brimstone: We did indeed, came to the conclusion that it was a headache to use ember-data, and there were some other minor things as well.
14:23 < jdelgado> patate_: Backbone is as minimal as you get, so you're going to have to code a lot. Angular is pretty much everything you need, plus it adds two way bindings.
14:24 < patate_> oh sounds really great
14:24 < Beg> but yes, jdelgado meteor seems to be the perfect fit for me, I felt "stuck" in other solutions/own solutions
14:24 < Beg> either I had to work to hard to get stuff working on both client and server or it just was to much reinventing
14:25 < jdelgado> Beg: Sharing models is pretty impressive, but I hate using other peoples code to that degree in production without really going over it.
14:25 < jdelgado> Beg: We have some form of sharing right now, but not as seamless as meteor
14:29 < Beg> jdelgado-> Yes, it's very hard to change code from meteor imo, I'm probably doing something wrong, but when I edit meteor files, they just get replaced when I reboot the program
14:29 < Beg> jdelgado-> meteor is to new to have a great library of examples and costumization
14:30 < Beg> but it's good to some extent, it forces you to get a grip of how to actually use it yourself
14:30 < Beg> everything is written in the docs, you just have to find it
14:31 < Beg> the next step for me is just to learn coffeejs
14:31 < jdelgado> No!
14:31 < jdelgado> No!
14:31 < Beg> okey! good..
14:31 < jdelgado> Cofee?
14:31 < jdelgado> No!
14:32 < Beg> I had a feeling it added a layer of annoyance :D
14:32 < jdelgado> I got into Coffee a year ago, I thought the syntax was really nice. Debugging became painful, sometimes the compiler would randomly throw in stuff I didn't expect and overall was just horrible.
14:33 < neeky_> sails also has promise that hits somewhere between neteor and backbone, but has a lot of dev work left
14:34 < neeky_> i wish devs would not dangle a carrot out there, making we try something that's so far from production quality
14:34 < Beg> I don't like the meteor client, I feel it's unnecessary
14:35 < Beg> it just adds a level of annoyance..
14:35 < neeky_> we're probably in the same position: I've spent a lot of time on the server, so I dont feel ike the clinet should have to re-implement all my server side work
14:35 < neeky_> i just want it to 'work' and let me be lazy
14:38 < jdelgado> I still think that a RESTful API combined with some browser clients is the best way to go. These new frameworks just add unessesary complexity to save a little time.
14:39 <@MI6> joyent/libuv: Ben Noordhuis master * 5a3b8f9 : test: fix spawn_setgid_fails and spawn_setuid_fails - http://git.io/zyDe-Q
14:41 < Beg> jdelgado-> [16:39:36,999] insert failed: Access denied, when trying to access, a db without setting allows and removing insecure&autopublish
14:55 < pancake> im trying to use an irc bot that was working with ndoe 0.8, but on 0.10 i get no errors, and it keeps reconnecting to the server all the time
14:55 < pancake> (using irc module)
14:55 < Beg> LOL! I just thought of a cool tattoo.
14:55 < Beg> ("wifesname"+"yourname") 
14:55 < pancake> is there any change in 0.10 that can result on this?
14:56 < kenperkins> anyone have a blog post that talks about the nodeconf sessions?
14:57 < r04r> pancake: Do you get any error messages? Are you listening for the error event? (Sorry for messaging you before, pressed the wrong key in client :/)
14:59 < neeky_> so, would angular or backbone be better if I have an api that 'properly' uses HTTP verbs for CRUD?
14:59 < pachet> better than meteor you mean?
15:00 < neeky_> ive already written the server app, so i was under the impression that meteor would not be a best case 
15:01 < neeky_> doesnt meteor do the back and the front, like sails
15:01 < neeky_> ?
15:01 < pancake> r04r: nope i get no error messages
15:01 < pancake> just reconnecting all the time, "connection gets end event" 
15:01 < pachet> neeky_ not quite like sails, but yes
15:01 < Guest93905> ko simpleGrid easy to  produces multiple instance son single page with different data?
15:02 < neeky_> since my main clinet is a native android app, i'm writing the backend myself
15:02 < pachet> neeky_ if you're just looking for a lightweight crud wrapper over XHR on the client for syncing a model or something, angular is going to be overkill
15:03 < neeky_> the web interfce is mainly an admin interface to manage data via the models
15:03 < neeky_> user admin, etc
15:03 < raduu> hey I have started a node process and I suspect I used the wrong version. How can I check that ? On node -v I get 0.9.0 but I could swear that I was using 0.10.11 . I use nvm to switch versions and I m not sure if it was switched before of after starting the server
15:04 < neeky_> but i would rather have the client interact with the REST api just like the mobile client
15:04 < raduu> can I sniff the process somehow?
15:04 < pachet> raduu process.version inside the process
15:04 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:05 < neeky_> im looking for quick implementation, with bootstrap for UI framework, and XXX for REST client
15:05 < neeky_> the data is all json, and I use GET, POST, PUT, and DELETE http verbs
15:05 < statu_> hi!
15:06 < neeky_> so, backbone > angular for this type of task?
15:06 < raduu> pachet but that still requires a restart (I know that)
15:08 < kenperkins> i need a nodeconf attendee to proofread a blog post
15:08 < kenperkins> any takers?
15:08 < pachet> neeky_ angular has more of a learning curve and only starts to pay off as your app gets bigger
15:08 < pachet> neeky_ also i'm biased because i've had my share of troubles with its REST wrapper ;[
15:09 < pachet> kenperkins i'd be doing you a disservice if i tried to proofread it :[
15:10 < bnoordhuis> kenperkins: not an attendee but interested
15:11 < jdelgado> Beg: I'm sure there is a work around. :)
15:16 < kenperkins> anyone have a link to gallery from nodeconf?
15:16 < pachet> raduu oh the process is running and you dont want to restart
15:17 < pachet> raduu http://offthelip.org/?p=206
15:17 < jdelgado> Best way to kill a parent process without kiling the child process?
15:18 < raduu> thanks
15:19 < bnoordhuis> jdelgado: send the signal to the process, not the process group
15:19 < jdelgado> bnoordhuis: Looking to self terminate the parent, but not the child, way to pragmatically accomplish that? 
15:21 < pachet> jdelgado if you're using child_process.spawn, just supply the 'detached' property on the options object
15:21 < pachet> then you can terminate at will, commander
15:21 < bnoordhuis> jdelgado: process.exit? spawn with detached=true
15:21 < bnoordhuis> what pachet said :)
15:21 < jdelgado> Ahh, brilliant, missed that options. Thanks guys!
15:30 < kenperkins> bnoordhuis see the pm?
15:36 < bnoordhuis> kenperkins: yep, but i'm in a conference call atm :(
15:36 < kenperkins> heh
15:58 < onr> what was the module that handles all user management
15:58 < BillCriswell> If I know Javascript and enjoy writing it and want to learn a new server-side language (I know PHP pretty well, just not crazy about the syntax) should I just familiarize myself with Node? Is there a reason I should still try to "master" a language like Python or Ruby?
16:00 < durango> Is there a way to get req.body to accept POST data like items[][qty], items[][name], etc.?
16:01 < wyled> in which framework?
16:01 < nsno> BillCriswell: define 'master'
16:01 < durango> wyled: sorry in express
16:01 < BillCriswell> nsno: Is there a really I should really try to learn these languages if I could accomplish most of the things I need to do in Node?
16:02 < wyled> i use these for restify, which is basically the same: 
16:02 < BillCriswell> Is there a reason*
16:02 < nsno> what do you need to do, particularly?
16:02 < stompyj> Question about npm.  If you have a dependency that is pointing to a npm based repo.  Then you switch that dependency to a git repo.  How do you get npm to reload from the git repo, instead of the old npm repo.  It looks like npm install doesn't check
16:02 < wyled> @durango http://pastebin.com/nEbBCrrd
16:02 < nsno> for web stuff, you'll be fine with node/express. python has plenty of uses in other domains though, and ruby is a great language for writing DSLs
16:02 < wyled> you'd just substitute restify for express
16:03 < BillCriswell> nsno: It's all web based things I suppose. I've looked into express and it seems to fit what I need.
16:03 < durango> wyled: wait u use restifyt *and* express? :/
16:03 < BillCriswell> nsno: Yeah, mostly web.
16:03 < wyled> no i just use restify
16:03 < durango> oh
16:03 < nsno> BillCriswell: stick with node then, it's a great technology to learn.
16:03 < wyled> but restify is express stripped of the views stuff
16:03 <@MI6> joyent/libuv: Ben Noordhuis master * 3b9cfe2 : build: use AM_SILENT_RULES conditionally - http://git.io/TnnA8Q
16:03 < durango> unfortunately this is more than just an api *sighs*
16:03 < wyled> right, but those options should work
16:04 < BillCriswell> nsno: Sounds good to me. Not having to switch languages between front and back-end stuff would be sweet.
16:04 < nsno> BillCriswell: I find that's actually the least significant benefit of using node
16:04 < nsno> i can see what people market node that way, but it's not important at all
16:04 < wyled> at least bodyParser does i know for sure
16:05 < BillCriswell> nsno: What's teh most important thing to you?
16:05 < wyled> app.use(express.bodyParser());
16:05 < nsno> BillCriswell: the sheer speed, streams, async IO etc. all change the way you program
16:06 < BillCriswell> It's like "event driven" instead, right?
16:06 < nsno> yep. i'm sure there's better speakers than me you can find on youtube to extol node to you :)
16:07 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:07 < BillCriswell> nsno: Got it.=)
16:09 < BillCriswell> nsno: Thanks for the help!
16:10 < nsno> nae a bother. don't forget to check out your local node user groups/meetups too
16:11 < BillCriswell> Sure will.
16:25 < Guest93905> easiest way to add multiple paged grids in a single page
16:25 < Guest93905> each with different set of data
16:29 < jayz> @isaacs - If you're available, I'm having trouble publishing to npm with what I think is a bug.  npm owner shows me as the owner, but publish claims I can not.  https://github.com/isaacs/npm-www/issues/346  Any chance you could provide some guidance/help please?
16:30 < niggler> are you logged in jays?
16:30 < jayz> @niggler - yes npm login has me logged in.
16:31 < niggler> lol https://npmjs.org/package/surveymonkey
16:31 < niggler> can you unpublish and then publish again?
16:33 < jayz> unpublish has the same error (I'm not the owner): npm ERR! Error: forbidden user: null not authorized to modify surveymonkey
16:33 < jayz> grrr
16:34 < jayz> Any idea why it thinks my user is null?
16:34 < niggler> did you log in properly?
16:34 < niggler>  / try another computer
16:34 < jayz> I think so .  . . .npm login and no errors.
16:35 < jayz> Hmm - that is a good idea for the other computer. I can try to give that a try.  Also just thinking, I use zsh - maybe has something to do with that?
16:37 <@trevnorris> emilsedgh_: gc doesn't guarantee that rss usage will drop to where it was before.
16:38 < niggler> nah jayz sometimes the local npm gets screwed up
16:39 < jayz> @niggler - thanks for helping to debug!  I removed my npmrc auth and then re-logged in.  Issue solved - publish worked!  Thanks for your help!
16:39 <@trevnorris> emilsedgh_: because of heap fragmentation you'll want to look at trends in heapUsed, which from your post shows that it stays levels itself out
16:40 < emilsedgh_> trevnorris: yes, heap seems fine. however, rss is not. is this something i should be worried about?
16:40 < emilsedgh_> trevnorris: i mean, wont rss usage raise until system starts swapping?
16:40 < emilsedgh_> or the process getting crashed?
16:41 <@trevnorris> emilsedgh_: no. v8 is maxed out at 1.5GB default on x64 system. and when it approaches the limit then v8 does a lot more to cleanup the heap.
16:41 <@trevnorris> emilsedgh_: until then it does a lot less to improve performance.
16:41 < emilsedgh_> trevnorris: well, i tried --max_old_size=200 to try limiting the number, but it did not have any effect
16:42 < emilsedgh_> --max_old_space_size=200
16:42 <@trevnorris> emilsedgh_: option is --max_old_space_size
16:42 <@trevnorris> ok :)
16:42 < emilsedgh_> yeah, that should limit the usage to 200, right? because it didnt and i got worried :)
16:44 <@trevnorris> not exactly, since it's not --max_total_space_size. here's some good information: http://code.google.com/p/v8/issues/detail?id=847
16:44 < emilsedgh_> thanks a lot trevnorris :)
16:44 < emilsedgh_> very much appreciated
16:44 <@trevnorris> np
16:44 < pachet> niggler i found two issues that you submitted to one of my repos like, a month ago
16:44 < pachet> for some reason i had gotten unsubscribed to it
16:44 < pachet> anyway, were those part of an automated sweep?
16:45 <@trevnorris> emilsedgh_: rough overview, v8 has different spaces. one is new space the other old space. after an object has existed so long, or so many other object are created, it's moved from new space to old space.
16:46 <@trevnorris> s/the other/another is
16:48 < emilsedgh_> trevnorris: ah i see :)
16:50 < dylukes> Hey guys, so I'm looking at the new Streams API.
16:50 < dylukes> Is there a way to propagate closure?
16:50 < nathan7> dylukes: .pipe will forward 'end'
16:50 < nathan7> dylukes: a.pipe(b)
16:50 < niggler> lol pachet i look at npmjs.org randomly and look at the 10 most recent packages, and i noticed some missing stuff from them
16:51 < dylukes> well, I mean within the pipeline... 
16:51 < nathan7> dylukes: a emits 'end', pipe magic calls b.end()
16:51 < dylukes> ah okay.
16:51 < dylukes> Can .end() push?
16:51 < dylukes> I wanted to create a simple Transform stream to count inputs.
16:51 < phrearch> hey
16:52 < dylukes> I'm kind of disappointed the Streams are limited to String/Buffer data. I was hoping for something a bit more like Haskell conduits.
16:52 < dylukes> In practice, buffer/string data is usually only useful at IO points.
16:52 < dylukes> Everything in between tends to be abstract.
16:53 < emilsedgh_> trevnorris: limiting max 'new' size helped. thanks a lot :)
16:53 <@trevnorris> emilsedgh_: yup. glad I could help. :)
16:55 < dylukes> nathan7: any thoughts?
16:56 < dylukes> It'd be nice if I could push generic objects through without serializing them.
16:56 < dylukes> It seems to me that in practice both the old and new Streams fail to solve useful problems.
16:56 < dylukes> 1) raw data that hasn't been sliced up into meaningful atomic chunks is useless to parse, as each stream has to handle incomplete data
16:57 < dylukes> 2) any remotely complex operations on data generally result in some form of decoding/encoding to an abstract structure.
16:57 <@mbalho> dylukes: you should have a run through https://github.com/substack/stream-adventure#stream-adventure
16:58 < r04r> that looks exciting
16:58 < statu_> hi! Is it this correct? this.db = new Db(...) ?
16:58 < dylukes> 3) They're squarely push based. This is a matter of taste, but it makes lookaheads obnoxious.
16:58 < statu_> or I have to do: new Db(..., function(error, db) {this.db = db; });
16:59 < dylukes> 4) There isn't a consistent way to propagate events upstream.
16:59 < dylukes> Say, parsing of a protocol botches and you want to force the upstream to close or restart.
16:59 < dylukes> Or you detect that a checksum doesn't match the data and you want to request retransmission...
17:00 < kenperkins> http://mylifeincode.com/post/54437837179/thoughts-on-nodeconf-2013-4-square-and-the-auld
17:01 < statu_> kenperkins, is this for me?
17:01 < kenperkins> for anyone? 
17:02 < statu_> kenperkins, ah, ok, I thougtht you were responding my question
17:03 < kenperkins> statu_: sorry for the confusion
17:03 < kenperkins> mikeal which issue should summary blog posts go into (or a new issue)
17:04 < kenperkins> (mikeal i.e. like the photobomb one)
17:05 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:09 < dylukes> mbalho: those are pretty much all trivial silly things
17:10 < dylukes> they don't illustrate any remotely complicated stream operations or compositions.
17:10 <@mbalho> dylukes: did you write a working solution for the last one yet?
17:10 < dylukes> No I did six of them and then got tired of it.
17:11 < dylukes> Yeah, no. Still has the same problem.
17:11 < dylukes> I'm not interested in attaching an event handler externally, but internally.
17:12 < dylukes> Bolting events on like this seems odd to me, as opposed to a generator model.
17:13 < dylukes> Also mbalho, case in point with that last exercise.
17:13 < dylukes> It's a completely trivial thing to do without streams.
17:14 < dylukes> Pipes are just function composition with deferred/continuous input and back-pressure handling.
17:14 < dylukes> A task like that takes zero advantage of where streams are useful.
17:14 < dylukes> Unless it's feeding it several hundred files.
17:14 < substack> dylukes: you misunderstand where the benefit is
17:15 < substack> dylukes: the benefit is largely that core has a unified api and many userland modules also give you streams
17:15 < substack> how would that even be "a trivial thing"?
17:15 < dylukes> That's cool, but if you're limited to strings and buffers you can't do a lot of useful things. 
17:15 < substack> you're not?
17:15 < substack> where are you even getting this stuff
17:16 < dylukes> Everything I've seen so far in the API for streams enforces Buffer/Stream.
17:16 < dylukes> Buffer/String*
17:16 < substack> dylukes: don't even read the core docs api
17:16 < substack> it's horrible
17:16 < dylukes> In any case, if I try to push non strings/buffers it doesn't work.
17:16 < substack> read https://github.com/substack/stream-handbook#readable-streams
17:16 < kenperkins> +1 for substack's handbook
17:17 < dylukes> substack: awesome, thanks :)
17:17 < substack> dylukes: { objectMode: true }
17:17 < substack> dylukes: or if you use through, you get objectMode by default
17:17 < dylukes> Oh thank god that exists :D
17:17 < dylukes> awesome
17:17 < kenperkins> substack: best part of stream-adventure for me (having used streams pretty regularly) was just exposure to some good best practices modules
17:18 < pachet> kenperkins nice writeup-- but you forgot to talk about the goats
17:18 < dylukes> substack: btw I do appreciate the tutorial.
17:18 < kenperkins> pachet: :(
17:18 < dylukes> Any thoughts on the proper way to "force" options? I'm always conflicted.
17:18 < kenperkins> I didn't see goats
17:18 < dylukes> In sub "classes".
17:18 < kenperkins> pachet ^
17:18 < dylukes> I usually just force set the options and through errors if they've already been set, rather than silently override.
17:18 < substack> dylukes: stream-adventure was more to teach complete beginners how to get up to speed while not boring people who have used streams before
17:18 < dylukes> ah okay.
17:18 < substack> dylukes: you should just do HTML STREAM and SECRETZ
17:18 < substack> and skip the rest
17:19 < pachet> kenperkins they were in a little pen on the way to the streams/distributed chat building
17:19 < dylukes> I was working on a couple streams libraries in Haskell.
17:19 < dylukes> Pretty familiar with the theory (at least from a functional perspective).
17:19 < adek> Does node has something similar to pip where one can list dependencies of project?
17:19 < kenperkins> pachet: oh maybe I did see those, was only out there for the those 2 sessions
17:19 < kenperkins> didn't realize they were significant in nodeconf lore though
17:19 < substack> but you'll NEVER get a ton of core apis to use streams in haskell, it will always be second-class
17:20 < substack> you'll need to use a narrow subset of implementations from hackage, it will completely suck
17:20 < pachet> kenperkins one of them had a max ogden-esque beard
17:21 < substack> just like how in haskell you spent most of your time marshalling between types to satisfy the type inference engine
17:21 < kenperkins> pachet: that would have def been newsworthy
17:21 < pachet> heh
17:21 < kenperkins> btw, did we meet pachet ?
17:21 < dylukes> substack: I hardly find that to be the case (re: marshalling between types)
17:21 < substack> adek: `npm ls` does that if you mean the dependency graph
17:22 < dylukes> substack: also conduits have sort of become the de facto implementation (despite their rigorous failings)
17:22 < pachet> kenperkins we did, we talked that one night about aws vs rackspace
17:22 < pachet> *that first night
17:22 < substack> dylukes: I found it to be hugely painful when building software that interacted with the outside world in 2010
17:22 < dylukes> Ah, 2010 okay.
17:22 < dylukes> There's been some pretty nice extensions since then.
17:22 < substack> and then I heard about node and I ditched haskell completely
17:22 < dylukes> Also you have to be exposed to best practices for writing IO intensive applications.
17:23 < dylukes> It's not intuitive, when you're lacking an event loop or something like that.
17:23 < dylukes> Same as when you try to write such applications in, say, C.
17:23 < substack> but I just want an event loop
17:23 < substack> everything is way simpler
17:23 < substack> I don't want towering abstractions that give marginal benefits and complicate everything
17:23 < dylukes> I really like Sodium.
17:24 < dylukes> Really simple (not towering) event system.
17:24 < dylukes> It's sort of "FRP with compromises".
17:24 < niggler> actually substack dumb question: why does Buffer.prototype.slice throw errors if you go out of bounds?
17:24 < substack> dylukes: I don't think that can actually work if userland isn't all using the same event loop
17:24 < dylukes> substack: what do you mean...?
17:24 < substack> dylukes: ruby has event machine, python has twisted and gevent, perl has poe and anyevent
17:25 < substack> and they all really suck because you can't use modules that use a different kind of io
17:25 < substack> and the common denominator for IO on all those platforms is almost always synchronous
17:25 < substack> same with haskell
17:25 < dylukes> Sodium doesn't have that issue.
17:25 < substack> yes it does
17:25 < dylukes> ioReactive is a simple lift.
17:25 < substack> everything on hackage not written with sodium in mind
17:26 < substack> haskell is such a huge waste of time and effort, just throw it away
17:26 < substack> everything is harder for very little benefit
17:26 < substack> in many cases for negative benefit
17:26 < dylukes> You realize you can expose your API in terms of IO actions, and if you happen to be using Sodium and lift an IO action from another library that does, the type system is usually smart enough to flatten it right?
17:27 < dylukes> There is no overhead from most typing except at compile time.
17:27 < niggler> lol "hipster" programming language
17:27  * dylukes has reimplemented toy versions of Core and STG
17:27 < jaha> anyone know how to create a global getter (middleware) in mongoose.js that will run on each query, i want to filter results based on an access control list
17:27 < dylukes> there's no RTTI.
17:27 < dylukes> substack: It really depends on your task.
17:27 < substack> niggler: worse, haskell makes people feel smart about using it, so they spend all their time writing libraries to feel smart
17:28 < dylukes> For quickly modeling a problem it's significantly faster to work in.
17:28 < substack> I violently disagree.
17:28 < dylukes> violently D:
17:28 < substack> haskell is destroying so much potential productivity
17:28 < dylukes> It really depends on the programmer.
17:28 < niggler> would "academic" be the best description substack ?
17:29 < substack> niggler: they use that word themselves
17:29 < dylukes> And your relative experience with different languages and your personal taste.
17:29 < dylukes> substack: "they"
17:29 < niggler> good point
17:29 < dylukes> Who are "they".
17:29 < substack> the haskell community
17:29 < dylukes> Jabs at 'communities' of languages as if they're entities are idiotic.
17:30 < dylukes> There are plenty of shitty things to say about the node and ruby 'communities' that are patently untrue of most node/ruby programmers.
17:30 < dylukes> Do I think every ruby programmer is a miniature Zed Shaw, or that they're all amateurs? No.
17:30 < dylukes> Those are just opinions of vocal minorities.
17:30 < substack> you misunderstand what I was saying
17:31 < hackygolucky> hah, I don't think I've heard that about the Ruby community
17:31 < hackygolucky> and I'm in Python. They LOVE to hate.
17:31 < substack> "academic" is a term used broadly in the haskell community to describe the language
17:31 < dylukes> Heh...
17:31 < substack> particularly "academic research language"
17:31 < dylukes> In any case, returning to the original point, I do not find Haskell to be particularly counter-productive.
17:31 < RLa> i still do not get why ocaml is not more popular than haskell
17:32 < dylukes> The learning curve till the point it's productive is certainly long and steep though.
17:32 < dylukes> It's completely impractical for people who haven't been writing in Haskell for at least a year and a half to try to do "real things"™ with it.
17:32 < dylukes> It's not a matter of "smart", it's just familiarity. JavaScript is much easier to get up to speed with.
17:33 < substack> javascript is much easier
17:33 < substack> you can spend more of your time solving novel problems and publishing your solutions to npm
17:33 < substack> and less time fighting the type checker and waiting for your hackage account and fitting your package into the linnean taxonomy
17:34 < mikeal> kenperkins: if you have new things to say that don't fit the current issues just create a new one
17:34 < substack> and the class system hierarchy
17:34 < dylukes> I really don't find myself fighting the type checker often at all.
17:34 < kenperkins> mikeal: I just thought it might be nice to have one issue with links to all of the post-mortem type blog posts from others
17:34 < dylukes> Type holes help with that a lot too.
17:35 < mikeal> kenperkins: good call, go ahead and create it
17:35 < dylukes> Regardless.
17:36 < dylukes> I like both Node and Haskell.
17:36 < dylukes> Bite me :).
17:36 < Draggor> go go haskell
17:36 < mikeal> haskell is for term papers, node is for applications :P
17:37 < kenperkins> so then what's go for?
17:37 < dylukes> kenperkins: Whining for Karma on HN.
17:37 < dylukes> (I jest)
17:37 < dylukes> (It's a cool language)
17:37 < kenperkins> burn
17:38 < durango> meh if ur going to use go just use nimrod :P
17:38 < dylukes> Surefire ways to get karma on HN: 1) complain about a prominent ruby programmer, 2) claim X industry is collapsing/exploding, 3) bitch about a feature go doesn't have, 4) claim a large old service is dead
17:38 < durango> thats seriously H/N in 4 steps @_@
17:39 < dylukes> Seriously just read the New page instead of the Top page.
17:39 < dylukes> Or not at all.
17:39 < durango> i just did on here ;)
17:40 < kenperkins> @mikeal I just had to reload the page to speed up eran's gif
17:41 < jasonkuhrt> can anyone shoot down/poke this idea? I want to create a nested-duplex class which receives two streams, one for reading, and one for writing, so that I can, say, create a protocol stream that deserializes on read and serializes on write
17:41 < jasonkuhrt> bad idea? pitfalls?
17:41 < dylukes> substack: so if I want to say, push a value when input to a stream ends, how would you recommend doing it?
17:41 < dylukes> Say I have a stream that counts its inputs and waits until it's being fed no more before pushing out the count.
17:42 < mikeal> Go is for anyone who doesn't want to use an ecosystem of packages and likes writing servers
17:42 < dylukes> Ignoring the fragility of such a "stream".
17:42 < mikeal> it's actually quite nice, they just haven't put any real love in to the community
17:42 < dylukes> mikeal: but servers are fun :p
17:42 < mikeal> which is sort of a typical Google-style open source thing
17:42 < dylukes> the only shitty part about servers is parsing protocols
17:42 < mikeal> which is easy once someone publishes a module for the parser you need :)
17:42 < dylukes> there just aren't nice pseudo-declarative libraries that handle leftovers or let you establish dependencies between fields.
17:43 < dylukes> Construct (python) is nice.
17:43 < substack> dylukes: var count = 0; var stream = through(function () { count ++ }, function () { this.queue(count) })
17:43 < mikeal> it's a little harder in Node because of the streaming case
17:43 < dylukes> true
17:43 < mikeal> dylukes: @felixge has written a lot about writing parsers in node
17:44 < mikeal> a lot of the pain people put themselves through is unnecessary, for instance buffering some more of the data, or eating a few buffer copies, is not the performance hit people think it is
17:44 < dylukes> Indeed. Premature optimization like hell.
17:44 < dylukes> I used to do that when I was like 15.
17:44 < dylukes> One time in C I created a vm_remap based ringbuffer.
17:44 < dylukes> Completely pointless.
17:44 < dylukes> and platform locked.
17:45 < jasonkuhrt> can anyone @mikael? @substrack shoot down/poke this idea? I want to create a nested-duplex class which receives two streams, one for reading, and one for writing, so that I can, say, create a protocol stream that deserializes on read and serializes on write
17:45 < dylukes> mikeal: The best solution I found that's practical and easy is to have a utility header for working with linked lists of chunks of variable size.
17:46 < dylukes> Any issues you have with performance due to list traversal (which is rare and generally only to the next item) can be fiddled with by tweaking the chunk size.
17:46 < substack> jasonkuhrt: you can just make a stream that is both readable and writable, you don't need to take 2 streams as arguments
17:47 < dylukes> brb
17:47 < jasonkuhrt> substack: but the serialize and deserialize streams are each respectively a pipeline of 2-3 streams themselves
17:49 < jasonkuhrt> substack: so my thought was to use bun or duplexer to turn each pipeline into a single stream, then each stream-pipeline be used respectively as the read/write of a protocol
17:49 < jasonkuhrt> I'm quite likely confused
17:49 < mikeal> dylukes: i started doing something like that for hostproxy but eventually decided to just eat some buffer copies
17:49 < snet> Do you use callbacks or returns to pass the result of a function?
17:49 < kenperkins> My favorite part of opensource software is the fact that discussion in the public isn't just ok, it's encouraged
17:50 < kenperkins> you want people to know what you're thinking & why
17:50 < RLa> kenperkins, that might not apply to all OS projects
17:50 < kenperkins> RLa: fuck those guys then ;)
17:50 < kenperkins> whoever they may be
17:51 < kenperkins> (i kid)
17:51 < rossk> kenperkins: no one asked for your opinion :D
17:51 < kenperkins> sup rossk 
17:51 < kenperkins> get your thing worked out last night?
17:51 < kenperkins> I was offline
17:51 < rossk> ha! yeah
17:52 < rossk> this conference has speakers submit their draft slides 6 months in advance
17:52 < rossk> but my email re: html5 conf was unreleated
17:53 < substack> rossk: hilarious
17:53 < substack> I give talks mostly about the thing I was working on the week before
17:53 < rossk> substack: I know right? Military conferences... http://www.iitsec.org
17:53 < substack> I don't do slides either.
17:53 < kenperkins> slides are ok :S
17:54 < substack> I think they're boring when I watch presenters.
17:54 < kenperkins> i didn't say great
17:54 < kenperkins> but they're better than no slides and no material 
17:54 < dylukes> there we go
17:55 < dylukes> substack: so is there an internal callback for when upstream endS?
17:55 < rossk> if no slides and no material... stop wasting my time
17:56 < kenperkins> mikeal: surprising lack of background on that mp3? sounds like in a studio almost
17:56 < substack> dylukes: upstream calls .end() on downstream
17:56 < dylukes> cool :)
17:56 < _6a68> slides are helpful for visual learners.
17:56 < _6a68> most oreilly circuit speakers just use huge meaningless flickr images, though :-\
17:57 < _6a68> or, like, two giant words
17:57 < mikeal> kenperkins: it's the auld triangle
17:57 < kenperkins> i know that
17:57 < kenperkins> but it was carter playing it on the beat up trumpet?
17:58 < benatkin> hrm
18:01 < hackygolucky> kenperkins: are there recordings from nodeconf?
18:01 < hackygolucky> I wish carter would just carry his trumpet around like that always.
18:02 < hackygolucky> Might request that of him.
18:02 < kenperkins> we talking carter rabasa or a different carter
18:02 < kenperkins> because every time I saw carter rabasa he had booze on him
18:02 < kenperkins> not a trumpet
18:02 <@mbalho> different carter
18:02 < kenperkins> that explains it
18:02 < hackygolucky> hah, no carter thaxton had the trumpet
18:02 < hackygolucky> 'portland carter'
18:02 <@mbalho> @nonrectangular
18:02 < kenperkins> vs seattle carter
18:03 < hackygolucky> vs. carter rabasa whom I refer to as Cascadia Carter
18:03 < kenperkins> lol
18:04 < hackygolucky> kenperkins: did we meet? (Tracy)
18:04 < kenperkins> egads, it's hard to remember everyone
18:04 < hackygolucky> true
18:04 < kenperkins> have you a picture somewhere?
18:05 < hackygolucky> https://twitter.com/HackyGoLucky
18:05 < hackygolucky> I don't think we did.
18:05 < kenperkins> don't think so :P
18:07 < kenperkins> you know what we should do for 2014
18:08 < kenperkins> West coast Summer of Node, figure out how to do SFO->PDX->SEA->VAN 
18:08 < kenperkins> all in order
18:08 < mmalecki> I could join that, kenperkins 
18:08 < qard> kenperkins: That would be awesome. Node Road Trip. :O
18:09 < rossk> kenperkins: I'd be down
18:09 < mmalecki> kenperkins: you know what'd be awesome?
18:09 < kenperkins> We've got all the people between PDX folks, SEA folks
18:09 < qard> VAN here. :)
18:09 < mmalecki> kenperkins: stopping at hotels and doing talks
18:09 < kenperkins> even better
18:09 < mmalecki> it'd be a roadtrip conference
18:09 < kenperkins> ha
18:10 < slajax> kenperkins: I pretty much did that road trip this weekend for nodeconf ;)
18:10 < kenperkins> awesome
18:10 < slajax> would have been nice to stop along the way hahahaha
18:11 < rossk> mmalecki: i'm sure you'd get awesome turn out
18:11 < rossk> at every stop
18:11 < slajax> +1
18:12 < kenperkins> so hungry
18:13  * benatkin is also hungry
18:13 < kenperkins> mikeal were they all ar.drone 2.0s?
18:13 < mmalecki> Sunshine, Beaches and Pina Colada, Join our Node Road Trip 2014 (tm)
18:13 < mmalecki> * also some node
18:14 < mikeal> kenperkins: yes, Walmart Labs sent one 1.0 but we didnt' use it
18:14 < kenperkins> mmalecki: don't forget beer & coffee hipsters galore
18:15 < mmalecki> oh, obviously
18:15 < mmalecki> I'd add wine there
18:15 < dylukes> Is there any way to control the chunk size from fs.readFileStream?
18:16 < mmalecki> kenperkins: if AvianFlu jumps in, we'll have an expert in SF salads on board too
18:39 < dylukes> substack: seems to me overriding .end is a dubious solution
18:39 < dylukes> well, without calling the original
18:42 < kenperkins> just submitted my first node.js reactions gif :D
18:45 < dylukes> huh
18:46 < dylukes> I was writing a line buffering stream (and a counter)
18:46 < dylukes> and I inadvertently made it ignore empty lines.
18:46 < dylukes> odd.
18:48 < Guest98643> Hi! I'm using Handlebars for server-side template rendering and I'd like to use AngularJS to do some work on the client-side. But I'm having an issue doing so because some {{}} tags are meant for AngularJS but get parsed by Handlebars and then disappears. Any suggestion?
18:50 < slajax> Guest98643: a lot of template engines let you change the tag notation, ex change {{}} to <% %>
18:55 < dylukes> Guest98643: Handlebars doesn't do my knowledge have a good way to change the delimiters.
18:55 < dylukes> If you're just doing very lightweight templating, Underscore's _.template function might be enough :p
18:56 < Guest98643> Oh crap ok thx
18:56 < Guest98643> I'd like to keep both but I'll see what I can do
18:57 < mkozjak> how to properly manually send a response to a http GET? is this okay? connection.write('HTTP/1.1 200 OK\n\nContent-Type: text/plain\nContent-Length: 1\n\nTESTMSG\n', function() { connection.end(); });
18:58 < mkozjak> the problem is that sometimes i get 'Error: write after end'
18:58 < mkozjak> for net.socket socket, and 'Error: This socket has been ended by the other party' for net.create connection
18:59 < substack> dylukes: what are you talking about? I never advocated overriding .end()
19:00 < rossk> kenperkins: what was it for?
19:00 < substack> dylukes: you can pass write and end functions into through: through(write, end)
19:00 < dylukes> ah, I wasn't using through
19:01 < dylukes> also write seems like a bit of a weird name...?
19:01 < dylukes> what's the rationale behind it?
19:01 <@isaacbw> you're a weird name
19:01 <@mbalho> dylukes: data is written to streams
19:02 < dylukes> nevermind
19:02 < rossk> mkozjak: I'm not intimately familiar with the HTTP spec but I wonder if your content-length is correct
19:03 < mkozjak> rossk: i guess not, i'll try getting the right one
19:07 <@isaacbw> content-length is overrated
19:07 < mkozjak> 7 bytes, i guess
19:09 < mkozjak> rossk: no, still happens
19:10 < rossk> mkozjak: gist?
19:11 < mkozjak> rossk: hmm, never used it
19:11 < rossk> https://gist.github.com/ <-- put code that fails here and post a link
19:16 < patate_> Hey people, those who use AngularJS how do they do server-side templating? what do they usually use? 
19:17 < mkozjak> rossk: https://gist.github.com/anonymous/4c8fb645de0bb2987a76 :)
19:18 < mkozjak> rossk: basically line 19 and 64 might be problematic
19:18  * rossk reading
19:25 < mkozjak> rossk: i'm not sure how to send a response and if that one's okay; also, is it proper to use connection.end(); once the write is done...
19:32 <@isaacbw> patate_: they don't
19:32 <@isaacbw> you silly bum
19:33 < patate_> @isaacbw: I was sure to get a response like this, I was playing with fire. I guess they use it server and client side?
19:33 <@isaacbw> I'm not sure what you mean
19:33 < patate_> They use AngularJS on both end
19:33 <@isaacbw> with angular you will usually do clientside rendering with a serverside data API that uses json or something
19:33 <@isaacbw> no angular on the server side
19:33 <@isaacbw> I'm not sure how that would work
19:33 <@isaacbw> I think a few people have played around with it, but no
19:34 < patate_> Ok sounds, a bit risky. It's ALL rendering on the client's end?
19:34 <@isaacbw> well, for a given page yea
19:34 <@isaacbw> that's how it's designed at least
19:34 <@isaacbw> whatever though, you could do serverside rendering since angular is so driven by html
19:35 < patate_> Oh okay, I thought of using it like this: Let's say I have a list with data, I give it to my template server-side, it fills it with the data, then throw it to the client. And on the client Angular does its job of events, models, etc
19:35 < patate_> Ok that's what I thought
19:35 <@isaacbw> but usually what you'll do is have a single page with angular and have angular request that list data from the server via an API
19:36 < harbhub> anyone know how to fill out a form via http.request?
19:36 <@isaacbw> and then fill in the DOM after it gets the data back
19:36 <@isaacbw> it depends on how angular-y you want to be I guess
19:36 < harbhub> hey isaacbw
19:36 <@isaacbw> hello harbhub 
19:36 < harbhub> guys, i want to fill out an input and click a button, but i want to do it through the server
19:37 <@isaacbw> so you want to send POST data?
19:37 < harbhub> how do i get a website (http.request should suffice?) and fill out an input field
19:37 < harbhub> sort of
19:37 < patate_> So it would be a real CLIENT that communicates with the API. My client can have no server-side stuff at all I guess
19:37 < harbhub> i could always send a post request
19:37 < harbhub> but i want the server to control the page
19:37 <@isaacbw> patate_: oh, I meant your own API
19:37 < patate_> Yes that's what I meant too
19:38 < harbhub> so i want the server to have instructions, get the page, start typing into it, and click a button
19:38 < harbhub> and i want to have a page open and see it happening automatically heh
19:38 <@isaacbw> so if you have some other thing, it goes browser->your server->3rd party API
19:38 <@isaacbw> and then back
19:38 < patate_> I currently have an API built, so I can throw a static website with Angular that will directly communicate with the API.
19:38 < patate_> oh ok right
19:38 < patate_> That makes more sense, thanks
19:38 <@isaacbw> what do you want angular for? Just simple things like animations?
19:38 <@isaacbw> you're not building a whole app with angular at the core, right?
19:39 <@isaacbw> if you want to tack angular on top, you could totally do what you're talking about
19:39 <@isaacbw> if you're making an angular app, then have a JSON API that it grabs data from
19:41 < kenperkins> rossk: what was what for
19:41 < rossk> kenperkins: nodejs reactions?
19:41 < kenperkins> it reference to node copters
19:47 < Kakera> is there a clean way to download a bunch of files as part of npm install?
19:47 <@isaacbw> include them in your package?
19:47 < jasonkuhrt> if node were started from scratch now, would streams still have the spewing ability via 'data' event
19:48 < jasonkuhrt> or is that there solely for backwards compat?
19:48 < Kakera> no, they are updated frequently and I don't want to maintain local copies
19:48 <@isaacbw> if node were started from scratch now, it would be pretty different :P
19:48 < jasonkuhrt> or is 'data' and hence "spewing" streams a legit feature in its own right
19:48 < Kakera> the files are inside a hg repo
19:48 < jasonkuhrt> issacbw: heh, as all things
19:49 < jasonkuhrt> issacbw: trying to figure out if if spewing streams are idiomatic or not going forward
19:50 < Kakera> two ways I can think of 1) require the user to manually clone the repo after installing the module 2) download the files when the module is loaded
19:50 <@isaacbw> Kakera: just copy the files into your package
19:50 <@isaacbw> your package shouldn't change based on outside variables like another repo
19:51 <@isaacbw> once you release a version, that's the version
19:51 <@isaacbw> if you're asking for a clean way
19:51 < Kakera> and then I'd have the responsibility to regularly update them
19:52 < Kakera> the files are protobuf definitions btw
19:52 < Kakera> the service the module is meant to work with changes regularly, thus the schema changes as well
19:53 <@isaacbw> oh yuck, reponsibility
19:53 <@isaacbw> when you put it that way
19:55 < nathan7> Kakera: if it changes the package, it's a change, period
19:55 < nathan7> Kakera: schema changes are backward-compatible
19:55 < nathan7> Kakera: that's the point of protobuf
20:06 < harbhub> error depth zero self signed certificate
20:06 < harbhub> i am testing the https module
20:06 < harbhub> but when i make an https request to it, i get that error
20:06 < harbhub> so i am using a self signed cert
20:06 < harbhub> but why is that generating an error?
20:07 < harbhub> must it be authorized by a cert authority for https.request to accept it?
20:07 < nathan7> yes
20:07 < harbhub> why?
20:07 < nathan7> You can tell it to ignore that
20:07 < harbhub> how?
20:07 < nathan7> because that's the point of SSL
20:07 < harbhub> okay
20:07 < nathan7> rejectUnauthorized: If true, the server certificate is verified against the list of supplied CAs. An 'error' event is emitted if verification fails. Verification happens at the connection level, before the HTTP request is sent. Default true.
20:07 < nathan7> straight from the docs, dear
20:07 < harbhub> thanks nathan7
20:08 < harbhub> i see it now...
20:08 < harbhub> lol
20:08 < nathan7> [=
20:09 < kenperkins> I've seen data get through even when connecting to an invalid cert with rejectUnauthoried: true
20:11 < nathan7> kenperkins: :(
20:11 < kenperkins> it's brief, as in the connection does go down
20:11 < kenperkins> but data does get through
20:19 < kenperkins> what was that package on nodeup a couple weeks ago
20:19 < kenperkins> jsut does api webservers
20:19 < kenperkins> not templating
20:19 < kenperkins> i.e. REST server
20:20 < nathan7> kenperkins: restify?
20:20 < kenperkins> that's it
20:20 < kenperkins> thanks
20:20 < kenperkins> couldn't remember
20:23 < jdelgado> Is forever still the production tool of choice?
20:23 < kenperkins> depends on your def of "of choice"
20:23 < kenperkins> I always use upstart scripts :P
20:24 < jdelgado> kenperkins: I would love to, but I have to do some stuff pragmatically
20:24 < kenperkins> puppet or chef?
20:24 < poorman> i use upstart too
20:24 < kenperkins> we spun up our upstart scripts dynamically with puppet from a generalized template
20:24 < poorman> jdelgado: what stuff can't you do in bash?
20:24 < jdelgado> Actually, node
20:25 < jdelgado> Just hooks from node
20:25 < jdelgado> I could technically just run an exec, I guess
20:26 < harbhub> i love you node.js community
20:26 < harbhub> stay sexy
20:33 <@isaacbw> lol waf
20:38 < niggler> is there a way to control util.inspect so that numeric keys are emitted as numbers and not strings?
20:38 < niggler> >>> {1:2}
20:38 < purr> niggler: SyntaxError: Unexpected token :
20:38 < niggler> >>> console.log({1:2})
20:38 < purr> niggler: undefined; Console: {1: 2}
20:38 < jdelgado> lol
20:39 < niggler> so in node, that gives { '1': 2 }
20:39 < niggler> dunno what purr is doing
20:39 < AAA_awright> >> ({1:2})
20:39 < purr> AAA_awright: (object) {1: 2}
20:39 < jdelgado> it's a bot
20:39 < AAA_awright> It's evaluating the ES expressions
20:39 < niggler> i meant
20:39 < jdelgado> ^
20:39 < niggler> why is it emitting {1:2} and not {'1':2}
20:40 < niggler> chrome logs "Object {1: 2}"
20:40 < niggler> nodejs logs "{ '1': 2 }"
20:41 < niggler> and clearly purr logs "{1: 2}"
20:41 < jdelgado> niggler: By definition, util.inspect returns a string, if you want it numerically, try console.log(obj) ?
20:41 < niggler> i want the key to be the number and not the string
20:41 < AAA_awright> niggler: I don't think there is, but I'm looking through the source in lib/util.js
20:41 < jdelgado> Yeah, util.inspect makes it a string
20:42 < jdelgado> Or you can forloop it and convert to int
20:43 < AAA_awright> Well property names are always strings
20:43 < AAA_awright> I think what niggler wants to do is not use quotes if they're not necessary
20:43 < niggler> yep AAA_awright 
20:43 < AAA_awright> That's an extremely hard thing to do, the regular expression to test if quotes are not necessary is literally thousands of characters long
20:43 < niggler> chrome somehow does the right thing
20:44 < jdelgado> http://jsfiddle.net/npHdA/
20:45 < niggler> run that in the console directly jdelgado 
20:45 < jdelgado> I see
20:45 < jdelgado> sec
20:46 < jdelgado> niggler: Are all of your keys number, or just some?
20:46 < niggler> all are numbers
20:46 < jdelgado> niggler: Can you just loop through and do parseInt?
20:47 < niggler> i could jdelgado 
20:47 < arnorhs> do you guys know what the deal is with benchmark.. http://www.techempower.com/benchmarks/#section=data-r6&hw=i7&test=db why is node.js getting pwned even by php etc ..?
20:47 < arnorhs> some more info: http://www.techempower.com/blog/2013/07/02/frameworks-round-6/
20:47 < jdelgado> niggler: This is tripping me up, because half of my programs do it like chrome, but half are exporting as a string
20:47 < niggler> i wasn't asking about how to do it, but rather whether there's an option to util.inspect 
20:47 <@isaacbw> so firefox is starting to beat chrome in benchmarks
20:47 <@isaacbw> firefox 4 lyfe
20:48 < niggler> fuck firefox
20:48 <@isaacbw> except not. They need some serious UX work
20:48 < niggler> crap that didn't work as expected
20:48 < jdelgado> LOL FIREFOX
20:48 <@isaacbw> and don't seem to be willing to get real edsigners
20:48 <@isaacbw> designers
20:48 < niggler> firefox is late to the game again
20:48 < niggler> i don't actually understand how that happened
20:48 < jdelgado> Did you guys know that people still use Opera?
20:48 <@isaacbw> opera is a hipster browser
20:48 < niggler> mozilla has brendan eich
20:48 < jdelgado> lol
20:49 < jdelgado> I never do any of their css prefixes, so jokes on them
20:49 < AAA_awright> And they're using that as an excuse to get rid of css vendor prefixes
20:49 <@isaacbw> if you talk to the ff developers about splitting tabs into processes, they say "no" and never elaborate
20:49 <@isaacbw> never
20:49 < AAA_awright> I'm just like, Damnit Mozilla, did you learn NOTHING from IE6?
20:49 <@isaacbw> lol jdelgado jokes on you
20:50 < jdelgado> isaacbw: :P
20:50 <@isaacbw> they're mostly the same as webkit
20:50 < jdelgado> I prefix
20:50 < AAA_awright> isaacbw: Same thing as the Chrome guys fwiw
20:50 < jdelgado> But I don't code it!
20:50 < AAA_awright> "Can you add a configuration option to..." "NO"
20:50 < AAA_awright> "Can you show the http:"... "NO"
20:50 <@isaacbw> chrome needs something like about:config
20:51 < nathan7> I'm trying to use FF
20:51 < Havvy> isaacbw: It's because it would take a complete rewrite of Firefox to get tabs into processes.
20:51 < FunnyLookinHat> Err - async has no method "each" - ???
20:51 < nathan7> the lack of multiprocess is driving me mad
20:51 < AAA_awright> Can you finally support DNS-stapled SSL certificate..."NO"
20:51 < nathan7> FunnyLookinHat: older versions had it called 'forEach'
20:51 < nathan7> Like, first few days of FF were okay
20:51 <@isaacbw> and flash player does all kinds of shit to ff
20:51 < FunnyLookinHat> nathan7, ah , let me give that  ashot
20:52 <@isaacbw> if you try to bring it up, they say "it's adobe's fault"
20:52 <@isaacbw> no, it's your fault for not sandboxing it properly
20:52 < nathan7> But my laptop has like weeks of uptime at a time
20:52 < nathan7> and firefox just blew up
20:52 <@isaacbw> my browser shouldn't freeze because one tab has a stupid flash clusterfuck going on
20:54 < nathan7> I really wanna like FF
20:54 < nathan7> because you can get at every bit of the browser with the extension system
20:55 < nathan7> but I'm considering hacking on Chromium or something
20:56 < ninegrid> anyone using mongolian deadbeef?  i'm looking for general opinions and don't have a specific issue...
20:58 < AAA_awright> Where would I go to seek information about =dev-lang/v8-3.19.17? Specifically I want to make sure that it stays in Portage for a little while, I have a dependency on exactly that version
20:58 < AAA_awright> er
20:59 < ninegrid> anyone using mongolian deadbeef?  i'm looking for general opinions and don't have a specific issue...
20:59 < AAA_awright> I mean, any ideas on when Node.js will pull in later versions of V8?
20:59 < AAA_awright> ninegrid: I use it
21:00 < AAA_awright> ninegrid: It's a fantastic API but it's not supported anymore, I have some patches to help with minor issues here and there
21:00 < ninegrid> AAA_awright: yes, i saw that the commit activity on it is pretty old... wonder why its no longer supported
21:00 < AAA_awright> The major thing to watch out for is that it will die on you if you throw an Error inside a callback
21:01 < AAA_awright> ninegrid: marcello3d got a new job, I think is the answer
21:01 < AAA_awright> I've discussed continuing support for it
21:01 < AAA_awright> Sometimes he stops by the channel
21:01 < ninegrid> Why not just fork it and publish your patches?
21:02 < ninegrid> I'm pretty new to node, but looking at the code it seems it hasn't been updated for streams2
21:02 < AAA_awright> I do have a fork... https://github.com/Acubed/node-mongolian iirc
21:02 < AAA_awright> It doesn't need new streams
21:02 < AAA_awright> readable streams I should say
21:03 < AAA_awright> It works well with evented read streams, especially after my patch
21:03 < ninegrid> since i'm pretty new to node, can you tell me if/how evented streams handle backpressure?
21:04 < ninegrid> AAA_awright: sorry, let me clarify my question... if i'm just using the callbacks and not piping to a stream
21:04 < AAA_awright> ninegrid: It's actually called congestion control...
21:05 < AAA_awright> ninegrid: There's numerous ways you can handle congestion, on TCP for instance, you drop packets, which signals to lower the transmition rate. MongoDB uses TCP for networked streams.
21:06 < AAA_awright> You don't have to do anything special to do this, except pause the stream maybe
21:06 < ninegrid> alright thanks
21:12 < astropriate> hello friends
21:23 < kenperkins> mikeal: honest question, worth it for brand awareness to be at node summit?
21:24 < mikeal> it's not a developer conference
21:24 < kenperkins> yea, enterprisy if I remember
21:24 < mikeal> it's a Node conference for VC basically
21:25 < kenperkins> that doesn't help me :P
21:25 < mikeal> Chris Williams won their contest the last time around
21:25 < mikeal> ask him if it was worth it
21:25 < kenperkins> thx
21:25 < kenperkins> ah he's a nodecopter guy too cool
21:25 < kenperkins> I accepted a PR from him on pkgcloud last week I think
21:26 < mikeal> yeah, he also runs JSConf
21:33 < kenperkins> the florida one
21:33 < kenperkins> (this year)
21:36 < rossk> man -- I'm keep missing all the node conferences due to other conferences
21:36  * rossk pouting face
21:37 < rossk> darn customers
21:37 <@isaacbw> does anyone know of twilio forwarded calls count towards twilio fees? They do right? I have no idea how telephone infrastructure works
21:37 < jdelgado> Is process.title a variable, or a function? Because process.title('agent'); doesn't work for me?
21:37 <@isaacbw> oh hey there's a page about forwarding pricing
21:37 <@isaacbw> cool beans
21:37 < jdelgado> isaacbw: Yeah, nothing at twilio is free. :)
21:38 < jdelgado> I think it is the same as a normal call, but it might be times 2
21:38 <@isaacbw> twilio is actually pretty pricy
21:38 <@isaacbw> pricey
21:38 < jdelgado> yeah it is
21:38 <@isaacbw> do you know of any less-featured cheaper alternatives?
21:38 <@isaacbw> just for simple call routing without having to set up your own servers
21:38 < poorman> @isaacbw: get the hackerbundle
21:38 < poorman> https://hackerbundle.com/
21:39 < jdelgado> Not any that I would recommend for production
21:39 <@isaacbw> anything for prototyping?
21:39 < pachet> jdelgado process.title is a property
21:39 <@isaacbw> poorman: lol so much tech. I wouldn't be able to learn and use all of that within  the time limits
21:39 < jdelgado> pachet: Ah
21:39 < poorman> I know thats my problem right now
21:40 <@isaacbw> maybe I'll just use freeswitch
21:40 < pachet> process.title //node   process.title = 'foobar'; process.title //foob
21:40 < jdelgado> isaacbw: Yeah, let me get the name, there is some place that does dev for free
21:40 <@isaacbw> oh, awesome
21:40 < pachet> quirky, but there you are
21:40 < jdelgado> pachet: I should buy you a beer, you have answered all of my questions today. :)
21:43 < jdelgado> isaacbw: I just went to the bowls of my history - https://www.tropo.com/
21:44 <@isaacbw> woo, awesome! Thanks
21:44 < jdelgado> Sure pal
22:00 < dylukes> quick question
22:01 < dylukes> what's the easiest way to split a string, *keeping* the delimiter at the *end* each component? 
22:01 < dylukes> I can get it at the beginning with lookaheads :\
22:01 < kenperkins> can't you just split on it and then readd?
22:03 < dylukes> kenperkins: yeah but I'd rather not :p
22:03 < dylukes> I guess that's more feasible considering I might have multiple separators and wish to unify them
22:03 <@isaacbw> or just write your own split function
22:04 <@isaacbw> it might be faster to split natively and then readd though
22:04 < lamella> hey noders. im having an odd problem. i'm trying to use optimist in a node app. i can require optimist from the node console inside my project folder, but var optimist = require('optimist'); is failing saying that optimist is undefined
22:04 < lamella> is there a simple way to debug this?
22:05 < jonny_flowers> Hello
22:05 < eddiemonge> does anyone know what the reasoning behind the decision to warn when there isnt a repo field define in the package.json?
22:06 < jonny_flowers> Would anyone here be able to help me with the node.js crypto module? I am going crazy trying to decrypt an AES encrypted string
22:06 < jonny_flowers> I have working code in python but need it working in node
22:07 < jonny_flowers> Hello does anyone talk in here?
22:08 < pachet> we're all hungover from nodeconf
22:08 < ckknight> lamella: did you npm install optimist?
22:09 < lamella> yes
22:10 < lamella> its in my node_modules folder
22:10 < lamella> ckknight: ^
22:10 < ckknight> lamella: and what error do you get if you run the node repl and require('optimist')?
22:11 < kenperkins> pachet: I'm a lot better today
22:11 < kenperkins> yesterday was pretty rough
22:11 < kenperkins> not so much hungover though, just wiped
22:12 < pachet> kenperkins same
22:13 < lamella> ckknight: like i said, i can use it via the console (i suppose the right title is repl)
22:13 < ckknight> hmm
22:14 < lamella> yah
22:14 < ckknight> and if you have a single .js file with just require('optimist') in it, does it still error?
22:14 < ckknight> in the root of your project, peer to node_modules
22:15 < lamella> ckknight: ah that seems to work
22:15 < lamella> i didnt think to try that
22:15 < lamella> so something must be goofed before it
22:15 < ckknight> so what's the path of the file (relative to your root path) that errors?
22:15 < ckknight> also possible
22:17 < lamella> ckknight: /Users/alexlauni/Code/CES/psnh-electric-scraper/scrapePSNH.js:9:3
22:17 < ckknight> relative to the root path of your project, I meant
22:19 < lamella> it's in the root dir
22:25 < sent_hil_> any idea why this fails: https://gist.github.com/sent-hil/5913796
22:25 < raduu> hey, what s the matter with socket.io client docs
22:25 < raduu> https://github.com/LearnBoost/socket.io-client#nodejs
22:25 < neilk_> Did require()ing JSON files change? Works fine in 0.8, doesn't in 0.10
22:25 < raduu> can t I do this on the server?
22:32 < neilk_> nm, it was a path issue.
22:34 < oti8> Need help w/ design pattern using Q. I need to serialize N number of function calls that create promises: https://gist.github.com/objectiveSee/5913832
22:48 < styol> sent_hil_: still around?
22:50 < irmatc> how are you supposed to do regexs with hex characters in node?
22:50 < irmatc> e.g. something like '[\x09\x0A\x0D\x20-\x7E]'
22:53 < nathan7> irmatc: at that point it's very likely you're not doing string matching anymore
22:53 < styol> sent_hil_: welp, the first issue is that your `host` key has a protocol in it (https://) when it should just be "github.com", but the main problem is that you need to use the https module as opposed to the http module to perform that secure request
22:53 < irmatc> nathan7: right - i want to operate on a hex buffer
22:54 < irmatc> nathan7: put another way - what's the right way to do "buffer matching" in node?
22:54 < nlf> buffer matching? like comparing two buffers?
22:55 < irmatc> "does buffer Y contain buffer sequence X?"
22:58 < nlf> irmatc: yeah.. that's tough. you'd have to iterate byte by byte
22:58 < nlf> or uh..
22:58 < nlf> convert the buffer to an array
22:58 < nlf> and use indexOf
22:58 < irmatc> nlf: oooh, interesting
22:59 < irmatc> that sounds more right
22:59 < nlf> Array.prototype.slice.call(buffer)
22:59 < nlf> it's a start at least
23:02 < wyled> there is also a .hexSlice(start, end) method
23:03 < EaterOfCorpses> Hello
23:03 < wyled> hi
23:03 < nlf> wyled: buffers have a slice, but it returns another buffer which doesn't help him any
23:04 < wyled> hexSlice returns a hex value
23:04 < wyled> there is also asciiSlice
23:04 < wyled> binarySlice, etc
23:04 < styol> pieSlice?
23:04 < EaterOfCorpses> :D
23:05 < wyled> its part of SlowBuffer
23:05 < EaterOfCorpses> does anyone know how to install Node on ubuntu without getting version 0.6?
23:05 < wyled> which Buffer funs on top of
23:05 < wyled> EaterOfCorpses, yes
23:06 < EaterOfCorpses> wyled, how if I may ask? :)
23:06 < rossk> build from source!
23:06 < wyled> http://pastebin.com/HP0Wb0g4
23:06 < wyled> this will install v 0.10.12
23:06 < wyled> i did it today several times :)
23:06 < EaterOfCorpses> I just did that wyled and I got 0.6.19
23:07 < wyled> did you do apt-get update?
23:07 < EaterOfCorpses> let me remove update and do it again
23:08 < wyled> what version of ubuntu also?
23:08 < EaterOfCorpses> Qauntal afaik
23:08 < EaterOfCorpses> yep qauntal
23:09 < EaterOfCorpses> cant go up because there is no update for armel
23:09 < wyled> i would uninstall too, and make sure you don't have any conflicting repos in /etc/apt/sources.list.d
23:10 < wyled> so apt-get remove --purge nodejs npm
23:10 < wyled> then apt-get update
23:10 < wyled> then apt-get install nodejs
23:10 < wyled> (note there is no npm)
23:11 < nathan7> EaterOfCorpses: I wonder if the PPA has armel binaries at all
23:11 < wyled> my guess is that the npm repo is preventing you from upgrading
23:11 < wyled> npm package*
23:11 < wyled> since there is no npm package anymore, it is included with nodejs
23:12 < EaterOfCorpses> but the first time I didn't get npm when I installed nodejs via that script you sent me 
23:12 < wyled> how did you already have node .6 installed?
23:12 < EaterOfCorpses> I didn't
23:12 < wyled> @_@
23:12 < EaterOfCorpses> I installed it via the apt-get
23:13 < Reflow> what book can i read as introduction to programming with javascript
23:13 < Reflow> i have a lot of experience with other programming languages
23:14 < EaterOfCorpses> Reflow, then I think you can just dive in the deep? and just try stuff with node?
23:14 < wyled> are you on some kind of weird architecture?
23:14 < EaterOfCorpses> wyled, armel, efika mx
23:14 < wyled> ah
23:14 < EaterOfCorpses> so yeah weird and uncommon
23:14 < wyled> yep, i see the latest version is .6
23:14 < Reflow> EaterOfCorpses: i'm trying but there are many stuff that i didn't know you could do in js
23:15 < wyled> you will have to install from source most likely
23:15 < Reflow> EaterOfCorpses: so i want to learn them all
23:15 < wyled> or try these: https://github.com/itwars/nodejs-ARM
23:15 < EaterOfCorpses> thanks wyled will try
23:16 < wyled> anytime, if you need help building from scratch let me know
23:16 < EaterOfCorpses> Reflow ah I seee, I dont know any book sorry
23:16 < EaterOfCorpses> wyled, I did it alot of times before but got weird buserror errors when installing express, and forever
23:17 < wyled> hmm
23:17 < EaterOfCorpses> so I thought it would be better to get a precompiled
23:17 < wyled> even with ./configure --without-snapshot ?
23:18 < wyled> here is an interesting build script too: https://gist.github.com/edhemphill/5094239
23:18 < EaterOfCorpses> wyled should I take wheezy or sqeeuze?
23:19 < wyled> wheezy i think is newer
23:19 < EaterOfCorpses> oh I see already wheezy is armhf and sqeeuze armel
23:20 < wyled> ah yea
23:20 < wyled> there's also this: https://github.com/itwars/Nodejs-ARM-builder
23:21 < EaterOfCorpses> wyled, do you maybe know how to flash an Efika MX with armhf and ubunutu 13? 
23:21 < wyled> sorry, no
23:21 < EaterOfCorpses> its okay ^^
23:24 < EaterOfCorpses> I didn't know debs where that easy. just a tar.gz wow
23:30 < nathan7> EaterOfCorpses: they're a tar and a cpio archive
23:31 < EaterOfCorpses> nathan7: so no gz? I expected gz, because thats common used
23:32 < nathan7> EaterOfCorpses: yeah, tar.gz
23:33 < EaterOfCorpses> nathan7: so gz or cpio? Im confused
23:33 < nathan7> EaterOfCorpses: get a deb
23:33 < nathan7> EaterOfCorpses: ar x blah.deb will extract it
23:33 < nathan7> EaterOfCorpses: you get two files, both .tar.gzs
23:33 < nathan7> EaterOfCorpses: control and data if I am not mistaken
23:34 < nathan7> EaterOfCorpses: one of them contains package data
23:34 < nathan7> EaterOfCorpses: the other the package
23:34 < EaterOfCorpses> nathan7: I got a deb here with data.tar in it only can be because I have opened it in 7z
23:35 < nathan7> EaterOfCorpses: might be a control file and a data tar
23:35 < nathan7> EaterOfCorpses: I haven't touched Debian systems in.. a year, now
23:36 < EaterOfCorpses> nathan7: aah, I touch mine once in a week or so when pushing a project to my little server
23:38 < EaterOfCorpses> wyled: Thank you! everything works now, I can install forever and express without any buserrors! Thank you so much :)
23:38 < wyled> no prob
23:39 < addisonj> nodeconf was wonderful but I am still tired from it
23:40 < addisonj> I need post-conference vacations
23:57 < jdelgado> git pull doesn't change the head, it just updates the repo info - right?
23:57 < nathan7> no
23:58 < nathan7> git pull changes head
23:58 < nathan7> git fetch updates the repo
23:58 < jdelgado> fuuu
23:58 < jdelgado> oh easy fix then
23:58 < jdelgado> thank you sir
23:58 <@mbalho> git taco
23:58 < nathan7> git fetch origin taco
23:58 <@mbalho> --rebase taqueria stomach
23:58 <@mbalho> i dont know if that makes sense
23:58 < jdelgado> lmao
--- Log closed Wed Jul 03 00:00:23 2013
