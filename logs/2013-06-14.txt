--- Log opened Fri Jun 14 00:00:22 2013
--- Day changed Fri Jun 14 2013
00:00 < ChrisPartridge> M28: not easily
00:00 < M28> do you suggest any workaround?
00:01 < M28> I don't need it to work on linux, since it's internal stuff for my servers
00:01 < ChrisPartridge> M28: it would easier on linux
00:02 < M28> yeah I know :(
00:02 < ankit_dev> I want to send a message from server to a particular client id
00:02 < M28> but I have several windows 2008 servers, so I can't really choose what I need to support
00:03 < websocket_issue_> @ChrisPartridge how can i access a client id in the server ? using einaros ws #nodejs
00:03 < ChrisPartridge> M28: you could write a native addon, and talk with the windows API's.. might not be easy
00:03 < M28> I see... damn
00:04 < M28> any other alternative you can think of?
00:04 < TonkaTruck> In mongoose, in the schema.post('save') event, can you determine if the doc is new or exists?
00:04 < M28> I know how to write v8 addons, since most of my servers already use v8 for scripting (totally unrelated to node.js), but I'd rather use a preexisting solution
00:04 <@konobi> ssl session ids?
00:04 <@tjfontaine> M28: maybe there's some WMI stuff you can consume
00:05 < M28> never heard of that
00:05 < ChrisPartridge> M28: Yeah, i'm not aware of anything, I haven't attempted it myself
00:06 < M28> well... since I'm lazy... I guess it couldn't hurt to create a simple C program that takes the pid and outputs the memory usage for me...
00:06 < M28> then just invoke it
00:06 < ChrisPartridge> M28: might be something in here https://github.com/shadabahmed/wmi
00:06 < M28> I'll take a look at it
00:06 < M28> I'll probably settle for my solution though
00:06 < M28> thanks for the help
00:08 < gildean> websocket_issue_: here's an example: https://gist.github.com/gildean/5778473
00:09 < ChrisPartridge> M28: yw, good luck :)
00:13 < samholmes> Sup all?
00:16 < samholmes> Anyone in north county San Diego?
00:18 < rhalff> no FL
00:23 < samholmes> Ah
00:23 < samholmes> Looking to network you see.
00:24 <@konobi> samholmes: nodeconf!
00:24 < samholmes> When where?
00:25 < samholmes> <.<
00:25 < samholmes> >.>
00:25 <@konobi> nodeconf.com
00:25 < samholmes> Shits sold out! fml
00:26 < samholmes> How much is the usual admission?
00:26 <@konobi> not sold out... there's camping tickets
00:27 < samholmes> konobi: right, but a bit pricy
00:27 < samholmes> is that on par with the other tickets?
00:27 <@konobi> cheaper
00:27 < samholmes> o.o
00:27 < samholmes> not cheap this nodeconf business
00:28 < samholmes> guess that's the price for networking. :P
00:28 <@konobi> conferences tend to be expensive things to run
00:28 < samholmes> Are there any cheaper avenues to take to get me started?
00:29 <@konobi> node user group meetups
00:29 < sinclair|net> konobi: why, because of all the beer and pizza you have to buy to get people to turn up?
00:30 < sinclair|net> feed people beer and pizza, and they will sit through anything
00:30 <@mbalho> sinclair|net: do you know the difference between a conference and meetup?
00:30 < zomg> sinclair|net: venues are pretty expensive even if it's not super fancy
00:30 < sinclair|net> mbalho: obviously not
00:30 < darth-cheney> hey dudes, how can you read bytes
00:30 < darth-cheney> with node, that is
00:30 <@mbalho> darth-cheney: is this a setup for an excellent nerdy joke?
00:30 < darth-cheney> no I just phrased it poorly I'm being serious
00:30 <@konobi> infinite
00:31 <@konobi> oh... not even how many... just how to read
00:31 <@mbalho> darth-cheney: most things in node give you Buffers which are groups of bytes
00:31 <@konobi> darth-cheney: read the docs
00:31 < samholmes> Is the beer and pizza free at nodeconf?
00:31  * samholmes is thinking it might be worth it now
00:32 < darth-cheney> so I have to work through a Buffer object
00:32 <@mbalho> darth-cheney: nodejs.org/api
00:32 < darth-cheney> in C this is all pretty straightforward, and in python you just 'rb' when opening a file
00:32 < darth-cheney> cool I'll check it out thanks
00:34 < jesusabdullah> umm, guys
00:34 < jesusabdullah> [16:33] ~~~Irssi: #Node.js: Total of 1000 nicks [9 ops, 0 halfops, 0 voices, 991 normal]
00:34 < jesusabdullah> That's a lot of nicks
00:34 < seismo> 1000 is a nice number
00:34 < seismo> aaaah camon
00:34 < seismo> hi jcrugzz -_- user 1001 
00:35 < seismo> :P
00:35 < samholmes> jesusabdullah: is that a new record or somein?
00:35 -!- mbalho changed the topic of #Node.js to: CONGRATULATIONS TO OUR 1001'TH USER JCRUGZZ!
00:35 < jcrugzz> lolwut
00:35 < julianduque> wow, 1000
00:35 <@mbalho> jcrugzz: YOU'RE THE 1001TH USER OF NODEJS IRC CLICK HERE TO REDEEM YOUR FREE PONY
00:35 < samholmes> I thought it was always that high :\
00:35 < julianduque> jcrugzz: YAYS!
00:36 < julianduque> free pony!
00:36 < chilts> free everything!
00:36 < jcrugzz> mbahlo: OMG A PNY
00:36 < julianduque> mbalho: a free pony or a free pony *ride*?
00:36 < samholmes> GlobalDomestic gets no love for being 1002?
00:36 <@mbalho> sorry click here http://i.imgur.com/B1EOZVJ.gif
00:36 < ChrisPartridge> quick, click it before someone else redeems it!
00:36 < seismo> samholmes: nope. also yuya_ was #1000. also no fame.
00:37 < jesusabdullah> mbalho: wth is chasing that horse
00:37 < jcrugzz> mbahlo: omg best gift ever
00:37 < samholmes> seismo: weird
00:37 <@mbalho> ostrich
00:37 < samholmes> jcrugzz: or should you say GIF?
00:37 <@mbalho> http://i.imgur.com/kA6ZhqR.gif
00:38 < jcrugzz> samhomes: ;)
00:38 <@konobi> mbalho: themetapicture fan?
00:39 <@mbalho> konobi: dunno what that is
00:39 <@konobi> themetapicture.com
00:39 <@konobi> productivity dive ftw!
00:41 -!- mbalho changed the topic of #Node.js to: node js - horse gif: http://bit.ly/13SnCtV -  http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
00:41 < samholmes> Is it necessary to use any fancy control flow libs?
00:41 < samholmes> Or could I get by with Vanilla JS? :D
00:41 < chilts> http://www.huffingtonpost.co.uk/2013/02/27/25-funny-cat-gifs_n_2773963.html
00:41 < jcrugzz> samholmes: honestly depends how complex of a thing you are doing. most of the time vanilla js is fine
00:41 < ChrisPartridge> samholmes: i tend to use async in applications, but vanila in modules if its only a few cases
00:41 < samholmes> I used to use yarn (some weirdness I built a while back), but now I'm slowly moving to just named functions.
00:42 < gildean> jesusabdullah: looks like an ostrich
00:42 < jesusabdullah> gildean: hmmmm
00:42 < jesusabdullah> gildean: maybe an emu?
00:42 < julianduque> 
00:42 < samholmes> Recently I created 'finisher' which is nice for quick parallel async stuff.
00:42 < gildean> jesusabdullah: looks more like an ostrich than an emu to me
00:42 < ChrisPartridge> jesusabdullah: emu wouldn't put its head down, it would be pecking like a mad dog
00:43 < jesusabdullah> samholmes: sometimes I use async, otherwise I throw together some nilla code
00:43 <@konobi> samholmes: async is pretty useful as a lib
00:43 < jesusabdullah> I yield to your expertise, gildean and ChrisPartridge 
00:43 < ChrisPartridge> jesusabdullah: could it be a large turkey?
00:43 < samholmes> konobi: But, I feel like it's a bit bloated, no?
00:43 < gishmel> is node always running strict mode? is there a way to always run in strict mode if not?
00:43 -!- mbalho changed the topic of #Node.js to: node.js - this is what happens when you don't use small modules: http://i.imgur.com/1IGEn1z.gif -  http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
00:43 < jesusabdullah> that would be a gigantic friggin' turkey
00:43 <@konobi> samholmes: not really
00:44 < samholmes> Shouldn't some of async be separated into smaller, single purpose modules?
00:44 < jesusabdullah> gildean: ugh, why?
00:44 < jesusabdullah> er
00:44 < jesusabdullah> gishmel: ugh, why?
00:44 < ChrisPartridge> lol mbalho!
00:44 <@mbalho> :D
00:44 < jesusabdullah> gildean: continue as you were
00:44 < samholmes> Like, if I want parallel/serial control flow lib, then there should be one or two for that.
00:44 < samholmes> two separate
00:44 < jesusabdullah> gishmel: no, but you can 'use strict'; the same as anywhere else inside your modules
00:44 < samholmes> If I want that fancy iterator methods, then there should a be a lib for that.
00:45 < jesusabdullah> gishmel: in my opinion, though, the gains are questionable at best
00:45 < ChrisPartridge> samholmes: just var whatYouNeed = require('async').whatYouNeed
00:45 <@konobi> samholmes: it's pretty small lib tbh
00:45 < samholmes> Doesn't make sense to use async for just a few methods.
00:45 < jesusabdullah> I mean
00:45 < jesusabdullah> samholmes: You have to balance idealism with pragmatism here.
00:45 <@konobi> samholmes: just use what you need to... no need to shave everything off
00:46 < samholmes> I suppose that's right. :P
00:46 < gishmel> so can i ask the reverse and say why would I not want strict mode? 
00:46 < jesusabdullah> samholmes: async may not fit the platonic ideal but it's not so terrible that it counters the pragmatism of using a library
00:46 < rafaqueque> hi sirs, node js can handle 100 ping requests to 100 different servers (on ping each one) in a short amount of time? let's say... 5 seconds
00:46 < jesusabdullah> gishmel: because some library are written such that they depend on strict mode being turned off
00:46 <@konobi> rafaqueque: no, node doesn't do ICMP (out of the box)
00:46 < jesusabdullah> gishmel: rare that they'd break when you turn on strict mode, but possible
00:47 <@mbalho> OMG HORSEJS IS HERE https://twitter.com/horse_js/status/345339832547037184
00:47 <@mbalho> quick block all exits
00:47 < jesusabdullah> oshit mbalho horse_js has summoned MINIONS
00:47 <@mbalho> i knew luring it with horse gifs would work
00:48 <@mbalho> hey javascript horse get in my van and watch these gifs
00:48 < gishmel> hmm interesting and can i use var nameofVariable : myOwnMadeType or does it only work with native types?
00:50 <@konobi> rafaqueque: there's npm modules for it though it seems
00:50 < jesusabdullah> gishmel that does not look like valid javascript
00:50 < samholmes> What's the diff between waterfall and series?
00:50 < ChrisPartridge> mbalho: i hear clydesdale script is cool, it compiles down to horsejs
00:50 < rafaqueque> konobi, ok, great. i'm ditching this shitty php script i've built a few days ago. very slow and obviously is not async :/
00:51 <@konobi> samholmes: one happens in series... the other happens in series but passes info along
00:51 <@mbalho> ChrisPartridge: lol
00:52 < samholmes> I see
00:56 -!- mode/#Node.js [+o TooTallNate] by ChanServ
01:00 < tklun_> Elco, what's up
01:02 < darth-cheney> ok so I have a legit question this time
01:02 < darth-cheney> when node reads files in hex it just smushes all of the hex values together
01:03 <@konobi> by default it reads it in binary
01:03 < darth-cheney> yeah, but that's too cumbersome to fuck around with
01:03 < darth-cheney> though it would be easier to determine which byte is what
01:03 < AAA_awright> You don't 'read files in hex' as such, it's just retrieving a series of bytes
01:04 < darth-cheney> sorry I should explain
01:04 < darth-cheney> I'm doing image recovery
01:04 < darth-cheney> so I need to read byte values
01:04 <@konobi> a buffer contains .length bytes
01:05 < darth-cheney> right, but there's no way to just read and output binary
01:06 <@konobi> sure there is
01:06 < AAA_awright> What do you mean
01:06 < darth-cheney> let's say I'm looking for a specific byte header
01:06 < darth-cheney> I need to compare
01:06 <@konobi> darth-cheney: seen node-ctype ?
01:06 < darth-cheney> so bufferData[2] == 
01:06 < darth-cheney> what can I put on the other end there?
01:06 < darth-cheney> no let me check it out
01:07 <@konobi> darth-cheney: 0xA3
01:07 < AAA_awright> darth-cheney: It's going to be an integer and you probably want === since the value could be undefined
01:08 < darth-cheney> so I just type is as an integer
01:08 < darth-cheney> konobi: you're onto what I normally do in other languages
01:08 < darth-cheney> does that work in this case?
01:09 <@konobi> darth-cheney: not sure, i usually use higher level libs
01:09 < darth-cheney> dammit
01:09 < darth-cheney> I can use hex just like that
01:09 < darth-cheney> in python it's \x instead of the c style 0x that's where I'm mixed up
01:09 < ssafejava> darth-cheney: Can you use typed arrays for this?
01:10 < AAA_awright> ssafejava: I think the confusion is over the representation, not the model
01:10 < AAA_awright> >> 0x5f
01:10 < purr> AAA_awright: (number) 95
01:10 <@konobi> darth-cheney: yeah, "\x77" will give you "x77"
01:11 < darth-cheney> ok I think that will work
01:11 < AAA_awright> konobi: Well of course if you put it in quotes it's only going to specify code points, not bytes
01:11 < darth-cheney> the reason it's not a model issue is because the program is looking through erased data to find images of a variety of formats
01:11 < darth-cheney> they all have different headers
01:12 <@konobi> AAA_awright: yeah, other languages do odd things of course =0)
01:12 < M28> the child_process I am execing is returning the cmd.exe pid, instead of the child process pid...
01:13 <@konobi> M28: using which method?
01:13 < M28> child_process.exec("srcds.exe stuff", etc).pid
01:13 <@konobi> M28: use spawn instead
01:13 < M28> what's the difference?
01:14 <@konobi> one is direct execution, one uses the $SHELL to execute
01:15 < darth-cheney> thanks dudes
01:15 < M28> oh okay
01:18 < M28> I'm having a few problems with .spawn though
01:19 <@konobi> M28: you need to pass args as a array
01:19 < M28> I know
01:19 < M28> like, it seems that the application is waiting on some kind of input that never comes or something
01:20 < M28> http://puu.sh/3fc5J/04e53d4126.png
01:20 < M28> probably something with stdin...
01:20 <@konobi> you probably need to write something to stdin
01:21 < M28> the thing is
01:21 < M28> when I start it with .exec, I don't need to do anything...
01:21 < M28> maybe it depends on cmd.exe for some reason?
01:22 < M28> if that's the case, is there any other way to get the actual pid?
01:22 <@konobi> the pid should still be fine
01:22 < M28> I mean
01:22 < M28> the pid with .spawn is fine
01:22 < M28> but unfortunately, the application doesn't work if I start it that way
01:23 <@konobi> *shrug* will depend on the app
01:23 < ChrisPartridge> So, I've written a package which has a "bin" defined in package.json, its in the path, but when I run it, I get ": No such file or directory" - anyone seen this
01:24 <@konobi> ChrisPartridge: your current path?
01:24 < M28> I don't have much control over the app I'm managing
01:24 < M28> but I can code something in C to do whatever I need
01:24 <@konobi> ChrisPartridge: `hash -r` (assuming it's bash)
01:24 < M28> for example, to get the process memory usage, I'm already using a small C program that takes the pid and outputs the memory usage
01:25 <@konobi> M28: assuming you're using spawn in C, just do the same thing in node
01:25 < M28> so, anything that I can use the win32 api with is fine for me
01:25 < M28> I mean
01:25 < M28> node calls the C program to get the memory usage of the other process
01:25 < ChrisPartridge> konobi: sorry, is that meant to output something? 
01:26 <@konobi> ChrisPartridge: nope... it just refreshes the program cache
01:26 < ChrisPartridge> hm yeah, didn't help then
01:26 <@konobi> ChrisPartridge: npm vs npm -g ?
01:26 <@konobi> gotta roll, bbl
01:27 < ChrisPartridge> konobi: it's installed with -g yeah
01:30 < ELLIOTTCABLE> I'm working with CSS serverside, and I need to, well, get the computed style of some HTML.
01:30 < ELLIOTTCABLE> Does anybody know of a module that constructs the equivalent of getComputedSTyle, given some CSS?
01:30 < ELLIOTTCABLE> I'm already using cheerio and the CSSOM npm-module
01:30 < ELLIOTTCABLE> I can usefully parse-out information from, say, <span style="color: red">foo</span>
01:31 < ELLIOTTCABLE> but I'd *really* like to do more useful stuff with full style-sheets, i.e. getting the computed `color` of an element from my cheerio object.
02:02 < zeromodulus> Does anyone here develop independently? I.e. for themselves and no clients, not freelance, but developing, owning, and operating the finished work?
02:03 < Bubo> developing what
02:03 <@mbalho> its easy you just put a license in your git repos
02:03 < zeromodulus> Anything.
02:03 < ningu> zeromodulus: that sounds a bit like making a living off making youtube videos. I'm sure some people can do it, but probably not many.
02:04 < zeromodulus> Fun fact: I tried that once.
02:04 < ningu> what kind of videos?
02:04 < zeromodulus> Uninformed ramblings about various topics.
02:06 < zeromodulus> :D
02:06 < ningu> sounds like most of youtube
02:06 < ningu> only a few people are entertaining enough
02:07 < ChrisPartridge> ugh, this is driving me nuts
02:14 < RigidWig> can someone tell me why people use stackful and heroku to deploy apps? is the idea for simplicity in that setting up a linux VPN yourself is too tedious? that those services configure everything for you? what?
02:16 < ningu> RigidWig: I suppose in theory they can optimize things that would be a pain for you to optimize yourself
02:17 < ningu> RigidWig: I believe you can get a better database for the same $/month than you could if you ran it on your own VPS
02:17 < ningu> just based on what hardware that VPS would have for the same price
02:17 < ningu> not due to some sort of magical knowledge
02:18 -!- mode/#Node.js [+o TooTallNate] by ChanServ
02:18 < ningu> RigidWig: anyway, I'm basically in the same position, I don't think setting up a server is that hard and it's nice to have the flexibility
02:35 < owen1> what is the difference between exec and spawn other than buffering the output vs emitting events?
02:38 < ChrisPartridge> owen1: you get a duplex stream pretty much, stdin/stdout - so you can pipe stuff
02:38 < ChrisPartridge> (with spawn)
02:38 < samholmes> Is EventEmitter.prototype.emit sync or async?
02:39 < ningu> samholmes: sync, it returns immediately, not sure exactly how the listeners are called but probably not all on one tick
02:40 < ChrisPartridge> i think they are
02:41 < samholmes> ningu: Actually, I meant the listeners
02:42 < samholmes> How are the listeners called? Are they async?
02:42 < ningu> samholmes: not async in the same way as blocking on i/o in any case
02:42 < samholmes> That is, if I emit an event, will the listeners be called before I continue pass .emit?
02:42 < ChrisPartridge> samholmes: https://github.com/joyent/node/blob/master/lib/events.js#L58-L129
02:44 < ningu> sync
02:45 < ChrisPartridge> konobi: just fyi, my issue was apparently windows line endings in the script
02:46 < owen1> ChrisPartridge: thanks
02:50 < ChrisPartridge> owen1: yw, streams rule!
02:50 < samholmes> ChrisPartridge: aren't streams just event emitters?
02:52 < ningu> samholmes: lots of things in node are eventemitters
02:52 < samholmes> So streams are sync too?
02:53 < ningu> only from the moment the event is emitted to when the listeners are called
02:53 < samholmes> Which is a good thing
02:53 < samholmes> I suppose
03:48 < poincare1011> is cradle a good idea to use for node.js? Or should I just use the HTTP api?
03:49 <@mbalho> i like nano better for couchdb
03:52 < poincare1011> mbalho: why so
03:54 <@mbalho> API is better
03:56 < poincare1011> mbalho: okay, will check that out too
03:56 < px> Is it a good idea to stay away from EventEmitter and just use the err, data callback style
04:00 <@mbalho> false dichotomy
04:00 <@mbalho> https://github.com/maxogden/art-of-node#events
04:10 < owen1> looking for substackian way for scraping millions of urls. any ideas?
04:15 < owen1> http://maxogden.com/scraping-with-node.html
04:15 < owen1> i'll try Cheerio
04:38 < addle1618> This may be the wrong place to ask this, but I am in the process of making an online game for fun (one of the many) and I'm doing some refactoring of what I have. I was wondering if there were any articles one may point me to that may help with approaching the Architecture of the app (not as much the game logic) for long time maintainability etc
04:39 < addle1618> ((by one of the many I mean, one of the many other people creating HTML5 games with node.js as their backend))
04:40 < ChrisPartridge> addle1618: modularise as much as possible
04:43 < addle1618> Yeah I'm approaching the situation in a more modular way than a 'framework'y way so far, but because this is more of a new thing I was wondering if their was any blog posts talking about what seemed to help said group in the long run. Thank you for your input!
04:44 < ChrisPartridge> addle1618: also, have a read of substack blog, http://substack.net - lots of great tid bits on there
04:45 < owen1> addle1618: go over substack's projects and read as much as you can until passing out
04:47 < substack> addle1618: lately I've been designing apps this way https://github.com/substack/hyperspace#example
04:49 < addle1618> Thank you, I will start reading it!
04:50 < adu> ouch, that horse has a big bite
04:52 < jason11> Hey all, trying to build the latest node from scratch on rhel6. I can build but when I do "sudo make install" i get this error: ln: cannot remove `node': Permission denied. 
04:55 < owen1> substack: i followed that example and it's interesting. what would be super cool is an example of simple server that uses hyperspace to render on the server and on the client. i just don't know how to use this module in the real world. and i am willing to give it a try and send pull request if i make it happend.
04:55 < st_luke> jason11: the install target in the makefile can't remove your old version of node
04:55 < st_luke> you could try removing it yourself 
04:55 < owen1> (pull request for adding this example)
04:56 < substack> owen1: that's exactly what that example does
04:57 < substack> you write a shared render.js and then you use it to render on the server and the client
04:58 < owen1> substack: oh. wait, u'r taking about 'hooking up a data feed' example.. let me see
05:03 <@mbalho> st_luke: "without having to a complex" you forgot to write 'do'
05:08 < jason11> st_luke: thanks, turned out to be an error in the build tree. *shrugs*
05:13 < gishmel> so I have a question in regards to pure javascript I am making my own module called Character for a final fantasy 1 style game and they have different methods. I am struggling with the interpretation of the this reference and keeping track of this. Is there a good way to introspect the this context
05:15 < arnorhs> gishmel: you mean instrospection beyond console.log(this) ?
05:18 < gishmel> thanks
05:18 < gishmel> i was hoping for more but if thats all there is than thats all there is
05:22 < addle1618> Definately see how hyperstream could be useful for something like updating a blog from ssh using an alternative file type like a .txt
05:30 < st_luke> mbalho: ah thanks
05:31 < st_luke> i guess i shoudl proofread
05:32 < shama> gishmel: check out util.inspect as well: http://nodejs.org/api/util.html#util_util_inspect_object_options
05:42 < gishmel> thank you shama that is extremely useful 
05:42 < owen1> addle1618: i think it's suppose to be an alternative to airbnb's 'holy grail' but i am not sure. playing with the example now. 
05:42 < owen1> http://nerds.airbnb.com/weve-launched-our-first-nodejs-app-to-product/
05:43 < owen1> they built a framework that let's u use the same code for client and server side rendering
05:43 < heath> you guys know of an irc channel for gruntjs?
05:43 < shama> heath: #grunt
05:45 < ChrisPartridge> owen1: yes, but you are still tied to backbone in that case
05:45 < owen1> ChrisPartridge: yes! that's why i am not giving up on using hyperspace
05:47 < gishmel> and they didnt make it its a use case of node.js and backbone.js together they did however publish their rendr library which is pretty cool https://github.com/airbnb/rendr
05:59 < owen1> OMG. hyperspace example works for me. not sure what's going on there but it's working
05:59 < owen1> i'll push it to github so others will be able to just clone it and try it
06:03 < fkm> Hi there. What method would you recommend, to run a node instance as a service? I've found "forever" and haven't had any trouble so far. But I found it somewhat weird that this basic functionality isn't included in node. 
06:04 < fkm> Am I doing it right? :-)
06:04 < owen1> oh. there is an example folder there.. damn
06:04 < owen1> didn't notice it
06:04 < owen1> fkm: yes. node is not trying to be the next ruby/python. 
06:05 < owen1> it try to keep a small core
06:05 <@mbalho> fkm: i like mon + mongroup
06:05 < fkm> Ok. Thank you owen1! :-)
06:05 < owen1> so forever is a good option. try pm2
06:05 < owen1> mbalho: used this combo a lot but i find forever nicer for multiple processes
06:05 < fkm> I will give those suggestions a try. Thank you mbalho and owen1!
06:06 < liquid-silence> hi all
06:07 < liquid-silence> I want to develop a small web app
06:07 < liquid-silence> what do you suggest as a web framework
06:07 <@mbalho> what will the web app do
06:07 < liquid-silence> I have looked at towerjs and sails
06:07 < liquid-silence> mbalho capture content and display on a screen
06:07 < liquid-silence> cms style
06:07 < owen1> liquid-silence: vanilla.js - https://github.com/oren/node-website-template
06:08 <@mbalho> does it need to do any of the following: have realtime collaboration, stream large amounts of data to and from clients and servers, upload large files, interface with external APIs
06:09 < owen1> mbalho: i am curious about your question.
06:10 <@mbalho> ok
06:10 < liquid-silence> mbalho its more for inline editing etc..
06:10 < liquid-silence> and upload images
06:10 < liquid-silence> have a api
06:11 < ChrisPartridge> might be worth looking at magnode from AAA_awright
06:13 < owen1> mbalho: why did u ask about those features? since express might not be a good fit for those?
06:14 <@mbalho> node isnt the best tool for the job if you arent doing things like that, so i am always curious if people are using node for things node is uniquely good at or for things other things are good at too
06:15 < liquid-silence> mbalho the app is done in rails
06:15 < owen1> mbalho: interesting. i use node for every web app/service.
06:15 < liquid-silence> works 100%
06:15 < liquid-silence> I just want to learn node, so wanted to redo it in nodejs
06:15 < ssafejava_> mbalho: Node is especially good for computing fibonacci numbers and curing cancer
06:15 < owen1> liquid-silence: u don't need frameworks. especially if u want to learn node
06:15 < owen1> http.creatServer
06:15 < liquid-silence> well I know node in the sense of sockets etc..
06:16 < owen1> is your friend
06:16 < liquid-silence> wrote some chat apps
06:16 < liquid-silence> etc..
06:16 < ssafejava_> yeah honestly I use node for most projects just b/c it's so easy to get up & running, especially for trivial apps
06:16 < ssafejava_> and no system-wide dependencies, except node itself
06:17 < ssafejava_> I've been through enough Python 2.2/2.4/2.6 hell to really hesitate screwing with that again
06:19 < owen1> ssafejava_: +1
06:20 < owen1> i don't care if it's a website that just serve html. no realtime, no streaming, almost no IO
06:20 < owen1> createServer will always be there for me
06:21 < ssafejava_> yeah. it's a great api and simpler than almost anything else out there.
06:35 < faceleg> so why shouldn't we make a cms in node?
06:35 < faceleg> as opposed to say, php?
06:36 < faceleg> because from where I'm standing (php), node looks a hell of a lot better 
06:36 < ssafejava_> nothing stopping anyone from making a node cms, there are plenty. (http://calip.so/)
06:36 < faceleg> yeah I know
06:36 < faceleg> mbalho: was saying it's not waht "node is fore"
06:36 < faceleg> for*
06:37 < ssafejava_> the node api has been in flux the last few years though so making a really robust CMS hasn't been a possibility until it stabilized about a year ago
06:37 < faceleg> I want to shift my php dev team to node as I hate php and think it is dead
06:37 < faceleg> yeah this is true
06:37 < faceleg> even a flux node is better than horrid php
06:37 < faceleg> I mean god man. PHP
06:37 < ssafejava_> well that's nonsense, of course. there are things node is well suited for and other things that may be difficult, but that's just like any other tech
06:37 < ssafejava_> and obviously a language's merits aren't the only thing driving adoption. php the greatest example of that
06:38 < mikolalysenko> faceleg: if you think you can make a better cms in node then do it
06:38 < faceleg> php has no merits
06:38 < ssafejava_> what does drive adoption, though, is ease of use. and that would be why, IMO, the Node community has been so incredibly active compared to other tech, on Github at least
06:38 < faceleg> i was looking @ apostrophe
06:38 < ssafejava_> faceleg: sure it does. 
06:38 < faceleg> node is just so easy to use
06:38 < mikolalysenko> faceleg: even if you fail, at least if you create modules along the way the next guy who tries can use them to build on top of your work
06:38 < faceleg> ssafejava_: I find to do anything one has to write copious amounts of code in PHP
06:39 < faceleg> and poor coding is just the norm with php
06:39 < ssafejava_> faceleg: Eh, sort of. Depends on what you're doing. Yeah, it's sloppy, but it's easy to use (upload to server, refresh browser) and beginner coders can learn enough to at least get some basics done quickly
06:39 < ssafejava_> I would agree that it's nothing to build a business on top of, but look at what facebook managed
06:39 < faceleg> full stack framework
06:40 < owen1> i build a module that gets url and return some information from it's dom. is that a scraper or is that a crawler + scraper?
06:40 < faceleg> php/mysql has become tiresome for me to work with
06:40 < faceleg> all clients always want a basic site with some twist
06:40 < faceleg> and the twist is always the killer
06:40 < faceleg> with node/mongo I feel creating site specific modules that add info onto standard models would be much faster to do
06:40 < ssafejava_> owen1: 'Crawler' is a term more suited for something that hits lots of disparate pages... 'scraper' would be a term more suited for something that targets a service or a group of services
06:40 < faceleg> and due to the nature of the env - js/json, more understandable 
06:41 < faceleg> than having 3 tables - model, link table and 'meta' table 
06:41 < faceleg> doing all that RDMS stuff is wasted time, I have a hunch that a web studio would be much more profitable and agile with node/mongo than php/mysql
06:41 < owen1> ssafejava_: how would u name my module?
06:42 < ssafejava_> owen1: Sounds like a scraper, you tell me, what is it for
06:42 < owen1> require('foo')(url, cb)
06:42 < owen1> and cb return some info from the DOM
06:42 < owen1> ssafejava_: ^
06:42 < ssafejava_> ummm.. i don't know. call it what you want, it doesn't sound like it does very much
06:42 < owen1> i plan to use it to scrape million of web pages
06:43 < ssafejava_> then it's a crawler. 
06:43 < owen1> maybe i'll modify it later to accept array of urls
06:43 < oinkon> whos scared should i be of the experimental status of node cluster?
06:43 < ssafejava_> oinkon: not very, I've used it in prod without issues
06:43 < owen1> ssafejava_: but the module itself is not crawling. so maybe i can call it scraper and the other module that will use it will be called crawler?
06:45 < jesusabdullah> https://github.com/senchalabs/connect/blob/master/lib/middleware/logger.js#L168-L174
06:45 < oinkon> all the alternatives like fugue, spark, and cluster don't seem to be maintained. Is that because everyone uses the official node cluster now?
06:45 < jesusabdullah> Holy shit this is gnarly
06:46 < jesusabdullah> oinkon: yes.
06:46 < ssafejava_> jesusabdullah: goddamn.
06:47 < jesusabdullah> ssafejava_: inorite? I'm trying to figure where the fuck it pulls out the data
06:48 < jesusabdullah> oh, I see, figures I wouldn't scroll down
06:48 < jesusabdullah> EITHER WAY that is GNAR DOGG
06:57 < foobar12345> hello, i think i found a bug but im not sure..
06:58 < foobar12345> node crashes when using decipher.update/decipher.final with hex encoding, if the length is an odd number:
06:59 < foobar12345> node: ../src/string_bytes.cc:301: static size_t node::StringBytes::StorageSize(v8::Handle<v8::Value>, node::encoding): Assertion `str->Length() % 2 == 0 && "invalid hex string length"' failed.
06:59 < foobar12345> the bug is, its also crashing when using try/catch
07:07 < johnnode_> totally agree with foobar12345. I did get the same result with that but not sure where the bug arise in nodejs source code
07:13 < johnnode_> here how did i find the bug: make expressjs app. encrypted and save a cookie (e.g including userid,pass with a secret key  "my new secret") then change the secret key to new value, e.g "my new value of secret key", restart the server -> then I got problem with decryption step, even with try catch.
07:18 < foobar12345> johnnode_: i have a hotfix in my app: if(ciphertext.length%2!==0)return null;
07:40 < Havvy> On an EC2 instance, building the index keeps getting killed: http://pastebin.com/8U7eZkYX
07:41 < Havvy> How can I stop it from being killed?
07:41 < owen1> is there a better pattern than html += chunk; for getting chunks from 'data' event? https://github.com/oren/scraper/blob/master/index.js
07:42 < owen1> i heard someone on nodeup podcast mention that people should stop doing it since it's too verbose or something similar
07:43 < gishmel> what is a chunk?
07:43 < ssafejava_> Havvy: that's bizarre, not getting it locally. sorry
07:44 < ssafejava_> owen1: Depends on what you're doing. If you need to read the response body & do something with it, that's your only option (and you can throw it into some middleware to make it easier). Otherwise, the node way would be to pipe the stream 
07:46 < ssafejava_> in your scraper project, it makes the most sense to just do it as you're doing it
07:46 < ssafejava_> I wouldn't overthink it. I'm sure what they were referring to on nodeup was streams, you'll want to learn those when you do more advanced projects but they won't do anything for you in this one
07:46 < owen1> ssafejava_: so in my case i have to do that since i need to feed entire html to cheerio
07:47 < ssafejava_> owen1: Yeah exactly.
07:48 < ssafejava_> But if I were doing something else, like proxying a request, I would do something like function(req,res,next){ http.get(options, function(response){res.status(response.statusCode).set(response.headers); response.pipe(res);}); }
07:48 < ssafejava_> and the pipe saves you from buffering up the response in node and waiting until it's complete before sending it. makes it faster & less memory intensive, a real win when you can get it
07:48 < personDo> Do skype,yahoo other chat and social communication prog work 2 spoil muslims youth and spy 4 isreal&usa???????
07:48 < personDo> do they record and analyse every word we type????????????
07:49 < ssafejava_> wat
07:50 < owen1> ssafejava_: express and middleware confuses me so i tend to never use it ):
07:52 < owen1> what does response.pipe(res);
07:52 < owen1> do?
07:52 < owen1> where are u sending the response?
07:52 < ssafejava_> well my var naming is a little confusing there, but that's in the scope of a proxy server. so in that example, 'res' is the response to the client, 'response' is the response from the server being proxied
07:53 < ssafejava_> so I'm piping the proxied server's response into the response I'm sending to the user, as if the response went to them directly in the first place.
08:19 < owen1> ssafejava_: thanks!
09:35 < Moderate> Hi everybody. Is somebody using mongoose-forms and Jade Engine? I have difficulties to display the form. :/
09:59 < theom3ga> hi there. I'm trying to update a npm package using "npm update grunt", but it says 
09:59 < theom3ga> npm WARN package.json Learning@0.0.0 No repository field.
09:59 < theom3ga> npm WARN package.json Learning@0.0.0 No readme data.
09:59 < theom3ga> and does not update anything
09:59 < ningu> theom3ga: that warning is unrelated and not significant
10:00 < theom3ga> ningu: aha, I supossed so. What about the updating? Should I manually change the version number in package.json ?
10:01 < ningu> are you trying to update grunt or one of its dependencies?
10:02 < theom3ga> Yep
10:02 < theom3ga> It happened with grunt-markdown and with grunt itself
10:04 < ningu> you are sure there are newer versions?
10:04 < ningu> I dunno, you could just remove the files and do npm install
10:05 < theom3ga> ningu: indeed, if I remove node_modules and the entry from package.json, and then npm install again it installs the newest version
10:06 < ningu> theom3ga: you must have specified a different version in package.json then
10:06 < jaya> Hello guys ... I'm getting problem with request: ECONNREFUSED, Connection refused
10:06 < jaya>  ... I'm making a transparent request 
10:06 < ningu> jaya: what is a transparent request?
10:08 < jaya> Here is the Code http://pastebin.com/jhixtPf0 ningu 
10:10 < radiodario> Hi there, i'm trying to write unit tests for functions that handle express requests and responses, is there a way to mock these?
10:11 < ningu> theom3ga: package.json specifies what version (or range of acceptable versions) should be installed, npm will respect it
10:11 < ningu> radiodario: if you have the right attitude you can mock anything
10:11 < theom3ga> ningu: I see, then that's why removing the entry from package.json does the job
10:12 < ningu> theom3ga: yeah but you shouldn't remove it, you should update it
10:12 < ningu> I didn't understand your question at first
10:12 < theom3ga> I guess there must be something like ">=0.2.0" so npm knows to get the latest version or something
10:12 < radiodario> ningu, i mean, do i just build an object that has all the functions that will be called?
10:12 < ningu> theom3ga: * means any version
10:12 < ningu> theom3ga: semver.org
10:14 < prettyrobots> Forever ago, I saw a library that would dump an object to the console, and you were table to expand and collapse its properties.
10:15 < prettyrobots> I can't remember it's name, though.
10:16 < ningu> jaya: is there a web server running on localhost port 80?
10:19 < theom3ga> prettyrobots: are you talking about the command line console? There's no way you can "expand and collapse" anything there
10:19 < theom3ga> not interactivelly, at least
10:19 < jaya> Nope ningu
10:20 < ningu> jaya: so why do you expect it to be able to connect to anything? there's nothing there to connect to
10:20 < prettyrobots> theom3ga: I assumed it was curses based.
10:22 < jaya> The thing is before i used to listen for event on connection for 8080 ... Now i'm sending the request from Node ...ningu
10:23 < jaya> Getting more confused
10:23 < ningu> jaya: you have to connect on the same port you're listening on
10:23 < ningu> if your friend is waiting for you at one address you can't go to another and expect him to be there :P
10:59 < nirrrrrr> Hi. I am part of a group that is writing an app that connects to a node.js server. The app disconnects after 30 seconds of no socket use. is there a node.js 30sec timeout or is it a client issue?
11:01 < ssafejava> nirrrrrr: Nothing like that is built in, what do you mean by 'disconnects'? Are you using long polling or websockets?
11:01 < nirrrrrr> websockets
11:01 < ssafejava> socket.io?
11:02 < nirrrrrr> no. native sockets
11:02 < nirrrrrr> in the log i see "Peer undefined disconnected."
11:03 < ssafejava> nirrrrrr: Hmm, I don't know that much about using native sockets, there are a few great wrappers that make it much easier. I would recommend SockJS (https://github.com/sockjs/sockjs-node) if socket.io is too heavyweight for you
11:03 < nirrrrrr> i see\
11:03 < nirrrrrr> thanks :)
11:04 < ssafejava> np. SockJS is my go-to, does great on older browsers and works through Node's `cluster` modules, unlike socket.io
11:04 < ssafejava> but it's a little less 'batteries included', e.g. you have to define what happens on disconnect, etc
11:05 < nirrrrrr> with browsers socket.io is great (fallbacks and all) but i dont think its good fro writing sockets that are not in browsers
11:05 < ssafejava> yeah. I ran into all kinds of bugs with it, it's not being maintained until engine.io is ready
11:07 < nirrrrrr> i think that https://github.com/LearnBoost/engine.io is for browsers as it has a js file you need to load
11:08 < ssafejava> well yeah, on the client. but the server-side can create a websocket-only server
11:09 < jhsto> Does anyone happen to know is it possible to have HTML5 audio tag to stream a file endlessly?
11:10 < jhsto> I'am writing to the file the whole time, but HTML5 audio element doesnt play more than the duration the file was on the page load.
11:11 < ssafejava> hmm. can you make the file's length metadata be infinite (or very long) when you send it?
11:13 < jhsto> ssafejava, I believe so
11:13 < jhsto> currently it is just loaded straight with src attribute
11:13 < kristian-puccio> heya everyone, I'm trying to add some benchmarking to connect/express middleware. Was thinking of adding an event listener or overloading next (though I think that may just point to the next function in the chain). Any clues or idea where to look?
11:13 < jhsto> im however able to create a writable stream on server side and send the binary data trough websocket to the client, where it can be played
11:14 < ssafejava> kristian-puccio: What are you trying to measure?
11:14 < kristian-puccio> basically how much time is spent in each function
11:14 < kristian-puccio> So I know which function is making a page slow
11:15 < ssafejava> kristian-puccio: Trace.gl will tell you that (and it's a damned cool tool, too)
11:15 < kristian-puccio> I'd love to get the output to graph somehow
11:15 < kristian-puccio> ahh cool I'll do a google. Cheers for that
11:15 < jhsto> there's http://nodejs.org/api/stdio.html#stdio_console_time_label
11:15 < ssafejava> but if you want to roll your own, you could stick middleware into the chain at various points... would give you some coarse-grained stats at least
11:17 < ssafejava> e.g. put a few functions in as app.use statements
11:18 < kristian-puccio> hrm could do that but I don't want to have to add it to each place, rather have it happen automagically. We currently log the function name at the start of each function (we mannually add a log statement) so I'd love to be able to get that for free
11:18 < kristian-puccio> So we also use it for debugging
11:18 < kristian-puccio> when a request comes in it gets a uuid and we can track how far it gets in the chain before it dies
11:19 < kristian-puccio> so the log outputs the uuid and the function name
11:19 < kristian-puccio> the uuid is free but we have to add a log function to the start of each function
11:20 < kristian-puccio> So a typical route handler would look like this:
11:20 < kristian-puccio> server.get('/',
11:20 < kristian-puccio>         db.connectPg,
11:20 < kristian-puccio>         dashboard.fetchData,
11:20 < kristian-puccio>         dashboard.showHomePage
11:20 < kristian-puccio>     );
11:21 < kristian-puccio> then we manually add req.log("fetchData: entry");
11:21 < kristian-puccio> to the start of a funciton
11:22 < kristian-puccio> I'd love to create an npm module for this, I reckon it'd be pretty handy
11:23 <@isaacbw> it's usually best to put multiline pastes on a paste site
11:23 < kristian-puccio> ah sorry about that, I'm a totaly noob on irc
11:24 < kristian-puccio> ah sorry about that, I'm a total noob on irc
11:24 <@isaacbw> lol
11:24 < kristian-puccio> as you can see :)
11:25 <@isaacbw> five lines is probably alright
11:26 <@isaacbw> it's easy enough to publish an npm module
11:26 <@isaacbw> just do it!
11:26 < kristian-puccio> yeah just got to work out the code first :)
11:27 < ssafejava> kristian-puccio: You may be able to use a code coverage tool like JSCover (https://github.com/tntim96/JSCover) or Blanket (https://github.com/alex-seville/blanket) to get you most of the way there
11:28 < ssafejava> kristian-puccio: Re: your server.get() statement, you could easily make that work for each route by adding it as middleware just before your `app.use(app.router)` statement
11:28 < kristian-puccio> awesome thanks for that, I'll check those out
11:29 < kristian-puccio> So my understanding is you can get code to run at the start of a middleware chain but not between each function. I'm trying to find out how the events work in connect
11:30 < kristian-puccio> so I'm probaly (hopefully) wrong
11:30 < ssafejava> kristian-puccio: Between every function would basically involve you creating an array of all your middleware, looping through, and inserting at each point
11:30 < kristian-puccio> hrm thats an interesting idea
11:31 < foobar12345> is there any benchmark of socket performance for C vs node?
11:31 < ssafejava> kristian-puccio: Re: my earlier comment about using the logging as middleware, you won't be able to get the function name that way (unfortunately, `next.name` will return 'next'), but you could log the route, params, etc. so you can figure it out pretty easily by looking at the logs
11:33 < kristian-puccio> yep, so maybe I can change the list of functions to be an array that is passed to a function, that either just passed back the array of functions or inserts a logging function between each one.
11:33 < ssafejava> yep. and if you want it really fine-grained, hook it into a code coverage tool, it'll give you all kinds of great data
11:34 < ssafejava> obv. expect a decent slowdown caused by the instrumentation but it'll give you an idea of where the significant timesucks are
11:34 < kristian-puccio> yep awesome, I'll download some of those now and give them a spin
11:34 < kristian-puccio> Yeah dev server only
11:35 <@isaacbw> who needs testing
11:35 < ssafejava> lol yeah of course. code coverage on prod... maybe if you piss money & servers
11:35 <@isaacbw> just write flawless code
11:35 <@isaacbw> duh
11:36 < kristian-puccio> AWS cheep as chips :) 
11:36 < ssafejava> kristian-puccio: not really, actually
11:36 < ssafejava> hah it adds up. try digitalocean if you want cheep cheep cheep
11:36 < kristian-puccio> that was sarcasm
11:36 < ssafejava> ah. text chat. you know. 
11:36 < kristian-puccio> we are in Australia so not much choice with low ping times
11:37 < ssafejava> yeah, not if you plan to service australian customers
11:37 < ssafejava> anyway I have to run. Good luck with your project
11:37 < kristian-puccio> yeah we did use rackspace in the US but once AWS come to Sydney it was a no brainer
11:38 < kristian-puccio> Ok cool, thanks heaps for your pointers
11:43 < foobar12345> ssafejava: thanks for the tip w/ digitalocean
11:45 < RLa> everyone switching to digitalocean?
11:47 <@isaacbw> only the turds
11:52 <@isaacbw> I would feel uncomfortable putting too much faith in a venture capital funded hosting company
11:57 < RLa> isaacbw, when they run out of many they will just pull plug?
11:57 < RLa> lol, i had some low budget provider doing that
11:57 < RLa> disappeared completely with my data
12:28 < aeosynth> i want to emulate broken proxies, how do i send a 403 status on 'upgrade' event? i can't do `response.end(403)` because i don't have the response object
12:58 < foobar12345> RLa: no, only thought about using it for development/testing
12:59 < Fredje> Anyone has a problem with a https request and a possible memory leak ?
13:05 < Raydiation> hi im looking for a file watcher that runs a command
13:05 < Raydiation> im usually using grunt for running phpunit tests on save but i need something smaller and only for 2 files atm
13:05 < RLa> already searched npm registry?
13:06 < Raydiation> https://npmjs.org/package/watch-file
13:07 < Raydiation> thanks
13:24 < softwarefreak_> hello
13:24 < softwarefreak_> I need a small help
13:25 < bnoordhuis> softwarefreak_: this is irc, just ask what you want to know
13:25 < bnoordhuis> if people know, they'll reply
13:25 < softwarefreak_> ok, got it
13:25 < squeeks> if they don't know, they'll reply like they do
13:34 < jas-> squeeks: I have a guy like that in the office when working with C and C++, he would sit down and write a few lines without really looking at the existing solution and it always ended up borking things
13:34 < jas-> squeeks: CS major lol
13:37 < jas-> No offense to other CS majors
13:40 < pellis> hello
13:40 < pellis> is the a background worker framework for node that can take rabbitmq/redis as the queue backend? does it even make sense to do the workers in nodejs (since they're not evented)
13:42 < aeosynth> how do i respond to 'upgrade' requests w/ a 403 error?
13:45 <@MI6> joyent/libuv: Andrei Sedoi master * 3d251ad : linux: add support for MIPS - http://git.io/Ways2g
13:47 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:49 <@MI6> joyent/libuv: Ben Noordhuis master * 7e8d0e6 : Merge remote-tracking branch 'origin/v0.10' - http://git.io/-XaPvA
13:49 < brianc> I've been using this module heavily the past few months.  I'd appreciate feedback if anyone's interested: https://github.com/brianc/node-okay
13:49 <@MI6> joyent/libuv: Andrei Sedoi v0.10 * 5096f1e : linux: add support for MIPS - http://git.io/TtHycw
14:12 < h22> guys, Across the web for atleast two years now I've heard people saying "Node.js, Because I can share code b/w server and client-side".. But I still haven't figured out how..
14:13 <@MI6> joyent/node: Andrei Sedoi v0.10 * acbdabb : configure: fix cross-compilation host_arch_cc() - http://git.io/K-N7kw
14:13 < h22> If I have a lib on the server side, How do I send it to the client? 
14:13 <@isaacbw> RLa: pull the plug or stop being so cheap. Maybe they'll be able to keep it up, but I think it's unlikely
14:13 <@isaacbw> at least it's enough to make me nervous
14:14 < squeeks> isaacbw: is anyone else, to your knowledge bothering with refuctoring npm's lib/cache.js?
14:14 < Trangar> The thing I don't like about NodeJS is that I never know something to make with it :(
14:14 < RLa> yes, vps market is very tough
14:14 <@isaacbw> squeeks: I think you're looking for isaacs
14:14 < squeeks> bah.
14:14 < squeeks> isaacs: ^
14:14 < RLa> and everyone wants to get clients by lowering prices
14:15 <@isaacbw> what they should be doing is offering easy addon services like aws does
14:15 <@isaacbw> e.g. one-click database replication
14:16 <@isaacbw> if you're just giving me server time, I might as well get a rack in a colocation datacenter
14:19 <@isaacbw> but I'm a crazy person, so hey
14:19 <@isaacbw> completely bonkers
14:21 <@isaacbw> someone should start a mailing list for finding people to share colocation racks with
14:22 <@isaacbw> or just move to austin man
14:22 <@isaacbw> MOVE TO AUSTIN MAN
14:23 <@isaacbw> and run a server from your closet
14:24 <@isaacbw> VPSs ARE A SCAM, MAN
14:25 <@isaacbw> MAAAAAN
14:25 < squeeks> cloud is a scam.
14:25 < squeeks> clowd.
14:26 <@isaacbw> squeeks: btw the best way to start a conversation about node development is usually in the issue tracker
14:28 < squeeks> isaacbw: heads up, I've been there, I'm here because it's a bit quiet on the topic at hand.
14:33 < gabrielstuff> Hi all
14:34 < gabrielstuff> I'm getting tired with the procedure checking to see if a property of an object exist. I'd like to know how do you guys, deal with object that do not have properties
14:35 < gabrielstuff> AND you check against this property ?
14:35 < bradleymeck> anyone know of a JSON parser that does schema, transforms, and marshaling all in one pass (would probably be saxlike under the hood)
14:35 < sxpert2> if (!(object.property)) ...
14:35 < gabrielstuff> I want to avoid that ...
14:35 <@isaacbw> you must be doing some crazy anti-pattern stuff for that to even be an issue
14:35 < gabrielstuff> I'd like a way to have object.property.proterty2
14:35 < bradleymeck> explain more, there is something we arent getting, cause to check if a property exists, thats pretty much the littlest code
14:36 < gabrielstuff> not to fail if object.property does not exist
14:36  * bradleymeck digs up
14:36 <@isaacbw> you could use exceptions, but dont
14:36 <@isaacbw> *don't
14:36 < chiel> there isn't a way to do that, afaik
14:36 <@isaacbw> or else initialize your objects with dummy default properties
14:36 < chiel> it'll whine about property being undefined
14:36 < aMoniker> How can I get the current stack size in node?
14:37 <@isaacbw> you could write a custom module with accessors
14:37 <@isaacbw> wait no, you can't
14:37 < bradleymeck> gabrielstuff: https://github.com/mmalecki/node-rget
14:37 < bradleymeck> should be fine, but can get conflicts if you care about things being set to null
14:38 < gabrielstuff> what is accessors ?
14:38 < gabrielstuff> i like the idea of custom module
14:38 < gabrielstuff> not a big fan of null
14:38 < sxpert2> how do I get the scripted editor to not complain about console not being defined when it obviously is (and also require() )
14:38 < gabrielstuff> I use undefined (do not know if I should :) )
14:39 < gabrielstuff> hum rget is not pretty
14:39 < gabrielstuff> nothing to rewrite the "." 
14:39 < gabrielstuff> or write a "->"
14:39 < gabrielstuff> or… anything.. I feel I'll end up
14:39 < gabrielstuff> continuing to check
14:39 < gabrielstuff> whether it exist or not ...
14:40 < bradleymeck> gabrielstuff: ummm it supports custom separators?
14:41 < gabrielstuff> yup but it is a function
14:42 <@isaacbw> gabrielstuff: what you're asking for is a redefinition of the javascript spec
14:42 < gabrielstuff> can we rewrite operator in js ? or acecessor
14:42 < gabrielstuff> hehe :)
14:42 < bradleymeck> no
14:42 <@isaacbw> you can keep things clean by defining dummy properties
14:43 <@isaacbw> which I do a lot
14:43 < gabrielstuff> hum… ok
14:43 <@isaacbw> depending on the situation
14:43 <@isaacbw> I do a lot of stupid stuff though
14:43 <@isaacbw> but I always make sure to insult myself in the comments so it's okay
14:43 < gabrielstuff> ahha
14:44 < gabrielstuff> well, what are the common practive
14:44 < gabrielstuff> I'll do that also
14:44 < gabrielstuff> but I do not feel right to do so
14:44 <@isaacbw> there is no common practice
14:44 < squeeks> gabrielstuff: leave //FIXME I am a bad programmer :[ everywhere
14:44 <@isaacbw> this is javascript baby
14:44 <@isaacbw> do whatever you want
14:44 < gabrielstuff> yup
14:44 <@isaacbw> do something different in every function
14:44 < gabrielstuff> I guess so
14:45 < gabrielstuff> ahah :)
14:45 < squeeks> https://github.com/squeeks/glossy/blob/master/lib/glossy/parse.js#L382 example
14:45 < gabrielstuff> nice idea
14:45 <@isaacbw> keep it fresh
14:45 <@isaacbw> keep it hip
14:45 < squeeks> goddamnit I just found more bugs in that code :{
14:47 < gabrielstuff> funny :)
14:47 <@isaacbw> bugs keep the world spinning
14:48 < gildean> bugs keep the beachballs spinning
14:48 < Gabriel403> Keeps developers employed :)
14:48 < gabrielstuff> shah, well I'll do my best
14:48 < gabrielstuff> thanks !
14:48 <@isaacbw> do your worst
14:51 <@isaacbw> you're no match for me
14:57 < gabrielstuff> trust me no comment for me, no trolling either. thanks for your help isaacbw
15:15 < CampinCarl> Good morning everyone!I'm currently experimenting with a setup that uses node CGI to call git-http-backend with a request and a response stream as params. However I'm running into some issues that are unfortunately not being captured in any of my logs. As a result I've been looking to improve my logging related to using git-http-backend by capturing it's responses.  Does anyone know how I might spy on the response within git-http
15:20 < sambarino> sigh
15:20 < CampinCarl> Sigh just about sums it up.
15:21 < bradleymeck> it all depends on w/ module propagating events, which most dont
15:21 < sambarino> lol, i'm sighing because i can't find any simple nodejs wiki modules
15:21 < CampinCarl> ah
15:21 < sambarino> the most promising one's repo is disabled so i can't fork it
15:22 < CampinCarl> @bradleymeck so you think the best option is probably just to throw logging into the CGI module myself?
15:22 < bradleymeck> yup :/
15:22 < CampinCarl> That was my initial reaction that I've been hoping to avoid lol
15:23 < sambarino> oh wait, i just forked it :D
15:23 < CampinCarl> ha
15:25 < Exx2xxO> hey guys ! I've got a question: Is there anyway to trigger a client side event from node? Like triggering a GET-Event? So at the moment I'm developing a cloud-service and I want to kick all users from a folder which has been deleted. So can I trigger a "refresh site" event? Oh god I don't know how to explain this well :/
15:25 < squeeks> have all users subscribed to a channel, and then react when you send something down the pipe?
15:26 < CampinCarl> yeah having them react to something you'e sent them sounds easier =P
15:26 < squeeks> go read up on socket.io and how it does this, after a bit of reading you'll find this is a solved problem with a not-completely-bonkers solution.
15:31 < Exx2xxO> And how can I send something to the clients (note: I'm not using Sockets) without getting an Get/Post Event ? 
15:37 < spion> Exx2xxO, you can't do it without websockets or at least long polling
15:38 < spion> but do use socket.io (or better, sockjs) to abstract the method to a single cross-browser API.
15:46 < Exx2xxO> the problem is: The project is almost finished and if I'm about to use sockets in this stadium I'll have to rewrite the complete project...so better wait for some GET/POST -requests by the user and redirect them after that. Thanks anyway ! 
15:50 <@MI6> joyent/node: Andrei Sedoi v0.10 * cc51749 : v8: fix build for mips32r2 architecture - http://git.io/kmK0_Q
16:04 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:27 < Trangar> I finally have internet again after 2 days
16:27 < Trangar> npm install -all
16:29 < bnoordhuis> Trangar: npm install hoarders
16:33 < overra> bnoordhuis: lol
16:34 < Trangar> I am going to make that package now
16:34 < Trangar> ANd let it be dependant on every other package in npm
16:36 < poincare101> hi guys - is it safe for me to use CouchDB's generated UUIDs as part of my URL?
16:44 < olalonde> poincare101: I think so
17:02 < googgah> clear
17:04 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:15 < RLa> hm, AppFog aquired by CenturyLink
17:17 < RLa> seems to matter mostly to private cloud business
17:26 < qard> Is there a terminal reporter for jscoverage testing with mocha? I'm using htmlcov currently. It'd be nice to have something that can just list the files and coverage percentages in the terminal.
17:27 <@MI6> joyent/node: isaacs v0.10 * 5613803 : blog: Add favicon to blog site (+1 more commits) - http://git.io/ZIygHQ
17:29 < bradleymeck> writing a good object walker for validation on union types is difficult
17:31 < jasonkuhrt> what is the general way of getting the ip address of the local machine in node.js?
17:35 < bradleymeck> jasonkuhrt: require('os').networkInterfaces
17:37 < jasonkuhrt> bradleymeck: thanks, I see
17:40 < gmaggess> Hi folks, I'm trying to run replicate against my private repository and I'm facing a "Assertion failed: !current_buffer, file src\node_http_parser.cc, line 459"
17:40 < gmaggess> any clue?
17:45 < olalonde> no idea :(
17:45 < olalonde> you are using npm-www?
17:45 < werle> anyone looking for a laugh - https://github.com/jwerle/alphahax
17:47 < olalonde> werle: thanks, might use it for my next backdoor
17:47 < olalonde> lol
17:47 < krnflake> http://nodejs.org/ down? :(
17:47 < werle> lulz
17:48 < krnflake> back up :)
17:49 < olalonde> https://github.com/olalonde/expressionist - fresh release
17:51 < werle> olalonde:  nice!
17:51 < werle> olalonde: connectr is $ too man
17:51 < olalonde> werle: thanks! :) always nice to hear
17:51 < werle> olalonde: cheers to that
17:52 < olalonde> werle: loving your readme here https://github.com/jwerle/pineapple
17:52 < olalonde> haha
17:53 < werle> olalonde: haha I may have gone over board with that one :)
18:04 < olalonde> anyone else finds github's  new search bar annoying?
18:05 < RLa> olalonde, i do
18:06 < olalonde> :thumbsup"
18:08 < poincare1011> I need a bit of help with cradle - I'm lost as to how I'm supposed to create a view (that's the map function, as far as I understand it) - do I *have* to create a design document? 
18:10 < werle> olalonde: RLa I really don't like it
18:11 < werle> I don't like when I accidentally hit the 's' key and it pops all the way to the top like that either
18:11 < olalonde> I always forget to select "search all github" instead of "search this repository"
18:13 < ningu> olalonde: it used to not even be possible to search a repository!
18:16 < olalonde> ningu: I know… but they could have done a better UI… like at least search github globally if there is no search results
18:16 < olalonde> ningu: would help me 80% of the time
18:18 < werle> olalonde: I always forget to use the search bar all together
18:18 < werle> olalonde: I always bust out "github <some repo> or <some user>" in google
18:44 < eere> hello , can someone provide me with an example of async.waterfall with mysql queries passing insert ids to next callback in waterfall, i cant figure it out.
18:46 < gildean> eere: the examples on asyncs readme aren't enough?
18:47 < eere> not for me no
18:47 < eere> :(
18:47 < RLa> eere, mysql puts some garbage argument after results in query callback
18:47 < RLa> maybe that screws up your code
18:48 < RLa> node-mysql
18:48 < eere> is the msql.query function suppose to be nexted inside another function with the callback ?
18:48 < RLa> by insert ids you mean?
18:50 < styol> Is it evil to return callbacks? IE: if (err) return callback(new Error('roger, we have uh oh'));
18:51 < eere> nested, like async.waterfall[function(callback) {mysql.query("query", function(err, rez) {id =  rez.insertId})}, function(callback) {mysql.query("query", function(err, rez) {id =  rez.insertId})}, function(err, res){...}}}]
18:52 < styol> eere: you need to call callback and pass the arguments which will then get passed to the next function
18:53 < styol> reserve the first argument for an error, if one is reached, it will bail out and reach the final callback instead of continuing to iterate over the provided functions
18:53 < werle> creationix: hey tim do you have benchmarks for msgpack-js-browser?
18:54 < styol> eere: for example -- [function(callback) {mysql.query("query", function(err, rez) { id =  rez.insertId; callback(null, id); })}
18:54 < creationix> werle, I don't think so
18:55 < styol> eere: you may just want to push those id's into an array and pass the array to the next function though
18:55 < werle> creationix: oh well thanks - I may put something together this weekend for it for you
18:55 < creationix> cool
18:57 < eere> http://jsfiddle.net/gVL9Q/
18:58 < eere> insert ignores, insert differnt table using first insert id
18:58 < eere> get two ids then update to tables
18:58 < eere> i can do in php
18:58 < eere> would it be quicker dong though php?
18:59 < eere> node php or exec or somerthing?
19:00 < styol> eere: noop
19:00 < styol> eere: this is what i was trying to explain http://jsfiddle.net/gVL9Q/1/
19:01 < volitek> Is there an easy way to replace all my console.logs with a function that writes to a file? something that can take arguments separated by commas?
19:01 < styol> eere: so perhaps in the 3rd function you want to perform some other task with those 2 id's previously retrieved and then pass the result to the final callback or something, not sure, but the general goal is you need to pass value(s) from one function to the next in the form of arguments to the `callback` variable
19:02 < styol> volitek: there are various logging frameworks, but just to let you know, you can already console.log(arg1, arg2, arg3);
19:03 < eere> can callback(null, ids); be inside the callback function for msq.query? because doing without call backs like id = mysql(query); sets stuff withouit insertId
19:03 < styol> volitek: also note that there is a special `arguments` variable for every function -- var errerr = function() { for (var i in arguments) { console.log(arguments[i]); } };
19:04 < styol> eere: yes, it can be anywhere, but preferably should be within your inner async function (such as the callback to a mysql query as that is when that task has been completed and you need to move onto the next via callback)
19:05 < volitek> styol: I know I can console.log(arg1, arg2), but I want to be able to file.write(arg1, arg2)
19:05 < volitek> so I can find and replace all my functions
19:05 < volitek> without having to go through and put in toString and concatenate them
19:09 < styol> volitek: hmm yeah i mean you could do something similar with a wrapper function, but there are logging frameworks that already do this indeed. winston is one, log4js is another, and I'm sure there are a bunch more
19:09 < styol> volitek: https://github.com/joyent/node/wiki/modules#wiki-logs
19:11 < joaojeronimo> Hi guys, I have 3 streams, each one starting after the previous one has ended, and I want to make a stream that starts with the beginning of the first, and ends with when the last stream ends, is there a particular module that does this ?
19:11 < joaojeronimo> I can pipe all of them but I don't want the ones that are not the last to emit the end..
19:12 < joaojeronimo> should I make all the middle ones through streams ?
19:12 < nathan7> isn't there .pipe(blah, { end: false })
19:13 < nathan7> ..yep
19:13 < nathan7> http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options
19:13 < joaojeronimo> oh cool nathan7 I didn't know about end:false :)
19:14 < eere> styol like this? http://jsfiddle.net/492uk/
19:15 < styol> eere: where is insertId coming from?
19:15 < eere> its in the rez, sorry http://jsfiddle.net/492uk/1/
19:16 < eere> q is set before the async
19:24 < styol> eere: http://jsfiddle.net/492uk/2/
19:25 < eere> thanks styol :D
19:26 < styol> no problem
19:26 < eere> :D
19:27 < styol> eere: also, just to note, you can optionally just use the callback instance for the callback of mysql.query -- http://jsfiddle.net/492uk/3/
19:36 < pachet> http://nodesensors.com/products/
19:41 < RLa> pachet, they all run nodejs? :)
19:53 < ikurei> hi. i need to ask a newbie question
19:54 < ikurei> i'm using http agent and jsdom to scrape a web, capturing the "next" event to iterate through several urls... pretty standard. but each time the callback is called, i don't know which of the urls it's called for
19:54 < ikurei> how can i get that?
19:54 < Industrial> Is there currently something I can debug nodejs programs with? There used to be something that would use the chrome debugger ..
19:57 < RLa> Industrial, node-inspector?
19:57 < nathan7> Industrial: node-inspector?
19:57 < RLa> yeah
19:58 < nathan7> damnit, RLa 
19:58 < nathan7> Pistols at sunset.
19:58 < _tinman_`> ikurei -- a simple way is to restructure your http agent calls so that on next you add the next url to be called, in this way you can keep track of which runs are currently in the queue: "Each time an instance of http-agent raises the 'next' event the agent is passed back as a parameter. That allows us to change the control flow of pages each time a page is visited. The agent is also passed back to other important events such as 'stop'
19:58 < _tinman_`> and 'back'.
19:58 < _tinman_`>  
19:58 < _tinman_`> "
20:00 < Somebody> How would someone write a node.js binding to objective-c ? I'm currently trying using .mm files and node-gyp but I think it's being compiled like C++...
20:00 < ikurei> _tinman_`: sounds good enough. i was expecting to be able just to get it from agent.url or something, but that will do it. thanks
20:01 < pachet> RLa heh no, just heard someone in the office talking about them
20:03 < RLa> they look interesting anyway
20:03 <@mbalho> Somebody: TooTallNate did that
20:03 < Somebody> Yep, with NodObjC you mean ?
20:03 < _tinman_`> patchet, RLa -- there are any number of interesting sensors for detecting a great many things, and most of them are not consumer level hardware like the ones you just posted.
20:04 < RLa> is there radiation sensor too?
20:04 < _tinman_`> lol.
20:05 < _tinman_`> I used to work for a company that connected sensor arrays to control systems and made flash animations showing which parts of the system were under load in real time.
20:05 < Somebody> mbalho: Are you aware of any way to use objective-c from node.js directly ?
20:06 < _tinman_`> Never messed with radiation sensors, but messed with a fish counter once.
20:07 < _tinman_`> But that brings up a question -- if one wanted to connect a sensor array to node directly, is it going to be a matter of talking to c or talking to nodejs?
20:07 <@mbalho> _tinman_`: look up node-serialport
20:09 < _tinman_`> mbalho -- thanks!
20:12 <@TooTallNate> Somebody: how doesn't NodObjC meet your needs?
20:13 < Somebody> I actually didn't tried it out yet, I was wondering how you got it to work ^^
20:15 < nathan7> mbalho: Something which has been nagging me for a while - why the different IRC nick?
20:15 < gildean> _tinman_`: depends on the sensors, for example using single wire digital temperature-sensors on linux is usually just a matter of reading some file
20:16 < _tinman_`> gildean, yeah. I was thinking more of doing a luver control to get better heating and cooling in my house.
20:16 < gildean> _tinman_`: i made this raspi thermometer with node a few weeks back: http://gildean.github.io/Raspberry-Pi-thermometer-with-node.js/
20:21 <@TooTallNate> Somebody: it basically just directly accesses the Obj-C Runtime APIs using node-ffi
20:21 <@TooTallNate> Somebody: and creates a nice API to work with using the BridgeSupport files
20:26 < Somebody> TooTallNate: Thanks for that information, I still got a lot of learning to do :)
20:26 <@TooTallNate> Somebody: what are you trying to do
20:26 <@TooTallNate> ?
20:27 < rfish> hey, node.js noob here
20:29 < rfish> I connect to my node web page and I ge the following error Error: You must pass a string or Handlebars AST to Handlebars.compile. You passed"
20:29 < rfish> any idea what can be causing that?
20:30 < robertkowalski> hola
20:30 < robertkowalski> anyone going to nodeconf.eu?
20:30 < Guest76451> is anyone using express and angularjs? can i see how you catch all unknown routes and make sure angular picks them up?
20:31 < Somebody> TooTallNate: Originally I wanted to make status bar icons from javascript, I got stuck at the binding part, but I'm probably going to leave it here as everybody could just use NodObjC
20:32 <@TooTallNate> Somebody: ya, i had started out trying to manually bind to the iTunes.h file, but realizing the impossibility of that, I decided to write NobObjC instead
20:32 < Somebody> TooTallnate: Must have been a hell lot of work to figure out everything as there isn't a lot of documentation on it
20:33 <@TooTallNate> it was tough + fun
20:33 <@TooTallNate> the guy who wrote JSCocoa actually helped me out a bunch
20:34 < rfish> I connect to my node web page and I ge the following error Error: You must pass a string or Handlebars AST to Handlebars.compile. You passed"
20:34 < robertkowalski> Guest76451: place this on top of your routes to catch everything: app.all('/*', function(req, res, next) { console.log('i am catching every route'); })
20:34 < rfish> any idea what is causing that?
20:35 < robertkowalski> rfish: handlebars is a template engine, so maybe something around the usage of it.
20:36 < hroark> anyone know any smaller, active node IRC channels?
20:36 < Guest76451> robertkowalski: it should be on top? shouldnt it be the last one
20:38 < robertkowalski> Guest76451: depends how you are using it
20:38 < Guest76451> the slash is important as well?
20:38 < Guest76451> or would '*' work
20:38 < mscdex> hroark: #node.js
20:39 < Guest76451> doesnt seem to work and i cant see why
20:39 < mscdex> hroark: how much more active does it need to be? :-)
20:39 < robertkowalski> Guest76451: I use it for a csrf token middleware while using express-resource
20:40 < robertkowalski> so I have placed it on the top.
20:40 < robertkowalski> wouldn't do this again, btw ...
20:41 < Guest76451> robertkowalski: express-resource looks nice, thanks
20:41 < Guest76451> was wondering how to manage my routes in an organised way
20:42 < jasonkuhrt> Does anyone have any favourite node resources on building realtime servers (with net, but http would be okay too)
20:43 < hroark> mscdex: slightly less active! quality > quantity.
20:43 < hroark> mscdex: not saying this isn't quality
20:43 < hroark> i just mean... more relaxed
20:43 < overra> +1 thanks for express-resource
20:43 < mscdex> hroark: the only other channels are module-specific ones, like for express, socket.io, etc
20:44 < hroark> okay, cool. thanks
20:44 < hroark> express sounds good.
20:44 < hroark> is there anything along the lines of #node-meta
20:44 < mscdex> not really
20:45 < hroark> ah well
20:45 < mscdex> there's a mailing list
20:45 < mscdex> and blog
20:46 < thewinelake> test
20:46 < hroark> i'm trying to find it in the MOTD but all i can see is an angry horse
20:47 < thewinelake> Ah, I'm in!  Hello... Can anyone here assist with some getting started with node.js remote debugging?
20:47 < hroark> you mean the google groups one
20:47 < hroark> ?
20:48 < thewinelake> I've got WebStorm and am slightly confused that the --debug option is only connectable locally, so how do I connect to the node debugger from a remote machine?
20:51 <@isaacbw> has anyone ever told you how beautiful you are
20:51 < cTIDE> yes, ty
20:51  * nathan7 sniffles
20:51 < nathan7> n.. no
20:52 <@isaacbw> well you are
20:53 < hroark> has anyone else had to update their twitter shit since 2 days ago
20:53 < hroark> oauth
21:07 < gishmel> I am making a game in which there is a lot of data both pulled from the server and then updated is there any performance gains to be had by using mongodb or creating my own protocol in order to handle json storage and communication
21:21 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:23 < jasonkuhrt> I am running a unit test where I want to create 1000 net connections
21:23 < jasonkuhrt> but after 255th I am getting a node js error ECONNRESET
21:24 < jasonkuhrt> is there an obvious mistake I am making or not?
21:27 < robertkowalski> jasonkuhrt: you are using OSX, aren't you?
21:27 < jasonkuhrt> yes
21:28 < robertkowalski> jasonkuhrt: you can raise the levels of osx by using ulimit -n 1024 for example
21:29 < jasonkuhrt> ϟ ulimit                                                                              master [1d8c273] modified
21:29 < jasonkuhrt> unlimited
21:29 < jasonkuhrt> ?
21:29 < jasonkuhrt> I am already at "unlimited"
21:29 < paulkon> what limits node after 1024 connections? cpu or mem?
21:29 < paulkon> limits first*
21:30 < robertkowalski> jasonkuhrt: ulimit -a
21:30 < paulkon> I've been looking for a guide or article which talks about things to check before production, etc. Just can't find anything that talks about that directly
21:30 < jasonkuhrt> ϟ ulimit -a                                                                           master [1d8c273] modified
21:30 < jasonkuhrt> -t: cpu time (seconds)         unlimited
21:30 < jasonkuhrt> -f: file size (blocks)         unlimited
21:30 < jasonkuhrt> -d: data seg size (kbytes)     unlimited
21:30 < jasonkuhrt> -s: stack size (kbytes)        8192
21:30 < jasonkuhrt> -c: core file size (blocks)    0
21:30 < jasonkuhrt> -v: address space (kb)         unlimited
21:30 < jasonkuhrt> -l: locked-in-memory size (kb) unlimited
21:30 < jasonkuhrt> -u: processes                  709
21:30 < jasonkuhrt> -n: file descriptors           2560
21:30 < paulkon> limit's the sky ^
21:31 < jasonkuhrt> how does 2560 file descriptors relate to 255 net connections?
21:31 < jasonkuhrt> or is it stack size that is in question?
21:31 < robertkowalski> there is a max open file limit
21:31 < paulkon> have you looked at v8's stack options?
21:32 < robertkowalski> but i don't see that in you ulimit -a output - strange.
21:32 < paulkon> that's usually what I hear about first when hitting a limit
21:32 < robertkowalski> ah.
21:32 < robertkowalski> spotted it
21:33 < robertkowalski> "file descriptors". mh.
21:37 < Zaxnyd> any reccomendations on caching methods?
21:37 < nathan7> recommendations involve context
21:38 < Zaxnyd> well, I don't have any.  I'm thinking it'd be wise to have some.
21:38 < Zaxnyd> but I'm not sure where to start.
21:39 < robertkowalski> paulkon: something in the direction of quality assurance or what do you mean?
21:39 < olalonde> Zaxnyd: caching what?
21:40 < nathan7> Zaxnyd: what are you caching, what are the problem you are seeking to solve?
21:40 < Zaxnyd> overall scaling performance
21:40 <@mbalho> you should definite implement premature optimiaztion caching, its the best kind
21:40 < olalonde> that's a pretty big topic that isn't quite Node specific
21:40 < Zaxnyd> I'm just in the beginning stages of research
21:41 < olalonde> for a web app Zaxnyd?
21:41 < Zaxnyd> yes
21:41 < olalonde> one thing that is wise is to move all your static files to S3 or a CDN
21:41 < Zaxnyd> awesome.  I'll look into that.
21:42 < Zaxnyd> how about database caching?  I'm doing some transformations on the data once I get it back from the database
21:42 < Zaxnyd> seems like that could easily be cached
21:42 < olalonde> that's more tricky
21:43 < Zaxnyd> I'm imagining so.
21:43 < olalonde> Zaxnyd: have a look at http://guides.rubyonrails.org/caching_with_rails.html . it's not Node.js specific but a lot of the advice translates to Node.js
21:43 < Zaxnyd> fantastic.  thank you.
21:44 < paulkon> mbalho: do you recommend any article or book that talks about how to scale when the time comes?
21:45 < nathan7> Zaxnyd: when you say caching, the first thing that goes into my brain is memoisation
21:45 < paulkon> it's just me and a buddy of mine launching this web app and we are kind of clueless about scaling in the real world....
21:45 < Zaxnyd> that's kinda what I'm thinking too, nathan7
21:46 < Zaxnyd> key value stores based on the function inputs
21:46 < Zaxnyd> for some set duration
21:46 < Zaxnyd> but I'm wondering whether memory/disk is better.  I see a lot of examples using reddis.
21:46 < nathan7> durations are useless
21:46 < olalonde> basically if you want rails style caching you need to invalidate affected caches manually when you modify your databases. it's tricky
21:46 < nathan7> what you care about is amount of memory
21:46 < nathan7> scaling is hard, and not a general problem
21:47 < nathan7> scaling is performance tuning, the bottlenecks are rarely the ones you expect
21:47 < nathan7> and the only way to find out what they are is to try
21:47 < Zaxnyd> so should I even be worrying about caching at this early stage?
21:47 < Zaxnyd> or is it something that I should just attempt to tack on later?
21:48 < nathan7> Is caching part of your goal?
21:48 < Zaxnyd> seems like it'd be easier to implement with a bit of foresight
21:48 < olalonde> > so should I even be worrying about caching at this early stage? Resounding NO NO NO
21:48 < olalonde> you should be worrying about getting customers at this stage
21:49 < olalonde> haha :)
21:49 < nathan7> MVP first, yeah
21:49 < paulkon> with mongodb caching is pretty much automatic right?
21:49 < Zaxnyd> lol
21:49 < nathan7> a small piece of advice
21:49 < nathan7> your code is wrong the first time.
21:49 < paulkon> or do I have to manually cache in redis/memcache or something
21:49 < nathan7> paulkon: Yes.
21:49 < Zaxnyd> I've worked on some legacy applications that wanted to add caching but it was such a clusterfuck of code it was practically impossible, and therefore never done.
21:49 < nathan7> Zaxnyd: There are many more things that are not your primary concern
21:49 < olalonde> so, dont write a clusterfuck and youll be fine :)
21:50 < Zaxnyd> lol
21:50 < Zaxnyd> I don't plan to :)
21:50 < nathan7> Zaxnyd: Your code is wrong the first time.
21:50 < olalonde> go through iterations
21:50 < nathan7> Zaxnyd: Write it again. Code is cheap.
21:50 < paulkon> node scales with cluster (is it still experimental?) and then inter-server RPC via ZMQ.
21:50 < paulkon> right?
21:50 < olalonde> just dont let the clusterfuck accumulate
21:50 < Zaxnyd> indeed.
21:50 < olalonde> paulkon: just use w/e Heroku uses to balance my traffic on different servers
21:51 < olalonde> I think cluster is to scale on multiple cores on the same machine
21:51 < nathan7> Yes.
21:51 < paulkon> so I just setup my logs to be monitored and keep checking, looking at the trends and scale out accordingly...?
21:51 < paulkon> should I start with cluster though?
21:51 < olalonde> no
21:51 < paulkon> make node run a thread on each core?
21:51 < paulkon> no, ok
21:52 < olalonde> just use heroku or w/e. cluster is only needed if you have a powerful dedicated server with multiple cores for example
21:52 < paulkon> yeah I'm just using the smallest linode atm
21:52 < paulkon> no idea where that will get me
21:52 < olalonde> the golden rule is you just need to make sure that all your application state is stored in the database not in local memory. than scaling is relatively easy
21:52 < paulkon> yeah
21:53 < olalonde> linode is cool too
21:53 < olalonde> I've used dotcloud, heroku, EC2 and linode for Node.js
21:53 < olalonde> favorite so far is heroku.
21:53 < paulkon> what have you settled on using for node apps?
21:53 < paulkon> ah
21:53 < paulkon> why's that?
21:53 < nathan7> olalonde: Tried Nodejitsu? (;
21:53 < paulkon> automatic scaling?
21:54 < olalonde> nathan7: not yet :(
21:54 < olalonde> yes, its fun cause you dont need to do any sysadmin tasks like installing a database, etc.
21:54 < paulkon> yeah
21:55 < paulkon> I just have this recurring nightmare that I'm going to be hit with some message from unix: "Out of memory!" and then mongo stops responding and all the data goes kaput
21:56 < paulkon> which is why I'm going to put a backup slave on a separate machine
21:56 < paulkon> ease my pain a bit
21:57 < paulkon> do you recommend any article or book on the topic?
21:57 < olalonde> paulkon: lol
21:57 < paulkon> that's honestly my biggest fear
21:57 < nathan7> paulkon: Use a PaaS, build your app, worry about scaling later, seriously
21:58 < olalonde> I second nathan7 
21:58 < olalonde> I used to think PaaS was for newbs until I tried one. now I'm a converted
21:58 < paulkon> what's the con to using a PaaS?
21:59 < olalonde> more expensive, less flexible
21:59 < olalonde> well less flexible is more like a pro
21:59 < olalonde> haha
21:59 < nathan7> paulkon: Pay a few bucks more, have an actual ops team working to keep shit running
21:59 < olalonde> less ways to shoot yourself in the foot
21:59 < paulkon> yeah that sounds like the better idea
21:59 < olalonde> nathan7: you work at nodejitsu?
22:00 < nathan7> olalonde: Yep
22:00 < olalonde> cool :)
22:00 < nathan7> I still have no idea how that happened, though q=
22:00 < olalonde> might want to disclose that
22:00 < olalonde> haha :)
22:00 < nathan7> "I accidentally a job!"
22:01 < olalonde> I almost took a job at nodejitsu a while ago. had an interview with marak and indexzero
22:01 < nathan7> I was an enthusiastic user and got hired due to that, basically
22:01 < olalonde> cool :)
22:02 < olalonde> nathan7: how does nodejitsu differentiate from heroku and co.?
22:02 < nathan7> I enjoy nice dev tools, distributed infrastructure is fun
22:02 < nathan7> olalonde: We're a node shop
22:03 < olalonde> right, that's a big +
22:03 < nathan7> olalonde: Heroku's support is terrible as far as I've dealt with that
22:03 < olalonde> I'll give a shot to nodejitsu next time
22:03 < olalonde> is there a free tier?
22:03 < nathan7> olalonde: We have IRC support, with fixed times with certain availability
22:04 < nathan7> olalonde: and outside the fixed times we're also around a lot of the time
22:04 < nathan7> olalonde: (we have priority support for business customers)
22:04 < olalonde> cool
22:04 < nathan7> olalonde: there's a 30 day free trial, we host one F/OSS app per user for free
22:04 < bingomanatee> hi there
22:04 < olalonde> I have yet to see someone answer my questions on #heroku haha
22:04 < olalonde> ok  good
22:04 < nathan7> olalonde: but limited free plans are a terrible idea pretty much
22:04 < bingomanatee> has anyone used NPM to organize their client side projects, run tests, etc?
22:05 < Zaxnyd> bingomanatee, nobody's ever done that.
22:05 < Zaxnyd> jk =P
22:05 < olalonde> bingomanatee: not really. why not use a client side package manager? (bower, component, etc.)
22:05 < bingomanatee> not helping
22:06 < bingomanatee> well because you can use tactical nested version updates, test designations, and closure;
22:06 < olalonde> I actually just opened an issue on npm to allow packages to mark themselves as "browser safe"
22:06 < bingomanatee> all the same reasons it works well for node. 
22:07 < nathan7> oh god
22:07 < nathan7> I have 690 unread github notifications
22:07 < olalonde> bingomanatee: I think bower/component handle that as well
22:07 < nathan7> (224 of which are npm)
22:07 < nathan7> olalonde: No.
22:07 < olalonde> lol nathan7 
22:07 < olalonde> haha
22:07 < nathan7> olalonde: component does not do nested deps
22:07 < nathan7> olalonde: it doesn't version deps at all in fact
22:07 < olalonde> ah didn't know
22:07 < olalonde> that sucks :(
22:07 < nathan7> olalonde: and bower.. bower is barely a package manager
22:08 < nathan7> olalonde: it's fancy wget
22:08 < olalonde> I guess it could create pretty massive browser builds with a big dependency tree though
22:08 < nathan7> Yeah
22:08 < nathan7> component is nice, I use it for my frontend shit
22:09 < bingomanatee> the conceit is I work at PersonalCapital where we have a host of backbone/JS components that manage a host of tasks
22:09 < bingomanatee> and we have separate teams developing on many of these seperately
22:09 < olalonde> i think it'd be nice if packages in npm could mark themselves as I/O free, and native call free. you could then analyze a package and its dependency to determine if you can use it in a browser
22:09 < bingomanatee> If we could use something like NPM which is more granular than git/branches to update specific segments 
22:09 < bingomanatee> it would make it easier to work with compartmentalization. 
22:10 < olalonde> bingomanatee: have a look at async and underscore.js
22:10 < bingomanatee> I know those.
22:10 < olalonde> bingomanatee: they are both in npm but work in browser as well. you can see how they handle that
22:10 < bingomanatee> right
22:11 < olalonde> Im also facing the same problem actually
22:11 < butblack> I'm looking to get started with nodejs… could someone give me a high level on how I could get these really basic bloomberg (node) examples running? https://github.com/bloomberg/node-blpapi
22:11 < butblack> I've done all of the installation
22:12 < butblack> and have the bloomberg terminal
22:12 < olalonde> butblack: be more specific… do you have an error or something?
22:13 < butblack> olalonde: nope, I just don't know how to run or where to run these examples
22:13 < butblack> do i have one terminal running a node server and then another running the script?
22:13 < olalonde> git clone git://github.com/bloomberg/node-blpapi.git; node examples/Console.js
22:14 < olalonde> oops, i forgot "cd node-blpapi"
22:14 < butblack> olalonde: so i run node "filename"
22:14 < nathan7> bingomanatee: browserify + npm is probably what you want, yeah
22:14 < butblack> what if i want to get that information into an html file?
22:15 < bingomanatee> sthanks
22:17 < butblack> olalonde: nvm, I'll use something like express.js
22:18 < butblack> thanks for answering my question
22:19 < olalonde> haha ok np
22:35 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
22:54 < sinclair|net> is it just me, or is javascripts regex test() method broken?
23:00 <@TooTallNate> sinclair|net: unlikely...
23:01 < sinclair|net> TooTallNate: unlikely what?
23:01 <@TooTallNate> that RegExp#test() is broken
23:01 <@TooTallNate> sinclair|net: do you have an example
23:01 <@TooTallNate> ?
23:01 < nathan7> Hey TooTallNate 
23:01 < nathan7> How's nate-ing today?
23:01 < olalonde> sinclair|net: broken in what sense :)
23:02 < sinclair|net> i call reg.test(...) and it works, i call it again, and it fails, then, i call it again and it works, and again and it fails
23:02 <@TooTallNate> nathan7: just enjoying the Friday and sunny weather :)
23:02 <@TooTallNate> nathan7: you?
23:02 < olalonde> weird. side effect?
23:02 <@TooTallNate> sinclair|net: so… you're using /g flag?
23:02 < olalonde> are you testing a date
23:02 < olalonde> haha
23:02 <@TooTallNate> sinclair|net: or sorry, not /g, is it /m?
23:02 < nathan7> TooTallNate: Trying to catch up on GitHub notifications
23:02 < nathan7> sinclair|net: it has a side effect
23:03 < sinclair|net> TooTallNate: yes, i am using g
23:03 < nathan7> or is that .exec?
23:03 <@TooTallNate> sinclair|net: so /g is the problem
23:03 <@TooTallNate> don't use that :p
23:03 <@TooTallNate> nathan7: it's just regexp matching in general
23:03 < ckknight> sinclair|net: I'm pretty good with regexes, tell me your issue
23:03 < nathan7> Ah, there
23:03 <@TooTallNate> .exec(), .test(), .match(), all affected
23:03 < nathan7> mhm
23:04 < sinclair|net> ckknight: its fine, i have a pattern with /g and regex is failing because of it
23:04 < oti8> does mongoose.js have a 'not equal' query? I have an optional parameter in my model and want to query where that value is not true (or… where it is either false or undefined)
23:04 <@TooTallNate> sinclair|net: for more detailed reading: http://stackoverflow.com/questions/1520800/why-regexp-with-global-flag-in-javascript-give-wrong-results
23:04 < olalonde> really? they have side effect? weird
23:04 < ckknight> sinclair|net: ah, yeah, /g causes it to keep some state when you repeatedly call .test or .exec
23:05 < olalonde> interesting
23:05 < sinclair|net> ckknight: yeah, its unusual behaviour
23:05 < ckknight> yeah
23:18 < ikurei> hi. can i ask for some help with a little trouble i have? I'm building a web scraper using jsdom and httpAgent. It's working nicely, andI get my data, but I eventually crash. apparently the web i'm scraping uses modernizr for feature detection, and I guess httpAgent or jsdom dont play nice with that.
23:18 < ikurei> can i / should i somehow prevent httpAgent/jsdom from loading that modernizr.js library on the website?
23:24 < ningu> ikurei: dunno but I would recommend cheerio over jsdom
23:25 < ikurei> ningu: ill try that, nothing to loose. it's obviously a problem with jsdom so..
23:25 < ningu> ikurei: cheerio is a lot faster and for scraping it works really well
23:25 < ningu> jsdom is for when you really need to simulate a whole browser environment
23:26 < ningu> ikurei: here's a little thing I wrote that might help you http://dev.panlex.org/tools/jquery-tabularization/
23:27 < ningu> ikurei: also take a look at https://npmjs.org/package/nom if you are really lazy :P
23:27 < ningu> ikurei: the "tips on using cheerio" bit on that page is stuff that is somewhat non-obvious that isn't in the cheerio docs
23:28 < ikurei> thanks a lot
23:28 <@mbalho> ikurei: also http://maxogden.com/scraping-with-node.html
23:30 < ningu> mbalho: cool, good to know there's something else out there
23:31 < ikurei> thanks a lot to both, i'll check it first thing tomorrow
23:34 < Linkedipsoul> someone please look at this and spot why when i run the server… nothing happens on the input field
23:34 < Linkedipsoul> http://pastie.org/pastes/8044348/text
23:35 < Linkedipsoul> this is my app.js
23:35 < Linkedipsoul> http://pastie.org/pastes/8044350/text
23:35 < Linkedipsoul> pardon the noobness 
23:36 < ningu> Linkedipsoul: don't you need <input type="text">?
23:36 < Bubo> shouldn't it be inside a form?
23:36 < ningu> that too
23:37 < Linkedipsoul> i'm following a tutorial… i guess it's missing parts 
23:37 < Bubo> are you trying to learn about node.js + socket.io ?
23:37 < Linkedipsoul> yup
23:38 < Bubo> first try some node.js tutorial and see how node.js actually works and after that just go to the socket.io webpage and you have tutorials there
23:38 < gildean> Linkedipsoul: so where are the methods for the socket.io server?
23:39 < gildean> the server is listening but it doesn't do anything
23:39 < Linkedipsoul> oh looks like i'm missing a lot of things !
23:39 < Linkedipsoul> thanks for ur time guys
23:43 < brainproxy> Domenic_: the re-impl'd nextTick in q is great
23:43 < brainproxy> dramatically changes perf characteristics on a lib I'm building atop q
23:43 < brainproxy> great work!
--- Log closed Sat Jun 15 00:00:29 2013
