--- Log opened Sat Feb 09 00:00:03 2013
--- Day changed Sat Feb 09 2013
00:00 < crabtree> you can still produce ugly code
00:00 < redshadowhero> You know, this reminds me of the argument about C++ over C.
00:00 <@mbalho> also every argument ever
00:00 <@mbalho> in this channel
00:00 < gkatsev> yep
00:00 < DarkArgon> useless conversation
00:00 < airtanah> quick... spaces vs. tabs... go
00:00 < crabtree> :P
00:00 < gluxon> airtanah: tabs.
00:00 <@mbalho> airtanah: i use semicolons
00:00 < gkatsev> airtanah: even better. 2, 3, or 4 spaces.
00:00 < gluxon> gkatsev: 4
00:00 < crabtree> i use 12 spaces
00:00 < gluxon> 2 is dumb.
00:00 < redshadowhero> "You have to use OOP. Encapsulation makes it CLEAR who does what!"
00:00 < crabtree> for tab
00:00 <@mbalho> airtanah: https://gist.github.com/maxogden/3401560
00:01 < gkatsev> mbalho: hahaha
00:01 < gluxon> airtanah: spaces.. hahah
00:01 < gkatsev> mbalho: I love it. Going to adopt that from now on.
00:01 < airtanah> mbalho: lol
00:01 <@mbalho> haha look at the last comment
00:01 <@mbalho> ben_alman: well played
00:02 < ben_alman> yeah it kinda falls apart with multi-line object and array literals or var declarations
00:02 < ben_alman> o well
00:02 < airtanah> i like my ascii-art comments
00:02 < airtanah> https://github.com/jacobgroundwater/federation/blob/master/index.js#L17
00:02 < ben_alman> it was a good concept
00:02 < babonk> Hey all, I want to run another node script from the one i'm currently in.  How to do that?
00:03 < eindoofus> So is node.js suitable for standard websites or not? Because without any structure it sounds like a damn mess to me
00:03 <@mbalho> /*;;;;*/ is my new favorite thing plus it kinda looks like cthulu
00:03 < crabtree> eindoofus: use a library
00:03 < DarkArgon> child process babonk
00:03 < DarkArgon> or modules
00:03 < crabtree> framework
00:03 < crabtree> w/e
00:03 < crabtree> you can use express and structure it yourself or use something else that forces you to structure in a specific mannert
00:03 <@mbalho> eindoofus: asking broad questions isnt very constructive
00:03 < crabtree> manner*
00:03 < crabtree> node itself is perfectly capable for "standard" websites
00:04 < babonk> DarkArgon: Which one is more appropriate/easier?  module or child process
00:04 < gluxon> airtanah: Haha! Can I use that? Who do I give credit to?
00:04 < babonk> This is running from my local computer, i just need it to work
00:04 <@mbalho> airtanah: hahahaha
00:04 < gkatsev> eindoofus: what do you want "suitable for standard websites"? Node isn't meant for writing websites with.
00:04 < crabtree> airtanah: great way to increase line count
00:04 < gkatsev> eindoofus: you can use it to write the server-side component.
00:04 <@mbalho> i find html to be useful for writing standard websites
00:04 < crabtree> node itself is impartial to it
00:04 < airtanah> gluxon: i stole it from somewhere, go nuts
00:04 < crabtree> you can do whatever you want :P
00:05 < DarkArgon> module. its just require('blah'). u should read some basic tutorials babonk 
00:05 < crabtree> similar to ruby
00:05 <@mbalho> airtanah: if im not mistaken it looks like jgs
00:05 < babonk> DarkArgon: Basically I want to run the code as if it simply followed
00:05 <@mbalho> airtanah: http://www.geocities.com/spunk1111/
00:05 < crabtree> where is niggler?!
00:05 < airtanah> mbalho: i will add credit in in that case
00:05 < DarkArgon> u wan't to include, php like?
00:06 < airtanah> crabtree: i make up for it by not writing any other comments, LOL
00:13 < eindoofus> Is there a tutorial out there for how to structure a simple web site using node.js and express?
00:14 < DarkArgon> like a boilerplate?
00:14 < eindoofus> sure
00:14 < DarkArgon> install express with -g
00:14 < DarkArgon> and type express
00:14 < crabtree> that does some of it
00:14 < daekano> http://bit.ly/11WdG1N
00:14 < crabtree> then you need to decide on an ORM if you'd like to use an MVC pattern
00:15 < DarkArgon> xD
00:15 < eindoofus> Not sure why thats funny.
00:15 < eindoofus> So what ORM do you guys use?
00:15 < DarkArgon> mongoose
00:15 < crabtree> i use sequelize 
00:16 < daekano> So much bad press for mongo lately
00:16 < eindoofus> how come?
00:16 < airtanah> daekano: i think 10gen just handled it poorly
00:16 < crabtree> it's not very reliable 
00:16 < crabtree> well
00:16 < daekano> I hope so. I enjoy -using- mongo
00:16 < crabtree> it wasn't
00:16 < crabtree> i guess for now it's alright :P
00:16 < daekano> but in terms of a production data store, I'm kind of terrified haha
00:17 < daekano> The Cornell prof that was bashing Mongo has a NoSQL store that is ACID-compliant
00:17 < crabtree> i really see potential in rethink db
00:17 < crabtree> i think someone needs to make an ORM for it :P
00:17 < daekano> crabtree: I did see that not long ago
00:18 < lohkey> i have a hard time justifying any non KV data store for use as anything other then analytics
00:18 < DarkArgon> rethink looks cool
00:18 < lohkey> rethinkdb is pretty cool for analytics for example
00:18 < crabtree> i like that rethink has joins :P
00:20 < lohkey> i mean, most ORMs tend to just devolve any data store into a KV store anyways
00:20 < harbhub> [19:17] <harbhub> is there a way to turn off the socket.io from serving the socket.io.js file? [19:17] <harbhub> so that i can serve it myself? [19:17] <harbhub> or does socket.io.js need to be sent from the socket.io module in order to function?
00:21 < lohkey> thats supposed to be one of the arguments for mongo, is that it reduces impedance mismatch by embracing renormalized data. But it doesn't solve the impedance mismatch of query to ORM
00:21 < harbhub> lohkey, what about redis?
00:21 < DarkArgon> u can turn it off
00:21 < harbhub> how do i turn it off?
00:21 < airtanah> i don't care for mongo, but i have no good reason to back it up
00:21 < harbhub> i don't care for mongo, and i like redis
00:22 < lohkey> harbhub: redis is cool for in memory stuff, for actual KV data stores i'd lean more towards DynamoDB type systems like Riak
00:22 < airtanah> i like redis, but would never use it for true persistence
00:22 < DarkArgon> google.. https://github.com/LearnBoost/Socket.IO/wiki/Configuring-Socket.IO
00:22 < crabtree> i see a lot of places where it wouldn't work due to lack of joins
00:22 < crabtree> which is a design choice
00:22 < airtanah> redis is an "ehnanced cache and ephemeral data store"
00:22 < crabtree> i can't knock it in every use case
00:22 < crabtree> cause i do like it
00:22 < lohkey> Riak, Cassandra and voldermort <3 DynamoDB databases
00:22 < airtanah> honestly, postgres does a great job too
00:22 < lohkey> then theres the _real_ dynamo db as part of AWS
00:22 < harbhub> no but darkargon, my fear is that socket.io won't work unless the module sends the socket.io.js script itself
00:23 < harbhub> is that false to assume?
00:23 < DarkArgon> it will work without it
00:23 < DarkArgon> u can get the client from somewhere else
00:23 < harbhub> ok
00:23 < harbhub> i will test and let you know
00:24 < eindoofus> You guys need a horrible marketing guy. How about the name NEMESIS for node,js, express, and mongo. And then rest of the letters just help make the word. lol. You'll all hate it but pretty soon Nemesis jobs will start to pop-up all over the place. Then you'll bitch about the guy who started the downfall of it all while you make 80K a year programming Node.js
00:24 < eindoofus> Waiting for the hate...
00:24 < crabtree> :S
00:24 < harbhub> https://github.com/LearnBoost/socket.io/blob/master/lib/static.js
00:24 < crabtree> i think you're confused eindoofus
00:24 < harbhub> it won't let me look at that
00:25 < crabtree> i wouldn't call someone who uses RoR a person who isn't working with ruby
00:25 < crabtree> lol
00:25 < DarkArgon> https://github.com/sockjs/sockjs-client
00:25 < DarkArgon> ah wait sry, wrong link
00:27 <@mbalho> eindoofus: 80k salary seems low to me for a node job
00:27 < eindoofus> fine, have it be 200K for you mbalho. lol
00:28 < eindoofus> Think about it guys.. NEMESIS. Business people will eat that shit up :)
00:29 < DarkArgon> https://github.com/LearnBoost/socket.io-client/blob/master/socket.io-client.js
00:29 < eindoofus> Anyway, I should go before more people hate me.
00:29 < crabtree> eindoofus: if you're talking about a framework that includes express & mongoose
00:29 < crabtree> those exist already
00:29 < airtanah> DarkArgon: a few tidbits i learned while using socket.io... 
00:29 < airtanah> socket.io makes two connections before starting, one to establish protocol, then one to connect
00:29 < eindoofus> Then you guys need to support it and run with it crabtree
00:29 < airtanah> this gave me problems while trying to figure out load-balancing
00:30 < eindoofus> $$$
00:30 < crabtree> nobody has to eindoofus
00:30 < crabtree> if you want to and agree with it, sure
00:30 < eindoofus> Did you not see the $$$
00:30 < eindoofus> lol
00:30 < crabtree> no
00:30 < opus_> hello guys, what is a typical hourly rate for a node.js programmer?
00:30 < crabtree> frameworks are just trying to make your work with node more efficient 
00:31 < harbhub> airtanah
00:31 < crabtree> as in faster to do
00:31 < harbhub> darkargon
00:31 < crabtree> maybe more organized and easier to maintain 
00:31 < harbhub> how do i set the static file server to false
00:31 < harbhub> in socketio?
00:31 < crabtree> but there isn't a single solution
00:31 < harbhub> i set the log to false
00:31 < harbhub> i need to set the static file server to false
00:31 < harbhub> then i will add the socket.io.js  to my public js libs
00:31 < eindoofus> there never will be. take a vote and do something
00:31 < harbhub> since socketio doesn't need to serve it
00:31 < crabtree> terrible idea eindoofus
00:33 < eindoofus> you don't have to adopt your freedom altogether, but if the majority of the community ran with something then maybe there would be some node.js specific jobs out there, but there isn't because you can't agree on anything because freedom is too beautiful
00:33 < eindoofus> you like testing your principles against me crabtree. I should go
00:33 < crabtree> a framework isn't like learning a new language
00:33 < eindoofus> later guys. sorry if i pissed anyone off
00:33 <@mbalho> eindoofus: read a boon on arachism and come back
00:34 <@mbalho> anarchism*
00:34 <@mbalho> book*
00:34 <@mbalho> slow internet typing fail!
00:34 < gkatsev> arachnism?
00:34 < crabtree> arachnidism 
00:34 <@mbalho> <world wide web joke>
00:36 < zivester> if I set sessions maxAge to 10 seconds... and i keep refreshing the same page, will it automatically reset the 10 second expiration?  I think it should, but my session is timing out 10 seconds after the first hit
00:41 < eighty4> no node.js specific jos out? I've seen at least a couple.
00:48 < asdf12> ugh
00:48 < asdf12> why isn't there a way to define an object's error handler 
00:49 < asdf12> wanttttt
00:56 < prosser> zivester: make sure you're actually hitting the server, and not just getting a browser cached reply
01:00 < cloudbender> Who's yer buddy ....
01:00 < tpayne> I'd like to make a certain set of routes require auth. What's the best way to do this with node?
01:00 < cloudbender> asdf12 can you not assign an onerrer ?
01:01 < cloudbender> onerror
01:01 < CoverSlide> cloudbender: ReferenceError: onerrer is not defined
01:02 < CoverSlide> :D
01:02 < cloudbender> Oh, it has no onerror property to begin with, I see
01:02 < zivester> prosser, it's hitting, getting a 200 and logging... i can't for the life of me figure out why cookies are only being responded with on the login page... shouldn't the cookie persist through all responses?
01:03 < cloudbender> Would there be a way to wrap an emitter with some kind of whacky try...catch deely ?
01:03 < tpayne> I'm doing something like this right now: if (req.originalUrl === '/new' || req.originalUrl === '/list')
01:05 < CoverSlide> the best way to handle errors is to not write them
01:05 < cloudbender> Well, there it is.  Gees I should of thought of that years ago.
01:05  * cloudbender slaps self
01:07  * cloudbender apologizes to self, offers to take self out for dinner.
01:07 <@mbalho> cloudbender: look at nodes new domains feature
01:09 < cloudbender> mbahlo thank you
01:09 < asdf12> isn't what i meant
01:10 < asdf12> it'll be cool if you natively you could do function Blah() { } Blah.errorHandler = function() { // handles all errors thrown by object }
01:11 < tpayne> ooh you can add middleware to routes, nice!
01:11 < CoverSlide> objects can't throw
01:12 < tpayne> damn that makes node so nice
01:12 < xinmin> what's a good flow control library ? like async. simple forEach stuff
01:12 < asdf12> CoverSlide: it would capture the prototype functions of the blah object
01:13 < CoverSlide> except functions aren't tied to any object
01:13 < xinmin> async calls the callback on first error instead of accumulating them - this is terrible :/
01:13 < asdf12> CoverSlide: i said it would be nice
01:13 < asdf12> its not like it exists
01:13 < CoverSlide> var b = a.p; b()
01:13 < asdf12> eh?
01:14 < CoverSlide> suppose a is an instance of blah, and p is a method on Blah.prototype
01:14 < asdf12> yea and?
01:14 < asdf12> it can't check this.errorHandler? lol
01:15 < CoverSlide> when you call b, how would you know to reference Blah.errorHandler
01:15 < asdf12> if this thing existed
01:15 < CoverSlide> no
01:15 < CoverSlide> because this is the global object in that case
01:15 < asdf12> yes it can if it were Blah.prototype.errorHandler
01:15 < CoverSlide> but b doesn't know anything about Blah or Blah.prototype
01:15 < CoverSlide> it's been disconnected
01:15 < asdf12> CoverSlide: good but im proving you wrong, if you do that and call b() then b is no longer part of the context
01:16 < asdf12> in which you want to capture
01:16 < CoverSlide> but here's the thing
01:16 < CoverSlide> that's how all javascript functions work, they're supposed to be values you can pass around
01:17 < asdf12> and i was never talking about javascript functions
01:17 < CoverSlide> the whole providing context thing is a hack to make it seem more java-like
01:17 < asdf12> i was talking about objects
01:17 < CoverSlide> ok so how do you throw from an object without a function?
01:18 < asdf12> you're being stubborn and trying to say all objects are just functions
01:18 < asdf12> i toss around
01:18 < asdf12> and ignoring the concept of an object
01:18 < CoverSlide> no, i never said objects were functions
01:19 < CoverSlide> an object is just a collection of references
01:20 < harbhub> what does 404 mean
01:20 < harbhub> which is the error you send to the client when the file doesnt exist that they requested?
01:20 < harbhub> 404 or 500?
01:20 < CoverSlide> and unfortunately, references are one-way
01:20 < gluxon> harbhub: Google.
01:20 < asdf12> harbhub: 404
01:20 < harbhub> thanks asdf12
01:21 < asdf12> CoverSlide: a collection of references ya...
01:21 < CoverSlide> think less about files and more about resources
01:21 < asdf12> ignoring a big point that an object provides context
01:22 < MI6> joyent/node: isaacs master * e4a856e : V8: Reapply floating patches (+1 more commits) - http://git.io/G1zitw
01:23 < CoverSlide> if you really want to, you could wrap all your functions in a try/catch, and in the catch(e){if(this.errorHandler)this.errorHandler(e)}
01:23 < CoverSlide> but that is just asinine
01:23 < harbhub> how do i redirect the user?
01:23 < asdf12> you are very argumentative
01:23 < harbhub> let's say they make a request to the server
01:23 < harbhub> how do i redirect them?
01:23 < asdf12> i was just saying it would be nice if javascript supported it
01:24 < harbhub> i.e. how do i change the url that they request?
01:24 < asdf12> i did not saying i was going to make my own make shift hack to do it
01:24 < CoverSlide> harbhub: res.statusCode = 301;res.setHeader('location', new_location);res.end()
01:24 < harbhub> ok
01:24 < harbhub> i will test that
01:25 < asdf12> CoverSlide: and actually if you implemented like that, then yes its asinine
01:25 < asdf12> but thats not the implementation i was talking about at all
01:28 < harbhub> coverslide, it isn't working
01:28 < harbhub> oh wait
01:29 < mscdex> node.js rules!
01:30 < CoverSlide> i hear that only dumb people use it
01:30 < harbhub> it still isn't working coverslide
01:30 < mscdex> haters are going to hate
01:32 < CoverSlide> harbhub: show me a paste
01:32 < harbhub> it's okay
01:32 < harbhub> i'm just going to write an error
01:32 < CoverSlide> maybe try Location
01:32 < CoverSlide> although it should be case insensitive
01:32 < harbhub> i deleted the code lol i don't need it
01:33 < harbhub> i will learn to redirect if i need it
01:33 < harbhub> thanks though
01:33 < harbhub> i found an alternative method, just writing plain text
01:41 < harbhub> hmm
01:41 < harbhub> i do need to be able to redirect the client
01:41 < harbhub> coverslide, i still need help with that
01:47 < dougtoppin> if anyone can tell me why 'npm install socket.io' seems to complete fine but 'npm list' shows this error with socket.io i would appreciate it:  socket.io@0.9.13 invalid
01:48 < dougtoppin> at the end of the npm list output i see this:  npm ERR! invalid: socket.io@0.9.13 ……/node_modules/socket.io
01:48 < dougtoppin> npm ERR! not ok code 0
01:52 < eindoofus> So I was able to effectively communicate what I was taking about earlier but I think this answer on stackoverflow.com what I believe to be wrong with node.js: http://stackoverflow.com/questions/7037020/thoughts-on-using-express-js-instead-of-ruby-on-sinatra
01:53 < eindoofus> wasn't*
01:54 < talntid> when I run a program... say...
01:54 < talntid> node blah.js
01:54 < talntid> inside the running "node" can I issue commands like... console.log("test") ?
01:55 < othiym23> my promises-fu has leveled up in the last 48 hours
01:55 < othiym23> there are many lovely and terrible things about promises, this is what I have learned
01:55 < lyaunzbe> eindoofus: Okay, that is such a subjective answer. I have a similar experience when trying rails after using nodejs for a while.
01:55 < othiym23> so many ways to constrain asynchronous programming, and none of them are tradeoff-free
01:56 < asdf12> what
01:56 < asdf12> i skimmed through that answer
01:56 < asdf12> it seems like the person is just complaining because there is lack of X library similar to how theyre use to in rails
01:57 < othiym23> if you want batteries included, and you're willing to get out an arc welder to get at them when they need replacing, then Rails is awesome
01:58 < othiym23> you want to build neat things from raw components and have a good idea of what it is you want to build and a specific way you want it built, then Node is awesome
01:58 < othiym23> Node is not omakase
01:58 < othiym23> that pretty much sums up why I like using it, but hey, abortions for some, tiny American flags for others
01:58 < asdf12> othiym23: did you get to see the pic?
01:58 < lyaunzbe> heh
01:59 < asdf12> i linked it again but i think you disappeared again
01:59  * mscdex shakes a fist at Rails
01:59 < othiym23> no, I saw it, although that was like 3 in the morning my time so my recollections aren't super clear ;)
01:59 < talntid> when I run a program like.. "node blah.js" ... inside the running "node" can I issue commands like... console.log("test") ?
01:59 < othiym23> did you throw the implementation up anywhere?
01:59 < zivester> omg... can someone explain to me why express/connect doesn't resend cookies if I do not alter res.session??? just spent hours debugging this
01:59 < asdf12> no i was trying to do the method missing thing today, i can't do it heh
01:59 < othiym23> were you relying on any Firefox-specific features to make it work?
01:59 < asdf12> not a drop in replacement 
02:00 < asdf12> at least
02:00 < othiym23> yeah, that was what I thought
02:00 < asdf12> othiym23: for the proxy? no
02:00 < lyaunzbe> talntid: Yes, if blah.js has console.log("test");
02:01 < othiym23> in other promises-related news, Qx is pretty nice: https://github.com/SLaks/Qx
02:01 < asdf12> othiym23: but the proxy is cool no? you don't have to modify existing code, its completely transparent
02:01 < talntid> lyaunzbe, yeah I found that, but I was hoping to interact with it more openly... like be able to issue JS commands like I can if I just type "node"
02:01 < othiym23> it saved me from having to write a promises-aware collection library of my own
02:01 < othiym23> asdf12: it is cool! What does the implementation look like?
02:02 < othiym23> talntid: read up on node-inspector / the node debugger
02:02 < asdf12> its really simple, but magical
02:02 < asdf12> i'll put up the code soon and ping you the link
02:02 < othiym23> cool thanks
02:02 < lyaunzbe> talntid: not execatly sure what you mean. You want to be able to console.log('test'); on command? You can have blah.js listen to stdin and respond appropriatly.
02:02 < othiym23> or you can use node-repl if you want a custom REPL inside your application
02:02 < lyaunzbe> there are also modules that allow you to create custom repls.
02:03 < lyaunzbe> haha too slow ;(
02:03 < othiym23> like this one: https://github.com/dshaw/replify
02:03 < othiym23> or you could embed this in your app and be totally awesome: https://github.com/Benvie/Node.js-Ultra-REPL
02:04 < asdf12> i think the biggest problem with method missing
02:04 < asdf12> isn't proxies
02:04 < asdf12> it's you need a way to intercept property look up
02:04 < othiym23> asdf12: keep in mind that browser vendors have a variety of reasons for wanting to make things like method_missing as hard as possible
02:04 < asdf12> like what?
02:05 < othiym23> asdf12: and "intercepting property look up" is exactly what proxies / WeakMaps / Observables in ES.next are all about
02:05 < asdf12> oh is it
02:05 < othiym23> it's generally considered to be a bad thing to allow transparent proxying of DOM objects, because you could do shenanigans on i.e. intercepting input to text controls and sending it places
02:06 < othiym23> asdf12: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-8.5
02:07 < othiym23> also http://people.mozilla.org/~jorendorff/es6-draft.html#sec-15.15
02:07 < othiym23> the observable stuff got pushed to ES7, so I don't know where to find a writeup of it
02:07 < othiym23> maybe in rwaldron's TC39 meeting notes
02:08 < asdf12> i thought all new features had to be able to be shim'd in current ?
02:08 < asdf12> before they were ok with implementating it
02:08 < othiym23> yes and no
02:09 < harbhub> coverslide, now that i fixed the server, can you help me with location?
02:09 < asdf12> othiym23: but yea, if only i could redefine internal functionssssss
02:09 < harbhub> i'd like to send an href that forces the client's browser to go/request that href
02:09 < othiym23> asdf12: but then where would the challenge be?
02:10 < harbhub> i want to send the client to an error page rather than just show plain text saying 'Error' lol
02:10 < asdf12> othiym23: it'll still be a challenge imo
02:11 < asdf12> i think a lot of this stuff anyway is just thinking outside the box
02:11 < asdf12> doing "magic"
02:11 < pachet> harbhub: hi, i just joined, what are you trying to do
02:12 < harbhub> hi pachet
02:12 < harbhub> i'm trying to change the client's url
02:12 < segomos> it cannot be done
02:12 < harbhub> i.e. when the client requests a page
02:12 < harbhub> i want to send them to a different page
02:12 < harbhub> not necessarily a page on my server
02:12 < cloudbender> Presenting my dilemma  ... https://gist.github.com/cloudbender/4743495
02:12 < asdf12> othiym23: for instance i wanted to setup a proxy object for TypeError, and get all type errors thrown go through my proxy
02:12 < cloudbender> It's an easy read
02:12 < asdf12> othiym23: if i could do that, i could method missing
02:13 < asdf12> othiym23: but v8 doesn't let you do that heh
02:13 < rom1504> hello, what's the best lex/yacc equivalent in node.js ?
02:14 < asdf12> othiym23: that was the way i had in mind, because you obviously can't do property look up interception or anything
02:14 < cloudbender> Asynchronous coding is awesome, but there are subleties ...
02:14 < othiym23> asdf12: no, although you can see a way to get most of that using domains if you read the domains source
02:14 < cloudbender> subtleties even ...
02:15 < pachet> harbhub: sure you can
02:15 < harbhub> how?
02:15 < pachet> on your server, at least
02:15 < asdf12> othiym23: no but the key thing here is, it has to be seamless, same way my proxy lib works, it should just drop right in to existing code
02:15 < harbhub> well on my server i can
02:15 < pachet> harbhub: are you using any routing framework?
02:15 < harbhub> yes, i am using nodejs
02:15 < harbhub> isn't it a routing framework?
02:15 < asdf12> othiym23: otherwise it isn't a challenge then :P if someone has to re-write their code to use your lib
02:15 < pachet> lol
02:15 < pachet> i guess so
02:15 < harbhub> heh
02:15 < othiym23> cloudbender: I see at least one problem with your gist right off the bat -- what are you trying to do?
02:15 < harbhub> so that is what i'm using
02:16 < othiym23> asdf12: you should take a look at https://github.com/CrabDude/trycatch
02:16 < harbhub> i solved it
02:16 < harbhub> pachet, wow
02:16 < cloudbender> othiym23 the code works fine, but I need to have the callback satisfied before 'post callback', which it won't be.
02:16 < harbhub> javascript is strong
02:16 < harbhub> i could easily hack now
02:16 < harbhub> luckily i'm ethical
02:16 < cloudbender> the callback has latency
02:17 < othiym23> Adam and Tim have done some really interesting stuff with continuations
02:17 < othiym23> cloudbender: yeah, that's what I spotted
02:17 < pachet> hacking is easy these days
02:17 < harbhub> patchet i figured it out btw
02:17 < pachet> find a page with some choice links
02:17 < pachet> right click + open in new window
02:17 < othiym23> cloudbender: so you need to pass a callback into your callback ;)
02:17 < pachet> boom, sentencing date
02:17 < harbhub> what do you mean?
02:18 < cloudbender> I could process within the tail end of the callback function, but that puts my execution there, rather than in global
02:18 < cloudbender> well, that would only add more weight to the callstack
02:18 < othiym23> cloudbender: it's still within the scope of the closure, it's not global at all
02:19 < asdf12> lines 3 & 20 hurt my eyes cloudbender  :p
02:19 < cloudbender> just a sec
02:19 < cloudbender> asdf12 why ?
02:19 < asdf12> just your style choice
02:19 < cloudbender> oh ok.
02:20 < asdf12> i've never seen anyone do that
02:20 < cloudbender> well, there ya go.
02:20 < asdf12> also
02:20 < cloudbender> It helps me remember I'm sandboxed
02:20 < asdf12> i've decided, im going semi-colon-less in my javascript
02:21 < pachet> somewhere in the deeps, satan cracks his whip
02:24 < othiym23> cloudbender: here, look at this: https://gist.github.com/othiym23/4743530
02:25 < othiym23> it's not really clear to me what you mean by "sandboxed", though
02:25 < cloudbender> looking
02:25 < asdf12> othiym23: he means scoped
02:26 < cloudbender> Perhaps I have the wrong idea, but placing the entire module with an iife is called 'sandboxing' no ?
02:26 < asdf12> is that old school my little pony?
02:26 < asdf12> in your avatar?
02:26 < cloudbender> lol
02:26 < cloudbender> lol
02:26 < cloudbender> bastards
02:26 < othiym23> asdf12: sure is!
02:27 < phonebook_> is node faster than iis? even though node is non-blocking, if implemented right, don't the same number of threads/processes still go out for the OS to handle?
02:27 < othiym23> cloudbender: no, what you have there is a closure
02:27 < cloudbender> ok
02:27 < othiym23> so things outside the closure can't see what's inside it, but it can see what's outside it
02:27 < segomos> nothing is faster than IIS
02:27 < othiym23> it's sort of the inverse of a sandbox
02:27 < cloudbender> hmmm
02:27 < othiym23> phonebook_: is ham faster than a wallet?
02:27 < pachet> phonebook_: it's that 'if implemented right' bit that's the clincher ;]
02:28 < othiym23> need more context
02:28 < phonebook_> everything inside the closure can see what is outside but whats outside cant see inside
02:28 < segomos> the answer is no
02:28 < segomos> because nothing is faster
02:28 < cloudbender> ok lemme check out this gist
02:28 < pachet> segomos: all hail
02:29 < phonebook_> node can be non-blocking and .net aps block on a given thread - right?
02:30 < asdf12> old school MLP looks scary
02:30 < asdf12> creepy
02:30 < cloudbender> othiym23 I will pull that gist and tinker with it.  Thank you.
02:31 < phonebook_> but the only difference between waiting for a thread and waiting for a callback is..?
02:31 < phonebook_> the OS implementation
02:31 < amurdaca> hey guys
02:32 < amurdaca> how do i show custom 404 50x error templates in express (in production)?
02:32 < amurdaca> i only have this line -> app.use(express.errorHandler()); 
02:33 < amurdaca> i would like to show custom error pages
02:33 < Chris-tina> Phonebook_, it's a different execution model. Node is single threaded, you dont have to deal with the complexity of multi-threaded code in an impure language
02:34 < segomos> amurdaca: add your last route as "*" and server 404
02:35 < asdf12> noooooo
02:35 < zivester> can anyone tell me if my assumptions on this gist are correct or am I just crazy (connect/express/session/cookie)? https://gist.github.com/zivester/4743563
02:35 < Chris-tina> Phonebook_, on the other hand, if you give in to blocking calls, you might have a hard time. Node has concurrency, but has no parallelism. 
02:35 < min|dvir|us> >>> /`(sendTwoLines|sendThreeLines|timeout||set|g|w|mdn)/.exec('`set')[1];
02:35 < purr> min|dvir|us: (string) ''
02:35 < min|dvir|us> Why?
02:35 < AAA_awright> Chris-tina: I wouldn't say it's "single threaded" but it's event-oriented
02:35 < AAA_awright> Bringing up threads at all just opens up a can of worms :-\
02:35 < asdf12> segomos: its better to add it as the last middleware
02:36 < asdf12> than route
02:36 < Chris-tina> Aaa_awright, it IS single threaded.
02:36 < min|dvir|us> Anyone?
02:36 < phonebook_> node is advertised as better than iis and apache because of non-blocking
02:36 < AAA_awright> Chris-tina: Node.js uses about 6-10 threads
02:36 < AAA_awright> It's just event-oriented in the way it runs it
02:36 < SomeoneWeird> AAA_awright, yes but the event loop is only 1 threaded
02:37 < Chris-tina> AAA_awright, your JS code is executed in a single thread
02:37 < AAA_awright> By definition
02:37 < segomos> phonebook_: it depends on how and what you're doing, you'd get better and more accurate responses if you explained your scenario more
02:37 < cloudbender> before I delve, I note that  }())    is different than   })()  for the tail parens
02:37 < AAA_awright> ECMAScript always runs in a single thread
02:37 < segomos> otherwise, IIS rules the world
02:37 < gluxon> AAA_awright: What's the reasoning for 6-10?
02:37 < AAA_awright> gildean: Unless that's changed in the last 6 months... but there's DNS, etc
02:37 < AAA_awright> Crypto has a few threads iirc
02:38 < segomos> asdf12: thanks
02:38 < phonebook_> im using node for my own website and i want to work in a node shop one day. i think its an awesome idea. but if you had a huge application or site with many hits i wonder how node stacks up to iis and apache.
02:38 < cloudbender> I wonder what the costs would be to have a cluster of 8 IIS servers
02:38 < gluxon> phonebook_: Better. much.
02:39 < cloudbender> And I wonder if M$ would insert noops into the databse engine if you you paid for the 'standard' licenses.
02:40 < Sorella> phonebook_: That depends on which kinds of applications you're using, and which kind of applications you're running under Apache/IIS.
02:40 < cloudbender> And I wonder if you need an attorney if you develop code against IIS
02:40 < AAA_awright> Even if we only consider the user-exposed API, point it is that it's not *merely* single-threaded (default for programs unless you -lpthread), it's event-oriented, as opposed to most "single-threaded" programs
02:40 < Sorella> phonebook_: In fact, it all depends on what you're building. Node is a tool, one that you can use to develop scalable network services that are I/O bound (that is, that most of your time is spent dealing with I/O rather than intensive processing).
02:40 < cloudbender> anyway, I digress
02:41 < Sorella> AAA_awright: again, the user code is ran in a single-threaded environment. That's what I meant by "node is single-threaded", and it was used on the context of comparing the asynchronous execution model of node with the multi-threaded one.
02:42  * Sorella is Chris-tina, btw.
02:42 < AAA_awright> Most all code is single-threaded so that's not really informative...
02:42 < SomeoneWeird> MAGIK
02:43 < Sorella> AAA_awright: some processes might execute in a separate thread. And you can spawn other processes to run some code and communicate through message passing. Still, the user code is synchronous *and* single-threaded.
02:43 < AAA_awright> My point is that's not very informative
02:43 < Sorella> Well, at least in the sense of JS being a strict, top-down scripting language.
02:44 < pachet> if you're scaling up i'd argue that it's necessarily separately threaded ;[
02:44 < Sorella> AAA_awright: that depends on which context we're talking about. I would argue that in *that* context it is informative.
02:44 < AAA_awright> And, I mean, you can get thread-like behavior in Node.js userspace if you want to
02:45 < othiym23> cloudbender: (function () {}()) vs (function () {})() is a Crockford thing
02:45 < AAA_awright> It's not supported by default, just like anything else
02:45 < Sorella> AAA_awright: as far as I know you can only spawn separate processes, no?
02:45 < cloudbender> oh
02:45 < cloudbender> thank you
02:45 < Sorella> Or have I been out of the Node land for that long?
02:45 < AAA_awright> Sorella: There's been libraries for threads in Node.js for a while, maybe years?
02:45 < AAA_awright> What's special about Node.js isn't that it's single-threaded, it's that it's event-oriented
02:45 < Sorella> Well, I have never seen those.
02:45 < othiym23> cloudbender: the only reason the ( is there is to tell the parser that you've got a function expression and not a function declaration -- according to Crockford, it's cleaner to put the invoking parentheses (the () at the end) inside the grouping parentheses
02:46 < othiym23> and if you're catenating javascripts, that's less likely to cause problems
02:46 < cloudbender> ok thank you
02:46 < cloudbender> yes of course that makes sense
02:46 < othiym23> in practice, they're semantically identical
02:46 < Sorella> If you're catenating scripts, you already have a problem =/
02:46 < othiym23> Sorella: yeah, it's called "being on the internet"
02:47 < cloudbender> Oh, I will be concatinating scripts.  I... will... be...
02:57 < cloudbender> A treat for the ears ........  http://www.youtube.com/watch?v=RugSclNY4y8
03:12 < harbhub> how do i setTimeout inside of socketio?
03:14 < jergason> harbhub: I don't understand your question. You mean the function setTimeout()?
03:14 < harbhub> yes
03:15 < harbhub> i'm inside the io.on('connection
03:15 < harbhub> so if i setTimeout
03:15 < harbhub> how do i emit?
03:15 < jergason> the same way you normally would?
03:15 < jergason> what do you mean?
03:15 < harbhub> can you give me an example?
03:16 < harbhub> i thought the socket has to emit from within the connection
03:16 < jergason> harbhub: there is nothing about setTimeout that would prevent you from emitting within it
03:17 < harbhub> i don't get it
03:17 < Franz__> etTimeout(...
03:17 < Franz__> setTimeout(...,8000)
03:17 < harbhub> what do i specify
03:17 < jergason> a function
03:17 < harbhub> to make sure it is the right socket?
03:17 < harbhub> i know setTimeout
03:17 < jergason> it will close over the socket
03:17 < harbhub> i don't know how to use it with socketio
03:17 < harbhub> oh
03:17 < harbhub> cool
03:17 < jergason> do you know how closures work?
03:17 < harbhub> yep
03:17 < harbhub> sort of*
03:18 < Franz__> do you need a example
03:18 < Franz__> using settimeout ?
03:18 < jergason> so if you define an anonymous function as the argument to setTimeout, it will have the socket in its scope
03:18 < harbhub> yes
03:18 < harbhub> i need a socketio example using settimeout
03:18 < harbhub> oh
03:18 < harbhub> you mean
03:18 < Franz__> ah ok
03:18 < Franz__> let me see
03:19 < Franz__> try a ping pong example
03:19 < harbhub> setTimeout(function(){socket.emit('hey event','world')},400);
03:19 < harbhub> like that?
03:19 < jergason> harbhub: https://gist.github.com/jergason/68bcbe818d43f0eaa4cf
03:20 < Franz__> yes
03:20 < Franz__> its right
03:20 < harbhub> mine?
03:20 < Franz__> jergason
03:20 < harbhub> ok
03:20 < Franz__> try yor sintax
03:21 < Franz__> too
03:21 < jergason> so since you define the function that you pass to setTimeout while socket is in scope, the anonymous function gets a reference to the socket variable
03:21 < jergason> "closes" over it
03:21 < harbhub> i get it
03:21 < jergason> kk sweet
03:21 < harbhub> i learned closures today
03:21 < harbhub> by now i think i finally get it
03:21 < harbhub> thanks guys
03:21 < jergason> npnp
03:28 < harbhub> i love copy/pasting my code from serve to client
03:28 < harbhub> :)
03:28 < harbhub> and vice versa
03:31 < min|dvir|us> Is there some tool that I can use in conjunction with upstart that will manage my Node.js apps?
03:34 < TehShrike1> substack: whaaaat the fuuuuuuck - dnode in ie6, srsly?
03:35 < TehShrike1> substack: how about shoe?
03:41 < substack> TehShrike1: I'm getting to that next
03:41 < TehShrike|Work> Well that's just ridiculous.  And cool.
03:43 < harbhub> how do i reference a fontface in css on the node server?
03:43 < harbhub> i could use the url()
03:43 < harbhub> but i'd like to use a relative path
03:43 < harbhub> or an absolute path without using a url
03:43 < harbhub> any ideas?
03:44 < harbhub> how would you src='' an image?
03:44 < harbhub>  /public/css/index.css
03:44 < harbhub> is where the css file is
03:44 < harbhub>   /public/font/index.tff
03:44 < harbhub> is where the font is
03:46 < pachet> why does node need to know where the font lives?
03:46 < pachet> cant you just write that from the client's perspective?
03:46 < asdf12-> you're using express?
03:46 < g0z> you can "pull in" fonts with node-canvas, not sure what good it would do on server side generated html?
03:46 < min|dvir|us> Is there some tool that I can use in conjunction with upstart that will manage my Node.js apps?
04:01 < redshadowhero> min|dvir|us: there's something for systemd, so there has to be SOMETHING you can use for node.
04:57 < asdf12_> how do people irc on their phones
04:57 < asdf12_> it seems painful
05:03 < gluxon> asdf12: It is.
05:04 < ajrye> anyone using  openshift to host a node.js w/socket.io support
05:13 < asdf12> whoaaaa
05:56 < samholmes> I installed express-partials and am using the middleware with app.use(require('express-partials')()); and this is the error I'm getting on my layout.ejs file.
05:56 < samholmes> http://pastebin.com/Cz43WDYp
06:00 < timoxley> samholmes why are you using… jade partials, in an ejs layout 
06:02 < timoxley> samholmes also, please post the code you used to render/setup the views
06:11 < samholmes> timoxley: Is that possible?
06:11 < samholmes> timoxley: is it possible to use both jade an ejs?
06:11 < timoxley> samholmes probably, though not sure why you'd do that.
06:12 < timoxley> can you post the code
06:12 < zivester> is there a way in Jade to pass a variable from a template to an extended template? https://github.com/visionmedia/jade#template-inheritance   basically so I can extend a main layout, but provide a "title" variable to place into the <title> of the page
06:14 < timoxley> zivester yes there is a way
06:17 < timoxley> zivester I assume you're trying to update the layout's title from your page template?
06:18 < zivester> timoxley, yes
06:20 < timoxley> zivester just make a block in your head, e.g. called title, and use something like "block append title" to append the page title to the title block
06:25 < zivester> timoxley, thanks... its not pretty but it works... got it to <title>my Title\r</title>  wish that newline wasn't in there
06:25 < timoxley> zivester can you show code
06:28 < zivester> timoxley, https://gist.github.com/zivester/4744198
06:29 < zivester> I'm just being OCD, it works.. just the newlines are bugging me, had this issue in other places... not sure if there are chomping options with jade
06:35 < timoxley> zivester hm, tried it on one line?
06:36 < timoxley> zivester this looks kinda related https://github.com/visionmedia/jade/issues/619
06:38 < zivester> title block title seems to work... didn't even know that was legal... thought that would output <title>block title</title>
06:40 < zivester> o, no it doesn't
06:40 < samholmes> What part of code should I post?
06:44 < zivester> meh... I'll just do append title\r title\r My Title ... and just have 'block title' at the beginning of my head
07:04 < OTBS4Life> Anyone familiar with the innards of Node.js' net package?  https://github.com/joyent/node/issues/4736
07:41 < mappum> does socket.io do anything to optimize the data it sends (compression, or use messagepack or anything)?
08:00 < pats_Toms> morning everyone
08:01 < pats_Toms> is it good idea to make auth for my api with passport?
08:15 < chilts> pats_Toms: I've used passport a lot and I really like it
08:15 < chilts> (not the username/password strategy, but many of the OpenID and OAuth strategies)
08:17 < pats_Toms> chilts, but I am trying to make api with post and delete. I need some security for them.
08:18 < pats_Toms> chilts, really don't know if username/password is the best idea
08:18 < chilts> that's exactly what you use passport for, to do authentication, then it's up to your app to do authorisation
08:18 < chilts> yeah, user/pass is fine
08:18 < chilts> or use Twitter/Facebook/whatever auth too
08:39 < geNAZt> why does the http module break if i use hostnames instead of localhosts in my tests ?
08:39 < geNAZt> Testcase with Localhost Benchmark: https://gist.github.com/geNAZt/4744601
08:40 < geNAZt> Testcase with Hostname Benchmark: https://gist.github.com/geNAZt/4744602
08:42 < geNAZt> The first result: http://fabs-nas.dyndns.org/2-vhosts-core.js.svg
08:42 < geNAZt> The second one: http://fabs-nas.dyndns.org/2-vhosts-hostname-core.js.svg
08:42 < geNAZt> And i have no idea why
08:49 < asdf12> dns hosting is a sneaky business
08:49 < geNAZt> yeah but i shouldnt fail like this
08:49 < asdf12> once you start using it, they know people will be forever to lazy to switch
08:49 < onr> route 53 or dyn
08:49 < asdf12> update their domain ns records
08:50 < geNAZt> its my own record
08:50 < geNAZt> in my host file
08:50 < geNAZt> well not mine :D
08:50 < geNAZt> its inside the router so it will step one step outside in the network
08:51 < asdf12> oh i wasnt talking about your thing, i was just browsing for dns host
08:51 < geNAZt> -_-
08:51 < purr> geNAZt: ಠ_ಠ is an IRC client/IRC client framework.
08:51 < asdf12> and then i realized i would have to update all the ns records for my domain
08:52 < onr> npm install ಠ_ಠ
08:52 < geNAZt> purr is not node based :D
08:52 < onr> tar -zxvf  ಠ_ಠ.tar.gz
08:56 < geNAZt> noone has an idea why my code is failing ?
08:56 < asdf12> can i be honest
08:56 < asdf12> i didnt look at it
08:57 < asdf12> it required too much effort to
08:57 < geNAZt> lol
09:05 < pats_Toms> passport works fine, thankts chilts about info
09:05 < pats_Toms> *thanks
09:21 -!- mode/#Node.js [+o isaacbw] by ChanServ
09:27 <@Nexxy> \o/
09:37 < onr> i heard about passport yesterday, i love those quick and dirty solutions
09:49 < Kosch___> jan____: yt?
10:01 < aandy> onr: it's actually quite nice :)
10:01 < aandy> good mix of flexibility, self control and easy/quick
10:39 < Sven_vB> i'd like to find subdirectories. do i have to, after fs.readdir()ing the current dir, fs.stat() all files and collect their directoriness?
10:41 < geNAZt> Sven_vB: yes
10:41 < Sven_vB> does this approach waste resources, as in did readdir() already stat() all the files?
10:43 < geNAZt> why should readdir stat files ?
10:46 < Sven_vB> i don't say it should. i'm just used to pythons readdir equivalent delivering subdirs and files in separate arrays
10:46 < Sven_vB> so i thought that distinction might be the default
10:49 < geNAZt> no
10:49 < geNAZt> readdir doesnt stat files
11:18 < booyaa> is there a way to get the mdc javascript reference available off line?>
11:18 < booyaa> actually might be better to ask on their irc channel if they have one
11:19 < aho> irc.mozilla.org
11:20 < booyaa> danke
11:21 < sebmck> booyaa: you can setup a local dochub.io server - https://github.com/rgarcia/dochub
11:21 < booyaa> oo
11:23 < booyaa> dude that's perfect thank you very much
11:35 < Kosch___> jan____: ping
11:42 < Sven_vB> is there a special reason why fs.readdir is all lowercase and fs.readFile is in java case?
11:43 < geNAZt> cause its not java case :D
11:43 < geNAZt> it is camelCase
11:43 < geNAZt> and the other is snakecase
11:44 < Sven_vB> i learned CamelCase was CamelCase
11:44 < geNAZt> but i think they named it like the c api function they are responding to
11:44 < Industrial> geNAZt, that's not really an explanation :S read and dir are two words, so I would expect readDir aswell.
11:44 < Industrial> ah.
11:44 < geNAZt> Sven_vB: that would be a Construtor function :D
11:45 < ashnur> stupid conventions anyway
11:45 <@Nexxy> Sven_vB, Industrial probably because it is just a binding to the readdir command?
11:45 < geNAZt> which break consitency
11:45 < geNAZt> but wayne :D
11:46 <@Nexxy> wayne? lol
11:47 < geNAZt> if you make it binding to the c api fs.readdir should behave like fs.readdirSync
11:47 < geNAZt> and the current fs.readdir should named like fs.readdirAsync
11:47 <@Nexxy> lolwat
11:47 < geNAZt> ofc cause the normal c api blocks on reading a file
11:48 <@Nexxy> which is what libuv is taking care of
11:48 < geNAZt> so if fs.readdir is a binding to that c api i would see it to block
11:48 < geNAZt> which it doesnt
11:48 <@Nexxy> that's because it uses a worker thread
11:48 <@Nexxy> lol
11:48 < geNAZt> fs.readdirSync does block
11:48 < geNAZt> oO
11:48 <@Nexxy> hence the Sync at the end ;o
11:48 < Industrial> Besides buster.js, is there a tool I can use to replace jsTestDriver? buster.js seems fickly and I'm having all sort of troubles with it (it has a beta sticker but hey..) and jsTestDriver keeps breaking too if we pummel it with multiple clients.
11:48 < geNAZt> fs.readdirSync => c api readdir
11:49 < Industrial> I dont think you should see it as a binding, rather just provide a Node.JS API. nodejs users shouldnt care about the C side, so readDir would be more consistent API wise, imho.
11:50 < geNAZt> if you see it from that point readDir and reaDirSync would make more sense yes
11:50 < geNAZt> readDirSync*
11:51 <@Nexxy> so I guess we should switch to lStat too
11:51 < geNAZt> but everybody can name their functions like they want to :D
11:51 <@Nexxy> and FCHMod
11:51 <@Nexxy> lol
11:51 < geNAZt> no
11:51 <@Nexxy> better use symLink too
11:51 < geNAZt> if you write it out yes
11:52 < geNAZt> if you use the shortened versions i would do it snakecase
11:52 <@Nexxy> well now I'm confused
11:52 < Industrial> \o/
11:52 < geNAZt> symbolicLink: ok
11:52 <@Nexxy> at any rate; it seems consistent to me
11:52 < geNAZt> symLink: not ok
11:52 <@Nexxy> then readDir isn't ok either
11:52 <@Nexxy> glad we agree
11:53 < Industrial> fine, readDirectory :P
11:53 <@Nexxy> feel free to pull request!
11:53 < geNAZt> and changeFileMode
11:53 < onr> how to tell client disconnects using sockjs?
11:53 < geNAZt> :D
11:53 <@Nexxy> onr, sock.onclose
11:54 <@Nexxy> but if you use shoe it's a lot nicer
11:54 <@Nexxy> onr, https://github.com/substack/shoe
11:54 < onr> Nexxy: i couldn't get that event fired
11:55 < Industrial> What do you guys use for browser testing + code coverage ?
11:55 < substack> Industrial: check this out http://ci.testling.com/
11:56 < substack> example: http://ci.testling.com/substack/dnode
11:56 < substack> i e flipping six oh yess
11:56 < onr> substack: ah you're here. did you implement some sort of heartbeat for sockjs in shoe?
11:56 < substack> onr: nope
11:56 < Industrial> substack, can I run my own test server with that?
11:56 <@Nexxy> substack, congratulations
11:57 < substack> onr: it's just a very minimal wrapper to make it look like a stream
11:57 < substack> Industrial: what kind of test server?
11:57 < Industrial> like a jsTestDriver server
11:57 < substack> I don't know what that is.
11:57 < substack> testling-ci just scrapes console.log() output
11:58 < substack> you can just browserify tests/*.js > bundle.js; echo '<script src="bundle.js"></script>' > index.html
11:58 < Industrial> its a server I can hook browsers up to, and test local code on to
11:58 < substack> then open index.js in a browser and look at the debugger console output
11:59 < Industrial> I'll take a look :)
11:59 < substack> I just use node for local tests or use browserify and open my tests in a browser
11:59 < substack> I'll have a better version soon for local tests
12:00 < substack> and node-style commonj-esque modules get special treatment with the "files" field :D
12:01 < substack> Industrial: and here is an even tinier repo you can look at for a simpler example https://github.com/substack/defined
12:01 < substack> I mostly use tape for my tests but you can use anything that writes TAP with console.log()
12:02 < substack> and there's a special thing if you use mocha because people like mocha for some reason
12:03 < Industrial> I'm trying to replace jsTestDriver at work. We have a vm with some browsers open, that are hooked up to the jsTestDriver server, so I (and the rest of the team) can test local code remotely on those browsers in that VM. It's also integrated into jenkins and JIRA.
12:04 < onr> substack: do you know a module that provides socket.io-esque features for sockjs?
12:04 < geNAZt> onr: socket.io
12:04 < geNAZt> :D
12:06 < substack> onr: which features?
12:06 < substack> an event emitter api?
12:06 < substack> so the cool thing is
12:06 < substack> all you need to find is a module that can serialize event emitters across a stream
12:07 < substack> then you can pipe that through shoe
12:07 < substack> that's what makes streams so great
12:07 < substack> onr: https://github.com/substack/stream-handbook#roll-your-own-socketio
12:09 < onr> substack: that's exactly what i need :)
12:25 <@isaacbw> guten morgen
12:27 < emilsedgh> how can i find out what is blocking my code?
12:28 <@isaacbw> look through your code for something that blocks
12:28 <@isaacbw> or use the debugger
12:28 < emilsedgh> i did, found nothing
12:28 < emilsedgh> actually, never made any blocking call
12:29 < emilsedgh> im using SerialPort module to read/write on GSM modems using node. everything seems to be fine, except that when i attach several modems, things get very slow
12:29 <@isaacbw> it could be a loop
12:29 <@isaacbw> oh
12:29 <@isaacbw> do you mean you're looking for a bottleneck?
12:30 < emilsedgh> maybe i was mistaked, it seems that nothing is 'blocking'. but something is working quite slowly.
12:31 < emilsedgh> not really. cpu usage is quite low and there's no IO, except for writing on GSM modems
12:31 < emilsedgh> but it gets slow before writing to modems
12:33 < emilsedgh> i think i need to understand more about my issue
12:33 <@isaacbw> it sounds like an os/driver/hardware issue
12:33 <@isaacbw> unless you're doing something crazy before writing
12:39 < tprice> whats my username
12:41 < onr> tprice: tprice 
12:41 < onr> testing an IRC client i guess
12:47 < jasonroyle> hi
12:48 <@isaacbw> ahoy
12:49 < tprice> onr yeah thanks
12:50 < mscdex> node.js rules!
12:50 < substack> fact
12:50 <@isaacbw> woo node.js
12:50 < mscdex> !
12:54 < TimReynolds> Hey anyone here use mongoose that could help with this, http://stackoverflow.com/questions/14788329/mongoose-defaulting-required-values-in-pre-validate-hook
12:54 < jasonroyle> Reading Smashing Node.js (half way through) any other node books out there you recommend?
12:55 <@isaacbw> not really jasonroyle 
12:55 <@isaacbw> the best thing you can do is just use node
12:56 <@isaacbw> maybe read through the source a bit, follow the ecosystem 
12:56 <@isaacbw> https://npmjs.org/browse/depended
12:57 <@isaacbw> also, be cool and use promises
12:57  * mscdex shakes a fist at promises
12:58 < jasonroyle> promises?
12:58 <@isaacbw> mm, nevermind. That was a bit of a joke
12:58 <@isaacbw> I really do like promises but I wouldn't recommend them until you spend some time in callback hell
12:59 <@isaacbw> https://gist.github.com/domenic/3889970
12:59 < boogyman> haha
12:59 <@isaacbw> and most people here seem to be happy without them
13:00 <@isaacbw> can anyone recommend a git script for emacs
13:00 < jasonroyle> Sorry, node newbie
13:06 -!- mode/#Node.js [+o isaacbw] by ChanServ
13:10 < Jamiltz> Hey all. How do I install a node package from the raw code I downloaded from github? The npm over overload is broken https://github.com/bmeck/node-overload.
13:11 < Jamiltz> The make command built the package successfully but now I need to install it and I don't know how..
13:13 <@isaacbw> Jamiltz, it needs to be in the node_modules directory of your project
13:13 <@isaacbw> http://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders
13:14 < mscdex> Jamiltz: you can install from tarballs (e.g. from github) directly
13:14 < mscdex> with npm
13:15 < Jamiltz> isaacbw mscdex ok thanks! I was wondering how to install it globally, similarly to "-g" when installing via npm
13:15 <@isaacbw> try to avoid installing globally unless it's a command line utility
13:16 < mscdex> Jamiltz: it looks like this guy fixed it, so you can probably `npm install https://github.com/vguerra/node-overload/tarball/master`
13:16 < Jamiltz> isaabw ok. Is there a specific reason why I should avoid it?
13:17 < Jamiltz> mscdex Thanks!
13:17 < mscdex> although that project really needs to be gypified
13:18 <@isaacbw> npm lets you manage dependencies by version which may vary between projects on your sytem
13:18 <@isaacbw> installing and using global packages can mean more work down the road
13:19 < Jamiltz> isaacbw Yeah I know what you mean now
13:19 < nathan7> mscdex: npm does 'user/repo'
13:20 < nathan7> mscdex: (that uses git these days, it caches efficiently)
13:20 < mscdex> nathan7: i'm old fashioned
13:20 < nathan7> mscdex: for like one version that did tarballs because our caching sucked (that was my code)
13:20 < nathan7> mscdex: but then someone fixed caching [=
13:37 <@isaacbw> gah, github is down
13:42 < SomeoneWeird> yerp
13:48 < Iszak> It's good thing you don't use it at work.
13:49 < SomeoneWeird> "10 minutes" my ass
13:50 < Iszak> It's quite surprising how many issues Github has
13:50 < SomeoneWeird> they're pretty massive
13:50 < Iszak> Yeah, but surely how can you constantly have issues on a day-to-day basis?
13:51 < Iszak> Surely if an issue arises, you put safe guards in place to prevent it, so why do they continue to happen? unless they're all unique issues.
13:51 < SomeoneWeird> what issues are you talking about ?
13:51 < Iszak> To be honest, I don't notice them (probably because I don't use it daily) but looking at their statuses page they have quite a lot. https://status.github.com/messages
13:52 < SomeoneWeird> ah, yeah
13:52 <@isaacbw> they should really offer a cached view so we can get at docs
13:52 < SomeoneWeird> npmjs caches docs, iirc
13:52 < Iszak> isaacbw google does that :P
13:52 < SomeoneWeird> for npm modules
13:53 <@isaacbw> googlooogle
14:17 <@isaacbw> is it safe to use let in browser apps yet?
14:17 <@isaacbw> assuming I don't care about ie users?
14:18 < sebmck> no
14:18 <@isaacbw> :(
14:18 < boogyman> you should never care about ie users, until ie cares about their own users 
14:18 < Chris-tina> Isaacbw, it  you use a language that compiles to es5, sure
14:19 < sebmck> let isn't even in stable chrome
14:21 < lpin> I'm working with a JSON API, i save the chuncked data in a buffer and parse the result on end. Does it make sense to use a streaming parser, given that the result is relatively small (100 KB at max)?
14:22 <@isaacbw> probably not if you know it has a finite size
14:22 < fwg> lpin: depends if you need the parts faster than the whole thing will arrive
14:23 < lpin> using https://github.com/dominictarr/JSONStream or https://github.com/dscape/clarinet is a bit too much for 100 KB
14:23 < fwg> parsing is definitely faster non-streamed
14:23 < tleen> any html5 wonks want to ponder something with me?
14:23  * pachet has been known to ponder
14:23 <@isaacbw> what's up
14:23 <@isaacbw> wonkwonk
14:24 < tleen> list of external links and contact information and copyright info, all visually in a "fat footer"
14:24 < boogyman> don't double post
14:24 < lpin> fwg yeah would be better to get parts before the whole thing arrive, but the gain has no big impact
14:24 < tleen> now, should those links and contact be in an aside and only copyright in the true footer
14:24 < tleen> or everything in the footer element?
14:24 < tleen> im leaning to the former
14:24 < boogyman> #html5 is the appropriate channel, be patient and wait for your response
14:25 < tleen> html5 is deader than dead
14:25 <@isaacbw> try stack exchange
14:25 <@isaacbw> overflow
14:25 <@isaacbw> whatever it is
14:26 < dscape> lpin: why are you considering a streaming json parser?
14:26 < boogyman> not receiving an answer right away does not make the channel dead
14:26 < boogyman> and you could also try #html but a channel about node is not a channel about the semantics of HTML markup
14:27 < tleen> ok got it
14:28 < dscape> JSON.parse takes 0.3 seconds to parse about 30mb of json
14:28 < dscape> since i think you are unlikely to parse this is your apps more than once at start time
14:28 <@isaacbw> it really is better to use JSON.parse in one go if you don't need it streamed
14:28 < dscape> y
14:28 < lpin> hey dscape, i have to load some data in db, that data comes from a JSON api
14:28 < dscape> lpin: i wrote this thing a while back
14:29 < dscape> when i wrote clarinet
14:29 < dscape> http://nunojob.com/clarinet---sax-based-evented-streaming-json-parser-in-javascript
14:29 < dscape> its really no worth the trouble
14:29 < dscape> unless you have a use case like an unbound json stream
14:29 < dscape> (e.g. _changes feed)
14:29 < lpin> i was considering loading stuff in the db as soon as they came trough the api
14:29 <@isaacbw> oh, was that 'y' a yea
14:29 < substack> lpin: do you want to do some live computation as json chunks arrive?
14:29 < substack> or do you need the whole json body to do anything useful
14:30 < substack> it's much more about memory usage than it is about parsing speed
14:30 < mscdex> spew(JSON.stringinfy(chunks));
14:30 < dscape> lpin: yeah, example: poptip uses clarinet
14:30 < dscape> no wonder, they are consuming the twitter api
14:31 < dscape> twitter stream api
14:31 < dscape> and want to give input as things happen
14:31 < dscape> i actually always wonder how i never got a pull request from them. they must be keeping the fixes for themselves :P
14:31 <@isaacbw> hehe
14:32 <@isaacbw> GNUers would be offended by that
14:32 < dscape> indeed. isaacbw today i saw the most ridiculous gnuer ever
14:32 < dscape> in issues for travis
14:32 < substack> vendoring patches are mostly just a liability
14:33 < substack> it means you can't merge bugfixes from the source repo as easily
14:33 < lpin> substack the whole JSON object is an array with more objects as elements, i need each elements as JSON
14:34 < substack> lpin: what are you *doing* with the json?
14:34 < fg3> trying to use synchronize.js  to enable sync style code  -- help --> http://goo.gl/RPSCX
14:34 < substack> lpin: can you gist some example json data?
14:34 < lpin> ofc
14:34 < lpin> sec
14:35 < lpin> anyway i was also wondering how streaming parser works ;)
14:43 < lpin> substack thank you
14:45 < lpin> dscape parsing twitter streaming api is easy
14:45 < lpin> each tweet is delimited by \r
14:45 < dscape> lpin: i dont have a notion of delimeters in clarinet
14:46 < dscape> if stacklevel === 0 then its done
14:46 < dscape> if not you f***ed your json
14:46 < dscape> when its done it gets put in start again
14:46 < dscape> and goes back to emitting
14:48 < lpin> yeah, was just saying that a proper stream parser is not needed when dealing with twitter streaming api
14:49 < lpin> https://dev.twitter.com/docs/streaming-apis/processing#Parsing_responses
14:51 < lpin> anyway thank you
15:06 <@isaacbw> man github, get your shit together
15:08 < aandy> down?
15:08 < DarkArgon> its up
15:08 <@isaacbw> it was down for a while. Now it just refuses to load code trees
15:08 <@isaacbw> the ones I want, at least
15:08 < DarkArgon> link
15:08 <@isaacbw> https://github.com/kriskowal/q
15:09 < DarkArgon> this tree took too long to generate. yep
15:09 < aandy> too long.. the response is done in 350ms, must be cached msg :D
15:13 <@isaacbw> I just did some crazy cool shit with angular
15:15 < fg3> isaacbw: lets see it 
15:15 <@isaacbw> it's top secret
15:15 < fg3> wtf!
15:16 < aandy> oh yeah, well... that's just like... your opinion, man
15:16 < Kakera> is V8/Node.js smart enough to garbage collect memory taken up by event handlers for a socket that's closed and has no references to it?
15:16 <@isaacbw> it's not worth sharing right now, and it's hard to describe
15:17 <@isaacbw> but basically it's a service for plugging controller+scopes into the app depending on the content type selected
15:17 <@isaacbw> and the controller/scope is shared across multiple elements which may not have a common parent
15:17 <@isaacbw> and templates
15:18 < Kakera> somehow, it seems non-trivial to detect that there are no paths which could connect the socket again
15:18 < fg3> isaacbw: rightO sounds complicated
15:18 <@isaacbw> fg3, it was a fun sort of complicated
15:18 < fg3> when it works it's fun 
15:19 <@isaacbw> heh
15:19 <@Nexxy> aandy abides
15:19 <@isaacbw> it wasn't even that complicated in the end. It just required a lot of digging in docs and source to figure out how to play nicely with angular
15:32 < ashnur> do you know any production ready cms' for Node.js?
15:37 < wookiehangover> ashnur: wordpress
15:37 < wookiehangover> j/k
15:37 < wookiehangover> but the answer is "probably not"
15:37 < tprice> wookiehangover> shame!
15:38 < wookiehangover> it has a json api plugin ¯\_(ツ)_/¯
15:39 < wookiehangover> so put node in front of it
15:39 < wookiehangover> BOOM problem solved
15:41 < ashnur> wookiehangover: i don't follow. in front of what should I put node?
15:41 < aandy> wordpress
15:41 < ashnur> wordpress json api?
15:41 < aandy> http://wordpress.org/extend/plugins/json-api/
15:41 < pachet> no bueno
15:41 < ashnur> i don't really see much gain in that. i've been trying to hook up wordpress as a backend to docpad
15:42 < ashnur> but there are too many issues
15:42 < ashnur> with both wp and docpad
15:44 < ashnur> but I don't get it why there isn't one. I mean node.js is not that new anymore...
15:45 < ashnur> seems interesting
15:45 < ashnur> eithere there is no one who wants it that much to build it, or it is too hard.
15:46 < wookiehangover> no one wants to build a new cms
15:46 < ashnur> i see a lot of failed attempts on the web, so my bet is on the latter
15:46 < wookiehangover> because it's all targeted to the lowest common denominator
15:46 < ashnur> wookiehangover: curiously, there are many started but not finished cms' for node.js
15:46 < substack> what do you need a cms for?
15:47 < nkohari> a CMS is in a class of problems where it's very hard to make something that's customizable enough to make people happy, without being cumbersome to customize
15:47 < substack> what problem are you trying to solve with your cms
15:47 < wookiehangover> if you can't do it with 9000 different modules, substack is uninterested
15:47 < ashnur> substack: one of my friends would like to have a basic content publishing, magazine style webpage. I might use php, but I wish I could use node.js 
15:47 < nkohari> you should use wordpress :)
15:47 < wookiehangover> ashnur: just use a wordpress.org site and call it a day
15:48 <@isaacbw> you could use node.js if you wanted
15:48 < nkohari> i mean if you want to build it to learn, that's awesome
15:48 <@isaacbw> it's just not a very interesting thing to do for hackers
15:48 < substack> yeah probs should just use wordpress or blogger or tumblr or whatever the kids are using these days
15:48 < wookiehangover> substack: can you build a voxel.js cms module?
15:48 < ashnur> substack: yeah. but then I wouldn't use node.js.
15:48 < aandy> or octopress ftw
15:48 < ashnur> you people do not get it how much I hate php.
15:48 < substack> wookiehangover: nah I would make it git-based
15:48 < substack> like https://github.com/substack/glog
15:48 < wookiehangover> it will be like the jurrasic park file system
15:48 < aandy> write a md editor in node and plug octopress in. voila
15:49 < aandy> easy for almost any employee to use
15:49 < wookiehangover> this is unix, I KNOW THIS
15:49 < ashnur> i've been a php scripter for 8 years. I am fed up with it. wordpress is a pile of stinking shit.
15:49 < substack> you don't even need a browser editor
15:49 < substack> just use git
15:49 < substack> and edit files on your local disk
15:49 <@isaacbw> that was a real file system
15:49 < aandy> just use git.. well, the point of md was that it could be used by non-techs :p
15:49 <@isaacbw> explorer
15:50 < aandy> not all receptionists who can use git
15:50 < substack> aandy: who cares about those folks
15:50 < aandy> hehe
15:50 <@isaacbw> git is the shit
15:50 < substack> they can just go get a wordpress or a tumblr
15:50 < nkohari> did you know that the ui in jurassic park was actually a real file manager
15:50 < nkohari> i can't remember the name of it now
15:50 < substack> also https://github.com/substack/straggler
15:50 < aandy> jurassic park was real, not a movie
15:51 < nkohari> fsn: http://en.wikipedia.org/wiki/Fsn
15:51 < substack> got the command-line stuff finished tonight yay
15:51 <@isaacbw> it was amazing what they did CGI-wisr
15:51 <@isaacbw> e
15:51 < substack> streams of text, the universal interface
15:56 < aandy> speaking of which
15:56 < aandy> # traceroute 216.81.59.173
15:56 < aandy> lol
15:57 <@isaacbw> wut
15:57 <@isaacbw> why
15:57 <@isaacbw> wwhwhhhyyyy
15:57 < aandy> boredom evidently
15:58 <@isaacbw> I actually love that so much
15:59 <@isaacbw> how did you find it
16:04 < amurdaca> hey guys
16:04 < SomeoneWeird> omg
16:04 < SomeoneWeird> omg
16:04 < SomeoneWeird> omg
16:05 < SomeoneWeird> aandy++
16:05 < amurdaca> can we use nginx resverse proxy with node/websockets?
16:05 < amurdaca> i have found this ->
16:05 < amurdaca> http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_http_version
16:05 < amurdaca> so it's possible to use HTTP 1.1
16:05 < amurdaca> in nginx reverse proxy
16:07 < amurdaca> any hints?
16:07 < aandy> isaacbw: was posted on hacker news news.ycombinator.com
16:08 < SomeoneWeird> http://stackoverflow.com/questions/12102110/nginx-to-reverse-proxy-websockets-and-enable-ssl-wss
16:08 < SomeoneWeird> http://www.letseehere.com/reverse-proxy-web-sockets
16:08 < SomeoneWeird> not hard, amurdaca 
16:08 < amurdaca> i mean i hear many people complaining about using nginx to reverse proxy node..
16:08 < aandy> for websoeckets i'd use haproxy though
16:09 < aandy> sockets*
16:09 < amurdaca> so i thought there was some problems
16:09 < amurdaca> with nginx itself
16:09 < nkohari> it used to be impossible before they introduced proxy_pass with http/1.1
16:09 < aandy> well, 1.1 and 1.0 is basically the problem
16:09 < aandy> nkohari: when was this (or as of which)?
16:10 < nkohari> i don't know, whenever they released the version of nginx that added support for it :>
16:10 < amurdaca>  	proxy_http_version i have this in my conf nginx
16:10 < aandy> 1.1.4 apparently
16:10 < aandy> yes
16:11 < aandy> set that to 1.1. cool, must try this out 
16:11 < amurdaca> i also let nginx do the ssl layer and proxy to http://node
16:11 < amurdaca> everything on the same machine
16:11 < amurdaca> is there some problem with my setup in using websockets?
16:11 < Iszak> When's node.js 1.0.x going to be released?
16:12 < nkohari> 0.10 is coming out soon
16:13 < nkohari> but if you mean a "stable" version, it's been stable for quite a while
16:13 < Iszak> ash, so no 1.0.x? only 0.10.x?
16:13 < amurdaca> oh from the link SomeoneWeird posted the problem is SSL on nginx+node websocket am i right?
16:13 < Iszak> I really need to disable this shitty autocomplete.
16:15 < nkohari> i don't know what the planned versioning scheme is
16:18 < fwg> my bet is on 0.11 being the next unstable
16:18 < Iszak> go figure, odd are unstable.
16:18 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:18 < DarkArgon> amurdaca, nginx does not support websockets
16:18 < cloudbender> good morning.  It's a great day for node.
16:19 < cloudbender> er, noding I mean
16:19 < nkohari> every day is a great day for node
16:21 < cloudbender> using strict; ready to rock the world in a compliant fashion.
16:22 < nkohari> lol … shit, i just traceroute'd 216.81.59.173
16:22 < nkohari> good stuff
16:42 < mansoor-s> Why don't we have more meta programming in the node community? 
16:43 < min|dvir|us> mansoor-s: what do you mean, meta programming?
16:43 < min|dvir|us> You can hack on Node.js or V8 if you want.
16:43 < min|dvir|us> Introspection of JS is limited by the ECMA standard.
16:44 < Kosch> maybe he's looking for smth like spring for java
16:45 < shawn__> mansoor-s: do you mean aspect oriented features?
16:45 < amurdaca> is it possible to use nginx for serving static node website files + haproxy for websockets?
16:48 < nathan7> amurdaca: Yeah, it's a fairly common setup
16:51 < JohnnySS> is this true that node.js is a low level framework suitable only for network real time applications ?
16:51 < DarkArgon> its suitable for a lot of stuff
16:51 < JohnnySS> i watched that in code school thats why i am asking!
16:52 < min|dvir|us> JohnnySS: Node.js is pretty much like C or Python.
16:52 < min|dvir|us> You can do anything in Node.js that you can in C or Python.
16:52 < DarkArgon> but its very good at real time network stuff
16:52 < amurdaca> nathan7 but i want to serve my websockets on port 80 
16:53 < JohnnySS> code school says that it can never replace django or rails and such
16:53 < nathan7> amurdaca: oh, I missed the haproxy part
16:53 < JohnnySS> and is only for advanced programmers
16:53 < min|dvir|us> JohnnySS: that's a load of shit.
16:53 < JohnnySS> and it is very low level
16:53 < min|dvir|us> It's very high level.
16:53 < min|dvir|us> From what you're saying, code school is completely illegitimate.
16:53 < JohnnySS> i am interested in starting learning it thats why i am asking
16:53 < min|dvir|us> JohnnySS: it's not hard at all, if you know JS.
16:54 < Kosch> then start with it and you'll find out where its good and where not.
16:54 < JohnnySS> unfortunately i am not good at JS either
16:54 < DarkArgon> how old is that statement from codingschool?
16:54 < amurdaca> nathan7 yup i just have nginx+node backend now i'm looking at websockets support + haproxy but i already run an express app so i thought i could integrate
16:54 < JohnnySS> it exists right now in code school if you log in and watch the video on node.js !!!
16:55 < JohnnySS> the instructor is a guy named pollack
16:55 < nathan7> If you believe in 'frameworks', yes, node.js is low-level
16:55 < Kosch> anyway its the question why it should replace anything...
16:55 < min|dvir|us> Kosch: because it's better.
16:55 < nathan7> A framework is a mould you build an application in
16:56 < nathan7> If your application won't fit in the mould, grab a hammer and make it fit.
16:56 < JohnnySS> and the guy he gave me the impression that it would be a waste of time for me to start with
16:56 < nathan7> node.js is a platform, it provides everything you need to build things
16:56 < Kosch> min|dvir|us: this sentence I heared ~ 15 years ago from some php developers about perl... and afaik perl still exists ;-)
16:56 < nathan7> It's like saying Python's standard library is low-level
16:56 < min|dvir|us> Kosch: nobody thinks PHP is better than anything.
16:57 < nathan7> (well, even those are more high-level than they should be)
16:57  * nathan7 hands min|dvir|us ColdFusion
16:57 < JohnnySS> anyways can you point me out my first resourse(steps) on learning node.js ?
16:57 < min|dvir|us> JohnnySS: http://www.youtube.com/watch?v=jo_B4LTHi3I
16:58 < JohnnySS> thanks i am watching it now!
16:59 < mansoor-s> min|dvir|us, shawn__, sorry I was afk. I mean like spring notations
16:59 < DarkArgon> JohnnySS, http://stackoverflow.com/questions/2353818/how-do-i-get-started-with-node-js
16:59 < JohnnySS> eloquent javascript is a good resource i suppose as far as it concerns JS right ?
16:59 < mansoor-s> i'm not saying its a good thing or a bad thing, just wondeirng why nobody uses them
17:00 < DarkArgon> lol, there even is a podcast
17:01 < JohnnySS> i have programming experience in another language/framework
17:01 < JohnnySS> i just don't know JS and .node ok ?
17:01 < brycebaril> What other language?
17:01 < JohnnySS> .NET and c#
17:02 < DarkArgon> ahh .net .. i don't like it
17:02 < JohnnySS> yeah me too thats why now i am working on a mac!!!
17:02 < brycebaril> Did you use any of the async stuff in C#?
17:02 < JohnnySS> nope 
17:03 < JohnnySS> so i can't judge if you are asking me
17:03 < brycebaril> Well, that will be the first thing to wrap your head around, that all IO is async in node, other than that it should be pretty straightforward to pick up
17:03 < JohnnySS> believe it or not the more i am afraid here is how do i learn plain javascript !!!
17:04 < JohnnySS> and i am gonna do it through node of course
17:04 < JohnnySS> not first the one and then the other
17:04 < JohnnySS> cause i am gonna get bored
17:04 < jrajav> !eloquent
17:04 < JohnnySS> what do you think ?
17:04 < jrajav> Oh, wrong chan
17:04 < jrajav> :P
17:04 < jrajav> http://eloquentjavascript.net/contents.html
17:04 < jrajav> JohnnySS: ^
17:04 <@isaacbw> oy, I just moved my first batch of beer ever to a secondary fermenter and all I could think of was drinking too much and vomiting in costa rica
17:05 <@isaacbw> i.e. it smelled like beer vomit
17:05 < jrajav> isaacbw: That's appetizing
17:05 < JohnnySS> yes i am gonna use eloquent
17:05 < JohnnySS> is this a real good resource though ?
17:05 < jrajav> JohnnySS: Yes it is
17:05 < JohnnySS> ok so we are cool with that
17:05 < jrajav> JohnnySS: I also recommend the book Javascript: The Good Parts, and the annotated ES5 spec
17:05 < JohnnySS> i m gonna do it in parallel
17:06 <@isaacbw> codecademy is apparently good too
17:06 < JohnnySS> look guys i only have 1 brain!
17:06 < JohnnySS> give 1 resource for javascript for starters
17:06 < DarkArgon> u should get a quad-brain
17:06 < jrajav> JohnnySS: And if you plan to use node, a real quick browse through the API would help, just so you know where to look when you need to solve a certain problem
17:06 < JohnnySS> ha ha h a
17:06 <@isaacbw> just try a few and stick with the one you like best
17:06 < jrajav> JohnnySS: Start with eloquent or codeacademy
17:07 < jrajav> JohnnySS: Go from there to whatever interests you
17:07 < dgupta> nodejs also has a single brain
17:07 < JohnnySS> ok i ll start with eloquent
17:07 < JohnnySS> speaking of API
17:07 <@isaacbw> try both and then decide
17:07 < DarkArgon> good point dgupta 
17:07 < JohnnySS> where is the home of javascript ?
17:07 <@isaacbw> mm
17:07 < JohnnySS> i mean where can i font its API ?
17:07 <@isaacbw> w3.org
17:07 <@isaacbw> mdn
17:07 <@isaacbw> not w3
17:08 <@isaacbw> don't think about w3
17:08 <@isaacbw> https://developer.mozilla.org/en-US/docs/JavaScript
17:08 < DarkArgon> http://w3fools.com/
17:08 < jrajav> DarkArgon: ...
17:08 <@isaacbw> w3 is unrelated to w3schools
17:08 < jrajav> That site applies to w3schools.com, not the actual w3
17:08 <@isaacbw> w3c
17:08 < jrajav> c
17:08 < jrajav> :P
17:09 <@isaacbw> ugh, now my hands smell like beer vomit
17:09 < DarkArgon> i never said something...
17:15 < cloudbender> This works with node.exe (win32), but exits out with the console error shown.
17:15 < cloudbender> https://gist.github.com/cloudbender/4746099
17:17 < cloudbender> brb
17:17 < amurdaca> any way to update node in windows?
17:19 <@isaacbw> how did you install it in the first place amurdaca 
17:26  * cloudbender is back
17:33 <@isaacbw> do you ever solve a problem that's been plaguing you for a while and then just can't do anything else for the rest of the day
17:33 < Kakera> I know that feel isaacbw 
17:34 < Kakera> I just play dota then
17:34 <@isaacbw> I would be much less productive if it didn't take windows 7 15 minutes to boot up
17:35 <@isaacbw> I dual boot, so it's either work time or play time
17:35 <@isaacbw> I pretty much waste time with dungeon crawl now
17:35 <@isaacbw> :( I'm such a nerd
17:35 < Kakera> until Valve ports more stuff to linux
17:35 < DarkArgon> css got ported recently
17:36 < shawn__> I'm glad Valve is making moves on linux
17:36 < medice> linux is a cold hearted mistress though
17:36 < shawn__> I had fun workin there years ago
17:37 < medice> ooh. ex-valveist
17:37 < Kakera> why did you leave shawn__?
17:37 < medice> is gabe as handsome and awesome as he is
17:37 < shawn__> Kakera: it was a long term contract and we were done :)
17:38 < Kakera> aww
17:38 <@isaacbw> shawn__, is it really as free and role-less as everyone things
17:38 < tuhoojabotti> isaacbw: Have you tried Legend of Grimrock?
17:38 < Kakera> you mean as Valve makes you think
17:38 <@isaacbw> tuhoojabotti, nope, but I remember it coming out and everyone loving it
17:38 <@isaacbw> *thinks
17:39 < shawn__> isaacbw: it was a very flat structure back when I was there (2004-2006) though the company has changed a lot since then I hear
17:39 <@isaacbw> mm
17:39 < tuhoojabotti> It was pretty fun, until I hit some spiders who killed me.
17:39 < Kakera> the HL2 days
17:39 <@isaacbw> they seem to have more business interests than they used to
17:40 < shawn__> Kakera: aye, I remember helping them beta test the xbox version of HL2 before release
17:40 < tuhoojabotti> isaacbw: I recommend LoG if you like that kind of games.
17:40 <@isaacbw> tuhoojabotti, I might try it at some point. I have a whole bunch of games sitting in my steam library unplayed though
17:40 < shawn__> Kakera:I worked mostly with the steam guys so getting to play games was novel
17:41 < medice> i didn't like grimrock so much with its high focus on puzzle solving and spotting small cracks at walls
17:41 < tuhoojabotti> isaacbw: Who doesn't?
17:41 <@isaacbw> those sales...
17:42 < shawn__> so I'm warming up to javascript after many years of C,C++, Java and C#
17:43 < medice> shawn__: do you like ducks
17:43 < cloudbender> shawn_ welcome to the club
17:43 <@isaacbw> I sometimes think I would like to be a duck
17:43 < medice> i personally feel that duck typing gives bad name to ducks
17:43 < shawn__> I think node is awesome, but don't think I'll use it for everything
17:44 < cloudbender> shawn_ when you learn more about it, you might be suprized
17:44 < Chris-tina> As you shouldn't :3
17:44 < shawn__> have any of you any experience with scala as a companion language to javascript?
17:44 < Chris-tina> You wouldn't write a bootloader in node
17:44 < shawn__> I see a lot of activity the last couple years with scala (as I have with node/js)
17:44 < tuhoojabotti> I would download a car
17:45 < shawn__> so I'm thinking scala + js would be a winning combo?
17:46 < Chris-tina> Why, shawn__?
17:47 < cloudbender> Could someone look at this for me ? It's wierd ...   https://gist.github.com/cloudbender/4746099
17:47 -!- mode/#Node.js [+o isaacbw] by ChanServ
17:47 < shawn__> Chris-tina: because scala brings a blend of C# and JS features together with all the library support already there for java
17:48 < shawn__> Chris-tina: I fear it will take many years for node to catch up to the many millions of lines of java out there, and javascript isn't really designed for large scale development 
17:49 < cloudbender> shawn__ that is a first impression, I assure you
17:49 < Chris-tina> The "javascript isn't designed for large apps" argument is moot. 
17:49 < Chris-tina> You can't maintain large apps in any 
17:50 < Chris-tina> Language
17:50 < tuhoojabotti> cloudbender: what node version
17:50 < cloudbender> node is going to change everything, and I come from many years in c,c++,c#,Delphi,Java,PHP
17:50 <@isaacbw> shawn__, javascript wasn't initially designed for it, but ecmascript is evolving pretty quickly
17:50 < Chris-tina> And node has a better platform/community/dependency management tools overall than java
17:50 <@isaacbw> javascript is a formidable language 
17:50 < shawn__> I'm not new to JS - been doing serverside JS in a product called NetSuite for a while now
17:50 < cloudbender> tuhoojabotti you mean for my gist problem ?
17:50 < tuhoojabotti> yeah
17:50 < Kakera> I know a lot of people who disregard node.js as a toy :(
17:51 < shawn__> isaacbw: yes, I'll give you that. js is improving quickly
17:51 < cloudbender> wait
17:51 < Chris-tina> Npm is huge, common js modules are one of the best module systems out there
17:51 < shawn__> Chris-tina: I think you may need to look closer at the java ecosystem :)
17:51 < Chris-tina> Perhaps not as good as NewSpeak one, but still one of the best
17:52 < tuhoojabotti> cloudbender: "process.nextTick happens at the end of the current tick, immediately after the current stack unwinds. If you are currently using recursive nextTick calls, use setImmediate instead."
17:52 < tuhoojabotti> that's a new change in 0.9
17:52 < Chris-tina> I'm a clojure dev :3
17:52 < JohnnySS> what is your preferred ide/editor for node ? 
17:52 < shawn__> for me the biggest draw of nodejs is the prospect of isomorphic development - i.e. I like the idea of using a single language from to back
17:52 <@isaacbw> emacs
17:52 < tuhoojabotti> JohnnySS: sublime
17:52 < Chris-tina> I dont do java, but I work with java libs
17:52 < shawn__> JohnnySS: WebStorm, hands down 
17:53 < Kakera> I like cloud9 because of features like this http://puu.sh/1ZPU0
17:53 <@isaacbw> java has pedigree, but it's obtuse and failed to evolve in many ways for the sake of backwards compatibility
17:53 < JohnnySS> web storm it is the same as phpstorm right ?
17:53 < DarkArgon> xD
17:53 < shawn__> johnkpaul: similar yes, but webstorm is aimed towards JS development, whereas php storm is well... php oriented
17:53 < DarkArgon> +1 for sublime
17:54 <@isaacbw> emacs or vim or you aren't writing software
17:54 < Kakera> I don't like webstorm because it complains about every single thing by default
17:54 < cloudbender> tuhoojabotti node.exe version 0.8.18.0 joyent
17:54 < shawn__> with emacs or vim you aren't writing software
17:54 < tuhoojabotti> ok
17:54 < shawn__> you're wrestling and editor
17:54 < aandy> shawn__: sure you are, just slower
17:54 < Kakera> I don't know this property? better underline it!!
17:54 < Chris-tina> I'm ready to abandon emacs if light table fulfills its promised features
17:54 < tuhoojabotti> cloudbender: That looks like a bug to me.
17:54 <@isaacbw> shawn__, perhaps when you start out
17:55 < JohnnySS> actually my goal is to write some software down the line
17:55 <@isaacbw> it really is one of those things that once you get it, you work much much faster
17:55 < shawn__> I started out over 20 years ago
17:55 <@isaacbw> I can't do vim
17:55 <@isaacbw> but emacs is my baby
17:55 < shawn__> yes, and some people still like cobol issaacbw :)
17:55 <@isaacbw> heh...
17:55 < Chris-tina> Emacs and vim are excellent editors. The former can also be a decent programmable ide
17:56 < cloudbender> tuhoojabotti I think so.  I am not recursing.  The error disappears as long as I do not pass a value with the callback
17:56 < shawn__> and some still say assembly is the only language that matters...
17:56 < tuhoojabotti> I like Netbeans/Eclipse with Java, but Sublime Text for js.
17:56 < Gabriel403> Surely we're all writing node code in visual studio
17:56 < cloudbender> I would assmble if 'they' would sell me an assembler.
17:57 < tuhoojabotti> cloudbender: Create an issue, but I don't see the use case for your code.
17:57 < JohnnySS> i am on a mac computer
17:57 < shawn__> Gabriel403: I don't code any JS in Visual Studio 2010
17:57 < shawn__> JohnnySS: switch to linux
17:57 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
17:57 < JohnnySS> i m not gonna switch to linux NO
17:57 < Kakera> webmatrix actually has pretty good support for node.js
17:57 < JohnnySS> i am happy with my mac
17:57 < JohnnySS> i know that Kakera 
17:58 < cloudbender> tuhoojabotti I sincerely require the functionality I am attempting.
17:58 < shawn__> I had a brand new macbook pro, 15" retina display and all the goodies.... and after a couple months gave it away in return for a real linux computer
17:58 < JohnnySS> but i don't want to develop in windows
17:58 < JohnnySS> i like my mac
17:58 < shawn__> I hadn't realized that OSX is really just unix with some Apple restrictions 
17:58 < Gabriel403> bsd
17:58 < tuhoojabotti> cloudbender: Try with 0.9.9 and see if it's fixed with the new implementation
17:58 < tuhoojabotti> 0.10 is here soon
17:58 < shawn__> Kakera: yes,, Visual Studio 2012 in general is a big improvement for JS development.. but I still think webstorm is light years ahead
17:59 < cloudbender> tuhoojabotti thank you very much.  Will comment that solution before I submit an issue.
17:59 < JohnnySS> and phpstorm is the whole web storm package plus the php support as far as i know
17:59 < JohnMcLear> hey
17:59 < shawn__> JohnnySS: Also, for javascript books, you should read JavaScript: The Definitive Guide, 6th Edition
18:00 < JohnnySS> i am between this and sublime i guess
18:00 < cloudbender> sublime rocks
18:00 < shawn__> I think sublime is a cool text editor
18:00 < shawn__> but an IDE it is not
18:00 < JohnnySS> but can you actually write a software in an editor ?? i don't think so
18:00 < DarkArgon> sublime has great plugins
18:00 < cloudbender> I write all my code (c#, Delphi, Prism) from the command line
18:01 < shawn__> JohnnySS: you certainly can, but a good IDE makes you more productive
18:01 < cloudbender> dll's, 32/64/ you name it.
18:01 < tuhoojabotti> JohnnySS: You can have all IDE features separately from the editor.
18:01 < JohnMcLear> FYI Etherpad got some love on the Linux Action show http://blog.etherpad.org/2013/02/05/etherpad-on-the-linux-action-show/
18:01 < Gabriel403> I love sublime but never bother with plugins, they never seem to help too much
18:01 < JohnMcLear> promotes NodeJS
18:01 < shawn__> tuhoojabotti: it's the separately part that's the problem :)
18:01 < Chris-tina> Please someone define to me what a good ide™ is
18:02 < shawn__> webstorm has built in suport for nodejs, for example
18:02 < tuhoojabotti> shawn__: It also allows for customisation of the workflow
18:02 < JohnMcLear> Also quick plug, the Etherpad team will be in SF in March 8th -> 15th or so
18:02 < JohnMcLear> We're organizing meet ups n stuff -- http://blog.etherpad.org/2013/02/07/etherpad-north-america-meet-up/
18:02 < JohnMcLear> End of plug.  Thanks and apologies for off topic spam :)
18:03 < shawn__> what the heck is an etherpad?
18:03 < shawn__> oh, onw I see
18:03 < amurdaca> http://www.jetbrains.com/phpstorm/webhelp/node-js-2.html
18:03 < Chris-tina> A collaborative editor, with a lite version in node
18:03 < shawn__> it doesn't have a linux download. for shame.
18:04 < Chris-tina> Npm install etherpad-lite
18:04 < Chris-tina> Probably
18:05 < Chris-tina> Or just clone the git repo and execute the main file with node
18:06 < shawn__> I'm a total convert to the google apps, but don't think I'm ready for 'cloud IDE'
18:07 < Chris-tina> Etherpad is definitely not one
18:07 < cloudbender> will see if 0.9.9 fixes this ...   https://gist.github.com/cloudbender/4746099
18:07 < DarkArgon> imo there is no good cloud ide
18:07 < DarkArgon> c9 is buggy as hell
18:08 < JohnMcLear> shawn__ what makes you think their isn't a linux download?
18:08 < JohnMcLear> -their +there
18:09 < JohnMcLear> http://etherpad.org/#download big ass Linux button :?
18:09 < tuhoojabotti> cloudbender: will see?
18:09 < JohnMcLear> and Chris-tina, we scrapped the "old/java" version completely so now our only version is in node, we're completely committed :)
18:10 < cloudbender> Trying to find node.exe 0.9.9 win32
18:10 < tuhoojabotti> cloudbender: http://nodejs.org/dist/v0.9.9/x64/node.exe
18:10 < tuhoojabotti> oh 32
18:10 < tuhoojabotti> why :u
18:10 < Gabriel403> DarkArgon: i betad c9, they screwed up my post beta freebie, tried it again recently and it was still as buggy as back in beta
18:11 < cloudbender> It's an old laptop
18:11 < tuhoojabotti> cloudbender: I can try it for you
18:11 < JohnnySS> who is using phpstorm or web storm in here ?
18:11 < cloudbender> ok
18:12 < Chris-tina> JohnMcLear, ah cool. The number comparisons on the repo were pretty impressive
18:12 < JohnMcLear> yea, funnily enough I just ripped them out today (in develop branch)
18:13 < DarkArgon> Gabriel403, koding might be an alternative soon
18:13 < DarkArgon> "soon"
18:15 < Gabriel403> DarkArgon: will give it a look
18:17 < Gabriel403> DarkArgon: whats it written in?
18:17 < DarkArgon> node
18:17 < DarkArgon> coffeescript i think
18:17 < tuhoojabotti> cloudbender: same error
18:17 < cloudbender> darn
18:19 < cloudbender> tuhoojabotti same error me also, different line number though
18:19 < cloudbender> but at least I have the newest version
18:20 < tuhoojabotti> well obviously
18:21 < cloudbender> tuhoojabotti Gabriel1403 says maybe version 0.9.9 isn't quite ready maybe
18:21 < tuhoojabotti> cloudbender: It's unstable, for sure
18:22 < tuhoojabotti> 0.10 is next stable
18:22 < cloudbender> k 0.10
18:23 < cloudbender> where do I go to submit a case ?
18:23 < tuhoojabotti> github
18:25 < phrearch> evening
18:26 < phrearch> i want to npm link a module which depends on another npm linked module, which is not registered
18:26 < phrearch> is it possible not to have it checked against npm ?
18:26 < Sorella> Install it locally first?
18:28 < phrearch> Sorella: doesnt it ignore the linked version then?
18:33 < cloudbender> GitHub returns search with '  We've found 24,929 repository results  '   could I have a suggested project reference ?
18:33 < cloudbender> for node dev ?
18:35 < cloudbender> found it
18:37 < MI6> joyent/node: Nathan Rajlich master * 1ba3922 : doc: document the writable.end() callback function  Support for it was ad - http://git.io/qkszxA
18:41 < cloudbender> Should I put the code in the issue comments or just a link to the gist ?
18:41 < tuhoojabotti> cloudbender: I think the gist will do.
18:41 < tuhoojabotti> But it's not too long for the issue comment either
18:41 < tuhoojabotti> imo
18:47 < phrearch> ah got it
18:47 < phrearch> npm link somepackage
18:47 < phrearch> :)
18:49 < john___> Hello can node.js actually merge 2 binary files automatically via binaryjs?
18:49 < john___> If I create audio blob 1 and audio blob 2
18:49 < john___> will binarjys merge them?
18:50 < cloudbender> He says I am invoking the callback before it is passed to process.nextTick hmmmm
18:51 < DarkArgon> lol traceroute 216.81.59.173
18:56 < owen1> isaacs: the code in your airbnb talk is blurry. https://www.youtube.com/watch?feature=player_embedded&v=zM-gUM9C5SA is it available somewhere?
18:58 < tuhoojabotti> cloudbender: oh yeah, I'm way too tired for this.
18:58 < tuhoojabotti> cloudbender: func1('Test Value') returns undefined
18:58 < tuhoojabotti> You need some closure to pass in an argument
18:59 < tuhoojabotti> cloudbender: https://gist.github.com/tuhoojabotti/4746567
19:00 < cloudbender> tuhoojabotti Sorry for wating your time. And thank you.
19:00 < cloudbender> wasting ...
19:00 < tuhoojabotti> no time wasted
19:00 < cloudbender> I'm trying to loop the event without using global references
19:01 < cloudbender> I'll figure it out
19:01 < tuhoojabotti> do what??
19:01 < cloudbender> I need to pass a value to the callback without using a global reference for 'val1'
19:01 < tuhoojabotti> cloudbender: look at my gist
19:02 < cloudbender> And he's right: my form invokes the function before it is passed to the loop
19:02 < cloudbender> ok
19:03 < tuhoojabotti> works fine
19:04 < cloudbender> I'll try that thank you !!
19:05 < tuhoojabotti> cloudbender: The trick is to use a closure to save the variable in the context.
19:05 < cloudbender> but it seems like that transfers execution back out of the callback function to 'where ?'
19:06 < tuhoojabotti> What do you mean?
19:06 < cloudbender> we are returning out of the callback with a codestream (console.log) which is called by what ?
19:06 < tuhoojabotti> It is called after shutdown OK, because the event is added at the end of the loop, if that's what you're wondering.
19:07 < cloudbender> ok.  lemme dink with it and see.
19:07 < cloudbender> learning much here.
19:08 < tuhoojabotti> you can use process.on('exit', cb) to check for shutdown
19:08 < cloudbender> good tip
19:08 < tuhoojabotti> cloudbender: It would help to know what you're trying to do. :P
19:09 < cloudbender> Just schedule an event for the next tick, and give it a value to work with.
19:09 < tuhoojabotti> cloudbender: Why next tick?
19:10 < RLa> owen1, isn't there link to github?
19:10 < cloudbender> well, I'm trying to get the event placed onto the loop somehow.  Trying to re-thunk myself asynchronously.
19:10 < owen1> RLa: i haven't seenone
19:11 < tuhoojabotti> cloudbender: Good luck with whatever you're trying to do. ;-)
19:11 < cloudbender> thanks lol
19:11 < owen1> RLa: i also looked at his github 
19:11 < cloudbender> I will post the evenutality
19:11 < RLa> https://github.com/isaacs/node-core-tech-talk
19:12 < tuhoojabotti> YouTube should definitely use Node for streaming processing of videos, it's taking far too long. :(
19:12 < owen1> RLa: wow thanks
19:13 < RLa> it was in the video comments
19:23 < Felixzilla> Anyone got an idea about node 0.9 ?
19:23 < OTBS4Life> An idea?
19:23 < tuhoojabotti> I have an idea!
19:24 < tuhoojabotti> Let's use it.
19:24 < OTBS4Life> I just built it from src... crash and burn!  As expected.... since it's not stable yet.
19:24 < tuhoojabotti> I just installed the binary, worked fine.
19:24 < tuhoojabotti> OTBS4Life: The "unstable" just means that the API is can be changed.
19:25 < tuhoojabotti> and of course experimental features
19:25 < OTBS4Life> tuhoojabotti, Yes, I understand that.  I got into a nice argument with my boss about that.  :-)
19:25 < Felixzilla> And that is?
19:26 < OTBS4Life> tuhoojabotti, Another dev suggested that Node.js was unusable since they aren't at version number 1.0 yet.  I suggested I'd rather check the bug tracker than rely on some number.
19:26 < tuhoojabotti> haha
19:27 < OTBS4Life> That guy forgot to renew his work visa anyway... so I don't think he will be around for awhile.
19:27 < Felixzilla> Yh when will v 1.0 come out?
19:27 < tuhoojabotti> Felixzilla: Once it's ready
19:27 < OTBS4Life> Felixzilla, 15 years from now.  :-)
19:28 < Felixzilla> Hmmmm
19:28 < Felixzilla> Lol
19:28 < OTBS4Life> They could take the Chromium route and just move the decimal point.
19:28 < OTBS4Life> We'll be on version 20 by the end of the year!
19:28 < tuhoojabotti> OTBS4Life: But it's not a decimal point
19:28 < OTBS4Life> tuhoojabotti, You're not much fun, I'm trying to make a joke here!
19:28 < DarkArgon> my npm install does not work without root right. an1 else had this problem?
19:29 < OTBS4Life> tuhoojabotti, Here, let me e-mail you a beer.  Maybe that will help.  :-D
19:29 < tuhoojabotti> OTBS4Life: Thanks, I accept paypal
19:30 < Felixzilla> OTBS4Life: that to will make it run like something else, we need to know so we can make investments in
19:30 < Felixzilla> APIs can't just keep changing
19:31 < OTBS4Life> Felixzilla, It's always a gamble, no matter what you are choosing.  I think Node.js is a safe bet.  They actually document what is changing.  I can't say the same for anything I've ever paid money for.
19:31 < Felixzilla> Yeah that you're right about
19:33 < Felixzilla> I hear ryan dahl is no more a core contributer, any truth about that
19:33 < amurdaca> may anybody explain me how to render custom 404 50x pages with express? (in production, i'll use default error handler for dev)
19:34 < OTBS4Life> amurdaca, You just need a middleware that uses the err parameter.  If you do that, Express will use it when an error crops up.
19:34 < amurdaca> mmm any gist somewhere? :)
19:35 < OTBS4Life> amurdaca, Sure, one second.
19:35 < Felixzilla> amurdaca: Not in express yet, but an on it for you right now
19:35 < tuhoojabotti> Felixzilla: It's true, he's not contributing anymore.
19:35 < tuhoojabotti> Or at least not very often
19:35 < tuhoojabotti> isaacbw is the man now
19:35 < tuhoojabotti> Felixzilla: https://github.com/joyent/node/graphs/contributors
19:36 < OTBS4Life> amurdaca, https://gist.github.com/bradisbell/523858e49ca6b830e500
19:36 < Felixzilla> Oh okay, thanx tuhoojabotti
19:37 < joshthecoder_> Felixzilla: https://github.com/joyent/node/graphs/contributors
19:38 < amurdaca> OTBS4Life thanks a lot, one more question :D i'll require the exported function in my routes or in app.js?
19:38 < OTBS4Life> amurdaca, Wherever you want.  You don't even need to export it... that's just how I did it to take clutter out of my main app.js.
19:39 < OTBS4Life> amurdaca, You could do errorHandler = require('errorHandler.js') or whatever, and then app.use(errorHandler)
19:39 < amurdaca> oh thats perfect+
19:39 < OTBS4Life> amurdaca, Or even app.use(require('errorHandler.js')) if you really wanted to.
19:40 < amurdaca> so it will sere custom error pages
19:40 < OTBS4Life> Yes.  I did mine in Jade, but you can use whatever you want.
19:40 < amurdaca> i'll try it in a min and let you know but thats's was exactly what i want for a production project 
19:40 < OTBS4Life> Cool
19:41 < JohnnySS> what are closures ? does eloquent javascript online book covers them ?
19:41 < amurdaca> so i don't get anymore that ugly "Cannot get /resource" lol
19:49 < test__> asdfasfd
19:49 < test__> asdfasdf
19:55 < Zilla> vimeo.com/56210468 issac schlueter on node
20:01 < asdf12> oh myyyyy
20:03 < asdf12> making a cloud irc client is quite tedious
20:07 < Felixzilla> Anybody ever written a node mod in C/C++
20:12 < Felixzilla> So what's the best way is there is to evalute a node module?
20:13 < Felixzilla> (Felixzilla) So what's the best way if there is, to evalute a node module?
20:39 < min|dvir|us> Can someone recommend something like uWSGI for Node.js?
20:49 < tuhoojabotti> wtf, youtube still hasn't processed my video
20:49 < tuhoojabotti> "Please check back in a few minutes." meaning hours
20:49 < tuhoojabotti> And it's ~12 seconds of video
20:54 <@konobi> min|dvir|us: depends on what aspect of it you're needing
20:55 < min|dvir|us> konobi: auto-restarting of processes, one init script for all of my Node projects.
20:56 -!- mode/#Node.js [+o isaacbw] by ChanServ
20:59 <@konobi> min|dvir|us: there's a few npm modules for that sort of thing
21:01 < breck> general coding question: does any one know of a program or system that uses a lot of tiny config files in a config folder instead of 1 big config file?
21:01 < breck> i'm trying to decide what's the better design pattern
21:01 <@konobi> most of the ones i can think of all get evaluted into one file at the end really
21:03 <@isaacbw> breck, most linux systems are designed that way
21:03 <@isaacbw> conf.d/ folders
21:04 <@isaacbw> but you shouldn't decide what's best based on what most people do
21:04 <@isaacbw> that's how you end up using php
21:04 < csixty4> :)
21:06 < breck> thanks isaacbw! good example. and http://unix.stackexchange.com/questions/4029/what-does-the-d-stand-for-in-directory-names provides a good explanation of how that pattern came about
21:06 < breck> "Each package that needs to configure some shared service should be able to manage only its configuration without having to edit a shared configuration file used by other packages."
21:06 < breck> makes sense
21:08 <@isaacbw> it also means you can group config options to easily add and remove them
21:08 <@isaacbw> as a group
21:08 <@isaacbw> if that makes any sense
21:08 < breck> yup, gotcha
21:08 < breck> i'm going to go with the directory pattern
21:08 <@isaacbw> it's nice to just be able to separate things conceptually as well
21:11 < min|dvir|us> What do you guys think about mongroup?
21:12 < amurdaca> someone know why my app.js doesn't show custom 404 error with this -> http://pastebin.com/QDnL9N2B
21:12 < breck> min|dvir|us: i haven't tried it yet. just using mon + bash scripts to manage multiple mons
21:12 < amurdaca> please :)
21:24 < RSA_> hi 2 all! 
21:25 < amurdaca> why express doesn't use my middleware with app.use?
21:29 < tuhoojabotti> http://www.youtube.com/watch?v=4IXjBlzbmuA here we go
21:35 < girishr> amurdaca: what's the signature of your middleware function?
21:35 < girishr> amurdaca: it need to have arty 3 or 4. and does all your middleware prior to yours call next() ?
21:36 < girishr> s/arty/arity
21:39 < amurdaca> wait i paste you the code
21:39 < amurdaca> it's really weird
21:39 < amurdaca> yes my middlware has arity 4
21:39 < amurdaca> err req res next
21:39 < amurdaca> app.use(function(err, req, res, next) {
21:39 < amurdaca> });
21:40 < amurdaca> even if i use the above snippet in app.configure
21:40 < amurdaca> and i do console.log(err)
21:40 < amurdaca> and i visit a 404 page it doesn't show nothing..
21:40 < amurdaca> it only shows Cannot GET /resource
21:40 < amurdaca> but nothing in console log nor if i do console.error
21:41 < amurdaca> what the hell
21:41 < amurdaca> this is my middlware ->
21:41 < amurdaca> http://pastebin.com/e1kwUZCK
21:42 < amurdaca> and i require the file    var errorHandler = require('./error.js')   then     app.use(errorHandler.errorh);
21:42 < amurdaca> and nothing happens..
21:43 < amurdaca> if i console.log(errorHandler) it's right pointing to the correct errorHandler function..
21:43 < amurdaca> but yet nothing
21:45 < DarkArgon> where did u put app.use?
21:45 < amurdaca> tried to put it in app.configure
21:45 < amurdaca> (main)
21:45 < amurdaca> and in dev too
21:45 < amurdaca> and my app.js is starting in development correctly
21:46 < amurdaca> i even have the error.jade template in views lol
21:47 < amurdaca> the problem is that neither console.log is triggered
21:47 < amurdaca> so the function itself is not triggered i suppose
21:47 < ocfx> i made my first node app today following a tutorial, the tutorial was making a blog with express and mongo
21:48 < DarkArgon> congraz ocfx
21:48 < amurdaca> DarkArgon any suggestion?
21:48 < DarkArgon> did u put it at the end?
21:48 < DarkArgon> the app.use
21:49 < DarkArgon> also be sure to not include app.use(express.errorHandler()); before
21:49 < amurdaca> sure..i did all this
21:50 < amurdaca> -> http://pastebin.com/YsKJJB0G
21:50 < amurdaca> this is my app.js
21:50 < amurdaca> and this is the errorHandler module --> http://pastebin.com/e1kwUZCK
21:50 < amurdaca> both files are under ./
21:51 < amurdaca> console.log(errorHandler.errorh.length); // 4 so is correct
21:52 < yoto> Hello. I have an weird behaviour with npm. I tried to manually update an package-dependency. The package.json of the 'main'-package just specifies the git-url of the dependency. I thought it would fetch the newest version with 'npm install x', but it always installs the old one. any idea?
21:52 < amurdaca> maybe i'm missing something..
21:52 < yoto> https://github.com/thedjpetersen/subway/blob/master/package.json <-- main-package. dependency is 'irc'
21:52 < yoto> If I install the packge in another folder, I get the newest version.
21:52 < amurdaca> but if i use app.use with my error middleware, if i browse a non-existent resource with 404 err code doesn't it get triggered?
21:54 < DarkArgon> do a console.log in errorh and see if it gets triggered
21:54 < amurdaca> did it
21:54 < amurdaca> nothing shows
21:54 < amurdaca> so it doesn't get triggered
21:55 < amurdaca> and i don't understand why..
21:55 < amurdaca> should be so simple..
21:55 < DarkArgon> do a console.log in app.configure('development')
21:55 < DarkArgon> see if that gets triggered
21:56 < RSA_> am just about setting up my node.js. which managed provider shall I take? am complete beginner.. so I need it as simple as possible. any ideas for me?
21:57 < DarkArgon> something like nodejitsu?
21:57 < DarkArgon> do you mean that be managed provider?
21:58 < RSA_> am there in the tutorial about node: "Managed providers provide a simplified "Node Appliance" solution. Node and NPM will already be set up for you, and deploys are typically done via git push or similar method. You will have less control of your server, but everything will be set up for you."
21:59 < amurdaca> even if i start a new project with express if i use an arity 4 middleware it doesn't get triggered on errors
21:59 < DarkArgon> heroku.com or nodejitsu.com
22:00 < DarkArgon> now i'm feeling stupid amurdaca 
22:01 < RSA_> what about cloudfoundry?
22:02 < DarkArgon> don't know also seems nice
22:02 < DarkArgon> gonna try it by myself amurdaca 
22:02 < amurdaca> ok have you see my files on pastebin?
22:02 < amurdaca> does they look wrong?
22:03 < DarkArgon> sure i've checked them. seem ok
22:03 < amurdaca> may you gist your app.js try then?
22:03 < DarkArgon> yes if it worked
22:04 < amurdaca> basically i GET a non existent resource so the middleware should be triggered right?
22:04 < DarkArgon> yep its the last use
22:05 < sorensen> afternoon all
22:05 < amurdaca> dunno i'm feeling dumb
22:05 < DarkArgon> same here xD
22:05 < amurdaca> can you gist your app.js please?
22:05 < amurdaca> i want to copy paste and try
22:05 < DarkArgon> ok mine is working
22:05 < DarkArgon> but i just logged we fucked up
22:05 < amurdaca> if it doesn't work then i have some problems i suppose
22:06 < DarkArgon> did not used your error handler
22:06 < RSA_> thank you DarkArgon! so I googled "best node.js hosting", but as always, it is not easy to find the overall solution with statistics or rates.. wil I compare them now..
22:06 < amurdaca> nevermind, i cannot even trigger a normal middleware with arity 4 -___
22:06 < yoto> found my problem. the git-url was from an old branch. :)
22:07 -!- mode/#Node.js [+o isaacbw] by ChanServ
22:07 < DarkArgon> ahh amurdaca
22:07 < amurdaca> yes?
22:07 < DarkArgon> exports.errorh = function errorHandler (err, req, res, next) {
22:07 < DarkArgon> why the errorHandler
22:07 < DarkArgon> it should be exports.errorh = function (err, req, res, next) {
22:08 < amurdaca> wait i delete it and see
22:08 < amurdaca> it doesn't work..
22:08 < RSA_> good evening sorensen
22:09 < DarkArgon> my error handler looks like this exports.errorHandler = function(err, req, res){console.log("we fucked up");}
22:09 < amurdaca> i cannot even use -> app.use(function(err,req,res,next){console.log(err);}); understand?
22:09 < DarkArgon> nope that makes no sense
22:09 < amurdaca> indeed...........
22:09 < sorensen> curious what would be more useful, a chat app that you could host and use internally, or an irc web client
22:10 < DarkArgon> u sure your development configuration gets triggered?
22:11 < DarkArgon> app.get('/:id/', routes.indexid);
22:11 < DarkArgon> comment out that line
22:11 < amurdaca> same DarkArgon........
22:12 < amurdaca> it doesn trigger the any middleware i define
22:12 < amurdaca> with arity 4
22:12 < amurdaca> my express --version is 3.1.0
22:12 < amurdaca> so i don't see where is the fuckin problem!!!!! :D
22:12 < DarkArgon> arity 4?
22:13 < amurdaca> mmm ye, (err,req,res,next)
22:13 < DarkArgon> k
22:17 < DarkArgon> ok ok
22:18 < DarkArgon> maybe 404 is no error
22:18 < DarkArgon> because the express error handler also is doing nothing with 404s
22:19 < DarkArgon> yep thats it
22:20 < DarkArgon> you have to next(404) if you want to trigger that
22:20 <@konobi> well, just next() to go to the next middleware
22:20 < amurdaca> so?
22:20 < amurdaca> i just put next();
22:20 < amurdaca> at the end of my middleware?
22:21 <@konobi> have a look at how other middleware does it
22:21 < amurdaca> nope it doesn't get triggered anyway
22:22 < DarkArgon> u want to do next(404) in this case
22:22 < amurdaca> i tried next(); and next(err); without luck
22:22 < DarkArgon> because u want to trigger the 404 in your error handler
22:22 < DarkArgon> you have to do it before the error handler
22:22 <@konobi> well, you'd want to mark the return status as 404, then call next()
22:23 < amurdaca> ok tried...nothing works
22:23 < amurdaca> i didn't understand why that middleware works for everyone excepts me
22:24 < DarkArgon> konobi his errorHandler looks like this http://pastebin.com/e1kwUZCK
22:24 < DarkArgon> this way he has to next(404). otherwise its gonna skip that middleware
22:24 < amurdaca> yes with next(err); added on the last line now
22:24 < amurdaca> but console.log nor nothing
22:25 < amurdaca> even next(404) i tried
22:25 <@konobi> amurdaca: http://pastebin.com/e1kwUZCK
22:25 <@konobi> bah
22:25 < DarkArgon> wait a sec i'll do a gist
22:25 <@konobi> http://expressjs.com/guide.html#error-handling
22:25 < amurdaca> ?
22:25 < amurdaca> what?
22:26 < amurdaca> what wrong? konobi?
22:26 < amurdaca> ive read that paragraph 100 times
22:26 < amurdaca> where am i doing wrong?
22:26 <@konobi> i thought you might have been using a pre-existing error handler middleware
22:27 < amurdaca> i didn't get what you are saying
22:27 < amurdaca> my app.js doesn't even trigger this
22:27 < amurdaca> function logErrors(err, req, res, next) {
22:27 < amurdaca>   console.error(err.stack);
22:27 < amurdaca>   next(err);
22:27 < amurdaca> }
22:28 <@konobi> where are you app.use() -ing it?
22:28 < amurdaca> app.configure
22:28 < amurdaca> -> http://pastebin.com/YsKJJB0G
22:28 < amurdaca> my app.js
22:29 < DarkArgon> https://gist.github.com/darkargon/108fd5f358bcb9be25dc
22:29 < amurdaca> i just wanted custom 404 and 50x pages ;(
22:29 <@konobi> amurdaca: ah
22:30 <@konobi> you want .use(errorHandler) vs .use(errorHandler())
22:30 < amurdaca> yhaiiiiiiiiiiiiiiiiiiiiiiiiii
22:30 < amurdaca> DarkArgon you made my dayyyyyyyyyyyyyy
22:30 < amurdaca> thanks so much dude!!!!!!!!!!!!!!!!!!!!!!!!!! :D
22:30 < DarkArgon> :D glad i could help
22:30 < crabtree> hi DarkArgon
22:30 < DarkArgon> hi crabtree 
22:30 < amurdaca> does that snippets trigger 50x errors too?
22:31 < DarkArgon> yes it should
22:32 < amurdaca> it actually logs err as 500 lol
22:32 <@konobi> amurdaca: did what i mention make any sense?
22:33 < DarkArgon> it logs 404 as 500?
22:33 < amurdaca> yes i use app.use(errorHandler); is this wrong?
22:33 < amurdaca> yes DarkArgon
22:34 < DarkArgon> no u use your errorHandler.errorh
22:34 < amurdaca> yes
22:34 < amurdaca> but without the () at the end
22:34 < DarkArgon> yes app.use(errorHandler.errorh);
22:35 <@konobi> ah, i was looking at line 44... nvm me
22:36 < amurdaca> i know go and see why it logs 404 as 500 :D
22:37 <@konobi> you're definitely running in development mode?
22:37 < amurdaca> sure..
22:37 < DarkArgon> i get 404
22:37 < DarkArgon> we fucked up
22:38 < DarkArgon> no wait
22:38 < DarkArgon> your error handler is bullshit amurdaca
22:38 < DarkArgon> err is an object
22:39 < amurdaca> ahahaha
22:39 < amurdaca> so whats my problem now?
22:39 < amurdaca> oh the if statements i suppose
22:39 < DarkArgon> maybe replace errorCodes[err] with errorCodes[err.status]
22:39 < amurdaca> no waiy
22:40 < DarkArgon> thats in line 14
22:40 < amurdaca> no wait
22:40 < amurdaca> if i call console.log(err) i get a 500 code...
22:40 < amurdaca> so it's not about that thing
22:41 < DarkArgon> i get { [Not Found: Not Found] name: 'Not Found', status: 404 }
22:41 < amurdaca> lol
22:42 < DarkArgon> what express version again?
22:42 < amurdaca> if i remove that line and  use console.log(err)
22:42 < amurdaca> i now get 200 -_-
22:42 < amurdaca> reference error next is not defined too
22:43 < geNAZt> is there a way to search for a string in file contents without reading the whole file ?
22:43 < amurdaca> 3.1.0 express is
22:43 < DarkArgon> same here
22:43 <@konobi> DarkArgon: https://github.com/visionmedia/express/blob/master/examples/error-pages/index.js
22:43 <@konobi> line 99
22:43 < skope> geNAZt: i can't see how that would be possible. it's the same that you know a word in the book without reading it
22:44 < gildean> geNAZt: stream the file, parse the stream, stop execution when the search term is found?
22:44 < geNAZt> well it must give a solution for this
22:44 < skope> yeah, that would be the way
22:44 < geNAZt> or does a data crawler search a 15 MB textfile for string via total reading it ?
22:44 < DarkArgon> konobi, it think that should go to amurdaca. it works for me
22:44 < amurdaca> konobi i'll just copy paste that
22:44 < amurdaca> seems good
22:45 < geNAZt> maybe it is better to make a readStream and parse chunks or not ?
22:45 < geNAZt> but then the data i search for is getting splitted up or not ?
22:46 <@konobi> you might need to buffer and then split on something you know won't match (newline?)
22:46 < someprimetime> question about `-` vs `_` in classnames… right now for my personal projects, i use `_` when referencing CSS only classnames, but for all classnames that I use exclusively with javascript, i'll use a `-` instead… e.g. `form_row` is always a CSS class … never referenced by my JS… `js-form-focus` is a javascript class not found within my CSS
22:46 < geNAZt> no new page
22:46 < someprimetime> is this the proper convention?
22:47 < someprimetime> reason I ask is because I work at a (large) company and they do everything with `-` (both js/css)
22:47 < geNAZt> so they are two chars i am searching for the "^" and a "L"
22:47 < tleen> someprimetime, I see '-' a lot more
22:47 < tleen> used to be more even
22:47 < someprimetime> tleen: hmm yeah same here
22:47 < someprimetime> probably because of bootstrap doing it i'd suppose?
22:48 < tleen> I think it just became more standard
22:48 < someprimetime> when i asked why at my current company they said consistency
22:48 < someprimetime> yeah
22:48 < someprimetime> at least i'll still prefix my javascript classes with `js`
22:48 < someprimetime> that'll work i guess
22:48 < tleen> I think when the data- attributes came on thats when I, subconsiscouly started doing it more
22:48 < DarkArgon> amurdaca, i know why my gist throws a 500
22:48 < geNAZt> so a readstream and parsing its chunk should be better
22:48 < DarkArgon> app.use(function(req, res){
22:48 < DarkArgon> missing next
22:48 < someprimetime> tleen: good point
22:50 < amurdaca> function(err, req, res, next){
22:50 < amurdaca>   res.status(err.status || 500);
22:50 < amurdaca>   res.render('500', { error: err });
22:50 < amurdaca> };
22:50 < amurdaca> with this 404 are shown as 500 too
22:50 < amurdaca> wtf
22:50 < DarkArgon> because my gist is a fail
22:50 < DarkArgon> https://gist.github.com/darkargon/108fd5f358bcb9be25dc
22:51 < DarkArgon> i forgot to add next as a parameter
22:52 < amurdaca> what?!
22:53 < amurdaca> yhai 404 now lol
23:10 < amurdaca> how do i test the 50x error with curl?
23:10 <@konobi> throw an error in a /this-definitely-dies route
23:12 <@isaacbw> man, youtube looks terrible on large monitors
23:14 < geNAZt> the days where youtube looked pretty are over.... long time ago.....
23:14 < geNAZt> its sad
23:14 < amurdaca> just    thorw new Error();   konobi?
23:14 <@isaacbw> it's amazing how youtube has managed to get progressively worse
23:14 < eighty4> geNAZt: what's wrong with youtube?
23:14 < geNAZt> check out Youtube Feather
23:14 < Kakera> isaacbw, I disagree
23:14 < geNAZt> its aweful
23:14 < geNAZt> i hate the youtube design
23:14 < geNAZt> the older one was nicer and i had lesser problems with it
23:15 < Kakera> isaacbw, look sat this http://www.youtube.com/user/wariolandshakeit2008
23:15 <@isaacbw> they don't consider how people actually watch youtube videos when they roll out ui updates
23:15 < geNAZt> to the new design i often have lag and loading problems with the videos
23:15 < eighty4> what amazes me most here is that you actually seem to use youtube
23:15 < amurdaca> konobi it works thank you
23:15 <@isaacbw> Kakera, it may have been less shiny but it was much easier to use
23:15 < geNAZt> well show me another video platform that big
23:15 <@isaacbw> imo
23:16 <@isaacbw> yea, youtube is one of those sites that you can't really avoid
23:16 < amurdaca> also, is a best practise to throw exception inside routes?
23:16 <@isaacbw> if you have something to catch it
23:16 <@isaacbw> and spit out an error response
23:16 < eighty4> all I ever do with youtube is press the "full screen" button
23:17 < geNAZt> well then you dont use much functions on youtube :D
23:17 <@konobi> amurdaca: you probably want `return next(new Error("something went wrong"));`
23:17 < eighty4> geNAZt: I definitly don't. Never seen the use
23:17 < amurdaca> thats perfect konobi thanks again
23:17 < Kakera> I just use this http://userstyles.org/styles/79560/recenter-youtube-dec-12-high-res-version
23:17 <@isaacbw> you shouldn't throw errors in async code
23:17 < Kakera> ^
23:18 < amurdaca> isaacbw mmm for this i was asking
23:18 < amurdaca> is it was best practise like in php
23:18 <@isaacbw> unelss you're cool and use promises, then thrown errors will be converted into rejections
23:18 < geNAZt> well to install a plugin for websites is meh
23:18 < amurdaca> so def no throw error in routes
23:18 < geNAZt> youtube / google should listen to its consumers
23:18 < geNAZt> but they dont
23:18 < Kakera> ew promises
23:19 <@isaacbw> they don't even have a place to contact about bugs
23:19 <@isaacbw> and there are usually a lot of bugs
23:19 < geNAZt> they have oO
23:19 <@isaacbw> I remember them saying the rationale for having everything pushed to the left edge was to allow for "future flexibility"
23:19 <@isaacbw> how about you don't push out a half-assed product
23:20 < geNAZt> they have google groups and at the very bottom of the page there is a "Feedback" button
23:20 <@isaacbw> oh, is that recent
23:20 < geNAZt> but they dont listen to it
23:20 <@isaacbw> it must be. I remember searching everywhere for it
23:20 < geNAZt> either the google group nor the feedback
23:21 < amurdaca> isaacbw this promise -> https://github.com/kriszyp/node-promise ?
23:21 <@isaacbw> no, https://github.com/kriskowal/q
23:21 <@isaacbw> but don't use promises
23:21 <@konobi> just in general
23:22 <@isaacbw> you have to know what you're getting yourself into before you do
23:24 < amurdaca> isaacbw that looks easy to implement btw..
23:24 < DarkArgon> i prefer async.js
23:24 <@isaacbw> it's a can of worms
23:25 <@isaacbw> I've sold me soul to q
23:25 <@isaacbw> but it's not too late for you
23:25 < min|dvir|us> What's wrong with Q?
23:25 < amurdaca> lmao are u serious?
23:25 <@isaacbw> moo moo moo moo moo
23:25 <@isaacbw> min|dvir|us, I love q
23:25 < amurdaca> i mean using Q for error handling..
23:25 < geNAZt> some people say Q is hard to debug
23:25 <@isaacbw> you do have to think more up front
23:25 < amurdaca> isn't async a different thing fron Q?
23:26 < Kakera> I'd rather use async.js
23:26 < geNAZt> async is much easier
23:26 < Kakera> it's more direct
23:26 < min|dvir|us> ?
23:26 < min|dvir|us> Async as in caloan async?
23:26 <@isaacbw> they're different ways of trying to approach structuring async stuff
23:26 < amurdaca> do async implement the error handling we were taking before isaacbw?
23:26 < geNAZt> min|dvir|us: yes
23:26 <@isaacbw> what were we talking about amurdaca 
23:26 <@isaacbw> turning thrown errors into rejections? no
23:27 <@konobi> you know that a very early version of node used promises, but it was scrapped because it's really nasty to debug promises in a consistent and meaningful way?
23:27 <@isaacbw> but I wouldn't do that anyway
23:27 < min|dvir|us> I like Q's approach better.
23:27 < amurdaca> isaacbw not throwing directly error handling
23:27 < amurdaca> yup isaacbw
23:27 < min|dvir|us> I like promises in general.
23:27 <@isaacbw> I think async has error stuff
23:27 <@isaacbw> built in
23:27 <@konobi> yup, it does
23:27 < amurdaca> let me look
23:27 < RSA_> am getting "-bash: npm: command not found" but installed npm successfully? -- tried "git clone" now, but get "fatal: destination path 'npm' already exists and is not an empty directory."  I have set up a little mess with the directories.. 
23:28 <@konobi> RSA_: `hash -r`
23:28 < geNAZt> RSA_: add npm to your PATH variable
23:28 < min|dvir|us> RSA_: what distro?
23:30 < amurdaca> mmm do async has the error handling stuff built in like Q
23:31 < amurdaca> just a callback(err) at the end of each func
23:31 < DarkArgon> https://github.com/caolan/async#seriestasks-callback
23:31 <@isaacbw> amurdaca, forget everything about q
23:32 < amurdaca> DarkArgon so if an error is passed the flow will be broken
23:32 < amurdaca> and the not all the function will be executed
23:33 < DarkArgon> " If any functions in the series pass an error to its callback, no more functions are run and the callback for the series is immediately called"
23:33 < amurdaca> it just stops when it catch an error
23:33 < DarkArgon> just read the wiki
23:33 < geNAZt> async does _not_ catch any errors
23:34 < RSA_> ohh dears, am beginner and not so good in the terminal language.. @konobi: where shall the 'hash -r' go?  @genatzt: what is my right path variable? my npm is in User/ and also old installation tries or installed parts of it in different places like in User/local/lib/node_modules…
23:34 < DarkArgon> right u should not throw but callback with an error
23:34 < amurdaca> yes i'm reading so there's no way to continue to iterate and apply the function to the array if an error is passed to the callback
23:35 < geNAZt> amurdaca: if you pass an error to a callback inside the task functions async steps out
23:35 < geNAZt> completly
23:35 < amurdaca> ye
23:35 < amurdaca> but for Q --> you also get implicit error propagation, just like try, catch, and finally. An error in step1 will flow all the way to step5, where it’s caught and handled.
23:36 < geNAZt> well that can be good or bad
23:36 < amurdaca> yes i understand geNAZt
23:36 < geNAZt> if Q does it so you must implement errorhanling in every task function
23:36 <@isaacbw> that's not a good way to understand Q
23:37 < min|dvir|us> What does Q do other than promises?
23:37 <@isaacbw> promises aren't about creating a flow of async functions
23:38 < asdf12> .
23:38 <@isaacbw> Q is something special. Q and async aren't the same kind of thing
23:38 < amurdaca> you fall in love of Q isaacbw
23:39 <@isaacbw> q is the shiznit
23:39 < amurdaca> you talk about it saying something special!!!!!!
23:39 <@isaacbw> but not if you're just using it as an async flow thing
23:39 < amurdaca> can you explain me what Q does?
23:39 <@isaacbw> man, I'm having a really good round in crawl right now
23:39 < amurdaca> why's so special?
23:40 <@isaacbw> it's a way of thinking of async in terms of data instead of callbacks
23:44 <@konobi> geNAZt: but it gets an err passed into the callback
23:44 <@konobi> RSA_: it's a bash command
23:44 < geNAZt> if one of the task functions throw an error it doesnt get caught by async
23:45 <@konobi> sure, but it's the same style... cb(new Error("somehting went wrong")) within your functions
23:45 < geNAZt> if you can predict it yes
23:45 <@konobi> generally throwing an error is frowned upon
23:53 <@isaacs> owen1: https://github.com/isaacs/node-core-tech-talk
--- Log closed Sun Feb 10 00:00:03 2013
