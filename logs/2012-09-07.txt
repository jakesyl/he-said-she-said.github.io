--- Log opened Fri Sep 07 00:00:35 2012
00:06 < endra> hey
00:06 < endra> is there a maintained redis client for node somewhere?
00:12 < dmilith> FUCK YOU KERNEL.ORG!
00:12 < dmilith> ;f
00:12 < dmilith> same crap
00:12 < dmilith> so solution is to switch to 0.6.x
00:13 <@konobi> huh, weird
00:15 < dmilith> yea.. 0.6.18 don't have this problem..
00:15 < dmilith> but let me recompile 0.8.8
00:16 <@konobi> dmilith: smartos ftw!
00:16  * konobi ducks
00:16 < dmilith> konobi: freebsd ftw
00:16 <@konobi> good close 2nd
00:19 < samholmes> How does browserling work?
00:21 <@konobi> samholmes: magic
00:21 < samholmes> konobi: Oh right
00:24 < matthewmoore> hey -- has anyone been using bogart?
00:25 < matthewmoore> had a beginner's question about asynchronous functions and rendering mustache views
00:28 < matthewmoore> that is: how do I call an asynchronous function (like, querying amazon RDS), before I render a mustache template?
00:32 <@konobi> matthewmoore: have you just tried it yet?
00:32 < matthewmoore> knobi: yes, it doesn't output anything
00:32 < matthewmoore> knobi: I can make a gist; I think there's something basic I don't understand
00:33 <@konobi> k
00:36 < matthewmoore> https://gist.github.com/80ea9d8cde82cdec9878
00:37 < matthewmoore> konobi: That results in "No data received         Unable to load the webpage because the server sent no data." in the browser
00:38 < dmilith> 0.6.21-pre works flawlessly
00:38 < dmilith> 0.8.8 is causing oops
00:38 < dmilith> on latest 2.6.32 with stable grsecurity patch.
00:38 < dmilith> isaacs: you may check it out.. it's 100% reproductible
00:38 < dmilith> isaacs: I can provide you a kernel config 
00:39 < jtomasrl> is it necessary to have db.open everytime i want to work with the db? (mongodb)
00:42 < ang3lfir3> jtomasrl, not a good idea to leave open sessions laying around ... abstracting that to a repository should help.. 
00:43 < jtomasrl> ang3lfir3: how is that
00:43 < ang3lfir3> how is what? .... 
00:44 < dmilith> isaacs: https://gist.github.com/3661984
00:44 < dmilith> maybe this will help
00:44 <@konobi> matthewmoore: so you have 2 returns in the same route... which one should it be?
00:44 < benvie> v8> (function(a,b,c,d,e,f){return function r(){e=b[a],b[a]=d,b.captureStackTrace(c,r.caller),f=c.stack,c={},b[a]=e;return f}}('prepareStackTrace',Error,{},function(e,cs){return cs.map(function(c){return[c.fun,c.receiver]})}))()
00:44 < purr> benvie: (object) [[function (execute) { var result, error; try { result = execute(); } catch(e) { if (typeof e.name !== "undefined" && typeof e.message !== "undefined") { error = e; error.name = e.name; // Weird bug } else { error = {name: "Uncaught value", message: utils.pretty_print(e)}; } } return utils.generate(…}, {Sol: (function) Sol, pretty_print: function (value, depth) …
00:46 < matthewmoore> konobi: well, I want to `return viewEngine.respond`, but that's nested in an async function (res.request), and I only want it to return viewEngine.respond when the async function is finished
00:47 < ang3lfir3> jtomasrl, im not sure what part you asking me about...the repository pattern .... or how to implement it?
00:47 < jtomasrl> ang3lfir3: the repository pattern
00:48 <@konobi> matthewmoore: you also have `return res`
00:48 < matthewmoore> konobi: i'll try taking that out, and try again; however, I assume this has to do with promises … though i don't know much about them yet
00:49 < ang3lfir3> jtomasrl, because Ima nice guy I googled it for you.... this example is in CoffeeScript but thats no biggy .... http://iainjmitchell.com/blog/?p=884
00:50 < ang3lfir3> its a decent implementation .... 
00:50 < matthewmoore> konobi: yeah, if I take out `return res`, it returns: Not Found: /
00:50 < jtomasrl> ang3lfir3: ty, ill give it a try
00:50 < pspeter3> Is passport the recommended way to handle oauth with express?
00:50 < ang3lfir3> jtomasrl,  ur welcome
00:50 < sdwrage> Hey all. Has anyone used Tower.js?
00:50 < tjholowaychuk> pspeter3 jed has some good stuff too
00:50 < tjholowaychuk> i forget what it's called
00:50 < tjholowaychuk> authom
00:50 < tjholowaychuk> or something
00:50 <@konobi> matthewmoore: res.write() the output?
00:51 < tjholowaychuk> pspeter3 https://github.com/jed/authom
00:51 < matthewmoore> konobi: the output of what?  the call to `viewEngine.respond` ?
00:51 <@konobi> sure
00:51 <@konobi> otherise, any idea what it's returning to?
00:52 < pspeter3> tjholowaychuk: Thanks. that looks awesome
00:52 < jtomasrl> ang3lfir3: wow that's new to me, coffeescript for writing node, sound good
00:53 < matthewmoore> konobi: I get a `TypeError: Object function next(req) { var jsgiApp = args.shift(); return jsgiApp(req, next); } has no method 'write'`
00:53 < matthewmoore> konobi: maybe I have to understand promises a bit better
00:53 < matthewmoore> anyone have experience with promises?
00:54 < matthewmoore> i feel like i have to call `rds.request` with a promise
00:54 < matthewmoore> and then use that to defer my call to `viewEngine.respond`
00:56 < ang3lfir3> jtomasrl, I write all my node code in CoffeeScript .... since it just compiles to js .... 
00:56 <@konobi> coffeescript is the depths of hell, do not give into it
00:57 < jtomasrl> xd
00:57 <@konobi> matthewmoore: there aren't promises in node anymore
00:57 < astropirate> wiser words haven't been uttered in 10 thousand years
00:57 < matthewmoore> konobi: i see, that is sort of a problem haha… bogart still uses promises
00:57 < matthewmoore> from promised-io
00:57 <@konobi> heh
00:57 <@konobi> express is probably what you're after
00:58 < gabrieluk> hello, what is the most logic less template engine around? mustache?
00:58 < tjholowaychuk> html
00:59 < tjholowaychuk> i hear it has zero
00:59 < tjholowaychuk> logic
00:59 < tjholowaychuk> haha
00:59 < matthewmoore> konobi: ah -- very nice
00:59 < gabrieluk> oh yeah,lol
00:59 < gabrieluk> for sure html is very logic less
00:59 < matthewmoore> konobi: do most folks around here use express?
00:59 <@konobi> matthewmoore: it seems to be a common one for web stuff
01:00 < gabrieluk> i think express is ok, i have set an app in a second. express appname, done
01:01 < matthewmoore> nice
01:01 < ang3lfir3> whats wrong with coffeescript ??? 
01:02 < gabrieluk> just remeber to install it with -g flag, so it install globally. when you install with -g, you have command line available
01:02 < matthewmoore> gabrieluk: gotcha, cool
01:02 <@konobi> ang3lfir3: lots
01:02 < gabrieluk> np, matt
01:03 < ang3lfir3> konobi, give me one thing .... (we use it for a large production app.... hundreds of coffee files)
01:03 < tjholowaychuk> it's a terrible language
01:04 < ang3lfir3> tjholowaychuk, something NOT subjective 
01:04 < tjholowaychuk> implit returns == hell, constructs that advocate really unreadable code..
01:04 < lohkey> coffeescript is amazing, until you see your first stack trace
01:05 < tjholowaychuk> lots of things aabout it lead to really ambiguous code
01:05 < tjholowaychuk> it's almost like a worse version of applescript
01:05 < ang3lfir3> tjholowaychuk, ok implicit returns suck..... good call .... 
01:05 <@konobi> there's a bunch of "languages" out there that attempt to make up for problems in CS... google it... none of them get it all right... not to mention shooting yourself in the foot with debugging
01:05 < ang3lfir3> tjholowaychuk,  omg applescript .... *cry* haven't written that since my ircle days
01:06 < gabrieluk> hands down for plain js here also
01:06 < ang3lfir3> mostly I just prefer the terseness 
01:06 <@konobi> not just that, but if you submit CS code to nodejs core as an issue... it'll get closed pretty much straight away... we wants pure JS
01:06 < tjholowaychuk> it has some nice things dont get me wrong i mean
01:07 < tjholowaychuk> everyone wants
01:07 < ang3lfir3> konobi, well no shit... but thats not my point ... 
01:07 < tjholowaychuk> multiline strings
01:07 < tjholowaychuk> etc
01:07 < tjholowaychuk> but most of it is really lame
01:07 <@konobi> source filters in general... avoid
01:08 < ang3lfir3> for a great many things.... its far more expressive ... and its hella less noisy (because I don't look at the js .... which isn't hard to read) 
01:08 < tjholowaychuk> js isnt ugly
01:08 < ang3lfir3> if I have to read the js .... its easy enough
01:08 < tjholowaychuk> you just write ugly js perhaps :p
01:09 < tjholowaychuk> a lot of js syntax lends itself to comprehension
01:09 < tjholowaychuk> the goal of CS
01:09 < tjholowaychuk> is to be like
01:09 < tjholowaychuk> some english
01:09 < tjholowaychuk> ambomination from
01:09 < tjholowaychuk> hell
01:09 < ang3lfir3> of course its ugly.... its generated by a machine... what do you expect
01:09 <@konobi> yeah... when you do server-side JS... you learn to clean up your JS, regardless
01:09 < gabrieluk> i think coffescript is appeling for non programmers, that doesn't really code a lot
01:09 < tjholowaychuk> take one coffeescripter and get him to write js
01:09 < tjholowaychuk> i bet it will be really ugly
01:09 <@konobi> tjholowaychuk: btw... when are you next in town? we should grab beer
01:09 < ang3lfir3> gabrieluk, lol Ima professional programmer .... who programs every day :p 
01:09 < tjholowaychuk> konobi SF?
01:09 <@konobi> tjholowaychuk: yvr
01:10 < gabrieluk> ohh, ofc there's exceptions :p
01:10 < ang3lfir3> tjholowaychuk,  I wrote js first.... 
01:10 < tjholowaychuk> konobi ah
01:10 < tjholowaychuk> should be somewhat soon actually
01:10 < tjholowaychuk> ang3lfir3 that doesn't mean it was readable js
01:10 <@konobi> oh cool
01:10 < ang3lfir3> we switched a massive system from js to coffee ... 
01:10 < ang3lfir3> tjholowaychuk, i didn't say it was :p 
01:10 <@konobi> so you went from php to haskell
01:11 < AnonymousFunctio> I haven't used CoffeScript yet, but I truthfully don't see a reason to do so.
01:11 <@konobi> way to reduce the possible workforce
01:11 < ang3lfir3> regardless Im not arguing for it.... I'm arguing against being a hater :p 
01:11 < AnonymousFunctio> Maybe it's great for some applications, but for what I've been writing, I don't see a benefit.
01:11 < WarheadsSE> I've looked at CS . Still don't see the point.
01:11 < freewil> i thought the same thing about CS before i starting coding in it, it saves a lot of keystrokes
01:11 < tjholowaychuk> ang3lfir3 not hating on it
01:12 < tjholowaychuk> just opinionated
01:12 < tjholowaychuk> haha
01:12 <@konobi> if CS was supported at the VM level... maybe... until then... yeah... no
01:12 < WarheadsSE> freewil: so does reusing code :)
01:12 < tjholowaychuk> freewil typing isn't a bottleneck
01:12 < ang3lfir3> we use it on the client side ... and mvvm looks hella better with it.... 
01:12 < AnonymousFunctio> Hey, sorry to interject, but I've got a weird issue that I'm having some trouble with.  Anyone familiar with the proper way to send arguments to a child process?
01:12 < AnonymousFunctio> I think I have an issue with my quotes getting swallowed.  I put a code snippet here:  http://stackoverflow.com/q/12310468/362536
01:12 < tjholowaychuk> english is a bad language to begin with why make it a programming language
01:12 < freewil> after having to not write parenthesis and braces i dont want to go back
01:12 < gabrieluk> i think that is the point, code reuse. how can go back/forward all the time? is just a waste of time in mho
01:13 < tjholowaychuk> braces + parens <3
01:13 < WarheadsSE> freewil: go back to python then :p
01:13 <@konobi> tjholowaychuk: heh... you should check out lingua::klingon
01:13 < ang3lfir3> tjholowaychuk, you don't like ruby either I assume?
01:13 < tjholowaychuk> im pretty sure most of the ruby community even went back to parens
01:13 < tjholowaychuk> ang3lfir3 nope
01:13 < tjholowaychuk> but for different reasons
01:13 < tjholowaychuk> implicit return etc
01:13 < tjholowaychuk> still there
01:13 < tjholowaychuk> but
01:13 < tjholowaychuk> other reasons as well
01:13 < ang3lfir3> lol 
01:14 < AnonymousFunctio> Basically, I'm trying to run FFMPEG as a child proc, and it can't seem to use my sound card, yet when running the same command on the command prompt, it works fine.
01:14 < WarheadsSE> I could never get behind ruby either
01:14 <@konobi> monkeypatch all the things!
01:14 < chapel> tjholowaychuk: did you merge that pull request to kue that implemented shutdown?
01:14 < tjholowaychuk> 15 layers of delegation all the things!
01:14 < ang3lfir3> << is a c# programmer by day ... so parentheticals and me are friends
01:14 < tjholowaychuk> chapel not yet
01:14 < AnonymousFunctio> Does this seem like a proper child proc spawn with arguments?  child_process.spawn('C:\\Brad\\ffmpeg.exe', ['-f', 'dshow', '-i', 'audio="Microphone (SoundMAX Integrated"', 'testaaa.mp3']);
01:14 < tjholowaychuk> gotta review it again
01:14 < WarheadsSE> << perlmonger
01:14 < chapel> tjholowaychuk: would you take a pr to make search optional?
01:14 <@konobi> AnonymousFunctio: missing a "
01:14 < tjholowaychuk> chapel yeah sure
01:14 < tjholowaychuk> sounds reasonable
01:14 < tjholowaychuk> lower the redis usage
01:15 < WarheadsSE> ohai chapel
01:15 < AnonymousFunctio> konobi: It's there
01:15 <@konobi> or bracket maybe
01:15 < chapel> tjholowaychuk: search tends to use a lot of space
01:15 < chapel> hey WarheadsSE
01:15 < AnonymousFunctio> The syntax is correct... it executes just fine.  FFMPEG just claims that it can't find my sound device.
01:15 <@konobi> ( and ) ?
01:15 < WarheadsSE> um ..
01:15 < WarheadsSE> ) missing
01:16 < AnonymousFunctio> The device name is truncated, that is normal.
01:16 < ang3lfir3> i like all the languages ...... tho most of those (python, ruby, lisp, clojure ... etc ) i only program in for fun .. 
01:16 < WarheadsSE> mmmm.. windows.
01:16 <@konobi> WarheadsSE: dahut
01:16 < AnonymousFunctio> Yep.  I haven't tried Linux yet.  I don't have a Linux box with a sound card handy.
01:16 < tjholowaychuk> ang3lfir3 to be fair im not in love with js either, it's just less bad stuff
01:17 < WarheadsSE> "normal" in windows is like "normal" on the short bus
01:17 < AnonymousFunctio> Sure, but that's no reason for a command not to execute correctly.  Node actually works quite well under Windows these days.
01:17 < AnonymousFunctio> So does FFMPEG.
01:17 < ang3lfir3> tjholowaychuk, <3 all the languages !!!! :) :) .... i hear yah!! :) 
01:17 < ang3lfir3> node works great on windows... 
01:17 < AnonymousFunctio> I just need to figure out what's happening to my parameters.
01:17 < ang3lfir3> for the most part
01:17 < WarheadsSE> oh, im aware AnonymousFunctio 
01:17 < AnonymousFunctio> Ok  :-D
01:18 < WarheadsSE> wrote all of node-gntp on windows
01:18 <@konobi> WarheadsSE: which .pm?
01:18 < AnonymousFunctio> Nice!
01:18 < WarheadsSE> .. hope to find time to finish it too..
01:18 < WarheadsSE> konobi: eh?
01:18 < gabrieluk> <tjholowaychuk>, what's the main difference between express 2.x and 3.x?
01:19 <@konobi> WarheadsSE: which .pm.org group
01:19 < tjholowaychuk> gabrieluk mostly cleanup
01:19 < WarheadsSE> not in one.
01:19 <@konobi> ah
01:19 < WarheadsSE> plus, 99% of my perl code is under ownership of the org :/
01:19 < gabrieluk> so i can just go with 3.x with no fear?
01:19 <@konobi> shame, they're fun
01:19 <@konobi> WarheadsSE: which org?
01:19 < tjholowaychuk> gabrieluk migration? or a new app?
01:19 < WarheadsSE> I might get around to it when I have more time konobi 
01:19 < gabrieluk> new app
01:19 < tjholowaychuk> gabrieluk ah yeah that's fine then
01:19 < WarheadsSE> probably find one near Philly
01:19 < gabrieluk> cool
01:20 < WarheadsSE> konobi: FTE
01:20 < WarheadsSE> (full time employer)
01:20  * ang3lfir3 is a on boat!
01:20 <@konobi> WarheadsSE: which one?
01:20  * AnonymousFunctio is not on a boat.
01:20 < ang3lfir3> Kaleetan 
01:21 < ang3lfir3> AnonymousFunctio, thats prolly good
01:22 < ang3lfir3> meh gun.io just shat all over my twitter feed lol 
01:22 < WarheadsSE> konobi: :) sorry
01:26 < AnonymousFunctio> My wife has offered to bake cookies for anyone that can help me solve this FFMPEG problem.  :-D
01:27 < ang3lfir3> anyone mixing rails and node? 
01:27 < ang3lfir3> ie using node for say background queue processing ?
01:29 < ang3lfir3> ight then..... i give you http://removieposters.tumblr.com/ before I part
01:39 < matthewmoore> is there anyone using Amazon RDS?
01:40 < matthewmoore> and if so -- is https://github.com/SaltwaterC/aws2js a good interface into RDS?
01:41 < othiym23> matthewmoore: to query, or to manage?
01:42 < matthewmoore> othiym23: to query -- basically, to store and retrieve data
01:42 < othiym23> matthewmoore: why not just use node-mysql?
01:42 < matthewmoore> othiym23: why not indeed </retard>
01:42 < matthewmoore> othiym23: thanks appreciate it
01:43 < othiym23> sure np, I think it should Just Work
01:43 < endra> this redisclient isn't resetting a pub sub after disconnection.. it still thinks that it is subscribed even when the connection disconnected/reconnected
01:44 < endra> I just want a completely new redis.createClient() after an error. Is there a way to do that?
02:02 < WarheadsSE> suggestin for load testing node on a quad-core ARM ?
02:13 < AnonymousFunctio> WarheadsSE: I can't think of a generic way to load-test any Node app, since they can do so much.
02:15 < WarheadsSE> I'll just smash it with high load gntp requests.. I know what a core2duo can handle.
02:16 < WarheadsSE> stood up ok
02:20 < WarheadsSE> single thread, handled about 250/s, considering a core2duo craps at 400, im kinda surprised.
02:26 < cleos_frey> hey anyone else have trouble trying to install node_pcap on OSX?
02:26 < cleos_frey> npm install pcap breaks at this: "Checking for library pcap: not found"
02:26 < cleos_frey> but I have libpcap installed
02:27 < ChrisPartridge> cleos_frey: might need libpcap-dev 
02:30 < cleos_frey> ChrisPartridge: I'll try that, thanks
02:33 < ChrisPartridge> cleos_frey: https://github.com/mranney/node_pcap/issues/53 might shed some light too, looks like its still using node-waf instead of gyp
02:35 < cleos_frey> ChrisPartridge: cool, it built successfully but now what?
02:41 < ChrisPartridge> cleos_frey: capture some packets?
02:41 < cleos_frey> ChrisPartridge: I did `node-waf configure build` and got a build directory
02:42 < cleos_frey> in node_modules/node_pcap
02:42 < cleos_frey> but how do I use it?
02:42 < cleos_frey> dont know how to connect the parts...
03:11 < ChrisPartridge> cleos_frey: take a look at the examples
03:19 < lowtax> is there a nice way to add a console to an application
03:20 < lowtax> basically the stock node console would be fine, if that were doable
03:21 < WarheadsSE> ala repl?
03:21 <@konobi> yup
03:23 < WarheadsSE> http://nodejs.org/api/repl.html should help lowtax 
03:24 < lowtax> thanks
03:27 < glacialheart> hello
03:27 < glacialheart> i have a question about npmjs.org and the install.sh file
03:28 < glacialheart> http://npmjs.org/install.sh
03:28 < WarheadsSE> npm comes with node these days
03:28 < glacialheart> OoOoOoOo
03:28 < glacialheart> i just updated tonight
03:28 < WarheadsSE> on ?
03:28 < glacialheart> i was getting an error
03:28 < glacialheart> h: Syntax error: newline unexpected
03:28 < WarheadsSE> right, what OS.
03:28 < glacialheart> nodejs, updated from 0.6.14 to 0.8.8
03:29 < glacialheart> ubuntu
03:29 < glacialheart> 11.10 ?
03:29 < WarheadsSE> ok, linux, ubuntu w/ ppa's, or built yourself?
03:29 < glacialheart> i think that's my version
03:29 < glacialheart> i found a script that downloads and compiles nodejs
03:30 < glacialheart> one of the last commands in the sh file had an error when it used install.sh from npmjs.org
03:30 < glacialheart> curl http://npmjs.org/install.sh | sh
03:31 < glacialheart> you said npm comes with nodejs now?
03:31 < WarheadsSE> your script *might* be out of date.
03:32 < glacialheart> it probably is
03:32 < WarheadsSE> http://blog.nodejs.org/
03:32 < WarheadsSE> notice "Version 0.8.8 (stable)" & "npm upgrade to 1.1.59"
03:32 < glacialheart> thanks WarheadsSE
03:33 < WarheadsSE> I think .. all of 0.8.x has npm with it
03:50 < AustinYun> hasn't npm been coming with node since 0.6?
03:57 < mscdex> 0.6.3 i think
03:58 < zak_> i remember ages ago, windows didn't come with npm
03:58 < zak_> i had this fancy python script which mimicked node
03:58 < mscdex> wow, that'd be a heck of a deal
03:58 < zak_> it was terrible
03:58 < mscdex> download npm and get windows for free
03:58 < zak_> i mean, mimicked npm
03:58 < mscdex> :-P
04:05 < kmiyashiro> I keep getting npm publish login error
04:05 < kmiyashiro> npm ERR! publish Failed PUT response undefined
04:06 < kmiyashiro> https://gist.github.com/88b775e8d11407af4769
04:10 < lowtax> WarheadsSE, ok that ws too easy
04:40 < _Tristan> have you ever thought to yourself: Man, I wish I could memoize my functions not just in an object, but in a tiered and distributed caching structure?
06:26 < joshwnj> westonruter: hey
06:27 < westonruter> joshwnj: long time no chat. viva JS
06:28 < joshwnj> westonruter: yes!
06:58 < amagee> Hey, I would like to test code that uses "new Date()" to get the current date/time, but I'd like the test code to force the system to think that the date is some particular value.  What's the recommended way to do this?
07:09 < bigkevmcd> amagee: what test library are you using?
07:09 < amagee> bigkevmcd: mocha
07:09 < bigkevmcd> amagee: I use Sinon.js to do that kinda thing
07:10 < bigkevmcd> amagee: http://sinonjs.org/docs/#clock
07:10 < amagee> aha cool
07:10 < amagee> looks good, thanks
07:32 < gedma> Hello guys, after a couple of weeks using node.js and finding it awesome, I decided to try out developing a module. It has to do with caching (memory/redis) http(s) requests' response; I needed something fast to handle REST API calls to Twitter preventing rate issues. Any comment would be really appreciated https://github.com/matteoagosti/node-request-caching
07:35 < [AD]Turbo> hi there
08:03 < gedma> Any best practice for documenting a node module?
08:34 < zizzyx> i just added mmmagic to my project and when i tried to run my server i got this traceback: https://gist.github.com/3664362
08:35 < zizzyx> nobody else seems to have had this issue, can someone tell me what might be up?
08:52 < Aldus> hello. Everybody welcome to join my nodejs chat at http://chat.put.it/  and try breaking / hacking it :)  (it's not optimized for mobile yet)
09:07 < coen-hyde> I'm having difficulty figuring out how to do a regular for loop in stylus. eg the equivalent of "for i=0; i>x; i++"
09:07 < coen-hyde> * i<x :)
09:11 < coen-hyde> nm figured it out "for item in (1..numItems)" 
09:24 < bobosomfan> Is there a way to stop function to execute (like putting a return in C++)?
09:24 < guorbatschow> you mean, a return in javascript?
09:24 < bobosomfan> Yes. 
09:24 < guorbatschow> you are in luck, there is a return in javascript
09:25 < bobosomfan> So it's okay to use it and all?
09:25 < zomg> Yes but don't tell Douglas Crockford
09:25 < DrockZenner> return;
09:25 < bobosomfan> I should've googled more...
09:25 < bobosomfan> Thanks pplz!
09:26 < guorbatschow> np
09:31 < nkuttler> has anybody implemented custom instance methods with jugglingdb?w
09:47 < deoxxa> so i've developed a pretty big set of boilerplate code that ends up going into nearly all my recent applications
09:48 < deoxxa> i'm thinking about using broadway to put it into some kind of package
09:49 < deoxxa> can anyone give me some insight into what frameworks/libraries/systems work well for this kind of thing, apart from broadway?
09:49 < deoxxa> (i think it's broadway that i'm thinking of...)
09:55 < fallenphoenix> hey guys, anyone here familiar with the node-postgres module and how to use it properly? I'm running into a weird issue that's got my scratching my head and I'm hoping some one can point me in the right direction to get this figured out
09:59 < fallenphoenix> specifically I'm trying to use the query.on('row') event to pass row, result into the callback function and it's telling me that result is undefined; my code is identical to the last code sample at the end of https://github.com/brianc/node-postgres/wiki/Query except the query just does a SELECT * FROM posts
09:59 < fallenphoenix> anyone ever run into that before?
10:33 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
10:44 < standoo> anyone here use swig templating language?
10:48 < Aldus> thanks to the "HERROOO" who tested my chat for the cool links :)
10:50 < navaru> standoo: I don't use it, but maybe I could help ..
11:32 < standoo> navaru: you there?
11:43 < katjang> hi
11:43 < katjang> is it really impossible to build node 0.8.8 on mac os x 10.5.8?
11:46 < RLa> katjang, why so
11:47 < katjang> because I don't have the resources to upgrade my mac :(
11:48 < katjang> make gives me Error 138 :(
11:48 < katjang> any workarounds, maybe?
11:48 < katjang> currently falling back to 0.6.21, but needs 0.8.8 for work :(
11:49 < MerlinDMC> is there any way to get the fingerprint of a rsa pubkey with node (other than running ssh-keygen and parse the output) ?
12:04 < FireFly> Aldus: I think I killed your chat thing ;-)
12:08 < FireFly> Aldus: (and I'm guessing the stack trace reports a problem like 'replace is not a function' or similar)
12:34 < Aldus> FireFly, sorry I was out for lunch, checking it out :)
12:34 < Aldus> FireFly, right! TypeError: Object 123 has no method 'replace'
12:36 < Aldus> what did you do to break it?
12:40 < FireFly> Aldus: I sent {"name":"blah", "message":123} via socket.io-client from node :P
12:40 < FireFly> Don't trust the objects being sent
12:41 < Aldus> FireFly, hmmm.... You mean you didn't do through the chat, but from an external script? 
12:42 < Aldus> I don't understand how it crashed the validator
12:46 < FireFly> Aldus: yup.  I just connected directly to your socket.io server.  The message sent to the socket.io server had a message property that referred to a number, but you (presumably) assume it's a string when you try to replace bad characters with HTML entities
12:47 < Aldus> FireFly, that's actually done by the node validator module. So I guess I'd better transform it to a string before validating it 
12:47 < FireFly> Ah
12:48 < deoxxa> that seems like a pretty major shortcoming of a validation library
12:48 < FireFly> Best is probably to make sure that all the properties in the object you receive from socket.io have the right type, and that all the required properties are there
12:49 < Aldus> yeah, I'll have to check it out 
12:49 < FireFly> you could abstract it with a function and just do  assertTypes(obj, {name:String, message:String})  or something, I guess
12:50 < Aldus> thank you very much, that was useful. And better than yesterday when someone injected rickroll in an username :) 
12:50 < FireFly> Haha
12:50 < deoxxa> lol
13:00 < garrettwilkin> Good GMT -5 morning
13:01 < garrettwilkin> How do you guys handle credentials for your apps?  store them in environment variables?
13:01 < garrettwilkin> for example, API keys that your code needs to use.  where do you put them?  I've started using environment variables, but i just thought id check to see what others are doing
13:09 < CIA-116> libuv: Ben Noordhuis master * r817b6c3 / gyp_uv : build: make gyp_uv understand '-f ninja' - http://git.io/U0RG3Q
13:12 < tasslehoff> Is there a one-liner for getting the size of a directory, or must I traverse and sum filesizes?
13:13 < guorbatschow> du -h
13:13 < guorbatschow> or do you mean a command inside node?
13:15 < tasslehoff> guorbatschow: as long as I can get the number inside node, I am happy :)
13:16 < tasslehoff> so I guess I can indeed use exec and grab stdout.
13:21 < sha0coder> hi
13:21 < sha0coder> what do you recommend to open big files?
13:21 < deoxxa> a big screen
13:21 < sha0coder> createReadStream()?
13:21 < deoxxa> HA HA
13:21 < sha0coder> XD
13:21 < deoxxa> depends what you mean by "open"
13:21 < deoxxa> is it something that can be streamed?
13:21 < ashb> size of the file makes fuck all difference to opening
13:22 < sha0coder> i wish to find a patern in a big file
13:22 < deoxxa> welcome to grep
13:22 < ashb> ^that
13:22 < sha0coder> yes, can be done in bash, with grep and sed
13:23 < deoxxa> sha0coder: is there a reason it has to be done in node?
13:23 < sha0coder> o_O
13:24 < sha0coder> maybe paralelize :/
13:24 < sha0coder> is faster than python or perl
13:24 < sha0coder> do you suggest did it on bash? will be faster?
13:25 < deoxxa> not bash
13:25 < deoxxa> grep
13:25 < guorbatschow> is it a regexp or just a string pattern?
13:25 < deoxxa> grep is pretty darn fast
13:26 < sha0coder> the file has 13Gb
13:26 < sha0coder> oks,  i will use grep
13:27 < nomad111> hey all i'm noticing that my NODE_PATH no longer includes the directly where npm installs packages. it used to be fine any ideas why this has changed?
13:27 < ashb> you upgraded something :)
13:27 < nomad111> mountain lion?
13:27  * ashb is in a helpful state-the-obvious mood today
13:28 < nomad111> i tried it in node 0.6.19 and node 0.8.8
13:28 < nomad111> i use nave to create virtual environments and in each one i was running npm install -g mongodb
13:29 < nomad111> and when i launch a shell and "require('mongodb')" i get an Error: Cannot find module 'mongodb'
13:34 < mscdex> zizzyx: what version of node are you using?
13:35 < caaakeeey> first node/coffeescript project - was hoping someone could skim my code and point out any style flaws before i get too much further (theres only 100 lines or so) https://github.com/cakey/affinity, thanks :)
13:39 < slick> style flaw #1: Using CoffeeScript
13:39 < guorbatschow> ^ lol
13:39 < deoxxa> slick++
13:39 < mikedg> cofeescript is a lot like real coffeee
13:39 < mikedg> makes you shit all over the place
13:39 < slick> lol
13:39 < caaakeeey> ok, pretend its not coffeescript then
13:40 < Gottox> "pretend this pile of shit is a cake."
13:40 < deoxxa> caaakeeey: that's some broken-ass ruby in that case
13:40 < mscdex> mikedg: sounds like you got a bad cup
13:40 < deoxxa> caaakeeey: also - no compiled javascript? ew.
13:41 < caaakeeey> you dont need to care what language its written in to say "you could abstract this bit into a function" etc
13:41 < slick> we're in a coffeescript hating mood today
13:41 < deoxxa> true story - coffeescript is faster than javascript because it's compiled
13:41 < deoxxa> and compiled languages are faster
13:41 < deoxxa> i know this because HN said so
13:42 < slick> ...but javascript isn't a compiled language
13:42 < BennyLava> lol
13:42 < BennyLava> but Cs is
13:42 < BennyLava> LOL
13:42 < slick> my head just exploded from recursion
13:42 < deoxxa> slick: exactly ;)
13:42 < Owner> hey so, how do i use this repl to access my global variables
13:42 < gildean> caaakeeey: i believe a big part of why people don't like cs is because it's easy to get lost without comments, so it's easier just not to read the code at all
13:43 < Owner> ReferenceError: DEBUG_NORMAL is not defined
13:43 < Owner>     at repl:1:2
13:43 < gildean> i don't like cs too much either tho', just because it seems easier to read but actually can be harder if you haven't written the code yourself
13:43 < caaakeeey> gildean, what makes it less readable than js?
13:44 < BennyLava> gildean: lolwat?
13:44 < caaakeeey> gildean, im avoiding all the extra silliness that postfix conditionals
13:44 < caaakeeey> *like
13:44 < Owner> !repl
13:44 < deoxxa> http://i.stack.imgur.com/TdrW7.gif heh
13:44 < Owner> ahhh i think
13:44 < slick> obligatory `coffeescript is bad and you should feel bad`
13:45 < astropirate> HAAHAHA
13:45 < slick> lol
13:45 < slick> epic
13:46 < BennyLava> lawl, 'I used the jQuery diet plugin and lost 10kg in a week'
13:46 < deoxxa> best part is the bottom - "-1 not enough jQuery"
13:46 < BennyLava> Related: What is the best number? hahah
13:47 < deoxxa> "how can i use javascript to parse some html using regex"
13:47 < BennyLava> I hope 69 is the winning answer
13:47 < deoxxa> that's a stackoverflow wet dream there
13:47 < Owner> :/
13:47 < Owner> prompt isnt work :/
13:48 < Owner> perhaps cuz im on node 0.6.20,     var lines = prompt.split(/[\r\n]/);
13:50 < Owner> where is the repl documentation for 0.6.20 :p
13:51 < Owner> *le sigh*  nvm install v0.8.8
13:59 < jonno11> I'm liking Express, but hating the organisation :( I'd love to use a framework based on Express with MVC - any advice?
14:03 < mscdex> jonno11: just create your own directory structure ?
14:03 < jonno11> In what way?
14:03 < mscdex> and organize your code to do things in an MVC way
14:03 < mscdex> in a way that you want?
14:04 < mscdex> like views/, models/, controllers/
14:04 < mscdex> and just load your modules from there
14:04 < jonno11> hmm yeah, but that doesn't manage routes etc.
14:04 < jonno11> I'm looking at RailwayJS - but the docs are awful
14:05 < mscdex> you can load routes from a separate module if you want...
14:05 < mscdex> or if you want a CRUD-y type thing, there's an express module for that
14:05 < mscdex> you still define it in a separate file though
14:06 < abstrax> hello
14:06 < abstrax> i want to do some realtime stuff like google docs. how do i do it ? all i know is node.js is a good solution for such things these days.
14:07 < caaakeeey> abstrax, look at socket.io
14:07 < chrisjaure> abstrax: try this: http://sharejs.org/
14:07 < abstrax> i have also heard socket.io had some problems.
14:07 < mscdex> what problems?
14:07 < abstrax> also i have heard about websockets (which is what socket.io probably does) along with server side events, not sure which one to choose.
14:08 < mscdex> socket.io uses multiple transports to support more browsers
14:08 < caaakeeey> abstrax, right a small real time app in socket.io if youre new to this stuff
14:08 < caaakeeey> then maybe look at derbyjs or meteor
14:09 < caaakeeey> have you ever done web stuff before?
14:09 < abstrax> yes i have.
14:10 < caaakeeey> abstrax, what kind of stuff?
14:11 < abstrax> i have made several types of web apps. right now, I need to do something like google docs's realtime feature. think of pastie.org where multiple people can write :)
14:11 < abstrax> and all devices attached to it gets update in realtime.
14:12 < mscdex> abstrax: personally i'd just try and whip up something fairly simple with socket.io, it's really easy to get started with
14:13 < mscdex> abstrax: see how you like and see if it works for you
14:13 < abstrax> ok, will go with socket.io then :)
14:14 < garrettwilkin> having some trouble getting winston logging to work in my flatiron app
14:14 < garrettwilkin> well its working for the default console.log transport, but I'm attempting to add Loggly, and not having luck
14:15 < caaakeeey> yeah, as i said, use socket.io to get familiar with nodes way of doing things, and then wehen youve got a basic prototype, maybe see if derby/meteor can help you out
14:15 < abstrax> ok thank you
14:19 < FireFly> GLua
14:19 < FireFly> Erm, oops
14:20 < FireFly> shift != ctrl
14:20 < paretzky> Is there any way I can use zero copy buffers to proxy http in node?
14:28 < eXeC001er> Hello. Is it possible to setup 'depth' for console.log() ?
14:29 < astropirate> eXeC001er, yes, use  util module
14:30 < astropirate> inspect function
14:30 < eXeC001er> astropirate: Thanks.
14:37 < eXeC001er> astropirate: maybe available a function that print structure instead of string ?
14:38 < EyePulp> so I'm running out of memory on a small tool I'm working on.  What's the process for diagnosing it?  So far I just keep cutting out bits, but so far no obvious candidates
14:38 < EyePulp> heck, how can I see how much memory it's using?
14:41 < astropirate> eXeC001er, console.log it :)
14:41 < astropirate> console.log(utill.inspect( your thing));
14:43 < eXeC001er> astropirate: but it does not support 'depth'. so i do not see full structure
14:44 < eXeC001er> i mean console.log
14:48 < astropirate> eXeC001er, util.inspect will do the depth thing for you and return the string
14:48 < astropirate> console.log will print it out
14:57 < abstrax> mscdex: i copied and pasted some code, no idea what to do next :) not sure what's working either.
14:57 < dKc> hi hi
14:58 < dKc> anyone knows what does 'with' in JS is doing?
15:01 < ruquay> dKc: it's one of those misfeatures to avoid.
15:01 < rio{> Any idea why I might get "Error: implicit bind failed" doing a couple of dgram (udp) connections
15:01 < rio{> ?
15:02 < mscdex> abstrax: you tried the examples on http://socket.io ?
15:03 < qballer> Hey guys does anyone know how to serialize an object to redis 
15:03 < qballer> I have an arraybuffer and a json object to serialize to redis 
15:04 < EyePulp> this was asked yesterday - 
15:04 < qballer> was it? it wasn't me ? got some kind of FAQ?
15:04 < daslicht> @dkc: http://stackoverflow.com/questions/61552/are-there-legitimate-uses-for-javascripts-with-statement
15:04 < EyePulp> for json, just do JSON.stringify(json_obj);
15:05 < EyePulp> and then JSON.parse(json_string_in_redis) to re-animate it
15:05 < qballer> but how would I prepare a composite object in what data structure ? 
15:07 < EyePulp> qballer: what's a composite object?  is it one storing things you can't store in JSON?
15:10 < Owner> hrm
15:10 < Owner> so i updated to node 0.8.8, but...still not sure how i change my global DEBUG_NORMAL to false at runtime
15:11 < Owner> i have useGlobal: true
15:13 < Owner> The REPL provides access to any variables in the global scope. You can expose a variable to the REPL explicitly by assigning it to the context object associated with each REPLServer. For example:
15:13 < Owner> is that required?
15:15 < mscdex> zizzyx: please try mmmagic 0.2.1 and let me know if that fixes things for you
15:16 < mscdex> zizzyx: i've pushed this version to npm just now
15:57 < ccowan> What kind of solutions are people using for timing on their page... aka... I want to add timers to my page to keep track of how long certian operations take
15:58 < henrikjoreteg> console.time and console.timeEnd
15:59 < ccowan> oh nice
15:59 < ccowan> I didn't even know that existed
16:07 < ccowan> looks like that's not a node.js thing
16:09 < t0mbstone> Yeah, it looks like it was a firefox console thing, but node has it, too.
16:09 < t0mbstone> http://nodejs.org/api/stdio.html
16:12 < t0mbstone> In the past, whenever I wanted to time something, I just whipped up a quick function using the Date().getTime() method, but the fact that the console has something built in for it is something I didn't know before now
16:16 < jcrew> t0mbstone: cool
16:18 < ccowan> I'm using the statsd client and I think it has a way to instrament
16:22 < qballer> is there event for no callback are being processed que empty kind of thing ?
16:33 < caaakeeey> what's the cleanest way to write a test that makes a POST then a DELETE, and then asserts that a GET returns a 404
16:33 < caaakeeey> i tried using mocha/supertest, and i just get this nested mess
16:33 < Owner> ahuradur
16:33 < caaakeeey> see the bottom of https://github.com/cakey/affinity/blob/master/test/basic.spec.coffee
16:36 < chrisjaure> caaakeeey: the async module helps with flow control https://github.com/caolan/async
16:42 < gabrieluk> Marzuk, this is what i get for the apache user/group https://gist.github.com/3667658
16:42 < gabrieluk> ops
16:43 < gabrieluk> wrong channel
16:45 < caaakeeey> chrisjaure, looks ugly though :(
16:53 < lbod> hi, so i use node at home on linux and it's all straightforward to setup.. I now need to install at my work on a windows xp environment in a fairly stuffy company who have lots of desktop and network policies. Has anyone seen a problem with the MSI installer where it almost runs to completion and then rolls back?
16:58 < mscdex> lbod: no
16:58 < mscdex> lbod: no errors or messages?
16:58 < gsf> caaakeeey: can you make them into separate tests? they'll be executed serially with mocha's "done"
17:00 < lbod> yes eventually by setting debug logging for the msi.. we have a roaming profile at work, at the end of the install the installer tries to write a shortcut menu (and possibly an intenet shortcut too) which it fails at
17:00 < caaakeeey> gsf, no the post and get are setup
17:00 < caaakeeey> gsf, but you saying that made me realise the tests arent isolated from eachother because the 'database' doesnt get reset :(
17:00 < gsf> caaakeeey: well i'm glad i could help :)
17:01 < lbod> mscdex: when i changed my registry settings for everything that was pointing to say "f:/progfiles/shortcut" to "c:/progfiles/shortcuts" it installed fine
17:02 < gsf> caaakeeey: really that delete test doesn't look like too much of a nested mess to me
17:02 < gsf> caaakeeey: maybe i'm just numb from all the callbacks
17:02 < mscdex> lbod: i'd post an issue about it on the node gh issue tracker
17:03 < caaakeeey> gsf, yeah its not /that/ bad, but ive just started, im sure it'll get far worse
17:05 < lbod> mscdex: sry to be more precise, i changed registry settings for f:/StartMenu to c:/StartMenu.. The thing is i installed the msi last year (i think it was 0.6.8) so i was able just to copy the node.exe from the download site and overwrite my existing one.. however the msi also installs npm, i cant ask other developers to start changing their reg settings
17:07 < gsf> caaakeeey: you could un-nest them by creating and passing "done" callbacks around, as caolan's async module does under the surface
17:07 < gsf> caaakeeey: and if you're repeating any operations think about breaking them out into helper functions
17:08 < caaakeeey> yeah
17:08 < caaakeeey> i might just write a generic rest api test 'library'
17:08 < caaakeeey> shouldnt be that long
17:09 < gsf> caaakeeey: you mean like http://blog.nodejitsu.com/rest-easy-test-any-api-in-nodejs ?
17:09 < gsf> which is now living at https://github.com/flatiron/api-easy
17:09 < mscdex> lbod: you could do a portable thing like someone did here: http://imsky.co/notes/nodejs-portable-windows-version-15
17:11 < lbod> cheers, ill have a look, i thought about trying to build from source but thats pain i want to stay away from.. msi's are bad
17:12 < caaakeeey> gsf, im using supertest, which was inspired by that
17:12 < lbod> mscdex: is that verified, i mean it's an exact copy of the exec and hash checked? could be a workaround but node should provide an alternative installer
17:13 < gsf> caaakeeey: oh i hadn't seen supertest before
17:17 < SpNg> is it possible to resume a download of a archive in node.js?
17:19 < pyrotechnick> SpNg: yes with the Range header
17:19 < pyrotechnick> provided the server supports it
17:19 < SpNg> pyrotechnick: and that is via an HTTP/S request?
17:19 < pyrotechnick> yes normal request, it's a header
17:20 < SpNg> pyrotechnick: beautiful. Thank you!
17:20 < pyrotechnick> what you have is a http question really nothing to do with node.js
17:20 < SpNg> I was unfamiliar with that header
17:20 < pyrotechnick> it's how resumable downloads are generally implemented
17:20 < pyrotechnick> it
17:20 < pyrotechnick> is called byte serving
17:20 < pyrotechnick> http://en.wikipedia.org/wiki/Byte_serving
17:21 < SpNg> pyrotechnick: that's perfect.  exactly what I needed
17:21 < pyrotechnick> you're welcome
17:22 < AAA_awright> SpNg: You should really get cozy with RFC 2616 if you're going to do lots of work with Node.js
17:23 < pyrotechnick> i wouldn't just go reading it cover-to-cover
17:23 < pyrotechnick> but yeah the rfcs are always handy to have around
17:23 < SpNg> AAA_awright: bit by bit ;-)
17:25 < AAA_awright> pyrotechnick: I read it cover-to-cover. And the REST dissertation, too.
17:26 < pyrotechnick> cool
17:31 < mscdex> lbod: no, but you can easily replace the executable and copy of npm easily
17:33 < mscdex> lbod: but if you post a feature request on the gh issue tracker and/or on the mailing list, they might be open to officially providing a portable installer 
17:33 < Nami-Doc> Hi ... `npm install` commands tries to install my package.json dependencies but "randomly" freezes on one
17:33 < Nami-Doc> when I remove it it freezes to another one
17:34 < merpnderp> I wish there was a way to tie dnode/socket.io auth to express sessions.
17:35 < lbod> mscdex: ok will do
17:35 < livinded> merpnderp: why can't you?
17:35 < ag4ve> do y'all expose your db to the client or proxy it through the app?
17:36 < mscdex> Nami-Doc: which dependencies?
17:36 < merpnderp> livinded: you don't have access to the express request object in a socket.io event handler?
17:36 < mscdex> Nami-Doc: you might try `npm -v install` to get more output
17:37 < mscdex> merpnderp: why not add a property to reference one or the other?
17:38 < mscdex> merpnderp: you just need a way to look up a particular socket.io user, like an object
17:38 < livinded> merpnderp: the session is stored somewhere else to be able to persist isn't it?
17:38 < livinded> just tie into that
17:38 < merpnderp> mscdex: that makes sense
17:38 < livinded> or if it's not then make it do tht
17:39 < merpnderp> io.sockets.on('connection' function(socket){ socket.user = getUserSession;})  // Something like that?
17:39 < mscdex> ag4ve: generally it's probably better to proxy it, if you have a frontend (especially a browser) connecting to a server process
17:40 < livinded> merpnderp: I wouldn't do it on connect
17:41 < livinded> have an actual auth event where the browser sends the session id that they are already storing and then verify that
17:41 < Nami-Doc> mscdex: https://gist.github.com/294938a52bc31180e2e9
17:41 < Nami-Doc> with this current config it's failing on brunch
17:41 < Nami-Doc> it's freezing*
17:42 < merpnderp> livinded: So I'd pass the session cookie value on io.connect then have the client pass it back in some auth event where they would be verified and I'd attach the session to that socket instance?
17:42 < livinded> you shouldn't be passing it on the connect event (if you even can do that)
17:43 < ag4ve> mscdex: yeah, i was thinking that. though mongo -> node -> nginx just seemed like a lot. it's probably better with some node checks in there and not just relying on nginx modsecurity and basic mongo checks to make sure no one is being evil
17:43 < merpnderp> It looks like you can do whatever you want on the 'connection' even.
17:43 < merpnderp> event
17:43 < mscdex> Nami-Doc: what about this?: https://gist.github.com/905fe36973a37cd3f8e6
17:43 < livinded> have a state for your user object in socket.io that says whether or not the user is authed. For anything that requires auth just call a method to check if the user is authed
17:43 < livinded> if not bail out, if it is then proceed
17:44 < livinded> then just created an auth event where you send the session id
17:44 < livinded> if you want to see some messy code that's sort of like what you want to do here's something I wrote a while back
17:45 < merpnderp> hah
17:45 < livinded> https://github.com/jrozner/BroCTF/tree/master/scorekeeper
17:45 < Nami-Doc> mscdex: trying ;)
17:45 < livinded> it's kinda not good but the idea is what you want
17:45 < livinded> at least it's the best way I could come up to deal with it
17:45 < Nami-Doc> mscdex: it seems to freeze on LiveScript-brunch now
17:46 < mscdex> Nami-Doc: what node and npm version are you on?
17:46 < Nami-Doc> node .8.2 - npm 1.1.36
17:46 < merpnderp> livinded: The biggest difference is my users will have already authenticated and created a session through express.
17:47 < merpnderp> So their login will just be passing in the express session cookie.
17:47 < Owner> why are you using express....
17:48 < merpnderp> Owner: because there is a large amount of functionality that won't be handled by socket.io
17:48 < mscdex> Nami-Doc: i think there is an ssh authentication thing going on that is stopping things
17:48 < Nami-Doc> yeah
17:48 < Nami-Doc> "the authenticity of [xxx] cannot be established"
17:48 < lbod> mscdex: sry dumb question, wheres the issue tracker? i had a quick search and nothing coming up
17:49 < Owner> merpnderp: fun times
17:49 < lbod> on google?
17:49 < mscdex> lbod: https://github.com/joyent/node/issues
17:49 < Owner> express looks like a mess to me
17:49 < Nami-Doc> mscdex: so I typed "yes", and it's asking me to type either "yes" or "no" - none works
17:49 < merpnderp> Owner: what do you use instead? So far I've really liked Express. Very straightforward and easy to understand. 
17:49 < Nami-Doc> ok, got it to accept "Y", it failed anywya
17:50 < lbod> mscdex: sry never realised you were using git for bugs
17:50 < Owner> merpnderp: nginx
17:50 < samholmes> What does this mean: "ENOENT, rename 'C:\Users\Holmes\Programming\Foobar\uploads\temp\6b01f593063d7a5095c8207e214d34e8,'" ?
17:50 < mscdex> lbod: github is widely used for node+node modules/addons
17:50 < jcrew> means it couldn't rename
17:50 < Owner> lbod: https://groups.google.com/forum/?fromgroups#!forum/nodejs-dev
17:51 < mscdex> samholmes: the file doesn't exist
17:51 < Nami-Doc> mscdex: removed those git+ssh to a real version, seems working now !
17:52 < Nami-Doc> it didn't realised it was asynchronous that way
17:52 < mscdex> Nami-Doc: cool
17:52 < merpnderp> livinded: Can you explain why that code is messy?
17:52 < Nami-Doc> thanks :)
17:53 < Nami-Doc> yay, perfect
17:53 < lbod> mscdex: yeh i know, i just never realised it was used for bug tracking too.. thanks
17:53 < mscdex> yep :-)
17:54 < Owner> merpnderp: nginx
17:54 < livinded> merpnderp: app.js isn't horrible but most of the rest is
17:55 < livinded> I think there are memory leaks in it and there are just a lot better ways to do a lot of what I did
17:55 < livinded> but I only had about 3 weeks to write the entire project and was still wrapping my head around async programming while I was doing it
17:55 < merpnderp> livinded: ok, app looked like the way to do it. I'll check out the libs and see if I can spot what's wrong.
17:56 < merpnderp> Owner: nginx is a web server. express is a node web framework. What do they have to do with each other?
17:56 < livinded> merpnderp: like I said, it's not horrible, but I definitely would have some of it very differently
17:56 < Owner> are you serving html?
17:57 < Owner> so you have one node process for socket.io and searching all assets?
17:58 < Owner> or more than one with a redis ?
17:59 < Owner> merpnderp: does that support virtual hosts?
17:59 < zizzyx> hey i have a tmux session running on my home box in a screen that is much smaller than the screen ijust used to attach to it
17:59 < zizzyx> oops wrong chan
18:00 < merpnderp> Owner: I really don't know what you are asking.
18:01 < Owner> http://www.ngspinners.com/lightnode/
18:02 < Owner> or its gone
18:02 < merpnderp> livinded: heh, I love the global db object. Finally some code not afraid to use globals.
18:03 < jetienne>  https://github.com/ngspinners/lightnode/tree/master/examples/
18:03 < livinded> merpnderp: don't see a reason to not do a global db object in that case
18:03 < livinded> it's connection pooling why should I make a copy for every instance?
18:03 < hortinstein> so are there any good hacks on getting a request type API client side, without running into origin problems 
18:04 < merpnderp> livinded: exactly. But I see a lot of code that hides that as a static param in a lib.
18:05 < livinded> merpnderp: got an example?
18:05 < Owner> heh, slide 5  http://posterous.ngspinners.com/
18:05 < testingb0t> Does anyone know how I can easily debug why a "HPE_INVALID_METHOD" is happening? the client should just be sending a DELETE method but for some reason node debug's output indicates an HTTP parse error
18:06 < merpnderp> livinded: nothing handy. But say you require('myDBClass').init(dbParams); That init sets a static handle that every other call to require('myDBClass') will have, only it is now initialized.
18:06 < merpnderp> Which seems like a whole lot of work just to not have a global db handle.
18:06 < tobo> Owner caching in node is stupid
18:06 < tobo> use varnish
18:07 < Owner> im not caching in node
18:07 < Owner> why should i use varnish
18:08 < Owner> or if really lazy, use cloudflare
18:08 < mscdex> testingb0t: easy way is to fire up tcpdump or wireshark
18:08 < mscdex> testingb0t: to see what the client is really sending
18:11 < PringlesCan> Owner, caching in node is either going to use I/O or memory. Varnish is going to do a better job managing the latter and is battle tested.
18:11 < Owner> tobo: in one of my node apps, i cache responses for up to a second, so they can coalesce before i send them out....how would i use varnish to do that?
18:12 < tobo> Owner that stupid slide thing is comparing static file serving
18:13 < Owner> serving static data in node is going to  use io, and is also stupid imo
18:13 < Owner> but everyone is doing it
18:13 < TechnoCat> websockets don't allow p2p connections right? it abides by CORS?
18:13 < testingb0t> yeah thanks mscdex, I'm going to try that
18:13 < maxogden> the web abides
18:14 < Owner> lets serve static data with node..and not cache it so we can do io every time (oh thankfully we have an operating system that caches data)
18:15 < mscdex> Owner: serving static files from node isn't stupid, especially if you want to do everything on one port and you're using something like websockets
18:15 < tobo> Owner ...
18:15 < tobo> Owner hense using tools like varnish..
18:15 < merpnderp> mscdex: are people really using websockets to update webpages with a full static page?
18:16 < tobo> omgz I needsz 500000 rps for my app that only gets 10
18:16 < Owner> you can do websockets and apache on the same port, if you know what you are doing
18:16 < mscdex> merpnderp: nginx does not support websockets currently
18:16 < merpnderp> I've never heard of people using sockets to serve static content.
18:17 < mscdex> my point is if you want to use nginx to serve static files and also be able to proxy websocket connections up to a node process, you can't do that
18:17 < merpnderp> mscdex: why wouldn't you do it like a normal cgi pass through?
18:17 < mscdex> so a lot of people just serve the files and do websocket from node
18:17 < Owner> you can
18:17 < Owner> there is a tutorial out there just for that
18:17 < mscdex> Owner: link?
18:18 < tobo> better to cache in each node independently and cause lots of bloat!
18:18 < tobo> woOo
18:18 < mscdex> merpnderp: because nginx does not fully support some things that websockets utilizes, i.e. http 1.1 stuff
18:19 < Owner> mscdex~# use haproxy
18:19 < mscdex> heh
18:19 < mscdex> another layer ;-)
18:19 < merpnderp> mscdex: I see. But if the node static content caching libs aren't enough for your site, it means you've made it and can probably hire someone to solve this problem :P
18:19 < Owner>  acl websocket hdr_end(host) -i io.test.tld     use_backend node_backend if websocket
18:20 < Owner> theres a bunch of them
18:20 < Owner> http://blog.mixu.net/2011/08/13/nginx-websockets-ssl-and-socket-io-deployment/
18:21 < mscdex> Owner: did you see this part?: "There is a workaround, but I don’t see the benefit: use a TCP proxy (there is a custom module for this by Weibin Yao, see here ). However, you cannot run another service on the same port (e.g. your main app and Socket.io on port 80) as the TCP proxy does not support routing based on the URL (e.g. /socket.io/ to Socket.io and the rest to the main app), only simple load balancing."
18:21 < mscdex> ;-)
18:22 < merpnderp> Why can't you run your main app and socket.io in the same process?var app = express()  , server = require('http').createServer(app)  , io = io.listen(server);
18:22 < mscdex> merpnderp: you can
18:23 < Owner> express is overkill
18:23 < tobo> lol
18:23 < merpnderp> I wonder if all the express middleware runs before io.socket is called.
18:24 < tobo> all 400 SLOC of overkill
18:24 < merpnderp> express is only 400 lines? Man, that is a lot of bang for your buck.
18:24 < tobo> look at ember.js if you want
18:24 < tobo> overkill
18:25 < Owner> express does support vhosts
18:25 < Owner> tobo: its because all the rest of the code gets splattered throughout your source
18:25 < CoverSlide> the majority of express's work is done in connect
18:25 < tobo> Owner how so?
18:25 < tobo> that's up to you
18:25 < tobo> to organize
18:26 < merpnderp> Did express 3 remove vhost support?
18:26 < tobo> if you suck at organizing then yeah sure you'll have issues
18:26 < tobo> with anything really
18:27 < CoverSlide> no, connect.vhost is still there
18:27 < merpnderp> CoverSlide: Yeah thanks. Jsut found that in the connect docs. 
18:28 < merpnderp> thanks all for the help. hasta
18:32 < Owner> ok maybe i need to try express / connect again...with a varnish cache
18:33 < Owner> varnish allows websockets?
18:33 < tobo> if you have one node instance you could cache in memory
18:33 < tobo> but if you have one instance
18:33 < tobo> you likely dont need that
18:33 < tobo> so it doesn't really make sense
18:33 < tobo> it only helps stupid useless benchmark comparisons
18:34 < Owner> says here that varnish strips the Upgrade header
18:34 < oren1> installing forever -g show me: Error: EACCES, symlink '../lib/node_modules/forever/bin/forever' - http://pastebin.com/nK1wGFTz  any ideas?
18:34 < oren1> i am ok to use different package, but i assume my problem is installing any global package.
18:35 < Owner> it says you need to be root
18:35 < Owner> global packages....make me feel bad
18:36 < oren1> Owner: is there a way to install global package without being root?
18:36 < tobo> :s
18:36 < Owner> im sure there are ways...but why does it need to be global
18:37 < VesQ> oren1: by installing node itself on a per-user basis
18:37 < oren1> i have another user that can become sudo. should i switch to that user for installing it?
18:37 < VesQ> for example, I just install node always with nvm, no need for sudoing or anything like that and global packages just work
18:37 < oren1> can i use that user for installing but changing back to the original user for running my node?
18:38 < oren1> VesQ: but on production i prefer to install node from source.
18:38 < VesQ> just use sudo -u <username>
18:38 < VesQ> you don't need to change user
18:38 < VesQ> just use a different username when sudoing with the -u
18:38 < Owner> yes...
18:38 < oren1> ok. i'll try
18:38 < Owner> you install as ROOT
18:39 < Owner> what has less bloat and frameworkiness, connect or express
18:39 < VesQ> is that a question?
18:39 < tobo> i hear writing directly to sockets
18:39 < tobo> has little bloat
18:39 < tobo> screw node
18:39 < tobo> too bloated
18:39 < VesQ> express utilizes connect so express is more bloat because it contains connect too
18:40 < Owner> ?
18:40 < oren1> VesQ: agree
18:40 < oren1> don't use express. use node instead
18:40 < Owner> VesQ: ok thanks
18:40 < tobo> funny how people forget they're already sitting on 40,000k
18:40 < tobo> of bloat
18:40 < Owner> oren1: alright, ill check that out
18:40 < VesQ> tobo: why are you here?
18:41 < Owner> tobo: if you dont like node, go away, please thanks
18:41 < oren1> Owner: check out what?
18:41 < tobo> because i work with node?
18:41 < VesQ> oh
18:41 < tobo> it's just funny
18:41 < tobo> when people are idiots
18:41 < EyePulp> what's a good method for running external cmd line processes and getting the results back into node?
18:41 < Owner> oren1: using node only instead of connect/express
18:41 < VesQ> a-ha. I thought you came here just so you could mock people using node, my mistake :D
18:41 < tobo> a few hundred lines sitting on 40k is not bloat
18:42 < maxogden> tobo: this channel has one rule: "be excellent to each other"
18:42 < VesQ> it's not the amount of code, it's how it behaves
18:42 < oren1> Owner: https://github.com/oren/node-website-template
18:42 < Owner> tobo just woke up on the wrong side of the bed
18:42 < oren1> that's what i currently use. it's inspired by isaacs's new npm website
18:42 < Owner> oren1: thanks
18:42 < oren1> yw
18:43  * tobo headdesk
18:44 < Owner> oren1: ill take a look...but i already see forced directory structure and file naming
18:50 < Owner> tobo: are you feeling better?
18:50 < tobo> you bet
18:51 < mscdex> node.js rules!
18:51 < Owner> tobo: i don't think node.js is bloat, i think bloat creeps in with more abstraction
18:51 < tobo> node.js is already a massive abstractino
18:51 < tobo> but ok
18:51 < Owner> so node.js is fast and not bloated until you start writing code on top of it
18:51 < Owner> yeah well we are not writing node.js we are writing code on top of it
18:51 < tobo> sure..
18:52 < CoverSlide> node is bloated compared to what? writing in C?
18:52 < Owner> thats the only bloat we can control
18:52 < tobo> every abstraction is bloat
18:52 < CoverSlide> go write your servers in C then, good look with that
18:52 < caaakeeey> kernels are bloat compared to my speed hardware, such a waste of resources
18:52 < Owner> CoverSlide: why not Go?
18:53 < Owner> caaakeeey: you can write code for your hardware, but its easier to write it on top of a kernel / userland
18:53 < caaakeeey> Owner, but its slow and bloated
18:54 < maxogden> tobo: i agree with you, i just cant understand why everyone in the world doesnt write everything in C
18:54 < Owner> caaakeeey: yeah but it allows you to write abstracted code
18:54 < caaakeeey> Owner, if by abstracted you mean bloated then sure
18:54 < tobo> it's just dumb to treat something like node as non-bloat and some other slight abstractions as bloat
18:54 < Owner> caaakeeey: i recommend you learn assembly
18:54 < tobo> it's all the same
18:54 < tobo> C is indirection, node is indirection, express is indirection
18:54 < Owner> the C 'source code' would be more 'bloated', but the C code would run much faster
18:54 < tobo> what else is new
18:54 < Owner> than node
18:54 < caaakeeey> Owner, that's what i do for a living - web frameworks in assembly
18:55 < CoverSlide> how's that going for you?
18:55 < Owner> caaakeeey: ah thats just a hobby for me
18:55 < caaakeeey> it's web scale
18:55 < Owner> i use inline assembly
18:55 < Owner> though...
18:56 < Owner> no way am i implementing a better than linux kernel
18:56 < caaakeeey> if you need webscale you need assembly
18:56 < caaakeeey> its the only way
18:56 < Owner> and a new libc
18:56 < Owner> caaakeeey: do you use arm assembly?
18:56 < caaakeeey> nah
18:56 < caaakeeey> its homebrew assembly
18:57 < CoverSlide> kick ass
18:57 < caaakeeey> hardware is usually bloated too
18:57 < caaakeeey> we aim for those micro ops directly
18:57 < Owner> caaakeeey: how many lines of bloat is your tcp stack
18:58 < caaakeeey> our tcp stack is hardware
18:58 < caaakeeey> so none
18:59 < CoverSlide> pfft you use tcp? tcp is bloat
18:59 < caaakeeey> its an optional module
18:59 < CoverSlide> well modularity is key
18:59 < caaakeeey> generally anything above layer 1 is bloat
19:00 < EyePulp> heh
19:00 < caaakeeey> occasionally we deal with the link layer
19:00 < caaakeeey> but only when we have to
19:00 < caaakeeey> weve lost a few quality guys from forcing that bloat on them
19:00 < caaakeeey> 3 guys retired when pipelining came in
19:00 < caaakeeey> to be honest
19:00 < Owner> i think your definition of quality must be lacking
19:00 < caaakeeey> i nearly did too
19:00 < caaakeeey> what a load of bloat that was
19:01 < caaakeeey> if youre not balls deep in electrical signals youre doing it wrong
19:01 < Owner> caaakeeey: sounds like you are in over your head
19:02 < Owner> caaakeeey: haev you tried college?
19:02 < caaakeeey> college is bloat
19:02 < TooTallNate> caaakeeey: hahaha nice one
19:02 < tobo> i hope you guys realize you're just fueling my point that it's stupid to consider more code bloat
19:03 < Owner> caaakeeey: are you todo ?
19:03 < Owner> tobo
19:03 < Owner> caaakeeey = tobo
19:03 < caaakeeey> if i was todo, then i would be todo with bloat
19:03 < caaakeeey> does that seem like the way i roll?
19:03 < TooTallNate> Owner: irc has a /whois command, you know?
19:03 < tobo> irc is bloat!
19:03 < tobo> haha
19:04 < Owner> TooTallNate ?
19:04 < TooTallNate> Owner: http://www.livinginternet.com/r/ru_who.htm
19:05 < Owner> TooTallNate, what am i supposed to do with this
19:05 < Owner> i am new
19:06 < caaakeeey> nothing, it's just bloat
19:06 < caaakeeey> use some electrical signal like a real man
19:07 < Owner> caaakeeey: was that to me?
19:07 < caaakeeey> yes, using names introduces bloat
19:07 < caaakeeey> we don't want that
19:08 < Owner> caaakeeey: ok thanks
19:15 < oren1> are u guys using forever in production?
19:18 < Spion> oren1, I used to, then I switched to a version of up that restarts workers
19:20 < Owner> is there anything for reloading server code / redefining functions at runtime or do i have to write my own
19:20 < tobo> dont do it, that's bloat, use cluster directly
19:20 < Guest18243> Has anyone uploaded a Unity3d file onto a Node server?
19:20 < Owner> i want to be able to write code without restarting the server
19:21 < Owner> Guest18243: why does it matter what kind of file it is
19:22 < bradleymeck> Owner shared global state means you need to restart the server, there are multiple file watcher tools that can automate that for you though
19:23 < Owner> bradleymeck: you mean i cannot have the server watch for file changes in say  blah_function.js and redefine the function ?
19:23 < Owner> i have long running processes, most of the code is on the client, but sometimes i need to edit the server source to add features
19:24 < bradleymeck> Owner no, the function could have dangling references, and that means superimposition of state for functions, which is horrifyingly bad and hard to debug
19:24 < timeturne> Owner: node-dev
19:24 < bradleymeck> restart the server
19:24 < timeturne> to auto-restart
19:24 < Guest18243> I used the example on the main page to make a server, then want to upload a file to it. 
19:25 < Owner> restarting the server is a very heavy process
19:25 < timeturne> yep
19:25 < Owner> as far as terminating all long running processes and sockets
19:25 < Pagan> Owner, http://stackoverflow.com/questions/1972242/auto-reload-of-files-in-node-js
19:25 < timeturne> Owner: you can separate your js files and have them communicate over pubsub
19:26 < bradleymeck> Owner: if you change a function on a live socket how would you know it did not change while a socket was expecting the old one during execution?
19:26 < oren1> Spion: interesting. thanks
19:26 < bradleymeck> timeturne has a decent idea
19:26 < timeturne> that is one way you can keep part of the processes running and restart the file you changed
19:26 < Owner> bradleymeck: because it is my code
19:27 < bradleymeck> Owner no programmer is perfect, if you change long running connections, i doubt you wont hit some code that has been replaced when old code had started the connection's lifecycle
19:27 < Owner> supervisor is cool, but ...
19:28 < coolnalu> use meteor
19:28 < bradleymeck> if restarting is that deadly, setup a connection manager process, and use separate services, look into substack's seaport perhaps? but you never want to change the function on a live server unless you want to deal with lifecycle collision with old and new functionality
19:29 < timeturne> +1 ^
19:29 < Owner> i see, that makes sense
19:29 < Owner> so run my client sockets on one node process, my server sockets on another, and htne have glue in between
19:30 < timeturne> yea
19:30 < Owner> supervisor is nice also
19:31 < tobo> bloat
19:31 < bradleymeck> tobo everything is bloat to you, yes?
19:31 < timeturne> it is bloat, tj is right
19:31 < tobo> haha no im just teasing
19:32 < timeturne> :P
19:32 < Owner> brb
19:37 < Spion> Owner: or just use learnboost up. zero downtime reloads.
19:37 < Spion> ah he left.
19:37 < Spion> seems like up is the answer for everything.
19:38 < tobo> not for him, he likes to live in anti-bloat land
19:38 < tobo> where only using node core is the way to go
19:39 < Spion> how heavy can restarting be anyway.
19:39 < Spion> if it takes > 5 seconds, one is probably doing it wrong
19:40 < tobo> yeah
19:40 < tobo> we have a big bug with npm right now causing super slow boots
19:40 < tobo> and it's still only 2.5s
19:40 < TechnoCat> anyone know of a good <audio> library for the web?
19:45 -!- ryah changed the topic of #Node.js to: try out building Node with Ninja https://gist.github.com/83e2bff4d3d06d2324cd
19:47 < PringlesCan> Does anyone use multiple domains to make downloads parallel to speed things up? I would think the files would need to be large enough for the multiple DNS queries to make sense, right?
19:53 < bradleymeck> PringlesCan: i would avoid that unless you are doing serious amounts of data that are not able to cap end to end transmission speeds
19:53 < mscdex> what's the purpose of ninja? i'm just not getting it....
19:54 < tobo> it's like make but just lower level
19:56 < mscdex> ok, but something like gyp is still needed right?
19:59 < mscdex> looks like it
19:59 < tobo> yeah unless you wanted to write them by hand
19:59 < tobo> not that gyp looks much better :s
19:59 <@ryah> mscdex: ninja is a replacement for make
19:59 <@ryah> which is faster
19:59 <@ryah> gyp is a meta-build system
19:59 <@ryah> ninja is a build system
19:59 < mscdex> yeah
20:00 < tobo> ryah what sort of decrease did you see on node?
20:00 <@ryah> if you didn't care about supporting visual studio or xcode, you could just write ninja files manually
20:01 <@ryah> tobo: ?
20:01 < tobo> i saw your tweet about using it to build node
20:01 < tobo> just curious how much faster it was
20:01 <@ryah> but gyp supports generating ninja and we define our build in terms of gyp - so supporting ninja was trivial for us
20:01 <@ryah> tobo: oh, i haven't measured
20:02 <@ryah> chrome is using ninja for production builds now
20:02 < mscdex> well, as long as i don't have to learn another build system, it's all good ;-)
20:02 <@ryah> i.e. it's a serious project
20:02 < tobo> yeah that sounds promising
20:02 < tobo> i saw it a year or so ago but i dont have a need for that personally
20:02 < tobo> make is fine for me
20:03 <@ryah> it doens't matter until your project is really large - like chrome
20:03 <@ryah> somehow evan (the ninja guy) has figured out how to cut down on incremenetal build times
20:03 <@ryah> when dealing with hundreds of thousands of source files
20:03 <@ryah> (like they have in chrome)
20:04 <@ryah> node is only thousands of source files - so probably doesn't matter much
20:04 <@ryah> :)
20:04 < mscdex> node.js rules!
20:05 <@ryah> it's like 3sec build vs 1sec
20:05 <@ryah> but in chrome it's like 15sec vs 5sec
20:05 <@ryah> which makes a big difference
20:05 <@ryah> (inc build times)
20:43 < brianc> wanna see what I'm building with node?
20:43 < TechnoCat> yes
20:43 < brianc> http://transferly.com - browser to browser streaming file transfers
20:43 < brianc> it's noooot finished
20:43 < brianc> but streams = the bomb
20:43 < substack> streams are pretty great
20:43 < brianc> also - you ahve to leave your browser open to share a file since it doesn't rest on the server
20:44 < TechnoCat> i read that as browser to browser screaming for some reason
20:44 < brianc> that is my next project
20:44 < substack> ryah: hah that ninja thing is great, tackling one of the unix haters talking points
20:46 < TechnoCat> so i drag a file there and what happens
20:46 < brianc> it should give you a link
20:46 < brianc> you send that link to someone
20:46 < brianc> they can download the file
20:46 < TechnoCat> http://transferly.com/file/914c37de-a61a-4d30-89ce-7ee44619e968
20:46 < brianc> i need a way better UX on the thing -- i still working on that
20:47 < brianc> technocat - you gotta leave your browser open...i am unable to receive your file. perhaps there is a bug? heh
20:47 < TechnoCat> it is open
20:47 < RLa> yeah, i'm downloading it
20:47 < brianc> oh wait, no getting the file now
20:47 < brianc> just very slow
20:48 < TechnoCat> i wonder how many people are downloading it
20:48 < RLa> you should upgrade your upstream speed
20:48 < RLa> everyone :)
20:48 < Pilate> lol
20:48 < Pilate> yeah
20:48 < hotch> lol
20:48 < hotchkiss> UPGRADE TIME.
20:49 < brianc> shoes with toes!
20:49 < TechnoCat> haha
20:49 < TechnoCat> yeah
20:50 < TechnoCat> is transferify using my connection? lol
20:51 < brianc> technocat what do you mean?
20:51 < TechnoCat> like my facebook is super slow right now
20:51 < Pilate> yes techno, thats the point :)
20:51 < brianc> yeah you're uploading
20:51 < Pilate> we're all leeching your image from you
20:51 < brianc> when you upload on a cable modem generally your download slows
20:52 < brianc> ah nothing like a process.uncaughtException
20:53 < TechnoCat> only, hopefully it is good debug info
20:53 < TechnoCat> do you want my console's error outputs?
20:53 < brianc> sure 
20:53 < brianc> i think i know the issue
20:54 < brianc> race condition when trying to kick off two uploads at almost the same time
20:54 < TechnoCat> http://hastebin.com/bajaneteba.txt
20:55 < TechnoCat> i'm glad everyone wants to see me
20:55 < TechnoCat> i feel special
20:55 < brianc> haha
20:55 < brianc> yah i'm going to add transfer progress so you can see how many peeps are downloading from you
20:56 < Pilate> definitely kinda cool brianc, keep us updated :D
20:56 < TechnoCat> how did you generate the guid's?
20:56 < brianc> muchas gracias, will do!
20:56 < brianc> node--uid
20:56 < brianc> node-uuid
20:56 < Pilate> and/or if youre doing it open source, there might be some intrested devs
20:56 < brianc> i not a huge fan of guids in links
20:57 < Pilate> yeah pastebin/imgur/youtube style randomness tend to loook more friendly, meh
20:57 < brianc> Pilate - cool I'm kinda sitting on it right now because I'm about to go to europe for a few weeks for my honeymoon. when I get back I'll see where I wanna take it. currently I just refactoring the internals before bed
20:58 < Pilate> bah! it would be an easy way for me to send tv shows to a friend ;) guess itll be fine how it is
20:58 < brianc> Pilate yeah you can definitely use it
20:59 < brianc> Pilate my friend sent me an episode of boardwalk empire
20:59 < Pilate> haha, awesome :D
20:59 < brianc> Pilate though I need to do some stuff w/ setting content length properly so the downloader can get a progress indicator
20:59 < Pilate> i dont imagine resume would be possible?
20:59 < aj910martin> New to JS and starting with node. Just making something sure… when we execute `http.createServer(function(req, res) { … }).listen(…), we are overriding the function? (Not sure if it is correct to call `createServer` a function)
21:00 < brianc> Pilate it would be possible w/ html5 file api, but the "writer" parts of the api aren't really ready yet
21:00 < Pilate> no aj, youre passing a function to be run when it completes
21:00 < Pilate> ahh someday :D
21:01 < mscdex> aj910martin: you're not overriding anything
21:01 < mscdex> aj910martin: that's creating a new http.Server instance and passing in a 'request' event handler and then listening on whatever port
21:02 < RLa> it's just a function call with the handler function as argument
21:02 < aj910martin> Pilate mscdex RLa Aha!! Got it!
21:03 < RLa> you should check out basic js syntax
21:03 < RLa> aj910martin, http://dailyjs.com/tags.html#js101
21:04 < aj910martin> RLa: Thanks!
21:10 < aj910martin> RLa: Just curious on some other aspect of JS. I recollect from somewhere that JS allows to add data members to objects after initialization (after creating the instance). Not possible in OOP languages like Java. What was the motivation behind this idea? (if I am correct with my recollection)
21:12 < VesQ> it is a lovable thing
21:12 < RLa> aj910martin, well, everything (almost) is object and you can add properties to objects
21:13 < RLa> i think in languages like java where you have static type system it just don't make sense
21:18 < tnorris> using child_process.send(message), I'm having trouble sending a Buffer. each time I have to use .toString() before I send it.
21:21 < tnorris> I can send every other native type (e.g. Objects, Numbers, Strings), but not buffers.
21:21 < tnorris> any ideas?
21:23 < larz> Anyone know any good Git modules? I'd prefer something that's not calling child processes, and I need good git log support.
21:25 < larz> Ah I think I found a pretty good one, https://github.com/tbranyen/nodegit
21:39 < TehShrike1> Anyone here use the connect middleware?  And if so, how do you debug errors, since connect seems to catch them and handle them by just returning HTTP 500 and not logging anything anywhere?
21:40 < TehShrike1> d'oh, I'll bet it's http://www.senchalabs.org/connect/errorHandler.html isn't it
21:41 < tjholowaychuk> TehShrike1 yeah that's the dev error handler that renders the stack trace in html etc
21:42 < tjholowaychuk> you can replace that with whatever custom stuff you need in production
21:47 < TehShrike|Work> Does connect look at a function's argument count to know whether or not it can pass it error objects?
21:47 < TehShrike|Work> Or something?
21:47 < tjholowaychuk> yup
21:47 < TehShrike|Work> Well that's smart
21:48 < tjholowaychuk> not really :p it's just a property
21:49 < TehShrike|Work> s/smart/handy/
21:49 < TehShrike|Work> ;-P
21:54 < TehShrike|Work> tjholowaychuk: do you have to put the .use call where you provide your error-handling function in a specific place in the list of .use calls for it to handle errors that happen inside the other functions?
21:55 < TehShrike|Work> I haven't fully absorbed how the order of .use() calls matters
21:55 < tjholowaychuk> TehShrike|Work: they're just executed in sequence
21:55 < tjholowaychuk> same with the error ones (they behave the same way)
21:55 < tjholowaychuk> so typically at the very bottom
21:56 < TehShrike|Work> Good to know, thanks
21:58 < thealphanerd> anyone in here live in la and happen to be renting an apartment?
21:59 < jorenl_> I have a socket.IO event-based "live" app running. I'd like to be able to make an ajax request to my node server (express) , and the server should have access to data linked to the users' socket.IO session. How should I start doing that? Anything to get me started?
22:00 < EyePulp> I'm using mike al's request module - how do you do a callback when using .pipe()?  e.g.:  the example here:  https://github.com/mikeal/request#streaming
22:01 < jorenl_> Should I just have the client send some kind of session ID back to the server, or is there an easier way for my script to identify one user?
22:01 < EyePulp> I'd like to have a callback called after finishing the download via request
22:01 < TehShrike|Work> Hey cainus, you around?
22:01 < maxogden> EyePulp: http://nodejs.org/api/stream.html#stream_event_end
22:02 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
22:02 < EyePulp> maxogden: I *think* I get that...
22:02 < mikeal> EyePulp: just listen for "end"
22:03 < EyePulp> If this is the example:  request('http://google.com/doodle.png').pipe(fs.createWriteStream('doodle.png'))   what do I attach to listen for the end?
22:03 < EyePulp> hey - it's the man himself!  =)
22:03 < EyePulp> thanks for the module - it's super boss.
22:04 < EyePulp> would it be request.on('end',function(){ //whatever } );
22:07 < EyePulp> nope
22:07 < EyePulp> mikeal: I'm not sure what I would attach the event listener to
22:07 < mikeal> var r = request('http://google.com/doodle.png').pipe(fs.createWriteStream('doodle.png'))
22:07 < mikeal> r.pipe( .. _
22:07 < mikeal> er
22:08 < mikeal> r.pipe( … )
22:08 < mikeal> r.on('end')
22:08 < EyePulp> ahhhh
22:14 < EyePulp> hrm… r.on('end',function(){ console.log('woot!');});  doesn't ever get printed to stdout
22:15 < EyePulp> but the file is indeed created properly
22:29 <@isaacs> EyePulp: don't do it like the code that mikeal just pasted
22:29 < EyePulp> isaacs: I'm all ears =)
22:29 <@isaacs> EyePulp: var r = request(tehUrls); r.pipe(theWriter); r.on('end', console.log.bind(console, 'woot'))
22:29 <@isaacs> because .pipe() returns the dest
22:30 <@isaacs> so you can a.pipe(b).pipe(c); instead of a.pipe(b);b.pipe(c)
22:31 <@isaacs> so, r = request(u).pipe(w) sets r to w, not the request object
22:31 <@isaacs> and the writer doesn't emit end
22:31 <@isaacs> make sense?
22:31 < EyePulp> ah, yeah, I'm getting the pipe, not the request
22:31 <@isaacs> right
22:31 <@isaacs> you're getting the writer
22:31 < EyePulp> or 'r' is
22:31 <@isaacs> ya
22:31 < EyePulp> yeah
22:32 < EyePulp> it's sad that I made that make sense in my head thinking about jquery and .append(); versus .appendTo();
22:33 < EyePulp> isaacs: thanks for the clarification
22:33 <@isaacs> np
22:33 <@isaacs> otherwise, everythign else mikeal said is rigth
22:40 < qballer> hey guys, is there a node.js idle event that can be fired when the event loop callback queue is empty?
22:41 < hotchkiss> What's the slate for 1.0?
22:41 < hotchkiss> TBD!
22:42 < FireFly> nextTick would fire next time the event loop queue gets empty, I think?
22:42 < FireFly> Of course, it's not so much an idle event as.. stuffing a new event in there and waiting for it to arrive at the top :P
22:43 < FireFly> Hm, actually, disregard that
22:43  * FireFly grabs some sleep instead; apparently too tired to think clearly
22:52 < Industrial> I want to try to use WebStorm 5 to remotely debug my NodeJS program. How do I change the debugger port? I tried: node --debug-brk --debugger_port 8881 myapp.js but that yields the --help. am I misunderstanding the node man page?
22:53 < Nuck> What happens if I throw an error from the uncaughtException handler?  Does it break shit?
22:56 < Industrial> actually, node --debugger gives me node --help output aswell
22:56 < zzarcon_> Hi all
22:56 < zzarcon_> I have a question
22:56 < Industrial> but it's listed in the v8 options :S
22:57 < zzarcon_> How I can send an email with Node?
22:57 < mscdex> zzarcon_: https://npmjs.org/browse/keyword/smtp
22:57 < mscdex> zzarcon_: https://npmjs.org/browse/keyword/email
22:58 < zzarcon_> mscdex: which do you recommend?
22:58 < mscdex> i don't send email, so i cannot say
22:58 < zzarcon_> okei
22:58 < zzarcon_> thank you very much
22:59 < mscdex> Industrial: --debugger requires a bool argument according to `node --v8-options`
22:59 < larz> Industrial, I think you can only use the --debugger option when V8 is compiled with "debuggersupport=on" I may be wrong though. I'm not sure if Node compiles with that on or off.
23:00 < Industrial> well, I just wanna run node --debug-brk but on a different port ..
23:00 < larz> Ah thanks mscdex I didn't know that.
23:00 <@ryah> substack: unix haters?
23:01 < larz> Industrial, what happens when you use --debug-brk?
23:01 < hotchkiss> mscdex: awesome work on node ftp buddy
23:01 < Industrial> the debugger starts on port 5858 and stops execution :P
23:01 < hotchkiss> mscdex++
23:03 < larz> Industrial, Works for me doing node --debug-brk=PORT app.js
23:03 < Industrial> ..oh.
23:04 < substack> ryah: from the unix haters handbook
23:04 < Industrial> yep there we go, cheers larz 
23:04 < larz> Industrial Awesome, cheers.
23:05 < mscdex> hotchkiss: glad you like it
23:05 < hotchkiss> saved us a ton of time.
23:06 <@ryah> substack: heh - never seen that before
23:06 <@ryah> :)
23:10 < rio{> after a couple of request my app crashes and gives me "Error: implicit bind failed"
23:10 < rio{> I am using dgram
23:11 < rio{> and also Error: bind EMFILE
23:11 < qballer> how long would you expect a tick to take.
23:12 < qballer> process.nextTick(callback);
23:12 < mscdex> qballer: that depends on how many events there are and how long callbacks and event handlers take ;-)
23:12 <@ryah> rio{: ulimit -n
23:13 < qballer> I understand that. I would suggest something else: how long do you expect a fairly busy server to take a tick and how long on rather idle time.
23:13 < rio{> ryah: 256
23:13 <@ryah> rio{: seems you're using 256 fds ?
23:14 < jocafa> OT: is there a way to clone just a specific file or two out of a repo in one shot?
23:14 < qballer> I'm considering adding idle event mechanism with process.nextTick(callback) and than check the time between each of them.
23:15 < qballer> I got to say that node.js is realy rapid in the speed you develop testing is kind of heard. node-inspector is really handy. 
23:16 < mscdex> qballer: there's also gc that can happen, especially because node currently sends an idle notification to v8  when there is "nothing to do" so that it can do any needed gc
23:17 < mscdex> qballer: but you can disable gc on idle notification for comparison purposes
23:18 < qballer> does the gc gets called even if "never" on idle?
23:18 < qballer> any way to ride that wave?
23:18 < rio{> ryah: Apparently :S It might have to do with me accidentaly putting the close()-ing socket part inside a comment block? :p
23:18 <@ryah> rio{: yep
23:19 <@ryah> rio{: you can increase your ulimit -n if you want - 256 is pretty low
23:19 <@ryah> but sounds like a bug
23:20 < lowtax> javascripts popularity is almost completely independent of its qualities as a programming language
23:20 < jocafa> dunno. i enjoy writing js more than most languages.
23:21 < jocafa> </opinion>
23:21 < mscdex> qballer: if you disable the idle notifications, the gc will collect when needed, just not as quickly as it would if it was prompted to check for needed gc during idle
23:21 < lowtax> it is a language with more than its share of terrible features
23:21 < mscdex> qballer: some people have seen a massive improvement with idle notification disabled
23:21 < qballer> can I call gc?
23:22 < mscdex> qballer: only if you enable the capability from the command line: `node --expose_gc`. that gives you the gc() function inside a node script
23:23 < qballer> and I can have some kind of code if gc is defined than run something.
23:23 < qballer> nice.
23:24 < TooTallNate> qballer: nextTick is not a proper "idle notification" callback, especially after the change in v0.9 to it
23:24 < ctult> Is it bad practice to use "with" anymore?
23:24 < TooTallNate> ctult: pretty much ya
23:24 < jocafa> yeah, 'use strict' won't even let you use 'with'
23:25 < qballer> gc is important since I will probably be taking the nextTick all the time I will check if very short time elapsed. Than either run idle time app activity or gc()
23:25 < ctult> use strict, at least in my opinion, is stupid.
23:25 < jocafa> jus' sayin'
23:25 < larz> ctult: Same.
23:25 < qballer> TooTallNate, why not?
23:25 < qballer> how would you implement it?
23:25 < ctult> I don't see why with is so bad.
23:25 < TooTallNate> qballer: node needs to offer an API for it. it doesn't currently
23:26 < ctult> Just as bad as 'if' or 'for'.  You don't know if that statement will run all the time..
23:26 < qballer> and call nextTick within nextTick with process time calculation is bad?
23:26 < tanepiper> Richard "Lowtax" Kyanka
23:27 < lohkey> qballer: there was talk about making nextTick, literally the nextTick
23:27 < TooTallNate> qballer: see https://groups.google.com/d/msg/nodejs-dev/DvENgK8Nubw/zsTXObpkZyIJ for the long history of it
23:27 < lohkey> which would break that logic of yours, because it will bypass the event loop
23:27 < qballer> the next callback or the next call back making a full round ?
23:27 < lohkey> it wouldn't be an aysnc call, thats the best way to reason about it
23:28 < lohkey> as it would bypass the rest of the event loop
23:28 < ag4ve> what do y'all use for an mvc framework? i'm thinking railway looks good, but figured i'd ask and see if i missed anything / features of something else.
23:28 < qballer> what about setTimeOut (callback,0,args); ?
23:29 < jocafa> substack:  lol https://github.com/joyent/node/blob/master/deps/npm/lib/substack.js
23:29 < lohkey> don't quote me, but i believe timers are also prioritized, last i checked they were a separate RB tree outside of the underlying ev event loop
23:30 < TooTallNate> qballer: that's a little closer to what you actually want
23:30 < lohkey> i'm certain last time i checked timers were checked on each loop iteration before anything else
23:30 < qballer> TooTallNate, improvements? 
23:30 < lowtax> tanepiper, Tane "@tanepiper" Piper
23:30 < TooTallNate> qballer: nope. that's as close as you can get without a dedicated process.on('idle') API or similar
23:32 < WarheadsSE> would anyone have any thoughts on this? https://github.com/archlinuxarm/PKGBUILDs/issues/242
23:33 < tanepiper> lowtax: Do you have stairs in your house?
23:33 < mscdex> isn't there like a setImmediate that can be used?
23:33 < mscdex> or is that something different?
23:35 < lowtax> tanepiper, no, but grandma does
23:36 < lowtax> tanepiper, the secret was not so terrible after all, just took a decade to figure it out
23:40 < ctult> What are some good alternatives to JSDoc out there?
23:40 < ctult> Javadoc*
23:40 < lowtax> tanepiper, you like smartos?
23:41 < tanepiper> lowtax: so far, haven't used it much yet except in vmware. But for getting node/mongo instances up fast, yes it's pretty impressive
23:42 < lowtax> free or SDC
23:42 < larz> ctult: Not sure of many but JSDoc seems to be used a bunch, format wise so I wuld just stick to that.
23:43 < tanepiper> SDC?
23:43 < lowtax> smart data center
23:46 < tanepiper> oh free, i haven't given joyent any money yet and since i mainly consult and freelance outside my dayjob, depends if the client wants it. so far, no
23:46 < lowtax> check out project-fifo then
23:47 < WarheadsSE> TooTallNate: got a sec to have alook at mr wonky ssl issue?
23:47 < TooTallNate> WarheadsSE: not sure how much help i can be but i'll take a look
23:47 < tanepiper> oh i'll let our sysops guy at work know about this - we're using smartos in our own datacenter
23:48 < WarheadsSE> Basic issue, getting odd message on ssl connections. most things say, ohai, use bundled.
23:48 < WarheadsSE> except I am doing that because of the previous problems with the neon_probe crap
23:49 < WarheadsSE> gah.
23:49  * WarheadsSE facepalm
23:49 < WarheadsSE> node = built, v8 = shared
23:49 < WarheadsSE> hurrr
23:49 < lowtax> tanepiper, the networking can be a bit tricky/buggy last i tried, but its a decent interface over raw smartos
23:50 < lowtax> once you can create your own datasets, its all golden
23:50 < TooTallNate> WarheadsSE: you want a node binary of mine to try maybe?
23:50 < lowtax> tanepiper, i am dissapoint that you rep ubuntu on tinynodes
23:50 < lowtax> ubuntu makes me sad
23:51 < WarheadsSE> your's is a pi binary, fully bundled?
23:51 < tanepiper> lowtax: SEO :p personally i hate it, but heh my current consultancy client uses it on AWS so mehh
23:51 < TooTallNate> ya it's all statically compiled, not specifically for pi but it was with that in mind
23:51 < tanepiper> it's easy to manage at least
23:52 < lowtax> yeah once you disable all the crap for end users
23:52 < WarheadsSE> Alright, but what -march was it built for, and VFP or not?
23:53 < TooTallNate> WarheadsSE: i think i just used the defaults there, i've been meaning to recompile with the recommended pi flags
23:53 < tanepiper> oh ubuntu server, desktop ubuntu can kiss my arse - especially since they launced unity
23:53 < lowtax> its all bad
23:53 < WarheadsSE> Whats your underlying OS?
23:53 < wolfeidau> Anyone know of any issues using ab (Apache Bench) with nodejs on OSX seem to be killing node with it atm
23:53 < TooTallNate> WarheadsSE: raspbian
23:54 < tanepiper> wolfeidau: are you getting peer reset stuff?
23:54 < lowtax> mark shuttleworth.....nope!
23:54 < TooTallNate> WarheadsSE: the binary was cross-compiled on my mac though
23:54 < WarheadsSE> K, then you ought to be able to make the VFP2 stuff without issue.
23:54 < lowtax> not even close
23:54 < wolfeidau> tanepiper: Yeah to my local system :( and issues hitting 127 addresses
23:54 < tanepiper> wolfeidau: http://forrst.com/posts/Fixing_ApacheBench_bug_on_Mac_OS_X_Lion-wku
23:54 < wolfeidau> tanepiper: OMG thank you! 
23:54 < lowtax> stop using a mac
23:55 < lowtax> what is wrong with you
23:55 < WarheadsSE> heh
23:55 < wolfeidau> lowtax: I am running node in SmartOS 
23:55 < lowtax> never heard of linux, illumos, or freebsd
23:55 < wolfeidau> haha
23:55 < TooTallNate> WarheadsSE: try it out and let me know how it goes https://github.com/downloads/TooTallNate/node/node-v0.8.9-pre-arm
23:56 < lowtax> wolfeidau, cool cool
23:56 < lowtax> stay on the cutting edge, my friend
23:56 < wolfeidau> lowtax: Node is running in smartos just wanted to bench mark it from oSX and saw APR errors and resets
23:56 < lowtax> wolfeidau, its a mac...
23:57 < wolfeidau> lowtax: Yeah fart app hosting device.. i know
23:57 < tanepiper> wolfeidau: i had a pain compiling it because apple like to mess with developers, but eventually got it compiled
23:57 < lowtax> my job is done
23:57 < lowtax> developers should boycott apple
23:57 < WarheadsSE> TooTallNate: checking now
23:57 < wolfeidau> tanepiper: Did you try an alternatives? 
23:58 < WarheadsSE> TooTallNate: but on a nitrogen board
23:58 < tanepiper> wolfeidau: like what?
23:59 < wolfeidau> tanepiper: No idea there are some older ones but I gather you had the same idea as me, just use what works aka ab
23:59 < WarheadsSE> works fine TooTallNate 
23:59 < tanepiper> yea, pretty much - ab does the job
23:59 < tanepiper> wolfeidau: http://simon.heimlicher.com/articles/2012/07/08/fix-apache-bench-ab-on-os-x-lion
23:59 < tanepiper> first comment is what fixes the build issues
--- Log closed Sat Sep 08 00:00:04 2012
