--- Log opened Thu Feb 07 00:00:19 2013
--- Day changed Thu Feb 07 2013
00:00 < Gambit--> the reason we're looking at node.js though is because we want the community surrounding it.
00:00 < Gambit--> and to be able to leverage all of the pre-existing.
00:00 < CoverSlide> Gambit--: I think it has tcp, udp, and http
00:00 < CoverSlide> not sure about tls
00:00 < othiym23> the guy behind luvit is creationix, who's a longtime Node contributor, and it's more or less Node, and Rackspace uses it for stuff internally, so I imagine it's featureful enough to get the job done
00:00 < Gambit--> that's what I'm seeing.
00:00 < Gambit--> nice.
00:00 < Gambit--> well porting lua is trivial.
00:01 < Gambit--> maybe I'll do both luajit and node.js as a fast/slow performance mode.
00:01 < CoverSlide> luvit would most likely win
00:01 < Gambit--> mode, not competition :)
00:01 < othiym23> if you're targeting something other than x86 or ARM for yr microkernel, luajit's a lot easier to port than V8, IMO
00:01 < CoverSlide> ok
00:01 < Gambit--> othiym23: Yeah, I've done a lot of lua work in the past.
00:02 < Gambit--> I don't believe luajit supports arm, though, unless that's changed recently.
00:02 < CoverSlide> maybe not officially, but there's probably fewer moving parts
00:02 < CoverSlide> i think i've heard of a few people using luvit on their ARM machines
00:02 < Gambit--> oh, it'd be a "here, have a pile of cash" for the luajit guy kinda solution.
00:03 < Gambit--> man, all of these globals... so obnoxious.
00:04 <@konobi> http://luajit.org/performance_arm.html
00:04 < Gambit--> oh, go mike!
00:05 < Gambit--> I didn't know he'd done a mips port too
00:05 < Gambit--> apparently I haven't been paying a lot of attention in the last year :)
00:05 < CoverSlide> oh sweet
00:06 < Gambit--> and 2.0 released
00:06 < Gambit--> good on him
00:06 < Gambit--> o/ bnoordhu1s
00:08 < CoverSlide> no SPARC? psh, garbage
00:13 <@konobi> mscdex: know of any weird/wonderful things using node-ncurses?
00:14 < _pash> whats a good awy to get into node for someone who's a beginner in javascript?
00:17 < CoverSlide> step 1: learn javascript
00:17 < CoverSlide> step 2: learn node
00:17 < CoverSlide> step 3: PROFIT!
00:18 < Gambit--> _pash: It helps if you have something specific you want to achieve :)
00:18 < iwalkbarefoot> step 2.5: realize that what you use currently is boring as hell and have trouble going to work everyday
00:19 < _pash> Gambit--: i want to learn how to get around node, im loooking into web design, and well im not really sure, but i want to aim at getting to know expres.js, socket.io and angular.js
00:19 < Gambit--> iwalkbarefoot: you obviously need a new job :)
00:19 < Gambit--> _pash: website design or web server design?
00:19 < CoverSlide> especially if they don't let you wear shoes
00:20 < iwalkbarefoot> Gambit--: don't I know it :)
00:20 < isaacbw> I just set up my new 24" 1080p monitor
00:20 < isaacbw> this is like
00:20 < isaacbw> a whole new world
00:20 < Gambit--> hehe
00:20 < isaacbw> WHAT IS A COMPUTER
00:20  * CoverSlide has a 32" monitor :P
00:20 < isaacbw> I have to turn my head to see from one side to the other
00:20 < isaacbw> man, I think this is a good size for me
00:20 < isaacbw> 32" sounds insane
00:20 < asturel> CoverSlide 1080p?
00:21 < asturel> or 25xx
00:21 < isaacbw> setting up a new archlinux installation is so much fun as well
00:21 < CoverSlide> probably, lemme see
00:21 < asturel> 1080p has low PPI imho
00:21 < CoverSlide> 1440
00:21 < asturel> for monitor usage
00:21 < isaacbw> I had my desktop sitting unused after a move while doing all my work on a 13" 720p ultrabook
00:21 < iwalkbarefoot> isaacbw: damn you for getting this stuck in my head: https://www.youtube.com/watch?v=sVxUUotm1P4
00:21 < AntelopeSalad> are any of you guys using the korean 1440p 27"s?
00:21 < isaacbw> iwalkbarefoot, lol
00:22 < _pash> Gambit--: for now mostly websites, but later server, once i understand it more, and get a good grip on javascript and other stuff
00:22 < _pash> Gambit--: i still dont quiet get what i can do with it
00:22 < isaacbw> now I just have to set up my old 18" as a second monitor for docs
00:22 < isaacbw> so many lines of code!!!!
00:22 < CoverSlide> you can create any website that exists in it
00:22 < Gambit--> _pash: I would focus on the clientside stuff for now, then, as node.js is mostly targetted at backend type stuff.
00:23 < _pash> Gambit--: would you give any good tips on what to do and where to look? ive been all over code academy for now
00:23 < isaacbw> I don't know what this conversation is about, but you should be cool and learn angularjs
00:23 < isaacbw> code academy is pretty good
00:23 < Gambit--> yeah, I hear good things about it.
00:23 < Gambit--> I'm not a good person to ask that question of; too much internalized knowledge.
00:23 < isaacbw> I haven't used it myself either, but I met one of the guys that works there
00:24 < CoverSlide> There's smashing node that focuses on writing a web server
00:24 < isaacbw> he was in charge of data analysis to improve the user experience
00:24 < isaacbw> yay for emperical development!
00:24 < _pash> Gambit--: would you give me some tips maybe? how to progress what to build etc?
00:25 < isaacbw> do you have a project in mind?
00:25 < isaacbw> don't learn node just to learn node
00:25 < isaacbw> work towards a project
00:25 < isaacbw> plan on rewriting it many many times
00:25 < CoverSlide> try making a twitter clone
00:25 < isaacbw> heh
00:25 < CoverSlide> or a reddit clone
00:25 < CoverSlide> or HN clone
00:25 < _pash> yeah i do but i think its too complex for my knowledge right now
00:25 < isaacbw> nah
00:25 < CoverSlide> maybe try HN first
00:26 < CoverSlide> probably the simplest one
00:26 < isaacbw> my one quip with this monitor is the anti-glare coating
00:26 < isaacbw> it's a little distracting
00:26 < isaacbw> sort of... greasy
00:27 < CoverSlide> also, once people learn websockets, usually next on the list is some kind of web-based chat
00:27 < CoverSlide> everyone running node does that at some point
00:29 < _pash> CoverSlide: yeah i wanted to do that, but again too complex for now
00:29 < _pash> CoverSlide: i dont really know much about how the net and server stuff side works
00:29 < _pash> CoverSlide: i was suggested to read "learning node"
00:30 < CoverSlide> But when I'm way up here! It's crystal clear! That now I'm in a whole new world with you!
00:30 < CoverSlide> Don't you dare close your eyes!
00:31 < MiracleBlue> isaacbw: I sorted the zip stuff :)
00:31 < MiracleBlue> Managed to find a zip library that actually did what it said
00:32 < CoverSlide> unzip-stream?
00:32 < mscdex> konobi: not offhand, why?
00:32 < MiracleBlue> Nope it was something similar though
00:32 < MiracleBlue> Let me check
00:33 < MI6> joyent/node: isaacs master * 5cc3569 : Merge remote-tracking branch 'ry/v0.8' into master  Conflicts: 	AUTHORS 	 (+19 more commits) - http://git.io/6cnlug
00:33 < _pash> CoverSlide: if for example i wanted to build an 'image upload' site thing then node is the way to go?
00:33 < CoverSlide> you can use it with node, sure
00:33 < CoverSlide> s/use/do
00:38 < _pash> great thanks see you
00:38 < superjoe> if I create a native module and use threads, will I have access to the main thread's memory?
00:39 < deanclkclk> so I am new to node.js
00:39 < deanclkclk> and I am looking some tutorial on youtube
00:39 < deanclkclk> I found this video
00:39 < deanclkclk> is this true http://www.youtube.com/watch?v=1e1zzna-dNw
00:39 < deanclkclk> ?
00:40 < bnoordhuis> Gambit--: "why do you cast your module init functions to a prototype with a different signature" <- unfortunate side effect of maintaining api backwards compatibility
00:40 < bnoordhuis> it wasn't my idea btw
00:40 < bnoordhuis> i just signed off on it :/
00:40 <@konobi> mscdex: just looking for shortcuts, ui/widgetey-wise
00:40 < CoverSlide> deanclkclk: is true that people are jealous and dislike node because they don't know how to use javascript? yes, that's been true for a long time
00:42 < superjoe> CoverSlide, did he link to the gar1t video?
00:42 < superjoe> I love that one
00:43 < isaacbw> MiracleBlue, awesome
00:43 < CoverSlide> it was the BlackwaterOpsDotCom
00:43 <@konobi> oh, SEO baiter
00:43 < superjoe> deanclkclk, "javascript is slow" is a false statement
00:44 < superjoe> deanclkclk, v8 is faster than python and ruby
00:44 < crabtree> javascript can be slow
00:44 < crabtree> but v8 is not slow
00:44 < crabtree> actually
00:44 < crabtree> a javascript implementation can be slow*
00:44 < deanclkclk> let me ask u guys something isn't js a single thread runtime?
00:44 < Gambit--> bnoordhuis: Ah, that's... unfortunate.  Why not modify the 10 functions that don't follow that convention, so at least anyone writing new code copies good, sane code rather than the other way around?
00:44 < superjoe> crabtree, in the context of this video: http://www.youtube.com/watch?v=1e1zzna-dNw
00:44 < superjoe> "javascript" means "v8 javascript"
00:44 < Gambit--> deanclkclk: Js/v8 isn't, node is.
00:45 < crabtree> oh god
00:45 < crabtree> that video superjoe
00:45 < crabtree> that guy is a moron
00:45 < Gambit--> (for some value of 'is')
00:45 < superjoe> crabtree, it's interesting... he's so opinionated and so uninformed at the same time
00:45 < bnoordhuis> Gambit--: because it's not just those 10 functions, it's all add-ons out there
00:45 < crabtree> i can't do that superjoe :P
00:45 < superjoe> me either
00:45 < crabtree> i try not to spout opinions if i'm not educated on something
00:45 < bnoordhuis> and i hope for the love of $deity that people don't look at node core source for inspiration for add-ons
00:46 < superjoe> haha, he says "compiled == lightweight"
00:46 < Gambit--> bnoordhuis: yeah - but at least choose one direction and stick with it :)
00:46 < CoverSlide> export deity=Satan
00:46 < crabtree> yeh superjoe
00:46 < crabtree> so dumb
00:46 <@konobi> the company is one of those SEO link farm groups... it's an obvious seo linkbait
00:46 < deanclkclk> I think it is Gambit- because, if u have a callback function on an ajax request and then after hit a loop...the callback won't get executed
00:46 < deanclkclk> isn't that a true single thread runtime?
00:46 < superjoe> deanclkclk, this guy isn't worth listening to, he hasn't even done a bare minimum of understanding what node.js does
00:46 < Gambit--> bnoordhuis: anyways, you should look at dlmopen, it's awfully close to what I need.
00:46 < superjoe> THIS, on the other hand, is awesome: http://www.youtube.com/watch?v=bzkRVzciAZg
00:47 < CoverSlide> deanclkclk: yes, infinite loops are bad wherever you put them, even on threaded runtimes
00:47 < deanclkclk> but, if js is a true multi thread runtime...if there is a loop..why has the callback executed?
00:47 < Gambit--> deanclkclk, you can use isolates/locker to access v8 from multiple threads.
00:48 < deanclkclk> @ CoverSlide 
00:48 < deanclkclk> hmmm
00:48 < deanclkclk> Gambit-..what is this V8 u speak of?
00:48 < superjoe> Gambit--, whoa, I need something like that... can you give me more information into how I can have a thread in node and share memory?
00:48 < Gambit--> deanclkclk: You misunderstand - I didn't say that v8 always runs with multiple threads, just that you can use multiple threads against it.  Any given flow of execution is hopefully going to be coherent :)
00:48 < superjoe> I know I'm breaking all the rules but I seriously need it for real, promise
00:48 < CoverSlide> there isn't a way to use shared memory with node as far as I know
00:49 < bnoordhuis> not built-in anyway
00:49 < Gambit--> superjoe: fryface.jpg not sure if you're serious, or just misunderstanding :)
00:49 < superjoe> CoverSlide, even if I write some C++ ?-
00:49 < CoverSlide> there are threaded modules that utilize isolates, but they don't have shared memory
00:49 < CoverSlide> superjoe: there may be some hackery you can do
00:49 < superjoe> I need to run a big A* search computation
00:49 < superjoe> but it's hard to do in another process because it needs access to the main thread's memory
00:50 < CoverSlide> but inside the js runtime, i don't think there's any way
00:50 < Gambit--> superjoe, so there's a lot of ways you can solve that.
00:50 < CoverSlide> you'd have to use workers and message passing
00:50 < superjoe> I'm afraid that message passing will be super slow
00:50 < Gambit--> superjoe: and mostly that depends on what part of the main thread's memory you need to access, and if you can guarantee immutability while the A* is running.
00:50 < holzp> using "environmental" as a key in json causes the parse to fail?
00:50 < bnoordhuis> spin up a thread and share some memory. proper locking is left as an exercise for the reader
00:51 < Gambit--> bnoordhuis: reader exercises, what fun!
00:51 < bnoordhuis> if you implement some kind or ring buffer, performance doesn't have to be atrocious
00:51 < superjoe> bnoordhuis, so I spin up a thread and share some memory - but that memory can only exist in C++ land. correct?
00:51 < holzp> no it doesnt, I am an ass
00:51 < bnoordhuis> even when doing the js -> c++ -> js dance
00:51 < Gambit--> If you're doing A*, then you probably want to keep it all in C++ anyways.
00:52 < superjoe> Gambit--, but I get the data in node.js land, and I use it a lot in node.js land
00:52 < bnoordhuis> superjoe: not necessarily. you can export it to js land as an object
00:52 < CoverSlide> and not use node for it
00:52 < bnoordhuis> superjoe: grep v8.h for SetIndexedPropertiesToExternalArrayData
00:52 < superjoe> thanks
00:52 < Gambit--> superjoe: right, but do you want to block the node.js interpreter for the duration of the A* call, or do you want to export the data out of js such that the other thread can access it in an isolated fashion?
00:53 <@mbalho> anyone know how to convert from a Buffer to a typed array? you can do typed array to Buffer by doing new Int8Array(buffer) etc
00:53 < superjoe> Gambit--, I don't want to block the interpreter, but "export the data" doesn't make sense since "the data" is 40MB of 3d map data
00:53 < CoverSlide> without a ton of butt pain? i'm not sure there's a way
00:53 < Gambit--> superjoe: is it in raw buffer form?
00:54 < superjoe> hmm good point
00:54 < superjoe> it kind of is
00:54 < superjoe> maybe I can do it after all
00:54 < superjoe> nice I think I have an idea
00:54 < superjoe> thanks guys
00:55 <@Nexxy> superjoe, you can do it
00:55 <@konobi> node and 3d map data... huh
00:55 <@Nexxy> you're super, after all
00:55 < superjoe> yay
00:55 < bnoordhuis> mbalho: ? you mean typed array -> Buffer?
00:55 < superjoe> https://github.com/superjoe30/mineflayer
00:55 <@mbalho> bnoordhuis: nope opposite
00:55 < irc_uSSr> Laravel
00:55 < superjoe> ^^ if anyone is curious.
00:55 < bnoordhuis> mbalho: new Int8Array(buf)
00:55 <@mbalho> bnoordhuis: oh wait, i meant what you said
00:55 <@mbalho> bnoordhuis: haha
00:56 < bnoordhuis> ah. you can't right now
00:56 <@mbalho> bnoordhuis: awwww
00:56 < CoverSlide> without a ton of butt pain
00:56 < bnoordhuis> it'd be relatively easy to implement
00:56 <@mbalho> konobi: im also working with node and 3d map data right now hehehe
00:56 < irc_uSSr> A horrible amoount of shemale induced butt pain by the sounds of it
00:56 < pooya> isaacs bnoordhuis , i was looking at npmjs code and noticed that we already pretty much cache everything in "~/.npm" but npm install checks registry again for all of them and fetches all from private gits too. any reason for not using the cached one directly?
00:57  * bnoordhuis doesn't know
00:57 <@konobi> mbalho: if it was real-life 3d elevation models, it'd be interesting =0)
00:57 <@mbalho> bnoordhuis: basically im trying to store buffers in indexeddb but indexeddb only likes to store typed arrays
00:57 <@mbalho> konobi: scroll down to the bottom http://mapbox.com/blog/innovative-map-powered-designs/
00:57 < bnoordhuis> mbalho: if you an open issue, we'll add it (some day)
00:58 <@mbalho> bnoordhuis: cool
00:58 < racbart> Hi there. I am quite new to node.js and this is my first module. I'd love to get some feedback and know what do you think about it: https://github.com/racbart/node-clusterpool - thanks!
00:58 < bnoordhuis> mbalho: it's not all that complex, you could write the patch yourself if you want
01:00 <@konobi> mbalho: heh... my missus is in the biz, so that's what peaked my interest
01:01 <@mbalho> konobi: nice! got any cool lidar data laying around?
01:01 <@konobi> nah, she never lets me get my hands on that sort of stuff
01:01 <@mbalho> haha
01:02 <@konobi> it's all satelite derived data tho
01:02 < othiym23> any of you real cool people have much experience with using npm's API?
01:02 < othiym23> there's some sort of lock timeout going on inside when an install fails (with rollback enabled) and I can't figure out how to clean up after a failed install to not make that happen
01:04 < othiym23> for all of the versions of a package, in reverse chronological order, I want to install the package, do "stuff" to it, and then repeat with the previous version of the package
01:04 < othiym23> if installation fails, npm just sits around with its thumb up its ass for a couple minutes
01:04 < othiym23> I would like it to not do this
01:12 <@konobi> No9: hey anton
01:12 < CoverSlide> I can open your eyes! Take you wonder by wonder! Over sideways and under on a magic carpet ride!
01:12 < No9> hey konobi
01:16 < CoverSlide> Tell me princess, now when did you last let your heart decide?
01:17 < jtomasrl> i nned to serve an app with websocket and a rails app in a sigle machine. what should i use?
01:17 < No9> konobi: Do you want a catch up scott?
01:19 < CoverSlide> gem install websocket-rails
01:19 < isaacbw> or a reverse proxy
01:20 < isaacbw> dat proxy magic
01:20 < othiym23> ah, something's causing node to go into a toxic death spiral when the npm install fails
01:20 < othiym23> welp, sounds like a job for child_process and a watchdog timer
01:20 < CoverSlide> that doesn't sound good
01:21 < Gambit--> othiym23: you can do npm calls from within node?
01:21 < CoverSlide> you can require('npm') and do stuff there
01:21 < othiym23> Gambit--: if you're brave enough: https://npmjs.org/api/npm.html
01:21 < jtomasrl> i was trying node apps behind http proxy on 8080, IPtable redirecting 80 to 8080 and rails app with nginx, but node http proxy doesnt work well with dynamic content on nginx
01:21 < Gambit--> that sounds... dangerous.
01:21 < Gambit--> what's your use case?
01:22 < othiym23> grab all versions of a package I want to test my instrumentation against, install them one at a time, run tests, compile a report of what fails
01:22 <@Nexxy> othiym23 is a dangerous man
01:22 < isaacbw> do you guys know of anything lightweight that sandboxes a process's POSIX functions, esp. filesystem access
01:23 < othiym23> turns out real old versions of <redacted> don't work so well on OS X / versions of Node newer than 0.1.100 / clang / who the hell knows
01:23 < isaacbw> I can use lxc I guess, but it seems kind of hefty
01:23 < CoverSlide> isaacbw: chroot
01:23 < isaacbw> hmm
01:23 < othiym23> chroot doesn't sandbox
01:23 < othiym23> lxc is probably your best bet
01:23 < othiym23> and it's not that big a pain in the ass once you understand how its incredibly obtuse command-line tools work
01:24 < isaacbw> the idea is that I want to start and stop a lot of sandboxes, would lxc play nicely with that?
01:24 < othiym23> you cannot see me, isaacbw, but I just sighed and laughed sadly
01:24 < othiym23> yes, you can do that
01:24 < isaacbw> :|
01:24 < othiym23> that is what I was doing for a living a year ago this time
01:24 < jayk> Ok… so I am implementing a readable stream.  I have a _read function, but I'm unclear about whether I'm supposed to send a 'readable' event myself when there is data available.  Does this make sense to anyone?
01:24 < isaacbw> heh
01:24 < isaacbw> thanks a bunch othiym23 
01:24 < othiym23> see also: the poor, doomed Locker Project
01:25 < isaacbw> god, coffee time
01:25 < isaacbw> I just googled "the poor, doomed Locker Project"
01:25 < isaacbw> and then I thought, that's not right, and googled 'see also:'
01:25 < othiym23> hahaha
01:26 < othiym23> isaacbw: http://lockerproject.org/
01:26 < CoverSlide> the "me" platform
01:26 < othiym23> I was helping run a hosted version of that for a few hundred people for Singly
01:26 < CoverSlide> wtf is that supposed to mean
01:26 < othiym23> lxc turned out to work well enough for us to sandbox a whole bunch of lockers
01:26 < jayk> The problem I'm chasing is that if I send 'readable' I actually get two readable events in the consuming code…. the second of of which returns 'null' from mystream.read(1000);
01:26 < jayk> Is this the expected behavior?
01:27 < othiym23> CoverSlide: in practice, we wrote a whole bunch of social media API connectors and pulled all your social media data into a consolidated platform and let you do whatever on it
01:27 < othiym23> that's still what Singly is doing today, although at a more b2b level
01:27 < othiym23> it's not a bad idea
01:28 < cTIDE> :(
01:29 < othiym23> o hai der cTIDE
01:29 < cTIDE> fucking lxc
01:29 < othiym23> lxc was the least of our problems
01:29 < cTIDE> indeed
01:29 < othiym23> also, you never had to deal with it, why are you bitching?
01:29 < cTIDE> i just lump everything up into one big pile of sadface
01:29 < cTIDE> i sure did
01:30 < cTIDE> briefly in the early stages
01:30 < othiym23> oh right
01:30 < cTIDE> it's ok, today i got to make a webpage work in ie8
01:30 < cTIDE> i think i'd take lxc over that
01:30 < othiym23> like I said: obtuse CLI, but cgroups and the sandboxing are nice
01:32 < jayk> :-(
01:32 <@konobi> jayk: hey buddy
01:32 < jayk> hey konobi! How goes.
01:32 <@konobi> good good
01:33 < jayk> You familiar with streams2?  
01:33 < jayk> ;-)
01:33 < CoverSlide> how's it compare to BSD jails?
01:33 <@konobi> i should be... but i have a feeling i'd need to go over some notes again
01:36 < othiym23> CoverSlide: lxc is stronger than FreeBSD jails, weaker than Solaris zones
01:36 < CoverSlide> hmm
01:38 < othiym23> lxc itself is just a thin API over a bunch of Linux kernel stuff, but it does sandboxing down to a pretty fundamental level, and the cgroup stuff is super nice for setting limits on whole groups of processes / containers
01:38 <@konobi> jayk: ah
01:38 < jayk> ?
01:39 <@konobi> lemme just check the source here
01:41 < othiym23> can somebody run 'npm install --loglevel verbose mongodb@0.9.3' for me and tell me if npm hangs for them?
01:41 < othiym23> or does anything funky to their CPU?
01:41 < othiym23> (I don't expect it to actually install properly)
01:42 <@konobi> jayk: so, from what I can see readable is emitted for you
01:43 < jayk> what triggers it though.  How does it know there is data.  If I don't emit readable, then I get no activity at all.
01:43 < jayk> :-(
01:44 < jayk> That's how I thought it worked, but I can't work out how it's supposed to work. :-/
01:44 <@konobi> when your other thing is available and gives you data, that's when you call the callback within your _read
01:47 < holzp> http://caolanmcmahon.com/posts/nodejs_style_and_structure/ -- does anyone do #5 return on callbacks?
01:47 < holzp> I dont see that much 
01:47 < jayk> but I don't get the callback until _read is called?
01:47 < jayk> I seem to be in a chicken / egg situation
01:47 <@konobi> so your _read is never called?
01:48 <@mbalho> holzp: why would you ever continue if there is an error
01:48 < jayk> Correct - _read doesn't get called unless I emit a readable event.
01:48 < holzp> mbalho, I mean even if there wasnt, like at the end of a function
01:48 < isaacbw> mbalho, because not all errors should stop execution
01:49 < jayk> which actually makes sense to me…. when there is data to be read from whatever it is, I tell the stream so by emitting 'readable' -  but if that's correct, then I am not sure why I get a second readable event when there is no data to read.
01:49 < isaacbw> be cool and use promises
01:50 < MiracleBlue> YAY!  Promises!
01:50 < isaacbw> promises are the shiznit
01:50 < luminous> hello! if using socket.io to stream data from a source like zeromq.. what are my choices for auth? 
01:50 < holzp> promises made, promises broken
01:51 < isaacbw> REBOOT
01:52 <@konobi> jayk: https://github.com/joyent/node/blob/master/lib/net.js#L338 there's an example of one in use
01:53 <@konobi> mmm... that may be more complex than i thought
01:54 <@konobi> mbalho: oi... know of any good readable stream examples off hand?
01:54 < isaacbw> REBOOT SUCCESFUL
01:54 < isaacbw> CUESEFULL
01:54 < isaacbw> SUCCESSFUL
01:56 < MiracleBlue> SUCCESSION
01:57 < isaacbw> man, I can have a browser window side by side with emacs
01:57 < isaacbw> and there's room to work
01:57 < isaacbw> WOOOOO BIG MOINTORS ROO
01:57 < isaacbw> WOO
01:57 < isaacbw> MONITORS
01:57 < MiracleBlue> Woooo
01:58 < MiracleBlue> I have two 24" monitors on my desk
01:58 < MiracleBlue> With music stuff
01:58 < Lorentz> I used to have 27"+22"+22"
01:58 < Lorentz> but dropped the 22"s to the side, don't use them anymore
01:58 < MiracleBlue> I wan't two 27"
01:58 < Lorentz> There's just not enough room on the desk :|
01:58 < MiracleBlue> My desk is really super long
02:00 < airtanah> i just use my laptop screen
02:00 < MiracleBlue> Me too :( for development.
02:00 < Lorentz> For development, yes
02:00 < Lorentz> just my tiny 12" laptop
02:00 < Lorentz> 1280x800
02:00 < Lorentz> 27" exists purely for gaming
02:00 < racbart> Hi there. I am quite new to node.js and this is my first module. I'd love to get some feedback and know what do you think about it: https://github.com/racbart/node-clusterpool - thanks!
02:01 < airtanah> i can take it to starbucks
02:01 < Lorentz> never been to starbucks
02:01 < jayk> Lorentz: not missing much.
02:01 < Lorentz> that's what I figured
02:02 < jayk> though I do appreciate the alternative to gas station coffee when far from home. ;-)
02:02 < Lorentz> it's also been months since I last had coffee
02:03 < airtanah> Lorentz: i live in vancouver, there's two starbucks on every block
02:03 < Lorentz> sydney here, we have more gloria jeans than starbucks
02:04 < isaacbw> racbart, so it's like node-pool, but with multiple of each resource instead of just one?
02:04 < VeXii> we dont have starbucks or gloria jeans in denmark :P 
02:04 < isaacbw> starbucks is no good
02:05 < airtanah> we also have plenty of other coffee shops, i like to rotate
02:05 < VeXii> and only like 4 burger kings 3 kfc
02:05 < racbart> isaacbw: yes, it's for multi-server environments - if you want to balance your requests between many servers. It creates a cluster and a separate pool for each of servers in a cluster. Then it rotates requests between these pools.
02:05 < isaacbw> racbart, it looks good, but it really needs more features to be useful as a dependency
02:06 < airtanah> is there any way to pool mysql connections that's not round-robin?
02:06 < airtanah> or, any pre-existing way
02:07 < isaacbw> man, even my color theme looks better on this monitor
02:08 < racbart> isaacbw, It generally provides all the features that original node-pool has, just adds working on cluster of servers. What more features do you think it should have?
02:09 < isaacbw> airtanah just suggested one
02:10 < isaacbw> a mature module should have robust error handling as well
02:11 < racbart> umm, what's wrong with the error handling here?
02:11 < airtanah> i think as long as a module is on github, and can be sent rapid pull requests, it's okay to achieve robustness over time
02:11 < isaacbw> absolutely
02:12 < isaacbw> the trick is getting people to care enough to send pull requests
02:12 < isaacbw> I haven't used node-pool myself racbart, so I can only suggest things in the abstract
02:12 < isaacbw> sorry
02:12 < racbart> airtanah, do you mean to select servers not basing on circle rotation but allow to e.g. specify priorities/percentage of requests that should go to each server?
02:12 < airtanah> i write a little note to people, encouraging them to send PRs or just open issues
02:13 < isaacbw> or keep track of the connections, so select the server based on lowest connection count
02:13 < airtanah> racbart: i just mean the connection is taken from the pool until it returns, so long-requests don't accept subsequent requests until free
02:13 < airtanah> kind of like how a shared socket descriptor works
02:14 < isaacbw> airtanah, does that work?
02:14 < airtanah> isaacbw: i just write a poor mans mysql pool today... oh well, it's deployed now
02:14 < isaacbw> the note?
02:15 < airtanah> isaacbw: it's hard to measure
02:15 < racbart> ah, it works exactly this way; let's say you define cluster of 3 servers and each of them has a separate pool of max 4 connections created; requests are served round-robin if pools are not fully used; if the pool of the next server is fully used but the next one isn't, it's skips the server and uses the non-full server.
02:16 < isaacbw> I guess I mean, do you get pull requests on libraries you just throw up on github
02:16 < airtanah> isaacbw: had a few PRs to node-foreman, but that's it... i imagine there is a tipping point with most projects
02:16 < racbart> It doesn't however count queue length in the case if all server pools are fully used and requests are waiting in line in each of them; In that case it simply uses round-robin again.
02:17 < airtanah> isaacbw: sometimes its also hard to know how to write the README
02:18 < isaacbw> foreman is kind of high profile, isn't it?
02:19 < airtanah> racbart: interesting, i'll take a look
02:19 < airtanah> isaacbw: ruby foreman is, not sure about the node port. the ruby version i had no part in
02:19 < isaacbw> ah right
02:19 < isaacbw> I just recognized 'foreman'
02:20 < isaacbw> I'm really bad at keeping up with the goings on of the ecosystem
02:20 < asdf12> whatszzzzzs up guys
02:20 < isaacbw> I don't know how people do it
02:20 < racbart> thanks, I'm really new to node and I'd appreciate every feedback
02:20 < airtanah> isaacbw: but i added some node-specific stuff, like a load-balancer so you can dev against a load-balanced setup
02:20 < isaacbw> neat
02:20 < asdf12> yes i have trouble with that too
02:20 < airtanah> isaacbw: our webapp broke when it was load balanced
02:20 < asdf12> where to find out whats "hot" sizzle
02:21 < isaacbw> hot sizzle
02:21 < airtanah> the mail list is pretty active, even if half of the discussion are about "hey i write a framework to deal with all these callbacks"
02:21 < isaacbw> load balancing can get messy when shared resources are an issue
02:21 < asdf12> airtanah: i meant, overall in the word of development
02:21 < asdf12> world
02:21 < asdf12> without being spammed*****
02:21 < asdf12> thats the most important part
02:22 < asdf12> it's like twitter, if i followed everything i had some sort of interest in, i will never know whats going on
02:22 < isaacbw> when users of my app first connect, they need to be send to a server chosen by a load balancer (or whatever), and then they need requests to keep going to that same server for the duration of the session
02:22 < isaacbw> I *think*, I may do something like a pool
02:22 < asdf12> because there would be like 100 tweets to look at every day, so i wont bother looking
02:22 < airtanah> asdf12: i read reddit/r/programming a lot, but it's getting a lot slower
02:22 < isaacbw> because the app maintains a remote server connection for each user while the user is in a session
02:22 < asdf12> that site has naked ladies! no sir
02:23 < isaacbw> I can't decide which would be better
02:23 < asdf12> oh my goodness i just had a good idea for an app
02:24 < isaacbw> that's another layer of complexity, communicating with a pool
02:24 < isaacbw> I'm opening too many cans of worms with this project as it is
02:24 < airtanah> isaacbw: indirection is great, abstraction is what gets you
02:24 < isaacbw> my tendency is to over-abstract
02:25 < isaacbw> "I might want to use this for something completely unrelated in two years!"
02:25 < airtanah> isaacbw: we've all been there
02:25 < airtanah> AbstractSingletonProxyFactoryBean
02:26 < asdf12> quick question, whats the twitter rate limit on their api
02:26 < asdf12> just in case anyone knows real quick
02:26 < asdf12> oh
02:27 < isaacbw> I think it varies
02:27 < isaacbw> depending on... factors
02:27 < asdf12> its low
02:27 < isaacbw> you just have to wait to be limited and then slow down
02:27 < isaacbw> be dynamic
02:28 < asdf12> no we gotta work around it baby
02:28 < asdf12> make the clients do the twitter api requests
02:28 < asdf12> and make the client give me data
02:28 < isaacbw> yea, fuck the clients
02:28 < airtanah> this is sounding like a bot-net
02:29 < airtanah> npm i -g asdf12s-botnet
02:29 < isaacbw> you can start selling twitter followers
02:29 < asdf12> its called the poor mans twitter scraping
02:30 < airtanah> i would like to see a 'pagerank' for twitter
02:30 < airtanah> where they use the google pagerank algo
02:32 < asdf12> i wonder if thats against the tos
02:32 < asdf12> if i make the clients upload me their twitter data that they requested (with agreement from the user)
02:33 < airtanah> asdf12: just tell us the app idea already
02:33 < MiracleBlue> Yussss
02:33 < MiracleBlue> Just got a colleague to test my app on the production server
02:33 < MiracleBlue> It works!
02:36 <@Nexxy> \o/
02:38 < kiwi_79245> pro
02:39 < kiwi_79245> kiwi works on freenode
02:39 < min|dvir|us> Kiwi is awesome.
02:39 < kiwi_79245> is it opensource?
02:40 < kiwi_79245> yes, yes it is -- https://github.com/prawnsalad/KiwiIRC
02:42 < Epic_dude> hi folks
02:43 < Epic_dude> I am trying to connect to mysql using node-mysql driver
02:43 < Epic_dude> I get ECONNREFUSED error
02:43 < Epic_dude> any help would be appreciated
02:43 < isaacbw> it's a networking error
02:43 < isaacbw> you set something up improperly
02:43 < Epic_dude> how do I fix this
02:43 < isaacbw> probably mysql
02:43 < isaacbw> or you just aren't connecting to the right host/port
02:44 < Epic_dude> I followed the steps listed here: https://github.com/felixge/node-mysql
02:44 < airtanah> Epic_dude: can you connect from the command line?
02:44 < airtanah> what i mean is, have you verified the connection from the command line
02:45 < Epic_dude> airtanah : How do I connect from command line?
02:45 < isaacbw> do you know what mysql is, Epic_dude 
02:45 < Epic_dude> nope not yet
02:45 < Epic_dude> yes I do
02:45 < Epic_dude> I already MAMP installed
02:45 < isaacbw> did you start a mysql server
02:45 < isaacbw> ah, okay
02:45 < airtanah> mysql -u USER -p -h HOST DBNAME
02:45 < Epic_dude> yes it's running
02:46 < Epic_dude> ok when I type mysql from terminal it says command not found
02:46 < airtanah> what OS are you using?
02:46 < Epic_dude> I thought installing MAMP is sufficient to have mysql installed
02:46 < airtanah> just means the mysql client is not installed
02:46 < Epic_dude> mountain lion
02:46 < Epic_dude> I could access my mysql table using phpmyadmin though
02:47 < airtanah> where is mysql installed?
02:49 < Epic_dude> I guess Applications/MAMP/db
02:49 < isaacbw> are you sure the host (probably localhost), port, username, and password are correct?
02:50 < Epic_dude> username, password and host must be correct, not sure about the port
02:53 < Cronoh> is the host localhost?
02:53 < Epic_dude> Cronoh : yes
02:54 < Cronoh> and you say phpmyadmin connects successfully ?
02:54 < Epic_dude> Cronoh: Yes I can access phpmyadmin from my browser
02:55 < Cronoh> and it is connecting to your mysql instace and works ?
02:55 < Cronoh> hmm i mean the only things i can think of is networking issues like said above, like mysql refusnig the connection based on ip but it allows from 127.0.0.1 by default
02:56 < Cronoh> or obviously user error entering settings in node
02:56 < Cronoh> maybe show us your node code
02:56 < Epic_dude> phpmyadmin is accessing a mysql instance, I am able to query tables or anything else, now I am not sure if I have multiple instances of mysql installed on my system
02:56 < Cronoh> i hope not the only way is if they are listening on different ports
02:56 < asdf12> have you guys seen that chromebook pixel
02:57 < Epic_dude> node code: http://pastebin.com/3SajuUu8
02:58 < cloudbender> Marina Sirtis is hhhhot
02:58 < Cronoh> epic dude use a callback inside connect() to help you pinpoint the problem
02:58 < Cronoh> ex: connection.connect(function(err) {
03:00 < Epic_dude> error dump: http://pastebin.com/Y7GUF4LD
03:01 < Cronoh> try manually entering the port
03:02 < Cronoh> as 3306
03:02 < Cronoh> if that doesnt work double check where your mysql is running
03:02 < Epic_dude> ok
03:05 < Epic_dude> yay! got it working
03:06 < Epic_dude> mysql was running at port 8889
03:06 < Cronoh> aha
03:06 < Cronoh> i wonder how phpymadmin found it
03:06 < Cronoh> without you setting the settings file
03:07 < Cronoh> unless phpmyadmin came with your install
03:07 < Epic_dude> nope, I installed phpmyadmin later
03:07 < Epic_dude> anyway thanks Cronoh :)
03:07 < Cronoh> yw
03:07 < airtanah> Epic_dude: is you're deving on OSX i highly recommend using homebrew for things
03:08 < airtanah> like mysql
03:09 < Epic_dude> that looks like a cool tool, will try it
03:09 < Mrono> I am looking to use node to make a load testing tool
03:09 < Mrono> What is a good way to make hundreds of http requests at once
03:10 < Epic_dude> Mrono : you want to make hundreds of request for testing purpose?
03:10 < Mrono> Epic_dude: yes, to simulate a load on remote servers for clients
03:11 < Mrono> Epic_dude: think LOIC
03:15 < Epic_dude> Mrono : Try ab -n 100 http://127.0.0.1
03:15 < Epic_dude> use any number you want, 100 is just for demo
03:18 < Mrono> Hmm, very useful tool
03:18 < VeXii> is there somthing like ab or is it possible to install it whith out the rest of the apache web stack
03:24 < asdf12> use the -c flag with ab too
03:27 < isaacbw> my second attempt at a router design that makes me happy: https://github.com/isaacbwagner/node-egress
03:27 < isaacbw> *third
03:27 < cloudbender> In this form ... function whatever() { ... }.also() ..... is also a tail call outside of whatever's scope ?
03:28 < isaacbw> is that for me?
03:28 < cloudbender> It's for anybody smarter than me
03:28 < isaacbw> can you rephrase the question
03:28 < isaacbw> oh nevermind
03:28 < isaacbw> yes
03:28 < isaacbw> also is called on the returned value of whatever
03:28 < isaacbw> mm
03:28 < isaacbw> wait
03:28 < isaacbw> eh...
03:28 < cloudbender> ah thanks
03:28 < isaacbw> no that's not
03:28 < isaacbw> rightj
03:29 < isaacbw> I lied
03:29 < cloudbender> liar mcliarson
03:29 < isaacbw> it will probably return an error
03:29 < cloudbender> and the lying liefaces
03:29 < cloudbender> hmmm
03:29 < isaacbw> because it's trying to call the function also which is a member of the function whatever, which doesn't have a member called also
03:29 < isaacbw> I think
03:29 < isaacbw> man I have no idea
03:30 < isaacbw> yes that's right
03:30 < cloudbender> wait ... this form,    function whatever()() is an iife    there's no dot
03:30 < cloudbender> I'll figure it out
03:30 < isaacbw> you mean function whatever() {}()?
03:30 < cloudbender> yeah
03:31 < isaacbw> that defines and immediately calls whatever
03:31 < cloudbender> right        function whatever(){}.() is different
03:31 < isaacbw> yes
03:31 < isaacbw> it's not correct
03:31 < cloudbender> lol
03:31 < isaacbw> invalid javascript
03:33 < cloudbender> It looks the same as       http.createServer(..).listen(55505, '127.0.0.1');
03:33 < isaacbw> it isn't
03:33 < isaacbw> createServer returns an object, and listen() is called on that object
03:34 < cloudbender> I see thank you
03:36 < cloudbender> oh one is a decalration ands one is a call
03:36 < cloudbender> sorry for the typos left wrist is broken
03:37 < asdf12> substring > substr > slice
03:37 < asdf12> performance wise
03:38 < min|dvir|us> asdf12: any evidence to back that up?
03:39 < asdf12> go js perf
03:40 < asdf12> though substring and substr are pretty close, its slice thats slowest
03:40 < min|dvir|us> On what testbed?
03:40 < min|dvir|us> Can anyone else reproduce?
03:40 < cloudbender> slice has to re-construct an array, I would give it a high probability of being slowest.
03:41 <@mbalho> min|dvir|us: google 'jsperf array slice'
03:41 < asdf12> oh this is for strings
03:41 < isaacbw> cloudbender, they are all calls
03:41 <@mbalho> oh right substr haha
03:41 <@mbalho> array slice is slow too 
03:42 < asdf12> min|dvir|us: http://jsperf.com/indexof-vs-regexp1d1d1
03:42 < asdf12> here you can use mine
03:42 < isaacbw> v8 is pretty smart though
03:42 < asdf12> ignore the title haha
03:42 < isaacbw> so unless you're doing seriously huge things with arrays, don't worry too much about the speed of slice
03:42 < asdf12> this is WHAT I DO NOW, play with jsperf when im bored just to see how much slower or faster stuff are
03:43 < isaacbw> fun
03:43 < isaacbw> (sarcasm)
03:43 < isaacbw> for me
03:43 < asdf12> i knew you would make fun
03:43 < asdf12> thats why i kept it a secret from you for so long
03:43 < isaacbw> I'm a 'let the compiler worry about it' kind of guy
03:44 < isaacbw> unless I'm in a C mood
03:44 < airtanah> isaacbw: application design plays a bigger role in performance than small-optimizations
03:44 < airtanah> it's like starcraft, macro > micro
03:44 < isaacbw> totally
03:45 < asdf12> what
03:45 < asdf12> starcraft is all about the micro play
03:45 < Mrono> is node.js a good platform for load testing
03:45 < Mrono> or should I be looking at another language
03:45 < isaacbw> it could be
03:45 < min|dvir|us> Mrono: load testing what?
03:45 < isaacbw> it's not a language though
03:45 < cloudbender> node would be a great platformfor that
03:46 < Mrono> generating many many requests per second constrained in a set of parameters
03:46 < Mrono> like login here and post this data
03:46 < isaacbw> you could use node
03:46 < min|dvir|us> Node.js will do very well with that.
03:46 < asdf12> airtanah: its like if you have an expansion, it doesn't really matter, because you're just throwing away resources
03:46 < isaacbw> or you could write a bash script with curl
03:46 < isaacbw> it's up to you
03:46 < asdf12> compared to someone who is micro managing his units to make them most efficient
03:47 < airtanah> asdf12: starcraft is a good macro player will beat a good micro player every time
03:47 < isaacbw> lol
03:47 < Mrono> isaacbw: I'm looking to use node in order to handle what comes back easy
03:47 < cloudbender> asdf12 if you are sweeping through all objects in a database, sometimes those little factors add up.
03:47 < isaacbw> node would do it well, but I honestly don't think it's worth learning javascript+node just to do that
03:47 < isaacbw> since http requests are easy enough in many langauges
03:47 < isaacbw> so if you know python or something similar already, just use tha
03:47 < isaacbw> t
03:48 < Mrono> I'm already rather familier with node
03:48 < isaacbw> but yes, node would do it well
03:48 < Mrono> so i'm not learning it just for this
03:48 < isaacbw> then why are you asking :(
03:48 < airtanah> i've seen people fret over whehter an object lookup was "inefficent" then throw it all away by making an extra HTTP request somewhere
03:48 < isaacbw> lololol
03:48 < Mrono> isaacbw: because I don't know how to do it properly
03:48 < Mrono> I know there is no single 'right way' to do something, but there are 'better' ways
03:49 < isaacbw> it sounds like you're just making a lot of requests though
03:49 < isaacbw> there aren't many different ways to do that
03:50 < isaacbw> unless you want to do more than just test load
03:50 < Mrono> I tried spawning a bunch of http get requests using a for loop and timeouts but I was only getting about 20 requests a second even though I set it to spawn 500
03:50 < Mrono> isaacbw: it'll be testing things like uploading a picture, completing a shopping cart transaction, etc
03:50 < isaacbw> spread them out over several machines
03:50 < Mrono> I plan on it
03:51 < Mrono> however I was hoping to get more than 20 RPS per machine
03:51 < isaacbw> oh, use testacular
03:51 < isaacbw> well, I guess if you can do everything from URLs you don't need to
03:51 < Mrono> for now it can be handled with post/get calls
03:52 < Mrono> ah, that looks like zombie
03:54 < asdf12> isaacbw: i dont get that router code!
03:54 < asdf12> write tests for it
03:55 < isaacbw> I started writing tests for it
03:55 < isaacbw> it works, it just isn't robust
03:55 < styol> Mrono: if you want something with an insane amount of options, check out jmeter
03:56 < asdf12> isaacbw: the implementation seems a lot more complex than it needs to be to me
03:56 < isaacbw> you said that about my other router as well
03:58 < Hotroot> Hey, quick async question
03:59 < asdf12> isaacbw: i liked the other idea more though
03:59 < Hotroot> If something goes command1; asyncCall(code, callback(){}); command2;
03:59 < Hotroot> command2 won't go off until asynccall is done, right?
03:59 < isaacbw> I liked the concept, but when I was actually building routes with it in an application it was too hard to follow
03:59 < Hotroot> But other events, etc. will
03:59 < airtanah> Hotroot: command2 will ALWAYS fire before callback
04:00 < isaacbw> if it's actually async
04:00 < Hotroot> Ah
04:00 < airtanah> right, if it's actually async
04:00 < airtanah> if it's sync, then it will ALWAYS fire after
04:00 < airtanah> remember, it's not a race condition, it will always be one way or the other
04:00 < Hotroot> Kk, thanks
04:00 < isaacbw> yay event loop
04:01 < isaacbw> yay async
04:01 < isaacbw> be cool and use promises
04:01 < airtanah> i've run across even seasoned node people who get it wrong
04:01 < asdf12> haha
04:01 < asdf12> see i knew it!
04:01 < isaacbw> promises are the shiznit
04:01 < airtanah> isaacbw: promises are great if done as Monads
04:02 < asdf12> isaacbw: the reason i liked your other idea was it wouldve been such a small amount of a code for quick routing
04:02 < asdf12> fast*** i mean 
04:03 < isaacbw> promises have really simplified my server-side code
04:03 < isaacbw> it's easier to look at everything as the work being done
04:03 < airtanah> have you use the Option/Maybe monad?
04:03 < airtanah> it's just as excellent as promises
04:03 < isaacbw> nope
04:03 < isaacbw> I'll take a look though
04:04 < airtanah> i would write a typeclass module for node, but then it would just launch another "async control flow" email debate
04:04 < isaacbw> :P
04:04 < cloudbender> maybe I need to look at that situation also: promises.  Think I'll order a pizza and re-write my server-start.
04:04 < isaacbw> no, don't
04:04 < isaacbw> get better at javascript
04:04 < asdf12> im eating butter pecan ice cream
04:05 < asdf12> you can tell a lot by a persons favorite ice cream flavor
04:05 < airtanah> chocolate
04:05 < isaacbw> peanut butter toffee
04:05 < airtanah> actually chocolate chip mint
04:05 < cloudbender> peanut butter and chocolate swirl
04:05 < cloudbender> ooo choco mint is good too
04:06 < airtanah> asdf12: what have you learned about us?
04:06 < airtanah> whom would you hire?
04:06 < asdf12> your favorite flavor of ice cream
04:06 < isaacbw> lol
04:06 < asdf12> thats what i learned
04:06 < isaacbw> asdf12, part of the complexity is to enable pre()
04:06 < isaacbw> and named params
04:07 < isaacbw> actually, that's most of the complexity
04:15 < airtanah> i dunno if you guys have done much functional programming in haskell/scala but they have a way of chaining promises together
04:15 < airtanah> coffee-script hate aside, ive been working on the following 
04:15 < airtanah> https://gist.github.com/jacobgroundwater/4728428
04:16 < airtanah> it uses promises, and a few other coolies 
04:16 < isaacbw> actually, having a pre() is the whole reason I am making a router in the first place and not just using restify
04:17 < asdf12> ok
04:18 -!- mode/#Node.js [+o TooTallNate] by ChanServ
04:19 < isaacbw> airtanah, is that functionally different than then(), or is it just a syntax thing
04:20 < airtanah> isaacbw: it's very similar to then, but by adhering to the Monad interface, you make it a little more powerful. 
04:21 < airtanah> does 'then' accept a method that takes a value, and returns a promise?
04:22 < airtanah> or does the function have to return a value
04:22 < isaacbw_> airtanah, the handler function can return a promise, which lets you chain then()s together
04:22 < isaacbw_> did my link to http://taskjs.org/ get through?
04:22 < airtanah> isaacbw: didn't see one
04:23 < isaacbw> well, there it is
04:23 < isaacbw> pretty promise syntax for ec6
04:23 < isaacbw> es6*
04:24 < airtanah> say i have a promise 'a' that fails, what happens to a.then( ... )
04:25 < isaacbw> a.then takes two arguments, then(success, failure)
04:25 < isaacbw> either handler can return a promise
04:26 < airtanah> it's hard to explain the difference on irc
04:26 < airtanah> it might be the same
04:26 < isaacbw> mm
04:26 < isaacbw> I use Q, but there are a few others that conform to http://wiki.commonjs.org/wiki/Promises/A
04:26 < isaacbw> which defines then()
04:26 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
04:27 < isaacbw> Q has a more complete definition of a promise
04:27 < isaacbw> https://github.com/kriskowal/q
04:29 < airtanah> looks more like it, but i'm confused what the .done() is for
04:30 < airtanah> kay maybe i'll just write up what i'm talking about
04:30 < isaacbw> I don't really get the point of done() either
04:30 < airtanah> and let people argue about Yet Another Async Control library
04:30 < jtomasrl> node http proxy redirect my nginx from localhost:8787 to localhost/panel, but my files in that app use localhost/links no localhost/panel/links how can i fix that?
04:31 < isaacbw> you're using http-proxy and nginx at the same time?
04:31 < isaacbw> oh, nginx as a static file server
04:32 < jtomasrl> im serving rails app with nginx and node apps with http-proxy
04:32 < isaacbw> wtf
04:32 < airtanah> jtomasrl: which is binding to port 80?
04:32 < airtanah> nginx?
04:32 < jtomasrl> http-proxy
04:32 < jtomasrl> nginx on 8787
04:32 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
04:32 < airtanah> and http-proxy is forwarding SOME to nginx?
04:33 < airtanah> got it
04:33 < jtomasrl> yes
04:33 < isaacbw> you could maybe modify the url in the headers in http-proxy
04:33 < isaacbw> or put them on subdomains
04:33 < jtomasrl> im using path since i dont have domains
04:33 < asdf12> isaacbw: check msg
04:34 < airtanah> jtomasrl: i would first look at getting nginx to rewrite the request for rails
04:34 < jtomasrl> 10.211.55.4/node  10.211.55.4/rails
04:36 < jtomasrl> before going on.. is there a better approach?
04:36 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
04:36 < jtomasrl> should i just use nginx for node and rails apps?
04:37 < isaacbw> switching to windowwssss
04:37 < airtanah> jtomasrl: are you using websockets?
04:37 < jtomasrl> yes
04:37 < jtomasrl> oh thats why i did this
04:38 < airtanah> jtomasrl: yah nginx doesn't support them yet
04:38 < airtanah> http://wiki.nginx.org/HttpRewriteModule
04:38 < airtanah> maybe something in there 
04:40 < jtomasrl> the thing is i have localhost:8787/panel in my url but localhost:8787/ on my links
04:40 <@konobi> isaacs: ping
04:41 < airtanah> the links shouldn't have port 8787
04:41 < airtanah> you want to go through port 80 right?
04:42 <@konobi> Raynos: i suppose i could ping you too
04:43 < Raynos> OH HI
04:43 < Raynos> What is it?
04:43 <@mbalho> isaacs: for your next #wontfix on github http://i.imgur.com/FoV5u.gif
04:44 <@konobi> Raynos: with streams2, you need to call read() once to get null and then you'll get a readable event from there on, right?
04:44 < jtomasrl> airtanah: they should be localhost/panel i was trying with 8787
04:44 < Raynos> assuming the internal buffer is empty
04:45 <@konobi> what is the internal buffer?
04:45 < airtanah> jtomasrl: its a little hard to follow, maybe you should write up the details in a gist
04:45 < Raynos> konobi: Readable uses an internal buffer with watermarks
04:45 <@konobi> or well, does that relate to something you should be doing in _read ?
04:45 < Raynos> when you `read()` if there's data it returns it
04:46 < Raynos> if the internal buffer drops below the high watermark then `_read()` is called
04:47 < Raynos> if the internal buffer is above the low watermark then readable is emitted
04:47 <@konobi> ah kk, gotcha... was just wonder as to how to hit the point of the first readable event
04:47 <@konobi> but got it now
04:47 < Raynos> so In theory if you read() slowly the readable is never emitted
04:48 < Raynos> you need to call read(0) to "start" the stream
04:48 < Raynos> that will trigger the first _read
04:48 < Raynos> then the internal buffer eventually reaches the low watermark and thus emits readable
04:49 < jtomasrl> airtanah: https://gist.github.com/jtomasrl/4728625
04:49 <@konobi> are the 0.9.8 api docs somewhere?
04:49 < Raynos> https://github.com/joyent/node/blob/master/doc/api/stream.markdown#new-streamreadableoptions
04:50 <@konobi> yup yup, was thinking we had processed ones up on nodejs.org at one point
04:51 < airtanah> jtomasrl: does the rails app work as expected?
04:52 < jayk> Raynos: So read(0) is always how you kick things off on a fresh stream?
04:52 < MiracleBlue> Derp.
04:52 < jtomasrl> on localhost:8787 yes on localhost/panel no
04:52 < jayk> (or attach to a pipe or transform or whatever)
04:52 < Raynos> jayk: not necessarily
04:52 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
04:52 < Raynos> you may want to actually read() more
04:52 < Raynos> or use pipe
04:54 < airtanah> jtomasrl: i would try to change localhost:8787 to localhost:8787/panel 
04:54 < jayk> Ok… so what I'm taking away is 'don't wait for a readable event to kick things off, just try to read' it will do what I think after that.
04:54 < airtanah> jtomasrl: i.e. get the app to respond to /panel regardless of host
04:54 < Raynos> correct
04:54 < jayk> Thanks. :-)
04:54 < airtanah> jtomasrl: perhaps there is a config setting for a 'base url' somewhere
04:54 < Raynos> although for most use-cases pipe suffices
04:55 < jtomasrl> airtanah: thats what im looking for :/
04:55 < jayk> and thanks konobi.  Much appreciated.
04:55 < jayk> konobi++  # do we have a bot?
04:56 < airtanah> jtomasrl: at this point i usually try stackoverflow
04:56 < jtomasrl> yup
04:56 < airtanah> jtomasrl: but i would boil your question to "how do i change the base URL of a rails app"
05:21 < asdf12> http://jsperf.com/function-or-closurezz1
05:22 <@konobi> jayk: heh, we did at one point, but you can see from the user totals that it could get a little noisy
05:24 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
05:25 < mscdex> asdf12: ?
05:25 < asdf12> ?
05:27 < Bob_Gneu> Hello
05:28 < asdf12> whoever ran that test, your computer is way faster than mine heh
05:30 < mscdex> asdf12: i7-3660k :-)
05:32 < mscdex> er 3770i7-k
05:32 < mscdex> *i7-3770k
05:46 < asdf12> http://learn.jquery.com/performance/clever-conditionals/
05:46 < asdf12> that is listed in performance -_-
05:48 < airtanah> asdf12: oh god
05:53 <@konobi> anyone know of a reasonable frontend javascript library for doing step-thru wizard stuff?
05:55 <@Nexxy> $('#step-one').hide(); $('#step-two').show();
05:56 <@konobi> Nexxy: =0P
05:56 <@Nexxy> + bootstrap!
05:59 < asdf12> why dont people make fancy names for their javascript library
05:59 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
06:00 < asdf12> step-through-wizard-stuff.js
06:01 < styol> people do, but search queries may vary ;)
06:03 < MiracleBlue> Whoops
06:03 < MiracleBlue> My internets went derp
06:08 < MiracleBlue> Err, quick bash related question for anyone that might know
06:08 < MiracleBlue> How does one do "rmdir" on a directory that is not empty?
06:09 < airtanah> rm -r DIRNAME
06:09 < MiracleBlue> airtanah: thank you kindly
06:09 < airtanah> MiracleBlue: np
06:10 < MiracleBlue> last question, is there a node fs method to do the same thing?
06:12 < mscdex> MiracleBlue: not built-in no, but there are modules for it
06:12 < MiracleBlue> Ahh ok
06:12 < airtanah> MiracleBlue: you can also just execute 'rm -r' in a sub process
06:12 < mscdex> MiracleBlue: here's one: https://npmjs.org/package/rimraf
06:13 < MiracleBlue> airtanah: That's true :)
06:13 < MiracleBlue> Thanks again guys.
06:15 < tpayne> Why is it that for some changes, I don't need to restart node, but for other changes I do? And is there a list of changes that require a restart?
06:16 < mscdex> tpayne: anything that you're require()'ed
06:16 < asdf12> airtanah: is scala fun?
06:16 < greg5green> tpayne, it depends what file you are editing
06:16 < mscdex> s/you're/you've
06:16 < mscdex> and of course any other files you have cached
06:16 < greg5green> static files node just serves up? you can edit those all you want
06:17 < greg5green> for dev purposes, check nodemon
06:17 < greg5green> but dont use that in production
06:17 < greg5green> at all
06:17 < MiracleBlue> Oooh, nodemon
06:17 < tpayne> yeah i don't use it in production
06:17 < MiracleBlue> I might need to check that out.
06:17 < greg5green> nodemon is nice for dev
06:17 < tpayne> yeah it seems like my ejs files don't require a restart
06:17 < tpayne> so i guess it's safe to say everything else does
06:18 < tpayne> how does one update a prod environment without taking the site down for a few seconds
06:18 < MiracleBlue> tpayne: Static files that are sent to the client don't need restarting :) but things that run in node itself do, I believe.
06:18 < MrTrick> I'm calling some 'unknown' code that I don't control. It runs or may run asynchronously. Is there some way to catch any thrown errors by that code, other than 'put it entirely in its own process' ?
06:19 < greg5green> tpayne, you could use something like nodemon in production, but most people want to take that couple seconds
06:19 < greg5green> id rather have seconds of downtime than have my production server randomly down if the server changed something
06:19 < MiracleBlue> ^
06:19 < tpayne> yeah but this isn't acceptable
06:20 < tpayne> i guess load balancer or something
06:20 < greg5green> then you need to reset your client's expectations
06:20 < greg5green> or else have a much, much robust infrastructure
06:20 < greg5green> much, much more*
06:20 < tpayne> if i have a load balancer running 2 instances
06:20 < tpayne> i could turn one off, update, turn on, switch, etc
06:22 < greg5green> that sounds reasonable to me, but youd have to ask your sysadmin
06:22 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
06:22 < tpayne> cool. thanks for the info guys. later
06:43 < cloudbender> The W3C for IndexedDB is a joke.
06:43 < cloudbender> nuff said.
06:44 < MiracleBlue> How so?  *is not too familiar with IndexedDB*
06:47 < asdf12> programming language you will spend your whole life avoiding? for me java :o
06:47 < Lorentz> you'd rather do php than java?
06:48 < asdf12> now i don't know!
06:48 < S7> Scheme
06:48 < S7> it just ugly
06:48 < MiracleBlue> I kinda like java, as a language
06:48 < livinded> I'd say php, .net, and java are all about equal for me
06:48 < MiracleBlue> Please don't hurt me.
06:49 < livinded> don't understand how anyone can say scheme is ugly
06:49 < livinded> I mean it's not really practical for anything, but it's not really ugly
06:49 < penzur> anything but python and js
06:49 < MiracleBlue> But for me, the language I avoid is Visual Basic, followed closely by Coffeescript haha
06:49 < penzur> everything
06:49 < asdf12> really? lol
06:50 < S7> livinded: too much parenthesis, can't stand that
06:50 < asdf12> you'll just be fine with javascript and python?
06:51 < nb-ben> Java's awesome
06:53 < FontPeg> I will avoid cobal should be easy
06:53 < asdf12> java is like washing dishes
06:54 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
06:59 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
07:01 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
07:29 < echo|> asdf12: Wat? <Avoiding obligatory sexist comment in reference to dishes, primarily because I'm not sexist, even though I feel it would strike humor.>
07:46 < AAA_awright> "The W3C for IndexedDB"? Do you even know what the W3C is...?
07:47 <@Nexxy> AAA_awright, IT'S THAT SITE THAT HAS ALL THOSE BAD LESSONS ON WEB TECH RIGHT?!
07:47 < penzur> www concert?
07:47 <@Nexxy> I just went to a bff concert!
07:48 < penzur> wrestlemania
07:48 <@Nexxy> lol
07:49 < SomeoneWeird> Nexxy, lol
07:52 < geNAZt> does someone know which is the best approach to handle vhost aliases in expressjs ?
07:54 < MiracleBlue> My favourite band in the world broke up :(
07:54 < MiracleBlue> I'm sad.
07:54 < SomeoneWeird> MiracleBlue, who?
07:54 < MiracleBlue> The Mars Volta
07:55 < SomeoneWeird> never heard of em lol
07:55 < MiracleBlue> </3
07:55 < MiracleBlue> They're amazing
07:55 < MiracleBlue> Also my node app is doing some really weird things
07:58 < sorressean> I'm kind of confused about something. this code shows socket.on('data', function). there's no .on method on the socket docs.
07:59 < sorressean> I do see a "data" event though.
08:01 < SomeoneWeird> sorressean, "on" is a special method for binding to events
08:01 < sorressean> SomeoneWeird:  ah. it's a javascript thing?
08:02 < sorressean> I'm newisht o js.
08:02 < SomeoneWeird> yeah
08:03 < SomeoneWeird> .on binds to the events forever, .once binds to the event once 
08:03 < SomeoneWeird> then you have .emit which actually emits events
08:03 < sorressean> haha. awesome. thanks
08:03 <@Nexxy> s/forever/until removed/
08:03 < sorressean> well yeah.
08:04 < sorressean> SomeoneWeird:  thanks. :)
08:04 <@Nexxy> \o/
08:04 < SomeoneWeird> Nexxy, sshh i was about to write you could remove them though
08:04 < SomeoneWeird> sorressean, np
08:04 <@Nexxy> oh, sorry :(
08:06 < penzur> sublime text or textmate?
08:09 < SomeoneWeird> ST2
08:12 < penzur> is there a livereload-like plugins for ST2?
08:13 < SomeoneWeird> hm?
08:15 < penzur> automatic browser reload
08:16 < amurdaca> do it in ajax
08:17 <@Nexxy> penzur, you can do it with node.js
08:17 < amurdaca> every 5 seconds re-GET the page and print it
08:18 < SomeoneWeird> i don't get why people think alt+d then pressing enter is so hard
08:19 <@Nexxy> it's not hard, it just takes time
08:19 <@Nexxy> those seconds add up
08:19 <@Nexxy> I do the same thing when I'm iterating client-side stuff
08:19 < geNAZt> look into webstorms live edit
08:19 < geNAZt> it is awesome for such things
08:19 <@Nexxy> it's nice to know the browser is reloaded by the time you tab back to it
08:20 < SomeoneWeird> eh, I suppose
08:20 <@Nexxy> I wrote nice-package pretty much for that reason
08:20 <@Nexxy> (and to rebundle things)
08:22 < penzur> I use yeoman for that
08:22 <@Nexxy> maybe it does that too then?
08:22 < penzur> yeah
08:22 < penzur> but i just want to know if Sublime Text2 has a plugin for that
08:27 < ericelliott> is there a way to do something like this: if (typeof module !== 'undefined') { module.exports = myThing; }
08:27 < ericelliott> without JSLint saying, "I'm smarter than you, idiot. You can't do that."
08:27 < _ior> #IFNDEF __MODULE
08:27 < _ior> #DEFINE __MODULE
08:27 < _ior> oh wait, wrong language
08:27 < ericelliott> _ior: Very helpful. =)
08:27 < _ior> :3
08:28 < _ior> well, one thing to remember is that jslint isn't the interpreter that actually runs your code ;)
08:28 < _ior> s/interpreter/parser/
08:28 < geNAZt> well module in every case is an object
08:28 < ericelliott> true enough, but whatevz..
08:28 < ericelliott> geNAZt: in the browser?
08:29 < geNAZt> what for a browser ?
08:29 < geNAZt> oO
08:29 < ericelliott> I write lots of code that I use both in Node.js and in browserland.
08:29 < ericelliott> lots of reusable library bits
08:29 < geNAZt> i dont think a browser has a modular js system
08:29 < tprice> how would i stop npm from logging to stdout?
08:29 < geNAZt> if you install one you may look up the docs or source for it
08:30 < tprice> i ant to have my own stream
08:30 < ericelliott> and I have this neat little snippet that will export if it finds module, or else attach to the window object
08:30 < ericelliott> geNAZt: browserify
08:30 < ericelliott> and it works much the same way that node modules work
08:31 < geNAZt> well then even in the browser
08:31 < geNAZt> maybe you want to check for module.exports
08:31 < ericelliott> the problem is, some of my utilities are general purpose and I don't want to lock people into browserify (or stitch) if they prefer something else (like AMD, or the wild global west)
08:31 < ericelliott> geNAZt: that will throw an error if module is not defined.
08:32 < ericelliott> I think the real answer is to kick ol' Douglas in the dangly bits and toss jslint in the round file
08:32 < geNAZt> then check for both ?
08:33 < ericelliott> how do I safely check for module without typeof?
08:33 < medikoo> ericelliot: just write CJS style, and it can be easily packed for browser even as AMD module, e.g. deferred is build that way, see browser instructions: https://github.com/medikoo/deferred#browser
08:33 < geNAZt> you cant
08:34 < ericelliott> geNAZt: yeah. I didn't think it was possible. Just wondering if I'm missing a trick, or if ol' Douglas really is off his nut.
08:34 < MiracleBlue> Hey ericelliott :)
08:34 < ericelliott> it would serve me right if he's in here. =)
08:34 < ericelliott> hi MiracleBlue
08:34 < ericelliott> what's shakin'?
08:35 < MiracleBlue> Nummuch, just trying to track down a bug in my node js app, really weird bug heh
08:35 < MiracleBlue> How about yourself?
08:36 < ericelliott> kicked out a pretty significant update to my book
08:37 < MiracleBlue> :D excellent!
08:37 < MiracleBlue> What's the book on?
08:37 < ericelliott> http://ericleads.com/javascript-applications/
08:37 < ericelliott> working on some sample code for it.. ran it through jslint, and it gave me an error with a typeof check
08:38 < MiracleBlue> Oh right!  I think you may have shown me once
08:38 < ericelliott> so I popped in here to see if any of the node wizards had a solution other than "ignore jslint"
08:38 < MiracleBlue> Heheh
08:39 < ericelliott> jslint may be smarter than Douglas Crockford, but it's not always smarter than we are. ;)
08:39 < MiracleBlue> Is it just being overzealous?  Or is it actually giving an incorrect flag?
08:39 < [AD]Turbo> hi there
08:39 < ericelliott> It's reporting an error when it shouldn't be.
08:39 < MiracleBlue> Ahh ok.
08:40 < MiracleBlue> Yeah, probably best to just ignore it then :)
08:40 < ericelliott> hi [AD]Turbo
08:48 < penzur> @ericelliott awesome book btw
08:49 < ericelliott> penzur: thank you. =)
08:50 < ericelliott> I'm speaking at Fluent. Are you going? http://bit.ly/UDdxOG
08:51 < penzur> I wish
08:52 < penzur> but i cant
08:52 < ericelliott> );
08:52 < ericelliott> too bad.
08:52 < penzur> yeah
08:52 < ericelliott> I'll post video and slides from my talk.
08:52 < ericelliott> Lots of good speakers coming.
08:52 < ericelliott> Should be a great conference.
08:53 < MiracleBlue> Where is it?
08:55 < ericelliott> San Francisco, May 28 - 30
08:55 < MiracleBlue> Aww bugger :(
08:56 < jvanveen> hi
08:56  * MiracleBlue is in australia, opposite side of the planet
08:56 < penzur> i'm in Philippines
08:57 < jvanveen> whats the common pattern for loops in which another function is called which has a callback?
08:57 < jvanveen> i need to provide a callback for outside the loop
08:57 < geNAZt> jvanveen: what kind of loop is it ?
08:58 < jvanveen> geNAZt: http://paste.kde.org/666608/ (343)
08:58 < jvanveen> a forEach 
08:59 < jvanveen> the code is a bit horrible. i didnt account for much async handling
08:59 < geNAZt> and u want a callback that get called if the results array is full ?
08:59 < jvanveen> yea indeed
09:00 < jvanveen> i don't know yet how to handle multiple callbacks to one result 
09:00 < geNAZt> https://github.com/caolan/async#map
09:00 < jvanveen> aha thanks! ill try that
09:01 < geNAZt> little tip: the whole asnyc lib is awesome :D
09:01 < SomeoneWeird> http://24.media.tumblr.com/cb66fffbe35f5dcc5e5e1ec49a2b09e7/tumblr_mhfgvpeSlT1qewacoo1_500.jpg
09:01 < SomeoneWeird> lold
09:01 < jvanveen> i'll use it :)
09:02 < penzur> @SomeoneWeird lol
09:07 < ericelliott> the async lib was my first thought, too.
09:07 < ericelliott> I like it.
09:07 < MiracleBlue> Yeah
09:07 < MiracleBlue> I love the async lib
09:11 < SomeoneWeird> caolan is god
09:21 < jvanveen> hm, so with async.map, i can do something like http://paste.kde.org/666614/ ?
09:21 < jvanveen> im not entirely familiar with the async mindset yet :)
09:21 < SomeoneWeird> use async.forEach
09:22 < jvanveen> ah thanks
09:22 < jvanveen> i need the combined results from all readFile's
09:22 < SomeoneWeird> yep
09:22 < jvanveen> ok :)
09:23 < SomeoneWeird> http://paste.kde.org/666626/
09:24 < jvanveen> awesome thanks! :)
09:30 < jvanveen> hm, so is callback() now called after async.forEach is completed?
09:30 < jvanveen> http://paste.kde.org/666632/
09:32 < jvanveen> ah never mind. i should add a third callback
09:33 < jvanveen> getting there slowly :)
09:33 <@Nexxy> moar callbacks
09:34 < jvanveen> handy stuff this async
09:37 < mscdex> node.js rules!
09:38 < penzur> what machines do you guys use?
09:38 <@Nexxy> \o/
09:38 <@Nexxy> penzur, machines?
09:40 < SomeoneWeird> i use this thing called a computer
09:40 < SomeoneWeird> it's pretty cool
09:41 < FontPeg> I use a automatic razor
09:41 < penzur> have you tried a potato?
09:41 < FontPeg> no electrolytes on hand :(
09:41 < SomeoneWeird> potatos?
09:41 < SomeoneWeird> you mean vodka?
09:43 < MiracleBlue> Coffee please.
09:43 < MiracleBlue> One beer, coming up!
09:45 < AAA_awright> Is there any good reason to use the void keyword?
09:46 < SomeoneWeird> in js? nope
09:52 < jvanveen> ehm, for a key/value thingy i cant use forEach
09:53 < AAA_awright> jvanveen: "key/value thingy"?
09:53 < mscdex> jvanveen: that's because it's an object
09:53 < mscdex> not an array
09:54 < fruitFly> will node.js work with btrfs?
09:54 < mscdex> why not?
09:56 < mscdex> jvanveen: you can use `for (var key in obj) {}` to iterate over properties in an object
09:58 < SomeoneWeird> mscdex, he wants todo it using async
09:58 < mscdex> async?
09:58 < fruitFly> is btrfs the future and might be worth learning?
09:58 < fruitFly> I'm new to linux and not very experience with filesystems and am learning node, should I learn btrfs/
09:58 < fruitFly> ?
09:59 < mscdex> what use is iterating over a list asynchronously?
09:59 < mscdex> s/list/object
09:59 < SomeoneWeird> if he wants to call an async function on each key/value ?
09:59 < mscdex> fruitFly: the underlying file system type doesn't matter to node, node just makes OS-level system calls
10:00 <@Nexxy> jvanveen, you can use Object.keys
10:00 <@Nexxy> Object.keys(<yourObject>).forEach
10:00 < mscdex> there you go
10:01 < mscdex> Nexxy to the rescue
10:01 <@Nexxy> do I get to wear the cape?!
10:01 < mscdex> what?? you're not wearing it already?
10:01 < mscdex> !
10:01 <@Nexxy> eep
10:01  * Nexxy puts on her cape
10:03 < mscdex> someone ought to write a script that goes through all of the npm modules with a github repository set in their package.json and check if a GET request returns 404. if it does, it should send a notification to the author to update it
10:04 < mscdex> it seems like every third module i look at has this problem
10:05 < SomeoneWeird> yeah
10:05 <@Nexxy> someone as in you
10:05 < mscdex> you're the one with the cape
10:05 < SomeoneWeird> oOOOOOoooooooooOOOOooo
10:06 <@Nexxy> don't be jealous
10:06 <@Nexxy> you can wear it too
10:06 < penzur> wow!
10:06  * SomeoneWeird takes Nexxys cape
10:06 < mscdex> i bet you could even code up a hardware mod that lights up a red LED when a new module is added/updated with a bad repo link
10:07 <@Nexxy> lol
10:07 <@Nexxy> I'm actually working on one that fades an LED up when someone visits my wobsite
10:08 <@Nexxy> I want to have different colors for different parts
10:09 < mscdex> someone did something like that the other day
10:09 < mscdex> lights up a neon sign
10:09 <@Nexxy> \o/
10:10 < mscdex> http://blog.davidsingleton.org/raspberry-pi-website-hit-tracker/
10:10 < jvanveen> mscdex: is there an async version of that?
10:10 < SomeoneWeird> of what?
10:11 < mscdex> jvanveen: if you're referring to the async module.... then `async.forEach(Object.keys(foo), ...)`
10:11 <@Nexxy> the problem with that is you will only receive the key name as a string
10:11 < mscdex> yeah, but you can just do foo[key]
10:11 < jvanveen> mscdex: ah got it. thanks!
10:12 <@Nexxy> right
10:17 < jvanveen> somehow the end result of async.forEach is never reached in http://paste.kde.org/666686/
10:18 <@Nexxy> so much callback hell
10:18 < FontPeg> yay js
10:20 <@Nexxy> FontPeg, \o/
10:22 < FontPeg> Nexxy: <_< object.keys is very useful thanks for suggesting that
10:22 <@Nexxy> FontPeg, you're quite welcome :)
10:25 < xk_id_> jvanveen: do you see the "push it!" message?
10:26 < jvanveen> xk_id_: yes that works. the final results function isnt called though
10:27 < jvanveen> ah. i got it
10:27 < jvanveen> files is larger than the condition thats met for cb
10:27 < jvanveen> if(ext[ext.length - 1] == 'mmm'){
10:27 < jvanveen> woohoo!
10:27 < jvanveen> works
10:27 < xk_id_> :) well done
10:28 < xk_id_> jvanveen: btw, maybe you should pass the "err" to the cb(), just in case
10:28 < jvanveen> thanks, but err isnt defined within the iterator function right?
10:28 < geNAZt> one question
10:28 < geNAZt> i want to have vhosts
10:29 < geNAZt> that seperate their context they run in
10:29 < geNAZt> like a sandbox, is it better to run child processes or to use the vm module
10:29 < xk_id_> jvanveen: line 13?
10:30 < jvanveen> xk_id_: ah like that. i understand. yea, that would be better. 
10:50 < xk_id_> none knows the artist?
10:50 < xk_id_> oups, wrong channel
10:51 <@Nexxy> now I'm curious
10:51 <@Nexxy> what if xk_id_ never finds out who the artist is?
10:53 < stanonyime> Hullo
10:59 < geNAZt> can i bring up sandboxes that act like streams for outcoming data ?
11:13 < jvanveen> hm, im trying to make a template autoreload, but that also involves recompiling requirejs modules
11:13 < jvanveen> now i would like to send an update while requirejs is compiling, but it seems to be blocking
11:13 < jvanveen> http://paste.kde.org/666722/
11:14 < geNAZt> https://gist.github.com/geNAZt/4730331
11:14 < geNAZt> is it possible to share a context in the vhosts ?
11:14 < geNAZt> like a db connection or a cache ?
11:15 < jvanveen> hm, there is another instance of http.Server for each vhost?
11:15 < geNAZt> no
11:15 < geNAZt> they run in one bigger express app
11:16 < geNAZt> but in their own contexts
11:16 < geNAZt> so if one alters the global the other dont change, if one vm crashes the other run
11:16 < geNAZt> thats the goal
11:16 < fruitFly> linux mint kde vs cinnamon?
11:17 < jvanveen> not sure, sorry
11:17 < geNAZt> but i want to "merge" parts of the global object ( like db pools, cache, key value stores ) into the vhost context
11:17 < geNAZt> but i do not know how
11:18 < geNAZt> something like a big pool where i can get other little pools out
11:24 < mscdex> fruitFly: LXDE! :-D
11:34 < jvanveen> geNAZt: maybe have some message parsing with a common process for all vms?
11:35 < jvanveen> havent tried vm really, cant tell sorry
11:35 < jvanveen> seems like some sandboxing environment?
11:40 < jvanveen> hm, is there a way to set a function to be executed after x seconds?
11:40 < jameshowe> jvanveen: setTimeout
11:41 < FontPeg> js 101
11:41 < jvanveen> jameshowe: ok thanks
11:41 < FontPeg> setInterval is very usefull also
11:43 < jvanveen> hm that kinda solved my requirejs.optimize async problem
11:49 < jameshowe> you sure you don't want to be using nextTick or setImmediate instead?
12:13 < MonKuver> Hi
12:13 < MonKuver> anybody speaks russian?
12:27 < geNAZt> no
12:32 < cloudbender> Is there a way to have a function call an additional callback after the first callback completes ?
12:32 < SomeoneWeird> wat
12:33 <@Nexxy> cloudbender, pass it as an argument to the first callback
12:34 < cloudbender> I thought of that, but then the second function returns back to the first function on return
12:34 <@Nexxy> then you don't want to do what you asked
12:34 <@Nexxy> you want to pass the original callback to another function
12:34 <@Nexxy> and call it from there
12:35 < cloudbender> << scratches head, peels banana, ponders this new thing
12:36 < biscii> hey guys, does anyone have any advice on which AWS instance would be suitable to processing realtime feeds ?
12:36 <@Nexxy> is there anything already in existence that streams a tty over tcp?
12:37 < cloudbender> putty
12:37 < FontPeg> seems like a trick question
12:37 <@Nexxy> within the context of node
12:37 < cloudbender> You mean a tty device for deaf ?
12:37 <@Nexxy> I mean obviously I could use nc or something
12:37 < Industrial> https://github.com/chjj/tty.js
12:38 < cloudbender> excuse me, 'for the deaf' ?
12:38 < FontPeg> tdd?
12:39 < Industrial> ttd?
12:39 < mmalecki> Nexxy: you can set up a repl over tcp
12:39 < mmalecki> but I don't think that's what you're looking for
12:39 < FontPeg> also called tty, TDD is correct
12:39 < cloudbender> Right. ttd's usually answer phone calls.
12:40 < cloudbender> very intersting challenge
12:40 <@Nexxy> mmalecki, lol yeah I think i'll just use serialport + dnode
12:40 <@Nexxy> lol
12:40 < cloudbender> How does the caller get to the device ?
12:40 <@Nexxy> I'm talking about a terminal
12:40 <@Nexxy> lol
12:40 < cloudbender> oh.
12:40 < cloudbender> well.
12:41 < cloudbender> Look at gate-one software
12:41 < cloudbender> Or power-term
12:43 < AAA_awright> biscii: Anything really
12:43 < AAA_awright> Depends on your throughput you need
12:46 < biscii> @AAA_awright cheers, I'm doing something like monitoring a hashtag like "Super Bowl" so i was just going to get a marge instance and be done with it
12:46 < AAA_awright> Yikes, that could pull in a lot of data depending
12:46 < hipsterslapfight> not really, twitter only gives you a certain amount
12:47 < hipsterslapfight> you're never getting everything, most times not even near it
12:47 < AAA_awright> Some things you can get all the tweets
12:47 < AAA_awright> At least individual users
12:47 < hipsterslapfight> not if you're monitoring a high volume hashtag you're not :v
12:47 <@Nexxy> a marge instance?
12:47 < AAA_awright> biscii: Definitely depends on the incoming feed. There's entire operating systems dedicated to high-speed parallel processing of Twitter data
12:48 < biscii> yay...
12:48 <@Nexxy> AAA_awright, wat?
12:48 <@Nexxy> twitOS?
12:49 < asturel> anyone can suggest a module for facebook graph api? (sending notifications) ?
12:49 < biscii> @AAA_awright  yeah I'm testing with some big tags now like ahem  #yolo etc
12:50 < hipsterslapfight> are you using the firehose biscii
12:50 < biscii> seems to be handling it fine so far 
12:50 < AAA_awright> There's e.g. Storm
12:50 < biscii> @hipsterslapfight not sure what you mean?
12:50 < FontPeg> large volumes very fast
12:51 < FontPeg> like water from a fire hose
12:51 < hipsterslapfight> https://dev.twitter.com/docs/streaming-apis/streams/public biscii
12:51 < hipsterslapfight> https://dev.twitter.com/docs/api/1.1/get/statuses/firehose even
12:52 < zonetti> is npmjs.org accessible right now?
12:52 < biscii> and cool yeah I'm using the instagram equivlant
12:52 < FontPeg> heheh
12:53 <@Nexxy> zonetti, the api is fine, the site is having issues
12:53 <@Nexxy> (at least for me)
12:53 < zonetti> Nexxy, for me too =/
12:53 <@Nexxy> it's okay
12:53 <@Nexxy> we'll get through this together
12:53 <@Nexxy> if things get really bad
12:53 < zonetti> Nexxy, I really hope so.. ty :)
12:54 <@Nexxy> mmalecki will just spin up a registry
12:54 <@Nexxy> like the boy wizard that he is
12:54 <@Nexxy> he runs on spirits though
12:54 <@Nexxy> so we will have to feed him vodka and what not
12:55 < mmalecki> give me 1 L of vodka and half an hour
12:55 < mmalecki> registry seems fine tho?
12:55 <@Nexxy> so far
13:01 < ghilly> hello, what happened to node up?
13:03 < cloudbender> Don't know anything about it
13:04 < mscdex> it went node down?
13:05 <@Nexxy> AHAHAHAHAHA.
13:06 <@Nexxy> ಠ_ಠ
13:06 < cloudbender> Node up ?
13:06  * mscdex shakes a fist at unicode boxes!
13:06  * Nexxy maniacal laugh
13:06 < cloudbender> lol
13:08 < cloudbender> << wishes he knew enough to appreciate the goings-on.  Gathers much from silence.
13:09 <@Nexxy> cloudbender, nodeup.com
13:09 <@Nexxy> it is a node.js centric podcast
13:09 < cloudbender> it's down ?
13:09 <@Nexxy> I think they're referring to the lack of new content
13:10 < cloudbender> ok sorry.  I'll go back to the kid's table and eat my pie now.
13:11 <@Nexxy> cloudbender, oh stop it lol
13:11 <@Nexxy> everybody knows #node.js is one giant kid's table
13:11 < geNAZt> i dont want to eat my spinat :(
13:12 < cloudbender> I use spinach and cucumbers on me sandwiches instead of lettuce.
13:12 < geNAZt> urgs :D
13:13 < cloudbender> Scientific Fact #19 : It takes more calories to digest celery than you get from celery.
13:15 <@konobi> okay... this is just crazyness
13:15 <@konobi> http://hackaday.com/2013/02/07/gifsockets-websockets-using-animated-gif-files/
13:16 < geNAZt> anyone knows why vms keep failing every ~5 minutes ?
13:16 < geNAZt> vms: http://www10.pic-upload.de/07.02.13/nmhbu8b3v1v.png
13:16 < geNAZt> without: http://www7.pic-upload.de/07.02.13/iuppvzayiye.png
13:16 < geNAZt> oO
13:16 <@Nexxy> oh my god that's amazing
13:18  * mscdex shakes a fist at European date formats!
13:18 < fruitFly> cloudbender: I recommend very dark tender lettuce as spinach like kale contains oxolates that hinder calcium absorption
13:18 < geNAZt> i will show u a fist !!!!!
13:18 < cloudbender> ty FruitFly
13:19 < AAA_awright> cloudbender: So what's this deal you have against IndexedDB?
13:19 < fruitFly> cloudbender: you will get calcium from spinach but diversify your dark leaves as you don't want to consume oxolates 
13:19 < AAA_awright> Also... don't you want to absorb calcium?
13:20 < cloudbender> Too much calcium can be a bad thing.
13:20 < cloudbender> RE IndexDB
13:20 < geNAZt> i have no idea why vms tend to fail this hard
13:20 < geNAZt> :(
13:20 < AAA_awright> Then just eat less calcium
13:20 < cloudbender> I LOVE the concept of IndexedDB.
13:20 < AAA_awright> Right
13:21 < AAA_awright> Searching by indexes instead of fields is a great idea that databases need
13:21 < cloudbender> The W3C for IndexedDB is slopped in and obtuse.
13:21 < AAA_awright> The W3C?
13:21 < _ior> mscdex, european date formats make a great deal more sense than us date formats
13:21 < _ior> however, they are both still wrong
13:21 < cloudbender> The MDN for IndexedDB is even more slopped in.
13:21 < _ior> as coders, we should all know the only correct way to store dates is yyyy mm dd, because sorting.
13:21 < AAA_awright> cloudbender: The W3C is an organization, erm
13:21 < fruitFly> AAA_awright: yes, hence why one should avoid oxolates in cruciferous greens
13:21 < fruitFly> great sources of calcium are oranges, papaya and DARK tender leaves
13:21 < fruitFly> to name a few
13:21 < AAA_awright> _ior: Also, that's ISO form
13:22 < _ior> iso schmiso
13:22 < _ior> :D
13:22 < geNAZt> noone has a tip about the vm thing ?
13:22 < AAA_awright> ISO 8601
13:22 < AAA_awright> Or actually a particular subset as described in some RFC
13:22 < cloudbender> ty AAA_awright
13:23 < curvedmark> hey guys, I implemented a new language that compiles to CSS. please check it out if you got time right now. :) http://roole.org
13:23 < cloudbender> Well, I wonder of the technology is going to be stalled or hindered anti-competatively.
13:23 < AAA_awright> cloudbender: What's the particular issue you have?
13:23 < cloudbender> I need solid docs
13:24 < AAA_awright> Well it's still being drafted
13:24 < AAA_awright> http://www.w3.org/TR/IndexedDB/ is the formal effort
13:24 < cloudbender> OK.   Maybe I'm assuming it should be further along.
13:25 < cloudbender> It seems those heading the W3C comittee for it have every reason to insure it's lack of adoption.
13:25 < AAA_awright> When anyone from Google is invited on I have pause
13:25 < _ior> isn't that generally true with the w3c?
13:26 < AAA_awright> But it could be worse, they could have had hixie
13:26 < _ior> i mean, WAP came out of them, right?
13:26 < cloudbender> maybe, not sure.  I've have only recently escaped the confines of the MOG thing.
13:27 < _ior> multiplayer online game?
13:27 < Perlinpinpin> Hi
13:27 < Asuwiel> Hello
13:27 < cloudbender> no.  cloud-backed business apps with cloud-forward datacenters on premises.
13:28 < geNAZt> like app engine ?
13:28 < cloudbender> The term 'enterprise' is dead.
13:28 < _ior> is MOG the new enterprise?
13:28 < _ior> le enterprise c'est mort. vive le enterprise.
13:29 < AAA_awright> I actually tried implementing IndexedDB in Node.js but I forget why I had to stop
13:29 < AAA_awright> It was missing a critical feature
13:29 < AAA_awright> And I entirely forget it
13:29 < cloudbender> riiiight.
13:29 < cloudbender> strange, no ?
13:31 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:34 < nb-ben> how would you call the process of specifying authority
13:34 < AAA_awright> Oh, it may have been transaction support
13:34 < AAA_awright> Which IndexedDB /does/ support
13:34 < AAA_awright> But is really hard to implement :-\
13:34 < AAA_awright> But no, idk
13:40 < cloudbender> We could flood the channel and waste time on the topic now, or get on with life for another half-year while they sniff thier own poop and pat each other on the back.  They are so stuck on arcane thinking that they are missing the new wave.
13:40 < AAA_awright> cloudbender: What? Who?
13:41 < _ior> the w3c, i believe
13:41 < _ior> is what he is ranting about
13:41 < MI6> joyent/node: Bert Belder v0.8 * 53282ec : http: protect against response splitting attacks  This patch is a back-po - http://git.io/KNsFbg
13:41 < AAA_awright> It doesn't look like cloudbender even knew they were people...
13:42 <@Nexxy> simmer
13:43 < MI6> joyent/node: Bert Belder v0.8 * 255bc94 : http: protect against response splitting attacks  This patch is a back-po - http://git.io/AbOmZQ
13:43 < cloudbender> That was a one-time statement. Really.
13:43 < cloudbender> I'm not prone to flaming.
13:44 < cloudbender> And yes, I get that they are people.  But they need to wake the heck up.
13:44 < AAA_awright> cloudbender: What's the problem?
13:44 < AAA_awright> Everything looks fine to me
13:45 < AAA_awright> It's an ongoing, iterative cycle of Define functionality -> implement -> test -> change defined functionality
13:45 < cloudbender> If you have time, read it carefully.  Or we can talk later.  I'm going to give it another, say, six months.
13:45 < AAA_awright> cloudbender: I've read it top to bottom, multiple times. What's your issue?
13:46 < cloudbender> Compare it to the node documentation.
13:46 <@konobi> RFCs get abandoned and deprecated all the time... generally due to details only discovered during implementation
13:46 < AAA_awright> cloudbender: IndededDB isn't in Node.js...
13:46 < AAA_awright> What's your problem with the current draft that I linked to?
13:46 < _ior> i miss rfc 1149
13:47 < AAA_awright> _ior: I don't think it ever left
13:47 < cloudbender> I meant in general, using the W3C as an example of the seemingly inept treatment of a crucial technology.
13:47 < cloudbender> But maybe I'm making assumptions.
13:47 < _ior> well i guess it'll be superseded with rfc 6214
13:47 < AAA_awright> cloudbender: Examples?
13:47 < cloudbender> You.
13:47 < AAA_awright> pics or it didn't happen
13:48 < cloudbender> You are writing advanced code, in my understanding.
13:48 <@konobi> there's lots to consider versus just the javascript, there's sandboxing, security, cross-origin, quotas, etc. that all need to get taken into account
13:48 < cloudbender> And yet you failed to implement IndexedDB, becuase of it's issues.
13:48 <@konobi> that stuff doesn't happen overnight
13:48 < AAA_awright> cloudbender: I never said it had issues. Your point?
13:49 < cloudbender> You said you abandoned it becuase of a feature it was missing.
13:49 < cloudbender> You abandoned it.
13:50 < _ior> don't worry, compared to the ITU and ICANN, the W3C are downright saintly
13:50 < AAA_awright> cloudbender: That's not a problem. What's _your_ problem
13:51 < nathan7> cloudbender: If something is hard to implement well, we standardise it
13:51 < nathan7> cloudbender: So that every web browser (about 5 or so?) instead of every JS app needs to implement it
13:52 < cloudbender> Right.  And I admit maybe I'm making presumptions.  Maybe the technology is not at that point.
13:52 < cloudbender> It seems long overdue.
13:52 < AAA_awright> So what are you complaining about?!?
13:53 < FontPeg> _ior: you must have seen rfc 2549
13:53  * konobi shoots cloudbender with a tranq dart
13:53 < _ior> font, was that the ip over avian carrier with QOS?
13:53 < fwg> "this is 2013, We Should Have This By Now (tm)"
13:53 < FontPeg> yessir'
13:54 < _ior> haha yeah
13:54 < _ior> sheer brilliance
13:54 < fwg> _ior: QOS being african vs european?
13:54 < _ior> and of course that leaves another rfc missing: ip over avian carrier for ipv6 with qos
13:54 < cloudbender> You guys are missing my point, but it's cool.  Wish there was a way to yak on voice so as not to appear like a raving mad lunatic giving the finger to 'the man'.
13:55 < _ior> fwg haha
13:55 < AAA_awright> HAHAHA
13:55 < FontPeg> ah the next update should finally help be build that system
13:55 < nathan7> _ior: You don't really need QoS if you have enough carriers
13:56 < _ior> hmmm well, let's see. i wonder how many pigeons there are in the world
13:56 < FontPeg> Ostriches also carry data, in bigger amounts at slower speeds
13:56 < _ior> google says estimates are about 400 million pigeons in the world
13:56 < _ior> that's not very many packets
13:57 < AAA_awright> And homing pigeons tend to only deliver one-way
13:57 < FontPeg> udp only
13:57 < _ior> nevermind the homing pigeons, that's probably too much work to train them
13:58 < _ior> probably better to just release several thousand and let probability do the work for you
13:58 < _ior> unless, of course, pigeons follow some kind of weird magneto-sense they have
13:58 < AAA_awright> That might work with bumble bees
13:58 < AAA_awright> I think they tend to spread out, unlike pigeons which tend to converge
13:58 < FontPeg> multicasting requires a cloning device though
13:59 < _ior> hm
13:59 < AAA_awright> I propose a standard that combines rabbits with homing pigeons
13:59 < _ior> obviously this rfc did not receive sufficient attention to failure modes
14:00 < _ior> un ovni del gobierno ecuatoriano?
14:00 < amurdaca> yo node
14:00 < geNAZt> yo
14:00 < geNAZt> :D
14:01 < AAA_awright> cloudbender: And no, I'm just asking, what's your interest with IndexedDB? If you want to not sound like a lunatic then describe specific issues with it instead of leaving us guessing
14:07 < cloudbender> I need an object database caching enigine for the client side.  I need it now.  I don't need an RDBMS under my browser.  I can deal with the data in RAM once I pull it out of local-storage.  I can do it my way, using javascript, much more efficiently.  When I code against the cloud in the future, the client side will be a persisted cache.
14:08 < niix> Bah my github news feed is slow
14:09 <@Nexxy> so apparently this is pretty funny: https://twitter.com/nexxylove/status/299514398559592448
14:09 < AAA_awright> cloudbender: You probably want to store server-side and fetch with HTTP
14:09 < cloudbender> right.
14:10 < AAA_awright> Nexxy: Lol
14:10 <@Nexxy> I'm having way too much fun with these
14:11 < MI6> joyent/node: Nikhil Marathe master * 6bcd9a4 : Update http docs with http.IncomingMessage.  http.ServerRequest and http. - http://git.io/KasFfQ
14:11 < cloudbender> Nexxy nicely done
14:12 <@Nexxy> :P
14:13 < fwg> Nexxy: <3
14:14 <@Nexxy> fwg, <3
14:14 < fwg> Nexxy: you could make nodejsreactions.tumblr.com
14:15 <@Nexxy> lol 
14:15 < mscdex> no, nodejsrul.es!
14:18 < shesek> Nexxy, heh, they're great!
14:18 < shesek> well done :)
14:20 < cloudbender> I've reviewed the 'events' page at node.  Excellent work.  An absolute lack of BS.
14:21 < niix> Ah I need ideas on something to write
14:21 < cloudbender> <<< is probably evangilizing, is having a mood.
14:23 <@konobi> cloudbender: pouch?
14:23 < cloudbender> pouch ?
14:24 <@konobi> pouchdb
14:24 < cloudbender> Will research.  Am looking at couch or mogo for the server side.
14:25 < cloudbender> mongo I mean
14:25 < cloudbender> I need an object database, not an rdbms
14:25 < cloudbender> the object-relational model is a goner.
14:26 <@konobi> haha
14:27 <@konobi> cloudbender: pouchdb.org - since i noticed there might be an npm module or something odd
14:28 < daleharvey> * pouchdb.com 
14:28 < cloudbender> ok thank you.  Next month is server-side database month.
14:28 <@konobi> ah, yes'm
14:28 < daleharvey> if you have any questions, feel free :)
14:29 <@konobi> daleharvey: why you so crayz
14:29 < onr> daleharvey: your nick is pretty familiar to me
14:29 < kniven> has anyone successfully compiled node.js for DreamPlug?
14:30 < daleharvey> konobi: lol
14:30 <@konobi> kniven: yes
14:30 <@konobi> seems like github's down
14:30 <@konobi> oh... and now it's back
14:30 < daleharvey> onr: urm, its likely either couch / pouch related stuff or mozilla related stuff?
14:30 < kniven> konobi: ok
14:31 < onr> daleharvey: do you have a book on couchdb?
14:31 < cloudbender> I wrote a proof of concept using Versant's DB4o last year.  It was awesome.  If you've never worked with a true object database, it's an eye opener.
14:31 < daleharvey> onr: nope, I am a terrible writer :P
14:31 < cloudbender> It sounds like couch is headed in that direction.
14:31 < kniven> konobi: great
14:32 < onr> daleharvey: ah. related to HN anyway?
14:33 < daleharvey> yeh I used to post a bit on HN, not so much these days
14:35 <@konobi> kniven: configure --dest-cpu=arm --with-arm-float-abi=soft
14:35 <@konobi> i think that's it... has been a while since i've done a compile on there
14:37 <@konobi> though plain ./configure on dreamplug should be fine
14:47 < kniven> konobi: I'm cross-compiling though with arm-marvell-linux-gnueabi, and the configure It succefully compiles but when I run it I get an 'Illegal instruction'
14:48 < kniven> *using ./configure --without-snapshot --dest-cpu=arm
14:49 <@konobi> i just compiled on the dreamplug itself
14:49 < kniven> I dont have enough memory on mine
14:49 < kniven> :(
14:50 <@konobi> 512M?
14:50 < swaroge> Hello ! Dose enybody wose hase situation when firewall block websocket. I mean i start node server.js script to listn websocket but cilent cant connect. Its in prod server. In my local all work good. Thx.
14:50 < kniven> Y
14:50 <@konobi> kniven: try make -j1
14:51 < kniven> ok
14:51 < `3rdEden> swaroge: that question doesn't make sense at all, even after re-reading it 4x
14:51 <@konobi> swaroge: you'd have to ask your firewall vendor??
14:51 < `3rdEden> swaroge: are you connecting over HTTPS or HTTP
14:52 < swaroge> http
14:52 < `3rdEden> that's your issue
14:52 < Industrial> What do I do with this NPM error? https://gist.github.com/Industrial/41743479f8e52ac816cd
14:52 < `3rdEden> use HTTPS
14:52 < swaroge> Thx !
14:53 < `3rdEden> swaroge: and if that doesn't help, you are basically fucked. And would need to create a fallback for websockets, for example using HTTP polling
14:53 < Industrial> `3rdEden: no u! (really though I have no idea)
14:53 < jrajav> Is there anyway to parse a Shift-JIS file with Buffer?
14:54 <@konobi> Industrial: npm cache clear ?
14:54 < swaroge> `3rdEden thx
14:54 < `3rdEden> Industrial: W H A T  E V E R  Y O
14:55 < `3rdEden> swaroge: also, you might find these interesting: http://2012.realtimeconf.com/video/index
14:55 < `3rdEden> https://speakerdeck.com/3rdeden/realtimeconf-dot-oct-dot-2012
14:56 < Industrial> solved, cheers
14:59 < ruke> hi :D
15:00 < iwalkbarefoot> hi Ruke
15:00 < ruke> whats up
15:00 < iwalkbarefoot> nothing much, killing time at work waiting for stuff to compile / test
15:03 < jrajav> Guess not :/
15:05 < brianc> voodootikigod: the bug in any-db preventing using the native postgres driver is resolved
15:10 < cloudbender> She nails it ... but the host is a knob.   http://www.youtube.com/watch?v=xzMoyXhEfAs
15:11 < cloudbender> <<< feeling much better now.
15:19 < scott_gonzalez> Does anyone know why require("child_process").exec("git shortlog -s", ... ) would hang, but running other git commands would work?
15:19 < scott_gonzalez> My actual code is using spawn, and I'm not getting any stdout or stderr data events.
15:24 < cloudbender> I have seen cases where you assign a requirement to a var.
15:26 < cloudbender> var http = require('http');
15:32 < amurdaca> hey guys i've setup my nginx following this tutorial -> http://blog.argteam.com/coding/hardening-node-js-for-production-part-2-using-nginx-to-avoid-node-js-load/
15:32 < amurdaca> but now when serving static content from nginx
15:33 < amurdaca> my app.js log many 404 and i cannot access /stylesheet for example in my browser even if it is correctly server by nginx
15:33 < amurdaca> this happen if i remove the line -> 
15:33 < amurdaca>   app.use(express.static(path.join(__dirname, 'public')));
15:33 < amurdaca> so nginx will server my public/ (static) content
15:34 < amurdaca> but with this i cannot access stylesheet/ javascript/ images/ from my browser
15:34 < amurdaca> any hints?
15:35 < onr> amurdaca: paste your nginx.conf
15:35 < amurdaca> the one in the tutoral i linked
15:35 < amurdaca> note it works perfectly
15:35 < amurdaca> but if i let nginx to serve static public/ content
15:36 < amurdaca> look http://korilo.com
15:36 < goonnow_> https://npmjs.org/package/do-gist
15:36 < amurdaca> it says cannot get /stylesheet
15:36 < goonnow_> If you have any suggestion please tell me.
15:36 < amurdaca> but nginx server css and all :)
15:37 < kniven> file permissions?
15:37 < onr> amurdaca: it seems nginx passes /stylesheet to node.js
15:37 < amurdaca> try now
15:37 < amurdaca> you cannot get www.korilo.com/stylesheet/...
15:38 < onr> http://www.korilo.com/stylesheets/normalize.css
15:38 < onr> amurdaca: normally nginx returns 403 when you try to access a folder that doesn't specified index
15:38 < amurdaca> my bad it will give them but in my log file i get 404
15:39 < onr> amurdaca: nginx.conf from tutorial make nginx pass all error pages to node.js
15:39 < amurdaca> http://pastebin.com/tLk75Rdw
15:39 < amurdaca> look errors
15:40 < onr> amurdaca: if you want to see list of files in stylesheet directory, you need to enable autoindex module in nginx conf
15:41 < amurdaca> you didn't understood what's my problem onr..
15:41 < amurdaca> I serve my expressjs /public with nginx..
15:42 < amurdaca> so i removed the line app.use(express.static(path.join(__dirname, 'public')));
15:42 < amurdaca> now
15:42 < amurdaca> nginx serves correctly my static public/
15:42 < onr> amurdaca: just add location / { alias /bla/bla/bla/node/public/; } before the proxy pass block
15:42 < amurdaca> but my express app.js log that when i get / my static files in public/ are 404 (not found)
15:44 < onr> amurdaca: how can you reach the your express app if you're serving static via nginx?
15:45 < amurdaca> becouse in my index.ejs i have relative links src="/stylesheet/normalize.css"
15:46 < onr> amurdaca: http://www.korilo.com/javascripts/plugins.js
15:46 < amurdaca> GET /javascripts/plugins.js 404 1ms
15:46 < amurdaca> HEAD /javascripts/plugins.js 404 1ms
15:46 < amurdaca> HEAD /javascripts/plugins.js 404 1ms
15:46 < amurdaca> HEAD /javascripts/plugins.js 404 0ms
15:46 < onr> do you have plugins.js in /javascripts folder?
15:46 < amurdaca> my app.js logs this..
15:46 < amurdaca> no
15:46 < amurdaca> is in public/javascript folder
15:47 < onr> your nginx is configured to redirect 404 errors to your Express app
15:47 < amurdaca> how i set not to?
15:48 < onr> amurdaca: join #nginx channel, type !primer
15:48 < rideh> good humanizing package?
15:49 < amurdaca> no help in that blog post..
15:50 < onr> amurdaca: that blog post tells you how to serve static files with nginx correctly
16:02 < amurdaca> it doesn't work..
16:02 < amurdaca> always the same problem..
16:03 < amurdaca> nginx server my public/ folder and 404, 50x errors..
16:03 < amurdaca> but in my app.js log i always get /javascript/whatever.js from my index.html
16:03 < amurdaca> 404
16:23 < voodootikigod> brianc: here?
16:27 < Amiramix> Hi, I was wondering if anybody is able to help with compilation of node.js on Solaris
16:27 < Amiramix> I'm getting Error running GYP
16:27 < Amiramix> gyp: Call to '(echo | $(echo ${CXX_host:-$(which g++)}) -m32 -E - > /dev/null 2>&1) && echo "-m32" || true' returned exit status 2. while loading dependencies of /Documents/staging/pdfweb/deps/node/node.gyp while trying to load /Documents/staging/pdfweb/deps/node/node.gyp
16:27 < AAA_awright> What should I use for file locking on Node.js?
16:27 < voodootikigod> brianc: getting this-> https://gist.github.com/voodootikigod/054281296f02ec821805
16:28 < AAA_awright> Amiramix: Do you have g++ ?
16:30 < Amiramix> which g++ shows /opt/csw/bin/g++
16:30 < Amiramix> I installed gcc and g++ from OpenCSW (gcc4core and gcc4g++)
16:35 < cloudbender> OK testing once.  Don't yell at me.
16:35 < cloudbender> >> with(new(require('events').EventEmitter)) {on("test",function () {return "test"}); emit("test")};
16:35 < purr> cloudbender: ReferenceError: require is not defined
16:36 < kniven> make error: #error "For thumb inter-working we require an architecture which supports blx"
16:36 < cloudbender> The bot does not allow require ?
16:36 < kniven> konobi: got any tips?
16:38 < bnoordhuis> kniven: compiling for arm?
16:38 < kniven> yes
16:39 < bnoordhuis> kniven: what machine / board?
16:39 < kniven> bnoordhuis: DreamPlug
16:39 < kniven> Linux dreamplug-debian 2.6.39.4 #49 PREEMPT Thu Feb 9 13:36:22 EST 2012 armv5tel GNU/Linux
16:39 < bnoordhuis> kniven: sounds like a sex toy. what cpu does it have according to /proc/cpuinfo?
16:40 < bnoordhuis> ah, armv5
16:40 < bnoordhuis> can you gist / post the the output of /proc/cpuinfo anyway?
16:41 < kniven> bnoordhuis: http://pastebin.com/NhLdU85Y
16:42 < bnoordhuis> kniven: try setting USE_THUMB_INTERWORK in deps/v8/src/arm/constants-arm.h to 0
16:43 < kniven> bnoordhuis: ok, I'll try that. We'll see in about 1hr when its done compiling
16:44 <@Nexxy> lol
16:45 < kniven> what about CAN_USE_THUMB_INSTRUCTIONS
16:46 < kniven> will changing USE_BLX 1 to USE_BLX 0 work?
16:47 < kniven> nvm
16:55 < kniven> ./node: /lib/libc.so.6: version `GLIBC_2.15' not found (required by ./node)
16:59 < CoverSlide> dreamplug haha
16:59 < brianc> voodootikigod: I here now
17:01  * kniven out to lunch
17:02 < CoverSlide> is armv5 not supported?
17:05 < MI6> joyent/node: isaacs master * 33b2aeb : stream: Writable should ignore encoding for buffers  Fix #4727 Fix einaro - http://git.io/IZB5jw
17:14 < MI6> joyent/node: isaacs created branch v0.9.9-release - http://git.io/XUUU3g
17:14 < MI6> joyent/node: isaacs v0.9.9-release * 4b9f0d1 : 2013.02.07, Version 0.9.9 (Unstable)  * tls: port CryptoStream to streams - http://git.io/Tw1yJA
17:19 < cloudbender> changed mind : will not promise, will emit
17:21 < catman_> Hi, I'm trying to run my server.js from an external box for dev, anyone know how i can do  node.js "http://...server.js"   or  in the server.js do require("http://..server.js")
17:21 < nanashiRei> I just had the best laught ever
17:21 < nanashiRei> http://www.youtube.com/watch?v=1e1zzna-dNw
17:22 < nanashiRei> This guy is just soooooo clever. And he knows it all :D
17:23 < catman_> can anyone help?
17:25 < nanashiRei> you cannot.
17:26 < nanashiRei> You need to download the file first
17:26 < CoverSlide> catman_: you don't. you run node HTTPServer, and when the request.url matches a specific endpoint, you run whatever code you wanted
17:27 < CoverSlide> *run a
17:28 < catman_> I'm not trying to make a http server.  I'm trying to host my server.js on my ftp/svn service so I can dev on it and test it on another box that just points to it
17:28 < CoverSlide> ok so you download the file, then run node on it
17:28 < CoverSlide> or ssh to the other box, and run node from there
17:28 < CoverSlide> either way works
17:29 < catman_> there's a team of people with node.exe installed pointing to my server.js
17:29 < catman_> or that's the goal
17:29 < CoverSlide> they need to download server.js
17:29 < CoverSlide> and run node on it
17:30 < geNAZt> or you build a autodler for your script
17:30 < CoverSlide> This seems like an X and Y type of deal
17:30 < catman_> what about if I have json on a php server that my server.js needs to get 
17:30 < CoverSlide> use http.request
17:31 < catman_> ok thank you
17:31 < Leeol2> What is the best pattern for middleware to pass data onto the next chain? With express, `app.set()`  seems to be a bit too.. application state, rather than request state. 
17:32 < geNAZt> add it to the res object
17:32 < geNAZt> or the req object
17:32 < geNAZt> depends on what you do
17:32 < VeXii> cant you just extend the req,res objects for it ?
17:56 < hhuuggoo_> is anyone using coffee script redux yet?  I'd really like to be able to work with source maps
18:02 < airtanah_> what do you call that moment when you discover someone has placed a 'readFileSync' in the server code
18:03 < FunnyLookinHat> airtanah_, FUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU
18:03 < FunnyLookinHat> That's what you call it.
18:04 < airtanah_> FunnyLookinHat: it's definitely rage comic worthy
18:04 < FunnyLookinHat> heh
18:04 < FunnyLookinHat> sorry though - that really does suck :)
18:05 < pachet> hope it was a good file
18:05 < airtanah_> FunnyLookinHat: it's okay, the sync method is not long for this world
18:06 < airtanah_> the file was filled with food, shelter and LOOVE
18:13 < BlakeRG> Are there any other database modules like this one? http://nodejsdb.org/ i like the query builder syntaxt, full blown ORMS might be a bit too much for my needs
18:15 < shakefon> I don't know of any that do the query builder syntax like that, but for MySQL I always go with Felixge 's node-mysql
18:18 < BlakeRG> hmmm. I'd like to stay away from writing raw SQL strings if possible
18:19 < CoverSlide> BlakeRG: there's a node-sql library for doing that I think
18:19 < amurdaca> if i use passportjs to handle login do i need sessions in express?
18:20 < CoverSlide> BlakeRG: by the way, i think the project you're referencing is dead
18:20 < geNAZt> amurdaca: yes
18:20 < amurdaca> someone knows?
18:20 < amurdaca> oh thanks geNAZt
18:20 < BlakeRG> CoverSlide: yeah i checked out the github, no commits in a long time :(
18:20 < geNAZt> passport uses the expressjs session to store the user object
18:20 < geNAZt> id*
18:20 < amurdaca> ok
18:21 < amurdaca> i'll use express with mongoose to handle the authentication
18:21 < CoverSlide> BlakeRG: https://github.com/brianc/node-sql << I think this is the best option currently
18:21 < amurdaca> do i need anythng else? 
18:21 < amurdaca> or ill just do: npm install session --save ?
18:21 < BlakeRG> CoverSlide: i'm looking at this one and it looks like exactly what i need
18:22 < BlakeRG> thanks CoverSlide i'll give this one a try :)
18:22 < geNAZt> amurdaca: expressjs sessions hip with expressjs
18:23 < geNAZt> the passport session handler also ships with passport
18:23 < amurdaca> mmmm
18:23 < amurdaca> you sure?
18:23 < geNAZt> and maybe you should not use mongodb as sessionstore
18:23 < geNAZt> yes sure
18:23 < amurdaca> becouse i created my app giving just express --ejs
18:23 < amurdaca> so i don't have sessions
18:23 < CoverSlide> what's wrong with using mongo?
18:23 < geNAZt> if you create it with the binary you must say him that you want sessions
18:23 < amurdaca> i did npm install sessions --save
18:24 < geNAZt> for yo much data which dont *must* be persistent
18:24 < CoverSlide> geNAZt: english please
18:24 < geNAZt> i preffer a pure memory storage (redis, memcached)
18:24 < amurdaca> i have this on packages.json now -> "sessions": "0.0.2-7"
18:24 < amurdaca> is it correct?
18:24 < geNAZt> no
18:24 < amurdaca> :/
18:24 < geNAZt> sessions ship with expressjs
18:25 < CoverSlide> mongo does work mostly in memory anyway
18:25 < geNAZt> https://gist.github.com/geNAZt/4732983
18:25 < amurdaca> so with express --sessions
18:25 < amurdaca> it just adds
18:25 < amurdaca>   app.use(express.cookieParser('your secret here'));
18:25 < amurdaca>   app.use(express.session());
18:25 < amurdaca> right?
18:25 < geNAZt> yes
18:25 < geNAZt> it enables expressjs to use sessions
18:25 < amurdaca> ty
18:25  * kniven compiling... ... ... 
18:25 < amurdaca> now i can i remove that packages lol
18:26 < amurdaca> just rm node_modules/sessions?
18:26 < geNAZt> yes
18:26 < geNAZt> mongodb is slower than redis / memcached
18:26 < geNAZt> and i dont want to have lag for sessions
18:26 < amurdaca> mmm
18:27 < amurdaca> in production we use mongodb
18:27 < geNAZt> on sessions for me is faster > safe
18:27 < amurdaca> i may try to install redis in my laptop and see how it goes
18:29 < gildean> redis for sessions, mongo for persisting data
18:29 < geNAZt> exactly :D
18:29 < amurdaca> oh
18:30 < amurdaca> i have to build a blog so i should be able to persist posts with comments
18:30 < amurdaca> and i'll use mongodb
18:30 < geNAZt> try it out
18:30 < amurdaca> for loggin in Posters and admin you say use redis?
18:30 < geNAZt> in expressjs you can change the sessionstores so fast
18:31 < nathan7> Redis is fast as fuck and keeps everything in RAM
18:31 < geNAZt> for general session handling
18:31 < geNAZt> everyone who enters your site gets a session
18:31 < nathan7> So you want to use that for things that don't really grow over time, data that you can throw away after a while
18:31 < geNAZt> like sessions
18:31 < geNAZt> or workqueues
18:32 < amurdaca> mmm might overkill my box with 2 db
18:32 < amurdaca> i don't have much ram
18:32 < geNAZt> how much do you have ?
18:32 < CoverSlide> download more ram
18:33 < geNAZt> The new RAM Extender v3.2.6
18:33 < geNAZt> Adds even more RAM :D
18:33 < CoverSlide> memmaker
18:33 < geNAZt> :D
18:34 < CoverSlide> increase conventional memory by removing TSR's
18:34 < geNAZt> swap2000
18:34 < gildean> i was just about to say that you need to run memmaker
18:34 < gildean> and then fiddle around a bit with your config.sys and autoexec.bat to load all drivers to higher memory
18:34 < CoverSlide> and increase your expanded memory
18:35 < geNAZt> to awesome 128 KB :D
18:35 < gildean> you can set that by running memmaker, iirc it asks wheter to use ems or not
18:36 < jayk> Enable EMM386.SYS
18:36  * nathan7 smiles
18:36 < nathan7> Nostalgia [=
18:36 < MI6> joyent/node: isaacs created tag v0.9.9 - http://git.io/VqFZ0Q
18:37 < MI6> joyent/node: isaacs master * c3c8eee : Now working on v0.9.10 (+2 more commits) - http://git.io/J8uLBA
18:37 < geNAZt> but memmaker needs a 80386 or 80486 processor
18:38 < MI6> joyent/node: isaacs v0.8 * e4d97b1 : blog: v0.9.9 - http://git.io/lmggLw
18:38 < geNAZt> keep it in mind
18:39 -!- mbalho changed the topic of #Node.js to: Node.js - party like its v0.9.9 - https://github.com/joyent/node/wiki/Api-changes-between-v0.8-and-v0.10 ~ http://logs.nodejs.org/node.js/
18:39 < MI6> joyent/node: isaacs v0.8 * 2810b1a : blog: v0.9.9 is unstable, not stable - http://git.io/ODBVxg
18:39 < CoverSlide> aww no more cat video :(
18:39 <@mbalho> just you wait
18:40 < geNAZt> party like 99 :D
18:40 < geNAZt> *dance*
18:40 < brianc> BlakeRG: if you hit snags w/ node-sql lemme know
18:40 < brianc> BlakeRG: or open an issue. :)
18:46 < d4rklit3> can i run php on a node server?
18:47 < brianc> d4rklit3: you can run it on the same _server_ but not within the same _process_
18:47 < brianc> d4rklit3: also, they don't really talk together, meaning they don't share memory 
18:48 < geNAZt> but for that there is the CGI standart
18:48 < brianc> d4rklit3: you could modify the database from node and read it from php or vise versa
18:48 < gildean> you can run child_process.exec('php whatever.php', function (err, stderr, stdout) {...});
18:48 < pachet> yuck
18:48 < gildean> or child_process.spawn
18:48 < gildean> pachet: it's totally dirty
18:48 < brianc> definitely a "yuck" type of thing
18:48 < geNAZt> or use php-fpm
18:48 < CoverSlide> on other words, "why would you want to?"
18:48 < pachet> "for old times sake"
18:48 < kniven> Usage: php [options] [-f] <file> [--] [args...]
18:49 < kniven> ooops
18:49 < pachet> it was kniven
18:49 < pachet> in the drawing room
18:49 < pachet> with a php
18:49 < geNAZt> http://php-fpm.org/
18:49 < kniven> lol
18:50 < geNAZt> https://npmjs.org/package/fastcgi
18:53 < CoverSlide> although if you want to stick it into your node server, you might be better off using this: https://npmjs.org/package/fcgi-stream
18:54 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:54 < geNAZt> with php-fpm ?
18:54 < CoverSlide> it seems fastcgi only exposes an httpd
18:54 < CoverSlide> i think
18:54 < geNAZt> yes
18:55 < geNAZt> fcgi-stream sends and receives data from / to fcgi programms
18:55 < geNAZt> like php, django
18:56 < CoverSlide> well if that's what he wants i guess, a stand-alone solution
18:57 < CoverSlide> but if he wants node to do node stuff, and have some stuff delegated to fcgi, there's the other module
18:57 < geNAZt> if he only wants a httpd for fcgi fastcgi would be better
18:57 < CoverSlide> i guess seeing that it's stand-alone irks me
18:57 < geNAZt> for anything else fcgi-stream would be better
18:57 < CoverSlide> personal preference i guess
18:57  * kniven compiling ..
18:58 < geNAZt> fcgi-stream makes sense if you want to pipe websockets to a php-fpm and handle php requests
18:58 < geNAZt> node + php + sense what a sentence :D
19:02 < amurdaca> how do i use passportjs for normal username|password?
19:02 < amurdaca> http://passportjs.org/guide/username-password/ <--- this require passport-local
19:02 < geNAZt> https://github.com/jaredhanson/passport-local
19:03 < amurdaca> and it's 6 month outdated
19:03 < geNAZt> if it works where is the problem :D
19:04 < eighty4> Playing around with streams (completly noob on node.js). Trying to pipe a net (irc) connection to my stream and would like to also pipe the events. Is this possible at all? Or is it just stupid to want it? http://d.pr/n/Jj1l
19:05 < geNAZt> well piping does not include events
19:05 < eighty4> So no good solution on this? I'd need to keep it on the net?
19:06 < FunnyLookinHat> eighty4, https://github.com/martynsmith/node-irc   ?
19:06 < FunnyLookinHat> There should be the solution in there  :)
19:06 < geNAZt> well let me get it right: piping does pipe some events, but not the one you are looking to. It only pipes: data, end, drain, close, error events 
19:07 < FunnyLookinHat> Oh you're more interested in the piping than IRC - my bad
19:07 < eighty4> FunnyLookinHat: right
19:07 < geNAZt> if you want full piped events in streams you must extend the pipe function and build your own
19:07 < eighty4> geNAZt: right, those are documented here: http://nodejs.org/api/stream.html
19:08 < eighty4> geNAZt: right, that would be a solution. Adding connect and so on
19:08 < eighty4> there's not really that many more event on Net
19:08 < geNAZt> adding everything that is in the current eventEmitter except the events already piped
19:08 < geNAZt> so you can pipe what you want
19:09 < eighty4> happen to know why they wouldn't be there from the start?
19:09 < geNAZt> it is not piping in the meaning
19:09 < geNAZt> piping says "data" from source to "data" dest
19:10 < eighty4> right. Am I just totaly stupid in doing what I do? The idea was to create a Prompt, middleman that would be independent on what it pipes
19:11 < geNAZt> well it depends on how you implement it
19:11 < gildean> there are things like: https://npmjs.org/package/event-stream and https://npmjs.org/package/mux-demux
19:11 < geNAZt> if you only pipe events that have listeners on the dest stream it should be okay
19:11 < gildean> or for the net-module: https://npmjs.org/package/mux-demux-net
19:11 < geNAZt> mux-demux doesnt even do what you want to
19:11 < geNAZt> and its buggy like hell :D
19:12 < eighty4> :)
19:13 < eighty4> I'll keep playing with what I have then. Thanks for the input
19:14 < eighty4> I'll have to look into how to extend it with the connect event. Seems like a good next step
19:14 < segomos> anyone know what version of the NW RFC SDK I should be using to compile the sapnwrfc module?
19:15 < segomos> i'm trying 7.2 without success
19:17 < othiym23> if I'm using Q or some other promises library, what's the easiest way to use promises to do something analagous to async.forEachSeries?
19:18 < othiym23> Q.all resolves the promises concurrently, and I need to wait before one set of async tasks is done before I move onto the next
19:18 < othiym23> and the list is generated dynamically
19:19 < othiym23> I can do it with a reducer, I think, but then I have to nest promise evaluation, and it starts getting messy
19:19 < othiym23> ...but so is using the async module nested as well
19:22 < medikoo> othiym23: there are few ways, just chain promises with then: promise.then(promise).. or use reduce: https://github.com/medikoo/deferred#reduce best if you show it on some gist, then it'll be easiest to chose best approach
19:24 < switz> hey, I'm having an issue with csrf. Often (but not always) the first time a user visits and registers, their CSRF changes and throws a forbidden. Anyone know what might be causing this?
19:25 < othiym23> medikoo: here's the version using async.forEachSeries
19:26 < othiym23> I actually do want to run one of the sets of tasks concurrently, but I wanted to get it working correctly in sequence first
19:26 < othiym23> https://gist.github.com/othiym23/1e1acd4c4a8949c214ab
19:26 < othiym23> medikoo ^^ oops forgot to paste
19:27 < medikoo> so it's set of files that you want to process sequentially?
19:29 < cloudbender> Is there a way to find out my current execution context ?
19:29 < cloudbender> this.tostring ?
19:30 < othiym23> medikoo: there are one or more directories that are test arenas -- the tests at level can run concurrently
19:31 < othiym23> medikoo: within each arena, I sequentially install a series of versions of a module, and then run one or more test suites against that version of the driver
19:31 < othiym23> each set of test suites need to finish before installing the next version of the driver
19:32 < othiym23> and because the tests are integration tests and start up external services (like databases and web services), they need to be run serially, instead of (say) creating a bunch of test arenas and running the tests concurrently
19:33 < othiym23> cloudbender: it really depends on what you mean by "execution context"
19:34 < cloudbender> in a listener function, what am I returning to ?
19:35 < cloudbender> 'this' would be the listener, not the emitter;
19:35 < othiym23> cloudbender: if you're not running in strict mode, you can look at arguments.caller, and it will tell you what function called the current handler
19:35 < cloudbender> so, I'm trying to figure out who fired the event.
19:36 < othiym23> right
19:36 < othiym23> if you have control over the event emitters, you can try adding an extra parameter to the emit calls and then test for that in the handler
19:37 < medikoo> othiym23: https://gist.github.com/medikoo/4733509
19:37 < othiym23> medikoo: the other thing I couldn't figure out in my fatigue haze last night was how to make promises play nice with EventEmitters
19:37 < medikoo> othiym23: it's simple example of sequential processing
19:38 < medikoo> othiym23: what problem exactly you have with event emitters?
19:38 < othiym23> medikoo: nothing I can't solve with Q.defer(), I think, it' just looks awkward having all of this adapter logic everywhere joining Node's idea of asynchronousness to promises'
19:39 < othiym23> medikoo: so the right answer is just to use a reducer?
19:39 < medikoo> othiym23: yes, kind of
19:39 < othiym23> lemme look at your implementation
19:40 < medikoo> othiym23: using promisified Node.js async functions can be totally transparent: https://github.com/medikoo/deferred#promises-approach you don't need to clutter your logic with adapters
19:41 < othiym23> it's a set of npm installations and test runs I want to run serially
19:42 < othiym23> medikoo: https://gist.github.com/othiym23/1e1acd4c4a8949c214ab#file-test_ruiner-js-L27-L40 shows where working with EventEmitters makes things like promisify a little wonky
19:42 < othiym23> is there any way to get around using deferred() there?
19:42 < othiym23> and what are the differences between your library and Q?
19:43 < medikoo> problem is that you need to wait for an event?
19:43 < othiym23> yeah, can't resolve the promise until I get the exit / close event from the child process
19:44 < othiym23> that's the EE awkwardness I see
19:44 < othiym23> I can get around it with deferred(), but it does clutter things a little
19:45 < othiym23> it seems like there should be a higher-level abstraction for this -- maybe I just need to write one ;)
19:45 < othiym23> or maybe Kris Zyp's thing handles that more cleanly
19:45 < medikoo> I see deferred as faster and more friendly api, code can be cleaner, less cluttered, real use case examples will speak the best. When I started working deferred, Q didn't provide any aid to work with Node functions, and that was the main use case for promises for me
19:45 < othiym23> got it
19:45 < othiym23> thanks for looking at my gist!
19:46 < othiym23> taht was v helpful
19:46 < medikoo> othiym23: sure.. that case of event emitter, can only be done with deferred().. but it's very rare use case.. I never had to join events and promises, it's kind of weird
19:47 < othiym23> yeah, I only run into this kind of stuff when I'm trying to orchestrate external processes
19:47 < othiym23> it turns out that Node isn't the world's best scripting tool
19:47 < mikeal> blasphemy!
19:47 < medikoo> :)
19:48 < medikoo> othiym23: cosumer is a stream?
19:48 < othiym23> medikoo: yeah, it's stream-like
19:49 < medikoo> othiym23: what you may do, is to look into internals of tap, and provide directly on prototype some alternative that would return promise for you, and just use ti, that's what I would do in such case
19:49 < medikoo> othiym23: something like createConsumerPromise() .. and your set
19:50 < othiym23> I might, although substack and isaacs have put some magic into node-tap that makes working with its prototypes at runtime kind of uh delightful
19:50 < othiym23> well, this is for a test framework, so it's OK if the code is a little inelegant
19:50 < medikoo> othiym23: but also make sure you understand what's going on.. stream serve results partially, while promises are after complete results, so they're not best match
19:51 < othiym23> medikoo: yeah
19:51 < othiym23> I think deferred() is the right tool for the job here
19:52 < othiym23> I was just surprised there wasn't a googleable better way to deal with this when I ran into this issue at 2 in the morning ;)
19:54 < othiym23> mikeal: I was trying to do all this stuff without async or promises first, and it pretty much was making my head explode
19:54 < othiym23> and it's dirt simple to do with a little Ruby or Python
19:54 < othiym23> but fuck that, I'm a Node developer
19:54 < othiym23> I'll make it happen
19:55 < CoverSlide> yeah using node for simple one-off scripts isn't the funnest thing in the world. it's like writing erlang for the same purpose
19:55 < hackygolucky> !m othiym23
19:55 < hackygolucky> dammit, no bot?
19:56 < styol> >> 'we haz one of these'
19:56 < purr> styol: (string) 'we haz one of these'
19:56 < DarkArgon> >> 9999999999999999999
19:56 < purr> DarkArgon: (number) 10000000000000000000
19:57 < CoverSlide> >> var s = Math.pow(2,53), t = s + 1; t === s
19:57 < purr> CoverSlide: (boolean) true
19:57 < CoverSlide> yes we all know that trick
19:58 < othiym23> >> 1 / 0 === 1 / -0
19:58 < purr> othiym23: (boolean) false
19:58 < othiym23> that one's still my favorite
19:58 < othiym23> although I could probably come up with "favorite" things about IEEE754 all day long
19:58 < bradleymeck> who here is good with bezier curves? or knows a readable book that i can grok
20:02 < eighty4> Trying to extend Stream to also work with the "connect" event piped from Net. Anyone mind pointing me to some reading on how to do this?
20:11 < geNAZt> eighty4: i can help you with that
20:11 < geNAZt> it should be simple
20:12 < eighty4> geNAZt: at first it seemed it should be really simple. But just isn't working :) Finding it hard to debug. Just installed node-inspector
20:15 < geNAZt> it should be net.on('connect', function() { prompt.emit.apply(this, arguments) } );
20:15 < geNAZt> or not ?
20:16 < __ior> hrumph, so for a day or two i've been struggling against a problem where node hits 100% cpu and lags out ... but only when a mutex is engaged. i think i've tracked it down to "node hits 100% cpu when it can no longer write to a stream" ... which means a client is closing a connection before i send a res.end()... even with a 10 minute timeout set in http headers? strange, strange, strange
20:17 < eighty4> geNAZt: oh… yeah I did that and it worked. But I was thinking it should be able to do it without touching Net and just extending Stream. But that might not work...
20:17 < MrSaku> How to repeat holocaust, fast
20:17 < MrSaku> Whats difference between nigger and barrel of shit? its the barrel hhaahaha@!
20:20 < __ior> anyone encountered such a thing? node hitting huge amounts of cpu, clients ignoring XHR 10 minute timeouts, or node ignoring socket.setTimeout() ?
20:21 < bradleymeck> __ior, is something doing an infinite loop? or something like forever caught in an infinite loop
20:21 < bradleymeck> (happens if it keeps trying to bring up a broken server)
20:21 < bradleymeck> ah read above
20:22 < bradleymeck> __ior: whats netstat -a say?
20:22 < __ior> bradley, no infinite loops, i do have a mutex going but it's bakery algo and not wait-spinning with nextTick
20:23 < __ior> netstat says nothing out of the ordinary, i guess
20:23 < __ior> running an apt-get update atm so can't test error conditions this second
20:28 < __ior> well, netstat says nothing out of the ordinary
20:29 < CoverSlide> your mutex isn't a loop right?
20:29 < __ior> however, in the meantime, i've also learned that appartently amazon massively throttles cpu time if you hit 100% for more than 5 seconds
20:29 < __ior> no loop, it's bakery algo
20:29 < __ior> a process that exits the mutex calls the next waiting process in the callback when it releases the mutex
20:29 < __ior> so no looping at all
20:31 < CoverSlide> as i understand the bakery algo, it does involve loops
20:31 < CoverSlide> as long as you're not doing something like while(!released) or something
20:31 < CoverSlide> because nothing will get released that way
20:32 < CoverSlide> using setTimeouts or nextTicks would be the way to check if something's released in javascript
20:32 < __ior> well, not in this implementation. we enqueue the incoming function and arguments, hit a noop. when the function in the mutex releases the lock, its callback pops the next function off the waitlist and calls it
20:33 < __ior> http://en.wikipedia.org/wiki/Lamport%27s_bakery_algorithm
20:34 < CoverSlide> http://en.wikipedia.org/wiki/Lamport%27s_bakery_algorithm#Pseudocode << i see 4 loops there
20:36 < __ior> well, no loops, trust me :) callbacks
20:36 < CoverSlide> ok
20:41  * __ior is away - idle - messages will be translated into ancient outer mongolian.
20:41 < segomos>  __ior: translate this message
20:42 < BlakeRG> how do i specify the database name for mysql.createConnection() - node mysql module?
20:44 < segomos> looks like you just pass "database" in the options
20:44 < diogogmt> which test framework would you guys recommend? mocha? expect? anyother one I should look at it?
20:45 < segomos> BlakeRG: https://github.com/felixge/node-mysql/blob/master/lib/ConnectionConfig.js
20:45 < __ior> http://pastebin.com/YLZ9Nnyb
20:45 < __ior> no loops, see? :)
20:45 < BlakeRG> segomos: thank you very much, it's not in the README file at all
20:54 < othiym23> diogogmt: mocha is fine for BDD, node-tap is nice if you're doing more complex test scenarios and don't want the test framework interfering with the code under test
20:56 < diogogmt> othiym23: would you recommend vows or zombie as test frameworks? It has been a while since I used them and I'm not sure if they are being well maintained. 
21:04 < CoverSlide> noone uses vows anymore
21:04 < CoverSlide> nor zombie
21:05 < CoverSlide> if you want browser testing, use phantomjs/casperjs
21:06 < AAA_awright> CoverSlide: I use vows
21:06 < CoverSlide> i mean noone who isn't a dinosaur
21:06 < AAA_awright> That's the only thing serious for anything I/O
21:06 < othiym23> don't let indexzero hear you say that
21:07 < CoverSlide> well vows was great before we had 10,000,000 testing frameworks
21:07 < othiym23> AAA_awright: node-tap gets in my way less frequently for I/O based testing
21:07 <@mbalho> CoverSlide: you make generalizations a lot, you should post more scientific charts representing your viewpoints :)
21:07 < CoverSlide> cloudhead doesn't do much maintaining of his stuff anymore anyway
21:07 < AAA_awright> othiym23: There's a difference between a testing framework and a testing protocol...
21:07 < othiym23> AAA_awright: sure, I'm talking about node-tap as a testing framework, though
21:07 < othiym23> not tap as a protocol
21:08 < othiym23> CoverSlide: yeah, but indexzero has picked up maintenance of at least vows and winston, he's just busy, you know, running nodejitsu
21:08 < CoverSlide> right, of course
21:09 < othiym23> diogogmt: CoverSlide is sorta right, zombie is in need of some love, but if your use cases are simple, it's easier to integrate into a test framework than phantomjs or casperjs
21:09 < othiym23> there's also chimera, which is maybe 1/4-baked at this point, but people have used it for real stuff
21:10 < CoverSlide> hey i used to love vows, it was like the very first async test framework, but there's not a whole lot of news on that front
21:11 < geNAZt> well then is a software bad if it doesnt change ? oO
21:11 < CoverSlide> I didn't say vows was bad
21:11 < othiym23> if I didn't find vows' DSL to be so insanely aggravating / obtuse / verbose, I'd probably switch back to it from mocha because I've had enough weird experiences with mocha to be paranoid about its truthfulness
21:11 < AAA_awright> Yeah it could change on you every 4 months
21:11 < diogogmt> so indeed, it has been a long time since I used vows apparently. I'll take a look at node-tap and mocha then
21:12 < AAA_awright> othiym23: DSL? verbose?
21:13 < othiym23> dogogmt: there's also dscape's specify, Rackspace's whiskey, and node-qunit -- one of those should probably map to your thinking OK
21:15 < othiym23> AAA_awright: vows' topics have never made sense to me
21:15 < BlakeRG> is there something akin to PHP's include for node? i don't want the file to be evaluated i just want it included
21:15 < CoverSlide> i personally like tap's simplicity. vows' whole batch thing is irksome
21:15 < othiym23> BlakeRG: fs.readFileSync?
21:15 < CoverSlide> BlakeRG: PHP's include does evaluate it
21:16 < AAA_awright> othiym23: You're probably not using them right... https://github.com/Acubed/node-rdf/blob/master/test/builtins-ref-test.js
21:16 < geNAZt> the only difference between require and include in php is one errors if the file isnt there, the other does not error
21:16 < CoverSlide> exactly
21:16 < BlakeRG> CoverSlide: is it the same as the parser copy+pasting the code into the same place where i called require?
21:17 < CoverSlide> in PHP yes
21:17 < othiym23> BlakeRG: eval(fs.readFileSync())
21:17 < CoverSlide> in node, not exactly
21:17 < othiym23> that's how you replicate exactly what PHP does
21:17 < othiym23> but that is very not a good idea
21:17 < geNAZt> yes
21:17 < geNAZt> :D
21:17 < DarkArgon> but u can do return; in a included php file. it will only return out of the file
21:17 < BlakeRG> ahh
21:17 < AAA_awright> Ew no
21:18 < CoverSlide> you should be able to return from a node file
21:18 < bradleymeck> one day bezier curves...
21:18 < CoverSlide> it gets wrapped in an iife
21:18 < DarkArgon> i'm not comparing to node
21:18 < AAA_awright> You can always return
21:18 < DarkArgon> just saying its not 100% copy paste if u include something in php
21:18 < AAA_awright> *you
21:18 < othiym23> AAA_awright: something like https://github.com/newrelic/node-newrelic/blob/master/test/integration/transaction-segment-callback.tap.js is way more readable to me than your example, but, y'know, it's subjective
21:19 < CoverSlide> anyway, in node, it's a bit more involved, you have a module.exports value, and require() wraps the file in an iife, and returns that value
21:19 < AAA_awright> othiym23: Well I could have repeated the same logic, creating the same style of test a dozen times, but DRY, you know?
21:20 < BlakeRG> i've got a bunch of helper functions i wrote and i want them to be useable inside of my main app.js file, how do i copy them over in node?
21:20 < othiym23> bradleymeck: the only reference I have on Bezier curves is my computer graphics textbook from college which weighs as much as a small house and is filled with equations
21:20 < othiym23> AAA_awright: yeah, but it looks like line noise no me, no offense ;)
21:21 < geNAZt> BlakeRG: in which language are the helper functions written ?
21:22 < BlakeRG> geNAZt: JS
21:22 < AAA_awright> othiym23: Eh? First there's "Here's what a generic test looks like" and then "Here's a dozen different data instances to test using that logic"
21:22 < AAA_awright> I mean, you could have this mess... https://github.com/Acubed/node-rdf/blob/master/test/RDFEnvironment-test.js
21:22 < othiym23> AAA_awright: yeah, but the boilerplate / setting up the topic / consuming it down below is exactly what I don't like about vows's interface
21:23 < othiym23> that's verbose, but it's actually more readable to me as an outsider
21:23 < AAA_awright> That's *less* verbose, then you're not re-defining the topic 800 times
21:23 < othiym23> BlakeRG: you want to create a little helper module, and then do something like exports.helperFunction1 = function () {} for each of the functions you want to have accessible
21:23 < AAA_awright> You say "This is a thing to test" then "Here's a bunch of different things that should remain true about it"
21:24 < othiym23> then var helper = require('helper_module'); helper.helperFunction1(foo)
21:24 < othiym23> AAA_awright: I'm not disagreeing with you about the verbosity, but the comprehensibility / legibility *for me* is higher in your second example than the first
21:25 < tjholowaychuk> AAA_awright you can effectively do the same thing with beforeEach() or similar
21:25 < BlakeRG> othiym23: thanks
21:25 < tjholowaychuk> in any other test framework
21:29 < BlakeRG> othiym23: is that the exports. stuff?
21:29 < BlakeRG> i noticed in express when i create a seperate file for a route it wraps it in that syntaxt
21:29 < BlakeRG> is it really just a "module"
21:30 < AAA_awright> tjholowaychuk: Then you end up contorting things, if how we do it in https://github.com/tdegrunt/jsonschema/blob/master/test/arrays.js is any measure, and where in the world is 'beforeEach' defined?!
21:30 < AAA_awright> Also time to get rid of that "valid.should.be.true" syntax. Ew, ew, ew
21:30 < tjholowaychuk> AAA_awright you dont have to do it like that at all
21:33 < alchimis_> what is the best i18n node module?
21:34 < geNAZt> i use node-i18n
21:34 < amurdaca> do i only need this to save session for passport? -> http://pastebin.com/qMACwC6v
21:34 < geNAZt> yes
21:34 < amurdaca> hey geNAZt
21:35 < amurdaca> but do i need other app.somthing to configure in order to work with passport?
21:35 < othiym23> BlakeRG: exports.whatever gets put on a module object; it's the same as saying module.exports = { whatever : function () {} }, and that latter object is what gets returned when you call require()
21:36 < geNAZt> yes
21:36 < amurdaca> what then?
21:36 < geNAZt> http://passportjs.org/guide/configure/
21:37 -!- Topic for #Node.js: Node.js - party like its v0.9.9 - https://github.com/joyent/node/wiki/Api-changes-between-v0.8-and-v0.10 ~ http://logs.nodejs.org/node.js/
21:37 -!- Topic set by mbalho [~max@ve.5bpbxlsy.vesrv.com] [Thu Feb  7 18:39:00 2013]
21:37 <@isaacs> mbalho: nice topic
21:38 < amurdaca> so in the app.configure section i put the session snippet from above plus
21:38 < amurdaca> app.use(passport.initialize());
21:38 < amurdaca>   app.use(passport.session());
21:38 < amurdaca> right?
21:38 < geNAZt> yes
21:38 < Luminously> Anyone successfully installed stringprep on Windows? :s
21:39 < tpayne> has anyone here done a partial within a partial?
21:39 < tpayne> i keep getting errors
21:39 < tpayne> <%- partial('/partials/member/entry', {'left': {}}) %>
21:39 < zackiv31> whats the correct HTTP response code to send when a login is successful, 200?  and when its incorrect, 401?  (401 doesn't seem right) ?
21:40 < amurdaca> 201 maybe
21:40 < geNAZt> 403 ?
21:40 < amurdaca> 401 is Not authorized
21:41 < geNAZt> i also tend to 401 or 403
21:42 < sshaginyan> Can anyone suggest a module for hosting static files? I found node-static anything else? What's the fastest?
21:43 < amurdaca> do i need to define some Schema for the session collections geNAZt?
21:43 < geNAZt> mongodb has no schemas
21:43 < amurdaca> ?
21:44 < amurdaca> i mean do i have to do somthing in mongodb to enable sessions?
21:44 < zackiv31> yah it seems like 401 is correct, hmm
21:45 < geNAZt> create a colelction
21:45 < diogogmt> does requireJS supports DI on node?
21:45 < amurdaca> geNAZt how?
21:45 < diogogmt> or is another lib that allows to implement DI in a nodejs app?
21:45 < __ior> grar. phone died while tethering
21:45 < alchimis_> geNAZt: you mean this one  https://github.com/mashpie/i18n-node ?
21:45 < geNAZt> yes
21:45 < kniven> anyone with thoughts on why I get "bad -rpath option" while compiling nodejs for arm
21:49 < nathan7> isaacs: How do domains interact with signals?
21:50 <@isaacs> nathan7: i dunno
21:50 <@isaacs> nathan7: heading out, i'll be back in an hour or two
21:51 < kenperkins> does nodejs cache resolved IPs for dns names?
21:51 < kenperkins> or is that at the OS layer?
21:51 < tjfontaine> nodejs doesn't cache, the os or your resolver will
21:51 < nathan7> isaacs: mhm
21:52 < tjfontaine> kenperkins: native-dns module has a (broken) caching layer as well
21:52 < nathan7> isaacs: We have an issue with a dude using domains where his app doesn't get killed
21:52 < nathan7> isaacs: (only part of the time)
21:52 < kenperkins> tjfontaine: so if I'm using dns names when connecting to a service over http, I presume that means it's just passing that dns name down to the os layer when doing the actual connection/resolution
21:54 < tjfontaine> kenperkins: there are two mechanisms, lookup which uses gethostbyname (for all intents and purposes "os"), and resolve which uses the dns servers configured for your server and does resolution itself bypassing the os (no internal caching, only the other side may be doing caching)
21:55 < kenperkins> so resolve connects directly to your nameservers, got it
21:55 < kenperkins> and the gethostbyname should use an os cache, if present
21:55 < tjfontaine> right if that's something your os (hi darwin) likes to do
21:55 < kenperkins> it appears that my OS isn't caching like I was expecting
21:56 < kenperkins> so I'm trying to eliminate possibilties :D
22:05 < s3shs> Whoa, I just noticed that connect is "failing".  What gives?
22:05 < s3shs> https://github.com/senchalabs/connect
22:05 < s3shs> I thought it was fine a few days ago.
22:05 < geNAZt> it is fine
22:05 < geNAZt> oO
22:11 < mscdex> whoa @ https://groups.google.com/group/nodejs/browse_thread/thread/27037d29ba95b604
22:11 < mscdex> good thing i never run `make test`
22:14 < othiym23> yeah, that's some fast'n'dirty test design there
22:25 < CoverSlide> just like any CI system, often there are random things that might cause tests to fail
22:28 < CoverSlide> odd though, it's not even from master that travis was run
22:30 < CoverSlide> from someone else's fork, in an obscure patch-1 branch
22:31 < CoverSlide> that would be really stupid if every fork would invoke travis pretending to be the same repo
22:31 < xinmin> did i understand correctly that callbacks unless explicitly bound won't run in the active domain ?
22:31 < xinmin> i.e callbacks have to be registered specifically with the domain
22:31 < xinmin> "Additionally, callbacks passed to lowlevel event loop requests (such as to fs.open, or other callback-taking methods) will automatically be bound to the active domain." is confusing
22:32 < CoverSlide> you have to bind callbacks to a domain for them to be caught by that domain
22:32 < xinmin> CoverSlide: but not the low level callback methods ?
22:33 < xinmin> i am not sure what 'low level' means. but that's what the docs say
22:33 < xinmin> CoverSlide: second para of implicit binding - http://nodejs.org/api/domain.html
22:35 < xinmin> for example the fn passed to domain.run() itself is not considered low-level since the exceptions thrown in that are not caught by the domain
22:35 < xinmin> domain.run(function () { throw new Error('not caught by domain') });
22:36 < xinmin> should i read low-level as 'callbacks to eventemitters' ?
22:38 < mint> Hello everyone ! We've juste launch our new porn website Masterfap.com. We need somme feedback ! Thx
22:38 < s3shs> What's the best way to log req?  I did a console.log(JSON.stringify(req)); and I get TypeError: Converting circular structure to JSON
22:39 < min|dvir|us> s3shs: try `console.log(req.body);`.
22:39 < s3shs> That did something.  Thanks min|dvir|us
22:40 < xinmin> s3shs: req is a stream, you cannot log it
22:42 < s3shs> I'll just log the URL.  I'm trying to figure out what's going on.  I've got a bug.
22:42 < xinmin> s3shs: yup. req.body is an express thing (if you are using bodyparser)
22:43 < s3shs> I'm using connect.  It's got a bodyparser.  Same one I think.
22:43 < xinmin> right, express uses connect
22:43 < s3shs> connect is failing on github.  :-(
22:47 < othiym23> xinmin: that page is talking about callbacks that get passed through the makeCallback binding that goes off into C++ / libuv-land
22:48 < othiym23> xinmin: if you pass a callback to an EE method, it will be bound into the active domain
22:48 < othiym23> same goes for callbacks passed into setTimeout / setImmediate (0.9+) / process.nextTick()
22:49 < othiym23> pretty much the only time a function will "leak" out of the domain is when you pass it to an EE that predates the creation of the domain
22:49 < xinmin> othiym23: is there a way to check that ?
22:49 < othiym23> and that's when that callback needs to be bound into the domain using d.bind or d.intercept
22:49 < xinmin> xinmin: by which i mean, i have using an sdk now
22:50 < othiym23> xinmin: not through reflection, no
22:50 < xinmin> othiym23: i suspect that they are using some connection pool of some sort
22:50 < othiym23> yeah, connection pools are the big gotcha case
22:50 < xinmin> so my callback errors are not handled by the domain
22:50 < s3shs> Ok, now that I'm logging, it appears connect is freezing in connect.static('somedir').  How can I tell what it thinks it's doing?
22:50 < xinmin> othiym23: is there a way i can verify they are using connection pools easily ? in the callback, for example?
22:51 < CoverSlide> s3shs: edit the static middleware
22:51 < harbhub> hey
22:51 < xinmin> i just want to open a bugreport after verifying that it the cause
22:51 < othiym23> xinmin: so if you suspect that may be the case, you can do something like if (process.domain) callback = process.domain.bind(callback) and then pass the callback into your async operations
22:51 < harbhub> how do i parse the request url to find the subdomain?
22:51 < harbhub> is that possible?
22:52 < CoverSlide> harbhub: you check the "host" header
22:52 < othiym23> xinmin: well, if you have access to one of the EEs that's part of the pool, you can see if it has a domain set on it, but that's really all you can do at runtime
22:52 < othiym23> the more reliable way is to look at the source of the module, unfortunately
22:52 < xinmin> othiym23: how do you check if a EE has domain set on it?
22:53 < othiym23> xinmin: what module is this on?
22:53 < xinmin> just ee.domain ?
22:53 < harbhub> says undefined
22:53 < harbhub> coverslide
22:53 < harbhub> request.host
22:53 < xinmin> othiym23: aws-sdk-js
22:53 < harbhub> it is undefined
22:53 < xinmin> othiym23: https://github.com/aws/aws-sdk-js
22:53 < harbhub> maybe that is because i'm using localhost at the moment to test?
22:53 < othiym23> oh god that thing
22:53 < othiym23> good luck! :D
22:53 < s3shs> CoverSlide, you make it sound so easy.  I'm spelunking now.
22:54 < harbhub> req.headers.host
22:54 < CoverSlide> harbhub: check req.headers.host
22:54 < xinmin> othiym23: :)
22:54 < CoverSlide> ugh, yeah i've seen so many problems with aws' "official" node module, i ended up going back to using knox for s3 stuff
22:54 < othiym23> xinmin: if you know that there's an active domain, and you have an EE with ee.domain == null, your callback is probably executing inside a connection pool 
22:55 < bartzy> Hello
22:55 < bartzy> is node.js good for serving binary data off mongodb documents ?
22:55 < CoverSlide> yes
22:55 < CoverSlide> TIAS
22:55 < harbhub> thanks
22:55 < othiym23> xinmin: this is a sucky corner case of domains, which is that connection-pooling thingers have to be affirmatively modified to support domains
22:55 < harbhub> is nodejs good for picking up chicks?
22:56 < CoverSlide> yes
22:56 < harbhub> lol
22:56 < bartzy> I mean - PHP is not so good for this, since when getting lots of hits, I need to scale out to more servers. But with NodeJS - It's only IO (To Mongo, To HTTP client) - so that should be better ?
22:56 < bartzy> CoverSlide: ^ 
22:56 < othiym23> harbhub: based on the turnout at NodeConf, not so much
22:56 < harbhub> any of you guys have contracts you need help filling?  i want to code some js for cash
22:56 < xinmin> othiym23: yeah,  so the sdk has to modified so that it calls all the callbacks using the if (process.domain) domain.run(cb) ?
22:57 < bartzy> Also - Should I let node serve the http requests directly from user's browsers, or have it setup after nginx ?
22:58 < othiym23> xinmin: here's the PR I submitted to add domain support to node_redis: https://github.com/mranney/node_redis/pull/310
22:58 < mscdex> bartzy: nginx doesn't support http 1.1 upgrades to websockets to upstream servers yet if you care about that
22:58 < othiym23> it's worth reading the comments, especially cxreg's
22:59 < mscdex> bartzy: at least not yet
22:59 < harbhub> screw this guy mbalho
22:59 < harbhub> lol i will make a joke if i feel like it
22:59 -!- mode/#Node.js [+b *!*b8207a5d@*.184.32.122.93] by mbalho
22:59 -!- harbhub was kicked from #Node.js by mbalho [for being an idiot]
22:59 < bartzy> mscdex: I don't care about that - what does that mean for my question? :) That I should use nginx or just node directly ?
22:59 < othiym23> mbalho: have I told you lately how lustrous and radiant your beard is?
23:00 <@mbalho> othiym23: nope, thanks!
23:00 < othiym23> and how wise and magnanimous and beneficent you are?
23:00  * othiym23 cowers
23:00 <@mbalho> lol
23:00 < mscdex> bartzy: it means if you plan on using websockets, don't put nginx in front if you want to serve them on the same port anyway...
23:00 < bartzy> mscdex: I don't plan on using websockets
23:00 < othiym23> xinmin: I'm pretty sure that weird process.nextTick() two-step I do is unnecessary and is working around a bug in domains, which is what cxreg is referring to in his last comment
23:00 < CoverSlide> nginx will out-static node
23:01 < mscdex> bartzy: then feel free to put nginx in front
23:01 < bartzy> mscdex: It's just Node.js , serving binary data from MongoDB. Best practice is to let browsers connect directly to Node, or put nginx in front ?
23:01 < bartzy> mscdex: OK. And there is any reason not to put Node directly ?
23:01 < CoverSlide> you can if you want, but then you gotta worry about horizontal scalability
23:01 < othiym23> bartzy: Node's http performance is pretty great, so unless you're moving a lot of sizable static assets, there's no need to put nginx in front
23:01 < mscdex> bartzy: nginx doesn't have to cross a language boundary?
23:02 < mscdex> bartzy: do some tests and see if it will be an issue for you or not
23:02 < CoverSlide> best to solve that problem upfront
23:02 < bartzy> mscdex: language boundary? What does that mean?
23:02 < xinmin> othiym23: thanks, this really helps
23:02 < mscdex> bartzy: node has a JS->C++ boundary that is crossed many times
23:02 < bartzy> othiym23: All of the requests are for images that are stored inside MongoDB. But those images are up to 4MB in size, and usually up to 1MB.
23:03 < s3shs> there appears to be a "debug" something or other in connect that logs a bunch.  Anybody know how to turn it on?
23:03 < mscdex> bartzy: if none of your content is coming from the file system, then there is no need to put nginx in front
23:03 < bartzy> mscdex: Great, thanks for the answer!
23:04 < nb-ben> do buffers have string functions?
23:04 < mscdex> nb-ben: like?
23:04 < CoverSlide> nb-ben: no
23:04 < CoverSlide> just the ones listed in the doc
23:04 < nb-ben> ah alright thankyou
23:04 < othiym23> will node-mongodb-native stream data from MongoDB?
23:04 < CoverSlide> so you can't indexOf or regex them
23:04 < othiym23> I should know the answer, but don't, which leads me to assume that it doesn't, based on everything else I know about the driver
23:04 < mscdex> CoverSlide: you can, with third party modules
23:04 < CoverSlide> which is unfortunate cause that would be pretty damn useful
23:05 < CoverSlide> mscdex: well yes, of course, anything is possible with third party modules
23:05 < othiym23> bartzy: in that case you definitely do not want nginx in front
23:05 < CoverSlide> I can birth unicorns with third party modules
23:05 < mscdex> CoverSlide: i mean you already can, it's done :-)
23:05 < othiym23> bartzy: varnish, on the other hand, could be helpful, if some of those images are going to be requested more often than others
23:05 < othiym23> varnish and an instance with lots and lots and lots of RAM
23:05 < bartzy> mscdex, othiym23 : Sending 1MB of binary data back to the client - that's non blocking , right ?
23:05 < CoverSlide> i know, buffer-utils
23:05 -!- mode/#Node.js [+o TooTallNate] by ChanServ
23:05 < nb-ben> CoverSlide, if you ever find yourself needing indexOf on a buffer you're probably doing something wrong
23:05 < bartzy> othiym23: Why "defintely do not want" ? 
23:05 < CoverSlide> some of the stuff would be awesome of it was in core
23:06 < mscdex> bartzy: i'm not familiar enough with mongodb, but i would assume yes it's non-blocking
23:06 < CoverSlide> nb-ben: so what string functions were you looking for?
23:06 < othiym23> bartzy: it's non-blocking, but my guess is that MongoDB is going to hand you the entire chunk of image data at once, which is going to push up the memory usage of your Node instance
23:06 < othiym23> that's true for pretty much everything grabbing that data from MongoDB, though
23:06 < nb-ben> CoverSlide, I was just wondering because sometimes you see in the documentation a statement that resembles "callback will receive buffer if encoding was not set"
23:06 < othiym23> bartzy: nginx is just going to be another intermediate point through which your data has to pass; it can only slow things down
23:07 < bartzy> othiym23: And that is bad (memory usage) ?
23:07 < nb-ben> "otherwise it will receive a string"
23:07 < CoverSlide> nb-ben: right
23:07 < othiym23> bartzy: depending on your server's constraints, it could be
23:07 < CoverSlide> most streams will be sending data in buffers only
23:08 < nb-ben> so I figured maybe one of them is inheriting
23:08 < sanitypassing> does a copy of the documentation exist that is optimized for printing?
23:08 < CoverSlide> no
23:08 < sanitypassing> okay.
23:08 < sanitypassing> is there a downloadable form of the documentation?
23:08 < mscdex> sanitypassing: http://nodejs.org/docs/latest/api/all.html ?
23:08 < othiym23> bartzy: if you're anticipating a high concurrent load (lots of simultaneous active users), all pulling down 4MB images, your Node process is going to end up using gigs of RAM, and in certain cases can exhaust the V8 heap
23:08 < mscdex> someone did make a pdf
23:08 < sanitypassing> mscdex: doesn't print very cleanly.
23:08 < mscdex> not sure if it's updated
23:08 < bartzy> othiym23: What is a "heap" ? :)
23:09 < nb-ben> printing is for losers
23:09 < othiym23> but I don't know the exact details, because I don't remember when MongoDB uses JS arrays and when it uses Buffers
23:09 < nb-ben> real men use ipads
23:09 < sanitypassing> nb-ben: physical documentation is easier for me.
23:09 < sent_hil> how can i tell if node was compiled with dtrace or not?
23:09 < nb-ben> :D
23:09 < bartzy> othiym23: And yeah, that's not the use case exactly.
23:09 < CoverSlide> bartzy: wikipedia it
23:09 < sanitypassing> plus I don't always have access to the internet to access the web dos.
23:09 < sanitypassing> docs
23:09 < othiym23> bartzy: big pile of memory where all your data lives, can only get so big in the V8 Javascript runtime used by Node
23:09 < sent_hil> or tell what flags node was compiled with?
23:09 < mscdex> sanitypassing: here's a pdf for 0.8.16: https://github.com/zeMirco/nodejs-pdf-docs/blob/master/pdf/all.pdf
23:09 < nb-ben> I am just kidding sanitypassing 
23:10 < nb-ben> though I can't remember the last time I printed anything
23:10 < sanitypassing> mscdex: thanks
23:10 < CoverSlide> sanitypassing: you can get the source and the `make doc`
23:10 < CoverSlide> i think at least
23:10 < sanitypassing> okay
23:10 < othiym23> sanitypassing: somebody had a version of the docs in Markdown somewhere, you could run those through Marked and print them
23:10 < yorick> hey guys, don't unban harbhub, he's bitching about his ban in ##javascript and being sexist.
23:10 < nb-ben> it feels like obsolete behavior to print stuff nowdays
23:10 < sanitypassing> othiym23: I'll give that a try. Thanks.
23:10 <@mbalho> yorick: yea i know its best to ignore trolls
23:10 < sanitypassing> nb-ben: I print stuff all the time. So many essays...
23:11 < sanitypassing> after a while though, it became easier for me to go over paper than a Word document
23:11 < yorick> mbalho: well he wants to be unbanned after 24hr or something, and I hope he doesn't get it
23:11 < CoverSlide> he's also being antisemitic and homophobic
23:11 < nb-ben> most universities have you email materials
23:11 < sanitypassing> so I prefer to have a physical copy now.
23:11 < bartzy> othiym23: Why if serving static files from the filesystem - it's better to do that with nginx and not node ?
23:12 < s3shs> I need a drink: "disabled.enabled = false"
23:12 < sanitypassing> wat
23:12 < nb-ben> othiym23, I believe nginx will do a better job
23:12 < CoverSlide> if you have varnish in front of it anyway, it's not gonna be too bad
23:12 < othiym23> bartzy: nginx's internal architecture isn't all that different from Node's, but it's especially optimized to serve files
23:13 < othiym23> where Node is a more general-purpose network programming toolkit
23:13 < Zak> lol yorick 
23:13 < othiym23> nb-ben: it will, but there's no reason at all to put nginx in front of Node for the load he's talking about
23:13 < othiym23> for serving up static resources, yes
23:13 < othiym23> for proxying, no
23:14 < othiym23> and it can cause some weird network congestion issues if you don't get the configuration right
23:14 < othiym23> and it is very easy to get wrong, as I have learned firsthand
23:14 < nb-ben> othiym23, there are engineers that what they do revolves around serving that file a few milliseconds faster for nginx as their life's goal
23:14 < bartzy> othiym23: What can be optimized to serve files, for example ?
23:14 < othiym23> nb-ben: are we disagreeing?
23:14 < othiym23> I don't think we are
23:14 < airtanah_> agree-u-ment
23:14 < nb-ben> othiym23, it took me a few minutes to write that
23:14 < nb-ben> XD
23:15 < nb-ben> othiym23, it's true, I'd prefer to use node over nginx
23:15 < nb-ben> simply because of the control it enables
23:15 < othiym23> nb-ben: it depends on what you're trying to do
23:15 < nb-ben> othiym23, it's hard to find an instance when I'll do that
23:15 < othiym23> bartzy: if you have a lot of medium-sized (1-4MB) resources and the money to pay for servers / vms with lots of RAM, sticking varnish in front of nginx is a rough approximation of an optimal configuration
23:16 < CoverSlide> or you can just use a cdn
23:16 < othiym23> well yeah
23:16 < othiym23> my next point was going to be that there are companies like fast.ly who know where all the secrets live
23:16 < bartzy> othiym23: You mean for resources on filesystem, right ?
23:16 < bartzy> or did you mean s/nginx/node ? :p
23:17 < cxreg> nathan7: i've been playing with both domains and signals, quite a bit
23:17 < othiym23> bartzy: I do mean for resources on filesystem
23:17 < bartzy> k
23:17 < bartzy> thanks a lot :D
23:17 < nb-ben> othiym23, today with gluster and such and all those cheap VMs you can setup spending a few % more resources to enable more control over how things work makes a good trade
23:17 < othiym23> bartzy: I'm generally not a big fan of sticking assets in blobs
23:18 < bartzy> othiym23: Why not ?
23:18 < othiym23> nb-ben: have you actually tried to do anything largescale with gluster?
23:18 < othiym23> I have, and I will NEVER DO IT AGAIN
23:18 < nb-ben> othiym23, I am about to do that now
23:18 < othiym23> good luck!
23:18 < othiym23> you're gonna need it
23:18 < nb-ben> othiym23, heard some success stories lol
23:18 < nb-ben> othiym23, why?
23:18 < nb-ben> what went wrong?
23:18 < nathan7> cxreg: Hi
23:18 < bartzy> othiym23: We need it to be available to all our servers. NFS sucks. we use mongo and know it anyways and it's fast.. The files are only temporary ... so why not :)
23:19 < othiym23> well, if you're only going to have one cluster, all colocated, and you're not using EBS, you may have more luck than I did
23:19 < CoverSlide> what is gluster? some hadoop wannabe?
23:19 <@mbalho> isaacs: im getting "Error: forbidden Please log in before writing to the db" now on publish like this issue https://github.com/isaacs/npm/issues/3127
23:19 < nb-ben> CoverSlide, hadoop distributed-style kinda
23:19 < bartzy> gluster is a distributed network filesystem
23:19 < othiym23> but its replication is hard to configure, unreliable in practice, and you have to basically double down on EBS's flakiness to get it to be fast on top of AWS
23:19 < nb-ben> hard to compare it to hadoop though
23:19 < bartzy> nb-ben: Why not MogileFS ?
23:19 < nathan7> cxreg: So, does SIGTERM work as usual?
23:19 < cxreg> yes
23:20 < nb-ben> bartzy, if it's good then probably because I never heard of it
23:20 < nathan7> cxreg: mhm
23:20 < bartzy> nb-ben: It's awesome. really
23:20 < bartzy> nb-ben: But not posix
23:20 < bartzy> othiym23: You didn't answer :p
23:20 < nb-ben> bartzy, then unusable
23:20 < bartzy> why do you need posix ?
23:21 < nb-ben> oh thought he meant it's not for nix
23:21 < nb-ben> sorry
23:21 < othiym23> bartzy: my main response is that if you care about durability, you're better off with a CDN or S3, getting big data in and out of data stores that aren't optimized for it is always going involve tradeoffs that end up being costly in the long run
23:21 < bartzy> not so big (the data).
23:21 < bartzy> othiym23: S3 is not optional , we need latency assurance to write and get
23:22 < cxreg> nathan7: i'm not 100% sure if the sighandlers passed to process.on are bound by domains or not,  im looking for the code which declares process.on
23:22 < bartzy> And tested even from EC2 (which we're not using, but that's the best latency you would get), S3 gives us write latency of small 50kb files of at least 100ms. That's unacceptable....
23:22 < nb-ben> I thought about using GridFS
23:22 < nathan7> cxreg: <3
23:22 < nb-ben> though problem is that it's unmountable
23:22 < bartzy> nb-ben: Why do you need it mountable ?
23:23 < nb-ben> other tools to use it
23:23 < othiym23> bartzy: then go for it, but you're still going to have the "shoving a bowling ball through a garden hose" problem of having to copy the entire blob out of the DB into node, and then stream it to the browser
23:23 < nb-ben> don't wanna rewrite
23:23 < bartzy> othiym23: But what's another solution - NFS ? 
23:23 < othiym23> whereas nginx will just stream the data off disk (which Node can also do -- the bottleneck here is the way MongoDB cursors return results, not anything inherent to the datatype)
23:24 < nathan7> Anything you'd store a blob in should be somewhere you can stream off
23:24 < othiym23> nb-ben: the last time I looked at distributed filesystems seriously, I ended up being lectured at by Brad Fitzpatrick for an hour about how awesome Go is
23:24 < bartzy> othiym23: BTW - I think gridfs IS streaming back the data
23:25 < bartzy> Brad Fitzpatrick wrote MogileFS btw :)
23:25 < othiym23> that said, having a dependency on POSIX fs semantics makes distribution hard, and my final analysis was that NFS, although turbo crappy, was easier to deal with than GlusterFS
23:25 < othiym23> I will admit that I had a requirement to encrypt all the data that was stored in the cluster, which made things significantly harder
23:25 < bartzy> heh, turbo crappy is the exact term for NFS.
23:26 < CoverSlide> cxreg: here? https://github.com/joyent/node/blob/master/src/node.js#L704-L725
23:26 < othiym23> Brad Fitzpatrick writes a lot of things
23:26 < othiym23> some of them he finishes
23:26 < othiym23> I was specifically talking to him about Camlistore, which was awesome, but at the time (and still today, I think) was unfinished
23:26 < othiym23> bartzy: yeah, if you're pulling the data straight out of GridFS, I think you're probably streaming, which will be fine
23:27 < othiym23> I haven't used GridFS in Node much
23:27 < bartzy> othiym23: But if I need to write a file in one server, then read it on another server, write another file based on the 1st file, and then provide it for the user to download. All at real time (as users click stuff) - Filesystem is not an option....
23:27 < othiym23> more in Go, to tie this conversation all together
23:28 < othiym23> bartzy: if responsiveness is your concern, why not use something like memcached or Redis and keep disks out of it entirely?
23:28 < nb-ben> bartzy, sounds like your design is too complicated
23:28 < cxreg> CoverSlide: yeah that, thanks
23:28 < bartzy> othiym23: I understood memcached is not good for files.
23:29 < bartzy> othiym23: i.e. stuff more than a few  hundred KB.. or say >1MB.
23:29 < nb-ben> bartzy, you probably want to keep a direct connection between the servers and keep the file data in memory if you're supposed to do it in real time
23:29 < CoverSlide> memcached has a 1M limit
23:29 < sshaginyan> Guys cluster forks my whole application from top to bottom.... is this normal?
23:29 < lyaunzbe> hey fellas, is it possible to use a module I simply dropped into the node_modules dir?
23:29 < CoverSlide> usually solved by chunking
23:29 < CoverSlide> sshaginyan: yes, that's how it works
23:29 < CoverSlide> sshaginyan: that's why you do a cluster.isMaster check
23:30 < bartzy> othiym23: I dont' know redis very well, I'll check it out.
23:30 < othiym23> nb-ben: I don't think his design is too complicated, but it's a tight set of constraints that's gonna be tough to satisfy
23:30 < sshaginyan> Okay.... what if I want to run a particular part only once?
23:30 < cxreg> nathan7: ok, if it's possible to have domains catch a sighandler in an expected way, i'm not sure how.  the obvious thing does not.
23:30 < bartzy> But I don't know if redis likes binary data ?
23:30 < CoverSlide> bartzy: iirc, it does
23:30 < cxreg> nathan7: however, in 0.8, there's a bug where domains are a little unpredictable.  fixed in 0.9
23:30 < othiym23> cxreg: is the signal handler stuff like the uncaughtException trap, and exposed from C++-land?
23:30 < cxreg> no, it's just an EE event
23:30 < cxreg> bound to process
23:31 < nathan7> cxreg: mhm
23:31 < othiym23> what's emitting the signal?
23:31 < cxreg> othiym23: the code CoverSlide linked to
23:31 < nb-ben> othiym23, could probably simplify it by finding a polymorphic solution
23:32  * nb-ben is going to sleep, gf bugging
23:32 < cxreg> nathan7: if i do process.on('SIGINT', process.domain.bind(function() { ... })) then it's domain bound
23:32 < cxreg> but domains.js is not performing that bind
23:33 < nb-ben> what does process.domain.bind return?
23:33 < othiym23> node.js is one unwieldy blob of code
23:33 < cxreg> nb-ben: a closure which wraps its argument
23:33 < nb-ben> ah
23:34 < nathan7> hm
23:34 < othiym23> I mean specifically github.com/joyent/node/lib/node.js
23:34 < nathan7> jesus
23:34 < nathan7> I just did a git pull on node
23:34 < nb-ben> othiym23, it says that's not the page I was looking for
23:34 < othiym23> that's because I typed in https://github.com/joyent/node/blob/master/src/node.js by hand from memory like an awesome person
23:35 < cxreg> nathan7: that method is not part of the domain api and is not what a developer should do.  it may be useful for you to log the results of require('domain')._stack.length when things are acting funky
23:35 < cxreg> the bug i referred to is leaving that stack at length > 0 when it should not
23:35 < s3shs> Ok, I think connect is getting confused with paths that are outside of my server directory.  Is that possible?
23:35 < nathan7> cxreg: mhm
23:36 < nathan7> cxreg: Log that when exactly?
23:36 < CoverSlide> s3shs: give it an absolute path
23:36 <@isaacs> mbalho: what version of npm you using?
23:36 < CoverSlide> s3shs: __dirname + '/public'
23:36 <@mbalho> isaacs: i somehow knew you would ask me that
23:36 < CoverSlide> usually that's what people do
23:36 < s3shs> CoverSlide, where do I do that?  (I have a complicated app here.)
23:37 < CoverSlide> s3shs: on the connect.static call
23:37 < cxreg> nathan7: well, is the problem that the process is exiting when it should not, or vice versa?
23:37 < s3shs> CoverSlide, I'll try.  Thank you.
23:37 < nathan7> cxreg: Our magic SIGTERMs a customer app
23:37 < nathan7> cxreg: Customer app survives.
23:37 <@isaacs> mbalho: and when you tried to forget the password, did you enter "maxogden" as the name?
23:37 < s3shs> CoverSlide, Wow, you remembered what I was debugging and everything.  Bravo.  :-)
23:38 < s3shs> __dirname is the startup directory?
23:38 <@mbalho> mbalho: i did a change password from user settings on npmjs.org
23:38 < CoverSlide> __dirname is the directory of the current running script
23:38 < othiym23> uh oh mbalho is talking to himself
23:38 <@mbalho> oops
23:38 <@isaacs> mbalho: i just posted another password forget form for you
23:38 <@mbalho> woot
23:38 <@isaacs> mbalho: worked for me
23:39 <@isaacs> mbalho: did you maybe enter your email instead of your name?
23:39 < s3shs> Ok, so if I set that up at the "top of main", I'll be fine.
23:39 < CoverSlide> it should
23:39 < s3shs> Finally, an error: "Cannot GET /"
23:40 < s3shs> Better than failing silently!
23:40 <@mbalho> isaacs: 'edit profile' -> 'change your password' -> 'Current Password, New Password, Please choose something long and memorable, Verify Password
23:40 <@isaacs> mbalho: ok
23:40 <@mbalho> isaacs: with npm 1.2.10
23:40 <@mbalho> isaacs: still fails when publishing
23:40 <@isaacs> mbalho: do you have a _token section in your ~/.npmrc?
23:40 <@isaacs> mbalho: remove that if so
23:41 < s3shs> How did this /ever/ work?
23:41 <@mbalho> isaacs: that fixed it
23:41 <@isaacs> hrm.
23:41 <@isaacs> mbalho: ok, i'm wondering what that's about then
23:41 <@mbalho> isaacs: i didnt have to enter my password again either
23:41 <@isaacs> it seems like couchdb isn't revoking the cookie, but also isn't accepting the old one
23:42 <@isaacs> and it seems to have started right around the time that jhs upated npm's couchdb, and that was for some security thing regarding cookies.
23:42 <@isaacs> so this is all sort of painting a picture now.
23:42 <@mbalho> ha
23:42 <@isaacs> mbalho: if it happens again, lmk right aweay
23:42 < othiym23> it is not a Thomas Kincade picture
23:42 <@isaacs> mbalho: also, there should now be a _token section in ~/.npmrc again, yes?
23:42 <@isaacs> mbalho: (but with new, presumably valid, data)
23:42 <@mbalho> isaacs: yep
23:43 <@isaacs> ok
23:43 <@isaacs> soo...
23:43 <@isaacs> maybe npm-registry-client should catch this 401/403/40whatever and if it had presented a token, but HAS a username/password, try again with the user/pass, to get a new token.
23:44 <@mbalho> yea that sounds logical, will that automatically overwrite .npmrc?
23:44 <@isaacs> mbalho: i think so.
23:44 <@isaacs> mbalho: i'd like it to :)
23:44 <@mbalho> hehe
23:44 <@isaacs> mbalho: npm-registry-client automatically tells npmconf to save the token, and npmconf is the thing that does ~/.npmrc file stuff
23:45 < TheAceOfHearts> isaacs, are you npm's creator?
23:45 <@isaacs> TheAceOfHearts yessir
23:45  * isaacs is npm's lord and master.
23:46 < TheAceOfHearts> you. are. amazing. I just gotta say thanks, I love npm. I just googled your name + nodejs and found your github
23:46 <@mbalho> this just got all isaac in wonderland, with medieval titles and anthropomorphized playing ards
23:46 < othiym23> that sounds like a substack drawing waiting to happen
23:46 <@mbalho> oh right it already did kinda happen
23:47 < CoverSlide> I pictured isaacs in front of a plantation with a bullwhip
23:47 < sshaginyan> Guys so when I use cluster all my libraries are going to be included twice? Unless I handle them?
23:47 < sshaginyan> Nm got it
23:48 <@mbalho> CoverSlide: ಠ_ಠ
23:48 <@isaacs> sshaginyan: yes, that's how it works. each process gets its own copy.
23:49 < CoverSlide> you can stick your requires in if(cluster.isMaster){}else{require(...)}
23:50 < CoverSlide> oh one for each worker, yes
23:50 < CoverSlide> i thought you were worrying about being in the master too
23:51 < s3shs> So every time my site loads, it makes 22 requests to the server.  I load the first time, fine.  I reload the second time, fine.  I reload the 3rd time and connect freezes. No request #45.
23:51 < s3shs> I'm stumped.
23:52 <@isaacs> you mean that your webpage has 22 assets?
23:53 < s3shs> heh
23:53 <@isaacs> html/js/images/etc?
23:53 < s3shs> Yes.  Various json requests, etc.
23:53 < s3shs> I just put a counter on the first .use I have on connect.
23:53 < CoverSlide> are you ending all your requests properly?
23:54 < s3shs> CoverSlide, I may not be.  Is there a place where I can see hanging requests?
23:55 < othiym23> s3shs: if process._getActiveRequests() gets long, there are probably some dangling requests in there
23:57 < s3shs> At request 45 I sent a breakpoint.  1 object in there.
23:57 < s3shs> I assume that's #45 I'm sitting on.
23:57 < othiym23> s3shs: what about process._getActiveHandles()?
23:57 < s3shs> The good news is that this is *really* reproducible.
23:58 < s3shs> process._getActiveHandles() is longer.  10.
23:59 < othiym23> 10 is not that many
23:59 < othiym23> are most of those setTimeout handlers?
--- Log closed Fri Feb 08 00:00:11 2013
