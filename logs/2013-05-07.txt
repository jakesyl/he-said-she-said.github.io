--- Log opened Tue May 07 00:00:12 2013
--- Day changed Tue May 07 2013
00:00 < mikeal> i can work around this by doing an additional function wrapper
00:00 < mikeal> but it seems dirty
00:00 < ljharb> mikeal: i suppose an array of errors is a single truthy error value. would the errors and results arrays have to be sparse?
00:00 < mikeal> what i really want to do is parallel.push(obj.save.bind(obj)); async.parallel(parallel, function (errors, results))
00:01 < mikeal> ljharb: error will either be null or a value, so the length would be solid and not sparse
00:02 < ljharb> mikeal: so you'd have no way of knowing which failed or succeeded, just how many of each?
00:02 <@Nexxy> Sparse.
00:03 < mikeal> ljharb: that's not true, async.parallel insures the order of results is the order of your series array
00:03 < ljharb> mikeal: so it'd be "undefined" for the ones that had errored out?
00:04 < mikeal> ah, yes
00:06 < SirFunk> hmm.. need to come up with a node project I can work on in an hour..
00:07 < chilts> why do you need one in an hour?
00:07 < SirFunk> chilts: Well i have an hour or so to sit here and do nothing with only a shell to my server
00:08 < LegCow> Anyone with a bit of experience with Single Page Apps?
00:09 < AWinterman> SirFunk: if your into frameworks you could help me with this: https://github.com/AWinterman/cork.git
00:09 < AWinterman> :)
00:09 < AWinterman> you can just git clone
00:09 < AWinterman> right now it's just a readme
00:10 < zkirill> LegCow: shoot
00:10 < SirFunk> eh, i'm not so into frameworks. I need to come up with an idea to create something that does something
00:10 < AWinterman> you could write something that let's you create repos from the command line
00:10 < AWinterman> repos on github that is
00:11 < LegCow> zkirill: I'm seriously looking at AngularJS to hook up to my Node RESTful API, would you say that's a good framework to use?
00:12 < zkirill> LegCow: I'm doing that right now and this is my first time using AngularJS. It was a very very steep learning curve but I've learned a lot. Expect to search for a lot of AnguarlJS stuff on quorra because the docs aren't great.
00:13 < zkirill> LegCow: I'm proficient with jQuery and Backbone and also evaluated Ember.js but chose AngularJS in the end because it seemed like a good long term investment.
00:14 < LegCow> zkirill: It does seem quite new. The custom elements is a very interesting idea but I have a few reservations regarding it. Might not be too fast but it's certainly elegant. I found backbone too verbose, Ember was somethign I had my eye on though! Backing by Google sold me on AngularJS though.
00:17 < LegCow> zkirill: I think I'm hoping they'll add a little more in regards to local storage and the resource module. I'm not to advanced with JavaScript so the less boilerplate the better
00:17 < AWinterman> either of you guys tried meteor? does it fill a similar nitch?
00:17 < zkirill> LegCow: bout the same, ping me if you need anything
00:18 < zkirill> AWinterman: no, sorry
00:18 < LegCow> AWinterman: the Meteor demo was VERY impressive. I didn't feel like it'd apply too much from a business point of view.
00:19 <@isaacbw> meteor is more of a cool tech demo than a useful tool (right now)
00:19 < AWinterman> what makes you guys say that?
00:19 < AWinterman> what are its shortcomings?
00:19 <@isaacbw> it was made by crazy people
00:19 -!- Nexxy changed the topic of #Node.js to: never trust robots. - http://nodejs.org  - http://logs.nodejs.org -  http://stackoverflow.com/questions/tagged/node.js
00:19 < AWinterman> well, I'm pretty sure writing any amount of js by choice puts you off in that direction
00:19 < AWinterman> :)
00:20 <@isaacbw> haha, I think that's true
00:20 < LegCow> AWinterman: too good to be true, haha. They just seem like they're doing too much. I question their ability to scale on a glance. I'd want to see a working example before I look at it further
00:20 < culpn8r> using nodeio for web scraping. is there a way to prevent my job from completely crashing if a selector returns no elements?
00:20 < keyosk> if (selector.length) 
00:21 < culpn8r> i get an error "no elements matching (selector)" and it crashes
00:21 < keyosk> Hm
00:22 < keyosk> I've only ever done web scraping by making requests and using cheerio :/
00:22 < culpn8r> is that easier?
00:22 < keyosk> I found it easy ^^
00:22 < culpn8r> hm alright i guess ill try that. im having issues because my requests to pages are nested
00:23 < keyosk> You might have better control doing it with your own requests
00:23 < keyosk> Or i might be sending you astray because i'm unfamiliar with nodeio ^^
00:23 < culpn8r> alright well im come back and bug you or let you know if it works!
00:24 < culpn8r> cheerio is just a jquery implementation for node right?
00:24 < keyosk> Yep
00:24 < jschall> anyone know dust.js? I just posted this question on stackoverflow: http://stackoverflow.com/questions/16409329/how-do-i-compose-templates-on-both-server-and-client-using-dust-js
00:24 < keyosk> So you'd make a request, and you have your body object of the request
00:24 < keyosk> Then you'd pass that body string into cheerio
00:25 < keyosk> Then you'd use a selector against cheerio's parsing of that body string
00:25 < keyosk> It's fairly self explanatory
00:25 < culpn8r> oh okay yeah thats exactly what i want
00:25 < culpn8r> im trying to scrape to build an api
00:25 < keyosk> This is kinda what I did
00:25 <@isaacbw> you should create machanical turk jobs and have people copy paste the data into a form before the function returns
00:25 < keyosk> I scraped eat24.com's website..
00:25 < keyosk> And put all their menu's into my own db
00:25 < keyosk> :D
00:25 < LegCow> Meteor just makes me worry a little. If you have x users looking at a dataset, all making updates. There must be a whole mess of tracking running in the background. Can it guarentee sync? There's a lot of trust you'd need to invest in it
00:26 < keyosk> Just using mikael's request, cheerio, and mongo
00:26 <@isaacbw> keyosk: you aren't using that data in a product, are you?
00:26 < keyosk> lol no
00:26 <@isaacbw> okay :p
00:26 < keyosk> I did it as a proof of concept
00:26 < keyosk> Then I realized they made an api to return this data
00:26 < keyosk> And face palmed hard.
00:26 <@isaacbw> lol
00:26 <@isaacbw> wonderful
00:26 < keyosk> Yep
00:27 < keyosk> Always :/
00:27 < keyosk> It was the first time I made a scraper with node and it was a good lesson though
00:28 < vampi-the-frog> hi guys. with express+ejs, is it possible to define some sort of global template, so that all the page templates get wrapped in some boilerplate html?
00:30 <@isaacbw> vampi-the-frog: nope
00:30 < vampi-the-frog> proof?
00:30 < keyosk> faith?
00:30 < vampi-the-frog> is there an include directive in ejs?
00:30 <@isaacbw> https://github.com/visionmedia/express/blob/master/examples/ejs/views/users.html
00:30 <@isaacbw> (yes)
00:31 <@isaacbw> what do you mean proof, lol
00:31 < ChrisPartridge> get started on that thesis
00:31 < keyosk> Proof is faith :d
00:33 < vampi-the-frog> isaacbw: I mean how did you come to the conclusion that there isn't a possibility :P
00:34 <@isaacbw> because I know the answer
00:34 < vampi-the-frog> nevermind, I split the code in header and footer and just <% include %>'d them
00:34 < vampi-the-frog> well how did you come to know the answer?
00:34 <@isaacbw> magic
00:35 <@isaacbw> that strange force of magic that allows you learn things over time
00:35 < ChrisPartridge> sounds like sorcery to me
00:36 < LegCow> it's like 'can you prove god doesn't exist?'
00:37 <@isaacbw> you can prove anything with the right assumptions!
00:39 < LegCow> assumptions are the foundation of all knowledge!
00:39 <@isaacbw> everything is a lie!
00:39 < LegCow> i assume that i'll get very little work done today since i've discovered this channel
00:39 < Havvy> something something Solipsism
00:43 < culpn8r> keyosk: excellent advice this is a lot easier
00:45 < vampi-the-frog> isaacbw: http://robdodson.me/blog/2012/05/31/how-to-use-ejs-in-express/
00:45 < vampi-the-frog> it's possible
00:45 < vampi-the-frog> WHERE'S YOUR GOD NOW?
00:48 <@isaacbw> that's old
00:48 <@isaacbw> it isn't supported in 3
00:48 <@isaacbw> 3?
00:48 <@isaacbw> whatever the latest one is
00:48 < LegCow> does anyone have an example of a good RESTful API design when you have a bunch of resources?
00:49 < LegCow> should I just require a file for each resource? use some fancy mapping?
00:49 < LegCow> i'm too lazy to gain experience in the traditional 'screwing up' method
00:50 < keyosk> culpn8r: Oh great!
00:50 < sandfox> LegCow: and thus you are destined to gain that experience the traditional way… :-p
00:51 < sandfox> so much depends on your db, any orm thing you're using, if you like DDD, how much you can be bothered to separate out stuff
00:52 <@isaacbw> usually restful apis aren't really all that restful
00:52 < sandfox> pro-tip - be pragmatic rather than trying to fellow the 'rules' endlessly
00:53 < LegCow> sandfox: you'd think i'd learn by now :P I think i'll switch to MongoDB and so Mongoose. I don' have a problem with doing a lot of code, I just don't like violating the DRY principle if I can help it
00:53 < LegCow> isaacbw: I sometimes wonder if they're all that they're cracked up to be. It makes a lot of sense but it's also limiting
00:53 < ericelliott> Suddenly getting { [Error: write EPIPE] code: 'EPIPE', errno: 'EPIPE', syscall: 'write' }
00:53 < ericelliott> no callstack
00:54 < ericelliott> not sure where to start looking
00:54 < ericelliott> Any ideas on how I can track this bug down?
00:54 < sandfox> LegCow: nothing wrong with stuff like http://www.sequelizejs.com/documentation for mysql
00:54 < LegCow> sandfox: with limited node experience I kinda want my hand held. big wuss I am.
00:55 < LegCow> sandfox: most of my companies experience is with SQL Server. If I was going to switch, I think a noSQL solution might be interesting.
00:55 < ericelliott> right now I'm randomly commenting / stubbing things out in hopes that I find the right thing, but that's a losing strategy, because this could be coming from any of the libraries that try to write...
00:56 < sandfox> LegCow: super simple set-up is something like restify / express and whatever db you already know is the way forward, don't change too many things at once
00:57 < sandfox> LegCow: and for the love of all that right, just don't jump into using mongodb because someone else said it's fast. Plenty of other faster/simpler/bigger/scarier noSQL options out there. And also, there is nothing that wrong with RDBMs for the most part
00:58 <@isaacbw> LegCow: if the API is strictly RESTful it's basically exposing an abstracted file system
00:59 < LegCow> sandfox: it wouldn't be because it's fast. There just seems to be something elegant about storing an entity graph rather than endlessly linking tightly coupled data points. But i'll take that on board. I really wanted to connect to SQL Server but I barely see any movement in any of the current SQL libs like MSNODESQL
00:59 <@isaacbw> so it's nice and intuitive if there aren't any actions besides adding/deleting/modifying documents
01:00 < LegCow> isaacbw: mostly it just seems like a great way of limiting the mistakes I can make. Although maybe it's not a silver bullet they make it seem
01:00 < culpn8r> will using async.series solve race conditions?
01:01 <@isaacbw> race condition doesn't mean much in the context of node
01:01 < keyosk> eeeeeh
01:01 < sandfox> LegCow: If what you have is really documents, then it's not too bad. but it is no magic bullet for anything, It's sort of the like MySQL was to databases about 8 years ago. As for drivers, https://npmjs.org/package/tedious is worth a look
01:02 < LegCow> doesn't async create a new process?
01:02 < keyosk> I mean you should always be concious of race conditions
01:02 < keyosk> No it doesn't
01:02 < Havvy> LegCow: Everything happens in a single process.
01:02 <@isaacbw> you should be cool and use promises
01:02 <@isaacbw> they solve everything
01:02 < Havvy> isaacbw: Except performance.
01:02 < ericelliott> Come on Node. WTF am I supposed to do with { [Error: write EPIPE] code: 'EPIPE', errno: 'EPIPE', syscall: 'write' } ?
01:02 < sandfox> trololololol
01:03 < ericelliott> Starting to get frustrated. :/
01:03 < ChrisPartridge> ericelliott: we have no context...
01:03 < sandfox> LegCow: have you tried wrapping it in a domain?
01:03 < Havvy> Is EPIPE a linux error or a Node one?
01:03 < ericelliott> ChrisPartridge: Neither do I.
01:03 < sandfox> oopps, not for you LegCow:
01:03 <@isaacbw> Havvy: didn't we agree that the benchmark was ridiculous?
01:03 < culpn8r> im running 3 sequential loops, but i need them to run in series. so i should use async.series right?
01:03 < mscdex> oh man, gotta love it when github changes their UI around
01:03 < ericelliott> ChrisPartridge: I see that on startup of a node / express server.
01:03 < sandfox> isaacbw: It should be daft, but some people really do use promises like that…
01:04 < mscdex> they must be really bored
01:04 < Havvy> isaacbw: Given how some people actually life synchronous code into promises...
01:04 < ericelliott> ChrisPartridge: A very similar node/express server is running just fine.
01:04 < Havvy> *lift
01:04 <@isaacbw> they're bums
01:04 < sandfox> isaacbw: I suppose if you give everyone a spade, some people are always going to hit themselves in the face with it rather dig a hole or whatever
01:05 <@isaacbw> that's a quote for the books
01:05 < conphile>  /w 5
01:05 < Havvy> Given that the Promises/A+ specification leads to that performance issue...I hope Promises/B can fix it.
01:05 < conphile> apparently irssi works better without a space before the /
01:06 < mscdex> skip Promises/A+ and Promises/B and just go straight to Promises/C++
01:06 < sandfox> isaacbw: and it's under 140 characters! Fame will surely follow
01:07 < sandfox> I think you mean Promises/13
01:07 < mscdex> Promises/C for a non-OO API
01:08 <@isaacbw> then(promise, resolve, reject)
01:09 < sandfox> hmm, wondering how you could STL up promises
01:11 < ericelliott> In case anybody's curious.. traced that problem to my logging code - thank you, bunyan.
01:11 < mscdex> good ol' Paul
01:11 <@isaacbw> you're welcome ericelliott 
01:22 < blacktea> what is this?
01:24 < LegCow> a popular drink
01:24 < LegCow> i usually take mine with milk though
01:24 < LegCow> and now i need to go make one... thanks.
01:31 < s3shs> I have a req.session object created by connect.  I change my req.session.x value but the cookie doesn't change when I check back in the browser.  What gives?
01:49 < LegCow> Are there any sort of guidelines for the creation of objects in a mongodb database, similar to 'normal forms' found in relational db's? anyone know a good document on this?
01:52 < mscdex> s3shs: what session storage provider are you using?
01:52 < s3shs> Hmm.  I'm using connect.
01:53 < mscdex> but what are you using to persist the session?
01:53 < mscdex> cookies, redis, mysql, mongodb, something else?
01:53 < s3shs> I'm persisting my session an sql record at the moment.
01:53 < s3shs> That has a uuid that's in the cookie.
01:53 < s3shs> ^with an^
01:54 < s3shs> I get a logout event and I want to kill the session and the cookie... so I do a delete req.session['uuid'] (my cookie value), but when I check my cookies in Chrome the old one is still there.
01:56 < mscdex> s3shs: i think you want something like req.session.destroy(function(err) {})
01:57 < s3shs> I tried that.  Well, I tried req.session.save(...), and it didn't know what to do with it.
01:58 < Fishrock123> After updating node with the `n` module, I get this error whenever I type `$ npm <anything>` : https://gist.github.com/Fishrock123/5529746
01:58 < s3shs> mscdex, I get: TypeError: Object #<Object> has no method 'save'
01:59 < mscdex> s3shs: can you post your code somewhere?
01:59 < s3shs> There's not that much more than what I pasted here.  :-)
02:00 < s3shs> I don't know what I would paste that I haven't already.
02:01 < s3shs> 'save' and 'destroy' are both undefined in req.session.
02:01 < mscdex> i dunno, but somewhere your req.session must be getting mutated or something, because it should be a proper Session instance
02:01 < s3shs> Let me set a breakpoint higher up the ladder.  See what's going on.
02:03 < mscdex> s3shs: what IS on your req.session object anyway, if you do a console.dir(req.session) ?
02:03 < keyosk> It SHOULD just be a simple object {'session_prop_1':'value_1'}etc etc
02:03 < mscdex> no, it should be more than that
02:04 < mscdex> http://www.senchalabs.org/connect/middleware-session.html
02:04 < s3shs> Let me try.
02:04 < s3shs> I set a breakpoint pretty close to the top and there was no save or destroy in session.
02:05 < s3shs> console.dir(req.session) printed absolutely nothing.
02:05 < s3shs> Oh wait... this is server side...
02:06 < keyosk> It's supposed to be server side
02:06 < s3shs> mscdex, here's what it uttered: http://pastebin.com/hm6bJ1X1
02:06 < s3shs> I'm doing angular browser side where the console is actually the console.  On the node side, console prints to my terminal window, not the console in the browser.
02:07 < s3shs> Anyway, output is above.
02:09 < s3shs> And the same is output before I do a delete req.session['uuid']
02:10 < mscdex> are you using connect.cookieSession()?
02:10 < mscdex> middleware
02:12 < s3shs> Here's the middleware call:  http://pastebin.com/e7XZFuTd
02:12 < mscdex> ah ok that is why :-)
02:12 < mscdex> cookieSession is a different beast
02:12 < s3shs> <waits for it>
02:12 < mscdex> than connect.session()
02:12 < s3shs> Oh.
02:12 < mscdex> to clear a cookie session just set `req.session = null`
02:13 < s3shs> Hmm.  Ok.  Shouldn't have the delete call have worked too?
02:13 < s3shs> Trying now.
02:13 < mscdex> no, that will just delete the value from the session
02:13 < mscdex> setting req.session to null will actually invalidate the session
02:14 < mscdex> it'll send a Set-Cookie in the response with a time in the past
02:15 < s3shs> Yup, that did it.  mscdex, thank you!  I tried everything *but* that.
02:15 < mscdex> :-)
02:15 < s3shs> So... how did you know that would do it?
02:15 < mscdex> s3shs: https://github.com/senchalabs/connect/blob/master/lib/middleware/cookieSession.js#L39
02:15 < mscdex> there's also: http://www.senchalabs.org/connect/cookieSession.html
02:16 < s3shs> Bah.  I was looking at the wrong session type.  Thank you again!
02:16 < s3shs> (Off to pick up the kid.)
02:18 < lohkey> require doesn't like circular deps
02:19 < lohkey> if you have a circular dep, require just returns {}
02:19 < lohkey> :-/
02:23 < AAA_awright> lohkey: It'll get filled eventually
02:23 < lohkey> AAA_awright: not when i want to use it, which is immediately
02:24 < AAA_awright> If you're trying to do that then you're Doing It Wrong
02:24 < lohkey> nah, most other languages can handle this fairly easily
02:24 < AAA_awright> Uh, no they can't?
02:24 < lohkey> this is a side effect of require() being a first class function and not a language construct
02:24 < JJMalina> does anyone know of a screencast featuring streams that's up to date with 0.10.5? something like this http://www.youtube.com/watch?v=lQAV3bPOYHo
02:24 < AAA_awright> That's recursive, how do you handle that?
02:25 < AAA_awright> Being a language construct is a bad thing
02:25 < AAA_awright> Then you're just substituting in code without it having any real meaning
02:25 < lohkey> AAA_awright: java and C++  can do this
02:26 < AAA_awright> Last time I tried doing that in C++ I got undefined symbol errors
02:26 < lohkey> forward declarations
02:26 < lohkey> in C++ that is
02:26 < AAA_awright> But in any event, there's no reason you should have to do what you're doing, I believe it's provably incorrect
02:26 < lohkey> you don't need to do that in java though
02:27 < lohkey> most other language, import is a language construct
02:27 < lohkey> C/C++ excluded because C/C++ imports are basically copy paste via the preproc
02:27 < AAA_awright> Yeah I'm familiar... That's a far inferior method of importing logic
02:27 < AAA_awright> I really like what ECMAScript allows you to do
02:27 < lohkey> i don't see the immediate benefits of having importing being a function
02:28 < AAA_awright> It's not importing, you're asking for a function to be returned to you
02:28 < AAA_awright> Or more specifically, some externally defined value, which itself is the result of a function call
02:29 < AAA_awright> A module is literally defined as the output of a function executed once per process, right
02:29 < AAA_awright> And require() executes that function if not already cached, and returns the value to you
02:30 < lohkey> there has to be a better way
02:30 < AAA_awright> It means that all symbols that you use are actually defined somewhere in the file, instead of just appearing out of nowhere (there are some symbols that appear out of nowhere, like `console` and `process` but that's acceptable to some extent)
02:30 < AAA_awright> What do you mean better?
02:30 < AAA_awright> It's different but that doesn't mean inferior
02:30 < AAA_awright> lohkey: What are you trying to do?
02:33 < AAA_awright> lohkey: You're clearly trying to go about something the wrong way, what are you stuck on?
02:34 < lohkey> i have files that indirectly depend on each other
02:34 < lohkey> more specifically on indirectly depends on one other
02:35 < AAA_awright> How so
02:35 < lohkey> A depends on B, B depends on C and C depends on A
02:35 < lohkey> the solution is simple enough
02:35 < lohkey> lazy loading of B in A
02:35 < lohkey> which is fine
02:36 < lohkey> it's just a lame hack around what i feel is a lame way to handle imports
02:36 <@Nexxy> what is it that I'm doing wrong to have never come across problems like these?
02:36 < AAA_awright> lohkey: require already handles this case, on the next iteration the function definition will be available
02:36 < LegCow> I tend to think i'm doing something wrong if i find a cyclic dependency
02:37 < AAA_awright> So long as you're only defining functions in your modules like you should, and not executing code
02:37 < lohkey> AAA_awright: this is a synchronous interface, thats not an option
02:37 < lohkey> AAA_awright: thats what i'm doing
02:37 < AAA_awright> Can you post what you're doing then? Because that shouldn't be happening
02:39 < lohkey> company code, probably not a cool thing to do
02:44 < AAA_awright> lohkey: The only reason you should be running into troubles is because you're executing code inside a module body somewhere.
02:44 < AAA_awright> module.exports = require('fs').readFileSync('xyx'); // These do not mix, you're either writing application code or a module body, but not both
02:45 < lohkey> that seems to contradict your whole point about the result of require() being the result of a function call though
02:46 < lohkey> anyways, yeah, i found the troublemaking: module.exports = until.inherits(A, B)
02:46 < AAA_awright> A module is a function *called exactly once per process* so no. The point of a module is to create objects and define functions
02:47 < lohkey> memoization doesn't make it something other then a function at the end of the day
02:48 < AAA_awright> I don't follow?
02:48 < AAA_awright> In either case, writing an application body or a library/module body, the function is called once per process. Nonetheless trying to do both inside a single function body causes trouble.
02:49 < lohkey> right, the fact that it causes trouble is partially the issue
02:53 < jergason> anyone know what bot this channel uses?
02:56 < lyetz> Could someone help me figure out why this function isn't returning the proper value?
02:56 < lyetz> http://cl.ly/image/1N0W0q0S0a0a
02:57 < s3shs> Where is finalTotal?
02:58 < ljharb> lyetz: finalTotal isn't defined in that function, so yes, where is it
02:58 < s3shs> If you "return 57.96", does that work?
02:58 < ljharb> lyetz: also, console.log is async
02:58 < ljharb> so that just means that finalTotal  *ends up* being 57.96. but it was undefined when you called console.log
02:59 < lyetz> finalTotal is defined right outside of it
03:01 < lyetz> s3shs, nope
03:01 < s3shs> We need to see more code.
03:02 < s3shs> Including where that function is called form.  We don't need pictures.  You can paste them in to pastebin.org
03:02 < lyetz> Let me clean it up real quick, one sec
03:02 < ljharb> yes, also that. code, not pictures.
03:04 < lyetz> http://pastebin.com/NdFsxqjR
03:05 < lyetz> So I'm updating the total each time the DB query is run
03:05 < lyetz> Once the for loop finishes, allDone is run, which I need to return 'finalTotal'
03:06 < ljharb> a while loop nested inside a for loop, ew
03:06 < ljharb> learn and love forEach and map :-)
03:06 < ljharb> also, fyi, all numbers in JS are floats, so 0 and 0.00 are identical
03:07 < s3shs> I've actually been doing all my work with the 'async' library.
03:07 < ljharb> as long as you're using iterators and not loops, you're probably golden. but why avoid the native functions?
03:07 < lyetz> ljharb, thanks, I obviously still have a lot to learn :p
03:07 < s3shs> So basically forEach is going to buzz through really fast and spawn off a bunch of select/execFind ops, right?  And it's fair to say that getSubtotal will be long gone by the time they finish?
03:08 < ljharb> s3shs: no, getSubtotal will be held onto via closures
03:08 < lyetz> s3shs, originally that was the case
03:08 < lyetz> Until I added the done() function
03:08 < lyetz> so it doesn't continue the loop until the db query has finished
03:09 < ljharb> lyetz: wait. where is "allDone" returning anything?
03:09 < ljharb> it's being called by forEach. it's return value goes nowhere.
03:10 < culpn8r> this whole asynchronous thing is throwing my whole head off
03:10 < lyetz> ljharb, you're saying finalTotal should be passed to the function directly?
03:11 < ljharb> lyetz: what? no. i'm saying "return finalTotal" does nothing
03:11 < ljharb> to where do you think it's being returned?
03:11 < lyetz> Ah, I see what you're saying
03:12 < lyetz> So right now, it's being returned to where allDone was called
03:12 < lyetz> Rather than where the entire getSubtotal function was called
03:12 < lyetz> Right?
03:13 < ljharb> which is nowhere
03:13 < ljharb> allDone gets called by "forEach", which does nothing with the return value
03:13 < ljharb> so i'm not sure what you mean when you say "it's undefined when it's returned", because it's impossible for you to even check that
03:13 < ljharb> (i'm assuming forEach is the foreach npm module)
03:15 < lyetz> Yeah, I see where I got confused now
03:15 < lyetz> Somewhere else in the program, I was doing: var finalTotal = getSubtotal(cart);
03:15 < ljharb> yeah, you can't do that, cause it's async
03:16 < ljharb> also cause you don't `return finalTotal` from getSubtotal anyways
03:16 < lyetz> Which in turn resulted in it being undefined, because nothing was being returned
03:16 < s3shs> Closures are smart.
03:16 < s3shs> Look in to async.  It really is very nice.
03:17 < ljharb> or promises
03:20 < s3shs> I just got in to domains.  A bit tricky but very helpful.
03:52 < lyetz> ljharb, so there's no easy way to accomplish what I'm trying to do?
03:52 < lyetz> I understand what my problem is, just confused with how to get it working
03:53 < ljharb> lyetz: of course there is. pass a callback to getSubtotal. don't try to return a value.
03:53 < ljharb> or, use promises, and return a promise
03:54 < w00tner> hello 
03:54 < w00tner> in jade...im using "each item in lugares"  to list all items, but what if i need to show only 5 items?
03:55 < ljharb> .slice(0, 5) it before you pass it in?
04:02 < amagee> Hey I'm trying to profile some javascript code but my v8.log file doesn't seem to contain any data about actual javascript calls.  i'm running node --prof blah.js on this file: http://dpaste.com/1115694/ but not getting any data about the calls to helloThisIsAProfiledMethod. Am I missing something obvious?
04:30 < garthk> Anyone trying Node for high throughput of cooked data rather than raw bytes? I'm trying to stream millions of tuples. JSONStream's parser tops out at 5MB/s, and adding minimal passthrough streams (using element-stream) lops off ~0.5MB/s each. My memory footprint is nice, but the job takes too bloody long.
04:30 < kenperkins> buffers start paused right
04:31 < kenperkins> stream rather
04:33 < garthk> kenperkins: new ones, yes. If you're putting together a stream pipeline with both old and new streams, put PassThrough streams between the old ones and the new ones to avoid dropping data. (If you're streaming bytes rather than objects, the performance will probably be fine.)
04:33 < kenperkins> PassThrough? is that a package
04:34 < garthk> http://nodejs.org/api/stream.html
04:35 < kenperkins> ah 
05:25 < elliottcable> Trying to get the profiler to work.
05:25 < elliottcable> Here's the exact process I followed:
05:26 < elliottcable> https://gist.github.com/elliottcable/5530440
05:27 < elliottcable> Anybody here have any experience with using the --prof option with V8's mac-tick-processor? /=
05:28 < amagee> elliottcable: no but i've been trying and failing to get profiling working too
05:28 < elliottcable> amagee ⑊ ugh.
05:28 < elliottcable> amagee ⑊ It won't work for me, but on the offchance that it'll help you ... try https://nodetime.com
05:28 < elliottcable> it's really slick, and free for one-off-script style use-cases,
05:29 < elliottcable> but won't show in-depth information for me, for no reason that I can discern (after one or two really obvious “everything is called from these root functions” entries, I can't drill down any further. useless.)
05:29 < amagee> elliottcable: yeah i tried that
05:29 < elliottcable> well, I suppose I'm glad to hear I'm not the only one experiencing this particular problem at this particular moment.
05:30 < elliottcable> Now let's see if we can get anybody to help us. >:
05:46 < LegCow> Are there any good cloud hosting solutions for NodeJS in Australia?
05:49 < leichtgewicht> LegCow: Out of curiosity: Are there any good non-node cloud hosting solutions in Australia?
05:51 < chilts> LegCow: AWS is in Sydney, I think Rackspace is too
05:51 < chilts> and I'm sure there are loads of other VPS type things
05:51 < chilts> are you looking for a PaaS or just some servers?
05:54 < ChrisPartridge> LegCow: you can also check out ninefold - we use them a bit
05:56 < LegCow> I was just asking generally. I'd rather not have to host a machine myself. Suppose I could if I had to
05:56 < LegCow> I'd host whatever DB tech they had there and a website driven by node
05:56 < LegCow> ninefold, i'll have a look. thanks.
06:00 < ChrisPartridge> LegCow: not sure of any actual PaaS providers in au, all the ones i've seen are simply IaaS
06:02 < someprimetime_> I'm looping through each of my submissions and augmenting them by searching for how many votes each one has… to do this in an async manner which async method should I be using with: https://github.com/caolan/async for this type of thing?
06:03 < someprimetime_> I've used waterfall in the past, but that's only been when grabbing a collection and storing it in memory and passing it to the next method that depends on it
06:04 < someprimetime_> i *could* grab the entire collection of votes and just map reduce it but that collection could potentially be HUGE so I'd like to limit it first
06:06 < ChrisPartridge> someprimetime_: can't you just count the votes instead of getting the entire collection?
06:06 < ChrisPartridge> (in whatever data store you are using)
06:07 < someprimetime_> well ChrisPartridge, this is for a paginated browse page
06:07 < someprimetime_> so there are 10 diff. submissions
06:07 < someprimetime_> first i grab all of them then i want to loop through the associated votes for each one (another collection) and augment that count to the submissions
06:09 < sinclair-work> anyone want to try out typescript?
06:09 < sinclair-work> not to spam, but https://npmjs.org/package/typescript.api
06:09  * sinclair-work needs feedback
06:09 < someprimetime_> i more so want to figure out how to solve my problem ;)
06:11 < beeant-work> work
06:11 < beeant-work> do you like your job?
06:11 < sinclair-work> beeant: are you referring to me?
06:12 < beeant-work> everyone including you
06:12 < elliottcable> God damnit. Does *anybody* have a way to profile Node.js code, right now?
06:12 < elliottcable> I've been banging my head against this for hours, now.
06:12 < beeant-work> console.log
06:12 < sinclair-work> elliottcable: that's nodejs for you
06:12 < ssafejava> elliottcable: are you using node-inspector?
06:13 < elliottcable> V8's profiler-data output doesn't seem to work with recent Node; nodetime.com won't drill-down to any actually important data beyond showing me something that I already know (99% of my script's time is spent within a central reactor function, the only function it will show me)
06:13 < elliottcable> ssafejava ⑊ nope. Wasn't aware that it included profiling functionality. Is that new?
06:13 < elliottcable> Google doesn't mention it for any searches regarding profiling.
06:16 < leichtgewicht> elliottcable: Does trace.gl work?
06:16 < elliottcable> again, something I've never heard of. Looking into node-inspector, I'll check that next.
06:16 < elliottcable> Thanks for all the replies! <3
06:17 < elliottcable> amagee ⑊ you still here?
06:17 < leichtgewicht> Its not a profiler per se but very detailed. might give you some hints.
06:19 < ssafejava> @elliottcable AFAIK it has experimental profiling but I've never gotten it to work. But it's a 1000% better way to debug code
06:19 < amagee> elliottcable: yup
06:26 < elliottcable> amagee ⑊ ↑
06:27 < elliottcable> amagee ⑊ trying node-profiler now. Maybe that'll work.
06:27 < ChrisPartridge> elliottcable: just run node --prof some.js - then try this on the log https://github.com/sidorares/node-tick 
06:27 < elliottcable> ahhhhhhhh excellent
06:27 < elliottcable> that looks almost exactly what I need
06:28 < amagee> elliottcable: i have tried that, my problem was that the v8.log file didn't have the javascript data i was expecting
06:42 < elliottcable> hmmmm
06:44 < ChrisPartridge> elliottcable: any luck?
06:44 < elliottcable> getting there, I think
06:44 < elliottcable> still got a hell of a lot of nonsense in there
06:45 < elliottcable> but combining node-profiler (to disable profiling until *my* code starts, so there isn't a bunch of V8 and Node shit in there), and the project you linked,
06:45 < elliottcable> I think I'll get it working (=
06:47 < beeant-work> i heard v9 will be released soon
06:49 < linuxos> i am using util.inspect(obj) but nothing is showing up .. i have no clue on why that is
06:49 < elliottcable> linuxos ⑊ wrap it in `console.log( ... )`
06:50 < elliottcable> inspect just returns a string; you need to print that string to the terminal yourself.
06:52 < lpin> crypto.pbkdf2(password, salt, iterations, keylen, callback) is salt a string or a buffer?
06:52 < linuxos> elliottcable: thanks
06:59 < ChrisPartridge> lpin: buffer, afaik
07:00 < LegCow> so a lot of the node libraries are calls to lower level language functions, right?
07:00 < lpin> ChrisPartridge actually is a string https://github.com/joyent/node/blob/master/lib/crypto.js#L561
07:00 < LegCow> as fast as node is, i doubt it'd have much fun running crypto functions natively
07:01 < ChrisPartridge> lpin: i was looking in crypto.cc - where it was checking if it was a buffer :)
07:02 < lpin> ChrisPartridge ok :)
07:03 < matjas> what’s the easiest way to check if all npm dependencies specified in package.json are up to date?
07:03 < matjas> (programmatically, that is, not by using a service like gemnasium)
07:04 < leichtgewicht> I do not know about 'check'ing but npm update updates all packages to the latest version.
07:05 < leichtgewicht> and 'npm outdated' will check if any of the packages is outdated.
07:06 < matjas> leichtgewicht: thanks, `npm outdated` is good enough for me
07:06 < px> is there a way for outdated to only check top level packages
07:07 < matjas> px: only if you list the top level packages yourself, e.g. `npm outdated foo bar`
07:10 < matjas> is there any way to automatically update `package.json` so it includes the new package versions after doing an `npm update`?
07:11 < px> someone should make a tool like that to do package.json maintenance
07:11 < matjas> px +9001
07:14 < ssafejava> matjas: A bit more manual, but you can do npm outdated to figure out what you need to upgrade, then add --save, e.g. `npm install express@3.0.6 --save`
07:19 < matjas> ssafejava: i wish `npm update --save` would work
07:22 < ssafejava> yeah. you could script the output of npm outdated but IMO it's risky - I have been burned by updating NPM packages many times, there are more than a few package authors that don't understand semantic versioning
07:23 < ChrisPartridge> ain't that the truth
07:39 < [AD]Turbo> hi there
07:50 < matjas> px, ssafejava, ChrisPartridge: filed https://github.com/isaacs/npm/issues/3417 
07:55 < aMoniker> Is there an elegant way to keep an infinite chain of promises running?
07:58 < aMoniker> Without say, running out of memor.
07:58 < aMoniker> memory*
07:58 < leichtgewicht> aMoniker what would stop them?
07:59 < aMoniker> leichtgewicht: nothing, it might be an ongoing chain
07:59 < aMoniker> but old parts of the chain don't need to exist anymore
08:02 < greelgorke> aMoniker: nullify all references to the old promises and let them gc'ed
08:03 < leichtgewicht> Yes. but I think aMoniker was asking for a elegant way ...
08:04 < leichtgewicht> aMoniker: how a bout you open a gist?
08:04 < aMoniker> that could work too, I'll just need to restructure a bit
08:04 < aMoniker> leichtgewicht: it's a pretty messy one-off script I just threw together
08:04 < greelgorke> a chain of promises sounds not that elegant to me anyway ;)
08:05 < aMoniker> greelgorke: then what, a chain of callbacks?
08:05 < leichtgewicht> aMoniker: I assume you want to constantly pull data?
08:05 < aMoniker> leichtgewicht: pulling a series of data, which might be very long
08:05 < greelgorke> hey, i don't try to start a flamewar here. i don't care what your chain is made of. a chain itself smells to me
08:06 < aMoniker> greelgorke: well, what would replace promises?
08:06 < greelgorke> it depends on your data and how you have to handle it
08:06 < leichtgewicht> aMoniker: I think it works best by example -> gist
08:06 < aMoniker> greelgorke: say it's a variable-length list of async operation whose order matters
08:07 < leichtgewicht> aMoniker: And if you have a lot of data to load: parallel loading might be making things faster.
08:07 < aMoniker> greelgorke: and lets say that each operation might be composed of a variable amount of async calls, which also must be done in order
08:08 < leichtgewicht> aMoniker: Does the order of the collected data matter or the order of the requests?
08:08 < aMoniker> leichtgewicht: order of the requests
08:08 < leichtgewicht> Sounds like Twitter timeline reading ;)
08:08 < aMoniker> not quite
08:09 < leichtgewicht> But it would work as an example.
08:09 < leichtgewicht> As you always have to take the "nextRequest" token from the former request.
08:09 < aMoniker> well, what about the abstract example?
08:09 < aMoniker> sure
08:09 < aMoniker> that works
08:09 < T-Co_> NodeJS doesn't ship openssl with any CA bundles... Where and how would I install CA bundles on OS X?
08:10 < greelgorke> aMoniker: i guess an example would be more helpful :)
08:11 < leichtgewicht> I usually prepare to scopes of data: one that deals with the result and initialisation and one that deals with the loading of the part.
08:11 < leichtgewicht> as soon as the loading of one is done I toss (null reference) the loading part and thus be sure that it doesn't do anything anymore.
08:11 < leichtgewicht> and continue working.
08:12 < greelgorke> till now it sounds like combining and piping streams to me 
08:12 < leichtgewicht> greelgorke: I assume some processing (in horrible case: xml) is inbetween.
08:13 < greelgorke> transform streams are good in processing
08:13 < greelgorke> but it's sticking in the dark without a proper example
08:22 < aMoniker> yeah, for this I only threw together something as quickly as possible
08:22 < aMoniker> since it only needs to work once
08:23 < aMoniker> it's likely that I could have built something nicer if it ran the requests in parallel
08:25 < Fuzzyma> Did anyone here figure out how to use the express.bodyParser({defer:true})-Property in a good way?
08:26 < Fuzzyma> When I pass the defer-property the parser just ignores all forms of enctype=multipart
08:26 < greelgorke> what do you mean ignores?
08:26 < Fuzzyma> But what I want is access to the progress-Event while the bodyParser just do his job
08:26 < Fuzzyma> the body-Object is empty
08:26 < greelgorke> thats by default
08:27 < Fuzzyma> instead of filled with all the stuff of the form
08:27 < Fuzzyma> that destroys me all authetification checks and forgery-stuff
08:27 < Fuzzyma> is there any workarounf for this?
08:30 < greelgorke> you could attach end-event listener on req.form and proceed there with the req.body. haven't tested
08:32 < Fuzzyma> mh, worth a try - but difficult to handle (i use compoundjs and the authentification stuff is made throug)
08:32 < Fuzzyma> (sry press enter to early...)
08:33 < greelgorke> it's not really difficult. if you attaching  to progress event, you could in the same scope attach to the end event
08:33 < Fuzzyma> jeah
08:33 < greelgorke> and proceed when it's done.
08:33 < Fuzzyma> but at the Time I attach something to the progress-event the other... moment - thinking-failure -.-
08:35 < Fuzzyma> mh - i have no Idea at which position of my Code I have to attach these events - i think I will do a before-function used in compoundjs to attach these events if the form is multipart
08:36 < thealphanerd> has anyone done much work with asm.js?
08:37 < Fuzzyma> will try that - thank you!
08:38 < greelgorke> before filter should be just fine, attach the events there and call compounds next function in the end-handler
08:40 < Fuzzyma> yes - thats what I want to do
08:45 < romenov> hi .. I need to upload multiple files, so I created a module that contains an upload function (that will upload, rename and store my file and return the filename), and I'm calling this in my route file for each file upload field. However, when I add some console logs the return value in my route file is always undefined, but the console log in the module always gives me the correct file. I tried wrapping with async js (parallel &ser
08:47 < greelgorke_ttw> romenov: ghist or it never happend
08:52 < romenov> greelgorke_ttw: sorry ! :) https://gist.github.com/anonymous/9c82a8085e2cbe04ab8a
08:53 < Fuzzyma> greelgorke - ok, I can access the form over req.form in the before-handler. But if I only attach the events and call next in the end-eventm the bodyParser wont do his job anyway (cause hes disabled for multipart). How I can use bodyParser manually here? (i want the access to req.body and req.files as always after this filter)
09:01 < greelgorke_ttw> romenov: rename is async function, so return value of your upload functions is undefined.i commented on the ghist
09:01 < greelgorke_ttw> Fuzzyma: you should post a ghist, so we can talk better about it
09:02 < romenov> oooooooh tx greelgorke_ttw ! my hero :)
09:03 < greelgorke_ttw> romenov: test first, i havent tried it :D
09:03 < romenov> ok, implementing .. looks good in any case :p 
09:05 < greelgorke_ttw> i edited the comment, forgot to add callback param in upload_file
09:05 < Fuzzyma> greelgorke_ttw - for any reason the body is Parsed when i call next() in the end-event - cool. So my previous post was rubbish. It works well with your solution. Thank you so much!!
09:05 < romenov> haha yeah I noticed, was throwing an error in my face about that :p
09:06 < romenov> works like a charm greelgorke_ttw , many thanks !
09:07 < greelgorke_ttw> Fuzzyma: no problem. the reason is, that it's a chain of async handlers and the chain proceeds only if you call next. so as long you havent called next in your before filter the chain just wait
09:08 < greelgorke_ttw> Fuzzyma: this way the chain waits till multipart middlware has finished it's work
09:08 < Fuzzyma> yes - but when I called only next without binding any event it didnt parse the form. Thats why I wonderd
09:08 < greelgorke_ttw> because you called next without waiting for end
09:09 < Fuzzyma> oh - yes - lol^^
09:09 < Fuzzyma> now i have to figure out why the PUT-Request is handled as POST - PUT is realized through a hidden formparameter method="POST" but the router seems to ignore that now...
09:09 < Fuzzyma> *method="PUT"
09:10 < greelgorke_ttw> it's because your method override middleware is processed before the bodyparser is done
09:11 < greelgorke_ttw> you have to postprone this (and all other middlwares relying on bodyparser) till your progress is done
09:11 < greelgorke_ttw> it might be a good idea to handle the progress as express middlware instead of before filter
09:12 < Fuzzyma> mh - I never implemented middleware by myself - how is that done?
09:14 < greelgorke_ttw> it's pretty much the same as before filter. a middleware is a function that takes req, res and next, does something and calls next (or respondes the request)
09:14 < greelgorke_ttw> just take a look here http://www.senchalabs.org/connect/
09:14 < greelgorke_ttw> there several examples of middlewares
09:14 < greelgorke_ttw> +are
09:14 < Fuzzyma> okay - thx
09:31 < Fuzzyma> greelgorke_ttw - my middleware is called after the whole request is done. 
09:31 < Fuzzyma> https://gist.github.com/Fuzzyma/0d91e835cb4cf4729246
09:32 < greelgorke_ttw> i doubt that
09:33 < greelgorke_ttw> with this setup your middleware is called before anything happens. is your before filter still there?
09:33 < Fuzzyma> yes - but its empty just calling next()
09:34 < greelgorke_ttw> put the body parser before your middlware
09:34 < greelgorke_ttw> the order of use calles matters
09:38 < Fuzzyma> greelgorke_ttw - i added 2 comments. One without changing the order and the second with bodyParser before my middleware. You cant even see the console.log - wired...
09:39 < Fuzzyma> The thing is - maaan - lol
09:39 < Fuzzyma> its kidding me
09:39 < Fuzzyma> its called at the very first
09:39 < Fuzzyma> the console log looks like it remains to the old requst
09:40 < Fuzzyma> but it doesnt
09:41 < Fuzzyma> it appears below the last line from the old request but only when a new requst comes in^^
09:41 < greelgorke_ttw> the middleware logs don't use the compuond logger
09:42 < Fuzzyma> ok - the middleware seems to work
09:42 < Fuzzyma> but i still get the POST-request instead the PUT-request
09:43 < greelgorke_ttw> where is the methodOverride middleware?
09:43 < Fuzzyma> after my middleware
09:44 < greelgorke_ttw> please update your ghist :)
09:45 < Fuzzyma> done :)
09:45 < serapath> hi
09:48 < Fuzzyma> greelgorke_ttw - it works now. Dont know why. Maybe I forget to restart my server
09:48 < Fuzzyma> but it worked!!
09:49 < greelgorke_ttw> restarting is allways good, even if it feels microsofty :P
09:49 < Fuzzyma> I rly do this very very often
09:49 < Fuzzyma> after every change
09:49 < Fuzzyma> dont know why I missed it here
09:49 < greelgorke_ttw> glad i could help
09:49 < Fuzzyma> Really - Thank you!!
09:50 < Fuzzyma> Now I can answer my own question on stackoverflow :D
09:52 < greelgorke_ttw> Fuzzyma: this are the best answers
09:52 < geekie> It seems like node.js does not resolve local domainnames specified in the hosts file (like example.dev) but it just... seems SO odd, can this be a true assumption? I am completely lost.
09:56 < sandfox> Fuzzyma: thats why things like can nodemon and supervisor save you lots of time
09:57 < beeant-work> how about fujitsu forever
09:58 < beeant-work> nodejitsu forever
09:58 < beeant-work> mistake
09:58 < Soarez> lol
09:58 < greelgorke_ttw> forever works too, but it has other purpose
09:59 < greelgorke_ttw> it's more for the other side:keeping things alive, instead of killing them on change
09:59 < greelgorke_ttw> thats why watch is optional flag in forever, for nodemon it's the main function
10:00 < Fuzzyma> sandfox - I just start my node-experiences. I always like to get tips. I will google nodemon and supervisor^^
10:01  * greelgorke_ttw loves his nodemon
10:01 < sandfox> Fuzzyma: tl:dr they both monitor your project directory and restart node when they see changes
10:01 < Fuzzyma> ah, very cool
10:01 < Fuzzyma> the thing is: I have to login every time new when the server restarts
10:01 < nfour> wait so with forever you can monitor ur project for file changes and have it auto restart the process?
10:01 < Fuzzyma> and lots of changes (on design and so on) dont need the restart
10:01 < sandfox> Fuzzyma: use a persistent session storage like leveldb
10:02 < nfour> if so that would be sexy for development
10:02 < greelgorke_ttw> and you can specify which sub dirs to watch, which is very handy when you are using auto-compiling assets
10:02 < greelgorke_ttw> nfour check the -w flag in forever
10:02 < sandfox> forever is such a load of balls, it doesn't keep anything alive
10:03 < nfour> thanks, will do, and yeah I do compile assets so i may be picky with subfolder
10:03 < greelgorke_ttw> nfour: but for development i prefer nodemon
10:03 < nfour> will look into it.
10:03 < petecoop> I use nodemon too
10:04 < greelgorke_ttw> the subfolders is for the nodemon
10:04 < petecoop> but recently grunt with connect and regarde
10:04 < nfour> heh, the first sentance on git repo is "For use during development of a node.js based application. "
10:04 < greelgorke_ttw> which repo?
10:05 < sambarino> lol
10:05 < sambarino> if anyone else is from south africa you can get free pizza :) http://www.microsoft.com/southafrica/ie10/ user agent string switching works
10:06 < nfour> https://github.com/remy/nodemon
10:06 < greelgorke_ttw> ah, yes
10:06 < nfour> oh cool, you can ignore with wildcards. Id ignore .css, .js, .coffee etc.
10:06 < nfour> well, not .js
10:06 < nfour> and .coffee. thats kinda pointless
10:06 < greelgorke_ttw> why?
10:07 < greelgorke_ttw> you in node, js is what you changing all the time :D
10:07 < nfour> well, we build in js and coffee dont we, not just static assets
10:07 < nfour> exactly
10:07 < nfour> derp
10:08 < greelgorke_ttw> you can exclude folders, i.e. i usualy exclude the folder whe the asset builder put it's products
10:08 < greelgorke_ttw> os it doesnt reconnect all the time
10:08 < nfour> indeed
10:08 < fabiosantoscode> Hey. Has anyone tried this out? https://npmjs.org/package/socket.io-rpc
10:09 < fabiosantoscode> It seems awesome for my new appjs application, but I'm unsure if exceptions go over the wire using this lib. Does anyone know if they do?
10:11 < greelgorke_ttw> fabiosantoscode: lib seems not very popular. i think it's best you contact the maintainer on gh
10:11 < Fuzzyma> mh - i usually start my server with 'compound server 8888'
10:11 < Fuzzyma> is this then nodemon compound server 8888? - I dont think so :(
10:12 < fabiosantoscode> greelgorke_ttw: good idea. I will, thanks
10:12 < Fuzzyma> ah, i see - the --exec param - cool :)
10:16 < rvagg> guys, this is the best keep-your-app alive app: http://npm.im/jesus
10:16 < rvagg> nice and lightweight and works beautifully
10:16 < zomg> lol, nice name
10:17 < LegCow> nailed it ;D
10:19 < greelgorke_ttw> there is also mon (and mongroup) but they are not in node :D
10:20  * greelgorke_ttw has idea: contribute to repos in the way, that gh contributions chart displays "Node.js"
10:20 < rvagg> it's worth coupling a couple of these together, an ideal combination is something like upstart (native) and jesus (node), or mon (non-node) if you must, to keep your apps up
10:20 <@Nexxy> RUN THEM ALL
10:20 <@Nexxy> in succession!
10:20 <@Nexxy> just to be sure
10:20 < SomeoneWeird> and make them all monitor eachother
10:20 < SomeoneWeird> just to be sure
10:21 < rvagg> it'd be ideal if they could yell at each other in syslog occasionally too
10:22 < greelgorke_ttw> currently we have upstart for starting the main master and internaly we use up for maintaining workers
10:22 < greelgorke_ttw> if you whant a restart on rebout you need something like upstart anyway
10:22 < greelgorke_ttw> reboot*
10:26 < sandfox> what rvagg said.
12:01 < Guest75639> hi
12:01 < Guest75639> hi sny one can help me in scraping data from shopping website ?
12:05 < Venemo> hey guys
12:05 < Venemo> can someone help me with this? http://stackoverflow.com/questions/16407158/in-a-native-node-module-how-can-i-make-sure-that-my-async-code-is-always-runnin
12:07 < cgiffard> Guest75639 you could try running my library simplecrawler and a mangling library like cheerio
12:17 < MrdiWrk> hi
12:23 < ak5> hey guys, can I use node.js to execute javascript from <script> tags inside scraped pages?
12:24 < greelgorke_ttw> ak5: probably. you'll have to mock browser globals etc. but it's possible
12:31 < adrivanrex__> Hello :D
12:31 < sandfox> have a look at using vm.* stuff
12:31 < sandfox> can give you a brand new context for executing your javascript which you set-up to your pleasing
12:32 < M2Ys4U> There's always jsdom if the page script interacts with the host DOM https://github.com/tmpvar/jsdom
12:46 < adrivanrex_> anyone interested with nodejs open source CMS?
12:54 < ak5> phantom.js is pretty much what I was looking for 
12:56 < curvedmark> is it possible to make npm work like this: when install from github, run a script after installation, but run no scripts if install from the registry. that way, compiled files don't need to be committed into the repo, but the repo is still a valid package.
12:59 < curvedmark> the only way i can think of is to swap out the package.json file using a prepublish script, and then reverse it back in a postpublish script. pretty ugly though.
13:00 < greelgorke_ttw> why not making both versions act the same?
13:04 < curvedmark> greelgorke_ttw, acting the same means the compiled files need to be committed into the repo
13:04 < curvedmark> greelgorke_ttw, compiled coffeescripts, compiled html templates, things like that
13:05 < greelgorke_ttw> nope, you could just add a install hook
13:05 < curvedmark> when install from the registry, using the install hook is discouraged by the npm doc
13:06 < curvedmark> and I agree with it
13:08 < greelgorke_ttw> sure
13:09 < greelgorke_ttw> you could run a compilation step when your package is firste required
13:09 < greelgorke_ttw> so moving this away from npm to the runtime
13:10 < curvedmark> i'm not sure about that, sounds more inefficient than the install hook. 
13:11 < greelgorke_ttw> it adds compilation effort once on startup. i.e. most asset middleware for connect works this way, also many template engines
13:12 < LegCow> i refuse to put the var comma's at the start of new lines!
13:12 < greelgorke_ttw> LegCow: don't do that then, noone cares
13:13 < LegCow> :)
13:14 < curvedmark> yeah, it may work with servers, but what i'm talking about is general npm packages.
13:14 < greelgorke_ttw> i like my commas first, but sometimes i prefer single var statements
13:15 < LegCow> just doesn't look all that neat to me, but my codes ugly anyhow
13:15 < greelgorke_ttw> curvedmark: where is the difference? your package has an entry point
13:15 < curvedmark> isn't comma first hard to debug? you can't seem to set a break point at var statements preceded with a comma
13:16 < greelgorke_ttw> why shoud you ever set a breakpoint on a var statement? :D
13:16 < curvedmark> because the initial value might be a function return value 
13:16 < greelgorke_ttw> then set your point in the function, cause this is the place where action goes
13:17 < curvedmark> then you need to find the function definition first
13:18 < greelgorke_ttw> when this is a problem, then you're in doubt anyway.
13:19 < greelgorke_ttw> feels wrong to me to change a coding style just to make a tool work. should be other way
13:20 < curvedmark> i actually thing multiple var is a better coding style, because if you need to indent, you have to indent two levels with a comma first style
13:20 < curvedmark> *think
13:21 < LegCow> i don't think it makes a difference in terms of performance. i'd rather just have things look neat
13:21 < LegCow> i tend to use a var for each item in node. maybe not client js
13:22 < greelgorke_ttw> i use single vars for imports, one var + comma first for variables, that are not require()d. matter of taste
13:39 < leichtgewicht> Hmm, just found: https://github.com/pksunkara/npm-police ... sounds useful.
13:43 < greelgorke_ttw> leichtgewicht: there is also https://gemnasium.com/
13:46 < leichtgewicht> Its not for free??? Evil!
13:46 < leichtgewicht> *fg*
13:47 < greelgorke_ttw> it is free for public repos
13:47 < leichtgewicht> Thought of it more as a joke. Its alright to be a paid service. I was wondering if other things are around too...
13:47 < greelgorke_ttw> they only charge for inspecting private repos
13:48 < greelgorke_ttw> as github does :D
13:48 < leichtgewicht> Searching for tools around npm and package.json
14:07 < standoo1> hello
14:08 < standoo1> ls
14:11 < leichtgewicht> hallo
14:11 < mAritz> .
14:11 < mAritz> ..
14:15 < timmywil> Domenic_: ping
14:19 < mAritz> timmywil: Timeout.
14:19 < standoo1> hello
14:19 < mAritz> hello
14:19 < timmywil> mAritz: thanks, I'm emailing him
14:19 < mAritz> ;D
14:19 < standoo1> i'm using irssi to chat
14:20 < mAritz> good for you, i guess?!
14:20 < teadict> Does Geddy already include SQL adapter(s) in its models?
14:20 < standoo1> seems difficult to use
14:21 < mAritz> #irssi can probably help you
14:21 < standoo1> thanks
14:23 < mAritz> tjholowaychuk: just out of curiosity: what's your stance on multiple jade templates in one file? because i really don't like having dozens and dozens of files :D
14:24 < teadict> Geddy models are already an ORM? ^.-
14:24 < teadict> mk
14:32 < beeant> what do you think about randy.js
14:35 < beeant> >> _.shuffle([1,2,3]);
14:35 < purr> beeant: ReferenceError: _ is not defined
14:35 < beeant> >> var _ = require("underscore");
14:35 < purr> beeant: ReferenceError: require is not defined
14:35 < beeant> >> _.shuffle([1,2,3]);
14:35 < purr> beeant: ReferenceError: _ is not defined
14:35 < geNAZt> it is not nodejs !
14:36 < greelgorke_ttw> >> 1+2
14:36 < purr> greelgorke_ttw: (number) 3
14:36 < greelgorke_ttw> amazing...
14:43 < zapu> >> undefined = true
14:43 < purr> zapu: (boolean) true
14:43 < zapu> there you have it, its forever broken now
14:43 < geNAZt> undefined
14:43 < geNAZt> >> undefined
14:43 < purr> geNAZt: undefined
14:43 < geNAZt> its not
14:43 < zapu> i was joking
14:44 < greelgorke_ttw> >> typeof undefined
14:44 < purr> greelgorke_ttw: (string) 'undefined'
14:44 < greelgorke_ttw> :D
14:45 < geNAZt> >> var end = Date.now() + 1000; var counter = 0; while(end > Date.now()) counter++; counter; 
14:45 < purr> geNAZt: (number) 1247972
14:52 < beeant> is there anyway to get isAuthenticated() user data in passportjs other than from req?
14:52 < Domenic_> timmywil: replied
14:52 < timmywil> Domenic_: thanks!
14:52 < beeant> i have function outside from router that needs that 
14:54 < greelgorke_ttw> beeant: if you are using persistent sessions you could just look up in the database
14:55 < timmywil> Domenic_: wait, I don't see it. you replied by email or on the ticket?
14:56 < Domenic_> timmywil: on the ticket I thought
14:56 < Domenic_> maybe it captcha'ed me
14:57 < timmywil> yea, our trac can be a pain sometimes
14:57 < Domenic_> timmywil: ah yes it did. submitted now.
14:57 <@isaacbw> http://mailman.nginx.org/pipermail/nginx-announce/2013/000112.html
14:57 < timmywil> cool, I see it now. thanks
15:01 < kenperkins> what's the prevailing opinion of pause-stream vs morestreams Buffered Stream?
15:02 < beeant> greelgorke_ttw thank you
15:02 < beeant> ya session
15:03 < kenperkins> Domenic_ == dominictarr?
15:03 < kenperkins> i'd wager not from spelling diffs :D
15:03 < leichtgewicht> I am searching for a npm cheat sheet. You know: that kind of .pdf that you can print out to use the wall space beside your screen.
15:03 < leichtgewicht> Can it be that I would be the first one to attempt this?
15:04 < greelgorke_ttw> like that? http://blog.nodejitsu.com/npm-cheatsheet
15:05 < leichtgewicht> Can you print that out?
15:05 < mAritz> i can. would you like me to mail it to you?
15:06 < leichtgewicht> Okay - question not well shaped - It doesn't look reasonable printed out.
15:06 < mAritz> I know, I just love answering stupidly like that. ;D
15:07 < leichtgewicht> Aight!
15:07 < leichtgewicht> So, non print ready yet...
15:09 < alfonsodev> in fs.read   the first argument is fd, "Read data from the file specified by fd "  what does it means,   it's a string containing the file path?
15:10 < geNAZt> leichtgewicht, http://downloads.gosquared.com/help_sheets/11/Node%20Help%20Sheet.pdf
15:11 < geNAZt> alfonsodev, not its the fd number out of fs.open
15:11 < geNAZt> no*
15:11 < alfonsodev> ok I see, its the second argument in the callback
15:11 < alfonsodev> thanks
15:11 < leichtgewicht> geNAZt that is a nice thing but the npm help is a little thin :)
15:12 < geNAZt> npm != nodejs :D
15:13 < leichtgewicht> true ;)
15:13 < geNAZt> but npm inst that hard
15:13 < geNAZt> in most cases you only need npm install
15:13 < geNAZt> :D
15:17 < geNAZt> does anyone know a module for securing js sources ?
15:18 < beeant> is there anyway to access the session in some module?
15:18 < geNAZt> beeant, req.session ?
15:18 < beeant> ya im having problem with passport req
15:18 < beeant> do I have to save them in db?
15:18 < geNAZt> well whats the problem ?
15:18 < geNAZt> hell no :D
15:18 < beeant> to preserve login after i restart the server?
15:19 < geNAZt> in that case yes
15:19 < geNAZt> well most of noders use redis for this
15:19 < beeant> i need to preserve the login
15:19 < beeant> so no matter what i gotta save them
15:20 < geNAZt> well redis :D
15:20 < beeant> so save them to redis when it passes through deserialize?
15:20 < geNAZt> no there is a express sessionstorage plugin for redis stores
15:20 < beeant> and then when i need to access isAuthenticated() in the middle of nowhere, i can just access the redis?
15:20 < geNAZt> so it gets handled via expressjs
15:21 < beeant> oh
15:21 < beeant> that should be nice
15:21 < geNAZt> no you never must access redis
15:21 < geNAZt> expressjs does this
15:21 < geNAZt> you only need to install redis
15:21 < beeant> ya i have redis
15:21 < geNAZt> and the redis storage for expressjs
15:21 < beeant> installed
15:21 < geNAZt> and everything is done
15:21 < leichtgewicht> geNAZt npm init ... super helpful
15:22 < beeant> and then how can i access it
15:22 < leichtgewicht> npm shrinkwrap ... didn't know it can do that
15:22 < beeant> in the middle of nowhere
15:22 < geNAZt> init ? what does it do ?
15:22 < leichtgewicht> npm start / test ... and more things
15:22 < beeant> i have to problems, preserving login, and accessing the req.user/req.isAuthenticated() in the middle of nowhere
15:22 < leichtgewicht> npm adduser ... uh my knowledge fades
15:23 < leichtgewicht> npm ls/ll/list/ ... which is?
15:23 < leichtgewicht> npm publish ...
15:23 < mAritz> npm outdated
15:23 < leichtgewicht> I am sure that any aspiring young new substack wants to get this stuff ....
15:23 < leichtgewicht> after all there is a npm substack call...
15:23 < geNAZt> beeant, where is the middle of nowhere ?
15:24 < beeant> i cannot find npm module for express sessionstorage plugin only mongo
15:24 < beeant> like in the models
15:24 < geNAZt> https://github.com/visionmedia/connect-redis
15:24 < beeant> i dont have access to req in model
15:24 < geNAZt> then give it into it ?
15:24 < geNAZt> also why does a model need the req oO
15:25 < beeant> because it will give different data
15:25 < beeant> depending on the login
15:26 < geNAZt> well why not creating a parameter named loggedIn ?
15:26 < beeant> to pass via the function?
15:26 < beeant> it will look ugly
15:27 < beeant> function(param1, param2, loggedIn)
15:27 < beeant> its not cool
15:27 < geNAZt> well passing around anything isnt cool either
15:27 < beeant> ya thats what i hate
15:27 < beeant> in node everything needs to be passed around :(
15:28 < beeant> no global
15:28 < geNAZt> well in php it isnt very different
15:28 < geNAZt> :D
15:28 < geNAZt> you can use global
15:28 < geNAZt> but it is not wise
15:28 < beeant> in php is not that many passing around
15:29 < alfonsodev> in symfony (php) you usuaally do  $req = Request::createFromGlobals()
15:29 < geNAZt> because it has much globals
15:29 < beeant> i never use symfony
15:29 < beeant> but in laravel
15:29 < beeant> it is done pretty nicely
15:29 < geNAZt> in js you could build the same using globals
15:29 < beeant> i have access to all namespaces
15:29 < beeant> but it is a bad practice
15:29 < geNAZt> yes
15:30 < beeant> i dont know the other reason other than conflicting module
15:30 < alfonsodev> in the example of symfony , you first have to    declare that you want to use the Request namespace
15:30 < geNAZt> well 
15:30 < geNAZt> do you know who changes the globals ?
15:30 < alfonsodev> and then you can create from globals
15:30 < beeant> who?
15:31 < geNAZt> yes
15:31 < geNAZt> the global can be changed in moduleA.js
15:31 < geNAZt> and in moduleB.js
15:31 < geNAZt> and in externalC.js
15:31 < geNAZt> and you dont know anything from it
15:32 < beeant> so the best solution is to pass around
15:32 < beeant> like playing basketball
15:32 < alfonsodev> yes, but the request is read only always if I'm not wrong
15:32 < geNAZt> no
15:32 < alfonsodev> right?
15:32 < geNAZt> why do you pass around controller things into the model layer ?
15:32 < geNAZt> there is no "read-only" in js
15:33 < geNAZt> since you dont freeze objects
15:33 < alfonsodev> ye I know, I mean in practice
15:33 < alfonsodev> but you are right
15:33 < beeant> so maybe i have to make better structure for my app
15:33 < geNAZt> well give the model function the parameters it needs to get the data
15:33 < geNAZt> nothing more nothing less
15:34 < beeant> i have so many function in the core things in my app
15:34 < beeant> i dont have controller in my app
15:34 < beeant> only routes
15:34 < beeant> is this ok?
15:34 < geNAZt> well expressjs routes => controllers
15:35 < beeant> oh
15:35 < beeant> thats what i thought
15:35 < beeant> i have so many auth checks
15:35 < dukedave> What's a nice way to get the path to a file inside node_modules, in this case I'd like to some test data which comes with a module: https://github.com/mattbornski/tzwhere/blob/master/lib/fake_tz_world.json
15:35 < geNAZt> then you are doing something wrong :D
15:36 < dukedave> (hard coding to 'node_modules/tzwhere/...' feel a bit wrong
15:36 < beeant> ok ill restructure this php and then port again
15:37 < geNAZt> well you need a clear line between what is controller what is model and what is view
15:37 < geNAZt> if you mix them up its hard to extend
15:37 < geNAZt> and hard to puut over another interface like apis or multiple templates
15:40 < beeant> ya i kind of mix things up model and controller
15:40 < beeant> because i dont really understand the exact difference
15:40 < beeant> i only know model is to get data
15:40 < beeant> and process data
15:40 < beeant> than what does controller do?
15:40 < geNAZt> controller handles anything that has todo with request or response processing
15:40 < geNAZt> like getting data out of the request
15:41 < geNAZt> deciding what data you need for this request
15:41 < geNAZt> models only are there to get the data you need from a database
15:41 < geNAZt> or from an api
15:41 < beeant> how about processing the data
15:41 < beeant> my data processing requires req.user
15:41 < geNAZt> well i dont think so
15:42 < beeant> after you get the date from the database in model
15:42 < beeant> sometimes you need to process the data /or crunch the data
15:42 < beeant> where does this process go?
15:42 < beeant> model/cont?
15:42 < geNAZt> cont
15:42 < beeant> oh
15:42 < geNAZt> he dcides what data he needs
15:42 < beeant> and process it
15:42 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:42 < beeant> and then send it
15:42 < beeant> ?
15:42 < geNAZt> the model is "only" get/set data
15:43 <@isaacbw> mostly controller just sounds cool
15:43 < geNAZt> well the view processed it
15:43 < beeant> ya i need to set that data
15:43 < geNAZt> do built html out of it
15:44 < beeant> what if i want to build a mobile version using the existing codes?
15:44 < beeant> i was thinking to have separate router
15:44 < beeant> and just access the date from the model
15:44 < geNAZt> you dont need to
15:45 < beeant> so the data processing needs to be done in model
15:45 < beeant> if i have to use that way
15:45 < geNAZt> no
15:46 < beeant> or should i need another folder called api where all the data crunching done in there?
15:46 < geNAZt> why dont you let the controller decide which view he renders
15:46 < beeant> i got that suggestion a lot
15:46 < beeant> is that the best way?
15:46 < geNAZt> yes
15:47 < beeant> so make a wrapper like query
15:47 < beeant> to decide the which view
15:47 < geNAZt> why a wrapper ?
15:47 < beeant> a function
15:47 < geNAZt> yes but why ?
15:48 < beeant> like 
15:48 < beeant> function decideView() { if(mobile) { render mobile} else {render pc}
15:48 < beeant> and then 
15:48 < beeant> in the end of each router
15:48 < beeant> i can call decideView instead of the render function
15:48 < geNAZt> ah ok
15:49 < beeant> is that the best way?
15:49 < geNAZt> well i would write a middleware for that
15:49 < geNAZt> which sets a prefix for the mobile templates
15:50 < beeant> so it will automatically decide?
15:50 < beeant> i dont know how middleware works yet
15:50 < geNAZt> well middlewares are stacked up
15:50 < geNAZt> pushed together in an array
15:50 < geNAZt> on every request the request gets passed through the stack
15:50 < inspiron> during development for semver if you make a bug fix on a modules do you bump up the patch version?
15:51 < beeant> oh
15:52 < Domenic_> inspiron: yes, if you're going to release that version
15:52 < beeant> ok first ill restructure my code now, do the data crunching in routes
15:57 < doug> what's the standard way to tell if i'm in a development environment?
16:02 < beeant> what is the usual simple crypt module in node?
16:02 < beeant> or i can just use node crypt?
16:04 < inspiron> thanks
16:05 < inspiron> strange question: i'm using a testing library that isn't node.js. I have a node modules that has common configurations. I'd like to read that module's config .js file to use in my non node module. The config .js is wrapped in a node.exports. Any ideas?
16:06 < inspiron> read it in my code for using the testing library which can't use node.js
16:13 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:22 < kenperkins> mikeal: can you help me understand situations where request says i've "already piped to this stream"
16:26 < Fuzzyma> heyho :)
16:38 < inspiron> in development if you leave out  bumping the major version what do you do when you hit 0.9.9
16:39 <@TooTallNate> inspiron: version numbers generally aren't "decimal based"… so you could do 0.9.10, or 0.10.0, or 0.10.9 even
16:39 <@TooTallNate> note that a number with 2 decimal points doesn't make any sense either :)
16:41 < inspiron> k, thanks
16:41 < geNAZt> but how do you start a module version in semver ?
16:41 < geNAZt> 0.0.0 or 0.1.0 ?
16:43 < rvagg> 0.0.0
16:44 < rvagg> or 0.0.0-thisisjustthebeginning if you like
16:44 < geNAZt> so in 0.0.x you dont build any api ?
16:44 < rvagg> I'd release an 0.0.0 as something that's actually usable
16:45 < geNAZt> but then it isnt 0.0.0 ? it is 0.1.0 since you have an api that could break or not ?
16:45 < rvagg> here, read this: http://dominictarr.github.com/semver-ftw
16:46 < rvagg> I treat 0.0.0 as an initial version, and increment the minor version for each break, but, as you'll read, dominic prefers to use the major version more often
16:46 < dominictarr> owen1: monotonic-timestamp is timestame + n++ (effectively)
16:46 < dominictarr> it will not collide inside the same process.
16:46 < dominictarr> also checkout https://npm.im/flake
16:47 < geNAZt> well its right to increase the major on every breaking change
16:47 < rvagg> personally, as long as the minor version is incremented for each breaking change then I can use ~x.y.z in my dependencies list and I don't care too much about the rest, pragmatism ftw
16:47 < inspiron> do you always ommit bumping the major version while in development?
16:47 < geNAZt> well then how do you seperate bugfixed versions ?
16:47 < rvagg> patch version is for bugfixes
16:48 < geNAZt> well when does development end ? and production begin for a npm module ?
16:48 < rvagg> heh, never, keep your modules small and they are always in production! ... or development, depending on how you look at it
16:48 < geNAZt> rvagg, and when do you increase the major ?
16:49 < rvagg> geNAZt: when it feels right, if ever, semver for me is a dependency mechanism, '~' does the work I need and it cares about minor versions so that's mostly what I care about
16:50 < geNAZt> well
16:50 < rvagg> but! it's nearly 3am and I'm probably not at my peak form right now, so I'm off to bed, perhaps dominictarr can persuade you of his approach
16:50 < geNAZt> i dont like the increase minor for breaking change thing
16:50 < geNAZt> and also i dont like the patchnumber thing
16:50 < geNAZt> if so you must start with 0.0.0.0
16:53 < dominictarr> geNAZt: I agree with you
16:54 < dominictarr> thinking that 1.0.0 has a special meaning is "sentimental versioning"
16:54 < geNAZt> well i would start at a semver version 0.1.0
16:54 < geNAZt> since when you push something to npm you have something that could break or not ?
16:56 < kevinswiber> Bah.  I need to monkey patch the http module to score raw header names.  Before I publish this tiny bit of code as a new module, does anyone know of something like it that already exists? My NPM search has not been successful.
16:58 < Fuzzyma> Does anyone know how to ckeck whether a fileupload is granted and cancel it if not? To get the progress of the fileUpload i used defer: true in the bodyParser and then listen to the uploadprogress. But at this time i didnt know if the user who uploads the file is loged in. I could use the session but the session needs the cookie. If I load the cookie and session middleware before my middleware 
16:58 < Fuzzyma> which oberserves the upload I can access the session but the method-overiding does not work cause i have every piece of data 2 times in my request. Any Idea why this happens?
16:59 < dominictarr> geNAZt: If in doubt, start at 1.0.0
16:59 < dominictarr> you can start any where, as long as you increment properly.
16:59 < Fuzzyma> (my middlewaresetup looks like this: https://gist.github.com/Fuzzyma/0d91e835cb4cf4729246)
17:00 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:08 < owen1> dominictarr: thanks, i had some bugs with flake
17:09 < owen1> dominictarr: i guess if i have multiple processes, i'll have to store that n in redis or something
17:10 < dominictarr> if you have multiple processes and you really need a sort, just break the tie on the pid or something
17:10 < dominictarr> or the hash of the timestamp - much faster than doing io.
17:14 < owen1> dominictarr: nice! it's not for sorting, just for creating unique id in my system.
17:19 < dominictarr> owen1: in that case, just append some other unique value. having a service that gives you ordered timestamps is overkill
17:21 < owen1> dominictarr: monotonic-timestamp + process_id sounds good
17:23 < geNAZt> well isnt the pid unique ?
17:24 < owen1> geNAZt: i need unique id for each request to my http server. Date.now() by itself might be the same, even on the same process.
17:24 < geNAZt> ah per request
17:24 < owen1> so i use monotonic-timestamp + process id
17:25 < geNAZt> i am not sure if timestamps are unique identifier
17:25 < geNAZt> what happens if two requests come ine one ms ?
17:26 < Fuzzyma> You can glue it with a random number
17:26 < Fuzzyma> the chance that 2 requests come in in the same millisecond AND get the same random number is ... not much :D
17:27 < geNAZt> true
17:27 < geNAZt> but the calculation you need is much more
17:27 < jmw> Can anyone help me with a question about requests?
17:27 < dominictarr> geNAZt: that module checks if two timestamps were requested within one ms
17:28 < owen1> geNAZt: monotonic-timestamp suppose to solve that
17:28 < dominictarr> and adds a fraction so that they are ordered.
17:28 < jdelgado> Does anyone actually use the Error class?
17:28 < geNAZt> ah okay
17:28 < geNAZt> jdelgado, yes me
17:28 < jdelgado> geNAZt: Really? Why? I just throw, try catch
17:28 < geNAZt> yes i throw error objects around
17:29 < geNAZt> or pass them in callbacks
17:29 < jdelgado> geNAZt: Why would you use the Error object rather than just throwing a string?
17:29 < jmw> i use request to query reddit's json api, in the callback when i use JSON.parse i sometimes get SyntaxError: Unexpected end of input
17:30 < geNAZt> because strings have no stack trace
17:30 < geNAZt> and also so i can be safe that any error is an object
17:30 < geNAZt> and do not need to typecheck it
17:30 < jdelgado> geNAZt: Right on
17:32 < Fuzzyma>  Does anyone know how to ckeck whether a fileupload is granted and cancel it if not? To get the progress of the fileUpload i used defer: true in the bodyParser and then listen to the uploadprogress. But at this time i didnt know if the user who uploads the file is loged in. I could use the session but the session needs the cookie. If I load the cookie and session middleware before my middleware 
17:32 < Fuzzyma> which oberserves the upload I can access the session but the method-overiding does not work cause i have every piece of data 2 times in my request. Any Idea why this happens?^
17:40 < petrogad> I'm working with express, and have a client posting {"test":aaa"} to me however their content type is application/x-www-form-urlencode so it's coming in as { '{"test":"aaa"}': '' } Is there a way for me to parse this as json rather than how bodyParser is parsing it?
17:40 < geNAZt> petrogad: say the client it should send it as json mime type
17:41 < petrogad> while i 100% agree, android webviews are horse crap
17:41 < geNAZt> ah webviews
17:41 < geNAZt> you could parse the key of the object
17:42 < petrogad> req.body.{"test":"aaa"} o.O
17:42 < geNAZt> Object.keys(req.params).forEach(function(value) { json = JSON.parse(value); });
17:42 < petrogad> ahhh
17:42 < petrogad> that's a beautiful idea
17:42 < geNAZt> ah okay its body
17:43 < petrogad> yea i owe you a beer
17:44 < petrogad> note to self; pre-spending 3 hours come to node.js
17:44 < petrogad> thank you so much geNAZt
17:44 < geNAZt> well no problem :D
17:46 < zkirill> What text editors and/or IDE's do you guys use for developing node apps?
17:46 < geNAZt-laptop> well that depends on the os
17:47 < bajtos> zkirill: WebStorm by JetBrains
17:47 < geNAZt-laptop> under debian minimal i use nano, under windows and ubuntu i use webstorm
17:47 < geNAZt-laptop> and on the web i use nide
17:47 < pachet> vim!
17:47 < geNAZt-laptop> pffft vim
17:50 < geNAZt-laptop> has someone tried to secure his modules ?
17:51 < zkirill> I went from Sublime to Cloud9 to WebStorm and really liking WebStorm right now
17:51 < euoia> Has anyone made a #node.js FAQ? The question about IDEs comes up all the time
17:51 < draginx> https://gist.github.com/durango/f5dc76310d0be208dc5c#file-tw-js-L51 is there anyway to get TeamWorks to inherit Account as TeamWorks.Account ?
17:52 < geNAZt-laptop> euoia, well the IDE question is no general question
17:52 < geNAZt-laptop> the one works with this the other one with that
17:54 < zkirill> geNAZt-laptop: nide looks gorgeous, wish there was a mention of some kind of unit testing helper
17:57 < geNAZt-laptop> well nide isnt a full ide, i only use it for hotfixing some apps if i am on the way
17:57 < geNAZt-laptop> from my tablet or from a internet cafe
17:57 <@isaacbw> emacs 4 lyfe
17:57 < geNAZt-laptop> emacs ? is this 1980 ?
17:58 < geNAZt-laptop> one question about libuv, is it possible to spin up a second event loop ?
17:59 < SomeoneWeird> geNAZt-laptop, #libuv :P
18:01 < aleksandar> http://pastebin.com/SsVbxWrR <- Why is the clients["room"] returning []? Also when I emit to it doesn't get picked up by any clients
18:02 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:18 < aleksandar> fml. i forgot the stupid /!
18:20 < adrivanrex_> hey guys?
18:20 < geNAZt-laptop> hi
18:20 < adrivanrex_> hi I'm' developing this wordpress like NODEJS
18:20 < geNAZt-laptop> wordpress like nodejs ? oO
18:21 < adrivanrex_> http://49.145.79.212:8080/admin
18:21 < adrivanrex_> check it
18:21 < adrivanrex_> should I make it open source?
18:22 < sambarino> yes
18:22 < draginx> adrivanrex_: you mean like ghost?
18:22 < draginx> http://www.kickstarter.com/projects/johnonolan/ghost-just-a-blogging-platform
18:22 < adrivanrex_> yeah, I guess
18:23 < adrivanrex_> I've already built it.. so I think it's going out this week
18:23 < adrivanrex_> http://49.145.79.212:8080/admin
18:24 < draginx> *shrugs* ghost will win :P
18:24 < geNAZt-laptop> adrivanrex_, why is it so slow ?
18:24 < adrivanrex_> it's on my localhost
18:24 < adrivanrex_> do you have a VPS?
18:25 < adrivanrex_> so we can run it on your VPS?
18:25 < ManneW> Hi! I'm about to sketch up the design for a (spare time) project using Node. I want the server to be an API only, and use some client side framework, like AngularJS or similar, to communicate with the API and handle the GUI logic. But I also want the users to have the ability to log in using Twitter or Facebook. Therefore, I've been checking out Passport. Would it be possible to use the Facebook/Twitter providers from Passport for this, or
18:25 < ManneW>  do I need to use the "plain" OAuth(2.0) API alternatives? (I guess the "regular" providers relies on redirects, popup windows or similiar?). Or should I look for something specifically for my client side framework? :) Long entry and lots of questions. Any input appreciated! :)
18:25 < geNAZt-laptop> yes i have a vps
18:26 < geNAZt-laptop> but its only for testing and it is very unstable due to it :D
18:26 < adrivanrex_> can you run it on your VPS?
18:26 < squeakytoy> I have a very serious question. I have been looking at both the promise/q and async to avoid callback hell code. However, I have noticed that both q/promise and async is kinda bloated.. so I have written my own async control flow: http://paste.ubuntu.com/5642313/ <--- Is this totally new, or does q/promise or async achieve this with the same amount of code??
18:26 < adrivanrex_> ok np
18:26 < adrivanrex_> PM me
18:27 < gmurphey> is it possible to run `npm init` programmatically from a module?
18:27 < geNAZt-laptop> squeakytoy, async has a waterfall
18:27 < squeakytoy> geNAZt, yea, but its more bloated than mine
18:27 < geNAZt-laptop> gmurphey, yes it is
18:27 < draginx> squeakytoy: how is async "bloated"?
18:27 < geNAZt-laptop> squeakytoy, if you only use waterfalls then a own implementation is okay
18:28 < AAA_awright> draginx: Because I've never needed it?
18:28 < niggler> http://wordsmith.org/words/today.html
18:28 < squeakytoy> geNAZt-laptop, http://paste.ubuntu.com/5642325/
18:28 < draginx> AAA_awright: wat? :P
18:28 < AAA_awright> And I see no reason to need it
18:28 < squeakytoy> draginx, http://paste.ubuntu.com/5642325/
18:29 < gmurphey> geNAZt-laptop: we're using child_process.exec, but having trouble buffering the input.
18:29 < draginx> AAA_awright: if u dont need async then don't use it..?
18:29 < draginx> I fail to see how this is at all relevant to me and/or the discussion
18:29 < AAA_awright> draginx: I'm going a step further and saying you shouldn't need it either
18:29 < draginx> Who says I use it? :/
18:29 < squeakytoy> geNAZt, my question is.. why could i write a more simple and intuative waterfall, than the one in async.. surely, i cannot be the world's first?
18:29 < AAA_awright> No one?
18:30 < geNAZt-laptop> squeakytoy, because the async waterfall has a error handling thing
18:30 < draginx> either way, async.waterfall looks better in that example imo
18:30 < draginx> less lines too
18:30 < geNAZt-laptop> which your implementation doesnt seem to need / have
18:30 < draginx> nvm ur consoling
18:30 < AAA_awright> Maybe I should just post my CMS on Kickstarter
18:30 < AAA_awright> Then it'd get all the attention it deserves >_>
18:30 < squeakytoy> draginx, its only less lines since i dont have an equal waterfall, the async-waterfall doesnt have console.log
18:31 < draginx> squeakytoy: yer i corrected myself :)
18:31 < draginx> either way, why shouldnt people use async?
18:31 < squeakytoy> draginx, i double corrected you!
18:31 < geNAZt-laptop> draginx, because they dont need all of the functions ?
18:31 < draginx> geNAZt-laptop: i was referring to a more general sense
18:31 < AAA_awright> adrivanrex_: Is that your project?
18:32 < geNAZt-laptop> in general nothing is wrong with using async as control flow module
18:32 < draginx> if u dont need the functions and control flow then fine.. but jsut because u dont use it doesnt mena its bad
18:32 < squeakytoy> draginx, if you compare async with my waterfall, isn't mine more.. friendly and intuative? isn't this just more beautiful? :D http://paste.ubuntu.com/5642332/
18:32 < geNAZt-laptop> no one said this
18:32 < adrivanrex_> hey AAA_awright,.. what's up with that.. ??
18:32 < geNAZt-laptop> squeakytoy, no :D
18:32 < AAA_awright> adrivanrex_: It's running a bit slow
18:33 < squeakytoy> geNAZt-laptop, aww.
18:33 < AAA_awright> adrivanrex_: Do you have sources posted?
18:33 < geNAZt-laptop> i love the async api style :D
18:33 < adrivanrex_> I'll show you the code if you want..
18:33 < squeakytoy> geNAZt-laptop, but its so good. The sent in argument, "next" is actually the next function in the array - its crazy cool!
18:33 < draginx> squeakytoy: not really
18:33 < geNAZt-laptop> well its the same as in async :D
18:34 < squeakytoy> geNAZt-laptop, no it isnt?
18:34 < draginx> geNAZt-laptop: his only diffferent is the fact that he checks for array.length if counter equals it then assume thats the callback
18:34 < geNAZt-laptop> the waterfall in async should behave the same as your implementation
18:34 < geNAZt-laptop> but it has another api style
18:34 < draginx> err actually nvm he checks for next cb in args
18:35 < squeakytoy> geNAZt-laptop, seriously though, async's waterfall makes no sense. calling "callback(null, 'done');" instead of just the function you want
18:35 < geNAZt-laptop> the function i want ?
18:35 < geNAZt-laptop> callback in this case is the next function in the array 
18:35 < squeakytoy> geNAZt, are you good with async?
18:36 < geNAZt-laptop> but async does look for errors in the given callback
18:36 < geNAZt-laptop> well i use it, good is a personality thing
18:36 < geNAZt-laptop> if i say i am good in anything you can say no
18:36 < geNAZt-laptop> but for my cases i am "good" in using async
18:37 < drastick> Anyone know how I would go about calling npm from inside a module?
18:38 < squeakytoy> geNAZt, you remember all my 4 functinos? sum, extract, mul, div? and how it turned out into a callback hell? http://paste.ubuntu.com/5642343/ <-- i bet 1 USD my waterfall would be more friendly than async, if we implemented it using async's own waterfall api :P
18:38 < geNAZt-laptop> dratsick: https://npmjs.org/api/init.html
18:40 < geNAZt-laptop> squeakytoy, you only need to add a null inside your function as first parameter and it should be the same
18:40 < geNAZt-laptop> to the callbacks ofc
18:40 < squeakytoy> geNAZt, but you are calling "callback" as the function, right?
18:40 < geNAZt-laptop> yes
18:40 < squeakytoy> geNAZt, but why? you want to call sum/ext/div/mul
18:41 < geNAZt-laptop> in your waterfall you also call next
18:41 < squeakytoy> geNAZt, where do you define that "callback" is one of them?
18:41 < geNAZt-laptop> and not the function
18:41 < drastick> geNAZt-laptop:  thanks.  Looks like I'm better off rolling my own
18:43 < squeakytoy> geNAZt-laptop, i am thinking of creating and publishing this as my own npm package!
18:43 < squeakytoy> squeakysync
18:43 < geNAZt-laptop> async
18:43 < geNAZt-laptop> its not sync
18:43 < geNAZt-laptop> :D
18:44 < geNAZt-laptop> well that would be a nice module
18:44 < geNAZt-laptop> to turn async calls into synced up function calls
18:44 < geNAZt-laptop> :D
18:44 < squeakytoy> squeakysync (c) (tm) (patent pending)
18:44 < geNAZt-laptop> if you get this i owe you a beer
18:44 < geNAZt-laptop> :D
18:44 < squeakytoy> we need a cool name though
18:45 < geNAZt-laptop> yet-another-control-flow-module :D
18:45 < squeakytoy> squazt maybe!
18:45 < squeakytoy> squeakytoy + geNAZt 
18:45 < geNAZt-laptop> :D nice ideea
18:46  * squeakytoy is going to read how to publish on npm
18:46 < geNAZt-laptop> you need a package.json and a npm account
18:47 < geNAZt-laptop> a name, a version number, a maintainer and npm publish :D
18:48 < geNAZt-laptop> but your waterfall has no error handling
18:48 < geNAZt-laptop> which is a bit of a bad thing
18:48 < aleksandar> error handling is overrated.
18:48 < squeakytoy> geNAZt, just do a "throw" :P
18:49 < geNAZt-laptop> to leave the waterfall in an undefined state :D nice idea
18:49 < geNAZt-laptop> The new Control Flow - now with 100% more undefined state
18:50 < squeakytoy> geNAZt-laptop, http://paste.ubuntu.com/5642379/ tadaaa!
18:50 < merpnderp> Is there like some programmer law that says that CMS's will always take more time to config and jury rig to meet a customers demand than just writing your own implementation? 
18:50 < geNAZt-laptop> ugly as hell :D
18:50 < AAA_awright> merpnderp: No, I have great success with Drupal for instance
18:52 < squeakytoy> wait, waht? npm displays your email in public?
18:52 < squeakytoy> on their site?
18:52 < aleksandar> io.of("/cons").in("room").emit("chat",{from:"e",data:"lol"}); 
18:52 < aleksandar> Can you guys spot anything wrong herE?
18:53 < geNAZt-laptop> squeakytoy, no
18:53 < squeakytoy> oh, maybe its because i am logged in
18:53 < AAA_awright> merpnderp: Why, what are you up to?
18:53 < merpnderp> AAA_awright: brb
18:53 < aleksandar> console.log(io.sockets.manager.rooms); returns "/cons/room": "id" so it does exist.
18:53 < squeakytoy> geNAZt-laptop, its still public: https://npmjs.org/~rynti
18:53 < squeakytoy> geNAZt-laptop, (thats not me btw, i look way cooler)
18:54 < geNAZt-laptop> https://npmjs.org/~genazt
18:54 < geNAZt-laptop> its okay i think
18:54 < geNAZt-laptop> because my github also has a public email
18:54 < squeakytoy> geNAZt, you brittish
18:54 < geNAZt-laptop> no :D
18:54 < geNAZt-laptop> i am german :D
18:54 < squeakytoy> geNAZt, wanna guess how i knew that?
18:55 < squeakytoy> geNAZt, oh.. but googlemail is brittish isnt?
18:55 < squeakytoy> geNAZt, they cant use gmail bc of some copyright problems
18:55 < geNAZt-laptop> googlemail is amercian
18:56 < geNAZt-laptop> and gmail === googlemail
18:56 < geNAZt-laptop> fabian.fassbender42@gmail.com will also send emails to my account
18:57 < squeakytoy> geNAZt-laptop, "1: Germany – A gentleman by the name of Daniel Giersch runs a company called G-mail that provides offline postal services.  After a few years of battling in court the authorities ruled in favour of Giersch."
18:58 < squeakytoy> geNAZt-laptop, http://gmailgeek.com/facts/gmail-vs-google-mail-the-difference-explained.html
18:58 < squeakytoy> geNAZt-laptop, so thats why, legal reasons (i win)
18:58 < Venemo> hey guys
18:58 < Venemo> what is the best way to persist a v8::Object?
18:58 < Venemo> speaking in terms of a native node module
18:59 <@isaacbw> create a persistent handle
19:00 < Venemo> isaacbw, by persist I mean save to disk
19:00 < geNAZt-laptop> Venemo, you can use the JSON parser ?
19:01 < Venemo> geNAZt-laptop, I don't think that would be efficient enough. I'm looking for a way to do it without any parsing
19:01 < raphie> can anyone recommend a framework? what I want is something where I just define the models (with validation) and it generates a nice REST API for me
19:01 < Venemo> for example, if I could just save V8's in-memory representation of the v8::Object, I could simply load it and map it directly to memory, without any parsing
19:02 < Venemo> raphie, I have not used such a framework myself, but I've seen several which promise what you are asking for
19:02 < geNAZt-laptop> Venemo, https://groups.google.com/forum/?fromgroups=#!topic/v8-users/F8Q0rdUSDo0 the last post
19:02 < Venemo> raphie, one such is jayData
19:03 < Venemo> geNAZt-laptop, I'd prefer not having to convert to JSON and back
19:05 < Venemo> best thing would be if I could just save an object in such a way that is mmap()able
19:07 < raphie> Venemo: doesn't seem to include auth, or am I not looking in the right places? what were the others you have heard of?
19:07 < Venemo> raphie, I don't recall, this was the nicest-looking
19:35 < rb_mk> how do i tell whether stdin is from a pipe or not?
19:36 < geNAZt-laptop> isTTY
19:37 < rb_mk> ReferenceError: isTTY is not defined
19:46 < rb_mk> ahh process.stdin.isTTY
19:49 < heath> trying to install expressn within a project and i'm receiving an error i've never seen before: https://gist.github.com/heath/5535550
19:50 < heath> "cb() never called", anyone ever seen this know what to do with it?
19:50 < heath> node v0.8.12;  npm v.1.1.63
19:51 < Fuzzyma> Is there a known workaround to deny Fileuploads from sources which are not autheticated to the server? As I understand the working of req and res every request is fully parsed and uploaded before I can decide whether I want him or not. I try to set up a progress-bar in my app. Therefore I wrote my own middleware which listens to the progress and end-event. Here I could decide to deny the 
19:51 < Fuzzyma> request but therefore I need the session and _therefore_ i need the cookies. When I used the bodyParser, CookieParser and SessionParser middleware before my own the request seems to break. All formfields become doubled. Instead of having {method:'PUT} I get {method:{0:'PUT'}
19:51 < Fuzzyma> Is there a known workaround to deny Fileuploads from sources which are not autheticated to the server? As I understand the working of req and res every request is fully parsed and uploaded before I can decide whether I want him or not. I try to set up a progress-bar in my app. Therefore I wrote my own middleware which listens to the progress and end-event. Here I could decide to deny the 
19:51 < Fuzzyma> request but therefore I need the session and _therefore_ i need the cookies. When I used the bodyParser, CookieParser and SessionParser middleware before my own the request seems to break. All formfields become doubled. Instead of having {method:'PUT} I get {method:{0:'PUT', 1: 'PUT'}}
19:53 < garthk> dominictarr, should I take stream.PassThrough's error on event streams to be some kind of death knell for the concept? 
19:54 < dominictarr> garthk: can you post an issue with example code?
19:54 < heath> https://github.com/sendgrid/sendgrid-nodejs/issues/38
19:54 < heath> interestingly, his solution also worked
19:54 < garthk> dominictarr: easily done. 
19:54 < pachet> Fuzzyma: don't use bodyparser in that case
19:54 < pachet> Fuzzyma: use something else for multipart
19:55 < dominictarr> garthk: cheers
19:56 < jdelgado> append file vs filestream?
19:57 < pachet> heath: its because you're clearing the npm http cache
19:57 < pachet> https://github.com/joyent/node/commit/008ab12b7facea8ac4a718894044963e3b4ee901
19:57 < pachet> heath ^
19:58 < mscdex> Fuzzyma: just put a custom middleware after the session parsing but before bodyparser that checks for a valid session if the content-type is multipart?
20:00 < pachet> or its possible to overwrite the actual fn called by bodyParser for multipart
20:00 < pachet> bodyparser.parse ['multipart/form-data'] = fn
20:00 < pachet> but that's a hack and a half :[
20:02 < dook> I've got an ip-based webcam I'm trying to serve to more users using node.  Any tips?  I'm pretty sure my approach is flawed: https://gist.github.com/flyswatter/5535637
20:02 < mscdex> dook: you might look into doing mjpeg responses
20:02 < dook> ok
20:02 < dook> Is that just a header?
20:02 < mscdex> oh wait, you're consuming the source
20:02 < garthk> dominictarr: discovered objectMode: true. Happy. Thanks. Now I can go back to benchmarking. 
20:03 < mscdex> er wait
20:03 < dook> ok
20:03 < mscdex> oh i see
20:03 < mscdex> what does your video stream respond with?
20:03 < dook> Oh there's a huge problem w/ that gist, I reuse the word response
20:03 < dook> It responds with...
20:03 < dominictarr> garthk: aha, great! there should probably be a note in the README about that.
20:04 < dook> mscdex: image/jpeg
20:04 < dook> mscdex: That's why I used that.
20:04 < dook> mscdex: Even though I'm pretty sure it's an mpeg-encoded stream.
20:04 < mscdex> oh ok. that's a bit strange it's using image/jpeg and not an mjpeg stream
20:05 < dook> mscdex: The documantation said it was MPEG-4, I'll try to find more info on its format
20:07 < mscdex> dook: a lot of IP cameras and usually respond with content-type=multipart/x-mixed-replace, where each part is a new jpeg frame
20:07 < mscdex> it's a lot more efficient because the tcp connection never closes
20:07 < dook> mscdex: So maybe I should use that for my re-serving?
20:07 < mscdex> you just keep getting new frames
20:07 < mscdex> you could
20:08 < dook> mscdex: "You cannot pipe after data has been emitted from the response."
20:08 < dook> I'm not really sure what that means.
20:09 < dook> Maybe I'm not using pipe of request right..
20:10 < dook> mscdex: Here's my 2nd try, same error: https://gist.github.com/flyswatter/5535710
20:11 < mscdex> dook: i think you're going about this the wrong way if your upstream video source is just responding with a jpeg image and then closing the connection...
20:11 < dook> I don't think it's closing the connection
20:11 < dook> It seems like the connection is holding open
20:11 < dook> Constantly feeding new data
20:11 < dook> I somewhat think the header is wrong, and this is mpeg.
20:12 < pachet> can you verify the stream is emitting data
20:12 < dook> ok
20:12 <@MI6> joyent/node: Timothy J Fontaine v0.10 * 716176f : test: report test duration in TAP progress - http://git.io/XF0Jrg
20:13 < pachet> eg stream.on('data', function(data){process.stdout.write(data.slice(0, 8));})
20:13 < mscdex> dook: what if you output the upstream headers, like this: https://gist.github.com/mscdex/5535701 ?
20:14 < dook> pachet: Where am I getting that stream object?  This is my first streaming foray, I might be missing that.
20:14 <@MI6> joyent/node: Timothy J Fontaine master * ee4f0ba : test: report test duration in TAP progress - http://git.io/_nn2_A
20:14 < pachet> dook er, its 'r' in your case... i think
20:14 < pachet> although i dont see where you define r
20:15 < dook> Yeah, it's a request object, does that stream in this way?
20:15 < dook> mscdex: That got my first data out of the actual camera
20:15 < dook> Seems like maybe request closes the connection after it receives the header?
20:16 < mscdex> dook: what headers does it show though if you do `console.dir(response.headers)` before your `http.createServer()`
20:16 < dook> { server: 'Netwave IP Camera',
20:16 < dook>   date: 'Tue, 07 May 2013 20:14:43 GMT',
20:17 < dook>   'www-authenticate': 'Basic realm="ipcamera_00626E46C6DD"',
20:17 < dook>   'content-type': 'text/html',
20:17 < dook>   'content-length': '140',
20:17 < dook>   connection: 'close' }
20:17 < pachet> ^
20:17 < mscdex> html :S
20:17 < dook> So is that the problem, I haven't isolated the stream in the page?
20:17 < mscdex> you probably have to authenticate first
20:17 < dook> I believe I'm already authenticating in the request url
20:18 < dook> the url works fine in a browser
20:18 < mscdex> dook: you're sending the Authorization header in your request?
20:19 < dook> mscdex: You're right it's returning unauthorized in the html..
20:19 < dook> No, just in the query string
20:19 < dook> There's an auth header?
20:20 < wesbos> Hey, anyone familair with i18next ?
20:21 < rb_mk> is it bad style to not wrap my vars in iife for a small program?
20:21 < mscdex> dook: for the request module i think you currently need to do something like: `request.auth('username', 'password', false).get('http://myipcamera')` instead of just `request('http://myipcamera')`
20:22 < mscdex> dook: try that and see what headers you get
20:22 < dook> mscdex: has no method 'auth'
20:22 < dook> mscdex: Doesnt' make sense… says it has auth in the docs
20:24 < dook> mscdex: I used the alt auth method, and am still unauthorized, I'll tinker w/ that a bit mroe..
20:24  * squeakytoy just published his first npm package!
20:24 < mscdex> dook: you're doing something like this?: https://gist.github.com/mscdex/5535790
20:25 < dook> mscdex: I did that, but it remarkably said it had no method auth, so I tried the version where you say request(urlString, {user:'username', pass:'password})
20:25 < garthk> event-stream.pipeline(es.readArray(…), es.writeArray(…)) cranks at ~2m objects/sec, or around 40MB/s if you look at the JSON. That's too slow for my application unless I chunk up the objects somehow.
20:25 < squeakytoy> geNAZt-laptop, its uploaded now https://npmjs.org/package/squeaky
20:26 < mscdex> dook: weird. but yeah, it looks like you'll need to get authorization working before doing anything
20:26 < dook> I agree, that's a great clue.  Other than that, am I right to be nesting an http.server within the request?
20:26 < garthk> If I drop in a stream.PassThrough({ objectMode: true }), though… 100,000 objects/sec. Bleh.
20:26 < pavi> Hi TooTallNAte
20:27 < pavi> Can some one help me in SSL, cert passing
20:27 < mscdex> dook: it will depend on what headers the server responds with after you are authenticating properly
20:27 < pavi> I pass my own cert in the code as options.ca = cerData
20:27 < dook> mscdex: Ok, I'll focus on the present problem then.
20:28 < pavi> but i always get this below error Got error: Error: SELF_SIGNED_CERT_IN_CHAIN
20:28 < dook> mscdex: Could I do this with http.request instead?
20:28 < pavi> Is it because there is cert like this available in truststore
20:28 < pavi> i want to ignore that ans use the cert i pass
20:28 < garthk> A through-stream that immediately queues all data "only" drops throughput by 40%.
20:28 < pavi> I was thinking TooTallNate can help?
20:28 < pavi> r u there TooTallNate
20:28 < pavi> ?
20:29 < garthk> Micro-benchmark time. :)
20:29 < pavi> or isaacs
20:29 <@TooTallNate> pavi: i think you want "rejectUnauthorized: false"
20:29 < mscdex> dook: you certainly could, but depending on the request, you may have to manually handle http redirects or something
20:29 <@Nexxy> isaacs is too busy trolling MRAs on twitter
20:30 <@isaacs> Nexxy: yeah, i'm done with twitter for today
20:30 <@isaacs> that was fun, though
20:30 <@Nexxy> it's really hard for me to not go off on some of them
20:30 <@isaacs> maybe tomorrow i'll publicly thank white power for all the good work they've done to empower white people.
20:30 <@Nexxy> yeahh!
20:31 <@isaacs> i sure have benefited from all those great benefits!
20:31 <@Nexxy> it's true
20:31 <@isaacs> it's only right to be thankful1
20:31  * isaacs stopping now, for real..
20:31  * isaacs has work to do
20:31  * Nexxy nod
20:32 < pavi> If i say rejectUnauthorized = false
20:32 < pavi> then the invalid cert also pass
20:32 < pavi> Like if i pass an invalid cert it would not say anyerror since this flag is set to false
20:33 <@TooTallNate> pavi: what are you trying to do exactly?
20:34 < pavi> i want to pass an cert in my code, if i make a https request i will get a cert and i want to validate against the cert i passed in the code
20:34 < pavi> no to use the truststore inbuilt ca
20:35 < pavi> if the cert does not match i want to get an error
20:36 < mscdex> pavi: you can listen on the 'secureConnect' event of the cleartextstream
20:37 < mscdex> pavi: inside that event you can check the certificate yourself
20:38 < pavi> mscdex can i not just pass options on my request
20:38 < pavi> like the ca =  the cert
20:38 < pavi> and ask to ignore the truststore cert
20:40 < AAA_awright> pavi: I don't see your problem, just call getPeerCertificate and authenticate it yourself
20:40 < merpnderp> AAA_awright: I usually write webapps, but I've got a person wanting more traditional CMS type stuff. It's been years since I've used a CMS but it always seemed like making it do all the one-off stuff the client needed was more of a pain that it was worth. Like the Event system wouldn't handle events like they wanted, or they'd need some special case for the photo management, or the user auth. Seems like I was always hacking it.
20:40 < Fuzzyma> mscdex: to access the progressevent you have to start the bodyParser first because you will loose all other form-data of the request. Your own middleware has to come after the bodyParser
20:40 < crashsystems> does anyone know how to use the TLS module to get a server's list of supported ciphers?
20:41 < Fuzzyma> the problem is, that you cant start the session between bodyParser and your own parser because it causes wired problems - all data seems to be doubled (as i wrote at top)
20:41 < merpnderp> AAA_awright: And it just feels like with node+express+mongo+socket.io+knockout I can solve any version of the set of CMS problems in minutes.
20:42 < Fuzzyma> pachet: I think bodyParser is a very good and fast parser. Why I should not use it? It uses formidable in the background as most of all other parsers do
20:42 < AAA_awright> merpnderp: It won't give you a secure implementation or a user-friendly UI by default
20:42 < AAA_awright> Try writing a user comment system with user account management
20:43 < mscdex> Fuzzyma: pause the stream?
20:43 < mscdex> Fuzzyma: i think for node v0.10 it doesn't start reading right away....
20:44 < mscdex> Fuzzyma: unless express or some other middleware up the stack is secretly calling pause(), resume(), or listening for 'data' events
20:45 < merpnderp> AAA_awright: what's a user comment system with user account management? You mean two separate features?
20:45 < mscdex> pavi: you can pass in a ca
20:45 < AAA_awright> merpnderp: Yeah they'd be two seperate features, but of course they work together
20:45 < Fuzzyma> mscdex: ah - i didnt think about this pause-stuff till now
20:45 < merpnderp> AAA_awright: I would think my reliance on socket.io solves a lot of xss attacks. If they aren't actively on the page with an authenticated socket already open, they aren't able to hit the API.
20:46 < Fuzzyma> how is that used?
20:46 < AAA_awright> mscdex: CA is an entirely seperate problem from authenticating client certificates
20:46 < mscdex> AAA_awright: i was under the impression is connecting to a server
20:47 < AAA_awright> merpnderp: No that doesn't, and never mind that's not Web at all
20:47 < merpnderp> AAA_awright: not web?
20:47 < pavi> mscdex if i pass in a ca it gives me this error Got error: Error: SELF_SIGNED_CERT_IN_CHAIN
20:48 < mscdex> Fuzzyma: if you're on node v0.8.x, you can try using req.pause() at the beginning of the middleware stack, just don't forget to resume() it later on. if you're on node v0.10, then it should already be "paused" because of the way streams2 works
20:48 < AAA_awright> mscdex: It looks like he's dealing with a TLS server, and wants to authenticate incoming connections, authenticate users by the certificate they use, instead of granting permissions based on who signed their certificate
20:48 < pavi> Also i am use nodev0.8.21
20:48 < AAA_awright> merpnderp: Websockets are for stateful connections, the Web is stateless
20:49 < AAA_awright> Websockets is something of a misnomer
20:49 < Fuzzyma> mscdex: ty - i will try that
20:50 < merpnderp> AAA_awright: I know what they are and how they work. If you weren't implying that I won't have solved normal security issues, then by that logic I should never write any web facing code as it will never be as secure as Drupal
20:51 < AAA_awright> merpnderp: Actually, you shouldn't write any security-related code, it's far too dangerous
20:52 < merpnderp> AAA_awright: seriously? Are you saying if someone is writing their own user auth system, they are making a mistake?
20:52 < AAA_awright> Yes -- Number one rule we cite in ##crypto is DON'T WRITE YOUR OWN CRPYTO
20:52 < mscdex> pavi: well, your best bet is probably to listen on 'secureConnect', then destroy the connection if cleartextstream.authorizationError === 'SELF_SIGNED_CERT_IN_CHAIN' or cleartextstream.authorization is true
20:53 < AAA_awright> I come across weak systems on a weekly basis
20:53 < NotMyself> anyone using boxen and have an example manifest i can look at? im cofused on just how to pull the listen port from BOXEN_SOCKET_DIR
20:53 < mscdex> s/if/ if not/
20:53 < merpnderp> AAA_awright: I'm not talking about implementing my new and improved version of blowfish2. I'm tlaking about using bcrypt to authenticate passwords. Is that what you're saying shouldn't be done?
20:53 < myndzi> eh, don't write your own crypto is overrated. all you have to do is make sure to use xor somewhere in the path and you're pretty much good :V
20:54 < AAA_awright> merpnderp: Yes. First mistake is you're using bcrypt, PBKDF2 is used for hashing passwords.
20:54 < AAA_awright> bcrypt isn't approved for passwords, in fact.
20:55 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
20:56 < pavi> thanks let me try
20:56 < merpnderp> AAA_awright: Only one of the two you mentioned has a GPU implementation. 
20:56 < merpnderp> I'll give you one guess.
20:57 < myndzi> sounds like you are implying pbkdf2, but pbkdf2 can use whatever hash you want
20:58 < AAA_awright> merpnderp: I don't see your point. bcrypt is modified blowfish, you think modifying your system will really thwart attackers? Almost always it makes the system weaker.
20:59 < AAA_awright> If you want something memory hard (which bcrypt doesn't even claim to be!), scrypt is a draft standard.
20:59 < merpnderp> AAA_awright: I think that the only thing I need to protect against is a fast rainbowtable attack on my stored hashes from a GPU. I'm storing user passwords on whichever small site I'm working on. If my hashes are stolen, my site is already compromised and I just need to try to protect the users from having their reused passwords compromised. 
21:00 < Fuzzyma> mscdex: I found the solution. It was a bit of all. All in all I just had the wrong middleware order. The order has to be: Cookie, Session, bodyParser, ownMiddleware - that works
21:01 < AAA_awright> merpnderp: The only thing? You want to protect your user's passwords from compromise, period. Just because your site may not need high security, doesn't mean the passwords aren't used to also protect bank accounts and such.
21:03 < AAA_awright> Anyways, there's far more pressing security stuff than choice of hash... Allowing write operations with a GET request or putting a read/write token in a cookie is a security hole right away
21:04 < AAA_awright> Improperly signing tokens or not using randomly generated tokens is another common problem
21:04 < dook> mscdex: I kinda cheated, but got a binary jpeg in my node app from the webcam, how do I turn that into a jpeg I can res.write() to the user?
21:04 < merpnderp> AAA_awright: right, authenticated sockets with socket.io seems to solve nearly all web related security holes.
21:05 < AAA_awright> merpnderp: No, just all the ones you're aware of
21:06 < AAA_awright> And again, it's not a Web technology anymore, if you only allow communications through websockets
21:07 < merpnderp> AAA_awright: I was under the impression that the HTML5 spec included websockets. That sounds weby.
21:08 < AAA_awright> Just because it's a Web technology doesn't mean it's Web friendly. I could use Node.js to render all my webpages as JPEG images, to prevent people from copy/pasting my content
21:08 < AAA_awright> Right, but that kind of defeats the point of the Web
21:08 < AAA_awright> Also, Websockets has nothing to do with HTML5
21:09 < Havvy> <ecmabot> Havvy: WebSockets | MDN - Mozilla Developer Network <https://developer.mozilla.org/en-US/docs/WebSockets>
21:10 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:13 < ericelliott> AAA_awright: Websockets is part of the HTML5 family of technologies. There are lots of API-related technologies that fall under the HTML5 umbrella. See http://dev.w3.org/html5/websockets/
21:13 < Fuzzyma> Is there a function req.abort() i can use to cancel a request? Or did i have to use req.send(404) or something like that?
21:13 < ericelliott> note the html5 in the url.
21:13 < myndzi> i'd think the stronger argument might come from the fact that websockets are used by uhh... web servers and web clients, to communicate data for the primary purpose of rendering data on a web page
21:14 < s5fs> Fuzzyma: you should probably req.send something
21:14 < AAA_awright> ericelliott: It's a communications protocol, standardized as an RFC, and an ECMAScript/WebDL API published by the W3C
21:14 < AAA_awright> ericelliott: There's nothing HTML about it
21:14 < s5fs> Fuzzyma: sorry, res.send haha
21:14 < ericelliott> merpnderp: And it's totally fine to do whatever communication you want over websockets... just don't reinvent the wheel for nothing. =)
21:14 < diverdude> I am trying to follow an example of using nod.js and gstreamer to stream live webcam but i cannot make it work. can anybody help me?
21:14 < Fuzzyma> lol - yes - my mistake, too^^
21:14 < s5fs> Fuzzyma: we fail.. together!
21:14 < ericelliott> AAA_awright: Except that the W3C considers it an html5 technology.
21:14 < beg> Is it supported to store variables in rooms with sockets.io?
21:15 < merpnderp> ericelliott: I hear ya :)
21:15 < AAA_awright> ericelliott: It's lumped in with all their next-generation technologies including semweb
21:15 < ericelliott> AAA_awright: I think it's weird that non-HTML technologies fall under HTML5... but that doesn't change the fact.
21:16 < myndzi> jpg isn't html but it gets used heavily on the web :P
21:16 < AAA_awright> You can implement HTML5 without Websockets and you can implement Websockets without HTML5
21:16 < ericelliott> AAA_awright: yep. Pretty much the entire current open web stack is considered HTML5. Weird, but true.
21:16 < gotjosh> Anyone know of any sites made with node that handle somewhat decent traffic?
21:16 < gotjosh> (built entirely with node)
21:16 < myndzi> another way to say it is that "html5" covers more than just "html"
21:16 < Fuzzyma> s5fs: I get an error: 500 TypeError: Object #<IncomingMessage> has no method 'send'
21:16 < merpnderp> If every browser understands websockets, if most web bots can parse JS, and if ecmascript has it standardized, how does it break the web? It isn't like it requires a plug-in.
21:16 < ericelliott> myndzi: Yep.
21:16 < Fuzzyma> -.-
21:16 < AAA_awright> ericelliott: No, HTML5 includes such stuff as the video tag, audio tag, article/aside tags, and one poorly misplaced API for history.pushState, most everything else isn't related
21:16 < Fuzzyma> i failed agin
21:16 < Fuzzyma> *again
21:16 < Fuzzyma> maan
21:17 < myndzi> well guys, AAA_awright has convinced me. i will no longer think of websockets as related to the web!
21:17 < ericelliott> AAA_awright: Nope. There's lots of non-tag related nonsense in HTML5, including localStorage, IndexedDB, etc..
21:17 < myndzi> glad that's over
21:17 < AAA_awright> merpnderp: HTML != Web
21:17 < s5fs> Fuzzyma: what are you using? pure node or connect or express or what?
21:17 < AAA_awright> ** myndzi
21:18 < AAA_awright> ericelliott: IndexedDB isn't HTML5 either... I have my own IndexedDB implementation for Node.js for instance
21:18 < AAA_awright> localStorage I forget
21:18 < myndzi> so yesterday i got to try to figure out how some code works
21:18 < merpnderp> Doesn't the w3c get to make the distinction.....one of the perks of being the w3c?
21:18 < myndzi> and i l earned a new pattern
21:19 < AAA_awright> ericelliott: Oh data tags and the data API, that's HTML5
21:19 < Fuzzyma> s5fs: i use compound - so its express - yes^^
21:19 < ericelliott> AAA_awright: complain to the WhatWG and W3C if you don't like how they classify the technology, but ranting about it on IRC isn't changing anything. =)
21:19 < AAA_awright> er, data attributes
21:19 < myndzi> it's the pattern of "define all your functions by two nested closures and return functions, then run callbacks back and forth until your head hurts"
21:19 < AAA_awright> ericelliott: I don't need to, visit the HTML5 spec and see for yourself
21:19 < myndzi> (and cleverly include some of those calls in conditional statements, etc.)
21:19 < AAA_awright> If it's not on the spec it's non-normative, I hope you realize
21:20 < s5fs> Fuzzyma: res.send should work. can you post the breaking code?
21:20 < AAA_awright> http://www.w3.org/TR/html5/
21:20 < myndzi> i can see the path of destruction before me, and i'll have to make sure not to do clever things in fear of writing code like this D:
21:20 < Fuzzyma> i used req again - thats why i wrote "i failed again" :D
21:21 < s5fs> Fuzzyma: hahaha!!
21:21 < Fuzzyma> well - it seems to work in a way
21:21 < ericelliott> AAA_awright: Here's the page for the spec: http://dev.w3.org/html5/
21:21 < ericelliott> AAA_awright: You'll see websockets there, complete with an HTML5 logo next to it.
21:21 < Fuzzyma> the server is struggling now - have to review that
21:21 < ericelliott> AAA_awright: Got any other convincing arguments?
21:21 < Fuzzyma> but for now - iam done^^
21:21 < Fuzzyma> thank you :)
21:22 < s5fs> Fuzzyma: nice work, now I'm gunna go poke my app into submission haha@
21:22 < Fuzzyma> :D
21:22 < AAA_awright> ericelliott: The editor's draft doesn't show anything
21:24 < jjore> when the node repl prints ... after I've typed something incorrect, how do I get it to show me the error and also return to normal processing?
21:24 < AAA_awright> ericelliott: Also note editors drafts aren't strictly Specifications, they haven't received W3C endorsement (not that it's very meaningful)
21:24 < myndzi> http://www.googlefight.com/index.php?lang=en_GB&word1=Websockets+are+an+HTML5+technology&word2=Websockets+are+not+an+HTML5+technology
21:24 < wbyoko> are there any good scripting ides for nodejs.  so you could run nodejs apps with a shortcut
21:24 < myndzi> definitive proof!
21:24 < wbyoko> have nom support
21:24 < wbyoko> npm
21:26 < AAA_awright> ericelliott: http://www.w3.org/TR/IndexedDB/ does refer to HTML5 because of the Structured Clone Algorithm, which really should be in DOM and not HTML5 but I digress
21:26 < ericelliott> AAA_awright: http://platform.html5.org/ --- tada,,, websockets.
21:26 < AAA_awright> ericelliott: Let me guess, HTTP is also HTML5
21:27 < AAA_awright> ericelliott: I'm not conserned with what people call it, I'm conserned with what the specification ACTUALLY SAYS
21:27 < AAA_awright> Showing me other people's misconseptions doesn't prove anything
21:28 < AAA_awright> I use IndexedDB, Websockets, and Canvas and I don't even use HTML5
21:28 < merpnderp> But how do you xss proof your websockets. 
21:28 < ericelliott> AAA_awright: HTML5 is a family of related web platform technologies, not a single specification.
21:28 < AAA_awright> If I used history.pushState I guess I would technically, even though browsers seem to support it even in XHTML environments
21:29 < AAA_awright> ericelliott: It's a markup language. Hypertext Markup Language, version 5.
21:29 < AAA_awright> We use it to encode data.
21:29 < merpnderp> Is it enough to have your cookie sessions https only and just for your domain?
21:29 < AAA_awright> merpnderp: Cross-site-scripting is a problem with not escaping your inputs, it doesn't have much to do with cookies
21:30 < AAA_awright> merpnderp: There's CSRF, which is usually due to mis-signed cookies, or using session tokens with improperly granted permissions
21:30 < ericelliott> AAA_awright: yes, if you're talking strictly about the HTML5 markup language, you're right. Websockets isn't part of that. But HTML5 is a lot more than a markup language.
21:30 < AAA_awright> ericelliott: It's a markup language. If I wanted to talk about Web technologies, I'd say Web.
21:31 < ericelliott> AAA_awright:  from wikipedia: "it extends, improves and rationalises the markup available for documents, and introduces markup and application programming interfaces (APIs) for complex web applications."
21:31 < AAA_awright> Web is a platform, a family of technologies that implements REST.
21:31 < ericelliott> http://www.w3.org/TR/html5-diff/#new-apis
21:31 < AAA_awright> Web includes such things as HTTP, HTML, URIs, ECMAScript and related APIs, etc
21:32 < AAA_awright> Wikipedia is wrong.
21:32 < merpnderp> AAA_awright: yes, it's cross site requests I'm worried about. Like how is the domain check done for authenticating the cookie domain? What if the badsite.com opens up a keep-alive session, and then after that is open, says it is now yourbank.com
21:32 < AAA_awright> Well, HTML5 does introduce some APIs... they're removing them it appears
21:33 < AAA_awright> merpnderp: You don't... Anyone can make any request with any payload, and it'll include the authentication token of a currently logged in user
21:33 < AAA_awright> merpnderp: Don't include a session token that allows read/write permissions in cookies
21:33 < AAA_awright> Using cookies alone, you should never allow writing or modifiying resources
21:34 < AAA_awright> Instead, use the read permissions of a cookie to request a read/write token, and submit that along with a form
21:34 < merpnderp> AAA_awright: so every time they want to access the webapp they need to relogin.
21:34 < AAA_awright> merpnderp: So there's more to web authentication than just authentication... You don't authenticate every request to a webapp with a username/password...
21:35 < ericelliott> AAA_awright: You win. W3C doesn't consider websockets part of HTML5. But WHATWG does.
21:35 < AAA_awright> merpnderp: When you log in, you're using your username/password to request a session token, which does two things
21:35 < ericelliott> AAA_awright: so you're right and you're wrong.
21:35 < ericelliott> =)
21:35 < merpnderp> AAA_awright: so your just talkign abotu the normal csrf one time hashes sent back to normal html forms?
21:35 < Havvy> WebSockets are a DOM API.
21:36 < Havvy> Actually, scratch that.
21:36 < AAA_awright> Havvy: WebSockets use DOM I think? BUt they're not in the DOM family of APIs
21:36 < Havvy> They are a web API.
21:36 < ericelliott> lol
21:36 < AAA_awright> Specifically, it's an RFC (that defines the protocol) and an ECMAScript/WebIDL specification
21:37 < Havvy> Since it doesn't actually touch the DOM, I can't really consider it a part of HTML5.
21:37 < houser> Hi, ok - I can finally stream webcam+sound to a browser via webm encoding. This is great however if i only want to stream images and not sound i cannot make it work. I have this code: http://paste.ubuntu.com/5642858/  This streams both sound and image and works as expected. However when i remove the audio sink (meaning i remove line 41,42,43 and 44), the streaming no longer works - Instead of streaming it just records when i try to playback and
21:37 < houser>  when i then close the server the recorded bit is the played on the client. What am I doing wrong? 
21:37 < AAA_awright> merpnderp: Basically you don't want to use anything related to the user or their credentials to grant permissions to submit forms or read stuff... you want to use a session token
21:38 < AAA_awright> merpnderp: The session grants permissions, it says "This session is allowed to post new documents" and such
21:38 < AAA_awright> merpnderp: The session token that's included in the cookie should only grant permissions to GET/read data
21:38 < AAA_awright> If you want to update data, send a POST request, you need a different token that's sent inside the form
21:39 < AAA_awright> That token grants permissions to make the write request
21:39 < merpnderp> AAA_awright: then with a websocket that is unnecessary as the websocket is closed when they leave the site and the session cookie used to open it is deleted.
21:40 < AAA_awright> merpnderp: If you're familiar with OAuth, it does something similar, it allows 3rd party applications to request a token that grants limited permissions to e.g. read an address book, or whatever
21:40 < merpnderp> AAA_awright: since websockets are stateful you don't need to pass back a hidden form element with the csrf token in each response.
21:41 < merpnderp> But I gots to get. Catch you later :)
21:41 < AAA_awright> merpnderp: At that point the connection has full permissions to do anything?
21:41 < AAA_awright> And it doesn't permit you to interoperate with 3rd party applications
21:43 < brainproxy> npm completion in my zsh environment (using up to date oh-my-zsh) recently started acting weird
21:44 < brainproxy> when I try to tab complete paths after npm, I get stuff like "egrep: empty (sub)expression" printed in my terminal
21:44 < brainproxy> have been hunting around looking for an answer, but haven't found it yet; anyone know a fix?
21:45 <@MI6> joyent/node: Trevor Norris master * b7f6e6b : stream_wrap: remove unused arg from WriteBuffer - http://git.io/h4Lcqg
21:47 < houser> anybody?
21:47 < mashlol> Anyone know the method nodejs calls to print objects nicely?  is that accessible to us?
21:48 < niggler> util.inspect
21:48 < mashlol> awesome, thanks
21:50 <@MI6> joyent/libuv: Ben Noordhuis master * 4a8ec0c : sunos: handle disabled watcher after callback - http://git.io/hw-FxA
21:57 < joaojeronimo> when you listen on a unix socket, are you supposed to delete it when you close the server ?
22:00 < AAA_awright> joaojeronimo: Files don't unlink themselves, if that's what you're asking
22:00 < joaojeronimo> AAA_awright, yes I just found out this: https://github.com/joyent/node/issues/3540
22:01 < AAA_awright> A unix socket isn't much more than a form of TCP that uses the inode number of the file instead of a port opened on localhost
22:05 < AAA_awright> I'm shocked Node.js ever unlinked anything
22:05 < AAA_awright> Normally, in my applications, socket files always remain on the system, they're not even created by the application
22:06 < AAA_awright> (I mean I guess they can be, if it doesn't already exist)
22:06 <@MI6> joyent/node: Brian White master * aca275f : stream_wrap: fix memory leak on early return - http://git.io/5PWXcw
22:09 < marshall> hey node
22:10 < marshall> npm is completely screwed on my EC2 instance. I've reinstalled node and deleted /usr/local/lib/node_modules as well as ~/.npm and it's still hangs forever whenever I use `npm`
22:12 <@Nexxy> marshall, does it happen on any other instances?
22:14 <@TooTallNate> marshall: invoke npm with -ddd
22:14 <@TooTallNate> that's triple debug :p
22:16 < marshall> Nexxy: not
22:16 <@Nexxy> marshall, how about a new instance? :D
22:17 < AAA_awright> Don't use npm?
22:17 < tombandon> in restify api i see the use of next() after sending the response to the client. In express I could just res.end(). So why call next, what if there is no next right now? 
22:18 < marshall> AAA_awright: u srs?
22:19 <@Nexxy> marshall, AAA_awright is never serious
22:20 < mscdex> srsly
22:22 < AAA_awright> marshall: I just use GitHub
22:23 <@TooTallNate> marshall: srsly, run with -ddd
22:23 < dypsilon> So I want to run git commands form inside a node script, how would you do it? Use node-git? Use node-shell? Plain child_process.exec?
22:25 < marshall> TooTallNate: doing `sudo npm install -g -ddd supervisor` yields no output; hangs forever
22:26 <@TooTallNate> well shit 
22:34 <@MI6> joyent/node: Timothy J Fontaine master * 56492de : test: don't use total_seconds() because of py2.6 - http://git.io/p9re5g
22:36 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
22:45 < jjore> Is this a reasonably correct way to case a number/string to just a string for extraction:
22:45 < jjore> In `"ESC" == String(code).substring(0, 3)`, I can't be sure that I even can call .substring() until I at least pass it through a constructor.
22:46 < jjore> Right?
22:48 <@TooTallNate> jjore: if "code" is something other than a string, than ya, what you're doing is right
22:49 <@TooTallNate> but if "code" is *always* already going to be a string, then you can skip the String() part
22:49 < jjore> Well yes, were it already a string, no further construction would need doing.
22:49 < jjore> Thanks.
22:50 < OliverJAsh> the docs for Kue state that you can secure it using "TLS, or adding additional middleware like Connect's basicAuth()" https://github.com/learnboost/kue#securing-kue. i'm only really familiar with basicAuth. if i have kue on a production site, and i need a way to connect to the Kue interface, what is the best way to do this? is basicAuth safe? tjholowaychuk 
22:50 <@MI6> joyent/node: Timothy J Fontaine v0.10 * cf87ee6 : test: don't use total_seconds() because of py2.6 - http://git.io/D9nP-w
22:51 < dypsilon> OliverJAsh, basic auth is ok over ssl
22:51 < dypsilon> not ok without ssl
22:52 < marshall> TooTallNate: so uh... should I just dump the instance?
22:56 < LegCow> dypsilon: for a new app, would you recommend just basic over ssl? considering i need the traffic encrypted not just tamperproof
22:56 < LegCow> dypsilon: oauth just seems overkill
22:57 < dypsilon> LegCow, oauth (2) is not authentication
22:57 < LegCow> dypsilon: i hadn't looked into it, is it just authorization?
22:57 < dypsilon> LegCow, yes, ssl is the only real option if you have a browser + server app
22:58 < LegCow> awesome
22:58 < dypsilon> LegCow, oauth 2 is only authorization, openid connect is authentication for oauth 2
22:59 < dypsilon> openid connect is designed for third party authentication, like google login etc.
23:00 < dypsilon> so it's not a http basic alternative
23:04 < jmw> thank you to no one for answering my question
23:04 < niggler> what was your question jmw
23:04 < dypsilon> rage quit
23:05 < niggler> ilol
23:07 < heath> hey guise
23:07 < heath> https://gist.github.com/heath/5536901
23:07 < heath> any ideas why the delay in awesome?
23:08 < niggler> most likely a problem with the foobarz package
23:09 < niggler> heath try getting rid of the npm call in your preinstall script
23:10 < heath> niggler: i put that in there because i'm receiving this issue otherwise: https://github.com/isaacs/npm/issues/3269
23:11 < heath> another way to fix that error on my local box was to remove ~/.npm and ~/.node-gyp
23:11 < niggler> can you force it to use a different version of node?
23:11 < heath> yerp
23:12 < niggler> make it use something from the 0.8 series
23:12 < heath> guess i'll try some official release below 0.1.*
23:12 < heath> kk
23:12 < niggler> also don't use heroku :P
23:12 < heath> :D
23:13 < heath> the person already has the url
23:13 < crashsystems> Does anyone know if it is possible to use the TLS module to establish a connection with a server, but specify the SSL/TLS version, cipher and key size?
23:13 < dypsilon> node < 0.1.*
23:13 < dypsilon> :O
23:13 < heath> and i don't want to tell them, ohai, you should look @nodejitsu.com/beepboop
23:13 < heath> because they might go to the heroku site later
23:13 < heath> also heroku has support for rails n stuff
23:13 < niggler> the answer is to make your own url
23:13 < heath> which is handy for when i'm not using js
23:13  * heath covers his mouth
23:14  * heath didn't say that ;D
23:14 < niggler> i.myself.me
23:14 < niggler> lol heath
23:15  * heath hangs out in nodejitsu and is a fan for what it's worth
23:15 < heath> #nodejitsu rather
23:15 < dypsilon> i also had rails installed once
23:15 < heath> :P
23:16  * crashsystems bashes head against TLS module
23:16 < heath> interesting, heroku ignored my postinstall command
23:17 < heath> which the app *kind of* depends upon
23:17  * heath flogs poop in #heroku
23:17 < niggler> sadly, i recommend azure
23:18 < dypsilon> niggler, do you have something in production on azure? how is your experience?
23:18 < LegCow> azure worked quite well for me, having some issues connecting to an azure sql database
23:19 < niggler> i don't have anything in production with any of these systems, but I've been testing azure and heroku and nodejitsu for some small stuff and found azure to be a pretty good platform 
23:19 < niggler> i wouldn't have tried it had it not been free
23:20 < kenperkins> niggler: i presume you mean as a platform, and not vms
23:20 < niggler> you get some service as part of bizspark
23:20 < niggler> they have both
23:20 < LegCow> the azure npm module seems pretty extensive too. not much support for the sql database unfortunately
23:20 < niggler> you can run VMs (added recently kenperkins )
23:21 < kenperkins> oh, I know, I'm just saying you're evaluating them to run a node app as a first class experience right?
23:21 < niggler> the .cloudapp.net services are running virtual machines while azurewebsite.net is the heroku-like offering
23:21 < niggler> yeah
23:22 < kenperkins> I'm hopeful to encourage us to start a platform option, not just as cloud assets
23:22 < niggler> kenperkins what's your affiliation?
23:22 < kenperkins> rackspace
23:22 < niggler> ooh
23:22 < kenperkins> and it goes without saying, our free tier can't happen soon enough
23:22  * kenperkins hates that we don't have one
23:23 < niggler> you lose many potential customers without it
23:24 < LegCow> i wouldn't use something unless i had an opportunity to test it for free
23:24 < jjore> If you're a cloud provider, surely you already know and use https://github.com/panicsteve/cloud-to-butt?
23:24 < heath> kk, maybe i just didn't commit
23:24 < kenperkins> LegCow, niggler ++
23:24 < niggler> jjore that's hilarious
23:24  * heath blames it on the angry orchard hard/dry cider
23:25 < niggler> http://www.flickr.com/photos/rangerrick/8712630706/in/pool-cloud-to-butt
23:25 < LegCow> haha, that may find itself installed on the boss's pc
23:26 < kenperkins> awesome.
23:26 < LegCow> throws 'cloud' around like a buzz word that excites clients
23:26 < niggler> isn't 13.04 the one with ads?
23:26 < heath> for the full size: https://farm9.staticflickr.com/8274/8712630706_86601c9340_o.png
23:27 < kenperkins> LegCow: I hate that all of our products are preceded by cloud now
23:27 < kenperkins> oh well
23:27 < niggler> what exactly is cloud
23:28 < kenperkins> it's nebulous
23:28 < LegCow> vapour, heh
23:29 < niggler> what exactly is nosql
23:29 < jn> is there a way to get prepublish NOT to run on install?
23:29 < jn> in npm that is
23:30 < LegCow> niggler: another flavour of database that is based on documents rather than being relational
23:30 < jn> i only want to preprocess my script when actually publishing, i tried using pospublish to clean up but that is not run after a npm install :(
23:32 -!- mode/#Node.js [+o trevnorris] by ChanServ
23:40 < Franz__> if i put in a cronjob my app.js
23:40 < Franz__> for run each 5 minutes
23:40 < Franz__> it will run two instances in 10 minutes
23:40 < Franz__> or run again if not running?
23:41 < Khazix> anyone familiar with winston?
23:41 <@isaacbw> can you break out of an Array.forEach?
23:42 < niggler> define breakout isaacbw 
23:42 < niggler> you can short circuit
23:42 <@isaacbw> short circuit?
23:42 < niggler> >>> var done = false; var arr = [1,2,3,4,5]; arr.forEach(function(x) { if(done) return; console.log(x); if(x > 2) done = true; }) @ isaacbw 
23:42 < purr> isaacbw: undefined; Console: 1, 2, 3
23:42 < Havvy> That's not short circuiting.
23:43 <@isaacbw> it would be nice to just be able to return false from the callback function
23:43 < jn> if you use Array.every you can return false
23:44 <@isaacbw> ah, thanks
23:44 <@isaacbw> I don't think I need it anyway :/
23:47 < s5fs> I'm using child_process.spawn() to launch another executable, but when my node process dies it doesn't kill this child. How can I ensure the spawned process dies as well?
--- Log closed Wed May 08 00:00:04 2013
