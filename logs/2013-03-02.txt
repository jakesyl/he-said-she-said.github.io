--- Log opened Sat Mar 02 00:00:01 2013
00:00 < st_luke> you gots it
00:00 < st_luke> mbalho: if its a private repo you might wanna try git+ssh://git@github.com:user/repo.git
00:01 <@mbalho> private repos are for suit wearers!
00:01 <@mbalho> :P
00:01 < st_luke> mbalho: i half agree
00:02 < st_luke> private repos are also for when the code isnt good enough for open source
00:02 <@mbalho> nope
00:02 <@mbalho> invalid reason
00:02 <@mbalho> readme 'do not use' is for that scenario
00:08 < dominictarr> chilts: hey, what was the windows manager you where telling me about?
00:26 < ccowan> When testing libraries I end up using sinon.js to mock out all the dependencies. Is that a common approach?
00:37 < MI6> joyent/node: Lars-Magnus Skog master * 4b20f34 : doc change for Readable._read() - http://git.io/BNiriw
00:38 < samholmes> Would it be backwards to use dnode as a socket.io replacement?
00:39 < samholmes> right now I'm using dnode as the medium for user agents to communicate to servers, and visa versa.
00:39 < samholmes> Is this a bad idea?
00:40 < samholmes> When should I be using dnode?
00:41 < crabtree> who wrote those ugly examples
00:41 < crabtree> on wikipedia
00:53 < MI6> joyent/libuv: Ben Noordhuis master * 7e59f9b : linux: make uv_cpu_info() handle absent procfs  Return an error when read - http://git.io/RK6qLQ
00:53 < MI6> joyent/node: Ben Noordhuis master * 7707acd : deps: upgrade libuv to 7e59f9b - http://git.io/BIv41g
01:07 < pandeiro> there's a guide somewhere for how to build node.js CLI scripts that include dependencies, right? can someone point me there?
01:17 < MI6> joyent/node: Ben Noordhuis v0.8 * 7189b3e : crypto: don't assert when calling Cipher#final() twice  Remove the assert - http://git.io/saAf3Q
01:27 < samholmes> http://stackoverflow.com/questions/15169593/node-js-real-time-stuff-with-dnode-shoe-and-all-about-load-balancing
01:28 < samholmes> Could someone help me out. I know it's very vague, but I just need to get my head in this problem, and any questions thrown at me would help me.
01:35 -!- mode/#Node.js [+o sblom] by ChanServ
01:40 < MI6> joyent/node: Trevor Norris master * d1b4dcd : events: add type checks to once  Also cleanup unnecessary use of "self" s (+9 more commits) - http://git.io/7os0Zw
01:47 < MI6> joyent/node: bnoordhuis created branch test-unlink-path - http://git.io/b0MR7Q
01:48 < MI6> joyent/node: Ben Noordhuis master * 93156a6 : test: unlink temp file at test start  The file has a long name that's app - http://git.io/F6_eFQ
02:30 < luckysmack> are there any good oracle connectors in node?
02:49 < asdf12> hey guys
02:58 < asdf12> where do designers hang out? just curious, if you wanted to talk to programmers you'd be on freenode, but what about designers?
03:02 < gluxon> asdf12: It's hard to find designers.
03:03 < gluxon> Freenode has 99% population of web designers :)
03:03 < gluxon> Graphic designers on the other hand...
03:16 < yept> anyone here have a express + nodetime app?
04:19 -!- mode/#Node.js [+o TooTallNate] by ChanServ
04:35 < SrPx> So I can't build node.js on my VPS server because the python version is 2.4 and I don't have access to sudo to update it.
04:35 < SrPx> Anyway I'm wondering, can't I just build on my osx and transfer it? That wouldn't work?
04:39 < doolinkr> Hey guys -- I'd like to reload a session (to reset the maxAge) with every request. Is there a better way to do this than manually reloading in every place I write lines for a request...?
04:40 < doolinkr> (using Connect/Express)
04:41 < yept> anyone here have a express + nodetime app?
04:42 < longshaft> is there a way to clear all previous vars and function definitions in the node console?
04:50 <@mbalho> ctrl+c
05:12 < someprimetime_> Question: I'm fetching a thumbnail and downloading it using embedly depending on if the URL entered validates… but I'm wondering where to do it. I have 2 options. First is on the blur event of the input field for the URL I make a call silently and if it returns an image, I return that and put it in a hidden form field and send it along with the rest of the form content. 2nd option would be to just check when the form is 
05:12 < someprimetime_> POSTed, but I wanted to cut down on the wait time
05:12 < someprimetime_> Thoughts?
05:12 < someprimetime_> Discuss.
05:28 < niggler> hey im having npm issues
05:29 < niggler> i tried to npm login from a second machine so that I could push a change
05:29 < niggler> and then couchdb broke
05:38 < niggler> isaacs you awake?
06:00 <@mbalho> open an issue ya dingus
06:00 <@mbalho> its 10pm on a friday
06:00 < wwicks> party oclock in san fran
06:01 < niggler> its 1 AM saturday
06:01 <@mbalho> niggler: not in node.js standard time
06:02 < niggler> lol mbalho when joyent moves to NY then itll change
06:03 <@mbalho> NY is for suit wearers, isaacs wears vibrams
06:05 < niggler> that's a myth
06:05 < niggler> ok https://github.com/isaacs/npmjs.org/issues/97
06:06 < niggler> lol nvm wrong repo
06:06 < niggler> actually this is confusing
06:06 < niggler> strictly speaking, this is affecting the particular couchdb configuration and not npm as a utility
06:39 < longshaft> how do you write things other that strings with response.write() ? 
06:40 < kperkins|away> eh?
06:40 < longshaft> response.write("hello world") 
06:41 < longshaft> var v = 7; response.write(v); 
06:55 < kevireilly> longshaft: that doesn't work? suppose you could try response.write(v.toString());
07:05 < asdf12> hi
07:08 < wwicks> longshaft: you'll need to convery it to a string… afterall, it will be a string in the http response
07:08 < wwicks> *convert
07:15 < samholmes> I heard about AngularJS
07:16 < samholmes> I'm not sure I'm sold on it
07:17 < chakrit> c
07:17 < chakrit> whoops sry
08:14 < fent> hello, where can I find documentation about the differences between setImmediate and process.nextTick?
08:16 < wwicks> fent: https://github.com/joyent/node/pull/3845
08:22 < samholmes> Anyone away? :)
08:22 < samholmes> awake*
08:22  * samholmes isn't even awake, aparently
08:23 < wwicks> It's 5oclock somewhere
08:23 < samholmes> it's 12:20 here
08:23 < samholmes> AM
08:24 < samholmes> :D
08:24 < samholmes> Is there a simple way to collaboratively edit code with people?
08:25 < wwicks> good morning fellow 'PST'er
08:25 < wwicks> you want google docs for code?
08:26 < wwicks> …I swear I've heard that tag line somewhere
08:28 < JuPe> That would be nice, google doc kind of cloud editor for code..
08:29 < wwicks> oh… here's where I saw it: https://c9.io/
08:29 < CarlosMecha> It could be crazy haha, how about github gist?
08:30 < wwicks> except, I don't think they mean you can have multiple editors at once… do they?
08:30 < wwicks> someone in here is from cloud9.. I'm sure of it :D
08:31 < wwicks> Cloud9 IDE now enables developers around the world to edit the same code and chat together in real-time. Developers can pair program, review code, get an audience involved, or teach a group of students the art of programming.
08:31 < CarlosMecha> that's cool
08:32 < wwicks> samholmes: so there you go!
08:32 < fusiongrokker> in express, req.host gets the hostname of your app, right? not the hostname of the user's connection?
08:32 < samholmes> wwicks: I don't get the tagline. :P
08:32 < rendar> wwicks: cloud9 is cool, but if it'd be a desktop client instead to run inside the browser, it could be far better, imho
08:33 < samholmes> wwicks: Oh yeah, I was actually looking at cloud9 again before you said anything> :P
08:33 < geNAZt> rendar: cloud9 is designed to run in a browser so you can use it everywhere
08:33 < wwicks> rendar: yeah, I've tried to use it a few times- but it just didn't cut it (yet)
08:33 < samholmes> rendar: If there was a platform to host it on the desktop. ;)
08:33 < rendar> samholmes++
08:33 < rendar> i agree :)
08:33 < rendar> wwicks: cut it ?
08:34 < rendar> geNAZt: i know, but as you know, desktop stuff can be portable
08:34 < geNAZt> you cann install cloud9 into an appjs application if you need to
08:34 < geNAZt> :D
08:34 < samholmes> What if node.js apps could be client-side apps :P
08:35 < geNAZt> then you should use appjs :D
08:35 < geNAZt> or build a gtk binding
08:35 < rendar> doesn't app.js uses webkit?
08:35 < geNAZt> appjs is a native window that uses the webkit html parser to create stuff
08:35 < rendar> AppJS uses Chromium at the core so you get latest HTML 5 APIs working -- yeah! so its like having a browser :)
08:36 < geNAZt> redar: no
08:36 < rendar> ?
08:36 < geNAZt> appjs has no layer between nodejs and a "browser"
08:36 < iksik> aand, you have full filesystem access -_-
08:36 < geNAZt> appjs uses the libwebkit (which is a html5 render) to render html
08:36 < geNAZt> nothing more
08:37 < rendar> geNAZt: thats what exactly a browsers does..
08:37 < rendar> (more or less)
08:37 < geNAZt> you have a native window, clipboards
08:37 < geNAZt> rendar: a browser has its own javascript engine and relies on a http server 
08:38 < geNAZt> in appjs you dont need this you only us the html5 render do draw the uis
08:39 < rendar> geNAZt: yeah, i know that, but i was saying that if cloud9 would run in a desktop environment, instead inside a browser (so basically inside webkit) would be powerful..imho
08:39 < rendar> more powerful*
08:39 < geNAZt> i dont think so
08:41 < rendar> geNAZt: you could do more things
08:41 < geNAZt> which things can you do on a desktop that you cant do inside a html5 renderer ?
08:42 < rendar> geNAZt: for example having a threadpool that open a bunch of local files without interrupting the main UI thread
08:42 < rendar> this is the first thing that come in my mind
08:42 < geNAZt> appjs can do that
08:42 < geNAZt> and webkit has webworkers
08:43 < geNAZt> and in nodejs you dont block on io
08:44 < iksik> webworkers can't help You with bloated DOM (rendered ACE x NUMBER_OF_FILES)..  juuust saying....
08:44 < rendar> ^
08:45 < rendar> geNAZt: with a desktop application you will have much more control on that, and on local stuff, for example consider a debugger!
08:45 < iksik> but still, for desktop... there is sublimetext! ;-P
08:45 < geNAZt> for desktop there is webstorm
08:45 < geNAZt> yes you can use appjs
08:45 < geNAZt> that binds nodejs as a javascript engine and uses webkit to render the dom html
08:46 < geNAZt> you can inject from 4 nodejs cluster forks into one libwebkit window
08:46 < geNAZt> thats no problem
08:48 < JuPe> What about code (library/function/etc) reuse services? Do you know if there is some..?
08:50 < geNAZt> JuPe: some modules in nodejs can be used in browsers
08:50 < geNAZt> and in general you can use browserfy
08:52 < sinclair|work> hello everyone
08:52 < sinclair|work> anyone here worked on operational transformation before?
08:53 < sinclair|work> because, i have just found a awesome library to make things possible
08:53 < sinclair|work> (and save on optimization and complexities of writing the algos yourself)
08:53 < sinclair|work> let me know if you are interested
08:53 < sinclair|work> cheers
08:55 < JuPe> geNAZt: I mean that if users can push own codes to public server which parse code to database... then users could find functions/libraries and 'copy-paste' directly to own project....
08:55 < geNAZt> npm
08:55 < geNAZt> or a gist
08:56 < geNAZt> i dont know if the gist database is searchable
08:56 < JuPe> Its just for node code..
08:56 < JuPe> *npm
08:57 < sinclair|work> whats the node ecosystem like nowadays?
08:57 < sinclair|work> last time i looked, it was impossible to find good projects on npm, most of it was junk libs
08:58 < geNAZt> JuPe you want a system which takes all code and stores it into a db and anyone can search and use it ?
08:58 < JuPe> it would be nice if sw companies could reuse own inhouse source code efficiently..
08:58 < geNAZt> like a snippet database
08:58 < asdf12> i think the problem is the 'finding'
08:58 < geNAZt> yes storing is not the problem
08:58 < JuPe> Yep, something like that i gues
08:58 < asdf12> not whether or not the libs are junk or not
08:59 < geNAZt> well maybe you should build it by yourself
08:59 < geNAZt> i dont think there are open sourced versions of the software to your problem
09:00 < sinclair|work> asdf12: node really needs a standard library above libuv 
09:00 < JuPe> I think so too.. :/
09:00 < JuPe> Maybe i really need to do myself..
09:00 < sinclair|work> a bit of direction would do nodejs wonders, otherwise it could go the way of PHP
09:00 < geNAZt> sinclair|work, why ?
09:01 < sinclair|work> geNAZt: everythings all a bit messy right now
09:01 < geNAZt> i dont think so
09:01 < sinclair|work> well, i kinda do
09:01 < geNAZt> many good libs are out which help you building nice nodejs apps
09:01 < geNAZt> and nodejs itself has a more consitent api then php has
09:02 < geNAZt> consistent*
09:02 < sinclair|work> geNAZt: umm, thats debatable, there is a lot of mish mash of different libraries etc
09:02 < d2dchat_> How do I grab the body from the request obj. Do I need to use bodyParser?
09:02 < sinclair|work> geNAZt: yeah, i really like the nodejs core stuff
09:02 < geNAZt> there are some "core" libs around which you cant avoid if you build something
09:02 < geNAZt> like expressjs for webservers
09:03 < geNAZt> or socket.io, sockjs or enginejs for websocket / rtc
09:03 < d2dchat_> ha nvm
09:03 < sinclair|work> geNAZt: ive warmed up to express, i like how the middleware thing works
09:03 < geNAZt> well middlewares are nice in the webserver way of doing things :D
09:04 < geNAZt> but the thing that i dont like is that middlewares cant be executed in paralell
09:04 < asdf12> i dont know what you mean, there's a lot of great libs out there, just hard to find
09:04 < sinclair|work> geNAZt: why should they be executed in parallel ?
09:04 < sinclair|work> geNAZt: they are order dependent after all
09:05 < geNAZt> because i can parse cookies and the body in parallel because they dont build on each other
09:05 < geNAZt> which would speed up the request
09:05 < sinclair|work> geNAZt: im not sure it would
09:05 < sinclair|work> geNAZt: code doesn't run at the exact same time in nodejs, (unless you are using clusters etc)
09:05 < geNAZt> you can parallel all inits (passport if you have it, bodyparsers, cookieparser, session getting)
09:06 < geNAZt> the things can be done in parallel 
09:06 < sinclair|work> its only pretend parallel 
09:06 < geNAZt> i know
09:06 < asdf12> there is no such thing as parallel in node.js
09:06 < sinclair|work> so, there would be no performance gains at all
09:06 < geNAZt> but the prented way of parallel in node.js is faster then the serial way of middlewares
09:06 < sinclair|work> unless you did some magic with clusters or fibres
09:06 < asdf12> it's the same
09:07 < sinclair|work> geNAZt: its the same
09:07 < geNAZt> i dont think so
09:07 < geNAZt> if you need to wait for the sessionstore (cause its a db) nodejs can handle other stuff
09:07 < geNAZt> i.e. parsing the body
09:07 < sinclair|work> only if you use clusters
09:08 < geNAZt> but middlewares wait for the db
09:08 < geNAZt> no
09:08 < geNAZt> nodejs doesnt block on tcp sockets
09:09 < geNAZt> if you "wait" for the db to respond nodejs can do other things in his eventloop
09:09 < sinclair|work> a wait will block a thread
09:09 < sinclair|work> node js is single threaded
09:09 < geNAZt> nodejs doesnt block
09:09 < geNAZt> it doesnt "wait"
09:09 < sinclair|work> and excluding the magic happening in the core
09:09 < asdf12> geNAZt: yes but you have to realize that when you are waiting on a db, or socket or whatever, node isn't doing anything
09:10 < sinclair|work> ^
09:10 < geNAZt> well thats wrong
09:10 < geNAZt> libuv puts that socket into a queue
09:10 < asdf12> right because node doesn't have to do anything
09:10 < sinclair|work> ^
09:10 < geNAZt> and if the kernel doesnt support queueing libuv spawns a thread for this
09:11 < geNAZt> so you can do other things in the main thread
09:11 < rendar> basically for what i know, node.js is single thread in the meaning that there is a threadpool that does the underlying work [like read() write() or even open()] but at the end only the main thread is signaled of the completion, and the main thread calls the js code callbacks
09:11 < asdf12> i wouldn't call them threads
09:11 < sinclair|work> geNAZt: there is a read buffer, and data is streamed into it over a socket, nodejs will read whatever is sitting in the buffer, 
09:11 < geNAZt> rendar: right
09:11 < sinclair|work> there is no blocking on a socket 
09:12 < geNAZt> correct
09:12 < sinclair|work> it doesn't wait for data on the socket
09:12 < geNAZt> but if the db has a calc delay of 250 ms
09:12 < sinclair|work> the socket pushes data into a buffer, and your node "stream" reads from that buffer
09:12 < rendar> geNAZt: i have always asked to my self what would be if every thred in the threadpool would call directly the js callback
09:12 < geNAZt> node wouldnt sit there and wait till the db returns
09:12 < geNAZt> it handles other stuff till the db socket says "i am ready here is the data"
09:13 < rendar> ^ thats true, and this because of libuv's non-blocking i/o
09:13 < sinclair|work> geNAZt: its entirely possible libuv using threads and IOCP to do all this behind the scenes
09:13 < sinclair|work> geNAZt: however, this has very little to do with middleware
09:13 < rendar> when the db sockets returns data, the operating system alerts one libuv's thread, which in turn alerts node's main thread
09:14 < geNAZt> well not when you have "i/o" in your inits
09:14 < geNAZt> like dbs, filesystems
09:14 < rendar> inits ?
09:14 < geNAZt> bodyParsers, session getting, passport session parsing, passport user getting
09:14 < geNAZt> and so on
09:15 < geNAZt> middlewares force you to do that things in serial
09:15 < geNAZt> but i think many of them can be done in "parallel"
09:15 < sinclair|work> geNAZt: you couldn't do it any other way in nodejs, unless you use clustering 
09:15 < sinclair|work> geNAZt: it would be a nightmare to write and manage
09:16 < geNAZt> well if it is so how do you handle multiple db connections in node ?
09:16 < geNAZt> in serial ? lol
09:16 < samholmes> why wouldn't disqus be working on tumblr; anyone by chance know here?
09:16 < sinclair|work> more or less yes, thats whats happening behind the scenes
09:16 < erione> i want to access child process stdio in another process, some body please help me out
09:17 < geNAZt> if i query 5 database connections
09:17 < geNAZt> node will query them all in a row
09:17 < geNAZt> without waiting for another to finish
09:17 < erione> i was able to access them easily before i upgraded my node to 0.8.18  from 0.6.11
09:17 < geNAZt> and if one finished it returns into a js callback
09:17 < geNAZt> its sort of parallel
09:17 < sinclair|work> geNAZt: not really
09:18 < sinclair|work> geNAZt: it is pretend parallel
09:18 < geNAZt> php would send the query to the dbms and sit there until the result has arrived
09:18 < sinclair|work> geNAZt: sure
09:18 < geNAZt> "normal" c would do the same
09:18 < geNAZt> python would do it
09:18 < geNAZt> perl does it
09:18 < geNAZt> java does it
09:18 < geNAZt> nodejs doesnt
09:18 < geNAZt> :D
09:19 < sinclair|work> yes, but there is a difference between parallel and evented
09:19 < geNAZt> i know that
09:19 < geNAZt> you cant do multiple cpu calc in one nodejs process
09:19 < geNAZt> but you dont block on i/o things 
09:19 < sinclair|work> you can, with clusters
09:20 < geNAZt> so you can fire up many at "once"
09:20 < geNAZt> yes with clusters
09:20 < sinclair|work> and fibres
09:20 < geNAZt> fibres cant do multiple calcs in one process
09:20 < sinclair|work> fibres are non standard things tho
09:20 < geNAZt> they can pause one and execute another
09:21 < geNAZt> but if you have massive cpu calcs i would spin up threads in nodejs
09:21 < geNAZt> and not use a cluster
09:22 < sinclair|work> geNAZt: yeah, id rather use C# :)
09:22 < geNAZt> urgs C#
09:22 < sinclair|work> although, i do miss evented io
09:22 < geNAZt> another windows thing
09:22 < sinclair|work> C# is not windows
09:23 < sinclair|work> its a language
09:23 < sinclair|work> over a runtime
09:23 < sinclair|work> and its cool
09:23 < kevireilly> http://adambom.github.com/parallel.js/
09:24 < sinclair|work> although, i wish it were easy to emulate the evented io behavior of node in C# :(
09:24 < geNAZt> c# needs a runtime which is developed against a .net framework (if i assume it right)
09:24 < geNAZt> and .net (mono) doesnt run fine in linux land
09:25 < sinclair|work> oh?
09:25 < geNAZt> http://i.msdn.microsoft.com/dynimg/IC207631.png
09:26 < sinclair|work> geNAZt: and?
09:26 < geNAZt> so it depends on a net framework
09:26 < sinclair|work> its really no different to Java or Flash or even Dart
09:26 < geNAZt> which is a hell on linux
09:27 < geNAZt> well java runs fine on linux
09:27 < sinclair|work> so does mono
09:27 < geNAZt> mono is bad (i never successed in installing it)
09:27 < sinclair|work> mono even has features .NET doesn't have yet, like the compiler as a service 
09:28 < geNAZt> yes but it handles code other then in the .net for windows
09:28 < sinclair|work> your not making a lot of sense 
09:28 < geNAZt> build a application in c# visual studio and try to compile it under linux (mono)
09:29 < sinclair|work> yes, and?
09:29 < sinclair|work> of course you need to make provisions for the different systems
09:29 < sinclair|work> but all the BCL stuff is pretty much exactly the same
09:30 < geNAZt> well on the side of java / php and nodejs you dont have to care of which system you are running
09:30 < sinclair|work> geNAZt: sure you do
09:31 < sinclair|work> geNAZt: but most of the time, you are not doing system level programming with node
09:32 < geNAZt> yes i would not try to do it
09:33 < geNAZt> but neither would i try to do it in c#, java or php
09:33 < sinclair|work> appjs is pretty cool
09:34 < sinclair|work> C# is a lot better than Java and PHP, its a powerful and easy to use language
09:35 < sinclair|work> anyway, its far better to use the right language for the right job, i wouldn't really do anything serious with nodejs at this time, maybe when its matured more
09:36 < SomeoneWeird> node > c# > *
09:37 < sinclair|work> SomeoneWeird: no mention of F# ?
09:37 < sinclair|work> SomeoneWeird: some would argue F# > C# you know
09:37 < geNAZt> well nodejs is good for webservers
09:38 < geNAZt> but i wouldnt use it for much more
09:38 < SomeoneWeird> i use it for everything
09:38 < SomeoneWeird> (not that I do a lot)
09:38 < SomeoneWeird> sinclair|work, eh, havn't used it
09:38 < SomeoneWeird> its just functional yeah?
09:39 < sinclair|work> SomeoneWeird: oh yeah, its functional :)
09:39 < sinclair|work> SomeoneWeird: and its tops if you do a lot of data transformations 
09:40 < sinclair|work> SomeoneWeird: http://www.tryfsharp.org/Learn/getting-started
09:40 < sinclair|work> if you are curious
09:42 < kevireilly> wtf# silverlight?
09:42 < sinclair|work> SomeoneWeird: looks like they updated it 
09:42 < sinclair|work> you can create F# projects online now, thats kinda neat
09:44 < SomeoneWeird> nic
09:44 < SomeoneWeird> e
09:45 < SomeoneWeird> "Welcome to Try F#! Your system does not support the execution of F# code in the browser."
09:45 < SomeoneWeird> lol
09:46 < sinclair|work> SomeoneWeird: probably need Silverlight....unfortunately 
09:46 < SomeoneWeird> yeah
09:47 < sinclair|work> Silverlight was a mistake
09:47 < sinclair|work> spec wise, and performance wise, it still better than flash tho
09:47 < sinclair|work> but that doesnt make it any less of a mistake
09:50 < SomeoneWeird> well, yeah
09:51 < samholmes> Which is better, Debian or Ubuntu?
09:52 < geNAZt> samholmes, for which purpose ?
09:53 < samholmes> Hosting Node.js apps
09:53 < geNAZt> debian
09:54 < samholmes> 64 bit or 32?
09:54 < geNAZt> how much ram u have ?
09:54 < samholmes> geNAZt: I'm getting 512MB
09:54 < geNAZt> then 32
09:54 < samholmes> for 5 bucks at digitalocean
09:57 < samholmes> That was easy. :P
09:58 < samholmes> When I set up a new server, i guess I want a web user?
09:58 < samholmes> What's a good way to secure a VPS?
10:00 < kevireilly> lock all the things
10:03 < kevireilly> samholmes: you may be better off using something where you don't have to worry about that aspect like joyent, heroku, appfog, etc
10:03 < samholmes> kevireilly: but they don't give me full control
10:03 < kevireilly> full control over running a node app or what are you specifically looking for?
10:04 < ankr> Hello, I tried to install appjs under ubuntu 12.04 using `npm install appjs`, but got an error telling me to tell the owner that `node-gyp rebuild` failed.
10:04 < geNAZt> samholmes: for normal i would use a user per nodejs application and a user that binds to the port 80
10:05 < kevireilly> ankr: perhaps a pastie of the output would help but try it again with sudo prepended
10:05 < geNAZt> on port 80 i would use some loadbalancer / cache (varnish or haproxy or nginx)
10:05 < ankr> kevireilly, I already tried sudo, sec with paste
10:05 < geNAZt> and for the rest i would use iptables to block all port except port 80, 443, 21, 22
10:05  * kevireilly would use haproxy unless crazy shit was required for nginx, otherwise iptables works great
10:06 < samholmes> kevireilly: digitalocean is cheap. Joyent, not so much
10:06 < samholmes> I get full root access to a vps
10:06 < geNAZt> on 512 mb i would use haproxy
10:06 < geNAZt> which ip does the vps have ?
10:07 < geNAZt> a secured (firewall) or a open (direct connection)
10:07 < ankr> kevireilly, http://pastie.org/private/epqtw0mt9bi4w7cak4iaq
10:07 < rendar> basically the job of haproxy is to accept a bunch of connections, and send them in a smooth and managed way to nginx or other http servers?
10:08 < geNAZt> yes thats its job
10:08 < rendar> i see
10:08 < geNAZt> i would "split" connections up
10:08 < rendar> geNAZt: but what about that bunch of connections directly goes to the http server? i mean, nginx is famous for its ability to manage a bunch of connections, what would be the problem?
10:08 < geNAZt> so if you have 150 incomming connections they get splitted up onto the nodejs applications
10:08 < kevireilly> haproxy uses a single core, as does node.js.. with one core, guess what's going on there? I would not recommend the overhead of haproxy for routing requests from port 80 to 1234
10:09 < kevireilly> use haproxy for proxying, load balancing, etc -- a separate server just for that
10:09 < geNAZt> yes that would be the optimal
10:10 < kevireilly> sudo iptables -A PREROUTING -t nat -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 8080
10:10 < geNAZt> the optimal way to do would be using a varnish proxy which can handle static files for you
10:10 < geNAZt> but you only have 512 MB ram
10:10 < kevireilly> ah yeah serving static files is a whole different bag of bagels
10:10 < geNAZt> kevireilly, that only would be used if you cant bind to port 80
10:11 < geNAZt> since it doesnt add any security for your nodejs application
10:11 < geNAZt> like varnish or haproxy would do
10:11 < kevireilly> geNAZt: can you by defualt?
10:12 < kevireilly> but why add some other program in front of it just to route requests from port to port
10:12 < geNAZt> bind to port 80 ? no but you can grant a user the rights to do it
10:12 < kevireilly> ahh right, the root to port 80 aspect
10:12 < geNAZt> root to port < 1024 :D
10:12 < geNAZt> > 1024 *
10:13 < geNAZt> lt 1024 :D
10:13 < geNAZt> i would add a proxy to prevent flooding
10:13 < geNAZt> and to keep the port up if your nodejs system fails
10:15 < kevireilly> the notion of running either haproxy, nginx, apache, anything in front of node on a 1 "core" 512 vps seems excessive. If those are concerns, the architecture should be different
10:15 < geNAZt> yes
10:15 < samholmes> well
10:15 < samholmes> i'ma go to bed
10:15 < samholmes> night
10:18 < kevireilly> geNAZt: sorry, i'm not trying to be a dick, just love constructive conversations ;)
10:19 < aandy> kevireilly: there may be other reasons to use haproxy or nginx than threading :)
10:21 < kevireilly> aandy: absolutely, but given the context of the situation and port forwarding, i would say overkill. Less is more especially when you're starting out with minimal
10:21 < kevireilly> i guess i've not tried much at that low of specs so i really shouldn't talk
10:22 < aandy> agreed, let the router handle it. just saying you can easily run into a situation where it'd be nice to have haproxy in front :)
10:22 < aandy> static files were mentioned, handling fileuploads in non-express node, handling websockets in another for instance
10:23 < aandy> there are node proxies too though ;)
10:24 < kevireilly> ah i must've missed all that
10:24 < aandy> https://github.com/nodejitsu/node-http-proxy this one i think
10:25 < kevireilly> it works but does not compare to haproxy from what i understand
10:25 < aandy> beats me, haven't tried it
10:27 < kevireilly> I haven't used it directly but have been using it via learnboost/up -- there is some performance comparison i can't find now of course
10:29 < kevireilly> haproxy is purpose built low level
10:29 < aandy> by now my overly architected setup would probably be a bad fit. utilizing a bit complex acl setup in haproxy, so i'll keep that for now ;)
10:29 < aandy> just throwing it out there that it exists
10:31 < kevireilly> aandy: may I ask what version you're using?
10:31 < Kakera> is libuv's common.gypi based on something?
10:31 < Kakera> I want the Debug/Release build configurations, but not libuv-specific stuff in it
10:31 < Kakera> I could of course strip out the unrelated stuff
10:32 < kevireilly> Kakera: I am noob, but seems there is #libuv also in case you don't get any useful responses here
10:32 < aandy> 1.5-dev17
10:33 < Kakera> oh thanks
10:33 < kevireilly> aandy: ah! nice. So far, so good? Using it in production?
10:33 < aandy> yeah, but not using ssl yet
10:33 < kevireilly> that was my next question :)
10:33 < aandy> hehe
10:34 < aandy> i did try it and it seemed to work fine, but i didn't have a need for it
10:35 < kevireilly> Good stuff. I've not been forced to use it yet as we temporarily went non-ssl but it is on the eventual horizon before reaching production
10:37 < kevireilly> I'm guessing they didn't release something completely broken. To stable, or not to stable.. that is the question haha
10:37 < aandy> all important questions in conjunction with to scale or not to scale
10:37 < kevireilly> that is unfortunately the main goal :( all of which I'm new to
10:39 < aandy> gotta say the thing i was the most surprised with was the performance of putting every autocomplete _search_ into memcache. as in, you start typing "he" and it'll cache the response for that. took a sec to add, and it works great because our autocompletedb is relatively easy to expire
10:39 < aandy> that is, it doesn't change often (once a week), and we can work out backwards which hashes to expire
10:40 < aandy> not perfect, but memcache is also cleared once in a while :p
10:41 < Guest26574> So, I got node v0.8.21 running on my HTC EVO 4G LTE a bit ago
10:41 < Stephen> Oops
10:42 < Stephen> So, I got node v0.8.21 running on my HTC EVO 4G LTE a bit ago
10:42 < kevireilly> aandy: oh yeah, totally. What are you guys using for persistent data storage or whatever would have otherwise served those results?
10:43 < aandy> two sphinx daemons and two pgsql for lookups
10:43 < kevireilly> Stephen: nice! congratz
10:44 < kevireilly> aandy: oso! how are you liking sphinx? ive not tried it yet, only solr
10:44 < Stephen> Not really sure of a purpose yet
10:45 < Stephen> I wish I could have just used the v8 libs already on the phone, but node doesn't seem to work that way
10:45 < aandy> conversly i've not tried solr only elasticsearch, hehe. sphinx itself works for this project because it's litteraly just autocomplete we need. for an actual search function i'd use elasticsearch
10:45 < Stephen> As it stands I had to use Debian Kit to get it build ready
10:46 < aandy> i mean, sphinx has stemmers, soundex and such, but they generally didn't give results that were good enough compared to elastic search (which i guess is the same as saying solr)
10:46 < kevireilly> Stephen: perhaps you can draw some inspiration from app.js and node-webkit
10:48 < kevireilly> aandy: interesting, not familiar with those terms particularly so i may be lacking in my mental comparison
10:49 < kevireilly> i was originally asking because we're using couchbase (not for search in this project) which is a persistent data store based on memcache, membase, and couchdb
10:50 < aandy> stemmers and soundex? stemmers are word-root'ers, like dogs -> dog, running -> run etc. soundex, and the like, is comparison of sounds. you ~= yew - e.g. say you hear a name on the radio and want to search for it but don't know how it's spelled
10:50 < aandy> kevireilly: that'd do equally well as pgsql in our case, but would've been overkill
10:52 < kevireilly> aandy: ahhh gotcha, suggestions and odd synonyms of sorts.. very cool!
10:53 < aandy> theoretically yes, in practise it mainly for minor spelling errors
10:53 < aandy> like leik
10:53 < kevireilly> mkaes sesne
10:53 < aandy> but last time i used it was in the context of drunk search, so we went out of our way to get spelling restored
10:54 < kevireilly> lol now that sounds like an awesome project
10:54 < kevireilly> random Q, where you from, aandy?
10:55 < aandy> denmark
10:56 < kevireilly> nice, explains why you might be wide eyed and bushy tailed at my hour (3am/0300)
10:56 < kevireilly> 0253 whatever same thing ;)
10:57 < aandy> 12 here :p
10:58 < asdf12> i wouldn't mind a windows development machine
10:59  * kevireilly eye's upon finding out he has to go into the office tomorrow http://gifs.gifbin.com/1801548g64.gif
11:00 < kevireilly> asdf12: vmware/virtualbox?
11:00 < kevireilly> and a legally obtained image haha
11:02 < kevireilly> *eyes
11:02 < aandy> asdf12: azure is pretty quick to set up. unless you're looking to do wp8 development
11:02 < asdf12> more for c#, .net stuff, to learn
11:02 < aandy> ok, then it should be fine
11:14 < sinclair|work> aandy: nodejs runs fine on azure
11:14 < sinclair|work> aandy: also, you dont need to do any C# at all on azure, you do need a web.config if you are running node on the websites tho
11:15 < sinclair|work> aandy: however, azure has a dedicated node runtime environment, where you can go to town and do whatever you want
11:15 < aandy> hm? we werent talking about running node, he was saying C# and .net :P
11:15 < sinclair|work> oh
11:15 < sinclair|work> well, C# and .net are awesome
11:16 < sinclair|work> azure doesn't have anything to do with win8 tho
11:16 < sinclair|work> tho, you can provision a win server 2012 up there
11:17 < aandy> i know. set one up yesterday - now i can't use it for anything. trial wasted :p
11:17 < asdf12> thats wild
11:18 < sinclair|work> aandy: i mostly use Azure for the websites and database
11:18 < asdf12> that possibly one day, if you're driving on a dim lit street or there's heavy fog
11:18 < asdf12> you can load up google maps and drive along and see the street as if theres no fog
11:18 < aandy> and the other cars too?
11:19 < sinclair|work> asdf12: google glass killer app there !
11:19 < asdf12> motion sensors and stuff
11:19 < sinclair|work> radar
11:19 < aandy> take a look at the latest top gear
11:19 < aandy> yeah
11:19 < aandy> entire minecraft grid realtime
11:19 < aandy> :p
11:19 < asdf12> you realize in 2025 or so
11:19 < asdf12> websites will have to be in 3d
11:20 < asdf12> that'll be weird
11:22 < asdf12> i'm not ready for that kind of change, give me my telephone with the rotary dial
11:22 < aandy> i'll make my own web
11:23 < aandy> thank you very much. with inverted 3d effects and hoo- arrh
11:27 < asdf12> why did they get rid of the 17" mbp :(
11:37 < kib0_> #join mongodb
11:41 < asdf12> its nice to see more remote jobs being posted
11:41 < asdf12> slowlyyy
11:41 < geNAZt> hate my wlan -_-
11:42 < geNAZt> mongo hates my wlan :D
11:42 < kib0_> so, i guess ill post it here and see if anyone knows the answer
11:42 < kib0_> is there a way to limit the number of subdocuments in a query?. 
11:42 < geNAZt> yep there is
11:43 < kib0_> care to point me in the right direction?
11:44 < geNAZt> you have stored the subdocuments inside the document as array ?
11:44 < kib0_> yes
11:44 < geNAZt> if so mongo can use the normal slice array prototype for that array
11:45 < Barbus> sdf
11:45 < geNAZt> / skip ordinalNumberOfState -1, limit 1
11:45 < geNAZt> db.countries.find({_id: 1}, {states:{$slice: [ordinalNumber -1 , 1]}}) 
11:45 < geNAZt> http://stackoverflow.com/questions/9289384/select-only-subdocuments-or-arrays
11:46 < kib0_> ty ty
12:17 < steffkes> hey guys, i'm trying to test a webservice .. and i'd like to see that the test-scripts starts its own instance of the node.js app (on a separate port).
12:23 < darrenlooby> hi all
12:26 < steffkes> uhm .. { env : { PORT : 6000 } } as third argument for child_process.spawn throws an error .. but if i use the current's process.env + merge PORT : 6000 in it's okay .. why's that !?
12:31 < fullmooninu_> hey guys!
12:32 < fullmooninu_> i wana know how to create a simple app where users can cooperate on altering the dom model.
12:32 < fullmooninu_> you know, like they all can click on stuff and stuff happens
12:32 < fullmooninu_> and everyone sees
12:32 < fullmooninu_> you got a tutorial form me ? =O
12:32 < fullmooninu_> *for
12:34 < fent> where can I find the api docs for v0.9?
12:35 < fullmooninu_> real time collaboration
12:35 < fullmooninu_> that's what i want
12:35 < fent> i see i've found them, nevermind
12:37 < astropirate> fullmooninu_, huu?
12:37 < astropirate> co-browsing?
12:38 < astropirate> where one person can go about browsing clickign etc
12:38 < astropirate> and another user can watch?
12:43 < PayPaul> astropirate, like goinstant.com
12:45 < astropirate> PayPaul, well, its relatively simple really
12:45 < astropirate> use jquery send the whole DOM over :)
12:45 < astropirate> and replace the watchers DOM
12:46 < astropirate> for the mouse cursor, uyou willneed to use soem kind of an image
12:46 < astropirate> and just when the user moves his mouse, you just send that data over to the watcher, and the image moves as well
12:48 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:00 < geNAZt> does anybody know a route helper for expressjs ? for using route building in templates
13:02 < fullmooninu_> paypaul , astropirate, more like http://j-query.blogspot.in/2010/11/collaborative-painting-with-nodejs-and.html?showComment=1328287476281#c5293841626679585051
13:03 < fullmooninu_> but i want all users to give me a url for an image, add that to a table on the page, so that everyone can see, and i want people to be able to click on each other's image
13:03 < fullmooninu_> and then stuff to happen´
13:06 < astropirate> fullmooninu_, i see. in this case, you would hold a state of the image on the server, and you continuesly update the clients from this state. when users make a change on their computer, you send what they did to thte  server
13:06 < astropirate> thats one way of going about it
13:13 < Guest10429> i have a Apache/Tomcat JSP application running..I have a socket application running at the same domian at a different port say 3333...Now i want to make this socket program work in the JSP application ...Can anyone guide me how to enable proxy 
13:13 < Guest10429> Iframe..is not working for cross domain..i need lot of variables to be transferred from JSP pages to socket communication i built
13:14 < Guest10429> so i need all of them in a single page...can we do this
13:14 < astropirate> Guest10429, web sockets aren't limited by the same origin policy
13:15 < astropirate> that means, you can connect from a page served by  XYZ.com to a websocket server sitting on HW.com
13:15 < Guest10429> Unsafe JavaScript attempt to access frame with URL http://*****:6789/b1dc1b from frame with URL http://****/hackhome.jsp. Domains, protocols and ports must match.
13:15 < Guest10429> i  get this error
13:16 < astropirate> Guest10429, i dont understand
13:16 < astropirate> why are you using iframes
13:16 < astropirate> to use websockets
13:16 < Guest10429> astropirate :Let me explain..I have custom fork of Ballons.IO chat system and i have another application running at 80 served by my apache
13:17 < Guest10429> and tomcat
13:17 < Guest10429> Ballons.IO sit at 6789 port
13:17 < Guest10429> Apache forwards to Tomcat
13:18 < astropirate> ok
13:18 < Guest10429> Now in the Normal page say exmaple.com/home.jsp page
13:18 < Guest10429> i want to use the Ballons.IO system
13:18 < Guest10429> in a div
13:18 < Guest10429> to side
13:18 < astropirate> i'm not sure what ballons.io is
13:18 < fullmooninu_> astropirate, can you give me a good tutorial, im completely unfamiliar with node and want a quick solution. im doing angular.js tutorials
13:18 < astropirate> lemme look up
13:19 < Guest10429> it is a Chat System 
13:19 < Guest10429> uses Socket.IO
13:19 < fullmooninu_> ty <3
13:19 < Guest10429> and Node.js
13:19 < astropirate> fullmooninu_, yah, look at socket.io
13:19 < astropirate> its quite simple really
13:20 < astropirate> fullmooninu_, ok
13:20 < astropirate> so its the whole thing
13:20 < astropirate> it serves up html and all
13:20 < astropirate> ok
13:20 < Guest10429> astropirate: "its quite simple really"..you meant this for me ?
13:20 < astropirate> woops
13:20 < astropirate> sorry i'm all druged up (cold)
13:21 < astropirate> Guest10429, change your name please? :) its annoying auto complete doenst complete your name
13:21 < Guest10429> SETNAME  nodesock
13:21 < astropirate> Guest10429, so, you are loading up Ballons.IO applicaion from within your JSP page
13:21 < Guest10429> ya.now i am trying to Load
13:22 < astropirate>  the command is:   /nick myAwesomeNick
13:22 < fullmooninu_> checking it out, astropirate
13:22 < nodesock> astropirate: thanks a lot..yes independently both are running fine..now i want it to load inside the JSP page
13:23 < astropirate> nodesock, So you are trying to modify the child frame fromt he parent frame?
13:23 < astropirate> or even access with javascript?
13:24 < fullmooninu_> hey, astropirate, can i have a pvt with you, so i can bombard you with  my questions? =O
13:24 < astropirate> go for it
13:24 < nodesock> My Idea is to take content from my existing JSP page and post using the Ballon.IO app i have..I was trying with I Frames..May be that was dumb...is there a better way
13:25 < astropirate> nodesock, you can expose a cross domain safe interface to your ballon application
13:25 < astropirate> such as JSONP
13:25 < astropirate> or websockets
13:25 < astropirate> or soemthing like that
13:26 < nodesock> No..I am not sure if i am clear...My Baloons.IO is running at demo:6789...do you mean i can jus open a socket to demo:6789 from my jsp page and post data 
13:26 < astropirate> you can if you tell the server to allow it
13:27 < astropirate> http://stackoverflow.com/questions/11181546/node-js-express-cross-domain-scripting
13:27 < astropirate> but you have to be really careful with it
13:27 < astropirate> you don't want anyone just ocming in
13:27 < astropirate> you can set the origin field to your domian that you want to allow
13:28 < nodesock> Ok..let me try this..Thanks for your help...I will bug if you i cant solve it :)
13:28 < astropirate> sounds good
13:42 < nodesock> astropirate : i think i dont even need a iframe..let me try and update you
13:45 < fullmooninu_> nooo 
13:45 < fullmooninu_> astropirate left
13:45 < fullmooninu_> =(
13:46 < fullmooninu_> anyone willing to tut me a bit?
13:46 < asdf12> just ask
13:46 < fullmooninu_> aight. Let me just finish the tutorial i got from him.
14:26 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:32 < ins0mnia> anyone experienced npm taking time to publish an updated module version?
14:33 < tuhoojabotti> taking time?
14:33 < ins0mnia> published an update like 10 minutes ago
14:33 < ins0mnia> usually it goes immediately
14:34 < ins0mnia> there it showed up
14:34 < ins0mnia> took 10-15 minutes
14:34 < ins0mnia> strange
14:36 < mscdex> i love it when benchmarking modules for the first time yields faster than expected results
14:36 < mscdex> \o/
15:18 < reskp> Hi
15:19 < reskp> is it possible to exec a command on nodeJS that execute a bin command not installed globaly ?
15:19 < SomeoneWeird> hm?
15:19 < reskp> Ex: coffee --compile --watch *.coffee
15:20 < reskp> coffee is installed locally
15:20 < SomeoneWeird> yeah the bin file will be in node_modules
15:20 < reskp> yep
15:20 < SomeoneWeird> so just invoke that
15:20 < reskp> not worling because it's installed locally
15:20 < reskp> command not found
15:23 < bahamas> hello. is there a way to specify GET parameters in the request as a special property in the options?
15:23 < bahamas> or can I only set them on the path itself?
15:23 < qubit01> what are you using ?
15:31 < bahamas> qubit01: http
15:31 < bahamas> http.request, that is
15:32 < qubit01> bahamas, seems like not :S, I use a github.com/mikeal/request as a wrapper
15:33 < bahamas> qubit01: hm, ok
15:35 < jammsen> how can i open a url in node?
15:35 < jammsen> i want just to call like jquery $.get
15:36 < havvy> jammsen: You send an HTTP request.
15:36 < jammsen> how?
15:36 < SomeoneWeird> http.request
15:37 < havvy> jammsen: Have you read the Node.js http module documentation?
15:37 < jammsen> i want to remove a client from the queue but when im doing that via jquery on client side i maybe get 25 request so its the wrong way right?
15:37 < jammsen> havvy: im fairly rosted in node.js and i miss my bookmarks
16:13 < lawnsea> can anyone recommend a module for printing tabular data to the console?
16:38 < jhsto> Hi guys, I have a readable stream which I would like to convert into buffer, but I don't know how and when should I do so.
16:38 < jhsto> Is it possible to pipe streaming data to buffer or should it be done on finish event of the stream?
16:39 < tuhoojabotti> On finish I reckon
16:39 < tuhoojabotti> because resizing buffers is impossible
16:40 < jhsto> thanks tuhoojabotti
16:43 < [jasper]> hej guys, what are the most used libraries for websockets atm?
16:44 < jhsto> [jasper], socket.io to name one
16:46 < yept> anyone have an express application running and monitoring with nodetime?
16:46 < [jasper]> jhsto I'm considering creating a proxy using node.js between websockets and tcp sockets
16:47 < [jasper]> but I guess this is hard with all the different libraries out there
16:51 < jhsto> [jasper], socket.io has most fallbacks
16:52 < [jasper]> I could make other socket implementations available on different ports offcourse JHartig|away
16:52 < [jasper]> jhsto I mean
16:52 < [jasper]> is there a library to connect to tcp sockets actually?
16:52 < [jasper]> net library?
16:53 < jhsto> yes, the one which comes with node should do the trick
16:53 < jhsto> you can require it with ('net')
16:53 < jhsto> if i remember right
17:27 < AndChat52500> Does anyone know of an json query languages for node? What's the best one?
17:56 < tklun> Does anyone have any advice on how to mock serial ports for Mocha testing?
18:01 < jhsto> i have a slowbuffer like this: <SlowBuffer 61 c8 10 1b 9d 01 68 f8 49 d8 ae 09 d7 0c ef 9e a4 29 64 c4>, is there a way to extract this data?
18:01 < wwicks> jhsto: what kind of data is it?
18:01 < jhsto> mp3 data
18:02 < jhsto> i think
18:02 < jhsto> but can that line be like 8mb?
18:03 < wwicks> jhsto: yeah. if you did buffer.toString('hex') you'd see the non truncated hex of it
18:04 < jhsto> wwicks, thank you
18:10 < mscdex> jhsto: you can also change how many bytes inspect shows for Buffers via: require('buffer').INSPECT_MAX_BYTES = Infinity;
18:11 < mscdex> that will show all of them
18:12 < jhsto> mscdex, thanks! i've never studied cs in my life, much because there has been no option yet, so im self-teaching myself. ircs and people like you help me a lot
18:13 < MI6> joyent/node: Timothy J Fontaine v0.8 * 0b70a14 : test: optionally set common.PORT via env variable  This is a back-port of - http://git.io/CN5hUw
18:22 < jd823592> Hi, any attempt for https.get fails with an error somewhere in tls. Is there any list of common mistakes, any ideas what might be going on?
18:25 < bnoordhuis> jd823592: what's the exact error you get?
18:25 < bnoordhuis> example code would help
18:26 < jd823592> http://bpaste.net/show/80942/
18:27 < jd823592> min code: var https = require("https"); https.get("https://user:pwd@domain.name/path?query=value", function(){});
18:28 < bnoordhuis> jd823592: 'socket hang up' means the other end has closed the connection
18:29 < jd823592> but it does not close the connection when i access the address from browser
18:32 < bnoordhuis> jd823592: export NODE_DEBUG="net tls" node script.js
18:32 < bnoordhuis> see if that prints something interesting
18:32 < bnoordhuis> s/export/env/
18:33 < jd823592> oh thanks, that might give me some idea, i will try it out
18:35 < jd823592> only thing i notice and that seems to be odd: "TLS: end encrypted undefined"
18:37 < bnoordhuis> jd823592: what version of node is it? also, can you connect with tls.connect()?
18:38 < jd823592> i downgraded from 0.9.3 to 0.8.20 yesterday because i thought it might have been problem with unstable version
18:40 < jd823592> bnoordhuis: i need to create a tls snippet to try out
18:40 < bnoordhuis> 0.9.3 is rather outdated by now. try the latest 0.9
18:42 < jd823592> bnoordhuis: well when i tried 0.9.9 i ran into other problems
18:42 < jd823592> with node-gyp
18:44 < bnoordhuis> jd823592: what kind of problems?
18:45 < jd823592> some package (i dont remember which) could not be build
18:47 < jd823592> btw.: var tls = require("tls"); tls.connect({host: "dynupdate.no-ip.com", port: 443}, function () {}); fails as well
18:48 < bnoordhuis> jd823592: wfm, the connection gets established but the server closes the connection in less than a second
18:48 < bnoordhuis> i wager it's a little overzealous and you're writing too slow
18:49 < bnoordhuis> too slow to its tastes, that is
18:49 < jd823592> bnoordhuis: no way to fix that i guess?
18:50 < jd823592> btw the get request does not have any content
18:50 < bnoordhuis> jd823592: unless you know of a way to hack the server
18:53 < jd823592> my other pc can make the request :/
18:53 < bnoordhuis> jd823592: you're not a windows user are you?
18:54 < bnoordhuis> because in that case you'll want to make sure there's no firewall or virus scanner software interfering with node
18:55 < jd823592> bnoordhuis: i am not, but i must say that "curl https://..." on the box fails as well
18:55 < jd823592> with Unknown SSL protocol error
18:56 < bnoordhuis> jd823592: right, there you go. a server issue, not a node issue.
18:56 < jd823592> or maybe my local tls is screwed
18:56 < bnoordhuis> well, maybe - but node ships with its own copy of openssl
18:57 < bnoordhuis> there could be some kind of proxy between you and the server, of course
18:57 < jd823592> ok curl https://facebook.com is ok :/
18:58 < jd823592> it does not make sense that it works from on PC and not the other in the same net
19:01 < SrPx> Who recommended me digitalocean.com? 
19:08 < jd823592> bye, have a nice day
19:08 < bnoordhuis> jd823592: you too :)
19:08 < jd823592> and thanks again :), bye
19:11 < MI6> joyent/node: Raymond Feng master * 47e1150 : windows/msi: fix msi build issue with WiX 3.7/3.8  The `heat` tool that g - http://git.io/d6d9AQ
19:26 < alec_> does anyone here know about CartoCss
19:27 < alec_> I'm trying to find out if I can have a polygon with an outline that is a different color depending on what it borders 
19:30 < MI6> joyent/node: isaacs master * 2106ef0 : net: Provide better error when writing after FIN  The stock writable stre - http://git.io/JLEs0w
19:40 < stack_> hello
19:42 < squeakytoy> anyone played around with websockets and node?
19:42 < Alamo777> Hello all! Coud someone please explain why should i move and use node,js instead of php? 
19:43 < havvy> Alamo777: Are any of your developers asking you to?
19:43 < havvy> Or co-developers.
19:44 < Alamo777> no i just try to stay in moderin programming world, and i feel ashamed that i am not familiar with node.js abbilities, and where i can use them in what fields?
19:45 < havvy> Well, Node.js lets you write in JavaScript, so you aren't doing a context switch of the language.
19:45 < havvy> Node.js also gives you the power of Event Emitters and asynchronous programs. Which is a huge benefit for me, since I think better asynchronously than synchronously.
19:45 < Alamo777> havvy: yes i realize that moment, but what about other things like speed or some moderin features that node.js has?
19:46 < havvy> Basically, if you've ever used Python's Twisted, Node.js has that baked in.
19:46 < havvy> There's the non-blocking IO that people like to talk about too.
19:47 < Alamo777> havvy: yes i used python but with regular thread stuff, i love python. Should i change my orientation in using node.js?
19:47 < havvy> Well, you could always write a toy program.
19:48 < havvy> Or a toy web app.
19:48 < Alamo777> havvy: i am just in the middle of choosing node.js and python, and it is really hard for me
19:48 < Alamo777> which is better
19:48 < prawnsalad> which do you know more of?
19:48 < havvy> Neither is `better`.
19:49 < havvy> If you want to compromise, try Python with Twisted.
19:49 < Alamo777> prawnsalad: i know Python better then node.js
19:49 < prawnsalad> then use python
19:49 < prawnsalad> as havvy mentioned
19:50 < yene> is there a built in way to write blocking code?
19:50 < Alamo777> what about socket.io that work with node.js and backbone.js? What is backone.js? Where i can use it?
19:51 < havvy> yene: For Node's modules, yes.
19:51 < havvy> The async functions usually have a variant with Sync attached to the name.
19:52 < havvy> I don't know enough about Socket.io or Backbone.js to answer that.
19:52 < Alamo777> havvy: how do you use node.js? Only for  building website ?
19:53 < havvy> A quick glance at Backbone says that it's client side only. Your choice of backend won't matter there.
19:53 < havvy> I work on an IRC framework personally. Though I'm gonna convert a PHP site to Node.js.
19:54 < Alamo777> havvy: how did you learn node.js? Is it hard to start? what usefull papers do you use?
19:54 < MI6> joyent/node: isaacs master * 4ac73d2 : net: s/closed/ended/ in write-after-fin message - http://git.io/V0VvUA
19:55 < havvy> Well, to be honest, I started with jslibs, and then moved to Node.js when I learned about it.
19:55 < havvy> So I've had experience with using JS for console stuff.
19:56 < havvy> It's not hard to start at all.
19:56 < Alamo777> havvy: what exactly can be console stuff be used for? I dont understand that part
19:56 < havvy> command line applications  ;)
19:57 < Alamo777> havvy: i know, but exactly what, some simple examples?
19:57 < havvy> Well, you could use Node-IRC and write an IRC bot.
19:58 < Alamo777> havvy:  yes but i real world i cant imagine where it can be used for the javascript console stuff
19:58 < yene> people still use irc?
19:58 < Hypereive> You can have some administration stuff going on such as... Automatically sorting the 1283 photos of your last vacation by name.
19:59 < Hypereive> Or you can download Wikipedia and start looking into it.
19:59 < Hypereive> All this can be done in console :D
19:59 < Hypereive> Or you can write a server....
19:59 < ylli> hahha
19:59 < Alamo777> Hypereive: yes but this stuff i can do very easily with python
19:59 < havvy> Alamo777: The same place as Python command line apps and Bash scripts.
19:59 < Alamo777> havvy: which is faster node.js or python?
19:59 < Hypereive> it can be done in python, php, C, C#, C++ pretty much anything.... Your point?
20:00 < Hypereive> hmmm...
20:00 < yene> it doesn't matter
20:00 < havvy> Alamo777: Both can be fast. Both can be slow. Most of the time it doesn't matter.
20:00 < havvy> If you need speed, you drop to C/C++ in both cases.
20:00 < prawnsalad> Alamo777: you should just try nodes out for yourself. it will answer most of your questions
20:00 < prawnsalad> *nodejs 
20:01 < Hypereive> People people... When talking about speed you're talking about actual processing speed, development speed? 
20:01 < Alamo777> Hypereive: my point is that i cant understand what is the real puprose for me to learn node.js, i like it very much and i will definitely will learn to use it it for me, but in real world i hardly can find the using of it usefull, i mean only if the client want a node.js application, is the time that it does make a sence for me to use it
20:02 < ylli> hi people
20:02 < havvy> Alamo777: The packaging system is better than Python's. ;)
20:02 < genazt> hi
20:02 < Hypereive> Alamo777: In 2013... Node js is the "simplest" way to get a realtime application up and running.
20:02 < Hypereive> Not the fastest (maybe it is), not the best (maybe it is) but the simplest.
20:02 < Alamo777> havvy: realtime application examples please?
20:02 < Alamo777> for windows you mean?
20:03 < Hypereive> http://trello.com
20:03 < Alamo777> or only web?
20:03 < havvy> http://kiwiirc.com
20:03 < genazt> Alamo777, its handles more concurrent connections with lesser ressources, its easy to learn and to extend (everybody has built js)
20:03 < ylli> can I spek with you ???????
20:03 < genazt> http://tweetping.net/
20:04 < genazt> node.js "realtime" application
20:04 < genazt> you can speak with everybody in here i think
20:04 < Alamo777> havvy: nice website, does it have an android app? or only for browser?
20:04 < genazt> cloud9 is also built on nodejs
20:04 < havvy> Alamo777: I dunno. Ask prawnsalad.
20:04 < Hypereive> http://browserquest.mozilla.org/
20:05 < havvy> Browserquest was only interesting when there were 800+ people connected at once.
20:05 < Alamo777> genazt: wow, thats a thing, this is exactly what i was expecting to see
20:05 < prawnsalad> Alamo777: kiwiirc.com it works under android/iphone/etc, yes
20:05 < Hypereive> Browserquest was done in like Node version 0.0.0.0.0.0.1 I think :D
20:05 < prawnsalad> its a standard website. only the server side is in nodejs 
20:06 < genazt> linkedin uses nodejs as mobile api servers
20:06 < genazt> google uses nodejs for grits game servers
20:06 < Alamo777> node.js is for realtime apps as i understand it is perfect and easy, i think it will be more harder to write such stuff in python then in node.js
20:06 < prawnsalad> really? google mostly use python for there stuff
20:07 < Hypereive> Alamo777: If you ask the only reason why you can only use node for command lines, or servers (http, tcp, udp, ws) is because there is no WINAPI in there nor OpenGL... Does that answer your worries :D
20:07 < genazt> search google grits and look for the youtube talk of the i/o 2012
20:08 < genazt> they use appengine for database and dynamic client loading (js, css, html, gamechunks)
20:08 < Alamo777> Hypereive:  i dont care about windows, i am jus saying that with python you can write in every platform from android to windows etc.
20:08 < Hypereive> cool
20:08 < genazt> but the game loop (positions, calcs) are done over nodejs
20:08 < Hypereive> I like python too.
20:08 < Alamo777> Hypereive: i am expecting to see that wordpress will also turn to be fully node.js written
20:08 < prawnsalad> lol, will enver happen
20:08 < Hypereive> Why would they do that?
20:09 < genazt> well i would nor say never
20:09 < genazt> but i would say not in 2 years
20:09 < Alamo777> Hypereive: lets imagine it will be more secure and faster then regular php websites
20:09 < prawnsalad> Alamo777: the language doesn't make something more secure
20:09 < genazt> then you have 1564897654 free hosters and managed hosters that have php sites hosted
20:09 < genazt> :D
20:09 < Hypereive> yeah
20:10 < Hypereive> listen to them
20:10 < Alamo777> genazt: then they will switch to node.js i think with time
20:10 < prawnsalad> and for speed, nodejs + php variants won't have any noticeable speed differences
20:10 < genazt> maybe there will be a way to switch it to nodejs
20:10 < genazt> but not without php
20:10 < genazt> it would take much time
20:10 < Hypereive> But why?
20:10 < Alamo777> genazt: node.js plugin:)))
20:11 < genazt> nonono
20:11 < genazt> not node.js + php
20:11 < Hypereive> I mean its like saying that ruby on rails folks will switch to nodejs... It doesn't make sense to me.
20:11 < genazt> haproxy / nginx / varnish + node.js
20:11 < Alamo777> genazt: to turn yoursite into node.js drivven one
20:11 < genazt> nodejs as application server
20:11 < genazt> not as webserver
20:11 < Alamo777> genazt: oh i didnt know that
20:11 < Alamo777> genazt: application for webrowsers?
20:11 < genazt> nodejs as webserver replacement doesnt make sense
20:11 < genazt> yes
20:12 < Hypereive> Like nodejs VS nginx .....
20:12 < Hypereive> naaaah
20:12 < genazt> i dont see a nodejs vs nginx
20:12 < havvy> ndoejs vs nginx = use nginx
20:12 < genazt> i see a php vs nodejs vs python vs ror
20:12 < genazt> the dynamic languages behind the application will change
20:13 < Alamo777> Hypereive: i thought that the website you gave me above are all written in node.js, i think i misunderstood something
20:13 < genazt> but not the webserver itself
20:13 < Hypereive> Node is like V8 standalone + system libs... That's all it is.
20:13 < genazt> yes they are
20:13 < Hypereive> And this little is awesome... But that's all.
20:13 < Alamo777> genazt: the server part as well?
20:13 < genazt> yes
20:13 < genazt> node.js is no client lib
20:13 < genazt> its only serverside
20:13 < Alamo777> genazt: and it is wrapped into php?
20:13 < genazt> no
20:14 < Alamo777> genazt: then it turns the examples are not websites but webapps
20:14 < genazt> Browser => Nginx => Node.JS => Nginx => Browser
20:14 < Hypereive> Alamo777:   They are written in JAVASCRIPT ... Node make that possible... Cool but gcc make that possible for C, g++ for C++, javac for Java and so on....
20:14 < genazt> thats the way a request would go with a nginx webserver and a nodejs application server
20:15 < havvy> Node.js have libuv.
20:15 < Alamo777> genazt: plesae can you give me any tutorial how i can setup a realworld server like http://tweetping.net/?
20:15 < prawnsalad> genazt: grits looks kinda cool
20:15 < Alamo777> on node.js
20:15 < havvy> Alamo777: There's books on it.
20:15 < genazt> pure nodejs ?
20:15 < Alamo777> havvy: yes? and what is it name?
20:15 < genazt> well 1. i wouldnt even try to build a nodejs only webserver
20:15 < havvy> Most node.js servers are Express servers, which is based on Sinatra, a Ruby framework.
20:16 < havvy> genazt: It's easy too though.
20:16 < genazt> i use express for webapps
20:16 < Hypereive> Alamo777: Stop over thinking things. Grave the doc. Play around and have fun. That's all there is. And the book you want might be on Javascript, not node :)
20:16 < genazt> but i would never bind it to a public port if you know what i mean
20:16 < havvy> There's books on Node too.
20:16  * havvy has bound Node.js servers to public ports.
20:17 < Alamo777> Hypereive: thank you for help, i am just a little paranoic, when time comes to realworld server app, i dont think i can secure it enough for web, anyway if it is a toy i will try it
20:17 < Hypereive> Yeah but I would recommend playing around before buying a book.
20:17 < genazt> as long as this is not proven stable i am not going to bind this without a layer between it
20:17 < genazt> :D
20:17 < Alamo777> i watch the express videos that Ryan mentioned in his video tutorials
20:17 < genazt> but even with the stability i would use a varnish cache search infront of nodejs
20:18 < havvy> Hypereive: The book I'm talking about (I can't recall the name) I got at the local library.
20:18 < Alamo777> havvy:  if you were building a website or webapp what would be the scheme please?
20:18 < Alamo777> i mean in node,js
20:18 < genazt> http://www.nodebeginner.org/
20:18 < havvy> Alamo777: Look for Express tutorials.
20:19 < genazt> first you should look how node.js works
20:19 < genazt> how the http server in it works
20:19 < genazt> then you should try building a little webserver with only the docs
20:19 < genazt> if you tried and sucessed that read on express
20:19 < Alamo777> havvy: ok thank you so much genazt thank you for tutorial website, is there sample how secure to build a realworld server with it?
20:19 < havvy> genazt: I've actually not looked at the http module docs. :P
20:19 < genazt> and build things
20:19 < Hypereive> Alamo777: Start with Javascript alone (node) before switching to express.
20:20 < genazt> it helps you alot if you know _why_ nodejs does things
20:20 < Alamo777> Hypereive: you mean jlib?
20:20 < Hypereive> nono
20:20 < Hypereive> as genazt says "it helps you alot if you know _why_ nodejs does things".
20:20 < Hypereive> So try with a simple Hello World
20:21 < Hypereive> And then try a simple http server which write "Hello World"
20:21 < Hypereive> Start simple....
20:21 < genazt> Alamo777, 1.) http://nodejs.org/api/, 2.) http://www.nodebeginner.org/, 3.) http://www.smartjava.org/content/tutorial-nodejs-and-expressjs-part-i-routers
20:21 < Alamo777> Hypereive: what about database stuff? One should use only databases like nosql right?
20:21 < genazt> nononononono
20:21 < Hypereive> nooooooooooooo
20:22 < Hypereive> :D
20:22 < genazt> it the most bullshit i ever heard
20:22 < genazt> nosql is shit
20:22 < genazt> big bullshit for most cases
20:22 < Hypereive> it's no shit
20:22 < Alamo777> i mean mongodb like databases?
20:22 < Hypereive> but it's not mandatory
20:22 < Hypereive> Alamo777: So far with node we have drivers for MySQL, postgreSQL, SQLite... 
20:22 < Alamo777> what db you use with node.js? what is recommended mysql or mongodb, berkley etc?
20:22 < genazt> in the most cases the data in a normal website database depend on each other
20:22 < Hypereive> no Oracle yet
20:22 < genazt> and you search in it
20:22 < genazt> so nosql would not be the best
20:23 < Alamo777> oh i see thank you so much! i thougght it is recommended to use not traditional databases
20:23 < genazt> i like the mysql driver with the mariadb replacement for mysql
20:23 < Hypereive> ... no Oracle yet... Because Oracle are.... Oracle :D
20:23 < genazt> sql has nothing to do with "traditional"
20:23 < genazt> its not old
20:23 < genazt> or best / better / the only thing :D
20:24 < Alamo777> i mean i read stuff that mongodb is alot faster then mysql like dbs
20:24 < genazt> in writing and pure data reading
20:24 < Hypereive> AGAIN it depends
20:24 < genazt> but if you search data inside
20:24 < genazt> or try to "join" (map reduce) things
20:25 < genazt> sql in 75% of the cases is faster
20:25 < genazt> (mysql)
20:25 < Hypereive> genazt +1
20:25 < Hypereive> Mango is for heavy read/writes
20:25 < Alamo777> genazt: i see, thank you so much for explaining this conversation covers so much gaps in my mind
20:26 < genazt> google also has talked for that on google i/o 2012 "battle of nosql vs sql"
20:26 < Hypereive> Alamo777: My personal advice, don't be absolute when it comes to IT.
20:26 < genazt> they talk about database backends in appengine
20:26 < genazt> they have both
20:26 < jhsto> is it possible to stream piped data to buffer?
20:26 < genazt> heavy data things that dont get searched (attachements, backups, books) get stored in nosql
20:26 < genazt> anything else in sql
20:27 < johnnyd0e> Ever thought about CouchDB?
20:27 < Alamo777> genazt: what about backbone.js? Do you use it ever? what is it for?
20:28 < genazt> i dont use backbone.js but it seams to be a "remote api" for your website
20:28 < Alamo777> genazt: ok thank you so much guys!
20:28 < genazt> like a model on the server that can interact over api with the browser which does rendering and controlling (i think)
20:29 < Alamo777> genazt: like websocket.io?
20:29 < genazt> no
20:30 < genazt> socket.io is for "realtime" communication between your server and the browser without having a full http stack built up
20:31 < Alamo777> genazt: ok here is another question, if you were building an online currency, whould you prefer building it with node.js rather then python or java?
20:32 < Alamo777> online currency i mean some only currency website like libertyreserve or something like that
20:32 < genazt> do you deal with real money ?
20:32 < Alamo777> genazt: what you mean?
20:32 < Hypereive> If that was my only choices I would choose Java.
20:33 < genazt> can people lose money if your service isnt up ?
20:33 < Alamo777> genazt: no why they should loose their money when your website is down?
20:33 < genazt> online currency can be online banking
20:33 < genazt> paypal sites
20:33 < genazt> ebay
20:33 < havvy> If they depend on it.
20:33 < genazt> or somethiing like that
20:34 < Alamo777> genazt: it will be simply unable to acces website, yes anything like that stuff
20:34 < genazt> if you deal with money i always would use java
20:34 < Alamo777> genazt: i mean if you were the developer and client ask you to build an online currency website like pp
20:34 < Alamo777> what about python?
20:35 < Alamo777> genazt: any ready solution with java you mean? some framework?
20:35 < genazt> i hate python
20:35 < genazt> its the hell on earth
20:35 < Alamo777> genazt:  i love it, i havea a copy-book for python it is my bible:)
20:35 < genazt> "oh you have one ident wrong" "fuck this code"
20:35 < genazt> -_-
20:35 < purr> genazt: ಠ_ಠ is an IRC client/IRC client framework.
20:36 < Alamo777> genazt: you know i am more dreamman and perfectionist guy and i love to dream about online currency secure website one day, but i cant pick the right language for it
20:37 < genazt> well i would use java
20:37 < genazt> since it has been stable enough for years
20:37 < Alamo777> genazt:  and dont know really from what do start, i thought that node.js is the right decision but now i am not sure about that
20:37 < genazt> and many banks use it for their online banking
20:37 < genazt> it has a good vm arch
20:37 < genazt> nodejs is too unsecure for such things i think
20:38 < Alamo777> genazt: yes now i see that, the one thing i never had experience with java, i am more python and php
20:39 < genazt> well java isnt that hard if you know how to write oop and typestrict code
20:39 < Alamo777> i would use node.js in flight information displaying website i guess only for realtime execution
20:40 < genazt> what do you mean by realtime execution ?
20:40 < Alamo777> genazt: or games, but not gambling games i guess, it is not secure i gyess
20:40 < Alamo777> well realtime information display i mean
20:40 < havvy> Node.js is plenty secure...
20:40 < genazt> everything that has todo with money i would not lay it in nodejs hands
20:40 < Hypereive> Alamo777: You know that you always the option to make the website with technologies you're use to, and use node only for websockets right?
20:40 < havvy> genazt: Would you put it in Ruby's hands?
20:40 < Alamo777> Hypereive: yes
20:40 < genazt> no
20:41 < Hypereive> cool :)
20:41 < havvy> What about Scala or Clojure?
20:41 < Alamo777> Hypereive: maybe some blogs with node.js and games, but not more right?
20:42 < havvy> genazt: Do you trust money handling code with Scala or Clojure?
20:42 < Hypereive> Alamo777: I won't use node on critical part such as payment or something... Why because node is 0.9.x... Unstable, evolving.
20:43 < Hypereive> But lets say you have a bank website written in COBOL (for the sake of comparison)... You could always set up a chat in node on that website.
20:43 < Hypereive> I guess.
20:44 < havvy> Node's security track record has been excellent so far...
20:44 < Alamo777> Hypereive: what about webcam stuff with node.js? is it fast enough to use?
20:45 < [jasper]> hej guys. I've been using socket.io for some time....suppose I want to write a proxy for websites to be reachable to allow connecting to a tcp server 
20:45 < genazt> Alamo777, what does nodejs do with your webcam oO
20:45 < [jasper]> and I would want to allow as many ways as possible...which other libraries then socket.io are popular?
20:45 < Hypereive> havvy: I know I know. I don't say it's not secure... All I'm saying is, don't use it for critical operation when you're dealing with old minded clients which won't keep up when a method switch from the "path" module to the "fs" module.
20:45 < Hypereive> :D
20:45 < [jasper]> so I can build in some support
20:45 < genazt> [jasper], sockjs
20:46 < Alamo777> Hypereive: i mean webcam chat roulette or something similiar:)
20:46 < [jasper]> any other big ones genazt ?
20:46 < genazt> well webcam data does go p2p in chrome
20:46 < genazt> so your server only does the handshakre
20:46 < genazt> handshake *
20:47 < Hypereive> Alamo777: of course its fast. That its strong point. I/O, concurrency, scalability. That's its strong points.
20:47 < genazt> if you use flash for webcam control (which i would not use anymore) you must serve it over a server
20:47 < genazt> but as Hypereive said nodejs is built for much and big i/os
20:48 < Alamo777> genazt: that is interesting, are there any libraries in node.js available for webcam apps?
20:48 < genazt> google for webrtc
20:49 < Alamo777> genazt: thanks!
20:49 < genazt> i dont think nodejs has some awesome libs for rtmp handling
20:53 < seancron> I'm checking 14 urls every 15 seconds, and I want to log the results to a csv file. I'm a little confused about the differences between writeFile, writeFileSync, and WriteStream though.
20:53 < genazt> writeFile writes a buffer in one lopp
20:53 < genazt> writeFileSync blocks the nodejs process till everything is done
20:54 < genazt> and in a stream you can write (push) data into a file without blocking and you can chunk data
20:54 < seancron> So if I use writeFile, there's no risk of another request callback interrupting my write, and corrupting the data?
20:54 < genazt> wrong
20:55 < genazt> if you have a write going
20:55 < genazt> and another request crahes the nodejs server
20:55 < genazt> you have and invalid written file
20:56 < genazt> but for normal a writeFile is safe enough
20:56 < squeakytoy> anyone played around with websockets and node? anyone got recommendations for a node module for websockets?
20:57 < genazt> socket.io squeakytoy 
20:57 < squeakytoy> that is a node module?
20:57 < genazt> yes
20:57 < seancron> Okay. I can deal with that risk. I just need a simple way of asynchronously sending requests to an api, and storing the results to analyze later.
20:57 < seancron> Thanks.
20:58 < squeakytoy> cool thanks
20:58 < genazt> np
21:00 < etcetera> does redshift work with the standard node postgres drivers?
21:04 <@isaacs> ircretary: tell niggler i'm messing around with your public_users doc in the npm registry now.  something is weird with it, not sure what.
21:04 < ircretary> isaacs: I'll be sure to tell niggler
21:05 < Oscar_> What do you recommend for avoiding deeply nested callback code?
21:06 < squeakytoy> like the promise pattern?
21:06 < genazt> named functions
21:09 < Oscar_> Named functions work. But makes the code a little harder to read. Are there any good patterns for writing "sequential" code but async
21:10 < havvy> Oscar_: Futures.
21:10 < havvy> Or promises.
21:10 < Oscar_> Do you gave a link for an example
21:10 < Oscar_> ?
21:10 < havvy> Not really, no. :/
21:11 < Oscar_> I see there are a lot of libs doing similar things. Do you have any experience from these?
21:11 < havvy> I don't.
21:12 < havvy> I generally write it so that each stage is its own object, and then have the objects listen to each other.
21:17 < Oscar_> Ok. Do you have an example?
21:27 < SrPx> Hey guys. I hate mysql and I usually store my information as plain-text JSON.parse of a root object. I usually extract the data I need with native javascript functions. That served me way better and was way faster than mysql, ever.
21:28 < SrPx> Now I don't know much about nosql. What is it and how it relates to what I do? Would you suggest some resources for picking it up?
21:30 < Oscar_> SrPx: There are a lot of different NoSQL solutions available. Which one you should choose depends on your use case.
21:30 < SrPx> Oscar_: but are them generally similar to what I was doing? Or not at all?
21:30 < Oscar_> So if you explain a little more what your use case is I can try to point you in the right direction
21:31 < Oscar_> I didn't fully understand what you are doing
21:32 < havvy> SrPx: You only use databases to store persistent data.
21:32 < Oscar_> Do you need a key-value store for json/javascript objects?
21:32 < havvy> If you're storing it in memory, it's probably not persistent.
21:33 < _ior> i would also guess that you're not dealing with large amounts of data. if you've got even megs, nevermind gigs or terabytes, you  probably don't want to serialize it out to a json file on disk for storage and access
21:34 < SrPx> I'm not sure about what you mean by "key-value store" (like a flat hash-map?). What I'm doing is store the data of my applications by simply serializing them and writing to HD as plaintext - then deserializing when I open the application.
21:34 < SrPx> Is that what nosql is or not at all
21:35 < darrenlooby> Hey guys, socket.io room is a little quite... so, posting here. The file "http://10.0.0.4/engine.io/engine.io.js" ... contains this... {"code":0,"message":"Transport unknown"} ... am I not including it correctly? <script src="engine.io/engine.io.js"></script>
21:37 < Oscar_> SrPx: That is not NoSQL. 
21:38 < Oscar_> Or well, It is not SQL. But not what you usually call a NoSQL database
21:38 < SrPx> I see
21:40 < darrenlooby> Oscar_, I suppose you're kind of rolling your own NoSQL... but, you're likely better off with a NoSQL engine that does that work for you.
21:41 < Oscar_> -> SrPx
21:42 < SrPx> darrenlooby: you say like I'm putting a big effort to do it, while I'm actually just saving my program state as text and retrieving it, really simple. So I'm trying to get what NoSQL does and why I'd need it at this right moment, reading some stuff, nothing very direct though
21:43 < Oscar_> If you are only using one server and not a lot data your solution should work fine as long as you don't need more functionality than storing the application state to disk and loading it again
21:44 < darrenlooby> SrPx, indeed. The term NoSQL really referrers to such occasions when more is needed.
21:44 < darrenlooby> Always best to use the minimum you need to make it work, so as not to introduce complications.
21:45 < SrPx> darrenlooby: uh huh, so mean plain text is just fine, right?
21:45 < Oscar_> Yeah
21:45 < SrPx> to be fair I've never understood why SQL was necessary, too
21:45 < darrenlooby> It would seem so
21:45 < darrenlooby> SrPx, really depends on what you're trying to achieve.
21:46 < Oscar_> SrPx: You want a databse (SQL or not) when dealing with more data, across servers and need additional functionality
21:46 < Oscar_> and/or
21:46 < SrPx> But if I'm getting it, mangodb just stores key-value pairs... like, I ask it what stored at key "foo" and it returns a JSON object. And it makes sure it scales well. Is that it?
21:47 < Mentos> Anyone play bombermine.com and have an idea how hard it'd be to implement the backend with node.js?
21:47 < Oscar_> Pretty much. MongoDB has querying and some other features
21:47 < Oscar_> But if you are storing application state and only need to access it from one machine your solution should work just fine
21:49 < SrPx> Oscar_: so well it DOES relate to what I'm doing. It's exactly what I'm doing. Except I'm storing my json objects as text files. MongoDB does just that as keyval pairs. Right? 
21:49 < SrPx> So well I get it after all
21:49 < Oscar_> MongoDB does more than key-value.
21:50 < Oscar_> You could look at redis which is pretty much just a persistent cache
21:51 < Oscar_> But as I said. If you are only using one machine and storing a small amount of data your solution should work fine
21:54 < RLa> Mentos, is there some description of bombermine's backend?
21:54 < RLa> Mentos, yesterday i played 6 hours it
21:54 < Mentos> RLa: haha nice
21:55 < Mentos> RLa: I don't believe theres a description
21:55 < Mentos> RLa: "In few words: java, jetty, gwt, javascript, node.js, html5"
21:56 < RLa> gwt, really?
21:56 < RLa> hm, i did not dig enough in their js code
21:57 < Mentos> i got it from one of their developers (http://www.reddit.com/r/WebGames/comments/199urs/bombermine_html5_mmo_bomberman_with_hundreds_of/c8m8j6h)
21:59 < RLa> keeping eye on it
22:02 < NivenHuH> hey all, i'm confused as shit about something this mocha test is doing..  i can't tell if it's a nodejs scope problem or ..  https://gist.github.com/leepfrog/5073459
22:09 < NivenHuH> nvm it's a me problem :'(
22:09 < MI6> joyent/node: Ben Noordhuis v0.8 * 426cbed : test: make simple/test-dgram-pingpong respect PORT  Don't use hard-coded  - http://git.io/LMQBmA
22:17 < MI6> joyent/node: Ben Noordhuis master * 2d51036 : Merge remote-tracking branch 'origin/v0.8'  Conflicts: 	doc/api/http.mark (+6 more commits) - http://git.io/k9AvFQ
22:23 < dook> I have a question regarding how to use socket.io https://gist.github.com/flyswatter/5073527
22:23 < dook> Would be grateful for any help.
22:29 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
22:34 < dldld> Hello, is my node.js script the right place to run some long-duration tasks (like 10mins) ? Or should I put that code in a separate script/process and call it from node.js serv ?
22:37 < EyePulp> dldld: no reason not to do it from within node.  also no particular reason to do it that way.  need more details
22:39 < dldld> EyePulp: Ok, I was thinking that maybe node.js is not the right place to perform long operations, that it might influence memory badly (heap/stack) or i don't know :p I'm just new to nodejs so ..
22:41 < dldld> I have a really simple server that runs this long function when a particular URL is called, and well i thought it might be better to code this function somewhere else and use nodejs as a forwarder only
22:41 < EyePulp> dldld: "long operations" isn't specific enough.  There's nothing that makes it unsuitable for long tasks.  The suitability will be determined by what you're actually *doing*.  Node servers run for months without restart.
22:42 < EyePulp> (years?)
22:43 < dldld> EyePulp : My function calls a perl script and 3 phantomjs scripts, the perl one being the long one
22:43 < EyePulp> dldld: from an efficiency standpoint, it's probably not good to make a user wait for a long time for a task to finish - so kicking off a task, and releasing the user to go on with other stuff, then notifying them of completion is a smart option.
22:44 < dldld> EyePulp: yes that is what I do, when nodejs receives a request it instantly returns a http 200, and then i use something else to notify the client that node.js task has finished
22:44 < SrPx> Which distro you guys would recommend for a vps? Are there significant differences or any is ok?
22:44 < dldld> SrPx: long-term support one
22:45 < EyePulp> SrPx: I imagine a lot of distros are find.  I like debian package management, so ubuntu server, LTS has been good for our business.
22:45 < EyePulp> *are fin
22:45 < dldld> any distro with a good packages system is ok, can be debian-based, redhat based or any other known distro
22:45 < EyePulp> dang it.
22:45 < EyePulp> *are fine
22:45 < amurdaca> freebsd ftw!
22:46 < SrPx> I see, ok (:
22:46 < dldld> real men use freebsd, because real men love to spend a lot of time configuring stuff :p
22:46 < amurdaca> that's it dldld 
22:46 < amurdaca> :)
22:46 < EyePulp> heh
22:46 < amurdaca> FreeBSD ports are awesome..
22:47 < rud> dldld: once you have your freebsd setup, you tend to script it / template it.. so you'll usually loose a few hours yes, but than server deployment is a breeze.. specially if you jail your apps.
22:47 < amurdaca> yup with ezjails setting up jails became so easy
22:47 < amurdaca> qjail too
22:47 < rud> exactly
22:48 < rud> i use ez, and i'm damn happy :)
22:48 < dldld> Yes I agree, you just have to spend a bit more time searching for things
22:48 < amurdaca> same here rud  :)
22:48 < rud> dldld: nahh, to spend time *reading docs* :)
22:48 < dldld> I don't know qjail/ezjails, what does it provide you can't do with simple chroot ?
22:48 < amurdaca> our production servers run ubuntu 12.04 lts and freebsd 9.1 only
22:49 < dldld> rud: exactly :0
22:49 < amurdaca> jails are way more than usual chroot
22:49 < rud> dldld: flexibility, manageability, and it saves a hell of env-by-hand-writting
22:49 < amurdaca> they are like vms
22:49 < amurdaca> *virtualmachine
22:49 < rud> (compared to manual jailing)
22:49 < amurdaca> theyshare the kernel
22:49 < rud> yes
22:50 < amurdaca> but the rest is another sub system
22:50 < dldld> hm i'm gonna have a look at that then.. i dont use chroot so much as I only have one app / serv, but i reckon manual chroot is not really manageable ..
22:50 < rud> plus you can do per VM limitations, as in deny some types of network operations etc (aka raw packets..)
22:50 < dldld> jailing by server is what I prefer though :p
22:50 < amurdaca> yup
22:50 < rud> dldld: that's what i do
22:51 < dldld> rud: that sounds rly interesting, network operations filtering etc.
22:51 < rud> it's also great when you decide to host someone's app and aren't very sure of the app's security
22:51 < rud> dldld: you usually use PF, and have your Jails on a preivate subnet ..
22:51 < rud> so you can use PF+ALTQ for any twisted filtering you'ld require
22:52 < dldld> wait, you mean you have separate subnets per jail ?
22:52 < amurdaca> of course
22:52 < rud> yup
22:53 < dldld> oh
22:53 < dldld> ok
22:53 < amurdaca> you must assign an ip to your jail
22:53 < amurdaca> *must*
22:53 < rud> you can have a public IP assigned to a jail if you want
22:53 < amurdaca> i mean they *require* an ip to work
22:53 < rud> or share the main server's IP, but it's .. usually not what you want
22:53 < rud> aye.
22:54 < dldld> that's a big difference with chroot
22:54 < dldld> and sound awesome
22:54 < rud> dldld: let's say it considerably eases sever migration :)
22:54 < dldld> with chroot you can't really do that, you have to use another layer/soft to provide network abstraction
22:55 < dldld> yes, and security particularly
22:55 < rud> now, i just setup boxes with a buildworld, and copy my jails to the box, done.
22:55 < dldld> you can firewall things like different boxes then
22:55 < rud> yep
22:55 < dldld> rules would be a LOT easier to define than with a single-ip system
22:56 < rud> i (personally) think this model scales pretty well with new software like node.
22:56 < dldld> yes it seems so, i'll take a look at that because i'm about to go live with a new app soon and haven't decided yet how to manage system stuff
22:57 < rud> hehe, for me, being new to the node world, it's more host-syste-core-management that is a problem ;)
22:58 < havvy> Sigh...this event emitter gets the function, and emits the proper event, but the function doesn't get called...
22:58 < rud> doing, a socket.io based project, thinking about forking 6x of my node apps, using redis to store sockets, and having clients connect to each forked process in a round-robin fashion (since i can't aford a real hardware LB..)
22:59 < rud> but i have no clue if that's a viable solution - yet
23:00 < dldld> "forking 6x of my node apps" > you mean real forks from system or "nodes forks" ?
23:00 < rud> dldld: i'ld think real forks from system
23:01 < rud> my node apps don't need to talk to each other, just share sockets (thus redis)
23:01 < dldld> hmm i might be stupid but.. if you real-fork, you can't use 6times the same socket ?
23:02 < dldld> well I don't know redis tbh I guess it's the part taking care of this ?
23:03 < rud> well, it's a storage, so i can share sockets there.. i have an aditional node process that talks to these 6x bg process and tells them what to do.. than each would pick in it's associated sockets, and .. do what it should .. i'm still thinking this in paper. i have the node app running as single fork/core now, must choose how to split it for better ressource handling :/
23:05 < MI6> joyent/node: isaacs master * d345c11 : events: Handle emit before constructor call - http://git.io/xM-_Rg
23:05 < dldld> That is not easy I think to determine the correct design, for such specific things you have to bench resources yourself usually because it's depending on your apps' actions
23:06 < rud> indeed
23:09 < dldld> talking about sockets.io, i just discovered that today and even if i totally hande the technical aspects, i still wonder "what" people use this for ?
23:10 < rud> keep track of sockets, organise them into namespaces than rooms .. 
23:17 < dldld> ok, but i mean for which app you need to do that ?
23:18 <@Nexxy> don't tell me you've never tried to write a chat application
23:19 < dldld> irc server/client in c
23:19 < dldld> and that's about it
23:19 < dldld> lol
23:19 < rud> or anything relying on push, rather than pull client<>server communication model
23:19 < dldld> ook
23:19 < dldld> facebook must make a big usage of that i guess
23:19 < rud> a lot of sites do nowadays
23:19 <@Nexxy> socket.io just abstracts the transport for you
23:19 <@Nexxy> I think that's the main draw
23:21 < dldld> ok
23:22 < lmccart> hi, I'm trying to hit my rest api like this https://gist.github.com/lmccart/5073710
23:22 < lmccart> when I visit the url in the browser it looks ok
23:23 < lmccart> but when I do it thru ajax I get an error
23:24 < dldld> i come from sys dev and managing transport and sockets stuff from a high-level app seems strange at first
23:33 < damarusama> I am looking to built a simple cli app in node, I got some basis going, but I am not sure what would be the best cli library - anyone has experience with that?
23:34 < damarusama> thre is the library called cli that seems interesting but not sure if I get it
23:37 < damarusama> and commander which seems simpler to understand, but I have some trouble parsing the flas
23:37 < damarusama> flags
23:37 < MPoelman> Hello everybody
23:38 < fusiongrokker> is there a better way to get a node variable into a javascript section of a Jade view than client_side_var = JSON.parse('#{JSON.stringify(somevar)}') ?
23:39 < fusiongrokker> I tried client_side = #{somevar}; but I'm passing nested arrays and it flattens them for some reason...
23:46 < MPoelman> @fusiongrokker: try !{somevar}; instead.
23:54 < darrenlooby> Hey guys, socket.io room is a little quite... so, posting here. The file "http://10.0.0.4/engine.io/engine.io.js" ... contains this... {"code":0,"message":"Transport unknown"} ... am I not including it correctly? <script src="engine.io/engine.io.js"></script>
23:58 < MPoelman> @darrenlooby: I have src='/socket.io/socket.io.js' in my project which makes it work. You do have the socket.io package installed for that project I take?
23:59 < darrenlooby> I'm using engine.io directly, and have it entirely in default settings...
23:59 < darrenlooby> :(
23:59 < ehd> hi
23:59 < Eigen_> man
--- Log closed Sun Mar 03 00:00:04 2013
