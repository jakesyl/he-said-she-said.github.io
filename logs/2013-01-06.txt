--- Log opened Sun Jan 06 00:00:30 2013
00:03 < astropirate> >> var foo; (function bar(curr) { if (curr === undefined) {foo = 0; bar(1 + foo)} })(val); foo;
00:03 < purr> astropirate: ReferenceError: val is not defined
00:04 < astropirate> >> var val = 0; var foo; (function bar(curr) {{foo = 0; bar(1 + foo)} })(val); foo;
00:04 < purr> astropirate: RangeError: Maximum call stack size exceeded
00:04 < astropirate> >> var val = 0; var foo;  try {(function bar(curr) {{foo = 0; bar(1 + foo)} })(val);} catch(err) {foo;} 
00:04 < purr> astropirate: (number) 0
00:05 < astropirate> >> var val = 0; var foo;  try {(function bar(curr) {{ foo = curr; bar(1 + foo)} })(val);} catch(err) {foo;} 
00:05 < purr> astropirate: (number) 15658
00:05 < astropirate> how is the maximum call stack determined?
00:05 < astropirate> memory usage?
00:05 < astropirate> or is it a predefined number
00:07 < Sicp> you were right, Virunga 
00:07 < Sicp> it was because I was concatenating a string to the array when trying to print it
00:07 < Sicp> the guy in the tutorial did console.log("String", array); not console.log("String" + array);
00:10 < astropirate> ﴾͡๏̯͡๏﴿
00:12 < miketheadmin> hi, i have the problem, that I have 'hanging' connections on my node server… I have written a download server in node, but it seems that it does not accept more than 8 connections per tcp connection? the behaviour is very weird. The download hangs with one browser, but if i start the additional download in another browser, one it works perfectly
00:25 < _numbers> some of you may appreciate this improvement to the async.js approach https://github.com/mikesmullin/async2/blob/stable/test/test.coffee
00:28 < average_1rifter> erm
00:29 <@mbalho> great another high horsed coffeescripter
00:29 < Raynos> mbalho: where :D
00:29 <@mbalho> Raynos: see last link
00:30 < _numbers> mbalho: i just prefer to author it in coffee. the .js and .js.min version is in there too. in fact it is backward-compatible with async.js; can do all the same things, but in less lines of .js
00:31 < _numbers> less bytes i should say; its a minimalist implementation
00:31 < _numbers> with some improvements
00:32 <@mbalho> _numbers: have you tried pull requests to the async repo
00:32 < _numbers> i may if i get positive response
00:32 < _numbers> i'm not trying to be devisive. just need something to work today :)
00:33 <@mbalho> thats a great opportunity to contribute to a popular project (instead of making snide remarks about one)
00:33 < _numbers> divisive* i mean not trying to start a new fork necessarily
00:33 < _numbers> well its 100% refactor from ground-up
00:34 < _numbers> its not just a pull request. it'd take over their repo 
00:34 <@mbalho> ah
00:35 < _numbers> the snide remarks are meant to encourage spirited but constructive debate. i know a lot of people get used to the way things are
00:36 < hij1nx> if coffeescript the ultimate bikeshed?
00:36 < Aria> It might be.
00:36 < hij1nx> s/if/is/
00:36 < hij1nx> yea. i think so.
00:36 < Aria> Though in some ways, it's more "the bikeshed door should only be 0.3 m wide."
00:37 < Aria> "Because it'll be so slim and elegant that way"
00:37 < hij1nx> the door should also have a handle on both sides just incase someone is left handed.
00:38 < Raynos> :D
00:38 < zomg> heh, had to check if Fay has some way to pretend async code is synchronous code now that that async lib was mentioned here
00:38 < Raynos> That's it!
00:38 < zomg> of course it did =) haskell ftw
00:38 < Raynos> I wanted to write an X -> JS compiler
00:38 < Raynos> I'll write a bikeshed.js (supporting all possible js styles)
00:38 < hij1nx> Raynos: call it "X"
00:39 < ArxPoetica> what's everyone's favorite node-friendly (cost-effective) CDN?
00:39 < ArxPoetica> (gotta love these general questions)
00:39 < ArxPoetica> I'm being sold on edgeweb...mistake?
00:40 < _numbers> a favorite cdn has nothing to do with node i think
00:40 < ArxPoetica> has to stream pre-recorded video
00:40 < _numbers> its a static file server. what does node have to do with it?
00:40 < hij1nx> ArxPoetica: why dod you need a cdn?
00:40 < _numbers> maybe you mean everyone's favorite static file server implementation in node :)
00:41 < ArxPoetica> nah
00:41 < ArxPoetica> but I see your point.
00:41 < hij1nx> i wonder if anyone has created a cdn with node
00:41 < _numbers> of the many ways to stream video, i think buffering mp4/h.264 and RTMP are the two most popular
00:41 < _numbers> if you need a CDN server which supports RTMP, there is AWS CloudFront
00:41 < ArxPoetica> k
00:42 < ArxPoetica> I think I'll jump over to NodeJitsu — probably a better place to ask. :)
00:42 < _numbers> if you just need a CDN server which can stream the MP4 format, and support seeking/range requests, cloudfiles can also do it, but there are more options like vzaar.com
00:42 < _numbers> or you can make your own with node. i have done it before
00:43 < ArxPoetica> you can???
00:43 < _numbers> ya its just a static file server that supports range requests
00:43 < ArxPoetica> el non blocking? What do you do, create a separate instance?
00:43 < _numbers> RTMP however is an adobe proprietary protocol so thats different
00:43 < ArxPoetica> oh, right, for static files.
00:43 < ArxPoetica> Need something for (prerecorded) video and audio.
00:44 < _numbers> thats a static file
00:44 < ArxPoetica> Yeah, you're right.
00:44 < _numbers> webcam/livestream videos would be non-static
00:44 < ArxPoetica> Hmm…well, long-term maybe I'll look into that.
00:44 < ArxPoetica> Unless there's an npm package.
00:45 < ArxPoetica> I'm also working in sockets.
00:45 < _numbers> well if you arent sure you probably should do it long term :)
00:45 < ArxPoetica> I mean, there's *express* and *flatiron*
00:45 < ArxPoetica> but yeah, not really on the schedule for developing my own
00:46 < ArxPoetica> er…blacksmith might be what I meant.
00:46 < Raynos> Thinking of writing a new node mongo client ( https://gist.github.com/4464542 )
00:46 < Raynos> any API commentry?
00:46 < _numbers> ArxPoetica: when i did it, i just used https://npmjs.org/package/send
00:47 < ArxPoetica> i see
00:47 < _numbers> looks like TJ made that one too 
00:47 < ArxPoetica> yup
00:47 < ArxPoetica> Did you set it up as it's own instance?
00:48 < ArxPoetica> and have it communicate only via the client?
00:48 < _numbers> ya i actually had it running with node.exe so i could deliver a multimedia site running in browser off cd-rom or usb-drive
00:48 < ArxPoetica> mmm
00:48 < ArxPoetica> This is for something that could have a lot of eyes on it. Funded film.
00:49 < _numbers> well thats just a general node clustering issue
00:49 < ArxPoetica> Online interactive documentary space.
00:49 < ArxPoetica> Right. IT is my weak spot. I'm going to be looking for help in that area.
00:49 < _numbers> cool. ya i bet if you had the sysadmin/devops skills you could get node to do it
00:49 < ArxPoetica> Clustering. Balancing. Or just NodeJitsu.
00:50 < ArxPoetica> Not Heroku. (They don't do sockets.)
00:50 < ArxPoetica> :(
00:50 < ArxPoetica> (Get with the times Heroku!)
00:50 < _numbers> i never got into heroku. i just set up my own aws ec2 instances. 
00:51 < ArxPoetica> I've been told that's nice.
00:51 < ArxPoetica> Is that cheaper than hosting *and* CDN?
00:51 < ArxPoetica> Maybe I'll just give that a go.
00:51 < ArxPoetica> :/
00:51 < _numbers> i wish we had a codeclimate.com for node/js
00:52 < ArxPoetica> right
00:52 < ArxPoetica> Time to build it.
00:52 < Raynos> we have some
00:52 < ArxPoetica> https://github.com/nodejitsu/haibu
00:53 < _numbers> Raynos: ?
00:53 < ArxPoetica> open source server
00:53 < ArxPoetica> It's what NodeJitsu uses.
00:53 < Raynos> we have modules
00:53 < Raynos> that report metrics
00:53 < Raynos> there is just no hosted service for it
00:53 < _numbers> right. i'm sure its not much work for anyone who wanted a profitable SaaS 
00:54 < ArxPoetica> What? Haibu?
00:54 < _numbers> no, a codeclimate.com clone
00:54 < ArxPoetica> oh oh
00:54 < ArxPoetica> Yeah, Raynos. What modules?
00:55 < ArxPoetica> there's also...
00:56 < ArxPoetica> oh what's it called
01:00 < ArxPoetica> Can't remember. :(
01:01 < ArxPoetica> http://newrelic.com/
01:01 < ArxPoetica> WHAT?! NO NODE?!
01:06 < mscdex> that site could choose a better font and font color for that background :S
01:17 < othiym23> ArxPoetica: New Relic's Node support is on its way
01:18 < othiym23> ArxPoetica: I hear they have a crack team of developers working on it tirelessly night and day
01:18 < othiym23> or maybe crack-smoking
01:19 < samholmes> What sites do you recommend with great tips and news about node.js?
01:20 < othiym23> samholmes: I watch github.com/joyent/node to see what's going on in core, and get news about packages here and on the DailyJS
01:20 < othiym23> also the nodejs google group
01:21 < mscdex> there's also echojs.com and planetnodejs.com
01:21 < mscdex> fwiw
01:22 < othiym23> mscdex: if I'm on the google group and keeping an eye on the GH issue tracker, is there much of value on either of those?
01:23 < othiym23> planetnodejs's homepage is pretty awesome at the mo
01:23 < othiym23> o it's better now -- was crashing
01:28 < mscdex> othiym23: well, the issue tracker is mostly if you're interested in fixing bugs i guess? :-)
01:28 < othiym23> mscdex: and PRs for new features go through there as well
01:29 < othiym23> it's how I know about tnorris's Buffer reworking, for instance
01:30 < mscdex> othiym23: i suppose, but most important stuff is posted on the mailing list
01:30 < mscdex> usually
01:31 < othiym23> mscdex: it doesn't take a lot of time to watch and I've learned a lot, so it's been worthwhile for me
01:31 < othiym23> YMMV!
01:31 < mscdex> cool :-)
01:45 < owen1> i have 2 servers. i put on each of them my private ssh key in .ssh.  how is it possible that on one of them i can't clone a repo from github? i get "fatal: Could not read from remote repository."
01:47 < raphie> can anyone recommend a tutorial for building a simple CRUD app?
01:50 < owen1> raphie: https://github.com/muraken720/node-crud/blob/master/app.js   just did a google search, so not sure if it's great, but looking at the codebase it looks fine
01:52 < raphie> owen1: cool. so all the models/routes should just go in that one server file?
02:03 < owen1> rodr1go: nice observation, if your site is small, sure. if it's a bit bigger you can have a folder called rotues
02:03 < owen1> and inside login.js, user.js dashboard.js etc
02:03 < owen1> that expose a function or multiple.
02:04 < owen1> rodr1go: sorry. the guy left the chat
02:12 < lushious> is it me or does fs.mkdir not work ?
02:16 < joe-node0> Hey folks
02:16 < joe-node0> if anyone is awake, I have some basic things to reason out about what a JavaScript 'app' is.
02:17 < joe-node0> I'm trying to determine the most common traits of all js based apps is across almost all of the MV* frameworks.
02:18 < joe-node0> So far I have two irreducible pieces, 1.) An entry point, and 2.) A URL (i.e. a route) to an html 'shell' which load the entry point's js.
02:19 < joe-node0> if we strip away everything else about an MV*   js app, those two things are non-negotiable for most proper apps.
02:20 < Raynos> MV* frameworks are a bit silly
02:20 < mscdex> lushious: it's just you
02:20 < Raynos> every node.js program has an entry point
02:20 < lushious> why is it me?
02:20 < Raynos> it's either index.js or whatever the main field says in package.json
02:20 < lushious> I'm running the standard commands from the docs
02:21 < mscdex> lushious: dunno, needs some investigating :-)
02:21 < lushious> I get a "typeerror"
02:21 < mscdex> lushious: what is the exact code you are trying?
02:22 < joe-node0> 1.) entry point,  2.) route to that entry point's incipient loading step
02:22 < lushious> mscdex: https://gist.github.com/4464808
02:22 < lushious> it's give me:- TypeError: 'undefined' is not a function (evaluating 'fs.mkdir('derp', ........
02:22 < joe-node0> ok, good that's a start
02:23 < mscdex> lushious: what node version?
02:23 < lushious> mscdex: v0.8.8 
02:24 < lushious> I'm upgrading to v0.8.16 to see if it solves it
02:43 < ArxPoetica> othiym23 — just got back. that's good to hear.
03:24 < enjalot> hi all, i'm trying to make a PATCH request using the request module, but it doesn't seem to be supported. any info on how i can do that?
03:31 <@mbalho> request({method: "PATCH"})
03:31 <@mbalho> ?
03:37 < samholmes> What does this error mean? http://pastebin.com/fYEbS8ux
03:37 < Aria> It means the thing that it was writing to was closed (like output to another process in a pipe)
03:37 < Aria> Which node version?
03:38 < gluxon> boo
03:38 < gluxon> ^ sorry, wrong channel.
03:39 < samholmes> Aria: v0.8.16
03:39  * Aria nods.
03:40 < samholmes> Aria: How do I know where in my code this is happening?
03:44 < samholmes> Aria: ?
03:45 < Aria> I'm not sure at the moment (sorry, long day -- definitely not thinking totally straight)
03:47 < enjalot> mbalho: how can i verify that it's working? i get a 404 from a service i know supports it (and url is correct) (trying to use github api)
03:47 < enjalot> using method:"PATCH" does seem to change the method
03:49 < samholmes> Anyone else have any clue on what's suddenly happening to my application?
04:00 < samholmes> I mean wtf http://pastebin.com/fYEbS8ux
04:01 < s5fs> samholmes: sorry, no idea. not much of an error message is it?
04:01 < samholmes> s5fs: I'll say, but that's all I got as output.
04:02 < samholmes> What can I do?
04:02 < s5fs> samholmes: did you try tracking down those lines in the source? i'm on an older version of node, not sure my line numbers would match up with yours.
04:03 < samholmes> s5fs: Those lines are in the core. Does this mean a bug in core?
04:04 < s5fs> samholmes: i have no idea, but maybe reading the code near those lines can help narrow down the issue a bit
04:04 < s5fs> i'm pulling 0.8.16 right now, i'm curious as to what those lines reference too
04:06 <@konobi> samholmes: nope... have a look at wrapping some stuff in a domain
04:06 < samholmes> konobi: Which stuff?
04:07 <@konobi> everything?
04:07 < s5fs> samholmes: chasing down the lines doesn't seem to lead anywhere. sorry man.
04:12 < samholmes> konobi: I'm new to domains. Could you help me understand how they work exactly?
04:18 <@konobi> samholmes: you probably want to do an implicit binding at the start of your app
04:18 < samholmes> konobi: Which looks like?
04:19 <@konobi> http://nodejs.org/api/domain.html#domain_implicit_binding
04:20 <@konobi> i'm sick as a dog, so not much help tonight
04:22 < superjoe> dogs are sick?
04:22 < superjoe> never mind.
04:24 < samholmes> konobi: I'm sorry to here that you're sick. :( However, it shows no instructions on how to set up an implicit domain?
04:33 <@konobi> samholmes: just create one...
04:35 < samholmes> konobi: I did var domain = require('domain'); var dm = domain.create(); and nothing different happens.
04:36 <@konobi> at the start of your app?
04:38 < samholmes> yup
04:38 <@konobi> huh, odd... should get more of a stack trace
04:40 < samholmes> konobi: Are you sure I'm not suppose to do anything else?
05:10 < samholmes> Anyone here have trouble installing graphicsmagick on mac?
05:10 < samholmes> konobi: Btw, I think the issue I was having has to do with the fact that I don't have graphicsmagick installed.
05:14 < samholmes> nvm. Found it in brew
06:16 < md_5> what does indexOf return when nothing is in the array?
06:16 < md_5> *when the object is not in
06:17 < md_5> should be -1
06:17 < md_5> hum
06:25 < mscdex> md_5: yep
06:27 < md_5> mscdex will 2 objects of the same fields, but created at different times be different in an array>?
06:27 < md_5>        var report = {title: title, target: target, reporter: reporter, reason: reason, url: response.data.url};
06:27 < md_5>             if (seenReports.indexOf(report) == -1) {                seenReports.push(report);               <--- index is always -1
06:28 < myndzi> anyone know a module or something that will interpret exit codes?
06:29 < md_5> > {foo: "bar"} == {foo: "bar"}
06:29 < md_5> false
06:29 < md_5> what can I do to make that true?
06:30 <@konobi> myndzi: no such thing, exit codes are a per-app thing
06:30 < mscdex> md_5: you have to write your own loop
06:30 < myndzi> var foo = {foo: "bar"}; foo == foo
06:30 < myndzi> konobi: er, how about from bash?
06:30 < md_5> are you serious?
06:31 <@konobi> myndzi: it's 0 or non-zero
06:31 < mscdex> md_5: array.indexOf() does not do deep equals for objects
06:31 < myndzi> but the codes have meanings (e.g. file not found)
06:31 < mscdex> it just checks references
06:31 < md_5> is there a method for doing deep equals?
06:31 <@konobi> myndzi: only for that specific app
06:31 < mscdex> md_5: probably if you googled, but it's not hard to write yourself :-)
06:31 < myndzi> konobi: right, well, bash is pretty widespread
06:31 <@konobi> myndzi: you can process.exit(<n>) all you want
06:31 < myndzi> :P
06:31 < myndzi> i just want meaningful output from the result of spawn
06:31 <@konobi> bash scripts can exit with any code they want too
06:32 < myndzi> ... yes, i understand what exit codes are. child_process.spawn runs something specific (the shell, i assume) that launches a program that you specify
06:32 < myndzi> that thing returns exit codes
06:32 < myndzi> they have meaning
06:32 < myndzi> i don't know what to look for to find their meaning
06:33 <@konobi> what's the app?
06:33 < myndzi> bash, i assume?
06:33 <@konobi> not nessecarily
06:33 < myndzi> in this case, it's 127 = file not found
06:33 < myndzi> presumably there are other codes
06:33 < myndzi> but i don't know what they are so i don't know if i need to care
06:34 < myndzi> it's whatever node uses to spawn processes
06:34 <@konobi> http://tldp.org/LDP/abs/html/exitcodes.html#EXITCODESREF
06:34 < myndzi> thank you :)
06:35 <@konobi> it's one of those SHOULD rather than MUST things unfortunately
06:35 < myndzi> i was having trouble googling it because i didn't know what to search for
06:35 < myndzi> (that is, i didn't know if it was bash, linux, node, whatever)
06:39 < myndzi> much nicer
06:39 < myndzi> :)
06:42 < astropirate> are Array generics available in node?
06:42 < astropirate> without passing harmony flags?
06:43 <@konobi> ?
07:01  * ncursestest5 connected to irc with the node-ncurses irc client demo :)
07:01 < mscdex> :-D
08:03 <@konobi> mscdex: heard of any libcinder bindings?
08:05 < tnorris> anyone mind taking a quick look at GH-4525? It's a substantial claim, and want to make sure I'm not missing something.
08:07 <@konobi> tnorris: you're creating a massive array of single byte buffers
08:08 < tnorris> konobi: yeah. but because of the tmp declaration right after it can't be gc'd since they're technically part of the same buffer.
08:09 <@konobi> tnorris: you're not undeclaring them or removing references to them, so they won't be gc-ed
08:09 < tnorris> konobi: are you talking about the `tmp = Buffer(SIZE)` lines?
08:10 <@konobi> var store
08:11 < tnorris> the point of the excersize is that if you keep 1 byte around of an allocated fast buffer, nothing else can be cleaned up.
08:11 < tnorris> node does not internally handle de-allocation of unused fast buffers.
08:11 < tnorris> so it just chills in memory until all references are removed.
08:12 <@konobi> the object representing the buffer must disappear
08:13 < tnorris> elaborate on "the object"
08:13 <@konobi> Buffer
08:13 <@konobi> it's a JS object that wraps external memory
08:14 < tnorris> yes. so all pointers to parts of that pre-allocated memory must be cleared. I understand that.
08:14 < tnorris> (pointers -> fast buffer instances)
08:14 <@konobi> but you're pushing them into an array
08:14 < tnorris> i'm pushing a single byte into an array, but the entire poolSize is being retained.
08:15 <@konobi> tnorris: a single byte 1e6 times
08:15 < tnorris> if you comment out `tmp = Buffer(SIZE)` then you can run the script w/o a problem.
08:16 < tnorris> the drop it to 1e3. the point is that this script will store `SIZE * Buffer.poolSize` in memory, not `SIZE * 1 byte`
08:16 < tnorris>  /the/then
08:18 < tnorris> basically, every buffer allocated in `tmp = Buffer(SIZE)` is never leaving memory since that single byte above it is pushed into an array.
08:19 < Sly> What's the point of tmp being there anyway?
08:19 <@konobi> so you're saying that on each loop memory is increasing by SIZE?
08:19 < tnorris> konobi: exactly!
08:19 < tnorris> actually, Buffer.poolSize
08:20 <@konobi> tried new Buffer(SIZE) ?
08:20 < tnorris> konobi: you mean place `new` before it?
08:21 <@konobi> yup
08:22 < tnorris> konobi: doesn't matter. Buffer self checks for instance and returns a new one regardless: https://github.com/joyent/node/blob/master/lib/buffer.js#L204-207
08:22 < tnorris> Sly: the point is to illustrate that Buffer memory remains active despite assigning a variable that should have gotten gc'd
08:23 < tnorris> konobi: problem is with https://github.com/joyent/node/blob/master/lib/buffer.js#L265
08:24 < tnorris> makeFastBuffer internally allocates a segment of pre-allocated memory. which is a lot faster, but then v8 can't perform garbage collection on it properly.
08:24 < Sly> It doesn't look like it checks instances based on arguments.
08:25 < Sly> You'd need to call it like something like.. `tmp = Buffer.call(tmp, SIZE)` for it to check the instance in that context.
08:25 < tnorris> Sly: `if (!(this instanceof Buffer)) {` is the check if `new` was used. it's a common practice to enforce new instances.
08:26 < Sly> Yeah, but that means you're creating a new buffer every time you run the `tmp =` line.
08:27 < Sly> It can't pick up that tmp is already a buffer.
08:27 < tnorris> Sly: yeah, but that should be garbage collected fairly quickly. Check out the `tmp = SlowBuffer(SIZE)`. That line doesn't cause an issue.
08:28 < tnorris> but it still allocates a new buffer.
08:28 <@konobi> tnorris: huh
08:29 < tnorris> konobi: huh what?
08:29 < tnorris> sorry, huh as in don't get what i'm taking about, or huh as in you do understand?
08:29 <@konobi> tnorris: https://github.com/joyent/node/blob/master/src/node_buffer.cc#L201-226
08:30 <@konobi> seems like it's just setting the buffers as dead... probably to be reused
08:32 <@konobi> tnorris: what if it's poolsize + 2?
08:32 < tnorris> konobi: then it will just allocate a new SlowBuffer: https://github.com/joyent/node/blob/master/lib/buffer.js#L240-244
08:33 <@konobi> tnorris: a SlowBuffer may become a fast buffer
08:33 <@konobi> SlowBuffer.makeFastBuffer()
08:34 < tnorris> konobi: node internally keeps a `pool` which is the current SlowBuffer. see on that same line `this.parent`?
08:34 < tnorris> this.parent is the parent SlowBuffer that backs all the smaller fast buffer allocations.
08:34 <@konobi> line 265?
08:35 < tnorris> yeah
08:35 < tnorris> which calls this: https://github.com/joyent/node/blob/master/src/node_buffer.cc#L688-L706
08:36 < tnorris> then uses `SetIndexedPropertiesToExternalArrayData` to set a couple pointers on the SlowBuffer and segment a small chunk.
08:36 < tnorris> so the SlowBuffer instance has no checks or even knowledge that a fast buffer has been created against it.
08:37 < tnorris> so there's no way for it to track that a fast buffer segment is no longer in use in memory.
08:37 < tnorris> which is why the memory is left open and not able to be gc'd
08:38 <@konobi> yeah, seems like there isn't a place where the externalmemory is getting tuned down
08:39 < tnorris> yeah, which causes the memory leak. so say for example:
08:40 < tnorris> you are streaming in small chunks of data. and store every hundredth of them or so for later parsing.
08:40 < tnorris> the stream sends the data packets in a buffer, which uses makeFastBuffer, and all the dropped data packets will remain in memory until you release the small chunks you decided to keep.
08:40 < andu> who wants to see something cool? http://fluentart.com/projects/midi
08:41 < andu> blue or orage?
08:41 <@konobi> yup, i get you... i'd suggest adding some comments around the fact that the buffer destructor never seems to adjust the external memory downwards
08:42 < andu> ... cmon :)
08:43 < tnorris> konobi: problem is that the memory pointers can also be sparse across the SlowBuffer. so memory would also have to be shuffled.
08:44 <@konobi> tnorris: yup
08:49 < tnorris> konobi: it seems like implementing that type of memory management is OS level stuff. no idea how that would be dealt with.
08:57 < angelazou> I'm trying to install Express, but I got the following error 
08:57 < angelazou> npm WARN package.json application-name@0.0.1 No README.md file found!
08:57 < angelazou> should I download it again, or just fetch the readme?
08:57 < angelazou> where can I find the readme file?
09:00 <@konobi> tnorris: nah, there's probably a couple of methods, but best left to someone like bnoordhuis
09:01 < tnorris> konobi: true true. that dude is a wizard.
09:01 < tnorris> angelazou: what command did you use to install express?
09:02 < angelazou> tnorris: npm install
09:02 < angelazou> actually, I used this first sudo npm install -g express@2.5.8
09:02 < angelazou> then express authentication
09:02 < tnorris> angelazou: ok, so from inside another package then i'll assume. what is the package?
09:02 < angelazou> then cd authentication && npm install
09:02 < tnorris> ok
09:03 < tnorris> is "authentication" a package or something?
09:03 < angelazou> not sure, just following the jump start nodejs book
09:03 < angelazou> the book says An application with basic default options can be created using this command:
09:04 < angelazou> express authentication
09:04 < tnorris> angelazou: what version of node are you using?
09:05 < tnorris> angelazou: also, the readme thing should be a WARN not an ERR
09:05 < angelazou> 0.8.16
09:05 < angelazou> let me paste the entire output
09:06 < angelazou> https://gist.github.com/4466191
09:08 < tnorris> angelazou: remove express@2.5.8 and install @latest
09:08 < tnorris> then try it again.
09:09 < tnorris> ok. the readme thing isn't the problem
09:09 < RLa> angelazou, why you use < 3.0
09:09 < tnorris> it's because you installed express as root.
09:09 < angelazou> just following the book
09:10 < angelazou> well I see it again, during install
09:10 < angelazou> npm WARN package.json methods@0.0.1 No README.md file found!
09:10 < RLa> you need to install it both globally and locally
09:10 < tnorris> express@2.5.8 was only for node <= v0.7.x
09:10 < RLa> globally for express command, to generate the initial app code
09:10 < angelazou> I thought -g did the job
09:10 < RLa> which you can of course skip and thus not install express globally
09:10 < angelazou> anyway, the readme is still missing, what do I do now?
09:11 < RLa> file a bug on readme thing :)
09:11 < angelazou> ...sigh, github always force me for readme, how come these people forget that...
09:11 < RLa> btw, i think that readme thing is stupid anyway, you would need to embed your actual readme inside package.json, don't you?
09:14 < angelazou> well, that is interesting
09:14 < RLa> why is that stupid? you need to duplicate your readme contents; and the readme embedded into package.json is pretty unreadable
09:14 < angelazou> I found the readme.md in the module folder
09:14 < sinclair|work> http://www.eweek.com/developer/c-named-top-programming-language-of-2012/
09:15 < angelazou> but it just keeps going about the missing readme...
09:15 < SomeoneWeird> ewww
09:16 < RLa> angelazou, i think it wants readme field in the package.json file
09:16 < sinclair|work> SomeoneWeird: C# ftw
09:17 < SomeoneWeird> sinclair|work, yep
09:17 < SomeoneWeird> i thought it was c
09:17 < angelazou> RLa: how do I put it in the package.json? copy and paste, or refer its relative path?
09:17 < SomeoneWeird> (because of the url) :p
09:17 < RLa> no, you just ignore the warning :)
09:18 < sinclair|work> SomeoneWeird: i had a play with Roslyn over the past few days
09:18 < sinclair|work> SomeoneWeird: had a look at it yet?
09:18 < SomeoneWeird> that i havn't
09:19 < sinclair|work> SomeoneWeird: loots pretty good, tho its still a fair way off from being complete
09:19 < RLa> angelazou, maybe it's also because of file name case
09:19 < SomeoneWeird> i havn't coded c# in quite a while because i'm on nix fulltime now
09:19 < SomeoneWeird> and monodevelop doesn't live up to vs :(
09:19 < sinclair|work> SomeoneWeird: guess so
09:20 < sinclair|work> SomeoneWeird: there is some pretty good stuff in Mono tho
09:20 < SomeoneWeird> yeah
09:20 < SomeoneWeird> you played with cosmos?
09:20 < SomeoneWeird> THATS awesome.
09:20 < RLa> angelazou, it's probably the case issue
09:20 < angelazou> I'll try that
09:21 < sinclair|work> SomeoneWeird: MS were supposed to put out a 100% managed OS called Singularity back in the day, not sure what happened to it
09:21 < SomeoneWeird> nah, that was just a PoC
09:21 < sinclair|work> SomeoneWeird: yeah
09:21 < SomeoneWeird> but yeah, i've played with that too
09:22 < RLa> sinclair|work, one can assume it's dead
09:22 < sinclair|work> RLa: yeah, i figured as much
09:22 < RLa> managed code takes more cycles and that's not going to work on mobile devices
09:23 < sinclair|work> SomeoneWeird: cosmos looks ace, ill have to check it out
09:23 < sinclair|work> RLa: managed code runs fine on mobile devices
09:23 < RLa> yeah, but whole os in it?
09:23 < sinclair|work> RLa: sure, why not
09:24 < RLa> also, "runs fine" says nothing about power usage
09:24 < sinclair|work> manged code and bad battery life is not mutually inclusive 
09:24 < RLa> it's not speed issues but power usage issue, i'm sure managed code would be fast enough for most tasks
09:25 < sinclair|work> RLa: what does managed code have to do with battery life ?
09:25 < RLa> to "manage" one must use more cpu cycles
09:25 < sinclair|work> RLa: to do what?
09:25 < sinclair|work> garbage collect ?
09:26 < RLa> also bounds checking, some runtime type checking and of course, gc too
09:27 < sinclair|work> RLa: i don't see how any of that impacts on battery life
09:27 < sinclair|work> RLa: you really have to be writing terrible code, or doing heavy lifting for it to impact battery life
09:31 < RLa> sinclair|work, about that c# article, where is current data? the linked place has data only up to jan 2012
09:31 < angelazou> RLa: try the renaming as well, didn't work
09:32 < RLa> maybe i'm just blind
09:32 < angelazou> where can I file for a bug or contact the author?
09:33 < RLa> did someone write that article based on 2011 data?
09:33 < RLa> angelazou, package.json should have link to their issues tracker
09:33 < sinclair|work> RLa: http://channel9.msdn.com/Shows/This+Week+On+Channel+9/TWC9-January-04-2013
09:33 < sinclair|work> ^ i was linking through from there
09:34 < angelazou> RLa: I found it, along with that, it also contain a readme section, and a reference to the Readme.md I just modified...
09:34 < RLa> this seems to be the actual source: https://sites.google.com/site/pydatalog/pypl/PyPL-PopularitY-of-Programming-Language
09:35 < sinclair|work> RLa: up by 2.3%
09:35 < sinclair|work> nice
09:35 < RLa> yeah, but year does not match
09:35 < RLa> the table is about 2011, isn't it?
09:35 < RLa> and Java is still on top
09:35 < sinclair|work> RLa: 7th in 2011, and 3rd in 2012
09:36 < sinclair|work> RLa: the correct interpretation would be "the biggest rise in popularity" 
09:36 < RLa> hm, true
09:36 < sinclair|work> RLa: i think it might have something to do with C#'s concurrency stuff and the TPL
09:36 < SomeoneWeird> what does --harmony even do?
09:37 < SomeoneWeird> <sinclair|work> SomeoneWeird: cosmos looks ace, ill have to check it out < yeah it's amazing, but it lacks fs and networking support atm, but they're working on it
09:37 < RLa> cosmos?
09:37 < sinclair|work> SomeoneWeird: yeah, i was looking at that, it would be nice to host a cosmos instance, and do the UI entirely in a browser, with web sockets handling messaging
09:38 < SomeoneWeird> RLa, http://cosmos.codeplex.com/
09:39 < sinclair|work> SomeoneWeird: i wonder if C#'s rise in popularity is due to C#'s async/await stuff
09:39 < RLa> any idea how it compares to http://www.jnode.org/ ?
09:40 < RLa> i think it's more about decline of php
09:41 < sinclair|work> RLa: welll, concurrency is all the rage these days, even C++ has some new concurrency constructs in C++11
09:42 < RLa> yeah, c++ finally got threads
09:42 < RLa> as a part of standard
09:42 < MrDHat> Is there a way to run any program remotely on server using node.js?
09:42 < MrDHat> i mean an equivalent of this: http://php.net/manual/en/function.exec.php
09:43 < sinclair|work> RLa: i think backend developers are not prepared to invest in nodejs due to how crud it is to develop in
09:43 < sinclair|work> RLa: despite nodejs doing concurrency well
09:44 < SomeoneWeird> MrDHat, child_process.exec
09:45 < sinclair|work> RLa: i think most developers might be looking for other alternatives to concurrency, and the C#'s async/await stuff offers the most sane way (syntactically) to write concurrent code
09:46 < RLa> angelazou, https://github.com/Acubed/node-methods
09:47 < RLa> tho tjholowaychuk seems to be original author accrding to npm registry, so you should write to him
09:48 < RLa> sinclair|work, what about go and goroutines?
09:48 < RLa> i think it matters because it's C# they more-less already know and that big company backs it
09:49 < RLa> for enterprise stuff
09:49 < sinclair|work> RLa: yeah, goroutines are interesting,  but the popularity of Go is questionable
09:49 < RLa> for others, not sure, haven't seen many individual C# programmers
09:50 < RLa> i think i have seen blog posts come up about someone switching to go
09:50 < sinclair|work> RLa: well, even in the web space, things are way more sensible 
09:51 < sinclair|work> RLa: there are some commentators claiming managed code was a mistake
09:52 < sinclair|work> RLa: a 10 year long experiment 
09:52 < sinclair|work> and its better to move back to native code
09:52 < sinclair|work> silly people
09:53 < RLa> modern c++ is not so bad
09:53 < sinclair|work> RLa: yeah, it used to be a lot worse
09:53 < sinclair|work> then boost hit the scene, 
09:54 < RLa> not sure that made it actually better
09:55 < sinclair|work> RLa: i used to roll a lot of code in C++
09:55 < sinclair|work> RLa: almost entirely Win32 and OpenGL
09:55 < RLa> sinclair|work, they fixed the table on pypl page
09:56 < RLa> now it compares jan 2013 to jan 2012
09:56 < sinclair|work> RLa: ahh, interesting
09:56 < RLa> i'm still doing c++ daily, qt, no boost, no stl
09:57 < sinclair|work> RLa: maybe as a result of the comments on channel 9
09:57 < sinclair|work> RLa: what are you using C++ for?
09:57 < RLa> haha
09:57 < RLa> desktop apps
09:57 < RLa> or rather an app
09:57 < sinclair|work> RLa: and don't want a runtime dependancy ?
09:59 < RLa> i chose it because of qt features, not c++, i actually had no c++ experience before jumping into the project
09:59 < RLa> there were no other sane alternatives at that time
09:59 <@konobi> RLa: not appjs!?
09:59 < RLa> also considered c# and delphi
10:00 < RLa> it was about 4 years ago
10:00 < RLa> yeah, we considered web-based app too, with ror backend
10:00 < RLa> but it looked too heavyweight
10:00 <@konobi> appjs == desktop
10:00 < RLa> for a small desktop app
10:01 < sinclair|work> konobi: appjs looks awesome
10:01 < RLa> node-webkit works too :)
10:04 < sinclair|work> konobi: wow, appjs is tops
10:07 < sinclair|work> konobi: if only nodejs ran on winrt
10:09 <@konobi> rt?
10:09 < sinclair|work> konobi: its that ARM windows build
10:10 < sinclair|work> konobi: doesn't allow applications to write and execute jitted code, which v8 relies on
10:11 < sinclair|work> konobi: so outside of emulation, or Microsoft changing the rules a bit, its unlikely to see nodejs running on winrt
10:12 < sinclair|work> konobi: however, its not impossible to write and execute jitted code on RT, as internet explorer is apparently does this behind the scenes. its just developers don't have access to the API
10:12 < sinclair|work> kinda sucks
10:14 < zkirill> I am writing a Node.js API for a mobile application that only serves JSON. What decision factors should I be looking at when deciding between writing it from scratch or using some kind of a framework like Express?
10:14 <@konobi> zkirill: restify
10:16 < zkirill> konobi: that is brilliant, thank you sir
11:36 < leohxj> is anyone here?
11:37 < zkirill> yup
11:51 < lord4163> Hi there
11:54 < lord4163> Can I embed PHP into the node webserver?
11:55 < Deathspike> You.. probably can in some roundabout way, but why would you ever want to do that?
12:02 < lord4163> Because I have existing scripts in PHP and my knowledge of node is minimum
12:02 < lord4163> I am wanting to use node because PHP can't really multitask
12:04 < marcoslhc> lord4163 even running php code in node some way, the code will be synchronous 
12:04 < Deathspike> multitask?
12:05 < lord4163> yeah multitask and output various values real time
12:05 < Deathspike> Depending on your load, PHP can do real-time just fine.
12:05 < Deathspike> What do you mean with multitask?
12:09 < lord4163> Well Im making a poster it has to rar par and post files and put the status in a overview :)
12:12 < Deathspike> lord4163: CPU intensive tasks aren't the forte of NodeJS, after all, we are running a single thread per CPU (if you cluster the application). CPU intensive tasks, like that, can be done by spawning a process in NodeJS to do the work and update that way, but you'll be OS locked if you do that. In PHP, you can actually just send partial updates using echo and flush and have your JavaScript update 
12:12 < Deathspike> the UI with the status. You won't particularly like NodeJS for this type of app..
12:13 < lord4163> Well everyone says PHP is blocking blablabla u have to learn node :D
12:14 < zkirill> lord4163: have you considered a PHP <-> Node.js API?
12:15 < Deathspike> Fanboys always say system X is better than system Y..
12:16 < Deathspike> PHP is fine for certain tasks. An intensive app such as a file packer can be done in Node, sure, ... but unless you want to have the app work for a really huge number of people, doing a lot of intensive and OS-specific execs won't pay off much. Time vs payoff idea here.
12:16 < lord4163> Deathspike: If it is possible in PHP I like to just have php :)
12:17 < lord4163> Deathspike: I don't see really a way how to do this in PHP
12:18 < Deathspike> lord4163: It all depends on the exact specifics you are after. What, *exactly*, must the app be doing?
12:18 < lord4163> I do like if the person clicks add task it has to system("rar file blabla") and par but the page may not be loading anymore
12:18 < lord4163> so I can close the client and let it run on server :)
12:19 < lord4163> so ive to make a kind of daemon but there is no documentation 
12:19 < ksmth> lord4163 try researching Queues
12:20 < Deathspike> Do you want a progress indicator on your app, or just, "working"?
12:20 < ksmth> lord4163 basically, you put a certain task into a queue and immediately render the page, saying "currently working". then you have a worker process taking jobs off the queue and processing them. 
12:21 < lord4163> Yeah I want to tell the user it's rarring or parring and how much is done
12:22 < ksmth> lord4163 research queueing. I don't think anyone here can walk you through the specifics.
12:23 < lord4163> okay
12:23 < Deathspike> Queueing is fine, but if you need live updates you need some kind of connection with the packing progress. Depending on the packing tool you'll be using, you can do live updates based on its output. Node is a nice match for this, but take care, because too many packings at the same time will blow your server up.. 
12:24 < leohxj> ..
12:24 < Deathspike> A queue is the safe route, as ksmth suggests, but can't really live update unless you wrap the queue worker in an updater to open connections or something.
12:24 < ksmth> Deathspike you can always poll the queue
12:25 < ksmth> Deathspike and make the worker process update the status of its current job
12:25 < Deathspike> That last option is the best bet, aye.
12:25 < Deathspike> Polling is yucky.
12:29 < ksmth> Deathspike yeah, you're right. you can just make the worker notify the main app server about the updates.
13:13 < ogny> irefox(+cnt){169}* [Act: 3>>│                                     
13:14 < ogny> <sdfsfsadf
13:14 < ogny> sorry
13:14 < Andyland> Seems like there's much happening here innit?
13:49 < reardon> Does anyone know a mode or method that would allow me to read a file, replace #{VAL}, and write to an output file -- or would I have to write a parser? Specifically, it's for generating CSS themes
13:49 < reardon> module*
13:50 < Deathspike> You can use fs.readfile, a generic replace and a fs.writefile.
13:50 < Deathspike> It's not very advanced, but if that's the only tag you need, it works.
13:50 < Deathspike> It's probably better to look at less or stylus tho if you're into css theming.
13:51 < reardon> thanks
13:51 <@konobi> less is pretty decent
13:51 <@konobi> http://lesscss.org/
13:53 < reardon> ahh
13:53 < reardon> perfect for what i need
13:53 < reardon> 'You can invoke the compiler from node'
13:53 < reardon> thanks a bunch
14:11 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:17 < croffe>  /leave #nodejs
14:17 < croffe> lol
14:18 < beasty_> tou shall not leave :p
15:26 < TomyLobo> http://pastebin.com/Wssk8mWt what does this error mean?
15:26 < TomyLobo> i dont know what a bindings file is or why it's looking for it
15:26 < MI6> joyent/libuv: piscisaureus created branch spawn-pathext - http://git.io/vng0bQ
15:27 < RWOverdijk> Hey. I just installed less (npm install less) but I can't figure out where it is located now. Is there a way for me to find the modules directory?
15:27 < TomyLobo> RWOverdijk current dir
15:28 < RWOverdijk> TomyLobo: Holy… carp. lol. I did not know that.
15:28 < RWOverdijk> Thanks!
15:28 < RWOverdijk> What's the best did to store modules?
15:28 < TomyLobo> there's the -g option
15:28 < RWOverdijk> global I guess?
15:28 < TomyLobo> which puts it somewhere wherer node can't find it
15:28 < TomyLobo> -r
15:29 < RWOverdijk> That's… not very useful then
15:29 < TomyLobo> it isn't, no
15:29 < RWOverdijk> haha
15:29 < TomyLobo> and once you told it where to look, you get errors like mine
15:30 < RWOverdijk> Anyway, this is much better. Now I can have it install within my project.
15:30 < torvalamo> TomyLobo: it looks like exec-sync is looking for a "binding" file. Probably a bug, which is somehow related to binding c++ modules to js internal obects
15:30 < TomyLobo> torvalamo hmm what can i do?
15:30 < TomyLobo> does it require a newer node maybe?
15:30 < TomyLobo> 0.6.19
15:31 < torvalamo> it seems like exec-sync isn't updated to new node
15:31 < torvalamo> if it's the jeremeyfa one
15:31 < TomyLobo> my node is 2-3 minor vers back
15:31 < torvalamo> so if anything you should downgrade
15:31 < TomyLobo> i hate library hell...
15:32 < torvalamo> hm
15:32 < torvalamo> on closer inspection
15:32 < torvalamo> looks like the ffi module is the culprit
15:32 < TomyLobo> what's an ffi module?
15:32 < TomyLobo> foreign function interface?
15:32 < TomyLobo> i.e. the native stuff behind it?
15:33 < torvalamo> at bindings (/usr/local/lib/node_modules/exec-sync/node_modules/ffi/node_modules/bindings/bindings.js:84:13)
15:33 < torvalamo> the exec-sync depends on the ffi module which depends on the bindings module (all custom, I think)
15:33 < TomyLobo> http://paste.debian.net/222226/ that's that file
15:35 < TomyLobo> there's no *.node on my whole machine
15:36 < MI6> joyent/libuv: Bert Belder spawn-pathext * c2f8031 : WIP - windows: spawn with PATHEXT - http://git.io/l57hdA
15:37 < TomyLobo> there are a bunch of binding* though. bindings.js a few times, binding.gyp a few times too, binding.cc (although i don't know why that is in a binary package)
15:37 < torvalamo> looks like ffi is calling binding.bindings(...) and tries to bind to something in the "ref" module which should also be in ffi/node_modules just like bindings
15:37 < torvalamo> so is there a ref folder in the ffi/node_modules
15:37 < torvalamo> (/usr/local/lib/node_modules/exec-sync/node_modules/ffi/node_modules/ref/...
15:38 < torvalamo> so the ffi module is trying to bind a file that doesn't exist or something. try updating the ffi module within the exec-sync folder
15:38 < TomyLobo> find /usr/local/lib/node_modules | pastebinit => http://paste.debian.net/222227/
15:38 < torvalamo> do
15:39 < torvalamo> cd /usr/local/lib/node_modules/exec-sync
15:39 < torvalamo> npm update ffi
15:39 < andylippitt> Why are the HTTP and HTTPS modules separate?
15:40 < torvalamo> because the https protocol has an additional parent protocol
15:40 < TomyLobo> torvalamo that didnt change the error
15:40 < torvalamo> http is on top of tcp, while https is on top of tls/ssl as well as tcp
15:40 < TomyLobo> npm http GET https://registry.npmjs.org/ffi/1.1.2\nnpm http 304 https://registry.npmjs.org/ffi/1.1.2 and the same error when retrying require
15:41 < andylippitt> so it's just an artifact of resolving a multiple inheritance problem?
15:41 < torvalamo> try updating the ref module as well
15:41 < torvalamo> from inside the ffi folder
15:42 < torvalamo> i missed that, it seems the ref folder is the first module to make the call that leads to the bindings error
15:42 < torvalamo> ref module*
15:43 < torvalamo> but it's from an anonymous function, so i don't know if it could still come from ffi or if it's defined within ref
15:44 < shaggi> hi guys:)
15:44 < TomyLobo> npm http GET https://registry.npmjs.org/ref\nnpm http GET https://registry.npmjs.org/ref\nnpm http 304 https://registry.npmjs.org/ref\nnpm http 304 https://registry.npmjs.org/ref
15:44 < TomyLobo> and the same error again
15:45 < MI6> joyent/libuv: Bert Belder spawn-pathext * 32267da : WIP - windows: spawn with PATHEXT - http://git.io/o4l0iQ
15:45 < torvalamo> (/usr/local/lib/node_modules/exec-sync/node_modules/ffi/node_modules/ref/lib/ref.js:5:47)
15:45 < torvalamo> is that function trying to do bindings(... 'binding' ...)
15:45 < torvalamo> something
15:46 < TomyLobo> /usr/local/lib/node_modules/exec-sync/node_modules/ffi/node_modules/ref/lib/ref.js http://paste.debian.net/222229/
15:47 < TomyLobo> exports = module.exports = require('bindings')('binding')
15:49 < torvalamo> yeah
15:49 < torvalamo> that line is the bug
15:49 < TomyLobo> oh?
15:49 < torvalamo> no
15:49 < torvalamo> yeah
15:49 < torvalamo> wait
15:50 < torvalamo> :p
15:50 < tjfontaine> is there still no \*.node in /usr/lib/node_modules?
15:50 < torvalamo> the last ('binding') shouldn't be there
15:51 < tjfontaine> the last is just specifying the module name
15:51 < tjfontaine> in this case it's superfluous
15:51 < TomyLobo> still the exact same files
15:51 < torvalamo> the bindings module has a function called binding that is set as module.exports
15:51 < TomyLobo> same folders i dont know. might be a few version-named folders that changed
15:51 < torvalamo> the ref module tries to include a bindings.binding function, which is now set as just bindings
15:52 < torvalamo> so the ref module is probably not updated after the bindings module put the binding function as the exports
15:52 < torvalamo> before the binding function was a part of the exports, not the actual exports itself, like it is now
15:53 < torvalamo> or am i fucking something up now
15:53 < torvalamo> i'm confusing myself
15:53 < TomyLobo> btw i earlier called npm install exec-sync without -g and subsequently removed the node_modules folder that it created
15:54 < TomyLobo> i now see there is a .npm folder in my home folder too
15:54 < torvalamo> yeah it's just a cache
15:54 < TomyLobo> belonging to what?
15:54 < torvalamo> did it work when you installed it locally though?
15:54 < TomyLobo> node? local npm? global npm?
15:54 < torvalamo> local npm
15:55 < TomyLobo> belonging to what? node? local npm? global npm?
15:55 < TomyLobo> i never tried it after installing locally
15:55 < torvalamo> it's the data retreived from the npm server when run npm locally
15:55 < torvalamo> or package data
15:55 < torvalamo> like versions and stuff
15:55 < TomyLobo> ok, i'll get rid of that and try installing it locally again
15:55 < torvalamo> it's safe to remove if you don't use local modules
15:56 < torvalamo> safe to remove even if you do use local modules, but npm then has to recreate it when you use npm
15:57 < TomyLobo> so... npm install exec-sync && js\nrequire('exec-sync')?
15:57 < torvalamo> yeah
15:57 < TomyLobo> or does it need some kind of variable or argument?
15:57 < torvalamo> npm install exec-sync && node\nrequire('exec-sync')
15:58 < TomyLobo> same errors, except with different paths
15:58 < TomyLobo> the package from sid sets up an "alternative" thing called "js"
15:59 < TomyLobo> readlink `readlink \`which js\`` => /usr/bin/nodejs
15:59 < torvalamo> yeah, the bug is that require('bindings')('binding') line... the ref module tries to import a 'binding.node' file that doesn't exist in the module, in which case you can't do anything about it... OR it just wants the binding function of the bindings module to extend it. which you can fix by removing the ('binding') part
16:00 < torvalamo> try removing the ('binding') part and see if that works
16:00 < torvalamo> if that doesn't work, then it's missing files in the ref module
16:00 < torvalamo> binding.node to be specific
16:00 < TomyLobo> what's a .node file?
16:01 < TomyLobo> js source? binary library?
16:01 < torvalamo> binary
16:01 < TomyLobo> remember that binding.cc file i mentioned?
16:01 < torvalamo> nope
16:01 < torvalamo> oh in the node source
16:01 < torvalamo> yeah that's different
16:01 < torvalamo> that's used to bind c++ modules to node internal objects
16:01 < TomyLobo> it's inside the ffi folder
16:02 < torvalamo> is it now
16:02 < TomyLobo> /usr/local/lib/node_modules/exec-sync/node_modules/ffi/node_modules/ref/src/binding.cc
16:02 < torvalamo> yeah that's in the ref folder
16:02 < torvalamo> not the ffi folder
16:02 < Industrial> I made a NPM module but haven't published it yet. How do I test requiring it as a module locally?
16:02 < TomyLobo> k
16:03 < torvalamo> you may have to compile it then
16:03 < Industrial> just put it in a ./node_modules somewhere? TIAS!
16:03 < torvalamo> /usr/local/lib/node_modules/exec-sync/node_modules/ffi/node_modules/ref/README.md
16:04 < torvalamo> Industrial: put it in node_modules/your_module_name
16:04 < torvalamo> the folder containing node_modules is then the root folder of that project which uses it
16:05 < torvalamo>  /yourproj/file.js has require('your_module_name') will look for /yourproj/node_modules/your_module_name/package.json or index.js
16:06 < torvalamo> TomyLobo: what does /usr/local/lib/node_modules/exec-sync/node_modules/ffi/node_modules/ref/README.md contain
16:06 < torvalamo> does it have instructions to compile?
16:06 < torvalamo> because the cc files itself is useless
16:06 < torvalamo> -s
16:07 < TomyLobo> torvalamo http://paste.debian.net/222233/ reading it atm
16:07 < torvalamo> /usr/local/lib/node_modules/exec-sync/node_modules/ffi/node_modules/ref/package.json is probably malformed, it should contain instructions to npm that it should be compiled
16:10 < TomyLobo> doesn't look malformed
16:10 < TomyLobo> ref/package.json http://paste.debian.net/222234/
16:11 < TomyLobo> ref/lib/ref.js http://paste.debian.net/222235/
16:11 < TomyLobo> oh, we had that already
16:12 < TomyLobo> torvalamo should i try and install ffi and ref globally?
16:12 < torvalamo> i did npm install ref in a test directory and it compiled src/binding.cc to build/binding.node
16:12 < TomyLobo> ok lemme try that
16:12 < sinclair|work> any rest experts here?
16:13 < sinclair|work> sorry, REST experts
16:13 < TomyLobo> it didn't for me, torvalamo
16:13 < TomyLobo> torvalamo what did that look like?
16:13 < TomyLobo> the npm output
16:13 < torvalamo> sec
16:14 < torvalamo> http://paste.debian.net/222236/
16:14 < sinclair|work> in REST, its fine for exposing resources, however, it kinda sucks when retry do something as trivial as exposing a "DoThisAction" type operation.
16:15 < sinclair|work> for example, if one wanted to expose a REST method to restart a web server, would one use a GET/PUT/POST
16:16 < TomyLobo> definitely not PUT
16:16 < TomyLobo> PUT is for uploading files
16:16 < TomyLobo> POST is for posting forms, GET is for getting content. although many people use GET for forms/commands as well.
16:16 < TomyLobo> i would definitely do so because it is tons less complex than POST, for one
16:17 < TomyLobo> in short: i recommend GET for simple commands with no long body of extra input data (like restarting a web server), but i'm no REST expert
16:18 < sinclair|work> TomyLobo: PUT is for UPDATES
16:18 < sinclair|work> POST is for INSERTS
16:18 < andylippitt> I'm no expert either, but I think there is a widespread assumption that GET methods don't change anything on the server... 
16:19 < andylippitt> so a "restart service" method would violate that
16:19 < TomyLobo> sinclair|work wikipedia says otherwise
16:19 < torvalamo> PUT is for creating new resources or overwriting old ones
16:19 < torvalamo> in their entirety
16:19 < torvalamo> PUT cannot modify something, it completely replaces the resource
16:20 < sinclair|work> torvalamo: exactly, i classify it in the updates category
16:20 < torvalamo> well that's incorrect, since updates modifies something
16:20 < torvalamo> but i see how you think, even though you're thinking wrong
16:20 < torvalamo> :P
16:20 < sinclair|work> torvalamo: yes yes, not to get too hung up on semantics
16:21 < torvalamo> well you're thinking right, just wrong words
16:21 < torvalamo> was what i meant
16:21 < TomyLobo> PATCH is what you're thinking about (again, according to wikipedia)
16:21 < torvalamo> semantics is important when it comes to technical talk ;)
16:21 < sinclair|work> torvalamo: the thing is, invoking an operation on the server is not a good use for rest
16:22 < torvalamo> that is entirely up to the implementation, imho
16:22 < torvalamo> the user of the interface shouldn't care what it does
16:22 < torvalamo> behind the scenes
16:23 < TomyLobo> i'd still use GET, simply because you can diagnose it by putting crafted urls in your browser :)
16:23 < sinclair|work> torvalamo: sure, but in its purest form, you have assets/object/documents sitting behind the scenes, and they are inserted, updated, deleted or getted
16:23 < TomyLobo> (as well as <a href> type links)
16:24 < TomyLobo> sinclair|work in your theory, your server would be an object... on your server
16:24 < torvalamo> btw if you wanted to restart a server, that itself doesn't dictate any particular method. If it's just a simple url, then GET. If it needs more data, then POST.
16:24 < sinclair|work> torvalamo: that does not fit well with using REST for "restarting a server" or "preforming some arbitrary operation"
16:24 < torvalamo> but definitely not PUT or any other
16:24 < torvalamo> that's for completely different purposes
16:25 < sinclair|work>     ..  /api/operations/restart ?
16:25 < torvalamo> you could make your own method
16:25 < torvalamo> META
16:25 < torvalamo> or something
16:25 < torvalamo> :P
16:25 < TomyLobo> PUSH /reset-button
16:25 < torvalamo> hehe
16:26 < sinclair|work> seems a little borked to me
16:26 < torvalamo> that's a verb with different internet meaning though
16:26 < sinclair|work> a "square peg in a round hole" 
16:26 < torvalamo> well REST shouldn't be concerned with the admin of your server
16:26 < torvalamo> that's just about dataz
16:26 < sinclair|work> torvalamo: yup
16:27 < sinclair|work> so, RESTful
16:27 < andylippitt> sinclair|work one approach I've seen that makes that seem a little less offensive is when you blow REST out with unique IDs on every method that expects a change on the server, and both ends expect that every method is reentrant... then POSTing or PUTing the same action a second or third time with unique ID doesn't cause anything new to happen.  In my mind anyways, this somewhat salves the REST vs. Transaction conflight
16:29 < torvalamo> if you want/need to use the same interface for server management, then identify it through a resource, e.g. /server run a POST /server with multipart or post variables as arguments
16:29 < sinclair|work> torvalamo: right, but that is not REST, that is RESTful
16:30 < sinclair|work> generally speaking, REST is a hard fit for a lot of web api
16:30 < torvalamo> you're confusing what restful means
16:30 < torvalamo> that something is restful just means that it implements rest
16:31 < sinclair|work> REST-like then
16:31 < torvalamo> yeah
16:31 < sinclair|work> to the extent that operations hang on logical urls
16:31 < torvalamo> that's how HTTP works
16:31 < sinclair|work> and accept parameters over POST verbs
16:31 < torvalamo> you can't not use urls to do stuff
16:31 < sinclair|work> torvalamo: so the real question is, why not use SOAP
16:32 < torvalamo> there's no REST police
16:32 < torvalamo> just do what you want
16:32 < sinclair|work> torvalamo: there is a lot of opinionated folk out there :)
16:33 < torvalamo> paradigm purity is the reason why people never get stuff done
16:33 < torvalamo> as proven by our half hour long conversation about nothing
16:33 < torvalamo> :P
16:33 < torvalamo> REST came about from changing the view on what HTTP could be used for
16:34 < torvalamo> so they're guilty of it themselves.
16:34 < torvalamo> ust do REST 1.1
16:34 < torvalamo> with POST /server    action=restart
16:34 < torvalamo> :P
16:34 < torvalamo> or ACTION /restart
16:34 < torvalamo> even
16:34 < sinclair|work> torvalamo: its not a wasteful conversation, there other some that think that REST is the silver bullet for web services
16:35 < torvalamo> listen
16:35 < torvalamo> some people thought XML was all that was ever needed for data serialization
16:35 < torvalamo> and some still do
16:35 < torvalamo> well call them freaks now
16:35 < torvalamo> -ll
16:36 < andu> torvalamo, and json, you think thats the ultimate? i think it is very close to perfect
16:36 < torvalamo> as far as textual representation goes, json is quite minimal yes
16:36 < torvalamo> and readable
16:36 < torvalamo> but there's still binary to be explored
16:36 < cawalch> mmm love json
16:37 < sinclair|work> does JSON have an accepted format for a Date yet?
16:37 < andu> sinclair|work, I tag mine with all 3
16:37 < andu> 		obj.uptime = process.uptime();
16:37 < andu> 		obj.servertime = Date.now();
16:37 < andu> 		obj.serverdate = new Date();
16:38 < andu> just to be sure :)
16:38 < sinclair|work> andu: interesting, what does that mean to non JS consumers
16:38 < andu> well you get readable date format, unix time and accurate system clock
16:39 < torvalamo> it does toString, doesn't it?
16:39 < andu> so ticks all the time needs
16:39 < sinclair|work> torvalamo: sometimes you just want iso8601
16:40 < sinclair|work> torvalamo: .net forexample serializes dates as { date : "\/Date(1239018869048)\/" }
16:40 < torvalamo> there's Date.dateFormat()
16:40 < sinclair|work> torvalamo: i think iso8601 should be the one and only date format
16:40 < torvalamo> which is a standard IETF format which can then be Date.parse()d
16:41 < sinclair|work> torvalamo: for transmission of dates, iso8601 is something everyone can agree upon. 
16:41 < torvalamo> so use Date.toISOString then
16:42 < sinclair|work> torvalamo: are you grumpy?
16:42 < torvalamo> no, just saying that a standard should facilitate, not limit
16:42 < torvalamo> saying that everyone should use the same date format is very ignorant to all those who disagree with you
16:43 < andu> oh and.. robots. http://youtu.be/3RBSkq-_St8
16:43 < sinclair|work> torvalamo: no it isn't
16:43 < torvalamo> if your JSON returns a date in a particular format, there's a high chance that the receiver will have to parse it using a library or their own code anyways
16:44 < torvalamo> no matter which language.
16:44 < andu> yes, so use as many different formats as possible without going overboard
16:44 < andu> ofc
16:44 < sinclair|work> torvalamo: yes, and what language Date API doesn't support iso8601?
16:44 < torvalamo> not to mention all the different date classes that exist, some have more info than you could ever need (but it finds necessary), how would that get included in the json that it wants to send
16:44 < sinclair|work> out of the box
16:45 < sinclair|work> iso8601 supports everything you need for a date, including time offsets, the only thing it doesn't support is time on other planets
16:46 < torvalamo> yes, and json doesn't tell you that you can't use iso8601 for your structure
16:47 < sinclair|work> you could argue that everyone should standardize on olsen timezones too, and have them added to a date format, as its often useful to know the offset and the locale, 
16:47 < torvalamo> there's a downside to iso though
16:47 < torvalamo> it only comes in utc
16:47 < torvalamo> (or zulu)
16:47 < torvalamo> which means that both sides have to timezone convert it
16:48 < sinclair|work> torvalamo: yes and?
16:48 < torvalamo> both for storage and retreival
16:48 < MI6> joyent/libuv: Ben Noordhuis master * 339033a : unix: use uv__hrtime() internally  This commit renames the various uv_hrt - http://git.io/36CKOQ
16:48 < torvalamo> so that's extra work
16:48 < sinclair|work> torvalamo: ive always just converted the date to UTC-0 when sending anyway
16:49 < sinclair|work> and for storing the date, i store as UTC-0
16:49 < torvalamo> there are date formats which include time zones and even daylight savings information
16:49 < torvalamo> which some might find useful for certain applications
16:49 < torvalamo> json doesn't prevent them from using that
16:49 < sinclair|work> passing it back to the client simply means them converting from UTC-0 to whatever timezone offset they have
16:49 < torvalamo> if they want
16:50 < sinclair|work> torvalamo: i think there should be a standardized format for dates in JSON
16:50 < torvalamo> i think the US should stop saying month-day-year and start saying day-month-year, because it confuses the rest of the world when we read american dates
16:50 < torvalamo> it's not as easy as that
16:51 < sinclair|work> torvalamo: not for transmission its not
16:51 < sinclair|work> how you display the date is locale specific
16:52 < torvalamo> it's like someone telling you that everyone has to drive on the right side of the road, because there are roads across borders and then you wouldn't have to change lanes when you enter a country with left side driving
16:52 < sinclair|work> torvalamo: do you spell color, color or colour?
16:52 < torvalamo> depends on my mood
16:52 < sinclair|work> nice and consistent 
16:53 < torvalamo> english isn't my native language
16:53 < torvalamo> so i don't need to follow a standard
16:53 < andylippitt> hah
16:53 < torvalamo> i try to keep it british
16:53 < torvalamo> but sometimes i just write american without realizing
16:53 < torvalamo> so it depends
16:54 < sinclair|work> torvalamo: its not like that anyway, standards == good
16:54 < sinclair|work> torvalamo: having an accepted Date for JSON is important
16:54 < torvalamo> it's completely unimportant
16:55 < sinclair|work> it is important
16:56 < sinclair|work> just think about all those random date formats being exchanged between systems out there
16:56 < sinclair|work> its unnecessary, as a single date format can handle the job, 
16:56 < torvalamo> well then it should be an obect {calendar: 'gregorian', year: 2013, month: 1, day: 6, hour: 17, minute: 53, second: 0, timezone: 'CET'}
16:57 < sinclair|work> also to note, it has nothing to do with whats presented to an end user
16:57 < torvalamo> it does, since json is readable for a reason
16:57 < sinclair|work> not for the transmission of data
16:57 < torvalamo> if it didn't need to be presented to a user, then BSON would be standard
16:58 < sinclair|work> torvalamo: i don't know how many international applications you have written in the past, but you have 1 fixed date format, and you transform it into what ever local the user is in
16:59 < andylippitt> the clear readability is important... I wonder if ####-##-## means the same thing around the world
16:59 < sinclair|work> i don't want to, fetch random date format, transform it into a datetime understood by my application, only to further transform it to something understood by a end user
17:00 < torvalamo> andylippitt: it clearly does not, sec
17:00 < sinclair|work> i want, at a system level at least, 1 accepted date format that i pass around different services
17:00 < torvalamo> http://en.wikipedia.org/wiki/Date_format_by_country
17:01 < torvalamo> there are 7 different formats JUST FOR DATE AND MONTH
17:01 < torvalamo> 2 are used by billions of people, 1 is used by americans
17:01 < gimi> hi, how to inherit EventEmitter of Node via Typrescript format?
17:02 < andylippitt> torvalamo: I know there's ideal date formats, but I think one of the big problems is ambiguity... when reversed, beginning with year, I wonder if anyone would misread it.  If not, then I think the readability aspect of json would be satisfied.
17:02 < TomyLobo> there are at least 3 formats for dates in actual use that i'm aware of, plus iso
17:02 < TomyLobo> make that lawful use, not actual use
17:03 < sinclair|work> anyway, json needs a standardized date format
17:03 < TomyLobo> use iso
17:03 < sinclair|work> TomyLobo: i do
17:03 < TomyLobo> yyyy-mm-dd
17:03 < torvalamo> andylippitt: it seems that all formats beginning with year is YMD, so that particular format would probably not be misread
17:03 < andylippitt> there's no yyyy.dd.mm in that article... I think yyyy-mm-dd means the same thing to everyone.
17:04 < sinclair|work> TomyLobo: i use the exact format defined for XML dates, xs:time and xs:dateTIme
17:04 < TomyLobo> which is?
17:04 < sinclair|work> iso
17:04 < andylippitt> well, I think we've just solved it... any other problems in the world we can kick over before I make breakfast?
17:04 < torvalamo> there's piers morgan
17:05 < torvalamo> kcik away
17:06 < torvalamo> TomyLobo: did you get the binding to compile?
17:06 < TomyLobo> nope
17:10 < Sembiance> :)
17:16 < torvalamo> TomyLobo: did you install node through package manager?
17:17 < torvalamo> and does ffi compile if you npm install it
17:18 < torvalamo> it should get the same kind of npm log that i pasted for you
17:18 < torvalamo> just twice as long
17:18 < torvalamo> and do you have a compiler (e,g, gcc) installer
17:18 < torvalamo> installed*
17:18 < TomyLobo> torvalamo i installed nodejs and npm as well as some of the dependencies (node libs) through the package manager
17:18 < TomyLobo> i have g++-4.7
17:19 < jhsto> is it possible to run node in known directory, like lets say localhost/test?
17:19 < tjfontaine> are you on debian or ubuntu?
17:19 < tjfontaine> jhsto: can you be more specific?
17:20 < TomyLobo> debian wheezy, but those packages were from sid
17:20 < jhsto> tjfontaine, like i dont want to run my node app in my domain root, but in /something directory
17:20 < tjfontaine> TomyLobo: you should probably just compile node on your own
17:20 < torvalamo> it's possible that g++ won't be used if the file is .cc
17:20 < torvalamo> try installing gcc in its entirety
17:20 < TomyLobo> g++ depends on it
17:21 < torvalamo> g++ is part of gcc
17:21 < torvalamo> but it takes different arguments
17:21 < torvalamo> and probably won't recognize .cc as a cpp file
17:21 < torvalamo> though i'm no expert
17:21 < tjfontaine> jhsto: oh you mean a web app using connect or express or similar?
17:21 < jhsto> tjfontaine, exactly
17:23 < jhsto> tjfontaine, but since its my homepage and i would like to run several processes of node on the domain, id like to be able to sort things out
17:23 < jhsto> by restricting apps into folders
17:23 < torvalamo> is node the main server?
17:23 < torvalamo> or do you use nginx/apache
17:23 < torvalamo> or other
17:23 < jhsto> it has apache, but i disabled it to be able to forward ports right
17:23 < jhsto> so no
17:24 < torvalamo> with nginx you could route certain folders to specific node instances
17:24 < torvalamo> apache i don't know... but i guess it's complicated
17:24 < jhsto> i tried same with apache but failed to do so
17:25 < TomyLobo> torvalamo i meant the g++ package
17:26 < tjfontaine> do you have build-essentials installed?
17:26 < TomyLobo> i have, now
17:27 < TomyLobo> didnt work after that either though
17:28 < torvalamo> have you ever used g++ for something on your current setup?
17:28 < torvalamo> or have you seen it be used
17:28 < TomyLobo> nope
17:28 < torvalamo> install gcc :p
17:29 < TomyLobo> it is
17:29 < torvalamo> i think i've even removed g++ (by accident) on my machine, and gcc still works with .cc
17:29 < TomyLobo> i told you it's a dependency of the g++ package
17:29 < torvalamo> not completely
17:29 < tjfontaine> TomyLobo: please pastebin a current result of `npm install ffi`
17:29 < torvalamo> gcc is more than just the interface
17:30 < torvalamo> it has many packages if you install gcc itself
17:30 < tjfontaine> torvalamo: if he just installed build-essentials the dependency tree should be fine, unless he's mucked with gcc/g++ symlinks himself
17:31 < TomyLobo> http://pastebin.com/tLpcfE6Y
17:31 < torvalamo> i wouldn't know, i compile node myself, so i guess that comes with it then
17:31 < torvalamo> oh build-essentials from the package manager
17:31 < torvalamo> right
17:31 < torvalamo> gotya
17:32 < torvalamo> it also needs node-gyp
17:32 < TomyLobo> i might not have that 
17:32 < TomyLobo> dpkg-query: package 'node-gyp' is not installed and no information is available
17:32 < tjfontaine> TomyLobo: can you pastebin the result of a current `npm install ffi` please and thank you
17:32 < torvalamo> npm install node-gyp
17:33 < TomyLobo> -g?
17:33 < tjfontaine> no
17:33 < torvalamo> yeah
17:33 < tjfontaine> just `mkdir tmp && cd tmp && npm install ffi` lets see theresult
17:33 < TomyLobo> npm WARN prefer global node-gyp@0.8.2 should be installed with -g
17:33 < TomyLobo> :P
17:34 < torvalamo> you wouldn't NEED it to be -g if it's in any of the parent folders of the ffi package
17:34 < torvalamo> but it's nice to have for later with npm
17:35 < TomyLobo> http://pastebin.com/kR9xXqba
17:35 < torvalamo> correct
17:37 < TomyLobo> now i install gyp globally and then reinstall exec-sync globally?
17:39 < torvalamo> i think this might work
17:39 < torvalamo> npm install node-gyp -g
17:40 < torvalamo> then in /ffi -> node-gyp rebuild
17:40 < torvalamo> "which node-gyp" should be /usr/local/bin/node-gyp
17:40 < torvalamo> so you need it to be global to get the binary
17:40 < TomyLobo> it is
17:41 < TomyLobo> @which
17:41 < torvalamo> so go to node_modules/ffi
17:41 -!- mode/#Node.js [+o ryah] by ChanServ
17:41 < torvalamo> and type node-gyp rebuild
17:41 < torvalamo> and then maybe also in the ref folder
17:42 < torvalamo> looks like it doesn't rebuild deps
17:44 < torvalamo> it should have a line in the log that says COPY Release/ffi_bindings.node     and in ref   COPY Release/binding.node
17:44 < TomyLobo> /usr/bin/env: node: No such file or directory
17:44 < TomyLobo> stupid gyp -_-
17:44 < torvalamo> lol
17:45 < torvalamo> uninstall node, then just download and install it manually
17:45 < torvalamo> i bet that fixes everything
17:45 < TomyLobo> nah, i just made a symlink
17:46 < torvalamo> what's the npm version?
17:46 < torvalamo> ie. how old is the stuff in the package manager
17:47 < TomyLobo> > require('exec-sync')
17:47 < TomyLobo> [Function]
17:47 < TomyLobo> yay
17:47 < torvalamo> giggity
17:48 < TomyLobo> npm 1.1.4~dfsg-2
17:48 < TomyLobo> nodejs 0.6.19~dfsg1-6
17:48 < torvalamo> npm: '1.1.69'
17:48 < torvalamo> 0.8.16
17:48 < TomyLobo> doesnt sound THAT bad :)
17:49 < torvalamo> only 65 revisions
17:49 < torvalamo> :P
17:49 < torvalamo> npm update npm
17:49 < torvalamo> or whatever it was
17:49 < TomyLobo> that wont work
17:49 < geNAZt> npm install -g npm
17:49 < geNAZt> that works
17:50 < TomyLobo> cause npm will only deal with the "usr/local" stuff, not with /usr where it's installed
17:50 < torvalamo> aha
17:50 < torvalamo> genazt's suggestion then
17:50 < TomyLobo> then i'd have it twice
17:50 < geNAZt> no
17:50 < geNAZt> you wont
17:50 < dgs> are npm installed modules specific to the directory/project you were in when you installed it? or are they system/user wide installs? e.g. if I install for example the express module, do I only need to download it once, or do I need to install again for each new project? (I'm going to be offline for a week or so and am going to be trying to have a play round with node…)
17:51 < TomyLobo> npm will install to /usr/local. dpkg installs to /usr (most packages anyway)
17:51 < geNAZt> dgs: without -g switch local ( project wise ), else system global
17:52 < torvalamo> when working with node it's useful to know how to install it yourself on any system, instead of relying on package managers (which differ in versions and everything)
17:52 < torvalamo> and like you said, even paths
17:53 < torvalamo> the env thing was new to me :p
17:53 < dgs> k. thanks =)
17:54 < torvalamo> and npm comes with node, you don't need to install it separately
17:54 < geNAZt> someone uses relational and documet based database system together ?
17:55 < torvalamo> reddit does
17:55 < torvalamo> it uses documents inside relational tables
17:55 < geNAZt> does reddit know about foreign keys ?
17:55 < geNAZt> and expire of documents ?
17:55 < torvalamo> reddit is a news aggregator site
17:56 < torvalamo> it uses json documents inside mysql :P
17:56 < geNAZt> no what i mean use mongodb + mysql
17:56 < geNAZt> mongodb to store the json
17:56 < geNAZt> mysql for the other things
17:57 < torvalamo> if you want foreign key integrity then mysql has to deal with that
17:57 < geNAZt> my question is does this gain any performance ?
17:57 < torvalamo> what are you making
17:58 < geNAZt> i build a 2d shooter game
17:58 < geNAZt> multiplayer
17:58 < geNAZt> and i want to implement something like a chat. and matchmaking 
17:59 < torvalamo> if speed is an issue, you should keep it in memory
17:59 < geNAZt> the meta which players talk in a chat would be in mysql. the messages in mongodb
17:59 < geNAZt> lol
17:59 < torvalamo> not kidding
17:59 < geNAZt> i hold ~2GB of data in memory
17:59 < geNAZt> without indexing
17:59 < torvalamo> what do you mean messages btw
18:00 < torvalamo> aren't those things that should be passed on as soon as possible?
18:00 < torvalamo> and then discarded
18:00 < torvalamo> player movements, etc
18:01 < geNAZt> chats can have logs
18:01 < geNAZt> and offline messages
18:01 < torvalamo> ah, but logs do not require high performance every second
18:01 < geNAZt> so i would like to use mongodb as "buffer"
18:01 < geNAZt> no that right
18:01 < torvalamo> buffer as in chat buffer?
18:02 < geNAZt> but i want to use a document based database to store documents ( in this case the conversation )
18:03 < torvalamo> a conversation is a row of {chatroom, datetime, user, message} or something like that, right?
18:03 < torvalamo> every message has that same format
18:03 < torvalamo> = use mysql
18:04 < torvalamo> mysql can handle hundreds of millions of them and if indexed properly, you would barely notice a speed increase
18:04 < geNAZt> but is mongodb not faster in that ?
18:04 < torvalamo> i don't see how
18:04 < geNAZt> and what about sorting in these documents ?
18:05 < geNAZt> if i want a range of dates
18:05 < torvalamo> you can index on datetime
18:05 < torvalamo> or even keep date and time separate
18:05 < torvalamo> and index on date
18:05 < geNAZt> y i can in mongo and i can in mysql :D
18:06 < geNAZt> the question is if i have much data in mysql and in mongo. with indexes in both. who is faster at sorting and finding things
18:06 < torvalamo> mysql on sorting, definitely
18:06 < torvalamo> finding, depends what you're trying to find
18:07 < torvalamo> one specific row, probably mongo
18:07 < torvalamo> a range of rows, probably mysql
18:07 < geNAZt> no i would give me documents after a specific datetime
18:07 <@konobi> depends if mongo is in it's |/dev/null mode or not
18:08 < torvalamo> :P
18:08 < geNAZt> :D
18:08 <@konobi> (which is default)
18:09 < torvalamo> remember that mysql can optimize on writing
18:09 < torvalamo> with correct indexing
18:09 < torvalamo> so retrieval is fast and furious
18:11 < geNAZt> does mysql has write caches ?
18:12 < torvalamo> mongodb and mysql work very differently on a technical level, the question is not really relevant
18:12 < torvalamo> since mongodb has write caches to solve problems that mysql does not have
18:13 < torvalamo> or has solved differently
18:14 < torvalamo> mysql has a stricter permission system altogether
18:14 < geNAZt> does mysql write new inserts / updates directly to the fs ?
18:14 < geNAZt> thats true
18:14 < torvalamo> depends which engine you use
18:14 < geNAZt> innodb i would use then
18:14 < torvalamo> innodb has a binary log
18:14 < torvalamo> so you could recreate the most recent state in case of a power failure
18:15 < OTBS4Life> Hey, does anyone know if Socket.IO works with IPv6 yet?  .listen(8124, '::1') seems to not crash, but if I point my browser at http://[::1]:8124, I don't get the usual "Welcome to socket.io".  Yet if I go to http://127.0.0.1:8124, I do.
18:15 < geNAZt> but it would be slow in writing data or not ?
18:15 < torvalamo> as slow as your harddrive is
18:15 < torvalamo> just like mongodb would be
18:15 < OTBS4Life> This guy apparently got it working: https://github.com/LearnBoost/socket.io/issues/992  But, I'm skeptical.
18:15 < geNAZt> so it has no write cache
18:15 < Industrial> require errors on this package.json but json lint passes; https://gist.github.com/7fc9e95fa46285cf9329
18:16 < torvalamo> it does, sort of, in that it queues incoming SQL statments
18:16 < torvalamo> it's a request-response based system
18:16 < Industrial> (unexpected token })
18:16 < geNAZt> but it waits till the new data is written to the disk
18:17 < torvalamo> yes
18:17 < OTBS4Life> Industrial, I see nothing wrong with that JSON.  :-/  Sure you've got the right file?
18:17 < geNAZt> hmmmm bad :D
18:18 < OTBS4Life> Industrial, Or, are there unprintable characters jammed in where somewhere?
18:18 < torvalamo> no
18:18 < torvalamo> not bat
18:18 < torvalamo> bad*
18:18 < geNAZt> for consistenty it is good
18:18 < geNAZt> but for the performance it is bad
18:18 < geNAZt> cause all other queries are blocked till the new data is written or not ?
18:18 < torvalamo> there are two types of queries
18:19 < torvalamo> write queries and read queries. if you have 100 million writes (inserts) they will all be accepted by the server, and executed in order. the client doesn't have to wait for them to finish before moving on.
18:20 < geNAZt> how does mysql then provide me the new id ?
18:20 < torvalamo> you can do buffered and unbuffered queries
18:20 < geNAZt> on the buffered i get no id of the new data ?
18:21 < Industrial> OTBS4Life: https://github.com/Industrial/graphflow
18:22 < torvalamo> geNAZt: i'm not sure which part is which
18:22 < torvalamo> tbh
18:22 < OTBS4Life> Industrial, Odd.
18:23 < MI6> joyent/libuv: Ben Noordhuis master * 1f52fc1 : test: remove consumer_producer test  It fails intermittently on Travis fo (+1 more commits) - http://git.io/7ec4Hg
18:24 < torvalamo> geNAZt: i think we're looking at the issue the wrong way... you want to use mongodb for the chat log because it proves a write cache that you can use to store messages before they are sent to the users?
18:25 < geNAZt> no. i have mongodb because it buffers new documents and writes it to the filesystem later
18:25 < geNAZt> so i can access them in nearly time
18:25 < geNAZt> and i dont have to wait for the harddrive
18:25 < torvalamo> but as a result you can't have foreign key integrity
18:25 < geNAZt> yes
18:25 < torvalamo> which i think you asked about
18:26 < geNAZt> that the reason for the question of a mysql / mongodb mix
18:26 < Industrial> OTBS4Life: hrm now it works, nvm.
18:26 < OTBS4Life> Industrial, NPM is weird.
18:27 < geNAZt> so i would store the meta of a chat ( foreign keys of user, and the document id out of mongodb ) in mysql and the messages in mongodb
18:28 < geNAZt> but the question is if i would benefit from that
18:28 < torvalamo> the time it takes for an http package to be sent from your user to you is minimum 10 ms
18:29 < torvalamo> mysql uses 5 seconds to write 10.000 rows with foreign keys
18:29 < torvalamo> and indexes
18:29 < geNAZt> onto disk ?
18:29 < torvalamo> yes
18:30 < geNAZt> nice
18:30 < TomyLobo> that sounds slow to me
18:30 < torvalamo> consider that this table already had 100 million rows in it
18:30 < geNAZt> not with index updates and foreign key lookups :D
18:31 < Industrial> OTBS4Life: npm info graphflow :-)
18:31 < torvalamo> TomyLobo: that's 0.5 ms per row
18:31 < OTBS4Life> Industrial, Nice!
18:32 < geNAZt> any nice orms around in node ?
18:32 < torvalamo> i'm betting the processing of any http request from the socket accepts it until it is parsed to be understood by node is more than 1 ms at least
18:33 < Industrial> geNAZt: depends on your database, nodetoolbox.org
18:33 < torvalamo> as always with networked software, the bottlenecks are transfers, not on location
18:33 < geNAZt> i would use mariadb or mysql 
18:33 < Iszak> postgresql ftw
18:34  * Industrial throws mongodb into the mix
18:34 < geNAZt> i come from mongodb :D
18:34 < geNAZt> and its shitty for foreign keys
18:34 < geNAZt> and indexes
18:35 < Iszak> well.. that's why you want a RDBMS
18:35 < geNAZt> right
18:35 < Industrial> Yes, yes it is. I made a mobile social mmo database with it. should have gone with RDBMS
18:35 < Iszak> A lot of people jump on mongodb/redis/nosql because it's the new hip thing, when they should go with RDBMS.
18:35 < Industrial> caching beats the shit out of self managing foreign keys all over the palce
18:36 < Iszak> That's not to say mongodb/redis/etc don't have their place, just need to know when to use them and when not to use them.
18:36 < Iszak> I am glad you guys have seen the light, I get tired trying to explain this to people.
18:36 < torvalamo> i think people chose mongodb etc because they can't be arsed to learn how to do rdb admin
18:37 < geNAZt> anyone has worked with sequelizejs ?
18:37 < Iszak> geNAZt if you learn how to do events, let me know.
18:37 < geNAZt> with mysql ?
18:37 < geNAZt> i mean triggers ?
18:38 < Iszak> geNAZt no no I mean before/after save/update etc
18:38 < geNAZt> in sequelize ?
18:38 < Iszak> yes.
18:38 < geNAZt> is it in the docs ? i dont find it
18:38 < Iszak> geNAZt I'm not sure, i couldn't find it.
18:39 < Iszak> geNAZt I ended up using jugglingdb which is somewhat similar.
18:41 < Iszak> geNAZt but ask your question and someone in where will answer if they know it.
18:43 < geNAZt> does jugglingdb support foreign keys ?
18:43 < geNAZt> i dont find any documentation
18:43 < Iszak> geNAZt it supports relationships, yes.
18:44 < Iszak> geNAZt unless you mean something else?
18:44 < geNAZt> no it is what i mean
18:44 < geNAZt> but i am searching some documentation for it :D
18:45 < OTBS4Life> I've got a question for you, that one of you can probably answer.  I've got some servers that will be reading configuration out of a database.  Sometimes that configuration will be updated, and those servers need to read that config again.  Rather than polling, I'm thinking of setting up an out-of-band pub/sub so the server that updates the DB will also send out a message saying that it's been updated.
18:45 < Iszak> geNAZt http://jsdoc.info/1602/jugglingdb/abstract-class.html#class/hasMany
18:45 < OTBS4Life> Is there a better way?  Some sort of DB trigger for sending messages?
18:45 < OTBS4Life> I haven't picked a DB yet... thinking of MongoDB due to the nature of my data.
18:45 < OTBS4Life> I read something about Redis doing pub/sub?  Wasn't sure what that was all about.
18:46 < geNAZt> Iszak: that looks nice thanks
18:47 < Iszak> OTBS4Life unfortunately there isn't any abstract library that I know of that makes a common interface to it. I heard the same thing about redis, I also heard postgresql has notify.
18:47 < Iszak> I don't have experience with any of them
18:48 < OTBS4Life> I'll have to experiment.  Fortunately, I already have a server-to-server protocol built on top of Socket.IO... so I can probably just send messages that way when I do the DB writes.
18:49 < OTBS4Life> Come to think of it... I will have a very small dataset, so maybe polling isn't so bad.
18:49 < OTBS4Life> Config change happens, poll every 5 seconds or so.
18:49 < OTBS4Life> I might have maybe 100 documents in the DB total.
18:49 < OTBS4Life> It will all be in RAM.
18:51 < mscdex> konobi: nope
18:52 < tanderson11> Hey everyone. I am new to node, and most stuff I has read recommended I look into using node in conjunction with expressjs, but I have been unable to see what expressjs adds to my setup?
18:53 < OTBS4Life> tanderson11, Express handles requests from Node's own HTTPServer class.  It bolts on, doesn't replace.
18:54 < tanderson11> Okay. What sort of request handling does express have to augment nodejs?
18:55 <@Nexxy> tanderson11, http://expressjs.com/guide.html
18:55 <@Nexxy> it's all there :)
18:58 < tanderson11> So I had already read the guide, and I thought it seemed pretty useless/very specific, but on a second pass, I think I understand a little more. Do you have your app for express listening at the same time your node server is listening? And then just pass information to the express app?
19:03 <@Nexxy> tanderson11, the node http server uses your express app as the handler
19:03 <@Nexxy> so, yes, kind of
19:07 < tanderson11> Okay. So express has functionality as a router and . . . what else? I guess my trouble is I don't know enough about node to understand how I benefit from using express. Would you recommend I jump into a setup using node + express or just stick with node until I learn more?
19:08 <@Nexxy> tanderson11, I think using express is a good way to get started
19:10 < tanderson11> Okay. Thanks for the help. I may be back with more questions soon
19:13 <@Nexxy> tanderson11, you can stay too!
19:15 < tanderson11> I'll just hang around idling until a question comes up
19:16 < allyraza> tanderson11, LOL.. cool is it your first encounter with node
19:16 < ekristen> hello
19:16 < ekristen> anyone familiar with testify?
19:17 < ekristen> restify* 
19:17 < allyraza> hi
19:17 < ekristen> I am trying to figure out how to do sessions
19:17 < tanderson11> Yeah. I decided I wanted to get more into programming and web app development seemed like the place to start. I decided on node 2 days ago
19:17 < allyraza> tanderson11, good choice
19:17 < Industrial> ekristen: REST is stateless. I'm not sure you should be doing sessions.
19:17 < allyraza> welcome 
19:17 < tanderson11> Thanks
19:17 < ekristen> Industrial: for authentication
19:17 < tanderson11> Node seemed good because it has such a vibrant and growing community right now
19:17 < ekristen> I know REST is stateless, but I need to authenticate my API somehow
19:18 < Industrial> ekristen: theres books on that topic. It can be done without sessions.
19:18 <@konobi> ekristen: have a look at node-http-signature
19:18 < ekristen> ok
19:18 < allyraza> tanderson11, yea and the community is very friendly
19:18 < Industrial> ekristen: it comes down to Oauth or Amazon style I think
19:18 < tanderson11> I've noticed :)
19:18 < allyraza> tanderson11, have been using node for almost 2 years now
19:18 < ekristen> I was thinking oauth
19:19 < Industrial> or that xD
19:19 < tanderson11> Cool. How do you think node compares to other setups python + django/ruby + rails or whatever
19:19 < ekristen> I guess HTTP signature would work too
19:20 < allyraza> tanderson11, I think they are all tools best suited for specific jobs I use python a lot
19:20 < allyraza> rails I use do a lot of ruby/rails but no more
19:20 < ekristen> tanderson11: if you need high IO and simplicity, node is definitely the way to go
19:21 < ekristen> oh and async ;-)
19:21 < Industrial> konobi: "you will need to provide your own key management in addition to this library". Does that mean a web browser needs to have downloaded a .pem file from the server?
19:21 < Industrial> the key*
19:21 < ekristen> Industrial: you'd have to have provided a client pem to whoever is trying to use the API
19:22 < tanderson11> Cool. I think node is well suited to my goals
19:22 <@konobi> Industrial: sessions are stateless, since you're sending the session info per request
19:22 < allyraza> tanderson11, node is pretty code i do almost every thing 
19:22 < Industrial> I still don't understand how to connect a login box on a website to a NodeJS webserver through REST (whichever framework or none).
19:22 < ekristen> hrm, http-signature or oauth
19:23 < Industrial> API is fine, but that's not my use case for a public website with logins and authorization etc
19:23 < allyraza> another advantage javascript on both side client, server 
19:23 < tanderson11> Yeahj
19:23 < allyraza> I love javascript
19:23 <@Nexxy> javascript loves you
19:24 < allyraza> Nexxy, thanks buddy
19:24 <@Nexxy> any time!
19:24 < OTBS4Life> JavaScript loves all who use the one TRUE brace style.  :-)
19:24 < tanderson11> Does it make sense to use nginx to handle static file requests?
19:24 < Industrial> tanderson11: check out filed
19:25 < allyraza> tanderson11, you could use nginx to serv statics
19:25 <@Nexxy> tanderson11, express can serve static assets
19:26 < allyraza> I use node to serv my statics thu
19:26 < tanderson11> Okay. I will look at how express does it, and then make a decision. Also, coffeescript, or no?
19:26 <@konobi> just no
19:26 < allyraza> tanderson11, that you have decide I like pure js
19:27 < allyraza> to*
19:27 < TomyLobo> i dont. first thing i installed after nodejs was coffeescript :)
19:27 < allyraza> tanderson11, extra overhead
19:27 <@Nexxy> I would strongly recommend against coffeescript
19:27 < tanderson11> All right. I will mess around with both. Right now I'm thinking I'll stick with pure js until I've done more
19:27 < TomyLobo> i like braces, but i also like the way cs hides the type system complexities
19:28 <@Nexxy> particularly if you are new to the entire ecosystem
19:28 < tanderson11> Nexxy, yeah, that's what I'm thinking
19:28 <@Nexxy> type system?
19:28 < tanderson11> Anyway, I'll be away for a couple of minutes, thanks guys
19:28 < allyraza> YW
19:29 < TomyLobo> Nexxy http://www.youtube.com/watch?v=L8Mk6F_-YgE
19:29 < ekristen> konobi: any draw backs to http-signature that you know of?
19:29 < TomyLobo> one second, lemme forward to js
19:29 <@Nexxy> lol
19:30 < TomyLobo> http://www.youtube.com/watch?v=L8Mk6F_-YgE#t=81
19:30 <@konobi> ekristen: it's what joyent use for their api
19:31 < ekristen> I'm reading this -- looks well thought out -- https://github.com/joyent/node-http-signature/blob/master/http_signing.md
19:32 <@Nexxy> TomyLobo, hopefully you understand most of that
19:33 < TomyLobo> i decided for myself that i dont want to :)
19:33 <@Nexxy> it's humor lol
19:34 < TomyLobo> oh i thought you meant the ways these quirks would make sense to the javascript devs back then
19:34 <@Nexxy> well they do
19:34 <@Nexxy> they're just being presented in a silly way
19:36 < TomyLobo> Nexxy []+[] is empty string. does that make sense to you? :)
19:36 <@Nexxy> does adding arrays make sense to you?
19:36 <@Nexxy> lol
19:36 < TomyLobo> no, hence type error, undefined or whatever
19:37 < Industrial> var undefined = void 0;
19:37 <@Nexxy> except you're implicitly asking for .toString()
19:37 <@konobi> makes sense
19:37 < phpnode> hey anyone know why JSON.stringify(myBigDataStructure, null, 2) is thousands of times slower than JSON.stringify(myBigDataStructure) ?
19:37 < TomyLobo> yeah
19:38 < TomyLobo> i get that. but it doesnt make sense to me as a design choice
19:38 < TomyLobo> on the same justification you could say 1+1="11"
19:38 < Industrial> (or is it an implementation defecit :p)
19:39 < mscdex> Nexxy, \o/
19:39 <@Nexxy> TomyLobo, that is just a side effect of the fact that + is also the string concat operator
19:40 < TomyLobo> i compare this to a shoddy C++ library where all the conversions are implemented as operator T instead of ctor(U)
19:55 < joe-node0> has anybody installed the dev branch 9.5?
19:56 < joe-node0> The changelog seems to suggest minor bug fixes and some incremental efficiency improvements
19:56 < spion> Has anyone tested what the performance characteristics of process.hrtime() are, say compared to Date.now()
20:04 < spion> ok I just tested it, process.hrtime() seems to be around 6 times slower than Date.now()
20:04 <@Nexxy> > high resolution
20:04 < inolen> doesn't Date.now() cache?
20:05 < spion> on my system at least, Date.now updates every 1-2ms
20:06 < spion> yeah, hrtime is much higher resolution but i don't think i need that much in my particular case :)
20:06 < spion> milliseconds should be fine
20:10 < ^robertj> i need to get wtih the game and actually start using promises, which libraries are worth looking at?
20:12 < medikoo> ^robertj: Try https://github.com/medikoo/deferred and let me know how it works for you
20:12 < spion> ^robertj, q is probably the most popular. http://npmsearch.docucalc.com/#/find?q=promises
20:14 < ^robertj> what's the difference in philosophy between q & deferred? i've seen both mentioned plenty
20:17 < andrewaclt> Are there any node modules that are particular instructive to read?
20:17 < andrewaclt> *particularly
20:17 < medikoo> ^robertj: Core promises philosophy is maintained about same, but there are differences in the API, with deferred promises are more transparent in the code (see first example in the read me) also it's way faster
20:17 < superjoe> andrewaclt, what kind of thing are you trying to do?
20:17 < spion> ^robertj, Q is "complete" - it has lots of bells and whistles, including handling jQuery/dojo promises, Q.ncall to call existing node functions
20:18 < andrewaclt> superjoe, I'm doing socket.io and mongodb stuff. I'm particular interested in patterns for handling db interaction
20:18 < ^robertj> spion, what do you mean by handling? you mean it is a superset of the jquery promises api?
20:18 < spion> (so it also might include stuff you might not need)
20:18 < ^robertj> or that you can take a promise object from jquery and use it in your Q promises
20:18 < superjoe> got nothing for you, sorry
20:18 < andrewaclt> superjoe, but I'm pretty new to node so any recommendations would be useful
20:18 < spion> it can "convert" jQuery style promises (which are not the same like the commonjs specs)
20:19 < ^robertj> did commonjs promises ever become a thing?
20:20 < medikoo> ^robertjs: jQuery promises are not really promises, see: https://gist.github.com/3889970
20:20 < spion> yeah I meant to quote the promises part, not the convert part
20:20 < spion> :D
20:20 < medikoo> ^robertj: if you want real promises experience, it's better not to look at jQuery implementation at all
20:20 < superjoe> andrewaclt, I don't mean to toot my own horn, but I have published quite a few modules and I do strive to write clean code. there are lots of examples of npm modules here: https://github.com/superjoe30/
20:21 < andrewaclt> superjoe, thanks, will certainly take a look
20:21 < ^robertj> basically i just want some reasonable way to wrangle async forEaches so that i can wait for the mall to return before outputting my web page :p
20:22 <@Nexxy> ^robertj, https://github.com/caolan/async
20:22 < superjoe> nice Nexxy I was about to type the exact same thing
20:23 < medikoo> ^robertjs write some gist, explaining what you expect, then we can show you examples of results when using different solutions
20:24 < ^robertj> medikoo, i'm terminally uncool, can I use pastebin :(
20:24 < spion> promises will only be *really* useful and better than the async control flow library once harmony generators are in V8
20:25 < medikoo> ^robertj: sure
20:25 < spion> always seemed to me that (for now) they have a bit of an impedance mismatch with node
20:27 < spion> i wonder, maybe a fibrous-style API (https://github.com/goodeggs/fibrous) for promises would help. it would attach .promise to Object.prototype and Function.prototype to automatically "promisify" functions, so you could use db.promise.query("blah").then(
20:27 <@Nexxy> why?
20:27 <@Nexxy> that syntax often ends up moar bloated than just using callbacks
20:28 < spion> if you want to use promises, but you find it annoying to wrap every node function
20:28 < allyraza> bye guys
20:29 < superjoe> I still don't understand why people like promises
20:29 < spion> its not always more bloated - sometimes you want to launch a couple of operations then wait them in pairs or triplets - in those cases it looks very natural.
20:29 < superjoe> ah
20:30 < superjoe> spion, I'm going to get so much shit for saying this, but I like to use https://github.com/visionmedia/batch for that.
20:33 < inolen> superjoe: Anytime you need to queue up several callbacks you end up writing the same thing.
20:33 < spion> well in my particular example, I have 2 charts, 3 data sources - one is needed for both charts. so I launch all 3 operations and have 2 waits on the pairs of promises.
20:33 < superjoe> inolen, could you elaborate  with a gist?
20:34 < superjoe> spion, I see how the promises API might look the cleanest in this case.
20:34 < spion> yep.
20:34 < inolen> superjoe: Not exactly. Imagine writing a loading screen and waiting for various files to all load and be processed.
20:34 < spion> its kind of a rare case though, thats true.
20:35 < superjoe> inolen, I'm not even imagining; I'm remembering
20:35 < spion> but async has that makefile-dependencies-like-thing which can do that too :)
20:35 < inolen> You'll end up with array(s) of callbacks and code that's if ++total === numloaded all over
20:35 < spion> async.auto
20:35 < inolen> err ++loaded === total, you get the idea ;)
20:36 < inolen> vs when(cb1, cb2, cb3,cb4).then(loaded)
20:36 < spion> superjoe, but once you put harmony generators on the table, it all changes: http://taskjs.org/
20:36 < ^robertj> medice, http://pastebin.com/J5tBYG40 <- something sorta like that I think?
20:36 < ^robertj> i've never used a promise so I hope I didn't completely butcher the idea
20:37 <@Nexxy> inolen, async.parallel([step1, step2, step3], done)
20:37 < inolen> and then when it gets more complicated and you're needing to say, wait on x file which then loads many files itself the straight-forward method gets really tricky
20:37 < inolen> Nexxy: similar concept still :)
20:38 < superjoe> spion, that's a fun api
20:38 <@Nexxy> same thing w/o the promise magic
20:38 < inolen> I'd say its as much magic as promises lol
20:38 <@Nexxy> arrays are so magical ;P
20:38 < superjoe> spion, that api doesn't require promises though right
20:38 < spion> i think it does
20:39 < superjoe> they could easily have done the same thing with callback style
20:39 < spion> you need to have something yield-able
20:39 < spion> so, a value
20:39 < inolen> nexxy: again, imagine it gets more complicated and step1 has multiple substeps you need to wait on
20:39 < spion> not a parameter to a function
20:39 < inolen> with promises, you step1 can return an aggregate of it's child steps
20:39 < inolen> and forget about it
20:39 <@Nexxy> inolen, as can standard callbacks
20:40 < inolen> (not saying you can't solve it that way as well)
20:41 < medikoo> ^robertj: that's how it may look with deferred http://pastebin.com/8DUXkDpp
20:43 <@Nexxy> I feel like promises/awaits just help delude the developer into believing they're writing linear code
20:43 < superjoe> spion, I see. this is a fun idea
20:43 < inolen> Nexxy: Well, sometimes it helps have looser coupling between components I feel.
20:43 <@Nexxy> but that's a false dichotomy
20:43 < medikoo> Nexxy: it's rather that promises allow to write asynchronous code declaratively
20:43 <@Nexxy> not using a promise library does not necessitate tighter coupling
20:44 <@Nexxy> which assists them in avoiding a complete understanding of the problem they're trying to solve
20:45 < ^robertj> medikoo, ok, fairly clear, the zen of .end still betrays me but i shall paste it on the end anyway
20:47 < medikoo> ^robertjs .end here is to make sure that unhanded exceptions are thrown, but conceptually it's better to put 'end' earlier: http://pastebin.com/UmMwPXsc
20:47 < spion> end() is what happens when you conflate error handling into promises :)
20:48 < spion> with*
20:48 <@Nexxy> antipatterns abound!
20:48 < medikoo> ^robertjs: I've just used 'match' to spread arguments, but in my code I would use 'end' as it's in second version
20:50 < spion> on the plus side you can handle errors only once - on the minus side, you must somehow tell the chain that its going to end so if an error happened it should report it somehow, not wait for some possible additional promise that might handle the error.
20:51 < medikoo> spion: there's always a point, when you just want to handle final value, and do not want to add any extra async call, then you just use end(function (value) { // handle final value })
20:52 < spion> is that in the promises spec?
20:52 < medice> ^robertj: i believe you hilighted the wrong guy ther
20:52 < ^robertj> yeah i did :( sorry
20:52 < medice> nah, no problem, it's just funny
20:53 < medikoo> spion: there's not such thing as promise spec, there is PromiseA+ kind of committee.. and they actually don't want to specify end/done behavior, although in my opinion it's must have for any promise implementation
20:54 < spion> i see
20:54 < stdim> Guys, I'm having trouble running a node.js server on my network. What do I pass to #listen() so I can have it listen on 192.168.1.7:3000, for example?
20:54 < geNAZt> .listen( 3000, "192.168.1.7" );
20:55 < geNAZt> if the machine has the ip adress 192.168.1.7
20:55 < stdim> Ah!
20:56 < Spencer> Why is it that node.js is so popular amongst developers but rarely (if ever) do you see production applications using it?
20:56 < spion> with harmony proxies it will be quite easy to auto-convert callback-style functions to promise style and use both... I predict (lol) that ultimately (after ES6) a lot of node code will switch to a promises + task.js style
20:57 < medikoo> spion: https://github.com/promises-aplus/promises-spec/issues/43#issuecomment-10513011 (done is same thing as end in deferred, and deferred from v0.7 will have end renamed to done, to match other implementations that provides this)
20:57 < geNAZt> Spencer: most hosting applications dont support nodejs
20:57 < spion> medikoo, yeah I somehow thought .done() in Q was "official"
20:57 < geNAZt> and you must go deeper in the system with nodejs
20:58 < geNAZt> for binding a tcp socket etc.
20:58 < medikoo> spion: no it wasn't, Q added it actually very late v0.8.4 or similar
20:58 < geNAZt> php must not do that
20:58 < spion> medikoo, my bad :)
20:58 < geNAZt> you cant restrict functions
20:58 < medikoo> spion: :)
20:59 < mmalecki> spion: core will always be callbacks and EEs, hopefully...
21:02 < medikoo> I'm also not so sure of introducing promises at low-level, I think it's fine with callbacks. However izs once mentioned that it could be done one day, and without affecting the performance, it might be really interesting, for sure powerful
21:02 < spion> mmalecki, yeah i didn't mean node core, mostly business logic-y end-user apps
21:03 < mmalecki> spion: oh, yeah, that might happen one day :)
21:03 < jtomasrl> is it a good idea to open/close mongo conections each time i need to peform a db action?
21:04 < mmalecki> jtomasrl: no
21:04 < jtomasrl> mmalecki: so what could be a good way of doing it
21:05 < mmalecki> jtomasrl: keeping the connection open all the time
21:05 < geNAZt> hold a pool of connections
21:05 < geNAZt> and pick the one that is free
21:05 < jtomasrl> does mongo drivers provide this things?
21:05 < geNAZt> the native mongo driver does that by default
21:06 < eindoofus> hi, I'm hoping someone has some extra time on their hands. Can anyone help me fill-in the code for a function that's collapsed in the Node.js PluralSight.com video?: https://gist.github.com/4470168
21:07 < geNAZt> use a modulo
21:08 < jtomasrl> that was for me?
21:08 < geNAZt> no for eindoofus
21:08 < eindoofus> ?
21:09 < geNAZt> do double only the even numbers u can use a modulo to get the ven numbers
21:09 < geNAZt> and then double it
21:09 < eindoofus> what about returning an error?
21:09 < jtomasrl> where do i open the conection and how can i have then availible along my app?
21:09 < geNAZt> whyt and error ?
21:09 < geNAZt> what*
21:09 < geNAZt> the only fail you can have is that the number is odd
21:10 < eindoofus> The function is supposed to return an error for odd numbers
21:10 < eindoofus> How do I make the function return an error? "return error;" doesn't work
21:10 < eindoofus> sorry, I'm a newb to this
21:11 < geNAZt> http://hastebin.com/cusipisadu.js
21:11 < geNAZt> return doesnt work cause its javascript :D
21:12 < eindoofus> lol. thanks geNAZt
21:12 < geNAZt> this should work but why is there a time parameter oO ?
21:13 < eindoofus> It's supposed to take a random amount of time < 1s
21:13 < eindoofus> Is there a parameter for that?
21:13 < geNAZt> multiply a number by 2 take < 1s ?
21:13 < geNAZt> wow :D
21:14 < eindoofus> how could it be done if they meant the call also takes an additional amount of time randomly < 1s?
21:14 < ^robertj> medikoo, thanks so much for your help. I was like...wait...for this to work I'd have to rewrite all my...ahh promisify()
21:15 < medikoo> ^robertj: yeah promisify() :)
21:15 < geNAZt> eindoofus: with a timeout
21:16 < eindoofus> geNAZt: is that something that would wrap the if and else?
21:18 < geNAZt> http://hastebin.com/lawuropabi.js
21:18 < geNAZt> this first Randoms a number between 20 and maxTime
21:19 < geNAZt> and then sets a timeout for that time, if that expires the calculation is done and the callbacks are fired
21:20 < eindoofus> Thanks geNAZt! That
21:20 < eindoofus> That's exactly what I needed to see :)
21:20 < geNAZt> np np
21:20 < geNAZt> oh a little bug :D http://hastebin.com/losipeqibi.js
21:21 < eindoofus> lol
21:21 < eindoofus> thanks :)
21:29 < geNAZt> lol my eclipse has ended up by 2,4 GB of RAM 
21:29 < geNAZt> oO
21:30 < hipsterslapfight> does it think it's chrome or something :v
21:30 < geNAZt> LOOOOOOL
21:31 < jtomasrl> where can i save a var to be avaible through all the code?
21:31 < geNAZt> no i have opened my eclipse
21:31 < geNAZt> the default cap ofc 512M is terrible
21:32 < geNAZt> jtomasrl: in the global object
21:32 < jtomasrl> process?
21:33 < geNAZt> global
21:33 < jtomasrl> oh
21:33 < jtomasrl> ty
21:40 < MI6> joyent/libuv: Ben Noordhuis master * f24335d : test: fix #if defined checks  Same as edd1007 but this time for the tests (+13 more commits) - http://git.io/LQjWsA
22:02 < MI6> joyent/node: Bradley Meck master * 70ad9bb : child_process: make fork() execPath configurable  Allows for arbitrary pa - http://git.io/N-96xw
22:13 < superjoe> has anyone else noticed that if you are in the debug repl and try to look at the value of a buffer variable, it hangs the process?
22:16 < superjoe> hmm I can't reproduce it on a simple test case. I'll look into it later
22:22 < timeturner> I hate client side work -_-
22:22 < timeturner> user interface styling
22:23 < AviMarcus> is anyone using juxt for async, to wait for several callbacks at once? I just saw it in my rss feed - https://github.com/azer/juxt.js it's just one async pattern, but I think I use t hat one often.
22:23 < Adam_> hi
22:23 < Adam_> guys what did you made so far with node.js?
22:24 < timeturner> web apps
22:24 < Adam_> timeturner, could you give me some links? :)
22:25 < Adam_> I mean something you personally made :)
22:25 < AviMarcus> 3 apps, none public. 1) CLI stock data - grabs yahoo stock data and returns annual yields for a given ticker and start/end time 2) fetch then import a 3gb CSV file into redis + updates 3) a REST API for my client side, built on restify
22:26 < etcetera> why is that socket.io didn't implement standard web sockets?
22:26 < etcetera> instead created a supserset?
22:26 < AviMarcus> I think it uses them as part of it
22:26 < AviMarcus> not everything support web sockets, sometimes they fail, etc. iirc.
22:26 < ^robertj> medikoo, is there a convenience function to have promisifiedFoo(obj,key) return key val pairs? consisting of the arguments fed to the promisified function and the return values?
22:27 < AviMarcus> etcetera, it's in the faq: http://socket.io/#faq
22:29 < medikoo> ^robertj: can you post some example in paste bin? I have problems understanding what you want to achieve
22:29 < etcetera> AviMarcus: fair enough...so...why isn't socket.io a standard?
22:29 < etcetera> or even a proposed standard?
22:30 < etcetera> It just seems like a highly coupled way of interacting with node.
22:30 < torvalamo> what would be the correct http status code if someone requested a virtual host that didn't exist (e.g. typo or plain incorrect host header)? currently going for 404, but my impression is that this is for resources, not servers... and i "can't" use 501, since a connection has actually been established, so it would be misinformation..
22:30 < torvalamo> sorry, 503, not 501
22:31 < AviMarcus> etcetera, I've not actually used it yet...
22:32 < ^robertj> medikoo, so if I'm using promisified.map to go from ['a','b','c'] to [1,2,3] Id really like to ultimately end up with 'a':1,'b':2,'c':2 or ('a',1),('b',2),('c':3) instead
22:33 < AviMarcus> torvalamo, 5xx is server error... 404 sounds like the norm - "not here"
22:33 < etcetera> AviMarcus: interesting. seems really only viable for cases where you're: 1) using both node 2) the client is almost always 3) one of the major clients is going to be a browser 
22:33 < AviMarcus> you want a client error, "you did something wrong"
22:33 < etcetera> wait...what did I just say?
22:33 < etcetera> eek.
22:34 < medikoo> ^robertj: I see, I think you should just form the result that you want in function that you pass to map
22:34 < AviMarcus> etcetera, socket.io I think is mostly geared for browsers
22:34 < medikoo> so function that makes a -> 1 should do a -> a: 1 instead
22:35 < AviMarcus> otherwise there's other things, where you are usually in more control of the topology. same process, use IPC. Or zeromq or other messaging..
22:35 < AviMarcus> 'night
22:37 < medikoo> ^robertj: I have to go now, if you have any question about deferred just post on mailing list (linked in readme). 
22:37 < ^robertj> medikoo thanks!
22:38 < medikoo> ^robertj: you're welcome :)
22:57 < Guest57009> i'm trying run "npm install serialport" and get the following error.. http://ge.tt/4zEYWqU/v/0?c can anyone help?
22:58 < zoned> i'm trying run "npm install serialport" and get the following error.. http://ge.tt/4zEYWqU/v/0?c can anyone help?
23:05 < andu> zoned, do you have compiler installed?
23:06 < andu> zoned, https://github.com/TooTallNate/node-gyp/issues/44
23:07 < zoned> andu, i just did "npm install compiler" and tried again, same result.
23:25 < zoned> anyone? :/
23:34 < Aria> Evening, zoned
23:34 < zoned> hi Aria 
23:34 < samholmes> I seem to be getting confused, with all the different way to get the IP address of a UA, on what's the correct way to get an IP address
23:35 < zoned> i'm trying run "npm install serialport" and get the following error.. http://ge.tt/4zEYWqU/v/0?c can anyone help?
23:36 < Aria> samholmes: Depends on the setup! Are there proxies in the path? Do you trust them? 
23:36 < Aria> zoned: Wow, that's painful -- having it be an image means I can't copy and paste to do a quick search for relevant stuff. Can I suggest a gist next time?
23:36 < samholmes> Aria: I have bouncy in front of the requests.
23:37 < Aria> zoned: samholmes: A missing header file -- do you have the library that provides objbase.h?
23:37 < Aria> er, sorry, samholmes. Mishit you there.
23:37 < zoned> Aria, http://pastebin.com/is1hgX1r
23:38 < Aria> samholmes: So yeah, bouncy -- that sets a header for the 'real' IP address of the client -- use that, if that's the IP you want
23:38 < zoned> Aria, i'm not sure where it wants objbase.h to be?
23:39 < samholmes> Aria: which is x-forwarded-fo?
23:39 < samholmes> for*
23:39 < Aria> zoned: Somewhere in the include search path.
23:39 < Aria> samholmes: YEah, that sounds right.
23:39 < zoned> Aria, inside of node_modules/serialport? i'm trying to install serialport, so that doesn't make sense?
23:40 < Aria> zoned: Maybe. I don't know how Windows compilers search for headers. PRobably not, since it looks like a system sort of dependency, not project-local.
23:41 < samholmes> Aria: Is it common practice to use this header for forwarding? Why I ask: What if x-forwarded-for was set by something else besides my proxy and then bouncy sets the wrong IP to x-forwarded-for.
23:41 < zoned> Aria, any ideas? I'm pretty lost here
23:41 < Aria> And this is the problem with trusting data supplied from outside, samholmes.
23:41 < Aria> zoned: Do you have the file? Do you know what library provides it?
23:42 < superjoe> how soon are we going to get the ability to use objects as keys in v8
23:42 < superjoe> ?
23:42 < Aria> superjoe: Keys of what?
23:42 < Aria> samholmes: I haven't read Bouncy in a bit, but you can tweak it to unset that header if it exists, if it doesn't already.
23:42 < superjoe> var blah = {}; var foo = {}; blah[foo] = 3;
23:42 < zoned> Aria, i don't know where to look for it, or where to put it... I can search the whole drive, I guess. 
23:42 < samholmes> Aria: But companies like google have to trust this data in the end. How else could they make money off of page clicks in the advertising network.
23:43 < superjoe> currently this code calls toString on foo and uses the resulting string as the key for blah
23:43 < Aria> samholmes: Google doesn't look at proxy headers. They look at where the connection came from.
23:43 < Aria> superjoe: Never, then.
23:43 < Aria> superjoe: Harmony maps are what you want, and they don't work like that.
23:43 < superjoe> or are we going to get a new data structure that lets us do this
23:44 < samholmes> Aria: came from?
23:44 < Aria> samholmes: Yeah, the peer address of the tcp connection.
23:44 < Aria> superjoe: Yeah, harmony maps. They're in v8 today.
23:45 < superjoe> nice!
23:45 < samholmes> Aria: What's a peer address?
23:45 < Aria> samholmes: The IP of the other end of the connection.
23:46 < samholmes> Aria: That's what I'm wanting to do.
23:46 < samholmes> Aria: I thought that what was what we were talking about?
23:46 < Aria> samholmes: So do that. But all you'll get is the IP of the host running bouncy.
23:46 < Aria> samholmes: The question is /which/ IP address, of which connection -- the one from the user agent to bouncy, or the one from bouncy to your app server?
23:47 < samholmes> Aria: I want the one from the UA to bouncy, obviously.
23:47 < Aria> samholmes: Google doesn't /use/ bouncy (or if they do something similar, that's where they record IP addresses) (Also, Google mostly identifies users by cookie, not IP)
23:47 < samholmes> There has to be a way to make bouncy unobtrusive.
23:47 < Aria> samholmes: Bingo. So use the header bouncy sets. And if you can't tell it apart, find a way to make sure you can.
23:47 < Aria> samholmes: "unobtrusive" being what? Passing the packets at the routing layer, rather than the application layer?
23:48 < Aria> bouncy is an application-layer proxy.
23:49 < samholmes> unobtrusive meaning it's as if it's not even there (at least to my application)
23:49 < superjoe> Aria, I'm having a hard time finding harmony docs - do you know where the docs live?
23:49 < Aria> superjoe: ecmascript.org, I think
23:50 < Aria> samholmes: No. Not if your application cares about lower-layer details like IP address.
23:51 < samholmes> Aria: I'll just rely on x-forwarded-for. However, are there other factors that might obfuscate the original IP address?
23:51 < Aria> samholmes: Bouncy doesn't work at the routing layer, so it can't do that (And having it do so would impose some new restrictions, like having the thing be in the routing path)
23:51 < Aria> samholmes: Depends on what you mean by 'original'?
23:51 < samholmes> By "original" I mean the connection outside my system that is connecting to my system.
23:51 < mscdex> emscripten continues to amaze
23:51 < Aria> samholmes: I mean, NAT is a thing -- but the "original" ip address is probably 192.168.something.something.
23:52 < Aria> samholmes: No, then, that's pretty straightforward -- if you want the next hop outside your control, that's easy to get.
23:52 < samholmes> Aria: I don't mean _that_ original.
23:52 < Aria> samholmes: If you want to peek past that(past ISP proxies and such), it's hard.
23:52 < samholmes> Aria: What'd be a good book to read on all this?
23:53 < Aria> samholmes: Internet RFCs, or anything about OSI protocol layers (with the understanding that the internet is not OSI-pure), or sit down with wireshark and look at network traffic and try to understand how it fits together
23:55 < Aria> samholmes: (I don't really read tech books, being a more hands-on, tools type)
23:55 < Aria> samholmes: For everything but SSL, my first tool is wireshark. Might as well just look at what's going over the wire.
23:55 < samholmes> Aria: Surely you get to a point were observation only gets you so far and you have to ask someone/where?
23:56 < Aria> samholmes: Nope.
23:56 < Aria> samholmes: That + RFCs is pretty complete -- see what is supposed to happen (RFCs) + what is actually done (look at the wire)
23:57 < samholmes> Where do you find teh RFCs?
--- Log closed Mon Jan 07 00:00:18 2013
