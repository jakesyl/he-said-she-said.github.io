--- Log opened Wed Nov 21 00:00:00 2012
--- Day changed Wed Nov 21 2012
00:00 < Hotroot> djazz: What the shit is that?
00:00 < Hotroot> That red thing moved
00:00 < djazz> Hotroot: my chair?
00:01 < Hotroot> It's on the red box
00:01 < djazz> :D
00:01 < Hotroot> I just kicked Wall-E's ass
00:03 < chapel> this is awesome djazz
00:03 < chapel> its super responsive
00:03 < Hotroot> I think it's much cooler than he realizes
00:03 < jaket> anyone using socket.io and websockets on a large scale production environment here?
00:03 < dshaw_> mixlr.com/nodeup
00:03 < Hotroot> I wasn't kidding, I would pay money to do this 
00:04 < dshaw_> NodeUp starting now. #nodeup
00:04 < chapel> Hotroot: def, this is awesome
00:04 < chapel> dshaw_: talk about djazz's thing
00:04 < chapel> got you wall-e
00:04 < Hotroot> Nice
00:04 < djazz> you!!!
00:04 < djazz> :D
00:04 < Hotroot> Us 2, Wall-E 1
00:04 < Hotroot> Err, 0
00:05 < Hotroot> So djazz, you set up a large room with little doggie doors. 
00:06 < Hotroot> Charge for the parts, and a $5 assembly fee
00:06 < djazz> lol
00:06 < djazz> and then what? deathmatch?
00:06 < Hotroot> You buy credits for $1 each
00:06 < Hotroot> 1 credit gets you 30 min
00:06 < Hotroot> When you're done, you go back into your little doggie door, and your bot is safe until you pay to enter again
00:07 < s5fs> man, finally a use for this nxt kit i have laying around
00:07 < Hotroot> No rule enforcement, just deathmatch. You can pay another credit to get your guy un-flipped over
00:07 < djazz> s5fs: :D
00:07 < djazz> aha
00:07 < djazz> robot wars :D
00:07 < djazz> 3... 2.... 1... ACTIVATE!
00:07 < Hotroot> Exactly. Just have a list of allowed parts.
00:08 < djazz> they can build the robot in LDD
00:08 < djazz> (Lego CAD program)
00:08 < chapel> Hotroot: I always wanted a remote destruction derby thing
00:08 < chapel> somewhat like this
00:08 < Hotroot> djazz: They can pay another credit to have you swap out parts
00:08 < chapel> where you control it remotely
00:09 < Hotroot> Actually, maybe instead of $1 for a flip, you get a free flip or two when you play
00:09 < Hotroot> Then it starts costing when you run out of those
00:09 < chapel> you pay for your time, if you get flipped you start over
00:09 < djazz> Hotroot: would be cool if I could attach a mic too
00:09 < Hotroot> chapel: Yeah, I've always wanted to do a robot wars thing
00:10 < Hotroot> djazz: Why the mic?
00:10 < djazz> Hotroot: idk, fun
00:10 < Hotroot> chapel: That's kind of harsh though. Would suck paying for 30 min and getting flipped in 10 seconds
00:10 < djazz> Hotroot: I made this some time ago, with a netbook instead of raspberry: https://plus.google.com/113878221242502678865/posts/i84hD68Z4bL
00:11 < chapel> Hotroot: you wouldn't have to pay again
00:11 < chapel> just would have to start at the edge or something
00:11 < chapel> idk, or not
00:11 < chapel> don't think it really matters
00:11 < MI6> joyent/node: Bert Belder master * 26a50cb : windows: fix normalization of UNC paths (+1 more commits) - http://git.io/FBcaHw
00:11 < chapel> would be cool to have it hooked up to rc cars
00:11 < chapel> and run courses with it
00:12 < djazz> chapel, Hotroot: there are lego sumo robot competitions
00:12 < Hotroot> djazz: Nice, probably not very cost or form effective for battle though =P
00:12 < djazz> where you program them to push the other out
00:12 < djazz> :P
00:12 < djazz> no, but skype!
00:12 < djazz> you can talk through!
00:12 < Hotroot> Haha
00:12 < djazz> XD
00:12 < djazz> and tilt the camera up/down
00:12 < Hotroot> chapel: Yeah, but then he has to spend all day flipping little cars =P
00:12 < chapel> heh
00:13 < chapel> just make them so they can auto flip
00:13 < Hotroot> djazz: Yeah, you would need some definite modifications for people to pay. Some camera angle jazz maybe. Just wider range of vision in general
00:14 < djazz> xD
00:14 < Hotroot> chapel: Easier said than done unless you have like compressed C02 tanks
00:14 < aettinge1> k/nick
00:14 < djazz> a camera that can tilt/rotate
00:14 < syskk> how can I inherit the non-prototype properties of another object? I'd like to inherit every method/property of the http module 
00:15 < syskk> obj.prototype = http; maybe?
00:15 < Hotroot> djazz: Seriously though, it's a pretty open market (can't find a single remote robot thing online) and the work would be fairly simple.
00:16 < Hotroot> djazz: Rentals would be nice too, to get people hooked
00:16 < djazz> Hotroot: what would the arena be?
00:16 < djazz> my single-room apartment?
00:16 < djazz> :)
00:16 < Hotroot> Just a room with some little modifications
00:17 < Hotroot> Some ramps
00:17 < Hotroot> A few barriers
00:17 < djazz> yeah, ramps... STAGEDIVE *crush*
00:17 < Hotroot> Well, to push people off and whatnot
00:17 < djazz> also
00:17 < Hotroot> Honestly I think I'd pay even if it were just me and one other in your apartment without any kind of weapon.
00:17 < djazz> it would be easier just to have overview camera
00:18 < djazz> then the robots are wireless
00:18 < Hotroot> Hmm
00:18 < Hotroot> Does that look as good as first person though?
00:19 < chapel> I think both
00:19 < chapel> an overview and first person
00:19 < djazz> yeah
00:21 < chapel> haha
00:24 < MI6> joyent/node: piscisaureus created branch +master - http://git.io/ACd9mw
00:24 < chapel> djazz: is it weird having people control that in your room?
00:24 < MI6> joyent/node: Scott Blomquist master * f657ce6 : windows: add tracing with performance counters  Patch by Henry Rawas and  (+1 more commits) - http://git.io/iQIs-w
00:25 < djazz> chapel: not really
00:25 < djazz> im used to it :P
00:25 < djazz> i've done this before, but with a netbook instead of raspberry
00:25 < chapel> ah yeah
00:26 < Hotroot> djazz: You could entice people also with the overview cam, just make it public
00:26 < djazz> Hotroot: spectators :D
00:27 < Hotroot> djazz: You could have tournaments at certain times too
00:28 < Hotroot> Where everyone puts credits in, and the winner takes all
00:28 < djazz> what prize?
00:28 < djazz> ah
00:28 < djazz> hmhmmh
00:28 < djazz> xD
00:28 < djazz> well
00:28 < djazz> would be cool if someone else makes stuff like this
00:29 < Hotroot> It would probably blow up if you put it on reddit
00:29 < djazz> xD
00:29 < Hotroot> Someone's gotta do it!
00:29 < djazz> ya, my site did last time...
00:29 < Hotroot> Might as well be you making the money
00:29 < djazz> notch retweeted my site
00:29 < Hotroot> Oh dang, haha
00:29 < djazz> boom DDoS
00:30 < djazz> 0.8 Mbit/s was what I had then
00:30 < djazz> up
00:30 < Hotroot> Lol
00:30 < djazz> Hotroot: he tweeted about this: http://djazz.mine.nu/lab/minecraft_items/
00:30 < Hotroot> Hosts aren't that pricey
00:30 < Hotroot> djazz: Holy crap, that was yours?
00:31 < djazz> yea
00:31 < Hotroot> I remember seeing that
00:31 < djazz> XD
00:31 < djazz> 50000 pageviews within 48 hours
00:31 < Hotroot> Nice
00:31 < djazz> Hotroot: seen/use this? https://chrome.google.com/webstore/detail/minecraft-skin-preview/abdidfhdgkoepjlnnnbmjahnlhbjgfgp
00:31 <@mbalho> djazz: i wanna make a pure node + html5 minecraft knockoff (not fully compatible) how hard would tha tbe
00:32 < djazz> djazz: I have tried, but I'm no good with 3D physics
00:32 < niggler> what's a minecraft knockoff?
00:32 < djazz> clone?
00:32 < djazz> mbalho: http://djazz.mine.nu/lab/glow/minecraft/
00:32 < djazz> it might not work on all GPUs
00:32 < Hotroot> djazz:  "40,000 users" Stop being better than me =P
00:33 < djazz> Hotroot: make something awesome then :D
00:33 < Hotroot> Working on it =P
00:33 <@mbalho> djazz: does threejs have other player perspective settings that dont feel awkward like that
00:34 < Hotroot> Shame about the apartment being so small. 
00:34 < djazz> I've made smth with HTML5+node.js that never seems to get any spread, even though I worked months on it and its awesome http://djazz.mine.nu:8010/
00:34 < djazz> no one can match it
00:34 < djazz> yet
00:35 < djazz> woah ryandahl joined?
00:35 < Hotroot> Haha
00:36 < djazz> ryahdahl*
00:36 <@mbalho> djazz: haha dude this is crazy
00:37 < djazz> sourcecode: https://github.com/daniel-j/WebJCS_old
00:37 < djazz> demo: http://www.youtube.com/watch?v=zwpZVtzSLPs
00:37 < djazz> other download (from JJ2's site): http://www.jazz2online.com/downloads/6796/webjcs/
00:39 < djazz> http://www.html5gamedevs.com/2012/01/13/jazz-jackrabbit-2s-level-editor-ported-html5/
00:39 < Hotroot> djazz: For just the price of one more robot, and some time spent coding, you could gauge interest and potentially make $4 an hour just letting us drive around your room
00:39 < djazz> thats the most publicity I've got for that thing
00:39 < djazz> xD
00:40 < Hotroot> Just have a timecard slot system. You pay for a 30min block
00:40 < djazz> making mony on lego, javascript and raspberrys? :D lol
00:41 < niggler> djazz: if you ported the game to html5 ...
00:41 < Hotroot> djazz: That's the dream =P
00:42 < djazz> niggler: I'M TRYINGGGG
00:42 < djazz> I've made several utilities, and level renderers
00:42 < Hotroot> I'm sure across all of reddit you could find enough people to make the $4 an hour fairly steady
00:42 < djazz> :P
00:43 < chapel> Hotroot: that isn't that much money though
00:43  * djazz cleans up his room, it's time for bed
00:43 < chapel> and he probably couldn't leave it unmanned
00:43 < Hotroot> chapel: $4 an hour to look at some robots every couple minutes while you code isn't bad
00:44 < chapel> sure, but it could end up being more of a time sink
00:44 < Hotroot> Would be mainly to gauge interest. See how many robots work well in a room of his size
00:44 < chapel> $4/h is not enough to live off of either
00:44 < chapel> at least where I live
00:44 < Hotroot> No, of course not. 
00:44 < niggler> its passive income
00:44 < Hotroot> Not too bad for a hobby project that runs in the background
00:45 < frank> is it ok for me to ask a question about mongoose?
00:45 < chapel> niggler: not really
00:45 < djazz> Hotroot, chapel: I'm 19 and go to college, I've got money :P
00:45 < Hotroot> If he had 4 robots he could potentially make minimum wage to look at some robots every 10 minutes while he codes
00:45 < chapel> djazz: well Im not saying don't do it, just $4/h isn't that much and its almost like $0/h
00:46 < chapel> but if you enjoy it, that matters more than money imfo
00:46 < chapel> imo
00:46 < Hotroot> djazz: I'm not saying you're poor, I was just saying for the price of one more robot you could test the idea out, and potentially make a small amount of background income
00:46 < niggler> if you used a separate space in your room
00:46 < Hotroot> Would be entertaining to watch in your room I'm sure
00:46 < niggler> 4/hr * 24 hr = 96/day
00:46 < Hotroot> He can't watch while he's asleep, etc. though
00:46 < niggler> that's something you literally could leave there, with minimal incremental cost
00:46 < niggler> why does he have to watch?
00:46 < Hotroot> What if they flip over?
00:47 < djazz> why do I have to sleep? z.O
00:47 < chapel> lol
00:47 < chapel> Hotroot: you don't need anything complicated to flip them over
00:47 < djazz> Hotroot: the robot with the crane, flipped over while i was doing laundry
00:47 < chapel> just an arm on a servo
00:47 < djazz> it was heavy
00:47 < chapel> not sure about the one with the crane, harder to handle
00:48 < Hotroot> If you're not interested though, I have the time and means to try it out. I just didn't want to be an asshole and take your idea
00:48 < chapel> but the small one would be easier to make flip over
00:48 < chapel> why not work together
00:48 < chapel> :)
00:48 < djazz> my idea? it was yours, Hotroot
00:48 < chapel> hardware separate, code together :)
00:48 < djazz> to make money
00:49 < djazz> I only do stuff, cuz fun
00:49 < frank> Does anyone know how to define an array as default in a schema in mongoose ?
00:49 < Hotroot> My home internet would be a problem though
00:49 < chapel> frank: an array with nothing defined in it?
00:49 < chapel> field: []
00:49 < Hotroot> It's like 80kbps up
00:49 < chapel> Hotroot: you would host everything on a real sever close to your home
00:50 < frank> chapel: I tried to do something like this: hourly: {type:[Number], default:[0,0,0,0,0,0,0]}
00:50 < chapel> and have it connect once to the server
00:50 < frank> chapel: but it won't work
00:50 < djazz> i have 10 Mbit/s fibre up and down
00:50 < Hotroot> Yeah, but the bots need to send data
00:50 < Hotroot> I can't host /them/ at a server farm
00:50 < djazz> latency is a problem
00:50 < chapel> hourly: [{type: Number, default: [0,0,0,0,0,0,0]}]
00:50 < djazz> the further away... quality of connection...
00:51 < chapel> Hotroot: sure, but not that much
00:51 < chapel> and only to the server
00:51 < chapel> the server handles serving to clients
00:51 < chapel> yeah
00:51 < frank> chapel: will mongoose know that the field is an array if I just specify Number ?
00:51 < chapel> latency is definitely the issue
00:51 < chapel> frank: notice the brackets around the {type...}
00:51 < chapel> [{type: Number ….}]
00:51 < chapel> that tells mongoose it is an array of type number
00:52 < frank> chapel: aaaaaaaah. Gotcha.
00:52 < frank> chapel: lightbulb moment. 
00:52 < chapel> djazz Hotroot you should host it in a local data center close
00:53 < Hotroot> If latency and speed aren't an issue, I live in a very large house with plenty of room to test it in.
00:53 < Hotroot> I couldn't go much farther than testing though, I'm not good with building robots, etc.
00:54 < djazz> chapel: LOL XD
00:54 < frank> Hotroot: I missed part of the convo, what are you building ?
00:54 < Hotroot> frank: Just an idea, but a little remote controlled robotics thing
00:55 < djazz> frank: http://www.facebook.com/photo.php?fbid=4472163595647&set=o.203296286406503&type=1
00:55 < frank> looks like a distance sensing robot with an arduino controller on top ?
00:55 < frank> with IR sensors in teh front ?
00:55 < djazz> ultrasonic sensors and webcam
00:56 < djazz> raspberry pi at top
00:56 < Hotroot> Mine wouldn't be nearly so advanced
00:56 < Hotroot> No need for RGB modes, sensors, etc.
00:56 < djazz> nah
00:56 < frank> ah the new rasp. 
00:56 < frank> do you like it ?
00:56 < djazz> thats for the crane, I put all sensors on
00:56 < djazz> yeah
00:56 < djazz> i just got my third raspberry today
00:56 < djazz> :D
00:56 < frank> nice.
00:57 < Slade-> does anyone know of a node module that'll take meta data (like wsdl) and turn it into a javascript object to call ?
00:57 < frank> All these new micro controllers are making building stuff really easy
00:57 < djazz> together with the powered usb hub as seen on the image
00:57 < djazz> frank: its not a micro controller
00:57 < frank> djazz: I know, I'm just saying.
00:57 < frank> djazz: haha
00:57 < djazz> its a normal computer with ARM cpu and a great GPU
00:57 < djazz> ah
00:57 < frank> djazz: have you coded your own ARM before ?
00:57 < Hotroot> I like actual microcontrollers too, very interested in the atmels
00:57 < djazz> i played Quake 3 on it earlier today
00:57 < djazz> at 50-60 fps
00:57 < djazz> :)
00:58 < frank> atmels are good, I've heard good things about them.
00:58 < Hotroot> I just think it's awesome that they're so cheap
00:58 < chapel> I wonder how well a raspberry pi would handle as a router
00:58 < Hotroot> I mean, writing code for something that costs less than a gumball
00:59 < frank> chapel: probably farely well under light load, its basically a computer
00:59 < chapel> well, why light load?
00:59 < frank> Hotroot: exactly. Things like pic's are great and cheap, but some programmers are expensive.
00:59 < Hotroot> It excels with it's GPU though, which a router has no use for
00:59 < djazz> chapel: the ethernet on the board is just an usb ethernet thingy
00:59 < chapel> ah
00:59 < djazz> its not a "real" thernet port
00:59 < chapel> yeah can see that being an issue
01:00 < Slade-> real ethernet is .. complex
01:00 < frank> chapel: well I guess it has 256mb of ram, 
01:00 < frank> chapel: I'd have to build one, I guess
01:00 < djazz> 512mb*
01:00 < mscdex> 640kb is enough for anyone
01:00 < djazz> ^
01:00 < aettinger> deoxxa: u there?
01:00 < chapel> my router (asus rt-n66u) has 256mb ram and a 600mhz broadcom cpu
01:01 < frank> they have a 512 as well?
01:01 < mscdex> shoot, i still have some wrt54g's
01:01 < Hotroot> Google will not let me lookup the mindstorm nxt 0.o
01:01 < djazz> the raspbeerry..
01:01 < chapel> mscdex: I do too, but they are slow network wise and cpu wise
01:01 < mscdex> meh
01:02 < mscdex> i haven't run into any problems yet
01:02 < chapel> my router is setup with a usb 2tb hdd, it downloads torrents and is a dlna / nas / samba server as well
01:02 < aettinger> onr: u there?
01:02 < frank> chapel: ok, I put in the new array, but it still doesn't go in by default...
01:03 -!- mode/#node.js [+o piscisaureus_] by ChanServ
01:03 < frank> chapel: checking mongo afterwards shows no array input at all
01:03 < chapel> no idea about setting a default like that btw
01:03 < frank> chapel: hum...
01:03 < aettinger> anyone using ovh in here for hosting? I'm curious how long it takes to validate an account after sending in docs.
01:03 < chapel> why not just set it to that when you initialize it?
01:03 < onr> aettinger: hi
01:03 < aettinger> onr: hey, you suggested ovh the other day to me?
01:03 < frank> chapel: because I'm doing upserts, into mongo to aggregate all my daily data
01:05 < onr> aettinger: yeah but i haven't used them
01:05 < djazz> g'night
01:06 < chapel> frank: have a gist of an example
01:07 < frank> chapel: I'd love that.
01:11 < chapel> well I meant you do a gist of your code :P
01:11 < chapel> or what you are trying to do
01:11 < frank> oh, haha
01:11 < frank> my bad.
01:11 < frank> yeah let me write one up
01:14 < frank> chapel: https://gist.github.com/562bedead37ee79b1661
01:15 < frank> chapel: does that work ?
01:15 < chapel> is that coffeescript?
01:15 < frank> chapel: shit, just noticed I copied teh first bit in coffeescript, then the last half in js. haha
01:16 < frank> chapel: want all js or all coffee ?
01:16 < chapel> well, whatever just trying to make sure
01:16 < mscdex> node.js rules!
01:16 < t4nkd> Hey Node, just curious about starting to use Node, aside from understanding JavaScript I was wondering if I could find some opinions on the best books currently available?
01:16 < frank> chapel: I'm trying to specify a default for the fields, and with an empty query should the default fields be populated?
01:17 < chapel> frank: well are you saving to the db?
01:18 < frank> do I need to explicitely save? I thought with upsert it was saved ?
01:21 < t4nkd> Maybe I'm being a bit vague -- is there a book this channel would commonly recommend for people coming with a novice/intermediate understanding of JavaScript who want to start using Node?
01:21 < t4nkd> Node.js In Action seems fine, just, looking for some opinions...
01:22 <@mbalho> http://book.mixu.net/
01:22 < frank___1> chapel: hey, sorry got disconnected
01:22 < frank___1> chapel: did I miss anything ?
01:23 < slajax> t4nkd: start with express - no idea about books but there's lots of examples on line
01:23 < frank___1> t4nkd: theres a lot of great books online
01:24 < t4nkd> True, like, if someone were coming to Ruby on Rails I might recommend Agile Web Development or Rails 3 in Action -- because a lot of the other books don't provide enough actual code or cover topics from new project to production deployment...
01:25 < t4nkd> So I'm trying to avoid 300 pages without going through those points and all the ones in between(new project, development, deployment)
01:25 <@mbalho> my advice with node is dont treat it like a web framework and try to go with the grain
01:25 < niggler> slajax: why start with express?\
01:25 < t4nkd> Like, Mixu's book seems at best incomplete...
01:26 < niggler> t4nkd: the easiest way to learn is to dive in
01:26 < slajax> lots of documentation, lots of patterns to familiarize with
01:26 < ack006> t4nkd: mixu's node book perhaps? http://book.mixu.net/
01:26 < slajax> just a suggestion really. I find using popular frameworks as a good way to intro into something like node
01:27 < slajax> niggler: there are of course many ways to learn
01:27 < ack006> t4nkd: it's not as endlessly rambling as some o'reilly, free online & has some goot stuff on common gotcha's
01:28 < ack006> good
01:29 < t4nkd> So, there's no community "cannon" as it were
01:30 <@mbalho> theres http://nodejs.org/api/ and github.com/substack
01:30 < ack006> t4nkd: well, there's always O'Reilly's Learning Node
01:30 <@mbalho> between those two you have days of new patterns to read through
01:30 < ack006> if you like shelling out cash & like little furry animals ;-)
01:31 < niggler> my niggle with express, slajax, is that express 2 style is different from express 3 style
01:31 < niggler> and many sites don
01:31 < niggler> 't
01:31 <@mbalho> and express style is different from node style
01:31 < slajax> agree, that upgrade was somewhat painful
01:31 < niggler> *many sites were written for an older version
01:31 < Hotroot> Yeah, express is extremely handy, but learning it can be a bitch
01:32 < Hotroot> The API is kind of weird too, and they don't do too good a job of mentioning how the middleware is from connect
01:32 < chapel> hmm
01:32 < t4nkd> It's not really a question of money or furriness, it's more of a question of how I can learn Node in a way that, when I hire other javascript developers to contribute on the project, I didn't end up building things like the PHP stdlib
01:32 < chapel> dang missed frank
01:34 < niggler> t4nkd: lol the easiest way is to just start something and hire a CTO to figure that out
01:35 < t4nkd> ...This isn't a bootstrappy idea thing
01:35 < t4nkd> This is an enterprise 300mm req/day for a public company, thing
01:35 < niggler> do you have a concrete project in mind or do you just want to learn?
01:36 < t4nkd> So if I don't start to learn the right way, I'll waste a fuck ton of money, which has happened before with Sproutcore
01:36 < niggler> you should still start with a toy idea t4nkd 
01:36 < niggler> you won't know if node is right for your needs until you try it
01:36 < t4nkd> Yeah I know, but I need to /learn/ something other people will understand
01:37 < niggler> node isn't 1.0 yet
01:37 < t4nkd> I also know that
01:38 < niggler> so how did you end up deciding that node is appropriate for your task?
01:38 < t4nkd> I'm not launching Q1 either, but, Node seems just as appropriate as Python for asynch systems, and I'd rather write JS
01:38 < t4nkd> ^
01:38 < niggler> if you have experience in python why not just use that?
01:38 < t4nkd> I don't, that's part of why I'd prefer Node
01:38 < t4nkd> Because I know JS
01:39 <@mbalho> this is important if you are making decisions like python vs node for async architecture reasons http://nikhilm.github.com/uvbook/
01:40 < t4nkd> ty
01:41 < t4nkd> But, you see what I'm saying, I need resources coming from a perspective of community consensus on style and/or patterns, at least, in some small way
01:41 < ack006> mbalho: don't forget the performance part. excluding addons & python binary modules, i still think v8 blows python out of the water req/s wise
01:42 < t4nkd> I can't read _why's guide and write Ruby, even though it's a good resource, a lot of the things he does don't align with common practice in the community
01:42 < t4nkd> ack006: that's what I understand as wel
01:44 < ack006> t4nkd: but i agree with all others, the proof of the pudding is in the eating
01:44 < ack006> definitely try a small project, get the feel for it. all else is hearsay
01:44 < t4nkd> But if I make a fuckton of tapioca and turns out everyone who writes node likes chocolate, things will be *ungood*
01:45 < t4nkd> So I'd prefer to pick up a copy of "everyone's favorite puddings" first
01:45 < ack006> t4nkd: well, try some of other people's chocolate first then! :-)
01:45 < niggler> why does it matter what everyone else likes?  at the end of the day, you are going to have to spend time showing new hires the ropes
01:45 < ack006> there's tons of modules in npm, try some, try making little changes to some, see how hard / easy it is, then decide
01:46 < t4nkd> Ideally, not as much time as I would have to otherwise if I do things in the style and patterns typical to the community
01:46 < t4nkd> Fair enough, I can say it's easy to see  which modules are the most liked
01:46 < niggler> my impression is that nothing is cemented yet
01:46 < niggler> stylistically, at least
01:46 < t4nkd> Well, that makes more sense to me at least
01:47 < niggler> and id hope the people you'd be hiring later on are sufficiently robust to handle what you throw at them :)
01:47 < t4nkd> Well, I hope I'm not inclined to hire them if I don't think that :P
01:47 < niggler> i shouldn't jest about that -- it turns out to be very hard to find those people
01:47 < t4nkd> ^quoted for truth
01:48 < ack006> t4nkd: i like npm's 'democratic' (some might say demotatorial) way of showing things: on npmjs you see which modules were downloaded most / updated recently
01:48 < ack006> obviously these are the most used
01:48 < t4nkd> yeah, that sounds like it'll be a stronger guide, on top of building some pet stuff
01:49 < t4nkd> pick some popular modules, look at their style/architecture
01:49 < ack006> t4nkd: shake hands, that's how i started. pick some modules off npmjs top list you like, tweak, learn, repeat ;)
01:50 < PastorBones> I need some advice for a unique circumstance. I need to encrypt and compress a JSON object for storage in MySQL. What's the best approach for that in Node?
01:50 < t4nkd> Sounds about right, I really quite prefer "build along with me" type books but it seems like they're in early stages and very few of them, at the moment anyway(not a surprise, very young platform)
01:50 < ack006> t4nkd: then 'npm search' for some stuff you think you're going to need, see what's available, will fit your need
01:50 < clever> PastorBones: http://nodejs.org/api/crypto.html
01:50 < niggler> if we may ask, what exactly are you trying to do t4nkd 
01:50 < ack006> would be nice if npm search could sort by popularity though
01:51 < PastorBones> clever, crypto would do all that?
01:51 < t4nkd> Um, from a high level, push notification service and enqueued messaging -- not unlike APNS and Apple MDM
01:51 < PastorBones> in PHP I'd use gzdeflate( base64_encode( @json_encode( $data ) ), 5 );
01:51 < clever> PastorBones: it can encrypt using http://nodejs.org/api/crypto.html#crypto_class_cipher
01:52 < PastorBones> ok...what about compression?
01:52 < clever> PastorBones: http://nodejs.org/api/zlib.html
01:52 < PastorBones> ty clever
01:52 < niggler> t4nkd have you taken a peek at https://npmjs.org/package/apns
01:52 < niggler> i also think chewed-on (not here atm) recently had something with APNS as well
01:52 < t4nkd> Oh, no I mean, I'm building an APNS cloud service
01:52 <@mbalho> apn is better
01:53 < t4nkd> Like, a replica
01:53 < t4nkd> Not like, using APNS, like, it /is/ APNS
01:53 < niggler> mbalho: https://github.com/argon/node-apn
01:53 <@mbalho> yep
01:53 < Hotroot> I'm reading "APNS" as "A penis" and this is hilarious
01:53 <@mbalho> lol
01:53 < niggler> lol Hotroot 
01:53 < t4nkd> Think like, pusher.com but architected more like RabbitMQ
01:54 < t4nkd> I dunno, tricky to explain without saying too much, but, it's like bidirectional sockets + push notifications
01:54 < Hotroot> "Not like, using a penis, like, it /is/ a penis"
01:54 < t4nkd> Hotroot: lul
01:55 < Hotroot> Do objects stay fairly constant in order when it comes to - for x in obj - ?
01:56 < Hotroot> Because in Pai-gow you trade off who the dealer is. I can just convert to an array every time and pick the next person, but if the order can change when you say, add another player, that's no good
01:56 < Hotroot> It feels wasteful to have an array of players /and/ an object of players though
01:56 < t4nkd> So, node seems like it's pretty awesome at low resource(thus highly concurrent) asynch stuff that doesn't need tons of persistence; and the alternative is Python like Tornado/Twiter+Orbit/Stackless, so, the devil I know(JS) vs the devil I don't(python)
01:56 < niggler> Hotroot: depends on what you mean by fairly constant
01:57 < niggler> if you aren't changing the object the order should be the same
01:57 < niggler> t4nkd: if you do some more googling you might find someone who did what you are describing
01:57 < niggler> 
01:57 < t4nkd> Well, I want to have fun building it too :P
01:58 < Hotroot> I definitely find it fun building in node
01:58 < t4nkd> It looks pretty fun at least :)
01:58 < niggler> hotroot loves playing with APNS
01:58 < t4nkd> HPNS?
01:59 < Hotroot> niggler: Nah, I guess it doesn't work because I'll be doing delete and adds at random
01:59 < Hotroot> Shizen
01:59 < niggler> any good osx irc clients?
01:59 < t4nkd> niggler: I prefer Linkinus
01:59 < Hotroot> niggler: Pidgin
02:00 < niggler> pidgin is too flamboyant
02:00 < Hotroot> 0.o
02:00 < Hotroot> I like it because I have to use gmail chat too
02:01 < t4nkd> A lot of people I know use Textual as well, as far as os x native GUI's go
02:01 < Hotroot> You know what, I'll have a seats object with numbered seats
02:01 < t4nkd> otherwise weechat or irssi
02:01 < Hotroot> and a currentDealer property
02:01 -!- mode/#node.js [+o piscisaureus_] by ChanServ
02:14 < t4nkd> I'll just say, totally unsolicited, but I'm surprised underscore hasn't been merged into node.js -- it's a pretty awesome module
02:15 < niggler> t4nkd trying out linkinus
02:15 < niggler> pro: better colors
02:15 < t4nkd> niggler: I like it, I use one of the lighter themes, the default is... black
02:16 < drudge> i like linkinus
02:16 < niggler> pro: i dont notice any sort of lag
02:17 < niggler> con: the background on actions (like when someone logs on or logs off) arent white
02:17 < drudge> niggler: try the simplified theme
02:17 < niggler> whew ok this is far better drudge
02:17 < t4nkd> yeah I use the "whisper" + "normal" style
02:18 < drudge> i like whisper (i made it) but simplified is more irc-y
02:18 < t4nkd> drudge: +1 sir
02:19 < niggler> how do i reduce the font size on the input box?
02:19 < Hotroot> Haha, I love that about dev channels
02:19 < Hotroot> "Hey, have you seen 0x10co.de?" "Yeah, uhh, I wrote it"
02:19 < drudge> niggler: you can't
02:20 < chapel> Hotroot: drudge is modest he helped make linkinus :P
02:21 < chapel> frank: ping
02:21 < niggler> ok im happy with this, ++drudge
02:22 < Hotroot> Haha, wow
02:22 < niggler> yeah Hotroot its rare for something to make me happy
02:22 < Slade-> does anyone know of a node module that'll build clientside apis?
02:22 < chapel> Slade-: build?
02:23 < Slade-> generate.. from a wsdl or something)
02:23 < Slade-> not nessesarily soap
02:23 < frank> chapel: hey, sorry I got disconnected earlier
02:23 < chapel> no worries
02:23 < frank> chapel: internet cut out for a while
02:23 < chapel> so update doesn't follow mongoose
02:23 < frank> what do you mean?
02:23 < Slade-> i have a websocket (sockjs) and I want to build a simple rpc system with autogenerated functions
02:23 < chapel> its essentially like doing update in mongo cli
02:24 < chapel> though new Model() may put in the defaults
02:24 < mscdex> Slade-: dnode?
02:24 < frank> so the update isn't followed with a save automatically ?
02:24 < chapel> did you check that?
02:24  * Slade- checks dnode
02:24 < chapel> the update function is separate
02:24 < chapel> it is a mongodb native thing
02:24 < Slade-> dnode seemed to be more about node to node tho didnt it?
02:24 < chapel> Slade-: does node to client
02:25 < frank> so update with an upsert=true won't input and save a new document with defaults ?
02:26 < chapel> frank: it will create a new document with the data you pass it
02:26 < chapel> thats it
02:26 < chapel> or update an existing document with that data
02:26 < frank> so the schema with defaults won't be put into the document ?
02:26 < chapel> not unless you did something like db.model.update(query, new Model(), {upsert: true}, ...)
02:27 < chapel> but at that point you may want to just do var doc = new Model(data)
02:27 < chapel> and doc.save()
02:27 < mscdex> Slade-: it has its own protocol. there are implementations in other languages
02:27 < Slade-> wtf is this.. c.pipe(d).pipe(c);
02:27 < chapel> lol
02:27 <@mbalho> telephone call
02:27 <@mbalho> think about it
02:28  * Slade- needs to learn about pipes and streams in node
02:28 < mscdex> don't cross the streams!
02:28 < mscdex> ;-)
02:28 < Slade-> clearly
02:29 < mscdex> but yeah you can use dnode with browsers, perl, ruby, php, and java
02:29 < mscdex> and node of course :-)
02:30  * Slade- thinks maybe he can rip some of the dnode code to produce what he needs.
02:31 < drudge> niggler: cmd-1 is nice
02:32 < ramkamx> hi guys
02:33 < ramkamx> i'm a beginner with node :) struggling to get mojito installed on my ubuntu. keeps on complaining on js-yaml
02:34 < ramkamx> seems to be a file issue, it sometimes says it's missing, and sometimes that it already exists
02:39 < PastorBones> Is there a shortcut way (using underscore.js or something) to compare two objects? I need to remove items from a DB that don't exist in an object...only need to compare one key:value
02:39 < niggler> drudge: omg ive been looking for something like that with colloquy
02:40 < niggler> always pissed me off when it told me i had X messages but it couldnt show me what they were
02:40 < Slade-> mscdex: trying to find something to hook into a rabbit backend. go far so good :)
02:41 < niggler> Hotroot http://codepen.io/
02:43 < drudge> niggler: cmd-1 is a toggle too, so you can show or dismiss it with the keyboard. clicking on one of them will scroll you to that line in the chat (or the log if it scrolled off)
03:08 < Slade-> jsonrpc doesnt seem that popular
03:37 < imm> hi
03:38 < imm> super noob question - lets say I create a basic server and response to client on response with : response.end(some file.html) how do i get that static file to load another js library once the user receives it?  
03:38 < imm> let me rephrase it.
03:40 < imm> i can sent res.writeHead(200, { "Content-type" : "text/html"}); but when the content loads - it hangs at the <script> tag
03:40 < imm> and ideas?
03:43 < imm> ....
03:43 < imm> anyone?
03:50 < imm> rephrase v2  - how do you serve files that have includes - for other .js libraries?
03:51 < jrajav> ?
03:51 < jrajav> You want to know how to make a module?
03:51 < jrajav> (I missed your question)
03:52 < imm> Not necessarily  - my question is how do you serve files to the client that contain relative <script src="lib.js"> includes
03:52 < jrajav> src="" url's can already be relative -- the URL scheme in those follows the same semantics as any other URL
03:53 < jrajav> They're relative to the current page
03:53 < imm> for example when i do this res.writeHead(200, { "Content-type" : "text/html"}) the client hangs at the script tag and does not continue 
03:53 < jrajav> That's because it stops there and issues a request for the script at that point
03:54 < imm> right but it just hangs there and does not continue. Eternally.
03:54 < jrajav> Are you serving the script to it?
03:54 < imm> No
03:55 < jrajav> Well, that would be a start. Is your client a browser?
03:55 < jrajav> It still shouldn't just HANG, but if you're not even giving back a 404 I dunno
03:55 < imm> yes a browser
03:55 < jrajav> It may also help to check the traffic with Wireshark or Fiddler
03:55 < jrajav> Just to see what's going on
03:55 < jrajav> But you should probably serve up that script
03:56 < imm> i think you are right,
03:56 < imm> there is probably a smarter way to do this. 
03:57 < imm> Im doing things with the <canvas> element and i need a js lib to manipulate it - i'll try sending it to the client as well see if that fixes it.
03:58 < imm> i didn't think to send it since its just a relative path to the js lib.
03:59 < imm> which should be loaded when the html is rendered. but i guess it doesnt
04:00 < jrajav> Well, what would "load" it?
04:01 < jrajav> I'm assuming you don't have a normal server running, just node
04:01 < imm> yes just node
04:01 < jrajav> So when it reaches that script tag, the browser's going to fire off a request to the same url and port that the html file is on
04:01 < jrajav> If you ignore that, there is no loading
04:02 < imm> :) jrajav 
04:02 < imm> i think you nailed it in the head!
04:03 < jrajav> ON the head, lol
04:04 < imm> lol
04:04 < imm> my english is bad
04:26 < fivesigma> evening folks!
04:26 < imm> hi
04:27 < mscdex> late evening :-)
04:36 < staykov> hey, what do you guys think of go?
04:37 < staykov> in terms of performance
04:41 < that4chanwolf> If it isn't assembly, it isn't fast enough.
04:43 < staykov> well its trivial to make an http service
04:43 < staykov> and scales insanely well, just curious of any of you guys have messed with it
04:48 < niggler> staykov go sits somewhere between C++ and python in terms of performance
04:51 < staykov> thats a pretty wide gap, twisted isnt very fast right?
04:52 < niggler> twisted is horribly slow
04:53 < staykov> well go webserver responds really well without even using their concurrency 
04:54 < staykov> this is on my crappy laptop too
04:54 < niggler> vanilla go is comparable to simplehttpserver
04:54 < staykov> i dont see anything online with some real benchmarks vs node
04:54 < niggler> py3 calls it http.server
04:55 < niggler> i suspect staykov that you have to benchmark by application
04:55 < niggler> no solution is a panacea
05:21 < niggler> drudge niggle with linkinus: so in colloquy i could type @dru and hit tab and it would autocomplete 'drudge'.  with linkinus that's not the case.  any way to enable that?
05:23 < fivesigma> niggler: does it autocomplete if you omit the @, all mIRC style?
05:23 < niggler> yes it does fivesigma
05:24 < niggler> but one cool thing about colloquy (an irc client was using until a few hours ago) was that it would treat @___ as if it was a nick
06:07 < vicapow> so. unique keys on compound indexes in mongoose… possible?
06:11 < vicapow> the answer is yes! https://gist.github.com/1213187
06:27 < sinclair_> http://sinclair.azurewebsites.net/lasercat/
06:29 < jtm2> I'm running nodejs under windows and I am unable to use node-waf. Has there been any windows implementation of this?
06:29 < jtm2> Or any way I can get db-mysql (or a better alternative?)
06:41 < vicapow> sinclair_: so beautiful...
06:42 < vicapow> sinclair_: it runs out of carpet though
06:42 < vicapow> or is it grass?
06:42 < sinclair_> grass
06:42 < vicapow> sinclair_: that's actually a really cool smoke effect
07:02 < Raynos> are there any non binary ws implementations?
07:06 <@konobi> jtm2: node-mysql
07:08 < jtm2> konobi Ok, I'm using that now.
07:08 < jtm2> konobi When used with socket.io should I be creating a connection on every event or just 1 connection during the application's entire life?
07:08 < jtm2> konobi and using the connection to do queries, etc.
07:31 < Raynos> is there an async console.log ?
07:34 < fivesigma> jtm2: seems like it would be less expensive resource-wise to have a single connection persist somewhere...
07:42 < Mani> Hi
07:42 < niggler> rofl
07:42 < Guest44636> Is this chat good to discuss any queries in Socket.io with Node ?
07:42 < niggler> !shoo @Guest44636
07:43 < niggler> there's an actual channel Guest44636 for socket.io
07:43 < niggler> #socket.io
07:43 < niggler> !shoo
07:43 < niggler> !ded
07:43 < niggler> !commands
07:43 < niggler> what's going on purr?
07:43 < Guest44636> okay
08:21 < jtm2> Anyone here use underscore.js? Does it add a lot of overhead to node.js?
08:22 < GreenDog> yes and no
08:22 < jtm2> I'm trying to use something like collections or a vector.
08:23 < jtm2> Or something similar to its map.
08:23 < RLa> does underscore make sense with ES5 at all?
08:23 < RLa> _.each etc
08:23 < niggler> the names are different but the concepts are the same
08:24 < RLa> so why use underscore then
08:24 < jtm2> Then should I just use ES5?
08:24 < RLa> i think it will miss some things tho
08:25 < RLa> _ has lot of utility functions
08:25 < tasslehoff> I've managed to make my ajax-stuff work. On a successful login I see the following in my console http://pastebin.com/HawBA1TL. Is that a bit .. too much?
08:25 < RLa> but array processing, why not just use ES5 stuff yeah
08:27 < jtm2> I'm mostly trying to store multiple pieces of information. Something like [{x: 'y', b: 'z', j: [1,2,3,4,5]}, ... ]
08:27 < jtm2> As you can see, it's not exactly regular.
08:27 < RLa> tasslehoff, it does too many requests?
08:27 < niggler> jtm2 that sounds like something from d3
08:28 < RLa> jtm2, if you have complex structures, also look at traverse: https://github.com/substack/js-traverse
08:28 < chakrit> underscore is fine. you get a consistent api on the client-side as well.
08:28 < jtm2> Hmm
08:29 < chakrit> it isn't *that* much overhead. but you already have ES5... so it's just preference
08:29 < jtm2> Well the client is just passing very simple information, so that's not an issue. I'm storing client information based off of socket.io. Though I don't think storing in an array is smart either.
08:29 < jtm2> I could use memcached and create an object
08:30 < jtm2> or an array of objects.
08:30 < RLa> or use document db
08:30 < jtm2> Redis?
08:30 < chakrit> yeah sounds like a document db would fit
08:31 < [Jasper]> hej guys, I have a question....I have 2 seperate files..... 1 main which calls a function which is stored in user ... Let's for example say it calls user.login( socket , data , user.login_success );
08:31 < jtm2> Isn't that more overhead?
08:31 < [Jasper]> the callback would be user.login_success .... is this allowed like this?
08:31 < [Jasper]> because it's giving me a problem
08:31 < RLa> jtm2, of course least overhead is to store directly in ram
08:31 < RLa> as js objects
08:31 < tasslehoff> RLa: that's what I'm wondering
08:32 < RLa> but that's not reliable, what if power goes off, then you simply lose all data :)
08:32 < jtm2> Only issue is I don't know how many sockets will be opened and how much information will be stored in the "array".
08:32 < chakrit> [Jasper] did you have reference to `this` in user.login_success?
08:32 < jtm2> RLa that's unlikely, but an issue indeed.
08:33 < RLa> someone trips over power cable and pulls it out for example
08:33 < jtm2> I'm already using mysql libraries, so I am a bit hesitant about bringing redis in.
08:34 < RLa> i guess mysql would accept json string as column value too :)
08:34 < RLa> maybe not optimal
08:34 < jtm2> yeah but I need to search inside some of the fields.
08:34 < jtm2> So some encapsulation might be best I guess.
08:35 < jtm2> Or I could go lazy and use arrays and if the site grows enough switch it to a document db
08:35 < RLa> that's good idea
08:35 < jtm2> I tend to go all out, but honestly, there might only be like 5 people connected.
08:35 < jtm2> An array is fine in that case.
08:36 < jtm2> Or any mapping solution.
08:37 < [AD]Turbo> hi there
08:42 < [Jasper]> chakrit , I have a main.js which calls a function user.js ..... as a callback the code in the user.js function calls another function inside user.js
08:43 < [Jasper]> but I'm getting a message that the function is not defined
08:43 < [Jasper]> when I try to do that
08:43 < [Jasper]> I must be doing this the wrong way
08:43 < [Jasper]> any idea what it could be?
08:44 < niggler> !help @ [Jasper]
08:44 < niggler> hmm dunno why it isnt working
08:51 < joelsbeard> I don't know another good place to ask this. Does anyone know a good NoSQL replacement for postgis? Or, another way to store geo data?
08:51 < [Jasper]> me neither niggler, but maybe you can answer the question ? :P
08:52 < niggler> [Jasper] that message would have said something about showing a code sample :)
08:55 < txdv> I'm pissed off always providing the offset in the messagebuffer
08:55 < txdv> is there some class which automatically increments some kind of offset?
08:56 < [Jasper]> niggler : http://pastebin.com/XDBMXS0f
08:56 < [Jasper]> that's a small example code....now this is user.js ...which gets called from main.js 
08:57 < [Jasper]> so I will call user.login( data data data )
08:57 < niggler> my suspicion prima facie is that it has something to do with your treatment of 'this'
08:57 < [Jasper]> or should I specifity inside user.login to call user.login_result
08:57 < Pitel_IPEX> is there the mysql guy? I am getting exception `Object SELECT blah blah... has no method 'query'` in line `this.sql.query("SELECT blah blah ... = ?", [json.calledid], function(err, results) {...}`
08:58 < niggler> its not an issue if the callbacks spread out between files [Jasper]
08:58 < Pitel_IPEX> http://pastebin.com/tdWL15ze there is the stack trace
08:59 < [Jasper]> why doesn't it work then niggler ?
09:00 < niggler> i suspect, although i havent seen all of the code, that you are depending on 'this' somewhere in the callbacks
09:01 < [Jasper]> login_result( socket , data , { status : 'success' } );
09:01 < [Jasper]> ReferenceError: login_result is not defined
09:02 < niggler> so [Jasper] in the sample you posted
09:02 < niggler>                         this.logout_result( socket , { status : 'success' } );
09:02 < elliottcable> Hallo, all.
09:03 < [Jasper]> yes niggler ....but if I replace this with nothing or put user. instead of this
09:03 < [Jasper]> it still doesn't work
09:03 < niggler> [Jasper] https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/this
09:03 < niggler> if you go back and explicitly pass the user object as a parameter to the callback
09:04 < [Jasper]> I have to really pass the user object even if it's in the same file?
09:04 < [Jasper]> maybe I'm thinking too much in the java style...
09:04 < niggler> the problem is that 'this' has a different meaning
09:04 <@konobi> are you using new User(...)
09:05 < [Jasper]> konobi no, where should I be using this?
09:05 < niggler> >>> function foo() { return this; }; var x = {y: {z: foo}}; x.y.z();
09:05 < purr> niggler: (object) {z: (function) foo}
09:05 < SomeoneWeird> XYZ
09:05 <@konobi> [Jasper]: you should have a look at objects and prototypes in MDN
09:05 < niggler> SomeoneWeird its 4 AM
09:06 < SomeoneWeird> for you
09:06 < niggler> i assume the world works on my time :)
09:06 < SomeoneWeird> :)
09:08 < txdv> Is there a buffer class which counts the offset by itself?!
09:09 < deoxxa> txdv: wat
09:09 < txdv> I don't want to write all the time the offset in all the read* functions, I want to select an offset at the beginning and let the buffer count appropriately to the used read* methods
09:11 < deoxxa> ah
10:19 < MikePeters> Hey guys, having a nightmare here with multi process nodes (only 2 processes, each on its own server).  The clients keep failing with "client not handshaken" and a socket.socket.connect() doesn't help.  Looks like there are quite a few open threads about this like issue #483 ; Is there any workaround? My clients keep throwing this handshake error and the only thing that fixes it is a page reload
10:35 < bid> hi, i want to make a "server" that run's on windows machine. the server will have to run exe file and return the exe result. is this somthing node.js can do? recommanded?
10:35 < MikePeters> bid: Is this just for playing around? For production you really shouldn't go with Windows
10:36 < MikePeters> bid: You can install node.js exe here http://nodejs.org/
10:36 < bid> i have to use windows (the exe is doing stuff only in windows) it's semi production 
10:36 < clever> bid: and you dont have the source for that exe?
10:37 < bid> i do. 
10:37 < clever> what is it doing that only windows can do?
10:37 < MikePeters> bid: Node.js is not designed to launch an exe process, but maybe there are plugins that can help you
10:37 < clever> i cant see why child_process wont work
10:38 < bid> i am sure linux can do the same but i dont have resource to transform the code. 
10:38 < bid> thanks i will read some more about it. 
10:42 < MikePeters> Anyone has any ideas what I can do about "client not handshaken" errors?
11:02 < bid> btw, this seems the right chooise for me child_process.execFile
11:09 < MikePeters> Help. Anyone?
11:09 < MikePeters>  Anyone has any ideas what I can do about "client not handshaken" errors?
11:10 < deoxxa> MikePeters: it's like 35 of your app.js
11:10 < deoxxa> MikePeters: fix line 35
11:10 < deoxxa> "what? how would he know that?", i pretend to hear you say
11:10 < deoxxa> you're absolutely correct
11:10 < MikePeters> :-)
11:10 < deoxxa> how would i know that
11:11 < MikePeters> I am having a nightmare here with multi process nodes (only 2 processes, each on its own server).  The clients keep failing with "client not handshaken" and a socket.socket.connect() doesn't help.  Looks like there are quite a few open threads about this like issue #483 ; Is there any workaround? My clients keep throwing this handshake error and the only thing that fixes it is a page reload
11:11 < deoxxa> sounds like you're talking about socket.io
11:11 < deoxxa> you should mention that at the start, so someone can say "go to #socket.io"
11:11 < MikePeters> Right. But it's socket.io <=> node.js that is giving me grief
11:12 < deoxxa> nope
11:12 < deoxxa> just socket.io
11:12 < MikePeters> The guys over at socket.io said it's a node.js problem :-)
11:12 < MikePeters> I'll dig deeper
11:12 < deoxxa> well, given that node doesn't deal with client side stuff, or anything involving an error "client not handshaken", i'm be inclined to point the finger squarely back at the library
11:12 < MikePeters> While I'm here, is there a better alternative you would recommend other than socket.io?
11:14 < deoxxa> there's a bunch of alternatives - shoe and sockjs seem to be the most commonly mentioned
11:14 < MikePeters> deoxxa: Thanks! I'll try those 
11:15 < deoxxa> MikePeters: did they say anything specific about what the problem was with node?
11:16 < SomeoneWeird> "NOPENOPENOPE NOT OUR LIBRARY"
11:17 < clever> deoxxa: i believe "client not handshaken" is caused by the 2 requests going to different processes
11:17 < MikePeters> SomeoneWeird: How did you know? That's correct - Nothing specific. Just that it's not a socket.io issue 
11:17 < clever> deoxxa: you need to modify it to store that session data in a central place
11:17 < MikePeters> clever: Yes that is correct. This reproduces when a client is connected to one node.js, then that server goes down and the client gets switched to the other node.js
11:17 < deoxxa> ah
11:18 < deoxxa> so there's no bug anywhere really
11:18 < deoxxa> just a deficiency
11:18 < clever> deoxxa: i did see something in the code that may already support that
11:18 < clever> if enabled
11:18 < MikePeters> deoxxa: Really? So how do I work around it? I am not using sessions in node.js myself (other than what it is using internally)
11:18 < MikePeters> clever: Where's the enable button? :-)
11:18 < deoxxa> MikePeters: oh no i mean nothing is broken - that's just not a supported configuration
11:18 < clever> MikePeters: socket.io always does a handshake request to get a session id
11:18 < clever> MikePeters: then opens the real connection with that sessionid
11:19 < MikePeters> I feel we're very close to a solution guys... :-) So I do need to support multi-process node.js.  I am not married to socket.io.  But it sounds like there's a way to make this all work with node.js, by simply doing.... ?
11:19  * clever digs
11:20 < mishoo> hey there - what is the "proper" way to discontinue a npm package?
11:20 < clever> MikePeters: https://github.com/LearnBoost/socket.io/tree/master/lib/stores
11:20 < Doikor> cant you share a socket between processes using cluster?
11:20 < clever> it has support for 2 session stores
11:20 < MikePeters> Doikor: No, they are on two different machines. Two different data centers.
11:20 < clever> memory which cant cluster, and redis, which can, once you setup a redis server
11:20 < clever> MikePeters: if you share a redis server between them, that could fix it
11:21 < MikePeters> clever: I have no issues connecting redis between them, but is this required even if I'm not using any session data? Is this required so that node.js can store its own session data?
11:21 < clever> MikePeters: it always needs that session id to work, and all non-websocket transports NEED it to do anything
11:22 < clever> it uses the sessionid to link multiple connections for polling, into a single stream
11:22 < MikePeters> What confuses me is I don't get why the client can't just say "Oops, ok need to handshake. Let me reconnect". 
11:22 < MikePeters> I am fine with a reconnect, but this doesn't work well. The client is stuck in an infinite not handshaked error loop and a socket.socket.connect doesn't work
11:22 < clever> var socketio = require('socketio'); and then somehow create an instance of socketio.RedisStore, configure it, and pass it in
11:22 < MikePeters> clever: Ok gotcha. So socket.io or not, I am going to need this setup to make things work properly in a multi-process node.js configuration
11:23 < MikePeters> clever: Correct?
11:23 < clever> either that, or use seperate hostnames
11:23 < clever> server1.foo.com server2.foo.com server3.foo.com
11:24 < clever> then every request goes to the same host, no mixups
11:24 < MikePeters> Interesting. I like that approach a lot better
11:24 < clever> but that wont solve cluster which shares an ip
11:24 < clever> ok, so the instance of RedisStore has to be passed in thru the options object, as 'store'
11:25 < clever> let me throw together an example
11:25 < MikePeters> Got it. Makes sense. I still don't understand why the "Oops didn't handshake with you, ok lemme disconnect, reconnect and do a proper handshake" doesn't work well. This definitely smells like a bug to me. Not sure on which side the bug is. 
11:25 < clever> i'm not sure on that part
11:25 < MikePeters> clever: Shoot
11:27 < clever> MikePeters: https://gist.github.com/4124430
11:27 < clever> like this i believe
11:27 < clever> MikePeters: by default, it uses a MemoryStore object, which is local to the node process, causing the problem
11:28 < clever> RedisStore lets it share between processes
11:28 < MikePeters> Seems promising. Will give that a try. I hate to add Redis as a SPOF to the mix, but going to try it now
11:28 < clever> you can also read the memorystore/redisstore code, and write a custom store
11:28 < clever> that uses a service you already have
11:28 < MikePeters> My whole point with this setup is to continue delivering node.js service, when one server goes completely offline
11:30 < MikePeters> Actually I am first going to try replacing socket.io with sock.js.  I am reading nice things about it. (Thanks for the reference!). My hope is that sockJS does a better job handling with the scenario of node.mydomain.com switching from ip1 to ip2 in the middle, having the client properly realize that, disconnect and reconnect.  It sounds like from node.js perspective things should work well
11:30 < SomeoneWeird> if a server goes offline then you have a bigger problem :P
11:31 < MikePeters> SomeoneWeird: I have a few dozen servers. Sooner or later, things go down. That's why we have to plan for them going down.
11:31 < SomeoneWeird> :)
11:31 < clever> MikePeters: https://github.com/LearnBoost/Socket.IO/wiki/Configuring-Socket.IO
11:31 < clever> ah, they already have examples on redis
11:32 < kurteknikk> hi
11:32 < kurteknikk> anybody can help with 64bit binary integers ?
11:33 < kurteknikk> basically i expected there is a:  buffer.readUInt64BE() function but apparently there's not...
11:33 < MikePeters> clever: Yeah now that I understand things better, I am sure plugging in redisstore to my two node.js instances will fix things.  But still I'm not happy with socket.io (I assume socket.io is to blame) inability to properly handle the "not handshaked" error and no one over at the many socket.io threads coming up with a solution for it.
11:33 < MikePeters> So I am going to first try sockjs
11:33 < clever> MikePeters: another option, is to listen for the reconnect event client side
11:33 < clever> then force a full disconnect and reconnct
11:33 < clever> to make it redo the handshake
11:34 < clever> it should handshake against the other ip, and fix itself
11:34 < MikePeters> clever: Yeah I am doing that, trust me. Have been trying every single combination of disconnect,connect,reconnect,delete,set as null, you name it.  Nothing works.  And lots of other frustrated users like me are in the same boat
11:34 < clever> and you need to check the http logs somewhere, to make sure it redid the handshake
11:35 < MikePeters> Check out how long this thread is: https://github.com/LearnBoost/socket.io/issues/438
11:35 < MikePeters> No fix yet and everyone running into the same issue as me
11:35 < MikePeters> I'm really keeping my fingers crossed that this is all a bug in socket.io and that sockjs will fix it all
11:39 < tasslehoff> I was so happy with my xhr-using scripts, until I decided to test in IE... Any suggestions on how to replace FormData() in a portable way? Should I run jquery instead of raw javascript?
11:44 < kurteknikk> nobody is available about my 64bit number issue ?
11:48 < appr> kurteknikk: https://github.com/TooTallNate/ref extends Buffer.prototype with the missing {read,write}{U}Int64{LE,BE} functions
11:49 < kurteknikk> appr, thanks for your reply, any idea if it's going to be included later ?
11:49 < kurteknikk> because to me it seems like it should be "natively supported"
11:49 < kurteknikk> or i'm wrong ?
11:54 < tasslehoff> FormDataCompatibility seems to add what I need, but the next stumble comes when sendAsBinary is not available in IE.
11:58 < deoxxa> kurteknikk: problem is that javascript doesn't technically have 64 bit integers
11:58 < deoxxa> kurteknikk: so the best you can do is "kind of works most of the time" 64 bit integers
11:58 < deoxxa> kurteknikk: that's why it's not supported natively
11:59 < clever> kurteknikk: maybe if you used a Buffer that was 64 bits long?
12:00 < clever> kurteknikk: https://npmjs.org/package/bigint
12:00 < clever> ah, they already have a proper lib :)
12:01 < kurteknikk> Hi guys, thanks for your help
12:01 < appr> yep, js Number can't store every 64bit number without losing precision. read{U}Int64{LE,BE} from ref module returns String if value doesn't fit
12:02 < kurteknikk> i expected that was the problem with not having the function by default
12:02 < abrkn> int, num, bigint, bignum on npm
12:02 < kurteknikk> my issues is that i'm decoding data from another device, which supports 64 bit so i have to be able to decode 64bit integers
12:03 < kurteknikk> it's just used once for time but, it's there so i have to get it working
12:25 < abrkn> whats the preferred way to tell the client why a rest call failed? (custom error codes etc)
12:27 < SomeoneWeird> is there an easy way to "ask questions" at the terminal?
12:28 < SomeoneWeird> nevermind
12:51 < clever> deoxxa: ah, socket.io has a 3rd store! https://github.com/kof/socket.io-mongo
12:57 < AviMarcus> Hey. So I'm trying to parse some data and same the inserts to a ram disk, so I can import into SQL. But.. it looks like it's going to fast for the writestream and I get fails on the insert. So, I should re-queue these?  I couldn't find any articles about this.
13:08 < elbeardmorez> hi. npm install -g quest; node #drops into console;  >require 'quest'    ... no module found. how can this be if 'npm list -g' lists module 'quest' ? the node console responds positively to require 'http' ..although that's built in i suppose. help?
13:13 < MI6> joyent/node: Shigeki Ohtsu master * 11a5119 : build: disable use of thin archive  Thin archive needs binutils >= 2.19,  - http://git.io/5-JcwA
13:20 < majek> MikePeters: shout if you encounter any issues with SockJS :)
13:43 -!- mode/#node.js [+o piscisaureus_] by ChanServ
14:09 < astropirate> soo.. guys
14:09 < astropirate> whats the hype these days?
14:09 < astropirate> the new "hot" tech
14:10 < drudge> http://tyrannically-asynchrono.us is pretty hot right now
14:14 < astropirate> drudge, you sly you
14:14 < astropirate> node.js is so 3 years ago :| has nothing come out since then?
14:19 < astropirate> the net split is strong with this one
14:19 < q_no> I'm trying to install node-canvas on CentOS6 and all I get is: flock: ./Release/linker.lock: No locks available <- I have no clue what this means. Can someone enlighten me?
14:22 < rio{> Can anyone explain how the "ref" is used (mongoose): { type : mongoose.Schema.ObjectId, ref : 'User', required: true }, 
14:31 < drudge> rio{: it is used to define the Model name the _id belongs to
14:31 < drudge> so you can use populate and it'll fetch the model with that id
14:32 < drudge> rio{: see http://mongoosejs.com/docs/populate.html
14:32 < rio{> ah populate you say. 
14:32 < rio{> smart
14:35 < zot> heyo hiyo
14:36 < zot> I've got a program that, in the debugger, exits with "program terminated"  (no signal listed or anything like that) — is there a smart breakpoint or trick I can use to get to the stack where that's occurring?
14:45 < WildWill> What is the most popular debugger that everyone uses?
14:48 < Zelest> I've setup a https server in nodejs and wish to block usage of weak/insecure ciphers.. is this possible to configure somewhere?
14:50 < mscdex> Zelest: yes, you can pass in an options hash when calling https.createServer()
14:51 < mscdex> Zelest: `https.createServer(options, requestListener);` where options can contain: http://nodejs.org/api/tls.html#tls_tls_createserver_options_secureconnectionlistener
14:52 < Zelest> Oh yeah, thanks!
14:57 < drudge> WildWill: node-inspector i'd say
14:57 < manuelbieh> uuhm
14:58 < manuelbieh> i'm trying to read a file using fs.readFile()
14:58 < jrajav> You might have better luck with a good pair of glasses
14:58 < manuelbieh> the data-parameter of my callback contains the buffer. is that correct? data.toString() outputs the actual file content
14:58 < jrajav> HO HO *bdum tish*
14:59 < manuelbieh> hohoho
14:59 < jrajav> Yes, the data parameter is a buffer if you don't specify an encoding, as the docs say
14:59 < manuelbieh> aaah ok
14:59 < jrajav> .toString() on a buffer will yield a string given an encoding for the buffer - which is utf-8 by default
15:00 < jrajav> And by lucky chance, most text files you'll encounter are utf-8
15:00 < manuelbieh> ah
15:00 < jrajav> Or ASCII, which is valid utf8
15:00 < manuelbieh> i haven't seen the last sentence
15:00 < jrajav> It's in the docs for Buffer
15:00 < manuelbieh> The callback is passed two arguments (err, data), where data is the contents of the file.
15:00 < manuelbieh> stopped reading
15:00 < manuelbieh> then: If no encoding is specified, then the raw buffer is returned.
15:00 < jrajav> Oh lol
15:00 < jrajav> Yeah
15:00 < manuelbieh> ...
15:03 < WildWill> drudge: Thanks  I just got it running
15:16 < Pitel_IPEX> how can I require some module which is dependency of other module? like require('socket.io/socket.io-client')
15:18 < AviMarcus> if it's a dependency that's installed, then it's installed. require will find it.
15:18 < AviMarcus> i think.
15:25 < jrajav> Pitel_IPEX: It will be required by that module if that module needs it
15:25 < jrajav> Pitel_IPEX: If you need it, require it yourself - there's no need to specify another module
15:26 < erwin89> Hello! Is there a way to connect to netlink sockets with node.js?
15:34 < WarheadsSE>  anyone seeing problems installing socket.io via npm? ENOENT node_modules/socket.io/node_modules/socket.io-client/node_modules/uglify-js/package.json
15:46 < WarheadsSE> hmm, looks isolated .. *fsck's
15:51 -!- mode/#node.js [+o piscisaureus_] by ChanServ
16:05 < drudge> what is the recommended way to rename/move across filesystems?
16:28 < nathan7> tturns out deoxxa is not a serial killer
16:28 < nathan7> *turns, even
16:28 < astropirate_> nathan7, thats what he wants you to belive
16:28 < deoxxa> i'm gonna follow him home
16:29 < nathan7> Dunno, maybe he's a really patient serial killer and he's actually followed me now
16:29 < nathan7> today was a fun adventure
16:30 < deoxxa> i have cherry coke
16:30 < deoxxa> i'm the greatest man alive
16:31 < nathan7> And a Dutch SIM!
17:25 < ins0mnia> Hi guys, I'm trying to run an express app on a joynet SmartOS machine 
17:25 < ins0mnia> and I'm getting the following error:
17:25 < ins0mnia> TypeError: Object #<SendStream> has no method 'on'
17:25 < ins0mnia>     at Object.static [as handle] (/home/admin/pip/node_modules/express/node_modules/connect/lib/middleware/static.js:81:8)
17:25 < ins0mnia> Any clues to what might cause this?
17:25 < ins0mnia> The error doesn't appear on my linux machine
17:31 <@konobi> express 2 vs express 3?
17:32 < nlf> fight!
17:32 < nlf> impulse reaction when i see or hear the word versus
17:32 < Kvisle_> versus
17:49  * mscdex shakes a fist at OpenSSL!
17:50  * medice inserts a shakeweight in mscdex's hand
17:51 < mscdex> i think OpenSSH should be accepting the DER-encoded data that OpenSSL gives you when you sign data for DSA private keys >:\
17:57 < deoxxa> mscdex: i think that lucky charms are the best breakfast cereal
18:01 < niggler> woah deoxxa CTC all the way
18:01 < CoverSlide> ssh is awesome, i just disconnected my ethernet for about 20 secs, still connected
18:02 < niggler> you can change the timeout CoverSlide
18:02 < CoverSlide> yeah i know
18:06 < jtm2> Why is my "get" failing: redis_client.set('socket_' + client.id, public_hash);  then client.get('socket_' + client.id, function(err, reply) { ... });   both err and reply are null. If I look up the key in redis, it is there and correct.
18:07 < jtm2> In redis' monitor, I see it being set and get correctly. It's value is also not null. Could it be getting a get before the set completed?
18:07 < aettinger> jtm2: just curious, are you on a mac?
18:08 < jtm2> Windows
18:08 < jtm2> redis = require("redis");
18:08 < aettinger> redis had lots of problems for me on mac unless I started as root
18:08 < jtm2> I think it's a concurrency issue or something.
18:08 < aettinger> i would say increase log level in redis.conf
18:08 < jtm2> I'm monitoring it 100%
18:08 < jtm2> It's all accurate.
18:08 < aettinger> i saw lots of permisssion denied errors.
18:09 < jtm2> Hmmm, but it has gotten other values through node.js
18:09 < jtm2> With no issues at all
18:09 < jtm2> It's just in this case it's null.
18:09 < aettinger> does it work and then suddenly stop working?
18:09 < jtm2> Sometimes, it's strange
18:09 < aettinger> yeah, that's what i was seeing
18:09 < jtm2> ill try running as administrator
18:10 < aettinger> increase log level to everything inr edis.conf and restart
18:10 < CoverSlide> jtm2: are you waiting for the set callback to finish before doing the get?
18:10 < aettinger> tail the log and look for errors
18:10 < jtm2> though all my cmd are running at administrator level.
18:10 < CoverSlide> or are you putting them on the same line?
18:10 < jtm2> CoverSlide 2 lines.
18:10 < jtm2> well more than 2, but not the same line.
18:10 < CoverSlide> s/line/function scope/
18:10 < aettinger> after 60 seconds or so when redis tries to save the in memory db to the file system, if it has permission problems it will suddenly stop working.
18:11 < CoverSlide> jtm2: you need the set callback to finish before you are able to get it back
18:11 < CoverSlide> i.e write the get part inside the set callback
18:11 < CoverSlide> you need to structure your code asynchronously
18:13 < jtm2> http://pastebin.com/f7vjcMub
18:13 < CoverSlide> jtm2: what did I just say?
18:13 < jtm2> Was just showing you what I had.
18:13 < jtm2> I understand what you mean.
18:13 < jtm2> But this is coupled with socket.io
18:14 < jtm2> So it's out of my control if they disconnect / reconnect and need to access a key that hasn't been written
18:14 < CoverSlide> jtm2: http://pastebin.com/hvuU2j6Q << how to get it to do it right
18:14 < CoverSlide> socket.io doesn't enter into it
18:14 < jtm2> Hmm
18:15 < CoverSlide> there's no reason you can't structure things this way
18:15 < jtm2> I rarely do gets anyway, but I am worried that during 1 connection a set is issued, and a reconnect occurs at the moment the set is issued and a get needs to be done
18:16 < jtm2> The get will fail from a previous socket
18:16 < jtm2> Since the set didn't finish.
18:16 < jtm2> And even if I put it inside the set, it won't solve the issue with a new socket being created attempting to access this key.
18:17 < CoverSlide> well sometimes you have race conditions
18:17 < jtm2> Also no where does it say in: https://github.com/mranney/node_redis  That I need to put my gets inside the sets.
18:17 < CoverSlide> there are ways to prevent them
18:18 < CoverSlide> jtm2: it's a node thing. anything that happens with IO needs a callback. end of story
18:18 < CoverSlide> jtm2: well there shouldn't be a reason you need to get something you just set anyway
18:18 < jtm2> I don't know how long it takes to set
18:19 < jtm2> And if another socket is issued to get a key that isn't there
18:19 < jtm2> That's a big problem.
18:19 < CoverSlide> set a flag in the set callback
18:19 < CoverSlide> if the client reconnects, check that flag
18:20 < CoverSlide> if that flag isn't set, you know that key hasn't been set
18:20 < deoxxa> < jtm2> ill try running as administrator
18:20 < deoxxa> rofl
18:20 < CoverSlide> I always run redis-server as my user with a custom conf
18:20 < CoverSlide> there's no reason it needs to run as root
18:21 < jtm2> deoxxa That was in reply to: <aettinger> i saw lots of permisssion denied errors.   Obviously under Windows this wouldn't do anything, so I instantly ruled out the case.
18:22 < aettinger> CoverSlide: i got perm denied errors when redis tried to save
18:22 < jtm2> And this is all testing anyway
18:22 < aettinger> i used brew to install
18:22 < aettinger> but i think i did the brew install redis as root
18:22 < niggler> you need to chmod the directory where it is saving the dumps
18:22 < jtm2> yeah permissions isn't an issue under my environment.
18:23 < aettinger> jtm2: you culd still bump up the errors and see what could be the problem.
18:23 < jtm2> I think there is no problem.
18:23 < CoverSlide> aettinger: if you're running the redis-server command by itself most likely it's reading the /etc/redis.conf, which most likely points to locations on /var, which you need permissions for
18:23 < jtm2> It's just the behavior of node.js
18:23 < jtm2> It's meant to be that way.
18:23 < CoverSlide> much more convenient to run it with a custom conf pointing to a few locations in your app
18:24 < CoverSlide> like I usually have a redis/ directory in my apps
18:24 < CoverSlide> it holds the conf, the db file, aof, and logs
18:27 < aettinger> deoxxa: hey
18:28 < aettinger> you ordered a server from ohv.ie?
18:32 < aettinger> did they tell you to enter your bank's password on some phishy looking site called arcot.com?
18:33 < exit2> Anyone here used Pomelo yet?
18:33 < emocakes> yes aettinger
18:33 < emocakes> i just entered my password on arcot.com
18:34 < emocakes> don't steal my details
18:35 < CoverSlide> wtf... arcot.com points to my localhost
18:35 < CoverSlide> arcot.com. 35997 IN A 127.0.0.1
18:36 < CoverSlide> hmm
18:36 < exit2> O_o
18:37 < CoverSlide> yeah, pointing to your localhost, that sounds fishy to me
18:38 < niggler> CoverSlide that sounds like what i do with most sites
18:38 < CoverSlide> nameservers are ns21.netriplex.com
18:39 < CoverSlide> hmm i read that as net triple X
18:39 < CoverSlide> but that part seems legit
18:39 < CoverSlide> niggler:  ??
18:40 < niggler> i redirect most time wasting sites to 127.0.0.1
18:40 < niggler> CoverSlide although for arcot.com i see 141.202.253.195
18:40 < deoxxa> aettinger: nope
18:40 < deoxxa> aettinger: i use a reseller
18:41 < deoxxa> aettinger: i'm australian, can't order from ovh directly
18:48 < aettinger> deoxxa: i found i can order from ohv.ie in usa
18:58 < aettinger> artcot is supposed to be some cc# validator used by major credit card companies to protect against fraud.
18:59 < nlf> anyone know offhand if it's possible to programmatically figure out what line number of a module your command is running from?
19:00 < aettinger> but it looks like pure phishing
19:00 < CoverSlide> nlf: new Error().stack
19:00 < tmpvar> nlf, (new Error()).stack ?
19:00 < nlf> aha, nice
19:00 < nlf> thanks
19:01 < aettinger> is ovh legit? they ask for my credit card, drivers licnese and address. I think they are trying to steal my identity and maybe 1tb for 20/month is too good to be true.
19:02 < drudge> aettinger: i use ovh, have for years
19:05 < harrisonm> Why would they need a dl#
19:05 < CoverSlide> to steal your $$
19:06 < tnorris> piscisaureus_, bnoordhuis: you two were busy yesterday. =)
19:06 < aettinger> drudge: did you have to give them your bank's password?
19:06 < drudge> haha, no
19:06 < aettinger> that's where i draw the line
19:06 < drudge> first born
19:07 < drudge> i was okay with it though
19:07 < aettinger> i will give them my cat that pees everywhere
19:07 < aettinger> the site i was supposed to enter my bank's password on was on this page: 
19:07 < aettinger> http://arcot.com/
19:07 < aettinger> which points to my local host
19:11 < cellvia> i know this is subjective, but give me your opinion:  what is a reasonable max number of setTimeouts to have at any given time
19:11 < CoverSlide> none, as long as you can manage them all
19:12 < CoverSlide> cellvia: why?
19:12 < CoverSlide> what are you using setTimeout for?
19:12 < cellvia> CoverSlide: could you go into more detail? how do you mean manage them all
19:12 < niggler> if you have more than 3 you probably can rearchitect and remove a few
19:12 < cellvia> I'm trying to limit the number of concurrent requests I make to an API
19:12 < cellvia> so im basically racking up a queue to wait if theres more than x number of requests already waiting
19:13 < niggler> cellvia you might be able to group requests together
19:13 < cellvia> er already running
19:13 < cellvia> in the sense of consolidating the query?  thing is this api kind of sucks
19:13 < cellvia> it blows out easily if i hit it with too many, and i have to make a bunch of tiny requests for every additional piece of info
19:14 < niggler> cellvia that sounds ripe for API improvement
19:15 < cellvia> I dont have cotrol over the api :(
19:15 < cellvia> its an external resource
19:16 < niggler> why not have nodejs wrap the request then?
19:16 < cellvia> so im guessing you'd consider 10,000 timeouts running together too much ;)
19:17 < astropirate> I could go for a gyro right now :|
19:17 < niggler> client makes the combined request, nodejs server sees request and makes the many requests to the resource
19:17 < othiym23> cellvia: sounds like you want some kind of persistent queue in a module that's polled by a setInterval handler
19:18 < tasslehoff> I need to handle a login form and a file upload in an async way. I made it work with xhr requests in javascript, but found out that previous versions of IE/Opera don't have FormHandler. Now I'm trying to figure out what to use instead. Any advice on this one?
19:18 < niggler> othiym23 but given the nature of the problem it makes more sense to rework the interface
19:18 < tasslehoff> still a web rookie, so I don't even know what to google :)
19:19 < cellvia> othiym23:  i started messing with a persistent queue, but i lose all the var scope in the queue and things get messy really fast :(  any suggestions?
19:19 < othiym23> cellvia: each setTimeout is associated with a libuv handle, which needs to get scanned each time through the event loop to see if any of the handles are ready to be processed
19:20 < cellvia> niggler what do you mea by wrap the request
19:20 < aettinger> deoxxa: which reseller did you use?
19:20 < Tixz> How can I control the flow of a request in Express with middleware? I specifically want to change the request to another route while parsing variables in the req object 
19:20 < othiym23> cellvia: sure, wrap the request details up in a closure / use Function.bind to put the handler on the scope still bound to the correct object
19:20 < cellvia> i cant hammer the resource with that many requests niggler
19:20 < cellvia> its not me that cant handle the many requests its the resource
19:20 < othiym23> niggler: still gonna need some kind of adapter layer between the source of the API requests and the API endpoint
19:21 < othiym23> dealing with API limits sux
19:21 < cellvia> tell me about it, been bashing my head into my screen
19:22 < cellvia> ok othiym i will try the persistent queue again
19:22 < cellvia> ive got it down to 2000 timeouts 
19:22 < cellvia> btu thats ridiculous
19:22 < othiym23> so if you add obbject.method.bind(object, arg1, arg2) onto the queue, it will evaluate in the correct context when you pop it off the queue
19:22 < cellvia> i'll see how easy it is to bind the context
19:22 < cellvia> hrm
19:23 < cellvia> cool
19:23 < othiym23> wehre arg1...argX are the arguments you want to be passed to the method at evaluation time
19:23 < cellvia> let me see if i can get that right
19:23 < cellvia> right
19:23 < cellvia> bind is the shit
19:23 < othiym23> sure is, I use it allll over the place in my code
19:23 < cellvia> bind is what make me love javascript
19:23 < cellvia> brb
19:27 < cellvia> man thats so clver i didnt even think of making the queue a bunch of functions
19:27 < cellvia> i was trying to queue one single variable
19:27 < cellvia> the url
19:33 < generalissimo> is anybody using connect-assets?
19:34 < generalissimo> and if so, do you know how to do cache busting with it?
19:38 < CoverSlide> doesn't it watch your files?
19:39 < CoverSlide> and use .static for serving?
19:39 < CoverSlide> and .static uses ETags right?
19:41 < Fike_> getting "RangeError: Maximum call stack size exceeded" within a second of launching my script
19:41 < Fike_> after it connects to the socket :P
19:41 < Fike_>    this.socket.on("data", function(data) {
19:41 < Fike_>         this.emit("data", data.toString().split("\r\n")[0]);
19:41 < Fike_>     })
19:42 < Fike_>     this.addListener("data", function(data) {
19:42 < Fike_>         console.log(data)
19:42 < Fike_>     })
19:44 < CoverSlide> Fike_: you're using this wrong
19:45 < CoverSlide> Fike_: inside the callback, this refers back to this.sockets
19:45 < Fike_> probably am
19:45 < Fike_> oh.
19:45 < Fike_> I'll use bind
19:45 < CoverSlide> Fike_: you can bind 
19:45 < CoverSlide> yeah
19:45 < Fike_> on the function :P
19:45 < Fike_> missed that
19:45 < Fike_> one second
19:45 < Fike_> sweet
19:46 < Fike_> works like a charm
19:46 < Fike_> I have a connect function, but all the data processing gets done in the constructor :P
19:47 < Fike_> CoverSlide: switch statement vs multiple if statements
19:47 < Fike_> what's your opinion?
19:47 < CoverSlide> use the right tool for the right job
19:48 < cellvia> bind ftw!
19:48 < cellvia> looks like i will be able to entirely avoid using timeout and setinterval on my queue
19:49 < cellvia> thank you bind (and othiym23 ;)
19:50 < Fike_> hmm
19:50 < Fike_> guess I need to make some regexs for this
19:50  * Fike_ dreads it
19:54 < gotwig> any advantages of a CMS that is using nodeJSß
19:54 < gotwig> *?
19:54 < AAA_awright> gotwig: What are you looking for?
19:55 < gotwig> AAA_awright: I want to see, if its intelligent to choose a CMS that uses nodeJS
19:55 < EyePulp> gotwig: no inherent advantage.
19:55 < AAA_awright> Maybe even a disadvantage
19:55 < gotwig> I think there are going to be a lot of problems
19:55 < gotwig> but it is so call..
19:55 < AAA_awright> Though, a CMS is usually I/O bound, and Node.js works really well for that
19:55  * gotwig does not really like apache
19:56 < gotwig> I have found www.nodize.com
19:56 < AAA_awright> gotwig: Most people here use Nginx, as I do
19:56 < EyePulp> gotwig: unless you have a lot of ppl on staff using node already, or other reasons to choose it, there's nothing inherently "better" about node as relates to a CMS
19:56 < gildean> EyePulp: except that you can do almost all of the work in one language
19:56 < gotwig> I just wanna do a nice little side with fast processing
19:56 < gildean> which imo is a big bonus
19:56 < gotwig> and learn nodeJS of course
19:56 < gotwig> *site
19:57 < EyePulp> gildean: that's primarily valuable for the developers, not the users of a system.
19:57 < gotwig> have anyone heard of nodize?
19:57 < gildean> EyePulp: that is true
19:57 < gildean> EyePulp: still an advantage from devs viewpoint
19:58 < othiym23> node-mongodb-native, I hate you so so so much
19:58 < AAA_awright> othiym23: Mongolian
19:58 < othiym23> you exist seemingly to make my life hard
19:58 < AAA_awright> That exists to make life awesome
19:58 < CoverSlide> AAA_awright: hey hey no need to be racist
19:58 < othiym23> AAA_awright: I have to instrument this son of a bitch because so many of YOU PEOPLE use it in your production servers
19:58 < gotwig> hm, nodize support a library, which offers mysql support
19:58 < gildean> othiym23: why not use something like mongojs etc.
19:58 < AAA_awright> :p
19:58 < EyePulp> othiym23: heh - I tend to hang out inside mongoose and not hit the native driver directly.
19:58 < gotwig> so easy to set up, as it seems. At least localy it runs quite well
19:59 < gotwig> except for the major bugs, but on nodester I get into trouble
19:59 < AAA_awright> gotwig: http://magnode.org/ is mine
19:59 < othiym23> sure, but about half of the beta testers for my product use node-mongodb-native so I have to instrument it to collect timing and other profiling-related statistics
19:59 < CoverSlide> "runs quite well except for the major bugs"
19:59 < AAA_awright> And I swear I had that name long before Node.js existed
20:00 < gotwig> AAA_awright: like, you made it ?
20:00 < AAA_awright> Yes
20:00 < gotwig> cool
20:00 < AAA_awright> I'd really appreciate feedback, if you want to try installing it
20:01 < AAA_awright> It's a bit rough for most usage though
20:01 < othiym23> on the plus side, if I ever figure this out, I won't have to instrument any of the other MongoDB drivers, because almost all of them piggyback on node-mongodb-native
20:01 < gotwig> AAA_awright: you sure know, that there are quite many of these things out for nodeJS. and many are outdated
20:01 < gotwig> calip.so is somehow down? it was the most popular one(?)
20:01 < gotwig> the thing is, I dont want to make my hands dirty
20:01 < AAA_awright> Most people who want to design a content management system don't have a very coherent mental model of what content is
20:01 < gotwig> I know how to "hack" and "script", but I dont want to do it all the time
20:02  * gotwig is a linux nerd
20:02 < AAA_awright> More than their target audience maybe but I contend that's not enough
20:02 < gotwig> AAA_awright: I am going to take a look at that beauty ;P thanks
20:03 < AAA_awright> gotwig: Keep me posted on what you think, or if you have any troubles
20:03 < AAA_awright> I'm highly invested in making it easy to use
20:03 < gildean> AAA_awright: isn't content the one string you parse with eval()
20:03 < gotwig> AAA_awright: do you know about something like htaccess for nodeJS, btw xD?
20:04 < AAA_awright> gotwig: Node.js is just an I/O framework, not a server as such
20:04 < AAA_awright> So idk what you're asking
20:04 < gildean> gotwig: what are trying to accomplish?
20:04 < gotwig> well, you can use nodeJS as an alternative to apache xD
20:04 < AAA_awright> Not really?
20:04 < AAA_awright> It's not a web server by itself
20:04 < AAA_awright> not a web server /per se/
20:05 < EyePulp> gotwig: you can, but you shouldn't
20:05 < EyePulp> You can also lay on railroad tracks and take a nap.
20:05 < AAA_awright> Usually when Node.js applications need their own web server they rely on Nginx
20:05 < cellvia> ok othiym23 ... next question:  is queueing up 10,000 bound functions too much?
20:05 < cellvia> make that 20,000
20:06 < cellvia> no sorry, far more than that
20:06 < gotwig> AAA_awright: so, does your thing use Nginx?
20:06 < CoverSlide> as long as that queue remains stable
20:06 < gotwig> why dont they use apache, in combination to nodeJS?
20:06 < othiym23> cellvia: that's probably a few megs of RAM all on its own
20:06 < AAA_awright> gotwig: It's load-balanced with Nginx, yes
20:06 < AAA_awright> And the images are served with Nginx
20:06 < AAA_awright> and other static stuff
20:06 < othiym23> but it's only a reference to the function, a closure, and whatever arguments you have, so it's not like it's going to break Node
20:06 < CoverSlide> if it continually grows you may be in trouble
20:07 < cellvia> it contiually grows but it decreases as the requests succeed
20:07 < othiym23> cellvia: you probably want to look at using an EventEmitter / stream to deal with that
20:07 < cellvia> but the requests succeed far far slower than they are created
20:07 < cellvia> i already am :/
20:07 < othiym23> cellvia: you might be able to save some space by boiling everything down to just the state needed to make the request and enqueueing that
20:07 < cellvia> just lots of requests per chunk
20:07 < cellvia> hmm
20:08 < cellvia> interesting idea
20:08 < othiym23> cellvia: you might also want to think about using some kind of Redis-based pubsub
20:08 < gotwig> again
20:08 < gotwig> why dont the systems use apache in combination
20:08 < othiym23> that has two advantages: one, Redis is space-efficient for storing lots of things, and two, there's an easy story for getting your job queue persisted in case of failures
20:08 < cellvia> nooo.... i dont want to have to do pubsub just for this lame ass API *whines*
20:09 < othiym23> cellvia: well the alternative is just to try queueing up thousands of requests and seeing how Node deals
20:09 < othiym23> my guess is that it'll be fine, but you're going to lose all those requests if your server crashes for whatever reason
20:09 < AAA_awright> gotwig: Apache is threaded, instead of evented
20:10 < AAA_awright> It doesn't pair well with event loop systems
20:10 < AAA_awright> Like Node.js
20:11 < defunctzombie> runningskull: yes, depending on what you had happen
20:11 < runningskull> what do you mean?
20:11 < defunctzombie> you most likely want to check your ulimit stuff
20:12 < runningskull> it's capped at 1024
20:12 < defunctzombie> you probably want to up that then
20:12 < runningskull> hmm - ok. so that's a normal thing to see in node?
20:12 < gotwig> #building-your-own-cms: https://groups.google.com/forum/?fromgroups=#!topic/nodejs/6Cqa9waVAIY
20:12 < defunctzombie> what type of process is it?
20:12 < runningskull> for instance my python processes have ~10
20:12 < runningskull> web server + job processor
20:12 < defunctzombie> well, if you have lots of concurrents, then yes, it would be very normal
20:13 < AAA_awright> gotwig: That's not really a complete CMS more like a content editor
20:13 < runningskull> hmm
20:13 < defunctzombie> I forget what the default is for inbound connection limit (or if there is even one)
20:13 < niggler> anyone have a ps3?
20:13 < gotwig> niggler: my mum
20:13 < defunctzombie> also, if you are opening file handles but not closing them that would be something to look into
20:13 < othiym23> niggler: I do I do
20:13 < othiym23> I use it to not play all kinds of games with all the free time I don't have
20:13 < defunctzombie> not sure if your web process is doing that or not
20:14 < gotwig> well, the PS3® is not nodeJS friendly I guess
20:14 < cellvia> othiym23:  i think i will rock node for this, losing all the requests is ok, its a process where basically if i even lose 1 i have to restart everything
20:14 < niggler> well i use it to watch movies
20:14 < gotwig> no linux or other OS's - no fun intended
20:14 < runningskull> i'm looking into that now. we _shouldn't_ be, but who knows
20:14 < niggler> im tired of using this ps3 media server -- java based ><
20:14 < niggler> wondering if anyone tried putting together a nodejs version
20:14 < othiym23> niggler: you so so so do not want to write a DLNA server
20:14 < othiym23> do not even think about it
20:14 < defunctzombie> if you suspect that you actually have that many inbound connections then I am not surprised
20:15 < niggler> that's the phrase i was looking for -- DLNA
20:15 < jrajav> niggler: Is there something wrong with it besides being written in a language you have an irrational fear of?
20:15 < gotwig> AAA_awright: do you know that you got a few 404 errors on your website? magnode
20:15 < defunctzombie> the 1024 ulimit is conservative really for high load
20:15 < othiym23> your world will be pain exponentially and permutationally combined
20:15 < AAA_awright> gotwig: Yeah
20:15 < defunctzombie> and you will want to raise it
20:15 < AAA_awright> Not very sightly, I should fix it
20:15 < niggler> jrajav every time i go through an update in the mac something breaks with java
20:15  * gotwig is afk
20:15 < othiym23> I know a group of devs who had to write a DLNA implementation for a music player, and it was a quagmire of "standards" bullshit and interminable special-casing
20:15 < jrajav> niggler: Fair point
20:16 < othiym23> so: don't write a DLNA server, get a NAS that supports the PS3
20:16 < othiym23> I like my ReadyNAS
20:16 < jrajav> niggler: Aside from that, I know the software you're referring to, and it works fine. It's also complex and solves a very ugly problem. I'd be surprised if anyone could make a good, competitive alternative
20:17 < niggler> i blame java moreso than the program
20:17 < jrajav> niggler: As someone else said, you don't want to write a DLNA server. You also don't want to figure out how the hell to get the PS3 to actually accept video formats
20:17 < CoverSlide> java java jing jing jing!
20:17 < jrajav> Yeah
20:18 < niggler> lol https://github.com/SamDecrock/DLNA-remote
20:19 < niggler> maybe i haven't been paying as much attention before, but nowadays im afraid to do any sort of software update on osx and especially afraid to work with java on osx
20:21 < tnorris> does the node build process automatically use the maximum number of cores?
20:22 < Hotroot> tnorris: I'm pretty sure the install guide says you have to manually specify that
20:23 < Hotroot> tnorris: "You can really speed up building process by adding -j argument with a number usually approximately equals number of cores plus one, somake -j 3 would be appropriate for dual-core processor."
20:23 < niggler> the arguments are passed to make?
20:23 < tnorris> Hotroot: heh, thanks. just found that.
20:25 < tnorris> Hotroot: awesome. now with that I can build v0.8.14 from scratch in 40 sec.
20:26 < Hotroot> tnorris: Yeah, really helps =)
20:28 < harrisonm> Hotroot: thanks
20:31 < Hotroot> Blegh, so many problems with optimizing express. Where are the caching features? Can I not get socket.io to gzip it's js file?
20:33 < tjholowaychuk> ? socket.io != express
20:33 < tjholowaychuk> haha
20:33 < tjholowaychuk> and caching is highly app-specific
20:33 < Hotroot> I know, but I'm using it with express
20:34 < Hotroot> Socket.io doesn't gzip or cache its .js file. 
20:34 < nicholasf> yeh, my car is totally problematic because the tire jack I keep in the boot won't fit it
20:34 < nicholasf> totally know what you mean Hotroot
20:34 < tjholowaychuk> Hotroot i think you can configure it to serve the js through other means
20:34 < tjholowaychuk> then express can do the http caching dance
20:35 < Hotroot> nicholasf: I phrased it badly, I'm annoyed at both
20:36 < nicholasf> Hotroot: fair enough :)
20:36 < Hotroot> tjholowaychuk: I can't figure out how express does caching for it's own files. Static sure doesn't seem to. 
20:36 < tjholowaychuk> Hotroot sure it does
20:36 < tjholowaychuk> not in-memory caching if that's what you're looking for
20:36 < tjholowaychuk> that's a bad idea though
20:36 < Hotroot> I'm doing a chrome audit, it's not caching
20:36 < tjholowaychuk> did you set a maxage?
20:37 < Hotroot> Probably not
20:37 < tjholowaychuk> http://www.senchalabs.org/connect/static.html
20:37 < ericelliott> Hotroot: it might help you solve the problems faster if you step back and stop blaming the tools.
20:38 < ericelliott> Hotroot: I think that bias is making you overlook the solutions. =)
20:39 < Hotroot> That's a good point, but that's not how I work, I look for solutions regardless
20:39 < defunctzombie> Hotroot: express is meant to be lightweight
20:41 < defunctzombie> do you really have such massive userflow that you are concerned about optimizing and gzipping everything? You might be surprised but much of it matters less than you think
20:42 <@mbalho> uncompressed responses? in MY server? its more practical than you think
20:42 < ericelliott> defunctzombie: I'm just gonna disagree with that and call it a day. =)
20:42 < othiym23> niggler: around when Mountain Lion came out, the version of Java bundled with it had a bunch of problems, but the current bundled version is problem free AFAIK
20:44 < garbagecollectio> in 
20:44 < garbagecollectio> mongodb
20:45 < garbagecollectio> what value would i need to give  a key to get all of that key
20:45 < garbagecollectio> all results
20:51 < Hotroot1> Weird, Chrome was complaining that I linked to a JS file before the CSS file? The CSS file comes before it.
20:59 < Hotroot1> Also weird is I do if (io.sockets.clients(this.id)) to check if a room with that id exists. It's always true. It console.logs as nothing 
21:00 < gildean> Hotroot1: in where are you referencing to this?
21:00 < gildean> this is always the object in which you are
21:00 < Hotroot1> gildean: The object is a poker table
21:01 < Hotroot1> I assign it a uuid to turn it into a socket.io room
21:01 < Hotroot1> But I'm paranoid so I do a collision check
21:01 < gildean> Hotroot1: yeah, but if you do the check inside a function that's inside the object, then 'this' is the function
21:01 < gildean> not the object
21:01 < Hotroot1> It's a prototyped method
21:02 < garbagecollectio> yo
21:02 < Hotroot1> References to this still work
21:02 < Hotroot1> Going to switch my method though to a "in" io.sockets.manager.rooms
21:03 < Hotroot1> There we go, that worked
21:03 < garbagecollectio> KPIModel.find({'account': req.params.acct, 'ts': {$gte: start, $lt: end}}
21:03 < matbee> Hey guys, hope you don't ban me. Just need to spam a url for a sec. We're part of the Global Startup Battle. BUT !! I wrote the shit in Node.JS, like boss.
21:03 < matbee> Soooo could you vote for us/node? ;D
21:03 < garbagecollectio> what can i pass into account as a value to have it look for all accounts
21:04 < matbee> http://bit.ly/Q9uCh9 PLS2NOTBAD
21:04 < matbee> s/BAN
21:05 < mscdex> >> var nodejs = { rules: true };
21:05 < purr> mscdex: undefined
21:05 < Warpten> I feel stupid. printf's hex stuff with padded chars is %[pad number][max length][writing type], right ?
21:06 < Hotroot1> matbee: It's not the spam that's so bad, but the vote page is a facebook app that wants a like before you can access it. That's disgusting.
21:06 < clever> Warpten: looks right, 0x%02x would give 0x0f
21:06 < mscdex> nodebook!
21:06 < Warpten> clever: then, node-sprintf fails at understanding %03X
21:06 < mscdex> a social network for node developers!
21:07 < clever> Warpten: what does it put out?
21:07 < Warpten> o, wait a sec
21:07 < Warpten> riight
21:07 < Warpten> (0x03X) *brainbug*
21:07 < Warpten> neeevermind
21:07 < clever> sounds like it didnt accept the padding char
21:07 < Warpten> nah, i just forgot the %
21:08 < Warpten> :>
21:08 < clever> oh, lol
21:08 < matbee> Hotroot1, trust me, i know
21:08 < matbee> Hotroot1, I don't know wtf they were thinking.
21:09 < matbee> "offerpop" can suck the big one.
21:09 < matbee> the toe, that is.
21:10 < garbagecollectio> can someone tell me
21:11 < ericelliott> mscdex: There's already a social network for node developers. It's called geekli.st
21:11 < garbagecollectio> KPIModel.find({'account': req.params.acct, 'ts': {$gte: start, $lt: end}}
21:11 < garbagecollectio> what can i pass into account to have it select all accounts
21:16 < chapel> garbagecollectio: don't put in account
21:16 < garbagecollectio> i know but say i have to
21:16 < chapel> KPIModel.find({ts: {$gte: start, $lt: end}})
21:19 < garbagecollectio> chape;
21:19 < garbagecollectio> chapel
21:19 < garbagecollectio> but i need to keep acocount in
21:22 < drudge> garbagecollectio: leaving out the account will give you all accounts, putting a value there filters
21:22 < garbagecollectio> but i need to keep it in
21:22 < garbagecollectio> what value can i pass that is all values
21:22 < garbagecollectio> like *
21:22 < drudge> nothing, you leave it out
21:23 < drudge> why do you "need to keep it in"
21:24 < drudge> like if there isn't an account you want to select them all?
21:25 < chapel> garbagecollectio: explain why you think you need account in there?
21:35 < garbagecollectio> drudge
21:36 < garbagecollectio> cause the systems already production and they are asking for that change
21:37 < drudge> ok but you aren't answering the question, why do you need to pass something as account to the query if you want all users?
21:37 < ryanrolds_w> Christ I wish non-SmartOS machines weren't 2nd class citizens on Joyent.
21:37 < garbagecollectio> drudge cause its in production
21:37 < garbagecollectio> something has to be passed
21:38 < garbagecollectio> drudge if i pass nothing in the param
21:38 < garbagecollectio> it returns nothing
21:38 < garbagecollectio> app.get('/read/:acct/:from/:to'
21:38 < garbagecollectio> KPIModel.find({'account': req.params.acct, 'ts': {$gte: start, $lt: end}}, function (err, data) {
21:38 < garbagecollectio> if i put nothing in that acct param
21:39 < drudge> garbagecollectio: so if req.params.acct you want to show all users?
21:39 < drudge> req.params.acct is empty*
21:40 < garbagecollectio> within ts yeah
21:40 < garbagecollectio> i dont want it to restrict 
21:41 < drudge> garbagecollectio: the query is just a js obj, so you can conditionally add account like https://gist.github.com/0ec01566a19a05243908
21:42 < chapel> drudge: yeah was going to recommend
21:42 < chapel> but it sounds like he doesn't want to change the code
21:42 < garbagecollectio> right
21:42 < chapel> which is impossible
21:42 < drudge> your code is broken
21:42 < chapel> yes
21:43 < garbagecollectio> my code is not broken
21:43 < garbagecollectio> why do u think its "broken"
21:43 < drudge> it is, you are passing a filter when you don't want one
21:44 < garbagecollectio> well new requirement
21:44 < garbagecollectio> they originally wanted a filter
21:44 < garbagecollectio> son
21:46 < chapel> garbagecollectio: who is son?
21:46 < chapel> garbagecollectio: it is an easy change
21:46 < garbagecollectio> dude u dont get it
21:46 <@mbalho> could be a typo of json, could be asserting fathership
21:46 < chapel> drudge: don't worry about garbagecollectio he is an anoying twat and constantly gets kicked
21:47 <@mbalho> why are all of you people such dicks all the time its crazy
21:47 < chapel> mbalho: huh?
21:47 < drudge> haha
21:48 < garbagecollectio> chapel
21:48 < garbagecollectio> dont be mean and please apologize
21:48 < garbagecollectio> i am asking ur trolling ass once and only once
21:48 < chapel> garbagecollectio: well you are annoying, but twat is harsh so sorry about calling you that
21:48 < chapel> and you constantly get kicked
21:48 < garbagecollectio> no, one time?
21:48 < garbagecollectio> is not constantly
21:48 < drudge> garbagecollectio: i guess i don't understand. it seems like you need a code change. if you can't change it, i don't know how you are going to make accommodations for the requirement
21:48 < garbagecollectio> and it wasn't node.js room
21:48 < chapel> twice now
21:49 < garbagecollectio> nope
21:49 < garbagecollectio> once in javascript
21:49 < garbagecollectio> for asking questions
21:49 < garbagecollectio> drudge, thanks for the help
21:49 < chapel> garbagecollectio: none the less, you ignore peoples help, and complain and yell and make noise
21:49 <@mbalho> i would like to recommend this conversation take place in another venue more suitable for bickering
21:49 < chapel> mbalho: don't worry about me
21:52 < nostriluu> wow
21:53 < othiym23> I have a super-basic Sinon question
21:54 < othiym23> how do I stub a function so that it invokes a callback with a specific function the first time it's called, but with something else on subsequent calls?
21:54 < brianc1> is there a module for piping multiple readable streams to a single writable stream in order so you can pipe multiple files to the same output w/o them getting intermingled?
21:54 < othiym23> is it up to me to track the state by my lonesome?
21:54 <@mbalho> othiym23: theres EventEmitter.prototype.once
21:54 <@mbalho> othiym23: but dunno if the lib you mentioend uses EE
21:55 < samholmes> Are there any good modules/middleware for collecting data on page views and browsing sessions?
21:55 < othiym23> no, this is pure callbacks, mbalho
21:55 <@mbalho> brianc1: mux-demux
21:55 <@mbalho> brianc1: assuming you wanna demux on the receiving end
21:56 < brianc1> no, i want to send multiple files to the browser w/ content-encoding chunked
21:56 < othiym23> it's not a ton of code to do it myself, but this is the sort of thing that (Ruby) mocha and JMock offer and I wondered if it were part of the standard Sinon API
21:56 < brianc1> like sending 3 separate javascript assets down 
21:56 < brianc1> in 1 response
21:56 <@mbalho> brianc1: use a multipart response
21:57 < brianc1> yeah, that
21:57 <@mbalho> brianc1: or a stateless protocol and roll your own mux demux
21:57 < brianc1> but i need to fully pipe 1 file down before I can pipe the next down
21:57 <@mbalho> reading multipart data in browser would probably suck though
21:57 <@mbalho> brianc1: just make 3 requests 
21:57 <@mbalho> brianc1: RTT improves after the first one cause dns is already resolved
21:58 < brianc1> i just wanna do this: https://gist.github.com/4128135
21:59 <@mbalho> did you read the mux demux readme
21:59 < brianc1> yeah, it's like so hard to read it's obfuscated 
22:00 <@mbalho> brianc1: if you arent familiar with the stream api from node core this is a good intro http://github.com/substack/stream-handbook
22:00 < brianc1> I am quite familiar with it
22:01 < garbagecollectio> chapel: yes  i do
22:01 < garbagecollectio> chapel: but not everyone can help so it has to be ignored
22:01 <@mbalho> garbagecollectio: can you argue in another channel please
22:02 < garbagecollectio> mbalho: don't worry about me
22:02 <@mbalho> garbagecollectio: im not, im just telling you to move personal arguments to another channel
22:02 < garbagecollectio> mbalho: don't worry about me, notice i was repsonding to someone else's personal attack on me
22:03 < garbagecollectio> i have never made an 'attack'
22:03 < othiym23> Sinon is good at making me feel like I'm using it wrong
22:03 < brianc1> mbalho: so is your final answer than muxdemux can do what I want?
22:03 < othiym23> or, rather, like I don't actually need it
22:03 <@mbalho> brianc1: yea dominictarr (the author) might know of a better example code snippet to show you for what you want
22:03 < brianc1> coo
22:04 < othiym23> brianc1: it sorta sounds more like you want to use something like Uglify instead of trying to send the files separately
22:04 < othiym23> or "bundled" using something like muxdemux
22:04 < othiym23> sounds like muxdemux maybe using a truck to pound a nail
22:04 < brianc1> othiym23: kinda, yeah. I want them bundled, piped through gzip, and then down to the browser basically
22:04 <@mbalho> has anyone ported the js zlip to the browser yet?
22:04 < othiym23> brianc1: is it important that it be done on the fly, or could you use something like grunt to bundle them in advance?
22:04 <@mbalho> for streamin gunzipping??
22:05 < othiym23> mbalho: isn't Node's zlib a native binding?
22:05 < brianc1> othiym23: i could and probably SHOULD bundle them before hand. it's just a pain for development to have to rebundle or start some watcher while I'm working
22:05 <@mbalho> i think it only relies on openssl
22:05 < brianc1> othiym23: and then remember to bundle them up when i deploy, etc
22:05 <@mbalho> but its 100% js otherwise
22:06 < brianc1> I do believe I'm way over-thinking this
22:06 < brianc1> I'll just put like 20 script tags on the page and figure out a nicer asset pipeline in the future
22:06 < othiym23> brianc: sounds like what you want is Rails's asset pipeline
22:07 < brianc1> othiym23: possibly something similar 
22:07 < othiym23> I started putting together an abstract asset pipeline a few months ago but ran out of time before I got it in releasable condition
22:07 <@mbalho> brianc1: a module that does streaming asset pipelining would be cool though
22:07 < aettinger> gunzipping...sounds like a new sport involving rifles and zip lines
22:08 < brianc1> othiym23: in development if I call 'index.js' just pipe 1 file after another into the response. in production on first request cache it all into a file & serve it static
22:08 < othiym23> but something you can look at is writing some middleware for whatever framework you're using (Express, right?) that will bundle'n'gzip your JS in dev mode and serve a static bundle in prod mode
22:08 < othiym23> it's about an afternoon's worth of work, modulo learning the Node guts you need to whang it all together
22:09 < spion_> npm search queries the registry every time?
22:09 < othiym23> mbalho: crabguy was working on something like that for a while, I've done some work on it, I know at least one person who's done it for a proprietary code base
22:09 < brianc1> othiym23: yeah I was thinking of that, I'd just rather use another one if one was written
22:09 < othiym23> there are a lot of weird edge cases you don't think about until you start trying to do it
22:10 < brianc1> yeah there are issues with having errors happen 1/2 through your piping of assets
22:10 < othiym23> brianc1: about the closest I can think of is forking out to grunt, which will be slow but not super-slow
22:10 < matbee> So if you guys don't mind allowing lame FB apps, my team has a node.js project in the global startup battle. You couuuuld vote? ;) http://bit.ly/Q9uCh9
22:10 < brianc1> and also you don't really know the etag and stuff easily without doing a bunch of fstating of all the assets involved
22:10 < othiym23> fork out, wait for grunt to finish, and then stream the resulting file and passing it through oppressor or whatever
22:11 < othiym23> spion_: yup, it sure does
22:11 < brianc1> and handling all the if-modified-since and setting cache expire headers etc etc etc
22:11 < othiym23> brianc1: oppressor will handle a lot of that crud for you once you have the minified file
22:12 < brianc1> cool never seen oppressor b4
22:12 < spion_> othiym23, hmm okay. thanks. I'm toying around with the idea of creating a "npm-search" command
22:13 < othiym23> brianc1: sounds like you want to use oppressor with substack's fork of filed so all the headers get set correctly
22:13 < spion_> will treat keywords differently; and you'll be able to put in factors for recency, number of downloads and number of "stars"
22:13 < brianc1> othiym23: yeah, that solves the serving static assets part
22:14 < brianc1> othiym23: i believe a lot of that is also within express with it's express.static and express.compress or whatever middleware
22:14 < othiym23> brianc1: if you're up for an adventure, you can look at the grunt implementation to see how the minify task is implemented and lift whatever bits make the most sense to you
22:14 < othiym23> brianc1: probably, there's a lot of good stuff hidden in the guts of Express
22:15 < othiym23> and also some not so good stuff ;)
22:15 < brianc1> othiym23: got so many adventures on my map already, not nearly enough time to follow them all. :(
22:15 < brianc1> othiym23: i have plenty of bugs on node-postgres i need to stomp out before going down another rabbit hole. this was just for some client work so I wanted to see if there's a quick fix. 
22:16 < brianc1> or not a quick fix but something that was already in place. what I have in the app is working, it's just not reusable. it has all the paths to the various bundles hard-coded
22:16 < brianc1> but i do appreciate the discussion. :)
22:19 < brianc1> tnorris: i saw you asking about an issues list
22:19 < brianc1> tnorris: in #github
22:19 < tnorris> brianc1: yeah. i'm trying to help cleanup all the issues in node, but I can't find a way to view all the issues I've commented on for follow up.
22:20 < brianc1> tnorris: I can try add that to githubhub.com if you'd like.  as long as the API gives some decent way to get the info
22:20 < jrajav> github... hub
22:21 < tnorris> brianc1: if you can, that would be freaky fantastic. Was going to look at the API myself, but don't have any experience with it.
22:21 < brianc1> i put it high on the list - i have a few "show stoppers" in the way first, but maybe by the end of the t-day break
22:21 < tnorris> jrajav: yeah. way more useful to keep track of all my stared repos.
22:22 < tnorris> brianc1: sweetness. I will sing your praises if you could get that to happen.
22:23 < brianc1> tnorris: haha awesome - i'll look into it ASAP. Some API things are n+1 so they take impossibly long to do. hopefully this isn't one of them
22:24 < tnorris> brianc1: what I find dumb is that I'm a watcher of a bunch of issues, and can receive updates from them, but can't see them in a list.
22:24 < mscdex> tnorris: it's a conspiracy
22:25 < Netpraw> Maaan i cant do this with https://github.com/justmoon/node-bignum :(
22:25 < mscdex> Warpten: just do it in c++ :-)
22:25 < Warpten> Making it in Cpp would be too easy :(
22:26 < mscdex> well, you're going to have a heck of a time dealing with numbers that large in just javascript
22:26 < tnorris> mscdex: seriously. i'm still pissed that you can't sort activity by type. it's always filled with everyones gist updates.
22:26 < brianc1> tnorris: so you want a list of all issues you are recieving a notification for?
22:26 < tnorris> brianc1: yeah, exactly.
22:26 < mscdex> tnorris: they're busy doing things like changing "github" to their logo ;-)
22:26 < tnorris> lol
22:27 < Warpten> mscdex: I just have to load'em from a Buffer. Have been tampering around with pure javascript bignumber classes but i'm stuck with it
22:28 < mscdex> Warpten: but you still have to perform math on them right?
22:28 < brianc1> tnorris: i think it might be do-able
22:28 < Warpten> This is quite frustrating
22:28 < Warpten> I have to do five openssl dependant calculations, and that's it, the rest is basically only kudos
22:29 < brianc1> tnorris: I'll have to pull down all the notifications and then find which ones are related to issues, then sort those by date or something & show them
22:29 < Warpten> mscdex: yes, just have to invoke five calculuses (not sure about the plural form)
22:29 < mscdex> calculations
22:29 < Warpten> err, right
22:29 < tnorris> Warpten: i'm jumping in the middle here, but have you tried https://github.com/MikeMcl/bignumber.js ?
22:29 < mscdex> IMHO if openssl already has APIs for this stuff, just let it do it
22:30 < mscdex> so much easier and less error prone
22:30 < tnorris> brianc1: mother... ok, but if it's easier to just view issues per repo I'm cool with that.
22:30 < Warpten> tnorris: its almost perfect apart a missing fromBuffer method :(
22:30 < tnorris> Warpten: how do you mean? Buffer conversion should't be too hard.
22:30 < Warpten> just though of it
22:31 < brianc1> tnorris: is not big deal to pull down a large amount of data from the API. it does 100 per page, so you can pull down a few hundred a second. so 2-3 seconds of loading should get a lot of notification data. then I just gotta display it pretty and make information surface from it.  I'll give it a shot anyway.  I'll send you a msg when I make some progress
22:31 < Warpten> But yesterday i was going over justmoon's code and saw there was no cpp for fromBuffer, but the lib still had it
22:31 < Warpten> So i was kind of confused
22:31 < tnorris> Warpten: if the Buffer is just an ascii representation of the number, then Buffer.toString would work.
22:31 < Warpten> Since i never made any node plugin
22:31 < Warpten> its in hex
22:32 < tnorris> Warpten: are any of them decimals or all integers?
22:32 < Warpten> all integers
22:33 < Warpten> It's basically a SRP6 key calculation, and then, i use it to cipher/decipher packets
22:33 < Warpten> using RC4 this time
22:33 < tnorris> whoa, yeah. no idea what that means.
22:34 < tnorris> brianc1: awesome. if you get that working, it will save me a lot of time blowing through issues I've already commented on.
22:34 < brianc1> tnorris: coolnesssss
22:35 < brianc1> tnorris: going to style the commit view a bit more, make it a bit more readable. then make the different activity lists have a "more" button to load more than 1 page of data. then i'll try working on that
22:35 < tnorris> brianc1: awesome. thanks much for your work.
22:36 < brianc1> :thumbsup:
22:42 < mscdex> Warpten: have you tried this?: https://github.com/clipperz/javascript-crypto-library
22:42 < mscdex> it has an SRP implementation
22:43 < Warpten> mscdex: yes
22:43 < Warpten> but
22:43 < Warpten> im not actually making the srp6
22:43 < Warpten> not the whole lot of it, i mean
22:43 < djazz> if anyone's bored... http://djazz.mine.nu/lab/rpi/remote/ http://on.fb.me/SRMUPh
22:44 < Warpten> https://github.com/clipperz/javascript-crypto-library/blob/master/js/Clipperz/Crypto/BigInt.js
22:45 < Warpten> huh
22:45 < matbee> so yeah, vote for my node project! global startup battle!! http://bit.ly/Q9uCh9
22:45 < matbee> ttyl folksies!
22:46 < mscdex> Warpten: there's a newer version of that bigint library here: http://www.leemon.com/crypto/BigInt.js
22:47 < Warpten> I didnt see that
22:47 < Warpten> I'll try it, thanks
22:50 < wankdanker> I am thankful for node.js. :)
22:50 < Zelest> +1
22:52 < mscdex> Warpten: there's also http://silentmatt.com/biginteger/
22:53 < Warpten> Seen it as well
22:53 < Warpten> I kind of abused google in my lookups
22:53 < Warpten> and npmrepo
23:02 < tnorris> piscisaureus_: whoot! down to 16 pages of issues.
23:02 <@piscisaureus_> :-)
23:09 < Industrial> Can't get zeromq installed :( https://gist.github.com/fdbf31d7c34cd1767ae0
23:11 < djazz> https://plus.google.com/113878221242502678865/posts/i84hD68Z4bL :)
23:11 < tnorris> Can anyone confirm if the `process` API is locked?
23:14 < Industrial> Can anyone else get zeromq installed at the moment?
23:14 < Industrial> (the npm module)
23:14 < mscdex> tnorris: it's not password-protected ;-)
23:15 < tnorris> Industrial: failed here.
23:15 < tnorris> mscdex: lol. it just doesn't have a stability index. so was wondering if changes were likely to happen.
23:16 < mscdex> Industrial: the npm package was last updated a year ago
23:16 < mscdex> Industrial: you probably want "zmq" instead
23:17 < mscdex> tnorris: i would assume unstable if it doesn't say
23:17 < tnorris> mscdex: hm, ok. thanks.
23:23 < Industrial> mscdex: woops
23:26 < othiym23> tnorris: a buuuunch of stuff changed in process in 0.8, so I'd assume it's still in flux
23:27 < othiym23> also there are things I'd like to see change in there (I'd like to see the info interface to libuv standardized and made more useful, f'rinstance)
23:28 < tnorris> othiym23: thanks for the info. I'm wondering specifically for https://github.com/joyent/node/issues/1323
23:37 < tnorris> Who was telling me that SlowBuffer is pretty much an Int8Array?
23:38 < othiym23> tnorris: did ryah document what he had in mind for performance.timing anywhere else?
23:38 < othiym23> cuz that's a tantalizing name
23:39 < tnorris> othiym23: not that I can find. looking through mailing list and bugs.
23:40 < tnorris> othiym23: do you think this might have something to do with the current hrtime() ?
23:40 < othiym23> tnorris: I would expect it would be more related to process._activeRequests and process_activeHandles and would be some sort of measurement of process latency
23:41 < othiym23> mostly because that's something I'd really love to have ;)
23:41 < Warpten> Sooo ... https://github.com/MikeMcl/bignumber.js is limited to 1E9 anyway
23:41 < tnorris> othiym23: well then please comment on the bug. I'm trying to help cleanup irrelevant bugs, and bring back old ones that are still of interest.
23:42 < Warpten> Will play around with https://github.com/silentmatt/javascript-biginteger but it lacks doc :|
23:42 < othiym23> tnorris: will do
23:42 < Warpten> Anyway time to sleep
23:42 < Warpten> gn
23:43 < tnorris> mscdex: were you the one that mentioned SlowBuffers are pretty much instances of Int8Array's?
23:57 < Zelest> I'm still confused on how to run nodejs as a webserver seeing I can't make it listen to port 80.. I added a iptables redirect rule, which basically rewrites it to port 3000, which makes it listen to port 3000 on the public IP as well, which is far from what I want..
23:57 < Zelest> How can I make incoming requests on port 80 go to 3000 and still only present port 80 on the public IP?
23:58 < Zelest> or am I forced to use some layer 7 proxy here?
23:58 < tnorris> Zelest: run as root.
23:58 < Zelest> that sounds like very bad practice?
23:58 < tnorris> Zelest: it is, but it's the only way to run on 80.
23:58 < tnorris> (that I know of)
23:59 < tnorris> usually people put nginx or the like in front of it for that reason.
23:59 < Zelest> well, I can fiddle with sysctl and probably change the lowerports restriction.. but still
23:59 < Zelest> yeah
23:59 < Zelest> hence my question regarding a layer 7 proxy ;)
23:59 < tnorris> heh, on your own there.
--- Log closed Thu Nov 22 00:00:02 2012
