--- Log opened Thu Mar 07 00:00:30 2013
00:00 < faceleg|lunch> meta fork
00:01 < cloudbender> NickServ Fixed.  Well, me fixed.  I was using the wrong paxxwd
00:01 < MI6> joyent/libuv: Ben Noordhuis master * dac5a75 : unix: replace volatile cast with ACCESS_ONCE macro (+5 more commits) - http://git.io/cTyGVQ
00:05 < cloudbender> Adobe is asking 49.95 per month for cs6 cloudsuite subscriptions
00:06 < cloudbender> Not sure I like where the cloud is headed.
00:06 < daekano> you're the cloudbender
00:06 < cloudbender> yes, not the cloud-charge-a-bunch-of-money guy
00:07 < niggler> how about standalone
00:07 < daekano> ha
00:07 < cloudbender> I mean, people need to eat, but 600 per year for ten or twelve critical apps (as an example) is alot of bux
00:07 < tylersmith> SaaS has been around for a long time
00:08 < daekano> if you want a bad example of cloud technology, just read up on the SimCity blunder
00:08 < cloudbender> Saas is a good thing.  Handing a software vendor the right to debit your account each month is not.
00:08 < zomg> cloudbender: does that include support or such?
00:08 < zomg> and upgrades?
00:09 < cloudbender> Well, it's adobe.  It took me 1.5 hours on hold and 1 hour with Bangalore to reset my trial id password.
00:09 < zomg> lol
00:09 < zomg> well if you consider how much the full creative suite costs to buy in one shot
00:09 < zomg> I think it looks like a decent deal
00:10 < niggler> better off buying it
00:10 < zomg> Considering you would want to upgrade it once they release the new ones and so on
00:10 < cloudbender> Yes, Adobe is professional grade stuff, I don't expect it to be free.
00:10 < niggler> thats not true zomg
00:10 < niggler> you upgrade when you need to
00:10 < zomg> If you buy the full creative suite it's like 3 400 eur
00:10 < cloudbender> But 600.00 per year to 'subscribe' to one small app is over the top
00:10 < zomg> you get 5 years worth of subscription for that
00:10 < niggler> CS2/3 are still in use
00:11 < niggler> if you buy the creative suite, you don't have to deal with the cloud
00:11 < cloudbender> I will never again pay for the'deluxe' package.
00:11 < zomg> I don't know how well adobe's thingy works
00:11 < niggler> i look at it like this: the creative suite is a good deal in a context where you invoice in a cost-plus manner
00:11 < cloudbender> I did that with embarcadero and got burned.
00:12 < zomg> If we assume it works well then I don't really see the cloud one as a bad deal
00:12 < niggler> you can explicitly break out the cost associated with creative suite instead of having to amortize
00:12 < zomg> though even with upgrades it might start costing more in the long run, since upgrade packages for the creative suite are much cheaper than the whole thing
00:12 < cloudbender> hmmm
00:12 < cloudbender> It's a looming topic for us cloudsters
00:12 < cloudbender> that is, it looms on the horizon, and not too far.
00:13 < zomg> Thankfully I'm only using adobe sw for hobby stuff
00:13 < zomg> so piratebay is my go to store
00:13 < zomg> :P
00:13 < zomg> I sure am not paying that kind of insane sums for something I use only occasionally and just for some silly fiddling
00:14 < zomg> If I ever start making money from say my youtube videos, then I could consider purchasing Premiere for realz.
00:14 < niggler> in college a guy from adobe gave a talk, and someone asked about pirate bay
00:14 < niggler> and the guy's answer was that they don't pursue cases involving college kids because it's through piracy that kids get access to the software 
00:14 < cloudbender> of course
00:14 < niggler> so that, later in life when they are working, they will turn to adobe and pay for it
00:15 < cloudbender> right
00:15 < zomg> niggler: surprisingly reasonable response, I wonder what the higher up suits think about it.. 
00:15 < cloudbender> which tactic is in itself dishonest
00:15 < niggler> the business is interested in maximizing profits
00:15 < niggler> I'm sure its a calculated decision
00:15 < zomg> Yeah
00:15 < zomg> Most of the stuff I buy I have downloaded before
00:16 < zomg> And I most certainly would not buy them if I hadn't used them beforehand
00:16 < niggler> then there's autodesk which explicitly has an academic progrma
00:16 < cloudbender> brb
00:16 < niggler> my favorite zomg is bizspark
00:17 < niggler> they are going after small startups so that they'll use microsoft as they grow up
00:20 < MI6> joyent/node: isaacs created tag v0.8.22 - http://git.io/JtDXIQ
00:26 < MI6> joyent/node: isaacs v0.8 * 9c58125 : blog: Post for v0.8.22 (+3 more commits) - http://git.io/pClM0A
00:29 < othiym23> another day, another two versions of Node
00:30 <@isaacs> :D
00:30 <@isaacs> othiym23: technically they're on different days.
00:30 <@isaacs> othiym23: utc ftw :)
00:30 < othiym23> I only count them as different days if I go to sleep at some point
00:30 < icodeforlove_> lol
00:31 < othiym23> which makes naps and all-nighters problematic, but time is an illusion anyway
00:32 < gynna> http://www.reddit.com/r/AdultDating18/comments/19t7e6/sexi_and_thick_snow_bunny_atlantaga_airport/
00:33 < bnoordhuis> porn spam :(
00:33 < tjfontaine> bnoordhuis: was it any good?
00:33 < bnoordhuis> i don't know yet
00:33 < d2dchat> does anyone have experience with node proxy and express js? I'm specifically having issues with the bodyParser
00:33 < tylersmith> everybody loves them thick georgian snow bunnies
00:34 < d2dchat> there is a ticket for how to use them at the same time but I haven't been able to implement their buffer suggestions
00:38 < mscdex> node.js rules!
00:39 < ChrisPartridge> +1
00:40 < faceleg|work> +1
00:42 < havvy> +0
00:44 < ChrisPartridge> get 'im boys
00:45 < jrdn> omgomgomg why can't i even do a find on a mongo collection.. i get no errors, and my callbacks aren't getting set
00:45 < jrdn> so frustrating
00:50 < AlexMax> Question.  How do I test to see if two buffers contain the same data.....say for an assert?
00:50 < euoia> resume() on a stream seems to now cause the error "Cannot switch to old mode now"
00:51 < othiym23> isaacs: I have a CA cert + certificate signed with that that work fine with 0.8.x but throw a UNABLE_TO_VERIFY_LEAF_SIGNATURE in 0.9.12 -- you have any pointers where I should start looking to figure out what I'm doing wrong?
00:51 < jrdn> omgomgomgomgomgomg stupid me.
00:52 < OliverJAsh> can anyone recommend any presentations/talks about thin server/fat client with things like backbone and a rest api. i'm interested in learning more about this approach – not how to do it but whether it's a good approach or whether mvc should be on the server.
00:52 < ChrisPartridge> jrdn: by default it doesn't confirm writes, afaik
00:53 < jrdn> i know… i was able to write
00:53 < jrdn> i figured it out :P
00:53 < jrdn> silly async
00:53 < jrdn> i was closing the db before my callback would get called
00:53 < ChrisPartridge> silly you :P
00:55 < ChrisPartridge> OliverJAsh: pretty broad topic, i'd suggest starting here: https://github.com/addyosmani/backbone-fundamentals for backbone
00:58 < cloudbender> played with 'stackless python' the other day
01:01 < niggler> are there any stacks in stack less python cloudbender ?
01:01 < MI6> joyent/libuv: Ben Noordhuis master * 8fbe433 : unix: please valgrind, free memory in threadpool.c - http://git.io/h7XJJw
01:01 < josieliang> does any body know how to use mariasql synchronously?
01:02 < cloudbender> The general idea is that'stackless python does 'not rely on the c call stack'.  Did not dig too deeply.
01:05 < mscdex> josieliang: you can't
01:05 < josieliang> I see. 
01:05 < othiym23> is there anyone here who feels like they're more than a quarter way towards being an expert at OpenSSL?
01:05 < mscdex> othiym23: what's your question?
01:05 < niggler> mscdex is 3/4
01:05 < othiym23> https://gist.github.com/othiym23/5104626 has a chunk of Makefile I'm using to make a CA cert and and a cert I sign it with
01:06 < othiym23> and node 0.8 consumes it with no problems, but 0.9.12 coughs up a hairball on the request in the second hunk of the gist
01:06 < othiym23> lemme append the stacktrace onto that
01:07 < mscdex> othiym23: did you file an issue?
01:07 < othiym23> mscdex: I will once I'm reasonably sure it's not total pilot error
01:09 < othiym23> mscdex: nothing looks out of the ordinary in how I'm generating the certs?
01:09 < othiym23> my openssl.conf is about as stripped down as I could make it
01:10 < mscdex> not that i can tell
01:10 < othiym23> K, thanks for looking it over
01:12 < spion> oh, no more 0.10 milestone on github.
01:12  * spion checks blog
01:12 < spion> yup, this is the RC
01:12 < cloudbender> yay
01:13 < cloudbender> bravo, really.
01:13 < cloudbender> what a job.
01:13 < spion> I'm going to enjoy the new streams.
01:13 < spion> xD
01:13 < cloudbender> lol hairball
01:15 < cloudbender> tried  'Eve Online' the other day.
01:15 < cloudbender> my machine is not powerful enough.
01:16 < niggler> at least your machine isn't howling like a banshee
01:18 < cloudbender> oooo, good point.  I need to see how node fares on his machine.
01:19 < cloudbender> It's an old pentium4 2.4ghz, but it's an intel board and will become my nixn boxn
01:22 < ChrisPartridge> eww p4
01:23 < faceleg|work> OliverJAsh: I'd recommend skipping straight to AngularJS
01:24 < Orbitrix> http://www.youtube.com/embed/M29ATbT8eyo
01:24 < Orbitrix> cannot wait
01:24 < Orbitrix> for this documentary
01:24 < Orbitrix> =D
01:24 < Orbitrix> whoop, wrong channel lol
01:25 < Orbitrix> still, check it out
01:27 < niggler> faceleg|work is there any test framework built off of angular?
01:28 < darjeeling> can I get crypto example with rsa? ( public key , private key )
01:30 < cloudbender> 359ms not bad, same as my laptop
01:34 < othiym23> mscdex: it just looks like 0.9 actually verifies the certificate chain
01:37 < othiym23> mscdex: yep, when I pass in the CA cert, it switches to complaining about there being a self-signed certificate in the certificate chain
01:37 < othiym23> which, fair enough, but 0.8 doesn't do any of this stuff
01:37 < othiym23> point in indutny / 0.9's favor
01:39 <@konobi> isaacs: ping
01:44 < ChrisPartridge> darjeeling: Look at cryto Sign and Verify in the docs
01:52 < AphelionZ> Can anybody shed some light on why this express/twitter/oauth call is timing out? http://pastie.org/6408392
01:54 < ChrisPartridge> AphelionZ: chuck a couple of console.log's in there to see if its hitting the oauth callback
01:55 < AphelionZ> ChrisPartridge: it is not - neither the error nor the else is coming back with anything :-/
01:55 < AphelionZ> it's been like this for days
01:56 < AphelionZ> and when it does work it takes forrrrevvverrrr
02:00 < cloudbender> early night gnite
02:22 < ngc0202> Now what in the world is a recursive bacronymic abbreviation
02:28 < amurdaca> does make sense to use promises even when working with eventemitter objects?
02:28 < substack> amurdaca: probably not
02:29 < amurdaca> mmm so what's the best practice for node?!
02:29 < amurdaca> just inherits event emitter
02:29 < amurdaca> and make everything event emitter object
02:29 < amurdaca> but, can't i use promises for the event callback btw???
02:29 < havvy> [Don't make the data you send through your event emitters event emitters]
02:34 < amurdaca> anyone?
02:35 < blakmatrix> amurdaca: don't use promises
02:35 < amurdaca> can you explain?
02:36 < amurdaca> why not?
02:36 < blakmatrix> https://github.com/caolan/async
02:38 < amurdaca> i'mnot talking about async..
02:38 < jesusabdullah> amurdaca: it's a matter of preferences, but "good" node style usually does not use promises, the core libraries don't use promises, and most other developers don't use promises
02:38 < amurdaca> async isn't using promises too
02:39 < amurdaca> i find promises the cleanest way to write async btw..
02:39 < jesusabdullah> amurdaca: so my recommendation, as will most people's, will be to not use promises
02:39 < jesusabdullah> amurdaca: unless you want to write code in a vacuum
02:39 <@mbalho> also you should vote libertarian
02:39 <@mbalho> and wear more of the color blue
02:39 < jesusabdullah> amurdaca: personally, I hate promises, but if they float your boat then by golly they should continue to do so
02:40 < jesusabdullah> amurdaca: but if you get stuck while using them the community will generally be no help :)
02:40 < jesusabdullah> also YES on BLUE
02:41 < ChrisPartridge> i'm blue da ba dee da ba die
02:43 < faceleg|work> i dont' even know what promises are
02:43 < faceleg|work> but don't use them
02:44 < havvy> faceleg|work: Go learn what promises are.
02:46 < amurdaca> lol
02:47 < hello_kitty> what does line 9 do? http://paste.ubuntu.com/5592104/  i'm not familiar with that syntax
02:48 < AphelionZ> Does anybody here use appfog to host their node apps/
02:48 < ChrisPartridge> hello_kitty: passport.authenticate is returning a function, which is being executed with the paramters, req, res, next - afaik
02:49 < hello_kitty> ChrisPartridge: so the stuff at the end is begin passed <in> ?
02:50 < faceleg|work> niggler: angular has it's own test framework? AFAIK they're intensly into testing
02:51 < faceleg|work> havvy: link to a good overview?
02:51 < havvy> Umm... :/
02:55 < amurdaca> faceleg|work, https://github.com/kriskowal/q
03:01 < codingstream> AphelionZ: it looks good, though, if you need websocket support i would doublecheck with their support to see if they support it
03:02 < greg5green> hello_kitty, yes, those arguments are being passed in. It's a self-invoking function
03:03 < faceleg|work> amurdaca: thanks
03:21 < faceleg|work> amurdaca: I like async better
03:21 < faceleg|work> naming my anon functions makes me happy
03:22 < faceleg|work> async([ function martha(callback) { callback(null); }, function stewart(callback) { callback(null}; }], function sucks(error) { })
03:29 < garrettwilkin> anyone ever see '…' when trying to console.log an object?
03:29 < azylman> I believe it doesn't display the full object if there's a lot of output
03:30 < azylman> And so cuts it off
03:30 < garrettwilkin> but… WHY?
03:30 < garrettwilkin> i tried searching for a way to tell it to give me the full output, didn't see anything
03:30 < azylman> It probably thinks you don't want 10,000 lines of code in your console
03:30 < garrettwilkin> yea, i don't, but i could deal with 10
03:31 < garrettwilkin> oh well
03:33 < azylman> I think if you stringify it it won't truncate, but I dunno for sure
03:33 < faceleg|work> oh wow I"ve never seen it
03:33 < faceleg|work> I've even had my terminal struggle to cope with the ludicrous output of massive mongo docs
04:26 < AlexMax> So I'm trying to write some unit tests for a function that is supposed to be called via callback.  How am I supposed to verify that the function completed successfully without throwing an error?  There's no "block" that I can wrap an assert.doesNotThrow() around.
04:27 < AlexMax> ...since it's being called by an event.
04:27 < AlexMax> I guess I could call the callback function directly I suppose and wrap that....seems like there ought to be a way to wrap a function called by an event somehow.
04:33 < willryder> Trying to learn node.  I ran across an example but I was wanting to serve a static file if they go to localhost/13.  I put the file in a folder named 13.  http://jsfiddle.net/XaBxQ/
04:33 < willryder> It doesn't work this way...any ideas.
04:34 < gkatsev> try listening on port 8080 or something instead.
04:34 < gkatsev> or run node as root
04:34 < gkatsev> since you need root to listen to port 80
04:35 < chakrit> v0.10 on monday? XD
04:35 < willryder> It works going to localhost/stooges, etc
04:35 < AlexMax> Actually, here is my code: https://github.com/AlexMax/nomaster/blob/master/nomaster.js#L179
04:35 < willryder> just don't understand how to serve that static file
04:36 < AlexMax> Is there a way to assert that this function does not throw an exception when called via event (i.e. not merely by running it)
04:54 < mcw> ./setname "Matthew Chase Whittemore"
05:07 < mcw> Just finished listening to node up 40 and was wondering if anyone had a module they recommended as a code review of best practices. 
05:16 < mcw> Just finished listening to nodeup and was wondering if anyone had a module they recommended as a code review of best practices?
05:48 < shmoon> i have users and tasks collections in mongodb. using mongoose is it possible to query tasks in such a way that it takes tasks.created_by queries users for users._id = tasks.created_by and gives me tasks+users details in 1 objecT?
05:50 < xMYTHICx> Hey guys could someone help with a small issue Im trying to iterate of a collection stored in mongodb could some one point me to the right way to do this
05:52 < xMYTHICx> I have tried several ways none seem to work 
05:53 < xMYTHICx>  var items = Queue.find();
05:53 < xMYTHICx> 		  
05:53 < xMYTHICx> 		  
05:53 < xMYTHICx> 		 items.forEach(function(item) {
05:54 < azylman> xMYTHICx: are you using the native mongodb driver or mongoose?
05:55 < xMYTHICx> mongoose
05:55 < xMYTHICx> Queue is my scheme 
05:55 < azylman> xMYTHICx: http://mongoosejs.com/docs/2.7.x/docs/querystream.html
05:56 < xMYTHICx> Thank you so much 
06:07 < xMYTHICx> azylman: Thanks a lot for the help. I was searching for hours on how it iterate of a collection but also follow nodes async style your post helped a lot man much appreciated. 
06:07 < azylman> np :)
06:07 < xMYTHICx> my problem is fixed
06:31 < Franz__> how can i send post data to node.js?
06:31 < azylman> Are you using express?
06:31 < Franz__> yes
06:31 < Franz__> so
06:31 < Franz__> i have a html page
06:32 < Franz__> with a post
06:32 < azylman> Are you using express.bodyParser middleware?
06:32 < Franz__> i want send the data for node.js
06:32 < Franz__> i dont know how can i make this
06:33 < azylman> If you use the express.bodyParser middleware, and have a post route, then any form data you post will be in the request body
06:33 < azylman> (e.g. req.body)
06:34 < Franz__> azylman im trying with cookies
06:34 < Franz__> but page and node.js server not in the same domain
06:34 < Franz__> then failed my attempt...
06:34 < Franz__> i was thinking make a form 
06:34 < azylman> What kind of data are you trying to post?
06:34 < Franz__> for pass the info login and pass for node.js when connect
06:35 < azylman> You're trying to send a username and password to verify login status or something?
06:35 < Franz__> yes
06:35 < Franz__> i dont want my users relogin again 
06:35 < Franz__> i have a php/mysql site
06:35 < Franz__> use cookies for authenticate, but node.js server is in another server
06:36 < azylman> Oooh
06:36 < Franz__> another domain, then failed to use cookies
06:36 < azylman> Cookies are locked to a domain
06:36 < Franz__> yes ;/
06:36 < azylman> That's a browser thing
06:36 < azylman> There's nothing you can do with node to fix that
06:36 < Franz__> but
06:36 < Franz__> in my page i was thinking...
06:37 < Franz__> make a form and put login and pass
06:37 < Franz__> and send to node.js
06:37 < Franz__> is not possible?
06:37 < havvy> That's possible.
06:37 < Franz__> i know!
06:37 < havvy> Look at express and its middleware.
06:37 < azylman> Yeah, you can do that
06:37 < Franz__> i saw a example but i dont find anymore 
06:38 < azylman> If you're sending form data to express you need to do what I first said:
06:38 < azylman> use the express.bodyParser middleware
06:38 < Franz__> app.use(express.bodyParser());
06:38 < Franz__> right?
06:38 < azylman> Yep
06:38 < Franz__> and later?
06:39 < azylman> And then you can do something like app.post('/my/post/endpoint', function(req, res) {console.log("MY REQUEST BODY", req.body)})
06:40 < azylman> Where that function is what responds to requests
06:40 < Franz__> i didnt understand /my/post/endpoint
06:40 < azylman> That's the url on the server that that function will respond to
06:40 < Franz__> no
06:40 < azylman> So if you post to http://my_server.com/my/post/endpoint
06:40 < azylman> It will run that function
06:41 < Franz__> but i dont want send to login.ph
06:41 < Franz__> but i dont want send to login.php
06:41 < azylman> Yeah...
06:41 < azylman> You should probably read an express tutorial
06:41 < azylman> Most of them will probably cover accepting form data
06:42 < Franz__> i tried find ;(
06:43 < Franz__> azylman this form
06:43 < Franz__> with middleware
06:43 < Franz__> the node.js will catch all forms data from this html page?
06:49 < azylman> Node doesn't get responses FROM a url, it gets responses TO a url
06:50 < azylman> Just like any server
06:54 -!- mode/#Node.js [+o TooTallNate] by ChanServ
07:04 < Franz__> azylman i tried  console.log('Category: ' + req.query['category']);
07:04 < Franz__> but req is not defined
07:04 < Franz__> is correct this example/
07:04 < Franz__> ?
07:04 < Franz__> http://www.hacksparrow.com/form-handling-processing-in-express-js.html
07:05 < azylman> Well, req.query is for get parameters, as it says on that page
07:05 < azylman> req.body is for post parameters
07:06 < gildean> Franz__: req is not defined? then you're not accessing it inside a middleware?
07:06 < azylman> If req is not defined, you're doing something wrong
07:06 < azylman> Not following that example
07:07 < Franz__> so
07:07 < Franz__> in app.js i have
07:07 < Franz__> app.use(express.bodyParser());
07:07 < Franz__> ok
07:07 < azylman> That's fine
07:07 < Franz__> in socket.js i have
07:07 < Franz__> module.exports = function(server, rPub, rSub, R, C){ ...
07:08 < Franz__> io.sockets.on('connection', function(socket) {
07:08 < Franz__> ...
07:08 < Franz__> console.log('Category: ' + req.query['category']);
07:08 < azylman> Well, that's websocket stuff
07:08 < gildean> Franz__: the socket.io connection is not a http-connection, and the funtion you're accessing req in doesn't know anything about it
07:08 < azylman> Look at the example on the page you linked
07:08 < gildean> *function even
07:09 < azylman> app.get('/some/usr', function(req, res) {console.log("QUERY PARAMS:", req.query)|});
07:09 < azylman> Or
07:09 < azylman> app.post('/some/usr', function(req, res) {console.log("POST PARAMS:", req.body)|});
07:10 < azylman> That /some/usr is supposed to say /some/url but you get the idea
07:10 < azylman> Also that | isn't supposed to be there, that was a typo
07:13 < Franz__> azend app is not defined
07:13 < Franz__> sorry
07:13 < Franz__> azylman
07:14 < azend> see
07:14 < azend> aww
07:14 < azend> am I not special?
07:14 < azylman> app needs to be your express application
07:14 < azylman> IF you called it something different, use that name
07:15 < Franz__> i need
07:15 < Franz__> use this code in app.js 
07:15 < Franz__> right?
07:15 < azylman> You can do it there
07:16 < azylman> You need to do it somewhere that has access to your express application
07:17 < Franz__> didnt show nothing
07:17 < Franz__> ;(
07:17 < azylman> Which one?
07:17 < Franz__> in code app.js i have:
07:17 < Franz__>   console.log("Express server listening on port " + app.get('port'));
07:17 < Franz__> });
07:17 < Franz__> 	app.get('/some/usr', function(req, res) {console.log("QUERY PARAMS:", req.query);});
07:18 < azylman> What URL are you using that doesn't show anything?
07:18 < gildean> i wrote this example for socket.io and connect just a couple of days ago to answer someone asking for something similar, idk if it would help:
07:18 < gildean> https://gist.github.com/gildean/5080568
07:18 < gildean> you can basically substitute connect with express in that
07:18 < azylman> gildean: he's trying to set up something that accepts form data
07:19 < azylman> Franz__: so for form data, you need to use post, not get
07:19 < azylman> The post example I sent you
07:19 < gildean> you can send form data as a get-query too
07:19 < Franz__> i tried first with get
07:20 < Franz__> because its more easy test
07:20 < azylman> So there's a method attribute on forms
07:20 < Franz__> 	app.get('/', function(req, res) {console.log("QUERY PARAMS:", req.query);});
07:20 < azylman> Are you using method="get"?
07:20 < gildean> the browsers will automagically encode the components as the querystring if your form has a method="get"
07:20 < Franz__> yes
07:20 < Franz__> http://127.0.0.1:3000/?cat=faf
07:21 < Franz__> i tried this form...
07:21 < Franz__> and  	app.get('/', function(req, res) {console.log("QUERY PARAMS:", req.query);});
07:21 < azylman> IP 127.0.0.1 is your local IP address
07:21 < azylman> We can't see that
07:21 < azylman> Only you can
07:21 < azylman> http://en.wikipedia.org/wiki/Query_string#Web_forms
07:21 < azylman> er, sorry
07:21 < azylman> http://en.wikipedia.org/wiki/127.0.0.1
07:23 < Franz__> azylman success!
07:23 < Franz__> with / failed
07:24 < azylman> What was the problem?
07:24 < azylman> Wrong url?
07:24 < Franz__> but /some/usr
07:24 < Franz__> its ok
07:24 < Franz__> with only / failed ;/
07:31 < Franz__> azylman thank you so much!
07:32 < azylman> np
07:50 < milani> anyone remember a module which uses different threads while working with v8?
08:00 < Ivo> should I change the tmp config to point to /tmp ? is there a reason it made a /home/user/tmp folder instead?
08:01 < Ivo> I installed the archlinux npm package, btw
08:05 < pats_Toms> I have the same on debian
08:06 < Ivo> i wonder how its defaulting to the latter
08:06 < Ivo>  ** /tmp is likely to have faster operations than /home/user/tmp
08:06 < Ivo> swap my last two messages lol
08:07 < Ivo> azhwkd: http://sackheads.org/~bnaylor/spew/away_msgs.html
08:13 < Ivo> is https://github.com/joyent/node taking a while for anyone to load?
08:18 < andrew12> that's a github thing
08:32 < [AD]Turbo> hola
08:49 < juliangruber> what's the easiest way to get a machine/vm that has full dtrace support including ustack helpers?
08:52 < faceleg> do any of the nodejitsu team ever hang out here?
08:52 < ningu> faceleg: I think so, but there's also a channel for it
08:52 < ningu> and it wasn't dead as of a year ago :)
08:53 < juliangruber> faceleg: join #nodejitsu
08:53 < faceleg> did
08:53 < faceleg> ningu: juliangruber thanks
08:53 < ningu> wtf is a faceleg anyway?
08:53 < faceleg> my handle
08:54 < faceleg> I feel it gives people a good insight into the personality driving this particular keyboard
08:54 < faceleg> genius. handsome. daring.
08:57 < shmoon> fhi
08:58 < shmoon> i am using this module called moment
08:58 < shmoon> to format dates, i need to use it inside my jade template in my express application, how do i go about doing it?
09:04 < gildean> shmoon: app.locals.moment = moment;
09:04 < gildean> presuming you're using express
09:04 < gildean> you are, didn't read carefully enough :D
09:05 < shmoon> i could do that, is that something most people do? or should i loop over my array change all values and then use them in template
09:05 < shmoon> which I think can be slow
09:05 < gildean> shmoon: so yeah, app.locals.moment = moment; and then in the jade file you have 'moment'
09:06 < shmoon> ok man
09:06 < gildean> so you can do something like: div#time #{moment(item.time).format('LLLL')}
09:06 < gildean> where 'item' would be some data you got to the template from the app
09:07 < shmoon> ya i did that works well
09:07 < shmoon> i hope this is the approach most people taeke thats all :) and its not a bad practise
09:08 < gildean> shmoon: app.locals is the way to inject some dep troughout the app, with res.locals you can do the same for just one response
09:09 < shmoon> cool thanks, might go for res.locals then
09:09 < gildean> shmoon: for moment-module, you want to use app.locals
09:10 < gildean> shmoon: res.locals has to be set on each response, there's no point in that when you're using the same function every time
09:10 < shmoon> i dont need to use moments in all templates, i have like 10 templates and i need to use it in only 1 :)
09:11 < shmoon> so maybe res.locals is fine, feelsbetter heh, than making it available everywhere unnecesarrily
09:11 < gildean> shmoon: still, it causes more overhead to load it each time than to load it once
09:11 < shmoon> hm ok app.locals then
09:16 < shmoon> is there a module that turns 'under_score' to 'PascalCase' ?
09:16 < shmoon> i mean 'under_score' to 'UnderScore' - strings
09:18 < T-Co> shmoon, https://github.com/epeli/underscore.string#readme
09:18 < T-Co> shmoon, It has method classify
09:19 < faceleg> "When I enter a room you'll think the sun has come out from behind a cloud"
09:19 < faceleg> too much for a cover letter?
09:20 < faceleg> "When I sit and begin writing code, birds sing and trumpets roar"
09:21 < d4Mn> to green
09:21 < d4Mn> too*
09:23 < faceleg> annoying thing about cover letters
09:23 < faceleg> is the tendency to begin every sentence with "I"
09:23 < faceleg> but doing otherwise looks contrived
09:29 < kevireillyy> faceleg: workaround: "Birds sing and trumpets roar when I sit and begin writing code" ;)
09:30 < kevireillyy> granted, I believe the proof is in the pudding
09:51 < faceleg> kevireillyy: good work
09:52 < faceleg> kevireillyy: already sent it though
09:52 < kevireillyy> faceleg: best of luck
09:52 < faceleg> #6 for the month I think
09:52 < faceleg> thanks ;)
09:52 < faceleg> For this one, I actually hope I get it
09:52 < faceleg> others are just $ upgrades, sigh
09:53 < faceleg> know of any telecommute node jobs going?
09:53  * kevireillyy hates monies but understands it
09:55 < faceleg> finally
09:55 < faceleg> admin out of the way
09:55 < faceleg> time for coding
09:57 < faceleg> anyone know a good c++ plugin for ST2?
10:07 < faceleg> SublimeClang
10:09 < rybnik> Anyone have a spare minute? I'm having some odd behavior, I'm using express and I working on a crash-only approach, and basically TypeErrors and SyntaxErrors exceptions are being caught somewhere and printed, however other type of exceptions are correctly being trapped by uncaughtException or just make the process crash… anyone can give me a few hints on this ?
10:25 < faceleg> do you want all exceptions trapped?
10:25 < kevireillyy> rybnik: process.on('uncaughtException', function(err){});
10:25 < rybnik> kevireillyy doesn't work
10:25 < faceleg> kevireillyy: are some exceptions uncatchable?
10:25 < rybnik> I've even tried domains
10:25 < faceleg> i.e. those thrown by native modules?
10:28 < rybnik> faceleg does exceptions thrown by data structures such as Object instances count as uncatchable exceptions? 
10:28 < kevireilly> new Error('errerr!');
10:29 < rybnik> I'm trying to call a non existing method on an Object instance and I get a TypeError exceptions which is not trapped by the uncaughtExceptions listener 
10:29 < faceleg> kevireilly: I ask as exceptions thrown from C++ seem "different" *waves hands* to those thrown from within onde
10:30 < kevireilly> faceleg: yeah, it is a familiar concept but brings down the node instance iirc. I guess you usually just want to evaluate strings from a new Error();
10:31 < kevireilly> if you've got a fatal, you're doing something wrong and should probably have something else in place or accounting for dat
10:31 < faceleg> thats some weirdess
10:31 < faceleg> yeah 
10:31 < faceleg> my C++ code throws errors incorrect args, if it tried to soldier on you'd get segfaults
10:31 < faceleg> erros on *
10:32 < asdf12> >> try { String.doesntexist() } catch(e) { console.log(e) }
10:32 < rybnik> Any hint on how to kill the process on any exception ?
10:32 < faceleg> kevireilly: oh right so they're "fatal"
10:32 < asdf12> oh the bot isn't here, but that works
10:32 < kevireilly> faceleg: throwing is fatal, yeah, it makes the poops
10:33  * kevireilly of course can't find the decent post he found on the subect
10:33 < faceleg> I might make my c++ module randomly throw on april fools
10:34 < kevireilly> http://snmaynard.com/2012/12/21/node-error-handling/
10:34 < kevireilly> asdf12: you and your try/catch are drunk and need to go home ;)
10:35 < rybnik> kevireilly just a side note I'm using domains and .on('error') is not being invoked :/
10:35 < asdf12> oh
10:36 < asdf12> domains
10:36 < faceleg> kevireilly: hahahaa that's hilarious
10:36 < faceleg> async implications for try/catch
10:36 < faceleg> didn't consder it before
10:36 < faceleg> it worked! ... crash
10:37 < asdf12> im hungry, and i dont want to walk to the nearest diner
10:37 < asdf12> im in a jam
10:37 < faceleg> are you american?
10:37 < rybnik> asdf12 I've placed the defective code inside a try container and for the catch y just catch(e){ throw e;} …. I still get the same behavior 
10:38  * kevireilly insists asdf12 hop on his back for a quick pony ride home
10:38 < asdf12> https://github.com/google/google-api-nodejs-client oh nice!
10:38 < rybnik> asdf12 sorry my trycatched the wrong code segment …..
10:38 < asdf12> hmm, i dont know / never used domains
10:39 < asdf12> yea im american
10:39 < rybnik> asdf12 well same behavior….. 
10:39 < asdf12> only americans have 'diners' its like 'pubs' in europe i think
10:40 < rybnik> Thank  you guys for your help and time
10:40 < faceleg> is it?
10:40 < faceleg> can you get really drunk there
10:40 < faceleg> at a diner I mean
10:40 < faceleg> we don't have diners, only way overpriced cafes
10:40 < kevireilly> bar is where i get the drunkz, diner is where i eats the afterwards
10:41 < asdf12> yea diner serves liquor
10:41 < asdf12> but you dont get drunk there 
10:41 < faceleg> you get drunk @ pubs, afaik
10:41 < asdf12> maybe its not 'pubs' but theres a european way of saying diners
10:41 < faceleg> sure it's not "diners"?
10:41 < kevireilly> there are hybrids with bars and foods
10:41 < faceleg> restaurants!
10:42 < asdf12> diners are the things that came before fast food places
10:42 < faceleg> I don't think we have them
10:42 < faceleg> we just have fast food, restaurants and cafes
10:43 < asdf12> what about bistros
10:43 < asdf12> thats probably it
10:43 < kevireilly> oh man you guys are making me hungry
10:43 < faceleg> enjoy it
10:43 < asdf12> it's like an unfancy restaurant, where you go in for a quick bite
10:43 < faceleg> the hunger
10:44 < faceleg> think of all the americans who never experience it
10:44 < faceleg> poor souls
10:46 < asdf12> i thought there were pubs where people mainly go to eat than to drink (but it has a bar)
10:47 < asdf12> i would like a pizza burger and steak fries
10:48 < asdf12> teleportation technology can't come soon enough!
10:49 < faceleg> 3d printing more like
10:50 < asdf12> you know even if you had teleportation technology, you know even then there exists the possibility of more laziness
10:50 < asdf12> instead of teleporting to the restaurant or what have you
10:50 < asdf12> you tell them to just teleport the food to you
10:51 < lukium> just teleport the foor/drink back?
10:51 < faceleg> i thought that was waht you mean
10:51 < faceleg> meant*
11:24 < asdf12> ahhhh snapppp
11:28 < faceleg> what
11:29 < asdf12> what it do
11:29 < faceleg> ?
11:30 < MelkorNemesis> Waiter, is this meat real beef? Of horse!
11:33 < T-Co> :D
11:34 < anildigital_work> Hi friends.. 
11:35 < anildigital_work> I have a question.. can you see http://jsfiddle.net/kMmJ7/
11:35 < anildigital_work> Basically wanted to know about (some function)(some already defined var);
11:35 < anildigital_work> what kind of code is this 
11:35 < asdf12> its just calling the function
11:35 < asdf12> add(2)
11:36 < faceleg> everything inside the function is inside that function's scope
11:36 < faceleg> meaning nothing can mess with the vars declared within, your var declarations can't mess with any other declarations elsewhere
11:36 < anildigital_work> adrianF: where are we calling the function?
11:36 < faceleg> anildigital_work: it calls itself
11:37 < adrianF> :D
11:37 < anildigital_work> faceleg:  what is (global);
11:37 < faceleg> (function(hat) {})('this will be hat');
11:37 < faceleg> it's just like function f() {}; f()
11:37 < faceleg> only all in one step
11:37 < faceleg> it's called a self-executing function
11:38 < asdf12> theres going to be a huge line for coffee
11:38 < asdf12> :*(
11:38 < faceleg> if only they processed the array of customers async eh
11:39 < faceleg> anildigital_work: do this in your js fiddle, might make it clearer (function(hat) { aler(hat); })('this will be hat');   
11:39 < faceleg> an
11:40 < asdf12> oh my goodness its snowing
11:40 < faceleg> here it's 25 C
11:46 < anildigital_work> faceleg: okay
11:48 < anildigital_work> faceleg: so whatever there in second round bracket is passed to first round bracket as argument..
11:48 < anildigital_work> ah
11:48 < anildigital_work> did not know about this
11:48 < faceleg> anildigital_work: javascript is full of neat things like this
11:48 < faceleg> anildigital_work: read this if you like, it's very good: http://bonsaiden.github.com/JavaScript-Garden/
11:49 < anildigital_work> faceleg: I always thought .. the return of first round bracket is passed to second bracket
11:49 < faceleg> anildigital_work: with your example
11:49 < faceleg> it's easier to think of it as f() {}; f(), because this is what it really is
11:49 < faceleg> it's just shorthand
11:53 < asdf12> well technically speaking it's a self invoking anonymous function
11:53 < asdf12> self invoking (it calls itself) anonymous (it has no name)
11:53 < asdf12> it has special use cases, you wouldn't do it too often
11:54 < anildigital_work> faceleg: yup.. I would read it.. thanks
11:55 < anildigital_work> asdf12: yeah.. it's anonymous function.. called with argument :D
11:55 < anildigital_work> shorthand :)
11:55 < jameshowe> anyone have experience running native modules under valgrind?
11:55 < anildigital_work> It took so much years to me to understand it..
11:55 < anildigital_work> :(
11:55 < asdf12> no i wouldn't think of it as shorthand
11:56 < asdf12> your example is a common pattern for people to not want to pollute the global namespace
11:57 < asdf12> that is probably like 90% of the use cases for a self invoking anonymous function, just to not pollute browser global
11:57 < asdf12> the other 10% you'd probably see usage is with closures
11:59 < anildigital_work> asdf12: can you share js fiddle with the bad example and good example..
12:00 < anildigital_work> and adding comment about why bad is bad
12:00 < anildigital_work> that would be very helpful for me :)
12:05 < anildigital_work> may be looks like it's basic
12:14 < faceleg> is there a way to test a given function w/ callback to ensure it *is* non-blocking? Am I asking a stupid question?
12:14 < faceleg> I want to make absolutely sure my C++ async is non-blocking
12:17 < asdf12> use a timeout?
12:17 < faceleg> asdf12: explain yourself
12:18 < asdf12> if your callback doesn't complete until the timeout expires you know the async didn't work
12:18 < faceleg> i'm still not following
12:20 < faceleg> asdf12: you're disappointed.
12:21 < asdf12> http://hastebin.com/caqaqadosa.js
12:21 < asdf12> something like that
12:22 < asdf12> oh i guess you would add a bit more to make sure its non blocking
12:23 < faceleg> ah yep
12:23 < faceleg> looks good
12:24 < aaa> a
12:24 < faceleg> couldn't you add something below the timeout
12:24 < faceleg> and if that didn't get executed before done, it blocks?
12:25 < asdf12> i mean that code example is pretty messed up i pasted haha, anyway just use a test framework
12:25 < jameshowe> do a nextTick, setImmediate and a setTimeout(0), and see what order the 4 callbacks happen in
12:26 < SomeoneWeird> afaik setImmediate == nextTick
12:27 < foobar321> Has anyone got contact to isaacs here? I need new version of https://github.com/isaacs/readable-stream/ that includes 0.9.12 changes
12:28 < asdf12> faceleg: well you can put something below the given_func(){}(), that will always come first before your callback
12:29 < asdf12> or actually i think the easiest way is to just throw an error in your callback and look at the stack trace
12:31 < jameshowe> setImmediate != nextTick
12:31 < jameshowe> that's why setImmediate was added
12:31 < jameshowe> there's lots of github and mailing list history on the nextTick change for more info
12:32 < jameshowe> @foobar321: isaacs can probably contact isaacs
12:32 < d4Mn> how to downgrade node to version i had before installing this new 9.0..
12:32 < jeremy_c> w/async db communication, how am I suppose to know I am done with the db and close it? For example, a command line utility that updates a database table, it may have 2 or 2000 queries that are run, then it should terminate. I am using node-postgres
12:33 < jameshowe> @d4Mn uninstall it then install the one you want
12:33 < amurdaca> d4Mn, depends how you installedit
12:33 < amurdaca> d4Mn, if you installed with git then-> git checkout v0.8.22 (or whatever) && make && make install
12:33 < d4Mn> i compiled it
12:33 < amurdaca> (maybe make clean too)
12:34 < d4Mn> from source
12:34 < amurdaca> just recompile the version you need
12:34 < d4Mn> ok
12:34 < d4Mn> thanx
12:34 < amurdaca> download in /usr/local/src/node
12:34 < amurdaca> and re-compileit
12:35 < d4Mn> there seems to be a bug in paths.js
12:35 < d4Mn> in new version
12:35 < foobar321> Well I think it's quite important to have newer readable-stream if the version from 0.9.12 is going to be in 0.10
12:36 < foobar321> jameshowe: do you?
12:37 < asdf12> jeremy_c: i guess it depends on how the script is written, you fire all 2 or 2000 queries one after another?
12:39 < asdf12> faceleg: http://hastebin.com/hirabiloxe.coffee btw example, if it goes 1 then 2, it's not async, it blocked
12:39 < jeremy_c> asdf12: https://gist.github.com/jcowgar/5e36d6e491a1898f4f8b
12:39 < pixie79> hi all - I am having issues reading in a json file i created using JSON.stringify, can anyone tell me what I have screwed up please? https://gist.github.com/pixie79/5107732
12:39 < jeremy_c> asdf12: the console.log's will eventually change to queries themselves once I am sure things are working right.
12:40 < asdf12> line 28 looks problematic?
12:41 < asdf12> faceleg: the timer in my first example was just a way for you ensure the async callback actually got called and for the test to exit gracefully
12:42 < jeremy_c> asdf12: could be, but I would like to run in a transaction. I am not getting any errors w/my simple tests though.
12:42 < jeremy_c> anyway, on line 28, it would eventually turn to a rollback, and then exit.
12:43 < asdf12> but you are exiting early before all the queries are returned ?
12:43 < faceleg> asdf12: thanks for that, I'll save it and look a little later, more segfaulting now
12:44 < jeremy_c> asdf12: no, I am not exiting early, I am never exiting, because I never call db.end() ... not sure where, any call to db.end() does cause it to exit early.
12:45 < jeremy_c> asdf12: i.e. I type: ./my-prog file1 file2... it issues a few queries and just sits there forever after everything is done. I have to ctrl+c to terminate the app.
12:45 < anildigital_work> asdf12, faceleg  is there anything like module.exports in browser javascript?
12:46 < asdf12> jeremy_c: mmm well, the best way to know when all your queries are done is to check the connection
12:46 < anildigital_work> like it is there in node.js
12:46 < asdf12> if the connections are all empty , then you know you are done
12:47 < asdf12> jeremy_c: https://github.com/brianc/node-postgres/wiki/Client you want the 'drain' event
12:47 < jeremy_c> asdf12: how do I sit idle checking for all queries to complete?
12:47 < jeremy_c> asdf12: ok, thanks. I'll read up on drain
12:49 < jeremy_c> asdf12: works wonderfully. Thanks! I am new to async programming, if you can't tell :-D
12:50 < asdf12> you may need a counter
12:52 < asdf12> anildigital_work: there's browserify
12:52 < faceleg> anildigital_work: http://hastebin.com/kuhacajaki.lisp
12:52 < faceleg> anildigital_work: this will work in browse or node
13:16 < brianc> asdf12: actually that's being deprecated soon
13:16 < brianc> jeremy_c: you can ask me - i'm the main author
13:20 < faceleg> can you make v8 object method calls within uv_work Work method?
13:20 < faceleg> within the *
13:21 < MI6> joyent/node: Ben Noordhuis master * 7169436 : doc: dgram: add v0.10 bind() behavior note  dgram.Socket#bind() is always (+1 more commits) - http://git.io/EXWgPQ
13:23 < brianc> jeremy_c: I'm online all day, ping me when you want to discuss
13:25 < brianc> asdf12: sorry - the drain event isn't being deprecated
13:25 < brianc> asdf12: it's pauseDrain() and removeDrain() that are going away
13:26 < asdf12> oh, though i'm not that familiar with node-postgres :P
13:26 < asdf12> i just figured there's a way to see if the queries are piling up or done based on the connection
13:27 < asdf12> congrats on getting married btw
13:29 < gynna> http://www.reddit.com/r/AdultDating18/comments/19t98u/ebony_pornstar_simone_staxxx/
13:29 < deoxys> why everybody learning new apis v.0.9.12 if the stable is 0.8.22 ?
13:30 < glosoli> people think for the future
13:30 < deoxys> lol
13:30 < faceleg> because eventually 9 will be stable and 8 will be deprecated
13:30 < deoxys> nice, gonna install it then
13:40 < brianc> asdf12: thanks!
13:41 < brianc> asdf12: yeah the 'drain' event is still good to use for that
13:41 < brianc> asdf12: or you can use a  flow control library (probably better idea hactually)
13:42 < brianc> anyone know where I should start looking for this error:? ../deps/uv/src/unix/core.c:648: uv__io_stop: Assertion `loop->watchers[w->fd] == w' failed.
13:45 < faceleg> that's a C++ error
13:45 < faceleg> open an issue on the github page for the module (or email the maintainer if it's not on github)
13:46 < brianc> I am the maintainer
13:47 < faceleg|sleep> lol
13:47 < brianc> *oh no!!*
13:47 < faceleg|sleep> I think you mean &oh_no
13:47 < andrew12> guys i want to make cool things with node.js but i don't know what to make with it
13:47 < andrew12> what do i do
13:47 < faceleg|sleep> LOL
13:48 < faceleg|sleep> andrew12: http://www.youtube.com/watch?v=OXlZ6edCHqI
13:48 < andrew12> ;_;
13:48 < faceleg|sleep> andrew12: make anything - if you make it with nodejs it will be cool and scale
13:48 < andrew12> node.js is web scale
13:49 < andrew12> can i write a cool irc server that can scale vertically
13:49 < andrew12> i need to handle ten million connections
13:49 < andrew12> can node do that?
13:49 < faceleg|sleep> make it scale to the moon
13:49 < faceleg|sleep> pfff sure
13:49 < andrew12> brb
13:49 < andrew12> going to remove the "free" from freenode
13:50 < faceleg|sleep> node handles 10million connections even on dialup
13:50 < faceleg|sleep> because of async
13:50 < faceleg|sleep> night
13:51 < andrew12> night
13:53 < ohnoesitsraphy> Is DigitalOcean any good?
14:00 < asdf12> its cheap enough to just find out on your own
14:00 < asdf12> :P
14:15 < brianc> got it fixed
14:22 < brianc> was trying to read before stopping the write poller & vise-versa
14:32 < frdmn> hey
14:32 < frdmn> can someone help me with a (probably) noob question?
14:33 < frdmn> i try to use ".match()" to check for a regexp, but all i get is: "TypeError: Cannot call method 'match' of undefined"
14:34 < asdf12> blah.match() , the 'blah' doesn't exist
14:34 < frdmn> http://pastebin.com/uM9k7kcz
14:34 < frdmn> here's my code
14:35 < frdmn> full function: http://pastebin.com/Cwq7E3ww
14:37 < brianc> you guys know how to read the package.json of whichever module your module was included within?
14:37 < brianc> i.e. you include my module, I wanna get the npm config variable 'dev'
14:43 < asdf12> frdmn: message or data.message doens't exist
14:44 < pixie79> I am trying to set a itimer that will trigger every 10 seconds - I have created this https://gist.github.com/pixie79/5108475 which fires ok the first time but then gets an error when triggering for the first count
14:44 < asdf12> it never fired
14:45 < asdf12> you're actually calling the function
14:45 < frdmn> asdf12: it does, i can console.log it
14:45 < frdmn> :/
14:45 < asdf12> that's why you think it fired, it should be setInterval(cb, 10000);
14:45 < asdf12> not cb() 
14:46 < pixie79> asdf12: thanks
14:47 < asdf12> frdmn: do... console.log(typeof message)
14:47 < asdf12> what does it say?
14:47 < pixie79> asdf12: I take it i can supply cb variables if needed ?
14:48 < mikolalysenko> Looking for some early feedback on this library I've been working on:  https://github.com/mikolalysenko/cwise
14:48 < asdf12> pixie79: you can, you need to wrap it with another function
14:49 < mikolalysenko> Basically it is an expression compiler for multidimensional typed arrays
14:50 < pixie79> asdf12: ?? you lost me there ?
14:51 < asdf12> pixie79: look at this http://hastebin.com/qunobukoja.js
14:51 < pixie79> thanks
14:52 < jjlank> hey everyone, I know streams2 just landed and streams are being done differently going forward, but for pre 0.10 versions, what determines the size of a stream chunk?  is it whatever the underlying mechanism is.. TCP, or the file system that determines what size data gets chunked up into?
15:07 < frdmn> asdf12: "app[web.1]: ERROR Unable to load /app/scripts/irc-logger: SyntaxError: Unexpected token typeof"
15:09 < kayokenx5> what server side languages did you guys star out with?
15:09 < kayokenx5> start
15:09 < Tobsn> php
15:09 < Tobsn> 1999
15:09 < Tobsn> thank god i didnt go with coldfusion...
15:10 < anildigital_> Hi friends..  in my app I have to write my whole code in myApp function
15:10 < anildigital_> because var configProperty = prop.read(__dirname + "/config/config.properties", myApp);
15:10 < kayokenx5> yeah what
15:10 < anildigital_> can't I use event emitter to make my code look good
15:10 < kayokenx5> the hell is cfm used for nowadays
15:10 < anildigital_> if yes.. how
15:11 < Tobsn> nothing
15:11 < kayokenx5> lol
15:11 < supersym> lol cf
15:11 < Tobsn> fuck in 1999 there was only php, cf and random ass crap
15:11 < trodrigues> don't say it 3 times in a row, otherwise it'll come back with a vengeance
15:11 < kayokenx5> looool
15:12 < kayokenx5> that was hilarious
15:12 < Tobsn> yeah probably
15:12 < Tobsn> now im using node.js for almost 5 years...
15:12 < trodrigues> Tobsn: dude...come on...there was Perl!
15:12 < kayokenx5> look in a mirror, say it 3 times
15:12 < Tobsn> shit gets old fast
15:12 < trodrigues> *hides in a hole*
15:12 < Tobsn> yeah right perl
15:12 < Tobsn> you mean cgi
15:12 < supersym> well yea i started in php too which wasnt half-bad then
15:12 < trodrigues> no, I mean regular expressions
15:13 < kayokenx5> lol regex
15:13 < kayokenx5> for backe d 
15:13 < trodrigues> you had SSJS in 95/96 but no one cared apart from Netscape :p
15:13 < kayokenx5> building backend apps lol
15:14 < Tobsn> and these days i need help with phonegap
15:14 < Tobsn> anyone? ;)
15:14 < Tobsn> phonegap channel is dead
15:15 < trodrigues> haven't touched phonegap since 2009/10 :(
15:15 < Tobsn> me neither :/
15:15 < Tobsn> all is now messed up
15:15 < Tobsn> its now all cordova
15:16 < supersym> anyone here got experience serving up video streams?
15:16 < Tobsn> supersym, good luck!
15:16 < Tobsn> ;)
15:16 < supersym> should i want to do it myself for a low-traffic site
15:16 < Tobsn> no
15:16 < supersym> vimeo i get all this cookiecrap :S
15:19 < toehio> Is it a bug that express.js can't distinguish between the routes "/path/:param" and "/path/:param/*"? Or is there a reason that they should be equivalent?
15:22 < gildean> toehio: i think the first needs to have a closing / in the path
15:22 < pachet> toehio: it works for me
15:22 < pachet> sure you dont---
15:22 < pachet> yeah, what gildean said
15:23 < wsieroci> why #django channel is not opened? 
15:23 < wsieroci> sorry for offtopic
15:23 < stagas> toehio: there's an option for that
15:23 < wsieroci> and #python
15:24 < anildigital_> why do we need 
15:24 < anildigital_> var Redis = module.exports = {};
15:24 < anildigital_> module.exports = function Redis() {}
15:24 < anildigital_> why can't we do ^
15:25 < stagas> anildigital_: the "Redis" name is now local to module.exports, the other stuff won't find a reference
15:25 < stagas> Redis.prototype.foo will throw
15:26 < toehio> stagas: what's the option for it?
15:26 < tomahaug> Hi .. I have been googling the *** out of this question, but can't seem to find the solution .. I am using Node.js degram and trying to setup a multicast as described in http://stackoverflow.com/questions/14130560/nodejs-udp-multicast-how-to .. I am on Mac OS X 10.6.8 with node version 0.8.4 .. Calling the method addMembership("127.0.0.1") results in the error "Error: addMembership EINVAL"
15:26 < toehio> stagas: i was searching for something on this in the docs but i didn't know how to describe it
15:26 < andrew12> i want to make something COOL with node.js
15:26 < andrew12> but not something to do with web
15:27 < stagas> toehio: don't remember :/ something about paths
15:27 < andrew12> because web stuff sucks :[
15:27 < tomahaug> Does anybody have any pointers to where I should look for a solution? :) 
15:31 < xdomox> hey
15:31 < xdomox> javascript question
15:31 < LordMetroid> Wow, this channel has a lot of people
15:31 < mscdex> javascript answer
15:31 < andrew12> ASCII stupid question, get a stupid ANSI
15:32 < LordMetroid> I am trying to find an easy document database to store some articles in, any recommendations?
15:32 < xdomox> I have an issue passing variables into an ajax result
15:33 < xdomox> because by the time the result comes back the variable has changed
15:34 < ericjung> Is node.js single-threaded?
15:34 < anildigital_> okay..  exports.printHello  = function() {}
15:34 < anildigital_> var Redis = module.exports = {}
15:34 < anildigital_> Redis.printHello = function() {}
15:34 < xdomox> how do i get around this
15:34 < anildigital_> which one is good..
15:34 < andrew12> ericjung: yes
15:34 < ericjung> i know node.js allow for asynchronous callbacks, but do all of these callbacks occur on a single-thread?
15:34 < andrew12> yes
15:34 < andrew12> if you need multiple threads you can use clusters
15:35 < andrew12> or some other platform
15:35 < ericjung> andrew12: clusters of node.js?
15:35 < andrew12> http://nodejs.org/api/cluster.html
15:35 < ericjung> andrew12: but they can't all listen on the same port.
15:35 < pachet> toehio: there's probably a more express-specific way to do it buried down in the documentation, but you could do something like
15:35 < pachet> app.get('/foo/:bar/[^/]*', fn)
15:36 < andrew12> ericjung: why do you need that?
15:36 < pachet> actually you can drop that to just /foo/:bar/[^/]
15:36 < andrew12> and i'm pretty sure they can
15:36 < ericjung> andrew12: need what?
15:36 < mscdex> xdomox: are you doing the requests in a loop?
15:36 < ericjung> andrew12: multiple threads?
15:36 < andrew12> yes
15:36 < andrew12> why do you need multiple threads?
15:37 < BlackFate> ericjung, you can use a loadbalancer like haproxy
15:37 < pachet> toehio: on second thought, you can't. spacing this morning :[ so yeah, [^/]* for your last segment will catch only stuff that follows the delimiter
15:37 < timoxley> ericjung built in nodejs cluster can listen on same port
15:37 < ericjung> andrew12: i expect many many millions of simultaneous hits
15:38 < andrew12> threading will only make that worse
15:38 < xdomox> mscdex: yeah thats the issue
15:38 < mscdex> xdomox: ok, so you have to create a closure that captures the current variable
15:38 < timoxley> ericjung you don't use JS if you want threading
15:38 < mscdex> wrap your ajax call in that closure
15:38 < ericjung> andrew12: are you high?
15:38 < ericjung> :)
15:39 < BlackFate> ericjung, manners
15:39 < xdomox> mscdex: a what?
15:39 < anildigital_> BlackFate: what is special about haproxy.. why can't we use simple sticky sessions provided in apache
15:39 < ericjung> BlackFate: sorry. so some HAProxy spawn new node.js processes for requests?
15:40 < BlackFate> anildigital_, i just pinpointed a load balancer... use whatever suits you
15:40 < mscdex> xdomox: for (...) { (function(foo) { /* ajax call here using foo data */ })(foo[i]); }
15:40 < ericjung> why response.writeHead() and not response.writeHeader()?
15:41 < [Fudge]> is there any way to make a net.createServer() instance listen on multiple ports?
15:41 < andrew12> no, i'm serious
15:42 < frdmn> asdf12: sorry, i had a syntax error, now it loggs: "string" to console
15:42 < mscdex> [Fudge]: no, but what you can do is share the same connection callback function among multiple servers
15:42 < [Fudge]> hmm
15:42 < andrew12> a single server can't handle "many many millions of simultaneous hits" even with multithreading
15:42 < ericjung> andrew12: i know multiple threads creates other issues, but why do you say it won't help with performance?
15:43 < [Fudge]> mscdex: 6 servers in one process would be fine, right?
15:43 < andrew12> because then the server will have to figure out which thread to send the request to as well
15:43 < [Fudge]> and for a simple echo server, how many would it handle approx?
15:43 < mscdex> [Fudge]: sure, why not
15:43 < andrew12> it just makes it more complicated
15:43 < andrew12> if you need to handle "many many millions of simultaneous hits" you will need many servers and a routing server
15:43 < ericjung> andrew12: process just sends it the first available thread in a thread-pool. there's nothing complicated with that.
15:43 < JohnMcLear> um
15:43 < ericjung> andrew12: i never said i had a single server.
15:44 < mscdex> [Fudge]: just have to test
15:44 < andrew12> it takes more time to do that than it does to just handle it in the main thread
15:44 < JohnMcLear> ericjung: see vertx.io
15:44 < [Fudge]> mscdex: 1024 would be nice
15:44 < toehio> pachet: yeah, i'm trying to find it in the docs, but it's not so easy
15:44 < [Fudge]> (clients)
15:44 < ericjung> o.O
15:44 < JohnMcLear> http://vertx.io
15:44 < mscdex> [Fudge]: i'm sure it can handle a whole lot more than 1024
15:44 < andrew12> and if you needed multithreading you are kind of implying you have a single server
15:44 < [Fudge]> ah thats fine then
15:44 < ericjung> o.O
15:45 < andrew12> anyways, the cluster module lets you have a server running that can handle separate connections in separate processes
15:45 < pachet> andrew12: billions and billions
15:45 < andrew12> MANY MANY MILLIONS
15:45 < pachet> starstuff
15:45 < andrew12> shit tons
15:46 < frdmn> can someone take a look at this: http://pastebin.com/C606EsYZ - i get an "TypeError: Cannot call method 'match' of undefined" error... can someone help?
15:46 < pachet> more requests in my server than there are stars in the sky
15:46 < mscdex> i'd prefer processes vs threads for load balancing like that
15:46 < frdmn> message is set and is a string
15:46 < ericjung> so, i came to node.js with an open mind.
15:46 < ericjung> i really enjoy the syntax and the libraries
15:47 < ericjung> but this is just unbelievable to me
15:47 < mscdex> if a process dies, then it can be easily restarted without affecting everything else
15:47 < xdomox> mscdex: thanks that worked really well
15:47 < andrew12> what exactly are you making that will need to handle "many many millions of simultaneous hits"
15:48 < ericjung> JohnMcLear: i'm looking at vertx.io. where did this come from?
15:48 < JohnMcLear> What do you mean where did it come from?
15:48 < BlackFate> ericjung, if you can forward requests.. cant you just run different ports in every node instance?
15:48 < ericjung> JohnMcLear: looks cool, never heard of it, where can i find out who's behind it , etc
15:49 < JohnMcLear> look on the website
15:49 < mscdex> frdmn: are you sure `typeof message === 'string'` is true? also, why are you doing `new Regexp` with a regex literal?
15:49 < christophercliff> could anybody point me to an example how to organize private, local dependencies with npm?
15:49 < ericjung> BlackFate: forward requests to separate threads, not separate processes
15:49 < JohnMcLear> Sorry, I'm busy
15:49 < frdmn> mscdex, sorry im a total node.js newbie, and i just do trial and error :/
15:50 < BlackFate> ericjung, your problem is that you want to get the most out of every machine?
15:50 < ericjung> BlackFate: of course
15:50 < mscdex> christophercliff: set the `private` package.json variable to true ? this will prevent publishing to npm
15:50 < BlackFate> ericjung, wont this solve your problem? multiple processes on the same machine?
15:50 < bradleymeck> erichynds: vertx.io came from around 2 years ago when some JVM ppl really wanted to try and make modular compute units
15:51 < erichynds> o rly
15:51 < christophercliff> is this appropriate package.json?   "dependencies": {
15:51 < christophercliff>     "my-module": "../my-module/"
15:51 < christophercliff>   }
15:51 < mscdex> frdmn: ok, well make sure that `typeof message === 'string'` first. you can get rid of `new Regexp` and just use the literal as-is
15:51 < bradleymeck> christophercliff: generally dont do relative paths, just name it and link/or bundle it
15:52 < christophercliff> so it needs to be pushed to github or wherever?
15:52 < bradleymeck> ericjung: basically where you want threads, node is going to wait either an addon (threads a gogo) or ipc, no sharing, ever
15:53 < bradleymeck> christophercliff: no, it can still be local
15:53 < bradleymeck> christophercliff: npm link ../my-module --save
15:54 < christophercliff> aha, was not aware of npm link. thanks
15:55 < pachet> trying to force node into a architecture that makes explicit use of threading is going to run into issues
15:55 < pachet> the cost of maintenance will eat your mind like an apple on a fine summer day
15:56 < Gregor> Yeah, trying to avoid the brain-eating apples on typical summer days is a pain.
15:56 < bradleymeck> ericjung: if you really want to go into getting the most out of your machine its going to depend on what you try to do, threaded compute and evented io are entirely different beasts on high performance apps
15:57 < pachet> Gregor: yeah it sounded ok in my head
15:58 < Gregor> pachet: I COULD have gotten what you meant, but I CHOSE not to ;)
16:01 < kurtis> Hey guys, I'm trying to create a custom Authentication system for Node-restify but I'm not quite sure how. Can anyone throw me some pointers?
16:02 < pachet> cookie based?
16:03 < dhci_> how do I do a try catch block when a listen(port) call for httpServer fails, i.e., with EADDRINUSE I just want to clean up my output a little
16:03 < bradleymeck> dhci_: the callback on listen has error as its first argument
16:03 < AAA_awright> kurtis: My advice is don't write your own authentication system
16:03 < dhci_> ok will use that
16:04 < AAA_awright> kurtis: Can you be more specific?
16:04 < kurtis> hmm. Well they offer basic HTTP Auth and then a Key-based auth system. I need something more along the lines of an API-based auth (login/pass) and then a token session (along the lines of how Django does it, if anyone is familiar there)
16:05 < ahungry> hey guys, if using node -e to eval a script, how can I pass in a CLI argument as a parameter to it?
16:06 < kurtis> AAA_awright, does that last message answer your question? (I didn't tag you in the sentence, sorry)
16:07 < AAA_awright> kurtis: This topic comes up in ##crypto like every week, pretty much the answer is:
16:07 < AAA_awright> (1) Don't write your own crypto. Use functions explicitly approved for your use: HMAC, PBKDF2
16:07 < AAA_awright> (2) HTTP Basic authentication over TLS
16:07 < AAA_awright> (3) Have read-only and read-write session keys. Anything that is automatically submitted by a web browser (e.g. cookies) should only store a read-only key, you must not allow writing with cookies only
16:07 < frdmn> mscdex: thanks a lot, it wasnt a string :)
16:07 < mscdex> :-)
16:08 < kurtis> AAA_awright, I'll have to check out HMAC, PBKDF2. I'm not familiar with those methods. My problem with HTTP Auth is that it stores the username/password in the browser's cache. As far as keys go; wouldn't a user manually have to add those to their browser?
16:09 < AAA_awright> kurtis: I meant to say HTTP Basic is for APIs, in web browsers that's effectively the same as cookies and you must not let it perform read/write operations
16:10 < AAA_awright> kurtis: Session keys like a cookie. When you send a session cookie, it needs to be marked "read-only"
16:10 < AAA_awright> So you can't ever delete data using only the cookie
16:11 < kurtis> AAA_awright, hmm. Okay, I'm willing to give that a shot. I'm not quite familiar with using HTTP Basic Auth aside from the browser displays a dialog requesting a Username/password upon request. I've looked this up before (primarily trying to find which headers are used for this process and what the process flow is). Do you have any suggestion on a example project using this? (Client + Server)?
16:12 < AAA_awright> kurtis: If you haven't, read RFC 2616 (HTTP 1.1)
16:12 < shmoon> anyone used momentjs ?
16:12 < kurtis> AAA_awright, perfect. Thank you!
16:12 < shmoon> i need to get timeago but in a diffrent way, like 12m 1s 2d 5h
16:13 < shmoon> just integer and biggest factor that goes
16:15 < AAA_awright> kurtis: Authorization is a really simple header, and it's really only used for non-web-browser user agents. And finally, have a crypto/security expert look over your implementation. Even the best cryptography experts in the world refuse to work alone, they get peer review, tons of it
16:16 < kurtis> AAA_awright, That's good to know. Our implementation is basically a Web-Service with a default Web Interface (javascript) and down the line Mobile Apps. I'm trying to find a somewhat versatile solution. And I think the idea of peer review is a great tip. 
16:17 < bradleymeck> AAA_awright: ssl only is the first step to me not being angry when it comes to things, if only ssl could be sped up on mobile :((
16:18 < bradleymeck> using ssl only*
16:18 < brianc> bradleymeck: I was looking for the code to the 'checkout' module yesterday.  There's no git link in the package.json file
16:18 < brianc> bradleymeck: and googling for "node npm checkout" doesn't exactly help
16:19 < bradleymeck> brianc github search, but i can add a link
16:19 < bradleymeck> brianc: https://github.com/bmeck/node-checkout
16:20 < brianc> bradleymeck: perfectamundo
16:22 < ericjung> bradleymeck: what do you know about http://vertx.io/ ?
16:22 < AAA_awright> bradleymeck: Unfortunately most cryptography isn't provable, it's purely based on the difficulty for modern computers to perform operations, and so if you're weak on all types of computation you get the short end of the stick
16:23 < bradleymeck> ericjung: it does similar to node or silkjs has the same shared state issues as silkjs, needs to do out of band sessions / data sync if you are using units to do a aggregate operation.
16:24 < ericjung> silkjs?
16:24 <@isaacs> konobi: pong
16:24 < bradleymeck> http://www.silkjs.net/
16:25 < ericjung> AAA_awright: i think you're applying the case of one-way hashes to all cyptography
16:25 < ericjung> AAA_awright: what about PKI?
16:25 < AAA_awright> ericjung: Is especially based on difficulty of computation
16:25 < AAA_awright> Theoretically it's possible to factor numbers in polynomial time
16:25 < ericjung> bradleymeck: why/when would someone choose node.js vs. silkjs?
16:25 < AAA_awright> We just don't know how
16:26 < cloudbender> I need to generate a new persona, and I hate the term 'sysop'.  Any suggestions ?
16:26 < cloudbender> and good morning btw
16:26 < pachet> pokemon master
16:26 < cloudbender> lol
16:26 < cloudbender> lol
16:26 < mac_nibblet> Heya peeps
16:26 < dhci_> I can telnet to my NodeJS server and give it a POST request, and it looks like a clean json string comes back out. But jQuery sees it differently it just gets an empty responseText. Here is the sample output from NodeJS does it look correct? http://pastebin.com/kFdT8TPm
16:26 < mac_nibblet> im back!
16:27 < bradleymeck> ericjung: support, package management, code style closer to client side, speed in single process, explicit IPC instead of implicit, OS testing (windows), C++ addon ease, ...
16:27 < cloudbender> webadmin is no good
16:27 < AAA_awright> ericjung: There's very little we can prove. The only provable symmetric encryption is one-time pad, there's an equivelant system for MAC and authentication, there's random number generators with provable security but it's pathetically weak compared to hash-based CSPRNGs
16:27 < cloudbender> techservices, that's the one
16:28 < mac_nibblet> Has Anyone ever had any problems with using a rdbms with NodeJS?
16:28 < pachet> dhci_: setting the right content-type header?
16:28 < dhci_> nevermind, i got it. I was serving the page from http://localhost/ but sending the answer back to http://localhost:8081/
16:28 < ericjung> cloudbender: dominatrix
16:28 < safani> hello all
16:28 < dhci_> pachet its those strict rules for matching the address field
16:28 < cloudbender> no, wrong gender ericjung
16:28 < cloudbender> even on my good days
16:28 < ericjung> bradleymeck: those things are pro or con node.js?
16:29 < ericjung> cloudbender: HeMan
16:29 < ericjung> cloudbender: MasterOfTheUniverse
16:29 < bradleymeck> ericjung: those are pro nodejs, and most could be argued the other way for SilkS in some style
16:29 < cloudbender> Corporate MOU, I like it
16:29 < AAA_awright> Node.js doesn't do package management
16:29 < cloudbender> I'm going with TechServices
16:30 < bradleymeck> AAA_awright: it comes with npm, i will include it when talking about node
16:30 < cloudbender> easy to remember, isolated, pertinent
16:30 < AAA_awright> It's not Node.js
16:30 < AAA_awright> It's not even a half-decent program
16:30 < bradleymeck> AAA_awright: for simplicity i will include it
16:30 < AAA_awright> It's not Node.js, and there's good reaon a library like Node.js would want to exclude it
16:31 < bradleymeck> ericjung: for silkjs, batteries included, explicitly different style from client, program ipc is abstracted / hidden, clustering is automated, ...
16:31 < AAA_awright> That's like saying "Node.js washes your dishes"
16:31 < AAA_awright> Um, okay
16:31 < cloudbender> bbl good morning
16:31 < pachet> there's a module for that
16:31 < pachet> dishes.js
16:31 < bradleymeck> AAA_awright: wait are you talking about silk when refering to `It`? if so that changes my responses
16:32 < bradleymeck> lack of packages is a big problem
16:32 < AAA_awright> bradleymeck: Any Node.js compatible package manager, in the latter case
16:34 < bradleymeck> http://nodejs.org/benchmarks-v0.10-vs-v0.8/fs.html lol at readStream throughput
16:35 < ericjung> .
16:46 < superjoe> bradleymeck, why's that?
16:48 < bradleymeck> superjoe: if you are pumping a smallish sized block (1k) at a time 1726.12% increase over 0.8???
16:48 < superjoe> 17 times faster - that seems reasonable
16:48 < superjoe> assuming something silly was happening before
16:55 < MI6> joyent/node: Andreas Madsen master * bdf7ac2 : child_process: support sending dgram socket  child.send can send net serv - http://git.io/cmW_Pg
17:14 < steffkes> hey guys .. i have short question. there is a ml-posting about node-pcre (http://comments.gmane.org/gmane.comp.lang.javascript.nodejs/52213) which i'd like to use, but it doesn't compile on debian. the TO said sth about a config.h and more information in the readme .. but there is none about it. any suggestions?
17:22 < drudge> mikeal: excellent piece in wired
17:28 < mikeal> thanks :)
17:33 < SandorKrasna> good morning everyone
17:34 < SandorKrasna> I have an express install going and noticed that i have two node_module folders, one in the root  and one in myapp folder
17:35 < SandorKrasna> is that normal
17:35 < asdf12> what do you mean by root folder
17:35 < asdf12> you probably had it there from previously trying to run npm install from that folder
17:36 < SandorKrasna> when I instantiated the express instance it created a folder called myapp
17:36 < SandorKrasna> so i have myapp and node_modules under root
17:37 < SandorKrasna> and i have another node_modules under myapp
17:37 < asdf12> you probably ran `npm install express` in your folder
17:37 < asdf12> root* folder
17:37 < SandorKrasna> yes probably
17:38 < SandorKrasna> which one is right?
17:39 < asdf12> i'm not sure what you mean by right, both are not wrong?
17:40 < asdf12> though maybe on windows that's where npm install -g (system wide install) places npm modules?
17:40 < pachet> make them fight
17:40 < pachet> the one with the best modules wins
17:40 < SandorKrasna> i'm on a mac
17:40 < asdf12> oh
17:40 < AviMarcus> I'm on a horse.
17:40 < SandorKrasna> where is the correct place where node_modules should be
17:41 < asdf12> inside the app's folder
17:41 < SandorKrasna> if I remove the node_modules folder in root is that going to break anything
17:41 < pachet> only one way to find out
17:41 < genazt> maybe
17:42 < asdf12> no
17:42 < genazt> move it from there or rename it
17:42 < context> sandorkrasna: npm list -g|head-1
17:42 < context> head -1
17:44 < SandorKrasna> i have some extraneus packages 
17:44 < SandorKrasna> it says
17:44 < SandorKrasna> let me try to just move it
17:44 < SandorKrasna> i dont know how I ended up with two
17:47 < SandorKrasna> i moved it now it says UNMET DEPENDENCY express 3.x when i do npm list
17:47 < SandorKrasna> npm ERR! missing: express@3.x, required by hello-world@0.0.1
17:47 < SandorKrasna> npm ERR! not ok code 0
17:47 < pachet> :[
17:48 < SandorKrasna> what a mess
17:48 < [Fudge]> I need to add a listener then delete the listener after a while
17:49 < [Fudge]> how would I go about doing this?
17:49 < [Fudge]> oh lovely
17:49 < [Fudge]> netsplit
17:49 < daekano> boom
17:49 < bradleymeck> [Fudge]: ee.removeListener(theEvent, theListener) whenever you want to remove it
17:50 < [Fudge]> aha
17:50 < [Fudge]> bradgignac: so I should assign the listener to a variable then
17:50 < [Fudge]> right?
17:50 < bradleymeck> yep
17:50 < [Fudge]> I don't do that atm
17:50 < [Fudge]> I just do blah.on("connection" ...)
17:51 < Dededede4> how to debug node.js causing 100% cpu usage randomly ?
17:51 < bnoordhuis> Dededede4: what os?
17:51 < Dededede4> debian
17:51 < Dededede4> 6
17:51 < bnoordhuis> Dededede4: strace -p <pid of node> will tell you what it's doing
17:54 < SandorKrasna> do I have to always issue npm install from the root of the app
17:54 < SandorKrasna> or it doesnt matter
17:56 < MI6> joyent/node: piscisaureus created branch msi-fixes - http://git.io/hjYLSQ
17:58 < bradleymeck> SandorKrasna: it will find the package.json folder and use that compared to cwd
18:02 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:02 < Dededede4> bnoordhuis: http://pastebin.com/ucqRAyE9
18:03 < Dededede4> I do not understand a line :D
18:04 < bradleymeck> Dededede4: what does ps axl print out
18:05 < SandorKrasna> every time i install a package in npm it says "extraneous" when I do npm list
18:06 < bradleymeck> SandorKrasna: cause you did not put it in package.json or use --save(-bundled|-optional)
18:06 < MI6> joyent/node: Bert Belder msi-fixes * 1b15063 : win/msi: miscellaneous style cleanups (+6 more commits) - http://git.io/3A3IVg
18:11 < SandorKrasna> thanks bradley 
18:14 < Dededede4> bradleymeck: 
18:14 < Dededede4> ps axl | grep node
18:14 < Dededede4> 0  1000 11709  2796  20   0 1056188 467220 -    Rl+  pts/2      1:25 node main.js
18:15 < Dededede4> 0  1000 11709  2796  20   0 1057716 468580 -    Rl+  pts/2
18:15 < [Fudge]> bradleymeck: if I remove the callback function, will the listener automatically destroy?
18:15 < bradleymeck> [Fudge]: no, it only removes the listener, node does not like magic
18:15 < [Fudge]> aw
18:15 < [Fudge]> I'm going to make node like magic
18:15 < bnoordhuis> Dededede4: that strace output you posted, does it repeat like that ad infinitum?
18:16 < bradleymeck> [Fudge]: it will fight you. but good luck, and keep hooks inside your abstractions
18:16 < [Fudge]> haha I'm kidding
18:16 < Dededede4> The output does not stop out, bnoordhuis
18:17 < bnoordhuis> Dededede4: but it's mostly like that? i.e. clock_gettime, gettimeofday, futex and epoll_wait?
18:17 < bradleymeck> looks like its just churning Date.now() or something like a logger just spamming that in a loop
18:18 < Dededede4> My script uses all the time Date.now
18:19 < pachet> :[
18:20 < bradleymeck> Dededede4: its fine to use that but something is looping probably
18:22 < bnoordhuis> Dededede4: node --prof --log script.js and run the v8.log through nprof
18:24 < Dededede4> This is much 26 new date() by seconds?
18:25 < Dededede4> ah, no 26…
18:33 < rillian> is there a way to get the node path inside package.json?
18:33 < rillian> https://github.com/Worlize/WebSocket-Node has scripts: {'install': 'node install.js'}
18:33 < rillian> which doesn't work on debian because the node executable is called 'nodejs'
18:36 < mac_nibblet> rillian: add an alias
18:36 < mac_nibblet> alias node=nodejs
18:36 < mac_nibblet> i your .bashrc
18:36 < mac_nibblet> in
18:36 < rillian> mac_nibblet: where?
18:36 < mac_nibblet> or in the terminal
18:36 < mac_nibblet> man alias
18:37 < rillian> I actually tried that on the terminal, but it doesn't propagate to npm's script invocation
18:37 < rillian> but other packages I've installed haven't had this problem
18:37 < rillian> I wondered if there was a way to fix it upstream
18:40 < mac_nibblet> rillian: ln -s /usr/bin/nodejs /usr/bin/node
18:40 < mac_nibblet> not pretty but it works
18:40 < rillian> sure
18:40 < rillian> I'd still rather fix it upstream
18:41 < bradleymeck> rillian: there are long threads in the debian package manager mailing list about this, upstream will not fix it
18:42 < rillian> I meant fixing it in package.json
18:42 < rillian> I know debian's not going to rename the executable any time soon
18:42 < pats_Toms> why not to compile from source?
18:44 < rillian> pats_Toms: that's how I installed it.
18:45 < rillian> this is about fixing it for next time, and for everyone else trying to do this on debian-derived systems
18:45 -!- mode/#Node.js [+o TooTallNate] by ChanServ
19:02 < rillian> turns out debian actually has a package just to add the symlink
19:09 < shmoon> hi
19:10 < EvanCarroll> Could someone explain to me the difference between boilerplate.js and backbone.js
19:11 < daekano> lol
19:15 < shmoon> if someone can help me out http://stackoverflow.com/questions/15279565/twitter-api-1-1-oauth-get-use-data
19:15 < jrajav> EvanCarroll: http://www.wolframalpha.com/input/?i=levenshtein+distance+between+boilerplate+and+backbone
19:15  * jrajav is so helpful
19:19 < EvanCarroll> That's not to helpful.
19:20 < EvanCarroll> Next person to make a vague description and a fancy website for a javascript module gets shot.
19:20 < EvanCarroll> BoilerplateJS provides reference architecture to take the pain out of large scale JavaScript development. BoilerplateJS is a collection of product engineering patterns, and some solid integrations of industry-leading JavaScript libraries.
19:23 < bradleymeck> EvanCarroll: I have heard of / seen Backbone, I did not even know of BoilerplateJS and i attend a decent amount of user groups
19:24 < EvanCarroll> Yea, I'm trying to stay up to date with the horde of JS development in the past year, and I'm having a hard time wrapping my head around exactl what is out there.
19:24 < EvanCarroll> This was serious question too, it'd have been nice to have a serious answer even if only 15 words.
19:25 < holzp> jade doesnt automatically escape strings used in attributes?
19:25 < holzp> well encode not escape
19:26 < icebox> holzp, #{}
19:27 < holzp> yeah, but when i drop that into an attribute string it doesnt escape spaces
19:27 < holzp> which i thought it would
19:28 < holzp> url='http://something.com/#{filename}''
19:28 < holzp> thought filename would have spaces uriencoded
19:28 < EvanCarroll> holzp: does for me.
19:28 < icebox> holzp, \#{}
19:28 < EvanCarroll> holzp: <div class="&gt;">foo</div>
19:28 < EvanCarroll> holzp: jade: `` div(class=">") foo
19:29 < holzp> brackets yes, does it do spaces for you?
19:30 < EvanCarroll> Why would encode spaces in attribute keys?
19:30 < holzp> attribute values
19:30 < holzp> for a url
19:30 < EvanCarroll> Why would encode spaces in attribute values?
19:30 < holzp> facebook share link
19:30 < holzp> or twitter share link
19:30 < EvanCarroll> ah.
19:31 < EvanCarroll> holzp: nope
19:31 < EvanCarroll> holzp: doesn't.
19:31 < holzp> ok
19:32 < holzp> encodeURI it is then!
19:32 < bradleymeck> holzp: encodeURIComponent is the pref one usually
19:32 < EvanCarroll> holzp: I'd file a bug report.
19:32 < EvanCarroll> holzp: if you won't, I will.
19:32 < EvanCarroll> all href, and src should be url-encoded.
19:32 < holzp> you can its cool I wont have time till tonight
19:35 < EvanCarroll> https://github.com/visionmedia/jade/issues/915
19:38 < holzp> cool
19:39 < holzp> I think it is odd that #{} would escape some markup but not others
19:39 < holzp> oh well, perhaps there is a good reason we will see...
19:40 < faceleg|work> shmoon: I've had a go, check your question
19:40 < faceleg|work> basically api v 1.1 requires authentication
19:40 < faceleg|work> and found an example for twitter using node-oauth that should get you started
19:40 < Andy80> hi
19:41 < pachet> hi
19:42 < Andy80> I'm trying to do an http.request(.... but I keep getting this error: { [Error: getaddrinfo ENOTFOUND] code: 'ENOTFOUND', errno: 'ENOTFOUND', syscall: 'getaddrinfo' }
19:42 < Andy80> I've googled the error and for some people looks like a dns problem, but even adding the ip/host to resolv.conf didn't fix my problem
19:42 < bradleymeck> Andy80, means the domain name was not found
19:43 < Krinkle> isaacs: Hi, you there? I haven't been using npm for a while, I've switched computers since I originally created my account. I'm trying to get back in, but my account is uppercase still from the old days.
19:43 < Andy80> bradleymeck, but if I nslookup it from terminal, I can find it.... and I'm calling node from the same terminal
19:43 < Krinkle> I've reset my password, but I can't npm-adduser it locally since it says it has to be lowercase.
19:43 < Krinkle> https://npmjs.org/~Krinkle
19:43 < bradleymeck> Andy80: gist the node code
19:44 < faceleg|work> bradleymeck: what is the url for the "hastie" paste bin?
19:44 < Andy80> bradleymeck, uhm... do you mind if I pass you the code in private dialog? You will understand why.
19:44 < bradleymeck> faceleg|work: what?
19:44 < bradleymeck> Andy80: sure
19:44 < Krinkle> I can create a new one that complies with the new username rules, but I woulnd't be able to grant access to my self as I can't authenticate with  my old account in npm-adduser.
19:44 < pachet> bradleymeck: you will be... *you will be*
19:46 <@isaacs> Krinkle: create a new one, and then send me an email from the account you're using
19:46 <@isaacs> Krinkle: and i'll move the packages over.
19:46 < Krinkle> thx
19:50 < khrome> anyone have any experience using jsdom to merge documents? every time I mingle nodes it spews a 'wrong document' error…
19:51 < bradleymeck> khrome: use document fragments when xfering between docs, do not directly add nodes
19:51 < bradleymeck> same thing happens in web browsers
19:54 < khrome> that makes sense it would mimic browser behavior, though I'd guess I'm doing an extra parse and render to bypass the sandbox… would be way more slick to just turn it off… ::checks code:: thanks for the kick in the right direction
20:00 < sayd> hi, in the npm help json content, regarding the main section.. can someone tell me what the main script is here: For  most  modules,  it  makes the most sense to have a main script and often not much else.
20:00 < MI6> joyent/node: isaacs master * e7b8bad : bench: Do math on numbers in compare.js, not strings (+1 more commits) - http://git.io/BcRi3g
20:02 < bradleymeck> sayd: generally you dont need anything as an entry point except "main": "lib/mymodule.js" or w/e
20:03 < sayd> bradleymeck: ok, and i guess the index.js is just soemthing that would return require('lib/mymodule') 
20:03 < sayd> in that case?
20:04 < bradleymeck> sayd: unsure on what index.js has to do with it, if you require a module directory it will check the package.json and get the main field as the file to load
20:06 < sayd> bradleymeck: index.js is the default (i like to stick w/defaults) for the `main` field when `npm init`ing
20:07 < bradleymeck> sayd: no index.js is the default value for the main field in `npm init` follows normal require semantics, just npm defaults to index.js
20:08 < genazt> the normal require also defaults to index.js
20:08 < sayd> so, i return something in that main file right.. thats basically the exports from my lib
20:09 < sayd> return require('lib/my').foo;
20:09 < sayd> something like that?
20:09 < genazt> set the main section in the package.json
20:12 < gavlig> hey guys! I cant connect to postgres db with any-db or pg modules. with any-db i do the following: connection string - postgres://postgres:pass@localhost:5432/someDB and create pool with pool = anyDB.createPool(dbURL, {min: 20, max: 100, onConnect: function (conn, done) { console.log("connected!"); done(null, conn) }}); but onConnect event never fires. Is it something wrong with my code or i should look into db? 
20:13 < gavlig> and i'm pretty sure that postgres is running
20:16 < kontoo> quick question: are there frameworks to build desktop applications with node.js? my requirements are a database and that the application should be easy to start
20:20 < bradleymeck> kontoo there are node-webkit and appjs
20:20 < genazt> kontoo: appjs
20:21 < kontoo> i heard about app.js, can i use a database with that?
20:21 < genazt> yes
20:21 < gavlig> ok, now i see that even when i turn db off, createPool still doesnt say anything about it...
20:21 < SargoDarya> hey guys, any idea on how to to 0.1 + 0.2 without it becoming 0.300000000004
20:21 < genazt> >> 0.1+0.2
20:21 < genazt> where is the bot ? :D
20:22 < superjoe> SargoDarya, are you trolling?
20:22 < superjoe> if not, what is the real problem you're trying to solve?
20:22 < bradleymeck> SargoDarya: floats, they happen, use integers for exact precision units or a bignum library
20:22 < superjoe> bradleymeck, what do you mean "use integers"?
20:23 < genazt> (1+2)/10
20:23 < blueadept> anyone here use browserify?
20:23 < genazt> is better than 0.1+0.2
20:23 < bradleymeck> superjoe: dont use something requiring a mantissa, mantissa's cause inaccuracy
20:23 < gavlig> SargoDarya: dumb way - ((0.1*10)+(0.2*10))/10
20:23 < bradleymeck> blueadept: a few of us do but im still using v1
20:25 < blueadept> yeah just went to v2 and everything broke and there's no more -watch command!
20:26 < gavlig> so, no ideas why pg wouldn't produce any errors even when i try to connect to non existing db?
20:28 < kurtis> Hey guys, how do you access a variable in a parent module? e.g. I'm doing some work in a JS file that's been included through require() and I want to use something in the file that require()'d it
20:28 < bradleymeck> kurtis: you dont, pass it to the child as an argument somehow
20:29 < bradleymeck> or add it to the parent's exports i guess
20:29 < deoxys> kurtis, use an "array"
20:29 < deoxys> export it
20:29 < deoxys> require it as a module
20:29 < deoxys> and take it config.dbhost for example
20:30 < kurtis> cool I'll give that a try. thanks
20:30 < jamescarr> I use oracle
20:30 < deoxys> i'll gist you a snippet
20:31 < kurtis> Would that be the best way to deal with something such as a database connection? ( so I don't open a connection on every DB call )
20:32 < deoxys> kurtis, https://gist.github.com/amurdaca/5111540
20:32 < deoxys> yes you could put all db stuff in a file
20:32 < deoxys> then require it
20:32 < deoxys> in my main app.js file i setup the db then all the code can access it
20:33 < kurtis> awesome. and thanks for the gist!
20:33 < deoxys> np :)
20:57 < asdf12> oh
21:02 < rborg> How does one get the external IP addr of current process?
21:02 < context> what ?
21:02 < context> process' dont have external ip addresses ?
21:02 < azylman> Processes don't have IP addresses
21:03 < azylman> Machines do
21:04 < rborg> azylman thanks - so .. ?
21:05 < context> ... so .. what ?
21:05 < context> rborg: can you please be more vague with your questions? you have simply given us far too much detail for any of us to possibly be able to help
21:05 < azylman> I'm not sure what the question is
21:06 < asdf12> does the node standard library have tests?
21:06 < rborg> context so how does one get the external IP addr of the machine on which a given proc is running?
21:06 < rborg> whois context
21:06 < azylman> You can check something like http://www.whatsmyip.org/
21:06 < context> rborg: os.networkInterfaces()
21:06 < context> http://nodejs.org/api/os.html#os_os_networkinterfaces
21:07 < azylman> Or that, I guess, is probably better. lol
21:07 < context> rborg: well... thats the MACHINES ip address
21:07 < context> rborg: which doesnt mean 'external' or ... its internet ip
21:09 < rborg> context - yeah not really what I'm looking for
21:09 < asdf12> i can't find tests for node lib/ in the node repository does it not have any?
21:09 < azylman> As far as I'm aware I don't think you can get that from a machine, because it doesn't know what it's external IP address is
21:09 < azylman> Only the routers, switch, etc. knows
21:10 < azylman> You have to do something else to find out
21:10 < azylman> You can make a request to http://ipecho.net/plain
21:10 < context> rborg: jsonip.com
21:10 < rborg> azylman would probably spawn a child process (ifconfig) then parse the output
21:10 < context> rborg: os.networkInterfaces() is the same thing as ifconfig
21:10 < bradleymeck> asdf12: joyent/node/lib/test/**?
21:10 < context> which is INTERNAL ip address
21:10 < bradleymeck> node/test/** not lib
21:11 < context> rborg: only way to get extenral is to request it from an external place, so azylman's ipecho.net/plain or jsonip.com or something similar
21:12 < asdf12> bradleymeck: don't see relevant tests in there for lib/
21:13 < bradleymeck> asdf12: they are all using node's js so it all is doing things in lib
21:13 < asdf12> so no unit tests?
21:14 < bradleymeck> they are all tests? im not understanding
21:14 < bradleymeck> https://github.com/joyent/node/blob/master/test/pummel/test-exec.js for example
21:15 < asdf12> yea, those look more like integration tests
21:16 < othiym23> asdf12: Node is a platform, traditional unit tests don't really make a lot of sense for it
21:16 < bradleymeck> asdf12: integration vs unit is semantic, pre/post conditions, https://github.com/joyent/node/blob/master/test/pummel/test-buffer-big.js tests buffers, unsure what you want that wont be "integration"
21:17 < bradleymeck> anyways gtg
21:19 < asdf12> i'm just trying to figure out the best way to write a failing test case, i guess i will create a new file? in the likeness of the files in test/pummel
21:20 < othiym23> as long as it follows conventions and correctly exhibits the test behavior that supports whatever change you're proposing, I don't think anyone on core is going to be too bugged
21:40 < EhevuTov> anyone have an easy way to pull in the "version" from the local package.json file into a var in their program and use it?
21:41 < azylman> You can just require json files, I believe
21:41 < EhevuTov> azylman, ah, nice
21:41 < azylman> "package = require('./package.json');"
21:41 < azylman> package.version
21:41 < d48> +1 on what azylman said
21:44 < context> or do it the ghetto way and JSON.parse it .... require() is a bit easier though
21:44 < michael-robinson> azylman: holy crap thats awesome
21:47 < EhevuTov> azylman, works simple and perfect. Thanks
21:47 < azylman> np :)
21:51 < azylman> Best way to write code ever: "You Make My Dreams" by Hall and Oates on repeat for 16 hours
21:52 < faceleg> I usually listen to nick cave 
21:52 < faceleg> & the bad seeds
22:13 < superjoe> azylman, my girlfriend currently has her alarm clock set to that song
22:13 < superjoe> I gotta admit - there are plenty of worse songs to wake up to
22:14 < superjoe> azylman, also you can leave off the .json
22:14 < superjoe> require('./package').version
22:15 < havvy> IMO, require('./package.json') helps document the code better.
22:15 < superjoe> havvy, I'd agree with you
22:28 < luminous> hello! when using socket.io, how would you "segregate" streams
22:32 < euoia> luminous: what do you mean by segregate? Is this a specific technical concept that relates to websockets?
22:32 < faceleg> do you mean namespace?
22:32 < faceleg> or rooms?
22:32 < euoia> there is support for rooms
22:33 < euoia> I implemented a chat server with multiple rooms in socket.io but I couldn't find any way to do it without accessing a part of its privates
22:33 < euoia> I think the upcoming 1.0 release might help things
22:34 < euoia> but it's been a while coming
22:34 < euoia> also there is a socket.io channel
22:35 < luminous> what are the differences between namespaces/rooms
22:35 < faceleg> i'm not sure about rooms
22:36 < faceleg> but you can use seperate auth for differnent namespaces
22:36 < faceleg> or for ex. have main stream open without auth but have a private namespace for sensitive content
22:36 < faceleg> (I do this)
22:36 < faceleg> I've no exp  with rooms sorry
22:36 < luminous> interesting
22:37 < faceleg> i'll find the docs for authorising namespaces / main 
22:37 < euoia> I don't have any experience with namespaces
22:37 < luminous> do you have ny code i may refer to asan example?
22:37 < luminous> *any
22:37 < faceleg> luminous: see global / namespace auth docs here: https://github.com/LearnBoost/socket.io/wiki/Authorizing
22:38 < luminous> great, thanks!
22:38 < faceleg> I use passport-socketio https://github.com/jfromaniello/passport.socketio
22:39 < faceleg> with socket.io to link my passport-github auth with sockets
22:39 < luminous> do you have your chat app on github?
22:39 < faceleg> if you get stuck wtih authorizing namespaces ping me (won't be able to provide code until 10+ hours from now
22:39 < faceleg> nah it's not a chat app
22:39 < faceleg> I use sockets in place of ajax with AngularJS
22:40 < luminous> ah
22:40 < euoia> here's my chat app, it uses express
22:40 < faceleg> and no the code is not available anywhere buy my local, not released yet
22:40 < euoia> https://github.com/euoia/node-iochat-express
22:40 < luminous> euoia: are you using rooms or namespaces?
22:40 < euoia> rooms
22:41 < faceleg> euoia: do you know if you can auth rooms separately or do they inherit auth from main / their namespace?
22:41 < luminous> great,I can compare :)
22:41 < faceleg> lol if only someone here had exp with both rooms + ns
22:41 < luminous> hah
22:41 < luminous> euoia: how are you auth/auth?
22:41 < euoia> I don't have any experience with ns :<
22:42 < euoia> The actual chat component is here: https://github.com/euoia/node-iochat but it is designed to work with express
22:42 < luminous> euoia: do you not have any auth?
22:43 < euoia> I'm not sure what auth means in this sense, it uses the express session for auth
22:43 < faceleg> I think that' show all sio auth works, piggy backing off main session
22:43 < faceleg> at least in my exp
22:43 < euoia> I haven't actually looked into socket.io auth, it's possible that it's not at all secure - it's really a work in progress
22:44 < luminous> :D
22:44 < limeforce> hey guys! anyone done irc bots in node?
22:44 < limeforce> im trying to get one to join a channel. that's not working and i cant figure out a way to narrow down the problem
22:44 < echo> Yep, I'm speaking to you through one. node-irc -- super easy.
22:45 < hackygolucky> limeforce: I just made one last week.
22:45 < limeforce> yep, im using npm install irc too
22:45 < limeforce> or node-irc :)
22:46 < hackygolucky> do you have a gist we can look at?
22:47 < Sendoushi> how is the node book from o'reilly anyone read it?
22:47 < limeforce> creating one, 1sec
22:47 < Sendoushi> looking for good javascript books
22:47 < Sendoushi> related to frameworks and such
22:47 < euoia> JavaScript: The Good Parts
22:47 < euoia> Oh.
22:48 < euoia> There's a book called JavaScript patterns, which I haven't read
22:48 < Sendoushi> euoia: that one is from o'reilly i'll check
22:48 < limeforce> here's the gist: https://gist.github.com/limeforce/5112546
22:48 < euoia> JavaScript: The Good Parts is a great book, and short
22:48 < Sendoushi> yep do you think it is worth it?
22:48 < Sendoushi> the patterns one
22:48 < Sendoushi> i have the Actionscript 3 Design Patterns
22:48 < euoia> No idea, I have not read it
22:48 < euoia> I meant to
22:48 < euoia> just haven't had time
22:48 < Sendoushi> http://shop.oreilly.com/category/deals/javascript-owo.do?code=WKJVS
22:48 < euoia> I haven't checked reviews or anything
22:48 < havvy> If you've read the patterns book in one language. You've read it in all languages. ;)
22:48 < euoia> heh
22:48 < limeforce> hackygolucky: obviously, i have my server/channel info in place of the <<>>
22:49 < euoia> I read the GoF book cover to cover for the first time a few months ago
22:49 < Sendoushi> havvy: yeah i guess. still it hasn't really entered my head but... i know what MVC is ehehe
22:49 < euoia> GOD it's dull
22:49 < euoia> and not really appropriate to JavaScript at all
22:49 < faceleg> Code Complete
22:49 < Sendoushi> euoia: hm?
22:49 < faceleg> Pragmatic Programmer
22:50 < havvy> Sendoushi: Well. Node.js gives you pub/sub (a subset of the observer pattern) for free with Event Emitters.
22:50 < Sendoushi> faceleg: talking to me?
22:50 < havvy> So if you want to learn patterns, look at that one.
22:50 < euoia> There's a fairly extensive stack overflow thread with all the classics in
22:50 < faceleg> Sendoushi: oh yeah
22:50 < Sendoushi> never heard of those books faceleg
22:50 < euoia> Head first design patterns is quite decent too
22:50 < faceleg> Sendoushi: they're general programming books
22:50 < euoia> if a bit silly, and Java oriented
22:50 < faceleg> Sendoushi: http://eloquentjavascript.net/contents.html
22:51 < faceleg> Sendoushi: http://www.yuiblog.com/crockford/
22:51 < Sendoushi> well to be fair i don't really know what i look in a book
22:51 < faceleg> Sendoushi: http://stackoverflow.com/questions/409056/top-rated-javascript-blogs
22:51 < Sendoushi> since it's not the basic
22:51 < faceleg> Sendoushi: personally I find language books useless
22:51 < Sendoushi> nor the too much advanced
22:51 < faceleg> Sendoushi:  read generaly programming books, which will teach you the state of mind and general techniques that apply to all progrmaming
22:52 < Sendoushi> hm
22:52 < faceleg> for language skill just start working and asking questions, readong blogs, collaborating on github
22:52 < hackygolucky> limeforce: I'm actually not seeing anything wrong with the server connection code. Unless you are not entering your server name or irc channel correctly...
22:52 < faceleg> submitting pull requests is a great way to learn whether your patterns are up to scratch
22:52 < hackygolucky> how are you running it to test it out?
22:52 < faceleg> mostly don't worry too much, just try to enjoy yourself
22:52 < Sendoushi> hmmm
22:52 < faceleg> Sendoushi:  but *do read* code complete & pragmatic programmer
22:52 < Sendoushi> there's some trickery here.
22:53 < Sendoushi> i'm a designer and front-end developer
22:53 < faceleg> Sendoushi:  they're even not too dull!
22:53 < limeforce> hackygolucky: thanks for checking, ill try a couple of things
22:53 < Sendoushi> so i have to half my time between both
22:53 < Sendoushi> i don't find myself making better code than others since others are more of a fully programmer
22:53 < hackygolucky> limeforce: are you running node 'filename' to test it?
22:53 < faceleg> it's a learned skill, not innate. they've just been doing it longer
22:54 < faceleg> reading a book about js won't make you great
22:54 < faceleg> you've got to ensure you've the right mindset and a generaly understanding of programming basics - that are not language specific
22:54 < faceleg> general*
22:55 < limeforce> hackygolucky: im mainly trying to run it on cloud9, but i figured that could cause problems so i tried it locally also (node irclogger.js)
22:55 < Sendoushi> well i code for a while now from as3 to php and even js but... yeah...
22:55 < Sendoushi> i also have to un-rust myself on the design
22:55 < limeforce> hackygolucky: the script is alive at least as i included a console.log() there
22:55 < Sendoushi> kind of letting the design slack and rust and i shouldn't
22:55 < faceleg> neither of those are languages that will force your to learn good habits
22:55 < Sendoushi> i guess
22:55 < Sendoushi> i'll check those two you told me 
22:56 < faceleg> js won't either, so it's good to read some general books. CC & PragProg are generally accepted as must reads
22:56 < faceleg> while you're reading, pick a framework and makeyourself a todo app, seems to be waht all the kids do these days
22:56 < Sendoushi> nhieee
22:57 < Sendoushi> todo app
22:57 < Sendoushi> i have another in mind that shouldn't be much complicated
22:57 < Sendoushi> something like a mini CRM
22:57 < faceleg> yeah if it's your project then even better
22:57 < faceleg> if you want to taste some awesome, consider working with AngularJS
22:57 < faceleg> it's like crack
22:57 < Sendoushi> there are better solutions around but it's a good way to start doing something and building folio also
22:57 < Sendoushi> i don't like angularjs
22:58 < hackygolucky> limeforce: you could take a gander at mine for help maybe? https://github.com/hackygolucky/wotdBot/blob/master/index.js
22:58 < Sendoushi> i've tried some frameworks already
22:58 < faceleg> too many sharp edges?
22:58 < Sendoushi> too strange...
22:58 < Sendoushi> too awkward for me
22:58 < faceleg> I didn't like angularjs until I grokked it
22:58 < faceleg> no
22:58 < faceleg> it's just a VERY different approach
22:58 < limeforce> hackygolucky: wonder if you have any ideas about any way of testing the bot? only thing that comes to mind is: try to run script --> look at channel if bot joined
22:58 < Sendoushi> i think i prefer ember between them
22:58 < faceleg> and apparently (according to google) the way browsers will be heading anyway
22:58 < faceleg> fair enough
22:58 < Sendoushi> now i'm reading some stuff about sprite.js
22:58 < faceleg> personally I think angularjs is indescribably amazing
22:59 < Sendoushi> i think i'll just give a try for the sake of giving a try
22:59 < Sendoushi> there are some things with angularjs that are weird
22:59 < hackygolucky> limeforce: you can add a listener for errors as well(see my code)
22:59 < Sendoushi> like $scope has to be $scope otherwise won't work
22:59 < Sendoushi> hard to explain but experienced that problem
22:59 < faceleg> angularjs' weirdess is all there for a reason
22:59 < faceleg> I just ran with it 
22:59 < faceleg> for some weeks
22:59 < faceleg> then finally started to get it
23:00 < faceleg> I went from backbone to it
23:00 < thinkerweb> I downloaded the linux package, unpacked it, and was able to run npm from the bin directory.  I guess it isn't exactly installed.  Is it ok like that?
23:00 < faceleg> thinkerweb: yes definitely
23:00 < faceleg> thinkerweb: actually I don't know what you're talking about b/c you didn't say 
23:01 < Sendoushi> oh well... i found it :s nhie! so... if i don't like spine i guess i'll go back to ember
23:01 < faceleg> angular angular angular
23:01 < Sendoushi> which seemed a little bit more straightforward
23:01 < limeforce> hackygolucky: cool clips you have there in your code :D
23:01 < thinkerweb> faceleg, http://nodejs.org/download/
23:01 < Sendoushi> tried already express and meteor also but those are different frameworks
23:01 < faceleg> thinkerweb:  if you're ok with it then great!
23:01 < faceleg> angular angular angular
23:01 < hackygolucky> limeforce: thanks. 
23:04 < sitapati> good $TIME_OF_DAY
23:04 < limeforce> hackygolucky: oh well, cant make sense of this now. i just wanted to make a quick little helper but i suppose ill find a workaround later. thanks for help
23:05 < euoia> faceleg: how many hours would you say it takes to get reasonably comfortable with AngularJS... like to the point you could knock up a To Do app without consulting the docs every minute?
23:05 < faceleg> euoia: uhhh
23:05 < faceleg> it took me um
23:05 < sitapati> i'm trying to use a stream to pipe the stdout of various execs to a websocket
23:05 < faceleg> maybe 10? maybe 15
23:05 < euoia> faceleg: if you don't think that's a fair reference then by all means give a different example
23:05 < euoia> ok
23:05 < sitapati> can't get it to work
23:05 < faceleg> eydaimon: no I know exactly what you mean
23:06 < faceleg> angular is amazing but it is maybe one of the biggest paradigm shifts I've had to make in terms of front end dev
23:06 < euoia> faceleg: that's useful to know
23:06 < faceleg> you pretty much have to start from scratch
23:07 < faceleg> Sendoushi: euoia this article would have been very helpful for me if I had found it at first: http://stackoverflow.com/questions/14994391/how-do-i-think-in-angularjs-if-i-have-a-jquery-background
23:07 < euoia> faceleg: thanks
23:07 < Sendoushi> hmm
23:07 < faceleg> if you like node, then angular is worth your time. node and angular are wonderful together. Google has built angular like it is for a reason
23:07 < faceleg> one reason is bandwidth
23:07 < faceleg> all your views are static html
23:07 < faceleg> so after initial asset & view load they're cached
23:08 < faceleg> then all interactions are handled on client, rendering on client, data transfer is in miniscule JSON
23:08 < Sendoushi> still i've seen some comparisons with ember where they say that both are on the same step
23:08 < faceleg> this is good fot the earth
23:08 < faceleg> I've no xp with ember
23:08 < Sendoushi> maybe that's the problem :P
23:08 < faceleg> I don't have time to learn more than one massively new thing unfortunately, all my exp is from @ home projcet
23:08 < faceleg> :P
23:08 < Sendoushi> as i said angular is awkward
23:08 < faceleg> I thought so at first
23:08 < faceleg> now I vehemently disagree
23:09 < Sendoushi> to use the html elements attributes?
23:09 < Sendoushi> i just hate that
23:09 < Sendoushi> i really hate
23:09 < faceleg> why?
23:09 < faceleg> it's extending the dom
23:09 < Sendoushi> if it is like handlebars and such well ok
23:09 < Sendoushi> but attribute like?
23:09 < Sendoushi> and having to say "hey this is an app html"
23:09 < faceleg> you mean like <div ng-show="show()"></div>
23:09 < euoia> faceleg: have you used backbone? I assume it's essentially a competitor to angularJS. I haven't used it, I just want to know whether you have compared them.
23:09 < Sendoushi> well i just don't like it
23:09 < Sendoushi> yeah like that
23:09 < faceleg> euoia: I went from bb to ang
23:09 < faceleg> ang > bb
23:10 < Sendoushi> euoia: backbone isn't really that
23:10 < Sendoushi> backbone is more of a... 
23:10 < faceleg> bb is like, 3+ years old
23:10 < Sendoushi> how to put it... isn't that complete
23:10 < faceleg> it's like MVC light
23:10 < faceleg> lite*
23:10 < Sendoushi> yes thats it
23:10 < euoia> sounds quite good to me; heavy frameworks are scary
23:10 < Sendoushi> angular is lightweight
23:10 < faceleg> angular is your friend
23:10 < faceleg> and mistress
23:10 < Sendoushi> ember is lightweight
23:11 < Sendoushi> knockoutjs and such are all lightweight
23:11 < Sendoushi> not as lightweight as backbone
23:11 < Sendoushi> but... the difference is minimal
23:11 < Sendoushi> you won't even notice it on the long run
23:11 < faceleg>  think bb might have been one of the first attempts at proper mvc? Don't know my js framework history
23:11 < euoia> faceleg: I'll give it a shot tonight. I'll try to convert my chat app to angular.
23:11 < faceleg> ang is 47kb
23:11 < Sendoushi> faceleg: i guess so
23:11 < Sendoushi> regarding mvc i think it was the first
23:11 < faceleg> euoia: don't expect to have a good time :) I was very frustrated and had many wtf moments until I got it
23:12 < Sendoushi> yes when i tried BB i had the same xp as you faceleg
23:12 < euoia> faceleg: does it require anything on the server side? Or is there anything on the server side that helps?
23:12 < faceleg> I do believe it is worth it though, and wouldn't use anything else for app-ish sites
23:12 < faceleg> node?
23:12 < Sendoushi> euoia: essentially client side
23:12 < euoia> faceleg: Okay, I'll be persistent, like with dwarf fortress
23:12 < faceleg> ahahahah yep
23:12 < faceleg> I think there is an ang examples github repository
23:12 < Sendoushi> there is faceleg
23:12 < Sendoushi> under their git
23:13 < Sendoushi> and a lot of tutorials around the web
23:13 < faceleg> https://github.com/angular/angular.js/wiki/JsFiddle-Examples
23:13 < faceleg> I really love what I've been able to do with socket.io, node + angular
23:14 < Sendoushi> i'm not really using node yet
23:14 < faceleg> get out then /joking
23:14 < Sendoushi> because of the inexistence of easy ways to implement it on a server
23:14 < Sendoushi> unless it is a vps
23:14 < faceleg> yeah I know
23:14 < faceleg> I'm going to run with nodejitsu
23:14 < Sendoushi> tried, love it but... waiting
23:14 < Sendoushi> when it gets a cpanel module or something my hoster told me i would have node so...
23:15 < Sendoushi> what about DBs what do you use?
23:15 < faceleg> mongo
23:15 < faceleg> mongoose
23:15 < Sendoushi> tried MongoDB with meteor and it was nice but 500mb for the mongodb? ouch
23:15 < faceleg> I know!
23:15 < faceleg> if you go to 501MB then you'll be using 1000MB
23:15 < faceleg> just the way mdb works
23:15 < Sendoushi> that is just... insane on the server side
23:16 < context> sendoushi: good luck with that.
23:16 < Sendoushi> context: on what?
23:16 < context> sendoushi: 500M for db what you mean ?
23:16 < context> ahh yeah
23:16 < context> nm
23:16 < context> the way mongodb makes db files
23:16 < Sendoushi> neverminded
23:16 < context> pre-alloc
23:17 < context> doesnt it start at like 64M, then do 128, 256, 512 ?
23:17 < sitapati> sheesh
23:17 < Sendoushi> do we have better solutions on a LAMP server?
23:17 < Sendoushi> no context it goes straight 500mb
23:17 < Sendoushi> at least with my ubuntu server ...
23:17 < context> ahh
23:17 < sitapati> same thing with me on RHEL
23:17 < faceleg> 1I think it's configurable
23:17 < context> meh
23:17 < context> 500M really isnt that much
23:17 < sitapati> --small-files
23:17 < context> not compared to what we have here
23:17 < faceleg> it's the nature of the beast
23:18 < faceleg> it's not intended for small-time 
23:18 < Sendoushi> other question... could i use mongodb under a LAMP server?
23:18 < faceleg> you mean WAMP?
23:18 < Sendoushi> i guess
23:18 < faceleg> lamp - linux apache ...
23:18 < sitapati> Linux - Apache - Mongodb - PHP
23:18 < sitapati> LAMP
23:19 < Sendoushi> isnt it Linux Apache Mysql Php ?
23:19 < context> apache ?
23:19 < context> people still use that ?
23:19 < Sendoushi> context: stil the main type of server
23:19 < faceleg> yeah for !node
23:19 < context> ill take nginx over apache ANY day
23:20 < context> sendoushi: though, why not use nodejitsu or heroku ?
23:20 < Sendoushi> because i have a sponsored resell account :P
23:21 < Sendoushi> so... i don't spend any money
23:21 < context> you actually enjoy using cpanel ?
23:21 < Sendoushi> i prefer than using... nothing
23:21 < context> :-/
23:21 < Sendoushi> i'm used to it
23:21 < Sendoushi> i work with it
23:21 < Sendoushi> i do websites, i use wordpress...
23:21 < Sendoushi> so... cpanel isn't really the problem for me
23:22 < context> gotcha
23:22 < korilo> yo all
23:22 < Sendoushi> and it's easy to say to a client "just search it on youtube" :P
23:22 < context> i was a sysadmin for half my life so i enjoy being in the grit. cpanel always just pissed me off
23:22 < AlexMax> I've got a unit testing question, if anyone has some time.
23:22 < Sendoushi> between cpanel and plesk i really prefer the cpanel
23:24 < faceleg> context: +1
23:24 < faceleg> give me ssh or give me death
23:24 < AlexMax> How am I supposed to unit test the message function in Master?  Master.prototype.message = function(msg, rinfo) {
23:24 < AlexMax> erm
23:24 < Sendoushi> why faceleg?
23:24 < AlexMax> https://github.com/AlexMax/nomaster/blob/master/nomaster.js#L179
23:24 < Sendoushi> i don't care about ssh
23:24 < Sendoushi> eheh
23:24 < faceleg> Sendoushi: I just like it, cheap mouse y'know
23:25 < DTrejo> anyone know whether v8 optimizes integer-only math to be faster than floating point?
23:25 < AlexMax> The message function is attached to the message event in the constructor
23:25 < AlexMax> And I'd like to be able to be able to attach a callback to that message function when it's done
23:26 < AlexMax> But I don't really know what a good way to do it is.  I mean, I guess I could just add a second parameter to the Master constructor that passes in a function to pass to the message event on message, but that seems....odd.
23:27 < AlexMax> Could I perhaps attach a promise/future to Master.message from the test after I run the constructor?
23:27 < DTrejo> anyone know whether v8 optimizes integer-only math to be faster than floating point? /cc TooTallNate (I feel like you'd know?)
23:27 <@TooTallNate> DTrejo: it does
23:27 < DTrejo> yay
23:27 < mscdex> Sendoushi: don't be hatin'!
23:27 < DTrejo> thanks TTN
23:27 <@TooTallNate> DTrejo: internally v8 can store 32-bit ints or doubles
23:27 < Sendoushi> me? hatin?
23:28 < Sendoushi> a piece and make love
23:28 < Sendoushi> :P
23:28 <@TooTallNate> DTrejo: so if you're just working with whole numbers, it'll be optimized
23:28 < DTrejo> I'm writing a little function that take a number and converts it to bit shifts, so you can do stuff like convert 1/456 to A >>2 + A >> 3 + a >> 12 etc
23:33 < euoia> Is there anything to be gained from using typed arrays in node? Does it support them?
23:33 < euoia> (just whilst we're on the topic)
23:34 < korilo> euoia, you mean like var int32View = new Int32Array(buffer); ?
23:35 < euoia> korilo: yep
23:35 < korilo> mm not sure never used it probably never needed em
23:35 < korilo> seems browser "stuff"
23:35 < korilo> don't know lol
23:36 < mscdex> euoia: better compatibility between node and browsers?
23:37 < euoia> mscdex: I was really wondering whether performance improvements could be expected from using typed arrays in node
23:38 < mscdex> euoia: iirc typed arrays and Buffers are implemented similarly
23:39 < mscdex> Buffers offer some more flexibility though
23:39 < mscdex> not sure if typed arrays have slicing capabilities (that use the same memory block)
23:39 < euoia> insert into tpmtgatehost (pg_type, pg_ip, pg_port, resp_timeout, conn_timeout, desc, status) values ('DINEROMAIL', 'http://localhost/not_a_real_endpoint', 8080, 14000, 14000, 'Not a real Dineromail endpoint', 'A');
23:39 < euoia> shit!
23:39 < mscdex> :S
23:39 < euoia> sorry
23:40 < euoia> pasted into the wrong window
23:40 < mscdex> :-)
23:41 < ericelliott> Anybody have resources to add to the list at the bottom of this post? http://ericleads.com/2012/08/debugging-node-with-node-inspector/
23:41 < mscdex> Buffers also have encoding/decoding capabilities and can read/write integers and doubles without instantiating extra objects...
23:42 < mscdex> ericelliott: there's also a built-in gdb-like debugger in node
23:45 < ericelliott> mscdex: isn't that what I was talking about in the main subject of the post? Well, ok, I was talking about how to connect to the node debugger with Chrome dev tools, but...
23:45 < ericelliott> am I missing something?
23:46 < sitapati> ericelliott: does this work with express apps?
23:46 < ericelliott> sitapati: sure does.
23:46 < mscdex> ericelliott: node --debug starts the v8 debugger. `node debug foo.js` starts the built-in debugger client
23:46 < ericelliott> oh, I see.
23:47 < ericelliott> I wasn't aware of that distinction.
23:47 < mscdex> ericelliott: http://nodejs.org/api/debugger.html
23:50 < ericelliott> Thanks!
23:50 < ericelliott> updated.. want credit?
--- Log closed Fri Mar 08 00:00:36 2013
