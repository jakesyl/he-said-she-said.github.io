--- Log opened Sat Jun 08 00:00:16 2013
--- Day changed Sat Jun 08 2013
00:00 < othiym23> also Puppet and Chef don't really need to be fast, given that they don't run that frequently and don't really do that much themselves
00:00 < ningu> I thought capistrano was just for deploying ruby apps
00:00 < othiym23> it is
00:00 < othiym23> which is why it was generalized into Chef ;)
00:00 < ningu> honestly I don't really understand the preference for chef over puppet
00:01 < ningu> but it does seem to be where the mindshare is headed
00:01 < ningu> I guess chef is less monolithic
00:01 < othiym23> people really want to write imperative code for cfg mgmt
00:01 < ningu> I guess
00:01 < piggybox> othiym23: haskell is painfully slow to compile though
00:01 < ningu> maybe I'm weird, but I don't
00:02 < othiym23> it'll bite them in the ass long-term, but it's a lot easier than wrapping your head around all of puppet's (convoluted) syntax
00:02 < othiym23> piggybox: that hasn't been my experience
00:02 < ningu> yes, puppet is somewhat convoluted, but it isn't too bad
00:02 < othiym23> it's certainly not scala slow
00:02 < toothrot> othiym23, where's the results?
00:02 < othiym23> ningu: once you understand how the dependency graph is built, it's easy, but getting there takes a while
00:03 < othiym23> toothrot: we're still in the process of putting together the final benchmarking environment
00:03 < othiym23> ...in the cloud
00:03 < ningu> othiym23: basically, since I don't have someone else to do devops for me, I don't want to be nervous about things not being idempotent, I don't trust myself to be that smart
00:03 < rhalff> what testing framework, mocha, chai or... ? right now I'm using mocha
00:03 < othiym23> ningu: that's how I come at it too
00:03 < othiym23> rhalff: mocha or node-tap, if you just want a recommendation
00:03 < othiym23> these days I don't need most of the stuff Chai offers, but it's nice
00:03 < othiym23> sometimes I use Sinon
00:04 < rhalff> othiym23, I was searching for promises support and then saw chai
00:04 < othiym23> but those two run on top of mocha, not as replacements
00:04 < ningu> whoa... there is a puppet module to manage the windows registry
00:04  * ningu stays far far away
00:05 < othiym23> toothrot: the problem is that benchmarking with the client and server on the same host basically just crushes the network / kernel and the machine spends all its time doing interrupt processing
00:05 < othiym23> toothrot: it won't even max out the CPUs since there's so much blocking on the network
00:05 < absentia> is there a preferred (channel) FAQ?  or, where can a n00b go to get a gerat introduction to node and then also get advanced node examples/uses/etc.  thanks.
00:06 < rump> othiym23: hasn't been my experience
00:06 < rump> i a peg a couple cores easily
00:06 < rump> can*
00:06 < othiym23> rump: with my benchmark?
00:06 <@mbalho> absentia: https://github.com/maxogden/art-of-node
00:07 < rump> othiym23: which is yours?
00:07 < ericelliott> rhalff: I like to keep testing very minimal. I write my tests with tape (by substack)
00:07 < rhalff> othiym23, what is the most mature you think, I like mocha but it crashes in watch mode when a test file is broken
00:07 < ericelliott> rhalff: I also use supertest to do requests.. but then I use tape assertions.
00:08 < othiym23> rump: https://github.com/othiym23/nonsense-benchmark/node contains my Node versions
00:08 < tjholowaychuk> watch mode
00:08 < tjholowaychuk> is lame
00:08 < othiym23> rhalff: I don't use watch mode
00:08 < tjholowaychuk> it should die
00:08 < othiym23> yeah, what TJ said
00:08 < absentia> mbalho:  thanks.  I'm on "how to node" now...
00:09 < rhalff> tjholowaychuk, why is it lame?
00:09 < tjholowaychuk> i dont think they're useful for people who are in the terminal all day committing
00:09 < tjholowaychuk> personally
00:09 < tjholowaychuk> and they're buggy as fuck
00:09 < tjholowaychuk> in node
00:09 < tjholowaychuk> especially if you want to reload modules
00:09 < tjholowaychuk> we have like 25 modules to watch file mtime changes
00:09 < othiym23> mbalho: would you take a PR on error-handling for that?
00:10 < tjholowaychuk> i dont want it but other people do
00:11 < rhalff> tjholowaychuk, so you don't run tests continiously ?
00:11 < tjholowaychuk> i do but
00:11 < rump> yeah but imagine the poor souls who have to recompile/reexecute their coffeescript, stylus, jade, node, mocha, etc every iteration
00:11 < tjholowaychuk> i write code -> run tests -> commit
00:11 < tjholowaychuk> so
00:11 <@mbalho> othiym23: thats more of an advanced topic
00:11 < tjholowaychuk> im already in the terminal
00:11 <@mbalho> othiym23: i think a blog post would be a good start though
00:11 < othiym23> rhalff: it takes me about a 1/3 a second to hit up and then return, and then my tests run in under a second, so I don't really see what watch mode would get me
00:12 < othiym23> mbalho: a blog post for where? there's already hueniverse's gist for domains out there
00:12 < rump> tj just doesn't make mistakes, 1 edit, 1 test, 1 commit
00:12 < rump> :)
00:12 < rhalff> othiym23, well if I save the file it automatically runs, why would I want to start it by hand.
00:13 < othiym23> rhalff: I dunno, I just don't see much value in having the tests run every time I save, I guess
00:14 < tjholowaychuk> haha it's kind of silly to
00:14 < tjholowaychuk> code until the test just magically happens to pass
00:14 < tjholowaychuk> put some thought into it :p
00:14 < tjholowaychuk> you'll usually be somewhat right
00:14 < tjholowaychuk> so what if you waste half a second
00:14 < othiym23> yeah
00:14 < wc-> isnt that basically test driven development haha
00:14 < wc-> make some tests, write misc code till they pass, call it a day
00:15 < tjholowaychuk> yeah but you dont have to go to the extreme
00:15 < othiym23> wc-: sure, but actually doing TDD mindfully saves me time in the long run
00:15 < othiym23> instead of just going buck wild until the tests pass
00:15 < wc-> oh for sure
00:15 < wc-> im just kidding around
00:16 < ericelliott> I don't use watch because it's buggy.
00:16 < rhalff> ok, I'll just stick with mocha then and bug the developer to improve the watchmode a bit more :p
00:16 < tjholowaychuk> nooo haha
00:16 < tjholowaychuk> dont bug
00:16 < ericelliott> I do run a grunt task that does everything I want it to do.
00:17 < tjholowaychuk> jk
00:17 < tjholowaychuk> i think there's a PR
00:17 < mzarella> one thing i don't understand is setting routes up within angular and setting up routes within your respective nodejs framework. it seems like a lot of duplication 
00:17 < mzarella> is there some way not to duplicate this code?
00:17 < mzarella> is anyone aware of a nodejs app which utilizes something like bb +nodejs or ng + nodejs to route the user to the appropriate location?
00:18 < othiym23> mzarella: there's that airbnb thinger that uses angular for both the client and server
00:18 < othiym23> hold on
00:18 < mzarella> othiym23: ty
00:18 < othiym23> oops I was close: https://github.com/airbnb/rendr
00:18 < othiym23> Backbone, not AngularJS
00:19 < wc-> rednr
00:19 < wc-> rendr
00:19 < wc-> i just started a project with it
00:20 < wc-> mzarella: maybe check out https://github.com/nodejitsu/node-http-proxy
00:20 < wc-> im not sure what you are looking to do
00:20 < wc-> thats for routing to different servers
00:21 < wc-> has anyone used fleet for deployment of a node app?
00:21 < wc-> im about to give it a shot...
00:22 < othiym23> I'm going to guess substack maybe has
00:22 < wc-> haha ya i figured
00:22 < wc-> i have a backend api node app and a front end node app, id like to deploy both of them to the same machine via fleet
00:28 < lbod> are there any npm gurus on? ive registered a package via npm but thinking it's maybe not needed now. It's really an application and ive always thought npm install means installing in node_modules whereas my app creates a node app with various folders and some dependencies.. I'm thinking my repo shouldnt be registered in npm because git clone is enough (and then npm install for deps). Am I right?
00:28 < AAA_awright> lbod: That's what I do, but not necessarially true
00:30 < lbod> AAA_awright: ive never found any info on "application" installs for npm, ive presumed it's not the right thing to do
00:30 < lbod> and do you mean you use git clone etc to create and then npm install for deps?
00:31 < AAA_awright> lbod: Well I use git submodules for dependencies but yes
00:32 < lbod> AAA_awright: thx, its what ive been thinking too, but how do submodules help? Just ignore npm completely then
00:32 < lbod> >
00:32 < lbod> ? :D
00:33 < gildean> lbod: for an application you can just add the preferGlobal setting to your package.json
00:33 < gildean> and the path to the "bin"
00:33 < lbod> gildean: ive never seen that, just searching
00:34 < AAA_awright> Most of applications don't use npm at all, it's not even installed. My libraries are mixed.
00:34 < AAA_awright> Generally if you want an application you release a package or "make install" or similar, depending on your distribution
00:34 < gildean> lbod: assuming of course that you've added the hashbang line to the top of the app
00:34 < lbod> gildean: am not sure it solves my question, git and submodules alone seem to do the job
00:35 < gildean> if your app is pure node app, i see no problem publishing it to the npm
00:35 < gildean> but you do what you think fits best for your situation
00:36 < lbod> so just for examples sake, https://github.com/lbod/dapi
00:37 < lbod> for me (im still a git newb), workflow means git clone then npm install.. I have dapi registered via npm but it'll install in node_modules
00:39 < gildean> lbod: as i said, if you set the preferGlobal and have the hashbang line in your app, it'll be installed under /usr/bin
00:39 < gildean> or /usr/local and symlinked, can't remember exactly
00:41 < lbod> gildean: thanks am not following the use of hashbang though, just as a launcher? and is it linux/*nix specific only?
00:41 < gildean> no, it works on windows too
00:42 < AAA_awright> On a shell that understands it? Windows doesn't have an executable bit
00:43 < lbod> but what do you need to export as a global? I mean this is just an application i can run via the 2 node.js app files, does that make them globally available?
00:43 < lbod> think i need to RTFM
00:44 < gabrielstuff> hi all
00:45 < gabrielstuff> i'm using https://github.com/aguidrevitch/jquery-file-upload-middleware to upload files to nodejs thru the jquery ajax form upload
00:45 < gabrielstuff> it works really great
00:45 < gabrielstuff> but :)
00:46 < gabrielstuff> when I tried to access user information
00:46 < gabrielstuff> related to upload
00:46 < gabrielstuff> I got stuck
00:46 < gabrielstuff> I've read the docs
00:46 < gabrielstuff> but I'm not sure I'm getting it right
00:46 < lbod> sry im siding with AAA_awright as he seems to understand where im coming from (sry im not very clear at times). It's just a straightforward app, npm typically seems for reusable package dependencies in apps.. My app is really only reusable per user
00:47 < AAA_awright> lbod: Uh probably... A system program would need to be installed somewhere in $PATH and it'd run the same way as if you did "node /usr/bin/myapp.js" (or preferably, named without the .js)
00:47 < gabrielstuff> on this page, https://github.com/aguidrevitch/jquery-file-upload-middleware they use req.sessionID but I do not have one
00:47 < gabrielstuff> so basically how should one do ?
00:47 < gabrielstuff> to fetch and find it
00:48 < gildean> AAA_awright: they run just fine on normal windows commandline
00:48 < gabrielstuff> (i'm using mongodb for persistent stroe)
00:49 < gildean> lbod: for example. here's a simple app i wrote that's published into npm as a global: https://github.com/gildean/ServerInfo
00:49 < lbod> AAA_awright: so ignoring if it was a "system program"? I'm thinking what you said at the start should be my workflow too, git clone/checkout then nom install
00:49 < AAA_awright> gildean: There's people who understand effective methods of installing Node.js-based applications far better than me. Unfortunately the whole state of affiars for doing that is a very sorry one.
00:49 < lbod> gildean: just grepping
00:50 < gildean> here's a blogpost about global vs. local install: http://blog.nodejs.org/2011/03/23/npm-1-0-global-vs-local-installation/
00:51 < lbod> right, i understand the global vs local install, i suppose i see my app as not being global but it's whether it's worth npm registering
00:51 < lbod> im still looking thru that repo
00:51 < gabrielstuff> anyone ?
00:53 < gildean> lbod: the main gist are the two lines on the package.json, the preferglobal and bin, and the #!/usr/bin/env node hashbang line as the first line of the "bin"
00:54 < lbod> so can i be really dumb and explain "dumbly" where i think npm doesnt work in my case? i dont mind you calling me dumb, other irc rooms are much more scathing
00:55 < gildean> if you don't think npm suits your app, then don't do it
00:55 < lbod> im trying to figure out if it does suit my app
00:55 < gildean> but if the app is like the example i gave you, npm works pretty well
00:55 < lbod> but you both are being helpful
00:56 < gildean> your users can update the app through npm etc. really easily
00:56 < gildean> and even someone who doesn't know git but has npm can install it with just one command
00:57 -!- mode/#Node.js [+o TooTallNate] by ChanServ
00:58 < gabrielstuff> the thing is that I can not access to req.session
00:58 < steven``> is there a channel for flatiron. i have some questions about restful and resourceful
00:58 < gabrielstuff> I've tried in different way
00:58 < gabrielstuff> ....
00:58 < gabrielstuff> it always return undefined
00:59 < gildean> gabrielstuff: you need somekind of session middleware for your app for that
00:59 < gabrielstuff> got it
00:59 < gildean> idk what the example you're referring to uses
01:00 < gabrielstuff> i've got
01:00 < gabrielstuff> it 
01:00 < gabrielstuff> with passport
01:00 < lbod> if my app has 2 entry points, can "main" export them? might seem a stupid q but this app i have has 2 main entry points, i  understand {main:""} can be used, however if i install globally can i provide both exes? The configuration is local to the app, im sure that doesnt matter. What confuses me is when i do a local install it'll install the app in node_modules, is it just a case of making configuration external from global?
01:02 < lbod> hmm, i think ive got you, npm probably isnt needed in my case
01:03 < gabrielstuff> @gildean so
01:04 < gabrielstuff> as I told you I've got persistent storage and passport configured
01:04 < gabrielstuff> but I'm not able to access to req.session
01:08 < gabrielstuff> so basically I have
01:08 < gabrielstuff> the passport session setup
01:08 < gabrielstuff> express session setup
01:08 < gabrielstuff> and session store
01:09 < gabrielstuff> but I'm not able to access it
01:09 < gabrielstuff> :(
01:09 < gildean> gabrielstuff: and you've got passport.session() in your middlewares too?
01:09 < gabrielstuff> not sure I get you
01:09 < gildean> below passport.initialize()
01:09 < gabrielstuff> I use as few middleware as I can
01:09 < gildean> gabrielstuff: https://github.com/jaredhanson/passport#middleware
01:10 < gabrielstuff>     // use passport session
01:10 < gabrielstuff>     app.use(passport.initialize())
01:10 < gabrielstuff>     app.use(passport.session())
01:10 < gabrielstuff>     app.use(express.favicon())
01:10 < gabrielstuff>     // routes should be at the last
01:10 < gabrielstuff>     app.use(app.router)
01:10 < gabrielstuff> sorry
01:10 < gabrielstuff> should have gist : /
01:10 < gabrielstuff> yup
01:10 < gabrielstuff> I'm doing this
01:11 < gabrielstuff> https://github.com/jaredhanson/passport#middleware
01:11 < gabrielstuff> this is the bare minimum to get access to session on each req ?
01:11 < gabrielstuff> right ?
01:11 < gabrielstuff> i've also setup : https://github.com/jaredhanson/passport#sessions
01:13 < gildean> gabrielstuff: according to that example you also need the express.session middleware
01:13 < gildean> i've never used passport, so i can't help you more than that
01:14 < gabrielstuff> yup
01:15 < gabrielstuff>  got the middleware, but reading from the doc
01:15 < gabrielstuff> I should be able to access req.session ?
01:15 < gabrielstuff> right ?
01:17 < luckydrq> hello
01:22 <@mbalho> othiym23: thoguth more about error handling in art-of-node, i think it has a place!
01:22 <@mbalho> othiym23: starting from the position that errors crash your program and you should write code to not throw exceptions, then be like you can try {} catch {} but here are some other things that node provides
01:25 < rhalff> I wanna parse random websites in my tests, anybody care to be in my testsuite?
01:28 < owen1> is there a way to self host a private npm - for npm packages that are not open source?
01:31 < ChrisPartridge> owen1: you can setup your own private npm repository if you really want
01:32 < gnarf> owen1: it can install packages from any get repo too
01:32 < gnarf> s/get/git
01:33 < bitcoin_boy> Hello.
01:33 < wathek> did anyone use socket.io in a html page ? I'm getting an error Uncaught ReferenceError: io is not defined 
01:33 < bitcoin_boy> I have installed Node.js on Windows and UglifyJS through the package system. How can I call uglifyjs on the command line (or in a .bat file)?
01:33 < gnarf> owen1: "dependencies": { "somepackage": "git+ssh://user@hostname:project.git#commit-ish" } for instance...
01:33 < ChrisPartridge> bitcoin_boy: did you install uglifyjs with -g ?
01:34 < bitcoin_boy> Yes.
01:34 < gnarf> owen1: https://npmjs.org/doc/json.html#Git-URLs-as-Dependencies
01:34 < bitcoin_boy> Though I still don't get what that was about.
01:34 < owen1> ChrisPartridge: https://github.com/isaacs/npm-www ?
01:34 < owen1> gnarf: yes, but u don't get the semver benefit
01:34 < ChrisPartridge> owen1: two secs, someone wrote an article on it
01:34 < ChrisPartridge> owen1: http://clock.co.uk/tech-blogs/how-to-create-a-private-npmjs-repository
01:34 < gnarf> owen1: well, you can still link to tags :)
01:34 < gnarf> git.....#1.0.1 works just as well
01:35 < ChrisPartridge> bitcoin_boy: if you open a command prompt, and type uglifyjs - does it work?
01:36 < owen1> Gregor: true, but if you upgrade your lib to 1.0.2 u'll have to manualy update everyone that uses it
01:36 < gabrielstuff> anyone else?
01:37 < ChrisPartridge> gabrielstuff: whats the issue?
01:37 < gabrielstuff> not getting the session
01:37 < gabrielstuff> in req.session
01:37 < ChrisPartridge> express? 
01:37 < gabrielstuff> using express + passport
01:37 < ChrisPartridge> gist your code perhaps
01:38 < gabrielstuff> and following the infos there
01:38 < gabrielstuff> https://github.com/jaredhanson/passport#sessions
01:38 < bitcoin_boy> I think I figured it out with help in #JavaScript. Sorry.
01:38 < gabrielstuff> https://github.com/jaredhanson/passport#middleware
01:38 < owen1> ChrisPartridge: thanks for the link. so i guess if i follow the first half of the article, i am done, assuming i don't need to replicate the public npm?
01:38 < gabrielstuff> ok gisting
01:38 < bitcoin_boy> I assumed I had to call it through Node, but it's an executable...
01:38 < gabrielstuff> @ChrisPartridge
01:39 < ChrisPartridge> bitcoin_boy: it installs the script into a bin directory, which is in your system PATH, so it acts like any executable
01:39 < ChrisPartridge> owen1: yes, and probably the section on getting npm to actually use your npm instance
01:41 < bitcoin_boy> Thanks.
01:42 < gabrielstuff> @ChrisPartridge: https://gist.github.com/gabrielstuff/5733546
01:46 < gabrielstuff> you've got everything needed I guess
01:49 < bitcoin_boy> Turns out I had not solved my problem at all.
01:49 < bitcoin_boy> I am trying to run "uglifyjs test.js -o test.ugly.js" in a .bat file. It runs, but the output is the same as the input...
01:50 < bitcoin_boy> Node is installed, and so is UglifyJS2.
01:50 < bitcoin_boy> If I run uglifyjs on the command line, it waits for input.
01:50 < bitcoin_boy> So it clearly "exists".
01:51 < bitcoin_boy> I really don't get what's wrong.
01:51 < bitcoin_boy> I also tried with some other parameters.
01:53 < bitcoin_boy> I can't figure it out.
01:54 <@isaacbw> damn domai.nr giving me false positives and getting me all excited
01:54  * bitcoin_boy pulls his hair
01:55 < sdermec> does uglifyjs test.js work?
01:55 < bitcoin_boy> Depends on what you mean by "work". It outputs the test.js file.
01:55 < bitcoin_boy> On the command line where I run it.
01:56 < bitcoin_boy> test.js is a file that has had Closure Compiler run on it. I am doing this uglifyjs thing as a last step.
01:56 < owen1> ChrisPartridge: app push registry/app.js http://localhost:5984/registry => PUT http://localhost:5984/registry/_design/scratch /home/t/lib/node_modules/couchapp/main.js:150 if (err) throw err; ^ Error: write EPIPE
01:57 < sdermec> what os are you using?
01:57 < sdwrage> bitcoin_boy, hold on
01:57 < owen1> sdermec: centos
01:57 < bitcoin_boy> Windows, in case you are asking me.
01:57 < bitcoin_boy> Should not matter in the least if I understand things correctly.
01:58 < gkatsev> bitcoin_boy: the output is the same because uglify realizes there's nothing to do here. All the work has been done with CC.
01:58 < bitcoin_boy> That can't be.
01:58 < bitcoin_boy> Then it's useless.
01:58 < gkatsev> no...
01:58 < gkatsev> you're just trying to make it do something it's not designed to do.
01:59 < bitcoin_boy> Why would I want to use UglifyJS2 if all it is is a crappy version of CC?
01:59 < bitcoin_boy> Which is unlikely to do all the actual optimizations and whatnot that CC does?
01:59 < gkatsev> bitcoin_boy: as I told you already, uglify and CC are meant for the same purpose. They just approach things different. It isn't a "crappy" version of anything.
01:59 < sdwrage> bitcoin_boy, uglifyjs2 /home/doe/work/foo/src/js/file1.js /home/doe/work/foo/src/js/file2.js -o foo.min.js -c -m
02:00 < bitcoin_boy> It seems VERY strange that Uglify cannot find *anything* to do on the finished CC file.
02:00 < bitcoin_boy> Not so much as a little different char.
02:00 < gkatsev> why?
02:00 < sdwrage> I believe that will take file1 and file2, concatenate and mangle into foo.min.js
02:00 < bitcoin_boy> sdwrage: I'm not sure how that is relevant here... sorry?
02:00 < sdwrage> I have never used it before though but thats what the docs are saying.
02:00 < sdwrage> you were having trouble using uglifyjs2 right?
02:00 < sdwrage> saying it hands
02:01 < gkatsev> sdwrage: yes, that's what it does. However, bitcoin_boy already closure compiled and minifed the file beforehand and now he thinkgs that uglify will further uglify an already uglified file.
02:01 < sdwrage> hangs
02:01 < sdwrage> ah
02:01 < sdwrage> okay now I see
02:01 < bitcoin_boy> Yeah. The whole point was to bake it into a big blob.
02:01 < bitcoin_boy> That's what I thought "uglify" would do.
02:01 < bitcoin_boy> Like "Horrible.js" and "CrushJS".
02:01 < gkatsev> no, uglify just minifies javascript
02:01 < gkatsev> bitcoin_boy: no, that isn't the point of uglify.
02:01 < bitcoin_boy> The problem being that those two mentioned are only available in crappy web versions.
02:01 < fomatin> anybody here use emberjs + node?
02:03 < gkatsev> bitcoin_boy: you could just copy the code from https://github.com/TShadwell/Horrible.js/blob/master/index.html into a file and use that manually in a simple node script.
02:04 < bitcoin_boy> Why do they not want to make it available properly?
02:05 < gkatsev> 1) horrible.js is really just for fun. 2) jscrush is meant for further minification rather than obfuscation. 3) Yes, they probably could've written the projects better, but who cares? You shouldn't be using them for anything real anyway.
02:07 < bitcoin_boy> Is there a solid, Node-based project to obscurify compiled JS code for real into a big scary blob?
02:07 < gkatsev> no
02:07 < bitcoin_boy> With some JS that is run immediately to "unpack" it?
02:07 < bitcoin_boy> Why is that?
02:07 < gkatsev> because that's not how javascript works.
02:07 < gkatsev> it doesn't compile into a binary.
02:07 < bitcoin_boy> Why not?
02:07 < bitcoin_boy> It could...
02:07 < gkatsev> the client always has the full code.
02:08 < bitcoin_boy> Again in the circle reasoning...
02:08 < gkatsev> I give up.
02:08 < sdwrage> lol
02:08 < bitcoin_boy> Or you could start making sense.
02:08 < sdwrage> wow
02:08 < bitcoin_boy> "wow"
02:08 < bitcoin_boy> "I can't believe he doesn't just buy whatever we tell him immediately with no discussion."
02:09 < sdwrage> bitcoin_boy, because people are trying to help you and you basically are telling them "No, your wrong"
02:09 < sdwrage> then why ask?
02:09 < bitcoin_boy> *I*'m the one saying that?
02:09 < bitcoin_boy> "<gkatsev> I give up."
02:09 < bitcoin_boy> If you wanted to help, you'd discuss things.
02:10 < bitcoin_boy> Not just say "wow" and "I give up."
02:10 < sdwrage> yeah, because he is doing his best to help and you keep saying things like "This is circle reasoning…" 
02:10 < bitcoin_boy> It IS circle reasoning.
02:10 < bitcoin_boy> He goes on about how he doesn't want me to do X.
02:10 < bitcoin_boy> Instead of accepting that I want to do X and asking if it's possible.
02:10 < bitcoin_boy> It's always the same thing on IRC.
02:11 < sdwrage> <gkatsev> because that's not how javascript works.
02:11 < bitcoin_boy> "You shouldn't do that, and I don't want people to do that, so I'm going to do anything to stop you from doing it"
02:11 < bitcoin_boy> What do you mean it's not how JS works? It can be if somebody does it?
02:11 < sdwrage> you can only glob together js so much but in the end, the client has to receive js
02:11 < bitcoin_boy> Same thing with EXEs.
02:11 < bitcoin_boy> Assembly in the end.
02:12 < sdwrage> unless you want to use another platform I guess. 
02:12 < Raynos> rickwaldron: for my purpose a `generator` function is really something that once wrapped is something that returns a promise. So If I had a way to detect functions from generators I could duck wrap generators into things I can operate on ala promises
02:12 < bitcoin_boy> I really don't see the point of saying that there is no point.
02:13 < sdwrage> bitcoin_boy, http://stackoverflow.com/questions/2222355/how-to-hide-javascript-code
02:13 < bitcoin_boy> For example, there is this UPX thing for Windows EXEs, which packs a normal compiled EXE into a smaller one, which unpacks itself at runtime.
02:13 < bitcoin_boy> Something like that is what I want.
02:13 < bitcoin_boy> In fact, it's a perfect analogy.
02:13 < sdwrage> bitcoin_boy, v
02:13 < sdwrage> http://stackoverflow.com/questions/194397/how-can-i-obfuscate-javascript
02:13 < bitcoin_boy> An UPX packed EXE does not have human visible strings in it.
02:13 < bitcoin_boy> *A
02:14 < bitcoin_boy> Why are you linking to those useless pages where the answers are identical to your attitude of "it can never work"?
02:14 < bitcoin_boy> I KNOW it can never FULLY work.
02:14 < sdwrage> ...
02:15 < sdwrage> I am trying to help the best I can
02:15 < bitcoin_boy> I doubt it.
02:15 < bitcoin_boy> I hear that a lot but it doesn't seem like it.
02:15 < bitcoin_boy> Why not listen to something I say?
02:15 < sdwrage> okay listen, you don't pay me to help you so guess you can get help from those willing to give you an answer you want to hear ;)
02:15 < WIntermeW> hi guys..i need a working DOM js implementation with cookies/sessions support working with node.js (i wanna make a web scrapper for a complexe js webapp) , do you know one ?
02:15 < bitcoin_boy> Just because I'm not paying you doesn't mean you're "allowed" to waste my time.
02:16 < sdwrage> I am allowed to all I want
02:16 < sdwrage> yeesh
02:16 < sdwrage> the nerve of some people 0_o
02:16 < gkatsev> oh good, he left >.<
02:17 < ChrisPartridge> good riddance, what a horrible attitude
02:17 < ChrisPartridge> gkatsev: you answered his question perfectly well, imo
02:17 < gkatsev> ChrisPartridge: I've been up that tree multiple time, lol
02:17 < WIntermeW> haha..at least he left by himself :)
02:18 < gkatsev> I knew about the "horrible.js" thing from way before horriblejs existed.
02:18 < gkatsev> I kind of want to just kick him from ##javascript 
02:19 < ChrisPartridge> WIntermeW: you could use a few modules like request,superagent + cheerio/other dom library
02:19 < ChrisPartridge> WIntermeW: otherwise, you could use something like chimera if you want an actual headless webkit instance
02:20 < ChrisPartridge> gkatsev: heh, is he being a pain in there now?
02:20 < gkatsev> he was a pain since before coming here
02:20 < gkatsev> I told him #node.js existed for future reference so he started the same conversation here immediately.
02:20 < WIntermeW> ChrisPartridge: maybe i'll directly turn to selenium..that seems to be be the best option for me so far..the thing is i fear about perf degradation
02:21 < gkatsev> ChrisPartridge: so while you were helping him here a bit, I was trying to straighten him out with uglify in ##js as well
02:21 < ChrisPartridge> WIntermeW: if you're just scraping, take a look at node-chimera, its pretty easy
02:22 < WIntermeW> ChrisPartridge: thank you, i'll have a look
02:22 < ChrisPartridge> gkatsev: yeah, i guess he doesn't understand the age old "security through obscurity is not security"
02:22 < gkatsev> yep
02:22 < ChrisPartridge> meanwhile, sending a tonne more bytes than necessary
02:23 < gkatsev> yeah, obfuscation via something like horrible.js expands the filesize by a lot
02:24 < gkatsev> < Sorella> bitcoin_boy, compile your code down to brainfuck, embbed a brainfuck interpreter in your page, problem solved
02:24 < ChrisPartridge> lol!
02:25 < ChrisPartridge> "boss: how are we securing around IP? employee: brainfuck sir"
02:25 < ChrisPartridge> s/around/our
02:25 < owen1> ChrisPartridge: got EPIPE error when i run couchapp push registry/app.js http://localhost:5984/registry
02:26 < ChrisPartridge> owen1: hm, what version of node?
02:29 < ChrisPartridge> owen1: and is your couch instance actually running?
02:30 < owen1> ChrisPartridge: node v0.10.4.  curl -X GET http://localhost:5984 => {"couchdb":"Welcome","version":"1.0.2"}
02:33 < ChrisPartridge> owen1: perhaps couchapp has issues with 0.10.x 
02:33 < ChrisPartridge> owen1: try on 0.8.x maybe
02:46 -!- mode/#Node.js [+o TooTallNate] by ChanServ
02:48 < gabrielstuff> does anyone read the gist : ?
02:54 < ChrisPartridge> gabrielstuff: I took a look, don't use passport so not sure, but i think app.configure is deprecated
02:54 < gabrielstuff> hum… app.configure ?
02:55 < gabrielstuff> hop I do not think 
02:55 < gabrielstuff> http://expressjs.com/api.html#app.configure
02:55 < gabrielstuff> http://passportjs.org/guide/configure/
03:00 < ChrisPartridge> gabrielstuff: but your app.configure() is redundant in that sense, because all that code is going to run for all environments, yet you're manually saying "when env != test, include the logger", it should really be app.configure('production', function() { //add logger });
03:00 < gabrielstuff> well.. ok thanks I'll do that :)
03:00 < ChrisPartridge> however, all that probably wouldn't stop passport/sessions from working, just saying :)
03:00 < ChrisPartridge> does console.log(req.session) output anything on a req?
03:00 < gabrielstuff> but I'm not sure this is blocking express passport / sessions
03:01 < gabrielstuff> undefined
03:01 < gabrielstuff> on every single routes
03:01 < gabrielstuff> even the users ones
03:03 < ChrisPartridge> gabrielstuff: can you see writes going to mongo? what happens if you remove the mongo stuff from express.session?
03:03 < gabrielstuff> oh didn't think about that :)
03:03 < gabrielstuff> let me check
03:04 < gabrielstuff> yup
03:04 < gabrielstuff> they are here :)
03:04 < gabrielstuff> thanks !
03:04 < gabrielstuff> I feel better !
03:04 < ChrisPartridge> so its writing to mongo? or mongo was the problem?
03:04 < gabrielstuff> even if it not yet solved
03:05 < gabrielstuff> no it is writing to mongo
03:05 < ChrisPartridge> ok
03:05 < gabrielstuff> so mongo is fine
03:05 < ChrisPartridge> so comment out passport,
03:05 < ChrisPartridge> and see if req.session is in the route
03:05 < gabrielstuff> hum…. my app depend on passport… oh you mean comment the passport session part...
03:05 < gabrielstuff> ok I'll try that
03:06 < ChrisPartridge> gabrielstuff: yes, just for trouble shooting
03:06 < SBoudrias> Anyone know if can set __defineGetter__ on native types (I'd like to set it up on a String)
03:07 < gabrielstuff> I can not login :)
03:07 < gabrielstuff> of course
03:07 < ChrisPartridge> gabrielstuff: so this has been working before? 
03:08 < gabrielstuff> i never said i can not login
03:08 < gabrielstuff> I said
03:08 < gabrielstuff> that I can not access to it programatically
03:08 < gabrielstuff> all the code shown works
03:08 < gabrielstuff> it is when I try to access to req.session
03:08 < gabrielstuff> from any other routes
03:11 < ChrisPartridge> gabrielstuff: i see, have you defined deserializeUser ?
03:11 < gabrielstuff> yup
03:11 < gabrielstuff> :(
03:12 < ChrisPartridge> are you sure its not falling over in there?
03:12 < gabrielstuff> hum
03:12 < gabrielstuff> … i'm not sure :)
03:12 < ChrisPartridge> gist that code?
03:12 < gabrielstuff> i could try to see there
03:12 < ChrisPartridge> seems plausible, if req.session has no data
03:13 < gabrielstuff> https://gist.github.com/gabrielstuff/5733546#file-passport-js-L18
03:26 < ChrisPartridge> gabrielstuff: try console log user inside the findOne, or err, see if somethings happening there. tbh, not really use, don't use passport
03:27 < gabrielstuff> why ? 
03:36 < harbhub> hey fellas, is there a way to convert an audio file (mp3, wav, etc) into a text file?
03:36 < gluxon> harbhub: No....
03:36 < harbhub> i'd like to do this using a javascript and/or a node.js module
03:36 < harbhub> gluxon, why not?
03:36 < gluxon> That's kind of like asking to turn .png to .txt
03:36 < Zolmeister> ckknight: nice job on the quantum js stuff, pretty interesting
03:36 < harbhub> no it isn't 
03:37 < gluxon> harbhub: What are you trying to accomplish with this?
03:37 < harbhub> i want to take the words from someone talking into a microphone
03:37 < harbhub> and print that as text
03:37 < gluxon> Ah.. ok.
03:37 < harbhub> like Siri
03:37 < gluxon> That's better.
03:37 < gluxon> The word you want isn't "convert", it's "dictate"
03:37 < harbhub> now that we've clarified what i'm trying to accomplish, is there a known solution
03:37 < harbhub> ah okay
03:37 < owen1> ChrisPartridge: ok. thanks
03:38 < gluxon> harbhub: I would use Google Speech API.
03:38 < harbhub> let me look into that gluxon
03:38 < gluxon> harbhub: From a quick search, this looks like it'll work -> https://npmjs.org/package/google-speech-api
03:40 < ChrisPartridge> gabrielstuff: does passport actually do anything with the session? maybe the issue is in the connect-mongo session store?
03:40 < gluxon> harbhub: A downside to that is that audio is limited to 10 seconds.
03:40 < gabrielstuff> I'll check later :)
03:40 < gabrielstuff> because it is 6am in France
03:40 < gabrielstuff> and it is like 15h i'm in front of a screen
03:40 < gabrielstuff> :)
03:40 < harbhub> well gluxon
03:40 < gabrielstuff> so thank you I'll keep posted here
03:40 < harbhub> that is better than nothing, but still a downside
03:40 < gabrielstuff> about this issue
03:41 < gabrielstuff> thank you very much
03:41 < ChrisPartridge> gabrielstuff: good luck, a bet of rest always helps anyway :)
03:41 < harbhub> i can split the file into parts (break it up by bytes like a content-range header)
03:41 < gabrielstuff> if anyone else want to take a look
03:41 < harbhub> and then individually analyze the parts
03:41 < harbhub> hopefully, it won't cut a word in half, though!
03:41 < gluxon> harbhub: You could.
03:41 < gluxon> harbhub: An alternative is to buy a Nuance license.....
03:42 < harbhub> gluxon, i just need to parse audio commands (less than 10 seconds anyways)
03:42 < gluxon> Ok :)
03:43 < gluxon> 10 seconds is actually a long time to speak.
03:43 < ChrisPartridge> gluxon: how accurately do these work? 
03:44 < gluxon> ChrisPartridge: I find Google Speech API as good as Siri.
03:44 < gluxon> Siri is powered by Nuance Natural Speaking, which requires a license to use in your own apps though.
03:44 < ChrisPartridge> interesting, i've got use cases flooding into my mind now
03:45 < harbhub> exactly gluxon  :)
03:45 < harbhub> referring to the 10 seconds being a long time to speak
03:45 < harbhub> thanks for the information, though
03:45 < harbhub> i will definitely look into nuance natural speak
03:45 < harbhub> and apply it to my application in the future
03:45 < harbhub> for now i will hack away with the free stuff  :)
03:46 < gluxon> :)
03:46 < harbhub> gluxon, would you have to know about something that takes text and make an audio file out of it? (reverse dictation)
03:46 < gluxon> I used google for my own projects.
03:46 < gluxon> It was awesome.
03:46 < gluxon> harbhub: There's speech.js
03:47 < harbhub> gluxon, you used google-speech-api?
03:47 < gluxon> harbhub: And I found say.js through a quick google :D
03:47 < gluxon> https://github.com/marak/say.js/
03:47 < gluxon> harbhub: Yes, I was making a Node.js Siri Server.
03:47 < gluxon> I never finished though.
03:47 < harbhub> i found say.js, but i'm on windows
03:48 < harbhub> gluxon, do you have any short audio clips of someone saying something like "hello there'
03:48 < harbhub> i need a shorter-than-10-second audio clip heh
03:49 < deoxxa> harbhub: you have a microphone, right?
03:49 < gluxon> No :(
03:49 < harbhub> no deoxxa
03:49 < harbhub> i do not  :(
03:49 < harbhub> or i'd have just recorded myself lol
03:50 < deoxxa> well, you have google, right?
03:50  * deoxxa furrows brow
03:50 < harbhub> deoxxa, you have a microphone, right?  can you send me an email with a short audio clip of you saying some command?
03:50 < gluxon> harbhub: Oh, you want a audio sample to test with?
03:50 < harbhub> i have google, can't find short audio clip of person giving command
03:50 < harbhub> yes
03:50 < harbhub> for testing
03:51 < gluxon> harbhub: 1 min
03:51 < harbhub> thanks amigo
03:53 < gluxon> harbhub: I like pickles :D
03:53 < gluxon> https://github.com/taf2/speech2text/tree/master/samples
03:54 < gluxon> I knew I found a library somewhere that had a sample.
03:54 < gluxon> Just had to google again to find it.
03:55 < harbhub> time to test  :)
03:56 < harbhub> Error: Command failed: 'sox' is not recognized as an internal or external comman d, operable program or batch file.
03:56 < harbhub> gluxon^
03:57 < gluxon> :(
03:57 < gluxon> harbhub: What are you doing exactly?
03:57 < ChrisPartridge> gluxon: is the google speech to text api not really official?
03:57 < gluxon> Did you npm install the google-speech-api?
03:57 < harbhub> trying to dictate the wav file
03:57 < harbhub> yep
03:58 < gluxon> ChrisPartridge: The Google Speech API was created for the HTML5 voice feature.
03:58 < gluxon> Someone documented it.
03:58 < harbhub> oh
03:58 < gluxon> But Google has never documented it themselves.
03:58 < harbhub> it has to be done in an html5 page?
03:58 < gluxon> And they haven't said antyhing about it.
03:58 < gluxon> harbhub: No.
03:58 < harbhub> can't be done serverside on nodejs?
03:58 < gluxon> harbhub: It can.
03:58 < harbhub> :(
03:58 < gluxon> harbhub: Did you do npm install google-speech-api?
03:59 < harbhub> yep
03:59 < harbhub> pickles
03:59 < harbhub> i can play the song
03:59 < harbhub> i can't dictate it :(
03:59 < gluxon> harbhub: Can you paste your script to gist or pastebin?
04:00 < harbhub> https://gist.github.com/harbhub/5733983
04:00 < harbhub> gluxon^
04:01 < ChrisPartridge> haha dang, it can tell the difference between "dickson street" and "dixon street"
04:01 < harbhub> oh it requires sox...
04:01 < gluxon> harbhub: Do ./test.wav
04:01 < harbhub> http://sox.sourceforge.net/
04:01 < harbhub> i did have ./test.wav
04:01 < harbhub> i just changed it to that lol
04:02 < gluxon> harbhub: Oh ok.
04:02 < gluxon> Looks like it does have a dependency on sox.
04:03 < gluxon> Go ahead and install it, then see if it works :D
04:05 < harbhub> installing then testing
04:06 < harbhub> then reporting finding
04:06 < harbhub> findings*
04:08 < harbhub> gluxon, can't install sox properly for some reason...
04:09 < harbhub> http://sourceforge.net/projects/sox/?source=dlp
04:09 < harbhub> trying to get it here but it fails
04:10 < harbhub> gluxon, do i need to put the sox.exe into the bin folder?
04:11 < gluxon> harbhub: Try it? :D
04:11 < gluxon> harbhub: Ideally, add the sox directory to your PATH
04:11 < gluxon> Then open up a cmd and type in "sox"
04:11 < harbhub> gluxon, what do you mean?
04:12 < harbhub> oh
04:12 < harbhub> ...
04:12 < harbhub> still not working
04:16 < jesusabdullah> SO question: Suppose you want to compile sass with node. What library do you use? There appears to be MANY of them
04:18 < medice> might as well install ruby and the actual sass compiler
04:19 < jesusabdullah> yeah well that's not what I want to do
04:19 < jesusabdullah> I'd rather port to less
04:19 < jesusabdullah> but if there's reasonable sass tooling for node...
04:19 < jesusabdullah> ...worth investigating anyways
04:24 < calvinfo> jesusabdullah, we didn't find a fully featured one
04:25 < calvinfo> so we just wrapped the ruby gem
04:25 < jesusabdullah> calvinfo: exciting stuff. I think maybe I'll just port to less
04:25 < jesusabdullah> or, y'know, compile once and call it a fuckin' day
04:25 < jesusabdullah> there's no reason this should be in sass it's like 200 lines long
04:26 < calvinfo> haha
04:26 < medice> sass --watch sass/:mahcopmiledcss/
04:26 < calvinfo> having a fully compatible one would be cool
04:26 < calvinfo> we did find a race condition with the .sass-cache
04:26 < medice> oh dear
04:27 < jesusabdullah> I don't have a file called :mahcompmiledcss
04:27 < medice> it would be a directory
04:28 < medice> and : separates source from target
04:37 < Hounddog> i am just trying to get a nodejs app running with ssl using express
04:37 < Hounddog> i have node-http-proxy running to reroute to certain ports so i forwarded 443 to port 3000 and the app is running on 8065 for the moment
04:38 < Hounddog> are there any good working examples?
04:46 < arnorhs> Hounddog: you mean you have a problem with that setup? or are you just thinking of looking at other examples of how people do this using node-http-proxy?
04:46 < Hounddog> arnorhs: am having problem
04:46 < arnorhs> Hounddog: cool, what's the problem?
04:46 < Hounddog> https://www.snipboards.com:8065/
04:47 < Hounddog> i put together a small samlpe app for this currently
04:48 < Hounddog> i might be confused atm... been working all night :) help is really apreaciated just doing a pase
04:48 < Hounddog> paste
04:48 -!- mode/#Node.js [+o TooTallNate] by ChanServ
04:49 < Hounddog> arnorhs: http://pastebin.com/p1c0WpgA
04:49 < Hounddog> just something simple bevor i test it out
04:50 < Hounddog> arnorhs: not sure where i am going wrong :)
04:57 < Hounddog> arnorhs: you have any idea maybee?
04:58 < arnorhs> Hounddog: i'm looking
04:58 < Hounddog> cool
04:58 < arnorhs> Hounddog: does the https work w/o the proxy}
04:58 < arnorhs> ?
04:58 < Hounddog> no
04:59 < Hounddog> tried by giving the port directly
04:59 < Hounddog> http://www.snipboards.com:8065/ normal works
05:00 < Hounddog> with https connection error with ssl probs
05:08 < arnorhs> Hounddog: i have no idea what's wrong
05:08 < Hounddog> so it looks all correct you mean?
05:09 < arnorhs> how did you set up your certificates?
05:13 < Hounddog> arnorhs: with godaddy
05:13 < Hounddog> followed their procedures
05:16 < arnorhs> Hounddog: i have no idea.. something wrong with how you set up express with ssl
05:16 < arnorhs> never done so myself
05:17 < arnorhs> seems like what's described in http://expressjs.com/api.html on how to create an https server is a bit different than what you're doing
05:25 < Hounddog> arnorhs: i just followed some tutorial for it, checking out the api 
05:26 < arnorhs> it's possible that the tutorial was for an older version of express
05:30 < Hounddog> arnorhs: !!!!
05:31 < Hounddog> arnorhs: got it working
05:31 < Hounddog> http://pastebin.com/kvhMgyVL
05:31 < Hounddog> phew...
07:27 < jesusabdullah> Question 4 U: Where do you guys store your less files? Presumably you are generating them and dumping the css into your static or public folder, but where does the sauce go?
07:27 < jesusabdullah> Anybody?
07:28 < jesusabdullah> deoxxa: you ever use less for css stuff?
07:28 < vks> hi all
07:29 < jesusabdullah> hi vks
07:30 < vks> hi jesus
07:31 < deoxxa> HI JESUSABDULLAH
07:31 < deoxxa> no
07:31 < deoxxa> i don't
07:31 < ningu> jesusabdullah: how about in app/less/ :P
07:32 < deoxxa> BACK TO FOOD
07:32 < vks> i have a file which includes one class and i want to use that class in another file how could i do that??? I am getting error module not found
07:32 < ningu> vks: module.exports = Class;
07:33 < vks> i have done that
07:33 < jesusabdullah> ningu: I SUPPOSE THAT WORKS
07:33 < ningu> vks: if it's not in node_modules you need to use ./ or ../
07:36 < vks> ningu : i got another problem. http://pastebin.com/Ej5NRv3a
07:37 < vks> ningu : Cannot read property '$emit' of undefined
07:37 < SomeoneWeird> i need to code something 
07:37 < SomeoneWeird> help me
07:37 < SomeoneWeird> ideas
07:37 < SomeoneWeird> pls
07:37 < vks> i am getting that error
07:38 < SomeoneWeird> socket isn't defined when you're accessing socket.$emit
07:38 < vks> ningu: one thing is my class is not getting instantiniated
07:38 < SomeoneWeird> var x = socket.$emit;
07:38 < vks> SomeoneWeird : thats true
07:39 < vks> SomeoneWeird: http://pastebin.com/Xrx3XvvR
07:39 < vks> my test app
07:40 < ningu> vks: module.exports should be at the bottom of the file that declares Monitd
07:40 < SomeoneWeird> yeah, you need to assign socket before you try to assign x
07:40 < ningu> then in the other file, var Monitd = require('./monitd');
07:41 < vks> ningu : it is already in bottom of the file
07:41 < SomeoneWeird> vks did you write that class?
07:41 < ningu> vks: oh, I thought from line 87 that maybe that was more than one file
07:41 < SomeoneWeird> before no offense you really need to be using prototypes
07:41 < SomeoneWeird> er, because*
07:42 < vks> SomethingWeird: is there anything wrong with that approach
07:42 < vks> ??
07:42 < SomeoneWeird> i well
07:42 < SomeoneWeird> ffs i can't type
07:42 < vks> ningu: http://pastebin.com/Xrx3XvvR
07:42 < SomeoneWeird> there's not really, but using prototypes and actual "class variables" (this.x = socket;) will make it a lot easier to debug
07:47 < vks> ningu: any idea?
07:48 < vks> SomeoneWeird: my Monitd class itself is not getting instantiated
07:48 < SomeoneWeird> of course it's not, you've got errors
07:48 < SomeoneWeird> it's dying when you're require()'ing it
07:48 < SomeoneWeird> i've told you why
07:50 < vks> SomeoneWeird: so making class as prototypes the problem will be solved??
07:50 < SomeoneWeird> no
07:50 < SomeoneWeird> <SomeoneWeird> socket isn't defined when you're accessing socket.$emit
07:58 < vks> SomeoneWeird: I solved my problem
07:59 < vks> SomeoneWeird: Just moved the socket.emit $ code in the class definition
07:59 < SomeoneWeird> that'd work
07:59 < vks> thnx ningu
07:59 < vks> thnx jesusabdullah
07:59 < vks> thnx SomeoneWeird
08:04 < sinclair|net> TS 0.9 is now in beta
08:14 < NoFaTe> Hey folks, anyone know what "Native" is in node-memwatch?
09:15 < Purefan> Hello everyone, noob having problems with instantiation, my objects created with Object.create keep polluting each other
09:15 < Purefan> I just want to create many objects and to keep their variables internal to each one, but its not playing nice with me
09:16 < Purefan> I have tried with Object.create and require('...) to create these objects but its no use
09:17 < RLa> paste some code
09:17 < Purefan> Im on it
09:17 < ningu> Purefan: not in the channel :)
09:17 < Purefan> :) pastebin of course
09:18 < RLa> you sound like you have important properties on object prototype not on object itself
09:18 < gildean> Purefan: or maybe jsfiddele.net so you can run the code easily
09:19 < gildean> http://jsfiddle.net even
09:21 < Purefan> Ok here is some code, not functional though but it illustrates my problem http://pastebin.com/gffH0VHS
09:22 < Purefan> in index.js I need to create many boards, and each board needs to have its own counter
09:22 < ningu> Purefan: require() caches its results
09:22 < ningu> it will always return the same object for require('./board.js')
09:22 < Purefan> ok! that explains it..
09:22 < ningu> you need to export a function or something like that
09:23 < Purefan> ok so in board.js I should do a "function Board" and module.exports = Board ?
09:23 < SomeoneWeird> Purefan, http://pastebin.com/GBQNVpfs
09:23 < SomeoneWeird> oh, and add module.exports = Board; after that code
09:24 < SomeoneWeird> okay actually, sec
09:24 < Purefan> ok ok cool! then in index.js I should do Object.create right?
09:25 < ningu> Purefan: you already create a new object with new events();
09:25 < SomeoneWeird> http://pastebin.com/5603CtHy
09:25 < SomeoneWeird> there you go
09:25 < SomeoneWeird> don't use Object.create
09:25 < Purefan> right on! going to give this a go, thanks a lot guys! :D
09:29 < Purefan> Dang, didnt work :(  Im going to prepare a better pastebin to share
09:30 < SomeoneWeird> it should of, you might have other bits in your code that need changing though
09:45 < gildean> you can totally use Object.create if you want linear prototype-chains instead of the mess that using 'new' makes
09:46 < Purefan> I only read about the issues with "new" and tried other things, but I accidentally refreshed my chrome tab when pasting code to pastebin and lost what I had there
09:46 < SomeoneWeird> oh ofc, gildean 
09:53 < sinclair|net> if anyone is interested, I have just updated some typescript / nodejs compiler api stuff to use the latest TypeScript compiler build (released 2 days ago)
09:53 < sinclair|net> https://github.com/sinclairzx81/typescript.api/
09:55 < Purefan> Ok here is some more code, hope someone can help me http://pastebin.com/2qBmXL3t
09:55 < Purefan> its a chess playing server, it can trigger oServer.oRooms.add at any time, same with oServer.oRooms.makeMove
09:56 < Purefan> the seekId for the oServer.oRooms.add is randomly generated, it is always different
09:57 < Purefan> the problem is that when making a move in Game.prototype.makeMove the counter for that move is initialized from a previous game
09:59 < sinclair|net> Purefan: welcome to javascript, make it simpler, use objects, keep your server state sane
10:00 < sinclair|net> Purefan: sounds to me like you are making a mess of things
10:00 < ningu> also sprach sinclair
10:00 < sinclair|net> ningu: https://npmjs.org/package/typescript.api
10:00 < Purefan> yeah it feels like a mess from my end too
10:00 < sinclair|net> POW!
10:01 < Purefan> I will try moving game.js into board.js, with a new Board it should carry a new game inside
10:01 < sinclair|net> ningu: now running on the compiler build release put out two days ago 
10:01 < sinclair|net> Purefan: wait, what?
10:02 < ningu> sinclair|net: oh, yeah, someone was in here the other day actually asking about modules like that -- iirc only asking about coffeescript
10:02 < Purefan> sinclair: yeah, the code in game.js is not too big, maybe doing all these "new" is too much, I just want a new object that keeps its variables to itself
10:03 < sinclair|net> ningu: aww, could have got someone to download me code
10:03 < sinclair|net> ningu: had 17 download over the past month, and ranked on npm behind lesser projects
10:03 < ningu> well, typescript is not very well known
10:03 < ningu> very MS-centric
10:03 < sinclair|net> ningu: not really
10:04 < ningu> I don't mean it is MS-centric in design
10:04 < ningu> but I've only ever heard of it from you, who clearly use a lot of MS products, and my friend who works for MS
10:04 < sinclair|net> ningu: i use all sorts of prods
10:05 < sinclair|net> ningu: just happens that MS have some top class engineers building their dev tech
10:10 < Industrial> Is there a console.log that can show an object all the way down?
10:10 < ningu> JSON.stringify it
10:10 < ningu> or util.inspect
10:11 < Industrial> ningu: util.inspect still shows me [Object]'s. I guess I need a pretty-printed stringify :)
10:12 < nathan7> Industrial: You can tell it to go down infinitely
10:13 < Industrial> ah
10:13 < nathan7> Industrial: util.inspect(obj, {depth: null})
10:13 < nathan7> I tend to do depth: Infinity
10:14 < Industrial> with colors, great:)
10:24 < accc> hi'all
10:28 < Industrial> l
11:00 < ningu> hrm... my .ssh/id_rsa is apparently password-protected, but I don't have to enter the password when I use it to connect anywhere, why is that?
11:00 < SomeoneWeird> ssh-agent?
11:01 < ningu> maybe.
11:01 < ningu> this is on my OS X laptop.
11:01 < ningu> I have no memory of assigning the password, sadly :) can always just make a new one.
11:01 < RLa> crap, why internet things still use rfc822 date
11:01 < usebydate> you can password protect a file?
11:01 < ningu> ssh-agent is running.
11:01 < RLa> now i have to parse it
11:01 < RLa> in c++ :/
11:01 < ningu> usebydate: you can password protect ssh keys so that only with the password can you use it.
11:02 < ningu> you can still read the file.
11:02 < usebydate> ningu; it's impressive that you're fully up to speed with ssh keys while blind drunk and about to pass out :)
11:03 < ningu> eh?
11:04 < usebydate> you said you had no memory of it, was a joke
11:06 < nathan7> ningu: it might be unlocked on login
11:06 < ningu> nathan7: sure. but then shouldn't it have the same passphrase as my account?
11:07 < nathan7> ningu: it would
11:07 < ningu> yeah, but apparently it doesn't.
11:08 < usebydate> a previous password?
11:08 < ningu> I wouldn't have mentioned it in here if it was a password I normally use.
11:08 < ningu> I already tried those :)
11:08 < ningu> I'm just wondering cause it works fine for me to use it over ssh from the cmdline but cyberduck wants me to enter a password.
11:08 < ningu> something is weird.
11:18 < RLa> how one creates Error object instance in native extension code?
11:28 < bnoordhuis> RLa: v8::Exception::Error(), v8::Exception::TypeError(), etc.
11:30 < RLa> hm, nice
11:30 < RLa> but can i also instantiate js's Date instance?
11:37 < bnoordhuis> RLa: Date::New()
11:38 < RLa> bnoordhuis, thanks
11:38 < bnoordhuis> RLa: have a look at deps/v8/include/v8.h, it's got tons of goodies
11:39 < RLa> yeah, will do
11:41 <@MI6> joyent/node: Fedor Indutny master * 9ae1d18 : crypto: free excessive memory in NodeBIO - http://git.io/R3lamA
11:54 < Industrial> Anyone use node-supervisor?
11:55 < Industrial> How do I pass bash arguments to the target program? supervisor -w $1 -e 'html|css|js' -x 'livescript' "./server.ls $1" won't work nor without "'s
11:58 < Industrial> ah got it
11:59 < Industrial> supervisor -w $1 -e 'html|css|js' -x 'livescript' -- ./server.ls $1
12:00 < Industrial> so it watches the dir for changes and reloads this server, which serves those static files I'm editing causing the reloads
12:00 < Industrial> erm, and the server reloads the browsers :)
12:00 < Industrial> (yes yes done before)
12:27 < sinclair|net> hey all, does anyone have any thoughts on this ? http://pastebin.com/Phu4LEFq
12:28 < sinclair|net> TypeScript is just so much nicer to code in
12:50 < koldus> hi guys, i got a EPIPE error in mysql connection using mysql@2.0.0-alpha8 with node js. There's a maximun length in the query that sould be respected? Can't find anything on web.
12:51 < ningu> koldus: when do you get the error?
12:51 < koldus> using the method query in the callback function
12:52 < koldus> i try to make 1222576 bytes of query
12:52 < Hoppertje> does node.js have something alike requestAnimationFrame ?  something you can base your loop on with delta ? something more reliable then setTimeout ?
12:52 < sinclair|net> Hoppertje: wtf?
12:53 < Hoppertje> i guess not
12:53 < ningu> Hoppertje: more like, we have no idea what you're talking about
12:53 < sinclair|net> Hoppertje: what i don't get is how you can confuse the functionality of requestAnimationFrame and a setInterval / setTimeout
12:53 < Hoppertje> i thought node had something that keeps track of cpu cycles vs open window oppertunities 
12:53 < ningu> at least, I don't
12:54 < Hoppertje> sinclair|net: ...
12:54 < ningu> Hoppertje: there is the notion of a tick in the event loop
12:54 < sinclair|net> ningu: seriously mate, there needs to be a level of competency before people start with node
12:54 < ningu> if you want something to run on the next tick you do setImmediate()
12:54 < ningu> Hoppertje: but what are you trying to do, anyway?
12:55 < Hoppertje> ah, process.nextTick()
12:55 < ningu> Hoppertje: in 0.10 you should use setImmediate
12:56 < Hoppertje> thanks ningu
12:56 < sinclair|net> Hoppertje: process nextTick is not recommended, additionally, it has nothing to do with looping constructs / cpu cycles, or anything
12:56 < sinclair|net> NOTHING AT ALL
12:56 < sinclair|net> requestAnimationFrame is a signal to the client when painting has completed
12:56 < Hoppertje> right
12:56 < ningu> well, it's useful if you are doing large amounts of cpu intensive stuff
12:56 < sinclair|net> painting, not CPU anything
12:57 < sinclair|net> ningu: better to spawn a new process entirely 
12:57 < ningu> sinclair|net: depends exactly how cpu intensive :) but sure
12:57 < Hoppertje> sinclair|net: would it be possible to somehow give some controll to a loop, so it becomes more reliable ?
12:57 < sinclair|net> ningu: well, be it a new node process, or some native process, its all good
12:58 < ningu> Hoppertje: do you have a loop that's "unreliable"? again, what are you trying to do?
12:58 < sinclair|net> Hoppertje: i have no idea why you think the loop is unreliable 
12:58 < Hoppertje> firing an settimeout for example sometimes has a bigger delay then expected
12:59 < sinclair|net> Hoppertje: only because other things might be in the event queue 
12:59 < sinclair|net> Hoppertje: its not something you should be tinkering with
12:59 < Hoppertje> right
12:59 < Hoppertje> sinclair|net: ok you cleared that up, thanks
12:59 < sinclair|net> Hoppertje: you are in node, and node is javascript, therefore, you have to play by the rules
13:00 < sinclair|net> just use setInterval or setTimeout, there is little reason not to
13:00 < Hoppertje> ok
13:02 < sinclair|net> Hoppertje: even requestAnimationFrame has the same penalties in a event loop sense, all you are saying there is "when painting has finished, push this callback onto the queue"
13:02 < Hoppertje> right
13:03 < sinclair|net> Hoppertje: watch this https://www.youtube.com/watch?v=jo_B4LTHi3I
13:12 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:13 < olalonde> is there an api to randomize nextTick? what i want is my function to be called at a random tick in the future. would help me test my library 
13:14 < olalonde> ahhh guess i could use setTimeout
13:14 < olalonde> nvm
13:19 < olalonde> anyone uses git-extras?
13:24 < berdario> Hi, I'm trying to tweak one of the node-webkit examples from https://github.com/zcbenz/nw-sample-apps
13:25 < berdario> I want to avoid bundling all the libraries, and specifying them in the HTML... I'd like to use the HTML only for a simple declarative gui
13:25 < berdario> and requiring() codemirror and zepto inside the js code
13:26 < berdario> unfortunately, requiring codemirror, fails with "Uncaught ReferenceError: navigator is not defined"
13:30 < Vermicelli> Anyone ever deployed any nodejs app on openshift by RedHat? Any pointers?
13:31 < sinclair|net> anyone have any opinions on the best templating framework for nodejs?
13:32 < Vermicelli> I think jade is pretty handy
13:32 < sinclair|net> sorry, i think jade sucks
13:32 < Vermicelli> any reasons? 
13:34 < Havvy> The only thing that sucks about Jade is the significant whitespace.
13:34 < sinclair|net> Vermicelli: the source looks nothing like the output, its developed by visionmedia, and doesn't handle arbitrary templating of non html things 
13:35 < sinclair|net> Haml is not my cup of tea
13:35 < Vermicelli> well i agree to the first part.
13:35 < Havvy> What have you against visionmedia? o.0
13:35 < sinclair|net> i would lean towards ejs, but i think i might go with either underscore or handlebars
13:36 < Vermicelli> Well as long as you can get your work done does it even matter what templating engine it is?
13:36 < Vermicelli> why do u hate visionmedia btw? 
13:36 < sinclair|net> Vermicelli: performance is important
13:37 < sinclair|net> Vermicelli: who said anything about "hate" don't put words in my mouth
13:38 < Vermicelli> We use jade in 3 of your projects. There is no performance problem that we faced. Can you elaborate?
13:38 < sinclair|net> Vermicelli: i already said, i don't like jade
13:39 < Vermicelli> you said about performance. I am asking about performance.
13:39 < Havvy> And again, why is 'its developed by visionmedia' a bad thing?
13:40 < sinclair|net> Havvy: i have had troubles with their modules in the past, and i don't like their code standards
13:41 < sinclair|net> Havvy: don't really like express either, so i wrote my own http://pastebin.com/Phu4LEFq
13:43 < Vermicelli> O_o
13:44 < sinclair|net> Vermicelli: ?
13:44 < sinclair|net> Vermicelli: don't you roll your own web frameworks on node?
13:45 < Vermicelli> i do when i need them, haven't found a need to write my own version of express till now. 
13:45 < Vermicelli> Could you elaborate, what was the problem? 
13:45 < sinclair|net> till now?
13:45 < Vermicelli> maybe we will learn a thing or two
13:45 < sinclair|net> i have many reasons for not using express
13:45 < Vermicelli> Please..
13:45 < sinclair|net> 1) i think its limited
13:45 < Vermicelli> as in?
13:47 < sinclair|net> Vermicelli: adding and removing routes at runtime is frowned upon, middleware is a all or nothing affair, the route handlers pass in request / response, and nothing else, and i can't extend it in all the way in which i would in say, aspnet mvc
13:48 < Vermicelli> ohk, well here is a thing, express is not aspnet mvc. so comparing it with that is kind unfair
13:49 < sinclair|net> Vermicelli: its not about being fair, its about if it does the things i need it to
13:49 < Vermicelli> there are lot of things which happen in open source world that are different. And if there is something that could be improved in express, you can try and contribute it right?
13:49 < Vermicelli> That what open source is all about.
13:49 < sinclair|net> in that code i posted, i can write new controllers, and bind them to the application at startup, or runtime
13:50 < Vermicelli> Well, that's cool but why do u need to that ?
13:50 < sinclair|net> the application handles route ordering, i can supply optional meta data for a route (like roles able to access that route) and any number of other things
13:50 < Vermicelli> Any application specific requirements?
13:51 < sinclair|net> Vermicelli: yes, its a base line a platform for developing a cms infrastructure on top
13:52 < Vermicelli> Oh, then maybe it doesn't give what you need. 
13:52 < Vermicelli> So did you write any node module that can do that
13:52 < Vermicelli> ?
13:52 < Vermicelli> at startup or runtime?
13:52 < sinclair|net> i wrote everything
13:52 < Vermicelli> open sourced?
13:53 < sinclair|net> at this stage, no, however the typescript.api (i also wrote) is open source
13:53 < sinclair|net> Vermicelli: https://npmjs.org/package/typescript.api
13:54 < Vermicelli> hmm, so u planning to open source it at any stage?
13:55 < sinclair|net> Vermicelli: maybe the web platform part, maybe not the cms
13:55 < Vermicelli> It's good that you are bringing the good things from MS (ASP, .NET) to node community
13:56 < sinclair|net> Vermicelli: perhaps, its unfortunate that more people haven't clicked on to TS tho
13:56 < Vermicelli> Well, i too don't understand much need of it. Can u tellme what it brings that other alternatives had lacking
13:57 < sinclair|net> too many things, best have a chat in #typescript 
13:58 < Vermicelli> i am there. respond
14:01 < bitcoin_boy> Node.js doesn't run some kind of Internet-facing server by default, does it?
14:01 < bitcoin_boy> AKA, I can keep it installed even though I don't use it safely?
14:02 < Vermicelli> host it on a port that is randomly generated and only you can generate the same port at that time. :P
14:02 < bitcoin_boy> ?
14:03 < Vermicelli> just kidding!
14:03 < Vermicelli> ;) Don't mind. On a serious note what is your exact problem?
14:04 < bitcoin_boy> I think I just asked it...
14:04 < bitcoin_boy> Worrying about Node.js being a security risk.
14:04 < Havvy> bitcoin_boy: No, it doesn't.
14:04 < bitcoin_boy> Ah.
14:04 < Vermicelli> i don't understand how?
14:05 < Vermicelli> You can always take security measures right?
14:05 < bitcoin_boy> You don't happen to know if there is a npm that can encrypt JS (CC compiled) and pack in a method to decrypt it at runtime?
14:05 < bitcoin_boy> Vermicelli: Huh?
14:06 < Havvy> bitcoin_boy: There probably is one, but that kind of encryption is useless.
14:07 < bitcoin_boy> I make JavaScript things. I compile them with Closure Compiler in advanced mode, which essentially minifies, optimizes and in a way obscurifies the code. However, strings and whatnot are still there to read for anyone who looks at the code.
14:07 < Havvy> Presuming you are trying to stop the user from looking at the script.
14:07 < bitcoin_boy> I am trying to find a way to encrypt this automatically and then decrypt it at runtime each time, knowing full well that it doesn't prevent somebody determined to get the code, but I still like the feeling of nobody being able to use their human eyes directly to read internal strings. Like the UPX packer for EXEs.
14:07 < bitcoin_boy> A UPX packed EXE cannot be simply opened directly in a text/hex editor and read. You first have to get UPX and unpack it. I know that this is security through obscurity and it doesn't bother me. The only tool I found was unfortunately commercial.
14:07 < bitcoin_boy> I'd rather not use some kind of cobbled-together hack.
14:08 < Havvy> You won't get any help with security through obscurity on IRC.
14:08 < Havvy> Basically, if you can't trust your users with data, don't send them data.
14:09 < bitcoin_boy> "You won't get any help" <-- WHY?
14:09 < bitcoin_boy> "don't send them data" <-- WHAT?
14:09 < bitcoin_boy> If you don't want to get shot, never go outdoors.
14:09 < bitcoin_boy> Idiotic.
14:10 < Havvy> To use this analogy:  If you don't want to get shot, never go outdoors.
14:11 < Havvy> Security by oscurity would be the equivalent of trying to not go outside by making your house move.
14:11 < Havvy> It's inefficient, impractical, and doesn't solve the actual issue.
14:16 < jade_challenge> Hi guys
14:16 < jade_challenge> please
14:16 < jade_challenge> help me with jade templates
14:17 < jade_challenge> how to pass html path to web storm in order to debug
14:17 < jade_challenge> can anyone help?
14:19 < Vermicelli> What do u need to debug?
14:19 < Vermicelli> jade or html?
14:20 < bitcoin_boy> Havvy: Just because you and an army of other stubborn programmers have given up on the idea of protecting your work doesn't mean I have to as well. Stop forcing me into not applying security measures. I want to. I feel the need to. I feel it's meaningful. I KNOW IT DOES NOT STOP EVERYONE.
14:20 < bitcoin_boy> I don't know how many times I have to repeat it before people read it...
14:20 < bitcoin_boy> I know. I know. I know.
14:21 < Havvy> bitcoin_boy: I've never had the notion of protecting my work.
14:21 < Havvy> I deliver features, not code.
14:22 < sinclair|net> Havvy: side note, TS 0.9 beta is out
14:22 < sinclair|net> Havvy: got released 2 days ago
14:22 < jade_challenge> only jade
14:23 < Havvy> Beta? I thought 0.9 beta was released a month ago.
14:23 < AAA_awright> bitcoin_boy: That's not a security measure.
14:24 < jade_challenge> Vermicelli can you tell me if I able to debug remote client js by not pointing it to html file but with jade?
14:24 < AAA_awright> bitcoin_boy: Go into ##crypto and ask "How do I make my code more secure" I'll bet money the first answer you get is "Share the code, get peer review" or comprable advice.
14:25 < stefan___> hello, need a little help
14:25 < stefan___> did anybody use node-irc ?
14:26 < jade_challenge>  can you tell me if I able to debug remote client js by not pointing it to html file but with jade?
14:27 < M28> bitcoin_boy is a comedy genius
14:27 < AAA_awright> M28: What are you implying
14:28 < M28> What he's trying to do is useless to the point that it's funny
14:29 < jade_challenge> any help guys?)
14:30 < jade_challenge> am I funny too)) trying to debug my express app in webstorm  with jade?
14:30 < jade_challenge> any comments appreciated
14:32 < olalonde> weird i exit my child process with -1.. but child.on('close', function(code) { console.log(code) }) outputs 8
14:32 < Havvy> sinclair|net: Do you want to help somebody learn how to use Node on Windows?
14:33 < olalonde> anyone knows what's going on?
14:33 < sinclair|net> Havvy: how is it any different than using node anywhere else?
14:33 < Havvy> Tooling support?
14:34 < sinclair|net> Havvy: text editor, tsc compiler?
14:34 < sinclair|net> Havvy: who am i supposed to help?
14:34 < Havvy> communist-cookie in ##javascript  He's sort of a newbie when it comes to development.
14:35 < Havvy> http://pastebin.com/zVfJabQq
14:35 < olalonde> actually now it returns 255
14:35 < olalonde> what the hell
14:36 < sinclair|net> Havvy: tell him to join this channel
14:36 < jade_challenge> all rite guys...seems like no response :(
14:36 < sinclair|net> he's in the wrong place
14:37 < Havvy> And then he says this: <communist-cookie> Havvy: You explained what I didn't know, I will try to install it as soon as I finish my school-work
14:37 < sinclair|net> jade_challenge: jade sucks, i don't use it sorry
14:37 < jade_challenge> I have no options though(
14:37 < sinclair|net> Havvy: yeh, i don't have a lot of time to explain to complete beginners 
14:37 < sinclair|net> first things first, learn to program, then learn another platform, then use node
14:37 < jade_challenge> <jade_challenge>sd
14:38 < sinclair|net> jade_challenge: you could use another templating framework
14:38 < sinclair|net> jade_challenge: heres one, http://handlebarsjs.com/ and you can buy the tshirt
14:39 < olalonde> anyone?
14:39 < jade_challenge> for now I can't... it's already built app... 
14:40 < sinclair|net> jade_challenge: then somebody made a "REALLY" big mistake, my condolences mate
14:41 < jade_challenge> I just can't figure out how to connect to my remote js with web storm
14:42 < olalonde> apparently process.exit(-1) actually means process.exit(255) I guess C doesn't allow negative exit codes?
14:53 < mscdex> olalonde: http://en.wikipedia.org/wiki/Exit_status#POSIX
14:54 < olalonde> mscdex: right. I kinda remembered this from my C programming but I think it's unexpected behavior to a Node.js developer. It should probably be documented
14:54 < jade_challenge> can anyone suggest how to debug jade templates with web storm?
14:57 < olalonde> https://github.com/joyent/node/issues/5643
15:05 < olalonde> another weird thing. when my child process exits normally, its exit code is 8
15:07 < olalonde> well its not. but thats the code i receive
15:08 < olalonde> weiiiir
15:09 < jade_challenge> can anyone suggest how to debug jade templates with web storm?
15:12 < jade_challenge> I'm using Angular.js, node and jade and would like to know of its possible to debug the client side javascript and if so how do I accomplish this
15:17 < zomg> jade_challenge: debugging clientside scripts is usually done using the browser's provided tools
15:18 < jade_challenge> I've thougth that WebStorm allow remote debugging out of the box
15:18 < jade_challenge> am I wrong?
15:21 < jade_challenge> 1) I am using the plugin.  2) I can debug my node server.js file without a problem  3) I want to debug the client side javascript within the same progject and in all previous successfull client side debugs (not node with jade) I've had an html file to create the configuration file with webstorm 6.0  4) Since I'm using node with jade templates I don't have an html file to use for the configuration so I'm not sure what to do
15:22 < zomg> jade_challenge: I haven't used Webstorm debugging so hard to say
15:30 < olalonde> mscdex: my code is here. is it a bug in node or am i doing something wrong
15:35 < Vermicelli> can u share the link of your code again?
15:48 < sxpert2> good evening
15:49 < Trangar> Heya sxpert2 
15:49 < sxpert2> have a question about using scripted. it doesn't seem to understand nodejs's built-ins is there a configuration thing I could use ?
15:49 < sxpert2> also, it doesn't like "const blah = xxx;" construct
16:11 < Trangar> I never knew javascript had consts?
16:12 < GlitchMr> consts exist in Harmony AFAIK
16:13 < GlitchMr> exists*
16:14 < GlitchMr> Not that harmony is standard (currently), so it should be avoided.
16:14 < GlitchMr> Just use var instead of const.
16:14 < Trangar> https://developer.mozilla.org/en-US/docs/Web-based_protocol_handlers Oh this is pretty cool
16:15 < sdds> 1) I am using the plugin.  2) I can debug my node server.js file without a problem  3) I want to debug the client side javascript within the same progject and in all previous successfull client side debugs (not node with jade) I've had an html file to create the configuration file with webstorm 6.0  4) Since I'm using node with jade templates I don't have an html file to use for the configuration so I'm not sure what to do
16:19 < Vermicelli> sdds: I don't see where it is a problem
16:19 < Vermicelli> say if you have a public folder in  your node where you keep your
16:19 < Vermicelli> js, css and imgs files
16:19 < Vermicelli> when you run it, you can always debug it in your browser right?
16:21 < Vermicelli> even though u are using jade you must be using the static files and i don't see any  problem in how you can't debug them
16:24 < sdds> Vermicelli> the problem is I can't pprovide html file to remote debug conf
16:24 < sdds> moreover I have an error
16:25 < sdds> stating that I can't connect to firefox
16:26 < Purefan> Hey guys! In an app with dozens or hundreds of clients I want to keep a log of calls to the DB, (hosting in Rackspace Databases and we dont get nice and cheap backups yet), I know I can use fs.appendFile but Im considering fs.appendFileSync instead worried that it would write invalid sql statements, what are your thoughts?
16:26 < sdds> Vermicelli: not connected to Firefox
16:27 < sdds> that what I get
16:30 < Trangar> Purefan, have you looked into something like this: http://stackoverflow.com/questions/15530570/multiple-simultaneous-access-to-file-write-in-node-js-gives-file-write-error
16:30 < Trangar> With using a writestream
16:32 < Purefan> I haven't looked into writeStreams yet, reading on it right now. Thanks Trangar!
16:32 < sdds> ok guys seeems like...there no way to do it :(
16:37 < sinclair|net> Purefan: if you are looking at writestream, you ought to look at readstream also
16:40 < Purefan> thanks sinclair! for the time being I only want to write my Insert and Update queries to a file, worried about writing two queries and fudge them together ("Insert into Update..."), its a backup really and would process it with phpmyadmin if needed :)
16:43 < xa5ier> function sayHello() { console.log("Hello"); }
16:44 < Trangar> function sayHey() { console.log(¨how you doing¨); throw new Error(¨Sorry you can´t get through¨); }
16:45 < Stumbler_> while(true){ console.log('YAY FLOOD!') };     ah,   hi.
16:47 < xa5ier> What the....I just searched for "old time rock n' roll" on google chrome and it started playing it
16:48 < Stumbler_> lmao, It's getting too smart for it's own good
16:48 < Havvy> Where can I find where global modules are installed?
16:48 < xa5ier> only works on windows for some reason, doesn't work on linux(Ubuntu)
16:48 < Trangar> I don´t get it either :(
16:48 < Trangar> win7, chrome 27
16:49 < xa5ier> Yeah it hard to recreate
16:49 < xa5ier> didn't work on virtualbox with windows either
17:29 < perlitch> i've tried several times to tackle this bug, but have failed miserably each time… any avid browserify out there want to take a hack at it? https://github.com/substack/node-browserify/issues/384
17:31 < Havvy> perlitch: ##browserify
17:31 < perlitch> whoops, thank you
17:32 < perlitch> quite an active room :)
17:39 < ilovelampordoie> node.js, what is the advantage of using node-http-proxy over asproxy? i know asproxy reroutes mot requests (not sure about websockets) but you use it just by going to a webpage. node-http-proxy you have to setup on the server and the client. why use node-http-proxy when you can just use asproxy and it is easier for the user?
17:46 < ilovelampordoie> so it is as i feared. no one on earth knows. damn
17:48 < sdwrage> Afternoon all
17:48 < arnorhs> ilovelampordoie: knows what?
17:48 < arnorhs> sdwrage: hey
17:48 < sdwrage> arnorhs, how goes it?
17:48 < arnorhs> sdwrage: pretty good. just woke up. feeling fresh
17:49 < ilovelampordoie> well, what is the difference between setting up your computer locally to use a proxy server (like node-http-proxy) and using a web proxy like asproxy
17:49 < arnorhs> ilovelampordoie: difference in terms of what?
17:50 < arnorhs> some people like to have node.js in as many parts of their stack as possible
17:50 < arnorhs> some people might prefer the featureset of asproxy
17:50 < Trangar> There´s probably a difference in performance and reliability too
17:50 < arnorhs> the only difference is in the featureset of each product, and maybe you like the interface of one more than the other
17:51 < Trangar> And some people also just like to mess around with programming things themselves, my friend likes to call it ¨reinventing the wheel¨
17:51 < sdwrage> arnorhs, coffee in hand? :)
17:51 < ilovelampordoie> arnorhs, i dont know. like does it reroute ALL network traffic?
17:51 < sdwrage> Trangar, that is the EXACT term :P 
17:51 < ilovelampordoie> if so and if only http and websockets are handled with other network traffic not work? im pretty confused
17:51 < arnorhs> sdwrage: not yet, working on it
17:52 < Trangar> sdwrage, I like to call it ¨optimizing¨ :(
17:52 < arnorhs> ilovelampordoie: depends on how you configure things
17:52 < sdwrage> lol
17:52 < sdwrage> I call it inefficient use of time :P
17:52 < sdwrage> unless its a special wheel
17:52 < sdwrage> with special powers
17:53 < sdwrage> like the ability to slip your vehicle through time 
17:53 < arnorhs> usually what people end up doing is building a square wheel
17:53 < Trangar> sdwrage, hey! ........ shut up!
17:53 < sdwrage> arnorhs, yep. Usually its "Oh that wheels nice but let me make it"
17:53 < ilovelampordoie> well here is what ive got http://asproxy.180software.com
17:53 < sdwrage> "well that wasn't what I expected"
17:54 < sdwrage> The world is entering a stage of amazing open source collaboration, whether hardware or software
17:54 < Trangar> Nah I usually do it because I want to know how the wheel is made under-water :)
17:54 < ilovelampordoie> i just updated dns so it might not work. but that is a fine asproxy implementation. but i wonder if i should do node-http-proxy too or if there is even a point
17:54 < sdwrage> there is no excuse to use libraries where many people contribute their time to
17:54 < sdwrage> :)
17:54 < sdwrage> again, unless you can make it better but then you should probably contribute 
17:54 < sdwrage> :P
17:55 < Trangar> Haha true
17:55 < sdwrage> and if its to learn you definitely do it from scratch 
17:55 < Trangar> Learning, and enjoyment
17:55 < lloydwatkin> Hi all, I've got some weird issue going on with require() (potentially mocha).  When I require a module with a few exports.*** in code all is good. When I try and do this in a mocha test and console.log the return from require() I get an empty object.  This isn't nodejs version dependent (tried 0.8 -> 0.11). Other code whee I use module.exports is fine. Is there something about mocha I'm not aware of?
17:55 < sdwrage> yeah but never if it's a time sensitive project with a client
17:55 < chrisb124> Lol, don't  think I've seen such a terrible like/dislike ratio as this (http://www.youtube.com/watch?v=1e1zzna-dNw) since 'Rebecca Black - Friday' was released...
17:55 < sdwrage> you will be roasted over an open fire
17:55 < Trangar> No obviously not
17:56 < ilovelampordoie> chrisb124, burn!
17:56 < sdwrage> chrisb124, is it sad that I knew what video you were talking about before I even clicked it?
17:57 < sdwrage> That guy has such an arrogant air about him
17:57 < Trangar> lloydwatkin, I think he´s mad, what do you reckon?
17:58 < lloydwatkin> Who's mad? :)
17:58 < Trangar> ¨Javascript is slooooow¨ what year does he live in? :D NodeJS is faster than ASP and PHP from the tests I´ve seen
17:58 < rhalff> hmz, I thought I needed promises but they are great in swallowing up errors and hiding failures, what is the benifit of promises compared to just firing events when things are done and catch them? my use case is parsing html, getting stylesheets, collecting images etc. so the code is doing a lot of requests, promises look pretty but when something goes wrong it is hard to find where (at least for me).
17:58 < sdwrage> Trangar, I think you meant chris
17:58 < sdwrage> :P
17:58 < Trangar> lloydwatkin, oh whoops, I ment chrisb124 ><
17:59 < Trangar> sdwrage, sssssh, let me play with my wheels
17:59 < lloydwatkin> :) Trangar, no problem
17:59 < sdwrage> Trangar, you go right ahead with your square wheels :P
17:59 < lloydwatkin> mocha issue: Here's an example file https://github.com/lloydwatkin/xmpp-ftw/blob/master/test/lib/utils/xep-0004.js the dataForm var is an empty object. 
17:59 < ilovelampordoie> so if i implement asproxy and node-http-proxy and someone asks me why i implemented the both i will say.. idk. 
17:59 < sdwrage> if it's particularly icy out you could slide your vehicle across XD
18:00 < Trangar> sdwrage, it´s the only way my vehicles actually move, but ssssh
18:00 < sdwrage> ilovelampordoie, shouldn't you know why? :P
18:01 < sdwrage> Trangar, it's okay, maybe eventually they will widdle down to a roundness after clacking across a hard surface enough :P
18:01 < ilovelampordoie> sdwrage, i was hoping someone here would just tell me
18:01 < Trangar> sdwrage, that sounds pretty accurate
18:04 < sdwrage> ilovelampordoie, I'm quite the node.js noob :P if you had a rails or php question, I am better at those XD 
18:04 < sdwrage> I'm still in the process of getting up to the node.js goodness
18:04 < Trangar> I´ve done some things with NodeJS, mostly http services, but I haven´t done anything with proxies yet :(
18:04 < sdwrage> the thought of non-blocking IO just turns me on I guess XD
18:05 < sdwrage> Trangar, I build a small tcp server to chat with other users on
18:05 < ilovelampordoie> im just going to do it and then ask when i get there.
18:05 < sdwrage> socket server
18:05 < sdwrage> built*
18:05 < sdwrage> man I can't type today
18:05 < Trangar> sdwrage, I made some websocket and http servers! :D 
18:06 < sdwrage> Trangar, you're ahead of the game more than me I reckon :)
18:06 < Trangar> sdwrage, I want to make a game with NodeJS, but I´m not sure what yet
18:06 < Trangar> It´d probably be with websockets and nodejs though
18:07 < mscdex> Trangar: cooperative tempest using webgl
18:07 < sdwrage> <-- 5 years PHP (Zend Framework) , 3 years Ruby (rails) with some JS/C#/C++/python mixed in
18:07 < Trangar> 5 years php, year of java, 4 years of C# and ASP
18:07 < sdwrage> Trangar, if you are using node.js why not start with a mud?
18:07 < Trangar> Lately have been doing a lot of javascript, jquery, knockoutjs, nodejs etc
18:07 < ckknight> Anybody use handlebars/mustache and know how to do an if based on whether an array is non-empty? basically, I need to wrap a loop in a <dl> if there are any items, otherwise I use a <p> with some text saying there are no items.
18:07 < Trangar> sdwrage, I was thinking of a simple multiplayer platformer in javascript and nodejs server
18:08 < ckknight> I should totally make a mud.
18:08 < Trangar> I´ve played with enough muds today
18:08 < Trangar> It got me muddy
18:08 < sdwrage> Trangar, lol well it's just the easiest start
18:08 < sdwrage> Trangar, have you ever built a game?
18:08 < Trangar> sdwrage, but there are no wheels there!
18:09 < sdwrage> Trangar, you could add a command called "Roll Wheel"
18:09 < Trangar> Yeah tons of them, Unity, textbased with PHP, C# and XNA, C++ and SFML
18:09 < Trangar> Roll Wheel = instant win
18:09 < sdwrage> it could return saying "Your square wheel rolls unevenly down the hill"
18:09 < Trangar> ¨Your square wheel just sits there and does nothing, but you feel accomplished¨
18:09 < sdwrage> Trangar, I am doing game dev with a small team on Unity
18:09 < sdwrage> :)
18:10 < sdwrage> Trangar, yours is better
18:10 < sdwrage> XD
18:10 < Trangar> I don´t have anyone to make games with, and I suck at graphics :( But I just enjoy setting up projects and stuff
18:10 < lloydwatkin> I've managed to narrow my issue down to mocha, I've raised an issue on their repo, going to keep looking into it
18:10 < sdwrage> Trangar, that's why I mentioned a mud
18:10 < sdwrage> because no graphics needed
18:10 < sdwrage> or
18:10 < Trangar> Yeah maybe, I can look into it
18:10 < sdwrage> you could go with something like a multiplayer roguelike
18:11 < sdwrage> ascii based graphics
18:11 < Trangar> Don´t need graphics when you have swag
18:11 < sdwrage> and there are tons of free resources out there in 2d and 3d to prototype with
18:11 < Trangar> Yeah true
18:11 < sdwrage> Trangar, https://plus.google.com/u/0/114407887226895146601/posts
18:12 < sdwrage> we don't have much up yet as I need to post more pics of dev but we just started working on a small dungeon survival based game 
18:12 < Trangar> sdwrage, 5 followers!
18:12 < sdwrage> 3 are my team
18:12 < sdwrage> lol
18:12 < Trangar> sdwrage, I have tons of game ideas, just don´t have any time to finish them all :(
18:13 < sdwrage> Trangar, we all have time to do them but we tend to opt to watch TV, go out to eat with friends, make square wheels
18:13 < Trangar> Friends, pfffh
18:13 < sdwrage> :P
18:13 < ckknight> sdwrage: pshaw, my oval wheel could beat your square wheel any day of the week
18:14 < sdwrage> ckknight, ooo! now thats a slight improvement :)
18:14 < sdwrage> ckknight, would give the vehicle pseudo-hydrolics
18:14 < sdwrage> XD
18:15 < sdwrage> anyone here have a geekli.st account?
18:22 < RLa> hm, Date::New only accepts timestamp in ms :/
18:24 <@tjfontaine> you're making Date objs on the c++ side?
18:24 < RLa> yeah, writing very fast rss parser and need to convert pubDate to Date object
18:25 <@tjfontaine> it's probably faster to pass the str to js and do the parsing there frankly
18:25 < RLa> hm, might be true
18:26 < RLa> i already looked at some rss libs but did not find any with free enough licenses
18:27 < sinclair|net> does anyone here know of a templating engine on node where i can have templates reference thenselves?
18:27 < sinclair|net> *themselves?
18:28 < sinclair|net> for example, consider partials, i don't want to have to manually have code to hook up any template inheritance, rather, i want the templates themselves to reference other templates
18:28 < sinclair|net> does that make sense?
18:36 < AAA_awright> sinclair|net: That doesn't really sound like a job for a template engine, but some larger library
18:37 < sinclair|net> AAA_awright: was wondering if i could plug the functionality into handlebars 
18:37 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
18:38 < ckknight> sinclair|net: I'm gonna push for my library: http://ckknight.github.com/egs/
18:39 < ckknight> AAA_awright: that sounds exactly like the job for a template engine
18:39 < sinclair|net> ckknight: so, your supports inheritance out of the box?
18:39 < ckknight> yes
18:40 < ckknight> and partials
18:40 < AAA_awright> ckknight: How so
18:40 < sinclair|net> ckknight: i have a specific requirement
18:40 < ckknight> AAA_awright: having your inheritance and partial management as part of the template library can make things very streamlined. Even express doesn't handle layout and such like it used to, it's up to the dev using whatever library's inheritance
18:41 < ckknight> sinclair|net: let's hear it
18:42 < sinclair|net> ckknight: ideally, i want to be able to pass the engine a iohost , and have the engine use that iohost to reference other templates
18:42 < ckknight> <% partial iohost.whatever() %>
18:42 < AAA_awright> ckknight: That makes you dependent on a single template library, which I would call far from streamlined. Maybe some people can, but I can't assume that my template will be available as a file on the filesystem, or that the templates will even be the same format
18:42 < sinclair|net> ckknight: well, more like
18:43 < sinclair|net> <% layout='something.html' %>
18:43 < sinclair|net> then, inside something.html, i have a set of content / blocks
18:43 < ckknight> or <% extends iohost.gimmeh-my-layout() %>
18:43 < sinclair|net> inside the parent template, i could have calls to render the child blocks
18:44 < ckknight> yeah, that's how egs works
18:44 < ckknight> <% block content %> either empty or with a body
18:44 < ckknight> the layout defines them, the requested template provides them
18:44 < ckknight> and you can have multi-level inheritance.
18:45 < sinclair|net> ckknight: so, a nice feature to have would by just to let me load templates into the engine and reference them by name
18:45 < ckknight> AAA_awright: well, egs doesn't require a filesystem, even if you want to use inheritance.
18:45 < sinclair|net> ckknight: such that...
18:45 < ckknight> sinclair|net: that's what egs does
18:45 < ckknight> well, there's two ways:
18:45 < sinclair|net> <% extends "some loaded name" %> ?
18:45 < ckknight> one is by using the filesystem
18:45 < ckknight> two is through the package system
18:45 < ckknight> which makes a pseudo-filesystem
18:45 < ckknight> you can compile a folder of templates into a package that can be run in-browser or on node
18:46 < sinclair|net> ckknight: well, i would be passing absolute file paths for the names
18:46 < ckknight> alright
18:46 < sinclair|net> ill take a look :)
18:46 < ckknight> well, nothing you've said can't be done in egs
18:46 < sinclair|net> can i change the tokens ?
18:46 < ckknight> yes
18:47 < sinclair|net> instead of <% %> can i have @{    }
18:47 < AAA_awright> ckknight: What about my use-case, where I generate a template based on a JSON Schema, and have other templates stored in the database
18:47 < sinclair|net> ?
18:47 < ckknight> sinclair|net: yes
18:47 < sinclair|net> ckknight: also, i like logic templates, can i put arbitrary logic inside the template?
18:47 < ckknight> yes.
18:48 < sinclair|net> nice.
18:48 < ckknight> imo, it should be up to the dev whether they want logic or not
18:48 < ckknight> AAA_awright: I would create a package and then add to it ad-hoc. Theoretically I could support adding a way to register how to get files.
18:48 < ckknight> AAA_awright: that might be a good idea
18:48 < sinclair|net> well, ill take a look
18:49 < sinclair|net> ckknight: can i remove whatever express support you have?
18:49 < ckknight> AAA_awright: would you do me a favor and explain your use case here? http://github.com/ckknight/egs/issues
18:49 < ckknight> sinclair|net: express support is a 1-line function.
18:49 < sinclair|net> ckknight: its gotta go
18:49 < ckknight> ...
18:49  * sinclair|net casts express out
18:49 < AAA_awright> ckknight: I have to figure out what specific features your library supports but I appreciate your support
18:49 < ckknight> it's MIT-licensed, so I suppose you could
18:50 < ckknight> AAA_awright: I'm just trying to make the best thing possible
18:50 < ckknight> if I can solve your use case well, then it'll be a bit better :)
18:50 < sinclair|net> ckknight: all written in gorilla script too :D
18:50 < ckknight> yeah
18:51 < ckknight> it is embedded gorillascript, technically
18:52 < ckknight> and it is very handy to be able to do things like for-else loops
18:52 < sinclair|net> well, the for in loops look nice
18:53 < Trangar> sinclair|net, YOU look nice
18:54 < sinclair|net> Trangar: https://secure.gravatar.com/avatar/383922e4653f174d706c976a89a6dfb8?s=420&d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png ?
18:54 < ckknight> sinclair|net: yeah, it has all the features of gorillascript, including the nice loops
18:54 < ckknight> you can even iterate through generators and everything
18:54 < ckknight> if you decide to pass in a helper function that generates
18:55 < ckknight> sinclair|net: make sure to check the "Try it out" thing on the page I linked
18:55 < ckknight> the "Streaming" example is pretty nifty
18:55 < sinclair|net> yeah, ill check it out mate
18:56 < rhalff> is there a quick module to serve static assets within tests? or should I write my own.
18:57 < gkatsev> there are a lot of modules for serving static assets
18:58 < rhalff> gkatsev, yeah because it's easy i guess :-) ah well, just need to serve a dir at the start and destroy it after the test, probably not worth a module
18:58 < gkatsev> ¯\_(ツ)_/¯
19:24 < begizi> Is there a limit to how many event emitters I can start up? I am currently starting up one event emitter per logged in user. Will it break after a certain number of users?
19:25 < ckknight> begizi: event emitters don't rely on anything, so they function as independent units. The only thing you lose by having a bunch of them is memory.
19:27 < begizi> ckknight: So if I get hit with a million users at the same time all I need is enough memory to handle the connections?
19:28 < ckknight> pretty much
19:28 < ckknight> though I'd look into different architectural designs
19:28 < ckknight> potentially
19:28 < ckknight> although maybe only when it becomes an issue
19:28 < ckknight> when it becomes more viable to rearchitect than throw more hardware at it
19:30 < arnorhs> begizi: you could also have a shared event emitter and just pass arguments to the event that tells you which user issued the event
19:30 < arnorhs> but i can imagine scenarios where having a separate one makes some things cleaner
19:30 < begizi> The app i have uses the twitter streaming api. Luckily twitter has the site stream beta I can use once approved :) I just wanted to get an idea of how long I could go on individual user streams
19:31 < begizi> the site stream api would be more along the lines of a single emitter i just pass the users into
19:55 < lacrymology> hi, I'm having trouble with calbacks within loops using the iteration var
19:56 < lacrymology> is there a prettier way of making it work than (function(n) { callstuff(function() { doSomething(n)})})(i) ?
19:56 < justicefries> check out the async package for doing iterations.
19:56 < Hounddog> How do you actually setup an application to use http and https + socket.io? i mean i would have to different ports it is listening on and the socket would also be seperated or can i handle this with a proxy which does the cert signing etc?
19:59 < lacrymology> justicefries: I've seen it, it's not what I need. I don't need to collect the results, I just need to use a different iteration index for each run
19:59 < justicefries> ah.
19:59 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
20:12 -!- mode/#Node.js [+o xyxne] by ChanServ
20:13 < rhalff> hmz, how long will it take: Wifi.on('entrance').identifyUser().getGuesture(doSomething); http://arstechnica.com/information-technology/2013/06/researchers-teach-wi-fi-to-see-identify-gestures/
20:21 < dylukes> well crap
20:22 < dylukes> I wrote a whole little fully declarative (routes can be loaded from json) router than fires off events.
20:22 < dylukes> Worked perfectly without any bugs except… the connect middleware stack is built for synchronous, serial execution of middleware.
20:23 < dylukes> So… doesn't work :\. I'd have to capture the continuation somehow.
20:23 < rhalff> dylukes, so just remove the middleware, connect ain't that huge
20:24 < dylukes> I think you misunderstand. Anyhow I think I have a potential.
20:24 < dylukes> I could shim in a synch middleware afterwards, and have that wait on a promise yielded by the event firing router.
20:24 < dylukes> (which is resolved when the route event handler returns)
20:25 < dylukes> I'd have to override/wrap the .on method of EventEmitter… seems like it's quickly getting a little too hacky.
20:27 < ckknight> hmm, I can't get haml-js to recognize the else block in my if-else, anyone dealt with this?
20:27 < russfrank> I upgraded to mountain lion and now node-gyp builds are failing, anyone know what I need to do to get this working? I added /Applications/Xcode.app/Contents/Developer/usr/bin/ to my path but its still failing with stuff like " error: ‘NULL’ undeclared (first use in this function)" so II'm assuming this is a path issue..
20:28 < rhalff> I'm just beginning with nodejs, bug you are not bound to modules, if they don't fit what you are trying to do, just make your own, or otherwise post an issue or bug report to make it possible what you are trying to do.
20:28 < rhalff> s/bug/but/
20:31 -!- ServerMode/#Node.js [+o ChanServ] by hitchcock.freenode.net
20:31 -!- ServerMode/#Node.js [+o ChanServ] by hitchcock.freenode.net
20:32 < Maisre> Reasonably new to node so just a quick question, is there an already available module to have node act as an open proxy? similar to Glype?
20:34 < sinclair|net> https://github.com/andyedinborough/RazorJS
20:35 < rhalff> open proxies are not really a technology issue I think
20:37 < rhalff> open proxies are hard
20:37 < Maisre> @sinclair|net that may work for me I will look into it
20:37 < sinclair|net> Maisre: seems like a well kept project
20:38 < rhalff> not to say nearly impossible
20:38 < Maisre> @rhalff - yeah i sat down to write one real quick in node and I got far fast but then i realized that past the initial request to the web server follow up requests for images and external scripts kept returning incorrect header information
20:38 < sinclair|net> Maisre: nice if you have played with the RazorEngine, just going through the source, seems to support Layouts, Render Sections, and a bunch of html utilities
20:39 < Maisre> images would come in as application/octet or something like that so the browser never interpreted them correctly
20:40 < rhalff> Maisre, not that, but the purpose of anonymous proxies is to stay anonymous, the traffic being anonymous is just a fairytail.
20:40 < Maisre> sinclair|net: well hopefully I can get something set up
20:40 < rhalff> unless the client knows what he's doing and most users don't
20:40 < Maisre> rhalff: I do not care for the anonymous part, i dont need url hashing or anything like that
20:41 < rhalff> Maisre, ok, me neither... :-)
20:42 < Maisre> rhalff: I just have to have requests for pages come from a certain server but that server needs to be accessible by anyone on the internet basically like a reverse proxy but neither end it stationary so more like an open proxy
20:42 < Maisre> is*
20:44 < Maisre> If you know a get around the header issue I can just use my existing code
20:44 < rhalff> Maisre, what is the header issue?
20:46 < rhalff> If you just want to make a part of your local infrastructure available there is varnish or nginx. caching proxy servers even.
20:47 < rhalff> why you need V8 if you wanna proxy :D
20:48 < Maisre> rhalff: so basicaly i wrote an app to pull down google's home page when you go to my server, just for testing in the end users will specify what site to pull, when i visit the page the intial request for google.com works great, but some images do not load and some of the javascript files included fail. when I look into the problem i see they are actually getting downloaded but they are coming in with incorrect headers, for instance an ima
20:48 -!- mode/#Node.js [+o tjfontaine] by ChanServ
20:49 < rhalff> Maisre, so just check the headers, they are all available, res.headers...
20:49 < Maisre> I was using glype originally but ran into some issues with the way PHP encodes files vs how it encodes arrays, the object was to get away from PHP
20:50 < Maisre> rhalff: then i have to worry about every single type that could possibly returned and check the file being requested and manually change the headers to fit whatever is coming, doable yes but tedious and unfun, much more fun to jump in IRC and ask around
20:52 < rhalff> Maisre, there is a mime module, which basically just knows about /etc/mime.types so those are not that much of a problem, unless you really want to check if each and everyone is who they say they are.
20:55 < Maisre> rhalff: didnt know the mime module that might be easier to incorporate into my current app that starting over with Razor, i will have to read up on it
20:57 < rhalff> Maisre, anyway It seems like the php application you are pointing to is a more mature application, but yes node can do it also, yet I do not know about a point and click download for it :-)
21:01 < Maisre> Just looking into this it lookes like the mime project will get me the stuff i need. Glype is overkill for what i need so a simpler version is fine and the header issue as i mentioned could be worked around and i think the mime thing will make the work around go much smoother so thank you for that
21:05 < rhalff> Maisre, just look at the source code of Glype also I guess, pick what you need. Common problem stuff is for sure already available in node as a module.
21:05 < rehat> I'm kinda new with web development but is node js just a server?  Not like Rails
21:06 < rhalff> rehat, rails is also just server side, at least the last time I checked.
21:07 < rhalff> unless you count generating templates and js to be client side.
21:09 < rehat> I getting mixed things,  node js is not a web framework right?  its like Rack middleware for Rail for server actions right?
21:09 < Maisre> rehat, the reason you are confused is you can use node for all of that
21:09 < rehat> oh
21:09 < ningu> rehat: node.js is a platform for writing server-side javascript, with a standard library including an http server, and modules for various things on top of that
21:10 < ningu> rehat: it's much less monolithic than rails, you have smaller modules that you tie together
21:11 < rehat> ok thanks
21:11 < Havvy> ningu: Having worked mostly in platforms that aren't monolithic, sometimes those monolithic platforms are nice.
21:12 < ningu> I have done both
21:14 < rhalff> Havvy, what platform you work with?
21:14 < Havvy> rhalff: Experimentally, a little bit of everything.
21:15 < Havvy> The two I've spent the most time on though, are Java and Node.
21:15 < Havvy> With PHP in third place (unforunately...)
21:15 < rhalff> It's not a platform, but I like the codebase sencha put up.
21:16 < rhalff> why.. because if you want to convert it in the future, it's basically all configuration objects.
21:17 < rhalff> It's structured
21:20 < rhalff> The same with flex, you do not code for nothing, mxhtml is parseable and could be converted into anything.
21:25 < rhalff> If we want to move forward we should keep track of the wheels we've created. That code should be parseable and adaptable.
21:25 < rhalff> Only problem is: where is the money in that!?
21:26 < witquicked> when building node.js on x86_64, should I worry about whether or not it installs into /usr/local/lib or /usr/local/lib64?
21:27 < rhalff> witquicked, does it run?
21:27 < bnoordhuis> witquicked: node doesn't install arch dependent code in $PREFIX/lib
21:28 < witquicked> I haven't got that far yet... I'm investigating building an RPM for my deployments
21:28 < witquicked> and have never used node.js, so am completely new to it
21:28 < witquicked> ok
21:29 < ningu> witquicked: modules go in each app under node_modules
21:29 < witquicked> I have the task of making production-ready an app built with node.js, so I've gotta do this kind of due-diligence...
21:30 < ningu> witquicked: well, first read some about how node modules are installed :P
21:30 < russfrank> witquicked: the server side bits of my app are deployed with rpm, I package all of the deps with the app itself
21:30 < witquicked> bnoordhuis: heh... was reading your comments here: https://github.com/joyent/node/issues/2912
21:30 < russfrank> basically my spec file just has an npm i  in it then I package that all up
21:31 < russfrank> I don't bother breaking npm packages into rpm packages since npm's dep model is incompatible with rpm's anyway
21:31 < russfrank> nodejs is in its own package though
21:31 < witquicked> russfrank: so you track node.js as rpm, and then node.js modules with npm, right?
21:32 < russfrank> witquicked: http://koji.rutgers.edu/koji/buildinfo?buildID=2889
21:32 < russfrank> witquicked: no, I put all of the module deps in the rpm for my app
21:32 < russfrank> so my app has my app's code and a node_modules folder with everything it needs
21:32 < witquicked> oic
21:33 < russfrank> my app's rpm has*
21:33 < witquicked> so all node deps get upgraded atomically, with the app
21:33 < russfrank> yes
21:34 < witquicked> I see that you've got an i386 and an x86_64 build
21:35 < russfrank> yeah, we build everything for both arches by default, but we really only have x86_64 boxes deployed
21:36 < witquicked> this is helpful
21:36 < witquicked> thanks
21:42 < Hounddog_> finally got http and https running :)
21:52 < cdehaan> Hello! This is a silly question, but is it "pretty easy" to put together a very quick web app that accepts a few form field inputs, saves them to a database, and on the same page (when it loads) displays some averages on the data?
21:53 < Havvy> Yes.
21:54 < cdehaan> Havvy: Do you happen to know of any tutorials/good starting points?
21:55 < Havvy> I don't use Node for web servers, so I don't.
21:56 < cdehaan> Havvy: Ok, thank you!
21:56 < ckknight> AAA_awright_: would this cover your use case? https://github.com/ckknight/egs/issues/5
21:57 < Havvy> But putting together a quick web app that does that is trivial in most server side languages.
21:58 < igorbel___> cdehaan, nne of the fastests way is to use the express framework for node, it has a utility to generate a skeleton working web app - just take a look at how it works and build a similar solution
21:59 < cdehaan> igorbel___: Thank you!
22:00 < igorbel___> np
22:01 < knksmith57> what's the quickest way to view the full request URL made with an http.request() method?
22:07 < bnoordhuis> knksmith57: when you pass the url as an object, you mean?
22:07 < bnoordhuis> knksmith57: because when you pass it as a string, well, it's "das ding an sich"
22:08 < bnoordhuis> at any rate, you probably want url.format()
22:15 <@MI6> joyent/node: Ben Noordhuis v0.8 * 8a3d0c8 : child_process: fix handle delivery - http://git.io/3VxDTQ
22:16 < knksmith57> bnoordhus: i'm debuggin some code that uses a lib, that lib calls http.request-- I want to look at the url that it's using for the request
22:17 < knksmith57> i've found the piece where he calls http.request-- any idea how I can find it from there?
22:19 < knksmith57> bnoordhuis: *face palm*, I've got it. it's just the first object passed in to http.request(). sorry to waste your time
22:36 < hrrld> A question about an error I received from stream.js today: https://github.com/joyent/node/issues/5646
22:58 < jstream> Hi, I'm trying to time how long it takes for a callback (a database query) to return a result. But, as I've learned, it is not possible for callbacks to return results.  So, is there anyway to find out when a callback finally gets called?
22:59 < ckknight> jstream: yeah, you wrap it in a function
23:00 < ckknight> function () { console.log(Date()); return func.apply(this, arguments); }
23:01 < jstream> hmm.. what's this: func.apply(this, arguments); ?
23:09 <@xyxne> ELLIOTTCABLE, 
23:31 < ckknight> jstream: that's how you call a function
23:31 < ckknight> jstream: it passes in `this` as the `this` for the new function, and `arguments` as the array of arguments
23:32 < gabrielstuff> Hi all, i'm experiencing an error and I really do not know where it came from
23:32 < gabrielstuff> sometime it happen
23:32 < gabrielstuff> i'm running on express + pasport
23:32 < gabrielstuff> the error looks
23:33 < gabrielstuff> like this : https://gist.github.com/gabrielstuff/21a398fb99458c307674
23:33 < gabrielstuff> the thing is how should I found out where it come from ?
23:42 < gabrielstuff> hu ?
23:42 < hrrld> gabrielstuff: Very interesting, I encountered the very same error today: https://github.com/joyent/node/issues/5646
23:43 < bnoordhuis> gabrielstuff, hrrld: you're probably missing an 'error' event listener somewhere
23:43 < gabrielstuff> hehe
23:43 < gabrielstuff> yes
23:43 < gabrielstuff> I've got that idea
23:43 < gabrielstuff> but I redo my cod
23:43 < gabrielstuff> line line by line
23:43 < gabrielstuff> and didn't find
23:43 < gabrielstuff> I was wondering
23:44 < hrrld> bnoordhuis: Thanks, but all of my `request`s have .on("error")
23:44 < bnoordhuis> hrrld: do your response objects have error listeners too?
23:44 < gabrielstuff> if it could be a npm  package… 
23:45 < gabrielstuff> response object should have error ?
23:45 < gabrielstuff> (in any ways)
23:45 < gabrielstuff> how to go back to the full stack trace
23:45 < gabrielstuff> the error happen
23:45 < gabrielstuff> 1 time per day :)
23:45 < gabrielstuff> kind of hard to debug
23:45 < bnoordhuis> gabrielstuff: there's a couple of long stacktrace modules on npm
23:46 <@isaacbw> does anyone know what this color scheme is? http://i.imgur.com/9olL8Ds.png
23:46 < hrrld> bnoordhuis: Sorry, when I say `request`, I mean to communicate that I am using this request library: https://github.com/mikeal/request
23:47 < bnoordhuis> hrrld: oh, in that case i don't know. i don't use request
23:47 < hrrld> bnoordhuis: Understood, do you think that library may be mishandling the error?
23:49 < bnoordhuis> hrrld: request is pretty battle-tested so i doubt it
23:50 < hrrld> bnoordhuis: Thank you, that is helpful to know.
23:51 <@isaacbw> someone should put together an editor/terminal agnostic colorscheme showcase
23:51 <@isaacbw> with user rating
23:51 < bnoordhuis> hrrld: mikeal (request author) idles in this channel, maybe try asking him
23:52 < mikeal> sup
23:52 < hrrld> mikeal: hello, any idea about an error like this one: https://github.com/joyent/node/issues/5646
23:53 < mikeal> what version of node?
23:54 < mikeal> cause there are issues with the core http libraries propagating errors from the socket in some older versions of nod
23:54 < hrrld> v0.10.8
23:54 < mikeal> hrm....
23:54 < mikeal> this is unfortunate
23:54 < hrrld> Want to see the code that's calling request?
23:54 < mikeal> no, it actually shouldn't matter
23:54 < mikeal> what is happening is that the socket is being closed prematurely
23:54 < hrrld> Ok, in any event, I am using .on('error' ...) would you expect that to catch it?
23:54 < eliezerb> isaacbw is there nothing like gnome-look to osx?
23:55 < mikeal> but, this error *should* make its way to the http request or response object, not be throwing in net.js
23:55 <@isaacbw> eliezerb: that's a lot more than just color schemes
23:56 < hrrld> *stream.js
23:56 < hrrld> ?
23:56 < eliezerb> isaacbw, is that a git terminal?
23:56 < olalonde> does anyone maintain connect anymore?
23:56 <@isaacbw> eliezerb: it's a terminal and it happens to be showing a git tree
23:56 < mikeal> if you can reproduce that's the line, but the stack trace is in net.js which is where stream.js is being used
23:56 < olalonde> no one answers issues/pull requests :(
23:57 < mikeal> sorry,
23:57 < mikeal> if you can reproduce without request, just using core http, you should log a bug in core
23:57 < ckknight> olalonde: that sucks
23:57 < eliezerb> looks cool
23:57 < mikeal> that error *should* be caught in a listener on the http request/response
23:57 < ejexin> hi friends
23:58 < eliezerb> isaacbw, looks cool, I will try to find something like that for Ubuntu :)
23:59 < mikeal> similarly, if you can trap it when reproducing with just core then log a bug against request
23:59 < olalonde> ckknight: yeah.. senchalabs should add some committers to the project
23:59 < hrrld> mikeal: Here's a one-liner that gives a similar error.... request("not-a-real-url").pipe(process.stdout).on("error", function(err){console.log(err)});
23:59 < hrrld> mikeal: What's the expected behavior there?
--- Log closed Sun Jun 09 00:00:37 2013
