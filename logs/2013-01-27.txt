--- Log opened Sun Jan 27 00:00:33 2013
00:02 < RIcky12q> can i ask a question?
00:02 < min|dvir|us> No.
00:03 < min|dvir|us> (Sarcasm.)
00:03 < drx_> Is there a way to query based on Joins in mongo yet ?
00:03 < min|dvir|us> drx_: I've never used Mongo but I thought Mongo's whole idea was to remove the need for joins.
00:03 < yakubori> mongodb doesn't use sql
00:04 < drx_> oops. I thought I was typing into the MongoDB Channel  :)
00:05 < yakubori> you want to take a look at dbrefs in mongodb though
00:06 < yakubori> they seem to have that to add a bit of the "relational" concept to the document collections
00:14 < RIcky12q> is there any way to perform sql like queries in mongo?
00:17 < AAA_awright> RIcky12q: There may be some projects to convert SQL-like queries into the native Mongo Query Language but why would you want to?
00:17 < RIcky12q> it's more familiar
00:17 < AAA_awright> I know there's similar stuff, idk if for MongoDB
00:17 < RIcky12q> speed of mongo with the previous knowledge of sql queries
00:17 < AAA_awright> You'll just end up confusing yourself
00:18 < AAA_awright> They really aren't very much the same at all
00:19 < Deathspike> stream.pipe(destination, [options]) documentation shows no options. What are the options? O_o
00:20 < RIcky12q> will .10 offer the same performance improvements over .8 as .8 had over .6?
00:24 < guidocalvano> what is a good lib for chaining callbacks, or waiting for several parallel calls to complete a callback?
00:25 < Raynos> owenb: ping
00:26 < Deathspike> guidocalvano, async -> https://github.com/caolan/async
00:28 < guidocalvano> Deathspike: looks great, simple, useful, thanks (:
00:28 < guidocalvano> also, anyone have tips for unit testing with fixtures for mongodb?
00:49 < alperkanat> anyone here have experience with dropbox.js? i would like to try authenticating within an express app but can't get how to integrate both
00:58 <@Nexxy> \o/
00:59 < boogyman> \o
01:03 <@Nexxy> o/
01:05 < redshadowhero> I don't know where that 1 came from.
01:06 <@Nexxy> redshadowhero, possibly you disconnected while afk?
01:06 < tehhkp> http://pastebin.com/7vG44K2c
01:06 < tehhkp> Error
01:06 < tehhkp> !!
01:07 < SomeoneWeird> update your python
01:08 < redshadowhero> Nexxy: probably so. I should probably fix that too.
01:08 <@Nexxy> hah
01:09 <@Nexxy> my nick ends up as xyxne when that happens
01:09 <@Nexxy> so a 1 isn't too bad!
01:10 < SomeoneWeird> lol
01:11 < tehhkp> @SomeoneWeird yum update python.x86_64 ?
01:11 < tehhkp> Whats the package name
01:12 < tehhkp> my ssh limits to what i can view
01:12 < tehhkp> yum install python*
01:12 < tehhkp> ?
01:12 < tehhkp> @SomeoneWeird
01:15 < yakubori> yum should have a search option
01:15 < yakubori> what's the recommended session/cookie module for Node?
01:15 < yakubori> is there something that stands on its own, that's nor part of Express?
01:15 < yakubori> *not
01:16 < yakubori> I noticed Connect, but it looks like some bugs have gone stale
01:16 < redshadowhero> Nexxy: I guess. I need to check my config to maybe default to some other things.
01:17 < tehhkp> yaku
01:17 < Havvy> yakubori: Express is still recommended.
01:18 < tbranyen> isaacs: you around by any chance?
01:18 < tehhkp> i cant view what pythons name is ssh limits me to a certain amount of lines to scroll up
01:18 < tehhkp> yakubori^
01:18 < tbranyen> basic NPM question, if i have a module (backbone.layoutmanager) which has a dependency on backbone, if i have backbone and backbone.layoutmanager in my package.json dependencies and npm install
01:18 < yakubori> crap. i don't want all the views stuff that comes with Express...
01:18 < SomeoneWeird> yum search wahtever | more
01:18 < yakubori> tehhkp: 
01:18 < tbranyen> will that always install backbone first and then ignore the layoutmanager dependency?
01:18 < yakubori> tehhkp: pipe to more or less
01:19 < tehhkp> Only 3 python things i have
01:19 < tehhkp> python-libguestfs.x86_64 : Python bindings for libguestfs
01:20 < tehhkp> python-nltk.noarch : Natural Language Toolkit
01:20 < tehhkp> python-sqlite2.x86_64 : DB-API 2.0 interface for SQLite 3.x
01:20 < tehhkp> should i install those?
01:21 < yakubori> Express just uses Connect anyway, so I guess there's my answerâ€¦ :P
01:22 < yakubori> tehhkp: you're just trying to install python?
01:22 < tehhkp> yeah
01:22 < tehhkp> update
01:23 < tehhkp> yakubori: yeah I am just trying to update
01:23 < yakubori> well, none of those look like python, but rather libs/extensions/etc.
01:23 < yakubori> are you on fedora or something?
01:23 < tehhkp> centos
01:23 < tehhkp> 5
01:24 < tehhkp> yakubori^
01:24 < tehhkp> WARNING: No module xenblk found for kernel 2.6.18-348.1.1.el5, continuing anyway
01:24 < tehhkp> is that good?
01:24 < SomeoneWeird> http://mythinkpond.wordpress.com/2011/12/28/how-to-upgrade-to-python-2-7-on-centos/
01:24 < SomeoneWeird> google pls
01:24 < yakubori> look for a package like python26 or python27 with yum
01:25 < tehhkp> I have python26
01:25 < tehhkp> Just did
01:25 < tehhkp> yum install python26*
01:25 < redshadowhero> I think I'm missing something. What're trying to install python on?
01:25 < yakubori> wow, all that?
01:25 < tehhkp> CentOS 5
01:25 < redshadowhero> hrm.
01:25 < redshadowhero> sec.
01:25 < SomeoneWeird> doesn't look like it's in the centos repos
01:25 < yakubori> that's effin ridiculous
01:26 < tehhkp> I am using the extras repo
01:26 < redshadowhero> what repos do you have? Like in /etc/yum/repos.d
01:26 < tehhkp> I am using the extras rpm
01:26 < yakubori> apt-get install ubuntu --overwrite-centos :P
01:27 < SomeoneWeird> lold
01:27 < redshadowhero> Do you have rpmfusion? IIRC, the RHEL5 version also works on Centos.
01:27 < tehhkp> I just installed python26
01:27 < tehhkp> still get the error
01:28 < tehhkp>   File "./configure", line 360
01:28 < tehhkp>     1 if options.unsafe_optimizations else 0)
01:28 < tehhkp>        ^
01:28 < guidocalvano> does anyone here use mongodb?
01:28 < tehhkp> guidocal
01:28 < tehhkp> you trying to install a turntable bot like me?
01:28 < tehhkp> guidocalvano:
01:28 < guidocalvano> tehhkp: a turntable bot!?
01:28 < tehhkp> turntable.fm
01:29 < redshadowhero> What repos do you have in /etc/yum.repos.d/?
01:29  * guidocalvano googles turntable.fm
01:29 < tehhkp> CentOS-Base.repo       CentOS-Testing.repo  epel-testing.repo
01:29 < tehhkp> CentOS-Debuginfo.repo  CentOS-Vault.repo    mirrors-rpmforge
01:29 < tehhkp> CentOS-Media.repo      epel.repo            rpmforge.repo
01:29 < tehhkp> redshadowhero^
01:29 < redshadowhero> can you cat /etc/*release* for me?
01:30 < tehhkp> CentOS release 5.6 (Final)
01:30 < guidocalvano> tehhkp: I'm not in the US
01:30 < SomeoneWeird> you need 2.7
01:30 < redshadowhero> what arch?
01:30 < tehhkp> [root@kareem yum.repos.d]# cat /etc/*release*
01:30 < tehhkp> cat: /etc/lsb-release.d: Is a directory
01:30 < tehhkp> CentOS release 5.6 (Final)
01:30 < tehhkp> [root@kareem yum.repos.d]#
01:30 < tehhkp> all i got
01:30 < SomeoneWeird> uname -a
01:31 < tehhkp>  2.6.18-238.9.1.el5xen #1 SMP Tue Apr 12 18:53:56 EDT 2011 x86_64 x86_64 x86_64 GNU/Linux
01:31 < SomeoneWeird> ya, amd64
01:31 < redshadowhero> SomeoneWeird: I'm not 100% what he's trying to do, but is his python version off or something?
01:31 < redshadowhero> tehhkp: Is this a production machine?
01:32 < tehhkp> Running on a VPS
01:32 < tehhkp> idk what a production machine is (Noob at alot of stuff xD)
01:32 < SomeoneWeird> redshadowhero, he's trying to compile node, and yes his python is outdated
01:32 < redshadowhero> http://download1.rpmfusion.org/free/el/updates/5/i386/rpmfusion-free-release-5-1.noarch.rpm
01:32 < redshadowhero> try that, then.
01:32 < redshadowhero> I'd need to check the specific packages within it, but I recommend it for lots of things :P
01:32 < tehhkp> How to add rpms?
01:32 < tehhkp> rpm -Uvh 
01:33 < tehhkp> ?
01:33 < tehhkp> rpm -Uvh http://download1.rpmfusion.org/free/el/updates/5/i386/rpmfusion-free-release-5-1.noarch.rpm
01:33 < redshadowhero> that should work.
01:33 < tehhkp> redshadowhero:
01:33 < tehhkp> now?
01:33 < redshadowhero> give it a shot.
01:33 < tehhkp> yum search rpmfusion
01:33 < redshadowhero> er.
01:33 < redshadowhero> no.
01:33 < tehhkp> yum install python26*
01:33 < tehhkp> ?
01:33 < redshadowhero> Yeah.
01:34 < tehhkp> Nothing to do
01:34 < redshadowhero> yum, if it's the terrible defaults I remember, should check again once you get that repo installed.
01:34 < tehhkp> its in my repos.d
01:34 < redshadowhero> that's good.
01:34 < tehhkp> [root@kareem node-v0.8.18]# ./configure
01:34 < tehhkp>   File "./configure", line 360
01:34 < tehhkp>     1 if options.unsafe_optimizations else 0)
01:34 < tehhkp>        ^
01:34 < tehhkp> SyntaxError: invalid syntax
01:35 < bingomanatee> Anyone ever seen a tectonic simulation in javascript/node?
01:35 < redshadowhero> Hrm.
01:35 < redshadowhero> One sec. Lemme boot up a vm if it still has centos on it.
01:37 < redshadowhero> try this: `PYTHON=/usr/local/bin/python2.7 python2.7 configure'
01:37 < redshadowhero> sans `'s, of course.
01:38 < tehhkp> [root@kareem node-v0.8.18]# PYTHON=/usr/local/bin/python2.7 python2.7 configure'
01:38 < tehhkp> >
01:38 < tehhkp> >
01:38 < tehhkp> I got python26
01:38 < redshadowhero> trailing ' at the end there.
01:38 < tehhkp> Ok I fixed it
01:38 < tehhkp> Now
01:38 < tehhkp> ./config
01:38 < tehhkp> ./configre
01:38 < tehhkp> ./configure
01:38 < tehhkp> same error
01:39 < tehhkp> redshadowhero
01:39 < redshadowhero> yum provides */python2.7
01:39 < redshadowhero> (no need to nickalert me, you have my attentoin, and I have screen set not to alert me unless you know my name :P)
01:39 < redshadowhero> s/oin/ion/
01:39 < tehhkp> whats that?
01:40 < tehhkp> Warning: No matches found for: python27
01:40 < tehhkp> No Matches found
01:40 < redshadowhero> what about 2.7? like python2.7
01:40 < redshadowhero> ?
01:40 < tehhkp> python26-mod_python.x86_64 : An embedded Python interpreter for the Apache HTTP Server
01:40 < tehhkp> python26-mod_wsgi.x86_64 : A WSGI interface for Python web applications in Apache
01:40 < tehhkp> python26-msgpack.x86_64 : A Python MessagePack (de)serializer
01:40 < tehhkp> python26-mysqldb.x86_64 : An interface to MySQL
01:40 < tehhkp> python26-nose.noarch : A discovery-based unittest extension for Python
01:40 < tehhkp> etc
01:40 < tehhkp> Warning: No matches found for: python2.7
01:40 < tehhkp> No Matches found
01:40 < sashman> yfor what do u need it?
01:40 < redshadowhero> sashman: apparently to build node for centos 5.
01:41 < redshadowhero> Let me look into this a bit more tehhkp.
01:43 < redshadowhero> what happens when you type: python26 ./configure
01:43 < redshadowhero> instead of ./configure by itself?
01:44 < tehhkp>   File "./configure", line 360
01:44 < tehhkp>     1 if options.unsafe_optimizations else 0)
01:44 < tehhkp>        ^
01:44 < tehhkp> SyntaxError: invalid syntax
01:44 < tehhkp> [root@kareem node-v0.8.18]# python26 ./configure
01:44 < tehhkp> { 'target_defaults': { 'cflags': [],
01:44 < tehhkp>                        'default_configuration': 'Release',
01:44 < tehhkp>                        'defines': [],
01:44 < tehhkp>                        'include_dirs': [],
01:44 < tehhkp>                        'libraries': []},
01:44 < tehhkp>   'variables': { 'clang': 0,
01:44 < tehhkp>                  'gcc_version': 41,
01:44 < tehhkp>                  'host_arch': 'x64',
01:44 < redshadowhero> Uh-oh.
01:44 < tehhkp>                  'node_install_npm': 'true',
01:44 < tehhkp>                  'node_install_waf': 'true',
01:44 < redshadowhero> well
01:44 < redshadowhero> actually.
01:44 < tehhkp>                  'node_prefix': '',
01:44 < redshadowhero> that looks promising.
01:44 < tehhkp>                  'node_shared_openssl': 'false',
01:44 < tehhkp>                  'node_shared_v8': 'false',
01:44 < gluxon> tehhkp: Please use a pasting service.
01:44 < tehhkp>                  'node_shared_zlib': 'false',
01:45 < tehhkp>                  'node_tag': '',
01:45 < tehhkp>                  'node_unsafe_optimizations': 0,
01:45 < tehhkp>                  'node_use_dtrace': 'false',
01:45 < gluxon> You're flooding the channel, stop.
01:45 < tehhkp>                  'node_use_etw': 'false',
01:45 < tehhkp>                  'node_use_openssl': 'true',
01:45 < tehhkp>                  'target_arch': 'x64',
01:45 < tehhkp>                  'v8_no_strict_aliasing': 1,
01:45 < redshadowhero> I don't think he can stop now gluxon.
01:45 < tehhkp>                  'v8_use_snapshot': 'true'}}
01:45 < tehhkp> creating  ./config.gypi
01:45 < tehhkp> creating  ./config.mk
01:45 < Havvy> Somebody kick him?
01:45 < tehhkp> woops copied too far
01:45 < tehhkp> [root@kareem node-v0.8.18]# python26 ./configure
01:45 < redshadowhero> His irc whatever is probably chugging along with that.
01:45 < gluxon> This is why anti-flood mechanisms shouldn't exist.
01:45 < tehhkp> { 'target_defaults': { 'cflags': [],
01:45 < tehhkp>                        'default_configuration': 'Release',
01:45 < tehhkp>                        'defines': [],
01:45 < tehhkp>                        'include_dirs': [],
01:45 < tehhkp>                        'libraries': []},
01:45 < gluxon> *sigh*
01:45 < redshadowhero> ...oh no.
01:45 < tjfontaine> a simple kickban would solve it
01:45 < tehhkp>   'variables': { 'clang': 0,
01:45 < tehhkp>                  'gcc_version': 41,
01:45 < tehhkp>                  'host_arch': 'x64',
01:45 < tehhkp>                  'node_install_npm': 'true',
01:45 < tehhkp>                  'node_install_waf': 'true',
01:45 < Havvy> tjfontaine: Or a plain old kick.
01:45 < tehhkp>                  'node_prefix': '',
01:45 < redshadowhero> SO, HOW IS EVERYONE TODAY?
01:45 < tehhkp>                  'node_shared_openssl': 'false',
01:45 < Havvy> tehhkp: Can you part?
01:45 < tehhkp>                  'node_shared_v8': 'false',
01:45 < tehhkp>                  'node_shared_zlib': 'false',
01:45 < tehhkp>                  'node_tag': '',
01:45 < tehhkp>                  'node_unsafe_optimizations': 0,
01:46 < tehhkp>                  'node_use_dtrace': 'false',
01:46 < tehhkp>                  'node_use_etw': 'false',
01:46 < tehhkp>                  'node_use_openssl': 'true',
01:46 < tehhkp>                  'target_arch': 'x64',
01:46 < tehhkp>                  'v8_no_strict_aliasing': 1,
01:46 < tehhkp>                  'v8_use_snapshot': 'true'}}
01:46 < tehhkp> creating  ./config.gypi
01:46 < tehhkp> creating  ./config.mk
01:46 < tjfontaine> Havvy: depends on fi they have auto rejoin on, otherwise a +b or +q owuld suffice to quiet them
01:46 < tehhkp> [root@kareem node-v0.8.18]#
01:46 < tehhkp> oh ok
01:46 < sashman> jooow
01:46 < tehhkp> sorry
01:46 < tehhkp> kk
01:46 < tehhkp> new to freenode
01:46 < tehhkp> ?
01:46 < tehhkp> part?
01:46 < redshadowhero> tehhkp: from now on, use something like pastebin.com
01:46 < tehhkp> ok
01:46 < redshadowhero> that should help with a massive wall of stuff.
01:46 < sashman> tehhkp do u now pastebin?
01:46 < gluxon> tehhkp: Turn off your anti-flood.
01:46 < tehhkp> yeah
01:46 < redshadowhero> (if you want, I have a badly coded tool you can use for this, too :P)
01:46 < tehhkp> whats anti-flood
01:46 < Havvy> Never paste stuff into an IRC channel.
01:46 < tehhkp> ?
01:46 < gluxon> It does more harm than good.
01:46 < tehhkp> I am on znc
01:47 < tjfontaine> tehhkp: gist, pastebin, something
01:47 < gluxon> tehhkp: znc has automatic anti-flood.
01:47 < Havvy> https://gist.github.com/
01:47 < Havvy> http://pastebin.com/
01:47 < redshadowhero> ANYWAY.
01:47 < redshadowhero> tehhkp: looks like your ./configure succeeded now.
01:47 < redshadowhero> try make
01:47 < tehhkp> make && make install
01:47 < tehhkp> better
01:47 < redshadowhero> er. I usually just `make' by itself.
01:47 < redshadowhero> but that's me.
01:48 < tehhkp> screen spam!!
01:48 < onr> use make, and paste the output here
01:48 < redshadowhero> onr: he shouldn't paste the output here.
01:48 < tehhkp> also what does echo | COMMAND do
01:48 < redshadowhero> onr: we just dealt with anti-flooding.
01:48 < tehhkp> http://pastebin.com/3HpAnHxZ
01:49 < tehhkp> screens spamming with stuff like that
01:49 < redshadowhero> much better :)
01:49 < redshadowhero> Yeah, let it go at that for a while.
01:49 < redshadowhero> It's building.
01:49 < tehhkp> ok
01:49 < tehhkp> ima go play minecraft while im waiting
01:49 < tehhkp> ping me in like 5 min
01:49 < tehhkp> plz
01:49 < redshadowhero> In the meantime, enjoy this tehhkp: http://xkcd.com/303/
01:50 < GreenDog> someone has been trying to teach me how to play minecrack...i just can't figure it out
01:51 < redshadowhero> It depends on what you want to do with it, GreenDog.
01:51 < tehhkp> LOL redshadow
01:51 < tehhkp> GreenDog
01:51 < tehhkp> Minecrack is a server
01:51 < tehhkp> You mean minecraft?
01:51 < GreenDog> yes
01:53 < Havvy> Minecrack is a specific server of Minecraft.
01:53 < Havvy> And possibly also a modpack.
01:56 < tehhkp> Wow how long will it take
01:56 < tehhkp> Havvy
01:56 < tehhkp> Its not a modpack its just a server I think and also the server runs on the latest snapshots
01:57 < redshadowhero> tehhkp: I just built it on a debian box.
01:57 < redshadowhero> It took me ~2 minutes.
01:57 < redshadowhero> YMMV depending on your processor speed.
01:59 < redshadowhero> then again, I'm rocking a quad-core 3.0GHz processor, soooooooooo
01:59 < tehhkp> redshadowhero: Its frozen for me I think
01:59 < tehhkp> redshadowhero: nothins happening
02:00 < tehhkp> nvm
02:00 < tehhkp> just updating slow
02:01 < redshadowhero> tehhkp, you may want to invest in installing/configuring screen. Or tmux.
02:01 < tehhkp> I have screen
02:01 < tehhkp> whats tmux
02:01 < redshadowhero> It's screen-like.
02:01 < redshadowhero> I don't use it because the stuff I work on ranges from 2.2 kernel all the way to new.
02:04 < chovy> yeah, i didn't give tmux a shot. been using screen for 10 years. don't think they can top it. imo
02:04 < chovy> it doesn't look all that great.
02:05 < chovy> plus, its not on every machine like screen is
02:05 < redshadowhero> I still hear people say good things about it.
02:06 < tehhkp> @redshadowhero
02:06 < chovy> I'd rather just use screen then try to install it on every server i have access on.
02:06 < tehhkp> make -C out BUILDTYPE=Release V=1
02:06 < tehhkp> make[1]: Entering directory `/root/node-v0.8.18/out'
02:06 < tehhkp> make[1]: Nothing to be done for `all'.
02:06 < tehhkp> make[1]: Leaving directory `/root/node-v0.8.18/out'
02:06 < tehhkp> ln -fs out/Release/node node
02:06 < tehhkp> python tools/install.py install
02:06 < tehhkp>   File "tools/install.py", line 228
02:06 < tehhkp>     cmd = args[1] if len(args) > 1 else 'install'
02:06 < tehhkp>                    ^
02:06 < tehhkp> SyntaxError: invalid syntax
02:06 < tehhkp> make: *** [install] Error 1
02:06 < redshadowhero> ...
02:06 < tehhkp> Woops
02:06 < tehhkp> shit i forgot
02:06 < tehhkp> fuckk
02:06 < redshadowhero> tehhkp: you're doing that thing again.
02:06 < tehhkp> FUCK I FORGOT
02:06 < tehhkp> OOPS
02:07 < tehhkp> sorry not used to it
02:07 < chovy> gist.github.com
02:07 < AAA_awright> lol
02:07 < redshadowhero> pastebin.com
02:07 < tehhkp> http://pastebin.com/qBk5KpcR
02:07 < tehhkp> when i run make install
02:08 < redshadowhero> PYTHON=$(\which python26) make install
02:08 < chovy> the old "flood-n-fuck"
02:09 < tehhkp> redshadowhero: http://pastebin.com/e4uj7Fru
02:09 < redshadowhero> use a \ instead of a / :P
02:10 < tehhkp> oh ok
02:10 < tehhkp> :0
02:10 < tehhkp> it works
02:10 < redshadowhero> There you go.
02:10 < tehhkp> Ok now I need mongodb
02:10 < tehhkp> Hope I dont get a problem
02:10 < redshadowhero> That'll be 45 easy payments of $0.29.
02:11 < tehhkp> How do you extract tgz
02:11 < redshadowhero> tar xvfz filename
02:11 < owen1> In order to be able to run my test files alone or part of a test suite I check whether the code is running directly with the node executable.  if that's the case i run my server before running the test. if the file was required by the test suite runner, i just export the test so the runner will call it.  Here are 2 version of one of the test files - http://hastebin.com/koviwopome.js  they are doing the 
02:11 < tehhkp> oh its a tar
02:11 < owen1> same thing, except that I moved the runServerBeforeTest function to it's own helper file.  I found the first version more readable but it's more verbose and I need to repeate that in each test file.  Any opinions or different approaches for testing?
02:11 < tehhkp> tar xvf NAME
02:11 < tehhkp> I use xvf
02:11 < redshadowhero> don't forget the z
02:11 < redshadowhero> xvfz
02:11 < isaacbw> tar -xzf
02:11 < isaacbw> e(x)tract (z)e (f)ile
02:12 < redshadowhero> z automatically gunzips it.
02:12 < redshadowhero> I also use v, because I am a verbose kind of guy.
02:12 < redshadowhero> also route memorization.
02:12 < isaacbw> v is unnecessary, it just makes it output the file names
02:12 < isaacbw> I hate verbose output
02:12 < isaacbw> just do your magic and don't bother me about it
02:12 < redshadowhero> It's a nasty habit where tar is concerned for me.
02:13 < tehhkp> Ok.. I just get a bin GNU-BLAH README and THIRD-PARTY-NOTICES 
02:13 < tehhkp> in the mongodb
02:13 < redshadowhero> s/magic/witchcraft/
02:13 < redshadowhero> ;)
02:13 < isaacbw> why are you installing mongo from source
02:13 < isaacbw> what OS are you on
02:13 < redshadowhero> yum search mongodb, tehhkp
02:13 < redshadowhero> isaacbw: CENTOS 5.x
02:13 < redshadowhero> Why centos, I don't know..
02:13 < isaacbw> heh heh
02:14 < redshadowhero> rhel and derivatives can be very unfriendly to new people, IMO.
02:14 < tehhkp> Whats the command to open a website in terminal
02:14 < redshadowhero> then again, debian isn't exactly sunshine and rainbows to newbies either..
02:14 < tehhkp> I need to open a redirect to a download
02:14 < tehhkp> wget doesnt really do redirects
02:15 < redshadowhero> elinks www.example.com
02:15 < redshadowhero> >:3c
02:15 < isaacbw> does centos have decent experimental repos
02:15 < tehhkp> so elinks https://github.com/dubbytt/hashtag-amy/zipball/master
02:15 < tehhkp> i guess
02:15 < redshadowhero> isaacbw: not... really.
02:15 < isaacbw> yea, you want to stay away from super-stable distros when developing
02:15 < isaacbw> at least if you're working with new technologies like mongo and node
02:16 < redshadowhero> tehhkp: wget and that link works for me.
02:16 < tehhkp> I get master when I wget
02:16 < redshadowhero> yep.
02:16 < redshadowhero> why do you want a zipball, though?
02:16 < redshadowhero> mv master{,.zip>
02:16 < redshadowhero> er.
02:16 < redshadowhero> mv master{,.zip}
02:16 < redshadowhero> then unzip master.zip
02:17 < tehhkp> is there a ##mongodb
02:17 < tehhkp> or a #mongodb
02:17 < redshadowhero> tehhkp: yes.
02:17 < tehhkp> which one
02:17 < tehhkp> the ##
02:17 < redshadowhero> I just joined one here on freenode.
02:17 < tehhkp> or #
02:18 < tehhkp> Wait
02:18 < tehhkp> redshadowhero
02:18 < tehhkp> do u know about npm install errors?
02:18 < redshadowhero> tehhkp: sort of.
02:18 < tehhkp> http://pastebin.com/FkHVp1Hw
02:18 < redshadowhero> I theoretically started with node and javascript as a language last week.
02:18 < min|dvir|us> Wow, 2.4.3.
02:18 < min|dvir|us> That's ancient.
02:19 < min|dvir|us> I like how you're logged in as root too.
02:19 < tehhkp> Who you talking to
02:19 < min|dvir|us> You.
02:19 < tehhkp> And what 2.4.3
02:19 < min|dvir|us> Your Python is way too old.
02:19 < tehhkp> I am running python26
02:19 < tehhkp> lul
02:19 < min|dvir|us> And being logged in is root and doesn't make anything easier.
02:19 < redshadowhero> yeah, but you have 2.4 running.
02:19 < min|dvir|us> And being logged in as root is very bad and doesn't make anything easier.
02:19 < redshadowhero> try this:
02:20 < redshadowhero> PYTHON=$(\which python26) whatevercommand
02:20 < redshadowhero> unless you want to remove those older packages.
02:20 < min|dvir|us> First, verify you're on an old Python. `python --version`.
02:20 < redshadowhero> min|dvir|us: We already know he is.
02:21 < min|dvir|us> tehhkp: if there's one thing you take away from this exchange it's that running as root is shameful.
02:21 < tehhkp> redshadowhero:
02:21 < tehhkp> let me open pastebin
02:21 < min|dvir|us> He doesn't believe me.
02:21 < tehhkp> http://pastebin.com/ut7MsA1Q
02:22 < min|dvir|us> Haha, that's awesome.
02:22 < tehhkp> I did python -v
02:22 < tehhkp> Type "help", "copyright", "credits" or "license" for more information.
02:22 < tehhkp> dlopen("/usr/lib64/python2.4/lib-dynload/readline.so", 2);
02:22 < min|dvir|us> tehhkp: python -v
02:22 < redshadowhero> Just use that PYTHON= thing we've been doing up to this point. We'll get your python sorted in a sec.
02:22 < tehhkp> kk
02:23 < min|dvir|us> redshadowhero: that won't work.
02:23 < min|dvir|us> My $PYTHON doesn't have a value.
02:23 < tehhkp> Ima make a file in sbin
02:23 < tehhkp> PYTHON=$(\which python26) $pythoncmd
02:23 < redshadowhero> nah.
02:23 < redshadowhero> I wouldn't do that.
02:23 < tehhkp> why?
02:23 < redshadowhero> It's better to fix the problem than leave a kludge like that.
02:23 < tehhkp> kk
02:24 < redshadowhero> in fact, let's fix it now. Try `rpm -qa *python*'
02:24 < tehhkp> ok it just spammed my screen with stuff
02:24 < redshadowhero> pastebin it.
02:24 < tehhkp> MIN!
02:24 < tehhkp> DONT CTCP ME
02:24 < min|dvir|us> What the hell OS are you?
02:24 < min|dvir|us> I will CTCP whoever I want.
02:24 < tehhkp> I am on ZNC
02:25 < mscdex> tehhkp: just do `yum install python26 && mkdir ~/bin && export PATH=$HOME/bin:$PATH && ln -s /usr/bin/python26 ~/bin/python` and then build node with `./configure && make && make install`
02:25 < min|dvir|us> tehhkp: type 'min' and press tab.
02:27 < tehhkp> mscdex
02:27 < mscdex> at least that's what i do on CentOS/RHEL
02:27 < tehhkp> what do you mean ./configure
02:27 < tehhkp> and stuff
02:27 < tehhkp> i am trying to upgrade python
02:27 < mscdex> and make sure the export bit goes in ~/.bash_profile too
02:27 < mscdex> tehhkp: you're trying to build node right?
02:27 < redshadowhero> I don't think he needs the old version at all, though. 
02:27 < redshadowhero> mscdex: He's already built it.
02:27 < tehhkp> just have an error with mongodb
02:28 < mscdex> ohhh
02:28 < tehhkp> and trying to upgrade python
02:28 < mscdex> well that trick should still work
02:28 < redshadowhero> It should.
02:28 < kaichanvong___> Hi, I'm trying to install time via npm. When I run it, it complains about ./build.sh failed and to tell the package owner. I don't feel this is correct - is it likely to do with something I've not done correctly setting up node? Output from running npm install time here: https://gist.github.com/4645889
02:28 < mscdex> centos 6 might have something newer by default
02:28 < redshadowhero> but if he isn't going to use python 2.4, I think it'd be better to remove it.
02:28 < tehhkp> How? redshadowhero
02:28 < mscdex> redshadowhero: well, you never know what else is using the older python, so it's best to keep it
02:28 < min|dvir|us> kaichanvong___: no, it's definitely the package.
02:29 < min|dvir|us> kaichanvong___: cp: ./build/default/time.node: No such file or directory
02:29 < min|dvir|us> It's depending on a file that's not there.
02:29 < min|dvir|us> Try `rm -rf ./build` and try again, but I'm 100% sure that won't change anything.
02:29 < redshadowhero> If he's using yum to remove it, then it should check dependencies by default.
02:30 < min|dvir|us> Err..
02:30 < redshadowhero> tehhkp: just try rpm -qa *python*, and paste the output to pastebin.
02:30 < min|dvir|us> `rm -rf /Users/kai/Sites/Dressipi/dressipi-hubot/node_modules/time/build`
02:30 < mscdex> kaichanvong___: that's an old version for the time module.... it's at 0.8.3 in npm
02:30 < tehhkp> Oooh i found it
02:30 < tehhkp> python-2.4.3-56.el5
02:30 < redshadowhero> try yum remove on that
02:30 < tehhkp> yum remove python-2.4.3-56.el5
02:31 < redshadowhero> see if it warns you at all.
02:31 < redshadowhero> if it does, then mscdex's fix is the most acceptable, I'd say.
02:31 < tehhkp> Uhh
02:31 < tehhkp> Remove      671 Package(s)
02:31 < mscdex> hehe :-)
02:31 < tehhkp> So not happening..
02:31 < redshadowhero> WELP.
02:31 < redshadowhero> on to mscdex's solution!
02:32 < redshadowhero> mkdir ~/bin && ln -s $(\which python26) ~/bin/python
02:32 < mscdex> and both execute and put in your ~/.bash_profile: `export PATH=$HOME/bin:$PATH`
02:32 < redshadowhero> echo "export PATH=\$HOME/bin:\$PATH" >> ~/.bashrc
02:33 < redshadowhero> Is it bash_profile on RHEL 5.x?
02:33 < redshadowhero> or is it .bashrc?
02:33 < mscdex> i believe so
02:33 < redshadowhero> .......or does it obey both?
02:33 < kaichanvong___> Thanks mscdex & min|dvir|us ! just realised what the mistake is - my time version was being limited by ~> 0.0.1
02:33 < mscdex> no idea, i just use what's there
02:33 < tehhkp> Its .bash_profile
02:33 < min|dvir|us> Or .bashrc.
02:34 < tehhkp> well theres both
02:34 < tehhkp> bashrc and profile
02:34 < redshadowhero> just plain profile?
02:34 < redshadowhero> If so, I'd use the .bashrc
02:34 < tehhkp> no
02:34 < min|dvir|us> Different OSes treat them differently.
02:34 < tehhkp> .bash_profile
02:34 < redshadowhero> then .bash_profile
02:34 < mscdex> i think OSX and BSD use ~/.profile or something
02:34 < tehhkp> is what loads when you start
02:34 < min|dvir|us> On Mac .bash_profile is used.
02:34 < mscdex> some use .bashrc
02:34 < min|dvir|us> On Linux .bashrc is used. (basically)
02:34 < mscdex> some use .bash_profile
02:34 < mscdex> heh
02:34 < redshadowhero> because standards!
02:34 < redshadowhero> "standards!"
02:35 < redshadowhero> after that echo, you might need to `source ~/.bash_profile'
02:35 < tehhkp> kk
02:35 < tehhkp> yay
02:35 < redshadowhero> then try python -v
02:35 < redshadowhero> or --version
02:35 < tehhkp> Python 2.6.8
02:35 < tehhkp> [root@kareem ~]#
02:36 < redshadowhero> double-check that you're actualy using th-yes!
02:36 < tehhkp> th-yes
02:36 < tehhkp> ?
02:36 < redshadowhero> instead of holding backspace, I interrupted myself to cheer.
02:36 < mscdex> yum install th-yes
02:36 < mscdex> :-D
02:36 < redshadowhero> Pfft.
02:37 < redshadowhero> For some reason, I'm reminded of the article I read during the last week of using systemd to manage node as an always-on service.
02:37 < tehhkp> chkconfig?
02:38 < redshadowhero> ...something like that.
02:38 < mscdex> i just use a plain ol' init.d script on CentOS/RHEL for node scripts
02:38 < redshadowhero> I thought the systemd one was novel, though.
02:39 < mscdex> but Linus doesn't like systemd!
02:39 < min|dvir|us> Anyone good with LiveScript here?
02:39 < redshadowhero> He also hated gnome and preferred kde until very recently./
02:39 < mscdex> i think that was mostly everyone though hehe :-D
02:39 < min|dvir|us> Wasn't me.
02:39 < Havvy> But Systemd is nice.
02:40 < mscdex> i use xfce myself
02:41 < redshadowhero> I use bash in a screen session. I don't care about anything else around it.
02:41 < redshadowhero> if it's kde, gnome, or whatever.
02:41 < mscdex> links too? :-P
02:41 < min|dvir|us> I use byobu for a screen wrapper.
02:41 < redshadowhero> in fact, yes.
02:41 < redshadowhero> elinks is window 5.
02:42 < min|dvir|us> I recommend it to others.
02:42 < redshadowhero> finch is 4, irssi is 3, my vm controller scripts are run from 0, and the rest are various terminals and odds and ends.
02:42 < mscdex> someone ought to integrate v8 with links
02:42 < redshadowhero> also mutt.
02:42 < isaacbw> I like everything about gnome except the gnome desktop
02:43 < redshadowhero> What is e?links even written in?
02:43 < redshadowhero> C?
02:43 < tehhkp> isaacbw
02:43 < tehhkp> I use gnome desktop
02:43 < tehhkp> its uglly
02:43 < tehhkp> I use it over VNC
02:43 < mscdex> i'm pretty sure it's C
02:43 < min|dvir|us> tehhkp: have you tried 3.x?
02:43 < redshadowhero> I think I have gnome 3 on my laptop.
02:43 < redshadowhero> ...It has to be gnome 3. Because of the activities tab.
02:44 < tehhkp> redshadowhero
02:44 < min|dvir|us> GNOME shell is my desktop.
02:44 < tehhkp> whats the thing you used for my to search for python
02:44 < tehhkp> my installations
02:44 < redshadowhero> rpm -qa *search*
02:44 < isaacbw> my favorite part about xfce is how everything is automatically listed in the application menu
02:44 < isaacbw> as soon as you install it
02:44 < tehhkp> I have gnome 2
02:44 < isaacbw> but the glib ecosystem is great
02:45 < isaacbw> so all the subprojects gnome supports
02:45 < redshadowhero> ...suddenly, I feel like this is #linux or something instead of #node.js :P
02:46 < isaacbw> heh
02:46 < redshadowhero> aaand my parser is still a little wonky.
02:47 < mscdex> didn't someone write a window manager in node or something?
02:47 < mscdex> :S
02:47 < min|dvir|us> I'd believe it.
02:47 < redshadowhero> mscdex: Yeah. I saw the article on reddit the other day.
02:47 < min|dvir|us> Is it good?
02:47 < redshadowhero> I don't know; I haven't used it. Could be good.
02:47 < redshadowhero> mscdex && min|dvir|us : https://github.com/mixu/nwm
02:48 < min|dvir|us> Primitive.
02:48 < redshadowhero> super+shift+enter for a terminal seems like a weird combo.
02:49 < redshadowhero> and hasn't xinerama been depreciated in favor of randr?
02:49 < isaacbw> man, monitors all have such huge bases
02:49 < tehhkp> Uhh redshadowhero
02:49 < tehhkp> <redshadowhero> I don't know; I haven't used it. Could be good.
02:49 < tehhkp> <redshadowhero> mscdex && min|dvir|us : https://github.com/mixu/nwm
02:49 < tehhkp> * hansyg has quit (Read error: Connection reset by peer)
02:49 < tehhkp> <min|dvir|us> Primitive.
02:49 < tehhkp> * hansyg (~hansyg@184.152.92.136) has joined #Node.js
02:49 < tehhkp> <redshadowhero> super+shift+enter for a terminal seems like a weird combo.
02:49 < redshadowhero> ....
02:49 < tehhkp> woops
02:49 < tehhkp> http://pastebin.com/6369PfC6
02:49 < tehhkp> Think thats bad
02:49 < tehhkp> how did I copy your stuff on xchat
02:49 < tehhkp> wtf
02:49 < redshadowhero> what's the command that caused that?
02:49 < isaacbw> what just happened
02:49 < redshadowhero> did you highlight the stuff, and then middle-click?
02:50 < tehhkp>  yum install mongo-10gen mongo-10gen-server
02:50 < tehhkp> I added the repo for mongo like it said to on the wiki
02:50 < tehhkp> redshadow
02:50 < tehhkp> I am connected to IRC on xchat
02:50 < gabrieluk> i keep getting a stylus error, unexpected "outdent". i checked the file/line, and it seems fine..bogus?
02:50 < redshadowhero> yum remove mongodb-1.6.4-1.el5.x86_64
02:56 < gabrieluk> all good, removed some useless spaces and it  works
02:57 < redshadowhero> I haven't looked in a while; are there any good vim plugins for js development stuff?
03:14 < isaacbw> emacs 4 lyfe
03:21 < redshadowhero> I love emacs; it's a great operating system. I just wish it had a good test editor )-:
03:21 < redshadowhero> s/test/text/
03:23 < jrajav> 2013 and that joke still isn't old
03:24 < redshadowhero> jrajav: ^5
03:25 < redshadowhero> is there a better way of doing something like var lines = somestr.split('\r\n'); for( line in lines )?
03:26 < min|dvir|us> redshadowhero: .map, .forEach.
03:26 < isaacbw> eh
03:26 < redshadowhero> what's the arguments on .forEach? Just a callback function?
03:27 < min|dvir|us> Yep.
03:27 < redshadowhero> that's a lot better. Thanks!
03:27 < min|dvir|us> :)
03:27 < min|dvir|us> I like Underscore.JS a lot.
03:27 < redshadowhero> Isn't that a clientside templating library?
03:29 < isaacbw> clientside rendering 4 lyfe
03:29 < redshadowhero> man, I feel more and more silly each time I have to ask a question in here: does switch in js work only on numerical 'primitives', or is it expanded to include full-out strings?
03:30 < isaacbw> no, it's pretty flexible
03:30 < isaacbw> so yes to strings
03:31 < redshadowhero> It's weird to be so flexible after working in a strict typing language.
03:31 < min|dvir|us> redshadowhero: ever heard of duck typing?
03:32 < cainus> sometimes I do switch(true) {}  and put expressions in my case statements
03:32 < cainus> total badassery
03:32 < redshadowhero> min|dvir|us: Yes. But C for lyfe.
03:32 < isaacbw> ducks 4 lyfe
03:33 < min|dvir|us> JS for life.
03:33 < redshadowhero> 80% of everything before this was C.
03:33 < min|dvir|us> C is a great language.
03:33 < min|dvir|us> I like its simplicity the most.
03:33 < min|dvir|us> JS is also very simple.
03:33 < redshadowhero> It can be frustrating if you want to quickly prototype, though.
03:33 < redshadowhero> C, I mean.
03:34 < min|dvir|us> Yeah, I don't like managing memory.
03:34 < redshadowhero> I don't mind it.
03:34 < redshadowhero> ...and that's the second time this week mutt has crashed on me. I'm starting to think I might have to try something new.
03:34 < isaacbw> it's kind of fun to design tight algorithms in C
03:35 < isaacbw> but when I'm engineering large systems, memory management is just a pain in the ass
03:35 < redshadowhero> Agreed.
03:47 < jtomasrl> i need to validare some params sended by the user, is it a good idea to create a comparison object like this? { paramName: [type, required, alias] }?
04:13 < redshadowhero> Okay, I'm going to sound ignorant again, but is there a documentation system for this sort of stuff like doxygen that's node-centric? It'd be nice to get my documentation while I code.
04:19 <@Nexxy> redshadowhero, I guess I'm ignorant too! I haven't a clue
04:19 < cainus> docco, groc, dox ?
04:19 < s5fs> Nexxy: hey whats up
04:20 <@Nexxy> s5fs, sup!
04:20 < s5fs> Nexxy: not much, just dorking. put in a half day at the office. just got my first angstrom image booting on the pi, gunna try making a node package next.
04:21 <@Nexxy> sweet!
04:21 < s5fs> bruce better watch his beard!
04:21 <@Nexxy> I'm telling you
04:21 <@Nexxy> I got my pi booted up lastnight
04:21 <@Nexxy> just with the default raspbian
04:21 < s5fs> nice
04:22 <@Nexxy> I STOLE A LOAF OF BREAD
04:22 <@Nexxy> I BROKE A WINDOW PANE
04:22 < tjfontaine> 24601
04:22 <@Nexxy> haha
04:22 <@Nexxy> tjfontaine, ++
04:24 < redshadowhero> From researching via google, and liberal use of npm's search function, yuidoc looks interesting. It looks a lot like javadoc/doxygen. Don't know exactly what format the output is in, but it's interesting!
04:31 < niggler> why isnt http://www.youtube.com/watch?v=bzkRVzciAZg in the motd
04:32 <@Nexxy> haha
04:32 <@Nexxy> it's just too easy
04:33 < LouisT> niggler: what motd?
04:33 < niggler> chan status LouisT
04:33 <@Nexxy> I think he means topic
04:33 < LouisT> oh ok
04:33 <@Nexxy> motd is what you see when you connect to the IRC server
04:33 < niggler> yeah there we go Nexxy
04:35 <@Nexxy> your async program is like something from a 19th century horror story!
04:35 < niggler> gothic horror story
04:35 <@Nexxy> oh right
04:35 <@Nexxy> GOTHIC
04:35 <@Nexxy> no wonder I like it so much
04:36 < niggler> if programming is intellectual masturbation, my brain climaxes every time i work with node
04:36 < LouisT> disturbing
04:36 < min|dvir|us> niggler: you should try LiveScript.
04:37 < LouisT> is this another one of those horrid "languages" that recompile to plain javascript?
04:37 < niggler> min|dvir|us ive got something even more lulzy
04:38 < min|dvir|us> It's actually really nice.
04:38 < min|dvir|us> Here's an IRC client I'm working on. https://gist.github.com/69436827048b06385bf1
04:39 < LouisT> i'll just stick to javascript
04:39 < min|dvir|us> JS is great but makes it really easy to screw up.
04:39 < min|dvir|us> For example, requiring 'var'.
04:41 < aho> requiring "var" isn't an issue
04:41 < aho> that part can be easily verified by machines
04:41 < aho> (see: jslint and jshint)
04:42 < LouisT> i don't understand how needing var can screw up..
04:42 < min|dvir|us> aho: everything else is subjective.
04:42 < aho> LouisT, if omitted, you create a new global
04:42 < min|dvir|us> LouisT: if you don't write var, you can overwrite a global object.
04:42 <@Nexxy> LouisT, s5fs could tell you a fun story
04:42 < LouisT> min|dvir|us: then you deserve to have issues
04:43 < min|dvir|us> LouisT: I'm not the one using JS.
04:43 < niggler> with a name like min|dvir|us issues are expected
04:43  * min|dvir|us sighs.
04:43 < s5fs> wat
04:43 < LouisT> min|dvir|us: no, you're using some horrible substitute that recompiles to javascript
04:43 < LouisT> waste of time really
04:43 < aho> oh... coffeescript. lol.
04:44 < LouisT> aho: no, another horrible one
04:44 < LouisT> like the other 100s out there
04:44 < min|dvir|us> LouisT: your opinion has literally 0 value.
04:44 < LouisT> min|dvir|us: for you, maybe
04:44 < min|dvir|us> I promise you not a single person in this channel cares what you say.
04:44 < s5fs> I lost my damn mind on friday chasing down a scoping issue, turns out i omitted a comma, so i got dorked by semicolon insertion. fun stuff.
04:44 < LouisT> min|dvir|us: i'm sure there are many that agree with me
04:45 <@Nexxy> min|dvir|us, be respectful
04:45 < LouisT> in fact, i know some here refuse to use languages that recompile
04:45 < min|dvir|us> It's so fucking hard.
04:45 < substack> beep boop
04:45 < min|dvir|us> That was an accident.
04:45 < min|dvir|us> Didn't mean to write f** if that's a problem.
04:45 < min|dvir|us> Is it?
04:46 < min|dvir|us> Nexxy?
04:46 < s5fs> play nice everyone
04:46 < min|dvir|us> I'm going to assume it's not a problem, then.
04:47 < min|dvir|us> Fuckity fuck fuck.
04:47 < redshadowhero> ...
04:47  * LouisT shakes his head
04:47 < aho> *shrug*
04:47 < LouisT> saddening
04:47  * min|dvir|us giggles
04:47 < redshadowhero> Er. So, how about that dart?
04:48 < redshadowhero> What do y'all think of dart?
04:48 < aho> dart is awesome
04:48 < redshadowhero> I haven't tried it.
04:48 < niggler> duck fart
04:50 < aho> redshadowhero, give it a whirl. it's very easy to learn. you can be productive within an hour or two
04:51 < aho> it's like js without all its stupid mistakes and with better tooling on top
04:51 < aho> <:
04:51 < redshadowhero> anything that works in a cli-only linux environment?
04:53 < aho> the sdk is just a bunch of command line tools. but i recommend to try the dart editor. the tooling is its biggest selling point
04:53  * xk_id waves
04:53 < aho> well, just watch the videos on dartlang.org and you'll see
04:54 < redshadowhero> I may try it out in a few weeks.
04:54 < redshadowhero> I mean, I just started playing with js as it is.
04:54 < xk_id> I have a Node.js 'worker' which I plan to run on a couple of machines. But they need to communicate with a 'server' to get the "work" (I'm coding a distributed web crawler). I'm coding everything in Node.js, and I hope to use redis and kue. Can anybody point me to where I can learn how to code my 'server'? I have already coded the 'worker'.
05:00 < FunnyLookinHat> xk_id, Do you want the server to be RESTFUL or streaming ?
05:00 <@konobi> cainus: node.io ?
05:00 < cainus> huh?
05:00 < FunnyLookinHat> xk_id, You could set something up pretty darn easily with socket.io if you wanted to - 
05:01 < xk_id> FunnyLookinHat: I'm afraid I don't understand very well the two. However, I do wish to use kue, which I believe follows the RESTful paradigm. 
05:01 <@konobi> xk_id: node.io does management of distributed workers
05:01 < FunnyLookinHat> xk_id, Yeah but kue is unrelated to how the workers communicate with the server - 
05:01 < FunnyLookinHat> konobi is right :)
05:02 < xk_id> someone said I should use kue for my needs. I have to admit I don't understand why he said that.
05:03 < xk_id> konobi: I came across node.io before! thanks! unfortunately, the "distributing work" section of their github wiki still hasn't been posted.
05:04 <@konobi> xk_id: ping the author?
05:04 < xk_id> what is ping? :)
05:04 < xk_id> i.e contact him?
05:05 < redshadowhero> xk_id: Yep.
05:05 < xk_id> okay
05:05 < xk_id> I shall, but I also wish to go on with my work today. I'll try to look for other node.io tutorials
05:06 <@konobi> but the typical pattern for this is a message bus
05:08 < xk_id> konobi: is it different form what node.io would enable me to do?
05:08 <@konobi> not really, it's just one implementation of such a pattern
05:09 < xk_id> okay, then.
05:09 < xk_id> how did you guys learn to use node.io if the author hasn't posted documentation? :)
05:10 <@Nexxy> npm install clairvoyance
05:10 < xk_id> heh
05:11 <@Nexxy> -g
05:11 < purr> Nexxy: No search results found.
05:11 <@Nexxy> lol
05:11 <@Nexxy> OK THANKS PURR
05:11 <@konobi> haven't used it... i just always go with pre-existing stuff until proven it won't work for me
05:12 < xk_id> I'm actually having a hard time finding documentation for using node.io to distribute work
05:14 < s5fs> xk_id: any examples provided in the repo? any unit tests?
05:16 < xk_id> s5fs: no
05:16 < xk_id> I'm not sure what a unit test is
05:17 < s5fs> xk_id: not just unit tests, but basically any sort of tests that were written for use during development
05:18 < s5fs> sometimes you can glean more on how to use an api if you see the tests
05:18 < s5fs> barring docs, that is
05:19 < xk_id> konobi: in fact. I think node.io does not actually provide the functionality I need (distributing across machines)
05:19 < xk_id> it does seem to provide distribution across processes, but not across machines
05:19 < xk_id> The author said this in various places online: "- Distributing work across multiple processes, and multiple servers (soon) "
05:19 < xk_id> connected with the unavailable wiki page, I assume it's still being worked on. 
05:23 < isaacbw> xk_id, is it just a simple web server?
05:24 < isaacbw> because you can use a load balancer to distribute across machines pretty easily
05:24 < isaacbw> which doesn't require node
05:24 < isaacbw> and then just have session data in a shared redis server
05:24 < isaacbw> http://wiki.nginx.org/LoadBalanceExample
05:24 < xk_id> no. it's not a web server, but it is simple. The 'server' needs to assign a number from a db to the 'workers', and put into another table information received form the workers after they do the work. 
05:26 < isaacbw> cross-machine load balancing is pretty application specific, so you won't find a lot of examples or guides
05:27 < xk_id> hmm
05:27 < isaacbw> I wonder if there are any modules that reveal simple JSON communication channels for communicating between nodes
05:29 <@mbalho> duplex-stream
05:29 <@Nexxy> you guys, I'm clairvoyant now
05:29 <@Nexxy> npm is amazing
05:29 < isaacbw> is that really for networks, mbalho?
05:29 < substack> pretty much
05:29 <@Nexxy> mbalho, you're thinking about cats
05:30 < isaacbw> I mean something that will let you broadcast events to a local group of worker machines
05:30 < redshadowhero> speaking of npm, is there any way to make npm install to some folder by default (e.g., $HOME/bin)?
05:30 < isaacbw> yes
05:30 < substack> xk_id: you can use scuttlebutt to synchronize the state across all your worker nodes https://github.com/dominictarr/scuttlebutt
05:30 < substack> much easier than writing to a database
05:30 < substack> and faster since everything is just in memory
05:31 < substack> and scuttlebutt natively can survive network partitions seemlessly
05:31 < onr> finally jade -w is working on windows
05:31 < isaacbw> how bad does your body have to hurt before going to a doctor
05:31 < substack> and you just pipe() the nodes together with streams
05:31 < substack> xk_id: see also https://github.com/substack/stream-handbook#scuttlebutt
05:31 < xk_id> substack: are you sure this is recommended for my needs?
05:32 < isaacbw> do you really need to distribute across machines though, xk_id?
05:32 < xk_id> absolutely, yes.
05:32 < substack> xk_id: it looked like you were talking about using a database to store ephemeral data
05:32 < substack> which is pretty silly
05:32 < xk_id> I need my workers to have different IPs
05:32 <@Nexxy> we are all ephemeral data.
05:32 < isaacbw> you can't just get a monster server?
05:33 <@Nexxy> that's not WEB SCALE isaacbw 
05:33 < substack> Nexxy: http://rationalwiki.org/wiki/Deepity
05:33 <@Nexxy> haha
05:34 < substack> xk_id: scuttlebutt is much better for storing ephemeral data since you don't need to write it out to disk anyplace
05:34 < substack> nor do you need to centralize it
05:34 < substack> distributed computing yay
05:34 < xk_id> substack: I really need to write something somewhere, tho.
05:34 < xk_id> that's the whole point. 
05:34 < xk_id> I'm coding a scarper
05:34 < xk_id> *scraper
05:35 < isaacbw> dirty
05:35 < xk_id> for scholarly purposes :3
05:35 < isaacbw> you using jsdom?
05:35 < xk_id> cheerio
05:35 < xk_id> please, help me :)
05:39  * xk_id drowns
05:56 < redshadowhero> well, that was a 'wonderful' kludge to make all these 'globally' installed npm packages work.
05:57 < isaacbw> wwhhhhyyy
05:58 < isaacbw> you turdnugget
05:58 < isaacbw> man, I want a new star trek show
05:59 < redshadowhero> ?
06:07 < xk_id> what does "(function (var) {})(var);" do?
06:07 < isaacbw> nothing
06:07 < isaacbw> >> 'hi'
06:07 < purr> isaacbw: (string) 'hi'
06:08 < isaacbw> >> (function(var){console.log(var)})("hi")
06:08 < purr> isaacbw: SyntaxError: Unexpected token var
06:08 < isaacbw> erm
06:08 < niggler> var is a keyword
06:08 < isaacbw> doh
06:09 < isaacbw> >> (function(foo){console.log(foo)})("hi")
06:09 < purr> isaacbw: undefined; Console: 'hi'
06:10 < isaacbw> it defines the function and then calls it
06:16 < redshadowhero> >> (function(val) { /^(\d{1,3}\.?){4}$/.test(val) })('245.13.3.146');
06:16 < purr> redshadowhero: undefined
06:16 < redshadowhero> ouch.
06:16 < redshadowhero> oh.
06:16 < redshadowhero> I see.
06:16 < isaacbw> you need to return something
06:16 < redshadowhero> Yeah.
06:17 < redshadowhero> >> (function(val) { return /^(\d{1,3}\.?){4}$/.test(val) })('245.13.3.146');
06:17 < purr> redshadowhero: (boolean) true
06:17 < xk_id> https://gist.github.com/4646841
06:17 < redshadowhero> of course, this fails when:
06:17 < niggler> or just /^(\d{1,3}\.?){4}$/.test('245.13.3.146')
06:17 < redshadowhero> >> (function(val) { return /^(\d{1,3}\.?){4}$/.test(val) })('245.999.3.146');
06:17 < purr> redshadowhero: (boolean) true
06:18 < redshadowhero> niggler: I wanted to test the ()(val) thing.
06:19 < niggler> you could do a fancy test for 0-255 or just pull the subexpressions
06:19 < redshadowhero> I could. I just wanted something quick and dirty, though :)
06:19 < isaacbw> just do 3 digits and have two of them optional
06:20 < xk_id> I can't understand why it is used in that gist
06:21 < niggler> your regex also matches stuff like 255.255.255.255.
06:21 < xk_id> oh
06:22 < niggler> your best bet is to unwind it
06:22 < xk_id> thanks: "isaacbw: it defines the function and then calls it"
06:22 < xk_id> I missed that line :)
06:22 < redshadowhero> >> /^((\d{2}|1\d{2}|2[1-4]\d|25[1-5])\.?){4}$/.test("123.123.256.1");
06:22 < purr> redshadowhero: (boolean) false
06:22 < xk_id> interesting syntax
06:22 < redshadowhero> of cooouuuurrrssseee
06:22 < redshadowhero> >> /^((\d{2}|1\d{2}|2[1-4]\d|25[1-5])\.?){4}$/.test("123.123.255.1");
06:22 < purr> redshadowhero: (boolean) false
06:22 < redshadowhero> Yeah.
06:22 < redshadowhero> that's what I get for being awake all night.
06:22 < niggler> you need to check
06:23 < niggler> \d | \d{2} | 0\d{2} | 1
06:23 < niggler> \d{2} | 2[0-4]\d
06:23 < redshadowhero> I have the solution here already.
06:23 < redshadowhero> sec.
06:23 < niggler> | 25[0-5]
06:23 < niggler> yeah something like that
06:23 < niggler> and if you dont feel like typing it out you could build it up via string
06:24 < redshadowhero> >> /^(((((2[0-4][0-9]|25[0-5]|[01]?[0-9]?[0-9])|(0x[A-F0-9]{2})|(0[0-3][0-7]{2}))(\.|$)){4})|((0x[0-9A-F]{8})|(0[0-3][0-7]{9,10})|([1-3][0-9]{1,9}?)|(4[0-9]{8})|(4[0-2][0-9][0-9][0-9][0-6][0-7][0-4][0-9][0-5])))$/.test("192.168.1.100");
06:24 < purr> redshadowhero: (boolean) true
06:26  * xk_id claps
06:27 < redshadowhero> To be honest, I didn't write the non-decimal parts of that.
06:28 <@mbalho> lol
06:28 < niggler> >> new RegExp((x ="(\\d|\\d{2}|[0-1]\\d{2}|2[0-4]\\d|25[0-5])", [x,x,x,x].join("\\."))).test('192.168.1.100')
06:28 < purr> niggler: (boolean) true
06:30 < redshadowhero> >> new RegExp((x ="(\\d|\\d{2}|[0-1]\\d{2}|2[0-4]\\d|25[0-5])", [x,x,x,x].join("\\."))).test('192.168.1.100.')
06:30 < purr> redshadowhero: (boolean) true
06:30 < niggler> yeah ^ and $ are needed
06:31 < redshadowhero> Much shorter than mine, though :P
06:31 < niggler> >> new RegExp((x ="(\\d|\\d{2}|[0-1]\\d{2}|2[0-4]\\d|25[0-5])", "^"+[x,x,x,x].join("\\.") + "$")).test('192.168.1.100.')
06:31 < purr> niggler: (boolean) false
06:31 < niggler> new RegExp((x ="(\\d|\\d{2}|[0-1]\\d{2}|2[0-4]\\d|25[0-5])", "^"+[x,x,x,x].join("\\.") + "$")).test('192.168.1.100')
06:31 < niggler> >> new RegExp((x ="(\\d|\\d{2}|[0-1]\\d{2}|2[0-4]\\d|25[0-5])", "^"+[x,x,x,x].join("\\.") + "$")).test('192.168.1.100')
06:31 < purr> niggler: (boolean) true
06:36  * rcombs didn't know this channel had a >>bot
06:36 < rcombs> that's neat!
06:37 < redshadowhero> >> new RegExp((x='(\\d{1,2}|[01]\\d{2}|2[0-4]\\d|25[0-5])', '^'+[x,x,x,x].join('\\.')+'$')).test('192.168.1.100');
06:37 < purr> redshadowhero: (boolean) true
06:37 < niggler> >> "hello" @ rcombs
06:37 < purr> rcombs: (string) 'hello'
06:37  * niggler pets purr
06:37 < rcombs> >> process.versions
06:37 < purr> rcombs: ReferenceError: process is not defined
06:37 < redshadowhero> >> new RegExp((x='(\\d{1,2}|[01]\\d{2}|2[0-4]\\d|25[0-5])', '^'+[x,x,x,x].join('\\.')+'$')).test('192.168.1.100.');
06:37 < purr> redshadowhero: (boolean) false
06:37 < rcombs> vanilla JS, then?
06:39 < rcombs> >> [] instanceof Array
06:39 < purr> rcombs: (boolean) true
06:46 < sbward> >> typeof this
06:46 < purr> sbward: (string) 'object'
06:46 < sbward> this
06:46 < sbward> >> this
06:46 < purr> sbward: (object) {}
06:46 < sbward> :'(
06:46 < isaacbw> >> var array = []; array["hi"] = "hello"; array.hi
06:46 < purr> isaacbw: (string) 'hello'
06:46 < niggler> >> console.dir()
06:46 < purr> niggler: TypeError: Object [object Object] has no method 'dir'
06:46 < isaacbw> >> var array = []; array["hi"] = "hello"; array.hi; array instanceof Array
06:46 < purr> isaacbw: (boolean) true
06:46 < sbward> >> console
06:46 < purr> sbward: (object) {log: (function) log, time: (function) time, timeEnd: (function) timeEnd}
06:47 < sbward> >> arguments
06:47 < purr> sbward: ReferenceError: arguments is not defined
06:48 < sbward> poop.
06:50 < zivester> anyone know how to pass parameters to the jade cli to be used by the templates?  like jade --{some : "option"} my.jade > out.html
06:50 < sbward> >> window
06:50 < purr> sbward: ReferenceError: window is not defined
06:50 < sbward> >> global
06:50 < purr> sbward: ReferenceError: global is not defined
06:51 < isaacbw> you can message the bot
06:51 < sbward> isaacbw ty
06:58 < AtomicDog> Would node be a good use case for a gambling website?
06:59 < AtomicDog> er
06:59 < AtomicDog> Phrase that question correctly
06:59 < AtomicDog> :P
06:59 < AtomicDog> Would a  gambling website be a good use case for node?
07:02 < sbward> AtomicDog, it depends
07:03 < AtomicDog> On?
07:03 < isaacbw> it could be
07:03 < mermeladas> if choosing node would be gambling then yes
07:03 < AtomicDog> Huh?
07:03 < mermeladas> j/k
07:03 < AtomicDog> Why would choosing node ...
07:03 < AtomicDog> Oh
07:03 < isaacbw> it's usually a matter of developer preference
07:03 < sbward> It depends on what sort of communication the site does with the server, and on the sort of processing involved
07:04 < AtomicDog> So, it will handle the monies fine and not fuck me over with a rounding error that costs me a million?
07:04 < AtomicDog> PHP did that to one of my colleagues
07:04 < sbward> I would not depend on JS for handling monetary calculations, no
07:04 < AtomicDog> Yeah that's what I was getting at
07:04 < AtomicDog> k
07:04 < mermeladas> aren't there some floating point rounding errors in js?
07:05 < jimmybaker> Just use integers..
07:05 < jimmybaker> 1500 == 15.00
07:05 < sbward> More importantly, node isn't supposed to be doing CPU intensive tasks
07:05 < jimmybaker> do the math on integers
07:05 < isaacbw> that would still result in rounding errors jimmybaker 
07:06 < jimmybaker> isaacbw: ah, so there's no integer data type in javascript?
07:06 < jimmybaker> everything is float?
07:06 < isaacbw> I mean that you will encounter data loss using just integers
07:07 < jimmybaker> interesting. how so?
07:07 < isaacbw> I guess it depends on the kinds of numbers you're working with
07:08 < isaacbw> but integer division discards remainders which could add up
07:10 < jimmybaker> isaacbw: yeah, I was thinking about money where cents are no longer represented by a floating point and any division done could be rounded up to the nearest whole..
07:10 < jimmybaker> it's like Superman 3
07:10 < isaacbw> I guess money is usually in relatively small amounts
07:10 < isaacbw> I don't know
07:11 < isaacbw> I doubt Goldman Sachs uses 32bit integers
07:11 < inolen> issacbw: with 64-bit ints you can be rather precise
07:12 < inolen> err
07:12 < inolen> 64-bit floats
07:12 < inolen> = 53 bits of precision or so
07:12 < inolen> I'd imagine someone has written a decimal lib using that
07:12 < jimmybaker> Here's a good answer
07:12 < jimmybaker> http://bit.ly/Vbpk3h
07:13 < inolen> that's what I'm saying.
07:13 < jimmybaker> oh wait, that was my answer :)
07:16 < inolen> 64-bit float = 52-bit mantissa = 2^52 / 100 = you could represent up to 4.5035996e+13
07:38 < sbward> Is there any reason Node shouldn't use FastCGI?  Is there a FastCGI alternative for Node.js with the same or better scalability?
08:07 < xk_id> Does it make sense to have a mysql db from which to extract jobs, place them in a redis queue, and then have workers consume them?
08:13 < sbward> xk_id, do you mean having Node query the db and move the data to Redis?
08:13 < xk_id> yes
08:14 < xk_id> it would be the job producer doing that
08:14 < sbward> Depends if that Node instance has any other pressing tasks, like serving web traffic
08:14 < sbward> MySQL queries could slow it down I think
08:15 < xk_id> it only needs to do that, plus to extract data from redis and put it back into mysql 
08:16 < xk_id> I have a "server" and several "workers". Server needs to create jobs that workers consume; and then store the results achieved by the workers.
08:16 < sbward> Yeah I think that's doable, especially with an asynchronous MySQL driver
08:17 < xk_id> probably something like this? https://github.com/Sannis/node-mysql-libmysqlclient
08:17 < sbward> Yes exactly
08:18 < xk_id> but, you think there is still a small possibility for a CPU / hdd bottleneck, yes?
08:19 < sbward> If at all possible I would try to bypass MySQL in the chain, and add the jobs directly to Redis from your application if possible.
08:19 < sbward> - "if possible" ... getting sleepy
08:19 < xk_id> okay, that's very relevant to my question. Can I use redis for hdd storing of data? 
08:20 < sbward> I *think* Redis has a feature for regularly persisting its data
08:20 < sbward> So you could tell it to back up the job queue regularly and wouldn't need to depend on MySQL for saving it to disk
08:20 < xk_id> i.e, having 3 redis tables: the data that yields jobs; the job queue; the data yielded by processing the jobs. 
08:20 < redshadowhero> sbward: I think that's true. You can change it in the configs as to how often it does a sync to hdd.
08:21 < sbward> So long as your jobs data in Redis doesn't outgrow the size of your RAM, that would be fine I think
08:22 < xk_id> you mean the job queue?
08:22 < sbward> Yes, those 3 redis tables together would need to fit into your RAM at all times, never exceeding it ever
08:22 < redshadowhero> And even that can be managed by some clever code and TTL
08:22 < xk_id> but I would have the first and the last stored on hdd. 
08:23 < xk_id> I don't need to access the third table, just to push data into it. 
08:24 < sbward> I see.  In that case MySQL might be a good place to push your data at the end of the pipeline (table 3) but not for tables 1 and 2
08:24 < xk_id> I also don't need to write anything in the first table
08:24 < redshadowhero> also IIRC (I'm operating on very little sleep), redis does not have a concept of 'tables', unless you start to use funky naming schemes for your keys.
08:25 < sbward> Right, you would need to choose the appropriate Redis data structures
08:26 < redshadowhero> I guess you could do something like tablename:colum:id
08:26 < redshadowhero> column
08:26 < redshadowhero> *
08:26 < sbward> I'm not a Redis expert though, maybe you can ask about this in #redis too
08:26 < redshadowhero> ^
08:26 < xk_id> I'm still unsure whether to use mysql for the first "table" or not. 
08:26 < xk_id> I shall
08:26 < xk_id> thank you
08:26 < SomeoneWeird> use a hash
08:27 < sbward> If your first table will grow limitlessly then it would need to be outside Redis
08:27 < redshadowhero> Oh right. Hashes are things.
08:28 < redshadowhero> xk_id: http://redis.io/topics/data-types look under Hashes, like SomeoneWeird pointed out.
08:28 < xk_id> My first table doesn't grow, or shrink. It just provides the raw data from which jobs are created before being pushed in the queueu
08:29 < redshadowhero> xk_id: wouldn't it be better to use something other than a db server? if it never changes, perhaps just put those values in a file and load them into memory at the start?
08:30 < sbward> Redis could handle table 1 in that case, since it will save it to disk
08:30 < AtomicDog> I just got a job offer for a telecommute position I learned of on the Stackex Careers site.  Stackex effing RULES.
08:31 < xk_id> sbward: you mean since it will load it from the disk?
08:31 < sbward> I got my current job off Careers 2.0 too.... very happy with the job and the site as well :)
08:31 < redshadowhero> Maybe I should look for a new job.
08:32 < sbward> xk_id, yes, if I'm not mistaken (you should run this by #redis), then Redis would load table 1 from disk and store it in memory for fast access
08:32 < SomeoneWeird> correct
08:32 < AtomicDog> sbward: Amazing eh?
08:32 < redshadowhero> That's right.
08:32 < AtomicDog> They told me that they hired me mainly on the basis of my stackex questions and answers, also
08:32 < xk_id> so. file with job data -> loaded in redis -> create job queue (also in redis) -> job are consumed, and the resulting data is pushed into mysql. 
08:33 < AtomicDog> I thought that being a nerd and posting to scifi was just a waste of time
08:33 < sbward> AtomicDog, Careers 2.0?  Yes absolutely, although I'm not telecommuting if that's what you meant
08:33 < AtomicDog> But that's what impressed them was my attention to detail
08:33 < AtomicDog> Well, I am
08:33 < AtomicDog> No, I meant careers
08:33 < AtomicDog> Amazing!
08:33 < sbward> xk_id, yes that's all correct
08:34 < sbward> should be optimal given the information your provided :)
08:34 < sbward> you*
08:34 < xk_id> sbward: I just realised I might need to change something to my first table
08:34 < xk_id> I need to update the status of each job to "completed" or "Available"
08:34 < sbward> xk_id, it would still work fine in that case
08:34 < xk_id> so that I don't push the same jobs twice in the queue
08:35 < sbward> the only limitation is that your Redis data cannot ever exceed the size of your available RAM
08:35 < xk_id> but I would have to save the first "table" back to the file often, right?
08:35 < xk_id> because in this case it is risky to loose what is in the memory
08:35 < sbward> I think Redis does that automatically if you configure it
08:35 < sbward> Like you can give it an interval, say every 10 seconds
08:36 < SomeoneWeird> redis has an interval it dumps everything to disk, iirc
08:36 < redshadowhero> It does.
08:36 < redshadowhero> it also dumps on a 'safe' shutdown.
08:36 < xk_id> what's the advantage of loading the file into redis and periodically save back to it, instead of reading & writing directly from and to it?
08:36 < SomeoneWeird> right, so data is only volatile in memory for as long as you set it to be
08:36 < SomeoneWeird> like 1000x faster
08:36 < xk_id> ic
08:37 < xk_id> fair enough
08:37 < SomeoneWeird> (ok not 1000 times but its quite faster)
08:37 < xk_id> thanks, guys
08:37 < redshadowhero> Be careful, though. Disk syncs are supposed to be costly and not done every few seconds.
08:37 < redshadowhero> IIRC, though.
08:37 < xk_id> how can I estimate an "appropriate" time?
08:37 < xk_id> for dumping
08:38 < redshadowhero> I think that documentation is on the redis website.
08:38 < sbward> docs, #redis, google, stack overflow
08:38 < redshadowhero> sec, I'll see if I can't find it for you.
08:38 < redshadowhero> Should be in my bookmarks.
08:40 < redshadowhero> http://redis.io/topics/persistence
08:40 < xk_id> thanks. i'll get to work
08:40 < redshadowhero> There's apparently a second mode called an 'append-only log'.
08:40 < redshadowhero> It just 'journals' what it does, so (apparently) you won't lose more than a second of data.
08:44 < xk_id> interesting. that would be costly, right?
08:44 < xk_id> logging every single command...
08:44 < sbward> It would be if you enable it on a write-heavy data set
08:45 < redshadowhero> Well, maybe not.
08:45 < redshadowhero> redis's data is in memory, so there's no preformance impact for that an an append-only log.
08:45 < sbward> I was under the impression it would journal to disk
08:45 < sbward> If not then you're absolutely right
08:46 < redshadowhero> Well, I guess it depends on how he configures his persistance.
08:46 < redshadowhero> logging every command might be a pain, but perhaps you could set the journal to only dump in intervals?
08:46 < sbward> Just read the docs.... yes it depends on the aforementioned fsync interval
08:47 < redshadowhero> # If unsure, use "everysec".
08:47 < redshadowhero> ...not sure I like that sort of answer.
08:47 < sbward> I just read the docs* in case that was misinterpreted lol
08:48 < redshadowhero> everysec doesn't sound too bad overall, though. Better than 'always'
08:48 < redshadowhero> It depends on how safe he wants the data: 5-15 seconds, 1 second, or only one single write.
08:49 < sbward> ^
08:49 < xk_id> yep
08:49 < xk_id> and I'm not sure how to estimate that :)
08:49 < redshadowhero> Write some code, do some tests, gather some metrics :)
08:49 < xk_id> I don't think anything bad will happen to the server anyway, but I must choose a number and I'd like to have an argument for whichever number I choose
08:50 < xk_id> what exactly is the problem with writing very often?
08:50 < sbward> Writing to disk is a slow and potentially blocking operation
08:51 < redshadowhero> Well, that reduces disk time that other apps/services (like mysql, or even node if it's using the fs for any reason) have.
08:51 < xk_id> well it's going to happen sooner or later anyway
08:51 < xk_id> are there any starting/stopping costs?
08:52 < xk_id> like, is it preferable to do it in one big chunk every minute, rather than every 1s?
08:52 < redshadowhero> I think the only 'real' cost you incur is during runtime.
08:52 < redshadowhero> It depends on how critical you rate that part of your code.
08:52 < redshadowhero> I personally think 15 seconds of lost data is easily recovered in the long run.
08:53 < xk_id> oh, I meant in terms of reducing disk time for other apps
08:53 < redshadowhero> I don't know. I'm not familiar with how hard redis can hit the disk.
08:53 < sbward> I'm not an expert on disks/locking etc but I would imagine there is an overhead
08:53 < sbward> It's probably negligible
08:54 < xk_id> I mean, if starting to write takes "a", and stopping to write takes "b", and writing takes "w", but "a" and "b" are fixed regardless of how much I need to write, then it is preferable to write in one big chunk rather than keep spending time on "a" and "b".
08:54 < xk_id> does it make sense?
08:54 < redshadowhero> Part of that starts to delve into what filesystem you use, which is a can of worms I'm never going to touch at 3am.
08:55 < xk_id> cool :)
08:56 < xk_id> I think I'll do the dumping based on the rest of my code
08:56 < redshadowhero> Best choice.
08:57 < xk_id> true
08:57 < redshadowhero> yuidocsjs seems like it's just what I need.. if only it generated markdown.
08:59 < sbward> Is there any reason Node shouldn't use FastCGI?  Is there a FastCGI alternative for Node.js with the same or better scalability?
09:27 < yanivge> Guys, 
09:27 < yanivge> anyone ever deal with socket.io SSL
09:28 < yanivge> Self-Signed certification?
09:28 < owen1> i need to emit LWES event, and reading about an event structure here http://www.lwes.org/docs/doxygen/html/structlwes__event.html  it looks like i need 1 byte string, 2 bytes number a struct and a hash of attributes. i know about dgram but not sure how to send the correct info in the socket. any tips?
09:31 < SomeoneWeird> it's UDP?
09:32 < owen1> SomeoneWeird: yeah
09:32 < owen1> it's a upd packet i am suppose to send
09:33 < SomeoneWeird> i see
09:33 < SomeoneWeird> i havn't tried doing UDP stuff in node
09:33 < owen1> you should !
09:33 < SomeoneWeird> haha i have no need
09:33 < owen1> helping fellow noder (:
10:08 < crabtree> â€¦
10:10 < fg3> can nom list without the dependencies?
10:10 < fg3> err npm
10:12 <@Nexxy> fg3, nom is also correct
10:13 <@Nexxy> fg3, I believe this question was asked before and we determined the answer to be no
10:13 <@Nexxy> but I could be wrong
10:13 < fg3> seems crazy
10:14 <@Nexxy> you could just grab the package.json and parse it
10:14 < fg3> where is it?
10:14 <@Nexxy> wherever the base of your project is
10:14 <@Nexxy> (it should be)
10:14 <@Nexxy> http://package.json.jit.su/
10:14 <@Nexxy> unless I'm misunderstanding your question
10:15 < fg3> global module list 
10:16 <@Nexxy> fg3, global in what context?
10:16 <@Nexxy> the modules installed with -g?
10:16 < fg3> y
10:17 < fg3> What is the reason for not providing this feature?
10:19 <@Nexxy> I think probably because 
10:19 <@Nexxy> `ls /usr/local/lib/node_modules` isn't that hard
10:19 <@Nexxy> but you could always submit a pull request :)
10:20 <@Nexxy> (it may actually already exist as a command, I'm just not aware of one)
10:20 < fg3> baffling
10:20 <@Nexxy> I KNOW!
10:20 <@Nexxy> we should make specialized commands for EVERYTHING!
10:21 < geNAZt> npm cant build a house ? make a command for that ;D
10:21 <@Nexxy> I was just thinking about it the other day
10:21 < fg3> the strange thing is I cannot find any info about this by googling 
10:21 <@Nexxy> why isn't there a command for writing my app?
10:21 < timoxley> fg3 npm ls -g
10:21 <@Nexxy> timoxley, mind. blown.
10:21 < fg3> don;t want the dependencies
10:21 < timoxley> haha what do you want then
10:21 <@Nexxy> fg3, `ls /usr/local/lib/node_modules`
10:21 < geNAZt> only the module names that are installed
10:22 < fg3> ls would work if I wasn't using nvm 
10:23 < fg3> I'll write a function to get it done - just seems weird
10:23 <@Nexxy> which part?
10:23 <@Nexxy> the whole contributing to an OSS project part?
10:24 <@Nexxy> or...
10:24 < fg3> node is many years old and nobody asked for this
10:24 <@Nexxy> maybe you're just doing something most people don't find a need for
10:25 <@Nexxy> but then again I have like, 2 things globally installed
10:25 < timoxley> fg3 npm ls -g --json then parse the first leveel of json?
10:26 <@Nexxy> I'm curious as to why you would need to access that information programmatically anyway
10:26 < fg3> just for inventory purposes
10:28 < timoxley> what does that mean
10:28 < fg3> I want to see a list of modules on my system without sifting through a tree
10:29 < yanivge> guys, anyone worked here with self-signed certificat? SSL
10:29 <@Nexxy> if only there was some sort of system-level command for that
10:29 < yanivge> using socket-io
10:30 < fg3> yanivge: I just made certs
11:03 < mpajor_op5> I'm building a chat and having issues with figuring how to store users in a specific chat room within an array. Does anyone have any suggestions? I currently do this: var username = {}; then to add a user usernames[socket.username] = socket.username, although this would be more of a "global list of users"
11:04 < mpajor_op5> I instead want to do something like var dynamic_room[socket.username] = socket.username; although I cant seem to set var socket.room[socket.username] = socket.username; (socket.room being dynamic here)
11:04 < SomeoneWeird> >> a.a = "lol"
11:04 < purr> SomeoneWeird: ReferenceError: a is not defined
11:05 < SomeoneWeird> you can't use .'s in variable names
11:05 < SomeoneWeird> oh 
11:05 < SomeoneWeird> nevermind
11:05  * SomeoneWeird facepalms
11:05 < mpajor_op5> aha SomeoneWeird, how would I go on with making it dynamic then? perhaps var croom = socket.room; then var croom[socket.username] = socket.username; ?
11:06 < geNAZt> >> var a = "test"; var {a} = 1; console.log(test);
11:06 < purr> geNAZt: SyntaxError: Unexpected token {
11:06 < geNAZt> shit :D
11:06 < Kakera> mpajor_op5, what if someone is named __proto__
11:06 < SomeoneWeird> var rooms = {}; rooms[socket.room][socket.usename] = socket;
11:06 < SomeoneWeird> or something
11:06 < SomeoneWeird> Kakera, lold
11:07 < mpajor_op5> Kakera: I'm quite new to node.js and socket.io, so I guess I should be taking such things into consideration?
11:07 < SomeoneWeird> even if they were, a blank object doesn't have any prototypes afaik
11:07 < SomeoneWeird> >> console.log(({}).__proto__)
11:07 < purr> SomeoneWeird: undefined; Console: {__defineGetter__: (function) __defineGetter__, __defineSetter__: (function) __defineSetter__, __lookupGetter__: (function) __lookupGetter__, __lookupSetter__: (function) __lookupSetter__, constructor: (function) Object, hasOwnProperty: (function) hasOwnProperty, isPrototypeOf: (function) isPrototypeOf, propertyIsEnumerable: (function) propertyIâ€¦
11:08 < SomeoneWeird> oh, ya
11:08 < mpajor_op5> SomeoneWeird: if I just pass "socket" there (since it expects two variables being set?) would it automagically figure it out that it should set socket.room and socket.username into those two placeholders?
11:08 < Kakera> >> console.log(Object.create(null).__proto__)
11:08 < purr> Kakera: undefined; Console: null
11:09 < Kakera> I solved this problem by prepending some stuff to the key
11:10 < Kakera> note that it will make it slower
11:10 < nathan7> most things append a space
11:13 < mpajor_op5> SomeoneWeird, Kakera: I get this http://pastebin.com/JXNi0Ams -- not a clue what's wrong here
11:14 < SomeoneWeird> before usernames[socket.room] etc. add if(!usernames[socket.room]) { usernames[socket.room] = {} ); to the line before
11:14 < mpajor_op5> giving it a spin
11:19 < mpajor_op5> SomeoneWeird: that seemed to fix it, although, I used to list all users in this way but it now gives an error: http://pastebin.com/ZHZb1WTL -- I tried changing the emit to usernames[socket.room] but that didn't do it
11:23 < mpajor_op5> any ideas what it could be? the error itself is quite misleading to me, I see that it complains about the data on client-side, I think. Although, I am not sure if I am sending it in the wrong way to the client or what could possibly be wrong?
11:24 < SomeoneWeird> socketio is trying to stringify usernames when it emits it
11:24 < SomeoneWeird> because it's full of sockets
11:26 < mpajor_op5> oh ok, is there a way I can easily fix that?
11:27 < SomeoneWeird> what are you trying to emit to the client side?
11:28 < mpajor_op5> I want to emit the list of all usernames in the specific channel; and then on client-side have it displayed
11:29 < mpajor_op5> currently it's key + value being set to "updateuserwindow" on client-side, although, changing the data being set from io.sockets.emit('updateuserwindow', usernames); to usernames[socket.room] sounds to me like a logical solution to have it work as it did before, but apparently it doesn't want to parse the emitted data
11:29 < mpajor_op5> s/set/sent/
11:30 < SomeoneWeird> http://pastebin.com/aXMFZLeB
11:30 < SomeoneWeird> line 9 & 10
11:33 < mpajor_op5> SomeoneWeird: that seemed to fix the error, the data being emitted is: websocket writing 5:::{"name":"updateuserwindow","args":[{"room3":["warlock","warlock","warlock","warlock"]}]}
11:34 < mpajor_op5> but still, it does not display the users appropriately on client-side. Is the array simply "corrupted" to use the client-side code I have to list all the users with?
11:34 < SomeoneWeird> sec
11:35 < mpajor_op5> SomeoneWeird: let me update my code on pastebin, might be easier for you to follw up
11:36 < SomeoneWeird> try
11:36 < SomeoneWeird> http://pastebin.com/PqjikXMS
11:36 < SomeoneWeird> that
11:37 < mpajor_op5> giving it a spin
11:39 < mpajor_op5> SomeoneWeird: that's great, that fixed it ( see http://62.20.49.201:8080 )
11:39 < SomeoneWeird> awesome
11:40 < mpajor_op5> the issue now is simply that it displays duplicates in the list, and removing users from the list upon disconnection doesn't seem to work like it did earlier. I did this to remove a client from the list: delete usernames[socket.room][socket.username];
11:41 < mpajor_op5> It counts the users correctly, I just do a .length on the socket.room, but the actual listing is off
11:42 < SomeoneWeird> usernames[socket.room] = usernames[socket.room].splice(usernames[socket.room].indexOf(socket.username),1);
11:42 < mpajor_op5> ah splice, glad to know that I wasn't totally off-track. I googled for that, figured I'd had to use splice now instead :)
11:42 < mpajor_op5> giving it a try
11:44 < mpajor_op5> darn, I am confusing all users with eachother SomeoneWeird heh
11:45 < SomeoneWeird> lol
11:45 < mpajor_op5> there's a tiny bug there but I guess I'll have to simply live with it. It will be hard to make it work with duplicate usernames
11:46 < mpajor_op5> although it indeed does seem to work as intended now. I'll give it a spin with a few users to see how it behaves :)
11:47 < mpajor_op5> I don't know how to thank you SomeoneWeird. Many thanks for the push, now I can move forward :)
11:47 < SomeoneWeird> all good :)
11:52 < mpajor_op5> SomeoneWeird: ok, found a minor bug. It seems that it lists all rooms and users in each room. Is there any way to have it only list the current room + the users in the current room?
11:53 < SomeoneWeird> yeah, does the client side know what room it's in?
11:54 < mpajor_op5> Yeah. If you view the source on the site I have set var credentials = { room: 1 }
11:54 < SomeoneWeird> yeah sec
11:55 < SomeoneWeird> http://pastie.org/private/wzpqktcagg1uh2fwu00za
11:55 < SomeoneWeird> lines 3, 9, 24-26
11:56 < mpajor_op5> ah I see what you did there :) let me check if that does it
11:58 < mpajor_op5> I think it works as it should, just trying to figure out if the count is borked or not. I have a wague feeling that it is
11:59 < mpajor_op5> Aha no, it's just me who's borked ;-)
12:00 < mpajor_op5> Thanks again SomeoneWeird, it works perfectly fine. A question for you though. Is there anything in particular I should sanitize from a user-input perspective? I do sanitize a few things already, as you saw
12:00 < mpajor_op5> Just wondering if there's anything specific I should keep in mind, something I have perhaps missed?
12:00 < SomeoneWeird> usernames
12:01 < SomeoneWeird> and anything you're getting from the client
12:01 < mpajor_op5> SomeoneWeird: got it, that I sanitize already (basically, anything that is set on client and sent to server)
12:01 <@Nexxy> sanitize everything
12:02 < SomeoneWeird> ya
12:02 <@Nexxy> with peroxide and rubbing alcohol
12:02 < mpajor_op5> :=)
12:03 < SomeoneWeird> lol
12:03 <@Nexxy> but 
12:03 <@Nexxy> avoid generic sanitizing routines
12:03 <@Nexxy> e.g. you can't sanitize for everything all at once
12:04 < mpajor_op5> I use something called "htmlspecialchars" which is just a function I found on the net, looks robust and maintained to a certain level
12:05 < mpajor_op5> let me pastebin that function
12:06 < mpajor_op5> http://pastebin.com/TUx13KQZ <- I think this should be "ok" to use for sanitizing usernames and message input?
12:07 <@Nexxy> I guess it depends on what you're sanitizing for 
12:08 <@Nexxy> will these usernames be stored anywhere?
12:08 < mpajor_op5> I guess, although, the username is coming from a 3rd party (steam to be more exact, the game platform provider) the message itself could be anything. I guess it's rather hard to sanitize that to cover "everything"
12:08 <@Nexxy> yeah, that's my point
12:08 <@Nexxy> you need to know what you're sanitizing for
12:08 <@Nexxy> SQLi? XSS?
12:08 < mpajor_op5> Nexxy: what I do is that the user logins with their steam account (via openid), I sanitize that on a PHP-level before it's passed to the JS
12:09 < SomeoneWeird> ##php is that way
12:09 < SomeoneWeird> :P
12:09 < mpajor_op5> I'm just trying to be extra careful here, since the client-js I have sanitized can be manipulated
12:09 < SomeoneWeird> ya
12:09 < mpajor_op5> so I would pressume that when I set the client-side js with the sanitized username it can be manipulated, thus meaning I'd have to do what I do in PHP in JS-server side
12:09 < mpajor_op5> just to be "sure" that nothing ugly is being passed
12:09 <@Nexxy> yes
12:10 < mpajor_op5> OK, then I got it all covered ;)
12:10 <@Nexxy> unless any of that data hits a database
12:10 <@Nexxy> then you are just getting started
12:10 < mpajor_op5> nothing hits the database (in terms of user-input) on the server-side
12:11 < andu> mpajor_op5, really? so no analytics even?
12:11 < mpajor_op5> if it would, I'd just prepared statements of some kind to be sure nothing crazy goes on. This is the reason for why I choosed to store "online users", "users count" in internal arrays on server-side instead of in a database
12:11 < mpajor_op5> andu: analytics? are you referring to google analytics? :p
12:12 < mpajor_op5> Sorry, I meant that nothing in terms of JS (from client-side <-> server-side JS) is being stored the database. All database transactions etc are handled by PHP.
12:12 < andu> well, more specific stuff, which users are doing what. logging spam calls and whatnot
12:14 < mpajor_op5> andu: well, it's not that interesting at the moment to me but I plan on storing chat messages, but this will be done in a no-sql database but only for "show history data" reasons, eg. when a new users join a chat I'd like to display the X last messages to him so the chat doesn't feel "empty"
12:15 < mpajor_op5> but you do have a point, storing data is key in my app, so perhaps I could focus on storing all the chat messages after all - just in case things get out of hand in there
12:41 < cloudbender> gmornin
12:42 <@Nexxy> cloudbender, morning
12:44 < geNAZt> how long does it normally take that npmjs.org updates my package ? i have submitted a update ~10 minutes ago
12:44 < geNAZt> and the package version in npmjs is still the old one
12:44 <@Nexxy> it's usually pretty fast for me
12:44 <@Nexxy> maybe your package.json is locking you to a particular version?
12:45 < geNAZt> the npm publish says everything is okay and it sended the file to the server
12:45 < geNAZt> on the index of npmjs.org it says tcp-stream-muxer updated 12M ago
12:45 < geNAZt> but if i click on it 	 0.0.4 last updated an hour ago
12:47 < geNAZt> no its updatet.. after 15 minutes
12:48 <@Nexxy> interesting
12:49 < geNAZt> what kind of parser is npmjs using ? cause the github readme is displayed totally ugly in npmjs. in github it is okay
12:50 < SomeoneWeird> not the same one as github
12:54 < geNAZt> is this supossed to be so ? or is it a bug ?
12:54 < SomeoneWeird> github is ruby
12:54 < SomeoneWeird> npm is node
12:54 < geNAZt> and ? the behavior about how to parse a readme should be the same
13:00 < Engin> for fucks sake, what do you make out of this http://pastie.org/private/tsdo1btshj0byopyuhi3g
13:00 < Engin> very nice error message indeed
13:01 < yakubori> something's undefined
13:01 < Engin> something in A file on A line
13:02 < Engin> something in A file on A line
13:02 < Engin> oops sorry
13:03 < yakubori> in between zita/testProcessReq and zita/testInvalidService?
13:03  * yakubori has no idea wtf zita is, but that's what it looks like
13:03 < Kakera> npm ERR! Error: `git "tag" "v0.5.0" "-am" "0.5.0"` failed with 128
13:03 < Kakera> huh
13:03 < Engin> well, the error is that JSON.parse() is fed with empty string
13:03 < Kakera> but the commit is there ready to be pushed
13:03 < Engin> that is how obscure the reror message is
13:04 < Engin> and for your information the errror occurs in the last test case -- the fact that it apepars on top of it is probably due to different buffering of stdout and stderr
13:05 < Kakera> fatal: tag 'v0.5.0' already exists
13:05 < Kakera> oh...
13:20 < mpajor_op5> SomeoneWeird: any chance I could ask you to help me out with one more thing? it seems that the userlist is acting weird when a user leaves the chat
13:21 < SomeoneWeird> ya howso
13:21 < mpajor_op5> it updates properly when new users joins, however, when a user leaves it resets the entire list to only show 1 user, really odd
13:21 < Industrial> How do I call a parent function constructor that I inherited from with util.inherits ?
13:21 < mpajor_op5> mind if we take it in PM? I'd hate to copy/paste logs here, I'd come out as a spammer :-)
13:21 < Industrial> it has side effects ..
13:22 < `3rdEden> Is there a light weight way of getting the "regular" length out of a buffer without having to transform everything to a string?
13:24 < Kakera> `3rdEden, Buffer.byteLength?
13:24 < Kakera> wait no that's the opposite
13:24 < `3rdEden> Kakera: that returns the byteLength not the strings length as seen in javascript
13:25 < Kakera> why do you need the string length?
13:25 < `3rdEden> To slice data from a queued string
13:26 < geNAZt> why dont u use a buffer as the queued string ?
13:26 < Kakera> what's a queued string
13:26 < `3rdEden> it's slower
13:26 < geNAZt> a queued string is a concat of chunks i think
13:26 < `3rdEden> yep
13:27 < geNAZt> what are you trying to do ? sending strings of tcp connections ?
13:27 < Kakera> what do you mean slice data from it
13:27 < geNAZt> for example you have two chunks "abc" + "def"
13:27 < geNAZt> and he has a parser that need abcd to parse successfully
13:28 < `3rdEden> geNAZt: i'm parsing the memcached protocol https://github.com/3rd-Eden/memcached-stream
13:28 < geNAZt> to he need to slice it out because it has already be parsed
13:28 < `3rdEden> https://github.com/3rd-Eden/memcached-stream/blob/master/index.js#L367-L377
13:28 < `3rdEden> I need the length of the string to move my curser further
13:30 < geNAZt> value = new Buffer(bytes);
13:30 < geNAZt>         value.write(data.slice(i), 0, bytes);
13:30 < geNAZt> why dont u use Buffer.copy ?
13:30 < `3rdEden> geNAZt: because data is a string
13:31 < `3rdEden> isn't buffer copy for copying a buffer in to a buffer
13:31 < geNAZt> yes
13:31 < geNAZt> but what are you doing there ? slice a part out of a buffer and write it to offset 0 of the new buffer
13:31 < geNAZt> so a copy could to it
13:32 < geNAZt> do*
13:32 < `3rdEden> geNAZt: i'm not slicing data from a Buffer instance in to a new Buffer. but I'm slicing data from a String in to a buffer
13:34 < geNAZt> for me it looks like data is already a Buffer object
13:35 < `3rdEden> geNAZt: it assumes that setEncoding('utf8') is done on the TCP connection
13:35 < geNAZt> a i see what you are doing
13:35 < `3rdEden> so the .write method receives strings
13:35 < `3rdEden> https://github.com/3rd-Eden/memcached-stream/blob/master/index.js#L73-L98
13:35 < geNAZt> you use the Buffer class methods to get the string buffer length
13:35 < geNAZt> so node will convert it to a buffer so or so
13:47 < `3rdEden> geNAZt: Didn't know that Buffer.byteLength transformed it to a buffer first. I thought it was just C++ call (which was slow)
13:47 < `3rdEden> Or are you talking about a different class method?
13:53 < MI6> joyent/libuv: Ben Noordhuis master * 93f61b7 : unix: fix style issues in udp.c - http://git.io/5ztiPg
13:55 < Iszak> Any chance we're going to standardize the naming of npm modules? because I just realised casing matters and you can change casing but have the same name and thus it's a different module. This is going to cause an incredible amount of confusion.
14:04 < CoverSlide> lower case only now
14:04 < CoverSlide> old modules that have upper case module have been grandfathered in
14:04 < CoverSlide> at least that's what i was told last. don't know if that stopped being enforced
14:05 < Iszak> CoverSlide well take for example jquery vs jQuery..
14:06 < CoverSlide> yeah jQuery was probably created before the rule was made
14:06 < CoverSlide> the standard now is lower case only
14:06 < Iszak> what about underscore vs. hyphens
14:06 < CoverSlide> don't know. I know hyphens are supported
14:07 < CoverSlide> dots are too
14:07 < Iszak> shit needs to be more consistent.
14:07 <@Nexxy> wait! wait!
14:07 < Iszak> ?
14:08 <@Nexxy> http://i.qkme.me/3sqs0x.jpg
14:08 < Iszak> Indeed.
14:09 <@Nexxy> I kind of remember something about lowercase only too
14:10 < CoverSlide> ok i think i just froze npm by trying to have a dollar sign in my package name
14:10 < CoverSlide> underscores work by the way
14:10 < CoverSlide> https://npmjs.org/package/stupid_test
14:10 < bnoordhuis> i put a unicode snowman character in all my package names just because
14:12 < Domo> quick question
14:12 < bnoordhuis> Domo: quick answer
14:13 < Domo> is it possible to do something like app.post... without sending anything back or relly changing the page
14:13 < Domo> or should i just do it through a get with AJAX?
14:13 < bnoordhuis> Domo: express question? you may want to try #express
14:14 < bnoordhuis> (or is it #expressjs now?)
14:14 < Domo> cheers
14:14 < CoverSlide> apostrophes work too
14:15  * CoverSlide does some major npm name abuse
14:16 < hoho2> hi
14:17 < CoverSlide> mwahahahaha: https://npmjs.org/~coverslide
14:20 < CoverSlide> tilde works!
14:23 < CoverSlide> so by my experimentation, [-_!*~.1-9a-z] all are valid
14:23 < CoverSlide> oh, ' too
14:23 < Industrial> Say I want to chop up functionality of several expressjs website servers into different backend services, so that I can share them among the services and the websites. They'd all just be servers running on ports. (e.g. dnode). How do you manage it all, start it all up, down, spawn a whole development environment, etc?
14:23 < Industrial> What happens when a service goes down? can I detect that in dependent servers e.g. websites? what do I do with the requests that are now hanging? do I pause the request stream? can I do that? :P lots of questions ..
14:25 < CoverSlide> that's the kind of thing seaport was made for
14:26 < CoverSlide> also if you're using dnode you might want to look at upnode
14:26 < Industrial> yeah and fleet
14:26 < Industrial> but
14:26 < Industrial> what do I do when something breaks, a process exits
14:26 < MI6> joyent/node: Ben Noordhuis master * 7f2a78b : Revert "stream_wrap: reference handle before uv_write2"  It's segfaulting - http://git.io/LHcw7A
14:27 < CoverSlide> send a 500 error
14:28 < Industrial> what if the user is in the process of something, can I reroll.. oh i guess thats database state..
14:28 < Industrial> but then how do I know when to reroll what
14:35 < `3rdEden> CoverSlide: no backtick support ;)?
14:36 < CoverSlide> yeah tried it, doesn't work, at least currently
14:57 < geNAZt> someone got the node-inspector profiles tab working ?
14:57 < geNAZt> i dont get it to work
15:04 < jtomasrl> im trying to use new User() to create it and insert ti to thu db, but user inherit from eventEmitter and adds _events key to the user instance, is it possible to remove that?
15:06 < tpayne> How can I tell node router to just pass through a request?
15:07 < tpayne> or let  a request pass through and bypass node
15:07 < tpayne> my phpmyadmin is all screwed up because of node
15:09 < SomeoneWeird> huh
15:09 < tpayne> nm i found a solution lol
15:30 < jabulmer12> hey
15:41 < Voland> Hi there
15:41 < Voland> someone willing to help me with a little problem i have developing a node module?
15:43 < geNAZt> tell me
15:43 < Voland> i'm trying to wrap libspotify
15:44 < geNAZt> so you write a music application with node ?
15:44 < geNAZt> that uses the spotify cloud ?
15:44 < Voland> i have written a bunch of c functions, collected in SpotifyService.c. So i can call login(), logout(). This works when i use it from a "normal" c program
15:44 < Voland> yes
15:45 < Voland> now i have wrapped the commands login and logout in node
15:45 < Voland> but i get a segfault sometimes when using logout
15:45 < Voland> sometimes it works
15:45 < geNAZt> well that is bad
15:45 < Voland> login spawns a new pthread which contains the main spotify loop
15:45 < Voland> maybe that's a problem
15:47 < geNAZt> it makes it more difficult
15:47 < Voland> wait a sec i'll paste the code
15:49 < Voland> these are the spoitfy commands http://pastebin.com/KB6uwSC8
15:49 < Voland> in my nodejs module i basically only call "login()" and "logout()"
15:49 < Voland> login works fine
15:49 < Voland> and i can query the username aftwards
15:50 < Voland> but logout gives a segfault, and, you see all my lame fprintf debugs, it happens in sp_session_process_events
15:50 < Voland> but if i use this exact file in a really simple main.c nothing crashes, it works just fine
15:50 < Voland> so somewhere node seems to interfere
15:51 < geNAZt> well for that my c isnt good enough :D
15:51 < geNAZt> sry
15:52 < Voland> np
15:53 < Voland> it seems to run better directly after a rebuild
15:53 < Voland> really strange
15:54 < gabrieluk> hi, I'm making a simple express app, that is a simple website, nothing special. I would like to add a basic search functionality, as seen in popular systems, such as wp. is there a module for that or links about the subject so i could write 1?
15:55 < geNAZt> gabrieluk: in what would you like to search ?
15:55 < gabrieluk> just the pages tile and body
15:55 < gabrieluk> title*
15:55 < geNAZt> not vs a database or something ?
15:55 < Voland> and gdb fucks up the terminal
15:55 < Voland> arg
15:56 < gabrieluk> nope, just basic, for the pages
15:56 < geNAZt> so you have to crawl all sites for the title and the body
15:56 < geNAZt> and some sort of database that can store this data
15:57 < geNAZt> and you execute your searches vs the database
15:59 < gabrieluk> i don't mind to have a db, i have installed mongo and mysql
16:00 < geNAZt> i dont want to start a mongo vs mysql battle but for bigger datasets ( much data ) mysql is better for searching
16:01 < gabrieluk> ok, i like mysql. I'm just wondering if there is a npm package doing that already...
16:02 < geNAZt> i dont think that modules crawl websites, indexes your data and search in you database
16:02 < geNAZt> so you would need to build your own module
16:04 < gabrieluk> mm, perhaps i need a guide tutorial doing one? I know javascript well, but not really the networking person
16:06 < gabrieluk> seems i found a crawler.. https://github.com/cgiffard/node-simplecrawler
16:06 < geNAZt> crawling websites is not so hard
16:06 < SomeoneWeird> use reds
16:07 < geNAZt> you need cheerio or jsdom to get the html body
16:07 < geNAZt> the simplecrawler only gets the website
16:08 < SomeoneWeird> <SomeoneWeird> use reds
16:09 < niggler> github needs a `head slap`operation
16:11 < SomeoneWeird> "For bug reports, feature requests and specific problems with an individual repo (or gist, etc), please contact support@github.com"
16:11 < Industrial> What's the best way to watch an upnode server and restart it when it crashes?
16:11 < SomeoneWeird> monit
16:11 < gabrieluk> thanks SomeoneWeird and geNAZt, I'm looking now at  this crawlers now
16:23 < gabrieluk> geNAZt, cheerio seems very familiar to me, as i know jq, but i can't fully understand what it does yet o.O
16:23 < gabrieluk> SomeoneWeird, reds seems great, cheers
16:23 < fruitFly__> so does socket.io allow clients to communicate without sending http requests?
16:24 < gabrieluk> websockets
16:24 < geNAZt> gabrieluk: nodejs doesnt have a dom manipulation interface
16:24 < geNAZt> cheerio adds this to nodejs
16:25 < gabrieluk> you mean manipulate the dom, from the server side?
16:25 < nathan7> parse an HTML page, fiddle with it
16:25 < fruitFly__> difference between socet.io and websockets? good tutorial?
16:26 < fruitFly__> heeeelp meeeee *singing in high pitch voice*
16:26 < nathan7> socket.io provides an abstracted interface over websockets
16:26 < fruitFly__> nathan7: Thanks!
16:26 < geNAZt> socket.io has more then "just" websockets
16:26 < nathan7> And it provides a bunch of magic for browsers that still suck
16:26 < geNAZt> if websockets dont work it has flashsockets, xhr polling, forever html / iframe
16:26 < gabrieluk> come down fruity, or you gonna get eaten...^^
16:26 < geNAZt> and so on
16:27 < fruitFly__> nathan7: so websockets connect client (web browsers?) so they don't have to continuosly send http?
16:27 < tjfontaine> websockets happen over http, but they are a single connection and not a series of connections for each message
16:27 < nathan7> fruitFly__: You send a magic HTTP req and you basically get a plain TCP socket
16:28 < tjfontaine> they also facilitate bidirectional communication
16:28 < fruitFly__> What is this magic?
16:28 < fruitFly__> ??!!!
16:28 < geNAZt> pub/sub channels
16:28 < geNAZt> namespaces
16:28 < geNAZt> and so on
16:28 < tjfontaine> meet: google.com
16:28 < gabrieluk> imagine that a websocket connection is a telephone call, all sides are ON all the time, and requests are real time, over websockets
16:29 < geNAZt> "realtime" :D
16:29 < gabrieluk> LIVE :D
16:29 < fruitFly__> that is crazy, but what is in the header of the packet?
16:29 < geNAZt> of which packet ?
16:29 < geNAZt> the http connection or the upgraded tcp connection ?
16:29 < tjfontaine> teach a man to fish.
16:30 < geNAZt> how a websocket packet (frame) looks: http://tools.ietf.org/html/rfc6455#section-5.2
16:31 < fruitFly__> ok.. so typically there is http layer then tcp layer then ip layer...... To initialize a websocket an http would have to be sent first, but then after how do the frames look? I imagine they still must have http... but what is technically different that makes it a socket?
16:31 < fruitFly__> *thinking*
16:32 < geNAZt> no the http request says the server that it needs to "upgrade" the request
16:32 < geNAZt> so for this socket the http parsing falls of and the websocket parser gets attached to the data of the tcp socket
16:33 < holzp> there is so much awful code in the world and I keep adding to it
16:33 < nathan7> fruitFly__: You do a switchover
16:33 < nathan7> fruitFly__: You replace the HTTP layer with a WebSocket layer
16:34 < boutell> one thing to remember about web sockets is that they consume some resources if you keep them alive. I've heard stories of people managing a million connections on one node-powered web socket server though. That's an extreme example but it's clearly a good platform for it
16:35 < geNAZt> it depends on how much data you have to send
16:35 < geNAZt> and how much node must switch between sockets
16:35 < geNAZt> and so on
16:35 < fruitFly__> ok... so just a different (and bigger?) layer 4 is added
16:35 < fruitFly__> *still thinking*
16:35 < geNAZt> no
16:36 < fruitFly__> oooooooooooooh
16:36 < fruitFly__> websocket is layer 5
16:36 < fruitFly__> ?
16:36 < geNAZt> a websocket init is something like this: client requests a websocket => http request => server upgrades and removes the http parser => http response => client now knows the tcp socket is no http socket anymore => send data over tcp via the websocket layer
16:37 < boutell> fruitFly__: in the beginning you have a TCP socket connection on port 80. That's a reliable stream you can keep alive as long as you want and sling data back and forth knowing it'll get there. HTTP is just a convention on top of that. web sockets is another convention, which you ask the server to switch to with an http upgrade header. There's no magic. 
16:37 < fruitFly__> what is the http parser
16:37 < geNAZt> if u think of an osi model, tcp is layer 4, http and websocket are layer 5
16:38 < boutell> fruitFly__: if you're not familiar with HTTP yet, you should read up a little on that, since it's what every web request and response is built on
16:38 < geNAZt> http parser is something that parses your requests from the tcp socket. headers, post data, body and so on
16:39 < fruitFly__> is it just what strips off the http header?
16:39 < geNAZt> it parses it
16:40 < geNAZt> after the tcp socket data has gotten through the http parser you can access things like request headers, querystrings, post data. 
16:40 < geNAZt> And on the other hand it packs your response. Headers, status codes, body data, downloadable files
16:42 < fruitFly__> geNAZt: boutell Thank you!
16:43 < fruitFly__> I understand the process of requesting and changing the protocol. But what technically allows websocket to be a faster protocol than http? Does it not pass through the same routers etc. to reach the destination, or is it just that the parsers have to parse less application data?
16:43 < geNAZt> i failed about the osi model :D tcp should be layer 5, http and websocket layer 6
16:44 < boutell> tpayne: if you are still hereâ€¦ node didn't break your phpmyadmin, LOLâ€¦ but the right question to be asking is, do you have a bunch of things that want to share port 80, and how are you going to reverse proxy all the incoming traffic so that everybody can do that on the same server. node-http-proxy is outstanding for that. There is also a complete deployment solution for node that includes it that I put together, called stagecoach. 
16:44 < boutell> can configure stagecoach to forward traffic for any hostnames it doesn't recognize to another port, where Apache is listening, so your old PHP junk (and mine) still works.
16:44 < geNAZt> fruitFly__: websockets have less overhead than a http connection
16:44 < boutell> fruitFly__: in principle HTTP connections can be kept alive, but they still have lots and lots of overhead, yeah.
16:45 < geNAZt> fruitFly__: and websocket are bidirectional, http connection arent
16:45 < tpayne> boutell: cool. i've been creating sub domains to get around the problem
16:45 < boutell> also in practice they hang up a lot.
16:45 < tpayne> i'll check out stagecoach
16:45 < boutell> tpayne: subdomains are good, but you don't want to be stuck dedicating IPs to them, thus stagecoach
16:45 < tpayne> is it an node_module?
16:46 < boutell> https://github.com/punkave/stagecoach
16:46 < fruitFly__> how is tcp layer 5?.. 1-physical, 2-switching, 3-routing, 4-transfer, 5 -application (http etc.).. and techincally what do you mean by bi directional geNAZt :D
16:46 < boutell> not in npm because npm is more suited to reusable components
16:47 < tpayne> got it, thanks
16:47 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:48 < boutell> fruitFly__: theoretically the server cannot initiate a "push" of more data to you in HTTP, it's up to you to request some (polling). In practice a lot of apps just keep adding to the same response for a long time (long polling, aka comet). But web sockets is a lot more efficient. "Here's a byte count, followed by a message name and a message. Bam! Here's another one. Bam!"
16:48 < boutell> (not sure if the message name is part of web sockets itself or just added by socket.io, which you use if you want to get any mileage out of websockets today)
16:50 < geNAZt> fruitFly__: on websockets the server can send data and the client receives it directly. on http you must ask the server for new data
16:51 < Industrial`> Is there an ODM/ORM that works in the browser and on node.js ?
16:51 < redshadowhero> Good morning everyone!
16:52 < boutell> just wrote a socket.io app yesterday. Pretty great stuff, although authentication is a hassle. You don't necessarily know who the user is, especially if the flash transport is used. There are hacks to shim sockets up to passport, but I wound up generating a random "socket key" in the session which is in the first message sent on the socket.
16:52 < Industrial`> I don't care about backends (yet), I just want to treat data the same in the client as on the server, so I can apply the same validation logic and some (not all) business logic on the client if I want
16:53 < boutell> Industrial`: people do that sort of thing with backbone a lot. That's not technically running the same code on browser and server, but it is just the fraction of the ODM/ORM the browser actually needs, and easy to shim up via REST to a full ODM/ORM on the server.
16:53 < fruitFly__> hold on... when an http request is made where is the application data stored (layer 1 or layer 5?)... so in http this layer tends to grow and grow? boutell 
16:54 < Tobsn> anyone know how to access an array index directly in mongo? data: [{log: [0,0,0]},{log: [0,0,0]},{log: [0,0,0]}] - like this, i want to increment in object 0 log 0: data: [{log: [1,0,0]},
16:55 < Industrial`> I was thinking 2 implementations for save, one to mongodb and one to the server from the client through a websocket, which returns an error if the server side validation fails, so I could handle e.g. authentication/business logic still on the server.. but write the schema up once =)
16:55 < boutell> fruitFly__: not sure what you're asking. Normally in HTTP the response is the HTML to be rendered, or an image to be displayed inline with it, or similar, and the browser has ample cache folder space if needed.
16:56 < boutell> fruitFly__: a long polling comet response could in principle be very large, but in practice you'd reconnect now and then, and even if you didn't, modern browsers are already ready to handle pretty ginormous documents.
16:57 < boutell> Industrial`: I've seen folks try running bootstrap on the server too and hooking it up directly to mongo. It's generally easier to use mongoose on the server if you have a fixed schema, or just use mongojs if not.
16:58 < fruitFly__> boutell: ooooh, http is to request the server for websockets but it is usually used for rendering html.... but what exactly is the comet effect your talking about--that in a situation ideal for websockets they would keep sending the same information over and over + more?
16:58 < boutell> Tobsn: looks like you can use "dot notation" for arrays as well as objects.
16:58 < boutell> http://docs.mongodb.org/manual/core/document/#dot-notation
16:59 < Tobsn> yeah i thied
16:59 < Tobsn> tried
16:59 < Tobsn> not very successful
16:59 < Tobsn> db.test.update({_id:ObjectId("5105599cdefd5d1bcde70102")},{$inc:{data.1.log.1:1}});
16:59 < Tobsn> Sun Jan 27 17:46:14 SyntaxError: missing : after property id (shell):1
17:00 < fruitFly__> boutell: *thinking* what technically is a comet response
17:00 < Industrial`> boutell, in the experience I had with mongoose, I couldn't handle saving and other logic of sub-models in the sub-models, just the id and properties get saves in the containing model, so you must apply the logic there. Ex. I can't create a Profile model and have it be saved as part of a User model, and when a user get's saved, validate the profile with the profile model as part of the user model validation.
17:01 < Industrial`> just the same as when instantiating a model instance from a query, expecting the profile property to be an instance of the Profile model :)
17:02 < boutell> Tobsn: hermmm, that looks good to me. What's your version of mongodb?
17:03 < Tobsn> 2.0.2
17:03 < Tobsn> installed today over 10gen
17:03 < Tobsn> repo
17:03 < Tobsn> oh actually
17:03 < Tobsn> locally
17:03 < Tobsn> its older
17:05 < fruitFly__> boutell: I think I'm getting it
17:05 < Industrial`> boutell, if the relationship is defined on a model level (n:m relationship), then on the instance(implementation) just reference/link it? properties easily go 2-way ..
17:05 < Tobsn> let me update to latest 2.2
17:05 < Tobsn> but im still not sure this multi level dot notation would work
17:06 < boutell> Tobsn: actually, I think your problem is different
17:06 < boutell> Tobsn: you have 'data.1' in there but there is no data property. You're trying to work around the fact that your document *is* an array so you can't say anything.1
17:06 < boutell> now there may be another way to do that
17:06 < Tobsn> hu?
17:06 < boutell> I don't know every mongo syntax feature...
17:06 < boutell> but you could make your documents objects, with the array a property called data
17:06 < boutell> and then you might be in business
17:07 < Tobsn> {_id:...,data: [{log: [0,0,0]},{log: [0,0,0]},{log: [0,0,0]}]}
17:07 < Tobsn> thats how it looks like
17:07 < boutell> Tobsn: oh I see. That wasn't in your earlier paste.
17:07 < Tobsn> it was ;)
17:07 < boutell> Tobsn: yeah, it was, I misinterpreted.
17:07 < Tobsn> :D
17:08 < Tobsn> still, i dont think you can access multilevel
17:08 < Tobsn> which sucks
17:08 < Tobsn> because i have to
17:11 < Tobsn> okay, updated to 2.2.2
17:11 < fruitFly__> boutell: so you were saying earlier apps that utilize http: request a => response, but to get the subsequent response the client must concatenate a to b (i.e a+b => next response)?
17:11 < Tobsn> { "_id" : ObjectId("5105599cdefd5d1bcde70102"), "data" : [ { "log" : [ 0, 0, 0, 0, 0 ] }, { "log" : [ 0, 0, 0, 0, 0 ] } ] }
17:12 < Tobsn> same error
17:12 < fruitFly__> boutell: and that concatenation process a+b+c is the comet and slows the communication?
17:13 < boutell> fruitFly__: you should back way up and read about HTTP
17:13 < boutell> http://www.boutell.com/newfaq/definitions/http.html
17:13 < Tobsn> omg
17:13 < Tobsn> boutell
17:13 < fruitFly__> boutell: ok lol
17:13 < Tobsn> fails: db.test.update({},{$inc:{data.1.log.1:1}})
17:13 < Tobsn> success: db.test.update({},{$inc:{"data.1.log.1":1}})
17:13 < boutell> Tobsn: oh right DUH
17:14 < Tobsn> ... ;)
17:14 < boutell> Tobsn: we were being dense
17:14 < Tobsn> thats what the error message tried to tell me
17:14 < Tobsn> yep
17:14 < boutell> Tobsn: the dot notation makes me want to write it "as code" but it means we were trying to dereference it right in the shell and it never got to the server, LOL
17:14 < Tobsn> hehe yep
17:14 < Tobsn> pretty much
17:14 < Tobsn> now i hope i can do it the same way in node and php
17:14 < Tobsn> ...
17:14 < Tobsn> ;)
17:15 < holzp> was there a book on writing single page javascript applications?
17:15 < holzp> I feel like there was but i dont recall
17:15 < holzp> ah google my friend
17:15 < Tobsn> there are tons of nettuts tutorials on backbone/angular/node/laravel etc. and their examples are pretty much one page apps
17:16 < holzp> yeah i was curious about the book
17:17 < Tobsn> $m->teststuff->test->update( array(), array( '$inc' => array( 'data.1.log.2' => 1 ) ) ); - okay php likes the syntax. so far so good...
17:22 < tpayne> avC.parentNavigationController = [[self.navigationController retain] autorelease]; does something like this look normal to you guys?
17:23 < tpayne> oops wrong channel
17:24 < fruitFly__> boutell: what do you mean by apps just keep adding to the same response? @ "theoretically the server cannot initiate a "push" of more data to you in HTTP, it's up to you to request some (polling). In practice a lot of apps just keep adding to the same response for a long time (long polling, aka comet). But web sockets is a lot more efficient. "Here's a byte count, followed by a message name and a message. Bam! Here's another one.
17:26 < boutell> fruitFly__: have you read up on the basics of HTTP? Browser says "gimme this URL, server sends a document?" In a Comet scenario, the server sends "part" of a "document," and never hangs up, never says "I'm done," just keeps sending more stuff. The browser is capable of accessing the partial document as it arrives - has been almost since the first web browser, after all early connections were very slow and at least you could read page o
17:26 < boutell> while you waited for the rest...
17:26 < boutell> fruitFly__: in a Comet scenario, javascript coders leverage this feature, treating parts of the "incomplete document" as discrete messages.
17:26 < boutell> its' a hack.
17:26 < boutell> a fairly nasty one (:
17:29 < redshadowhero> but hopefully this will go away when things like websockets get more traction.
17:29 < fruitFly__> boutell: I read your http doc. So server says heres part 1, then part 2... part 13 & Finished? So what does that really have to do with a server being able to say BOOM here's a message.... BAM here's another unrelated message?
17:30 < geNAZt> fruitFly__: you see that wrong
17:30 < mscdex> fruitFly__: generally long polling is used instead
17:30 < mscdex> but there are other options too
17:30 < geNAZt> in websockets a am able to send data to the server between two messages
17:31 < geNAZt> in http you have to request a new http
17:31 < geNAZt> to get data to the server
17:31 < redshadowhero> It's full duplex tcp communication in websockets.
17:31 < boutell> fruitFly__: there are no "parts" to the body of an HTTP response, it's just one long document, but nobody's keeping you from creating a *totally informal personal totally made up protocol* that defines the boundary between parts. 
17:32 < mscdex> boutell: the problem is the browser can internally buffer x bytes before letting js know
17:32 < boutell> mscdex: true. One of the reasons it's a nasty hack.
17:32 < mscdex> that's why if you're going that route you may as well do multipart/x-mixed-replace
17:33 < redshadowhero> http://caniuse.com/#search=websocket come ooooon ie! Stop hoooolding me baaaack.
17:33 < redshadowhero> also android.
17:33 < boutell> mscdex: also true. But we don't have to think about *any* of this because Guillermo Rauch thought about it for us and gave us AJAX long polling and AJAX multipart streaming and other wacky transports that socket.io automatically falls back to! Yeah!
17:33 < mscdex> redshadowhero: android has WebGL now!
17:34 < boutell> redshadowhero: you can use socket.io and the IE people just get somewhat slower fake web sockets; you can still write websockets-style code. I'm good with that.
17:34 < redshadowhero> but I want websooooooockets.
17:34 < mscdex> boutell: i don't think socket.io uses multipart
17:34 < boutell> mscdex: docs mention it: http://socket.io/#browser-support
17:34 < mscdex> or things like Server-Sent Events
17:34 < fruitFly__> boutell: DOesn't the server send the web page in pieces because it all can't fit in 1 frame? That's what I mean by part 1, part 2.. frame 1 of size Z and frame 2 of size Z
17:35 < geNAZt> fruitFly__: right tcp chunks the http response u into packages
17:35 < boutell> fruitFly__: frames are totally NOT A THING because we are building on top of TCP. TCP is a connected, reliable, streaming protocol. You're sending a stream of bytes, and they eventually get there, in that order. No packets, no frames. Those things only exist at lower OSI levels.
17:35 < mscdex> boutell: https://github.com/LearnBoost/socket.io/tree/master/lib/transports
17:36 < boutell> mscdex: source code wins, heh. Maybe it got ripped out?
17:36 < mscdex> i believe it did
17:36 < mscdex> not sure when though
17:37 < mscdex> i had submitted a PR a long time ago for SSE support, but never got accepted
17:37 < boutell> SSE?
17:37 < Licenser> hi people :)
17:37 < Licenser> chjj you're arund mate?
17:37 < chjj> Licenser: yessir
17:38 < Licenser> :D cool, can I bother you for a minute or two?
17:38 < mscdex> boutell: server-sent events
17:39 < chjj> Licenser: whats up?
17:39 < boutell> mscdex: whoa crazy. So that's like a half-alternative to web sockets that only works in one direction?
17:39 < boutell> reading the wiki page
17:39 < mscdex> boutell: yeah and it's pretty simple
17:40 < boutell> mscdex: what did you use in the other direction?
17:40 < mscdex> boutell: plain xhr
17:40 < Licenser> I stumbled about tty.sj, and guessing it's yours :). I am looking for a terminal in the browser thing and have a few questiosn
17:40 < chjj> Licenser: sure
17:41 < chjj> also
17:41 < chjj> https://github.com/chjj/blessed
17:41 < mscdex> boutell: SSE is nice when you don't need to be sending much to the server
17:41 < chjj> if anyones interested in that ^
17:41 < chjj> pulled an all nighter writing it
17:42 < mscdex> chjj: good luck :-)
17:42 < Licenser> chjj I know the feeling ^^. So I'm more interested about the browser side, I've a own server to handle the backend part. Firstly I wanted to ask if you're Ok if I rip the browser side stuff of your project :P (of cause credits & license included)
17:43 < chjj> mscdex: thanks
17:43 < chjj> Licenser: no problem with that. its all MIT licensed
17:44 < chjj> Licenser: go for it
17:44 < alxFradiani> do you follow dailyJs site?
17:44 < Licenser> chjj yea just you know, being polite and ask is still good behavior ;)
17:44 < chjj> mscdex: long road ahead of me i know. i wanna build a really damn high level widget library out of that.
17:47 < chjj> Licenser: :)
17:47 < Licenser> chjj a 'lazy' :P question I have left would be if the server does any kind of special mangling with the data or just send plain it 1:1 / I didn't saw anything when looking over the source but with this ammount it's easy to miss something
17:47 < chjj> Licenser: all the server does is write the data to a pty. nothing else.
17:48 < chjj> Licenser: and then it reads from that pty and sends it back to the browser.
17:48 < Licenser> cool cool that's awesome chjj :)
17:48 < redshadowhero> You know.. I always wondered what the finer difference between LGPL and MIT are.
17:48 < chjj> redshadowhero: MIT doesnt have 25 paragraphs of legalese.
17:48 < fruitFly__> boutell: what's the main reason why servers don't send the entire webpage in 1 BOOM!? Too long to assemble the response and the user would be waiting? not to mention other users making requests to the same server?
17:48 < chjj> redshadowhero: ;)
17:49 < redshadowhero> IANAL.. I need like a license reader for dummies.
17:49 < Licenser> redshadowhero for me anything *GPL is scary and I try to avoid it :P
17:49 < chjj> Licenser: no problem
17:49 < MI6> joyent/node: Fedor Indutny master * 0972acb : stream_wrap: reference handle before uv_write2  Revert commit 7f2a78bf4d4 - http://git.io/xNQDLg
17:49 < fruitFly__> boutell: or is there some standard for max layer 4 size?
17:50 < redshadowhero> Well, RMS has gotten rather over-the-top lately.
17:51 < boutell> redshadowhero: with LGPL, you can attach the library to your program and you don't have to open source your program, but if you modify the library itself, you must open source those modifications. With MIT, you must keep the copyright notice in the code. That's it, that's all - you can modify and extend it to kingdom come and not release squat.
17:52 < onr> fruitFly__: feel free to use HTTP 1.0
17:52 < redshadowhero> I dunno.. I'd kinda like to see what people do with my code.
17:53 < redshadowhero> But, I guess that's unfair to the people using it.
17:53 < boutell> redshadowhero: if you want people to really use your code, go with the MIT license, and create an obvious place for people to talk to you about it.
17:53 < boutell> redshadowhero: *GPL licenses scare people off.
17:53 < terite> I'm running into a failed assertion when trying to use child_process.send through cluster
17:53 < boutell> not always of course. The Linux kernel is GPL.
17:53 < boutell> etc.
17:53 < terite> I can reproduce it with http://pastebin.com/5rGh8kAu
17:53 < terite> Can anyone run and verify?
17:54 < terite> and, preferably, tell me where I'm going wrong?
17:54 < geNAZt> fruitFly__: HTTP 1.1 keeps the tcp socket open and keeps sending data for each request. HTTP 1.0 closes the socket after the response is sent
17:56 < fruitFly__> geNAZt: how does http 1.1 decide how large to chunk the responses?
17:56 < geNAZt> http header Content-Length
17:57 < geNAZt> and each request and response has a terminating bit
17:57 < boutell> fruitFly__: every response is still a complete document body. It's not breaking individual JPEGs into ten "chunks" or something. That's low level, TCP stuff we don't have to ever think about.
17:58 < fruitFly__> thanks guys for all the help.. bed time... I WILL BE BACK!
17:59 < Kakera> I can't wait for 0.10
17:59 < redshadowhero> Like I said, it isn't fair to anyone who would want to use my code to expect them to contribute every little thing back.
18:04 < terite> Does anyone else get the same error when running the pasted code?
18:05 < owen1> i need to emit LWES event, and reading about an event structure here http://www.lwes.org/docs/doxygen/html/structlwes__event.html  it looks like i need 1 byte string, 2 bytes number a struct and a hash of attributes. i know about dgram but not sure how to send the correct info in the socket. any tips?
18:06 < alxFradiani> what tool can i use to see the content  of a mongodb db?
18:08 < owen1> alxFradiani: mongodb comes with mongo executable
18:09 < owen1> just run 'mongo'
18:09 < owen1> and than 'show dbs' and 'use foo' and db.users.find()
18:10 < alxFradiani> i see owen1, just startingâ€¦ thanks
18:11 < owen1> alxFradiani: np
18:16 < redshadowhero> Okay, through a little testing, it seems like I can compare Date objects with < and > directly. Is this true?
18:28 < gildean> redshadowhero: yes
18:28 < redshadowhero> awesome.
18:29 < gildean> you can use new Date to get the full js datetime object, or just Date.now() to get the current time from epoch in ms
18:30 < gildean> the latter is faster, so for time-comparison it's usually better
18:31 < redshadowhero> Ooh.
18:31 < redshadowhero> I'll have to refactor a little, but ultimately not too bad.
18:34 < terite> Upon further testing I've found that I can send sockets from a parent to a child, but not from a child to a parent. Is this expected behavior/
18:34 < terite> ?
18:54 < xk_id> :o almost a minute to wrtite 15,000 consecutive numbers to a .txt?
18:55 < xk_id> should add that I use a ssd too 
18:55 < geNAZt> xk_id: then you do something wrong :D
18:56 < xk_id> I knew it !
18:56 < sbward> lol
18:56 < nanashiRei> some network guru here?
18:56 < geNAZt> what kind of network ?
18:56 < nanashiRei> http restful stuff
18:56 < nanashiRei> I need numbers
18:56 < xk_id> https://gist.github.com/4649747
18:56 < nanashiRei> How much reqs/sec can 100mbit handle approx.
18:56 < geNAZt> 1 <= number
18:57 < geNAZt> if i assume that the server has unlimited cpu and ram, and that the average response length is 150kb
18:58 < geNAZt> 682,6 req/s
18:58 < geNAZt> but you never would reach that
18:59 < nanashiRei> way below that ^^
19:00 < nanashiRei> it's a simple "ok" for about 90% of the answers
19:00 < geNAZt> you never have unlimited cpu and ram
19:00 < nanashiRei> using restify as the base
19:00 < geNAZt> so without information you cant say it runs with 150 req/s or 10 req/s
19:00 < nanashiRei> which has prooven to be the fastest choice
19:00 < geNAZt> not to use http for apis :D
19:01 < nanashiRei> 16 cores @ 3.4 Ghz with 32 GB DDR3 ram
19:01 < nanashiRei> and running, which is useless in this case but well. on an Intel S320 SSD
19:01 < geNAZt> depends on the avergae response time your application has
19:01 < nanashiRei> RESTful... is HTTP... 
19:02 < geNAZt> and that depends on that what you do in a call
19:02 < geNAZt> HTTP is per design RESTful
19:03 < nanashiRei> Well, my job is to make it available over HTTP because there are certain factors that won't allow something different
19:03 < nanashiRei> also the server is capable of SPDY if the client does opt in for it
19:03 < geNAZt> then the only factor you need to know is the average response time
19:03 < geNAZt> so you can calculate the req/s
19:04 < nanashiRei> fluctuating pretty badly, 50ms - 450ms
19:05 < nanashiRei> The biggest load is the incoming data, however nothing is stored on this receiver, but rather send to a backend on xeround.com
19:05 < geNAZt> then you have between ~38 req/s and ~320 req/s
19:05 < nanashiRei> Still, just 100mbit which is bad i think.
19:05 < geNAZt> the line is not the bottleneck in this case
19:06 < nanashiRei> I'm just getting sample  data send here, so this is by far not the endgame xD
19:06 < nanashiRei> only getting ~ 15% of all the requests that are to be handled in the end
19:07 < nanashiRei> i do think, 100mbit just wont cut it then. but i'm not networking expert, could be something else
19:07 < nanashiRei> Maybe i need to fork into multiple processes already ^^
19:07 < nanashiRei> still just one instance for now
19:08 < ramitos> anyone knows a good 'deep dive'/tutorial of the net module? 
19:09 < nanashiRei> ramitos: I'd rather go read up on sockets in general, that'll cover all you need to know
19:09 < ramitos> nanashiRei thanks :) you know a good resource?
19:09 < nanashiRei> uh try using the internet :D
19:09 < nanashiRei> no, not really sorry
19:11 < ramitos> nanashiRei haha :D
19:12 < nanashiRei> geNAZt: kennst du nen gutes monitoring tool womit ich das ein wenig genauer beobachten kann was der server so an I/O last hat?
19:13 < geNAZt> iotop
19:13 < geNAZt> wenn du einen linux mit ssh hast
19:13 < nanashiRei> jo debian 6 halt ^^
19:14 < geNAZt> ja dann iotop
19:14 < nanashiRei> in welchem pakage ist das, iotop so findet er net
19:14 < geNAZt> http://packages.debian.org/de/sid/iotop
19:15 < nanashiRei> mah testing sources, das darf ich net :/
19:16 < nathan7> http://packages.debian.org/de/stable/iotop
19:16 < nathan7> tahdah
19:16 < nanashiRei> why the heck doesn't apt-get find it then
19:16 < nanashiRei> gnarrrr
19:19 < redshadowhero> check apt-cache?
19:19 < nanashiRei> i did
19:19 < nanashiRei> uhh i solved it
19:19 < redshadowhero> What was wrong?
19:19 < nanashiRei> cache was kinda busted :s
19:20 < redshadowhero> Ouch. How did that happen?
19:21 < geNAZt> und ist es das was du suchst ?
19:22 < nanashiRei> joar und es zeigt was ich erwartet habe, fast 0 hdd activitaet
19:39 < nanashiRei> http://stackoverflow.com/questions/10395807/nginx-close-upstream-connection-after-request reading this... kinda solved the madness -_-
19:44 < jtomasrl> when using mongo should i add a callback when usin a collection or just asign it to  value?
19:45 < jtomasrl> collection(thisColl, function(err, collection) {}) or var collection = collection(thisColl)
19:47 < nanashiRei> depends on if someone is waiting for a reply
19:48 < nanashiRei> you should never do blocking code when there is a client waiting for a reply ^^
19:48 < nanashiRei> (well you should never do blocking code anyway, so use a callback :P)
19:49 < nanashiRei> i suggest u try async (npm package) it helped me solve a lot of async madness
19:50 < jtomasrl> i will, ty
19:50 < jtomasrl> is the same as stepÂ¿
19:50 < jtomasrl> ?
19:51 < nanashiRei> not sure about that, since i don't know step
20:05 < alxFradiani> i'm trying to reduce indentation placing callbacks in separated functions
20:05 < alxFradiani> but i'm having problems accessing the req object
20:06 < alxFradiani> should i put it globally? or what's the best way to pass it between functions
20:06 < nanashiRei> when using callbacks make sure you wrap them
20:07 < lohkey> alxFradiani: pass it around, also, look into libraries like async
20:07 < lohkey> https://github.com/caolan/async
20:07 < alxFradiani> thanks
20:07 < nanashiRei> async =<3
20:24 < xk_id> https://github.com/caolan/async#queueworker-concurrency > what is the difference between the "callback()" called within "async.queue ()", and the "callback()" called wtihin "q.push()"?
20:27 < xk_id> i.e, what is the difference between a worker's callback and a task's callback for async.queue ?
20:28 < Anck> hi
20:28 < Anck> Can you guys tell me the main reason to use node.js instead of e.g. Python in any server-side programs?
20:29 < xk_id> Anck: one of the reasons is that many web devs are already familiar with JavaScript, so Node.js is a natural progression
20:30 < Havvy> Does Python have anything like libuv?
20:30 < bnoordhuis> Havvy: pyuv
20:31 < Anck> So for my own applications there are no benefits to use it if I'm more familiar with some other languages?
20:31 < Anck> even if the client side is made with javascript
20:31 < Havvy> Anck: You can share algorithms on the web with those on the server.
20:31 < Havvy> Gaining a bit of reuse.
20:32 < Havvy> And there's less of a context shift when switching between client and server code.
20:33 < Anck> ok, thanks for this
20:33 < xk_id> Anck: bare in mind, I'm not sure it's the main reason :) maybe someone more experienced can talk.
20:34 < icekkk> Howdy I want to develop restful webservices using node js.  Instead of doing it all from scratch what would be the recommended module to use to make it the easiest?
20:35 <@mbalho> restify
20:36 < MI6> joyent/node: isaacs created branch buffer-copy-fix - http://git.io/DMGQQg
20:36 < Anck> Just wondering that is it worth to study node.js just for that I can add it to my CV ^^
20:40 < icekkk> hey mbalho t hanks a million, looks perfect
20:44 < xk_id> trying to write 2,000,000 consecutive values to a .txt file, but I am getting "maximum call stack size exceeded" error: https://gist.github.com/4650357
20:45 < aho> means, there is a funciton which calls a funciton which calls a function...
20:46 < xk_id> I think it might have to do with the size of the loop ?
20:48 < Kakera> why are you using async for this?
20:48 < zomg> xk_id: the callback() is probably causing the call stack to go up
20:48 < Kakera> ^
20:49 < xk_id> Kakera: because otherwise I get an EMFILE error
20:49 < zomg> You could try breaking the stack by using nextTick or whatever the function was
20:49 < zomg> that should basically cause it to get a fresh stack for each run
20:50 < xk_id> if I use nextTick do I still need to to use async.queue?
20:50 < zomg> you'd just have it call the callback function with nextTick so I guess so
20:50 < zomg> I'm not entirely sure whether it will help but prob worth a shot
20:51 < Kakera> move the callback call into the appendFile call
20:51 < Kakera> it will also make sure the append operation is done before the next one starts
20:51 < xk_id> ohh
20:54 < xk_id> Kakera: what if I wish to do concurrent appendFiles?
20:54 < Kakera> into a single file?
20:54 < xk_id> yes
20:54 < Kakera> I don't think that's possible
20:55 < Kakera> node.js probably queues the append behind the scenes
20:55 < xk_id> ic
20:57 < Kakera> but it's weird that V8 doesn't optimize for tail call
20:57 < Kakera> I guess it has a good reason
20:59 < bnoordhuis> Kakera: it's because TCO is not tractable in the general case with js
20:59 < bnoordhuis> js has some weird semantics regarding the arguments object that effectively kill TCO
21:00 < bnoordhuis> i guess it's possible for trivial cases, self-recursion and such
21:00 < exit2> Anyone here used phone gap with node.js?
21:01 < Kakera> bnoordhuis, can you give me an example where the arguments object prevents TCO?
21:01 < bnoordhuis> Kakera: i can, there's a v8 issue about it. let me look it up
21:01 < Kakera> cool
21:01 < bnoordhuis> Kakera: http://code.google.com/p/v8/issues/detail?id=457
21:02 < Kakera> thanks
21:06 < mscdex> bnoordhuis: yeah i remember hearing about that a long while back
21:07 < xk_id> Kakera: I'm getting very long times writing my file. is this normal?
21:08 < xk_id> I've been running it for at least 5 minutes and it barely made it to 50,000
21:08 < torvalamo> how do you know gnomes haven't been in your computer at night installing more ram?
21:08 < torvalamo> oops
21:09 < torvalamo> didn't see it scrolled
21:09 < torvalamo> egg on my face
21:13 < Shayanjm> Question - I'm trying to build a twitter stream for a landing page in Node
21:13 < Shayanjm> deploying to Heroku. I'm using ntwitter + socket.io (xhr-polling). The polling doesn't even start when deployed to heroku/using foreman
21:14 < Licenser> chjj thank you man tty.js is awesome :) had to rip a few things out to make it work in my setup but it's really cool!
21:14 < Shayanjm> but it works perfectly if i run it using node app.js -- any ideas why that is? When on Heroku/using foreman it only returns the static elements.
21:14 < MI6> joyent/node: Ben Noordhuis master * acd0df4 : test: fix pummel test out-of-memory errors  Fix the following OOM error i (+1 more commits) - http://git.io/T_ZYcg
21:14 < isaacbw> Shayanjm, maybe heroku uses a reverse proxy that doesn't let socket.io through
21:14 < isaacbw> though I guess if it's polling it shouldn't matter
21:14 < isaacbw> you might contact heroku about it
21:15 < Shayanjm> Exactly. I even tried deploying it on a VPS instance on my own dedicated server, and it still doesn't poll
21:15 < isaacbw> weird
21:15 < Shayanjm> so its apparently not just heroku
21:15 < isaacbw> maybe it's a cors issue?
21:15 < isaacbw> have you looked at the dev console in chrome when trying to poll?
21:15 < Shayanjm> Yeah I have
21:15 < isaacbw> what does it say
21:15 < Shayanjm> it serves all the files properly to the client
21:16 < Shayanjm> i.e socket.io.js is present
21:16 < isaacbw> but what does it say about polling
21:16 < Shayanjm> sec
21:16 < Shayanjm> there is no error thrown for it
21:16 < isaacbw> it should show success or failure with xhr requests
21:16 < Shayanjm> yeah it doesn't say anything. one second
21:17 < isaacbw> oh. Maybe try the firefox console then
21:17 < isaacbw> it definitely shows requsts
21:17 < isaacbw> firebug I mean
21:17 < Shayanjm> oh okay, there's a difference between node app.js and foreman start in the console:
21:17 < Shayanjm> GET http://localhost:3000/socket.io/1/?t=1359321268738 fails with foreman start
21:18 < Shayanjm> but past that, it doesn't explicitly say anything about polling
21:19 < isaacbw> does it say why it fails?
21:19 < Shayanjm> doesn't say why, but points me to the line of socket.io.js where it does fail:
21:19 < Shayanjm> "      xhr.send(null);"
21:19 < Shayanjm> line 1659
21:19 < Shayanjm> sec. let me hop on firefox and try and firebug it.
21:20 < mscdex> Shayanjm: is the page that's performing the xhr on the same host and port that you're trying to connect to?
21:20 < Shayanjm> yes
21:20 < Shayanjm> its a single page landing page. All initializations and everything else happens in app.js -- it's very simple
21:21 < Shayanjm> I've combed over the code, and I can't figure out why it might work with node app.js locally, but not on any remote host.
21:22 < isaacbw> heroku might have support you can access
21:22 < Shayanjm> I've asked them, they couldn't figure it out -- and it was outside the scope of what they were willing to offer
21:22 < isaacbw> https://devcenter.heroku.com/articles/using-socket-io-with-node-js-on-heroku
21:23 < isaacbw> have you looked at that?
21:23 < isaacbw> if they aren't willing to help and you can't figure it out, you might just want to switch to another paas
21:24 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
21:24 < isaacbw> but it does seem like something that shouldn't give you too much trouble
21:24 < Shayanjm> Yeah, that simply forces socket.io to use xhr-polling over websockets
21:24 < isaacbw> and are you sure that you've properly done that?
21:25 < Shayanjm> Positive. When running locally, it uses xhr-polling over that of websockets
21:25 < isaacbw> okay
21:25 < Shayanjm> the main issue here doesn't appear to be with the PaaS though
21:25 < Shayanjm> because I tried simply git cloning it onto one of my dev VPS's
21:25 < Shayanjm> just so I'm away from the heroku routing mesh
21:25 < Shayanjm> and it still won't run properly
21:25 < Shayanjm> so there's an inherent issue with the code that i'm completely missing for whatever reason
21:25 < xk_id> this simple script is writing to a file at about 1KB/1.5seconds rate. I have SSD. Should I be able to do it faster? https://gist.github.com/4650591
21:31 -!- mode/#Node.js [+b *!*@ool-4a58579e.dyn.optonline.net] by ChanServ
21:31 -!- garbagecollectio was kicked from #Node.js by ChanServ [User is banned from this channel]
21:32 < jtomasrl_> i did this to connect to the DB, but im getting undefined object https://gist.github.com/4650651
21:32 < isaacbw> Shayanjm, or, right
21:32 < isaacbw> *oh
21:33 < isaacbw> maybe share some snippets where you are instantiating socket.io?
21:33 < Shayanjm> sure. any particular paste site you want me to use?
21:34 < isaacbw> I like pastebin
21:34 < isaacbw> or a gist or whatever
21:36 < Shayanjm> So here's where I'm referencing socket.io for the twitter stream
21:36 < Shayanjm> http://pastebin.com/YFwwRZwf
21:37 < Shayanjm> and included this in my view:
21:37 < Shayanjm>     script(type='text/javascript', src='/socket.io/socket.io.js')
21:39 < isaacbw> you must have code somewhere for connecting to the server though
21:40 < Shayanjm> which server? twitter?
21:40 < Shayanjm> that's done through ntwitter (node module for twitter API)
21:41 < isaacbw> no, the socket.io server
21:41 < isaacbw> your client code, something like io.connect("http:/...")
21:42 < Shayanjm> oh, sec
21:43 < Shayanjm> http://pastebin.com/ZC9VRyTn
21:44 < Shayanjm> that's all I've got as far as socket.io and twitter is concerned
21:44 < Shayanjm> tweets.js takes what socket.io hands to it and puts it into the view
21:45 < isaacbw> localhost
21:45 < isaacbw> so you're deploying the app to a remote heroku server and then connecting to it with a local browser?
21:45 < isaacbw> localhost wouldn't work in that case
21:45 < Shayanjm> Yup
21:46 < isaacbw> localhost will mean that chrome is looking for a server on your machine
21:46 < Shayanjm> oh fucking hell
21:46 < isaacbw> ;)
21:46 < Shayanjm> wait
21:46 < Shayanjm> oh shit that's the clientside
21:47 < Shayanjm> You sir are a life saver. what would I put there instead though?
21:47 < isaacbw> so either figure out the IP address or domain and put it in by hand, or do io.connect('/')
21:47 < Shayanjm> excellent
21:48 < xk_id> If anybody knows Node.js: this simple script is writing to a file at about 1KB/1.5seconds rate. I have SSD. Should I be able to do it faster? https://gist.github.com/4650591
21:48 < Shayanjm> isaacbw: you're brilliant. thanks a lot mate
21:48 < isaacbw> np
21:48 < Shayanjm> works perfectly
21:48 < isaacbw> glad I could help
21:48 < Shayanjm> Can't even tell you how long I've been pulling out my hair for this
21:48 < isaacbw> hah
21:48 < isaacbw> it's the little things
21:48 < isaacbw> that get you
21:52 < isaacbw> what's the =?utf-8?Q? shit called in emails?
21:53 < isaacbw> it's mime encoding right? does anyone know why mimelib.parseMimeWords is just spitting out single characters?
21:55 < isaacbw> god, I hate reading RFCs
22:01 < wolfeidau> isaacbw: That stuff is scary even to those who read RFCs
22:09 < munro> is there a library for converting human time lengths, like '5s'/'2 days' into milliseconds? 
22:11 < andrepadez> Question: mongoose: if i have a model, retrieve an object from database, and try to add a new property nothing happens... why??? i'm not trying to save it to the database, only render additional info
22:20 < AliG> Hi guys
22:20 < AliG> what are some good rest/mvc apps built using node? forum software, blogs etc
22:21 < AliG> basically some "Good" CRUD apps i can check out to get an example
22:24 < icekkk> Hey noob question, if I create a restify server how do I access it from another required file?  in express you do it with app=express()
22:24 < icekkk> and that will give you access to the current created server
22:25 < Sarajevo> hey guys
22:25 < Sarajevo> any fascinating examples of node.js usage
22:25 < Sarajevo> i want to see what i can do with it
22:28 < AliG> same here sarajevo
22:28 < Sarajevo> yeah
22:35 < isaacbw> that node event where they programmed helicopters was pretty cool
22:49 < Ned_> Anyone know if it's possible to change the default bin installation path in local mode? (instead of node_modules/.bin I'd like just bin/)
22:53 < isaacbw> >> new Date("26-Jan-2013 15:41:25 +0000")
22:53 < purr> isaacbw: (object) Sat Jan 26 2013 15:41:25 GMT+0000 (UTC)
22:55 < isaacbw> weird
22:57 < isaacbw> is Node's date processing different from browser js?
22:57 < gkatsev> same Date object
22:57 < min|dvir|us> isaacbw: various browsers deal with dates differently.
22:59 < isaacbw> is there a way to have node's Date spit out a string that's guaranteed to parse in major browsers?
22:59 < isaacbw> toUTCString maybe?
23:00 < isaacbw> yea, that did the trick
23:03 < redshadowhero> >>new Date(2099, 12, 31)
23:03 < purr> redshadowhero: (object) Sun Jan 31 2100 00:00:00 GMT+0000 (UTC)
23:04 < isaacbw> redshadowhero, I am getting the date in a UTC-ish format that Node will parse but firefox won't
23:05 < isaacbw> and I'm sending it to the browser from node, so I can just use node's date object to make it more browser-friendly
23:05 < redshadowhero> It's not that. I just discovered that 12/31/2099 is apparently January 31st, 2100
23:05 < isaacbw> oh
23:06 < isaacbw> wait, what
23:06 < redshadowhero> Yeah.
23:06 < redshadowhero> the constructor's minimums with that is year, month, day.
23:06 < isaacbw> how does that work
23:06 < redshadowhero> >>new Date(2099, 31, 12)
23:06 < purr> redshadowhero: (object) Fri Aug 12 2101 00:00:00 GMT+0000 (UTC)
23:07 < redshadowhero> ...and apparently the 31st month after December 2099 is in August?
23:11 < redshadowhero> I wonder when a date skew like that starts..
23:22 < iain__> "
23:22 < iain__> I'm new to node.js -- could anyone please help with this exception "root@master:/home/ubuntu/cloudwatch-librato# node index.js --config settings.json   /home/ubuntu/cloudwatch-librato/node_modules/aws-lib/node_modules/xml2js/lib/xml2js.js:216           throw ex;                 ^ TypeError: Cannot read property 'Datapoints' of undefined
23:23 < isaacbw> it sounds like you're new to javascript
23:24 < iain__> very much so
23:24 < isaacbw> you are trying to get the property of a null value
23:24 < isaacbw> you can't do that
23:25 < iain__> just trying to get this to work :) https://github.com/ianshward/cloudwatch-librato
23:25 < robertj> are there any javascript remoting libraries out there that are worth looking into?
23:26 < icekkk> How do I serve static files using restify?
23:26 < icekkk> doesnt seem to be any tutorials
23:26 < icekkk> I want to push an html file to the client browser
23:27 < iain__> thanks isaacbw
23:29 < iain__> issac would you mind taking a look at the code here: https://github.com/ianshward/cloudwatch-librato/blob/master/lib/Metrics.js
23:29 < iain__> it seems Datapoints on line 69 is the property its trying to get that is null
23:30 < iain__> i just cant tell if its a bug or some other issue that is preventing the value from being set
23:30 < shesek> cool, I just realized you can install npm packages directly from gist - https://gist.github.com/4651267
23:30 < isaacbw> GetMetricStatisticsResult is null
23:30 < isaacbw> I can't help you beyond that
23:30 < isaacbw> or rather, undefined
23:31 < shesek> I have all bunch of small utility functions that I move around projects... would be nicer to publish them as gists and add directly to the dependencies
--- Log closed Mon Jan 28 00:00:39 2013
