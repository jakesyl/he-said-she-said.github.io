--- Log opened Sun Jun 09 00:00:37 2013
00:01 < mscdex> hrrld: doesn't that add an 'error' handler to the process.stdout stream instead?
00:01 < hrrld> mikeal: Ack, no, that's slightly different.
00:02 < mscdex> hrrld: what if you do request(...).on('error', ...).pipe(process.stdout) ?
00:05 < hrrld> mscdex: That seems to work. Joy.
00:05 < hrrld> mscdex: I can rearrange the code in question, and hopefully that will catch it if it comes up again. Thanks
00:06 < eliezerb> isaacbw, isn't that "solarized" git colors?
00:08 < gaf> if one is learning how to use mongo along with node.js, is it a good idea to learn https://github.com/aheckmann/mquery ?
00:10 <@isaacbw> eliezerb: no
00:46 <@isaacbw> gaf: mongodb queries are so easy to build already
01:02 < gaf> isaacbw, ah, ok. still my first steps...
01:03 < eliezerb> Do you already know about mongodb gaf ?
01:04 < eliezerb> ops Do you already know mongodb gaf ?
01:04 < gaf> sure, i've installed
01:04 < gaf> and i played with that book, interactive
01:04 < eliezerb> But you already know how to build querys?
01:04 < gaf> kinda
01:04 < gaf> yes
01:04 < eliezerb> So
01:04 < gaf> i was just wondering why the guy made the module :D
01:05 < eliezerb> Before you start with some framework, learn the pure syntax
01:05 < eliezerb> Ohh
01:05 < eliezerb> 10gen has some free courses
01:05 < eliezerb> about mongodb
01:05 < eliezerb> :)
01:05 < gaf> mm, yes. definitely
01:06 < gaf> my first attempt will be replicate this app http://www.kitchenpc.com/
01:07 < gaf> seems easy enough
01:07 < gaf> just fetch recipies
01:07 < gaf> and 2 way binding in the client, to update quantity of ingredients
01:44 <@isaacbw> hello beautiful
01:47 <@isaacbw> ecmascript bastards changing the generator spec
01:48 < ejexin> :o
01:48 < ejexin> how isaac
01:48 < ejexin> isaacbw*
02:57 < ckknight> if anybody's used https://github.com/visionmedia/haml.js - how do you have inline text? I want to have <dt><a href="{url}">{name}</a>: {text}</dt> but I can't figure out how to get the colon onward
02:57 < ckknight> if anybody's used https://github.com/visionmedia/haml.js - how do you have inline text? I want to have <dt><a href="{url}">{name}</a>: {text}</dt> but I can't figure out how to get the colon onward
02:57 < ckknight> whoops
02:58 < ckknight> didn't mean to spam
02:58 < chapel> ckknight: not sure what you're trying to do, or whats wrong?
02:58 < ckknight> I have no idea how the syntax would be to get it to work
02:59 < chapel> ckknight: to get what to work?
02:59 < ckknight> this is what I have now, which doesn't work: https://gist.github.com/ckknight/8470a7d19f12fd74cd7d
02:59 < ckknight> as I clearly stated, I can't figure out how to get the colon onward
02:59 < ckknight> and the documentation and examples appear to be of no help
03:00 < ckknight> apparently it's the colon messing things up
03:01 < ckknight> if I put a space before, then it works
03:01 < ckknight> that is absurd.
03:01 < ckknight> note: I cannot put a space before the colon
03:05 < ckknight> nope, nevermind, it was my mistake
03:05 < ckknight> it was occurring in a similarly-named file
03:18 < ckknight> wow, Parrot has to be one of the worst template engines I've seen
03:24 < ejexin> why ckknight
03:40 < d-_-b> hello
03:40 < d-_-b> can some one please explain to me what's node.js?
03:41 < d-_-b> how to use it etc
03:41 < gluxon> d-_-b: Node.js is cool.
03:41 < gluxon> d-_-b: Have you done JavaScript in the web browser before?
03:41 < d-_-b> I know it's the brand new web technology
03:42 < d-_-b> a little bit
03:42 < d-_-b> but just at design
03:42 < d-_-b> with node js we can use it in databases right?
03:42 <@xyxne> you can use node anywhere
03:42 < d-_-b> with the NO-Sql ones
03:42 <@xyxne> and with anything
03:42 < d-_-b> really?
03:42 <@xyxne> yes
03:42 < d-_-b> how ?
03:42 < d-_-b> i'm a newbie
03:42 <@xyxne> with the magic of programming
03:43 < ChrisPartridge> plv8 for postgres aswell
03:43 < d-_-b> can you explain to me
03:43 <@xyxne> there are a ton of good references for getting started
03:43 < d-_-b> is it easy or hard to learn?
03:43 < ChrisPartridge> google "node beginner", theres a couple free books, and a great list of resources on a stack overflow article
03:43 <@xyxne> d-_-b, it can be challenging if you aren't familiar with asynchronous programming
03:43 <@xyxne> but once you overcom that hurdle (or adopt a crutch such as promises)
03:44 <@xyxne> you should find it fairly straightforward
03:44 < d-_-b> i must absolutely learn it
03:44 <@xyxne> absolutely
03:44 < d-_-b> i know it's gonna be the next "big thing"
03:44 <@xyxne> it is imperative to your continued existence
03:45 < gluxon> d-_-b: What have you used before?
03:45 < d-_-b> i just started programming
03:45 < gluxon> Oh.
03:45 < ejexin> eloquent 
03:45 < gluxon> d-_-b: Learn standard JavaScript first then.
03:45 < d-_-b> i know c c# c++
03:45 < d-_-b> java 
03:45 < gluxon> Ok.
03:45 < d-_-b> shell scripting
03:45 < ejexin> so you didn't just start then
03:45 < gluxon> d-_-b: Go through a document showing you basics of JavaScript.
03:46 < ejexin> http://eloquentjavascript.net/
03:46 < gluxon> Just to learn simple differences from C/C++ and Java.
03:46 < d-_-b> i'll do it immediately 
03:46 <@isaacbw> faster!
03:46 <@isaacbw> you're too slow!
03:46 < gluxon> d-_-b: Your nick is familiar. Do you know why?
03:47  * ChrisPartridge makes whip noises
03:47 < mscdex> light speed too slow?
03:47 < mscdex> prepare ship for ludicrous speed!
03:47 < d-_-b> lool
03:47 < d-_-b> cuz you love music?
03:48 < d-_-b> why?
03:49 < d-_-b> i want to learn python perl and/or ruby
03:49 < d-_-b> since python have a web framework
03:49 < d-_-b> i'm thinking of learning it
03:49 < d-_-b> which one is the best?
03:49 <@isaacbw> write web servers with awk
03:49 < mscdex> node.js
03:49 < marfarma> anyone use buster for testing?  http://docs.busterjs.org/en/latest/node-testing/  -- says it's beta -- but maybe its pretty solid.  Yea or Nay?
03:50 < arnorhs> marfarma: i've never used it, and never seen a reason to use anything beyond mocha
03:51 < arnorhs> marfarma: what's the benefit beyond mocha?
03:51 <@isaacbw> I'm trying to find a domain for a new project and literally every name I've come up with is taken by a squatter
03:51 <@isaacbw> not one legitimate company
03:52 < arnorhs> isaacbw: yeah, it's always a pain
03:52 < wc-> isaacbw: i just went through the same issues
03:52 < wc-> here are what i used
03:52 < wc-> http://www.bustaname.com/
03:52 < marfarma> This is my first node app & I never used either of them - deciding which to use - buster does both browser & server, while I'd need mocha & Jasmine otherwise
03:52 < wc-> http://www.domainsbot.com/
03:52 < wc-> there was anothe rone i cant remember the name though
03:53 < arnorhs> marfarma: ah, browser testing, got it
03:54 < arnorhs> wc-, isaacbw i've used these in the past: http://wordoid.com/ http://www.impossibility.org/ http://www.coreyballou.com/five-character-domain-names/ http://www.namemesh.com/
03:54 <@isaacbw> I hate thinking of names. It takes up my brain and I can't think of anything else until I find a name I'm happy with
03:54 < arnorhs> isaacbw: naming is hard :/
03:55 < wc-> ya i finally just picked a random one, worked with it for a bit then found the one i liked
03:55 <@isaacbw> namestation is pretty good for finding domains
03:55 <@isaacbw> I haven't tried making a contest though
03:56 <@isaacbw> and of course domai.nr if you want quickfire feedback
03:59 <@isaacbw> though domai.nr has been giving me enough false positives lately to piss me off
04:45 < patrickod> is migrate a reserved script name?
04:45 < patrickod> trying to write a migration script in a package and npm doesn't even recognise that the script existst 
04:48 < cloudbender> Hello from the great white north
04:49 < cloudbender> Just checking in
04:49 < cloudbender> Nexxy ?
05:01 < cloudbender> gnite
05:02 <@mbalho> clone1018: canada?
05:02 <@mbalho> oops
05:10 < adfadsf> hello,everybody
05:18 < someprimetime> does underscore's find have any kind of callback option?
05:28 < ejexin> yes someprimetime
05:28 < someprimetime> ejexin: I'm trying to implement it with Q
05:28 < someprimetime> I just started using q, and am using Q.denodeify with some mongoose calls
05:28 < ejexin> i haven't used Q myself
05:28 < someprimetime> when I get my collection back I want to use _.find(favorites, {user_id : userId })
05:28 < someprimetime> but right now it's hanging at that portion
05:29 < ejexin> well i think you're misunderstanding what find does someprimetime
05:29 < ejexin> find is basically filter
05:29 < someprimetime> yeah
05:29 < someprimetime> that's what I want
05:29 < ejexin> you're not returning anything
05:29 < someprimetime> i'm not misunderstanding it
05:29 < ejexin> you aren't using a callback
05:29 < someprimetime> I'm trying to return my promise within the callback
05:29 < someprimetime> so yes
05:30 < someprimetime> I do need a callback
05:30 < ejexin> oh wait find just does the first one
05:30 < ejexin> so yeah you still need one though
05:30 < someprimetime> I'll just use forEach
05:55 < Vermicelli> Hi guys!
05:58 <@mbalho> yooooo
06:20 < Hellion> hi
06:29 < tds5016> hi. I need to run a subprocess and get output from it and pass output to it from the parent.
06:30 < tds5016> is that possible to do with node?
06:33 < ChrisPartridge> tds5016: cp.spawn(),  pipe stdout, to process.stdout
06:34 < tds5016> ChrisPartridge: that'll let me pass in input and will run updates when output is retreived?
06:40 < tds5016> ChrisPartridge: also, is it possible to forward the stdin to something I can write to?
06:40 < accc> mornin'
07:19 < ckknight> ejexin: it's broken in several ways, is extremely inefficient, and there is no way to escape text within the template.
07:19 < ejexin> are you being forced to use it?
07:21 < ckknight> ejexin: no, I'm assessing and benchmarking template engines
07:21 < ejexin> oh good
07:21 < ckknight> I wrote my own and have been disappointed at the benchmarking suites
07:22 < ckknight> lack of varied input, no checking of validity, lack of tests for partials and inheritance
07:23 < ejexin> which is yours?
07:23 < ejexin> is it published?
07:23 < ckknight> ckknight.github.com/egs/
07:24 < ckknight> as far as my benchmarks are showing, it's currently at the top of the charts for escaped and unescaped normal testing without any partials or inheritance, but performance suffers a bit once that comes in
07:24 < ckknight> I'll be working on that next
07:24 < ejexin> that's pretty interesting
07:25 < ckknight> I do it in a way where when you request a partial, you actually yield a promise to get the partial's contents back
07:25 < ckknight> and then keep going
07:25 < ejexin> "let mutable y = 5" 
07:25 < ejexin> looks like rust
07:25 < ejexin> :P
07:25 < ckknight> so there's some context passing
07:25 < ckknight> ejexin: I didn't really take any inspiration from Rust that I know of
07:25 < ckknight> when I wrote GorillaScript
07:25 < ejexin> yeah was a coincidence i imagine
07:25 < ejexin> but that's how it looks in rust
07:29 < someprimetime> anyone using Q?
07:29 < someprimetime> (in here right now)
07:35 < ckknight> ejexin: feel free to play around with it :
07:35 < ckknight> :)
07:38 < ejexin> ahh
07:38 < ejexin> woahh
07:42 -!- mode/#Node.js [-b *!*@172.245.9.198] by ChanServ
08:00 < diverdude> hi, If i have code like this: http://paste.ubuntu.com/5747556/ Does that mean that gst-launch-0.10 is invoked once for each client request?
08:02 < ckknight> diverdude: correct
08:03 < diverdude> ckknight, hmmm ok...the problem is that i need gst-launch-0.10 to be run only once...and serve to many clients
08:03 < ckknight> okay, so restructure it to do that
08:03 < ckknight> have it only launch the first time
08:03 < ckknight> or as-needed
08:03 < ckknight> and keep it around
08:03 < diverdude> ckknight, how can i do that?
08:04 < ckknight> by only launching once?
08:05 < aandy> ckknight: that's not very helpful. 
08:05 < ckknight> I'm honestly not sure how to help in this case
08:05 < ckknight> he needs to launch only once
08:05 < aandy> diverdude: for instance, you could launch it in your .listen() (but then it should be at the bottom, after your events)
08:05 < ckknight> so you do that by saving a reference to the gst thing and using that from each connection
08:05 < aandy> you could also do it in the request as you've done now, and use a global bool to check if it's been launched
08:06 < diverdude> aandy, yeah ok so wrap line 32 to 55 with if(!hasbeenlaunched)
08:06 < aandy> that being said, i'm not familiar with that app, so i don't know how it should be served to multiple clients (e.g. if it's video, perhabs you need to send specific packages first upon connecting)
08:07 < aandy> diverdude: sure, that'd work, but could also be error prone (if it exists abruptly then you'd need to reset the hasbeenlaunched)
08:07 < diverdude> true
08:07 < aandy> but that's the basic idea of what ckknight said
08:08 < diverdude> hmm
08:09 < diverdude> ok, thanks for advice...I will reflect a bit on this :)
08:09 < aandy> you'd want to keep a reference to res' also
08:09 < diverdude> it says tcpServer.maxConnections = 1; does that not mean that only 1 client can be connected?
08:09 < aandy> or set up more events as the requests come in ( if (hasbeenlaunched) )
08:10 < aandy> http://nodejs.org/api/net.html#net_server_maxconnections
08:11 < diverdude> heh "Set this property to reject connections when the server's connection count gets high."
08:11 < diverdude> what is "high"? :D
08:11 < aandy> in fact, that is not encouraged (says so on both net and child_process man pages) ;)
08:12 < aandy> i could say, never used it
08:30 < macbn> hello
08:31 < macbn> is it possible to pass a variable to include in jade ?
08:31 < diverdude> aandy, How does that script actually work? It sets a node.js server up on port 9001, and then on incomin clients it also sets up a gstreamer-tcpserver up on port 9001. How can it set up 2 servers on the same port?
08:31 < macbn> like in my sub view that i want to include wants to output a variable called x for example, however it was passed as xx from the routes res.render
08:32 < ningu> macbn: huh?
08:32 < SomeoneWeird> macbn, i doubt it, needs to be the same
08:32 < ningu> macbn: so why not just refer to it as xx?
08:33 < gildean> macbn: yes, you can set it in the first template like - var x = xx
08:33 < ningu> macbn: you should change its name before you pass it to jade if you want it to be consistent
08:33 < gildean> at least i think so
08:33 < ningu> gildean: you can just do, x = xx
08:33 < macbn> so there is no specific way in jade?
08:33 < ningu> macbn: no specific way to do what?
08:33 < macbn> like include something (parameter)
08:33 < ningu> macbn: no
08:33 < macbn> oh
08:34 < macbn> actually its not different name its different level of nested object
08:34 < ningu> it would be a nice feature but it doesn't exist for performance reasons afaik
08:34 < macbn> result = { data: { xx : } and result = {xx :}
08:34 < ningu> macbn: use a mixin?
08:35 < macbn> is it better way to solve this problem?
08:35 < macbn> ill read mixin
08:35 < ningu> maybe, don't know what you're doing, really
08:36 < macbn> oh mixin looks nice
08:36 < macbn> but i gotta define the mixin in the same file?
08:36 < ningu> macbn: nah, you can include the file that defines the mixins
08:36 < macbn> include and call be mixin
08:36 < diverdude> How does this script http://paste.ubuntu.com/5747556/ actually work? It sets a node.js server up on port 9001, and then on incoming clients it also sets up a gstreamer-tcpserver up on port 9001. How can it set up 2 servers on the same port?
08:36 < macbn> so one extra line haha
08:37 < ningu> macbn: yeah, pretty much
08:37 < macbn> ok then ill use mixin
08:37 < macbn> thank you
08:43 < diverdude> aandy, are you there?
08:45 < RLa> wut, can't download free podcasts from itunes without using itunes software?
08:45 < RLa> apple sucks
08:45 < kuja> cool
08:48 < aandy> diverdude: on the same interface, the same port? it can't
08:48 < diverdude> aandy, but thats what its doing
08:48 < aandy> i mean, both can't bind to it. how and what gst uses the port= argument for, i don't know
08:48 < RLa> god damn, sqlite does not like long transactions
08:49 < diverdude> aandy, it binds to that port
08:49 < aandy> really depends on the software. node listening on 0.0.0.0:9001, the other listening on 127.0.0.1:9001 ?
08:50 < diverdude> aandy, the gstreamer server is listening to localhost:9001, so node is listening to 0.0.0.0:9001?
08:51 < aandy> in a sense, yes. with no host, node listens on INADDR_ANY
08:51 < diverdude> hmm ok...and INADDR_ANY is 0.0.0.0 ?
08:51 < aandy> so, say you're on LAN. 192.168.0.2:9001 = node, from 192.168.0.2 it has 127.0.0.1:9001 as gst (which is not available on LAN)
08:52 < diverdude> ah ok
08:52 < aandy> diverdude: right
08:52 < aandy> the question then becomes if gst can even bind (as node gets there first) ;)
08:54 < diverdude> aandy, but would it be possible to run gst seperatly, and then have node hook up to it instead of having node spawning it?
08:57 < macbn> is there any good podcasts?
08:57 < macbn> i like to code while listening to podcast
08:59 < aandy> diverdude: if you're asking if you can pipe a connection from gstreamer (node connecting to it internally, then piping to all active res), then yes
08:59 < aandy> http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options
09:02 < ningu> macbn: nodeup.com
09:02 < aandy> macbn: http://www.wtfpod.com/
09:02 < macbn> i listen to all the latest ones
09:03 < macbn> the moderator in nodeup talks like hes on drugs, no offense its just kind of funny
09:04 < macbn> my favorite is developer's lifehttp://thisdeveloperslife.com/
09:08 < RLa> why people bring me computers to repair, i'm programmer not computer repairman :/
09:09 < sinclair|net> RLa: you're a programmer?
09:10 < RLa> more programmer than repairman, i do not even have hw tools or windows install disks ...
09:11 < sinclair|net> RLa: ever used a windows boot disk?
09:12 < diverdude> aandy, do you know if there is an example for piping node.js requests to tcp socket?
09:12 < sinclair|net> Havvy: where you at?
09:12 < RLa> sinclair|net, yeah, sometimes i have to reinstall windows for friends
09:13 < RLa> people now want windows 7 for free
09:13 < RLa> i'm sick of that
09:13 < squeakytoy> i am just cuurious. I am thinking of breaking down my node solution (a website) into smaller node solutions. Hm, what is the best protocol to use, if I want to talk to between two node applications?
09:13 < squeakytoy> internally
09:14 < ningu> squeakytoy: on the same server or not?
09:14 < ningu> squeakytoy: anyway, I would use something like dnode
09:14 < squeakytoy> dnode, ill look into it
09:14 < macbn> anyone here uses facebook react?
09:15 < macbn> http://facebook.github.io/react/
09:15 < sinclair|net> ningu: under the hood, what does dnode use to message between instances?
09:16 < ningu> sinclair|net: you can wrap it with any stream
09:16 < ningu> sinclair|net: if you mean the protocol itself, https://github.com/substack/dnode-protocol
09:16 < squeakytoy> ningu, thanks
09:16 < sinclair|net> ningu: would be nice to have other things implement that protocol
09:17 < ningu> sinclair|net: it's been done
09:17 < sinclair|net> ningu: what platforms?
09:17 < ningu> trying to remember
09:17 < ningu> https://github.com/substack/dnode "dnode in other languages"
09:18 < sinclair|net> ningu: hmm
09:18 < ningu> I'm glad that people are finally starting to realize (mostly because of substack and a couple others) that you should design apis to work with basic abstractions like streams if possible
09:19 < sinclair|net> ningu: i don't really see a reason not to use streams
09:19 < ningu> well it isn't that people decide they don't like streams, so much as they don't make their apis as general as they could
09:19 < ningu> they define custom events that aren't compatible, etc.
09:20 < ningu> or they just hard code a particular layer like http
09:20 < sinclair|net> ningu: who is doing that?
09:21 < ningu> it's not really anyone's fault per se -- it's actually really hard to come up with pieces of code that are useful and highly reusable
09:21 < sinclair|net> ningu: not really
09:21 < ningu> sinclair|net: for example, https://github.com/bluesmoon/node-line-input-stream
09:21 < ningu> it emits the 'line' event so you can't actually use it in the middle of a pipeline
09:22 < ningu> as opposed to the more general https://github.com/jahewson/node-byline
09:22 < RLa> sinclair|net, http://www.cracked.com/blog/6-reasons-guy-whos-fixing-your-computer-hates-you/ <- i will now post this on my fb wall whenever someone brings me a computer to repair
09:22 < ningu> but I think that last one is not compatible with streams2
09:22 < sinclair|net> ningu: i don't know much about streams2
09:22 < RLa> today i got a lenovo laptop that's completely dead
09:23 < ningu> sinclair|net: executive summary, you can choose 'push' or 'pull' mode for your streams, old streams just have 'push'
09:23 < ningu> it also makes transform streams much easier
09:23 < sinclair|net> ningu: what do you mean push or pull?
09:24 < ningu> sinclair|net: whether you want to have 'data' events and be forced to react to them, or whether you want to read from the stream when you feel like it
09:24 < ningu> both models are useful, depends on what you are doing
09:24 < sinclair|net> ningu: is that through the 'readable' event?
09:24 < ningu> yes
09:25 < ningu> so you can't do it *whenever* you feel like it, but you don't have to respond immediately to 'readable'
09:25 < sinclair|net> ningu: i have had problems with readable
09:25 < ningu> well, it's a little hard to wrap your head around
09:25 < ningu> but I have not found any actual bugs so far
09:25 < sinclair|net> ningu: readable network streams were.... problematic
09:25 < ningu> most were fixed early in 0.10
09:26 < RLa> sinclair|net, you get problem when you cannot use data as fast as it's coming in from the stream?
09:26 < ningu> sinclair|net: if 'data' is working then just use that
09:26 < sinclair|net> RLa: i found it difficult to know exactly when i was at the end of the stream
09:26 < RLa> oh
09:27 < ningu> streams still emit 'end'
09:27 < ningu> in either mode
09:27 < sinclair|net> RLa: i can't remember the details, i just went back to data and end events
09:27 < ningu> in readable/new mode, you have to call read() at some point for each readable event, I believe
09:27 < sinclair|net> ningu: so, in a typical scenario, i would be more used to reading and writing from streams whenever
09:27 < ningu> actually, no
09:27 < RLa> ningu, is end emitted when error is also emitted?
09:28 < RLa> i remember having trouble with that
09:28 < ningu> RLa: not sure
09:28 < ningu> I think maybe it depends
09:28 < ningu> the docs should be improved for that, probably
09:28 < sinclair|net> ningu: in "other' platforms, being able to read and write to a stream is the norm, i don't see it as a thing that hard to get my head around
09:29 < ningu> sinclair|net: it's the variations of the evented model that are hard to get your head around
09:29 < sinclair|net> ningu: i havent had a need to use anything other than 'data' 'end', but mostly i pipe data around
09:29 < ningu> but it allows you to implement control flow that you couldn't do otherwise
09:30 < sinclair|net> ningu: by reading x bytes, taking some action, then reading another x bytes, do something, etc?
09:30 < sinclair|net> ningu: for example, reading a 32 byte header from a binary asset?
09:30 < ningu> sure
09:30 < ningu> that's one example
09:31 < sinclair|net> ningu: well, you could do that without streams2, but it would be awkward
09:31 < sinclair|net> ningu: its not really all that difficult is it?
09:31 < ningu> I also used it once to decide what to do based on whether there was an error opening the stream or not
09:31 < ningu> with 'data' events it's too late to change the branch, you already have one event to handle
09:32 < sinclair|net> ningu: couldn't you just use the 'error' event?
09:32 < ningu> sinclair|net: for the error case, yes
09:32 < sinclair|net> ningu: wouldn't a failed stream also get called on a 'error' event?
09:32 < ningu> the trick one is the success logic which you only want triggered on the first 'readable' event -- specifically I wanted to pipe a stream only if there was at least one successful read
09:32 < ningu> with 'data' you lose the first chunk on the pipe
09:32 < ningu> tricky one*
09:33 < sinclair|net> ningu: well, streams are usually atomic, as in you intent to treat the entire stream as a single unit, not a partial thing, there for, wouldn't you just 'data' and if 'error' discard the data in its entirety ?
09:34 < ningu> sinclair|net: you can't discard data that you've already piped
09:34 < thealphanerd> anyone here play with emscripten?
09:35 < sinclair|net> ningu: you can unpipe
09:35 < ningu> sinclair|net: yes, but what's sent is sent
09:35 < sinclair|net> suppose so
09:35 < ningu> and it writes the http header response before the pipe, too
09:35 < ningu> and you can't undo that either
09:35 < ningu> in the error case I need to return different headers
09:35 < sinclair|net> ningu: so why would i ever want to push a chunk of a readable stream?
09:36 < sinclair|net> oh, never mind, its for Readable implementors
09:36 < ningu> that's in the implementation, you push when data is available
09:36 < sinclair|net> makes sense
09:36 < ningu> you unpush to give it back
09:36 < ningu> you might unpush if you need to look ahead to know if you want the data or not
09:37 < sinclair|net> ningu: wanna see some microsoft fail ?
09:37 < sinclair|net> http://channel9.msdn.com/Events/TechEd/NorthAmerica/2013/Key01#fbid=SQM7rnWsaES
09:37 < ningu> not if it means installing silverlight
09:39 < sinclair|net> ningu: i couldn't care less about microsoft technologies post this keynote 
09:40 < diverdude> Anybody knows an example for piping node.js requests to tcp socket?
09:41 < sinclair|net> var server = http.createServer(function(req, res) {
09:41 < sinclair|net> var socket = new net.Socket();
09:41 < sinclair|net> socket.connect(port, host);
09:42 < sinclair|net> req.pipe(socket);
09:42 < sinclair|net> });
09:42 < ningu> diverdude: they're all just streams :)
09:43 < diverdude> sinclair|net, nice...is that all the code needed in the entire script?
09:44 < sinclair|net> diverdude: should be, tho you might to put the req.pipe(socket) inside a "connected" event
09:45 < ningu> diverdude: just experiment with it, but yeah, it's about that simple
09:45 < diverdude> sinclair|net, hmm i see. nice
09:45 < sinclair|net> diverdude: its not difficult, i hardly no nodejs at all
09:45 < sinclair|net> *know
09:49 < sinclair|net> Havvy: where art thou?
09:50 < sinclair|net> oh nice, active directory is out of beta and live on azure now
09:50 < diverdude> sinclair|net, and if i want server to run on different port?
09:51 < sinclair|net> diverdude: ?
09:51 < sinclair|net> i dont know what you mean
09:59 < diverdude> sinclair|net, i have this now: http://paste.ubuntu.com/5747810/ but when i access the site its just hanging
10:04 < diverdude> I have this node.js server: http://paste.ubuntu.com/5747827/ which seems to get parsed ok. However, when i connect to the server nothing happens. It just hangs, loading the page. Am I missing something?
10:08 < gildean> diverdude: you pipe the request to the socket, but nothing is coming back from the socket to the response
10:09 < gildean> you should be able to to do req.pipe(socket).pipe(res);
10:11 < diverdude> gildean, hmm ok...something ore happened now....at least chrome understands that its a video being sent now....but no video is displayed :/
10:12 < diverdude> gildean, and i know the videostream is working
10:13 < gildean> diverdude: what does the net server look like?
10:15 < diverdude> gildean, what do you mean?
10:16 < gildean> diverdude: the serve listening on port 5000 you're connecting to
10:16 < gildean> *server
10:16 < sinclair|net> gildean: did you hear that azure now lets you spin up and down VM's, and downed VM's do not incur a cost
10:16 < sinclair|net> gildean: now, that is cool
10:17 < diverdude> gildean, yeah thats aa server written in c using gstreamer basically
10:17 < diverdude> gildean, i have verified that this server works by connecting to it locally from another tcp socket
10:17 < sinclair|net> gildean: additionally, VM's only cost like 9 cents an hour
10:18  * sinclair|net goes to spin up 900 VM's
10:19 < sinclair|net> gildean: azure has some pretty good pricing models going now, like being able to spin up 100's of VM's for map reduce jobs and only pay $100
10:19 < sinclair|net> for 10 hours compute
10:20 < diverdude> gildean, any ideas?
10:20 < gildean> sinclair|net: that is pretty cool, i agree
10:21 < sinclair|net> gildean: they really seem to be pushing the elastic scale thing this year on azure, 
10:22 < Trudko> Guys i am testing passport js and i have problem with routing I always get redirected to failureredirect: bbb eventhough I am returing done(null, user)  and alert test is never run http://jsbin.com/ekoqaz/1/edit
10:30 < gildean> diverdude: yeah, change the req.pipe(socket).pipe(res); to just: socket.pipe(res);
10:31 < gildean> diverdude: the http-request going to a plain tcp-server messes it up
10:32 < ckknight> If anybody cares to check this out, I made a reasonably comprehensive template benchmark suite: https://github.com/ckknight/template-bench
10:32 < diverdude> gildean, AWESOMENESS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
10:34 < diverdude> gildean, hmm does it only allow a single connection?
10:36 < gildean> diverdude: which part? the http should be able to handle a big number of connections
10:37 < gildean> diverdude: i quickly wrote this as a test, it works fine on multiple connections: https://gist.github.com/gildean/5743076
10:39 < diverdude> gildean, hmm ok you have 2 servers?
10:39 < diverdude> ahhh
10:39 < diverdude> i get it
10:40 < gildean> diverdude: yes, i thought that was your case as well
10:41 < gildean> but just instead of the gstreamer-server i just wrote the simplest tcp-server which streams a file to the connection
10:41 < diverdude> yeah indeed
10:41 < diverdude> hmmm weird...i copied your code...and seems node.js server needs to be restarted before i can see stream
10:42 < diverdude> like, first connection works...everything after that dont
10:42 < diverdude> even if i close first connection
10:44 < diverdude> gildean, hmmm ok if i make a session in chrome and open a new in ff then i can have 2
10:44 < diverdude> until after a while the ff session gives up
10:44 < gildean> diverdude: that's strange, i can open as many tabs on chrome and they work
10:46 < diverdude> same in FF,,,,first one works fine...but additional sessions will not load
10:48 < diverdude> 1 session in ff, 1 in chrome works
10:50 < diverdude> ill try and throw it on server machne...maybe that helps :)
10:50 < diverdude> gildean, thank you'
11:01 < gildean> diverdude: np
11:05 < eugeneware> is there a way to use amd modules from within browserify?
11:15 < gildean> eugeneware: i think there's at least a couple of modules that can do that, i saw this just the other day: https://github.com/jaredhanson/deamdify
11:16 < eugeneware> gildean: thanks. I'll check it out. very frustrating world of client-side modules we live in! :-)
11:19 < Trudko> Still no idea why my authetication fails http://jsbin.com/ekoqaz/1/edit
11:21 < eugeneware> gildean: Thanks heaps. That's exactly what I was after!
11:22 < gildean> eugeneware: np
11:29 < SomeoneWeird> Trudko, your .serializeUser and .deserializeUser are broken
11:29 < SomeoneWeird> look at the examples
11:32 < Trudko> SomeoneWeird: what does serialization got to do with this? Isnt that used only for session purposes?
11:33 < SomeoneWeird> hm, not sur
11:33 < SomeoneWeird> e
11:55 < Trudko> it has to be something else
12:40 < chrisb125> Could anyone recommend any beginner'ish-friendly open source node projects I could look into? Feel like I've read a million tutorials/books on "the basics" and not getting anywhere, so want to start trying to pick apart some 'real' code?
12:42 < eugeneware> chrisb125: read through some of substack's simpler modules. Easy to get your head around, and a good intro about how to build micro-libraries.
12:45 < chrisb125> Thanks, will check it out
14:09 < mikolalysenko> Anyone here know anything about codemirror?
14:10 < mikolalysenko> I am trying to figure out why the cursor in this demo is screwy:  http://mikolalysenko.github.io/implicit-studio/index.html
14:10 < mikolalysenko> it doesn't look like that if I run it with the normal css files
14:10 < mikolalysenko> (also note that demo requires webgl)
14:18 < nathan7> mikolalysenko: Cool stuff (I have no idea about your question)
14:18 < nathan7> mikolalysenko: Have you checked out ImplicitCAD? implicitcad.org (and the blog post that spawned it http://christopherolah.wordpress.com/2011/11/06/manipulation-of-implicit-functions-with-an-eye-on-cad)
14:37 < euoia> watching http://www.youtube.com/watch?v=tZWGb0HU2QM - anyone have an opinion on dustjs?
14:40 < mikolalysenko> nathan7: haven't seen it before, but the idea of doing CAD with implicits is super old
14:44 < nathan7> mikolalysenko: Mhm
14:44 < nathan7> mikolalysenko: ImplicitCAD just happens to be a lovely impl of it
14:47 < mikolalysenko> nathan7: yeah, also I managed to fix the cursor bug in the demo
14:47 < mikolalysenko> http://mikolalysenko.github.io/implicit-studio/index.html
14:47 < mikolalysenko> but somehow uglifyjs stopped working/started breaking stuff...
14:47 < mikolalysenko> next thing I want to figure out is how to make the editor panes resizable
14:52 < ApXaHgheJI> hi, did some one work with ZombieJS Module ?
14:52 < ApXaHgheJI> I have save a session(cookie) in filetxt, but can't load him back next time :(
15:15 < olalonde> yo!
15:15 < stride_> no.
15:16 < olalonde> would be nice if github showed % of merged pull requests. so you dont waste time doing a pull request for a dead project
15:32 < aschmitz> I have a super trivial HTTP server that appears to leak memory in v0.10.10. Can anybody take a look and see if there's anything I'm missing? https://gist.github.com/aschmitz/5743935#file-server-js
15:33 < aschmitz> That gist also contains code to take a heapdump after a bunch of requests and search it for the object that seems to be accumulating references. I haven't looked into the heapdump format enough to see if there's a way to see where it's being allocated yet.
15:45 < aschmitz> (I get the same results running the Hello World example on the main page after hitting it with a bunch of requests via ab, memory continues to grow slowly.)
15:47 < witquicked> so, I want "make install" to include the headers, but am unclear how I would do that...
16:05 < niggler> dumb git question: is there a way to pull just a subdirectory from a git repo?
16:06 < nathan7> niggler: In theory you should be able to check out just a subtree
16:06 < niggler> analogous to svn co?
16:06 < zomg> In theory?
16:06 < zomg> I don't think it works in practice :P
16:07 < niggler> apache POI for example has an SVN and a git repo
16:07 < niggler> if i just want to grab their test files i can svn co http://svn.apache.org/repos/asf/poi/trunk/test-data/spreadsheet/
16:07 < niggler> their git endpoint is http://git.apache.org/poi.git
16:08 < niggler> the analogous command (git clone ….) fails 
16:08 < nathan7> ..
16:08 < nathan7> because SVN works entirely diferently
16:08 < nathan7> *differently
16:08 < niggler> i understand that svn works differently from git :)
16:08 < nathan7> in git, a commit is an object that refers to a tree (a directory)
16:09 < niggler> sure
16:09 < nathan7> a tree is a mapping of names to blobs (files) and trees
16:09 < nathan7> so in theory you could grab a commit, find the tree you want to check out
16:09 < nathan7> and check it out to your working dir
16:10 < niggler> but you'd have to get the entire repo for that
16:11 < Trudko> Guys I have one program connecting to mongo db . It is simple login page when I log in, page stucks on waiting on localhost and I would like to know why. I dont see any useful info in console.
16:11 < Trudko> i guess there is some connction problem most likely db, but i would expect some error message about it.
16:11 < meltz_> hello
16:11 < meltz_> anyone got any ideas?: http://stackoverflow.com/questions/17005313/trouble-with-automatic-failover-with-sharded-and-replicated-mongodb-setup
16:14 < nathan7> niggler: not quite
16:14 < nathan7> niggler: you'd have to traverse the trees at fetch time
16:32 < Ripper> Hello
16:32 < Ripper> I'm new to Node.js
16:33 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:33 < Ripper> Is it possible to built Web App using Node.js ?
16:33 < gabrielstuff> yes
16:33 < gabrielstuff> currently doing it :)
16:33 < Ripper> Like Stock Exchange
16:34 < arnorhs> Ripper: what do you mean like stock exchangeÞ
16:34 < arnorhs> ?
16:35 < Ripper> arnorhs There is a requirement building a stock exchange application .. So i'm asking can i use Node.js for that >?
16:35 < arnorhs> Ripper: you can use node.js to build any kind of an app
16:36 < arnorhs> Ripper: but you can probably also use anything else too
16:36 < Ripper> arnorhs i asked because more then 10 Milliion people will use it.
16:37 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:40 < arnorhs> Ripper: well, 1+ billion people use Facebook
16:41 < Ripper> Facebook is done using PHP
16:41 < Ripper> not Node.js
16:43 < Havvy> It's easier to make Node.js scale than it is to make PHP scale.
16:44 < mscdex> i thought facebook used their modded PHP?
16:45 < mscdex> hiphop
16:45 < RLa> Ripper, FB PHP != PHP
16:45 < VapidWorx> they started with php originally, but as they scaled they rewrote huge parts of it to suit their needs
16:45 < RLa> yes, they compile php into c++ or something fancy like that
16:45 < Ripper> huh ? ...RLa
16:46 < RLa> i think they do things that php's jit should do
16:46 < mscdex> http://en.wikipedia.org/wiki/HipHop_for_PHP
16:47 < jax> hello
16:47 < jax> can somebody just give me a short hint what npm is for and how i use it within multiple projects?
16:48 < mscdex> jax: it's for installing packages and their dependencies
16:48 < mscdex> s/packages/modules/
16:48 < jax> so i'm working on a project and would like to install Hogan.js from twitter
16:48 < jax> do i just go to my js directory and do npm install hogan.js
16:48 < jax> or what is the correct way to use it?
16:49 < mscdex> if that's the name of it on npm
16:49 < jax> or am i supposed to be installing something system wide for projects to link to?
16:49 < mscdex> it is, so yeah just `npm install hogan.js`
16:49 < jax> ok
16:49 < jax> that then puts it in node_modules/.. something right?
16:49 < jax> what is the purpose of this?
16:50 < mscdex> it puts it in the nearest node_modules directory, whether that's the current directory or some parent directory
16:50 < mscdex> if npm doesn't find one, it creates it in the current directory
16:50 < jax> that's what it did, because it is the first time i ran npm
16:50 < jax> but it installs the entire package, not just a js file. what is the correct way to then access the js file within the project
16:50 < mscdex> the purpose of it is to keep your dependencies "bundled"
16:51 < mscdex> jax: http://twitter.github.io/hogan.js/
16:51 < mscdex> jax: http://nodejs.org/docs/latest/api/modules.html
16:52 < Havvy> jax: Note that npm is for Node.js, and not for web code.
16:52 < mscdex> Havvy: not anymore ;-)
16:52 < Havvy> Though Substack made Browserify (see ##browserify if you are interested) for using NPM for web code.
16:53 < jax> .. i just wanted to get Hogan.js for inclusion in my webpage :D
16:54 < jax> am i on the wrong path
16:54 < Havvy> The script is at <script src="http://twitter.github.com/hogan.js/builds/2.0.0/hogan-2.0.0.js"></script>
16:54 < jax> so basically i just could have wget http://twitter.github.com/hogan.js/builds/2.0.0/hogan-2.0.0.js instead of installing npm
16:54 < Havvy> Yes.
16:54 < Havvy> Or link to it directly.
16:55 < Havvy> Since github isnt' going anywhere soon.
16:55 < niggler> github allows that?
16:55 < niggler> i thought they stopped the practice
16:55 < mscdex> why not?
16:55 < mscdex> people host blogs on github
16:55 < niggler> oh wait nvm they stopped people from using raw.github.com
17:12 < gabrielstuff> hey how you guys would do to pass current user to a method in order to associate a file upload with the current user session
17:12 < gabrielstuff> i'm using 
17:12 < gabrielstuff> https://github.com/aguidrevitch/jquery-file-upload-middleware
17:13 < gabrielstuff> i do not see which call back would allow me to do so
17:56 < Stumbler> When I ping a server, and get the response.  The time value represents the round trip.   Is it usually safe to assume that the rout there is roughly the same length of time as the rout back?
17:56 < niggler> no not necessarily
17:57 < niggler> but it depends on application
17:57 < niggler> if you are operating at microsecond level its probably a bad idea
17:57 < Stumbler> Can the ratio have a significant varriance?
17:57 < niggler> imagine you are on a phone
17:58 < niggler> what are you trying to do Stumbler ?
17:58 < Stumbler> What I would like to do is synchronize two clocks over a network.   In an ideal world, syncing to the millisecond would be grand, but I don't expect to ever be able to do that.
17:59 < nathan7> Stumbler: Look at NTP
17:59 < niggler> have you looked into an established protocol like ntp/ptp?
17:59 < nathan7> Stumbler: Figure out what they do there
17:59 < Stumbler> I have not, but since you're pointing me in that direction, I'll check it out. :D
17:59 < Stumbler> thanks
18:01 < ericelliott> Node password hash utility: https://github.com/dilvie/credential -- thoughts?
18:02 < Havvy> I've not heard of it.
18:02 < ericelliott> Havvy: Of course not. I published it a few minutes ago.
18:02 < Havvy> Ah.
18:03 < ericelliott> Looking for feedback.
18:03 < ericelliott> I wrote it for my book.
18:03 < niggler> good to see you included the license this time ericelliott :P
18:03 < ericelliott> niggler: I thought of you.
18:05 < stagas> what was that thing that visualized how code is executed step by step
18:06 < ericelliott> trace.gl?
18:06 < rhalff> any of you use Q? .all() returns an array of resolved messages, since I don't really care if one or two fail I switched to allResolved(), but the later is returning an array of promises, is that a bug or by design?
18:06 < ericelliott> http://trace.gl
18:08 < ericelliott> rhalff: allSettled lets you see the promise so that you can inspect the state.
18:08 < niggler> what version of node are you targeting for your book?
18:08 < Stumbler> What crypto algorithm does node use?  I had never looked into it before now.
18:08 < stagas> ericelliott: no it wasn't that, the one I'm talking about drew an algorithm with boxes and highlighted the piece of code as you clicked next, next etc
18:08 < niggler> stagas the one that used source maps?
18:09 < stagas> niggler: I think so
18:09 < ericelliott> rhalff: To get the values, just grab results[n].value
18:09 < rhalff> ericelliott, yeah logical maybe, but if all() returns an array of about 100 values, getting 100 promises back instead isn't very nice :-)
18:10 < niggler> stagas http://sokra.github.io/source-map-visualization/#simple-coffee
18:10 < rhalff> ericelliott, ok thanks
18:10 < niggler> i remember seeing it from a moz dev blog
18:10 < ericelliott> rhalff: var values = results.map(function (result) { return result.value; });
18:11 < stagas> niggler: no not that also :( but it was similar in the way it highlights
18:11 < ericelliott> rhalff: see, not so bad. =)
18:11 < AphelionZ> Does anybody here have experience querying the google analytics API with an API key?
18:11 < niggler> I've seen it done for regex
18:12 < AphelionZ> I'm using the node-googleanalytics module but im unsure if it supports sending an API key along with requests
18:12 < ericelliott> rhalff: you should probably add some logic to filter out the unresolved promises. ;)
18:12 < rhalff> ericelliott, ok thanks, I never use map. Complain again: maybe Q.resolveAll(myArray, function(rejectedPromise) { }) would be easier.
18:13 < ericelliott> rhalff: Any reason you never use map?
18:13 < rhalff> ericelliott, not really..
18:13 < ericelliott> rhalff: I highly recommend it.
18:13 < ericelliott> It's very handy.
18:14 < niggler> asses.map(kick)
18:14 < Havvy> niggler: No...
18:14 < Havvy> asses.forEach(kick)
18:14 < niggler> there's a difference though
18:14 < ericelliott> yeah.. or var bruises = asses.map(kick);
18:15 < ericelliott> niggler: the difference is you shouldn't use map for side-effects, whereas forEach is designed for side-effects.
18:15 < ericelliott> if you're using map, you should be collecting and making use of the results.
18:15 < niggler> if you wanted to kick asses and take names
18:16 < niggler> asses.forEach(kick) wouldn't allow you to take names
18:16 < Havvy> asses.forEach(kick).map(takeNames)
18:16 < ericelliott> oh. yeah. that's much better. var names = asses.map(kick);
18:16 < ericelliott> Havvy: no =P
18:16 < niggler> how does that work Havvy ?
18:16 < niggler> i thought forEach doesn't return anything
18:17 < Havvy> >> [].forEach(function () {})
18:17 < purr> Havvy: undefined
18:17 < Havvy> :/
18:17  * niggler pets Havvy 
18:17 < Havvy> Why can't forEach return this?
18:18 < niggler> http://es5.github.io/#x15.4.4.18
18:18 < niggler> step 8: return undefined
18:18 < niggler> it explicitly mandates that undefined is returned, not 'this
18:18 < ericelliott> forEach is lame.
18:18 < ericelliott> Stop using it.
18:18 < ericelliott> =)
18:19 < ericelliott> There's 'fun' in functional, but there's no fun in side-effects
18:19 < kinabalu> is there any great method of finding out where my node.js process is hanging?  i must have a callback that is waiting ... but debug mode doesn't connect
18:20 < ericelliott> </lame-blanket-statement>
18:20 < ericelliott> kinabalu: http://trace.gl
18:20 < niggler> side effects are for the cool kids
18:20 < ericelliott> If I could collect a dollar for every time I refer somebody to trace.gl... I'd be rich.
18:20 < k_89> node
18:20 < niggler> kinabalu are you using --debug or debug?
18:20 < k_89> i don't even get why is it so famous
18:21 < k_89> 950 irc members
18:21 < niggler> k_89 javascript is programming for the lulz
18:21 < kinabalu> niggler: was kill -USR for the debug ... i guess i can use node debug first
18:21 < stagas> ericelliott: niggler: found it http://toolness.github.io/slowmo-js/ also this one http://int3.github.io/metajs/
18:22 < ericelliott> k_89: because JavaScript is the most used programming language in the world, and Node is the best server-side JavaScript platform, and it also attracts pragmatic people from other languages who want to get more work done with fewer resources for applications that are io bound.
18:22 < k_89> why not just ue something like scala or go
18:22 < Havvy> ericelliott: trace.gl doesn't work on my computer. :(
18:22 < Havvy> And yet, the failure is only at one point: Printing text.
18:22 < k_89> scala is probably the best lang i have come across, its a great language, and can leverage all of the java ecosystem
18:22 < niggler> javascript also works in browser k_89 
18:23 < niggler> scala is horrific
18:23 < k_89> :/
18:23 < k_89> how come
18:23 < ericelliott> Havvy: oh, that suuuucks... does your computer not support webgl?
18:23 < Havvy> Apparently not all of it.
18:23 < Havvy> Though the basic tests work.
18:23 < k_89> i find scala takes most of the verbosity away from static typing, and gives you the speed of a compiled lang
18:24 < niggler> k_89 scala shows its warts when you try to work with existing java code
18:24 < ericelliott> k_89: is scala async by default?
18:24 < k_89> plus there is this whole hype around scala and concurrency that i am yet to explore
18:24 < k_89> ericelliott, when you have threads, and the ability to go async, you don't need async by default
18:25 < ericelliott> k_89: people attracted to Node from other languages are interested in async by default because when you don't do async by default, you end up with lots of blocknig code paths.
18:25 < k_89> hmm
18:25 < ericelliott> k_89: Node has a strong "DO NOT BLOCK" culture.
18:25 < k_89> thats a good point, me thinks
18:26 < k_89> that + javascript is a good reason i guess
18:26 < niggler> lol stagas slowmo-js "Error: max run time exceeded (250 ms)"
18:26 < kinabalu> ericelliott: you should ask for royalty payments from trace.gl :)
18:26 < k_89> good enough reason*
18:26 < k_89> by the way, i read about some thread like worker thingies coming to node ... is that real ?
18:26 < niggler> k_89 the best reason is that you are most likely using node in the context of an app which also involves a frontend which is written in JS
18:27 < k_89> niggler, one of the front-ends, yes
18:27 < niggler> its much easier to deal with one language than with two
18:28 < ericelliott> k_89: workers already exist in Node, and Node does multi-core with the cluster module.
18:28 < kinabalu> ericelliott: oh no way, i know Rik, that's funny
18:28 < k_89> ericelliott, but from what i have read, clusters are more like processes right ? they don't share the same memory space 
18:28 < k_89> ?
18:28 < ericelliott> k_89 Also, http://ericleads.com/2013/05/getting-started-with-node-and-express/
18:29 < k_89> i have gotten started with node several times :P
18:29 < k_89> but never continued, but looking seriously at it these days
18:29 < niggler> how close are you to completion ericelliott ?
18:29 < ericelliott> k_89: That's right. Workers run in their own little jails, but you can communicate with them.
18:30 < k_89> hmm
18:30 < ericelliott> niggler: On my book? Getting pretty close, I think. Editors are pressuring me to have it done in time for an October print release.
18:30 < ericelliott> niggler: but there's lots of stuff in the current release. =)
18:31 < niggler> you should next write a book on writing javascript books
18:31 < k_89> aha .. clusters are like processes connected via sockets .. nice :D
18:31 < ericelliott> k_89: judging by the questions you're asking, you'll want to read my getting started guide. =)
18:31 < k_89> hehe
18:31 < k_89> k
18:31 < ericelliott> There are a few things that newcomers should know.
18:31 < nathan7> kinabalu: Where are you located?
18:31 < k_89> was browsing through it 
18:33 < kinabalu> nathan7: California
18:34 < kinabalu> nathan7: and no, i'm not in malaysia 
18:34 < ericelliott> niggler: Hah!
18:34 < ericelliott> niggler: how meta.
18:35 < niggler> I'm waiting for the framework for writing frameworks
18:39 < kinabalu> ericelliott: purchased.  thanks.
18:39 < aschmitz> ericelliott: Just skimmed dilvie/credential, so take this with a grain of salt, but it looks like you're not using a constant-time comparison, which would be a good idea.
18:40 < ericelliott> kinabalu: w00t
18:42 < kinabalu> ericelliott: does trace.js allow for user input?  or does the program have to just run... i'm not getting my program.prompt showing ... if you know .. otherwise i'll just add options to the cli
18:47 < ericelliott> kinabalu: you point it at a javascript file you want to trace, and copy and paste the url it spits out into your browser... then you can search for functions, or scroll up and down the function call sequence.
18:47 < ericelliott> aschmitz: I don't really understand constant-time comparison attacks or how to deal with them. Any suggestions?
18:48 < ericelliott> frankly, I'm blown away by how many apps are not even salting passwords properly.
18:49 < ericelliott> aschmitz: Do you know of any Node modules that are doing a better job at this than I am? I'd love to look at some "good example" implementations. =)
18:49 < nathan7> kinabalu: Aw. I was hoping Amsterdam area, seeing that you know Rik q=
18:49 < aschmitz> ericelliott: It's definitely a much higher bar at that point, yep. The gist of the comparison timing attack is that somebody could potentially get information about what the "right" hash was by getting the first few characters of their hash to match it, and measuring the fact that the comparison took slightly longer.
18:50 < AAA_awright> A framework framework
18:50 < AAA_awright> How meta indeed
18:50 < aschmitz> ericelliott: Sadly, I don't know of one (haven't really looked yet), and I'm not sure if V8 would try to do something clever to the simple options.
18:51 < ericelliott> aschmitz: and a hash is vulnerable to that even if it's uniquely salted and key stretched?
18:51 < kinabalu> nathan7: i've been in the cloud9 offices over there, been to amsterdam at least a half dozen times
18:52 < aschmitz> ericelliott: The "standard" option is "if (a.length != b.length) { return false; } var result=0; for(var charOn=0; charOn<a.length; charOn++) { result |= a[charOn] ^ b[charOn]; } return result == 0;" off the top of my head, but I wouldn't count on that in V8 without testing it.
18:52 < ericelliott> aschmitz: I'm not piecing together the connection between the timing and the vulnerability
18:53 < aschmitz> ericelliott: So the reason it's less of an issue here is that the user probably doesn't know the salt that's used for their password. If they did, they could do some calculation on their side, and try to brute-force the first few characters of the hash out.
18:53 < niggler> AAA_awright what about those compile to coffee script languages?
18:53 < aschmitz> ericelliott: But if they don't know the salt, and it's sufficiently long and random (and it *looks* like it probably is), then they can't do that, so it doesn't really matter.
18:53 < ericelliott> aschmitz: the user doesn't know the salt unless they have broken in and stolen the user database.
18:54 < AAA_awright> niggler: The last thing the world needs, right
18:54 < aschmitz> ericelliott: Yep, and at that point they have the hash anyway, so it's not a really useful attack unless the salts leak independently of the hashes for some reason.
18:54 < AAA_awright> A compiler compiler compiler
18:54 < AAA_awright> Oh wait, no, that's what autotools is
18:54 < niggler> yaccc
18:54  * AAA_awright ducks
18:55 < niggler> auto tools, m4, the entire family is a PITA
18:55 < ericelliott> aschmitz: if the db is stolen, they'll have the salt and the hash, but it should still be pretty secure. I'm using some pretty intense encryption standards.
18:55 < AAA_awright> To be fair there's not much else that's better
18:55 < AAA_awright> Straight Makefiles probably rule all
18:55 < niggler> tbh straight makefiles are easier than grunt
18:55 < niggler> and I'm surprised more people don't use them
18:56 < AAA_awright> I use Makefiles for everything now
18:56 < AAA_awright> There's only a few odd problems I've had but it's strictly as a result of being for compiling stuff, not really designed for setting up operating systems like I (ab)use it for
18:56 < aschmitz> ericelliott: That sounds reasonable. I haven't thought about it much, but I doubt your implementation is particularly vulnerable to that as an issue. I just like to see constant time comparisons for all keys where possible.
18:57 < AAA_awright> Recompressing images, making thumbnails, compressing CSS, deploying tarballs
18:57 < kinabalu> ericelliott: my point was, i seem to get the hanging with user input :(
18:57 < ericelliott> AAA_awright: Do make files support shareable tasks as npm modules?
18:58 < rhalff> ericelliott, isn't that .allResolved/Settled() thing actualy breaking the flow? then() always expect something has resolved, suddenly I end up with something that maybe did resolve or did not. I think I'm gonna demand a didntResolvecallback to the creators [-( :-)
18:58 < AAA_awright> ericelliott: Do you have an example?
18:59 < ericelliott> AAA_awright: I frequently use grunt-saucelabs for front end cross browser testing in the cloud
18:59 < ericelliott> as far as I know, there's no makefile-saucelabs package.
18:59 < AAA_awright> ericelliott: Makefiles are good whenever you need to do "Generate file X using these other resources" e.g. "Build thumbs-250px from source-images/*", anything else (running tests, etc) is best done with a shell script, though you can have a Makefile shortcut that runs such a script e.g. `make test` running `vows tests/test-*.js`
19:00 < ericelliott> A lot of similar task sharing goes on in the grunt community. I used makefiles for years, and it was pretty much roll-up-the-sleeves and diy.
19:00 < nathan7> kinabalu: ah, coo'
19:00 < RLa> AAA_awright, i prefer makefiles too :)
19:01 < RLa> too bad windows does not come with some sort of make preinstalled
19:02 < AAA_awright> Windows doesn't come with anything installed
19:02 < AAA_awright> But Makefiles are supposed to be cross-platform like that
19:02 < AAA_awright> I use Makefiles on Windows, too
19:02 < AAA_awright> Which suprises people, for some reason
19:03 < AAA_awright> As if "Well wait, what is the point of this big huge complex build system then?"
19:03 < ericelliott> aschmitz: I'm skeptical that a key-stretched hash would be vulnerable to a constant-time attack, but I don't understand the attack well enough to be sure.
19:03 < niggler> AAA_awright what do you use?
19:03 < niggler> *some MSVC tool or cygwin or devtools or something else
19:04 < AAA_awright> niggler: Well actually I do usually use MSVC, but for non-C stuff it's Cygwin make
19:06 < pyykkis> i feel the biggest problem with grunt tasks is that they are not composable. Instead, each of them needs to be configured separately. That feels like using maven/ant with json flavor
19:07 < AAA_awright> The whole NIH syndrome thing in general is what bugs me
19:07 < AAA_awright> Shell scripting is a perfectly adequate way of executing tasts
19:07 < AAA_awright> *tasks
19:07 < niggler> i think part of the problem is that everyone knows that make could be better, but it's not clear how
19:08 < pyykkis> e.g., concat (src/dest) + compile coffee (src/dest) + uglify (src/dest)
19:08 < aschmitz> ericelliott: Well, at least you're considering it, which is far better than most people. Thanks!
19:09 < AAA_awright> niggler: I'm not sure how one thinks make could be "better"
19:09 < AAA_awright> It does exactly what it advertises, and very well
19:09 < pyykkis> Unix pipes and Browserify approach feels right. Of course, Browserify is mostly about js modules.
19:09 < niggler> dynamic dependencies, which can be done but is usually a pain to setup
19:09 < AAA_awright> You specify "Generate file X using files Y with this command" and it keeps it all up-to-date
19:10 < niggler> which is why you get gnu extensions like .SECONDEXPANSION
19:10 < AAA_awright> I can't say I've used that
19:10 < niggler> from vanilla make, gnu added a bunch of extensions
19:10 < niggler> and others have tried new build systems
19:10 < pyykkis> Here's my take on the subject: https://github.com/leonidas/james.js It's all node.js streams under the hood
19:11 < ericelliott> aschmitz: not just considering it.. changing the equality check in the verify function to a constant time check.
19:11 < niggler> but i do agree that most people don't know how to use make
19:11 < ericelliott> aschmitz: But I have very serious doubts that anybody could crack what I've already got with a constant time attack.
19:12 < AAA_awright> niggler: For Node.js anything you don't need any proprietary extensions of Makefile
19:12 < pyykkis> with james.js, one can do something like james.read('foo.coffee').transform(coffee).transform(uglify).write('foo.js') etc
19:12 < AAA_awright> It's strictly "Build file X from Y", done
19:12 < niggler> sure
19:12 < AAA_awright> Or "Build files X* from Y* and Z" or similar, easily done stuff
19:14 < mmalecki> make is really nice
19:15 < niggler> i doubt you will find much make hate here
19:16 < niggler> make is the GTD tool
19:17 < AAA_awright> I've seen worse, I've been called retarded for saying I use Makefiles with browserify
19:17 < AAA_awright> In person, to my face. Like, what?
19:17 < substack> makefiles are great
19:17 < niggler> you are also retarded for using javascript instead of icedlivecoffeescript
19:17 < substack> I usually don't need them though
19:18 < substack> I just whip up a little bash script or stick some inline commands into the package.json scripts field
19:19 < AAA_awright> substack: Usually the bash script is done as easily if not easier in a Makefile, if you're generating a file
19:20 < substack> AAA_awright: I don't like the coupling to the output file as much though
19:20 < substack> sometimes that gets in the way
19:20 < AAA_awright> Use variables then?
19:20 < AAA_awright> DST=production.js
19:20 < sdwrage> afternoon all
19:21 < AAA_awright> make DST=develop.js
19:21 < niggler> is there a good js preprocessor
19:21 < niggler> or do you just use cpp
19:21 < bnoordhuis> niggler: sed
19:21 < niggler> no awk love bnoordhuis ?
19:22 < AAA_awright> Usually I've just used cpp... Can you specify a custom macro character, like '//#' maybe?
19:22 < AAA_awright> *but not for ES
19:22 < bnoordhuis> niggler: i confess i havent really used awk in a long time :(
19:23 < bnoordhuis> because perl, you know
19:23 < niggler> awk has about 80% of the power of perl but it's incredibly lightweight
19:23 < niggler> even wall admitted he still uses awk magic like '!x[$0=$1]++'
19:24 < bnoordhuis> i guess that's true
19:42 < ericelliott> substack: peep my latest node creation: https://github.com/dilvie/credential
19:43 < ericelliott> substack: I'm looking for feedback from people who are smarter than I am (probably most people in #node.js) 
19:43 < ericelliott> yet another password hash / verify tool
19:45 < Trangar> ericelliott, I might use that one :D
19:45 < ericelliott> cool. =)
19:45 < robertkowalski> hi
19:47 < Trangar> ericelliott, in your constantEquals  function, I´d do ¨return false¨ immediatly instead of ¨result = false;¨
19:47 < Trangar> Slight performance increase
19:47 < Trangar> Especially on large strings that have a mismatch early on
19:47 < ericelliott> Trangar: that would defeat the purpose.
19:47 < Trangar> But surely if character 3 differs, then there´s no need to check all the other characters?
19:48 < Trangar> Oh wait I´m a retard, didn´t check the description :D
19:48 < ericelliott> Trangar: the point is to iterate over the entire hash so that attackers can't guess the value of the hash by noting the difference in time it takes to process one equality vs another
19:50 < ericelliott> Trangar: That one threw me for a loop, too. I'd never thought of that attack vector before today.
19:50 < ericelliott> Which scares me a little.. I must have implemented a thousand username / password systems.
19:51 < Trangar> Haha, usually I neglect hashing passwords
19:51 < Trangar> But my systems never last longer than a month before they´re discontinued
19:51 < ericelliott> Trangar: Yeah, that's very bad if you have more than one user. If your pw db is ever stolen, your users will be mad.
19:52 <@xyxne> setTimeout(sendResponse, Math.random() * 50)
19:52 <@xyxne> FTFY
19:52 < ericelliott> xyxne: What's that?
19:52 < Trangar> ericelliott, Those projects never have more than 5 users, who are programmers myself so I´m guessing they´re using fake passwords
19:52 < ericelliott> =)
19:52 < Trangar> The amount of password resets also confirms that :I
19:53 <@xyxne> fudging response time so there isn't any useful delay to note
19:53 < ericelliott> xyxne: that doesn't work, because the fudge turns into statistical noise, right along with request latency... it won't even slow down an attacker over the wire.
19:54 <@xyxne> perhaps if you have a dramatic difference in response time
19:54 <@xyxne> otherwise it works great
19:55 < Trangar> Honestly my biggest issue is that if they have their hands on the database, then it´s probably not too difficult to get their hands on my code either :D
19:59 <@xyxne> ericelliott, > applying the hash function in a loop
20:00 <@xyxne> the more you hash the higher your chance of collision, yes?
20:00 < Trangar> That´s what my friends get when they get too much hash
20:01 <@xyxne> 'my friends'
20:01 <@xyxne> uh huh
20:01 <@xyxne> SWIM
20:01 < Trangar> :D
20:02 < Trangar> Hey, don´t mess with this drug dealer
20:02 <@xyxne> I don't make a habit of messing with drug dealers
20:03 < niggler> holy crap the nsa called signals intelligence SIGINT
20:03 < ericelliott> xyxne: Smarter security experts than I recommend applying the hash in a loop for the express purpose of slowing down the algorithm.
20:04 < Trangar> Security experts don´t know anything about performance :I
20:06 < zomg> If you need a secure hash might as well use some algorithm with a work factor
20:06 < zomg> no need to do a kludge loop =)
20:06 < Trangar> Just return a randomized string
20:07 <@xyxne> or, you know... rate limit your auth routes
20:07 <@xyxne> but what do I know
20:07 < Trangar> Or have someone sit behind the pc and manually remember and check every password
20:08 < ericelliott> xyxne: that won't protect against an attacker who has the db.
20:09 <@xyxne> neither will a loop :P
20:10 < ericelliott> xyxne: the loop will slow down the brute force attack significantly
20:10 < ericelliott> zomg: I'm using PBKDF2
20:10 < ericelliott> in particular, node's crypto.pbkdf2()
20:10 < ericelliott> assuming that the people who implemented it have more domain expertise than I have. =)
20:11 < ericelliott> That's not always a safe assumption, but in this case, probably a fair bet.
20:13 < ericelliott> That loop is such a monster, I'm almost afraid to run a collision test against it because it'll take a week.
20:14 < ericelliott> The sacrifices I make for science... I want to be sure. I'll run it. I'll just let it over-work my cpu until I have a statistically meaningful sample and see what happens. =)
20:15 < Trangar> ericelliott, Ok, see you in a week!
20:16 < ericelliott> Trangar: Seeing as how serious security pros recommend doing what I did, it's probably safe to use my module. In fact, it's probably safer than any of the modules I was able to find before I wrote credential.
20:16 < Trangar> Honestly any hashing is better than none :P
20:16 < ericelliott> haha, true that.
20:16 < Trangar> In my PHP days an md5 was more than enough for anything
20:17 < ericelliott> yeah, I used md5 with no salt back in the day
20:17 < ericelliott> good thing none of that stuff is still online.
20:17 < Trangar> At work we use a SHA-1 with a salt in the web.config and a salt unique to every database record
20:17 < Trangar> That must be a bitch to bruteforce
20:17 < Stumbler_> The fellas that managed my current project before me did that as well, stored plain text on the client side too.   I almost cried a little when I saw that :(
20:18 < Trangar> Haha eww
20:18 < Trangar> I remember having a website where the username and password was hard-coded in the javascript
20:18 < Trangar> Not even minified either
20:18 < Stumbler_> I also figured out that everything they ever do is setup with an admin account, using the password 'password'.   MD5 reverse lookup is awesome for admin accounts :D
20:18 < Trangar> Haha
20:19 < Trangar> For my projects you can usually log in with ¨test¨ and ¨test¨
20:19 < Trangar> Like, 99.999% of the time
20:19 < ericelliott> Trangar: Unique salts can help you make sure your keys are long enough to make brute force hard, but they're really good at neutralizing rainbow tables.
20:19 < Trangar> ericelliott, especially because we´re using a double salt, one application-wide and one object-specific
20:20 < Trangar> But that´s also decodable, which is kind of iffy
20:20 < Trangar> Because we store all strings encoded in the database
20:20 < Trangar> Banks apparently require you to do that :I
20:20 < ericelliott> Trangar: Salts are not secret, as long as they're cryptographically random
20:20 < Trangar> True
20:20 < Trangar> I like salt, it´s tasty
20:21 < ericelliott> but you can't just Math.random() -- especially in Node.
20:21 < ericelliott> notoriously predictable and collision prone.
20:21 < Trangar> We have a SaltHelper object, it´s all written in C#
20:21 < Trangar> Not entirely sure what kind of randomizer we use, I could look it up
20:22 < nightfly> ericelliott: What makes random() worse in node?
20:22 < ericelliott> Yeah, I would if you care about password security. =)
20:22 < Havvy> If you want randomness, read from urandom?
20:22 < zomg> public float GetRandom() { return 3f; /* used dice to get random */ }
20:22 < ericelliott> nightfly: I'm not sure, but I've run head-to-head tests between Node and Firefox.. the FF, Math.random() has a much better distribution, and less chance of collision.
20:23 < Trangar> function getRandom() { return lastRandom ++; }
20:23 < niggler> woah that's way too complicated Trangar 
20:23 < niggler> function getRandom() { return 6; }
20:23 < Trangar> niggler, I´m sorry :(
20:23 < nightfly> That's shitty, but really good to know.
20:23 < niggler> shit it was 9
20:24 < niggler> http://search.dilbert.com/comic/Random%20Number%20Generator
20:24 < Trangar> I think numberphile did a video on randomness
20:24 < Trangar> http://www.youtube.com/watch?v=SxP30euw3-0
20:24 < ericelliott> nightfly: by "much better" I mean many orders of magnitude, such that I couldn't get a statistically significant glitch in FF, whereas getting Node to spit clusters and collisions is pretty trivial.
20:25 < Stumbler_> lol, I like that dilbert link niggler
20:25 < niggler> of course that's a pretty low-entropy sequence
20:25 < ericelliott> Of course, that'll be the implementation of Math.random() in V8, which I imagine is optimized for speed rather than cryptographic utility. =)
20:25 < niggler> I'm a fan of quasi random sequences
20:26 < niggler> and the illustrious koksma-hlwaka inequality
20:26 < zomg> Has anyone noticed that mega actually gets entropy for their crypto from your mouse and keyboard :D
20:26 < zomg> or at least so they claim
20:26 < niggler> that's a perfectly reasonable source of entropy zomg
20:26 < niggler> its a brownian bridge
20:26 < zomg> yeah
20:27 < zomg> it is pretty clever, mouse movement is pretty unique
20:27 < niggler> i thought pageant also used to do it
20:27 < ericelliott> I learned all about the difference in JS Math.random() implementations when I was working on this: http://usecuid.org/
20:27 < VapidWorx> is there a dedicated express channel?
20:27 < niggler> *puttygen, not pageant
20:28 < ericelliott> by "all about" I mean I went, "zomg wtf v8!"
20:28 < niggler> VapidWorx did you check #express or #expressjs or #express.js ?
20:28 < niggler> there's only one s in collision ericelliott 
20:28 < VapidWorx> thanks niggler! I just didn't see anything listed on their site and figured someone here would know
20:29 < ericelliott> niggler: haha. You spotted my little joke.
20:29 < niggler> #express VapidWorx 
20:29 < niggler> in ##javascript do !ded
20:29 <@xyxne> VapidWorx, unless things have changed significantly in the last few months, you will probably have better luck just asking for help here
20:29 < ericelliott> ok, not funny. *fixing*
20:30 < niggler> there are also two l's :P
20:30 < VapidWorx> xyxne: ok I'll ask there first if there's no response I'll put it here so I don't clutter up channel
20:30 < niggler> we need more claw puns
20:31 < Elad> Hey.. I think I found a bug in node.js
20:31 < Elad> how can I report it?
20:31 < niggler> Elad there's github 
20:31 < niggler> but you can start here by describing it
20:31 < Elad> ok..
20:32 < Elad> fs.readFile()  opens 4 child processes  that becomes ghosts..
20:32 < Elad> never close until end of execution
20:33 < Elad> should I open it in github?
20:33 < Elad> any rules?
20:33 < niggler> what OS/version?
20:33 <@xyxne> Elad, preferably provide steps to reproduce
20:34 < niggler> and do you have a small test case?
20:34 < Elad> I cerated a simple file that reproduces it..
20:34 < Elad> created
20:34 < Elad> CentOS 6.4
20:34 < niggler> you have a hastebin or gist?
20:34 < Elad> no.. I'm new to the scene
20:35 <@xyxne> github has gisthub.com
20:35 < niggler> put up the sample somewhere like gist.github.com or hastebin.com
20:36 < Elad> https://gist.github.com/elad-yosifon/5745106
20:37 < pirho> github down again?
20:37 < niggler> what version of node?  I don't see it on OSX
20:37 < niggler> *osx with 0.10.10
20:37 < niggler> http://isup.me/github.com just you pirho 
20:38 <@xyxne> pirho, :)
20:38 < Elad> node.js 0.10.5
20:39 < Elad> should I open an issue?
20:41 < niggler> what are the processes you see?
20:41 < niggler> (yeah you should but make sure to include all of the info)
20:41 < niggler> are they all children of one process?
20:42 < Elad> let me check
20:43 < VapidWorx> ok it is quiet over there, I'm not sure I'm going to explain this right/correct terms...Using Angular/Express I'm taking a textarea that's data is being Post to a url.  I want to take the response from there and have that go into a Get that is leaving the connection open continuously because there's a ng-model with listener on that Get url.  But I'm not sure the proper way to get info from the post, everything I've done so far is re
20:44 < Elad> yes
20:44 < Elad> child processes of same one
20:45 < niggler> does regular top show that as well?
20:45 < niggler> run pgrep node
20:45 <@xyxne> VapidWorx, your message cut off after 'done so far is re'
20:45 < niggler> (while the test is running
20:46 < Elad> https://github.com/joyent/node/issues/5652
20:46 < VapidWorx> xyxne: just ended with res.send.  That's only part I've dealt with
20:49 < Elad> is it good enough?
20:50 < niggler> Elad does the same thing happen if the file does exist?
20:51 < niggler> * and if the file does not exist
20:51 < Elad> didn't check :)
20:51 < niggler> check both cases
20:52 < Elad> YES IT DOES
20:52 < Elad> OMG
20:52 < niggler> now can you try the same thing without the fs.readFile
20:53 < Elad> readFileSync is ok
20:55 < niggler> and you are sure that htop is showing processes, right? 
20:55 < bnoordhuis> they're threads, not processes
20:55 < Elad> @niggler what do you mean?
20:55 < niggler> Elad use pgrep
20:55 < niggler> run the test
20:55 < niggler> and then run pgrep node
20:55 <@xyxne> I would expect to see a thread pop up when using a uv worker
20:56 < niggler> i used htop once and realized it was taking up too many system resources to be useful
20:56 < Havvy> niggler: I use htop....
20:56 < Havvy> If I can't access htop, generally I can't access a shell either. :/
20:57 < bnoordhuis> i think what niggler means is that htop uses so much cpu itself that it skews the numbers
20:57 < Elad> 13334
20:57 < Elad> node is single threaded right?
20:58 < bnoordhuis> Elad: js code is. the node runtime (c++ land) uses threads however
20:59 < Elad> ok
20:59 < Elad> but why not closing them?
20:59 < bnoordhuis> turn the question around
20:59 < bnoordhuis> why would you close them? they go away when node exits
21:00 < Elad> when I run a server I want to use all resources I can
21:00 < Elad> I dont need redundant threads
21:00 < bnoordhuis> you do if you want async file operations
21:01 < Elad> and when in cluster its 4 threads for each process
21:01 < Elad> 16*4
21:01 < bnoordhuis> so? threads are cheap
21:01 < Elad> what are we talking about here??
21:02 < Elad> this is abnormal behavior 
21:02 < bnoordhuis> no, this is you showing a certain lack of understanding
21:03 < Elad> It's late in here... I gone
21:03 < Elad> https://github.com/joyent/node/issues/5652
21:03 < Elad> comments are welcome
21:03 < Elad> bye
21:51 < pirho> my girlfriend just defeated the shadow temple
21:52 < niggler> maybe she can move on to the temple of light
21:54 < chadams42> connect.static(options.base, {maxAge:86400000}), this isn't setting the max-age, any reason why?
21:55 < niggler> how are you using it chadams42 ?
21:56 < chadams42> built a local environment using yeoman, all requests to images have max-age set to 0
21:56 < chadams42> so I thought I would add in a higher max-age
21:56 < niggler> are you using express ?
21:57 < chadams42> no, built env from yeoman, they just use connect
21:57 < chadams42> yeoman webapp
21:58 < niggler> oh not familiar :/
21:58 < chadams42> express is just a wrapper around connect right?
21:58 < chadams42> so the above should work, I'm using chrome
21:58 < ningu> chadams42: are you checking the headers directly?
21:59 < chadams42> my app makes many requests for the same image
21:59 < chadams42> but it's not being cached, so it's flickering
22:00 < ningu> ok, but that could be an issue either with connect or with chrome
22:00 < ningu> you should look at the headers
22:02 < chadams42> yea I have the headers here, get a 304 with max-age set to 0
22:11 < VapidWorx> just an update, I think I'll need to use .all instead of a get/post and put the logic in there to handle passing the data from post to get
22:21 < robertkowalski> tjfontaine: are you adding npm to the node.js jenkins? just saw: http://jenkins.nodejs.org/job/npm-package/
22:23 < robertkowalski> i would really appreciate this, the "npm test"-tests are running since half an hour on my local machine now.
22:24 < kinabalu> is this library (https://github.com/mgutz/execSync) the recommended way to get a shell command to execute synchronously?
22:26 <@tjfontaine> robertkowalski: I've been thinking about it
22:34 < rksm> kinabalu: I'm using shelljs: https://github.com/arturadib/shelljs. When calling shelljs.exec with no callback its synch
22:36 < kinabalu> rksm: ahh nice, i'll pinboard that ... very handy
22:36 < kinabalu> rksm: oh wow, that is pretty powerfully nice
22:40 < rksm> yep, let's you do all kinds of shell stuff in js. Only when you have long running processes or want to use stdin properly child_process.spawn is usually the way to go
22:54 < Kessler> anyone knows how I can do a .load programmatically (developing a cli for something) ?
22:54 < Kessler> context: node repl
22:54 < jesusabdullah> Kessler: what do you mean by .load ?
22:54 < Kessler> if you run node
22:54 < jesusabdullah> Kessler: I'm not familiar
22:54 < Kessler> u get a repl
22:54 < jesusabdullah> sure, sure
22:54 < Kessler> doing .load something.js
22:54 < Kessler> loads it
22:55 < Kessler> doing .save something.js
22:55 < jesusabdullah> hmmmmm
22:55 < Kessler> saves everthing you repled so far
22:55 < jesusabdullah> I actually didn't know about those
22:55 < Kessler> .help :)
22:55 < Bunge_> Available Commands: markov enlolcrypt delolcrypt 8ball sortinghat say lsperms help
22:55 < Bunge_> OP & Admin: part kick mute
22:55 < Bunge_> Admin only: bridge join nick raw perms load unload reload lsmod
22:55 < jesusabdullah> *=== THE MORE YOU KNOW
22:55 < Kessler> whats up with the bot ?
22:56 < ningu> .enlolcrypt hello there
22:56 < Bunge_> toxxa gtodo
23:02 < sdwrage> are bots allowed in this channel?
23:03 < Havvy> sdwrage: Only if they don't speak or they are approved by somebody like isaacs.
23:03 < sdwrage> .enlolcrypt this is an encrypted message :)
23:04 < Bunge_> gtuf uf iz ozpdlbgoq yoffiso :)
23:04 < sdwrage> Hey, my smiley should have been encrypted too! I don't want some random knowing I'm happy about what I am talking about :P
23:04 < sdwrage> .delolcrypt gtuf uf iz ozpdlbgoq yoffiso :)
23:04 < Bunge_> this is an encrypted message :)
23:05 < eliezerb> sdwrage, are using a bot made with node.js?
23:05 < sdwrage> its not mine
23:05 < sdwrage> lol
23:05 < sdwrage> someone else's 
23:05 < eliezerb> haha
23:06 < sdwrage> not sure who's it is. Guessing its yours Kessler?
23:06 < eliezerb> I also was doing one 
23:33 < ckknight> why doesn't node.js support atob/btoa?
23:34 < ralf_> hey there, my node up uses from time to time 100% cpu, i run -prof and sw that the most ticks are in libc. is this normal? example: "1580476   83.9%  /lib/x86_64-linux-gnu/libc-2.13.so" - is there a bug in my libc? its debian wheezy.
23:35 < ralf_> *app
23:35 < ckknight> ralf_: if node.js is doing actual work, it should be using 100%. That's part of the appeal.
23:36 < ckknight> ralf_: CPU-oriented work, that is
23:37 < ralf_> ckknight: but there where no users, and it does not goes so 0 oder 5%..
23:37 < ralf_> *to
23:37 < ckknight> hmm, that sounds like a bug, then
23:37 < ckknight> my first guess is somewhere in your code, but it could be a library you're using or something.
23:38 < ralf_> ckknight: my code maybe (also) broken, iam new in nodejs, currently ive no idea to reproduce the problem
23:38 < ckknight> dang, that sucks.
23:38 < ckknight> being able to reproduce is crucial
23:38 < ckknight> s/reproduce/reliably reproduce/
23:40 < ralf_> ckknight: also i saw some asserts in stderr, but i did not log that
23:40 < ralf_> not really helpful information i know
23:41 < ckknight> ralf_: just keep doing your thing and add more logging, check the logs next time the CPU spikes.
23:42 < ralf_> ckknight: yep, i will use strace or something to see whats on the syscalls
23:43 < ralf_> thanks to far
23:48 < sinclair|net> ckknight: i did find this btw mate https://github.com/andyedinborough/RazorJS
23:48 < ckknight> sinclair|net: yeah, I've seen that
23:49 < ckknight> I've thought about adding a Razor-like syntax to GS
23:49 < ckknight> not sure if I _really_ want to, since I'm not super-interested
23:49 < ckknight> but I might sometime.
23:49 < sinclair|net> just been giving it a go, what i think i like about it (tho it remains to be seen, is i can port existing razor code over to it fairly easily
23:49 < ckknight> yeah
23:49 < ckknight> tell me how it goes
23:50 < sinclair|net> i think i prefer GS syntax over going with pure js in the templates
23:50 < ckknight> I'm just thinking to myself how easy it'd be
23:51 < sinclair|net> ckknight: should note tho, im a HUGE fan of razor templates, some of that may have something to do with MS templating technology being utterly crap in the past tho
23:51 < ckknight> I'd probably disable unclosed paren calls on the outmost part, so @alpha bravo turns into <%= alpha %> bravo rather than <%= alpha(bravo) %>
23:52 < ckknight> I remember chatting with shanselman at MIX about Razor when it just came out and was this shiny new technology
23:53 < sinclair|net> ckknight: i guess im gravitating to this razorjs templating stuff as it was built by a contributor to signalr, not that that means a lot tho
23:53 < sinclair|net> and its razor
23:53 < ckknight> I'll look into how hard it would be to support in GS, my guess is not very hard.
23:54 < sinclair|net> ckknight: shouldn't be, tho, if i could just get C# syntax in there, i think i was die of extreme happyness
23:54  * ckknight writes up a ticket
23:54 < ckknight> sinclair|net: hehe
23:54 < ckknight> GS takes a bit of influence from C#
23:54 < ckknight> the reified generics, for instance
23:58 < ckknight> sinclair|net: one issue I'm having: how would I properly support blocks in RazorGS?
23:58 < sinclair|net> code blocks ?
23:58 < ckknight> yeah
23:58 < ckknight> and hmm
23:59 < ckknight> the inline writing within an if/for block created by Razor could be difficult
23:59 < sinclair|net> ckknight: http://jsbin.com/imihov/6
--- Log closed Mon Jun 10 00:00:41 2013
