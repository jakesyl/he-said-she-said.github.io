--- Log opened Wed May 29 00:00:25 2013
00:00 < progrock`> weird, iframes are inline by defualt.. I would noot have guessed that
00:00 < brainproxy> charlydagos: I know the core devs at lockerdome; they get a ton of traffic and their infrastructure is almost entirely nodejs based now
00:01 < brainproxy> but it's taken some real dedication on their part to build the infrastructure for the nodejs pieces
00:02 < charlydagos> yeah, I could see how that would require tons of time
00:03 < brainproxy> they're chief architect is a real whiz; gave a great presentation on js metaprog'ing a couple of months ago
00:03 < brainproxy> http://vimeo.com/stljs/metaprog
00:03 < charlydagos> nice nice, I'll look it up
00:03 < charlydagos> thanks for the info
00:04 < brainproxy> np
00:05 < merpnderp> Anyone have a laptop they absolutely love running Ubuntu on as a dev machine?
00:06 < nlf> anything from system76
00:08 < merpnderp> nlf: wow! how have I never heard of those before
00:08 <@isaacbw> it would be really nice to have a notebook with the construction quality of macbook pros without the apple logo
00:08 < nlf> system76 is pretty decent
00:08 < nlf> it's no aluminum unibody, but they aren't bad at all
00:08 < mikeal> isaacbw: also with Mac OS X but with ZFS
00:09 <@isaacbw> I would just get a macbook pro, but it would feel icky to buy a macbook just to get rid of mac os x (which is what I would do)
00:10 <@isaacbw> hp laptops have always felt pretty solid to me
00:10 < charlydagos> I have a macbook and run ubuntu on virtual box
00:10 <@isaacbw> the hinges don't wobble, which I hate
00:10 < merpnderp> isaacbw: yes, exactly what I'm looking for.
00:10 < progrock`> heh, I stick to lenovo thinkpads... tho, a) I'm a mac hater, and b) I get an employee discount from lenovo
00:10 < charlydagos> I just share my dev folders with it and configure the shit out of ubuntu
00:10 < progrock`> on the other hand, I'm dying to buy a chrome pixel
00:10 <@isaacbw> everyone tells me that thinkpads aren't so great now
00:11 < progrock`> which should be able to run ubuntu beautful at the same time as chromeos... sadly I hear ubuntu doesnt handle the insanely high resoution too well yet
00:11 < progrock`> isaacbw: I have no complaints... but to each their own with that regard
00:11 < merpnderp> nlf: plus the 15.6" is half the price of a mbp
00:11 <@isaacbw> ubuntu is pretty bloated. I wouldn't be very confident running it on limited hardware
00:11 < merpnderp> Unity runs horribly on my old Dell.
00:11 < progrock`> isaacbw: chomreboook pixel isnt exacltly limited hardware
00:12 < ChrisPartridge> can you load another OS on the pixel yet?
00:12 <@isaacbw> progrock`: I'm looking at it now for the first time. It's better than I expected
00:12 < progrock`> isaacbw: fro $1400 it better be, lol
00:13 <@isaacbw> man, I want one now
00:13 < progrock`> ChrisPartridge: yes, I think most linux distros work no prob.. plus chromeos runs on same kernel, so you can literall run side y side, not in a virtual machine
00:13 <@isaacbw> this thing is sexy
00:13 < progrock`> isaacbw: yes, very.. I really want one
00:13 < ChrisPartridge> yeah, i want one - I can't order in AU yet though :\
00:14 < progrock`> isaacbw: and as much as theres an extremely small target market for the pixel.. its about perfect for me, haha
00:15 < progrock`> ok, time for me to go
00:15 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
00:19 < tankbusta> This is a long shot but has anyone seem file descriptor limit problems on CentOS? 
00:19 < tankbusta> I have an app that handles uploaded files and reads them, on CentOS it seems to keep them open
00:20 < tankbusta> on OS X (my dev platform) it properly closes 
00:21 < tankbusta> EMFILE error is on the childprocess I use... lsof on OSX shows only 1-2 files open at a time which is normal since the test script only does a few files at a time 
00:21 < tankbusta> lsof on cent shows 100's of files open 
00:22 < ChrisPartridge> tankbusta: gist the code that does the file operations, someone might be able to help
00:27 < tankbusta> The gist is https://gist.github.com/tankbusta/30f113549e47a9aa763e - apologize for the indentation
00:29 < tankbusta> I'd assume it's the fs.createReadStream that isnt closing properly - lsof indicates the files that are open are the ones mentioned in that readStream 
00:30 < tankbusta> and it even shows them as (deleted) from the fs.unlink() 
00:37 < ChrisPartridge> tankbusta: same node versions on osx/centos?
00:38 < tankbusta> ah, nope. Cent is v0.10.6 osx is v0.8.11
00:40 < ChrisPartridge> tankbusta: might have something to do with it, streams changed quite a bit between 0.8 > 0.10
00:43 < tankbusta> I would think the bug would exist on 0.8.11 and not 10.6... I see there was a push in 0.9.4 to add autoClose=true to createReadStream
00:43 < asterick> yay.  made an alterative to require.js with grunt compile phases and development mode in less than 400 lines of code. \o/
00:43 < asterick> no more almond for me
00:44 < tankbusta> I actually did get the emfile error on OSX until I added a bunch of var=null's as seen in the gist 
00:46 < ningu> tankbusta: what's the s3 module you're using?
00:47 < tankbusta> the official aws one 
00:47 < tankbusta> aws-sdk v1.1.0 on both servers
00:49 < ningu> tankbusta: according to the docs, s3.putObject's Body should be a Buffer
00:49 < ningu> you are not giving it a Buffer
00:50 < ssafejava> ningu: it's valid to connect it to a stream.
00:50 < ningu> well, it isn't documented
00:51 < tankbusta> yeah aws is lacking on the documentation 
00:51 < tankbusta> https://github.com/aws/aws-sdk-js/issues/13 has some context of using putObject with a stream
00:52 < ssafejava> I'm sure a stream works, I've done it.  You can store strings as well
00:52 < scott_gonzalez> chjj: I'd be happy to run through the open issues and pull requests for marked with you, if you're interested. Looks like it could use a little triage love.
00:53 < tankbusta> yeah it uploads the data fine, if I download from s3 and verify hashes they check out 
00:53 < samholmes> what's the technical term for a routine that is scheduled?
00:53 < progrock`> hmm, is it entirely invalid to add a id or class to style/script tags?... after 15 years of doing html, it never crossed my mind, and never saw it
00:53 < samholmes> cron, daemon, ..?
00:53 < ssafejava> progrock`: I do it all the time... ha, define `invalid`
00:53 < progrock`> ssafejava: its valid if IE9+, FF, and Chrome handle it no prob
00:54 < chjj> scott_gonzalez: it may not look like it, but i keep close track of the issues with my own todo list writing down all possibilities of how to handle each one.
00:54 < ssafejava> progrock`: lol looks like only Netscape 4 has problems with it (http://stackoverflow.com/questions/2741441/giving-the-script-tag-an-id)
00:54 < chjj> scott_gonzalez: i think ill add that to the repo
00:55 < chjj> scott_gonzalez: this is my baby, i still obsess over it :)
00:55 < scott_gonzalez> chjj: Heh, I know how it is.
00:55 < progrock`> ssafejava: well, valid for then, haha... can't say w3c validating means anything to me anymore
00:56 < progrock`> for me then*
00:56 < ssafejava> I think it passes that too tbh
00:56 < scott_gonzalez> chjj: Do you want me to just keep going through the open issues and commenting on them?
00:56 < forrest__> anyone here successfully using mongos with auth and a sharded cluster to read from shards and/or secondaries?
00:56 < scott_gonzalez> I can send PRs for some of them too, just want to get feedback from you before sending a bunch of PRs.
00:56 < scott_gonzalez> I can also look through the open PRs and review them.
00:57 < chjj> scott_gonzalez: oh, i see what youre getting at
00:57 < ssafejava> progrock`: It's technically not valid in HTML4 but it is in 5. But even HTML4 browsers supported it more or less. of course it's standard practice for e.g. referencing templates and I've never heard of anyone having a problem with a browser barfing on that
00:58 < chjj> scott_gonzalez: i mean, if it's not a major question of marked's design, feel free to explain anything you want.
00:58 < chjj> scott_gonzalez: i appreciate it
00:59 < scott_gonzalez> chjj: Ok, I'll just keep going through them. Some of them seem like they should just be closed, so I'm trying to poke the OPs and get a response from them ;-)
00:59 < scott_gonzalez> chjj: I'm in markdown mode right now as I'm going through open issues for jQuery's site infrastructure, so I figured I'd spend some time helping out with marked.
01:02 < saenzj> anyone recommend a method to manage node restarts
01:02 < saenzj> on aws linux
01:03 < ningu> saenzj: forever
01:04 < ssafejava> saenzj: or upstart
01:05 < saenzj> what about on reboot. cron?
01:06 < ssafejava> saenzj: upstart will start it on boot.
01:07 < ssafejava> saenzj: here's some examples, since the upstart docs will make your eyes bleed: http://stackoverflow.com/questions/13255997/config-file-for-upstart-with-nodejs
01:07 < saenzj> thanks.
01:08 < ssafejava> saenzj: If you need more advanced monitoring, check out Monit (you can see a link to a related question on the right on the stackoverflow post). It can do things like hit the webserver and make decisions to restart it based on latency or repeated failed requests, etc. It's very intelligent
01:40 < progrock`> man, howis there not an easy way on the ACE editor to hide the scrollbars until you need them
01:40 < progrock`> its definitely possible, i jut can't find a valid example... and while I can write a hackish way, I couldn't imagnine there not being a simple way
01:40 < Havvy> -wholoves Havvy
01:40 < purr> Havvy: Havvy is loved by Nexxy.
01:55 < gluxon> By default, what are buffers filled with?
01:55 < garthk> gluxon: bees.
01:55 < gluxon> var buffer = new Buffer(1024);
01:55 < gluxon> I would assume it would be all 0x0000...
01:55 < garthk> gluxon: you could always look at it.
01:55 < gluxon> But it's like.. stuff..
01:55 < gluxon> garthk: But I don't understand what it is :(
01:56 < garthk> If it's not zeros, that might be a bug. We shouldn't be scavenging memory like that.
01:56 < gluxon> garthk: I think it is from memory.
01:56 < gluxon> In which case, it would be fertile soil for a exploit..
01:56 < garthk> Well, only if you're eval()ing hostile code.
01:57 < gluxon> garthk: Got 0.10.8?
01:57 < gluxon> Go in cmd.
01:57 < gluxon> Do "node"
01:57 < gluxon> var buffer = new Buffer(1024);
01:57 < gluxon> console.log( buffer.toString('hex') );
01:57 < gluxon> I get stuff....
02:21 < ChrisPartridge> gluxon: same on 0.8.x if it's any consolation
02:22 < gluxon> ChrisPartridge: Yes, I did just test that on 0.8.22
02:22 < gluxon> It's strange behavior..
02:22 < gluxon> And I have confirmed it is call stack memory....
02:29 < redhoodie> hi 
02:29 < ChrisPartridge> gluxon: https://groups.google.com/forum/?fromgroups#!topic/nodejs/gWfxHt53ors
02:30 < redhoodie> I installed node.js already, but I can't seem to get the jade file to render to HTML. Did I miss something here? 
02:31 <@isaacs> this is my new favorite tumblr: http://nodejsreactions.tumblr.com/
02:31 < deoxxa> redhoodie: almost definitely yes
02:31 < redhoodie> may I know what I  missed lol ?
02:31 < redhoodie> I need to install all the dependencies? 
02:31 < deoxxa> redhoodie: well you didn't mention installing jade or writing any code
02:31 < deoxxa> redhoodie: both of those things would be really really helpful for rendering jade to html
02:32 < ChrisPartridge> deoxxa: uhhh, we have to write code now?
02:32 < redhoodie> I did install jade already 
02:32 < redhoodie> okay I will try to install all the possible dependencies then
02:32 < redhoodie> Thanks
02:33 < deoxxa> ChrisPartridge: what does this look like, #not.js?
02:33 < deoxxa> :P
02:33 < deoxxa> redhoodie: if you installed jade with npm, you've already got the dependencies :>
02:33 < redhoodie> oh really?
02:33 < ChrisPartridge> isaacs: lol, the pipe one is great
02:33 < redhoodie> When I try to run node app.js 
02:33 < redhoodie> I get throw exception saying that I need express 
02:34 < deoxxa> well, maybe install express as well
02:34 < redhoodie> this is what I get when I try to install express 
02:34 < redhoodie> http://dpaste.com/1203173/
02:34 < deoxxa> redhoodie: stop using -g
02:34 < redhoodie> oh okay
02:35 < deoxxa> redhoodie: why were you using -g, may i ask?
02:35 < redhoodie> I don't know actually 
02:35 < redhoodie> I just follow a guideline on github .. 
02:35 < redhoodie> hmm without -g it actually works.
02:36 < deoxxa> redhoodie: well, when you install something with -g, you can't (without horrible hacks) require() it in your application
02:36 < redhoodie> oh 
02:36 < deoxxa> redhoodie: -g is almost exclusively for command line utilities (there are exceptions, but it's easier just to say it that way)
02:36 < redhoodie> now I get missing "connect-redis" 
02:36 < deoxxa> well, install that guy as well :>
02:37 < ChrisPartridge> redhoodie: if you have a package.json file, with your dependencies in it, you can just do "npm install" too 
02:37 < ChrisPartridge> (for future reference)
02:37 < redhoodie> oh cool 
02:37 < redhoodie> I do have it actually
02:37 < ChrisPartridge> cool, just run 
02:38 < ChrisPartridge> "npm install" then
02:38 < redhoodie> I did 
02:38 < redhoodie> It installed something, but I'm still not quite sure why I still can't get the jade file to render to HTML
02:40 < redhoodie> I get a couple warnings about "No repo field" 
02:43 < progrock`> redhoodie: I'm guessing that working is that you dont have a repo set for your project, not that it cant find dependencies
02:43 < progrock`> tho I may be wron
02:43 < progrock`> redhoodie: are you doing npm install as sudo?
02:43 < redhoodie> hmm It sounds like a good point. 
02:43 < redhoodie> no actually. 
02:43 < progrock`> give that a shot
02:44 < progrock`> getting jade templates to work, especially iwth express, is pretty simple
02:44 < redhoodie> I cloned the project to my computer
02:44 < redhoodie> yeah like it works so easily for my friend, but not for me which I don't quite get it. 
02:44 < progrock`> redhoodie: clone, cd to the rootof project, and sudo npm install (assuming your on a distro that uses sudo)
02:45 < progrock`> then node app.js and localhost:appPort
02:45 < progrock`> you should be good to go
02:46 < redhoodie> I still get this 
02:46 < redhoodie> http://dpaste.com/1203179/
02:47 < progrock`> well, warning, not errors, node app.js and see if it works
02:47 < redhoodie> Cannot find module 'connect-redis'
02:48 < redhoodie> That's what I'm getting right now
02:48 < progrock`> paste your package.json to dpaste
02:48 < redhoodie> http://dpaste.com/1203186/
02:48 < RyanHoegg> Hello… was the linux-arm-pi build intentionally left out of the 0.10.8 release?
02:49 < progrock`> redhoodie: well, i'm not familiar with the ~ syntax, but guessing thats not wrong
02:49 < redhoodie> It works for my coworker
02:50 < redhoodie> so I'm not quite sure what goes wrong from my side
02:50 < RyanHoegg> @redhoodie did you already type npm install from the same dir as the package.json file?  sorry for jumping in the middle
02:51 < progrock`> RyanHoegg: youre more than welcome to, haha
02:51 < redhoodie> yes I did RyanHoegg 
02:51 < RyanHoegg> and, did you see connect-redis in the output?
02:51 < progrock`> redhoodie: I may be wrong, but from the connect-redis site, you may have an older version od node-redis than it needs... tho I def could be wrong
02:52 < redhoodie> no RyanHoegg 
02:53 < redhoodie> so should I reinstall it ?
02:53 < redhoodie> or update 
02:54 < RyanHoegg> @redhoodie hmm, it installed for me, at least without using package.json: http://dpaste.com/1203193/
02:54 < RyanHoegg> try using the syntax I did and see if you get a different result
02:56 < redhoodie> I got a couple warnings, but now it still says that I need express when I run node app.ks
02:56 < redhoodie> *js
02:56 < RyanHoegg> npm uninstall connect-redis
02:56 < RyanHoegg> then npm install and dpaste the output
02:57 < RyanHoegg> also, should be node app, not node app.js.  npm start is even better :)
02:57 < progrock`> RyanHoegg: is there any difference between 'node app' and 'node app.js' ??
02:57 < redhoodie> install connect or express?
02:58 < RyanHoegg> @progrock` oops, I guess not … just tried it myself and it worked.
02:58 < RyanHoegg> @redhoodie just "npm install", nothing more
02:59 < redhoodie> oh I read on stackoverflow and they put node app.js 
02:59 < RyanHoegg> that might be the same thing :)
02:59 < redhoodie> http://dpaste.com/1203202/
03:00 < Havvy> There's no difference between `node app.js` and `node app` when in the working directory, there is a `app.js` and no `app`.
03:00 < sinclair|net> Havvy: that's the magic of node right
03:00 < sinclair|net> Havvy: you can say node app or node app.js
03:00 < sinclair|net> magic
03:01 < redhoodie> so do I run node app now?
03:01 < Havvy> sinclair|net: It's the magic of automatically adding a .js
03:01 < sinclair|net> Havvy: just magic
03:01 < RyanHoegg> no that broke bad
03:01 < RyanHoegg> @Havvy thanks
03:01 < sinclair|net> why are npm modules written so bad and never do what i want them to
03:01 < RyanHoegg> @redhoodie looks like it bombed doing something with postgres
03:02 < sinclair|net> why
03:02 < redhoodie> sorry but what does that mean ? RyanHoegg 
03:02 < Havvy> sinclair|net: Because anybody can add to npm.
03:02 < RyanHoegg> @sinclair|net mostly because they are all trojan horses, and not really javascript libraries
03:02 < sinclair|net> RyanHoegg: even the well intentioned libraries are a disaster waiting to happen
03:02 < RyanHoegg> @redhoodie look at line 172
03:03 < RyanHoegg> @sinclair|net aw, don't get so discouraged… <insert pep talk here>
03:03 < redhoodie> oh I see, what should I do then ? Is it because of my broken npm ?
03:03 < sinclair|net> RyanHoegg: i write everything from scratch
03:04 < RyanHoegg> @redhoodie looks like it wants to run pg_config … do you have pgsql all set up properly, and is pg_config on the path?
03:04 < RyanHoegg> @sinclair|net oh!  This is @node.js… I think you meant to /join @lisp :)
03:05 < RyanHoegg> er, #lisp
03:05 < sinclair|net> RyanHoegg: the only thing im using is socket.io
03:05 < redhoodie> This is my first time working with this, so I honestly don't know much about it
03:05 < sinclair|net> its the only thing so far worth any of my time and effort. 
03:05 < redhoodie> I'm a totally noob, so it'd be great if you can guide me through this RyanHoegg 
03:06 < RyanHoegg> @redhoodie, you put this in your package.json:     "pg": "~0.12.3",
03:07 < RyanHoegg> That means you want to depend on pg, which appears to be something that uses a postgresql client.  Your system doesn't appear to have one. (because the error said error executing pg_config)
03:07 < redhoodie> in dependencies?
03:07 < RyanHoegg> yep
03:07 < RyanHoegg> in general, only put things in the dependencies that you know you want there I think
03:07 < redhoodie> does that mean I also need to install pqsql in my system too?
03:07 < RyanHoegg> or, get rid of that dependency
03:08 < ningu> redhoodie: does your app use postgresql?
03:08 < ningu> redhoodie: what platform are you on?
03:08 < redhoodie> I'm on linux 
03:08 < redhoodie> This work isn't mine so I don't think I'm allowed to modify the package.jason
03:09 < ningu> if you need postgres you can install postgresql and postgresql-dev
03:09 < ningu> or whatever the exact package names are
03:09 < ningu> you need the dev for the headers to compile against the library
03:10 < ningu> that is the -dev package
03:10 < redhoodie> oh okay. I will try to install both then
03:10 < ningu> I don't know what you're doing but if pg is in package.json it may be there for a reason :)
03:11 < redhoodie> so do I need to install postgresql-server-dev too?
03:11 < ningu> yes
03:11 < ningu> oh
03:11 < ningu> no, not the server
03:11  * sinclair|net wonders what this javascript method returns, like all the other ones that take random objects and return random objects.
03:11 < RyanHoegg> if you need postgresql, you probably need the database schema too
03:11 < ningu> just the plain postgres dev
03:11 < redhoodie> I can't find the postgres dev 
03:11 < RyanHoegg> unless someone else provides a server you are supposed to use
03:11 < sinclair|net> [random object] -> [function] -> [random object]
03:11 < ningu> redhoodie: install the postgresql-server-dev then
03:11 < redhoodie> I got the postgresql installed though 
03:11 < ningu> I don't know what distro you have
03:11 < chilts> sinclair|net: you're not Auckland are you, you're Hamilton aye?
03:12 < redhoodie> mint maya
03:12 < sinclair|net> Auckland
03:12 < chilts> anywhere near the airport?
03:12 < sinclair|net> central
03:12  * chilts will be going through it on Saturday evening
03:12 < chilts> ah ok, no probs
03:12 < RyanHoegg> According to this, you should be able to find a connection string somewhere in the app: https://npmjs.org/package/pg 
03:12 < sinclair|net> chilts: you visiting NZ?
03:12 < chilts> sinclair|net: I live in Wellington :) (going to SF for a week)
03:13 < chilts> via AUK
03:13 < sinclair|net> chilts: oh oh, whats the nodejs work like in wellington ?
03:13  * chilts is currently contracting for a Melbourne company
03:13 < chilts> so that's the top and tail of it
03:13 < redhoodie> so I installed it ningu. Do I install npm again or run node app?
03:13 < sinclair|net> chilts: are you working for a agency ?
03:13 < sinclair|net> or on your own?
03:14 < chilts> btw, join the Node.js NZ group I started!!! :) https://groups.google.com/forum/?fromgroups#!forum/nodejs-nz
03:14 < chilts> sinclair|net: currently contracting through my own company, but will be in a full-time job from next week
03:16 < RyanHoegg> @redhoodie look through your code for a connection string
03:16 < RyanHoegg> I am guessing you should be using a pg server that already is running elsewhere
03:16 < redhoodie> huh?
03:16 < ningu> redhoodie: npm install
03:17 < ningu> not install npm :)
03:17 < RyanHoegg> In the documentation here: https://npmjs.org/package/pg you see the var conString="tcp…."?  You should be able to find something similar in your application.  My guess is the hostname will not be localhost
03:17 < RyanHoegg> And, that would mean you don't need to install a postgresql server, only the client
03:18 < redhoodie> I get this now http://dpaste.com/1203218/
03:19 < RyanHoegg> that looks better.  node app.js might do something more exciting now/
03:19 < redhoodie> but when I run node app by accident, it seems to work although I have problems with password authentication which should be from my side
03:19 < ningu> sinclair|net: btw if you want something cool to play on the guitar ;) https://www.dropbox.com/s/3s8emazh6si21cf/10%20Dorov%20Morlaril.mp3
03:19 < ningu> redhoodie: those warnings are fine.
03:19 < ningu> worry about errors :)
03:19 < redhoodie> oh cool! Got this
03:19 < ningu> I know it isn't totally intuitive at first
03:19 < ningu> but it isn't actually that complicated
03:20 < redhoodie> so what if I get this : throw er; // Unhandled 'error' event
03:20 < redhoodie>               ^
03:20 < redhoodie> error: password authentication failed for user "yubin"
03:20 < redhoodie> it's basically just from my side right?
03:21 < ningu> is that your postgres user?
03:21 < redhoodie> I need to do something to correctly authenticate the password right. 
03:21 < ningu> yes, but where did you specify the username?
03:21 < RyanHoegg> node.learn(function(err, callback) { node.try(function(err, callback) {node.troubleshoot(code); }); });
03:21 < redhoodie> I don't know 
03:21 < RyanHoegg> in the connection string
03:21 < ningu> I don't know if this app is connecting to a remote postgres database or what
03:22 < RyanHoegg> :) which you have to go find in your app
03:22 < ningu> well, whatever you're doing you need to connect to an actual postgres database with a valid user and password
03:22 < ningu> that part is nothing to do with node really
03:22 < redhoodie> I ran this before though  export ENVIRONMENT=YUBIN
03:22 < redhoodie> oh I see. 
03:22 < RyanHoegg> grep -lr 'tcp://' * might tell you
03:22 < ningu> ok
03:22 < ningu> does this app connect to a postgres database? does it expect it to be running on localhost?
03:23 < redhoodie> well What I was trying to do the whole night was being able to render jade file to HTML and work on the jade file 
03:23 < ningu> ok
03:23 < ningu> so why is there a database involved?
03:23 < redhoodie> but I think I ended up setting up the server instead I think
03:23 < RyanHoegg> So does anybody know why nodejs.org is missing the linux-arm-pi build of the 0.10.8 release? 
03:23 < redhoodie> I'm not quite sure actually 
03:24 < ningu> redhoodie: where did this code come from?
03:24 < RyanHoegg> @redhoodie you might be better off starting from scratch with an express app.
03:24 < ningu> yes, that's very good advice :)
03:24 < redhoodie> It's from my coworker.
03:25 < redhoodie> I'm trying to wrap my head around this whole thing. 
03:25 < ningu> ok, well perhaps your coworker runs it on a machine that has a local database
03:25 < redhoodie> Initially, I thought I was supposed to install node.js and then get it render to HTML 
03:25 < redhoodie> yup
03:25 < RyanHoegg> you might learn better building up from simple, rather than trying to pick apart complicated
03:26 < ningu> I mean, I can't really say if you don't want to pastebin the code
03:26 < ningu> or if he won't explain it to you
03:26 < redhoodie> the code of the jade file?
03:27 < ningu> no
03:27 < ningu> app.js
03:27 < ningu> to start with
03:27 < redhoodie> what does app.js actually do exactly?
03:27 < ningu> starts everything :P
03:29 < redhoodie> I wish I could, but there are some parts that I'm not quite sure that I would be able to reveal them as far as i know. 
03:29 < ningu> ok
03:29 < ningu> well, look in there for the pg stuff
03:29 < redhoodie> Would you guys still be here tmr when I ask him to explain it to me? 
03:30 < redhoodie> *after
03:30 < ningu> as someone said look for tcp://
03:30 < ningu> someone will be here
03:32 < redhoodie> I can't find it in the file
03:32 < ningu> redhoodie: can you grep the whole directory?
03:32 < ningu> find $dir -exec grep tcp:// {} ';'
03:33 < redhoodie> and?
03:33 < ningu> were there any results?
03:33 < ningu> replace $dir with the directory that has the app
03:34 < redhoodie> yeah I found 2 lines that have tcp://
03:34 < ningu> ok
03:34 < redhoodie> those are assigned to vars
03:34 < ningu> well that specifies the connection to the pg database
03:34 < ningu> it should contain a host name, possibly username and password
03:35 < redhoodie> so does that mean if I paste one of the tcp link in a web browser, I'd be able to see the hostname and password?
03:36 < ningu> no
03:36 < ningu> the tcp:// link is a url 
03:36 < ningu> it has the hostname of the database in it
03:36 < ningu> see the example in https://github.com/brianc/node-postgres
03:37 < redhoodie> Before that, I have this quick question. I can't see all the codes in a jade file simply because I don't have jade installed? 
03:37 < ningu> huh?
03:38 < ningu> jade files are just text files
03:38 < redhoodie> Well What I see on the github account is totally different from what I see in the file after I cloned it
03:38 < redhoodie> yeah. exactly 
03:38 < ningu> redhoodie: doubtful
03:38 < ningu> make sure you're checking the same file
03:39 < redhoodie> I thought all I need to do is using an editor and I could work on it. 
03:39 < redhoodie> yeah. 
03:39 < redhoodie> It's just the HTML headers and js are omitted in the one on my computer
03:39 < redhoodie> All I see is extends layout. 
03:40 < ningu> are you sure you aren't looking at the .html file in github and the .jade file on your computer?
03:40 < redhoodie> There isn't any HTML at all on github which is weird. 
03:40 < ningu> no, it isn't weird, I was just guessing
03:41 < redhoodie> Everything in that branch is jade files. 
03:41 < ningu> that's because the html is automatically generated
03:41 < redhoodie> oh okay. 
03:41 < ningu> you shouldn't see any literal html tags in a jade file
03:41 < ningu> i.e. no angle brackets
03:41 < redhoodie> yeah 
03:42 < redhoodie> hmm.. I just read the whole thing again 
03:43 < redhoodie> The branch I was reading is a php-jade but it's a jade file and it has meta tags and stuffs like that 
03:44 < Havvy> PHP-Jade makes me sad.
03:44 < redhoodie> but I cloned the exact branch and I don't see those tags. They aren't tags, but they are more like the way jade is supposed to show.
03:44 < redhoodie> if that makes any sense
03:45 < redhoodie> why Havvy ?
03:45 < ningu> redhoodie: doesn't make any sense to me
03:45 < redhoodie> so it has something like this 
03:46 < redhoodie> http://dpaste.com/1203230/
03:46 < redhoodie> on github
03:46 < redhoodie> but on my file it only has extends layout and some other stuffs
03:46 < Havvy> redhoodie: Because last I checked, it has no 'extends'.
03:47 < ningu> redhoodie: so those are two separate files.
03:47 < ningu> redhoodie: you checked out a different branch. who knows.
03:47 < ningu> different files are different
03:48 < redhoodie> oh okay 
03:49 < redhoodie> I will check it again then. It could be my fault
03:54 < ningu> sinclair|net: no comments about the throat singing mongolian music with tom waits' guitarist? ;)
03:55 < sinclair|net> ningu: amazing stuff
03:55 < sinclair|net> ningu: needs more shred https://s3-ap-southeast-2.amazonaws.com/sinclair-media/music/sinclair_shreds_volume_2.mp3
03:55 < ningu> hehe
03:56 < ningu> I heard that last night
03:56 < ningu> that's why I sent you the link
03:57 < progrock`> so if I so do a findAndModify with upsert, if I only have $set, not $set and $setOnInsert, I take it that it'll use the $set values for the new document
03:57 < yalamber> Hello, any body acan put lights on this question t stack overflow?http://stackoverflow.com/questions/16791909/server-performance-in-nodejs-script-running-forever/16792530?noredirect=1#16792530
03:58 < ningu> progrock`: I don't think so, actually
03:58 < ningu> but try it
03:58 < ningu> actually, maybe it will. I can't remember :)
04:00 < progrock`> pok, trial and error always works
04:05 < redhoodie> aha. I got this.
04:05 < redhoodie> Thanks everyone a lot. 
04:05 < ningu> was it the wrong branch? :P
04:05 < redhoodie> I was my fault. I didn't switch to the right branch 
04:05 < progrock`> lol, thought it didnt work.. then relized I didnt select what db i was in in the mongo shell
04:06 < redhoodie> yeah It was indeed
04:06 < progrock`> weird tho, it used the _id from the query, not what I intended, lol
04:06 < ningu> just don't git branch davidian
04:06 < redhoodie> well I learned something about node and postsql anyway :). so yay win win 
04:09 < ningu> it used the _id in the new record?
04:09 < ningu> you shouldn't include the _id in the $set anyway
04:09 < ningu> in the search condition, sure...
04:10 < progrock`> ningu: ok, seeing how youve been dead on with the mongo help.  I'm doing a findAndModify, where I know the _id does not exist, BUT, the upsert is adding it with the _id, when I want it to automatically create a new doc id
04:11 < progrock`> do I have to do multiple commands, or think theres an easy way around this?
04:12 < progrock`> basically instead of findAndModify with upsert, just do a findOne, and if its empty do an insert?
05:07 < grozamorei> hello everyone. could you advise small and robust template engine for node, which I should choose? don't really feel like experiencing each one to figure out.
05:07 < Havvy> EJS or Jade.
05:08 < grozamorei> Havvy: thank you, I'll try it out.
05:17 < ChrisPartridge> What are people using to interact with phantomjs?
05:49 < maxime_> Hi everyone. 
05:49 < darkPassenger> Im new to express, im wondering what does app.set can take in parameters ? 
05:50 < darkPassenger> if i wanna pass a json file accessible from the views
05:56 < ningu> darkPassenger: do you want it to be accessible from every view or just one?
05:58 < darkPassenger> from every view
05:58 < ningu> darkPassenger: you should do app.locals({ foo: bar });
05:58 < ningu> where foo is the name of the variable you want to appear in the view, and bar is the value
05:59 < darkPassenger> bar can be a function ? 
05:59 < ningu> sure
05:59 < ningu> but that wouldn't be the value of a json file
05:59 < ningu> do whatever you want, though
05:59 < darkPassenger> are the brackets necessary or is it just to mean that the content is replaceable
05:59 < ningu> no, the brackets are necessary
05:59 < ningu> it isn't valid JS otherwise
05:59 < ningu> {} is an object/collection
06:00 < darkPassenger> ningu: would I put the value of the name of the file or would i put the JSON.parse(file) method
06:00 < ningu> i.e. set of key-value pairs, associative array, whatever
06:00 < ningu> neither
06:00 < ningu> you would do { foo: require('./file') } if file.json is in the same dir as your app.js
06:00 < ningu> require() works on json files, it returns the parsed json object
06:00 < darkPassenger> is app.locals(... the same syntax for app.set ? 
06:01 < ningu> no
06:01 < ningu> app.locals takes an object
06:02 < darkPassenger> and app.set takes name value ? 
06:02 < ningu> yes, it takes two parameters
06:02 < ningu> app.set() is slightly odd, imo
06:03 < darkPassenger> ok
06:03 < darkPassenger> :)
06:03 < ningu> nothing wrong with it, I just mean it's slightly different from the normal way of doing things in JS
06:04 < darkPassenger> thats allright, Im totally new to node and specially to express
06:04 < darkPassenger> so i dont know much about that anyway
06:04 < darkPassenger> thanks for the info man
06:04 < ningu> sure
06:04 < tuhoojabotti> darkPassenger: You seem to be new to JS in general
06:05 < darkPassenger> absolutely
06:13 < darkPassenger> ha ! thank you !"
06:14 < darkPassenger> I just learned about javascript, html, css, node, jade, stylus and express in two week
06:14 < darkPassenger> ajax also
06:14 < darkPassenger> so its still simmering 
06:14 < darkPassenger> but it worked, thanks !
06:17 < tuhoojabotti> darkPassenger: What got you intersted?
06:38 < LLckfan> My modem went out I saw them come back on (like the cable company was working on the line) and now the router will not connect to the internet. Is there some way to get it to see the internet again without reinstalling the software? (BTW I am hooked up to the modem right now)
06:39 < GreenDog> usually just restarting the router is enough
06:39 < ljharb> unplug it and plug it back in
06:39 < ljharb> the modem too
06:42 < LLckfan> I have tried that
06:42 < LLckfan> Modem still works
06:42 -!- mode/#Node.js [+b *!*LLckfan@67.213.24.*] by Nexxy
06:42 -!- LLckfan was kicked from #Node.js by Nexxy [LLckfan]
06:42 < ningu> eh?
06:43 <@Nexxy> ningu, it's a troll that makes the rounds on freenode :)
06:43 < ningu> ok
06:43 <@Nexxy> thery're spamming me in PM lol
06:43 < ningu> I mean, it was very off topic
06:43 < ningu> but hadn't seen him/her/it before
06:43 < jesusabdullah> wait so someone wrote a modem in node.js?
06:43 < Lorentz> someone wrote a router in nodejs?
06:43 < jesusabdullah> modem.js
06:44 < tuhoojabotti> Lorentz: express has a router
06:44 < jesusabdullah> a) put mic on speaker b) put headphone on mic c) run node ./modem.js
06:44 < Lorentz> does NAT, dhcpd, middleware for qos and local dns etc, all in one package, AND serves http for maintainance interface?
06:44 < ningu> I used to not mute my modem cause I liked the sound
06:45 < ljharb> i loved the sound
06:45 < ljharb> it told me exactly what the BBS was saying 
06:45 < ningu> just while it was connecting
06:45 < Lorentz> I shorted it out so I would never hear it, the buzzer speaker thing
06:46 < ningu> I remember being surprised/sad when Hayes went out of business
06:46 < JosephFerano> hey guys, this is a complete noob question, I'm trying to use Browserify and brfs, I'm trying to use fs.readFileSync(), but I'm getting the following error; 
06:46 < JosephFerano> Object #<Object> has no method 'readFileSync' 
06:46 < ningu> I was like... but it's their command set... how can they go away?
06:46 < JosephFerano> do I have to run a node server or something in order to use the api?
06:46 < ningu> JosephFerano: I'm a bit confused... you can't open a file in the browser, can you?
06:47 < ningu> I don't know what brfs is, though.
06:47 < sinclair|net> does anyone here know anything about phantomjs?
06:47 < jesusabdullah> ningu: brfs is a browserify thing
06:47 < JosephFerano> ningu: it just searches for fs.readFileSync() and adds html to the file
06:47 < ningu> ah, ok
06:47 < ningu> JosephFerano: can you paste your code at gist.github.com?
06:47 < JosephFerano> so I'm compiling with browserify in the cli, but it spits out that error
06:47 < JosephFerano> sure
06:48 < ningu> oh, wait, that happens before you even make the browserify bundle?
06:48 < JosephFerano> http://hastebin.com/qayufikojo.js
06:48 < JosephFerano> I have hastebin in sublime text 2 :D
06:48 < substack> JosephFerano: how are you compiling your code?
06:48 < substack> you've got to -t brfs
06:49 < JosephFerano> substack: I'm a complete noob, I forgot about that :(
06:49 < JosephFerano> thanks
06:49 < ningu> I was just doing browserify --help and saw the -t
06:49 < ningu> which is in brfs docs
06:49 < JosephFerano> yeah, thanks substack, completely forgot
06:49 < ningu> but I have no idea what "Use a transform module on top-level files." actually means :)
06:50 < ningu> ah I see, it's in the browserify docs.
06:50 < JosephFerano> how come though substack? why do I have to do that to use a node api function?
06:51 < substack> JosephFerano: because brfs is an external module, not part of browserify core
06:51 < JosephFerano> ok
06:51 < JosephFerano> right but fs.readFileSync() is a node api function, no?
06:52 < JosephFerano> I'm just a little confused here
06:52 < ningu> "module-deps can be configured to run source transformations on files before parsing them for require() calls. These transforms are useful if you want to compile a language like coffeescript on the fly or if you want to load static assets into your bundle by parsing the AST for fs.readFileSync() calls.
06:53 < ningu> so I guess it goes through and replaces fs.readFileSync() with the contents of the file?
06:53 < JosephFerano> right
06:54 < ningu> now we just need bowserify
07:00 < qwerty|> 5
07:01 < ljharb> 6
07:02 < jesusabdullah> 7
07:02 < ningu> you both just counted higher than some languages can go
07:02 < ChrisPartridge> ningu: bowserify? is that the mario version of browserify?
07:03 < ningu> ChrisPartridge: yes, I'm still trying to fully imagine what it would be :)
07:04 < JosephFerano> what's the best way to initialize a module in browserify/node?
07:05 < ningu> what do you mean by initialize?
07:05 < JosephFerano> I'm not sure
07:05 < ljharb> perhaps you should figure that out before asking your question :-p
07:06 < JosephFerano> ok, I'm trying to delay the initialization of modules so they happen in the window.onload event, so that getElementById can get a div, currently it's not finding it presumably because the body hasn't loaded yet
07:07 < ljharb> O.o don't do that
07:07 < ljharb> have your module export a function. and in the browser, run that function onload.
07:07 < ningu> module.exports = { init: init }; var foo = require('foo'). window.onload(foo.init);
07:07 < ljharb> no need for the object there :-) module.exports = init. window.onload(require('foo'))
07:08 < ningu> sure
07:08 < ningu> but you might want to have other methods
07:08 < ningu> either way
07:08 < ljharb> nah, modules should ideally export one thing :-)
07:09 < JosephFerano> ok
07:10 < JosephFerano> what I'm confused about is how to do that in the head, should I do a require in the head?
07:10 < ljharb> you can do a require anywhere, once the require function is available
07:10 < ljharb> but i'd probably do it at the end of the body
07:10 < ningu> you just do it after your browserify bundle is loaded
07:12 < JosephFerano> ok
07:12 < JosephFerano> let me try that
07:16 < JosephFerano> http://hastebin.com/tiqafoguwi.html
07:17 < ningu> JosephFerano: hopefully you didn't mix together ljharb and my methods...
07:17 < ningu> is there a reason you aren't just doing window.onload = mainObj.init?
07:18 < ningu> anyway, if bundle.js is correct it should be fine
07:18 < JosephFerano> it says require is not defined
07:18 < ningu> how are you generating bundle.js?
07:18 < JosephFerano> with browserify
07:19 < ningu> yes, with what line/
07:19 < ningu> ?
07:19 < booyaa|foo> hey guys could i use pubsub to flip between listening to or ignoring an emitted event? example: if the app is configured to watch a dir then it will emit an event on changes. otherwise it shouldn't emit or perhaps i should listen for the event? does any of that make sense?
07:19 < ningu> should be with browserify main.js > bundle.js
07:19 < JosephFerano> I'm doing browserify -t brfs min.'s > bundle.js
07:19 < JosephFerano> stupid spellchecker
07:20 < JosephFerano> browserify -t brfs main.js > bundle.js
07:20 < booyaa|foo> basically i want the option to either not emit or listen to events that doesn't involve too many ```if (!listening)```  checks
07:20 < ningu> JosephFerano: hrm... actually I don't think browserify main.js > bundle.js allows you to require('main')
07:21 < JosephFerano> alright
07:21 < ningu> but require should definitely be defined
07:21 < ningu> I have only used browserify for a couple things
07:21 < substack> JosephFerano: require() is only defined INSIDE the bundle
07:21 < ningu> ah, ok
07:21 < substack> if you want to use it outside, you'll need to use -r
07:21 < ningu> yeah, I've used it with -r
07:21 < substack> to explicitly export individual files
07:21 < substack> and require('main') would never work
07:22 < substack> that's not how node's module resolution algorithm works
07:22 < substack> you would do require('./main.js')
07:22 < JosephFerano> ok
07:22 < substack> supposing you did -r ./main.js
07:22 < JosephFerano> how would you recommend I delay initialization of the modules?
07:23 < ningu> I mean, you could just do window.onload = foo from within main.js
07:23 < JosephFerano> oh...
07:23 < JosephFerano> lol, ok
07:23 < ningu> that would be the obvious thing, to me, unless I am confused :)
07:23 < JosephFerano> I'm new to this stuff… I'm a C# game dev...
07:23 < ningu> you can still do it the -r ./main.js way
07:23 < ningu> but whatever substack says is obviously right given that it's his module
07:24 < ningu> in case of conflict between something I'm guessing and something he knows :P
07:24 < JosephFerano> yeah
07:24 < ningu> it would be surprising to me though if window was not available from main.js
07:24 < ningu> not sure if you could even do that if you wanted to
07:25 < JosephFerano> your simple solution worked, thanks
07:25 < ningu> :)
07:26 < JosephFerano> oh my gerd this works now
07:26 < ningu> so you just stick with browserify main.js > bundle.js?
07:26 < JosephFerano> yup
07:26 < ningu> that seems the easiest way to me, then just one script tag for everything
07:27 < JosephFerano> substack: would you also recommend I use fs.readFileSync() to load the css? or should I consider concatenating the css? it seems to work with the css...
07:27 < JosephFerano> yup, then I can have an init inside of the modules as well and just call myModule.init() for all modules loaded in the main.js file
07:27 < ningu> why do you want the css in your js?
07:27 < ningu> do you want to parse it or use it from js somehow?
07:28 < JosephFerano> I have components in their own folder, with js, html, and css files
07:28 < ningu> right, but is there a reason you wouldn't just load the css with a link tag like usual?
07:28 < JosephFerano> I could do that, inside the html
07:29 < ningu> css goes with html unless you are trying to generate css from js
07:29 < JosephFerano> the issue would be that with all of the components I have, it would have several links
07:29 < ningu> oh
07:29 < ningu> yeah, use grunt for that if you want
07:29 < JosephFerano> so a concatenation might be best
07:29 < ningu> or do it manually
07:29 < ningu> grunt has concat and cssmin tasks
07:29 < JosephFerano> yeah, that's next on my list, until I feel confident in being able to use and implement browserify and brfs
07:29 < JosephFerano> yeah, that's great, I'll probably use that
07:29 < ningu> oh there's also @import
07:29 < ningu> but I think that results in multiple http requests
07:30 < JosephFerano> ok
07:30 < ningu> if you use stylus, and @import another .styl file it will show up inline
07:30 < JosephFerano> the only issue I see with brfs is that the html basically gets duplicated, but it's not that big of a deal I guess
07:30 < JosephFerano> cool
07:30 < ningu> well I dunno what you're using it for...
07:30 < JosephFerano> so I can load the html files in the build so it's already included
07:31 < ningu> right but again why do you want it in your js, is it a template?
07:31 < JosephFerano> solution works great, unless you have another idea on how to do it
07:31 < ningu> and you're rendering templates in the browser?
07:31 < JosephFerano> no it's not a template, I don't necessarily want it in my js, I just dont know any other way to do it
07:31 < ningu> err... huh?
07:31 < ningu> have you ever set up a web server?
07:32 < JosephFerano> how can I do it without an async call and have it load into a specific div?
07:32 < JosephFerano> it can't be async
07:32 < JosephFerano> client requires that it run locally
07:32 < JosephFerano> that's what's making this whole thing this complicated
07:32 < ningu> yes, but why not just have an html file (which you could generate from a template if you want) that loads bundle.js with a script tag?
07:32 < ningu> what are you using this 'other' html for?
07:32 < JosephFerano> each component has its own html file
07:33 < ningu> is there no node.js app behind all of this or something?
07:33 < JosephFerano> https://github.com/visionmedia/uikit/tree/master/lib/components/dialog
07:33 < JosephFerano> sort of what he does
07:33 < JosephFerano> nope, I'm not really using anything else from node
07:33 < JosephFerano> to my knowledge
07:34 < ningu> hmm
07:34 < ningu> well, yeah, if there is no local web server running that's a bit of an issue
07:34 < JosephFerano> yup
07:34 < JosephFerano> so far, substack's brfs is the best solution I've found
07:34 < ningu> I guess how you're doing it would work
07:35 < [AD]Turbo> ciao all
07:35 < JosephFerano> ciao
07:35 < ningu> not sure what would be better to keep it clean
07:35 < JosephFerano> right
07:35 < ningu> you don't want to use iframes etc.
07:35 < JosephFerano> I dont?
07:35 < ningu> well, *I* wouldn't :)
07:35 < JosephFerano> yeah, that might complicate the component system, wouldn't it?
07:36 < ningu> I like to keep everything on one page that is meant to look like one page
07:36 < ningu> all I meant was, that would let you have multiple html files on one page without needing ajax requests
07:36 < ningu> but it's messy
07:36 < JosephFerano> yeah, it wouldn't work well at all with this project
07:37 < ningu> if you don't mind using js to insert the html in, that will give you more flexibility
07:37 < JosephFerano> this project is going to have 30+ little modules that will be reused across 24 or so mini-apps
07:37 < ningu> you should also look into browser templating systems too -- jquery templates, jade, etc.
07:37 < ningu> I mean template compilers that run in the browser
07:37 < JosephFerano> what would that do for me? (there is no back-end here as well)
07:38 < ningu> yeah, it would all run in your js
07:38 < ningu> you could look over data or whatever to generate your html
07:38 < JosephFerano> ningu: should I really be worrying about messy build files though? it seems like the compiled files can be whatever
07:38 < ningu> just think of it as compile(str) where str = the template that you've loaded with brfs
07:38 < JosephFerano> ok
07:38 < ningu> oh... well, yeah, but once they're compiled they're static
07:38 < JosephFerano> that's perfectly fine for this project
07:39 < ningu> and you have to manipulate them with jquery or whatever to change them which is kind of annoying
07:39 < ningu> ok, well in that case I guess it doesn't matter
07:39 < JosephFerano> ok :)
07:39 < JosephFerano> I appreciate your help
07:39 < ningu> anyway you could perfectly well use jade or handlebars, and then feed your app a json object as data and render the template with it
07:39 < JosephFerano> I'm going to try and install browserify now so I can get the css concatenation working
07:39 < ningu> but it sounds like that isn't what you need
07:40 < JosephFerano> I'm currently using json just for config files pretty much
07:40 < JosephFerano> and yeah, the html is stupid simple, at the most, a component will have 5-10 lines of html code as a skeleton, I'm generating a lot of html with javascript, because it uses json config files to create views
07:41 < ningu> well, if you'd rather generate it programmatically in js than in a template language, it comes down to the same thing I suppose
07:41 < JosephFerano> oh I see, so that's what a template language would do for me? I can take a json and populate a div with tags easier?
07:42 < ningu> yeah, you'd do something like,
07:42 < ningu> for i in foo
07:42 < ningu>   span=i
07:42 < JosephFerano> oh nice
07:42 < ningu> that's jade
07:42 < JosephFerano> that's pretty simple
07:42 < ningu> handlebars looks more like html
07:43 < JosephFerano> I have one component that generates tables and stuff, that would help
07:43 < ningu> that would make a series of spans containing the (escaped) text of i inside
07:43 < JosephFerano> cool
07:43 < ningu> you can do it from jquery too obviously
07:43 < JosephFerano> ok
07:43 < ningu> substack also has a thing called... I forget the name :P
07:44 < JosephFerano> yeah, im just currently using for loops and reading the json, the good ol' fashioned (and inefficient) way
07:44 < ChrisPartridge> ningu: automated anything with phantomjs by any chance?
07:44 < ningu> well there is no one right way to generate html
07:44 < ningu> ChrisPartridge: nope, sorry
07:44 < ningu> hyperglue, that's substack's thing
07:45 < ljharb> JosephFerano: use forEach and iterators, instead of loops :-)
07:45 < ningu> JosephFerano: I would just look briefly at a couple of those modules and see which you like
07:45 < JosephFerano> ljharb: actually yeah, I'm using jquery each method, now that I remember :D
07:45 < ningu> jade and handlebars would be the main ones that would occur to me but other people like other things
07:45 < JosephFerano> thanks ningu
07:46 < ljharb> JosephFerano: gross. $.fn.each should only be used on a jquery collection, not on arrays or objects.
07:46 < JosephFerano> well, next stop on my list is getting grunt running
07:48 < substack> ningu, ChrisPartridge: I have 3 things actually: hyperglue, hyperspace, hyperstream
07:48 < substack> hyperglue and hyperspace work in node and browsers, hyperstream is just node but good for delivering the initial payload before handing off to hyperspace which uses hyperglue internally
07:50 < substack> see also https://github.com/substack/stream-handbook#html-streams-for-the-browser-and-the-server
07:50 < substack> and this example sequence which builds a twitter-style realtime feed with the initial payload rendered server-side and the realtime updates rendered in the browser using the same rendering logic https://github.com/substack/hyperspace#example
08:02 < ningu> mralph on the latest nodeup mentions a "test suit", that's kind of cute
08:02 < ningu> mraleph*
08:04 < thirdknife> I am using async, I have a variable init before async.eachSeries( , during the loop i set some values into that variable but when the async call is finished the variable is set to null 
08:04 < thirdknife> any thought, I am stuck for a while now
08:05 < JosephFerano> http://hastebin.com/xevopigona.js
08:05 < ningu> thirdknife: probably depends on the closure the variable is in and where you're accessing it from
08:05 < JosephFerano> here's something odd, if I use innerHTML, it works fine, if I use appendChild, it throws an error
08:05 < JosephFerano> http://hastebin.com/yoyotojese.js
08:05 < JosephFerano> here's the whole code
08:05 < substack> JosephFerano: you can't appendChild(string)
08:05 < JosephFerano> ah
08:05 < substack> you can only appendChild(domElement)
08:06 < JosephFerano> ok, thank you
08:06 < substack> what you have with innerHTML is fine
08:06 < JosephFerano> innerHTML it is
08:06 < ningu> thirdknife: if you pastebin the code one of us could take a look
08:06 < ningu> or hastebin or gist or... 
08:06 < thirdknife> ok
08:07 < RLa> there's also textContent property
08:14 < thirdknife> ningu, http://hastebin.com/tecenuriko.lua
08:15 < ningu> ok and what ends up as null?
08:16 < thirdknife> []
08:16 < ningu> what's the name of the variable?
08:16 < thirdknife> jsonresponse
08:16 < ningu> oh I see, you have comments
08:17 < thirdknife> is it due to using async within async
08:17 < thirdknife> ?
08:17 < ningu> no
08:18 < ningu> thirdknife: you need to move cb(err) on line 38 to go after line 34, inside the callback
08:18 < ningu> you are finishing the outermost async.eachSeries before the inner one has a chance to finish
08:19 < ningu> because cb(err) is called immediately
08:19 < thirdknife> ok checking
08:19 < ningu> callbacks happen "in the future"
08:19 < ChrisPartridge> quick, to the delorean
08:19 < ningu> this one is a bit complicated cause you have a couple nested futures, but ...
08:20 < thirdknife> yeah it worked, you'r right
08:20 < thirdknife> thanks ningu 
08:20 < thirdknife> ningu++
08:20 < ningu> thirdknife: so, function(err) on line 28 is called when async.eachSeries on line 11 is done
08:20 < ningu> but line 38 happens right after you call line 11, but before it's done
08:21 < ningu> and then the async.eachSeries on line 3 thinks that item is done
08:21 < ningu> so pretty soon it thinks they are all done, except they aren't, actually
08:21 < ningu> according to what you want to do
08:21 < ningu> anyway
08:21 < ningu> should be clear now, I hope
08:21 < thirdknife> yeah understood
08:21 < ningu> :)
08:23 < ningu> we should have an asynchronous code debugging challenge
08:23 < ningu> or something
08:25 < ningu> wait... it's brilliant... asynchronous cod. amirite?
08:26 < ChrisPartridge> if I knew what you were talking about, you may very well be right :)
08:27 < ningu> haha
08:27 < ningu> I'm just being strange
08:27 < ningu> I'm thinking like, you could have multiple cod doing things at once
08:28 < ningu> out there in the north sea somewhere
08:28 < ningu> I guess cod are by nature asynchronous
08:29 < JosephFerano> hey ning
08:29 < JosephFerano> ningu
08:30 < ningu> yeah?
08:30 < JosephFerano> http://codetheory.in/fast-automatic-browserify-bundling-with-beefy/
08:30 < JosephFerano> so I did that, how do I close the server/port
08:30 < JosephFerano> ?
08:30 < ningu> if -d means daemonize you'll have to kill the process
08:31 < ningu> ps aux | grep beefy
08:31 < ningu> I dunno, I've never used it
08:32 < JosephFerano> -d just enables source maps apparently
08:32 < ningu> yeah I see
08:32 < ningu> you can't just control-c in the terminal?
08:32 < JosephFerano> let me try that
08:33 < JosephFerano> oh there we go, I was pressing command-c
08:33 < JosephFerano> derp
08:33 < ningu> :)
08:42 < Boaah> Hi, i got a problem with the attribute of an object. Everytime i want to use data.available it is undefined. But when i just look at the data object, available is defined. http://pastebin.com/6Xhxt97j What is the problem? :/
08:46 < greelgorke> Boaah: what is the result when yoou print console.log(typeof data)?
08:46 < Boaah> greelgorke: object
08:47 < greelgorke> and Object.toString.call(data)?
08:47 < greelgorke> better Object.prototype.toString.call :)
08:49 < Boaah> Object.toString.call(data) ends with TypeError: Function.prototype.toString is not generic
08:49 < greelgorke> try Object.prototype.toString.call 
08:50 < Boaah> console.log(Object.prototype.toString.call) outputs [Function: call] or should i replace the Object with the object i want to use?
08:51 < greelgorke> console.log(Object.prototype.toString.call(data))
08:51 < Boaah> greelgorke: [object Object]
08:52 < greelgorke> then i have no idea. is your pastebin comprehend or does something happen between the 2 logs in original code?
08:53 < Boaah> nothing happens between the two console logs
08:53 < Boaah> when i want to output annother attribute like name it works.. just available seems undefined..
08:54 < ningu> Boaah: is this an object in mongoose?
08:54 < ningu> maybe it has something to do with your schema or a conflict with it
08:54 < Boaah> ningu: yes
08:59 < JosephFerano> substack: I tried using beefy but I can't seem to get it to work, it's not building the bundle.js file at all
08:59 < JosephFerano> beefy bundle.js:main.js --open --browserify brfs
08:59 < JosephFerano> that's the command I'm using
08:59 < JosephFerano> if I invert bundle and main, it doesn't work all that well either
09:00 < JosephFerano> I'm using my own index, btw
09:52 < sinclair|net> you know what would be great
09:53 < sinclair|net> if someone wrote a full imaging library in pure nodejs, 
09:53 < sinclair|net> that was built on asm.js
09:54 < sinclair|net> so, do you suppose there are any plans to implement the asm.js instruction set on node?
09:57 < jesusabdullah> why not just write one on top of node-canvas?
09:57 < sinclair|net> jesusabdullah: did that TJ Holowaychuk guy write that?
09:58 < sinclair|net> jesusabdullah: i won't touch express with a 10 foot pole, i wont be going near anything else he has written
09:59 < sinclair|net> jesusabdullah: also -> http://i.imgur.com/tfeft.png
10:00 < jesusabdullah> sinclair|net: that is a strange attitude
10:00 < sinclair|net> jesusabdullah: i don't "need" anything TJ has written
10:01 < jesusabdullah> but why such a dismissive attitude? node-canvas is nice, straightforward
10:01 < jesusabdullah> is this like something personal against tj? one library isn't your bag and everything he's touched is off-limits?
10:01 < sinclair|net> jesusabdullah: it also produces sub standard results
10:01 < jesusabdullah> seems vindictive to me
10:02 < ferno> Is there any way to render multiple views for a single request with express's res.render()?
10:03 < sinclair|net> jesusabdullah: ^ see
10:03 < ferno> I want to "append" views dynamically depending on the request.
10:03 < sinclair|net> jesusabdullah: its not like ferno would know any better
10:03 < ferno> sinclair|net: Thanks for speaking to me directly :)
10:03 < jesusabdullah> sinclair|net: that makes no sense
10:04 < jesusabdullah> ferno: I don't think so but I'm not sure
10:04 < hipsterslapfight> sinclair|net: so what's wrong with express then
10:04 < sinclair|net> ferno: you can output multiple views
10:04 < ferno> sinclair|net: Can you ship a link to docs referencing this?
10:04 < sinclair|net> ferno: but you are probably going to want to use a templating framework instead
10:04 < ferno> I couldn't find anything through my googling
10:05 < sinclair|net> ferno: sorry, can you explain your intent again to me?
10:05 < sinclair|net> what do you mean, "output multiple views"
10:05 < ferno> sinclair|net: I want to append views to other views dynamically
10:05 < ferno> 'Views' being .jade files
10:06 < sinclair|net> ferno: append in what way?
10:06 < ferno> Literally.
10:06 < sinclair|net> can you just use template inheritance for that?
10:06 < ferno> So, view1 + view2 = composite view -> render
10:06 < sinclair|net> [master] -> [a] [b]
10:06 < ferno> How can you use template inheritance dynamically?
10:06 < sinclair|net> yes
10:07 < ferno> I want to stitch views together based on request.
10:07 < sinclair|net> by using something other than TJ's ejs and jade
10:07 < ferno> Right....
10:07 < sinclair|net> and having a logic template
10:07 < hipsterslapfight> you can use ejs fine
10:07 < ferno> I think I'll pass
10:07 < hipsterslapfight> send a variable through marking what should be composed
10:07 < hipsterslapfight> then <% include %> the necessary files
10:08 < ferno> Ahh, I like :) Perfect.
10:08 < ferno> sinclair|net: What do you dislike about ejs/jade?
10:08  * sinclair|net misses .net razor templates
10:08 < gildean> sinclair|net: your complaints sound like something personal and nothing to do with the modules themselves
10:09 < ferno> Ikr :D
10:09 < ferno> + Answering a question with "use a different framework" is very counter productive.
10:10 < jesusabdullah> gildean: that's what I'm sayin'
10:10 < sinclair|net> ferno: i didnt say not to use express
10:11 < ferno> sinclair|net: No, but you gave off a hint of douchebag
10:12 < sinclair|net> gildean: oh, i come across TJ 's comments online every now and again, most of what TJ says are opinionated rubbish also
10:12 < ferno> sinclair|net: Back up your claims with evidence? Ship links?
10:13 < sinclair|net> like, his remarks on things like TypeScript, and questioning why anyone would want to "add dynamic routes at runtime" using express(), 
10:13 < sinclair|net> just things i completely disagree with
10:14 < sinclair|net> what bothers me is just that he threw together a sinatra clone, people take what he says as gospel, and i just don't by into it. 
10:14 < sinclair|net> id rather take meteor 
10:15 < tomb> everything in the world of programming is opinionated
10:15 < sinclair|net> tomb: yup, and it is of my opinion to never use express
10:16 < tomb> in my opinion I would never build a website using node :P
10:16 < sinclair|net> and lets be honest, there is very little to express anyway
10:16 < ferno> Can you use Sinatra with Node?
10:16 < ferno> tomb: Why not?
10:16 < substack> tomb: what a relativist thing to say
10:16 < sinclair|net> tomb: touche' :D
10:16 < tomb> substack: which bit?
10:16 < substack> regarding "everything in the world of programming is opinionated"
10:17 < substack> I don't think this is the case.
10:17 < tomb> you name your variable, in your opinion it's the right name
10:17 < tomb> you accept a pull request, in your opinion it's worth it
10:17 < substack> like euclid's algorithm isn't opinionated
10:18 < substack> it doesn't matter what you call the parameters
10:18 < ferno> tomb: You can say that about anything though
10:18 < tomb> substack: choosing to implement it is an opinion
10:18 < ferno> I ate food today, in my opinion, it was worth it.
10:18 < tomb> ferno: that's my point
10:18 < standoo> Genatz?
10:18 < tomb> my argument is that disliking something because it's opinionated is pointless
10:18 < tomb> because everything we deal with is based on someones opinions
10:18 < sinclair|net> ferno: anyway, feel free to carry on with express, good luck with your templates
10:18 < ferno> Well, meh, that depends on the tone/attitude of the opinion.
10:18 < tomb> ferno: that's true
10:18 < ferno> If it's a hostile one that puts down other points of view.
10:18 < substack> so the other question is what do we do in the face of a plurality of mutually exclusive opinions
10:19 < ferno> ...they can be mutually exclusive, they don't need to be hostile.
10:19 < substack> if everybody writes tiny abstractions that have a minimum of opinions, people with differing opinions can share code and not need to reinvent so much
10:19 < ferno> "tiny abstractions"?
10:19 < ferno> You abstracted away a bit of the meaning there.
10:19 < substack> like euclid's algorithm is a great example
10:20 < jesusabdullah> sinclair|net: I think you mischaracterize the dude
10:20 < substack> the gcd() function
10:20 < sinclair|net> substack: i dont agrre with tiny abstractions
10:20 < jesusabdullah> also I think small abstractions can be good and so can larger ones
10:20 < jesusabdullah> ideally the big ones are built out of the small ones
10:20 < substack> yes that is the best
10:21 < sinclair|net> jesusabdullah: i don't have any personal issues with tj at all, rather i do not understand the popularity of express, its a clone of something else
10:21 < sinclair|net> anyone could have written it
10:21 < jesusabdullah> and guess who did?
10:21 < jesusabdullah> That takes non-trivial effort
10:21 < ferno> Does Sinatra work with Node?
10:21 < jesusabdullah> and anyways it's not like anyone tried to cover it up
10:21 < sinclair|net> ...it is trivial
10:21 < jesusabdullah> ferno: no sinatra is a ruby framework
10:21 < jesusabdullah> sinclair|net: so why didn't you write it?
10:21 < ferno> Soo, it isn't a clone.
10:22 < sinclair|net> jesusabdullah: i did write my own
10:22 < ferno> I know what sinatra is, that was a rhetorical question.
10:22 < ferno> If Sinatra worked with Node, then express would be a clone.
10:22 < ferno> That's like saying the Tesla Roadster is a clone of a Hummer
10:22 < jesusabdullah> sinclair|net: I mean, good for you, you're missing the point
10:23 < jesusabdullah> sinclair|net: the point is that tj may not have razed boundaries but he put a lot of sweat making something that's, really, very polished
10:23 < ferno> sinclair|net: You a Ruby fan/user?
10:23 < sinclair|net> express is rather polished
10:23 < jesusabdullah> for everything else you can say that's bad about express (there are legitimate gripes), express is polished
10:24 < sinclair|net> ferno: nope, .net here, i like the asp mvc stack
10:24 < jesusabdullah> gross
10:24 < ferno> Ikr.
10:24 < sinclair|net> gross as in it handles all the things express doesn't?
10:25 < ferno> ...What?
10:25 < ferno> What are you comparing exactly?
10:25 < ferno> Express and ASP.NET?
10:26 < sinclair|net> ferno: all i said was i like asp mvc
10:26 < ferno> "gross as in it handles all the things express doesn't"
10:26 < sinclair|net> yeah, it handles a lot of things express doesn't
10:27 < hipsterslapfight> are we comparing a rather large mvc to a tiny framework
10:27 < hipsterslapfight> this is fun
10:27 < ferno> Not sure you can make that comparison.
10:27 < sinclair|net> im not comparing
10:27 < ferno> This pear is so much better than the screwdriver I bought last week!
10:27 < ferno> You made the comparison in your original statement.
10:27 < gildean> sinclair|net: i'm pretty sure express will handle everything you make it handle
10:27 < sinclair|net> gildean: as will anything
10:28 < gildean> imo not having all the possible shit shoved in is a good thing
10:28 < sinclair|net> gildean: tho, i have to fight just as hard to do these things on express as i would anything else
10:28 < ferno> You can't compare express and ASP.NET like that xD
10:28 < hipsterslapfight> express was (one of) the first, and has been (one of) the best maintained
10:28 < hipsterslapfight> if we're talking node frameworks
10:28 < gildean> not really, imo the connect-middleware design is pretty good and simple
10:28 < hipsterslapfight> 99% of them fall by the wayside within months
10:28 < sinclair|net> ferno: i am not comparing, you are 
10:29 < hipsterslapfight> express is only a few hundred lines of code at the heart of it isn't it?
10:29 < sinclair|net> gildean: you mean like Sinatra middleware?
10:29 < gildean> hipsterslapfight: yeah, the main functionality comes from connect
10:31 < sinclair|net> middleware is fine as a concept, i have no problem with it, but not everything you do strictly fits into a middleware module or a route
10:32 < sinclair|net> also, middleware is a "all in scenario" unless you hack it for specific routes
10:32 < hipsterslapfight> i've yet to come across anything :v
10:32 < sinclair|net> then you have routes, and middleware routes, 
10:32 < sinclair|net> and it gets crazy
10:32 < sinclair|net> some routes use some middlewares
10:33 < sinclair|net> not, all routes use all middlewares
10:33 < hipsterslapfight> sinclair|net: what you need then is multiple express apps ... if i'm understanding your compliant
10:33 < whyhankee> hey, talking about connect, is that general enough to be used in non-webserver applications, by example: a amqp-consumer?
10:33 < sinclair|net> and what starts seeming like a elegant idea has turned into a not so elegant hack
10:34 < whyhankee> i would like to have some middleware abstraction, and connect seems like the way to go, but i dont really have 'routes' as webservers have them
10:34 < sinclair|net> hipsterslapfight: express doesn't do it for me im afraid 
10:34 < sinclair|net> my stuff does do that
10:34 < hipsterslapfight> are you sure it's not tj that doesn't do it for you?
10:34 < sinclair|net> to the level of users having specific middleware applied
10:35 < hipsterslapfight> so what's your stuff then sinclair|net
10:35 < hipsterslapfight> where's the github link
10:35 < ferno> I'd love to see that
10:35 < sinclair|net> hipsterslapfight: my stuff is sitting in a private repo
10:35 < ferno> Ah, damn, so close.
10:35 < hipsterslapfight> of course it is sinclair|net
10:35 < ferno> Right, totally believed you anyways.
10:36 < sinclair|net> hipsterslapfight: whats wrong with that?
10:36 < ferno> sinclair|net: Do you build rocket ships too?
10:36 < hipsterslapfight> even if it is, writing something for yourself is not at all equivalent to writing things for other people
10:36 < ferno> Out of muffins?
10:37 < sinclair|net> ferno: run back to express
10:37 < ferno> Ahh, is sinclair|net angwweeee?
10:38 < sinclair|net> hipsterslapfight: you can go and have a play with a typescript.api node package if you want to
10:39 < sinclair|net> i put hours into that and gave that away for free
10:39 < ferno> "hours" being less than 100?
10:39 < hipsterslapfight> oh, typescript :(
10:39 < ferno> Like, 10 hours?
10:39 < hipsterslapfight> that's like coffeescript for microsoft fans yes?
10:40 < sinclair|net> ferno: 2 and a half solid weeks in between contracts 
10:40 < sinclair|net> (done for the project im working on now)
10:40 < ferno> I was pulling your chain, didn't expect an actual figure.
10:46 < sinclair|net> http://youtu.be/rLw-9dpHtcU
10:48 < banzounet> Hey! I'm using fetch to fetch URL(s), so I've a loop calling the fetchURL function but they are execute one by one, do you know if it's possible to fetch multiple URL at a time?
10:49 < leichtgewicht> I wanted to ask: Say you have a streaming server-client connection: What would be the easiest way to transport streams over this connection? (Creating a client out stream and sending it to a specific server in stream over the established stream?)
10:57 < kutchbhi> is there any way I can test if there is any unintentional blocking code in my app ?
10:57 < kutchbhi> socket.io app
10:58 < kutchbhi> so that it does not choke with a small number ofconcurrent users
10:58 < Uplift> kutchbhi, couldn't you just make your own application to connect multiple times to it?
11:00 < kutchbhi> Uplift: i am not sure, i mean to test multiple number of clients to my server at one go.
11:01 < Uplift> Just create an app that connects to your server
11:02 < kutchbhi> oh I got it , i think
11:03 < kutchbhi> something with socket.io-client and then run it multiple times to simulate multiple users . am I right ?
11:03 < Uplift> Basically, or you could just run it once and have it create many sockets...Just store them into an Array and they should stay active
11:04 < kutchbhi> ok , thanks
11:07 < olalonde> hola
11:29 < _pash> hello, i am trying to make a website with node, what should i look into to achieve a functionality of updating just parts of the webpage on request, kid of like soundcloud does it, AJAX requests?
11:31 < gildean> _pash: ajax or websockets
11:32 < _pash> gildean: which one would be better to look into? i am kind of building a control panel
11:33 < gildean> for a control panel i'd go with websockets
11:33 < gildean> if you need fallbacks, check out socket.io, engine.io and sockjs
11:33 < gildean> pick and choose
11:33 < carlos_> if you're looking for some Soundcloud functionality, you can also look into Backbone.js
11:33 < carlos_> I think they use that as a matter of fact
11:34 < floody> hello
11:40 < olalonde> is EventEmitter.emit async?
11:42 < shanse> yes
11:42 < carlos_> how do you guys find it easiest to do object inspection in Node? I use awesome_print for Ruby for example… and well, it's awesome hehe, it's color coded and the object representation indented logically in terms of depth… anything you guys recommend? 
11:42 < gildean> carlos_: console.log?
11:42 < olalonde> I think there are some modules for that carlos_
11:44 < Bor0> I'm catching a SIGINT event, but how can I stop my application from closing? something like in nano, that has a different functionality when you press Ctrl-C
11:44 < carlos_> yeah I use console.log quite a lot… it's very good actually.. but I was just wondering if you guys knew of any other modules (and why use them hah).. thanks gildean and olalonde 
11:45 < olalonde> I use Winston module for logging, it usually prints objects nicely
11:45 < gildean> carlos_: console.log(util.inspect(yourObject, { colors:true } ));
11:46 < gildean> http://nodejs.org/api/util.html#util_util_inspect_object_options
11:46 < carlos_> awesome… very nice :D
11:47 < gildean> Bor0: catch the keypresses to stdin instead
11:47 < deoxxa> carlos_: i use (and wrote) http://npm.im/leg - i used to use winston but i found that i just didn't use any of the advanced stuff in it and the logs themselves were quite difficult to parse after the fact
11:48 < carlos_> deoxxa yeah just by looking over it I can see how leg is "simpler" to some regard
11:48 < olalonde> Bor0: it exits the process even when you catch the event?
11:48 < carlos_> is logging async with leg or Winston?
11:49 < olalonde> yes I think so
11:49 < deoxxa> i don't think it's async with either
11:49 < deoxxa> but like, i can say with 100% certainty that leg is a lot simpler: https://github.com/deoxxa/leg/blob/master/index.js
11:49 < deoxxa> haha
11:49 < deoxxa> that's *it*
11:49 < carlos_> I have a mild understanding that all (or nearly all -- or ideally all) I/O operations with Node are async
11:50 < Bor0> olalonde: yes
11:50 < carlos_> I think I'll go with "ideally all"
11:50 < carlos_> hehe
11:50 < deoxxa> the stderr/stdout stuff is a bit different (i think)
11:50 < carlos_> yeah, I read that standard output is sync
11:50 < carlos_> at least from a certain version on forward
11:50 < gildean> Bor0: process.stdin.on('data', function (data) { if (data ==== '\u001B') { console.log('ctrl + c pressed'); });
11:51 < deoxxa> bnoordhuis: stderr/stdout - blocking?
11:51 < gildean> is \u001B ctrl+c? iirc it is
11:51 < Bor0> that's it, it works
11:52 < Bor0> now, how can I achieve the same for child processes? :)
11:52 < bnoordhuis> deoxxa: depends
11:52 < gildean> Bor0: you just need their stdin to attach listeners on
11:52 < Bor0> for example, consider http://pastebin.com/nqACt1ww, the first Ctrl-C will close the child process
11:52 < bnoordhuis> deoxxa: it's documented actually :)
11:52 < deoxxa> oh!
11:52  * deoxxa goes to look, then
11:53 < Bor0> gildean I tried that
11:53 < bnoordhuis> deoxxa: it's on the stdio page
11:53 < deoxxa> ah, yep, got it
11:53 < deoxxa> carlos_: http://nodejs.org/docs/latest/api/all.html#all_process_stdout
11:54 < carlos_> process.stderr and process.stdout are unlike other streams in Node in that writes to them are usually blocking. They are blocking in the case that they refer to regular files or TTY file descriptors. In the case they refer to pipes, they are non-blocking like other streams.
11:54 < carlos_> :D
11:55 < carlos_> thx deoxxa
12:04 < zot> performance profiling.  GO!
12:05 < zot> ok, but for real.  googling reveals nodetime and bnoordhuis's profiler.  so far look/nodetime has been worthless to me, but i suspect i'm misusing.  are they fundamentally the same kind of thing?
12:08 < olalonde> async madness
12:29 < Croves> Hello guys! I'm following a tutorial to learn some Node.JS, but I am doing something wrong and I don't know what is... when I try to run my server.js, I get the message "Cannot find module 'now'". I did 'npm install now' to install this module
12:29 < Croves> My file is http://pastebin.com/EGdAt8UG
12:31 < skirvin__> did you run the 'npm install now' command from the same directory/location as your server.js file?
12:33 < Croves> skirvin__: yes
12:36 < zot> if you just run node from cmd line in same dir, and type: require('now'), what happens?
12:37 < thanpolas> try it?
12:37 < Croves> zot: My command cursor changes, and a ">" appears
12:37 < Croves> And I can enter code there
12:37 < Croves> But hey, now the error has changed o0
12:37 < Croves> It says "TypeError: Object #<Object> has no method 'listeners'"
12:38 < nathan7> satyr!
12:40 < zot> that sounds specific to 'now', which i've clue about.
12:41 < nathan7> now.js was deprecated by its creators
12:41 < Croves> Oh, damn! Maybe it's some kind of incompatibility?
12:42 < nathan7> It's not being maintained, it's probably broken on the latest node
12:42 < Croves> The tutorial that I'm reading is from 2012-04
12:42 < Croves> a litle bit old :P
12:42 < nathan7> Yeah
12:42 < nathan7> Now was deprecated last year, afaik
12:43 < Croves> Ok, thank you guys. I'll read other tutorial
12:50 < booyaa> Croves: yeah this happens a lot in node tutes go out of date quickly
12:50 < booyaa> i think nodebeginner is safe thouhg
12:50 < booyaa> let me check
12:50 < booyaa> mind you it's very simple
12:51 < booyaa> we need to kickstart pedro teixeira's ass to make some up to date nodetuts
12:51 < Croves> booyaa: lol
12:51 < booyaa> kickstarter
12:51 < g0z> I'm not funding that kickstarter
12:51 < Croves> I'm watching the Lynode's vid about nodejs
12:51 < booyaa> not suggest we kick his ass not fare
12:51 < booyaa> Croves: url?
12:53 < Croves> booyaa: http://thepiratebay.sx/torrent/7841660/Lynda.com_-_Node.js_First_Look
12:53 < booyaa> tell you what i'd like to see is a tutorial that is version based a bit like how the api docs are in node.js http://nodejs.org/docs/v0.6.7/api/
12:53 < booyaa> ah
12:54 < SomeoneWeird> Croves, yeah you're probably about to get banned
12:54 < booyaa> you could use travis
12:54 < booyaa> nah mea culpa didn't know it was 0daze
12:55 < booyaa> you could use travis to valid your stuff was working. shit i'm gonna do this and make $$$
12:55 < booyaa> but Croves will prolly pirate my ass ;)
12:56 < Croves> booyaa: Well, I didn't know Lynda's courses
12:57 < Croves> But I'll sign it in the next week
12:57 < Croves> You know, I used to pay codeschool, but Lynda have the same price
12:58 < booyaa> lynda used to be good, but i think they've got a lot of competition like codeschool, nettuts+
13:02 < dylukes> Hey guys.
13:02 < dylukes> What's the accepted/nice way of writing native extensions these days?
13:04 < floody> i think this is the relevant/accepted style: http://nodejs.org/api/addons.html
13:17 < xecycle> Does the pool distributed with node-mysql handle lost connections?  It's behaviour seems indeterministic to me --- sometimes it will reconnect, and sometimes not.  Requests to my server will simply hang.
13:18 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
13:22 < _pash> hello, i am using express to pass variables in when i res.render a page, however that passes variables to .jade files. is it possible to use these same vareables in .js files in the pub directory?
13:23 < insin> If you have a script block in your .jade which explicitly makes them available, sure
13:24 < _pash> insin: yeah i just tried that, the script block works great, however if i want to put that script block into a seperate file, probably not
13:25 < _pash> insin: can i make that seperate file refer to the jade file somehow?
13:26 < insin> you're executing on the browser by that time, jade is long gone and you just have whatever its output was
13:26 < deoxxa> _pash: think for a minute about how that would work
13:27 < _pash> deoxxa: i cant find a way =)
13:27 < kiuma> hello
13:27 < deoxxa> _pash: that's because it doesn't make a lot of sense :P
13:29 < kiuma> I'd like to play with 'bare' node (using only formaline to parse multipart/form-data). Does it make senese for a request dispatcher to have a list of regular expressions ? or it should be better to have pages organized in a tree ?
13:29 < _pash> is it fine to sometimes put javascript blocks in the body? deoxxa 
13:30 < kiuma> I mean, having a list of regexp wouldn't be a bit risky in terms of performance ?
13:40 < beg> .
13:42 < olalonde> is there any module for specifying dependencies that should be loaded asynchronously?
13:43 < olalonde> im currently working on my own implementation but would be stupid if something like that exists
13:45 < olalonde> ahhh I guess AMD could help
13:47 < kiuma> olalonde AMD -> dojotoolkit
13:47 < olalonde> well I need a way to specify dependencies asynchronously
13:47 < olalonde> for example i have many files who use the database but the database should be initialized asynchronously
13:48 < olalonde> i could try to make sure that the files are required after the db is initialized but it's not very elegant IMO
13:48 < mscdex> Intel > AMD
13:48 < mscdex> :-D
13:48 < olalonde> haha
13:49 < olalonde> or is there any way to block execution until a callback is called… i dont think so
13:49 < olalonde> async module definition would be best for my use case i think
13:50 < olalonde> i would probably have to find an implementation for node.js though
13:59 < olalonde> mmmm, I would need something like amdefine module but that lets me call a callback to tell the amdefine my module is loaded ...
14:05 <@mbalho> felixge: FYI http://blueimp.github.io/jQuery-File-Upload/ is the 3rd most visted github repo (product validation)
14:14 <@MI6> joyent/libuv: Ben Noordhuis v0.10 * e0bdb3d : unix, windows: move uv_now() to uv-common.c - http://git.io/JH0jCA
14:19 < olalonde> i wish there was an asynchornous module definition in node.js that would let you call a callback when the module is loaded
14:21 < deoxxa> olalonde: export a function
14:21 < deoxxa> olalonde: then you could do require("something")(function() { /* loaded */ })
14:21 < olalonde> deoxxa: I know about that pattern
14:22 < olalonde> the problem I'm trying to solve is somewhat different
14:24 < olalonde> for example , I have a module "controller" that  needs a mysql object, a smtp object, etc. etc. that all need to be initialized asynchronously. one way is to inject the initialized dependencies when i require the module require('controller')(mysql, smtp) … the other way is to initialize mysql/smtp and wait for them to be initialized before i require('controller')… that way controller can safely require mysql/smtp without having to initialize them
14:25 < olalonde> but both those solutions are not very elegant in my opinion has it's hard to tell by looking at the controller module what needs to be done before you can use it. 
14:26 < olalonde> I think AMD solves my problem although I would need to implement it for Node.js
14:26 < deoxxa> olalonde: well it sounds like you'd be introducing some kind of global state with what you're talking about
14:26 < deoxxa> olalonde: and that never ends well
14:26 < olalonde> yes exactly...
14:26 < olalonde> that's why i dont find those solutions very elegant
14:27 < deoxxa> well doing require("controller")(mysql, smtp) doesn't mean there's any global state
14:27 < olalonde> with async module definition, I could easily make standalone controllers
14:27 < deoxxa> i.e. you could have two separate controller instances with their own database/smtp stuff
14:27 < deoxxa> but if you just want it to be magically available, it has to be some kind of global kludge
14:28 < olalonde> right. the problem is each controller might have different dependencies. with define([dependency1, dependency2], …) each controller can advertise which dependencies they need
14:28 < olalonde> so the caller doesnt need to know
14:30 < olalonde> anyways, im toying with some ideas
14:35  * mscdex shakes a fist at slow npm
14:36 <@MI6> joyent/node: Ben Noordhuis v0.10 * 9826b15 : doc: sending dgram handles only works on unix - http://git.io/-Y29Jg
14:45 < joltblaster> Does anyone have links to papers on using node.js in a production environment.
14:47 < Mur_> hello guys 
14:47 < Mur_> can you help me?
14:47 < Mur_> I'm using SSL with socket.io. But, continuously my connection is reconnect. there is no problem without ssl. but I have to use.. help??
14:47 < werle> anyone else having trouble accessing npmjs.org?
14:47 < jerrysv> werle: yes, thought it was the conference wifi
14:48 < jdelgado> npm has been having problems for the last week - for me at least.
14:48 < jdelgado> just the site, cli works fine.
14:48 < jerrysv> cli is extremely slow for me
14:49 < jerrysv> at least npm install
14:50 < jdelgado> just tried it - yeah lagging for me too
14:50 < pachet> its because isaacs is torrenting game of thrones s3 right now
14:51 < jdelgado> lmao
14:51 < Mur_> is there a someone to help about SSL on there?
14:52 < aandy> hi, i've slowly (finally) started using mocha. before i dive in too deep in one framework, i'd like to ask if anyone know of alternatives to browser testings? zombie.js works horribly for me in 10.5 (known issues). phantom used to be "difficult to setup", but seems to be a lot easier these days. any prefs? (primarily browser tests)
14:52 < jdelgado> aandy: Jasmine all day long
14:52 < jerrysv> jasmine
14:53 < merpnderp> How long would it take to write the server side in node of a desktop/mobile app that allows day workers to easily hook up with people needing day labor?
14:53 < mikolalysenko> is npm down?
14:53 < jerrysv> merpnderp: 3 years
14:53 < jaredhanson> aandy: i've been happy with mocha, for both browser and node tests
14:53 < jdelgado> mikolalysenko: Just lagging
14:53 < merpnderp> jerrysv: hah, I was thinking 3 days.
14:53 < jerrysv> whichever, but it's 3 regardless
14:54 < merpnderp> hah!
14:54 < jdelgado> merpnderp: It depends how fast you code, maybe 3 hours.
14:54 < aandy> jaredhanson: sorry, i should clearify - i mean the browser tests, mocha itself i have no problem with
14:54 < werle> jerrysv: thanks
14:54 < merpnderp> Using bootstrap and phonegap, I bet the app could be out the door in 2 weeks making the world a little less crappy.
14:54 < aandy> jaredhanson, jerrysv:  thanks, i'll check it out
14:55 < werle> jerrysv: which conference by the way?
14:55 < jerrysv> poor nuno is giving a session on node.js right now, not going to be fun with npm having issues
14:55 < jerrysv> werle: jsconf 2013
14:55 < jdelgado> aandy: Correct me if i'm wrong, because I don't use mocha, but doesn't it also do browser testing?
14:55 < werle> jerrysv: oh shit duh
14:56 < jdelgado> No one make any dongle jokes!
14:56 < jerrysv> i think the crowd here is a little better here :)
14:57 < RLa> is it me or is npm registry slow today?
14:57 < jerrysv> RLa: it's not just you
14:58 < patrickmestabroo> Hey all -- I've found myself in a pickle.  Anyone know how to uninstall n without nom?  n broke npm, so i uninstalled it and i'm trying to uninstall node and n as well
14:58 < aandy> jdelgado: not as far as i can tell. it usually uses grunt, zombie, or similar (at least, from my searches) :)
14:59 < Fishrock123> Is npm being really slow today?
14:59 < RLa> Fishrock123, it is
14:59 < jerrysv> Fishrock123: scroll up.
15:00 < jdelgado> lol one person at a time
15:00 < RLa> nice, i got jshint installed
15:00 < Fishrock123> Dang.
15:01 < RLa> and i chose today to upgrade my server
15:01 < jdelgado> aandy: It says it runs in the browser, is that what you want?
15:01 < jdelgado> RLa: Heh, I hate those moments.
15:01 < aandy> jdelgado: no, i mean automated user interaction, like watir, (zombie), and such
15:02 < aandy> jdelgado: https://github.com/visionmedia/supertest is an example of what i'm looking for. i mean, it is what i'm looking for, i was just curious if others used something else
15:02 < jdelgado> aandy: Ahh, got it.
15:03 < aandy> Fishrock123: a little bit yeah
15:03 < hermanjunge> Hi
15:05 < RLa> feels like there is larger network outage
15:05 < RLa> someone cut sea cables again?
15:06 < jdelgado> RLa: npmjs.org has been laggy for a week, maybe related?
15:07 < RLa> hm, could be
15:07 < jdelgado> meh now i'm getting flat 500's from npm
15:08 < mmalecki> I'm calling Jason up now
15:11 < _tinman_> I'm a mocha users.
15:11 < banzounet> Hey! I'm using fetch to fetch URL(s), so I've a loop calling the fetchURL function but they are execute one by one, do you know if it's possible to fetch multiple URL at a time? 
15:11 < _tinman_> Pair with grunt mocha for ease ov use.
15:12 < _tinman_> And it does run in the browser and on phantom and standalone on Node.
15:14 -!- mode/#Node.js [+o TooTallNate] by ChanServ
15:19 < mscdex> how does one go about building d8 with node's bundled v8 to use linux-tick-processor? `make native` as suggested fails, as it looks for test/
15:29 < NotMyself> what is everyone using for CI for internal projects? for iOS?
15:30 < leonvv> Does anybody know why calling a method on NSApplication in a node.js module results in errors( on runtime) ?
15:32 < jerrysv> npmjs should be happy now
15:33 <@MI6> joyent/libuv: Bert Belder v0.10 * 081f701 : test: use c-style comments - http://git.io/0YlGog
15:35 < bnoordhuis> leonvv: define 'errors'?
15:36 < mscdex> gah linux-tick-processor segfaults!
15:37 < leonvv> bnoordhuis: dyld: lazy symbol binding failed: Symbol not found: ... Expected in: dynamic lookup
15:38 < RLa> NotMyself, just worked on a ci script
15:38 < bnoordhuis> mscdex: are you doing linux-tick-process path/to/v8.log?
15:38 < bnoordhuis> leonvv: you probably need to link to the right lib/framework
15:39 < bnoordhuis> leonvv: that said, isn't it complaining about a particular symbol?
15:39 < NotMyself> RLa: im looking for something like jenkins, travis or teamcity.. wondering what is popular in the node community.
15:39 < mscdex> bnoordhuis: i've tried several ways, including absolute paths for everything
15:39 < RLa> NotMyself, there's also Strider
15:40 < jerrysv> NotMyself: heya!
15:40 < NotMyself> Have not heard of that, will check it out.
15:40 < NotMyself> jerrysv: hey!
15:40 < RLa> in most public projects everyone probably runs tests before committing
15:40 < jerrysv> NotMyself: you're missing another great conference
15:40 < NotMyself> polyglot?
15:40 < jerrysv> NotMyself: jsconf :)
15:40 < bnoordhuis> mscdex: try copying the v8.log in the current working directory, then invoking the processor without args
15:41 < NotMyself> jerrysv: yeah i keep hopping jobs just as conf season seems to be kicking off.
15:42 < mscdex> bnoordhuis: if i do that then linux-tick-processor just sits there waiting for input or something
15:42 < jerrysv> NotMyself: you need to stop doing that
15:42 < mscdex> bnoordhuis: oh wait nevermind, just took a long time :S
15:42 < NotMyself> jerrysv: agreed, but i did work into the deal with this new job that they will send me to a conf of my choice every year.
15:43  * mscdex shakes a fist at google
15:44 < jerrysv> NotMyself: good good, but you needed to make it 10 conferences of your choice. next time!
15:45 < NotMyself> jerrysv: baby steps man.. baby steps.
15:51 < leonvv> bnoordhuis: it is complaining about a method I'm calling in another file, but if I call NSApplication directly, it still crashes
15:56 < rhalff> any of you know a good sloppy html to html5 package? There is a htmltidy package, are there any other ones?
15:57 < Havvy> rhalff: Sure. Replace all doctypes with <!doctype html>
15:57 < Havvy> And you are done.
15:57 < rhalff> Havvy, I mean convert it to valid html5 not just change the doctype
15:58 < Havvy> If you do what HTML Tidy says, you'll generally have valid HTML5.
15:59 < zenethian> Are both nodemanual.org and nodebits.org offline, or is my work proxy just being a jerk?
16:00 < rhalff> zenethian, offline
16:00 < zenethian> Sad.  :(
16:12 < FPSJosh01> >>
16:13 < FPSJosh01> Hi guys.
16:15 < AlphaPinky> I have a Raspberry Pi, and I am considering installing Node.JS on it. Is Node.JS available on "aptitude install" for Raspbian?
16:15 < jerrysv> AlphaPinky: i'd suggest compiling it, raspbian is pretty far behind
16:16 < AlphaPinky> my worry is keeping it update.
16:16 < AlphaPinky> *updated.
16:16 < AlphaPinky> the apt service is usually good for updates.
16:17 < jerrysv> not sure if raspbian is still 0.6.x, but if you're worried about keeping up to date, i wouldn't think their apt repository would be your best bet
16:17 < AlphaPinky> but eventually it would get updated, wouldn't it?
16:18 < jerrysv> AlphaPinky: you're very optimistic
16:18 < AlphaPinky> :)
16:19 < AlphaPinky> nodejs available in the repository is version 0.6.19 ... well behind. :(
16:19 < AlphaPinky> just checked it.
16:19 < jerrysv> that's where it was last time i looked, which was last year sometime
16:19 < AlphaPinky> who updates it?
16:19 < jerrysv> not sure
16:29 < levilewis> $10 venmo if you know the solution to make this work correctly http://stackoverflow.com/questions/16356856/sequelize-js-custom-validator-check-for-unique-username-password
16:36 < hackygolucky> anyone know if JSConf is being livestreamed?
16:38 < chrisbuchholz> hackygolucky: that would be sweet as fuck!
16:38 < chrisbuchholz> but i doubt it
16:38 < happyfac1> My app crashed after a couple days with: "node: ../deps/uv/src/unix/stream.c:726: uv__write: Assertion `stream->write_queue_size == 0' failed"
16:39 < hackygolucky> chrisbuchholz: bummer. It's SO expensive. I really wish I was there. Who doesn't live-stream? :D
16:39 < happyfac1> what can I do about that? Besides auto restarting on crash
16:39 < jdelgado> hackygolucky: It isn't
16:39 < hackygolucky> Lame. I wonder what the reasoning behind that is...
16:40 < hackygolucky> Don
16:40 < jdelgado> Too much work
16:40 < hackygolucky> arg trigger finger.
16:40 < hackygolucky> I guess. The two other conferences I attended this year did.
16:40 < hackygolucky> apparently I need to switch around which ones I attend.
16:41 < jdelgado> happyfac1: https://github.com/joyent/libuv/commit/c53fe815442559fe58f362279bdc63f5483d6fdb
16:58 < hackygolucky> also, after having listened to yet *another* awesome NodeUp--a general THANKS! to everyone who contributes to it.
16:58 < hackygolucky> Makes me happy.
17:05 < oreth> anyone use couchbase with node?
17:13 < dylukes> Can someone relink me to the official page on node extensions
17:13 < dylukes> I can't seem to find it again
17:15 < xanadu> what's the difference between a Buffer and a Stream?
17:16 <@mbalho> streams emit buffers
17:16 < xanadu> @mbalho: i'm an idiot - what does that even mean?
17:17 < xanadu> :)
17:17 < bnoordhuis> dylukes: http://nodejs.org/docs/latest/api/addons.html
17:17 < dylukes> thanks much :)
17:17 < bnoordhuis> xanadu: a buffer is just a container for binary data
17:17 < Havvy> A stream is an event emitter that sends buffers as the parameter for the listeners.
17:17 < bnoordhuis> xanadu: a stream is something that shuttles data from one end to another, maybe doing transformations in between
17:22 < xanadu> @mbalho, bnoordhuis, Havvy: thanks! so if you do = new Buffer(), you're building from scratch a buffer object from scratch - a task that fs.createReadStream() will also do on your behalf?
17:22 < xanadu> (sorry, i said scratch too much)
17:22 < xanadu> :)
17:23 <@mbalho> xanadu: yea pretty much any time you need to work with binary data in node you will see Buffer objects
17:23 < aandy> ugh i hate one.com. check this response, lol: http://pastie.org/pastes/7980370/text?key=j0fqqntiqi0femmm2j7wq when you see it... ;)
17:23 <@mbalho> xanadu: there are also https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays?redirectlocale=en-US&redirectslug=JavaScript%2FTyped_arrays but node doesnt use them for various reasons
17:24 < Havvy> “disablevcache”: “true” ?
17:24 < aandy> Havvy: yup :)
17:25 < eddyb> bnoordhuis: so I actually wrote a gdb "script" and a node.js one to track mmap/munmap in v8
17:25 < eddyb> total: 373.51MiB | mmap: 509.51MiB | munmap: 143.77MiB
17:25 < Havvy> aandy: I was opening it thinking "I bet it's going to disable cache"
17:25 < eddyb> now I only need some v8 heap stats
17:26 < aandy> Havvy: what i hear is it doesn't. i'm just pissed because it fucks up our testing suite as it's not proper HTML lol
17:27 < aandy> but that might also be because it's iso/utf8. looks like a designer who edited a .htaccess file
17:27 < aandy> so maybe i'm solving two problems with one stone tomorrow
17:27 < xanadu> @mbalho, bnoordhuis, Havvy: awesome. question about using Buffers and Streams - i receive a base64 image data POST and want to store it in S3 as binary like something.png. can a Buffer or Stream help me accomplish this without writing to a disk locally - in other words, just manipulate it, then proxy it up to S3?
17:28 < Havvy> Yes.
17:30 < eddyb> dammit, gists, I can't paste 1.6MB of traces in a textbox without you halting. I didn't even enable ACE
17:30 < xanadu> Havvy: any hint how? i'm pretty dumb at manipulating binary data
17:31 < _6a68> eddyb: maybe fork the gist via command line, then push?
17:31 <@mbalho> xanadu: why base64 it?
17:31 < _6a68> er, git clone
17:31 < eddyb> _6a68: nah, I gave up
17:31 < _6a68> heh. pastebin ftw?
17:31 < xanadu> @mbalho: it's coming from <canvas>.toDataURL() => base64
17:32 < eddyb> _6a68: I didn't paste it anywhere
17:32 < _6a68> :-\
17:33 < eddyb> it has almost a thousand things like mmap(0x177e33c97000, 0x200000, 0, 16418, -1, 0) {, with 16 stack frames following
17:33 <@mbalho> xanadu: you can also get binary data and use xhr or websockets to transmit binary if you wanna skip the base64 step http://stackoverflow.com/a/8782422
17:34 <@mbalho> xanadu: also i think S3 is kinda dumb when it comes to streaming, but it might be possible via https://github.com/LearnBoost/knox#put (scroll down for the streaming example)
17:36 < eddyb> bnoordhuis: do you know of any way I can make v8 log heap stats periodically?
17:36 < eddyb> preferably to include the total size of the mmap'd spaces, so I have proof in case I need it for a v8 bug report
17:38 < xanadu> @mbalho: whoa. that is awesome.
17:39 <@mbalho> xanadu: yea binary in JS is awesome
17:39 <@mbalho> xanadu: and also a fairly recent development
17:39 < eddyb> --track_gc_object_stats doesn't seem to do anything :(
17:39 <@mbalho> xanadu: i'd suggest getting familiar with typed arrays, arraybuffers and node Buffers
17:39 < xanadu> @mbalho: i was going to say, i thought i looked about 10 months ago and only Mozilla was supporting blob stuff
17:40 <@mbalho> xanadu: its come a long way since then http://caniuse.com/bloburls
17:40 < eddyb> there's a DataView (or something like that) that has read/write functions like Buffer has
17:40 <@mbalho> even IE
17:40 < eddyb> xanadu: chrome had it more than 10 months ago
17:40 < bnoordhuis> eddyb: --trace-gc --trace-gc-verbose?
17:40 <@mbalho> eddyb: https://github.com/chrisdickinson/bops is the only to write cross-platform binary code (only way i've seen)
17:40 < xanadu> @mbalho: so IE can do atob() ?
17:41 <@mbalho> xanadu: does that just base64 encode?
17:41 < bnoordhuis> eddyb: or process.memoryUsage() in a setInterval() callback
17:41 < mscdex> IE can do string concatenation, numbers, and arrays. that's it
17:41 < eddyb> bnoordhuis: oh, that's exactly what I want, thanks :D
17:42 < eddyb> mbalho: the typed arrays spec include a view that does all that
17:42 < Trangar> Connecting to mssql is such a pain in NodeJS =/
17:42 < mscdex> i can't type my arrays, they're dynamic!
17:43 <@mbalho> eddyb: node doesnt use typed arrays for binary stuff though
17:43 <@mbalho> eddyb: so youd have to copy buffers into typed arrays for everything which would be slow
17:43 < eddyb> mbalho: the semantics are a bit different, but it allows read/write of all those types and has an optional endianness param, which makes it slower, but correct in a cross-platform way
17:43 < eddyb> wait, by cross-platform you mean in node.js and in the browser?
17:44 <@mbalho> eddyb: yep
17:44 < eddyb> and it wouldn't be slow, since it would just use the same backing store (typed arrays are now getting implemented in v8)
17:44 < xanadu> @mbalho, mscdex: looks like IE10 knows atob (https://developer.mozilla.org/en-US/docs/Web/API/window.atob)
17:45 < eddyb> mbalho: yeah, well, that library could provide a node.js-like Buffer and be done with it. node.js code would work in the browser, instead of having to use those crazy semantics
17:45 <@mbalho> eddyb: it cant actually, since buffers have different semantics from typed arrays/arraybuffers
17:45 <@mbalho> eddyb: let me find a github issue that you can comment on instead of IRC, one sec
17:46 < eddyb> huh?
17:46 <@mbalho> eddyb: this discussion has happened before and it resulted in the bops library being written
17:46 < eddyb> but bops could just have a Buffer class that inherits UInt8Array or something like that
17:47 <@mbalho> eddyb: you should write a module that does that
17:47 < eddyb> I don't really need it atm, and I'm deep in memleak crap
17:47 < Trangar> Does anyone have a working mssql library for Node 0.10.7? I can´t get ¨msnodesql¨ and ¨node-sqlserver¨ to work
17:48 < mscdex> Trangar: you tried tedious?
17:48 <@mbalho> eddyb: if you tried implementing youd run into things like https://github.com/rvagg/node-abstract-leveldown/issues/2#issuecomment-17261955
17:48 < Trangar> mscdex, I´ll look into it, thanks :)
17:48 < mscdex> Trangar: i think there was another one too, but that one i remember
17:49 < NorthernLights75> Good Afternoon Everyone
17:49 < Trangar> mscdex, I wonder if it´ll work with windows azure too, but I guess we´ll find out :D
17:49 < Croves> hello
17:49 < mscdex> Trangar: tedious is pure js, so it should
17:49 < Trangar> mscdex, sweet, thanks
17:49 < mscdex> well, pure coffee evidently :p
17:50 <@mbalho> eddyb: anyway i just though its interesting that you thought that bops was unnecessary yet you havent tried implementing a solution
17:51 < eddyb> I thought you meant those functions weren't available in the browser, not that you wanted the same Buffer semantics
17:52 < eddyb> 1) toString can be overriden 2) just use UInt8Array not ArrayBuffer, for Buffer 3) just provide the Buffer feature set
17:53 <@mbalho> open an issue on bops
17:53 <@mbalho> chrisdickinson: cc this dicussion
17:53 < chrisdickinson> hi hi
17:53 < eddyb> even if anything else doesn't work, Buffer could do Object.create(new UInt8Array(...)) and then add methods on that
17:53 < chrisdickinson> that doesn't work
17:53 <@mbalho> chrisdickinson: discussion is: how to monkeypatch native object prototypes to polyfill Buffer
17:54 < chrisdickinson> eddyb: use browserify vm to pull out a fresh Uint8Array
17:54 < chrisdickinson> decorate its prototype
17:54 <@mbalho> chrisdickinson: and is that better than using an abstraction API like bops
17:54 < chrisdickinson> well
17:54 < chrisdickinson> more complicated
17:54 < chrisdickinson> and doesn't work in all browsers
17:54 < eddyb> but I'm pretty sure you can use inheritance to have a nice Buffer on top of UInt8Array
17:55 < chrisdickinson> ie9 and below don't support it
17:55 < eddyb> anyway, I got that memleak to look into
17:55 < chrisdickinson> eddyb: you can't, because you can't support indexing
17:55 < chrisdickinson> through inheritance
17:55 < eddyb> chrisdickinson: the entire point was that by inheritance you... wait, what?
17:55 < eddyb> I'm curious now how inheritance can break indexing
17:55 < chrisdickinson> ui = Object.create(new Uint8Array()); ui[3] = 2 // doesn't do the "typed array" thing
17:56 < chrisdickinson> further, the bigger problem is with zero copy slice
17:56 < eddyb> what about calling UInt8Array on Object.create(new UInt8Array)?
17:57 < xanadu> @mbalho: i just noticed that the SO article code for BlobBuilder doesn't seem to work
17:57 < xanadu> "var BlobBuilder = window.WebKitBlobBuilder || window.MozBlobBuilder;"
17:57 < chrisdickinson> so, ui = new Uint8Array(6); ui2 = ui.subarray(2); ui2[0] = 3; console.log(ui[2]) // 3
17:57 < chrisdickinson> xanadu: BlobBuilder is deprecated
17:57 < xanadu> is there a new non-prefixed version for Chrome
17:57 < chrisdickinson> you can use `new Blob([parts, …], {type: 'mimetype'})`
17:58 < eddyb> this would need to be quite strict to block all the inheritance and constructor shenanigans that you can usually do
17:58 < eddyb> chrisdickinson: isn't that what Buffers do?
17:59 < chrisdickinson> eddyb: right, yes. but how do you support that with something that inherits?
17:59 < chrisdickinson> because the index write bubbles back up to the parent.
17:59 < Trangar> mscdex, can I bother you if I can´t connect with tedious or would you rather not have that?
17:59 < chrisdickinson> and by subclassing, all of that indexing logic lives on your subclasses [[proto]]
18:00 < chrisdickinson> which won't get called when you're doing sets on instances of the subclass
18:00 < chrisdickinson> it'll just dumbly set the value on the subclass instance
18:00 < Croves> Guys, I'm having a problem with Socket.IO. When I try to run my page, Firebug says that there is a problem in this line of code: this.websocket = new Socket(this.prepareUrl() + query);
18:00 < chrisdickinson> and not bubble it back up
18:00 < mscdex> Trangar: i've never used it (or mssql in node for that matter), so i probably wouldn't be able to help much
18:00 < Trangar> mscdex, I´ll poke at someone else then :D
18:00 < mscdex> Trangar: might create an issue on their gh
18:00 < chrisdickinson> whereas if you augment the prototype of a "clean" uint8array from another "realm" / iframe, things should "just work"
18:00 < Trangar> On that note, does anyone have experience with the Tedious module and tried to connect to windows azure with it?
18:01 < chrisdickinson> but you shouldn't replace browserify's buffer shim with it, because there are different goals
18:01 < eddyb> chrisdickinson: oh, that's what that is doing? cool trick :D
18:01 < eddyb> TypeError: Object function Uint8Array() { [native code] } has no method 'call' // why would they do that?
18:02 < chrisdickinson> they really don't want you to mess with typed arrays :)
18:02 < chrisdickinson> mostly because they want to be able to optimize them easily, i do believe.
18:02 < eddyb> TypeError: DOM object constructor cannot be called as a function. // Function.prototype.call.call(Uint8Array, foo)
18:03 < chrisdickinson> eddyb: actually it wouldn't be hard to write that iframe shim if you use bops :)
18:03 < Trangar> mscdex, reading the documentation properly does wonders btw :D
18:04 < eddyb> chrisdickinson: I guess, I'd just have to move those functions to be methods of Buffer
18:04 < chrisdickinson> well, `Buffer` wouldn't exist, really
18:10 < eddyb> bnoordhuis: this is not that useful :( [heap #42] used=225.91MiB / total=277.88MiB
18:10 < chrisdickinson> eddyb: https://gist.github.com/chrisdickinson/5cd43596222a4380c143
18:10 < eddyb> so, what, it's not v8's fault? who's is it then?
18:11 < oreth> using jade, is it possible to use the :markdown filter to show dynamic content?
18:12 < gildean> oreth: by dynamic content you mean what?
18:12 < eddyb> I'll run it on a bigger test, until it reaches 1GB and see what the stats are :S
18:12 < gildean> something that's added after the pageload?
18:12 < oreth> gildean: i've got a string of markdown coming back from the server
18:12 < oreth> in post.value.body
18:12 < oreth> if i do:
18:13 < oreth> :markdown  #{post.value.body}
18:13 < oreth> it just wraps {post.value.body} in an h1 tag, lol
18:13 < gildean> hmm, i think you need to just do :markdown post.value.body
18:13 < gildean> or something like that
18:14 < oreth> negative
18:14 < oreth> anything after the markdown filter is interpreted as markdown itself
18:15 < oreth> https://gist.github.com/codevinsky/5672468
18:17 < eddyb> bnoordhuis: so the difference between used and total doesn't go above 100MB, even when the RAM usage goes over a gig. but the heap snapshots I was able to get were a little bit smaller after the main work loop, so I'm not sure what the heck is going on. maybe whatever v8 does to count used heap isn't accurate and a heap snapshot gives you the right value?
18:18 < gildean> oreth: it might be that you can't pass a filter a variable
18:19 < gildean> oreth: the way i did it once before was to add a function for parsing markdown and then just did != markdownFunc(somemarkdownhere)
18:19 < oreth> i'm ok with doing that, but i guess i need to understand where i would write that function?
18:19 < oreth> can you link to some documentation about it?
18:19 < gildean> but that was with express 2.5, now you can do the same but the function needs to be added to app.locals
18:20 < gildean> just add in app.locals.markdownFunc = function (text) .... etc.
18:20 < gildean> anything you attach to app.locals will be accessible in all the views
18:20 < oreth> oh. nice.
18:20 < oreth> thanks
18:20 < gildean> np
18:21 < oreth> app.locals is in reference to express, yes?
18:21 < gildean> yes
18:22 < oreth> worked like a charm
18:22 < oreth> thanks a bunch
18:23 < abhi_> Hi everyone
18:24 < PepperPhD> hi abhi
18:24 < abhi_> guys i may sound nube, but i have a question,,
18:24 < eddyb> bnoordhuis: if only I had a tool working with heap snapshots that wouldn't convert them to JSON and then OOM my node process or the browser it's processing the heap snapshot in >:(
18:25 < abhi_> how does node IO operation know which  particular request callback to respond to
18:25 < eddyb> referential knowledge :P
18:25 <@mbalho> abhi_: you write JS code that declares those relationships 
18:26 < abhi_> do we really do that
18:26 <@mbalho> i do, i dunno about everyone else
18:26 < Croves> Is there something wrong with my code? http://pastebin.com/AsP0cnYE
18:26 < abhi_> i men i never came over such situation
18:26 < Croves> It doesn't work =/
18:26 < eddyb> abhi_: can you ask more concrete questions? are you interested in how node.js works behind the scenes or how you can do something?
18:27 < abhi_> eddyb: well i want o know how it works behind teh sceen
18:28 <@mbalho> abhi_: here ya go http://nikhilm.github.io/uvbook/introduction.html
18:28 < r1card> Which is the most well maintained, feature packed, fastest, bestest LALR parser generator for JS/V8/Node.JS?
18:28 < eddyb> bnoordhuis: the only snapshots I was able to get were around 25MB (out of 90MB total private memory), and after my hot working loop it was actually using a MB less. I'm confused :|
18:28 < eddyb> r1card: would it involve regexp?
18:29 < r1card> eddyb, I don't know. But it'll involve LALR
18:29 < eddyb> fastest string matching operations in v8 are by far regexps
18:29 < niggler> isn't jison a lalr eddyb ?
18:30 < eddyb> niggler: I have no clue
18:30 < r1card> ed209, string matching isn't what parsers are about mainly. This is tokenizers you're thinking about
18:30 < niggler> iirc it is eddyb 
18:30 < niggler> it uses syntax like lex/yacc
18:30 < r1card> niggler, would you recommend jison?
18:30 < abhi_> mbalho: thanks.. let me check ut te link.i have been using frameworks to adress mutithreads and hav'ent handled it my self in any case. i was wondering that would i copme across any such situation innode if i use IIs multi threaded multi core abstraction 
18:30 < niggler> so I've encountered a few issues regarding reentrancy, but other than that i've had good experiences
18:30 < eddyb> r1card: a sepparate tokenizer and parser would definitely be slower than a non-tokenizing parser using regexps
18:31 < niggler> and the guy who wrote it works for mozilla and is somewhat active
18:31 < niggler> i definitely heard bad things from others about PEG.js and its community
18:31 < niggler> iirc coffee script was built on jison
18:32 < eddyb> I came up with my own parser system that's basically combinators on top of regexp and string comparisons (which I should convert to regexps, too)
18:32 < niggler> eddyb: what's the original problem?
18:33 < eddyb> for me? painless parsers. I can convert the "official" c11 grammar lex/yacc into my parser system quite easily
18:33 < jerrysv> eddyb: i use jison
18:33 < xanadu> ok, here's another silly question that will prove my ignorance of http, encoding, forms & probably much more... but you all have been very nice today :) - which is preferable: (1) POSTing a blob as the value of a json pair, or (2) POSTing a blob as a value in a FormData object field
18:34 <@mbalho> xanadu: json doesnt support binary, and to parse multiplart you'd need to use the module called formidable
18:34 < eddyb> niggler: I think at some point I wrote a converter from PEG and I ended up with a working ES5 parser
18:34 <@mbalho> xanadu: simplest way is to just make a separate binary xhr request
18:35 < xanadu> @mbalho: using FormData and appending like myForm.append('image',blob) ?
18:35 < eddyb> niggler: nevermind me, I'm tired and ranting
18:37 < xanadu> @mbalho: then, doing something like myXHR.open(...); myXHR.send(myForm);   ?
18:41 < r1card> eddyb, you can tokenize a whole file in one regex pass and give the tokne sto a parser.
18:41 < r1card> eddyb, that's faster.
18:43 < eddyb> r1card: the easiest argument I can come up with against that (without some actual proof) is that it won't work for some languages. even C requires interaction between the tokenizer and the parser
18:44 < Havvy> It also only works for non-context sensitive languages, no?
18:45 < r1card> eddyb, I hope not.
18:45 < r1card> eddyb "context-free grammar"
18:45 < r1card> eddyb, it's possible though
18:45 < edulix> hi people
18:46 < edulix> hi people
18:46 < Trangar> You know you´ve been programming for too long if you type ¨mysql¨ instead of ¨myself¨
18:46 < eddyb> where do you get those silly quotes?
18:47 < eddyb> I hope you're not using them in your code
18:47 < edulix> I have installed bower, with npm install bower which seems to have created some file structure in PWD/node_modules, but then executing bower command is giving me "command not found"
18:47 < PepperPhD> npm install -g bower
18:47 < Havvy> bower: bow to me.
18:47 < eddyb> why do people always forget sudo?
18:47 < PepperPhD> it has to be in your $PATH
18:47 < PepperPhD> eddyb: depends on where you install node
18:48 < eddyb> npm should run sudo itself if required :/
18:48 < merpnderp1> I was looking for client/server test frameworks, can I stop looking after finding mocha?
18:48 < seejohnrun> merpnderp1: yes
18:48 < merpnderp1> seejohnrun: thanks
18:49 < edulix> PepperPhD: isn't there a way to automatically add node_modules  binaries to PATH?
18:50 < context> yeah, update your .profile
18:51 < eddyb> can you add ./node_modules/.bin to $PATH?
18:52 < niggler> bad idea eddyb 
18:53 < PepperPhD> eddyb: i advise against that. you'd have access to project specific binaries system wide
18:53 < eddyb> niggler: I think that's what edulix asked for and/or context implied
18:53 < eddyb> PepperPhD: no, I mean relative to cwd
18:53 < context> anything with a bin i install globally
18:53 < eddyb> context: that automatically links it in /usr/bin, I think
18:54 < eddyb> or at least doesn't require fooling with PATH
18:54 < edulix> context: well, with python I use virtualenv, and I wonder why shouldn't I use the same thing with node
18:54 < edulix> eddyb: fooling with the PATH is not voodoo magic :P
18:54 < context> or you could use the scripts: {} entry in package.json to execute them
18:55 < niggler> isn't there a way to use npm for that purpose
18:55 < context> err maybe not :x
18:55 < edulix> niggler: yeah maybe npm bower might work?
18:55 < niggler> nono what i meant was
18:55 < context> or create ./bin entries
18:55 < niggler> instead of calling ./node_modules/.bin
18:55 < eddyb> niggler: I use `npm bin`/traceur in one of my Makefiles
18:56 < eddyb> instead of ./node_modules/.bin/traceur
18:59 < merpnderp> Every time I use npm I am reminded of just how much better it is than any other package manager I've ever used.
18:59 < eddyb> (apt-get doesn't count :P)
19:00 < Havvy> eddyb: It's better than apt-get in some ways.
19:00 < eddyb> you really don't know me :)
19:00 < edulix> merpnderp: yeah well pip + virtualenv makes it really easy to use a local virtual environment, commands in path et all
19:00 < Havvy> "Program X wants exactly version Y of library Z. Program P wants exactly version Q of library A."
19:01 < eddyb> Havvy: I mean "it's so easy to be better than apt-get"
19:01 < merpnderp> edulix: python eggs drove me crazy.
19:01 < Havvy> Oh, is it?
19:01 < eddyb> especially if you write it in JS
19:01 < merpnderp> edulix: I really didn't like pip at all, and trust me I wanted to like it because I could not <3 a language's syntax more than Python's.
19:02 < niggler> did you try easy_install merpnderp 
19:02 < Havvy> virtualenv feels like a hack.
19:02 < edulix> merpnderp: well I'm trying to do a grunt build, and if deps had been managed with a requirements.txt, I know I would have it done some time ago
19:02 < edulix> but somewhow, I've followed instructions, and I cannot find the grunt binary yet
19:03 < edulix> yeah, maybe I'm silly or newbie, but..
19:03 < niggler> grunt is terrible
19:03 < edulix> niggler: tell that to the developer of nod.js :P
19:03 < edulix> (not node.js, but nod.js completely different thing)
19:03 < merpnderp> niggler: I don't think so. But I'm full on the node.js bandwagon. I like doing client server in a single language and all the benchmarks tell me node.js is The One True Path :P    But really, switching from client JS to Python server is a jarring context switch each and every time.
19:03 <@isaacbw> grunt is great if you can't be bothered to learn unix
19:03 < niggler> ryah likes grunt?
19:04 < niggler> lol edulix 
19:04 < niggler> that's great
19:04 <@isaacbw> I can't even search for nod.js
19:04 < niggler> i see a bunch of job forum results
19:04 < niggler> people with experience with "Nod.js"
19:05 < merpnderp> JS yes men
19:05 < niggler> incidentally, also with search engine optimisation 
19:05 < niggler> *note: should be a z, not an s
19:05 < eddyb> niggler: non-printing unicode character between optimisat and ion
19:05 < Havvy> I used Grunt only to learn how to use it.
19:05 < Havvy> I wrote a wrapper around npm test.
19:05 < eddyb> niggler: I have reflexes for that stuff by now
19:06 < niggler> i don't get this tradition of replacing makefiles
19:06 <@isaacbw> mak is 2 hard
19:06 < niggler> every major project feels a need to replace make with their own framework
19:06 < Havvy> make is 'C's thing. ;)
19:06 <@isaacbw> nah
19:07 < Havvy> Java has Ant.
19:07 <@isaacbw> autotools is c's thing, but make is everyone's thing
19:07 < niggler> ++isaacb2
19:07 < eddyb> I use make with my node.js app, it's really easy to do lazy dependencies
19:07 < niggler> *isaacbw
19:07 < bnoordhuis> as a fortran developer, i'm offended :(
19:07 < eddyb> oh, hi there
19:07 < niggler> you don't use make with f77 bnoordhuis ?
19:07 < eddyb> if I cared enough about the build system, I'd go with something node.js-based
19:08 < niggler> gnu make has some nice helpers
19:08 < bnoordhuis> niggler: no, i mean autotools is perfectly capable of building fortran code
19:08 < eddyb> incidentally, also with search engine optimisation "?niggler: did you press Ctrl+\ by any chance in "
19:08 < niggler> ooh
19:08 < eddyb> fuck
19:08 < niggler> nice try eddyb 
19:08 <@isaacbw> automake is a glimpse into the deepest reaches of human madness
19:08 < niggler> i haven't used auto tools for f77 but that's really cool bnoordhuis 
19:08 < Havvy> niggler: Except that by the very nature of being GNU, I probably won't use it.
19:09 < eddyb> niggler: what does the above render to? I copied your non-printing character and that really screwed with my text input
19:09 <@isaacbw> that seems a bit silly
19:09 < bnoordhuis> niggler: 'cool' and 'f77' aren't words often seen together in the same sentence :)
19:09 < niggler> did i have a nonprinting character eddyb?
19:09 < niggler> i still do some fortran work
19:09 < bnoordhuis> maybe only when prefixed with 'not'
19:09 < niggler> i think f90 jumped the shark
19:10 < niggler> but there's a ton of scientific code with battle-tested fortran and really crappy C ports
19:10 < eddyb> niggler: yes, and I meant to ask if you pressed Ctrl+\, because it's not a dumb windows thing (as it usually is the case with such characters). it was between "incidentally, also with search engine optimisat" and "ion"
19:10 < niggler> ah eddyb  i may have -- I'm using some IRC client called colloquy and i wonder at times whether I'm typing too fast for it
19:11 < niggler> textual never had this problem, but colloquy lags every once in a while
19:11 <@isaacbw> ux fail
19:12 < olalonde> is there a shorter way to write function (res) { return cb(null , res); }
19:12 < eddyb> niggler: apart from messing my input box, it's 4 lines tall and looks like a stretched < (each non-printable char I encounter is like that, but they differ in looks)
19:13 < eddyb> olalonde: cb.bind(null, null)
19:13 < niggler> lol
19:13 < olalonde> haha
19:14 < eddyb> niggler: that's how I see them. pasting into chrome is the only sensible thing I can do to find out what charcode it has
19:14 < olalonde> thanks eddyb
19:15 < eddyb> niggler: I keep this handy: https://en.wikipedia.org/wiki/Windows-1252 the thicker green borders indicate non-printable unicode chars that are redefined by that encoding
19:15 < olalonde> not sure it's more readable though'
19:15 < olalonde> not used to doing that
19:15 < eddyb> olalonde: what about res => cb(null, res)?
19:16 < olalonde> coffeescript?
19:16 < eddyb> olalonde: that syntax will soon come to v8, until then you have to use traceur-compiler
19:16 < eddyb> olalonde: no, ES6, next version of JS
19:16 < olalonde> ah cool thanks
19:17 < Havvy> It'll be -> arrows in ES6, but it will bind `this` at creation time.
19:18 < eddyb> Havvy: unless you're part of the TC-whatever, or you've read a new draft that came out since last weekend, you're wrong
19:19 < eddyb> and => binds to lexical this
19:19 < Havvy> I am probably wrong.
19:19 < Havvy> Thought they went with -> for arrow functions though.
19:19 < eddyb> no, -> is CoffeeScript
19:20 < eddyb> http://esdiscuss.org/1 you might want to keep that handy, links to drafts and stuff
19:21 < context> Object.mixin/Object.assing .... nice
19:22 < eddyb> it should be assign
19:27 <@isaacbw> eddyb: I only saw your one comment about pasting into chrome so I'm probably missing the context, but vim as an :ascii command that will tell you the unicode value of the current character
19:27 < eddyb> you can't paste a control character into a terminal
19:27 < eddyb> as they are control characters
20:02 < RLa> damn sqlite3 package, could segfault less
20:04 < Stephen> nah, because then you wouldn't pay as much attention to it
20:05 < Stephen> it isn't that it really needs help, but the attention helps it feel needed
20:05 <@MI6> joyent/libuv: piscisaureus created branch jenkins-please-test-this-for-bnoordhuis - http://git.io/PzrGMw
20:16 -!- mode/#Node.js [+o TooTallNate] by ChanServ
20:20 < jez0990> problem: "npm install" seems to correctly fetch a given module and its deps but isn't creating a node_modules folder or actually outputting anything
20:20 < jez0990> any thoughts?
20:20 < ouiea> hey there, I'm new to node. I was looking for a rapid development framework and I've tried Towerjs which sounds great but it's in alpha. Althought I got it working and seems cool, I'm looking for a more stable solution. Any advice?
20:23 < RLa> jez0990, the parent dir has node_modules folder?
20:23 < ibrahim_> TooTallNate: Hi Nate, could I ask you a question about NodObjC? I'm trying to call a method on NSEvent that takes a "handler" block
20:23 < RLa> who wants to bet it's race condition: https://github.com/developmentseed/node-sqlite3/issues/126
20:24 < ibrahim_> not sure how to do the block though :(
20:24 < ibrahim_> link: https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/ApplicationKit/Classes/NSEvent_Class/Reference/Reference.html#jumpTo_3
20:25 <@TooTallNate> ibrahim_: you know… blocks are very minimally supported ATM
20:25 <@TooTallNate> ibrahim_: you should take a peek at test/block.js
20:25 <@TooTallNate> i think there's a quick example 
20:26 < ibrahim_> TooTallNate: test/failing/block.js? I take that to mean it's not implemented yet, haha
20:26 <@MI6> joyent/libuv: Wynn Wilkes v0.10 * b4c658c : darwin: make uv_fs_sendfile() respect length param - http://git.io/z-l9YA
20:27 <@TooTallNate> ibrahim_: oh, hahah, my memory is vague there. i guess it's possible that they don't work ATM :(
20:27 <@TooTallNate> ibrahim_: but you can take a look at lib/block.js, and maybe see what's missing :)
20:27 <@TooTallNate> patches always accepted ;)
20:27 < ibrahim_> TooTallNate: ahh shoot, thanks, I guess I'll read into it
20:28 <@tjfontaine> TooTallNate: itym, "patches always reviewed" :)
20:28 < ibrahim_> TooTallNate: could I use node-ffi? I'm kind of groping around in the dark with no leads
20:28 < ibrahim_> I'm trying to get global key events in node so I can do shortcuts
20:28 <@TooTallNate> tjfontaine: nope, just merge without checking (no, jkjk :P)
20:28 <@TooTallNate> ibrahim_: i mean, nodobjc uses node-ffi under the hood
20:28 <@TooTallNate> so "yes" i guess :p
20:29 < ibrahim_> haha okay, I'll read a bit more so I know what I'm talking about
20:29 < ibrahim_> cool project BTW
20:29 <@TooTallNate> ibrahim_: there's a link to a .txt file in the block.js file
20:29 <@TooTallNate> that lays out the Block ABI
20:29 <@TooTallNate> that's like the only internal reference I found about them though
20:38 < jez0990> RLa: aha, it does, and there they are! I see now that I needed to create the package.json first :) thank you
20:39 <@MI6> joyent/node: bnoordhuis created branch code-cleanup-potpourri - http://git.io/-2IkVw
20:46 -!- mode/#Node.js [+o TooTallNate] by ChanServ
20:47 < jerrysv_> TooTallNate: did you find the printers?
20:47 <@TooTallNate> jerrysv_: yessir
20:47 <@TooTallNate> jerrysv_: in the room right now
20:47 < jerrysv_> TooTallNate: still in use? or finally free?
20:47  * Nexxy shakes a fist
20:47 < jerrysv_> sorry Nexxy
20:47 <@Nexxy> not sorry enough!!
20:48 < jerrysv> nope, not all that sorry really, i'm in sunny florida :)
20:48  * jerrysv puts on his flack jacket
20:48 <@Nexxy> true though, the sun and I don't get along
20:48 < jerrysv> the raspberry pi i brought with me got damaged, will try to hit one of the soldering stations to fix it
20:48 <@Nexxy> I need my own personal rain clouds
20:49 <@mbalho> npm install portland
20:49 <@Nexxy> duuuude
20:49 <@Nexxy> can we make it modular?
20:49 < s5fs> -g!
20:49 <@Nexxy> nom install portland-clouds
20:49 <@Nexxy> nom install portland-fixies
20:49 <@mbalho> npm install clouds and then pipe them to npm install portland
20:49 < jerrysv> portland@0.0.10 node_modules/portland
20:49 < jerrysv> whoa
20:49 <@mbalho> lol
20:49 < s5fs> haha!
20:49 <@mbalho> its actually useful too
20:49 <@mbalho> wow
20:50 < s5fs> meh, I used it at 0.0.6
20:50 <@Nexxy> it's like seaport
20:50 <@Nexxy> but hipster themed
20:50 < s5fs> I dumped it in favor of a diff module, you've never heard of it
20:50 <@Nexxy> ?
20:50 <@Nexxy> s5fs, rofl
20:51 < s5fs> Nexxy: i just scrolled back, about 15min ago I was thinking how I wished it was raining today haha! indoor kids ftw!
20:51 <@Nexxy> s5fs, hah, yeah ;(
20:52 <@Nexxy> mah ginger roots keep me planted indoors
20:52 <@Nexxy> s5fs, I'm @ OHSU
20:52 < robertkowalski> hi
20:52 <@MI6> joyent/libuv: piscisaureus created branch idle-semantics - http://git.io/R-KFNg
20:53 < s5fs> Nexxy: um.. cool? hope all is normal.
20:53 < s5fs> robertkowalski: hi
20:53 < robertkowalski> isaacs: i am currently working on an npm bug and wanted to ask you about some behaviour i would change before submitting a pull request for osenv.
20:54 < robertkowalski> hi s5fs 
20:54 < robertkowalski> bought my ticket for nodeconf.eu today! *happy*
20:54 < jerrysv> Nexxy: wat?
20:54 <@TooTallNate> jerrysv: sorry, got distracted. there's like 3 people in the room right now.
20:55 <@TooTallNate> jerrysv: i think i'm up next
20:55 < jerrysv> TooTallNate: awesome. don't want to leave rebecca's talk or i'd pop in
20:55 < s5fs> robertkowalski: i'm so jelly! i'm going to nodeconf next month and am pretty pumped
20:55 <@TooTallNate> jerrysv: cool, it's almost over i think. stop by after ;)
20:56 < robertkowalski> isaacs: osenv prefers /home/{myname}/tmp over /tmp (or its windows correspondants), is there a special reason for that? it causes problems where users have wrong permissions on their tmp in home
20:57 <@isaacs> robertkowalski: i don't remember why that is.
20:57 <@isaacs> robertkowalski: i wanna say it was something like /tmp usually being a memmapped small drive
20:58 <@Nexxy> jerrysv, wat
20:58 < jerrysv> Nexxy: ohsu?
20:58 <@Nexxy> ya
20:58 < jerrysv> everything ok?
20:59 <@Nexxy> lunching
20:59 < jerrysv> ok
20:59 <@Nexxy> at marquam cafe
20:59 < s5fs> haha, there are better places to get jello with fruit in it
20:59 <@Nexxy> no!
20:59 < s5fs> "i'm just here for the ice chips"
20:59 <@Nexxy> they have catfish
21:00 < s5fs> f'real?
21:00 <@Nexxy> yep
21:00 <@Nexxy> today anyway
21:00 < s5fs> dang ohsu
21:00 <@Nexxy> and a grill
21:00 < s5fs> last time i was there some guy stuck a big needle in my neck several times. have not returned.
21:00 <@Nexxy> sweet!
21:00 <@Nexxy> I miss my phlebotomist
21:01 < s5fs> i hate needles, i keep my eyes closed
21:01 <@Nexxy> I am teh opposite
21:01 <@mbalho> jlord: check out https://github.com/misoproject/d3.chart
21:01 <@Nexxy> one time they took the tourniquet off too early and my blood sprayed all over their lab coat
21:01 <@Nexxy> it was amazing
21:01 < s5fs> METAL
21:01 <@mbalho> hahaha
21:02 < robertkowalski> isaacs: i am somehow thinking about the removal from /home/{user}/temp  but i fear the npm issue tracker could explode and eat the world.
21:03 < robertkowalski> isaacs: original issue is https://github.com/isaacs/npm/issues/3470
21:03 < jlord> mbalho: yeah i saw that on the twitters and have a tab open! 
21:06 <@isaacs> robertkowalski: i guess it's probably best to just prioritize /tmp instead of ~/tmp
21:06 < meltz> hello, I have a question regarding remoteAddress http://nodejs.org/api/net.html#net_socket_remoteaddress
21:07 < meltz> how is remoteAddress set inside node?
21:07 <@isaacs> robertkowalski: go ahead and send pull req to osenv.  should use require('os').tmpDir() if available anyway
21:07 <@isaacs> robertkowalski: anyone who doesn't like it can `npm set tmp ~/tmp` if they like
21:08 < bnoordhuis> meltz: how as in what syscall does it use?
21:08 < meltz> bnoordhuis: yeah, I want to know what header it's grabbing that info from
21:09 < meltz> bnoordhuis: because I'm proxying node behind NGINX, and I need to access the original client's IP address from a node.js net server
21:10 <@MI6> joyent/libuv: Bert Belder master * b5cd78e : test: reflect new idle semantics in test (+1 more commits) - http://git.io/XWTEOA
21:11 < gildean> meltz: then you need to check the x-forwarded-for header
21:11 < mscdex> ^
21:11 <@Nexxy> x-forwarded-for?
21:11 < mscdex> x-forwarded-for
21:11 <@Nexxy> oh, what gildean said
21:11 <@Nexxy> x-forwarded-for?!!?!
21:12 < mscdex> YEAH
21:12 < meltz> gildean: I can't
21:12 < meltz> gildean: I'm using a net server
21:12 < meltz> gildean: so I dont have http headers
21:12 <@Nexxy> doin' it wrong
21:12 < gildean> meltz: that's the only place where the information will be, unless you do something hacky
21:13 < gildean> like make the proxy first send the originating ip and only after that the data
21:13 < gildean> but that's hacky as shit
21:13 < mscdex> didn't nginx have some custom protocol for sending the client ip for tcp proxying?
21:14 < CoverSlide> yeah there is some way
21:14 < meltz> yeah there is
21:14 < CoverSlide> there's a PROXY protocol
21:14 < meltz> there's directives for that
21:14 < meltz> oh
21:14 < meltz> well idk
21:15 <@Nexxy> you could also just use node as your proxy
21:15 < meltz> I'm proxying websockets
21:15 < CoverSlide> but that's used by haproxy
21:15 < mscdex> ah yeah haproxy it was then
21:15 <@MI6> joyent/node: Ben Noordhuis master * 28659ab : Merge remote-tracking branch 'origin/v0.10' (+8 more commits) - http://git.io/0sb8MA
21:17 < meltz> basically if I can find out where remoteAddress is pulling the IP address info from
21:17 < meltz> I may be able to set that with NGINX to the correct IP address
21:17 < CoverSlide> since it's websockets, can't you just proxy the http header from that, and fill in x-forwarded-for ?
21:18 < mscdex> yeah
21:18 < mscdex> well, nginx should automatically set x-forwarded-for
21:18 < mscdex> websockets work just fine in nginx 1.4
21:19 < bnoordhuis> meltz: remoteAddress returns the address that's in the ip packet, nothing more
21:19 < meltz> CoverSlide: I can, but since I'm using node's net server I don't have access to parsed http headers
21:19 < bnoordhuis> http is way higher up the OSI stack
21:19 < mscdex> meltz: why are you using a tcp server?
21:19 < meltz> because i'm using node clustering with sticky sessions
21:19 < meltz> and I need sticky sessions because I'm using socket.io haha
21:20 < gildean> i don't see how that forbids you from using a http-server instead
21:20 < mscdex> ^
21:21 <@mbalho> meltz: check out stud proxy
21:21 <@mbalho> meltz: https://github.com/mikeal/stud-proxy
21:21 <@mbalho> meltz: it supports sticky sessions
21:23 < meltz> gildean: I guess it doesn't but then I need to proxy http and that's slower
21:25 < gildean> meltz: you think you'll be even able to feel the difference?
21:25 < gildean> i'd think the difference would be quite nominal
21:25 < meltz> gildean: not sure
21:26 < meltz> gildean: is there a good http proxy right library?
21:27 < gildean> meltz: if you're already using nginx, what's wrong with that?
21:28 < meltz> gildean: because I'm using node clustering
21:28 < muanis> I'm having issues installing npm package on a centos 6.4 box from epel, this was working fine a few days ago, did anyone had any problems recently? it's complaing about missing dependency npm(ansi)
21:29 < muanis> and sorry if this is the wrong place to look for help :-( my google fu didn't find the answer ...
21:29 < gildean> meltz: well, mbalho linked to a proxy above, maybe check it out?
21:31 <@MI6> joyent/libuv: Bert Belder jenkins-please-test-this-for-bnoordhuis * 349b322 : test (+1 more commits) - http://git.io/-eYJjw
21:33 <@MI6> joyent/libuv: Ben Noordhuis master * 8ef9592 : Merge remote-tracking branch 'origin/v0.10' (+23 more commits) - http://git.io/wmMhJg
21:39 < pirho> anyone need a good noder?
21:40 < Venom_X> to stand next to the greeter? lol
21:49 <@MI6> joyent/libuv: Ben Noordhuis jenkins-please-test-this-for-bnoordhuis * a321a4d : unix, windows: run expired timers in UV_RUN_ONCE mode - http://git.io/0Amtcw
21:55 <@MI6> joyent/libuv: Ben Noordhuis jenkins-please-test-this-for-bnoordhuis * c0a1206 : unix, windows: run expired timers in UV_RUN_ONCE mode - http://git.io/1w8psw
22:15 < PepperPhD> Hey guys. If I put an HTTP request in a for loop, does that have the potential to misbehave? Code here: https://gist.github.com/6d29425c33481554f9a6
22:15 <@MI6> joyent/node: Ben Noordhuis master * c188a75 : buffer: guard against integer overflow (+6 more commits) - http://git.io/asvrbw
22:15 < nachooo> Can I hire an expert for 2 or 3 hours to teach/guide me some workflows with Node.js, AngularJS, Databases, etc?
22:16 < bnoordhuis> PepperPhD: db = dbs[_i]; <- the value that all your request closures will see is the last one
22:17 < bnoordhuis> PepperPhD: i.e. db[dbs.length-1]. closures in js capture references, not values
22:18 < PepperPhD> bnoordhuis: Interesting. So how can I iterate over an array with closures (or can I at all)?
22:19 < nightfly> wut?
22:19 < mscdex> PepperPhD: array.forEach(function(value) {});
22:20 < PepperPhD> mscdex: that makes so much more sense. thanks to you and boordhuis for making me that much less of a beginner.
22:21 < bnoordhuis> PepperPhD: yep, that works
22:25 <@MI6> joyent/libuv: Ben Noordhuis master * 64fdfdd : Merge remote-tracking branch 'origin/v0.10' (+1 more commits) - http://git.io/sB8Y3w
22:25 <@MI6> joyent/libuv: Ben Noordhuis v0.10 * 0017c55 : unix, windows: run expired timers in run-once mode - http://git.io/jlk7wg
22:34 <@MI6> joyent/libuv: Ben Noordhuis master * f6d8ba3 : unix, windows: run expired timers in run-once mode - http://git.io/HxgmgA
22:34 <@MI6> joyent/libuv: Wynn Wilkes v0.10 * b4c658c : darwin: make uv_fs_sendfile() respect length param - http://git.io/xJGe3w
22:37 < levilewis> schwagger kicks ass. the most useful documentation I've ever written
22:39 < levilewis> myself and only 1 other watching this https://github.com/fliptoo/swagger-express it's pretty sweet though. Generates the UI based on javadoc style syntax.
22:41 <@MI6> joyent/node: Ben Noordhuis master * f58e115 : deps: upgrade libuv to f6d8ba3 - http://git.io/YJvTWQ
22:52 < CorbinDallas> I've made a module that exports a function that I'm passing an empty object to (via foo.apply(this,[obj]) ) that was declared in the closure that is calling the module's function.  I can see the empty object in the module's function, but when I manipulate the object the object does not change in the original closure, in the original closure the object remains unaffected.  This seems like strange behavior to me.
22:53 < ningu> CorbinDallas: yeah, that seems a bit odd, but would have to see the code
22:54 < CorbinDallas> let me see if I can't extract the relevant parts real quick
22:54 < jesusabdullah> Korben you are my parakeet not a javascript programmer get off the computer and get back in the sky
22:54 < ningu> wait, your parakeet lives in the sky?
22:54 < ningu> is he yours only in your mind?
22:54 < CorbinDallas> is there a preferred paste site you guys use?
22:54 < jesusabdullah> I mean, the alternative is that he sings to his bell
22:54 < jesusabdullah> and like
22:54 < ningu> CorbinDallas: gist, hastebin, pastebin
22:54 < jesusabdullah> that's not as romantic and bird-like
22:57 < ningu> does he participate in keet week?
23:01 < CorbinDallas> there's a lot more to the program, but I think this is the relevant parts: https://gist.github.com/CorbinDallas/5674508
23:01 < CorbinDallas> "dataCache" is the object I'm trying to manipulate
23:02 < CorbinDallas> I pass it into the function on line 20, modify it on like 41 and it remains unchanged outside of the function declared on like 27
23:02 <@MI6> joyent/libuv: piscisaureus created tag v0.11.4 - http://git.io/v-ga-Q
23:02 <@MI6> joyent/libuv: Bert Belder master * bec8f3c : Now working on v0.11.5 (+1 more commits) - http://git.io/Al-PJg
23:09 < ningu> CorbinDallas: nothing looks obviously wrong to me, although I"m still having my coffee :)
23:10 < CorbinDallas> thanks a lot for taking a look
23:10 < CorbinDallas> btw is anyone here going to http://js.la/ tomorrow?
23:10 < ningu> do the other arguments come through normally?
23:11 <@MI6> joyent/node: Bert Belder master * 6b654c0 : uv: upgrade to v0.11.4 - http://git.io/98eUig
23:11 < CorbinDallas> all the arguments come through, even the object "dataCache" in question (that's why I put some empty keys in it - to check) but when I alter the object the calling closure doesn't see the changes to "dataCache" that I've made
23:12 < CorbinDallas> I'm guessing I'm doing something really stupid and obvious
23:12 < CorbinDallas> (as usual)
23:12 < ningu> hrm
23:13 < ningu> oh, yeah
23:13 < ningu> line 41
23:13 < ningu> you reassign it
23:14 < CorbinDallas> isn't that OK?  It's an object member I'm passing into the function
23:14 < ningu> {} refers to a single object across closures but the value assigned to dataCache need not
23:14 < ningu> no, you're creating a new object
23:14 < ningu> you could use one of the many extends() methods
23:15 < CorbinDallas> hmmm… I thought it would just apply the new object to the object I passed in, given that I'm passing in a reference to a larger object
23:15 < CorbinDallas> obviously I'm wrong
23:15 < ^lliott^able> RUN AWAY
23:15 < ^lliott^able> ^uck ⑊ best one yet.
23:16 < ^uck> ^lliott^able: :D
23:16 < CorbinDallas> so if I pass in the whole dataCache object and refer to the key in question inside the function it should work as I want it to?
23:16 < ningu> CorbinDallas: no, what's going on is you have two separate variables, dataCache in the funciton on line 27, and dataCache[charts[x].id] on line 11
23:17 < ningu> they refer to the same object
23:17 < ningu> but then you reassign dataCache to a new object on line 41
23:17 <@isaacs> robertkowalski: hey
23:17 <@isaacs> robertkowalski: sorry, i wasn't clear before... it should use os.tmpDir() only if that function exitss.
23:17 < ningu> CorbinDallas: you don't have to pass in the whole dataCache object, you're successfully passing it in already
23:17 <@isaacs> robertkowalski: that was added in 0.10, i think
23:17 < ningu> what you need to do is not reassign dataCache to a new object
23:18 < CorbinDallas> I should just alter the properties?
23:18 < ningu> CorbinDallas: yes, that's what I've been trying to say
23:18 < ningu> something like extends will do it for you
23:18 < CorbinDallas> ok, I'll try that, thanks a lot for the help ningu 
23:18 < ningu> underscore has one, but there are many versions, it's really simple, just for (var i in obj1) obj2[i] = obj1[i];
23:19 < CorbinDallas> there are so few properties, I'll just type it out
23:19 < ningu> ok
23:19 < CorbinDallas> I'm familiar with extend tho, this object stuff can get kinda confusing
23:21 < ningu> objects in js are passed by reference, and variables hold references
23:21 < ningu> {} always creates a new object
23:21 < r1card> Does anyone know what the V8 parser was written in?
23:21 < saenzj> c
23:21 < ningu> V8 in general is in C++
23:22 < CorbinDallas> I just thought I was creating a new object on the object passed into the function ( dataCache[chart.id] )
23:22 < r1card> Was a parser generator used?
23:22 < ningu> CorbinDallas: yes, you are misunderstanding the difference between a variable and a reference
23:23 < ningu> I'm trying to think of how to explain it to someone who hasn't done C and not be confusing
23:23 < CorbinDallas> it's ok, I'll figure it out sooner or later
23:23 < CorbinDallas> is cancelTimeout not a function in node?
23:23 < saenzj> i may go to js.la
23:23 < ningu> clearTimeout
23:24 < CorbinDallas> doh!
23:25 < CorbinDallas> it's being hosted at the place I work.  I'll be there.  There's going to be free drinks and hamburgers - as well as JS presentations and fun people.
23:25 < ningu> CorbinDallas: how about this, the only way to change what a variable contains is from within the closure it's declared in
23:25 < ningu> in this case what the variable contains is a *reference* to an object, not an object
23:25 < CorbinDallas> that's a pretty good explanation.
23:25 < ningu> if you have two separate variables that refer to the same object, you can modify the object via either variable
23:26 < CorbinDallas> so I was just reassigning what "dataCache" stood for in the inner closure
23:26 < ningu> yep
23:26 < ningu> with a new object
23:26 < CorbinDallas> got it!
23:26 < CorbinDallas> thanks!
23:26 < ningu> reference to a new object :)
23:26 < CorbinDallas> makes total sense now
23:26 < ningu> it's the same for arrays btw, arrays are just regular objects with a few extra methods
23:27 < CorbinDallas> awesome! My simple data cache works!  thanks ningu!
23:28 < ningu> but numbers and strings are always replaced with new objects when you reassign them, so you couldn't pass var i = 10; to one of your functions and then change i = 20 inside it and reflect the change back in the original closure
23:28 < ningu> but you can always pass { i: 10 } and obj.i = 20
23:28 -!- mbalho changed the topic of #Node.js to: node may be useful to you for programming computers - http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
23:29 < CorbinDallas> because it's a primitive type, right?
23:29 < garthk> Baah.
23:29 < garthk> Ok, NOW I get that SmartOS is meant to be a virtualisation host.
23:29 < nero_> i'm using yeoman and installed foundation as a component.how to change the compass files within the gruntfile.js to auto-compile + reload the scss files within the foundation folder? https://gist.github.com/fuhlig/5674610
23:29 < ningu> CorbinDallas: yeah, basically. I'm not sure exactly what terms are used in the spec.
23:29 < garthk> So, trying to install SmartOS under Vagrant so I can get flame graphs via trace is… well, not the right move.
23:30 < CorbinDallas> well, thanks again, I gotta get outa here before traffic gets too bad.  TTYL!
23:30 < ningu> :)
23:30 < qard1> VMs all the way down!
23:30 < ningu> I'm still using DumbOS
23:31 < garthk> Given that, and a requirement to not push this data set to some cloud vendor…
23:31 < garthk> Please recommend an OS that runs Node and also runs dtrace well enough to give me flame graphs. 
23:32 < qard1> OSX supports dtrace.
23:32 < jesusabdullah> pretty sure it works in unbuntuo too
23:32 < garthk> qard1: not well enough.
23:33 < garthk> jesusabdullah: also tried Ubuntu. 
23:33 < jesusabdullah> well then
23:33 < jesusabdullah> smartos
23:33 < ningu> btw I read recently that python and ruby apps these days are normally deployed into virtualized environments, so one app's modules don't interfere with another.
23:33 < garthk> Main problem is that Joyent wrote the dtrace stuff, and it works on their OS, and not well on others.
23:33 < jesusabdullah> yeah ningu virtualenv has been around a long time
23:33 < brycebaril> garthk: what happened trying to run smartos under vagrant?
23:34 < ningu> but I assume that means you just duplicate the install, not the whole OS, right?
23:34 < garthk> brycebaril: I run up against its determination to not let me do anything in the global zone.
23:34 < garthk> brycebaril: … e.g. having to remove the loopback mount on /etc/shadow so I can add users.
23:34 < ningu> node's way of having node_modules for each app seems like a good way of not needing virtualenv
23:35 < garthk> brycebaril: and then I check the documentation, and it says if I'm using SmartOS as anything other than a VM host then I'm doing it wrong.
23:35 < brycebaril> Hrm, it's something I'd bee thinking of trying. Sounds like it may be more work than I expected
23:35 < brycebaril> I suppose you could always do the Joyent free trial
23:35 < substack> and if you need a specific version of node itself you can use nave or nvm
23:35 < ningu> substack: sure, although I suppose virtualenv would accomplish that, but not sure what the benefit would be...
23:35 < garthk> brycebaril: Like I said, I can't push my data to a cloud vendor.
23:35 < brycebaril> garthk: gotcha, missed that part
23:37 < ningu> substack: I take it you know of mikeal's rule of not even having build scripts?
23:37 < qard1> What's so important that you'd go to all this trouble to get dtrace working? The data it provides tends to not be super useful unless you are dealing exclusively with the native side of node.
23:37 < substack> ningu: I disagree.
23:37 < ningu> substack: I don't know enough to have an opinion, but for me it isn't worth the trouble to redesign things that way
23:37 < ningu> but not due to thinking one way is clearly superior
23:38 < substack> just configure your deployment thinger to run a shell script to build some things
23:38 < substack> easy
23:38 < ningu> well then you need a deployment thinger
23:38 < ningu> which I guess he wants to avoid
23:38 < ningu> it adds complications to the app itself though
23:38 < substack> then how do you push code?
23:39 < substack> also this: http://github.com/substack/ploy
23:39 < garthk> qard1: my code runs too slow. I'm not 100% sure where it's running too slow. The NodeUp guys in their performance cast, once they got past hours of whining about premature optimisation, finally got to specifics in the last ten minutes and recommended flame graphs as a useful way to figure out what the hell is going on.
23:39 < qard1> ftp. :O
23:39 < ningu> substack: I think push is the only think mikeal uses, he puts node_modules in the repo too
23:39 < ningu> but he doesn't put .o files in
23:39 < ningu> so I guess you still need a deploy script
23:39 < qard1> You could try NodeFly or Nodetime. (Note: I work for NodeFly)
23:40 < garthk> qard1: that said, this is looking too bloody hard, so I'm going to try the other bit of concrete advice, which was to stop defining dozens of closures in an ubermethod and write JavaScript more like Java than like Lisp.
23:40 < ningu> will its successor be NodeSuperfly?
23:41 < qard1> I hope so. :O
23:42 < qard1> Yeah…treating Javascript like lisp is probably a bad idea…like REALLY bad.
23:42 < ningu> they did say that in the performance podcast
23:42 < ningu> but that sounds like an implementation/performance issue rather than a design issue
23:42 < qard1> Nothing would ever get collected...
23:43 < qard1> And it would be constantly allocating new memory for stuff that could really be reusable.
23:44 < ningu> what I don't understand about making things reusable... I've always assumed that, even if you are using for rather than forEach, you should do for (var i = 0; ...) rather than having one var i to rule them all
23:45 < ningu> because the code gets pretty ugly that way and I am not convinced it will ever really matter
23:45 < ningu> maybe in some very, very high performance methods
23:46 < qard1> optimizations like that usually make little difference.
23:46 < ningu> so what sort of stuff did you mean?
23:46 < qard1> Everything will get collected when the end of the function is reached and no handles have any active references.
23:46 < ningu> oh, I meant like if you have a large file with various for loops
23:47 < qard1> Well, closures are very easy to leak accidentally.
23:47 < ningu> you could have a global var i; that wouldn't be collected until the end of the process
23:47 < ningu> assuming there are no interactions between the loops
23:47 < ningu> it would work
23:47 < qard1> Since they will keep active references to the handles of their parent.
23:49 < qard1> Using one var i potentially can be helpful to reduce memory if, for example; you have hundreds of thousands of concurrent requests, each running multiple loops. i = 1 * 100000 is less than i = 2 * 100000, so will use half the memory. It can add up—albeit, rather slowly.
23:49 < levilewis> i want a route in my express api to perform a task based on the object that it receives. is it possible to detect request object type?
23:50 < r1card> What's the closest thing/pattern to "goto" in JS/V8? I'm writing a parser and I have specific needs.
23:50 < qard1> The footprint of a single integer is so minimal that probably would never be a useful memory optimization compared to the many other posibilities.
23:50 < garthk> The closure problem I'm worried about is the "they're all different, so no inlining for you" thing.
23:51 < garthk> My node-tick-processor output is stuffed full of LazyCompile. Does that mean Node is spending all its time creating new functions in my closure-happy environment?
23:51 < ningu> levilewis: there are no object types in JS.
23:52 < garthk> Or, is that just how it looks?
23:52 < qard1> That's what the constructor/prototype model is for. All the functions refer to the same memory address, but the value of "this" refers to the instance they are referenced from.
23:52 < ningu> levilewis: that is, there is typeof, but the best you can get from that is 'object' or 'string'
23:52 < garthk> r1card: tricky. Not sure you've got one.
23:54 < levilewis> ningu, Ok I will take a different approach then thanks
23:54 < ningu> levilewis: not sure what you are trying to do really
23:54 < r1card> garthk, thanks
23:55 -!- mode/#Node.js [+o TooTallNate] by ChanServ
23:56 < garthk> Oh! Seems non-literal switch labels also causes bailou… stuff it. I better do OAUTH2 today, not scratch this performance itch.
23:57 < levilewis> ningu, I have a route that handles RSVPs for things like events & trips. I wanted that route to handle the RSVP for both, but the RSVPs require different information to be collected. I think I might just split the route under each, so /events/rsvps & /trips/rsvps, would like to handle it in the single route though...
23:58 < ningu> levilewis: I see. you could definitely do it in two routes and you could use a function that returns a function to generate the route handler. but if you want it to be one route, why not just pass a query or body parameter?
23:58 < ningu> I don't see how detecting the type of object will help you in any case
23:59 < levilewis> Yeah, that was going to be alternative. A query string param
23:59 < ningu> unless you explain a bit better what you're doing
23:59 < levilewis> I don't it just seems sloppy to me.
23:59 < ningu> if you're passing a form via POST you can just detect whether req.body has a property that would correspond to one kind of object vs. another
--- Log closed Thu May 30 00:00:31 2013
