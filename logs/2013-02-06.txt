--- Log opened Wed Feb 06 00:00:00 2013
--- Day changed Wed Feb 06 2013
00:00 < CoverSlide> make a twitter clone
00:00 < JohnnySS> and maybe eloquent
00:00 < CoverSlide> you can try code challenges on SPOJ
00:02 < JohnnySS> ok guys i am back to reading now 
00:03 < JohnnySS> thanks for all the help
00:03 < tjor> :)
00:03 < JohnnySS> cya latearz
00:29 <@Nexxy> mscdex, 
00:38 <@Nexxy> mscdex, !
00:43 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
00:50 < vicapow> is it possible to write a regex that never terminates as if in an infinite loop?
00:54 < tjor> vicapow what are you trying to achieve? Probably beyond my capability to assit, but….
00:54 < vicapow> tjor: well, I just wrote a regex that appears to never end
00:55 < vicapow> and I'd like it to
00:55 < vicapow> runs fine in spider monkey on FF
00:56 < bnoordhuis> vicapow: as if in an infinite loop <- no, but it is possible to write one with quadratic or exponential behavior
00:57 < bnoordhuis> the reason it works in spidermonkey is that sm's regex engine bails out after n iterations
00:58 < vicapow> hrm
00:59 < tjor> vicapow, where did you put your regex? 
00:59 < vicapow> tjor: what do you mean where?
00:59 < vicapow> this is the snippet
00:59 < mscdex> Nexxy: eh?
01:00 < vicapow> "Complete three rounds for time of:".match(/^(\d+)*\s*([a-z]+[a-z\s\-]*)+$/im)
01:00 < vicapow> that never excites. just eats up 100% cpu
01:00 < vicapow> exits*
01:03 < tjor> viacpow, I'm a noob to node.js, so forgive me asking a dumb question….but is this code in your app.js file….if so it should run forever…..otherwise, I'll let someone who knows what their talking about shout out :)
01:04 < vicapow> tjor: nope. just that code alone causes this error
01:04 < MI6> joyent/node: Nathan Rajlich master * a9c4a20 : stream: make Writable#end() accept a callback function  This is more back - http://git.io/zsNAHA
01:05 < vicapow> tjor: but that's for trying ;)
01:06 < tjor> vicapow sorry nothing useful from me :)
01:22 < garrettwilkin> help, trying to use diode, failing really hard
01:23 < garrettwilkin> *dnode, failing at spelling too!
01:23 < garrettwilkin> so, diode can be used to communicate between two node servers, right?  
01:23 < garrettwilkin> it doesn't have to be browser to server, does it?
01:27 < substack> garrettwilkin: dnode is just a protocol
01:27 < substack> you can use it over any kind of stream
01:28 < substack> https://github.com/substack/stream-handbook#dnode
01:31 < Manobi> I'm facing a problem that I'm calling "the walking dead child process", someone can help me ?
01:31 < garrettwilkin> substack: thanks
01:33 < garrettwilkin> i think my problem is that I've never used net.connect before
01:35 < substack> garrettwilkin: net.connect() just returns a stream that is both readable and writable
01:36 < Manobi> what I have to do in order to a detached child process stop write in my terminal ? It's hapening even when the parent process is done
01:37 < substack> Manobi: you can't
01:37 < substack> you'll need to spawn a new pty for it
01:37 < mmalecki> I think you actually can by pointing its output to fd 0
01:37 < substack> here is a lib that does such a thing https://npmjs.org/package/pty.js
01:37 < substack> can you even close stdout in node?
01:37 < substack> I know you can in perl
01:38 < substack> seems that you can
01:38 < Manobi> substack: this is my first time using child_process.fork
01:39 < Manobi> how do you do Daemons usually ?
01:39 < Manobi> I was using indexzero/daemon.node but he told that is not more safe
01:41 < substack> ndoe core can detach processes now
01:42 < Manobi> substack: How I should use that ?
01:43 < Manobi> substack: Reading the node.js docs looks that childprocess.fork will do this, but when I get any error in the child process it log in terminal
01:44 < substack> Manobi: put it in a screen or a tmux session
01:44 < substack> easiest thing
01:44 < substack> harder thing: spin up a new pts for the process to write its output to
01:45 < mmalecki> nohup ftw
01:45 < mmalecki> or forever
01:45 < substack> or actually don't use fork
01:45 < substack> fork() is not system fork
01:45 < substack> it's a weird thing for cluster
01:45 < substack> avoid avoid
01:45 < substack> cluster is my least favorite thing in node core
01:45 < mmalecki> substack: cp.fork() isn't for cluster only
01:46 < mmalecki> it can be used for general IPC
01:46 < substack> "In addition to having all the methods in a normal ChildProcess instance, the returned object has a communication channel built-in."
01:46 < substack> Manobi: just use spawn()
01:46 < substack> fork() does some weird shit that you probably don't want
01:46 < substack> mmalecki: there's no reason to
01:47 < substack> fork() is spawn() with ipc turned on
01:47 < substack> ipc that is so fucking magical and doesn't belong in core
01:47 < substack> just like how http connection pooling doesn't belong in core
01:47 < substack> leaky abstractions that WILL get in your way
01:47 < Manobi> substack: thanks I'll rewrite to use spawn instead of fork
01:47 < substack> and break your code and make you sad
01:48 < mmalecki> that, I agree with
01:48 < mmalecki> fork is nice tho, imo
01:48 < mmalecki> can be easily implemented in user space too
01:48 < substack> mmalecki: it's exactly the same as spawn() except for ipc is turned on!
01:48 < substack> it's not system fork
01:48 < substack> and ipc is always bad
01:48 < mmalecki> ...why is ipc always bad?
01:49 < substack> it's an ad-hoc newline-terminated json protocol for passing file descriptor references in core
01:49 < substack> what is it doing in there
01:49 < mmalecki> I understand the benefits of using network to communicate between processes
01:49 < cloudbender> $#!@@&^* eol characters
01:49 < substack> and it does weird shit to stdin
01:49 < substack> since it uses that fd for its ipc magic
01:49 < mmalecki> substack: unix is wrong, then :)
01:49 < substack> I've already run into bugs with this magic
01:49 < substack> and I don't even use cluster
01:49 < mmalecki> passing files descriptors is very useful
01:50 < substack> mmalecki: belongs in userland
01:50 < substack> usefulness is not sufficient to justify putting something in core
01:50 < mmalecki> can't really be implemented using public APIs
01:50 < substack> it absolutely can
01:50 < substack> tj already wrote one
01:50 < substack> not that I would use it
01:51 < substack> because I like vanilla process concurrency much more
01:51 < mmalecki> so I missed some recent changes, then. fair enough :)
01:53 < Manobi> Guys, I'm changing my code because node.daemon is not working on 0.8.x, migrate it to a detached child process made me change how my program work
01:53 < Manobi> But I still not undertand why daemonize the current process is not a good thing
01:54 < substack> Manobi: why not use something non-node to detach a proc?
01:54 < zivester> in a RESTful design... if I $http.put(/type/123456)... is it best to put 123456 into the body as well, or leave it out?
01:54 < substack> there are lots of command-line utils that are capable and probably already installed on your system
01:55 < cloudbender> served my first page from a node file stream.  I'm so happy
01:55 < Manobi> substack: because start the process in background is just one of features that my CLI have, all feature in a node cli and the daemonization will let the interface confused
01:56 < cloudbender> I can't run two node servers on one dos machine can I...
01:56 < Manobi> cloudbender: congrats for your progress, yes you can run two or more server in the same machine
01:57 < Manobi> cloudbender: you just have to start each server in a different port
01:57 < cloudbender> I tried opening servers in two dos shells but the second server dies
01:57 < cloudbender> yeah ports different
01:57 < cloudbender> 55505, 55506
01:58 < cloudbender> I want to run the second server as a lateral helper for server 1
01:58 < cloudbender> To feed it stuff
01:58 < cloudbender> nom nom nom ...
01:59 < Manobi> what's printed to your shell when you start de second server ?
01:59 < cloudbender> just a sec
02:00 < mscdex> dos machine?
02:00 < mscdex> node runs on that?
02:00 < mscdex> :P
02:01 < Manobi> DOS ? are you serious I've missed this part
02:02 < cloudbender> Hey ! It works ! I had the second port wrong, but the logged port right.  It's all good ! Ha!
02:02 < Manobi> yeah
02:03 < cloudbender> I have an old vista laptop and the only node I can run on it is the precompiled node.exe x86
02:03 < cloudbender> It's been used and abused by everyone and the registry is pooched
02:04 < cloudbender> and I can't get drivers for it.
02:04 < cloudbender> but the web stuff is rockin along.
02:05 < cloudbender> <<< Does not suck. It's official.
02:06 < Manobi> substack: Can I hope for someday have a native way to daemonize the current process in node ?
02:06 < mmalecki> monwhy are you insisting on doing that in node?
02:07 < mmalecki> forever does 'native' daemonization, you might want to check it out
02:07 < mmalecki> it daemonizes its worker process
02:09 < Manobi> mmalecki: I know how forever works, but I don't that dependencie cause forever monitor is more one process using my short memory
02:12 < Manobi> mmalecki: I generally user forever to monitor and start webserver, but this use case is different, I'm doing a multi-worker program and just want to start this worker using my own cli
02:33 < min|dvir|us> Is there a good Node.js app server?
02:33 < min|dvir|us> Like uWSGI?
02:58 < asturel> is there a way to ban ip in node?
02:59 < mmalecki> asturel: yes
03:00 < mmalecki> each socket has a remoteAddress property
03:00 < asturel> i wanted some 'global' thing, using express btw
03:01 < min|dvir|us> asturel: write a middleware.
03:01 < asturel> ah i thought about that too, thank :D
03:01 < asturel> anyway can i just use an array?
03:01 < asturel> like bannedips = ["ip1","ip2"]
03:02 < asturel> or i should use e.g. redis?
03:02 < mmalecki> whatever your middleware will accept
03:02 < min|dvir|us> asturel: whatever solves your problem.
03:02 < mmalecki> I'd go with some DB
03:02 < min|dvir|us> I'd definitely go with a list at first.
03:02 < mmalecki> but that's up to your usecase
03:02 < mmalecki> min|dvir|us++
03:02 < min|dvir|us> Once that grows out of hand, use a DB. It will be easy to port.
03:06 < asturel> hmm and whats the best way to use and interval?
03:06 < asturel> time interval* :D
03:08 < asturel> i mean indexof dont works on assoc array
03:10 < min|dvir|us> asturel: this isn't PHP.
03:10 < min|dvir|us> There are no "associative arrays".
03:10 < min|dvir|us> Associative array is a concrete implementation of an abstract map or dict.
03:11 < min|dvir|us> In JS we call them objects.
03:11 < asturel> then object :D
03:11 < min|dvir|us> If you're trying to find the value corresponding to an object's key, use obj[key].
03:11 < min|dvir|us> If you're trying to search through all the values in an object, you're doing it wrong.
03:15 < mscdex> asturel: you can do indexOf on a regular array like you showed a bit ago: ["ip1", "ip2"].indexOf("ip2")
03:16 < asturel> yeah but i want expiretime and other things
03:16 < min|dvir|us> Whatever that means.
03:17 < asturel> so typeof ips[key] != "undefined" should be ok then(?):D
03:17 < tjfontaine> if you're going to get a lot to ban, it'd be better to use a trie of some kind
03:17 < SomeoneWeird> asturel, you just need if(ips[key]) { 
03:20 < xdomox> hey
03:21 < xdomox> anyone have experience with socket.io and express
03:23 < asdf12> whats the question
03:35 < Lorentz> answer is yes
03:35 < Lorentz> possibly no
03:37 < xk_id> Could anybody provide an opinion on whether this code may produce any memory leaks? It uses "kue" for the job queue, "request" for http requests and "async".
03:37 < xk_id> link: http://stackoverflow.com/questions/14710208/is-this-leaking-memory
03:37 < cainus> I'm sure you guys get asked this all the time, but does anyone have a recommendation for an xml-rpc client lib?
03:38 < substack> all the time
03:38 < cainus> ;)
03:46 < cainus> wow there actually is a good one
03:48 < mmalecki> cainus: O_O
03:48 < mmalecki> seriously?
03:48 < mmalecki> I'd expect the API to be terrible
03:48 < cainus> yeah... thankfully
03:48 < mmalecki> I'd feel bad for you if I was a decent human being
03:49 < cainus> the only thing worse than having to use xml-rpc is having to build the client first
03:49 < cainus> well there's cool data behind it, so it's worth it
03:51 < mmalecki> cool and xml-rpc rarely appear in the same sentence
03:51 < wllmtrng> Hey guys, quick question: What situations would you want to use the allowHalfOpen option for the net module?
03:52 < cainus> truth
03:58 < redshadowhero> cainus: This looks pretty nifty: https://github.com/baalexander/node-xmlrpc
03:59 < cainus> yep...that's the one I was looking at
03:59 < cainus> thanks
04:24 < codepython777> I just got node.js. How do i use minify to minify a html file?
04:29 < xdomox> socket.io issues
04:31 < xdomox> apparently it can't get http://localhost:8888/socket.io/...
04:31 < Cronoh> 'it cant get' hmm
04:32 < xdomox> as in i run the function
04:32 < SomeoneWeird> make sure you're calling .listen on server, not app
04:32 < jtomasrl> is there a problem on running a node proxy on port 80 as sudo?
04:32 < xdomox> and chrome's consoles says there is an error
04:32 < nanashiRei> xdomox: https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS
04:32 < nanashiRei> just a wild guess.
04:33 < SomeoneWeird> xdomox, we need the error..
04:33 < nanashiRei> i bet it contains the words cross and origin :D
04:34 < Cronoh> i bet against you nanashi
04:34 < nanashiRei> But whyyyyy? D:
04:34 < xdomox> ight
04:34 < Cronoh> the error contains the words.... fatal and unable
04:34 < xdomox> 1 sec
04:34 < nanashiRei> Admit it *sob* you just hate me :(
04:34 < Cronoh> i like my odds
04:34 < Cronoh> i love to hate you
04:35 < xdomox> http://i.imgur.com/T9EIJsn.png
04:35 < Cronoh> oh a picture error
04:35 < Cronoh> fun
04:35 < xdomox> hahaha
04:35 < nanashiRei> heh
04:35 < xdomox> it's just the socket.io example 
04:35 < nanashiRei> xdomox: try accessing the page with localhost
04:35 < nanashiRei> 192...... ist another origin than localhost
04:36 < Cronoh> a lot more helpful would be a pastebin of your code
04:36 < Cronoh> instead of a png of you using google chrome
04:36 < xdomox> haha kk
04:36 < xdomox> oh i know what it is
04:37 < xdomox> i wrote localhost in the client side javascript
04:37 < nanashiRei> :D
04:37 < xdomox> when it should be the server
04:37 < Cronoh> god damnit
04:37 < Cronoh> HE WAS SUPPOS BE WRONGGG
04:37 < nanashiRei> just make sure host:port are the same, or you'll run into CORS problems :D
04:37 < nanashiRei> \o/
04:38 < xdomox> feel like a nub
04:39 < codepython777> how does one use minify on an html from commandline?
04:41 < blackcoat> codepython777: are you trying to minify a CSS or JS file? Typically, you don't minify HTML
04:43 < pringlescan> after you publish an npm module, is there a way to change the repository url?
04:43 < codepython777> blackcoat: i want to minify all 3 types of files
04:43 -!- mode/#Node.js [+o TooTallNate] by ChanServ
04:44 < codepython777> i have never used node.js, and was wondering how to run minify on my files
04:45 < mscdex> pringlescan: update your package.json and re-publish?
04:46 < pringlescan> mscdex, i did it so long ago I didn't even remember you didn't use a web ui >_< i just put everything on github
04:47 < pringlescan> I didn't realize people actually used my module; so I figured I'd correct the uRL
04:47 < blackcoat> codepython777: there are a lot of competing tools out there. To minify JS, I recommend using UglifyJS. https://github.com/mishoo/UglifyJS
04:47 < codepython777> blackcoat: minify uses that
04:48 < blackcoat> codepython777: are you looking at https://github.com/srod/node-minify  ?
04:49 < codepython777> https://npmjs.org/package/minify
04:50 < blackcoat> codepython777: ah, https://github.com/coderaiser/minify
04:50 < codepython777> blackcoat: how do i call it from my makefile?
04:52 < blackcoat> codepython777: good question. This module doesn't come with a binary. You can't invoke it directly from the command line, but you can probably write a small script to wrap it
04:53 < SomeoneWeird> so if I have packages submitted to npm with a username with an uppercase char, how can I change them?
04:53 < codepython777> blackcoat: how does one write such a script. Or perhaps someone has already done that?
04:56 < SomeoneWeird> isaacs, ?
04:58 < blackcoat> codepython777: to write a script like that for `minify`, you would need to have an executable script that can parse parameters (which is never fun, regardless of your platform) and pass them to minify.optimize( )
04:59 < blackcoat> codepython777: actually, it might not even be that complicated. You can use fs.readdirSync to read the contents of a folder in any node.js script...
04:59 < blackcoat> codepython777: you could write a script that simply finds your JS/CSS/HTML, and passes them to minify.optimize( )
05:00 < blackcoat> codepython777: you'll want to take a closer look at the FileSystem docs:  codepython777
05:00 < blackcoat> http://nodejs.org/api/fs.html
05:01 < KSReddy> hey how are you all..?
05:02 < xdomox> do sockets close once you leave the page?
05:02 < KSReddy> how to run java on client browser from server Software as a service...
05:02 < KSReddy> ??
05:02 < blackcoat> codepython777: this thread has a few thoughts on recursively searching folders for subsets of files: http://stackoverflow.com/questions/5827612/node-js-fs-readdir-recursive-directory-search
05:03 < blackcoat> codepython777: that might be a good place to start. Best of luck to you!
05:03 < asdf12> xdomox: if you mean socket.io yea
05:03 < codepython777> blackcoat: I just need to know how to apply minify to one file
05:03 < codepython777> i can find the files in python and feed it to minify
05:04 < blackcoat> codepython777: According to the minify docs on github, you just pass the path/to/file to minify.optimize( ). https://github.com/coderaiser/minify#readme
05:04 < xdomox> asdf12: does that mean i need to reconnect every page? do they lose their session id?
05:05 < codepython777> blackcoat: so i do - npm i minify; it tells me it installed it in ..\..\node_modules\minify. Then what do i do?
05:06 < blackcoat> codepython777: to do that from your make file, you'll want to call an executable with the `#!/usr/bin/env node` shebang. Have that script pass your desired file to minify.optimize( )
05:06 < othiym23> does anybody know of a simple test framework that allows you to 1. guarantee that test setup and teardown always happens, 2. stays out of the way of error handling by the code under test and 3. produces tap output?
05:07 < blackcoat> codepython777: the minify module doesn't come with a command-line interface, so you can't do it directly from the command line. You have to write a node.js script to invoke minify, thus the need for a separate executable for your makefile to run.
05:07 < othiym23> node-tap is not doing what I want, specifically because t.bailout() doesn't actually cause teardown handlers to fire because the bailout handler never emits the 'end' event
05:08 < codepython777> blackcoat: thanks. will try that
05:08 < blackcoat> othiym23: I'm a big fan of Mocha, which meets all of your requirements. http://visionmedia.github.com/mocha/
05:08 < othiym23> nope
05:08 < othiym23> mocha interferes with error propagation and monkeys with events
05:09 < xdomox> okay, just tell me if im on the right track here
05:09 < othiym23> I use it for BDD stuff, but it's not appropriate for tests where you're specifically trying to capture and deal with exceptions and error events yourself
05:09 < blackcoat> othiym23: any reason that you don't want your test framework to catch an event ?
05:09 < xdomox> suppose i have a table in a database that get updated. When it gets updated i want to send a message to the client 
05:10 < xdomox> checking for a table update every 2seconds seems expensive and wouldn't scale well
05:10 < othiym23> blackcoat: I'm testing my instrumentation for a database driver that has its own error-handling strategies, and I need the actual errors to propagate so that I can guarantee that every test runs to completion
05:11 < othiym23> blackcoat: with this set of test cases, mocha gets so confused it just stops running halfway through the tests
05:11 < othiym23> it's possible for the setup and teardown code to throw as well
05:11 < othiym23> I'm thinking I may just have to build a quick framework with assert and raw EEs, but man what a pain in the ass
05:12 < othiym23> I should look at dscape's thing again
05:12 < blackcoat> othimym23: I haven't needed this much for BDD, but will something like should.throw( ) allow you to continue execution after the exception is thrown ?
05:13 < othiym23> so let me describe my problem a little more
05:14 < othiym23> I'm writing instrumentation that needs to work with a wide variety of driver versions
05:14 < othiym23> the instrumentation is inserted via wrapping functions up in closures
05:14 < othiym23> it's dependent upon the internal implementation of the driver, which makes it fragile and causes it to break across minor version changes
05:15 < othiym23> so I need a testing strategy that allows me to automatically report on what breaks under which versions
05:15 < othiym23> so I have a comprehensive set of test cases that cover all the instrumented functionality
05:15 < othiym23> and I've written a test runner that uses npm to pull down all the published versions of the driver, runs the test suite, and generates a report of the output
05:16 < othiym23> so one way or another I need to get output on all the failures with details, so I know where to concentrate my efforts
05:16 < othiym23> node-tap stays out of my way and handles the basic test-running just fine, but it breaks down when something throws deep in the guts of the driver
05:16 < othiym23> oh and I can't use domains because this needs to work with Node < 0.7 ;)
05:17 < othiym23> the glorious life of the instrumentation engineer!
05:17 < blackcoat> othiym23: Ouch, working with node 0.6.
05:17 < othiym23> hmm maybe I can wrap all this crap up in trycatch, which will give me long stacktraces to boot
05:17 < ggherdov> Hi all. Trying to install uglify-js via npm. It says "No compatible version found: source-map@'>=0.1.7- <0.2.0-'". what am I supposed to do? 
05:18 < othiym23> blackcoat: I shipped some bigass applications with 0.6 -- it seemed like a big improvement over 0.4 at the time ;)
05:18 < othiym23> I think I'm going to give trycatch a shot, I really don't want to be yet another asshole writing a test framework (or YAAWATF)
05:18 < blackcoat> othiym23: though a completely different problem domain, I ended up doing similar things with try/catch in Mocha to get around it capturing exceptions being thrown by Zombie in some tests with multiple levels of async calls.
05:20 < othiym23> blackcoat: you can get around some of it by running process.listeners('uncaughtException').pop() in your before/Each and then pushing it back on afterwards
05:20 < othiym23> just make sure you actually handle the errors in your tests while that's in effect because while you're doing that, mocha won't be able to help you
05:21 < blackcoat> othiym23: that's a clever call. I'll definitely keep that in mind
05:21 < othiym23> (that is actually a pretty terrible idea, but I do it in a few places anyway)
05:21 < othiym23> yeah, I'm having all the cleverness beaten out of me by this job ;)
05:21 < blackcoat> othiym23: true, it's a hack, but that should get the job done
05:21 < visnup> anyone know how much nodeconf tickets are going to tomorrow?
05:21 < visnup> mikeal: in particular
05:22 < gabrieluk> >>function growBeanstalk(years) {if (years <= 0) {return 0;}else if (years <= 2) {return 1;}return growBeanstalk(years - 1) + growBeanstalk(years - 2);};growBeanstalk(5);
05:22 < purr> gabrieluk: (number) 5
05:22 < gabrieluk> why it returns 5?
05:26 < dnl_tp> is there an access log in node.js?
05:27 < visnup> oh n/m, $690-$800 (for nodeconf tickets)
05:28 < othiym23> dnl_tp: only if you add one
05:30 < sshaginyan> I'm doing a POT tomorrow for node.js V.S. tomcat. I have both instances currently running. How would I test them? I'm using apache ab and can clearly see that node.js has less Requests per second than tomcat for the front page of the application.
05:30 < othiym23> creationix and crabdude come through! all hail trycatch!
05:31 < asdf12> whats a pot
05:31 < othiym23> sshaginyan: 1. try jMeter instead of ab 2. there are many unknowns in your statement
05:31 < echo> sshaginyan: Try siege and other various benchmarking tools. Don't only limit yourself to ab, also vary the concurrency.
05:32 < othiym23> yes, up the number of client threads to 32-64 to get a better measure of what the two are like under workloads with a high degree of concurrency
05:32 < sshaginyan> echo: Is the relationship between requests and concurrency linear?
05:32 < othiym23> siege started crapping out on me at about 500krpm, but jmeter was able to handle it without too much trouble
05:33 < echo> i.e. under 10k concurrent requests, node.js is at 3 second response times with 800mb of memory held, while tomcat is at 15 second response times with 15gb memory held.
05:33 < othiym23> sshaginyan: nope, closer to polynomial
05:33 < othiym23> lotta interacting factors
05:33 < sshaginyan> othiym23: Where would I read about all of these and make a decision?
05:35 < othiym23> sshaginyan: you wouldn't, you'll have to do the analysis and benchmarking for yourself
05:36 <@mbalho> JasonSmith: hey who do i have to buy flowers for to get CORS on npm?
05:37 <@mbalho> JasonSmith: even if its just for tarballs
05:37 < sshaginyan> othiym23: So your telling me to use apache ab, meter, and siege?
05:38 < sshaginyan> Also othiym23 I'm using node-static
05:38 < sshaginyan> to load all my files
05:38 < sshaginyan> Is this a good idea?
05:40 < othiym23> sshaginyan: choose one of ab, siege or jmeter. I recommend jmeter because it's the most accurate under high-conncurrency, low-latency workloads. Using too many benchmarking tools is worse than using no tools at all, so just choose one.
05:40 < othiym23> sshaginyan: there's nothing wrong with node-static, but if you're planning on hosting a lot of static assets, that's much better delegated either to nginx, S3, or something with varnish in front of it, leaving Node to handle only the application logic
05:41 < othiym23> and if you want a truly fair comparison between node and tomcat, you don't really care about the efficiency with which they serve up static assets that should be handled by a CDN by any service that wants to scale
05:43 < codepython777> https://github.com/emberjs/ember.js -- how do these people earn a living? :)
05:44 < mmalecki> codepython777: oh, selling your soul is profitable
05:44 < othiym23> by charging people to explain to them how Ember is supposed to work
05:44 < mmalecki> ^ that too.
05:44 < codepython777> ah interesting
05:44 < sshaginyan> othiym23: is alkimi a CDN?
05:44 < sshaginyan> That's wheat they are using
05:45 < othiym23> sshaginyan: alkimi, or akamai?
05:45 < sshaginyan> akamai
05:45 < sshaginyan> sorry
05:45 < othiym23> akamai is definitely a CDN
05:45 < sshaginyan> yes they are using that
05:46 < sshaginyan> but the application is directly going to interact with the node/tomcat server and node/tomcat server is interacting with akamai
05:47 < sshaginyan> othiym23: So in terms of serving static files node-static shouldn't slow things down right?
05:47 < othiym23> sshaginyan: it'll slow things down a little, nothing happens for free
05:48 < othiym23> after the first few requests it should be puling from the fs buffer unless the host's memory is way overcommitted, though
05:48 < sshaginyan> othiym23: yes but there is no huge difference between the way tomcat reads these static files vs node-static
05:48 < othiym23> shouldn't be, no
05:49 < othiym23> I wouldn't be looking there for performance problems, anyway
05:49 < sshaginyan> k
05:49 < othiym23> I'd be looking at the actual logic for the service
05:50 < othiym23> sshaginyan: I can generate about 560,000 requests per minute on my MacBook Pro using the bare Node HTTP library with its built-in cluster module
05:50 < sshaginyan> othiym23: There is a huge overhead initially when the application runs not he device for th efirst time 
05:51 < othiym23> that's just returning a static response, but that's a good target, performance-wise
05:51 < othiym23> if you're only seeing a couple hundred requests per second on hardware of any decent power and you're using cluster, something's up with your app
05:54 < sshaginyan> othiym23: When would you use the closer module and how would you use it? So per request you fork?
05:56 < othiym23> sshaginyan: a complete cluster example: https://gist.github.com/othiym23/4720661
05:58 < sshaginyan> othiym23: I've used the cluster module before but it has more overhead than threads am I correct? And would you recommend me using when metering?
05:59 < sshaginyan> using them when jmetering?>
06:00 < othiym23> sshaginyan: Node has no threads, so the only way to effectively use all the available cores is to use child processes
06:00 < sshaginyan> And you would recommend me to use modules when doing meter tests?
06:00 < othiym23> also, at high loads, the overhead imposed by processes and threads is essentially noise, and a well-written Node service will use about half the RSS of a well-written JVM web server of any kind
06:01 < sshaginyan> jmeter 
06:01 < othiym23> sure, you want to handle the maximum number of concurrent requests, no?
06:01 < sshaginyan> yes
06:01 < othiym23> the gist I posted will create one process per CPU
06:02 < sshaginyan> So in your example everytime a process dies another one should be spawned?
06:02 < othiym23> there's some weirdness about how evenly the load is shared across child processes, but as far as anyone can tell that's a Linux issue and not a Node issue
06:02 < sshaginyan> yes I know....
06:02 < sshaginyan> I had this problem before
06:03 < othiym23> sshaginyan: the processes should never die, there's something up if they're crapping out, but yeah, in principal you could have the master fork new childen as existing ones die out
06:04 < asdf12> is that better than just running process on your versus using cluster
06:04 < asdf12> processes
06:04 < sshaginyan> What do you mean a process should never die? After a request the process dies
06:04 < sshaginyan> it's not like thread pools
06:05 < othiym23> sshaginyan: no, you have x separate worker processes that are each running their own HTTP servers
06:05 < othiym23> the master deals with grabbing the incoming requests, and then passes the sockets to the worker processes as they come in
06:05 < othiym23> it is just like a thread pool, only with processes instead of threads
06:06 < sshaginyan> ohhhhhhh……. and how would I know how many I should span at once? And what is the down side of spawning too many?
06:06 < othiym23> asdf12: opinions differ, and LearnBoost had their own clustering module that some people preferred to the one in 0.8 core, but I don't think it works under 0.8 anymore
06:07 < asdf12> i meant like if you have 4 cores, start 4 node processes manually, well with like forever, and just stick a load balancer in front of them
06:07 < othiym23> sshaginyan: like I said, you want one worker process per available core, which is why that gist uses os.cpus().length to figure out how many workers to start
06:07 < othiym23> asdf12: yeah, that'll work; substack is vocally on the record with thinking that cluster doesn't belong in Node core
06:07 < sshaginyan> othiym23: If I had more then the # of cores however what the OS just buffer them?
06:08 < sshaginyan> If the OS buffers them does it set a priority greater or less then other processes?
06:08 < othiym23> asdf12: it's just some lightweight file descriptor magic and some convenience functions to make it look like one logical cluster, you can do everything cluster does with child_process anyway, just not as conveniently (but on the plus side, not as magically)
06:09 < othiym23> sshaginyan: it won't buffer them, they'll just end up competing for resources and up the number of context switches, which will push up the apparent load on the box and will decrease the efficiency of the cluster increasingly as the number of worker proesses increases
06:10 < othiym23> not to mention eating up your memory for no good reason and increasing contention for disk I/O etc
06:10 < sshaginyan> k
06:12 < sshaginyan> othiym23: How long are you planning to stay here?
06:14 < othiym23> sshaginyan: not very long at all, it's Ni no Kuni time
06:14 < asdf12> sounds magical
06:14 < asdf12> i dont like the pet
06:14 < asdf12> hes rude
06:14 < echo> othiym23: Theoretically, wouldn't it make more sense to create os.cpus().length - 1? You'd want your master to be able to have it's own core, right? I would think if you had all 4 processes saturating the CPU, it would cause the master process to bog even more.
06:17 < othiym23> echo: theoretically, but the master isn't going to be doing a whole hell of a lot except taking incoming requests and passing them down to workers that are actually going to be using most of the CPU
06:18 < echo> othiym23: That's what I figured, and assumed it wouldn't really be a visible difference. 
06:18 < othiym23> if you presume that Node's ideal use case is in situations where you're waiting on I/O most of the time (and aren't, like, searching for Mersenne primes or whatever), then all the CPU is going to be in the business logic and there should be plenty of juice for the fairly trivial work the master needs to do
06:19 < othiym23> asdf12: what do you have against the Welsh? Drippy's just a straight-talkin' fairy.
06:19 < othiym23> He calls it like it is.
06:20 < othiym23> I'm going to go sneak around dudes dressed up in pig costumes for some reason
06:20 < othiym23> night night, all
06:20 < sshaginyan> othiym23: So tomcat using threads will also have this constraint right? os.cpus().length
06:21 < sshaginyan> I mean the threads that are concurrently running are at max os.cpus().length. 
06:21 < sshaginyan> and context switching is fast I guess?
06:21 < othiym23> sshaginyan: last thing before I leave: I don't remember the details of Tomcat's thread pool, and it's probably chagned since I last looked at it, but as far as I recall, it's all configurable
06:22 < sshaginyan> what do you mean by configurable?
06:22 < sshaginyan> increasing the # of threads and such?
06:22 < sshaginyan> yes it still is
06:23 < othiym23> on modern systems, POSIX thread context switching and process context switching are more or less equivalent, and memory overhead is the main difference between using threads and processes
06:23 < othiym23> yes, you open up an XML file somewhere or inject a configurator into a class and tell Tomcat how many worker threads are in the pool
06:23 < othiym23> bye now!
06:23 < sshaginyan> Son't leave me......
06:23 < gabrieluk> define modern systempls
06:23 < sshaginyan> Thanks man later
06:24 < sshaginyan> gabrieluk: bippity boppity boo
06:24 < nb-ben> gabriel, a modern system is a system that has been recently updated according to modern conventions of things
06:24 < gabrieluk> duh, your name is quite suggestive
06:25 < nb-ben> gabriel, for example, a symbian is an old system and an android is a modern system
06:26 < nb-ben> a windows xp is an old system, an ubuntu 12.10 is a modern system
06:26 < gabrieluk> windows is not even POSIX, :/
06:27 < nb-ben> windows 7 would be relatively modern and windows 8 would be the literally "bleeding edge"
06:27 < gabrieluk> i use ubuntu, don't know why sometimes it hink i should go with debian
06:27 < echo> Windows 8 has already come, been shit and passed imho.
06:27 < nb-ben> because you think debian is more efficient, that it is more stripped down and that ubuntu has things you don't need
06:28 < nb-ben> but you are wrong, because debian has a strict relationship with packages and will keep you back a few years
06:28 < gabrieluk> but, but, eeryone uses ubuntu...
06:29 < asdf12> sold
06:29 < asdf12> im switching from debian to ubuntu
06:29 < nb-ben> if you take debian, make apt-get install new packages, you has ubuntu
06:29 < echo> I finally switched from Ubuntu to Fedora, only regret is I find it slightly more annoying to make pretty.
06:29 < gabrieluk> argh, fedora
06:29 < gabrieluk> would never change to rpm sysem
06:29 < gabrieluk> system*
06:29 < nb-ben> idk, in my personal opinion, ubuntu does it just right
06:30 < gabrieluk> have bad times with Centos
06:30 < nb-ben> brb bathroom
06:30 < gabrieluk> had*
06:31 < echo> I've been forced to use CentOS due to work for the past 3 years. So, it's grown on me. And slowly it's changed my priorities in my personal machines aswell. I'm still not a fanboy of any particular distro or strand though. I hate various things about them all.
06:31 < gabrieluk> quote that, not a particualr fan boy of any
06:32 < gabrieluk> I still want to see a distro that will please me
06:33 < echo> I take that back, I do prefer CentOS on my servers, it's my personal computers that I switch distros on a lot.
06:33 < gabrieluk> my personal box has to be a mac, unfortunately due to software needs
06:34 < gabrieluk> i'm working on a linux from scratch server...
06:35 < gabrieluk> actually, i'm about to start the mission, preparing the spirit
06:36 < nb-ben> you could install gentoo on it if you like this kind of thing
06:36 < nb-ben> but you'll need a helmet to become a real ricer
06:37 < echo> I have a co-worker who is an Arch fanboy and has made it his goal in life to use it for every possible implementation.
06:38 < nb-ben> arch is a fine linux distro, debian too, but most people misuse those things thinking they will get lots more performance out of their hardware and they are wrong
06:40 < nb-ben> they just end up spending a lot of time achieving the same goal in a more complex way that makes them feel proud of themselves
06:40 < gabrieluk> i don't like arch
06:40 < echo> That's the general Linux beginner's outlook, IMO. While it's true to an extent, I think it will fail to supersede expectation in most cases.
06:40 < gabrieluk> i used and it seems akward
06:40 < gabrieluk> i just like pac man
06:41 < nb-ben> even if you use gentoo and compile everything from source using all the right flags, your system's performance will be so insignificantly better it would make more sense to work at minimum wage half that time and buy better hardware
06:41 < asdf12> i use that hipster linux distro, you know the one torvald doesn't even know 
06:42 < gabrieluk> ohh, a new one? just in time ^^
06:43 < nb-ben> maybe if you have a pretty big array of identical expensive powerful servers it might make sense to have a compilation server to distribute updates to gain like a 5% benefit network wide
06:43 < asdf12> worth it
06:44 < nb-ben> idk, spending a day or two per month to compile and configure updates to gain 5% performance is just not worth it on most setups
06:44 < nb-ben> better update automatically and buy a new server every two months
06:45 < asdf12> but you said big array of expensive power servers :p
06:45 < gabrieluk> couldn't t be automated with perl?
06:45 < nb-ben> no gabriel you're going to have to fix your broken system pretty often with that
06:45 < asdf12> im just messing, i agree gentoo is a pain to manage
06:45 < nb-ben>  and fixing what's broken takes longer
06:46 < asdf12> if you use it, theres always build conflicts
06:46 < asdf12> with every update
06:46 < asdf12> to the point of, forget it i wont update unless i really need to
06:46 < asdf12> then you're screwed, because you're so behind 
06:47 < nb-ben> and if you don't update, then why do it in the first place
06:47 < nb-ben> because your performance gains won't show
06:48 < gabrieluk> i see
06:48 < nb-ben> just use ubuntu ;)
06:48 < gabrieluk> damn :D
06:50 < gabrieluk> i'm still using lucid, i forgot when it exire, lol
06:50 < gabrieluk> expire*
06:51 < gildean> gabrieluk: next april iirc
06:51 < gildean> when 13.04 comes out
06:51 < AAA_awright> nb-ben: More like 15% performance improvement on my system
06:51 < AAA_awright> My kernel image is 1.4M
06:52 < gabrieluk> that is pretty damn slim server
06:52 < nb-ben> AAA_awright, you have no way to make an accurate measurement
06:53 < AAA_awright> And Portage actually gives packages correct semantics, in a way I have yet to see any package manager do.
06:53 < AAA_awright> Even if you don't think compiling is worth it, then just use a binary distribution with Portage
06:53 < nb-ben> then what's the point if you do that
06:53 < AAA_awright> nb-ben: Requests per second, read, write
06:54 < AAA_awright> It's called "ab"
06:54 < nb-ben> yeah well I can't say I'm running 15% faster if I have noone else running beside me who's using the same body
06:55 < AAA_awright> It's as if people can't possibly imagine that _how_ a package manager works is important
06:55 < nb-ben> .deb seem to work well
06:56 < Morteza> Hi guys
06:56 < nb-ben> Hi!
06:56 < russellgutierrez> hello
06:56 < Morteza> I need your help, I am new to Node.js and stuck to use node-soap module to communicate to my web service written in C#
06:57 < Morteza> anybody knows how to pass argument
06:57 < Morteza> ?
06:57 < Morteza> there is no problem of calling the method
06:57 < AAA_awright> nb-ben: Except when you want to install packages out of a different distro, or you want to remove unneeded packages... Never mind trying to install different versions of the same package
06:57 < Morteza> as I can see packets in Wireshark
06:57 < Morteza> it is a simple method for my test called Add
06:58 < Morteza> and accept to parameters a and b
06:58 < Morteza> it supposed to return the total of these two values
06:58 < gildean> Morteza: can you share a snippet of the code so we know what you're talking about?
06:58 < Morteza> that's how I call it
06:58 < Morteza> var soap = require('soap'); var url = 'http://10.1.1.3/TestService?wsdl'; var args = {a: '1234',b: '5678'}; soap.createClient(url, function(err, client) { 	console.log(client.describe()); 	client.Add1(args, function(err, result) { 		console.log(result); 	}); });
06:58 < nb-ben> AAA_awright, portage might be a more complete package manager
06:58 < Morteza> sure
06:58 < Morteza> here it is
06:58 < Morteza> thanks :)
06:59 < airtanah> Morteza: maybe Add1 is returning an error
07:00 < Morteza> no, it does not, and I can say, the return path is OK
07:00 < Morteza> cause I debugged the web server part and I received 0 for both parameters
07:00 < Morteza> so, it returned 0
07:00 < Morteza> and that's what the method printed out
07:00 < nb-ben> though today people figured out that human time is too expensive, and found a way to do horizontal scaling instead of trying to maximize their vertical scale. and there is no way that's inexpensive in human time terms to gain all the benefits of gentoo that make it worth using
07:01 < Morteza> I guess there is something wrong with the request envelop message
07:01 < Morteza> request envelope message it generates is not same as what soapUI does
07:01 < airtanah> Morteza: i don't really know soap, i was just looking at the node
07:01 < Morteza> namespaces are different :-s
07:02 < Morteza> hmmmm
07:02 < nb-ben> and this is what we're talking about AAA_awright 
07:02 < Morteza> yeah, you are right <airtanah>
07:02 < nb-ben> gentoo is a technological gem
07:02 < nb-ben> no doubt
07:02 < Morteza> anybody knows what the best way is to call a web service method in node.js? maybe I have chosen wrong method?
07:03 < AAA_awright> nb-ben: It's not just about the time saved, it's that I do stuff daily that Ubuntu literally is incapable of doing because I run what I run
07:03 < airtanah> Morteza: also try posting to stackoverflow
07:03 < Morteza> sounds like good idea, I will do, thanks
07:03 < AAA_awright> I run Ubuntu too, kicking and screaming away from Debian which is a clustercuss of everything bad
07:03 < nb-ben> AAA_awright, it's just a linux distro, you could probably do it manually to achieve those same specific goals
07:04 < AAA_awright> Most importantly, Gentoo will never muck around with random number generators, then proceed to wonder why everyone's private keys are so easily guessable
07:04 < nb-ben> anyways I need to go to work :D
07:04 < nb-ben> have a nice day
07:04 < SomeoneWeird> <AAA_awright> I run Ubuntu too, kicking and screaming away from Debian which is a clustercuss of everything bad < lol
07:05 < nb-ben> ubuntu is type of debian btw
07:05 < nb-ben> :D
07:05 < SomeoneWeird> it is, but its very different
07:05 < AAA_awright> Oh that's right, Ubuntu had the weak keys too
07:07 < AAA_awright> I mean, stop and contemplate that for a moment. For a period of time, if you even *signed* a package with OpenSSL on Debian, Ubuntu, it exposed your private key to the world.
07:07 < AAA_awright> Because some idiot thought "Hey, valgrind says this random number generator output is unpredictable, we should patch it to make it predictable"
07:07 < AAA_awright> I'm still bitter about that if you can't tell
07:08 < AAA_awright> dpkg and the whole Debian effort, and Ubuntu, is engineered to produce simply spectacular train wrecks.
07:10 < airtanah> AAA_awright: bitter rants are the best rants
07:10 < gabrieluk> so i still have hope
07:11 < gabrieluk> hope in the kernel, hail the kernel
07:12 < gabrieluk> AAA_awright, nice info, thanks
07:13 < asdf12> im bored
07:13 < gabrieluk> i will continue with my quest, the quest for the holy distro
07:14 < airtanah> so am i stupid for running ubuntu?
07:14 < AAA_awright> Once upon a time it was the better desktop distribution
07:15 < airtanah> how about for server
07:15 < airtanah> i run ubuntu on aws
07:15 < AAA_awright> I don't need audio drivers for my server
07:15 < AAA_awright> Though AWS usually runs custom kernels seperate from what the distribution provides
07:15 < gabrieluk> everyone runs ubuntu, don't worry ^^
07:16 < AAA_awright> I can't examine the kernels to be sure what they actually do
07:16 < airtanah> i just used the default kernel
07:16 < AAA_awright> So I provide my own kernel to run anyways
07:17 < AAA_awright> airtanah: Because AWS boots the kernel directly or something, there's no bootloader. If you want a bootloader to boot your kernel, you actually have to run Grub as a kernel/OS, and chain load your kernel.
07:17 < AAA_awright> So by default it won't use the distro kernels, iirc
07:17 < AAA_awright> Just Amazon's list of them
07:17 < airtanah> they run xen, which is para-virtualized, so yes
07:18 < gildean> amaxon use their own kernels tagged with amzn
07:18 < airtanah> you could run your own kernel, but you'd prob. have to boot a windows-instance first
07:18 < gildean> *amazon even
07:18 < AAA_awright> Well I've run Xen at higher levels trying to emulate IDE and graphics drivers and such, too
07:18 < airtanah> don't know much about xen other than once reading the guide
07:19 < AAA_awright> idk about those kernels but mine literally doesn't have any hardware drivers builtin, not USB, not audio, not video, not SATA, not PCI. Hence 1.4M.
07:19 < Lorentz> I remember doing something similar for this tiny tiny chinese ARM board thing
07:20 < Lorentz> http://dx.com/p/standalone-bittorrent-bt-client-usb-nas-ftp-samba-printer-upnp-sharing-network-lan-server-26320
07:20 < Lorentz> this bugger
07:20 < airtanah> AAA_awright: if you start a cloud provider, i may join
07:21 < AAA_awright> Well idk about offering virtualization but I'm trying to do some sort of application hosting
07:22 < airtanah> AAA_awright: ala appfog/heroku? or a new spin?
07:23 < AAA_awright> Specific applications and support, starting with http://magnode.org/ perhaps (my little project)
07:25 < airtanah> AAA_awright: i like it, but it needs a better cover photo
07:26 < airtanah> photos of json put me to sleep
07:35 < AAA_awright> airtanah: Do you have something a bit more exciting?
07:36 < AAA_awright> I realize that though
07:36 < airtanah> AAA_awright: not offhand
07:37 < airtanah> AAA_awright: no stock photography tho... no "corporate guy, smiling while doing paperwork"
07:37 < airtanah> or maybe exactly that
07:38 < Lorentz> Take photos of monopole magnets
07:39 < airtanah> ^ lol - and perpetual motion machines
07:43 < ggherdov> hi all. Not strictly javascript, but related; I am trying to "build" a framework called d3. Can anybody explain me the @cat $(filter %.js,$^) > $@.tmp line in this snippet http://bpaste.net/show/gBtXhtmgBtdV7sDgWDCA/ from the Makefile at https://github.com/mbostock/d3/blob/master/Makefile ?
07:47 < lyaunzbe> Hey guys, I'm working on a task based audio procesing library that uses SoX, would love to hear anyone's thoughts and see if you peeps would find it useful:
07:47 < lyaunzbe> https://github.com/lyaunzbe/lute
07:48 < thealphanerd> lyaunzbe: could it encode a live audio stream running?
07:48 < thealphanerd> with something like https://github.com/jussi-kalliokoski/node-cubeb
07:49 <@mbalho> lyaunzbe: dunno if its useful but https://github.com/substack/node-sox
07:49 < lyaunzbe> thealphanerd: well, I know sox lets you pipe in input, so I think it should be possible
07:49 < thealphanerd> lyaunzbe: I'm contributing to a js synthesis language
07:49 < thealphanerd> http://flockingjs.org/
07:49 < thealphanerd> the maintainer just got it running in node with cubeb
07:51 < nv-ben> hello :D
07:52 < lyaunzbe> mbalho: interesting, I can't believe I missed that. I'm not too familiar with C++, but how exactly do these bindings work?
07:54 < lyaunzbe> thealphanerd: does cubeb generate raw pcm audio data?
07:55 < thealphanerd> I'm not sure
07:55 < thealphanerd> I havn't really dug into it to be honest
07:58 < LogicOpinion> and again maybe someone knows issue about "node-inspector" i can not see profiles tab
08:02 < airtanah> LogicOpinion: are you trying to heap dump?
08:07 < LogicOpinion> i am trying to detect memory leaks in my app
08:07 < airtanah> LogicOpinion: v8 has some internal changes, and i'm not sure node-inspector was ever updated
08:07 < airtanah> use this: https://github.com/c4milo/node-webkit-agent
08:08 < sshaginyan> Guys this is weird ab -n 10000 -c 100 http://localhost:8080/ results in Requests per second:    1065.50 [#/sec] (mean) …… I'm simply printing "Hello World" in 9 clusters
08:08 < sshaginyan> where as tomcat is giving me 10000
08:08 < LogicOpinion> okey, thanks airtanah 
08:09 < sshaginyan> 10000[#/sec]
08:09 < sshaginyan> ~10000[#/sec]
08:14 < sshaginyan> Why the hell are people saying node.js is fast?
08:21 < Engin> sshaginyan: I don't think there's much magic in scalable socket applications, there are some patterns which proved to work and those patterns can be implemented in any modern platform such as Java, C# and V8. Node.js is one of them apparently.
08:22 < sshaginyan> Engin: I'm trying to do some benchmarking on node.js. It seems to me that apache benchmark is broken though
08:23 < sshaginyan> it's giving me the same results for request/sec for 10 and 100 concurrent users
08:23 < nv-ben> sshaginyan: node.js doesn't utilize your system as well as apache does
08:24 < nv-ben> sshaginyan: because it's not multithreaded, you will need to run a few node.js processes
08:24 < sshaginyan> nv-ben: Then I seriously don't understand why people get so excite about node.js
08:24 < sshaginyan> nv-ben: I am
08:25 < sshaginyan> I'm doing cluster
08:25 < nv-ben> sshaginyan: if you run a few processes you will
08:25 < sshaginyan> nv-ben: http://pastie.org/6077859
08:25 < nv-ben> sshaginyan: node.js doesn't utilize your system as much but it leaves resources free for other things
08:25 < sshaginyan> I'm doing clustering here
08:25 < nv-ben> it's not that it uses more resources to accomplish less, it just uses less resources
08:25 < sshaginyan> can you check my code
08:25 < nv-ben> because it's not as concurrent as apache is
08:26 < nv-ben> where apache runs several processes and many threads per process, node.js runs a single thread on a single process
08:26 < sshaginyan> nv-ben: context switching between threads and process have the same overhead
08:26 < nv-ben> no, you simply don't get the context switching with node.js
08:26 < sshaginyan> however memory is a different story 
08:27 < nv-ben> sshaginyan: the design allows for concurrency that doesn't have the context switching overhead
08:27 < nv-ben> sshaginyan: that's what's beautiful about node.js
08:27 < sshaginyan> nv-ben: Okay here is my question then. In general which is faster node.js or tomcat?
08:27 < nv-ben> apart from that javascript is a beautiful language
08:27 < mscdex> node.js!
08:27 < nv-ben> sshaginyan: node.js
08:27 < mscdex> node.js rules!
08:27 < sshaginyan> .......................
08:28 < nv-ben> sshaginyan: give node.js X resources and let tomcat use the same amount of resources, you'll utilize them much better with node.js
08:28 < nv-ben> sshaginyan: node.js just doesn't get as much resources out of the box, that's the thing
08:28 < sshaginyan> are you guys serious can you please show me some proof? I have a POT to present tomorrow suggesting node.js is faster but need some evidence 
08:29 < substack> "which is faster" what
08:29 < mmalecki> sshaginyan: run benchmarks on an actual app
08:29 < substack> at doing what?
08:29 < mmalecki> which is not a hello world
08:29 < substack> sshaginyan: what if it's not faster?
08:29 < substack> faster is a complicated multi-variate thing
08:29 < sshaginyan> substack: then dun dun dun
08:29 < mmalecki> yeah, that means writing 2 complete applications ;)
08:30 < sshaginyan> I'm just trying to see if a single page hello world is faster in node.js
08:30 < sshaginyan> apache benchmark is broken
08:30 < substack> why is it broken?
08:30 < sshaginyan> and displays wrong information
08:30 < substack> "wrong"
08:31 < mmalecki> http://nodedublin-2012-strapping-turtles-to-rockets.jit.su/#slide-23
08:31 < mmalecki> my talk from node dublin
08:31 < _ior> it's rockets all the way down?
08:31 < mmalecki> actually read the whole thing, it should give you some ideas
08:31 < sshaginyan> substack: I had about a meg of static files being loading with node-static and I got around 8000requests/sec then I loaded just a single index.html and I got the same result. Is this expected?
08:32 < substack> sshaginyan: node -e "require('http').createServer(function(req,res){res.end('hello cruel world')}).listen(8000)" & sleep 1; ab http://localhost:8000/; kill %%
08:32 < substack> works for me
08:33 < sshaginyan> what works for you….?
08:33 < substack> or this is slightly better:
08:33 < substack> node -e "require('http').createServer(function(req,res){res.end('hello cruel world')}).listen(8000)" & sleep 1; ab -n 1000 http://localhost:8000/; kill %%
08:33 < substack> that one-liner
08:33 < substack> works for me
08:34 < substack> or you can try it with more concurrent requests
08:34 < substack> or less, whichevs
08:34 < sshaginyan> substack: Try this node -e "require('http').createServer(function(req,res){res.end('hello cruel world')}).listen(8000)" & sleep 1; ab -n 1000 -c 10 http://localhost:8000/; kill %%
08:35 < substack> shanlar: that also works for me
08:35 < substack> * sshaginyan 
08:35 < sshaginyan> that gives me the same Requests per second: as loading over a meg of static files
08:35 < sshaginyan> using node-static
08:36 < [AD]Turbo> hi there
08:36 < sshaginyan> substack: that's why I think apache benchmark is broken unless that's the expected result which is weird is there a tradeoff?
08:37 < mmalecki> sshaginyan: just use siege to confirm those results
08:37 < sshaginyan> substack: and why is tomcat 8X faster 
08:37 < sshaginyan> mmalecki: thats what I'm doing now
08:39 < sshaginyan> mmalecki: Yup same thing with siege
08:39 < substack> maybe it's just faster
08:40 < substack> I don't even care how fast node is. It's more than fast enough for my purposes.
08:43 < sshaginyan> substack: http://pastie.org/6077917
08:43 < sshaginyan> mmalecki: http://pastie.org/6077917
08:43 < amurdaca> someone up to tell me best way to implement 404/500 errors handling in Prod/Dev in express?
08:43 < substack> sshaginyan: it could be that tomcat makes use of all your cores by default
08:43 < substack> node doesn't do that
08:43 < sshaginyan> guys 1000 requests with 10 concurrent and I'm getting 6618.31 [#/sec] (mean) with ab and Transaction rate:	     5524.86 trans/sec with siege
08:43 < sshaginyan> substack: I'm using the cluster module in node.js
08:43 < sshaginyan> os.core().length
08:43 < sshaginyan> Guys and this is just serving a simple hello world page....
08:43 < sshaginyan> Guys and this is just serving a simple hello world page….
08:44 < sshaginyan> sorry for the double post
08:44 < mmalecki> don't benchmark a hello page.
08:44 < mmalecki> ever.
08:44 < sshaginyan> why not?
08:44 < rvagg> mmalecki: what if you have a SaaS that's in the business of hello world pages?
08:45 < rvagg> Hello World as a Service
08:45 < mmalecki> rvagg: then, obviously. do benchmark hello pages.
08:45 < _ior> HWaaS
08:45 < mmalecki> sshaginyan: what does a hello page tell you about a framework?
08:45 < sshaginyan> I understand to not benchmark hello world page and the reasons. But come on is tomcat really 8X faster
08:45 < sshaginyan> nothing
08:46 < _ior> so unfortunately i'm away from my codebase atm and so can't post any gists, but i do hvae a question:
08:46 < sshaginyan> But I don't think there should be a huge difference 
08:46 < _ior> we implemented a mutex yesterday to cover a child_process.exec() call that really needs to be mutexed
08:46 < _ior> we tried both a lock that spins on process.nextTick (and setTimeout) and also a bakery algo that doesn't wait-spin
08:46 < _ior> in both cases, node spun up to 99.7% of cpu
08:46 < mscdex> i bet tomcat is probably reading files differently too
08:47 < mscdex> probably using mmap or something
08:47 < _ior> any guesses as to why? does child_process.exec() get counted as node in top? i don't think it does, because i saw the process i spawned in top, too
08:47 < _ior> the mutex worked fine: it kept only one entrant to the critical section within the critical section at a time
08:47 < mmalecki> there's this trick for making hello world in node 1.5x faster
08:48 < _ior> but when the mutex was "engaged" then yeah, perfoemance really erally really suffered
08:48 < mmalecki> here, http://nodedublin-2012-strapping-turtles-to-rockets.jit.su/#slide-25
08:48 < mmalecki> also new node should be even faster here
08:48 < sshaginyan> mscdex: Is there a document that would tell me if node.js is applicable?
08:48 < mmalecki> there was some optimization to res.end(Buffer);
08:49 < mscdex> sshaginyan: huh?
08:50 < sshaginyan> mscdex: What are the use cases for node.js
08:50 < sshaginyan> What types of application benefit from node
08:50 < sshaginyan> mmalecki: Let me see if that makes a difference 
08:50 < airtanah> *woosh*
08:51 < mscdex> sshaginyan: the main use case is anything that's I/O-bound and not CPU-bound
08:51 < sshaginyan> k
08:51 < sshaginyan> that's exactly my application it's I/O bound
08:52 < sshaginyan> mscdex: It's Macy's mobile btw
08:55 < sshaginyan> mscdex: Nope same thing even using Buffer tomcat is 8X faster under ab and siege......
08:56 < sshaginyan> Is node.js trading off the # requests/sec with the size of the information? Is there a tradeoff and can I read about this somewhere?
09:01 < sshaginyan> Anyone here?
09:08 < sshaginyan> Has anyone done any benchmarking with node.js?
09:18 <@konobi> i should probably stop poking the british anti-gay-marriage bear
09:18 < ashnur> ?
09:19 <@konobi> oh just some friends who are ministers up in arms on facebook
09:28 < rideh> i am noticing higher cpu usage on my server hosting node than php or anything else.. but i bet its due to my crummy code
09:29 < ashnur> not necessarily
09:32 < boz`> hi folks
09:34 < MI6> joyent/node: Bryan Cantrill master * 202b5db : v8: loosen artificial mmap constraint  Fixes #4010. - http://git.io/l92P6A
09:35 < boz`> anyone using node-irc, I could do with some help (=
09:36 < echo|> I am
09:36 < echo|> What's up
09:37 < boz`> echo|: not clear as if there's a way for me to intercept errors from the server
09:38 < echo|> There's an error event called
09:38 < echo|> That you can listen for
09:38 < boz`> echo|: bot.on('error') {} 
09:39 < boz`> echo|: not clear though how to relate the event to the function that caused it
09:40 < boz`> echo|: say I have a function to let the bot join a channel, but channel is passwd protected. I'd like to intercept the error and feed it back to the user who requested the action.
09:40 < boz`> echo|: note I'm quite of a node noob (=
09:41 < echo|> boz`: You could possible look into making a custom event for it, you're right, the error event is kind of vague. You could get the error itself back to the user, but that doesn't necessarily mean it's going to be meaningful.
09:43 < boz`> echo|: thank you, that's what I assumed, just wasn't 100% sure and was hoping there would have been an easier way
09:44 < boz`> echo|: the errors back from the server are actually quite useful, just not sure how to feed them back to the user
09:45 < echo|> boz`: Oh, that's easy then. In your client.on('error', function (err) { client.say(user, err); } ); should work.
09:46 < boz`> echo|: oh, sure, but what if there are multiple users that can send commands to the bot?
09:46 < echo|> boz`: Hmmm. This is true.
09:47 < boz`> echo|: The error comes back with no context of who generated it
09:47 < echo|> boz`: Right, I just caught that. -___-
09:47 < boz`> echo|: heh (-:
09:48 < echo|> You may find an easy way to extend the join command's callback to have an additional param passed to snag the error that was in response to the join.
09:49 < echo|> Regardless, sorry I couldn't help :-/
09:49 < echo|> I used node-irc to setup an irc -> <- xmpp gateway.
09:50 < boz`> echo|: no worries, thank you (-:
09:50 < echo|> That's what the real echo is. 
09:50 < echo> <
10:00 < dob_> do you have any idea about requestCert and https? I want to submit a certificate via curl and get req.authorized on my server, but don't want to get any popups in my browser.
10:31 < qubit[01]> chicka chicka, slim shady
10:31 < Robert00001> ?
10:34 < mscdex> qubit[01]: watch out for the stock market collapse!
10:58 < FigoKim> hello
11:03 < tprice> how would one write this asyncresult https://github.com/NarrativeScience/Log.io/blob/master/lib/harvester/log_file.js#L77
11:03 < tprice> how would i openSync and readSync
12:12 < amurdaca> hey guysssss
12:12 < amurdaca> better deploying on a debian server or ubuntu one???
12:13 < mpajor_op5> go for ubuntu
12:13 < tuhoojabotti> Which ever you know better
12:13 < tuhoojabotti> For Node I don't think it makes a huge difference
12:13 < amurdaca> i usually use FreeBSD but both nodejs&mongodb sucks there..
12:13 < amurdaca> but i used debian and ubuntu in the past
12:14 < mpajor_op5> not that it differs much but I'd go for ubuntu if you'd like to setup node and mongodb
12:14 < tuhoojabotti> How does it suck?
12:14 < amurdaca> error compiling mostly
12:14 < amurdaca> seems the whole community is Ubuntu oriented though
12:16 < tuhoojabotti> Ubuntu is pretty easy, if you want GUI
12:16 < tuhoojabotti> if you use via ssh it doesn't make much difference, I think.
12:16 < amurdaca> nha i don't need any guy
12:16 < amurdaca> gui*
12:16 < amurdaca> i'm downloading ubuntu server 12.04.1
12:16 < amurdaca> this will be for production
12:17 < tuhoojabotti> http://askubuntu.com/questions/52066/what-is-the-difference-between-ubuntu-and-debian-server
12:17 < tuhoojabotti> no big differences I guess.
12:21 < tprice> what error is this.. node: ../src/node_crypto.cc:752: void node::crypto::Connection::ClearError(): Assertion `handle_->Get(String::New("error"))->BooleanValue() == false' failed.
12:24 < mscdex> tprice: code?
12:24 < mscdex> tprice: probably worth posting an issue on github for assertion errors like that
12:51 < ggherdov> Hi all. I am trying to install a package with npm, but get a DNS error apparently. As far as I can tell, my proxy is correctly set via env variables. Full log at https://github.com/isaacs/npm/issues/3135 . Any hint on how I can debug this ?
12:58 <@konobi> do you have a localhost entry in your /etc/hosts ?
13:07 < ggherdov> konobi: was that for me? yes I do.
13:07 < asturel> im using this https://github.com/felixge/node-mysql mysql module, is there a way to get affected rows on update query? 'rows' seeems 0
13:09 <@konobi> ggherdov: you might want to check your nsswitch.conf then, since getaddrinfo is a syscall... checking the npm log file might tell you what hostname it's unable to get
13:10 < ggherdov> konobi: ok thanks.
13:10 < tprice> mscdex.. the error came out of "nodemailer" and authorizing with google
13:10 < tprice> i think it has to do with the fact that im chrooting the app
13:11 < tprice> something with the ssl
13:31 < MI6> joyent/node: Ben Noordhuis master * 01ee551 : typed arrays: only share ArrayBuffer backing store  Follow browser behavi - http://git.io/99Nf2g
13:33 < t0th_->  hi 
13:33 < t0th_->  i have a node script, how i can access this node script in php? 
13:33 < t0th_->  curl php_file_content 
13:34 < gildean> t0th_-: access it how?
13:35 <@konobi> esp?
13:35 < t0th_-> %%+gildean+%%:  i have a nodejs with mysq connection, return json 
13:35 < t0th_->  how i can get this json in php ? 
13:36 <@konobi> don't know... checked the php docs?
13:37 < _ior> wow, colours
13:37 < SomeoneWeird> wtf
13:39 < gildean> t0th_-: you prolly make a request from php to the node server and then the node server responds?
13:39 < amurdaca> how to remove that ugly 404 error in node log when not using express.favicon????
13:40 < gildean> add a favicon.ico to your static files?
13:40 < amurdaca> will see if it works wait :D
13:41 < gildean> a browser will always ask for a favicon, even if you don't link one
13:41 < gildean> if there's no shortcut-icon link in the head, then the browser asks for '/favicon.ico'
13:42 < _ior> just subscribe to my new FIaaS startup
13:42 < _ior> that's FavIcon as a Service
13:43 < _ior> only $1 per favicon served.
13:43 < _ior> i'll gladly expose the SOAP interface to your engineers
13:43 < gildean> _ior: sounds cheap and necessary
13:43 < _ior> yes, and it's even cloud-enabled!
13:44 < amurdaca> lo
13:44 < amurdaca> lol
13:47 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:02 < pringlescan> Does anyone use the Closure library outside of it's compiler?
14:05 < amurdaca> how i pass NODE_ENV=production to an express app?
14:05 < amurdaca> i want to have app.settings.env == production
14:05 < amurdaca> but it's always development
14:06 < pringlescan> amurdaca, when you use the express app to generate the skeleton that is found in a config file I believe
14:06 < amurdaca> mmm there's not cfg files
14:06 < amurdaca> only app.js, routes and views
14:06 < Kakera> anyone here knowledgeable about request?
14:06 < pringlescan> I thought there was a .json file… I must have been mistaken
14:06 < amurdaca> i have my own config.js
14:07 < benjaminbenben> You'll want to set an environment variable maybe
14:07 < benjaminbenben> http://en.wikipedia.org/wiki/Environment_variable
14:07 < amurdaca> app.settings.env is process.env.NODE_ENV
14:07 < benjaminbenben> something like `export NODE_ENV=production`
14:07 < amurdaca> process.env.NODE_ENV is not set by default in node
14:07 < pringlescan> Does anyone use a build system and unit testing? Was it worth your time to implement?
14:07 < amurdaca> i thought something like > node app.js NODE_ENV=production
14:08 < amurdaca> but it doesn't work
14:08 < benjaminbenben> the other way round should:  `NODE_ENV=production node app.js`
14:08 < amurdaca> it doesn't work under dos shell
14:08 < t0th_-> ž->gildean<-ž:  yes, but how i can make a request 
14:09 < pringlescan> amurdaca, on windows you right click on My Computer and go to the System preferences and there is a preference pane under Advanced to set enviornment variables
14:09 < pringlescan> it's the far right option on the My Computer -> Properties window
14:10 < amurdaca> mmm so is not possible to paass somthing under winzozz
14:10 < amurdaca> luckly im setting up a debian vm
14:14 < MI6> joyent/node: Ben Noordhuis master * b58efe7 : test: add cluster EADDRINUSE test  Check that having a worker bind to a p - http://git.io/7Wv4PQ
14:17 < Engin> is there a channel for full web stack general discussion ?
14:17 < Engin> i.e. I want to get some opinion about available city databases out there.
14:20 < strk> hows the thread pool used by node.js ?
14:20 < pringlescan> Engin, US?
14:20 < strk> http://storagemojo.com/wp-content/uploads//2010/08/nodejs_architecture1.jpg
14:20 < strk> I can't see new threads being spawned at all by my application, _when_ is threading used ?
14:20 < _ior> ... threading?
14:20 < strk> is the picture above bogus ?
14:20 < Engin> pringlescan: nope, world wide.
14:21 < pringlescan> Then you want to use OpenMaps.
14:21  * strk was convinced there was no threading in use by nodejs itself
14:21 < pringlescan> http://www.openstreetmap.org/
14:21 < bnoordhuis> strk: for a couple of things, dns lookups, fs operations, etc.
14:21 < pringlescan> You can dump city data right from that if you need to
14:22 < strk> bnoordhuis: not on TCP sockets, right ?
14:22 < Engin> pringlescan: I'll give it a try, so far, I've tried MaxMind and geonames.org, but as muc has they are comprehensive, they are errorous. As in, they consider "boroughs" as cities.
14:22 < bnoordhuis> strk: indeed
14:22 < strk> I'm surprised there's no dns nor fs ops in my app
14:22 < strk> or gdb is cheating at me not reporting threads creation. I'm with node 0.8.18
14:24 < bnoordhuis> strk: the threads are spawned on demand
14:24 < bnoordhuis> if you don't do anything that requires the threadpool, no threads are created
14:24 < strk> bnoordhuis: does any fs operation uses it ?
14:24 < bnoordhuis> strk: async fs ops do
14:25 < bnoordhuis> their synchronous counterparts don't
14:25 < strk> bnoordhuis: even if async I/O interface exists on the system ?
14:25 < bnoordhuis> you mean async file i/o?
14:25 < strk> yes
14:25 < bnoordhuis> someone asked the same question on the mailing list a while back
14:25 < bnoordhuis> i answered in some detail
14:26 < bnoordhuis> but the tl;dr is 'aio is broken'
14:26 < nb-ben> tl;dr is for bd;nf people
14:27 < strk> what do you talk in, nroff ??!
14:27 < nb-ben> what's nroff?
14:28 < nb-ben> you're speaking chinese
14:28 < DarkArgon> .wik nroff
14:28 < strk> the language unix manpages are written in
14:29 < strk> see roff (7)             - concepts and history of roff typesetting
14:29 < strk> n stands for "new", probably
14:29 < nb-ben> oh, nope not talking in nroff
14:31 < thanpolas> when i do 'var app = express()' do i get a singleton or a new instance each time?
14:31 < thanpolas> (sorry didn't know there was an #express chan, asked there)
14:31 < Shinister> yes
14:32 < cloudbender> Does node allow tranferable objects for web workers ?
14:33 < cloudbender> Or maybe it doesn't even do web workers.
14:38 < ashnur> can I use dnode with connect?
14:38 < ashnur> oh. i've found the example
14:38 < ashnur> so it should work :(
14:39 < ashnur> with shoe
14:43 < pinja> i'm using dnode w/ shoe and mux-demux, works well
14:45 < ashnur> pinja: yeah, it was my mistake.  
14:45 < ashnur> I am just blind sometimes. I wasn't addin the load event to the window but to another object. so the issue wasn't even node related :(
14:48 < jcole> hello, I was hoping to get some guidance on an issue I've run into.  I'm trying to read a file, line by line, and process each line in parallel with a limit.  Each line is a file that needs to be downloaded and stored in a database, so I don't need to keep up with any results from each parallel operation.  I've tried following a few examples of a limited parallel task and I'm trying to use line-reader to read the lines. 
14:48 < jcole> The problem I have is that getting the next line is being called during a line read, corrupting the line.  Is there a recomended way of blocking nextline calls while a line is being read?  Or am I doing this entirely wrong?  Example code is here http://pastebin.com/gwiX4j08 any suggestions or example links would be greatly appreciated.  Thanks.
14:49 < SomeoneWeird> async.forEach(file.split('\r?\n'), function(line, cb) { /* process line */ cb(); }, function() { /* finished */ });
14:49 < pinja> jcole: https://github.com/caolan/async
14:49 < SomeoneWeird> ^ with that module :)
14:49 < pinja> jcole: I've used async.queue for that type of thing
14:49 < pinja> ^ foreach could work too
14:51 < jcole> thainks pinja, I was looking at async, but was having issues with line-reader, I'll try the file.split and see what I get :-)
14:52 < SomeoneWeird> actually that should be file.split(/\r?\n/)
14:52 < SomeoneWeird> not quotes :)
14:53 < gildean> t0th_-: how do you usually make a request from php? i might introduce a middle-man in between like redis or something
14:55 < pinja> jcole: There's a bunch of ways to play it. you could also stream the file into dominic's split (https://github.com/dominictarr/split), and pipe the results into a map-stream (https://github.com/dominictarr/map-stream) function
14:55 < pinja> jcole: That's how I'd tend to approach it
14:55 < pinja> jcole: I like streams
14:55 < S7> also check out lazy, https://github.com/pkrumins/node-lazy had success with it with large files
14:56 < Manobi> indexzero: Hey here is how I was using node.daemon previously: https://github.com/adlayer/after/blob/master/lib/worker_monitor.js
14:57 < Manobi> indexzero: I have open sourced this repo before the planed time to show you my use case
14:57 < indexzero> Manobi: Where ever you start that script, just use the detached child process instead
14:57 < lpin> do you usually impose an upper bound on password length in your apps?
14:57 < jameshowe> is there a template/example for making native node modules?
14:58 < Manobi> indexzero:  worker_monitor is called in this CLI: https://github.com/adlayer/after/blob/master/bin/worker
14:58 < jameshowe> for the build scripts, layout, etc.
14:58 < pinja> jcole: something like - fs.createReadStream(file).pipe(split()).pipe(map(function (line, cb) { /* process line here and then call cb(null) */ }))
14:59 < Raydiation> does this work for anyone? sudo npm -g install testacular
14:59 < indexzero> Manobi: right, but you need an extra level of redirection here now, it needs to actually execute that script verbatim and not just call the daemon api
14:59 < Raydiation> gets stuck at > ws@0.4.25 install /usr/lib/node_modules/testacular/node_modules/socket.io/node_modules/socket.io-client/node_modules/ws
14:59 < Raydiation> > (node-gyp rebuild 2> builderror.log) || (exit 0)
15:00 < jcole> pinja: I'll look at the streams as well, thanks.
15:00 < Manobi> indexzero: I'm just looking for a way to not pass the arguments from CLI to worker_monitor over process.arv
15:01 < jcole> S7: thanks, I'll check out lazy as well.
15:01 < indexzero> Manobi: why not just use forever-monitor? or just use forever? seems to have a very similar end goal
15:04 < pinja> Manobi: I've done something similar recently for an internal project
15:05 < Manobi> indexzero: Yeah it's works like in forever but 'forever start' spawn one more process (monitor) and I want to run it on a small machine, and depends on global cli will make my project more hard to distribute
15:05 < Manobi> pinja: Can you show me some example ?
15:06 < Manobi> pinja: is your project compatible with node 0.8.x ?
15:06 < indexzero> Manobi: Fair enough, well if you use the detached child process API then the parent process will exit and the child will remain running
15:06 < indexzero> checkout how forever does it
15:06 <@isaacs> robinson_k: what's the point of this, exactly
15:06 <@isaacs> ?
15:06 < indexzero> it used to take daemon.node as a dependency, but we removed it because daemon.node doesn't work in a lot of cases
15:06 < pinja> Manobi: Code's not open (yet), but I did look at the Forever code a lot for inspiration
15:07 <@isaacs> SomeoneWeird: npm owner add otherusername packagename
15:07 < indexzero> mornin isaacs 
15:07 <@isaacs> SomeoneWeird: if you need help doing this, email i@izs.me with both your usernames and i'll do it
15:07 <@isaacs> indexzero: hoal
15:07 <@isaacs> *hola
15:07 < SomeoneWeird> isaacs, yeah but I can't login to the user with the uppercase
15:07 < SomeoneWeird> it's SomeoneWeird and someoneweird lol
15:08 <@isaacs> k, one sec
15:08 < SomeoneWeird> cheer
15:08 < SomeoneWeird> s
15:08 < Manobi> I'll look more closer to forever thanks
15:08 <@isaacs> done
15:08 <@isaacs> SomeoneWeird: done
15:09 < SomeoneWeird> awesome, thanks
15:09 < indexzero> Manobi: look here https://github.com/nodejitsu/forever/blob/master/lib/forever.js#L394-L397
15:10 < Manobi> indexzero: thanks
15:15 < MI6> joyent/libuv: Ben Noordhuis master * 60dd395 : Revert "darwin: merge uv_cond_timedwait implementation"  Using mach_absol - http://git.io/vUgT6A
15:25 < motaro> Did you guys saw MySQL add NoSQL...
15:27 < jameshowe> issacs: is there a helpful template project somewhere for building cpp node modules in a propert and tidy manner?
15:27 < pinja> motaro: not really
15:28 < motaro> pinna, What do you mean I'm reading it right now - 'Tomas Ulin, vice president of MySQL Engineering at Oracle told InternetNews. "So we've tried to join the best of both worlds with the full power of SQL to do complex queries and at the same time we're introducing a NoSQL access type API."'
15:30 < jvanveen> hey
15:30 < pinja> motaro: It's just a memcache api to the underlying sql data. There's still a relational schema underneath everything taht still needs updated as data requirements change. you still have all the same challenges when trying to scale it to 128 nodes. etc
15:30 < jvanveen> whats the common way to reference other functions from within a prototype function?
15:30 < jvanveen> ordering them?
15:32 < pinja> motaro: I mean, nothing is really changing, it's just an additional api to hit the data (with caching), and it's a little easier to update table schemas now. That's a far cry from "nosql"
15:34 < sshaginyan> Guys so far no one has been able to explain this to me. Why is node.js slow…...
15:35 < skope> what do you mean slow
15:35 < sshaginyan> Please someone explain me this… I understand I shouldn't test it on a hello world program but tomcat seems to be 8X faster than node.js
15:35 < pinja> sshaginyan: haha
15:36 < sshaginyan> Guys do I have to do agent:false
15:36 < sshaginyan> ?
15:36 < sshaginyan> to make it faster?
15:36 < MI6> joyent/libuv: Ben Noordhuis master * 8d746ff : unix: remove scandir prototype workaround in fs.c  It's not necessary for - http://git.io/r8NN7w
15:37 <@konobi> sshaginyan: http://dtrace.org/blogs/brendan/2012/12/13/usenix-lisa-2012-performance-analysis-methodology/
15:37 < sshaginyan> Please someone help me I've been running apache benchmark and siege and get the same result
15:38 < sshaginyan> konobi: I am simply running hello world I also ran my app with the same results
15:38 < pinja> have you tried "turbo: activate" :) ?
15:39 < sshaginyan> pinja: No what is that?
15:39 < sshaginyan> please tell me
15:39 <@konobi> sshaginyan: read the article, then get back to us
15:39 < sshaginyan> please guys I'm going to work right now but I'll log in in an hour
15:39 < sshaginyan> pinja: What is that thoug?
15:40 < pinja> sshaginyan: it was a jest
15:40 <@konobi> sshaginyan: the article... then get back to us... we need to know which "fast" or "slow" you mean
15:40 < jameshowe> sshaginyan: because Hello World is no kind of benchmark at all
15:40 < sshaginyan> request/second
15:40 <@konobi> again
15:41 <@konobi> WHICH FAST/SLOW
15:41 < sshaginyan> jameshowe: Then what are the trade offs if node.js is running 8x slower for hello world
15:41 < sshaginyan> it was be doing something faster
15:41 < sshaginyan> konobi: so 1000 requests with 10 concurrent and requests/second
15:42 < jameshowe> try 10,000 concurrent users and then see
15:42 < sshaginyan> on a simple hello world let me read the article
15:42 < sshaginyan> jameshowe: How many requests?
15:42 < jameshowe> but benchmarking two servers that don't do anything is a futile exercise
15:42 < sshaginyan> jameshowe: and is there an equation is it polynomial?
15:43 < pinja> 0.0
15:43 < bnoordhuis> sshaginyan: what exactly are you benchmarking? and slow compared to what?
15:43 < dayom> can anyone comment on where the best place to start would be in going through the internals of node
15:43 < jameshowe> requests/second, concurrent users, etc. is pretty meaningless if the server isn't doing anything
15:43 < bnoordhuis> dayom: node::Start() in src/node.cc
15:43 < dayom> ty
15:43 < bnoordhuis> dayom: also, the declarations in src/node.h and src/node_internals.h
15:44 <@konobi> sshaginyan: cpu time, latency, throughput, large vs small requests, concurrency
15:44 <@konobi> these ALL overlap
15:44 < sshaginyan> I understand. But is there somewhere that says the relationships between these parameters
15:45 <@konobi> all of which or together could be considered faster or slower... your benchmarks may not be effectively benchmarking the same thing
15:45 < sshaginyan> or is it app depended 
15:45 < jameshowe> yep here: IT DEPENDS
15:45 < pachet> there's no magic formula ;[
15:45 <@konobi> once you can boil it down to specifics, then we can assist
15:45 < sshaginyan> Okay so I'm building the maces mobile and there is a lot of static files being loaded initally
15:45 < sshaginyan> maybe over a meg
15:45 < sshaginyan> using require
15:46 < sshaginyan> I'm loading backbone query underscore purl and many more files
15:46 < sshaginyan> after that it's all json
15:47 <@konobi> sshaginyan: not the specific of your app, the specifics of what you're seeing as "slow"
15:47 < sshaginyan> requests/sec
15:48 <@konobi> sshaginyan: ERRORNOTSPECIFICENOUGH
15:49 < pinja> konobi: i think you're getting punked
15:49 < sshaginyan> konobi: Let me read the article
15:50 < bnoordhuis> sshaginyan: serving static files is always going to be faster with a traditional web server
15:50 < bnoordhuis> it just tells the kernel 'send this file to that socket'
15:50 < goonnow> Hello
15:50 < bnoordhuis> node can't (usually) take that shortcut
15:50 < sshaginyan> konobi: How would I prove that node.js would be faster/better than apache tomcat 
15:51 < goonnow> I have a question about how to publish new version of my module.
15:51 < bnoordhuis> goonnow: npm publish?
15:51 <@konobi> again, depends on what metrics you are measuring
15:51 <@konobi> sshaginyan: it's a very good article/video, worth reading if you want to benchmark _anything_
15:51 < goonnow> I tried it but nothing happened on npm site.
15:52 < goonnow> or I have to wait.
15:52 <@isaacs> ircretary: tell kschzt Pushed a few more versions of npm just to fix some deps. 1.2.9 is the current latest, 1.2.6 is the first with your fix.
15:52 < ircretary> isaacs: I'll be sure to tell kschzt
16:01 < strk> bnoordhuis: no way, I can't see threads being used. Do you have a suggestion for verifying if thread pool is used ? some maybe oneliner call to a fs or dns function ?
16:01 < tjfontaine> dns.resolve('www.nodejs.org', function () {})?
16:01 < tjfontaine> hmm probably lookup is better for this test
16:02 < strk> tjfontaine: didn't spawn a thread
16:02 < strk> ok, lookup did
16:02 < qubit[01]> I need ensure a function is running only once per process, are there any libs/idioms for this ?
16:03 < tjfontaine> strk: ya resolve is cares, but lookup is gethostbyname which is in the threadpool
16:03 < strk> have one with fs as well ?
16:03 < motaro> pinja: True, what do you when trying to scale more than 128 nodes?
16:06 < daslicht> just found this goodie :
16:06 < daslicht> https://github.com/ncb000gt/node-shoutcast
16:06 < daslicht> anyone has an idea how to determine the current playback position of a song ?
16:07 < daslicht> if so we could provide the listerner with song informtion in realtime via a socket connection
16:08 < funkbox> if i do socket.write(bighugething); socket.write(anotherbighugething); will the first call be fully written to the stream before the second one starts writing?
16:09 < tjfontaine> strk: fs.stat('.', function () {})?
16:15 < jameshowe> issacs: is there a helpful template project somewhere for building cpp node modules in a proper and tidy manner?
16:18 <@isaacs> jameshowe: there are a few little dummy modules, sure
16:19 < jcole> pinja:  thanks for your help earlier... followup question:  with async.ForEach I don't see how to feed it a stream (file is large, so I don't want to read it all in).  With dominic's split, I don't see how to limit how many lines I'm processing at a time (same issue with Lazy).  
16:24 < amurdaca> someone help me with amazon ec2 things?
16:26 < qubit[01]> amurdaca, what things ?
16:34 <@isaacs> jameshowe: any of my own hello-world addons are pretty out of date, though
16:34 <@isaacs> jameshowe: you should ask on the mailing list.  someone probably will respond, maybe a few people.
16:34 < jameshowe> issacs: this is the thing, the only things I can find still use node-waf
16:34 < pinja> motaro: I mean serving a database from 128 machines, instead of just 1 server
16:35 < jameshowe> issacs: it seems like the sort of thing that the node core team can easily provide
16:35 < airtanah> sshaginyan: oh my god this hello world discussion was going on when i went to bed 8 hours ago
16:35 < pinja> jcole: you could use backpressure with the stream approach
16:35 < jameshowe> issacs: with the added benefit that all the other developers will be on the same page
16:42 < MI6> joyent/node: Fedor Indutny master * c024d2d : streams: both `finish` and `close` should unpipe  Otherwise sockets that  - http://git.io/KKvE7A
16:42 < MI6> joyent/node: isaacs v0.8 * 5aef65a : npm: Upgrade to v1.2.10 - http://git.io/W9-cuw
16:44 < pinja> jcole: perhaps something like this - var stream = fs.createReadStream(file); stream.pipe(split()).pipe(map(function (line, cb) { processing++; if (processing>10) stream.pause(); /* process line */; cb(null); processing--; stream.resume(); }))
16:44 < pinja> jcole: that should do 10 lines at a time
16:44 < amurdaca> how to upgrade npm now?
16:45 < amurdaca> ive installed npm via ppa https://launchpad.net/~richarvey/+archive/nodejs
16:45 < pinja> jcole: im sure there's a more elegant solution, but you get the idea
16:46 < SomeoneWeird> amurdaca, if you used the ppa just update your machine normally
16:46 < jameshowe> npm -g install npm
16:46 < MI6> joyent/libuv: isaacs created tag node-v0.8.19 - http://git.io/t6LzZw
16:46 < SomeoneWeird> npm -g update npm
16:46 < Robert00001> but there is npm update
16:48 < amurdaca> jameshowe i did that but required sudo right?
16:49 < jameshowe> oh yeah
16:49 < jameshowe> usually need sudo for -g
16:49 < amurdaca> it gives me a bunch of error :/
16:49 < MI6> joyent/node: isaacs created branch v0.8.19-release - http://git.io/mmnXKg
16:49 < amurdaca> npm http GET https://registry.npmjs.org/npm
16:49 < amurdaca> npm http 200 https://registry.npmjs.org/npm
16:49 < amurdaca> npm http GET https://registry.npmjs.org/npm/-/npm-1.2.10.tgz
16:49 < amurdaca> npm http 200 https://registry.npmjs.org/npm/-/npm-1.2.10.tgz
16:49 < amurdaca> npm ERR! Error: EACCES, mkdir '/usr/lib/node_modules'
16:49 < amurdaca> npm ERR!  { [Error: EACCES, mkdir '/usr/lib/node_modules']
16:49 < amurdaca> npm ERR!   errno: 3,
16:50 < Robert00001> use sudo then
16:50 < TheAceOfHearts> so, new node version was just released? 
16:50 < amurdaca> used sudo but nothing
16:51 < jameshowe> then your sudo is set up weirdly
16:51 < SomeoneWeird> did you use install or update?
16:51 < TheAceOfHearts> sudo npm -g update npm 
16:51 < jameshowe> both work for me
16:51 < jameshowe> but then I built from git rather than using a ppm
16:52 < amurdaca> ubuntu@ip-10-227-51-247:~$ sudo npm update -g npm
16:52 < amurdaca> npm http GET https://registry.npmjs.org/npm
16:52 < amurdaca> npm http 304 https://registry.npmjs.org/npm
16:52 < amurdaca> ubuntu@ip-10-227-51-247:~$
16:52 < amurdaca> ubuntu@ip-10-227-51-247:~$ npm -v
16:52 < amurdaca> 1.2.2
16:52 < amurdaca> ubuntu@ip-10-227-51-247:~$
16:52 < amurdaca> :/
16:53 < SomeoneWeird> amurdaca, same version as mine..
16:53 < SomeoneWeird> (afaik mines the latest)
16:53 < amurdaca> doesn't nodejs and npm just got an update?!
16:54 < SomeoneWeird> hm, yeah
16:54 < SomeoneWeird> npm is 1.2.4 now
16:54 < SomeoneWeird> er
16:54 < amurdaca> :/
16:54 < SomeoneWeird> 1.2.7
16:54 < amurdaca> weird
16:54 < SomeoneWeird> actually, 1.2.10
16:54 < SomeoneWeird> lol
16:54 < SomeoneWeird> $ npm -v
16:54 < SomeoneWeird> 1.2.10
16:54 < jameshowe> as of 5 minutes ago, it's 1.2.10
16:54 < SomeoneWeird> i just updated mine using sudo npm -g update npm
16:54 < SomeoneWeird> and it worrks
16:54 < SomeoneWeird> works*
16:54 < SomeoneWeird> ffs
16:55 < SomeoneWeird> i can't type tonight
16:55 < amurdaca> i get 304 :/
16:55 < amurdaca> ubuntu@ip-10-227-51-247:~$ sudo npm -g update npm
16:55 < amurdaca> npm http GET https://registry.npmjs.org/npm
16:55 < amurdaca> npm http 304 https://registry.npmjs.org/npm
16:55 < amurdaca> ubuntu@ip-10-227-51-247:~$
16:55 < Robert00001> 304 means not modified
16:55 < SomeoneWeird> you have conflicting installs then
16:55 < amurdaca> i know
16:55 < gkatsev> is longjohn still the recommended implementation for long stack traces?
16:55 < SomeoneWeird> do which npm
16:55 < amurdaca> i installed npm via apt-get 
16:56 < SomeoneWeird> amurdaca, run "which npm"
16:56 < amurdaca> ubuntu@ip-10-227-51-247:~$ which npm
16:56 < amurdaca> ubuntu@ip-10-227-51-247:~$
16:56 < SomeoneWeird> wtf
16:56 < jameshowe> so apt-get update npm then
16:56 < amurdaca> ubuntu@ip-10-227-51-247:~$ which npm
16:57 < amurdaca> i'm not understanding nothing....
16:57 < TheAceOfHearts> doesn't npm get installed together with node? I followed the steps here: https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager for when I installed it with Ubuntu and it worked just fine
16:57 < amurdaca> i installed nodejs and npm with apt-get update && apt-get install npdejs npm with this ppa -> https://launchpad.net/~richarvey/+archive/nodejs
16:58 < SomeoneWeird> run apt-get purge npm
16:58 < SomeoneWeird> then see if the npm command still works
17:00 < TheAceOfHearts> I'd trust https://launchpad.net/~chris-lea/+archive/node.js/ this more, simply cuz it's linked in the node.js github :p, although the one you linked to might be just as good
17:00 < SomeoneWeird> yeah, that archive is always up to date
17:02 < amurdaca> removed that ppa...
17:02 < amurdaca> removed nodejs and npm
17:02 < amurdaca> then folllowed github page
17:03 < amurdaca> and now always get 304..
17:03 < amurdaca> ubuntu@ip-10-227-51-247:~$ npm update -g npm
17:03 < amurdaca> npm http GET https://registry.npmjs.org/npm
17:03 < amurdaca> npm http 304 https://registry.npmjs.org/npm
17:03 < amurdaca> ubuntu@ip-10-227-51-247:~$
17:03 < Robert00001> 304 is not an error
17:04 < amurdaca> i know.....the problem is that i cannot update npm nor node
17:04 < SomeoneWeird> i didn't say todo that
17:04 < SomeoneWeird> i said to only remove npm
17:04 < amurdaca> btw i deleted all and installed how the github page says but still nothing..uh
17:05 < SomeoneWeird> run "sudo apt-get purge npm && npm -v"
17:05 < SomeoneWeird> what do you get?
17:05 < SomeoneWeird> and please start using pastebin or something
17:05 < DarkArgon> purge everything and compile from source :D
17:06 < amurdaca> i get 
17:06 < amurdaca> -bash: /usr/bin/npm: No such file or directory
17:06 < nathan7> amurdaca: 304 means content unchanged. It means your cache is up to date.
17:06 < SomeoneWeird> nathan7, his npm isn't though
17:06 < SomeoneWeird> amurdaca, so now remove the ppa you used, and use https://launchpad.net/~chris-lea/+archive/node.js/
17:06 < amurdaca> just did -.-
17:06 < SomeoneWeird> then "sudo apt-get purge nodejs && sudo apt-get update && sudo apt-get install nodejs npm"
17:06 < SomeoneWeird> ah ic
17:07 < SomeoneWeird> ok, well reinstall npm
17:07 < SomeoneWeird> then npm -v
17:07 < amurdaca> the probem is that the ppa chris-lea has 1.2.2 npm and 0.8.18 node
17:07 < amurdaca> i don't see how i could update from that npm..
17:08 < SomeoneWeird> yeah, did you reinstall npm ?
17:08 < amurdaca> ubuntu@ip-10-227-51-247:~$ npm -v
17:08 < amurdaca> 1.2.2
17:08 < amurdaca> yes
17:08 < SomeoneWeird> so try the update command again (sudo npm -g update npm)
17:08 < amurdaca> no luck....
17:08 < SomeoneWeird> hm, weird
17:09 < SomeoneWeird> and sudo npm -g update 
17:09 < amurdaca> it downloads bunch of things
17:10 < amurdaca> nothing...
17:11 < amurdaca> i'm rebooting my ec2 instance..
17:11 < jameshowe> issacs: is it possible to "usurp" an nmp module from it's original owner
17:11 < jameshowe> *its
17:11 < nathan7> jameshowe: The owner can add other people
17:12 < jameshowe> issacs: if, for example, the module is no longer maintained and I have a fork with fixes
17:12 < nathan7> jameshowe: Talk to the owner.
17:12 < BlakeRG> are there any good database ORM / query builder node packages?
17:12 < jameshowe> the owner is awol
17:12 < nathan7> hm
17:12 < jameshowe> which is the problem - no pull requests closed
17:12 < nathan7> mhm
17:13 < amurdaca> btw i'm using ubuntu 12.04
17:13 < amurdaca> maybe this is the problem
17:14 < jameshowe> uninstall ppms and build fron source?
17:14 < amurdaca> mmm
17:15 < amurdaca> how do i then manage updates/upgrades of node when a new version is out?
17:16 < nathan7> Repeat the process.
17:16 < SomeoneWeird> use nvm
17:16 < amurdaca> without uninstalling nothing?
17:16 < jameshowe> git fetch --all
17:16 < SomeoneWeird> amurdaca, use https://github.com/creationix/nvm
17:16 < jameshowe> observe any new tags
17:16 < jameshowe> checkout new tag
17:16 < rump> whats that 3 column todo app again?  web app where multi people can signup and each can say what they're working on, needs to be done, in process, completed, etc
17:16 < jameshowe> make & make install
17:17 < jameshowe> and npm -g update will work properly for everything else
17:18 < TheAceOfHearts> I'm on OSX, I just use brew lol
17:19 < SomeoneWeird> i just do git pull && ./configure && make -j 8 && make install
17:19 < SomeoneWeird> :p
17:20 < nathan7> rump: Trello?
17:20 < CoverSlide> I use give
17:20 < rump> nathan7: trello!  my hero
17:23 < amurdaca> is this tutorial good -> http://davidtsadler.com/archives/2012/05/06/installing-node-js-on-ubuntu/?
17:23 < amurdaca> changing to the latest node of course
17:23 < zomg> amurdaca: seems ok by a quick glance
17:24 < janmower> amurdaca: you don't need python, just libssl-dev and build-essential
17:24 < amurdaca> ok thank you janmower
17:24 < janmower> amurdaca: but the rest is legit
17:24 < amurdaca> so
17:25 < amurdaca> sudo apt-get install build-essential libssl-dev
17:25 < amurdaca> and git
17:25 < spion> hmm. with browserify, require('blah.css').wrap('my-selector').inject(headElement);
17:25 < spion> that would be cool.
17:25 < janmower> yea sudo apt-get install build-essential libssl-dev git-core
17:25 < amurdaca> then i'll follow the Git installation on that blog right?
17:26 < janmower> yea then git clone https://github.com/joyent/node ; cd node ; ./configure && make && make install
17:26 < janmower> sudo make install rather
17:26 < SomeoneWeird> amurdaca, use nvm
17:26 < SomeoneWeird> it does it all for you
17:26 < amurdaca> i want to learn how to do manually SomeoneWeird
17:26 < amurdaca> :)
17:27 < SomeoneWeird> okay then :)
17:27 < janmower> amurdaca: you can also use checkinstall to make a deb package
17:27 < SomeoneWeird> if you have more than 1 core to use, replace the command make with "make -j <number of cores you have - 1>"
17:27 < janmower> amurdaca: just apt-get install checkinstall
17:27 < janmower> amurdaca: then use "sudo make checkinstall" instead of make install
17:28 < sven__> hi :)
17:28 < amurdaca> it's an EC2 micro instance :/
17:28 < janmower> amurdaca: it will make a nodejs.deb package that you can install with dpkg -i node.deb
17:28 < amurdaca> npm comes with node right?
17:28 < SomeoneWeird> uh
17:28 < janmower> amurdaca: yes it's needed
17:28 < SomeoneWeird> compiling on a micro might be a bad idea
17:29 < janmower> compling on a micro is fine, it just takes a while (20 mins or so)
17:29 < sven__> do somebody know, why the "make test" makes a scan on port 1 of many IPs ?
17:29 < sven__> due to this, i got an abuse notification
17:30 < yhpark> Hi
17:30 < amurdaca> why compiling on a micro is bad?
17:30 < amurdaca> it's faster than my netbook..
17:30 < yhpark> is there a way to set encryption mode to cipher?
17:30 < yhpark> cbc or ecb, ..
17:34 < amurdaca> SomeoneWeird why compiling on a micro ec2 is bad?
17:34 < tjfontaine> c++ and little memory don't play well
17:35 < bingomanatee> Good morning node
17:35 < amurdaca> so it's bad in terms of time to compile..
17:35 <@konobi> may not compile
17:35 < amurdaca> ?
17:35 < bingomanatee> I am getting an odd error inside canvas on OSX: "TypeError: Canvas expected"
17:35 <@konobi> not enough ram
17:35 < bingomanatee>     var ctx = this._context2d || (this._context2d = new Context2d(this));
17:36 < bingomanatee> Have installed, reinstalled cairo on osx, and reinstalled canvas in node; other than a few "unused private" warnings it is ok.
17:36 <@konobi> wrong "this" ?
17:37 < bingomanatee> hum -- yeah I am "re-contesting" this - that would explain it. thx
17:38 < BlakeRG> are there any IDEs that have code completion (especially with node packages) right now?
17:38 < Shinister> code completion is always something flakey ish with js
17:39 < DarkArgon> sublime with plugins
17:39 < Shinister> I use c9.io or webstorm
17:39 < Shinister> both offer debugging in editor
17:40 < BlakeRG> DarkArgon: which plugins are generally recommended
17:40 < DarkArgon> http://wbond.net/sublime_packages/community#sort-installs
17:40 <@konobi> komodo edit too
17:41 < DarkArgon> https://github.com/tanepiper/SublimeText-Nodejs
17:42 < amurdaca> konobi is it normal to take up to 1-2 hours to compile?
17:42 < daekano> DarkArgon: nice, thanks
17:42 < DarkArgon> just discovered that. gonna give it a try
17:42 <@konobi> amurdaca: it depends
17:42 < DarkArgon> nodejs?
17:43 < amurdaca> konobi i'm talking regarding my micro instances...friends told me they compiled node on 512mb ram Debian and FreeBSD vm without issue..
17:43 < CoverSlide> on my machines, some of which are about 4+ years old, takes me about 20 minutes to compile
17:44 <@konobi> amurdaca: i'm not an AWS user, so I couldn't tell you really
17:44 < DarkArgon> used -j with make?
17:44 < janmower> amurdaca: it should take around 20-30 mins to compile node on a micro
17:44 < CoverSlide> what is yours using?
17:44 < CoverSlide> try running on a bare debian or freebsd
17:45 < CoverSlide> maybe your maching is doing something else
17:45 < amurdaca> i did sudo make 10 mins ago so let's wait 
17:45 < asturel> how is this possible? console.log(bannedip.indexOf(req.ips)); = -1, console.log(req.ips == bannedip[0]); = true
17:46 < BlakeRG> checking out sublime and this node plugin :)
17:47 < asturel> anyone?
17:47 < MI6> joyent/node: isaacs created tag v0.8.19 - http://git.io/BIrbQQ
17:47 < asturel> or req.ips is an array?
17:47 < asturel> ah.. yeah
17:50 < MI6> joyent/node: isaacs v0.8 * ccf2712 : Now working on 0.8.20 (+2 more commits) - http://git.io/U25lOw
17:51 < skope> where is it clever to store password hashes if using bcrypt?
17:51 < DarkArgon> database?
17:51 < skope> DarkArgon: make different table for hashes per user?
17:51 < MI6> joyent/node: isaacs v0.8 * 1389727 : blog: v0.8.19 release - http://git.io/ySWRzg
17:52 < CoverSlide> i don't see why you'd need that
17:52 < diogogmt> is there a place where I can find guidelines for creating a nom module? I mean not the code style, but the argument format for callbacks
17:52 < aib> I need a comet (long poll) solution to use with per-client event queues, with node on the server and web browser clients. any suggestions?
17:52 < skope> err, salts per user i meant
17:52 < skope> not hashes heh
17:52 < CoverSlide> still, i don't see why a separate table is needed
17:52 < DarkArgon> u mean not tables
17:52 < jameshowe> bcrypt hashes include the salt
17:52 < jameshowe> or you're not using bcrypt
17:53 < CoverSlide> aib: websockets
17:53 < skope> node-bcrypt, so apparently
17:53 < CoverSlide> aib: if you want to support older browsers, look at engine.io, sockjs, or socket.io
17:53 < DarkArgon> socket.io is awesome
17:53 < onr> sockjs is awesomer
17:54 < CoverSlide> engine.io is awesomer than sockjs
17:54 < DarkArgon> node.js is awesome
17:55 < onr> CGI is awesomer
17:55 < aib> I'd looked at some MQ servers two years ago. One (activeMQ, I think) had an example with browser-js long poll clients and a standalone server. I want something similar, possibly a node module instead of a standalone MQ server.
17:56 < CoverSlide> right, you can do that with any of the modules i listed
17:56 < aib> trying to open their sites now, slow net
17:58 < aib> yeah, at least one seems to be almost exactly the solution I need. CoverSli1e: thanks
18:01 < asturel> when i do redis.set("key","val") cant i set ttl?
18:01 < geNAZt> lol CGI
18:01 < geNAZt> :D
18:02 < asturel> i havent found 'expire' cmd
18:05 < SomeoneWeird> is it possible to catch an error then throw custom stacktraces ?
18:05 < CoverSlide> asturel: it should be there, maybe try setex
18:05 < asturel> setex?
18:06 < CoverSlide> http://redis.io/commands#string
18:07 < asturel> ah
18:07 < asturel> i do incr
18:08 < CoverSlide> by the way, there is a .expire command
18:08 < asturel> ah redis.expire works, yeah
18:08 < asturel> thx
18:08 < asturel> increx would be nice also :D
18:11 < jedahan> export PATH="`npm -g bin`:$PATH" in my zshrc gives error `(not in PATH env variable)` even though it adds the correct path to $PATH
18:11 < jedahan> how can that be fixed
18:13 < amurdaca> done installing node on ec2 micro! about 30 mins
18:13 < amurdaca> wqithout any errors
18:13 < amurdaca> *without
18:13 < SomeoneWeird> wow thats slow
18:13 < SomeoneWeird> lmao
18:14 < amurdaca> i've installed pre_0.9.9 
18:14 < amurdaca> lmao
18:14 < SomeoneWeird> heh
18:14 < sfa> hi 
18:15 < amurdaca> now i'll remove this and put 0.8.19 lol
18:15 < sfa> I"m having trouble doing "npm install mongodb" 
18:15 < sfa> I get some errors that I'm not sure what dependency I need
18:15 < sfa> http://pastebin.com/kreSdDtz
18:16 < geNAZt> node -v v0.9.4-pre
18:16 < geNAZt> use a normal version number
18:16 < bingomanatee> konobi : thanks - that helped
18:16 < eydaimon> For the node REPL, is there a way to start it with having libraries loaded?  get tiresome to require the libs every time I start it
18:17 < eydaimon> http://nodejs.org/api/repl.html  
18:17 < geNAZt> eydaimon: maybe you should write yourself a config file which you can include a start
18:17 < eydaimon> maybe this is all I need
18:18 < eydaimon> geNAZt: you mean to only have one file to require as opposed to many?
18:18 < bingomanatee> or you could fork Node. 
18:18 < amurdaca> mmm 0.8.19 not shown in "git tag"
18:18 < bingomanatee> Alter the REPL code. 
18:18 < airtanah> just in case anyone wonders why HAProxy/ELBs don't work well with socket.io, it's not because of websockets. socket.io does two TCP connections before it upgrades to websockets. The solution, use a redis-backed store
18:18 < bingomanatee> :D
18:18 < geNAZt> eydaimon: yes
18:18 < amurdaca> why git tag doesn't show 0.8.19?
18:19 < eydaimon> geNAZt: tried that. still sucked. but looks like I can write my own script which launches a repl instead
18:20 < CoverSlide> yeah do that
18:20 < CoverSlide> actually, wouldn't be a bad idea for a userland package
18:22 < amurdaca> someone?
18:22 < daslicht> I liek to learn how to stream audio to a html5 enabled browser with nodejs , any suggestions wherer to start ?
18:22 < daslicht> like
18:22 < Robert00001> This seems to be a common question
18:22 < daslicht> :)
18:22 < daslicht> so there is a great chance to find an answer ?
18:23 <@konobi> bingomanatee: np
18:23 < daslicht> I like to create a radio like streaming server 
18:23 < daslicht> but to be able to do this I have to get started with small things
18:24 < amurdaca> can i downgrade from 0.9.9 to 0.8.19 just recompiling?
18:24 < amurdaca> or do i need to uninstall 0.9.9?if yes how?:)
18:24 < daslicht> i found this: https://github.com/ncb000gt/node-shoutcast but its quite complex , so it would best to have some basic infos 
18:24 < Robert00001> I found this: http://stackoverflow.com/questions/13714593/node-js-synchronized-audio-streaming-between-server-and-clients
18:25 < SomeoneWeird> you need to find the tag of 0.8.19 then do "git checkout <tag> && ./configure && make && make install"
18:25 < daslicht> i saw that either
18:25 < daslicht> it pints to http://pedromtavares.wordpress.com/2012/12/28/streaming-audio-on-the-web-with-nodejs/
18:25 < daslicht> points
18:25 < amurdaca> SomeoneWeird yes i did checkout v0.8.19
18:26 < amurdaca> now i do ./configure etc etc, this will remove the 0.9.9 right?
18:26 < CoverSlide> you probably want to make clean first
18:27 < asturel> is there a reason why https://github.com/dominiek/node-facebook isnt listed in npm modules?
18:27 < nathan7> Maybe because the author didn't publish it
18:27 < geNAZt> asturel: maybe cause he didnt published it ?
18:27 < asturel> im looking for a facebook connect module and dominiek's repo always pops in
18:27 < nathan7> You can depend on a GitHub repo
18:27 < asturel> but there is even a guide http://howtonode.org/facebook-connect
18:28 < nathan7> asturel: whoa
18:28 < asturel> nathan7?:D
18:28 < nathan7> That thing is from node 0.1 times
18:28 < asturel> :D
18:28 < nathan7> from before we even had npm
18:29 < DarkArgon> do you need it for auth asturel ?
18:29 < amurdaca> SomeoneWeird i did: sudo git checkout v0.8.19; sudo make clean; sudo ./configure; sudo make
18:29 < SomeoneWeird> amurdaca, it will overwrite the old install, so yes
18:29 < SomeoneWeird> amurdaca, you didn't have todo make clean, but yeah
18:30 < asturel> DarkArgon yeah
18:30 < SomeoneWeird> you'll be waiting longer no
18:30 < asturel> https://npmjs.org/package/facebook-session-connection
18:30 < SomeoneWeird> now*
18:30 < DarkArgon> check passport
18:30 < asturel> seems most simplest
18:30 < geNAZt> ^yes passport is nice
18:30 < amurdaca> SomeoneWeird thank for the help mate
18:30 < asturel> passport was unfamiliar to me :D
18:30 < DarkArgon> http://passportjs.org/guide/facebook/
18:30 < SomeoneWeird> np
18:30 < asturel> it depends on passport-app Facebook iframe app autorization ?
18:30 < SomeoneWeird> use passport
18:30 < SomeoneWeird> it's awesome
18:31 < DarkArgon> nodejs is awesome :P
18:31 < SomeoneWeird> no argument here
18:32 < asturel> ist it too big just for fb auth?
18:32 < DarkArgon> nah, it has modules
18:32 < asturel> i mean i found a module which only does the fb auth, nothing complex :D
18:33 < geNAZt> it supports more than 80+ auth providers
18:33 < asturel> yeah but i need only fb :D
18:33 < DarkArgon> yea and if u want.. don't know lets say google auth later its gonna be easy
18:33 < asturel> i want to 'link' accounts with fb
18:33 < context> you'd think oauth would just be 'plop lib, give url, done' not different crap for all these providders
18:34 < context> but i dont know much about how oauth works :x
18:34 < SomeoneWeird> oauth is fucked
18:34 < DarkArgon> +1
18:34 < DarkArgon> i hate oauth
18:34 < SomeoneWeird> anyone, does anybody know if I can modify the global namespace of a file from a module?
18:35 < SomeoneWeird> so module.js can set global.lol or something in index.js ?
18:35 < CoverSlide> yes
18:35 < SomeoneWeird> i tried passing "this" and "global" to module.js but I couldn't get it to work
18:35 < CoverSlide> global is the global object
18:35 < DarkArgon> i think global.lol will just work in index.js
18:35 < CoverSlide> global.lol will be visible to all modules in the same process
18:35 < SomeoneWeird> hrm
18:36 < SomeoneWeird> maybe i missed something then
18:36 < SomeoneWeird> i didn't think it worked
18:36 < SomeoneWeird> oh it does
18:36  * SomeoneWeird stupid
18:37 < SomeoneWeird> i thought it would have, which is why I was like wtf when it didn't
18:37 < SomeoneWeird> coding at 6am does that
18:37 < Gambit-> If I have a node.js loop running in one thread that's currently waiting for IO from libuv, can I insert another set of node.js commands to execute in addition to the current ones?
18:38 < DarkArgon> node.. thread?
18:38 < geNAZt> Gambit-: libuv doesnt wait on io
18:38 < geNAZt> and nodejs doesnt run in threads
18:38 < Gambit-> geNAZt, bear with me for a moment on these environmental things.
18:38 < Gambit-> geNAZt, libuv is responsible for doing the eventing on new IO, though, right?
18:39 < geNAZt> libuv is the event loop in nodejs
18:39 < geNAZt> yes
18:39 < geNAZt> so yes*
18:39 < Gambit-> So at some point, it will block in libuv pending IO, right?
18:39 < geNAZt> no
18:40 < Gambit-> (or timer, or something else)
18:40 < bnoordhu1s> Gambit-: it'll block in uv_run, yes
18:40 < geNAZt> what you mean is event loop lag
18:40 < Gambit-> So, at some point, it will block /somewhere/ pending IO, right?
18:40 < Gambit-> hallo bnoordhu1s, figured I'd fish the channel a bit before escalating :)
18:40 < asturel> so u suggest that i should use passport+module instead of specific module?
18:41 < DarkArgon> yes
18:41 < Gambit-> when it's blocking in uv_run, can I... "execute" more JS in the node engine to, say, add another server?
18:41 < geNAZt> asturel: it is easy to learn, fast, plugs in expressjs easy, and can be extended with more porviders
18:41 < bnoordhu1s> Gambit-: you mean from another thread?
18:41 < Gambit-> bnoordhu1s, I mean however.  You know how deep my arms are willing to reach in this :)
18:41 < bnoordhu1s> well, when node is blocked, it's blocked
18:42 < bnoordhu1s> you can use a uv_async_t handle to wake up the event loop from another thread
18:42 < geNAZt> since its single processed / one threaded you cant do anything if it is blocked
18:42 < bnoordhu1s> and from the async handle's cb do whatever
18:42 < Gambit-> right - I think my question is more "how does one insert new js into node after you've run the commandline?"
18:42 < Gambit-> obviously my nomenclature is way off.
18:43 < Gambit-> but hopefully I'm conveying the idea.
18:43 < geNAZt> whats "new js"
18:43 < geNAZt> node doesnt compile and run the code
18:43 < geNAZt> so you can change it whenever you want
18:43 < DarkArgon> u mean hot code swap?
18:43 < geNAZt> even in runtime
18:44 < Gambit-> so say I have a 'redis.createClient(...); client.dosomething(...);' that's currently executing, waiting on IO.  I want to now do 'mysql.createClient(...); client.dosomething(...);' and have it also running.
18:45 < daslicht> https://npmjs.org/package/audio-streamer
18:45 < daslicht> cool
18:45 < Gambit-> I suppose the normal node.js way of doing that would be to have a timer or something else fire based on an event or some such that would execute that other code, right?
18:45 < bnoordhu1s> Gambit-: yes
18:45 < geNAZt> Gambit-: the only blocking on io you have is to write tcp packages into the kernels queue
18:45 < DarkArgon> isn't that the idea of nonblocking?
18:46 < Gambit-> So, if I wanted to cause that to happen from another thread, not owned by node.js, within the process, what would I have to do?
18:46 < Gambit-> This is a question mostly for bnoordhu1s since we've been already talking about some of my non-standard deployment requirements.
18:47 < Gambit-> For the rest of you - I'm looking at embedding node inside of another, threaded, application.  Things are getting very weird, and that's why my questions may not make a lot of sense.
18:47 < Gambit-> I'd be happy to expand on them, as long as you can accept some limitations in the level of detail I will offer :)
18:47 < geNAZt> have fun syncing up the loops :D
18:47 < Gambit-> geNAZt, that's what event queues are for :)
18:47 < geNAZt> well if they have space yes
18:48 < geNAZt> if they are full 
18:48 < geNAZt> thats the interesting part
18:48 < ckknight> Hey all, if anyone is interested in compile-to-JS languages that aren't javascript, tell me what you think about http://ckknight.github.com/gorillascript/
18:48 < ckknight> err
18:48 < ckknight> that aren't coffeescript
18:48 < bnoordhu1s> Gambit-: you can't do that from within js but that's where the uv_async_t handle comes it
18:48 < Gambit-> geNAZt, it's actually worse than that; I'll have to make uv_run become re-entrant to drive the js engine, rather than actually block in it.  Don't even get me started on timers and stuff.
18:48 < bnoordhu1s> you use the handle to wake up the event loop and then some kind of synchronization primitive to communicate between the threads
18:48 <@konobi> use a socket for comms!
18:48  * konobi ducks
18:49 < bnoordhu1s> libuv has the usual suspects for that: mutexes, condition variables, etc.
18:49 < Gambit-> bnoordhu1s, And then just duplicate the calls in node.cc for executing an arbitrary script with the additional content?
18:49 < Gambit-> bnoordhu1s, and all the rest of V8's API for accessing the newly created objects?
18:49 < bnoordhu1s> Gambit-: yes
18:50 < bnoordhu1s> Gambit-: but one thing, don't try to hand off v8 or node objects across threads
18:50 < bnoordhu1s> it won't work and things will go badly wrong :)
18:50 < Gambit-> Now's a good time for you to (again) go "my god man, what lunacy is this!" if you see anything additionally aggregious going on :)
18:50 < Gambit-> Oh yeah, that reminds me - I assume a non-threaded V8 and a TLS'ed node.js will explode into pretty pixels?
18:50 < Gambit-> s/aggregious/egregious/
18:50 < bnoordhu1s> quite likely, yes
18:51 < segomos> ckknight: using & is terrible
18:51 < ckknight> segomos: why's that?
18:51 < Gambit-> s/non-threaded/non-tls'ed/
18:51 < Gambit-> okay, thanks :)
18:52 < ckknight> segomos: most string concat is done through interpolation anyway. I stole & from VB land and I needed some syntax outside of `+`.
18:52 < segomos> because VB is terrible
18:52 < ckknight> ha
18:52 < ckknight> yeah, VB6 and below are terrible
18:52 < segomos> qbasic is the last decent basic language
18:52 < segomos> plus it has the gorilla game
18:53 < segomos> i'd be more interested to see perl to JS interpreters
18:55 < jedahan> export PATH="`npm -g bin`:$PATH" in my zshrc gives error `(not in PATH env variable)` even though it adds the correct path to $PATH. Is there a fix for this?
18:55 < Gambit-> segomos, yay for gorilla! :)
18:55 < ckknight> see, everyone loves gorillas
18:55 < segomos> yea but everyone hates vb syntax
18:55 < CoverSlide> VB.NET isn't too bad
18:55 < segomos> exactly
18:55 < ckknight> so addition is terrible, right?
18:55 < ckknight> because VB uses + for addition
18:56 < ckknight> it must be evil
18:56 < ckknight> a broken clock can be right twice a day.
18:56 < CoverSlide> you can copy PHP and use . for concatenation
18:56 < ckknight> that's too confusing with dot access
18:56 < segomos> change all dot access to ->
18:56 < ckknight> interpolation is a better way to do concatenation
18:56 < CoverSlide> & is too confusing with bitwise and
18:56 < ckknight> "hello, $name"
18:57 < ckknight> CoverSlide: in GorillaScript, bitand is bitwise and
18:57 < ckknight> all the bitwise operators start with bit
18:57 < CoverSlide> >> "3" & "7"
18:57 < purr> CoverSlide: (number) 3
18:58 < segomos> how fast is it compared to just writing the stuff properly in JS?
18:58 < ckknight> segomos: especially when you deal with async stuff or even normal loops, I find it much faster.
18:58 < ckknight> the async stuff is where it shines
18:59 < segomos> do you have a benchmark ?
18:59 < skope> thoughts of coffeescript in nodejs?
18:59 < segomos> coffeescr is also terrible too
18:59 < DarkArgon> i like plain js
18:59 < SomeoneWeird> gross
18:59 < SomeoneWeird> lol
18:59 < CoverSlide> skope: horrible idea
18:59 < segomos> BAM
18:59 < Robert00001> I like coffeescript
18:59 < Robert00001> So I use it in node.js
19:00 < ckknight> segomos: oh, for execution time? I thought you meant developer time.
19:00 < segomos> ckknight: i'd be interested to see benchmarks on gorilla, i don't see how you could have made it faster by adding additional checks
19:00 < Robert00001> although loading it takes ~1200ms
19:00 < ckknight> segomos: assuming all the types are properly marked, it produces equivalent JavaScript code
19:00 < segomos> ahh okay
19:00 < CoverSlide> skope: also, if you do end up using a compile-to-js language for publicly available modules, NEVER EVER EVER make that a dependency of your module.
19:00 < amurdaca> how do i share mongo connection among routes? i have a manin app.js and a folder with routes
19:00 < amurdaca> using mongoose
19:00 < airtanah> skope: lots of people use it
19:00 < airtanah> skope: lots of people hate it
19:01 < airtanah> you won't find any consensus here
19:01 < segomos> amurdaca: pass the connection
19:01 < ckknight> segomos: there are some things which it does to make things generally the best possible case, such as iterating through an array caches the length and such.
19:01 <@konobi> you'll get your issue closed if you provide example code in it
19:01 < amurdaca> segomos so i create the connection in app.js then pass it to the routes as second argument and in the route i simply do mongo.Schema etc etc?
19:01 <@konobi> and sometimes even if it's javascript that looks like it's been generated from it
19:01 < CoverSlide> there's too many dumbasses writing libraries that depend on coffeescript, when really they should be compiling to js, them publishing the module, of course that means they have unreadable javascript in their code
19:02 < airtanah> CoverSlide: i agree, provide modules as javascript
19:02 < DarkArgon> do you really wanna do mongo.Schema in a route?
19:02 < skope> CoverSlide: yeah, i get that. stupid thing
19:02 <@konobi> in fact, i think npm may block those modules in a while
19:02 < amurdaca> DarkArgon how i do?
19:03 < amurdaca> i create the connection in the main
19:03 < amurdaca> then pass it to the routes
19:03 < segomos> ckknight: it looks cool, regardless
19:03 < amurdaca> to fetch/update/delete
19:03 < airtanah> skope: also don't abuse the fact that coffee script has a 'class' construct or you'll end up in hell
19:03 < skope> airtanah: okay
19:03 < amurdaca> what's wrong with this? explain cause i'm new here lol
19:03 < skope> maybe i will stay with pure js
19:03 < DarkArgon> https://gist.github.com/fwielstra/1025038
19:03 < Robert00001> I use classes in coffeescript
19:04 < ckknight> segomos: except for the reminescent part of VB :P
19:04 < airtanah> classes are find, but complex type heirarchies are not suitable for javascript
19:04 < eydaimon> I got colors to work in my own little repl, but how come it doesn't work in the regular repl? There's even an env to turn it off. (NODE_DISABLE_COLORS) but I cant have it on?
19:04 < segomos> ckknight: just because i don't like it doesn't mean it isn't cool
19:04 < airtanah> classes are fine*
19:04 < Gambit-> bnoordhu1s, I took a look at that preemption stuff btw, according to http://code.google.com/p/v8/issues/detail?id=729 it's never really worked.  Good idea, though :)
19:04 < ckknight> segomos: :P
19:04 < eydaimon> oh, nevermind
19:05 < amurdaca> DarkArgon mmm thats nice
19:05 < amurdaca> bit outdated maybe but t's ok for my usecase
19:05 < segomos> ckknight: it'd be cool to see perl -> js
19:05 < voodootikigod> brianc: hey are you around, I have a pg library question
19:05 < CoverSlide> that's basically coco
19:05 < ckknight> segomos: well I don't plan to provide that.
19:05 < CoverSlide> not really
19:05 < CoverSlide> but kind of
19:05 < voodootikigod> brianc: more of "what do you recommend" than a "i am a noob"
19:06 < segomos> it's on the other end of the spectrum from VB
19:06 < DarkArgon> amurdaca, last updated a day ago
19:06 < DarkArgon> outdated?
19:07 -!- mode/#Node.js [+o TooTallNate] by ChanServ
19:07 < geNAZt> one question about socket.io and expressjs: Is it possible to run a Socket.IO Server insinde a ExpressJS Vhost ?
19:07 < amurdaca> why he passes ObjectID in thread.js DarkArgon?
19:08 < geNAZt> if not are there any other libs that act like socket.io but can be migrated into an expressjs vhost ?
19:08 < DarkArgon> u mean post.js?
19:08 < amurdaca> yep sorry
19:09 < DarkArgon> will be a ref to the thread. why is that outdated
19:09 < DarkArgon> i mean he should have used Schema.Types.ObjectId
19:09 < DarkArgon> but who cares
19:10 < amurdaca> mmmm which type of data is ObjectId?
19:10 < amurdaca> i come from mysql/postgres
19:10 < brianc> voodootikigod: I'm here
19:10 < amurdaca> is some sort of association? or some key?
19:10 < geNAZt> amurdaca: its an built in mongodb object
19:10 < brianc> voodootikigod: no worries even if you were a noob.  I <3 noobs.  But I know you been around a good long time. :)
19:11 < geNAZt> to represent ids
19:11 < DarkArgon> ^yep
19:11 < voodootikigod> brianc: damn, my age shows!
19:12 < amurdaca> DarkArgon oh they are normal ID
19:12 < amurdaca> http://docs.mongodb.org/manual/core/object-id/
19:12 < brianc> voodootikigod: your good works show! Don't know about yer age. :)  hit me with the question I'll do mah best
19:12 < voodootikigod> brianc: so i know the discussion going on for ticket 227 with pooling and this may overlap, I am running it basically as a singleton pattern where I do the connect once on application run, then access it as needed with the callback model (basically blending the two methods recommended on the read me) is there a benefit downside to this way?
19:12 < brianc> the downside would be you only using 1 connection no matter how many requests
19:12 < voodootikigod> brianc: sorry for the long as can be question and yes, its mainly a philosophical q, which is why I wanted to ask you 
19:12 < voodootikigod> brianc: ahhh ok
19:12 < voodootikigod> brianc: thats a good thing to avoid :)
19:13 < brianc> so if one query is slow
19:13 < brianc> all the requests everywhere will wait
19:13 < voodootikigod> brianc: is your recommend to spawn on each req? or use the any-db pooling (As recommended in last comment on ticket)
19:13 < brianc> definitely use a pool
19:13 < voodootikigod> cause i know of the "no query failure case"
19:13 < voodootikigod> confidence level in the built in pool?
19:13 < brianc> takes easily 10x as long to connect as it does to run a "SELECT NOW()" query
19:13 < voodootikigod> current confidence level :)
19:14 < voodootikigod> yea
19:14 < voodootikigod> hence why i tried to cache it once
19:14 < brianc> yeah
19:14 < brianc> that will work under low load
19:14 < brianc> but pooling probably your best
19:14 < voodootikigod> ok cool
19:14 < brianc> i think any-db is good, espesh if it catches on more since it solves some of the problems with all databases, like reconnecting & stuff
19:14 < voodootikigod> nice
19:14 < voodootikigod> this is why I ask the expert
19:14 < brianc> haha
19:14 < voodootikigod> would recommend +1000
19:14 < voodootikigod> :)
19:15 < CoverSlide> use Sybase
19:15 < brianc> muchas gracias
19:15 < voodootikigod> brianc: thanks a bunch!
19:15 < DarkArgon> amurdaca, http://mongoosejs.com/docs/populate.html
19:15 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
19:15 < brianc> voodootikigod: totes! if you hit any snags & I'm not online you can email me too, I pretty responsive there - only on IRC during the day times (CST)
19:15 < voodootikigod> brianc: ah quick follow up
19:16 < voodootikigod> brianc: any idea if i can specify native for any-db
19:16 < asturel> in passport, how can i get Authenticated data?
19:16 < voodootikigod> brianc: cool I am EST, so wouldn't ping before 2 cups anyway
19:16 < asturel> i mean there is an a req.isAuthenticated but i want the auth things too :D
19:16 < geNAZt> req.user
19:16 < brianc> voodootikigod: i believe any-db goes to native by default
19:17 < voodootikigod> brianc: w00t
19:17 < brianc> https://github.com/grncdr/node-any-db/blob/master/lib/adapters/postgres.js#L24
19:17 < voodootikigod> brianc: golden!
19:17 < brianc> voodootikigod: wait wait
19:17 < brianc> https://github.com/grncdr/node-any-db#postgres
19:17 < voodootikigod> brianc: have been bitten too many times with the date manip on pure js, so just stuck with native
19:18 < voodootikigod> brianc: well thats monkeyed
19:18 < voodootikigod> use forceJS to false to make native…. wtf...
19:19 < brianc> voodootikigod: yeah gonna see if i can help fix this
19:19 < asturel> thanks
19:19 < voodootikigod> brianc: which the native on any-db OR the date time handling in pure js
19:19 < voodootikigod> either should result in happiness
19:21 < brianc> one sec
19:21 < voodootikigod> no rush
19:21 < voodootikigod> just people raging safely
19:21 < voodootikigod> :)
19:22 < brianc> how does the date manipulation bite you?
19:22 < brianc> I believe the date conversion is done within the js layer regardless of which binding (js/native) you're using
19:23 < voodootikigod> i wish I could remember, I just know when we started there was a major issue parsing timestamptz
19:23 < voodootikigod> could be completely and totally fixed
19:23 < voodootikigod> and i am still fearing the boogeyman
19:23 < voodootikigod> 152% possible
19:23 < voodootikigod> (also do still fear the boogeyman)
19:24 < amurdaca> 1 hour to compile 0.8.19 on micro ec2 now T.T
19:24 < brianc> haha
19:24 < voodootikigod> amurdaca: compile on a raspPi, then lets talk :) 1 hour is lightning!
19:24 < amurdaca> i actually want to compile it on a rpi with mongodb too :O
19:25 < brianc> well dang if that happens again lemme know.  There was some switching back & forth between doing timezone adjustment on Timestamp without timezone, but havne't messed w/ date parsing in a while I dont' believe
19:25 < amurdaca> more than an hour on the rpi?????
19:25 < voodootikigod> amurdaca: easily, like 4 hours last time I did it
19:25 < amurdaca> holy shit
19:25 < voodootikigod> brianc: I can swap and try (in fact using any-db would suffice for that)
19:25 < amurdaca> i might leave the pi there.....
19:25 < voodootikigod> more like pishit
19:26 < voodootikigod> than holy
19:26 < amurdaca> def yes lol
19:26 < voodootikigod> brianc: thanks! (and great lib)
19:26 < brianc> thank you sir - i'll work on getting the anyDB issue fixed
19:26  * amurdaca hate micro ec2 instances
19:26 < voodootikigod> brianc: well let me see if pureJS works if it does then w00t
19:27 < brianc> if you hit a date issue lemme know.  the best thing is just a self-contained piece of code that can reproduce it and I'll get it fixed asap
19:27 < voodootikigod> absolutely!
19:27  * amurdaca finally compile 0.8.19
19:27 < voodootikigod> trust me, I won't file a ticket otherwise
19:27 < brianc> haha awesome
19:27 < MI6> joyent/node: Fedor Indutny master * d59beb9 : tls: port CryptoStream to streams2 - http://git.io/x90-KA
19:27 < geNAZt> amurdaca: how long does it take ?
19:27 < voodootikigod> I deal with too many of the "I have random issue" with my libs
19:27 < amurdaca> geNAZt 1 hour
19:27 < geNAZt> wow :D
19:27 < amurdaca> exactly 1 hour
19:27 < voodootikigod> love the "doesn't work" with no details… those <3z
19:27 < brianc> yah hard to debug.  
19:28 < brianc> those are great
19:28 < brianc> thankfully usually they come back & report user error after a few days
19:28 < brianc> i think I could use more documentation though to cut down on user error
19:28 < voodootikigod> yea
19:28 < voodootikigod> you are lucky
19:28 < voodootikigod> mine is so haphazard
19:29 < voodootikigod> cause its "well I am using arduino 1.34343 which is only available in iceland and windows 95
19:29 < brianc> hahaha
19:29 < voodootikigod> help?
19:29 < voodootikigod> but i love that people are playing with hardware (or at least trying)
19:30 < geNAZt> i keep trying to compile nodejs on a nas :D
19:30 < brianc> yeah absolutely
19:30 < geNAZt> its hard :D
19:30 < brianc> i got node on a pi but that's as far as i've taken it "hardware wise"
19:30 < brianc> it did take all night to cpmile
19:31 < voodootikigod> hahaha
19:31 < voodootikigod> yea
19:31 < voodootikigod> when you get a chance, if you have "moments"
19:31 < voodootikigod> j5
19:31 < voodootikigod> brianc: https://github.com/rwldrn/johnny-five
19:31 < voodootikigod> worth playing with
19:32 < othiym23> ahhhh, just uninstalled nvm and am using the official OS X binaries + nave
19:32 < othiym23> feels good
19:32 < brianc> voodootikigod: awesomeness
19:45 < DarkArgon> how "much" is 1000 user-requests/s on a webserver?
19:45 < segomos> about 500
19:45 <@mbalho> i'd say 42
19:45 < segomos> 420
19:46 < DarkArgon> makes sense
19:46 < DarkArgon> should that be possible on an average cpu, lets say quad core
19:46 < pachet> no you need a cray
19:47 < geNAZt> it depends on what you serve
19:47 < geNAZt> statics, js, php or what ?
19:47 < DarkArgon> js / php
19:47 < DarkArgon> i'm switching from php to js atm
19:47 < geNAZt> then you wont be able to handle this much req/s
19:49 < DarkArgon> on php or js?
19:49 < DarkArgon> or both?
19:50 < geNAZt> well calculate 10ms per call (which is awesome fast
19:51 < ckknight> it depends on what the server's doing, but on quad-core, that'd be easy.
19:51 < DarkArgon> i just discovered loader.io. gonna try that
19:52 < geNAZt> i have a nodejs running with a page that has an average of 15ms loadtime and 4 core 3.4ghz and i am getting aroun 2300 req/s
19:52 < othiym23> DarkArgon: I'd figure you should be able to do about 80k requests per minute per core, wo 1.2k requests per second
19:52 < DarkArgon> u just told me that it is not possible
19:52 < geNAZt> well it depends on what the serevr also is handling
19:53 < othiym23> running under cluster I'm able to get a bare HTTP server to do about 560k requests per minute on an 8-core MacBook Pro
19:53 < geNAZt> my server only does webservers
19:53 < geNAZt> no dbs no statics
19:53 < geNAZt> only nodejs
19:53 < othiym23> yeah, that's doing *nothing* else -- no external I/O, no computation
19:53 < othiym23> just returning a static string to every incoming HTTP request
19:53 < DarkArgon> othiym23, same response time?
19:54 < othiym23> yeah, I ran my own tests using jMeter on the same box, and I think most of the CPU was being consumed by jMeter
19:54 < othiym23> a well-designed PHP app and a well-designed Node app doing the same things should have roughly equivalent performance
19:55 < DarkArgon> wow. my shitty server already goes up @ 500 connections
19:55 < othiym23> that assumes a level of "all other things being equal" that's pretty hard to realize
19:56 < DarkArgon> 135ms at 1000 connections for a page without db querys
19:56 < DarkArgon> using loader.io
20:02 < MI6> joyent/libuv: Ben Noordhuis master * d5dd7d0 : darwin: merge uv_cond_timedwait implementation  This is a revised version - http://git.io/Pb2rsw
20:10 < asturel> hmm with passport + fb the emails is undefined :S
20:11 < DarkArgon> http://img845.imageshack.us/img845/527/selection018m.png
20:11 < DarkArgon> where do there network errors come from?
20:12 < DarkArgon> *where do these
20:21 < zackiv31> express question... I want to run all /api calls through a piece of middleware to check for login... why doesn't app.use('/api', checkLogin) trigger ?  I know I can add checkLogin to each route manually, like app.get('/api/field', checkLogin, ... ) ... but can it be done on an entire path at once?
20:21 < rickibalboa> Is there any in built method I can rate limit incoming data on a socket? Like disconnect it if it appears to be getting flooded, or do I have to implement that on my own?
20:22 < DarkArgon>  /api/* maybe
20:23 < zackiv31> DarkArgon, doesn't work
20:23 < azylman> Is app.use right? Shouldn't you be using app.get?
20:23 < azylman> app.get('/api/*', checkLogin)
20:24 < DarkArgon> no post this way
20:24 < DarkArgon> u can do app.all(...)
20:25 < nathan7> azylman: http://expressjs.com/api.html#app.all
20:25 < azylman> nathan7: I think you meant to direct that to zackiv31...
20:26 < zackiv31> DarkArgon, azylman thanks... app.all is what I need... so it'll pass through to my other app.get()s as long as i call next()
20:28 < azylman> zackiv31: If that still doesn't work, make sure that you're putting the checkLogin middleware before your routes are defined
20:28 < nathan7> azylman: whoops
20:35 < gigafied> anybody know if putImageData() is supported in node-canvas?
20:35 < gigafied> Doesn't seem to be working for me
20:39 < Gabriel403> Why are the most common versions 0.4 0.6 0.8? What happened to the odd numbers?
20:39 < geNAZt> odd is unstable
20:39 < geNAZt> even => stable; odd => unstable
20:39 < context> wow. new.myspace.com looks pretty nice :x
20:40 < Gabriel403> oh ok
20:42 < Gabriel403> Any idea why when I do sudo npm install -g redis I still get cannot find module?
20:42 < CoverSlide> Gabriel403: https://npmjs.org/doc/faq.html#I-installed-something-globally-but-I-can-t-require-it
20:42 < CoverSlide> you're probably the 1,000,000th customer with that issue
20:44 < asturel> i cant set req.session. in app.get('/auth/facebook/callback', passport.authenticate('facebook', { failureRedirect: '/' }),function(req, res) { ... } ?
20:44 < DarkArgon> that's not a question
20:45 < DarkArgon> wait. it is ^^ dumb me
20:45 < asturel> it doesnt give any error, but doesnt seems to work
20:45 < dmcaodha> Hi
20:45 < DarkArgon> hi
20:46 < dmcaodha> Anybody taking questions???
20:46 < DarkArgon> as always in irc, just ask
20:47 < asturel> http://pastebin.com/RMN70EwN
20:47 < asturel> the update mysql part is ok
20:47 < asturel> and if i do console.log(req.session) its ok
20:48 < asturel> i mean the changes are visible
20:48 < DarkArgon> but
20:48 < asturel> after the redirect it wont
20:48 < asturel> i have an middleware which does res.locals.session = req.session;
20:48 < dmcaodha> I am building an application in Express and CouchDB. Rather than use a couchDB node module, I am using Mikeal's request module to connect to couch. Does anyone have any sample code code I could look at using this stack?
20:49 < geNAZt> maybe you havent setup the sessions right
20:49 < asturel> it works with my 'normal auth'
20:49 < asturel> it does the same
20:49 < Gabriel403> CoverSlide: only 1millionth?
20:50 < asturel> http://pastebin.com/wtfmxqNy
20:50 < DarkArgon> do you app.use(express.cookieSession()); ?
20:50 < asturel> yeah
20:50 < asturel> no
20:50 < asturel> only app.use(express.cookieParser());
20:50 < asturel> and app.use(express.session({
20:51 < geNAZt> astruel: do you end the request after setting the session ?
20:51 < asturel> http://pastebin.com/LBsUtxAY
20:51 < asturel> it redirects
20:51 < geNAZt> https://github.com/senchalabs/connect/blob/master/lib/middleware/session.js#L274-L284
20:52 < geNAZt> sessions only get saved if you end the request
20:52 < asturel> but res.redirect doesnt do res.end too?
20:52 < geNAZt> i will have a look
20:53 < nathan7> dmcaodha: nano builds on request to provide a convenient API but still provides streaming etc
20:53 < nb-ben> one thing I find terribly hard to do with JavaScript is memory management
20:53 < nathan7> How so?
20:54 < DarkArgon> http://passportjs.org/guide/configure/
20:54 < nathan7> You think carefully about scope
20:54 < nb-ben> yeah you manage who has access
20:54 < DarkArgon> the example uses express.session
20:54 < nb-ben> but you have no control over queueing tasks
20:54 < DarkArgon> and passport.session())
20:54 < nathan7> Encapsulation is a different matter
20:54 < nb-ben> it's queued, and it will be delivered
20:54 < nathan7> And that's another matter altogether
20:54 < asturel> i use it like this DarkArgon
20:54 < nb-ben> for example, you could define you have 200 buffers in Java
20:55 < nb-ben> and handle 200 requests using those 200 buffers simulataneously
20:55 < nb-ben> you know you are going to use say 10mb of buffer space
20:55 < DarkArgon> oh i see. sorry
20:55 < nb-ben> in JavaScript there's just no way to manage that
20:55 < nb-ben> atleast that I know of
20:57 < nb-ben> oh well, guess it's that transition to memory-is-cheap era
20:57 < FunnyLookinHat> nb-ben, memory isn't awful if you do it all with best-practices... but I get what you're saying.
20:58 < FunnyLookinHat> That said - the reason JS is so quick n' dirty is because you don't have access to things like memory
20:58 < DarkArgon> asturel, does the cookie even gets set on the client?
20:58 < geNAZt> asturel: a redirect does call the end of and response
20:58 < asturel> cookie?
20:59 < geNAZt> ?
20:59 < asturel> the mysql update part is ok: http://pastebin.com/RMN70EwN
21:00 < geNAZt> i see your error :D
21:00 < asturel> where?
21:00 < geNAZt> the old fashion node is async error :D
21:00 < asturel> ahh
21:00 < geNAZt> you redirect before the database has finished
21:00 < asturel> too early redirect?
21:00 < geNAZt> yes
21:00 < CoverSlide> yes
21:00 < asturel> baaaaah:D
21:00 < asturel> thx :D
21:01 < dmcaodha> nathan7: I am using request as I want to learn the couch API. Its my first time using a document database.
21:01 < asturel> works, thx :D
21:01 < geNAZt> np
21:13 < amurdaca> i'm using mongoose and in my package.json i have "mongoose": "~3.5.5"
21:13 < amurdaca> how i set the version so i can do npm update and it will update mongoose future version?
21:16 -!- mode/#Node.js [+o TooTallNate] by ChanServ
21:16 < airtanah> nb-ben: writing cpp extensions is easy
21:16 < airtanah> nb-ben: much easier than doing it in other languages at least
21:16 < CoverSlide> even go?
21:17 < airtanah> cpp extensions in go?
21:17 < CoverSlide> i know writing C bindings in go is kind of trivial
21:18 < CoverSlide> not sure about cpp though
21:18 < airtanah> CoverSlide never tried it, never done more in go than write the tutorials
21:18 < airtanah> CoverSlide: the hardest part of doing cpp with node is when you need async stuff, then you have to juggle libuv event loop stuff
21:19 < CoverSlide> yeah, I've been meaning to dig into that, but the async part is the one that scares me
21:19 <@konobi> cpp? preprocessor extensions?
21:19 < mscdex> the async stuff is easy
21:19 < mscdex> :-D
21:20 < airtanah> easy perhaps, not trivial
21:20 < mscdex> that's because you're dealing with threads
21:20 < mscdex> most likely
21:20 <@konobi> oh, cxx/c++
21:22 < airtanah> mscdex: no threads, but anything outside of the main event loop has to be queue back
21:23 < airtanah> mscdex: passed back through a baton struct that has *some* required attributes, and some custom ones
21:23 < airtanah> mscdex: easy, sure, after you get the hang of it. to call it trivial is a bit misleading
21:25 < nathan7> airtanah: ~3.5.5 is equivalent to >=3.5.5 <3.6.0
21:25 < nathan7> airtanah: and by semver that is what should never break
21:25 < airtanah> nathan7: i think you're replying to the wrong guy
21:28 < lbod> ive a very simple question, im right saying that sometimes npm'ing modules requires installing executables yeh? Or is it always just js/packages? 
21:29 < Raydiation> where do i want to put my package.json?
21:29 < Raydiation> i have php, coffee and js files in my project
21:29 < Raydiation> the coffee files are in coffee/ js in js/
21:29 < CoverSlide> the root of your project usually
21:29 < Raydiation> i want to use grunt and an addon to run all the unittests and compilation
21:30 < Raydiation> do i commit the node_modules directory to my repo?
21:30 < Raydiation> also does this directory still work when im inside the coffee/  folder
21:31 < DarkArgon> do not commit node_modules
21:31 < DarkArgon> add dependencies in your package.json
21:31 < nathan7> airtanah: oops, I meant amurdaca
21:32 < MI6> joyent/node: Ben Noordhuis master * 7b0770b : typed arrays: copy non-ArrayBuffer in DataView ctor  This is commit 01ee5 - http://git.io/0AqSSQ
21:32 < airtanah> Raydiation: put package.json wherever you want node_modules to be
21:32 < nathan7> I should not tabcomplete when sleepy
21:32 < Raydiation> ty
21:32 < airtanah> nathan7: i'm sure one day your advice will come in handy
21:33 < lbod> maybe i should rephrase the question, using npm sometimes means it will need to install native libraries/extension? I'm trying to get node.js accepted in our corporation, firewall rules etc means it's difficult, we could just download the package (zip) manually from github but there are occasions native libs need to be installed?
21:37 < DarkArgon> i think those native libs are included in the package
21:37 < DarkArgon> see https://github.com/mongodb/js-bson
21:38 < DarkArgon> but i'm not 100% sure
21:38 < lbod> DarkAgon: thx, all of them? so installing any package doesnt need a native lib?
21:38 < lbod> (including windows)
21:39 < bnoordhu1s> lbod: maybe `npm shrinkwrap`?
21:42 < lbod> i guess what im saying is, once the the node and npm executables are installed, any other package we want to install through npm doesnt need native extensions installed/added? im fine doing this at home on linux, unfortunately work uses winblows and they have various security policies which would make it difficult
21:43 < bnoordhu1s> lbod: most packages are pure js but not all
21:43 < bnoordhu1s> of the native add-ons, not all work on windows btw
21:44 < lbod> how can i tell which ones have native deps?
21:44 < DarkArgon> they probably will tell you 
21:45 < bnoordhu1s> lbod: find node_modules/ -name binding.gyp
21:45 < Tixz> I'm using mongoose. I'm currently implementing a passport local strategy. My passwords get encrypted using bcrypt. My plan was to have a mongoose virtual called password, and using the pre('save') hook, salt and hash the password and persist it to a hash property. I feel like the virtual is a bit messy (implementing get/set just to set a variable). Is there a more clean way?
21:45 < bnoordhu1s> lbod: and maybe repeat that search for wscript files
21:46 < lbod> bnoordhu1s: thx...
21:46 < jayk> Hello.  I'm having a heck of a time wrapping my head around the streams2 stuff - Does anyone have any good pointers to docs or examples of how you write something that conforms to it properly? 
21:47 < Xeon06_> Hey guys
21:47 < lbod> bnoordhu1s: but the most popular packages like express etc, it's normally JS only
21:47 < lbod> ?
21:47 < Xeon06_> Can someone help me understand how to redirect using the basic http server? I'm setting location, using 404 as status, and all I get is a blank page. If I put something in my "end" call, it outputs on the blank page
21:48 < chilts> Xeon06_: you need a 301 or 302, not a 404 :)
21:48 < chilts> you're correct in setting a Location header :)
21:48 < bnoordhu1s> lbod: yes
21:49 < lbod> bnoordhu1s: thanks, good man
21:49 < Xeon06_> chilts: welp, sure enough. I feel silly now. Thanks
21:51 < lbod> oh and before i go, did everyone enjoy the gnome announcement on JS a cpl of days ago? :D
21:51 < lbod> http://treitter.livejournal.com/14871.html
21:53 < lbod> i like being called a brogrammer
21:53 < lyaunzbe> the comments are so acidic.
21:54 < jayk> lyaunzbe: to coin a phrase "Haters gon' hate" ;-)
21:55 < lbod> "but vala has been here for years and is so stable" :D
21:57 < jayk> anybody have 2¢ to share on streams2?  I've been going around in circles for hours and I'm sure it's because of some small detail I'm missing....
22:03 < Raydiation> do you think its appropriate to wrap grunt and node dev installation stuff inside a makefile?
22:03 < nathan7> jayk: http://youtu.be/tgTniHwGPuM
22:03 < jayk> nathan7: looking.  thanks..
22:06 < MI6> joyent/libuv: Saúl Ibarra Corretgé master * 5fa6903 : win: Avoid using subversion to download gyp - http://git.io/Z-b1Bw
22:12 < airtanah> Raydiation: code example?
22:15 < Raydiation> airtanah: http://dpaste.org/YD6jj/
22:20 < garann> is there any sort of reasonable replacement for http://cdn.socket.io/stable/socket.io.js ?
22:21 < DarkArgon> for the cdn or the lib itself?
22:21 < azylman> garann: are you asking for a different websocket library or socket.io hosted on a different cdn?
22:21 < garann> DarkArgon: cdn
22:21 < DarkArgon> http://cdnjs.com/
22:22 < garann> ah, of course - thanks DarkArgon :D
22:27 < airtanah> Raydiation: just make sure grunt is on the PATH
22:27 < airtanah> i.e. it has to be globally installed
22:27 < airtanah> it's a bit less portable than listing it as a dev-dependency
22:27 < Raydiation> airtanah: ty
22:28 < Raydiation> how do i install devDependencies? i got a package.json file, but using npm --dev install inside this directory pulls in an enourmous amount of packages
22:28 < Raydiation> this is my package.json http://dpaste.org/W8vdz/
22:28 < airtanah> npm install --save-dev grunt
22:29 < airtanah> Raydiation: i guess grunt has a lot of dependencies
22:29 < Raydiation> airtanah: ty :)
22:29 < airtanah> in the makefile, you might want to call ./node_modules/.bin/grunt 
22:29 < airtanah> instead of grunt directly
22:29 < Raydiation> right, ty
22:30 < MI6> joyent/libuv: Ben Noordhuis master * 3b51949 : darwin: make uv_cond_timedwait() clock skew safe  Use pthread_cond_timedw - http://git.io/M3mwgg
22:30 < airtanah> Raydiation: anyways, i use Makefiles all the time, as long as you keep it simple they're weonderful
22:31 < MI6> joyent/libuv: Ben Noordhuis master * da33bba : darwin: make uv_cond_timedwait() clock skew safe  Use pthread_cond_timedw - http://git.io/jambLw
22:32 < amurdaca> https://github.com/bryanpaluch/create-upstart-monit/tree/master/bin is this good or outdated guys?
22:32 < CoverSlide> you install grunt-cli globally
22:33 < CoverSlide> grunt as a dependency of the module you want to gruntify
22:33 < CoverSlide> or devDependency actually
22:34 < airtanah> amurdaca: you can use node-foreman to export upstart files based on a Procfile and .env file
22:34 < airtanah> amurdaca: http://nodefly.github.com/node-foreman/
22:42 < cxreg> anyone know of something in either core or npm that will tell me how many file descriptors my process has open?
22:42 < cxreg> or should i just scrape /proc
22:43 < bnoordhu1s> cxreg: the latter
22:43 < cxreg> it would probably be useful to make a npm module to generalize that
22:43 < cxreg> and make it cross platform
22:43 < cxreg> maybe i will
22:54 < mscdex> cxreg: `lsof -a -p <pid> | wc -l` ?
23:01 < amurdaca> can i use "respawn" inside myapp.config (Upstart) instead of using monit????
23:02 < brianc> amurdaca: yes
23:02 < brianc> amurdaca: monit will do a lot more than just respawn your app if it dies. it can email you, it can check if your app is answering over http, it can watch system usage, etc
23:04 < amurdaca> brianc oh ty
23:04 < amurdaca> but i didn't get a thimg
23:04 < amurdaca> *thing
23:04 < amurdaca> when i install monit it uses a gui on localhost:8080
23:04 < amurdaca> im using ubuntu server so no gui
23:05 < amurdaca> how can i install it so i don't need the web feature
23:06 < context> "need" ?
23:06 < amurdaca> use let's say
23:06 < context> and im trying to figure out what monit has to do with node.js
23:07 < context> i imagine there is a seperate init.d script for minit-web
23:07 < context> monit-web*
23:07 < othiym23> isaacs: ping
23:08 < context> amurdaca: http://mmonit.com/monit/documentation/monit.html#monit_httpd
23:08 < context> amurdaca: the internet knows all. glad i could spend 10 seconds finding that for ya
23:14 < amurdaca> should i install monit with sudo apt-get or download the tar and do somthing?
23:17 < CoverSlide> go with apt-get
23:17 < othiym23> isaacs: ping revoked, figured it out (driving npm via its API)
23:22 < amurdaca> CoverSli1e do you know how can i check if monit is working?
23:22 < amurdaca> i followed this tutorial -> http://howtonode.org/deploying-node-upstart-monit
23:23 < breck> amurdaca: have you tried mon?
23:23 < breck> http://tjholowaychuk.com/post/35623012479/monitoring-processes-with-mon
23:23 < amurdaca> and started everything with
23:23 < amurdaca> sudo start yourprogram
23:23 < amurdaca> sudo monit -d 60 -c /etc/monit/monitrc
23:23 < amurdaca> but how can i know if monit is really doing his job?
23:24 < DarkArgon> did u know what 0.2+0.1 is in js? i did not
23:25 < styol> DarkArgon: thats strange ;)
23:25 < styol> >>0.2+0.1
23:25 < purr> styol: (number) 0.30000000000000004
23:25 < DarkArgon> really strange
23:25 < CoverSlide> the same as it is in ruby and python?
23:25 < CoverSlide> yes we all know this
23:25 <@Nexxy> floating point numbers are so strange! ;o
23:26 < owen1> do we need semicolons in node? please explain why.
23:26 <@Nexxy> no
23:26 <@Nexxy> JS has ASI
23:26 < breck> owen1: no
23:26 <@Nexxy> with that said, you should probably keep them in anyway :D
23:27 < owen1> so what situation do i still neeeds them?
23:27 < owen1> client side dev?
23:27 < DarkArgon> is purr available for everyone?
23:27 <@Nexxy> if you use infix operators as logic
23:27 <@Nexxy> you should probably use semis
23:27 < CoverSlide> i like npm style: https://npmjs.org/doc/coding-style.html#Semicolons
23:28 < CoverSlide> you should use them unless you know ASI rules perfectly inside and out
23:28 < owen1> CoverSlide: in other words - yes. use them!
23:28 < amurdaca> http://54.246.93.253/ <---- production server ready on amazon ec2 :D will write a blog post!
23:29 < CoverSlide> the world needs more hello world blog posts
23:29 < amurdaca> lol
23:29 < nlf> the npm coding style hurts me
23:29 < nlf> comma first and no semi-colons
23:29 < nlf> hleghk
23:29 < amurdaca> i'll make a tutorial on how to do a blog and api and other stuff
23:29 < holzp> semi's give Lint a semi
23:29 < owen1> http://nodeguide.com/style.html  - i folllow this style guyd
23:29 < owen1> guide
23:30 < Gambit--> hey bnoordhuis, why do you cast your module init functions to a prototype with a different signature?
23:30 < nlf> owen1: agreed
23:30 < nlf> only i like 4 spaces instead of 2, but i can deal with either
23:30 < CoverSlide> comma first is one that i use everywhere, even if I keep the semis. my only difference is that i don't start on the same line as the [
23:31 < nlf> i get the reasons people like comma first, it's just not in my nature
23:32 < mscdex> node.js rules!
23:33 < holzp> Thank goodness for async
23:33 < holzp> its the fork to my spaghetti
23:33 < mscdex> wait, async is a fork?
23:33 < mscdex> :-D
23:33 < CoverSlide> i though it was a swiss army knife
23:33 < holzp> meta-for
23:34 < CoverSlide> metal 4?
23:34 < Gambit--> ferk.
23:35 < CoverSlide> drew curtis?
23:35 < mscdex> i wish v8 had a way to optimize objects in c++
23:35 < mscdex> like how you can optimize arrays by passing a length
23:35 < mscdex> :S
23:37 < CoverSlide> does that actually do anything performance-wise?
23:37 < CoverSlide> i know people do it, but I haven't seen any perfs to actually prove it true
23:39 < owen1> will ecmascript6 have fat arrow?
23:39 < mscdex> CoverSlide: using an array with a length passed in instead of using an object is a significant performance increase
23:41 < mscdex> ok, well ~1.5x
23:42 < mscdex> i think i tried passing some kind of hint when creating an object, but i think it actually made performance worse than without it
23:42 < cxreg> mscdex: yeah lsof, but not depending on actually having lsof.  i mean, readdir /proc/self/fd isnt exactly hard either
23:43 < CoverSlide> >> [1,0,Infinity,-Infinity,NaN].map(Number.isFinite)
23:43 < purr> CoverSlide: (object) [true, true, false, false, false]
23:51 < Gambit--> How many npm or internal node modules use threads in some form?
23:52 < CoverSlide> 0
23:52 < Gambit--> bnoordhuis seemed to imply to me that threadpools were used for something somewhere under the hood
23:52 < Gambit--> I see some indications in crypto and zlib.
23:52 < othiym23> Gambit--: none
23:52 < othiym23> npm is pure js
23:52 < Gambit--> I'd also note that the debug agent runs in a separate thread, apparently.
23:52 < othiym23> the internals do use threads, but only on the C++ side, and only for I/O
23:52 < othiym23> the debug agent is the V8 debugger, more or less
23:53 < MiracleBlue> :D hey guys
23:53 < Gambit--> othiym23: I'm not seeing that; do you mean for disk io?
23:53 < othiym23> it makes its own laws
23:53 < Gambit--> othiym23: I'd appreciate a link to where those are used.
23:53 < othiym23> Gambit--: yes, libuv maintains a thread pool for file I/O
23:53 < Gambit--> if it's in libuv then I know about that already
23:53 < Gambit--> ah gotcha
23:54 < Gambit--> Yeah, I'm all over libuv like a hot sticky mess, I  wanted to get some cross-validation on what node.js expects of libuv - in other words, not threading.
23:54 < Gambit--> thanks for the details.
23:54 < othiym23> sure, np
23:55 < Gambit--> are you a contrib btw, or just informed?
23:55 < othiym23> I'm just a dude who spends all day reading Node source
23:56 < othiym23> Gambit--: also this is a question that gets asked like once a day on #node.js ;)
23:56 < Gambit--> really?
23:56 < Gambit--> that's surprising.
23:56 < othiym23> yeah, everybody wants to know where the great and powerful wizard of threads is hiding
23:56 < Gambit--> I only ask because I'm engaged in deep fuckery
23:56 < Gambit--> oh, because there are lots of idiots.
23:56 < Gambit--> gotcha
23:57 < othiym23> a lot of people seem to have a hard time believing that Node supports concurrency without threads
23:57 < Gambit--> well, that's the power of interupts or wtf drives epoll nowadays :)
23:57 < Gambit--> well async io in general.
23:57 < othiym23> epoll / kqueues / IOCP
23:57 < othiym23> libuv is a magic little library
23:57 < Gambit--> *handwave* *handwave*
23:57 < othiym23> what are you doing with it, btw?
23:57 < Gambit--> Deep.  Fuckery.
23:57 < MiracleBlue> I managed to finish that thing I was developing and overcome the zip issues
23:58 < Gambit--> (in the same tone of voice as "Best. Men." was used in Indiana Jones)
23:58 < Gambit--> Basically I'm porting it into a microkernel enviornment.
23:58 < Gambit--> or at least scoping out how much of a nightmare it's going to be.
23:58 < othiym23> oh neat
23:58 < othiym23> have you checked out luvit yet?
23:59 < Gambit--> ah, I love luajit.  Does luvit have the extensive protocol support that node.js has?
23:59 < othiym23> I have a friend who was thinking about using an FPGA to run Node or mruby and I told him to try luvit first, because it's so much simpler / would need so many fewer gates
23:59 < Gambit--> yeah, totally.
--- Log closed Thu Feb 07 00:00:19 2013
