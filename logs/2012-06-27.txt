--- Log opened Wed Jun 27 00:00:12 2012
--- Day changed Wed Jun 27 2012
00:00 < Raynos> isaacs: so I turns out nave hanged at the end make and never got to the make install bit
00:03 < PigDude> I just found out about https://github.com/bevry/watchr :^)
00:04 < Raynos> isaacs: I need to manually copy the "correct bits" into "$NAVE_ROOT/0.8.0" ( https://github.com/isaacs/nave/blob/master/nave.sh#L357 ). Any recommendation on how to do that?
00:07 < tilleps> anyone else having problems with node 0.8.x and connect-session / connect-mongo ?
00:12 < CIA-75> node: Bert Belder v0.8 * r0cdeb8e / (lib/fs.js test/simple/test-regress-GH-3542.js): windows: make fs.realpath(Sync) work with UNC paths - http://git.io/iK2ygw
00:19 < myndzi> does the code in a module run every time you require it, or just the first time?
00:20 < jetienne> myndzi: just the first
00:20 < jetienne> myndzi: later require reuse the same result
00:22 < myndzi> well, i know the module exports are cached, that is, for a = require('foo') in one module and b = require('foo') in another module, a === b
00:22 < myndzi> but i'm wondering about any bare code, initialization stuff, etc.
00:22 < myndzi> i think you already answered that but i just wanted to be clear :)
00:22 < jetienne> myndzi: ok, yeah the answer remains the same :)
00:22 < myndzi> cool, thanks
00:53 < austinbv> mass quit
00:53 < myndzi> thanks for letting us know :)
00:53 < mmalecki> dominictarr: hi!
00:54 < mmalecki> dominictarr: how's it going?
00:54 < austinbv> np
00:54 < myndzi> hehe, i once wrote a netsplit detector detector script for the fun of it
00:54 < myndzi> it "reported" a split between the user and the channel
00:54 < myndzi> >:)
00:57 < mappum> I can't npm install node-inspector (on node v0.8.0, npm 1.1.32), will I just have to wait until they make it compatible?
01:01 < CoverSlide> try installing 0.1.10
01:02 < mappum> where? the one I am using is what was installed when I built node
01:04 < llrcombs_> in the Crypto module, is hash.update("foo"); hash.update("bar"); the same as hash.update("foo" + "bar");?
01:07 < CoverSlide> llrcombs_: yes
01:08 < mappum> are Buffers garbage collected? I know their memory is outside of v8, so how does it work?
01:08 < llrcombs_> thanks CoverSlide 
01:12 < TooTallNate> mappum: Buffers are garbage collected just like any other JS object
01:13 < CoverSlide> How can you be sure you're not leaking buffers?
01:14 < TooTallNate> CoverSlide: monitor your process' memory and wait/look for leaks?
01:15 < CoverSlide> Well I'd guess there's no reason it would leak any worse than anything else
01:32 < dominictarr> mmalecki, yeah goo!
01:33 < dominictarr> s/goo/good!
01:33 < dominictarr> currently advocating for streams https://github.com/getbridge/bridge-js/issues/1
01:40 < mmalecki> dominictarr: good to hear :). where are you now?
01:45 < dominictarr> cambodia
01:45 < dominictarr> Cambodia is really cool.
01:45 < dominictarr> it makes Thailand look boring.
01:45 < mmalecki> dominictarr: I should visit sometime soon, then. I'm actually planning to visit Nepal on my vacation.
01:46 < dominictarr> oh, nepal sounds interesting.
01:46 < dominictarr> your holiday is soon?
01:46 < mmalecki> dominictarr: oh yeah, it does. that'd be 3 or 4 weeks from now on.
01:47 < mmalecki> I could go there anytime, but I'm waiting for my friend to get her passport.
01:49 < mmalecki> dominictarr: if you want to drop by, I'd be totally down for few beers :)
01:49 < mmalecki> I'm most likely going to stay in this hotel: http://www.endoftheuniverse.com.np/
01:52 < llrcombs_> Is 0.8.0 Cluster still no good for Socket.io?
01:53 < mmalecki> llrcombs_: it is good for everything. socket.io is bad for cluster.
01:54 < dominictarr> mmalecki, does it have freewifi http://a1.sphotos.ak.fbcdn.net/hphotos-ak-ash4/s720x720/306990_10150986134239555_745082484_n.jpg
01:54 < mmalecki> llrcombs_: anyway, https://github.com/indutny/sticky-session, if you want to use socket.io.
01:54 < llrcombs_> mmalecki: fine then, is socket.io still bad for native cluster?
01:54 < llrcombs_> I've been using sticky-session; I just don't like it much
01:55 < mmalecki> dominictarr: hahah, nice photo. it does, but it's 2500 km over sea level, might be hard to get a good connection there.
01:56 < mmalecki> s/over/above/
01:56 < mmalecki> lrvick: well, the problem is in the way which socket.io uses to negotiate connection. it first sends a http request to check available transports, then actually connects.
01:56 < mmalecki> er
01:57 < mmalecki> llrcombs_: ^
01:57 < dominictarr> holiday from the internet!
01:58 < mmalecki> dominictarr: possibly! also, Katmandu is like 50 km away, $ 20 by taxi. I'm sure there's some internet there.
01:58 < mmalecki> dominictarr: I'd rather stay connected, for the sake of devops ;).
01:59 < llrcombs_> mmalecki: I've heard mixed messages about Redis storage fixing that
02:00 < mmalecki> llrcombs_: right, but these 2 connections should still end up on the same worker. and you have to use redis storage too.
02:01 < llrcombs_> so, in other words, stick with sticky-session for now?
02:01 < dominictarr> mmalecki, how long are you going for?
02:02 < mmalecki> dominictarr: one week probably. or however long my friend wants to stay there.
02:02 < mmalecki> I think she mentioned one week tho.
02:03 < dominictarr> oh lala !
02:03 < mmalecki> hm?
02:04 < mmalecki> dominictarr: you want to drop by?
02:05 < llrcombs_> is sticky-session compatible with Node 0.8.0?
02:06 < mmalecki> llrcombs_: no idea, sorry. should be tho, APIs didn't change *that* much.
02:06 < mmalecki> indutny might be able to tell more
02:08 < dominictarr> mmalecki, when are you going?
02:08 < dominictarr> I'm planning on heading to europe in 3 weeks (or so)
02:09 < dominictarr> nepal does sound like an interesting diversion, though!
02:09 < mmalecki> dominictarr: yeah, that's a good question. in 3 or 4 weeks, I suppose, but it depends on how fast she can get her passport.
02:11 < mmalecki> (it's kind of lame too, it takes fucking ages here. 2 weeks is the fastest they can do.)
02:13 < dominictarr> oh no. I'm allergic to paper work.
02:14 < mmalecki> well, you would die in Poland, then.
02:14 < dominictarr> haha!
02:15 < dominictarr> will you be back in europe before you leave for the states?
02:15 < mmalecki> oh, yeah.
02:16 < mmalecki> I'll most likely visit Prague later.
02:16 < mmalecki> and wherever you'll be by then :).
02:17 < dominictarr> I'm gonna come to lxjs
02:17 < dominictarr> (though, to stupid to buy tickets at the right time, so fingers crossed)
02:17 < dominictarr> so deff see you there
02:18 < mmalecki> oh, then we're definitely meeting there.
02:18 < mmalecki> oh, damn. I hate these moments.
02:18 < mmalecki> went to get some coffee.
02:18 < mmalecki> wtf is the sun doing outside?
02:19 < mmalecki> "oh, yeah, it's 4 AM, idiot. and you should get up in 2 hours."
02:20 < mmalecki> night is lost anyway. brb, making some breakfast.
02:21 < dominictarr> HAHA
02:22 < dominictarr> mmalecki, I've been considering programming from a bunker where all the clocks are only in unix time.
02:31 < mmalecki> dominictarr: that'd probably work. you could actually create your own sleep cycle, instead of trying to adapt to existing one.
02:32 < jacobolus> anyone know of some good code for encoding/decoding floats in javascript? (I realize node now has builtins for this, but I need to do it in a browser; I just figure this channel is likely to have a crowd that might know something about such things)
02:32 < wavded> can someone point me to the js source for the process module?
02:33 < MrBlue> Has anyone here used Node.io framework?
02:33 < dominictarr> wavded, look in github/joyent/node/lib/process.js most likely
02:34 < wavded> dominictarr: yeah that's where i thought it would be but doesn't seem to be
02:36 < BombStrike> src/process_wrap.cc
02:36 < BombStrike> you get the spawn and kill methods there
02:40 < wavded> dominictarr: seems to live in src/node.cc
02:42 < mmalecki> interesting how I just used physics to make a better toast.
02:43 < dominictarr> wavded, there is probably a js end to it also.
02:43 < dominictarr> since process is an EventEmitter
02:47 < wavded> dominictarr: good point
02:49 < tilleps> RE: express: anyone know why express.sid in the headers.cookie could be different from req.sessionID ?
02:55 < dominictarr> tilleps, I think I had that problem, sid = $HASH.$RANDOM ?
02:56 < dominictarr> if I sliced out the stuff before the . then it was the same.
02:56 < dominictarr> I don't know what the random data is for...
02:56 < tilleps> yea, I did that before and I got that to work.  But now that I upgraded to node 0.8.x, the $HASH part doesn't match now, so not sure if it's related to the upgrade
03:05 < bob_the_bob> Object #<Worker> has no method 'suicide'
03:05 < bob_the_bob> hmm
03:09 < Raynos> wavded: src/node.js and the rest is in C++
03:19 < wavded> Raynos: thanks
03:33 < cainus> hey all... any dnode users awake?
03:34 < cainus> just wondering if the dnode server can invoke methods on the client as well
03:35 < jesusabdullah> yes
03:35 < jesusabdullah> both ways
03:35 < cainus> alright excellent...thanks
03:37 < cainus> I guess it would be pretty sad to be polling still, just in a different protocol
03:46 < dested> anyone ever use restmq?
03:59 < defunctzombie> is detached (for child process) supposed to work for fork ?
04:04 <@bnoordhuis> defunctzombie: not really. detached is accepted as an option but the parent and the child communicate over a pipe
04:05 < bob_the_bob> so is anybody using the built-in cluster module and getting lots of Error: listen EADDRINUSE errors in Server._listen2.self._handle.onconnection (net.js:904:28) whenever a worker tries to establish a connection ?
04:05 < defunctzombie> @bnoordhuis take a look at http://pastebin.com/QQY9jmKv
04:06 < defunctzombie> just run it with "node file.js randomname"
04:06 <@bnoordhuis> defunctzombie: i was on the way out actually :)
04:06 < defunctzombie> psh :p
04:07 < mmalecki> bnoordhuis: wow, going to sleep?
04:07 < defunctzombie> kk, ill poke at it more and ask again tomorrow
04:07 <@bnoordhuis> mmalecki: no, breakfast
04:07 < mmalecki> bnoordhuis: hah. I had mine an hour ago
04:07 < defunctzombie> basically, I am trying to have the process daemonize itself :)
04:08 < cainus> anyone know why a dnode server would die with "Error: Unable to load shared library .../node_modules/weak/build/default/weakref.node" ?
04:08 < cainus> seems like weak got install correctly by npm
04:08 < defunctzombie> @cainus try npm rebuild
04:09 < cainus> defunctzombie, no diff
04:10 < cainus> same if I even rm node_modules and npm install again
04:12 < SubStack> cainus: does that file exist?
04:12 < cainus> I downgraded to 0.9.12 and it works
04:12 < cainus> SubStack, the file did indeed exist
04:13 < SubStack> the 0.9.12 api is a bit different
04:13 < cainus> oh maybe I was trying an 0.9.12 example then
04:13 < SubStack> that wouldn't cause the weakref error
04:13 < cainus> yeah strange error for that
04:14 < SubStack> can you try `npm install weak` and then `require('weak')` in a repl?
04:14 < cainus> same error message
04:15 < cainus> the file does indeed exist though
04:15 < defunctzombie> :'( All I want is for a node process to daemonize itself
04:15 < cainus> the error message gives me an absolute path and it's there
04:16 < defunctzombie> is that too much to ask?
04:19 < cainus> SubStack, https://gist.github.com/3001402
04:24 <@konobi> defunctzombie: without a setsid, it appears so
04:24 < SubStack> cainus: what about require('weak') ?
04:25 < cainus> SubStack, https://gist.github.com/3001455
04:30 < defunctzombie> victory!!
04:35 < mek||malloc> Howdy, I have a server running a python app over apache on port :80 and I'm trying to create a subdomain which points to a node.js app running on :8080 (but appearing to be served as :80). Does anyone have experience doing something like this / can anyone please suggest a relevant resource?
04:36 < mek||malloc> Can't seem to ask in #apache.
04:36 < defunctzombie> indexzero: https://gist.github.com/3001483
04:37 < cainus> mek||malloc, maybe mod_proxy
04:37 < indexzero> defunctzombie: https://github.com/nodejitsu/forever/tree/node-0.8
04:37 < defunctzombie> bahahah
04:38 < indexzero> defunctzombie: You know AvianFlu wrote the the detached child process stuff in node 0.8 so we could do this in pure JS :-D
04:38 < defunctzombie> yea
04:38 < defunctzombie> I know :)
04:38 < indexzero> :)
04:38 < jesusabdullah> totally ballin' btw
04:38 < indexzero> I've been wanting to refactor out the core forever functionality into a different library which the CLI tool depends on
04:38 < jesusabdullah> I should upgrade to 0.8 but I don't feel too urgent about it so I'm being a late adopter
04:39 < jesusabdullah> indexzero: awhile
04:40 < defunctzombie> I was thinking it might cool to have a lib that is just a drop in that does what that gist does
04:40 < defunctzombie> basically you would require('daemonize-me');
04:40 < defunctzombie> and that would be it
04:40 < jesusabdullah> defunctzombie: chjj wrote one
04:40 < defunctzombie> it could emit events for 'restart', etc
04:40 < defunctzombie> oh yea?
04:40 < jesusabdullah> A thing you can require to daemonize, I mean
04:40 < defunctzombie> link?
04:41 < jesusabdullah> defunctzombie: https://github.com/chjj/daemonic
04:42 < defunctzombie> that could use some refactoring given the new node options :)
04:43 < defunctzombie> but yes.. this would be the basic idea
04:43 < defunctzombie> another goal would be to support restarting
04:43 < tilleps> does anyone know what format this is (express.sid string from headers - I don't know where the "s:" came from)?  s:aHhiE6+c5odJ+ws2GfzM3Ml4
04:44 < defunctzombie> s: means signed
04:44 < defunctzombie> it is an internal thing for express
04:44 < defunctzombie> so it knows how to process the cookie
04:46 < tilleps> ty defunctzombie, I guess I'll use connect.utils.parseSignedCookie()
04:47 < defunctzombie> yea, if you want to parse it yourself I think you will need to do that
05:01 < SubStack> is it possible to run Xvfb on osx?
05:01 < jesusabdullah> yeah
05:01 < jesusabdullah> you can run x on osx at least, so I'd imagine so
05:01 < jesusabdullah> but, your x server runs independently of cocoa
05:02 < jesusabdullah> like, osx doesn't use x11 standard but you can run it alongside
05:02 < SubStack> that's probably fine
05:02 < SubStack> Xvfb is just a fake X server anyways
05:02 < jesusabdullah> Yeah, idk your use case
05:02 < jesusabdullah> Oh, webdriver
05:02 < SubStack> launching browsers headlesslly
05:02 < SubStack> well not webdriver
05:02 < SubStack> other things
05:02 < jesusabdullah> SubStack: https://github.com/jesusabdullah/pxvncfb
05:03 < SubStack> woop
05:05 < jesusabdullah> SubStack: https://groups.google.com/forum/?fromgroups#!topic/webdriver/zrQaC3Yrpuc This is probably relevant to your interests
05:06 < jesusabdullah> whoa, https://code.google.com/p/phantomjs/wiki/XvfbSetup too
05:11 <@konobi> there's xvfb-run too
05:29 < DTrejo> has anyone re-implemented flash media server in node?
05:30 < DTrejo> just curiousss
05:39 < pawn> What timezone does Node.js use for Date objects?
05:41 < gkatsev> pawn: the timezone of your machine/server
05:48 < Tobsn> pawn, always system
06:09 < kulicuu> allo
07:06 < theodore> hey guys, I can't get jade to see myscript.js stored on my machine
07:06 < theodore> script(src="./myscript.js")
07:25 < stermi> Hi guys, I'm pretty new to JS and Nodejs itsself. I like very much the async idea and the usage of callbacks but I'm a bit confused on how to solve this problem: https://gist.github.com/8ab0a1eee542077b155c
07:26 < stermi> I've a forloop and inside the for an async function. The function need to use the counter of the for but as you can see it changes while the async function is runned
07:26 < stermi> which is the best way to solve this problem?
07:27 < Daegalus> stermi: i think there was an exact example of something like this in Douglas Crockfords book. Ill give you a link in a second
07:27 < stermi> thanks Daegalus 
07:28 < Daegalus> stermi: i also recommend reading all of it. Don't treat it as a JS Bible, but it has soem good practices, and teaches you some important things about JS
07:29 < stermi> this is a good advice, at the moment I'm still experimenting this language
07:29 < stermi> you are anyway really correct
07:29 < jhsto> does anyone come up with a good solution how to prioritize some functions before running code after it?
07:29 < stermi> because sometimes I'm a bit confused abut all the callback/async stuffs
07:30 < jhsto> im getting banned all the time from a specific api service, since my code runs asynchronously and therefore send another packet before the first one is even really come
07:30 < Daegalus> stermi: give me a second to look through the book to find the page, then i will link you to a pDF of it
07:31 < Daegalus> jhsto: give async.series a look
07:31 < jhsto> thanks Daegalus
07:33 < [AD]Turbo> hola
07:33 < stermi> Rightnow I'm reading those articles Daegalus http://howtonode.org/control-flow while waiting :P
07:35 < Daegalus> stermi: ill pm yhou the link  to the book and instructions to finding it in the pdf
07:46 < Apathetic> is it better to use node.js than apache on a regular website?
07:49 < stermi> I think that the best way to solve my problem is to pass to findOne the value of the i parameter (not the pointer) and use that value as final for the function. But can I "extend" the signature of a callback function like findOne (mongodb function)?
07:50 < tees> Nexxy: <3
07:50 < Daegalus> Apathetic: not really, Node isnt really super at serving static pages, and it doesnt have php ro other support unless you write it all in. Its better to use Nginx, and route all static stuff to apache or nginx itself, and the important api/webapp stuff ot node.js
07:57 < game16> How do I require files from directories above?
07:58 < Daegalus> game16: use relative paths? require("..\somethingabove.js");
07:58 < game16> .. doesn't seem to work
07:59 < Daegalus> dont see why it wouldnt, ive used it personally
08:02 < stermi> Daegalus, is there a way to extend the signature of a callback function?
08:03 < game16> oh, never mind
08:04 < game16> I misspelled the file name
08:04 < game16> thanks Daegalus 
08:04 < game16> Mm, my only issue 
08:04 < game16> Is I'm using mysql-native
08:04 < game16> but I can't keep this connection persistent across everything
08:05 < game16> so I have to keep importing my mysql connection
08:06 < Daegalus> why not pass it between functions?
08:06 < Daegalus> once you open the connection
08:06 < Daegalus> pass it to all other functions as a parameter
08:07 < game16> Hmm? How does that work? Oh, I guess I should mention I'm doing this in Express
08:07 < Daegalus> doesnt matter, one you open the connection, the connection info is stored in teh object. when you pass the object, the reference to it gets passed, so anything you pass around will talk to the same object, meaning the same connection
08:07 < Daegalus> Pass by refernce
08:09 < game16> I hope I'm doing this right : I created a separate db_connects.js file where I open the connection 
08:09 < game16> I require(db_connects) in app.js
08:10 < game16> in my controller files, I require(app)
08:10 < game16> are they all using the same connection?
08:10 < game16> I'm not sure how to pass the object when they're all separated like this into separate files.
08:11 < Daegalus> game16: What you do is once you open the connection in db_connect.js, return the object in the fucntion that opens it to the main file
08:11 < Daegalus> in the main file, save the return to a variable
08:11 < Daegalus> then in all future functions, pass the function in as a variable
08:12 < game16> Hmm I see
08:12 < game16> Thanks man,
08:12 < game16> it seems uglier to do it with mysql than mongo
08:13 < Daegalus> game16: depending on which mongo driver you use, it would be done very much the same way
08:22 < bob_the_bob> I'm using the cluster module with unix sockets… when I disconnect my workers and exit my master process, the socket file is not automatically deleted like it is when not using cluster, so on next run the workers fail to listen() because of EADDRINUSE. Am I missing something ?
08:35 < stermi> Daegalus, solved! https://gist.github.com/8ab0a1eee542077b155c#comments
08:35 < stermi> thanks :)
08:36 < Daegalus> stermi: awesome, glad i could help :)
08:37 < stermi> yay! thanks, these are tip & tricks not easy for new language
08:37 < Daegalus> oh ya, definitely, and JS is a different beast from class based languages like Java. And most of java in general
09:27 < dominictarr> isaacs, do we even need transitive dependencies?
09:28 < dominictarr> I'm having trouble thinking of a reasonable use-case
09:36 < arcanis> is it possible to manage middleware dependencies with express/connect ?
09:38 < Bennit> hello, I'm using flapjax clientside and node.js server side, I have a problem with making post requests via flapjax's getWebServiceObjectE function
09:39 < Bennit> http://pastebin.com/7WURggAS # server side reply function
09:39 < Bennit> http://pastebin.com/ZLFk8WiX # client side request sending function
09:40 < Bennit> results in this on the console server side: http://pastebin.com/yqbmZkv5
09:40 < Bennit> tl;dr: the body of the request client side is altered when sent to the server side
09:41 < Bennit> the for loop server side is just to indicate that the only key of body is the client-side sent body
09:41 < Bennit> I've also tried using getWebServiceE's rawPost request but it results in the same problem
09:43 < Bennit> is this serverside problem or clientside with flapjax?
09:49 < Sebi_> Hey, Some question... How do I track keystrokes in Node 0.8.0? I ask because joyent says in their changelog "process.stdin.on('keypress') will not be emitted by default, as it's an internal API."#
09:51 < Sebi_> Is there no way to track keystrokes like in the older versions? I think that wasn't a good change.... :(
09:52 < Sebi_> ?
10:00 < Deathspike> Does anyone have any pointers on using bodyParser? I enabled it and am sending some JSON, but the req.body stays {}
10:01 < Bennit> what does your client send exactly?
10:02 < Deathspike> Bennit: Using http://pastebin.com/s9NmiWYw (enabled bodyParser) and hitting it with "{"Id","2123"}" through fiddler
10:03 < Deathspike> Minus the outer quotes in the actual body, of course.
10:03 < Bennit> Deathspike: are you using express?
10:03 < Deathspike> Bennit: Yes.
10:04 < Bennit> in your app.js, you have app.use(express.bodyParser()) right?
10:04 < Deathspike> I do have that, yes. Called before any of the registers.
10:04 < Bennit> what's the client code to invoke the post request
10:05 < Bennit> I use res.write and res.end
10:05 < Deathspike> Bennit: There is none, I'm using fiddler to simulate a client request (POST, with body {"Id","2123"}, as an api should behave)
10:06 < Bennit> shouldn't your body be something like {"id":"2123"} ?
10:06 < Bennit> to be valid json
10:08 < Deathspike> Bennit: Yeah, you are correct. However, that also does not give the result I expected.
10:09 < Bennit> what does it give? { '{"id":"2123"}':{} } ?
10:09 < Bennit> if so, join the club, that's my problem atm :p
10:11 < Deathspike> Bennit: Hmm, whatever I throw at it, it seems the bodyParser does nothing with it.
10:13 < Bennit> sorry, no further thoughts except, try a manual request
10:13 < Bennit> but that's just because I don't know fidler
10:14 < Deathspike> Bennit: Fiddler is a debugging tool that does allow manual requests on Windows-based systems ;)
10:15 < Deathspike> Oh right
10:15 < Deathspike> I might need to add content type
10:15 < Bennit> just writing a silly html form too hard? :p
10:16 < Bennit> but I get the use
10:16 < Deathspike> It's supposed to be a RESTful service, so, no forms allowed. :)
10:22 < Deathspike> ... there is some genius stuff in express ...
10:25 < eldios> tj holowaychuck *is* a young genius, imo
10:26 < eldios> and almost all his stuff is so
10:27 < Deathspike> Apparently so. I was just getting to route middleware and http method overrides and was like, ehh... that's smart.
10:33 < Deathspike> Okay, I'm officially confused by Express bodyParser. I literally am recreating the example, but req.body will always be undefined (using the html form, copied/pasted, idem for the handler).
10:33 < tuhoojabotti> weird
10:44 < Deathspike> Is this an issue? On http://expressjs.com/guide.html at Configuration, methodOverride is loaded BEFORE bodyParser, while at HTTP Methods, it says "should be placed below bodyParser so that it can utilize it’s req.body containing the form values".
10:45 < Bennit> utilized != loaded
10:45 < Bennit> i think
10:45 < Bennit> possibly for cyclic dependencies
10:45 < Deathspike> What is the correct one? The document says both at different places.
10:45 < Bennit> but I'm far from sure
10:46 < Deathspike> After makes sense, because it uses form input..
10:46 < Deathspike> Before.. does not make sense.
10:46 < Bennit> in express generated apps it's placed after
10:46 < Bennit> so I'd say after 
10:54 < wiherek> Hi
10:54 < wiherek> whats the tool used for updating node.js called?
10:55 < wiherek> neve..?
10:57 < tuhoojabotti> nvm
10:57 < tuhoojabotti> I use nvm, it's simple.
11:05 < radiodario> some people use nvm
11:05 < radiodario> some use nade
11:17 < vekexasia> Hello All, is there any good editor for node.js apps? For Good I mean that has, at least, content autocompletion/assist
11:20 < ^3rdEden> notepad
11:21 < vekexasia> I don't believe notepad gives content-assist 
11:21 < vekexasia> lol
11:21 < Swaagie> ^3rdEden, no vim? :P
11:22 < ^3rdEden> Swaagie would work
11:23 < vekexasia> ecl
11:24 < dr0id> mature guys
11:25 < vekexasia> yes, very helpful
11:27 < `3rdEden> dr0id vekexasia vim has content-aware assist/autocompletion
11:27 < `3rdEden> so there is nothing with that
11:27 < `3rdEden> same as notepad++
11:28 < radiodario> vekexasia: cloud9
11:28 < Swaagie> if any I'd go for vim
11:28 < radiodario> you can fork a copy on your local machine
11:28 < Swaagie> no pun intended
11:42 < deoxxa> so, connect/express and winston - anyone done this?
11:44 < deoxxa> never mind, i just found the `stream' option for connect.logger
11:51 < Deathspike> Can anyone help me figure this out? I wrote this test sample to debug issues with bodyParser, http://pastebin.com/gKZXrhxj, this sample does *NOT* work. What is wrong?! I'm stumped..
11:52 < deoxxa> Deathspike: your app.get() and app.post() calls are mounting app.router before express.bodyParser()
11:53 < deoxxa> Deathspike: put the bodyParser and methodOverride stuff above them and you should be sorted
11:53 < Deathspike> deoxxa: Indeed, swapped it around and started functioning immediately..
11:54 < Deathspike> Why does this matter? The routes aren't called before listen, so, how does this affect things?
11:54 < deoxxa> the first time you call app.{get,post,head,etc}, if app.router isn't already in the middleware chain, it'll be added
11:55 < Deathspike> Ahh.. so the next re-add I do will not overrule the auto added one?
11:55 < deoxxa> correct
11:55 < deoxxa> it'll just be in there twice
11:55 < deoxxa> so it'll be like
11:55 < deoxxa> [app.router, express.bodyParser(), express.methodOverride(), app.router]
11:55 < Deathspike> That makes sense. Thanks a lot deoxxa!
11:55 < deoxxa> (it's a little more complex than that in reality, but you get what i mean)
11:56 < deoxxa> \o/
11:56 < Apathetic> hi, what version of microsoft visual studio should I download? Will the professional editition do?
11:57 < Apathetic> "Visual Studio Test Professional 2010"
11:57 < Deathspike> Oh this is genius, method overrides and so forth, awesome; thanks again deoxxa :D I can now continue learning :3
11:57 < deoxxa> hooray!
11:57 < Deathspike> Apathetic: What do you want it for?
11:58 < Apathetic> oh, nvm. I thought i needed those to run node.js, i realized it's for building
11:59 < Deathspike> Apathetic: Yeah you don't need anything of the sorts, regular notepad will do the job, but the free visual studio express (for web) might help you with intellisense if you have no better alternative ide.
11:59 < Apathetic> I should just download the .msi?
12:00 < Deathspike> Apathetic: Yes, just download and install.
12:00 < Apathetic> thanks Deathspike
12:00 < Deathspike> Apathetic: Note that, being a Windows-user myself, I tried running 'node' directly in command prompt.
12:00 < Deathspike> Apathetic: But that doesn't work. You need to run the command prompt for node (installer creates a shortcut, so use it), or register the exe yourself.
12:00 < Apathetic> no more cygwin headaches then.
12:01 < Apathetic> by adding it the the paths?
12:02 < Deathspike> Apathetic: No clue! I just run the command prompt shortcut the installer throws at me, and that works for every example I've seen. :)
12:02 < Apathetic> hmm k thanks Deathspike, wish me luck! My first time with node.js
12:03 < Deathspike> Apathetic: Just remember to read and ask questions when you get stuck! I just started 2 days ago, and it takes some time wrapping your head around all of this, but in my opinion, it's worth the invested time (coming from an ASP.NET and PHP environment myself).
12:04 < Apathetic> will do :D
12:07 < Apathetic> did u use a framework Deathspike ?
12:08 < Deathspike> Apathetic: Yeah, I'm using Express. You can read about it here, http://expressjs.com/guide.html, it appears to be a very common first package to learn and master with well written documentation, so I can suggest it too. :)
12:08 < Apathetic> thanks Deathspike 
12:23 < dob_> Do you know somebody which tried to acces microsoft exchange webservice api with node.js? :-)
12:23 < dob_> who
12:34 < poolshark> hi all. I'm looking for a unit testing solution based on node that would allow me to test arbitrary javascript code. It would also have to output any failed tests to the console. is there anything already built i could use or should i build my own?
12:47 < bnoordhuis> morning all
12:47 < bnoordhuis> er, wrong channel
12:49 < radiodario> morning bnoordhuis 
12:49 < radiodario> this channel is in GMT+1 please use "good Afternoon" or "What a shit weather we have in london"
12:49 < radiodario> j/k
12:50 < bnoordhuis> yeah, it's actually 2.45 pm here
12:50 < bnoordhuis> but it still feels like morning
12:50 < zomg> Everyone should just use Universal Greeting Time http://www.total-knowledge.com/~ilya/mips/ugt.html
12:50 < zomg> :D
13:01 < Clex> I tried that : http://fpaste.org/TEQu/raw/ but http://localhost:3000/socket.io/socket.io.js keeps 404. Any idea?
13:02 < zomg> Clex: so did you see the "socket.io started" thing there?
13:03 < radiodario> UGT is the biggest workers union in spain
13:03 < zomg> heh
13:05 < Clex> zomg: yup.
13:05 < Clex> info  - socket.io started
13:05 < zomg> What port is your express application listening on?
13:05 < Clex> zomg: 3000
13:05 < zomg> Odd
13:06 < Clex> Even if I manually put socket.io.js in /static/js/ every request to /socket.io/ keep 404.
13:06 < zomg> I'm assuming other pages from your application can be opened just fine?
13:06 < Clex> I can get /js/socket.io.js of course, but I can't actually use socket.io
13:06 < Clex> zomg: yes, everything's fine.
13:08 < zomg> Are you calling app.listen(3000) before or after having socket.io initialized?
13:08 < zomg> Not sure if it would have any effect though
13:09 < Clex> app.listen() is the last thing I do.
13:09 < radiodario> Clex paste your app.js code
13:09 < radiodario> sounds like you have one of those "i can't see it" typos
13:09 < radiodario> they happen to the best of us
13:10 < Clex> http://fpaste.org/bnQe/raw/
13:10 < Clex> It's the basic script generated by express.
13:11 < Clex> Is this working for you?
13:12 < radiodario> have you tried doing app.listen(3000, function(){ console.log("Express server listening on port %d in %s mode", app.address().port, app.settings.env);
13:12 < radiodario> });
13:12 < radiodario> and then doing the socket.io initialisation?
13:13 < zomg> You could also try using app.listen instead of http.createServer(app).....
13:13 < radiodario> zomg: that's what me said
13:13 < radiodario> hehehe
13:13 < zomg> Ah yeah =)
13:14 < zomg> And if that does nothing, try commenting out app.use(app.router)... I have no idea what app.router is, and at least in my express app I don't have that
13:14 < Clex> Same thing radiodario.
13:14 < zomg> I'm assuming it actually outputs the express server listening line into console?
13:14 < Clex> GET /socket.io/socket.io.js 404 1ms
13:15 < Clex> zomg: yes.
13:15 < Clex> I can GET /.
13:15 < zomg> Okay, try disabling the router thing then... tbh don't really have any other ideas
13:15 < zomg> it looks pretty similar to what I have otherwise
13:16 < Clex> Same thing. :/
13:16 < Clex> Can you try this?
13:16 < radiodario> http://www.danielbaulig.de/socket-ioexpress/
13:22 < Clex> It seems that I can get socket.io.js with this code radiodario, strange.
13:22 < radiodario> welcome to node.js
13:22 < radiodario> over there is the broken-down developer room, complete with padded walls, and legos.
13:22 < Clex> Well, thanks.
13:28 < Clex> It looks like app.use(express.static(__dirname + '/static')); is screwing GET /socket.io/socket.io.js
13:28 < Deathspike> Is there a list of options somewhere for express?
13:30 < Clex> Deathspike: probably on expressjs.com
13:31 < Deathspike> There is a guide (which is currently my holy grail) but no list of options.
13:31 < Deathspike> i.e. disabling formatted json output option
13:43 < PuerkitoBio> FYI, app.use(app.router) allows you to control the position of the router middleware in the list of Express middleware
13:44 < PuerkitoBio> i.e., use the router before the error handler, after the static middleware, etc.
14:26 < poolshark_> so i have some javascript that normally runs in the browser that looks like this: var x = "foo"; var y="bar"; I would like to import these declarations into an object in node in order to run some tests on these variables. require will strip these away because they are globals. any idea how i could work around this without rewriting the files in question?
14:27 < Deathspike> poolshark_: if ( typeof module !== 'undefined' ) { module.exports.x = x; module.exports.y = y; }
14:27 < Deathspike> now you export the variables in the module as per node standards.
14:27 < zomg> Or load the file's contents and use eval() to get it in the scope
14:27 < Deathspike> while it still functions in the browser
14:27 < Deathspike> zomg: Isn't eval bad and evil, and all that?
14:28 < poolshark_> thanks Deathspike, zomg
14:28 < zomg> It has its uses
14:28 < poolshark_> i really don't mind using eval for this
14:28 < poolshark_> but i like Deathspike's solution too... i'll see what integrates easier in my context
14:28 < sabermonk> hi, how to use stream.pipe to route the output os a process to certain file
14:28 < sabermonk> ?
14:29 < troy--> node.js, built in webserver? now that's cool
14:30 < Deathspike> @Express: Route Param Pre-conditions.. the man is a bloody genius, I actually laughed out loud after doing this..
14:31 < drudge\work> sabermonk: use fs.createWriteStream to create a stream for the file, then pipe stdout of the process to the file stream
14:32 < sabermonk> rs.stdout.pipe(process.stdout, { end: true });
14:32 < sabermonk> 			rs.stdout.pipe(stdout_stream);
14:32 < sabermonk> smthing like this
14:32 < sabermonk> stdout_stream is a stream of a file
14:32 < sabermonk> rs is the stream of the process
14:33 < drudge\work> yeah, looks ok
14:33 < sabermonk> what is significance of end: true here
14:33 < sabermonk> rs.stdout.pipe(process.stdout, { end: true });
14:34 < sabermonk> and why do i need to pipe the standard processes' stout first
14:34 < sabermonk> ?
14:35 < drudge\work> you shouldn't need to pipe it to process.stdout
14:36 < drudge\work> and end:true isn't required, it is the default
14:36 < drudge\work> you can set end to false to keep the stream open though
14:38 < sabermonk> if i set end:false then rs will be left open?
14:38 < sabermonk> or the other one
14:39 < drudge\work> the destination
14:39 < drudge\work> ie. the first arg to pipe()
14:40 < sabermonk> thx for that... u just made me code work ... work
14:40 < sabermonk> :)
14:41 < drudge\work> cool
14:43 < lpin> anyone here  use node-canvas?
14:44 < catilac> What are some recommended libraries for image uploading with s3? So far I'm thinking I'll use knox for the s3, and node-imagemagick for resizing. What is good for multipart uploads, or is it best to just roll my own on that one?
14:44 < aaronj1335> hey i've got a problem with node 0.8.0 command line processing on windows, can anyone help? https://gist.github.com/3004474
14:59 < aaronj1335> does anyone know how to build node.js on windows?
15:01 < kratsg> How do I add basic authentication to static pages?
15:01 < sabermonk> aaronj1333 : http://nodejs.org/  available as a installer
15:03 < aaronj1335> sabermonk: i didn't ask how to install node on windows :) i found a bug in process.argv, and i'd like to see if i can submit a patch instead of just a PR
15:03 < sabermonk> my bad .. pardon a newbie there more who can help
15:04 < sabermonk> i just wanted to do my bit in
15:04 < sabermonk> :P
15:04 < bradgignac> aaronj1335: i can send you instructions, but i haven't actually done it myself
15:05 < Deathspike> In Express, should I do "req.param( 'arg' );" to pull a param from the route expression? Shouldn't it be req.param.arg?
15:05 < TomWij> aaronj1335: Hmm, indeed weird that / doesn't map to the root folder.
15:05 < TomWij> aaronj1335: As for building, what step are you having problems with?
15:06 < aaronj1335> sabermonk: no worries.. i'm sure that's the more typical situation
15:06 < aaronj1335> bradgignac: that would be much appreciated, i'm not afraid to dive in and figure some stuff out myself as long as i'm pointed in the right direction
15:06 < bradgignac> https://github.com/joyent/node/wiki/Installation
15:06 < aaronj1335> TomWij: honestly i just don't know where to start -- i've never done windows dev
15:06 < bradgignac> about halfway down the page
15:07 < bradgignac> you'll need an express edition of visual studio
15:07 < aaronj1335> bradgignac: cool thanks
15:09 < TomWij> aaronj1335: If I get it right, the mingw one shouldn't translate it to a path but leave it as is, I guess?
15:10 < jocafa> welp, time to dust off my protocol buffers project
15:22 < aaronj1335> TomWij: sorry for the delay, but yes, it should just be left as '/static'
15:51 < tjholowaychuk> isaacs i need your shell script magic. do you know of a better way to retain quoted args? https://github.com/visionmedia/burl/blob/master/bin/burl#L72
15:51 < tjholowaychuk> currently a gross hack
15:52 < jocafa> don't call me names, tj.
15:52  * jocafa cries
15:54 < stagas> tjholowaychuk: in express-resource is there a way to get the resource id in the handler?
15:54 < tjholowaychuk> stagas i dont remember but i dont think so
15:54 < tjholowaychuk> you can set it manually but i dont think there's a string exposed
15:55 < stagas> tjholowaychuk: I want to make a model to map resource actions automatically
15:56 < JasonJS> Has anyone else experienced problems with socket.io in node 0.8 and the clientside 'io' object not getting set?
15:57 < tjholowaychuk> stagas we should be able to expose it in some reasonable way
15:57 < tjholowaychuk> app.resource('forum' == req.forum_id or something
15:57 < zackiv31> is the '~' allowed in node to reference the users home directory?
15:58 < stagas> tjholowaychuk: ah not only the id, the resource name also
16:00 < stagas> tjholowaychuk: maybe also change the .load thing to use a key value store, like with session
16:03 < stagas> tjholowaychuk: my target api is app.resource('users', { store: store }) lol
16:04 < stagas> tjholowaychuk: why do you even need to manually handle all those actions
16:04 < tjholowaychuk> stagas what do you mean
16:04 < tjholowaychuk> they're not coupled with any db layer so you still need to define something
16:05 < stagas> tjholowaychuk: the ideal would be to just plug a store engine to a resource, and index, create, show etc with their json xml etc would be automatically
16:06 < tjholowaychuk> well that's effectively what it is
16:06 < stagas> tjholowaychuk: so my idea is to reduce express-resource to just method/verb handling
16:06 < tjholowaychuk> you dont have to export things
16:06 < tjholowaychuk> just needs to be an object responding to those methods
16:06 < tjholowaychuk> it could easily be app.resource('user', User)
16:06 < tjholowaychuk> i dont use it though haha
16:06 < tjholowaychuk> so
16:06 < tjholowaychuk> yeah
16:07 < tjholowaychuk> i think if there's even more magic / convention it would be best to build on top of that layer
16:08 < stagas> tjholowaychuk: I think I'll explore more and try some stuff
16:09 < tjholowaychuk> sure, if you think it could be added without coupling too much let me know
16:10 < stagas> ok
16:22 < vrlogrs> hey guys
16:22 < vrlogrs> is there a quick and easy way to run a node.js in the background?
16:22 < vrlogrs> normally i add the "&" command to the terminal
16:23 < Karmaon> vrlogrs: nohup node asdf.js &
16:23 < Karmaon> or use forever
16:23 < tjholowaychuk> vrlogrs maybe github.com/visionmedia/mon
16:23 < vrlogrs> Karmaon: can i still have the script output the stuff somewhere?
16:23 < vrlogrs> i guess it wont do it to the console, but can i set up a log.txt or something?
16:23 < vrlogrs> with that nohup command
16:24 < Karmaon> vrlogrs: nohup logs by defalt to nohup.ou
16:24 < tjholowaychuk> nohup outputs to a file
16:24 < Karmaon> *nohup.out
16:24 < vrlogrs> where exactly is that file?
16:24 < vrlogrs> same directory?
16:24 < tjholowaychuk> ./nohup.out
16:24 < Karmaon> and forever logs to ~/.forever/
16:24 < tjholowaychuk> and mon has --log
16:24 < vrlogrs> whats the difference between nohup and forever?
16:25 < Deathspike> tjholowaychuk you are visionmedia on github, right?
16:25 < tjholowaychuk> yeah
16:26 < Karmaon> vrlogrs: forever has several commands
16:26 < Deathspike> tjholowaychuk I hereby declare you my idol. Really awesome work you did, thanks a lot :D
16:26 < Karmaon> just look at the readme
16:27 < vrlogrs> awesome, works -- thanks alot guys
16:27 < Karmaon> useful abstraction, no need to find the node process's pid and kill it
16:27 < Karmaon> when you deploy. just 'forever stop 0' then 'forever start asdf.js'
16:28 < vrlogrs> but Karmaon .. how can i chance the log file name?
16:28 < vrlogrs> change*
16:28 < tjholowaychuk> vrlogrs there's probably an option
16:28 < tjholowaychuk> --help
16:28 < vrlogrs> i have 2 scripts i want to run in the same folder, wont they override each other
16:29 < Karmaon> vrlogrs: no, by default node gives each process a random log file name
16:29 < vrlogrs> oh ok
16:30 < vrlogrs> thanks Karmaon and tjholowaychuk
16:30 < Karmaon> s/node/forever
16:31 < vrlogrs> Karmaon: both scripts are writing to the same file :S
16:31 < Karmaon> oh, they are?
16:31 < vrlogrs> it's picking nohup.out at as the log file
16:32 < Karmaon> oh, you're using nohup then.
16:32 < Karmaon> I was talking about forever
16:32 < vrlogrs> oh yah ..
16:32 < vrlogrs> sry
16:32 < vrlogrs> is the command : forever node script.js & 
16:32 < tjholowaychuk> vrlogrs you can redirect stdio to any file you want
16:33 < tjholowaychuk>  cmd 2>&1 > foo.log
16:33 < Deathspike> Is there any way to define a model to check POST body against in Express (instead of checking each field one by one)?
16:33 <@isaacs> tjholowaychuk: You should be using a bash array for your new arg list, and then at the end, doing "${myarray[@]}"
16:33 < vrlogrs> so:  "nohup node script.js cmd 2> &1 > script.log &"
16:33 < Karmaon> vrlogrs: forever by default runs in the bg. no need to put it in the bg 
16:33 < tjholowaychuk> isaacs ah i'll try that
16:34 <@isaacs> tjholowaychuk: bash arrays are kind of weird.  there are some examples in nave.sh
16:34 < vrlogrs> so: "forever node script.js"
16:34 < tk> vrlogrs: forever will TELL you how to use it... 
16:34 < tk> just forever --help or "forever" IIRC by itself gives you the proper options
16:35 < tjholowaychuk> isaacs cant say i've used them much ill have a look thanks!
16:35 <@isaacs> tjholowaychuk: so, instead of args="$args blah", you'd do something like this: https://gist.github.com/3005269
16:35 < vrlogrs> i guess i dont have forever installed :(
16:35 < vrlogrs> im on debian
16:35 <@isaacs> tjholowaychuk: this only works wiht bash and zsh, of course.  sh and ksh will blow up.  set your #! appropriately :)
16:36 <@isaacs> ah, you have.
16:36 <@isaacs> lovely :)
16:49 < LambdaDusk> hey guys, what would be the best framework for an api-only node-app?
16:52 < Deathspike> LambdaDusk: I don't have a lot of experience, but I'd say Express; it does work wonders.
16:53 < LambdaDusk> Deathspike: Yeah, I have been using express a lot, but many of its features are meant for an app with HTML views
16:53 < tjholowaychuk> LambdaDusk if by many you mean one method :p
16:53 < tjholowaychuk> well two now, app.render and res.render
16:53 < LambdaDusk> Deathspike: I have thought of connect, which basically is express without html views ^^
16:54 < LambdaDusk> sessions and cookies are also two features not quite necessary for a api app
16:54 < tjholowaychuk> so dont use them
16:54 < tjholowaychuk> that's the joy of middleware, dont want them, dont add them
16:54 < Deathspike> LambdaDusk: Is it? The routing works great for me. It's super powerful, and with routing conditions and additional middleware on a handler, it makes it so easy to get common functionality, authorization, etc, with little effort.
16:55 < LambdaDusk> hmmm ok then
16:56 < tjholowaychuk> that's like saying node is bad at http because it has a repl
16:58 < timeturne> what does app.render do?
16:58 < brianloveswords> LambdaDusk: You can also check out https://github.com/cloudhead/journey and http://flatironjs.org/, +1 from me for express.
16:58 < LambdaDusk> timeturne: It calls the view engine and renders a template
16:59 < LambdaDusk> Mostly I asked because I wanted to extend my horizon and accept there may be other options than express
17:00 < brianloveswords> LambdaDusk: mikeal also wrote a thing, https://github.com/mikeal/tako
17:07 < jviereck> hi. Is there a way to get an TypedArray from a buffer?
17:07 < zipp> Magic
17:07 < zipp> Convert the buffer to a string first..?
17:08 < jviereck> zipp :/ no speedy way to do it?
17:09 < zipp> Not as I'm aware, then again, I'm relatively new to Node
17:09 < zipp> :z
17:09 < zipp> :x
17:10 < bnoordhuis> jviereck: how does it get to be a typed array first?
17:10 < bnoordhuis> none of node's apis return typed arrays
17:10 < jviereck> bnoordhuis: try to render PDF.JS in noder.js and it builds on typed arrays
17:10 < jviereck> node.js tha tis
17:11 < tar_> I just saw an example which replaced res.write with another function in order to capture all the data from the stream… is that common practice?
17:11 < bnoordhuis> jviereck: ah, like that. alas, no. the other way around (buffer to typed array) works though
17:12 < jviereck> bnoordhuis: maybe I'm lucky and adding some API to the node's buffer is good enough ;)
17:12 < jviereck> let's see how that works
17:13 < othiym23> LambdaDusk: you might want to take a look at Strata, if you want something that rolls in less stuff than Express
17:13 < tbranyen> whats that project that does ncurses for object traversal in the cli?
17:14 < tbranyen> is it a nodejitsu project?
17:14 < tjholowaychuk> othiym23 strata has more stuff
17:14 < tjholowaychuk> it's a lot bigger than express
17:14 < othiym23> tjholowaychuk: Strata has different architectural choices
17:14 < tjholowaychuk> yeah i know, it's rack
17:15 < tbranyen> god damnit i hate watched repos in github
17:15 < tbranyen> can never find anything
17:15 < tbranyen> when i need it
17:15 < tbranyen> oh i know i'll watch this repo and this one... over the course of 2 years, now i have a fuck load and they aren't even sorted by date added
17:15 < tbranyen> hate
17:16 < SubStack> tbranyen: could use bookmarks I guess
17:16 < tbranyen> SubStack: wtf are those
17:18 < jesusabdullah> strata is not a nodejitsu project.
17:18 < jesusabdullah> flatiron is a nodejitsu project.
17:20 < Phoenixz> On my node.js dev machine, all of the sudden, localhost/socket.io/socket.io.js no longer gives me the socket.io javascript file... What could be the cause of this? I have not made any changes related to the socket.io interface, it just suddenly stopped working.. really.. weird..
17:20 < Phoenixz>  /socket.io does show me the "welcome to socket.io" message though..
17:21 < othiym23> tjholowaychuk: my experience with Strata is that there's a lot less stuff available right out of the box, and the middleware that is there is not as complete as Connect's
17:21 < klaemo> Phoenixz: did you upgrade to node 0.8?
17:21 < tjholowaychuk> othiym23 it's more like connect/express combined, it has the middleware built in
17:21 < othiym23> tjholowaychuk: it's really just philosophically different, I'd be interested in what would happen if you and Michael got in the same room and talked design philosophy
17:22 < othiym23> he's an interesting guy to talk to
17:22 < tjholowaychuk> there's only the one fundamental difference
17:22 < othiym23> no detectable sense of humor, though
17:22 < tjholowaychuk> the rack-style callback
17:22 < othiym23> tjholowaychuk: the streaming stuff in Strata is pretty different / pervasive
17:22 < tjholowaychuk> which is more traditional middleware, less node
17:23 < FrostedCode> Anybody know how I can create a Node.JS command-line interface where the prompt is always at the bottom and the top updates? eg; chat design
17:23 < tbranyen> FrostedCode: maybe something with node-curses?
17:24 < muchzill4> Hi, can anyone explain how nodejs handles async vs sync stuff? I know it's
17:24 < muchzill4> mostly about not blocking the thread, but when does it block? I was quite sure
17:24 < muchzill4> that callbacks made my code async, but someone told me they did not. Wth? I've
17:24 < muchzill4> glanced at 'async' node module and it uses callbacks for it's async loops. Wth
17:24 < muchzill4> x2? ;)
17:24 < muchzill4> So, for example, if I have sync foreach loop and inside it I want to perform
17:24 < muchzill4> i/o, does it matter if I do this i/o sync or async? Or is the thread already
17:24 < muchzill4> blocked by sync loop? Where can I find more info about that?
17:24 < FrostedCode> tbranyen: Thanks, I'm pretty sure that's the term I was looking for. I only code in Java so I wouldn't have ever guessed. Thanks.
17:24 < Deathspike> muchzill4: http://www.nodebeginner.org/ this explains it all.
17:26 < muchzill4> Deathspike: thx. But I'm going to haunt you if it does not! I remember reading this already. :)
17:27 < Deathspike> muchzill4: Ah sorry, but your question strikes me as something I read just yesterday (This document, so yeah).  Otherwise, I might have misunderstood? :)
17:27 < tjholowaychuk> does matt still idle in there?
17:27 < tjholowaychuk> voxer man
17:28 < klaemo> muchzill4: keep in mind that node "only" does i/o async. the code you write is sync (simply put). if you want to write true async code, only process small chunks and use process.nextTick() -> http://howtonode.org/understanding-process-next-tick
17:29 < timoxley> muchzill4 if you have a loop does async operations, the async libraries map/forEach/series stuff will make life a hell of a lot easier for you
17:31 < timoxley> muchzill4 the looping with happen synchronously, the callbacks will happen 'at some point in the future'
17:31 < Phoenixz> klaemo: yes, I upgraded to 0.8, and thought that that was the problem, but I think I have found the solution, strange as it may be
17:32 < Phoenixz> klaemo: I checked headers I got from  /socket.io/socket.io.js since google results suggested it would have to be 404... Surprise, it was a 304, not modified.. I reset my cache, et voila, all of the sudden it works again... WTF?
17:32 < muchzill4> Uh oh, thanks for answers.  I knew IRC will be the right place. :D
17:32 < klaemo> Phoenixz: oh ok, because afaik socket.io doesn't work on 0.8 yet (unless someone commited a fix since yesterday)
17:32 < Phoenixz> So it was in cache, but for some reason not good anymore... or something..
17:33 < timoxley> muchzill4 also, callbacks don't inherently make your code async.
17:33 < Phoenixz> klaemo: well, I am on 0.8 since a few days, and so far it has worked quite okay... Any ideas on when it might be officially supported?
17:34 < klaemo> Phoenixz: haha the pull request has indeed been merged yesterday: https://github.com/LearnBoost/socket.io/pull/929
17:34 < klaemo> Phoenixz: so you're in luck
17:35 < Phoenixz> klaemo: mmmmm, seems like it.. :) Cool
17:44 < adamramadhan> hello
17:44 < Phoenixz> mmmmmm, looks like there is a node v0.8 - socket.io problem still... I clear browser cache, it all works okay, then I kill the host, restart it, reload the page, and the , localhost/socket.io/socket.io.js gives me a 304, and io suddenly no longer exists..
17:45 < adamramadhan> do we have to use RegExp for regex? when i do something like string.match(/regex/) i get an error no attribute
17:46 < Phoenixz> correction, first I get a 200OK, but empty file, then 304 not modified..
17:48 < klaemo> Phoenixz: well, if you didn't install it from github you won't have the latest fix. I don't think guiellermo has already pushed a new version to npm
17:49 < jacobrask> Does anyone know of a module to get the common prefix of a path? I think python has something called commonprefix but maybe there are other names I could search for
17:49 < klaemo> Phoenixz: i don't even know if that'll fix your problem, i'm just guessing. haha
17:49 < Raynos> are there unofficial hacks to put comments in package.json ?
17:49 < Raynos> like "// comment": "more comment" ?
17:50 < tbranyen> Raynos: that's pretty awful
17:50 < tbranyen> i like configs that are just javascript
17:50 < tbranyen> so much nicer for commenting
17:50 < Raynos> its temporary
17:50 < Raynos> i'd rather comment it out whilst hacking around with it then deleting it
17:50 < Raynos> I might forget it if I delete it
17:52 < CIA-75> node: Gabriel v0.8 * r9e72b7b / configure : build: handle CC env var with spaces - http://git.io/d_EJBQ
17:53 < klaemo> cool, mozilla is using libuv in a new browser engine
17:53 < Phoenixz> klaemo: Question, how can I get the latest version from github? I remember doing that one time long time ago, but I don't recall how to specifiy that..
17:54 < RLa> klaemo, they could improve their web console and dom inspector too
17:56 < klaemo> Phoenixz: npm install "url to the tarball" should work, or you but the git url in your package.json
17:58 < klaemo> RLa: sure, they could do a lot ;) I just found it interesting that node core libs are starting to show up in other places
17:58 < klaemo> Phoenixz: typo: put the git url, not but :)
17:58 < RLa> that's good :)
18:02 < Raynos> I get "Segmentation fault (core dumped)"
18:02 < Raynos> where do I find / read the core dump ?
18:03 < othiym23> if there's not a core file in the current directory (likely), you'll need to use ulimit to enable coredumps
18:03 < othiym23> Raynos: what OS are you on?
18:03 < Phoenixz> klaemo: that was it! Thanks a lot!
18:03 < Raynos> ubuntu 12
18:03 < klaemo> Phoenixz: no problem :)
18:04 < othiym23> Raynos: ulimit -c unlimited
18:05 < othiym23> Raynos: you can also try running the app under gdb directly: "gdb node", and then at gdb prompt "run <node command-line params>"
18:06 < Raynos> what does the core dump file look like? is it in cwd ?
18:06 < othiym23> Raynos: it should be in the cwd, and be something like node.core (or just plain core)
18:06 < Raynos> i cant see it in cwd even with ulimit set
18:07 < othiym23> what does ulimit -a return?
18:07 < Raynos> core file size          (blocks, -c) unlimited and others
18:08 < othiym23> hmmmm.... are you running node directly from the cwd? or is this being used with a wrapper script?
18:08 < Raynos> through make
18:08 < Raynos> ill try it without make
18:09 < klaemo> little survey: what IRC client are you using on MacOS?
18:09 < Raynos> Still nothing apart from "Segmentation fault (core dumped)" and no core dump
18:10 < Phoenixz> klaemo: crap, 0.8 npm crashes on socket.io version https://github.com/LearnBoost/socket.io.git
18:11 < klaemo> Phoenixz: :( i don't think i can help you any further, though. sorry
18:12 < othiym23> Raynos: try using gdb (you'll need to use that to read the coredump anyway)
18:14 < Phoenixz> klaemo: no problem
18:18 < LambdaDusk> does node have a image resizing lib that works on streams?
18:19 < klaemo> LambdaDusk: http://aheckmann.github.com/gm/
18:19 < LambdaDusk> klaemo: Great, thanks
18:21 < iyp> Anyone here good with everyauth? Having a little trouble getting it off the ground with express3
18:30 < chvck> hi all, quick q. If i have a script and I load 2 modules using require if I load module1 first can I then access stuff from module1 in module2?
18:30 < dan__> If I do "<path to python 2.7> ./configure" that should work right?  Because I'm getting a syntax error (not the same one given on the instal page)
18:32 < klaemo> chvck: you would have to require module1 in module2 for that to work. but maybe I misunderstood you
18:33 < chvck> klaemo: that's what I thought but not sadly not want I wanted to hear!
18:33 < chvck> thanks though :)
18:40 < doki_pen_> isaacs: you still using comma-first?
18:40 < doki_pen_> isaacs: my co-workers are revolting :P
18:43 <@isaacs> doki_pen_: i use everthing
18:46 <@isaacs> piscisaureus_, bnoordhuis, TooTallNate: I'd like to cut a 0.8.1 tomorrow.
18:47 <@isaacs> (maybe start tomorrow, release friday)
18:47 <@piscisaureus_> isaacs: sure
18:47 <@piscisaureus_> isaacs: maybe add a -f flag to npm to force installing packages that say they don't work on 0.8
18:48 <@isaacs> piscisaureus_: see recent "remove engines" thread on node-users
18:48 <@isaacs> piscisaureus_: but -f already does that :)
18:48 <@piscisaureus_> isaacs: really?
18:48 <@isaacs> piscisaureus_: i'm gonna just demote the "engines" checking to a warning.
18:48 < SubStack> oh there's a thread?
18:48 <@isaacs> piscisaureus_: yeah
18:48 <@isaacs> SubStack: yes.  go fuckin SICK on that shit.
18:48 <@isaacs> :)
18:48 < SubStack> haha maybe
18:48 < SubStack> I have shit to build still though
18:48 <@isaacs> basically, node is stabilized enough that it should be purely advisory, i think
18:49 < SubStack> time-critical things to build
18:49 < SubStack> and things to draw
18:49 < SubStack> next week maybe
18:49 <@isaacs> so gonna make strict engine-checking opt-in.
18:49 <@isaacs> and eventually, we can remove it entirely, and it'll just be a thing that PaaS hosts use.
18:49 <@piscisaureus_> isaacs: sticking a minimum required version in there seems good, just not a max version
18:49 < SubStack> isaacs: or an advisory thing that people can take under advisement
18:50 <@isaacs> piscisaureus_: well, if it's a warning, then it's kind of nice to know "The author has not tested X on version Y. Watch out."
18:50 <@isaacs> piscisaureus_: a nudge is nice.  a wall is excessive.
18:50 <@isaacs> the api is not changing drastically.
18:50 <@piscisaureus_> true
18:50 <@isaacs> even when we land 1.0, and eventually go to 2.0, i don't see any way that we can justify breaking backwards compatibility too harshly.
18:51 <@isaacs> there will never be a python3 in node.
18:51 <@isaacs> we'll just build a new thing with a new name, and it'll be teh child of node :)
18:51 <@isaacs> but first, lockfiles :)
18:52 < SubStack> piscisaureus_: the problem is that when you give people full semvers they tend to use them narrowly like dependencies
18:52 <@isaacs> piscisaureus_: if there's any libuv/node bugs that are low-hanging fruit, now would be a good time to fix them.
18:52 <@piscisaureus_> isaacs: there is but I am busy working on my nodeconf talk now
18:52 < SubStack> but engines are a different category of software from libraries in node because of the ability to have conflicting versions of libraries
18:52 <@isaacs> but for the most part, minus the data corruption issues, and some annoying npm stuff, 0.8 is pretty solid.
18:53 <@isaacs> SubStack: yes.
18:53 < SubStack> you can't have one part of your node program running 0.6 and another part running 0.8
18:53 <@piscisaureus_> data corruption? <-- isaacs ?
18:53 <@isaacs> piscisaureus_: * d0816aa Ben Noordhuis sunos: fix free() of non-malloc'd pointer (2 days ago)
18:53 <@piscisaureus_> isaacs: ooh, that's
18:53 <@isaacs> and * 4d42af2 Ben Noordhuis (HEAD, ry/v0.8, v0.8) unix: don't create connect req w
18:53 <@piscisaureus_> isaacs: I thought you were talking about like, corrupting disk files
18:54 <@isaacs> nono
18:54 <@piscisaureus_> isaacs: there was also some issue that BMC came up with
18:54 <@piscisaureus_> a hang in libuv
18:54 <@isaacs> yes
18:54 <@isaacs> that would be good to figure out, but i told him he has until thursday or it goes in 0.8.2 :0
18:54 <@isaacs> :)
18:54 <@piscisaureus_> haha
18:55 <@piscisaureus_> isaacs: tell him to figure out what type the request has :-)
18:55 <@isaacs> k
18:55 <@piscisaureus_> isaacs: * (int*) &req
19:02 < SubStack> isaacs: https://mail.mozilla.org/pipermail/es-discuss/2012-June/023760.html
19:02 < SubStack> what the fuck, eich is seriously basing his argument in favor of awful complicated import destructuring syntax because people will make a typo?
19:02 < SubStack> that's the worst argument I've heard
19:03 < SubStack> why even use javascript, you might make a typo
19:03 < SubStack> you should just use java instead
19:03 < SubStack> it can catch typos at compile-time
19:03 < tjholowaychuk> yikes
19:04 < SubStack> people might make a typo so we should invent syntax!
19:06  * bwen high fives SubStack
19:07 < mc> computers have essentially become the tool that stupid people use to make themselves appear smarter
19:07 < game16> HI
19:07 < game16> Hi*
19:07 < game16> are there many good resources on using partials with express?
19:12 < timoxley> game16 http://expressjs.com/guide.html#view-partials ?
19:13 <@isaacs> SubStack: In my experience, dherman is extremely sane.
19:13 <@isaacs> dherman is also in here, apaprently :)
19:13 < SubStack> aha
19:14 < SubStack> isaacs: a thousand times this: Dumping a bunch of symbols into my local
19:14 < SubStack> scope is intrusive.
19:14 <@isaacs> SubStack: well... you can avoid that, apparently, though it is not immediately clear in the proposal (though that's a literacy problem on my part, I guess)
19:16 <@isaacs> it's hard to articulate why `module.exports=foo` and `var foo=require("foo")` is better to `export foo` and `var {foo}=require("foo")`
19:16 <@isaacs> SubStack: or import {foo} from "foo"
19:16 <@isaacs> ie, export one thing vs export an object with one thing on it (or more)
19:17 <@isaacs> and yet, in practice, when i write programs that export a bunch of shit, it's a huge pain, and when i write programs that don't, it isn't.
19:17 < tjholowaychuk> i like our way better since you can name the "imports"
19:17 < tjholowaychuk> var Emitter = require('events').EventEmitter
19:17 < SubStack> yes, naming is the default in node requires
19:17 <@isaacs> but "Go write 100,000 lines of javascript module code and you'll get it" is not really a sound argument
19:17 < SubStack> in harmony it's awkward to get to name the remote things
19:18 < SubStack> isaacs: especially not when the inferior style is pervasive
19:18 <@isaacs> tjholowaychuk: yea, but is that still a major issue with destructuring?  var {EventEmitter} = require("events")
19:18 < tjholowaychuk> how would you do that with destructuring
19:18 < tjholowaychuk> I like that we dont have to use names that the author used
19:19 <@isaacs> tjholowaychuk: or even var {EventEmitter:EE} = require("events")
19:19 <@isaacs> tjholowaychuk: then ee = new EE
19:19 < tjholowaychuk> oh you can do that?
19:19 < tjholowaychuk> hmm
19:19 <@isaacs> tjholowaychuk: yeah.  not in node or v8, but yes;
19:19 <@isaacs> in ES 6 for sure
19:19 < SubStack> isaacs: another problem with having * around is that it encourages terrible modules
19:19 <@isaacs> oh, import * is a landmine, for sure.
19:19 < SubStack> I can think of a lot of python modules that are basically unusable unless you from foo import *
19:20 < SubStack> because there are so many exports and all the examples are written in the stupid way
19:20 <@isaacs> even in modules of mine that export more than one thing, i always set module.exports now.
19:20 <@isaacs> usually, anyway
19:20 <@isaacs> since it forces me to actually think about each one.
19:20 < SubStack> in even worse cases, it's a poor man's module-level inheritence system
19:21 <@isaacs> and assign a "default"
19:21 < Deathspike> Is there any way I can introduce memory leaks, because if I keep repeating requests to my simple express service I can kick mem consumption from 6mb to 20mb in ~20 seconds. Or is that because of a GC that isn't instant?
19:21 < SubStack> Clients are disallowed from mutating another module's exports. (That's one of the things we're able to accomplish by making modules declarative rather than totally dynamic.)
19:21 < SubStack> ^ I don't like that
19:21 <@isaacs> Deathspike: well, GC is not instant, but you can indeed be leaking memory.
19:21 < SubStack> sometimes it makes sense to modify properties
19:21 <@isaacs> Deathspike: try runing with node --expose-gc and then running the gc() method occasionally
19:21 <@isaacs> Deathspike: generally, this is not a good idea in production, since it's slow
19:22 <@isaacs> SubStack: well, you can't set foo's export X to something else entirely.  fs = require("fs");  fs.read = myRead <-- i actually do that a lot, though
19:22 <@isaacs> and like, if you don't WANT to allow that, then you can freeze the object you export.
19:22 < SubStack> oh I see, I interpreted that as Object.freeze() on the result
19:22 < SubStack> right
19:22 <@isaacs> right
19:23 <@isaacs> so, if you have module "foo" { export x = 100; export y = { z: 'zed' } }
19:23 <@isaacs> ou can do : import {x,y} from "foo"
19:23 <@isaacs> x++ is not allowed
19:23 <@isaacs> but y.z = 'zoo' is allowed
19:23 < Deathspike> isaacs: It seems to rise, indicating a memory leak? Here's my test case: http://pastebin.com/trvhWLbE. Would this indicate a leak in node, express or connect? Or did I just do something really silly..
19:23 <@isaacs> but y = {a:'apple'} is not
19:24 <@isaacs> ie, you can mutate, but not reassign, and since primitives dont' have identity, mutating IS reassignmetn in those cases.
19:24 < SubStack> isaacs: the problem is that none of these people in the "we need import * and custom syntax" camp seem to understand how exporting more than 1 thing is usually bad
19:25 <@isaacs> Deathspike: I think the bug is on the first line.  'require("express")'.  there'syer problem ;P /cc tjholowaychuk 
19:25 <@isaacs> Deathspike: no, srsly, i don't know.
19:25 <@isaacs> SubStack: right.  that's what i'm having trouble articulating
19:25 < SubStack> and it sets the tone and framing about what the best default should be
19:25 <@isaacs> SubStack: even myself, i mean, i didn't really come to "export one thing" until i'd written a lot of node programs.
19:25 < SubStack> same
19:26 <@isaacs> it seems pretty obviously better to export more than one thing, actually.
19:26 <@isaacs> until you actually do that.
19:26 < SubStack> maybe I should jump in on the thread
19:26 <@isaacs> ^ why specs should follow usage.
19:26 < SubStack> probably I've written the most modules out of all of the people responding
19:26 <@isaacs> SubStack: or out of all the people, period :)
19:26 < SubStack> well I'm not sure
19:27 < SubStack> I think the argument can be made pretty simply
19:27 < SubStack> modules are about encapsulating a unit of functionality
19:27 < SubStack> modules are best when they do one thing (core tenant of unix philosophy/craft wisdom)
19:28 < SubStack> modules that export a single thing are usually only doing one thing
19:28 < mafn> hi people
19:29 < SubStack> therefore modules that have less exports are preferrable to modules with more exports
19:30 < SubStack> it follows that module systems should be built around the use-case of a single or only a few exports as an implicit encouragement of that style and recognition of its benefits as observed in the wild
19:38 <@Nexxy> tees, <3
19:38 <@Nexxy> tees, I can't believe you are actually here
19:39 < SubStack> isaacs: oh cripes, the import destructuring is FLIPPED from let destructuring?
19:39 < SubStack> that is so hideously confusing
19:39 < timoxley> It seems the new proposals are introducing unnecessary risk by introducing new concepts that work radically differently to rest of the language. 
19:39 <@isaacs> SubStack: no, i just got let destructuring wrong
19:39 < timoxley> node's module system is proven to work reasonably well, it would make sense to start with something proven and figure out how to improve it more without introducing too much risk…
19:40 < timoxley> wouldn't it?
19:40 <@isaacs> SubStack: i don't actually use it, so the syntax is not muscle-memory yet :)
19:42 < Deathspike> new proposals?
19:42 < `3rdEden> isaacs npm is still spamming the console when it finished the installation eventhough I have set the loglevel to silent. Am I missing something here?
19:42 < dherman> isaacs: thx
19:44 < SubStack> isaacs: one thing I don't get, would `import Foo from "foo.js"` require that foo.js did `export function Foo () {}`?
19:45 < SubStack> dherman: ^^^
19:45 < tbranyen> writing repls in node is so damn easy
19:45 < tbranyen> just hooked one up into phantomjs
19:45 < tbranyen> loads my application and now i have a repl while i'm coding
19:45 < SubStack> so the thing I don't get about phantomjs
19:45 < tbranyen> is that its confusing as shit
19:45 < tbranyen> :)
19:46 < SubStack> is that `xvfb-run google-chrome url` is super easy to do
19:46 < SubStack> am I missing something?
19:46 < tbranyen> yeah thats totally cross platform
19:46 < tbranyen> >_>
19:46 < SubStack> ah got it
19:46 < SubStack> I'm writing a browser launcher thing right now
19:49 < SubStack> gah how the fuck do I even use phantomjs, there's no man page and -h/--help doesn't do anything
19:49 < tbranyen> SubStack: ah cross platform browser launcher?
19:49 < SubStack> tbranyen: no?
19:49 < tbranyen> SubStack: npm install phantom
19:49 < tbranyen> =)
19:49 < tbranyen> well you said browser launcher... which led me to believe you were writing something that can open the default browser
19:50 < SubStack> what the crap, it can only load local pages?
19:50 < SubStack> tbranyen: no I can already do that
19:50 < tbranyen> i'm loading remote
19:50 < tbranyen> works fine for me
19:51 < SubStack> this thing just scans your $PATH for which browsers at what versions you have installed and builds a local index and normalizes the browser parameters
19:51 < tbranyen> ah nice
20:08 < Deathspike> Ah, memory consumption is only jumpy and hungry on Windows; Linux, not affected, whatsoever. Isn't it always the same :3
20:10 < bwen> anyone know how I could get the browsers to trigger a "if-modified-since" header request?
20:12 <@isaacs> SubStack: if you make that work in os x and windows, you'll be my hero
20:12 <@isaacs> SubStack: also, it should be able to open urls as well as html files.
20:15 < SubStack> isaacs: mostly I just want it to run headlessly
20:16 < russfrank> anyone know of a way to 'provide' globals to a require()d module
20:16 <@isaacs> SubStack: yeah, i just want to be able to say "Open xyz in your browser"
20:16 < SubStack> there's already a thing on npm that does xdg-open/open/start to launch browsers
20:16 < bwen> got it, forgot my ETag header x]
20:16 <@isaacs> oh, neat
20:16 < russfrank> i'd like to test some code that's written for a different framework so I need to provide some mock objects
20:17 < MrBlue> Anyone here ever use node.io for scraping?
20:18 < jacobrask> Suggestions for fast CSS minifiers? Just realized csso slowed down my program significantly
20:24 < Raynos> bcrypt uses node-gyp, I'm on 0.8. node-gyp seems to install into the Debug folder rather then the Release folder
20:25 < Raynos> is there some binary stuff I should know about that might make it default builds to a Debug rather then a Release folder
20:46 < jfroma> is there a way i can get a list of the modules that comes in the current node binary,, i want a list like ["fs", "stream", "events", "child_process" .. etc
20:47 < Raynos> does npm install hang for anyone else?
20:47 < Raynos> jfroma: ls node/lib
20:47 < SubStack> jfroma: Object.keys(process.binding('natives'))
20:48 < tnorris> Raynos: platform? version? install from source or package?
20:48 < Raynos> from package
20:48 < Raynos> npm install <module> works
20:48 < Raynos> npm install seems to just not return for no reason. I wanted to see whether it's a problem with the npm server in which case other people have problems too
20:48 < jfroma> substack thanks! this is what i was looking for
20:49 < tnorris> Raynos: sorry, that wasn't for you.
20:49 < tnorris> Raynos: I just tried installing a bunch of packages. worked fine.
20:53 < tk> anyone know of any work towards recognizing text in images w/node?
21:02 < dherman> SubStack: yes, that's true, import Foo from "foo.js" does cause the module to have to name Foo, and the client would have to explicitly rename. that's true that that is a downside compared to Node
21:02 < dherman> or to commonjs
21:04 < dherman> isaacs: Re: following practice: I have been working on this for literally *years*. for longer than Node has existed. please don't accuse me of ignoring you. it's a constellation of constraints and desires that go beyond the ones you've identified. I am happy that you guys want to participate. but I have suffered so many insults, insinuations of stupidity, and outright rage from you guys. it's really unnecessary
21:06 <@Nexxy> dherman, trolls are everywhere 
21:06 < dherman> I don't believe isaacs and SubStack are trolls
21:06 < dherman> I think they're angry and feel like TC39 has gone in the wrong direction
21:06 < mailerg> they're the best kind of trolls
21:06 < dherman> and I want to do right by Node and everyone else
21:06 < mailerg> because they know what they're talking about
21:06 < dherman> they know some things
21:06 < dherman> I know others
21:06 <@Nexxy> together, we may rule the dark side
21:07 < Glenjamin> what are you referring to anyway?
21:07 < dherman> ES6 modules
21:08 < jjido> are you on the committee?
21:08 < dherman> yes
21:09 < treznik> hey, I have a question about the newly added domain.run
21:09 < jjido> I didn't read on ES6 modules yet
21:10 < jesusabdullah> dawg they're kind of a mess
21:10 < jesusabdullah> well-intentioned, but road to Hell and all that
21:10 < dherman> yay, more insults
21:10 < dherman> thanks!
21:10 < treznik> the description says "Run the supplied function in the context of the domain, implicitly binding all event emitters, timers, and lowlevel requests that are created in that context." but I'm not sure if that should cover every callback possible
21:10 <@Nexxy> dherman, may I interject?
21:11 < dherman> y
21:11 < SubStack> hey it's a dherman 
21:11 < Glenjamin> is http://wiki.ecmascript.org/doku.php?id=harmony:modules the spec?
21:11 < treznik> at first the exceptions are cought, but for example I have a few mongo driver callbacks inside a domain.run block, and they are not caught anymore
21:11 <@Nexxy> I understand that it is something you are personally vested in but I don't particularly interpret describing ES modules as "kind of a mess" is a direct insult toward you
21:11 <@Nexxy> short of actual ad hominem attacks, it seems as though you may be taking this a bit too personally
21:11 < jesusabdullah> dherman: I'm a nice guy, really. I don't want you to take my criticisms of TC39 personally.
21:12 < dherman> sorry, too touchy there
21:12 < jesusabdullah> dherman: It's just very difficult, I believe, to design a thing as a committee
21:12 < jocafa> milk and cookies for everyone!
21:12 < jesusabdullah> dherman: I'm a believer in benevolent dictatorships in code, unfortunately.
21:12 < dherman> it doesn't work the way you might think
21:12 < dherman> it's not being designed by the committee
21:12 < dherman> it's primarily me and sam tobin-hochstadt
21:12 < jesusabdullah> but
21:12 < dherman> with feedback from everyone of course
21:12 < jesusabdullah> wait, are you discussing modules, or
21:12 < jesusabdullah> everything?
21:13 < dherman> modules
21:13 < jesusabdullah> Because I mean the whole shebang
21:13 < dherman> oh
21:13 < SubStack> dherman: with respect to import Foo from 'foo.js', I really think that's the wrong approach
21:13 < SubStack> because modules should do one thing
21:13 < jesusabdullah> nobody has the balls to say, "no. that's a bad idea and you should feel bad."
21:13 < TehShrike1> It's weird, I'm going to have to install Python for the first time in order to use a Node module
21:13 < SubStack> empirically we have discovered in node that modules that have a single export that is a single function tend to be preferrable
21:13 < jocafa> (why not zoidberg?)
21:13 < dherman> SubStack: I hear you guys say that. it would help if you could articulate some reasons
21:13 < dherman> SubStack: because it definitely precludes some styles
21:14 < dherman> e.g., a bunch of combinators
21:14 < SubStack> dherman: having to name your export introduces an unfortunate correspondence between what the module author wants to expose and what the module consumer wants to name the functionality
21:14 < dherman> say, a DSL for creating HTML nodes: p(...), div(...) etc
21:14 < jesusabdullah> dherman: The biggest problem with these qualified imports is the ruby problem
21:14 < SubStack> having 2 names is not necessary when your function returns a single function
21:14 < jesusabdullah> dherman: Which is, "where the FUCK did this function named 'p' come from??"
21:14 < jesusabdullah> dherman: in node, it's extremely explicit
21:14 < TehShrike1> What version of python do I need for node-gyp?  2.x or 3.x?
21:15 < jesusabdullah> dherman: var dsl = require('dsl'); dsl.p(...), dsl.div(...), etc
21:15 < TooTallNate> TehShrike1: 2
21:15 < TehShrike1> TooTallNate: thanks!
21:15 < SubStack> dherman: so back in the 0.1.x days when node got its module system, everybody wrote modules that just put a lot of things into `exports`
21:15 < SubStack> exports.foo = function () {}
21:15 < TooTallNate> Raynos: are you using a debug build of node?
21:15 < SubStack> stuff like that
21:15 < SubStack> but we found that many modules just had a single export
21:15 < Raynos> TooTallnate: I should be using 0.8.0
21:15 <@maxogden> first rule of javascript: dont pollute the global namespace
21:15 < jesusabdullah> SubStack: I still do that sometimes. It depends on what you want to do.
21:15 < Raynos> TooTallNate: how can I tell?
21:15 < TooTallNate> Raynos: did you compile it yourself?
21:16 < Raynos> TooTallNate: compiled it through nave
21:16 < jesusabdullah> SubStack: Like I'll export an object but it's not so absolutely common that I, y'know, would miss the existence of exports
21:16 < SubStack> dherman: and unintendedly I think, `module.exports = ...` worked and so people started using that to expose functionality
21:16 < SubStack> which has the benefit of not duplicating names
21:16 < dherman> yeah, I understand
21:16 < TooTallNate> Raynos: basically, the module will get built into "build/Debug" when it builds a debug build
21:16 < SubStack> because having a module called foo that has a function called foo and only that function is a bit silly
21:16 < TooTallNate> and "build/Release" for a normal built
21:17 < SubStack> if you're always doing var foo = require('foo').foo why not save a step and just var foo = require('foo') ?
21:17 < jesusabdullah> I mean, qualified exports aren't the worst things ever, but I don't think they're problems that javascript actuallyu has
21:17 < dherman> right, I understand all that
21:17 < dherman> but at the same time, you still have libraries like 'fs'
21:18 < dherman> with plenty of API functions that don't need to be thought of as methods
21:18 < SubStack> true
21:18 < jesusabdullah> why would I want to dump everything in fs to a different namespace though?
21:18 < SubStack> but those modules are rather rarer
21:18 < jesusabdullah> Like, nobody complains about that
21:18 < dherman> jesusabdullah: you don't have to. but for quick scripts it's convenient
21:18 < SubStack> dherman: but optimizing for the `module.exports = ...` case gets you the other case easily
21:18 < jesusabdullah> seriously, has anyone ever heard someone say, "man I like node but having to preface all these file system calls with 'fs.' is really hard!!"
21:18 < SubStack> dherman: because you can just export a plain old object
21:19 < SubStack> but it's not true in reverse
21:19 < jesusabdullah> dherman: I wrote python for a long time.
21:19 < jesusabdullah> dherman: so like, I've been there too
21:20 < SubStack> dherman: and that export this(obj) stuff looks like total kludge
21:20 < jjido> in the examples I saw something like module p = foo
21:20 < SubStack> dherman: it's much simpler I think to just support exporting values
21:20 < SubStack> or rather, just a single value
21:20 < jjido> wouldn't that allow you to do the naming?
21:21 < dherman> SubStack: if those are your only goals, that all makes sense
21:21 < dherman> I have additional goals
21:21 < dherman> you may not agree with them
21:21 < SubStack> I do not agree with many of the goals it's true
21:21 < freewil> is there a way for mocha to test a non-exported function?
21:22 < dherman> but I've been trying to keep modules static to enable the ability to import and export static things
21:22 < dherman> this is to a large degree a future-proofing thing
21:22 < SubStack> dherman: I don't really understand this need for staticness
21:22 < jjido> can a module be called? if foo is a module, foo()
21:22 < SubStack> and I would be wary about solving problems that don't exist yet
21:23 < Glenjamin> what do you mean by keeping modules static?
21:23 < dherman> Glenjamin: imports and exports are computed at compile time
21:23 < SubStack> dherman: do you mean importing and exporting things written in static languages?
21:23 < Glenjamin> there's no such thing as compile time :s
21:23 < jjido> you can't add members after it is created
21:23 < dherman> Glenjamin: there most certainly is :)
21:24 < SubStack> dherman: perhaps instead there could be a separate type for "staticness"?
21:24 < SubStack> and "static" modules could just return a "static" object
21:24 < dherman> I think that's strictly more complicated
21:25 < SubStack> complicated for whom?
21:25 < jesusabdullah> cadd more modules crap for es6, es7, etc?
21:25 < jesusabdullah> er
21:25 < jesusabdullah> dherman, can't you just add more modules stuff in es6, es7, etc?
21:26 < jesusabdullah> Like, I'm a fan of small incremental improvements, I don't understand the need for es6 to change everything. We're not Microsoft here
21:26 < dherman> SubStack: like, a strictly more complicated overall system, in terms of conceptual overhead, user model, etc
21:26 < jocafa> time-to-adoption is kindof a problem
21:26 < jesusabdullah> So is fucking it up the first time
21:26 < jesusabdullah> Remember what happened to 'with' ?
21:26 < arcanis> is it possible to block/pause/whatever a socket used by an Agent ?
21:26 < TehShrike> Man, ice cream is tasty
21:26 < jocafa> TehShrike:  i concur.
21:27 < jesusabdullah> 'with' is SO bad that it's considered forbidden knowledge.
21:27 < SubStack> dherman: anyways what does computing imports and exports at compile time give us?
21:27 < SubStack> I argue that the default case for modules should mostly be a single function
21:27 < TehShrike> oooh, the node executable has an icon now!
21:27 < jesusabdullah> hell yeah
21:27 < SubStack> so I don't really see how it's even a thing that we should care about
21:28 < arcanis> jesusabdullah, funny, I'm from the opposite side. I think we should completely break BC if necessary, one for all
21:28 < SubStack> dherman: so basically instead of treating each export as static, you just treat *the* export as static
21:28 < jesusabdullah> arcanis: I'm all for breaking BC, I'm less for making a bunch of shitty decisions coupled with a few cool decisions and then regretting them later
21:28 < arcanis> I don't really like preserving the BC when it comes to some strange behaviors (such as the typeof operator)
21:29 < jesusabdullah> it's like omnibus bills with bizarre riders
21:29 < dherman> SubStack: I have to think more about the "only one export" thing
21:29 < dherman> but as for the static stuff,
21:29 < dherman> there are a number of reasons
21:29 < jesusabdullah> like, "ooh healthcare!" then "ohhh health care with a billion hangups"
21:29 < jesusabdullah> "ohhh health care but with the fat arrow."
21:29 < jjido> dherman: I have a bad feeling about module foo at "http://...", but I can't put the finger on it 
21:29 < jesusabdullah> "we can't do anything right"
21:29 < arcanis> :)
21:30 < dherman> jesusabdullah: seriously, what is your deal
21:30 < jesusabdullah> My deal?
21:30 < jocafa> adhd :3
21:30 < TehShrike> You do seem to be wandering into troll territory here jesusabdullah :-x
21:30 < dherman> potshot after potshot
21:30 < jesusabdullah> I'm not trying to be a troll.
21:30 < dherman> I don't need this
21:30 < jesusabdullah> I'm trying to say exactly what I'm thinking
21:30 < chapel> jesusabdullah's parents are tea partiers :)
21:30 < bwen> with em fairies and rainbows...
21:30 < chapel> drinking it up
21:31 < chapel> <3 jesusabdullah
21:31 < purr> Let it be known that chapel hearts jesusabdullah.
21:31  * TehShrike tips his teacup back
21:31 < jesusabdullah> dherman: Please, please don't take my words personally.
21:31 < Glenjamin> dherman: i think it would help to have an explanation of why the goals on the harmony page are the stated goals
21:31 < dherman> really?
21:31 < jesusabdullah> dherman: Yes.
21:31 < dherman> Glenjamin: I've been working on a new wiki
21:31 < Glenjamin> ah ok
21:31 < dherman> that tries to do a better job of explaining what we're doing
21:31 < jesusabdullah> dherman: It's like this. Suppose I complained about how congress sucks and never gets anything done.
21:31 < dherman> it's a work in progress
21:31 < jesusabdullah> dherman: But we *all* know that there are a lot of good people in congress
21:32 < TehShrike> So, I really do love talking politics
21:32 < Glenjamin> it seems to be a massive departure from most of the de-facto standards which exist for modules from what i've gathered thus far
21:32 < TehShrike> But I think I've seen enough people talking about politics in IRC rooms at this point
21:32 < chapel> dherman: while you guys have been working on this stuff for a while, node.js happens to be the only large scale (amount of use and popularity) project that has a successful and well defined module system that has been tested and iterated over
21:32 < Deathspike> Does anyone have experience with Komodo Edit (It has support for Node.js autocomplete); however, I can't get it to recognize third party libraries.
21:32 < dherman> chapel: JS isn't the only language under the sun :)
21:32 < SubStack> dherman: maybe you could keep the export stuff as-is but drop export this() and add a special case for `export value`
21:32 < dherman> and node's module system is sync
21:32 < dherman> SubStack: possibly, possibly
21:32 < Glenjamin> chapel: not strictly true, AMD & commonJS have decent usage
21:32 < chapel> dherman: that doesn't mean node's module package is the only way to do things, but in relation to js and modules, it is a great foundation or knowledge and problems solved
21:32 < dherman> I will mull it
21:33 < SubStack> dherman: but I really think `import` should also return a value
21:33 < jesusabdullah> Glenjamin: commonjs and node's spin on commonjs are similar enough
21:33 < chapel> Glenjamin: of course, but node.js modules are based on commonjs, further proving my point
21:33 < SubStack> you could even keep the destructuring in import I guess although I wouldn't use it
21:33 < dherman> SubStack: I'm multi-tasking here but haven't answered the "why static" question yet
21:33 < jesusabdullah> Glenjamin: Also AMD borrows a lot from commonjs
21:33 < dherman> if we decide to close some future doors, we can definitely simplify
21:34 < dherman> so what would macros give us? the ability for people to define their own syntax, without needing to wait on a committee
21:34 < chapel> dherman: no one will argue that stuff isn't broken now, but the pushback is mostly because they want a solution that doesn't cause more trouble than its worth
21:34 < dherman> and the ability to use them composably
21:34 < jesusabdullah> dherman: hell yeah, see, that's what javascript needs right now
21:34 < dherman> whereas today, you can choose tamejs or coffeescript but not both
21:35 < jesusabdullah> dherman: some perl6 style embedded languages action
21:35 < SubStack> dherman: just don't go down the perl6 route with macros and take 10 years to ship :p
21:35 < dherman> I'm not doing macros right now
21:35 < dherman> but it's an experiment I want to try
21:35 < dherman> I'd like to try it as an offline compiler first
21:35 < dherman> and see where it goes
21:35 < gf4> dherman: OHAI
21:35 < dherman> gf4: yo
21:36 < SubStack> dherman: couldn't coffee-script be done with the loader stuff in isaacs's proposal?
21:36 < dherman> SubStack: but if we can't import/export static things, macros are no longer possible to share via modules
21:36 < gf4> (swap! gf4 dec)
21:36 < chapel> gf4 === gf3 ?
21:36 < dherman> SubStack: yes, but only at the whole-file level
21:36 < dherman> it was a blunt example, because it's all people have today
21:36 < gf4> chapel: Yessir
21:36 < jesusabdullah> SubStack: Yeah but if you specify it and then tell Mozilla and Google to do it already, like, in theory you could get away with an unfunded mandate there
21:36 < chapel> hola
21:36 < dherman> they can't define small new syntactic conveniences
21:36 < gf4> Heyo
21:36 < dherman> without boiling the ocean
21:36 < dherman> and creating whole new languages
21:36 < gf4> Let's do that last part!
21:36 < gf4> New languages!,
21:37 < dherman> gf4: new languages are great
21:37 < dherman> I'm all in favor
21:37 < dherman> but people also like JS
21:37 < jesusabdullah> aaaand I'm out.
21:37 < dherman> I come from the Lisp/Scheme tradition
21:37 < gf4> dherman: Well those people are wrong
21:37 < SubStack> dherman: I'm not sure that static exports are necessary for macros, what about just a nice way of doing multi-line quotes?
21:37 < gf4> dherman: JK
21:37 < dherman> gf4: :)
21:37 < Murvin> does express changes it way to handle error with Node.0.8?   app.error  doesn't work anymore
21:37 < jesusabdullah> fwiw dherman I love javascript as-is and would be happiest if it changed in the most minimal ways possible. That's my $0.02 with interest. ;)
21:38 < SubStack> like """...""" in python or something similar
21:38 < dherman> SubStack: yeah, that's in ES6
21:38 < gf4> dherman: Don't I know it, I'm still using your racket JSON module 
21:38 < SubStack> or q{} in perl
21:38 < SubStack> dherman: well couldn't that just be used instead of this macro stuff?
21:38 < dherman> gf4: :)
21:38 < dherman> SubStack: it covers some cases, but it doesn't allow you to precompile
21:38 < SubStack> for doing inline coffee-script in a single file which I guess you would want for big multi-language bundles?
21:39 < Glenjamin> oo, pystrings would be cool
21:39 < SubStack> dherman: is that so you can generate a bundle and inline coffee-script alongside javascript without having to use sourcemaps for the line offsets?
21:39 <@maxogden> require('foo', function(err, module) { window.Foo = module }) would be nice
21:40 < dherman> Glenjamin: http://dherman.github.com/tc39-codex-wiki/ is the work-in-progress new wiki
21:40 < chapel> maxogden: no to window.Foo right there
21:41 < chapel> well
21:41 < chapel> I guess I read that wrong :(
21:41 < chapel> carry on
21:41 < SubStack> dherman: are macros the only reason why you advocate static exports?
21:41 < dherman> no
21:41 < Glenjamin> heh, i sometimes feel like i'm the only person who doesn't care about let
21:41 < Glenjamin> or block scoping at all
21:41 < gf4> maxogden: The concept is nice, quite wordy though. JS :-(
21:41 <@maxogden> callbacks are part of js
21:42 <@maxogden> programming writing js should use them all the time :)
21:42 < jocafa> hollaback()
21:42 <@maxogden> programmers*
21:42 < jesusabdullah> I saw an interesting proposal in julia-lang
21:42 < dherman> SubStack: the ability to interoperate with other languages via modules, some of which might be typed
21:42 < dherman> like Roy, for example
21:42 < jesusabdullah> you could use 'do' to specify the callback function
21:43 < SubStack> dherman: anyways it seems like dropping export this() in favor of `export value` would have the benefits of all that typo stuff while embracing the commonjs style of doing object-based exports that are usually just single functions
21:43 < dherman> and the possibility of a typed dialect of JS
21:43 < jesusabdullah> I forget exactly how but it was surprisingly neat
21:43 < dherman> which I imagine you don't like :)
21:43 < jesusabdullah> typed dialect might be neat
21:43 < dherman> SubStack: so export value interferes with knowing the static contents of the module
21:43 < jesusabdullah> I like that lljs thing
21:43 < jesusabdullah> you guys seen that?
21:43 < SubStack> and letting `import` return a value instead of inlining the destructuring into the keyword
21:43 < dherman> jesusabdullah: LLJS is from my group
21:44 < dherman> SubStack: I've read isaac's post too :)
21:44 < Glenjamin> hrm, no plans to add some sugar for parent method call?
21:44 < SubStack> dherman: I don't really see how it would?
21:44 < jesusabdullah> dherman: I actually love lljs
21:44 < jesusabdullah> Like, I read through the sauce to see how it was done and stuff
21:44 < jesusabdullah> or, at least
21:44 < jesusabdullah> the, umm
21:44 < SubStack> it seems like the same as doing multiple exports with export var x = 5 or whatever
21:44 < jesusabdullah> the thing that explains it
21:45 < SubStack> but just doing one of those
21:45 < jesusabdullah> Thought it was very interesting
21:45 < jesusabdullah> !
21:46 < dherman> SubStack: are you saying you could choose to make a module contain named exports or just a single anonymous export?
21:46 < dherman> but not both?
21:46 < dherman> I guess that's sort of the similar as your "static module" suggestion
21:46 < SubStack> dherman: sure
21:46 < dherman> s/the similar as/similar to/
21:47 < dherman> I kind of like that. still feels like one more thing than what we already have, and you guys already think it's too complicated
21:47 < jjido> why can't the single anonymous export have named attributes?
21:47 < dherman> oh it could
21:47 < dherman> jjido: it just wouldn't be named
21:47 < dherman> like, say, node-optimist
21:49 < SubStack> dherman: "too complicated" arguments are mostly just about how the interface is not very good for writing modules in the typical node style
21:49 < jjido> so is it the way you import which is different?
21:49 < SubStack> well and custom destructuring I think shouldn't belong in import but I would even be ok with that if import returned a value
21:49 < SubStack> although at that point it wouldn't seem especially necessary
21:50 < SubStack> anyways heading to coffee &
21:50 < jjido> SubStack: are you talking about selecting and renaming imported symbols 
21:51 < dherman> SubStack: thanks for the constructive comments
21:51 < dherman> bottoms up
21:52 < jjido> for importing a function under a new name from a module
21:52 < jjido> can't you do: var x = module1.y
21:53  * jocafa stabs IE8 in the taint
21:53 <@maxogden> yea if module1 has exports.y
21:54 < creationix> are cyclic requires a feature worth supporting
21:54 < dherman> creationix: yes
21:54 < creationix> why?
21:54 < creationix> (I disallow them in my luvit project)
21:54 < dherman> there are two kinds of things people mean when they say "module"
21:55 < dherman> one is what I'd usually call a "package" or "library"
21:55 < jjido> if the module exports a single function it would look like Sub's proposition no
21:55 < dherman> which is deployed
21:55 < creationix> dherman: a "dependency" usually
21:55 < dherman> with libraries, it makes sense for the dependencies to be a DAG
21:55 < creationix> right
21:56 < dherman> but internal to a library or app,
21:56 < dherman> you also want to divide things up into modules
21:56 < dherman> and there is where it's critical to allow cycles
21:56 < jjido> dherman: did you read me
21:56 < dherman> because otherwise it forces people to either twist into knots to break the cycles,
21:56 < creationix> I see
21:56 < dherman> jjido: sorry, multitasking like mad
21:56 < dherman> creationix: or they just (more likely) don't modularize
21:56 < dherman> it creates a disincentive to modularize
21:57 < dherman> bbiab
21:57 < creationix> so the whole app needs to be a single package
21:57 < creationix> with many small parts
21:58 < creationix> instead of importing other parts of the app, you need to share a single object
21:58 < creationix> and read things from it and put things on it
21:58 < creationix> which can be done with node-style requires and no cycles
21:58 < creationix> or there could be language sugar
21:59 < creationix> app.js -> export {}
21:59 < chapel> creationix: I think thats exactly what substack is asking for, and well isaacs and others
21:59 < creationix> (import app).foo
22:00 < creationix> if we're willing to tell people they need a main namespace module in their app/package then there is no need for cyclic dependencies
22:00 < creationix> that that resolves a ton of edge cases
22:01 < creationix> ok, so if I understand isaac's proposal, there are two new keywords "import" and "export"
22:01 < creationix> import is like node's require, except a keyword that only accepts string literals
22:01 < creationix> (import "foo") is an expression
22:01 < creationix> and export is like return, except for the file's export
22:02 < chapel> could also do import("foo") || (import("foo"))
22:02 < chapel> :)
22:02 < creationix> chapel yes, but then it doesn't look like a keyword
22:02 < chapel> sure
22:02 < creationix> and people will try to do import(myvar)
22:02 < chapel> heh, yeah
22:02 < creationix> but it does make chaining easier
22:02 < chapel> typeof foo || typeof(foo)
22:02 < chapel> :)
22:03 < creationix> var renderers = (import "./main").renderers
22:03 < creationix> http = import "http"
22:03 < creationix> (the first was inter-file within a project, the second was loading a dependency
22:04 < chapel> var renderers = import("./main").renderers
22:04 < creationix> I think if it's not a function, it shouldn't look as much like  a keyword
22:04 < creationix> but that's not essential
22:04 < chapel> yeah idk, no horse in that race
22:05 < creationix> I like the language-level import and export points
22:05 < chapel> just want simpler, and prefer node style
22:05 < creationix> makes it really easy to statically analyze code
22:05 < creationix> and the grammar could probably make import("foo").bar work even if it's a keyword
22:05 < creationix> what does new Foo().bar do?
22:06 < creationix> hmm, dunno on that one
22:06 < creationix> grammars can get tricky
22:07 < chapel> hmm
22:09 < ettezo> is there an example of a wiki powered by node?
22:10 <@maxogden> sharejs
22:10 < joelsbeard> can someone explain the significance of this? "binding = require('./daemon.' + process.version);" I keep getting an error that it can find the module for daemon.v0.8.0
22:11 < ettezo> sharejs?
22:13 < mattrobenolt> tjholowaychuk: +1 for supertest :)
22:14 < ovaillancourt> interesting javascript thing -> true % true % true = 0
22:14 < ovaillancourt> true % false % true = NaN
22:14 < tjholowaychuk> mattrobenolt hahahaha
22:14 < tjholowaychuk> shitty name hey
22:14 < jesusabdullah> joelsbeard: Different modules for each version of node that's being supported?
22:15 < mattrobenolt> tjholowaychuk: Beyond the name, it's a useful tool. I haven't used it yet to say how well in practice it works, but in theory, I like it.
22:15 < jesusabdullah> supertest?
22:15 < mattrobenolt> I was recently looking for a test runner to assist testing http endpoints.
22:15 < ettezo> thanks alot maxogden
22:15 < tjholowaychuk> mattrobenolt I had a dumb thing written up in express/test/support/http.js that I kept copy/pasting around
22:16 < jesusabdullah> joelsbeard: That project may not be supported in node 0.8 yet
22:16 < tjholowaychuk> so figured it should be a module
22:16 < mattrobenolt> tjholowaychuk: Yeah, I was looking for something smiliar to Django's test client, if you're familiar with that. It might even be something better to lodge right into Express.
22:16 < joelsbeard> jesusabdullah: I also tried it with 0.6.15 and same problem
22:16 < tjholowaychuk> mattrobenolt not familiar with it
22:16 < tjholowaychuk> i dont think there's any good reason to include it in express
22:17 < mattrobenolt> tjholowaychuk: The Django test client doesn't actually spawn a server at all. It just directly hits the routes and calls the views.
22:17 < jesusabdullah> joelsbeard: I'd look for an issue about it on the project's github, and if you don't see one create one
22:17 < joelsbeard> jesusabdullah: thanks
22:17 < tjholowaychuk> mattrobenolt meh node is fast enough via http
22:17 < tjholowaychuk> no point making that brittle
22:17 < mattrobenolt> tjholowaychuk: Yeah, true dat.
22:17 < tjholowaychuk> by trying to work around it
22:18 < jesusabdullah> joelsbeard: You're welcome.
22:18 < mattrobenolt> I put some thought into it a bit ago, and that was my initial approach since that's my experience.
22:18 < jesusabdullah> oh, joelsbeard which module was that again? It might be one of ours
22:18 < joelsbeard> jesusabdullah: Actually, it looks like it build an executable and calls it daemon.v0.6.8
22:19 < joelsbeard> jesusabdullah: it must support more than just that version though, I could have build it incorrectly?
22:19 < jesusabdullah> joelsbeard: Yeah, that's possible. You'd have to look and see
22:21 < joelsbeard> jesusabdullah: I think it's because I don't have NODE_PATH set, woops
22:23 < creationix> ok, started my thoughts, but need to go for now https://gist.github.com/445adc206d51a038de4a
22:30 < Raynos> What's a stable tool (for node 0.8.0) to use on a production server to reboot the thing if / when it crashes
22:32 < mattrobenolt> Raynos: supervisor.d
22:32 < Raynos> will that work on joyent smartos?
22:32 < mattrobenolt> haha, that, I have no idea.
22:32 < timoxley> best way to change variables externally while node is running?
22:32 < mattrobenolt> I've never used it.
22:32 < mattrobenolt> timoxley: ENVIRONMENT VARIABLES!
22:32 < mattrobenolt> Actually, I don't know if those get cached in the process or not.
22:33 < timoxley> that's what i was worried about.
22:33 < timoxley> guess it's easy enough to test
22:33 < TooTallNate> environment variables work. if you want a more evented approach you need real IPC
22:33 < TooTallNate> a.k.a. cp.fork()
22:34 < timoxley> ahh
22:34 < timoxley> not a bad idea.
22:34 < mattrobenolt> TooTallNate: So every time you access an environment variable, it's read frmo the actual environment?
22:34 < Raynos> are tools like supervisor / nodemon / forever valid tools for this?
22:34 < TooTallNate> mattrobenolt: yes
22:34 < othiym23> Raynos: you can try the forever module, but using an OS-level tool to monitor / restart your tool if it crashes (like Ubuntu's upstart) is better in the long run
22:34 < mattrobenolt> TooTallNate: Good to know.
22:41 < timoxley> TooTallNate changes to my env vars on the commandline don't seem to get reflected in my test… is there something I need to do to get them to be looking at the same space?
22:42 < Raynos> what's the standard trick to opening a server on port 80 / 443 then degrading permissions
22:44 < SubStack> Raynos: setuid() and setgid() to a nobody account?
22:44 < chapel> Raynos: you could use monit possibly
22:44 < Raynos> does monit run on smartos?
22:44 < tjholowaychuk> monit is sweet but the dsl is a PITA
22:44 < chapel> smartos is solaris
22:44 < arcanis> no idea ? :< http://stackoverflow.com/questions/11235143/block-a-socket-used-by-an-agent
22:44 < chapel> so possibly
22:46 < TooTallNate> timoxley: i'm not sure to be honest. all i know is that `process.env.foo = 'bar'` ends up calling setenv() under the hood
22:47 < Raynos> SubStack: how do you set it to a nobody without hard coding strings?
22:47 < timoxley> TooTallNate good idea. look under the hood.
22:47 < timoxley> thanks
22:47 < TooTallNate> timoxley: but what does your test look like?
22:48 < TooTallNate> i mean, it wouldn't work like bash "export" if that's what you're expecting
22:48 < jocafa> mmmmmm pita
22:48 < chapel> tjholowaychuk: do you think there is a need/desire for a node based tool that is robust or at least as useful as monit?
22:48 < tjholowaychuk> chapel i had one a year or two ago but ditched it
22:48 < TooTallNate> so in the end i guess environment variables wouldn't work for long-running processes
22:49 < tjholowaychuk> aptly named "monit.js"
22:49 < timoxley> TooTallNate i was expecting to be able to export THING="something" from the commandline and have that reflected the next time the app accesses process.env.THING
22:49 < chapel> tjholowaychuk: I don't think a dsl is useful, json is fine for that imo, but is there any reason node can't be trusted to do long running things?
22:49 < chapel> I mean, who monitors monit :P
22:50 < jocafa> The Man, that's who.
22:50 < tjholowaychuk> chapel im using mon(1) now, less memory, less moving parts, less breakage, single process monitor
22:50 < tjholowaychuk> so if it *does* happen to go down it's not taking down everything
22:51 < chapel> hmm
22:51 < chapel> tjholowaychuk: mon(1) hmm, not heard of it
22:51 < tjholowaychuk> monit is great other than the dsl
22:51 < chapel> ultimately I want something reliable, that wont break easily, and that I can pipe/send events to somewhere else easier
22:51 < Weems> where do I create the views directory
22:52 < Weems> trying to create a .jade initally
22:52 < tjholowaychuk> chapel you can use simple shell scripts to launch them off https://github.com/jgallen23/mongroup
22:53 < chapel> one thing Ive been looking at is sensu
22:53 < guigouz> hi, i need to fetch all data between 01 and 03 in this buffer - <Buffer 01 30 30 31 20 72 48 03 2b> (can be any length) so I can calculate the checksum 2b. I can do that with a while loop, but can someone recommend a cleaner way ?
22:53 < chapel> its pretty big compared to mon, but its more akin to nagios, the reporting though is nice
22:54 < tjholowaychuk> haven't heard of that one
22:54 < tjholowaychuk> i gave god another try too
22:54 < tjholowaychuk> but i couldnt get it working, cant remember why
22:55 < context> tjholowaychuk: what. his first 7 days of creating the entire universe wasnt enough?
22:56 < tjholowaychuk> haha
22:56 < tjholowaychuk> npm install athiest
22:56 < context> Winnar!
22:56 < context> npm install agnostic
22:56 < context> time to go drink some sake
22:57 < bnoordhuis> guigouz: what's wrong with a for loop?
22:58 < guigouz> i'm not sure 03 will always be there, maybe I can get a partial message
22:58 < guigouz> so i'd have to iterate then have some flag if the message is complete or not
22:59 < jesusabdullah> guigouz: possibly a reduce
22:59 < jesusabdullah> guigouz: but if you have it working with a while loop, just wrap it up in a helper function and move on
23:00 < guigouz> i have it working for a perfect message in my dev environment, just wanted to be sure I'm not way lost
23:00 < guigouz> it's really a sintax doubt
23:00 < guigouz> syntax*
23:01 < guigouz> I'll iterate and have a flag to check if the message is complete (have a 03) or not.
23:02 < guigouz> thanks =)
23:02 < chapel> tjholowaychuk: do you use mon for things like redis as well?
23:02 < tjholowaychuk> yup
23:03 < chapel> got sidetracked, going to take a look in a bit
23:10 < kevindente> Are there known issues with require-ing with relative paths (eg "../../path/module")? It's working for me on OS X, but doesn't work when deployed to heroku
23:14 < CIA-75> node: Ben Noordhuis v0.8 * rd5f13f6 / (Makefile configure): build: use proper python interpreter - http://git.io/ZSX47g
23:18 < Murvin> anyone knows what this error mean?
23:18 < Murvin> ../deps/uv/src/uv-common.h:101: uv__req_unregister: Assertion `uv__has_active_reqs(loop)' failed.
23:21 < bnoordhuis> Murvin: it means loop->active_reqs == 0 when it shouldn't be
23:21 < bnoordhuis> Murvin: where/when do you see that?
23:24 < Murvin> bnoordhuis:  when I start running node
23:24 < Murvin> what loop->active_reqs?
23:25 < bnoordhuis> Murvin: something that the c code uses to keep track of if the event loop's alive
23:25 < bnoordhuis> Murvin: when you say 'start running node' what do you mean exactly? just `node`?
23:25 < Murvin> i just update my node to 0.8 and reinsatll all node packages,e.g. expresss..etc
23:26 < bnoordhuis> Murvin: https://github.com/joyent/node/issues/3565 <- is that your issue?
23:26 < Murvin> so.. I call sudo node myprogram.js  it is a web server.. i created it by express.   then after app.list().  it fails.
23:27 < bnoordhuis> Murvin: does `node` (no args) work? i.e. do you get a REPL?
23:28 < Phoenixz> Question: I use npm on 2 different machines (one ubuntu, my dev machine with node 0.8.0 installed, another one on centos, the production machine, with node 0.8.0 installed)... npm info traverse gives highest 0.6.3 on my dev machine, and 0.6.1 on my production machine.. Since I need travrerse 0.6.3 as a dep, I have a small problem here
23:28 < Phoenixz> Why is my production machine not seeing traverse 0.6.3???
23:29 < Murvin> bnoordhuis:  Interesting..   if I run without argument,  it gives sementation fault.  If I run with argument, which I use 'optimist' to capture the argument, i get the loop fail one
23:30 < bnoordhuis> Murvin: try this: gdb --args node<enter>, run<enter>, when it crashes: bt full<enter>
23:30 < bnoordhuis> please gist the backtrace
23:30 < Murvin> i dunno how i can debug that now.. coz my program was working with 0.6.7 and 0.6.18(or 19), and it is a large program now.
23:31 < Murvin> hmmm gdb?  
23:32 < Murvin> bnoordhuis:  how ?  e.g I run like this:   $ sudo node myProgram.js 
23:33 < Murvin> do you want me to run .. $sudo node myProgram.js --args node   ?
23:33 < bnoordhuis> Murvin: no. run it exactly as i typed it
23:34 < bnoordhuis> i'm assuming you have gdb installed
23:35 < Murvin> i m in (gdb)
23:35 < Murvin> and i press run
23:36 < Murvin> and i'm in  another prompt..  >
23:36 < Murvin> how to make it crash?
23:37 < bnoordhuis> Murvin: so it's not crashing when you run it from gdb? curious
23:37 < myndzi> cluster seems to be more robust than child_process; is there any reason not to use it even if you're not sharing a listening port?
23:37 < Murvin> not crash
23:37 < bnoordhuis> Murvin: quit gdb. what happens iwhen you run `node` (no args, no sudo)
23:38 < Murvin> just go to the node prompt
23:38 < Murvin> >
23:38 < creationix> ok, somewhat finished my thoughts on why cyclic dependencies have to go. https://gist.github.com/445adc206d51a038de4a
23:38 < bnoordhuis> Murvin: so... it's not actually crashing. but it does crash when you run `sudo node`?
23:39 < Murvin> $sudo node     is fine too
23:39 < bnoordhuis> Murvin: so when *does* it crash?
23:39 < Murvin> it crash when I run $ sudo node myprogram.js     
23:39 < bnoordhuis> right. does your application use native add-ons?
23:40 < Murvin> i use express, connect-mongo, mongoose, node-uuid, microtime, ain2, gzippo, optimist, recaptcha-async, xml2js, xml2js-expat, seq, jqtpl
23:41 < bnoordhuis> Murvin: well... what does the backtrace look like when you run `sudo gdb --args node myprogram.js`?
23:42 < Murvin> When i run node myProgram.js,   it passes loaidng all required packages, libraries..etc,  and create the Server... app.use()..etc   and then app.list()   and then at next Tick, it crash
23:42 < othiym23> apropos of nothing, I gotta say the last 24 hours have taught me a lot about isaacs wants me to write node modules
23:42 < Murvin> ok. let me try that
23:42  * othiym23 busily rewrites a bunch of modules to export one thing on module.exports
23:42 < bradleymeck> creationix: but what about runtime determined deps? like lazy loading from a directory of plugins/routers/etc
23:42 < Murvin> Program received signal SIGSEGV, Segmentation fault. 0x00007ffff7001ed8 in ?? () from /lib/libc.so.6 
23:43 < Murvin> that's what it shows when i press "run"
23:43 < creationix> bradleymeck: how would static code analyzers handle that?
23:43 < creationix> I think that's outside the scope of the module system
23:43 < Murvin> i will copy the bt to the issue
23:43 < creationix> you still need an "eval this code I wrote" feature for that case.
23:44 < bradleymeck> creationix: i think if people determing DAG is going to be how it is done it will hurt the use of modules for lazy loaders that want to do so
23:44 < Murvin> i copy that over.
23:44 < bradleymeck> i dont want to reimplement modules
23:44 < Murvin> please take a look.  at issue 3565
23:45 < Phoenixz> Why would npm on 2 different machines show 2 different available version lists for traverse!?
23:46 < creationix> bradleymeck: I think language modules should be minimal
23:46 < bradleymeck> Phoenixz: npm cache clear
23:46 < creationix> not try to solve all use cases
23:46 < creationix> that's a recipe for disaster
23:46 < Phoenixz> bradleymeck: aaaand that clears it... nice to know :)
23:46 < bnoordhuis> Murvin: i can't really help you. the bug is in all likelihood not in node but in one of the add-ons
23:47 < creationix> bradleymeck: comment on the gist if you want
23:47 < bnoordhuis> Murvin: try the principle of exclusion, i.e. does your app /not/ crash when you don't load add-on x
23:48 < creationix> bradleymeck: JS modules need to work in the browser well to be implemented at the language level.  Dynamic require doesn't work for pre-compilers
23:49 < tjholowaychuk> not sold on the language dealing with that at all
23:49 < tjholowaychuk> considering components are more than just js
23:49 < Murvin> bnoordhuis:  ok. i will try that.
23:49 < tjholowaychuk> loading js async via the language doesn't help much
23:49 < creationix> tjholowaychuk: it would be like and, but without the boilerplate
23:49 < creationix> *amd
23:49 < Murvin> if anything new, i will update in issue
23:50 < Murvin> or here
23:50 < tjholowaychuk> you can already do amd
23:50 < tjholowaychuk> without boilerplate
23:50 < tjholowaychuk> you need a build step but who cares
23:50 < creationix> well, if you have a build-step then why do that at all
23:50 < tjholowaychuk> we load the bundles and their tree of deps async
23:51 < creationix> tjholowaychuk: I think the no-build-step use case is useful for development of front-end stuff
23:51 < tjholowaychuk> but css and other assets
23:51 < tjholowaychuk> as well
23:51 < tjholowaychuk> but use node-style modules
23:51 < creationix> tjholowaychuk: that's what I usually do as well
23:51 < creationix> but node-style modules will never work in the browser without a build-step
23:51 < creationix> so it won't get adopted into the language
23:52 < tjholowaychuk> if they are in-language then that kinda dictates what everyone *should* be doing
23:52 < tjholowaychuk> which is probably wrong
23:52 < tjholowaychuk> since it completely leaves out other assets
23:52 < creationix> hence my proposal to keep it super simple
23:52 < tjholowaychuk> only solving a small part of the problem
23:53 < creationix> basic import/export syntax is better than what we have right now (everything same global scope)
23:53 < tjholowaychuk> IMO we're not even close as a community to go ahead and start putting that stuff in the language
23:53 < creationix> tjholowaychuk: so how do you declare css and other non-js assets?
23:53 < creationix> from javascript?
23:54 < tjholowaychuk> nope
23:54 < tjholowaychuk> i have a blog post in the works
23:54 < tjholowaychuk> ill ping u when it's up
23:54 < creationix> cool
23:54 < creationix> I just don't want the language to try to do too much
23:54 < tjholowaychuk> mostly just ideas, what we're doing right now isn't flawless
23:54 < creationix> only implement the things we know are good ideas and safe
23:54 < creationix> nothing more
23:54 < CIA-75> libuv: Ben Noordhuis v0.8 * r1b68434 / src/unix/dl.c : unix: assume that dlopen() clobbers dlerror() - http://git.io/1Owk8g
23:57 < bradleymeck> creationix can you fix the casing on 'Math' in the gist, tripped me for a sec
23:58 < creationix> bradleymeck: fixed
23:58 < bradleymeck> going to be rereading this for a couple days...
--- Log closed Thu Jun 28 00:00:46 2012
