--- Log opened Sun Nov 25 00:00:09 2012
00:18 < mscdex> anyone here use angularjs and node?
00:19 -!- mode/#node.js [+o piscisaureus_] by ChanServ
00:32 -!- mode/#node.js [+o piscisaureus_] by ChanServ
00:57 < superjoe30> mscdex, I am
01:07 < monkeymon> hi
01:10 < Leeol> Anyone know if Express 3(?) did something to `app.close()` ? I'm having a hell of a time programatically closing an Express app..
01:11 < Leeol> http://expressjs.com/api.html#express Doesn't think ending the server is important either.
01:15 < Leeol> Ok.. i think it's actually impossible with 3.0 ..
01:18 < superjoe30> Leeol, try using the http module independently of express
01:18 < Leeol> Express 3 seems to not want anything to do with the http server object. So, if you want access to anything server-like, you need to do it outside of Express
01:18 < superjoe30> app = express(); server = http.createServer(app);
01:18 < Leeol> superjoe30: Yea, it's a bit of a mind trip. TJ apparently doesn't even want `app.listen()`, but he includes it anyway. 
01:19 < Leeol> I'd rather see him get rid of it, i don't see why `app.listen` exists if `app.close()` doesn't. lol. Thanks :)
01:19 < Leeol> https://github.com/visionmedia/express/issues/1101#issuecomment-5336099
01:19 < superjoe30> np
02:46 < jackbean> hi everyone
02:47 < jackbean> I just launched a new ec2 micro instance using bitnami provided ami.
02:47 < jackbean> thanks to bitnami, it saves a lot of time compiling node
02:48 < jackbean> but it only had 0.6.18 of node
02:49 < jackbean> does that mean node >= 0.7 is still not stable enough?
02:49 < RLa> 0.8 is stable
02:49 < gluxon> No, it should be.
02:49 < gluxon> Everything pushed out to "stable" is indeed, stable.
02:50 < RLa> ec2 micro instances suck
02:50 < RLa> i would not use
02:50 < jackbean> exactly, compiling a new node version would cause you whole night
02:50 < RLa> too bad appfog has only 0.6 too, otherwise i would recommend their free account
02:51 < bakadesu> I agree with RLa, I had issues compiling on micro.  Did the exact same thing on a larger instance and it worked
02:51 < RLa> which can be run on ec2 too
02:51 < RLa> my only issues were speed
02:51 < RLa> it does cpu stealing after a minute of full load
02:51 < SomeoneWeird> jackbean, there are precompiled node binaries you can download
02:52 < RLa> also, i/o cost can be problematic with ec2
02:52 < jackbean> awesome! SomeoneWeird. will check that out 
02:52 < RLa> yes, binaries can be downloaded from nodejs.org
02:52 < AAA_awright> The whole night?
02:53 < RLa> maybe you can find packages for your distro too
02:53 < AAA_awright> Compiling Node.js itself should take 120 seconds on an AMI micro instance
02:53 < AAA_awright> TWO MINUTES
02:53 < RLa> it did not on mine
02:53 < jackbean> neither here
02:53 < AAA_awright> You're using the bundled OpenSSL, that's what takes all night
02:53 < RLa> and i had problems with i/o cost too
02:53 < AAA_awright> Use the OS libraries
02:53 < AAA_awright> The bundled V8 actually, too
02:54 < AAA_awright> That's what takes all night
02:54 < RLa> just impossible to calculate what it will cost
02:54 < AAA_awright> Well hint: It's proportional to how many times you run fs.write*
02:54 < RLa> is it?
02:55 < RLa> doesn't it matter how os flushes its buffers and stuff
02:55 < AAA_awright> Roughly
02:55 < RLa> i/o cost by iops instead of bandwidth or space makes no sense for me
03:02 < AAA_awright> RLa: That's their actual cost
03:02 < AAA_awright> A disk write that one person does is a write that another person can't do
03:04 < RLa> that could be said about bandwidth and space too
03:13 < sinclair> hmm
03:13 < sinclair> i wish to extend EventEmitter, but cannot
03:14 < SomeoneWeird> ?
03:15 < sinclair> SomeoneWeird: its a TypeScript thing
03:16 < SomeoneWeird> then thats your problem, lol.
03:16 < sinclair> SomeoneWeird: the TS declarations define EventEmitter as an interface, which is correct, but requires me to implement the emitter in the class implementing it
03:16 < sinclair> rather than extending it
03:16 < sinclair> kinda dumb
03:16 < SomeoneWeird> like ts.
03:17 < sinclair> SomeoneWeird: yeh, keep thinking that
03:17 < SomeoneWeird> KK
03:17  * sinclair would much rather spend time in TS than in JS
03:18 < ljharb> you're the only one i've ever heard say that :-p
03:19 < ljharb> sinclair: http://webreflection.blogspot.com/2012/10/javascript-made-everyone-crazy.html
03:19 < sinclair> ljharb: to put it another way, coding in JS has 0 advantage over coding in TS, in fact, TS offers several advantages over JS, so why would anyone code in JS?
03:19 < SomeoneWeird> <ljharb> you're the only one i've ever heard say that :-p < +1
03:20 < ljharb> read that article - it points out the disadvantages of coding in TS
03:20 < SomeoneWeird> sinclair, because TS is literally retarded
03:20 < sinclair> SomeoneWeird: just because you don't understand it, that is your issue
03:20 < ljharb> but also, you're ignoring the #1 advantage - because IT IS JAVASCRIPT. coding in something else, you might as well be writing hieroglyphics and compiling it to JS.
03:20 < SomeoneWeird> no, YOU don't understand it.
03:21 < sinclair> SomeoneWeird: ive been working with the TS compiler for the past month and a half
03:21 < SomeoneWeird> ooooooooooooooooooooooo a whole month
03:21 < sinclair> SomeoneWeird: stop trolling, you suck at it
03:21 < SomeoneWeird> Actually i'm not, 99% of the people in this channel will agree with me.
03:21 < sinclair> ljharb: ill read the article and comment
03:22 < ljharb> sinclair: please do. i'm not being as trollish as someoneweird, but i still think it's utterly ridiculous and a waste of time to use.
03:22 < sinclair> SomeoneWeird: its not a democracy, so who gives a f**k? 
03:22 < sinclair> ljharb: sweet, give me a second to read
03:22 < SomeoneWeird> maybe i'm subconsciously trolling
03:22 < ljharb> sinclair: if you don't want this sort of discussion, however, i'll note that talking about "not Javascript" in ##javascript, or "not node" in #node.js, is just asking for trolling.
03:23 < sinclair> ljharb: hardly
03:24 < sinclair> perhaps if the mentality of this channel is that of a 15 year old with a fetish for hating Microsoft, id like to think people in here weren't retarded
03:24 < SomeoneWeird> excuse me?
03:24 < sinclair> SomeoneWeird: be constructive, or be ignored
03:24 < ljharb> ok let's chill out on throwing around "retarded", first of all
03:24 < SomeoneWeird> Maybe you should join #typescript and stop talking about it in #node.js :)
03:25 < ljharb> and i have a fetish for hating bad products. microsoft just very often falls in that bucket.
03:25 < SomeoneWeird> yerp
03:28 < sinclair> ljharb: this article is silly
03:28 < SomeoneWeird> most of it's points are actually very good.
03:29 < sinclair> ljharb: for one, hes pointing out flaws all present in JS, and making up claims that TS was lying about making up claims about things it was never intended to be
03:30 < SomeoneWeird> what flaws?
03:30 < SomeoneWeird> JS isn't typed, so most of those flaws CAN'T apply
03:31 < sinclair> SomeoneWeird: typing isn't the only advantage
03:31 < SomeoneWeird> <SomeoneWeird> what flaws?
03:31 < SomeoneWeird> you're avoiding the question :)
03:32 < sinclair> Section  -> "Type Inconsistencies",  "Fake Security", "Getting Worst On Security", "Translated Parent Accessor"
03:32 < sinclair> author remarkably short sighted
03:33 < SomeoneWeird>  "Type Inconsistencies"
03:33 < SomeoneWeird> <SomeoneWeird> JS isn't typed, so most of those flaws CAN'T apply
03:34 < sinclair> SomeoneWeird: TS does not garantee type safety, but at least attempts to bring sanity to the language, again, typing is not the only advantage to TS
03:35 < ljharb> sinclair: that author is one of the smartest JS guys on the web right now fyi.
03:35 < ljharb> "strong typing" is NOT the same as "sanity"
03:35 < sinclair> ljharb: then he has only half looked at TS
03:35 < sinclair> its easy to be really good at a language, and disregard anything new 
03:36 < ljharb> i'd say the same about proponents of strong typing.
03:36 < sinclair> ljharb: im not in TS for strong typing
03:36 < ljharb> what else do you think it's advantages are?
03:37 < sinclair> compiling to different module specifications (amd, commonjs), compiler services, ES3 and ES5 specs, and generally simplifying everything
03:37 < sinclair> and reflection 
03:38 < ljharb> ok hold on. ES3 and ES5 you already get in ES5.
03:38 < SomeoneWeird> lollllllllll
03:39 < ljharb> and afaik, TS is just the current ES6 draft, plus strong typing
03:39 < sinclair> ljharb: i type less and do more, and feel comfortable with OOP, and interfacing, 
03:39 < ljharb> using OOP in javascript means you're using JS wrong.
03:39 < Aria> Depends on which aspects of object orientation.
03:39 < ljharb> it's a functional language that doesn't have classes. you need to learn something new.
03:39 < sinclair> ljharb: im looking at several npm modules which have you define objects
03:39 < gluxon> ljharb: Why is that?
03:39 < ljharb> Aria: true, but whenever anyone says "OOP" they're talking about the typical classical inheritance model usually.
03:39 < ljharb> gluxon: which part
03:39 < sinclair> var server = http.createServer(...) <- server is an object
03:39 < Aria> Sometimes!
03:39 < Aria> But sometimes they're talking about JS or CLOS ;-)
03:39 < Aria> Or Smalltalk.
03:40 < gluxon> ljharb: "using OOP in javascript means you're using JS wrong."
03:40 < gluxon> JavaScript has native OOP though.
03:40 < sinclair> gluxon: thank you
03:40 < Aria> Though I suspect what you meant is "classes are often the wrong way to think about problems, and Javascript sure encourages other solutions"
03:40 < gluxon> ljharb: JavaScript is becoming more of a general language.
03:40 < SomeoneWeird> <ljharb> using OOP in javascript means you're using JS wrong. < i disagree with this, but agree with everything else
03:41 < ljharb> gluxon: some people are using it like assembly, but that doesn't mean it's the right way to use it.
03:41 < gluxon> OOP is organization. If you're interfacing with something, I don't see the downsides of using OOP.
03:41 < Aria> OOP is one kind of organization. 
03:41 < gluxon> Right, apply the concept of OOP. (Objects)
03:41 < ljharb> gluxon: like i said - when someone says "OOP" they almost never are talking about the generic method of organizing code. they're talking about classes.
03:41 < Aria> Well, several kinds.
03:42 < Aria> Classes are one kind of OOP organization, and often encourages too much heirarchical thinking, rather than thinking in terms of traits or responsibilities.
03:42 < parallel> assembly though is a byproduct of its prevalence, though, right? not its language capabilities
03:42 < gluxon> ljharb: I was referring to both, but why wouldn't you use classes in JS?
03:42 < SomeoneWeird> yes
03:42 < Aria> Yeah, people use JS like assembly because then it can run in browsers. Doing things it was never originally envisioned to do.
03:42 < ljharb> gluxon: the word "classes" connotes classical inheritance, which JS does NOT have.
03:42 < gluxon> I've never learned Assembly, but I assume it's very procedural style?
03:43 < gluxon> ljharb: Ok.
03:43 < Aria> Well, actually, JS has classes. Weirdo ones, but prototype chain inheritance pretty much gives you that.
03:43 < Aria> gluxon: Not even procedural. Just lists of instructions, with jumps. But in this case, yes, it means procedural, constrained, very verbose and often direct to the point of repetetive.
03:43 < ljharb> Aria: prototypical inheritance is NOT classes. it's a fallback chain for object lookups, nothing more.
03:44 < Aria> ljharb: And classes are what, then?
03:44 < gluxon> Aria: Ah, so how I programmed in my very early days.
03:44  * gluxon wants code loop 4 times
03:44 < Aria> gluxon: Yeah. But real assembly is one notch lower. 
03:44  * gluxon copies code 4 times
03:44 < gluxon> :D
03:45 < sinclair> ljharb: anyway, there is nothing wrong with TS
03:45 < gluxon> ljharb: Do you have any links or advice on JavaScript organization? Pertaining to Node.js would be better.
03:45 < ljharb> sinclair: you haven't said what advantages TS gives over JS, other than things that are already coming to JS with ES6
03:45 < sinclair> ljharb: reflection ?
03:45 < gluxon> Node.js's structure was pretty foreign coming from C++ and Java.
03:45 < SomeoneWeird> reflection? wat.
03:46 < sinclair> SomeoneWeird: google it
03:46 < SomeoneWeird> i know what it is, I don't get how you would use it for a JS lang.
03:46 < sinclair> ljharb: the commonjs and amd compiler output is pretty sweet, i have one code base, two outputs for different environments
03:47 < sinclair> ljharb: the func array syntax is sweet as syntactic sugar
03:47 < Aria> gluxon: The real trick is not trying to make inheritance heirarchies. They're rarely needed, and when they are, it's pretty obvious when you need them. Often what you want is a closure, with several functions inside. function foo() { var stuff; function frob() { } function quux() {}; frob(); }
03:47 < ljharb> to support modules is not that difficult, and nobody switches module systems any more than they switch relational databases or DOM libraries.
03:47 < ljharb> Aria++
03:47 < sinclair> ljharb: a direct advantage TS has over other compiled languages like CoffeeScript is , TS is Javascript
03:48 < ljharb> sinclair: i agree with that one. it's far less of an abomination than coffeescript. but it's still one.
03:48 < Aria> gluxon: All those inner functions are 'private' -- but it lets you break up what you're doing. It's "an object", in a sense, but really, only exists while there's references to those bits. Quite often this is the right model for things -- the outer function is "Set up the process of ____"; the inner parts are how that works.
03:48 < gluxon> Aria: When you said "closure" you're referring to the technique, and not as a general English term?
03:48 < gluxon> http://en.wikipedia.org/wiki/Closure_%28computer_science%29
03:48 < gluxon> I just found that and never saw it before, so not completely sure.
03:49 < sinclair> ljharb: its not tho, interfacing with TS is so sweet
03:49 < ljharb> gluxon: a closure in JS is when an inner scope retains a reference to its containing scope(s) after they have otherwise become inaccessible
03:49 < Aria> gluxon: Yes, the computer science term. Not technique, but the "scope that outlasts the call that created it" -- if you return one of those functions from inside another function, the outer function's local variables form a closure.
03:49 < sinclair> ljharb: and, being on Visual Studio, i get code refactoring tools 
03:49 < ljharb> sinclair: "reflection" according to wikipedia is something JS already has - everything is mutable at runtime.
03:50 < ljharb> visual studio? windows? ugh.
03:50 < sinclair> ljharb: your loss
03:50 < Aria> gluxon: This includes returning objects with "methods" that all reference the parent function's variables. Or event handlers set up within that function.
03:50 < SomeoneWeird> <sinclair> ljharb: your loss < lol y
03:50 < sinclair> ljharb: i can reflect class method signatures with type information with TS
03:50 < ljharb> i've used them both. what i lose by not using them is insanity and suffering.
03:50 < SomeoneWeird> VS is awesome for .NET, shit for everything else
03:50 < ljharb> SomeoneWeird: that's not saying much, cause of .net
03:50 < SomeoneWeird> ya.
03:50 < Aria> gluxon: Usually (in most languages), closures are lexically scoped: you can figure out where a variable comes from by reading the text of the code, and seeing where it's defined, outside of the place it's used block by block.
03:51 < sinclair> SomeoneWeird: VS11 actually got good at JS dev
03:51 < gluxon> Aria, ljharb: Thank you. I've been finding it a bit weird organizing my Node.js code with the lack of (and discouragement of) "classes"
03:51 < Aria> gluxon: This makes a really natural organization system, very different than a classful one.
03:51  * sinclair admits VS JS was a bit crap in the past
03:51 < ljharb> sinclair: can you be more specific - without using comp sci terms - explain "i can reflect class method signatures with type information with TS"?
03:51 < SomeoneWeird> yeah, that's because it has native support for it now
03:51 < ljharb> sinclair: like, an actual example.
03:51 < Aria> gluxon: A function that returns a pile of functions is a "module" often (node's modules are wrapped in functions invisibly; you have to do it manually in other environments)
03:52 < sinclair> ljharb: the compiler provides you a AST to iterate though, from this, you can build up a lot of information about your code
03:52 < Aria> gluxon: And a function that returns an object can be thought of as a "constructor".
03:52 < ljharb> sinclair: esprima gives you one from JS too - that still doesn't explain the advantage.
03:52 < Aria> Heh. Reflection, sinclair. I have found so far that every time I find code using it, it's being too clever and needs to not do that.
03:53 < ljharb> Aria/gluxon: more specifically, a constructor is a function that's called with the "new" keyword.
03:53 < ljharb> yes! cleverness is to be avoided..
03:53 < Aria> ljharb: No, actually, that's not true. That's just Javascript being weird ;-)
03:53 < sinclair> Aria: how its used is entirely up to the programmer, but i've been using it for years to automate a lot of stuff
03:53 < sinclair> Aria: in .NET that is
03:53 < Aria> ljharb: function createMeAFoo() { return { aMethod: function() { } } } is also a constructor, in my book.
03:54 < Aria> sinclair: Well, yes. .NET is a terrible language that makes doing anything simple HARD.
03:54 < Aria> s/language/set of languages/
03:54 < sinclair> Aria: .net isn't a language
03:54 < sinclair> Aria: its a managed runtime, 
03:55 < Aria> Well, yes, but humans don't use that directly. They use the set of languages that target it.
03:55 < Aria> (hence my correction)
03:55 < ljharb> Aria: that's what i'd call a factory.
03:55 < sinclair> Aria: and they all suck right?
03:56 < sinclair> Aria: C#, F#, C++, Python, Scala, they all suck ?
03:56 < Aria> sinclair: Well, mostly. F# is kind interesting, there's tons of good runtime research going on there. But I don't enjoy any of their languages.
03:56 < ljharb> who would use python or scala to target .net? the only reason to use .net is if you're chained to microsoft already
03:56 < sinclair> Aria: .net doesn't suck at all
03:56 < Aria> (And scala's interesting too. But mostly in its brevity to me.)
03:56 < sinclair> Aria: again, you have to dig deep to appreciate exactly what it provides 
03:56 < SomeoneWeird> <Aria> [03:52:30] sinclair: Well, yes. .NET is a terrible language that makes doing anything simple HARD. < lol no
03:57 < Aria> sinclair: I remain unconvinced.  But then, I come from the hacker tradition of languages -- perl, lisp, ruby, shell, C.
03:57 < Aria> SomeoneWeird: Notice the next line, the correction.
03:57 < SomeoneWeird> heh
03:58 < sinclair> Aria: .net is way more than just a run time in the traditional sense, thats both a good and bad thing
03:58 < sinclair> good if you know it, bad if you don't
03:58 < Aria> sinclair: Well, yeah, it's got its ecosystem, and that has its good and bad parts. I just come from the unix tradition, and like the unix tradition a lot.
03:58 < Aria> (And then have a love of asynchrony, so node and I get along well.)
03:59 < sinclair> ....
03:59 < sinclair> (because nothing else is asynchronous, only js)
03:59 < sinclair> anyway, .net isn't node
04:00 < SomeoneWeird> s/js/node/
04:01 < sinclair> ljharb: Typescript is not a abomination 
04:01 < ljharb> sinclair: i'm still waiting for an actual example of reflection
04:01 < SomeoneWeird> lawl
04:01 < sinclair> ljharb: every written a web service?
04:02 < sinclair> *erer
04:02 < ljharb> sinclair: since that remains the ONLY thing that you've said that can't be done with proper JS
04:02 < sinclair> *ever
04:02 < ljharb> of course, many times.
04:02 < sinclair> and needed to provide a contract to the clients of your web service ?
04:02 < sinclair> how do you normally do that...manually ?
04:03 < ljharb> a contract? when my web services need invoices, i either a) build an invoicing system, or b) pay a SaaS invoicing company, because reinventing wheels is stupid
04:03 < sinclair> ljharb: gawd... THINK HARDER
04:03 < ljharb> i wouldn't do it manually more than once or twice
04:03 < ljharb> i'm still not sure what you mean
04:04 < sinclair> ljharb: a perfectly reasonable scenario... SOAP
04:04 < ljharb> omg soap is never reasonable
04:04 < ljharb> http://stopsoap.com/
04:04 < sinclair> ljharb: its widely used
04:04 < sinclair> ljharb: and each language has toolchains to work with it
04:04 < ljharb> lots of things are widely used. doesn't mean it's any good.
04:04 < ljharb> soap and xml are garbage.
04:04 < sinclair> you provide a client wsdl, they generate their client proxy (in whatever language) ... done
04:05 < ljharb> i'd really really like to understand your TS example - but if SOAP is your justification i don't think i will. can you try another tack?
04:05 < sinclair> ljharb: no, its perfectly reasonable
04:06 < sinclair> ljharb: if you do any integration between disparate systems over the web, a soap stack is still the best place to turn to
04:06 < ljharb> sinclair: if your argument only applies in a SOAP/WSDL/XML/RPC world, then i think you have your answer why everyone else hates it. 
04:06 < ljharb> hahaha
04:06 < ljharb> highly disagree.
04:06 < sinclair> ljharb: i don't like SOAP
04:06 < ljharb> RESTful APIs are very simple to integrate. or just use git everywhere.
04:06 < sinclair> who cares
04:07 < sinclair> you wanted an example right?
04:07 < ljharb> the people that have to integrate them.
04:07 < sinclair> use reflection to generate the wsdl document
04:07 < sinclair> from a class
04:07 < sinclair> done
04:07 < ljharb> sure - for the purpose of understanding why anyone would want to use TS. an example in that category isn't going to achieve that goal for me.
04:07 < ljharb> javascript doesn't have classes. i can already use millions of static analysis tools to generate an AST or documentation from my code. how is TS special there?
04:08 < sinclair> generate a json service description from a class in TS then, see if i care, 
04:08 < ljharb> THERE ARE NO CLASSES IN TS OR JS.
04:08 < ljharb> please stop using that word :-( it makes brendan eich cry.
04:08 < sinclair> ljharb: there is a AST available in TS
04:09 < ljharb> i already have ASTs available outside of JS. outside > inside.
04:09 < sinclair> ljharb: i just gave you a perfectly good use for TS reflection.
04:09 < sinclair> ljharb: what is surprising, is you couldn't think of this yourself.
04:09 < ljharb> you gave me a use. because it deals with soap/wsdl, i don't believe it's perfectly good.
04:09 < sinclair> ljharb: which kinda tells me a lot about your experiance
04:10 < sinclair> ljharb: soap/wsdl was an example
04:10 < ljharb> i have plenty of experience in that stuff. i just refuse to entertain further thoughts of using it, because i've suffered enough.
04:10 < sinclair> also, soap / wsdl not mutually inclusive
04:10 < ljharb> also, generated documentation is often poorly written documentation.
04:11 < sinclair> ljharb: just because you struggle, does not mean its crap. it means you fail to grasp it
04:11 < ljharb> i didn't say i struggled. i say i suffered.
04:11 < ljharb> i grasp it fine. i just disagree that contracts and tight constraints on intersystem communication is a good idea.
04:11 < sinclair> generated documentation means you don't have a disconnect between what your code 'is' and what the docs say it is
04:12 < ljharb> right - youre moving the disconnect to between the documentation and the people reading it. a far worse place for it to be.
04:12 < sinclair> ljharb: no one is even talking about intersystem communication
04:12 < sinclair> ljharb: why are you talking about it
04:12 < sinclair> ?
04:12 < SomeoneWeird> i hope sinclair notices that he's the only one arguing FOR ts here
04:12 < ljharb> sinclair: ljharb: if you do any integration between disparate systems over the web, a soap stack is still the best place to turn to
04:12 < ljharb> you just talked about it.
04:12 < ljharb> lol he's the only one arguing for TS outside of microsoft, by my estimation.
04:12 < sinclair> we were talking about reflection in TS, and you asked for a example, i gave you one
04:13 < ljharb> yes, you did. then i asked for another, and you keep insisting that one's enough. is one all you have>?
04:13 < sinclair> im not here to discuss the good or bad points of SOAP
04:13 < sinclair> who cares
04:13 < SomeoneWeird> he's not talking about soap
04:13 < SomeoneWeird> fuck soap
04:13 < ljharb> cool, we don't have to talk about soap, if you give me an example that doesn't deal with it.
04:13 < sinclair> ljharb: ffs, use your imagination 
04:13 < SomeoneWeird> use yours
04:13 < ljharb> the burden of proof is not on me.
04:13 < ljharb> TS is new - the burden of proof is on it.
04:14 < ljharb> if you want to defend it, do so, otherwise it seems it's not defensible.
04:14 < sinclair> ljharb: nah, i can't be bothered, this conversation is going no where. 
04:14 < sinclair> ljharb: use it, don't use it, who cares
04:15 < ljharb> this is like the 12th time you've talked about TS in this room, and you remain a) the only one advocating it, and b) unable or unwilling to argue about it to completion. why do you keep bringing it up in here? it's not the right room for it.
04:15 < SomeoneWeird> you're arguing for a language in a channel that's inclined to disagree
04:15 < ljharb> we don't talk about ponies or politics in here either. typescript is just as irrelevant.
04:16 < sinclair|work> no, i mention it, then i get trolled by JS zealots
04:16 < SomeoneWeird> then don't mention it
04:16 < sinclair|work> i really don't care, and i can't be bothered defending it
04:16 < SomeoneWeird> obviously
04:16 < sinclair|work> stop asking me to
04:16 < SomeoneWeird>  /part then
04:17 < ljharb> so stop mentioning it.
04:17 < ljharb> nobody else seems to want it mentioned.
04:17 < sinclair|work> ljharb: conversation is over
04:18 < SomeoneWeird> doesn't seem like it is
04:19 < ljharb> when a conversation's over you don't keep adding to it :-p
04:21  * Sly has no clue what's going on, but has snacks and is steadily watching the conversation.
04:22 < ljharb> yay snacks!
04:22 < ljharb> that's a dev tool i can get behind.
04:25  * sinclair|work wonders if anyone here can elaborate the advantages of JavaScript over TypeScript
04:25 < ljharb> hahaha
04:25 < sinclair|work> pfft
04:25 < ljharb> it's natively in browsers, it doesn't need an extra deploy or compile step, it's not based on an ES6 draft that's changing rapidly…
04:26 < Sly> sinclair|work: I don't know what it is, but I just looked it up and saw the "Microsoft" label on it.
04:26 < Sly> So whatever it is, it can't be too good.
04:26 < sinclair|work> ljharb: so what you saying is JS sucks?
04:27 < ljharb> that's not at all what i'm saying. required compile steps are stupid.
04:27 < sinclair|work> ljharb: i asked you to tell me the benefits of JS over TS, not what TS isn't
04:27 < ljharb> "JS over TS" means comparison, so in fact, that's the same thing.
04:27 < ljharb> also, it doesn't say "Microsoft", so there's no arbitrary barrier to community adoption
04:27 < ljharb> because like it or not, lots of programmers hate microsoft.
04:27 < sinclair|work> ljharb: what's that got to do with the language?
04:28 < ljharb> community adoption = tools = knowledge, which all make the language better.
04:28 < ljharb> betamax was better than VHS but didn't have the adoption. thus, betamax sucks.
04:29 < sinclair|work> ... so, you can give me a reason why JS is better than TS, you can only provide irrelevant analogies....
04:29 < Sly> To be honest, TS looks like it's for lazy programmers. Laziness = fuck ups.
04:29 < Sly> jmo
04:29  * Sly continues to snack.
04:31 < Sly> Oh, ew. It's using Harmony.
04:31 < ljharb> sinclair|work: i gave you reasons. how are those irrelevant?
04:31 < Sly> Fuck me. I would never use that.
04:31 < ljharb> Sly: yes, it's based on a harmony draft (that has ALREADY changed)
04:31 < sinclair|work> ljharb: analogies don't count as reasons, bias doesn't count either
04:31 < ljharb> sinclair|work: if you're looking for a *feature* that JS has that TS doesn't, of course there aren't any. that was one of the points of TS in the first place. but "features" aren't the only things that make languages good.
04:31 < ljharb> what bias?
04:32 < ljharb> i didn't say "microsoft sucks"
04:32 < sinclair|work> ljharb: "if you're looking for a *feature* that JS has that TS doesn't, of course there aren't any." -- bingo
04:32 < ljharb> i said "people who would otherwise help support the language think microsoft sucks"
04:32 < Sly> <
04:32 < ljharb> sinclair|work: but language *features* are NOT the only thing that matters.
04:32 < ljharb> in fact, they're almost the least important thing ever.
04:33 < sinclair|work> ljharb: thats why people still code in ASM, when C is available right?
04:33 < sinclair|work> ljharb: C sucks because its not ASM
04:33 < ljharb> C isn't more used simply because it has more features. it's better BECAUSE it's more used!
04:34 < ljharb> when TS is more used, then it could indeed be better. but it's not. and likely won't be.
04:34 < Aria> Indeed. Network effect is perhaps the most important (to me)
04:34 < ljharb> (not that that's the only differentiating factor, but it's a big one)
04:35 < ljharb> just like any language, you may indeed be hopping on the bandwagon early before it gets huge. but you also might be hopping on a bandwagon that's going nowhere. i already gave you lots of reasons why i think it's the latter.
04:35 < Aria> The only time an existing network is a hindrance is when you need to make a paradigim shift that's not compatible with old libraries and ways of building. Node got lucky in that respect in that there's no existing server-style code of any repute that uses Javascript.
04:35 < sinclair|work> ljharb: you consume a .dll on a platform somewhere, who cares if its written in ASM, C, C++, BASIC, so long as its a DLL
04:35 < ljharb> ".dll" only applies to windows, not "any platform"
04:35 < Aria> So bringing in event-based programming was relatively easy. Nobody had a "but how do I use it with X?" moment.
04:35 < sinclair|work> ljharb: who cares what its written in, community adoption is irrelevant, 
04:35 < ljharb> that's where you're wrong.
04:36 < Aria> sinclair|work: If you're okay being bound to that lowest common denominator ABI, go for it! ... but that's a terrible interface for most languages.
04:36 < sinclair|work> don't fork it then, rewrite it in JS 
04:36 < ljharb> so you're now saying, you'll start in TS, but rewrite it if it stays unpopular?
04:36 < sinclair|work> Aria: its unfortunate i need to speak in analogies, ljharb doesn't understand much else
04:36 < ljharb> i'd think it'd be better to start in JS, and convert to TS only *if* it gets popular
04:37 < sinclair|work> ljharb: do what you want
04:37 < ljharb> sinclair|work: seriously, you don't need to start insulting. i do understand much else, but you reject everything that's broader than "a language feature"
04:37 < Aria> ljharb: That does tend to favor the status quo. If you're into that, win. Not everyone is.
04:37 < sinclair|work> ljharb: there is nothing wrong with TS, it offers more than JS does, im going to use it with 0 negative implications 
04:38 < sinclair|work> ljharb: other than community naysayers telling me TS sucks all the time
04:38 < ljharb> sinclair|work: you can use whatever you want. obviously i think there are plenty of negative implications. but talking about it in here isn't "using it"
04:39 < ljharb> when something new is released and evokes such a visceral reaction from everybody, and then, when given deeper looks, is still widely rejected - that's not a good sign.
04:39 < sinclair|work> ljharb: what negative implications ?
04:39 < sinclair|work> and who is rejecting it ?
04:39 < sinclair|work> and should i care?
04:39 < ljharb> sinclair|work: second first: every respect JS person on the web seems to reject it.
04:40 < ljharb> of course you should care, unless you think you're smarter than everyone else?
04:40 < sinclair|work> ljharb: i fail to see the negative implications of using TS, there are not any. i don't care what the "JS experts are saying"
04:41 < Aria> sinclair|work: Ultimately there's only one: People who prefer Javascript are gonna mock you a bit. Or at least not join you. 
04:42 < Aria> sinclair|work: Sometimes that matters. Sometimes not. I'm sure I use a few coffeescript projects without knowing. But I know I've never contributed to them.
04:42 < Sly> sinclair|work: Here's why I don't like it. I don't see a point in it. For example: https://gist.github.com/032b50e5019e43da4339
04:42 < Sly> Like I said, it seems like it's just for lazy coders.. and it's using Harmony, which I despise.
04:43 < ljharb> Sly: to be fair, that's just pointing out the uselessness of syntactic sugar for classes, which is part of harmony, not part of TS
04:43 < Aria> ... Which is a part of TS ;-)
04:43 < Sly> Indeed. Harmony is part of the reason why I wouldn't use it.
04:43 < ljharb> lol
04:43 < sinclair|work> Sly: ???
04:43 < ljharb> sinclair|work: doing something the community advises against is a negative implication according to most.
04:44 < sinclair|work> ljharb: the community is biased
04:44 < Aria> sinclair|work: YES WE ARE!
04:44 < Aria> (not unfairly I think)
04:44 < ljharb> so? that doesn't make them wrong
04:44 < ljharb> don't be biased against bias :-p
04:44 < sinclair|work> ljharb: biased and opinionated != right
04:44  * Aria smirks
04:44 < ljharb> also true
04:44 < Aria> biased and opinioned != right is null ;-)
04:44 < sinclair|work> there are plenty of people biased against nodejs
04:45 < ljharb> but also, claiming to be unbiased usually === wrong
04:45 < sinclair|work> you don't care about that right?
04:45 < ljharb> sinclair|work: there's a critical mass of people using node. that doesn't exist for ts.
04:45 < Aria> I care when they're here trolling. Not otherwise!
04:45 < ljharb> and i most certainly do care. that's why im in this room, to try to help people use it.
04:45 < Sly> rofl, Aria.
04:46 < ljharb> if you care about TS, go to #typescript and advocate for it.
04:47 < ljharb> and i promise not to go there and talk about other languages, because that wouldn't be appropriate for the room. ;-)
04:47 < sinclair|work> ljharb: so you can't give me any reason to use JS over TS, other than following the incredibly biased community ?
04:48 < ljharb> i already gave you reasons. but because i phrased them as "ways TS isn't JS" you don't seem to understand them.
04:48 < ljharb> even though to explain why A is better than B, by saying "well b is bad in this way" is a perfectly valid form of logical argument.
04:48 < sinclair|work> ljharb: meh, all terrible reasons to give up TS, i lose too much goodness
04:49 < Aria> And then there's https://gist.github.com/baf90ce86570e7979442 ... which is what I really tend to write.
04:49 < sinclair|work> ljharb: this topic is over, id rather talk about node
04:49 < substack> sinclair|work: it can be harder to get contributors when using compile-to-js languages
04:49 < ljharb> the topic's not over until everybody stops talking about it. if you wish to abstain from the conversation, the path to that is shutting up, not announcing it's over.
04:49 < substack> that's the biggest issue, the other ones are rather unimportant
04:49 < ljharb> what "goodness" does TS have, that ES6 doesn't?
04:50 < sinclair|work> substack: perhaps, but the business projects i will end up using TS for, will not require contributors, so not such as issue for me 
04:50 < substack> if you want to use something you should just use it and not care about what other people think
04:50 < sinclair|work> ^ thanks
04:51 < ljharb> yup, use whatever you want. but don't expect everyone to like it when you talk about it :-)
04:51 < substack> if things are actually good or bad ideas you learn that by going out and using them
04:51 < substack> TS is pretty similar to JS anyways
04:52 < ljharb> indeed it is - i'd far rather see stuff in TS than in CS.
04:52 < substack> not something I would use right now because I don't want the features that it offers for my projects
04:52 < gkatsev> isn't TS just JS with type annotation?
04:52 < substack> ljharb: same
04:52 < Sly> gkatsev: has classes and such too. Interfaces, etc. Harmony related shit.
04:52 < ljharb> Sly: it has "classes". the quotes are important, because they're not real classes.
04:53 < gildean> Sly: you mean things that are coming to es6 too
04:53  * Sly dies.
04:53 < gildean> Sly: will you stop using js once es6 gets here?
04:53 < gkatsev> classes are just an implementation of es6 classes, and you can still use prototype just like in js. Interfaces are just type annotation stuff that they added. They are removed on compliation.
04:53 < Sly> No. I'll be forced to use it, then.
04:53 < Sly> But until then, fuck it. >:O
04:53 < ljharb> you won't be forced to use ES6 until every browser supports it.
04:54 < gkatsev> Sly: the class syntax is 100% sugar. Also, you won't EVER be forced to use ES6 since it is all additive.
04:54 < ljharb> however, everything in ES6 that's shimmable in ES3/ES5 will be awesome! and i look forward to using them the instant the draft is finalized.
04:54 < ljharb> it's the new syntax i'll have to avoid like the plague :-/
04:54 < gkatsev> use traceur?
04:54 < substack> I like prototypes because they save an indent
04:55 < ljharb> shudder
04:55 < substack> indenting an entire file inside of a class { ... } seems wrong
04:55 < substack> and wrapping an entire file in a class { ... } likewise
04:56 < Aria> Ditto. 
04:56 < gildean> substack: i feel the same way
04:57 < dook> Hey, I'm trying to request a page, but it loads with ajax…  is there a module that lets me wait for all ajax loading before triggering my cb?  'request' seems to just return the initial html.
04:57 < gkatsev> one good thing about the new class syntax is an easier way to do inheritance.
04:58 < gkatsev> dook: sounds like you need to shove that page into jsdom or phantom or something...
04:58 < SomeoneWeird> dook, phantom
04:58 < substack> gkatsev: what are you trying to do?
04:58 < dook> Ok, great, I'll look into that, thanks!
04:58 < substack> oh woops
04:58 < gkatsev> substack: not I. dook. :D
04:58 < substack> dook: what are you trying to do?
04:59 < dook> Trying to scrape the books off paperbackswap.com
04:59 < SomeoneWeird> http://phantomjs.org/
04:59 < dook> At least recent ones
05:00 < substack> dook: can't you just look at what the ajax is actually doing?
05:00 < substack> it's probably just hitting an http api that you could send requests to directly yourself
05:00 < dook> I was actually thinking the same thing, but hadn't found the js file making the call, I should probably just persevere.
05:01 < gkatsev> just tell chrome to log XHR
05:01 < substack> dook: open up the debugger in chrome or ff and click on the network tab
05:01 < substack> you can see all xhr requests
05:01 < gkatsev> that too.
05:01 < dook> Oh wow, hadn't realized chrome displayed requests just like that!
05:16 < monkeymon> hi
05:39 < rump> any of you swap out yer makefiles for npm run-scripts
05:41 < Aria> Yes, lots of people use grunt that way
05:49 < rump> neat, i can keep config in there too
06:36 < chovy> howdy
08:20 < milani> anyone from node-webkit here?
08:53 < jawsome> I'm using express as the API backend for my first node application. My question is if anyone can point me in the direction of how I can send "progress" data to the response before sending the final response. The main process can usually take ~3-6 full seconds and I'd like to include more data than the normal AJAX before/during/complete/fail.
08:58 < emilsedgh_> jawsome: res.write
09:00 < jawsome> emilsedgh_: Sorry to be a bother, but do you see any documentation of that? I'm not seeing it in the expressjs API Reference. I'm guessing it's only documented in connect?
09:01 < rump> why cant i catch this without terminating? https://gist.github.com/18be1ff56a8527dc38e8
09:02 < emilsedgh_> jawsome: look for it in the node.js documentation.
09:02 < jawsome> Ah, will do, thanks again emilsedgh_
09:03 < emilsedgh_> res object comes from node itself. express adds some functionality to it.
09:05 < jawsome> Found it, reading now. Looks like it'll work perfectly.
09:39 < MitchW> well, that was surprisingly nice - node+express+bootstrap, whipped up a pretty nice and clean looking site in a matter of a few hours (including the express/bootstrap learning curve)
09:43 < denysonique> express is easy to learn
09:43 < denysonique> easier than bootstrap
09:44 < denysonique> Don't you guys think that npm should have something like Gemfile.lock?
09:45 < denysonique> With the rapidly changing npm package APIs I think this would be useful, there would be no need to explicitly define versions of dependencies
09:45 < denysonique> Very often when i open up an old project it doesn't work anymore because of the mismatched versions of dependencies
09:49 -!- mode/#node.js [+o piscisaureus_] by ChanServ
09:51 < MitchW> I wouldn't say that, express I had to read through almost the whole API docos just to get 404 stuff working, only to eventually stumble across the FAQ and see it there.  Bootstrap puts everthing in your face, well documented, and has high (categorized, easily searchable) accessibility references
09:51 < mscdex> denysonique: i believe npm allows you to keep current versions via `shrinkwrap` or something
09:54 < denysonique> MitchW: right, hmm, becuase you have maybe never used Sinatra before ;p
09:54 < denysonique> or because I used it
09:54 < denysonique> mscdex: cheers, thats exactly what need!
10:02 < MitchW> denysonique: indeed, never used Sinatra before :)
10:03 < MitchW> only 'web application framework' kinda thing I've used before is django
10:03 < SoulRaven> i have a offtopic question, anybody knows any applicaion that combine multiple cloud storage solutions? like, drobox, amazon, gdrive, yandex, U1, skydrive?
10:05 < Industrial> I wonder if you could host malicious code on pastebins
10:07 < denysonique> Industrial: yes you could
11:18 < sinclairzx> does anyone here have any thoughts on socket.io vs sockjs?
11:18 < sinclairzx> i heard that sockjs is preferred nowadays
11:19 < sinclairzx> i have heard that sockjs scales a lot better than socket.io
11:38 < eff> sinclairzx: https://groups.google.com/forum/#!msg/sockjs/lgzxVnlth54/NbQKNEAzB5cJ
11:45 < sinclairzx> eff: seems socket.io is being abandoned for engine.io
11:46 < deoxxa> not abandoned
11:46 < deoxxa> you should read more than 3 words of whatever article gave you that idea
11:47 < sinclairzx> deoxxa: im looking at engine.io
11:47 < sinclairzx> deoxxa: i will continue the article when im done
11:47 < sinclairzx> k thx bye
11:47 < deoxxa> what?
11:48 < SomeoneWeird> wut
11:48 < iksik> w00t
11:48 < eff> the argument that there is server-side implementation for sockjs in node, python, ruby ... helped me in my choice, i had played a little with socket.io in python last year and was very disapointed to found very pourly working server side
11:49 < deoxxa> sinclairzx: i'm going to guess this is a case of wilful ignorance and you like the idea of socket.io being "abandoned"
11:49 < deoxxa> sinclairzx: so yeah, totally being abandoned
11:49 < deoxxa> idiot
11:49 < sinclairzx> deoxxa: not at all, i like socket.io
11:50 < sinclairzx> deoxxa: and i did read only three words into the article, before it linked me over to engine.io
11:51 < sinclairzx> deoxxa: call me an idiot again
11:51 < deoxxa> you're not my real dad
11:51 < sinclairzx> stfu
11:53 < SomeoneWeird> *cough* idiot
11:53 < sinclairzx> SomeoneWeird: learn to code
11:53 < SomeoneWeird> sinclairzx, k m8
11:53 < sinclairzx> nah, your going on ignore
11:53 < deoxxa> and get a damn haircut
11:53 < deoxxa> you hippy
11:54 < SomeoneWeird> luv u too sinclairzx 
11:55 < sosnon> hello. i have this setup http://pastie.org/5431154 , but somehow i cannot access the server's proterties; why is that? is this just my general misunderstanding of js internals or a glitch in my module layout?
11:56 < sosnon> ok, the console.log(Object.keys(server.reqNumber)) should just be console.log(server.reqNumber), of course; but it shows the same strange behaviour
11:56 < SomeoneWeird> console.log(server.reqNumber)
11:57 < sosnon> as i said
11:57 < sosnon> no worky
11:58 < SomeoneWeird> derp
11:58 < sosnon> same behaviour if i just attach to exports instead of module.exports
11:59 < deoxxa> sosnon: you do realise you're assiging to "serv", then trying to use "Server", right?
11:59 < sosnon> i'm assigning to 'server', not 'Server'
11:59 < mscdex> sosnon: why are you assigning your Server.prototype like that?
12:00 < mscdex> and using `module.exports.Server = Server`
12:00 < deoxxa> var serv = require('./server');
12:00 < mscdex> :S
12:00 < sosnon> i mean i can do "var server = serv.Server()", but that does not really change things
12:00 < sosnon> mscdex: it is a pattern i've seen in Mathew Eernisse's code
12:00 < deoxxa> that looks very broken
12:01 < deoxxa> wow, yeah, lol
12:02 < sosnon> i mean i can do it like that http://pastie.org/5431177 but still i can't see server's keys logged to console
12:02 < sosnon> (though server.start and server.reqNumber are both accessible)
12:02 < SomeoneWeird> http://pastie.org/5431179
12:03 < deoxxa> lollll sosnon you're relying on global variables
12:03 < deoxxa> that's so, so broken
12:03 < sosnon> well, i'm open to suggestions
12:04 < mscdex> sosnon: https://gist.github.com/a47bf0547da9c00348a8
12:04 < mscdex> sosnon: although, really you should save the server as `this._server = http.createServer....` and then have a prototype method like `Server.prototype.start = function....` instead of doing `this.start = ...`
12:05 < SomeoneWeird> <SomeoneWeird> http://pastie.org/5431179
12:05 < sinclairzx> http://www.ranu.com.ar/2011/11/redisstore-and-rooms-with-socketio.html
12:06 < mscdex> SomeoneWeird: onRequest isn't defined in .start() there
12:06 < mscdex> you'd have to do .bind() or use a closure if you use onRequest as a prototype method
12:06 < SomeoneWeird> oh, derp
12:06 < SomeoneWeird> yeah
12:06 < SomeoneWeird> didn't notice that
12:06 < sosnon> here's an example of the 'strange' prototype pattern https://github.com/mde/geddy/blob/master/lib/cluster/master.js#L18
12:07 < nicholasf> sosnon: yeh that is pretty weird
12:08 < sosnon> why is it written like that? i cannot really see the advantages (plus it is depending on new and (...)(); wrapping)
12:08 < mscdex> sosnon: i dunno, i prefer setting the prototype methods individually
12:08 < sosnon> though it is a recurring pattern in the codebase and he claims to write 'good' js
12:08 < mscdex> it looks cleaner that way imho
12:09 < nicholasf> sosnon: yeh, I don't find that code to be particularly readable at all
12:09 < sosnon> readability is nice, but there must be a structural advantage of this pattern
12:09 < mscdex> not that i'm aware of
12:09 < nicholasf> why must there be?
12:10 < nicholasf> cos it's popular?
12:10 < sinclairzx> there is a node style guide somewhere
12:10 < sosnon> it is recurring, so it is written with intention, i suppose: https://github.com/mde/geddy/blob/master/lib/cluster/master.js#L18
12:10 < sinclairzx> sosnon: http://nodeguide.com/style.html
12:11 < sinclairzx> not much on prototype patterns tho
12:11 < sinclairzx> so nevermind
12:11 < sosnon> sinclairzx: also, it is "Felix"'s guide ;)
12:12 < sosnon> not "official" or "widely accepted" or ...
12:13 < sinclairzx> sosnon: its 'something'  i suppose,    the pep8 for python is the LAW when it comes to acceptable style in that language
12:13  * sinclairzx doesn't know who Felix is either
12:13 < sosnon> sinclairzx: not if you work at google and look at the google style guide for python, so caution there, but js != python
12:14 < sinclairzx> sosnon: its similar in everything except syntax 
12:14 < sosnon> i object that
12:15 < sosnon> where is python prototypical?
12:15 < sosnon> anyway...
12:15 < nicholasf> sosnon: dont worry about emulating styles, especially if you don't understand why they're used
12:16 < sinclairzx> sosnon: http://code.activestate.com/recipes/86651-prototype-pattern/
12:16 < sosnon> and the discussion evolves into a language war, not solving my silly module setup problem
12:17 < sinclairzx> what language war, you asked me a question
12:17 < sosnon> sinclairzx: just because you *can* do it, does not mean you *should* do it
12:17 < sinclairzx> fine
12:18 < sosnon> sinclairzx: also this 'Prototype' is just a camouflage since it is itself a class... and the creator did not even make it a singleton or something...
12:19 < sinclairzx> sosnon: so?
12:21 < sosnon> well, you can modify any 'Prototype' instance (since there can be plenty) at any time (since this is what __dict__ is for) at which will affect any new 'Prototype' instance created in the future; if you let it inherit from a bunch of other classes, you will mess up the Prototype and effectively introduce unwanted multiple inheritance (classical style)
12:22 < sinclairzx> sosnon: i couldn't care less
12:24 < sosnon> mscdex: "var server = new Server() ... TypeError: object is not a function" for your suggestion
12:25 < sosnon> oh, i missed the .Server in the require statement, sorry
12:25 < sosnon> *assignment
12:30 < sinclairzx> socket.io is unreasonably good
12:37 < sosnon> thanks for the help
12:37 < sosnon> ... and the sweet talk ;)
12:38 < sosnon> sinclairzx: i will take to heart the style emulating advice
12:39 < sinclairzx> sinclairzx: is that a good or bad thing?
12:39 < sinclairzx> erm
12:39 < sinclairzx> sosnon: ^
12:40 < sosnon> still i'm wondering why the prototype is extended that way, especially the "new (function ( ... ) { ... })();" part; is it supposed to 'seal' anything away so no scope is accidentially polluted or something?
12:40 < sosnon> sinclairzx: i hope it's good, no definetly good
12:41 < sinclairzx> sosnon: cool, glad to hear
12:42 < Kakera> sosnon, that style is terrible and unreadable
12:42 < Kakera> don't use it
12:43 < sosnon> is it really... i'm still wondering if there may have be some thoughts put into it
12:43 < sosnon> why would anyone with a sane mind call new on a ()-wrapped function?
12:44 < sinclairzx> sosnon: how much experience with JS do you have?
12:44 < sosnon> sinclairzx: less than enough
12:46 < sosnon> well, i'll trust you guys then
12:47 < sosnon> ts is typescript?
12:47 < sinclairzx> yes
12:47 < sosnon> how would that help?
12:48 < sinclairzx> typescript is a no go discussion in here
12:48 < sinclairzx> it annoys the locals
12:48 < sosnon> so is coffescript?
12:49 < sinclairzx> sosnon: no, coffeescript is fine, its generally accepted as 'not useful' or ruby like, typescript treads on peoples turf a little too much
12:50 < sinclairzx> sosnon: http://www.typescriptlang.org/Playground/
12:51 < SomeoneWeird> go away
12:55 < sosnon> no, i am pretty sure i keep on writing js
12:55 < sinclairzx> sosnon: sounds good
12:59 < sosnon> thanks for the help again
13:01 -!- mode/#node.js [+o piscisaureus_] by ChanServ
13:19 < gotwig> hey dudes
13:19 < gotwig> I finaly got my website running on a very fast nodeJS CMS :-D
13:27 < elliottcable> Hi.
14:01 < AAA_awright> gotwig: What's the website?
14:02 < gotwig> AAA_awright: ;P not with your system.. sry
14:02 < gotwig> it is based on nodize.com
14:02 < gotwig> but I have to continue to improve some stuff
14:02 < AAA_awright> gotwig: Well I'd still like to know what your use case/requirements are
14:02 < gotwig> I want to build a simple website with responsive webdesign and live update
14:02 < gotwig> *s
14:03 < gotwig> and a very good style and many social media integration
14:03 < mscdex> and lots of cowbell!
14:04 < AAA_awright> So is it simple or live update?
14:04 < AAA_awright> What is "live update"?
14:06 < AAA_awright> gotwig: What particularly are you looking for?
14:06 < gotwig> huh , sry
14:06 < gotwig> with live update, I mean that content comes live into the website
14:06 < gotwig> without page reloading
14:06 < gotwig> like ajax I guess
14:06 < gotwig> but this happens automaticly
14:07 < AAA_awright> And what do you need to push to the site? Stock quotes or something?
14:07 < gotwig> the cms system can be more complex, it should be easy for me 
14:07 < gotwig> yes
14:07 < gotwig> I know that you can realize such stuff easily, too with iframes and such >.<
14:08 < gotwig> but I want to be able to always have the same interface, too, to edit content
14:08  * gotwig is afk for 4 minutes
14:09 < AAA_awright> It's straightforward to push updates to the web browser, it's just very intensive
14:09 < AAA_awright> Hard to scale
14:13  * gotwig is back
14:17 < AAA_awright> gotwig: What editing UI are you looking for?
14:17 < gotwig> WYSIWYG ;D
14:17 < gotwig> AAA_awright: do you want to take a look at nodize? 
14:18 < AAA_awright> That's harder to get right, because you confuse content and presentation
14:18 < AAA_awright> I'm very sure I'm the only person who has it right
14:18 < AAA_awright> I recall taking a look at that but... hm
14:18 < AAA_awright> Isn't that coffeescript?
14:19 < gotwig> yes it is
14:19 < AAA_awright> That's why
14:19 < gotwig> Its hard to get a demo right now
14:19 < AAA_awright> Don't feel like showing your site?
14:19 < gotwig> :D
14:19 < gotwig> I have nearly no content
14:19 < gotwig> http://gotwig-nodize.eu01.aws.af.cm/welcome
14:20 < gotwig> hey
14:20 < gotwig> little kid just closed my tabs xD
14:21 < gotwig> well, but i have to go now to a customer, see ya..
14:21 < jtomasrl> what should i use to create simple access keys?
14:22 < AAA_awright> That's a... lot... of script just for a webpage
14:31 < deoxxa> <AAA_awright> I'm very sure I'm the only person who has it right
14:31 < deoxxa> aaaaahaha
14:31 < deoxxa> wow
14:32 < yawnt> deoxxa: hey
14:32 < yawnt> you flying back tomorrow?
14:32 < deoxxa> hello
14:34 < deoxxa> day after
16:28 < jtomasrl> is there an up-to-date oauth provider for nodejs apps?
16:29 < imm> hello - does anyone know if socket.send() is the same as socket.emit()? in socket.io -? i found this post: http://stackoverflow.com/questions/11498508/socket-emit-vs-socket-send  but a good answer 
16:34 < deoxxa> imm: no, they're not the same
16:34 < deoxxa> imm: why... would they be?
16:34 < deoxxa> imm: and you do realise on the page you linked, there's two answers that say "no they're not the same"
16:34  * deoxxa sigh
16:39 < Aria> (socket is an event emitter; that's where its emit() comes from. send is native to socket, and does what it says on the tin)
16:44 < Aria> Oy. And actually, that post isn't about sockets, it's about socket.io.
16:46 < TheAceOfHearts_> so, someone asked me about learning Express, does anyone know any good tutorials to link him to get started?
16:46 < TheAceOfHearts_> I generated an app and went along from there, looking up random stuff online, but I'm wondering if anyojne has anything more solid
16:49 < deoxxa> the "getting started" stuff on expressjs.com is pretty good
16:49 < deoxxa> that's how i learnt it the first time
16:49 < deoxxa> though it's changed a lot since then
16:49 < deoxxa> (the site, not the library)
16:49 < TheAceOfHearts_> I used that too
16:50 < rump> you think its an ok practice to add user config to package.json?
16:51 < rump> under the config key
16:51 < jtomasrl> had someonw used Hapi?
17:09 < ravster> hello everyone
17:09 < Fike_> so, creating an IRC client library in node.js
17:09 < Fike_> anyone have any ideas for what I should call it?
17:09 < Fike_> node-irc is taken unfortunately :(
17:13 < FrenkyNet> Fike_: Node Relay Chat? nrc?
17:13 < FrenkyNet> although, nrc is also a dutch newspaper ...
17:13 < Fike_> haha not a good idea then :p
17:16 < klaemo> hey, does anyone know of a small eventemitter lib for the browser similar to node's event emitter module?
17:17 < yawnt> eventemitter2?
17:18 < kelonye> ember-data npm ?
17:18 < klaemo> yawnt: yeah, that is cool indeed, it just does way more than i actually need
17:18 < klaemo> https://github.com/component/emitter looks nice! TJ ftw! :)
17:30 < ravster> How do I set npm so that it loads a dependency that is in a custom folder?
17:35 < ravster> the 'dependencies' key in the package.json accepts http and git urls, does it also accept 'file://' ?
17:40 < deoxxa> ravster: you don't "set npm" to do that
17:40 < deoxxa> ravster: if you have a dependency in somewhere other than ./node_modules/name_of_thing, you require it like require("/full/path/to/thing")
17:41 < deoxxa> ravster: and you can't tell npm "hey, install this package in another location to make things more complicated, please"
17:48 < mrtrop> does anyone know if i can have a net.createServer instance listen on two ports at the same time?
17:49 < substack> mrtrop: not possible
17:49 < substack> it's easy enough to create 2 instances though
17:49 < deoxxa> ^^ this
17:49 < mrtrop> ok
17:49 < mrtrop> the project would prefer to have one server but i guess ill deal
17:50 <@mbalho> mrtrop: you can listen to both ports in one process
17:51 < nykac-> mrtrop: yes, if it in the same process
17:51 < deoxxa> mrtrop: there's very ilttle difference between having one or a hundred
17:51 < deoxxa> mrtrop: function on_connect(socket) { ... }; net.createServer(on_connect).listen(1234); net.createServer(on_connect).listen(5678);
17:52 < mrtrop> thats two servers though which isn't what i was really looking for but it appears ill have to do that
17:53 < deoxxa> well a server is essentially a listening socket
17:53 < deoxxa> not sure how you expect a single socket to listen on two ports
17:54 < deoxxa> especially when those ports could be on completely different interfaces
18:22 < whiskers75> AARGH dropbox module not working
18:22 < whiskers75> 2012-11-25T18:19:53+00:00 app[web.1]: /app/server.js:13
18:22 < whiskers75> 2012-11-25T18:19:53+00:00 app[web.1]: var dbclient = new Dropbox.Client({
18:22 < whiskers75> 2012-11-25T18:19:53+00:00 app[web.1]:                ^
18:22 < whiskers75> 2012-11-25T18:19:53+00:00 app[web.1]: TypeError: undefined is not a function
18:23 < whiskers75> ^ what on earth does that bit mean?
18:23 < clever> whiskers75: did you require Dropbox in?
18:23 < nykac-> whiskers75: Dropbox.Client doesn't exist
18:24 < whiskers75> I did var Dropbox = require('dropbox')
18:24 < deoxxa> and what is Dropbox.Client?
18:24 < deoxxa> is it undefined, by chance?
18:24 < whiskers75> According to github.com/dropbox/dropbox.js, Dropbox.Client exists
18:25 < deoxxa> and according to you testing it...
18:25 < clever> whiskers75: acording to github.com, 404
18:25 < whiskers75> var client = new Dropbox.Client({ key: "encoded-key-string|it-is-really-really-long", sandbox: true
18:25 < whiskers75> });
18:25 < gotwig> hello
18:25 < whiskers75> ^^
18:25 < deoxxa> whiskers75: is Dropbox.Client undefined?
18:25 < clever> whiskers75: the url you gave 404's
18:25 < nykac-> whiskers75: did you require dropbox?
18:25 < deoxxa> whiskers75: that's the question you need to answer
18:26 < gotwig> does someone have here expirience with jugglingDB ? https://github.com/1602/jugglingdb
18:26 < whiskers75> deoxxa: No, I do not beleive so
18:26 < whiskers75> believe*
18:26 < deoxxa> whiskers75: that sounds like guessing :)
18:26 < deoxxa> whiskers75: make it sound less like guessing by testing it
18:26 < whiskers75> https://github.com/dropbox/dropbox-js/blob/master/doc/getting_started.md
18:26 < deoxxa> TEST
18:27 < deoxxa> IT
18:27 < whiskers75> how
18:27 < Aria> console.log(Dropbox.Client) ?
18:27 < clever> console.log(Dropbox.Client);
18:27 < deoxxa> node -e 'console.log(require("dropbox").Client)'
18:28 < deoxxa> also lol
18:28 < deoxxa> "main" points to ./lib/dropbox.js
18:28 < deoxxa> but ./lib is empty
18:28 < deoxxa> that library is crap
18:28 < clever> deoxxa: its coffeescript
18:28 < deoxxa> oh haha it's coffeescript
18:29  * deoxxa immediately stops caring
18:29 < Aria> Yeah. Ewww.
18:29 < clever> deoxxa: i never trust the docs, i always go right to the source
18:29 < clever> source cant lie (enless your on the wrong ver)
18:29 < deoxxa> heh
18:29 < deoxxa> gonna submit a pull request with the readme fixed
18:33 < deoxxa> https://github.com/dropbox/dropbox-js/pull/27 stupid coffeescript users
18:34 < chrisbislr> oh my god, so glad you made that fix
18:36 < deoxxa> </3 coffeeshit
18:37 < gotwig> deoxxa: >.<
18:40 < whiskers75> deoxxa: +1 pull
18:40 < _numbers> anyone using coffeescript to build back-end node apps like coffeescript + express?
18:41 < deoxxa> plenty of people
18:41 < whiskers75> deoxxa: ahem.
18:41 < whiskers75> > require("dropbox").Client
18:41 < whiskers75> { [Function: DropboxClient] ERROR: 0, RESET: 1, REQUEST: 2, AUTHORIZED: 3, DONE: 4, SIGNED_OFF: 5 }
18:41 < whiskers75> > 
18:41 < whiskers75> IT
18:41 < whiskers75> EXISTS
18:41 < whiskers75> OK
18:41 < deoxxa> whiskers75: good news! now you get to figure out why you're not seeing that in your application
18:42 < deoxxa> 1) paste code 2) ??? 3) profit
18:42 < whiskers75> deoxxa: Oh great.
18:43 < whiskers75> hm
18:43 < whiskers75> I don't get that error locally
18:43 < whiskers75> STUPID HEROKU
18:43 < deoxxa> might be the node version is super old
18:43 < deoxxa> so it's pulling an old version of the dropbox library
18:43 < whiskers75>   "engines": {
18:43 < whiskers75>     "node": "0.6"
18:44 < whiskers75> ^
18:44 < James12> sup
18:44 < whiskers75> 0.6 != old
18:44 < James12> what's new with you guys? any cool projects lately
18:44 < deoxxa> well these dropbox guys seem to be forward-thinking men of stature, so that might be old enough to break it
18:44 < Aria> James12: Distributed hashtable based comment platform?
18:44 < James12> cool
18:44 < James12> link
18:44 < whiskers75> I have node 0.8 on my local testing area
18:44 < deoxxa> DHT ftw
18:45 < Ralt_> 0.6 *is* old
18:45 < whiskers75> let's see.. node 0.8..
18:45  * whiskers75 commits
18:45 < deoxxa> Ralt_: i know systems still running in 0.2 ;)
18:45 < whiskers75>   Error: npm doesn't work with node v0.8.14 <<< ????
18:46 < Ralt_> I know systems running on cobol, doesn't mean it isn't old :)
18:46 < whiskers75> Maybe modify the buildpack at http://github.com/whiskers75/heroku-buildpack-nodejs?
18:46 < deoxxa> heh
18:46 < deoxxa> whiskers75: specify your npm version too
18:47 < deoxxa> whiskers75: engines: {npm: "~1.1.0"}
18:47 < deoxxa> or something
18:47 < gotwig> I get memory allocation errors with npm, self compiled nodeJS, 2 days ago from git
18:47 < whiskers75> engine_defaults["npm"]="1.0.106" - buildpack. Ah. That *might* explain it.
18:47 < gotwig> I use it behind a proxy, with quotas
18:48  * whiskers75 : git add * && git commit -m 'Fixed NPM error' && git push origin master
18:48 < _numbers> anyone know of a full-stack framework that combines coffeescript on front and back ends, plus slim + handlebars for templating, and activerecordjs for orm ?
18:48 < whiskers75> buildpack updating
18:48 < _numbers> ideally sinatra-inspired like express-coffee
18:48 < whiskers75> IF c9 will let me
18:48 < deoxxa> _numbers: sure, it's called ruby on rails
18:49 < _numbers> ya but i'm trying to go all-js
18:49 < Aria> _numbers: Why a full-stack framework? I'd use slim + handlebars + activerecordjs + express for that.
18:49 < Aria> _numbers: And probably grunt (perhaps with bbb) for builds.
18:49 < gotwig> deoxxa: talk spread FUD ...
18:51 < deoxxa> _numbers: if you're switching to JavaScript, put down the crutches son! coffeescript will only make your life harder, what with the other kids in the playground making fun of you and such!
18:51 < whiskers75> la la la la committing la la la
18:51 < deoxxa> gotwig: wat
18:51 < whiskers75> master 6d8efd9
18:51 < gotwig> deoxxa: :O calm down
18:51 < whiskers75> slow heroku
18:51 < deoxxa> gotwig: no you calm down!
18:52 < whiskers75> YAY npm works
18:52 < dreampilot> troll in the house
18:52 < whiskers75> [ws v0.4.23] Attempting to compile blazing fast native extensions never works.
18:52 < _numbers> i learned oo js first then switched to coffeescript after. not crutches. i haven't run into anything that can't be done with it
18:52 < gotwig> deoxxa: :O You clean it up son..
18:52 < _numbers> i like that the syntax is similar to ruby
18:52 < deoxxa> stack traces with meaningful line numbers? :D
18:53 < deoxxa> variable shadowing? :D
18:53 < deoxxa> both of those are hard/impossible in coffeescript
18:53 < imm> deoxxa is a troll
18:53 < _numbers> actually i have run into issues with variable shadowing but i figured it out. its not too hard
18:53 < deoxxa> imm: how so? because i don't like coffeescript and have reasons that i can express quickly?
18:54 < whiskers75> failed
18:54 < gotwig> imm: +1
18:54 < imm> some people are motivated by confilct
18:54 < whiskers75> imm: -1
18:54 < deoxxa> imm: seems like the whole "having reasons" thing eliminates the troll factor and just makes me a general hater of CS
18:54 < gotwig> whiskers75: -¹
18:54 < imm> lol
18:54 < whiskers75> why does this not work???
18:54 < whiskers75> AAAAAAA
18:54 < Aria> whiskers75: Define 'not work'
18:55 < imm> exactly Aria
18:55 < whiskers75> Aria: Dropbox screwed up their module! >:(
18:55 < whiskers75> 2012-11-25T18:50:45+00:00 app[web.1]: /app/node_modules/dropbox/lib/dropbox.js:1024
18:55 < whiskers75> 2012-11-25T18:50:45+00:00 app[web.1]:              ^
18:55 < whiskers75> 2012-11-25T18:50:45+00:00 app[web.1]: 
18:55 < gotwig> I am so sorry..
18:55 < whiskers75> 2012-11-25T18:50:45+00:00 app[web.1]:       return window.location.href;
18:55 < whiskers75> 2012-11-25T18:50:45+00:00 app[web.1]:     at Module._compile (module.js:449:26)
18:55 < whiskers75> 2012-11-25T18:50:45+00:00 app[web.1]: ReferenceError: window is not defined
18:55 < Aria> whiskers75: paste somewhere else, please!
18:56 < Aria> Oh fun! 
18:56  * whiskers75 creeps away
18:56 < whiskers75> sorry...
18:56 < Gabriel403> https://pastee.org/
18:56 < _numbers> do we have a node.js/javascript implementation of paperclip/carrierwave/fog yet?
18:56 < Aria> So it has a browser dependency it didn't declare. Sigh.
18:56 < deoxxa> whiskers75? whaaaat? bad coffeescript code? :o
18:56 < Gabriel403> it's good for your health
18:56 < whiskers75> deoxxa: Yeah. >:(
18:57 < _numbers> basically a file upload + image manipulation + upload to aws s3 cdn library
18:57 < gotwig> deoxxa: why shouldnt I learn cofeescript
18:57 < whiskers75> deoxxa: We need someone to fix that.
18:57 < deoxxa> gotwig: feel free to learn coffeescript
18:57 < deoxxa> gotwig: i just don't think it's a good idea to use it in production
18:58 < gotwig> deoxxa: continue 
18:58 < deoxxa> gotwig: the only person i know using coffeescript in production has had to artificially ban using parts of it because it sufficiently complicated development time in his team. namely, he's had to ban using the class syntax.
18:59 < Aria> Huh. I know a fair number, but they /do/ have problems getting outside the coffeescript garden. People who know JS well but don't know CS need not apply, essentially.
18:59 < Aria> It limits their pool of developers a lot.
18:59 < whiskers75> OK. How do I fix Dropbox's *rasp* code?
18:59 < Gabriel403> _numbers: knox maybe?
18:59 < deoxxa> gotwig: i've read the underlying code and it's really quite a mess - i'd be really worried about relying on it in any capacity outside "well that's interesting"
19:00  * whiskers75 knows *NOTHING* about CoffeeScript
19:00 < deoxxa> gotwig: for example, they had 3 separate parsers at one point. 3. why, i don't know. they were all used for separate parts of the compilation process, as far as i could tell.
19:00 < _numbers> Gabriel403: thx. ya looks like i'll have to combine 3 dif libs to do the same thing but no biggie. that looks like one party
19:00 < _numbers> part*
19:00 < _numbers> deoxxa: those are personal problems with the team management and inability to coordinate/cooperate. not a technology problem
19:01 < deoxxa> _numbers: my first point? possibly
19:01 < deoxxa> _numbers: but the tech is just plain bad as well
19:02 < deoxxa> you know it's bad when people are willing to -pay- for it to be rewritten: http://www.kickstarter.com/projects/michaelficarra/make-a-better-coffeescript-compiler
19:03 < _numbers> anything that saves me a few keystrokes extends the life of my career as i am less likely to get carpel tunnel or repetitive stress injuries. thats why i like coffeescript, slim, sass, etc.
19:03 < nykac-> _numbers: a dvorak keyboard would help
19:04 < deoxxa> you'd probably see better improvement by taking vitamin supplements
19:04 < denysonique> CoffeeScript++
19:05 < _numbers> nykac-: yes have tried this but too many devices still use qwerty. something about muscle memory seems to make it impossible to reach peak proficiency when you have to switch between them
19:05 < denysonique> only those who never coded in a real lang like Ruby/Python won't understand it
19:05 < denysonique> ex phpers
19:05 < _numbers> ya the masochists
19:05 < deoxxa> denysonique: 5 stars, would lol again
19:05 < nykac-> "... real lang like Ruby/Python ..."
19:05 < whiskers75> There.
19:05 < whiskers75> return window.blah.blah => return 'You messed this up'
19:07 < whiskers75> Guest37707 forgot to identify.
19:22 < MI6> joyent/node: isaacs v0.8.15-release * 3742a3c : v0.8.15 wip - http://git.io/8pPz3w
19:22 -!- Topic for #node.js: node.js is thankful for electricity and computer nerds
19:22 -!- Topic set by mbalho [~max@ve.5bpbxlsy.vesrv.com] [Thu Nov 22 20:12:41 2012]
19:24 -!- isaacs changed the topic of #Node.js to: Node.js - JavaScript Everywhere.  This is a friendly channel.  Take your aggression elsewhere. http://blog.izs.me/post/30036893703/policy-on-trolling
19:25 < EvilJordan> What up, everyone
19:25  * isaacs waves
19:25 < Aria> Moin!
19:25 < EvilJordan> I updated my Joyent node smartmachine today which allowed me to run the latest node server but also meant i had to dump db-mysql and am now using node-mysql.
19:25 < EvilJordan> I'm seeing a strange problem where-in my broadcast messages to specific namespaces are not being received by the client.
19:26 < nykac-> it would be cool if there was a libnode so we could embeed nodejs easier
19:26 < EvilJordan> However, individual messages to the client specified by socket are received just find.
19:26 < EvilJordan> this is the line that no longer works: io.of('/'+namespace).emit('plot', { myData : "123" });
19:26 < EvilJordan> namespace is populating correctly. I can't seem to find a way to debug the emit process to see if something is going wrong, but node seems to think things are ok.
19:26 < Aria> nykac-: There's some work done toward that, incomplete. Send pull requests!
19:26 < EvilJordan> Any ideas what I should do?
19:26 < nykac-> Aria: what repo?
19:26 < Aria> EvilJordan: Is this socket.io?
19:26 < Aria> nykac-: joyent/node
19:27 < EvilJordan> Aria: ues
19:27 < EvilJordan> Aria: er, yes
19:27 < Aria> EvilJordan: Okay, good to know. That wasn't obvious from your question. What's this got to do with MySQL?
19:28 < EvilJordan> Aria: probably nothing. Just worth mentioning when I upgraded from 0.4 (or something like that) to 0.8.11, db-mysql no longer worked so I req-wrote the db layer with node-mysql. Can't imagine the issue is related, but that was the only major change.
19:29 < nykac-> EvilJordan: 0.4 is pretty old... many things that worked at that time don't work with > 0.7.x
19:29 < mscdex> nykac-: you can embed... but you have to re-add that feature
19:30 < mscdex> nykac-: i did it awhile back
19:30 < mscdex> nykac-: fwiw: https://github.com/mscdex/node/tree/compile-as-lib
19:31 < EvilJordan> Aria: understood. From what I can tell, all functions are working correctly I can emit to a specific socket and back just fine, but the namespace emit to all sockets with the same name does nothing at all. No errors or warnings in the debug log either
19:31 < mscdex> there's just 1 commit there
19:31 < mscdex> i think it should apply cleanly to 0.8.14
19:31 < Aria> EvilJordan: Latest socket.io?
19:31 < Aria> (might just have to attach the debugger and trace through it -- node-inspector time!)
19:31 < EvilJordan> as installed via npm, yes
19:31 < EvilJordan> Aria: as installed via npm, yes
19:32  * Aria nods.
19:32 < Aria> Debugger time! Or time to read socket.io and see if you can spot what's going on
19:33 < EvilJordan> Aria: Been all over the docs, tried sper-stripped down versions of code... stuck. I'm not familiar with the debugging process beyond the node output log. Can you offer some guidance?
19:34 < Aria> Install and fire up node-inspector. Put a breakpoint on the emit function. Step through it and watch what happens.
19:34 < EvilJordan> awesome, looking for it now
19:34 < Aria> Add your own log statements if not. See if you can spot where the message vanishes.
19:34 < EvilJordan> done the latter
19:34 < EvilJordan> i need insight in to what the emit event sees
19:35 < Aria> 'what it sees'?
19:35 < EvilJordan> yes. does it see a way out of the sever to its destination, is data malformed, scared of itself by looking in a mirror, etc
19:52 < themiddlemanz> Hello!  I'm looking for docs/tutorial on inheriting from Stream
19:53 < EvilJordan> Aria: Thanks. got the inspector running... trying to step through and see what's gone wrong with the emit process. Seems like it makes it all the way through without error, so this is going to take a lot of digging. very strange.
19:53 < Aria> Have fun! Wish I could help more, but I'm outta here fo ra bit
19:55 < _numbers> is there any different between Jade and Slim templating languages? they appear the same
20:11 < ashnur> to me, all template languages appear to be the same
20:15 < mscdex> themiddlemanz: inheriting from Stream basically just gives you pipe()
20:17 < jtm> How does someone organize code that becomes so nested of events inside of events?
20:17 < jtm> Closures inside of closures etc
20:17 < jtm> I have tons of anonymous (and sometimes non-anonymous) functions since I need things to complete before doing other things
20:18 < jtm> Am I doing something wrong here?
20:18 < jtm> The nesting of { } is becoming insane
20:18 < themiddlemanz> mscdex: ah ok
20:19 < themiddlemanz> jtm: check out async, https://github.com/caolan/async
20:20 < jtm> themiddlemanz Thanks!
20:26 < jtm> themiddlemanz Do you know if this works on non-blocking functions?
20:26 < jtm> themiddlemanz Like querying redis or postgres?
20:27 < pkircher> anyone know whats happend with 0.8.2 release in the Git repo ? 
20:28 < deoxxa> jtm: http://callbackhell.com/
20:28 < jtm> deoxxa This looks JUST like my code
20:29 < jtm> the first example
20:29 < deoxxa> heh
20:29 < jtm> Except mine is deeper
20:29 < deoxxa> we've all been there :P
20:29 < jtm> Shoot me please
20:29 < jtm> I knew this wasn't LISP
20:29 < deoxxa> it takes a few goes to get it right
20:29  * nicholasf tweeting that URL
20:30 < deoxxa> jtm: if you have a really basic kind of "do this, then this, then this" thing going on, caolan/async can be great for keeping it in check
20:30 < deoxxa> jtm: if it's just general "ahhhh callbacks everywhere", nothing's going to magic it away for you unfortunately :(
20:31 < nicholasf> deoxxa: yeh, there are calls which have to be inside each other, even if it's a call to another function. I think of it as cascading callbacks rather than nested (where you get 4 to 5 lines of code, then another nest, etc)
20:32 < deoxxa> yeah
20:32 < jtm> deoxxa I think mine is more like  do this, then do this (if this is true then do this, then do this ...., else do this)
20:32 < deoxxa> you can kind of pick out a visual pattern for things that can be pushed away into that async library
20:32 < jtm> you can see nesting in that already
20:32 < deoxxa> if your code looks like stairs, you've got a good candidate
20:33 < nicholasf> yup
20:33 < TheAceOfHearts_> deoxxa: Amateurs. I've done worse. :reads:
20:33 < nicholasf> if they are just one liner calls then it's ok, I think
20:33 < deoxxa> yeah
20:33 < nicholasf> but it's still a little problematic when you get *loads* of those inner calls
20:33 < deoxxa> sometimes it makes the most sense to just have a bunch of nested stuff
20:33 < deoxxa> i generally don't refactor until i'm at least like 5 deep
20:34 < deoxxa> but then i stop and really think about it
20:34 < nicholasf> well, this is one of the things about js, I think it takes more discipline to write elegant code than in other langs because of this
20:34 < deoxxa> JIT refactoring
20:34 < nicholasf> once you refactor a blocky set of stairs then it's immensely satisfying and you see the elegance
20:34 < deoxxa> lel
20:34 < nicholasf> but I think a lot of coders dont get to that stage
20:35 < jtm> nicholasf the stairs or refactoring?
20:35 < nicholasf> the refactoring of the stairs
20:35 < TheAceOfHearts_> I'd say refactoring lol
20:35 < nicholasf> haha, yeh, just woke up
20:36 < jtm> lol
20:38 < jtm> Lets see what refactoring stairs brings 500+ lines of code down to :)
20:39 < Antaranian> hi ladies
20:41 < Antaranian> I'm trying to use passportjs with local strategy 
20:42 < Antaranian> can't find any methods to force to create a session without actual login, can you please point any directions ?
20:43 < TheAceOfHearts_> I don't understand your issue
20:45 < Antaranian> need something like passport.createSession(req, user);
20:46 < TheAceOfHearts_> I tried ussing passport about a week back, but since I only wanted local (using my own db), I found doing sessions myself was just easier
20:46 < TheAceOfHearts_> Are you using express?
20:46 < Antaranian> yes, but here I need 3rd party services auth too
20:46 < TheAceOfHearts_> ah
20:47 < TheAceOfHearts_> sorry, dunno how to help you. I played around with Passportjs for a while, but it seemed overly complicated for what I wanted.
20:48 < Antaranian> it's ok, thank you anyway 
20:54 < Kakera> noob question: how does a TCP client detect that the server has died?
21:01 < deoxxa> http://nodejs.org/docs/latest/api/all.html#all_repl
21:01 < deoxxa> am i retarded, or is there no way to set the environment for a repl?
21:01 < deoxxa> oh, .context
21:04 < Leeol> Question, is there an example of what a project might look like if it were to organize it's site components in a separated way, such as each component (blog/forum/etc) are individual express() apps? (As TJ mentions he does, here: https://github.com/visionmedia/express/pull/1186#issuecomment-6497195)
21:11 < deoxxa> gf3_: what
21:11 < deoxxa> gf3_: why is irc-js so complex in its const/let/etc usage
21:11 < Leeol> Is the way he does it by having one server app, and than that app does `app.use(subapp)` ?
21:11 < deoxxa> gf3_: like, it doesn't actually work
21:13 < vicapow> checkout this thing i made to search nodes modules. (not finished yet so I only have a few modules in there atm.)
21:13 < vicapow> http://nodejs.clickb.in/mongodb
21:40 < _numbers> is anyone aware of a sidekiq (multithreaded delayed jobs) port to js? i see some resque ports
21:48 < polyrhythmic> is anyone aware of a script to keep node-inspector running with upstart or otherwise?
21:48 < polyrhythmic> before I go reinventing a wheel
21:54 < _numbers> seems like nodejs could benefit of a port of the ruby guard gem to javascript
21:55 < chilts> _numbers: what does guard do?
21:57 < _numbers> it watches for file changes and executes commands. you create a Guardfile which uses regex to match paths that have changed with functions that do something
21:58 < _numbers> i see a whole bunch of js libs for watching files and doing specific things, like node-dev restarts the node server. but guard abstracts it to a much simpler general purpose utility
22:00 < _numbers> does anyone know of an implementation of slim for templating in js? its kind of a blend between jade and haml
22:03 < polyrhythmic> _numbers: https://github.com/jfirebaugh/skim ?
22:03 < polyrhythmic> there are existing libs to keep a process running, I just would have guessed that someone would have used it for node-inspector by now, since node-inspector dies often
22:05 < _numbers> i cant figure out what skim is but i dont see any .js implementation. mostly .rb files
22:17 < AAA_awright> deoxxa: Problem?
22:24 < _numbers> is there any implementation like activerecord for nodejs? perhaps that interfaces on the back-end directly to redis or mongodb or mysql? i see activerecordjs.org but they expect something like a restful [rails] server api to be inbetween
22:26 < chovy> _numbers: mongoose probably the closest you'll get for mongo
22:28 < _numbers> true i guess the nosql solutions aren't directly compatible with the activerecord syntax
22:28 < _numbers> i gues node-orm could work for sql-based storage
22:28 < eazel7> woooha lots of users here! nice
22:29 < eazel7> alternatives to passport.js and everyauth? somehow passport isn't working for my app
22:29 < mscdex> _numbers: sequelize is a popular mysql ORM
22:32 < _numbers> i think persistence.js is probably closer to what i am looking for
22:34 < _numbers> i guess activerecordjs.org lets me define a restful api and then use a mix of data storage, which might be fine for front-end. and then persistence.js is probably what i would use on back-end
22:35 < _numbers> then could also use mongoose, connect-redis on backend
22:37 < _numbers> i'm probably going to have to build a port of guard for node because i don't think i'm totally happy with any of the sprockets/asset-pipeline implementations for nodejs yet. most of them seem to only handle a few types of assets, and i still rely on tools like compass to provide sass and css image spriting
22:40 < _numbers> or i guess if i've got ruby installed i can just use guard gem to: restart node, compile , aggregate, and minify coffeescript to js and sass to css, aggregate images into css sprites, append fingerprint suffix to the compiled files in production, gzip them, etc.
22:46 < polyrhythmic> _numbers: I use SpineJS for clientside models, it has a backend adapter that works great with nosql stores like mongo
22:47 < polyrhythmic> _numbers: and there is Hem which is related to Spine, it will compile your CSS and JS and CoffeeScript and stitch it together for production
22:47 < polyrhythmic> I've been very happy with all of the above
22:48 < _numbers> ah cool thx. ya those seem like potentially good candidates
22:48 < _numbers> have you ever tried Joosy.ws framework? i like the concept of resources instead of models
22:49 < _numbers> i'm trying to build a state-of-the-art single page application architecture; eliminating double-trees as much as possible between front and back end
22:49 < polyrhythmic> no, I haven't heard of Joosy
22:49 < _numbers> seems like javascript is ready for this today. a lot of the libs are there now
22:50 < polyrhythmic> I have built multiple single-page apps with Spine though, I've also adapted it for mobile.  It has a relations lib, and the backend practically takes care of itself
22:50 < polyrhythmic> *for Titanium Mobile
22:51 < polyrhythmic> I think JS is more than ready :)
22:53 < _numbers> ah yep thats cool.  in the mobile world, i hope native code and cross-platform compilers are replaced with html5 browser apps. js handles them all :)
22:54 < _numbers> i c titanium has gotten better since i last looked at it too
22:56 <@konobi> substack: nice job on tape
22:57 < TehShrike> <3 nodezoo
22:57 < chilts> yeah, Nodezoo is nice :D
22:57 < substack> konobi: I just need my node-tap tests to run in browsers
22:58 < polyrhythmic> _numbers: Titanium has made MASSIVE improvements.  I'm stoked about FirefoxOS too, but for the present Titanium is as close as it gets to native HTML5 and JS
22:58 <@konobi> i have a fairly nice hack to make the stackstrace show from where the test was called
23:00 < rump> im having aync problemz
23:01 < rump> the insanity!
23:01 < rump> guess its time to cheat with flow control lib
23:02 < polyrhythmic> iced coffeescript is really nice for flow control
23:03 < deoxxa> also it's a great way to show future employers that you make spectacularly bad choices in what technologies you learn! :D
23:03 < TehShrike> >_<
23:03 < rump> haha
23:04 < TehShrike> polyrhythmic set up the trollbait, and deoxxa tees off with a perfect swing!
23:04 < TehShrike> rump: you're all up in http://callbackhell.com/ ?
23:04 < deoxxa> TehShrike: it's out of the park right now
23:04 < rump> TehShrike: ah i skimmed that forever ago but now its time for a proper read.  good call :)
23:04 < polyrhythmic> lol deoxxa except for how I'm happily employed using all of this, sure
23:04 < TehShrike> deoxxa: I didn't even bother chasing it!
23:04 <@mbalho> i need to add a section at the bottom of callbackhell about when it is appropriate to use a flow control lib
23:04 < deoxxa> polyrhythmic: equal opportunity workplace - nice
23:05 <@mbalho> if anyone wants to take a stab at a first version of that section feel free to pull req and i'll edit it in
23:05 < deoxxa> sorry, what's the term these days
23:05 < deoxxa> "mixed abilities"
23:05 < deoxxa> really good though
23:06 < TehShrike>  can believe there are times when a flow control library is a good idea, but I haven't felt tempted to use one in a while
23:06 < polyrhythmic> nice try deoxxa :)
23:06 < ljharb> i'm trying to install node on a centos box - i installed python 2.7, and ./configure worked, but make returns "error 2" - something about "cc1: error: unrecognized command line option "-Wno-old-style-declaration"" it probably has something to do with openssl. anyone have any tips?
23:06 < polyrhythmic> ljharb: centos 5 or 6 ?
23:06 < deoxxa> TehShrike: yeah, i used to reach for async or underscore a lot more often than i do now
23:07 < polyrhythmic> everyone uses flow control they just all call it something different
23:07 < TehShrike> polyrhythmic: "JavaScript" :-)
23:07 < ljharb> polyrhythmic: how do i check that? :-)
23:07 < deoxxa> polyrhythmic: oh of course, but once you get familiar with how some of the core concepts in node (and js in general) work, specific libraries become less and less relevant
23:08 < rump> well i rather not use a lib
23:08 < deoxxa> TehShrike: i found moving a lot of what i do to streams helped immensely to simplify most of my code that would previously require some kind of flow control library
23:08 < rump> so whats the secret.. say i have 5 functions i want to run in a series and i think its ugly to call the next from inside the previous
23:08 < TehShrike> deoxxa: that makes a lot of sense.
23:08 < ljharb> rump: you'd rather resolve solved problems? that seems silly.
23:08 < rump> i want to put it all together :)
23:08 < rump> ljharb: simplify
23:08 < ljharb> rump: async.series
23:08 < polyrhythmic> streams don't exist in most JS engines... like I said, even you use flow control :)
23:09 < ljharb> rump: "simplify" means write less code, not "use less libraries"
23:09 < rump> means both
23:09 < polyrhythmic> not worth arguing about really
23:09 < ljharb> lol true
23:09 < ljharb> polyrhythmic: how do i check my centos version?
23:09 < TehShrike> rump: personally, I've just gotten comfortable with the tactics mentioned on callbackhell.com to the point where I don't run into those sorts of situations that often
23:09 < rump> if i can add 5 lines, instead of add a lib with all its many codes and complexities 
23:09 < TehShrike> Or when I do, they end up not looking really ugly
23:10 < polyrhythmic> ljharb: cat /etc/redhat-release
23:10 < rump> and dependencies  
23:10 < ljharb> polyrhythmic: 5.8
23:10 < deoxxa> polyrhythmic: sure they do - streams are just event emitters with a couple of fancy functions
23:11 < deoxxa> polyrhythmic: and event emitters are just callback registries
23:11 < ljharb> rump: if it's really solvable in 5 lines, than why did someone make a library in the first place? there's likely more going on than that, or the library is doing more than you need - in which case it's prolly not the right library to use.
23:11 < deoxxa> polyrhythmic: so there's nothing stopping you from using streams for stuff in the browser
23:11 < polyrhythmic> thanks for the agreement deoxxa :)
23:11 < TehShrike> "things are just stuff, but different!"
23:11 < rump> ohh maybe i can use events
23:11 < rump> ljharb: i have it working with 5 lines but its ugly to me
23:11 < polyrhythmic> ljharb: I just compiled node.js for 5.8 last month... I don't think I saw that error though
23:11 < rump> and id like to be able to call each function without a series hard coded into it
23:12 < TehShrike> Barely related: smokesignals is one of my favorite client-side libraries
23:12 < polyrhythmic> ljharb: here is the guide I followed http://www.robeesworld.com/blog/31/installing_node_js_0_8_under_centos_5_8
23:12 < ljharb> ok thanks
23:12 < polyrhythmic> np :)
23:18 < polyrhythmic> ljharb: if you run into more trouble getting it running just ping me
23:18 < ljharb> will do, thanks
23:19 < rump> haha dang async is pretty sexy
23:19 < rump> 1 liner
23:20 < rump>   async.series([cache(), compress(), serve()]);
23:20 < rump> is this a horrible practice
23:20 < polyrhythmic> no, flow control is very useful
23:20 < polyrhythmic> it's built into many languages already
23:20 < rump> why not build this in to node... seems like serious issue
23:20 < polyrhythmic> node took the position of using eventemitter
23:20 < rump> am i supposed to pass e around to every one or something?
23:21 < rump> oh thats an idea... why dont i just emit an event like cacheReady
23:21 < ljharb> rump: nope, that's why i recommended it :-)
23:21 < ljharb> rump: you could do that - emit "done1", listen to it, emit "done2", listen to it, etc
23:21 < ljharb> but that's a lot of boilerplate when async does it in one line
23:21 < polyrhythmic> events and async libs have different uses. I use both depending on the applications
23:23 < rump> hard to pass stuff around with events i guess
23:24 < polyrhythmic> events are great for repeated actions
23:24 < polyrhythmic> flow control is more for visualizing the problem in a clear way
23:24 < ljharb> rump: also read "you're missing the point of promises" https://gist.github.com/3889970
23:24 < rump> ljharb: im not seeing in the doc... am i supposed to be be passing err and a callback to each of these in the series?
23:25 < polyrhythmic> that's a good writeup ljharb 
23:25 < rump> i was reading about promises and got very excited
23:25 < rump> then at the bottom of the huge article i read it got nixed in 0.2 haha
23:25 < polyrhythmic> promises are good but they can be verbose
23:26 < polyrhythmic> there are multiple libs that implement the commonjs promises standard though
23:26 < ljharb> exactly
23:26 < ljharb> rump: just because it's not in node proper doesn't mean you can't or shouldn't use it
23:26 < rump> i try and follow conventions though
23:26 < ljharb> rump: yes, node convention is to always pass "err" and "callback"
23:26 < rump> im a newb and hobbist so whatevers popular!
23:27 < ljharb> between eventemitter, promises, and async, you'd got 3 popular choices that will at times each be the best solution.
23:28 < ljharb> polyrhythmic: this seems to be working btw - my python 2.7 instructions weren't helpful, but these python26 ones seem to be doing the trick.
23:28 < polyrhythmic> awesome ljharb 
23:31 < euoia> Hello #Node.js - can anyone tell me why my attempted use of the facade pattern for logging fails? https://gist.github.com/4145864 Is there a better way to to this? My goal is to be able to change the logging engine in my app easily
23:34 < ljharb> euoia: exports.info = bunyan.info.bind(bunyan)
23:34 < euoia> ljharb: it works! I have never seen that before
23:35 < ljharb> euoia: read up about "this" in javascript
23:35 < _numbers> anyone here using ember.js? any reason not to use nodejs for back-end api instead of rails?
23:36 < euoia> ljharb: ah so that's why it was failing
23:36 < Disil> Any idea how to fix this? I'm new to npm. http://pastebin.com/Wdeus11J
23:36 < euoia> ljharb: out of interest, do you think there is any sense to this approach?
23:39 < ljharb> Disil: what python version do you have installed? you need 2.6 or 2.7
23:39 < Disil> C:\Program Files\nodejs>python -v
23:39 < Disil> 'python' is not recognized as an internal or external command, operable program or batch file.
23:39 < ljharb> euoia: nope, because you'll likely never change your logging engine, and a global "replace bunyan.info with otherLogger.info" isn't difficult.
23:39 < Disil> well...
23:39 < ljharb> Disil: oh you're on windows, i have no idea then
23:40  * Disil bashes head into desk
23:40 < Disil> I'll try it on my VPS then
23:41 < ljharb> you're installing steam, the game software?
23:41 < ljharb> they have a windows installer, if so.
23:41 < euoia> ljharb: Thanks
23:41 < Disil> It's a node.js library
23:41 < ljharb> ah
23:41 < Disil> to interact with it
23:42 < EvilJordan> hey guys. I need some hopefully simple help with sockets.io. I've built a dead-simple test case and while it used to work before an upgrade, to the latest node/sockets npm, now it does not.
23:42 < ljharb> Disil: i'm sure there's *some*body in here that can help you with node on windows
23:42 < Disil> I think I saw somewhere that Ursa had trouble with Windows
23:44 < EvilJordan> This never fires: io.sockets.on('connection', function (socket) { io.of('/ns').emit('plot', { news: 'item' }); io.sockets.send('plot', {asdasd : 'asd' }); });
23:44 < Disil> Exception: build; not found (cwd: C:\Program Files\nodejs\node_modules\ursa) whi
23:44 < Disil> le trying to load build;
23:44 < Disil> pretty sure that's my biggest issue
23:45 < ljharb> sounds like ursa doesn't handle windows
23:45 < EvilJordan> that's from the server, obviously. the client look like: var io = io.connect('http://node.server/ns'); io.on('connect', function (){ console.log('successfully established a working connection'); }); io.on('plot', function(data) { console.log("data: " + data); });
23:45 < ljharb> there's probably a pull request on the repo
23:45 < ljharb> or an issue
23:45 < EvilJordan> the client does generate a "successfully established connection" message, but no other dumps when "plot" is sent from the server
23:46 < Disil> Yeah, doesn't seem to support Windows.
--- Log closed Mon Nov 26 00:00:14 2012
