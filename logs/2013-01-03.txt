--- Log opened Thu Jan 03 00:00:14 2013
00:00 < jesse___>  $ nodejs seems to be working, but it's supposed to be $node
00:00 < zomg> I'm not entirely sure I understand what you mean by that
00:01 < spion> so... what do you guys use for browser testing, *except* selenium? by browser testing I mean both single-page and multi-page scenarios (not unit-testing). zombiejs, casperjs, perhaps another phantomjs-based solution?
00:01 <@Nexxy> jesse___, I'd recommend just compiling from source after removing the 'node' package you installed via apt
00:01 < jesse___> I'll give that a shot
00:01 < valterguy> jesse___: https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager 
00:02 < zomg> The version on Ubuntu 14.04 at least is 0.6 so I'm not sure if it's a good idea to install node from apt =)
00:02 < zomg> err Ubuntu 12.04
00:02 < janmower> who maintains those packages?
00:02 < jesse___> Well I followed those steps originally
00:03 < othiym23> jesse___: Debian had an interminable argument over who gets to use the name node, and node.js lost
00:04 < zomg> the binary is still called 'node' though isn't it
00:04 < zomg> at least on Ubuntu it is
00:04 < othiym23> so unlike every other distro known to humankind, if you use the blessed package, the binary is called nodejs
00:04 < othiym23> zomg: sadly, no
00:04 < janmower> 0.6.12 is in the ubuntu universe repo
00:04 < jesse___> I think removing and adding again fixed it
00:04 < othiym23> one of many reasons to use either a prebuilt binary from Joyent or build from source
00:04 < zomg> othiym23: oh wow, that's silly
00:04 < othiym23> zomg: it was a really long, unpleasant policy argument
00:05 < janmower> who maintains that nodejs ubuntu package?
00:05 < zomg> on Ubuntu the package is also called 'nodejs' but the binary is still 'node' :P
00:05 < tjfontaine> isn't it modifiable under update-alternatives?
00:05 < othiym23> basically neither the ham radio package nor the the evented JavaScript environment had an overwhelming claim to the name, but the ham radio binary came first
00:05 < spion> that really makes you wonder what to put in the shebang huh
00:05 < valterguy> janmower: https://launchpad.net/~chris-lea/+archive/node.js 
00:06 < othiym23> spion: I'd just make sure the ham radio package isn't installed and symlink /usr/bin/nodejs to /usr/bin/node
00:06 < othiym23> valterguy: are Chris's PPA packages the same as used in unverse
00:06 < spion> othiym23, I mean, when distributing stuff to others
00:06 < othiym23> pretty sure they're not, or universe would have a newer version than 0.6.12
00:06 < janmower> yea this ppa is maintained
00:06 < tnorris> tjfontaine: have any idea how I could cast a Local<Array> as a double[]? (not trying to jump in at the deep end or anything)
00:07 < jesse___> I don't know how to symlink yet
00:07 < janmower> 0.8.16 is available
00:07 < othiym23> spion: yeah, I'd just assume that it's /usr/bin/env node and warn Debian users their distro is broken
00:07 < valterguy> othiym23: afaik they are the official ones, because they are linked to from the wiki page which is referenced from the node.js's homepage.
00:07 < othiym23> which Debian developers know, but maybe users don't ;)
00:07 < spion> makes sense
00:08 < othiym23> valterguy: they may be the official packages from the Node side of things, but not Ubuntu
00:08 < valterguy> othiym23: no, they are not in the "regular" Ubuntu repo
00:08 < valterguy> repos*
00:09 < othiym23> jesse___: you want http://packages.debian.org/sid/nodejs-legacy, which will create the symlink for you
00:09 < othiym23> legacy my ass
00:09 <@Nexxy> lol
00:10 < valterguy> othiym23: 0.6.19, it says
00:10 < othiym23> I read every message in all five of the months-long threads dealing with this
00:10 < othiym23> they were ALL stupid
00:10 < othiym23> yeah, but that's what Debian offers
00:10 < othiym23> that's in unstable, too
00:10 < tjfontaine> tnorris: I don't know if there's a faster way than iterating the array and static_cast'ing the individual values
00:10 < othiym23> clearly the maintainer is sick of dealing with it
00:11 < othiym23> everyone would be way better off locally installing nave or nvm or n or whatever and doing the work necessary to build Node from source
00:11 < tnorris> tjfontaine: that's what I was afraid of. having to work with a numeric array as an Object and using ->Get(i) is massively slow. thanks.
00:11 < janmower> building nodejs is not an option on my prod systems
00:11 < valterguy> othiym23: why not install from the Ubuntu PPA?
00:12 < othiym23> or just switching to Ubuntu, which has the chrislea PPA, which is perfectly fine (used it in production for a bunch of apps)
00:12 < tjfontaine> tnorris: if you can know for sure it will always be a small fixed type array there probably are some tricks, but you'd need to look inside v8 for examples I guess
00:12 < nlf> i'm suffering from a severe brain fart.. what the heck is the name of the library that lets you interface with c++ libraries without compiling a native addon?
00:12 < janmower> is anyone interested in centos packages for nodejs?
00:12 < spion> node-ffi ?
00:12 < othiym23> valterguy: Ubuntu debs aren't guaranteed to be ABI compatible with Debian
00:12 < nlf> spion: that's the one! thanks
00:13 < spion> not sure about C++, but C should be fine iirc
00:13 < tnorris> tjfontaine: good idea. I'll give it a look.
00:13 < valterguy> othiym23: no, but I gathered that he's using Ubuntu.
00:13 < TooTallNate> nlf: node-ffi does work with C++ but you need to do the name mangling yourself
00:14 < othiym23> valterguy: oh, if he is, then he should use the PPA ;)
00:14 < valterguy> jesse___: what distro are you using?
00:14 < nlf> name mangling?
00:14 < nlf> i'm fighting with some libusb bindings
00:14 <@Nexxy> lol
00:15 < nlf> got the node-usb package to compile and somewhat work in osx
00:15 <@Nexxy> good luck with that
00:15 < nlf> but i get segmentation faults when trying to do anything meaningful
00:15 < nlf> trying to figure out where the bug is, but thought ffi might be another approach
00:18 <@Nexxy> nlf, if you figure it out I'd be very interested
00:18 < TooTallNate> nlf: well it should be possible, though I don't know the specifics of libusb
00:18 < nlf> Nexxy: i'll let you know if i manage it
00:19 < jesse___> anyone know how to install phantomjs from the binaries? Probably a noobish question, but I can't find any documentation other than building from source
00:19 < nlf> it sounds like it's going to be an uphill battle for me, since libusb doesn't work great with osx's usb 3 stack
00:19 < nlf> so i get all kinds of weird bugs
00:21 < othiym23> jesse___: it's probably still too new to be packaged -- I use a Homebrew recipe, which does you no good
00:22 < niggler> nlf have you tried hidapi?
00:22 < othiym23> jesse___: there's a linux build available on http://phantomjs.org/download.html, as long as you're running a 64-bit Ubuntu system
00:22 < nlf> niggler: nope, i sure haven't
00:22 < valterguy> othiym23: again, it's available on Ubu. heh.
00:22 < othiym23> sheeeeit, I'll just stop talking, then 
00:22 < niggler> i had issues with libusb on osx, but hidapi worked very well
00:23 < valterguy> othiym23: I didn't mean it in any bad way.
00:23 < woopwoop> anybody see anything wrong with this code? trying to write a whois lookup client only returns a generic message http://pastebin.com/NDhKdHUT
00:26 < nlf> niggler: node-hid?
00:26 < niggler> lol nlf i wrote it in C, but sure
00:27 < nlf> oh haha, fair enough
00:27 < nlf> it looks like this is a binding to hidapi
00:27 < niggler> but yeah it looks like they use the same thing
00:27 < nlf> so it's worth checking
00:27 < niggler> try that out and lemme know what you think
00:33 < nlf> niggler: looks like this will do everything i need it to do
00:33 < nlf> basic hid support is pretty much all i need
00:33 < nlf> thanks for the tip
01:04 < tnorris> TooTallNate: do you think `length` of a Buffer instance should be writable?
01:04 < TooTallNate> tnorris: not particularly… just do buf.slice(n)
01:05 < tnorris> TooTallNate: problem i'm having is that it is now. it's set casually in lib/buffer.js, which makes it impossible to determine the size of a fast buffer in C.
01:06 < tnorris> imho length should be set in C as an unwritable property.
01:06 < TooTallNate> tnorris: so you're saying .length *should* be non-writable but it currently is?
01:07 < othiym23> Node's url.parse(path, true) doesn't distinguish between path = '/test?value' and path = '/test?value=' (note the trailing '=')
01:07 < tnorris> TooTallNate: yes
01:07 < othiym23> is there anyone who cares about the distinction between the two?
01:07 < TooTallNate> i think this has been discussed before and getters/setters end up being a lot slower than vanilla props :(
01:07 < TooTallNate> tnorris: but if that's not the case, .length should be immutable imo
01:07 < TooTallNate> like Strings
01:08 < tnorris> I agree. and a fast buffer instance doesn't actually have a proper length. it just uses the length of the parent slow buffer. makes it a pain to work with.
01:11 < bnoordhuis> tnorris: you can look up the .length property in c++: buf->Get(String::New("length"))
01:12 < tnorris> bnoordhuis: interesting. i'll have to see if that adds much overhead. thanks.
01:20 < jcrew> Error: read UNKNOWN   net_uv - anyone have any idea why i'd get that error randomly in windows?
01:22 < jcrew> stream error doesn't catch it, just happens using 'net' connections
01:24 < mscdex> piscisaureus_ or bnoordhuis is the one to ask
01:25 < bnoordhuis> jcrew: what node version is that?
01:25 < bnoordhuis> i'm guessing it's pretty old
01:27 < jcrew> bnoordhuis: crap. thought i was on 8
01:28 < jcrew> bnoordhuis: thank you, i've been looking at this for like 3 days
01:28 < bnoordhuis> jcrew: np :)
01:40 < MI6> joyent/node: Ben Noordhuis master * ce1b33a : v8: remove optimization switches  Remove compiler switches from $(TOPLEVE - http://git.io/Agklxw
01:41 < niggler> bnoordhuis if you are committing changes, can I ask you to slide in a quick fix https://github.com/joyent/node/pull/4506
01:43 < bnoordhuis> niggler: it needs some tests
01:43 < niggler> .1+.2
01:44 < bnoordhuis> niggler: tests as in tests in test/simple/
01:49 < niggler> ok bnoordhuis https://github.com/Niggler/node/commit/d0e7c4020934355e7dd6453cdd88f46e9f8ae988
02:08 < MI6> joyent/node: Ben Noordhuis master * 96d2a47 : Merge remote-tracking branch 'origin/v0.8' (+7 more commits) - http://git.io/SX9U5A
02:28 < jaehun> Haloo~
02:29 < Tunner> hi all
02:31 < jaehun> :) 
02:31 < jaehun> Hi
02:31 < jaehun> Nice meet u
02:31 < Tunner> I need some help with my node app and appfog
02:34 < RLa> Tunner, what's the problem
02:35 < Tunner> I'm using some irc bots written in coffee and node
02:37 < Tunner> jumm i think is working now, but af start failed
02:38 < Tunner> my problem is that appfog try to start the bot, it starts, but appfog still trying starts it, and it fails.
02:40 < lethalduck> I'm getting an error. Error: Cannot find module 'formidable'. I've required formidable. var formidable = require('formidable')
02:40 < lethalduck> I installed the module with npm install formidable
02:40 < mbalho> sounds like a formidable problem
02:42 < lethalduck> I'm assuming there is a file somewhere called formidable.js, but I can't find it. I thought it would have been installed to /home/me/node_modules/formidable, but find can't find it.
02:42  * superjoe groans
02:42 < othiym23> I can't believe that joke doesn't get made every single day in this channel, mbalho 
02:42 < lethalduck> Looking at the formidable repo, I can't see a formidable.js
02:43 < othiym23> lethalduck: I just ran 'npm install formidable' and ended up with a formidable subfolder in my node_modules
02:43 < RLa> lethalduck, you installed with -g option?
02:43 < lethalduck> Does there not have to be a file called formidable.js?
02:44 < RLa> no
02:44 < mbalho> node modules have a 'main' property defined in package.json that defaults to 'index.js'
02:44 < othiym23> its main file is <module root>/lib/index.js
02:44 < othiym23> which is what package.json defines as 'main'
02:44 < mbalho> theres your main problem
02:44  * mbalho is here all week
02:44 < Tunner> It's very annoying... it works perfect on Heroku but not on appfog.
02:45 < lethalduck> I've got the formidable subfolder. RLa: I don't think the -g option will install to /home/me/node_modules/formidable
02:45 < othiym23> daaang, mbalho
02:45 < othiym23> so low
02:46 < othiym23> lethalduck: don't install modules individual apps use globally
02:46 < mbalho> for every piece of technical advice given there will be 2 puns
02:46 < RLa> lethalduck, what is you project's root?
02:46 < othiym23> lethalduck: -g is for modules with binaries you want everywhere
02:47 < RLa> fucking eclipse is hanging here again
02:48 < lethalduck> Apparently using the -g optioin isn't advised
02:48 < lethalduck> http://blog.gantrithor.com/post/10687214568/do-not-use-npm-install-g
02:49 < RLa> it's also mentioned in the manual, under Modules
02:49 < RLa> lethalduck, what's your project root?
02:49 < hij1nx> for anyone interested in leveldb, i've been writing a new leveldb admin tool -- https://github.com/hij1nx/lev
02:50 < lethalduck> RLa: /media/EXTERNAL/Documents/PenDrive/Study/Web/JavaScript/Nodejs/NodeBeginnerBook
02:50 < Tunner> RLa, any idea related to my problem?
02:51 < RLa> Tunner, oh, thought you got it running
02:51 < lethalduck> RLa: Do I need to add /home/kim/node_modules to my path?
02:51 < RLa> what is the af start command output
02:51 < RLa> lethalduck, no
02:51 < Tunner> no :( it goes down after 2m
02:51 < lethalduck> RLa: have to use the -g option then I guess?
02:52 < RLa> lethalduck, where did you ran npm install command
02:52 < Tunner> basically it runs node, using start script on package.json
02:52 < RLa> lethalduck, no, don't do it, unless you want some command line tool
02:52 < RLa> Tunner, can you paste the output somewhere
02:52 < lethalduck> RLa: ~
02:52 < RLa> lethalduck, run it in the project root
02:53 < lethalduck> RLa: Oh
02:53 < gest> hey all
02:53 < gest> does anyone have any experience with closure compiler
02:54 < RLa> using uglify here :)
02:54 < Tunner> It is complicated, because appfog does not show any error, it shows bot debug info (what is not an error at all). The problem I think is that appfog does not notice that the app is already running.
02:54 < gest> uglify does it only minify js
02:54 < gest> or does it also handle dependencies
02:55 < gest> basically that I need to use a tool for both
02:55 < Tunner> Imagine: I start the app, the bot enters to irc channel, but appfog is still trying to start the bot
02:55 < gest> that is I want to start using some tool to better structure my js
02:56 < Tunner> So, appfog stop it, and start it again... a pair of times and it fails.
02:56 < lethalduck> RLa: Cheers! That was it.
02:56 < RLa> Tunner, do you spawn extra processes?
02:57 < Tunner> it shouldnt
02:57 < Tunner> only node start.js, who calls nerdo.coffee
02:57 < RLa> lethalduck, if the tutorial is not saying to run install in the project root, file it a bug
02:58 < RLa> that's weird
02:58 < RLa> Tunner, running on node 0.6 or they have 0.8 now?
02:58 < Tunner> 0.8
02:58 < RLa> oh
02:58 < Tunner> .14 i guess
02:58 < lethalduck> RLa: http://www.nodebeginner.org/
02:59 < RLa> Tunner, but the bot dies in 2 minutes?
02:59 < lethalduck> RLa: I'll flick him an email
02:59 < Tunner> Can i paste a pair of lines here?
02:59 < RLa> only 2, if more, paste into gist or something
03:00 < lethalduck> Spend an hour on a problem, or ask on Node.js and get an answer in a couple of minutes.
03:00 < Tunner> [03:55] * Musy (musybot@Musy.roBot) ha entrado en #nafolia [03:55] * Musy se ha marchado (Read error: EOF from client) [03:56] * Musy (musybot@Musy.roBot) ha entrado en #nafolia
03:00 < mbalho> learning: its the trip not the destination
03:00 < RLa> Tunner, so it crashes or something
03:00 < Tunner> and then, dies again
03:01 < lethalduck> mbalho: Yeah, I keep telling myself that, but sometimes I just don't have the time.
03:01 < RLa> when you run in own computer, it works well?
03:01 < Tunner> yeah, but the bot works, all plugins and all
03:01 < Tunner> yeah
03:01 < RLa> you use some native code modules?
03:01 < Tunner> events and net
03:02 < Tunner> You can see the source code if you want
03:03 < Tunner> it is hosted on github
03:03 < mmalecki> mbalho: trip: it's learning, not the destination
03:04 < xer0x> that's what she said
03:04 < joahg> Howdy Y'all :)
03:04 < Tunner> hi joahg 
03:07 < RLa> Tunner, yeah, give a link
03:08 < Tunner> https://github.com/alvaro-cuesta/nerdobot/tree/develop
03:09 < Tunner> I needed to edit start script to node start.js (to load coffeescript) and delete the process args from nerdo.coffee (because there are not supported on appfog node version)
03:10 < Tunner> Also, I just used node start.js on my local copy and it works perfect
03:12 < RLa> Tunner, https://docs.appfog.com/languages/node <- i think start command "coffee ./bin/nerdo.coffee" might not be supported
03:12 < Tunner> bot
03:12 < Tunner> ops
03:13 < Tunner> no, so i use start.js and require('coffee-script'); and require('./bin/nerdo.coffee)
03:13 < Tunner> https://docs.appfog.com/languages/node#node-coffee-script RLa 
03:14 < Tunner> I tested that start.js on local and works
03:14 < Tunner> and the start command is -> "start": "node start.js"
03:15 < RLa> hm oh
03:15 < RLa> hm, i do not see any reason why it would not work
03:16 < RLa> logging would help
03:16 < RLa> but i guess appfog has no stdout/err logged somewhere
03:16 < Tunner> nop, logging shows the bot debug, and it doesn't show any error
03:16 < RLa> at least it was not when i used it last time
03:16 < Tunner> using af logs
03:16 < RLa> oh
03:17 < Tunner> and it is hilarious, because the bot sometimes enters and exists, and it don't stop
03:19 < Tunner> How can i add something that tells appfog that the app is ready?
03:21 < mscdex> appfog doesn't sound like a company with a _clear_ future :-P
03:22 < TehShrike> >> "I do not exist"
03:22 < purr> TehShrike: (string) 'I do not exist'
03:22 < mscdex> >> while(true) { console.log('node.js rules!'); }
03:22 < purr> mscdex: Timeout Error: Execution time exceeded 2 seconds
03:23 < mscdex> pshaw, no output even :-(
03:23 < mscdex> get that buffering bot out of here!
03:24 < RLa> apparently process management is still rocket science
03:24 < mmalecki> hey, child_process.spawn *is* hard to get right!
03:24 < mmalecki> all those params and stuff.
03:24 < RLa> i think on linux there is even no way for parent know when child dies
03:25 < RLa> unless it does some fancy accounting with ipc and stuff
03:25 < mmalecki> RLa: SIGCHLD
03:25 < mmalecki> unless you `waitpid`
03:26 < mmalecki> in which case, the calling thread is paused until the child process exits
03:26 < fnguest> sorry for the "poll question", but does anyone here use one of the JSON query languages like JAQL/
03:26 < RLa> hm
03:26 < mscdex> never
03:27 < mmalecki> fnguest: nah, never heard of it before
03:27 < RLa> fnguest, is that like xquery for xml?
03:27 < mmalecki> oh, it's hosted on Google Code, this ain't gonna work yo
03:27 < jcrew> lol
03:28 < fnguest> what's an advisable way to search within deserialized JSON?  i might have structures nested a few levels deep
03:28 < jcrew> fnguest: what kind of searches do you want to do?
03:28 < mmalecki> "Jaql is a part of IBM's BigInsights product" - ETOOENTERPRISE
03:28 < jcrew> find keys, find values? find with regex ?
03:29 < fnguest> i think find the equivalent of rows in SQL
03:29 < fnguest> so key-value pairs
03:29 < jcrew> mmalecki: i could see using this in a huge hadoop cluster with raw logs
03:29 < jcrew> or, raw json logs
03:30 < mmalecki> oh yeah, this stuff *is* fun.
03:30 < mmalecki> handling lots of logs is a pain
03:31 < jcrew> mmalecki: i get to aggregate POS data from all of one of the bigger grocers on the west coast to get real-time POS data available at corporate
03:31 < jcrew> new job, new year
03:31 < mmalecki> nice one, how much items/s are you handling?
03:31 < mmalecki> that sounds fun and relevant to some stuff I'm working on
03:31 < jcrew> 1.9 million POS records / day
03:32 < jcrew> unique POS transactions
03:32 < mmalecki> daaamn
03:32 < mmalecki> with node?
03:32 < fnguest> another language i've seen is JSONiq
03:32 < jcrew> nah, with SAP POS DM, BW, and HANA
03:33 < jcrew> fnguest: that looks more like what you need
03:33 < fnguest> of course i'm not truly searching JSON, but deserialized JS data structures
03:34 < jcrew> mmalecki: what are you doing?
03:34 < mscdex> so many acronyms, so little time
03:34 < mmalecki> jcrew: working on a log collecting and analysis solution
03:34 < mmalecki> in node tho :)
03:36 < jcrew> what kind of logs?
03:37 < mmalecki> jcrew: well, logs in general. server logs are the main target
03:37 < mmalecki> none of the business stuff you're doing
03:38 < jcrew> doing trending or load analysis?
03:38 < mmalecki> yeah, it's in the plans
03:38 < mmalecki> didn't get to sketching out the architecture for it yet
03:38 < _ohm> my console says "info  - socket.io started" but every time I try and connect I get GET /socket.io/socket.io.js 404 3ms. Any help?
03:40 < RLa> mmalecki, you in Logentries or their competitor?
03:41 < jcrew> mmalecki: is it commercial or just ?? - you want any help with it?
03:41 < mmalecki> RLa: competitor
03:41 < mmalecki> RLa: I like their solution tho, it's just that most of those systems lack *something*
03:42 < RLa> i used them for some time ago
03:42 < mmalecki> jcrew: thanks, but I didn't even get to sketching out most parts of my infrastructure :)
03:42 < mmalecki> I'll definitely hit you up if I have some questions tho
03:49 < superjoe> is there a way to run a CPU intensive task in a different thread with a callback style API in which you're only allowed to touch data that you pass in as an argument, and any output comes with the callback?
03:49 < superjoe> like threads, minus the memory conflicts, and pretend that it's not a thread
03:50 < mmalecki> superjoe: multiple processes maybe?
03:51 < superjoe> yeah maybe.
04:05 < jcrew> superjoe: is the output to the command line?
04:07 < someprimetime> anyone using text.js with require.js?
04:08 < Tunner> Do you want to get text from a website?
04:09 < someprimetime> Tunner: nah i'm organizing my script templates with it, but i'm trying to figure out how to put them all into one .html file for a particular view
04:09 < someprimetime> e.g. I have a bunch of templates for a comment system I'm writing that handle the deletion of a comment but I don't want to break them out into different files, I want to grab them by their script id
04:09 < Tunner> ah, i can't help with that, sorry :(
04:09 < someprimetime> but because require.js loads them in as text it's a string so unless i want to do some nasty regex, I can't figure out a clean solution without breaking them out separately
04:10 < someprimetime> no worries maybe i should just come up with another idea
04:10 < Tunner> i used jQuery for web scrapping
04:10 < Tunner> (as node module)
04:10 < someprimetime> yeah I mean I could insert them into the DOM but I want them kind of separated from the rest of my site templates
04:11 < someprimetime> theoretically I could just pluck them all into the DOM and then wrap them in $() and then do a find() on them but that's just way too naive and too much overhead
04:11 < Tunner> you right
04:12 < superjoe> jcrew, ha ha. 
04:12 < superjoe> never mind me though. I'm probably committing the xy problem right now
04:13 < superjoe> making a module that runs physics on a tight interval. I'm looking into ways to make it so that you can't accidentally halt physics while doing AI logic.
04:14 < someprimetime> sounds fun/complicated
04:14 < superjoe> I solved it before by doing the physics processing in a different thread
04:14 < superjoe> but then I switched to node.js
04:33 < jcrew> superjoe: does cross process socket.io not do what you want?
04:33 < jcrew> or dnode
04:34 < jcrew> or child_process->fork 
04:37 < superjoe> well I might actually need to share some memory
04:37 < jcrew> nothing memcached can't handle
04:37 < superjoe> hmm
04:38 < superjoe> introducing a 3rd party process and dependency
04:38 < superjoe> is costly
04:38 < jcrew> what kind of information are you trying to share between them?
04:39 < superjoe> about 300 MB worth of data describing the physical attributes of the world
04:40 < jcrew> our world or a virtual world?
04:40 < superjoe> virtual world
04:40 < jcrew> can i be a wizard?
04:40 < superjoe> yes
04:40 < jcrew> i'm a warrior person
04:40 < superjoe> I need to do physics on the world while at the same time CPU crunching based on world data
04:41 < superjoe> or I suppose I could require my users to be careful not to block the CPU too long
04:41 < jcrew> requiring users to do something in good faith always ends well
04:41 < superjoe> I assume that is sarcasm
04:42 < jcrew> yea
04:42 < superjoe> any ideas?
04:42 < superjoe> besides memcached
04:42 < superjoe> which I am considering
04:42 < jcrew> can you send messages to the child_process and as new physics stuff needs to be calculated you push the messages into the child's queue for calculations
04:42 <@konobi> fork is cheap
04:43 < jcrew> as well as the information needed for the physics^
04:44 < superjoe> konobi, could I fork every 50 ms?
04:44 < RLa> in-memory storage and c++ if you want raw performance
04:44 <@konobi> assuming pure fork, yes
04:44 < jcrew> superjoe: you could fork once and just send messages back and forth - treat it like a job server
04:44 < superjoe> hmm
04:45 < superjoe> I'll have to give it some more thought
04:46 < superjoe> RLa, would c++ solve the threading problem?
04:46 <@konobi> stop overthinking it and JFDI
04:46 < superjoe> I don't suppose you can pass a Buffer instance over IPC
04:46 < RLa> no, but you would spend less time holding locks :)
04:46 < superjoe> konobi, I already JFDI, and the project died due to underthought :)
04:47 < superjoe> this is like one of the 3 core decisions that actually matter to the project
04:47 <@konobi> heh
04:47 < jcrew> superjoe: just write a quick benchmark and see if you can pump physics in there harder than the message stream can handle
04:47 < RLa> last time i did a game server i used lock-free data structures
04:47 < superjoe> c++ version https://github.com/superjoe30/mineflayer/ nodejs version: https://github.com/superjoe30/mineflayer/tree/nodejs
04:48 < RLa> nice, c++ one uses qt
04:49 < superjoe> <3 qt
04:49 < astropirate> all hail Qt!
04:50 < superjoe> konobi, the JFDI option is going to be to require users to suck it up and write proper nodejs code that does not halt the CPU for too long
04:50 < superjoe> possibly with code that will write warning messages to stderr if it detects that you're doin' it wrong
04:51 <@konobi> seems like a workers pattern
04:51 < superjoe> there is no wikipedia page for workers pattern
04:52 <@konobi> web workers
04:54 < sayd> the caveats is what i want to see
04:56 <@konobi> sayd: http://thecaveats.bandcamp.com/
05:00 < sayd> konobi: heh thanks, that was meant for #machomebrew :)
05:13 <@konobi> superjoe: there's always doing a native addon and then using uv_custom
05:14 < tnorris> isaacs: I'm detecting a massive performance regression since commit 5e57bcc (testing on my PR GH-4504)
05:15 < tnorris> calling those same methods takes 6x's longer than in before upgrading v8 to 3.15.11
05:17 <@konobi> tnorris: enotparse
05:17 < tnorris> konobi: ?
05:18 <@konobi> so what does the slow down realte to in terms of v8 version?
05:18 < niggler> is there a way to run the node repl so that it processes coffeescript?
05:19 < niggler> so that i could type lines of coffeescript and the repl would automatically translate to javascript and do its magic
05:19 < tnorris> konobi: right now all I know is that before upgrading to 3.15.11 my tests ran in 880 ms, and after they run in 5500ms. still investigating exactly why.
05:20 <@konobi> so is it the v8 version or the api change?
05:21 <@konobi> (since they're right beside ech other chronologically
05:21 < tnorris> konobi: I didn't think I could test one w/o the other. (that the api update would have been necessary after upgrading)
05:21 < tnorris> i'll check it now.
05:22 <@konobi> i also notice indutny removed some optimizations flags
05:23 < tnorris> konobi: the regression happens on 7b4d95a deps: update v8 to 3.15.11
05:23 <@konobi> um... bnord even
05:24 <@konobi> try applying ce1b33a9dc8e3 directly
05:27 < tnorris> konobi: ah, hadn't rebased my branch against ce1b33a9d. that fixed the problem. I feel happy again. thanks.
05:28 < tnorris> isaacs: nm.
05:31 < sayd> hm, i tried npm init and i stepped through the questions but no package.json
05:33 < sayd> when i try again i get: 5 error TypeError: Cannot call method 'replace' of undefined
05:33 < sayd> 5 error     at /usr/local/Cellar/node/0.8.16/lib/node_modules/npm/node_modules/read-package-json/read-json.js:332:45
05:40 < garthk> Any chance a Windows 2.7.19 node sending configurations to 2.7.20 would have trouble evaluating target => "${nagios::targets}/host/${::fqdn}.cfg"
05:40 < garthk> ?
05:44 <@konobi> garthk: i'll assuming wrong channel
05:44 < garthk> konobi: good call. Oops. 
05:45 < q88qlsd> hello, I am writing a nodjs extention, when arguments are passed from javascript ( an array of key:vlaue strings on the javascript side ) what c++ type does it corraspond to?
05:48 < mistertwig> q88qlsd: that's not an array 
05:48 < mistertwig> oh unless you mean an array of objects
05:49 < q88qlsd> its an arry of name:value 's 
05:49 < q88qlsd> so i assume a 2d array of strings?
05:49 <@konobi> q88qlsd: http://stackoverflow.com/questions/8371003/how-to-parse-arguments-object-in-c-v8
05:49 < q88qlsd> word ill take a look at that thx
05:50 <@konobi> there's also the v8::Arguments class
05:50 < q88qlsd> yeah
05:50 < q88qlsd> thats what it is
05:50 < q88qlsd> v8::Arguments
05:50 < q88qlsd> where the 2nd argument
05:50 < q88qlsd> is the thing im working with
05:51 < q88qlsd> and at the moment im doing String::AsciiValue to it
05:52 < q88qlsd> but im not sure if thats the correct thing to do
06:03 < astropirate> what the flying fu*k?? http://svn.codehaus.org/groovy/trunk/groovy/groovy-core/src/main/org/codehaus/groovy/runtime/ArrayUtil.java
06:07 < SomeoneWeird> LOL
06:10 < jcrew> lmfao
06:11 < mbalho> anyone know how to make an array with 250 items in groovy?
06:11 < jcrew> 250 ez, 251 is where it hits a wall
06:12 < mbalho> AHH zero indexing got me, thanks!
06:12 < jcrew> can we forward #java traffic here?
06:12 < jcrew> we've got all kinds of answers
06:12 < jcrew> : )
06:30 < foobler> What does ENOENT refer to?
06:34 < tnorris> foobler: http://lxr.free-electrons.com/source/include/uapi/asm-generic/errno-base.h#L5
08:19 < samholmes> I keep getting this "Too many connections" error from mysql node. Why would I be getting this?
08:21 < SomeoneWeird> because you have too many connections?
08:21 < SomeoneWeird> >___>
08:22 < samholmes> SomeoneWeird: How can this happen?
08:22 < samholmes> Can I remove the limit?
08:22 < SomeoneWeird> is it from the actual library, or mysql?
08:23 < samholmes> How have I already gotten too many connections when my site hasn't even had 100 users yet.
08:23 < `3rdEden> arent the connections persisent?
08:24 < samholmes> http://pastebin.com/uUd7xqNw
08:24 < samholmes> That's the full error with the stack trace and everything
08:24 < samholmes> I think that the error is coming from mysql not the module
08:25 < SomeoneWeird> you should only have 1 mysql connection anyway
08:25 < samholmes> SomeoneWeird: Why only one?
08:25 < SomeoneWeird> ... why would you need more?
08:25 < samholmes> Transactions
08:27 < samholmes> mysql transactions would block all other requests while processing
08:27 < `3rdEden> then use a connection pool?
08:28 < samholmes> I was eventually going to use a pool.
08:29 < samholmes> But, why am I already reaching this limit without even having much site activity?
08:29 < SomeoneWeird> because it's probably set to a very low amount, for a reason
08:29 <@konobi> are you calling connect more than once?
08:31 < samholmes> konobi: I'm creating the connections on the fly and then ending them.
08:31 < st_luke> do you have connections hanging around in your mysql processlist?
08:31 < st_luke> just sounds like a design problem
08:32 < SomeoneWeird> wow
08:32 < SomeoneWeird> yeah, don't do that
08:32 <@konobi> samholmes: do it once at startup and then handle reconnection
08:32 <@konobi> since you probably aren't going to handle the disconnections properly in every case
08:34 < samholmes> konobi: so create a mysql connection once at the process startup and then use that single connection? 
08:34 <@konobi> yup
08:35 < samholmes> konobi: But, I should create a few connections though, a pool, right?
08:35 <@konobi> nope
08:35 < samholmes> konobi: but, how would I do mysql transactions with only one connection?
08:36 <@konobi> you just do
08:36 < samholmes> konobi: But wouldn't that block?
08:36 <@konobi> transactions don't block the connection
08:36 < SomeoneWeird> i didn't think they would, which was why I was confused heh
08:36 <@konobi> they block writes to specific tables and only if that takes a long time
08:36 <@konobi> so they'd get queued until they timed out
08:37 < samholmes> konobi: But, if one transaction begins it commits the previous transacton.
08:38 <@konobi> samholmes: i don't believe so
08:39 < samholmes> yeah, if you have a single connection and you start a transaction and do stuff, then some other requests wants to start a transaction on the _same_ connection, then it'll commit the previous one before starting the new one.
08:40 < samholmes> the mysql connection doesn't know the difference between one http request and another. 
08:40 <@konobi> it knows the difference between one transaction and another though
08:41 < samholmes> Right.
08:41 < samholmes> Wait, I'm not exactly sure what you mean there.
08:42 < samholmes> If you were to open a mysql client in a terminal, and start a transaction then start another transaction before committing the previous one, what would happen?
08:44 <@konobi> ugh... it also depends on the backend
08:45 <@konobi> samholmes: time to bug felixge about api support for transactions =0)
10:13 < Youdaman> plain js q: if i have an associate array/object where the keys are arrays, e.g. foo[[bar,baz]] -- is it "better" (time- or space-wise) to instead do foo[JSON.stringify([bar,baz])] -- i.e. key by actual arrays or string representations of arrays?
10:14 < ckknight> Youdaman: if you put a key on an object, it's always coerced to a string, so [bar,baz] turns into [bar,baz].toString()
10:15 < Youdaman> ckknight: oh thanks, so the JSON.stringify variation i tried is actually useless/superflous
10:15 < Youdaman> ty
10:15 < ckknight> it isn't superfluous
10:16 < ckknight> well, it might be
10:16 < ckknight> but think about if you had bar or baz with a comma in them, it'd be all sorts of screwy
10:18 < Youdaman> yeah in my case i'm using couchdb, which returns query/view results which can be keyed by either single values or arrays, and so i thought i'd create a client-side cache of results, i.e. cached[row.key] = row.value -- and in some cases row.key is an array... so in terms of what you've said, that's fine, because that row.key array gets "stringified" anyway
10:19 < Youdaman> so no need to say cached[JSON.stringify(row.key)] = row.value
10:19 < Youdaman> i was just imagining actual arrays/objects as the keys and that perhaps taking up more space with "holes" in it or just something weird possibly going wrong, whereas strings is simple/safe
10:19 < Youdaman> so thanks :D
10:21 < ckknight> Youdaman: it doesn't get stringified in the same way, it simply does .join(",") on it.
10:22 < Youdaman> ckknight: yeah that's fine :) and excellent
10:23 < ckknight> alright, then you're all good
10:23 < Youdaman> ^
10:23 < Youdaman> cheers
12:47 < astropirate> woah... this channel is so dead
12:47 < astropirate> its almost creepy
12:47 < SomeoneWeird> TROLOLLOLLOLOL
12:47 < SomeoneWeird> idno
12:48 < SomeoneWeird> people must be zz
12:48 < astropirate> I guess no one uses node in Europe?
12:48 < RLa> i'm here :)
12:48 < astropirate> RLa, of course you are
12:48 < astropirate> in every channel I am >_>   <_<
12:48 < RLa> haha
12:48 < SomeoneWeird> guess what, i'm here too
12:49 < astropirate> ohh no
13:17 < valterguy> astropirate: It could be that in most of Europe it's morning/mid-day.
13:17 < valterguy> people are doing something else, maybe actually working. :)
13:18 < astropirate> what is this "work" you speak of
13:18 < astropirate> :p
13:18 < valterguy> it's this place where they gather people and make them execute repetitive actions.
13:18 < valterguy> in exchange, you receive this thing called money.
13:18 < SomeoneWeird> monies?
13:18 < valterguy> it's amazing, actually.
13:19 < SomeoneWeird> i have 0 of this 'money' thing you speak of
13:19 < ckknight> SomeoneWeird: be more Web 2.0
13:19 < valterguy> SomeoneWeird: in that case, you should attempt this "work"
13:20 < SomeoneWeird> bitch i'm web 3.0
13:20 < SomeoneWeird> too busy with this "school" thing
13:20 < valterguy> that's so 2012. web 3.5 is the new deal.
13:23 < astropirate> valterguy, which is better
13:23 < astropirate> web 3.0 or html5
13:24 < SomeoneWeird> 5?
13:24 < SomeoneWeird> html7
13:24 < Doikor> i just go around calling them web sites or web apps. why attach random numbers behind them? they either do cool stuff or they dont.
13:25 < valterguy> astropirate: HTML5 imho, but I agree with Doikor on this.
13:25 < astropirate> yes yes
13:25 < valterguy> It doesn't really matter what you use as long as it gets the job done in a nice manner.
13:25 < astropirate> but which can I earn more money with
13:25 < ckknight> HTML6 with bootstrapping support
13:25 < astropirate> :)
13:26 < valterguy> ckknight: I heard there was that virus that used the HTML6 vulnerability, so I have that disabled.
13:26 < ckknight> update your java, valterguy
13:27 < valterguy> updates are for beginners.
13:27 < Doikor> relax ppl. html5 just got feature locked and no browser supports all of it (and wont for a long time)
13:28 < astropirate> is html5 webscale?
13:31 < timkuijsten> astropirate: html5 == web, don't understand your question
13:32 < astropirate> was a joke
13:32 < astropirate> a bad one :|
13:33 < timkuijsten> astropirate: ;-P
14:27 < jtomasrl> what im doing wrong here? https://gist.github.com/4443836 some event emitter stuff
14:28 < ewaters> I think you need to call the EventEmitter constructor in your constructor
14:29 < jtomasrl> ewaters: how is that
14:30 < jtomasrl> i add " var EventEmitter = require('events').EventEmitter"
14:30 < ewaters> Between line 2 and 3, something like "EventEmitter.call(this)"
14:30 < SomeoneWeird> you don't have to
14:31 < ewaters> k, ignore me.  =)  (I'm a newb anyway)
14:31 < SomeoneWeird> you should use Consumer.prototype.findById too, instead of writing to Consumer.prototype directly like that too
14:32 < jtomasrl> i have many functions in the Consumer.prototype = {} , should i write all like Consumer.prototype.function ?
14:32 < SomeoneWeird> https://gist.github.com/4443857
14:32 < SomeoneWeird> try that
14:34 < jtomasrl> SomeoneWeird: not working
14:34 < SomeoneWeird> same error?
14:35 < jtomasrl> yup
14:35 < SomeoneWeird> what are you trying todo, anyway?
14:36 < SomeoneWeird> oh nvm
14:36 < SomeoneWeird> hm
14:36 < jtomasrl> save data on a database and return back the object
14:36 < SomeoneWeird> right, i know why i think, because you're passing this to emit it's emitting 'this' when it's finished (on done), but you're trying to chain from the .on, which won't work
14:37 < jtomasrl> so "this.emit('done', this);" is the problem?
14:38 < SomeoneWeird> just don't chain the call to findById
14:38 < niggler> in github, when you submit a pull request, does it change the first line of the commit?
14:38 < SomeoneWeird> https://gist.github.com/4443857
14:38 < jtomasrl> but when do i call the findById function
14:39 < SomeoneWeird> after you've added the function to .on
14:39 < jtomasrl> oh
14:40 < jtomasrl> same error :S
14:41 < SomeoneWeird> 0.o
14:41 < SomeoneWeird> dunno then, sorry
14:43 < jtomasrl> :/
14:44 < ashnur> anyone here who uses promises, deferreds, futures or anything like these?
14:44 < niggler> bnoordhuis i tried squashing and git failed on me, so i ended up clobbering my copy, re-forking and re-PRing
14:45 < astropirate> Who here uses the MVC paradigm without using an ODM or ORM?
14:46 < medikoo> ashnur: what do you want to know?
14:50 < ashnur> medikoo: I am curious how to build a flow of async functions like A->B->C where B depends on A keeping it's promise and C depends on B, but with a quirk, I want a branch from A, if A fails to go to B` so that B` actually depends on A breaking its promise, and if B` keeps its promise then the flow should go back to B, otherwise throw an error
14:50 < ashnur> medikoo: I've asked this on #javascript, and might get an answer just now, but I wanted to write the question anyway
14:52 < medikoo> ashnur: it shouldn't be problem, give me a sec, I'll prepare simple gist
14:52 < ashnur> thanks
14:56 < medikoo> ashnur: So B depends of value of A, but also provides some other value if A fails?
14:57 < medikoo> ashur: *on value of A
14:57 < ashnur> well, if A fails, then I want to patch up the flow, so that when I get to B it's like A did not fail
14:58 < medikoo> ashnur: I see
14:58 < ashnur> trivial example would be A checking a directory if exists, B writing a file into that dir. if that dir doesn't exists A fails, B` creates the dir, and B writes the file
15:00 < hipsterslapfight> why not just try and create the directory in A then pass it on to B
15:01 < ashnur> it was an example
15:01 < medikoo> ashnur: https://gist.github.com/4444041
15:01 < ashnur> thanks, checking
15:08 < ashnur> medikoo: so you are saying that I should just have another flow embedded in A
15:08 < medikoo> ashnur: What is A in your sense?
15:09 < ashnur> an async function
15:09 < medikoo> You need to have other function in your error flow, to patch eventual error and turn it into valid result
15:10 < medikoo> so you can get from error flow back to success flow
15:11 < ashnur> yeah, so I should not have let A fail in the first place
15:11 < medikoo> and A should be left as it is, unless internally within A logic you'd like to handle that error, but it's the question of what A really do
15:21 < bahaaldine> Hi, has anybody ever used express-pagelet ?
15:21 < bahaaldine> I'm actually trying to load parts on my website without reload the whole page. 
15:21 < bahaaldine> I can do that with websockets but I also want that URL changes when a new part is loaded so the user can use the back and forward button
15:31 < Kakera> is there an IDE similar in features to SSH? I'm mostly interested in marking of unused and undeclared variables
15:31 < Kakera> s/SSH/Cloud9
15:33 < niggler> jshint can detect those
15:33 < niggler> although that's a command-line app and not an IDE
15:35 < Kakera> what about nide? has anyone used that?
15:37 < astropirate> Kakera, jshint is integreated with a few editors
15:38 < astropirate> komodo edit being one of them
15:38 < astropirate> its quite good
15:39 < Kakera> astropirate, how well does it work over SSH?
15:40 < astropirate> Kakera, ohh you need it over ssh?
15:40 < astropirate> sorry not sure about that
15:41 < niggler> use vim
15:41 < astropirate> I think komodo has an addon for "remote directory" that supports ssh
15:41 < niggler> https://github.com/sleistner/vim-jshint
15:41 < Kakera> yeah downloading it now
15:45 < _Steve_> Kakera: Sublime text 2 works like a charm here
15:46 < _Steve_> Kakera: together with a linting plugin, admitted
15:46 < Kakera> _Steve_, I don't want nagware
15:46 < niggler> sublime text 2 doesnt work over ssh iirc
15:46 < _Steve_> ah, no
15:47 < niggler> Kakera just learn vim :)
15:47 < _Steve_> Kakera: if you're developing professionally, then a license is very cheap
15:47 < _Steve_> vim makes a great second though
15:49 < Shinister> I like C9.io
15:49 < Shinister> That said, I bought the JetBrains IDE when it was on offer
15:49 < SomeoneWeird> who cares about it nagging, ST2 is freaking awesome
15:50 < _Steve_> be sure to use the vintage (vim) mode though
15:56 < Kakera> astropirate, how do I enable jshint in Komodo?
16:02 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:17 < sherlock-holmes> anyone needs a web developer for some cheep freelancing?
16:20 < wargt> hello
16:20 < wargt> hey gays
16:22 < superjoe> konobi, native addon + uv_custom: where might I look to learn more about this?
16:35 < wargt> gay
16:35 < wargt> hey
16:35 < wargt> this is chat?
16:35 < wargt> http://8.8.8.8
16:38 -!- mode/#Node.js [+o konobi] by ChanServ
16:46 < brettlangdon> superjoe, looking for info on creating a c++ module with libuv?
16:51 < superjoe> yes
16:51 < superjoe> especially if it mentions threads
16:51 < brettlangdon> well, for starters node.js api has some documentation on c++ modules
16:52 < superjoe> I saw that - it looks helpful
16:52 < brettlangdon> https://github.com/kkaefer/node-cpp-modules
16:52 < drim> I have a list of object which contains user_id. I want to display them by user_id. How could I do ?
16:52 < brettlangdon> that is helpful too, but doesn't use libuv
16:52 < warz> when i was writing c++ modules i just tried to cross reference the node docs and the v8 docs
16:52 < warz> and other people's source code
16:53 < brettlangdon> https://github.com/joyent/node/wiki/How-to-migrate-from-eio_custom-to-uv_queue_work
16:53 < superjoe> nice
16:53 < brettlangdon> that page is really helpful, showing differences between ev_custom and uv_work_queue
16:53 < brettlangdon> but, also, the libuv documentation might help you too
16:53 < superjoe> yep
16:53 < brettlangdon> and you can also look at the source code for some modules that use it
16:54 < warz> here's a pretty simple module i wrote that uses uv_queue_work: https://github.com/ryancole/topdf
16:54 < warz> it only exports a single function
16:54 < brettlangdon> http://izs.me/v8-docs/annotated.html
16:54 < motka> riddle: who runs the whole world of today?
16:55 < brettlangdon> here is the latest c++ project I've worked on that uses uv_queue_work
16:55 < brettlangdon> https://github.com/brettlangdon/NodeLua
16:55 < brettlangdon> might be helpful
17:06 < drim> In a view, I want to display an array but grouped by user_id. Should I use a map ? a filter ? where should I do the command ?
17:06 <@konobi> drim: sort?
17:07 < MI6> joyent/node: Ben Noordhuis master * d002a30 : node: remove ev-emul.h  libev has been deprecated since v0.6. Add-on auth - http://git.io/cf06pA
17:07 < drim> konobi: do you have an example ? 
17:07 <@konobi> drim: MDN
17:08 < drim> I don't think sort will works, I want an indexed array by user_id
17:08 < superjoe> thanks for the links warz and brettlangdon 
17:09 < Marek_> hi
17:10 < Marek_> does anybody here use sharejs?
17:10 < brettlangdon> superjoe, np, if you run into any issues don't be afraid to ask
17:11 < superjoe> thanks I appreciate it
17:12 < Marek_> i need some help with sharejs
17:12 < Marek_> please please please
17:20 < bnoordhuis> Marek_: just ask your question. if someone knows, s/he'll speak up
17:26 < Marek_> i don't know. maybe i am stupid or sth. everytime i try to implement sharejs in my aplication sth does not work
17:28 < Marek_> i am going step by step with https://github.com/josephg/ShareJS/wiki/Getting-started
17:28 < Marek_> it is not working
17:32 < q_> can anyone recommend a good mail client for fetching imap ?   I'm looking for something that say email.message, email.body etc ...everything Ive found just raw
17:33 < mscdex> email.message?
17:34 < mscdex> q_: you can do what you want pretty easily with the imap module
17:37 < q_> I have the imap module, do I need another mailparser module with it or something ?
17:37 < mscdex> depends on if you need to do multipart parsing
17:44 < q_> mscdex, Im just looking for the body part of the email, I beed body: true  in the options to fetch ?
17:45 < mscdex> q_: yep
17:46 < superjoe> is there an ejs module which can parse ejs and output a list of substitutions?
17:46 < mscdex> q_: look at the second example, it buffers the message body
17:51 < q_> what version are those examples, the latest ?
17:51 < q_> I'm still using ImapConnection
17:52 < q_> ^ mscdex 
17:52 < mscdex> q_: use the latest version from npm
17:52 < q_> kk
17:58 < MI6> joyent/node: Ben Noordhuis master * cf26b42 : repl: allow overriding builtins  Don't give names of built-in libraries s - http://git.io/TH5E5g
18:04 < q_> mscdex, sorry to  bother, im getting blank bodys with this code https://gist.github.com/4445420 , the output ,  https://gist.github.com/4445426
18:04 < q_> I ripped the code from the second example
18:07 < q_> mscdex, chunk has data in it - must be a scoping problem
18:17 < Kakera> how would you call a property of an Error object that tells you what exactly happened? In my case, possible values are 'loggedOff', 'connectionFail' and 'logonFail'
18:18 < Kakera> (values subject to change)
18:24 < q_> Kakera,  if you dont know the key names, you can loop through the object, for ( key in obj ) { obj[key] }
18:24 < Kakera> q_, I'm the one creating this object
18:25 < mscdex> Kakera: 'code' or something like that is generally what i use
18:26 < Kakera> but 'loggedOff' can hardly be called a code
18:26 < Kakera> unlike, say, ENOENT
18:26 < Kakera> I'm thinking of just going with 'error', but then handling it would look something like: obj.on('error', function(error) {if (error.error == 'sdfsdf') ..});
18:26 < q_> errorText, responseText, errorMsg
18:28 < Kakera> someone in ##javascript suggested 'cause', I like it
18:30 < q_> I like that too
18:32 < geNAZt> hiho
18:33 < sohcahtoa> TooTallNate: you happen to be here? I have a node-canvas issue
18:33 < TooTallNate> sohcahtoa: i am
18:34 < sohcahtoa> let me paste my code I might be missing somehting obvious OR I somehow screwed up node-canvas install 
18:34 < niggler> TooTallNate: do bugfixes make their way into the latest stable version?
18:35 < bnoordhuis> niggler: usually, yes
18:35 < TooTallNate> niggler: if they don't change api/abi, yes
18:35 < niggler> hey bnoordhuis i realized where i screwed up, but by that time i already nuked the repo and it wasn;t letting me re-fork
18:35 < niggler> https://github.com/joyent/node/pull/4513 does this conform to the contributing guidelines?
18:36 < bnoordhuis> let me check
18:36 < sohcahtoa> when I save the canvas I get no errors but adding a png to the canvas doesn't "work" (ie the image is not there, the canvas is the right size, if I try to add a text string it works http://pastebin.com/4aenmqfj
18:36 < bnoordhuis> niggler: "REPL Floating Point bugfix" <- too general, could be anything
18:36 < niggler> struggling to keep it under 50 characters :/
18:37 < bnoordhuis> niggler: i'd use something like "repl: fix floating point number parsing"
18:37 < bnoordhuis> and yes, it's a challenge to keep it <= 50 chars :)
18:37 < bnoordhuis> i often spend more time on the commit log than on the patch itself
18:37 < niggler> i like it though (the idea of keeping the commit to 50 characters)
18:39 < TooTallNate> sohcahtoa: looks like you need to read up on how asynchronous functions work in node ;)
18:39 < TooTallNate> sohcahtoa: basically, everything from "var out" below should be within the readFile callback function
18:42 < niggler> ok bnoordhuis changed :)
18:43 < niggler> working with github feels extremely kludgy compared to working with git directly
18:43 < sohcahtoa> lemme work on that
18:46 < sohcahtoa> ok great png worked
18:47 < ChrisMatheson> hi, does anyone know if there are any Node.js PaaS providers which let you use multiple ports ? not just port 80
18:47 < ChrisMatheson> *or the internal port they assign mapped to port 80 of your subdomain
18:48 < niggler> nodejitsu doesnt let you listen on multiple ports?
18:49 < ChrisMatheson> I'm using app fog now (which is based on cloud foundry) and the port is assigned to you through an env var and as far as i can tell there is only on avaliable
18:49 < niggler> or windows azure
18:49 < ChrisMatheson> havent tried nodejitsu yet
18:49 < ChrisMatheson> heroku i think do that same (env var)
18:50 < ChrisMatheson> i also couldn't see anything in the nodejitsu docs (only had a quick look mind you)
18:55 < sohcahtoa> cool got gif and jpeg working too. thanks T.T.Nate
18:55 < niggler> actually it appears nodejitsu does the same thing
18:56 < ChrisMatheson> yeah, I'm guessing that its somewhat of a problem all around, no one seems to :P 
18:57 < ChrisMatheson> thanks for your input niggler :)
18:57 < niggler> im disappointed ChrisMatheson
18:57 < niggler> i would think they'd give you an option to request multiple ports, but that's wishing for too much
18:58 < ChrisMatheson> i was hopping to run a repl on the side of my web server on a separate port so that i could probe it during development
18:59 < niggler> https://github.com/nodejitsu/node-http-proxy is the nodejitsu solution
19:02 < mscdex> q_: ok, there was a bug. please try the master branch now
19:04 < mscdex> q_: also `markSeen` goes in the object where `struct` is set to false, but you really don't need it since `markSeen` defaults to false
19:05 < MI6> joyent/node: Ben Noordhuis master * a7d8c21 : Merge remote-tracking branch 'origin/v0.8'  Conflicts: 	configure 	deps/u (+2 more commits) - http://git.io/EIpCJQ
19:13 < niggler> bnoordhuis what bot is running MI6
19:14 < tjfontaine> what seems to be the issue?
19:14 < niggler> oh no i was wondering how it was setup tjfontaine
19:14 < niggler> (id like to do something similar internally)
19:14 < tjfontaine> niggler: it's a little node-irc bot that accepts weburl hooks from github
19:16 < tjfontaine> niggler: this may not be entirely up to date https://gist.github.com/3794720 for instance the package.json is wrong but anyway that's essentially it
19:17 < niggler> certainly better than having the bot log in/out every comment on post-receive
19:17 < tjfontaine> don't get me started.
19:38 < FunnyLookinHat> I've built and implemented a basic game engine that handles position / speed / direction / etc. - but I want to be able to customize the rules of the world that it's running with an API of sorts.  i.e. create custom events, fire them off, implement the API for when users collide, etc. etc. - anyone know how I should be approaching that?
19:38 < FunnyLookinHat> The goal is to be able to write a ton of event handlers and emitters for both the server ( node.js ) and client in JS and have them work in tandem
19:38 < cellvia> have you looked at any of the existing js game engines
19:38 < cellvia> for inspiration
19:38 < FunnyLookinHat> cellvia, there are a lot.... that's part of the problem.
19:38 < cellvia> ah
19:39 < FunnyLookinHat> Do you have a one or two that make sense to you?
19:39 < cellvia> i havent even looked into that
19:39 < FunnyLookinHat> i.e. there's good Node, and god-awful Node.  :)
19:39 < cellvia> cant say...
19:39 < cellvia> sounds cool tho
19:39 < FunnyLookinHat> heh
19:41 < cellvia> performance question yall:  simple json files looped and straight from files ,  or json pulled from something like redis or mongo
19:41 < cellvia> any thoughts or drawbacks ,  5~10 objects here
19:42 < cellvia> maybe 20
19:42 < cellvia> would be queried each time a new user hit the website
19:42 < tjfontaine> depends on how often they'll be reloaded, and how your filesystem's cache is tuned
19:42 < cellvia> can you think of any drawback besides performance
19:42 < cellvia> to either approach
19:43 < FunnyLookinHat> I'd do it with Redis personally - I strongly dislike storing things in the filesystem...
19:43 < FunnyLookinHat> it requires users to have their perms setup correctly, etc.
19:43 < FunnyLookinHat> And redis can be expanded when necessary - so that you won't have to duplicate files across systems
19:43 < cellvia> i was going to releverage the package.json file and add a coupe custom params
19:43 < cellvia> and query those 
19:44 < tjfontaine> cellvia: well, if multiple processes will be writing to them at the same time you probably want something to mediate that, if it's mostly read and single writer, then no reason you can't go with filesystem
19:44 < cellvia> no writing, only read
19:44 < FunnyLookinHat> Wait - so are these loaded once or multiple times?
19:44 < FunnyLookinHat> what tjfontaine said then
19:44 < cellvia> good point, i could load the objs into memory on app init
19:44 < FunnyLookinHat> yeah 
19:44 < FunnyLookinHat> They'll take up all of a few K at most
19:44 < cellvia> in that case filesystem is fine
19:45 < cellvia> sweet thanks 
19:49 < exit2> sup noders
19:51 < tnorris> bnoordhuis: using `->Get(String::New("length"))` made the call 2.5x's slower.
19:51 < ChrisMatheson> FunnyLookinHat & cell via just for my own info, i thought redid was a in-memory DB ? wouldn't that make it faster than FS stuff by default? (you gotta get the bits into Redis granted)
19:52 < tnorris> bnoordhuis: I feel like <buffer_instance>.length should be a non-writable attribute.
19:52 < bradleymeck> isaacs: writing that test /doc now, sorry for delay
19:52 < FunnyLookinHat> ChrisMatheson, what's the point of spinning up a memory-based database if you'll just have the objects loaded into memory once and done?
19:53 < FunnyLookinHat> ChrisMatheson, i.e. You'll have faster access by having them loaded in your application as objects ( thus stored in memory ) - and because they're read only once, and never being written to - it's just simpler to store locally.
19:53 < FunnyLookinHat> Otherwise you'd have to load them up - write them to the DB - then read from DB over and over again.
19:53 < ChrisMatheson> oh def, i agree that load once and use often for this case, it was just a general understanding thing for the future
19:53 < FunnyLookinHat> Ahh
19:53 < FunnyLookinHat> yeah - REDIS is in-memory ( and VERY fast ).
19:54 < bradleymeck> FunnyLookinHat: depends on several things such as in memory shared vs non (look at volt db)
19:54 < ChrisMatheson> the down side of learning all these technologies from the internet on your own is you always have doubts about your own understanding until someone conforms things ;)
19:54 < FunnyLookinHat> It being a key-value based system makes it a breeze for whipping things up too...  just check if a key exists, if not, write your json or whatever, if it does, read / update / etc.
19:54 < FunnyLookinHat> bradgignac, obvs.
19:54 < FunnyLookinHat> Hadn't heard of volt before - I'll check it out
19:56 < CoverSlide> voltdb is just compiled-in prepared functions
19:56 < FunnyLookinHat> ah.
19:56 < CoverSlide> interesting idea though
19:57 < CoverSlide> i think built on sql of some sort
19:57 < CoverSlide> but you have to recompile & redeploy your db each time you make a change
19:57 < bradleymeck> CoverSlide: mostly, it does some interestin WAN replication and optimizations, its a subset of sql that must be programmed in Java for now but drivers exist for most languages
19:58 < bradleymeck> CoverSlide: the live changes are brutal, I agree :-/, had some talks with them about it, but it always came down to using export tables or making new tables for each schema, :(
19:58 < cellvia> ChrisMatheson so true... and the dynamic and quick changing pace doesnt help w/ that either ;)
20:07 < CoverSlide> They call me Snow Miser! Whatever I touch ...
20:08 < CoverSlide> turns to snow in my clutch!
20:08 < CoverSlide> I'm too much!
20:10 < cellvia> I'm not sure if im supposed to be intimidated by that
20:11 < cellvia> plz advise
20:15 < astropirate> So friends, anyone know anyone hiring? :)
20:15 < cellvia> ;)
20:16 < astropirate> cellvia, \o/
20:17 < cellvia> im def gonna pass on your resume, as far as this node proj tho i need to get it really solid befor ei can make the case for hiring another dev on it
20:17 < cellvia> i def wont forget tho :)
20:18 < astropirate> cellvia, thank you! :D
20:22 < niggler> there needs to be a bot that yells at people treating this channel like a jobs forum
20:23 < cellvia> but then youd be out of a job :(
20:24 < niggler> hah i wish i were paid to yell at people
20:24 < cellvia> dude you shoulda been a high school gym teacher
20:25 < zomg> This channel is good as any for job foruming
20:25 < zomg> eg. not very good at all since nobody has jobs to offer
20:25 < niggler> there probably is a channel devoted to jobs
20:26 < zomg> I would still expect to have more luck finding a node job asking here than on some generic jobs channel
20:26 < warz_> Try #startups. They're always up to ... something.
20:26 < tjfontaine> instead of asking, just spend your time demonstrating, helping, and publishing, it's the best way to get noticed
20:26 < niggler> #startups would be the worst place
20:27 < niggler> prima facie one would imagine they are all looking for work
20:27 < zomg> tjfontaine: I have yet to see anyone offer me a job because I'm helpful
20:28 < zomg> Nor because I've published a lot of helpful stuff either =)
20:28 < tjfontaine> zomg: perhaps urdoinitwrong -- or the right match has yet to come along
20:28 < zomg> The fact I've published a lot of helpful stuff has helped me to ace job interviews though
20:28 < zomg> but getting the interview had nothing to do with having done that
20:29 < superjoe> sendgrid's click tracking breaks because encodeURIComponent does not change ' into %27
20:29 < zomg> Maybe I should have spammed my stuff on Hacker News move
20:29 < zomg> *more
20:29 < superjoe> is encodeURIComponent's behavior correct?
20:29 < zomg> but it didn't feel right to post my own stuff
20:29 < niggler> lol it seems like a circle jerk of the unemployed
20:29 < CoverSlide> i have 1 position for position of "slave"
20:29 < niggler> superjoe define "correct"
20:29 < CoverSlide> 0 salary, 0 benefits
20:30 < somebody1> you're the best, warz_
20:30 < zomg> CoverSlide: sounds pretty much like most of the jobs they have available here ;>
20:30 < CoverSlide> haha true
20:30 < zomg> (here as in where I live, not as in this channel)
20:30 < CoverSlide> oh
20:30 < niggler> where do you live?
20:30 < zomg> Finland
20:31 < zomg> In a city that's said to be a "technology city"
20:31 < CoverSlide> well there's plenty of startuppy people running around trying to hire people for shares 
20:31 < niggler> isnt that nokia wasteland?
20:31 < zomg> niggler: pretty much
20:31 < warz> thats very mystical
20:31 < niggler> its adverse selection
20:31 < CoverSlide> "you can get 20% of $0" !!!
20:31 < niggler> employing people is hard
20:31 < zomg> Most jobs = PHP for marketing agency (shit pay, boring as hell work), Java (not as shit pay, but horrible enterprisey stuff) or some sort of really specialized embedded hardware stuff nobody knows how to do
20:32 < CoverSlide> there's tons of dutch people in tech
20:32 < CoverSlide> i don't know how it is for the rest of scandinavia
20:33 < CoverSlide> but most of them work over here, or for a company over here
20:33 < zomg> I checked out a bunch of job forums here + linkedin for everyone who lives here... nobody seems to be doing anything remotely interesting
20:33 < zomg> Sure, I could get some menial Java job
20:33 < zomg> but I don't really want one
20:34 < cellvia> if you want a tech job just go to san francisco and hang out or a month
20:34 < zomg> So I'm just writing some haskell learning material that I might be able to self-publish as an ebook assuming I ever get it finished =)
20:34 < CoverSlide> because ebook publishing is where the money is
20:34 < cellvia> ui devs are being scooped up voraciously there
20:34 < zomg> CoverSlide: I know right?
20:35 < niggler> screw SF
20:35 < zomg> I enjoy writing that sort of stuff, so why not since I have all the time in the world
20:35 < superjoe> hmm I am disappointed
20:35 < cellvia> sf <3
20:35 < zomg> Plenty of people looking to learn functional programming these days so it could have an audience :)
20:35 < superjoe> I think that encodeURIComponent should change "'" to %27
20:35 < superjoe> but I'd have to take that up with v8
20:35 < superjoe> no way they'd do that
20:35 < CoverSlide> is that a v8 thing?
20:35 < cellvia> im in austin but i got this job cause austin tech ppl are trying to siphon off the sf techies
20:36 < CoverSlide> i think encodeURIComponent is standardized
20:36 < CoverSlide> or at least agreed upon
20:37 < CoverSlide> i got a guy who works for blizzard who got offered to move to austin
20:37 < CoverSlide> he didn't take it
20:37 < cellvia> yeah cause its in texas lol
20:37 < cellvia> austin isnt bad tho
20:37 < superjoe> CoverSlide, it leaves open a security hole, but you wouldn't expect it to
20:37 < st_luke> encodeURIComponent is in es3
20:37 < warz_> Cellvia: where you work in Austin?
20:38 < cellvia> crimson, software company acquired by mammoth advisory board company
20:38 < zomg> If I actually was interested in moving to somewhere else I could easily get some work I'm sure
20:38 < zomg> But since I'm not... =)
20:38 < CoverSlide> superjoe: you need to properly sanitize. encodeURIComponent isn't necessarily for sanitization, just for making the string URL-friendly
20:38 < cellvia> its in the same area as apple 
20:38 < superjoe> CoverSlide, yeah, that's totally unexpected
20:38 < superjoe> I suppose it's ok
20:40 < geNAZt> i have a question to databases
20:40 < geNAZt> i have much read over to the write queries
20:40 < geNAZt> which one would fit best in this case ?
20:41 < geNAZt> it would be nice if it knows something like foreign keys
20:41 < geNAZt> and expire indexes
20:41 < geNAZt> currently i am using mongodb but it is slow at writing
20:42 < tnorris> was master history altered or something? i'm having to rebase all my development branches to the new force-updated master.
20:42 < CoverSlide> you can add foreign keys as fields
20:42 < CoverSlide> but you'd have to fetch the new keys etc separately
20:42 < geNAZt> i know that mongodb cant join them
20:43 < geNAZt> but does mongodb has a foreign key system ?
20:43 < CoverSlide> that's the problem with using mongodb like a relational database
20:43 < geNAZt> like mysql
20:44 < geNAZt> i have a record a and a record b. b.user = a. if i delete a does mongodb throw an error ?
20:44 < tnorris> i mean, come on. it's a pain in the ass to rebase all my dev branches against master.
20:45 < CoverSlide> geNAZt: no
20:45 < CoverSlide> geNAZt: it just has a key that points to nothing anymore
20:45 < CoverSlide> i think
20:45 < geNAZt> but then again why is mongodb so slow ( i have a 2x1.6ghz, 4gb ram machine )
20:45 < CoverSlide> the key is just a string
20:46 < geNAZt> and it took almost ~360ms to store a document
20:46 < CoverSlide> it doesn't check your strings
20:47 < geNAZt> and i flyed over the voltdb documentation
20:47 < CoverSlide> the most disgusting thing about this profession is when you have to flip over your keyboard and shake it out
20:47 < geNAZt> and it seams, that they dont implemented the sql99 standart complete
20:47 < CoverSlide> right
20:47 < eydaimon> expressjs question: how does one get cookie information for expirations etc?
20:48 < geNAZt> then mysql would be the way to go ?
20:48 < geNAZt> or did couchdb have a better writing and does allow foreign key with delete blocker
20:48 < CoverSlide> or rather mariadb
20:48 < CoverSlide> couch doesn't do that either
20:49 < jcrew> genatz: how many records and are you doing odm?
20:50 < geNAZt> around 1500 writes
20:50 < geNAZt> and about 100-150k reads
20:50 < CoverSlide> eydaimon: req.headers.cookie ?
20:51 < eydaimon> CoverSlide: I'll have a look, thanks
20:52 < eydaimon> CoverSlide: appears to be the same as req.cookies .. just cookie name and value
20:52 < CoverSlide> hmm
20:52 < CoverSlide> perhaps that info is write-only
20:53 < cellvia> write only?
20:53 < cellvia> you can do that in js?
20:53 < cellvia> oh sorry misunderstood
20:54 < geNAZt> can i use the node-mysql from felixge to access mariadb ? since it uses the mysql syntax
20:54 < CoverSlide> i personally don't work with internals
20:54 < eydaimon> CoverSlide: yeah, I need to be able to set cookies too
20:54 < CoverSlide> geNAZt: I use it with node-mysql all the time, I haven't had any issues
20:55 < geNAZt> nice
20:55 < felixge> geNAZt: should work
20:55 < geNAZt> i will try that out
20:55 < geNAZt> thanks
20:55 < felixge> but haven't tried myself
20:55 < felixge> :)
20:55 < geNAZt> hi felix :D
20:55 < CoverSlide> but ymmv
20:55 < felixge> i would be surprised if they made mysql incompatible protocol changes in the server, as that would lock them out of the mysql driver ecosystem
20:56 < CoverSlide> yeah
20:56 < geNAZt> that would be horrible 
20:56 < felixge> ( https://kb.askmonty.org/en/mariadb-versus-mysql-compatibility/ )
20:57 < geNAZt> felix did you have a release date for the new parser in mysql ?
20:57 < nathan7> jesusabdullah: did we get mirroring working yet?
20:57 < CoverSlide> there shouldn't be any incompatibilities with mysql. the goal of the mariadb project is to be a drop-in replacement for mysql
20:57 < CoverSlide> https://kb.askmonty.org/en/mariadb-versus-mysql-compatibility/
20:57 < CoverSlide> ah dammit beat me to it
20:58 < jesusabdullah> nathan7: I've been really busy
20:58 < nathan7> jesusabdullah: do we have it or not
20:59 < nathan7> jesusabdullah: merely a request for information
20:59 < jesusabdullah> unless you did it, no
20:59 < nathan7> okay
20:59 < jesusabdullah> iirc afaik
20:59 < nathan7> I've done embarassingly little
20:59 < nathan7> *embarrassingly
21:04 < felixge> geNAZt: nope, not sure if I'll find the time anytime soon
21:05 < jesusabdullah> nathan7: all good man
21:05 < felixge> I could port some low hanging fruits in terms of optimizations
21:05 < geNAZt> schade :D
21:05 < jesusabdullah> gnight friends
21:05 < felixge> but … the current faster is really fast enough for the real world
21:05 < felixge> and I've switched to go ;)
21:05 < jesusabdullah> wut
21:05 < jesusabdullah> for shame!
21:05 < CoverSlide> oh noes!
21:05 < jesusabdullah> that's not javascript at ALL
21:06 < felixge> you guys need to try it, it will change your life
21:06 < CoverSlide> felixge: have you put go on your copter?
21:06 < jesusabdullah> I'm skeptical
21:06 < jesusabdullah> but who knows
21:06 < jesusabdullah> someday I may
21:06 < felixge> CoverSlide: I've started to write a firmware in go
21:06 < CoverSlide> awesome
21:06 < nathan7> noooo
21:06 < nathan7> Damnit, Felix.
21:06 < CoverSlide> go is pretty nice
21:07 < felixge> CoverSlide: got as far as controlling the LEDs and Motors, but then became too lazy to do the actual stabilization, which means I got a kamikaze drone
21:07 < CoverSlide> i just dont have as much spare time to hack on it as i used to
21:07 < jesusabdullah> anyway as I was saying
21:07 < jesusabdullah> good night friends
21:07 < jesusabdullah> !
21:07 < CoverSlide> goodnight acquaintance
21:08 < nlf> felixge: that's almost *more* fun
21:09 < felixge> nlf: I used it to build a drone-powered chair
21:09 < felixge> that was fun
21:09 < CoverSlide> awesome
21:09 < nlf> haha
21:10 < CoverSlide> making drones your slaves
21:11 < CoverSlide> next thing you know, in the next conf we see felix in a long black cape and an army of drones pull it off
21:11 < CoverSlide> like some supervillain
21:13 < felixge> CoverSlide: indeed, we are currently acquiring an army of drones
21:13 < felixge> http://summerofdrones.com/
21:14 < felixge> work in progress, but will be fun
21:14 < felixge> :)
21:14 < substack> an army!
21:14 < cellvia> thats what im talking about
21:16 < CoverSlide> ar drones are nice, but expensive. if someone could hack the IR protocols on those $30 helicopters they have at the mall, i'd buy like 50 of those and wreck some shit
21:17 < CoverSlide> also doesn't parrot make a tank? has anyone played with that?
21:17 < zomg> There's software for some older IR capable phones to record IR signals so I don't think hacking the protocol would be too hard, just record and repeat =)
21:18 < zomg> Today's super phones of course are completely incapable of IR so you'd need to dig out an older non-super phone
21:18 < CoverSlide> or maybe it's someone else that has those tanks that they stack next to the drones at brookstone
21:19 < CoverSlide> here we go: http://www.brookstone.com/rover-remote-control-spy-tank-for-ipad
21:19 < CoverSlide> it doesn't fly, but it's cheap. can be used like those slugs from farscape
21:20 < [Fudge]> having an odd issue with: https://gist.github.com/raw/1125621/21a6018a18c8878542ddf83a6c316085a066688d/omegle_chat.js
21:20 < [Fudge]> getting this error:
21:20 < [Fudge]>   buf.writeUInt16(datalen, taglen+1, 'big');
21:20 < [Fudge]>       ^
21:20 < [Fudge]> TypeError: Object 
21:20 < [Fudge]>                   omegleStart&)"(
21:20 < [Fudge]> I have absolutely no idea what's causing it
21:21 < [Fudge]> and there isn't any expressive error information
21:22 < felixge> CoverSlide: there are people hacking on open replacements for the AR Drones
21:22 < felixge> will take time
21:22 < felixge> but we'll get there
21:22 < CoverSlide> yeah
21:22 < AviMarcus> CoverSlide, only 6 AA? is that enough power?
21:22 < CoverSlide> i dunno, haven't tried it
21:23 < felixge> especially as 3d printers continue to improve (which I'm a bit skeptical about, since we have not even gotten 2D printers that work properly yet)
21:23 < CoverSlide> true
21:25 < CoverSlide> are there any options to make your own pcb's?
21:25 < zomg> CoverSlide: I hear some chinese factories do those on the cheap even if you don't order in large quantities
21:25 < CoverSlide> hmm
21:26 < zomg> I'm checking with the guy who talked about those assuming he isn't afk...
21:28 < hbeck> having a terrible time getting an Upstart script working with my node app...anyone good with that?  I've looked at probably a dozen examples so far and tried several things with no luck
21:29 < nlf> hbeck: sure, gist it
21:30 < hbeck> nlf: how bout dpaste? Haven't used gist myself yet...  http://dpaste.com/862264/
21:31 < hbeck> that's the original iteration, which I got from https://gist.github.com/3823330
21:32 < nlf> well "sudo -u user" is probably wrong
21:32 < nlf> unless you're really trying to run it was the user "user"
21:32 < hbeck> nlf: yeah good point...
21:32 < hbeck> fixing that still same results, though
21:33 < nlf> and what is the result? just nothing happening?
21:33 < sohcahtoa> upstart changed syntax at some point
21:33 < hbeck> seems to start and immediately die (my app works fine outside upstart)
21:33 < sohcahtoa> I'm not sure when but my older scripts no longer worked and I was going nuts
21:33 < hbeck> also works fine with forever
21:34 < nlf> make sure that permissions are right for the log files
21:34 < nlf> i.e. they weren't created by root and are now owned by root
21:35 < nlf> also i wouldn't bother using forever in an upstart script
21:35 < nlf> just let upstart do the respawning
21:36 < hbeck> nlf: had looked at that
21:37 < hbeck> nlf: but even if I junk the forever part and just try to run "node app.js" type of thing, still no go
21:37 < nlf> what version of ubuntu are you using?
21:37 < hbeck> this is on centos actually
21:37 < nlf> oh, i didn't realize cent had upstart
21:38 < hbeck> yeah, at least this version did
21:38 < nlf> see what version of upstart you're using then - sudo start --version
21:38 < hbeck> 0.6.5
21:38 < paulbjensen> I had to pass the full path to the node binary in my upstart script
21:38 < nlf> 0.6.5? seriously? that's ancient
21:38 < hbeck> may be part of the problem lol
21:38 < chovy> hbeck: try node-startup?
21:39 < hbeck> maybe I should just write old school init script
21:39 < nlf> the latest is 1.5 i believe
21:39 < chovy> hbeck: https://github.com/chovy/node-startup
21:40 < mclenithan> I have an interview for my first developer position.  I have been focusing all my efforts building a portfolio with node.js.  They want to see some angular.js development.  Anyone have a good idea for a quick project I can build integrating node.js, socket.io, and angular?
21:40 < nlf> chovy: centos isn't debian based, so if that's really dependent on debian that may not work 
21:40 < chovy> mclenithan: see if todomvc has it
21:40 < chovy> nlf: i think it will work. it's not really debian specific.
21:40 < chovy> that's just the only os i've tried it on.
21:40 < nlf> fair enough
21:40 < mclenithan> chovy: thanks.
21:40 < nlf> worth a shot, i'd say
21:41 < chovy> or check a tutorial on udemy
21:41 < chovy> that's what i did for a backbone interview the other day.
21:41 < chovy> i was honest, said I didn't have much experience w/ backbone, but could probably pick it up quickly.
21:42 < mclenithan> yea thats pretty much how I am coming into this.  thanks for the resource this will help
21:42 < chovy> nlf: actually, would you mind testing it on CentOS? I will add a note, that debian is the only platform I've tested it on , but should work on redhat and others
21:44 < nlf> i don't have a centos server handy, but maybe hbeck can provide some feedback for you
21:45 < chovy> sorry, i meant hbeck
21:45 < chovy> I updated the readme
21:46 < nlf> you should edit the project description too
21:46 < nlf> right now it reads "Startup script for debian-based linux for running node app when rebooting"
21:46 < chovy> done
21:47 < nlf> looks to me like it should be fine in other distros
21:48 < chovy> k
21:48 < bradleymeck> isaacs: any idea how to spawn a .fork on windows and detect that it was spawned using execPath, can't really use shebangs and env vars are a misguided test case, as you said we should avoid shell scripts
21:49 < superjoe> niftylettuce, you there?
21:55 < chovy> niftylettuce: congrats on dailyjs
21:57 < cellvia> what about dailyjs?
21:57 < ThiefMaster> hi, does anyone know if there's a package on npm that parses binary structures nicely and supports bits? i've seen modules like "binary" but they usually doesn't support anything smaller than a whole byte
21:57 < chovy> node-email-templates was mentioned in dailyjs
21:58 < mscdex> the niftiest lettuce i've ever known
21:58 < chovy> salad is cool again
21:58 < cellvia> nice
22:05 < nathan7> ThiefMaster: I wonder if there's anything like perl's pack()
22:05 < nathan7> and unpack()
22:06 < ThiefMaster> right now i'm looking at https://github.com/bigeasy/packet - might be able to do what i'm looking for
22:07 < tnorris> can anyone help me with properly retrieving the passed External: https://gist.github.com/4447797
22:07 < tnorris> it works with String, but not External.
22:08 < zomg> CoverSlide: http://store.iteadstudio.com/index.php?main_page=index&cPath=19
22:09 < andu> tnorris, what do you mean? did you add that expected 6 stuff at the end?
22:10 < andu> tnorris, whoop, looking at wrong gist
22:10 < tnorris> andu: forgot to comment out line 35 of arr.cc. and accidently posted it annonymously so can't change it.
22:13 < tnorris> andu: here's an updated: https://gist.github.com/4447841
22:14 < CoverSlide> zomg: sweet
22:15 < AviMarcus> has anyone used graph-document DBs, like http://www.orientdb.org ? I first heard of them today
22:16 < AviMarcus> s/them/the category/
22:16 < CoverSlide> neo4j seems more popular
22:16 < cellvia> look at titan
22:16 < CoverSlide> there's also titan but that needs a distributed backend like hadoop or cassandra
22:17 < cellvia> licensing is better
22:17 < CoverSlide> true
22:17 < cellvia> plus marko is a badass
22:17 < AviMarcus> oh I heard of neo4j
22:18 < blazes816> AviMarcus: I love graph dbs!
22:19 < blazes816> a lot of theoretical issues still need to get worked out though, so it's definitely a "use it only when you need to" technology
22:19 < CoverSlide> i don't know of anyone actually using titan tho. 
22:19 < nathan7> Neo4j's being-Java kind of turned me away from it
22:19 < AviMarcus> I doubt this question has a short answer: but the short description sounds like graph DBs do relations *better* than RDBMS but I don't think I saw any explanation of HOW they get that speed increase
22:20 < CoverSlide> i agree
22:20  * AviMarcus doesn't like java.
22:20 < blazes816> CoverSlide: not in prod, but I"ve been playing with it a lot.  it's nice
22:21 < blazes816> AviMarcus: graphs handle relationships better than tables do.  idk that they're 'faster' however
22:21 < CoverSlide> of course titan, orient, and neo4j are all built on java, no?
22:21 < jdunhan> What's the most used async flow module library people are using?
22:21 < blazes816> their main benefit is ease of translating the domain into data
22:22 < blazes816> CoverSlide: they are indeed :(
22:22 < cellvia> the tinkerpop library is just so cool though
22:22 < cellvia> i guess you could use that with orient too
22:22 < cellvia>  ?
22:22 < AviMarcus> jdunhan, here's one: https://github.com/caolan/async
22:22 < blazes816> cellvia: yep
22:22 < blazes816> they aim is to be graph-db agnostic
22:23 < cellvia> blazes816 so are you currently in prod w/ a graphdb? what ya usin?
22:23 < blazes816> cellvia: I have neo4j running prod, but for an internal application so it's much less critical
22:24 < blazes816> looking at moving to titan
22:24 < AviMarcus> talking about production, anyone here using rethinkdb?
22:24 < jdunhan> AviMarcus, Thank you, I didn't know if people still used it. Hasn't been updated in a few months
22:24 < cellvia> jesus just in the past hour you guys have mentioned 2 dbs i never even heard of... 
22:25 < cellvia> blazes816 are you using node w/ your neo4j?  are you accessing via rest ?
22:25 < AviMarcus> rethinkdb doesn't yet have secondary indexes. it's prioritized for the next one or two releases
22:25 < AviMarcus> so I haven't even bothered to try using it in production...
22:25 < jcrew> AviMarcus: if you're doing read heavy and want faster lookups then column stores are good
22:26  * CoverSlide gives up and uses mysql
22:26 < AviMarcus> jcrew, column stores?
22:26 < cellvia> lol
22:26  * AviMarcus didn't realize how large the DB world was until last week
22:26 < jcrew> column store databases
22:26 < cellvia> CoverSlide im sorry to say even mysql has been corrupted.  now we have to decide whether to drop in mariadb in place of it.
22:27 < cellvia> nothing is simple anymore
22:27  * cellvia sobs
22:27 < Zelest> o_O
22:27  * Zelest gives cellvia PostgreSQL. :-)
22:27 < tjfontaine> amen.
22:27 < CoverSlide> seems like everyone is creating a new database every month
22:27 < CoverSlide> i shall make a node-based db, like mbalho talked abou
22:27 < tjfontaine> libpq, giving you sane async client libraries for years.
22:28 < jcrew> they're getting to be popular in data warehouses where you're read heavy because they store data in columns rather than rows, so instead of trying to compress or index all of the data in a row they compress and index like data, only with like data
22:28 < cellvia> Thanks Zelest :)
22:28 < AviMarcus> jcrew, example of that type?
22:28 < cellvia> I will add it to my pile of databases!
22:28 < AviMarcus> is that cassandra?
22:28 < jcrew> AviMarcus: one sec
22:28 < jdunhan> Could I get help with this weird async behavior? https://gist.github.com/4447996
22:29 < tjfontaine> pretty soon everyone will be back on PICK
22:29 < jcrew> AviMarcus: http://blog.kejser.org/2012/07/04/how-do-column-stores-work/
22:29 < CoverSlide> PICK?
22:29 < cellvia> jdunham, what are you expecting
22:30 < tjfontaine> CoverSlide: http://en.wikipedia.org/wiki/Pick_operating_system
22:30 < cellvia> i dont see a problem, all of those will run in parallel
22:30 < jcrew> AviMarcus: it looks like it might be, Oracle has had a product for quite a long time
22:30 < jdunhan> the constructor returns before the stats get pushed into an array.
22:30 < jdunhan> so the array is empty.
22:30 < jcrew> SAP just released HANA which runs column store in RAM
22:31 < jcrew> with a mechanism to keep disk and RAM in sync
22:31 < cellvia> the constructor?
22:31 < jdunhan> cellvia I didn't include that part, I'll make another with the full constructor code
22:32 < AviMarcus> thanks for the link jcrew 
22:32 < cellvia> jdunham do you understand how async works in node?
22:32 < AviMarcus> I had 480 million number->number mappings that only updated 300k rows daily, then all read. Redis was awesome for that.
22:33 < cellvia> wow
22:33 < AviMarcus> mysql was pitiful...
22:33 < cellvia> how do you feel abuot redis + hashmaps
22:33 < cellvia> for storing JS objects
22:33 < cellvia> i inherited a project doing that and it seems messy
22:33 < AviMarcus> I only used it for number -> number mapping, but I batched them
22:33 < AviMarcus> 100 numbers per batch, so it used some sort of ziplist internally.
22:34 < AviMarcus> 2 ints in ~17 bytes with all the overhead
22:34 < jcrew> AviMarcus: these column stores are running R statistics packages against TB of data in hours/minutes instead of days :-)
22:34 < cellvia> AviMarcus what was the use for this?
22:34 < jcrew> they're terribly long to write to
22:34 < AviMarcus> cellvia, LRN data for USA phone numbers
22:35 < AviMarcus> cellvia, when you call a number in the USA, if it's been ported (seems over 50% have) then the carrier pays the cost of the new number, not the dialed number)
22:35 < CoverSlide> you can't nest structures in redis hashmaps
22:35 < AviMarcus> so... if you're doing wholesale, you kinda want to know the real number to find the best route
22:35 < CoverSlide> might as well use JSON string and SET
22:35 < cellvia> CoverSlide yeah i noticed that :(  really dirty IMO
22:36 < AviMarcus> redis and memcache  have ~60-80 byte overhead per object
22:36 < cellvia> AviMarcus what do you mean "ported"
22:36 < AviMarcus> I was able to batch groups of 100 items together to share that overhead
22:36 < cellvia> AviMarcus do you have a blog post on this, i'd read it
22:36 < AviMarcus> cellvia, if you switch cell carriers. Or move your home number to vonage. Or the carrier buys a whole range of numbers from another carrier
22:36 < jdunhan> cellvia, here https://gist.github.com/4448060
22:37 < MI6> joyent/node: Scott Blomquist master * 5a39df4 : windows: fix perfctr crash on XP and 2003  Some performance counter relat - http://git.io/xM8rBQ
22:37 < jdunhan> cellvia, I'm still trying to get a hang of it, it seems really weird sometimes. 
22:37 < bahaaldine> Hi I'm using History.js, state change are not detected when I'm pushing the same state sequentially ... any ideas ?
22:37 < cellvia> jdunham, your array is getting populated after your script is done
22:37 < bahaaldine> ex : History.pushState({state:2}, "/home", "/home");
22:37 < jdunhan> cellvia, Exactly, so how would I fix that?
22:37 < AviMarcus> cellvia, this seems decent: http://www.siproutes.com/local-routing-number (I actually use siproutes a tiny bit)
22:38 < cellvia> is there a LRN stock market that none of us even realize is going on
22:38 < AviMarcus> cellvia, this too: http://www.npac.com/number-portability/how-lnp-works
22:38 < AviMarcus> stock market?
22:39 < AviMarcus> e.g. I have ~6 carriers for USA calls so I do an LRN dip and then figure out which has the cheapest price to there
22:39 < cellvia> process.nextTick( function(){ console.log(collection.contents) } )   could be one way
22:40 < cellvia> AviMarcus yeah i think i need to read something basic cause i am compltely unaware of the whole mechanism
22:40 < AviMarcus> Oh! DBs - someone in here mentioned CUBRID but after 10 minutes of looking at the site, the only difference/benefit I think I really got is that you can select + increment a counter at the same time.
22:40 < jdunhan> Is there a different way? I want it to be a module, don't really wanna rely on people doing a nextTick call. There's no way to pause the constructor from returning until the forEach loop is finished?
22:41 < AviMarcus> jdunhan, link to current code?
22:41 < MI6> joyent/node: Scott Blomquist master * a616774 : windows: improve Visual Studio Express build support  * Moved generated f - http://git.io/8GKkMw
22:41 < AviMarcus> ah
22:41 < jdunhan> AviMarcus, https://gist.github.com/4448060
22:42 < AviMarcus> well, you can do a function instead with a callback?
22:42 < AviMarcus> pass the callback through and run it with your result after the foreach.
22:42 < AviMarcus> that's kinda a normal node.js thing.
22:42 < jdunhan> Well I wanted it to be a constructor because I wanna add some custom file operation functions on it.
22:43 < cellvia> you can still have a constructor inside there
22:43 < CoverSlide> put the constructor inside the callback
22:43 < cellvia> +1
22:43 < CoverSlide> having a constructor as a callback ...
22:43 < jdunhan> Can I see an example? I don't understand
22:44 < jrajav> I swore off constructors years ago
22:44 < CoverSlide> i keep em around for portability
22:45 < jrajav> My only browser work is with guaranteed jQuery, so..
22:45 < CoverSlide> still, if you have a complex front-end app, you need some kind of structure
22:45 < CoverSlide> jQuery will only halp you with the DOM
22:46 < bingomanatee> is there anyway in nom to update the package with the version of a module in node_modules?
22:46 < jrajav> CoverSlide: $.extend, yo
22:46 < CoverSlide> nom nom nom
22:47 < Alex_Qt> Hi
22:47 < jrajav> In personal projects I use _.defaults, _.clone, or Object.create
22:47 < AviMarcus> angularjs!
22:48 < nathan7> bingomanatee: not quite, no
22:48 < CoverSlide> bingomanatee: npm upgrade?
22:48 < nathan7> bingomanatee: but it shouldn't be necessary
22:48 < Alex_Qt> I  have problem with file upload and socket.io
22:48 < nathan7> bingomanatee: You usually want to use ~x.y.z anyway
22:48 < nathan7> bingomanatee: that's equivalent to >=x.y.z <x+1.0.0
22:48 < Alex_Qt> progress message send to all clients! Why?
22:48 < jdunhan> Well I guess I'll just use the *Sync functions, thanks anyways..
22:49 < CoverSlide> jdunhan: wait wait wait
22:49 < nathan7> bingomanatee: so or ~1.2.3 means >=1.2.3 but <2.0.0
22:49 < CoverSlide> hmm gone
22:49 < bingomanatee> Thanks.
22:49 < nathan7> The wonders of semver C=
22:50 < CoverSlide> nathan7: i think that means <1.3.0
22:50 < nathan7> hmm
22:50 < bingomanatee> I was hoping there was a script that would inject the versions I have into my package but I guess I just have to look myself. :D
22:50 < nathan7> There's an npm issue on it
22:50 < AviMarcus> npm install --svae
22:51 < AviMarcus> --save *
22:51 < AviMarcus> saves the.. exact? version to the package.json when installing something
22:52 < cellvia> any reason i shouldnt or couldnt depend on custom params in package.json for my app
22:53 < styol> Alex_Qt: I'm not familiar with that particular goal, but perhaps the scope of `this` is lost within whatever is responding progress resulting in a broadcast to all clients as opposed to an individual
22:53 < CoverSlide> cellvia: it should be ok
22:53 < CoverSlide> cellvia: people do it all the time, just beware of conflicts
22:55 < Alex_Qt> But How can write server side app that send progress to its own?
22:56 < Alex_Qt> have any example?
22:58 < ckknight> coding style-wise, for a multi-line ternary expression, would you rather have the ? and : be at the end of their lines or at the beginning?
22:58 < styol> Alex_Qt: socket.emit() vs io.sockets.emit() -- do you have any example code of your implementation that you can share?
22:59 < Alex_Qt> yes, but 
23:00 < Alex_Qt> io.sockets.on('connection', function (socket) {                 g_socket=socket;                 //console.log("### Client id: "+g_socket.id)                 //users_id=socket.id                 var welcome = {                     status:'ready',                     statusMessage: 'Server ready to uploading!',                     clientID:socket.id                      };                 socket.emit('welcome', JSON.stringify(welcome));      
23:01 < styol> Alex_Qt: that is pretty hard to read, please use a paste site such as gist, pastie.org, or otherwise
23:01 < tnorris> isaacs: freak yeah. have floating point Buffer operations (with asserts) working 20% faster than Int32 operations.
23:02 < Alex_Qt> ok, moment
23:09 < AviMarcus> ckknight, for a multi-line expression, break each one up into it's own variable for readability
23:09 < AviMarcus> then && them together either before if many or in the ternary
23:09 < ckknight> AviMarcus: this is for machine-compiled javascript, I just want the output to be legible
23:09 < AviMarcus> oh.
23:10 < AviMarcus> on it's own line, with the other stuff indented? :P
23:10 < AviMarcus> is there any hierarchical RBAC node.js package? the best I found was connect-roles but that doesn't do the hierarchical part.
23:16 < othiym23> >>> var x = NaN; x !== x
23:16 < purr> othiym23: (boolean) true
23:16 < othiym23> Effective JavaScript is a kind of awesome book
23:17 < CoverSlide> >>> NaN == NaN
23:17 < purr> CoverSlide: (boolean) false
23:17 < CoverSlide> i suppose there's good reason for this
23:18 < othiym23> CoverSlide: NaN is the only value in Node not equal to itself
23:18 < CoverSlide> s/Node/JavaScript/
23:18 < othiym23> there is; it's called "the IEEE754 floating-point standard"
23:18 < othiym23> yeah, sorry, treating the two as the same is a bad habit
23:18 < nathan7> NaN means there is no meaningful value
23:18 < othiym23> >>> typeof NaN
23:18 < purr> othiym23: (string) 'number'
23:19 < othiym23> NaN is one big giant wad of wat
23:19 < nathan7> 1/0 and sqrt(-1) aren't equal
23:19 < nathan7> but they're both NaN
23:19 < ArxPoetica> readDirSync  <—  does this load directories within directories, like recursively?
23:19 < cellvia> i like isNaN() tho
23:19 < cellvia> ive found it helpful
23:19 < ArxPoetica> Or is it just the immediate directory.
23:19 < othiym23> cellvia: the problem with isNaN is that it performs implicit conversion
23:19 < othiym23> >>> isNaN({})
23:19 < purr> othiym23: (boolean) true
23:19 < cellvia> thats ok
23:20 < cellvia> that looks fine to me
23:20 < AviMarcus> ArxPoetica, sounds like just the dir. And try it.
23:20 < CoverSlide> >>> {}+{}
23:20 < purr> CoverSlide: (number) NaN
23:20 < othiym23> >>> isNaN(true / 0)
23:20 < purr> othiym23: (boolean) false
23:20 < jcrugzz> substack: figured out what was going on with hyperglue. I posted an issue and I'm going to take a crack at it to see what I can do
23:20 < cellvia> im never going to do either of those operations
23:20 < ArxPoetica> tried already <— trying to parse someone else's code :)
23:20 < ArxPoetica> and thx
23:20 < othiym23> >>> true / 0
23:20 < purr> othiym23: (number) Infinity
23:21 < AviMarcus> purr is a bot? mind = blown
23:21 < cellvia> i only use it on values that im not suer if it will be string or integer
23:21 < cellvia> or rather am sure it will be one of the 2
23:21 < othiym23> only in the magical world of IEEE754 does 1/0 -> Infinity
23:21 < nathan7> AviMarcus: no
23:22 < othiym23> cellvia: yeah, in most cases it's fine, but if you know you should be dealing with numerical values and want to make sure you've got a NaN, it's useful
23:22 < nathan7> ArxPoetica: it's just readdir
23:22 < othiym23> sort of like the difference between == and === generally
23:22 < cellvia> it kind of makes sense, infinity SHOULD be the answer to divide by 0 in all cases imo :)
23:22 < CoverSlide> >>> Array(10).join('wat'-1) + " Batman!"
23:22 < purr> CoverSlide: (string) 'NaNNaNNaNNaNNaNNaNNaNNaNNaN Batman!'
23:23 < cellvia> othiym23 yeah totally, i generally dont use == for example, but in some instances
23:23 < othiym23> cellvia: only when you're taking limits as 1 / x and x->0
23:23 < othiym23> otherwise complex analysis starts breaking
23:23 < AviMarcus> Oh that's why I didn't get an email for a charge on my credit card. Capitalone is having technical issues.
23:23 < cellvia> othiym23 nice i havent worked my math brain in awhile
23:23 < CoverSlide> >>> "Sha"+ Array(2).join('wat'-1) + ": http://www.shanana.com/"
23:23 < purr> CoverSlide: (string) 'ShaNaN: http://www.shanana.com/'
23:24 < valterguy> is purr a bot?
23:24 < jrajav> >>> new Buffer()
23:24 < purr> jrajav: ReferenceError: Buffer is not defined
23:24 < cellvia> im never doing math like that in my js tho
23:24 < jrajav> :(
23:24 < valterguy> interesting.
23:24 < othiym23> purr is a bot
23:24 < othiym23> purr is friendly in this channel
23:24 < jrajav> Do we have Node libs?
23:24 < jrajav> >> path
23:24 < othiym23> purr is malevolent elsewhere
23:24 < purr> jrajav: ReferenceError: path is not defined
23:24 < jrajav> >> require('path')
23:24 < purr> jrajav: ReferenceError: require is not defined
23:24 < valterguy> hehe
23:25 < Alex_Qt> Hi again
23:25 < othiym23> jrajav: I think it's running a context in a vm with everything stripped out
23:25 < othiym23> to reduce shenanigans
23:25 < valterguy> >> require
23:25 < purr> valterguy: ReferenceError: require is not defined
23:25 < valterguy> indeed
23:25 < othiym23> >> process
23:25 < purr> othiym23: ReferenceError: process is not defined
23:25 < CoverSlide> but I <3 shenanigans
23:25 < Bonuspunk> >> setInterval
23:25 < purr> Bonuspunk: ReferenceError: setInterval is not defined
23:25 < jrajav> I just wanted Buffer, no shenanigans :(
23:25 < Alex_Qt> this is my  upload/socket.io progress https://github.com/devalexqt/upload.io/blob/new/index_server.js
23:25 < valterguy> it's no fun.
23:25 < CoverSlide> >> Object.getOwnPropertyNames(this)
23:25 < purr> CoverSlide: (object) ['undefined', 'parseFloat', 'escape', 'Infinity', 'numbers_that_add_and_subtract_to', 'obfuscate', 'decodeURIComponent', 'JSON', 'print', 'Date', 'TypeError', 'decodeURI', 'URIError', 'Sol', 'braille', 'encodeURI', 'strip_color', 'Math', 'Number', 'Array', 'parseInt', 'RangeError', 'String', 'console', 'Error', 'RegExp', 'EvalError', 'SyntaxError', 'numbers_…
23:26 < CoverSlide> >> braille('hello')
23:26 < purr> CoverSlide: (string) '⠓⠑⠇⠇⠕'
23:26 < Bonuspunk> wat
23:26 < AviMarcus> that's a normal function?
23:26 < cellvia> whoa whats obfuscate
23:26 < AviMarcus> oh someone created that and it's saved there?
23:26 < jrajav> >> numbers_that_add_and_subtract_to
23:26 < purr> jrajav: (function) numbers_that_add_and_subtract_to
23:26 < Bonuspunk> >> braille.toString()
23:26 < purr> Bonuspunk: (string) 'function braille(text) {\n\t"use strict";\n\t\n\ttext = String(text);\n\tvar i = 0,\n\t\tresult = [],\n\t\terr = [],\n\t\tlen = text.length,\n\t\tch,\n\t\talphanum = "⠁⠃⠉⠙⠑⠋⠛⠓⠊⠚⠅⠇⠍⠝⠕⠏⠟⠗⠎⠞⠥⠧⠺⠭⠽⠵";\n\t\t\n\twhile (i < len) {\n\t\tch = text.charCodeAt(i++);\n\t\tif (ch >= 65 && ch <= 90) {\n\t\t\tresult.push("⠠" + alphanum[ch - 65]);\n\t\t} else if (ch >= 97 &&…
23:26 < Alex_Qt> So, how I can write code for send message of progress to current client? not for all
23:26 < jrajav> >> numbers_that_add_and_subtract_to()
23:26 < purr> jrajav: (object) [NaN, NaN]
23:26 < valterguy> >> console.log('it wasn\'t me')
23:26 < purr> valterguy: undefined; Console: "it wasn't me"
23:26 < jrajav> ..
23:26 < jrajav> >> numbers_that_add_and_subtract_to(1)
23:26 < purr> jrajav: (object) [NaN, NaN]
23:26 < md_5> With Jdom is there a way to get an absolute url?
23:26 < CoverSlide> >> numbers_that_add_and_subtract_to(50)
23:27 < purr> CoverSlide: (object) [NaN, NaN]
23:27 < md_5> from an href
23:27 < CoverSlide> wtf
23:27 < AviMarcus> BTW!!! purr works in PM too, so you can stop flooding the channel.
23:27 < valterguy> >> Object.getOwnPropertyNames(console)
23:27 < purr> valterguy: (object) ['time', 'timeEnd', 'log']
23:27 < valterguy> AviMarcus: okay. :)
23:27 < nathan7> >> global.whee = 'a string'
23:27 < purr> nathan7: ReferenceError: global is not defined
23:27 < CoverSlide> >> numbers_that_add_and_subtract_to.toString() + ' who cares?'
23:27 < purr> CoverSlide: (string) 'function numbers_that_add_and_subtract_to(sum, dif)\n{\n\tvar b = (sum - dif) / 2;\n\tvar a = dif + b;\n\treturn [a, b];\n} who cares?'
23:27 < Bonuspunk> could! :D
23:27 < nathan7> >> this.whee = 'a string'
23:27 < purr> nathan7: (string) 'a string'
23:27 < nathan7> >> this.whee
23:27 < purr> nathan7: undefined
23:27 < othiym23> man, some jerk uses tabs instead of spaces in their JS
23:27 < nathan7> hrm
23:27 < nathan7> othiym23: :(
23:27 < othiym23> that's what I'm choosing to take away from that
23:27 < jcrew> is it possible to rewind streams in nodejs?
23:28 < cellvia> rewind?
23:28 < jcrew> or do i need to reopen these files every time
23:28 < CoverSlide> a stream is not an fd
23:28 < cellvia> you can capture the output in memory
23:28 < CoverSlide> you can also open the file as an fd
23:28 < AviMarcus> or pause it if you're not ready for it..
23:28 < CoverSlide> and use fs.read/write
23:28 < jcrew> oic - stupid question, thanks
23:29 < othiym23> jcrew: gotta create a new stream or use file.open directly
23:29 < othiym23> fs.open / fs.{read,write}, that is
23:29 < cellvia> have you guys messeing with the new streams at all
23:29 < cellvia> tha isaacs been working on
23:29 < othiym23> cellvia: yeah, recreationallly
23:29 < othiym23> why?
23:30 < cellvia> im using streams a lot, but curious how stable they seem before i bother trying to replace
23:30 < cellvia> w/ the new 
23:30 < CoverSlide> i just drank a bunch of iced tea, gonna make me a stream right now
23:30 < othiym23> the new stream implementation is pretty solid for everything other than HTTP, which still has some issues (mostly with performance)
23:31 < cellvia> also a litlte confused how pipeing works now that you have to manually call read()
23:31 < CoverSlide> unfortunately, HTTP is probably the best use-case for the stream interface
23:31 < nathan7> cellvia: Magically
23:31 < othiym23> that should be abstracted away behind Stream.pipe(), which has been changed for streams2
23:31 < nathan7> You just inherit Stream.prototype.pipe
23:31 < othiym23> CoverSlide: yeah, well, it's new code
23:32 < cellvia> wait so read() is automatically called when you pipe()
23:32 < othiym23> it mostly works for everything aside from backpressure, which can cause ballooning memory usage if an HTTP stream is piped into another stream with a lot of backpressure
23:32 < othiym23> there's a patch, but I don't know its status
23:33 < robertj> can you have multiple clusters active at the same time?
23:33 < AviMarcus> one issue I had with streams from a file... was arbitrary line endings. I wanted chunks that ended in \n to deal with data chunks, but that didn't happen. I needed to cache ends of line and reconstruct them...
23:34 < cellvia> ouch
23:35 < AviMarcus> I was reading the new streams post waiting for a mention of that, but nope..
23:35 < Alex_Qt> Have any solution for  upload/socket.io progress?
23:36 < othiym23> cellvia: https://github.com/joyent/node/blob/master/lib/stream.js#L46-L127
23:37 < othiym23> it looks scarier than it is
23:37 < othiym23> oops rong pipe method
23:37 < othiym23> herp derp
23:38 < othiym23> cellvia: look at this instead https://github.com/joyent/node/blob/master/lib/_stream_readable.js#L287-L393
23:38 < cellvia> lol yeah i was confused there
23:40 < cellvia> still confused
23:42 < othiym23> so when you have a streams2 ReadableStream that you pipe into another stream, that method takes care of moving the data around
23:42 < scott_switzer> Hi - I am building a node/express app, and am working on abstracting the data from the routes.  I am having an issue trying to pass in a reference of the DB to the routes.  Is there anyone who can help?
23:42 < scott_switzer> Here is my server.js:
23:42 < scott_switzer> https://gist.github.com/4448558
23:44 < cellvia> othiym23 how was that diff from the original?
23:44 < cellvia> *is
23:45 < cellvia> i dont see where read() is initiataed
23:45 < cellvia> or does it circumvent that method
23:45 < scott_switzer> and here is post.js (which contains the db access from routes):
23:45 < scott_switzer> https://gist.github.com/4448573
23:46 < scott_switzer> I am getting a ReferenceError:  db not found
23:46 < scott_switzer> When I try to access the database (in this case, in post.find)
23:47 < Tixz> I'll try my luck here: Is it possible in mongoose to populate on anything but the objectid?
23:47 < Bonuspunk> scott_switzer this.db ?
23:49 < scott_switzer> Bonuspunk:  checking - i think I tried this before
23:50 < cellvia> othiym23 thanks for the link gonna wade through this to get some sense of it
23:53 < scott_switzer> Bonuspunk:  still does not work:
23:53 < scott_switzer> https://gist.github.com/4448624
23:53 < scott_switzer> the error is on the collection now, but this is because the db is undefined
23:54 < javagoogles> Hi, I've got a small node server running and it looks as though each time i change the server file i have to restart nodejs. i'm wondering if there's a more active project like https://github.com/isaacs/node-supervisor that can handle it?
23:55 < AviMarcus> I use supervisor in production
23:55 < AviMarcus> nodemon handles changes, but I don't think it has the restart on crash
23:55 < AviMarcus> supervisor does both
23:56 < javagoogles> ok cool - and there's a program called "forever" that handles when it crashes?
23:56 < AviMarcus> right, but it doesn't do the file watch
23:56 < javagoogles> yep, so i install both?
23:56 < AviMarcus> or you can use monit or something else, I suppose
23:56 < AviMarcus> yeah but then you have to chain the launch. Supervisor seemed much simpler.
23:56 < superjoe> javagoogles, try this: https://github.com/fgnass/node-dev
23:56 < javagoogles> oh, so supervisor handles crashes and file changes, then?
23:57 < AviMarcus> javagoogles, yeah, unless you tell it not to.
23:57 < javagoogles> superjoe: that looks pretty cool
23:57 < javagoogles> AviMarcus: thanks for your help
23:57 < javagoogles> i'll take a look at those
23:57 < superjoe> javagoogles, it's wonderful for development
23:57 < superjoe> in production, use something else.
23:59 < othiym23> cellvia: the key is line 388, which calls flow
--- Log closed Fri Jan 04 00:00:15 2013
