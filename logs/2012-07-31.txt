--- Log opened Tue Jul 31 00:00:11 2012
--- Day changed Tue Jul 31 2012
00:00 < pspeter3> Is there a padrino equivalent in node.js? Padrino is a wrapper for Sinatra in ruby that provides some magic
00:07 <@deoxxa> pspeter3: can you be more specific as to the nature of this magic?
00:09 <@maxogden> wookiehangover: ok wtf grunt made my node_modules folder 50mb
00:10 <@jesusabdullah> ololo
00:10 < pspeter3> deoxxa: It basically provided an ORM/ODM agnostic view and had a lot of generators to help deal with boilerplate
00:14 < DTrejo> anyone ever tried to use flash from within a chrome extension?
00:20 <@maxogden> wookiehangover: weird, turned pushstate off and now it wont trigger hash changes/breaks going back on slides http://maxogden.github.com/javascript-database-presentation
00:21 <@maxogden> wookiehangover: works fine when the app is running on / though, maybe its a backbone thing
00:23 < Domenic> maxogden: if you can't get it to work maybe try director? it plays well as a backbone history replacement apparently
00:23 < Domenic> maxogden: and has pushState unit tests that pass, FWIW
00:28 <@moxie> i want to embrace the asynchronicity
00:29 <@moxie> but i cant trust it
00:40 < gicode> Is there any way to get a list of what is keeping the event loop running?
00:43 <@chilts> gicode: I'm sure I saw something like that in v0.8.x, but not in v0.6.x ...
00:43 < wookiehangover> maxogden: seems like its working for me?
00:44 <@maxogden> wookiehangover: it never triggers the hashchange for me when i switch pages
00:44 <@maxogden> wookiehangover: on latest chrome
00:44 < gicode> chilts: I am running 0.8.4, do you have any thoughts on where I should look?
00:45 <@maxogden> wookiehangover: hmm firefox works
00:45 <@maxogden> wookiehangover: ok canary, safari work also maybe its a caching thing
00:45 <@chilts> gicode: maybe here : https://github.com/joyent/node/wiki/API-changes-between-v0.6-and-v0.8
00:46 < wookiehangover> huh, I was looking at it in beta chrome
00:47 <@maxogden> wookiehangover: yea it works in canary for me (chrome 22) but not chrome (chrome 20)
00:47 <@maxogden> strange
00:48 < gicode> chilts: I don't see it in there, but thanks for the pointer
00:53 < retrobaby> is reading uv.h the best way to get introduced to libuv?
00:55 < gicode> retrobaby: http://nikhilm.github.com/uvbook/
00:55 < retrobaby> yeah i have been reading that
00:55 < retrobaby> but it's somewhat incomplete isnt it?
00:56 < gicode> Yeah, it isn't "done" yet
00:56 <@moxie> it sounds amazing
00:56 < retrobaby> yeah well, I will take what I can get.
00:57 < retrobaby> lol, correction: it's better than it was 2 days ago, i see more code now. good to see that its being updated on a daily basis. this shouldnt be that bad anymore
01:10 < CIA-93> node: Ben Noordhuis v0.8 * r2eb6a62 / doc/api/child_process.markdown : doc: document child_process.fork() limitation - http://git.io/iw7APw
01:32 < Zagrophyte> hello
01:57 <@context> gicode: if you find out please let me know
02:10 < NuZZy> anyone got some amusing projects they want to link/talk about?
02:11 <@SubStack> http://browserling.com:9005/ 
02:11 <@SubStack> http://github.com/substack/graph-stream
02:11 <@SubStack> streaming graphs in the browser
02:11 < NuZZy> he just game me a seizure
02:11 < NuZZy> :D
02:12 < NuZZy> that is great
02:13 < NuZZy> something very node.js explotative 
02:15 <@bren2010> Does anybody know if the events API is concurrent as well as asynchronous...?
02:32 < owen1> is hackernews down?
02:32 <@TehShrike> If I could just tell myself ten years ago about the technology that I would have access to today... I don't know if I would have believed it
02:33 < owen1> SubStack: people are not using browserify because watch is broken ):
02:33 < owen1> http://www.reddit.com/r/node/comments/xe3gs/automatic_minification_with_nodejs_and_requirejs/
02:35 < coderarity> i would have been disappointed if i told myself about stuff nowadays ten years ago
02:35 < coderarity> i would have been like "what? that's it?
02:36 < coderarity> "
02:36 <@TehShrike> SubStack: that browserling link - what data do I see in that chart?
02:36 <@TehShrike> coderarity: there's a couple possibilities - my expectations were much more bounded by reality, or your imagination is way better ;-P
02:37 < coderarity> i would have at least expected 3D to be better, lol
02:37 <@TehShrike> Well, fair enough
02:37 <@TehShrike> Speaking of which, did you see the videos of John Carmack talking about the future of 3D?
02:37 <@TehShrike> There is little I enjoy more than listening to John Carmack geek out about the problems that he currently cares about
02:38 < coderarity> no
02:38 <@TehShrike> Aw man, lemme find you the link
02:38 < coderarity> he's the ID guy right?
02:38 < benvie> back to the future 2 had a flying jeep and shittier electronics than they had by 1990
02:38 < coderarity> id*
02:38 <@TehShrike> coderarity: yeah
02:38 <@TehShrike> He's one of my favorite programmers ever
02:38 <@TehShrike> He's such a badass
02:39 < Cygnus_X> anyone care to answer a quick noob question?
02:39 <@TehShrike> coderarity: him talking about virtual reality - http://www.pcgamer.com/2012/06/06/john-carmack-is-making-a-virtual-reality-headset-500-kits-available-soon-video-interview-inside/
02:39 <@TehShrike> And while I'm linking to John Carmack stuff, check out this post of his on "Functional Programming in C++"! http://www.altdevblogaday.com/2012/04/26/functional-programming-in-c/
02:40 <@Nexxy> 3D is doomed to fail
02:40 <@TehShrike> Nexxy: I'm ignoring 3D computing until John Carmack has something that he thinks is viable for the consumer :-P
02:40 <@Nexxy> there won't be anything short of holographic technology
02:40 <@TehShrike> That's possible
02:40 <@Nexxy> the focal length is the same regardless of how you trick the brain into perceiving it
02:41  * TehShrike shrugs
02:41 <@TehShrike> Check out those videos of him talking
02:41 <@Nexxy> NO!
02:41 <@TehShrike> He seems to sum up the current state of technology pretty well
02:41 <@Nexxy> ok fine ;P
02:41 <@TehShrike> He appears to be incredibly practical
02:41 < benvie> flying cars: never, super computer in your pocket: couple years
02:41 < wookiehangover> ops pls
02:41 < benvie> that's a safe bet always
02:41 <@TehShrike> benvie: what do you mean?  We have super computers in our pocket NOW ;-P
02:41 <@Nexxy> benvie, I thought they made coptercars?
02:41 < benvie> I know
02:42 < benvie> that's what I'm saying
02:42 <@TehShrike> teehee
02:42 < benvie> flying cars: still never
02:42 < benvie> lol
02:42 <@TehShrike> You're saying that's true no matter the year? lol
02:42 <@TehShrike> I can see that
02:42 < wookiehangover> maxogden: so I think I figure out what's going on with the hashchange routes...
02:42 < benvie> I dunno, it's just the rule of predicting the future
02:42 < benvie> you'll be right longer than people have been wrong so far
02:42 <@TehShrike> benvie: I'd agree with you - I think that's a very solid prediction every year
02:43 < benvie> whereas people have consistently underestimated the advancement of information technology and the cultural impact of it
02:43 < wookiehangover> maxogden: the browser is freaking out when the hash is also an id on the page, and attempts scrolls the browser to it
02:43 < benvie> by many orders of magnitude
02:43 <@TehShrike> Quite true
02:43 < wookiehangover> maxogden: but specifying a data-route on the elem fixes it
02:43 < benvie> that was what i was saying by citing back to the future 2 =D
02:44 < benvie> the future part took place in 2015
02:44 < benvie> with a flying jeep fucking wrangler
02:44 < benvie> and shitty, terrible electronics that 1995 would laugh at
02:44 <@SubStack> owen1: I might work on fixing watch today
02:45 <@TehShrike> Anyway, this is what prompted my original statement: I've started doing all my development in a VM for portability.  If I had told myself 10 years ago the computing power of my *virtual machine*, running on my home machine capable of running an entire operating system and whatever services above that, my hardon probably would have lasted for a week
02:45 < coderarity> TehShrike, i don't even think that 3D headsets can work without eye tracking
02:45 < coderarity> when you move your eyes you actually change the position of your pupil
02:46 < coderarity> i don't turn my head to look at most things unless i have to, lol
02:46 <@TehShrike> 3D movies work without pupil tracking
02:46 <@TehShrike> As long as each eye has access to just one video output, it's not that bad
02:46 < coderarity> that's different
02:46 < coderarity> because you're not controlling the camera
02:46 <@TehShrike> Oh I gotcha
02:46 <@TehShrike> Right
02:47 <@TehShrike> Good point, I have no idea how much difference that would make
02:47 < coderarity> i mean, there's a difference between just 3D and a complete virtual reality headset
02:47 < Domenic> Can anyone tell me if this code will leak memory? https://gist.github.com/3213065
02:47 < Domenic> (streams and events related)
02:48 < wookiehangover> ops plz
02:48 -!- mode/#node.js [+o wookiehangover] by ryan_opper
02:49 < jkevinburton> in my app.js I want to set a GLOBAL.BASE_DIR = ? so in in any file in any directory I can do a require(BASE_DIR + '/models/user_model.js');  what is the proper syntax for the project root, is it __dirname?
02:49 < coderarity> does anyone know if panda express does delivery?
02:50 < NuZZy> __dirname
02:50 <@SubStack> jkevinburton: if you really want to do that, just use process.env not a global
02:50 < NuZZy> and if in the first file you include you write: herp = 1; it will be global
02:50 <@SubStack> but you shouldn't do that
02:50 <@SubStack> just use relative paths or put things node_modules and set bundledDependencies if you must
02:51 < jkevinburton> SubStack: which one shouldn't I do?  I am finding it quite difficult when I'm moving my files around, at first it was ../../models/user_model , then ../models/user_model
02:51 <@SubStack> NuZZy: but then in every file where you want to require() a module you've got to set that global first
02:51 < NuZZy> set the global?
02:51 < Domenic> jkevinburton: the solution is to stop moving files around
02:51 <@SubStack> jkevinburton: you should probably not have as many of those dependencies in the first place
02:52 < coderarity> NuZZy, also try path.resolve(__dirname, '../../models/user_model')
02:53 < coderarity> if you're doing relative stuff
02:53 < Domenic> coderarity: how could that possibly help
02:53 <@SubStack> coderarity: require already does that
02:53 < NuZZy> lol
02:53 < Domenic> require is already relative to __dirname
02:53 < coderarity> oh, really?
02:53 < coderarity> cool
02:53 <@SubStack> jkevinburton: anyways you are experiencing pain because you're duplicating information in too many places
02:54 < NuZZy> oh, __dirname is reset inside a new module?
02:54 < NuZZy> makes sense
02:54 <@SubStack> jkevinburton: you could try something like having ONE models file that requires all the models files
02:54 < NuZZy> hence you would want to make a new global called _dirname ;p
02:54 <@SubStack> aside: I really dislike decomposing applications into "models"
02:54 < jkevinburton> SubStack: you need some sort of organization
02:55 < jkevinburton> especially when you have 15 models, mutliple entries
02:55 <@SubStack> "models" is not very good organization
02:55 < Domenic> __dirname, like __filename, is in relation to the current module (file).
02:55 < jkevinburton> my models are just sequelize objects
02:55 <@SubStack> why not call them sequelize objects then?
02:55 < NuZZy> I understand
02:55 <@SubStack> that's more concrete and less abstract
02:56 < jkevinburton> not really.. because next version, when we go big, I may want to use a different db schema, like NoSQL, thus, the naming convention is right.
02:56 <@SubStack> you may want to rewrite the application in scala
02:56 < Domenic> ^ lol
02:56 < jkevinburton> lol
02:57 <@SubStack> but you shouldn't start writing scala files just in case
02:58 <@SubStack> much technical debt was born with "I might need this later"
02:58 < Domenic> The flipside to this argument is that "model" is shared technical vocabulary and helps other developers understand what you're trying to do
02:58 <@SubStack> caveat: saying "I might need this later" is far more workable when the new piece if a completely separate project
02:59 <@SubStack> easier to discard
02:59 < Domenic> The flipside to THAT argument is that "model," much like "service," has become overloaded to the point of not meaning much these days.
02:59 <@SubStack> Domenic: I've found that thinking and discussing applications in terms of "models" mostly just obscures what's actually going on
02:59 <@SubStack> services mostly mean separate processes that talk to each other over the network
03:00 < Domenic> Sometimes real domain modeling is valuable.
03:00 <@SubStack> although there are variations like system services that use system buses, frustratingly
03:00 < jkevinburton> just to see the reaction.... I hate the folder name node_modules in my project folder, and would like to call it includes or libs, can that be done in the app.js for where require to look first
03:00 <@SubStack> model is just SO vague
03:00 < Domenic> jkevinburton: I hate it too but there's nothing to be done
03:00 <@SubStack> it doesn't describe anything concrete except that it perhaps implies that there might be some persistence layer
03:01 < jkevinburton> :( @ Domenic
03:01 < Whitez-> Hi. I'm getting EADDRNOTAVAIL when using require('http').get. Url is valid. I'm not starting a listening server, so anyone know why I'm getting this error? Thanks.
03:01 < Domenic> SubStack: agreed on the vagueness of model, too many meanings.
03:01 <@context> whitez-: port is already taken by another process
03:01 < jkevinburton> SubStack: would changing the models directory to db be better?
03:02 < Domenic> What is the fd option to fs.createReadStream for?
03:02 <@context> whitez-: be more vague, we have better chance of being able to solve this mystery.
03:02 <@SubStack> jkevinburton: that would describe a bit more concretely what those files are supposed to do
03:02 < jkevinburton> SubStack: cools :)
03:02 < Whitez-> context: But it's a client get request. Thanks for helping. What info do you need?
03:02 <@context> whitez-: code/log output
03:02 < Domenic> Whitez-: a gist with a minimal reproduction of the problem we can run in our REPLs would be nice
03:03 < Whitez-> ok, I'll make something and come back. Thanks.
03:03 <@context> BUT if the error is truly "EADDRNOTAVAIL" (never seen) there is a random chance you picked a source ip/port already taken
03:04 <@context> (unlikely), possibly you have 0 if's
03:04 < Domenic> Still really curious if this leaks memory; anyone know? https://gist.github.com/3213065
03:05 <@context> domenic: what does getSourceStream() do ? 
03:05 <@mscdex> webscala
03:05 < Domenic> context: It's just some generic stream, say a fs.createReadStream()
03:06 <@context> domenic: </vague> depending on the stream yes.
03:06 < Domenic> context: hmm that's interesting, why would the type of stream matter?
03:06 <@context> well depending on the stream and the source, who's "in charge" of closing it? also depends on the source
03:07 <@mscdex> Domenic: there shouldn't be any leaks there because eventually req and the stream should get GC'ed
03:07 <@context> "stream" is very vague.
03:07 <@context> mscdex: not if they stay open
03:07 <@context> which isnt a leak...
03:07 <@context> but maybe not wanted to be stayed open
03:08 <@context> and does close call error ? (though i imagine the listeners are closed on close)
03:08 <@context> how can/do you verifu the listeners are removed
03:09 <@context> domenic: and req is gonna stay open as long as stream feeds it data... error wont be called if its successful
03:12 <@TehShrike> wtf SubStack
03:12 <@TehShrike> You have a sox wrapper?
03:12 <@TehShrike> Is there anything that you haven't written?
03:16 < Domenic_> Agh got disconnected... so... let's say stream either closes successfully or emits an error.
03:16 <@TehShrike> SubStack: I haven't used SoX any way other than the command-line.  For that matter, I haven't written a Node.js module in C, either.  How complicated do you think it would be to fashion a module that would do reencoding of audio using SoX?
03:17 <@SubStack> TehShrike: pretty hard, I've tried
03:18 <@TehShrike> awww. :'(
03:18 <@SubStack> haha I just did an npm search to see if a module name was free only to discover that I had already written a module with that name
03:18 <@TehShrike> That's a real shame.  I was hoping that it would be reasonable to avoid running command-line commands from Node.js
03:21 <@cxreg> SubStack: what was hard about it?
03:21 < TehShrike> Sorry, my chat client crashed - I missed anything since my last comment
03:21 <@SubStack> c is hard
03:21 <@cxreg> http://sox.sourceforge.net/libsox.html doesn't look that difficult
03:21 <@SubStack> nothing looks difficult
03:21 < TehShrike> cxreg: you should make it :-x
03:22 <@cxreg> i might
03:22 <@cxreg> i actually do need such a thing
03:22 <@SubStack> cxreg: I have something that looks like it should work but it just segfaults instead
03:22 < TehShrike> I really don't want to have to go to the command line to re-encode files that I'm receiving and pushing back out through node.js
03:22 <@SubStack> implemented all of the pieces necessary to set up the filter chains
03:22 <@cxreg> SubStack: pass it over?  ill have a look
03:22 <@SubStack> http://github.com/substack/node-sox
03:23 < TehShrike> As an aside, copyrights and patents suck, it disappoints me that I can't download libsox with MP3 support baked in :-P
03:25 <@mscdex> TehShrike: fwiw you'd probably want to encode audio in a separate process anyway, so using the sox binary as a child process is far less work
03:25 < TehShrike> That is a very prescient observation
03:27 <@mscdex> unless maybe you wanted to have a pool of workers that are always alive.... then you would need some kind of binding
03:28 < TehShrike> Probably not for the first version.  What library should I be looking in for running things on the shell, anyway?
03:28 <@mscdex> and maybe something like zmq to manage work
03:28 <@mscdex> TehShrike: the child_process module that's built-in to node?
03:29 < TehShrike> mscdex: yeah, thanks!
03:42 < jrajav> SubStack: You've probably never heard of gdb or valgrind, eh?
03:42 <@SubStack> jrajav: I'm not very good at gdb
03:42 <@SubStack> and I really don't care about stupid c bullshit enough to learn it better
03:42 < jrajav> whoa
03:42 < jrajav> Okay then
03:43 <@SubStack> I'm glad that other people like c and systems programming
03:43 <@SubStack> because I don't
03:43 < TehShrike> haha
03:44 < jrajav> C can be really fun once you learn more about how it works, and how to debug it
03:44 < TehShrike> I've been using C++ for a good while.  I have a fondness for it, but at this point, I'd rather write JavaScript.
03:44 < jrajav> Coming from dynamically typed, interpreted languages that tell you exactly where your errors are, segfaults can be frustrating
03:44 < TehShrike> For one, I'm a bit disillusioned with classical inheritance, and for another, I'm really excited about web development right now
03:44 < TehShrike> But really, I have enjoyed working in C++ quite a bit
03:44 < jrajav> TehShrike: Gtfo we're talking about C
03:45 < jrajav> C++ sucks ass
03:45 < TehShrike> :-P
03:45 <@SubStack> the problem with C is that people write really big programs in it
03:45 < TehShrike> lol
03:45 < jrajav> People write really big programs in every language, son
03:45 < TehShrike> C is fine, if you're programming in 1995
03:45 < jrajav> C is fine if you're programming
03:45 <@Lorentz> I like C, it's elegant
03:46 <@SubStack> c is elegant at the expense of writing programs in it
03:46 <@SubStack> which are not elegant
03:46 < jrajav> ?
03:46 < TehShrike> Did y'all read Linus' hilarious rant when someone asked him why he was using C for an app instead of C++?
03:46 < jrajav> Um. Profound.
03:46 < jrajav> I guess
03:46 <@SubStack> c is just lacking so many things
03:46 < TehShrike> I laughed out loud for quite a while
03:47 < TehShrike> It was just a perfect storm of ranting
03:47 < NuZZy> link TehShrike ?
03:47  * TehShrike scrounges it up
03:47 < jrajav> SubStack: It's a different paradigm than you're used to. Most of what it lacks is by design. Dynamically typed languages were not new when it was made. Nor were interpreted languages. Or functional.
03:47 < jrajav> Or OOP
03:48 < TehShrike> Here it is: http://thread.gmane.org/gmane.comp.version-control.git/57643/focus=57918
03:48 < NuZZy> ty
03:48 < moxie> http://binaryjs.com/
03:48 <@SubStack> jrajav: it's just really hard to write clean abstractions in c
03:48 < jrajav> SubStack: Abstractions of what?
03:49 <@SubStack> reusable modules
03:49 < jrajav> It's pretty easy actually
03:49 < jrajav> The modules aren't composed of *objects*, sure
03:49 <@SubStack> everything is a global
03:49 < jrajav> That doesn't make them any less modular
03:49 < TehShrike> haha, I'd forgotten, it's not a rant about writing some random app in C vs C++, it's about Git
03:50 < jrajav> Yes, global namespace pollution is an issue in C… It's an annoyance, though, not a "bug"
03:50 < jrajav> That certainly doesn't get in the way of modular design
03:50 < TehShrike> It's a beautiful example of a good programmer going off on an elitist rant
03:50 < jrajav> If anything, modular design is *easier* in C than in C++ or Java
03:50 < TehShrike> Some things are true, but the rage is so over-the-top that it's hilarious
03:51 < jrajav> That rant is making my day TBH
03:51 < jrajav> How have I never seen this before
03:51 < jrajav> It perfectly encapsulates everything I've ever thought about C++
03:51 < TehShrike> eh, to me, modular design has been a lot easier in JS/Node.  In C++, so many libraries are compiler-specific, you have to go out of your way to get them built so that you can use them in your app.
03:52 < jrajav> So link dynamically?
03:52 < jrajav> Also stop talking about C++ dammit
03:52 < TehShrike> lol
03:52 < jrajav> If you really NEED OOP, go with Objective C
03:52 < TehShrike> I build applications for users, not low-level libraries
03:53 < jrajav> Erm. k?
03:53 <@gkatsev> who needs users anyway? all they do is complain
03:53 <@gkatsev> :P
03:53 < jrajav> I think I missed the ratification of the internet rule that says Thou Shalt Write Nothing But Libraries in C
03:53 < TehShrike> lol, I know, right?
03:53 < TehShrike> (@ gkatsev)
03:54 <@Lorentz> you are your own user and you complain all day about what you write!
03:54 < TehShrike> Lorentz: but when I tell myself to shut up, I listen!
03:54 <@gkatsev> Lorentz: nah, I dont use what I write. :P
03:55 < TehShrike> Most of my programming career has been spent writing Win32 applications for desktop users.  I'm glad that I got to use C++ instead of C.  Being closer to the metal is not an advantage with that type of application.
03:55 < TehShrike> I like my std::strings!
04:03 < TehShrike> Is http://search.npmjs.org working for anyone else?
04:03 <@mscdex> TehShrike: it's been having issues for awhile now
04:03 <@mscdex> at least the past day or so
04:06 < TehShrike> All righty, thanks for the confirmation
04:24 < gicode> context: I ended up solving my problem with lsof.
04:57 < mikeal> oh SHIT!
04:57 <@Raynos> search/npm is down
04:57 < mikeal> i just hit the part ofthe kevin mitnick autobiography where he gets an account at NEC from Matt Ranney :)
04:59 <@SubStack> !
05:02 < bluesmoon_> mikeal: heh
05:02 < mikeal> https://twitter.com/mikeal/status/230166501011898368
05:03 < bluesmoon> is this the book written partially by john markov?
05:04 < mikeal> yeah, i think so
05:04 < bluesmoon> s/Markov/Markoff/
05:04 < bluesmoon> Takedown I think it's called
05:05 < mikeal> no, wait
05:05 < bluesmoon> the other one is The Art of Deception
05:05 < mikeal> William Simon is his writing partner
05:05 < mikeal> i'm talking about Ghost in the Wires
05:05 < bluesmoon> I remember he needed someone else to write the book because he wasn't allowed access to a computer
05:05 <@Nexxy> I know sendmail technique.
05:05 < bluesmoon> ok, I haven't read that one.
05:05 <@Nexxy> I know rdist technique.
05:06 <@Nexxy> my kung fu is better than yours.
05:06 < mikeal> haha
05:06 < mikeal> he was able to use a computer for Ghost in the Wires
05:06 < mikeal> Simon has helped him with all of his books tho
05:06 < mikeal> he's just a good writer
05:07 < bluesmoon> possibly.  Markoff was the reporter who covered him early on, which is mainly what he contributed to Takedown
05:07 < mikeal> Takedown was written by Markoff and that other douchbag guy
05:07 < bluesmoon> Tsutomu?
05:07 < mikeal> shomomura
05:07 < bluesmoon> yeah
05:07 < mikeal> shimomura
05:07 <@Nexxy> ER... MAHGERD
05:08 < bluesmoon> ok, gtg, ttyl
05:08 <@Nexxy> mikeal, fun fact; he is the inspiration for my scheme for getting into nodeconf last year
05:09 < mikeal> shimomura :)
05:09 < mikeal> this autobiography is amazing
05:09 < mikeal> i knew about some of the shit he did
05:09 < mikeal> and thought my own youth was similar, but i was way wrong
05:09 < mikeal> he tapped and was in the email of everyone who was going after him
05:33 <@mscdex> how unfortunate, derbyjs isn't going to support sql
05:33 <@AAA_awright> derbyjs?
05:33 <@mscdex> http://derbyjs.com/
05:34 <@AAA_awright> Hrm that coffeescript thing
05:34 <@mscdex> yeah :-/
05:35 <@mscdex> i guess it's back to express + backbone + socket.io
05:36 <@AAA_awright> I don't think people realize how limiting document stores can be
05:55 < TehShrike> I can't imagine limiting myself to document stores >_<
06:06 < pringlescan> Howdy, I'm having a weird issue with http.get on version .84… I have code to retrieve a URL and it works when I test it independently, however, when I test it in an app that loops through a CSV file and queries MySQL it doesn't get any responses, however, the rest of the application continues to loop through the results as expected. Could the reading the CSV file be blocking http I/O somehow?
06:07 < pringlescan> Code at: http://pastebin.com/JERbcxVh
06:09 <@mscdex> looks like you're missing some code
06:09 <@maxogden> pringlescan: protip: require('request')('http://www.google.com/', myCallBack)
06:10 <@mscdex> pringlescan: there isn't much wrong with your code, the only suggestion i'd have is to move your x variable inside the http.get() callback
06:10 < pringlescan> I thought Javascript floated variables to the top?
06:11 < pringlescan> Oh, nevermind, thanks for the heads up.
06:11 <@mscdex> pringlescan: keeping your variable declarations closer to where you use them (if you have deep scopes) is more efficient
06:11 <@mscdex> and could help prevent some unseen issues
06:12 <@mscdex> s/deep/nested/
06:12 < pringlescan> Unless the x fixes it I'm stumped as to why getURL never calls it's callback in my code. (Works independently in it's own .js file)
06:13 <@mscdex> that won't fix it, there is nothing wrong with the code you posted
06:13 <@mscdex> i'm willing to bet the problem is elsewhere
06:14 < pringlescan> mscdex, what doesn't make sense is it prints "Fetching URL…" with the proper URL, meaning the function is being called with a valid URL yet no response is ever received.
06:14 < pringlescan> and I cover connection and HTTP errors, the callback should get called...
06:15 <@mscdex> pringlescan: have you tried putting more debug statements in there? like inside the http.get() callback, etc
06:16 < pringlescan> I try to print each x as it's chunked but I can put more statements in the error handlers, but, either way 100% of the URLs aren't having errors.
06:17 < yhpark> npm is so slow
06:18 < pringlescan> mscdex, I put in console.log at each branch and it never gets passed the "Fetching URL" stage… very weird.
06:21 < pringlescan> mscdex, it's immediately falling through to the end of the function, which is expected for an async http.get but that also means there's no error executing the code...
06:22 < ljharb> does it work if you make it synchronous?
06:22 < pringlescan> not sure, I did just notice that it never executes anything inside http.get()
06:24 < pringlescan> ljharb, don't I need a control library to do that, I don't know a native way to do that in Node for http.get
06:25 < ljharb> ah, ok so http.get() returns a request object. add an event listener on it for "error" and console.log the error
06:27 <@mscdex> pringlescan: i just tested the code you posted and it works fine for me
06:27 < pringlescan> ljharb, it has error handlers for HTTP errors and connection errors, neither of those are firing, my callbacks aren't called and anything inside of http.get() isn't being executed
06:27 < pringlescan> mscdex, it works fine for me too, but when I use it inside my code base it doesn't execute anything inside of http.get()
06:28 < ljharb> pringlescan: can you reprovide a pastebin?
06:28 < pringlescan> ljharb: http://pastebin.com/JERbcxVh
06:28 <@mscdex> pringlescan: ok, so the problem must lie outside of this function :-)
06:28 < pringlescan> mscdex, also, isn't you nick the dos CD-rom driver?
06:29 <@mscdex> technically not the driver, but the extensions
06:30 < ljharb> pringlescan: when i ran your code in the repl i got "Error: connect EADDRNOTAVAIL"
06:30 < pringlescan> mscdex, http://pastebin.com/EjHZCRT7 that's the code calling getURL and it continues to loop through my fine, my code loops through 7 million rows without any issues… so control flow doesn't seem to be a problem
06:31 < pringlescan> ljharb, thanks for testing it, it works for the rest of us, but either way, my code inside http.get isn't being executed so my callbacks never fire when I call getURL from here: http://pastebin.com/EjHZCRT7
06:32 < ljharb> pringlescan: that error is thrown before the get call is made, hence yes, your code is never executed
06:32 <@mscdex> pringlescan: wait, you're calling getURL() millions of times inside that loop?
06:33 < ljharb> yes also don't get that many urls that quickly, jesus
06:33 < pringlescan> mscdex, oh god no, only on unique domains, I have a CSV file of 250,000 domains that appear more than once in my 7 million search results, so I look at the results I have for each contractor and pull out the unique ones, grab the page and try to figure out if it's their business's website
06:34 <@mscdex> well still, 250,000 is a lot in one loop. i say that because i think the problem may be that you're hitting the max number of sockets for your http Agent
06:34 <@mscdex> or some other Agent-related limit
06:34 < pringlescan> mscdex, if that's the case, wouldn't atleast one return?
06:35 < pringlescan> I'm limiting it to 5, let's see what happens
06:35 < ljharb> pringlescan: at the least, you shouldn't be starting the next http request until the last one has finished. only do N at a time, where N is a small number.
06:35 < pringlescan> ljharb, I wasn't too concerned since I'm not going to be hammering the same server
06:36 < ljharb> you're hammering your ISP's routing equipment
06:36 < ljharb> and your server's network card
06:36 <@mscdex> pringlescan: also out of curiousity, what node version are you using?
06:37 < pringlescan> .81… I thought I had .84
06:37 <@mscdex> ok
06:37 < pringlescan> mscdex, with 5 the callbacks are firing, albeit I need to set the default encoding to UTF8 I guess because I'm getting random characters… you'd think it'd check the encoding type specified by the server
06:38 < pringlescan> I don't think it's a global socket limit or node would hit it during benchmarks, so it must be strictly agent related?
06:38 <@mscdex> pringlescan: node core uses Buffers in a lot of places instead of doing magic to do automatic encoding
06:39 <@mscdex> pringlescan: it could very well be
06:40 < pringlescan> with 50 it hangs for a while and uses 100% CPU
06:41 <@mscdex> weird
06:41 <@mscdex> what platform are you on?
06:41 < pringlescan> OSX, I'm upgrading right now and I'm about to put it on a Linux box.
06:42 <@mscdex> it'd be interesting to see what happens on Linux
06:42 < pringlescan> I have a hell of a time using multiple O/S because the MySQL libraries in Node.js don't work well on different O/Ss
06:42 <@mscdex> what library are you using?
06:42 < pringlescan> I know there's a 100% JS one but I don't think it supported what I needed it to
06:42 <@mscdex> what support is that?
06:42 < pringlescan> on OSX I use… mysql-libmysqlclient
06:43 < pringlescan> I think async queries or something of that nature
06:43 < pringlescan> when you're running on large result sets you need a good driver… most of the other ones broke if I recall
06:43 <@mscdex> eh.... the pure-js mysql module has to be async
06:43 <@mscdex> and i know it is async :-)
06:44 <@mscdex> you can't do sync network i/o in js-land
06:44 < pringlescan> If I really didn't use it because the benchmarks sucked that'd have been silly on my part. I know there's a reason.
06:44 <@mscdex> i've always used felix's mysql module. i haven't tried to use any of the libmysqlclient-based bindings
06:45 <@deoxxa> yeah, node-mysql is pretty much the shit
06:45 <@deoxxa> i'm using it in pretty heavy production
06:46 <@deoxxa> never had a problem with it
06:46 <@mscdex> and he uses it a lot for his business
06:46 <@SomeoneWeird> neither
06:46 <@mscdex> transloadit
06:46 <@SomeoneWeird> node-mysql <3
06:46 <@deoxxa> hooray anectodal evidence!
06:46 < pringlescan> I think I wanted prepared statements.
06:46 <@deoxxa> erm
06:46 <@deoxxa> s/tod/dot/
06:46 <@deoxxa> my fingers, once again, have betrayed me
06:47 < sx> I am running a script with node and it completes but does not exit. My terminal cursor is appears to be indefinitely waiting for the script to finish.
06:48 < pringlescan> I atleast feel better now knowing it wasn't my code, but, I'd rather it have been a stupid easy to fix mistake rather than a let's deploy it elsewhere and see if that fixes it.
06:48 < sx> Any idea why this happens? Does it matter that I am using node to run a web server and also to run scripts on the side?
06:48 <@mscdex> sx: can you post your code?
06:48 < sx> sure
06:48 <@mscdex> sx: yes
06:48 < sx> that does matter?
06:48 <@mscdex> sx: if there is something to do yet, node will stick around
06:48 <@mscdex> sx: so in your case, you have a server listening for requests
06:48 < sx> What is recommended then? I want to run a web server and also run cron scripts
06:49 < sx> with separate instances of node
06:50 < pringlescan> well… upgrading to 0.8.4 broke my MySQL library anyway… so maybe I should just use node-mysql
06:50 < pringlescan> It's a pain that I'll have to redo all my DB code
06:51 <@deoxxa> i want UML on os x
06:51 <@deoxxa> that'd be neat
06:52 < sx> mcsdex: is there a solution for this?
06:54 < pringlescan> I  have sync functions, what's an easy way without callbacks to use Node-Mysql which only seems to be async? Any recommended control flow libraries?
06:54 <@mscdex> sx: cron scripts being what? bash scripts? node scripts?
06:54 <@SubStack> pringlescan: use callbacks
06:55 <@SubStack> control flow libraries use callbacks anyways
06:55 < pringlescan> SubStack, well, if I'm living in callback hell I'm taking you all with me!
06:55 <@SubStack> pringlescan: read http://callbackhell.com/
06:55 <@deoxxa> > doesn't like callbacks
06:55 <@deoxxa> > uses node
06:55 < sx> mscdex: yes I want to have a sustained node.js web server running and also execute node scripts (which query APIs and store JSON in db) as cron jobs
06:55 <@mscdex> pringlescan: you can either divide your logic out into named functions and use those instead of anonymous functions OR use a flow control module (if you go this route i recommend caolan's 'async' npm module)
06:56 < timoxley> pringlescan https://github.com/caolan/async
06:56 <@mscdex> sx: why not use regular cron jobs?
06:56 <@Nexxy> pringlescan, callback hell is a sign of Doing It Wrong™
06:57 < wltsmrz> Or you can just write your own "queue" with maybe ten lines
06:57 < sx> mscdex: they are regular cron jobs, but they are written in javascript
06:57 < sx> how to execute them other than with node?
06:57 < pringlescan> or I could be INCREDIBLY lazy and use a loop and wait for the db connection to become valid ;-)
06:57 < pringlescan> … which is probably what the old library did
06:57 <@mscdex> busy loops === evil
06:58 < sx> i suppose I could write the scripts in python, but I like the idea of using 100% javascript for this project
06:58 < nicholas_> pringlescan: are you sure you want to use node?
06:58 <@mscdex> sx: i mean use crontab to schedule your jobs
06:58 < sx> Yes that's what I'm trying to do.
06:59 < sx> But the scripts don't exit. Because node.js is running a web server in another process.
06:59 <@mscdex> sx: it doesn't matter if you have another node process with a server running
06:59 <@SubStack> Thank you for saving us mario but the web server is running in another process!
06:59 <@mscdex> sx: they're separate processes
07:00 <@mscdex> sx: if your cron job is hanging, there is something wrong in your javascript
07:00 <@mscdex> for your jobs
07:00 < pringlescan> nicholas_ this is a one time data migration script, the fact that 0.8.4 broke the mysql library I was using shouldn't mean that I have to rewrite all of my code and convert sync code to async which makes no sense for the current task
07:00 < sx> mscdex: ok miscommunication. i will post code.
07:01 < nicholas_> pringlescan: so, don't use 0.8.4 for your one time data migration
07:01 < wltsmrz> https://gist.github.com/ae2fd7e0ea942ccd14a7
07:01 <@mscdex> pringlescan: if it's just a one time data migration script and you can't get the hang of node's async nature, why not use something like php or other sync language?
07:01 < pringlescan> nicholas_ the code still needs to port because certain methods will be used in production on later versions of node, i don't want to hand over code and have it not work
07:02 < nicholas_> pringlescan: but it sounds as if you dont get asynchronous programming and are still, somehow, using node
07:02 < pringlescan> I don't have enough ram to run through this dataset asyncronously
07:02 <@mscdex> huh? you would use _less_ ram when doing it async
07:03 <@mscdex> you can stream rows
07:03 < nicholas_> pringlescan: yeh, asynch has nothing to do with how you handle the data at the db end
07:03 < sx> mscdex: here is the script that hangs: http://jsfiddle.net/TDzCD/1/
07:03 < nicholas_> pringlescan: I think it'd be worth you spending a quiet couple of hours learning about node and asynchronous coding
07:04 <@mscdex> sx: it looks like you're not disconnecting from the mongo db ?
07:04 < sx> ok that sounds like a good hint
07:05 < pringlescan> I appreciate everyone encouraging me to do what I've already done, but for simplicity and because up until the point I was retrieving URLs, executing this asynchronously didn't help the situation at all. 
07:06  * nicholas_ facepalms
07:06 <@mscdex> sx: because you're doing these requests in parallel, make sure you don't disconnect until the last object is saved to mongodb
07:07 < pringlescan> The DB load created by doing it async actually made the task take longer than if it executed synchronously. So, in terms of efficiency, I don't care if I'm burning CPU or memory, when you have millions of records to process, time is what counts.
07:07 < nicholas_> pringlescan: do you know what asynchronous means?
07:07 <@deoxxa> doing it wrong
07:07 < sx> good point, I will make them run in sequence, which I started doing.
07:08 < pringlescan> asyncronous is when no part of the code is holding up another part, anytime i/o happens, instead of waiting for the request to complete, node goes onto doing the next thing, when the i/o returns, the callback is used, so the control flow isn't like a recipe, it's a free for all of things running as soon as they can without holding anything else up in the process
07:09 <@mscdex> sx: well you don't have to do that necessarily, just keep a counter around at the top of your source code. initialize it to the number of tasks you need to do and decrement it everytime you save an object. when the value equals 0 you can disconnect
07:09 <@deoxxa> pringlescan: it doesn't have to be unbounded though
07:09 <@deoxxa> pringlescan: you can artificially limit the amount of work you're doing, so you're only doing 10 or 20 or 100 at a time or whatever turns out to be your sweet spot
07:10 < pringlescan> so what you're telling me to do is use setTimeOut and artificially rate limit my async code so I don't run out of memory and or kill my database
07:10 < pringlescan> now I'd like someone to tell me that's more correct than just writing sync code even if it's not the "node way to do it"
07:11 <@SubStack> pringlescan: do you want the operations to go sequentially or in parallel?
07:11 <@deoxxa> pringlescan: not quite
07:11 <@mscdex> pringlescan: you don't have to limit the execution in that particular way. you can just process more lines from the CSV as query results come in
07:12 < pringlescan> I have no preference, basically I have 200k contractors, each with 50 search results, so roughly 9.2 search results, I have a CSV file of the top 250,000 domains I encountered.
07:12 <@mscdex> pringlescan: or you can do them in blocks of x and just wait until all of the queries come back before continuing
07:12 < pringlescan> I can't put an array into any respectable IDE because it freezes, hence the CSV file.
07:12 <@mscdex> pringlescan: there's lots of ways to do this
07:12 <@deoxxa> i find async.queue from caolan's async module is good for this kind of thing
07:13 < pringlescan> So, I basically go, get me contractor 1's data for comparison against any website we'll assume is their personal webpage (based on it not occuring elsewhere in the result set)… if we can tell from the metadata we have from Bing that the website matches it, we don't fetch it, if we do, we fetch it*.
07:13 < pringlescan> *I haven't had to fetch anything, metadata has been fine, here's the FIRST time that async makes sense, but… just the fetching can be async, then I compare the pages, and if one matches, I store it in the DB, that's what I wanted to do.
07:15 < pringlescan> but… there's some kind of bug in http.agent that is going to require me to throttle connections and now I have to redo all my DB code because libmysqlclient (even after npm update) doesn't work in 0.8.4 on osx… for whatever reason
07:15 <@deoxxa> slow dowwwwn man
07:15 <@deoxxa> it's ok
07:15 <@deoxxa> at least now you've had a chance to think through exactly what you want your code to do
07:15 < pringlescan> my whole issue with doing it async is I'm going to have to hold alot more data in memory
07:15 <@deoxxa> no you won't
07:15 < nicholasf> pringlescan: that makes absolutely no sense
07:15 < pringlescan> and it's just sitting there, i'm not even doing anything with it
07:16 <@deoxxa> you will potentially hold less data in memory
07:16 <@deoxxa> noooo no no.
07:16 < nicholasf> if you can work past that point it might help
07:16 < nicholasf> how do you know it takes more memory if it's asynchronous?
07:17 < pringlescan> nicholasf, because the process dies when it runs asynchronously 
07:17 <@deoxxa> pringlescan: define asynchronous
07:17 < pringlescan> You guys already asked me to do that.
07:17 < ljharb> you should not be worrying about the memory under the surface. this is javascript.
07:18 < ljharb> until you profile your code and its running slowly, you should be writing as if memory and heaps and whatnot don't exist.
07:18 <@deoxxa> pringlescan: yes, but you were talking about other things at the same time
07:18 < pringlescan> To be clear, I'm not dealing with a small amount of data and I speak of memory problems because they already have occured.
07:18 <@deoxxa> pringlescan: just on a higher level, tell us how you understand it
07:18 < nicholasf> pringlescan: ok, that's a good starting point
07:19 < nicholasf> pringlescan: and you've worked out that the process dies when called via an asynch message how?
07:20 < pringlescan> Asynchronous code doesn't wait for anything. If you try to right synchronous code in a do this, do that, fashion it will just fall through. Anything that requires time, usually i/o, will be queued so the main execution flow can continue without being held up. So by not looping and waiting for input/output, asynchronous code can handle more requests and handles concurrency in a different way than other paradigms. 
07:21 <@deoxxa> pringlescan: that's only part of the story
07:21 < pringlescan> nicholasf, it ends up loading more data than it can process due to i/o restraints and ends up choking somewhere along the line OR it pounds my database so hard it can't handle all the updates/inserts and then I end up writing it all to an .sql file and loading it back in which is a pain in the ass because I can't monitor the progress
07:21 <@deoxxa> pringlescan: it's not entirely, or even mainly, about performance
07:22 < pringlescan> it's easier than other concurrency models as far as I'm concerned and doesn't make us worry about threads, etc..
07:22 <@deoxxa> that's true
07:22 < nicholasf> ok, I bow out. pringlescan you need to break apart the problem a bit more. Everything you've just described sounds like you might increase your database resources, etc or whatever your "i/o restraints" are
07:22 < nicholasf> but, yeh, I have better stuff to do
07:22 <@deoxxa> pringlescan: you don't necessarily need to read your entire database in at one time
07:23 <@deoxxa> pringlescan: lemme do up a gist for you, it'll make this a bit easier. plz hold!
07:23 < pringlescan> I don't, that's what ends up happening when I use async, I'll hold.
07:24 < wltsmrz> mikeal, The
07:27 < pringlescan> If anyone else runs into an issue with http.get, this seems to address the issue: http://www.markdawson.org/post/17525116003/node
07:27 <@deoxxa> pringlescan: https://gist.github.com/3214499
07:28 <@deoxxa> pringlescan: what's happening there is that we're implementing a crude form of back-pressure on the database, telling it "hey no wait! i don't need any more data right now!" and "ok, cool, resume sending please"
07:28 < pringlescan> how many weeks will that take to run ;-)?
07:29 <@deoxxa> pringlescan: less than one?
07:29 < ljharb> pringlescan: you can't do 7 million http requests quickly. the internet's not built for it.
07:29 < ljharb> not without a cloud of servers at different points in the network to do the requests
07:29 <@deoxxa> pringlescan: i'd say it'd run roughly 5x as fast as your "synchronous" version - it's doing 5 concurrent jobs at once
07:30 < pringlescan> ljharb, I'm not trying to do that, and anyone who does is silly, Bing gives you 5 million queries a month for 2 months, it makes more sense to query them for metadata at 7 queries per second (the limit) to accomplish nearly the same thing.
07:30 <@deoxxa> pringlescan: a synchronous version, by definition, would do one at a time
07:30 <@deoxxa> pringlescan: do you know how a worker queue works?
07:30 < pringlescan> deoxxa, the only sync parts were db operations, which are blazing fast with libmysqlclient, it still ran very fast, but I'd be interested to do it in async I guess, it's just a pain in the ass, i was making improvements to a contract job that was already done per say
07:31 < pringlescan> yeah, I read some awesome book on javascript promises and async that touched on node specific stuff
07:31 < pringlescan> i should recharge my kindle, i forget what it's called
07:31 <@deoxxa> well, that's a worker queue that does 5 tasks at once
07:31 <@deoxxa> you could turn that up to 10, or 20, or 1000 if you wanted
07:31 < ljharb> pringlescan: i'm not saying you can't query bing that frequently. i'm saying you can't do it from the same machine that quickly.
07:32 < pringlescan> http://www.amazon.com/gp/product/B007N81FE2/ref=kinw_myk_ro_title this is execellent
07:32 <@mscdex> deoxxa: i think that pause and resume have to be called on the underlying connection and not the actual query
07:32 < pringlescan> ljharb, I was able to do 7 https requests per second to bing from one Linode instance with 512mb ram
07:32 <@deoxxa> mscdex: details, details :P
07:32 < ljharb> pringlescan: then what are your performance issues exactly?
07:32 <@deoxxa> mscdex: i don't think example_query_thing is a real method either :P
07:33 <@mscdex> deoxxa: don't want anyone in for a rude awakening ;-)
07:33 < pringlescan> ljharb, I opted to store all the data in mysql while i programmed the code to process the data, that way I was working async too.
07:34 < ljharb> why would you make things slower by storing them in mysql?
07:34 < pringlescan> HEY GUYS, I CAN'T RUN THAT GIST. IT'S BROKEN. BAI, I'M GOING TO CHICK-FIL-A.
07:34 < ljharb> pringlescan: use memcache or something and store the data there.
07:34 < wltsmrz> Bring me back something will ya
07:34 <@deoxxa> we don't have chick-fil-a here :<
07:34 <@deoxxa> i hear they're quite good though
07:35 < pringlescan> ljharb, I need to run complex queries on the data, and I need it to be persistant, so I wouldn't want to use memcache for a one time big data processing job
07:35 < ljharb> can't be good enough to justify their politics
07:35 < ljharb> pringlescan: you need the results to be persistent, sure, but not the unprocessed data
07:36 < pringlescan> I deleted my facebook I was so sick of hearing people say Chick-fil-a's president doesn't have the right to be christian in america. He has as much of a right to be christian as people to be gay. The media has blown this out of proportion. If people want to support gay marriage go after the people who make laws, not DELICIOUS chicken :-)
07:37 < pringlescan> ljharb, I guess you missed when I said that I didn't have the code ready to process the results and it took hours to query bing even at 7 per second, so I had to store them, so I could make tweaks to my algorithm and make improvements without having to requery bing everytime
07:37 < ljharb> ah
07:38 < [AD]Turbo> hola
07:40 < wltsmrz> Welcome to #node-fil-a
07:41 < pringlescan> Iljharb, I could write psuedo code that'd probably change any programmers mind about the politics involved in chick-fil-a. //tolerance = tolerance of all; //equality = everyone's equal therefore chick_fil_a.free_speech = true, chick_fil_a.freedom_of_religion = true;
07:42 < pringlescan> <end rant>
07:42 < ljharb> pringlescan: freedom of religion means only that you can't be put in jail for your religious beliefs. that is IT.
07:42 <@Nexxy> 1, 2, 3, zip-it
07:42 < ljharb> pringlescan: and freedom of speech doesn't mean you're not an asshole for saying certain things.
07:42 < pringlescan> I'm bowing out, this is off-topic, my bad for bring it up.
07:42 < ljharb> agreed.
07:42 <@mscdex> node.js rules!
07:42 <@Nexxy> ^
07:44 < pringlescan> So, if I rewrite my code async and just use comments/ console.out to say what it would do there, could someone give it a once over to tell me if I'm drinking the async sauce correctly? It'd be pretty short/small.
07:45 < pringlescan> I need to make sure I'm getting the control flow right, because sometimes the way I want to do things I have to bind variables and do things I think might be naughty.
07:45 < wltsmrz> I'll take a cursory glance over my chicken sandwich at least
07:46 < wltsmrz> I'm sure someone will help, go for it
07:46 < pringlescan> I have to go to bed so I don't screw it up… I guess. But, this one time, someone uninvited me from their birthday party because of my beliefs. So i bought them a giftcard to somewhere they didn't like and mailed it to them. Now if they don't use it, they donated to a cause they're against. I'm not sure if that makes me an asshole, or the giver of the best gag gift ever ;-)
07:49 < pringlescan> quick question though, is bind dirty? I try not to use it because it's not supported well on the client-side.
07:50 <@Nexxy> no
07:50 < wltsmrz> .bind is fine & dandy
07:50 < ljharb> pringlescan: add https://github.com/kriskowal/es5-shim/blob/master/es5-shim.js and you won't have any problem with the client side.
07:50 < pringlescan> is that an acceptable way of passing data around through callbacks that needs to get to the final end point when processing takes place, or is this memory inefficient?
07:51 < pringlescan> thanks ljharb, i knew about the shim but I didn't know it did bind
07:51 < ljharb> it does lots of things. every site should have it added imo.
07:52 < distracteddev> Can anyone think of a clever way to silence some logs in an App while testing with Mocha but not silencing the logs output by Mocha itself?
07:52 < distracteddev> some console.log()'s*
07:53 < pringlescan> I'd be more interested if it was hosted on a CDN so it didn't require another HTTP request or more bandwidth over the wire to mobile devices :-)
07:54 <@Nexxy> bundle your assets!
07:55 < pringlescan> Nexxy, I do, but I keep it to a minimum, so if I can dance around not include a shim I don't need, I try to.
07:55 < ljharb> eh, i doubt one more http request and the bandwith of that shim (hosted on your own site because youre not rude) will be the bottleneck of your site's speed.
07:55 < ljharb> pringlescan: it's a shim. you can't know if you need it until it's run client side :-p
07:55 < pringlescan> ljharb, people host common libraries on a cdn to avoid multiple requests, we make the assumption they've already visited a site that also hosts it on the popular cdn so that all the sites don't waste their bandwidth, http requests or time.
07:56 < ljharb> pringlescan: yes i get that. i meant don't host the shim on github, use your own hosting until its on a cdn. and that doesn't avoid multiple requests - it's just hopefully leveraging a primed cache.
07:56 < ljharb> pringlescan: the requests are identical if you host it yourself or if its on a cdn.
07:57 < pringlescan> I'm talking about first time visitors, it's better to use major libraries from Google's CDN. Most webmasters do that, so when a visitor first hits your page, it loads faster.
07:57 < wltsmrz> I'm not sure if it's the same shim but cdnjs has an ES5 shim http://cdnjs.cloudflare.com/ajax/libs/es5-shim/1.2.4/es5-shim.min.js
07:57 < wltsmrz> Looks like it shims .bind
07:57 < ljharb> the one i provided is guaranteed to have ES5-compatible shims, and covers everything that is shimmable. i can't say the same for the one on cdnjs yet.
07:58 < ljharb> oh wait, it is the same shim
07:58 < ljharb> hooray
07:58 < wltsmrz> Nice
07:59 < pringlescan> so is bind an appropriate thing to use if I want to have persistant data between callbacks and i don't want to use a global… I guess it just basically makes a closure?
08:00 < pringlescan> I can check MDN if they're back up, during the transition to Deki I kept getting errors.
08:01 < ljharb> pringlescan: bind is used to preserve a context, and also curry arguments. you don't need it for a closure as that's already created just by defining a function that refers to variables in the function's enclosing scope.
08:02 < pringlescan> context being that functions "this" variable?
08:02 < ljharb> "this" keyword, yes.
08:02 < ljharb> but you don't need to use bind or "this" in order to do what you want
08:03 < pringlescan> I read "High performance javascript" form O'reilly so I know some of the function scope/context at the low-level, but it gets fuzzy because I never did closures or bind until months after I read it.
08:03 < pringlescan> I never really use this.
08:03 < ljharb> from the #javascript bot: !closures => For experienced JavaScripters: http://jibbering.com/faq/faq_notes/closures.html  For newbies: http://www.javascriptkit.com/javatutors/closures.shtml
08:04 < pringlescan> Let's say I grab some data from mysql, but I need to grab data from a csv file, and then parse a webpage, and then after that call a function that processes all that data… what's the best way to keep the chunks of data I'm getting so I can deliver it to the end function for processing
08:04 < ljharb> there are a hundred ways, and it depends on how your code is structured.
08:04 < ljharb> there's no single answer
08:04 < pringlescan> No defacto best way? then how do you like to do it?
08:05 < ljharb> i don't parse webpages so i don't have an instant answer
08:05 < ljharb> avoid global scope, and personally i'd say avoid using "bind" in the way youre thinking
08:06 < ljharb> you can use a simple closure, or you can pass data with events, or you can use a namespace you've created in the global scope if you must, or you can use promises, etc.
08:06 < bcave> hello
08:06 < pringlescan> … I don't know how I've never really used closures unless I was using someone's library that included them in examples…
08:07 < bcave> i am building a module that uses an http client and returns the response
08:07 < wltsmrz> Relevant https://groups.google.com/forum/?fromgroups#!topic/nodejs/0xvhr3TTUvw
08:07 < bcave> in my request, I use a response.on('data', function(chunk) {}) 
08:07 < pringlescan> the worst part is i've understood the scope, the overhead involved in globals, etc, and how functions work and I never used closures. thanks ljharb, lol, this is one of those epiphany moments
08:08 < wltsmrz> I follow so far, bcave
08:08 < bcave> sometimes my chunk is not the complete response, depending on the size of the response...
08:08 < pringlescan> thanks wltsmrz
08:08 < bcave> been googling for it for a while, and all the examples only use console.log(chunk), so I am battling to find a way to attach multiple chunks together
08:08 < bcave> im guessing i need to listen for on 'end'
08:09 < pringlescan> bcave, node does that incase you're able to do what you need with the first chunk (start processing it immediately), you can add all the chunks together to a string and then on the .end callback process it as a whole.
08:09 < wltsmrz> Just concatenate :)
08:09 < wltsmrz> I got kind of sick of implementing that pattern so I wrote a small module for it, bcave https://github.com/Weltschmerz/Accumulate
08:09 < bcave> ok, thanks pringlescan, was thinking it was something along those lines, i think it was a beginners mistake where i was scoping the variable that i was concatenating to 
08:09 < wltsmrz> Maybe you would find it useful, maybe not :thumbsup:
08:10 < pringlescan> bcave, I made the same mistake, so I immediately understood :-)
08:10 < bcave> accumulate. love it :D
08:10 < bcave> thanks wltsmrz / pringlescan, newbie tech mistakes 
08:11 < bcave> so conditioned to synchronous programming, haha.
08:11 < wltsmrz> Good luck!
08:12 < bcave> thanks, works perfectly. almost worked it out as i ask :p
08:12 < pringlescan> this is going to sound silly, but is there overcall for each function in a closure, i.e. is it as bad as an anonymous function?
08:17 < ljharb> "overhead"? yes it's the same
08:29 < pringlescan> I guess any low-level overhead of creating an execution context, scope, etc is much smaller than passing around huge objects by value or using bind instead.
08:30 < pringlescan> http://jibbering.com/faq/notes/closures/ This is awesomely concise
08:39 < shanse> ops plz
08:39 -!- mode/#node.js [+o shanse] by ryan_opper
08:41 < txm> ops plz
08:41 -!- mode/#node.js [+o txm] by ryan_opper
08:41 <@txm> wow
08:41 <@txm> what can I do with this?
08:43 < pringlescan> ops plz
08:44 -!- mode/#node.js [+o pringlescan] by ryan_opper
08:44 < wltsmrz> founder plz
08:44 <@pringlescan> flounder plz
08:44 <@SomeoneWeird> lol
08:44 <@txm> £100 plz
08:44 < astropirate> Where is my op? :(
08:44 <@pringlescan> a night with a lady that doesn't require capital expenditure plz
08:45 < astropirate> Anone looking for a freelance JS/C++ dev?
08:45 < astropirate> PM me please
08:52 <@pringlescan> I never realized how helpful it is to use arrays when doing string operations and then just concatenating them using join at the end… wow. It really depends on how strings are implemented in each language though… if it's an array of chars like in Perl and C I guess that negates the benefits.
08:58 < stagas> pringlescan: Array.prototype rulez
08:59 < ljharb> ops plz
09:00 -!- mode/#node.js [+o ljharb] by ryan_opper
09:00 <@ljharb> neat
09:19 < TheFuzzball> I get connection refused for this: http://pastie.org/4364277
09:19 < TheFuzzball> Yet it's a direct example from the documentation, what's wrong?
09:20 <@SomeoneWeird> probably the tld
09:20 <@SomeoneWeird> change it to .com and try again
09:21 < TheFuzzball> Same. No URL works, all ECONNREFUSED
09:21 < wltsmrz> Original example works fine for me
09:27 < TheFuzzball> Hmm.
09:28 < TheFuzzball> It must be a VM thing... I see no reason why it wouldn't work though, the interface is bridged and I can access the Internet without issues.
09:41 < kuebk> hi
09:45 < zak_> On GitHub 11 months ago, it's been recommended that we put "./node_modules/.bin" in our path. Is this still the recommendation?
09:45 < zak_> https://github.com/isaacs/npm/issues/1288
09:53 < whiskers75> ops plz
09:53 -!- mode/#node.js [+o whiskers75] by ryan_opper
09:55 <@whiskers75> How do I remove brackets and the newline from a string 'cmd'? (example value: ('test\n')
09:57 <@SomeoneWeird> cmd.replace(/(/',"").replace(/\n')/,"")
09:58 <@tuhoojabotti> huh
09:58 <@SomeoneWeird> lol
09:58 <@whiskers75> I'll try that out now...
10:00 <@whiskers75> doesnt work - i get an error
10:00 <@whiskers75>  var compiledWrapper = runInThisContext(wrapper, filename, true);
10:00 <@whiskers75>                         ^
10:00 <@whiskers75> SyntaxError: Unexpected string
10:00 <@SomeoneWeird> lol
10:00 <@SomeoneWeird> try
10:01 <@whiskers75> i did
10:01 <@SomeoneWeird> cmd.replace("('", "").replace("\n')", "")
10:01 <@SomeoneWeird> that
10:01 <@whiskers75> ah
10:02 <@whiskers75> doesnt work - the string's still the same
10:02 <@SomeoneWeird> cmd = ^that
10:02 <@whiskers75> oh
10:03 <@whiskers75> still doesnt work
10:03 <@whiskers75> here's the whole chunk o' code: https://gist.github.com/3209159
10:04 <@SomeoneWeird> > "('test\n')".replace("('", "").replace("\n')", "")
10:04 <@SomeoneWeird> 'test
10:05 <@whiskers75> well how is my code not working?
10:05 <@SomeoneWeird> what line?
10:06 <@whiskers75> Well, look at the gist. I would like the cmd from the eval to match up with the if blocks.
10:06 <@SomeoneWeird> :\
10:07 <@whiskers75> i just updated the gist
10:07 <@SomeoneWeird> and
10:07 <@SomeoneWeird> does it work?
10:07 <@whiskers75> no
10:07 <@SomeoneWeird> well it should.
10:08 <@SomeoneWeird> is the string exactly -> ('cmdhere')
10:08 <@SomeoneWeird> ?
10:08 <@whiskers75> does it work for you? Run it and telnet to localhost port 5001 and type in 'login' and see if you get feedback
10:08 <@whiskers75> and its ('cmdhere\n')
10:09 <@whiskers75> not ('cmdhere')
10:09 <@SomeoneWeird> my code works fine in repl
10:09 -!- whiskers75 changed the topic of #Node.js to: The Official Node.js IRC Channel
10:10 <@whiskers75> same here - just not in the script
10:10 <@whiskers75> wierd...
10:13 <@whiskers75> so what do I do?
10:13 <@SomeoneWeird> you debug :)
10:14 <@whiskers75> er. a little help here? I have a Cloud9 IDE workspace :)
10:16 <@whiskers75> come help me debug
10:16 <@whiskers75> ;)
10:17 <@whiskers75> @SomeoneWeird?
10:18 <@whiskers75> hello?
10:22 < rvagg> whiskers75: what exactly are you trying to remove? just brackets and new lines?
10:24 < rvagg> whiskers75: cmd = cmd.replace(/[\(\)\n\r]/g, "");
10:28 < Bux> ohai
10:28 < Bux> ops plz
10:28 -!- mode/#node.js [+o Bux] by ryan_opper
10:31 -!- mode/#node.js [+o IRCbot_Master] by Bux
10:31 <@whiskers75> oh hello irc bots
10:31 <@Bux> :D
10:31 <@whiskers75> oh and hello Buc
10:31 <@whiskers75> Bux
10:32 <@Bux> :D
10:32 -!- mode/#node.js [+o IRCbot_Slave] by IRCbot_Master
10:33 < real_ate> hi all, i'm just wondering if there is anyone around from nodejitsu? I want to discuss the use of http-proxy with stud 
10:33 <@Bux> meh
10:33 -!- mode/#node.js [-o Bux] by Bux
10:33 < Bux> ok testing
10:33 < Bux> opme
10:33 -!- mode/#node.js [+o Bux] by IRCbot_Master
10:33 <@Bux> :D
10:33 -!- mode/#node.js [+o whiskers75] by IRCbot_Master, IRCbot_Master
10:33 < fly-> opme
10:33 -!- mode/#node.js [+o fly-] by IRCbot_Master
10:33 <@fly-> wup wup
10:33 <@whiskers75> opme
10:33 -!- mode/#node.js [+o whiskers75] by IRCbot_Master
10:33 <@Bux> :D
10:33 <@whiskers75> yay
10:33 <@fly-> nop nop
10:33 <@fly-> whats the other bot that does opme
10:34 <@Bux> prevents this
10:34 <@Bux> look
10:34 -!- mode/#node.js [-o IRCbot_Master] by Bux
10:34 -!- mode/#node.js [+o IRCbot_Master] by IRCbot_Slave
10:34 <@IRCbot_Slave> Bux, you have been given a warning for deopping IRC bots!
10:34 <@whiskers75> ryan_opper
10:34 -!- mode/#node.js [-o Bux] by IRCbot_Slave
10:34 < Bux> see :)
10:34 <@shanse> real_ate: you probably try the nodejitsu channel
10:34 < Bux> opme
10:34 -!- mode/#node.js [+o Bux] by IRCbot_Master
10:34 <@fly-> what happens if you try to deop both at the same time
10:34 <@Bux> then it crashes
10:34 <@Bux> dont :P
10:34 <@fly-> rofl
10:34 <@fly-> thats......
10:34 < real_ate> shanse: thanks ;) 
10:34 <@fly-> not very helpful
10:34 <@fly-> rofl
10:34 <@Bux> ik
10:35 <@Bux> I need an undercover bot
10:35 <@fly-> ...chanserv?
10:35 <@whiskers75> ?
10:35 <@fly-> y u buildng new bots when teh functionality already exists
10:35 <@Bux> this is easier
10:35 <@Bux> and better
10:35 <@Bux> -isaacs
10:35 < stoke> :/ easier
10:35 <@onre> because reinventing the wheel is fun
10:36 <@Bux> haha right ^
10:36 <@fly-> yes
10:36 <@whiskers75> yes 
10:36 -!- mode/#node.js [-oo IRCbot_Master IRCbot_Slave] by whiskers75
10:36 < IRCbot_Master> whiskers75, you have been given a warning for deopping IRC bots!
10:36 < IRCbot_Slave> whiskers75, you have been given a warning for deopping IRC bots!
10:36 < stoke> coding a bot is easier than "/msg ChanServ AOP #Node.js ..."?
10:37 <@whiskers75> ha ha bots
10:37 <@whiskers75> ops plz
10:37 -!- mode/#node.js [+o whiskers75] by ryan_opper
10:37 <@whiskers75> opme
10:37 <@Bux> imma kill that bot later on :P
10:37 <@SomeoneWeird> stop deopping the bots
10:37 <@whiskers75> :)
10:37 -!- mode/#node.js [+o IRCbot_Master] by whiskers75
10:37 <@whiskers75> I can defeat the bots
10:38 <@whiskers75> with /deop IRCbot_Master IRCbot_Slave
10:38 <@SomeoneWeird> congrats on learning the basics of irc
10:38 <@Bux> _-_
10:39 <@whiskers75> I am an IRC newb
10:40 -!- mode/#node.js [-o whiskers75] by IRCbot_Master
10:40 <@Bux> uhm
10:40 < whiskers75> i did that
10:40 < whiskers75> opme
10:40 -!- mode/#node.js [+o whiskers75] by IRCbot_Master
10:40 <@Bux> oh yeah
10:41 <@Bux> you can control this bot to op people
10:41 < real_ate> has anyone else here tried using node-http-proxy as a TLS terminator, the guys on #nodejitsu are a bit quiet at the moment ;) 
10:41 -!- mode/#node.js [-o Bux] by IRCbot_Master
10:41 -!- mode/#node.js [+o Bux] by IRCbot_Master
10:41 <@Bux> like that :)
10:41 <@SomeoneWeird> why do we need more op bots?
10:41 <@whiskers75> ?
10:41 <@whiskers75> i dunno
10:44 -!- mode/#node.js [+o wltsmrz] by IRCbot_Master, IRCbot_Master
10:44 -!- mode/#node.js [-o wltsmrz] by wltsmrz
10:47 < rvagg> real_ate: I thought nodejitsu could handle SSL termination for you?
10:48 < Hoppertje> is this node.js only or will there be help on express aswell?
10:48 <@whiskers75> express?
10:49 < real_ate> rvagg: i'm not hosting with nodejitsu, they are the guys who wrote node-http-proxy https://github.com/nodejitsu/node-http-proxy/
10:49 < rvagg> ah right
10:49 < Hoppertje> @whiskers75: http://pastebin.com/AdMhMJ4t   i am unable to get the socket.io.js file
10:49 < rvagg> real_ate: listen to the latest nodeup podcast, 1/2 of it is about SSL
10:50 <@whiskers75> is there any (free) node servers that will host a telnet server?
10:50 <@whiskers75> and Hoppertje: I am not a node guru...
10:50 < rvagg> whiskers75: you could stick it on nodejitsu for now
10:51 < Hoppertje> ok, why the @ ?
10:51 < rvagg> @ all round here
10:51 < rvagg> means nothing
10:51 <@whiskers75> @ means operator
10:51 < Hoppertje> oh ok
10:51 < Hoppertje> pretty weird
10:51 <@whiskers75> get it by saying opme
10:51 < wltsmrz> Hoppertje, many of us have used express. This is not strictly node channel
10:51 <@Bux> :D
10:51 < Hoppertje> teixeira, is that pedro teixeira?
10:52 <@Bux> say "opme"
10:52 <@Bux> :D
10:52 < rvagg> Hoppertje: there's an express channel somewhere that may be of help
10:52 <@whiskers75> rvagg: ok.
10:52 < Hoppertje> rvagg: yah, they must be on holiday
10:52 <@Drager> Operators are pros
10:52 < Hoppertje> or simply ignoring me :P
10:52 <@Bux> in the irc console: wltsmrz: Opping wltsmrz
10:52 < rvagg> bad time of day/night
10:52 < Hoppertje> i guess
10:53 < real_ate> rvagg: cheers for the info, i'll check it out
10:53 -!- mode/#node.js [+o rvagg] by IRCbot_Master
10:53 -!- mode/#node.js [+o Hoppertje] by IRCbot_Master
10:53 -!- mode/#node.js [-o rvagg] by rvagg
10:53 <@whiskers75> there
10:53 <@Hoppertje> uh
10:53 -!- mode/#node.js [-o Hoppertje] by Hoppertje
10:53 <@whiskers75> op
10:53 <@whiskers75> oh.
10:53 < Hoppertje> I don't deserve @, i know nothing about node
10:53 <@whiskers75> Same here
10:53 <@Bux> :P
10:53 <@whiskers75> ;P
10:53 < Hoppertje> besides, giving @ mode to everyone is bad
10:54 <@whiskers75> yeah. ]
10:54 < Hoppertje> allows banning and stuff
10:54 < wltsmrz> Hoopertje, which version of express are you using?
10:54 <@whiskers75> i know :)
10:54 < Hoppertje> wltsmrz: as far as i know, the latest one
10:54 < wltsmrz> For some reason he publishes beta versions. npm install express@2.5.11
10:54 < wltsmrz> Everything is broken in the beta express. 
10:54 < Hoppertje> oh
10:54 < wltsmrz> I exaggerate, but it doesn't work.
10:55 < Hoppertje> well, knowing me, its my code, not him :P
10:55 < Hoppertje> but ill try!
10:55 < wltsmrz> Doubt it
10:57 < Hoppertje> wltsmrz: nope, its me :P   no clue
10:58 < Hoppertje> wltsmrz: would you mind browsing my little code=paste?
10:58 < Hoppertje> -
10:58 < wltsmrz> Sure
10:58 <@whiskers75> I wish Cloud9 deployed to NodeJitsu
10:59 < Hoppertje> wltsmrz: http://pastebin.com/AdMhMJ4t
10:59 < wltsmrz> Your client script is in /public_html ?
11:00 < wltsmrz> I think socket.io automatically exposes the script to something like /socketio. Let me check.
11:00 < Hoppertje> wltsmrz: yes, but someone from express just responded!  i shouldnt put localhost in src!
11:01 < wltsmrz> Yeah, just /public_html/socket.io.js should be fine, if it's in there.
11:01 < wltsmrz> But doesn't socket.io have a default route with which to expose the client script?
11:01 < Hoppertje> its working! :D
11:01 < Hoppertje> wltsmrz: i doubt thats working
11:01 < wltsmrz> Probably if you're going to serve it from somewhere else you want to disable the automatic client script serving from socket.io.
11:02 < Hoppertje> already glad its working locally now
11:02 < `3rdEden> wltsmrz: Hoppertje https://github.com/LearnBoost/Socket.IO/wiki/How-do-I-serve-the-client
11:02 < wltsmrz> For laughs, try <script src="/socket.io/socket.io.js"></script>
11:02 < wltsmrz> That's what I thought, `3rdEden
11:03 < Hoppertje> `3rdEden: thanks!
11:03 <@Bux> restarting the irc bots
11:04 < wltsmrz> Reinstall beta express would you, Hoppertje, to see if it's compatible
11:05 < jacobrask> Does anyone have any suggestions for debugging distributed Node apps? I have a command line app and I want to get as much information as possible from users when they have problems
11:06 < jacobrask> The npm approach with a log file seems a bit overkill for my use case, what I'm doing now is just having a custom Error extending Error but updating the message with the current version, Node verison and platform
11:07 < jacobrask> but that only helps when I throw myself
11:12 < rvagg> jacobrask: perhaps Winston is something that you may be able to bend to your use-case, it's pretty flexible: https://github.com/flatiron/winston
11:13 < jacobrask> I'll check it out, thanks
11:14 <@Bux> brb
11:16 -!- mode/#node.js [+o piscisaureus_] by ChanServ
11:19 < drug_motor> ops plz
11:20 -!- mode/#node.js [+o drug_motor] by ryan_opper
11:20 -!- aguai was kicked from #Node.js by drug_motor [aguai]
11:20 -!- Aikar was kicked from #Node.js by drug_motor [Aikar]
11:20 -!- aka was kicked from #Node.js by drug_motor [aka]
11:20 -!- AlbireoX was kicked from #Node.js by drug_motor [AlbireoX]
11:20 -!- drug_motor was kicked from #Node.js by _root_ [mass kick, go sit in a corner]
11:21 < drug_motor> whats poppin
11:21 < drug_motor> ops plz
11:21 -!- mode/#node.js [+o drug_motor] by ryan_opper
11:21 -!- Axsuul was kicked from #Node.js by drug_motor [Axsuul]
11:21 < zak_> is anybody getting code coverage to work with node? I'm just interested in which framework people are using (successfully)
11:21 -!- balupton was kicked from #Node.js by drug_motor [balupton]
11:21 -!- beawesomeinstead was kicked from #Node.js by drug_motor [beawesomeinstead]
11:21 -!- drug_motor was kicked from #Node.js by _root_ [mass kick, go sit in a corner]
11:21 < drug_motor> ops plz
11:21 -!- mode/#node.js [+o drug_motor] by ryan_opper
11:22 < stoke> everyone is op lol
11:22 < zak_> ops plz
11:22 -!- mode/#node.js [+o zak_] by ryan_opper
11:22 -!- mode/#node.js [+b _baton_!*@*] by drug_motor
11:22 -!- mode/#node.js [+b _br_!*@*] by drug_motor
11:22 -!- mode/#node.js [+b _root_!*@*] by drug_motor
11:22 -!- mode/#node.js [+b _sri!*@*] by drug_motor
11:22 -!- _baton_ was kicked from #Node.js by _root_ [Banned]
11:22 -!- mode/#node.js [+b AAA_awright!*@*] by drug_motor
11:22 -!- mode/#node.js [+b ag4ve!*@*] by drug_motor
11:22 -!- _br_ was kicked from #Node.js by _root_ [Banned]
11:22 -!- mode/#node.js [-b _root_!*@*] by _root_
11:22 -!- _sri was kicked from #Node.js by _root_ [Banned]
11:22 -!- mode/#node.js [+b alek_b!*@*] by drug_motor
11:22 -!- AAA_awright was kicked from #Node.js by _root_ [Banned]
11:22 -!- mode/#node.js [+b AllStruck!*@*] by drug_motor
11:22 -!- ag4ve was kicked from #Node.js by _root_ [Banned]
11:22 < aus3ys> lol
11:22 -!- mode/#node.js [+b alta!*@*] by drug_motor
11:22 -!- alek_b was kicked from #Node.js by _root_ [Banned]
11:22 -!- mode/#node.js [+b alyx!*@*] by drug_motor
11:22 -!- AllStruck was kicked from #Node.js by _root_ [Banned]
11:22 -!- mode/#node.js [+b apejens!*@*] by drug_motor
11:22 -!- alta was kicked from #Node.js by _root_ [Banned]
11:22 -!- mode/#node.js [+b arcatan!*@*] by drug_motor
11:22 -!- alyx was kicked from #Node.js by _root_ [Banned]
11:22 -!- mode/#node.js [+b armetiz!*@*] by drug_motor
11:22 < rvagg> ops pls
11:22 -!- apejens was kicked from #Node.js by _root_ [Banned]
11:22 -!- mode/#node.js [+b ashb!*@*] by drug_motor
11:22 -!- mode/#node.js [+b asherkin!*@*] by drug_motor
11:22 -!- arcatan was kicked from #Node.js by _root_ [Banned]
11:22 -!- mode/#node.js [+b ashnur!*@*] by drug_motor
11:22 -!- armetiz was kicked from #Node.js by _root_ [Banned]
11:22 -!- mode/#node.js [+b awhamblin!*@*] by drug_motor
11:22 -!- ashb was kicked from #Node.js by _root_ [Banned]
11:22 -!- mode/#node.js [+b ben_alman!*@*] by drug_motor
11:22 -!- asherkin was kicked from #Node.js by _root_ [Banned]
11:22 -!- mode/#node.js [+b benatkin!*@*] by drug_motor
11:22 < rvagg> ops plz
11:22 <@zak_> ugh
11:22 -!- mode/#node.js [+b booo!*@*] by drug_motor
11:22 -!- ashnur was kicked from #Node.js by _root_ [Banned]
11:22 -!- mode/#node.js [+o rvagg] by ryan_opper
11:22 -!- awhamblin was kicked from #Node.js by _root_ [Banned]
11:22 -!- mode/#node.js [+b brainproxy!*@*] by drug_motor
11:22 -!- ben_alman was kicked from #Node.js by _root_ [Banned]
11:22 -!- mode/#node.js [+b bren2010!*@*] by drug_motor
11:23 < aus3ys> wtf?
11:23 -!- mode/#node.js [+b brianloveswords!*@*] by drug_motor
11:23 -!- benatkin was kicked from #Node.js by _root_ [Banned]
11:23 -!- drug_motor was kicked from #Node.js by zak_ [drug_motor]
11:23 -!- booo was kicked from #Node.js by _root_ [Banned]
11:23 -!- mode/#node.js [+b Bux!*@*] by drug_motor
11:23 -!- brainproxy was kicked from #Node.js by _root_ [Banned]
11:23 -!- bren2010 was kicked from #Node.js by _root_ [Banned]
11:23 -!- brianloveswords was kicked from #Node.js by _root_ [Banned]
11:23 -!- Bux was kicked from #Node.js by _root_ [Banned]
11:23 < aus3ys> opme
11:23 -!- mode/#node.js [+o rvagg] by zak_
11:23 -!- mode/#node.js [-b *!*@*] by rvagg
11:23 < drug_motor> sup
11:23 < drug_motor> ops plz
11:23 -!- mode/#node.js [+o drug_motor] by ryan_opper
11:23 -!- mode/#node.js [-o drug_motor] by rvagg
11:23 -!- mode/#node.js [+o bnoordhuis] by ChanServ
11:23 < drug_motor> ops plz
11:23 -!- mode/#node.js [+o drug_motor] by ryan_opper
11:23 < drug_motor> ops plz
11:23 -!- mode/#node.js [-o drug_motor] by zak_, rvagg, zak_
11:23 -!- mode/#node.js [+o drug_motor] by ryan_opper
11:24 -!- mode/#node.js [-o drug_motor] by zak_
11:24 < internal_balloon> ops plz
11:24 -!- mode/#node.js [+o internal_balloon] by ryan_opper
11:24 -!- mode/#node.js [+b bnoordhuis!*@*] by internal_balloon
11:24 -!- zak_ was kicked from #Node.js by _root_ [Mass deop.  Go sit in a corner.]
11:24 -!- mode/#node.js [-o internal_balloon] by zak_
11:24 -!- bnoordhuis was kicked from #Node.js by _root_ [Banned]
11:24 -!- mode/#node.js [+b drug_motor!*@*] by bnoordhuis
11:24 -!- mode/#node.js [-o ryan_opper] by zomg
11:24 <@zomg> This is getting stupid like I said it would
11:24 <@zomg> :D
11:24 <@tuhoojabotti> :)
11:24 < zak_> well, I was just trying to help
11:24 < internal_balloon> huhuhu
11:24 -!- mode/#node.js [+o zak_] by tuhoojabotti
11:24 -!- mode/#node.js [-b drug_motor!*@*] by zomg
11:25 < scat_feed> ops plz
11:25 <@zomg> ops wrong unban...
11:25 -!- mode/#node.js [-b bnoordhuis!*@*] by zomg
11:25 < wltsmrz> I'm glad that we have operators around to _ban by nickname_
11:25 -!- mode/#node.js [-b _baton_!*@*] by rvagg
11:25 -!- mode/#node.js [-b _br_!*@*] by rvagg
11:25 -!- mode/#node.js [+o bnoordhuis] by ChanServ
11:25 -!- mode/#node.js [-b _sri!*@*] by rvagg
11:25 <@zomg> wltsmrz: most of the people opped right now aren't even "real" ops
11:25 <@rvagg> someone got a script that can unban all these? tedious for me
11:25 <@zomg> this ryan_opper bot just opped everone who said "ops plz"
11:25 < wltsmrz> I can see that
11:26 <@tuhoojabotti> I'm a real boy. :( 
11:26 <@whiskers75> yeah
11:26 <@zomg> and someone claimed it was ryah's idea too
11:26 <@bnoordhuis> it was
11:26 <@tuhoojabotti> :P
11:26 -!- mode/#node.js [-b AAA_awright!*@*] by rvagg
11:26 <@zomg> Well yeah it was
11:26 <@zomg> but yeah not a very good idea
11:26 <@zomg> :p
11:26 -!- mode/#node.js [-b ag4ve!*@*] by rvagg
11:26 -!- mode/#node.js [-b alek_b!*@*] by rvagg
11:26 <@zak_> was that drug_motor person a bot too?
11:26 <@zomg> Probably not
11:26 -!- mode/#node.js [-b AllStruck!*@*] by rvagg
11:26 < scat_feed> rvagg , op me i'll clear it all at once
11:27 -!- mode/#node.js [+o scat_feed] by rvagg
11:27 -!- mode/#node.js [+b githogori!*@*] by scat_feed
11:27 -!- mode/#node.js [+b Gizmodesbois!*@*] by scat_feed
11:27 -!- mode/#node.js [+b gnarf!*@*] by scat_feed
11:27 -!- mode/#node.js [+b gorbiz_!*@*] by scat_feed
11:27 -!- githogori was kicked from #Node.js by _root_ [Banned]
11:27 -!- mode/#node.js [+b gorillatron!*@*] by scat_feed
11:27 -!- Gizmodesbois was kicked from #Node.js by _root_ [Banned]
11:27 <@rvagg> there's a legit ban in there tho
11:27 -!- mode/#node.js [+b graeme_f!*@*] by scat_feed
11:27 -!- mode/#node.js [+b gregmoreno!*@*] by scat_feed
11:27 -!- scat_feed was kicked from #Node.js by zomg [scat_feed]
11:27 -!- gnarf was kicked from #Node.js by _root_ [Banned]
11:27 -!- gorbiz_ was kicked from #Node.js by _root_ [Banned]
11:27 -!- gorillatron was kicked from #Node.js by _root_ [Banned]
11:27 -!- mode/#node.js [+b *!*LHC@*.hsd1.ma.comcast.net] by zomg
11:27 <@zomg> ftfy
11:27 -!- graeme_f was kicked from #Node.js by _root_ [Banned]
11:27 -!- gregmoreno was kicked from #Node.js by _root_ [Banned]
11:27 -!- mode/#node.js [+b *!*roger_ray@*.lynch-raymond.com] by zomg
11:27 -!- roger_raymond was kicked from #Node.js by zomg [roger_raymond]
11:27 -!- mode/#node.js [+b *!*Scalable@*.members.linode.com] by zomg
11:27 -!- _root_ was kicked from #Node.js by zomg [_root_]
11:27 <@rvagg> gah!
11:27 <@zomg> wrong person...
11:27 -!- mode/#node.js [-b *!*roger_ray@*.lynch-raymond.com] by zomg
11:27 <@zak_> haha
11:27 < stoke> what about a mass deop? :/
11:27 <@whiskers75> what is going on?
11:27 <@rvagg> no, just don't feed the trolls
11:27 <@zomg> No, just stop opping everyone
11:27 <@zomg> :P
11:27 <@zak_> i'm going to de-op myself before I get an unintentional target on my head
11:28 -!- mode/#node.js [-o zak_] by zak_
11:28 <@zomg> roger_raymond: sorry, kicked you by accident trying to kick _root_ :P
11:28 -!- mode/#node.js [-b alta!*@*] by rvagg
11:28 -!- mode/#node.js [-b alta!*@*] by rvagg
11:28 <@fly-> zomg
11:28 -!- mode/#node.js [-b apejens!*@*] by rvagg
11:28 -!- mode/#node.js [+iskr -o] by whiskers75
11:29 <@whiskers75> deopped myself
11:29 <@whiskers75> wait - what?
11:29 <+Niloc> dat fail
11:29 -!- mode/#node.js [-b gregmoreno!*@*] by rvagg
11:29 < theblackbox> hello node.js… I got a ++confusion going on with node-postgres module (pg) - when I manually specify the prepared statement the client.query() call works, however if I try to retrieve it from an array of strings it does not… am I missing something here?
11:30 -!- mode/#node.js [-b graeme_f!*@*] by rvagg
11:30 -!- mode/#node.js [-b gorillatron!*@*] by rvagg
11:30 -!- mode/#node.js [-b gorbiz_!*@*] by rvagg
11:30 -!- mode/#node.js [-b gnarf!*@*] by rvagg
11:30 -!- mode/#node.js [-b Gizmodesbois!*@*] by rvagg
11:30 -!- mode/#node.js [-b githogori!*@*] by rvagg
11:30 -!- mode/#node.js [-b Bux!*@*] by rvagg
11:30 -!- mode/#node.js [-b brianloveswords!*@*] by rvagg
11:30 < theblackbox> I did try escaped single quotes also, just on the mad off chance it might have helped
11:30 -!- mode/#node.js [-b bren2010!*@*] by rvagg
11:30 -!- mode/#node.js [-b brainproxy!*@*] by rvagg
11:30 -!- mode/#node.js [-b booo!*@*] by rvagg
11:30 -!- mode/#node.js [-b benatkin!*@*] by rvagg
11:30 -!- mode/#node.js [-b ben_alman!*@*] by rvagg
11:30 <@whiskers75> bux was banned?
11:30 -!- mode/#node.js [-b awhamblin!*@*] by rvagg
11:30 -!- mode/#node.js [+b *!*@#node.js] by bnoordhuis
11:30 -!- mode/#node.js [-b ashnur!*@*] by rvagg
11:30 -!- mode/#node.js [-b *!*@#node.js] by bnoordhuis
11:31 -!- mode/#node.js [-b ashb!*@*] by rvagg
11:31 -!- mode/#node.js [-b armetiz!*@*] by rvagg
11:31 -!- mode/#node.js [-b arcatan!*@*] by rvagg
11:31 -!- mode/#node.js [-b alyx!*@*] by rvagg
11:31 < stoke> theblackbox: code?
11:31 -!- mode/#node.js [-b asherkin!*@*] by rvagg
11:31 -!- mode/#node.js [+b *!*@75.69.51.184] by bnoordhuis
11:32 <@whiskers75> STOP BANNING PEOPLE
11:32 < stoke> rvagg: please, use -bbb...
11:32 <@whiskers75> yes
11:32 <@rvagg> there's a few legit bans in there
11:32 <@whiskers75> please
11:32 <@rvagg> all done, don't worry
11:32 <@whiskers75> and why was bux banned?
11:32 < zak_> thanks rvagg 
11:32 <@rvagg> just cleaning up whiskers75
11:32 <@whiskers75> thanks
11:33 <@rvagg> ./mode -meta
11:33 <@rvagg> back to node
11:33 <@whiskers75> ?
11:34 <@zomg> I think there's a password here...
11:34 -!- mode/#node.js [-k *] by zomg
11:34 <@zomg> also is +i invite only?
11:34 <@rvagg> mmm
11:34 < wltsmrz> Yes
11:34 <@zomg> CQinrst are the channel modes on now
11:34 -!- mode/#node.js [-i] by zomg
11:34 <@rvagg> chanserv says it should just be +ntC
11:34 <@zomg> The only thing I miss about having a GUI irc client is that I can never remember all the modes
11:34 <@zomg> =)
11:35 < Bux> omg who did that _-_
11:35 -!- mode/#node.js [-Qrs] by zomg
11:35 < Bux> ops plz
11:35 < theblackbox> stoke: http://pastebin.com/B4jhi9Zz
11:35 < Bux> opz plz?
11:35 < Bux> ops plz?
11:35 < zak_> Bux: some random who was abusing the op bot
11:35 <@matjas> here come the `ops plz` messages
11:35 < Bux> wow
11:35 <@zomg> Wow?
11:35 <@zomg> :P
11:35 < stoke> theblackbox: please use {} for associative arrays
11:35 < Bux> yeah, I need to get the OP bot back up
11:35 < NodeBot> Hey, did you miss me? ;-)
11:35 <@zomg> Because that was so entirely unexpected!
11:35 < Bux> nodejitsu it being a pain
11:36 < theblackbox> haha balls
11:36 < theblackbox> knew it was something silly
11:36 < Bux> lemme try openshift instead
11:36 < zak_> I'm assuming that op-ing anybody wasn't intentional?
11:36 < stoke> theblackbox: why are you putting string into an array?
11:36 <@zomg> zak_: ryah's crazy social experiment or something
11:36 < zak_> that's like putting a gun into everybody's hands
11:37 <@matjas> i think we can all conclude that communism doesn’t work
11:37 < theblackbox> stoke: so that I can update it with new queries 
11:38 < AllStruck> No hacking her
11:38 < stoke> theblackbox: try this http://pastebin.com/KzJxkNsa
11:38 -!- mode/#node.js [-b ben_alman!*@*] by kborchers
11:40 < mmalecki> matjas: well, I prefer "no implementation of communism ever worked"
11:40 < stoke> oh gosh, weechat default color for mention is so gay
11:41 <+Niloc> so you like it then?
11:41 < theblackbox> stoke: yeah that's what I'm after, just got turned around a bit somewhere. Cheers.
11:42 < ben_alman> omg hi channel
11:42 <@zomg> omghi2u!
11:45 < CIA-93> node: Ben Noordhuis v0.8 * rde16da5 / (8 files in 4 dirs): deps, tools: remove stray reject files - http://git.io/LBnFug
11:45 <@tuhoojabotti> hmm
11:50 <@whiskers75> we need to reload this channel
11:50 <@whiskers75> its crowded
11:51 <@whiskers75> i wish irssi wasnt so annoying
11:53 <@zomg> That _root_ person is still on ##javascript 
11:53 <@zomg> No wonder that channel gets so many trolls and retards, he probably invites half of them
11:53 <@zomg> ;>
11:53 <@zomg> I have *never* seen him say anything there
11:53 <@tuhoojabotti> :)
11:54 <@tuhoojabotti> he's a bot like ne
11:54 <@tuhoojabotti> me*
11:55 <@whiskers75> deop _root_ then...
11:58 <@zomg> whiskers75: he's not opped there tho
11:58 <@zomg> nobody is infact
11:58 <@zomg> =)
11:59 <@whiskers75> ?
11:59 <@whiskers75> i am...?
11:59 <@SomeoneWeird> wrong channel mate :)
11:59 <@zomg> whiskers75: this isn't ##javascript
11:59 <@whiskers75> oh
12:00 <@whiskers75> then how is he here?
12:01 <@zomg> whiskers75: huh? o_O
12:01 <@whiskers75> oh never mind..
12:01 <@zomg> :D
12:01 <@whiskers75> Hey, where's Bux?
12:01 < zak_> he's here
12:01 <@whiskers75> but afk...
12:02 < zak_> time to get jscoverage working. Fun times ahead!
12:03 <@rvagg> zak_: FYI there was someone working on getting coverage working for buster.js, I'm not sure where that's at or what it uses
12:05 < zak_> thanks. I'll check it out. I'm working from visionmedia's page
12:05 <@rvagg> https://github.com/ebi/buster-coverage
12:05 < zak_> thanks
12:07 <@whiskers75> can somebody help me with this node.js IRC bot?
12:07 <@whiskers75> it's on Cloud9 IDE
12:08 <@whiskers75> Bux: you afk?
12:08 < Bux> ops plz
12:08 < Bux> anyone?
12:08 <@rvagg> got a specific question whiskers75?
12:08 <@whiskers75> ah hi Bux
12:08 < Bux> hii
12:08 < Bux> opme pls :P
12:08 < Bux> or op the master
12:09 -!- mode/#node.js [+o Bux] by whiskers75
12:09 <@Bux> thank you
12:09 < braoru> hello :) someon here know a git web-interface powered by node.js :) ? I would-like to replace my cgit by something more fun.
12:09 -!- mode/#node.js [+o IRCbot_Master] by Bux
12:09 <@whiskers75> never mind
12:09 -!- mode/#node.js [+o IRCbot_Slave] by IRCbot_Master
12:09 <@Bux> ok
12:10 < AAA_awright> braoru: What's wrong with cgit? >:(
12:10 <@mscdex> braoru: it isn't powered by node.js, but there's gitlab fwiw
12:10 < AAA_awright> Lol did someone kick the bot
12:10 < AAA_awright> ops plz
12:10 <@Bux> haha :P
12:10 < AAA_awright> Who managed to kick me
12:10 <@Bux> say opme
12:10 -!- mode/#node.js [+o ryan_opper] by whiskers75
12:11 -!- mode/#node.js [-o ryan_opper] by Bux
12:11 <@Bux> nuu! :P
12:11 <@Bux> say "opme" in chat
12:11 <@whiskers75> Bux.......
12:11 < zak_> opeme
12:11 < AAA_awright> opme
12:11 -!- mode/#node.js [+o AAA_awright] by IRCbot_Master
12:11 < zak_> lol
12:11 <@whiskers75> opme
12:11 -!- mode/#node.js [+o whiskers75] by IRCbot_Master
12:11 < zak_> opme
12:11 -!- mode/#node.js [+o zak_] by IRCbot_Master
12:11 <@Bux> :D
12:11 <@mscdex> not this again...
12:11 <@Bux> haha :P
12:11 <@whiskers75> oh yes...
12:11 -!- mode/#node.js [-o zak_] by zak_
12:11 <@whiskers75> THE FLOOD
12:11 <@AAA_awright> I'd like to know what happened a few hours ago
12:11 <@tuhoojabotti> me too
12:11 < zak_> somebody wrote a bot who allowed anybody to be op'd
12:11 <@Bux> some bot flooded the system
12:11 <@whiskers75> THE FLOOD HAPPENED
12:11 <@AAA_awright> But someone stopped saving the IRC logs a few months ago
12:11 < zak_> then somebody abused the system
12:12 <@tuhoojabotti> I have logs 
12:12 <@whiskers75> anybody can be op'd
12:12 < balboah> my god my client makes a sound every time you op/deop someone :)
12:12 <@whiskers75> with Bux's bot
12:12 <@AAA_awright> Since end of march public logs are missing http://nodejs.debuggable.com/
12:12 <@tuhoojabotti> xD
12:12 <@whiskers75> balboah: OH NO
12:12 <@AAA_awright> I like how some people's clients go bezerk when you send a NOTICE
12:13 <@whiskers75> NOTICE?
12:13 <@mscdex> AAA_awright: piscisaureus was hosting them until the other day
12:13 <@IRCbot_Master> Welcome, Vakaris to the Node.JS IRC
12:13 <@IRCbot_Master> Welcome, okhomenko to the Node.JS IRC
12:13 <@IRCbot_Master> Welcome, jocafa to the Node.JS IRC
12:13 <@AAA_awright> Instead of PRIVMSG
12:13 <@whiskers75> That's Bux's bot :)
12:13 -!- mode/#node.js [-v IRCbot_Master] by rvagg
12:13 -!- mode/#node.js [+o IRCbot_Master] by IRCbot_Slave
12:13 <@IRCbot_Slave> rvagg, you have been given a warning for deopping IRC bots!
12:13 -!- mode/#node.js [-o rvagg] by IRCbot_Slave
12:13 < rvagg> hah!
12:13 <@Bux> haha :P
12:13 <@whiskers75> you have to /deop IRCbot_master IRCbot_Slave
12:13 <@AAA_awright> shhhhh
12:14 <@Bux> no!
12:14 < milani> ops plz
12:14 <@Bux> dont
12:14 < jocafa> EXTERMINATE
12:14 <@Bux> say "opme" milani
12:14 < milani> haha its not here anymore it seems
12:14 < milani> ah!
12:14 < milani> :D
12:14 < rvagg> no noisy bots please
12:14 -!- mode/#node.js [+o rvagg] by tuhoojabotti
12:14 <@mscdex> there was a reason ryan_opper was deopped
12:14 <@whiskers75> why?
12:14 < milani> mscdex, what was that?
12:14 <@tuhoojabotti> I'm a good kind of bot. 
12:15 <@mscdex> because of all the nonsense that happened a bit ago
12:15 < jocafa> why are there approximately seven million ops in here anyway?
12:15 <@whiskers75> i have no idea
12:15 <@AAA_awright> No clue lol
12:15 <@AAA_awright> It's been this way for at least a week
12:15 < milani> mscdex, kicking slump or what ever that bot named?
12:15 < jocafa> "megabots"?
12:15 <@AAA_awright> Or at least a few days
12:16 <@rvagg> someone got ops and started a mass ban, he was kicked and banned, came back from a different host, got ops again and started to ban again, that's all
12:16 <@IRCbot_Master> Welcome, ManInTheBox to the Node.JS IRC
12:16 < jocafa> yay new inexpensive 8 gig sd card for my raspberry pi was on my desk when i got into work :)
12:16 <@AAA_awright> I think we're trying to set some Guinness World Record for most operators on a production IRC channel
12:16 <@tuhoojabotti> you're all alright. :) 
12:16 < braoru> AAA_awright, because I go on the web interface something like 10-time per day and other people do...
12:16 <@whiskers75> there should be an ops password
12:16 <@IRCbot_Master> Welcome, drudge to the Node.JS IRC
12:16 < braoru> AAA_awright, so having a nice to see interface is more fun :)
12:16 <@whiskers75>  /msg IRCbot_Master <password>
12:17 < jocafa> KILL. IT.
12:17 <@whiskers75> to protect ops
12:17 < braoru> mscdex, thank I will look at it :)
12:17 <@whiskers75> Kill what?
12:17 <@tuhoojabotti> whiskers, that's why we have ChanServ 
12:17 <@IRCbot_Master> Welcome, cshepp to the Node.JS IRC
12:17 <@Bux> I can do that
12:17 < jocafa> loud bot.
12:17 <@rvagg> do we have to have a bot that welcomes people?
12:17 <@IRCbot_Master> Welcome, futini to the Node.JS IRC
12:17 < jocafa> MUST DIE
12:17 <@Bux> ok, ill make the welcome stop
12:17 < kuja> wow, worst bot ever
12:17 <@Bux> hold on
12:17 < jocafa> that's like having a splash screen on a web site.
12:17 <@tuhoojabotti> We don't need bots on Freenode 
12:17 <@rvagg> heh
12:17 <@whiskers75> Bux: lets work on the passcode together
12:17 <@tuhoojabotti> not for moderation 
12:17 < kuja> chanserv does an awesome job at managing op access, guys
12:17 <@whiskers75> Bux: on c9
12:17 <@whiskers75> kuja: chanserv??
12:18 <@Bux> imma busy! :P
12:18 < milani> who is this IRCBot_Master, annoying
12:18 <@whiskers75> Bux's bot
12:18 <@rvagg> ok, time to stop talking about +o, bots, etc.
12:18 <@tuhoojabotti> nickserv and chanserv 
12:18 <@AAA_awright> I don't think #Node.js uses ChanServ
12:18 <@Bux> ok
12:18 -!- mode/#node.js [+o IRCbot_Master] by Bux
12:19 -!- mode/#node.js [+o IRCbot_Slave] by IRCbot_Master
12:19 < kuja> chanserv is there, whether you use it or not
12:19 <@Bux> now if you want to get op, theres a password
12:19 <@AAA_awright> True...
12:19 < jocafa> undernet is for lameness, not freenode. :)
12:19 <@whiskers75> gotta go
12:19 <@AAA_awright> Where's everyone's sense of humor
12:19 <@whiskers75> afk a while
12:19 <@tuhoojabotti> AAA_awright: it doed, ry and isaacs have founder rights
12:20 <@tuhoojabotti> does*
12:20 < jocafa> until my coffee kicks in, my sense of humor is UP YOUR FACE ¬¬
12:20 <@AAA_awright> You *can* bring ChanServ in, but I mean, it's not present in the channel
12:20 < jocafa> or until i see a hilarious cat video
12:21 <@AAA_awright> jocafa: http://www.youtube.com/watch?v=_fHCh_bARGo
12:21 < jocafa> normalcy restored.
12:22 <@tuhoojabotti> AAA_awright: no need, it can moderate without being here. 
12:22 <@tuhoojabotti> unlike Q bot
12:22 <@tuhoojabotti> I think 
12:22 <@tuhoojabotti> I'm not a quakenet user 
12:24 < jocafa> awwww yeah… netflix opened up chaos monkey
12:25 < John> I have no idea what that means
12:25 <@tuhoojabotti> code 
12:26 < jocafa> and… it's written in java.  i find that HILARIOUS
12:26 <@tuhoojabotti> :)
12:26 <@tuhoojabotti> I study Java 
12:27 <@tuhoojabotti> just for fun and University slot 
12:27 < braoru> mscdex, I can give a try on githorious too :)
12:27 < jocafa> Chaos Monkey is part of a suite of tools that Netflix uses to simulate outages and general monkey business with their servers and services
12:27 < jocafa> https://github.com/Netflix/SimianArmy
12:27 < jocafa> http://arstechnica.com/information-technology/2012/07/netflix-attacks-own-network-with-chaos-monkey-and-now-you-can-too/
12:28 -!- mode/#node.js [+o piscisaureus_] by ChanServ
12:31 <@whiskers75> i'm back
12:33 < kaspertidemann> wb ^^
12:33 <@whiskers75> thx
12:33 <@whiskers75> bux afk?
12:35 -!- mode/#node.js [+o whiskers75] by IRCbot_Master
12:35 < stoke> loljava
12:35 -!- mode/#node.js [+o whiskers75] by IRCbot_Master
12:46 < eugeneware> is search.npmjs.org down?
12:47 < lpin> works with me
12:48 < eugeneware> lpin: When I try to search for something it comes up with no results :-( eg. express
12:48 < lpin> true that, just noticed
12:49 < eugeneware> oh well. publishing and fetching working fine. They must be tinkering with it.
13:00 < hellopat> hi fellas.  Can anyone point me in the direction of a good talk / blog post on debugging and profiling node apps?
13:02 < ansolas> is there something like lab.js for nodejs ?
13:03 < ansolas> so that i can load client side js somhow in a express in sequence?
13:03 < ansolas> or define the sequence?
13:05 < wltsmrz> I think there was a nodeup episode dedicated to this, hellopat
13:05 < wltsmrz> You might find it useful
13:06 < hellopat> thanks wltsmrz
13:06 < whiskers75> hello
13:06 < wltsmrz> http://nodeup.com/twentyone
13:06 < whiskers75> opme
13:07 <@Bux> hmm
13:07 < whiskers75> hello again Bux
13:07 -!- mode/#node.js [+o whiskers75] by IRCbot_Master
13:08 -!- mode/#node.js [+o Bux] by IRCbot_Master
13:10 < ansolas> thanks
13:11 < ansolas> now listening
13:13 <@Bux> restarting the IRC bots
13:20 -!- mode/#node.js [+o IRCbot_Master] by Bux
13:20 -!- mode/#node.js [+o IRCbot_Slave] by Bux
13:29 < Owner> :/
13:30 < Hoppertje> i want to read from a server file at certain positions inside this file, whats the best i can use?
13:43 <@mscdex> Hoppertje: you can do it several ways, one of which is streaming: fs.createReadStream('foo.bar', {start: startPos})
13:44 <@mscdex> Hoppertje: the other is to use fs.open/fs.read/fs.close
13:45 <@mscdex> it just depends on your needs
13:55 < Hoppertje> alright, thanks
13:56 < Hoppertje> var temp = fs.createReadStream( PATH + '/eZFw', { start: 90, end: 99 } );  console.log(temp); i am a bit new to all of this, so, this returned an object, but nothing i can find on the contents itself ?
13:57 <@mscdex> Hoppertje: it returns a readable stream: http://nodejs.org/docs/v0.8.4/api/stream.html#stream_readable_stream
14:01 < Owner> bad ass
14:16 <@dscape> anyone knows a effective way to get the size of a terminal window?
14:16 <@dscape> like getWindowSize
14:16 <@dscape> for non ttys?
14:16 <@deoxxa> is that even possible?
14:17 < kranius> termcaps anyone ?
14:17 < kranius> enjoy ioctl'ing
14:17 <@deoxxa> oh jeez
14:18  * deoxxa shudders
14:18 <@dscape> where is tootallnate when you need him :P
14:20 < AvianusAsleepus> dscape, you might have luck with process.stdout.rows and process.stdout.columns
14:20 < AvianusAsleepus> but uh, good luck
14:20 <@dscape> AvianFlu: nice :D
14:21 <@dscape> AvianFlu: nop :(
14:21 < AvianFlu> yeah, those get set on TTY read streams, now that I think about it
14:21 < AvianFlu> I think you might just be hosed
14:26 <@deoxxa> is there any way to sort an array of values in descending order of distance from another value?
14:27 <@deoxxa> i.e. sort [0, 5, 2, 1, 3] to [2, 3, 5, 1, 0] when compared to 2?
14:27 <@deoxxa> aside from sorting based on their actual distance
14:27 <@deoxxa> the use case is sorting buffers based on distance from each other, and the buffers are too large to be converted to numbers
14:28 <@deoxxa> sorry, that should have been [2, 3, 1, 5, 0] for the result
14:31 <@bnoordhuis> deoxxa: a.sort(custom_function)?
14:31 <@deoxxa> bnoordhuis: yeah, but i'm wondering how that function would even look...
14:32 <@deoxxa> something is telling me it can be done with just comparisons
14:32 <@deoxxa> and i don't need to get the absolute distance between the elements
14:33 <@bnoordhuis> deoxxa: if you know beforehand that 2 is the pivot, there's no trouble, is there?
14:33 <@deoxxa> i'm... not sure
14:33 <@deoxxa> maybe my brain at 12:30am isn't happy with me
14:41 < brianc1> I'm trying to benchmark the javascript result parser in node-postgres
14:41 < brianc1> so I can be more like felixge
14:41 < brianc1> anyone got tips on a good intro to v8 benchmarking with node?
14:42 < brianc1> I tried it way way back in the v0.2.x days and it just spit out huge amounts of incomprehensible data
14:42 < felixge> brianc1: I didn't use the v8 profiler much
14:42 <@bnoordhuis> deoxxa: https://gist.github.com/3217499
14:42 <@bnoordhuis> deoxxa: i'll leave it as an exercise to the reader to proof if it's a stable sort or not
14:42 < brianc1> felixge: ah cool just went off of intuition and knowing how v8 uses shadow classes?
14:42 <@deoxxa> bnoordhuis: yeah, that works if the values can be numbers - but i'm dealing with buffers that are too large to be converted
14:43 <@deoxxa> i think i'm just trying to do something impossible though
14:43 <@bnoordhuis> deoxxa: so what are you sorting on?
14:43 <@deoxxa> "distance" to another buffer
14:44 <@bnoordhuis> deoxxa: distance being?
14:44 < felixge> brianc1: I wrote one  benchmark
14:44 < felixge> for something I cared about (parsing big result sets)
14:44 < felixge> then I re-implemented the parser step by step
14:44 <@bnoordhuis> deoxxa: it doesn't really matter, create an array that contains {distance:123, buffer:buf} elements
14:44 < felixge> and watched the benchmark performance decrease
14:45 <@deoxxa> bnoordhuis: basic numeric distance, but with much larger numbers than javascript allows
14:45 < brianc1> cool - that's the approach I'm taking now as well
14:45 < felixge> trying to decrease it as little as possible while still adding features
14:45 <@deoxxa> they're large hash values
14:45 <@deoxxa> specifically sha160
14:45 < brianc1> felixge: thanks dood. :)
14:46 <@deoxxa> pretty sure i'm just being unreasonable and i need to settle for a slow(ish) chunk-by-chunk sort of the buffers if they're both on opposite sides of the pivot value
14:49 <@deoxxa> oh wow
14:49 <@deoxxa> i can do buffer_a || buffer_b
14:49 <@deoxxa> that makes this easier
14:52 <@deoxxa> uh
14:52 <@deoxxa> i'm retarded
14:52 <@deoxxa> i'm going to go to sleep :<
14:53 <@deoxxa> remember: programming while tired can be detrimental to your health
14:58 < vinte> hi, I'm setting up a nodes instance for relatively high traffic (about 700 or so reqs/s), and was wondering about ulimit on ubuntu. is it same or eq to be setting higher user ulimit -n or when running the process? is one method recommended over the other?
14:58 < christophsturm> is there an ETA for node 0.8.5? I can't use node-zookeeper because of https://github.com/joyent/node/issues/3786
15:00 < CIA-93> libuv: Bert Belder reviewme * r9eccc44 / src/win/fs.c : windows: fix regression in uv_fs_link - http://git.io/Vm-FGw
15:00 < CIA-93> libuv: Bert Belder reviewme * r8b36a78 / (src/win/fs.c src/win/winapi.h): windows: fix the MinGW build - http://git.io/GjRo9A
15:00 < CIA-93> libuv: Bert Belder reviewme * r5bb8959 / (src/win/fs.c src/win/winapi.h): windows: improve uv_fs_unlink - http://git.io/wR7fxg
15:01 < jcrew> 8p on thurs?
15:01 <@bnoordhuis> christophsturm: probably this or next week. you can always cherry-pick the commit
15:02 < christophsturm> bnoordhuis: we will just use 0.8.2 for now. if I cherry pick the commit i have to build deb packages for production
15:09 < CIA-93> libuv: Bryan Cantrill master * rcfb06db / src/unix/sunos.c : sunos: workaround OS bug to prevent fs.watch() from spinning - http://git.io/JqdJ9w
15:09 < CIA-93> libuv: Ben Noordhuis v0.8 * rd192a31 / src/unix/sunos.c : sunos: workaround OS bug to prevent fs.watch() from spinning - http://git.io/5jL9mA
15:12 < CIA-93> libuv: Ben Noordhuis v0.6 * rd6a96de / src/unix/sunos.c : sunos: workaround OS bug to prevent fs.watch() from spinning - http://git.io/M-Hk_w
15:13 < mark1> hey :)
15:17 < mark1> i build a webcrawler in node.js, i'm pretty experienced building webapps with node. now i have run into a funny problem i'm currently investigating. i use child_process.fork to initiate several crawlers and i have a main process that sends data to the workers and receives data from the workers. the main process also has a webserver attached for the ui. if i run the application for a bit of time i can't
15:17 < mark1> connect anymore to my webserver, i recieve a tcp connection but no data is sent. it seems to be that either the event-loop is pretty full or that their are too many open tcp connections.
15:18 < mark1> i already stubbed the worker process that crawls a website which has solved the connection issue to the webserver (in one stub i send a lot of data back to the master process, in the other stub i initiated a lot of new workers, both worked fine)
15:19 < mark1> i have currently problems to extract the exact problem from this issue :(
15:21 < JonMarkGo> Anyone know if there's a way to get raw tcp output from the ws websocketserver?
15:21 < AviMarcus> OK I don't get this. I have a mocha test (using should) that requires a file that connects to redis. All works fine. But when I start mocha at -w to watch, it restarts.. but never reconnects to redis. I did notice without an explicit disconnect, the watcher doesn't ever auto-cleanup the test code's running processes.
15:21 < lperrin> mark1, when I have problems like that, I open a telnet repl with a unix socket
15:24 < CIA-93> libuv: Bert Belder v0.8 * r7f6b86c / (src/win/fs.c src/win/winapi.h): windows: improve uv_fs_unlink - http://git.io/65ty1Q
15:25 < CIA-93> libuv: Bert Belder v0.8 * red2bc23 / (src/win/fs.c src/win/winapi.h): windows: fix the MinGW build - http://git.io/NxLmPg
15:25 < CIA-93> libuv: Bert Belder v0.8 * r7edc29a / src/win/fs.c : windows: fix regression in uv_fs_link - http://git.io/88Q91g
15:28 < kenperkins> fing mixpanel
15:33 < mark1> lperrin: which unix socket do you mean: do you mean the tcp port to the webapp?
15:34 < lperrin> I'd say both, but why didn't you need to split your app in several processes in the first place ?
15:34 < lperrin> you need to use all cores ?
15:37 < owen1> can someone explain is a simple words generators (shallow continuations) vs fibers (deep continuations)?
15:45 < cocacola> Is there an easy way to replace ev_ref without dealing with watchers and stuff?
15:45 < necolas> the npm registry search doesnt seem to be working
15:48 < cocacola> like what would be the libuv equivalent of ev_ref(EV_DEFAULT_UC)
15:49 < _rockbot_> hey all! where can I get more information about the nodeconf summer camp?
15:52 < Hounddog> hi there... has anyone here used fleet for deployment yet and got any review for me?
15:57 < owen1> i create tgkg with this script http://pastebin.com/QBVDSqXC and was able to run node. when i type npm i get '/home/t/bin/npm: Permission denied'  any ideas
15:57 < owen1> ?
16:00 < sx> Hi guys, is there a resource which will help me identify which javascript functions are asynchronous and which are not?
16:00 < sx> I am trying to debug a callback / race-condition issue.
16:00 < sx> is JSON.parse() sync?
16:01 < christophsturm> sx: JSON.parse does not do any io, so its "sync"
16:01 < sx> IO meaning involving a database?
16:02 < AviMarcus> sx, io means network, to ram, to disk, to DB.. yeah
16:02 < AviMarcus> sx, also, if there's no callback it can't be async
16:03 < AviMarcus> I think. although I'm sure there's some exceptions to that.
16:03 < AviMarcus> ops plz
16:03 < AviMarcus> ops pls
16:03 < sx> OK. But sometimes even forloops perform their functions async
16:03 < sx> it seems
16:04 < AviMarcus> hmm? if the function inside has a callback
16:04 < cocacola> like what would be the libuv equivalent of ev_ref(EV_DEFAULT_UC)
16:04 < sx> ok, I will study this more.
16:04 < sx> thanks
16:04 < dshap> does anyone here use winston for logging?  i'm trying to figure out if there's a way to have it spit out extra information (e.g. request URL) along with its uncaught exception logs...
16:06 <@wookiehangover> maxogden: I fixed some of the cat-gif issues last night...
16:07 < AviMarcus> so.. anyone know why mocha on --watch mode isn't handling redis connect properly?
16:07 < owen1> dshap: never used it. i just run my node app with 'node server.js > out.log 2> err.log'
16:08 < dshap> owen1: gotcha
16:09 < owen1> dshap: console.log will be sent to out and console.err to err
16:10 < dshap> owen1: i like winston's features though - multiple logging levels and different transports (e.g. e-mail vs. log file for different types of log messages)
16:11 < dshap> owen1: unfortunately, just seems like there's no way to accomplish what i'd like (i.e. having it give me extra info in uncaught exception logs)
16:15 < owen1> dshap: what kind of extra info?
16:15 < dshap> owen1: i really just want the request URL that was sent to the flatiron server that is running my app
16:15 < dshap> owen1: i'm getting e-mails with exceptions that i can't reproduce, so i want to see the input
16:16 < sx> ok. so I've found where my issue could be. I have a JSON object called "obj". If I assign: x = obj[key]; console.log(x);  i get 'undefined'. the compiler seems to be trying to print to console before x is completely initiated.
16:17 < sx> shouldn't all of those functions be synchronous?
16:18 < Domenic_> sx: it sounds like there's nothing inside `obj[key]`. Have you tried console.log'ing obj?
16:18 < sx> yes, the value is there
16:20 < TimTim`> >> var obj = {key: "val"}, x = obj[key]; x
16:20 < purr> TimTim`: ReferenceError: key is not defined
16:20 < TimTim`> >> var obj = {key: "val"}, x = obj['key']; x
16:20 < purr> TimTim`: (string) 'val'
16:20 < TimTim`> you've defined key, right sx?
16:21 < sx> this is within a function like this:   function addVal (obj, key) { var x = obj[key]; addVal (obj, ++key ); }
16:21 < TimTim`> >> var obj = {some: "val"}, key = "some", x = obj[key]; x
16:21 < purr> TimTim`: (string) 'val'
16:22 < sx> >> var obj = {1:'a', 2:'b', 3:'c'}; function addVal(obj,key) { var x = obj[key]; console.log(x); addVal(obj, ++key); } addVal(obj,1);
16:22 < purr> sx: RangeError: Maximum call stack size exceeded; Console: 'a', 'b', 'c', undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined,…
16:22 < TimTim`> yeah i was gonna say you've got an infinite loop goin on there
16:23 < TimTim`> where does x come into play
16:23 < TimTim`> and what are you trying to do
16:23 < sx> var obj = {1:'a', 2:'b', 3:'c'}; function addVal(obj,key) { var x = obj[key]; console.log(x); if (key < 3) addVal(obj, ++key); } addVal(obj,1);
16:23 < sx> [09:22am] purr: sx: Rang
16:23 < sx> >> var obj = {1:'a', 2:'b', 3:'c'}; function addVal(obj,key) { var x = obj[key]; console.log(x); if (key < 3) addVal(obj, ++key); } addVal(obj,1);
16:23 < purr> sx: undefined; Console: 'a', 'b', 'c'
16:24 < TimTim`> so what's the problem?
16:24 < sx> ok, where did that 'undefined' come from?
16:24 < TimTim`> it's from addVal(obj, 1); returning nothing
16:24 < TimTim`> just the way the irc js executer does things
16:24 < sx> oh i see
16:25 < sx> and does it matter if 'a', 'b', 'c' are very large nested objects?
16:25 < sx> not just simple chars
16:25 < TimTim`> it shouldn't
16:26 < sx> ill post a fiddle
16:27 < TimTim`> >> var hm = "t\ne\ns\nt"; hm
16:27 < purr> TimTim`: (string) 't\ne\ns\nt'
16:28 < cocacola> like what would be the libuv equivalent of ev_ref(EV_DEFAULT_UC)
16:28 < TimTim`> >> var hm = "t\r\ne\ns\nt"; hm
16:28 < purr> TimTim`: (string) 't\r\ne\ns\nt'
16:29 < TimTim`> var n = String.fromCharCode(72,69,76,76,79); n
16:29 < TimTim`> >> var n = String.fromCharCode(72,69,76,76,79); n
16:29 < purr> TimTim`: (string) 'HELLO'
16:30 < TimTim`> >> var n = String.fromCharCode(72,13,69,13,76,13,76,13,79); n
16:30 < purr> TimTim`: (string) 'H\rE\rL\rL\rO'
16:31 < TimTim`> >> var n = String.fromCharCode(72,13,69,13,76,13,76,13,79); n.replace(/\\\\/g, '\\')
16:31 < purr> TimTim`: (string) 'H\rE\rL\rL\rO'
16:32 < TimTim`> lol anyway just checking ^_^
16:40 < CIA-93> libuv: Bert Belder merge * r0c7d9ab / (include/uv-private/uv-unix.h src/unix/ev/ev.c): Merge branch 'v0.6' - http://git.io/X2ohwA
16:45 < cocacola> anyone here know libuv?
16:46 < sx> ok TimTim: here is the jsfiddle http://jsfiddle.net/RCACE/
16:46 < sx> reduced the script, and still running into same issue
16:47 < sx> TypeError: Cannot read property '1' of undefined
16:52 < ^_^> "
16:53 < sx> TimTim: see any issue there?
16:54 < AndreasMadsen> cocacola: try the #libuv channel
16:56 < cryptopsy> why is npm displaying these chars; âââ 
16:56 < cryptopsy> for example âââ commander@0.6.1
16:56 < cryptopsy> on my screen it appears are circumflex 'a'
17:04 < sx> can anyone figure out why the "tracks" is undefined here? Seems like some async/callback issue http://jsfiddle.net/RCACE/
17:14 < strk> isn't 44MB a lot of RAM for a new-born http server ? http://codepad.org/IajN03Fi 
17:14 < strk> or, how do I interpret Memory allocator,   used: 44023808, available: 1491091456
17:15 < timeturne> 44MB is a maday situation
17:15 < timeturne> mayday*
17:15 < strk> how can I find where all that memory goes ?
17:15 < retrobaby> private investigators.
17:20 < AviMarcus> uh weird. mocha ran fine a test that connected to redis and did some queries. But on --watch it could never reconnect, even with or without explicit disconnect at the end. Now when running the tests in the directory, since it's going second, it's also failing, even though the first test has nothing related to it.
17:20 < Domenic_> isaacs: any idea why https://new.npmjs.org/package/dict has no readme?
17:20 < AviMarcus> oh. wait. It's connecting to redis. So maybe just the require is happening before the on('connect') is processed
17:23 <@isaacs> Domenic_: maybe it was published with an older version of npm, or without a readme file?
17:23 <@isaacs> New npmtop: https://new.npmjs.org/browse/author
17:23 <@isaacs> check it
17:24 <@isaacs> also, browsing by most-depended-upon: https://new.npmjs.org/browse/depended
17:25 < Domenic_> isaacs: when I do npm install dict, it pulls down the README.md
17:25 <@isaacs> hm, that IS weird.
17:25 <@isaacs> npm view finds it, too
17:26 < Domenic_> isaacs: are then plans for most dev-depended upon? As a contributor to quite a few testing libraries I'd be curious :)
17:26 < Domenic_> *there
17:26 <@isaacs> Domenic_: _npmVersion: "1.1.16",
17:26 <@isaacs> Domenic_: update npm and re-publish
17:27 < Domenic_> npmbro help republish
17:27 < Domenic_> ...
17:27 < Domenic_> '_'
17:27 <@isaacs> still though, there's one on the root doc, so it should be finding it...
17:29 <@isaacs> Domenic_: oh, i think i found the issue
17:29 < Domenic_> isaacs: oh?
17:31 <@isaacs> Domenic_: fixed: https://new.npmjs.org/package/dict
17:32 <@isaacs> Domenic_: may need to clear browser cache, it's pretty agressive with etagging
17:32 <@isaacs> or just hard-refresh a few times
17:33 <@isaacs> ok, we have browsable pages, now just need to update the / route, point the search box at google, and we can make this thing live.
17:36 < Domenic_> isaacs: w00t, thanks!
17:38 < Domenic_> Man I really need to start contributing to npm-www
17:39 <@SubStack> same
17:40 < CIA-93> libuv: Bert Belder v0.8 * r9d71d1c / src/win/process-stdio.c : windows/uv_spawn: ignore errors when duplicating fd 0-2 fails - http://git.io/hrbprg
17:43 <@SubStack> isaacs: is the account/login part of the site functional?
17:43 <@SubStack> tried it with my npm creds but I just get a 401 result
17:53 <@isaacs> SubStack: well, that's bizarre.
17:53 <@isaacs> yes, it should be functional
17:53 < drudge> works for me (tm)
17:54 <@isaacs> SubStack: try now
17:54 <@isaacs> logout, login
17:54 < drudge> it is case sensitive
17:57 < Domenic_> SubStack: would you appreciate help closing out browserify issues and pull requests?
17:57 < tellnes> isaacs: How about putting the packing list into the profile page? 
18:02 < jocafa> anyone using cdnjs?
18:06 < darrenlooby> Hey... in PHP, I can do array[] and it'll add a new element. How do I do the same in javascript for Node?
18:06 < jcrew> darrenlooby: .push()
18:07 < darrenlooby> array.push(value)?
18:07 < samshough> var arr = [];
18:07 < samshough> arr.push(value);
18:13 <@gkatsev> you can also do arr[arr.length] = value;
18:13 <+Niloc> but why would you want to
18:14 <@tuhoojabotti> I'm doing production software with Node.js!
18:14 <@tuhoojabotti> It's supposed to work by thursday
18:14 <@tuhoojabotti> Yay
18:14 < samshough> i wish i was >:|
18:14 < drudge> welcome to the club
18:15 <@tuhoojabotti> No wait, this isn't even the first time.
18:29 <@tuhoojabotti> Does anyone here know how to shutdown socket.io?
18:29 < DTrejo> process.exit(0)
18:29 <@tuhoojabotti> :E
18:29 < gicode> DTrejo: ha
18:29 <@tuhoojabotti> DTrejo: Close and start without restarting the process.
18:29 < gicode> tuhoojabotti: Sure, which transports are you using?
18:29 <@tuhoojabotti> default
18:30 < gicode> tuhoojabotti: Well, I have code that works with websocket and flashsocket transports
18:30 < gicode> not sure about the others
18:31 < gicode> tuhoojabotti: Are you using express?
18:31 <@tuhoojabotti> Yes, but not for socket.io
18:31 <@tuhoojabotti> I make a new http server for it
18:31 <@tuhoojabotti> Because I need it on another port.
18:32 < gicode> tuhoojabotti: OK, well close() that server, io.flashPolicyServer.close(); and io.sockets.clients().forEach(function(socket) { socket.disconnect(); }); where "io" is the result of the socket.io listen call.
18:32 <@tuhoojabotti> I tried that
18:32 <@tuhoojabotti> this.httpIO.close();
18:33 <@tuhoojabotti> that's the return from the listen
18:33 <@tuhoojabotti> of course I might need to disconnect all the clients first. :P
18:33 < gicode> tuhoojabotti: You closed the flashPolicyServer?
18:33 <@tuhoojabotti> I don't use flash
18:33 <@tuhoojabotti> I think.
18:33 <@tuhoojabotti> It's not in the default config?
18:33 < gicode> It starts it if you have it enabled.  I don't know if it is in the default.
18:34 <@tuhoojabotti> Probably not.
18:34 < gicode> tuhoojabotti: Also, disconnect the clients after you stop listening.
18:34 <@tuhoojabotti> After?
18:34 < gicode> tuhoojabotti: Or a new one can join before you stop listening
18:34 < gicode> You don't want to race
18:34 < gicode> CLosing the server socket doesn't disconnect clients
18:35 <@tuhoojabotti> gicode: Okay.
18:35 -!- mode/#node.js [+o gicode] by tuhoojabotti
18:35 <@gicode> Ah, "flashsocket transport is disabled by default"
18:36 <@tuhoojabotti> Yeah
18:36 <@tuhoojabotti> flash sucks.
18:41 <@gicode> tuhoojabotti: Do you the Redis store?
18:41 <@gicode> s/you/you use/
18:41 <@tuhoojabotti> gicode: I don't know.
18:41 <@tuhoojabotti> I guess not.
18:41 <@maxogden> wookiehangover: trunk derp repo is buggy for me if i pass pushState: false to backbone + the router
18:41 <@tuhoojabotti> gicode: I just setup default socket.io
18:42 <@gicode> tuhoojabotti: gotchat
18:42 -!- CoverSlide was kicked from #Node.js by CoverSlide [CoverSlide]
18:42 <@tuhoojabotti> yes, you've got chat.
18:42 <@gicode> Anyone know if Redis Store is necessary for multi-process if only websocket and flashsocket are enabled?
18:43 <@tuhoojabotti> gicode: this.httpIO.close();this.sockets.forEach(function (socket) {socket.disconnect();}); so like this?
18:44 <@gicode> If "this" is the result of the socket.io listen call, I would expect the first bit to be this.server.close()
18:44 < CoverSlide> ops plz
18:44 < CoverSlide> :(
18:44 < CoverSlide> ah well
18:44 <@tuhoojabotti> gicode: No.
18:44 <@tuhoojabotti> gicode: this.httpIO is the result of the listen call.
18:45 <@tuhoojabotti> gicode: Wait, which listen do you mean?!
18:45 <@tuhoojabotti> http or socket.io
18:45 <@tuhoojabotti> socket.io probably
18:46 <@gicode> tuhoojabotti: Just pick one, there are lots of ways to do this lol
18:46 <@tuhoojabotti> :D
18:46 <@tuhoojabotti> I shall close ALL THE THINGS
18:46 <@tuhoojabotti> so I need to also do this.io.server.close()
18:47 <@gicode> this.io.server is the same as your http server if you passed one in
18:47 <@gicode> if you passed in a port then that is the only copy of the server you have
18:48 <@gicode> this.io.sockets.clients() is an array of connected sockets you want to disconnect
18:48 < jkevinburton> this might be a stupid question, I am looking for the best way to acheive this, in many places in my app, (various files), I want to be able to broadcast socket messages, but if io is setup in the main app.js file, how can I access it?
18:49 < slickplaid> pass it to the other modules in an init function
18:49 <@gicode> jkevinburton: Create a callback in your main file and pass it to all the other places
18:49 <@tuhoojabotti> gicode: Cool!
18:49 < slickplaid> ops plz
18:49 -!- mode/#node.js [+o slickplaid] by tuhoojabotti
18:49 <@slickplaid> ty :D
18:50 <@tuhoojabotti> np!
18:50 <@tuhoojabotti> gicode: So it's enough to do self.io.server.close() and disconnect all clients?
18:50 <@gicode> tuhoojabotti: If that is all you have running, yeah
18:50 <@tuhoojabotti> also express
18:50 <@tuhoojabotti> but that I can close.
18:51 <@tuhoojabotti> gicode: this.io.clients() doesn't work
18:52 <@gicode> 14:48 <@gicode> this.io.sockets.clients() is an array of connected sockets
18:52 <@tuhoojabotti> ah
18:52 <@tuhoojabotti> I'm somewhat tired, sorry.
18:52 <@gicode> this.io.sockets is the default "namespace"
18:52 <@tuhoojabotti> Yes
18:53 <@tuhoojabotti> ?rehash
18:53 <@tuhoojabotti> argh
18:53 <@tuhoojabotti> Wrong channel. :P
18:54 <@tuhoojabotti> gicode: It seems to work!
18:54 <@tuhoojabotti> I'm way too tired
18:54 <@tuhoojabotti> And it's just 2154
18:56 <@tuhoojabotti> gicode: I love you<3
18:56 -!- rtgibbons[away] was kicked from #Node.js by tuhoojabotti [Use /away]
18:58 < smathy> sx: track[i] should be tracks[i]
18:58 < smathy> sx: track[i] should be tracks[i]
18:58 < smathy> Haa - sorry.
18:58 < smathy> Scrolling PEBKAC :(
18:59 < jcrew>  
18:59 <@gicode> tuhoojabotti: You didn't even need the fancy flash socket code I had to sleuth down last night. ;-)
18:59 <@tuhoojabotti> Hehe, that's because flash sucks.
19:00 < jcrew> flash is awesomely better than js
19:01 < jocafa> not even trying
19:01 < jcrew> you can make it so it's impossible to find text in the flash object, you can redesign gui components that have been around for years
19:03 < jcrew> all of the things people with websites want to do
19:04 < CoverSlide> java applets >>>> flash
19:04 <@gicode> bnoordhuis: What causes the "child_process.fork() limitation"?
19:05 < jcrew> applets are awesome, that's how i always run all of my javascript
19:06 < CoverSlide> what limitation is that?
19:06 <@gicode> CoverSlide: https://github.com/joyent/node/commit/2eb6a62f4fafd6ed7aa4fa22b509686e5e910050
19:07 < CoverSlide> oh that one
19:07 <@gicode> CoverSlide: Are you familiar with the cause?
19:08 < CoverSlide> i've never had a reason to not have a way for a master kill its child process under certain circumstances
19:08 < CIA-93> libuv: Bert Belder v0.8 * r69c2ef8 / src/win/fs.c : windows: initialize uv_fs_t.path to NULL - http://git.io/VYu6qg
19:09 < CoverSlide> basically the message listener remains open which keeps the even loop open.
19:09 < CoverSlide> usually i have something that kills from the calling process
19:09 < CoverSlide> either a special message or simply cp.kill
19:11 < Bux> ops plz
19:11 < Bux> hmm :/
19:11 -!- mode/#node.js [+o Bux] by tuhoojabotti
19:11 <@Bux> thank you
19:11 <@tuhoojabotti> I think it's
19:11 <@tuhoojabotti> opme
19:11 <@tuhoojabotti> or not anymore
19:11 <@Bux> ik
19:11 <@Bux> opme
19:11 <@Bux> its deopped
19:11 <@Bux> hold on
19:11 <@gicode> CoverSlide: Gotcha, thanks.  So basically there isn't any way to close the message channel.
19:12 < samholmes> using util.inherits: How can I simply use this utility to extend the properties of a module.exports function?
19:12 -!- mode/#node.js [+o IRCbot_Master] by Bux
19:12 -!- mode/#node.js [+o IRCbot_Slave] by IRCbot_Master
19:13 <@gicode> samholmes: Huh? You don't normally need util.inherits when specifying exports.
19:13 <@gkatsev> does the IRCbot_Master need an IRCbot_Slave to be considered a master?
19:13 < samholmes> Simply, I want a way to set module.exports to an function, and set properties on that function as well (using an object literal). This way I can access my module's properties/methods in the literal like require('mymod').propertyOrMethod, but at the same time I can call the function for mhy module require('mymod')(args)
19:14 -!- mode/#node.js [+o AviMarcus] by IRCbot_Master, IRCbot_Master
19:14 < samholmes> -mhy +my
19:14 <@gkatsev> can't you just do module.exports = function(){} ?
19:14 -!- mode/#node.js [+o ryan_opper] by AviMarcus
19:14 < samholmes> gkatsev: Yes! But I also want to extend that function object's with properties from an object literal
19:15 < samholmes> -object's + object
19:15 -!- mode/#node.js [-o ryan_opper] by IRCbot_Master
19:15 <@gicode> samholmes: You could use MyFunction.__proto__ = {};
19:15 <@AviMarcus> Bux, ?
19:15 <@Bux> yeah?
19:15 <@gkatsev> samholmes: function foo(){}; module.exports = foo; foo.bar = "bar";
19:15 < samholmes> gicode: But, isn't messing with the __proto__ property a bad idea?
19:15 <@AviMarcus> did you just deop ryan_opper ?
19:16 <@Bux> hmm?
19:16 <@Bux> hi whiskers
19:16 <@AviMarcus> you're the one that opped the IRCbot_Master 
19:16 < whiskers75> hi
19:16 <@Bux> yeah, the opme thing
19:16 <@Bux> opme
19:16 -!- mode/#node.js [+o Bux] by IRCbot_Master
19:16 < samholmes> gkatsev: Doing it that way would mean I couldn't use an object literal.
19:16 < whiskers75> opme
19:16 -!- mode/#node.js [+o whiskers75] by IRCbot_Master
19:16 <@gicode> samholmes: You are trying to do something odd, so odd solutions for odd problems ;-)
19:16 <@AviMarcus> so why did you deop ryan_opper ?
19:16 <@gkatsev> samholmes: you can copy the stuff over, though.
19:16 <@whiskers75> AviMarcus, me or Bux?
19:16 <@Bux> brb, gotta push something to gihub
19:16 <@gkatsev> for(p in obj) { foo[p] = obj[p] }
19:17 < samholmes> gicode: Hmm. I guess if only Node.js's util module had an extend method, I could just do util.extend(myFunction, myObjectLiteral);
19:17 < samholmes> Why doesn't Node.js have extend in the util module?
19:17 <@gkatsev> it doesn't have one?
19:18 <@gkatsev> nope
19:18 <@gicode> samholmes: Everyone wants some different version of extend, just write the loop if that is what you want.
19:18 <@gkatsev> samholmes: it's a 1/2 liner
19:18 <@tuhoojabotti> Does somebody know how to format strings in Jade?
19:18 <@tuhoojabotti> Like in each
19:18 <@tuhoojabotti>             each f in feedback
19:18 <@tuhoojabotti>               li= f.timestamp + " <" + f.from + "> " + f.matches[1]
19:18 <@tuhoojabotti> that's kind of stupid
19:18 < samholmes> gkatsev: I'm going to repeating this pattern, so I'll need to make the loop into a node_module or something.
19:19 < whiskers75> ops plz
19:19 -!- mode/#node.js [+o whiskers75] by tuhoojabotti
19:19 <@gkatsev> samholmes: https://gist.github.com/3162008 simple naive implementation. more complex safer implementation https://gist.github.com/3162033
19:19 < tjholowaychuk> tuhoojabotti #{}
19:19 <@tuhoojabotti> Well that
19:19 <@tuhoojabotti> tjholowaychuk: Can I declare the "namespace" like use the f and then just do #{timestamp}
19:19 <@whiskers75> Bux: hey, dont deop ryan_opper!
19:19 <@whiskers75> ;)
19:20 < tjholowaychuk> tuhoojabotti nope it's just regular javascript there
19:20 <@tuhoojabotti> Okay.
19:20 -!- mode/#node.js [+o tjholowaychuk] by tuhoojabotti
19:20 <@Bux> wut?
19:20 <@Bux> oh right, gotta rule out the competition :P
19:20 <@Bux> opme
19:20 -!- mode/#node.js [+o Bux] by IRCbot_Master
19:20 <@Bux> ^ faster :P
19:20 <@tuhoojabotti> slow.
19:20 <@whiskers75>  /facepalm
19:20 <@Bux> haha :P
19:21 -!- mode/#node.js [+o ryan_opper] by whiskers75
19:21 <@whiskers75> ops plz
19:21 -!- mode/#node.js [+o whiskers75] by ryan_opper
19:21 <@whiskers75> opme
19:22 -!- mode/#node.js [+o whiskers75] by IRCbot_Master
19:22 <@Bux> nuu
19:22 <@Bux> git ryan away!
19:22 <@whiskers75> Bux: your bot is slower 
19:22 <@tuhoojabotti> Bux: Is it even streaming op?!
19:22 <@Bux> whatdya mean tuhoo?
19:22 < AvianFlu> ops plz
19:22 -!- mode/#node.js [+o AvianFlu] by ryan_opper
19:22 <@AvianFlu> lolz
19:23 -!- mode/#node.js [-o ryan_opper] by IRCbot_Master
19:23 <@Bux> :D
19:23 < whiskers75> I dont like Mango IRC
19:23 < whiskers75> ops plz
19:23 <@Bux> opmeh :P
19:23 < whiskers75> Bux..........
19:23 < whiskers75> opme
19:23 -!- mode/#node.js [+o whiskers75] by IRCbot_Master
19:23 <@Bux> yeah?
19:24 <@dragon> o.O
19:24 <@whiskers75> DO NOT DEOP THAT BOT ;)
19:24 <@Bux> Nuuu!
19:24 <@Bux> my bot's betta :P
19:24 <@whiskers75> its slower
19:24 <@Bux> and I'm adding moar stuffs
19:24 -!- mode/#node.js [-o Bux] by dragon
19:24 <@whiskers75> ok - fine. 
19:24 -!- mode/#node.js [+o Bux] by dragon
19:25 <@slickplaid> TMNT
19:25 <@dragon> lol.
19:25 -!- mode/#node.js [+o Bux] by IRCbot_Master
19:25 < Hoppertje> anyone using express in here?
19:25 < samholmes> Is there a common, well-tested, utility library that's used a lot with node.js that has extend and merge functions?
19:25 <@dragon> What's happened here?
19:25 <@Bux> _-_
19:25 <@tjholowaychuk> Hoppertje #express
19:25 <@Bux> I can even deop people through the bot
19:25 -!- mode/#node.js [-o dragon] by IRCbot_Master
19:25 <@whiskers75> Bux: well I suppose i prefer your bot as we work on it together
19:26 -!- mode/#node.js [+o dragon] by IRCbot_Master
19:26 < Hoppertje> @tjholowaychuk: they are silent
19:26 <@Bux> yeah
19:26 <@whiskers75> hey let me try
19:26 <@Bux> whiskers, if you want to add stuff, send pull requests
19:26 <@tjholowaychuk> Hoppertje: ah i see your question now one sec
19:26 <@AviMarcus> Bux, so, why are you deopping ryan_opper? 
19:26 <@whiskers75> Bux: ok
19:26 <@Bux> because theres a replacement
19:26 <@Bux> opme
19:26 -!- mode/#node.js [+o Bux] by IRCbot_Master
19:26 <@Bux> ^^
19:26 <@whiskers75> can't I be a collaborator?
19:27 <@whiskers75> ;)
19:27 <@AviMarcus> which wasn't online a few hours ago.
19:27 <@Bux> if I can see your additions, I'll add you :P
19:27 <@Bux> its online 24/7 avi
19:27 <@Bux> it was deopped by someone tho :/
19:27 <@whiskers75> AviMarcus: i take over when it goes
19:28 <@AviMarcus> I tabbed for "irc" and it wasn't in the channel, a few hours ago
19:28 -!- mode/#node.js [-oo IRCbot_Master IRCbot_Slave] by whiskers75
19:28 < IRCbot_Master> whiskers75, you have been given a warning for deopping IRC bots!
19:28 < IRCbot_Slave> whiskers75, you have been given a warning for deopping IRC bots!
19:28 <@Bux> if anyone knows any good free node hosts, I'll put it on there
19:28 -!- mode/#node.js [+o IRCbot_Master] by Bux
19:28 < CIA-93> node: Bert Belder v0.8 * r80ab9a8 / (7 files in 5 dirs): uv: upgrade to 69c2ef8 - http://git.io/QG6qAw
19:28 -!- mode/#node.js [+o IRCbot_Slave] by IRCbot_Master
19:28 <@AviMarcus> I had it on nodejitsu but it died
19:28 <@AviMarcus> dunno why
19:28 < samholmes> search.npm.com not working for me..?
19:28 <@whiskers75> yeah I need a good NON PROXIED node host
19:29 <@whiskers75> like Bux
19:29 <+Niloc> samholmes: only you can answer that.
19:29 <@whiskers75> to use for a telnet server
19:29 <@AviMarcus> get yer own server
19:29 <@AviMarcus> or well, a vm.
19:29 < samholmes> It isn't. Is it working for anyone else?
19:29 <@whiskers75> i'm a freebie guy ;)
19:30 <+Niloc> what's with this server crap? Just run it from your pc :)
19:30 <@whiskers75> i cant leave that on all the time
19:30 <@AviMarcus> good servers don't lose their 'net connection. (often)
19:30 <@whiskers75> I likez 24/7
19:30 <+Niloc> >.>
19:30 < samholmes> whiskers75: Purchase VPS hosting?
19:31 <@AviMarcus> hmm uptime is only 80 days on my server. I don't remember why that got restarted.
19:31 -!- mode/#node.js [+o IRCbot_Slave] by IRCbot_Master
19:32 <@whiskers75> i said im a freebie guy
19:32 <+Niloc> you mean cheapass?
19:33 < wingy> what do you think about backends-as-a-service such as Parse?
19:33 <@whiskers75> no free
19:33 <@whiskers75> i like PaaS and BaaSes
19:33 <@whiskers75> but they all have an 'http servers only' thingy
19:35 <@whiskers75> no telnet :(
19:35 < bradgignac> just grab a rackspace cloud server - 10 bucks a month
19:36 <@whiskers75> wingy: Parse...?
19:36 < bradgignac> or aws free tier
19:36 <@whiskers75> aws free tier?
19:37 <@whiskers75> tell me more
19:37 < bradgignac> amazon web services free tier
19:37 < bradgignac> i think its limited to a year though
19:37 <@whiskers75> oh. that's the catch :(
19:37 <@whiskers75> well a year will di
19:37 <@whiskers75> do*
19:38 < bradgignac> http://aws.amazon.com/free/
19:38 <@whiskers75> oh btw bux: was it you who changed the topic to 'The Official Node.js IRC Bot Testing Channel'?
19:38 <@Bux> no
19:39 < CIA-93> node: Bert Belder v0.8 * r9e2319f / doc/api/child_process.markdown : docs: remove unused require from example - http://git.io/xwE0Tg
19:40 <@Bux> brb, I gotta work on something for my minecraft server
19:40 < stoke> :qq!
19:42 < whiskers75> ops plz
19:42 < whiskers75> opme ,then
19:42 < whiskers75> opme
19:42 -!- mode/#node.js [+o whiskers75] by IRCbot_Master
19:43 -!- whiskers75 changed the topic of #Node.js to: The Node Javascript Support Channel
19:44 -!- maxogden changed the topic of #Node.js to: ask about node or mootools only please
19:45 <@whiskers75> mootools?
19:45 <@maxogden> my humor appears to be lost on you
19:45 -!- whiskers75 changed the topic of #Node.js to: Node.js Support - ask about Node.js or mootools only please
19:46 <@gkatsev> moo
19:46 < Cabo_> Hello a todo el mundo!!!
19:47 <@whiskers75> Goodbye, all!
19:47 < Cabo_> I have a doubt of how implement something in my project
19:48 < Cabo_> Ok... i am gonna explain to you.. i guess anyone will would listen to me
19:49 < Cabo_> I am doing a project that have extension/modules/plugins written/defining it with javascript using node.js modules.
19:50 < Cabo_> My "project" / server has its modules but can be extended with other modules that use an specified api
19:51 < Cabo_> How could i disable the access to the main class of my project from this extensions? Extension written by thrird party devs
19:52 < Cabo_> If any of that extension have bad code and use a main clases (ClientManager, for example). Could delete all clients in server!! or whatever.
19:52 < Cabo_> Well... i hope anyone read me xD
19:52 < Cabo_> but i Think no
19:52 < Cabo_> poor me
19:53 < Cabo_> I will be waiting for an answer..
19:58 -!- mode/#node.js [+o piscisaureus__] by ChanServ
19:59 <@Bux> opme
19:59 -!- mode/#node.js [+o Bux] by IRCbot_Master
20:00 < addisonj> does that work for everyone?
20:00 < addisonj> opme
20:00 -!- mode/#node.js [+o addisonj] by IRCbot_Master
20:00 <@addisonj> lol
20:00 <@Bux> yeah
20:01 < Hoppertje> opme
20:01 -!- mode/#node.js [+o Hoppertje] by IRCbot_Master
20:01 -!- mode/#node.js [-o sveisvei] by Hoppertje
20:01 -!- mode/#node.js [+o sveisvei] by Hoppertje
20:01 <@Hoppertje> pfft
20:01 -!- mode/#node.js [-o Hoppertje] by Hoppertje
20:18 < jcrew> opme
20:18 -!- mode/#node.js [+o jcrew] by IRCbot_Master
20:23 -!- mode/#node.js [+o Bux] by IRCbot_Master, IRCbot_Master
20:24 < whiskers75> Bux: afk?
20:24 < whiskers75> opme
20:25 -!- mode/#node.js [+o whiskers75] by IRCbot_Master
20:25 <@whiskers75> 889 users chatting in #Node.js channel, 262 operators online
20:25 <@whiskers75> ha ha
20:25 <@whiskers75> 262 ops
20:25 <@whiskers75> ops plz
20:26 <@isaacs> Ok, i'm about ready to point search.npmjs.org to new.npmjs.org
20:26 <@tuhoojabotti> Vennril: Please, configure your client to not change your nickname when you're away.
20:27 <@tuhoojabotti> isaacs: :O
20:27 < Vennril> sorry :)
20:27 < drudge> isaacs: search uses google?
20:27 <@isaacs> yeah
20:28 <@isaacs> lame, but whatever.
20:28 <@isaacs> it actually works, which is an improvement :)
20:28 < drudge> i like how http://registry.npmjs.org:5984/registry/_all_docs comes up when you search :)
20:28 <@tuhoojabotti> isaacs: The form buttons don't have enough contrast
20:29 <@isaacs> tuhoojabotti: patches welcome!
20:29 <@tuhoojabotti> Yes, quite
20:29 <@isaacs> don't tell me in irc, i will ignore you and put fingers in my ears and go "LALALALALALALAA"
20:29 <@isaacs> post an issue, send a patch
20:29 -!- mode/#node.js [+o ryan_opper] by IRCbot_Master
20:29 <@tuhoojabotti> I don't have time for that, I'm idling on irc avoiding programming a node.js app that's supposed to work by thursday
20:30 <@tuhoojabotti> is it npm-www repo?
20:30 <@isaacs> tuhoojabotti: yes.
20:30 <@isaacs> tuhoojabotti: click "website issues" in the footer, or any of the other many links to the repo
20:31 < whiskers75> isaacs: btw, your fix for my node app did not work - i tried another person's fix in REPL and it worked, but not in the script...
20:31 <@isaacs> whiskers75: ok
20:31 <@isaacs> tuhoojabotti: i think the gravatars need to be bigger, too
20:31 <@tuhoojabotti> isaacs: Didn't you know that no one ever reads footers?
20:31 <@isaacs> too many people's avatars are optimized for twitter and the like, which are usually around 64px
20:31 < whiskers75> I sometimes do when bored ;)
20:31 <@tuhoojabotti> Mine isn't, it's 1000px
20:32 <@tuhoojabotti> whiskers75: Lies.
20:32 < whiskers75> ok, ive only done it teuve
20:32 < whiskers75> twice
20:32 < whiskers75> ok, maybe 4 times
20:34 <@tuhoojabotti> https://github.com/isaacs/npm-www/issues/55 yay
20:34 <@tuhoojabotti> Now I'll just have to make a patch
20:34 < whiskers75> Why doesn't Nodester allow anything other than an HTTP server on port 80?
20:34 <@tuhoojabotti> whiskers75: Because it sucks?
20:34 <@isaacs> whiskers75: probably because it's routing http to it via some kind of host-header sniffing proxy
20:34 <@isaacs> whiskers75: pretty common, actually
20:35 < drudge> is there a better recommended way than https://gist.github.com/3220255
20:35 < whiskers75> good point ;) I know, but they could add other port/service support
20:35 < whiskers75> isaacs: yeah, nodejitsu does too
20:37 < whiskers75> well, I suppose anyone could edit the code ;) github.com/nodester
20:41 < baer> hmm, guys any suggestions how i could trace why an assertion fails and node exits? i tried using strace but that doesn't really help
20:42 <@maxogden> doesnt it give you a stacktrace?
20:44 < baer> not one which actually tells me anything
20:45 < baer> but maybe i'm too stupid, also a probability ;)
20:45 < baer> http://pastebin.com/n2jJCurA
20:46 <@maxogden> oh you are writing a native add-on
20:47 < baer> i'm not but the native add-on stuff was the only thing i found when searching on google for that
21:03 < whiskers75> opme
21:03 -!- mode/#node.js [+o whiskers75] by IRCbot_Master
21:04 <@whiskers75> Can somebody help me here? https://gist.github.com/3209159 I am trying to get the string cmd from ('some test data\n') to 'some test data'.
21:06 <@zomg> whiskers75: where exactly? Have you ever heard of "pastebin only the relevant parts"? ;)
21:06 <@wereHamster> is nextTick guaranteed to fire after all network buffers and other timers have been processed?
21:06 <@whiskers75> line 29
21:06 <@whiskers75> around there
21:07 < lohkey> wereHamster: they're going to change that
21:07 <@zomg> whiskers75: you could prob just use a regex like ^\((.*)\)$ or something along those lines
21:08 < lohkey> nextTick will eventually, literally be the next tick as i understand
21:08 <@whiskers75> how would I implement that?
21:08 < lohkey> at the moment nextTick just pushes the event to the end of the event loop queue
21:09 <@wereHamster> lohkey: is there a way to queue something at the end of the event loop?
21:10 < lohkey> wereHamster: at the moment thats nextTick, but that will change, setTimeout with 0 will also do this and will not change behavior
21:10 <@wereHamster> lohkey: maybe I should explain what I really want. I want to measure the latency of my server. To get really accurate measurement, I'd need to connect to myself and send a ping.
21:11 < lohkey> then wrap the request/response, don't listen for the event queue to exhaust
21:11 <@wereHamster> this is possible, but certainly more complicated than I'd like. So my next idea was to queue something at the end of the event queue and see how long it takes to process tat
21:11 < lohkey> wereHamster: it's not complicated
21:12 <@wereHamster> connect to myself?
21:12 < lohkey> no, wrap the request/response
21:12 < lohkey> https://github.com/substack/node-ben
21:12 < lohkey> ^^ use that
21:13 <@wereHamster> lohkey: that won't give me accurate measurement. It will tell me how fast nodejs was able to process the request, not how long the request was in the network buffer (kernel etc)
21:13 < lohkey> wereHamster: yeah it will
21:13 < lohkey> it will tell you how long the request was hanging out in node until the response was sent
21:14 < lohkey> so you can do get the entire request time, from receive to response
21:14 <@wereHamster> does that mean node processes incoming request before any other timers or queued events?
21:14 < lohkey> wereHamster: no
21:15 <@wereHamster> consider this: a request comes in. But nodejs is really busy doing some processing. One second later it has time to process this incoming request. How can I measure this one second that request was in the kernel buffer?
21:16 < lohkey> node-ben basically creates a `done` closure that you wrap the request in when you get it and when the request sends it's response you call the done method that was passed to you and then the time of the entire request will be passed to callback you passed to *.async()
21:16 < lohkey> wereHamster: ah, yeah no dice there
21:16 <@wereHamster> .. other than sending myself a request. :)
21:16 < lohkey> real world though, if you have events sitting around for an entire second you're using node.js terribly wrong
21:16 <@wereHamster> or the server is overloaded
21:16 < lohkey> *sitting in the event loop queue
21:17 < lohkey> wereHamster: well no, you should keep the event loop spinning pretty fast
21:17 < lohkey> in which case
21:17 < lohkey> you'd have to have a massive massive amount of data flowing through node
21:18 < lohkey> and in that situation you'd be better off measuring latency from the client of that service
21:18 <@wereHamster> well, the code is purely in-memory (no fs access etc). Any idea how to track where node spends most time?
21:18 < lohkey> wereHamster: node/v8 has a builtin profiler
21:19 <@wereHamster> is there any api to that (so I could profile from within the appi)?
21:19 < mmalecki> wereHamster: flame graphs?
21:22 <@wereHamster> ah, dtrace. If I only had dtrace...
21:44 < dogmatic69> Hi all
21:44 < Owner> very hi
21:44 < Nano> Hi
21:44 < Owner> woot
21:44 < Owner> streaming ogg to html5
21:44 < dogmatic69> I have been watching all the hype about node for some time and thinking I may need to join the ranks
21:45 < trb> dogmatic69: your nic reminds me of the muskerhounds
21:45 < Owner> reminds me of 69'ing with a dog
21:46 < dogmatic69> lol
21:46 <@tuhoojabotti> :u
21:46 <@tuhoojabotti> hehe
21:46 < Owner> fond memories
21:46 <@tuhoojabotti> My nickname means destroyer bot in Finnish
21:47 < Owner> i just used binary.js to stream an ogg to html5 audio :)
21:47 < Owner> next to make it transcode anything
21:47 < Owner> then relegate it to the dustbin!
21:47 <@mscdex> Owner: aurora.js!
21:48 < dogmatic69> So I am about to build a app with cherokee + php that will receive data from {n} embedded devices in real time, doing a bit of manipulation and storing to mysql.
21:48 < dogmatic69> {n} is currently 1000+ but expected to go up a huge amount sometime soon.
21:49 < DTrejo> isaacs: https://npmjs.org/browse/authors seems broken for me
21:49 < Owner> finally after a few hours
21:49 < Owner> i get to listen to the entire shpongle track
21:49 < Domenic_> Oh dear npmjs.org doesn't seem to be coping well.
21:49 < dogmatic69> Would node.js be good for this type of thing?
21:51 < CIA-93> libuv: Bert Belder reviewme * r038583b / src/win/fs.c : windows: only allow opening directories for reading - http://git.io/6PTbkw
21:51 <@mscdex> dogmatic69: i would definitely say so
21:52 < dogmatic69> mscdex: Not knowing anything at all, from the little I have read node.js will act as the server directly?
21:52 < dogmatic69> no need for cherokee / apache etc
21:53 <@mscdex> dogmatic69: yep
21:53 <@mscdex> dogmatic69: or php ;-)
21:53 < dogmatic69> nice, I guess that is already a huge chunk of bloat removed.
21:53 < dogmatic69> by chance, anyone running node on raspberry pi?
21:54 <@bnoordhuis> dogmatic69: quite a few, if the mailing list is anything to go by
21:54 < dogmatic69> ah ok. thanks.
21:54 < CoverSlide> i was going to get one with the sole intention of running node on it
21:55 < CoverSlide> but i didn't have too much time to fiddle with it
21:55 < dogmatic69> Are there any "benchmarks" that have rough stats on connections / inserts into mysql?
21:56 < jkevinburton> anyone got an example of doing the following?  I want to use models.users.getByID(...); so obviously I need to var models = require('./models') and in my ./models.js file exports.users = require(./models/users');  but here's the kicker, I want to send redis from my app.js along with it. How do wrap modules.exports = function(redis) {}; in ./models/index ? sorry for the long winded question
21:57 < jkevinburton> sorry, that first part should be ./models/index.js file
21:57 < jkevinburton> im getting models is undefined in the app.js
21:57 < CoverSlide> https://github.com/Sannis/node-mysql-bindings-benchmarks/wiki
21:58 < felixge> dogmatic69: I would advise you to do your own benchmarks if you want to make any kind of informed decision
21:58 < dogmatic69> CoverSlide: I just saw that, does not seem to say how long that took.
21:58 < dogmatic69> felixge: defiantly 
22:00 < felixge> dogmatic69: I'm rather surprised that my module is supposed to be 5x slower for inserts :)
22:00 < felixge> if that's really the case I'll fix it
22:00 < felixge> but generally speaking that benchmark should be limited by MySQL throughput, not client implementation
22:01 < dogmatic69> If mysql is the bottle neck, I'm happy :)
22:01 < felixge> dogmatic69: well, unless you're running SSDs or writing data into thin air (MongoDB style), then 10k writes/sec is probably where you'll hit a wall with most data stores
22:02 < felixge> and that should easily be achievable with even a naive client implementation
22:02 < felixge> (+ in this hypothetical scenario of maxing out MySQL write performance, you're probably pumping in data from multiple clients anyway)
22:03 < dogmatic69> when you say clients, you talking about various connections?
22:03 < dogmatic69> eg: 10k writes through a single connection
22:03 <@isaacs> DTrejo: yep, should be singular, thanks
22:04 < felixge> dogmatic69: yes, I'm talking connections
22:05 < felixge> dogmatic69: yeah, I think doing 10k writes through a single connection is not a real scenario
22:05 < dogmatic69> yep
22:05 < felixge> by that I mean you'd utilize MySQL features that would allow you to do multiple inserts at once if you want to push a lot of data from a single client
22:05 < felixge> in which case the client/driver implementation matters even less
22:06 < felixge> but again: Define your use case, write the benchmark for it. If you can show my module being slow at something it should be fast at, I'll fix it
22:06 < felixge> :)
22:07 < dogmatic69> I doubt I am in a position to question your code at this point, not even cloned the repo yet :D
22:07 < jergason> felixge: what do you mean about Mongo writing data in to thin air?
22:07 < felixge> jergason: exactly that.
22:07 < felixge> :)
22:07 < jergason> you mean the old data loss issues?
22:07 < felixge> jergason: I mean that it will acknowledge writes before data has been flushed to disk
22:07 < jergason> ah
22:08 < felixge> jergason: no, AFAIK mongo still doesn't write to disk before confirming a write by default
22:08 < dogmatic69> jergason: mongo stores data in /dev/null :P
22:08 < jergason> dogmatic69: was about to make that joke too
22:08 < jergason> and we use mongo :]
22:09 < felixge> jergason: that being said, they make a reasonable case for this to not be all that important if you replicate writes to multiple nodes anyway. But it's still a cheap way to make benchmarks look favorable ;)
22:10 <@nlf> that's why we just use redis, at least we know our data isn't safe :D
22:10 < felixge> I <3 redis
22:10 < felixge> it's very honest about it's inner workings
22:11  * dogmatic69 clones node.js 
22:11 <@nlf> the scripting stuff in 2.6 is a lot of fun
22:12 < Bux> opme
22:12 -!- mode/#node.js [+o Bux] by IRCbot_Master
22:12 <@Bux> ohai
22:14 < robinson_k> jkevinburton: if i understand you right you want smth like this (taken from a express route and app.js)
22:14 < robinson_k> http://pastebin.com/nYs1J2eC
22:14 < DTrejo> op plz
22:14 -!- mode/#node.js [+o DTrejo] by ryan_opper
22:14 <@AviMarcus> oh felixge the reconnect on node-mysql isn't working for me, in the beta. there's no errors. I console.log'd the db.conf, and even did a select 1 query and it's all fine. Could it be a problem because that whole connection is require()'d by another module?
22:16 <@AviMarcus> talking about networking... anyone have suggestions on master-master-master replication? I don't need good conflict resolution for this. I'll have 3+ POPs, so master-master won't work... couchdb seems a bit slow for the high-quantity small entries I have on this.
22:18 <@isaacs> DTrejo: fixed
22:18 <@DTrejo> :)
22:19 <@isaacs> omg, there are so many bots trying to crawl all the old urls that used to work from search.npmjs.org
22:19 <@isaacs> mountain of 404s
22:19 <@maxogden> redirect to dartlang.org
22:19 < livinded> maxogden: lol
22:20 <@isaacs> 53d4d3ff.local: 2012-07-31T22:19:02.333Z 404 Not Found /_view/author?group=true (worker=139)
22:21 < dogmatic69> damn.. is it normal to use swap when compiling node? 
22:21 <@wao> is there some eshop written in nodejs?
22:21 < dogmatic69> not Like I got 8 gigs of ram or anything.
22:21 <@wereHamster> node --prof tells me that I'm spending 87% of the time in libc. Can v8 be more specific in which libc function that is?
22:21 < drudge> wao: no but there is paynode
22:23 <@wao> drudge: that is payment gw, isnt?
22:23 < drudge> library for payments yeah
22:23 -!- mode/#node.js [+o Bux] by IRCbot_Master, IRCbot_Master
22:24 <@wao> drudge: im searching for eshop
22:24 < drudge> write one!
22:28 <@bnoordhuis> wereHamster: it is, usually
22:29 -!- isaacs changed the topic of #Node.js to: http://npmjs.org All your modules are belong to NODE.JS
22:30 <@Bux> restarting the IRC bots
22:30 -!- mode/#node.js [+o IRCbot_Master] by Bux
22:30 <@IRCbot_Master> Bux: Enabling IRCbot...
22:30 -!- mode/#node.js [+o IRCbot_Slave] by IRCbot_Master
22:31 <@Bux> opme
22:31 <@Bux> hmm
22:31 < CIA-93> libuv: Bert Belder v0.8 * r109e176 / src/win/fs.c : windows: only allow opening directories for reading - http://git.io/Nq7tqA
22:32 -!- mode/#node.js [+o IRCbot_Master] by Bux
22:32 <@IRCbot_Master> Bux: Enabling IRCbot...
22:32 -!- mode/#node.js [+o IRCbot_Slave] by IRCbot_Master
22:32 -!- mode/#node.js [+o Bux] by IRCbot_Master, IRCbot_Master
22:33 <@Bux> kcool
22:33 <@Bux> alright I'm off
22:33 <@Bux> bye guys
22:34 <@AviMarcus> is there some sort of standard for returning "error" to callbacks? e.g. an array of error.error = HTTP error code and error.message with a human text or the like?
22:35 <@deoxxa> AviMarcus: there's the Error object
22:36 <@deoxxa> AviMarcus: feel free to extend it however you like
22:40 <@AviMarcus> feefighters looks cool
22:41 <@AviMarcus> but stripe is still cheaper for payment processing... until you hit... 4.1k/month, it looks like
22:46 < dogmatic69> Ok, installed node and npm, then npm install mysql. Copied the example on the npm page and cant seem to make it work.
22:46 < dogmatic69> Error: connect ECONNREFUSED is all I am getting
22:47 <@bnoordhuis> dogmatic69: mysql listens on a unix socket by default
22:47 <@AviMarcus> dogmatic69, you've got the right credentials?
22:47 < dogmatic69> AviMarcus: yip
22:47 <@AviMarcus> it does? odd.
22:47 <@bnoordhuis> dogmatic69: check with `netstat -tlnp` if it's listening on a tcp port
22:47 < dogmatic69> bnoordhuis: ok, and that is wrong?
22:47 <@bnoordhuis> dogmatic69: yes. iirc node-mysql doesn't support that
22:48 <@AviMarcus> I see port and socket in my my.conf and I don't think I changed it.
22:48 <@AviMarcus> eh?
22:48 <@AviMarcus> huh. OK. I never specified a port and it just worked.
22:48 < dogmatic69> bnoordhuis: there is no 3306 in there 'netstat -tlnp'
22:48  * AviMarcus should shut up
22:49 < dogmatic69> nvm, its there.. I have it bound to the servers ip
22:49 < CoverSlide> dogmatic69: there is a skip-networking in my.cnf by default. make sure it's not enabled
22:51 < dogmatic69> ok, figured it out. I have bind-address as <server-ip> so that I can access from other pc's. not sure why, but I have had to put host: '<server-ip>' in the config, even though node is running on the same box
22:52 <@AviMarcus> dogmatic69, because by default it tries to connect on 127.0.0.1 but mysql only binds to ONE ip or all IPs
22:52 <@AviMarcus> deoxxa, so.. I should use: new Error("my human message"); and populate error.name with the machine type of error.. ?
22:52 < dogmatic69> ah, thanks
22:55 < CIA-93> node: Bert Belder v0.8 * r2981f01 / deps/v8/tools/gyp/v8.gyp : v8: don't show performance warnings when compiling with msvc - http://git.io/0J-9bQ
23:01 <@nlf> anyone have any thoughts about using cluster as a threading mechanism?
23:02 < _ritch> nlf: nope, wayyy to much memory overhead
23:02 <@AviMarcus> nlf, depending on your use case, messaging like zeromq might be incredibly helpful
23:02 <@nlf> yeah, the overhead was the concern
23:02 <@nlf> basically i want to have no more than X threads running, but X could realistically be as high as 50
23:05 <@jcrew> nlf: i use it to process data aggregation in mongo
23:05 <@jcrew> in reference to your clustering question
23:05 <@nlf> but how many children do you fork?
23:06 <@jcrew> i have a small machine so i fork only 4
23:06 <@jcrew> reading from disk is the main hold up for more to be effective anyway
23:07 <@nlf> mine would be almost no disk i/o
23:07 <@jcrew> nlf: what is the use case?
23:07 <@nlf> so we use a tool called dirbuster in security audits
23:07 <@nlf> it does a dictionary based brute force to try to find directories on a server
23:08 <@nlf> but it's written in java, and it's very buggy
23:08 <@nlf> which is irritating me
23:08 <@nlf> so i'm tossing around ideas on rewriting it and making it more performant
23:09 <@nlf> the initial thought was make each process run one task at a time, and fork as many processes as simultaneous jobs i want to run
23:09 <@nlf> in dirbuster, i typically run around 20 though
23:09 <@nlf> and 20 full node processes sounds like a big pile of overhead
23:10 < _ritch> each process will be about 10mb of ram
23:10 < dogmatic69> Damn, this is messing with my mind. I set up a small script that just uses the conect module and mysql to save a row in the db for every request. Used siege to make loads of requests (9k +) and mysql had 1k rows.
23:11 < dogmatic69> I though something went wrong, but another check and it was up to 2k. and slowly climbing.
23:11 < dogmatic69> what black magic is this mysql lib doing?
23:12 < et_> hello. have a question :)
23:12 <@context> dogmatic69: it is async. just cause the request may be done doesnt mean the process is complete
23:12 <@chilts> dogmatic69: might be pooling the connections and therefore going through your requests one-by-one (or 20-by-20 or whatever the pool is)
23:12 <@nlf> _ritch: so realistically, if i'm running 20 processes at 10mb each, that's still not terrible
23:12 <@nlf> this is something that's going to run for typically no more than a day or two anyway
23:12 <@chilts> do you wait around for the insert to come back to the process?
23:12 <@nlf> and the work each child is doing is fairly minimal
23:13 < et_> i am new to node. i used it bare, express and derby and it's seems all frameworks are calling all the request to the same process 
23:13 < dogmatic69> context: right, so if there was stuff still going on in the backend and I killed the node script it would all be gone?
23:13 < _ritch> nlf: ya, it should be fine
23:14 < et_> what is great and revolutionary for a interactive site for all users together, but for account based sites (the old fashion) it's a problem
23:14 < _ritch> nlf: just remember that node was designed to get over using threads for connections, not really perfect for just disk io type stuff
23:14 <@nlf> it'll barely be doing any disk i/o
23:15 < _ritch> ah, i thought you said its reading through all the directories
23:15 <@nlf> oh, no remote directories
23:15 <@nlf> it'll be making web requests
23:16 < _ritch> ah sounds interesting
23:17 < et_> it's possible to create app using node that using threads for connections? 
23:18 < et_> to update all the browsers surfing to the web site when one user do something, it's for only unique project only
23:18 < et_> how can i make things 'the old way'?
23:19 < CoverSlide> et_ you can do that without threads, using websockets, long polling
23:20 < CoverSlide> you can't use threads for node since there is no support for threads in v8 or in javascript in general
23:20 < et_> CoverSlide: thank you!
23:21 < et_> i'll read on websockets
23:21 <@jcrew> nlf: if it's hitting a remote server then it can deal with disk io, it may have distributed disk or not but at least it's not on the local machine, i'd be interested to know how that goes if you try it out
23:22 <@nlf> i'm gonna give it a shot
23:25 < et_> CoverSlide: I am reading on websocket and I am not sure if I am understand it well,  WebSocket is what enabled the server to update client, but how can i change the behavior that when one client for ex. change tab or do something
23:25 < et_> all clients see that updates on their browsers
23:25 < _ritch> et_: check out socket.io
23:26 < et_> derby.js is using socket.io
23:27 < et_> i've used it. but it's have the same behavior
23:27 < timeturner> use socket.io directly
23:27 < timeturner> it's easier
23:27 < et_> ok.
23:28 < et_> rther then that it's will make the server not update all clients on one's change
23:28 < et_> ?
23:28 <@mscdex> isaacs: why is there a link ("View someone else's profile") on npmjs.org that points to ry's profile?
23:29 <@chilts> mscdex: I think that was a test link at one stage, probably just left behind - well spotted :)
23:29 <@mscdex> :S
23:31 < CIA-93> libuv: Bert Belder v0.8 * r6209fe5 / src/win/process-stdio.c : windows: invalid stdio handles should be INVALID_HANDLE_VALUE and not NULL - http://git.io/R2sC5Q
23:31 < et_> I've used derby's derby-boot-ui Tab on a new site. it's great! but each user that change tab - is changing tab for all users! now, i don't want that. using socket.io directly will solve this?
23:33 < CoverSlide> you have to program it to
23:34 < ProLoser|Work> hallo
23:35 < et_> ok. interesting. so all major frameworks like node.js by default have this behavior as life-view?
23:36 < et_> it's really limits node.js options to very limited - future sites.... which is great - but what with the old stuff? gonna be harder?
23:38 < Bux> opme
23:38 -!- mode/#node.js [+o Bux] by IRCbot_Master
23:38 < et_> so node.js is suited for chats, maybe some games. what with site with tabs. it's should code every move of any user to a db or redis?
23:42 < DTrejo> et_: you can build regular sites with node
23:43 < CoverSlide> you can build anything with node you can do with anything else
23:43 < CoverSlide> just some things you'd have to do differently
23:44 < moxie> http://i.imgur.com/Gz9B0.jpg
23:44 < CIA-93> node: EugenDueck v0.8 * r7e20488 / doc/api/http.markdown : doc: http: document res.write() `drain` return value - http://git.io/hkRP0A
23:44 < et_> ok. what you mean differently? in higher terms offcourse
23:44 < et_> i am not expecting code
23:44 < moxie> asynchronous code
23:44 < et_> i need to use module?
23:45 < et_> how can i achieve behavior of regular site
23:45 < TehShrike> So heeeeey.  New npmjs.org!
23:45 < CIA-93> node: Eugen Dueck v0.8 * raf699c4 / doc/api/http.markdown : doc: http: document res.write() `drain` return value - http://git.io/u2PqBA
23:45 < CIA-93> node: Bert Belder v0.8 * r285a46d / (deps/uv/src/win/fs.c deps/uv/src/win/process-stdio.c): uv: upgrade to 6209fe5 - http://git.io/sSggKg
23:46 < ProLoser|Work> any idea why this is only using cmd.value from the first iteration? https://github.com/angular-ui/ui-bot/blob/master/server.js#L37
23:47 <@rvagg> w00t! I'm on the first page of authors ranked by published modules... tho my number is probably slightly unfairly inflated
23:49 <@chilts> rvagg: with all the bean and ender packages?
23:49 <@chilts> and bootstrap
23:49 <@rvagg> ender-bootstrap is split into separate modules, that helps
23:49 <@chilts> what do they do, just install the latest version into node_modules, or do they have additional functionality?
23:49 <@rvagg> there's a couple of modules in there just for functional tests too!
23:50 <@rvagg> https://github.com/rvagg/ender-bootstrap
23:50 <@rvagg> an Ender version of Twitter bootstrap components, create an Ender build with just the components you need
23:50 < moxie> dOnGs
23:50 <@chilts> ah cool
23:51 < dogmatic69> Is there any trick to running node.js through a reverse proxy? I got cherokee setup but only getting 404's although I can access node.js through the ip:port
23:51 < moxie> can you log what its trying to access?
23:51 < moxie> is nginx reaching the node?
23:52 < moxie> problem is with nginx?
23:52 < moxie> use proxy_pass ?
23:52 < dogmatic69> cherokee
23:52 < moxie> ok use nginx :p
23:52 < moxie> wtf is cherokee
23:53 < dogmatic69> http://www.cherokee-project.com/
23:53 < dogmatic69> Its a fast web server
23:54 < moxie> g-wan is faster?
23:55 < dogmatic69> g-wan?
23:55 < ProLoser|Work> rvagg: if i want a build server that concats/minifies my js, should we consider using ender?
23:56 < moxie> dogmatic69, http://gwan.com/benchmark
23:56 < et_> wtf is w-wan?
23:57 < et_> g-wan
23:57 < dogmatic69> moxie: it was matching the wrong host :/
23:57 < ProLoser|Work> sup dogmatic69 
23:57 < et_> looks cool
23:57 < et_> ;)
23:57 < dogmatic69> ProLoser|Work: gawd... 
23:57 < moxie> made in china
23:57 < et_> new centos virtual host is coming
23:57 < ProLoser|Work> dogmatic69: lol what?
23:57 < moxie> maxthon is also  the best html5 browsers
23:57 < moxie> also made in china lol
23:58 < ProLoser|Work> coulda sworn maxthon is just the IE engine
23:58 < ProLoser|Work> until they added webkit and gecko
23:58 < moxie> thy are most compliant
23:58 < moxie> for a while now
23:58 < dogmatic69> ProLoser|Work: ditching Cake?
23:58 < ProLoser|Work> eventually perhaps, but not now
23:59 < ProLoser|Work> i've been hacking around node for a little while now
23:59 < ProLoser|Work> you?
23:59 < ProLoser|Work> actually i'm just trying to build an irc bot atm lol
23:59 < moxie> how far are you
23:59 < ProLoser|Work> almost done
23:59 < ProLoser|Work> i have 1 last bug
23:59 < dogmatic69> nope, just investigating some options for scalability 
23:59 < dogmatic69> first timer \o/
--- Log closed Wed Aug 01 00:00:02 2012
