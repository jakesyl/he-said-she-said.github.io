--- Log opened Mon Mar 18 00:00:34 2013
00:03 < faceleg|work> lol
00:03 < faceleg|work> ningu: a guy who works @ google?
00:03 < faceleg|work> ningu: did you touch him
00:03 < faceleg|work> y'know
00:03 < faceleg|work> to affirm his reality
00:03 < ningu> they're everywhere here
00:05 < faceleg|work> ningu: if I ever meet you I'm going to hit you
00:06 < faceleg|work> for making me jealous
00:06 < faceleg|work> there are like 10 programmers in my town
00:06 < Lorentz> man, even if google wanted me I wouldn't work there
00:06 < ningu> I overheard two guys the other day talking about whether they liked textmate
00:07 < faceleg|work> ningu: shut it
00:07 < ningu> haha
00:07 < ningu> well then they went on to talk about which guys they liked
00:07 < ningu> guns*
00:07 < faceleg|work> I overheard a woman swearing at her 3 year old
00:07 < ningu> although guys is also plausible
00:07 < faceleg|work> because he wouldn't shut up about coming outside on a 28 C day
00:07 < faceleg|work> (she was outside, he waslocked inside)
00:07 < ningu> why was he locked inside?
00:08 < faceleg|work> so she could have some "me time" with her iphone
00:08 < faceleg|work> (toddler has hand me downs and is usually wearing only a nappy)
00:08 < faceleg|work> I don't live in a very nice neighbourhood
00:09 < faceleg|work> I don't live in a very nice city
00:09 < faceleg|work> and here you are showing off about meeting googlers
00:09 < faceleg|work> you make me sick
00:10 < ningu> faceleg|work: just remember what I said the other day about living costs
00:10 < faceleg|work> I would pay all the costs
00:10 < ningu> apartment rents here have gone up due to those googlers, too
00:10  * faceleg|work has not enough money
00:10 < faceleg|work> damn googlers
00:10 < faceleg|work> doubt I'd move to america anyway
00:10 < ningu> well, being googlers presumably they know how to find the good apartments
00:11 < faceleg|work> too afraid of being murdered in a gun crime
00:11 < ningu> yeah, we'd just make fun of your accent
00:11 < faceleg|work> or even just killed by a random stray bullet
00:11 < faceleg|work> ha
00:11 < faceleg|work> you'd fall to the floor in awe at my accent
00:11 < ningu> oh... well, I guess that's possible but it's unlikely to be honest
00:11 < substack> oakland has a lot of poor, starving-artist programmers
00:11 < faceleg|work> yeah I know
00:11 < substack> best kind
00:11 < faceleg|work> try telling that o my wife
00:11 < ningu> substack: yes, I agree. SF is kind of annoying
00:11 < faceleg|work> she's convinced we'd get shot as soon as we stepped of the plane
00:11 < faceleg|work> off*
00:11 < faceleg|work> I told her we're more likely to be abused by TSA staff
00:12 < ningu> faceleg|work: well, it's not like I think the situation here is OK. but your chances of that are still fairly small
00:12 < ningu> mugging is much more likely
00:12 < ningu> and I have friends from melbourne who say that's common there too
00:13 < faceleg|work> yeah mugging is fairly common her etoo
00:13 < faceleg|work> mainly asians get mugged here
00:13 < ningu> or have your car broken into, or bike stolen, whatever
00:13 < faceleg|work> ningu: I think that's normal in any western society
00:13 < Aria> The US is a pretty damn safe place, overall.
00:13 < Aria> Some good spots, some bad spots.
00:14 < Lorentz> just don't look like the kind of person to get mugged
00:14 < ningu> Aria: I feel safer most other places I've been. but I don't feel particularly unsafe here, so...
00:14 < faceleg|work> the statistics don't make a naive observer very confident of the truth of these statememnts
00:14 < faceleg|work> Lorentz: I don't look like the type of person to mug
00:14 < Lorentz> walk around like The Dude
00:14 < Lorentz> nobody mugs guys like him
00:14 < Lorentz> sort of
00:14 < faceleg|work> lol
00:14 < ningu> they just mess with him?
00:15 < faceleg|work> i felt WAY safer in Hong Kong compared to anywhere else, followed by Shanghai
00:16 < faceleg|work> unrelated: codeigniter SUCKS SO HARD
00:16 < Aria> Heh. PHP in general does.
00:16 < Aria> It's not horrible as PHP frameworks goes, but ....
00:16 < niggler> whats codeigniter
00:17 < faceleg|work> imagine jumping into a vat of boiling acit
00:17 < ningu> niggler: for pyromaniacs probably
00:17 < faceleg|work> acid*
00:17 < faceleg|work> laced with bees
00:17 < ningu> so it's acid-compliant, cool
00:17 < faceleg|work> ningu: http://www.businessweek.com/articles/2013-03-11/a-loaded-question-gun-ownership-vs-dot-gun-deaths-worldwide
00:17 < faceleg|work> ningu: shut it
00:18 < ningu> faceleg|work: I'm not denying the statistics
00:18 < ningu> but that doesn't mean that the average person is extremely likely to be a victim
00:18 < ningu> it's not random
00:18  * MidnightSun99  Picture of my ex-girlfriend naked: http://imagetwist.com/9au1ada5n7nu
00:19 < faceleg|work> ningu: granted
00:19 < ningu> as it even says there
00:19 < faceleg|work> but things lik that cinema shooting, uni shootings, school shootings *just don't* occur here
00:19 < faceleg|work> ningu: yes I didn't actual bother to read that
00:19 < faceleg|work> actually*
00:19 < ningu> well, I can't argue with that
00:19 < ningu> although there have been mass shootings in europe too
00:19 < faceleg|work> yes 
00:19 < faceleg|work> vastly less
00:19 < faceleg|work> if one may use vastly this way
00:20 < faceleg|work> I think our worst shooting resulted in < 10 deaths
00:20 < faceleg|work> and was decades ago
00:20 < faceleg|work> sorry 13
00:21 < faceleg|work> even for europeans it just seems so much more likely than "at home"
00:21 < terinjokes> i'm having a hard time figuring out a good pattern to use
00:21 < faceleg|work> crosshatch
00:21 < terinjokes> for a db-client
00:21 < faceleg|work> oh sorry, go on
00:22 < terinjokes> internally the client uses an HTTP request, but unsure if I should be exposing my library as a stream
00:23 < terinjokes> or as an event emitter… or neither
00:24 < ningu> terinjokes: event emitter is a good pattern, streams are just one kind of event emitter
00:24 < terinjokes> ningu: right… but not sure how to implement them in a node-like way that makes sense for a DB connection
00:25 < ningu> well, look at how the database drivers do it
00:25 < ningu> you can also use callbacks instead of events
00:25 < ningu> it depends on the control flow
00:29 < Virunga> Do you have any guide about how and when to use nextTick and setImmediate, for me? :)
00:30 < faceleg|work> Virunga: what is your goal
00:31 < Virunga> Learn to use node.js for now.
00:31 < faceleg|work> 3OH
00:31 < faceleg|work> haha oops
00:31 < faceleg|work> *oh
00:31 < Virunga> I'm looking other people's code
00:31 < faceleg|work> do they use those two functions?
00:31 < ningu> Virunga: in my experience those are rarely necessary
00:31 < ningu> but maybe I just don't do those things
00:32 < faceleg|work> ningu: Virunga I was going to say the same thing
00:32 < Virunga> faceleg|work: sometimes. I saw it in the node's code.
00:32 < faceleg|work> node is not normal node code
00:32 < ningu> yes, it's used internally quite a bit
00:32 < faceleg|work> node is node itself
00:32 < faceleg|work> you should look at projects / modules written *in* node to learn
00:33 < faceleg|work> unless you want to contribute to node development
00:33 < Virunga> ningu: i see, but if i don't know what they are and do, how can i know if they can be useful? :)
00:33 < ningu> well, there's no harm in learning about it
00:33 < ningu> especially if you want to know how node works internally
00:33 < ningu> but you can do a lot of stuff without worrying about that stuff -- that's kind of the point in a way
00:33 < ningu> node provides a nice async api and you don't have to worry about how it does it
00:34 < ningu> if you want to make your own api methods that might be more relevant
00:34 < ningu> s/api/async/
00:34 < Virunga> Ok, you convinced me 
00:35 < ningu> Virunga: you should read about events
00:35 < Virunga> I'll concentrate on other stuff
00:35 < ningu> and async coding in general
00:35 < Virunga> Yes, i did it and i do it regurarly ;)
00:35 < ningu> ah, ok
00:35 < ningu> so you already know node?
00:36 < Virunga> I used this http://book.mixu.net/
00:36 < Virunga> I bit ningu
00:36 < ningu> must have been minor beause I didn't notice
00:36 < Virunga> I don't know the new api of 0.10
00:36 < Virunga> A bit sorry :D
00:37 < ningu> the main changes in 0.10 are in streams
00:37 < ningu> isaacs had a good blog post on it
00:37 < Virunga> I just had a bad figure for those...
00:38 < Virunga> I opened an issue aahhahahahah
00:38 < ningu> a bad figure?
00:38 < Virunga> Stupid me
00:38 < Virunga> Yes, i don't know if that's the right way to say it in english
00:39 < JQE> Good Day.
00:39 < Virunga> Hi
00:39 < JQE> I was hoping someone might have some insight for me :D
00:39 < JQE> i am new to Node.js. I create a TCP Server that all seems to be working well.
00:40 < JQE> it is connecting to a specific device. The issue i am having now is that i created a http server to send info to the tcp server
00:40 < JQE> and when the http server sends it closes the socket for tcp as well as for itself
00:40 < JQE> if that makes sense
00:41 < Virunga> JQE: the http server's socket?
00:41 < JQE> actually i dont think it closes the servers socket, but it closes the tcp servers socket
00:41 < JQE> which i wanted to stay open
00:42 < JQE> sending the same command from withint the tcpserver itself is fine
00:43 < JQE> basically i track the Connections to the TCP Server and keep a function pointer to a send function.
00:43 < JQE> when i call that send functoin from inside the http server it closes the tcp socket.
00:43 < JQE> not sure why.
00:44 < JQE> calling the function inside the tcp server does not
00:47 < mscdex> JQE: are you using .end() ?
00:47 < JQE> i don't call it but that is the event being triggered
00:48 < mscdex> it's hard to say then without seeing code
00:49 < JQE> i do call response.end in the http server could that be triggering both ?
00:49 < ningu> JQE: not sure but you might want to look into the allowHalfOpen option
00:49 < ningu> on your socket
00:50 < ningu> end() sends a TCP FIN and without that option, the socket will send FIN back and close
00:51 < mscdex> ningu: i think he wants to keep both ends open though
00:51 < JQE> yes
00:52 < JQE> the plan is that the server and client connect over tcp and do their thing
00:52 < JQE> http is more for testing different data sends so i can work on parsing and whatnot
00:52 < JQE> but when i send the command it kills everything
00:52 < JQE> i would post code but i have encryption algorithims i would have to remove lol
00:54 < niggler> JQE god forbid someone finds out you are using a caesar cipher
00:54 < JQE> its more than that.
00:54 < ningu> JQE: hmm well in that case I guess you don't want end()
00:55 < JQE> ningu i don't call end except on the http response
00:55 < ningu> oh
00:55 < ningu> well, I guess we'd need to see the code
00:56 < JQE> give me a minute and i will pastebin something
00:58 < Virunga> http://blog.izs.me/page/2 did you read this? ahahah
01:02 < JQE> http://pastebin.com/mtVh0YNa
01:02 < JQE> thats the basics i don't know if it will run
01:02 < niggler> god no, avoid paste bin like the plague
01:02 < JQE> but it gives you the flow
01:02 < JQE> ?
01:02 < niggler> pastebin.com is the forbes.com of paste tools
01:03 < niggler> lol i forgot i have 127.0.0.1 pastebin.com in my /etc/hosts
01:04 < JQE> http://privatepaste.com/851d659c0f
01:04 < rawtaz> hi. i have a package that npm seems to think is installed, named "test", so im trying to `npm uninstall test`, but am getting an error. please see http://pastebin.com/ARXeXu3h for a short paste
01:04  * niggler slaps rawtaz 
01:05 < rawtaz> any idea how i can completely remove any traces of the "test" module (the only thing it ever consisted as is a package.json with just name and version and devDependencies in it)
01:05 < rawtaz> niggler: haha yeah :) i dont like it either, but unfortunately pastie.org doesnt have the settings for private/unlisted and time period :/
01:06 < niggler> how about haste bin?
01:06 < niggler> so what was the issue JQE 
01:06 < JQE> i re-pasted from privatepaste
01:06 < rawtaz> well, have you ever met a mor schizophrenic pastebin than hastebin? :P
01:06 < rawtaz> more*
01:06 < JQE> in the http server i send a command to the tcp socket. Then it closes the tcp socket
01:06 < JQE> if i send to through the same function from the tcpserver it doesn't
01:06 < JQE> i need that socket to stay open
01:08 < JQE> it actually calls the end() event in the tcp server for that socket
01:09 < niggler> is error getting called?
01:09 < JQE> there is no error no
01:09 < JQE> just end()
01:09 < niggler> can you log what you are receiving?
01:09 < JQE> and only when called from the http server
01:09 < niggler> i guess you have a line there if debug is set
01:09 < JQE> yeah
01:09 < niggler> and you see that getting called?
01:10 < rawtaz> maybe i should clean the cache. but i dont want to do that yet in case there's remnants of that test package somewhere else too
01:10 < JQE> i don't see the receive getting called, only the end()
01:10 < JQE> send gets called
01:10 < niggler> are you hitting /SendCommnd or /getUsers when this happens?
01:11 < JQE> /SendCommand
01:11 < niggler> its spelled /Commnd 
01:11 < niggler> err '/SendCommnd' is a typo or is it spelled correctly?
01:12 < JQE> its a typo
01:12 < owen1> do u guys always add 'return' when calling a callback? return cb(null, x)
01:12 < JQE> but i always copy and paste things like that so i don't get stuck lol
01:12 < JQE> then cleanup once it works
01:12 < niggler> ah
01:12 < owen1> according to http://caolanmcmahon.com/posts/nodejs_style_and_structure/  it's critical
01:14 < niggler> and what is .con?
01:14 < JQE> its a pointer to SendData
01:14 < JQE> so that it can send to the appropriate socket
01:14 < niggler> where is that set
01:14 < JQE> var pSend = SendData in the initialization of the socket
01:15 < JQE> and .con is set in the Auth_Success
01:15 < niggler> unless I'm blind I don't see that in your paste
01:15 < JQE> which part ?
01:16 < niggler> where .con is set
01:16 < rawtaz> ok, so if there's a package.json file with a "name":"test" in the local folder, then npm considers there to be a package "test" installed, as it seems. is that correctly understood?
01:16 < niggler> like this JQE :                         connections[clientNum].con(new Buffer(1).fill(0), CMD_USERSTATUS);
01:16 < rawtaz> (even though there's no test/ folder in node_modules)
01:16 < niggler> oh wait nvm i see it
01:16 < niggler> there's some strange whitespacing going on
01:16 < JQE> case AUTH_SUCCESS:
01:16 < JQE> if (DEBUG == 1) {
01:16 < JQE> console.log('Sending Success login');
01:16 < JQE> }
01:16 < JQE> if (uid != 0) {
01:16 < JQE> index = uid;
01:16 < JQE> connections[uid] = {con: pSend, Name: name, id:uid};
01:16 < niggler> yeah
01:16 < JQE> SendData(new Buffer(1).fill(0), CMD_AUTH);
01:35 < rawtaz> question: is there no command to make npm update all (dev)dependenciesin the (local) package? e.g. if dependency 0.4.0 is installed i'd like to run `npm update` or something, i.e. without naming individual deps to be updated
01:37 < rawtaz> ive really tried to find it, but without success
01:37 < faceleg|work> ningu: if I have mys* st = new mys() where mys is a struct that contains pointers to, among other things, other structs
01:37 < faceleg|work> when I free mys, will the other things be freed also?
01:38 < faceleg|work> *when I free st
01:40 < owen1> anyone use local markdown editor?
01:40 < owen1> i mean offline
01:42 < owen1> i used gfms but i get : 'Cannot parse .css links from Github'
01:44 < rawtaz> seriously.. at my hands is a package manager named npm, but it cannot do the most fundamental operation of updating all packages in the definition file? is it really like that?
01:45 < rawtaz> i must be missing something.
01:45 < lohkey> sure it can
01:45 < lohkey> as long as all the files in the package.json specify they're allowed to be upgraded
01:46 < lohkey> and there is a qualifying version to upgrade to
01:46 < lohkey> then `npm update` should update all updatable packages
01:46 < rawtaz> yes, but `npm update` doesnt do anything, even when i verified that the dependency is installed in v0.4.0 and i change package.json to requite 0.4.1
01:46 < rawtaz> hm
01:46 < rawtaz> do i need to add some key to the dependency's entry in the devDependencies?
01:47 < lohkey> no, you're obviously doing something wrong
01:47 < lohkey> post your package.json or something
01:47 < rawtaz> yeah i will
01:47 < rawtaz> moment
01:47 < lohkey> and name the sep you want updated
01:47 < lohkey> s/sep/dep/
01:51 < rawtaz> lohkey: here's the entire output and data: http://pastebin.com/UEzW73Fd
01:51 < rawtaz> lohkey: as you can see, nothing happens when i run `npm upadate`. i am expecting the grunt dep to be updated from 0.4.0 to 0.4.1
01:52 < rawtaz> i meant `npm update`
01:53 < lohkey> oh dev deps
01:53 < rawtaz> lohkey: hmm could it be because it is a *dev* dep`?
01:53 < lohkey> `npm update --dev` ?
01:54 < rawtaz> tried that, no change
01:54 < lohkey> yeah, pretty sure it's because it's a dev dep
01:54 < lohkey> i've never had that problem with non dev deps
01:54 < rawtaz> i upgraded npm as well so it is latest
01:54 < rawtaz> right
01:54 < rawtaz> dang
01:54 < rawtaz> they should add a --dev
01:54 < lohkey> hah, looks like they did .. 3 hours ago
01:54 < lohkey> https://github.com/isaacs/npm/pull/3262
01:55 < lohkey> or some one opened a PR for it 3 hours ago at least
01:55 < lohkey> :-/
01:55 < rawtaz> hah
01:58 < rawtaz> https://github.com/isaacs/npm/issues/2369
01:59 < rawtaz> maybe if i go to sleep it will be fixed tomorrow :o
01:59 < rawtaz> uh, wow
02:00 < rawtaz> it seems it's not just a matter of npm not updating it when no module is being named on the command line
02:00 < rawtaz> it wont even do it if i do  npm update grunt
02:00 < rawtaz> not with --dev either
02:00 < rawtaz> gee.
02:00 < rawtaz> i wonder if dev dependencies is a new concept or something
02:01 < lohkey> in NPM, no, they've been around a while
02:01 < lohkey> i think people only tend to use them for test harnesses mostly
02:01 < rawtaz> if thats the case it really puzzles me why noone seems to have wanted to update their devdeps before :o
02:01 < lohkey> and honestly, you're not updating your test harness every day
02:01 < rawtaz> yeah sure
02:01 < rawtaz> ok i guess "a while" in npm terms is not very long ;P
02:03 <@Nexxy> l
02:03 <@Nexxy> lol, wrong term ._.
02:04 < rawtaz> haha
02:04 < rawtaz> what is? :)
02:04 <@Nexxy> I was trying to ls a directory ;P
02:04 <@Nexxy> in a different term window
02:04 < rawtaz> oh
02:04 < rawtaz> that kind of term
02:05 <@Nexxy> +inal
02:05 < rawtaz> kinda gets weird when there are at least three types of terms
02:05 <@Nexxy> and terminals
02:06 < ningu> the notion of "terminal parking" always disturbed me
02:06 < rawtaz> lohkey: thanks a lot for trying to help me, i apprechiate that
02:30 <@Nexxy> mbalho, is there a certain way one should attempt to access the motherboard of an AR drone?
02:31 < gf3> Nexxy: Very carefully 
02:31 <@Nexxy> ohhhhhhh
02:31 <@Nexxy> *carefully*
02:32 <@Nexxy> I'm trying to add a flood light to the front
02:33 < owen1> any suggestions for a markdown viewer? gfms doesn't work anymore.
02:59 <@mbalho> Nexxy: yea on the bottom theres a oval shaped black plastic sticker over a small hold in the middle-wide
03:00 <@mbalho> Nexxy: take the sticker off and you get access to the serial console
03:00 <@mbalho> Nexxy: i dunno what else you would need motherboard access for
03:01 <@mbalho> Nexxy: https://gist.github.com/maxogden/4152815
03:12 <@Nexxy> mbalho, sweet! I was wondering if that was it. that's pretty much all I need, I think
03:13 <@Nexxy> mbalho, I'm trying to figure out how to mount that LED panel I got in dublin to the bottom of it so I can fly it at night w/o it being all wobbly
03:13 <@Nexxy> mbalho, thanks :D
03:23 < GoddeR> so for every connection to my node server is a socket opened?
03:27 < aneuhaus> Hi pplz! any of you had problems with bcrypt since updating to nodejs0.10 ???
03:27 < faceleg|work> +/join #libgit2
03:27 < faceleg|work> wow nice one lookat me go
03:36 < vicapow> any recommendations on command line modules to restart node when changes to any js files happen?
03:38 < echo> forever, nodemon
03:39 < faceleg|work> supervisor
03:39 < vicapow> echo, faceleg|work awesome. thanks! :)
03:50 < GoddeR> is each new connection to a node server a new opened file under the hood? why do file descriptors limit amount of concurrent connections?
03:51 < faceleg|work> co-worker after I exposed him to AngularJS: "everything else is now categorised under "things you put in toilets""
04:33 < sshaginyan> Is anyone familiar with dependency injections
04:33 < sshaginyan> >
04:33 < owen1> sshaginyan: yeah
04:33 < owen1> faceleg|work: agree (about angular)
04:33 < knc> what in DI?
04:36 < sshaginyan> owen1: I have code where I'm trying to pass an object through using dependency injection . So after I do require(file)(obj); and module.exports = function(obj) { obj.x = function() {} }. I add a function to obj now when I do a console.log in the file where I did my require I get nothing. However, if I do obj.x = "Something" or obj.x = {} I can see the string and object was clearly made.
04:37 < sshaginyan> owen1: In short with dependency injections adding functions to the object doesn't work but adding objects and strings do....
04:37 < sshaginyan> Is this a bug in node.js?
04:38 < knc> sshaginyan: function is an object technically, so it should work. Can you show a gist / pastebin of your actual code?
04:38 < sshaginyan> no it's a constructor + objecto
04:38 < sshaginyan> and it doesn't work
04:38 < sshaginyan> sure
04:40 < sshaginyan> http://pastie.org/6589462
04:40 < sshaginyan> knc: http://pastie.org/6589462
04:41 < sshaginyan> Does this have to do anything with index.js
04:41 < knc> what is the name of FILE #2 ?
04:42 < sshaginyan> File #1 is index.html File #2 is catalog.category.browse.product.v3.js
04:42 < sshaginyan> sorry index.js
04:43 < sshaginyan> Could you guys tell me of cases where functions won't be added to an object?
04:44 < sshaginyan> when I do var x = function() {} is this is same as var x = new Function?
04:45 < knc> Let me give you a small example where it actually works
04:45 < knc> you can figure out things from there
04:47 < sshaginyan> knc: The weird thing is I have an example that's working
04:47 < sshaginyan> But
04:48 < arhart> Hi All; I'm trying to understand how to use the new streams interface to interact with stdin and stdout (maybe stderr later)
04:49 < arhart> The documentation (http://nodejs.org/api/all.html) says process.stdin is paused by default, so one must call process.stdin.resume() to read from it.
04:49 < arhart> it also says resume() kicks a stream into "old mode"
04:49 < arhart> How can I interact with stdin in new mode?
04:50 < knc> sshaginyan>: http://pastie.org/6589502
04:50 < knc> sshaginyan: see the pastie, that's an example of both func and obj getting called from outside
04:51 < sshaginyan> knc: I swear I'm doing the same thing
04:51 < sshaginyan> lol
04:51 < sshaginyan> let me simplify my code and see if it works
04:53 < sshaginyan> knc: I simplified it and it work but don't have any idea what's going on
04:53 < sshaginyan> let me incrementally add complexity
04:53 < knc> ok
04:58 < faceleg|work> owen1: lol yeah
05:04 < atatsu> is it atypical to emit an event using another library's emitter (such as a websocket connection) so that you can add a listener and avoid nesting so many callbacks?
05:06 < sshaginyan> knc: the problem should be here http://pastie.org/6589612
05:06 < sshaginyan> owen1: http://pastie.org/6589612
05:07 < sshaginyan> Basically I'm traversing an array and checking whether the object has the property name of the segment in the array. If yes go into it and if not create it and go into it.
05:07 < sshaginyan> then after the last segment of the array return the deepest object.
05:08 < sshaginyan> when I try adding a method to this object it never makes it.
05:09 < sshaginyan> Guys for example this function is never added http://pastie.org/6589675
05:09 < sshaginyan> on line 15
05:12 <@Nexxy> visnup_, I got a cookie at subway just so I could do this;
05:12  * Nexxy eats a cookie
05:21 < sshaginyan> Can someone please tell me why this is returning with no function http://pastie.org/6591445
05:36 < visnup_> oooh!
05:36 < visnup_> I was eating girl scout cookies last night
05:37 < visnup_> I've never had a subway cookie. I've heard good things.
05:37 <@mbalho> me and jlord bought 3 boxes of girl scout cookies today 
05:38 <@mbalho> it was the last day to get em!
05:38 <@mbalho> then we ran into tim oreilly and he showed us his underwear to prove he was wearing green
05:38 < visnup_> ohman
05:38 < visnup_> that's creepy of tim oreilly
05:38 <@mbalho> yea
05:38 < visnup_> but, he sounds irish
05:39 < visnup_> so I guess that gives him a pass
05:41 < harrisonm> mbalho: whoa what
05:41 <@mbalho> ?
05:43 < harrisonm> Was there any context to that beyond St. Patrick's Day?
05:43  * visnup_ eats a jelly bean
06:04 < sshaginyan> Please someone tell me why this doesn't work…… obj.x = {two: {three: {}}}; obj['x']['two']['three'].a = function() {}; no function added..........
06:04 < sshaginyan> please please please. This is driving me crazy
06:12 < medice> did you define obj first
06:14 < sshaginyan> medice:  yes
06:16 < atatsu> if I enter that same line in a node console obj.x.two.three.a is a function
06:29 < kenperkins> hm new keyboard arrives today
06:29 < kenperkins> voip phone does too
06:30 < faceleg> well aren't you luck
06:30 < faceleg> dammit
06:30 < faceleg> lucky
06:30 < kenperkins> haha
06:30 < faceleg> it actually hurts to have fingers like mine
06:30 < faceleg> hurts m ypride I mean
06:30 < faceleg> dammit
06:30 < faceleg> forget it
06:30 < kenperkins> see, if only you had a new keyboard :D
06:31 < Lorentz> depends on what new keyboard it is
06:31 < Lorentz> is it a topre realforce?
06:31 < kenperkins> das keyboard mac :P
06:31 < Lorentz> oh, pffft
06:33 < kenperkins> well i needed something for mac :P
06:34 < faceleg> ooo das keyboard
06:34 < faceleg> I almost bought
06:35 < sshaginyan> faceleg: keyboards are so 2012
06:36 < faceleg> sshaginyan: yeah I program by bashing my nose agasint an iphone kyboard
06:36 < kenperkins> i use siri to program
06:36 < faceleg> can't stop showig off can you
06:36 < kenperkins> lol 
06:36 < sshaginyan> no ….. Microsoft Word with voice to text......
06:50 < nesusvet> Good morning everyone. 
06:52 < nesusvet> I had service witch are writing a ton of logs, I am going to analyze this logs using NodeJS, but can't imagine how to read file in stream using asynchronous model. Can somebody give me some advice?
06:54 < Guest32555> Hello guys!
06:55 < Guest32555> Everytime I show up here I do because I have questions ;)
06:55 < sshaginyan> Please someone help me I have this function I'm passing it APIPathStructure which is an empty object from another file. I'm adding a method to this object in the function but when I console.log(APIPathStructure) from the other file I don't see the function.......
06:56 < Guest32555> This time I search for a xml processor that has two features: 1) The processor should be able to Write the Loaded tree exactly the same way as read (including whitespaces and <![CDATA[ calls. 2) It should be offering some sort of easy query language (css/xpath/...) to access and change nodes.
06:57 < zeromodulus> sshaginyan: are you exporting APIPathStructure?
06:57 < sshaginyan> yes
06:57 < sshaginyan> zeromodulus: var services = exports;
06:57 < sshaginyan> services.APIPathStructure = {};
06:58 < Guest32555> I have tried quite a few xml libraries but non fit both criterias. Any suggestions?
06:58 < Techie-Micheal> Guest32555: Which libraries have you tried?
06:58 < zeromodulus> sshaginyan: is your console.log call in the file containing APIPathStructure?
06:59 < sshaginyan> yes
06:59 < Guest32555> wew. right now i am stuck with elementtree, but I remember node-expat (and similar expat systems)
06:59 < zeromodulus> if you require your file from within a REPL, do you see the console.log output?
07:00 < sshaginyan> zeromodulus: http://pastie.org/6599750
07:00 < Guest32555> and node-o3-xml
07:01 < Guest32555> and I think libxmljs
07:01 < zeromodulus> sshaginyan: trying requiring index.js on its own, see if you get any output.
07:02 < sshaginyan> zeromodulus: For index.js on line 25 when I do this  console.log('%j', services.APIPathStructure); I get {"one":{"two":{}}} with no function in it
07:02 < sshaginyan> zeromodulus: yes I do
07:02 < Techie-Micheal> Guest32555: Have you looked at xml2js?
07:04 < Guest32555> No, looks fresh!
07:04 < sshaginyan> zeromodulus: I think this is a bug with node.js
07:04 < Techie-Micheal> I think it'll do what you want.
07:04 < Guest32555> I will try it out.
07:05 < zeromodulus> sshaginyan: throw some console.log statements in createAPIPathStructure.
07:05 < sshaginyan> http://pastie.org/6599802
07:06 < sshaginyan> zeromodulus: look at the comments I wrote http://pastie.org/6599802
07:06 < sshaginyan> those are the outputs
07:06 < devongovett> Is there a good node validation module that doesn't throw errors? This one seems popular but I just want booleans. https://github.com/chriso/node-validator
07:06 < zeromodulus> oh, okay
07:07 < zeromodulus> well, throw some console.log statements in your for...in loop.
07:07 < zeromodulus> you can never go wrong with console.log statements.
07:07 < zeromodulus> more console.log statements, I mean.
07:07 < sshaginyan> zeromodulus: I've been at this for hours now. But let me analyze once more.
07:08 < zeromodulus> log pathSegments[index], log the stuff in your if block.
07:08 < zeromodulus> sshaginyan: also, nice yoda condition. :P
07:09 < zeromodulus> if (false === stuff)...
07:09 < sshaginyan> ?
07:09 < zeromodulus> you know how yoda speaks?
07:09 < sshaginyan> is this a positive thingy?
07:09 < zeromodulus> from star wars?
07:09 < sshaginyan> ohhhhh
07:09 < sshaginyan> lol
07:10 < sshaginyan> okay so this is the output one, two, {"one":{"two":{}}}, { x: [Function] }
07:10 < Havvy> Swear by it, some people do.
07:10 < zeromodulus> "scheming is the dark side...", "false is the statement..."
07:11 < sshaginyan> zeromodulus: Also when I do a regular string or an object it works but functions don't.......
07:11 < sshaginyan> I truly believe this is a bug
07:11 < zeromodulus> I only see you're trying to assign a function to .x
07:12 < zeromodulus> where's this function assignment that's supposed to happen?
07:12 < zeromodulus> I assume APIPathStructure.x is just a test.
07:13 < sshaginyan> What do you mean where is it?
07:13 < zeromodulus> And not the actual aim of your code.
07:13 < sshaginyan> yes
07:13 < sshaginyan> ohhhh
07:13 < sshaginyan> no
07:13 < zeromodulus> Well, I don't see any function assignments other than that one.
07:13 < sshaginyan> it's suppose to happen in a very dark an mysterious place.
07:13 < sshaginyan> seriouslty
07:14 < sshaginyan> but it's the same concept
07:14 < sshaginyan> if it doesn't work here it won't work anywhere else
07:14 < zeromodulus> So, if it's showing property x as a function, then, isn't your code working?
07:15 < zeromodulus> Are these function definitions supposed to come from a file?
07:15 < zeromodulus> i.e. fileName.
07:16 < zeromodulus> I don't see what's wrong with your code.
07:16 < sshaginyan> zeromodulus: Here I simplified it even more http://pastie.org/6599859
07:17 < zeromodulus> so, what's the problem exactly?
07:17 < sshaginyan> zeromodulus: The problem is this {"one":{"two":{}}} is suppose to show {"one":{"two":{x: [Function]}}}
07:17 < sshaginyan> and it's not
07:18 < zeromodulus> Oh, okay.
07:20 < zeromodulus> hmm... yeah, seems like a bug.
07:21 < willryder> What can node do that php can't?
07:22 < sshaginyan> zeromodulus: Simplified it even further http://pastie.org/6599870
07:22 < sshaginyan> Guys please tell me if this is a bug with node.js or not http://pastie.org/6599870
07:23 < sshaginyan> willryder: Bake cookies and tuck you in at night
07:23 < zeromodulus> sshaginyan: yeah, that's got to be a bug.
07:24 < sshaginyan> zeromodulus: Can I fix it please…….. please oh pretty please
07:24 < zeromodulus> maybe make it not an anonymous function.
07:25 < Guest32555> Techie-Michael: How do I write xml-strings from the parsed dom? The documentation is rather thin at https://github.com/Leonidas-from-XIV/node-xml2js/
07:25 < ningu> yeah, who cares about the function's privacy anyway
07:25 < sshaginyan> zeromodulus: WHich part?
07:25 < zeromodulus> the assignment to APIPathStructure.x
07:26 < zeromodulus> shouldn't matter, really, but, you can try it. :P
07:26 < ningu> so here is a random question. I'm currently using jquery-ui for some interface interactions in my app but I'm thinking of switching to boostrap. is it worth it?
07:26 < sshaginyan> yeah didn't work
07:26 < ningu> I know there's no real answer to that but just wondering if anyone has any advice. bootstrap looks pretty cool.
07:27 < sshaginyan> zeromodulus: the funny thing is if I do APIPathStructure.x = "hello" or APIPathStructure.x = {} it works
07:27 < sshaginyan> zeromodulus: Only in the case of function does it not work
07:27 < zeromodulus> yeah, maybe it has something to do with the assignment being in function scope.
07:28 < zeromodulus> but... then again, those other attributes are there, so, *shrug*
07:28 < zeromodulus> looks like a bug to me.
07:31 < ningu> if it has six legs it's not just a bug, it's an insect
07:32 < Havvy> (legs.length === 6 ? new Insect() : new Bug())
07:34 < sshaginyan> PLease can anyone else verify if this is a bug in node.js? http://pastie.org/6599945
07:37 < sshaginyan> zeromodulus: I guess when the object is sent to helpers it's a copy not a reference?
07:38 < zeromodulus> sshaginyan: doesn't appear that way.
07:39 < zeromodulus> because how else would the attributes be there?
07:39 < medice> sshaginyan: what do you expect services.apipathstructure to be?
07:39 < medice> it works just as intended
07:39 < sshaginyan> are you kidding me...?
07:40 < medice> hmm
07:40 < medice> naah, ok, you do modify it there
07:40 < sshaginyan> why is it empty when I add a function isn't everything suppose to be a reference?
07:41 < sshaginyan> Do references work cross module, or are they a copy?
07:42 < ningu> sshaginyan: it's a bug with your console.log statement, that's all
07:42 < ningu> you do '%j' for one and not the other
07:42 < ningu> it's exactly the same object
07:42 < sshaginyan> ningu: I tried to access them and get nothing
07:43 < sshaginyan> try to access the function
07:45 < ningu> sshaginyan: http://pastie.org/6599991
07:45 < ningu> works fine here
07:47 < sshaginyan> ningu: Seriously wt…….
07:47 < sshaginyan> So it's a bug in console.log()?
07:47 < ningu> it's not a bug
07:48 < nesusvet> ningu, I am always using bootstrap )
07:48 < ningu> you can't convert a function to json
07:48 < ningu> that's what %j is
07:48 < nesusvet> Anyway, I will repeat my question:  I had service witch are writing a ton of logs, I am going to analyze this logs using NodeJS, but can't imagine how to read file in stream using asynchronous model. Can somebody give me some advice?
07:49 < nesusvet> I need to open this file and always grab line by line
07:50 < ningu> nesusvet: http://stackoverflow.com/questions/6156501/read-a-file-one-line-at-a-time-in-node-js
07:50 < ningu> first google hit
07:50 < nesusvet> Ohh, thanks
07:51 < terinjokes> ningu: i would have made some marketing campaigner happy… i used to own "lmbtfy.com" (let me bing that for you)
07:52 < ningu> hehe
08:04 < sshaginyan> ningu: Thanks
08:04 < sshaginyan> On a scale of 1-10 I would give you a 8.5273
08:23 < _youjelly> I want to make something like this, I have a processes that write to unique named pipes, and I want to get that data being written on those named pipes on my browser by specifying the name of the pipe
08:32 < youjelly> I want to make something like this, I have a processes that write to unique named pipes, and I want to get that data being written on those named pipes on my browser by specifying the name of the pipe
08:40 < jedireza> hey guys i'm having some funky problems with process.hrtime()
08:40 < jedireza> i was wondering if someone could help me figure out the issue
08:40 < jedireza> https://github.com/joyent/node/issues/5063
08:43 < faceleg> ningu: ningu ningu 
08:43 < faceleg> I have more problems
08:44 < faceleg> so in other words it's your luck day/night
08:44 < faceleg> lucky*
08:45 < ningu> hehe
08:45 < ningu> fortunately (?) I'm awake
08:45 < faceleg> i'm iterating a vector, so in other words it's awesome
08:45 < faceleg> but it's segfaulting
08:46 < faceleg> where? this: rawContent->range->old_start
08:46 < faceleg> where DeltaContent* rawContent = (*contentIterator);
08:46 < faceleg> and range is a struct pointer
08:46 < faceleg> and old_start is an int field of the range struct
08:46 < faceleg> but when I compile it with rawContent->range.old_strat it errors
08:47 < ningu> hmm
08:47 < ningu> and you're iterating over a vector of DeltaContent*'s?
08:47 < [AD]Turbo> hi there
08:48 < kevindish> What was the service which was recently on hackernews, where it was possible to code Node.js in a browser like jsFiddle
08:49 < faceleg> ningu: I'm hastebinning
08:49 < ningu> faceleg: yeah, I was trying to find the original struct definitions and such
08:49 < ningu> is it libgit2 or what?
08:49 < jedireza> kevindish: was it http://runnable.com/
08:50 < kevindish> jedireza: Yes i was! Thank you! I have search hackernews so much, could not find it!
08:50 < jedireza> np
08:50 < ningu> DeltaContent does not show up in the libgit2 source
08:51 < jedireza> if anyone has a second to check this out i'd appreciate it
08:51 < jedireza> http://runnable.com/
08:51 < jedireza> sorry
08:51 < jedireza> https://github.com/joyent/node/issues/5063
08:51 < jedireza> i'm trying to use process.hrtime() and my results are funky
08:52 < faceleg> ningu: http://hastebin.com/yefipetope.cpp
08:52 < faceleg> ningu: it's custom
08:53 < faceleg> ningu: as I needed to map git_diff_deltas from one callback in cpp to line content in another callback
08:53 < faceleg> then pass it all to the main thread for moving into JS land
08:53 < faceleg> one does not simple, generate a diff between two commits
08:54 < Nickels> anyone seen mscdex up in here?
08:54 < faceleg> simply*
08:55 < ningu> why is it GitDiffList::Delta when you define it as just struct Delta?
08:55 < ningu> Nickels: not very long ago, 12 hours maybe
08:55 < Nickels> aww shucks
08:56 < Nickels> has anyone used his IMAP module before?
08:56 < ningu> Nickels: well I haven't been here the whole time
08:56 < ningu> I just mean he's been around
08:56 < extrawurst> 230705
08:56 < faceleg> ningu: uh... shouldn't it be?
08:56 < faceleg> brb 
08:56 < Nickels> ningu: thanks i got what you meant
08:56 < ningu> faceleg: I don't think so
08:57 < ningu> unless you're using namespaces
08:57 < ningu> faceleg: anyway I think I see the issue
08:58 < ningu> you do sizeof(delta) which is a pointer
08:58 < ningu> you need to do sizeof(git_diff_delta)
08:58 < Nickels> pointers in javascript???
08:58 < ningu> Nickels: nah, he's written a gyp module
08:58 < ningu> writing*
08:58 < Nickels> i thought the world fell apart for a second there
08:58 < ningu> faceleg: you're allocating enough memory to store a pointer and copying over a whole struct :)
08:59 < faceleg> aaaaha
08:59 < ningu> also, it's weird that you do (), new GitDiffList::Delta() makes it look like a class
08:59 < ningu> but whatever, apparently it compiles
08:59 < faceleg> yeah I know
08:59 < faceleg> I just saw it being done elsewherein this code
08:59 < ningu> well, sure
08:59 < ningu> apparently it works
08:59 < faceleg> so I assumed it was "teh way"
08:59 < faceleg> yeah I thought it was weird
08:59 < ningu> and if they think it isn't confusing more power to them
09:00 < faceleg> I read that structs can have constructors?!
09:00 < faceleg> should it lack()?
09:00 < faceleg> and malloc should be like:   deltaContent->range = (git_diff_range*)malloc(sizeof(git_diff_range));
09:00 < ningu> yes
09:00 < ningu> also you have an extra & in the second memcpy
09:01 < ningu> and the same issue with the malloc
09:01 < faceleg> yeah
09:01 < faceleg> the & was trial and error
09:01 < faceleg> I'm still struggling with debugging seg faults
09:01 < faceleg> I "solve" them 5/7 times
09:02 < Nickels> gdb is your friend
09:02 < faceleg> bingo compiles and runs
09:02 < ohcibi> if I have grunt ~0.4.0 in my package.json.. shouldnt npm update then update it to 0.4.1 if available?
09:02 < Nickels> as is 'bt'
09:02 < faceleg> Nickels: yes but I'm gdb's retarded friend who can't read or even see properly
09:02 < ningu> faceleg: what, the new version?
09:02 < ningu> ohcibi: no. read semver
09:02 < faceleg> ningu: after making changes you suggested just now
09:02 < ningu> ohcibi: you can do * for the latest version
09:03 < ningu> or 0.4.x, etc
09:03 < faceleg> ningu: thanks
09:03 < ningu> sure
09:03 < Nickels> hey ningu: have you seen/used either of these modules....
09:04 < Nickels> https://github.com/mscdex/node-imap
09:04 < Nickels> https://github.com/andris9/mailparser
09:04 < ningu> Nickels: I don't do any stuff with email, sorry
09:04 < ohcibi> ningu: it says: ~1.2.3 := >=1.2.3 <1.3.0
09:04 < ningu> ohcibi: oh, really? I thought it was exact, I guess you're right :)
09:04 < ohcibi> ningu: but it doesnt update 8-))
09:04 < Nickels> :-(
09:06 < ningu> bower is pretty cool
09:07 < ohcibi> ningu: ah it seems that devDependencies is not included in update
09:07 < ningu> ohcibi: right
09:07 < ningu> I don't remember how to get it to install those
09:07 < ohcibi> ningu: there is an open pull request.. 10 hours ago
09:07 < ohcibi> *wait*
09:07 < ohcibi> 8-)
09:37 < AAA_awright> How would I go about byte-level locking in files? Both shared and exclusive locks?
09:39 < youjelly> I want to make something like this, I have a processes that write to unique named pipes, and I want to get that data being written on those named pipes on my browser by specifying the name of the pipe
09:39 < youjelly> would dnode be a good option
09:40 < youjelly> anyone point me in the right direction
09:40 < youjelly> ??
09:43 < ningu> youjelly: so the browser would connect to a node server which reads from the pipes?
09:44 < youjelly> yes
09:44 < ningu> youjelly: it sounds like a pretty good job for dnode or socket.io
09:44 < youjelly> and I'll specify the name of the pipe in the browser
09:44 < ningu> oh, as part of the url?
09:44 < youjelly> yes or through a combobox
09:45 < youjelly> on the page that gets displayed
09:45 < ningu> and what is displaying the page?
09:45 < ningu> i.e. what are you using?
09:45 < youjelly> nginx
09:45 < youjelly> php
09:45 < ningu> oh, umm... I don't really understand, it would generate the url with javascript or whatever and tell the client's browser to connect to it?
09:46 < youjelly> no, lets say I go to this page www.someip.com/realtimeviewer
09:46 < youjelly> then I enter a pipe name
09:47 < youjelly> and it connects to nodejs listening on that pie and starts redirecting that output on the webpage
09:48 < youjelly> I can start the nodejs process either at the time the request is made or when I create the pipe, in my perl script
09:48 < ningu> ok
09:49 < ningu> well, it does sound like something dnode could do
09:49 < ningu> but I've never used it really
09:49 < youjelly> P.S I'm totally new to node.js and its plugins, just found out about dnode 15 mins ago
09:50 < ningu> aren't there ports of the dnode prototcol for other languages, too? is that the idea?
09:52 < youjelly> maybe I'm over-engineering this, do I really need to use node.js
09:53 < youjelly> I mean if I'm writing to a named pipe, can't I just read it in php and update the page in realtime
09:53 < leichtgewicht_> To follow up on my former question for the log: I tested now node-expat, xml2js, elementtree, node-xml, node-o3-xml, libxmljs, libxmljs-easy, dom-js and xmldom and I ended up using xmldom because even though its the least comfortable to work with I was able to read a file and write a file without a loss of formatting.
09:54 < ningu> youjelly: I don't know what you're trying to do
09:54 < ningu> dnode would give you more control 
09:54 < ningu> but it might be too much like you said
09:54 < youjelly> I'm trying to give the user access to all the info being written on a named pipe
09:54 < youjelly> in real time
09:55 < faceleg> OMFG
09:55 < faceleg> I was debugging this thing in C++
09:55 < faceleg> and just now realised it isn't working b/c process.exit() immediately after calling async function
09:55 < ningu> hehe
09:55 < faceleg> call asuync function, befor enext tick, process.exit
09:55 < faceleg> fail
09:56 < faceleg> for a function that creates an event and then emits on that event inside internal callbacks
09:56 < ningu> well last night I was so tired I tried the command "gut pull"
09:56 < faceleg> should I wrap said callbacks in process.nextTick? to ensure that the events are not emitted before the user was able to bind to them?
09:57 < ningu> faceleg: not sure what best practice is for that
09:57 < ningu> I've never dealt with it
09:57 < ningu> I'm curious to know though
09:57 < faceleg> ningu: netierh, and funny I recall us discussing it with that other person earlier today
09:58 < faceleg> 2neither*
09:59 < metal55> Hello
10:00 < geNAZt> hi
10:00 < metal55> geNAZt:  Just showing someone IRC :)
10:01 < faceleg> hope they enjoyed it
10:01 < faceleg> ningu: how do I convert a char to a string?
10:01 < faceleg> just char
10:02 < geNAZt> in which language ?
10:02 < faceleg> c++
10:02 < ningu> faceleg: just pass a pointer to the constructor and specify length as 1
10:03 < ningu> at least, I assume that would work
10:03 < faceleg> the constructor?
10:03 < ningu> there should be a variant of the std::string constructor that takes a length
10:03 < faceleg> std::string(char, 1)
10:04 < ningu> faceleg: no, a pointer to it
10:04 < ningu> std::string(&c, 1)
10:04 < faceleg> *char?
10:04 < faceleg> oh 
10:04 < faceleg> that was going to be my second guess ;P{
10:04 < faceleg> wtf face is that
10:04 < ningu> & creates a pointer, * dereferences it
10:04 < faceleg>  might get that tattooed on my hand
10:05 < ningu> hehe
10:05 < ningu> well it doesn't help that the symbols are used in other ways too, like references in C++ or * to indicate a pointer type
10:05 < ningu> but in terms of unary operators that's what they are
10:06 < faceleg> ningu: actually it seems I need co convert char to const char*
10:06 < faceleg> or should I go char -> std::string -> str.c_str
10:06 < faceleg> why not convert it to an int while we're at it
10:06 < ningu> oh
10:07 < ningu> const char* foo = malloc(sizeof(char) * 2); strcpy(foo, &c);
10:07 < ningu> you need an extra one for the null termination
10:08 < geNAZt> why you alloc twice the charsize ?
10:08 < ningu> faceleg: sorry, strncpy not strcpy
10:08 < geNAZt> oh i know its a single char sry
10:08 < faceleg> ningu: jeez I was going to say
10:09 < ningu> strncpy(foo, &c, 1);
10:09 < faceleg> good thing you noticed first
10:09 < faceleg> const char* lineOrigin = malloc(sizeof(char) * 2);
10:09 < faceleg> cannot initialize a variable of type 'const char *' with an rvalue of type 'void *'
10:10 < ningu> yeah, just cast it
10:10 < ningu> I was being sloppy
10:10 < ningu> const char* lineOrigin = (const char*)malloc(sizeof(char) * 2);
10:10 < faceleg> cannot initialize a variable of type 'const char *' with an rvalue of type 'void *'
10:10 < faceleg> oops
10:10 < faceleg> up enter fail
10:10 < ningu> hehe
10:10 < faceleg> note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
10:10 < faceleg> strncpy(lineOrigin, &rawContent->lineOrigin, 1);
10:11 < ningu> blah
10:11 < ningu> just take off the const then
10:11 < ningu> it should be ok
10:12 < faceleg> mmm
10:12 < faceleg> that works thanks
10:12 < faceleg> but my chars are coming through as garbage
10:12 < ningu> hmm
10:12 < faceleg> ningu: they are supposed to be one of: https://github.com/libgit2/libgit2/blob/HEAD/include/git2/diff.h#L335
10:12 < ningu> and you're sure rawContent->lineOrigin is a char, not a char*?
10:13 < faceleg> no I'm not I'll check
10:13 < faceleg> pretty sure
10:13 < faceleg> as in
10:13 < faceleg> there are no * or & anywhere near them
10:13 < somethingnew> Hello. Is there a painless way to include already written JS file inside node for Jasmine testing ? Now I use require which doesn't even load my files
10:14 < ningu> faceleg: where is the struct defined?
10:14 < faceleg> hastebinning
10:15 < faceleg> ningu: http://hastebin.com/kumukivixa.cpp
10:15 < ningu> if you are in doubt you can printf it
10:15 < ningu> I mean the lineOrigin char
10:15 < ningu> before you copy it
10:15 < faceleg> ningu: http://hastebin.com/sikomamixe.cpp
10:15 < ningu> faceleg: also it should be git_diff_line_t lineOrigin;
10:16 < ningu> if that's really its only possible value
10:16 < faceleg> yeah it is only possible
10:16 < faceleg> isn't git_diff_line_t just a char though?
10:16 < ningu> probably
10:17 < faceleg> yeah they're coming through OK with printf before being copied to my struct
10:17 < faceleg> an in the func definition they're char
10:17 < faceleg> char line_origin
10:17 < ningu> yeah, well it probably doesn't matter
10:17 < ningu> that's not the issue
10:18 < faceleg> they print OK after copy as well
10:19 < ningu> yeah, I was going to ask you about that next
10:19 < ningu> so printf("%s\n", lineOrigin) or whatever
10:19 < faceleg> not htat failes
10:19 < faceleg> fails*
10:19 < ningu> that's what gives garbage?
10:19 < faceleg> I meant in the func that gets the line_origin, and copies it to the struct
10:19 < dsirijus> have an issue installing node-gyp. says there's no binding.gyp. now, i know they're saying something on the github page about it, but i have no clue what that file is for
10:19 < faceleg> the part converting it to char* gives garbage
10:20 < ningu> faceleg: could you hastebin the code with malloc and strncpy?
10:20 < ningu> and did you try printf on the char* after the strncpy to check it?
10:20 < faceleg> ningu: http://hastebin.com/fenimesugu.cpp
10:20 < faceleg> yes that is where it becomes garbage
10:21 < ningu> you know this malloc business is silly anyway, it's two characters
10:21 < ningu> just do char lineOrigin[2];
10:21 < faceleg> do it where?
10:22 < ningu> instead of the malloc line
10:22 < faceleg> ok
10:22 < faceleg> not char* lineOrigin[2]?
10:22 < ningu> no
10:22 < faceleg> well I'll be damned
10:22 < faceleg> that works
10:22 < faceleg> WHY NINGU WHY
10:22 < ningu> good question
10:23 < ningu> not really sure
10:23 < ningu> but you don't need the malloc anyway, so...
10:24 < ningu> faceleg: on a different topic, have you used bootstrap?
10:24 < faceleg> so there is no one liner to convert char to char*?
10:25 < ningu> well you can just do &foo, but it won't work if the other side is expecting a null-termianated string
10:25 < ningu> terminated
10:25 < ningu> if you can specify the length of the buffer it's fine, like with strncpy
10:25 < ningu> I don't know what function you're calling and if it has an argument like that
10:27 < ningu> basically with C strings it reads in memory sequentially until it comes to a zero
10:28 < youjelly> ninegrid, I think I'll stick to php for now, basically in a while(true) loop and just displaying the content of the pipe using print
10:28 < ningu> youjelly: sounds like it would work
10:28 < faceleg> yes I've used bootstrap
10:28 < ningu> it looks to be worth using
10:29 < faceleg> I'm trying to copy the git_diff_line_t constants to char* for sending to JS the way we just did
10:29 < faceleg> but it's moaning
10:29 < faceleg> sooooo picky
10:29 < ningu> moaning about what?
10:30 < faceleg>  address expression must be an lvalue or a function designator
10:30 < ningu> faceleg: what's the line?
10:30 < faceleg> http://hastebin.com/najikoqivo.cpp
10:30 < faceleg> 3rd line 
10:32 < ningu> not really sure what to make of that
10:33 < faceleg> my code or the error?
10:33 < ningu> the error
10:33 < ningu> GIT_DIFF_LINE_CONTEXT is of type git_diff_line_t?
10:34 < faceleg> yeah
10:34 < faceleg> that one
10:34 < faceleg> https://github.com/libgit2/libgit2/blob/HEAD/include/git2/diff.h#L337
10:34 < faceleg> this line https://github.com/libgit2/libgit2/blob/HEAD/include/git2/diff.h#L363
10:34 < faceleg> is how I 'know' it's a char
10:34 < ningu> faceleg: I would just cast it as (char*)
10:34 < ningu> strncpy(_GIT_DIFF_LINE_CONTEXT, (char*)&GIT_DIFF_LINE_CONTEXT, 1);
10:35 < faceleg> same error: address expression must be an lvalue or a function designator
10:35 < faceleg> wait
10:35 < faceleg> yep
10:36 < faceleg> strncpy(_GIT_DIFF_LINE_CONTEXT, (char*)&GIT_DIFF_LINE_CONTEXT, 1);
10:36 < faceleg> with char _GIT_DIFF_LINE_CONTEXT[2];
10:37 < ningu> faceleg: yeah, I don't quite get it
10:38 < faceleg> mmm
10:38 < ningu> faceleg: what happens if you do _GIT_DIFF_LINE_CONTEXT[0] = GIT_DIFF_LINE_CONTEXT?
10:38 < ningu> just want to see if it compiles
10:38 < faceleg> amazingly 
10:38 < faceleg> I was about to try that
10:39 < faceleg> incredible right
10:39 < ningu> hehe
10:39 < faceleg> I mean serious
10:39 < faceleg> ...
10:39 < faceleg> compiles and runs
10:39 < ningu> well I dunno what strncpy's problem is
10:40 < faceleg> now copy-paste this 10 times
10:40 < ningu> I guess if you don't want to debug that you can just do that and, _GIT_DIFF_LINE_CONTEXT[1] = '\0';
10:40 < faceleg> yeah that's what I did
10:40 < faceleg> this is an open source project
10:40 < faceleg> now accepting pull requests
10:40 < ningu> :)
10:40  * faceleg rings bell
10:41 < faceleg> this can be some low hanging fruit
10:44 < ningu> why is bootstrap's compiled css and js in docs/? that's weird.
10:44 < faceleg> lol
10:44 < faceleg> bootstrap is all kinds of weird
10:44 < faceleg> best not to look to deeply into it
10:49 < ningu> faceleg: what was your experience with it?
10:52 < faceleg> it's ok
10:52 < faceleg> I've used it on two projects
10:52 < faceleg> the second I have modified it a bit with a theme and some custom work
10:52 < faceleg> doesn't look so bootstrappy
10:52 < faceleg> I used it first here: chinese-idiom-database.com
10:52 < faceleg> second on undisclosed project
10:53 < faceleg> it's good for me, a non-designy dev
10:53  * Sven_vB appears! (hi.)
10:53 < Sven_vB> so does it mean if i have a designer at hand, i should skip trying bootstrap?
10:54 < tuhoojabotti> no
10:54 < ningu> faceleg: yeah, that's more or less where I'm coming from
10:56 < Fredo33> hello all
10:56 < Bansku> hello
10:57 < Fredo33> need little help with child.spawn please
10:58 < Fredo33> HOW CAN I GET HELPED PLEASE ..?
10:59 < faceleg> Sven_vB: haha yep
11:04 < geNAZt> Fredo33, whats the problem ?
11:05 < faceleg> ningu: thanks for your help again, my git_diff_tree_to_tree works, now I just have to figure out wth the data it's giving me means heh
11:05 < Fredo33> i don't know how to get a JSON object from a PHP script being launched by a : child.spawn('php','myscript.php')
11:06 < Bansku> uh...
11:06 < faceleg> rewrite your php script to be in node
11:06 < faceleg> then delete php from your machine
11:06 < Fredo33> in my PHP script i use : fwrite($stdout, json_encode($array_of_objects));
11:06 < Fredo33> but i get a string
11:06 < ningu> faceleg: hehe cool
11:06 < faceleg> ningu: yeah it's great
11:07 < faceleg> ningu: I can FINALLY get back into my undisclosed project
11:07 < Fredo33> i use PHP because i need to connect Mysql
11:07 < ningu> Fredo33: there are plenty of docs on reading stdout from child processes
11:07 < faceleg> (after I deal with the issues raised on nodegit)
11:07 < ningu> Fredo33: it's a stream
11:07 < faceleg> ningu: http://hastebin.com/nobipogoja.text
11:07 < ningu> also, you can connect to mysql from node as well
11:07 < Bansku> Fredo33: you know, you can use mysql from node
11:08 < Fredo33> yes i know
11:08 < Fredo33> but would prefer integrating it with my existing project PHP 
11:09 < geNAZt> Fredo33, var phpChild = child.spawn('php', 'myscript.php');
11:09 < Fredo33> my pb : how to convert the resulting string (from my PHP stdout) to an array of object (JSON) so that i can send it back to the client socket
11:09 < ningu> Fredo33: phpChild.stdout.on('data') etc.
11:10 < ningu> Fredo33: read the streams docs
11:10 < geNAZt> var jsonString = ''; phpChild.stdout.on('data', function(data) { jsonString += data.toString(); }); phpChild.on('exit', function() { console.log(JSON.parse(jsonString)); });
11:10 < Fredo33> ningu > yes, done this
11:10 < Fredo33> but data is a base64 string
11:10 < ningu> Fredo33: new Buffer(data, 'base64').toString()?
11:13 < Fredo33> YESS ! THAKS VERY MUCH !
11:13 < Fredo33> => JSON.parse was the solution !
11:13 < Fredo33> thanks a lot all (geNAZt)
11:15 < Fredo33> was not sure that a buffer was necessary too... do you now what is the buufer max length of the data event ?
11:15 < geNAZt> i think there is no limit
11:16 < Fredo33> ok
11:17 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
11:22 < faceleg> how do I make node-gyp build with -Wsign-compare
11:22 < faceleg> ?
11:28 < geNAZt> does someone use the nodemailer module ?
11:31 < aus3ys> is there a blog that reviews latest node modules?
11:31 < geNAZt> npmjs.org
11:32 < geNAZt> a reviews. no i dont think so
11:41 < leichtgewicht_> aus3ys: Are you about to start one?
11:42 < aus3ys> nope, just interested if there is, so I can stay up to date... looping through npmjs js latest packages is booring...
11:44 < aus3ys> leichtgewicht_: you interested aswell?
11:45 < leichtgewicht_> aus3ys: Interested in staying up-to-date? Certainly ;)
11:45 < aus3ys> and how about to start one?
11:46 < aus3ys> looks like community is missing something like that
11:46 < aus3ys> or there any other solutions for that?
11:46 < aus3ys> are
11:46 < leichtgewicht_> Google? Maybe someone already started?
11:47 < aus3ys> nothing particular found..
11:48 < leichtgewicht_> A 3rd party review/rating system isn't a bad thing, imho. But it should have some weight. Not sure if my voice is worth a lot ;)
11:48 < RLa> aus3ys, dailyjs and weekly js sometimes cover node modules too, you should subscribe
11:49 < aus3ys> RLa: will do, thanks :)
11:49 < youjelly> http://meteor.com/screencast lol epic
11:54 < geNAZt> yes nice
11:54 < geNAZt> you dont need to hack anymore :D
11:55 < aus3ys> geNAZt: whats changed?
11:55 < geNAZt> ?
11:56 < RLa> geNAZt, i'm interested too
11:56 < Virunga> Hello.
11:57 < geNAZt> this screencast shows how u use the mongo api directly in the client
11:57 < RLa> couple of days ago i had weird dream while sleeping that i should write my all future apps in meteor
11:57 < geNAZt> so i can open the js console and destroy the database
11:57 < geNAZt> very nice and easliy made :D
11:57 < RLa> geNAZt, did they ditch their client side mongo layer?
11:57 <@Nexxy> lol
11:58 < RLa> or found better way how to duplicate original mongo api?
11:58 < geNAZt> well you dont give full access to the client
11:58 < geNAZt> thats the way
11:59 < geNAZt> http://docs.meteor.com/#collections
12:01 <@Nexxy> I love how 5 minutes into the screencast they haven't even mentioned that meteor runs on node
12:01 <@Nexxy> or that you can do all of this with existing modules and no silos
12:02  * Fruktkaka lols hard.
12:02 < Fruktkaka> meteor = fun? 
12:03 <@Nexxy> if you consider building demos fun
12:03 < Fruktkaka> yuh.
12:03 < Fruktkaka> Why should I use it?
12:03  * Fruktkaka likes node.js a lot.
12:03 <@Nexxy> ohhh
12:03 <@Nexxy> 8:14 in
12:03 <@Nexxy> they finally say "Node.js"
12:04  * Fruktkaka laughs to what Nexxy said.
12:06 < RLa> btw, do they still use fibers?
12:09 < leichtgewicht_> Nexxy: Where do you see the problem of Meteor in production?
12:10  * Fruktkaka is joining #meteor
12:13 < tuhoojabotti> Hmm, throwing an error inside a domain doesn't seem to trigger #error event
12:13 < ins0mnia> Nexxy: +1
12:14 <@Nexxy> leichtgewicht_, is it even capable of production yet?
12:16 < tuhoojabotti> oh wat, I wrote console not console.log
12:16 < tuhoojabotti> I need coffee
12:16 < leichtgewicht_> Nexxy: Well, if the stack is low enough there shouldn't be a difference between "production-environment" or "development-environment". However: http://docs.meteor.com/#deploying
12:32 < Fredo33_> does anybody know how to parallelize processes in a server side ode.js script ?
12:32 < Fredo33_> node.js sorry
12:35 < Fruktkaka> Fredo33_: I'd look at this? http://stackoverflow.com/questions/9497076/how-node-js-works
12:36 < Fruktkaka> Or perhaps this, Fredo33_ : http://stackoverflow.com/questions/11493996/everything-runs-in-parallel-except-your-code-wait-what
12:45 < eXeC001er> Hi. Does anyone use jshint?
12:46 < eXeC001er> Is it posible to drop 'XX symbols per line' rule for comments ?
12:46 < Morkel> Does anyone know a good Statistic gem for JS/Ruby. I can use R but i hate this language and Matlab is to expensive
12:49 < zot> is node-gyp intended to be used for also generating normal executables?  tried it, but it fails on a link error, "clang: error: invalid argument '-install_name @rpath/mock_test' only allowed with '-dynamiclib'"  (mac os)
13:01 <@isaacbw> Morkel: there's numpy for python
13:13 < abhinavmehta> looking for some tool , which can auto reload/refresh web-pages while writing them on fly…any suggestions for any such tool on OSx?
13:24 < karlwestin> abhinavmehta: did you check out grunt livereload: https://github.com/gruntjs/grunt-contrib-livereload
13:25 <@isaacbw> live.js works pretty well
13:25 <@isaacbw> assuming you're doing client-side work and you're allergic to the F5 button
13:28 < Brad_> I have a question about my node setup. I'm using nginx and node together but trying to get the demo webrtc project to work and it's having an issue with websockets. Do I need to add something in my nginx config to proxy the ports?
13:32 <@isaacbw> nginx doesn't support web sockets as a proxy
13:33 <@isaacbw> at least there's not a stable release
13:33 < teadict> who's using Vagrant?
13:33 < teadict> can't freaking get to my geddy server
13:35 < Brad_> isaacbw what would be a good solution for this? I'm currently running nginx because I have apache on one ip and was hoping to use my other ip for node projects.
13:37 < teadict> is this true? https://groups.google.com/forum/?fromgroups=#!topic/vagrant-up/ocTmSGknx9o
13:37 < teadict> ouch, w/w
13:37 <@isaacbw> you could use node-http-proxy or check out the latest nginx trunk and see if it's usable assuming you don't need this for production
13:37 <@isaacbw> ^^ Brad_ 
13:39 < kornnflake> what would you use to run a task every midnight?
13:39 < kornnflake> cronjob?
13:39 <@isaacbw> something like that
13:41 < Brad_> I will look at node http proxy
13:41 < Brad_> Thanks issacbw
13:42 < teadict> no one uses Vagrant for node? 
13:46 < MI6> joyent/node: Ben Noordhuis v0.10 * 808b7ad : doc: fix broken links in blog footer  The blog lives at blog.nodejs.org w - http://git.io/jFKlmg
13:46 < Virunga> teadict: i did.
13:47 < teadict> Virunga: I created a geddy app running on 4000 but can't see it from host
13:48 < teadict> Virunga: tried port forwarding in the Vagrantfile but didn't quite work...
13:48 < teadict> Virunga: did you stumbled upon that?
13:49 < Virunga> teadict: you should ask on #vagrant but, check you didn't swap the ports in the configuration or if another service is at that same door
13:50 < teadict> Virunga: thank you, will do
13:51 < Virunga> I did that once.. Otherwise i've never had problems like that related to vagrant
13:51 < Sawbones> Good morning! :D
13:51 < Virunga> Hi
13:52 < Virunga> teadict: are you sure you can reach the vm? Ping it
13:53 < Virunga> oh, never mind
13:53 < teadict> Virunga: I can yes, but hold it, 1.1 was JUST released; I'll update and then resume
14:03 < crawlobot> :)
14:03 < mscdex> don't crawl us!
14:04 < crawlobot> lol
14:08 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
14:11 < SomeoneWeird> Anyone know a good middleware module for static fileserving that has gzip and expire headers set?
14:11 < SomeoneWeird> apart from gzippo
14:13 < niggler> SomeoneWeird nginx?
14:13 < SomeoneWeird> ehhh
14:13 < SomeoneWeird> would rather not
14:14 < SomeoneWeird> gzippo works fine except I can't get the expire headers working
14:22 < matjas> Feature request: add `process.{stdin,stdout,stderr}.isTerminal` (boolean) https://github.com/joyent/node/issues/5065 — feedback welcome
14:24 < bnoordhuis> matjas: already exists: process.std*.isTTY
14:26 < matjas> bnoordhuis: oh boy, i wish you were online last night when i asked here :(
14:26 < pachet> fastest fixes in the west
14:26 < pachet> in before you ask
14:27 < SomeoneWeird> "I would like to suggest adding a boolean property named isTerminal or isTTY to process.stdin"
14:27 < SomeoneWeird> you didn't try isTTY? :P
14:30 < GoddeR> where should I look to read more about how console.log works behind the scenes? when it is sent to logs how is it done? via write stream? 
14:31 < SomeoneWeird> GoddeR, how's it sent to logs?
14:31 < SomeoneWeird> console.log just writes to stdout
14:32 < matjas> SomeoneWeird: i was just typing away… this is embarrassing
14:32 < SomeoneWeird> matjas, quick close it before anyone notices! :P
14:33 < matjas> hahah
14:33 < matjas> I’ll just pretend I was trolling. That’s what everyone else does, right?
14:33 < GoddeR> hmmm 
14:34 < matjas> TBH I had read the `process` docs and expected such a property to be mentioned there
14:34 < Virunga> GoddeR: look the code: node/lib/util
14:38 < GoddeR> I'm working with forever on a ec2 instance, when i start a process and then run: forever logs   it never returns
14:39 < GoddeR> if i try to stop the instance it never returns...
14:39 < GoddeR> forever stop app.js
14:39 < GoddeR> heh
14:47 < ben_alman> WTB fix https://github.com/joyent/node/issues/4228
14:48 < pachet> 25g, im on org bank
14:48 < bradleymeck> ben_alman: do you need it asap?
14:48 < ben_alman> nope
14:49 < ben_alman> but it definitely impacts everyone i've seen on AD who has a non-admin primary user
14:49 < ben_alman> and has made getting people ready for trainings much more difficult than i'd have liked in the past
14:49 < SomeoneWeird> which is 0.00001% of users
14:49 < SomeoneWeird> hehe
14:49 < ben_alman> well
14:49 < ben_alman> in all my corporate trainings, it's a lot
14:49 < pachet> probably not in the wacky world of enterprise training
14:50 < ben_alman> it's just a bummer because the first thing these people experience with node.js is frustration and i want that to go away :)
14:50 < bradleymeck> let me take a look
14:51 < ben_alman> it's too bad winddoes paths can't be dynamic
14:51 < ben_alman> like specifying %APPDATA%\npm
14:51 < ben_alman> derp
14:52 < SomeoneWeird> wat
14:53 < ben_alman> can an app, when it installs and modifies the path put env vars in there, or do the vars have to be expanded first
14:54 < bradleymeck> ben_alman: expanded, sec im reading making sure its just npm modules, and thinking about stuff for a sec
14:54 < ben_alman> right, figured as much
14:54 < ben_alman> afaict there are a handful of AD-related path issues in the node tracker
14:57 < bradleymeck> ben_alman: AD is painful at best to define proper behavior
14:57 < ben_alman> bummer
14:58 < ben_alman> when the node installer sets the path
14:58 < ben_alman> can the path that's set be per-user
14:58 < ben_alman> or does it just define it for the current user that's installing node
14:58 < bradleymeck> ben_alman: unsure, but on glance it looks like just current user
14:59 < ben_alman> so, like, there's a primary user (non admin) who then uses the admin user (run as administrator?) to install node. then after that's done, they go back to the primary user to run it
14:59 < kenperkins> ugh
14:59 < ben_alman> but the guy the other day also tried to open cmd.exe as administrator and it still didn't work
15:00 < ben_alman> i mean, what it seems like is that the node_modules path where things are getting installed is simply different than the path that's being set
15:00 < ben_alman> so at the very least, they should be the same path, right?
15:00 < SomeoneWeird> environment vars for windows are for the session not for the program, afaik
15:00 < bradleymeck> entirely possible, im reading. as for same path, it should match the current user and if that differs in the access token its a bad time
15:01 < ben_alman> gotcha
15:01 < ben_alman> what's weird is the installer sets the path to be one thing, and then after install is done, no matter what the user tries, every install goes into a different path than what the installer set the path to be
15:02 < bradleymeck> almost never touch windows its going to take me a bit, but ill look some more later
15:02 < ben_alman> well, thanks
15:02 < ben_alman> it would be awesome if someone who knew a little about AD could help
15:03 < ben_alman> i definitely don't know anything about AD
15:03 < kenperkins> ugh, my least favorite words. "Active Directory"
15:03 < bradleymeck> need to try and make a repro at home
15:03 < kenperkins> that said, I run 4 windows servers at home :D
15:04 < bradleymeck> kenperkins: to run how many apps? (i rarely have fewer than 3 if it is a real app [even a single one :( ])
15:04 < bradleymeck> but that may be due to living with a windows IT guy
15:05 < kenperkins> bradleymeck: well, I run 2 DCs, mostly because I was dicking around and wanted to learn replication, etc. I have an IIS box, and an MSSQL box.
15:05 < kenperkins> bradleymeck: mostly for prototyping and local testing environments
15:05 < kenperkins> I moonlight running a few C# based projects
15:05 < kenperkins> from my MSFT days
15:07 < kenperkins> which now feels like ancient history
15:10 < bradleymeck> kenperkins: the async keyword is something that would be rather nice for JS I feel at times /shrug
15:10 < kenperkins> Is that being floated for ECMAScript future version?
15:11 < kenperkins> (or something similar)
15:11 < bradleymeck> absolutely not, but single frame yield is
15:11 < kenperkins> maybe that's what I was thinking of
15:17 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:19 < Domenic_> async/await is quite probably coming in ES7; it's floated, definitely.
15:19 < Domenic_> the plan is to experiment with `yield` in the ES6 timeframe and see what people converge around, then perhaps build `async`/`await` from there.
15:20 < pachet> do you have a link to any proposal for async?
15:20 < youjelly> async await in winrt is pretty cool
15:21 < Domenic_> pachet: this is a very old one: http://wiki.ecmascript.org/doku.php?id=strawman:deferred_functions&s=async
15:21 < pachet> Domenic_: yeah i just found that
15:21 < Domenic_> but more recent thinking hasn't been captured in the wiki, just in discussions. Because TC39 is buckling down on finalizing ES6 these days so there's not a lot of bandwidth for speculating about ES7 proposals.
15:22 < pachet> understandable
15:22 < bradleymeck> Domenic_ is the voice of a generation it feel like when talking about es-discuss
15:23 < kenperkins> Domenic_: what's the best way to follow discussion on the ES specs?
15:23 < Domenic_> kenperkins: following @esdiscuss on Twitter is a good start
15:23 < Domenic_> And read the minutes obsessively (new ones will be released today, according to rwaldron!)
15:24 < kenperkins> how often does the group meet?
15:25 < Domenic_> A lot of it is just absorbing over time. Many of the things discussed on es-discuss or in the minutes are hard to follow unless you've been reading for months and have the necessary background. E.g. why do they care so much about proxies and private symbols, what exactly is a private symbol, why do some people say "quasis" and some "template strings", ...
15:25 < Domenic_> I want to create a new version of the proposals wiki that is not full of outdated confusing things. There's a start at http://tc39wiki.calculist.org/ but the author of that doesn't have time to maintain it.
15:26 < Domenic_> kenperkins: once a month, face to face, but there's tons of discussion in the meantime.
15:27 < mrvisser> Hi all, I was wondering about how to shut down a nodejs process gracefully. I've read quite a few articles online and some code samples, but there are still lingering questions
15:27 < kenperkins> Domenic_: thanks! I need to follow the community more in my new job :)
15:27 < mrvisser> for example, I have read that when a nodejs process event queue has run out of things to do, the process exits. I think that is a good thing, yet almost every code sample that is "shutting down nodejs gracefully" is executing a process.exit()
15:28 < mrvisser> is this not dangerous, as there is potentially code still running that needs to complete before forcing the process to exit?
15:31 < freewil> mrvisser, if there is anything you're worried about being interrupted then you can handle a SIGINT for example before exiting http://nodejs.org/api/process.html#process_signal_events
15:32 < mrvisser> freewil: right, the examples I have read are based around express. So what they do is handle the sigint, close express, and then execute process.exit()
15:33 < mrvisser> but I'm curious as to why process.exit() needs to be executed if the process is going to exit when there is nothing left in the queue..
15:34 < freewil> i'm not sure, if you stop express from listening and there isnt anything else going on then you shouldnt need to
15:35 < rwaldron> Domenic_ I'm actually working on them now
15:35 < Domenic_> rwaldron: ^_^
15:44 < daurnimator> is it possible to provide a version of >=#somecommithash
15:45 < pachet> Domenic_: are promises on track for es7? if so, do they look to adhere to promises/a+?
15:48 < Domenic_> pachet: "on track" might be too strong, but there is movement in that direction from several committee members. And yes, I've managed to push them into Promises/A+ compliance so far. See http://lists.w3.org/Archives/Public/public-script-coord/2013JanMar/0200.html and especially the reply from Mark Miller.
15:51 < tuhoojabotti> How does process.title work on Windos?
15:51 < tuhoojabotti> Where should I see it
15:55 < tkellen> Does anyone know if there is going to be an official response to https://github.com/isaacs/npm/issues/2907 ?
15:55 < Criten> Hey Guys! Just starting out with node.js so I decided to write a little MVC framework... currently I have the routing mostly working from the URIs just wondering if anyone could do a quite code review to see if i could be doing it any better. (structure, etc) https://github.com/Criten/arknode
15:56 < Criten> quick*...
15:57 < bnoordhuis> tuhoojabotti: process.title sets the console title on windows
15:57 < tuhoojabotti> oh I see
15:58 < tuhoojabotti> That's pretty useless when running a child process
15:58 < tuhoojabotti> unless I start it in a new console
15:58 < mscdex> tuhoojabotti: Windows is different than *nix
15:58 < mscdex> ;-)
15:58 < tuhoojabotti> mscdex: Really, you think so
15:59 < mscdex> i do! i really do!
15:59 < rwaldron> Domenic_ if you want to get a jump on the notes, I just pushed them https://github.com/rwldrn/tc39-notes/tree/master/es6/2013-03
15:59 < rwaldron> I still need to send to the ML, ECMA and post the links on the wiki
16:00 < rwaldron> which will happen in reverse order
16:00 < Domenic_> rwaldron: w00t, thank you :D
16:03 < rwaldron> Domenic_ the most important thing for this channel...
16:03 < rwaldron> https://github.com/rwldrn/tc39-notes/blob/master/es6/2013-03/mar-12.md#use-case-single-export-modules
16:04 < rwaldron> DH: Can, should do better. Goal: Simple syntactic sugar. It's important, we will address it and we will do so with syntactic sugar. We will create a means by providing an "anonymous export". We will review the "sugar" at the next face-to-face meeting.
16:04 < pachet> Domenic_: cool, thanks for the link
16:05 < pachet> Domenic_: last question. is the idea of 'interactive' promises still circulating? im interested in the utility that .get and .call provide but it doesnt seem like there's much movement there
16:06 < Domenic_> pachet: I think so, but I'm not sure. It's probably important for Mark Miller's use cases, see http://wiki.ecmascript.org/doku.php?id=strawman:concurrency. And it's certainly manifest in Q and Q-Connection.
16:08 < rwaldron> Domenic_ published to es-discuss if you want to send out some tweets
16:13 < euoia> tkellen: I experienced that issue too.
16:13 < Germanaz0> nodejs rules
16:20 < euoia> rwaldron: those discussions are very interesting!
16:21 < fotoflo> hrmmmrm - i have an object a with an array b of array C's in it.  I want to iterate through the C's, make an asynchronous call to mongoose, and modify the object in that innermost callback….  been stuck on this for over an hour....
16:22 < fotoflo> any suggestions of the right combo of Array.forEach and async.forEach / other tools?
16:22 < euoia> fotoflo: post a snippet?
16:22 < euoia> and what's the problem? how is it not working?
16:23 < fotoflo> euroia: at this point I've tried quite a few things, and backpedaling to the most complicated thing i tried
16:23 < fotoflo> ...
16:24 < fotoflo> jsfiddling
16:25 < fotoflo> Ok, there may be some bracket issues here, but plz ignore them and just look at the conceptual handling of callbacks
16:25 < fotoflo> http://jsfiddle.net/xbhqk/
16:26 < fotoflo> whoops, this looks worng
16:26 < fotoflo> http://jsfiddle.net/xbhqk/1/
16:26 < fotoflo> was missing a line...
16:27 < SomeoneWeird> fotoflo, you need to have like
16:27 < SomeoneWeird> "function(channel, callback)"
16:27 < SomeoneWeird> instead of just "function(channel) {"
16:28 < fotoflo> hrmm, i think i tried to do that
16:28 < SomeoneWeird> and you need to name the callbacks different things
16:28 < fotoflo> interesting
16:28 < fotoflo> didn't try that
16:28 < fotoflo> but biggest the problem i ran into is that i could no longer write to variables one level up in the object
16:29 < SomeoneWeird> you need to store the data in a seperate var
16:30 < fotoflo> SomeoneWeird: but even then, it will be out of scope if I'm in a callback, no?
16:30 < SomeoneWeird> no
16:30 < SomeoneWeird> it's because "channel" is being overwritten each time the callback is fired
16:30 < fotoflo> so if i create a var on line6 i can push everything in there?
16:30 < SomeoneWeird> yeah
16:31 < fotoflo> okie
16:31 < fotoflo> ill give that a shot
16:31 < SomeoneWeird> change what you have to "var debugger;" too
16:31 < fotoflo> SomeoneWeird:  huh? why?
16:31 < fotoflo> its for the inspector
16:31 < SomeoneWeird> because that's creating a global variable
16:31 < fotoflo> not a variable
16:31 < SomeoneWeird> oh
16:31 < SomeoneWeird> ok
16:32 < SomeoneWeird> (impossible to tell you were using an inspector :P)
16:32 < fotoflo_> :-)
16:32 < fotoflo_> thx
16:32 < fotoflo_> ill give that a shot
16:34 < fotoflo_> SomeoneWeird: erhmm, this is strange
16:34 < fotoflo_> SomeoneWeird: So i have to copy each element in each array or object into that new one individually?
16:35 < SomeoneWeird> huh
16:35 < SomeoneWeird> var response; on line 6, etc
16:35 < SomeoneWeird> then change line 16 to
16:36 < SomeoneWeird> if(!response[channel]) response[channel] = {};
16:36 < SomeoneWeird> response[channel].playlists = playlists;
16:36 < SomeoneWeird> or something, i have no idea how your data is set ou
16:36 < SomeoneWeird> tt
16:36 < fotoflo> http://jsfiddle.net/xbhqk/2/
16:38 < SomeoneWeird> yes but categoryCallback needs to go in the final callback for the channel forEach
16:38 < tuhoojabotti> isaacbw: https://travis-ci.org/jslush/node-irc-stream/builds/5598829 This looks like an old bug, I thought I fixed it with "0.10"...
16:39 < fotoflo> SomeoneWeird: the final callback?   
16:39 < SomeoneWeird> http://jsfiddle.net/xbhqk/3/
16:41 < fotoflo> thanks
16:41 < fotoflo> giving it whirl
16:46 < fotoflo> SomeoneWeird: Sorry, i guess I'm kind of dim (and its 1:40 am here…)  http://jsfiddle.net/xbhqk/4/   line 18 is crashing because categories is undefined.   You were saying i have to basically duplicate the whole data structure by copying everything out into myCategories(line 7) individually?
16:49 < fotoflo> verystrange
16:50 < fotoflo> SomeoneWeird: errm i think its going to work actually…. 
16:51 < Brad_> I have a question when you rename a folder and set it to a folder that doesn't exist what does linux do with that folder?
16:52 < SomeoneWeird> Brad_, huh
16:52 < geNAZt> it creates it
16:52 < geNAZt> so if you rename fodler a to folder b and b isnt there linux makes one
16:52 < geNAZt> and moves the a to b
16:53 < Brad_> Here is my example:     rm -r webrtc.io-clickstart so
16:53 < geNAZt> thats not rename
16:53 < geNAZt> its remove
16:53 < geNAZt> :D
16:53 < Brad_> hahah
16:53 < Brad_> ok cool
16:53 < willwh> trolling?
16:53 < geNAZt> mv => move
16:53 < geNAZt> rm => remove
16:54 < SomeoneWeird> wat
16:54 < daekano> rm -rf /
16:54 < Brad_> I need to write better notes I have no idea why I have been using rm to try and rename folders
16:54 < daekano> don't do that ^
16:54 < geNAZt> rm -rf / doesnt work anymore
16:54 < daekano> on what?
16:54 < daekano> ubuntu?
16:54 < geNAZt> on anything
16:54 < daekano> awe
16:54 < geNAZt> you get a warning
16:54 < willwh> daekano: why would you say that anyway?
16:55 < daekano> ubuntu is the one distro it -should- do something on
16:55 < willwh> that is brutal
16:55 < willwh> :p
16:55 < geNAZt> that you should add a "are you sure about this" switch
16:55 < Sly> Oh lawd.
16:55 < addisonj> (wonders why this is being discussed in node.js chat...)
16:55 < Sly> The Ubuntu hate.
16:55 < willwh> debian ftw
16:55 < Sly> addisonj: because this channel isn't limited to just Node? We do have random conversations sometimes. O_o;
16:55 < willwh> don't hate -> just love what you use :)
16:56 < geNAZt> debian on servers, ubuntu (xfce) on desktop
16:56 < fotoflo> I'm going to die of async hate
16:56 < geNAZt> cause debian sucks balls with a desktop
16:56 < geNAZt> :D
16:56 < matbee> whaatttT?
16:56 < willwh> yeah that is an odd statement
16:56 < willwh> you use xfce on ubuntu - but debian with xfce would suck?
16:56 < geNAZt> well i tried to use the debian + xfce disc
16:56 < willwh> does not compute
16:56  * matbee slaps geNAZt
16:57 < geNAZt> it fails on so many packages with an x64 system
16:57 < geNAZt> (no icons in app menues, wrong languages)
16:57 < geNAZt> and the amdccc doesnt work on debian x64
16:58 < geNAZt> i use xfce with ubuntu cause the distro (xubuntu) works
16:58 < geNAZt> i install it and everything runs
16:58 -!- mode/#Node.js [+o indutny] by ChanServ
16:58 <@indutny> tadam
16:59 <@indutny> its been almost 6 months since I've appeared here last time
16:59 <@indutny> anything new?
16:59 < bnoordhuis> a lot of talk about this newfangled nodejs thing
16:59 <@indutny> aha
16:59 < bnoordhuis> javascript on the server. what will these kids think of next?
17:00 <@indutny> C++ optimization tips from facebook https://www.facebook.com/notes/facebook-engineering/three-optimization-tips-for-c/10151361643253920
17:00 < geNAZt> async vb.net on linux :D
17:01 < reactormonk> geNAZt, now we just have to figure out if that's worse or better than JS
17:01 < geNAZt> worse
17:01 < geNAZt> much worse :D
17:04 < DarkArgon> any1 using cloud9? i did a "npm -g update" and now my npm is trash
17:05 < geNAZt> and now you want a new vm ?
17:05 < geNAZt> you need to log off
17:05 < geNAZt> and wait
17:05 < DarkArgon> me?
17:05 < geNAZt> yes
17:06 < geNAZt> if you can develop without npm and you need it
17:06 < geNAZt> you cant reset the vm (if i am right)
17:06 < geNAZt> so the only way is to completly log off from cloud9 and log back in and hope that you get a new vm
17:07 < DarkArgon> no way to fix npm manually?
17:07 < geNAZt> you could download the installer
17:07 < geNAZt> but i dont think you have wget on cloud9 vms
17:07 < DarkArgon> wget does work
17:08 < geNAZt> do you have curl ?
17:08 < geNAZt> curl https://npmjs.org/install.sh | sh
17:08 < geNAZt> would install a new npm
17:09 < geNAZt> or you wget it first and execute it after
17:09 < DarkArgon> i'll try it in a few minutes
17:09 < DarkArgon> i'm compiling node on c9 right now ..
17:10 < DarkArgon> thought that might work
17:10 < reactormonk> one day, I'm going to write some botnet that hijacks webproxies and injects malware into downloaded *.sh scripts
17:10 < geNAZt> you compile something in the cloud9 vm
17:10 < geNAZt> well we speak again tomorrow :D
17:11 < DarkArgon> i'm not crazy ^^ - ok maybe a bit
17:14 < DarkArgon> geNAZt, if i try to install npm i get tons of Cannot open: No such file or directory 
17:14 < geNAZt> well then you dont have enough rights on the vm
17:15 < geNAZt> do you have tar on cloud9 ?
17:15 < geNAZt> and write access to the npm folder ?
17:15 < DarkArgon> tar - yes
17:16 < DarkArgon> npm folder - i don't know where it is located in c9
17:16 < geNAZt> which npm
17:16 < geNAZt> should show you
17:16 < DarkArgon> bash: /var/lib/stickshift/f2698dfd0e5e4fb0a9ce76b710bfbfc2/app-root/data/bin/npm: No such file or directory
17:16 < geNAZt> ok
17:17 < geNAZt> you have a nodejs installed on your computer ?
17:17 < geNAZt> in it there is a npm 
17:17 < DarkArgon> sure
17:17 < DarkArgon> yep
17:17 < geNAZt> tar it, open a webserver from your ip, wget it in cloud9, untar it, mv it to the npm dir
17:19 < SandorKrasna> Hello everyone
17:19 < geNAZt> hi
17:19 < SandorKrasna> I'm trying to fetch a json file using the request node module
17:20 < SandorKrasna> it works when im not calling it from the io.sockets.on function
17:20 < DarkArgon> is npm compatible to older node versions?
17:20 < geNAZt> more or less yes
17:20 < geNAZt> :D
17:20 < geNAZt> it should work
17:21 < SandorKrasna> has anyone used the request module ?
17:21 < geNAZt> yes
17:21 < SandorKrasna> does it work for you when you call from a socket.on event
17:21 < gildean> SandorKrasna: it's prolly one of the most used modules, so yeah, most of us prolly have used it
17:22 < SandorKrasna> I must be missing something because when I do a request inside socket.on the success never fires
17:22 < gildean> SandorKrasna: can you share the code you're trying to run?
17:22 < SandorKrasna> yes
17:24 < SandorKrasna> http://pastebin.com/89fK6JSE
17:25 < SandorKrasna> so look for the videoended socket.on
17:25 < SandorKrasna> i do a requestjson inside that never succeeds but the previous two requestjson does work at the top of the code
17:28 < gildean> SandorKrasna: if you mean at line 76, it seems you're not doing anything with the response or the body, only console.logging the error which should be null or undefined if it's working properly
17:29 < SandorKrasna> yes none of that fires
17:29 < SandorKrasna> it never succeeds
17:29 < SandorKrasna> i am unable to execute everything inside that function
17:30 < SandorKrasna> or anything event
17:34 < Criten> q
17:34 < larpzeit_> r
17:34 < Criten> ...stupid quit reflexes haha
17:34 < Criten> tried doing :q 
17:34 < SandorKrasna> :x
17:36 < SandorKrasna> is there a way to see why the response is failing for the request module
17:40 < euoia> SandorKrasna: So you see the "in else block" logging, but you never see the "new fetch" ?
17:41 < SandorKrasna> yes thats correct
17:43 < euoia> SandorKrasna: looks like you may be able to set an environment variable called NODE_DEBUG to get some logging
17:44 < euoia> SandorKrasna: try running export NODE_DEBUG=request and then starting your app
17:44 < euoia> SandorKrasna: I am just looking at the source here: https://github.com/mikeal/request/blob/master/index.js#l50
17:46 < SandorKrasna> " export NODE_DEBUG=request; "
17:46 < SandorKrasna> ?
17:47 < euoia> SandorKrasna: I mean - at the command line... I assume you are on linux?
17:48 < SandorKrasna> ok cool
17:48 < SandorKrasna> yea
17:48 < SandorKrasna> one sec
17:50 < kenperkins> whos's going to nodeconf?
17:55 < SandorKrasna> I am not seeing anything different when I enable the DEBUG
17:56 < SandorKrasna> so the question remains how come the success function never fires in the socket.on function
18:01 < kenperkins> are people doing the b&b thing with nodeconf, or the bunk bed thing
18:01 < SandorKrasna> allnighter
18:02 < euoia> SandorKrasna: with NODE_DEBUG=request set as an environment variable I get additional logging
18:03 < euoia> SandorKrasna: tons of it in fact
18:04 < SandorKrasna> how do you set the environment var
18:04 < euoia> at the command line, type export NODE_DEBUG=request
18:04 < SandorKrasna> oh yea, I'm doing that
18:04 < euoia> then from the same shell run node
18:04 < khismetix> What to I need to install to get this running ? https://gist.github.com/jeffkreeftmeijer/488562
18:05 < khismetix> newbie to node.js
18:05 < SandorKrasna> REQUEST { url: 'http://11.40.48.11/playlist',
18:05 < SandorKrasna>   json: true,
18:05 < SandorKrasna>   callback: [Function] }
18:05 < SandorKrasna> thats all I see
18:06 < euoia> SandorKrasna: so you do get the additional logging... You see that for every request?
18:06 < SandorKrasna> yep
18:06 < SandorKrasna> i do
18:06 < SandorKrasna> event for the one that never succeeds
18:07 < SandorKrasna> i am using version request@2.14.0 extraneous 
18:08 < euoia> SandorKrasna: I suppose the first thing is to try updating to the latest
18:11 < DarkArgon> geNAZt, do you know how long it usually takes to reset the vm? i can't get it fixed
18:11 < SandorKrasna> I believe i have the latest
18:12 < euoia> SandorKrasna: I just did npm install request and got 2.16.2
18:12 < ljharb> isaacbw: did the http.incomingMessage constructor change in node 0.10? i can't find anything about it in the docs
18:13 < SandorKrasna> ok for some reason npm update didnt update that 
18:13 < SandorKrasna> i just re-installed 
18:13 < khismetix> I am getting a "cannot find module" error.. some googling tells me it is something to do with where I have modules installed ??
18:14 < euoia> khismetix: have you installed the module?
18:14 < SandorKrasna> I am getting tons of REQUEST debugging going on
18:14 < khismetix> euoia : new to node.js
18:14 < khismetix> euoia : the code depends on a websocket module.. I tried both npm-install with and without -g
18:14 < SandorKrasna> but for the request that is not succeeding is still not succeeding and the debug code is short, same as before
18:15 < euoia> khismetix: did you try just running 'npm install' in the root of code directory?
18:15 < khismetix> I believe I did
18:15 < euoia> SandorKrasna: any idea what's happening on the server side?
18:16 < euoia> SandorKrasna: is it possible that the server is simply not responding?
18:16 < euoia> SandorKrasna: or just taking a long time to respond
18:16 < euoia> SandorKrasna: I mean, you could add a timeout
18:16 < SandorKrasna> the server responds fine if im not calling the request from inside socket.on
18:16 < khismetix> euoia : here is the example I am playing with  https://github.com/miksago/node-websocket-server
18:16 < SandorKrasna> oh i see what you're saying
18:17 < SandorKrasna> the server takes a while to respond so the app errors out before the server could respond
18:17 < SandorKrasna> that's possible
18:17 < SandorKrasna> let me try something
18:17 < euoia> SandorKrasna: perhaps the server has some kind of flood protection
18:17 < euoia> SandorKrasna: just a thought
18:18 < euoia> khismetix: that looks like quite an old project - it required node > 0.2 and it doesn't list its dependencies
18:18 < khismetix> yes.. that was what I feared
18:18 < khismetix> ok
18:18 < khismetix> I will look for a more recent demo
18:18 < SandorKrasna> does node skip over the request success function and continue execution of the code after calling request?
18:19 < euoia> SandorKrasna: I believe the success function is called asynchronously, so yes
18:19 < SandorKrasna> if you look at line 85 of my code i sent that is what we're erroring out on
18:20 < SandorKrasna> so I am relying on the success function to set that variable
18:20 < SandorKrasna> since the success is not setting that we're errorinng out
18:20 < euoia> SandorKrasna: indeed
18:21 < SandorKrasna> ok, got it
18:21 < SandorKrasna> dang
18:21 < SandorKrasna> i know whats wrong now, thanks for your help
18:21 < euoia> SandorKrasna: can you just move that stuff into the success function
18:21 < euoia> SandorKrasna: btw I don't think it's a success function, it's just a callback... it will also be called if there's an error
18:22 -!- mode/#Node.js [+o TooTallNate] by ChanServ
18:22 < euoia> khismetix: perhaps run 'npm search websocket' and see what you get
18:23 < euoia> khismetix: maybe check you can see the dates on those
18:23 < khismetix> yes trying that
18:27 < mlangenberg> Hi all, I really like Node's error callback style for async functions, where the first argument is an error object or null. I was wondering, are there any guidelines for the content of the error object?
18:28 < mlangenberg> For instance, I am writing a browser lib, where I assign a function to XmlHttpRequests' onerror event. Should that call: callback("Network error") or callback(new Error("Network Error"")
18:31 < Sembiance> mlangenberg: good question :)
18:31 < euoia> I think it should be the latter
18:32 < RLa> Sembiance, mlangenberg, euoia http://www.devthought.com/2011/12/22/a-string-is-not-an-error/
18:32 < bradleymeck> mlangenberg: in general there are a few conventions. 1. err.code maps to a string describing the error in standard terms or a number mapping to an error code. 2. arrays are used for mulitple errors 3. errors should be real errors or at least a close approximation so err.stack err.message etc work as expected
18:33 < euoia> RLa: that's good, thanks
18:33 < mlangenberg> Ah, thanks
18:35 < RLa> i think it's been asked many times in this channel already
18:35 < Sembiance> cool, that's what I currently do, was curious though :)
18:35 < cbebop> Hello
18:35 < daekano> hi
18:37 < mlangenberg> And would it be ok to type check error objects? So I could pass a NetworkError or a ValidationError which specifies which user supplied values did not validate?
18:37 < Sembiance> ick!
18:37 < Sembiance> that feels like gross java
18:37 < Sembiance> in my opinion, I'd just stick with Error()
18:38 < Sembiance> but maybe I'm in the minority here ;)
18:38 < RLa> no, you will need whole hierarchy of errors :)
18:40 < depl0y> just a quick question. I am having some problems getting npm to work correctly on a freshly installed Arch Linux
18:40 < depl0y> I installed nodejs 0.10.0
18:41 < depl0y> and now npm gives me the error "npm ERR! cb() never called!"
18:42 < depl0y> It does this with lots of packages, for example sqlite3
18:44 < euoia> depl0y: I had that error with sqlite3 too. There is a an open github issue about it.
18:45 < euoia> depl0y: and there is also an issue in npm https://github.com/isaacs/npm/issues/1733
18:45 < OliverJAsh> when i make a change to a version number in package.json and want to update/reinstall that module to that version, what command does this? npm install does nothing, npm update will update every single module.
18:45 < depl0y> euoia: yup, saw that issue, but is it really something with the packages or just with the new npm
18:46 < OliverJAsh> and npm update <module name> doesn't seem to listen either. i have to uninstall the module, and then reinstall it.
18:47 < depl0y> euoia: "serialport" has the same problem
18:47 < euoia> depl0y: I think that is a problem with npm, but I think there is a separate issue that the version of sqlite3 in npm does not support node v0.10.0
18:47 < depl0y> euoia: k. I will keep an eye on both issues then
18:52 < Criten> Hi guys! does anyone have time to give me a little code review :P
18:52 < Criten> ?
18:55 < OliverJAsh> Anyone can help me here: Reinstall NPM module according to new version in package.json http://stackoverflow.com/questions/15484556/reinstall-npm-module-according-to-new-version-in-package-json
19:03 < rawtaz> OliverJAsh: is it a devDependencies or a regular dependency?
19:03 < OliverJAsh> devDependencies
19:03 < OliverJAsh> rawtaz: 
19:03 < rawtaz> OliverJAsh: npm update does not act on devDeps, that is your problem
19:03 < OliverJAsh> rawtaz: ahhhh, no workaround?
19:04 < rawtaz> OliverJAsh: please comment in https://github.com/isaacs/npm/pull/3262
19:04 < rawtaz> OliverJAsh: i had the exact same problem yesterday. spent over an hour on it before realizing that npm doesnt update deps as it should..
19:04 < rawtaz> OliverJAsh: so no, as far as i know there's no workaround other than uninstalling and installing the dep again
19:05 < OliverJAsh> ha
19:05 < OliverJAsh> thanks. i've been doing this: npm cache clear <module name> && npm uninstall <module name> && npm install
19:05 < rawtaz> OliverJAsh: why do you clear the cache? is that needed even though you uninstall?
19:05 < rawtaz> i never did it, just curious
19:06 < OliverJAsh> rawtaz: i'm not sure, but i just ran into a situation where the uninstall wasn't enough. in the past it's been enough.
19:06 < rawtaz> oh
19:06 < OliverJAsh> not sure what i did tbf.
19:06 < rawtaz> oh well
19:07 < rawtaz> OliverJAsh: thanks for commenting. im off for a bit
19:08 < OliverJAsh> cya rawtaz 
19:24 < jleibow> anyone have any experience with node-http-proxy
19:24 < browndav> hi -- I'm trying to fix some ev_ref/eio_custom/ev_unref deprecation errors in a node.js module that contains native C++ bindings -- i've managed to figure out the uv_ref / uv_unref / uv_queue_work / uv_work_t pieces, but this module also directly refers to req->errorno and req->result. Does anyone know what the uv_work_t equivalent would be?
19:25 < browndav> (sorry _also)
19:39 < rawtaz> OliverJAsh: might want to update the question at stack overflow with an answer, for others/future reference. please link to the PR as well
19:40 < ningu> so if node becomes a really long standing platform... there could be a podcast on how things used to be called antique node show
19:40 < azylman> ningu: "This old piece of code that you inherited from the CTO before you... actually worth $10,000"
19:40 < azylman> Cue grandma squealing
19:41 < ningu> hehe
19:42 < ningu> the problem with antique code is you can duplicate it like any other code, so it isn't exactly unique
19:43 < ningu> someone on here was saying the other day that these days platforms (like github) are more valuable that code... I've been pondering that.
19:44 < ningu> I still tend to wonder if closed source code is doing anything unusually clever that no one else has managed.
19:45 < Criten> Could anyone take a long at my code and let me know what they think? First time playing with node.js
19:45 < Criten> https://github.com/Criten/arknode
19:47 < steffkes> mscdex: ping
19:49 < Ezku> Criten: uh, so your router only supports one request at a time?
19:49 < steffkes> mscdex: node-pcre doesn't compile for me .. and i'm not sure if it's about the missing/wrong config.h which is mentioned in the README or something else?
19:49 < Criten> Ezku, just the kind of thing i want people to catch.... I just got started with node.js last night...
19:50 < Criten> I mean.. it works if i have 2 pages open and i refresh them seperately?...
19:50 < ningu> Ezku: isn't that how most routers in node work?
19:50 < ningu> node is single-threaded, so I'm not sure what you mean
19:50 < mscdex> steffkes: what platform?
19:51 < Criten> It only has to run once per request... so I don't know why it wouldn't work the way it is
19:51 < ningu> Criten: I'd suggest not require()'ing the routes except the first time
19:51 < Ezku> ningu: I mean interleaved asynchronous request/response pairs
19:51 < ningu> it probably isn't much overhead but it feels messy
19:51 < steffkes> mscdex: it's a virtual machine with debian. no plain upgrade path, it's my local try-and-play machine .. so the versions may be mixed up. which information do you need?
19:51 < mscdex> steffkes: can you gist the console output?
19:52 < steffkes> mscdex: sure, sec
19:52 < Criten> ningu, what do you mean?
19:52 < ningu> Ezku: oh, ok. in that case yeah, all requests should probably have a next() like express
19:52 < Ezku> Criten: just seems both curious and unnecessary that you would have the routing target statically represented in the router as state instead of a result
19:52 < ningu> Criten: in arknode.js requestReceived you load the controller for every request
19:53 < Criten> ningu, Ohhhhhhh..... i think i see what you mean
19:53 < ningu> node caches require's so it won't load the file every time
19:53 < ningu> but it's still unnecessary and not really good practice
19:53 < ningu> in my opinion
19:53 < Criten> Hrmm... Yeah i guess i'm getting modules and classes mixed up in this case
19:53 < ningu> in express you load all the routes at startup
19:53 < ningu> they can be in any file
19:54 < steffkes> mscdex: http://pastie.org/6607543
19:54 < ningu> app.get('/foo', method) -- and it saves the method in the router
19:54 < Ezku> Criten: I'd recommend you build an app or two with something built for asynchrony like express to get the gist of it before heading off to build your own
19:54 < freewil> what is the dominate basic npm module for couchdb
19:54 < ningu> in general I think it's good practice in node and js in general to pass around functionality as function closures
19:54 < ningu> I say function closures but I guess there is no other kind :)
19:54 < Ezku> Criten: obviously DIY is a good way to learn, but try and absorb some idiomatic forms before you go and do that
19:55 < drudge> freewil: i'd say cradle or nano
19:55 < ningu> Ezku: well, he's got some of the basic design patterns down right
19:55 < ningu> for example not having all one big file :P
19:55 < freewil> drudge, thanks!
19:55 < Ezku> ningu: sure, but that's a very non-specific pattern
19:55 < ningu> anyway, yeah, the async control flow takes some thought to design an api for
19:56 < mscdex> steffkes: what gcc version?
19:56 < Criten> Ezku, non-specific pattern?
19:57 < Ezku> Criten: not specific to node.js, so not relevant to my recommendation on getting to know the platform a bit better
19:57 < steffkes> mscdex: added "gcc -v" output on top: http://pastie.org/6607580
19:57 < Criten> Yeah. gotcha
19:58 < Ezku> well, anyways, my criticism is of the fact that init(uri) modifies the module's state instead of returning a result -- that's a very bad habit to have in general
20:00 < Criten> Ezku, yeah.. I think that goes back to me lookign at modules like classes
20:00 < Ezku> and one thing you're going to lose when doing that in this situation is asynchrony
20:00 < Criten> Ezku, would it be better for it to just return an object with the class, method, and argumetns?
20:01 < Criten> "class" as in controller name
20:02 < Ezku> for instance, yes
20:04 < mscdex> steffkes: ok, give this a try: npm install https://github.com/mscdex/node-pcre/master/tarball
20:05 < mscdex> er wait
20:05 < mscdex> tarball/master
20:05 < mscdex> :-)
20:06 < mrvisser> anyone here using the amqp nodejs plugin that has looked at doing a graceful nodejs server shutdown?
20:09 < steffkes> mscdex: that one compiles. it still spits out a few warnings, you'd like to see? anyone i'll give it a try and see how it goes =) ty
20:10 < steffkes> mscdex: added console-output on top: http://pastie.org/6607727
20:10 < mappum> is it good practice to include node_modules/ in git repos or should it be in .gitignore?
20:11 < mscdex> steffkes: i think the warnings can be safely ignored
20:11 < mappum> i first heard to keep it in, but it's being annoying when the stuff in there was installed on windows and i'm trying to deploy on linux (and install native modules)
20:13 < Ezku> mappum: I think you should let npm worry about node_modules :o
20:13 < Virunga> mappum: you don't need them since you have the package.json where specify dependencies, and npm do the rest
20:14 < Virunga> does
20:14 < mappum> ok. i guess whoever told me not to .gitignore it was misleading me :P
20:15 < steffkes> mscdex: yes looks like it. actually i get the positions of the match itself back and have to substring it my self, right? or am i overlooking sth there?
20:15 < mscdex> steffkes: yes
20:16 < Criten> if you have a module that you want to use in multiple modules... should it be passed in or is it fine to have it require in each module
20:16 < mscdex> steffkes: that's basically to avoid having to create a bunch of Buffers if you end up only caring about one substring for example
20:17 < mscdex> Buffers or 'binary' strings
20:17 < steffkes> mscdex: let's see if this makes me happy ;) otherwise i'll flip back
20:17 < mscdex> Criten: require() caches modules once they are read, so multiple requires should load the same object
20:18 < Criten> mscdex, alright. That's what I thought.. thanks :]
20:19 < ningu> Criten: right, my objection was not require'ing the same thing many times so much as the situation in which you did it
20:19 < ningu> which didn't seem to call for it
20:19 < Criten> ningu, yeah. I get it... I forget that node keeps running after the request... to used to PHP at this point...
20:20 < ningu> Criten: generally if there's some state that could be used for any request, you want to load that initially and not worry about it during the request
20:20 < ningu> you still store it in some variable so it comes down to the same thing approximately
20:21 < st_luke> niggler: are you in nyc?
20:21 < niggler> hey st_luke whats up
20:21 < niggler> at this moment no, in general yes
20:23 < Criten> ningu, but considering there can be multiple controller files.. would it be fine to do it the way I have?? It seems more efficient to have node keep track of whats already loaded for me. and if a controller is never hit it doesn't ever need to load it
20:25 < ningu> Criten: sure, I suppose. it's just more usual to load all of those at the beginning but what you're doing will work
20:26 < Criten> ningu, yea.. I see where you are coming from.. but that would mean when i add a controller file.. I would need to go back and add the require to the core file.. which i would like to be transparent
20:27 < Criten> Actually.. i guess I could use FS to go and loop through them all in the folder and load them?
20:27 < ningu> Criten: I would say it's inadvisable for any request to generate a require() statement for an arbitrary file
20:27 < ningu> of course
20:27 < ningu> that would work fine
20:27 < ningu> fs.readdir()
20:27 < Criten> Yeah.. I think that's what i would do
20:28 < ningu> or you can have index.js that pulls them all in
20:28 < ningu> but then you have to modify index.js like you said
20:28 < Criten> then passes them to the arknode.js?
20:28 < Criten> yeah.
20:28 < ningu> sure
20:28 < ningu> or you could do the readdir in index.js
20:28 < Criten> I like the idea of the readdir
20:29 < ningu> require('./controller') loads ./controller/index.js which scans the directory
20:29 < ningu> but then you have to filter out index.js :)
20:29 < Criten> Yeah.. but that's easy :P
20:29 < Criten> Or just stick a controller.js module in the core/ folder..
20:29 < Criten> for loading everything
20:29 < Criten> and probably other stuff down the road
20:30 < ningu> in general I like to separate out logic of that sort -- so the router just is given a set of controllers and something else worries about where they came from
20:30 < ningu> for a small app it might not matter, though
20:30 < Criten> well.. yeah. My router doesnt care about the controllers at all
20:31 < Criten> it just returns the name of what the controller should be
20:31 < Criten> so /foo/bar
20:31 < Criten> it would return foo as the controller and bar as the method
20:31 < Criten> jsut the string
20:31 < ningu> Criten: you might want to look at express's router for ideas
20:31 < Criten> then arknode.js checks to see if it can load those.
20:31 < Criten> as objects.
20:31 < Criten> but that would be done in controller.js
20:33 < jleibow> desperately looking for some help with node-http-proxy. anyone used this?
20:36 < euoia> jleibow: perhaps just ask the question? Or is it more general help you'
20:36 < euoia> you're after?
20:37 < jleibow> what i'm doing isn't working
20:37 < jleibow> plain and simple
20:37 < jleibow> var http = require('http');
20:37 < jleibow> var httpProxy = require('http-proxy');
20:37 < jleibow> var proxyOptions = {
20:37 < jleibow>   pathnameOnly: true,
20:37 < jleibow>   router: {
20:37 < jleibow>     '/app': 'localhost:8000',
20:37 < jleibow>     '/accounts': 'localhost:8001'
20:37 < jleibow>   }
20:37 < Criten> ningu, Ezku, Thanks for the help guys... i'll probably be around later. have a good evening
20:37 < jleibow> }
20:37 < jleibow> httpProxy.createServer(
20:37 < jleibow>   require('./lib/proxy_logger')(),
20:37 < jleibow>   proxyOptions
20:37 < jleibow> ).listen(3000);
20:37 < azylman> stop
20:37 < azylman> Don't paste into this
20:37 < azylman> Use pastebin or something
20:38 < jleibow> sorry
20:38 < jleibow> so i've got this http://pastebin.com/PECnbpbV
20:39 < jleibow> nothing proxies
20:46 < jleibow> can anyone tell me what i'm doing wrong here. http://pastebin.com/PECnbpbV nothing proxies.
20:47 < euoia> jleibow: What does require('./lib/proxy_logger')() return
20:47 < euoia> ?
20:47 < jleibow> it's just a midleware function that console.logs the request.url
20:47 < jleibow> it works
20:47 < jleibow> i see the url get logged and then nothing proxies
20:48 < jleibow> removing it has no different effect
20:49 < euoia> jleibow: the middleware example in the readme shows a function being followed by a number and then a host
20:49 < euoia> jleibow: I cannot see an example with httpProxy.createServer taking a middleware followed by an options object - is that definitely supported?
20:49 < jleibow> as i said, removing the middleware changes nothing
20:53 < euoia> jleibow: it works for me
20:54 < jleibow> you changed nothing?
20:54 < euoia> jleibow: it works if I take the middleware out... let me see I can get it to work with it back
20:55 < jleibow> euoia: mine doesn't work either way. this makes no sense
20:56 < euoia> jleibow: this is all I had... https://gist.github.com/euoia/5190711
20:57 < euoia> jleibow: I cannot get it work with the middleware though
20:57 < euoia> jleibow: I am testing by running nc -l 8001 in one window
20:57 < euoia> jleibow: then wget localhost/accounts in another
20:57 < euoia> and I see the request come through on nc
20:58 < euoia> jleibow: err sorry wget localhost:3001/accounts
21:00 < jleibow> euoia: i'm trying your gist in the browser
21:03 < euoia> jleibow: it's actually a very cool module - it gives me some ideas about how I could break one of my apps up into separate apps
21:03 < jleibow> i'm trying to use it for a service oriented architecture
21:04 < jleibow> euoia: where all i expose to the web is the proxy, but it's proving difficult for me
21:06 < jleibow> euoia: even removing the middle ware and doing an exact copy and paste of gist provided by the guys at nodejitsu doesn't work for me
21:06 < euoia> jleibow: are you on linux?
21:07 < euoia> jleibow: if you can run nc -l 8001 to simulate the endpoint you will be able to ensure that the problem isn't somewhere else in the stack
21:08 < garmur> Tnjdksfnjsldfnjklsdf sdf 
21:08 < euoia> jleibow: okay it works with the middleware too - I just needed to call next() it seems
21:09 < jleibow> yeah, mine dies every time
21:09 < jleibow> euoia: nc -l 8000 hangs
21:09 < euoia> jleibow: it is supposed to hang
21:10 < euoia> jleibow: it's waiting for a request on port 8000
21:10 < euoia> jleibow: try telnet localhost 8000 or wget localhost:8000
21:11 < jleibow> euoia: In a browser i can go to http://localhost:8000/ and http://localhost:8001/ and see the main page there
21:12 < jleibow> euoia: the servers are running there
21:12 < jleibow> euoia: when i go to http://localhost:3000/ i get a 404
21:12 < euoia> jleibow: okay... I was just trying to determine whether the request is being sent or not
21:13 < euoia> jleibow: that's expected though isn't it? you haven't mapped / to anything
21:13 < euoia> jleibow: try localhost:3000/app
21:14 < jleibow>  localhost:3000/app is a 404
21:14 < jleibow> sorry, i should of included the /app i didn't
21:16 < euoia> jleibow: okay, well it is working for me. I'd like to know if the request is even being sent to the server though... which is why I suggested running nc -l
21:16 < euoia> jleibow: you should do it on a port that's available though, and create a route for it
21:17 < euoia> jleibow: rather than a port on which you already have something running
21:17 < jleibow> euoia: it's not being sent to the server running on that port. i'm watching the console and it never gets past the proxy
21:18 < jleibow> euoia: port 3000
21:18 < euoia> jleibow: you're basing that on what? the server logs from localhost:8000 ?
21:19 < trevnorris> bnoordhuis: so ironically from the benchs looks like in 3.17 utf8 ops are now as fast as ascii was, and ascii is now as slow as utf8 was.
21:20 < jleibow> euoia: yes
21:20 < euoia> jleibow: the point I'm getting at is that I don't know whether there is something in front of localhost:8000 that could be rejecting the request
21:20 < jleibow> euoia: my express apps running on port 8000 and 8001 never receive the request. i see the request hit the proxy server on port 3000 and then stop. neither the port 8000 or the port 8001 servers receive a request.
21:21 < euoia> jleibow: the reason I suggested using nc -l is to determine, for sure, that the request isn't being rejected by apache or express or something else
21:22 < euoia> jleibow: in case it matters I'm using version 0.10.0 of http-proxy
21:22 < jleibow> euoia: so when i do nc -l 8000, what should i expect to see?
21:22 < euoia> jleibow: nothing until a request comes in on port 8000
21:23 < euoia> jleibow: although you should use a different port, because you already have the express app on that port
21:23 < wheeledone> Anyone have an idea why node-gyp would correctly build a .so (type=shared_library) on OpenShift but incorrectly generate a .node file on Cloud9 IDE's sandbox, with the exact same binding.gyp file?
21:24 < euoia> jleibow: I added a comment to the gist
21:24 < jleibow> euoia: nc -l never receives the request from the proxy
21:24 < jleibow> euoia: however, i can verify that straight from the browser, it does
21:25 < draco2003> jleibow: add a -I to the curl commands i sent over. don't need the content, just the headers
21:25 < jleibow> draco2003: k. one sec
21:26 < euoia> jleibow: so you can see stuff in the netcat output when you hit that port from the browser?
21:26 < jleibow> euoia: yes
21:27 < ningu> hmm... well, the ng-switch works. feels somewhat like a hack.
21:27 < euoia> jleibow: but not when you hit the proxy in the browser - even though you are seeing logging from the proxy middleware?
21:27 < styol> mscdex: have a moment by chance? it is in regards to segfault-handler
21:27 < jleibow> euoia: correct. the proxy middleware gets hit and logs the request.url but nothing happens after that
21:28 < mscdex> styol: sure
21:28 < euoia> jleibow: btw I updated the gist with the middleware added back in
21:29 < styol> mscdex: how did you get it compiled / working? :) I'm a bit confused on how to install this bad girl manually. Tried your repo, but I must be trying wrong
21:29 < gaf> hello there, I want to add a simple contact us form in my node app. what should I be using, nodemailer? do I need anything else?
21:31 < ningu> oops wrong channel, not that anyone noticed :)
21:34 < styol> mscdex: never mind, my fault.. no sudo when npm installing from a cloned directory i suppose
21:35 < mscdex> styol: ah ok :-)
21:36 < styol> mscdex: thanks for letting me bug you real quick ;)
21:36 < mscdex> no problem
21:43 < Collin_> I have a nodejs server that spawns a process and pipes a request to it through standard input. I'm very occasionally seeing that the process receives too little or more than the expected data. Any idea why this might happen?
21:43 < Collin_> I think it might have something to do with connections that are dropped, but I can't accurately reproduce it
21:44 < Collin_> This is a HTTP POST and I'm comparing the request's Content-Length to the amount of data the process read from stdin
21:45 < Noderr> hey guys
21:45 < Noderr> im using faye-node on EC2 small instance... The server load seems to shoot up on 100 concurrent users
21:46 < Noderr> any ideas?
21:51 < styol> mscdex: ok hrm.. got it to compile (i think) but I'm not able to require it and `npm list` is saying invalid / extraneous
21:56 < kenokabe> http://stackoverflow.com/questions/15401506/reactive-extensions-rxjs-implementatation-to-node-js
21:56 < kenokabe> my question. anyone know a clue?
21:59 < azharr> hi guys
21:59 < azharr> can you recommend me any website that teaches nodejs as first language?
22:00 < mscdex> styol: sorry, i don't know offhand. i haven't had a chance to use it yet, i just made some small changes to get it to compile.
22:00 < styol> mscdex: gotcha. just got it for if/when you do -- require('./node_modules/node-segfault-handler/lib/segvhandler.js') ;)
22:01 < Noderr> anyone on faye-node scaling issues?
22:01 < Noderr> on EC2
22:02 < faceleg|work> azharr: node isn't a language, you want to learn general javascript
22:03 < mscdex> stylus: ah i see, fixed.
22:04 < azharr> ok i've learned javascript @faceleg
22:05 < virtualsue> already? :-)
22:05 < azharr> i mean the tutorial
22:05 < faceleg|work> lol
22:09 < othiym23> so has anyone checked out Python 3's new draft standard for async programming?
22:09 < othiym23> the API looks MIGHTY FAMILIAR
22:09 < Leeol2> Does npm convert "x.x.x-bX" to a broad "beta" field? For example, you can install https://github.com/cloudhead/less.js/blob/master/package.json (1.4.0-b2) with the version `npm install less@beta`, which is odd to me :s
22:09 < faceleg|work> link
22:09 < context> othiym23: url?
22:09 < othiym23> although they use Futures for everything
22:09 < faceleg|work> othiym23: link please
22:09 < willwh> othiym23: I was just readin that
22:10 < othiym23> context faceleg|work: https://www.dropbox.com/s/xknbe58zcvjhzhv/PyCon2013.pptx
22:10 < willwh> faceleg|work: https://www.dropbox.com/s/xknbe58zcvjhzhv/PyCon2013.pptx
22:11 < faceleg|work> othiym23: "• Nobody likes callbacks
22:11 < othiym23> I think they'd be better off using libuv, but I guess somebody already has an IOCP implementation sort of ready
22:11 < faceleg|work> "
22:11 < faceleg|work> ORLY
22:11 < othiym23> I do tire occasionally of callbacks
22:11 < othiym23> I'm a big enough nerd to admit it
22:11 < faceleg|work> same actually
22:11 < gaf> is there any advantage of using mailjs over nodemailer?
22:12 < faceleg|work> but I don't find them too tiresome not to use them most of the time
22:12 < othiym23> and as a tooling author, it would be SUPER FUCKING HANDY if every deferred task / coroutine / whatever had an abstraction I could hook onto
22:12 < othiym23> faceleg|work: Guido really hates anonymous functions
22:12 < othiym23> it's like a tic
22:12 < othiym23> he's gone to great lengths to actually remove lambdas from large swathes of Python
22:12 < faceleg|work> Guido is Mr. Python right
22:12 < othiym23> y
22:12 < faceleg|work> lol wtf
22:13 < faceleg|work> Wow that's a strangeness to have as a language leader
22:13 < othiym23> his view of the world is pretty imperative
22:13 < faceleg|work> unrelated: https://github.com/Mikkeren/FizzBuzzEnterpriseEdition
22:13 < othiym23> Guido is maybe half as weird as Larry Wall
22:13 < othiym23> but probably twice as weird as Matz
22:13 < faceleg|work> his name alone
22:13 < faceleg|work> ...
22:13 < othiym23> cut him some slack, he's Dutch
22:14 < faceleg|work> For some reason the name makes me thing Groucho Marxx
22:14 < faceleg|work> For some reason the name makes me thing Groucho Marxx
22:15 < faceleg|work> dammit up-enter fail sorry
22:16 < ptdorf> Hi everybody. My express app seems to be leaking.
22:17 < ptdorf> This is the paste: https://gist.github.com/ptdorf/5191290
22:17 < ptdorf> Does anyone have an idea why?
22:21 < neppord_pine> If there is one talk I should watch about node, I already know some, what should that be?
22:21 < gkatsev> all of them.
22:22 < faceleg|work> neppord_pine: you should just start writing code
22:22 < faceleg|work> and reading other, good code
22:22 < othiym23> neppord_pine: do try writing some simple apps first, but the stuff mikeal put up from NodeConf 2012 is all worth watching
22:23 < neppord_pine> Haha, well I doing that 2. Just that I want to watch something fun before bed time :). 
22:23 < othiym23> somebody really needs to do a WAT talk for Node
22:23 < othiym23> I learned a lot from the Ruby WAT video
22:23 < gkatsev> why?
22:24 < gkatsev> half of the talk is js
22:24 < gkatsev> (some of it is wrong, actually as well)
22:24 < neppord_pine> Haha. 
22:24 < creationix> a === a -> false!
22:24 < othiym23> yeah, but it's not from the perspective of somebody who's been staring at Node's idiosyncracies all day every day for a few months
22:24 < gkatsev> I guess
22:24  * gkatsev bbls
22:25 < creationix> js> a = NaN; a === a
22:25 < purr> creationix: (boolean) false
22:25 < creationix> yay, the bot is still here
22:25 < dpemmons> anyone know what happened to node.h and v8.h when using chrislea's apt package? he says his nodejs pckage includes nodejs-dev but it appears not to include those headers?
22:26 < neppord_pine> othiym23: Any link to any of them, thanks!
22:26 < styol> ptdorf: why do you believe it is leaking?
22:27 < ptdorf> styol: The memory for the node process goes up from a baseline of 17 MB to 65 MB in a minute, before I kill it.
22:27 < othiym23> neppord_pine: this is good if you're interested in Node's history: http://2012.nodeconf.com/theatre/ryan_dahl.html
22:28 < neppord_pine> othiym23: Perfect, thanks!
22:28 < ptdorf> syol: It stops but doesn't come down when I kill the while true; do curl "localhost:3000"; done
22:29 < othiym23> it's too bad felixge's talk didn't meet mikeal's standards, because that was a badass presentation
22:29 < othiym23> 65MB is nothing
22:30 < othiym23> and if you're curling as fast as you can, the server is probably holding onto a bunch of sockets that haven't finished closing yet
22:31 < ptdorf> othiym23: It doesn't stop there. It goes all the way to 500 MB, for a simple GET /.
22:32 < samholmes> what does it mean See environ(7) in the docs?
22:32 < styol> ptdorf: are you receiving any output from node? there may be an error event being emitted
22:32 < ptdorf> syol: Yes.
22:33 < styol> ptdorf: what is the output?
22:33 < othiym23> samholmes: 'man 7 environ' on a Unix system
22:33 < samholmes> Oh
22:33 < ptdorf> styol: http://pastebin.com/TFzhnimg
22:34 < ptdorf> styol: The app is in https://gist.github.com/ptdorf/5191290
22:35 < samholmes> othiym23: how do I set multiple environmental vars when running my node app?
22:35 < samholmes> ENV1=something ENV2=somethingelse node app?
22:35 < styol> ptdorf: ah, yeah i meant from the `node app.js` itself -- you may want to pipe it to a file if you're not actively seeing output. I can't remember if you need an & at the end or not but `node app.js > output.log`
22:36 < othiym23> ptdorf: change line 10 of app.js to res.end({title: 'Express'}); and see what happens
22:36 < ptdorf> styol: I'm using express "dev" format: GET / 200 0ms - 24
22:36  * ningu poonders the use case for a mkderp module
22:36 < ningu> ponders*
22:36 < othiym23> samholmes: ENV1=ham ENV2=jam ENV3=lamb node thinger.js
22:36 < othiym23> now I want to know what poondering is
22:36 < othiym23> but not really
22:37 < ptdorf> othiym23: Done. Still goes up…
22:38 < styol> ptdorf: you might also want to add to your app.js -- process.on('error', function(){ console.log(arguments); /* I can't remember what args there are */ });
22:38 < othiym23> ptdorf: dang, was thinking you might be leaking sockets, but if you're closing them (which end() does), then that's a bog-standard Express application
22:38 < styol> ptdorf: also check out https://github.com/lloyd/node-memwatch for notices about memory leaks
22:39 < othiym23> ptdorf: you might also want to add the standard Express / Connect error-handler to the middleware chain, although if you do that, only errors outside Express will propagate up to process.on('error')
22:39 < othiym23> ptdorf: what versions of Express / Connect / Node are you running?
22:40 < ptdorf> styol: othiym23: $ express --version
22:40 < ptdorf> 3.1.0
22:40 < ptdorf> $ node -v
22:40 < ptdorf> v0.8.18
22:40 < othiym23> hmm OK
22:40 < ptdorf>   ├─┬ connect@2.7.2
22:40 < othiym23> see if node-memwatch gets sad
22:41 < ptdorf> othiym23: Ok.
22:41 < brycebaril> ptdorf: any idea how many req/sec you're sending it when it it is growing that large?
22:42 < ptdorf> brycebaril: It's a while true loop from a single terminal but I can check.
22:43 < othiym23> I'd keep an eye peeled for EMFILE errors from node as well
22:43 < styol> yeah that is what i was thinking also.. i get that on processes error event when abusing ;) file descriptors
22:44 < styol> ptdorf: you might be better off using a benchmarking tool such as apache benchmark or otherwise where you can control concurrency and get some potentially useful stats
22:44 < ptdorf> styol: I will switch.
22:45 < othiym23> ptdorf: I prefer using siege or JMeter for hammering on Node, because ab gives me wacky results at times with Node
22:45 < othiym23> I don't think it's really geared for latency as low as Node's
22:46 < ptdorf> othiym23: Makes sense: $ ab -n 10 "http://localhost:3000/" --> Benchmarking localhost (be patient)...apr_socket_recv: Connection refused (61)
22:47 < bradleymeck> is ab still using that hilarious http 1.0 header?
22:47 < othiym23> bradleymeck: I think they patched it for Keep-Alive, at least
22:47 < styol> I think I only get a user-agent but not sure
22:47 < bradleymeck> that may be worse, 1.0 and keep-alive
22:48 < styol> yeah seems to just be { 'user-agent': 'ApacheBench/2.3', accept: '*/*' } for me
22:51 < faceleg|work> on os x, can one use instruments to debug native modules?
22:51 < ptdorf> styol: Using siege "http://localhost:3000/" --> ransaction rate:	       30.93 trans/sec
22:53 < styol> ptdorf: are you receiving output from the node process somewhere? For instance, Express server listening on port 3000
22:53 < ptdorf> styol: Yes.
22:55 < styol> ptdorf: nothing useful? I'm working on an issue where i receive "apr_socket_recv: Connection refused" back from ab due to a Segmentation fault
22:57 < ptdorf> styol: Nothing. 60 MB and counting.
22:57 < styol> what does memwatch say
22:58 < ptdorf> styol: memwatch didn't crash the server. I've a process.exit() inside .on('leak')
22:58 < brycebaril> what is the 60MB? RSS?
22:59 < Dane_> hello
22:59 < Dane_> Anyone herer good at Testacular and how to set up the path to firefox?
23:00 < Wigflip> What's wrong with devise? I'm using it in a project right now. Should I ditch it for something else? Perhaps just roll my own?
23:00 < Dane_> Need help with testacular and setting up path to FireFox... 
23:00 < Dane_> anyone?
23:01 <@Nexxy> Dane_, we're observing a moment of silence
23:01 < othiym23> ptdorf: you may need to use ulimit -f to boost the number of file descriptors your system can use
23:02 < othiym23> also, 30 trans/sec is horrific
23:02 < othiym23> are you running this on an Arduino?
23:02 < napalmbrain> Nexxy: What was the moment of silence for?
23:03 < othiym23> for a simple Express test server, you should be seeing something like 1k transactions per second, after you crank siege's concurrency up to 64 or so
23:05 <@Nexxy> napalmbrain, for the javascript brothers and sisters that are no longer with us
23:05 < napalmbrain> Nexxy: Oh.. Okay
23:05 < ptdorf_> othiym23: Thanks although I'm just trying to fix thix leak. :)
23:06 < brycebaril> ptdorf_: what is the 60MB of memory, RSS, heap, what?
23:06 < Dane_> Testacular output: Starting browser Chrome, Starting browser Firefox, Starting Browser IE..... Chrome and IE starts up perfect but when trying to start up Firefox it just says... CreateProcessW: Cant find the path.
23:07 < ptdorf_> brycebaril: HEAP (I guess). I'm keep the Activity Monitor (OSX) open.
23:07 < neppord_pine> Dane_: I guess its on Windows?
23:07 < brycebaril> I don't have an OSX but I'm guessing that's more likely RSS
23:07 < ptdorf_> brycebaril: What's the difference?
23:08 < neppord_pine> brycebaril: Its like top but not a tui. 
23:11 < Dane_> Yes its on windows....
23:11 < napalmbrain> Dane_: Where is Firefox installed at? The default location?
23:12 < das3in> anyone here that can help with a passport.js problem?
23:14 < faceleg|work> das3in: we won't know until you ask
23:14 < faceleg|work> ningu: I've made a terrible mess. My lack of understanding of memory management has caused segfault madness
23:14 < kenperkins> Nexxy is nodepdx hardware only?
23:15 < kenperkins> btw, is everyone doing bunk beds for nodeconf?
23:15 < das3in> I'm having problems figuring out how to create different types of users in passport.js. I created a "role" in my mongoose schema that can be set to "user" or "admin" but can figure how to redirect users based on the role
23:15 < das3in> isAuthenticated({role: "admin"}) does not work
23:19 < SandorKrasna> is there a way to make the request module not async
23:19 < mmalecki> SandorKrasna: nope
23:19 < brycebaril> ptdorf_: http://nodejs.org/api/process.html#process_process_memoryusage keep an eye on these -- RSS may be growing as the system allocates memory but that doesn't mean it's leaking there, given memory pressure your process may give back memory to the system if it doesn't need it anymore. If your heap size is growing unbounded that's more concerning.
23:20 < ptdorf_> brycebaril: I'll read them. Thanks.
23:20 < SandorKrasna> I'm having an issue with sockets calling request module and im not sure which one is going to issue the callback first
23:20 < SandorKrasna> do I have to set up a callback counter?
23:20 < ptdorf_> brycebaril: But how can I differenciate between them?
23:21 < MI6> joyent/libuv: isaacs refs/tags/node-v0.7.2 * 243cfcd : Merge remote-tracking branch 'ry/v0.6' - http://git.io/yd0mtA
23:21 < brycebaril> if you call the method I linked, process.memoryUsage() it will output RSS, Heap, and heap used
23:22 < ptdorf_> brycebaril: And I should check the diff at regular intervals, right?
23:22 < ptdorf_> brycebaril: And after a certain threshold, fire an console.error()?
23:23 < SandorKrasna> how can i get json from an api non asyncrounously
23:23 < brycebaril> ptdorf_: depends on what you're concerned about. At the very least take a look at them now while you're troubleshooting the memory growth
23:24 < ptdorf_> brycebaril: I'll. Thanks.
23:25 < Dane_> I am back.. conection died....
23:26 < AAA_awright> How do I do file locking?
23:26 < AAA_awright> And byte-level locking
23:26 < othiym23> kenperkins: I'm camping, it's the only way
23:27 < kenperkins> :S
23:27  * kenperkins doesn't really have camping anything
23:28 < othiym23> kenperkins: also, nodepdx isn't hardware-only, the idea is to have a hardware track and a session track, and allow the two to overlap, so you can be hacking on hardware and learning stuff at the same time
23:28 < othiym23> and hopefully not soldering an arduino onto your keyboard because you get distracted
23:28 < kenperkins> hm, not sure i can swing portland with all my other travel :S
23:28 < kenperkins> i've never done any hardware :D
23:29 < othiym23> it's fun!
23:29 < othiym23> and not terribly hard!
23:29 < kenperkins> doesn't really line up with my job desc :D
23:32 < SandorKrasna> has anyone used the async module with the request module?
23:33 < Technodrome> any way to make express have an actual routing file? 
23:34 < Technodrome> instead of doing it as a method 
23:34 < lovemuffin> what do you mean? what would it route to if not a function?
23:35 < Technodrome> i mean like an actual routing file 
23:35 < othiym23> Technodrome: sure, just write a simple parser yourself
23:35 < othiym23> but even in Rails, the routes file is a DSL for Ruby
23:36 < Technodrome> is there anything already built for this? i would think this would be something so common
23:36 < othiym23> not really (that I'm aware of)
23:36 < lovemuffin> is that common?
23:36 < tjholowaychuk> lots of people prefer to leave out the indirection, but like othiym23 said you could write it in 10 lines or so
23:36 < Technodrome> what do you mean the routes file is DSL othiym23  ? 
23:36 < othiym23> Node web apps tend to be factored differently than frameworks like Rails that centralize routing
23:37 < othiym23> I mean that file is interpreted as Ruby with a domain-specific language on top of it
23:37 < othiym23> it's not a specially-formatted file
23:37 < Technodrome> yes its just ruby 
23:37 < tjholowaychuk> Technodrome you can use regular node modules and do app.get('/users', users.list) etc
23:38 < Technodrome> but its definitely its own file with own conventions 
23:38 < tjholowaychuk> maybe not as pretty as you would want but that's effectively the same thing
23:38 < Technodrome> i use django most
23:38 < Technodrome> which has very good useful routing
23:38 < Technodrome> you get all kinds of functions for url building from inside methods
23:38 < MI6> joyent/libuv: Bert Belder refs/tags/node-v0.7.3 * 7ab62cf : Merge commit '267e75d' into master - http://git.io/Ukwq5g
23:39 < tjholowaychuk> those are massive overkill IMO, if you change your urls frequently
23:39 < tjholowaychuk> you're probably not thinking about them enough
23:39 < tjholowaychuk> in the first place
23:40 < tjholowaychuk> but anyway i believe there are a few resource oriented things on top of express out there
23:40 < tjholowaychuk> that give you similar functionality
23:41 < Technodrome> tjholowaychuk: i respect your opinion
23:41 < ningu> tjholowaychuk: hey, shouldn't it be possible in jade to have it not mirror boolean attributed like selected="selected"? according to the docs, if terse mode is on that will not happen.
23:41 < Technodrome> but frameworks have done annotation based routing (very similar) for a long time, but having a routes file so you can get a quick, very quick big picture of things, is nice
23:41 < othiym23> Technodrome: awesome, write one that does what you want and share it
23:41 < ningu> tjholowaychuk: I'm using doctype !!!
23:42 < tjholowaychuk> Technodrome I agree but you can use js still
23:42 < tjholowaychuk> Technodrome even if it's just as simple as https://github.com/visionmedia/express/blob/master/examples/route-separation/index.js#L28
23:42 < Technodrome> tjholowaychuk: i must admit, right now i'm contemplating node.js or django for my next project, right now they are almost equally as good with little caveats in each direction 
23:42 < othiym23> I'm not aware of a module that does what you're looking for out of the box
23:43 < Technodrome> teddy has something similar 
23:43 < Technodrome> gedd*
23:43 < Technodrome> blah autocorrect , *geddy*
23:43 < dstokes> got a quick question about node 0.10 and cluster / sockets for the brave
23:43 < neppord_pine> Technodrome: If you want a more declerative language, ues coffee-script. 
23:43  * Nexxy sighs
23:44 < Technodrome> declarative meaning like python neppord_pine ?
23:44 < othiym23> neppord_pine: nonsequitur, Coffeescript may or may not be many things, but it's exactly as expressive as JS
23:44 < Technodrome> i don't like the object system of JS, but i can put up with it 
23:44 < tjholowaychuk> that's the best part of js
23:44 < ningu> tjholowaychuk: any suggestions? I read the docs but it's not working as it seems to imply.
23:45 < Technodrome> i'm just used to a class system such as python / java tjholowaychuk 
23:45 <@Nexxy> I agree with tjholowaychuk; not that anyone asked
23:45 < neppord_pine> Wow, i diddent mean to offend someone. 
23:45 <@mbalho> you just offended me with your spelling of didn't
23:45 <@mbalho> (just kidding)
23:45 < othiym23> Technodrome: you might want to take a look at https://github.com/flatiron/director
23:45 <@Nexxy> mbalho, wow
23:45 < crack> Hello guys. I am working on this example http://martinsikora.com/nodejs-and-websocket-simple-chat-tutorial , if any1 tested that before i have one question for you. Why i can change "Enter key" function with the same that are calling from a button?
23:45 <@Nexxy> such careless use of parentheses
23:46 < othiym23> it's as close as Node has to a "do-everything" router
23:46 <@Nexxy> I'm appalled
23:46 < neppord_pine> I like Js, but to make a list with predicates i could understand the.äm that like to use a Ruby like syntax. 
23:46 < Technodrome> othiym23:  looks like its  different server than express though? hmm 
23:47 < othiym23> Technodrome: not really, you can wrap director up for use as a router in Express
23:47 < neppord_pine> mbalho, Nexxy: you two made my day! Thanks!
23:47 < tjholowaychuk> Technodrome https://github.com/visionmedia/express/blob/master/examples/route-map/index.js#L47
23:47 < tjholowaychuk> is a similar example
23:47 < othiym23> although if you're replacing the router, you'd probably be better off just using it wit Connect directly
23:47 < tjholowaychuk> https://github.com/visionmedia/express/blob/master/examples/route-map/index.js#L6 is the ~10 line example
23:47 < Technodrome> now thats interesting tjholowaychuk 
23:48 < tjholowaychuk> not really :p
23:48 < Technodrome> i like how it separates for get / post / del 
23:48 < tjholowaychuk> at the end of the day it's all method/path so you build on those
23:48 < dstokes> seeing workers catching `listening` events from spawned udp sockets in cluster as of node 0.10. is this expected (socket event bubbling in workers)?
23:48 < dstokes> (dgram udp sockets)
23:49 < Technodrome> if you like your routes to go into function, again i respect that, i've been doing this for a while and used many frameworks that did it that way, including some of the first Java ones, when i get into a new project, i was literally jumping through files to find the url structure 
23:49 < Technodrome> have a central place of all url definitions or even a few, is not  a problem for me and i can't see why it wouldn't' be the preferred 
23:49 < othiym23> Technodrome: routes tend to be local to their handlers in larger Express apps
23:49 < tjholowaychuk> they dont have to be functions
23:49 <@Nexxy> Technodrome, you must teach me your ways
23:49 < tjholowaychuk> it can be whatever you want
23:49 < tjholowaychuk> some string notation
23:49 < tjholowaychuk> files
23:49 < othiym23> it's different from how Django and Rails do it, but neither better nor worse
23:49 < othiym23> just different
23:49 <@Nexxy> Technodrome, you're *literally* jumping through *files*!?
23:50 <@Nexxy> are you The One?!
23:50 < Technodrome> its very similar to sinatra 
23:50 < ningu> tjholowaychuk: I am referring to this: https://github.com/visionmedia/jade/issues/816
23:50 < brycebaril> Nexxy: perhaps he means the type found in a woodshop?
23:50 < tjholowaychuk> Technodrome our app for example has a bunch of modules that are completely self-contained
23:50 < tjholowaychuk> centralizing the routes would just break that
23:50 <@Nexxy> brycebaril, that sounds painful ;_;
23:50 < Technodrome> Nexxy:  in huge java servlets projects, its like jump jump jump, skip skip skip jump 
23:50 < ningu> tjholowaychuk: you say "it should give you just checked when the doctype is html5" however that seems not to be the case.
23:50 < Technodrome> tjholowaychuk: you ever used django?
23:51 < brycebaril> Nexxy: to each their own! :P I don't judge
23:51 < tjholowaychuk> Technodrome nope, I've read some of the docs but I haven't written much py
23:51 < Technodrome> apps are pretty much self inclusive as well, very similar to the module philosophy here, you just have a url's file in there and you include it in the main one 
23:52 < tjholowaychuk> for example if you export a "show" function in user.js
23:52 < tjholowaychuk> just change my example to require() that file and grab that export
23:52 < tjholowaychuk> and there you have your url file
23:52 < tjholowaychuk>  "/user/:id": "users.show"
23:52 < tjholowaychuk> whatever
23:53 < Technodrome> if you have never saw the sort of django routing in use, i can see why one might not be a fan right away, its whatever you are used to, to a certain degree
23:53 < neppord_pine> Technodrome: I think what you realy want is a way to print out all routs then?
23:53 < tjholowaychuk> I just try not to chase non-problems
23:53 < Technodrome> neppord_pine: that would work as well 
23:53 < tjholowaychuk> each of our subapps only has 4 o5 routes
23:53 < Technodrome> neppord_pine: sorta like how turbo gears did it 
23:54 < Technodrome> it was object dispatch, not like either of these, similar to cherrypy and how zope did it and some early java frameworks, but they had a command i could run and get all the url's in a list so i could see where things where 
23:54 < Technodrome> were* 
23:54 < neppord_pine> Technodrome: That would be easy to do, just decorate the get method, for example. 
23:54 < s3shs> I can call async.parallel from one step of an async.waterfall, right?
23:54 < Technodrome> neppord_pine: define decorate, i'm not a javascript wiz yet, it has actual decorators? 
23:55 < tjholowaychuk> neppord_pine you dont even have to do that
23:55 < tjholowaychuk> just DEBUG=express:router node app
23:55 < Technodrome> or you mean the PHP way? using comments as decorators ? 
23:55 < ningu> tjholowaychuk: anyway I've commented on the github issue.
23:55 < neppord_pine> Haha, Technodrome it's a Python term. 
23:55 < Technodrome> neppord_pine: ok annotations :) 
23:56 < neppord_pine> Technodrome: Replace it with a new function that wraps the old one. 
--- Log closed Tue Mar 19 00:00:39 2013
