--- Log opened Fri Oct 05 00:00:13 2012
--- Day changed Fri Oct 05 2012
00:00 < pyrotechnick> niggler: where can i find this WTI stuff
00:01 < niggler> you can get futures numbers from CME
00:01 < pyrotechnick> is there one with the ratio you were talking about?
00:01 < niggler> WTI is the futures contract, RB is rbob
00:02 < whomp> chilts, since i only need the session feature from connect, i think i'll just go with memcache
00:02 < niggler> EIA puts out reports too
00:03 < niggler> http://www.eia.gov/forecasts/steo/pdf/uncertainty.pdf
00:03 < niggler> take a look a the RBOB crack spread
00:03 < niggler> crack spread refers to the price difference between the raw and the derivatives
00:04 < niggler> *crude oil = raw, crap like heating oil and gasoline = derivatives
00:05 < niggler> i dont trade the commodity directly but do short-term trades on various companies 
00:05 < Benvie> TooTallNate: initial ref-bitfield work https://github.com/Benvie/ref-bitfield
00:06 < tnorris> what's the best way to stay in touch with the future of node? like, is there a roadmap?
00:08 < pyrotechnick> tnorris: take some tryptamines and ask the elves
00:09 < pyrotechnick> niggler: so what are they trying to do? knock out the last remaining independent suppliers?
00:09 < tnorris> pyrotechnick: sorry, my adhd meds are wearing off. what?
00:09 < niggler> no one outside of california really cares about cali's prices
00:09 < pyrotechnick> tnorris: as far as i'm aware there's no roadmap and nothing to be added for 1.0, it's all about stability and performance now, but check the wiki on github
00:11 < niggler> any way to add to the wishlist
00:11 < pyrotechnick> niggler: mailing list
00:12 < tnorris> pyrotechnick: I was looking at the pull requests, and noticed in the following that isaacs states something about pipes and deprication in v0.9 (https://github.com/joyent/node/pull/3785)
00:12 < niggler> deprecation
00:13 < tnorris> like I said, meds are wearing off.
00:13 < aboudreault> Hi. I'm looking to write a small text parser...... is there anything I should take a look to to create a kind a lexer ? 
00:13 < niggler> jison
00:13 < aboudreault> niggler, thanks.
00:13 < niggler> generates lexers using lex/yacc syntax
00:14 < aboudreault> that's exactly what I need.
00:14 < niggler> thought you should note that the generated parsers aren't reentrant
00:19 < mdedetrich> hi everybody!
00:19 < pyrotechnick> what
00:19 < pyrotechnick> is grillin grease tiger
00:21 < mdedetrich> covering a tiger in grease and then grilling it?
00:34 < yug_> Hi, I have a client server app that currently running on nodejitsu. I would like the have x amount of computers that all of them has specific version of chrome (beta or canary). and on they same time i want all of the computers to enter the url of my website and stay on for an hour (or so)
00:35 < yug_> and cant find a way to do so
00:36 < yug_> anyone got an idea?
00:37 < EhevuTov> anyone have an example of piping to an event-stream? I can only get mine to work if I pass an argument to event-stream of the stream I want to read from, rather than pipe to
00:39 < EhevuTov> for instance I can do this: event-stream(process.stdin).pipe(process.stdout) 
00:39 < EhevuTov> but I want to do something like this: process.stdin.pipe(event-stream).pipe(process.stdout) 
00:40 < yug_> Hi, I have a client server app that currently running on nodejitsu. I would like the have x amount of computers that all of them has specific version of chrome (beta or canary). and on they same time i want all of the computers to enter the url of my website and stay on for an hour (or so)
00:40 < yug_> anyone got an idea?
00:41 < EhevuTov> yug, I don't understand. Could you rephrase that?
00:42 < zyzzyva> if you want to stress test yug_ you can use phantomjs
00:42 < zyzzyva> or ab
00:42 < yug_> no stress test
00:42 < yug_> i want real live computers
00:42 < yug_> from around the world
00:42 < yug_> enter a url
00:42 < zyzzyva> that sounds like something for mturk
00:43 < yug_> and stay there for an hour
00:43 < yug_> yes. but i need to to it often and scripted preferred 
00:44 < zyzzyva> you can write a script
00:44 < zyzzyva> or you can go to india
00:44 < zyzzyva> im sure there are boatloads of indians itching to go to a website
00:45 < mdedetrich> that came off as awfully racist
00:46 < yug_> i can write a script
00:46 < yug_> but where shall i run it?
00:46 < zyzzyva> ive been emailed by 17 indian freelance developers, and at this stage im convinced they have a set of introductory emails that they rotate between
00:46 < zyzzyva> and some really excellent buzzphrases 
00:46 < mdedetrich> yug_: in a blender
00:46 < yug_> i need an environment of computers that is built for that need
00:46 < mdedetrich> zyzzyva: that doesn't surprise me
00:46 < timeturner> haha
00:47 < yug_> and then istall on all of them chrome beta
00:47 < ang3lfir3> zyzzyva, having worked with a great deal of them..... i find your presumption .... true ... 
00:47 < yug_> and only then run my script
00:47 < zyzzyva> so you describe the problem, and the response is always "Just last month I had shared a desire to  ..."
00:48 < ang3lfir3> also .... "do the needful" doesn't mean what you think it means ... 
00:48 < timeturner> lol
00:48 < mdedetrich> this is starting to sound like conversations which chicks
00:48 < mdedetrich> I have in nightclubs
00:48 < timeturner> lol this is funny
00:48 < mdedetrich> "I shared the desire to"
00:48 < zyzzyva> as a whole ive had terrible experiences with international labor
00:48  * timeturner grabs popcorn
00:48 < mdedetrich> " do the needful"
00:48 < mdedetrich> hmm I may get some ideas here
00:48 < zyzzyva> "Your requirements, my skillset and our interests are neatly aligned;"
00:49 < mdedetrich> don't get that one at nightclubs
00:49 < timeturner> zyzzyva: care to share a gist of one of those emails lol
00:49 < ang3lfir3> mdedetrich, but you wish you di
00:49 < ang3lfir3> d
00:49 < timeturner> :P
00:49 < mdedetrich> Id prefer if our body parts were neatly aligned
00:50 < guest-0000> Hi. I'm having problems testing node.js from an internal IP.
00:50 < mdedetrich> tbh, I wouldn't want to date a chick that was interested in coding and whatnot
00:50 < mdedetrich> or if that was her only interest
00:50 < IP_Prob> Does anyone have a moment to try and help me out?
00:51 < zyzzyva> http://pastebin.com/SCPqLQ2s
00:51 < mdedetrich> IP_Prob: do you have any sugar
00:51 < timeturner> def don't want to date a girl that talks about coding
00:51 < IP_Prob> At home, yes.
00:51 < zyzzyva> this is the only one in which the person didnt use his or her name in the email
00:52 < mdedetrich> sounds like coders from india will become the next financiers in nigeria
00:52 < timeturner> lolz
00:52 < timeturner> this is hilarious
00:52 < mdedetrich> I wouldn't hire an indian coder with a ten foot pole tbh
00:52 < timeturner> the sad part is that is exactly how they talk
00:53 < zyzzyva> im told the vietnamese arent much better
00:53 < timeturner> you would think that they would at least try to correct their grammer when typing out a letter but nope
00:53 < zyzzyva> grammar
00:54 < zyzzyva> im convinced they typed these emails out a long time ago
00:54 < zyzzyva> i really wish there were a more vibrant market in the US for freelance work
00:54 < timeturner> actually, I'm not sure how to even categorize the mistakes in this email haha
00:54 < mdedetrich> silly macs
00:54 < mdedetrich> sleeping when I close the lid
00:55 < zyzzyva> at least it isnt sporadically shutting down mdedetrich 
00:55 < zyzzyva> my mid 2010 macbook pro started doing that
00:55 < zyzzyva> then they had to replace the logic board :/
00:55 < mdedetrich> maybe you should stop hitting it
00:55 < timeturner> why do laptops die :(
00:55 < mdedetrich> aliens, thats why
00:55 < timeturner> I'm using one that's 3 years old. last time I restarted it was about 2 weeks ago
00:56 < zyzzyva> to be fair, the applecare people were impressed with the fact that I didnt beat it up
00:56 < mdedetrich> understandable
00:56 < mdedetrich> I feel like beating apple up, but thats due to more political reasons
00:56 < zyzzyva> the products have degraded
00:56 < mdedetrich> only reason I have a mac is its the only *nix OS that runs photoshop
00:57 < mdedetrich> and I'm a web developer
00:57 < mdedetrich> so yeah....
00:57 < timeturner> using putty get's painful after a point
00:57 < timeturner> putty forever*
00:57 < zyzzyva> linux desktops arent there yet
00:57 < zyzzyva> windows is godawful
00:57 < mdedetrich> if only windows had a decent shell/posix environment
00:57 < mdedetrich> *can only dream*
00:57 < mdedetrich> windows is only awful for no developers that aren't glued to GUI's
00:57 < zyzzyva> windows 8 is terrible
00:58 < mdedetrich> eh I don't think its terrible
00:58 < zyzzyva> the metro is ... icky
00:58 < timeturner> I fail to understand why they're using html5 and js in metro
00:58 < mdedetrich> windows has far more terrible things than metro
00:58 < mdedetrich> timeturner: thats blatantly obvious
00:58 < mdedetrich> security issues
00:58 < timeturner> I mean aren't these client side technologies
00:58 < zyzzyva> i use windows for turbotax :/
00:58 < mdedetrich> reducing barrier to entry
00:58 < zyzzyva> and turbotax only -- office 2011 finally brought back VBA
00:59 < timeturner> that's dumb though
00:59 < timeturner> it should all be C or C++
00:59 < mdedetrich> why?
00:59 < mdedetrich> thats even more retarded
00:59 < mdedetrich> do you know how difficult it is to code GUI apps in C/C++?
00:59 < mdedetrich> in terms of development time
00:59 < zyzzyva> its about frameworks mdedetrich 
00:59 < timeturner> yeah for the coders it sucks
00:59 < mdedetrich> no
00:59 < timeturner> but I mean for performance
00:59 < mdedetrich> the languages
01:00 < mdedetrich> require you to do memory management
01:00 < mdedetrich> and C++ as a language is terrible anyways
01:00 < zyzzyva> memory management is not something to be abhorred
01:00 < zyzzyva> and i agree that C++ is terrible
01:00 < mdedetrich> it adds to development time
01:00 < zyzzyva> C++ is like typescript in many ways
01:00 < NigglerBot> fuck typescript: it breaks javascript default behaviors like parseInt(0.3)
01:00 < zyzzyva> both are misguided
01:00 < timeturner> nigglerbot haha
01:00 < mdedetrich> unless you are writing something like a kernel
01:00 < mdedetrich> you really don't need memory management
01:00 < timeturner> typescript
01:00 < zyzzyva> timeturner: its set up to do it once a minute
01:00 < timeturner> ah
01:01 < zyzzyva> once per minute per keyword
01:01 < zyzzyva> i mean, take java
01:01 < zyzzyva> java has quite a few issues
01:01 < NigglerBot> fuck typescript: the generated javascript is oftentimes *much* larger than the hand-coded version, sometimes by a factor of 10
01:01 < mdedetrich> zyzzyva: personali scala is the best language
01:01 < timeturner> java...I hate java
01:01 < zyzzyva> ooh that's a bug it should have said something about java
01:01 < mdedetrich> zyzzyva: I have used
01:01 < EhevuTov> MS trying to leverage a new language to stifle the openness and acceptance of another?
01:01 < mdedetrich> oh here it comes
01:01 < mdedetrich> with the MS hate
01:01 < timeturner> honestly, I'm not sure what gosling was thinking
01:02 < harrisonm> re: NigglerBot: that was fast
01:02 < mdedetrich> tbd, typescript is the only JS translator that adds static typing
01:02 < NigglerBot> fuck typescript: it breaks javascript default behaviors like parseInt(0.3)
01:02 < mdedetrich> which is more of what can be said
01:02 < mdedetrich> than things like CS
01:02 < zyzzyva> java has many issues
01:02 < NigglerBot> fuck java: did you know that more than a million man-hours were wasted typing 'public static void main' on hello world code segments?
01:02 < zyzzyva> including a poorly designed graphical api
01:02 < zyzzyva> AWT
01:02 < zyzzyva> swing
01:03 < zyzzyva> im sure there's a term for it
01:03 < EhevuTov> lol
01:03 < zyzzyva> like object oriented hell
01:03 < mdedetrich> zyzzyva: its not OO hell
01:03 < mdedetrich> the problem with java
01:03 < mdedetrich> is it treats everything as a class
01:03 < mdedetrich> that has nothing to do with OO
01:03 < mdedetrich> smalltalk/ruby are pure OO languages
01:03 < zyzzyva> apparently is that more than a million man-hours were wasted typing 'public static void main'
01:03 < mdedetrich> and you don't see them being that verbose
01:03 < zyzzyva> no its just about verbosity
01:04 < zyzzyva> you have issues with terse languages like coffeescript
01:04 < mdedetrich> well yes, java is verbose
01:04 < NigglerBot> fuck coffeescript: inconsistent action-at-a-distance makes reading an exercise in futility.
01:04 < NigglerBot> fuck java: did you know that more than a million man-hours were wasted typing 'public static void main' on hello world code segments?
01:04 < mdedetrich> and its verbose because it forces you to treat absolutely everything
01:04 < mdedetrich> as a class
01:04 < mdedetrich> even basic data structures
01:04 < mdedetrich> which is retarded
01:04 < zyzzyva> how about smalltalk's treatment of literals?
01:05 < mdedetrich> smalltalk is the same as ruby in that respect
01:05 < mdedetrich> everything is an object
01:05 < mdedetrich> scala is the same
01:05 < mdedetrich> literals are basically objects
01:05 < mdedetrich> like you can do 3.toString()
01:05 < mdedetrich> in scala
01:05 < zyzzyva> scala is a strange beast
01:06 < mdedetrich> scala is fuken awsome
01:06 < mdedetrich> best language by far that I have used
01:06 < mdedetrich> in terms of expressiveness and productivity
01:06 < mdedetrich> and scalability
01:06 < zyzzyva> explain how expressiveness is improved
01:06 < mdedetrich> it has functional aspects
01:07 < zyzzyva> scala doesnt replace the underlying java environment 
01:07 < NigglerBot> fuck java: it has the user friendliness of a swift kick to the balls, the brevity of a prattler, and the portability of a hole in the ground.
01:07 < mdedetrich> like functions are objects (just like JS)
01:07 < mdedetrich> the underlying java environment is just a VM
01:07 < mdedetrich> that has little to do with the actual language
01:07 < zyzzyva> my point is that
01:07 < zyzzyva> if you dont change the underlying VM you are innovating on syntax
01:07 < EhevuTov> what happen to actionscript MS?
01:07 < zyzzyva> which doesnt change the expressiveness
01:07 < mdedetrich> well in scala you can do things like 1..3.map(_ + 5)
01:08 < mdedetrich> expressiveness is just to do with syntax
01:08 < mdedetrich> and language structure
01:08 < mdedetrich> its nothing to do with the VM
01:08 < zyzzyva> no thats not true
01:08 < zyzzyva> expressiveness refers to what you can express in the language
01:08 < mdedetrich> scala that targets LLVM is just as expressive as Scala that targets Java
01:08 < zyzzyva> the strict definition doesnt care about brevity
01:08 < mdedetrich> or one that compiles down to assembly
01:08 < mdedetrich> keyword there is LANGUAGE
01:09 < mdedetrich> not target environment
01:09 < zyzzyva> yes or no: can you implement the same thing in java
01:10 < mdedetrich> its a turing complete language
01:10 < mdedetrich> so I don't know what the point of that question is
01:10 < zyzzyva> you are somehow saying that scala's functional expressions make it more expressive
01:11 < zyzzyva> more concise?  yes.  more expressive?  no
01:11 < mdedetrich> I think you are using an unusual definition of the word expressive
01:11 < mdedetrich> at least in the context I am using it
01:11 < zyzzyva> what does wiki have to say about it?
01:11 < mdedetrich> expressive by definition has to do with language
01:12 < mdedetrich> and not who speaks it, or who listens to it
01:12 < zyzzyva> "In computer science, the expressive power (also called expressiveness or expressivity) of a language is the breadth of ideas that can be represented and communicated in that language. "
01:12 < mdedetrich> (or what VM runs it)
01:12 < mdedetrich> yes
01:12 < mdedetrich> which has absolutely nothing
01:12 < mdedetrich> to do with the VM
01:12 < zyzzyva> it has nothing to do with the conciseness of a particular expression either
01:12 < zyzzyva> you can represent the same concepts in both
01:12 < mdedetrich> its how many ideas can easily be expressed in the language
01:12 < mdedetrich> like scala is expressive
01:13 < mdedetrich> because it it allows you to communicate functional paradigms
01:13 < mdedetrich> incredibly well
01:13 < mdedetrich> java can't do that
01:13 < zyzzyva> that's one particular style
01:13 < mdedetrich> hence scala is more expressive then java
01:13 < mdedetrich> styles are ideas
01:13 < zyzzyva> as a whole it is not
01:13 < mdedetrich> going back to your definition
01:13 < zyzzyva> you are assuming that functional is the only way to go
01:13 < mdedetrich> no Im not
01:13 < zyzzyva> and in a world where the only model for programming is functional
01:13 < mdedetrich> scala is a hybrid language
01:14 < mdedetrich> the point is
01:14 < mdedetrich> scala lets you express many more ideas clearly
01:14 < zyzzyva> and where the metric of a language is the affinity for functional programming style
01:14 < mdedetrich> than java
01:14 < zyzzyva> if we are in that world, then yes scala is more expressive
01:14 < mdedetrich> it doesn't have to be functional
01:14 < mdedetrich> there are many things
01:14 < mdedetrich> it does
01:14 < mdedetrich> which java does not
01:14 < mdedetrich> in terms of expressing ideas
01:14 < mdedetrich> as per your definition
01:14  * holzp is afraid to jump in with a noob question
01:14 < mdedetrich> of expressive
01:14 < zyzzyva> your map example is certainly not one of them
01:14 < zyzzyva> sup holzp 
01:15 < holzp> heya, continue I can wait :)
01:15 < mdedetrich> zyzzyva: thats because you are making a stramwn
01:15 < mdedetrich> and twisting my point
01:15 < mdedetrich> and it is an example
01:15 < zyzzyva> nope we disagree on the definition of expressiveness
01:15 < zyzzyva> and my definition seems to align with conventional thought (see wikipedia)
01:15 < mdedetrich> I want to express the concept creating a continuation of elements and adding 5 to them
01:15 < mdedetrich> you misunderstand what wikipedia is saying
01:15 < mdedetrich> in java
01:16 < mdedetrich> I have to make a for loop
01:16 < mdedetrich> and do iteration
01:16 < mdedetrich> doing that means I hide the original intention, and I'm not communicating the idea properly
01:16 < mdedetrich> doing 1..5 means I am going from one to 5
01:16 < zyzzyva> java has a foreach
01:16 < mdedetrich> yes, which doesn't communicate things as clearly
01:17 < mdedetrich> so its less expressive
01:17 < mdedetrich> there is no reason to 'iterate'
01:17 < mdedetrich> iterating is a concept that machines do, its not something that humans have to do
01:17 < mdedetrich> when dealing with language
01:17 < zyzzyva> 1..5 is a mental elision
01:18 < zyzzyva> you are mentally interpolating that its going from 1 to 5
01:18 < zyzzyva> how is that different from range(1,5)
01:18 < mdedetrich> nothing
01:18 < zyzzyva> so next step
01:18 < zyzzyva> nothing in java stops you from writing range
01:18 < zyzzyva> which does that
01:18 < mdedetrich> *facepalms*
01:19 < mdedetrich> expressiveness has nothing god damn to do with what a language can or cannot do
01:19 < zyzzyva> it has *everything* to do with what it can and can't do
01:19 < mdedetrich> every language that is turing complete
01:19 < zyzzyva> see the definition
01:19 < mdedetrich> can do god damn anything
01:19 < mdedetrich> according to you
01:19 < zyzzyva> "the breadth of ideas that can be represented and communicated in that language"
01:19 < mdedetrich> brainfuck is expressive
01:19 < mdedetrich> COMMUNICATED
01:19 < mdedetrich> FOOL
01:20 < zyzzyva> how do you open a socket
01:20 < zyzzyva> yes its the breadth of ideas
01:20 < mdedetrich> communication has NOTHING to do with what a language ultimately can do
01:20 < mdedetrich> i can tell someone " go make a burger"
01:20 < mdedetrich> that has nothing to do with whether or not a person can actually make  burger or not
01:20 < mdedetrich> I am just communicating to him that I want to make him a burger
01:21 < Zak> whats the point of this argument
01:21 < zyzzyva> so why is that more expressive than "for (int i : range(1,5))"
01:21 < mdedetrich> that wasn't the entire problem
01:21 < mdedetrich> try adding 5 to everything in that range
01:21 < mdedetrich> in java
01:21 < mdedetrich> and returning another range
01:21 < mdedetrich> from that
01:21 < mdedetrich> you have to make a new collection (array or list)
01:21 < mdedetrich> assign a variable
01:21 < holzp> is not expressiveness a combination of brevity and depth of capability, indivisible?
01:21 < mdedetrich> add 5 to that
01:22 < mdedetrich> then finally
01:22 < mdedetrich> return that variablke
01:22 < zyzzyva> so you want range(6,10)
01:22 < mdedetrich> in scala you can just do map
01:22 < mdedetrich> so with my burger example
01:22 < mdedetrich> instead of saying "go make a burger"
01:22 < mdedetrich> java equivalent would be
01:22 < Zak> we really need to ban the discussion of other languages in here
01:23 < mdedetrich> go make a piece of food that contains a bun, is constructed with a piece of meat in between some salad and hand it over to me
01:23 < Zak> unless it's a one-off reference
01:23 < zyzzyva> so you have to do more mental legwork to understand that's happening with map
01:23 < timeturner> the point of this argument is to have an argument
01:23 < Zak> timeturner: that's a side-effect, not the point
01:23 < mdedetrich> map just means "apply something to everything in this collection, return the result"
01:23 < timeturner> so that we can pass the argument to a function an return the conclusion that javascript rules all
01:23 < holzp> ok lets argue something more into the node ecosystem...
01:23 < Zak> a very common side-effect, which this channel suffers too frequently
01:23 < Lorentz> we should talk about cool things you can do with node
01:23 < Zak> ^
01:24 < timeturner> node.js dudes
01:24 < holzp> im starting a node/express project and am agnostic to the rendering engines I can use
01:24 < zyzzyva> mdedetrich: now lets say you want to add 1 to the middle element
01:24  * timeturner /clear
01:24 < holzp> so which should i use?
01:24 < holzp> jade? ejs?
01:24 < holzp> have at it!
01:24 < timeturner> jade dude
01:24 < timeturner> jade rocks
01:24 < zyzzyva> ok im done with the discussion, we'll agree to disagree
01:24 < mdedetrich> well in scala you can val (a,b) = 1..5.split()
01:24 < mdedetrich> a + someelement + b
01:24 < holzp> it must lack something or everyone would use it, why does jade not rock?
01:25 < timeturner> well technically jade does rock
01:25 < mdedetrich> jade is awesome
01:25 < timeturner> because it's a "rock"
01:25 < timeturner> jade doesn't rock, it stones
01:25 < holzp> jade: 2, everything else: 0
01:25 < holzp> nobody wants to speak up for ejs? 
01:26 < harrisonm> I just started this stuff
01:26 < harrisonm> I can't really speak for anything but jade
01:26 < harrisonm> or derby/racer
01:26 < mdedetrich> zyzzyva: all I am saying is that you're definition of expressiveness is wrong, if you don't believe me, go to a respected university and ask someone who has doctorate in computer science
01:26 < mdedetrich> or some related field
01:27 < mdedetrich> ill just leave it to that
01:27 < timeturner> ejs is "eh" js
01:27 < timeturner> but jade is a stone
01:27 < timeturner> precious stone
01:27 < zyzzyva> :) lol
01:27 < Zak> http://en.wikipedia.org/wiki/Expressive_power
01:28 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
01:28 < zyzzyva> mdedetrich: its far more subtle than you realize and id say the same of you
01:28 < mdedetrich> well no, you are completely ignoring the word communication
01:28 < holzp> jade beats ejs in github fwiw
01:28 < mdedetrich> when you argued the definition of expressive
01:29 < zyzzyva> the key phrase is "breadth of ideas"
01:29 < mdedetrich> no the key phrase
01:29 < mdedetrich> is the whole sentance
01:29 < zyzzyva> the textbook definitions point to breadth of ideas that can be represented
01:29 < mdedetrich> not what part of it suits your argument
01:29 < zyzzyva> regardless of whether its via iteration or map
01:29 < mdedetrich> you can't just cherry pick
01:29 < mdedetrich> stuff out of the definition
01:29 < mdedetrich> to suite your argument
01:29 < zyzzyva> look at the example
01:29 < zyzzyva> the example isnt about syntax
01:29 < zyzzyva> its about functionality
01:29 < mdedetrich> what example
01:29 < holzp> jade seems to have a lot more support
01:30 < zyzzyva> For example, the Web Ontology Language expression language profile (OWL2 EL) lacks ideas (such as negation) which can be expressed in OWL2 RL (rule language). OWL2 EL may therefore be said to have less expressive power than OWL2 RL. 
01:30 < mdedetrich> yes
01:30 < mdedetrich> but you can still do something that equates to negation
01:30 < mdedetrich> in OWL2 EL
01:30 < Zak> * -1
01:30 < zyzzyva> now in your map example, the same idea can be expressed using iteration
01:31 < mdedetrich> I can still write a program in OWL2 EL that does negation
01:31 < mdedetrich> or something that equates to negation
01:31 < mdedetrich> if you can't then the language is not turing complete
01:31 < ang3lfir3> yall still talking about doin the needful?
01:31 < mdedetrich> you can for example do 2's complement
01:31 < mdedetrich> thats the equivalent of negation
01:31 < mdedetrich> it does the exact same thing
01:31 < mdedetrich> its just that -(number)
01:31 < mdedetrich> is a lot easier
01:31 < zyzzyva> you can have turing complete languages that can't do certain things
01:32 < mdedetrich> then doing a twos complement
01:32 < mdedetrich> zyzzyva: then its not turing complete
01:32 < mdedetrich> :)
01:32 < zyzzyva> turing complete refers to a set of computations, and not to certain things like network I/O
01:32 < mdedetrich> which is irrelevant
01:32 < mdedetrich> if the language is turing complete
01:33 < mdedetrich> then you can just write code so you can do I/O
01:33 < mdedetrich> without changing the language
01:33 < Zak> http://en.wikipedia.org/wiki/Turing_completeness
01:33 < holzp> everyauth or passport? go!
01:33 < mdedetrich> that just means that the language is missing a 'library', not that it cannot do network IO
01:34 < mdedetrich> if a language is turing complete, it can do network IO, whether or not a library for it exists or not is another question
01:34 < mdedetrich> network IO boils down to a set of computations, its not 'black magic'
01:35 < mdedetrich> everything does
01:35 < timeturner> it's all black magic
01:35 < zyzzyva> we can find a set of expressions which are terser in java than in scala
01:35 < timeturner> :O
01:35 < mdedetrich> zyzzyva: maybe
01:35 < zyzzyva> but would that make scala less expressive?
01:36 < mdedetrich> zyzzyva: not really, because there are probably 10x more examples where scala is more terse/expressive
01:36 < mdedetrich> zyzzyva: than java
01:36 < mdedetrich> especially when doing parallel programming
01:36 < mdedetrich> for example in previous example
01:36 < mdedetrich> 1..5.fmap(_ + 5)
01:36 < mdedetrich> will do that equation in parallel on many cores
01:36 < zyzzyva> ok so parallel.for or some equivalent
01:36 < zyzzyva> actually that's .NET
01:36 < mdedetrich> and scala
01:36 < mdedetrich> oh wait
01:36 < mdedetrich> sorry
01:37 < mdedetrich> pmap
01:37 < mdedetrich> is what it is in scala
01:37 < mdedetrich> wait sorry
01:37 < mdedetrich> that would be
01:37 < mdedetrich> 1..5.par.map(_ + 5)
01:37 < mdedetrich> god dammit, know to many languages
01:37 < mdedetrich> get confused :(
01:38 < Zak> public pmap() { self foo.bar[]. }
01:38 < Zak> thats when all the languages got together and had a big orgy
01:38 < zyzzyva> but at that point you have to tell it to do it in parallel
01:38 < Zak> speaking of which, there's a funny website that compares languages to cars
01:38 < mdedetrich> well java
01:39 < mdedetrich> doesn't do anything
01:39 < mdedetrich> in parallel
01:39 < mdedetrich> unless you tell it to either
01:39 < zyzzyva> java has libraries to do it
01:39 < zyzzyva> which as you just argued is fairgame :)
01:39 < mdedetrich> so does scala
01:39 < Zak> http://users.cms.caltech.edu/~mvanier/hacking/rants/cars.html
01:39 < zyzzyva> so you havent established anything
01:39 < zyzzyva> in both cases you still need to add cruft to indicate that its to be done in parallel
01:39 < mdedetrich> I mean are you arguing that because we I used the word par
01:39 < mdedetrich> that is different
01:39 < Zak> Javascript didn't make the list :(
01:39 < mdedetrich> importing a java libraru
01:39 < mdedetrich> *library
01:39 < zyzzyva> im arguing because now you have to add extra stuff to indicate that it can be done in parallel
01:40 < zyzzyva> id concede
01:40 < zyzzyva> IF
01:40 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
01:40 < mdedetrich> that has its own word now in parallel
01:40 < mdedetrich> you have to do that in java as well
01:40 < zyzzyva> you didnt have to indicate that the loop could be done in parallel
01:40 < janmower> network and turing completeness go together like applesauce and newtonian physics
01:40 < mdedetrich> you need to include a library
01:40 < mdedetrich> and use that library
01:40 < mdedetrich> if you want to do something in paralell
01:40 < zyzzyva> im not saying java is more expressive
01:40 < mdedetrich> java will never paralelliz anything
01:40 < janmower> yes bf is turing complete, but i'd like to see apache httpd in bf
01:40 < zyzzyva> you are saying that scala is more expressive
01:40 < mdedetrich> automatically
01:40 < mdedetrich> yes I am
01:40 < zyzzyva> there's a polynomial bound
01:41 < mdedetrich> like if you actually provided code
01:41 < mdedetrich> to doing something in parallel with java
01:41 < zyzzyva> it either uses logspace or p-time reducability
01:41 < mdedetrich> it would be less expressive
01:41 < mdedetrich> even when using libraries
01:41 < mdedetrich> like akka
01:41 < mdedetrich> I know this because I have used both languages extensively
01:41 < mdedetrich> in java, you still have to wrap all your constructs as classes
01:42 < zyzzyva> its a long mess to get to something like the keyword pmap but writing a Parallel.For is doable
01:42 < mdedetrich> you can't really do anonymous functions (or high order functions)
01:42 < mdedetrich> zyzzyva: yes, and then try putting something
01:42 < mdedetrich> in that paralell.for
01:42 < mdedetrich> you have to wrap it in a class
01:42 < mdedetrich> java doesn't have anonymous functions
01:42 < zyzzyva> you cant use an anonymous class there?
01:43 < mdedetrich> you would have to use a class
01:43 < mdedetrich> that extends some abstract class
01:43 < mdedetrich> which means writing a new class
01:43 < mdedetrich> making it extend something
01:43 < mdedetrich> implementing some methods
01:43 < mdedetrich> and all that class does is add 5 to something
01:43 < mdedetrich> then you feed that class
01:43 < mdedetrich> into your Parallel.For
01:43 < zyzzyva> ? you can write an anonymous class with just the method you need
01:44 < mdedetrich> yes
01:44 < mdedetrich> I said that
01:44 < mdedetrich> you still have to create a class
01:44 < zyzzyva> if you want to point to expressiveness by character count
01:44 < mdedetrich> to express 'add 5 to something'
01:44 < zyzzyva> we could create a language which fully exploits every character
01:44 < mdedetrich> its not character count
01:44 < mdedetrich> we are expressing
01:44 < mdedetrich> 'add 5 to something'
01:44 < zyzzyva> hell, we could enumerate every kolmogorov computer if you really wanted to
01:44 < mdedetrich> where that something is anything
01:44 < mdedetrich> thats a number
01:45 < mdedetrich> yes/no?
01:45 < zyzzyva> adding 5 to something is the same conceptually whether we do it by map or for loop
01:45 < mdedetrich> answer the question
01:45 < mdedetrich> we want to express
01:45 < mdedetrich> add 5 to something
01:45 < mdedetrich> yes/no?
01:45 < zyzzyva> sure
01:45 < zyzzyva> we want to add 5 to every element in a list
01:45 < mdedetrich> in java, you can do that as an expression
01:45 < mdedetrich> but that something
01:45 < mdedetrich> can't be generic
01:45 < mdedetrich> to make a generic add 5 to something
01:46 < mdedetrich> that can be applied anywhere
01:46 < mdedetrich> you have to wrap it in a class
01:46 < zyzzyva> what does scala do when you add 5 to a class ?
01:46 < mdedetrich> hence anonymous classes
01:46 < zyzzyva> *to an existing java class
01:46 < mdedetrich> what you mean add 5 to a class
01:47 < mdedetrich> we are adding 5 to a number
01:47 < zyzzyva> so if you concede its a number you can just iterate
01:47 < mdedetrich> in scala
01:47 < mdedetrich> you can do
01:47 < mdedetrich> (x: Int) => x + 5
01:47 < mdedetrich> that can be used anywhere
01:47 < mdedetrich> it can be used by map in iteration
01:47 < mdedetrich> in paralell
01:48 < mdedetrich> in structured typing
01:48 < mdedetrich> if you assign that to a variable
01:48 < zyzzyva> so you can write a function
01:48 < mdedetrich> i.e.
01:48 < zyzzyva> *a class with a function to do that
01:48 < mdedetrich> def b = (x: Int) => x + 5
01:48 < mdedetrich> then do
01:48 < mdedetrich> 1..5.map(b)
01:48 < mdedetrich> yes but in java
01:48 < mdedetrich> you cannot accept functions
01:48 < mdedetrich> in arguments
01:48 < mdedetrich> :)
01:48 < zyzzyva> you write the class to do that
01:48 < mdedetrich> and not just a class
01:49 < mdedetrich> a class that has to extend somethng
01:49 < zyzzyva> you pass functors
01:49 < mdedetrich> which is less expressive
01:49 < Zak> a class which implements an interface usually
01:49 < mdedetrich> yup
01:49 < mdedetrich> or an abstract class
01:49 < zyzzyva> what do inner classes extend
01:49 < mdedetrich> have you coded in java
01:49 < mdedetrich> ?
01:50 < zyzzyva> a long time ago
01:50 < zyzzyva> an anonymous inner class
01:50 < mdedetrich> yes
01:50 < mdedetrich> so you create a new class
01:50 < mdedetrich> that extends something
01:50 < mdedetrich> in scala you don't have to extend anything
01:50 < mdedetrich> there is no reason why you should be extending something
01:51 < zyzzyva> you are then going back to character count
01:51 < mdedetrich> .....
01:51 < mdedetrich> no, this is an issue with java not being able to EXPRESS functional programming
01:51 < mdedetrich> hence it is LESS expressive
01:51 < zyzzyva> you are trying to express a style and not a functionality
01:51 < mdedetrich> im expressing an idea
01:52 < mdedetrich> as per
01:52 < zyzzyva> the idea is expressed in both languages, no loss
01:52 < mdedetrich> the wikipedia definition
01:52 < mdedetrich> no
01:52 < mdedetrich> I am expressing
01:52 < mdedetrich> functional programming
01:52 < mdedetrich> as an idea
01:52 < mdedetrich> java cannot do that
01:52 < zyzzyva> you are expressing the idea of adding 5 to every element
01:52 < mdedetrich> and I am also expressing pure functions
01:52 < mdedetrich> as an idea
01:53 < zyzzyva> yes or no: can you do everything in scala using java?
01:53 < mdedetrich> this isn't a stylistic thing
01:53 < zyzzyva> is there a functionality that's missing
01:53 < mdedetrich> thats irrelevant
01:53 < zyzzyva> no that's the essence of the question
01:53 < mdedetrich> to expressiveness
01:53 < mdedetrich> yes but its also irrelevant
01:53 < zyzzyva> you are trying to say somehow that the lack of a map functional as a three letter word makes java less expressive
01:54 < zyzzyva> which is character count
01:54 < mdedetrich> no I am trying to express the fact that java cannot accept arbitrary expressions as parameters in functions without wrapping them in classes
01:54 < mdedetrich> as less expressive
01:54 < mdedetrich> being more expressive usually does reduce character count
01:54 < mdedetrich> that is a side effect of it
01:54 < mdedetrich> not always, but most of the time
01:55 < Zak> character count isn't important anyway
01:55 < mdedetrich> I am not sure why you are so fixated on the concept of character count
01:55 < mdedetrich> in your example
01:55 < Zak> there's nothing worse than somebody using abbreviated variable or function names
01:55 < mdedetrich> if I wanted to make a generic add 5 to something
01:55 < Zak> and you nfi what they are supposed to represent
01:55 < mdedetrich> you can't do that in java
01:55 < zyzzyva> character count is important in some realms, but not in the definition of expressiveness :)
01:55 < mdedetrich> its not 'generic'
01:55 < mdedetrich> you can make a class
01:55 < mdedetrich> but in java
01:55 < janmower> ok if you want to understand the future of parallelism, grok this:   input = clCreateBuffer(context,  CL_MEM_READ_ONLY, sizeof(float) * count, NULL, NULL);
01:55 < mdedetrich> classes can only extend one thing
01:55 < Zak> readability > character count
01:56 < Zak> and i'd argue that expressiveness helps readability
01:56 < mdedetrich> so in your example, you make a class
01:56 < mdedetrich> you make it extend 'runMap' abstract class
01:56 < mdedetrich> but then that class can only be used in your java's map
01:56 < mdedetrich> it can't be used in other java functions which would do something similar (but aren't a map)
01:56 < zyzzyva> Zak: like coffeescript's spacing hell
01:57 < zyzzyva> you can make generics in java
01:57 < mdedetrich> the above problem is not solved with generics
01:57 < mdedetrich> try harder
01:57 < zyzzyva> are you saying you want to make the generic version of the map functional?
01:57 < mdedetrich> generics is type polymorphism, that has nothing to do with higher order functions
01:57 < zyzzyva> or the one that adds 5 to every element
01:58 < mdedetrich> make a generic
01:58 < mdedetrich> add 5 to every element
01:58 < mdedetrich> that can be used everywhere
01:58 < mdedetrich> without having to create an extra implementation or wrapper
01:58 < mdedetrich> for that add 5 to something
01:58 < zyzzyva> that's character count
01:59 < Zak> its not
01:59 < mdedetrich> so is negation
01:59 < mdedetrich> in your previous example
01:59 < mdedetrich> then
01:59 < Zak> as mdedetrich said, it's just a trait of expressiveness
01:59 < mdedetrich> your logic is flawed
01:59 < mdedetrich> [11:29:12] <zyzzyva> For example, the Web Ontology Language expression language profile (OWL2 EL) lacks ideas (such as negation) which can be expressed in OWL2 RL (rule language). OWL2 EL may therefore be said to have less expressive power than OWL2 RL.
01:59 < mdedetrich> this
01:59 < mdedetrich> is your previous example
01:59 < mdedetrich> doing negation
01:59 < mdedetrich> such as -5
01:59 < mdedetrich> you would argue
01:59 < mdedetrich> its just 'character count'
01:59 < mdedetrich> even though you can do nogation
01:59 < mdedetrich> in OWL2 EL
02:00 < zyzzyva> thats the second paragraph of http://en.wikipedia.org/wiki/Expressive_power
02:00 < Zak> just because a red ferrari is faster than a blue SUV, doesn't mean that red vehicles are faster than blue vehicles
02:00 < mdedetrich> its just you have to swap all the bits
02:00 < mdedetrich> again, your logic
02:00 < mdedetrich> is incorrect
02:00 < Zak> yeah
02:00 < mdedetrich> with the own example you provided
02:00 < Zak> take a breather
02:00 < Zak> you're obviously missing the point
02:00 < Zak> it will come to you later
02:00 < mdedetrich> I negate something in OWL2 RL, I would do
02:00 < mdedetrich> -100
02:01 < mdedetrich> or negative of 100
02:01 < mdedetrich> in OWL2 EL, I would swap all the bits
02:01 < mdedetrich> and add one
02:01 < mdedetrich> (2s complement)
02:01 < mdedetrich> they both DO the exact same thing
02:01 < mdedetrich> -100 is clearly much lower in character count
02:01 < mdedetrich> then bit shifting 100
02:01 < mdedetrich> *bit swapping
02:01 < mdedetrich> so using your own logic
02:01 < mdedetrich> OWL2 EL is not less expressive then OWL2 RL
02:02 < mdedetrich> even though what you linked says otherwise
02:02 < mdedetrich> as I said, you don't understand the definition
02:02 < mdedetrich> of expressive
02:02 < zyzzyva> how are you swapping the bits
02:02 < mdedetrich> in the context of computer science in languages
02:03 < zyzzyva> explain how you are doing that in EL
02:04 < mdedetrich> well actually the easiest way, after reading it in EL
02:04 < mdedetrich> is to do 0 minus that number
02:04 < mdedetrich> which you can't do in one character :)
02:05 < mdedetrich> that would be like 0 - number
02:05 < mdedetrich> if they are talking about logical negation
02:06 < mdedetrich> then its an extra if statement
02:06 < LouisT> Evening.
02:06 < mdedetrich> or set negation
02:06 < mdedetrich> would be universal set minus set A
02:06 < mdedetrich> all of which is more character count then just -something
02:07 < zyzzyva> explain your last point again, because i dont see where there's a bit specification for numbers
02:07 < zyzzyva> 2s complement works if you've capped the bit limit, unless you want to use 2adic numbers
02:08 < mdedetrich> you can swap bits in any language
02:08 < mdedetrich> just convert number to binary format
02:08 < mdedetrich> go through every character
02:08 < mdedetrich> if its 0, swap to 1, and vice versa
02:08 < mdedetrich> then add one
02:08 < mdedetrich> and voila
02:09 < mdedetrich> (convert back to a number0
02:09 < mdedetrich> in whatever base you are dealing with
02:09 < zyzzyva> not base, im looking at the owl spec and havent seen where they defined integers with a specified bit count
02:10 < zyzzyva> nonNegativeInteger := a nonempty finite sequence of digits between 0 and 9  
02:10 < mdedetrich> you don't need that to do a twos complement....
02:10 < zyzzyva> the transform is exponential, which *is* less expressive
02:11 < mdedetrich> .........
02:11 < zyzzyva> unlike the java example where the transform is sublinear
02:11 < mdedetrich> wtf
02:11 < mdedetrich> are you going on about
02:11 < mdedetrich> you completely derailed the topic
02:11 < mdedetrich> I'm sorry but just accept you are wrong, we are not talking about performance at all here
02:12 < zyzzyva> no you miss the point
02:12 < mdedetrich> stop bringing in random irrelevant stuff into the argument
02:12 < zyzzyva> the transform between java and scala is sublinear
02:12 < mdedetrich> you were asking how to take a negative in that language
02:12 < zyzzyva> in your example its exponential
02:12 < mdedetrich> I just told you how
02:12 < mdedetrich> so what
02:12 < zyzzyva> im not seeing the specification that allows you to interpret the number as a set of bits
02:12 < mdedetrich> you can convert any number to a set of bits
02:12 < mdedetrich> its called changing base
02:13 < mdedetrich> there is an algorithm for that
02:13 < mdedetrich> jesus
02:13 < zyzzyva> that algorithm is *exponential*
02:13 < mdedetrich> AND!!!!!!!
02:13 < zyzzyva> that makes the transform superpolynomial
02:13 < mdedetrich> so what
02:13 < timeturner> 
02:13 < mdedetrich> why are you bringing performance into this
02:14 < mdedetrich> you were asking
02:14 < mdedetrich> HOW to bitshift a number
02:14 < mdedetrich> ffs
02:14 < zyzzyva> the question is about expressiveness at the end of the day
02:14 < mdedetrich> do you see
02:14 < mdedetrich> performance
02:14 < zyzzyva> you are talking abotu a *far more complicated* example of two things being equivalent
02:14 < mdedetrich> ANYWHERE
02:14 < mdedetrich> in YOUR definition
02:14 < zyzzyva> and the far *simpler* example isnt
02:14 < mdedetrich> which YOU provided
02:14 < zyzzyva> that's your scope
02:14 < zyzzyva> putting a polynomial bound is perfectly acceptable
02:14 < mdedetrich> no
02:14 < mdedetrich> lets
02:14 < mdedetrich> put things
02:14 < mdedetrich> perfectly straight here
02:14 < mdedetrich> 1.
02:14 < mdedetrich> performance
02:14 < mdedetrich> has jack shit
02:14 < zyzzyva> as is the case in most areas of complexity reductions
02:15 < mdedetrich> to do withe expressiveness
02:15 < mdedetrich> NOTHING AT ALL
02:15 < mdedetrich> its not in YOUR definition
02:15 < pyrotechnick> mdedetrich: calm your chops.
02:15 < zyzzyva> if so, then scala and javascript are equivalent
02:15 < mdedetrich> in expressiveness, probably yeah
02:15 < mdedetrich> I would agree with that
02:15 < zyzzyva> then we're done
02:16 < mdedetrich> java is less expressive then both
02:16 < zyzzyva> nope
02:16 < Jona> Who here has created sophisticated apps using node JS
02:16 < Jona> ?
02:16 < mdedetrich> im sorry
02:16 < mdedetrich> you are wrong
02:16 < mdedetrich> you can't even read
02:16 < mdedetrich> your own definition
02:16 < zyzzyva> the definition is clear
02:16 < mdedetrich> or you are adding things to it
02:16 < mdedetrich> yes
02:16 < mdedetrich> can you point to me
02:16 < mdedetrich> where performance
02:16 < mdedetrich> is mentioned
02:16 < mdedetrich> in that definition
02:16 < zyzzyva> "breadth of ideas that can be represented and communicated in that language."
02:17 < mdedetrich> because I sure as hell cannot
02:17 < zyzzyva> if you want to argue that character count matters, then we have to look at the complexity of the transforms
02:17 < mdedetrich> ......
02:17 < mdedetrich> thats a logical fallacy
02:17 < zyzzyva> if not, then scala and java are equally expressive
02:17 < zyzzyva> try again
02:17 < mdedetrich> thats logically fallicious
02:17 < mdedetrich> you can't just bring X into an argument to prove a completely different point Y
02:17 < zyzzyva> its either X or Y
02:17 < zyzzyva> and in this case
02:17 < zyzzyva> " breadth of ideas that can be represented and communicated in that language."
02:18 < mdedetrich> no
02:18 < mdedetrich> where is performance
02:18 < zyzzyva> either java and scala are compared based on whether the idea can be represented or no
02:18 < mdedetrich> mentioned in there
02:18 < zyzzyva> you make a call
02:18 < mdedetrich> can you please mention
02:18 < mdedetrich> where performance
02:18 < mdedetrich> is mentioned
02:18 < mdedetrich> in that definition
02:18 < mdedetrich> im waiting
02:19 < zyzzyva> start from my question
02:19 < zyzzyva> we'll get there
02:19 < zyzzyva> " breadth of ideas that can be represented and communicated in that language."
02:19 < mdedetrich> yes and?
02:19 < zyzzyva> are we comparing based on ability to express idea or on something else?
02:20 < zyzzyva> if its about the ability to express the idea, id argue that everything you would want to do in scala, including map, you can do in java
02:20 < mdedetrich> i am ability to expresss idea, you are talking about performance
02:20 < mdedetrich> or at least you ended up
02:20 < mdedetrich> doing so
02:20 < zyzzyva> performance comes in only when you cant stick to the original definition
02:20 < zyzzyva> performance in the form of polynomial complexity is necessary
02:20 < mdedetrich> which you did
02:20 < zyzzyva> otherwise its an arbitrary distinction
02:20 < mdedetrich> <zyzzyva> performance comes in only when you cant stick to the original definition <- you are doing this
02:20 < mdedetrich> you are not sticking to your definition
02:21 < mdedetrich> so you brought in performance
02:21 < zyzzyva> the original definition is " breadth of ideas that can be represented and communicated in that language."
02:21 < zyzzyva> and ive demonstrated that map can be expressed in java
02:21 < mdedetrich> no it cannot
02:21 < zyzzyva> whether its terse is an issue of character count
02:21 < mdedetrich> the idea of map
02:21 < mdedetrich> cannot be expressed
02:21 < mdedetrich> in java
02:21 < zyzzyva> what is the idea of map?
02:21 < zyzzyva> what in your head is the idea of map
02:21 < mdedetrich> map takes an ANONYMOUS function, and applies that ANONYMOUS function to every element
02:22 < mdedetrich> in a collection
02:22 < zyzzyva> nope
02:22 < mdedetrich> yes
02:22 < zyzzyva> definition doesnt have anonymous in it
02:22 < zyzzyva> map applies a function (anonymous or not) to each element of a list and returns a list
02:22 < mdedetrich> well java cannot do either
02:22 < deoxxa> a map is a piece of paper that tells you where things are
02:22 < deoxxa> you idiots
02:22 < mdedetrich> you cannot use functions as arguments in java
02:22 < zyzzyva> wait mdedetrich where in the definition does anonymous appear?
02:22 < mdedetrich> so you are still wrong
02:22 < zyzzyva> you can represent functions as function objects
02:23 < mdedetrich> no you cant
02:23 < mdedetrich> not in java
02:23 < zyzzyva> in java you have an interface with a simple method
02:23 < zyzzyva> doit
02:23 < mdedetrich> you can put them inside classes, but classes are not functions
02:23 < mdedetrich> thats not a functin
02:23 < mdedetrich> *function
02:23 < mdedetrich> so you are wrong
02:23 < mdedetrich> thats a class implementing an interface
02:23 < zyzzyva> the definition doesnt say take a function outside of a class
02:23 < zyzzyva> it doesnt specify how the function exists
02:23 < mdedetrich> then you can argue anything is correct
02:24 < zyzzyva> the mathematical morphism doesnt have that requirement
02:24 < mdedetrich> map has to take A FUNCTIon
02:24 < mdedetrich> not a function INSIDE A CLASS
02:24 < zyzzyva> a function object is perfectly acceptable
02:24 < mdedetrich> the definition of map is that IT TAKES A FUNCTIOn
02:24 < mdedetrich> a class is not a function
02:24 < zyzzyva> you are passing the function via the class
02:24 < mdedetrich> it doesn't matter if the class contains a function
02:24 < mdedetrich> yes
02:24 < zyzzyva> that the function isnt being passed by name directly
02:24 < mdedetrich> thats not a function
02:24 < mdedetrich> so its not map then
02:24 < zyzzyva> doesnt change the fact that a function is being passed
02:25 < mdedetrich> no
02:25 < pyrotechnick> https://github.com/Byzantium/Byzantium
02:25 < pyrotechnick> this is freaking awesome
02:25 < mdedetrich> a class is being passed
02:25 < mdedetrich> you are passing a class
02:25 < mdedetrich> not a function, a class
02:25 < zyzzyva> wait wait wait
02:25 < mdedetrich> I am being literal and sticking to the definition
02:25 < mdedetrich> you are passing in classes
02:25 < zyzzyva> now you aren't talking about the conceptual idea any more
02:25 < zyzzyva> you have the same expressivity by the definition
02:25 < mdedetrich> yes I am
02:25 < mdedetrich> the idea of MAP is it must take a FUNCTIOn
02:25 < zyzzyva> whether the function is in a class or not doesnt matter to the definition
02:25 < mdedetrich> i want to EXPRESS that idea in java
02:26 < zyzzyva> the definition doesnt say anonymous function
02:26 < mdedetrich> it says function
02:26 < mdedetrich> so in java
02:26 < zyzzyva> yeah passing a class with that function does express it
02:26 < mdedetrich> i cannot express map
02:26 < mdedetrich> i cannot express map in java
02:26 < zyzzyva> if you use the specific definition of anonymous function (which has no bearing in any real definition) then sure
02:26 < mdedetrich> or if you use the definition
02:26 < zyzzyva> if you use the general definition then you can express map in java
02:26 < mdedetrich> of function
02:26 < mdedetrich> same dea;l
02:27 < mdedetrich> the generic definition requires a function
02:27 < mdedetrich> java doesn't do that
02:27 < mdedetrich> so you are wrong
02:27 < zyzzyva> you are passing a function via an object
02:27 < mdedetrich> no you are passing in a function
02:27 < zyzzyva> you can pass a function in multiple ways
02:28 < mdedetrich> if you are passing in a function via an object
02:28 < mdedetrich> you create a new object
02:28 < mdedetrich> and assign a variable inside that function
02:28 < mdedetrich> *assign a variable inside that object
02:28 < mdedetrich> which points to a function
02:28 < mdedetrich> and if you do that in scala, you can't put that into map
02:29 < mdedetrich> you would have to unwrap the object to get the function out of it
02:29 < sinclairzx> mdedetrich: why would you do that?
02:29 < mdedetrich> you wouldn't
02:29 < mdedetrich> thats stupid
02:29 < sinclairzx> agreed
02:29 < mdedetrich> zyzzyva is trying to argue that you can express map in java
02:29 < mdedetrich> you cannot
02:29 < mdedetrich> at least not what the actual definition of map is
02:30 < zyzzyva> hold on, does your conception of the actual definition of map distinguish between a function and a function object?
02:30 < sinclairzx> var d = (message:string) => { return message + ' idea' }; d("bad");
02:31 < mdedetrich> object is a label
02:31 < mdedetrich> you cannot assign variables to functions in java
02:31 < mdedetrich> so you can't pass functions around
02:31 < mdedetrich> os you cannot pass a function to be used with map
02:31 < mdedetrich> in scala or javascript
02:31 < zyzzyva> you can pass functions around via function objects, yes?
02:31 < mdedetrich> everything in a scala is an object, thats not really relevant
02:31 < zyzzyva> that you can represent a function as a variable doesnt change the expressiveness of the language
02:32 < mdedetrich> yes it does
02:32 < mdedetrich> because without that
02:32 < mdedetrich> you can't do map
02:32 < mdedetrich> :)
02:32 < zyzzyva> can you do the same effect (applying the function to every element)
02:32 < zyzzyva> this is simple
02:32 < mdedetrich> thats effect
02:32 < mdedetrich> I want to express map
02:32 < mdedetrich> as an idea
02:32 < zyzzyva> map is a transformation
02:32 < zyzzyva> *morphism
02:32 < mdedetrich> I don't care about an arbitrary method that ends up doing the same thing
02:32 < zyzzyva> let me be specific
02:32 < mdedetrich> as a map
02:33 < mdedetrich> I want to be express map as an idea
02:33 < mdedetrich> that means
02:33 < mdedetrich> map needs to take in a function
02:33 < zyzzyva> so you are restricting the definition of function 
02:33 < mdedetrich> thats the definition of map
02:33 < mdedetrich> .....
02:33 < mdedetrich> a function is not a class
02:33 < zyzzyva> for the purpose of expression of the idea of map
02:34 < zyzzyva> again, the idea is to apply the function to every element
02:34 < mdedetrich> then you are changing the definition
02:34 < mdedetrich> of function
02:34 < mdedetrich> to class
02:34 < zyzzyva> you can do that with the object
02:34 < mdedetrich> to suite your argument
02:34 < zyzzyva> what is the idea of map
02:34 < mdedetrich> apply a function over every element in a collection
02:34 < zyzzyva> right
02:34 < mdedetrich> not a calss
02:34 < mdedetrich> *class
02:34 < mdedetrich> a function
02:35 < mdedetrich> anonymous function just means you don't have to assign the function to a variable beforehand
02:35 < mdedetrich> same deal with classes and anonymous classes
02:35 < zyzzyva> you are passing an object with a set specification for how the function is invoked
02:35 < zyzzyva> and are invoking it
02:35 < zyzzyva> on every element
02:35 < mdedetrich> im passing in a function
02:35 < zyzzyva> the net effect is the same
02:35 < zyzzyva> that its being passed as a function or a class is relatively arbitrary
02:36 < mdedetrich> which is not relevant
02:36 < mdedetrich> to expressiveness
02:36 < mdedetrich> expressiveness has no relation to net effect
02:36 < mdedetrich> you are forgetting that
02:36 < zyzzyva> " breadth of ideas that can be represented and communicated in that language."
02:36 < mdedetrich> yes communicated
02:36 < zyzzyva> the idea is to apply the transformation as described by the function
02:36 < mdedetrich> nothing to do with effect
02:36 < nodebie> hi there, is there any authorization module out there that lets me control access to a page/route other than Gandalf?
02:36 < mdedetrich> the idea is map
02:36 < zyzzyva> describing it as a function wrapped in an object is no difference
02:37 < mdedetrich> i am trying to communite map as an idea
02:37 < nodebie> i.e which bunch of users allowed to post/delete/edit which post
02:37 < mdedetrich> according to your definition
02:37 < zyzzyva> the idea of map isnt to apply a specific form of a function
02:37 < zyzzyva> the idea of map is to apply a transformation to each element
02:37 < mdedetrich> its to apply a function
02:37 < mdedetrich> you just changed your definition
02:37 < mdedetrich> you were saying function before
02:37 < mdedetrich> now you are saying transformation
02:38 < mdedetrich> stop moving the goalposts
02:38 < zyzzyva> if you dont think
02:38 < mdedetrich> thats like 7th logical fallacy you did
02:38 < zyzzyva> that function objects are functions
02:38 < zyzzyva> then i have to be specific in my use of words
02:38 < mdedetrich> transformation
02:38 < mdedetrich> is not a function
02:38 < mdedetrich> you changed the definition
02:38 < nodebie> anybody minds to help?
02:38 < mdedetrich> stick to the definition please
02:38 < nodebie> if you don't mind pausing the debate (sorry for the rudeness =P)
02:38 < mdedetrich> or gtfo
02:38 < zyzzyva> function is not defined as a java function
02:39 < zyzzyva> mdedetrich: where in the definition of map does it say java function or scala function?
02:39 < mdedetrich> it says generic function
02:39 < mdedetrich> a transformation is not a function
02:39 < zyzzyva> what is a "generic function"
02:39 < mdedetrich> zyzzyva: http://encyclopedia2.thefreedictionary.com/Function+(computer+science)
02:39 < zyzzyva> try again, your phrase was "generic function"
02:40 < mdedetrich> you can use the mathematical definition of function
02:40 < mdedetrich> if you want
02:40 < zyzzyva> you are specifying a function
02:40 < mdedetrich> according to lambda calculus
02:40 < zyzzyva> it doesnt say you have to pass it in a specific form
02:40 < jasonkuhrt> maybe random question, are there conventional terms to differentiate the parts of a file name (<name>.<ext>). What is a good term to refer to just the <name>, just the <ext>, and finally both combined?
02:40 < mdedetrich> zyzzyva: http://en.wikipedia.org/wiki/Function_(mathematics)
02:40 < zyzzyva> jasonkuhrt: basename
02:40 < mdedetrich> there you go
02:40 < zyzzyva> http://en.wikipedia.org/wiki/Map_(higher-order_function)
02:41 < zyzzyva> how about that?
02:41 < jasonkuhrt> thank you
02:41 < zyzzyva> " map is the name of a higher-order function that applies a given function to each element of a list, returning a list of results. "
02:41 < zyzzyva> no specification of how that function is given
02:41 < mdedetrich> your are
02:41 < zyzzyva> just that the function is given
02:41 < mdedetrich> definitely wrong then
02:41 < mdedetrich> higher order functions
02:41 < mdedetrich> are anonymous functions
02:41 < mdedetrich> which java does not have
02:41 < mdedetrich> :)
02:41 < zyzzyva> woah woah woah higher-order functions are not anonymous functions
02:41 < zyzzyva> far from it
02:41 < zyzzyva> try again
02:41 < zyzzyva> higher order functions take functions as input
02:42 < zyzzyva> you form a hierarchy of transforms, it has *nothing* to do with anonymous
02:42 < mdedetrich> http://en.wikipedia.org/wiki/Higher-order_function
02:42 < mdedetrich> In mathematics and computer science, a higher-order function (also functional form, functional or functor) is a function that does at least one of the following:
02:42 < mdedetrich> take one or more functions as an input
02:42 < mdedetrich> output a function
02:42 < mdedetrich> take one or more functions as an input
02:42 < zyzzyva> In mathematics and computer science, a higher-order function (also functional form, functional or functor) is a function that does at least one of the following: take one or more functions as an input output a function
02:42 < mdedetrich> take one or more functions as an input
02:42 < mdedetrich> in java
02:42 < mdedetrich> a function
02:42 < zyzzyva> take one or more functions as inpout
02:42 < mdedetrich> cannot take a function
02:42 < mdedetrich> as input
02:42 < zyzzyva> it doesn't say what form it has to be
02:42 < mdedetrich> so java
02:42 < mdedetrich> has no concept
02:42  * nodebie feels sad being ignored 
02:42 < mdedetrich> of higher order functions
02:43 < zyzzyva> java can impact the same effect using objects
02:43 < mdedetrich> yes
02:43 < mdedetrich> but they are not
02:43 < mdedetrich> higher order functions
02:43 < zyzzyva> that doesnt affect the *expressivity*
02:43 < mdedetrich> yes
02:43 < mdedetrich> because I can't express map
02:43 < mdedetrich> what I am doing in java is no longer map, its something else
02:43 < zyzzyva> you cant express your specific carnation of map
02:43 < mdedetrich> yes I can
02:43 < zyzzyva> using the letters that you type
02:44 < zyzzyva> that's true, you can't type 1..5.map(...)
02:44 < zyzzyva> but that's not expressivity
02:44 < mdedetrich> yes it is
02:44 < mdedetrich> i am trying to express map
02:44 < mdedetrich> i can't in java
02:44 < zyzzyva> the concept of map doesnt care that its a native java function or an object that contains the function
02:44 < mdedetrich> you can try all you want
02:44 < mdedetrich> to write
02:44 < mdedetrich> a map function
02:44 < mdedetrich> but its not a proper map function
02:44 < mdedetrich> its not valid java syntax
02:45 < zyzzyva> you can, in fact, implement the entire scheme of higher-order functions in a style where every function is represented as an object with an apply function
02:45 < mdedetrich> (and in java map would have to be a function, because java does not have a map statement0
02:45 < zyzzyva> you are coming back to the specific characters now
02:45 < mdedetrich> I'm just saying
02:45 < mdedetrich> java does not have map
02:45 < zyzzyva> which i agreed that java could not replicate the specific expressions you used
02:45 < zyzzyva> java does have the concept of map
02:45 < mdedetrich> nope
02:46 < zyzzyva> it is exactly as described
02:46 < mdedetrich> thats also
02:46 < mdedetrich> not map
02:46 < zyzzyva> there's no loss of expressivity
02:46 < mdedetrich> what you described
02:46 < mdedetrich> is not map
02:46 < mdedetrich> :)
02:46 < zyzzyva> it is map
02:46 < mdedetrich> nope
02:46 < zyzzyva> according to the definition of map it is
02:46 < mdedetrich> nope
02:46 < zyzzyva> the definition doesn't say you have to pass a first order function
02:46 < mdedetrich> you changed definition again
02:47 < zyzzyva> nope
02:47 < zyzzyva> go back to the definition
02:47 < mdedetrich> Map (higher-order function)
02:47 < mdedetrich> ....
02:47 < zyzzyva> a higher-order function that applies a given function to each element of a list, returning a list of results.
02:47 < mdedetrich> map has to be a higher order function
02:47 < zyzzyva> now where in that definition does it say that the given function has to be a javascript function
02:47 < mdedetrich> java does not support higher order function
02:47 < mdedetrich> so you are still wrong
02:47 < zyzzyva> if you take the representation of function to be an object with a single meth
02:47 < zyzzyva> *method
02:47 < zyzzyva> the entire definition is satisfied
02:47 < mdedetrich> thats not a function
02:47 < zyzzyva> it is
02:48 < mdedetrich> you are changing the definition
02:48 < mdedetrich> of function
02:48 < mdedetrich> you are changing the definition of god damn everything
02:48 < mdedetrich> to suite your argument
02:48 < zyzzyva> the definition of map doesnt say how the function is specified
02:48 < zyzzyva> no the definitions are clear
02:48 < zyzzyva> you are restricting them to suit your purposes
02:48 < zyzzyva> the concepts are very clear here
02:48 < mdedetrich> I am sticking to the definition
02:48 < mdedetrich> in javascript
02:48 < mdedetrich> an object that contains a single function
02:48 < mdedetrich> is not a function
02:49 < mdedetrich> they are not the same thing
02:49 < mdedetrich> you are arguing they are
02:49 < zyzzyva> you wish to say map and fold and other constructs from functional programming, and the fact that the word doesnt exist doesn't mean it cant be expressed
02:49 < mdedetrich> no I am saying that java cannot express map
02:49 < zyzzyva> im arguing for the poruposes of map they are equivalent
02:49 < mdedetrich> because it does not have higher order functions
02:49 < mdedetrich> you can call map whatever you want
02:49 < zyzzyva> java *does* have higher-order functions using the function representation i just described
02:49 < mdedetrich> but java still cannot express it
02:49 < mdedetrich> nope
02:49 < zyzzyva> that's the key
02:49 < zyzzyva> it is
02:49 < mdedetrich> thats not a higher order function
02:50 < mdedetrich> its not
02:50 < zyzzyva> a function that takes a function object
02:50 < zyzzyva> is a higher order function
02:50 < mdedetrich> you are putting object in there
02:50 < mdedetrich> again changing your definition
02:50 < zyzzyva> *java function object
02:50 < mdedetrich> again changing your definition
02:50 < mdedetrich> stop doing it
02:50 < zyzzyva> do you want to define function?
02:51 < mdedetrich> i gave YOU a definition
02:51 < mdedetrich> which you ignored
02:51 < Oddman> fark me this convo is still going
02:51  * Oddman goes back to sleep
02:51 < zyzzyva> you are arguing that the map's usage of function refers to java's method concept
02:51 < mdedetrich> no
02:51 < zyzzyva> and im saying that the map concept doesnt require it
02:51 < mdedetrich> I am arguing that map requires a function
02:51 < mdedetrich> not a method (they are not the same again)
02:52 < zyzzyva> what type of function
02:52 < mdedetrich> a function
02:52 < mdedetrich> function doesn't have different types
02:52 < mdedetrich> there is a mathematical definition of function
02:52 < mdedetrich> its quite clear
02:53 < zyzzyva> yes there's a relation between input output
02:53 < zyzzyva> bijective surjective blah blah
02:53 < zyzzyva> but that doesnt say how its specified
02:53 < mdedetrich> that is the specification
02:53 < zyzzyva> that same relation
02:53 < mdedetrich> and it can ONLY be that
02:53 < zyzzyva> can be impacted using a representation that looks like an object
02:53 < mdedetrich> methods have state because they reside in classes
02:53 < zyzzyva> the *relation* can be specified as a function object or a function
02:53 < mdedetrich> they are also not generic
02:53 < mdedetrich> the whole point of function
02:53 < zyzzyva> the *relation* is the key idea
02:53 < mdedetrich> is its a FUNCTION
02:53 < mdedetrich> and not FUNCTION + some other shit
02:54 < mdedetrich> which is what you are doing
02:54 < zyzzyva> what's a function
02:54 < zyzzyva> In mathematics, a function[1] is a relation between a set of inputs and a set of permissible outputs with the property that each input is related to exactly one output. 
02:54 < mdedetrich> yes
02:54 < mdedetrich> and its ONLY that
02:54 < mdedetrich> you cannot add stuff ontop of a function
02:54 < zyzzyva> yes its a relation
02:54 < mdedetrich> then its not a function
02:54 < zyzzyva> and that *relation* can be impacted by function object
02:54 < mdedetrich> yes thats a recursive definition
02:54 < zyzzyva> nope
02:54 < mdedetrich> but the above
02:54 < mdedetrich> is not a class
02:54 < zyzzyva> a java function object
02:55 < mdedetrich> nor is it an object
02:55 < zyzzyva> can satisfy the requirement
02:55 < zyzzyva> In mathematics, a function[1] is a relation between a set of inputs and a set of permissible outputs with the property that each input is related to exactly one output. 
02:55 < zyzzyva> *relation* is th ekey
02:55 < mdedetrich> no
02:55 < zyzzyva> that relation can be described in the confines of a function object
02:55 < mdedetrich> you are cherry picking
02:55 < mdedetrich> again
02:55 < zyzzyva> or as a bare function
02:55 < mdedetrich> stop saying "this is the key"
02:55 < zyzzyva> where does it say it has to be a bare function
02:55 < zyzzyva> point to it
02:55 < mdedetrich> without ignoring everything else
02:55 < zyzzyva> i see *relation*
02:55 < mdedetrich> you are changing the definition
02:55 < zyzzyva> look at the definition of function
02:55 < zyzzyva> THATs the definition
02:55 < mdedetrich> if a definition doesn't mention something
02:55 < mdedetrich> its bare
02:56 < zyzzyva> the mathematical definition, as it were
02:56 < zyzzyva> "In mathematics, a function[1] is a relation between a set of inputs and a set of permissible outputs with the property that each input is related to exactly one output. "
02:56 < mdedetrich> understood?
02:56 < mdedetrich> if a definition does not mention something
02:56 < zyzzyva> please try to stick to the definition
02:56 < mdedetrich> it is NOT part of the definition
02:56 < zyzzyva> yes and the word here is relation
02:56 < mdedetrich> and there are other words
02:56 < mdedetrich> which you are ignoring
02:56 < zyzzyva> there's no specification as to HOW it is exposed
02:56 < zyzzyva> MEANS 
02:56 < mdedetrich> classes
02:56 < zyzzyva> that any such exposure is acceptable
02:56 < mdedetrich> do not have outputs
02:56 < zyzzyva> a class with a single method
02:56 < mdedetrich> they do not have a single output
02:57 < zyzzyva> In mathematics, a function[1] is a relation between a set of inputs and a set of permissible outputs with the property that each input is related to exactly one output. 
02:57 < mdedetrich> which isn't a function
02:57 < mdedetrich> :)
02:57 < zyzzyva> the relation is descirbed in the method of the class
02:57 < mdedetrich> yes, but thats not a function
02:57 < zyzzyva> i dont see where you are reading into it
02:57 < mdedetrich> that is a object container which contains a function
02:57 < zyzzyva> you are pulling something out of thin air
02:57 < mdedetrich> or a class that contains a function
02:58 < zyzzyva> the definition doesnt talk about the representation
02:58 < mdedetrich> it also doesn't talk about classes
02:58 < zyzzyva> a table is a function
02:58 < zyzzyva> after all
02:58 < mdedetrich> no its not
02:58 < mdedetrich> a table is a table
02:58 < zyzzyva> a truth table
02:58 < mdedetrich> is not a function
02:58 < zyzzyva> it is
02:58 < mdedetrich> no its not
02:58 < zyzzyva> read the definition
02:58 < zyzzyva> its a relation
02:59 < zyzzyva> a table is an acceptable specification of the function
02:59 < mdedetrich> A truth table is a mathematical table used in logic—specifically in connection with Boolean algebra, boolean functions, and propositional calculus—to compute the functional values of logical expressions on each of their functional arguments, that is, on each combination of values taken by their logical variables (Enderton, 2001). In particular, truth tables can be used to tell whether a propositional expression is true for all le
02:59 < mdedetrich>  input values, that is, logically valid.
02:59 < mdedetrich> it computes functional values
02:59 < zyzzyva> because the table specifies a relation
02:59 < mdedetrich> thats not the same thing as it IS a function
02:59 < zyzzyva> between input and output
02:59 < mdedetrich> it specifies multiple inputs
02:59 < zyzzyva> the question is whether or not its a function
02:59 < mdedetrich> and multiple outputs
02:59 < zyzzyva> its a relation
02:59 < mdedetrich> so it cannot
02:59 < mdedetrich> be a definition
02:59 < mdedetrich> of a function
02:59 < zyzzyva> the input is a tuple
02:59 < zyzzyva> the input is always a tuple
03:00 < zyzzyva> f(x,y) is a function with a 2d input
03:00 < mdedetrich> the input is a single value
03:00 < zyzzyva> if x is in the set of X y in the set of Y then (x,y) is in the set XxY (cartesian product)
03:00 < zyzzyva> the input to the function therefore is an element of that product
03:01 < zyzzyva> so that's what the table shows
03:01 < mdedetrich> yes and
03:01 < mdedetrich> java cannot do that
03:01 < zyzzyva> start from definition
03:01 < mdedetrich> yes
03:01 < mdedetrich> and java
03:01 < zyzzyva> function definition refers to expression of the relation
03:01 < mdedetrich> cannot express that
03:01 < zyzzyva> java can
03:02 < mdedetrich> its expressing a function + extra stuff
03:02 < mdedetrich> thats not a function
03:02 < zyzzyva> its expressing a relation
03:02 < mdedetrich> you do realize
03:02 < zyzzyva> the question is whether a relation can be expressed
03:02 < mdedetrich> that with your logic
03:02 < zyzzyva> and the answer is ye
03:02 < mdedetrich> everything in the world
03:02 < zyzzyva> *yes
03:02 < mdedetrich> is a function
03:02 < mdedetrich> according to you
03:02 < mdedetrich> everything is a function
03:02 < mdedetrich> everything in the world is a function
03:02 < zyzzyva> the question regards the mathematical definition of function
03:02 < mdedetrich> according to you
03:02 < mdedetrich> the mathematical definition
03:02 < mdedetrich> of a function
03:02 < zyzzyva> nope 
03:02 < mdedetrich> is everything in the world
03:02 < mdedetrich> yes
03:02 < zyzzyva> according to the *definition*
03:02 < mdedetrich> no
03:03 < mdedetrich> I'm using your logic here
03:03 < zyzzyva> a table is an acceptable specification of a relation
03:03 < mdedetrich> you define relation
03:03 < mdedetrich> as anything
03:03 < zyzzyva> no you arent
03:03 < mdedetrich> I can put anything
03:03 < mdedetrich> as a relation
03:03 < mdedetrich> and call it a function
03:03 < zyzzyva> you are trying to caricature a very straightforward point
03:03 < mdedetrich> you just changed the definition
03:03 < mdedetrich> of function
03:03 < mdedetrich> to relation
03:03 < zyzzyva> nope
03:03 < mdedetrich> yes
03:03 < zyzzyva> function says In mathematics, a function[1] is a relation between a set of inputs and a set of permissible outputs with the property that each input is related to exactly one output. 
03:03 < zyzzyva> the word it uses is relation
03:03 < mdedetrich> yes
03:03 < mdedetrich> which isn't a class
03:03 < zyzzyva> notice that a function *is* a relation
03:03 < mdedetrich> representing a function
03:03 < zyzzyva> why not?
03:03 < mdedetrich> because
03:04 < zyzzyva> a class with a single methd
03:04 < zyzzyva> as per a standard protocol
03:04 < mdedetrich> yes
03:04 < mdedetrich> and a class with a single method
03:04 < zyzzyva> *does* specify a relation
03:04 < mdedetrich> cannot be used
03:04 < mdedetrich> as a function
03:04 < mdedetrich> everywhere
03:04 < mdedetrich> in java
03:04 < zyzzyva> it *does* specify a relation
03:04 < mdedetrich> so it doesn't hold that definition
03:04 < zyzzyva> nope now you are conflating definitions
03:04 < zyzzyva> try again
03:04 < mdedetrich> nope
03:04 < mdedetrich> map
03:04 < mdedetrich> has to accept
03:04 < mdedetrich> any function
03:04 < mdedetrich> ANY function
03:04 < zyzzyva> map has to accept a given function
03:04 < mdedetrich> has
03:04 < zyzzyva> function doesnt say how its specified
03:04 < mdedetrich> any given function
03:04 < mdedetrich> a map in java
03:04 < mdedetrich> cannot accept
03:04 < mdedetrich> any class
03:04 < zyzzyva> where does it say it has to be specified in a very specific way?
03:04 < zyzzyva> break it down
03:04 < mdedetrich> no it has to accept
03:04 < mdedetrich> a function
03:05 < mdedetrich> you broadened
03:05 < zyzzyva> a function is a relation between inputs and outputs
03:05 < mdedetrich> the definition of function
03:05 < mdedetrich> shut up for a sec
03:05 < zyzzyva> i didnt broaden it
03:05 < mdedetrich> shut up
03:05 < zyzzyva> that's the actual definition
03:05 < mdedetrich> shut up
03:05 < mdedetrich> you broadened
03:05 < zyzzyva> mdedetrich: :)
03:05 < mdedetrich> function
03:05 < zyzzyva> :)
03:05 < mdedetrich> to include
03:05 < zyzzyva> nope
03:05 < mdedetrich> classes
03:05 < zyzzyva> In mathematics, a function[1] is a relation between a set of inputs and a set of permissible outputs with the property that each input is related to exactly one output. 
03:05 < mdedetrich> as functions
03:05 < zyzzyva> try again
03:05 < zyzzyva> hold on
03:05 < zyzzyva> try again
03:05 < mdedetrich> according you
03:05 < zyzzyva> a function is a relation
03:05 < mdedetrich> class with a single method
03:05 < mdedetrich> is a function
03:05 < mdedetrich> correct?
03:05 < zyzzyva> it doesnt say *how* it is specified, yes or no?
03:05 < zyzzyva> start from function because this is where we disagree
03:05 < zyzzyva> In mathematics, a function[1] is a relation between a set of inputs and a set of permissible outputs with the property that each input is related to exactly one output. 
03:05 < mdedetrich> no
03:05 < mdedetrich> we are dealign with languages
03:05 < mdedetrich> you said
03:05 < zyzzyva> does it say *how* a function should be specified?
03:05 < mdedetrich> that you can represent
03:06 < mdedetrich> a class
03:06 < mdedetrich> as a single method
03:06 < zyzzyva> In mathematics, a function[1] is a relation between a set of inputs and a set of permissible outputs with the property that each input is related to exactly one output. 
03:06 < mdedetrich> lets do this in java
03:06 < zyzzyva> start from our disagreement
03:06 < mdedetrich> you are still wrong
03:06 < zyzzyva> because it really boils down to the definition of function
03:06 < mdedetrich> you cannot express map in java
03:06 < zyzzyva> which clearly agrees with my definition
03:06 < mdedetrich> no its because you broadened the definition
03:06 < mdedetrich> if I write a class
03:06 < mdedetrich> with a single method in java
03:06 < mdedetrich> it cannot be used in a map function
03:06 < zyzzyva> nope
03:06 < zyzzyva> try again
03:06 < mdedetrich> in any map function
03:06 < zyzzyva> In mathematics, a function[1] is a relation between a set of inputs and a set of permissible outputs with the property that each input is related to exactly one output. 
03:07 < zyzzyva> map is the name of a higher-order function that applies a given function to each element of a list, returning a list of results.
03:07 < mdedetrich> yes
03:07 < mdedetrich> so function
03:07 < zyzzyva> so lets start with function
03:07 < mdedetrich> according to you
03:07 < mdedetrich> in java
03:07 < mdedetrich> is
03:07 < mdedetrich> a class with a single method
03:07 < mdedetrich> or thats how you represent a class
03:07 < zyzzyva> hold on
03:07 < mdedetrich> please write a function
03:07 < zyzzyva> take a step back
03:07 < mdedetrich> that accepts taht
03:07 < zyzzyva> what's function
03:07 < zyzzyva> whats a function
03:07 < mdedetrich> can you please
03:07 < zyzzyva> not in java
03:07 < mdedetrich> write a map
03:07 < zyzzyva> in general
03:07 < mdedetrich> in java
03:07 < zyzzyva> then we can define what map is
03:07 < mdedetrich> that acceps
03:07 < mdedetrich> a class
03:07 < mdedetrich> with a single method
03:08 < zyzzyva> hold on you arent talking about the idea of map anymore
03:08 < zyzzyva> you have changed what map means
03:08 < mdedetrich> not that the method cannot have a specific name
03:08 < mdedetrich> and it has to be a generic class
03:08 < mdedetrich> *note
03:08 < mdedetrich> nonono
03:08 < mdedetrich> you said
03:08 < mdedetrich> that a function in java
03:08 < zyzzyva> i dont see "anonymous function" for example in map
03:08 < mdedetrich> can be represented
03:08 < mdedetrich> as a class
03:08 < mdedetrich> with a  single method
03:08 < mdedetrich> so I want you to actually write ME java code
03:08 < mdedetrich> that does that
03:08 < mdedetrich> it cannot extend anything
03:08 < mdedetrich> it cannot implement an interface
03:09 < zyzzyva> what does that mean?
03:09 < zyzzyva> where is that restriction enforced?
03:09 < mdedetrich> I want you to provide me
03:09 < mdedetrich> with java code
03:09 < zyzzyva> it says it has to take a specification of a relation
03:09 < mdedetrich> showing map
03:09 < mdedetrich> I want you to provide me
03:09 < mdedetrich> with java code
03:09 < zyzzyva> there are ways to specify relationships
03:09 < mdedetrich> that does a map
03:09 < mdedetrich> again
03:09 < zyzzyva> that dont use functions
03:09 < mdedetrich> I want you to provide me
03:09 < zyzzyva> now look at scala
03:09 < mdedetrich> with java code
03:09 < mdedetrich> that does a map
03:09 < mdedetrich> please provide me
03:09 < zyzzyva> can scala take a table and use map that way?
03:09 < mdedetrich> with java code
03:09 < mdedetrich> that does a mpa
03:09 < zyzzyva> take a table specification of a logic function?
03:09 < mdedetrich> or I'm ending discussion
03:09 < mdedetrich> right here
03:09 < zyzzyva> and run it on a set of inputs
03:09 < zyzzyva> answer me
03:09 < mdedetrich> read ^
03:09 < mdedetrich> nope
03:10 < zyzzyva> you are changing the game
03:10 < zyzzyva> focus on the definitions first
03:10 < mdedetrich> yes
03:10 < zyzzyva> then ill write the code
03:10 < mdedetrich> because you are going off topic
03:10 < zyzzyva> because i want to know how general scala's map is
03:10 < mdedetrich> and splitting hairs
03:10 < zyzzyva> according to the definition
03:10 < zyzzyva> a function is a relation between inputs and outputs
03:10 < zyzzyva> a truth table is one such specification
03:10 < mdedetrich> anything thats a function can be put into a map, as long as the types match
03:10 < zyzzyva> can scala's map take a truth talbe?
03:10 < mdedetrich> yes
03:10 < zyzzyva> write a truth table
03:10 < mdedetrich> scala has tuples
03:10 < zyzzyva> and then show in scala how map applies to that function
03:11 < zyzzyva> i give you a table
03:11 < zyzzyva> i dont give you the truth function
03:11 < zyzzyva> i give it to you as a table
03:11 < zyzzyva> now unless scala accepts a table as a function, you have to convert it
03:11 < Oddman> mdedetrich, thought you were ending the discussion :P
03:11 < zyzzyva> if that's the case, then scala's map doesnt actually do what "map" is defined to do
03:11 < zyzzyva> i want to know what he wants
03:12 < mdedetrich> I want you to  write a map
03:12 < mdedetrich> in java
03:12 < mdedetrich> I'm still waiting
03:12 < zyzzyva> because scala's map doesnt take tables
03:12 < zyzzyva> im waiting for your answer
03:12 < mdedetrich> whats a table
03:12 < mdedetrich> I can defined a table as a tuple of 4 elements
03:12 < zyzzyva> its a list of tuples that should return 1 otherwise return 0
03:12 < mdedetrich> in scala
03:12 < zyzzyva> map doesnt accept it natively
03:12 < mdedetrich> with a mapping for each truth table
03:12 < zyzzyva> you have to write a function to handle it
03:12 < mdedetrich> yes it does
03:12 < zyzzyva> EVEN THOUGH
03:12 < mdedetrich> uh no
03:12 < zyzzyva> oh it does?
03:13 < mdedetrich> well you defined an input of type table
03:13 < zyzzyva> i actually wasnt aware that it could take a list of tuples and treat it as a function without extra syntactic stuff
03:13 < mdedetrich> .....
03:13 < mdedetrich> why would you do it as a list of tuples
03:13 < zyzzyva> i didnt realize that you could directly pass a truth table 
03:13 < mdedetrich> a truth table has 4 rows in it
03:13 < zyzzyva> a truth table with 2 variables has 4 rows
03:13 < mdedetrich> so you define it as a tuple4
03:14 < zyzzyva> a truth table with 16 variables has 2^16 elements
03:14 < zyzzyva> so i have a general relationship
03:14 < zyzzyva> encoded as a list
03:14 < mdedetrich> you do realize that a function
03:14 < mdedetrich> is a black box
03:14 < zyzzyva> the list uses a gray code 
03:14 < zyzzyva> nope
03:14 < mdedetrich> yes
03:14 < zyzzyva> if you take that definition
03:14 < zyzzyva> then my implementation using function objects is acceptable
03:14 < mdedetrich> A function f takes an input x, and returns an output f(x). One metaphor describes the function as a "machine" or "black box" that for each input returns a corresponding output.
03:14 < mdedetrich> :)
03:14 < zyzzyva> the function representation is what you are complaining about
03:15 < mdedetrich> no thats the implementation of a function
03:15 < zyzzyva> if you are going to bitch about how its represented, then let's see if scala can handle all representations
03:15 < mdedetrich> not how its represented
03:15 < mdedetrich> I'm asking you
03:15 < mdedetrich> to provide me
03:15 < mdedetrich> with a map
03:15 < zyzzyva> im asking you first
03:15 < mdedetrich> in java
03:15 < mdedetrich> well good day then
03:15 < mdedetrich> because I can guarantee you
03:15 < zyzzyva> because you  dont accept what is a perfectly acceptable definition as per scala's map concept
03:15 < mdedetrich> if you write a map in java
03:15 < mdedetrich> I can break it
03:15 < zyzzyva> i can break your scala map :)
03:15 < mdedetrich> with what
03:16 < zyzzyva> i list
03:16 < mdedetrich> maps can take in anything
03:16 < mdedetrich> even a list
03:16 < mdedetrich> you do realize that scales type system is turing complete?
03:16 < mdedetrich> java's is not
03:16 < zyzzyva> the map can take a table as the function?
03:16 < mdedetrich> define a table
03:16 < Oddman> you guys remind me of me and my mum
03:16 < zyzzyva> a list of pairs of the form (input, output)
03:17 < Oddman> except instead of the intricacies of language features, it's about her attitude.
03:17 < zyzzyva> thats a specification of a function as per the definition
03:17 < zyzzyva> its a relation
03:17 < Oddman> "define attitude"
03:17 < Oddman> fuck you, mum
03:17 < zyzzyva> between a set of inputs and outputs
03:17 < mdedetrich> yes you can do that in scala
03:17 < mdedetrich> with higher order functions/recursion
03:17 < zyzzyva> can you give an example?
03:17 < mdedetrich> and currying
03:17 < zyzzyva> wait wait wait
03:17 < zyzzyva> now you have extra crap
03:17 < zyzzyva> it cant take the list directly
03:17 < zyzzyva> you have to massage it
03:17 < mdedetrich> currying
03:17 < mdedetrich> is unboxing a function
03:17 < zyzzyva> im massaging the function with a object wrapper
03:18 < mdedetrich> its a method on functions
03:18 < mdedetrich> do you know what currying is?
03:18 < Oddman> it's what indians do, when they make delicious meals
03:18 < mdedetrich> zyzzyva: http://en.wikipedia.org/wiki/Currying
03:18 < zyzzyva> its re-representinbg a function of multiple variables as a simpler function
03:18 < mdedetrich> In mathematics and computer science, currying is the technique of transforming a function that takes multiple arguments (or an n-tuple of arguments) in such a way that it can be called as a chain of functions each with a single argument (partial application). It was originated by Moses Schönfinkel[1] and later re-discovered by Haskell Curry.[2][not specific enough to verify] Because of this, some say it would be more correct to name
03:18 < mdedetrich>  schönfinkeling.[3][4]
03:18 < zyzzyva> thats still massaging the representation
03:18 < zyzzyva> i asked
03:18 < zyzzyva> does it take a table directly
03:18 < mdedetrich> uh no
03:18 < mdedetrich> a curried version of a function is also a function
03:18 < zyzzyva> and you give a specification which has to work with the table
03:18 < mdedetrich> yes you can
03:19 < zyzzyva> it doesnt *directly* accept this specification
03:19 < zyzzyva> even though its a function
03:19 < mdedetrich> if you define the table as a function
03:19 < mdedetrich> you can
03:19 < mdedetrich> if you define the table as a function you can
03:19 < zyzzyva> you still need to transform it
03:19 < zyzzyva> you cant pass the table as is
03:19 < mdedetrich> thats besides the point
03:19 < mdedetrich> map takes in any function
03:19 < zyzzyva> and im saying thats tantamount to an object wrapper :)
03:19 < mdedetrich> express the truth table
03:19 < mdedetrich> as a function
03:19 < mdedetrich> no
03:19 < zyzzyva> nope
03:19 < mdedetrich> its a function wrapping a function
03:19 < zyzzyva> truth table is a specification
03:19 < mdedetrich> not an object wrapping a function
03:19 < zyzzyva> according to the definition :)
03:19 < mdedetrich> yes and?
03:19 < zyzzyva> try again
03:20 < mdedetrich> you said
03:20 < mdedetrich> you can define a truth table
03:20 < mdedetrich> as a function
03:20 < zyzzyva> scala's map doesnt match your definition of map
03:20 < mdedetrich> if that property holds true
03:20 < mdedetrich> can you represent a truth table
03:20 < mdedetrich> as a function
03:20 < mdedetrich> yes/no?
03:20 < zyzzyva> there needs to be a transformation
03:20 < mdedetrich> answer the question
03:20 < mdedetrich> can you represent
03:20 < mdedetrich> the truth table
03:20 < mdedetrich> as a function
03:20 < zyzzyva> which is tantamount to the transformation you are chewing out
03:20 < mdedetrich> answer the question
03:21 < zyzzyva> it can be interpreted as a function
03:21 < zyzzyva> its a function
03:21 < mdedetrich> can you represent a truth table
03:21 < mdedetrich> as a function
03:21 < zyzzyva> yes
03:21 < mdedetrich> so yes
03:21 < mdedetrich> scala can do that
03:21 < zyzzyva> a table is a representation of a function
03:21 < zyzzyva> but to do that you need to rework that transformation
03:21 < mdedetrich> hang on
03:21 < mdedetrich> you said a table IS a functin
03:21 < mdedetrich> or a representation
03:21 < mdedetrich> which one
03:21 < zyzzyva> a table specifies a relation
03:21 < mdedetrich> if its the latter, then its irrelevant
03:21 < zyzzyva> so it is a function
03:21 < mdedetrich> then scala can do it
03:22 < zyzzyva> then do it
03:22 < mdedetrich> go ask on stack overflow
03:22 < zyzzyva> show me how you are going to do it
03:22 < zyzzyva> :)
03:22 < mdedetrich> I'm sure someone can do it
03:22 < mdedetrich> when you write a mpa
03:22 < mdedetrich> in java
03:22 < mdedetrich> I will
03:22 < mdedetrich> :)
03:22 < zyzzyva> so the difference is
03:22 < zyzzyva> wait wait wait
03:22 < mdedetrich> the difference is
03:22 < zyzzyva> the difference is
03:22 < mdedetrich> I have work to do
03:22 < zyzzyva> its acceptable to transform the table
03:22 < zyzzyva> and not acceptable to transform the function
03:22 < zyzzyva> you have a double standard sir
03:22 < mdedetrich> transforming a function
03:22 < mdedetrich> to a function
03:22 < zyzzyva> and its clear to me you can't find an internally consistent definition
03:22 < mdedetrich> is still a function
03:22 < zyzzyva> its a function
03:23 < mdedetrich> transforming an object
03:23 < mdedetrich> to a function
03:23 < mdedetrich> or vice versa
03:23 < zyzzyva> an object wrapping a function is a function according to the mathematical definition :)
03:23 < mdedetrich> is not a function
03:23 < mdedetrich> comprehende?
03:23 < mdedetrich> nope
03:23 < zyzzyva> and if you define map according to the *mathematical* definition then it is correct
03:23 < mdedetrich> this is an object with a function
03:23 < zyzzyva> id recommend you revisit your theoretical cs
03:23 < mdedetrich> {a:(a)-> a + a}
03:23 < mdedetrich> this is a function
03:23 < mdedetrich> (a) -> a + a
03:23 < zyzzyva> this is also a table
03:23 < mdedetrich> that object accepts no input
03:23 < zyzzyva> *this is also a function
03:23 < mdedetrich> that object is accepting no input
03:24 < zyzzyva> [(1,1),(2,2), ...]
03:24 < mdedetrich> and no output
03:24 < mdedetrich> {a:(a)-> a + a}
03:24 < mdedetrich> thats an object
03:24 < mdedetrich> wrapping a function
03:24 < mdedetrich> it has no input
03:24 < mdedetrich> or output
03:24 < mdedetrich> so its not a function
03:24 < zyzzyva> you are now confusing the scala map with the concept of map
03:24 < mdedetrich> this isn't even scala
03:24 < nodebie> wow.. you guys can type really fast =P
03:24 < mdedetrich> thats an object
03:24 < mdedetrich> with a function
03:24 < nodebie> How did you guys do that?
03:24 < zyzzyva> if your statement is that you cant implement scala's impklementation of map in java, then i agree
03:24 < Oddman> that's what happens when you have a geek war.
03:24 < zyzzyva> but if you are talking about map the idea
03:24 < zyzzyva> then you are wrong
03:24 < mdedetrich> you are wrong
03:24 < mdedetrich> what you are calling a function
03:24 < mdedetrich> is not a function
03:25 < Oddman> note that our chat lines are cannon fodder...
03:25 < mdedetrich> this is an object with a function
03:25 < mdedetrich> {a:(a)-> a + a}
03:25 < zyzzyva> ill leave it at this: the definition of function agrees with me
03:25 < mdedetrich> it does not accept input or output
03:25 < zyzzyva> look at it
03:25 < zyzzyva> as a relation
03:25 < zyzzyva> there's no restriction to representation
03:25 < mdedetrich> nope
03:25 < Zak> are you guys still going?
03:25 < zyzzyva> and as such, you have to transform it either way
03:25 < zyzzyva> either in scala or in java
03:25 < Zak> i went out to lunch and back again
03:25 < zyzzyva> and if you cant accept that fact
03:25 < mdedetrich> can you write me
03:25 < mdedetrich> a map in java
03:25 < AvianFlu> Zak: yeah it's been like two hours lolz
03:25 < mdedetrich> to what you think map is
03:25 < zyzzyva> then there are some real problems with your ability to think
03:26 < mdedetrich> I'm asking me
03:26 < mdedetrich> for you to write a map
03:26 < Zak> #scalavsjava OK GET OUT
03:26 < mdedetrich> or give me an example of map
03:26 < mdedetrich> in java
03:26 < mdedetrich> of what YOU think it is
03:26 < zyzzyva> i explained how its done
03:26 < nodebie> I just wish they can answer my questions ;(
03:26 < zyzzyva> for loop 
03:26 < mdedetrich> zyzzyva: code please
03:26 < mdedetrich> I want code
03:26 < zyzzyva> you threw out the concept without giving a reason
03:26 < mdedetrich> zyzzyva: I want to see your code
03:26 < zyzzyva> i explained the idea using objects wrapping functions
03:26 < zyzzyva> you said it didnt count
03:26 < mdedetrich> zyzzyva: i dont care
03:26 < zyzzyva> i explained why
03:26 < zyzzyva> we looked at the definition
03:27 < mdedetrich> zyzzyva: i want to see your code
03:27 < zyzzyva> i was right in the defintiion
03:27 < mdedetrich> zyzzyva: I do not care
03:27 < zyzzyva> so you need to agree its acceptable and then ill do it
03:27 < mdedetrich> zyzzyva: you were not
03:27 < zyzzyva> i was consistent with the facts
03:27 < mdedetrich> zyzzyva: you were not
03:27 < zyzzyva> ohh we've got a mitt romney over here :)
03:27 < zyzzyva> the fact is
03:27 < Zak> 2 hours ago, it was "i'll agree we disagree"
03:27 < mdedetrich> zyzzyva: the fact is
03:27 < mdedetrich> I'm asking you to put
03:27 < mdedetrich> money
03:27 < mdedetrich> where your mouth is
03:27 < zyzzyva> "a function[1] is a relation between a set of inputs and a set of permissible outputs with the property that each input is related to exactly one output"
03:27 < mdedetrich> write a map
03:27 < mdedetrich> in java
03:27 < mdedetrich> you are saying its possible
03:27 < mdedetrich> so write it please
03:27 < zyzzyva> we havent agreed on what a function is
03:28 < mdedetrich> Im asking you
03:28 < mdedetrich> to do it
03:28 < zyzzyva> you have a contrived definition conforming to scala
03:28 < mdedetrich> with your definition
03:28 < zyzzyva> if we cant agree on the function definition
03:28 < zyzzyva> then *any* implementation i give is broken
03:28 < mdedetrich> I'm asking you to write map
03:28 < zyzzyva> so we have to start from there
03:28 < mdedetrich> according to your definition
03:28 < zyzzyva> i want you to write scala map that takes *any* representation
03:28 < mdedetrich> do you have a definition of map
03:28 < nodebie> yeah.. start with a common base that both of you can agreen on first =P
03:28 < Zak> nodebie: whats your question?
03:28 < mdedetrich> ignore mine
03:28 < mdedetrich> *me
03:28 < nodebie> hi there, is there any authorization module out there that lets me control access to a page/route other than Gandalf?
03:28 < mdedetrich> ignore my definition
03:28 < nodebie> i.e which bunch of users allowed to post/delete/edit which post
03:28 < zyzzyva> map depends on definition
03:28 < mdedetrich> i want you to write a map, according to the definition
03:28 < nodebie> that was my question Zak
03:28 < mdedetrich> of what YOU think map is
03:28 < zyzzyva> *map depends on definition of function
03:28 < mdedetrich> ok
03:28 < zyzzyva> i think
03:28 < mdedetrich> so write a map
03:29 < mdedetrich> according to your definition
03:29 < zyzzyva> a map can take an object 
03:29 < mdedetrich> of a function
03:29 < mdedetrich> code it up please
03:29 < zyzzyva> and apply an "apply" function to each element iteratively
03:29 < mdedetrich> ok
03:29 < mdedetrich> code it please
03:29 < mdedetrich> and make it proper java code
03:29 < mdedetrich> that compiles
03:30 < pyrotechnick> get a freakin room
03:31 < Zak> nodebie: did you check through the list of modules?
03:31 < Zak> https://github.com/joyent/node/wiki/Modules
03:31 < Zak> there's a connect-auth module that supports a few options
03:33 < Zak> pyrotechnick: +1
03:34 < mdedetrich> I don't think that zyzzyva realizes, that no matter how he does it in java, recursion won't work
03:34 < nodebie> Zak, I am looking for an authorization module rather than authentication
03:34 < mdedetrich> so it breaks the property of map
03:34 < zyzzyva> recursion is not a definition of map
03:34 < zyzzyva> *not in the definition of map
03:34 < zyzzyva> you are using a new definition
03:34 < mdedetrich> if you define a function
03:34 < mdedetrich> it has recursion
03:34 < mdedetrich> else its not a function
03:34 < mdedetrich> you cannot recurse classes in java
03:34 < sinclairzx> anyone know if its possible to virtualize a class method in TS?
03:34 < mdedetrich> :)
03:35 < zyzzyva> wait wait 
03:35 < zyzzyva> map as a concept
03:35 < mdedetrich> map has to accept a function
03:35 < mdedetrich> if you define a function
03:35 < zyzzyva> takes a specification of a function
03:35 < mdedetrich> it can call iteself
03:35 < mdedetrich> thats recursion
03:35 < mdedetrich> map has to take a function that has recursion
03:35 < mdedetrich> its still a function
03:35 < mdedetrich> by definition of the word function
03:35 < Zak> GET OUT
03:36 < Zak> you guys aren't even arguing about the main point anymore, its a meta argument about definitions
03:36 < zyzzyva> you are changing the definition of map
03:36 < Zak> GET OOUT
03:36 < mdedetrich> no I'm not
03:36 < mdedetrich> map takes in a function
03:36 < zyzzyva> yes you are
03:36 < mdedetrich> a function that does recursion
03:36 < mdedetrich> is still a function
03:36 < sinclairzx> Zak: no you
03:36 < Zak> Look
03:36 < Zak> I'll sum it up for you guys
03:36 < Zak> mdedetrich is saying that languages are constructed, like pieces of lego
03:37 < mdedetrich> I have a function, lets call it b, that does recursion (by calling some other function or itself)
03:37 < mdedetrich> its still a function
03:37 < Zak> and the expressiveness of a language, is the diversity of lego pieces available to you
03:37 < mdedetrich> map has to take b
03:37 < mdedetrich> by definition of map
03:37 < mdedetrich> being able to take in a function
03:37 < mdedetrich> if it can't take b, then b is not a function
03:38 < mdedetrich> that breaks your entire 2 argument fukery completely
03:38 < zyzzyva> where does the definition of map requiire that 
03:38 < mdedetrich> *2 hour
03:38 < mdedetrich> map requires a function
03:38 < zyzzyva> to be applied to a list of elements
03:38 < mdedetrich> yes
03:38 < zyzzyva> where is it required that a function is an element /
03:38 < mdedetrich> yes
03:38 < zyzzyva> lemme try that again
03:38 < mdedetrich> so any sought of "function" that you come up with
03:38 < mdedetrich> in java
03:38 < mdedetrich> I can break
03:38 < zyzzyva> where is it defined that a function is an element
03:38 < mdedetrich> by definition of map
03:38 < zyzzyva> i dont see a definition one way or the other 
03:38 < zyzzyva> nope
03:39 < pher0x1> :/
03:39 < mdedetrich> so how does java accept a function then
03:39 < zyzzyva> this gets back to what's a function
03:39 < mdedetrich> then write some code please
03:39 < mdedetrich> I'm saying java doesn't support map
03:39 < mdedetrich> im asking you to disprove me
03:39 < mdedetrich> with some code
03:39 < zyzzyva> i want to agree on what a map is
03:39 < mdedetrich> we wont
03:39 < mdedetrich> so provide some code
03:40 < mdedetrich> and anything you put into that 'map' I will define as a function (since map has to take in a function)
03:40 < mdedetrich> and I will break it
03:41 < zyzzyva> you are assuming that it must take a list of function
03:41 < mdedetrich> nope
03:41 < mdedetrich> a single function
03:41 < zyzzyva> are you familiar with russell's hierarchy?
03:41 < zyzzyva> http://en.wikipedia.org/wiki/Russell%27s_paradox
03:41 < mdedetrich> are you familiar with the concept
03:41 < zyzzyva> you are trying to point to that
03:41 < mdedetrich> of providing evidence
03:41 < zyzzyva> but im saying that you have to define map properly
03:41 < zyzzyva> if you want to get to your point
03:41 < mdedetrich> this has nothing to do with russels paradox
03:42 < mdedetrich> I can write a map that isn't breakable in scala
03:42 < mdedetrich> i can't write one in java
03:42 < zyzzyva> that's not a reflection of expressivity
03:42 < mdedetrich> I'm trying to express map
03:42 < mdedetrich> so please go ahead
03:43 < mdedetrich> you are arguing with theory for the sakes of arguing
03:43 < mdedetrich> and you can argue the way you are
03:43 < mdedetrich> for weeks
03:43 < mdedetrich> and prove anything
03:43 < zyzzyva> you are not providing the correct definition
03:44 < mdedetrich> I'm asking you to provide it
03:44 < mdedetrich> if you are writing a map you have to define a function
03:44 < mdedetrich> whether or not that is valid, we will see
03:44 < mdedetrich> :)
03:44 < zyzzyva> we have to agree on validity
03:44 < mdedetrich> no you have to
03:44 < mdedetrich> I don't
03:45 < zyzzyva> for example, if i restrict it to string and number literals
03:45 < mdedetrich> you are the one writing the code
03:45 < ChrisPartridge> agree to disagree, and walk away guys :)
03:45 < mdedetrich> I don't see how strings or literals
03:45 < mdedetrich> have anything to do with this
03:45 < Zak> what ChrisPartridge 
03:45 < Zak> said
03:45 < Zak> please
03:45 < Zak> for
03:45 < Zak> the
03:45 < Zak> love of god
03:45 < Zak> TAKE IT SOMEWHERE ELSE
03:45 < mdedetrich> unless you are saying that strings or number literals functions
03:46 < mdedetrich> in which case go ahead
03:46 < Oddman> hahaha
03:46 < Oddman> privately, guys :P
03:46 < Oddman> first of all, this is the NODE.JS channel ;)
03:46 < zyzzyva> lets take it to PM
03:47 < mdedetrich> write code first
03:47 < mdedetrich> I'm heading off
03:47 < Zak> finally
03:47 < zyzzyva> lol anyone has his email?
03:47 < Zak> now we can argue about TypeScript
03:48 < pyrotechnick> what's wrong with typescript?
03:48 < pyrotechnick> all i've ever wanted are compiler errors
03:49 < Oddman> hahaha
03:49 < Oddman> :P
03:49 < Raynos> is there a CLI test runner that basically runs all files in a folder as a node program
03:49 < sinclairzx> Zak: guess what
03:50  * Oddman watches slowly as all the node.jsers reveal themselves, picking up their items and going back to work
03:52 < sinclairzx> Zak: ive outputted 1000+ lines of JS with TS, and you know what....im not alone
03:52 < sinclairzx> Zak: im fluffing up all your JS with TS
03:53 < sinclairzx> Zak:  there must be at least a million lines of TS generated JS out there now. 
03:53  * sinclairzx fluffs on
03:54 < mdedetrich> eh, I might have a look at TS one day
03:54 < mdedetrich> at least it implements commonjs
03:55 < Zak> sinclairzx: coffeescript has had no impact on what i'm doing. I'm not worried about typescript either :)
03:55 < mdedetrich> eh, I mainly use coffee script because I have to write less
03:55 < mdedetrich> coffee script to js is like scala to java
03:55 < Zak> mdedetrich: don't start, we've had enough
03:56 < mdedetrich> eh ill put zyzzyva on ignore
03:56 < Zak> no
03:57 < sinclairzx> mdedetrich: http://pastebin.com/6E1frxYs <-- node js with TS
03:57 < mdedetrich> Zak: why?
03:58 < mdedetrich> sinclairzx: nice
03:58 < mdedetrich> I would like it better if TS used whitespace instead of bracers
03:58 < mdedetrich> made braces optional
03:58 < mdedetrich> *or made braces optional
03:59 < sinclairzx> mdedetrich: http://pastebin.com/6E1frxYs = http://pastebin.com/ucw5D7TR
03:59 < mdedetrich> I don't know why Haskell is the only static language out there which makes braces an optional thing
03:59 < Zak> looks like bloat to me :P
03:59 < pyrotechnick> your mum looks like bloat
04:00 < Zak> that's because we buried her inside a weather baloon
04:00 < mdedetrich> Zak: the exported line count from TS
04:00 < mdedetrich> is lower than the source
04:00 < mdedetrich> tbh, TS probably bloats as much as CF does
04:00 < sinclairzx> mdedetrich: i don't think it really matters all that much
04:00 < mdedetrich> and you honestly shouldn't be worrying about line count for server side JS
04:01 < sinclairzx> mdedetrich: i expect that there will be optimizations in future
04:01 < Zak> mdedetrich: ummm
04:01 < mdedetrich> and for client side you always have googles closure compiler, or ulglifyjs or something
04:01 < Zak> did you even look at the source and the output?
04:01 < mdedetrich> Zak: yes?
04:01 < Zak> because the source is double-spaced.........
04:01 < Zak> i think sinclair is really getting paid :P
04:02 < sinclairzx> Zak: you wouldn't end up writing something like this anyway?
04:02 < Zak> that wasn't my point
04:02 < mdedetrich> oh woops
04:02 < mdedetrich> my bad
04:02 < mdedetrich> but
04:02 < Zak> it was mdedetrich who was comparing source and taget :P
04:02 < mdedetrich> I don't see how you can write
04:02 < mdedetrich> more dense
04:02 < mdedetrich> javascript
04:02 < mdedetrich> that does the same thing
04:02 < mdedetrich> (unless you do something stupid like put all the stuff on a single line or rename all the variables to single characters)
04:02 < Zak> mdedetrich: thats the point. you wouldn't want to in the first place :P
04:03 < Zak> at least, i wouldn't want to
04:03 < kennethkoontz> Is event emitter the right tool to perform several http requests async? Or would the promise lib be a better choice?
04:03 < Zak> again, there are reasons to do it
04:03 < mdedetrich> Zak: wouldn't want to what?
04:03 < Zak> i just don't need it
04:03 < mdedetrich> if you need to do proper classes, thats how you have to represent them
04:03 < mdedetrich> in javascript
04:03 < Zak> "write javascript ... that does the same thing" (as typescript)
04:03 < mdedetrich> Zak: what point are you making
04:03 < Zak> dw
04:04 < Zak> i don't want to start another 2 hour argument
04:04 < mdedetrich> also mind you, code generated from both TS and CS
04:04 < mdedetrich> is longer because its designed to work with crap like IE
04:04 < mdedetrich> (IE doesn't support foreach, which would save like 3 lines on every loop iteration)
04:04 < mdedetrich> IE6 iirc
04:05 < mdedetrich> IE6 also doesn't do prototype inheritance properly
04:05 < sinclairzx> guys, see the generated handler code?
04:05 < mdedetrich> among other things
04:05 < sinclairzx> that's kinda yuck
04:05 < mdedetrich> why
04:06 < Zak> sinclairzx: can you try something
04:06 < Zak> call one of your function arguments "_this"
04:06 < Zak> and recompile
04:06 < sinclairzx> what line?
04:06 < Zak> ummm
04:06 < Zak> i'll give you a line number.. hold on
04:07 < Zak> line 79
04:07 < Zak> change "request" to "_this"
04:08 < sinclairzx> that would just resolve to _this._this tho
04:08 < sinclairzx> can try, hang on
04:10 < sinclairzx> Zak: you dun broke it :D
04:10 < Zak> did it end up conflicting with the _this outside of the function?
04:10 < sinclairzx> yeah
04:10 < Zak> i'm surprised it did that
04:11 < Zak> time to submit a bug :P
04:11 < sinclairzx> nice trick mate
04:11 < Zak> it shouldn't do that
04:11 < Zak> somebody obviously missed it
04:11 < Zak> although...
04:11 < Zak> maybe you can't tell
04:11 < Zak> nfi
04:11 < sinclairzx> im not exactly sure what it "should" do tho
04:11 < sinclairzx> require _this to be ______this?
04:12 < Zak> well, it should know what other variable names aren't valid because they introduced them
04:12 < sinclairzx> its locally scoped, so rewriting might be ok?
04:12 < sinclairzx> either that, or reserve _this 
04:12 < Zak> yeah, that's not a good idea
04:12 < Zak> reserving words like that, is the touch of death
04:12 < sinclairzx> Zak: join #typescript
04:13 < ChrisPartridge> should it not just fail to compile with typescript and warn you?
04:13 < astropirate> Hello friends!
04:13 < sinclairzx> Zak: there are a few issues and quirks ive notice with TS
04:13 < mdedetrich> well I don't think that you should name your classes/functions as _this
04:13 < sinclairzx> (one which prevents me from writing node code in modules)
04:14 < sinclairzx> or have a import statement inside a module
04:14 < Zak> mdedetrich: the point is, that stuff should be clearly documented, or should fail compilation
04:15 < mdedetrich> true, I would argue though if you are doing such a thing
04:15 < Zak> the whole argument of using typescript is that it should hit errors sooner and shouldn't have these "silent" bugs
04:15 < mdedetrich> you are an idiot
04:15 < Zak> given that a few days ago we said most developers are idiots
04:15 < Zak> and typescript are for C# developers
04:15 < Zak> they need to fix the bug :P
04:15 < mdedetrich> completely catering for idiots is quite hard
04:15 < Zak> it should be a compilation error
04:16 < mdedetrich> naming your function as _this
04:16 < Zak> pretty simple fix
04:16 < mdedetrich> in js
04:16 < mdedetrich> is idiotic
04:16 < Zak> its not a function though
04:16 < Zak> its a variable
04:16 < Zak> parameter/variable
04:16 < Zak> and its not that idiotic
04:16 < Zak> anyway, it shouldn't be some time-bomb waiting to go off later
04:16 < ChrisPartridge> Zak: does typescript use _this internally?
04:16 < Zak> esp if you can catch it during compilation
04:17 < Zak> ChrisPartridge: yes
04:17 < Zak> thats exactly why i asked sinclairzx to try it
04:17 < Oddman> <mdedetrich> naming your function as _this
04:17 < Oddman> rofl
04:17 < Oddman> I have never seen that, thank god
04:17 < Zak> its not a function
04:17 < Zak> it was a variable (at least in typescript)
04:17 < astropirate> You have failed me for the last time
04:17 < Oddman> O.o
04:17 < Zak> as in... we changed it to that name, to see what would happen
04:18 < ChrisPartridge> Yeah, gotcha
04:18 < Zak> but its plausible that it could happen in real code
04:18 < Zak> although, i don't like variable names with underscore in them
04:18 < Zak> people like to use them to indicate private function/variables
04:19 < mdedetrich> I guess to put more light on my opinion
04:19 < mdedetrich> I consider naming either functions or variables as _this idioitic
04:19 < mdedetrich> in a language like TS/CS
04:19 < mdedetrich> because if you look at the generated code
04:19 < mdedetrich> they use that stuff internally
04:20 < Zak> last time I wrote C, i didn't look at the generated ASM to check whether something was reserved
04:20 < Zak> (not that its even possible to reserve shit in ASM)
04:20 < Zak> point is, compiler should pick up that crap
04:20 < mdedetrich> I would argue that TS/CS is more similar to a translator than a compiler
04:21 < mdedetrich> although thats quite a semantical seperation
04:21 < Zak> it is
04:21 < Zak> and if i can't write typescript without checking the javascript every time, it defies the entire point
04:21 < Zak> (same for CS
04:21 < ChrisPartridge> yeah, that's what irks me about CS
04:21 < mdedetrich> I don't really check the JS for CS anymore
04:22 < Zak> you shouldn't have to
04:22 < mdedetrich> I haven't had any issues
04:22 < Zak> its okay for TS atm
04:22 < Zak> its new
04:22 < Zak> but if i had to do it in 6 months, i'm not going near it
04:22 < mdedetrich> well I did when I started, but thats for different reasons (was interested in how it did something)
04:22 < Zak> yeah sure
04:22 < Zak> i like the idea of coffeescript
04:22 < Zak> but i still prefer to write in javascript
04:23 < mdedetrich> cs is really nice when you its completely transparent to the coder
04:23 < mdedetrich> i.e. the web framework treats .coffee in the exact same was as .js
04:23 < mdedetrich> SS does that, and its quite nice
04:24 < mdedetrich> the biggest problem with CS is frameworks doing the complication in a non transparent and retarded way
04:24 < sinclairzx> http://garann.github.com/template-chooser/
04:24 < sadtaco> It seems like a ddos attack is targetting my node/socket.io and making it use 100% of my servers cpu.
04:25 < larryapplegate>   I am using the Apple sample code SimpleURLConnections to try and upload test images to node-formidable, using upload.js in the example folder. I get this response - Error: parser error, 0 of 22900 bytes parsed. The header is 158 bytes, the file is 22570 bytes, and the trailer 172 bytes, adding up to 22900. I can watch the IOS app send the correct file data. So I am guessing that the header is wrong. Any suggestions?
04:26 < Zak> that website seems to promote dot.js :P
04:27 < mdedetrich> oh I meant compilation before, not complication
04:27 < mdedetrich> man I hate auto spelling correct in mac
04:27 < larryapplegate> me too
04:28 < ChrisPartridge> sadtaco: ouch
04:29 < larryapplegate> can't type couch and db
04:29 < sadtaco> I'm not too sure what I should do to prevent it
04:29 < larryapplegate> couchdb
04:29 < larryapplegate> oh, proved myself wrong. it sometimes comes out couched
04:30 < ChrisPartridge> sadtaco: you need to report it upstream to your provider, otherwise you could get your app to report the offending sources and block them via iptables (to prevent CPU usage, and keep your app up). Still won't stop the data coming the edge of the server though
04:31 < sinclairzx> anyone here used Razor ?
04:31 < pyrotechnick> i have alot yeah what's up
04:31 < sinclairzx> curious if there is a JS template engine as good as Razor
04:31 < pyrotechnick> wait what
04:31 < pyrotechnick> eww no
04:32 < pyrotechnick> soz
04:32 < sinclairzx> pyrotechnick: don't like Razor either aye?
04:33 < zyzzyva> mdedetrich: as you didnt give a definition, we play by what is a perfectly acceptable definition of map: http://pastebin.com/W0P296yS
04:35 < zyzzyva> as for scala, I'm not aware but if scala is an untyped lambda calculus on java id expect you could construct a type that would break it
04:35 < zyzzyva> so we'll leave it at "neither scala nor java conform to your definition of map, and therefore there's no gain in expressivity"
04:36 < zyzzyva> im guessing you probably blocked me mdedetrich, which is ok
04:36 < Zak> < zyzzyva> mdedetrich: as you didnt give a definition, we play by what is a perfectly acceptable definition of map: http://pastebin.com/W0P296yS
04:36 < Zak> i'm passing that along
04:37 < Zak> because it looks like it took more than a few minutes to do that
04:37 < Zak> and he deserves a response, regardless of whether you ignored him or not
04:37 < zyzzyva> i didnt ignore him
04:37 < zyzzyva> i thought he might have ignored me
04:37 < Zak> yeah
04:37 < Zak> i was talking to mdedetrich 
04:37 < zyzzyva> regardless, he got a conformant response
04:37 < zyzzyva> and if he wants, i can break scala's map
04:37 < zyzzyva> :)
04:38 < zyzzyva> so we'll leave it at scala is in fact no more expressive than java
04:38 < jesusabdullah> guys
04:39 < jesusabdullah> chillax
04:39 < onats> whoa! 800
04:39 < sinclairzx> zyzzyva: scala is more expressive than java tho
04:39 < jesusabdullah> "expressive" is like
04:40 < jesusabdullah> platitudes for software
04:42 < mdedetrich> your mmap is not accepting higher order functions
04:42 < mdedetrich> I mean sorry, your mmap is not a higher order function
04:42 < sinclairzx> here's a thought, it is not a good idea to expose objects to client script when using TS
04:43 < mdedetrich> try again
04:49 < cainus> hey all.. anyone know what happened to hook.io?
04:49 < cainus> seems deleted
04:51 < astropirate> Yup, i never bet on anything tha ends in .io
04:51 < astropirate> HAHA
04:51 < ChrisPartridge> cainus: marak "quit" node
04:52 < cainus> so he deleted it?
04:52 < ChrisPartridge> I guess so
04:52 < gkatsev> something like that
04:52 < ChrisPartridge> cainus: perhaps look for a fork and work from there
04:52 < cainus> yeah or npm install and start a new one
04:53 < cainus> alright thanks
05:17 < mdedetrich> damn
05:17 < mdedetrich> he went away
05:17 < mdedetrich> oh well
05:18 < Raynos> https://github.com/Raynos/doc-test#example
05:22 < Raynos> Anyone have any API suggestions on doc test?
05:27 < TehShrike|Work> I don't
05:27 < TehShrike|Work> I mean, I could probably come up with some
05:27 < TehShrike|Work> But they would be horribly uninformed, and pulled out of my ass
05:27 < TehShrike|Work> So no, not really
05:30 < ChrisPartridge> Raynos: I'm not really "getting it"
05:30 < harrison_> Raynos: is this something similar to Python's doctest?
05:31 < Raynos> yes its similar to doctest
05:31 < TehShrike|Work> And see, here come the people asking reasonable questions
05:31 < Raynos> ChrisPartridge: It's basically a small compiler that takes my examples an makes them executable tests
05:31 < TehShrike|Work> Thank goodness for them
05:31 < TehShrike|Work> Otherwise I'd just be standing here, looking like an idiot
05:32 < harrisonm> (Full disclaimer, I've never used doctest, just found it on a quick duckduckgo search)
05:32 < harrisonm> So, any suggestions for API from me would also be uninformed
05:32 < Raynos> ChrisPatridge: I guess I'm not showing the case where if your logs don't match it fails hard.
05:32 < harrisonm> Looks like a cool project, though
05:33 < ChrisPartridge> Raynos: whats the advantage over writing actual tests with mocha? You get more concise usage of the code?
05:33 < ChrisPartridge> (mocha/other testing framework)
05:33 < Raynos> the main advantages is that your not writing tests. Screw writing tests. Just write executable examples.
05:33 < Raynos> Recently I've only been writing examples and have been too lazy for actual tests
05:34 < harrisonm> But at that point you're having to write an example for every case you want to test
05:35 < harrisonm> I can see the fantastic use of this for documentation testing, but I'm a little dubious of it as a TDD tool
05:35 < harrisonm> This doesn't really help you with your API question, though
05:35 < Raynos> harrisonm: It's not for TDD, or it could be but would need a lot of polish
05:35 < ChrisPartridge> Raynos: is there any reason you put "function" in the comment below? could that not be a third argument to log?
05:36 < Raynos> ChrisPartridge: then you might as well replace it with assert.equal
05:36 < ChrisPartridge> Well yeah
05:39 < TehShrike|Work> Man, someone awesome should really hire me
05:40 < ChrisPartridge> TehShrike|Work: jobs.nodejs.org ?
05:40 < nathan7> The heck?
05:40 < nathan7> It's US-only?
05:41 < nathan7> Which city did you mean? ["Amsterdam, MO","Amsterdam, NY","Amsterdam, OH","Amsterdam, MT"]
05:41 < TehShrike|Work> ChrisPartridge: no way to search for telecommute jobs :-(
05:43 < astropirate> TehShrike|Work, you and me buddy
05:46 < larryapplegate> I'm not awesome but I've hired telecommuters for various things
05:46 < larryapplegate> people i've never met in person
06:00 < harrisonm> nothing showing up for Dallas area :/
06:01 < jmoyers> move.
06:02 < jmoyers> also, go to http://www.meetup.com/DallasNode/
06:06 < harrisonm> Hah.  And already knew about that, but I have class Thursday nights
06:06 < jmoyers> priorities.
06:08 < harrisonm> If it helps, I'm writing my project for that class in node :P
06:08 < harrisonm> Also, I'm a research assistant
06:09 < harrisonm> so failing class means losing job/scholarship
06:09 < jmoyers> fair enough ;-)
06:10 < harrisonm> I'm also writing almost everything for my assistantship in node
06:10 < harrisonm> so it works out
06:12 < jmoyers> more than i get to write
06:13 < harrisonm> Yeah, it's really nice.  My original plan was to go full-time at a gig I'd had for a while that was mainly .NET.  Pretty glad that didn't pan out now
06:13 < Oddman> muahaha
06:14 < harrisonm> Still doing stuff on the side for them, and I've gone from web forms to .NET MVC
06:14 < hemanth> Dot not
06:14 < harrisonm> which is significantly better
06:14 < harrisonm> but it's still .NET
06:14 < hemanth> MVC is not dead yet?
06:14 < harrisonm> No, they're coming out with .NET MVC 4 soon
06:14 < hemanth> M$ $tuff hmm
06:14 < Oddman> lol
06:16 < harrisonm> again, if you're going to be coding Microsoft web stuff, MVC's the way to go; it's not half bad.  But I'd rather not be using Microsoft Server at all
06:19 < Raynos> Anyone know of a good way to run an arbitary JS file in a repl?
06:19 < jmoyers> … require?
06:20 < Raynos> That won't work
06:20 < niggler> what are you trying to do?
06:20 < Raynos> I want the local variables in my REPL scope
06:20 < Raynos> so I need a way to inject the code into the REPL
06:20 < niggler> do you have control over the js code?
06:20 < jmoyers> and copy paste isn't an option?
06:20 < Raynos> i tried copy and paste
06:20 < Raynos> repl input pukes at new lines
06:21 < Raynos> niggler: I can read and modify the source code to make it REPL safe
06:21 < jmoyers> eval(fs.readFileSync)
06:21 < jmoyers> maybe?
06:21 < ChrisPartridge> Raynos: possibly vm.runInThisContext ?
06:21 < Raynos> that might work
06:21 < Raynos> runInThisContext can't mutate local variables
06:22 < Raynos> which may not be a problem tbh
06:22 < alucardX> hi
06:22 < ljharb> Raynos: why do you want to do that?
06:22 < niggler> why not just wrap it in a function and call it with the repl scope?
06:22 < jmoyers> not a bad idea
06:22 < jmoyers> .call(this)
06:22 < jmoyers> or whatever
06:23 < Raynos> ljharb: because it's fun
06:23 < Raynos> the next problem is making file local require's work with this repl
06:26 < nathan7> Raynos: .load
06:26 < Raynos> load?
06:26 < nathan7> > .load blah.js
06:26 < nathan7> it'll execute blah.js
06:26 < nathan7> there's also .save
06:26 < nathan7> see .help
06:26 < Raynos> really
06:26 < Raynos> thats crazy
06:26 < nathan7> really
06:26 < nathan7> I discovered it while reading the REPL docs
06:27 < Raynos> it doesnt really work 
06:27 < nathan7> works here
06:27 < Raynos> it expects cleanly formatted stuff
06:27 < Raynos> try arbitary files
06:27 < mdedetrich> ill execute your blah.js
06:28 < nathan7> Raynos: works
06:28 < nathan7> Raynos: plain JS files work for me fine
06:28 < Raynos> nathan7: load this file https://github.com/Raynos/doc-test/blob/master/test/readySignal.js it wont work
06:29 < Raynos> use comma first. It wont work :P
06:29 < nathan7> Comma first?
06:29 < olasd> use javascript. It won't work
06:29 < nathan7> ah
06:29  * olasd hides
06:29  * nathan7 beats olasd up
06:29  * olasd purrs
06:29  * purr rrrrrr
06:29 < nathan7> ..the heck is wrong with you, man
06:30 < nathan7> Raynos: I just do var
06:30 < nathan7> Raynos: I like my individual variable declarations to be independent
06:30 < jmoyers> each like a  unique snowflake
06:31 < nathan7> you are not a unique, beautiful snowflake
06:31 < nathan7> Oh cool
06:31 < nathan7> my pants are caffeinated
06:32 < nathan7> I left caffeine tablets in my pocket and they kinda dissolved
06:32 < Oddman> if that was lsd you'd be hiiiiiiiiiiiiiiiiiiiigh
06:32 < hemanth> Caffine
06:32 < Zak> lucky your pants aren't high, otherwise your balls would be showing
06:33 < niggler> so can you invoke node as if using the repl but piping commands in?
06:33 < niggler> the point being, if you had a file you wanted to load
06:33 < niggler> its not equivalent to require
06:33 < harrisonm> I pulled irssi back up at a really weird place in this conversation
06:34 < nathan7> Oddman: Nah, the heat in the washing machine would've destroyed most of it.
06:34 < niggler> so if you wanted to replay exactly what happened, node the interpreter would need to process .load and .save
06:34 < Oddman> nathan7, haha true :D
06:34 < nathan7> Sensitive lil' molecule
06:34 < Oddman> LOL!
06:35 < nathan7> ..why do I keep reading 'mongo-lite' as 'mongolite'
06:35 < ChrisPartridge> maybe you cant see dashes?
06:35 < nathan7> on a side note, yesterday a classmate opened the jQuery source
06:35 < nathan7> and Chrome offered to translate it
06:35 < nathan7> thus, jQuery in Dutch. http://pastebin.com/Ywzz1h49
06:35 < Oddman> LOL
06:36 < Oddman> oh man, cracking me up
06:36 < Zak> lol
06:36 < nathan7> One day an archeologist is gonna find my IRC logs
06:36 < nathan7> and he'll try to reconstruct my train of thought
06:36 < nathan7> and his brain will explode.
06:37 < onats> whats up hackers!
06:37 < nathan7> Chinchillas.
06:38 < Zak> nathan7: Reminded me of this: http://bigeyedeer.files.wordpress.com/2012/03/greeting490.jpg
06:40 < nathan7> Zak: heh
06:42 < niallo> i'm sure i'm doing something stupid, but i have a long-lived daemon process using node + zmq, and it exits after a number of seconds with no error. how do i prevent this happening?
06:43 < larryapplegate> yes, but you must know what to feed it
06:43 < larryapplegate> oops, wrong thread
06:44 < niallo> it registers a handler for messages on a zmq pull socket and is supposed to stay alive forever processing those as they arrive. however it always exits after a number of seconds. processes messages just fine while it's alive.
06:44 < ChrisPartridge> niallo: code?
06:45 < jmoyers> niallo listening for .on('error')?
06:47 < niallo> jmoyers: on the zmq socket? no
06:47 < niallo> ChrisPartridge: i can't share the whole file but here is the gist: https://gist.github.com/15b07bb033aa88dddc77
06:49 < jmoyers> niallo https://github.com/JustinTulloss/zeromq.node/issues/145
06:50 < niallo> jmoyers: i'm actually not using bind, also this looks like a dupe of https://github.com/JustinTulloss/zeromq.node/issues/131 and i have the fix for that in my zmq version
06:52 < niallo> jmoyers: just tried the process.on hack suggested in #145 and it doesn't work for me.
07:04 < Raynos> https://github.com/Raynos/doc-test/blob/master/bin/doc-test.js#L19
07:04 < Raynos> Managed to get that REPL to work hackishly
07:04 < sinclairzx> heya, what do you guys use for html templating?
07:04 < Raynos> Anyone have any better / less silly suggestions?
07:05 < Raynos> sinclairzx: html
07:05 < sinclairzx> Raynos: ?
07:05 < sinclairzx> Raynos: you template html using just html?
07:05 < Raynos> No
07:05 < Raynos> I actually use jade
07:06 < sinclairzx> works good on node?
07:06 < jmoyers> sinclairzx http://handlebarsjs.com/ or ejs, typically.
07:06 < jmoyers> heh, jade is from node
07:06 < sinclairzx> jmoyers: thanks :)
07:06 < Oddman> jade is horrible
07:06 < jmoyers> jade and stylus are a combo
07:06 < Oddman> god no
07:07 < Oddman> whitespace screwing with view logic... no thanks
07:07 < Oddman> and jade is/was inspired by haml, which is just as bad
07:07 < jmoyers> plenty of people subscribe to it
07:07 < jmoyers> not my aesthetic, but whatever.
07:07 < Oddman> yeah, those people either haven't gotten to a point where whitespace has caused them problems, or don't care about the issue
07:08 < Oddman> it's a very attractive option until you delve deeper
07:08 < Raynos> oh I hate significant whitespace
07:08  * sinclairzx doesn't like haml at all
07:08 < Raynos> but jade is feature rich and well maintained
07:08 < jmoyers> heh
07:08 < jmoyers> whatever you say
07:09 < Oddman> Raynos, yup, agree on the latter
07:09 < jmoyers> i kind of feel like a module with 790 some odd pull requests
07:09 < Oddman> but the first point screws it
07:09 < jmoyers> deserves a bit of respect.
07:09 < Oddman> jmoyers, last I heard - having concerns about how something is implemented/works doesn't affect your respect for a project
07:10 < jmoyers> no, but an opening statement of "jade is horrible" does
07:10 < Oddman> I gave my reasoning
07:10 < stagas> Oddman: what's the issue with whitespace
07:10 < Oddman> as I said "very attractive option until you delve deeper"
07:10 < Oddman> stagas, say you need a conditional as to whether to output a tag or not, or one tag or another
07:11 < Oddman> in jade/haml that's very hard because the whitespace is significant for the creation of closing tags
07:12 < ljharb> it's just like coffeescript, or less, or sass, or whatever. it's another moving part between you and the browser, for minimal benefit.
07:12 < ljharb> just writing JS, CSS, and HTML is not that hard.
07:12 < Oddman> ljharb, although i agree with you, that's not really a concern for me for whether I not I'd use it
07:12 < ljharb> well, on top of that, i think jade and haml are ugly as sin
07:12 < Oddman> hahaha
07:12 < Oddman> tbh I think the syntax is rather nice
07:12 < ljharb> but i have a real reason besides aesthetics
07:12 < Oddman> it just has inherent problems
07:12 < jmoyers> yeah, let me fucking write -webkit- -moz -filter seven million times
07:13 < Oddman> which tbh, I don't think the authors realized when they started
07:13 < jmoyers> and have no variables in my css
07:13 < jmoyers> that sounds fucking great
07:13 < jmoyers> superset css languages and literally the shit
07:13 < ljharb> jmoyers: i appreciate how variables and mixins can help, but do you really use those features that often?
07:13 < jmoyers> they are the best things ever.
07:13 < Oddman> LESS is okay, Sass is a pain
07:13 < jmoyers> indeed, yes i do
07:13 < Oddman> and tbh, if you write good CSS - variable use/mixins is hardly necessary
07:13 < ljharb> Oddman++
07:13 < Oddman> because that's what classes are for
07:14 < ljharb> less and sass lead to the generated css being huge, and overly nested, which sucks for performance.
07:14 < jmoyers> my god
07:14 < jmoyers> how big are the apps you guys are writing?
07:14 < ljharb> heck, in less, @import by default does multiple import
07:14 < ljharb> jmoyers: how big are the apps youre writing that you need millions of occurrences of css3 properties?
07:14 < jmoyers> its not millions, brother
07:14 < ljharb> jmoyers: if the app is small, just write -webkit, -moz, and standard :-p
07:15 < ljharb> you said seven million above :-)
07:15 < sinclairzx> jmoyers: does handlebars compile the template?
07:15 < jmoyers> its boring garbage that after the fiftieth time i've written
07:15 < jmoyers> I'm done with it
07:15 < Oddman> jmoyers, shows you have no respect for good CSS ;)
07:15 < jmoyers> listen, if you aren't minifying and contacting already (compile step), i guess i don't know what to say
07:15 < Oddman> SASS/LESS actually encourage bad CSS practises
07:15 < ljharb> jmoyers: minification doesn't change how you write code
07:16 < ljharb> and concatenation honestly isn't necessary for most sites.
07:16 < Oddman> yes, they're useful, yes - if you know what you're doing, they're handy, but they don't really provide that much benefit if you know what the hell you're doing int he firs tplace
07:16 < jmoyers> no, but it introduces a compile step
07:16 < ljharb> but either way, it doesn't change how you write code.
07:16 < sinclairzx> jmoyers: have you used the Razor Engine templates?
07:16 < jmoyers> no idea what that is
07:16 < ljharb> jmoyers: a compile step that doesn't change the code. it works both uncompiled and compiled, natively in the browser.
07:16 < jmoyers> i get so tired of hearing constant minimalist garbage in this channel
07:16 < jmoyers> stop trolling and let people make decisions based on whats out there
07:16 < ljharb> our opinions are whats out there too.
07:17 < jmoyers> yeah, but it gets toxic over time
07:17 < ljharb> stop calling them garbage when they're valid options also.
07:17 < jmoyers> i can understand people shitting all over coffeescript etc
07:17 < ljharb> nobodys forcing you to listen to it. i find the encouraging of all these techniques far more toxic.
07:17 < sinclairzx> jmoyers: the RazorEngine allows you to compile a template into code. then, when passing data to the template, its quicker
07:17 < jmoyers> but trying to tell me that i have no respect for good css because i use a toolchain
07:17 < sinclairzx> quicker to render (no compile step)
07:17 < jmoyers> is fucking retarded
07:17 < jmoyers> i understand templatizer like modules.
07:18 < Oddman> that's not why I said that, jmoyers 
07:18 < ljharb> i didn't say that
07:18 < Oddman> so perhaps you syhould follow the conversation a little better
07:18 < jmoyers> ....
07:18 < Oddman> "its boring garbage that after the fiftieth time i've written"
07:18 < jmoyers> "jmoyers, shows you have no respect for good CSS ;)"
07:18 < Oddman> that's what I was responding to
07:18  * sinclairzx thinks the problem with this channel, is endless flame wars spured on by the myriad of open source projects out there, mixed with personal preference
07:18 < Oddman> good CSS isn't boring garbage - in fact I can gaurantee you the stuff SASS/LESS is spouting, unless you really know your CSS well - is an absolute mess.
07:19 < Gottox> sinclairzx: I missed the good old flamewars.
07:19 < Oddman> missed a great one today
07:19 < Oddman> java vs scala and map function. haha
07:19 < ljharb> "i'm not 100% happy with what's out there. i know! i'll make a new language or framework or tool!" now you have n + 1 problems.
07:19 < sinclairzx> Oddman: read that as it happend
07:19 < Oddman> haha
07:19 < Oddman> was gold
07:20 < sinclairzx> i was siding with Scala mind you
07:20 < Gottox> the only thing i'm missing in JS is type safety.
07:21 < Gottox> and that's a solved problem with closure compiler or microsofts typescript.
07:21 < sinclairzx> *cough* TS *cough
07:21 < ljharb> oh, i wouldn't say i'm *missing* it, bob.
07:21  * Oddman shudders
07:21 < Oddman> sorry did someone mention microsoft?
07:21 < Gottox> :D
07:22 < sinclairzx> people who don't code using MS technology and languages, really are missing out :(
07:22 < Gottox> Developers,  Developers, Developers, Developers, Developers
07:22 < ljharb> sinclairzx: read this about typescript. http://t.co/xJfNnAGG
07:22 < ljharb> sinclairzx: that's the best, most reasoned analysis of it i've seen.
07:23 < Gottox> oh man...
07:23 < Oddman> sinclairzx, I'm sorry when I talk to MS "web" devs who don't know the first thing about REST or long polling, I die a little inside.
07:23 < Gottox> this guy thinks coffeescript "solves" js issues?!
07:23 < sinclairzx> ljharb: already read it (and a thousand other articles on it)
07:23 < ljharb> sinclairzx: it concludes you shouldn't use it. :-)
07:24 < Oddman> still a better approach than dart. rofl
07:24 < sinclairzx> Oddman: that's changing, im a MS guy who knows about long polling, web sockets, and the other means of doing things. I've known about these things since i can't remember when
07:24 < Oddman> sinclairzx, agreed, it is
07:25 < Oddman> but I really don't think I'm missing out by sticking to open source software
07:25 < Oddman> tbh, I'd argue it's you who is missing out :P
07:25 < sinclairzx> Oddman: not to bring up ASP.NET MVC, but, it was exactly what the ASP/NET stack was missing
07:25 < Oddman> oh no doubt
07:25 < Oddman> and I've heard a lot of people say that
07:25 < sinclairzx> Oddman: its "crazy
07:25 < sinclairzx> good
07:26 < Oddman> I can't really comment as I haven't used it or touched it
07:26 < Oddman> but have worked with at least 5 various server-side MVC frameworks, and 3 on the client-side, as well as dabbled in meteor
07:26 < Oddman> I don't know if it would surprise me
07:26 < Oddman> meteor is imho, going to change web dev in a few years, and other platforms like it
07:26 < sinclairzx> Oddman: its really really good, and has top notch components that you would need to hunt for in the open source landscape (which is maybe why MS developers stay in the MS bubble)
07:27 < sinclairzx> Oddman: there is a reason they stay :)
07:27 < Oddman> is it open source though?
07:27 < ljharb> meteor, ugh. direct client-side DB access?
07:27 < sinclairzx> it is now, yeah
07:27 < ljharb> fails utterly without JS?
07:27 < Oddman> ljharb, way to take an example literally ;)
07:27 < ljharb> you picked a poor one :-p
07:27 < Oddman> you should read the bible :P
07:27 < Oddman> it's an example of server interaction
07:28 < Oddman> not exactly a recommendation on how it should be done
07:28 < jmoyers> i like how less than 10 minutes ago
07:28 < jmoyers> you were talking about how you should minimally stick to js html css
07:28 < sinclairzx> Oddman: ASP.NET MVC has evolved with the languages, the async await stuff means C# can do the everything async approach of node, and MVC has followed suite
07:28 < jmoyers> now you're talking about meteor as a godsend
07:29 < __pr0t0__> I'm surprised the MS license allows use of irc
07:29 < Oddman> I didn't argue that at all jmoyers, and I'm also not claiming meteor to be a godsend :)
07:29 < jmoyers> "meteor is imho, going to change web dev in a few years, and other platforms like it"
07:29 < sinclairzx> Oddman: but sometimes, its nice to do things without throwing in the async 
07:29 < Oddman> sinclairzx, agreed
07:29 < Oddman> jmoyers, because of how technologies like that change how we deal with client->server and client->client on the web
07:29 < sinclairzx> Oddman: C# gives you the ability to do both, easily :)
07:30 < Oddman> :)
07:30 < jmoyers> don't argue minimalism and then throw a monolithic framework in the ring.
07:30 < jmoyers> thats just silly
07:30 < Oddman> rofl
07:30 < sinclairzx> Oddman: you know, the talk of the town seems to be suggesting MS are losing interest in C#
07:31 < sinclairzx> jmoyers: MVC 4.0 is not monolithic anymore
07:31 < jmoyers> oh i don't give a shit about asp
07:31 < jmoyers> i'm talking about meteor
07:31 < jmoyers> a framework that bundles HOSTING in, lol
07:31 < sinclairzx> oh ok
07:31 < Oddman> jmoyers, is still butt hurt about me disagreeing with him about less/sass
07:31 < ChrisPartridge> lol
07:31 < Oddman> apparently people aren't allowed to disagree
07:32 < jmoyers> any documentation that has more words than code
07:32 < jmoyers> has a big fat smell, thats all I'm saying.
07:32  * sinclairzx thinks responsive design is a dumb idea
07:32 < rendar> sinclairzx: why?
07:33 < jmoyers> sorry guy
07:33 < jmoyers> I'm just tired of people laying into tj's modules
07:33 < sinclairzx> rendar: its hard enough getting a design out and templated, let alone trying to squish the design into a different form factor
07:33 < jmoyers> when the guy is fucking prolific. if it doesn't fit your style, move on
07:34 < sinclairzx> jmoyers: i don't really like TJ either im afraid
07:34 < jmoyers> he's dedicated to maintaining all these badass node modules for the community, and all i hear is hipsters hating on express
07:34 < rendar> i see
07:34 < stagas> sinclairzx: that's what responsive layouts solve, no?
07:34 < _Oddman> silly interwebs
07:34 < jmoyers> sinclairzx and what have you done lately?
07:35 < sinclairzx> jmoyers: a lot of things? why?
07:35 < jmoyers> besides talk about typescript and asp.net
07:35 < jmoyers> okay, github?
07:35 < jmoyers> pull request or gtfo
07:35 < sinclairzx> jmoyers: well, there is all that work ive been doing "not dressing like a emo and proclaiming my one sided thoughts about technology to the sheep"
07:36 < jmoyers> i.. i dont even
07:36 < sinclairzx> jmoyers: i don't use github either
07:36 < sinclairzx> jmoyers: not that i have an issue with it
07:37 < astropirate> sinclairzx, fan of codeplex?
07:37 < astropirate> :D
07:37 < sinclairzx> nope, i've been using google code for years
07:37 < ChrisPartridge> oh dear, here we go.. again
07:37 < ljharb> googlecode? good god.
07:38  * sinclairzx is old school, and happens to like subversion
07:38 < astropirate> cant stop listening to this so much epicness https://www.youtube.com/watch?v=ZjjqOFOVTK4
07:38 < Oddman> yikes
07:38 < Oddman> have you actually played with git?
07:38 < ChrisPartridge> no wonder you love microsoft so much
07:38 < ljharb> subversion?!?
07:38 < astropirate> I like CVS
07:38 < ljharb> sinclairzx, you're fast making your opinions irrelevant
07:38 < ljharb> CVS is god-awful.
07:39 < astropirate> ljharb, get on my level
07:39 < ljharb> still using subversion in 2012 is almost as bad as not having version control at all
07:39 < sinclairzx> Oddman: yes, ill be switching over eventually to take advantage of git publishing on Azure
07:39 < ChrisPartridge> Did anyone ever use VSS?
07:39 < ljharb> ChrisPartridge: of course, 12 years ago
07:39 < ChrisPartridge> We still have a project in VSS
07:39 < sinclairzx> ljharb: CVS is not subversion. http://www.pushok.com/software/svn-vscvs.html
07:39 < astropirate> HAHAAH
07:39 < ChrisPartridge> it's my excuse to never touch it
07:40 < sinclairzx> ChrisPartridge: hated VSS, also hate Team Foundation
07:40 < sinclairzx> microsoft doesn't do version control all that well imo
07:40 < astropirate> sinclairzx, do you work for microsoft?
07:40 < ljharb> sinclairzx: CVS is all centralized version control, and it's all atrocious.
07:40 < Oddman> they're both bad
07:40 < Oddman> SVN is slightly better than CVS
07:41 < ljharb> and CVS is worse than subversion. and that link is from 2005. don't post links that old.
07:41 < sinclairzx> Oddman: SVN works for small teams, and as i work on a lot of my personal projects alone, it suites me fine
07:41 < ljharb> sinclairzx: the fact that you think that shows you know nothing of git.
07:41 < sinclairzx> astropirate: no, i don't work for Microsoft
07:42 < ljharb> centralized version control doesn't work for any size team.
07:42 < Oddman> sinclairzx, until you want to branch properly
07:42 < Oddman> or pull a feature from someone else without it being on the main repos
07:42 < ljharb> or work offline
07:42 < Oddman> :)
07:42 < Oddman> I don't know how I survived without git
07:42 < ljharb> or join the developer world of 2009
07:42 < Oddman> it made dev soooo lovely
07:42 < sinclairzx> ljharb: what the hell are you talking about, i don't have any issues with github at all, i just currently don't use it (but will when i start moving stuff onto Azure)
07:43 < ljharb> sinclairzx: i'm not talking about github, altho thats awesome. i'm talking about git.
07:43 < Oddman> git != github
07:43 < sinclairzx> Oddman: im aware
07:43 < astropirate> I'm a hipster I use http://gitorious.org/ for git hosting
07:43 < Oddman> need to stick to the terms then dude, cos that was confusing :)
07:44 < Oddman> seeing as noone menitoned github. heh
07:44 < sinclairzx> Oddman: i figured i was being flamed because i currently use google code
07:44 < astropirate> Oddman, how dare you inject logic into this discussion!
07:44 < ljharb> sinclairzx: you're being flamed because google code means you use svn. altho google code is awful too.
07:44 < astropirate> sinclairzx, nahh.. google code now also supports git
07:44 < sinclairzx> astropirate: haven't checked lately
07:45 < sinclairzx> ljharb: stfu, who cares what version control system i use?
07:45 < ChrisPartridge> Gee, gitorious is looking pretty slick these days
07:45 < Oddman> astropirate, sorry :'(
07:45 < astropirate> ChrisPartridge, I want to use them but.. they dont have issue manager and wiki :(
07:46 < __pr0t0__> Somebody should tell the FreeBSD guys that git is the only way to go
07:46 < astropirate> I had an account there btu had to give it up becuase of issue manager that was available on github
07:46 < ljharb> sinclairzx: certainly you don't care if you're not using git :-)
07:46 < __pr0t0__> They haven't gotten the message and are still winning
07:46 < ChrisPartridge> astropirate: Yeah, we are using mercurial+fogbugz+kiln here - works quite well
07:46 < astropirate> wining what??
07:46 < __pr0t0__> Well, they have an OS and you don't. That's pretty winning to me. 
07:46 < Oddman> "They haven't gotten the message and are still winning"
07:46 < Oddman> LOL
07:46 < Oddman> winning how?
07:46 < sinclairzx> ljharb: correct, i don't care, it offers me nothing over what i currently use
07:47 < astropirate> __pr0t0__, actually.... no. I have written an OS or two :p please check your facts
07:47 < Oddman> sinclairzx, that's not true :)
07:47 < astropirate> very incredibly simple, but an OS non the less
07:47 < Oddman> it offers quite a bit that you'd find very useful both personally and as part of your team
07:47 < sinclairzx> ljharb: i will care slightly more when i decide to hook up git publishing on azure
07:47 < ljharb> sinclairzx: that's 1000% not true.
07:47 < __pr0t0__> astropirate: I mean an OS that works and people use. I'm sure yours was great, but it's not powering some ATM somewhere I'm sure :)
07:47 < ljharb> sinclairzx: git offers more than svn - you just don't realize what yet.
07:47 < sinclairzx> ljharb: guess what, im done, talking about git 
07:47 < astropirate> __pr0t0__, why you go on tanget? what are they wining???????????????
07:48 < astropirate> is there a prize?
07:48 < astropirate> competetion i dont know about?
07:48 < Oddman> correct
07:48 < ljharb> sinclairzx: you can be done talking about it, but i'm not done, because you are stuck in the stone ages if you're using centralized version control.
07:48 < Oddman> FreeBSD won the best cake award for 2012
07:48 < ljharb> that's like trying to defend still using a dialup modem.
07:48 < __pr0t0__> astropirate: Yes. The prize is cake.
07:48 < astropirate> Oddman, damn!
07:48 < [AD]Turbo> hi there
07:48 < __pr0t0__> Oddman beat me. 
07:48 < astropirate> yes
07:48 < Oddman> hehe
07:48 < astropirate> you did not win!
07:48 < astropirate> :p
07:49 < Oddman> __pr0t0__, is proto.
07:49 < __pr0t0__> I lost as usual :<
07:49 < sinclairzx> ljharb: im aware of all the benefits of git, my view is this ... "oh, that's nice, i should move all my projects over to it one day". and that's it
07:49 < ljharb> fair enough. except that "one day" was 2 or 3 years ago, so you should get on it.
07:49 < astropirate> lol
07:49 < astropirate> ljharb, dont give him a hard time
07:50 < ljharb> sinclairzx: http://jonmaddox.com/2008/03/05/cleanly-migrate-your-subversion-repository-to-a-git-repository/ will get you migrated in seconds (plus however long you have to wait if your svn server is slow)
07:50 < ljharb> astropirate: i push because i love. i push because i love.
07:50 < Oddman> I push because I'm pregnant.
07:50 < astropirate> i push only when I know there is a cliff behind them
07:51 < astropirate> :O
07:51 < Oddman> haha
07:51 < Oddman> you scoundrel you
07:51 < sinclairzx> ljharb: actually, i was thinking about pushing all my code out to a paid for TFS repo
07:52 < ljharb> oh you can store the git server anywhere. you can make one on any server and just push to it with ssh.
07:52 < ljharb> for freeeee
07:52 < ljharb> altho github is awesome and you should use that.
07:52 < sinclairzx> ljharb: you get what you pay for in other words?
07:52 < Oddman> no, this isn't microsoft sinclairzx 
07:52 < sinclairzx> ljharb: like PHP, that's free too
07:52 < ljharb> yup. basic stuff is free, github awesomeness is paid for. unless youre doing open source, and then github gives it to you for free
07:52 < Oddman> where every 2nd windows release is fail
07:53 < ljharb> sinclairzx: we're talking about service. that's the only place where you get what you pay for.
07:53 < astropirate> sinclairzx, node.js is also free
07:53 < astropirate> it must be crap
07:53 < Oddman> :P
07:53 < astropirate> you shouldnt useit
07:53 < Oddman> noooooooooooo
07:53 < astropirate> javascript is also free
07:53 < sinclairzx> astropirate: exactly
07:53 < astropirate> so is typescript
07:53 < astropirate> dump it all
07:53 < astropirate> set it on fire!!!
07:53 < ljharb> software should be free. nothing else has to be.
07:53 < astropirate> air
07:53 < astropirate> Anyway
07:54 < astropirate> Anyone interested in forming a team?
07:54 < astropirate> doing node.js projects
07:54 < Sven_vB> will jade's feature-richness end up in being slow for even simple templates?
07:54 < Oddman> depends
07:54 < Oddman> does it involve cake?
07:54 < astropirate> most consulting gigs really require a team. And I am only 1 guy 
07:54 < SomeoneWeird> wats cake
07:54 < ljharb> Sven_vB: yes, i'm sure it will be slower - but, you should not worry about performance until youve built it, and its measurably slow.
07:55 < astropirate> this is cake: https://www.youtube.com/watch?v=0UJkiMrI6ZI   SomeoneWeird 
07:55 < Oddman>  cakephp? :P
07:55 < SomeoneWeird> THATS A LIE
07:55 < hemanth> anyone pawing at cluster? trying to get a soild use case to support it ....
07:55 < Oddman> link?
07:55 < sinclairzx> ljharb: you know, i could proclaim all the benefits of using .NET over JS because you don't know what your missing out on, but i won't 
07:55 < Oddman> sinclairzx, you could TRY :P
07:56 < ljharb> .net and JS aren't comparable
07:56 < astropirate> Pm me if anyone is intersted in teaming up :)
07:56 < sinclairzx> hemanth: ive been looking into cluster actually
07:56 < SomeoneWeird> o look facebooks down
07:56 < hemanth> sinclairzx, nice, what more than the examples? 
07:56 < sinclairzx> hemanth: not at this stage :) but i have been thinking about it alot
07:57 < hemanth> sinclairzx, say, some data crunching?
07:57 < astropirate> hemanth, use cluster to use all of the cores in your CPU
07:57 < sinclairzx> hemanth: not in that context no
07:57 < astropirate> if y ou have say... 8 cores. 1 node process will only use 1 core
07:57 < Sven_vB> astropirate, which country to team up in?
07:57 < hemanth> astropirate, right, aware of that. But where is it most useful and very strong use case is what i'm looking for 
07:58 < sinclairzx> hemanth: more in lines of modularizing contextual code into the same app, and running them over multiple threads, on the SAME port
07:58 < astropirate> Sven_vB, anywhere, remote is fine by me
07:58 < astropirate> hemanth, that is the use case for it
07:58 < sinclairzx> hemanth: something along the lines of having both a web app, and a socket.io app running on the same port
07:58 < astropirate> that is the only use case fo rit
07:59 < sriley> well since node js is single threaded if you only have 1 process running on 1 core and you get 2 requests at the same time the second request will have to wait till the first one is finished
07:59 < ChrisPartridge> not really
07:59 < __pr0t0__> async doesn't quite work like that
07:59 < ChrisPartridge> if request 1 has to hit io, and request 2 doesnt, request 2 might get out first
08:00 < hemanth> sinclairzx, socket and web and irc and so on, on the same port astropirate 
08:00 < sriley> yes its not quite like that, but in its simplest form its easy to describe like that
08:00 < astropirate> hemanth, good catch. my bad I didnt think of that
08:00 < Jygga> its just all sorts of wrong to descibe it like that but sure :)
08:01 < sinclairzx> hemanth: ?
08:01 < sinclairzx> hemanth: im pretty sure there isn't any other way to do it
08:03 < hemanth> sinclairzx, blank!
08:04 < sinclairzx> ...?
08:07 < hemanth> sinclairzx, trying to make one such 
08:07 < sinclairzx> hemanth: dude, i can't understand you
08:08 < hemanth> sinclairzx, trying to use cluster module to make an app with many workers doing different tasks over the same port 
08:09 < sinclairzx> hemanth: oohh
08:09 < sinclairzx> hemanth: yeah, i think it is also a sensible way to structure an application
08:09 < hemanth> yup
08:09 < sinclairzx> with the idea being that a disparate node app today, can be hosted in a cluster tomorrow
08:10 < hemanth> sinclairzx, heh heh :)
08:10 < sinclairzx> hemanth: i need something like this for Azure
08:10 < hemanth> sinclairzx, PM?
08:11 < sinclairzx> in channel would be better, clusters are a relevant topic
08:14 < hemanth> okies, will be back, need some food!
08:17 < sinclairzx> its pretty neat that nodejs can keep a setInterval looping in the background all the while serving requests
08:17 < sinclairzx> nodejs +1
08:20 < mmalecki> sinclairzx: event loops rock :)
08:21 < sinclairzx> mmalecki: gotta say, that's quite a nice feature, although the setInterval 'interval' parameter is not accurate
08:23 < mmalecki> sinclairzx: yeah, that happens because you end up blocking sometimes
08:24 < sinclairzx> mmalecki: do you run node on IIS at all?
08:24 < mmalecki> it shouldn't be that inaccurate tho
08:24 < mmalecki> no, I try to stay away from IIS as far as I can
08:24 < sinclairzx> mmalecki: its ultra inaccurate 
08:25 < mmalecki> sinclairzx: how many miliseconds are we talking about?
08:25 < sinclairzx> about 1000
08:25 < mmalecki> WAT.
08:25 < sinclairzx> i set interval to 1
08:25 < mmalecki> I mean, damn man.
08:26 < mmalecki> get rid of IIS, set up some proxy in front of node if you care enough
08:26 < sinclairzx> mmalecki: like?
08:27 < sinclairzx> don't say nginx
08:27 < mmalecki> sinclairzx: node-http-proxy
08:27 < mmalecki> running in front of over 4k machines at nodejitsu, definitely production-ready :)
08:27 < mmalecki> (multiple instances, obviously)
08:28 < pixie79> morning all - i am looking to try and simplfy my drbd read module so that i can then use it other for more than one script, I think i am lost in the how to put functions in modules correctly and then have them read a file and return
08:28 < pixie79> so far i have: http://pastebin.com/RzdtnqCy
08:28 < pixie79> which just prints 'FUNCTION'
08:29 < sinclairzx> mmalecki: does it offer me process management, scalability on multi core servers, auto-update, access to logs over http,  does it run side by side with .NET applications, and a integrated management experience ?
08:29 < pixie79> ignore me - i found how to get it to give me the results, now just to see if i can assign that to a var
08:29 < mmalecki> sinclairzx: nope, it wasn't built for it
08:30 < sinclairzx> mmalecki: IIS is built for that
08:30 < mmalecki> for process management I'd recommend forever
08:30 < mmalecki> cool
08:30 < sinclairzx> IIS FTW !
08:31 < pixie79> hm - ok may be not, if i dump inside the function it prints, but i need to return contents of the read file
08:31 < mmalecki> heh, whatever you prefer
08:31 < sinclairzx> mmalecki: looking at deploying to Azure
08:34 < rendar> mmalecki: you are at nodejitsu? :)
08:34 < sinclairzx> mmalecki: handlebars looks like a good template engine
08:35 < mmalecki> rendar: yup, devops engineer
08:35 < rendar> mmalecki: cool!
08:35 < mmalecki> indeed it is :)
08:35 < jesusabdullah> the mustache family isn't terrible
08:35 < jesusabdullah> at least, as non-terrible as templating can really be
08:36 < rendar> mmalecki: they have 4000 machines? wow, i didn't thought that
08:36 < mmalecki> rendar: hey, those apps have to go somewhere, right? :)
08:37 < rendar> eheheh
08:37 < rendar> mmalecki: so basically, you write your server with node.js, and you just submit it to nodejitsu and they run it, in few clicks..
08:37 < sinclairzx> mmalecki: do you use handlebars to precompile your templates, or do you have your application compile them on the fly?
08:38 < jesusabdullah> sinclairzx: you mean like, caching?
08:38 < mmalecki> rendar: one command line, to be precise :)
08:39 < rendar> mmalecki: lol :P
08:39 < mmalecki> sinclairzx: I don't use handlebars
08:39 < mmalecki> I rarely do stuff on frontend these days
08:39 < sinclairzx> jesusabdullah: nope, not exactly
08:39 < mmalecki> if I do, I use plates
08:39 < NodeX> anyone here use socket.io?
08:39 < jesusabdullah> sinclairzx: wouldn't it really be a matter of whether you need to update values or not?
08:39 < jesusabdullah> NodeX: yes, everyone and their dog uses socket.io ;)
08:39 < sinclairzx> jesusabdullah: but everyone should cache, it's what what im refering to
08:39 < NodeX> in production on large scale sites?
08:40 < jesusabdullah> yes
08:40 < sinclairzx> jesusabdullah: values are typically passed into a compiled template
08:40 < NodeX> what sort of performance do you get out of it
08:40 < jesusabdullah> oh I see
08:40 < NodeX> say 50k connected users pushing a message to all?
08:40 < jesusabdullah> I mean, that saves some computation up-front, I'd think
08:40 < jesusabdullah> yes
08:40 < jesusabdullah> if websockets are going
08:41 < mmalecki> NodeX: you'd need around 10 GBs of total RAM to do that I think
08:41 <@Nexxy> ugh.
08:41 < NodeX> but it would handle it fine yes?
08:41 < mmalecki> 256 MB machine can handle around 500 concurrent users with a simple hello world app
08:42 < sinclairzx> is it considered blasphemy to use Microsoft SQL Server to house my nodejs applications data?
08:42 < NodeX> that's pretty cool
08:42 < rendar> mmalecki: how they at ninjutsu manage security? i mean, what about if i deploy a malicious node.js script? are they sandboxed or what?
08:42 < TehShrike> wat
08:42 < mmalecki> rendar: yeah, we do heavy sandboxing
08:42 < rendar> mmalecki: i see
08:43 < rendar> mmalecki: but you use a your own sandbox, or the one with node.js(? does it have one) or googlev8?
08:43 < sinclairzx> mmalecki: do you work at nodejitsu ?
08:43 < NodeX> is there a general accepted method of scaling socket.io or is it accepted to scale horizinatly by adding more servers
08:43 < mmalecki> sinclairzx: yes
08:43 < sinclairzx> oh nice
08:43 < sinclairzx> kudos
08:44 < mmalecki> rendar: various operating system-level techniques
08:44 <@Nexxy> that depends on what you call "work"
08:44 < rendar> mmalecki: i see, linux i guess
08:44 < mmalecki> rendar: smartos
08:44 < sinclairzx> hello Nexxy 
08:44 <@Nexxy> hi sinclairzx 
08:44 < mmalecki> but those do apply to unix in general
08:45 < rendar> mmalecki: i see
08:45 < mmalecki> Nexxy: I'm a responsible employee!
08:47 < eldios> sinclairzx, it's considered blasmpehy to use MSSQL :P
08:47 < eldios> Nexxy, \o/ 
08:48 < mmalecki> it's considered blasphemy to use MS*
08:48 < eldios> o/
08:48 < Spion_>  except for typescript
08:49 < mmalecki> well, no, that too ;)
08:49 <@Nexxy> mmalecki, uh huh ;P
08:49 <@Nexxy> eldios, hai \o/
08:49 < eldios> ^^
08:51 < mmalecki> Nexxy: btw, when are you arriving to Dublin?
08:51 < mmalecki> I'm getting in on 15th
08:52 < eldios> oh.. are you going to the nodejsconf in dublin?
08:52 < mmalecki> hell yeah I am
08:52 < eldios> =)
08:52 < mmalecki> hit me up for drinks
08:52 < mmalecki> where I'll be representing as a responsible nodejitsu employee.
08:52 < eldios> well if you pass near Pisa, I will sure do
08:53 < mmalecki> eldios: I'll be in Brescia
08:53 < eldios> oh
08:53 < mmalecki> for nodejsconf.it
08:53 < eldios> I'll be there too
08:53 < mmalecki> hit me up for drinks!
08:53 < eldios> let's definitely meet there
08:53 < mmalecki> I'm getting in on 6th, leaving on 19th
08:53 < eldios> wow
08:54 < eldios> visiting the area?
08:54 < mmalecki> definitely
08:54 < eldios> well.. be sure to come in Tuscany
08:54 < eldios> we'll drink twice :P
08:55 < mmalecki> at least.
08:55 < eldios> XD
08:55 < mmalecki> brb, gotta buy some milk, my fridge is full of beer
08:55 < mmalecki> with no food
08:58 < pixie79> how do i return an array to the calling function, when the contents of the array are the result of a file read?
08:59 < astropirate> pixie79, you dont
08:59 < pixie79> currently i have the following ?http://pastebin.com/jEbnxJg0
08:59 < astropirate> have the callign function provide a callback function
08:59 < astropirate> which takes the array as a parameter
09:01 < pixie79> astropirate: i get the first part - not sure how i assign the array as a parameter to a callback though
09:02 < astropirate> callback(myArray);
09:02 < hemanth> sinclairzx, still around?
09:02 < sinclairzx> yus
09:03 < hemanth> so how about a Torrent cluster client?
09:03 < sinclairzx> hemanth: maybe?
09:03 <@Nexxy> mmalecki, not till the 16th I believe
09:03 < pixie79> ok i will try
09:03 < hemanth> astropirate, what say? ^^
09:03 <@Nexxy> mmalecki, I *just* got to Berlin an hour ago
09:03 < sinclairzx> hemanth: tbh, i haven't built a torrent client before
09:04 < astropirate> hemanth, what? o_O
09:04 < hemanth> sinclairzx,  Torrent cluster client?
09:04 < hemanth> sinclairzx, we can use required modules and each worker will work on given set of links. astropirate 
09:05 < sinclairzx> hemanth: where are you from ?
09:05 < hemanth> hemanth, Bangalore 
09:05 < astropirate> hemanth, what would be the point of that?
09:05 < hemanth> astropirate, just to get an app with cluster ;) #fun?
09:06  * astropirate slaps hemanth
09:06 < astropirate> no fun allowed
09:06  * hemanth hides behing Nexxy and sinclairzx to avoid angry astropirate 
09:09 < pixie79> astropirate: that just gave me function callback is not defined: -> exports.read = function (callback) {
09:09 < astropirate> sec lemme look at your code
09:12 < astropirate> pixie79, http://pastie.org/4913797
09:13 < pixie79> astropirate: thanks
09:23 < pixie79> astropirate: much appreciated - i now have that data where i need it in an array ready to be used - just need to chop it in to json ideally next
09:38 < mmalecki> Nexxy: awesome. drinks on 16th
09:39 < pyrotechnick> this is huge: http://news.sky.com/story/993180/milky-way-black-holes-found-by-astronomers
09:40 < pyrotechnick> predatory universe
09:44 < astropirate> pixie79, sorry was AFK
09:44 < astropirate> to do that just do JSON.encode()
09:44 < astropirate> sorry i mean
09:45 < astropirate> JSON.stringify
09:45 < BennyLava> > JSON.encode
09:52 <@Nexxy> mmalecki haha oki
09:52 < mmalecki> Nexxy: AvianFlu is getting in on 16th too!
09:54 < mon> any info about node.js based Tent server yet?:)
09:54 <@Nexxy> sweet!
09:56 < mmalecki> Nexxy: yes!
10:11 < gavri> I'm using express. I'd like to functional test my application without having to start up a server. is there a way to get my requests routed and my request handlers executed without having to start up an http server?
10:12 < astropirate> I would like to know this too
10:24 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
10:24 < hemanth> Rails to node.js 20X time faster!  :)
10:25 < Gottox> <random your-mother response>
10:25  * astropirate smacks Gottox 
10:26 < astropirate> hemanth, that is good but as many have said: we just dont know why that is
10:26 < astropirate> is that becaue node is just retardedly faster
10:26 < jcoglan> fwiw, I have plenty of tests that boot a server and make requests, for integration tests
10:26 < astropirate> or because their old code just sucked massively
10:26 < jcoglan> booting a server is plenty fast enough for this
10:27 < jcoglan> if you don't want to do that, just invoke the request handler function with fake request and response objects
10:27 < jcoglan> check that the response receives writeHead(), write(), end() et
10:27 < jcoglan> s/et/etc/
10:28 < gavri> jcoglan: I'd like the functional test to include the actual url that is matched and routed
10:29 < jcoglan> so either boot a server and use http to call it, or call the request-handler function with a fake request
10:29 < jcoglan> e.g. {url: '/the/url/being/tested'}
10:30 < gavri> if I call the request handler function directly, I'm bypassing the actual routing which I don't want to unit test separately
10:30 < jcoglan> you'll obviously need more to make it a real-looking request object, but it's fairly easy to add the properties a typical request handler uses
10:30 < jcoglan> I don't mean call the individual route handler, I mean call the top-level handler that processes all incoming requests
10:30 < gavri> oh
10:31 < gavri> that's cool
10:31 < jcoglan> (I don't know exactly where that is in express, or if it's exposed)
10:31 < gavri> jcoglan: thanks. I'll see if I can pursue that
10:31 < jcoglan> but I'd try going the full-stack route w/ booting a server first, it's surprisingly fast
10:31 < astropirate> http://ikaisays.com/2012/10/04/clearing-up-some-things-about-linkedin-mobiles-move-from-rails-to-node-js/
10:32 < jcoglan> I do this in a bunch of my tests, e.g. https://github.com/jcoglan/restore/tree/master/spec/restore
10:32 < jcoglan> they're really fast
10:33 < gavri> it's not about the speed. I just don't know how to get it to work. for example, all my functional tests need this and I could choose to run an individual test, or a subdirectory of tests or all the tests
10:33 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
10:33 < gavri> and in all these cases, I'd like for a server to start up
10:33 < gavri> but only once
10:33 < gavri> I use vows
10:34 < gavri> which takes in one or more list of test files
10:35 < txdv_> he is asian
10:35 < jcoglan> to start the server, you could use
10:36 < hemanth> astropirate, :)
10:36 < jcoglan> topic: function() { server.listen(4567, this.callback) }
10:36 < jcoglan> (possible, I don't know vows)
10:36 < jcoglan> but you'd need an 'after' hook to shut down the server after each test, which I don't know if vows has such a thing
10:37 < gavri> see that's the thing. I don't want to have to type "topic: function() { server.listen(4567, this.callback) }" for each batch of vows
10:37 < gavri> maybe I'm just spoilt with rails tests
10:39 < pyrotechnick> txdv_: http://en.wikipedia.org/wiki/Race_and_intelligence
10:42 < pyrotechnick> read it and weep
10:43 < gavri> a way I could work around this is if I use an alternate router (which lets the route handlers be directly invoked) https://npmjs.org/package/router for express
10:43 < gavri> does express allow the router to be replaced?
10:43 < astropirate> no
10:44 < jcoglan> how hard would it be to use a test framework with before-all/after-all hooks that let you start/top the server?
10:46 < txdv_> everytime i see this vertx i am like
10:46 < txdv_> awesome, fast, must be an awesome thing
10:46 < txdv_> but then i remember that i would have to use freaking java
10:52 < h4nnibal> how is java freaking?
10:53 < shinaku_> Anyone developed nodejs on an android tablet?
10:53 < txdv_> h4nnibal: no lambdas
11:00 < kranius> txdv_: wrong
11:00 < txdv_> i guess tsince i am always playing with bleeding edge
11:00 < txdv_> it wouldn't bother me
11:07 < gavri> ;
11:21 < syskk> any reason why require('repl'); breaks Express app?
11:22 < syskk> require('repl').start('REPL> ') actually breaks my app
11:24 < jcoglan> something to do with stdout.setRawMode(true) ?
11:24 < jcoglan> I've had repl break the password module and other CLI stuff, never a web app
11:24 < syskk> probably. anyways fixed the problem by forcing the repl to start only after express server is started
11:25 < jcoglan> s/stdout/stdin/
11:27 < syskk> is it possible that stdout is going to the repl's input?
11:29 < gavri> I have a question about environment handling in node.js (development, test and production). I'm using nconf and sequelize and both of them seem to assume that there is only one enviroment. for example, sequelize's migrations read from config/config.json (this file path is hard coded in sequelize) and it completely ignores NODE_ENV. what am I missing here? what should be my approach to make sure that when tests run they don't muck around with development data?
11:29 < sinclairzx> anyone here fond of OData?
11:43 < mscdex_> gavri: send sequelize a pull request? :-)
11:44 < pixie79> is there an easy way to delete the first line of text from a string (or first two lines actually)
11:44 < gavri> mscdex_: but what's the general approach towards environments in node.js world though?
11:44 < astropirate> pixie79, yes open it up in a text editor and delete the first line or two
11:45 < nkuttler> pixie79: regex, match newlines, remove whatever you don't want
11:45 < litenull> +1
11:45 < pixie79> nkuttler: ok - off to hunt regex then
11:45 < mscdex_> gavri: not sure there is a single approach used, express which is pretty popular, uses NODE_ENV and the like
11:46 < nkuttler> !mdn string replace @ pixie79 
11:46 < nkuttler> hrm, isn't that bot here as well?
11:46 < mscdex_> nkuttler: coffee break ;-)
11:46 < gavri> so I really can't submit a pull request for sequelize, I guess. I don't know what the author would find acceptable. there's too much leeway here
11:47 < nkuttler> mscdex_: ok
11:47 < nkuttler> gavri: isn't he in #sequelizejs ?
11:47 < gavri> okay, I didn't know that channel existed. thanks
11:48 < pixie79> nkuttler: thanks
11:48 < nkuttler> pixie79: yw
11:48 < gavri> how soon are the npmjs.org versions typically updated after a pull request on github?
11:56 < mscdex_> gavri: depends on the module author
11:57 < mscdex_> and whenever they're ready to bump the version
11:58 < eldios> guys if there's anyone (who knows someone) in a need for a remote devOps/sysEng please query me in private =)
12:01 < syskk> mmm how hard would it be to connect the REPL to Chrome's webkit inspector or something? I'm sure something like this already exists
12:08 < pixie79> nkuttler: i have this - data = data.replace(/(^.*$)[0]/gm," "); - but it does not seem to be switching the firstline for a space
12:09 < TheSheep> pixie79: I don't think [0] does what you think it does
12:09 < nkuttler> isn't .* greedy in js?
12:09 < TheSheep> it is, not just in js
12:10 < TheSheep> but . doesn't match \n by default
12:10 < pixie79> may be - i did it without the [0] and it took the whole string not just the first line
12:10 < TheSheep> pixie79: right, now do it without /gm
12:10 < TheSheep> pixie79: just /^.*$/
12:11 < pixie79> TheSheep: data = data.replace(/^.*$/); - make no differance
12:12 < TheSheep> pixie79: and without ^ and $
12:12 < TheSheep> they are spurious
12:12 < TheSheep> > 'abcd\ndef'.replace(/.*/, ' ');
12:12 < TheSheep> ' \ndef'
12:13 < nathan7> syskk: the webkit console is a REPL >_>
12:14 < pixie79> TheSheep: thanks - that matches the first line ok - now i need to hit the second - i will play
12:14 < mscdex_> syskk: i think that's what node-inspector does, or one of those
12:15 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:15 < TheSheep> pixie79: 'abcd\ndef'.split('\n');
12:20 < mscdex> pixie79: /(?:.*?\n){2}([\s\S]*)/.exec("foo\nbar\nbaz\n\n")
12:20 < mscdex> that removes the two first lines
12:21 < mscdex> well, it captures all but the first two lines
12:21 < nkuttler> hrm
12:22 < nkuttler> >> 'foo\nbar\nbaz\n'.replace(/(.+\n){1,2}/, '');
12:22 < purr> nkuttler: (string) 'baz\n'
12:23 < pixie79> nkuttler: thanks - that is the one i needed,
12:23 < pixie79> mscdex: i think i have a different need for your regex as well so thank you for that
12:25 < nkuttler> pixie79: but do some more reading and there's also #regex .+ vs .* etc..
12:27 < syskk> mscdex_: yes i know node-inspector but that's not exactly what im looking for
12:29 < pixie79> nkuttler: ok - will do
12:36 < pixie79> i have just done the following split - var dataA = data.split(/\d+:\scs:/); - which gives me the data split where i need it, however i also need the contents of the match to also be in the split and not cut out - any ideas ?
12:43 < nkuttler> !mdn string split @ pixie79 
12:43 < nkuttler> meh
12:44 < nkuttler> pixie79: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/split#Example.3A_Capturing_parentheses
12:44 < nkuttler> if in doubt, rtfm
12:51 < sinclairzx> is it time for another TS talk?
12:51 < sinclairzx> is anyone else trying to mix node and TS?
12:51 < sinclairzx> would be good to have a chat
12:56 < RLa> ts?
12:56 < sinclairzx> RLa: typescript
12:56 < RLa> oh
12:58 < sinclairzx> i seems im the only one using it
12:59 < sinclairzx> https://c9.io/site/blog/2012/10/typescript-support-in-cloud9/
13:01 < RLa> will webstorm support it too?
13:10 < gavri> ;
13:11 < sinclairzx> i dont know
13:19 < RLa> typescript is certanly overhyped at this point
13:37 < Guest12336> hi! How do i get all the events in for an addListener; like request.addListener("data",   <- how do you what kind of listerners there are
13:37 < Guest12336> ?
13:38 < RLa> see docs?
13:38 < SomeoneWeird> console.log(request)
13:38 < SomeoneWeird> should be under _events or something like that
13:38 < Guest12336> thx
13:48 < ansolas> hello,, is there a better way to upload big files ?
13:48 < ansolas> http://net.tutsplus.com/tutorials/javascript-ajax/how-to-create-a-resumable-video-uploade-in-node-js/
13:48 < ansolas> this solution seams to be quite slow
14:05 < superjoe> ansolas, does it have to be resumable?
14:06 < Industrial> substack: I'm setting up fleet on my hosting which is just one box/IP right now, so I have 1 drone. I'm not sure from where to call fleet spawn. If I call spawn for a few repos, and then do a deploy of one, will it re-spawn the affected/new build of the one repo? or do I manage the updates myself?
14:06 < ansolas> would be nice
14:06 < ansolas> but would be not resumeable be fasyter ?
14:06 < ansolas> faster
14:06 < ansolas> ?
14:07 < superjoe> ansolas, you might be better off with a multipart xhr
14:07 < superjoe> if you're willing to give up IE9 support
14:07 < ansolas> aha cool
14:07 < ansolas> where can i read about this
14:08 < ansolas> ...i dont care about ie
14:08 < Industrial> Also, right now I'm using forever to run my node servers and keep them up. Fleet doesn't do anything about failing spawns, right?
14:08 < superjoe> ansolas, http://www.html5rocks.com/en/tutorials/file/xhr2/
14:08 < superjoe> ansolas, that'll give you progress callbacks too
14:09 < ansolas> very nice
14:09 < ansolas> and how to hande this on teh server side ?
14:09 < ansolas> thank you
14:09 < superjoe> ansolas, use formidable or connect or express
14:09 < ansolas> ok i use express
14:10 < superjoe> use the bodyParser middleware - the upload will be available as a temp file
14:10 < ansolas> ok i do research on teh bodyparser
14:11 < superjoe> ansolas, read the express guide. then you'll know the 1 line it takes to plug that sucker in.
14:11 < ansolas> yeh i saw that , but have no clue yet how to put all pieces together :)
14:12 < ansolas> app.use(express.bodyParser());
14:13 < ansolas> ok great 
14:18  * jetienne trying to take off mocha
14:20 < jetienne> how mocha find the files to which contains the test ?
14:31 < Industrial> substack: Can I get fleet spawn to clone submodules?
14:31 < Industrial> deploy, rather.
14:36 < draginx> Anyone know if EMCAScript specifices to use camelCase or snake_case?
14:36 < Industrial> draginx: if either runs, then no.
14:37 < draginx> what>>
14:37 < Industrial> draginx: No it doesn't. The NodeJS community however uses camelCase.
14:37 < BennyLava> [citation needed]
14:37 < draginx> ok thanks
14:37 < BennyLava> wtf
14:37 < Industrial> mostly.
14:38 < draginx> BennyLava: ivew heard of it too nodejs style guide
14:38 < BennyLava> "mostly". In other words, personal preference.
14:38 < Industrial> that's what I'm saying, yes.
14:38  * BennyLava rolls his eyes
14:40 < draginx> BennyLava: why do u hate nodejs so much? :P
14:41 < BennyLava> draginx: "u"?
14:41 < draginx> yeah
14:41 < draginx> i actually have a job
14:41 < BennyLava> draginx: and do I? What the hell?
14:41 < draginx> so i cant spend to much time in here ;)
14:41 < BennyLava> Yeah, so do I?
14:41 < pixie79> hi there a test i can do to see if something is valid json? I have written a string which i believe is  valid and when i output it to console.log it validates ok in online json checkers
14:41 < BennyLava> Wha tthe fuck is your point?
14:41 < pixie79> ideally i would now like to be able to call the json parts of the string within the rest of my script
14:41 < BennyLava> What the*
14:42 < BennyLava> draginx: you see, quite a lot of people with tech job can spend time on IRC at work.
14:42 < BennyLava> jobs*
14:42 < draginx> w/e man, you win the internet
14:42 < BennyLava> draginx: thank you. You, on the other hand, only win at failing.
14:42 < BennyLava> Thanks for playing!
14:43 < deoxxa> arguably i spend more time at work on irc than i do working
14:43 < BennyLava> Me too!
14:43 < BennyLava> I'm just that good.
14:43 < deoxxa> also arguably that turns out to be productive
14:43 < BennyLava> Well, fast anyway.
14:43 < deoxxa> most of my work is done by my subconscious, i find
14:44 < deoxxa> if i have a hard problem, i just stop paying attention to it for a while
14:44 < deoxxa> then it fixes itself in my head
14:44 < deoxxa> and wheeeee
14:44 < BennyLava> right
14:44 < deoxxa> thanks, brain!
14:45 < medice> you should go out drinking while your brain works out the problems
14:51 < mon> deoxxa: so you're better when not thinking :)
14:52 < deoxxa> heh, i guess
14:52 < mon> ... in solving problems
15:10 < superjoe> is there any documentation on what streams 2 is hoping to achieve?
15:14 < holzp> express3 and jade, for some reason my template blocks are not using pretty : true
15:14 < holzp> resulting in no whitespace
15:14 < holzp> hence ugly
15:14 < holzp> anyone else have this prob?
15:14 < holzp> i set pretty in app.locals
15:24 < eblume> Hey all. I'm trying to have a devDepenency on "mocha" and "chai", but when I run "npm install --dev" it tries to pull in at least 30 packages, maybe more, and errors start popping up all over the place.
15:25 < eblume> When I try "npm install -g mocha" and "npm install -g chai" the installs finish very quickly without the extra package nightmare (although with a FEW packages pulled in), BUT they then fail to get included when I require() them
15:25 < eblume> Does anyone know what might be happening?
15:29 < holzp> so wierd, the whitespace in my jade blocks is being handled completely different than the whitespace in the layout
15:29 < holzp> and pretty doesnt seem to carry over to the blocks
15:32 < ansolas> https://github.com/23/resumable.js#readme
15:32 < ansolas> cool stuff
15:34 <@isaacs> o/
15:34 < nathan7> \o
15:35 <@isaacs> eblume: -g installs are not for require()
15:35 <@isaacs> eblume: you need to either a) install the package directly in your project (so it goes into ./node_modules/whatever)
15:35 < eblume> isaacs: fair enough - any idea about why the --dev install is pulling in half the tree?
15:35 < holzp> :( frameworks, when they are good they are time-savers when they arent they are time-wasters
15:35 <@isaacs> eblume: or b) use `npm link` to link the global version into the local space.
15:35 < nathan7> eblume: it pulls in devDependencies recursively afaik
15:35 < eblume> Ah, I see.
15:35 <@isaacs> eblume: --dev is almost never necessary
15:35 <@isaacs> eblume: devDeps will be installed at your top level anywa
15:36 <@isaacs> eblume: so you get YOUR devDependencies, but not everyone else's, when you do `npm install`
15:36 <@isaacs> eblume: because, presumably, you are developing :)
15:36 < eblume> Er - so what's the idiomatic way to have your project use mocha & chai for testing?
15:36 < eblume> Oh wait I think maybe I see now - 'npm install' does MY devDeps
15:36 <@isaacs> eblume: list mocha and chai as devDependencies
15:36 <@isaacs> eblume: then do `npm install`
15:37 < eblume> Ok. Thanks isaacs!
15:37 <@isaacs> eblume: neat trick! `npm install mocha -D` <-- installs mocha, and saves it as a devDependency
15:37 < eblume> Oh that IS a neat trick. It modifies package.json?
15:37 < context> yes
15:37 <@isaacs> eblume: then if you wanna get extra fancy, put a `"scripts":{"test":"whatever command makes mocha go"}` in package.json, as well
15:37 < context> its just like magic
15:37 <@isaacs> eblume: then run `npm test`
15:38 < eblume> Cool. Thanks guys!
15:38 < context> isaacs: wha! now i think you are just smokin the kool-aid
15:38 < davemo> -D === --save-dev ?
15:38 <@isaacs> davemo: yeah
15:38 < davemo> cool, TIL
15:38  * isaacs cba to type more than one-character flags.
15:38 < davemo> cba?
15:38 <@isaacs> -SB is like --save but also adds to bundleDependencies
15:39 <@isaacs> that's the "StrongBad operator"
15:39 < davemo> haha
15:39 <@isaacs> aka --save --save-bundle
15:39 < eblume> davemo: Can't Be Asked (well, usually not 'Asked', but I don't know the MPAA rating of this channel)
15:40 <@isaacs> davemo: can't be assed
15:40 < davemo> gotcha
15:40 < eblume> Well that one too. ;)
15:40 < holzp> can't be arsed sounds much more sophisticated
15:41 < nathan7> holzp: cannot be anused
15:41 < holzp> everythign sounds more sophisticated british
15:41 < holzp> loo > can
15:42 < nathan7> hakunin: Indeed C=
15:43 < davemo> i should really read the NPM documentation, I just kind of learn the pieces i need to in order to get what i want done :P
15:43 < superjoe> isaacs, is there any documentation on what streams 2 is hoping to achieve?
15:44 < superjoe> just curious
15:48 <@isaacs> superjoe: https://github.com/isaacs/readable-stream
15:57 < superjoe> thanks
15:57 < Nasga> hello, i want to setup a tcp thread to read logs, send some comands in nodejs, do you know a module witch do that ?
15:59 < Nasga> or in web with express, why not :)
16:00 < superjoe> excellent writeup. looking forward to this new API
16:06 < jetienne> q. is dtrace available on linux ?
16:07 < isao> a. no
16:07 < jetienne> isao: thanks
16:08 < isao> np
16:10 < s5fs> Nasga: check out 'net', maybe?
16:11 < s5fs> Nasga: also log.js
16:11 < Nasga> s5fs: will see
16:12 < superjoe> isaacs, at https://github.com/isaacs/readable-stream/blob/master/examples/CAPSLOCKTYPER.JS#L11 where you call String(chunk), how can you be sure that chunk doesn't start in the middle of a multibyte utf8 character?
16:13 < Nasga> s5fs: thx a lot for logjs :) i will try this way with express / socketio for clients
16:13 <@isaacs> superjoe: meh.  can't.
16:13 <@isaacs> superjoe: capslock is anglocentric.
16:13 < s5fs> Nasga: best of luck!
16:13 <@isaacs> superjoe: i could do setEncoding('utf8') to be sure, though
16:14 < superjoe> isaacs, do it! otherwise people will copy the glitch from the examples into their own code
16:15 < Nasga> s5fs: http://logio.org <- they do that for linux, i just need for my node app :)
16:15 <@isaacs> superjoe: hm... seems like that doesn't actually work anyway at the moment.
16:15 <@isaacs> i must have broken something
16:17 < superjoe> isaacs, in node.js current stable, setEncoding("utf8") avoids this problem, correct?
16:17 < superjoe> I've been assuming it does but never tested it
16:17 <@isaacs> superjoe: yeah
16:18 < superjoe> cool.
16:35 < Sven_vB> just watching the NodeJS 0.2 -> 0.3 roadmap lecture, about copying strings out of V8 to send them over the net vs. getting a pointer to the string directly. did that work out since then? also, should i try and store static parts of my web templates in Buffers and write them to the socket directly, instead of building up strings and sending them?
16:37 < superjoe> Sven_vB, whoa dude.
16:37 < superjoe> you're thinking way too low level
16:48 < Sven_vB> i'm trying to use node on an embedded device. :)
16:49 < Gottox> like the raspi? :)
16:49 < Gottox> 0.8.11 compiles just fine :D
16:52 < Sven_vB> raspi could be, but i'd prefer to try an anykey0x
16:56 < s5fs> Sven_vB: i'm using node on an embedded device too
17:10 < s5fs> Sven_vB: i hadn't seen the anykey0x, looks very interesting. i'm currently targeting beagleboards, not really the same at all haha!
17:21 < larryapplegate> Looking for someone to help me create a server which may include the node-formidable body parser to serve an IOS client. I will write the IOS client, need to know what it needs to do to match what the server expects.
17:29 < CoverSlide> larryapplegate: http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2 <<--- with multipart/form-data
17:30 < CoverSlide> larryapplegate: actually, just read the whole section: http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4
17:30 < CoverSlide> it covers the basic types of form data that should be parsed by bodyParser
17:35 < RushPL> I opened a process with child_process.spawn and when I write to its stdin, the other process does not receive the data .. it seems to get buffered, how to flush it? There is no flush method in process.stdin and I do not want to .end() it
17:39 < tnorris> RushPL: are you spawning another node script?
17:39 < RushPL> nope, actually a perl script
17:39 < RushPL> and when I do myProcess.stdin.end() it gets the input but also EOF :)
17:40 < RushPL> so it quits
17:40 < RushPL> and myProcess.stdin has no flush() :/
17:41 < RushPL> bbl,I would be glad to to have an answer..
17:43 < tnorris> RushPL: could you post at least your node script in a pastebin or such?
17:50 < larryapplegate> CoverSlide: Thanks!
17:52 < tnorris> is there any documentation on what changes are being made in the streams2 branch?
17:53 < CoverSlide> tnorris: https://github.com/isaacs/readable-stream
17:54 < tnorris> CoverSlide: awesome dude. thanks.
17:57 < rendar> i can't get a thing, i have just read that node do not start manually the event loop, like SomeLib::run(); but why? what advantages this would bring?
17:58 < nathan7> rendar: The event loop is always there
17:59 < nathan7> rendar: Because it's silly to have that as a manual thing on a platform where everything is in the event loop
18:02 < tnorris> CoverSlide: whoa, those are significant changes. You know if there is a planned version for integration?
18:03 < rendar> nathan7: hmmm i see
18:03 < rendar> nathan7: so its just for syntax-sugar?
18:03 < CoverSlide> well he says that it will enter legacy mode whenever the "data" event is listened for
18:03 < CoverSlide> so like when piped
18:04 < CoverSlide> and it should be compatible until that's deprecated, which I don't know when that will happen
18:04 < CoverSlide> maybe v0.12
18:05 < tnorris> interesting. thanks.
18:11 < Sven_vB> <3 readable-stream
18:11 < purr> Let it be known that Sven_vB hearts readable-stream.
18:12 < nathan7> rendar: it's because every node program needs an event loop
18:14 < Sven_vB> rendar, there are only very few things you could do in node that would *not* need an event loop, and most of those are bad things. ;) so, since the majority of programs need an event loop anyway, NodeJS implies that you want one and automagically starts it at "the end" of your main script.
18:14 < Sven_vB> which therefore most often isn't really the end.
18:17 < drewolson> hey all, i'm using bluepill to monitor and daemonize a node.js process. when the process is daemonized by bluepill, my calls to an external program launched using child_process fail to return any data. any idea what might be happening here (obscure, i know)?
18:18 < tnorris> drewolson: is the child process returning data to the node process via stdin?
18:18 < drewolson> tnorris: i'm sending data to the process via stdin and receiving data via stdout
18:19 < drewolson> tnorris: from the child_process stream
18:19 < tnorris> yeah, so something like `cp.stdin.write(data)` and `cp.stdout.on('data', function() {})`?
18:20 < drewolson> tnorris: yes, exactly
18:21 < tnorris> can you run the script outside of bluepill to see if anything is being returned?
18:21 < drewolson> tnorris: i can and did, the data is being returned when the script is not launched via bluepill
18:21 < drewolson> tnorris: the rest of the app works when launched via bluepill up to the point of the requirement on external data, then it just hangs
18:23 < drewolson> tnorris: not sure if this matters, but i'm actually piping the stdout of the child process through https://github.com/dodo/node-bufferstream
18:23 < tnorris> drewolson: hm, ok. do you think bluepill is force redirecting cp.stdout? your js sounds fine.
18:23 < squeakytoy> Mine? http://sphotos-f.ak.fbcdn.net/hphotos-ak-ash3/525919_4799215144002_877027741_n.jpg
18:23 < drewolson> tnorris: well, i do redirect the stdout of the node process to a log file via bluepill, should that effect the child process?
18:24 < context> squeakytoy: hahahaha
18:24 < drewolson> tnorris: now that i'm thinking it, that must be the problem
18:24 < squeakytoy> context, its good isnt :P
18:24 < squeakytoy> had to log into irc just to post a funny picture
18:24 < tnorris> drewolson: may want to include the line `process.stdout.pipe(process.stdin)`
18:25 < tnorris> actually, nevermind that.
18:25 < drewolson> tnorris: ok, was just about the ask
18:25 < drewolson> let me try removing the stdout redirection, one sec
18:28 < drewolson> tnorris: still no dice
18:28 < TooTallNate> Benvie: ref-bitfield looks nice!
18:29 < tnorris> drewolson: for debugging, can you try not using bufferstream, and process the write event directly: `cp.stdout.on('data', function() {})`
18:29 < drewolson> tnorris: yes, one sec
18:31 < tnorris> drewolson: heading to lunch, be back soon.
18:31 < drewolson> tnorris: still not working, thanks for the help so far, enjoy your lunch
18:42 < Benvie> TooTallNate: yeah it shaped up quickly. I need to finish the tests but it's otherwise near completion I think
18:43 < TooTallNate> Benvie: it'll be cool to be able to pass an Object with true/false flags to an ffi function that has an "int flags" arg :)
18:43 < TooTallNate> Benvie: i'll probably help with the tests
18:44 < Benvie> yeah as I have it now it handles either an object or you can still set the raw number
18:46 < Benvie> might be worth providing a built into function that outputs a plain object with all the properties filled out on the object. I have it in the test file currently but might be good to at like as a prototype method or Constructor function or somethjing
18:50 < TooTallNate> Benvie: i called it toObject() in ref-struct
18:50 < Benvie> oh I missed that!
18:50 < TooTallNate> Benvie: and then aliased that for toJSON() and inspect()
18:51 < Benvie> I'll add that then! Wanted to try and stay as close to ref-array and ref-struct as possible but didn't see that for some reason =D
18:52 < drewolson> tnorris: i figured out the problem, the app i was spawning with child_process was not in the path of the user running the node app on the server, sorry for the red herring, thanks for the help
19:03 < geNAZt> hi
19:05 < geNAZt> is here someone who tried to "block" in an nodejs thread ?
19:05 < larryapplegate> Still looking for help with node-formidable or express with multi-part form data
19:05 < larryapplegate> i am able to run either, and feed it images from the browser
19:06 < larryapplegate> but I want to find out exactly what the browser is sending, so I can duplicate it in my IOS client
19:07 < geNAZt> well you have the socket from the http server ?
19:08 < geNAZt> and every request that comes in gets trough it
19:08 < geNAZt> so you can catch the whole data send in one request
19:08 < larryapplegate> i am new to node and http, so don't know how to do that
19:10 < geNAZt> http://borntoprogram.blogspot.de/2011/07/reaktiv-im-web-mit-nodejsexpressjssocke.html
19:11 < geNAZt> something like that should work
19:12 < larryapplegate> my German isn't good enough, though I did take a couple of courses long ago
19:19 < geNAZt> nobody got any idea how i could wait for an event
19:19 < analphabet> Wait for an event?
19:19 < analphabet> like block until a certain event is fired?
19:20 < geNAZt> nah
19:20 < geNAZt> i have 2 node instances
19:20 < geNAZt> and i have a messagesystem between them
19:20 < geNAZt> the one is a storage
19:20 < geNAZt> the other a websocket server, and i want the websocket server to wait for data from the storage
19:21 < geNAZt> but not to block the complete thread / process
19:21 < analphabet> Shouldn't the message system allow this?
19:21 < geNAZt> it works like so:
19:22 < geNAZt> websocket -> getSession -> storage -> search for session -> return session -> websocket
19:22 < geNAZt> but the websocket should wait, till the answer event from the storage has arrived
19:23 < analphabet> geNAZt: How do you do ipc?
19:23 < geNAZt> via std 
19:24 < analphabet> so your websocket node.js listens on stdin, right?
19:24 < geNAZt> y
19:25 < analphabet> Why not try process.stdin.on('data', function(buf) { console.log(buf) })
19:26 < geNAZt> i have
19:26 < geNAZt> the problem is:
19:26 < janmower> does anyone here package nodejs as rpm?
19:27 < geNAZt> i stdout from the websocket process to the messagesystem, it routes it to the storage stdin, it searches, returns to stdout into messagesystem, and the messagesystem to the stdin to websocket
19:27 < geNAZt> but the function is run out
19:27 < geNAZt> without returnvalue
19:28 < analphabet> geNAZt: ok, i think i got it...
19:28 < geNAZt> http://pastebin.com/rpHnKHHJ
19:28 < geNAZt> that is what i have
19:28 < geNAZt> i will execute a function in an other spawn
19:28 < geNAZt> and the return value for that should be that in the other thread
19:28 < analphabet> geNAZt: I was right..
19:29 < analphabet> geNAZt: no, no, no, no... you never sleep.usleep( 10 );
19:29 < geNAZt> y thats the problem
19:29 < holzp> I had to give up on socket.io for a project, it was juet getting too complex
19:29 < holzp> sockets kept dropping/going missing/stalling
19:29 < analphabet> geNAZt: didn't you hear ryan, say it never sleeps
19:29 < geNAZt> i know
19:29 < geNAZt> i dont want to sleep
19:29 < analphabet> :)
19:30 < geNAZt> i want it to wait for a change on an variable
19:30 < geNAZt> like an watcher, that emits, if the variable changes
19:30 < geNAZt> but that doenst break the scope
19:30 < analphabet> geNAZt: you have to make your rpc function async
19:30 < geNAZt> i cant
19:31 < geNAZt> the functions that need the data must be synced with this data
19:31 < analphabet> so, it can be called like rpc(bla, bla, function(result) { /* deal with the result */})
19:31 < geNAZt> y but how should i do something like
19:31 < geNAZt> a + b = c
19:31 < geNAZt> where a and b come from storage
19:32 < geNAZt> there will ever be a difference for the value a and b
19:32 < analphabet> geNAZt: you nest it.
19:32 < analphabet> rpc(bla, function(a) { rpc(blu, function(b) { /* deal with the results */}) })
19:32 < geNAZt> but for that i have to ask the storage for a, wait for it, ask for b, wait for it, calculate
19:33 < analphabet> or, use the "async" module's async.parallel([fetchA, fetchB, callback])
19:34 < geNAZt> ok
19:34 < geNAZt> then i have to rewrite my websocket -_- :D
19:34 < geNAZt> to make it full async :D
19:34 < geNAZt> thanks
19:34 < analphabet> yea, only async will make thing non-blocking :)
19:34 < analphabet> you're welcome
19:34 < Killswitch> MARCO
19:34 < geNAZt> y but sometimes i want to "block" :D
19:35 < analphabet> geNAZt: why?
19:35 < geNAZt> to wait for some events
19:35 < geNAZt> and not to have a callback for anything
19:35 < analphabet> geNAZt: to have it easier you mean
19:35 < analphabet> :)
19:35 < geNAZt> y :D
19:36 < geNAZt> im lazy 
19:36 < geNAZt> :O
19:36 < analphabet> geNAZt: async module: https://github.com/caolan/async
19:36 < geNAZt> thx
19:36 < analphabet> geNAZt: there's some addon that allows you to do this
19:36 < analphabet> https://github.com/laverdet/node-fibers
19:37 < analphabet> interesting, but I never used it in production...
19:37 < analphabet> If only ecmascript had python like generators, then we could implement coroutines very easily
19:37 < geNAZt> that seems to do what i want
19:38 < analphabet> geNAZt: :)
19:38 < analphabet> geNAZt: after looking at some more complex examples, I gave up on it... :)
19:39 < geNAZt> y but it does that what i wanted
19:39 < geNAZt> it stores a function
19:39 < geNAZt> and u dont have to block the process to wait for something
19:40 < analphabet> geNAZt: yeah, but you have to compile it, I think
19:40 < geNAZt> y
19:40 < geNAZt> first i will try to make all things async
19:40 < analphabet> but if it suits you, go ahead.
19:40 < geNAZt> its the best way i think
19:40 < geNAZt> nodejs the event catapult :D
19:41 < analphabet> >:)
19:41 < analphabet> Can someone tell me, why the authors (isaacs, more or less et al, i think) of npm-www chose to use chouchDB?
19:42 < analphabet> I have to make a similar decision, and it would be cool to hear the pros and cons you've been considering...
19:43 < geNAZt> http://pastebin.com/QULus4g0
19:43 < geNAZt> so
19:43 < geNAZt> that should do better :D
19:44 < analphabet> geNAZt: yea, but I'd store the cb somewhere and simply call it in the listener of stdin, when the data is received on stdin, but
19:45 < geNAZt> hmm maybe
19:46 < larryapplegate> analphabet: i think it is probably the replication capability for scaling
19:47 < analphabet> larryapplegate: I've been thinkin about whether replication is actually useful for scaling..
19:48 < larryapplegate> for mobile devices apps are keeping a local copy of the database for fast access - when the db can be limited to what is need for each user
19:48 < larryapplegate> then the problem becomes resolving update conflicts when the db is replicated
19:48 < larryapplegate> at least couch has a mechanism for that
19:50 < analphabet> yea, but you don't need that for npm-ww, I'd think, do you?
19:51 < larryapplegate> i am new to node, trying to figure  it all out
19:51 < analphabet> there are no mobile app, and those wouldn't want to store the whole npm registry on their disc
19:52 < larryapplegate> for our iPad app, we first tried ruby, gave up and then went to couch. Then when parse.com appeared, it looked like a way to have someone else take care of the server side, which we were not experts in.
19:52 < Leo_> hello, can anyone recommend me a good saas provider with node support?
19:53 < larryapplegate> but now we are disappointed in parse for both difficulty of doing complex things and response times.
19:55 < analphabet> larryapplegate: :)
19:55 < larryapplegate> i wish i had found node earlier
19:56 < analphabet> larryapplegate: I'm torn between mongo and couch, actually
19:56 < larryapplegate> parse uses mongo, and i hated parse's object size limitation of about 100k
19:56 < larryapplegate> which i don't know if it was because of mongo or not
19:57 < analphabet> larryapplegate: mh.
19:58 < larryapplegate> or it may have been so they didn't block the threads for very long
19:58 < larryapplegate> our couch implementation was entirely async
19:59 < larryapplegate> but we were missing all the good things that node, npm, and express bring
20:01 < larryapplegate> i'm still looking for help with the node server for our iPad app
20:02 < tnorris> so if I understand readable-stream correctly, `readable._read = fn` is more or less the current equivalent of listening for the 'data' event?
20:07 < superjoe> tnorris, you're thinking about it backwards
20:08 < superjoe> _read is for if you are *implementing* a readable stream
20:08 < superjoe> read() immediately returns the buffer if you are using the read stream
20:08 < superjoe> or null if you need to wait for an event
20:11 < tnorris> superjoe: thanks. just spent the last 2 weeks really understanding the current Stream implementation, and today just realized the stream2 branch was being developed.
20:13 < superjoe> tnorris, understanding the current stream implementation is still valuable
20:13 < superjoe> tnorris, I feel like it helps you understand the new one
20:21 < tnorris> superjoe: definitely. just taking me a bit to wrap my head around the new architecture. lack of sleep and caffeine isn't helping much either.
20:22 < superjoe> tnorris, don't worry, it's still going to be a while before it comes out in stable
20:23 < tnorris> superjoe: cool. I was just amazed the first time I realized how many other parts of node rely on streams. now just want to stay on top of that.
20:24 < EhevuTov> tnorris, I just started working with streams as well.
20:24 < superjoe> streams are a pretty killer feature in node
20:25 < superjoe> and the new Transform class will make them super easy to write correctly
20:25 < EhevuTov> my current problem, is that I don't know how to get socket.io to emit data from a stream. I'm having what seems to be a scope issue
20:26 < tnorris> superjoe: seriously. awesome abstraction when working with multiple io types (stdio, tcp, etc.)
20:27 < EhevuTov> I have this uncomfortably deep nested event loop where socket.io.on('connection') creates a read stream from event-stream.pipeline() and on pipeline.on('data') i want it to emit socket.emit('data'). I can only get socket.io to broadcast the data since it's global,instead of the single client socket
20:27 < nathan7> Closures \o/
20:27 < EhevuTov> anyone know of example code to show me how to do this?
20:27 < EhevuTov> nathan7, is that my issue?
20:28 < nathan7> EhevuTov: You can use a closure
20:28 < nathan7> EhevuTov: and keep your socket that way
20:28 < EhevuTov> I thought so, but I don't know closures well enough to apply it to my situation 0_o
20:30 < EhevuTov> nathan7, do you have example code where you're doing something similar?
20:30 < jmoyers> paste your code EhevuTov 
20:30 < jmoyers> gist
20:30 < jmoyers> or whatever
20:30 < nathan7> EhevuTov: Define your handler in your other handler
20:30 < jmoyers> can help, but don't understand your structures.
20:30 < EhevuTov> but it's so ugly :-) I will though
20:30 < nathan7> EhevuTov: Talk is cheap - show us the code C=
20:30 < jmoyers> well, thats kind of the point, right ;-)?
20:31 < s5fs> EhevuTov: broken code usually is ;-)
20:32 < EhevuTov> nathan7, jmoyers http://pastie.org/4916714
20:32 < EhevuTov> it starts around like 93
20:32 < EhevuTov> actually, I'm going to paste a gist, in case you want to edit it, etc.
20:33 < nathan7> Excellent
20:33 < nathan7> EhevuTov: okay
20:33 < EhevuTov> https://gist.github.com/3842198
20:34 < nathan7> I'm curious why ZeroMQ
20:34 < EhevuTov> I'm still learning scope of callbacks, closures, etc. I'm hoping once I learn how to fix this problem, I'll now more about it
20:34 < nathan7> and not Faye or something
20:34 < jmoyers> EhevuTov so your problem is you want to send to a single client?
20:35 < jmoyers> EhevuTov because if thats the case, there are two ways
20:35 < jmoyers> currying, and funciton.bind
20:35 < EhevuTov> jmoyers, correct. I'm currently broadcasting because it's got global scope and my `socket` isn't in the scope, so it's undefined in my CDR function and can't do an .emit()
20:36 < nathan7> jmoyers: function.bind is currying
20:36 < nathan7> jmoyers: with the annoying extra of fucking with your this
20:36 < jmoyers> currying, you can have sendCDR take a socket, then return a function which will send a message on that particular socket
20:36 < EhevuTov> nathan7, the zeroMQ was old stuff I from an older program I forked this from
20:36 < jmoyers> no, bind is FOR fucking with this
20:36 < jmoyers> you can implement currying with bind
20:36 < jmoyers> but something like...
20:36 < nathan7> .bind(null,blah,blah)
20:37 < EhevuTov> first time I heard of currying
20:38 < nathan7> EhevuTov: currying is simple and very powerful
20:38 < nathan7> Say I have function add(a,b){ return a+b; }
20:38 < thl0> I used https://github.com/substack/node-ap for currying - worked great for me
20:38 < nathan7> I can do this: var addTwo=add.bind(null,2);
20:38 < jmoyers> EhevuTov https://gist.github.com/3842232
20:38 < Benvie> partial is more useful for JS though
20:38 < jmoyers> you don't need special shit to do currying or partials
20:39 < nathan7> >> function add(a,b){ return a+b; }; var addTwo=add.bind(null,2); addTwo(10);
20:39 < purr> nathan7: (number) 12
20:39 < jmoyers> bind or returning functions is plenty good enough
20:40 < nathan7> okay, ap is cool
20:41 < EhevuTov> jmoyers, I tried that before and am getting a different error (didn't know how to interpret it though): /Users/james/projects/tekno/netQwikFilter/node_modules/socket.io/lib/parser.js:75
20:41 < EhevuTov>       data = JSON.stringify(ev);
20:42 < jmoyers> uh
20:42 < jmoyers> what is in your data object?
20:42 < jmoyers> when you dump it?
20:42 < jmoyers> that sounds to me like your event stream is not emitting something proper
20:43 < EhevuTov> hrm, yeah, let me debug a couple steps real quick
20:44 < EhevuTov> jmoyers, socket type is still 'undefined'. Let me double check your diffs
20:47 < thl0> nathan7: this seems simpler - function addTwo (a) { return function () { add(2, a) };  }
20:47 < thl0> nathan7: no bind needed
20:47 < EhevuTov> you can't see diffs of gists?
20:47 < nathan7> thl0: I think .bind(null,2); is a bit shorter
20:47 < nathan7> thl0: and a bit clearer
20:48 < EhevuTov> jmoyers, yeah, I'm pretty sure I made only the two major changes you made. Still coming through as 'undefined'
20:48 < jmoyers> simplify
20:48 < jmoyers> since that should work
20:48 < jmoyers> where is socket undefined?
20:48 < jmoyers> inside sendCDR or somewhere else?
20:49 < thl0> nathan7: not if you try to explain currying
20:49 < jmoyers> well, to be fair
20:49 < thl0> nathan7: in general though I agree
20:49 < jmoyers> usually when you go start to read
20:49 < EhevuTov> jmoyers, oh, hold on. You're passing the function. I didn't make that change?let's see...
20:49 < jmoyers> you see currying, partial application etc -- you learn the function return stuff, then you learn apply and call and bind etc
20:50 < jmoyers> then you pick up a mind melting substack library and go a bit further, i guess
20:50 < jmoyers> i've never gone that route though ;-)
20:50 < EhevuTov> what is that technique in JS called, where you return a func?
20:50 < EhevuTov> maybe there isn't one
20:51 < gkatsev> first-class functions?
20:51 < gkatsev> there is no name to it.
20:51 < nathan7> thl0: err, wait
20:51 < gkatsev> maybe closure creation would be most suited? 
20:51 < nathan7> thl0: why are you returning a function?
20:51 < jmoyers> no, that specific technique I'm using
20:51 < jmoyers> is currying
20:51 < jmoyers> returning a function has no name, functions are first class ;-)
20:51 < jmoyers> nathan7 it has the exact same effect
20:51 < thl0> nathan7: just try it
20:52 < nathan7> >> function addTwo (a) { return function () { add(2, a) };  }; addTwo(10);
20:52 < purr> nathan7: function () { add(2, a) }
20:52 < thl0> it returns a function that when invoked with an arg adds two to it
20:52 < nathan7> I get a function back.
20:52 < nathan7> thl0: Yes, that's silly
20:52 < thl0> addTwo(10)()
20:52 < nathan7> thl0: I expect addTwo to be a function that returns a number
20:52 < EhevuTov> oh snap! o/\o to jmoyers 
20:52 < gkatsev> -g ben alman partial application
20:52 < purr> gkatsev: Ben Alman » Partial Application in JavaScript <http://benalman.com/news/2012/09/partial-application-in-javascript/>
20:52 < EhevuTov> thank you got it working
20:52 < jmoyers> excellent
20:53 < thl0> sorry maybe not exact - didn't have time to actually test it, but something along those lines
20:53 < jmoyers> now go look up partial function application and currying, then bind, apply, call ;-)!
20:53 < gkatsev> ^^ good article about currying and partial application
20:53 < nathan7> >> function add(a,b){ return a+b; }; function adder(a){ return function(b){ return add(a,b); }; }; var addTwo=adder(2); addTwo(10);
20:53 < purr> nathan7: (number) 12
20:53 < nathan7> that's equivalent to
20:53 < gkatsev> currying itself is kind of useless in js, but partial application isn't
20:53 < gkatsev> (they aren't the same thing, btw)
20:53 < nathan7> >> function add(a,b); var addTwo=adder.bind(null,2); addTwo(10);
20:53 < purr> nathan7: SyntaxError: Unexpected token ;
20:53 < nathan7> err
20:53 < jmoyers> it… isn't useless at all
20:53 < EhevuTov> jmoyers, bind apply and call being seperate functions?
20:53 < nathan7> >> function add(a,b){ return a+b; }; var addTwo=adder.bind(null,2); addTwo(10);
20:53 < purr> nathan7: ReferenceError: adder is not defined
20:54 < jmoyers> yes, they are function prototype methods
20:54 < nathan7> ..well, you get what I mean
20:54 < EhevuTov> nathan7, is that for me?
20:54 < EhevuTov> jmoyers, thank you so much. I don't fully understand why we had to do that, but I'll study this. thanks
20:55 < jmoyers> yeah… the first time you try and use a loop and have an async function call who's return value depends on the value of i… you'll get it, or die trying ;P
20:55 < nathan7> EhevuTov: not specifically
20:57 < chovy> is there a guide i should follow somewhere for publishing an npmjs package?
20:58  * jmoyers watches the Blue Angels
21:02 < chovy> nice
21:11 < panahi> anyone know about Riak in node?
21:12 < jmoyers> i know some.
21:18 < holzp> in express, is there a means to change the default hostname for responses? like res.redirect('/whatever') from using localhost if its on localhost? setting it universally so its overridden to a different prefix?
21:18 < therealkoopa> How would you recommend finding millions of items in a database (mongo in thise case) and looping over each one, doing some magic. Of course a loop is blocking by default. Would you use an async loop?
21:21 < context> is there anything like rails rumble for node
21:21 < context> ahh node knockout
21:22 < rborg> how are y'all detecting undefined locals in an express view?
21:23 < etcetera> hmm, thinking about sticking thumb shifters on this road bike drop bar.
21:23 < therealkoopa> rborg: You could do a typeof
21:27 < janmower> so if anyone's interested
21:27 < janmower> and anyone has a better solution
21:27 < janmower> to spawning a node server process as a different user, disconnecting, and keeping it's pid
21:28 < nathan7> janmower: you mean setuid?
21:28 < nathan7> janmower: http://nodejs.org/api/process.html#process_process_setuid_id
21:29 < janmower> i want to spawn /usr/local/bin/node as nobody
21:29 < janmower> not fire /usr/local/bin/node as root and then reset priv
21:30 < s5fs> janmower: i'm using authbind, not sure if that would work for you
21:30 < janmower> i'm running a few services i can't change source for
21:31 < nathan7> ah, LD_PRELOAD hackery
21:31 < janmower> not even.  some deep unix shell hackery
21:32 < janmower> runuser -s /bin/bash $USER -c ulimit -S -c 0 >/dev/null 2>&1 ; npm start &> /dev/null &
21:32 < janmower> so yea someone should work on that
21:32 < janmower> that was pretty weird to figure out
21:33 < janmower> and fairly common use case if you have a bunch of different priv services
21:33 < tnorris> anyone know of a good tool to check the security of a web facing node app? tools like skipfish seem lacking.
21:34 < nathan7> janmower: authbind is LD_PRELOAD hackery
21:34 < janmower> oh really?  i should look into that perhaps
21:36 < janmower> yea except i want to partition services and even though starting some things on ports below 1024 is helpful, it's only half the story
21:37 < Nami-Doc> Hello - this may sound like a dumb question, but a friend is encoutering a problem with my code i'm not encountering
21:38 < Nami-Doc> (with stylus) he gets "Error: Cannot find module 'debug'"
21:38 < gbhatnag> hi all -- looking for logging support in node/express where I can set various levels (i.e. debug, info, warning, etc.) - know of any modules I could use? Doesn't seem like express.logger() supports this and it's surprisingly hard to find via google...
21:38 < jmoyers> gbhatnag winston is one such
21:38 < jmoyers> there are plenty out there
21:39 < gbhatnag> cool thanks, jmoyers - winston seems to be best of breed right now?
21:39 < jmoyers> gbhatnag loggers are small, so there are lots of alternatives...
21:39 < jmoyers> npm search log
21:40 < gbhatnag> gotcha
21:40 < jmoyers> winston is perhaps the most well known, since the nodejitsu guys support it and evangelize.
21:42 < gbhatnag> awesome, thanks
21:43 < Nami-Doc> he's got the exact same files as me, so I don't get why node can't find the module.
21:44 < jmoyers> Nami-Doc stylus depends on debug
21:44 < jmoyers> he needs to run npm install
21:44 < Nami-Doc> he did so, didn't changed anything :(
21:45 < tjholowaychuk> rm -fr node_modules
21:45 < tjholowaychuk> npm cache clear
21:45 < tjholowaychuk> and try again
21:46 < Nami-Doc> I'll try that
21:49 < tnorris> I must be missing something obvious, but why when I `.listen(<port#>, '::')` does node respond on ipv4 and ipv6 (e.g. 127.0.0.1/::1)?
21:51 < Nami-Doc> tjholowaychuk: thanks guy !
22:06 < Leo_> anyone using appfog?
22:06 < niteria> ... why do people use nextTick to solve race conditions?
22:07 < niteria> and by solve I mean 'solve'
22:07 < jmoyers> uh, they don't or shouldn't
22:07 < jmoyers> but occasionally with the browser, for instance, you do need to let the stack unwind
22:08 < jmoyers> only in certain cases though, for instance after a paste event, reading an input
22:08 < jmoyers> you need a setTimeout(handler,0) to get the right value
22:09 < niteria> unwinding the stack is good, I'm not saying nextTick shouldn't be there, I just don't understand why people think it helps with race conditions
22:10 < jmoyers> you'll have to give an example.
22:10 < jmoyers> if people are using as an equivalent to delay, thats just plain wrong.
22:10 < niteria> I'm reading http://howtonode.org/understanding-process-next-tick
22:10 < niteria> last section for example
22:10 < niteria> 'When emitting events'
22:11 < jmoyers> thats a pretty wonky example
22:12 < jmoyers> you'll miss the first data event too
22:12 < niteria> yeah
22:12 < jmoyers> but thats true with streams, you need to be careful about when to attach listeners and when you call resume in general
22:12 < jmoyers> but thats kind of the point.
22:13 < jmoyers> niteria look at the comments
22:13 < jmoyers> people are crapping on that article, with good reason
22:13 < niteria> and 'Keeping callbacks truly async'
22:14 < jmoyers> well, there is a use case
22:14 < jmoyers> where if a function could result in either synch or asynch
22:14 < jmoyers> you might want to attach the synch cb return to nextTick so behavior is well understood
22:15 < niteria> it looks like it assumes the programmer shouldn't care about evaluation order
22:15 < niteria> I think that example code is sloppy
22:16 < niteria> var client = net.connect(8124, function() { ...
22:17 < niteria> this could be easily solved by first creating the client and then connecting
22:17 < jmoyers> yes, but
22:18 < jmoyers> its pretty common in flow control to normalize optionally asynch things into nextTick
22:18 < jmoyers> check out use on async.nextTick in caolan/async
22:18 < jmoyers> but generally, thats a pretty damn nuanced use.
22:18 < jmoyers> doesn't come up all that often in my experienced.
22:18 < jmoyers> *
22:20 < Almindor> when using passport/express/mongoose store, who sets the "user" login property to the request?
22:21 < janmower> hey i have another question for the node luminaries:  why spawn npm from #!/usr/local/bin/node ?  why not #!/usr/bin/env node ?
22:21 < Almindor> I'm getting a successful login but when req.isAuthenticated() is called, there's not user property set and I can't figure out how it's supposed to be working
22:21 < holzp> passport sets it but you create it
22:21 < holzp> ive been messing with just that all day!
22:22 < jmoyers> janmower no reason
22:22 < janmower> because my dependency walker for my os
22:22 < jmoyers> env is better.
22:22 < janmower> really hates that
22:22 < Almindor> holzp: when does it set it?
22:22 < janmower> when i walk dependencies for all this node stuff, it really blows up on that
22:22 < janmower> all the pythonistas use #!/usr/bin/env python
22:22 < holzp> I bleieve in the callback after findorcreate
22:22 < jmoyers> god damn i hate that term
22:23 < janmower> could node use the same stuff?
22:23 < jmoyers> it makes me think of used store clothes employees
22:23 < Almindor> holzp: I'd like to walk it over in node-inspector, because I'm not getting it set even tho my login is successful and serialize is called, subsequently my requests are without the property
22:23 < jmoyers> fashionistas!
22:23 < jmoyers> yes, of course
22:23 < holzp> uh, are you using express 3? or node > 0.9
22:23 < Almindor> I get the session in the DB and all that
22:23 < Almindor> no
22:23 < Almindor> node 0.8.6, express is frozen at 2
22:23 < janmower> jmoyers: yea whatever the spamastacks if you prefer
22:23 < holzp> im using express 3 unsure if there are many differnces 
22:24 < holzp> to debug i just concole logged every step
22:24 < holzp> console
22:24 < holzp> it was a bear to figureout, at least everyauth debugs nice
22:24 < Almindor> the thing is I can't figure out when it's supposed to be set since it's not there in isAuthenticated and that's pretty much first thing after routing
22:24 < Almindor> I guess express/passport try to do it before via some middleware call
22:26 < holzp> well passport has two pieces of express middleware
22:26 < holzp> are you using them?
22:26 < holzp> passport.initialize() and passport.session()
22:26 < holzp> it wasnt obvious to me till i looked into it more
22:26 < Almindor> yes
22:26 < Almindor> thing is this worked in the past
22:27 < Almindor> we did some major changes and now login (the post part) still passes, but checking fails
22:27 < Almindor> express session is called before passport too ( i found some problem with that )
22:29 < holzp> hm, so you  can get in once, but then not again with the same cookie?
22:39 < RushPL> tnorris: well it is pretty complicated all in all, but the idea is simple. Write line by line some command to a perl script in JSON
22:39 < RushPL> and read line by line the results
22:41 < larryapplegate>  Still looking for help on the server side with multi-part forms from IOS
22:42 < tnorris> to anyone with a good understanding of server port and host binding:
22:42 < tnorris> when I do `.listen(8080, '::')`, the node server works for both ipv4 and 6. is that how node should work, or is it something with my machine?
22:43 < jmoyers> larryapplegate you mean you need help?
22:45 < larryapplegate> yes, on the server side
22:45 < jmoyers> larryapplegate https://github.com/felixge/node-formidable
22:45 < jmoyers> pretty simple api for multi-part.
22:45 < larryapplegate> i have been running it, works fine with the browser
22:46 < larryapplegate> but I want to know exactly what the browser is sending, so I can duplicate it on IOS
22:46 < jmoyers> so… use web inspector? or wireshark
22:47 < larryapplegate> i am new to server side, don't know how to run suc
22:47 < larryapplegate> such
22:48 < nrmL> wireshark is client side, and web inspector is client side too.
22:48 < jmoyers> run those on the client and capture packets
22:48 < jmoyers> or just look up NSMutableURLRequests
22:48 < jmoyers> which, you can setValue with a constant that deals with multi-part
22:48 < jmoyers> plenty of examples out there
22:49 < jmoyers> or http://allseeing-i.com/ASIHTTPRequest/
22:50 < mscdex> wireshark ftw
22:50 < nrmL> Is it costly to run many processes?
22:50 < nrmL> like child processes
22:50 < mscdex> nrmL: depends on if there's a sale
22:50 < mscdex> :-D
22:50 < nrmL> haha
22:50 < s5fs> i'm sniffing with wireshark right now!
22:50 < jmoyers> there is an overhead
22:51 < jmoyers> windows i think has a little bit more trouble with many processes than linux or macos
22:51 < mscdex> s5fs: be careful, you could get addicted
22:51 < s5fs> mscdex: i can quit anytime
22:51 < jmoyers> but nodes model is a process based model and as far as i know we've abandoned thread based isolates (?)
22:51 < nrmL> yea, I'm trying to figure our a solution to a problem and i keep going back to the processes idea. Treat each child process as an object w/ attributes etc
22:52 < nrmL> *out a
22:52 < jmoyers> well, people do clusters and service registry type things
22:52 < jmoyers> https://github.com/substack/fleet for instance
22:52 < jmoyers> nom nom
22:53 < larryapplegate> jmoyers: i was trying to stay with NSURL etc., but looking at ASIHTTPRequest looks very interesting
22:53 < jmoyers> yes, i've used it
22:53 < jmoyers> has a decent api
22:53 < nrmL> jmoyers: thats neat
22:53 < larryapplegate> ok, you've convinced me. certainly it is easier when both ends are at the same level
22:55 < larryapplegate> but first, i want to capture the buffers from the formidable browser client
23:01 < larryapplegate> jmoyers: looks like i should just go straight to their ASIFOrmDataRequest subclass
23:01 < jmoyers> yes
23:01 < larryapplegate> Thanks a lot!
23:02 < nrmL> can child processes respond to parent event emits? Would i have to do it on child_process.stdin?
23:02 < CoverSlide> if you do a fork you can do child_process.send
23:03 < nrmL> and it respond back?
23:03 < nrmL> *can it
23:03 < CoverSlide> yeah, from the child process, do process.send
23:03 < CoverSlide> prcoess.on('message'
23:03 < CoverSlide> to listen for the message
23:03 < nrmL> kk thank you!
23:11 < nrmL> jmoyers: would you consider 39 processes too many, haha
23:11 < CoverSlide> 39 processes and a bash ai'nt one
23:11 < jmoyers> too many for what
23:12 < jmoyers> but unless you've got an issue, the answer is no
23:12 < nrmL> ok, each one would be grabbing gps info about a bus and based on distances to other objects doing stuff
23:13 < jmoyers> why are you separating these into different processes?
23:13 < nrmL> uh there are different routes each one goes on, the stops are all different. The speed of each one will be different from the other too
23:13 < nathan7> node can do a zillion of those at the same time
23:14 < jmoyers> well
23:14 < nrmL> yea, thats what I'm worried about if it will slow down or become a issue with too many processes
23:14 < nathan7> I'm pretty certain that's an IO-centric task
23:14 < jmoyers> no real reason to use a process per object
23:14 < Slade-> is 'connect' related to 'express' in some way?
23:14 < nathan7> Slade-: Yes.
23:14 < CoverSlide> each process is expensive, and at some point it doesn't really improve performance
23:14 < nathan7> Slade-: It's the middleware layer Express uses.
23:14 < jmoyers> connect came first, express uses connects middleware and static file module
23:14 < Slade-> oh, so express adds more to it? 
23:14 < CoverSlide> connect is like rack
23:14 < tjholowaychuk> jmoyers express came first
23:14 < nrmL> Yea, i just want to try to treat each bus as an object with location, speed and all that
23:14 < CoverSlide> express is like sinatra
23:15 < nathan7> You silly rubyheads
23:15 < jmoyers> tjholowaychuk well you would know :-)!
23:15 < nrmL> and it would be responsible to update its location
23:15 < tjholowaychuk> connect was derived from early express stuff
23:15 < Slade-> connect looks pretty awesome.. need to figure out what express adds now :)
23:15 < nrmL> jmoyers: mind if i ask how you would approach it? Rather then doing processes
23:15 < nathan7> express is a web framework
23:16 < nathan7> If you want to build a webapp, use express
23:16 < nathan7> If you want to build a web framework, use connect
23:16 < CoverSlide> express adds routing, templating, and some nice sugar on top of the basic request / response
23:16 < jmoyers> nrmL you haven't described enough of your use case for me to comment
23:16 < Slade-> ah
23:16 < nrmL> jmoyers: would you want me too? haha
23:16 < CoverSlide> one thing i like about express is it parses my proxy headers so I don't have to worry about it
23:16 < jmoyers> but i'd only split it into different processes if it was a long running computation problem, or the process could provide a reusable service
23:16 < jjjohnny> what do you do to solve moving paths?
23:17 < nrmL> jmoyers: they are more like short bursts of activity every 3-5 min
23:17 < jjjohnny> when I run my app as normal, the path is X, when I test my app from another directory, the path is Y
23:17 < jmoyers> 'activity' is not well defined enough
23:17 < Slade-> and next()  this pretty much ends an 'event chain' ?
23:17 < CoverSlide> there's not much benefit to running more processes than cpus
23:17 < jmoyers> if you're spending most of your time waiting on io
23:18 < jmoyers> no need to split it into a bunch of processes imo
23:18 < CoverSlide> Slade-: next() continues the event chain to jump to the next middleware
23:18 < nathan7> Slade-: continues the event chain
23:18 < nathan7> damnit CoverSlide 
23:18 < jjjohnny> why the hell can't node know relative paths for each file
23:18 < Slade-> Is there something that kills the event chain?
23:19 < jmoyers> … ?
23:19 < nrmL> jmoyers: yea, its mostly getting data with phantomJS and then writing it to a database and then if a bus is so far from a spot it sends a message through twilo
23:19 < nrmL> *twilio
23:19 < jmoyers> is there a reason you need to depend on phantomjs for that?
23:19 < jmoyers> even if you're scraping, doing a request and parsing it as lightly as possible is better.
23:20 < CoverSlide> holy cow
23:20 < nrmL> the gps data is from the bus comps site, just scraping it off. I found out they expose the GPS info of all the buses through a page www.site.com/busID
23:20 < jmoyers> so why not request the page directly?
23:20 < jmoyers> either with http client or mikeals request module
23:20 < CoverSlide> actually, even better, use https://github.com/MatthewMueller/nom
23:20 < nrmL> its filled with other crap, like stop info w/ gps data
23:21 < nrmL> need to filter through it a little
23:21 < jmoyers> right but
23:21 < jmoyers> using phantomjs for that is overkill imo
23:21 < CoverSlide> it's great for easy DOM traversal, and doesn't use jsdom, which is a pig
23:21 < jmoyers> yeah but like, a whole instance of webkit for scraping?
23:22 < nrmL> yea, didn't know about nom
23:22 < CoverSlide> i was talking about nom
23:22 < mscdex> there's also cheerio
23:22 < CoverSlide> it's awesome, i use it for all my scraping needs
23:22 < CoverSlide> nom is cheerio + request
23:22 < mscdex> :S
23:22 < jmoyers> does the selector overhead and all that
23:22 < mscdex> probably a simple module
23:23 < CoverSlide> actually, nevermind, it uses superagent
23:23 < jmoyers> add a bunch of weight?
23:23 < Slade-> so I'm trying to understand now the event chains work.. things like favicon seem to end the chain?   does next() advance, and simply returning cause the chain to end?
23:23 < CoverSlide> Slade-: response.end() ends the request
23:23 < CoverSlide> Slade-: the chain ends when a function never calls next()
23:23 < mscdex> Slade-: if you don't call next() then the chain ends
23:23 < mscdex> :-)
23:24 < Slade-> awesome
23:24 < nrmL> http://www.livelycode.com/spawnjs/ might be good instead of creating a bunch of processes for each bus
23:24 < CoverSlide> so technically, you can do other stuff after the response is ended if you want to
23:24 < jmoyers> i… still don't know why you're worried about it being different processes
23:25 < jmoyers> you can kick off 10 requests for site/busid and most of your time is going to be spent waiting on the data
23:25 < jmoyers> or if you're worried about it, serialize the request + scrap + text message then move on to the next bus
23:26 < nrmL> its more about I don't know when I would want to kick off that request
23:34 < zezikaro> can anyone recommend any bdd/mocking frameworks that can test my nodejs ?
23:35 < zezikaro> I need to mock an entire webservice as it's not created yet
23:39 < jmoyers> zezikaro https://github.com/flatiron/nock
23:40 < jmoyers> personally i use mocha for test runner/tests
23:43 < jtomasrl> is there a good api sample code over the inet?
23:46 < chovy> i made an npm module, but it can't be found when I require('my-mod')
23:47 < chovy> i am not sure what to put in "main"
23:47 < chovy> in package.json
23:47 < chovy> my file is in ./lib/my-module.js
23:58 < addisonj> okay, someone help me think, using request to pipe to a write stream, downloading like 15,000 images, every once in a while it hangs, I am listening for "end" on the respone, and error on both response stream and write stream, yet I am still hanging somewhere
23:59 < superjoe> addisonj, maybe try the "close" event instead of "end"
--- Log closed Sat Oct 06 00:00:06 2012
