--- Log opened Sun Sep 16 00:00:24 2012
00:02 < dobry_den> silly question, but i've consumed too much caffeine to not care: which style variable name do yall use when you have an acronym: gunOgg/gunMp3 vs gunOGG/gunMP3?
00:04 < insin> an inconsistent mishmash of either/or on an acronym-by-acronym basis
00:05 < dobry_den> what about that particular example?
00:09 < bradgignac> gunOGG
00:20 < euoia_> is jade worth using because it I am slightly peeved with it right now
00:20 < AviMarcus> Anyone here use TradeKing? I think I'm gonna open up an account with them.
00:21 < dobry_den> euoia_: i love it almost as much as haml. what's peeving you?
00:21 < euoia_> just that I know how to write html and this is another thing to learn that seems fairly pointless
00:21 < AviMarcus> angularjs!
00:21 < euoia_> and I'm getting errors with things that ought to be quite simple
00:22 < AviMarcus> althought angular isn't exactly for templating
00:22 < euoia_> I want to display #error= error but if error is undefined I get an error
00:22 < euoia_> do I have to wrap it in a condition?
00:22 < dobry_den> euoia_: i had a similar opinion when i had to learn Haml, but within 10 minutes i was obsessed enough to rewrite all of my templates with Haml
00:22 < dobry_den> Jade has similar magic. except i like its minimalism even more
00:23 < dobry_den> i'd give it a fair shot. i can't imagine writing html again. 
00:23 < euoia_> so how do I do this thing? only display a div if the variable I want to display inside the div is not undefined?
00:25 < euoia_> or do I have to make sure it's not undefined?
00:26 < dobry_den> euoia_: could do 'unless someVar !== undefined'
00:26 < euoia_> ok I found it : if locals.username
00:26 < euoia_> not too hard - wasn't in the API documentation
00:27 < dobry_den> euoia_: sure, it's in jade's https://github.com/visionmedia/jade#a10
00:28 < euoia_> so it does
00:28 < euoia_> just not with the undefined example
00:28 < dobry_den> and just to mention it, if you happen to be using coffeescript, look at gradus/coffeecup on github
00:29 < dobry_den> euoia_: yeah, i wouldn't do the explicit undefined check. i'd just do  "if someVar" and then indent the div under it
00:33 < euoia_> dobry_den: cheers
01:39 < euoia_> with express, how I simply render something that is in the public directory? I don't want to redirect because I don't want the URL to change
01:40 <@Nexxy> euoia_, res.render()
01:40 <@Nexxy> euoia_, or do you mean a static file?
01:40 < euoia_> in this case it is a static file
01:41 < euoia_> obviously just for dev purposes
01:41 <@Nexxy> euoia_, http://www.senchalabs.org/connect/middleware-static.html
01:41 < euoia_> thank, will have a read
01:41 <@Nexxy> :)
01:42 <@Nexxy> or something like
01:42 < euoia_> hmm it is not quite the same thing - I was to serve it at the end of the request
01:42 <@Nexxy> app.use(express.static( // your directory here ));
01:43 < plato> euoia_: use fs module to read it?
01:43 < euoia_> hmm, if I'm doing that I might as well just symlink it to my views
01:43 < plato> do you need to do stuff in your routing function besides serve the file?
01:43 < plato> if not, why doesn't the static work?
02:12 < ctult> What are some good tokenizers/parsers in JS?
02:49 < cody--> hey
02:49 < cody--> hey
03:00 < Tobsn> whats the shortest way to check if a var is in an array? key in array basically
03:05 < cainus> Tobsn:  var found = (arr.indexOf(theVar) != -1);
03:05 < Tobsn> key not value
03:05 < Tobsn> x = ['foo':1,'bar':2]; check if foo and test are in x
03:05 < Tobsn> or rather
03:06 < cainus> if (x.foo){ ...
03:06 < Tobsn> valid = ['foo','test'] check if
03:06 < Tobsn> yeah but i need all of them... dont want to do x.foo || x.test || x.blah
03:06 < cainus> for(...){ ..}  
03:06 < cainus> ;)
03:10 < Tobsn> :/
03:11 < Tobsn> ah
03:11 < Tobsn> if( key in array )
03:11 < cainus> underscore makes it simpler...   _intersection(_.keys(arr), ['foo', 'test', 'blah']);
03:11 < Tobsn> thats all it is
03:12 < Tobsn> if( key in ['foo', 'test'] )
03:12 < cainus> thought your problem was checking multiple keys?
03:12 < Tobsn> will return true if key is in the array keys
03:12 < Tobsn> well one at a time
03:12 < Tobsn> what would intersection do?
03:12 < Tobsn> cut out non existing ones?
03:12 < cainus> if (arr[key]){ ... is all you need for that
03:13 < Tobsn> yeah... fuck its way too late
03:13 < cainus> should be _.intersection(_.keys(arr), ['foo', 'test', 'blah']).length > 0; I guess
03:14 < Tobsn> hmm
03:14 < cainus> intersection just gives common elements
03:14 < Tobsn> does underscore has a function to cut out non existing kys?
03:14 < Tobsn> only leaving foo, test, blah in arr
03:14 < cainus> non existing keys already don't exist ;)
03:15 < Tobsn> well i mean keys that dont exist in the array to check against
03:15 < cainus> ?  do you want to filter keys not matching a list of keys?
03:15 < Tobsn> that would be something
03:15 < yaymukund> _.pick(obj, arrOfKeys)
03:15 < Tobsn> *lookup
03:15 < yaymukund> it returns a duplicate though
03:16 < Tobsn> why would it return a duplicate?
03:16 < yaymukund> oh
03:16 < Tobsn> erm copy
03:17 < yaymukund> I don't know.
03:18 < yaymukund> if it modified the object, it would have to be called something other than `_.pick`
03:18 < Tobsn> hmm
03:20 < cainus> yeah pick() looks good
03:21 < yaymukund> what are you looking to do?
03:21 < Tobsn> just sorting incoming GET vars vs. allowed list to insert into db
03:21 < yaymukund> ah yes, I use _.pick for that too.
03:22 < Tobsn> k, thanks both of you :)
03:22 < cainus> probably not really what GET is for
03:22 < Tobsn> hmm?
03:22 < yaymukund> oh, yeah, don't use GET
03:22 < yaymukund> lol
03:22 < Tobsn> what you mean?
03:23 < cainus> GET is supposed to be read-only
03:23 < Tobsn> im not altering GET
03:23 < Tobsn> im pushing the query string through a custom url prototype, filtering it, reading out a sub array and then probably gonna use pick
03:23 < cainus> read-only = don't write stuff in a db :)
03:25 < cainus> otherwise you risk cache strangeness... just an fyi
03:25 < Tobsn> hu?
03:25 < Tobsn> what exactly do you mean?
03:26 < cainus> you're sending via the GET method?
03:27 < Tobsn> im not sending
03:28 < Tobsn> if( !!CONFIG.allowed_keys[key] ) { - var CONFIG = { allowed_keys: ['foo', 'bar'] } - and key would be 'bar' - its not true... wtf am i doing wrong here?
03:29 < Tobsn> nevermind
03:29 < Tobsn> im an idiot
03:30 < yaymukund> :p
03:30 < yaymukund> happens to the best of us :)
03:30 < Tobsn> im really stupid right now... this is bothering me
03:31 < Tobsn> okay now i got it all working
03:31 < yaymukund> yay
03:31 < Tobsn> looks retarded tough
03:31 < Tobsn> hehe
03:32 < Tobsn> let me ask you something - cause i havent worked with JS in a while
03:32 < Tobsn> var parsed = this.parse( url, true, false ),;
03:32 < Tobsn> 	if( !!parsed.query && Object.keys( parsed.query ).length > 0 ) {
03:32 < Tobsn> this. is the core url object
03:32 < Tobsn> does it make sense to check if parsed.query exists and then also if it has content?
03:33 < Tobsn> or is that a given if !! returns true?
03:34 < cainus> you can call node up at the command line and check easily
03:35 < Tobsn> yeah, parse() returns an empty object if nothing is given
03:40 < Tobsn> wow... so allowed_keys has ['foo','bar'] if i do allowed_keys.indexOf( key ) and key is 'test' its still passing through
03:41 < cainus> indexOf() is for arrays... you have an object
03:41 < Tobsn> params = Object.keys( query.d )
03:41 < Tobsn> params.forEach(function(key){
03:41 < Tobsn> its an array
03:41 < Tobsn> and allowed keys is allowed_keys: ['phone','email','country','state','city']
03:41 < cainus> if you want to see if the key exists just do if(obj[key]){ ...  Don't put it in an array
03:42 < Tobsn> and allowed keys is allowed_keys: ['phone','email','country','state','city']
03:43 < Tobsn> yeah indexOf returns correctly -1
03:43 < Tobsn> and it stil goes through as true?
03:43 < Tobsn> wtf
03:44 < Tobsn> if( CONFIG.allowed_keys.indexOf( key ) > -1 ) {
03:44 < Tobsn> that way it works
03:44 < Tobsn> since when is -1 true?
03:44 < cainus> non-zero is truthy
03:44 < Tobsn> isi t?
03:45 < Tobsn> wtf
03:45 < Tobsn> anyway... now it really works all haha
03:45 < Tobsn> fml.
03:45 < Tobsn> thanks cainus
03:53 < aj910martin> Hellos, This has to do intercepting http requests. Assume that a server running node.js is expecting 50 reqs/sec. Now my requirement is to do some pre-processing on these 50 http requests before the requestListener does it's work
03:55 < bradleymeck> use a proxy if you want the workflow to be sane
03:58 < Tobsn> ginx?
03:58 < Tobsn> nginx
03:58 < Tobsn> for example
04:01 < aj910martin> bradleymeck: this would be fine too https://github.com/nodejitsu/node-http-proxy. Right?
04:01 < gabrieluk> hey, i'm using nginx as a proxy for node already, what if i want to add php in the mix? i have installed everything but i got stuck in my vhost file...any ideas? http://pastebin.com/TssrJW2u
04:01 < bradleymeck> sure
04:02 < Tobsn> gabrieluk, #nginx ;)
04:02 < gabrieluk> i've been there, no one answer :(
04:03 < gabrieluk> i just don't get with the "location"
04:03 < Tobsn> its just a filter
04:03 < Tobsn> since its / you could leave it away
04:04 < gabrieluk> so you mean just get the code from the php and merge with location/ ?
04:05 < Tobsn> hu?
04:05 < Franz__> somebody can help-me to install a module in node.js?
04:05 < Tobsn> i dont really know what youre trying to do ;)
04:05 < gabrieluk> wait, i show you
04:05 < Tobsn> Franz__, npm install modulename
04:05 < Franz__> t0mbstone not have npm =/
04:05 < Franz__> the owner not made package in npm 
04:06 < Tobsn> just create a folder called node_modules
04:06 < Tobsn> and then a folder called modulename and put the files in it
04:06 < Franz__> so
04:07 < Franz__> i have the module in nodejs/folder
04:07 < gabrieluk> Tobsn, http://pastebin.com/4iaaNh5a
04:07 < Franz__> i run nodejs/folder/app.js and i receive a error what say me i dont have installed module
04:07 < Franz__> Tobsn then i put in nodejs/node_modules/folder 
04:08 < Tobsn> make a folder called node_modules in /folder/ next to your app
04:08 < Franz__> but with no success
04:08 < Franz__> i tried
04:09 < Franz__> but no success
04:38 < polotek> Franz__: are you still having problems?
04:41 < Tobsn> polotek, yeah help him
04:41 < Franz__> yes ;/
04:42 < polotek> your folder structure should look like this
04:42 < polotek> project/node_modules/module.js
04:42 < polotek> require('module')
04:43 < polotek> err
04:43 < polotek> project/node_modules/module_name/module.js
04:43 < polotek> sorry
04:43 < polotek> so node_modules contains a folder with the name you want to require()
04:43 < polotek> inside that folder is javascript
04:43 < Franz__> its right
04:43 < Franz__> i knwo
04:43 < Franz__> i know
04:44 < Franz__> its the same here
04:44 < polotek> you may need to change module.js to index.js
04:44 < Franz__> but i receive the error cannot find module...
04:44 < polotek> or add a package.json into the module_name folder
04:45 < benatkin> anyone have any luck running a node repl inside of emacs with something like SLIME?
04:48 < polotek> Franz__: can you do a "find <project_folder>" and show me the output?
04:59 < polotek> this folder structure makes no sense
05:00 < Tobsn> i keep trying to explain it to him
05:00 < Tobsn> ;)
05:00 < Franz__> i didn understand too
05:01 < Tobsn> THISISYOURMAINFOLDER/app.js - if you do require() it will look into ./node_modules
05:01 < Tobsn> THISISYOURMAINFOLDER/node_modules/
05:02 < polotek> no I mean the structure of the module he's trying to use
05:02 < Tobsn> if you do require('rpgjs') it will try to look into the folder THISISYOURMAINFOLDER/node_modules/rpgjs/
05:02 < Tobsn> because its not a module
05:02 < Tobsn> its just a bunch of scripts
05:02 < polotek> it looks like it has node support
05:02 < polotek> but it's all screwy
05:02 < Tobsn> yep
05:02 < polotek> the readme says you're supposed to move some stuff around
05:02 < polotek> but it's not clear how
05:02 < Franz__> i didnt understand how can function this module
05:02 < Franz__> its a #%@#%#@%
05:06 < liw1> anyone working on anything cool?
05:07 < gnarf> liw1: running sound @ a bar count?
05:09 < polotek> Franz__: Have you looked through the issues on github?
05:09 < polotek> other people must be confused by this
05:09 < polotek> if there's no open issue, I would open one and ask what the hell is going on.
05:09 < polotek> I've gotta restart. back in a bit
05:39 < liw1> test
05:50 < standoo> when i require a file, does it run the file contents?
05:58 < pyrotechnick> standoo: yes
06:00 < pyrotechnick> standoo: https://gist.github.com/3731199
06:01 < chrisdotcode> is it worth using nginx as a reverse proxy for node anymore?  are modules such as node-http-proxy and bouncy up to par as yet?
06:03 <@Nexxy>  chrisdotcode bouncy works for me
06:03 < chrisdotcode> Nexxy: is it up to par/mature enough to compete with Nginx?
06:04 <@Nexxy> I'm not sure what you're asking
06:05 < chrisdotcode> Nexxy: in days of old, it was recommended to run a Nginx reverse proxy in front of node, God forbid there be an bug in node, and you have you bug-ridden server exposed in the wild.
06:05 < niallo> chrisdotcode: think it basically comes down to whether you need fast ssl or websockets
06:05 < chrisdotcode> niallo: and if I need both?
06:06 < niallo> chrisdotcode: https://github.com/LearnBoost/socket.io/wiki/Nginx-and-Socket.io has some ideas
06:07 < niallo> i use node-http-proxy and it works great, but i don't need to handle a zillion requests fwiw.
06:08 < chrisdotcode> niallo: oh yeah. forgot about lack of HTTP 1.1 in nginx.  Okay, so it's okay to expose a node-based proxy in the wild, and I can fo-rgo ngin?
06:08 < chrisdotcode> *forgo
06:08 < niallo> chrisdotcode: i haven't had any problems using node-http-proxy w/o nginx. 
06:09 < chrisdotcode> niallo: alright, excellent.  that was all I needed.  thanks! :)
06:10 < niallo> np
06:24 < AAA_awright> chrisdotcode: Nginx is demonstratably faster at serving static files and caching static responses
06:25 < AAA_awright> Not a terrible amount, especially when compared to python or php, but it exists.
06:25 < chrisdotcode> AAA_awright: what about node-http-proxy with a cache?  still faster?  and is it worth the impedance mismatch to involve nginx?
06:25 < AAA_awright> I've never heard of the "bug in node" argument though
06:25 < chrisdotcode> AAA_awright: that was for like node 0.2, or something, iirc.
06:26 < AAA_awright> impedance mismatch?
06:26 < AAA_awright> Node is also event-oriented
06:26 < AAA_awright> er, Nginx
06:26 < AAA_awright> That's why it's used as opposed to theaded servers like Apache
06:26 < chrisdotcode> AAA_awright: I mean, switching from JavaScript to nginx config files, instead of working with node-http-proxy,I meant.
06:26 < AAA_awright> I don't see the problem. It's a seperate configuration no matter what.
06:26 < chrisdotcode> AAA_awright: using nginx means you're not head-to-toe JavaScript anymore.
06:27 < AAA_awright> And it's easier to run Nginx as root, too
06:27 < AAA_awright> Javascript runs C++, though, Nginx runs in a lighterfootprint if anything
06:27 < AAA_awright> *lighter footprint
06:27 < chrisdotcode> AAA_awright: so what's your opinion, nginx or some sort of node proxy?
06:29 < AAA_awright> There might be problems with websockets? I haven't ever run into it
06:29 < AAA_awright> Other than that, if you're already doing load balancing, Nginx is what I go with
06:30 < chrisdotcode> AAA_awright: yeah, nginx stable doesn't support HTTP 1.1 (And thus websocks)
06:30 < AAA_awright> I can do 6000 requests/second for static files and cached responses
06:31 < chrisdotcode> AAA_awright: and I"m not load balancing yet, but no websockets is a huge deal to me currently...
06:31 < chrisdotcode> AAA_awright: on nginx?
06:31 < AAA_awright> chrisdotcode: Well I use the bleeding edge sources on Gentoo, your mileage will vary
06:32 < chrisdotcode> AAA_awright: huh.  what about straight Debian?
06:33 < AAA_awright> I avoid those release-based distributions, Debian, especially Ubuntu (Well, for servers at least)
06:33 < AAA_awright> Though I find it funny other people go the other way around, Gentoo on the desktop, ubuntu on the server
06:34 < chrisdotcode> AAA_awright: yeah, I'm with you there.  I'd never run Ubu on a server.  Yikes.
06:35 < chrisdotcode> I'd even want a UNIX.  
06:35 < chrisdotcode> or Archlinux.  Arch for a server seems like a good choice, IMO
06:36 < AAA_awright> Hmm I might not be using the version of Nginx with websocket support, still, I've never run into the problem
06:37 < AAA_awright> I don't want to quite say that Nignx runs circles around Node.js, but the way it optimizes network traffic through the kernel eliminates most all the memcpy() operations and it's just mind-blowing how fast it is
06:37 < chrisdotcode> AAA_awright: that's because socket.io/socks.js/etc. abstract websockets down into XHR polling when it isn't available.
06:38 < chrisdotcode> assuming of course, that you were using those
06:39 < AAA_awright> I have to recall exactly what I've done, but anther problem with that is, you have to already have Node.js instances that talk to each other
06:39 < AAA_awright> It doesn't help you much if you and your friend get routed to different Nodejs instances
06:40 < AAA_awright> There might have been some work in that area but this was a while ago, like, Node 0.4
06:40 < chrisdotcode> but wouldn't that only be a problem if you're not using cookies?
06:40 < chrisdotcode> or some kind of session data store.
06:41 < AAA_awright> How would that help?
06:41 < AAA_awright> And no, I don't use cookies, not by default anyways
06:41 < AAA_awright> I've gone to great lengths to patch Drupal and such to not send that stupid session cookie every time someone loads the front page
06:41 < AAA_awright> Wordpress is even worse
06:42 < AAA_awright> Don't get me started on how awful they are
06:42 < AAA_awright> ... But yeah
06:42 < chrisdotcode> seperate domain for app to only send cookies to that domain?
06:47 < chovy> are there any tutorials out there on how to deploy node.js web app in production? 
06:47 < chovy> obviously running ./node app.js isn't going to work very well from shell + screen
06:48 < astropirate> owwww yea!!
06:48 < astropirate> net split!
06:49 < benatkin> can't help but thinking that convore and then grove.io should have been rewritten in node
06:49 < gildean> chovy: i've used forever to daemonize the process
06:49 < astropirate> Grove is shutting down October 13, 2012
06:55 < benatkin> astropirate: a bit of a short notice IMO
06:58 < chovy> what is Grove?
07:00 < Robdgreat> "baby don't hurt me, don't hurt me, no more"
07:01 < bid> Robdgreat: only a Decade of delay 
07:01 < Robdgreat> pretty sure that song is older than that
07:02 < bid> posiable...
07:02 < bid> Possible*
07:03 < Robdgreat> 93. almost 2 decades
07:05 < bid> time goes by very fast feels only like a decade
07:05 < Robdgreat> yeah
07:05 < astropirate> is node.js just a buzz word to recruiters?
07:05 < Robdgreat> probably
07:05 < bid> :)
07:05 < bid> not here
07:05 < astropirate> getting sick of seeing it for other techstacks
07:05 < bid> ruby is hotter here 
07:05 < benatkin> it's a buzzword that means l33t h4x0rz
07:06 < astropirate> *shrugs*
07:06 < astropirate> JS is becoming the new VB? :(
07:06 < astropirate> I love JS but the dynamic type is killing me
07:06 < astropirate> its killing me more ever since i've started with Haskell
07:07 < mbalho> #haskelltrolls
07:07 < benatkin> I'm getting used to the stringly and contextually typed nature of node :)
07:36 < rambo> hi guys, can someone check this code: http://pastebin.com/c9i5mEXJ and explain me why i don't get available rooms? in app.get('/broadcast/:room/:message', function (req, res) Thank YOU!
07:39 <@konobi> rambo: doesn't socketio have a standard endpoint it listens on?
07:41 < rambo> konobi: i don't understand / sorry i'm not goot at node.js :|
07:41 < rambo> i started learning 3 days ago
07:43 < rambo> something like: http://stackoverflow.com/questions/9687561/is-it-possible-to-set-up-a-socket-io-client-running-server-side-on-a-node-js-s
07:43 < rambo> ?
07:43 < Tobsn> whats the best way to get the remote ip?
07:44 < rambo> req.connection.remoteAddress
07:44 < rambo> req.socket.remoteAddress
07:44 < rambo> http://stackoverflow.com/questions/5999379/how-to-find-out-the-remote-address-in-node-js-if-it-is-https-request
07:44 < rambo> not sure, not a guru but this is what i found
07:45 < Tobsn> thanks :D
07:45 < rambo> u'r welcome
07:45 < Tobsn> i just go with connection
07:45 < Tobsn> because in socket.io its client.connection.remoteAddress
07:46 < Tobsn> at least thats what i kept using
07:46 < rambo> <@konobi> can you explain me more or give me a clue or a page to read, so i can learn how can i link this thing?
07:48 < Tobsn> rambo, yeah i think youre doing this wrong ;)
07:48 < Tobsn> socket = io.listen( server );
07:48 < Tobsn> socket.on( 'connection', function( client ) {
07:48 < Tobsn> etc.
07:49 <@konobi> rambo: check the socket.io demo
07:49 < Tobsn> yep
07:49 <@konobi> um... examples even
07:49 < rambo> ok, thanks
07:49 < rambo> sorry it was a stupid question
07:49 < Tobsn> rambo, theres also #socket.io
07:49 < Tobsn> or #socketio
07:50 < Tobsn> one of them
07:50 < rambo> tx Tobsn
07:53 <@konobi> rambo: are you trying to go server-to-server?
07:54 < rambo> yes, php request to nodejs server
07:54 < rambo> i made it now, is working
07:54 < rambo> thanks a lot for your help
07:54 < rambo> konobi
07:54 <@konobi> ah... so still client... kk
07:55 <@konobi> np
08:32 < Danielss89> Hi
08:32 < Danielss89> var iconv = new Iconv('UTF-8', 'ISO-8859-1');
08:32 < Danielss89>     path = path + encodeURI(iconv.convert("øæå"));
08:32 < Danielss89> i send this to my server with request, and dump the encoding and it's still UTF-8
08:32 < Danielss89> why is it that when i converted it?
08:37 <@konobi> "Look at test.js for more examples and node-iconv's behaviour under error conditions."
08:38 < Danielss89> konobi: i tried looking at it :S didn't really tell me anything :(
08:39 <@konobi> Danielss89: iconv.convert() returns a buffer... you then convert it back to a string, which is handled as utf8 internally
08:40 < Danielss89> uhm
08:40 < Danielss89> konobi well have if i can't turn the buffer into a string which is the new encoding, how do i get it then?
08:41 <@konobi> Danielss89: have a look at the Buffer docs
08:47 < Danielss89> konobi: buf = new Buffer(iconv.convert("øæå"));
08:47 < Danielss89>     buf = buf.toString('ascii');
08:47 <@konobi> console.log(buf) is also an option
08:48 <@konobi> no need for new Buffer()
08:48 <@konobi> since convert() is already returning one
08:52 < cryptopsy> where's the documentaiton for 'npm install -d' ?
08:53 <@konobi> cryptopsy: https://npmjs.org/doc/install.html
08:53 < cryptopsy> -d
08:53 < Danielss89> konobi: it's still UTF-8 when i send it to my server :S 
08:53 < cryptopsy> konobi: u read that page?
08:53 < cryptopsy> or just link it
08:54 <@konobi> cryptopsy: just link
08:55 <@konobi> Danielss89: are you converting the whole path?
08:56 < Danielss89> konobi: no, just the variable
08:58 < Danielss89> konobi it still gives me utf8 with the whole path encoded: http://ds.gl/06303b.png
09:06 < cryptopsy> where's modern version of chat application?
09:09 < Tobsn> lol
09:14 < [AD]Turbo> hol
09:20 < Tobsn> hmm wheres the user agent?
09:20 < Tobsn> req.connection as well?
09:31 < simenbrekken> Ever since upgrading to ML npm install -g <whatever> doesn't create symlinks in /usr/local/bin anymore, any idea what I'm doing wrong?
09:41 < hemanth2> hmm why did this guy went from python->go but not node….http://www.reddit.com/tb/zwbc2 
09:42 < hemanth2> what say node hackers?
09:50 < Tobsn> cause go is a real language
09:50 < Tobsn> also dont link reddit, thats ghetto :P
09:51 < gildean> Tobsn: and javascript is not a real language?
09:51 < Tobsn> compare the code snippets
09:52 < Tobsn> and go is a tiny bit faster
09:53 < Tobsn> actually a lot i guess
09:57 < rendar> what does it mean that the event loop in node.js is explicit?
09:57 < mbalho> process.nextTick
10:10 < terinjokes> running v0.8.8, and trying to pass a function to http.createServer(), but failing. code's http.createServer(router.dispatch).listen(1337)
10:10 < terinjokes> as router.dispatch takes two parameters, req and res, i expected that to work
10:13 < rounce> What's with all the high and mighty pythonism at the start of the article hemanth2 linked?
10:14 < rounce> instantly comes across as a massive wanker
10:14 < cryptopsy> why do you care?
10:16 < cryptopsy> why does jitsu have its own npm module?
10:22 < mbalho> jitsu is an npm module
10:22 < substack> cryptopsy: so you can npm install it
10:25 < rounce> cryptopsy: I'd quite like to read the article and garner any insight it may have without feeling like I'm at a dinner party with a load of frenemies
10:25 < rounce> THAT'S why
10:27 < rounce> the types of dinner parties where you 'pop to the loo' but actually silently leave, to go hang out with your actual friends
10:58 < nathan7> rounce: He's being facetious
10:59 < nathan7> rounce: Fix your sarcasm detector
10:59 < nathan7> 7
10:59 < nathan7> ..derp
11:00 < rounce> no duh
11:01 < Tobsn> any favorite cookie modules?
11:41 < Industrial> Hi. I'm trying to debug my Express application that is leaking in an EventEmitter (11 listeners added). I googled around and found v8-profiler + node-inspector but when I require v8-profiler I am met with Error: /home/tom/Documents/Code/sites/dvpay/node_modules/v8-profiler/build/Release/profiler.node: undefined symbol: _ZNK2v813HeapGraphNode15GetRetainedSizeEv
11:42 < Industrial> Is there another way to find my leak?
11:42 < Industrial> I can turn on/off features and requires in a binary search fashion but that's going to be a bitch :P
11:44 < cody--> morning
11:58 < Tobsn> is new Buffer('stringXY').toString('base64') not working anymore? im getting an empty string
11:59 < SomeoneWeird> > new Buffer('lol').toString('base64')
11:59 < SomeoneWeird> 'bG9s
12:00 < BronzeByte> win
12:00 < Tobsn> yah nevermind, made it dirty...
12:00 < Tobsn> from mongo return data['_id'] seems to be whatever... data['_id']+'' fixes it
12:00 < Tobsn> its weird because i think it should be a string
12:00 < SomeoneWeird> .toString()
12:00 < BronzeByte> I might make a mysql proxy in node to cache queries in ram for 50ms
12:00 < Tobsn> yeah basically
12:01 < SomeoneWeird> :)
12:01 < Tobsn> ;)
12:01 < Tobsn> BronzeByte, memcached, or a redis queue
12:01 < Tobsn> thats how we handle large amounts of queries
12:01 < Tobsn> we push them as plain text into a redis queue
12:01 < Tobsn> then we pop them out 50 at a time and run a mysql batch
12:01 < Tobsn> with a cron, every 30 sec
12:02 < Tobsn> on each redis node
12:02 < Tobsn> works pretty damn good.
12:02 < BronzeByte> I would like to write a mysql server in node and make it use some fat storage like MongoDB
12:02 < Tobsn> write a mysql server in node
12:02 < gildean> Tobsn: i'm not sure it's handled like a string by the mongodb driver, as it's a special object in the db iirc named db.ObjectId
12:02 < Tobsn> Mongo ObjectID
12:02 < Tobsn> i know
12:02 < Tobsn> but it doesnt show that for some reason
12:03 < Tobsn> if i output it it says string... but who knows...
12:03 < BronzeByte> i would pay someone who would write a node mysql server but using different storage, so it uses the mysqld network protocol but a different database type
12:03 < gildean> yeah but the object in the db is also db.ObjectId(someidstring)
12:03 < gildean> if i recall correctly
12:03 < Tobsn> BronzeByte, you can just write a mongodb module that parses sql
12:04 < Tobsn> which makes no sense whatsoever
12:04 < BronzeByte> I need the mysql network protocol implementee
12:04 < Tobsn> why?
12:04 < BronzeByte> *implemented
12:04 < BronzeByte> i am working on a powerful webhosting platform and the default mysql server is a heavy piece of shit
12:05 < Tobsn> dont do it, use mongodb drivers.
12:05 < BronzeByte> you dont understand
12:05 < BronzeByte> i NEED mysql
12:06 < BronzeByte> but i dont want to use the default sger
12:06 < BronzeByte> *server
12:06 < BronzeByte> I want to use the power of nore 
12:06 < BronzeByte> *node
12:06 < Tobsn> okay...
12:06 < Tobsn> good luck
12:06 < BronzeByte> haha
12:06 < gildean> BronzeByte: why would you need mysql?
12:06 < BronzeByte> for my users
12:06 < BronzeByte> they need it
12:07 < gildean> so use a mysql driver then for those functions in your platform?
12:07 < BronzeByte> a mysql driver... but i need a better server for mysql
12:08 < Tobsn> hehe
12:08 < Tobsn> gildean, dont go there
12:08 < hemanth2> wtf! this is feature on yt! http://www.youtube.com/watch?v=1e1zzna-dNw&feature=fvwrel 
12:08 < hemanth2> 'Node.JS Is Stupid And If You Use It So Are You' ^
12:09 < gildean> BronzeByte: so you want a mysql server that isn't actually mysql but you can use it as mysql?
12:09 < BronzeByte> exactlt
12:09 < BronzeByte> *exactly
12:09 < gildean> ok, just write a library that translates all mysql queries to something else
12:09 < gildean> you might be at it for a while
12:10 < Tobsn> hemanth2, look at the date from when the video is
12:10 < BronzeByte> That was my planning, I am probably going to utilize a node based database system
12:10 < BronzeByte> but the mysql protocol is really... shit
12:11 < Tobsn> good luck parsing joins and orders or poly queries into map reduce and geo spartial.
12:11 < gildean> BronzeByte: and you think that the translation is not going to be costly cpu-wise?
12:11 < BronzeByte> no
12:11 < BronzeByte> we have 8 Xeon cores per node
12:11 < gildean> then what's the problem running mysql in the first place?
12:12 < Tobsn> you know mysql isnt just SELECT * FROM table... just SELECT *, TO_UNIXTIME( datestamp ) AS date, foo FROM table1, table2 WHERE table1.id = table2.fid GROUP BY foo;
12:12 < BronzeByte> it kills the server by spawning thousands of processes
12:12 < Tobsn> go translate that into map reduce
12:13 < Tobsn> gildean, i warned you
12:13 < Tobsn> ;)
12:14 < jim_> Is that 'Node.JS Is Stupid And If You Use It So Are You' thing a joke or is that clown serious?
12:14 < Tobsn> jim_, look into reddit from 10 month ago and you'll find out
12:14 < BronzeByte> another cunt that doesnt see whats node purpose is
12:15 < BronzeByte> node is robust and easy to develop, not some I/O beast or CPu master
12:17 < hemanth2> any bot in here?
12:17 < BronzeByte> why?
12:17 < jim_> I'm a bot.
12:18 < BronzeByte> derp
12:18 < hemanth2> asking, cos was planning to make one ;) say like a FAQ bot 
12:18 < hemanth2> jim_: good joke 
12:18 < BronzeByte> ok, so I guess having node is frontend for caching queries to mysql is better than just writing a new mysql server
12:18 < BronzeByte> hemanth2, make a bot where you can lookup the nodejs documentation :D
12:19 < BronzeByte> like: NodeDocsBot, list functions in net
12:19 < BronzeByte> like: NodeDocsBot, list functions in http
12:19 < hemanth2> BronzeByte: kool
12:20 < BronzeByte> the docs are available in json :-)
12:20 < hemanth2> BronzeByte: heh heh ok, http://vimeo.com/16360222 was my first 
12:20 < hemanth2> but not in node tough 
12:23 < BronzeByte> hemanth2, nice :-)
12:24 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
12:56 < hemanth2> BronzeByte: thx, sorry was akf 
12:56 < hemanth2> *afk
12:57 < hemanth2> BronzeByte: would't NodeDocsBot flood the channel ? 
12:57 < BronzeByte> You would need it private message you
12:57 < BronzeByte> otherwise it would indeed become spammy
13:00 < hemanth2> heh heh so only PM….hmm or else will pack NPM ;) BronzeByte
13:11 <@konobi> noisy bots will very quickly get a boot
13:11 < hemanth2> lol
13:12 <@konobi> and possibly their owners too (shared IP space, etc)
13:12 < hemanth2> konobi: :D 
13:15 < hemanth2> default method to read URL data within node, rather than npm install request ?
13:16 < aandy> anyone with an ipad who can help shed some light on this http://engineering.linkedin.com/linkedin-ipad-5-techniques-smooth-infinite-scrolling-html5 ? i like the approach, but there's one aspect of this I don't understand (and which isn't mentioned): what happens when the user goes BACK (to unloaded content)? keeping a history (e.g. id's) in the dummy node would seem to induce the same memory problem it's trying to solve, so is this use case just disregarde
13:16 < hemanth2> http.request ?
13:17 < aandy> hmm, i guess i just answered my own question, sorry :)
13:18 < Industrial> Is there another way then v8-profiler to catch memory leaks in NodeJS? it seems to blow up when I start it :/
13:19 < Industrial> following https://github.com/felixge/node-memory-leak-tutorial which is prettymuch all I could find on finding leaks
13:19 < Industrial> hemanth2: yes
13:20 < hemanth2> thnx, better to have request as a dep….
13:21 <@konobi> Industrial: webkit-devtools-agent
13:21 < hemanth2> how good is var arguments = process.argv.splice(2); ?
13:21 <@konobi> there's also fun to be had on smartos with mdb and the v8 module
13:27 < hemanth2> best way for string interpolation?
13:27 < sinclair> hemanth2: string interpolation?
13:28 < sinclair> what is "string interpolation" ?
13:29 < hemanth2> like "Hello #{name}" 
13:29 < hemanth2> rather than  "Hello" + name 
13:30 < hemanth2> http://en.wikipedia.org/wiki/String_interpolation
13:30 < sinclair> yeah, just reading up
13:31 < sinclair> hemanth2: ever dealt with operational transformations?
13:32 < sinclair> hemanth2: i get the feeling this will be a BIG topic in the near future
13:32 < hemanth2> sinclair: wow! no had just heard of it b4
13:33 < sinclair> hemanth2: before?
13:33 < hemanth2> yes
13:34 < sinclair> i think i have seen a couple of libs for it, but not in C# :(
13:34  * sinclair likes C#, ASP.NET 4.0 + Web API and SignalR
13:34  * sinclair also likes socket.io
13:34 < hemanth2> socket.io FTW!
13:35 < hemanth2> C# hmm I'm allergic to M$ tech 
13:35 < sinclair> hemanth2: why, what's wrong with MS tech?
13:36 < sinclair> MS do a lot of brilliant engineering nowadays, the MVC frameworks they have put out are comparable with the best of anything else out there
13:36 < hemanth2> sinclair: hmmm
13:36 < hemanth2> :\
13:36 < deoxxa> but it's cool to hate MS!
13:36  * hemanth2 requests  https://twitter.com/GNUmanth/status/247327406224965634 
13:36 < deoxxa> or is that not cool anymore? :<
13:36 < hemanth2> so far one thing i liked from M$ was On{x} 
13:36 < sinclair> deoxxa: no, its not that cool anymore
13:37 < hemanth2> i'm a FOSS <3r sinclair
13:37 < sinclair> deoxxa: MS lacks in good robust software, but totally pwns at development tools, frameworks and languages
13:38 < deoxxa> sinclair: i might have been being facetious
13:38 < deoxxa> sinclair: also, MS has plenty of good software - office is leaps and bounds ahead of literally everything else in the same space
13:38 < sinclair> deoxxa: for examples, i HATE, SharePoint, MSCRM, Commerce, and much of the Office Suite, but am in AWE of the development technologies MS pumps out, with SignalR being the most recent in a line of outstanding web technologies
13:38 < deoxxa> yeah, they have a lot of really smart people doing awesome stuff
13:39 < hemanth2> :[
13:39 < sinclair> deoxxa: more so than they have in the past, they have embraced the community a lot more and found a good common ground
13:39 < deoxxa> yeah
13:39 < sinclair> the MVC stuff is just brillant
13:39 < hemanth2> XHR was from M$ right?
13:39 < sinclair> and WebAPI even more so
13:39 < hemanth2> MVC is still alive ?
13:40 < Tobsn> does node.js has a different date object than plain browser js?
13:40 < deoxxa> yeah i actually really like their strategy with things like the MVC framework
13:40 < sinclair> hemanth2: where have you been?
13:40 < deoxxa> they waited until there was a really solid definition of the technology, then went and wrote a framework that covers it
13:40 < deoxxa> instead of jumping in at the start and ending up with some twisty, turny, horrible mess
13:41 < sinclair> deoxxa: if you look at the most recent MVC (4.0), MS have decoupled basically all of System.Web into really tight micro API
13:41 < deoxxa> mind you, i still wouldn't touch it with a 10 foot pole
13:41 < deoxxa> but it's cool what they're doing
13:41 < hemanth2> sinclair: to the land of MVP
13:41 < sinclair> im actually trying to find reasons to use nodejs over .NET and SignalR at this stage
13:42 < sinclair> well, nodejs + socket.io vs SignalR
13:42 < sinclair> its more the practicalities around using node
13:42 < sinclair> i am trying to find a niche there
13:42 < deoxxa> sinclair: node is wayyyyy more fun
13:42 < sinclair> sockets perhaps?
13:42 < sinclair> deoxxa: yup, node is fun alright
13:42 < deoxxa> that's surprisingly important
13:43 < deoxxa> i get a lot more done in node specifically because it's fun
13:43 < sinclair> deoxxa: nodejs also has SQL Server API (also important)
13:43 < medice> i quite prefer static typed languages so c# > javascript in my heart
13:44 < deoxxa> i think it depends what you're doing, medice
13:44 < sinclair> medice: yeah, i struggle to understand how to structure a nodejs application to make it maintainable
13:44 < deoxxa> i do c and js at work
13:44 < sinclair> medice: also, using nodejs for large projects seems like a bad call (but this may be incorrect)
13:45 < RLa> because you can't structure big js projects does not mean other can't too :)
13:45 < sinclair> RLa: i am thinking as much
13:45 < deoxxa> sinclair: oh to the contrary - node makes it dead simple to split things up into services to simplify and force separation on large systems
13:45 < medice> i do believe they cant too
13:46 < RLa> deoxxa, true, i really like its module system
13:46 < RLa> no module hell
13:46 < deoxxa> yeah
13:47 < deoxxa> also, streams
13:47 < deoxxa> streams, oh my god
13:47 < deoxxa> my life became, literally, a hundred times simpler
13:47 < sinclair> so, what are people here using nodejs for?
13:47 < gildean> i have to do some project with streams
13:47 < deoxxa> after i started working with streams instead of anything else
13:47 < gildean> deoxxa: you have some good starting point for me with streams?
13:48  * sinclair believes using nodejs means giving up a tonne of important technologies such as security, typing, role + membership platforms,
13:48 < deoxxa> gildean: http://nodejs.org/docs/latest/api/all.html#all_stream then http://maxogden.com/node-streams then https://github.com/substack/stream-handbook in that order
13:48 < sinclair> how does one sanitize input from a user in node?
13:49 < gildean> deoxxa: thanks, i'll be reading
13:49 < deoxxa> sinclair: the same way you'd sanitise it anywhere else - there are validation libraries and such, if you want to use them
13:49 < sinclair> also, what about caching? how does node handle output caching?
13:49 < deoxxa> output caching?
13:50 < deoxxa> you're talking about straight up web stuff right now, yes?
13:50 < sinclair> deoxxa: sure, you compute some output, and you cache it for the next visitor
13:50 < sinclair> deoxxa: pretty much
13:50 < deoxxa> well, you've got a bunch of options there
13:50  * sinclair is aware node is more than just "web stuff"
13:50 < RLa> yeah, just store response in a variable, cant be simpler
13:50 < deoxxa> redis is popular, as is memcache, as are various reverse proxies such as nginx or varnish
13:50 < RLa> yeah, or use those
13:50 < deoxxa> it depends pretty heavily on how you structure your application
13:51 < deoxxa> if you can cache the entire http response, you're set
13:51 < deoxxa> just throw a good proxy in front and call it a day
13:51 < gildean> iirc express caches all the views you render etc. too
13:51 < deoxxa> yeah, express does have some caching stuff
13:51 < sinclair> deoxxa: nginx is the recommended approach?
13:51 < deoxxa> sinclair: it's what i'd do, if i needed to
13:51 < deoxxa> sinclair: but you have to remember, node is pretty darn quick anyway
13:52 < sinclair> deoxxa: caching is important regardless of how quick the language is
13:52 < deoxxa> sinclair: if you can cache the expensive operations and make fetching from that cache relatively cheap, node probably doesn't need anything in front
13:52 < gildean> and node is mostly meant for more dynamic content etc. not to say you couldn't do a static site with it very easily
13:52 < deoxxa> the core HTTP stuff is really, really quick
13:53 < sinclair> so, why would i use nodejs over say, ASP MVC + SignalR?
13:53 < sinclair> (in the web space)
13:53 < sinclair> that's a honest question btw
13:53 < deoxxa> there's not really a single answer to that
13:53 < gildean> with nodejs you can write everything in javascript
13:53 < deoxxa> i can tell you why i personally would use it
13:53 < deoxxa> but it might not apply to you
13:53 < sinclair> deoxxa: that's what im interested in hearing
13:54 < gildean> so if you like javascript then it's just what you want
13:54 < deoxxa> i'm using node because it fits well with what i'm building - nearly everything in the system i'm working on is expressed as a stream
13:54 < deoxxa> it's ridiculously easy to toy around in and get a prototype of stuff working
13:54 < deoxxa> then factoring into smaller modules is a breeze with npm
13:54 < deoxxa> so for my workflow, it fits great
13:55 < gildean> also the amount of wellmade modules is astounding considering how young node.js is
13:55 < deoxxa> yeah
13:55 < sinclair> what about hosting nodejs?
13:55 < deoxxa> you've got a lot of options there
13:55 < sinclair> i have a Azure account, and am thinking about hosting node up there, but what do you guys use
13:55 < deoxxa> there's a few PaaS providers - nodejitsu, heroku, joyent, etc
13:56 < deoxxa> personally i host most of my stuff on my own hardware
13:56 < sinclair> they free on a quota?
13:56 < deoxxa> (and doing that is relatively painless)
13:56 < gildean> i have my on hw as well, but if you wanted to test, you could always try nodester for example
13:56 < deoxxa> nodejitsu is free at the moment, but it will be for-pay once it comes out of beta
13:56 < sinclair> heroku was offering some free quota limited hosting iirc
13:56 < deoxxa> heroku has a free tier, yeah
13:57 < gildean> sinclair: i wrote this about two months ago: http://toomanymangos.nodester.com/posts/500d1ec1a32b32c745000001/How-to-deploy-a-node.js-app-for-free
13:57 < deoxxa> you can only run one process in the free tier for an application on heroku, but that's often enough if you're just playing around
13:57 < gildean> and the app is still running, haven't done anything to it since iirc
13:58 < deoxxa> hosting on your own hardware is pretty easy as well, if you take advantage of a few tools from other people
13:58 < sinclair> gildean: nice
13:58 < sinclair> i should get into node
13:58 < deoxxa> i use "forever" from nodejitsu to run processes, substack's "seaport" to keep track of services and some internal stuff to handle deployment
13:59 < sinclair> what about technologies like backbone etc, do you guys use these technologies on node?
13:59 < sinclair> also, what about templating?
13:59 < sinclair> what technologies exist there?
13:59 < deoxxa> there are a loooot of options for that
13:59 < sinclair> like, mustache  
13:59 < gildean> sinclair: there are very little limitations on what you can do
13:59 < sinclair> what are the most popular web technologies people are using?
14:00 < deoxxa> express is big
14:00 < deoxxa> nearly everyone uses that these days
14:00 < gildean> yeah, express also works and is easy to get running
14:01 < deoxxa> flatiron is cool, and a lot more of a full-stack kind of thing, but it's not gaining much traction for some reason
14:01 < gildean> pickels: now's your time to shine and link to your app builder
14:01 < pickels> http://enome.github.com/application-generator/
14:02  * pickels shines like a bright star
14:02 < medice> you are so distant
14:02  * deoxxa shields eyes
14:03 < medice> sudo make me a mmorpg
14:04 < gildean> it would be fun to make an online rpg, but more like pathfinder or something which is more like a classic tabletop rpg
14:07 < sinclair> gildean: i can do you a good pathfinding algo
14:11 < AviMarcus> anyone here live in canada? have a random questions about the phones there
14:31 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:29 < shoshy> hey, i'm trying to write large amount of data to a file. Basically a loop that appends the file. My code is : http://pastebin.com/7AEa0QRd , i get [ERROR] Error
15:29 < shoshy> Error: OK, open 'c:\points.txt' (for every append to the file) and it does appends to it. 
15:34 < Tobsn> is there a solid way of redirecting errors into a log and not killing the node instance?
15:41 < euoia> what is recommended for logging? I have been using console.log, but is there something better? I would, at least for now, to have have my logs prefixed with a timestamp, function name, session ID etc
15:51 < prosquare> euoia: i like winston
15:52 < prosquare> https://github.com/flatiron/winston
15:52 < euoia> ok great, will check it out. I have a look at the node wiki but there were so many options without much indication of what's actively developed.
15:53 < noordung> Buffer.concat copies contents?
15:57 < noordung> :( Yes, it does. :(
16:13 < rounce> having a mocha problem
16:13 < rounce> I'm apparently creating a global
16:13 < rounce> fuck nbm
16:13 < rounce> *nvm
16:41 < spion_> substack, in dnode is it possible for a client to "ask" for methods instead of assuming that construction time is the time to exchange methods?
16:41 < spion_> (i mean instead of the server assuming it)
16:42 < euoia> prosquare: finding the interface to winston a bit weird
16:42 < euoia> prosquare: for example, if I use winston.info I can pass in multiple strings comma separated and it concatenates them with a space
16:42 < euoia> p
16:42 < prosquare> console.log works the same way
16:42 < euoia> prosquare: but if I use winston.log, then I need to pass in a level level, a string, an object, then a function
16:43 < prosquare> ah
16:43 < prosquare> yea
16:43 < euoia> prosquare: I like being able to comma separate my strings rather than using the plus operator
16:43 < euoia> prosquare: but if I want to log an object I have no choice but to use the + to prepend my log prefix, it seems
16:44 < euoia> prosquare: or am I doing it wrong?
16:51 < spion_> nevermind, i found a workaround.
16:52 < yeshi> <3 node
16:52 < purr> Let it be known that yeshi hearts node.
16:52 < yeshi> o_o
17:03 < dshaw_> —> /join #nodeup
17:08 < mscdex> <3 purr
17:08 < purr> Let it be known that mscdex hearts purr.
17:08 < txdv> i can confirm that, i am holding it
17:35 < cody--> anyone working on anything cool?
17:36 < mbalho> pizza.com realtime pizza deliveries using node powered self driving cars
17:37 < insin> npm install -g coffeeee / physically makes you a coffee
17:37 < cody--> ...
17:39 < badlee> Little Javascript DNS Server on top of nodejs 0.6.x (https://github.com/badlee/fun-dns)
17:42 < cody--> neat, im working on nirc (http://github.com/cjstewart88/nirc)
18:01 < exit2> What's a good place to start with node.js for someone coming from Python?
18:05 < fritzy> exit2: for web apps?
18:06 < exit2> fritzy: yes, I'm coming from Django
18:06 < nmartin> I'm working on a UI to a SAN I've designed
18:06 < fritzy> exit2: look at node-express and jade templating
18:07 < fritzy> sample apps and whatnot
18:07 < exit2> fritzy: I'd also like to looking to creating web based games as well - which is something that isn't easily done with Django of course
18:07 < nmartin> also, for the very basics, http://www.nodebeginner.org/ got me up to speed quickly
18:07 < nmartin> the problem with any framework is you dont know what provides what
18:08 < nmartin> as in express wraps 90% of sencha connect, so you may be using express whan all you realy needed was connect
18:09 < exit2> nmartin: I'm currently reading through nodebeginner.org thanks
18:09 < nmartin> so, on github, checkout sencha labs connect, express, jade for templating, etc
18:10 < nmartin> the result of nodebeginner made me understan routing very well, so that I determined i dont need a full framework, but just a decent app router and connect for most things
18:11 < exit2> nmartin: sweet thanks :)
18:12 < nmartin> but even then, check: https://npmjs.org/browse/keyword/router there is a metric sh*ttom of router libs to choose from :)
18:15 < nmartin> exit2: what kind of games/
18:15 < nmartin> ?
18:15 < exit2> nmartin: mmorpg style stuff
18:15 < nmartin> cool
18:16 < nmartin> node is probably perfect for that
18:16 < exit2> nmartin: yeah I've been coding for a long time and I've always wanted create a MMORPG but work always got in the way.  So I'm trying to find the time now as a small project for mysefl
18:17 < exit2> *myself
19:01 < jrajav> Anyone used node-webkit?
19:02 < jrajav> Just wondering if it supports cross-origin
19:02 < jrajav> Before I commit
19:02 < jrajav> I'm pretty sure but I can't find anything that addresses it specifically
19:02 < gkatsev> tias?
19:03 < gkatsev> and what does supporting cross-origin mean?
19:10 < cryptopsy> jrajav: whats node-webkit?
19:11 < gkatsev> why not appjs?
19:13 < jrajav> https://github.com/rogerwang/node-webkit
19:14 < jrajav> I don't know why not appjs
19:14 < Benvie> you can with appjs, not sure about node-webkit
19:14 < jrajav> node.webkit seems a little more mature
19:15 < Benvie> appjs.createWindow({ disableSecurity: true })
19:15 < jrajav> Other than that I honestly have no idea what the differences are
19:15 < jrajav> I think node-webkit downgrades the security by default
19:15 < gkatsev> jrajav: what are you trying to do exactly?
19:15 < jrajav> Note taking app that syncs with dropbox and google docs
19:16 < jrajav> and/or
19:16 < jrajav> or
19:16 < jrajav> :P
19:16 < Benvie> node-webkit compiles node into chrome, appjs is a node module that can be installed with npm. That's the primary difference
19:16 < gkatsev> yeah, that's what I thought when I looked at it earlier.
19:17 < jrajav> I guess I'll just have to try it
19:17 < mscdex> does appjs still bridge the event loops?
19:17 < Benvie> yeah, well it runs the browser event loop using libuv
20:02 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
20:29 < Vendethiel> Hi
20:30 < Vendethiel> I havn't found any confirmation on the internet, is it possible to use "*" as a version in npm ?
20:30 < Vendethiel> cause git+ssh fails with windows
20:34 < chilts> Vendethiel: yes, you can use "*" as a dependency in your package.json against another package
20:34 < chilts> not sure what that has to do with git+ssh, different problem
20:37 < etcetera> has anyone played with meteor?
20:38 < spion_> Vendethiel, for git-based modules, use "name_as_in_packagejson": "git://..."
20:38 < chilts> etcetera: one of the meteor guys ported my library, AwsSum, to meteor, but I haven't played with it myself
20:39 < spion_> Vendethiel, if you mean that. if you mean that git+ssh doesn't work on windows while it does work on linux, then disregard
20:39 < etcetera> chilts: ah.
20:39 < Vendethiel> spion_: oke
20:39 < etcetera> Just kind of wondering whether people are amenable to considering that layer of abstraction...viable.
20:40 < Vendethiel> spion_: I'll use that, I was just wondered about using "*" to mean "any version"
20:42 < spion_> etcetera, the question is if its necessary. with socketio dnode you can basically do the same thing, for whatever type of server-side service you wish.
20:42 < spion_> etcetera, also, can you afford to give that kind of full-blown access to the database to clients?
20:43 < spion_> if yes, why not simply use couchdb and skip node alltogether
20:43 < etcetera> spion_: it's also interesting to note that node packages need...porting.
20:43 < etcetera> and it's also interesting to note that it's so....well...funded.
20:43 < sirwan> I HATE JAVASCRIPT
20:43 < sirwan> HOW CAN ANYONE ENJOY THIS CALLBACK CRAP 
20:44 < etcetera> and yes, I also agree with the above sentiment. unfortunately there is little to no guidance for new node folks with regard to basic things like data access.
20:44 < spion_> etcetera, I have no idea what niche it fills.
20:44 < etcetera> sirwan: alternative?
20:44 < BennyLava> sirwan: UMAD BRO????
20:44 < sirwan> RUBY
20:44 < sirwan> SIMPLES
20:44 < sirwan> GOLIATH
20:44 < sirwan> WTF IS THIS CRAP
20:44 < spion_> sirwan, use streamline.js
20:44 < sirwan> THIS IS SCRATCHING YOUR LEFT EAR WITH YOUR RIGHT HAND
20:44 < sirwan> ITS FUCKING STUPID
20:45 < sirwan> NO WAY MAN
20:45 < sirwan> JAVASCRIPT IS NOT NICE
20:45 < sirwan> why do you guys need nodes 'power'
20:45 < etcetera> spion_: if you're going to use a 3rd party language extension, why not use koush's async?
20:45 < etcetera> async port*
20:46 < sirwan> mini-frameworks for python and ruby does enough, Node is a Pain in the Ass
20:46 < sirwan> do*
20:46 < sirwan> anyway
20:46 < etcetera> https://github.com/koush/node
20:46 < sirwan> sorry for ranting
20:46 < cainus> sirwan:  http://callbackhell.com/
20:46 < sirwan> wtf is this link a remedy for it ?
20:47 < spion_> I'm sorry, callbackhell is absolutely zero help
20:47 < spion_> :)
20:47 < cainus> it teaches you you how to factor your code properly
20:47 < etcetera> apparently Go is a viable alternative to node.
20:47 < etcetera> unfortunately the community is lacking.
20:48 < sirwan> big corps like google cant createa  'community'
20:48 < cainus> callbacks are only hard because they're foreign to you
20:48 < sirwan> so is this callbackhell thing a node package or a piss take ?
20:48 < spion_> etcetera, because streamline is not a whole different node?
20:48 < cainus> once you learn the language, they're easy
20:48 < etcetera> spion_: fair enough.
20:48 < cainus> sirwan: neither
20:49 < spion_> what I'm really hoping for is harmony generators arriving to V8
20:49 < sirwan> a library is it ?
20:49 < cainus> sirwan: read it ffs
20:49 < sirwan> I AM READING YOU DICKHEAD
20:49 < etcetera> spion_: what are you using node for?
20:49 < sirwan> THERE IS NO DOWNLOAD LINK
20:49 < sirwan> OR EVEN A REPO LINK
20:49 < cainus> for what?
20:49 < livinded> bad troll is bad
20:50 < cainus> download it into your brain
20:50 < cainus> welcome to the matrix
20:50 < sirwan> this is what the readme says : this will contain information about using callbacks, events and streams to write javascript programs
20:50 < spion_> etcetera, a coupe of projects, mostly web-based.
20:50 < livinded> cainus: oh god. This needs to be photoshoped
20:50 < sirwan> https://github.com/maxogden/callback-hell
20:50 < spion_> one of those big, the others tiny.
20:50 < livinded> "I know callbacks"
20:50 < mscdex> capslock ftl
20:51 < sirwan> *ignoreing sound notifications in this room*
20:51 < leonardo> today is not capslock day IIRC
20:51 < livinded> EVERYDAY IS CAPSLOCK DAY!
20:51 < spion_> etcetera, one of the big ones is presentation channel (lets you do realtime presentations on the web) 
20:51 <@Nexxy> I AGREE WITH THIS STATEMENT
20:52 < leonardo> WELL, WHO AM I TO DISAGREE
20:52 < livinded> I'm building a massively multiplayer slide html5 slide deck for my talk
20:52 < livinded> it's gonna be fucking sweet
20:52 < spion_> etcetera, one part* of the big one. the part where node.js is actually needed.
20:55 < spion_> (so basically presentation chat, syncronization of presenter audio and slide control, realtime q & a)
20:55 < livinded> spion_: ya
20:55 < spion_> livinded, our company is building a generic one :P
20:55 < livinded> cool
20:56 < livinded> doing this for my talk as javascript conference in germany to go along with my sandboxing talk
20:56 < livinded> it's gonna have a few "features" to demonstrate why sandboxing is important
20:56 < spion_> oh and I also forgot, session recording
20:57 < livinded> I really hope the audience owns eachother
20:57 < spion_> haha
20:58 < livinded> gonna be so dissapointed if people aren't
20:58 < johncoogan> Can anyone help me understand best practices for handling json posts? i.e. query string vs. headers vs. body.
20:59 < spion_> livinded, haha, Rich Hickey usually has that problem. he asks a question and people don't answer like he expects :)
20:59 < spion_> (clojure's author)
20:59 < spion_> johncoogan, you mean where to put the json?
20:59 < cainus> johncoogan: like what?  json goes in the body, header should be content-type : application/json
21:00  * etcetera doesnt quite understand clojure.
21:00 < etcetera> why replace {} with ()
21:00 < spion_> because code is data
21:01 < johncoogan> That makes sense to me, but why do API like Twitter and FourSquare take everything over a query string?
21:01 < spion_> :P
21:01 <@Nexxy> lol
21:01 <@Nexxy> it's a lisp
21:01 <@Nexxy> lithp
21:01 < cainus> johncoogan: they don't know how to make proper apis
21:01 <@Nexxy> everything is an S-expression
21:01 <@Nexxy> or whatever
21:01 < etcetera> honestly, C# is a better ECMA, but the whole ecosystem and deployment aspects of it are enough to puke.
21:02 < etcetera> hence, my fleeting interest in node.
21:11 < spion_> etcetera, why is C# better?
21:11 <@Nexxy> cuz static typing
21:11 <@Nexxy> amirite?!
21:11 <@Nexxy> cuz mounds of xml
21:12 < cainus> visual studio enterprise edition 9.99 cadillac edition
21:12 < etcetera> and that ^
21:12 < etcetera> which I suppose falls into "ecosystem"
21:12 < etcetera> spion_: I prefer static typing, with the optionality of a dynamic'
21:13 < cainus> VS lets you create a neural net in the cloud by just right-clicking 3 times
21:13 < spion_> well then ecmascript has the potential to be much better than C# after optional type annotations. in C# type annotations aren't optional - instead you have type inference
21:13 < spion_> personally I prefer the object-are-dictionaries concept
21:15 < etcetera> spion_: v.next will be so much better!
21:15 < spion_> yeah, thats probably a problem. ecmascript is moving too slowly.
21:16 < spion_> C# (the language) moves faster.
21:16 < cainus> moving fast isn't exactly a feature
21:17 < spion_> for node.js it is. i often find myself going "i searched for such a module 2 weeks ago and I couldn't find it... oh wait, now there is one"
21:17 < etcetera> spion_: ecosystem and deployment.
21:17 < cainus> that has nothing to do with the language spec
21:17 < etcetera> easily my two biggest reasons for trying node. I can get over the language.
21:18 < spion_> but some problems aren't solvable by a library.
21:18 < etcetera> spion_: you don't build things that run into those problems using node then.
21:18 < spion_> hey, its not like you run into those kinds of problems every day.
21:19 < spion_> they're quite rare actually.
21:19 < etcetera> When I asked myself, "I want a quick REST API, should I use ASP.NET or node for this?"
21:20 < cainus> I think for language features, moving smarter is better than moving faster
21:20 < nlogax> V8 also prefers static typing, and does type inference. But for generating better code. Check out the hydrogen stuff :) Personally I also prefer a language/compiler that will tell me about it
21:22 < spion_> true... but es harmony is way too slow (and to be honest, not too smart in all aspects either)
21:22 < jetienne> hehe
21:22 < jetienne> i have seen people arguing coffee script worth the time, i can look at c# is better :)
21:23 < etcetera> a proper debugger is a critical component of a stack I would think.
21:23 <@Nexxy> what are you talking about coffeescript is amazing
21:23 <@Nexxy> so elegant and beautiful and and and
21:23 < jetienne> and spion_ things c# is nice
21:23 < etcetera> given that fogcreek is a huge C# shop, I'm surprised they went to coffeescript!
21:24 < jetienne> Nexxy: so it is cool you can think coffescript is nice
21:24 < jetienne> i can bring people who think lisp is nice if you want :)
21:24 <@Nexxy> lisp *is* nice
21:24 <@Nexxy> I was joking about coffeescript though
21:24 <@Nexxy> horrible
21:24 < jetienne> i know people who write web server in lisp :))))
21:25 <@Nexxy> that sounds like it would be a lot of fun
21:25 < jetienne> fun as in inefficient and buggy yeah :)
21:25 < spion_> yeah you think node is callback hell, try using a lisp for a while ;)
21:25 <@Nexxy> what you can't use partial functions in lisp?
21:26 < jetienne> people are too religious about the last language they learned
21:26 < spion_> not in that way. the same "problem" of "nesting" is present there.
21:26 <@Nexxy> yeah
21:26 <@Nexxy> but if you just think of them as really big hugs
21:26 < mscdex> node.js rules!
21:27 < jetienne> well microsoft paid for a lto of nodes.js and for that i thanks them
21:27 < mscdex> well, for Windows support....
21:28 < jetienne> a good server language has to support that too :)
21:28 < spion_> I like it because it makes my boss feel safer :P
21:28 < cainus> a good server language for bad servers? :)
21:29 < spion_> "Microsoft are doing node stuff? Good, good."
22:03 < alfredogon82> hello... im getting this error Express 500 ReferenceError: /var/lib/stickshift/81bf69e9d79f4bedbdfdd119c54f8ae6/app-root/data/279694/admiosexam/views/index.jade:4 2| 3| block content > 4| h1= title 5| p  6| 7| title is not defined
22:15 < bid> hi, can i require() as a condition i mean if(foo)require('./bar') is that make sence or should i just put it in the top as i see in all the examples? 
22:16 < beara> don't see why not.. require is just a function
22:17 < timeturner> you can require anywhere
22:17 < beara> it IS a function so you can treat it like one, although good coding practice is another topic
22:17 < mscdex> bid: generally it's best to do all of your requires initially
22:17 < mscdex> since it is sync
22:17 < timeturner> just remember that once you require it is in memory from that point on
22:17 < bid> some modules are not always needed... 
22:17 < timeturner> and future requires for the same module will simply point to that one instance
22:17 < bid> yes. 
22:24 < jesusabdullah> yo, what do you guys use for generating/parsing xml?
22:24 < jesusabdullah> I'm finding the need to wrap an xml api >_<
22:25 < RLa> if it's simpler xml, use sax
22:25 < RLa> it does parsing but you need to keep track of nesting
22:27 < jesusabdullah> hmmm
22:27 < jesusabdullah> yeah, I don't need streaming per se
22:27 < jesusabdullah> a sane way to convert xml blobs into javascript objects would suffice
22:28 < jesusabdullah> still easiest/sanest to do with sax RLa ?
22:29 < jesusabdullah> oh I see
22:33 < RLa> probably not
22:33 < RLa> try to search for dom parsers in npm registry
22:34 < mansoor-s> jsdom is nice
22:34 < mansoor-s> you can use jquery with yoru xml :D
22:34 < jesusabdullah> but I want to handle xml in a lightweight way, nothing crazy
22:35 < jesusabdullah> I'm just writing an api client and need a predictable mapping from xml payloads to js payloads
22:35 < spion_> you mean to JSON?
22:38 < jesusabdullah> spion_: I mean, js objects, not serialized to json
22:38 < jesusabdullah> but ones that could be serialized to json, for sure
22:38 < jesusabdullah> also: holy shit http://code.google.com/p/lite/source/browse/trunk/Lite/web/scripts/org/xidea/lite/nodejs/readme.txt
22:39 < deoxxa> jesusabdullah: xml doesn't map into json accurately
22:39 < deoxxa> jesusabdullah: you can do it if you have a very tight specification of what the objects will be ahead of time
22:39 < jesusabdullah> whaaat?? why not?
22:40 < spion_> it can, if you do [{nodetype:'element', attributes: {...}, children:[...]},...]
22:40 < jesusabdullah> so like the best I can do is give someone the raw xml and suggest tools for dom-ifying it?
22:40 < cryptopsy> yo jesusabdullah 
22:40 < deoxxa> yeah pretty much
22:40 < jesusabdullah> spion_: Yeah, that's what I had in mind
22:40 < cryptopsy> why does jitsu have a npm module?
22:40 < deoxxa> spion_: nope, that still doesn't cover it
22:40 < deoxxa> spion_: xml namespaces will fuck your shit riiiiiight up
22:40 < jesusabdullah> cryptopsy: so you can install it with npm
22:40 < cryptopsy> can the end-user opt out of this and upload+control via ssh?
22:40 < jesusabdullah> cryptopsy: and so you can use it programatically if you really want to
22:41 < jesusabdullah> deoxxa: namespaces? goodness
22:41 < cryptopsy> can npm install packages without .json file?
22:41 < deoxxa> jesusabdullah: consider <a:b xmlns:a="c" xmlns:d="e" e:f="g" />
22:41 < jesusabdullah> no
22:41 < cryptopsy> will you install custom modules?
22:41 < jesusabdullah> ugh that makes my head hurt
22:41 < cryptopsy> or can the user do that?
22:41 < cryptopsy> for exmple, i want to use a custom databse
22:41 < spion_> ah yes. namespaces. 
22:41 < deoxxa> jesusabdullah: best advice, to avoid headaches in the future, is just to use a proper DOM and something designed for querying xml like xpath
22:41 < deoxxa> jesusabdullah: this is one of the reasons xml sucks ass
22:42 < jesusabdullah> ahhh
22:42 < jesusabdullah> I just want to use the SFBART's api ;_;
22:42 < deoxxa> i'm implementing SAML 2.0 and OAuth 2.0 libraries for work - you've got your work cut out for you if you want to consume XML -properly- in node ;_
22:42 < deoxxa> ;_;
22:43 < jesusabdullah> deoxxa: so do you think I should return some sort of dom to the user, or just give them the raw xml?
22:43 < deoxxa> return a dom, i think
22:43 < jesusabdullah> can you recommend an xml dom lib?
22:44 < deoxxa> unfortunately i've ended up writing my own, since everything out there is kind of quirky in different ways
22:44 < cryptopsy> jesusabdullah: can i have free hosting if i contribute to your project?
22:44 < jesusabdullah> is it open sauce?
22:44 < jesusabdullah> cryptopsy: which project?
22:44 < cryptopsy> jistu
22:45 < deoxxa> jesusabdullah: not at the moment - though it will have to be in the future
22:45 < deoxxa> jesusabdullah: i can't say with any confidence when that will be though
22:45 < cryptopsy> perhaps others, i've worked in an informatics lab, am an expert at mathematics and computer technologies
22:45 < cryptopsy> in north america, not in some third world country
22:45 < jesusabdullah> cryptopsy: I mean, no? We're discussing the possibility of allowing open source and/or non-profit apps to host for free, but that's a little ways out anyway/not finalized
22:46 < jesusabdullah> cryptopsy: but nodejitsu's baby drones are only $3/mo
22:46 < jesusabdullah> cryptopsy: or, will be once billing is on
22:46 < cryptopsy> what do you get for that price?
22:46 < jesusabdullah> cryptopsy: and you get a grace period to try it out for free
22:46 < cryptopsy> i have a trial account now, are the services operational?
22:46 < jesusabdullah> check out http://jit.su there should be a pricing faq there
22:47 < terinjokes> is there a reason fs.watch is still broken on OSX?
22:47 < jesusabdullah> cryptopsy: Yeah, you can deploy stuff for free right now onto baby drones
22:47 < terinjokes> and what can I do to make it work?
22:47 < jesusabdullah> terinjokes: probably? I hear fs.watch is kind of a losing battle
22:47 < cryptopsy> jesusabdullah: what's the difference between micro and large?
22:47 < cryptopsy> what's a drone?
22:47 < terinjokes> jesusabdullah: but why? Ruby does it just fine
22:47 < livinded> terinjokes: you could replace fs.watch with x and it would always have the same answer
22:48 < cryptopsy> jesusabdullah: do we get ddos protection?
22:48 < jesusabdullah> terinjokes: ihnfi, I don't use the fs.watch
22:48 < jesusabdullah> cryptopsy: you can find out what a drone is in the faq
22:48 < cryptopsy> large is the same as micro right?
22:48 < jesusabdullah> cryptopsy: you can also read in the plans information what micro and dedicated entail
22:48 < terinjokes> livinded: no, there's many things done right. I fail to see the reasoning that fs.watch wouldn't work… it's using the same system as everything else on the system, which work correctly
22:49 < cryptopsy> jesusabdullah: where are the details?
22:49 < livinded> terinjokes: I use and break os x on a daily basis
22:49 < chovy> what's the tool for making node app.js run constantly, picking up file changes, etc?
22:49 < cryptopsy> jesusabdullah: i click activate and nothing happens, webkit-gtk-1.8.1
22:49 < livinded> os x is like a very polished senior project
22:49 < livinded> full of awesome ideas but horrible execution
22:49 < jesusabdullah> cryptopsy: http://jit.su/paas/pricing.html
22:49 < jesusabdullah> cryptopsy: http://jit.su/paas/faq.html
22:50 < jesusabdullah> cryptopsy: pricing is not on, those are effectively screenshots
22:50 < cryptopsy> how powerful is a drone?
22:50 < jesusabdullah> cryptopsy: read the links I linked you
22:51 < cryptopsy> i just read the faq
22:51 < jesusabdullah> also read pricing
22:51 < cryptopsy> the pricing page talks about how powerful a drone is?
22:51 < jesusabdullah> yes
22:52 < cryptopsy> pricing.html have different prices than the previous page that had the 3$ figures
22:52 < cryptopsy> now its 48/month for 2 drones in the micro category
22:52 < cryptopsy> your site's all fucked up, and i'm not fucking retarded (i can read)
22:52 < cryptopsy> pricing.html have no details of how powerful your servers are
22:53 < cryptopsy> no mention of processors, ram
22:53 < cryptopsy> right?
22:53 < cryptopsy> maybe i'm really _really_ fucking high right now
22:53 < cryptopsy> but i doubt it
22:53 < cryptopsy> "These plans will be available for purchase in the next month.
22:54 < billycraven> chovy: nodemon is one
22:54 < cryptopsy> ^ is that referring to the expired deadline of July on the previous page?
22:54 < cryptopsy> because July has passed
22:55 < cryptopsy> are you Marak Squires?
22:55 < cryptopsy> is the change in leadership on schedule?
22:57 < chovy> billycraven: 
22:57 < chovy> thanks
22:57 < jesusabdullah> ahhhhh
22:58 < jesusabdullah> a) I'm not responsible for the style of prose in pricing.html, and if it doesn't give specific specs then that information isn't available at this time. b) I don't remember. c) I am not Marak Squires. d) No comment wrt internal Nodejitsu affairs.
23:02 < cryptopsy> not blaming you, asking you for clarification
23:02 < deoxxa> even if cryptopsy isn't, i'm blaming you jesusabdullah. just fyi.
23:02 < deoxxa> not sure what i'm blaming you for
23:03 < cryptopsy> its a small company
23:03 < deoxxa> but i'll figure that out later
23:03 < cryptopsy> whos funding jitsu anyways?
23:03 < deoxxa> for now, just know that you're on the hook
23:04 <@konobi> yo momma
23:04 <@konobi> =0P
23:05 < cryptopsy> what characters are these when i type npm list â âââ 
23:06 < cryptopsy> looks like circumflex 'a' on my screen, but i don't have the codepages installed
23:06 < deoxxa> your terminal is set to non-utf8
23:06 < deoxxa> they're line drawing characters, probably
23:06 < cryptopsy> no shit
23:06 < cryptopsy> ah tnx
23:06 < cryptopsy> linux kernel have no problem drawing lines btw
23:06 < cryptopsy> my terminal is utf8, the codepage is missing
23:06 < deoxxa> ah
23:06  * deoxxa shrug
23:07 < cryptopsy> can node compile in non-utf8 version?
23:07 < deoxxa> that's not really possible
23:07 < cryptopsy> np
23:07 < deoxxa> javascript itself is utf8
23:07 < deoxxa> like, ecmascript says "everything will be utf8, no exceptions"
23:08 < cryptopsy> none of the js functions are utf8, but are utf8 compatible
23:08 < deoxxa> what? yes they are
23:08 < deoxxa> all strings are utf8 in js
23:08 < cryptopsy> one can go a lifetime without encountering utf8 problem such as this in js
23:08 < cryptopsy> hmm
23:09 < deoxxa> you have to remember that ascii fits inside utf8
23:09 < cryptopsy> so you're saying if i define a string 'cats lol', in non-utf compatible browser, wont display properly?
23:09 < deoxxa> so if you're not using any extended characters, you won't notice
23:09 < deoxxa> it's byte-for-byte identical
23:09 < cryptopsy> well yes, then there's no functional difference
23:09 < mscdex> javascript strings are utf-16/ucs2
23:09 < mscdex> i thought
23:09 < deoxxa> but it means you don't have to resort to ugly hacks to support multibye characters
23:10 < cryptopsy> is js compatible with whatever bitplane math symbols are on?
23:10 < deoxxa> mscdex: maybe internally in v8, but i'm like 95% sure ecma specifies utf8
23:10 < mscdex> no i mean ecma
23:10 < BennyLava> mscdex is right.
23:10 < deoxxa> oh?
23:12 < BennyLava> "A conforming implementation of this International standard shall interpret characters in conformance with the Unicode Standard, Version 3.0 or later and ISO/IEC 10646-1 with either UCS-2 or UTF-16 as the adopted encoding form, implementation level 3."
23:13 < BennyLava> http://es5.github.com/x2.html#x2
23:15 < spion_> woah dnode is pretty fast
23:17 < spion_> locally i get 5000 message exchanges per second (exchange = call + callback) on core i5-2450M (2 cores, hyperthreading, 2.5GHz)
23:19 < spion_> maybe i should try more complex messages though
23:22 < etcetera> spion_: now throw in redis or something.
23:22 < etcetera> :-P
23:22 < spion_> i don't know if redis can do it
23:22 < spion_> but the great thing about dnode is that it can serialize cyclic structures.
23:23 < etcetera> hm
23:23 < etcetera> ?
23:23 < spion_> (i mean the default redis client)
23:23 < etcetera> hm?
23:23 < spion_> etcetera, yep, dnode can serialize cyclic objects.
23:23 < etcetera> what does that mean?
23:24 < spion_> >> var x = {}, x.a = x; x;
23:24 < purr> spion_: SyntaxError: Unexpected token .
23:24 < spion_> oops
23:24 < spion_> >> var x = {}; x.a = x; x;
23:24 < purr> spion_: (object) {a: (Circular)}
23:24 < spion_> dnode can handle this
23:25 < spion_> it serializes and deserializes objects with circular references passed as parameters to the RPC call
23:34 < spion_> and additionally, if those objects contain local functions, it serializes those functions as numbered references to the local functions - if the remote server attempts to call them, a "reverse" RPC will happen and they will execute on the client.
23:35 < spion_> the more i dig into dnode the more I'm wowed
23:37 < zomg> spion_: sounds like Aptana Jaxer
23:37 < zomg> lol
23:46 <@konobi> jaxer is gone these days, right?
23:46 < zomg> Pretty much I guess.. haven't heard anything about it for quite a while
23:47 < zomg> I did fiddle with it a bit back in the day, was pretty neat but it never grew into anything
23:47 < zomg> Prolly was too slow and such too
23:51 <@Nexxy> \o konobi 
23:53 <@konobi> hey Nexxy how was the move?
23:56 < cconstantine_> Does anyone have experience with redis/node?  I want to subscribe to events on a client without trashing it's ablity to do querries.  Is there a way to clone that connection?
--- Log closed Mon Sep 17 00:00:30 2012
