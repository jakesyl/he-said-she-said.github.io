--- Log opened Thu Jan 24 00:00:10 2013
--- Day changed Thu Jan 24 2013
00:00 < akkava> you mean to remove http:// or https:// from url?
00:00 < asidjazz> holzp: lol section is a variable in my layout 
00:00 < asidjazz> akkava: NO://
00:00 < context> how did you install node ?
00:01 < akkava> I got the pkg from the website. Mac OS, nothing fancy
00:01 < akkava> I wonder if it might be requiring some library underneath (??)
00:01 < akkava> for dealing with TLS or whatever
00:01 < CoverSlide> it shouldn't
00:02 < CoverSlide> it should all be statically linked
00:02 < CoverSlide> which version?
00:02 < context> it should have been compiled with it
00:02 < context> akkava: are you sure you didnt accidentaly do: var https = require('http')
00:03 < akkava> checked, no, it's http and https (each to its own)
00:03 < akkava> I got the latest version, just today - Mac OS is 10.6.8
00:04 < cloudbender> TehShrike|work The installer gets to 99.99% progress, and begins a rollback, then shows it's error notification as follows;
00:04 < cloudbender> ...
00:04 < cloudbender> Node.js Setup Wizard ended prematurely ... Node.js Setup Wizard has ended prematurely becuase of an error.  Your system has not been modified.  To install this program at a later time, run Setup Wizard again.  Click the Finish button to exit the Setup Wizard.
00:04 < CoverSlide> isn't there a .zip of node you can use?
00:04 < TehShrike|Work> cloudbender: check the error log?
00:05 < cloudbender> Do you have a file name ?
00:05 < akkava> CoverSlide: hold on, I think it might have been another problem, I'm running it again 
00:05 < context> akkava: run: node -e "https = require('https'); https.get('https://zro.net');"
00:05 < context> i guess you dont have to do that with https :/
00:05 < akkava> sorry, it was a typo on my side, instead of checking for protocol == 'https:' I was comparing with 'https://'
00:06 < cloudbender> brb doorbell
00:06 < akkava> so I was using http instead of https. All is right with node! node is great yay!
00:06 < akkava> many thanks!
00:07 < CoverSlide> oh the perils of windows
00:07 < CoverSlide> cloudbender: http://thebackroomtech.com/2007/08/23/howto-extract-files-from-a-msi-file-using-the-windows-command-line/
00:08 < asidjazz> is there any easy way to detect the side of an object in jade
00:09 < asidjazz> size*
00:09 < CoverSlide> the size of an object?
00:09 < asidjazz> yea similar to .length
00:09 < asidjazz> w/out doing a lame forloop w/ ispropertyof or wheatever
00:10 < cloudbender> looking ...
00:10 < superjoe> substack, you should have a web interface to difflet, because I'm lazy
00:10 < TehShrike|Work> asidjazz: you probably want Object.keys(obj).length
00:10 < asidjazz> thanks TehShrike|Work 
00:10 < TehShrike|Work> asidjazz: or something similar
00:10 < TehShrike|Work> asidjazz: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object#Methods
00:11 < asidjazz> TehShrike|Work: i cant do this stuff in some browseres can i.. this is newer ecmascript isnt it
00:11 < CoverSlide> .keys is shimmable, but it uses for in
00:12 < TehShrike|Work> asidjazz: I use https://github.com/kriskowal/es5-shim
00:14 < asidjazz> TehShrike|Work: interesting
00:15 < asidjazz> TehShrike|Work: how is all this js w/ client load
00:16 < TehShrike|Work> You mean in terms of bytes transferred?
00:16 < devnill> Whats a good way to handle restarting a node server when it crashes? 
00:16 < TehShrike|Work> asidjazz: I write a pretty thick client app that users rarely refresh, I don't have to bother much about that.  But the shims are pretty small compared to the bulk of the rest of my code
00:17 < substack> while true; do node server.js; done
00:17 < substack> or there's forever
00:17 < devnill> heh, thats what i've seen
00:17 < TehShrike|Work> devnill: I hear people use https://github.com/nodejitsu/forever
00:17 < substack> there's also system-level upstart
00:17 < devnill> I'll check that out, thanks
00:17 < superjoe> devnill, there's also https://github.com/indabamusic/naught
00:17 < asidjazz> TehShrike|Work: why dont you?
00:17 < devnill> I feel somewhat dirty with a while loop
00:18 < CoverSlide> asidjazz: 40k unminified, 11k minified, 3k gzipped
00:18 < asidjazz> CoverSlide: lines of code isnt exactly load
00:18 < asidjazz> CoverSlide: i mean thing slike checking every function call in js.. like the begining of this
00:18 < TehShrike|Work> asidjazz: just haven't gotten to a position where it was necessary yet, though I'm getting there pretty quickly I think
00:18 < CoverSlide> i'm telling you the bytes, not loc
00:19 < TehShrike|Work> asidjazz: You're asking about performance?
00:19 < TehShrike|Work> asidjazz: I'll just say this: I'm deploying this webapp to hardware worse than anything your users will ever be running, and it hasn't been an issue :-P
00:19 < CoverSlide> if people are using a shitty browser, performance is the least of their problems
00:22 < cloudbender> ok I need to run it again to get a timestamp for the log file
00:25 < mdedetrich> does anyone here use the library async?
00:26 < TehShrike|Work> I looked at it
00:26 < mdedetrich> Im wondering if async.forEach fails (like an async error fails and the err is defined) will it immediately halt the execution chain
00:26 < TehShrike|Work> But then I got reasonable at managing callback hell
00:26 < mdedetrich> or will it still continue and execute everything in the collection
00:26 < mdedetrich> TehShrike|Work: how do you manage it?
00:27 < TehShrike|Work> Name functions well, lay them out in front of each other in the code instead of having them all be function literals in my calls
00:27 < TehShrike|Work> http://callbackhell.com/
00:28 < mdedetrich> well that stuff is only really applicable for waterfall situations
00:28 < TehShrike|Work> How do you mean?
00:29 < mdedetrich> I use async mainly for async.parallel, async.forEach, async.map etc etc
00:29 < mdedetrich> and async.queue
00:30 < holzp> async is awesome
00:30 < mdedetrich> by waterfall I mean basic currying of functions which is what is described on that site
00:30 < mdedetrich> holzp: do you know if when async.forEach fails, will it stop executing the rest of the async functions?
00:30 < holzp> i do not, why not make a test
00:31 < mdedetrich> yeah, I suppose so, but im kinda lazy
00:31 < TehShrike|Work> mdedetrich: oh, sure.  I just assumed your usage because that's why most people turn to the library it seems
00:32 < TehShrike|Work> Now I'm curious, what's the common use case for an async forEach like that?
00:33 < holzp> running an async loop?
00:33 < mdedetrich> iterating over an array in parallel
00:33 < TehShrike|Work> well... but why?  It's not like I've ever done anything synchronous in a forEach that was more than a few lines
00:34 < mdedetrich> performance?
00:34 < mdedetrich> if you need to make an request over every item in an array
00:34 < TehShrike|Work> Your JS runs in a single thread
00:34 < mdedetrich> you should do it asynchronously
00:34 < TehShrike|Work> In node, and in every browser (I think)
00:34 < mdedetrich> I didn
00:34 < mdedetrich> I didn't mean performance that way
00:34 < mdedetrich> If you have an array, lets say a list of links
00:34 < andrepadez> hi, using jade: -console.log(owners[i]._id, obj.owner, owners[i]._id == obj.owner);      get two equal values and false
00:34 < mdedetrich> and you want to make a request on every single one of those links
00:34 < andrepadez> does anyone understand this?
00:35 < mdedetrich> you would do async.forEach, because its all done asynchronously (or parallel)
00:35 < TehShrike|Work> mdedetrich: sure, but that request should be done asynchronously anyway, right?
00:35 < mdedetrich> well you have to code a way to get back the results
00:35 < CoverSlide> actually i would use async.queue
00:35 < mdedetrich> and do some manual binding
00:35 < mdedetrich> which is annoying
00:36 < TehShrike|Work> mdedetrich: you pass in to the foreach your function(value) { doAsyncStuff(value, function(result) { doStuffToResult(result) }) }
00:36 < TehShrike|Work> You're talking about avoiding that?
00:36 < mdedetrich> right, and now implement a queue
00:37 < TehShrike|Work> I'm sorry, I don't get your meaning
00:37 < mdedetrich> CoverSlide: it depends on what you are saying
00:37 < TehShrike|Work> I feel I may be missing something
00:37 < CoverSlide> a queue would be easy to write. i made one just the other day, but can't for the life of me find it
00:37 < mdedetrich> TehShrike|Work: thats a trivial case
00:37 < mdedetrich> have a look at this
00:37 < mdedetrich> https://github.com/caolan/async#queue
00:37 < mdedetrich> CoverSlide: thats true, but you end up creating a lot of boilerplate
00:38 < mdedetrich> and your code becomes messy
00:38 < TehShrike|Work> So this is to run async things that will end up "finishing" in the same order?
00:39 < mdedetrich> you create a queue which is a function, then you push items on the queue and it does stuff
00:39 < TehShrike|Work> ah, ok
00:39 < TehShrike|Work> I've done that
00:40 < mdedetrich> oh of course you can code a queue manually, its not that hard
00:40 < TehShrike|Work> right
00:40 < mdedetrich> its just that the intention of your code isn't so clear
00:40 < mdedetrich> its incredibly obvious what your code is doing when you do something like async.parallel
00:40 < TehShrike|Work> So you're just using it as a generalized implementation of that sort of data structure?
00:40 < mdedetrich> it means that you are running some tasks in parallel
00:41 < mdedetrich> im using it to make control flow incredibly obvious, thats what makes async nice
00:41 < mdedetrich> I can see what is running in parallel, what is running one after another (series) and what happens when they finish
00:41 < cloudbender> TehShrike|work The Only log files impacted were three Avast Antivirus log files, but the indicators are cryptic
00:42 < mdedetrich> what that site describes to fix callback hell may fix callback hell, but then you end up jumping around function definitions all the time
00:42 < cloudbender> I will try it with Avast turned off
00:42 < TehShrike|Work> mdedetrich: sure, I just pasted that link based on an incorrect assumption of why you were using async
00:42 < CoverSlide> I've heard of node setting off some antivirusy stuff
00:42 < andrepadez> hi, using jade: -console.log(owners[i]._id, obj.owner, owners[i]._id == obj.owner);      get two equal values and false
00:42 < andrepadez> does anyone understand this?
00:42 < TehShrike|Work> mdedetrich: would you be willing to paste some code you think was made clearer with the use of the async library?  I'm honestly interested
00:43 < mdedetrich> if all of your code is waterfall, then doing something like that may work, but im writing a website and the backend code is much less trivial (mainly for performance reasons)
00:43 < mdedetrich> andrepadez: it may be an issue with javascripts retarded type system
00:43 < TehShrike|Work> My backend code hasn't been too bad so far, as long as I segment my modules reasonably
00:43 < mdedetrich> TehShrike|Work: im finishing some code now, gimme a sec
00:44 < andrepadez> but i'm using == , not ===
00:45 < mdedetrich> well we can't really help when we don't know what the underlying data is
00:45 < mdedetrich> but javascripts type system is retarded, especially when dealing with equality
00:45 < CoverSlide> type inference in general is retarded
00:46 < TehShrike|Work> ^
00:48 < mdedetrich> TehShrike|Work: do you know coffeescript
00:48 < CoverSlide> :o
00:48 < CoverSlide> you said the C word!
00:48 < mdedetrich> CoverSlide: oh yeah, js's type system is one of the most epically retarded things I have seen
00:48 < TehShrike|Work> Nah, I've stuck to the way of the traditionalist so far
00:48 < cloudbender> TehShrike|work I'm rebooting with User Account Controls disabled brb
00:48 < mdedetrich> well i can convert it to JS then
00:48 < mdedetrich> no biggy
00:49 < mdedetrich> although the resulting code is really ugly
00:49 < timeturner> I get this in chrome sometimes: Resource interpreted as Document but transferred with MIME type application/json
00:49 < TehShrike|Work> heh
00:49 < TehShrike|Work> Well, that might make it difficult
00:49 < timeturner> sending json as an ajax response but chrome renders it out as json on the html
00:49 < TehShrike|Work> You may as well pastebin the CS, I can fake my way through it
00:49 < TehShrike|Work> timeturner: wat
00:50 < mdedetrich> TehShrike|Work: https://gist.github.com/4616438
00:50 < timeturner> I do a GET ajax request to express
00:50 < andrepadez> mdedetrich: thanks, i''l see about it
00:50 < timeturner> right after getting the html for the page
00:50 < timeturner> but sometimes when I refresh the page
00:50 < mdedetrich> thats a nice example, it shows mixing waterfall and parallel all the time, to try and make the request as fast as possible
00:51 < timeturner> the html doesn't show up and I get the json response from the ajax request rendered out on the page instead
00:51 < timeturner> it's like a weird chrome dev bug
00:51 < timeturner> I suppose
00:51 < timeturner> at least that's what SO says
00:51 < timeturner> http://stackoverflow.com/questions/6934393/resource-interpreted-as-document-but-transferred-with-mime-type-application-jso
00:54 < TehShrike|Work> mdedetrich: the main advantage I see is the conglomeration of error checking/response?
00:56 < mdedetrich> TehShrike|Work: that and, its very obvious whats in parallel and whats in series
00:56 < mdedetrich> TehShrike|Work: like you can do some database requests in parallel if they don't conflict with eachother
00:56 < mdedetrich> and when you do async.parallel, its obvious what is in parallel
00:56 < raj> is it dangerous to save the sockjs session id to a cookie?
00:56 < cloudbender> TehShrike|Work I tried it with UAC turned off but no help
00:56 < cloudbender> I did notice something though
00:57 < cloudbender> The download is named node-v0.18-x86.msi but ...
00:57 < mdedetrich> like in that code, I can the user to the database at the same time I clean up the user from the pending database
00:57 < mdedetrich> I can the user to the database
00:57 < mdedetrich> *I can add user to the database
00:57 < cloudbender> the UAC dialog asked me to allow 2db0F5.msi to install
00:58 < cloudbender> er, 2db0f5.msi
00:59 < cloudbender> It could just be this old laptop.  It only has 512k ram.
00:59 < CoverSlide> 512k?
01:00 < cloudbender> er 512mb
01:00 -!- isaacs changed the topic of #Node.js to: Node.js - THE MARCH TO 0.10 CONTINUES! https://github.com/joyent/node/wiki/Api-changes-between-v0.8-and-v0.10 ~ http://logs.nodejs.org/node.js/
01:01 < CoverSlide> brings new meaning to "640k should be enough for evverybody"
01:01 < cloudbender> 640k was a number shosen to protect mainframe sales
01:05 < cloudbender> Is there another package I could try ? ( that would not make a person look bad ?) :)
01:05 < cloudbender> brb
01:06 < cloudbender> It's windows vista basic btw
01:06 < CoverSlide> ew
01:06 < cloudbender> celeron
01:06 < CoverSlide> EW
01:07 < cloudbender> everex systems
01:07  * CoverSlide tastes bile
01:07 < cloudbender> lol
01:11 < cloudbender> ok I'm gonna get some supper, if you want to press it more no problem later/tommorow I'm not going anywhere til saturday.
01:14 < Somelauw> I'm using chimero and trying to close my script using c.close(), but that doesn't stop the script from running.
01:18 < andrepadez> hi, (using mongoose): https://gist.github.com/4616522  can someone  help me please?
01:19 < isaacbw> you have to say what your problem is
01:19 < isaacbw> oh, nvm
01:19 <@Nexxy> mscdex, pong
01:20 <@Nexxy> othiym23, I'm guessing someone mentioned that there's already a nodepdx conference, ya?
01:22 < othiym23> Nexxy: yeah, jerrysv said he'd get in touch with Ben and raise the name collision with him
01:23 < othiym23> Nexxy: who runs nodepdx: The Conference?
01:24 <@Nexxy> othiym23, I'm not sure who exactly runs it but I know @thoward37 is one of the organizers
01:26 < durango> does anyone know of a good queuing system that does *not* rely on redis?
01:26 < durango> or beanstalkd preferbably plain node
01:27 <@Nexxy> durango, async?
01:28 <@Nexxy> https://github.com/caolan/async#queue
01:28 < durango> well i need something that constantly can get items into the queue and then proceeds to the next one once its done
01:28 < durango> this one doesn't really do that does it? O_o
01:28 <@Nexxy> O_o
01:28 < CoverSlide> you mean like a job queueing system?
01:28 < durango> sure
01:28 < durango> probably best to use gearman or redis ya? :/
01:29 <@Nexxy> lol
01:29 < CoverSlide> well there's kue but that uses redis
01:29 < CoverSlide> why the aversion to redis?
01:29 < durango> the less dependencies the better tbh
01:29 < durango> bah i guess i could just use kue :/
01:29 <@Nexxy> but async is insufficient?
01:29 <@Nexxy> ah huh.
01:37 < andrepadez> hi, (using mongoose): https://gist.github.com/4616522  can someone  help me please?
01:44 < mscdex> Nexxy: no worries now, someone was spamming the channel earlier this afternoon but they got k-lined :-)
01:53 < therealkoopa> substack: Can you point me to something that describes paths within browserify? I am trying to do a require('./app') from within a html page, and it can't find the module. If I just load everything from within the bundle, it finds it.
01:54 < othiym23> is there a coverage tool for node that will actually give me caller information in the output?
01:55 < othiym23> a callout with a list of call sites would be ideal
01:57 < durango> Anyone here use kue?
01:57 < durango> i keep getting an error.. "has no method 'slice'"?
01:57 < sdoowpilihp> are you trying to run slice on something other than an array?
01:58 < therealkoopa> substack: Ah, I see require.modules gave me the answer. I need to clean this up so I don't need assets/js everywhere. I'm guessing it's possible to change things similar to how node_path works.
02:03 < durango> sdoowpilihp: no just an array
02:03 < durango> although im running splice
02:03 < durango> not slice
02:05 < durango> sdoowpilihp: im trying to spawn an exec though
02:06 < durango> which might be causing problems yeah?
02:14 < caffo> Hey guys, any ideas why when I try to install a package using npm (and the package is hosted on github) the clone action is interrupted by a "Connection reset by peer" error but when I clone it manually in the command line it works?
02:15 <@Nexxy> mscdex, \o/ sweet
02:15 <@Nexxy> mscdex, also you can ping me on twitter if it's urgent and I'm not responding on IRC
02:15 <@Nexxy> caffo, try `npm cache clean` ?
02:16 < caffo> Trying it. 
02:16 <@Nexxy> I'm not sure if any of that is actually cached but
02:21 < caffo> It worked. I have no idea how, but it worked :)
02:21 < caffo> thanks Nexxy
02:23 <@isaacs> caffo: what version of npm?
02:23 <@isaacs> caffo: and what module?
02:28 < zivester> are there any reserved keywords in express for res.locals?  like... 'attributes' ?
02:29 < timeturner> settings I think
02:29 < timeturner> other than hat now
02:29 < timeturner> that no*
02:30 <@Nexxy> caffo, great!
02:30 <@Nexxy> glad I could help
02:34 < Cyranix> node newbie here -- i installed on fedora 18 with "sudo yum --enablerepo=updates-testing install nodejs" but don't seem to have npm. expected problem? easy solution?
02:38 < zivester> something weird happening with express + jade + mixins... res.locals.attributes is only valid in the main template, and not within the mixin... renaming it to something other than 'attributes' works fine
02:40 < therealkoopa> If I'm using browserify and I have a module with modules.exports = new Foo, it should always return the same one, right? For some reason, this isn't true with browserify
02:49 < switz> hey, so I'm building a node app, and I'm trying to have people be able to login to multiple accounts (even from the same social network). anyone know if passport or everyauth are compatible with this?
02:51 < asidjazz> is there methodology in stylus to just make -webkit- and -moz- for me when i do stuff like transform: rotate(90deg) ?
02:54 < mscdex> Nexxy: i don't have/use twitter :S
02:55  * Nexxy snickers
02:59 < TehShrike|Work> "Look at that guy!  He's barely even on the internet!"
03:00 < SomeoneWeird> lolol
03:01 < TehShrike|Work> Just kidding mscdex github is totally plenty of internet
03:01 < TehShrike|Work> You're only missing out on everyone else talking about you!
03:03 < caffo> isaacs: was the derby module, npm version 1.2.2
03:07 < mscdex> TehShrike|Work: i'd rather focus on getting more stuff done anyway ;-)
03:08 < TehShrike|Work> FINE, go be useful to the world, or whatever! ;-P
03:11 <@isaacs> Raynos: i have proof that a negative drain counter is fine.
03:11 <@isaacs> Raynos: wrote a test verifying this.
03:11 < Raynos> isaacs: did you break my "handle backpressure correctly" test? :D
03:11 <@isaacs> no
03:12 <@isaacs> all tests are passing
03:12 < isaacbw> how can I give a body element a class in jade
03:12 < isaacbw> or custom attributes
03:12 < isaacbw> jdfslfhdslfkjdshfkjash
03:12 < isaacbw> jade makes my mind melt
03:12 <@isaacs> what happens is that if you have a awaitDrain counter value of -N, yo'ull get N extra writes to the writers
03:12 < TehShrike|Work> Man, lots of Jade questions today
03:12 <@isaacs> Raynos: but that's fine.  they'll just return false, and then increment awaitDrain by doing so
03:12 < isaacbw> I'm working on someone else's project and I don't understand any of this stuff :(
03:12 <@isaacs> Raynos: and it'll come back to 0
03:13 < woah> body.class
03:13 < isaacbw> woah, how about custom attributes
03:13 < isaacbw> does jade let you do that?
03:13 < woah> http://naltatis.github.com/jade-syntax-docs/#id-classes
03:13 < isaacbw> like, non-html attributes
03:13 <@isaacs> Raynos: if you're piping to more legacy dests than you can handle data in-memory, then fine, yor'e boned.  but that's super crazy.
03:13 < woah> body(class="class")
03:13 < isaacbw> so I could do body(randomAttribute="something")?
03:18 < AlphaPinky> I´m really new to Node.js, learned about it today an hour ago. From the website I read ¨Node.js is a platform built on Chrome's JavaScript runtime¨, does it mean it is restricted to Chrome?
03:18 < isaacbw> it worked
03:18 < isaacbw> AlphaPinky, no
03:19 < isaacbw> the Chrome team wrote an extremely fast javascript interpreter called V8, which is distributed as a standalone library for embedding in other applications
03:19 < isaacbw> Node uses that library to execute javascript
03:19 < isaacbw> http://code.google.com/p/v8/
03:20 < TehShrike|Work> AlphaPinky: you can think of node.js as a JavaScript interpreter, with some cool cross-platform libraries added in for your JavaScript code to access
03:21 < AlphaPinky> Is it supposed to be used in servers?
03:21 < AlphaPinky> I think that is the thing I am missing.
03:21 < TehShrike|Work> You can use it lots of places
03:21 < isaacbw> it is designed with servers in mind
03:21 < isaacbw> but you can do whatever you want with it
03:21 < isaacbw> think of it like python or ruby
03:21 < TehShrike|Work> Many people do write servers with it
03:21 < isaacbw> it's just a way to execute pure javascript programs
03:21 < TehShrike|Work> I do
03:21 < TehShrike|Work> I've also written command-line tools with it
03:21 < ravisarma> Hello all newbie question: I am using Node+cluster+express and trying to use the v8-debugger/profiler using node --debug mycluster.js, and that's failing because (I am guessing) the controller and worker are trying to bind to the debug port, so there are a lot of errors/warnings about being unable to bind to port 5858. Surely I am missing something here...
03:22 < isaacbw> the standard libraries are focused on server utilities
03:22 < AlphaPinky> thanks. I think this is really what I need.
03:22 < TehShrike|Work> (and file system access)
03:22 < ravisarma> Speaking of writing anything with node: someone, jwz?, wrote that he tried to convince Eich to support #!/usr/bin/javascript… (or now #!/usr/bin/node). :-)
03:23 < AlphaPinky> I´ve set myself this year to do an online multiplayer game that is scalable. I am considering doing it using JS/HTML5 for learning purposes.
03:23 < isaacbw> welp
03:23 < AlphaPinky> welp?
03:24 < ravisarma> Anyone? Any thoughts on my node --debug port binding issue (when using Cluster), please?
03:24 < AlphaPinky> thanks for info. Ill read the docs. It´s going to be fun! :D
03:24 < TehShrike|Work> AlphaPinky: what kind of game? 1v1?  Turn-based?  How many per-game?
03:24 < AlphaPinky> sth like Dota 2.
03:24 < AlphaPinky> just for learning purposes.
03:25 < TehShrike|Work> STH?
03:25 < AlphaPinky> something.
03:25 < TehShrike|Work> ah.
03:25 < gehko> ravisarma, sounds like a port confluct
03:26 < AlphaPinky> I´d like to make it able to be played simultaneously by several players. Like 5x5 would be fine.
03:26 < ravisarma> Yep. Because the worker and cluster controller are both binding to it I guess? I do not quite clearly understand how Cluster works, yet
03:26 < gehko> how are you setting up the listener?
03:27 <@mbalho> hmm why doesnt browserified require('path') have .relative?
03:28 < ravisarma> gecko, working with some inherited code here, so let me see if I can answer your question correctly...
03:29 < ravisarma> I have: var cluster = require('cluster');
03:29 < ravisarma> if( cluster.isMaster ) { …. } else {  var express = require('express'); …. }
03:30 < gehko> ravisarma, you should have a server.listen somwhere
03:30 < MI6> joyent/node: isaacs created branch object-streams - http://git.io/0jxVVQ
03:30 < ravisarma> Ah that listener, sorry...
03:31 < ravisarma> It comes in that else { } part above
03:31 < TehShrike|Work> harthur: I'm sorry about your open source experience.  It's reminiscent of some of my fears, except my modules probably wouldn't have been actually useful
03:32 < cloudbender> hi
03:32 <@mbalho> substack: does browserify 1.17.2 include this commit? https://github.com/substack/node-browserify/commit/dcdd1d1ce2e2dbe65c6b1af3f1deaeb97b6629c1
03:33 < ravisarma> It seems to me that what is happening is this: I run node --debug mycluser.js, which forks off a worker, invoking another node --debug to run the worker. The second node --debug fails to bind to port 5858 (for obvious reasons).
03:33 < gehko> cloudbender, neat nick
03:33 < cloudbender> thank you gehko
03:33 < ravisarma> But then others would have come across this and solved it, so I am clearly missing something...
03:33 < cloudbender> I thought of using cloudpuffer
03:33 <@mbalho> substack: nevermind, yes it does
03:33 < gehko> ravisarma, paste the js to pastebin
03:34 < cloudbender> but then people might imagine me in slippers and geniepants
03:34 < pac3> QUIT
03:34 <@Nexxy> NEVER
03:35 < gehko> cloudbender, or an ent
03:35 < cloudbender> no, it's not from the movie.
03:35 < cloudbender> I've never sen the movie.
03:35 < cloudbender> dang seen
03:35 < gehko> cloudbender, no like r/trees
03:36 < Raynos> isaacs: if you say so. then it's fine.
03:36 <@isaacs> Raynos: reviewwwwwww!!! https://github.com/joyent/node/compare/d6c24fcc612c%5E...00295e3af611
03:36 < cloudbender> Oh I see. No....
03:36 < gehko> ;)
03:38 < Raynos> isaacs: https://github.com/joyent/node/compare/d6c24fcc612c%5E...00295e3af611#L1R300
03:38 < Raynos> what if chunk === null && state.objectMode
03:38 < cloudbender> The nick 'gehko' has a familiar ring to it also. ;)
03:39 <@isaacs> Raynos: good call.
03:39 <@isaacs> Raynos: though, technically, you'er reviewing your own code now ;)
03:39 < Raynos> :D
03:40 < TehShrike|Work> gehko: http://youtu.be/UWHEcIbhDiw
03:40 <@isaacs> Raynos:   if (chunk || (state.objectMode && chunk !== undefined && chunk !== null)) {
03:41 < Raynos> yes that ^
03:41 < gehko> TehShrike|Work, love it
03:41 <@isaacs> k
03:42 < Raynos> isaacs: what's Writable.write(null) supposed to do?
03:42 < MI6> joyent/node: isaacs object-streams * 91beed9 : test: Add test for negative stream drain counter (+2 more commits) - http://git.io/Ln0q2w
03:42 <@isaacs> Raynos: i don't know.
03:42 < Raynos> other then pretend its an object stream containing the object null
03:43 < Raynos> the rest looks fine
03:43 <@isaacs> hm.  i'm not sure what write(null) should do
03:43 < Raynos> well either treat it like ""
03:43 < gehko> Writeable.write(null) == noop()
03:43 < Raynos> or object stream mode
03:43 < Raynos> well as of the patch isaacs linked it actually switches the stream into object mode
03:44 < durango> does anyone know of a good way to benchmark certain aspects of my code?
03:44 < Raynos> isaacs: consider checking for `chunk !== null && chunk !== undefined` to not switch into object mode, for back compat if needed
03:44 <@isaacs> Raynos: yeah, that's a good idea
03:44 < durango> i have a part in my code thats slooooow i just need to know *how* slow
03:44 < Raynos> i wonder how many people assume write(null) is a noop
03:45 < Raynos> isaacs: maybe we should also have some kind of way to say "THIS STREAM CAN NEVER BE AN OBJECT STREAM. PLEASE DO NOT SWITCH INTO ONE IF I MAKE A MISTAKE"
03:45 < MI6> joyent/node: isaacs object-streams * 731b597 : test: Add test for negative stream drain counter (+2 more commits) - http://git.io/EY6Uog
04:04 <@isaacs> Raynos: ^ lgty?
04:12 < durango> Anyone here know how I can possibly manage 30+ images? I'm just trying to do a convert on all o fthem and it *must* be separate.. for some reason my machine can do it no problem but in node its a lot slower (even when trying ot just exec)
04:13 < tjfontaine> durango: I'm not sure entirely your use case, but something seems off
04:14 < durango> tjfontaine: yeah it definitely is :/ im going to use node profile to see (its draginx btw)
04:15 < tjfontaine> ya i whois'd you earlier
04:15 < durango> :)
04:15 < TehShrike|Work> hot.
04:16 < tjfontaine> durango: what do you mean when you say "handle 30+ images"
04:16 < durango> well i need to get the DPI, width, and height of each image, then I need to convert each image as well
04:16 < durango> i need to convert each image individually since I need to associate them with the original filename (its a thumbnail)
04:17 < tjfontaine> durango: are you generating thumbnails on upload or on access?
04:17 < durango> on upload
04:18 < durango> which I have to do .. since it's a cart system
04:18 < durango> otherwise this would all be easy and id just delay it :)
04:19 < tjfontaine> durango: and so far you're just doing it in the main process and not doing any child procs?
04:19 < durango> tjfontaine: well im using child_spawn.exec
04:19 < durango> for each convert process
04:19 < durango> in the identify process I can at the very least pipe X images at a time
04:19 < durango> (atm it's 5)
04:19 < tjfontaine> ouch.
04:20 < durango> tjfontaine: yeeeeaaah
04:21 < tjfontaine> why not have a pool of 5 workers with the imagick stuff, that at least saves you the create/teardown of each of those processes
04:21 < durango> would ur module work better?
04:21 < tjfontaine> durango: well, there's a certain amount of overhead involved with creating a process for every one of those files
04:21 < durango> tjfontaine: well i would still be waiting on the convert no?
04:21 < durango> right
04:22 < durango> i mena is there a module i can use to make this easier..? Or would I use something like axon and then make a sink
04:22 < tjfontaine> I don't think anything more than process.on('message') and process.send() is necessary really
04:23 < tjfontaine> durango: for testing I would start with single-proc and my imagick stuff, see if that is any better than the .exec model, if not a pool of 5 workers doing imagick
04:26 < durango> tjfontaine: the problem is.. I need a "product_id" before insetting the items
04:27 < durango> i get the product_id by comparing print_x and print_y (resolutions)
04:27 < durango> fml this is all insane
04:27 < tjfontaine> I don't really want to get into your implementation details, I'm just trying to keep it high level :)
04:33 < durango> tjfontaine: right i understand but going to high is to abstract sometimes
04:43 < styol> Anyone familiar with a module or have an idea how to conceptually go about EventEmitters that can allow emitted arguments to be mutated and returned somewhere? Perhaps its not possible, but something along the lines of -- events.on('foo', function(bar){ bar.modified = true; events.emit('foo_mutated', bar); }); events.on('foo_mutated', function(bar) { console.log(bar); }); // foo_mutated would need to wait until all mutations were
04:43 < styol> received though before continuing
04:44 < SomeoneWeird> emit a callback too
04:44 < SomeoneWeird> then you dont have to emit foo_mutated
04:44 < styol> Actually, would be better without needing to emit 'foo_mutated' and instead emit 'foo' again so that the next listener could receive the previous modifications
04:44 < styol> oh.. hmm!
04:46 < styol> SomeoneWeird: i see what you're saying indeed, and you could use emitter.listeners() to get a list of all listeners.. providing each listener with the previous modification probably isn't possible though, yeah?
04:47 < SomeoneWeird> mmm
04:47 < SomeoneWeird> not quite sure
04:47 < styol> like 3 listeners and an argument starting at 0, ending up as 3 at the end point
04:48 < SomeoneWeird> yeah I know what you mean
04:50 < styol> perhaps something involving removeListener or removeAllListeners
04:52 -!- mode/#Node.js [+o TooTallNate] by ChanServ
04:54 < styol> emit > save list of all listeners > removeAllListeners > call next listener > pass all listeners to next emit > lather, rinse, repeat
04:55 < styol> err, call next listener / pass all
04:56 < alxFradiani> Hi
04:58 < brianc> test
04:58 < styol> hello alxFradiani
04:58 < brianc> question
04:58 < brianc> having a problem building node-postgres on v0.9.x
04:58 < TehShrike> brianc: do I know you from #mysql?
04:59 < brianc> when I try to require the file it says "Symbol binding_module not found."
04:59 < brianc> TehShrike: nope, you know me from here. *high five*
04:59 < TehShrike> Oh snap!
04:59 < TehShrike> *ultra-high-five*
05:00 < alxFradiani> just starting to join the node.js community, very excited about this tool
05:01 < brianc> anyone got any halp for a native module compile problem on v0.9.x?
05:01 < TehShrike> alxFradiani: we like long walks on the beach, and JavaScript
05:03 < alxFradiani> cool
05:03  * CrawfordComeaux is a node n00b trying to finish a social media dashboard for the Super Bowl press room within the next 16 hours, needs immediate help, will pay & credit you to the 5000 journalists viewing the app.
05:03 < TehShrike> heehee
05:03  * CrawfordComeaux hangs his head and sobs a little
05:03 < sohcahtoa> u fucked bro
05:04 < TehShrike> Ask specific questions, I'm buzzed, but willing to try to be useful
05:04 < sohcahtoa> hah what you partaking in TehShrike?
05:04 < steve__> when installing packages you can save to package.json using 'npm install -S <package>'. Is there a way to update an install package to the latest version and also update package.json?
05:04 < sohcahtoa> I have some bourbon in my glass
05:04 < CrawfordComeaux> I'm able to manage...just too slow
05:04 < TehShrike> A good local altbier until the last hour, then I took a couple of fingers of rum home with me
05:04 < CrawfordComeaux> https://trello.com/b/2ivdXQkO  <----what's left to do
05:05 < sohcahtoa> when is the superbowl
05:05 < TehShrike> That's a lot of things to do in 16 hours
05:05 < brianc> BOURBON
05:05 < sohcahtoa> yes BOURBON!
05:05 < TehShrike> bourbon is nice
05:05 < brianc> IT IS IN ME
05:05 < TehShrike> Which bourbon, out of curiositiy?
05:05 < sohcahtoa> I counted up my whiskey bottles today
05:05 < sohcahtoa> 80
05:05 < brianc> srsly anyone doing native module development here? hitting an epic snag
05:05 < brianc> makers
05:06 < sohcahtoa> Very Old Barton 86 proof
05:06 < TehShrike> I'm not a picky whiskey drinker, makers mark does me well
05:06 < Lorentz> if you can actually still count the number of bottles, you didn't drink enough
05:06 < sohcahtoa> I do not like makers
05:06 < CrawfordComeaux> TehShrike: yeah...that's why I'm in here begging
05:06 < TehShrike> CrawfordComeaux: is all the code on github?
05:06 < sohcahtoa> I counted it when I wasn't drinking
05:06 < sohcahtoa> just organizing shit into families
05:06 < Lorentz> >wasn't drinking
05:06 < brianc> Symbol binding_module not found. #halp
05:06 < Lorentz> that there is a problem
05:06 < CrawfordComeaux> TehShrike: https://github.com/crawfordcomeaux/superdash
05:06 < sohcahtoa> wild turkey shelf, rye shelf, Weller shelf
05:07 < TehShrike> I try to stick to beer, myself
05:07 < sohcahtoa> Buffalo Trace shelf
05:07 < TehShrike> But you can't resist all whiskeys
05:07 < cloudbender> Wiser's Deluxe, baby
05:08 < sohcahtoa> I have 15 ryes, 1 scotch, 1 irish, couple "american whiskeys" and rest is bourbon.
05:08 < sohcahtoa> one american institution I fully support
05:08 < sohcahtoa> well 2, bourbon and rye.
05:09 < cloudbender> And I like Kokanee, Becks, Romer pils, and Heineken
05:09 < TehShrike> I avoid stuff from the conglomerates nowadays
05:10 < TehShrike> If it's Anheuser-Busch, SABMiller, or Heineken, I try to avoid
05:10 < cloudbender> Well, what ya gonna do.  This is Canada, and even cheap beer is $12.00 per sixer
05:10 < styol> SomeoneWeird: just out of curiosity, any idea what that would even be called?
05:10 < TehShrike> cloudbender: That does suck
05:10 < cloudbender> yup
05:10 < TehShrike> cloudbender: how's the local brewing there?
05:11 < TehShrike> cloudbender: it varies from state to state here
05:11 < TehShrike> Depending on legislation
05:11 < cloudbender> Pretty good-ish.
05:11 < TehShrike> It's about in the middle in my state (Nebraska)
05:12 < TehShrike> There are some states with way better brewing communities, and some with pretty much nothing - but there are 6+ breweries here in-state selling their wares on store shelves
05:12 < TehShrike> And a decent number of breweries in other states who distribute to here
05:13 < cloudbender> I really don't drink enough to worry about it.  Winnipeg hs the 'River City Brewing Company' and they put out a nice line.
05:13 < TehShrike> Out of principle, I avoid http://en.wikipedia.org/wiki/SABMiller_brands and http://en.wikipedia.org/wiki/InBev_brands and http://en.wikipedia.org/wiki/Heineken_brands
05:13 < cloudbender> Of course there's labatt's, Molsen, yada yada
05:14 < TehShrike> I don't mind larger brands - I enjoy Sam Adams a good bit
05:14 < TehShrike> It's the beer monopolies that I hate
05:15 < cloudbender> yeah.  It's gotten out of hand.
05:17 < cloudbender> So, properties and prototypes are seperate concerns
05:17 < cloudbender> I should not stuff properties into a prototype
05:17 < TehShrike> Right
05:17 < cloudbender> ok.
05:17 < TehShrike> Properties and prototypes are different concerns
05:18 < TehShrike> What's your case you're thinking through?
05:19 < cloudbender> Well, the prototype of a new object can be tweaked, but you should only override the standard prototype values, and not try to add new ones.
05:19 < cloudbender> Is that right-ish ?
05:19 < TehShrike> Well see, the prototype is always the same object
05:19 < cloudbender> oh, so I would be tweaking up the chain then ?
05:19 < TehShrike> So you have some constructor, and its prototype is some object A
05:20 < TehShrike> You make a bunch of objects with that constructor
05:20 < TehShrike> Later, you change something about object A
05:20 < cloudbender> right
05:20 < TehShrike> All the objects you created with that constructor have that same prototype object, still
05:20 < cloudbender> I see
05:20 < TehShrike> So your changes are reflected in their prototype chain
05:20 < cloudbender> I seen ow yes
05:21 < cloudbender> now
05:21 < TehShrike> Maybe someone else can step in and give better terms, but it is confusing, because there's the constructor prototype, and the prototype of the instantiated objects
05:21 < cloudbender> No I have it.
05:21 < cloudbender> You stated it well.
05:22 < ciree> npm ERR! install Couldn't read dependencies, I'm getting this error when running npm install. Says it can't read packages.json. Going to deploy to heroku
05:22 < ciree> Node doesn't actually have to be installed in my working directory does it?
05:26 < ciree> I'm dumb, ignore me
05:41 < newchump> hello all!
05:42 < newchump> quick question. just getting started with node (hence the name) and I am a little perplexed by how npm installs things. it seems packages need to be reinstalled on every reboot. is there a way to avoid that?
05:47 < SomeoneWeird> newchump, somethings wrong with your machine then :P
05:48 < chrisbis_> that does sound weird newchump...are you installing them globally or for a specific project? 
05:51 < Cyranix> i'm still looking for an answer re: Fedora 18 and npm
05:51 < Cyranix> as long as we're remotely on the subject
05:53 < Cyranix> is it expected that i don't have access to it after installing using "sudo yum --enablerepo=updates-testing install nodejs"?
05:54 < Cyranix> i'm sure i can manually install it, figured i should ask first though
05:55 < newchump> I would like to install globally; I am running a music server for my house and would like to use Groovebasin (a node powered mpd web interface)
05:55 < mrlaw> anyone got some dumps ??
05:57 < daronk> http://i.imgur.com/f7wTyD9.png
05:58 < newchump> at the moment I run sudo npm --production install groovebasin to install it
05:59 < newchump> (I am running Debian Wheezy but that shouldn't be relevant I guess)
05:59 < cloudbender> anyone using more then 4 spaces per indent needs a major SLAP !
06:00 <@mbalho> cloudbender: be tolerant. 16 space indent makes your code better
06:01 < Lorentz> you definitely know when there's a new line
06:03 < mrlaw> anybody got dumps?
06:03 < cloudbender> On my good days.
06:04 < newchump> i see this is a fairly serious dev channel; if anyone wants to take a couple moments to answer the newbie question i'll be on my way
06:05 < cloudbender> good bunch here, but I'm kinda a newbie too.
06:05 < SomeoneWeird> newchump, so what happens when you reboot ?
06:06 < newchump> see it's a headless server so i can't watch it boot since my only interaction with it is via ssh
06:06 < newchump> one moment i will post the output when trying to start it post-reboot
06:06 < newchump> (with pastebin obv. i won't flood)
06:07 < newchump> http://pastebin.com/GVmQJiv8
06:08 < cloudbender> Is there a way to read the boot log ?
06:08 < newchump> after rebooting I execute sudo npm start groovebasin and this is the output sudo npm start groovebasin
06:08 < newchump> i believe so, gimme a moment
06:08 < xDomox> I think I'm in love with node.js
06:09 < xDomox> I kind of want to make babies with it
06:10 < xDomox> Anyway, I come from a PHP background and I'm a bit confused as to how to manage different sections of a page
06:10 < newchump> hmm... i can't think what of use would be in the boot log. there are no node related init scripts
06:11 < xDomox> for example in PHP you use include() to load in something so you don't have to rewrite it on every page, for example your menu
06:11 < cloudbender> Well, I was thinking of a way you could log a headless boot sequence.
06:11 < xDomox> what's the equivelant of that in node.js?
06:11 < newchump> i am taking a look at /var/log/syslog
06:11 <@mbalho> xDomox: node doesnt have any templating built in but there are tons of modules on npmjs.org
06:12 < cloudbender> ? requires ?
06:12 < newchump> http://pastebin.com/Waxq1TLG
06:12 < xDomox> I'm using Jade and Express
06:12 < newchump> that is my /var/log/syslog, starting at my last reboot a few minutes ago
06:14 < newchump> also what's with all this nouveau stuff on a headless machine? but no I will stay on topic. but yes you can probably see that I have a fairly poorly configured server just from that snippet
06:15 < cloudbender> you are using npm to start groovebasin ?  Is that necessary ?
06:17 < cloudbender> would you not 'node groovebasin' ?
06:17 < newchump> I don't know lol. i'm just going by the instructions posted by the groovebasin dev on the github page
06:18 < cloudbender> I see.
06:18 < newchump> that returns http://pastebin.com/fNpMvjAG
06:19 < cloudbender> I don't have a linux box set up, so I'm hip-shooting, sorry.
06:19 < newchump> so should i just touch an empty file by that name?
06:19 < newchump> no worries
06:19 < newchump> oh
06:19 < newchump> sudo touch /var/log/groovebasin made it start without a hitch
06:19 < newchump> wait i'm wrong
06:21 < newchump> now running 'node groovebasin' returns absolutely nothing. just immediately gives me a new prompt
06:21 < cloudbender> Is there a process id ?
06:22 < cloudbender> I'm sorry newchump I'm a bit rusty.  Someone will jump in.  If not today, then probably tomorrow.
06:23 < newchump> that's ok. thanks!
06:23 < newchump> (no pid
06:23 < cloudbender> I have not used npm
06:23 < newchump> )
06:23 < newchump> how do you install stuff?
06:23 < cloudbender> It's a good channel, and it's more or less a node question.
06:24 < cloudbender> My last Linux box was ubuntu 9 and I can't remember which variant of package manager I used.
06:25 < newchump> oh apt is the debian/ubuntu package manager. but i was under the impression npm was the only package manager for node
06:26 < cloudbender> right.  but you are launching groovebasin after each reboot, via the package manager.  It seems non-intuitive to me.
06:42 < Phara0h> Hey guys I have a question about node clusters and the speed of the messaging between clusters.
06:43 < Phara0h> I am only getting about 5 messages a second is that the speed i'm suppose to get?
06:43 < cloudbender> Have you watched ryan's intro ?
06:43 < Phara0h> whats ryan's intro?
06:43 < Nuck> Technically 5 messages per second is bandwidh and not speed.
06:44 < Phara0h> yea I guess bandwidth 
06:44 < Phara0h> but ya using ipc i figure it would be faster
06:45 < Phara0h> but is that the "bandwidth" i should be getting?
06:47 < Phara0h> cloudbender whats ryan's intro?
06:47 < cloudbender> PharaOh this is an intro video which covers tcp/http messaging and NON BLOCKING concepts ...
06:48 < cloudbender> http://www.youtube.com/watch?v=jo_B4LTHi3I
06:49 < cloudbender> It's dated, but relevent
06:51 < Phara0h> cloudbender I have seen this, but what I am trying to do is allocate a bunch of clusters that have huge arrays on them. Then from the master I I am trying to call to that node and get a element from the array and return a message with the element back to master
06:51 < Phara0h> I don't get why it is going sooooo slow. the elements are not huge, they are only like 4 variables in them.
06:52 < cloudbender> 5 messages per second. You said HUGE ARRAYS.  Is iteration killing you ?
06:53 < Phara0h> no i am not searching through the arrays I know exactly what element I want.
06:54 < cloudbender> are your ports routed or are they forming a private back-channel, face-to-face ?
06:54 < cloudbender> dedicated nics ?
06:54 <@Nexxy> omg, *the* mikeal ?!
06:55 < jtomasrl> if i accept url select like "API/store?select=name,description,city" should i add " city: '' " if not present?
06:56 < Phara0h> ya I have dedicated nics cloudbender
06:56 < Phara0h> here is a sample of the code
06:56 < Phara0h> https://gist.github.com/4618188
06:57 < Phara0h> so that call back function gets called when it gets the message
06:57 < Phara0h> and I am logging out the count which you can see in the code, and I get like 5 log outs a second
06:59 < Phara0h> what is also weird is that my node process is only using 16% of my cpu
06:59 < Phara0h> so it seems like it is just taking its time just for fun
06:59 < Phara0h> idk
07:00 < ljharb> JS is single-threaded. firing off thousands of async tasks isn't necessarily going to make more than one execute at a time
07:01 < Phara0h> ya I dont want them to fire off more than 1 at a time
07:01 < Phara0h> i just want them to go faster than 5 messages a second 
07:02 < draginx> any one here have success with nodetime?
07:02 < ljharb> instead of looping over N*M*X different things and immediately firing off all of the tasks - why not just do one at a time?
07:02 < ljharb> Phara0h: as in, instead of all those nested for loops, have each iteration execute, and then call the next one.
07:03 < Phara0h> well the loop is fast, but the call backs are ungodly slow
07:04 < ljharb> right
07:04 < Phara0h> is it because I am using this?
07:04 < Phara0h> http://jolira.github.com/backgrounder/
07:04 < ljharb> i'm saying, instead of doing a million iterations and piling a million callbacks on the event queue, do ONE iteration and ONE callback, after which, you do the second one, et cetera.
07:05 < Phara0h> that will be faster? you think that is the issue?
07:05 < ljharb> i don't know for sure. code it and see.
07:05 < ljharb> but certainly it seems like filling up a queue very fast is a good way to create a bottleneck
07:05 < Phara0h> do you know for sure that ipc is suppose to be faster than 5 messages a second?
07:06 < ljharb> not sure what ipc is
07:07 < ljharb> but i know js is single threaded. so if one callback takes a fifth of a second, then that's the speed it will take.
07:07 < Phara0h> its the communication that is used between two processes created 
07:07 < cloudbender> callback registration,processing,and signaling drops into V8 or the VM right ?
07:08 < trevnorris> anyone have an idea why not setting Content-Length in an http request make it 2x's slower?
07:08 < Phara0h> i don't know cloudbender, I am new to this clustering thing
07:08 < ljharb> trevnorris: i'd assume because the client and server can't optimize packet sizes properly?
07:08 < mrlaw> heyy
07:08 < Phara0h> I am just trying to find a good way to access my arrays in another process from my master
07:08 < mrlaw> anyone got some dumps ????????
07:09 < ljharb> Phara0h: i'm not aware of any shared memory
07:09 < kozero> anyone know where are some tutorials about extjs + nodejs ?
07:09 < trevnorris> ljharb: i'll go with that. it's just a much larger hit than I would have thought.
07:09 < ljharb> Phara0h: that would break JS's single threaded model
07:10 < Phara0h> well the whole reason I need the clusters is because of memory issues. I have arrays with trillions of items in them.
07:10 < cloudbender> well there ya go
07:11 <@konobi> Phara0h: ipc
07:11 < Phara0h> and one node process is not enough for my arrays
07:11 < cloudbender> are you swapping alot maybe ?
07:11 < ljharb> Phara0h: so then i'd say a big array is probably the worst possible data structure in which to store your data.
07:11 < ljharb> Phara0h: usually that's what databases are for
07:12 < Phara0h> but I need to read and write extremely fast
07:12 < Phara0h> which databases are not
07:12 < Phara0h> konobi? what about ipc
07:12 < ljharb> databases are pretty fast
07:12 <@konobi> that's how you need to do interprocess comms
07:12 < ljharb> try memcache or something
07:13 < Phara0h> ya but they are not as fast as accessing a array in memory 
07:13 < Phara0h> that just adds one more thing
07:13 < Phara0h> which will add time
07:13 < penzur> what about reddis?
07:13 < Phara0h> konobi thats what I am using right now is ipc
07:13 < ljharb> they are when your array is so massive that you can't access it quickly.
07:13 <@mbalho> chrome has "transferable objects" but node doesnt
07:13 < Phara0h> and i am only getting about 5 messages a second
07:13 <@konobi> Phara0h: node does not support shared memory... you need to use an alternate
07:13 <@mbalho> (for the record)
07:13 <@konobi> map-reduce?
07:13 < ljharb> databases can process many hundreds of thousands of writes per second. your big array can process 5. i think it might be worth a shot.
07:14 < Phara0h> its not the array that is the probem
07:14 < ljharb> it's that you're trying to do an operation over the entire thing
07:14 < Phara0h> before I started migrating to clusters
07:14 < ljharb> that's what map/reduce apps like hadoop are for
07:14 < Phara0h> the speed was instant
07:15 < Phara0h> since i am not searching the arrary
07:15 < Phara0h> i am simply just pulling from it
07:15 < Phara0h> i all ready have it maped
07:15 <@konobi> Phara0h: leveldb?
07:15 < cloudbender> The code you showed me iterates the entire world array
07:15 < Phara0h> no
07:15 < cloudbender> You said you were grabbing known values
07:15 < Phara0h> it calls to get a block from the array
07:16 < Phara0h> like say I want a block
07:16 < Phara0h> i would call var block = blocks[0][2][2];
07:16 < Phara0h> that would get me the block at x: 0 y: 2  z:2
07:16 < ljharb> your code sample had a bunch of for loops that iterate over all of them
07:17 < Phara0h> its not iterating over a arrary
07:17 < Phara0h> that is a calling a function
07:17 < cloudbender> what is worldsize ?
07:17 < ljharb> ah
07:17 < ljharb> ok so you're calling a function (16 * worldSize)^2 * 256 times. no shit that's going to be slow
07:17 < Phara0h> that is fast though
07:17 < ljharb> because it's async
07:18 < ljharb> you're piling (16 * worldSize)^2 * 256 callbacks onto the event queue. processing those will be slow.
07:18 < ljharb> just because of the sheer number.
07:18 < iksik> i'd use eval if 'path' is known, then you can get rid of these 3 loops
07:18 < Phara0h> see that is what I was trying to ask
07:18 < Phara0h> is the event queue slow
07:18 < Phara0h> eval = the slowest javascript function in the world
07:19 < ljharb> Phara0h: in addition - your airSearchCount variable. it's not defined in the spec, but it looks like it's in a weird spot.
07:19 < iksik> Phara0h: i can bet that it would be faster then these your 3 loops ;-)
07:19 < ljharb> the event queue isn't slow. doing anything with a massive number of functions is slow.
07:19 < Havvy> What ljharb says.
07:19 < cloudbender> and it seems like you are pounding the log as many times
07:19 < ljharb> your approach is flawed, regardless of how you attempt to implement it.
07:19 < Phara0h> its defined else where this is just a function of the class 
07:20 < Phara0h> hmm
07:20 < Phara0h> so how many messages a second should I be getting?
07:21 < ljharb> instead of asking about details, can you explain what you're trying to achieve in english? not in terms of messages per second, but in terms of the goal of this part of the program
07:21 < Phara0h> ok
07:21 < ljharb> ie, if you're trying to get to the grocery store, don't ask about gas mileage on a car
07:21 < Phara0h> I have an array in another process
07:21 < Phara0h> and I want to get a element from it
07:22 < ljharb> ok even broader
07:22 < Phara0h> in my master node
07:22 < ljharb> don't say "array" or "element"
07:22 < Phara0h> or
07:22 < ljharb> use the english words that describe the things in your array
07:22 < Phara0h> ok
07:22 < ljharb> as if i wasn't an engineer.
07:22 < Phara0h> I want to get something from a child node from my master node
07:22 < cloudbender> If you say 'provide' or 'enable' you have to take a shot of rye
07:22 < Phara0h> lol
07:22 < cloudbender> sorry...
07:23 < Phara0h> lmao it was funny manm
07:23 < ljharb> what's "something"
07:23 < Phara0h> a element lol
07:23 < ljharb> representing what
07:23 < ljharb> a person, a car, an animal
07:23 < Phara0h> a block
07:23 < ljharb> of wood?
07:23 <@mbalho> pizza
07:23 <@mbalho> he means pizza
07:23 < Phara0h> a block of w.e you want
07:23 < Havvy> mbalho: Obviously!
07:23 < Havvy> A block party then. :P
07:23 < iksik> pizza? where? when?
07:23 < Phara0h> lmao
07:24 <@mbalho> oakland, thursday, 6pm
07:24 < iksik> -_-
07:24 < purr> iksik: ಠ_ಠ is an IRC client/IRC client framework.
07:24 <@mbalho> -g pizza oakland
07:24 < iksik> heh
07:24 < purr> mbalho: Oakland » Restaurants » Pizza - Yelp <http://www.yelp.com/c/oakland/pizza>
07:24 < Phara0h> lmao
07:24 < ljharb> zachary's is good
07:24 < Phara0h> anyways >.> ....
07:24 < Havvy> Phara0h: What /problem/ are you trying to solve?
07:24 < ljharb> altho it always makes me think of Oak Land http://www.youtube.com/watch?v=CzkoeyhAAdk
07:25 < Phara0h> I am trying to get a element from a array in a child process and have it return it back to me
07:25 < Phara0h> fast
07:25 < jssss> how can I render dynamic template in nodejs without express framework ?
07:25 < ljharb> so master process tells the child process "give me [1][3[4]" and the child process just looks it up by index. i don't see why there's any iteration
07:25 < Phara0h> just as if I was trying to get a element in the mast process 
07:26 < Phara0h> there is no iteration
07:26 < ljharb> then why the for loops?
07:26 < Havvy> jssss: Which template engine?
07:26 < ljharb> or are you just simulating load
07:26 < jssss> html jade ejs....
07:26 < Havvy> jssss: You need to pick one first.
07:26 < jssss> html?
07:26 < Phara0h>  		x = (x/64)%16; 		y = (y/64)%256; 		z = (z/64)%16; 		 		var block = this.blocks[x][z][y];
07:27 < mikeal> i know all the oakland pizza
07:27 < Phara0h> see not iteration
07:27 < mikeal> what style do you like :)
07:27 <@mbalho> -g mikeal oakland pizza
07:27 < purr> mbalho: Hank &amp; Frank Bicycles - Rockridge - Oakland, CA <http://www.yelp.com/biz/hank-and-frank-bicycles-oakland>
07:27 < mikeal> best fancy flat pizza is pizzaiolo
07:27 <@mbalho> i want cornbread crust
07:27 < mikeal> boot and shoe service serves the same pizza
07:27 < mikeal> cornbread crust? really?
07:28 < Havvy> jssss: Unless there's a library called "html" for some reason, you would make a function that returns HTML.
07:28 < mikeal> Zacharys does a thick Chicago style crust
07:28 <@Nexxy> is mikeal a pizza bot?
07:28 <@Nexxy> ... suddenly?
07:28 < mikeal> haha
07:28 < ljharb> who here isn't a pizza bot
07:28 < Phara0h> <--
07:28 < mikeal> my pizza knowledge is entirely from a year ago before i went on the paleo diet
07:28 <@Nexxy> like seriously I legitimately wondered if mbalho had made a bot for a second
07:28 < rvagg> pizza isn't paleo is it?
07:28 < Havvy> function (locals) { return "<!doctype html><html> ..." + locals.something + "... </html>" }
07:28 < jssss> <Havvy>: yep I see
07:29 <@mbalho> Nexxy: haha
07:29 <@Nexxy> but that would be pretty awesome
07:29 <@Nexxy> a mikeal bot that orders for you at restaurants way too fancy for you to comprehend
07:29 < Havvy> For Jade, and EJS, they have documentation on how to use them independently of any library.
07:29 <@mbalho> nah mikeal just says 'we will take this page'
07:29 < mikeal> haha
07:29 <@Nexxy> LOL
07:29 < jssss> <Havvy>: is nodejs have some method like render in express
07:29 < mikeal> i usually order "the menu"
07:30 <@Nexxy> and then some
07:30 < Havvy> jssss: Nope. That's added by express.
07:30 <@mbalho> my only question about paleo is what about italy
07:30 < jssss> ok thanks
07:30 < ljharb> psh what about everything amazing
07:30 <@mbalho> if paleo is real and im supposed to believe in the paleolithic era then explain to me how italy existed on their diet of pasta and pizza
07:30 < ljharb> doughnuts. beer. fried anything
07:31 <@mbalho> what now, science!?
07:31 < Havvy> https://github.com/visionmedia/jade#a3 for jade
07:31 < mikeal> paleo predates milled grains
07:31 < ljharb> mbalho: proscuitto and wine cancel our carbs?
07:31 < ljharb> *out
07:31 <@mbalho> ljharb: touche
07:31 < mikeal> there was no pasta or pizza in the paleolithic era :)
07:31 <@mbalho> that goes against my religious beliefs
07:32 < Havvy> jssss: See the section called "Public API"
07:32 < mikeal> cause the earth is only 4 thousand years old :)
07:32 < cloudbender> lol
07:33 < ljharb> 5 tyvm.
07:33 <@mbalho> on the first day pizza created itself
07:33 <@mbalho> on the second day pizza created earth
07:33 <@mbalho> on the third day pizza created ryan dahl
07:33 < Havvy> A pizza that created itself?
07:33 <@Nexxy> lol
07:34 <@Nexxy> pizzafarianism
07:34 <@mbalho> yea kinda like ourobouros but with pizza
07:34 < ljharb> using tail call recursion and turtles.
07:34 < Havvy> ljharb: So a turtle that is holding itself up by the tail?
07:35 < ljharb> no, you're missing the point. it's turtles all the way down.
07:35 < Havvy> But that's not TCOed.
07:35 < Havvy> It's just an infinite stack.
07:35 < cloudbender> ... of turtles
07:35 < ljharb> you're assuming each turtle is a distinct instance. they're turtles by reference.
07:36 < Havvy> So it's an infinite stack of virtual turtles?
07:36 < Havvy> And anything you do to one of them you do to all of them?
07:36 < ljharb> they're not all the same instance. just not all separate ones.
07:36 < jssss> <Havvy>: Using jade template, if I wana render dynamic site, i should create a function to put params like HTML ?? 
07:37 < Havvy> jssss: Save your Jade files like you would with express, and in your code do this:
07:38 < Havvy> var template = jade.compile(require("path/to/jade/file"), opt);
07:38 < Havvy> And then calling template(locals) will get you your HTML output.
07:38 < cloudbender> Did he ever say what worldsize was ?
07:38 < diileep> how to call node.js function from other js files
07:39 < jssss> how can I put vars in this template
07:39 < cloudbender> He seemed to be hedging on that number
07:39 < Havvy> jssss: Have you read this yet? https://github.com/visionmedia/jade
07:41 < jssss> in express, using render(filename, {title: 'abcde' }), and how in node without express??
07:42 < Havvy> jssss: (jade.compile(require(filename)))(locals)
07:42 < jssss> ok thanks (:
07:53 < cloudbender> good night channel buddies
07:53 < draginx> whats a good way to stress test ur nodejs application?
07:55 < chovy> draginx: apache bench?
07:55 < chovy> or curl
07:55 < draginx> well id like to be able to send image files
07:55 < chovy> curl
07:55 < draginx> well I do use curl :) for mocha testing
07:55 < chovy> you can post stuff w/ curl
07:55 < draginx> bu how could i found out something like req/s with curl?
07:55 < chovy> mcurl
07:56 < chovy> or multicurl
07:56 < chovy> i'm not sure how you get at the stats, but there must be a way. Or just write a script to use multicurl and log it yourself with 'time'
07:57 < chovy> http://curl-multi.rubyforge.org/
07:59 < draginx> ty
07:59 < chovy> there might be a way to use apache bench with post requests too. its been a few years sicne i used it
08:01 < chovy> ab -p ./post-data -T 'application/x-www-form-urlencoded' http://example.com/upload/
08:01 < diileep> how to call node.js function from other js files
08:04 < draginx> chovy: hmm post-data would be a file?
08:04 < chovy> yeah its a file w/ your post data in it.
08:04 < chovy> usually something like name=Joe&phone=123-444-4444
08:04 < chovy> not sure how you would put an image in there.
08:06 < draginx> well the usual format is @field=/path/to/file
08:06 < chovy> that's for curl
08:06 < chovy> isn't it?
08:06 < chovy> or does ab support that too?
08:06 < chovy> I found this: http://www.adityamooley.net/blogs/2011/03/21/multipart-posting-with-apache-benchmark/comment-page-1/#comment-30978
08:07 < draginx> ah nice chovy! :) thanks
08:09 < chovy> sure
08:10 < chovy> hmm, ab says wrong number of args when i try 'ab -n 10 -c 2 http://example.com'
08:11 -!- mbalho changed the topic of #Node.js to: Node.js - THE MARCH TO 0.10 CONTINUES! https://github.com/joyent/node/wiki/Api-changes-between-v0.8-and-v0.10 ~ http://logs.nodejs.org/node.js/ ~ https://www.youtube.com/watch?v=47MWkDPfmqI&t=0m30s
08:11  * mbalho dont mind me, carry on carry on
08:13 < chovy> oh, nevermind. i had -v in there w/o any value
08:18 < chovy> my app handles 2 concurrent requests ok, but at 5 it falls over.
08:19 < _ior> mornin
08:19 < _ior> 5?!
08:19 < _ior> yikes
08:21 < chovy> well, taht time i got 0 failures
08:21 < chovy> w/ 5 concurrent
08:22 < _ior> yay!
08:23 < chovy> 10 now
08:23 < chovy> i wonder if there's a way to get ab to download all the assets
08:30 < chovy> well, i think my app went caput at 300 concurrent requests.
08:30 < chovy> heh
08:30 < chovy> for the homepage. which has tons of data.
08:32 <@Nexxy> chovy, less data
08:35 < chovy> my hompage was getting undefined objects. not sure why.
08:35 < chovy> but 929/1000 failed.
08:35 <@Nexxy> I'm just going to leave this here: https://twitter.com/nexxylove/status/294361284240109568
08:35 < chovy> w/ 30 concurrent requests
08:36 < _ior> well 300 concurrent is certainly a step up from 5
08:36 < _ior> by two orders of magnitude, even!
08:38 < CrawfordComeaux> Nexxy: have anything you could share about it right now?
08:38 <@Nexxy> CrawfordComeaux, there will be lasers
08:38 <@Nexxy> and smoke
08:38 < _ior> and mirrors?
08:38 <@Nexxy> possibly
08:38 < CrawfordComeaux> I'd go if I wasn't a broke Louisiana boy :P
08:38 < _ior> and snake oil salesmen?
08:38 <@Nexxy> no
08:38 <@Nexxy> but there will be music!
08:39 <@Nexxy> and dancing
08:39 < _ior> hm, gotheburg
08:39 < _ior> borg
08:39 < _ior> silly fingers
08:39 < Phara0h> I hope there is pizza
08:39 < CrawfordComeaux> I'm trying to build a storm cluster with some guys to process datasift feeds, but none of us have ever played with anything like it
08:39 < _ior> oh wait i do have an ö on my keyboard
08:39 <@Nexxy> Goteborg!
08:39 < _ior> i often forget
08:39 <@Nexxy> with that weird diacritic
08:39 <@Nexxy> ya
08:39 <@Nexxy> that one
08:40 < draginx> my nodejs app gets 122 req/s that seems god awful for a simple query to the DB and res.json()'ing the results.. what cold I be doing wrong?
08:41 <@Nexxy> everything
08:41 < chovy> 122 req/s sounds like a lot to me.
08:41 < _ior> hm, i wonder if i'll convince my employers to send me
08:41 < zomg> chovy: it seems a lot of articles always promise thousands
08:41 < zomg> but those are probably done on beefy hardware
08:41 < _ior> somehow, i doubt it, since i can't even convince them to send me to conferences that are actually directly relevant to my work for them 
08:42 < chovy> i get 1.45 req/s with only 1 failure out of 100
08:42 <@Nexxy> _kud, there are some tutorials on day 3 though
08:42 <@Nexxy> they look pretty hardcore
08:42 < chovy> if i go passed 2 concurrent reqs, i start missing data.
08:44 <@Nexxy> chovy, maybe you have some scope leakage
08:46 < [AD]Turbo> hi there
08:46 < chovy> its this damn data migration issue
08:47 < chovy> foo.comments.length
08:47 < chovy> but not every foo has a comments sub-doc
08:47 < chovy> so it barfs
08:47 < chovy> i need to write a script that will save all my objects once.
08:47 < _ior> if(typeof(foo.comments) !== 'undefined') { // do stuff }
08:48 < chovy> then the older objects will have them.
08:48 <@konobi> transaction blocks ftw
08:48 < chovy> _ior: yeah, but i don't want to put that all over my code. i'd rather just bring the data objects into the latest schema with a quick .save() call.
08:49 < chovy> konobi: what are transaction blocks?
08:51 < chovy> ok, i think for now i can just conditionalize the stats block to not show if i don't have a .length
08:56 < Exx2xxO> Hello node ! A question aboute node's filesystem: Is there a possibility to detect windows system folders? Actual I use readdir and detect all folders with stat.isDirectory() but it shows all folders and I want to hide the system folders which are by default not shown by windows..
08:59 < chovy> anyone see anything obvious here? I don't see a .length attribute being used anywhere. https://gist.github.com/90bdd621b7371a1e56c2
09:00 < chovy> and i'm not sure what the Type error is about
09:00 < zomg> chovy: well the stack trace says  at buf.push.__stack.lineno (eval at <anonymous> (/var/www/wishd.me/wishd/node_modules/ejs/lib/ejs.js:234:12))
09:00 < zomg> which would indicate the error is happening in ejs code rather than in your code
09:01 < zomg> as a result of compiling your template, however I can't see anything wrong with the two snippets you show
09:01 < chovy> but doesn't it spit out the template error right after the ejs template that choked?
09:01 < chovy>  /var/www/wishd.me/wishd/views/person.ejs:2
09:02 < zomg> oh hm
09:02 < chovy> at least thats usually what happens.
09:02 < chovy> but its not always accurate what line has the problem.
09:03 < chovy> it's like the page didn't get any of its data.
09:04 < CrawfordComeaux> chovy: I've got no idea, but those errors make me want to avoid ejs :P
09:05 < zomg> chovy: only guess I have is ejs doesn't like the fact that you split the foreach thing like that
09:05 < zomg> try using a standard for loop and see if that works better
09:06 < CrawfordComeaux> Exx2xxO: that's a pretty interesting question. I'm guessing there's a reason why hiding Windows & Program Files along with everything contained wouldn't be acceptable?
09:07 < chovy> yeah. i think users is not an array at some point.
09:08 < geNAZt> hiho
09:09 < chovy> well, at 10 concurrent users, half my requests fail.
09:10 <@konobi> Exx2xxO: hiding that stuff is handled at a higher level in win explorer than the fs level
09:10 <@konobi> Exx2xxO: there may be an npm module to deal with that though (since it's no doubt based on registry entries)
09:17 < geNAZt> Exx2xxO: was suchst du den schon wieder ? :D
09:22 < Raynos> isaacs: lgtm
09:23 < aandy> chovy: which db do you use btw?
09:23 < Exx2xxO> So back again :D CrawfordComeaux : yeah the reason is pretty simple I don't know which folders to hide ^^ konobi hmm I would prefer a solution without modules but I will search for one 
09:24 < Exx2xxO> geNAZt : Ich versuche die Windows System Ordner zu verstecken die standardmäßig durch Windows versteckt werden :)
09:27 <@konobi> Exx2xxO: you won't have a solution without modules
09:28 < Exx2xxO> konobi: hmm is there something like this in express ? because that's what I use ^^
09:29 <@konobi> Exx2xxO: no
09:29 < geNAZt> but why would you like to hide them with node ?
09:31 < Exx2xxO> because I have a "FileTree" where the user can choose a folder to work with and at the moment I use readdir to get all folders and there is the problem it shows really ALL folders but I want to avoid user failure by choosing a system folder where they mustn't work in ;)
09:31 < geNAZt> so you want to exclude the hidden dirs from that list ?
09:32 < Exx2xxO> exactly
09:32 < SomeoneWeird> don't think you'll be able to do that in js
09:32 < geNAZt> and why not ?
09:33 <@Nexxy> like you're at the epcot center on acid?
09:33 <@Nexxy> woops, wrong window
09:33 < geNAZt> you only need to read the ntfs meta for this
09:33 <@konobi> lol
09:33 < SomeoneWeird> well none of the fs.stat functions return metadata, for one
09:34 < xk_id> hey geNAZt
09:34 < CrawfordComeaux> Exx2xxO: create a user with non-admin permissions, attempt to save a file in every dir (or perform some other operation requiring admin privs), hide the ones that won't allow it
09:34 <@konobi> Exx2xxO: looks like there's fswin
09:35 < SomeoneWeird> that's a really bad way of checking, CrawfordComeaux lol
09:35 < geNAZt> http://stackoverflow.com/questions/8905680/nodejs-check-for-hidden-files
09:35 < SomeoneWeird> "In order to reliably identify hidden files on Windows, the node.js team would have to implement the GetFileAttributes() API on windows (like it's done by C++ or C#). "
09:35 < SomeoneWeird> IE. you can't do it in JS, like i said
09:36 < geNAZt> and then you write a module and then js can oO
09:36 < SomeoneWeird> yes but technically it would be c++ getting the info :P
09:36 <@konobi> as I said.... there's fswin
09:37 < CrawfordComeaux> wait...is the node source written in js?
09:37 <@konobi> some of it is
09:37 < SomeoneWeird> kind of
09:38 < Exx2xxO> konobi: thanks I will take a look
09:38 < CrawfordComeaux> so then if a module uses some C for GetFileAttributes() & then packages the results in js, it wouldn't violate your standards, SomeoneWeird?
09:38 < Exx2xxO> SomeoneWeird no matter if JS or C++ ... I just need the info ;)
09:38 < SomeoneWeird> CrawfordComeaux, no ?
09:38 <@konobi> CrawfordComeaux: pedant?
09:38 < SomeoneWeird> what standards? lol
09:39 < CrawfordComeaux> i'm just kidding in what may be a jerkish way, so I'll stop :)
09:39 <@Nexxy> my standards have been violated
09:39  * SomeoneWeird violates CrawfordComeaux 
09:39 <@Nexxy> is there some sort of form I should fill out?
09:39 < CrawfordComeaux> I apologize in that case
09:40 < CrawfordComeaux> not yet...but I'll whip it up on my next break :P
09:40 < SomeoneWeird> http://nexua.org/niji/butthurt-form/
09:40 < CrawfordComeaux> heh
09:41 < CrawfordComeaux> Exx2xxO: You should go implement GetFileAttributes and make a pull request to node! I bet there's plenty of tuts out there for doing it in C
09:41 <@konobi> CrawfordComeaux: again... there's fswin
09:41 <@konobi> ffs
09:41 < CrawfordComeaux> ah...missed that
09:41 < SomeoneWeird> use nodeffi :P
09:42 < CrawfordComeaux> dear github: thank you for fulfilling my desire for better searching!
09:42 < Exx2xxO> Is there some sort of module which handles this problem for Windows,Unix and Mac ? (Don't know anything 'bout unix and mac so please forgive me if there is no problem like this with the folder system of these systems ;))
09:42 <@Nexxy> you look for a dot
09:42 <@Nexxy> infront of the file
09:43 <@Nexxy> it's pretty complicated
09:43 < SomeoneWeird> we need to write a module for that
09:43 < CrawfordComeaux> lol
09:43 < SomeoneWeird> SUBSTACK!
09:44 <@Nexxy> dotfiledetector.js
09:44 <@konobi> or replicate http://search.cpan.org/~adamk/File-HomeDir-1.00/lib/File/HomeDir.pm
09:44 < SomeoneWeird> module.exports = function(filename) { return filename.substr(0,1) == "."; }
09:44 < SomeoneWeird> lol
09:45 < SomeoneWeird> that line of code is copyrighted anybody using it will be sued
09:45 < SomeoneWeird> >.>
09:45 < SomeoneWeird> jks
09:45 < Exx2xxO> Nexxy the files are filtered anyway no matter what's it named :) It's only the folders and they don't have any dots :)
09:45 < Exx2xxO> SomoneWeird working for Apple :P ?
09:45 < SomeoneWeird> lmao
09:45 < SomeoneWeird> not quite
09:46 < SomeoneWeird> thankfully
09:46 < Exx2xxO> lol
09:47 < Shinister> Wonder if you guys can help me
09:47 < aandy> SomeoneWeird: then i'll be quick and patent the === version. phew
09:47 < Shinister> developing large applications in node js, I'm interested in how the code should be architected - I can't really find an example of a large application I can look at
09:47 < geNAZt> maybe should open a fr for this in the node repo
09:47 < SomeoneWeird> i patented the "return" keyword, sorry aandy 
09:48 < SomeoneWeird> i guess i can sue everybody in this room now
09:48 < aandy> well, at least i still have function
09:48 <@konobi> Shinister: break stuff up into lots of files, name all your functions and keep your functions short
09:48 <@Nexxy> use lots of events :D
09:48 < aandy> but seriously damn that guy who took ;, i owe him a lot of money
09:48 < Shinister> so there's no real best practise '99% of node dev would use these patterns' kind of thing?
09:49 < _ior> aandy, you could always do something extreme, like switch to a language that doesn't use c-syntax
09:49 <@Nexxy> I don't think there's anything 99% of the node community would do
09:49 < _ior> then you'll have no ;
09:49 < CrawfordComeaux> Shinister: google for node terms + the word "enterprise"
09:49 < Shinister> Nexxy: good point
09:49 < _ior> might i recommend common lisp?
09:49 < Shinister> is architecting things well really an enterprise thing?
09:49 < aandy> well, i have python for that
09:49 <@Nexxy> Shinister, just be mindful of your requirements
09:50 <@Nexxy> and use node's strengths in your advantage
09:50 < aandy> Shinister: some argue that node is too "new" and changing for there to be real best practices yet
09:50 < Shinister> aandy: that seemed to be the response to this question from the local js user group
09:50 <@konobi> Shinister: generally it's a question that comes from folks who want java-enterprise-like management of stuff from their IDE... so folks are just being facetious
09:51 < CrawfordComeaux> Shinister: no, but I'd imagine you'd find some sort of correlation between "enterprise" and scale of codebase
09:51 < Exx2xxO> konobi: you confused me :O File::HomeDir is for perl .. .. trying fswin now ..also trying not ruin my whole app ^^
09:53 < Exx2xxO> konobi: okay need to find another module fswin can't be installed :D
09:53 <@konobi> Shinister: it's roughly general code best practices... there are specifics for specific types of apps, etc.
09:53 <@konobi> Exx2xxO: yup, you need to compile it
09:54 < CrawfordComeaux> Shinister: Plus...if you do that, you might find neat stuff. example - I just found ql.io from this http://www.slideshare.net/gblock/node-js-enterprise-class
09:55 < Shinister> I suppose being a .net drone, I'm used to at least trying to look at the larger picture of how I write my code in relation to maintainability and not being poked in any direction for how I'd go about it is something I'm not used to
09:55 < Shinister> I guess I worry someone would pick up my code n years down the line and think wtf was this guy doing? :P
09:55 < aandy> people will think that anyway
09:55 <@konobi> Shinister: keep it small, keep it simple, keep it modular... sorted
09:55 < aandy> be worried about the "this is impossible to work with" instead
09:56 <@konobi> tests++
09:58 < CrawfordComeaux> Shinister: comment it
09:58 < Shinister> I write tests all the time in .net, I still need to learn some node test frameworks
09:58 < CrawfordComeaux> also, at the end of that slideshare he highlights packages that I'm assuming are commonly used among the big companies using node that he was highlighting....
09:59 < CrawfordComeaux> github.com/c9/architect was one of them
10:00 < CrawfordComeaux> its description makes it seem like something you'd want to look into, but *shrug* I haven't heard of it til now
10:00 < Shinister> Hmm, interesting
10:01 <@konobi> middleware, streams, etc.
10:01 < Shinister> I think some of this is highlighting my lack of understanding of some of the JS language being fair
10:01 < CrawfordComeaux> so two potentially useful things learned from one hit in one google search for "nodejs enterprise"...worth it :D
10:02 < CrawfordComeaux> I've never quite understood what "middleware" refers to
10:02 < CrawfordComeaux> oh jesus...13 hours til deadline! I gotta get back to coding! 
10:02 < zomg> middleware is just a fancy word for a thing that sits in the middle of some process and interferes in some fashion
10:04 < CrawfordComeaux> BTW: anyone want to immediately join a team that's developing a social media dashboard to be used in the press room at the Super Bowl, with the option of continuing on for the next iteration involving massive feeds from http://www.datasift.com and a storm cluster (http://www.storm-project.net) that Amazon said they'
10:04 < CrawfordComeaux> they'll throw credits at til the big game is over?
10:06 < zomg> CrawfordComeaux: if it pays, sure ;)
10:06 < CrawfordComeaux> zomg: what's your rate? we have to deliver in 13 hours or less
10:07 <@Nexxy> lol what
10:07 <@Nexxy> wow
10:07 <@konobi> $1000 p/h
10:07 < CrawfordComeaux> konobi: pass
10:07 < zomg> CrawfordComeaux: 250 usd / hour if you want me to start working on it right away
10:07 <@konobi> CrawfordComeaux: heh... how much you willing to pay
10:08 < CrawfordComeaux> sec...
10:08  * CrawfordComeaux checks his Simple app...
10:08 < CrawfordComeaux> whoa...
10:09 < CrawfordComeaux> ummm...nevermind about the paying thing until others I can bug for money wake up :P
10:09 < zomg> lol
10:09  * CrawfordComeaux adds fundraising for rent to his todo list
10:09 < _ior> must not be so urgent afterall
10:09 <@konobi> pass
10:09 <@konobi> =0)
10:10 < CrawfordComeaux> money != urgency
10:10 < CrawfordComeaux> but opportunity to show stuff to 5k journalists => urgency
10:11 < zomg> Is it java? It looks like it's java...
10:11 < zomg> :D
10:11 < zomg> or at least by a quick glance
10:11 < xk_id> that's.. pretty erroneus. you don't measure them with the same units
10:11 <@konobi> not a contractors problem... contractors work for money
10:11 < _ior> programming for fame? such a thing is possible?
10:11 < CrawfordComeaux> yeah...storm's java/scala I think
10:12 < aandy> CrawfordComeaux: wasn't it quite a few days ago you asked for the same thing, with a "i want to finish tonight"? :)
10:13 < zomg> I should probably charge more since it's java
10:13 < zomg> :D
10:13 < CrawfordComeaux> aandy: yeah...the node noob looking for help underestimated workload...I know...big shocker ;)
10:13 < geNAZt> the 42zoll display dashboard ?
10:14 < CrawfordComeaux> if zoll is another word for inch, then use
10:14 < aandy> CrawfordComeaux: last it was a prototype. considering it's feb 3rd, any new stance on that?
10:14 < CrawfordComeaux> for use on two of them
10:14 < CrawfordComeaux> aandy: less of a prototype?
10:14 < CrawfordComeaux> protomvp?
10:14 < _ior> zoll is another word for "customs and tariffs"
10:14 < aandy> i mean, do you have the prototype?
10:15 < CrawfordComeaux> in a busted-up sort of sense
10:16 < CrawfordComeaux> taking things hacked together without consideration for other components & retooling them right now
10:16 < aandy> in node that is?
10:16 < CrawfordComeaux> yes
10:17 < CrawfordComeaux> "Zoll may refer to: the German word for inch" - thx wikipedia :D
10:18 < CrawfordComeaux> when I've cleaned up the social media API calls, I'll deploy to a dev server so everyone can have a good laugh ;)
10:21 < aandy> not sure you'll get laughs, but people will check it to see what it is you're asking to get done :p
10:22 <@konobi> likelihood of AWS crashing on game day... i'm going with 50/50
10:22 < aandy> :D
10:23 < timoxley> apparently we're not supposed to use nom's preinstall scripts to build .coffee to .js anymore. what's accepted practice for this?
10:23 < timoxley> s/nom/npm
10:23 < CrawfordComeaux> konobi: I'll take that bet ;)
10:23 <@Nexxy> timoxley, alias nom='npm'
10:23 <@konobi> timoxley: generate before uploading, or just don't use coffee
10:23 < CrawfordComeaux> considering there will only be 4-10 clients, tops 
10:24 <@konobi> CrawfordComeaux: i mean AWS as a whole
10:24 < CrawfordComeaux> ah...
10:24 < CrawfordComeaux> good point...is nodejitsu on AWS?
10:24 < timoxley> konobi it's not my module, just tidying one up
10:25 <@konobi> CrawfordComeaux: nope
10:25 < CrawfordComeaux> great...there's our failover
10:25 < timoxley> Nexxy irc client spelling correct
10:25 < timoxley> bah
10:25 <@konobi> timoxley: yeah, then generate befor uploading
10:25 <@Nexxy> timoxley, haha 
10:25 <@Nexxy> timoxley, I legitimately have that alias
10:25 < timoxley> hahah
10:26 < timoxley> konobi why is preinstall only for building binaries?
10:26 <@Nexxy> it makes me giggle a little every time
10:26 < timoxley> cc isaacs 
10:26 <@Nexxy> nom install burrito
10:27 <@konobi> timoxley: because you can only build binaries at install time... coffee should be generated, since varying versions may build the JS differently
10:27 < gmg85> which is the best way of monitoring nodejs servers?
10:27 < timoxley> konobi "devDependencies": {"coffee-script": "1.2.0"}
10:27 < timoxley> i.e. fixes the version
10:28 <@konobi> timoxley: regardless, it's still code generation
10:28 < gmg85> and does anyone know any good web security channels(i realize this is off topic but...)?
10:28 < timoxley> konobi arguably, building a binary is code generation
10:28 <@konobi> timoxley: sure, but it's the _only_ way to build it
10:28 < timoxley> but anyway
10:29 <@konobi> stupid c++
10:29 < aandy> gmg85: not a channel, but owasp.org
10:29 < timoxley> it kinda sucks because now I have to pick some build system
10:29 <@konobi> timoxley: travis?
10:29 < gmg85> thanks aandy 
10:30 < timoxley> konobi bleh. to convert a js to a coffee?
10:30 < timoxley> oops
10:30 < timoxley> other way round
10:30 < gmg85> now nodejs monitoring....anyone?
10:30 <@konobi> timoxley: or add it as a publish hook?
10:30 < timoxley> ahh
10:30 < timoxley> there we go
10:33 < CrawfordComeaux> gmg85: monitoring on what level?
10:36 < geNAZt> i use muxdemux as stream multiplexer ontop of a tcp socket. On the server side how can it get on the clientAdress ? or how do i identify that streams out of the muxer belong to the same client ?
10:36 < Dantas> Hi all, I'm planning to create a notification system ( web ) using socket.io. I' am wondering how to handle to many persistent connections opened by the Socketio. How can i handle this ? 
10:38 < geNAZt> what is too much ?
10:38 < geNAZt> 10k ? 100k ?
10:38 < jd823592> Hi i am getting this weird error: http://bpaste.net/show/72444/ while i try to require("jsdom"). any idea why that is?
10:39 < MI6> joyent/node: Ben Noordhuis master * 193320a : gitignore: ignore v8.log files (+1 more commits) - http://git.io/AUg1Yg
10:39 < Dantas> geNAZt:  10k .. 30k
10:39 < geNAZt> jd823592: use cheerio https://github.com/MatthewMueller/cheerio
10:39 < geNAZt> Dantas: and what is the problem ? 
10:40 < Dantas> geNAZt:  isn´t to much to one micro machine to handle ?
10:40 <@Nexxy> omg I love micro machines
10:40 < geNAZt> depends on your micro machine and your behavior of sending data to the clients
10:41 <@konobi> Dantas: impossible to know until you have your app
10:41 < jd823592> geNAZt: is that recommendation based on something other then personal preferences? (i will check it out, i just want to know why i use it :))
10:41 < Dantas> konobi: right
10:42 < Dantas> Nexxy:  :)
10:42 < geNAZt> jd823592: its is faster and i has much less bugs
10:42 < geNAZt> ask xk_id :D
10:43 < xk_id> hey jd823592
10:43 < jd823592> geNAZt: thank you very much.
10:43 < xk_id> yup, I used cheerio
10:43 < jd823592> xk_id: hi :)
10:45 < xk_id> cheerio is more useful than jsdom
10:46 < xk_id> jd823592: otherwise, you may wish to "npm install jsdom" again
10:46 < xk_id> in your application's folder
10:46 < jd823592> xk_id: re-installing jsdom did not help
10:47 < xk_id> that's strange. are you running require('jsdom'); from the repl?
10:47 < geNAZt> what os do you use ? jd823592
10:47 < jd823592> xk_id: i am trying cheerio now but i wonder whether it can load a complete html file with doctype and then manipulate it and return the complete html (with the doctype preserved)
10:47 < jd823592> geNAZt: gentoo (i am on ARM .. so there might be problem with that)
10:48 < xk_id> jd823592: yes, I think you can. look for example at the ".attr(name, value)" method iirc
10:50 < xk_id> jd823592: https://github.com/MatthewMueller/cheerio#attr-name-value-, but probably more importantly https://github.com/MatthewMueller/cheerio#manipulation 
10:50 < jd823592> ok so cheerio does not throw any stupid contextify error
10:50 < zomg> I've been getting a lot of emails from freelancer.com lately, apparently they've bought some freelancing site I was a member of at some point... I wonder if it's worth a look...
10:50 < jd823592> now i need to find out why https does not work, while http does
10:51 < zomg> I suspect it's just gonna be the same as it was 8 years ago - really really low prices on everything and not worth at all for any serious work
10:51 < zomg> :P
10:56 < jd823592> geNAZt, xk_id: cheerio works like charm :)
10:58 < jd823592> any idea how to debug why s = http.createServer(F1); s.listen(8080); works while s = https.createServer(opts, F1); s.listen(8443); does not (connection does not recieve any response at all)
10:58 < tequnix> Hi there. Does anybody here uses fedora 18? You can node.js by activating the updates-testing repo, but there seems to be no npm package. Am I missing something here? :)
10:59 < tequnix> *you can install th enode.js package
10:59 < tequnix> *the node.js 
10:59 < tequnix> x)
10:59 <@Nexxy> what version of node?
10:59 < tequnix> $ node -v
10:59 < tequnix> v0.9.5
11:00 <@Nexxy> interesting
11:00 <@Nexxy> and how about `npm -v`?
11:01 < tequnix> Well the problem is, that there is no npm installed and I cannot find a npm package in the fedora repo
11:01 <@Nexxy> well npm should install with node
11:04 < tequnix> It was not installed with node. I have even listed all files installed by the node.js package, no npm.
11:05 < tequnix> Comes node.js now with npm?
11:06 < timoxley> tequnix try install from source
11:07 < timoxley> tequnix e.g. https://gist.github.com/579814
11:07 < tequnix> well I could also check out npm from github and install that 
11:09 < timoxley> tequnix yep
11:10 < tequnix> probably easier :)
11:10 < Rick_> How do you update Node from v0.5.11-pre to v0.8.1 in the terminal (linux mint)?
11:11 < timoxley> Rick_ how did you originally install it?
11:12 < Rick_> Cloned git://github.com/ry/node.git 
11:12 < Rick_> then ./configure, make and sudo make install
11:13 < Rick_> Was trying to get the latest version but after install I get      node -v     v0.5.11-pre
11:14 < tequnix> Rick_: when did clone the repo and when did you update it the last time?
11:15 < Rick_> Fresh install of mint this morning
11:15 < Rick_> fresh install of node too
11:15 < Rick_> (obviously)
11:17 < tequnix> Maybe you got an old repo URL
11:17 < tequnix> When I searched on github i got this one:
11:17 < tequnix> https://github.com/joyent/node.git
11:19 < asturel> anyone can help me with jade? how do i put e.g. every second item from array into new div?
11:19 < asturel> each val in array ...
11:21 < asturel> if i do with if and its false the html code just wont appear
11:33 < _ior> i love how most introductions to LISP say: "first, learn to emacs"
11:34 < _ior> i'm an emacser for 15 years and i'm still not sure i have learned to emacs
11:44 < jesusabdullah> _ior: inorite?
11:44 < jesusabdullah> _ior: maybe "learn slime"
11:47 < _ior> hahaha yeaqh
11:47 < _ior> but there's an argument to be made that says any sufficiently competent emacser already knows lisp
11:47 < _ior> they're kinda one and the same
11:53 < jesusabdullah> yeah _ior XD
11:55 < _ior> i mean, you can only work without color-theme.el for so long until you really want it. and then you have to start editing .emacs, and rare, i hope, are the people who would cut-and-paste random snippets of code off the internet onto their box without first a minimum level of understand
11:55 < _ior> and thus begins the slippery slope to elisp
11:55 < _ior> and now, lunch time afking
12:06 < SomeoneWeird> gyp WARN EACCES user "root" does not have permission to access the dev dir "/root/.node-gyp/0.8.14"
12:06 < SomeoneWeird> wat
12:15 < kschzt> sup. anyone know any reason why npm's utils.tar.pack() insists on always repacking the folder? it looks like it rarely causes a race condition on often referenced packages in a big project
12:17 < kschzt> i'm adding some more locking around pack_() and unpack_() in npm to fix the race condition, which helps, still sometimes the pack() method destroys the tarball just as it's being unpacked to the destination
12:17 < kschzt> isaacs ^
12:18 < kschzt> so i'm thinking, don't pack the tarball if it's already there
12:19 < kschzt> which seems to have fixed the last of the issues (stably installing from clean cache in a loop now)
12:40 < Samuel_Roldan> anyone familiar on how to set forceWatchMethod for grunt.js?
13:18 < _ior> kschzt
13:20 < kschzt> _ior guten tag herr schmidt!@#
13:20 < _ior> moikka herra manninen
13:20 < _ior> fancy meeting you here :)
13:20 < kschzt> trying to track a race condition in npm :|
13:21 < _ior> so i saw@!
13:21 < _ior> i just found a race condition in postgres
13:21 < _ior> admittedly it was my own fault for not reading the documentationw ell enough
13:21 < kschzt> :)
13:21 < _ior> where it tells you not to do what i was doing :)
13:22 < _ior> otoh, your database is quite possibly the last place you expect to find race conditions
13:32 < Bobobob> hello all
13:33 < Bobobob> i'm getting a configure error - invalid syntax on an if statment when I try to compile 0.9.7 on redhat/centos 5.8.  has anyone run into this before?
13:33 < ogny> aslinda gerekyok be abi bosver, sagol
13:33 < ogny> so sorry
13:35 < thanpolas> any idea why when i 'include' another template in ejs templates using express i get too many redirects? 
13:36 < thanpolas> any idea why when i 'include' another template in ejs templates using express i get too many redirects? 
13:37 < thanpolas> hum, my client went bananas, was my last msg sent?
13:44 < manuelbieh> whats the easiest way to have all forever scripts restarted automatically after a server restart?
13:46 < geNAZt> init.d
13:48 < manuelbieh> this one looks good
13:48 < manuelbieh> http://savanne.be/articles/deploying-node-js-with-systemd/
13:49 < geNAZt> why not init.d oO
13:51 < sethetter> I'm using jshint with vim and it's complaining about require(). Is there an easy way to stop that from happening?
13:53 < geNAZt> http://www.jshint.com/docs/
13:53 < thanpolas> sethetter read jshint's documentation, you can exclude this
13:53 < geNAZt> tell jshint that u are using nodejs
13:54 < sethetter> Thanks guys
14:00 < solidoodlesuppor> Morning y'all
14:03 < rideh> preferred way to keep something running? upstart, forever, etc?  Most of the materials i'm finding are 1-3 yrs old not finding anything more current.
14:03 < brettlangdon> rideh, I use forever
14:03 < geNAZt> rideh: to keep what running ? a process ? a webservice ?
14:05 < rideh> geNAZt: sorry, node app, behind nginx. I should mention i forked off a project that looks to utilize something called "nodemon" perhaps i just need to make this run on boot?
14:05 < rideh> nvm, seems to be for dev instead
14:06 < _ior> dostuff.sh: #!/bin/bash   killall -9 node     node myfile.js
14:06 < _ior> then:
14:06 < _ior> cron * * * * * 1 dostuff.sh
14:06 < SomeoneWeird> wat
14:06 < SomeoneWeird> -.-
14:06 < geNAZt> _ior: wtf
14:06 < _ior> perfect solution!
14:06 < geNAZt> yes
14:06 < _ior> so long as you don't need to keep anything in memory...
14:06 < rideh> forever nodemon --exitcrash server.js  looks like nodemon has something for working with forever
14:06 < geNAZt> if you want to terminate your node
14:07 < SomeoneWeird> node -e "while(true) { require('child_process').exec('./dostuff.sh'); }"
14:07 < SomeoneWeird> while we're at it
14:07 < sethetter> Having /*jshint node: true*/ should make jshint stop complaining about require() right?
14:07 < SomeoneWeird> try nodejs
14:07 < geNAZt> SomeoneWeird: i loled hard :D
14:07 < _ior> woops, as usual i had my cron syntax backwards
14:07 < _ior> 1 * * * *, of course
14:08 < geNAZt> that doesnt make it better
14:08 < _ior> no, you're right, it's still only once an hour
14:08 < _ior> * * * * *
14:08 < _ior> :D
14:08 < SomeoneWeird> mines better
14:08 < SomeoneWeird> if you're gunna do something gotta do it right
14:08 < SomeoneWeird> lolol
14:08 < geNAZt> yes shutdown node every minute or create 1500000 processes :D
14:08 < geNAZt> nice
14:09 < _ior> #'(lambda (x) (x))
14:09 < _ior> there, done.
14:09 < _ior> everything, ever.
14:09 < rideh> brettlangdon: yeah i thinkn i''l stick with forever, not so sure about this other stuff they are cooking up 
14:09 < SomeoneWeird> 42
14:09 < SomeoneWeird> 137
14:09 < SomeoneWeird> rideh, good idea
14:09 < SomeoneWeird> if you want something more advanced look into monit
14:09 < brettlangdon> rideh, take the time to read the docs on it, has some nice features, like you can use it to manage non-node apps too
14:10 < rideh> brettlangdon: good as i'll need to keep elasticsearch going too
14:10 < rideh> SomeoneWeird: i saw something about upstart+monit i need to keep it simple for now, still learning
14:26 < niix> yo!
14:51 < geNAZt> does someone know a better library for muxing streams ? currently i am using mux-demux but i lacks support for connection container and its protocol uses json so you cant stream binary data
14:59 < kschzt> lockfile.js's locks have two keyholes :p
15:13 < Mikicacarica> http://bit.ly/WQ4xl8
15:20 < coreygriggs> anybody have experience migrating a lamp-stack app to node?
15:21 < ckknight> coreygriggs: yeah, but it was really more of a rewrite
15:21 < ckknight> version 2.0 kinda deal
15:23 < _ior> doing that at work right now, myself
15:23 < _ior> and yeah, total rewrite
15:23 < _ior> ... except i guess i kept the databases the same
15:24 < coreygriggs> any advice for/against? we're strongly considering it at work right now
15:24 < geNAZt> someone works with streams ? directly from the api ?
15:24 < _ior> advice for: php sucks
15:25 < _ior> advice against: node can be tough to sell to management since it's pre1.0
15:25 < ckknight> coreygriggs: have a test suite.
15:25 < ckknight> coreygriggs: if you have testing, then you can implement each part one at a time and not mess up the whole system by one change, since you'll know ASAP.
15:25 < geNAZt> coreygriggs: nodejs handles much more requests in less ram or cpu time
15:26 < ckknight> coreygriggs: in doing so, you can keep the same DB for part of the migration, maybe you'll want to change it up later, who knows.
15:26 < ckknight> although starting from scratch is very tempting and can be the best solution in some cases, it isn't necessarily the wisest thing.
15:26 < ckknight> you wouldn't want to spend 2 months on a project just to get to where you are right now.
15:27 < coreygriggs> yeah we're really hoping it would scale better in node
15:27 < coreygriggs> ckknight: do you use some sort of TDD framework or is there one you'd recommend for node?
15:27 < ckknight> node has a bunch of good ones
15:27 < ckknight> I'm not sure what the most popular one out there is now. Maybe vows.
15:28 < ckknight> coreygriggs: scaling with node is way, way simpler than any other system I've worked in.
15:28 < ckknight> especially if you do things smartly from the get-go
15:28 < ckknight> like putting cache in Redis instead of local objects and such
15:28 < ckknight> then scaling just means spawning new processes
15:30 < coreygriggs> ckknight any experience with socket.io along with node?
15:31 < ckknight> coreygriggs: yeah, that's a fun one. :)
15:31 < ckknight> made a chat app
15:32 < ckknight> coreygriggs: it's best to just see it simply as another input/output mechanism between your server and client. Then the conceptual complexity just kinda goes away
15:32 < zomg> coreygriggs: what sort of lamp app do you have that you're thinking of migrating?
15:32 < geNAZt> https://gist.github.com/4623074 what am i doing wrong ?
15:33 < coreygriggs> zomg: it's a classroom management app
15:33 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
15:33 < zomg> coreygriggs: so mostly traditional page load or ajax stuff?
15:33 < coreygriggs> zomg: from what I'm aware so far, a good bit of ajax, but I just started a couple of weeks ago
15:34 < coreygriggs> just getting into it really now
15:34 < zomg> I see.. what is the reason you're looking to migrate it to node?
15:34 < ckknight> anything that migrates away from PHP I consider a small victory
15:34 < ckknight> :P
15:35 < zomg> Yeah if you wanna do extra work for no reason =)
15:36 < mscdex> zomg: the reason is webscale!
15:37 < coreygriggs> zomg: trying to modularize the app and also handle more on the client side
15:38 < zomg> Okay.. from what I've heard so far I can't really say that you would be gaining significant benefits from moving to node
15:38 < zomg> Unless you have people in your team who are familiar with node, it would most likely be a pretty big project since it would be a brand new platform for everyone involved
15:39 < geNAZt> no suggestions ?
15:40 < coreygriggs> zomg: that's part of why I'm asking around - our product manager wants to talk to a node guru about a move for us
15:40 < ckknight> I can pretend to be a node guru
15:40  * ckknight floats two feet above the ground
15:40 < ckknight> I lack the beard, though
15:40 < ckknight> thus my downfall
15:41 <@isaacs> kschzt: interesting.  never seen that.
15:41 < coreygriggs> ckknight: sans beard you should still chat with our PM 
15:41 < CookieMonster> Are there any know issues with segmentation faults on ARMv6 with node 0.8.18?
15:42 < CookieMonster> I'm having trouble on Arch Linux on an RasPi: https://github.com/archlinuxarm/PKGBUILDs/issues/362
15:42 < emkei> Does anyone knows whether I can recompile mongoose models on each node.js restart?
15:45 < brettlangdon> geNAZt, I think you have to implement your own write method
15:47 < brettlangdon> geNAZt, but looks like they are in the process of changing the module
15:50 < CoverSlide> CookieMonster: might be because of --shared-v8 I've had problems with that on upstream
15:51 < CookieMonster> CoverSlide: what do you suggest - manually compiling it with its own v8?
15:51 < CoverSlide> yes
15:52 < CoverSlide> unfortunately
15:52 < CookieMonster> CoverSlide: okay, then I'll try that. Thanks. :)
15:52 < CoverSlide> CookieMonster: https://github.com/archlinuxarm/PKGBUILDs/blob/master/community/nodejs/PKGBUILD#L73-L75 << remove these three lines, then makepkg
15:53 < CookieMonster> CoverSlide: ah, that's pretty straightforward. Thanks!
15:55 < geNAZt> brettlangdon: the api markdown says, that a writeable stream has these methods ? or is it only true for the super class ?
15:56 < brettlangdon> geNAZt, yeah, I noticed that too, but if you look at the source for the stream module in 0.8.18 they are not there
15:56 < brettlangdon> probably why it is marked as unstable
15:56 < brettlangdon> https://github.com/joyent/node/blob/v0.8.18/lib/stream.js
15:57 < geNAZt> only the piping oO
15:57 < brettlangdon> yeah, but if you look at the module under master there are a bunch of changes
15:57 < brettlangdon> I didn't really go through them, but, they introduction readable and writable streams
15:58 < brettlangdon> https://github.com/joyent/node/blob/master/lib/stream.js
15:58 < geNAZt> the duplex streams would be nice :D
15:59 < Kosch> jan____: any recommendations where to start? ;)
16:01 < geNAZt> brettlangdon: in the curernt unstable release it is built in
16:01 < brettlangdon> nice
16:02 < rekcor> maybe a stupid question: How can I install NodeJs on Windows on a different location than c:\program files\nodejs?
16:02 < geNAZt> copy the node.exe :D
16:02 < rekcor> (our ICT department set these folders to readonly)
16:02 < cloudbender> good morning
16:02 < rekcor> thats all?
16:03 < rekcor> and how would this out-of-context node.exe know of the libs etc?
16:03 < geNAZt> which context ?
16:03 < rekcor> I can install nodejs, but I cant add modules, as the nodejs folder and its descendants are r/o
16:04 < rekcor> how would node.exe know where my nodejs modules are
16:04 < rekcor> ?
16:04 < geNAZt> it is written in the api where node looks for them
16:07 < rekcor> mmm... ok ic, but that would make me have to change the js files of the Drupal Nodejs integration... 
16:07 < geNAZt> even the streams in the unstable branch arent completet
16:07 < rekcor> it would be nicer if the Windows installer would ask for a destination folder
16:10 < rekcor> anyway, thanks
16:11 < cloudbender> rekcor can you run the installers as administrator ?
16:13 < kschzt> isaacs, I'm currently looking at lockfile, which seems to give pack() and unpack() the lock simultaneously, rarely.. slow going as it only happens rarely on a large project :) sent you an email
16:13 <@isaacs> kschzt: kewl
16:27 -!- mode/#Node.js [+o ryah] by ChanServ
16:41 <@isaacs> kschzt: just saw your email.  
16:41 < MI6> joyent/node: isaacs master * 5d3c51d : test: Add test for negative stream drain counter (+2 more commits) - http://git.io/uPCOKQ
16:42 < Raydiation> is the nodejs concept also possible with other languages than js? like for instance python
16:43 < Raydiation> a friend of mine programmed a small wsgi server in c that works with the event loop
16:45 < bradleymeck> is 'ipc' the only way to make a duplex stdio?
16:45 < bradleymeck> Raydiation: look at `wt` for C `twisted` for python and `eventmachine` for ruby
16:45 < bigkevmcd> Raydiation: the asynchronous nature of Node.js? Try Twisted for Python...
16:45 < Raydiation> ty
16:46 < bradleymeck> Raydiation: but beware, some libraries expect to be in threads and will ruin your performance
16:46 < bradleymeck> since they block out the rest of the event loop while doing things synchronously
16:48 < Raydiation> database libs?
16:48 < MI6> joyent/libuv: isaacs created tag node-v0.9.8 - http://git.io/DskTLA
16:48 < bradleymeck> Raydiation: potentially yes
16:49 < bradleymeck> anything that uses a return value for a long running operation in w/e language
16:50 < MI6> joyent/node: Fedor Indutny master * 82f1d34 : tls: make slab buffer's size configurable  see #4636 - http://git.io/5dsS0Q
16:51 < mirkok> Raydiation: Luvit is pretty cool - its basically Node.js for Lua
16:54 < Raydiation> btw, what are the frameworks you use with node?
16:54 < Raydiation> express?
17:00 < Raydiation> also, how do you serve static files?
17:00 < Raydiation> via apache?
17:02 < CrawfordComeaux> if I require("mymodel") and mymodel.js has require("mongoose"), do I need to require it when using mymodel?
17:02 < klaemo> CrawfordComeaux: no
17:02 < CrawfordComeaux> thx
17:02 < CookieMonster> Raydiation: it depends, you can server static files from node, or use Apache or nginx (the latter being the better choice imo)
17:02 < CookieMonster> Or any other httpd, for that matter
17:04 < Raydiation> CookieMonster: ty :)
17:08 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:14 < MI6> joyent/node: isaacs master * e722ca3 : npm: Upgrade to v1.2.3 (+2 more commits) - http://git.io/t3SK1A
17:18 < MI6> joyent/node: isaacs created branch v0.9.8-release - http://git.io/pBtQIg
17:49 < draginx> why is nodejs slow at creating 30 directories? O_o
17:50 < ckknight> draginx: are you doing it synchronously?
17:50 < draginx> nope
17:50 < ckknight> can I see your code for it? I'm curious.
17:50 < draginx> wel sort of ish.. the function itself isnt Sync but it might be a in a sync block actually... now to think of it hmm
17:50 < matthew-> err, npm seems to actually source in README.md, and if your README.md gets too big, npm then blows up when it tries to run any script with "execvp(): Argument list too long". Anyone else come across this?
17:56 < CrawfordComeaux> what's the node way to see if an array contains a value?
17:56 < ckknight> CrawfordComeaux: the javascript way is array.indexOf(value) !== -1
17:56  * CrawfordComeaux hangs his head in shame
17:56 < ccowan> array.length if you want to see how many
17:57 < ccowan> ~array.indexOf(value) works too
17:57 < CrawfordComeaux> oh that's cute
17:57 < ckknight> I'm not fond of bitwise tricks
17:58 < ckknight> I think it creates a barrier between the actual code and the clarity of what it's doing
17:58 < CrawfordComeaux> agreed
17:58 < ckknight> you gotta think, oh yeah, -1 will be turned into 0 by bitwise not, and therefore 0 is falsy so every other value won't be, therefore the item exists
18:01 < Gabriel403> Also indexOf is only supported in ie 9 and later if you're doing it client side
18:01 < ccowan> ^^^ argh!
18:02 < ckknight> thus why you should use a shim
18:03 < ccowan> ckknight: or just know that ~array.indexOf() just works like you want ;)
18:04 < ckknight> ccowan: I still think there's a mental barrier due to the cognitive complexity of bitwise not.
18:05 < TheEmpath> bitwise has its use cases when you are dealing with very high traffic socket communication
18:06 < TheEmpath> and FSM
18:06 < staropram> about the event loop in node
18:06 < staropram> if two events arrive near enough at the same time, A, and B
18:06 < staropram> in what order are they processed?
18:08 < staropram> nodejs is single threaded right, so libev presumably queue's the events and passes them to node in the order they arrive right?
18:08 < staropram> does nodejs maintain it's own stack of events then?
18:09 < TheEmpath> events are processed in N order.
18:09 < TheEmpath> or should i say
18:09 < ckknight> staropram: node would read from the stream, process the data in it, and continue to read, so in essence, it wouldn't necessarily be keeping any data in memory outside of the unread stream buffer
18:09 < TheEmpath> they are queued in N order
18:10 < TheEmpath> and processed in the sequence in which they are queued
18:10 < staropram> right, and one at a time?
18:10 < staropram> so the next event isn't processed until i complete the first event?
18:10 < ckknight> correct
18:10 < staropram> so why is it called non-blocking?
18:10 < staropram> If it has only one thread, wouldn't it be more correct to describe it as "always blocking"
18:10 < staropram> since every event blocks
18:10 < ckknight> because IO doesn't block.
18:11 < ckknight> which is the major blocking aspect of most programming
18:11 < Ramone> <staropram> so the next event isn't processed until i complete the first event?    <---- no.
18:11 < TheEmpath> http://en.wikipedia.org/wiki/Thread_pool_pattern
18:11 < Ramone> the next one can start processing before the first one finishes
18:11 < TheEmpath> correct
18:11 < staropram> so it's not a single thread then
18:11 < staropram> it's a thread pool
18:11 < ckknight> yeah, but from the perspective of the node developer, that's irrelevant, since it's single-threaded
18:11 < staropram> it can't both be single thread and non-blocking
18:12 < staropram> from the perspective of events anyway
18:12 < ckknight> it uses threads on the backend
18:12 < ckknight> that just isn't exposed to JavaScript
18:12 < TheEmpath> via a thread pool
18:12 < ckknight> or at least, it can use threads
18:12 < ckknight> depending on the system
18:12 < TheEmpath> the applicaiton process is single threaded
18:12 < staropram> but normally, the events would block or not?
18:12 < ckknight> in windows, IOCP is used
18:12 < TheEmpath> libev, i believe, handles the thread pooling
18:13 < TheEmpath> or v8… ugh… its been a while
18:13 < ckknight> staropram: since JS is single-threaded, from your perspective, an event is processed one at a time and the next event will not be processed until the first is "done"
18:13 < Ramone> ckknight: not true
18:13 < staropram> Ramone: in the default install is it true?
18:13 < ckknight> I'm talking from the perspective of the node.js user
18:13 < Ramone> me too
18:13 < staropram> so i just setup a basic js, and i fire a bunch of connects to it
18:14 < Ramone> the events will fire in order, but the handlers have arbitrary code in there? you can't gaurantee that one finishes before the next starts
18:14 < staropram> is more than one connect processed symultaneously or not?
18:14 < TheEmpath> think of it like an ad agency.. you call them up and say "YO I NEED 1000 PIG STATUES FOR A PR STUNT"  and the ad aganecy says "got it!"  the guy on the phone issues the order to the actual workers to start making hte statues
18:14 < Ramone> especially since there could be i/o in the handler
18:14 < ckknight> Ramone: as long as there's no inversion of control (callback passing), you can guarantee that.
18:14 < TheEmpath> someone else calls the ad agency and orders a video production.  ad agency guy says "no prob!" and tells his tv department to get to work
18:15 < MI6> joyent/node: isaacs master * 6e05faa : test: Add transform objectMode test - http://git.io/EZ-WLA
18:15 < TheEmpath> now this guy handling all of the calls to the ad agency?  thats your application.  people calling the ad agency?  those are external requests (presumably users)  the dudes making pig statues and making videos?  those are the workers
18:15 < Ramone> ckknight: yeah as long as its all cpu work, and you don't do i/o? that's not even close to the general case though
18:15 < ckknight> I know, but that's what I was referring to
18:15 < TheEmpath> the application is, literally, a single person and can only do one thing at a time
18:16 < TheEmpath> but he can defer to his workers.  in the meantime, he'll keep a tab on the workers
18:16 < Ramone> like if you're doing web stuff that talks to a database
18:16 < ckknight> staropram: the connects will be received all concurrently, but on processing, as long as there aren't any async calls, it will be handled in a typical single-threaded manner.
18:16 < staropram> right
18:16 < staropram> so it's totally blocking then
18:16 < staropram> whereas if I forked traditionally i'd be non-blocking
18:16 < ckknight> yes, but no one would code in that way
18:16 < ckknight> since any major wait time would be IO
18:16 < ckknight> which is async by default
18:17 < Ramone> it doesn't block on i/o
18:17 < Ramone> that's the key
18:17 < staropram> but i/o has always been async
18:17 < ckknight> in node, yes
18:17 < ckknight> but not in other systems.
18:17 < staropram> that's why sockets in c have a SOCK_NONBLOCK option
18:17 < Ramone> in ruby you'd need eventmachine to do this? in python you'd need twisted
18:17 < ckknight> something along those lines, at least
18:17 < staropram> that's why they invented DMA
18:18 < staropram> so that i/o could be non-blocking from the memory bus perspective
18:18 < niix> vineapp is pretty cool
18:19 < staropram> but you rely on libev yourselves
18:19 < CoverSlide> not anymore
18:19 < staropram> oh really, what do you use now then?
18:19 < CoverSlide> if it were that simple then there wouldn't be a need for libev / libevent / eventmachine / twisted / gevent
18:20 < CoverSlide> libuv, it's basically the cross-platform event layer that node uses. it used to be dependant on libev, but they've rewritten that part and removed the dependancy
18:21 < CoverSlide> it was made mostly because libev didn't work on windows
18:21 < staropram> what's libuv written in?
18:21 < CoverSlide> but C
18:21 < CoverSlide> *C
18:22 < CoverSlide> you can chat with the folks in #libuv about it
18:22 < staropram> heh
18:22 < staropram> sure
18:22 < staropram> But essentially semantically it makes more sense to say node is always blocking
18:22 < staropram> since events are processed sequentially
18:23 < staropram> By a "single thread" as is constantly stated
18:23 < CoverSlide> the cpu always blocks
18:23 < CoverSlide> if you have 4 cores, then your program will block at least one core
18:24 < CoverSlide> doesn't matter if you use threads or not
18:24 < staropram> not if i have multiple threads or processes
18:24 < staropram> you can't call "blocking" scheduling
18:24 < daurnimator> is there some lib that give me the normal browser createDocument api?
18:24 < staropram> of course technically the cpu only does one thing at a time, although it doesn't because it pipelines, but yeah
18:24 < staropram> but that doesn't really make a compelling argument
18:24 < staropram> scheduler blocks for nanoseconds
18:24 < staropram> but an event can block for as long as it wants
18:24 < ckknight> staropram: let the benchmarks be the compelling argument, then.
18:25 < staropram> i don't really care about the benchmarks, i like nodejs
18:25 < staropram> i think it's a nice framework to use
18:25 < staropram> i just have an issue with some of the terminology
18:26 < CoverSlide> the io part is non-blocking
18:27 < staropram> as i said, io has always been non blocking
18:27 < staropram> that's why interrupts were invented
18:27 < staropram> for drivers
18:27 < staropram> but let's just forget it
18:28 < CoverSlide> it's not exactly that simple. there's a reason libevent, libev, and libeio were created 
18:28 < staropram> not the reason you think
18:28 < CoverSlide> enlighten us
18:28 < staropram> it's just a style of coding
18:29 < staropram> how do you think you can play an mp3 and watch this screen at the same time?
18:29 < staropram> multi-process and multi-threading is fine
18:30 < CoverSlide> exactly
18:30 < CoverSlide> node uses multi-process instead of multi-threading
18:30 < Ramone> this is single-thread non-blocking though
18:30 < AAA_awright> staropram: When people say "non-blocking I/O" they do not refer to the hardware, they refer to the programming language
18:31 < AAA_awright> staropram: If all I/O is really non-blocking then why would people bother using the term?
18:31 < CoverSlide> it's a simple limitation of the language. there are packages that add threading to node anyway
18:32 < isaacbw> I just got this in the mail: http://www.insigniaproducts.com/products/home-audio-systems/NS-CD512.html
18:32 < isaacbw> and the cd player wouldn't open, so I spent an hour fiddling around inside and finally fixed
18:32 < isaacbw> it
18:32 < CoverSlide> not memory-sharing threads, like i said that's a limitation of the language
18:32 < staropram> AAA_awright: it would depend on the level of abstraction
18:32 < isaacbw> I'm so proud of myself 
18:32 < staropram> AAA_awright: and whether the HW has DMA
18:33 < ckknight> some languages with "blocking" IO put the main thread into a sleep-like state until an IO operation has returned
18:33 < AAA_awright> staropram: The term, again, has nothing to do with the hardware. When we refer to hardware we talk of interrupts, not asynchronous
18:33 < ckknight> node only does that if you use the Sync functions
18:33 < staropram> so what i/o are you talking about?
18:33 < AAA_awright> In the programming language
18:33 < staropram> waiting for data on a socket?
18:33 < ckknight> that can be one form of IO, yes.
18:33 < AAA_awright> Can you make a request that's filled at a later date
18:34 < AAA_awright> If so, that's asynchronous
18:34 < MI6> joyent/node: isaacs created tag v0.9.8 - http://git.io/f27oew
18:34 < staropram> ok, as I already said, BSD sockets have SOCK_NONBLOCK option
18:34 < staropram> so sockets have always had the option to be non-blocking
18:34 < AAA_awright> Right, it's been around
18:34 < staropram> since TCP was invented
18:34 < AAA_awright> staropram: But not many things like DNS
18:34 < ckknight> that's all abstracted away and irrelevant to the programming style of node
18:34 < AAA_awright> And filesystem
18:34 < MI6> joyent/node: isaacs master * f64742e : Now working on v0.9.9 (+2 more commits) - http://git.io/B3Girw
18:34 < AAA_awright> Well, yeah
18:34 < staropram> it's the fact it's abstracted away
18:35 < staropram> that's the thing
18:35 < staropram> but it's still blocking as much as everything else
18:35 < staropram> you've just created an abstract viewpoint where you can say it doesn't block
18:35 < ckknight> IO operations do not block.
18:35 < CoverSlide> because the code you write you don't have to worry about sleep state or putting it on a thread
18:35 < ckknight> CPU operations block on the main (read: only) Javascript thread
18:35 < MI6> joyent/node: isaacs v0.8 * 7f6054c : blog: Post for v0.9.8 - http://git.io/iUAAEw
18:36 < staropram> so you never have applications that need threads in node?
18:36 < ckknight> nope, never.
18:36 < staropram> lol
18:36 < ckknight> if I need scalability, I'll use processes.
18:36 < CoverSlide> people usually spawn worker processes, it works out
18:36 < ckknight> and sharing through something like Redis
18:36 < ckknight> or worker processes.
18:36 < CoverSlide> threads aren't a necessiry
18:36 < staropram> oh "worker process", not thread rigghht
18:37 < daurnimator> createElement in node.js? how?
18:37 < ckknight> daurnimator: node.js has no relation to the DOM
18:37 < daurnimator> ckknight: okay, but surely theres a library that provides it?
18:38 < ckknight> daurnimator: there are libraries that emulate the DOM in node. Why do you want it?
18:38 < ckknight> I often will run even simple node web servers on 4 simultaneous processes, staropram
18:38 < daurnimator> ckknight: I have a library that does xml handling via the DOM I want to use in a node.js project
18:39 < CoverSlide> you can pass file descriptors around to other processes very easily, so sharing IO between processes is trivial
18:39 < CoverSlide> shared state and threading is a non-trivial problem
18:40 < CoverSlide> which people are still trying to get right
18:40 < staropram> dunno, postfix seems to do a good job
18:40 < ckknight> mutable state is a non-trivial problem, imo
18:41 < chovy> aandy: i use mongodb
18:46 < janmower> want shared state?  #include <sys/shm.h>
18:47 < janmower> shared state and threading might not be trivial but there are alot of solved problems to look at
18:48 < niggler> no love for sys/mman?
18:49 < niggler> mmap/shm_open always seemed friendlier than shm{at,get,dt}
18:49 < janmower> it's been years but yea those were the better ones
18:50 < niggler> lol __cacheline_aligned_in_smp
18:50 < niggler> i find that middleware write-once-read-never (WORN?)
19:02 < daurnimator> elijah-mbp: are you tmpvar?
19:09 < dawolf> anyone of you compiled node.js on a raspberry pi recently?
19:09 < dawolf> i roughly followed this: http://blog.tomg.co/post/21322413373/how-to-install-node-js-on-your-raspberry-pi and failed to compile (after an hour)
19:09 < dawolf> i guess going for 0.6.18 instead of .15 might be a good idea?
19:10 < C0deMaver1ck> dawolf: I followed this from TooTallNate
19:10 < C0deMaver1ck> http://n8.io/cross-compiling-nodejs-v0.8/
19:11 <@TooTallNate> dawolf: C0deMaver1ck: i've been putting binary tarballs in the /dist dir on nodejs.org as of recently as well
19:11 <@TooTallNate> http://nodejs.org/dist/v0.8.18/
19:11 <@TooTallNate> http://nodejs.org/dist/v0.8.18/node-v0.8.18-linux-arm-pi.tar.gz
19:11 < CoverSlide> C0deMaver1ck: have you had any issues? cross-compiling might be a bit more ideal than compiling on the pi itself
19:11 < Astraea> Could someone point me to a guide or reference explaining what views and|or routes are?
19:11 < dawolf> great, thanks. will give it a try
19:12 < Astraea> The node tutorials I'm reading assume the reader already knows what a view engine is and why you'd want to use it.
19:12 < Astraea> (Same with routes)
19:12 < CoverSlide> Astraea: routes are patterns that are matched by the URL path sent to the http server
19:12 < CoverSlide> when the URL matches a pattern, it runs the function(s) attached to that pattern
19:13 < C0deMaver1ck> CoverSlide: not that I can remember but I haven't done it in a few months
19:13 < Astraea> That seems simple enough. So the functionality if built into the server.use() function? And do they match using Regex objects?
19:13 < Astraea> *is built
19:13 < CoverSlide> a view is a template for displaying the data, usually output in HTML
19:14 < CoverSlide> Astraea: it's built into the express router
19:14 < CoverSlide> Astraea: I'm assuming you're talking about express
19:15 < Astraea> Ah, I wasn't specifically, but the starting node tutorials are express heavy.
19:15 < CoverSlide> it does use regexes internally. you can also use a regex as your route. otherwise the pattern "/users/:user/:id" or whatever gets converted into a regex
19:16 < CoverSlide> perhaps that should be :user_id, but that's just an example
19:16 < Astraea> Thanks for the answers. You don't have a link handy explaining how the view engines work, do you?
19:16 < Havvy> Astraea: They are general engines that build a function that you pass an object to get a string of HTML.
19:17 < Astraea> I guess I should just pick one and read some documentation.
19:17 < Astraea> Thanks again.
19:18 < PARLIAMENT> When you call .listen(port) on an HTTP server object, does node fork?
19:18 < PARLIAMENT> or create a thread?
19:19 < PARLIAMENT> or is it just still a single threaded event pump model
19:19 < brettlangdon> PARLIAMENT, single threaded
19:20 < PARLIAMENT> is there a fairly robust fork of Node which forks?
19:20 < brettlangdon> there is the cluster module
19:20 < niggler> you couldn't PARLIAMENT -- iirc v8 is single threaded
19:20 < brettlangdon> http://nodejs.org/api/cluster.html
19:21 < CoverSlide> there's also the cluster *package*
19:21 < PARLIAMENT> niggler: but there would be nothing preventing you from running more than one v8 engine right?
19:22 < brettlangdon> CoverSlide, I thought that was superseded by the built in cluster module?
19:22 < CoverSlide> they tried that in v0.7, those are called isolates. the work on that was dropped because the performance gain was minimal compared to spawning a new process, and opened a new can of bugs along the way
19:23 < CoverSlide> well, basically
19:24 < CoverSlide> bit i did like the cluster monitor thing it had
19:26 < CoverSlide> http://izs.me/v8-docs/classv8_1_1Isolate.html#_details << v8 isolate on a separate thread
19:26 < daurnimator> trying to sign up to npmjs.org: There was a problem! The server said: Failed creating account. CouchDB said: socket hang up
19:28 < brettlangdon> daurnimator, try again, I was able to login no problem
19:29 < daurnimator> okay, now I get There was a problem! The server said: Failed creating account. CouchDB said: conflict
19:29 < daurnimator> I spose that means the first time worked?
19:30 < brettlangdon> daurnimator, couldn't tell ya… try logging in, see if it works :)
19:30 < daurnimator> it did ;)
19:30 < daurnimator> so, how can I have a non-node/npm dependancy?
19:31 < PARLIAMENT> CoverSlide: thanks!
19:31 < PARLIAMENT> my coworkers like it
19:32 < CoverSlide> daurnimator: how are you planning on accessing that dependency?
19:33 < CoverSlide> daurnimator: are you talking like an executable?
19:33 < CoverSlide> because npm doesn't really check for stuff like that
19:34 < phun-ky1> loaded up for the evening with two cups of coffee now, looks like an allnigther
19:34 < phun-ky1> all nighter*
19:35 < newz2013> hi anyone have a sample jslint config file that works well with node.js projects (esp declaring predefined vars)?
19:36 < _ior> wow, i'd almost forgotten what a pleasure it is to get a complex project functional from end-to-end
19:36 < medikoo> newz2013:  https://github.com/medikoo/xlint
19:36 < _ior> and for that note, thank you everyone who has contributed to node and npm packages, because damn i never could have managed it so quickly and cheaply with any other tech stack
19:36 < newz2013> medikoo: whoa, awesome, thanks!
19:43 < wendall911> isaacs: Not sure if you know much about the fc18 nodejs packages. Not seeing an npm package available. Know anything about that? I can whip up a working spec, just curious if you know anything.
19:44 <@isaacs> wendall911: i do not know anything about fc18
19:44 < wendall911> isaac: ok, no worries, thanks
19:44 < CoverSlide> the fedora dude comes in here once in a while
19:44 <@isaacs> wendall911: the name is not taken.  you don't need my permission to publish stuff, so go nuts :)
19:44 <@isaacs> wendall911: or is fc18 not an npm thing...
19:44 <@isaacs> i don't even know
19:45 < tjfontaine> fedora core 18
19:45 < wendall911> isaacs: yeah, just no package in updates-testing right now. I'll spin up a repo and create a spec for it. several of the packages are broken, just nodejs is a little naked without npm ;)
19:45 < tjfontaine> wendall911: the guy who packaged node recently said he was working on an npm package
19:45 < wendall911> isaacs: oh, yeah fedora 18
19:46 < CoverSlide> i don't see why he couldn't package it with npm like make install wants it to
19:46 < wendall911> tjfontaine: ok, I guess I'll create one. I hate, hate, hate (understated) how fedora packages are developed in the dark
19:46 <@isaacs> wait.. so you're going to `npm install fc18` to install fedora?
19:46 <@isaacs> that seems... odd
19:46 < wendall911> haha
19:46 <@isaacs> isn't fedora like, an operating system?
19:47 < wendall911> isaacs: haha, no, install npm in fedora from the package manager yum :)
19:47 < azylman> I think he means that fedora is missing a package for npm
19:47 <@isaacs> ohhh
19:47 < CoverSlide> i thought the dropped the `core` part
19:47 <@isaacs> ok
19:47 < CoverSlide> *they
19:47 <@isaacs> gotcha
19:47 < CoverSlide> and it's just fedora now
19:47 <@isaacs> yeah, i don't really care about any of that.
19:47 <@isaacs> debiants have chrislea's thing
19:47 < wendall911> CoverSlide: still referenced as fc18
19:48 <@isaacs> but really, it'd be nice to just have an rpm/deb file n the website
19:48 <@isaacs> signed etc.
19:48 <@isaacs> wendall911: if you send a pull req to enable `make rpm` on centos, i'll be your biggest fan
19:48  * isaacs will eat cheeseburgers until he is bigger than any of your other fans
19:49 < CoverSlide> we have lots of centos guys come in here
19:49 < Gottox> todays work with node.js: http://www.youtube.com/watch?v=o1lK60OtyiE
19:49 < nlf> isaacs: just to draw some attention https://github.com/isaacs/npm-www/pull/229
19:49 < Gottox> sorry for the bad cam, btw.
19:49 < azylman> Woah, that's pretty sick
19:49 < CoverSlide> sweeet
19:50 < azylman> Is the code published? I'd like to see how it works
19:50 < wendall911> isaacs: I might do something of the sort, will see if I can free up some time.
19:50 < Gottox> azylman: https://github.com/c3ks/node-ledpanel
19:50 < phun-ky1> anyone know of an image sprite generator for node that does not require end user to install a trunk full of different native dependencies?
19:50 < azylman> Gott
19:51 < azylman> Gottox: So this is some panel that you guys sell? Where can I buy one?
19:51 < Gottox> azylman: unfortunally no, some guys bought it ages ago.
19:51 < azylman> Aw man
19:51 < Gottox> for the local hackerspace.
19:53 < Gottox> another guy made a new controller, and I wrote a little node-module which takes node-canvas bitmaps and sends it to the panel.
19:56 < _ior> "the local hackerspace" ... you mean c-base? :)\
19:59 < Havvy> Anybody here wanna help me with Jasmine-Node?
20:02 < isaacbw> Havvy, having trouble?
20:03 < Havvy> Err yeah. Got distracted for a second. Let me gist the relevant code.
20:03 < Havvy> https://gist.github.com/4627090
20:03 < Havvy> Line 22 is failing.
20:04 < Havvy> But it's the same exact thing that's being tested for in the waitsFor() function.
20:08 < euoia> Havvy: I don't know jasmine, but surely line 22 is line be ran before either of the anonymous functions provided to runs or waitsFor
20:08 < euoia> Havvy: not sure what happened to my English in that sentence, but I think you get the gist
20:10 < Havvy> euoia: Jasmine-node does some magical things with runs() and waitsFor().
20:10 < Havvy> Hmm...I haven't tried throwing the expectations into a runs() yet. :/
20:10 < azylman> I think you have to put them in the runs
20:11 < azylman> I dunno anything abou Jasmine (literally just opened their docs) but that's what it looks like
20:11 < Havvy> Yeah, I did. Derp. :/
20:11 < euoia> Havvy: no doubt, but you are providing a callback to those functions, which I imagine are executed after the loops drops out
20:11 < Havvy> Thanks.
20:12 < Havvy> Does Node have synchronous event emitters perchance?
20:12 < CoverSlide> event emitters are already synchronous
20:12 < CoverSlide> they are invoked immediately on emit()
20:15 < euoia> Havvy: The example here http://pivotal.github.com/jasmine/ under Asynchronous Support has the expect statement in a final runs()
20:15 < Havvy> Yeah. I have that page open.
20:16 < Havvy> (I go to web docs first)
20:20 < euoia> Havvy: I imagine that the function you pass to runs is not executed immediately, but after the interpreter drops out of the it() function
20:21 < Havvy> euoia: Seems to be that way.
20:21 < timkuijsten> is there a large performance penalty when emitting events without any handlers? thinking about emitting debug events that I won't normally use in production..
20:22 < CoverSlide> TIAS
20:23 < CoverSlide> .emit does 3 if checks before it returns: https://github.com/joyent/node/blob/master/lib/events.js#L55-L79
20:24 < Astraea> I've been a lot of tutorials and examples, but I can't figure out how to structure middleware in the absense of a view engine.
20:24 < CoverSlide> Astraea: just be sure to call end() at some point instead of next()
20:24 < CoverSlide> res.end() i mean
20:24 < timkuijsten> CoverSlide: tnx
20:25 < Astraea> Would you mind taking a look at this etherpad? I've included a short (12 lines) example of how my code is currently structured.
20:25 < Astraea> https://etherpad.mozilla.org/6JEh3pv7bw
20:25 < Astraea> I also included comments about what I'm trying to do.
20:27 < Astraea> I've been using res.send() in the functions that I provide to app.use(). I'm not sure how to structure my middleware stack so that more than one is executed, with a final res.end() call.
20:29 < CoverSlide> express.static already handles whether it should call next() or res.end()
20:30 < CoverSlide> unfortunately, i don't think there's a way to have it pass through and call next when it does get a file match
20:30 < Astraea> I figured that might be the case.
20:31 < CoverSlide> but middelware1 middleware2 middleware3 just be sure that if at some point you end(), you don't next, and vice versa. but you can send from one and send from another
20:32 < Astraea> Gotcha.
20:32 < Astraea> And "/example" is the route, and could be replaced by a RegEx?
20:32 < CoverSlide> it could
20:33 < CoverSlide> or you can do /example/*
20:33 < CoverSlide> and do your regex on req.url
20:33 < CoverSlide> inside your middleware
20:34 < draginx> is 120 req/s for a node app considered really bad? :/ its a simple look in DB + JSON.parse content then res.json() about 30k bytes in total
20:34 < draginx> for 100 requests
20:34 < Astraea> Okay, I think I have enough to try refactoring my code again. Thanks for the help, probably be back later.
20:36 < brettlangdon> draginx, what are you using to benchmark?
20:42 < brainproxy> back in JS mode after 7 months straight mostly clojure... I'm curious, are there any tools,examples of how NodeJS can be used in conjuntion w/ Win8's support for JS-based apps?
20:43 < draginx> brettlangdon: ab
20:43 < CoverSlide> can they?
20:43 < brainproxy> maybe that's not even possible, just starting to hunt around
20:43 < CoverSlide> Win8 is all client-side i think
20:43 < brettlangdon> draginx, not on a mac are you? I've had nothing but terrible luck with ab on mac
20:43 < draginx> brettlangdon: i am buuuut i installed 2.4.3 which fixes those problems
20:43 < draginx> and set ulimit to like 99999
20:43 < brettlangdon> yeah… ok :)
20:44 < brainproxy> CoverSlide: okay, well I thought maybe that's the case, wasn't sure though
20:44 < draginx> i wish I forked the ab brew formula since the original is no longer online
20:44 < brettlangdon> still, I was having a problem, even with 2.4.3 where I could get better performance off of a vm than off of my mac directly
20:44 < draginx> brettlangdon: u can definitely find i tsomewhere though :)
20:44 < switz> is it possible to nest handlebars templates?
20:44 < draginx> really O_o was it slower or faster in reality?
20:44 < Astraea> CoverSlide: To give you an idea, this is what I've got going on at the moment: http://173.69.32.37:7239/blog
20:44 < brettlangdon> draginx, faster
20:44 < draginx> nice :D
20:45 < brettlangdon> I mean, running my code in centos in a vm would yield like 1k req/sec and the exact same code on my mac would yield like 200
20:45 < mrlaw> someone got dumps or tracks ?
20:45 < brettlangdon> I got so fed up with ab, I just wrote my own http benchmarker… in node of course
20:45 < CoverSlide> dumps like a truck?
20:45 < CoverSlide> or you need to eat more fiber?
20:46 < MI6> joyent/node: Jacob Gable v0.8 * 34131af : doc: fix typo in crypto Hash.digest() note  Added the word 'has' to the s - http://git.io/3fu_Vw
20:47 < draginx> brettlangdon: o-o seriously?
20:47 < draginx> brettlangdon: the actual code is on a debian machine
20:47 < brettlangdon> draginx, yeah, check it out: https://npmjs.org/package/tommygun
20:47 < CoverSlide> tommygun, i like the name
20:48 < brettlangdon> thanks
20:48 < draginx> brettlangdon: nice dude, i did try to get beeswithguns to work
20:48 < Astraea> The content is dynamically constructed from the database, and then wrapped in a default template which is the same on the entire site.
20:48 < brettlangdon> we use bees at work, it is awesome
20:48 < brainproxy> CoverSlide: looks like some v8 issues are involved in the incompatibility
20:48 < brainproxy> https://code.google.com/p/v8/issues/detail?id=2427
20:48 < draginx> theres no good tutorial on setting it up o-o
20:48 < brettlangdon> we have a custom fork of it to work with siege and another custom benchmarker
20:48 < brettlangdon> I am not sure, I am not the one who set it up at work
20:48 < draginx> how does tommygun compare to bees?
20:48 < brettlangdon> unfortunately
20:49 < brettlangdon> it does not use ec2, a.k.a it is not distributed
20:49 < Astraea> But the more features I add, the more I want to abstract them and make them modular instead of hard-coding it procedural programming style.
20:49 < brettlangdon> so with bees, it will spin up a bunch of ec2 machines and run ab from each of them to make sure you get the load you want to test
20:50 < brettlangdon> because running ab with a concurrency of 1,000,000 is not practical from a single machine
20:50 < draginx> brettlangdon: no way to do AUTH BASIC or set headers with tg? O_o
20:50 < draginx> brettlangdon: right
20:50 < brettlangdon> draginx, no, I had no need to
20:50 < draginx> damn cant use it then until deploy to live :( thanks :D
20:51 < draginx> ill def keep it in mind
20:51 < brettlangdon> draginx, but, if you create an issue (https://github.com/brettlangdon/tommygun) maybe I'll consider adding it
20:51 < draginx> now for a harder topic does anyone know of a good resource ot look into for looking at raw hex codes for JPEG, PNG, and GIF files? I know how to ge tthe width and height, but can't seem to find the DPI
20:51 < draginx> brettlangdon: thanks :) I may consider coding a solution myself and pushing :D
20:52 < CoverSlide> you'd have to look at the individual file specs
20:53 < draginx> CoverSlide: there's no universal thing for DPI? I know JPG has a universal signature
20:54 < CoverSlide> hmm DPI possibly might be in the pHYs block
20:54 < CoverSlide> https://irfanview-forum.de/showthread.php?t=7750
20:56 < draginx> CoverSlide: ah wow this is an awesome resource thank you :)
21:02 < brettlangdon> draginx, basic auth is supported, check comment in issue
21:02 < draginx> using headers though (im asuming ur trying to use URL?)
21:02 < draginx> oh
21:02 < draginx> nice man
21:03 < draginx> brettlangdon: now the next question is i wonder how the headers thing will work :D
21:03 < brettlangdon> draginx, working on it
21:04 < brettlangdon> I think what will happen is you'll have to supply headers as a JSON string in config and then I can parse out in
21:09 < Astraea> When I use express_app.use(/path/resource), req.path is set to /resource (/path is stripped).
21:10 < Astraea> However, when I use express_app.get(/path/resource), req.path is set to /path/resource.
21:10 < Astraea> What is the benefit of using app.get() and app.post() instead of app.use(), and handing the method manually?
21:11 < brettlangdon> draginx, headers work now too
21:12 < brettlangdon> pushed new version to npm
21:12 < draginx> awesome is npm updated?
21:12 < draginx> thaaanks :D
21:12 < brettlangdon> draginx, thanks for taking an interest, open up more issue tickets if nothing works
21:12 < draginx> will do :)
21:12 < brettlangdon> wouldn't mind keeping up on this project/maintaining it
21:15 < ddsss> npm is ised for server-side packaging...  or in browser-world as well?
21:15 < azylman> server side
21:15 < azylman> It's specific to node
21:15 < azylman> npm = Node package manager
21:15 < tylersmith> ddsss: perhaps you want something like components?
21:15 < ddsss> azylman, i see. thanks.
21:15 < azylman> There's also bower
21:16 < ddsss> tylersmith, what are components?
21:16 < azylman> https://github.com/twitter/bower
21:16 < tylersmith> ddsss: http://tjholowaychuk.com/post/27984551477/components
21:16 < Havvy> Twitter has public Git repos?
21:16 < azylman> Yes
21:16 < azylman> Bower and Bootstrap
21:16 < azylman> Both made by twitter, both public
21:16 < azylman> They have other publoic stuff too but I don't think they're as popular
21:16 < Havvy> Ah, right. Twitter Bootstrap.
21:17 < azylman> But maybe if you use scala you're familiar with them
21:17 < azylman> I don't
21:23 < CoverSlide> scala would be nice if it didn't take years to compile anything
21:24 < azylman> I've never used scala, but I assume its compile times have an lower bound on java compile times
21:24 < isaacbw> any functional language compiler is basically magic
21:24 < azylman> And even that can be bad for big projects
21:24 < isaacbw> and magic is computationally expensive
21:26 < CoverSlide> ain't nobody got time for that
21:28 < darach> magic can also be side-effect free, composable and scale trivially on many core
21:29 < azylman> It can also summon beautiful pink unicorns who spew rainbows from their mouth in place of vomit
21:29 < isaacbw> I've always wanted to invest time in learning Haskell
21:29 < azylman> I want to learn Clojure
21:29 < azylman> I've used Racket a lot in the past and really liked it
21:29 < darach> azylman - Yup. That actually happened in Kennedy's at Node Dublin :)
21:30 < azylman> lol
21:30 < azylman> I have no interest in Haskell just because what I've seen of the Haskell community is not encouraging
21:30 < CoverSlide> what have you seen?
21:30 < azylman> A bunch of supercilious people who think that if you don't use Haskell you don't really know anything about software
21:31 < azylman> But maybe that's just the subset of Haskell programmers who also frequent hacker news
21:31 < darach> Haskell folk are amazing. Simon Peyton Jones is one of the funniest language authors ever
21:32 < darach> I was lucky to catch Simon Peyton Jones and Joe Armstrong keynote together. It was like being inside a weird geeky lambday monty python sketch.
21:32 < azylman> lol
21:32 < darach> Clojure / Rich Hickey also awesome...
21:33 < mlebrun_> anyone have experience with flatiron's router?
21:33 < CoverSlide> if you put the three of them in a thunderdome who do you think would win?
21:34 < darach> John Hughes would win
21:34 < azylman> If you threw Guido van Rossum in there, I'd bet on him
21:34 < jcrugzz> mlebrun_: whats giving you an issue?
21:35 < azylman> Any guy whose wikipedia photo is this has to be a bamf: http://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Guido_van_Rossum_OSCON_2006.jpg/200px-Guido_van_Rossum_OSCON_2006.jpg
21:35 < darach> The other 3 are very hard to get to troll each other :)
21:35 <@mbalho> mlebrun_: do you mean director?
21:36 < mlebrun_> yes, director. but more specifically within flatiron, not standalone (which obviously isn't TOO much of a difference)
21:36 <@mbalho> mlebrun_: ahh i have only used it standalone
21:36 < darach> I'd start throwing whitespace around with gay abandonment... mwa ha ha
21:36 < mlebrun_> i don't think it should be too too different.
21:36 < mlebrun_> anyways
21:37 < mlebrun_> when it says you can use the mount() method to load in partial routes, and the path is the second arg, does it expect a format like mount( { get: [function_name] }, '/puupies' ); ?
21:37 < mlebrun_> and if not, how exactly do you use mount() ?
21:39 < ddsss> tylersmith, looks like 'volo' is the one for the browser world.
21:40 < tylersmith> ddsss: nice, I'll check it out, thanks
21:47 < isaacbw> you guys suck
21:47 < isaacbw> I just ordered a haskell book on amazon
21:47 < isaacbw> I don't have money for that
21:47 < ddsss> tylersmith, ahh. bevermind. looks like component and bower are similar in purpose to volo. the all package managers for the browser js.
21:47 < CoverSlide> ain't nobody got money for that
21:48 < Havvy> isaacbw: There's Haskell books on the Internet
21:48 < CoverSlide> isaacbw: http://book.realworldhaskell.org/read/ http://learnyouahaskell.com/chapters
21:48 < isaacbw> Havvy, I know. I actually ordered learn you a haskell in paper form
21:48 < CoverSlide> i am not a fan of dead trees
21:48 < isaacbw> I've read some of it online
21:48 < isaacbw> but I prefer the physical form
21:48 < Havvy> Also, your local library might have the book.
21:49 < isaacbw> guys guys
21:49 < isaacbw> it's too late
21:49 < Havvy> It's never too late.
21:49 < CoverSlide> put a booger on it
21:49 < CoverSlide> return it saying
21:49 < CoverSlide> "there's a booger on it"
21:49 < Havvy> Stab it with a knife. Return it saying "There's a knife stab in it."
21:50 < isaacbw> I have a hard time focusing on things when reading on my computer
21:50 < CoverSlide> that is true for me too
21:50 < isaacbw> eReaders are a little better, but there's nothing like a proper paper book
21:50 < Havvy> Seriously guys: If you haven't checked out the books around call number 005 at your library, you're missing out on potential free resources.
21:51 < othiym23> the only problem with that and Learn You a Haskell (and other tutorials) is that it works a lot better if you're reading and typing at the same time
21:51 < othiym23> Learn You a Haskell works a *lot* better if you do the exercises as you're reading it
21:51 < CoverSlide> i like the computer because if i want to try something out (and if there usually examples) I don't like switching contexts from book to computer back to book
21:51 < Havvy> For example, the Fort Vancouver Regional Library has "Learning Node"
21:52 < CoverSlide> i already switch contexts from browser to terminal, it's easiest when i can click and not shift my whole viewport
21:53 <@Nexxy> CoverSlide, you obviously need one of those projectors that old people use to read books
22:12 < Havvy> Is 42 lines of comments to describe 100 lines of code too much?
22:13 < azylman> Depends on the 100 lines of code
22:13 < azylman> I've definitely had blocks of code where the comments are longer than the code itself
22:14 < azylman> But generally if your comments are that long it means there's something wrong with the code :p
22:14 < Astraea> I've got another question if someone wouldn't mind answering it.
22:14 < azylman> Astraea: ?
22:14 < Havvy> azylman: It's more explaining the contract than explaining the code.
22:14 < Astraea> I've been using res.send(all_the_data_at_once)
22:14 < Astraea> Now I have a bunch of middleware adding data as I go.
22:15 < Astraea> Is there a res.body or such a property I should be adding to, or do I call res.write(a_little_bit) as I go?
22:15 < CoverSlide> res.write
22:15 < Astraea> Thank you.
22:16 < Havvy> Astraea: You could add data to req for future middleware to work with.
22:16 < CoverSlide> be sure to set your headers before you start writing
22:16 < Havvy> azylman: https://github.com/Havvy/nrc/blob/master/lib/bisubscriber.js for the comment.
22:16 < Astraea> Thanks for the tip.
22:18 < onr> anyone used zeromq here?
22:20 < Astraea> Havvy: You mean if there's some internal stuff that happens after I'm done sending the response to the client? Why not just access the response object? It is not available after res.end()?
22:21 < Havvy> Astraea: More if you have middleware that only has the role of gathering data.
22:21 < Astraea> Gotcha.
22:22 < azylman> Out of curiosity, what data are you writing from middleware?
22:22 < azylman> I don't think I've ever been in the position where I wanted to write from middleware
22:22 < Astraea> I'm trying to construct a page dynamically... I think what I'm doing is called middleware.
22:22 < azylman> What do you mean by contruct it dynamically?
22:22 < isaacbw> usually middleware is either the end node or doesn't do any writing
22:23 < Havvy> Astraea: Have you looked at using a templating engine?
22:23 < azylman> Yeah
22:23 < Astraea> So I've got: app.use("/blog", function_to_construct_page_from_request);
22:23 < azylman> It sounds like you want some templating engine
22:23 < Astraea> I understand that a template engine is what I'm describing.
22:24 < Astraea> At this time I don't want to go there, though.
22:24 < Havvy> Even for simple websites, template engines are nice.
22:24 < Astraea> I've got another question about using res.write().
22:25 < Astraea> Let's say my last middleware to be called is meant to wrap the document in a header and footer.
22:25 < Astraea> If I'm calling write sequentially, it will be impossible for my last middleware function to write at the beginning of the document.
22:26 < draginx> Anyone here maintain the "gm" package?
22:26 < azylman> So if you were structuring your application that way (which I don't think you should do) you'd want two separate middleware, one for header and one for footer
22:26 < Havvy> You have two options there then:  Store the generated HTML on req, wrap it with the header and footer, and then res.write it.
22:27 < Havvy> Or use a template engine that handles that for you.
22:27 < Havvy> Like Jade.
22:27 < azylman> And it'd basically be header middleware first, then page-level middleware, then footer middleware
22:27 < azylman> With each writing something and then calling next()
22:27 < Astraea> That certainly is an option.
22:27 < Astraea> I'm trying to avoid setting a "content_body" property on the res object.
22:27 < Havvy> And what azylman is saying is a third, but messy option.
22:27 < azylman> I can only assume that you're doing this as a learning exercise, because otherwise you should definitely be using a template engine
22:27 < azylman> This is specifically what they're designed for
22:28 < Astraea> I've got a couple reasons not to use the template engine, but maybe you can persuade me.
22:28 < isaacbw> does anyone know what happened to hacker union?
22:28 < azylman> What are your reasons not to?
22:28 < isaacbw> they presented at ny tech and then never launched
22:28 < Astraea> The main one is that I feel like they don't lessen the work. (odd after listening to me tonight, I know)
22:29 < azylman> The other thing you could do so you didn't need middleware and didn't need to accumulate data would be to just have a function that took in a page and added the header and footer to it
22:29 < isaacbw> Astraea, I think that maybe you don't know how to use them well
22:29 < isaacbw> or haven't used a good one
22:29 < azylman> Yeah
22:29 < Astraea> At some level the templating engine has to do it's own sequential writing to the response object.
22:29 < Havvy> They don't lesson the initial work. But they help maintenance.
22:29 < Astraea> So whether I do it myself or the templating engine does it doesn't make much of a difference.
22:29 < Astraea> Hm... to put it another way.
22:30 < azylman> Using a templating engine reduces dev work
22:30 < azylman> Even if it doesn't reduce the work of the server
22:30 < azylman> Like obviously the same HTML needs to be written regardless
22:30 < Astraea> It may seem like I'd be calling 'template.skin(content)' which would wrap the content, but at the end it's just doing a write(header); write(content); write(footer);
22:30 < azylman> But what you're trying to do is basically rewriting a templating engine anyway, as a one-off
22:31 < Astraea> Very true.
22:31 < Astraea> The second point is that I don't feel it saves much work for me to use a templating engine that works with any language other than html.
22:32 < azylman> You can use a templating engine just to make your HTML cleaner
22:32 < Astraea> Why is writing /html in a template better than writing <html> in an html template?
22:32 < azylman> I've done that before
22:32 < azylman> I'll have a view that contains the header and footer, and views for each page, and each page view just extends that other view
22:33 < azylman> At that point, express is basically being used to serve static content
22:33 < azylman> Only you're using templates to avoid repeating yourself
22:33 < Astraea> Sounds like what I've been doing with my html templates.
22:33 < Astraea> Is there a templating engine available for express that uses html templates?
22:34 < tylersmith> mustache, dust, handlebars
22:34 < Astraea> (I'm guessing 'view' is another word for a single template?)
22:34 < azylman> Yes
22:34 < Astraea> Thanks for the info, Tyler. I'll take a look at those.
22:35 < Astraea> The main reason I'm doing it like this I guess is as a learning experience.
22:35 < Astraea> I find it very hard to learn any new language / environment top down.
22:35 < Astraea> I have to go down to the roots and build up.
22:35 < Astraea> At least now I'm using express instead of http.
22:36 < Astraea> Thanks for the explanation, Azylman.
22:37 < azylman> np
23:06 < Stanley_> Hi @tjfontaine
23:07 < tjfontaine> Stanley_: hey, try doing DynamicLibrary('librrc_c_api', RTLD_NOW) if your goal is to ultimately use that library
23:08 < Stanley_> okay
23:08 < Stanley_> let me give that a shot
23:09 < Stanley_> ffi.DynamicLibrary('librrc_c_api', RTLD_NOW) ReferenceError: RTLD_NOW is not defined
23:09 < tjfontaine> ya, well have to spell things right because I suck
23:09 < tjfontaine> also ffi.RTLD_NOW
23:09 < tjfontaine> librr_c_api I typo'd
23:10 < CoverSlide> ls
23:11 < Stanley_> ffi.DynamicLibrary('/usr/local/lib/librr_c_api.so', RTLD_NOW) ReferenceError: RTLD_NOW is not defined
23:11 < tjfontaine> Stanley_: ffi.RTLD_NOW
23:12 < Stanley_> okay that went through
23:12 < Stanley_> > ffi.DynamicLibrary('/usr/local/lib/librr_c_api.so', ffi.RTLD_NOW) { _handle: <SlowBuffer@0x1af6420 > }
23:12 < tjfontaine> Stanley_: ok so that's good news then, you shouldn't need to mess with libroadrunner directly right?
23:13 < Stanley_> no i shouldn't
23:13 < tjfontaine> Stanley_: you should be able to just use Library('librr_c_api', { ... })
23:14 < tjfontaine> Stanley_: as far as the bindings generation error with ulong I'm going to need to work up a sample to figure out what's going on there, but I have a feeling it's a red herring, and probably has more to do with my strict typing stuff
23:22 < Ramone> hey all?. any syslog users in here?
23:23 < Ramone> wondering if you have a library recommendation
23:24 < chovy> i have a form with a textarea field.
23:24 < chovy> i'm trying to post that as a file back to my express/node app
23:25 < chovy> how can i read the data in as a file?
23:25 < CoverSlide> express.bodyParser
23:25 < CoverSlide> + form enctype="application/x-www-form-urlencoded"
23:25 < chovy> CoverSlide: https://gist.github.com/bc57642cd2c68898a648
23:26 < micahflee> I'm starting a new project. what testing framework for node should I use?
23:26 < CoverSlide> yeesh
23:26 < azylman> Mocha is good
23:26 < chovy> micahflee: i like mocha+should
23:26 < Havvy> I've been using Jasmine-Node.
23:26 < CoverSlide> multipart is a pain to work with when you don't need it
23:26 < CoverSlide> oh but i guess you do
23:26 < brettlangdon> tests… who needs tests… my code works… trust me
23:26 < Havvy> brettlangdon: And then you change one line.
23:27 < CoverSlide> express.bodyParser should work fine, as long as it's valid multipart
23:27 < micahflee> brettlangdon: haha
23:27 < micahflee> azylman, chovy, thanks I'll take a look at mocha
23:27 < chovy> CoverSlide: i get this error when i try to handle in express: "Error: MultipartParser.end(): stream ended unexpectedly: state = PART_DATA
23:28 < chovy> micahflee: i always use selenium to test the front-end.
23:29 < CoverSlide> chovy: there's the FormData API, but that doesn't work on IE < 10
23:29 < micahflee> chovy: I've used selenium before, it's awesome
23:29 < micahflee> thanks!
23:29 < chovy> CoverSlide: i don't care about IE
23:29 < chovy> i'm actually just trying to simulate a user editing some text, create a file in js, and upload the file to my api.
23:30 < CoverSlide> yeah then FormData would be the proper way
23:30 < Havvy> 36 tests, 62 assertions, 2 failures
23:31 < azylman> I think also you're ending your boundary wrong
23:31 < CoverSlide> but one thing you might want to do is listen on that socket to see what gets sent and adjust accordingly
23:31 < Havvy> When I went to bed, that was 50 assertions and 12 failures.
23:31 < azylman> chovy: I'm pretty sure that line 12 needs to also be preceded with a '--'
23:31 < zscregan_> I'm running into an error trying to install the Cloud9 IDE on my server, the error it's giving me is coming from NPM though, would somebody be able to give me a hand?
23:31 < isaacbw> if you share the error
23:31 < CoverSlide> try that too. multipart is no fun to do manually
23:33 < chovy> CoverSlide: i found it
23:34 < chovy> my ending boundary needed --boundary-- instead of boundary--
23:35 < CoverSlide> awesome!
23:35 < azylman> ;)
23:36 < tpayne> Hello. I need to upload a file, is there a recommended node module for this?
23:36 < chovy> yes, that was it. line 12
23:36 < azylman> tpayne: I've used node-form-data for that before
23:37 < tpayne> ok i'll check it out, thanks
23:37 < zscregan_> I'm following the directions here: https://github.com/ajaxorg/cloud9  for installing, but once I get to 'sm install' I get this error: http://pastebin.com/8htpq9mx
23:41 < rborg> what's the the syntax for install a specific version of node via aptitude?
23:42 < isaacbw> that's an ubuntu question
23:42 < sschultz> I'd previously been running node from a version I compiled on os x, and just tried to switch over to nvm. Nvm seems to have installed just fine but when running it to install a version of node I get the following failure error, "grep: input):111:v0.8.18-darwin-x86.tar.gz: No such file or directory". Anyone run into this issue before?
23:43 < rborg> isaacbw sorry I guess I'm in the wrong room - do you know the answer though?
23:43 < isaacbw> nope, sorry
23:43 < isaacbw> try nvm
23:44 < sschultz> isaacbw: Were you talking to me there?
23:44 < rborg> isaacbw thanks
23:44 < isaacbw> sschultz, no
23:44 < isaacbw> I don't know anything about nvm
23:44 < isaacbw>  :(
23:45 < sschultz> isaacbw: thanks anyway!
23:46 < zscregan_> can anybody help me with this error: http://pastebin.com/8htpq9mx when trying to install Cloud9. It's some sort of npm error, but I have no idea what's going on...
23:48 < isaacbw> do you have libxml installed
23:49 < tpayne> azylman: is your form file selection from the machine?
23:50 < zscregan_> I have no idea, but as far as the directions I was following were concerned, the only prerequisites were NodeJS and NPM.
23:54 < zscregan_> Just checked, I do have libxml2 installed
23:55 < zscregan_> Do I have to have libxml2-devel installed as well?
23:56 < bakadesu> is there a way to set multiple environment variables when runnig a script?  (example: NODE_ENV=production CLIENT_ID=3 node server.js)
23:57 < azylman> tpayne: yes
23:57 < tpayne> you know on the Usage, page which route did you take? it's a bit confusing
23:57 < azylman> Yeah, I remember their documentation being very bad
23:58 < azylman> I think I did something like
23:58 < azylman> form = new FormData(); form.append(<the_filename>, fs.readFileSync('the_file_path')); form.submit(blahblabhblah)
23:58 < azylman> But it's been a while
23:59 < azylman> I actually don't have the code around anymore - we had to stop using the form-data library because it had a minor bug which was a show stopper for us and has since been fixed (basic auth support)
23:59 < azylman> Sorry I can't be of more help, but I do remember having the same problem as you
23:59 < azylman> In that the documentation didn't show my use case well
--- Log closed Fri Jan 25 00:00:22 2013
