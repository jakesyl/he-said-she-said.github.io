--- Log opened Wed May 15 00:00:57 2013
00:01 < _304> im getting 304s when i attempt to install...worked okay just before, is the problem on my end or is something down?
00:02 < _304> ive tried separate packages
00:03 < qard> I think you accidentally a whole word there.
00:03 <@MI6> joyent/libuv: Bert Belder master * 961202d : Merge branch 'v0.10' (+8 more commits) - http://git.io/TiKqMA
00:05 < qard> As for your questionâ€¦Amazon Elastic Beanstalk is really nice; Appfog is horrible to debug; Nodejitsu is tiny, so they aren't much help for support; Joyent is more enterprisey, so I haven't tried them outside no.de before that got rolled into Nodejitsu.
00:08 <@MI6> joyent/libuv: isaacs created tag v0.11.2 - http://git.io/gdbVog
00:09 < maaarghk> Hello, I'm a total noob to node.js with plenty of experience writing web apps the apache/php/sql way - am i right to be thinking that that experience is basically useless now and I should discard it all before learning how node.js works? :P
00:11 <@MI6> joyent/libuv: piscisaureus created tag v0.11.3 - http://git.io/DaOdkg
00:11 <@MI6> joyent/libuv: Bert Belder master * adc79ba : Now working on v0.11.4 (+1 more commits) - http://git.io/UQ2k0g
00:11 < _304> yeah, i just verified still getting 304s when trying to install from the registry, is anyone else having such an issue?
00:12 < maaarghk> Also, does anyone have a favourite resource for learning node for noobs?
00:12 < passcod> maaarghk: ...yes. well, not the sql part. you can use sql databases with node, so you can keep that knowledge.
00:13 < maaarghk> good. I always hated PHP but it was a case of "everyone else is doing it".
00:13 < maaarghk> and apache is for serving files, I'm glad people have finally got that message.
00:14 <@MI6> joyent/node: Bert Belder master * 7934825 : uv: upgrade to v0.11.3 - http://git.io/ZP99Rw
00:14 < drojas> qard: I'm familiar with amazon aws (ec2, s3, elb, etc) and that seems to be sufficient for my project. Anyway, root access is not mandatory for me. With that in mind, do you think that nodejitsu or joyent can perform better than amazonaws in speed and scalability?
00:16 < maaarghk> actually... i have very little knowledge of OOP at all, to be honest. should i start there, or can i learn that with node?
00:17 < qard> From what I've seen, Amazon is faster, easier to scale, etc. The only issue I think it really has is reliability, but you can just use multiple availability zones to sidestep most of that.
00:18 < passcod> maaarghk: learn javascript (properly). have a look at CommonJs. and http://nodejs.org is there for you. Also, there's a large amount of good stuff listed here: http://stackoverflow.com/questions/2353818/how-do-i-get-started-with-node-js
00:19 < passcod> AWS is not very cheap for light loads
00:19 < qard> If you can afford it, AWS is worth it. Otherwise, you can just temporarily use something free like Appfog for prototyping.
00:22 < maaarghk> passcod: thanks for the links. i'll get reading!
00:28 < passcod> ...or jitsu, heroku, or... and even for slightly heavier loads, a basic linode is often more cost-effective than the equivalent AWS setup.
00:30 < mscdex> nodoku
00:45 < innociv__> http://pastebin.com/xbB6jR9f I'm getting this error trying to install db-mysql. From npm-debug.log
00:48 < samholmes> If I'm using a gmail account to send an email address to myself from a website form, how do I make it easy for me to reply to the "actual sender"?
00:48 < arnorhs> samholmes: you add a reply-to header... maybe
00:50 < innociv__> missing node-waf..
00:51 < zivester> how does npm install -g add binaries to the $PATH? is it some part of package.json? ... or does it automatically copy everything in bin/* ?
00:52 < samholmes> arnorhs: thanks I'll look into that
00:52 < arnorhs> zivester: i think it does symlinks into the /usr/local/bin folder
00:53 < arnorhs> or at least for me it does on ubuntu
00:53 < Zolmeister> zivester: you can also set it up to use a local path like /home/user/.local/bin - thus no need for sudo to install local packages
00:53 < arnorhs> good point
00:55 < zivester> so it automaticall symlinks anything in bin/*?  I guess that was my question
00:58 < zivester> https://npmjs.org/doc/json.html#bin doesn't seem to say what default behavior is
00:58 < Zolmeister> zivester: /usr/local/bin I think is the default
00:59 < Zolmeister> ls -l to check that folder for symlinks
00:59 < zivester> sorry, I meant from my module... anythin in ROOT/bin/*
00:59 < Zolmeister> also, if you have a specific app installed, use the 'which' command
00:59 < zivester> (my question is probably trivial at this point)... "yes it symlinks anything from the bin/" folder of your module
01:00 < innociv__> http://pastebin.com/xbB6jR9f I'm getting this error trying to install db-mysql. From npm-debug.log  The main issue seems to be "sh: node-waf: not found" and I can't figure out what to do.
01:00 < Zolmeister> zivester: you mean for publishing?
01:00 < innociv__> Some things on google said to apt-get install nodejs-dev but my debian repo has no such package
01:01 < zivester> Zolmeister, yes.. If I want to make an executable for my module... do I need to do anything in my project besides create it in bin/* (of my module) ... i.e. so `npm install -g mymodule` installs mymodule/bin/myscript to the $PATH
01:03 < Zolmeister> zivester: all you need to do is add the proper configs in the package.js file. (is the code on GitHub?)
01:03 < innociv__> Nevermind i'll just use another plugin
01:04 < zivester> Zolmeister, https://github.com/zivester/node-rsyncer
01:04 < Zolmeister> innociv__: or MongoDB
01:04 < innociv__> https://github.com/felixge/node-mysql I stumbled on this. Looks alright
01:05 < Zolmeister> zivester: https://gist.github.com/coolaj86/1318304
01:05 < Zolmeister> zivester: pretty much: npm init, npm publish .
01:06 < zivester> yah, thats not what I'm asking, thanks anyway
01:06 < Technodrome> with node.js my performance bottleneck is probably going to be my DB huh?
01:18 <@isaacbw> http://slashdot.org/topic/bi/javascript-is-eating-the-world/
01:19 < mscdex> Technodrome: your performance bottleneck is probably going to be the foot soldier assemblers
01:19 < Technodrome> oh noes! 
01:19 < Technodrome> connect is the name of the http server built into node right? 
01:19 < mscdex> nope
01:19 < mscdex> the name of the built-in http server is http.Server
01:19 < Technodrome> oh 
01:19 < Technodrome> so what is connect?
01:19 < mscdex> a node.js module
01:20 < Technodrome> with what purpose?
01:20 < Technodrome> how is it any different than the built in http server
01:20 < mscdex> Technodrome: it's a middleware framework
01:21 < Technodrome> so what is http.createServer called?
01:23 <@isaacbw> just read the connect docs
01:23 < mscdex> isaacbw: i think that guy didn't really bother doing a much investigation into node
01:24 < Technodrome> iwas just trying to see what the best server is for handling static files 
01:24 <@isaacbw> nginx
01:24 < Technodrome> obviously the built in one isn't the best, or people would not be creating node-static and paperboy 
01:24 < pr0ton> is there any VPS you guys recommend?
01:24 < Technodrome> yes isaacbw i was more or less curious how close to nginx node-static and stuff gets
01:25 < mashlol> pr0ton: I've had good experiences with http://intovps.com
01:25 < pr0ton> how much per month?
01:25 < mashlol> $10 for 512mb
01:25 < pr0ton> my requirement is to run two web servers, one with a non 80 port
01:25 < pr0ton> one is node
01:25 < pr0ton> other is not
01:25 < pr0ton> so i need a VPS
01:26 < mashlol> I run several node servers on mine
01:26 < pr0ton> neat
01:26 < pr0ton> how long has it been around?
01:26 < mashlol> hm, I've been using it for around 8-10 months now maybe
01:27 < Technodrome> isaacbw: with nginx though, you now have something in between your request process for the application
01:27 < mashlol> not sure when it first started out or anything
01:27 < pr0ton> ah ok, any idea how crazy rackspace would be to point to a DNS?
01:28 < Technodrome> is there a way to use nginx just for static files, and not use it for any part of the request process for my node.js app?
01:28 < mscdex> Technodrome: yes
01:28 < Technodrome> what method is that?
01:29 < mscdex> put nginx in front and set up your node.js server as a backend
01:29 <@isaacbw> you could have a separate api subdomain for node.js
01:29 < Technodrome> if its running on port 80 that is 
01:29 <@isaacbw> or use nginx as a forward proxy for certain kinds of urls
01:29 < Technodrome> but still, you hit nginx no matter
01:29 < mscdex> nginx listens on 80/443 and your node server listens on some other port
01:29 <@isaacbw> or do both
01:29 < mscdex> Technodrome: until ssl/tls in node gets better, putting something like nginx in front is better if you are doing ssl/tls
01:30 < Technodrome> seems like the only way is , setup node.js as the proxy backend, and allow it to server static files normally 
01:30 < Technodrome> but now, everything hits the nginx server , seems like many node.js people like to keep all app request with node.js itself 
01:31 < mscdex> Technodrome: you can do that, but like i said, tls in node isn't as performant as it could be (yet)
01:31 < mscdex> so letting nginx do the termination is what i do for now
01:32 < Technodrome> is node-static and paperboy better performance than express / connect setver? or are they about the same? 
01:32 < mscdex> should be the same, depending on what kind of caching strategies (if any) any of those use
01:35 < Technodrome> mscdex: seems like people think paperboy / node-static is faster
01:35 < Technodrome> https://groups.google.com/forum/?fromgroups=#!topic/nodejs/lknPXB6P3O0 
01:36 <@isaacbw> Technodrome: are you trolling?
01:36 < Technodrome> according to this nginx is way faster
01:36 < Technodrome> isaacbw: whoa no, I've just never looked into this 
01:37 < mscdex> Technodrome: do a benchmark with typical workloads and test it yourself
01:38 < Technodrome> that seems to be the only benchmark i could find on the subject, so i guess they are not all treated equal, still bad though compared to nginx 
01:58 < kenperkins> pr0ton: eh?
01:58 < pr0ton> eh regarding?
01:59 < kenperkins> asking about "how crazy rackspace woiuld be to point at dns"
02:00 < tomshreds> hey guys, I'm working on a very simple blog engine I'd need route, any interesting package you could suggest? thx
02:01 < pr0ton> i mean basically to have backspace setup properly to serve a website
02:01 <@isaacbw> you're welcome
02:04 < kenperkins> pr0ton: shouldn't be a problem, just a single vm setup?
02:04 < hvq> hi, I need to find a resource to learn node.js as fast as possible,  is there any recommended guide? Thanks.
02:05 < pr0ton> kenperkins: VM like JVM or a VPS?
02:06 < kenperkins> vm as in an instance/vps
02:06 < mscdex> hvq: research a brain-computer interface
02:06 < timoxley> hvq build something
02:06 < pr0ton> ah yes, single VM in that case
02:06 < whckandrw> hvq the peepcode on node is a good start
02:06 < kenperkins> <-- node.js dev advocate at rackspace, can I help with anything? 
02:10 < hvq> whckandrw, timoxley: is there a good book for node.js? or just making a hand-on app is enough to learn nodejs.
02:11 < hvq> mscdex: Im not clear on what you mean ...
02:11 < mscdex> hvq: it was a joke ;-)
02:12 < mscdex> hvq: a good resource is http://nodejs.org/docs/latest/api/
02:13 < mscdex> hvq: other than that, it's plain javascript
02:13 < mscdex> hvq: if you need help with that, check out the mozilla's javascript guide on mdn
02:17 < timoxley> hvq I dunno, I just started by replacing bash scripts with node scripts then "add a new feature to our app" with "build the feature totally separately from the existing app, in node"
02:24 < leichtgewicht> Wow, this error is usability hell: http://stackoverflow.com/questions/15584529/module-version-mismatch-expected-11-got-1
02:47 < tomshreds> Hey guys, from a fs.readfile() output how can I loop on each line? thanks
02:48 < roark> is it possible to handle requests (for authentication) with node, but then pass authenticated requests back to NGINX for delivering the static content, rather than node delivering?
02:48 < roark> is it possible to handle requests (for authentication) with node, but then pass authenticated requests back to NGINX for delivering the static content, rather than node delivering?
02:50 < roark_87231> is it possible to handle requests (for authentication) with node, but then pass authenticated requests back to NGINX for delivering the static content, rather than node delivering?
02:51 < niggler> isaacs was npm changed to warn if repository was not filled out?
02:53 < hroark> is it possible to handle requests (for authentication) with node, but then pass authenticated requests back to NGINX for delivering the static content, rather than node delivering?
02:58 < timoxley> hroark you could put such auth in front of nginx
02:58 < werle> what is that project called again that allows you to create man pages written in nodejs?
02:59 < timoxley> werle you mean http://tjholowaychuk.com/post/23368504100/mad-1-node-js-pages?
02:59 < werle> timoxley: not that, though it is great
03:00 < hroark> thanks tim, I'm already using nginx as a reverse proxy, but I can't figure out, once I've sent requests to node, how to route them back into nginx
03:13 <@isaacbw> what
03:14 < niggler> @isaacbw what?
03:14 <@Nexxy> niggler, isaacbw what?
03:16 < mscdex> Nexxy: what?
03:17 <@Nexxy> mscdex, what?
03:17 < niggler> mscdex Nexxy what?
03:17 <@isaacbw> niggler, mscdex, Nexxy what?
03:20 <@Nexxy> isaacbw, niggler mscdex what?
03:21 < niggler> isaacbw Nexxy mscdex what?
03:22 < samholmes> What's this "Error: spawn Unknown system errno 23"
03:22 < samholmes> ?
03:24 < niggler> what OS samholmes ?
03:24 < samholmes> Mac OS X
03:24 < niggler> on osx errno 23 is file table overflow
03:25 < samholmes> niggler: What is a file table overflow?
03:25 < niggler> you probably have too many files open
03:25 < samholmes> What's open?
03:25 < samholmes> "open"*
03:26 < niggler> do you have a lot of sockets open?
03:26 < samholmes> Idk
03:26 < niggler> what does ulimit -n say?
03:26 < samholmes> ulimit -n 2560
03:27 < samholmes> says that
03:27 < samholmes> 2560
03:27 < samholmes> what is ulimit?
03:27 < niggler> run help ulimit
03:27 < niggler> lsof tells you what files are open
03:28 < niggler> also check $ lsof | awk '!x[$NF]++' | wc -l
03:38 < samholmes> niggler: does the first column mean the application that has the socket open?
03:38 < samholmes> "socket" meaning open file connection?
03:38 < samholmes> for lsof that is
03:39 < niggler> the first row gives you the column headers
03:39 < niggler> lsof | head -n 1
03:40 < niggler> 'file' in this context refers to file descriptors
03:42 < niggler> samholmes as a really simple check, just restart and try again
04:08 < redhotsly> isaacs: hi, a few days ago I asked you about a module to CRUD javascript objects to files. I said I'd write one myself. You said...publish it to npm. Well here I am this will be my first npm module. can you please review the package.json: https://github.com/redhotsly/json-file-db/blob/master/package.json
04:17 < niggler> where's the license redhotsly 
04:18 < redhotsly> niggler: isnt the word MIT enough?
04:18 < niggler> http://blog.nig.gl/post/48848761220/just-saying-something-is-gpl-mit-apache-doesnt
04:18 < niggler> ^ redhotsly it's not enough -- read the license
04:18 < redhotsly> isee
04:22 < niggler> GPL explicitly allows it redhotsly (and i think i discussed that there)
04:22 < niggler> with GPL you can give a link to the GPL license
04:22 < rconover> Hi could you guys try a script for me to see if it breaks on your platform and not just mine
04:22 < rconover> https://github.com/joyent/node/issues/5479
04:23 < niggler> what are you seeing and what version of node are you using rconover ?
04:23 < rconover> see the test case
04:23 < rconover> 0.10.5
04:25 < niggler> rconover are you getting a 301 on that url?
04:25 < rconover> No I'm getting a HTTP parse error
04:25 < rconover> and it throws an exception from http.js
04:26 < niggler> rconover this is what i get: http://hastebin.com/geyacixuxu.txt
04:26 < niggler> is that what you are seeing?
04:26 < rconover> yeah thats the same error that I get
04:27 < rconover> see Got error: HPE_INVALID_CONSTANT
04:29 < niggler> I'm seeing some screwy headers 
04:29 < redhotsly> niggler: i added the licence and added dev dependencies. can you see anything else
04:29 < niggler> "Cneonction: close" who does that?
04:29 < niggler> (that's the actual spelling according to curl -i)
04:30 < rconover> some load balancers
04:31 < rconover> it's amazon.com this is pretty standard stuff, so I'm a bit confused
04:31 < rconover> why node would choke on it
04:45 < samholmes> niggler: sometimes I don't want to restart my computer everytime there's a problem
04:45 < niggler> or close some programs
04:45 < ningu> only sometimes?
04:49 < samholmes> GitX, isn't even running
04:50 < niggler> its running if it shows up on the dock with the light below
04:55 < samholmes> niggler: I know
04:55 < samholmes> I closed i
04:55 < samholmes> I'm going restart my computer
05:00 < MedicinalCure> Hello world
05:05 < progrock`> can anyone tell me the difference between ejs engine and jshtml engine in express? (they both default to JADE... so not sure what the difference is)
05:05 < ningu> ejs is not jade
05:06 < ningu> all three are different template systems
05:06 < progrock`> ningu: I'm referring to express command line tool
05:07 < progrock`> ningu: which is why I'm confused.. I kno what ejs and jshtml and jade are seprately... jsut confused at what exress is referring to
05:08 < ningu> what it means is that without -e or -J the engine will default to jade
05:08 < ningu> if you specify it explicitly, it will be ejs or jshtml
05:09 < progrock`> oh, ok, haha.. thank you
05:10 < progrock`> Man, I like using botstrap, but I relaly prefer Stylus over LESS, and feel like using btoh stylus and LESS in a website is not the cleanest solution
05:12 < progrock`> I suppose if I really want to use bootstrap, I should deal with using LESS.... but man, I just like the fact that Stylus gets rid of all the boilerplate an you just use tabs... soo much easier to read wuickly
05:13 < ningu> I like stylus too
05:13 < ningu> have never really used bootstrap
05:13 < progrock`> ningu: do you use anything like bootstrap?  or just write your own css, and maybe have some common structure
05:14 < progrock`> I used to always do my own css (hell been doing it for 10 years), but recently I've been liking how simple bootstrap makes some things... and definitely useful when I'm being lazy
05:15 < ningu> I just use reset.css and then my own
05:15 < ningu> but I haven't done any very complex design really, I'm not very good at css, I just get the basics down
05:16 < progrock`> hmm, ironically, on the "I'm not very good at css" I would thin youd prefer somethign like bootstrap that does all the dirty work for you
05:16 < ningu> in theory yes
05:16 < ningu> I tried it on a site I had but it had a bunch of class names overlapping the ones I had defined and other behavior that was different and I realized I'd have to redo everything, so I scrapped it
05:17 < progrock`> does reset.css whipe out all the defauls (ie. H1-H6 all the same) or is it pretty much the same thing as normalize.css
05:17 < ningu> normalize is bootstrap's?
05:17 < ningu> I think it wipes out all the defaults
05:17 < ningu> bootstrap's technique is newer, reset.css has been around for a while
05:17 < ningu> and bootstrap's thing is in response to it actually
05:17 < progrock`> normalize is built into bootstrap I believe.. but its a separate project
05:19 < progrock`> think I might end up going with LESS because I really do prefer using bootstrap as a starting point and customizing from there... maybe I'll eventually convert the stuff I like into stylus
05:19 < LegCow> normalize is better, brings all browsers to a more consistent medium
05:19 < LegCow> probably less code too
05:20 < progrock`> But botstrap 3 is gonna be a drastic change... may wait till then.. I beleive it is Mobile first responsive
05:20 < progrock`> LegCow: yeah I figured thta at this point... reset is a little mroe old school
05:22 < progrock`> I'm just putting together a basic site boilerplate... ben about 3 years since I've done anything outside of work (aside from my charting library nvd3... tho that was for work anyway, lol)
05:22 < progrock`> but got some friends who are openign businesses that are asking for basic websites.. figure I might as well help them out, and make it easy on myself as well
05:27 < progrock`> Maybe I'll split bootstrap into the scaffolding (the grid, and repsosnisve stuff) and the rest of the components.  And convert the non-scaffolding into Stylus... and tweak things to my liking
05:28 < leichtgewicht> I think there should be a stylus-pm ala npm :)
05:31 < progrock`> I;m tempted to actually try out Foundation 4 instead of bootstrap... at least they are ahead of the game as far as mobile-first
05:32 < progrock`> But, of course foundation SASS... and not the Stylus like structure of SASS
05:34 < ningu> I guess people's argument against stylus is it's another thing to learn and harder for people who are used to CSS
05:34 < ningu> but I like it
05:35 < progrock`> ninju: I'm soo confused at why it seems to be the least popular... I mean LESS, Stylus, and SASS should take 10 minutes for anyone who knows CSS to pick up...
05:36 < progrock`> but Stylus has more of a Python like approach... and to me is sooo much easier to read.. and soo much more is done in fewer lines
05:36 < ningu> yeah, there are very few complications
05:36 < ningu> only a few ruels for each one
05:36 < ningu> but a lot of people learn very slowly and their skills are rigid
05:36 < progrock`> yup.  I just really like how much css is in a single screen when using stylus
05:37 < ningu> I also really like the way you can do border-radius as a mixin, can't remember of LESS does that
05:37 < ningu> if*
05:37 < progrock`> they all have mixins that work similar enough I believe
05:47 < leichtgewicht> Damn it, I really wish now that stylus had a package manager like npm ...
05:49 < ningu> well there's bower, component...
05:52 < leichtgewicht> component is something that works like that. But it does too much. But what I really want is a @require "superpackage" in stylus that works analog to npm.
05:52 < leichtgewicht> ./stylus-modules
05:52 < leichtgewicht> sorry: ./stylus_modules etc
05:53 < leichtgewicht> local cache, community and all that stuff ;)
05:54 < leichtgewicht> including versioning.
05:54 < leichtgewicht> in short: all the power of npm but for css :D
05:54 < ningu> I'm surprised no one named a css transpiler decss
06:02 < stagas> leichtgewicht: why not use component then
06:02 < leichtgewicht> Because component doesn't do that...
06:02 < progrock`> man, i need to convince my work to buy me a chromebook pixel
06:03 < leichtgewicht> Component tries to combine various registies and component tries to work with js and css and html
06:04 < stagas> leichtgewicht: it can be configured for stylus sass etc
06:04 < ningu> what I want is a laptop that has acceptable performance, is small, and has very long battery life
06:05 < ningu> there are not many contenders
06:05 < leichtgewicht> stagas: The point is: limitation and focus are good things.
06:07 < stagas> leichtgewicht: sure, also modularity, component only solves the packaging/building/deps problem, you can have your hyper-stylus-coffee-whatever builder on top using the tooling provided already
06:08 < leichtgewicht> stagas: I am not of the opinion that it solves the deps problem.
06:10 < progrock`> ninju; I just love the 3:2 aspect ratio, the insane resolution... and the all around sleekness.  And the 1 tb of google drive is fucking amazing.... and you can run chrome os and ubuntu next to each other at the same time.. so I get the best of both words
06:11 < progrock`> not to mention I do all my coding in vim, so I can literally use chrome os to develop
06:11 < ningu> hmm
06:11 < ningu> didn't know you could run ubuntu
06:11 < ningu> but not windows, right?
06:11 < ningu> unfortunately there are one or two windows apps I really need for my work
06:11 < progrock`> ningu dont think so... but I wouldnt care... so have not looked into it
06:12 < stagas> leichtgewicht: oh well, you can probably do it in browserify also I think I don't get the real problem here
06:12 < progrock`> ningu: run windows on ubuntu with virtualbox if you need it
06:12 < ningu> they aren't even complicated apps but they are windows only
06:12 < ningu> progrock`: that kind of goes against my need for extreme battery life 
06:12 < ningu> 6 hours minimum, I'd be happier with 8-12
06:12 < progrock`> yeah, battery life isnt ciritcal for me... I need about 3 hours, lol... and I'm sure the pixel can do better than that
06:12 < progrock`> I just need it for my commute into nyc everyday
06:13 < ningu> and the google drive stuff is irrelevant when you don't have internet access
06:13 < ningu> so I need real storage
06:13 < ningu> :)
06:13 < ningu> this is for my field work
06:13 < progrock`> Well I have internet access all the time, except for 30 minutes on the subway.. which I rarely have a seat, so no big deal
06:13 < progrock`> ningu: field work... i woul dimagine you can get 4g then
06:13 < ningu> so still no data access on the nyc subway?
06:13 < quizme> so, i was looking at the npm module code, and to my surprise there were no semicolons to be found at the end of statements.  I never saw that style before.  Is that how the Node.js pros code ?
06:14 < ningu> progrock`: nope. 2g when in the city, otherwise nothing.
06:14 < progrock`> ningu: ouch.. where you from?
06:14 < ningu> I live in SF
06:14 < ningu> but I said field work
06:14 < ningu> it's in indonesia
06:15 < ningu> quizme: there are a few coding standards. some use semicolons, some don't, I think it's kind of silly to get hung up on it
06:15 < progrock`> ningu: oh, gotcha
06:15 < ningu> progrock`: I have enough electricity to charge every day or two but I don't want to rely on it
06:15 < progrock`> quizme: yeah, really a preference... I use semicolons most of the time... except for certain places where they annoy me.. or like simple funcitons that just return something and have no other code
06:16 < ningu> and I don't want to lug around large batteries or solar panels if I don't have to. so far I've been able to get away with high capacity batteries
06:16 < ningu> I mean high capacity built in li-ion batteries
06:16 < progrock`> ningu: hmm.. understandable.
06:17 < progrock`> man, I wish I got to travel for work, lol.... currently stuck in NYC in finance
06:17 < progrock`> definitely pays the bills and then some at least
06:18 < quizme> ok interesting.  and btw, is there any js library that inputs your code and tidies it up and outputs it in accordance to one standard or another?
06:18 < quizme> my code could use a make-over
06:18 < ningu> quizme: well, there is jshint
06:18 < sinclair|node> progrock`: travel plus work sucks
06:18 < ningu> but I think it just gives you warnings
06:18 < sinclair|node> don't be envious of such things
06:18 < sinclair|node> ningu: i have a question for you
06:18 < quizme> i heard of it
06:18 < ningu> sinclair|node: that's a really blanket statement, it's not like there is only one kind of travel plus work
06:18 < quizme> maybe i'll give it a spin thanks, ningu
06:18 < sinclair|node> ningu: its a particular problem, and i want to know how you solve it
06:19 < ningu> ok
06:19 < progrock`> sinclair|node: I think that depends on where you travel and how often you do.  i would love to do 2 weeks twice a year somewhere onthe other side of the world
06:19 < leichtgewicht> stagas: browserify and npm are javascript specific. That is thusfar a problem as that in the npm package index there shouldn't be any css code
06:19 < ningu> for me it's more like 1-2 months a year
06:19 < progrock`> I suppose I could visit our india office... but they dont do anything relavent to my work sadly
06:19 < ningu> on my current grant, anyway
06:19 < sinclair|node> ningu: assume you want to iteratively run through a directory and recursively go down directories as you iterate
06:19 < ningu> ok
06:19 < sinclair|node> ningu: ok?
06:19 < ningu> I've done so before
06:20 < sinclair|node> ningu: its just an example
06:20 < quizme> also, sorry last question, does anybody here like lisp?  i know there is biwascheme and clojureScript, does anybody have any good (or bad) experiences with those ?
06:20 < leichtgewicht> stagas: Because it doesn't really make sense to use any css code mixed with js.
06:20 < quizme> .
06:21 < sinclair|node> ningu: the main principle behind this (in node, and assuming you go async loading) is that you have a queue, you push work its to it, and you have some thing handling those work items
06:21 < mscdex> css.js
06:21 < quizme> personally i would like to avoid having to rely on the JVM to compile js down to lisp
06:22 < quizme> ideally i could just say "require('lisp');" then start writing some kind of lisp.
06:22 < sinclair|node> ningu: in the iterative directory case, a work item would be scanning a directory, and for each sub directory, it would push that directory on a 'open queue' for the thing to scan later
06:22 < sinclair|node> ningu: right?
06:22 < Havvy> quizme: What do you think this is? Racket?
06:22 < sinclair|node> ningu: however, the same principle could be applied to a web page link crawler
06:22 < ningu> sinclair|node: right. I've used the async module for this in the past, specifically async.queue.
06:22 < progrock`> I assume you can only run a single app on a heroku web dyno at a given time?
06:23 < sinclair|node> ningu: using async queue, you have access to the given queue right? such that, when you enter a work item, if that work items needs to push more things on the queue, it can, right?
06:23 < ningu> sinclair|node: people have also implemented queues with redis that can be shared among various worker processes
06:23 < quizme> navvy: holy crap that looks awesome
06:23 < ningu> right
06:24 < sinclair|node> ningu: right, so for all intents and purposes, the concept is well known and solved
06:24 < sinclair|node> ningu: in otherwords, i should use async
06:24 < ningu> sinclair|node: yeah, that's how I would start. also, there's a nice feature that you can set the concurrency level
06:24 < ningu> and there are triggers for when the queue is empty
06:25 < sinclair|node> ningu: what are the level options?
06:25 < ningu> sinclair|node: you just give it a number
06:25 < sinclair|node> ningu: i don't want a lot of that other guff that comes with async
06:25 < ningu> how many tasks you want running at once
06:25 < sinclair|node> i want something specific
06:25 < sinclair|node> ningu: i can only have 1 task running at 1 time
06:25 < ningu> well, then tell it that :)
06:25 < sinclair|node> ningu: no, its impossible to have more than 1, unless i cluster
06:25 < ningu> I think it's just one of the arguments to the method that creates the queue
06:26 < ningu> if you make it 1 there will be 1
06:26 < progrock`> Can someone familair with heroku confirm that you can only run 1 app per a web dyno?  (I'm new to heroku.. testing it out.. generally a fan of runnin gmy own VPS)
06:27 < sinclair|node> ningu: in order for what you said then to make any sense, those async libs would need to be spawning / forking out
06:27 < ningu> no idea, I run my own too
06:27 < greelgorke> morning
06:27 < ningu> sinclair|node: no, it's just the regular node async callback model in one thread, which I assume you understand by now
06:27 < sinclair|node> ningu: do they do that?
06:28 < sinclair|node> ningu: i think i understand more than you give me credit for
06:28 < ningu> sinclair|node: I didn't mean that sarcastically, sorry
06:28 < progrock`> guess I'll try to run a second
06:28 < sinclair|node> ningu: in order for it to run two things at once, it would need to fork out to multiple child_processes, as many as you would specific
06:29 < sinclair|node> er, specify
06:29 < ningu> sinclair|node: it's exactly the same as any async method in node and I'm sure you realize that you can have more than one of those running at once
06:29 < progrock`> Hmmm.. it appears you can run multiple... tho obviously performance would probably be horrific on just 1... but good to know for testing
06:29 < sinclair|node> ningu: i assume these async libraries do that
06:29 < ningu> how it actually is implemented under the hood depends on the operation, e.g. there is a thread pool for file system operations
06:30 < sinclair|node> ningu: we are not talking file operations
06:30 < ningu> node just keeps going through its event loop and when something is finished, its the callback is run
06:30 < sinclair|node> ningu: javascript is a single threaded event loop
06:31 < sinclair|node> well, node is, what i asking you is, in order for node to "RUN MORE THAN ONE THING AT ONE TIME" it would need to fork out to child processes
06:31 < ningu> sinclair|node: at any given time you are executing one line of code. the concurrency # I was talking about was how many tasks would be pending simultaneously
06:32 < sinclair|node> ningu: there is 1 queue, and many workers, (with each worker running in a child process)
06:32 < ningu> there is one process in async.queue
06:32 < quizme> navvy: thanks for that
06:32 < ningu> if you ask for 50 urls, the question is should you ask for the first one and wait to get the data, then ask for the second one? or should you send the request out for the first 3, then wait? or the first 10?
06:33 < ningu> most of the time is spent waiting for the network response, so there is plenty of time in that "blank space" to send out more network requests, that's cheap
06:33 < ningu> and that's how the node event loop works
06:33 < sinclair|node> ningu: no, in each task, i want to compute the nth prime number
06:34 < ningu> sinclair|node: ok, that sounds like it isn't actually an async task, since you need the CPU the entire time
06:34 < ningu> in that case yes, you would need to spawn
06:34 < ningu> async won't do that for you but it's pretty easy to do yourself
06:34 < ningu> I don't know offhand if there are modules to make it simpler
06:35 < sinclair|node> ningu: so, it isn't a solved problem then
06:35 < ningu> well, everyone knows (or should know) that for cpu intensive tasks you need to fork
06:35 < ningu> what libraries there are for that, I don't know since I haven't had to do it
06:35 < ningu> async.queue would still work
06:36 < ningu> you'd call the callback from the child process
06:36 < sinclair|node> ningu: it would be nice to fork and have each worker read for either a in proc queue, or a redis queue, or some other queuing tech
06:37 < ningu> sinclair|node: one module someone here brought up was https://github.com/learnboost/kue
06:37 < ningu> I haven't used it, myself
06:37 < sinclair|node> ningu: async doesn't solve much, and as far as i can tell, its only for composition of asynchronous operations, nothing more
06:37 < progrock`> Hmmm, maybe for my 'website boilerplate' I should setup an nginx proxy and use jekyll for static content, and node/express for dynamic.... both with JADE/Stylus.... that may be the best of both worlds
06:37 < ningu> sinclair|node: yeah, it would just help you keep track of the queue and know when it was finished, wouldn't help with the forking or dealing with redis or whatever
06:38 < ningu> what's jekyll?
06:38 < sinclair|node> ningu: i think it should be easier to fork out,  and message pass between child_processes, which is why i quited like the sounds of dnode
06:38 < ningu> a caching thing?
06:38 < sinclair|node> *quite
06:39 < ningu> sinclair|node: oh, hmm... yeah, if you don't have to worry about locking or transactions
06:39 < ningu> redis solves that for you
06:39 < progrock`> ningu: jekyll static site generator... its what github uses for gh-pages
06:40 < progrock`> ningu: when making basic static sites... or even static parts of sites (ie. documentation) jekyll is fantastic... and needles to say, nginx and static sites run insanely fast on even very small vps (I was literall running one with 64 mb of ram for a while)
06:42 < ningu> sinclair|node: another module that looks promising is https://github.com/pcrawfor/coffeeq
06:42 < ningu> kue is more well known
06:43 < ningu> progrock`: hmm ok. now that you mention it I've heard of jekyll but completely forgot what it was. :) 
06:43 < ningu> sinclair|node: anyway, nothing is stopping you from using dnode obviously if you think you can do what you want better that way
06:44 < progrock`> ningu: yeah, I figured... I'm guessing most of us have at least made some soft of a project on github
06:45 < ningu> yep
06:45 < ningu> I wasn't developing much for a couple years and when I started to again, I was impressed how much github had taken over. but it's pretty awesome, so... :)
06:46 < progrock`> Yeha, i took 506 years off... up until 3 years ago
06:46 < progrock`> 5-6 *
06:46 < ningu> hehe I was wondering
06:47 < progrock`> But the job market sucks for electrical engineers (and I fucking hated that shit)... so good thing I was good at making websites back in the day
06:47 < progrock`> and now I'm good at data visualzation :)  and actually enjoy it
06:48 < Oddman> yay! :D
06:48 < ningu> yeah, I'm happy to know that if I don't want to be in academia I have enough skills to do other things
06:48 < ningu> I'm pretty good at picking up new things, which I'm kind of surprised not all programmers are
06:49 < progrock`> ningu: th job market is insane if you know what you are doing on the front end... I can't stop turning people down.  Google has been trying to get me o fly out to Cali for 6 months... and I've blown them off 3 times without explaining why during those 6 months lol
06:50 < ningu> depends what you mean by "know what you are doing", I'm not a designer
06:50 < progrock`> I will say it was cool to find out that both Facebook and Google had people iusin gmy charts internally :)
06:50 < progrock`> I'm not a deisnger
06:50 < progrock`> well maybe 10% a designer
06:50 < rendar> gmy charts?
06:50 < salmonax> prog: what does the right kind of "knowing what you're doing" mean these days?
06:50 < salmonax> on the front end, that is
06:51 < progrock`> salmonax: depends.. jus tbeing solid css/js is good... But data visualization is insanely hot topic right now
06:51 < ningu> I'm pretty good with client-side js, recently learned angular
06:51 < progrock`> rendar: I wrote http://nvd3.org
06:51 < rendar> progrock`: cool
06:52 < progrock`> havent touched the site in months, lol... and sadly havent done to omuch in the public repo.. been doing a lot of private charts lately for my work(promised the CEO I would, since he le tme open source the basic stuff)
06:53 < progrock`> salmonax: if you have a solid understanding of JS and can prove it... you can get a front end job pretty much anywhere you would want to work
06:54 < ningu> progrock`: what do you mean by solid... like, being able to predict all of the return values in that wat talk when you do [] + []? or more useful stuff :)
06:55 < progrock`> ningu: 90% useful stuff.... know closures and how to scope things... etc.  Most companies don;t get too intense... like Googles tech interview... sooo simple
06:55 < ningu> hmm
06:55 < ningu> if you use js and don't know closures that's a problem ;)
06:55 < progrock`> yeah, exactly
06:55 < progrock`> but youd be surprised at how shitty a lot of ineterviewees are
06:56 < progrock`> when I was interviewing I thought I was at best average... then i started interviewing people... my confidense went up real fast
06:56 < ningu> hehe
06:56 < progrock`> but I got mt current job with only 1 public website in the last 6 years... and had multiple offers that were very nice
06:56 < ningu> the thing I'd want to convince people of is that although I don't have a lot of experience on paper, I pick things up really quickly
06:57 < ningu> I already know JS but if there are some gaps I am unaware of I'd just fill them in
06:57 < progrock`> ningu: I had soo little on paper 2 years ago.. it was a joke... but the places that youd want to work at.. the ones with real develpoers who know their shit and get shit done.. will be able to figure out whther you are good or not from their tech interview
06:57 < ningu> progrock`: ok, that makes perfect sense. obviously I'd rather work in one of those places anyway.
06:58 < progrock`> ningu: heh, I cant tel you how many times my answer is "maybe blah blah blah... but I could google the answerin 5 seconds if I had a comp in front of me "
06:58 < ningu> and that's ok? I mean, that's what everyone has to do anyway in practice, no one knows everything
06:58 < ningu> if it literally takes 5 seconds to google who cares
06:58 < progrock`> ningu: again, at he places I wanted to work for, it was perfectly fine
06:59 < progrock`> ningu: the places I was like "ehh, i dont even know if I would take the job if they offered it" had much worse interviews.
07:00 < ningu> my other thing is I don't really want to be at a startup working 60+ hours a week :)
07:01 < amagee> hey should a 256mb ubuntu VM be enough to run a very simple node.js/mongodb app?
07:01 < progrock`> ningu: yeah, thats kinda where I am.. but I proved myself for a year... then basically threatened to quit... I now get to show up and leave whenever I want, and I make overtime :)
07:01 < ningu> amagee: definitely, yes
07:01 < amagee> excellent, thanks :)
07:01  * zHalite has joined channel
07:01 < ningu> progrock`: hehe, cool
07:01 < progrock`> amagee: yeah thats fine.. 512 would be nice, but 256 is fine for that.. assunming its not a crazy large mongodb 
07:02 < ningu> yeah, I didn't ask how large but he said very simple, so...
07:02 < progrock`> ningu: given I'm the only one at the company with this privilege... but... I'm not so bad at what i do ;)
07:02 < ningu> I've run more on a 256mb vps than I ever imagined I'd be able to
07:02 < amagee> yeah it'll be a very small db
07:03 < progrock`> amagee: then you got plenty... 128 would even do, lol
07:03 < ningu> amagee: btw, I use 6sync and they've had very nice performance
07:03 < ningu> much better than comparable ec2
07:06 < progrock`> sigh.. I feel like people who would chose sass or less over stylus are the same people that would chose c++ over python
07:06 < Havvy> Does v8 harmony use old proxies or new proxies?
07:06 < ningu> progrock`: well, I don't know why you'd think everyone would settle on the technically superior solution :)
07:10 < beeant-work> do you think it's ok to write longer codes to make it more robust from error?
07:10 <@Nexxy> yes
07:12 < beeant-work> especially in JS dealing with async and sync processes, it is more difficult to make robust codes
07:12 < beeant-work> dont you think so?
07:20 < progrock`> damn cant get sass to compile my scss files automaticlal with node/express... weird
07:20 < progrock`> deinitely followed thedocs correctly
07:20 < Oddman> using guard?
07:20 < progrock`> guard?
07:20 < ningu> progrock`: did you app.use() the sass compiler?
07:21 < progrock`> yup
07:21 < progrock`> set src and dest folders to the corect path, and got nothing
07:21 < ningu> is it before app.use(express.static())?
07:21 < progrock`> yup
07:24 < ningu> well I dunno, I use stylus and never had an issue, but never used sass with express
07:25 < progrock`> yeah stylus and less no prob... and I can't imagine I'm doing anything wrong here... its exactly what they are recommending in the readme.. except a slightly different path
07:25 < ningu> hmm
07:26 < ningu> well my next step would be to look at the code :)
07:26 < ningu> that is, the module code
07:30 < progrock`> wow if this is orrect, how retarded http://stackoverflow.com/questions/15674639/node-sass-not-compiling-with-node-express
07:32 < progrock`> and fail.. tht didnt work either, lol
07:34 < ningu> progrock`: it will certainly reproduce the directory structure of src in dest
07:34 < ningu> other than that I don't know what to tell you
07:34 < ningu> I generally make src and dest the same dir
07:34 < progrock`> ningu: yeah... I tried that 
07:34 < progrock`> I tried everything logical
07:34 < progrock`> oh well.. probably time to sleep
07:34 < LLckfan> Can some1 tell me why in Google Chrome it sometimes will not go to the address I type in but if I click a link somewhere it goes to that address without an issue
07:34 < progrock`> I should try to get into work by 11 am tomorrow, lol
07:35 < progrock`> LLckfan: your enter key is broken /
07:35 < LLckfan> No
07:35 < progrock`> LLckfan: sorry, im not a troll.. i just couldnt resist
07:36 < progrock`> well, hopefully I can get this SASS thing figured out.. I would like to try foundation... and unlike bootstrap, foundation has a ton of mixins that would be very useful to be able to use in my css
07:40 < leichtgewicht> Yey, i have a embarassing somewhat node-related question and nowhere else to ask but here...
07:41 < sambarino1> for shame
07:41 < leichtgewicht> Okay: Here it goes: At my company we are working on a AIR/Flash application.
07:42 < leichtgewicht> And for testing purposes I am working on a local AIR -> nodejs server connection.
07:42 < leichtgewicht> a simple var server = new net.Server(...); thing.
07:42 < leichtgewicht> I test it on two macs in the office, both same OS, same Air and same nodejs version.
07:43 < leichtgewicht> (and same version of the code)
07:43 < leichtgewicht> Yet on one machine the connection.on("connect" event is never called.
07:44 < leichtgewicht> Why could that be?
07:46 < leichtgewicht> (its embarrassing because of the Flash)
07:53 < greelgorke> the Flash is cool
07:54 < leichtgewicht> Yes, my problem sucks.
07:55 < greelgorke> no, i mean The Flash, the red man of speed
07:55 < leichtgewicht> I intended to make that pun.
07:55 < leichtgewicht> ;)
07:55  * greelgorke is kinda addicted to superhero comics
07:56 < greelgorke> to your problem, is there an error or something?
07:56 < leichtgewicht> There is no connection.
07:57 < leichtgewicht> No error.
07:57 < leichtgewicht> I am listening to all events of the server and the connection
07:57 < leichtgewicht> not the slightest beep.
07:57 < greelgorke> well if there is no connection, then you probably not listen or there is no connection form the other part of yoour system :)
07:59 < leichtgewicht> There is a connection.
07:59 < leichtgewicht> Well: I have a slight naming problem.
08:00 < leichtgewicht> server.on("connection", function(connection) { console.info("this is called"); connection.on("connect", function() { console.info("this isn't");}) });
08:01 < leichtgewicht> The connection doesn't seem to connect.
08:03 < alexwhitman> Looks like nodejs.org is throwing a 500 error.
08:07 < greelgorke> leichtgewicht: if i read the docs right, you dont have to listen for 'connect' event on the socket passed to your 'connection' listener. the 'connect' event is emited when you create a conection as client
08:07 < greelgorke> just listen to data on server side
08:07 < leichtgewicht> I do just listen to the data and nothing arrives there either ...
08:07 < leichtgewicht> :(
08:07 < greelgorke> hm
08:08 < greelgorke> you sure your client is connected too?
08:10 < leichtgewicht> I can not really answer that. No error occurs if that is an answer...
08:27 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
08:47 < nick> hello
08:48 < Guest61358> i have tcp server, when i recive some message, let's say, "Login", how can i route it to login.js?
08:49 < Guest61358> i want to have js file for every message that server can recive from client
08:51 < Guest61358> currently i call every function like this["handle"+request] and all my functions are in same file
08:52 < Guest61358> like in above example, handleLogin
08:52 < greelgorke> Guest61358: create an obejct. it's key should be the messages you have in your system, the values are the coresponding handlers. like:
08:53 < greelgorke> var router = {'Login': require('./login.js')}
08:53 < greelgorke> router[message].call(null, stuff,need,by,module)
08:54 < greelgorke> or better (router[message] || defaultHandler).call()
08:54 < Guest61358> nice! i'll try it right away
08:59 < Guest61358> 15 May 10:59:10 - type of: [Function] 15 May 10:59:10 - in login: username,password
08:59 < Guest61358> works :D
09:00 < Guest61358> thank you very much greelgorke
09:00 < greelgorke> no prob
09:00 < greelgorke> a switch case would also do the job, but looks uglier :D
09:01 < greelgorke> and you cant add dynamicly new route to a switch
09:02 < Guest61358> how? :)
09:02 < Guest61358> i thought i have to define every route on compile time
09:30 < sinclair|node> greelgorke: http://pastebin.com/7LdGhgiu
09:31 < greelgorke> ?
09:31 < sinclair|node> greelgorke: this is basically an implementation of promises 
09:31 < sinclair|node> i think
09:32 < greelgorke> erm what are you talking about?
09:33 < sinclair|node> greelgorke: looking to write a  task library, such that i can run arbituary tasks, either in the current process, or deferred in a child process
09:33 < greelgorke> why do you telling me that? :)
09:33 < sinclair|node> greelgorke: because ningu left
09:34 < greelgorke> that's a quite not logical cause
09:34  * sinclair|node has to rant at someone
09:35 < greelgorke> btw your pastbins is not a promise implementation
09:35 < sinclair|node> greelgorke: no, its not
09:36 < sinclair|node> greelgorke: however, it is what i think i need to be implementing
09:37 < greelgorke> sure. may be you should add error handling
09:37 < sinclair|node> greelgorke: error handling can be handled inside the task
09:38 < sinclair|node> and, if there are errors, they can be written on the tasks result
09:38 < greelgorke> never report it back to the process callbackÃŸ
09:38 < greelgorke> ? = ?
09:38 < sinclair|node> why not?
09:38 < leichtgewicht> greelgorke: !!!!!!
09:39 < Nnubes256> A idea would be to define an extra callback designed for error handling
09:39 < leichtgewicht> I found the error: A change between 0.10.5 and 0.10.6
09:39 < sinclair|node> Nnubes256: why?
09:39 < greelgorke> could be useful. i.E. when the several tasks are done but some are errored and it's to decide what to do on the knoledge wich tasks have failed
09:39 < greelgorke> leichtgewicht: what change?
09:40 < leichtgewicht> I don't know. But i just rechecked the node versions.
09:40 < leichtgewicht> 0.10.5 and 0.10.6
09:40 < leichtgewicht> (.6 is not working)
09:41 < greelgorke> this one? stream: make Readable.wrap support objectMode, empty streams (Daniel Moore)
09:41 < sinclair|node> Nnubes256: greelgorke why not just http://pastebin.com/DkL4aQ9r ?
09:42 < Nnubes256> Could give an error
09:42 < sinclair|node> Nnubes256: what error?
09:42 < enzo> hello
09:43 < Nnubes256> If there's no failure, the code would crash because you're supossing an error given by the task in the line 23
09:43 < greelgorke> sinclair|node: this approach seams ok but it's not in convention of a callback. so i can't just pass any callback to process. i have to wrap it 
09:43 < sinclair|node> Nnubes256: no, it would be underfined
09:43 < sinclair|node> no error
09:44 < enzo> I have a function that performs this.emit.bind(this, 'fooBar', args), is it possible to wait for this event 'fooBar', having 'this ?'
09:44 < leichtgewicht> greelgorke: investigating ...
09:44 < Nnubes256> Then, use if(typeof task[n].error === undefined)
09:44 < sinclair|node> greelgorke: thats ok tho, i kinda like having the concept of a task
09:45 < Nnubes256> Inside the "for"
09:45 < sinclair|node> Nnubes256: irrelevant 
09:45 < Nnubes256> So you can "check" if there's any error
09:45 < Nnubes256> In the task
09:45 < Nnubes256> ...
09:45 < sinclair|node> if(tasks[n].error) {there is an error}
09:45 < Nnubes256> Ooooops
09:46 < sinclair|node> ^ simple
09:46 < Nnubes256> Then, use if(typeof task[n].error !== undefined)
09:46 < ningu> you can "check" if there is an "error" in the "task"
09:47  * sinclair|node wonders why people get fascinated with irrelevant things
09:47 < Nnubes256> I forgot the !== -,-
09:47 < sinclair|node> http://pastebin.com/KvKMD4vT
09:47 < sinclair|node> move past the irrelevant thing
09:48 < greelgorke> Nnubes256: this is right if(typeof task[n].error !== 'undefined') consider the ' ', typeof returns a string
09:48 < enzo> for your interest Nnubes256 you should not use typeof, !== undefined is sufficiant
09:48 < sinclair|node> either its defined, or its not
09:48 < greelgorke> immo if (foo != null) is enough
09:48 < sinclair|node> JS has a nice way for you to ask if its null or not
09:49 < sinclair|node> if(obj) <-- if obj is null, its false, otherwise true
09:49 < enzo> check code with JSLint I would advise
09:51 < sinclair|node> i don't find jslint helpful at all
09:51 < thealphanerd> sinclair|node: I read the comment first
09:51 < thealphanerd> and though.. I bet it is sinclair|node saying that
09:51 < sinclair|node> the TS compiler is way more helpful imo
09:51 < thealphanerd> you don't find jslint helpful?
09:51 < thealphanerd> well jslint is useless for TS
09:52 < ningu> listening to nodeup 44, folks are discussing that a downside of connect is you lose core node features like streams on req/res. but I know that in express I've done foo.pipe(res). so.... what gives?
09:52 < sinclair|node> thealphanerd: jslint is unnecessary with TS 
09:52 < thealphanerd> oviously
09:52 < sinclair|node> but im not talking about TS today
09:52 < thealphanerd> but more like useless
09:52 < thealphanerd> TS would not lint
09:53 < sinclair|node> thealphanerd: TS doesn't need to lint
09:53 < thealphanerd> the generated code thoughâ€¦ wouldn't neccessarily lint
09:54 < sinclair|node> thealphanerd: most issues are resolved at compile time, ensuring correct js 
09:54 < thealphanerd> sinclair|node: assuming that hte generated js is well generated
09:54 < sinclair|node> most not all, depending on how much you like type annotations
09:55 < sinclair|node> thealphanerd: don't assume, go look into it
09:55 < thealphanerd> well I just mean in the sense that things are a) prone to human error and b) going to have specific decidsions made on how it is generated
09:56 < greelgorke> leichtgewicht: can you post your code somewhere i can look at it too?
09:56 < sinclair|node> sensible ones i assure you, TS is written by experts with 30 years experience with compilers and languages
09:57 < thealphanerd> sinclair|node: well js was written in 10 days :P
09:57 < thealphanerd> but I kid I kid
09:57 < leichtgewicht> greelgorke: https://github.com/martinheidegger/flash-build-api/blob/master/src/runUnitTest.coffee
09:58 < sinclair|node> thealphanerd: have a read about this guy... http://en.wikipedia.org/wiki/Anders_Hejlsberg
09:58 < leichtgewicht> I have the feeling that the local machine I am working on is not okay.
09:58 < thealphanerd> those are fairly impressive feats
09:59 < sinclair|node> thealphanerd: heh, so the guy behind Turbo Pascal, Delphi, C#, is the main guy behind TS
09:59 < leichtgewicht> greelgorke: https://github.com/flexunit/flexunit/blob/master/FlexUnit4CIListener/src/org/flexunit/listeners/CIListener.as
09:59 < Havvy> sinclair|node: Wow, that's an impressive record
09:59 < sinclair|node> that is just another reason to take TS seriously
09:59 < thealphanerd> sinclair|node: my main problem with using these kinds of dialects is that you lose the ability to do certain things
09:59 < thealphanerd> like real time model transformations
10:00 < sinclair|node> thealphanerd: anything you can do in JS, can be done in TS
10:00 < thealphanerd> but you still need to compile
10:00 < sinclair|node> 100% everything
10:00 < leichtgewicht> module.exports?
10:00 < sinclair|node> leichtgewicht: even module.exports
10:00 < leichtgewicht> btw.: sinclair: your TS advertising annoys me. Maybe even other people.
10:01 < sinclair|node> leichtgewicht: too bad
10:02 < thealphanerd> lol
10:02 < thealphanerd> sinclair|node: are you a developer?
10:02 < sinclair|node> thealphanerd: nope, i just pretend
10:03 < thealphanerd> oh yeha?
10:03 < thealphanerd> I thought you were talking about team based development the other day
10:03 < thealphanerd> student?
10:03 < greelgorke> could you just shut up the flamewar?
10:03 < greelgorke> please
10:03 < Nnubes256> Yea, it's annoying
10:04 < sinclair|node> thealphanerd: you might be confusing me with someone else
10:04 < thealphanerd> greelgorke Nnubes256 : I apologize if I appeared to be flaming, I was attempting legitimate conversationâ€¦ but I'll back off if it is annoying people
10:04 < Nnubes256> By the way, TS-related discussion may be treated in a more general Javascript channel
10:05 < Nnubes256> Because this is #Node.js, not #JavaScript
10:05 < sinclair|node> ^
10:05 < sinclair|node> Nnubes256: worth noting tho, X > JS compilers are just as relevant in a pure JS channel
10:06 <@Nexxy> I'm pretty sure TS is relevant
10:06 < Nnubes256> In a Node.js channel?
10:06 <@Nexxy> yes
10:07 < mmalecki> what's TS?
10:07 < thealphanerd> lol
10:07 <@Nexxy> typescript
10:07 < mmalecki> oh. I thought we got yet another X-To-JS compiler overnight
10:07 < greelgorke> it's not on topic to discuss someones addiction to ts or to not using jslint ;)
10:07 < mmalecki> it's like, I go to sleep and somebody comes up with a new language and decides that JS is a good compilation target
10:08 <@Nexxy> there are other compilation targets?
10:08 < mmalecki> maybe I shouldn't sleep?
10:08 < thealphanerd> mmalecki: no like the emscripten / asm.js?
10:08 < sinclair|node> mmalecki: the whole "is it a good idea to compile to JS" is a bit of a leap of faith tho
10:08 < mmalecki> Nexxy: I myself often compile to ASM, for what it's worth
10:08 <@Nexxy> nooo
10:09 < mmalecki> sinclair|node: isn't it :) ?
10:09 < thealphanerd> mmalecki: what type of performance do you get??? I'm doing a research project right now compiling to asm.js
10:09 < mmalecki> Nexxy: hey, somebody has to run the cloud
10:09 < mmalecki> thealphanerd: no, I mean, I compile to ASM, meaning C -> ASM
10:09 < ningu> it's all about XML++
10:09 < sinclair|node> mmalecki: yeah, it is, but i justify it by assuming there will be other compilation targets in future as these X > JS compilers come about (like the Dart VM)
10:09 < snuggl> mmalecki: do you know of any other targets that run in browsers..? else i agree that JS is the best choice.
10:10 < ningu> wait, maybe it isn't called XML++
10:10 < ningu> someone made a version of C++ that was in XML
10:10 < mmalecki> snuggl: I've heard good things about HTML ;)
10:10 <@konobi> no beer for tim!
10:10 < thealphanerd> mmalecki: I'm working on a compiler from a domain specific functional language for signal processing called faust -> asm.js.  The lngauge can already compile to c++, so I am doing tests using emscripten to compile to asmâ€¦ I am also open to exploring other toolcahins
10:10 < snuggl> mmalecki: and this HTML you talk about is turing complete? =P
10:11 < leichtgewicht> greelgorke: I am not sure what was up with my pc today. But I could swear I had 0.10.5 installed. However: after both machines had 0.10.6 both didn't work. Then I downgraded version by version and I finally got it running at 0.8.23 o_O I have installed my last 0.8.x months ago ...
10:11 < greelgorke> curious
10:12 < mmalecki> snuggl: apparently HTML5 + CSS3 are Turing complete
10:12 < ningu> I didn't even notice there was 0.10.6
10:12 < mmalecki> snuggl: (fun fact)
10:12 < snuggl> yeah it is! but the presentation is quite fixed.
10:12 < leichtgewicht> Anyways: I guess quite a bit changed on net.createServer between 0.8.23 and 0.10.0 ?
10:12 < ningu> leichtgewicht: I don't think so... really?
10:13 < leichtgewicht> ningu: "really?" what?
10:14 < ningu> http://nodejs.org/docs/v0.8.23/api/net.html#net_net_createserver_options_connectionlistener 
10:14 < ningu> http://nodejs.org/docs/v0.10.0/api/net.html#net_net_createserver_options_connectionlistener
10:14 < ningu> looks pretty similar to me
10:14  * sinclair|node must look at asm.js
10:14 < leichtgewicht> The API does...
10:14 < ningu> oh, I thought you meant the api.
10:14 < leichtgewicht> But why does 0.8 work with XMLSockets (flash) and 0.10.0 doesn't ???
10:15 < ningu> I don't know at all how XMLSockets work.
10:15 < leichtgewicht> Mostly like sockets :)
10:15 < leichtgewicht> Just that data transports have defined end signals...
10:16 < leichtgewicht> I think they called them XMLSocket because at the time XML was in.
10:17 < ningu> sort of like the Java in JavaScript?
10:17 < leichtgewicht> yeah
10:21 < leichtgewicht> https://gist.github.com/martinheidegger/5582997
10:22 < leichtgewicht> One of those changes ... *grrr*
10:22 < greelgorke> omit superfluous 'connect' event (Ben Noordhuis)
10:22 < leichtgewicht> Yeah ... 
10:23 < leichtgewicht> very suspicious
10:29 < leichtgewicht> Yes, must be it! just tested instable versions too ... 0.9.11 thats where it breaks.
10:30 < leichtgewicht> *grr* Ben Noordhuis *fg*
10:32 < leichtgewicht> https://github.com/egirshov/node/commit/c11612026fa28f7aedc60c577120f87d86fc15bf
10:32  * Orbitrix punctures node's left breast with a hatchet
10:42 < leichtgewicht> Well, that explains things...
10:49 < basss> hello, i'm tryin to do res.send(data) inside the res.on("end",function listener on express.js. I'm getting an error 
10:49 < basss> oh nvm just solved this in my head :P
10:53 < sinclair|node> thealphanerd	why would you ask me if i am a developer ?
10:54 < alexwhitman> zeekay, are you around?
10:54 < zeekay> yep
10:54 < alexwhitman> Sorry for the issue on executive, but I do have a question if you've got time?
10:54 < zeekay> yeah sure pm me
11:12 < SrPx> How can I test my project using only libs from package.json, so I can be sure it will work in a computer without my global libraries?
11:14 < Nnubes256> SrPx: Add your library folders to the node-modules folder
11:14 < SrPx> Nnubes256: what?
11:14 < greelgorke> SrPx: what are your global libs?
11:15 < SrPx> Nnubes256: wait nevermind, you mean just copying things like express.js to the local /node_modules? This way I can ship it without any problemas at all?
11:16 < greelgorke> actually expressjs should be allready in your package
11:16 < SrPx> greelgorke: I mean, I want to ship my node.js application to someone else who doesn't have those libs installed... so what do I do? just copy things from ~/node_modules to ~/my_app/node_modules?
11:16 < greelgorke> look at your projects root folder, there should be a folder named node_modules with all your deps in it
11:17 < SrPx> greelgorke: no, my deps are at ~/node_modules
11:17 < greelgorke> wehre is your project?
11:17 < greelgorke> where*
11:17 < SrPx> greelgorke: ~/my_main_site/my_particular_project
11:18 < greelgorke> is there a ~/my_main_site/my_particular_project/package.json ?
11:18 < greelgorke> and does it contain any dependencies hash?
11:18 < SrPx> greno, I was going to make one, I'm just reaidng about it
11:19 < SrPx> greelgorke: dependencies hash?
11:19 < greelgorke> where you define your apps deps?
11:20 < SrPx> greelgorke: I don't, that's what I want to do
11:20 < SrPx> I just require things and it works because I have them installed from using "npm install ..."
11:20 < Nnubes256> Then
11:21 < greelgorke> i think now i understand
11:21 < greelgorke> go to ~/my_main_site/my_particular_project
11:21 < greelgorke> run npm init there
11:21 < SrPx> greelgorke: oh sure, what now?
11:22 < greelgorke> do npm install --save or npm install --save-dev there
11:22 < greelgorke> npm will install all libs localy to your package
11:22 < greelgorke> then you could just npm pack or zip it yourself or whatever
11:22 < Nnubes256> npm install <dep> -S
11:22 < Nnubes256> I think
11:23 < Nnubes256> It does the same as npm install --save
11:23 < Nnubes256> ""I think""
11:23 < greelgorke> yes npm install --save express etc
11:23 < SrPx> "test command" ?
11:23 < greelgorke> just omit it, if you dont have any tests
11:24 < SrPx> git repository hm, all that I can add later right
11:24 < greelgorke> npm init should be the very first thing you do when you start a new node.js project
11:24 < greelgorke> yes you can add it later
11:24 < myndzi> so confused
11:25 < myndzi> https://github.com/nornagon/node-conseq/blob/master/index.js <- i was playing with this and wanted to remove the initial Seq() call since it was just kind of taking up space
11:25 < SrPx> so, wait
11:25 < greelgorke> npm install looks for package.json somewhere in the directory tree from cwd up to ~ if it findes one it installes in the same dir, else in your home
11:26 < myndzi> so i changed function Seq() { return new SeqFn(true) } to function Seq(fn) { var newSeq = new SeqFn(true); if (typeof fn === 'function) return newSeq.seq(fn); return newSeq }
11:26 < myndzi> but it fails tests
11:26 < myndzi> i can't see why that would be different than returning and calling a chained .seq method
11:26 < myndzi> er, 'function' of course
11:27 < SrPx> hmm so
11:27 < SrPx> the --save is for saving on the package.json?
11:28 < SrPx> why won't it just save when I use npm install alone?
11:28 < myndzi> because linux
11:28 < greelgorke> --save adds the dependencie to your package.json
11:28 < myndzi> :P
11:28 < myndzi> but also they're two separate functions
11:28 < myndzi> you don't really want anything messing around with package.json unless you explicitly tell it to
11:28 < greelgorke> you could just edit package.json by hand and just run npm install once
11:29 < SrPx> oh I see, interesting
11:29 < SrPx> hm well
11:29 < SrPx> I added a dependency just to test, how can I remove it?
11:29 < ckknight> anyone have any ideas on when yield syntax is going to hit node.js?
11:29 < SrPx> other than editing packages.json
11:29 < ckknight> SrPx: npm install
11:30 < SrPx> hm no?
11:30 < ckknight> yeah, SrPx
11:30 < ckknight> call that in the directory
11:30 < ckknight> it'll install any dependencies you have set up
11:30 < ckknight> just `npm install`, not specifying a specific lib
11:30 < SrPx> I mean how I remove a dep
11:30 < ckknight> oh
11:30 < ckknight> rm -rf
11:31 < SrPx> oO
11:31 < greelgorke> npm uninstall does
11:31 < ckknight> that's probably smarter, greelgorke
11:31 < SrPx> from package.json, you are scaring me
11:31 < SrPx> greelgorke: ty
11:31 < greelgorke> SrPx: type npm help
11:31 < SrPx> greelgorke: no, it's still listed on packages.json ):
11:31 < SrPx> okay
11:33 < phrearch> hey
11:33 < greelgorke> npm rm --save cleans it from package.json SrPx
11:34 < greelgorke> rm and uninstall are aliasses
11:38 < SrPx> greelgorke: thank again
12:01 < spion> can you get the uid of a unix socket client?
12:10 < beeant-work> >> which node
12:10 < purr> beeant-work: SyntaxError: Unexpected identifier
12:18 < Havvy> https://registry.npmjs.org/simple-irc-socket is now a thing.
12:22 < innociv__> hm this "mysql" package doesn't automatically open a new mysql connection when it loses one..
12:23 < innociv__> I wish the db-mysql one didn't give the node-waf not found error 
12:23 < beeant-work> use connection pool
12:23 < beeant-work> i had that problem too before, but after i use connection pool it works ok
12:23 < innociv__> Connection pool?
12:23 < beeant-work> are you using node-mysql?
12:24 < beeant-work> https://github.com/felixge/node-mysql
12:24 < beeant-work> search foor pooling connection
12:30 < innociv__> I see.
12:30 < innociv__> Yes that is the one I'm using
12:31 < innociv__> But why would I want multiple connections?  I just want a new one made when one errors out.
12:34 < innociv__> I guess I just need to use the thing a bit lower, the server disconnects thing
13:16 < ckknight> If anybody has the time to look over http://ckknight.github.io/gorillascript/ and tell me if anything is confusing or if you have any suggestions, I'd appreciate it.
13:17 < cr3> hi folks, what is the "error" arguments passed to the callback function of child_process.execFile? the documentation says it's an "Error" but I'd like to know what kind of errors I should expect
13:33 < dypsilon> why, why is github.io down
13:34 < pachet> went out with its friends last night
13:35 < dypsilon> but bitbucket is here!
13:38 < ckknight> dypsilon: I was wondering that as well
13:38 < ckknight> it was up half an hour ago
13:39 < dypsilon> ckknight, your link is a 404 :) http://ckknight.github.io/gorillascript/
13:39 < dypsilon> i hope they didnt lose the files
13:39 < ckknight> I think it's because github.io is having issues
13:40 < dypsilon> yeah, i wasn't serious
13:40 < ckknight> lose the files?
13:40 < ckknight> it's still available on github.com on the gh-pages branch
13:40 < dypsilon> you know, the pages
13:41 < ckknight> dypsilon: I did another push to it, we'll see what happens.
13:52 < ckknight> huzzah, dypsilon: http://ckknight.github.io/gorillascript/ works again
13:52 < dypsilon> yeah
13:52 < dypsilon> thanks
13:52 < ckknight> though it appears hellishly slow
13:54 < slicky> someone else wanting javascript to be a different language that it is?
13:55 < dypsilon> yeah, I don't support this idea either
13:55 < dypsilon> coffee script is already horrible
13:55 < slicky> +1
13:55 < slicky> if I see a module written in coffeescript I just stop looking at it and keep searching
13:56 < ckknight> fair enough
13:57 < Havvy> ckknight: Why 'mutable' and not 'mut'?
13:58 < ckknight> it's an atypical case anyway and I'd rather have it be loud
13:59 < greelgorke> ckknight: & for string concat seems uncommon to me, and overrides the common purpose of binary &
14:00 < ckknight> greelgorke: I stole it from VB, actually
14:00 < ckknight> and for the most part, string interpolation is a better idea
14:00 < ckknight> "$alpha$bravo"
14:00 < slicky> heh
14:01 < greelgorke> then i'd rather kick the string-concat operator
14:02 < ckknight> sometimes it's clearer
14:02 < ckknight> also, a &= b can be handy to do
14:03  * mscdex shakes a fist at VB
14:04 < ckknight> mscdex: most definitely
14:04 < ckknight> although VB.NET is far less of a travesty
14:05 < greelgorke> why not keeping var there? var-s are mutable let-s are not?
14:07 < ckknight> greelgorke: by having mutable be separate, it allows for cases like let [alpha, mutable bravo] = x()
14:07 < ckknight> greelgorke: and var vs. let is simply a function scope vs. block scope difference
14:07 < ckknight> in javascript, that is
14:08 < ckknight> the semantics of let in GorillaScript are more similar to LISP
14:08 < slicky> what is your reasoning behind writing this ckknight?
14:10 < ckknight> slicky: the idea is to make JavaScript as pain-free as possible, by doing things like having early typechecking (e.g. "asdf" + x() will error since "asdf" isn't a Number) and providing nice helpers for the developer, such as the async stuff, which would otherwise require a library or inversion of code.
14:10 < ckknight> as well as lots of ES5-ES6 features that are mostly backwards-compatible
14:11 < kornnflake_> Is TLS (SSL) in Node.js slow in both directions in and out? Meaning tls.Server and tls.CleartextStream?
14:12 < ckknight> e.g. there's function generators with yield, which I've then used to make Promises/A+ first-class syntax rather than either forcing a manual inversion of code or requiring ES6 syntax.
14:12 < theblackbox> afternoon all
14:13 < greelgorke> ckknight: so far looks like a mixup of coffeescript with javascript some borrowings from other langs. may be it's jsut me but i feel like it's needlessly bloated so far :)
14:13 < ckknight> it's actually pretty slim
14:14 < ckknight> because nearly everything is defined in a prelude which defines the macros
14:14 < ckknight> macros such as the if statement and such
14:14 < greelgorke> i mean the syntax, not the size of the compiler or so
14:14 < ckknight> ah
14:15 < slicky> Ever since ruby, people try and turn everything into "least typed" languages. Why? I mean each piece of that code is important, and any new user migrating to these kind of "safety" languages seems to be trying to skirt the real understanding of what, where and why in the actual language. Maybe I'm way off base, but it feels that way to me.
14:17 < ckknight> slicky: everything has a defined syntax without ambiguity. Just because you can leave off parentheses doesn't make it less inherently worthwhile
14:17 < kornnflake_> Allare talking about the TLS (SSL) slowness in Node.Is it slow in both directions in and out? Meaning tls.Server and tls.CleartextStream?
14:17 < greelgorke> what i'm missing in vanila js are just few things: possibility to define interfaces (like in typescript), simple syntax for pattern matching (beyond switch, like in lisp or haskell) and native support for delegation
14:18 < ckknight> greelgorke: delegation?
14:18 < beeant-macbook> I have an application that asks user to answer a question, and then when the user click on the answer, the answer will be sent via AJAX and then sending back a response whether the answer is correct or not. this loop continues
14:18 < beeant-macbook> do you think it will be better to use websocket on this?
14:18 < beeant-macbook> instead of ajax
14:19 < ckknight> beeant-macbook: AJAX seems perfectly acceptable there.
14:19 < beeant-macbook> i still dont understand what is the benefit
14:19 < beeant-macbook> of using AJAX in this case
14:19 < slicky> beeant, do you have to support real people using the application? Unless you're using a fallback lib like socket.io, you're still a few years out for full adoption
14:19 < greelgorke> ckknight: i.E. you can define a prototype and the runtime looks up for properties there, if it's not found on the object itself.
14:20 < ckknight> oh, you mean proxies?
14:20 < ckknight> we have to wait for ES6 for that
14:20 < beeant-macbook> ya im thinking to use socket.io if websocket would be good
14:20 < greelgorke> ckknight: would be nice if you could say myObject.foo delegate someOtherObject
14:20 < slicky> beeant-macbook, the benefit is that you can send data to the client without their need to request it.
14:20 < Havvy> greelgorke: you could also just make a .get() and tell people to use that.
14:20 < ckknight> greelgorke: ah.
14:20 < greelgorke> proxies? i need to look at them
14:21 < ckknight> but node.js supports it with --harmony_proxies
14:21 < beeant-macbook> oh
14:21 < Havvy> ckknight: Yes, but there's two issues with that:  it's not Harmony proxies.
14:21 < ckknight> eep
14:21 < greelgorke> Havvy: what do you mean?
14:21 < Havvy> And it doesn't work with mocha or jasmine as far as I can tell.
14:21 < beeant-macbook> then i guess ajax would fit this better
14:21 < slicky> beeant-macbook, So, for your use case, ajax works fine since the user needs to request the response. If it was something like waiting for new data from a feed to come in, websockets would fit that need better.
14:21 < leichtgewicht> harmony is not final specification so your code might stop working at some point.
14:21 < Havvy> There are two proxy proposals that made it to harmony status.
14:22 < Havvy> The one in Chrome is the one that was deprecated.
14:22 < Havvy> Unless something has changed since February 2012. But I can't see any updates from the Chrome team.
14:23 < beeant-macbook> i need to improve my JS skills, but im not that beginner, im looking for an advanced book, for something like tips/tricks which book do you think is good for advanced
14:23 < beeant-macbook> Effective Javascript or The secrets of javascript ninja
14:24 < euoia> beeant-macbook: you have presumably read the good parts?
14:24 < beeant-macbook> no
14:24 < euoia> beeant-macbook: it's a good book
14:24 < beeant-macbook> i was sitting beside the author like 2 years ago
14:25 < beeant-macbook> and i didnt get his autograph
14:25 < ckknight> I met crockford two years ago as well
14:25 < ckknight> I was disappointed
14:25 < beeant-macbook> i kind of regret that and im not buying the book unless i can get it autographed
14:25 < greelgorke> you could also read javascript patterns, if you don't like crock :D
14:25 < beeant-macbook> why do you disapointed?
14:25 < greelgorke> from stoyan stefanov
14:26 < ckknight> beeant-macbook: eh, he was a huge jerk when I mentioned JSHint
14:27 < beeant-macbook> he was just ok 
14:27 < beeant-macbook> he was pretty nice to me though, but i didnt know him at that time, i thought he was just a normal guy
14:27 < beeant-macbook> i wasnt that interested in JS back then
14:29 < beeant-macbook> javascript the good parts is an old book
14:29 < beeant-macbook> 2008
14:31 < euoia> beeant-macbook: I don't think that invalidates it. It
14:31 < euoia> It's a short book
14:32 < greelgorke> hum. first sight at proxies: has potential to be the same to js as monads to haskel &co, something we will keep learning for at least the next decade
14:34 < pachet> yeesh proxies :[
14:34 < beeant-macbook> how about the javascript ninja book?
14:34 < beeant-macbook> do you think its good?
14:34 < pachet> secrets of a long delayed ninja
14:35 < rwilcox> I've installed node via nvm. Where does the standard library live?
14:35 < beeant-macbook> node_modules
14:35 < beeant-macbook> ~/node_modules
14:36 < beeant-macbook> ~/.npm 
14:37 < rwilcox> @beeant-macbook I don't see it there. For example, I'm trying to add logging statements to lib/domain.js
14:38 < rwilcox> (yes I realize this is a Bad Thing, but humor me)
14:38 < greelgorke> type which node
14:38 < beeant-macbook> good idea lol
14:39 < rwilcox> @greelgorke /Users/rwilcox/.nvm/v0.8.23/bin/node
14:39 < greelgorke> so look there
14:39 < beeant-macbook> i thought nvm was a mistype
14:40 < rwilcox> already looked there, I don't see those files there. digging into ~/.nvm/v0.8.23/lib I see Python stuff, but no javascript files
14:43 < rwilcox> where do these files normally live? I assume that since I see them in the git repo that they'd be Javascript files on my system, right?
14:44 < lovebug356> Hi, I'm using http server in mocha unit tests. and it seems that in recent versions the connections not close as fast anymore as previously. Is there any reason for this?
14:53 < beeant-macbook> what is the best way to write a long string, such as sql queries
14:53 < beeant-macbook> im separating them with ' + \n
15:11 < dypsilon> use template engine
15:11 < dypsilon> and don't write sql, use mongodb :)
15:11 < merpnderp> beeant-macbook: put them in a separate file and load them at runtime?
15:12 < Havvy> dypsilon: If somebody wants to write sql, let them.
15:12 < beeant-macbook> im porting my web app from php to node
15:12 < beeant-macbook> so i will to this conversion first, later when i finished and stable with this, i will start to think of database migration
15:13 < beeant-macbook> separate file like JS?
15:14 < merpnderp> beeant-macbook: If I was going to make my SQL external, I'd put it in a .sql file.
15:14 < beeant-macbook> i hate having too many files
15:15 < greelgorke> beeant-macbook: then don't do node
15:15 < beeant-macbook> i have to think about the file names
15:15 < dypsilon> Havvy, yeah, i wasn't serious about that sql statement
15:15 < swaagie> till the point you application becomes larger and has files with 20k+ lines :P
15:15 < Havvy> swaagie: I can't stand files with greater than 500 lines in them.
15:15 < swaagie> me neither :P
15:15 < dypsilon> also I carry the idea for a sql template engine for a long time with me
15:15 < swaagie> 500 might even be a bit large :)
15:16 < greelgorke> 500 lines? 50< begins to be pain
15:16 < Havvy> dypsilon: LINQ?
15:16 < swaagie> greelgorke, now thats a overstatement :P
15:16 < beeant-macbook> too many files is ok, but involving like .sql files
15:16 < dypsilon> afaik linq is not a template engine, but more a sql constructor
15:17 < dypsilon> what i mean is rather something like handlebars for sql
15:17 < greelgorke> beeant-macbook: if you want to write long strings in js use Array#push
15:17 < beeant-macbook> i used to work with 10k++ lines  SQL codes
15:17 < dypsilon> with escaping and everything
15:17 < greelgorke> and Array#join
15:17 < slicky> +1 for arrays in string concat, makes it much easier
15:17 < beeant-macbook> i have type more with that like [' ']
15:17 < beeant-macbook> i only need to type '+ when joining string
15:17 < merpnderp> beeant-macbook: I've never had enough SQL to warrant putting it in a separate files (unless it was upgrade/migration SQL). but if you have large blocks of text that you don't want uglying up your code, just load it at runtime when the module is first required.
15:18 < swaagie> #lines doesn't really matter as long as files are  singular consistent entities
15:18 < pachet> beeant-macbook: hearing '10k++ lines of sql' gives me the same response as 'dinosaurs have survived on isla sorna'
15:18 < swaagie> aka they shoulnd't do two completely unrelated things
15:18 < slicky> welcome to jurassic park
15:18 < swaagie> haha
15:19 < slicky> that movie makes me feel old
15:19 < pachet> queue the theme
15:19 < pachet> you know the one
15:19 < beeant-macbook> but its not my code the 10k lines
15:19 < niggler> isaacs you'll love the gems in your email
15:19 < beeant-macbook> it was a legacy code from a company i worked t
15:19 < slicky> people who were born when that movie came out are now 20 years old
15:19 < qbit> aw spotify.. Y U BREAK!?
15:20 < beeant-macbook> ya some codes from jurassic park
15:20 < slicky> heh
15:20 < slicky> my spotify just crapped out too
15:20 < slicky> now it's back
15:20 < slicky> been spotty this morning
15:20 < slicky> spottify
15:21 < beeant-macbook> which do you think makes more money, dirty codes or clean codes?
15:21 < qbit> slicky: i am messing around with node-spotify-web - hopefully it's picking up on it being spotty .. else they changed the api :D 
15:21 < merpnderp> beeant-macbook: if you need to load text and what not on the client, there's node-fileify, which is a sweet Browserify plugin.
15:22 < beeant-macbook> i need to load them on node
15:22 < beeant-macbook> server
15:22 < beeant-macbook> sql
15:22 < beeant-macbook> ill take a look at the fileify
15:23 < merpnderp> require('fs').readFile('mySuperHugeSQL.sql', 'utf8', function( err, sqlText){ console.log("Here Be The SQL's you asked for: " + sqlText); } );
15:25 < dypsilon> also there are some funny packages on npm for sql
15:25 < dypsilon> you might want to take a look
15:25 < beeant-macbook> i think ill just stick with this '+''+'
15:25 < dypsilon> ugly is not always bad
15:25 < beeant-macbook> the problem im having is that im typing sql in a proper indentation.
15:25 < merpnderp> everyone always does that with three.js glsl code. Makes the libs Sooooooo OOOOOOOGly. 
15:26 < beeant-macbook> like SELECT * \n FROm ...
15:26 < beeant-macbook> so there are too many lines
15:26 < beeant-macbook> when it was in php
15:26 < Seventoes> if you don
15:26 < Seventoes> if you don't want it inline, put it in a new file 
15:26 < merpnderp> Blame JS for not allowing multi line strings.
15:26 < beeant-macbook> i can just put "" all the way without joining the string on line breaks
15:26 < Seventoes> those are your options lol
15:27 < pachet> beeant-macbook i dont know if someone has said this already
15:28 < pachet> but you can do multiline strings if you slap a \ on the end
15:28 < beeant-macbook> i thought blame JS is a name of JS library lol so i googled it
15:28 < merpnderp> hah
15:29 < beeant-macbook> its similar with typing ' +
15:29 < slicky> qbit: Not sure :) I'm listening to it and it'll cut out every once in a while for me.
15:29 < beeant-macbook> 1 less character though, but the codes still looks unclean
15:29 < qbit> slicky: app or web interface? 
15:30 < slicky> app on desktop
15:30 < qbit> k
15:33 < swaagie> you can even do an array with lines of content and join them with a space :P
15:34 < gildean> javascript does have multi-line strings?
15:37 < Nnubes256> gildean: Yes, add \n for a new line
15:38 < gildean> no i mean just add \ in the end
15:38 < Nnubes256> \ ?
15:38 < gildean> or use the form: var str = 'something' + 'else' where you can have a line-change after the +
15:38 < Nnubes256> Not understanding what you're asking
15:39 < gildean> Nnubes256: i'm not asking anything, i'm stating
15:39 < Nnubes256> Use \n
15:53 < beeant-macbook> how to debug jade
15:53 < beeant-macbook> i got  Unexpected identifier
15:53 < beeant-macbook> how am i supposed to know where the error is
15:53 < gildean> beeant-macbook: the stack trace should say?
15:53 < beeant-macbook> how can i do that stack trace
15:54 < gildean> beeant-macbook: that's the one saying unexpected identifier
15:55 < beeant-macbook> i just found the location
15:56 < beeant-macbook> its in include
16:00 < qbit> is there a way to make npm list full dependencies for a module? 
16:01 < Domenic_> qbit: npm ls
16:04 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:07 < qbit> Domenic_: I mean for something not installd
16:08 < brettlangdon> qbit, npm info <package>
16:08 < brettlangdon> basically shows you the package.json for it
16:08 < qbit> brettlangdon: right.. but not full dep list - i want recursive dep list 
16:09 < brettlangdon> ohâ€¦ sounds fun
16:09 < Domenic_> qbit: npm install <package>; npm expore <package>; npm ls
16:09 < Domenic_> ;)
16:10 < beeant-macbook> dont you think some JS codes are too efficient and works like magic
16:10 < beeant-macbook> i encountered some JS codes yesterday, that took me hours to understand it, for some reason it works like magic
16:11 < brettlangdon> Domenic_, +1 for npm explore, never knew about it until now
16:14 < pachet> beeant-macbook: just use gameshark for your codes
16:15 < beeant-macbook> no
16:20 < beeant-macbook> what is the best way to export js variable from server side to client side JS
16:20 < beeant-macbook> in php i do in html javascript like var aa = "<?=$aaa?>"
16:22 < Seventoes> beeant-macbook: depends on the template engine you're using
16:26 < beeant-macbook> im using jade
16:27 < beeant-macbook> and backbone in front end
16:27 < fabiosantos> Does anyone know if there is some kind of "reserved" IP address which points to yourself in the network, but is not localhost or 127.0.0.1? I'm trying to unit test an application which is supposed to listen to external connections if and only if a certain configuration is on
16:28 < fabiosantos> right now I'm testing connections to http://<my hostname> but that's obviously not portable to other computers
16:30 < slicky> fabiosantos, use require('os').networkInterfaces();
16:30 < slicky> and grab the one you need
16:31 < slicky> require('os').networkInterfaces().eth0[0].address
16:31 < slicky> first ethernet device's ip address
16:31 < ckknight> fabiosantos: all of 127/8 is loopback
16:31 < geNAZt> slicky, not on all oses
16:32 < slicky> right, replace eth0 with whatever your OS calls it
16:32 < slicky> I believe windows calls it "Ethernet"
16:33 < fabiosantos> slicky, ckknight, thanks
16:33 < fabiosantos> slicky, I have wireless, so its name is "Wireless Network Connection"
16:33 < fabiosantos> slicky: but I'm going to loop over this and grab the first one which has internal:false
16:33 < fabiosantos> slicky: that should do it.
16:35 < slicky> just be careful you don't grab ipv6 if you aren't on a net that supports it
16:35 < slicky> require('net').isIPv4(ip) should help you out there
16:36 < fabiosantos> ckknight, how is 127.0.0.1 different from 127.0.0.2?
16:39 < ckknight> fabiosantos: they both point to the loopback, but they are technically different addresses.
16:40 < quizme> my boss asked me to come up with a plugin architecture for people to add new question types for our questionnaire app.  
16:40 < fabiosantos> ckknight: yes, it's interesting. 127.0.0.2 behaves like pc-fs.descontel.intra (my hostname) in my test in that listening on 127.0.0.1 works but not listening on all addresses (server.listen(port, undefined))
16:41 < quizme> we're using a redis backend
16:42 < quizme> it seems like you would need a way to enter in a custom data structure and custom code
16:45 < quizme> nm this is off-topic i guess
16:45 < quizme> even though it is written in node.js
16:53 < ddod> Question for anyone: What's the simplest way for me to replace a line written to the console? (e.g. 37% -> 38%)
16:54 < bnoordhuis> ddod: process.stdout.write('37%\r'); process.stdout.write('38%\r');
16:54 < ddod> thanks, bnoordhuis!
16:54 < jackcviers> http://stackoverflow.com/questions/852665/command-line-progress-bar-in-java
16:54 < jackcviers> bnoordhuis beat me to it.
16:56 < jackcviers> Other common line escape codes are available, with explanations, in this so: http://stackoverflow.com/questions/3091524/what-are-carriage-return-linefeed-and-form-feed
17:00 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:00 < jackcviers> quizme -- can't you just serialize your question types collection and wipe and replace with the old one + the new question type and write to redis?
17:01 < jackcviers> Btw, I'd assume you'd want to run redis as cache and have a more durable storage solution for long-term storage of question types.
17:06 < Left_Turn> hey does nodejs offer a development server
17:06 < Seventoes> Left_Turn: whut?
17:06 < jackcviers> Left_Turn: not sure I understand what you mean...
17:06 < Seventoes> Left_Turn: nodejs is just an application server.
17:06 < Left_Turn> like a server to test stuff out in
17:06 < Seventoes> how's that different from a regular one?
17:07 < Left_Turn> i dont knw.. today is my 2nd day studying web dev
17:07 < jackcviers> Ah.
17:07 < jackcviers> Ok.
17:07 < Left_Turn> :)
17:08 < jackcviers> So a development server is just the same as a prod server, but on a different box or environment, usually with relatively limited resources compared to production.
17:08 < Left_Turn> oh ok i see
17:08 < jackcviers> When you hear about dev servers/dev environments, it usually means a different physical deployment of a system than the one your customers or users use..
17:08 < s5fs> jackcviers: or listening ports
17:09 < jackcviers> env.
17:09 < jackcviers> Anyway, so yes, you can do that with Nodejs.
17:09 < Left_Turn> oh thats great
17:09 < Seventoes> or for solo devs, it might be "Development" is just running node on their local computer, with "production" being some third party server like S3 or heroku
17:09 < jackcviers> ^^^^
17:09 < s5fs> I'm targetting embedded devices, so my production platform is way underpowered compared to local development
17:09 < Left_Turn> i see.. thanks for all the info guys
17:10 < Seventoes> they're both essentially the same, just how you treat the data is different
17:10 < Seventoes> and usually logging is more verbose in development, etc
17:10 < Left_Turn> oh ok
17:10 < jackcviers> A good solution for development environments is to use a tool called Vagrant.
17:10 < quizme> jackcviers is redis not durable enough?  it writes to disk doesn't it ?
17:11 < gildean> s5fs: you could use a virtual machine with very limited resources to emulate your production env
17:11 < jackcviers> quizme: afk for a bit. bbs.
17:11 < Seventoes> quizme: redis doesn't guarantee writes like a regular transactional database does
17:11 < s5fs> gildean: so far performance hasn't been an issue, but I agree that a low-powered vm would certainly do the trick.
17:12 < quizme> seventoes: oh.  it's not ACID ?
17:12 < quizme> just ACI ?
17:12 < quizme> or whatevers ?
17:12 < jackcviers> quizme: back.
17:12 < s5fs> gildean: thankfully i don't often have to work directly on the hardware, except for testing hardware interaction, but that seems unavoidable.
17:12 < Seventoes> is redis even atomic?
17:13 < jackcviers> No.
17:13 < Seventoes> didn't think so, basically redis doesn't guarantee that data on disk is accurate
17:13 < jackcviers> It's just a cache optimized for fast reads and writes.
17:13 < jackcviers> Not a gaurantee of credibility.
17:13 < jackcviers> Use like memcached, if you are familiar with that?
17:13 < Seventoes> data in redis should be disposible, because you have no guarantees of accuracy
17:14 < gildean> s5fs: i've been playing around with a raspi and node the past week, the raspi seems to run node at a very decent rate
17:14 < gildean> i'm actually surprised how well it works
17:14 < mbalho> gildean: thank TooTallNate, he makes the raspi distro
17:14 < mbalho> (for node)
17:14 < s5fs> gildean: indeed, and sw support for the rpi is really good as well. i'm giving a talk on a little wireless sensor network i build with node + rasppi tomm at nodepdx.
17:15 < quizme> seriously though, what's the chance something is going to go wrong with only a couple  thousand users and only like 100k data per user ?
17:15 < jackcviers> quizme -- if you are interested in durable, eventually consistent persistent, flat data stores take a look at mongodb, couchbase, or riak.
17:15 <@MI6> joyent/node: Bert Belder v0.10 * 6bcf51e : uv: upgrade to v0.10.7 - http://git.io/jDql0A
17:15 < Seventoes> quizme: famous last words. 
17:15 < jackcviers> quizme things fail.
17:15 < Seventoes> quizme: if you don't think your data is valuable enough to gaurantee accuracy, stick with redis
17:16 < pachet> redis is atomic
17:16 < jackcviers> pachet, it is?
17:16 < pachet> necessarily, since it's single threaded
17:16 < quizme> it's a questionnaire app
17:16 < quizme> for encouraging conversation
17:16 < gildean> mbalho: oh, i just compiled it myself (and used 8.23), but thanks to TooTallNate anyways :)
17:16 < quizme> it's not like financial data
17:16 < jackcviers> yep.
17:16 < jackcviers> it is.
17:16 < jackcviers> I stand corrected.
17:17 < Seventoes> still, redis isn't something you want to rely on as the sole data store
17:17 < jackcviers> Also, its long term stuff is dumpable to a log or disk: In order to achieve its outstanding performance, Redis works with an in-memory dataset. Depending on your use case, you can persist it either by dumping the dataset to disk every once in a while, or by appending each command to a log.
17:17 < jackcviers>  
17:17 < mbalho> gildean: ah cool. there are also binaries for raspi now on http://nodejs.org/dist/
17:17 <@isaacbw> if I had a bike I would store it in a shed, which I also don't have
17:17 < s5fs> isaacbw: tell me more about this shed
17:18 < quizme> when i turn off my computer then turn it back on again, the data is still there
17:18 < quizme> obviously something is getting written to disk
17:18 < pachet> yes
17:18 < pachet> it flashes to disk periodically
17:18 < quizme> like every 1 second if you configure it so
17:18 < gildean> mbalho: yeah, i noticed, but i wanted to use 0.8.23 because the gc seems to let the http use a lot more memory in 0.10.x than in previous versions
17:18 < mbalho> sounds like quizme knows what they are doing, we shouldnt keep bugging them with annoying technical questions
17:19 < mbalho> gildean: oh interesting
17:19 < pachet> quizme that kind of defeats the point
17:19 < jackcviers> mbalho good idea.
17:19 <@isaacbw> s5fs: it would be really easy to build one, I think. I have a hammer
17:19 < mbalho> isaacbw: you should use a nail gun they are like 10x more efficient
17:20 < pachet> we could write a nailgun arduino thingie
17:20 < quizme> pachet 30k writes per second is not defeating the point
17:20 < pachet> in node
17:20 < pachet> cache nail positions in redis
17:20 < pachet> go
17:20 < quizme> that's friggin fast
17:20 < Fuzzyma> heyho :)
17:20 < pachet> quizme 1s writes is defeating the point
17:20 < quizme> pachet why ?
17:21 < pachet> because fs access is slow
17:21 < pachet> that's why redis exists
17:21 < quizme> pachet do u know how small my data set is ?
17:21 < quizme> pachet it's like 10k of data per user 
17:21 <@TooTallNate> that reminds me
17:21 <@TooTallNate> gotta build + upload v0.10.6
17:21 <@TooTallNate> for pi
17:21 < quizme> redis will not grind to a halt 
17:21 < jackcviers> http://redis.io/topics/persistence
17:22 < jackcviers> It forks.
17:22 < quizme> or drag its feet with 10k of data
17:22 < jackcviers> So yeah, it won't halt.
17:22 < mbalho> TooTallNate: we should find a college student intern and get them to automate the builds
17:22 < mbalho> TooTallNate: think guillermo is still young enough to qualify?
17:22 < mbalho> HOOOOOOOHOOOOOOOO!!!
17:22 < pachet> quizme put faith in your computer not melting and crank your timer back down, is my advice
17:22 < jackcviers> "If you care a lot about your data, but still can live with a few minutes of data lose in case of disasters, you can simply use RDB alone."
17:22 <@TooTallNate> mbalho: hahahaha!
17:23 <@TooTallNate> mbalho: i know that tjfontaine has an extra one lying aroundâ€¦
17:23 < mbalho> TooTallNate: a guillermo?
17:23 <@TooTallNate> mbalho: totes
17:23 < pachet> we could use a couple extra ones
17:23 < mbalho> TooTallNate: haha
17:23 <@TooTallNate> :p
17:23 <@tjfontaine> ya I was going to maybe do it this weekend
17:24 < quizme> call me crazy but i think 1 second of data loss is acceptable
17:24 <@isaacbw> crazy bastard
17:24 < Seventoes> quizme: it's about more than frequency too though, it's about accuracy
17:24 < jackcviers> This is a debate as old as data itself.
17:25 < jackcviers> Doubt we are going to solve it here.
17:25 < mbalho> no you are wrong lets keep trying
17:25 < quizme> accuracy...
17:25 < Fuzzyma> in compoundjs there is a helperfuncion respondTo() which expect the desired format of the response. My Question: How to set this format on clientssite? (its stored in req.params but i dont know how to get it in there... :(  )
17:26 < Seventoes> meaning there's no guarantees that the data you have on disk is actually what was stored in redis
17:26 < jackcviers> quizme, yeah, you should just be able to store your new question types in redis and persist them as normal. No reason to worry if you aren't concerned about minor short term data loss, which it seems like you aren't. Just store them as a set and be done with it.
17:26 < quizme> okay so somebody types "I think this session is really boring, can we move on to another topic."  but it comes out as  "I think this session is really boring, can we Î­ove on to another topic."
17:27 < quizme> again, who cares
17:27 < Kennythehitman> Does anyone have any examples of using node-csv to generate .csv files from strings?
17:28 < quizme> jackviers, yeah, basically i'm serializing a javascript object as a string and storing it as a value in a key-value store.
17:28 < Seventoes> like i said forever ago, if you aren't worried about that, just use redis
17:30 < quizme> ok
17:30 < quizme> so does that mean I won ?
17:30 < Seventoes> i'm not trying to knock redis at all, i'm a big fan :P
17:30 < quizme> the debate as old as data itself.
17:30 < Seventoes> i'm just saying you don't want to use it for data that you need to be correct
17:30  * pachet disables persistence altogether
17:30 < quizme> yeah
17:30 < quizme> i know it's not perfect
17:31 < quizme> but it's not a mission critical app down to the last .0000001
17:31 < quizme> bit
17:32 < quizme> we're not using it to control billion dollar robots on mars for example
17:32 < quizme> "oh crap, we should have used sqlite3"
17:33 < quizme> the aliens control everything anyway
17:35 < Fuzzyma>  in compoundjs there is a helperfuncion respondTo() which expect the desired format of the response. My Question: How to set this format on clientssite? (its stored in req.params but i dont know how to get it in there... :(  )
17:38 < Seventoes> Fuzzyma: not sure what you're asking
17:43 < Fuzzyma> Seventoes: I created a gist -> https://gist.github.com/Fuzzyma/439efd830c6e234a91b4
17:44 < Fuzzyma> Thats why you get when you use the comppound CRUD generator
17:44 < Fuzzyma> *what
17:44 < Fuzzyma> and iam wondering how to set the format-param to get a json-answer from the server
17:46 < Seventoes> never used compoundjs so i'm not sure :(
17:50 < jackcviers> quizme: the debate as old as data itself? I don't think it can be won. It is not really a debate per se, but more of a question on beliefs.
17:50 < jackcviers> but I agree, use redis as is.
17:51 < quizme> jackcviers k thanks for your endorsement
17:51 < jackcviers> LOL.
17:51 < jackcviers> Like it needed one. 
17:52 < quizme> it's good to get peer scrutiny and validation every once in a while
17:52  * jackcviers has a low risk tolerance
17:52 < jackcviers> Oh for sure.
17:53 < quizme> the redis guy is so smart
17:54 < jackcviers> ddod's question earlier is making me think that Î™ need to add progress reports to my grunt upload plugins.
17:55 < jackcviers> quizme agreed. Most of the guys doing kv distributed systems in open source are crazy smart.
17:58 < runvnc> hello has anyone used gemfury or anything for a private registry? I want npm to work like normal but we can't publish all of the modules to the global registry
18:01 < jackcviers> We just set up local npmjs like https://github.com/isaacs/npmjs.org
18:02 < jackcviers> One of the things to watch out for -- use alpha-numeric passwords. For some reason it doesn't like special chars.
18:03 < jackcviers> Another thing is that you'll want to write some simple scripts for switching between public and private registries for other projects. Haven't solved that one yet, as npm login is interactive and I would prefer not to have to write an expects script.
18:03 < jackcviers> caveat -- replication takes a while the first time.
18:03 < runvnc> thanks a lot jack
18:03 < runvnc> so I can clone the npmjs.org project
18:03 < jackcviers> And needs some babysitting, as curl died for me several times.
18:04 < jackcviers> I have a chef cookbook for setting it up on vagrant around here somewhere runvnc
18:04 < runvnc> thats ok
18:04 < runvnc> I dont have chef
18:04 < jackcviers> runs on chef-solo which is free.
18:04 < runvnc> I dont have vagrant?
18:05 < jackcviers> Vagrant is like a vm manager for your box.
18:05 < jackcviers> Best suggestion is to use a good couchdb > 1.1.0 
18:06 < jackcviers> Using this registry: http://isaacs.ic.ht/registry
18:07 < jackcviers> Is a necessity during replication.
18:07 < jackcviers> Then use npm config set registry after you get it installed. I reccommend using continuous replication and just leaving it alone for a day or so.
18:08 < jackcviers> One thing that you'll run into when you get more users is that you'll have annoying users don't exist errors if you try npm owner add user
18:10 < jackcviers> You can solve that on your local npm by following the fix in this issue comment: https://github.com/isaacs/npmjs.org/issues/91#issuecomment-13431364
18:11 < runvnc> awesome thanks
18:11 < jackcviers> runvnc you don't need vagrant or chef unless you were going to use my cookbook.
18:11 < runvnc> ok you may be pissed at me after explaining all of that
18:11 < runvnc> but
18:11 < jackcviers> Not at all.
18:11 < runvnc> I think I might be able to just use private repos
18:11 < jackcviers> Of course -- make sure you mark the packages as private in package.json
18:12 < jackcviers> Then use the github dependency pattern in your deps and devDeps in dependent modules.
18:12 < jackcviers> Works great.
18:13 < jackcviers> we just found using an npm private registry easier for others who had worked with basic npm projects before.
18:15 < jackcviers> Here's a link explaining how to do that http://debuggable.com/posts/private-npm-modules:4e68cc7d-1ac4-42d9-995a-343dcbdd56cb
18:16 < amartens> oh hey, you guys fixed the performance regression in crypto?  good work
18:55 < Industrial> What's the simplest possible proxy in nodejs? I'm not sure how the process works. Say I have 2 http.Server's, A running on port 80 and B on 9001. What will happen when I want to proxy some HTTP traffic landing on A by hostname to B (or C, D, ..)?    1) do I pipe the request to that port?    2) will it answer with a response object?   3) do I end the response in B or in A?
19:06 < Industrial> Noone uses nodejs as the proxy :P?
19:06 < brettlangdon> Industrial, sounds like a job for nginx
19:06 < Industrial> then, how does the proxy know about new services/died ones?
19:06 < Industrial> say I want to spawn http servers at will,and when listening on a particular hostname, have the proxy adapt and immediately send traffic there
19:07 < Industrial> substac's seaport already uses crdt so I get eventual consistency for fre
19:07 < Industrial> +k +e
19:07 <@MI6> joyent/node: Ryan Graham v0.10 * 1deeab2 : doc: improve exports/module.exports consistency (+1 more commits) - http://git.io/lcywcQ
19:07 < brettlangdon> yeah, out of my realm
19:07 < Industrial> I wanna make it easy (+ button easy) to add a new website to the platform
19:08 < Industrial> but I need a working proxy first :P
19:08 <@isaacbw> Industrial: node-http-proxy is easy to use and battleworn
19:08 < Industrial> ok
19:09 < Industrial> https & websockets too \o/
19:09 <@isaacbw> woo
19:10 < Haeresis> Hi everybody
19:13 < Haeresis> There is something I don't understand
19:13 < mbalho> function scope
19:13 < mbalho> (just guessing)
19:13 <@konobi> women (just guessting)
19:14 < mbalho> gender assumer!
19:14 < Haeresis> :)
19:16 < Industrial> isaacbw: aaaand its gone https://gist.github.com/Industrial/557864596b604ea13d5b
19:16 < Haeresis> var foo = function () { return "test" }
19:16 < Haeresis> foo.bar = function () { return "test" }
19:17 < Haeresis> foo and foo.bar work
19:17 < Haeresis> test And test
19:18 < Seventoes> yep
19:18 <@isaacbw> Industrial: what am I looking at?
19:18 < Industrial> the seaport, proxy and site code :)
19:18 < Haeresis> What is the magic Thing ?
19:19 <@isaacbw> oh, cool
19:19 < mbalho> Haeresis: its called Object, pretty much everything in js is one
19:19 < Seventoes> Haeresis: functions are objects
19:19 < Seventoes> https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function
19:19 < astropriate> with  mongoose, Can I call populate() on a document object
19:19 < Haeresis> typeof foo is Function
19:20 < Seventoes> Haeresis: "foo" is not the same as "foo()"
19:20 < Haeresis> not object
19:20 < Seventoes> Haeresis: functions _are_ objects
19:20 <@konobi> Haeresis: everything in JS is an object
19:21 < Haeresis> But I try
19:21 < Haeresis> var foo = 10;
19:21 < Haeresis> var foo.bar = 10;
19:21 < Seventoes> herbnerder: integers are not objects
19:22 < mbalho> Haeresis: go read a JS book it would be more productive than asking about js basics in a node channel
19:22 < Haeresis> And second is undefined
19:22 -!- mode/#Node.js [+o mbalho] by ChanServ
19:25 < Xehanort> Sorry
19:26 <@MI6> joyent/node: Ben Noordhuis master * 3afa5e6 : deps: reapply c-ares floating patch - http://git.io/q4BC_A
19:28 < Xehanort> I am sorry, I was on my mobile (for the slow)
19:28 < Xehanort> I just want to understand why: the Object, Function, String, Number, Boolean and Undefined, why only Object and Function can have this feature?
19:29 < Xehanort> This morning I thought that only the type object could serve as the basis of variables
19:29 < Xehanort> And And I wanted to know if it was because he had a hidden object associated with any function or something like that
19:31 < Haeresis> I don't read in any post this
19:32 < TacoBot1> TacoBot1...dude...welcome back!
19:33 < Haeresis> In this exemple http://jsfiddle.net/Haeresis/R22Xt/ I thinking it was possible because Account contained an object (the result of the function)
19:33 < Haeresis> but Account is a Function not an Object
19:33 <@isaacbw> oh boy
19:33 < Haeresis> after line 2 (before is Undefined)
19:34 < TacoBot1> Hola taco people!
19:34 < Haeresis> and it's logic
19:34 < TacoBot1> Â¿Public que?
19:34 <@isaacbw> Haeresis: how much experience do you have with software development?
19:34 < TacoBot1> Â¿Public que?
19:34 < Haeresis> var test = new Account()  <= test is Object
19:34 <@mbalho> i want to kick tacobot but i love tacos
19:34 <@mbalho> so i will let it stay
19:34 < grikka> :D
19:34 < grikka> sorry
19:34 < grikka> that was me
19:34 <@isaacbw> did you just send everyone a pm
19:34 < grikka> got i hope not
19:34 < Nnubes256> I have a Node.js bot too
19:34 < grikka> *god
19:34 <@isaacbw> or am I special
19:35 < grikka> i had a broken line, should have only said it once time based on anyone saying hi  to it
19:35 < grikka> then i took the line out
19:35 < Haeresis> but Account is Function and I don't understand how "numberOfUser" can "hang on" to a function
19:35 < grikka> restarted ad BAM
19:35 < grikka> broken and a lllllll broken
19:35 <@isaacbw> better to test on a private channel ;)
19:35 < grikka> GET OUT!
19:35  * grikka glares at indexzero 
19:35 <@isaacbw> Haeresis: functions are objects that can be called
19:36  * indexzero looks sheepishly at his feet
19:36 < grikka> woooord
19:36 < Seventoes> Haeresis: Functions are objects. functions ARE objects. An object is a thing that a function is.
19:37 < Seventoes> Haeresis: "test.something" is a property of the object/function. "test()" is actually calling the function and getting the return value.
19:37 <@isaacbw> think of functions as objects with a '()' field which contains a function body
19:38 < grikka> 90:
19:38 <@isaacbw> you might ask these language-specific questions in ##javascript though
19:39 <@konobi> you can do things like foo.toString()
19:39 < grikka> heh
19:39 < grikka> why does app frog always become "start undetermined" even though its woking
19:39 < grikka> such junk
19:42 < grikka> ircbot AND gtalk bots
19:42 < grikka> fun
19:44 < kschzt> sup, held a talk about node.js today: bit.ly/12bRb5m  :)
19:48 < shlevy> What's the recommended way to make a tarball from node?
19:49 < kschzt> shlevy https://github.com/cranic/node-tar.gz maybe
19:49 <@mbalho> require('zlib')
19:50 < ari``> Is there a way to tell npm to not go ahead and do node-gyp rebuild?
19:50 < kschzt> shlevy npm show tar.gz
19:50 < ari``> if there is a binding.gyp file in the directory.
19:50 <@TooTallNate> ari``: not reallyâ€¦ why do you need that?
19:51 < shlevy> Hmm no way to stream that tarball to an http request?
19:51 < ari``> the only way I found is by changing the "preinstall" script to "echo boo"
19:51 < ari``> which is absurd.
19:51 < ari``> because I'm statically building my native addons.
19:51 < SrPx> ping
19:51 < Seventoes> pong
19:51 < SrPx> hey guys, I've installed browserify, but the bin isnt there...? http://o7.no/11Fmwm8
19:51 < ari``> as in, I'm pre-compiling on the platform I want to deploy to.
19:52 < ari``> *shrug*
19:52 <@TooTallNate> ari``: i feel your pain, but that (prebuilt binaries) is a problem that node-core is planning on solving
19:52 < ari``> hmm
19:52 <@TooTallNate> ari``: i've attempted bundling them manually in the pastâ€¦ it's really unmaintainable
19:52 <@TooTallNate> depending on how many platforms you're going to support of course
19:52 < ari``> well I've made a bunch of scripts to do it.
19:52 < ari``> it's working fine.
19:53 < ari``> yeah, only 1 platform for me.
19:53 < ari``> although the scripts do support multi-platform.
19:53 < ari``> welp.
19:53 < ari``> I guess I can just have a package_deploy.json
19:53 < ari``> that does my little hack for now ;)
19:55 < ari``> TooTallNate: thanks for the info.
19:55 <@TooTallNate> ari``: ya no probâ€¦ sorry this problem isn't sorted out on a more global level yet
19:55 <@konobi> damn c++!
19:55 <@TooTallNate> i really want to push for it to happen, but there's a few blockers in isaacs' court that need to happen first
19:56 < ari``> hmm.
19:56 < ari``> yeah it would be really nice.
19:56 < zenetik> hi, do you know a channel for mongoose?
19:57 < zenetik> wondering how to transforme my find() to findAndUpdate(), i can find the answer in the doc :(
19:57 < ari``> I think telling npm not to run 'node-gyp rebuild' would be nice to have tho.
19:57 <@TooTallNate> ari``: i mean you've already found the workaroundâ€¦ lame as it is
19:57 <@TooTallNate> ari``: you could probably just do "preinstall": "exit 0"
19:58 < ari``> I'll try that instead.
19:58 < ari``> of the echo
19:58 < ari``> =p
19:58 <@konobi> TooTallNate: what are the blockers?
19:58 < mscdex> node.js rules!
19:59 <@TooTallNate> konobi: something to do with singing npm tarballs, and i think isaacs wants to move the tarballs to a more CDN kinda thing
19:59 <@TooTallNate> rather than directly in couch
19:59 <@konobi> TooTallNate: cloudflare style?
19:59 <@TooTallNate> mscdex: you rule!
19:59 < zenetik> he rocks ;)
19:59 <@isaacbw> everybody rules! yay javascript!
19:59 <@TooTallNate> he rolls
20:00 <@TooTallNate> konobi: ya something like thatâ€¦ i'm not totally sure the details
20:00 <@isaacbw> I can't decide if I think the es6 proposals are awesome or terrible as a whole
20:00 <@TooTallNate> isaacbw: well i mean there's some goodâ€¦ some not so good :p
20:01 <@isaacbw> but I have to make sweeping generalizations and form an opinion I can shout from rooftops :(
20:01 <@isaacbw> haaarmooonnnnyyyyy suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu...u.....u...cks
20:01 <@konobi> isaacs: should have a look at cloudflare... should be a fairly simple way to do stuff
20:02 < zenetik> a mongoose question ... https://gist.github.com/franck34/5586908
20:02 <@isaacbw> cloudflare is deceptively large
20:02 <@isaacs> ?
20:03 <@isaacs> konobi: what's cloudflare?
20:03 < kschzt> doesn't cloudflare directly compete with joyent? :) 
20:03 <@isaacs> oh, wrong isaac ;)
20:03 < kschzt> hah
20:03 <@isaacbw> wait, what? cloudflare?
20:06 <@isaacbw> no, I think a lot of the es6 features are neat, but they feel pretty thrown together
20:06 <@konobi> isaacs: nope... they only do cdn
20:08 <@isaacbw> cloudflare has some great people
20:08 <@konobi> isaacs: correct isaacs... was thinking in terms of npmjs.org and downloads
20:08 <@isaacbw> I surprised they haven't been bought by google yet
20:08 <@isaacs> konobi: ohh! ok
20:09 <@isaacs> konobi: oh, i think joyent has some kind of partnership with either them or some other cdn
20:09 <@isaacs> konobi: as i am an open source guy, i'll just use whatever i can get for free.
20:09 <@konobi> isaacs: yeah... but cloudflare doesn't charge based on traffic volume. and their lowest tier is free =0)
20:10 < robertkowalski> isaacs: would love to help with the next steps of npm-www. will there be github issues or something like that?
20:11 <@konobi> robertkowalski: https://github.com/isaacs/npm-www
20:11 < robertkowalski> konobi: thanks.
20:12 < robertkowalski> I know the project and watching it, but I mean especially the announcements I saw the last days in the videos.
20:13 < RobW_> Does anyone here use a project to debug node in Chrome?
20:14 < robertkowalski> RobW_: once in a month or so that node-inspector. really rare
20:14 < RobW_> I took a look at a couple options but there were tons of caveats, "this doesn't work any more" comments, etc.
20:14 < RobW_> robertkowalski: Cool. How do you debug otherwise?
20:14 < RobW_> I'm on Sublime, so no ide.
20:14 < RobW_> Or, I would prefer to stay that way if possible.
20:14 < robertkowalski> <- sublime user, too
20:15 < RobW_> High five.
20:15 < robertkowalski> :)
20:15 <@konobi> c4milo: what would be involved with getting node-inspector functionality into the devtools agent?
20:15 <@isaacs> robertkowalski: hey, you've done a bunch of stuff for npm, right?
20:15 < robertkowalski> I often just use plain console.logs
20:15 <@isaacs> robertkowalski: you're the same robertkowalski?
20:15 < robertkowalski> isaacs: yep and some stuff for npm-www
20:15 -!- mode/#Node.js [+o sblom] by ChanServ
20:15 < robertwierzbowsk> robertkowalski: <- my actual name.
20:16 < robertkowalski> yes, i am that guy
20:16 < c4milo> konobi: err, it will be better to write an agent to communicates properly with devtools frontend UI
20:16 < c4milo> konobi: that way we don't get the burden of having to maintain the UI as well 
20:17 < robertwierzbowsk> I use console logs too, but from what I understand you have to run your script to that point every time in order to get output, yeah?
20:17 <@konobi> c4milo: mmm
20:18 < robertkowalski> i often use the repl, too. but what i am missing there is something to reload the cached modules.
20:18 < c4milo> konobi: at least for a first version
20:20 < robertkowalski> robertwierzbowsk: haha funny
20:21 < robertwierzbowsk> robertkowalski: We're basically brothers, except I know almost nothing about node.
20:24 <@isaacbw> robertwierzbowsk: I wrote a node repl a while ago that lets you do that, though I haven't touched it in a while: https://github.com/isaacbwagner/node-nelly
20:24 <@isaacbw> and most of the stuff in the README isn't actually implemented
20:25 < pachet> isaacbw++
20:25 < robertwierzbowsk> isaacbw: Thanks. I'll check it out.
20:25 < pachet> where most people would fail to document stuff in the readme
20:25 < pachet> he documents things that dont exist
20:25 <@isaacbw> lol
20:25 < RobW_> haha
20:29 < s5fs> the code is the documentation!
20:31 < kschzt> +s
20:31 < kschzt> argh
20:31 < mbcze> s5fs,  nope, code is the documentation when you want to go deeper, not when you see it for the first time
20:32 < s5fs> mbcze: i was just teasing tbh
20:34 < mbcze> s5fs, internet really needs irony notation :)
20:38 < s5fs> mbcze: f'sho
20:44 < robertkowalski> isaacs: i am currently working on that npm-fetch refactoring with Forbes Lindesay for npm. but would love to contribute to that coming npm-www milestones.
20:44 <@isaacs> robertkowalski: neat
20:44 <@isaacs> npm-fetch is what now?
20:44 <@isaacs> the "get a thing and pipe to the location" lib?
20:48 <@MI6> joyent/node: Ben Noordhuis master * 6902f65 : deps: fix up header files in cares.gyp - http://git.io/kFFrfA
20:50 < johnrliv_> what is the best framework to start create a simple website using node.js  I have been leaning toward express
20:50 < s5fs> Dumb question, how do I tie an express session back to a socket.io connection? Right now I'm iterating over my socket clients, then pulling their session info that way, but it's clunky. Thoughts?
20:50 < s5fs> johnrliv_: I like express
20:51 < thomblake> Yes express or nothing. " No framework" is also a nice option for simplicity.
20:52 < kschzt> s5fs maybe not, a socket.io session has nothing to do with authentication necessarily?
20:52 < s5fs> kschzt: I'm using session data to track a user's "role" and I want to send a message to just that particular role holder over socket.io.
20:53 < ub|k> hello
20:53 < s5fs> kschzt: I can provide more detail if that's too vague :)
20:54 < ningu> I'm implementing an API which sometimes returns cached responses. is there a correct HTTP header way to (1) indicate that the response was cached and not retrieved directly from the database, (2) to have the client request an uncached response?
20:54 < kschzt> another question I got asked today was that someone wants a full rails style system with node, with express and backbone or whatever, I suggested Derby but it's 'too tied in' -- is there a platform for making semi-scalable webapps in node? All I thought was express but it's not nearly complete enough for the purpose
20:54 <@MI6> joyent/node: Ben Noordhuis master * 7124387 : http: don't escape request path, reject bad chars (+1 more commits) - http://git.io/kUzbIw
20:54 < ub|k> is there any info on inheriting from native objects? i am trying to call a constructor that i've defined in a C++ add-on and i'm getting an assertion exception (related to the internal fields)
20:54 < ningu> kschzt: the whole community is against that approach basically. there are many pieces out there in modules and you are supposed to tie them together how you need them
20:55 < ub|k> any clue?
20:55 < kschzt> s5fs role? group?
20:55 < kschzt> ningu: good answer
20:55 < ningu> kschzt: how well that works... well, it depends on what pieces you need and if they exist
20:55 < ningu> so you should check :)
20:56 < s5fs> kschzt: yeah, basically i'm looking for a user with a particular session value set, then I wanna send them a message.
20:56 < ningu> people also are in several camps about how to compose pieces
20:56 < ningu> lately there has been talk about how connect is too monolithic
20:56 < kschzt> ningu right
20:57 < kschzt> ningu I held a talk tonight about node.js (slides bit.ly/12bRb5m) and this was asked
20:57 < ningu> it's nice to have someone solve the problem for you but what if you want to do it differently? so, I dunno, I think basically you can't escape thinking about what you're doing :)
20:57 < ningu> kschzt: in my opinion one major thing missing from node-land is a really solid ORM.
20:58 < kschzt> ningu for a lot of people, who know js, getting started with playing with node.js could be easier with, say, an example express setup like that
20:58 < ningu> however I can see arguments for not using ORMs, I've actually been playing with some alternative ways of doing that and it seems to work well
20:58 < kschzt> ningu, with say, grunt tasks to assemble that shit via browserify from whatever pieces
20:58 < ningu> oh... I guess, if you need it in the browser
20:58 < kschzt> then the newbie would start to disassemble it
20:59 < ningu> I don't write very browser-heavy sites usually
20:59 < ningu> but not for any well thought out reason
20:59 < kschzt> I'm pushing heavily for browserify and npm for everything
21:00 < ningu> what modules do you normally use with browserify?
21:00 < kschzt> having the same exact API throughout the stack
21:00 < ningu> I'm rarely doing something client-side that clearly corresponds to something in node core
21:00 < ningu> like, DOM manipulation or whatever
21:00 < kschzt> ningu, check the slides, we're using browserify with a large application with a big dependency tree with npm
21:00 < ningu> ok, cool
21:01 < ningu> I am not yet totally sold on the client/server reuse model, unless you actually have shared functionality between the client and server
21:01 < kschzt> sort of an ide, that shares lots of packages with the command line tools
21:01 < ningu> which I usually don't
21:01 < s5fs> ningu: i'm sharing a small message parser on both client and server, but that's about it.
21:02 < ningu> s5fs: it's pretty awesome that you *can* do it when you want to
21:02 < s5fs> agreed
21:02 < ningu> I just don't want to as often as, say, perhaps socket.io using folks do
21:02 < s5fs> so far, it hasn't come up often for me though
21:02 < kschzt> so the ui has the same packages as the backend exactly, plus a transport layer
21:02 < ningu> kschzt: ok, but what about the code to run the ui itself?
21:02 < kschzt> it's brilliant <3 never been possible before :)
21:03 < ningu> well yeah, no question about that
21:03 < Havvy> ningu: I wish browserify used its own packaging db...
21:03 < Havvy> Though I wonder what isaacs thinks about it.
21:03 < ningu> Havvy: knowing substack somehow I doubt that will ever be the case, plus it seems to be against its purpose
21:03 < kschzt> ningu for example the UI window manager is an npm-delivered self-contained package
21:04 < ningu> kschzt: I see, so basically it's an npm module you'd never use server-side?
21:04 < kschzt> which we can load up in node (poke it with jsdom) or in the browser via browserify
21:04 < ningu> kschzt: do you have your own npm registry or is it open sourced?
21:04 < ningu> oh, right, yeah, for testing jsdom would be nice
21:04 < kschzt> ningu private registry
21:04 < kschzt> npm mirror
21:04 < ningu> jsdom is so slow though :)
21:05 < kschzt> someone said today that running it for a while is a problem; we run it only under mocha briefly
21:05 < kschzt> jsdom
21:05 < kschzt> only for testing
21:05 < ningu> oh, yeah, I think you run into memory leaks
21:05 < ningu> I use cheerio for scraping/parsing
21:05 < kschzt> yeah
21:05 < ningu> it does everything I need for that
21:06 < ningu> in fact when I discovered cheerio I was like, why is everyone using jsdom for this? but that was early days of cheerio and the word hadn't gotten out :)
21:07 < qard> Anyone know of a way to verify if a message gets sent to a socket before it closes? I'm getting data loss of events written to the socket just before close is emitted.
21:07 < kschzt> ningu nice
21:08 < kschzt> pushing my slides again bit.ly/12bRb5m
21:08 < ningu> I wonder if there is a strong argument for using xpath vs. cheerio for scraping
21:09 < ningu> I know jquery already so a familiar syntax is nice
21:09 < acuster> Hey all,
21:10 <@isaacbw> kschzt: yuck, a shortened url to a download :(
21:10 < acuster> in the api docs for fs.read
21:10 < acuster> http://nodejs.org/api/fs.html#fs_fs_read_fd_buffer_offset_length_position_callback
21:10 <@isaacbw> I feel violated
21:10 < acuster> am I right that the offset should read: is offset within the buffer where *writing* will start. 
21:10 < kschzt> isaacbw https://dl.dropboxusercontent.com/u/1795068/sc5node2.pdf
21:13 < pr0ton> so if i install grunt via npm install -g, i can't access it
21:13 < pr0ton> do i need to add some node directory to my path? if so, which one? thanks
21:19 < draginx> Does anyone know of a good module that can take in a queue of items/tasks, check for a key in an object (like a unix timestamp in the future) and then only process that object once that unix timestamp has been "reached"?
21:20 < kschzt> draginx, like, a filter on an array?
21:21 < oreth> draginx: are you familiar with cron?
21:21 < s5fs> draginx: no but that sounds like a fun problem. do you need the task to execute exactly at that time, or just not *before* that time?
21:22 < s5fs> ghetto hack is to just use setTimeout haha
21:22 < ningu> cron sounds like a good solution
21:23 < dukedave> Hi all, does the string, "i" indicate some specific kind of mistake? I'm getting it back as err from the googleapis client 
21:23 < ningu> actually, nevermind
21:23 < ningu> if each task has its own time
21:24 < s5fs> ningu: you're thinking in the right direction though
21:25 < dypsilon> is there any advantage in node.js mongodb driver in using DBRefs insted of normal Object Id references?
21:25 < s5fs> draginx: kue looks interesting: http://learnboost.github.io/kue/
21:25 < ningu> I can't remember if kue lets you set the time of a task to run
21:25 < ningu> but yes, kue is a standard solution for task queues in general
21:25 < s5fs> ningu: sounds like you can, but i didn't read too closely (bottom of page)
21:29 < bluesm> Does node fits where you need build simple dynamic site?
21:30 < bluesm> Some "keeping sessions" some ajax requests some database work, and that it's.
21:30 < bluesm> ?
21:30 < owen1> i want to share a piece of code. but nobody in the world would enjoy this code but my project.
21:30 < owen1> where can i publish it?
21:31 <@isaacbw> github?
21:31 < s5fs> bluesm: yeah, that sounds reasonable. I recommend looking into express (expressjs.com)
21:31 < owen1> isaacbw: i have 2 projects that would use this code. i am not sure where should i put that code.
21:31 < owen1> i can use npm 
21:32 < owen1> publish it to npm, but it will only be used by my 2 projects.
21:32 < owen1> is npm the right place to put that?
21:33 < dypsilon> owen1, publish it on github
21:33 < dypsilon> and stop bothering isaacbw, he is not isaacs
21:33 <@isaacbw> I don't know things
21:34 < dypsilon> actually he does, but he doesn't want to be bothered
21:34 <@isaacbw> lol
21:34 < owen1> dypsilon: how do i consume that from within my projects? i don't want to use git submodules. is there an easier way?
21:35 < dypsilon> owen1, you can add a github repository as a dependency in package.json
21:35 < owen1> dypsilon: oh. awesome!
21:37 < Havvy> owen1: Are they possibly useful for other peoples' projects?
21:37 < dshap> hey all, on my machine (OS X), the command "jshint" calls /usr/local/bin/jshint which is symlinked to ../lib/node_modules/jshint/bin/hint --- problem is, when i try to npm uninstall -g it, i get "not installed in /usr/local/share/npm/lib/node_modules: "jshint""
21:39 < owen1> Havvy: it's a code that sends json to a mongodb db
21:40 < Havvy> Specific JSON I presume?
21:40 < owen1> Havvy: yeah
21:40 < owen1> maybe it's just a function, not sure if i need to create it's own git project for that.
21:40 < Havvy> Then yeah, a personal git repo.
21:40 < owen1> Havvy: ok
21:40 < owen1> thanks
21:41 < Havvy> If it is just a singular function, I'd just copy it.
21:41 < Havvy> And put a comment saying where the other copy is at.
21:42 < owen1> but it also have the dependency passed into it (the db itself) - db = require('db.js')(config); db.insert(some json);
21:47 < SrPx> http://pastebin.com/UQmXqB7F how do I make something run AFTER all that has compiled?
21:48 < dancrumb> hi noders.... is there a way to dump a value to a file from the debug REPL?
21:48 < dancrumb> i have a value that, when I try to view it, crashes the debugger
21:49 < dancrumb> so I figured I might be able to dump it to a file instead and view it that way
21:49 < wankdanker> dancrumb: http://nodejs.org/api/fs.html#fs_fs_writefilesync_filename_data_options
21:49  * dancrumb facepalms
21:50 < bluesm> s5fs: It is the leading library for "php'ish" stuff ?
21:51 < dancrumb> ah... except that's just going to call toString
21:51 < ckknight> SrPx: if you want to do it all in parallel, you can just keep a counter that when it hits 0, calls some callback. If you want to do it serially, you can have it simply churn through and on the last one, call a callback.
21:51 < dancrumb> soo... i guess I wanna call JSON.stringify first
21:51 < dancrumb> ok
21:51 < dancrumb> thanks
21:52 < SrPx> ckknight: i have *just* done that and commented ###horribly ugly code dont ever come back here i hate this###
21:52 < SrPx> (:
21:52 < wankdanker> dancrumb: you could try fs.writeFileSync('filename', new Buffer(weirdValue)) or something like that
21:52 < ckknight> SrPx: thus the need for an async loop handler to ease the pain :P
21:52 < wankdanker> dancrumb: yeah, unless it is an object, then my last suggestion will not help.
21:53 < wankdanker> dancrumb: err, if it IS an object, then my last suggestion will not help.
22:00 <@MI6> joyent/node: Robert Kowalski master * 04ce807 : module: use path.sep instead of custom solution - http://git.io/DAQJIw
22:01 < AndChat|254100> Hi
22:03 <@MI6> joyent/node: Ben Noordhuis v0.10 * 22533c0 : timers: fix setInterval() assert - http://git.io/mvY64Q
22:08 < bluesm> :)
22:09 <@MI6> joyent/node: Timothy J Fontaine master * f0d80d7 : dtrace: enable uv's probes if enabled - http://git.io/qcaBnw
22:12 <@MI6> joyent/node: Trevor Norris master * 88333f7 : http: don't slice unless necessary - http://git.io/CyQoJw
22:13 < draginx> s5fs: exactly at that time and settimeout doesnt work due to process quitting unexpectedly, apolcolypse, etc. :P
22:13 -!- isaacbw changed the topic of #Node.js to: don't slice unless necessary - http://nodejs.org - http://logs.nodejs.org - http://stackoverflow.com/questions/tagged/node.js
22:13 < Havvy> For a second I thought that was a blog post.
22:13 < draginx> cron is also not a good solution
22:39 < niggler> why does the repository example from https://npmjs.org/doc/json.html#repository show an http:// url for a git repo?
22:43 < samholmes> I put a reply-to header in an email I'm sending with Nodemailer, but when I try to reply to the message in gmail, I don't reply to the email in the reply-to: header.
22:43 < samholmes> Anyone familiar with making this work?
22:45 < Fishrock123> Is there a quick way to append a string to process.stdout without re-writing the entire line?
22:45 < Havvy> Save the string to a variable?
22:47 < Fishrock123> No inbuilt way to do so? Heh. Alright.
22:47 <@konobi> Fishrock123: should be
22:50 <@konobi> Fishrock123: process.stdout.write()
22:50 < myndzi> if i was going to inherit from http.Server, is there anything besides the stuff in the docs that i'd need to beware of superceding?
22:50 <@konobi> NB: you should read the docs around that as there's blocking behaviour
22:52 < Fishrock123> konobi: Doesn't process.stdout.write('test') write "test" to the beginning of the current console line and not the end?
22:52 <@konobi> Fishrock123: why would it?
22:53 < Fishrock123> Beats me, but that's what seemed to happen when I tried it before. Right, I'll take your word for it.
22:54 <@konobi> unless you're printing some crazy control characters
22:57 < Fishrock123> Nah. It's working. Dunno what happened before.
23:00 < johnrliv_> do you guys use nvm for node.js version management https://github.com/creationix/nvm
23:00 < Havvy> johnrliv_: It's a good program.
23:00 < Havvy> I personally just use what my package manager give sme.
23:00 < Havvy> gives me*
23:00 < brian_petersen> I am using socket.io and I need to store some data for the socket that is connecting. How would you guys recommend I do this?
23:01 < Havvy> Or more specifically, some other user of my distrobution who pushes the latest node every couple weeks.
23:01 <@konobi> brian_petersen: in memory?
23:02 <@konobi> johnrliv_: I use local builds and symlinks
23:04 <@konobi> so i have many versions built, my $PATH stays the same... to switch versions i change a symlink
23:05 <@konobi> i do the same with versions of ruby, perl, spidermonkey, etc.
23:05 <@konobi> i should probably stick that up in a gist at some point
23:06 <@isaacbw> why do you prefer that over nvm?
23:07 <@konobi> because it's agnostic
23:07 <@isaacbw> *konobi
23:07 <@isaacbw> oh, so you can use the same process for every platform?
23:07 <@konobi> yup
23:08 <@konobi> install using a prefix=$HOME/local/<platform>-<version>
23:08 <@konobi> then ln -s $HOME/local/<platform> $HOME/local/<platform>-<version>
23:09 < johnrliv_> hmm
23:09 < johnrliv_> are you npm installs global?
23:10 <@konobi> then my bashrc looks in the local directory and creates a PATH entry for any symlinks... $HOME/local/<platform>/bin
23:10 <@isaacbw> konobi: that almost seems like something that should be built into distros
23:11 <@konobi> isaacbw: http://pastebin.com/fThT7J9T
23:12 <@isaacbw> so much node
23:12 < paulkon> anyone using a rMBP 13" and are happy with it as a development machine?
23:13 <@isaacbw> 13" would be too little screen realestate for me
23:13 <@Nexxy> I use a 13" mba and am happy with it
23:14 < paulkon> this would be my first macbook and I was worried about the screen real estate as well as potential overheating
23:15 < paulkon> I've heard a lot of overheating stories from my friends using older mbps
23:15 < paulkon> I would get a mba but the rMBP's screen is tempting
23:16 < paulkon> but I'm concerned with the integrated intel 4000 pushing that many pixels
23:18 <@isaacbw> paulkon: maybe you could find someone with a 13" laptop you could play with for a while
23:18 < paulkon> yeah
23:20 < s5fs> paulkon: i'm anti-apple and think the 13" mba is amazing
23:20 < paulkon> maybe I should wait for a retina mba
23:20 < s5fs> paulkon: i went with a dell xps 15, it weighs about 34lbs and looks like an old mbp. each time i hand my laptop to someone i remember how light the 13" mba is and I sigh inside.
23:21 < paulkon> yeah that's the main thing holding me back from getting the rmbp
23:21 <@isaacbw> lol
23:21 < s5fs> paulkon: i'm waiting for a 15" mba with a retina display haha
23:22 < s5fs> paulkon: what are you running now? i came from thinkpads and loathe the dell still.. kinda.
23:22 < s5fs> i won't buy another dell
23:23 < paulkon> well, I was using my dell studio 1555 with an external monitor for the last 3 years.
23:24 < paulkon> the thing ways like 6lbs but at the time it was a great buy
23:24 < paulkon> discrete graphics. 1080p wled screen
23:25 < paulkon> I use the pc I built 2 months ago with 2 30" monitors for all my dev work now
23:25 < paulkon> got tired of the laptop <-> external monitor thing
23:26 < s5fs> going from dual 30" to a 13" screen is going to hurt. i use a 23" display with my laptop at work, but when coding on the road it's not a problem. i only miss the monitor if i'm working in java.
23:26 < paulkon> the mba is really sweet though... can't wait to see it with a retina screen
23:28 < paulkon> yeah I mean I'm comfortable coding on my 1555 on the go since the screen has a higher ppi so I can fit more stuff in it
23:28 < s5fs> exactly
23:28 < paulkon> I'm really ok with the switching to 15" screen since my second monitor is more like for monitoring, logs, and graphs
23:28 < s5fs> i went from crap-ass displays to a 1080p on this dell and it's a world of difference.
23:29 < paulkon> yeah
23:29 < paulkon> it's all about ppi density and how close you are to the screen
23:30 < paulkon> since a laptop is naturally closer to the user and if the ppi is higher than your monitor's then it should be the same
23:31 < s5fs> honestly, if you don't mind the weight the 15" rmbp is pretty awesome, and you can get 2x as much ram as the 13" mba (iirc)
23:31 < s5fs> boss just landed the rmbp 15" and it's nice. only downside is the weight, it's a "real laptop"
23:32 < paulkon> yeah that's the thing
23:32 < s5fs> but i'd rather have a heavy but functional machine over a lightweight machine that i hate
23:33 < s5fs> i run a lot of VMs and really feel like I need the extra horsepower, but I may be mistaken. old habit die hard.
23:33 <@konobi> s5fs: just get a crap load of RAM
23:33 < s5fs> konobi: i have 16gig
23:34 < s5fs> most of the ultrabooks tend to top out at 8gig
23:34 <@konobi> cpu doesn't matter too much these days with VT-x+EPT support
23:34 < s5fs> agreed
23:34 < s5fs> i also disregarded the importance of an ssd, it makes occasional swapping not suck as much
23:35 < s5fs> with 16gig i've disabled swap entirely and haven't seen any issues
23:35 <@konobi> ssd++
23:35 < s5fs> ssd++  (bears repeating)
23:36 <@konobi> i switched out my spinning rust for one and it's a massive difference
23:36 < s5fs> i mean, i've been beating on ssds in sans for a while but having a single ssd in a laptop is a world of difference
23:36 < s5fs> single best upgrade i've made in a long long time
23:37 <@konobi> oh noes... it's another artur
23:47 < myndzi> is 'close' always emitted in every case for the various http classes?
23:47 < myndzi> (request, response, incomingmessage)
23:55 <@konobi> not nessecarily
23:56 <@konobi> there could be error cases
23:56 < myndzi> yeah, that's what i'm trying to determine
23:56 < myndzi> it seemed like it was saying there'd be an error event and a close event
23:56 < myndzi> i can't figure out if they're mutually exclusive
23:57 < myndzi> say i wanted to keep count of open requests, while accounting for all avenues - errors, close/end, timeouts, or possibly explicit aborts
23:57 < myndzi> what's the simplest way to make sure i get 'everything'?
23:57 < myndzi> it appears at least that 'close' emits 'end' too
23:58 < myndzi> so for successful completions, 'end' should be enough
23:58 < myndzi> in the past 'timeout' has not actually closed the socket (?) nor emit anything else so i had some stuff stall once upon a time
23:58 < myndzi> and i'm not sure what happens if an error happens
23:58 < myndzi> so by my count, i need to bind 'end', 'error', and 'timeout' (if i want to use timeout)
23:59 < myndzi> and since i'm working with a proxy, i need to bind to both ends of the connection
23:59 < myndzi> pipe doesn't appear to forward events?
--- Log closed Thu May 16 00:00:03 2013
