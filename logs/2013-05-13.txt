--- Log opened Mon May 13 00:00:15 2013
--- Day changed Mon May 13 2013
00:00 < NoFaTe> Nexxy, do you like pancakes?
00:00 < s5fs> pancakes.js
00:00 <@Nexxy> NoFaTe, on a rare occasion
00:01 < mbalho> Nexxy: IM IN PORT LAND
00:01 < NoFaTe> also, why do you have an RSA key in your website?
00:01 <@Nexxy> mbalho, OH MY GOD REALLY?!!?
00:01 < mbalho> ya rly
00:01 < s5fs> Nexxy: missed you on thursday, had some nodecopter funs
00:01 <@Nexxy> fuck yeah!
00:01 < NoFaTe> Nexxy, ?
00:01 <@Nexxy> NoFaTe, that's none of your concern ;)
00:02 < NoFaTe> :(
00:02 < NoFaTe> also, I just figured out that you are of the female gender!
00:02 < NoFaTe> meep
00:02 < mbalho> NoFaTe: are you being a creeper?
00:03 <@Nexxy> I uh
00:03 < zomg> There are no girls on the internet!
00:03 <@Nexxy> don't know how to respond to that
00:03 < NoFaTe> mbalho, nah, just googled 'nexxy node.js'
00:03 < NoFaTe> lol
00:03 <@Nexxy> it's also a bit presumptuous to assume you know my gender
00:04 < zomg> Someone needs to make stalker google
00:04 < zomg> You'd put a name or something into the box
00:04 < zomg> and it would look it up on various social networks and such
00:04 < zomg> :D
00:04 < zomg> I bet there already is one of those though
00:04 < s5fs> zomg: as long as it has shifty eyes for the waiting animation i'm down
00:04 < mbalho> one time in this channel someone stalked me online from my username and found out who my significant other was and told me they were attracted to them
00:04 < mbalho> complete stranger
00:04 < s5fs> mbalho: "we have so much in common"
00:04 < mbalho> so, lesson is, dont be a crepper
00:04 < zomg> mbalho: sounds fun
00:05 < mbalho> thats why i dont use my real name anymore
00:05 < mbalho> #funfacts
00:05 < mbalho> #creepers
00:05 < zomg> What a nice everything you have there...
00:05 < zomg> sssssssss
00:05 < zomg> boom.
00:05 < zomg> :P
00:06 < NoFaTe> Nexxy, how is an 'observation' of mine considered 'presumptuous'?
00:06 <@Nexxy> because your observation is based on the erroneous notion that you can tell someone's gender without asking them 
00:07 < zomg> That is funny though
00:07 < zomg> On another channel there was a person about whom everyone used "her" but turns out it was actually a guy... who just preferred to go by her
00:07 < zomg> So.. yeah
00:08 < NoFaTe> Even though my obsevation was not definite, if I insulted you excuse me
00:08 < zomg> internet everyone
00:08 < zomg> =)
00:08 <@Nexxy> 'actually a guy' seems quite loaded if they already indicated their preference of pronoun
00:09 < zomg> haha
00:09 < zomg> okay their physical gender was male
00:09 < zomg> good enough now? ;)
00:09 <@Nexxy> NoFaTe, I'm not offended, it was just really awkward, I'm not used to being singled out based on my gender here
00:09 <@Nexxy> zomg, no, there is no such thing as physical gender
00:09 < zomg> nitpick much
00:09 < zomg> you get the point
00:09 < zomg> :P
00:09 < NoFaTe> Nexxy, hey, it was just an observation
00:09 < NoFaTe> I don't think it changes anything
00:10 <@Nexxy> zomg, it's important to me
00:10 < zomg> Honestly though, if someone has male physiology but let's say they mentally identify as a woman
00:10 <@Nexxy> so I tend to correct people when they're wrong
00:10 <@Nexxy> and right now, you're wrong
00:10 < zomg> they are physically male but mentally female -> physical gender, mental gender
00:10 < bnoordhuis> what about eunuchs?
00:10 < ljharb> i've usually heard those as "sex" versus "gender"
00:10 <@Nexxy> http://itspronouncedmetrosexual.com/2012/03/the-genderbread-person-v2-0/
00:11 < dypsilon> what about robots?
00:11 < NoFaTe> well, this conversation escalated quickly
00:11 < bnoordhuis> dypsilon: good one
00:11 <@Nexxy> NoFaTe, this is why it's generally considered inappropriate to single someone out in a public forum
00:11 < dypsilon> i feel offended by every captcha on the web
00:11 < Lorentz> will please someone think of the robots?
00:11 <@isaacbw> Nexxy: that site is so wonderful
00:11 <@Nexxy> isaacbw, agreed
00:13 < NoFaTe> whatever, we're still alive, the world is still here, I think we're good.
00:13 < NoFaTe> also, goodnight
00:13 <@Nexxy> let's dismiss things that aren't important to us instead of recognizing we messed up
00:13 <@Nexxy> goodnight :)
00:13 < zomg> Nexxy: anyway feel free to tell me how I was being wrong there
00:13 < mbalho> admitting youre a creeper is a lot of work
00:13 <@Nexxy> zomg, query perhaps?
00:13 < zomg> Go for it
00:16 <@isaacbw> oh man oh man oh man did github just add repository-specific searches without having to add repo:../..
00:16 < ljharb> zomg: "actually" implies that you think that the person's choice of gender isn't real, but instead is something they're just pretending to be, and that their physical body is the source of truth for gender. when in fact, one's personal choice of identity is the sole and real arbiter of how to describe one's gender.
00:19 < mbalho> isaacbw: whoa that sounds awesome
00:19 < mbalho> isaacbw: oh cool they did
00:19 < mbalho> WOOT
00:20 <@isaacbw> WOO GITHUB PARTY
00:20 <@Nexxy> ljharb, well said :)
00:20 < ljharb> thank you
00:21 < NoFaTe> btw, Nexxy, in case you didn't notice, query
00:23 < zomg> ljharb: yeah I did not quite intend it to sound like that but fair point.
00:23 < ljharb> zomg: glad to hear it wasn't intentional :-) but it's still an unconscious bias that needs to be pointed out before one can eliminate it.
00:23 < ljharb> so, you're welcome!
00:23 < ljharb> :-)
00:27 <@isaacbw> lol
00:31 < Technodrome> ljharb: do you use node.js for server side web apps, like with express?
00:31 < ljharb> yes
00:32 < Technodrome> i'm still sorta up in the air about it 
00:32 < ljharb> i've used it for one at any rate
00:32 < Technodrome> its just so much more bare than say, .net mvc 
00:33 < ljharb> it's a blank canvas on which to create a work of art
00:33 < ljharb> what you see as "bare" i see as "unbloated"
00:33 < s5fs> "clean"
00:34 < s5fs> any trash you find is likely something you dropped. i like that.
00:34 < dypsilon> :)
00:35 < dypsilon> if you are not annoyed by the .net bloat yet than use .net a little more and come back
00:37 < s5fs> problem with .net mvc is that there's still an ocean of webforms out there. you have to be very careful to avoid traps like that.
00:38 < niggler> what's .net s5fs 
00:39 < ljharb> niggler: hush, don't lose your childlike innocence
00:39 < NotMyself> i actually really like NancyFx if you have to use .NET
00:40 < NotMyself> basically a clone of sinatra http://nancyfx.org/
00:40 < ljharb> i question the premise that you ever have to use .net
00:40 < NotMyself> some contracts require it
00:41 < Lorentz> fire those contracts
00:41 < ljharb> i question the premise that you need to sign such awful contracts
00:41 < niggler> sounds like indentured servitude
00:41  * NotMyself shrugs gotta pay the bills sometimes..
00:41 < ljharb> i also question the premise that you can't pay the bills without turning down bad contracts :-p
00:41 < ljharb> lol i can do this all day
00:41 < ljharb> whee
00:42  * ChrisPartridge slaps ljharb
00:42 < niggler> .net sounds like the prostitution of computer programming
00:42 < NotMyself> agreed, im just saying you can do .net without wanting to stab yourself in the face long term...
00:42 < NotMyself> but as of last monday i dont have to sell my soul like that any more so win for me
00:43 < niggler> NotMyself you retired?
00:43 < NotMyself> its all ioS and node for the next long while
00:43 < niggler> next long while != "any more"
00:43 < NotMyself> nope i got laid off and took a job with a non-.net shop
00:43 < s5fs> NotMyself: .net sucks compared to node work, it's really that simple
00:44 < s5fs> NotMyself: not from a technical perspective, i'm not talking about that. i mean from a "wheee this is fun" perspective.
00:44 < s5fs> but that's me.
00:44 < NotMyself> agreed sadly it is possible to have fun with .net but the jobs usually will not touch that stuff with a 10 foot pole
00:45 < NotMyself> but i dont care its not what i do anymore
00:45 < s5fs> NotMyself: it's hard to do 'pure' .net stuff, you always get sucked into some shitty chore. i don't know, it's more the nature of business programming than anything else.
00:45 < s5fs> NotMyself: that's the spirit! movin' on
00:45 < NotMyself> agreed .net is the new java its where programmers go to die becuase they just dont care anymore
00:46 < TehShrike1> Does anyone remember a recent blog post on code presentations vs traditional peer reviews?  I think it was someone in the JS crowd but I can't seem to find it
00:46 < niggler> what's java then?
00:46 < NotMyself> the new cobol?
00:46 < s5fs> niggler: it's an older, more surly dotnet. also avoid.
00:46 < TehShrike1> NotMyself: I think programmers go where they can get a job :-P
00:47 < s5fs> I've worked professionally in both cobol and java. Crazy.
00:47 < niggler> i don't understand this professional coding business
00:47 < niggler> sounds like drudgery
00:47 < Technodrome> s5fs: i've never used webforms
00:47 < NotMyself> TehShrike1: i agree and luckily the things i want to work with can get me a job so /wave
00:47 < NotMyself> Technodrome: webforms were the worst kind of horror...
00:47 < TehShrike1> niggler: most of the professional programmers I've talked to on the subject have dreamed of doing some physical labor to make a living, and coding in evenings and weekends for the love of it
00:47 < s5fs> Technodrome: that's cool, you didn't miss much
00:48 < s5fs> TehShrike1: if i could chose an alternate career path, i'd be a timber framer.
00:48 < TehShrike1> niggler: but personally, even when it's less awesome, I don't mind it at all as a day job, because I like programming, and doing it 8+ hours a day makes me better at it
00:48 < TehShrike1> s5fs: I can dig it.
00:48 < TehShrike1> Woodworking by day and programming by night would be pretty rewarding I'll bet
00:49 < TehShrike1> I'd do that
00:49 < s5fs> you'd trade your laptop for an axe. not bad.
00:49 < NotMyself> TehShrike1: i agree i really dont care about platform as long as the gig is green field and i dont have to wade through millions of lines of legacy code written by a team who didnt give a crap
00:49 < TehShrike1> NotMyself: yeah, being with a team that gives a crap is huge
00:50 < dandv> I'm relatively new to node. Read nodebeginner.org but I'm still trying to wrap my head around node. How can I do very simple stuff in other languages, liek reading a file line by line, and stopping programmatically? E.g. while ( line = file.readline() ) { ... process line ... } ?
00:50 <@isaacbw> equity is the new salary
00:50 < TehShrike1> dandv: so, reading stuff in is time consuming
00:51 < Technodrome> s5fs: you ever used .net mvc?
00:51 < TehShrike1> dandv: reading in a file from hard disk could take hundreds of milliseconds from when you issue the command
00:51 < passcod> s5fs: haha. I'm an architect by trade and a developer by passion. I constantly have to precise "Architect. Not the software kind." when I speak to people :)
00:51 < TehShrike1> dandv: so the node way is to open the file, get a stream, and deal with the stream as it comes in, one chunk at a time
00:51 < TehShrike1> dandv: you could just be "handling" it by appending it to all the other chunks you've gotten so far, and then once the stream is finished, doing something with everything that came in (splitting it on newlines and iterating over it or whatever)
00:52 < mbalho> dandv: https://github.com/substack/stream-handbook
00:52 < dandv> TehShrike1: right, which is why node makes asynchronous. Alright, so how can I stop the stream from parsing the file? What I'm trying to do is read chunks at a time on demand (the client controls the flow) from a CSV file. I haven't seen any CSV module to do this.
00:52 < dandv> *from a huge CSV file. So it's imperative that I don't load the entire file in memory.
00:52 < dandv> I've read this SO question, http://stackoverflow.com/questions/6156501/read-a-file-one-line-at-a-time-in-node-js, but I don't feel it answers my conundrum.
00:52 < TehShrike1> dandv: one line at a time?  I think I saw a module somewhere that would take in a stream and give you another stream that would emit new data one line at a time
00:53 < passcod> can't you just pause a stream?
00:53 < dandv> TehShrike1: maybe the `csv` module? It doesn't work, I filed a ticket at https://github.com/wdavidw/node-csv-parser/issues/102
00:53 < dandv> passcod: the csv module allegedly has a pause() method, but it doesn't work (pasted the ticket above)
00:55 < owen1> my tests pass when i run each one by it's own, but when i use the tape binary - node_modules/tape/bin/tape test/*.js i get 'not ok 2 plan != count' and 'not ok 3 plan != count' -  https://github.com/oren/groups/tree/master/test
00:55 < s5fs> TehShrike1: yeah, i've worked with .net mvc. when i was doing dotnet work i followed scott hanselmans blog a lot
00:55 < dandv> other languages deal with this by buffering the file (or reading ahead). I'm surprised it's so complicated to handle this situation in node. It's one of the most basic things, read lines from a file.
00:56 < TehShrike1> dandv: well, you could handle the stream yourself instead of piping it to the csv module
00:56 < TehShrike1> It's a little annoying, but not too much work
00:57 < TehShrike1> Buffer up new data as it comes in, however you like, pause the input stream when you feel like, and send buffered data to the csv module
00:57 < dandv> TehShrike1: that might be the way. Can you point me to some docs? E.g. pausing the stream. Would http://stackoverflow.com/a/12299566/1269037 be a start?
00:58 < TehShrike1> dandv: are you using node 10 or higher?
00:58 < TehShrike1> dandv: streams got a lot less tricky recently
01:01 < substack> TehShrike1: hahahahah
01:01 < substack> false
01:01 < TehShrike1> substack: :-x
01:01 < TehShrike1> correct me quick!
01:01 < TehShrike1> I don't want to be wrong any longer
01:02 < substack> it's even more complicated now
01:02 < TehShrike1> aww
01:02 < substack> because there is the old way and the new way and the switching between the 2 modes is implict
01:02 < substack> and the new way has Readable, Writable, and Transform classes
01:02 < substack> anyways just use stream modules like through
01:03 < substack> don't even bother trying to write core streams, it's too hard
01:03 < substack> use concat-stream, through, duplexer
01:03 < substack> those will get you pretty much all you need
01:04 < dandv> TehShrike1: I'm using v0.8.23 due to this bug http://youtrack.jetbrains.com/issue/WEB-7605, but I can use 0.10.5
01:05 < dandv> why the heck are simple things so cumbersome in node.js? I just want to read from a damn file.
01:06 < mbalho> you can do it in ruby in like 1 line i think
01:06 < mbalho> you can always go back
01:06 < dandv> yeah, do I need to go back to perl?
01:06 < niggler> nothing wrong with perl
01:07 < dypsilon> there is always readfile http://nodejs.org/api/fs.html#fs_fs_readfilesync_filename_options
01:08 < TehShrike1> Yeah, but I assume he wants async
01:08 < dypsilon> http://nodejs.org/api/fs.html#fs_fs_readfile_filename_options_callback
01:08 < TehShrike1> He already said he doesn't want the whole file in memory
01:08 < dypsilon> async
01:08 < dypsilon> ah
01:08 < TehShrike1> yarp,  Gotta have streams in there somewhere
01:09 < dypsilon> http://nodejs.org/api/fs.html#fs_fs_open_path_flags_mode_callback
01:09 < dypsilon> there are also probably lots of modules for easy work with files
01:10 < TehShrike1> I would assume
01:10 < mbalho> whaaaa its easier to be angry in irc then do a bunch of npm searches all day
01:10 < niggler> node-perl
01:10 < TehShrike1> dandv: http://nodezoo.com/ is nice
01:10 < TehShrike1> dandv: it's also reasonable to search at http://npmjs.org/ nowadays
01:10 < niggler> lol https://npmjs.org/package/perl
01:11 < dypsilon> lol
01:11 < TehShrike1> niggler: bah, it uses compiled binaries ;-P
01:12 < dandv> I have already searched through all of the CSV modules - most are crap or abandoned.
01:12 < TehShrike1> dandv: don't look for csv modules, look for file-reading modules
01:12 < dypsilon> i think he just wanted to prove that node.js has no diamond operator
01:12 < TehShrike1> I don't know what a diamond operator is, but it sounds shiny
01:12 < dandv> dypsilon: I don't even know what that is, so nope :) "<>" maybe?
01:13 < niggler> <> is a perl idiom
01:13 < mbalho> dandv: what is your criteria for 'crap'?
01:13 < dypsilon> yeah :)
01:13 < dypsilon> perl has an idiom for everything
01:14 < dandv> mbalho: at least two of: lacking a clear description, differentiation from prior art, usage, a repo even, using bad English
01:14 < niggler> aww i was hoping bless would be some awesome JS OOP
01:14 < mbalho> dandv: interesting that code isnt in there
01:15 < dandv> mbalho: I'm talking from a user perspective. https://github.com/isaacs/npm-www/issues/298
01:15 < dandv> I don't have time to examine the code of 20 CSV module, and I *should* not.
01:15 < astropirate> Hello friends
01:16 < TehShrike1> dandv: have you tried nodezoo?
01:16 < mbalho> dandv: the best way to solve that is to be a good open source citizen and open issues on peoples repos, its not a problem that can be magically solved centrally
01:16 < dandv> TehShrike1: not yet. mbalho: have a look at https://npmjs.org/package/csvjs. Is that even remotely usable?
01:17 < TehShrike1> dandv: I wouldn't expect a good csv module to interact with files in the file system
01:17 < dandv> mbalho: or https://npmjs.org/package/node-csv
01:17 < TehShrike1> dandv: I would expect a good module to take input via streams, or just as strings
01:17 < mbalho> dandv: that module isnt streaming so it wont work for you
01:17 < ljharb> dandv: you should always look at the code of what you're using. always.
01:17 < dandv> TehShrike1: a good one should, because CSV files can be large, and the user might want to read them in chunks, instead of all records at a time.
01:18 < TehShrike1> dandv: find a module that abstracts away the file system/streams sufficiently for you, and point it at a decent csv module
01:18 < dandv> ljharb: I should also be realistic and not reinvent the wheel.
01:18 < TehShrike1> dandv: that's why a good csv module would use streams
01:18 < ljharb> dandv: exactly. so you should review the code of existing suggestions until you find the one most suited, and then use pull requests to tweak it for your needs.
01:18 <@Nexxy> dandv, check out slice-file & through
01:18 < ljharb> dandv: if you don't have time to review code of an existing suggestion, you don't really have time to build the feature anyways :-p
01:18 < dandv> ljharb: and I should also give up on having a life. TehShrike1, Nexxy: let me check.
01:19 < dandv> I find that Sturgeon's Law applies very, very well to npmjs.org's modules.
01:19 < ljharb> that's not the experience of most people i've talked to that use node.
01:20 < mbalho> the npm motto is stfu and send more pull requests
01:20 < ljharb> if you're not going to try to make something better, i don't think you get much of a right to complain :-p
01:21 < TehShrike1> dandv: even if it's true that 90% is crap, npm has more to choose from than the other leading brands ;-P
01:21 < niggler> dandy I'm pretty sure no one is getting paid for writing node modules
01:21 < dypsilon> dandv, also I support your opinion that npm has no awesome ranking system, I suggest you stop bitching and comparing it with perl, because cpan is full of crap also. I know because I invested enough time in it.
01:21 < TehShrike1> I got paid to write a couple
01:21 < niggler> what you are seeing is a platter of lulz
01:21 < niggler> what npm needs is a way to sort the search by # downloads
01:22 < dypsilon> niggler, +1
01:22  * Nexxy downloads own modules over and over
01:22 < ljharb> i'd rather see number of dependents
01:22  * dypsilon sets up a cron job for tht
01:22 <@Nexxy> ^
01:22 < niggler> i thought the download statistics filter that out
01:22 < ljharb> the more people that rely on a module, the better it's likely to be
01:23 < dypsilon> ljharb, I got burned by this idea lots of times
01:23 < niggler> ljharb but then some grunt modules or whatever end up rising to the top
01:23 < dandv> I'd rather see actual comments from users of the modules.
01:23 < dandv> As CPAN has been doing for the past 10+ years. https://github.com/rjrodger/nodezoo/issues/20
01:23 < ljharb> never read the comments
01:23 < dandv> ljharb: you should.
01:24 < ljharb> lol cause yelp reviews are so spot on.
01:24 < dypsilon> dandv, github issues are the comments
01:24 < niggler> is there an app galary?
01:24 < niggler> *gallery
01:24 < TehShrike1> Is there an app salary?
01:24 < dandv> ljharb: well, go ahead and dismiss the entire consumer reviews industry.
01:24 < TehShrike1> Is there a map to Calgary?
01:25 < ljharb> doing so has served me well thus far
01:25 < TehShrike1> Would you slap Mallory?
01:25 <@Nexxy> what about amazon?!
01:25 <@Nexxy> I wouldn't know what to buy if it wasn't for those stars
01:25 < TehShrike1> Is there a crap pillory?
01:25 < ljharb> lol
01:25 < TehShrike1> Nexxy: srsly
01:25 < ljharb> i do read the funny reviews on amazon
01:25 < TehShrike1> I read Amazon reviews all the time
01:25 < ljharb> the banana slicer, and the steering wheel laptop desk, are my favorite
01:26 < Lorentz> I was pondering how to install a nice computer into my car recently
01:26 < ljharb> an ipad and double sided tape
01:26 < Lorentz> maybe smaller steering wheel too
01:28 < niggler> we need a curated list of modules
01:28 < Lorentz> niggler: that would be nice
01:29 < niggler> like dailyjs except for node modules
01:29 < dandv> niggler++
01:29 < niggler> except dailyjs isn't really curated
01:29 < niggler> but you get the point
01:29 < dandv> What ever happened to JSAN?
01:30 < niggler> http://www.openjsan.org/
01:30 < dandv> niggler: right, it's deserted. http://www.openjsan.org/go/?t=l&q=csv
01:30 < niggler> lol
01:31 < ljharb> niggler: so make a list and put it on github
01:31 < ljharb> a list of links is how yahoo started :-p
01:31 < ljharb> also craigslist
01:31 < niggler> dandv is in a great position right now
01:32 < niggler> try out the CSV modules available
01:32 < niggler> holy crap more than 4 pages of things matching CSV
01:32 < dandv> niggler: exactly. too much crap. And yeah, here's my position: https://pinboard.in/u:dandv/b:671c747cce9c
01:33 < niggler> hold on
01:33 < TehShrike1> HOLD
01:33 < niggler> * https://npmjs.org/package/csv - most downloads & contributors. Build fails at the moment. Fantastic.
01:33 < TehShrike1> ON
01:33 < niggler> how the fuck does that happen
01:33 < niggler> "most downloads" + "build fails"
01:33 < niggler> something doesn't add up
01:33 < mbalho> a) quit complaining, open issues b) best csv module is rfc-csv
01:34 < niggler> 6 downloads in the last month
01:34 < niggler> why mbalho?
01:34 < mbalho> because of the code
01:34 < dandv> niggler: build did fail when I catalogued the module. It passes now. Updated the bookmark.
01:35 < dandv> mbalho: who was complaining? I've submitted several patches to the CSV module. https://github.com/wdavidw/node-csv-parser/issues/created_by/dandv?state=closed
01:35  * niggler golfclaps
01:35 < ljharb> then why's the build still failing :-p
01:36 < dandv> ljharb: it isn't.
01:36 < mbalho> haha
01:36 < niggler> why did the build ever fail
01:36 < ljharb> lol k
01:36 < TehShrike1> Why do builds ever fail?
01:36 < mbalho> its just annoying how entitled you all sound, thats all
01:36  * TehShrike1 philosophizes
01:36 < Lorentz> why build at all?
01:36 < dandv> niggler: https://travis-ci.org/wdavidw/node-csv-parser should have a log
01:36 < ljharb> mbalho: why won't npm write my code for me!
01:37  * niggler intellectually masturbates
01:37 < Lorentz> think of the children here, keep that stuff to yourself
01:37 < niggler> lol the merges fail
01:37 < dandv> this conversation is degenerating. Thanks all for your help.
01:37 < TehShrike1> Lorentz: wouldn't that be the definition of intellectual masturbation? 8-|
01:38 < mbalho> dandv: in the conversations defense you started it pretty negatively, best way to negotiate is to keep it positive
01:38 < niggler> dandv: let us know your experiences when you are finished
01:40 < apipkin> is there a known channel for express.js? 
01:41 < mscdex> #express?
01:41 < niggler> did you check #express or #expressjs or #express.js
01:41 < apipkin> i did, but it wasn't loading for some reason :-/ thanks!
01:52 < paulkon> anyone know about how accurate this is: http://www.infoq.com/news/2013/04/NoSQL-Benchmark ?
01:52 < paulkon> I've been using mongodb for quite some time and I'm not sure how to react to this data
01:54 < ljharb> it's a benchmark. the way to react is "ah, interesting" and then keep doing whatever you're doing
01:55 < niggler> what's nosql?
01:55 < ljharb> if you feel up to it you can try using another solution to compare, but if it's working for you now, then there it is
01:55 < ljharb> niggler: picture sql, then make it disappear
01:55 < ningu> ljharb: there is now a giant void in my imagination
01:55 < paulkon> but the difference between mongodb and couchbase is so large... it scares me a bi
01:55 < paulkon> t
01:55 < ningu> what is couchdb good at the mongo isn't?
01:56 < ningu> if you can even put it in those terms
01:56 < ljharb> paulkon: then spend a day or two trying it out
01:56 < niggler> so nosql basically includes all database systems except for those with SQL access?
01:56 < ningu> niggler: I would say that nosql is also a mindset of sorts -- nosql database tend not to support joins, constraints, stored procedures, complex data structures in general
01:56 < niggler> but if you can build an SQL-like query wrapper for a nosql db, then is that DB nosql?
01:56 < ningu> databases8
01:57 < niggler> i understand if it were nordbms or something
01:57 < niggler> but sql describes the interaction and not the storage
01:57 < ningu> niggler: you should insist that the powers that be run their terminology by you next time
01:58 < niggler> a lexical niggler, as it were
01:58 < ningu> but yeah, nordbms might be a better name
01:58 < ningu> given SQL though, if it supported SQL but no joins or foreign keys you'd be confused
01:58 < ningu> so it's close enough
01:59 < niggler> are foreign keys mandated in SQL?
02:00 < ningu> well, early mysql doesn't support them, neither does sqlite, but the syntax for defining the constraints is standard
02:01 < ljharb> niggler: obviously you can use a rdbms as if it were a basic document store
02:01 < ljharb> and you can use nosql document stores as if they're rdbms's too
02:01 < ljharb> it's more about what they're optimized to do well
02:01 < ningu> ljharb: the latter is much harder
02:01 < ljharb> mongoose + mongo, works for me :-)
02:01 < ningu> but yes, possible
02:03 < ningu> random complaint: I wish sites that let you filter laptops by hardware specs would let you choose to see only those w/ 6-cell batteries
02:03 < niggler> who is "winning" ?
02:04 < ningu> niggler: you need to be more specific than that, depends on what use case you're talking about and who's implementing it
02:04 < niggler> err, which nosql systems will survive 5-10 years out
02:04 < niggler> i think winning was a poor word choice
02:04 < ningu> oh... yeah, I have no clue, the only two currently that have any longevity are mongodb and couchdb
02:04 < ningu> redis too I guess
02:04 < ningu> but it's pretty rapidly changing
02:05 < ningu> not sure about riak, no experience there
02:23 < apipkin> what's the recommended way to access an api secret key in my app, but not have it in my source code? i was trying to look for environment variables, but that just seems to point to whether i'm in development or production mode
02:24 < niggler> apipkin you can make other environment variables
02:25 < niggler> i think app fog uses an env for the port you should listen on
02:25 < apipkin> niggler: where can they be stored? bashrc?
02:26 < niggler> you could
02:26 < niggler> you could also manually type it in once 
02:26 < mscdex> ningu: sqlite supports foreign keys
02:26 < apipkin> is that the "best practice" ? i'm pretty new to this whole nodejs and don't want to learn the wrong way
02:27 < niggler> I actually don't know what the best practice is :/
02:28 < brainproxy> https://github.com/bestiejs/lodash/blob/v1.2.1/dist/lodash.js#L757
02:29 < brainproxy> any idea why in some places in the lo-dash lib, a semicolon immediately follows a left-curly brace?
02:29 < ChrisPartridge> apipkin: putting it in an environment variable would be fine, you can use process.env to retrieve it
02:29 < ljharb> brainproxy: no, there's no reason it should be necessary
02:31 < brainproxy> ljharb: my thought too, but it *seems* deliberate in a couple of places so I wasn't sure if there's some weird rule I'm not familiar with
02:31 < brainproxy> some kind of edge case
02:31 < ljharb> not that i know of
02:33 < apipkin> ChrisPartridge: would you consider that to be the ideal way to do it? I assume if i package and ship this app out there will have to be a way to send the api secret key with it? 
02:36 < CPartridge> apipkin: that all depends on how and where you are deploying the app
02:36 < niggler> brainproxy that seems like a shitty minifier
02:37 < apipkin> currently on my local machine, but my coworkers may enjoy it (when it's "finished") and want it for themselves *shrug*
02:38 < brainproxy> niggler: except it's the dev build
02:39 <@MI6> joyent/libuv: Ben Noordhuis master * 5879c61 : unix: remove errno preserving code (+1 more commits) - http://git.io/2rIJbg
02:41 <@MI6> joyent/node: Ben Noordhuis master * 7349667 : stream_wrap: MayContainNonAscii() is deprecated (+2 more commits) - http://git.io/BU-Rdw
02:42 < bnoordhuis> ^ --harmony_generators, people
02:42 < jarrodparkes> i know this is un-nodejs related, but i am seeking some simple bash shell help
02:42 < bnoordhuis> also --harmony_typed_arrays btw
02:43 < Havvy> jaredrhine_: ##linux
02:44 < niggler> man bash
02:44 < ChrisPartridge> ugh, netsplits
02:44 < mscdex> sounds like an arrestable offense
02:50 < apipkin> is `next` part of nodejs or part of express/ im getting 'next is not defined'
02:50 < Havvy> express.
02:50 < apipkin> Havvy: thanks!
02:50 < Havvy> It should be the third argument.
02:50 < Havvy> function (req, res, next) {}
02:51 < apipkin> Havvy: i'm trying to do app.al('*') for ACL to ensure the api token is still valid
02:52 < Havvy> I know nothing about that.
02:52 < apipkin> no worries :) I think you helped!
02:53 < apipkin> Havvy: yep! adding it as a third param did the trick
03:30 < ningu> Gingrich, who apparently has never heard the word "smartphone," feels that we to adopt a new term describe cell phones so "we could explain to people that they carry in their hand literally the potential to have a dramatic revolution in how we get things done, in how we take care of our own health, in how we interact with our government, and in how we are productive"
03:32 < Lorentz> but no, the best we use the phone for is to play drawsomething
03:33 < Lorentz> which sometimes glitches
03:33 < ningu> I've never played either drawsomething or angry birds
03:33 < niggler> blame the investors of OMGPOP for that Lorentz 
03:33 < niggler> which incidentally include some of the biggest names in SV
03:33 < Havvy> ningu: We call them phones.
03:34 < ningu> Havvy: Newt Gingrich actually released a long video explaining that they shouldn't be called cell phones and we need a new name for them
03:34 < Havvy> Nah, we just need a new name for 'phone calls'.
03:34 < niggler> does newt gingrich hold any political office?
03:34 < niggler> i thought he's a fox news contributor now
03:35 < Havvy> Personal ???? Device
03:35 < Havvy> I can't remember whta the middle word was.
03:35 < niggler> vibrating?
03:35 < niggler> tracking?
03:35 < Havvy> No.
03:35 < ningu> http://www.youtube.com/watch?v=jmKVRVX4q-k
03:36 < niggler> dafuq
03:36 < niggler> "gingrich productions"?
03:36 < ningu> hehe
03:36 < Havvy> It was a term used in the early 2000s for smartphones without the 'phone'.
03:36 < niggler> lol 143+/813-
03:36 < Havvy> Oh way, PDA was the acronym.
03:36 < Havvy> *wait
03:36 < niggler> personal digital assistant
03:36 < niggler> lol Havvy 
03:37 < Havvy> Yes, that.
03:37 < Havvy> Let's call them that.
03:37 < niggler> I've seen people call smartphones personal tracking devices
03:37 < Lorentz> hey, it's smarter than the old PDAs
03:37 < Lorentz> so let's called it smart personal digital assistants
03:37 < Lorentz> SPDAs
03:37 < niggler> nah Lorentz that connotes some level of productivity
03:38 < niggler> and I'm convinced most smartphone owners aren't really being productive with them
03:38 < Lorentz> note to self: get IOIO for phone
03:38 < Lorentz> or something similar
03:39 < ningu> I guess that video is part of the republican party's attempt to keep up with technology in politics
03:48 < mscdex> Lorentz: let's fashion node.js onto an iPaq 3635!
03:50 < Lorentz> why 3635, I thought 4700 was the standard
03:51 < mscdex> just keeping it old-school
03:51 < Lorentz> I still have this really crappy toshiba e740 lying around somewhere
03:51 < Lorentz> it has issues with persistent storage
03:51 < mscdex> oh wow i remember when that came out too
03:51 < mscdex> it was fancy with the built-in wifi
03:52 < mscdex> :-D
03:52 < Lorentz> yes, and it also had vga out extension thing
03:52 < mscdex> yeah
03:52 < Lorentz> which was hella cool
03:53 < Lorentz> none of these fancy schmancy mini-type outputs, just straight-up vga out as good as it should be
03:53 < Lorentz> too bad it's a brick
03:53 < mscdex> i still have an iPaq 4350 somewhere :-\
03:54 < Lorentz> but yes, should totally put nodejs on it
03:54 < Lorentz> just because
03:55 < mscdex> i doubt angstrom/OE supports those old PocketPCs anymore heh
03:55 < mscdex> oh wait, i could try compiling node for my zaurus
03:57 < donCams> so. i don't know if this is the right chan to ask this but can anyone give me some tips on how i can implement user sessions and access control on a single-page app using angularjs on client and express js on frontend
03:58 < ningu> donCams: you want the sessions accessible on the server only or what?
03:58 < donCams> on the server only
03:58 < ningu> donCams: and how do you want the sessions stored?
03:58 < donCams> i guess i'll be using mongodb
04:00 < ningu> donCams: there are various guides to using sessions in express, I'm trying to find a reasonable one
04:00 < donCams> me too :3
04:00 < ningu> http://www.senchalabs.org/connect/session.html
04:00 < ningu> from express you would do, app.use(express.session({ ... }));
04:01 < ningu> there are redis and mongodb session store modules
04:01 < ningu> and probably others
04:02 < donCams> yeah :)
04:02 < donCams> finding out how to do user authentication with passportjs
04:02 < ningu> yeah, for auth I don't know necessarily what's best
04:02 < donCams> storing sessions and basically restricting access to pages where users are not allowed
04:02 < ningu> I wrote my own thing for it which wasn't very many lines of code
04:02 < donCams> these pages are basically partials though
04:03 < ningu> oh, for restricting access I would recommend using several request handlers
04:03 < ningu> I made an auth.js module which exports things like auth.min(foo) where foo is a level of access
04:03 < ningu> so I would do, app.get('/blah', auth.min(1), realHandler);
04:04 < ningu> auth.min(1) returns a function that ensures the user is at least level 1
04:04 < ningu> you can do that part however you think is best, and there might already be modules to do it for you
04:05 < donCams> i'm lost... "several request handlers"?
04:05 < ningu> donCams: app.get('/blah', a, b, c, d);
04:05 < ningu> where a, b, c, d are functions to handle the request -- you can have as many as you want
04:06 < ningu> if you write one to only handle the auth part, you can factor that out and insert it into whatever routes you want, and then pass on control to the specific handler for that request
04:06 < donCams> [noob] how are those handlers handled? if a doesn't pass, then b wouldn't run?
04:06 < ningu> donCams: if you call next() it will go to the next one, otherwise not
04:06 < ningu> but if you don't call next() that means you have to return a response of some sort
04:06 < donCams> oh...
04:07 < donCams> i'm f*cked
04:07 < ningu> eh?
04:07 < ningu> I don't see how that follows :P
04:08 < donCams> it seems i have a lot to learn...
04:08 < ningu> it is not very complicated
04:08 < ningu> express/connect only has one idiom for handling a request: a series of functions that take the arguments (req, res, next)
04:09 < ningu> one of the functions is the last one and doesn't call next()
04:11 < ChrisPartridge> there's also the err,req,res,next signature
04:11 < ningu> ChrisPartridge: yes, but I'm trying not to confuse him ;)
04:12 < donCams> ok. i'll see how this interprets on angularjs as well as i'm doing a single-page application
04:13 < ningu> donCams: shouldn't have much to do with angularjs to be honest
04:13 < ningu> this is all server side stuff I'm talking about
04:13 < donCams> i guess there is
04:15 < ningu> just read up on express
04:16 < donCams> :)
04:16 < timoxley> say I have a module that uses 0.10 streams, but I have to use 0.8 for now…
04:16 < timoxley> it's 3rd party
04:16 < timoxley> should I just fork and require isaacs/readable-stream instead or do some require magic / use one of those require modification libs like mfncooper/mockery
04:17 < ningu> why not just test for the version of node?
04:19 < timoxley> ningu I'd do that but the require('stream') is inside a 3rd party module. 
04:19 < ningu> oh.
04:20 < ningu> not sure if the 0.8 compat modules monkey patch the stream objects or not.
04:20 < ningu> if they do you should be fine.
04:20 < timoxley> readable-stream does not and probably shouldn't.
04:21 < mscdex> you can do readable.attach(oldstream);
04:24 < timoxley> mscdex no… like 
04:24 < timoxley> if that module does
04:25 < timoxley> new stream.Transform()
04:25 < timoxley> and 0.8 doesn't have that api
04:25 < timoxley> wrapping the old stream won't help
04:25 < timoxley> mscdex I think.
04:25 < sinclair|node> ningu: http://www.infoq.com/presentations/Value-Values
04:25 < ningu> timoxley: is the stream created by the module or do you pass it to it?
04:25 < mscdex> timoxley: i'm talking about readable, not transform
04:26 < sinclair|node> ningu: another anti OOP zealot who never learnt to code probably 
04:26 < timoxley> mscdex gotcha, yeah it's a Transform stream
04:26 < ningu> sinclair|node: wait, who is anti-OOP?
04:26 < sinclair|node> ningu: the guy in that video
04:27 < ningu> well, he's the author of clojure... I figure he knows something even if people don't agree
04:27 < sinclair|node> ningu: the amount of stupid stuff he says seems endless, 
04:27 < ningu> too bad I can't download the slides without logging in which I don't really feel like doing
04:27 < timoxley> mscdex ningu I'm trying to get this fella running on 0.8 https://github.com/deoxxa/httppp/blob/master/lib/parser.js#L5
04:27 < ningu> well, I don't know anything about him or clojure
04:27 < ningu> will give it a listen, anyway
04:28 < ningu> he has a lot of hair
04:28 < sinclair|node> ningu: im only half way through, and he thinks OOP developers are statically screwed because everytime they want to do something, they have to create a new class, but that is not true at all
04:28 < sinclair|node> i gave an example of a Task the other day to avoid the need to have "class DoThisSpecificTHing"
04:29 < sinclair|node> which has all the benefits of some value approach
04:29 < ningu> sinclair|node: it depends a lot on the language... I like JS's prototype model although it obviously has issues too which coffeescript/etc. have tried to solve
04:29 <@Nexxy> oh, this thread again?
04:29 < sinclair|node> Nexxy: what thread?
04:29 < ningu> the thread of fate from which all of our lives hang
04:29 <@Nexxy> sinclair|node, Fred is of type Unicorn
04:30 < sinclair|node> ningu: anyway, the anti OOP sentiment is completely misguided and quoted from people are need a damn haircut
04:30 <@Nexxy> sinclair|node, hey
04:30 <@Nexxy> come on
04:30 <@Nexxy> JIFASNIF
04:31 < sinclair|node> Nexxy: i was joking
04:31 <@Nexxy> oh good :P
04:31 < sinclair|node> Nexxy: but he could use a haircut tho
04:31 <@Nexxy> :(
04:31 < sinclair|node> Nexxy: http://www.infoq.com/presentations/Value-Values
04:31 < ningu> sinclair|node: ok but I still don't understand who here you think is anti-OOP
04:31 < sinclair|node> ^ see for yourself
04:31 <@Nexxy> ningu, I am
04:31 < ningu> this guy may well be
04:31 < ningu> oh, ok
04:31 <@Nexxy> I am very much anti OOP
04:31 <@Nexxy> and nothing anyone can say on the internet will convince me otherwise
04:31 < ningu> I am neither pro nor con really
04:31 <@Nexxy> which is why these conversations are pointless
04:31 < ningu> I guess I'd say more pro than con
04:31 <@Nexxy> ningu, like eating a sandwich
04:32 <@Nexxy> it's neither pro, nor anti-oop
04:32 < ningu> in general I want to pick the right tool for the job
04:32 < ningu> if you think OOP is never that right tool then you are anti-OOP :)
04:33 < oblio> boutell: thank you
04:36 < mscdex> timoxley: send him a PR that uses readable-stream
04:36 <@Nexxy> it also needs process.nextTick instead of setImmediate
04:36 <@Nexxy> or something
04:37 < timoxley> mscdex sure, just wondering what the "best practice" is for using 3rd party, new streams on 0.8
04:38 < substack> I don't mind single-level OOP that is not exposed in any way
04:38 < mscdex> timoxley: that's really the only way
04:38 < substack> it can save an indent level
04:38 < substack> but OOP is not a good way to extend functionality compared to other ways involving callbacks and higher-order functions
04:39 < substack> although very occasionally it is appropriate
04:39 < substack> when you happen to have a problem that is inherently taxonomic in nature
04:39 < ningu> substack: what about, for example, designing a UI kit for an OS?
04:39 < substack> AN ENDOTHERMIC QUADROPED, CARNIVEROUS IN NATURE
04:39 < leichtgewicht> Oh! substack is online: Do you have any best practises using browserify? (dom interaction, module rules, etc.)?
04:39 < substack> NOMENCLATURE etc
04:39 < Havvy> leichtgewicht: ##browserify
04:40 < leichtgewicht> Havvy: Oh, thx!
04:40 < substack> leichtgewicht: do simple things, publish modules to npm
04:40 < timoxley> mscdex was thinking could rejig require to serve up readable stream to that particular module
04:40 < substack> http://www.youtube.com/watch?v=yiRjywbypLA
04:40 < leichtgewicht> substack: continue at #browerify
04:40 < substack> use OOP if you are writing an ode to spot
04:41 < timoxley> mscdex ala mfncooper/mockery https://github.com/mfncooper/mockery
04:41 < mscdex> timoxley: maybe, but then you may run the risk of side effects for modules that are not streams2-aware
04:41 < timoxley> mscdex "require to serve up readable stream *to that particular module*"
04:42 < timoxley> i.e. not a global replacement for require('stream')
04:42 < timoxley> anyway
04:42 < timoxley> PR/fork seems easy enough
04:43 < timoxley> being stuck on 0.8 is only a temporary situation hopefully, so a fork will suffice
04:47 < Havvy> Ah, that moment when you write something like this:
04:47 < Havvy> Socket.prototype.toString = require('./make-toString')('Socket');
04:48 <@MI6> joyent/node: Ben Noordhuis master * 69572a3 : test: fix up weakref.cc deprecation warnings (+1 more commits) - http://git.io/mX5AGw
04:52 < ningu> this clojure guy sounds like he's from new york
04:53 < ningu> I don't really get his point about immutable strings -- he made it sound like it was obvious that they were preferable to mutable strings without explaining why
05:14 < leostera> yet it's supported by the server, I get the allowed origins, methods and headers
06:51 < passcod> is isaacs/readable-stream a good solution to provide "free" 0.8 compat for streams?
06:56 < ningu> passcod: it's pretty much the only one, afaik
07:26 < greelgorke> moring
07:26 < [AD]Turbo> hi there
07:27 < greelgorke> anyone here who has experience with streams2 and object mode? 
07:30 < greelgorke> whoever knows about that, is there any way to work around it without writing vompletly own stream class?
07:31 < ningu> greelgorke: huh? object mode is not obligatory
07:31 < greelgorke> ?
07:32 < ningu> it's in the docs
07:32 < ningu> streams either behave as a stream of objects, or as a buffer
07:32 < greelgorke> ah. i try to make a stream, that just emits objects and pipe it to another stream, that just consumes objects
07:32 < ningu> ok
07:32 < greelgorke> but something is going totaly wrong there
07:33 < ningu> well, I haven't used it much
07:33 < ningu> I thought you wanted to turn off object mode
07:34 < greelgorke> no :) i'm experimenting with stream chains as architecture tool
07:35 < greelgorke> but it fails, because objectMode is not objectMode but i-will-not-concat-your-pushes-mode"
07:36 < greelgorke> if you put a real object to the queue it doesn't work as expected
07:36 < ningu> what is "a real object"?
07:36 < greelgorke> in streams context: a non-string-or-buffer-object
07:37 < greelgorke> :D
07:38 < greelgorke> i could just pass around json strings, but it seams ridiculous to me to parse any avery single stream, just to get the content as object
07:38 < passcod> ningu: I figured. I was wondering if anyone has any recent experience with it. The repo has a number of issues and PRs, and I'm not experienced with either version of streams to judge wether they are serious problems or not
07:40 < bluecoffee> hello, I am a software person and I am trying to convince my project mates to use nodejs for our reporting engine.
07:40 < bluecoffee> have anyone seen a good reporting engine on good js?
07:42 < greelgorke> bluecoffee: https://npmjs.org/search?q=reporting here are some.
07:42 < greelgorke> "good" depends on your requirements
07:44 < bluecoffee> greepgorke: i saw this http://www.brandttechnologies.com/papers/121106f_2012141_Using_Node_In_Reporting_System.pdf
07:44 < rads> with readable-streams in 0.10, this library is now using a deprecated API: https://github.com/dominictarr/event-stream
07:44 < bluecoffee> and am fascinated by it, however I am just a student intern. I hope that the company will pick nodejs because I have heard much about it and I wpuld like a chance to learn on the job.
07:44 < rads> is it possible to implement event streams with the new API?
07:45 < rads> it looks like stream.Writable is specific to Buffers and Strings, not any abritrary object
07:45 < rads> though there is an "objectMode" option for stream.Readable
07:47 < greelgorke> rads: i have similar issues atm. objectMode is really a "i won't concat strings or buffers you this.push'ed" -mode
07:53 < ningu> greelgorke: yeah, you should probably talk to one of the streams gurus, definitely not me :)
07:55 < greelgorke> well i know the position of core stream gurus from the issues. they just say "just use strings or buffers". that's ok from the core stream, which are mostly parsers or binary streams
07:55 < substack> just use through
07:55 < substack> handles all this boring shit for you
07:56 < ningu> oh, I thought through was only needed for 0.8
07:56 < ningu> shows how much I know
07:57 < greelgorke> substack: i'll look at it, thx 
07:58 < substack> unless you need really tight control over performance you shouldn't need to use core streams ever
07:58 < greelgorke> thats a tough statement :)
07:59 < greelgorke> substack: you mean https://npmjs.org/package/through right?
08:00 < ningu> substack: so what would the main alternatives be?
08:02 < substack> just use through, duplexer, concat-stream, and modules like that
08:02 < substack> core is getting really bloated
08:03 < substack> 0.8 was fine I don't see why we even need 0.10
08:03 < substack> it just broke all my modules and I'm mad about that
08:03 < greelgorke> i think we need a site summing up all this nice stream modules. a very apreaciate the way dominictarr think about streams
08:03 < ningu> substack: so you don't agree with the streams2 changes, or is it more than that?
08:03 < substack> it's just more complexity and not a sufficient upside
08:04 < ningu> afaik nothing else to speak of broke
08:04 < sinclair|node> substack: hi, love dnode btw
08:05 < ningu> oh, I've been waiting for a substack and sinclair|node introduction
08:05 < ningu> ever since sinclair|node said the other day that require('foo') should never return a function :P
08:05 < substack> I wish node development completely stopped.
08:05 < substack> it's fucking done already
08:05 < sinclair|node> substack: its just started
08:06 < substack> pass
08:06 < substack> I'll probably just keep using 0.8 forever
08:06 < sinclair|node> substack: have to rewrite it all now
08:06 < sinclair|node> in typescript
08:06 < substack> everybody can suck it
08:06 < substack> that's what you get for not being backwards compatible
08:07 < substack> I hate it when things shift around out from under me.
08:07 < sinclair|node> substack: what is different that you speak of?
08:07 < sinclair|node> ningu: i've spoken with substack in the past
08:10 < ningu> substack: these aren't the first compatibility-breaking changes in core, though, so what makes them different?
08:11 < substack> I don't even care what makes them different.
08:11 < greelgorke> ningu: probably because he has like gazillions modules out there and gazillion-1 of them are stream based ?
08:11 < substack> they just wasted so much of my time and the upside was negligible
08:11 < substack> I don't want to have to update all my modules every time a new node minor release comes out
08:12 < substack> I'll just stop writing modules
08:12 < ningu> substack: so what I'm hearing is they are different in how they affected you, as opposed to in the nature of the changes
08:12 < ningu> which makes sense, was just trying to figure out what you meant
08:13 < substack> I was super pissed about the path.exists nonsense in 0.8 too
08:13 < ningu> somehow I doubt that, having broken compatibility on streams once, they are intending to do so again
08:13 < ningu> oh, yeah, that was annoying
08:13 < substack> I wasted so much time "fixing" code that wasn't broken
08:13 < ningu> they could have made the old one work and printed a deprecation warning, or not
08:13 < leichtgewicht> substack: Node.js is not even 1.0 yet. You are an early adopter in a sense.
08:18 < sinclair|node> ningu: btw, there is no final decisions made on module.exports style functions returning from modules
08:18 < sinclair|node> ningu: its not even supported in TypeScript
08:18 < sinclair|node> (because of that reason)
08:18 < ningu> final decisions made by who?
08:18 < sinclair|node> the ECMA committee 
08:19 < ningu> hmm, didn't realize that was in the ECMA spec
08:19 < sinclair|node> ningu: ill see if i can hunt down a link (im going off here-say mind you)
08:19 < sinclair|node> ningu: anders mentioned it, and i read it on stackoverflow
08:20 < substack> ecma can go fuck itself
08:20 < greelgorke> node will probably never adopt the ecma modules
08:20 < leichtgewicht> substack: Doesn't mean that there is no reason to be pissed.
08:20 < timoxley> substack perhaps node should have a selection of popular community modules in their automated test suite to get some metrics on the impact of changes in core (if they don't already)
08:20 < sinclair|node> ningu: http://stackoverflow.com/questions/12696236/module-exports-in-typescript/12697661#12697661
08:20 < substack> here's my perspective
08:21 < substack> I'm just trying to build stuff.
08:21 < substack> and all these organizations are making my life more difficult than it needs to be
08:21 < timoxley> i've heard of companies like MS/Apple/Google sending fixes to vendors when they make drastic changes
08:21 < substack> they should just go away and leave me alone
08:21 < substack> I'm doing just fine without their "help"
08:22 < Oddman> what leichtgewicht is right
08:22 < Oddman> you're an early-adopter - deal with it.
08:22 < substack> Oddman: fuck you
08:22 < ningu> substack: well, you're relying on other people's products, so if you feel that way you're sure to have no input into the process of their development
08:22 < leichtgewicht> substack: so you say you don't like things other people work at? modules?
08:22 < Oddman> don't like it? Move to a mature ecosystem.
08:22 < Oddman> substack, that's hardly warranted
08:22 < sinclair|node_> ningu: further reading https://typescript.codeplex.com/workitem/47
08:22 < sinclair|node_> ningu: sorry its all in the context of TS
08:22 < substack> I don't like that their changes affect me.
08:22 < ningu> sinclair|node_: it's ok, should make enough safe
08:23 < substack> with modules it's different
08:23 < Oddman> shit happens
08:23 < substack> I can just keep using old versions
08:23 < sinclair|node_> (in case you didn't get that)
08:23 < Oddman> yup
08:23 < Oddman> tbh you shouldn't be updating unless you have a decent policy in place, anyways
08:23 < substack> when platforms change I need to upgrade because everybody switches to the new version for some reason
08:23 < leichtgewicht> Same goes for node: you can just keep using old versions. (as you suggested)
08:23 < Oddman> we tend to avoid updates willy-nilly during dev
08:23 < leichtgewicht> but its no fun.
08:23 < sinclair|node_> substack: in the end, its for the best
08:23 < substack> leichtgewicht: that's what I do
08:23 < substack> still running 0.6 for one process in production
08:23 < substack> because it just works
08:23 < substack> everything else is on 0.8
08:24 < leichtgewicht> That is debian philosophy ...
08:24 < zaleb> that doesnt always work
08:24 < substack> it is the correct philosophy
08:24 < sinclair|node_> at least, i would find it hard to believe these changes are a detriment to the platform. 
08:24 < zaleb> we still have an FMS 2 running, and it works
08:24 < zaleb> but nobody knows how
08:24 < Oddman> substack, it's correct until massive security flaws are found
08:24 < ningu> substack: there is no sense really though in complaining about how the world is, it's much more productive to deal with it one way or another -- either avoid things that you don't like or work to change them
08:25 < sinclair|node_> substack: you should just update your code, and stay current if you are writing stuff on the fringe of the platform
08:25 < substack> so far I haven't actually encountered any modules that only work on 0.10
08:25 < sinclair|node_> substack: or, abstract it away
08:25 < substack> only shit that doesn't work on 0.8
08:25 < substack> *doesn't work on 0.10
08:25 < Jacoooooooooooob> Hey
08:25 < SomeoneWeird> that's true
08:25 < substack> ningu: node was sold in the style of awk
08:25 < substack> basically unchanging past a certain point
08:25 < ningu> from my perspective if you accept node, you're accepting v8 and therefore to some extent the ECMA standard
08:26 < substack> I think that time should have happened already
08:26 < sinclair|node_> substack: in fact, everything i have written on node to date abstracts away the core stuff, so if they change it, i don't need to update all the dependent code on top
08:26 < substack> but it keeps changing in stupid ways
08:26 < ningu> oh, well I don't know what you mean really by "was sold", I probably wasn't using node at the time you're talking about
08:26 < ningu> sold by who, ryan?
08:26 < substack> this is the pervading ethos
08:26 < substack> node will be done
08:28 < sinclair|node_> substack: you should have been layering the core stuff on a pre release platform
08:28 < ningu> well, given that node is a somewhat different platform than has existed before it doesn't surprise me that people are only slowly discovering some new needs -- domains for example
08:28 -!- mode/#Node.js [+o Nexxy] by ChanServ
08:28 < substack> sinclair|node_: that's not feasible
08:28 < sinclair|node_> substack: why not?
08:28 < substack> I can't predict which apis will change out from under me.
08:28 < substack> the nextTick shit came out of nowhere
08:28 < sinclair|node_> substack: that's the idea tho
08:28 < substack> and timing bugs broke so much of my code
08:28 < ningu> the streams2 stuff was discussed at long length though
08:29 < ningu> substack: do you know btw if setImmediate is actually different in behavior from process.nextTick in 0.10?
08:57 < Guest> Hello!
09:04 < leichtgewicht> Hello sauron ...
09:04 < sauron> Hi
09:04 < yawnt> you must take the ring to mordor leichtgewicht 
09:04 < yawnt> it is the only way
09:04 < sauron> ya
09:04 < sauron> haaaahaha
09:05 < sauron> is konobi a jedi
09:05 < leichtgewicht> Hmmm... but then sauron will vanish ..
09:05 < yawnt> konowi wan kenobi
09:05 < yawnt> leichtgewicht: no, i serve the dark lord
09:05 < yawnt> i said take the ring to mordor
09:05 < yawnt> not to mount doom
09:05 < yawnt> :>
09:06 < leichtgewicht> Oh, man, i should read up on geek.
09:06 < sauron> :o lol
09:06 < leichtgewicht> Land of Mordor right ... Mount Doom is in the land of mordor ...
09:07 < leichtgewicht> ah: who cares: what is it sauron.
09:07 < sauron> yes my fb is http://facebook.com/sauron ( I AM REAL)
09:20 < swapnilsarwe> we are using node v0.6.17 and are planning to do an upgrade to the best suitable stable version....
09:21 < swapnilsarwe> is 0.10.5 the stable version.... i mean it is released as stable... but just wanted to know if any issue with it
09:21 < ningu> yes, it is stable
09:23 < swapnilsarwe> @ningu thanx
09:23 < leichtgewicht> swapnilsarwe: Its stable but it has compatibility issues.
09:24 < leichtgewicht> Ask substack.
09:26 < substack> swapnilsarwe: there are still lots of issues with npm modules not working in 0.10 yet
09:27 < substack> make sure that the modules you use work with 0.10 before upgrading
09:37 < wiherek> hi
09:38 < Technodrome> why in express, does it split up the routes from the function 
09:38 < Technodrome> in the scaffold template they provide that is 
09:38 < wiherek> do you guys have any good practices for SEO and google / facebook indexing and stuff like sharing photos through pinterest etc?
09:39 < wiherek> basically the content on our app is server first by the webserver (statis html)
09:39 < wiherek> then by the app (mostly JSON)
09:39 < wiherek> so the robots dont see the dynamic content
09:40 < wiherek> i read about serving static html snapshots, but dont know if thats the only reasonable way
09:44 < radiodar1o> wiherek: detect the google bot and format your website accordingly
09:44 < radiodar1o> facebook requires some meta tags
09:45 < dypsilon__> radiodar1o, what you suggest will possibly get you blocked by google
09:45 < radiodar1o> well that's the whole thing about seo
09:46 < radiodar1o> if you optimize too much you get blocked
09:46 < radiodar1o> dypsilon__: what do you suggest?
09:46 < dypsilon__> radiodar1o, detecting bots is the line you don't cross
09:46 < swapnilsarwe> substack: sorry for delayed reply... but is there any version of node... which can be upgraded to, without any worries
09:46 < dypsilon__> i suggest statuc snapshots
09:48 < greelgorke> swapnilsarwe: node is not 1.0, so there is no jump from 0.6 to 0.6< without any worries :)
09:48 < radiodar1o> https://support.google.com/webmasters/bin/answer.py?hl=en&answer=66355
10:12 < simong> Does anyone know how to configure the nodemailer module to use postfix?
10:19 < MI62> joyent/libuv: Ben Noordhuis master * 7d9c557 : Merge remote-tracking branch 'origin/v0.10' (+4 more commits) - http://git.io/qEXyoQ
10:20 < MI62> joyent/libuv: Ben Noordhuis v0.10 * 3eb6eb3 : build: set soname in shared library - http://git.io/A7r5sg
10:29 < syskk> does the bodyParser save file uploads to disk by default?
10:30 < simong> syskk: yes
10:30 < syskk> mmmm
10:30 < syskk> is it possible to disable?
10:31 < simong> I think so
10:31 < simong> I wouldn't recommend it, as the rabbit hole lays that way
10:31 < syskk> I'd like some of my uploads to be streamed directly to S3 and avoid saving to disk
10:31 < simong> That's what I attempted to do, but I bailed out of it
10:31 < syskk> haha ok
10:32 < syskk> the tough part will be to disable bodyParser for the routes which should upload to S3
10:33 < simong> I think that I managed that
10:33 < syskk> in a clean way
10:33 < simong> not sure though, it was all a bit of a mess
10:33 < syskk> right, maybe not worth the headache
10:33 < icarot> Is anyone else getting segfaults running node? Compiled for ARMv7, Ubuntu 13.10, GCC 4.8.
10:33 < simong> Yea, I also saw that uploading into S3 wasn't always very fast
10:33 < simong> At some point, I was uploading faster then I could output to S3
10:34 < simong> and if you're like us and running node in 512MB VMs you can run out of memory quickly
10:34 < syskk> right
10:37 < MI62> joyent/node: Nick Sullivan master * 8db693a : util: make util.log handle non strings like console.log - http://git.io/hwM6Ww
10:37 < syskk> im also wondering how i can deal with security with s3
10:40 < Technodrome> in express what is the exports.* for ? 
10:43 < radiodar1o> Technodrome: http://stackoverflow.com/questions/5311334/what-is-the-purpose-of-nodejs-module-exports-and-how-do-you-use-it
10:45 < souri> Hi, I need help on using PhantomJS, more specifically on how to listen to DOMContentLoaded event and then retrieve data normally
10:45 < souri> Anyone?
10:46 < Midasx> I have nearly gotten this working: http://stackoverflow.com/questions/7990890/how-to-implement-login-auth-in-node-js However I don't understand what is happening on this line  req.session.user_id = johns_user_id_here;, what is johns_user_id_here, supposed to be?
10:49 < jphelps> broad question but does anyone have a good tutorial for Node/JS? for a beginner to start on (read the major ones I could find on google which were quite short)
10:50 < libuv_newbie> is there any example showing how to write linux daemons (can be configured using chkconfig) using libuv?
10:50 < libuv_newbie> Thanks
10:51 < radiodar1o> souri: try zombie.js might be easier
11:08 < AAA_awright> Like a number of applications, I accept and parse request entity body data
11:09 < AAA_awright> It's not usually the case (urlencoded and multipart encodings alike can be stream-processed), but let's assume I need to process all this data at once
11:09 < AAA_awright> What file upload limits should I be considering?
12:09 -!- mode/#Node.js [+o MI6] by ChanServ
12:16 < aandy> hi guys, i have a bit of a scope problem, and i can't figure out how i'm suppose to invoke this: http://pastie.org/private/qpuslzfndvbqyij8lrxnpg#23
12:17 < aandy> it's a simple long living request (response), and what i'd like to happen is to run announce('') at an interval, with a "refreshed" event_listeners array
12:19 < aandy> the odd behavior i get is, say i open two requests (where event_listeners.push(res)). that works fine, but if i close one connection, the next heartbeat will say *two* dead responses were removed
12:19 < aandy> i'm not entirely sure why that's happening. any ideas for debugging?
12:20 < aandy> opening up a new connection after works as expected (gets heartbeats)
12:23 < aandy> argh damn it. brainfart. sorry guys, nevermind :)
12:30 < nettoweb> hello guys, every time I run "yeoman init", I get this message: Loading "bower.js" tasks and helpers...ERROR    >> TypeError: Arguments to path.join must be strings
12:30 < nettoweb> I installed yeoman today
12:31 < nettoweb> when I was installing Yeoman I noticed some messages like this: npm WARN engine hawk@0.10.2: wanted: {"node":"0.8.x"} (current: {"node":"v0.10.5","npm":"1.2.18"})
12:32 < nettoweb> how I fix this issue?
12:50 < aandy> nettoweb: short answer? apart from making sure you install the latest version of hawk, you don't
12:51 < nettoweb> aandy: I tried to upgrade bower… after this I'll try to update hawk
12:52 < aandy> hawk is what's complaining, so yeah. but it's still part of the chain. as in, yeoman wanted that version of hawk. so, at own risk of course :)
12:54 < nettoweb> aandy: is there a way to update all of this incapatible packages? because I got about 5 errors like that
12:56 < aandy> you'll have to edit the dependencies
12:57 < aandy> and make sure that they still work with that w
12:57 < aandy> with that verison (0x10.5 vs 0.8.x)
12:58 < aandy> you could be lucky that it's a lazy dev who've written a poor version chain, or you could be unlucky and that dependency needed *that* version and won't work with others
12:58 < aandy> but short of reviewing all those warning dependencies, there's no quick fix
13:02 < nettoweb> aandy: thanks
13:48 -!- mode/#Node.js [+o MI6] by ChanServ
13:56 < merpnderp> I've been playing around with felixge's node-mysql and my benchmarks look great, my tiny test suite I wrote against it works wonderfully. But I'm moving from Mongoose to my own Model modules which just make mysql calls. Anyone have any example code of how that should be organized?
14:06 < greelgorke_work> merpnderp: choose your favourite pattern: Active Record or Data Access Object
14:16 < pachet> i have a use case where i need to transfer clients from one tcp server to another on a separate machine without a perceived drop
14:16 < pachet> i'm using socket.io and i'm thinking i'll probably just have the client create a duplicate socket conn to the new machine and keep both up until they're ready to drop the original
14:17 < pachet> any caveats re multiple sockets that i should be aware of? :[
14:18 < Sembiance> hmm
14:19 < Sembiance> pachet: I thought I remember reading something about certain browser versions not supporting more than 1 websocket per tab, but I could be mis-remembering, or it might have been a bug in just the library being used
14:20 < Sembiance> pachet: I myself use sockjs, but if you end up using socket.io, make sure to read: https://github.com/LearnBoost/socket.io-client/issues/318
14:23 < pachet> Sembiance: ah, good to now
14:23 < pachet> as of now each box is only running a single socket server
14:24 < pachet> as far as i know the only limitation for duplicate sockets on the client is that you can't have more than one pointing to the same host/port, but i just wanted to see if anyone else had any horror stories
14:25 < pachet> Sembiance: thanks!
14:26 < zenetik> hi all, does somebody got internet ressources regarding mongodb aggregation framework, pure nodejs and/or mongoskin ?
14:26 < zenetik> i'm looking for a simple example, something like collection.books({_id:..., title:'foo', userId:.....}), collection.user({_id:...., name:'bob'}); --> fetch  books with userName
14:26 < pachet> .
14:26 < merpnderp> greelgorke_work: I'll look those up. Thanks for the pattern names.
14:27 < merpnderp> greelgorke_work: which one seems to be most popular with FOSS projects?
14:28 < greelgorke_work> merpnderp: no prob. this two are most popular. Active REcors is *the* pattern in Rails and like that. DAO is used in more enterprizy lands, like JavaEE (Hibernate i.e.) or C#
14:31 < dypsilon__> merpnderp, http://martinfowler.com/eaaCatalog/
14:31 < dypsilon__> 5 top categories talk about object relational mapping
14:31 < merpnderp> greelgorke: it looks like you could use the two patterns together. An ActiveRecord's data persistence calls could call a DAO object. But i have no idea what that would gain you. I guess if your AR is going to be used in multiple projects with multiple backeneds, you wouldn't have to maintain two different AR implementations. 
14:32 < merpnderp> Thanks dypsilon__ :) reading now
14:33 < greelgorke> well, if you tending to use AR then consider, that probably you even don't need an OR mapper
14:33 < dypsilon__> merpnderp, it's a lot of stuff and having worked with those patterns for some years I'm pretty happy with working directly with mongodb now without any orm
14:34 < greelgorke> AR mappes objects to tables pretty much 1:1, libs like pg do exactly that
14:34 < greelgorke> only joins need some more abstraction
14:34 < dypsilon__> greelgorke, AR has it's own problems
14:34 < greelgorke> dypsilon__: there is no silverbullet, we all know that
14:35 < greelgorke> i think DAO's allow better abstraction, since they separate persistence and domain logic better
14:35 < dypsilon__> greelgorke, you know that, because you are good. don't assume everyone knows that :) ror community is an interesting place
14:36 < greelgorke> but it's just a matter of use and taste at the end
14:36 < dypsilon__> i think it's a matter of complexity
14:36 < greelgorke> dypsilon__: ror community just follows opiniated bduf. there is nothing bad with that, es long bduf dont advice to kill ppl
14:37 < dypsilon__> if everything you do is pushing data into the db, fetching it and giving directly to the view, you don't even need ar
14:38 < greelgorke> dypsilon__: right
14:38 < dypsilon__> and is suppose, those are 90% of node.js applications
14:38 < dypsilon__> *is = i
14:40 < greelgorke> since lately i tend to separate node.js apps from express/compound/tower/geddy apps
14:40 < greelgorke> asuming that, rephrase your thesis :)
14:41 < greelgorke> i guess most of pure nodejs apps just fetch some data from other web-apis
14:41 <@isaacbw> how on earth are express/compound/tower/geddy apps not node.js apps
14:41 < dypsilon__> +1
14:42 < greelgorke> isaacbw: this frameworks introduce some additional principals and compatibility patterns.
14:43 < pachet> lots of ror opinions :[
14:45 < greelgorke> but sure, they are node-apps too. but assuming the kinds of apps nodejs really good at, all the mvc-frameworks stand in your way often. express my be not that, but hey, may be it just me ;)
14:46 < merpnderp> So DAO would be a Users object that would abstract the handling of a User object. And AR would just have the User object handle all of its own CRUD? And both patterns hang validation on the User object, right?
14:47 < rhalff> greelgorke, express is more like a design pattern I think, not that I exactly know how to name it though.
14:49 < greelgorke> merpnderp: Dao would be a UsersDAO, that abstract handling of _presistence_ of users and can also validate integrity of the domain model. AR mixes it up, often by inheritance.
14:49 < greelgorke> at the end of the day it's really more about taste aout usage and maintaining. DAOs make the persistence layer of your app explicit, AR implicit
14:50 < greelgorke> rhalff: express is a wrapper around connect, which is in fact a plugin system/framework for processing http requests
14:51 < rhalff> greelgorke, ok I meant connect... :-)
14:51 < rhalff> greelgorke, still then you can proof me wrong, I know...
14:53 < greelgorke> a connect plugin is a function that takes req, res and a callback. in so far connect follows node patterns, but connect is an implementation of an async chain of responsibility http://en.wikipedia.org/wiki/Chain-of-responsibility_pattern
14:55 < greelgorke> i mean, connect is a good thing for node, without connect/express, there would be less mvc-webapps
15:01 < rhalff> greelgorke, thanks didn't know that.
15:04 < rhalff> greelgorke, would be nice if there was a tool that showed a graph of the chain or tree of responsibility for an application, anybody has some spare time? :-)
15:05 < greelgorke> what do you wanna see theere?
15:06 < rhalff> greelgorke, just a graph to see what's actually going on and when it occurs, neh too complex.
15:06 < greelgorke> in usual case you have a bunch of .use() calls in one file and access to the routes object in express. 
15:07 < greelgorke> the process es usually straight forward: the request bubbles through the chain, till some middleware calls res.end()
15:08 < rhalff> greelgorke, you would have to cleary document when a certain call matches, then you could show a graph tree.
15:47 < brian_petersen> What are some common application directory structures?
15:49 < andredublin> db.posts.aggregate({ $project: { post.tags: 1 }, { $unwind : "$post.tags" }, { $group: { _id: { "$post.tags" } } })
15:49 < andredublin> that should do it
15:52 < foofoobar> Hi. http://expressjs.com/api.html in the first few lines, there is an example for app.get('/', function() {… }); and app.get('title');
15:52 < foofoobar> How can a function which does totally different stuff has the same name?
15:53 < pachet> its called overloading
15:53 < pachet> behind the scenes express is checking how many arguments you passed in
15:54 < pachet> if you only supply one, it assumes you're trying to access some stored value
15:54 < foofoobar> pachet, okay. Confusing.. In my opinions its a bad way
15:54 < pachet> yeah i agree with you
16:01 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
16:13 < jj_> Greetings! I am attempting to install node on OS X 10.6 Server and running into an error while compiling - /deps/v8/include/v8.h: In function 'void node::cares_wrap::AfterGetAddrInfo(uv_getaddrinfo_t*, int, addrinfo*)': ../deps/v8/include/v8.h:5893: error: 'always_inline' function could not be inlined in call to 'v8::Handle<v8::Primitive> v8::Null(v8::Isolate*)': function not inlinable ../src/cares_wrap.cc:796: error: called from here ma
16:14 < jj_> Has anyone run into the problem?
16:20 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:32 <@isaacbw> foofoobar: only if you don't know how to read documentation
16:33 < foofoobar> isaacbw, when a function does two complete different things depending on the optional parameters, its a bad coding style in my opinion.
16:33 <@isaacbw> which seems to be a pretty common affliction
16:34 <@isaacbw> foofoobar: oh, that example in express is actually pretty awful
16:34 <@isaacbw> don't mind me 
16:37 < jj_> FWIW, I solved my problem by using the .pkg installer instead of compiling manually
16:38 -!- mode/#Node.js [+o TooTallNate] by ChanServ
16:42 < Willox> Is there any kind of limitations with the amount of processes ran by child_process spawn other than the server itself?
16:45 < nightfly__> ulimit rules
16:50 < qle> hi guys
16:50 < qle> i dont get the socket.io example
16:54 < gildean> qle: what's not to get? anyways, i wrote a slightly more complete example here: https://gist.github.com/gildean/5080568
16:59 -!- mode/#Node.js [+o TooTallNate] by ChanServ
17:10 < slifty> just a sanity check: is the installer broken?
17:11 < echo|> Which installer and which architecture?
17:11 < slifty> both myself and another person are getting the message "The installer could not install the software" -- this address http://nodejs.org/dist/v0.10.5/node-v0.10.5.pkg
17:11 < slifty> I have an older version of node installed already, the other user is doing a fresh install
17:12 < slifty> (the OSX pkg)
17:12 <@TooTallNate> slifty: i think this will be fixed in v10.6
17:12 <@TooTallNate>  /cc isaacbw 
17:12 <@TooTallNate> i mean /cc isaacs 
17:12 < slifty> noted!
17:13 < slifty> http://nodejs.org/dist/v0.10.4/node-v0.10.4.pkg seems to work just fine so we'll use that :)
17:13 < slifty> thanks!
17:14 < zenetik> hi, what's the difference between doSomething(function myCallback() {}) and doSomething(function() {}) ?
17:15 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
17:15 <@TooTallNate> zenetik: well you could access the "myCallback" function from within your callback in the first case
17:16 < zenetik> i see callback having a name and anonymous callback
17:16 < zenetik> that's all ?
17:17 <@TooTallNate> zenetik: ya pretty much… there's not too great of a difference
17:17 < gildean> zenetik: and you also get the function name in stacktraces
17:18 < ericelliott> two differences: You can see the function name in stack traces, instead of (Anonymous), and you can refer to the function from within itself (recursion)
17:18 < zenetik> gildean: ha. Good point 
17:18 < zenetik> perfect, thanks all guys !
17:19 < ericelliott> The advantage of anonymous an anonymous function is that it's easier to type. ;)
17:20 < gildean> ericelliott: yep, just don't make mistakes and you don't have to worry about the stack traces
17:21 < ericelliott> I mix both, depending on the complexity of the function.. if it's a one-line callback, I frequently leave the name off. If it's doing something that might blow up or I might need to inspect in the callstack, I try to remember to name it.
17:21 < ericelliott> "Don't make mistakes" -- no problem. I never write bugs.* 
17:22 < ericelliott> * In the land of make-believe.
17:22 < Guest94820> joyent/node: trevnorris created branch openssl-exports - http://git.io/6y94fA
17:24 < keyosk> So i'm using mranney's node_redis, and I am using a single client to handle all of the redis commands for my application, I get to a point where the redis command queue starts getting filled at a rate higher than it can clear the queue. Are there any recommendations for properly dealing with this scenario?
17:25 < keyosk> Would it be recommended to adjust command_queue_high_water ?
17:26 < niix> I'm trying to send an ajax request in a post to node, then send it back to the front end.  I'd like to be able to write the data to the page without a refresh.  http://hastebin.com/kuvopigoju.js  Here's what I have going on now
17:27 < zenetik> another question, in a nodejs app architecture, what's the best practise to share a db connection between my modules ? I mean, i've got a users helper module, a workspaces helper module which both are using mongoose. At the moment i'm using global.mongoose in my mainapp so modules can use it. I'm sure it's the bad way, what's the good one ?
17:30 < zenetik> found answers in stackoverflow
17:31 -!- mode/#Node.js [+o nrajlich] by ChanServ
17:33 -!- mode/#Node.js [+o piscisaureus__] by ChanServ
17:57 < root66> Hi, can anyone recommend a good resource for accepting websocket requests in node.js? The ones I have found on google appear to be outdated and no longer working.
17:58 < g0z> hey using uglify module it doesn't seem like the -m (mangle names)  option works at all, anyone else seeing this?
17:58 < tornad> root66: socket.io
18:32 < Illusioneer1> I have a simple db query that in the console works, it just executes a call to the db, returns the data as an array.  if i run it in the shell it works and returns the data but running the same call in my express app it returns as an empty object
18:32 < Illusioneer1> Is there something in console or in an express app that I need to take into account?
18:33 < RLa> can you paste some code
18:33 <@isaacbw> not really
18:34 < jdelgado> Any good way to grab the size of a file that you are writestreaming to?
18:34 < Illusioneer1> in both my express route and in console I just have : var db = require('./db')
18:34 < Illusioneer1> then I return the data from the function as : var resultset = db.statresult();
18:35 < Illusioneer1> except in console, the array is populated, but in the express app it's empty
18:39 < RLa> Illusioneer1, isn't query function async?
18:40 < Illusioneer1> oh that's right!
18:40 < Illusioneer1> uggg
18:40 < Illusioneer1> the async stuff is always tripping me up :(
18:46 < Hounddog> hello, am just getting an error on my server when using ntwitter. the http slient cannot send requests out as seems but i am not sure what i need to open up on the server
18:46 < Hounddog> slient = client
18:57 < MicahS> Anyone familiar with node-mysql package? I've having an issue with streaming rows. My result event never fires.
19:02 < MicahS> While attempting to connection.pause(), I get Error: Cannot switch to old mode now.
19:02 < MicahS> felixge ^^?
19:04 < monteith> using request/cheerio, is there anyway to scrape content that is dynamically updated about a second after a page load?
19:05 < mbalho> those modules dont run client side JS
19:05 < mbalho> youd need to do headless webkit or something heavier to do that
19:05 <@isaacbw> lol
19:05 <@isaacbw> running cheero in a browser would be hilarious
19:05 < keyosk> Or just figure out the url that is providing the dynamic content, and scrape it...
19:06 < monteith> keyosk: it's a bit more complicated than that ><
19:06 < keyosk> It NEVER is :D
19:07 < keyosk> If the url is only providing resources based on a cookie being set, you can solve that, if you don't know the url, then figure it out by scraping the script
19:07 < keyosk> Any way you look at it, it is solveable
19:07 < zenetik> men, you got lot's of work for nodejs job offering http://www.google.fr/trends/explore#q=php%2C%20nodejs&cmpt=q
19:07 < Hounddog> hmmm no idea what else need to open... 
19:07 < zenetik> i prefer this one :) http://www.google.fr/trends/explore#q=nodejs&cmpt=q
19:10 -!- mode/#Node.js [+o TooTallNate] by ChanServ
19:27 < Hounddog> grmbl...
19:28 < Hounddog> found the error just cause i had been sending wrong params to twitter...
19:28 < mbcze> Hi, can anyone help me with node-ffi callbacks, please? See https://github.com/rbranson/node-ffi/issues/124
19:34 < samholmes> Does anyone here check out stack overflow on a regular basis?
19:35 < samholmes> I need some guidance when it comes to this issue: http://stackoverflow.com/questions/16529756/node-js-and-mysql-too-many-connections-error
19:38 < pachet> samholmes are you sure you have 151 as your max
19:41 < pachet> samholmes: mysql && show variables like 'max_connections'
19:41 < samholmes> mysql && ?
19:42 < samholmes> pachet: 151 it says
19:44 < pachet> hate to say it, but it sounds like a leak
19:45 < pachet> have logs set up for mysqld?
19:48 < niix> is there a way to update an EJS template w/o refreshing?
19:50 < styol_> niix: without refreshing page or without restarting the application serving the template?
19:50 < niix> either way I suppose
19:50 < niix> I'd like to render/update the data on the page without a new page load
19:51 < euoia> niix: you mean for dev purposes?
19:51 < niix> No, for UX
19:52 < euoia> not sure
19:53 < CorySimmons> Why is my npm package throwing all kinds of WARN "No repository field" errors?
19:53 < CorySimmons> I mean, it works, and it does a lot of GET and PUT and such, but it throws a lot of those warnings too. Looks ugly. :\
19:54 < styol_> niix: depends a little bit on the specifics, but you probably need a routine that periodically checks in with your server to establish when a new template / portion of a page / etc should be downloaded and displayed on the page, or rather, replaced on the page. Some of the specifics are if this is only once in awhile, frequently, just for random updates of the ui, etc etc
19:55 < niix> I'm sending a post
19:55 < niix> it's to update a table, based on what the user sends over
19:55 < styol_> niix: another fun option is sockets which accomplishes a live type feel for a site
19:55 < niix> ah that's true
19:56 < styol_> niix: socket.io, sockjs, and various other options
20:00 < niix> any one have a clue on how to use EJS helpers?
20:03 < mbalho> CorySimmons: you should add a repository field
20:03 < samholmes> pachet: Not sure. Where are the logs?
20:21 < ckknight> Hey, when --harmony_collections is on, is there a way to iterate over the items in Map/Set? (not WeakMap)
20:33 -!- mode/#Node.js [+o MI6] by ChanServ
20:34 < ningu> this is pretty hysterical: http://labnotes.org/2013/05/11/rounded-corners-427-ode-to-a-shipping-label/
20:36 < zenetik> hi, does somebody using winston logger module ?
20:37 < ningu> it's pretty popular, I don't use it myself though
20:37 < zenetik> i can winston.info/warn/error but not debug. I'm using latest version. When i try to set debug level in winston, info/warn/error/debug output nothing.
20:38 < zenetik> ningu: thx
20:42 < daslicht> yesterday we talked about RTE in here , do you remember 
20:42 < daslicht> this is exactly what i was looking for : http://code.google.com/p/rangy/wiki/CSSClassApplierModule
20:43 < daslicht> just for the record :D
20:50 < Sastha> <daslicht> Very useful link. Thanks!
20:52 < daslicht> this is also interesting: http://takazudo.github.io/jQuery.LazyJaxDavis/doc/
20:53 < daslicht> just about to try it
21:03 < mansoor> How do I get cursors with Mongoose
21:03 < mansoor> to iterate over very large collection
21:04 < s5fs> How the crap do I send a socket.io message to a particular client using a namespace? I'm able to search io.sockets.clients() and find who I wanna chat with, but I cannot seem to figure out how to get the emit syntax correct.
21:13 < CorySimmons> mbalho: Someone else is working on the package. They say they don't get the WARN errors I get. Do I have leftover files or .json files somewhere that are referencing old items in the package?
21:21 < xangelo> :q
21:21 < xangelo> dammit. 
21:25 <@MI6> joyent/node: isaacs master * 31e73a5 : npm: Upgrade to 1.2.21 - http://git.io/nu2LDA
21:25 <@MI6> joyent/node: isaacs created branch v0.11.2-release - http://git.io/gHBjGg
21:29 < Technodrome> how can i have my files be watched and automatically reload with a change?
21:29 < Technodrome> so annoying to have to reload them manually of course
21:29 < ningu> Technodrome: isaacs has a module called supervisor
21:29 < ningu> or maybe supervisord, can't remember
21:30 < Technodrome> is it something on the OS that monitors it? or is it some code i have to ad
21:30 < Technodrome> d
21:30 < Technodrome> i would like to keep the watching outside of actual code 
21:30 < ningu> it's a node script that runs and restarts your app for you
21:31 < Technodrome> ok 
21:31 < Technodrome> also in express, why is the default project template separate the "route" from the function result callback ? 
21:31 < gildean> you can do the same with nodemon and also with forever
21:32 < ningu> oh right, I forgot about nodemon
21:32 < ningu> Technodrome: not sure what you're talking about there
21:32 < ningu> what is the "function result callback"?
21:32 < Technodrome> then again most node examples put the callback right in with the route declaration itself 
21:32 < Technodrome> app.get('/', routes.index);
21:33 < Technodrome> vs 
21:33 < Technodrome> app.get('/justatest', function(req, res) { 
21:33 < Technodrome>   res.render('index', {title: 'here goes that thing'}); 
21:33 < Technodrome> });
21:33 < ningu> Technodrome: oh, right. you can do whatever you want. but if you want to reuse any of that route code obviously it has to be defined elsewhere
21:33 < gildean> Technodrome: because then your routees can be in a module of their own
21:33 < gildean> also its cleaner
21:33 < Technodrome> anything included with routes is a module right?
21:33 < Technodrome> err
21:33 < Technodrome> require*
21:34 < ningu> anything that defines exports or module.exports is a module
21:34 < ningu> whether or not anyone bothers to require it :)
21:34 < gildean> but you can require json-files as well
21:34 < ningu> yes, that's true
21:34 < Technodrome> yes i don't quite clear the whole exports.index etc 
21:34 < Technodrome> why is that needed?
21:34 < ningu> Technodrome: http://nodejs.org/docs/latest/api/modules.html
21:35 < ningu> read it from beginning to end, or you will have much confusion :)
21:35 -!- mode/#Node.js [+o MI6] by ChanServ
21:36 < Technodrome> so anything with exports attached to it , gets exposed 
21:36 < daslicht> @Technodrome : https://github.com/nodejitsu/forever
21:36 < daslicht> tahn you can do forever -w app.js
21:36 < daslicht> and it will watch for changes
21:36 < daslicht> you can even start it as deamon 
21:36 < ljharb_work> Technodrome: but use module.exports syntax, not exports syntax
21:37 < Technodrome> i would like to have it reload for any file that changed in the whole dir, not just one file 
21:37 < gildean> i think i also mentioned forever earlier as an aswer to the question
21:37 < daslicht> its also working when you cchage teh css
21:37 < ningu> Technodrome: yes, use nodemon or supervisor for that, google them and read the docs :)
21:37 < daslicht> :D
21:37 < Technodrome> yeah got it 
21:37 < Technodrome> theres a little ecosystem here with node 
21:38 < ningu> forever is more for when you want to keep your app running in teh background and manually restart it
21:38 < ningu> maybe it can do automatically do
21:38 < ningu> too*
21:38 < ningu> but I haven't used it that way
21:38 < daslicht> it can
21:38 < daslicht> quite handy :D
21:38 < daslicht> in conjunction with phpstorm you can even trigger the browser to refresh itself
21:39 < ningu> browser, refresh thyself
21:39 < daslicht> not if the server just restarts
21:39 < daslicht> at least with forever 
21:41 < Technodrome> i hope using node.js for this project is the right choice
21:41 < daslicht> what are you are building ?
21:41 < Technodrome> just a web app, mostly just crud with some logic
21:42 < Technodrome> with an sql backend 
21:42 < daslicht> nice
21:43 < Technodrome> so its probably not the best use case 
21:43 < daslicht> iam just currently using express + swig + mongo-native 
21:43 < Technodrome> but since it will be super high traffic even early on, i want to get as much as i can out of it 
21:43 < daslicht> :D
21:43 < Technodrome> i might use mongodb
21:44 < daslicht> i like it 
21:44 < Technodrome> but if you have data which is relational, it can be an issue i guess
21:44 < Technodrome> i've never really used it 
21:44 < daslicht> yeah you would get your head around it :) 
21:44 <@Nexxy> relations belong in app logic anywy
21:44 < daslicht> but there are ODMs which allows relations i guess
21:45 < daslicht> but I really prefer to keep it simple and use mongo-native instead
21:45 < daslicht> :D
21:45 < daslicht> I am curious wherer this leads to 
21:45 < daslicht> we will see in some time
21:50 < Technodrome> daslicht:  there is users, and there is posts, how do you relate the two in mongo? 
21:50 < ningu> mongodb doesn't do joins, you have to do two queries
21:50 <@Nexxy> riak is the answer
21:51 < daslicht> or save all posts to the user document :D
21:51 < daslicht> do you have good experiecne with riak ?
21:51 <@Nexxy> a little
21:51 < daslicht> how does it compare to mongodb?
21:51 <@Nexxy> it doesn't
21:52 <@Nexxy> mongo doesn't compare
21:52 < Technodrome> ningu: well thats not "too bad" 
21:52 <@Nexxy> riak is actually scalable and distributed
21:52 <@Nexxy> it's also highly tunable
21:52 <@Nexxy> and focused on delivering a product more so than marketing
21:52 < daslicht> hm doesnt it just save key value pairs ?
21:53 <@Nexxy> and 2i and mapreduce
21:53 <@Nexxy> and link walking and key filtering
21:53 <@Nexxy> etc etc
21:53 < Technodrome> my cloud hosting only supports mongodb and mysql/pg
21:53 < keyosk> And you ca do the same thing with a key/value store that you can with a relational database if your application logic is sound
21:53 <@Nexxy> they don't let you make your own arbitrary connections?
21:53 < keyosk> They don't even support redis?
21:53 <@Nexxy> interesting
21:54 <@Nexxy> you can stand up a riak cluster with a few linodes and about 9 commands
21:55 <@MI6> joyent/node: isaacs v0.11.2-release * 5d3dc0e : 2013.05.13, Version 0.11.2 (Unstable) - http://git.io/x1mggg
21:55 <@Nexxy> or AWS if you like to pay more for shit
21:56 < daslicht> http://liamkaufman.com/blog/2012/03/01/why-riak-and-nodejs-make-a-great-pair/
21:56 < daslicht> interesting
21:56 < daslicht> i try it 
21:56 <@Nexxy> mhmm
21:57 < daslicht> these relations look sweet :D
21:57 <@Nexxy> since the time of that post there have been a few new node riak clients
21:57 <@Nexxy> and also riak control was released
21:57 <@Nexxy> which is a neat little webapp that shows you your cluster stats
21:57 < daslicht> cool stuff
21:58 < daslicht> is theerr also a riak admin?
21:58 <@Nexxy> yeah command line stuff
21:58 < daslicht> nice
21:58 <@Nexxy> you use it to manage your cluster
21:58 < daslicht> which client do you suggest to start with ?
21:58 <@Nexxy> bring nodes up/down/reip them
21:58 <@Nexxy> voxer has some good stuff
21:59 <@Nexxy> https://github.com/mranney/node_riak
21:59 <@Nexxy> there's also nodiak from coradine
21:59 <@Nexxy> and riak-js from whoever in control of the repo this quarter
22:00 < ningu> riak sounds like a malay word
22:00 < ningu> hmm, apparently it means ripple
22:00 <@Nexxy> I think that may be a nod to the eventual consistency
22:05 < daslicht> nice thanks for the inspiration
22:05 < daslicht> i will try it later 
22:06 < daslicht> now its time to sleep :D
22:06 < daslicht> have a nice time
22:06 < daslicht> cyalater
22:07 -!- mode/#Node.js [+o TooTallNate] by ChanServ
22:10 < txdv> any underscore like libs which extend the proto of arrays?
22:13 < ljharb_work> txdv: good lord no. NEVER modify native prototypes unless it's with a spec-compliant shim
22:13 < ljharb_work> 
22:13 < txdv> go away
22:13 < txdv> better tell me the name i forgot of the awesome lib
22:13 < txdv> that extends lists with funtions like first and last
22:14 < ningu> txdv: I doubt you're going to find anyone here who thinks that's a good idea.
22:14 < RLa> second and third would be fancy too
22:15 < txdv> underscore it shall be
22:18 < ljharb_work> txdv: also half of underscore is already in ES5 javascript natively.
22:18 < ljharb_work> also they're not "lists", this isn't python
22:18 < ljharb_work> .first() is just [0], and foo.last() is just foo[foo.length - 1]. don't fight the language.
22:19 < txdv> more like foo.length > 0 ? foo[0] : null/whatever default value
22:20 < ljharb_work> sure
22:20 < ljharb_work> there's foo.pop() and foo.unshift() if you want to pull off the first and last values
22:21 < ljharb_work> ah, unshift won't return the value, nvm
22:21 < ljharb_work> so just pop
22:21 < ningu> shift, not unshift
22:21 < ljharb_work> ah right thanks
22:21 < ljharb_work> that's it
22:24 < Technodrome> so if i do a mongodb query, and i want to wait until that's done to render, i have to use async right? 
22:24 < ningu> Technodrome: you have to use callbacks, not sure if you mean the async module
22:24 < teratorn> hi, I've got some code that uses Buffer, but I need to port it to run client-side in Firefox. any idea if anyone has ported Buffer to other JS implementations, or how difficult that might be?
22:24 < Technodrome> i meant the async module yes 
22:24 < werle> anyone have trouble with levelup and travisCI?
22:25 < ningu> Technodrome: no, you just have to use callbacks, you can use the async module if you need it
22:25 < Technodrome> ningu: but each query is a call back, so if i need to do multiple queries then async, if its just one , just use callback
22:25 < ningu> teratorn: you can look at browserify
22:25 < ljharb_work> you don't need the async module
22:25 < ningu> Technodrome: you don't *need* async but you can use it if it makes your life easier
22:25 < Technodrome> i don't want to create a tree of callbacks
22:25 < ljharb_work> even for multiple queries. it just is one way to abstract it. you can also use promises if you want too
22:25 < ljharb_work> Technodrome: http://callbackhell.com
22:26 < Technodrome> yes that would create callback hell right?
22:26 < Technodrome> putting 3 or 4 queries inside of each other and stuff
22:26 < gluxon> Technodrome: Yes, that would be horrible.
22:26 < Technodrome> i've seen people do it 
22:26 < Technodrome> 8+ queries 
22:26 < ningu> eek
22:26 < gluxon> AAQWERQ
22:26 <@Nexxy> you don't have to create a tree
22:26 < gluxon> No.
22:26 < gluxon> Don't even want to imagine that.
22:26 < Technodrome> a friend of mine just puts each query into another queries callback
22:27 < gluxon> Yeah, don't do that.
22:27 < ningu> your friend is insane
22:27 < gluxon> Please.
22:27 < gluxon> For the sake of JavaScript.
22:27 < Technodrome> i don't think he knows about async and stuff
22:27 < Technodrome> then again, I don't understand promises 
22:27 <@Nexxy> Technodrome, me neither
22:27 < ljharb_work> Technodrome: read that website. it tells you how easy it is to *avoid* callback hell, even without another library
22:27 <@Nexxy> that's OK though
22:27 < ljharb_work> promises are so brilliant :-)
22:27 < ningu> ubuntu 13.04 has linux 3.8, yay
22:27 <@Nexxy> ljharb_work, -ly unnecessary
22:28 <@isaacbw> only if you use them as callbacks
22:28 < Technodrome> so is a process just a convention? i mean there is no popular library that is used just for this purpose right?
22:28 < ljharb_work> -ly?
22:28 < ningu> in the languages I've documented in indonesia they have no native word for "promise"
22:28 <@Nexxy> brilliantly unnecessary
22:28 < ljharb_work> oh lol
22:28 <@Nexxy> as in, "I get to type .then() between everything now!!!"
22:28 <@Nexxy> "YAY~!1"
22:29 < teratorn> ningu: thanks
22:29 < ljharb_work> :-p i think it makes thinking about how to code well-designed async programs much easier
22:29 <@Nexxy> it's weird cuz
22:29 <@Nexxy> I feel the exact opposite
22:29 < ljharb_work> ie, with them, i think more people will naturally write proper async programs, than without them
22:29 < ljharb_work> *more proper
22:29 <@Nexxy> moar properer
22:29 <@Nexxy> properness is relevant
22:29 < ningu> ljharb_work: it also hides the actual control flow somewhat
22:29 <@Nexxy> but
22:29 < ljharb_work> ningu: as any good abstraction should
22:30 < ningu> ljharb_work: fair enough, but there's the risk of users not understanding that, so...
22:30 <@Nexxy> when you have to use a lib just to grok the flow of your app
22:30 < ningu> that's the danger of all abstractions as well
22:30 <@Nexxy> you have bigger problems
22:30 < ningu> Nexxy: aren't you just saying therefore node causes problems?
22:30 <@Nexxy> context, ningu 
22:30 < ningu> some control flow is genuinely complex and can't be made not complex
22:30 < ljharb_work> Nexxy: while i do agree with that, it's not just about grokking, it's about how you want to organize
22:30 <@Nexxy> and that's a bigger problem
22:30 < ningu> and node should be able to handle that
22:30 <@Nexxy> than being able to type it in a fancy way
22:31 <@Nexxy> ljharb_work, yeah I get that
22:31 < ningu> I am not saying promises are the right answer
22:31 <@Nexxy> it's just that there's already a great way to organize
22:31 < ningu> just that there should be a way to handle that sort of complexity
22:31 <@Nexxy> without making your code opaque to everyone else
22:31 <@Nexxy> ningu, composition
22:31 < ljharb_work> Nexxy: in terms of node, and the node callback style, there's certainly a momentum argument there
22:31 < Technodrome> this node.js stuff is much more complicated than .net 
22:31 < ningu> well, "opaque to everyone else" is relative -- if everyone used promises it would not be opaque to everyone else (again, not saying they should)
22:31 < vampi-the-frog> tellnes, I replied with a new patch :P
22:31 <@Nexxy> ljharb_work, basically what I'm saying is that
22:31 <@Nexxy> callbacks are omakase
22:31 <@Nexxy> by using promises
22:32 <@Nexxy> you are walking into a sushi bar and demanding they add hotdogs to the menu
22:32 < wushu> does anyone know if there is a module or something to start several express.js servers from one app? i am currently using http-proxy by nodejitsu to serve all apps over port80, but was thinking it would be nice if I could start the apps from one place.
22:32 <@Nexxy> or something
22:32 < mbalho> Nexxy: im pretty sure that exists in portland
22:32 <@Nexxy> oh portland
22:33 <@Nexxy> mbalho, did you see that the free rail zone died?
22:33 <@Nexxy> ._.
22:33 < mbalho> Nexxy: ohhh i didnt know that actually happened, tha tsucks
22:33 <@Nexxy> yeah seriously
22:33 <@Nexxy> but the streetcar goes out to omsi & the east side now
22:33 <@Nexxy> ... for some reason
22:33 < ljharb_work> Nexxy: yes, but what about when Futures become part of the language in ES7?
22:33 < mbalho> haha
22:34 < ljharb_work> Nexxy: obv that won't change the discussion for browsers, but do you think it would make sense then for node/devs to use them?
22:34 < tellnes> vampi-the-frog: :)
22:35 <@Nexxy> ljharb_work, IDK man
22:35 < ljharb_work> lol yeah that's a very hypothetical question. i'll ask it again in a few years once es7 is close to final :-p
22:35 <@Nexxy> you won't remember
22:36 <@Nexxy> I won't even be here!
22:36 < ljharb_work> then you can also buy me a beer when i do :-p
22:37 < ljharb_work> at any rate, i also think that passing in two callbacks, a success and an error one, would have been a much cleaner style too
22:37 < ljharb_work> as it is, we have to conflate two logic paths into one callback
22:39 <@Nexxy> ljharb_work, it's a logical step
22:39 <@Nexxy> do something
22:39 <@Nexxy> it's done
22:39 <@Nexxy> your fork in path goes after that
22:39 <@Nexxy> DID IT WORK!?
22:39 < NotMyself> This just in: Can't stop listening to Get Lucky… Film at 11
22:39 < ljharb_work> right - but i think it'd be nicer if that fork of "did it work?" that every single person has to write would instead be abstracted away
22:40 <@Nexxy> but 'did it work' is a very subjective question
22:41 <@Nexxy> 'no' could be the presence of an error object, or the lack of something in a response object, or the wrong type of something, or the wrong packet size, or or or
22:41 <@Nexxy> you're just being lazy ;P
22:41 < ljharb_work> those are good points
22:42 <@Nexxy> inorite?
22:42 < ljharb_work> but almost invariably, "if (err) { handleError(err); }" or "if (err) { throw err; }" is the first line of a callback
22:43 < dazoe> Hello, i using node v0.8.23 to start a java game server via child_process.spawn, The plan is to create a sort of manager for the game, my current problem is i'm tring to catch SIGINT with node so i can issue the stop command to the java server. but the java server is getting the sigint also.
22:43 <@Nexxy> so you mean to say that
22:43 <@Nexxy> error handling
22:43 <@Nexxy> is a thing?
22:44 <@Nexxy> handle(err, domorestuff(res));
22:44 <@Nexxy> idk
22:44 <@Nexxy> it's not that hard
22:44 < ljharb_work> i agree it's not that hard
22:44 <@Nexxy> you just don't think you should have to do it yourself!
22:44 < ljharb_work> exactly
22:45 <@Nexxy> but it seems like something that would be so difficult to get right
22:45 < ljharb_work> that's what computing is for
22:45 < ljharb_work> so i don't have to do it myself
22:45 <@Nexxy> well you can still abstract it easily
22:45 < ljharb_work> right
22:45 <@Nexxy> in <20 lines
22:45 < ljharb_work> i'm suggesting that node should do that
22:45 < s5fs> doesn't node do enough?
22:45 <@Nexxy> then write a module and get people to use it ;o
22:45 < ljharb_work> (or should have)
22:45 < ljharb_work> lol
22:45 < ljharb_work> if people are using a module, they might as well use promises ;-)
22:45 <@Nexxy> imagine if we spoke like promises
22:46 <@Nexxy> it would be agonizing to have a conversation
22:46 < ljharb_work> doSomething then doSomethingElse (or fixTheProblem)
22:46 < ljharb_work> versus doSomething, then doSomethingElse which means if there's a problem fix it, otherwise do something else else.
22:47 <@Nexxy> no you're forgetting done
22:47 < ljharb_work> that's not part of the promise spec
22:47 < dazoe> How do i stop sigint from being passed to child processes
22:47 < ljharb_work> afaik it's just then(success, fail)?
22:47 < ljharb_work> but yeah "done" is a weird name, sure
22:48 <@Nexxy> maybe
22:48 <@Nexxy> it makes sense to me
22:48 <@Nexxy> doAThing -> aThingIsDone
22:48 <@Nexxy> check that aThingIsDone was doneProperly
22:48 <@Nexxy> then
22:48 < s5fs> dazoe: are you using .fork() or .exec()  or what?
22:48 <@Nexxy> doAnotherThing -> anotherThingIsDone
22:49 <@Nexxy> except
22:49 <@Nexxy> don't actually say
22:49 <@Nexxy> .then
22:49 <@Nexxy> every damn time
22:49 <@Nexxy> it's implicit
22:49 < dazoe> s5fs: spawn, do i need to do child.disconnect(), that will leave stdio as pipes right?
22:49 <@Nexxy> much like the way we communicate verbally
22:50 < s5fs> dazoe: if you're using spawn, it takes "detached" boolean option
22:51 < dazoe> s5fs: thanks
22:52 <@MI6> joyent/libuv: Timothy J Fontaine v0.10 * 55c150a : build: only set soname on shared object builds - http://git.io/fJ_Vgw
22:52 < s5fs> dazoe: honestly though, I thought spawn left the child alone as it was. I'm using spawn to launch a goofball executable and when node dies, the executable persists. I'm guessing it's my executable, not node tho :)
22:53 <@MI6> joyent/node: isaacs created tag v0.11.2 - http://git.io/swJl2w
22:54 <@MI6> joyent/node: isaacs master * 458c8bb : Now working on 0.11.3 (+2 more commits) - http://git.io/QZrORg
22:56 -!- mode/#Node.js [+o MI6] by ChanServ
22:57 -!- mode/#Node.js [+o MI6] by ChanServ
22:58 -!- mode/#Node.js [+o MI6] by ChanServ
23:00 -!- mode/#Node.js [+o ryah] by ChanServ
23:02 < mscdex> node.js rules!
23:02 < Zolmeister> Yeah!
23:03 < s5fs> yah!
23:13 < txdv_> how do I export only one function?
23:13 < txdv_> so that require() returns directly a function
23:13 < Zolmeister> module.exports= function
23:14 < ljharb_work> module.exports is better than exports anyways
23:16 < vampi-the-frog> guys, any idea how I can capture the file upload chunks of data before express has time to process them?
23:16 < vampi-the-frog> because I'd like to cancel some (unauthenticated) file uploads before they can be copied to the tmp folder
23:17 < ningu> vampi-the-frog: put something in the chain earlier than express.bodyParser?
23:17 < vampi-the-frog> ahh
23:17 < vampi-the-frog> so bodyParser is responsible for the req.files
23:17 < ningu> I believe so yes
23:18 < vampi-the-frog> thanks
23:20 < mscdex> vampi-the-frog: you can always pause the request and resume it later
23:20 < vampi-the-frog> as opposed to what? closing it?
23:21 < mscdex> vampi-the-frog: oh sorry, i thought you were wanting to do something like authentication before accepting a file upload
23:21 < vampi-the-frog> authentication will come through the session cookie
23:22 -!- mode/#Node.js [+o ryah] by ChanServ
23:22 < vampi-the-frog> but it seems to me that express buffers the request and then calls all those callbacks in use()
23:22 < vampi-the-frog> and I really don't want it to buffer an useless upload, which might be huge
23:22 < vampi-the-frog> but I'm still verifying that
23:45 < garthk> Anyone got a lead on the using SSH keys for HTTP API authentication hack that Joyent is using? 'tWas mentioned in NodeUp 44. 
23:46 < vampi-the-frog> was't?
23:46 < Zolmeister> no, but that sounds cool. Is it basically using public keys for secure HTTP ?
23:48 < HeartOfAce> so, is there any benefit to using Object.keys(myObject) vs Object.getOwnPropertyNames(myObject)? 
23:48 <@isaacbw> who was is that I was talking to about a regex challenge?
23:48 < Zolmeister> HeartOfAce: I think IE8 doesn't support the latter
23:48 < garthk> Zolmeister: yep. You sign your request timestamp with your private SSH key. They know your public key, so they can check it's you.
23:48 < ningu> garthk: they called it http signature, you might google that
23:48 < HeartOfAce> well, I'm using it in node lol
23:48 < garthk> ningu: thanks!
23:49 < Zolmeister> https://github.com/joyent/node-http-signature
23:49 < garthk> Zolmeister: moar thanks!
23:49 < garthk> Oh, that's bloody awesome. Solves a couple of thorny problems right away.
23:50 < garthk> Defers me having to get OAUTH2-on-the-command-line working.
--- Log closed Tue May 14 00:00:51 2013
