--- Log opened Sun Sep 30 00:00:43 2012
00:11 < oteroleonardo> will Dart make javascript obsolete?
00:12  * BennyLava facepalms
00:12 < Guest_1448> lololol
00:14 < niggler> duck fart
00:17 < ljharb> lol what a question
00:18 < Aria> Sure, if all the browsers and all the developers adopt dart and someone writes a good network layer based on libuv for it
00:19 < oteroleonardo> V8 guys are now just playing with a new toy
00:20 < txdv_> can't dart be compiled to js?
00:21 < oteroleonardo> the syntax sugar they are using seems quite interesting
00:21 < oteroleonardo> sure it can
00:22 < oteroleonardo> and the VM it's coming soon
00:23 < txdv_> so googles chrome will support dart with an extra vm?
00:24 < oteroleonardo> I think so
00:25 < txdv_> writing bindings for libuv is not the easiest task, but it is easier than creating something like libuv
00:27 < oteroleonardo> just dream a language without all the "bad parts" of javascript
00:28 < txdv_> what bad parts?
00:29 < BennyLava> oteroleonardo: yeah I'm sure dart won't have bad parts of its own
00:29 < BennyLava> or: keep dreaming
00:29 < txdv_> if you wan't any other language running instead of javascript
00:30 < txdv_> than create a language_x2js compiler
00:30 < oteroleonardo> prototype based heritage for instance
00:31 < txdv_> why is it bad?
00:31 < oteroleonardo> the lack of modules support
00:32 < txdv_> so node has no modules
00:32 < txdv_> I am confused
00:32 < txdv_> what modules are you talking about?
00:32 < oteroleonardo> http://javascript.about.com/od/hintsandtips/a/jsavoid.htm
00:33 < oteroleonardo> the modules you or a third-party code
00:34 < oteroleonardo> the reason why you have require in Node.js
00:34 < txdv_> so ruby is bad as well than?
00:36 < oteroleonardo> No Ruby is nice, but it will never be mainstreem
00:37 < oteroleonardo> http://shootout.alioth.debian.org/u32/which-programming-languages-are-fastest.php
00:37 < oteroleonardo> just take a look on Ruby performance issues
00:38 < niggler> i wish fortran were more mainstream
00:38 < niggler> and that they added 'C' to that list
00:39 < txdv_> really
00:39 < txdv_> are you freaking high or what
00:39 < txdv_> fortran is like the most horrible language ever created
00:39 < niggler> what do you have against fortran?
00:39 < oteroleonardo> but u need productivity too of course
00:40 < niggler> f2c still produces better code than most people can write natively
00:40 < oteroleonardo> that's why we need a scripting language for the future web, don't u think so?
00:41 < niggler> we dont need another damn language
00:41 < oteroleonardo> It's all about speed while running and while developing of course
00:42 < niggler> so take python
00:42 < oteroleonardo> You don't need to learn too much
00:42 < niggler> what they should have done is develop a really good 3to2
00:42 < niggler> instead they spent all this time working on 2to3 and inadvertently stunting python3 growth
00:42 < oteroleonardo> It's quite similar to c or java
00:42 < niggler> duck fart
00:42 < txdv_> 3to2 2to3?
00:42 < oteroleonardo> Dude, we need { }
00:43 < niggler> oh god txdv  they made backward-incompatible changes
00:43 < niggler> so rather than pushing people onto python3, they developed a tool to translate forward
00:43 < niggler> 2to3
00:43 < oteroleonardo> some people just can't be under indentation pressure al it's life
00:43 < niggler> that effectively disincentivized development on python3 because you could just work in py2 and translate for those starting on py3
00:45 < oteroleonardo> Python is wanderful but an old fashioned suite, we need the new blue
00:45 < niggler> i still run python 2.3 for some stuff because the risks of upgrading and shit breaking (as minute as it may be) far outweigh whatever perceived benefits
00:45 < niggler> what's wrong with javascript oteroleonardo 
00:45 < niggler> i started playing with it two weeks ago and its competent for most tasks
00:45 < Guest_1448> dart looks like shit
00:45 < niggler> duck fart
00:45 < Guest_1448> indeed
00:46 < Guest_1448> "So, I've thought for a long time ... if I could take a clean sheet of paper and write [a new language] that retains all the goodness of [Javascript] ... I would not have come up with anything like Dart." -- pretty much sums it up
00:46 < oteroleonardo> Guest_1448 did you tried Dart?
00:46 < Guest_1448> nope
00:47 < Guest_1448> but as a javascript developer, it doesn't tempt me even one bit
00:47 < oteroleonardo> Javascript showed it was a great language
00:47 < niggler> are we going to talk about dart as if its the plan9 of scripting languages?
00:47 < oteroleonardo> but we deserve a little more now
00:47 < niggler> are you some sort of dart evangelist oteroleonardo 
00:47 < Guest_1448> other than sane classes, I don't miss anything in js (es5)
00:48 < niggler> in many ways javascript reminds me of perl
00:48 < oteroleonardo> what about a little syntax sugar for properties initialization?
00:49 < niggler> write a preprocessor
00:49 < niggler> i have makefiles generating javascript
00:49 < niggler> its not hard
00:49 < Fishrock123> oteroleonardo: Just use CoffeScript? lol
00:49 < oteroleonardo> What about closures running in the right way always?
00:49 < oteroleonardo> lol
00:49 < niggler> ah i see the problem
00:49 < niggler> you see oteroleonardo, you superficially understand javascript
00:50 < niggler> but you don't grok it
00:50 < Guest_1448> closures run in the right way "always"
00:50 < Guest_1448> as long as you understand them
00:50 < Guest_1448> which isn't hard
00:50 < oteroleonardo> :D
00:51 < oteroleonardo> Are you 100% sure on that?
00:51 < jelscript> how many years have you all been programming javascript?
00:51 < jelscript> and solidly, not just copying & pasting js into websites
00:53 < STRML> jelscript: about 4 yrs here
00:53 < STRML> btw glad to see nodejs.org is back up 
00:54 < niggler> define solidly jelscript 
00:55 < niggler> does making a website count as solid js 
00:55 < jelscript> niggler: as in, you handcode it in some form every week in your job/study/project
00:55 < Guest_1448> as long as it doesn't use fluid layouts 
00:55 < Guest_1448> jk
00:55 < jelscript> and you learn something each week from it
00:55 < oteroleonardo> I have 10 years coping & pasting js and just 2 years seriously coding it
00:56 < jelscript> i see
00:56 < niggler> i have 2 weeks of seriously coding and 0 days of copying-pasting
00:56 < niggler> i come from the dark world of fortran and assembly and c
00:56 < jelscript> for me, I have about 5 years copy & pasting js.. and about 1 year seriously coding it
00:56 < txdv_> niggler: how many irc clients have you written in assembler?
00:57 < niggler> i do a different type of networking
00:57 < niggler> i do ultra low latency trading
00:57 < niggler> i could do an irc client but its not … interesting
00:58 < jelscript> i come from a c# .net, html background... and node.js really attracts me with its slimness
00:58 < niggler> though i should add, with regards to javascript, the lack of true integers is pissing me off
00:58 < txdv_> ultra low latency trading?
00:58 < txdv_> so you are one of those parasitic beings who introduce absolutely no value into the market
00:59 < wltsmrz> High frequency trading I assume
00:59 < niggler> wltsmrz: ultra low latency is a subset
00:59 < oteroleonardo> Could any one here talk about bad things in dart?
00:59 < niggler> refers to stuff like location arbitrage
00:59 < jelscript> niggler, what brings you to node.js?
01:00 < wltsmrz> Getting as close to the black boxes as you can 
01:00 < niggler> jelscript: so im registering to become a self-clearing broker dealer
01:01 < niggler> and there was a security audit
01:01 < niggler> the regulators werent happy with my use of excel and google spreadsheets
01:01 < niggler> so i looked for an alternative, and wasnt really happy with any of them
01:01 < niggler> s
01:01 < niggler> o 
01:01 < niggler> i decided to bite the bullet and write my own spreadsheet platform
01:02 < niggler> javascript is an interesting choice because it admits a local solution (running in browser) and a server version (running in node)
01:02 < wltsmrz> Is it live?
01:02 < oteroleonardo> An integer with a boolean value…mmm
01:02 < niggler> and stuff like node-ncurses makes things work swimmingly
01:02 < niggler> wltsmrz: i have a version that replicates the behavior of `sc`
01:02 < niggler> shows a spreadsheet, lets you set formulae and move cells etc
01:03 < wltsmrz> Nice
01:03 < niggler> i also have a basic web version
01:03 < niggler> but it doesnt support advanced features like click drag
01:03 < niggler> i can do the math in browser
01:03 < niggler> as well as server-side
01:03 < niggler> the cool part is that the same code base works on both sides
01:04 < niggler> lemme say, i was blown away by how easy it was to put stuff together
01:04 < oteroleonardo> that's cool
01:04 < niggler> not having the computer blow up when you make a mistake is nice :)
01:05 < txdv_> npm might be the best thing that happened to js
01:05 < niggler> i guess while we are talking about it, are there any grievances with google spreadsheets or excel that a new spreadsheet engine could solve?
01:05 < oteroleonardo> So you prefer surprises while you have the code in a productive environment huh?
01:05 < txdv_> ofc combined with node(server side js)
01:06 < codingstream> i call that job security
01:06 < oteroleonardo> npm rocks for sure
01:06 < txdv_> if you want a typed language than use one
01:06 < niggler> lol codingstream its job security if your job is support
01:06 < oteroleonardo> it was a quite smart move for sure
01:06 < txdv_> you just said ruby is good, but js is bad and name a thing that have both in common
01:06 < txdv_> if you have a dynamic language, you have a dynamic language
01:07 < oteroleonardo> js is not bad at all
01:07 < niggler> you can have a dynamic language with type safety
01:07 < STRML> cue yet another js vs. ruby debate
01:07 < codingstream> anyone know what happened to riakjs ?
01:07 < oteroleonardo> it's cool but dart could be better
01:07 < txdv_> STRML: read the context
01:07 < niggler> risc could be better
01:07 < niggler> fortran could be better
01:07 < oteroleonardo> I say, just give it a try
01:07 < niggler> cobol could be better
01:07 < niggler> w
01:08 < niggler> wow colloquy sucks
01:08 < txdv_> language x could be better than y is a statement that is true false and undefined at the same moment
01:08 < wltsmrz> You mean riak-js?
01:08 < wltsmrz> The old coffeescript project by frank what's his face
01:08 < wltsmrz> No idea; but I know that mranney has a Riak module now
01:08 < wltsmrz> node_riak (probably)
01:10 < wltsmrz> The gentleman appears to have removed that repository https://github.com/frank06
01:10 < codingstream> yeah, im using node_riak, i was just curious
01:13 < niggler> oh fuck it just clicked
01:13 < niggler> oteroleonardo: are you familiar with scheme?
01:14 < oteroleonardo> Be the way we use Node.js instead of just V8? 
01:14 < niggler> scheme is a programming language
01:14 < oteroleonardo> The same way we could end using Dart and dart.js
01:14 < txdv_> oteroleonardo: omg that question
01:15 < oteroleonardo> and eventually without it :)
01:15 < txdv_> node = v8 + libuv + ssl
01:16 < niggler> oteroleonardo: learn scheme
01:16 < niggler> learn lisp
01:16 < niggler> learn some other programming language and then come back and reevaluate dart and js
01:16 < oteroleonardo> Ok give a cookie to the watch dog
01:16 < txdv_> the syntax of lisp is the easier one to learn
01:17 < txdv_> english is the most beautiful language says the man which speaks only redneck english
01:18 < txdv_> who*
01:20 < ljharb> oteroleonardo: dart is a joke.
01:20 < oteroleonardo> why
01:21 < oteroleonardo> Put some light in your words please
01:21 < timeturner> javascript is a beautiful language
01:21 < timeturner> I'm not even kidding.
01:21 < oteroleonardo> javascript is an organic language
01:22 < niggler> javascript is an orgasmic language
01:23 < niggler> in all honesty, it has rekindled my passion for programming
01:23 < txdv_> node made me like js
01:23 < oteroleonardo> it evolved from kaoss
01:24 < oteroleonardo> And now we use just a subset of the nightmare of the whole spec
01:24 < oteroleonardo> me too
01:24 < txdv_> good polly, take a cracker
01:25 < ljharb> oteroleonardo: for one, because it's verbose and ugly. for two, because it compiles to JS.
01:25 < oteroleonardo> I love javascript
01:25 < oteroleonardo> It's now the cools thing to develop realtime web apps 
01:26 < oteroleonardo> But it could be better
01:26 < txdv_> the api has nothing to do with the programming language itself
01:26 < ljharb> dart is not better JS.
01:26 < oteroleonardo> verbose?
01:26 < txdv_> although js in the browser had always async apis
01:26 < oteroleonardo> could just give an example of that?
01:27 < niggler> oteroleonardo: dart's like a wooly condom: it tries so hard to protect you but it's not pretty and it's not fun, and sometimes it leaks
01:27 < ljharb> oteroleonardo: http://lostechies.com/jimmybogard/2011/10/12/the-dart-hello-world/
01:27 < txdv_> if node had only the sync apis which every language has, it would have sucked
01:28 < oteroleonardo> So what you need is a swiss army programming language
01:28 < oteroleonardo> are u kinda  Mc giver guy? 
01:28 < Guest_1448> ahaa http://xkcd.com/927/
01:28 < niggler> oteroleonardo: point to a real-life problem for which dart is the *best* solution
01:29 < oteroleonardo> Don't we deserve an easy to architect programming language but still powerful?
01:29 < niggler> oteroleonardo: what about javascript is hard to architect?
01:29 < Fishrock123> Javascript is easy enough.
01:29 < txdv_> well, accessing datastructures and serialization does suck in js
01:30 < ljharb> JSON.parse is simple enough
01:30 < niggler> txdv_: does that justify a new language?
01:30 < jmoyers> oh yeah, JSON.stringify is super hard.
01:30 < oteroleonardo> lol
01:30 < oteroleonardo> thanks for the link
01:30 < ljharb> what we deserve is to stop creating new languages every time we don't like something.
01:30 < oteroleonardo> but eventually thing needs to evolve you know
01:30 < ljharb> JS does evolve.
01:30 < ljharb> ES3 -> ES5 -> ES6
01:31 < wltsmrz> I'm not even sure how to approach this problem.
01:31 < niggler> oteroleonardo: i disagree with your definition of evolve
01:31 < niggler> have you worked in a business?
01:31 < ljharb> dart isn't an evolution, it's a new species. an abomination.
01:31 < Fishrock123> Seems like what we deserve is people who waste out time.
01:31 < wltsmrz> When is it ever justified to create a new language?
01:31 < Guest_1448> go dart go
01:31 < oteroleonardo> ES6 will have modules support I guess
01:31 < ljharb> when you've exhausted all possibilities in existing languages.
01:31 < ljharb> guess when that'll be?
01:31 < oteroleonardo> And that will be good
01:32 < mscdex> ES1337
01:32 < txdv_> brain farts can justify a new language
01:33 < wltsmrz> Then I suppose there is no argument.
01:33 < niggler> oteroleonardo: what is your day job?
01:33 < txdv_> I like js a scripting language, ruby was my favourite before, now js is
01:34 < Fishrock123> I think we should just switch to an all-macro language and then all the haters can make their own syntax.
01:34 < txdv_>  /a/as a/
01:35 < txdv_> why not just assembly in the browser so everyone can run what he likes
01:35 < txdv_> o wait google did already that
01:35 < niggler> i thought that was fabrice bellard
01:35 < wltsmrz> NaCl
01:36 < niggler> oh woah thats cool
01:36 < niggler> worth spending time?
01:36 < txdv_> well i guess yes
01:36 < txdv_> very mature project
01:37 < txdv_> mono runs on nacl
01:37 < niggler> does this work with IE?
01:37 < txdv_> no
01:37 < niggler> lol
01:37 < txdv_> google chrome only
01:37 < txdv_> ie will never run that
01:37 < Raynos> http-stream: https://gist.github.com/3805596#example
01:38 < Raynos> good or bad idea?
01:38 < txdv_> it is a toy you can play with
01:38 < oteroleonardo> Ok so you think will have the luck of go
01:38 < txdv_> a very mature dev project
01:38 < niggler> oteroleonardo: are you familiar with plan 9?
01:39 < oteroleonardo> I say dart will have the luck of go
01:39 < Fishrock123> dart compiles into javascript amirite?
01:40 < oteroleonardo> Was Android a toy project at some point
01:40 < niggler> android solved an actual problem for which there were no solutions
01:40 < oteroleonardo> wasn't javascript a toy project in some point of the story?
01:41 < niggler> the problem is that javascript, at least from what i gleamed the last few weeks, is good enough that it's hard to build something that's better enough to justify people moving over
01:41 < oteroleonardo> And they used java instead of javascript… why in the hell?
01:41 < Fishrock123> .....?
01:41 < niggler> oteroleonardo: what is your day job?
01:41 < oteroleonardo> I think they don't like javascript at all
01:42 < Fishrock123> Java has nothing to do with Javascript, you do know.
01:42 < oteroleonardo> and why you think is that?
01:42 < Fishrock123> Because some genius like you thinks they know better.
01:42 < oteroleonardo> Yes it's a "well" and rigid language
01:43 < ljharb> nearly every single JS project out of google smacks of java engineers desperate to avoid having to actually learn javascript.
01:43 < niggler> google does not represent the pinnacle of programming
01:43 < ljharb> i've almost never interviewed a google engineer that can program their way out of a box without eclipse and classical inheritance.
01:43 < oteroleonardo> you have real classes and many programmers there to code anything
01:43 < ljharb> "real" classes is bs. classical inheritance is just one form of code reuse.
01:44 < niggler> java is garbage
01:44 < Fishrock123> You don't need 'real' classes.
01:44 <@ryah> alright.. enough hating
01:44 < oteroleonardo> java is old
01:44 <@ryah> gosh
01:44 < oteroleonardo> but fast
01:44 < niggler> depends on the industry
01:44 < oteroleonardo> as C on its time
01:44 < nonamehero> hi there how do I optimize node.js for best performance using my NT domain controller group policy?
01:44 < ljharb> lol, fair enough ryah
01:44 < niggler> in finance java is a joke
01:44 <@ryah> i happen to like classes very much
01:45 < oteroleonardo> sorry but I'm leaving right now
01:45 < oteroleonardo> see you soon guys and keep a close look to Darth
01:45 < oteroleonardo> luke I'm your father...
01:47 < txdv_> how can be the js god be in favour of classes
01:47 < niggler> now for an actual node question: is there a way to change the order in which node looks for modules?
01:47 < BennyLava> js god, trololol
01:49 < nonamehero> is it better to make sure you only install node.js on a NT 2003 domain controller or can you install it on one of those 'linnucks' servers as well?
01:50 < niggler> lol what's a canadian linux server?
01:51 < nonamehero> maple syrup?
01:51 < niggler> oh come on
01:52 < niggler> canadian = canuck
01:52 < nonamehero> is it best to name node.js files .njs files as they don't run on IE?
01:55 < Guest_1448> wut
01:55 < jmoyers> haha
01:55 < jmoyers> i was sitting here scrolling back over the last hour
01:55 < jmoyers> what a bunch of garbage
01:56 < Guest_1448> Darted it.
01:58 < nonamehero> well .js is for JScript files
01:59 < nonamehero> so .njs node.js files no?
01:59 < niggler> the word you are looking for is 'troll' jmonay 
01:59 < niggler> *jmoyers
01:59 < nonamehero> so you can tell which ones run on IE and don't
01:59 < Guest_1448> .js files execute with wscript 
01:59 < Guest_1448> that has nothing to do with IE
01:59 < jmoyers> i just.. i don't even..
01:59 < BennyLava> haha
02:00 < nonamehero> no but a script tag and they run on your IE
02:00 < Guest_1448> ........
02:00 < Guest_1448> don't add a script tag for nodejs files then
02:01 < nonamehero> yeah but then my client code gets mixed with my server code
02:01 < nonamehero> then IE crashes
02:01 < niggler> nonamehero: what are you trying to do
02:07 < nonamehero> I'm trying to make a UDP DNS server trolling application.
02:09 < Guest_1448> ahh fuuuu
02:09 < sinclair> monodevelop is a pretty good nodejs editor
02:09 < niggler> monodevelop?
02:09 < sinclair> yes
02:09 < niggler> how is it better than, say, vim?
02:09 < sinclair> niggler: it manages the application as a project
02:10 < nonamehero> How better is it than, say, Microsoft Word 2010 Enterprise SLU Edition?
02:10 < niggler> ewww does it gay up the project like eclipse does?
02:10 < sinclair> niggler: not as gay as eclipse, way better
02:10 < Guest_1448> IDEs suck
02:10 < niggler> i like ed
02:10 < nonamehero> yeah office all the way
02:10 < sinclair> Guest_1448: that's ok, you suck, and so does your code
02:11 < jmoyers> folks here used selenium builder with wd nodes package?
02:11 < nonamehero> only on the weekend
02:11 < wltsmrz> maximumtrolling.jpg
02:11 < sinclair> tbh, i really liked sublime, i think its the best text editor going (well, a close second to notepad++)
02:12 < Guest_1448> exactly
02:12 < sinclair> but, sometimes, you just want a light IDE
02:12 < codingstream> use what you want
02:12 < Guest_1448> what's the point of "light IDE"
02:12 < niggler> to edit text
02:12 < Guest_1448> when even editors like sublime are more powerful
02:12 < niggler> sometimes we don't need mental condoms -- we can read code without syntax highlighting
02:12 < sinclair> Guest_1448: custom build options, refactoring tools, project management tools, these are all good things
02:13 < Guest_1448> sinclair: sublime supports all of that
02:13 < niggler> how do you "build" a node project sinclair 
02:13 < Guest_1448> maybe not fully customizable like some of the IDEs
02:13 < Guest_1448> but basic features are there
02:13 < sinclair> niggler: configure the project with a custom build option i guess
02:14 < sinclair> niggler: sometimes, i want a IDE, sometimes i just want a text editor
02:14 < codingstream> use what you want
02:14 < codingstream> id rather use what i want than compare editors all day and get nothing done
02:15 < sinclair> niggler: for example, if i want professional, robust and measurable code, id use Visual Studio, but seeing as that;s not an option on nix, MonoDevelop seems a semi reasonable option
02:15 < niggler> why visual studio
02:15 < sinclair> codingstream: use what you want then
02:15 < Guest_1448> IDEs are too complicated and come with all custom homemade stuff that -- unless it's perfect, it's just a pain and gets in your way
02:15 < sinclair> codingstream: im simply say, monodevelop is actually a pretty good option for node.
02:16 < sinclair> Guest_1448: you don't know what your talking about
02:16 < niggler> im used to editing with ed or vi
02:16 < Guest_1448> if a new ide comes out tomorrow, you can't just switch to it
02:16 < codingstream> sinclair: awesome, if monodevelop works for you, go for it!
02:16 < niggler> sell me on a good editor for js
02:16 < Guest_1448> since they all do things their own way
02:16 < sinclair> niggler: Yeah, i tested monodev out on JS, its really good
02:17 < nonamehero> visual studio 2012 is too feature packed IMO for node
02:17 < niggler> so i have a somewhat bad habit (from C) of setting up loops like while (y = x)
02:17 < niggler> and that has a specific meaning, but most linters bitch and moan
02:17 < Orbitrix> Sublime Text 2 is the only editor u needz
02:17 < niggler> does monodev do the same thing?
02:17 < BennyLava> st2++
02:17 < Guest_1448> Orbitrix: exactly
02:17 < Guest_1448> ides are more pain than worth it
02:18 < niggler> why sublime over aquamacs or macvim?
02:18 < sinclair> nonamehero: yeah, vs is getting quite feature rich, mainly because its geared for C# dev
02:18 < sinclair> nonamehero: with BIG empathize on SQL Server etc
02:18 < sinclair> nonamehero: i don't like VS for JS dev
02:19 < wltsmrz> Not to be confused with emphasize
02:19 < sinclair> cheers, i just auto corrected
02:19 < wltsmrz> Does this channel have anti-trolling legislation?
02:20 < sinclair> wltsmrz: why, are you thinking about trollin'?
02:20 < other_guy> Sublime Text 2  
02:21 < sinclair> Guest_1448: i don't know how you can think IDE's are a pain, unless your only experiance with one was eclipse
02:21 < jelscript> Sublime text 2 rocks
02:21 < jelscript> its my editor of choice
02:21 < Coderah> Sublime Text 2 is the only thing that holds my sanity in place
02:21 < codingstream> can sublime text 2 edit files over ssh ?
02:22 < Guest_1448> sinclair: you lock yourself into the IDE's way of doing stuff and there's, in most cases, a steep learning curve (if you really want to efficiently use all the "main" features)
02:22 < other_guy> codingstream: I use it with Cyberduck to edit remote files.  Seems to work fine.
02:22 < other_guy> I don't know if you could use its "subl" command line tool to point to a file over SSH though, never tried
02:22 < sinclair> Guest_1448: i don't understand what you are talking about, what do IDE's do differently than what you could be doing raw in a text editor?
02:23 < Guest_1448> sinclair: they come with a lot of things baked in 
02:23 < Guest_1448> I mean.. that's really why you would use an IDE? if you want a fully integrated enviornment
02:24 < other_guy> I'd use an IDE if the debugging facilities of node were better.
02:24 < sinclair> Guest_1448: hmm
02:24 < other_guy> but as it stands they're terrible, so an IDE doesn't seem to matter much
02:24 < sinclair> other_guy: im waiting for VS to put something out there for JS debugging
02:24 < other_guy> VS already has JS debugging… just for IE processes though
02:24 < sinclair> other_guy: i expect MS will have something on the cards, their IE debugger is ...... reasonable......*cough*
02:25 < sinclair> other_guy: yeah, that damn IE debugger...
02:25 < other_guy> meh, the Inspector for WebKit is exceppent
02:25 < other_guy> excellent*
02:25 < other_guy> but the way you set it up for node.js is hacky at best
02:25 < sinclair> other_guy: someone needs to drop that into an IDE or some sort, also, code refactoring for JS would be nice
02:26 < sinclair> other_guy: have you looked into JS performance on v8 ? Hidden classes etc
02:26 < other_guy> compared to what?
02:27 < sinclair> other_guy: it would be good to get an inspector on the V8 runtime
02:27 < sinclair> other_guy: not compared to anything
02:27 < other_guy> You can already profile that on any system supporting DTrace
02:27 < sinclair> DTrace ?
02:28 < other_guy> so basically OS X and Solaris (and open source derivatives)
02:28 < other_guy> http://en.wikipedia.org/wiki/DTrace
02:28 < other_guy> It's spectacular
02:28 < sinclair> yeah, just looking
02:28 < other_guy> We deploy on Linux and it drives me fucking bananas not having DTrace on those machines
02:28 < codingstream> dtrace is a godsend when you need it
02:29 < sinclair> hey, does anyone here use coffeescript?
02:29 < other_guy> sinclair, I'm pretty sure Satan is lurking here somewhere, and I know he uses CS.
02:30 < sinclair> hmm
02:32 < jelscript> what are people's os of choice - mac osx or windows for development?
02:32 < dragon> Linux.
02:32 < jelscript> or linux
02:32 < codingstream> i just write my code on my smartos instances
02:33 < codingstream> because i am a lazy fuck
02:33 < other_guy> We all use OS X here, but that's also because we do iOS development.
02:34 < jelscript> I've been using windows mostly, but considering switching to mac osx
02:34 < jesusabdullah> isaacs: Have you considered factoring out the cache management code from npm?
02:34 < jelscript> my main gripe is the mac keyboard, but i think that's minor
02:34 < other_guy> I don't know how people do open source development on Windows.  It's a second class citizen for most of the interesting projects.
02:34 < jesusabdullah> isaacs: cause were it a separate library I could totally use it right now
02:34 < jelscript> other_guy, exactly
02:34 < dragon> jelscript: It's far from minor.
02:35 < niggler> that's not a fair assessment other_guy 
02:35 < dragon> jelscript: Download Linux and give it a try. It's free and you can install it without complex procedures or permanent battle scars. Look up wubi.
02:35 < jelscript> i think i can switch to a mac keyboard fully over time.. but its the switching back and forth in different offices that might bug me
02:35 < niggler> open source development on mac is also agonizing
02:36 < jelscript> Ctrl / command
02:36 < dragon> niggler +1
02:36 < jelscript> niggler: why do u think that?
02:36 < niggler> 32/64 bit compatibility, the bsd heritage of most of the core utils
02:36 < niggler> mach-o quirks
02:37 < other_guy> niggler, I don't think so.  I've never had any significant issue that can't be solved by installing brew typically
02:37 < jelscript> dragon: ive used linux before, and I like. But my main reason for switching to os x is because of my work.. it's either got to be mac or win
02:37 < niggler> iokit makes me want to stab myself in the eye
02:37 < niggler> writing kernel modules is a breeze compared to messing with iokit
02:37 < other_guy> what the hell do you have to use iokit for?  Are you writing device drivers for node.js?
02:38 < niggler> so a node example
02:38 < niggler> im using node-ncurses
02:38 < dragon> jelscript: I installed Linux on my work laptop. The only catch is that IT won't help you if you screw up.
02:38 < niggler> and there are some quirks with how mac handles certain ansi codes that causes trouble
02:38 < dragon> But then when's IT ever helped in such situations.
02:38 < other_guy> 99% of the typical hang ups are compile problems related to clang and llvm
02:38 < niggler> works just fine in linux
02:38 < jelscript> dragon: lol
02:38 < niggler> fuck IT
02:38 < jelscript> I used Suse linux back in the day
02:39 < jelscript> loved it
02:39 < other_guy> if you have something that doesn't work with clang/llvm then just install GCC through brew
02:39 < niggler> 32/64 bit problems
02:39 < other_guy> ?
02:39 < niggler> the fat binaries report strange things
02:39 < other_guy> like what?
02:39 < niggler> so some libraries are built for i386 and others for x86_64
02:40 < niggler> node-waf had some issues where it tried to induce the platform by investigating node binary itself
02:40 < niggler> and the universal binaries report both i386 and x86_64 compatibility
02:40 < other_guy> that's because they're compatible with both
02:41 < other_guy> if you don't want it to be universal, just don't compile with that flag
02:41 < other_guy> ?
02:41 < niggler> but you need everything down the line (e.g. shared libraries) to build both
02:41 < other_guy> no you don't
02:41 < other_guy> they don't even have to support the same bitness down the chain in userspace
02:41 < niggler> you either have to guess the platform
02:41 < niggler> or build both
02:42 < other_guy> you can use 32-bit or 64-bit binaries in userspace.  The only place you can't mix and match dependencies are if your library is writing directly to the hardware or you're in kernel space
02:42 < niggler> you can't include a 64 bit library when building a 32 bit program
02:43 < niggler> ld will complain
02:43 < other_guy> yes you can.  in fact that was the only way you used to be able to use 64-bit libraries, because Apple hadn't updated most of Cocoa to be 64-bit yet.
02:43 < other_guy> the underlying POSIX libraries were 64-bit, but everything else was 32-bit
02:44 < other_guy> and there was no problem using the former with the latter
02:44 < other_guy> it was a requirement
02:44 < niggler> if you have a spare mac available
02:44 < niggler> try getting nodejs from the package on the website
02:44 < niggler> and npm install ncurses
02:45 < other_guy> I don't know what the problems with ncurses are, but I'm 100% certain you're wrong about the 32/64-bit issue.
02:46 < other_guy> just built ncurses
02:46 < niggler> ist not ncurses
02:46 < niggler> its actually an issue with node-waf
02:48 < other_guy> okay, and what was the problem I was supposed to see?
02:48 < other_guy> the ld waring?
02:49 < niggler> no npm reports it as an error
02:50 < niggler> ok here's an example
02:50 < niggler> lemme pastebin this
02:50 < other_guy> I literally just built it, no errors.  I get an architecture warning, which is actually a build script bug that's not passing the right flags
02:51 < niggler> http://pastebin.com/Wwn7mqXm
02:51 < niggler> something simple other_guy 
02:52 < niggler> "other_guy: I don't know what the problems with ncurses are, but I'm 100% certain you're wrong about the 32/64-bit issue." -- explain what's going on here
02:52 < niggler> and to show you its a 32/64 issue, if you take out the -m32 in line 10 it works as expected
02:54 < other_guy> one sec
03:03 < other_guy> niggler, there are Xcode options that manage this, and I'm just trying to distill them down to their CLI flags
03:03 < jamescarr> racist
03:06 < other_guy> niggler, Xcode managed this by compiling two executables.
03:06 < niggler> right, so we get back to my original statement
03:06 < niggler> niggler: you either have to guess the platform
03:06 < niggler> [10:41pm] niggler: or build both
03:07 < other_guy> However, this isn't specific to the Mac
03:07 < other_guy> Linux has the same limitation
03:07 < niggler> to which you objected that "other_guy: I don't know what the problems with ncurses are, but I'm 100% certain you're wrong about the 32/64-bit issue."
03:07 < niggler> elf doesnt have fat binaries iirc
03:07 < other_guy> I didn't realize the magic that Apple was doing behind the scenes, because the build tools automated it
03:08 < other_guy> However, your example won't run on Linux either.
03:08 < niggler> maybe we should have everything use xcode
03:08 < niggler> on linux the issue doesnt exist because you cant build ELF 32/64 bit fat binaries
03:08 < niggler> so there's no confusion
03:08 < other_guy> You can't link a 32-bit library to a 64-bit executable.
03:09 < niggler> right that's exactly what i said, to which you said "other_guy: I don't know what the problems with ncurses are, but I'm 100% certain you're wrong about the 32/64-bit issue."
03:09 < niggler> the problem doesnt exist in linux
03:09 < niggler> because you can directly resolve whether you need 32 or 64 bit by using `file`
03:09 < other_guy> it does if you don't have the right bitness version of the library around.
03:10 < niggler> you have to actively try to mess it up on linux; on the mac, the fact that you have to guess creates problems
03:10 < niggler> in any case, we can agree that there's apple magic
03:10 < niggler> a
03:10 < niggler> nd this isnt the only place
03:11 < other_guy> why do you have to guess?
03:11 < other_guy> why can't you use lipo?
03:11 < niggler> what does that tell you for a fat binary
03:11 < niggler> yes, you can go back and strip out the version you want
03:12 < niggler> there's a lot of legwork, and in many ways its as agonizing as working in windows
03:12 < other_guy> so what's the problem?  You know which arch you're building for, so you check if your arch is listed?
03:12 < niggler> if you are node-waf you dont know
03:12 < niggler> t
03:12 < niggler> ha
03:13 < niggler> *that's the problem
03:14 < other_guy> ?
03:14 < other_guy> there's no good reason for node-waf not to know that.
03:14 < other_guy> other than it being a bug in node-waf
03:17 < other_guy> https://github.com/joyent/node/issues/3633
03:17 < other_guy> I mean the fact that node-waf hard coded the arch hardly seems like a mac problem.
03:17 < other_guy> ?
03:47 < fabio> hy node guys! anyone available to help me with a 32-bit build on macos x?
03:47 < ljharb> why would you be using 32 bit anything on mac os?
03:48 < fabio> damn oracle's fault... their 64-bit client libs are segfaulting on macos for months
03:48 < fabio> my 32-build of node was working till 0.8.8
03:48 < ljharb> so run a virtual 32 bit machine. don't run your mac in 32 bit mode, jesus
03:49 < fabio> my mac is not on 32-bit mode :) luckly only the app i'm developing is
03:49 < ljharb> ah, ok well thats good at least.
03:49 < ljharb> so why can't the oracle libs run in 32 bit, and your app run in 64 bit?
03:49 < ljharb> thats how apple's own apps do it before theyre fully 64 bit
03:52 < fabio> well, i could't make it work this way... let me explain the hell i've been through
03:52 < ljharb> obviously i know none of your context. i just can't imagine running anything in 32 bit mode that doesn't have to be as being a good idea.
03:53 < fabio> i'll try to explain the context, hold on :)
03:54 < fabio> i was a happy node developer, always working with the latest release... everything was nice... and then, an evil manager decided to switch from mysql to oracle
03:55 < fabio> oracle's libs simply didn't work on a 64-bit environment, segfaulting when loaded. not even sqlplus is able to load
03:55 < ljharb> right - so use a 32 bit environment as the proxy between oracle and the real world
03:55 < fabio> yeah
03:55 < ljharb> and run everything else in 64 bit
03:57 < fabio> yeah i gave that some though... but since i can't run a "mixed platform" process, i would have to write an isolated proxy process just to speak to oracle
03:57 < ljharb> also, get that manager fired, cause thats stupid.
03:57 < fabio> :) he already was
03:57 < ljharb> you don't go *away* from open source
03:57 < ljharb> lol
03:57 < fabio> but now i have some legacy on my hands
03:57 < ljharb> then switch back to mysql, or to postgres
03:57 < fabio> i'm working on it, but i can't just stop giving support for the current environment
03:58 < ljharb> gotcha
03:58 < wdAWEFWEF> what happened to http://nodejs.org/?
03:58 < fabio> the point is: my problem was somehow "managed" since i was able to build node on 32bit
03:58 < wdAWEFWEF> http://nodejs.org/    ?
03:58 < ljharb> wdAWEFWEF: dns problems earlier, it will fix itself soon
03:58 < wdAWEFWEF> cool
03:58 < fabio> ./configure --dest-cpu=ia32 worked nice
03:58 < ljharb> that should work
03:58 < ljharb> whats broken?
03:59 < fabio> i'm trying to upgrade to 0.8.11 and won't build when configured this way
03:59 < wdAWEFWEF> it just fixed it self
03:59 < fabio> here's the culprit:
03:59 < fabio> ../deps/openssl/openssl/crypto/des/set_key.c:393:17: error: unsupported inline asm: input with type 'unsigned long' matching output with type 'unsigned int' 
04:00 < ljharb> fabio: probably openssl dropped 32 bit support?
04:00 < fabio> you must be right
04:00 < mscdex> heh no
04:00 < fabio> if that's the issue, i'm scr***d
04:01 < fabio> i don't want to work on a VM :(
04:02 < fabio> maybe there's some way i can build node.js w/o openssl?
04:02 < fabio> (i know it looks like madness)
04:04 < ljharb> ha, that does sound mad
04:04 < fabio> i'll try to ./configure --shared-openssl, maybe i get lucky
04:04 < ljharb> why not just stick with < 0.8.11?
04:04 < fabio> ya know, love livin' on the edge
04:05 < fabio> i'll give that a shot as well
04:05 < fabio> thanks a lot, ljharb :)
04:06 < fabio> brb, got some hardcore compiling action to do :)
04:06 < ljharb> good luck
04:06 < fabio> tks!
04:07 < jmoyers> anyone here who has contributed to https://github.com/admc/wd?
04:12 < vicapow> hey all!
04:12 < vicapow> me and my friend made something with node
04:13 < vicapow> anyone want to give it a try and let us know what you think?
04:13 < vicapow> you don't have to even sign in to use it :P
04:14 < vicapow> lol, okay nm
04:19 < fabio> hoho node.js installer for macos installs an universal binary
04:20 < fabio> which can run on either 32-bit or 64-bit mode
04:20 < fabio> problem solved, for now
04:38 < jamescarr_> socket.io won't send cookies when xdomain: true ?
04:45 < jamescarr_> damn
05:40 < EhevuTov> anyone have some code to rate limit a stream for testing purposes? I have a stream of a txt file that comes in so fast, I can't simulate the slower real world example
05:42 < EhevuTov> oh just found this: https://npmjs.org/package/ratelimit testing of this module will commence 
05:42 < jmoyers> sigh, automated browser testing is a big fucking ugly craphole
05:42 < jmoyers> selenium, selenium ide, se builder, saucelabs, soda, webdriver, phantom, zombie, aaaaaaah coffeescript and craziness everywhere
05:43 < EhevuTov> yeah, I'm glad I'm not there (yet)
05:44 < SoulRaven> hello
05:54 < SoulRaven> i am try to do somethink like a splice funcion, but is not woking right, http://bin.cakephp.org/view/2078352483
05:55 < SoulRaven> returns the main buffer the same, even if i "copy over" with soffset of the length that i have read and return
05:55 < SoulRaven> anyone?
06:03 < plato> SoulRaven: what happens when you copy a buffer to itself?
06:03 < plato> do you intend to append length bytes onto the buffer?
06:03 < SoulRaven> is happend nothing
06:04 < plato> node docs are down... but my guess is that with copy, you need to create a new buffer
06:04 < SoulRaven> i want to "shift" the buffer on each call of the method, with the bumer of bytes that i have want to return from the mathod
06:05 < plato> what do you want to do if you call <0x00, 0x01, 0x02>.splice(1)
06:06 < SoulRaven> because i want to read portion from a buffer
06:06 < SoulRaven> i am working on a parser for AVL devices
06:06 < plato> should <0x00, 0x01, 0x02>.splice(1) return <0x00>
06:06 < plato> ?
06:06 < SoulRaven> yes, return <0x00>
06:06 < SoulRaven> but the main buffer after that will have to be <01 02>
06:07 < plato> splice seems like a poor name, why not .first
06:07 < plato> hum i dunno if you can modify buffer length after creation
06:07 < plato> i have only used them a tiny bit though
06:08 < SoulRaven> thats the ideea, to modify the buffer and return the new buffer on the same object
06:10 < plato> SoulRaven: looking at http://webcache.googleusercontent.com/search?q=cache:sqHOIyoXsXsJ:nodejs.org/api/buffer.html+&cd=1&hl=en&ct=clnk&gl=us it does not seem possible to change buffer size after creation
06:11 < plato> you will have to create two new buffers with the correct length and delete the old one
06:11 < plato> or, only fill up the first n bytes of the modified original buffer
06:11 < plato> it will still be sized to its original size
06:11 < SoulRaven> but how i populate the same object with the new buffer
06:12 < plato> you can move the buffer contents around
06:12 < plato> so <0x00, 0x01, 0x02> would turn into <0x00, 0x01, garbage>
06:12 < plato> you would have to manually keep track of the length of the new buffer contents, i think
06:13 < plato> this might be helpful:
06:13 < plato> buf.slice([start], [end])
06:13 < plato> start Number, Optional, Default: 0
06:13 < plato> end Number, Optional, Default: buffer.length
06:13 < plato> Returns a new buffer which references the same memory as the old, but offset and cropped by the start (defaults to 0) and end (defaults to buffer.length) indexes.
06:14 < SoulRaven> but also in the book say "Modifying the new buffer slice will modify memory in the original buffer!"
06:14 < SoulRaven> with is no happen
06:14 < plato> yes but not the SIZE of the buffer
06:14 < plato> creating a buffer is like making an ice cube tray n bytes long
06:15 < SoulRaven> this is the source of the slice http://bin.cakephp.org/view/314067724
06:15 < plato> you can fill up the bytes however you want, and leave some empty, but they are still there
06:15 < SoulRaven> from the node.js sources
06:16 < SoulRaven> i don't see how slice will modify the original buffer memory
06:16 < SoulRaven> because slice only return only a new buffer
06:17 < EhevuTov> I found the answer to my problem on ratelimiting for testing. Cut the chunk size of the stream down, then use stream.pause() and setTimeout(stream.resume()....
06:19 < plato> ok SoulRaven 
06:19 < plato> i see 
06:19 < plato> the new buffer points to the SAME MEMORY as the old buffer
06:19 < plato> just different parts of it
06:19 < SoulRaven> so way in the books say diferent
06:19 < plato> no, thats what docs say
06:20 < plato> Returns a new buffer which references the same memory as the old ... Modifying the new buffer slice will modify memory in the original buffer!
06:21 < SoulRaven> how so, because creates a new buffer, and the reference to the original buffer is lost
06:24 < plato> SoulRaven: here is example code
06:24 < plato> http://codepad.org/3dH7qXYt
06:27 < mscdex> ugh all this browser-side only stuff in npm
06:28 < wookiehangover> http://coldhead.github.com/kaleidos/?src=http://i.gif.ly/275f99db.gif&n=9
06:28 < SoulRaven> plato: but i don't want to write a element to buffer, i just want to extract elements from buffer
06:29  * MitchW bashes his head against the wall
06:29 < plato> you cannot! at least, a buffer can not change in length!
06:30 < plato> make two new buffers as appropriate!
06:30 < MitchW> 2 days of pure frustration not being able to debug/edit node easily makes me wanna cry... cloud9 is broken, vi over ssh w/ 200ms latency is painful, and node-inspector is worse...
06:30 < SoulRaven> but if i have a plain text with the buffer values, and "splice" from there, and after that create a new buffer ?
06:31 < plato> MitchW: you can't edit/test locally?
06:31 < mscdex> wookiehangover: http://coldhead.github.com/kaleidos/?src=http://i27.tinypic.com/2yzn2u8.jpg
06:31 < SoulRaven> or an array
06:32 < MitchW> plato: possibly... not sure if all my components work on windows
06:32 < wookiehangover> mscdex: https://dl.dropbox.com/u/4431744/papa_crock.jpg
06:32 < plato> SoulRaven: start with your original buffer. figure out what two buffers you want to end up with. use buffer.copy, buffer.write or buffer[index] as appropriate. i really don't know what else to tell you
06:33 < mscdex> wookiehangover: there should probably be a question mark at the end
06:33 < MitchW> doesn't quite change the fact I have to deal w/ node-inspector - but I guess I can continue to deal w/ it
06:34 < wookiehangover> mscdex: or maybe a semicolon, but you never know
06:34 < plato> MitchW: use virtualbox to make a linux vm
06:34 < plato> and edit in there
06:34 < plato> that's how i roll -_-
06:35 < MitchW> well, there's no reason for me not to just continue to debug on my linux server if I was gonna do that :P
06:35 < plato> well, that 200ms latency ;)
06:35 < plato> and net connection drops
06:36 < MitchW> yeah that's my live production server, i have a few linux boxes in my own home I'm also using - without cloud9 though it's an epic pain >.<
06:37 < MitchW> *shrugs* don't mind me, just venting before I throw my desk across the room ;)
06:37 < MitchW> <3 plato
06:37 < purr> Let it be known that MitchW hearts plato.
06:37 < HarvesterOfBeer> Anybody know if there is a sqlite engine for flatiron resourceful out there?
06:37 < MitchW> I hearts everyone in here
06:37 < plato> (╯°□°）╯︵ ┻━┻
06:38 < wookiehangover> http://b.gif.ly/6e9fabcf.gif
06:38 < plato> nite nite. good luck MitchW & SoulRaven 
06:39 < MitchW> 'night
06:39 < MitchW> hmmm, interesting - looking like my server may actually run on windows...
06:41 < mscdex> lol
06:42 < SoulRaven> night
06:54 < MitchW> well, almost runs on windows - mongo/mongoose die horribly
06:55 < SomeoneWeird> no surprise there
07:28 < wookiehangover> clear
07:28 < wookiehangover> fuuuuuu
07:28 < terinjokes> console.log(undefined)
07:58 < Sven_vB> re
07:59 < Sven_vB> i wonder why this channel attracts so many people who don't like JS.
08:07 < ljharb> Sven_vB: what are you talking about? JS is awesome
08:09 <@Nexxy> ljharb, http://www.youtube.com/watch?v=pWdd6_ZxX8c
08:11 < Sven_vB> ljharb, i was talking about last night's evangelists visiting
08:11 < Sven_vB> the guys with Dart and Apache mod_nodejs
08:11 < ljharb> Nexxy: nice
08:11 < ljharb> Sven_vB: lol, well it takes all kinds.
08:12 <@Nexxy> mod_nodejs would be great
08:12 <@Nexxy> just think of all the exploitable stuff people would come up with
08:13 < Sven_vB> somehow i got the idea he might dislike the idea of needing a shell to run that extra webserver, as opposed to all those "free" (ad-paid) PHP+MySQL hosters
08:15 < Sven_vB> yeah and mod_nodejs should copy PHP in dumping all the file except for the JS inside the <server> Tags, allow document.write in there, and the default magic output defusing should be addslashes, not xmlspecialchars.
08:15 < Sven_vB> well, he might just wanted to have used LiveWire instead of Apache
08:17 < terinjokes> Sven_vB: and let's switch up some of the argument orders for good measure
08:18 < Sven_vB> which arguments?
08:20 < Chuwiey> Hello all, question: Is there any reason to have a node.js server along with a php stack - to serve a single website? other than to keep from having to refactor the php code? aaand is it possible to have a php loaded website, and then have the content updated via client side javascript polling the node.js server?
08:21 < Sven_vB> also, we need a lot of file open wrapper magic, so that once they forget to defuse filenames, we don't only have file system access but also various network protocols, server internals and request content. so if there's a length limit in the template URL, you can just specify request://post/more_text in the URL and deliver the huge block of XSS in some POST data field
08:22 < Sven_vB> Chuwiey, you can make a reverse proxy that delivers your PHP legacy content via the old way and the NodeJS stuff via nodejs.
08:24 < Sven_vB> however, since i heard the talk about server side DOM manipulation, I don't see any need for PHP anymore
08:25 < Sven_vB> what exactly do you need PHP for?
08:25 < Chuwiey> Sven_vB: hmm.... :-/ well.. everything is written on it already :)
08:25 < Chuwiey> so... in order to keep from refactoring all the code
08:26 < Sven_vB> and you just want to add some new cool stuff that uses Node.js?
08:26 < Sven_vB> use a reverse proxy. if you have apache running, that would be mod_proxy.
08:27 < Chuwiey> Sven_vB: actually, I need Node.js for two specific things atm... a queue manager (which shouldn't be a problem, because that can be separate from what happens with the client) and I need for a certain section in my site (a list) to be real-time updated
08:27 < terinjokes> Sven_vB: or they could be slowly refactoring parts until they have the whole system refactored into Node?
08:29 < Sven_vB> terinjokes, yeah right, i'm too pesimistic about refactoring stuff once a sufficient work-around is in place.
08:30 < Chuwiey> :)
08:32 < Sven_vB> however, you can still do that. once everything is on nodejs, you just dismiss the reverse proxy and move your nodejs server to port 80
08:33 < Sven_vB> up until then, let the proxy redirect requests for /qmgr/* and /list/* to whatever your nodejs webserver port is
08:33 < Sven_vB> -redirect +forward
08:34 < Chuwiey> Sven_vB: thx 
08:35 < Sven_vB> yw
08:47 < sinclair> hey guys, what does everyone prefer for persistent storage in node? mongodb? couch? 
08:50 < Sven_vB> since i need deep queries, MongoDB
08:50 < Sven_vB> esp. deep updates
08:50 < sinclair> Sven_vB: not entirely sure that a deep query means in mongodb
08:50 < sinclair> (or a deep update for that matter)
08:52 < shanse> sounds like he needs a relational database :P
08:52 < sinclair> i am looking at Redis
08:53 < sinclair> if not redis, then SQL Server
09:01 < Sven_vB> with deep query i mean access to fragments of a document, as opposed to CouchDB where you can only replace the whole document
09:02 < Sven_vB> so if i have a DB of products for a shop, i can add an image to the photos array of a product without touching anything around it
09:03 < sinclair> Sven_vB: i c
09:04 < sinclair> well, writing code in node is ... hard
09:04 < Sven_vB> did you write JS before much?
09:04 < sinclair> Sven_vB: yes
09:05 < sinclair> quite a lot actually, for like 10 years
09:05 < Sven_vB> so is NodeJS harder than normal JS?
09:05 < sinclair> well, i have a hard time imagining how im going to scale the application code out to a large codebase. 
09:06 < sinclair> how is anyone doing anything beyond trivial in node?
09:06 < Sven_vB> you could try modules
09:06 < sinclair> Sven_vB: as in, seperate js files that i load in with require?
09:07 < ljharb> sinclair: why do you need a large codebase? build a SOA instead 
09:07 < sinclair> ljharb: i am trying to
09:07 < Sven_vB> yep. one class per file, and large classes in their own subdirectory with their subclasses
09:07 < Sven_vB> and yes SOA is preferrable
09:07 < sinclair> well, im trying to throw together a small CMS on node
09:08 < ljharb> classes?
09:08 < ljharb> javascript has no classes. it has prototypical inheritance.
09:08 < Sven_vB> yeah i mean constructors of course ;)
09:08 < ljharb> you can make class-like constructs with it, but using the word "class" causes confusion.
09:08 < sinclair> i am aware of this, that isn't my problem, its all the damn callback stuff
09:09 < Sven_vB> sinclair,  you could take inspiration from existing CMSs and their structure
09:09 < sinclair> Sven_vB: in other languages?
09:09 < Sven_vB> and about the callbacks, you can cheat around them a bit so that your code still looks sequential even if it isn't
09:09 < Raynos> callbacks are easy
09:09 < ljharb> callbacks are easy
09:09 < Raynos> just use streams instead
09:09 < Raynos> problem solved.
09:09 < ljharb> also, you can use promises. or streams.
09:10 < Sven_vB> no NodeJS CMSs. my npm is very slow atm but i'm sure there are plenty
09:10 < Sven_vB> where can i lean about this kind of streams?
09:10 < sinclair> Raynos, ljharb yes, callbacks are easy, but so was GOTO, both lead to spaghetti 
09:11 < ljharb> callbacks don't lead to spaghetti.
09:11 < ljharb> nesting a bunch of anonymous functions might
09:11 < ljharb> but thats why thats a silly practice
09:11 < Raynos> Sven_vB: https://gist.github.com/3791742 https://github.com/substack/stream-handbook
09:11 < ljharb> name your functions. use promises. use streams.
09:11 < Sven_vB> just avoid to *nest* your callbacks deeply.
09:11 < Raynos> sinclair: being a noob leads to spaghetti
09:11 < Sven_vB> Raynos, thy
09:12 < sinclair> Raynos: i don't classify myself as a n00b, do you?
09:12 < Raynos> if you can't tame callbacks you have a lot to learn
09:12 < ljharb> sinclair: if you even think that callbacks lead to spaghetti, please go learn about promises.
09:13 < Raynos> promises are nice but lack composability / compatibility
09:13 < sinclair> Raynos: ^
09:13 < Raynos> you have to turn all of node core into promises to get the advantage
09:13 < AAA_awright> Callbacks don't have to lead to waterfall code
09:13 < ljharb> Raynos: thats not true. each promise you add can clean up a lot of code.
09:13 < ljharb> but either way, there's tons of methods to avoid "spaghetti"
09:14 < AAA_awright> What kind of promises are we talking?
09:14 < ljharb> https://github.com/kriszyp/node-promise
09:14 < Raynos> As for clean code, just use streams ( https://gist.github.com/eaa2c76088902d42fb1d )
09:14 < Raynos> trivially flatten out any complex set of operations
09:14 < ljharb> AAA_awright: actually https://npmjs.org/package/promises
09:15 < AAA_awright> Github is preferable
09:15 < ljharb> AAA_awright: its an npm module. it has a github repo - they all do.
09:15 < ljharb> Raynos: nothing in that code, including the comma-first stuff, is simple
09:15 < AAA_awright> npm package?
09:15 < Sven_vB> ok so by streams you meant just the normal streams. :) how do they relate to program structure and avoiding spaghetti?
09:15 < Raynos> ljharb: I didn't say it was simple.
09:15 < AAA_awright> So slightly different than the initial Node.js promises
09:16 < Benvie> Raynos: https://github.com/Benvie/harmony-collections/blob/master/weakmap.js
09:16 < ljharb> AAA_awright: yes, they removed those. thats not what i meant.
09:16 < Sven_vB> ok 3rd link seems to be the structure related streams
09:16 < Raynos> Benvie: nice!
09:17 < Benvie> mostly cut down to the necessaries
09:17 < Raynos> Benvie: put it on npm.
09:17 < sinclair> http://nodejs.org/api/stream.html <-- typical node implementation?
09:17 < Benvie> yeah I will make a separate repo
09:17 < AAA_awright> http://callbackhell.com/
09:17 < Raynos> https://github.com/Benvie/harmony-collections/blob/master/weakmap.js#L36https://github.com/Benvie/harmony-collections/blob/master/weakmap.js#L36
09:17 < Raynos> please dont do that. use better variable names
09:18 < Benvie> which ones?
09:18 < Benvie> o, k, v?
09:19 < Raynos> sinclair: yes
09:19 < Raynos> Benvie: yes those
09:20 < Benvie> yeah I usually do, I just copy pastas it from an old scratch I had. defineProperty without the descriptor
09:22 < Sven_vB> btw about modules, is it a proper way to replace the entire exports (module.exports = {...}) instead of just adding entries?
09:23 < nathan7> Generally I define my crap and then add it to exports
09:23 < nathan7> Sometimes I want to export a single function, then I stick it in module.exports
09:23 < Raynos> I use module.exports = singleValue
09:23 < substack> assigning a single function into module.exports is usually better because it's much more likely that you're doing exactly one thing
09:23 < Raynos> > 50% of my modules export a single function
09:25 < Sven_vB> i thought the same. so is there a special reason why the EventEmitter is exported as ee = require('events').EventEmitter instead of just ee = require('events')?
09:25 < Raynos> legacy
09:25 < nathan7> Fixable legacy!
09:25 < nathan7> Functions can have properties, it could export EventEmitter and have itself as a property too
09:25 < Sven_vB> do old versions of Node or CommonJS not support replacing module.exports?
09:26 < nathan7> It is not part of CommonJS
09:26 < Raynos> is it just me
09:26 < Raynos> or is nodejs.org gone
09:26 < nathan7> Just you
09:26 < substack> module.exports basically works in everything running around doing commonjs that is a practical piece of software
09:26 < Raynos> maybe someone messed with my DNS
09:26 < Sven_vB> nathan7,  check DNS as in topic
09:26 < substack> but anyways just ignore commonjs
09:26 < Sven_vB> sorry wrong adressed
09:26 < darthdeus> guys, do any of you have any experience with testing socket.io or websocket apps? I've been trying to find some articles or anything about it ... and there's like nothing
09:27 < substack> anyhow node isn't even listed on the commonjs implementations page
09:28 < substack> because it doesn't conform to commonjs, it just does whatever because commonjs is unimportant
09:28 < Sven_vB> hehe :) ok, then about glue to make browsers understand require(), do you know such glues and do they accept replacing module.exports?
09:29 < Munchor> Is there a way to access document.title (browser page title) with node.js?
09:29 < Munchor> Hi :)
09:29 < Sven_vB> Munchor, domjs
09:30 < substack> Sven_vB: http://github.com/substack/node-browserify
09:30 < substack> Munchor: node doesn't run in the browser
09:30 < substack> it's just for servers
09:31 < Munchor> Exactly.
09:31 < nathan7> Browserify is still among the most awesome pieces of software I use
09:31 < Munchor> That's actually a good point
09:31 < AAA_awright> Sven_vB: It doesn't hurt to assign to module.exports, but make sure you're never going to want to add any additional functions to that module, because while you can assign properties to functions, it's awkward
09:31 < Munchor> If I need to access document.title, I'm doing it wrong, I should do it on client-side.
09:31 < AAA_awright> Sven_vB: And you probably do want to expose a lot of functions that you use. I perstistently wish that Jade would expose the HTML escape function it uses, for instance.
09:31 < nathan7> Well, if you want to fetch a webpage somewhere out there on the internet and get its title, that might be a serverside task
09:31 < substack> Munchor: what are you trying to do?
09:32 < Raynos> assigning properites to functions
09:32 < Sven_vB> AAA_awright, i'd only replace it with a constructor, and only if it's the top-level constructor of a class-like structure in that file.
09:32 < Raynos> is not akward
09:32 < Munchor> substack, trying to have multiple rooms for a simple game and getting the room name from <title>
09:32 < nathan7> AAA_awright: I think that should be in a separate module
09:32 < nathan7> Munchor: err
09:32 < nathan7> Munchor: don't do that
09:32 < nathan7> Munchor: You're coupling presentation to your internal data structures strongly
09:33 < AAA_awright> Raynos: It implies some association with the function you're assigning to that you my not want
09:33 < nathan7> Munchor: What if you want to have, say, multiple tabs in the page, one for each room?
09:33 < AAA_awright> For instance, I assign data, constants, and stuff to my functions
09:33 < nathan7> Munchor: or want to add a postfix 'room1 - Munchorgame'
09:34 < nathan7> Munchor: You don't want to couple stuff strongly to its representation
09:34 < AAA_awright> nathan7: Sometimes it doesn't really make much sense... it's rather expensive to write a new package just to create a new module, and unfortunately require('package/submodule') isn't portable
09:34 < Raynos> why isn't it portable?
09:35 < nathan7> AAA_awright: ..bullshit
09:35 < nathan7> AAA_awright: Look at the modularity of substack's stuff
09:35 < Raynos> and multiple files in a package is a sign that it does too much
09:35 < nathan7> AAA_awright: Every piece of functionality that you might want to have from his stuff
09:35 < nathan7> AAA_awright: is its own module
09:35 < Raynos> substack: you need to win the race! TJ is beating you
09:36 < AAA_awright> Raynos: Because if your library is in /lib/index.js, require('package/submodule'); ends up loading /submodule.js from your package
09:36 < substack> Raynos: fine by me
09:36 < krisu> hi I have an error when I'm trying upgrade node to 0.8.x: ImportError: No module named json
09:37 < nathan7> AAA_awright: require("./lib/meep.js")
09:37 < substack> Raynos: there is far less low-hanging fruit now than a year ago
09:37 < AAA_awright> nathan7: specifies a path relative to your current module
09:37 < Raynos> AAA_awright: That's your own fault for being an idiot and putting your library in lib folder
09:37 < Raynos> if you want to load lib/submodule then do require("package/lib/submodule")
09:38 < ljharb> AAA_awright: thats why you use npm modules.
09:38 < Raynos> substack: I disagree. I still have plenty of things to write and plenty of momentum
09:38 < ljharb> if you don't use npm for modules in node, youre gonna have a bad time
09:39 < AAA_awright> Raynos: It's a bit more than I can explain in IRC, as brilliant as require() is, it breaks module-package semantics: http://magnode.org/nodejs-design-demantics
09:39 < Raynos> substack: there is a ton of low hanging fruit in browser modules
09:39 < AAA_awright> That part of it
09:39 < AAA_awright> ljharb: npm doesn't fix any of that! It makes it WORSE!
09:39 < substack> Raynos: it's not yet pleasant enough to write browser modules
09:39 < ljharb> not according to any of the other node devs i've talked to
09:39 < ljharb> but ok
09:39 < Raynos> substack: why not?
09:39 < Raynos> AAA_awright: o.o
09:39 < nathan7> hmm
09:40 < substack> Raynos: hard to test, packaging assets isn't quite figured out to my liking yet
09:40 < AAA_awright> And I'm not arguing against modularization, precicely the opposite I'm arguing why you *should* expose all your logical subsections as functions
09:40 < ljharb> substack: what do you think of bower?
09:40 < Raynos> substack: what do you mean hard to test? You wrote an entire testing eco system for it.
09:40 < Raynos> As for packaging assets, packaging html is easy.
09:40 < Raynos> Packaging CSS is a nightmare because CSS is global and we have to deal with it
09:41 < nathan7> What's wrong with yarnify?
09:41 < nathan7> I mean, as far as this can be done right
09:41 < Raynos> yarnify is a leaky abstraction
09:41 < nathan7> hm
09:41 < nathan7> I can't think of a better way, tbh
09:41 < Raynos> the better way is the old way.
09:41 < krisu> Guys I'm sorry to interrupt your conversation, any idea about my error during node upgrade: ImportError: No module named json ?
09:41 < Raynos> global CSS
09:42 < Chuwiey> Sven_vB: Have a suggestion for a good framework?
09:42 < ljharb> krisu why do you need to require in a module named json? JSON.parse and JSON.stringify are always available
09:42 < Raynos> Chuwiey: none.
09:43 < Chuwiey> Raynos: so, just use the packages i need?
09:43 < Sven_vB> Chuwiey, framework for what?
09:43 < Raynos> exactly
09:43 < Chuwiey> Sven_vB: nm ^ (raynos)
09:43 < Chuwiey> thx nonetheless
09:44 < krisu> ljharb I haven't set this dependency, this error appears automatically when I try to upgrade my node 
09:44  * Sven_vB lost track of the concurrent discussion threads
09:44 < nathan7> Raynos: Why?
09:44 < nathan7> Raynos: Why global CSS?
09:45 < nathan7> Raynos: I can't package small reusable modules with global CSS easily
09:45 < krisu> maybe this will help:
09:45 < krisu> http://pastebin.com/N6gcjQbd
09:45 < nathan7> Raynos: unless I start adding unique IDs in front of my classes/IDs
09:45 < nathan7> Raynos: and.. basically do what yarnify does
09:45 < ljharb> krisu: thats a python error. try upgrading your python.
09:45 < ljharb> krisu: you should have at least 2.6 i think
09:45 < Raynos> nathan7: because CSS has no clean way to do modularization
09:45 < krisu> ok, will try, thx
09:45 < Raynos> You do it the old fashioned way.
09:45 < Raynos> Namespaces
09:45 < ljharb> krisu: alternatively, install from source instead of using a python install script
09:46 < nathan7> Raynos: yes
09:46 < nathan7> Raynos: Namespaces?
09:46 < Raynos> jquery-ui-widget-thing
09:46 < Raynos> is a namespace
09:46 < Raynos> .component-calendar
09:46 < Raynos> is a namespace
09:47 < nathan7> Yes, and yarnify does that for you
09:47 < nathan7> letting you keep your module DRY
09:48 < Raynos> no it doesnt
09:48 < Raynos> yarnify adds random global junk
09:48 < Raynos> which means you cannot overwrite the styles
09:48 < Raynos> because you dont know the magic prefix
09:48 < Raynos> to select those elements
09:48 < Raynos> yarnify also injects wrapper divs and has other design flaws
09:49 < nathan7> Yarnify probably should let you set the prefix
09:49 < sinclair> http://nodejs.org/api/index.html <-- is it me or is this sites connection being reset?
09:49 < mauritslamers> question: I want to make the installation of node-canvas easier, by either moving its dependencies as binaries in the package, or by including the build of those deps in the build itself
09:49 < mauritslamers> anyone an idea how to do that?
09:50 < nathan7> sinclair: See topic
09:50 < sinclair> ah right
09:50 < sinclair> cheers
09:50 < nathan7> C=
09:50 < nathan7> Raynos: I don't particularly see an issue with wrapper divs
09:52 < Ralt> Raynos: :D
09:52 < Raynos> oh hi
09:52 < mauritslamers> I have managed by using install_name_tool creatively to make something work on my macbook (snow leopard) but on my other machine (Lion) it doesn't work, and I don't get much debugging info from it
09:52 < nathan7> Raynos: What are the other design flaws?
09:52 < Ralt> hi :p
09:53 < Raynos> nathan7: compile step, partially monkey patching the DOM.
09:53 < Raynos> no way to opt out of the prefix
09:53 < Raynos> etc etc.
09:53 < nathan7> mh-hrm
09:53 < Raynos> It's just not worth it
09:54 < Ralt> http://blog.izs.me/post/27987129912/tj-holowaychuk-components
09:54 < Ralt> just use that
09:54 < Ralt> and namespace to the component
09:55 < Ralt> this way you have organized css/w/e and you don't go whine about it in irc
09:55 < Raynos> ~_~
09:55 < Raynos> that doesnt solve the problem at all. That's global CSS
09:56 < Ralt> namespaces to the component
09:56 < Ralt> namespaced*
09:56 < Ralt> and wrong link btw, that's just the answer to this one: http://tjholowaychuk.com/post/27984551477/components
09:57 < nathan7> Ralt: Pretty sure everyone here has read those
09:58 < Raynos> What you really want
09:58 < Raynos> is a tool to take many small CSS files
09:58 < Raynos> and combine them
09:58 < Benvie> https://github.com/Benvie/WeakMap
09:58 < Raynos> furthermore
09:58 < blakmatrix> :( christmas is so far away
09:58 < Raynos> you want each CSS file to claim a name and garantuee uniqueness of that name
09:58 < Raynos> you want an npm for CSS
10:00 < blakmatrix> damn you doctor
10:02 < Sven_vB> oh wow, can't believe the npm error i'm chasing since yesterday seems to actually just be the DNS failure in disguise
10:09 < Sven_vB> npm should really have told me more visibly that there was an HTTP error
10:09 < Sven_vB> and it should tell me if it has now worked this time :/
10:09 < Sven_vB> oh i think i found its way of telling me that
10:10 < Sven_vB> at least the install success
10:36 < sveisvei> stream nabb Q: https://gist.github.com/3806414, why dont i get an 'end' event when I use pipe _and_ data/end events on a readableStream? :)
10:44 < sveisvei> nvm, found it : { end: false }
10:49 < Sven_vB> does someone have a backup of the crockford facts?
10:50 < Sven_vB> the page seems overtaken by some chinese, and wayback machine doesn't know it
10:53 < nathan7> Sven_vB: o_O
10:58 < Trical> does Node.js work with python 3.3 (released 29 sept) ?
11:00 < SoulRaven> please help me, http://bin.cakephp.org/view/1011419933
11:00 < SoulRaven> i don't knwo way i can't prototypethis DataLoad method
11:01 < SoulRaven> what i am doing wrong?
11:02 < SoulRaven> ?
11:03 < Sven_vB> SoulRaven, you should try and instantiate it
11:04 < SoulRaven> dataLoad = new Payload.DataLoad(data),
11:05 < Sven_vB> where does that happen? can't see it in the paste
11:05 < SoulRaven> http://bin.cakephp.org/pastes/edit/78269
11:07 < RLa> Trical, what has node to do with python?
11:07 < Trical> I'm trying the now.js install
11:07 < Trical> if (semver.gte(version, '2.5.0') && semver.lt(version, '3.0.0')) {
11:07 < Trical>         getNodeDir()
11:07 < Trical>       } else {
11:07 < Trical>         failPythonVersion(version)
11:08 < RLa> would that work on 3.x series at all?
11:09 < Trical> I don't know
11:09 < Trical> I havze zero experience with python or node.js
11:09 < Trical> so I could set the 3.3 I have, or get 3.0
11:11 < Trical> i'll just go with 2.7.3
11:12 < SoulRaven> any ideea?
11:13 < mauritslamers> SoulRaven: how are you initialising this DataLoad?
11:14 < mauritslamers> because if you don't do… var dataLoad = new require('dataload').DataLoad(); or the equivalent, you are trying to access the method on the 'class' and not on the instance
11:17 < mauritslamers> SoulRaven: I have taken on the habit of doing something like module.exports = DataLoad; instead of module.exports.DataLoad = DataLoad; 
11:17 < mauritslamers> that makes the require stuff a bit more clear
11:20 < SoulRaven> this is how i do
11:20 < SoulRaven> http://bin.cakephp.org/view/1011419933
11:21 < SoulRaven> the problem is i don't know how to return a new value to this keywork
11:21 < mauritslamers> SoulRaven: you are missing return this;
11:21 < mauritslamers> at the end of your constructor
11:21 < SoulRaven>  dataLoad = new DataLoad(data) here?
11:22 < mauritslamers> no
11:22 < mauritslamers> your var DataLoad = function()
11:22 < mauritslamers> should have: 'return this;' as last line
11:22 < mauritslamers> otherwise it results undefined
11:22 < SoulRaven> http://bin.cakephp.org/view/1011419933
11:23 < mauritslamers> SoulRaven: two issues: you don't save the data now on the object
11:24 < mauritslamers> and the sliceBytes cannot return anything, because there is no ref to the data you want to put in
11:24 < SoulRaven> and how i save the data back to this
11:25 < SoulRaven> but i have return for sliceBytes
11:25 < mauritslamers> I'll show
11:26 < mauritslamers> SoulRaven: http://bin.cakephp.org/view/1011419933
11:27 < mauritslamers> does that help>
11:28 < mauritslamers> *does that help?
11:29 < SoulRaven> yes, but now i get Object [object Object] has no method 'join' because o try to do dataLoad.join('') because i want to join back the array returned by the object
11:31 < SoulRaven> i have made a new prototype for join, and sems to work now
11:31 < SoulRaven> strange:)
11:34 < mauritslamers> not really
11:34 < mauritslamers> SoulRaven: the kind of thing you are doing is 'creating' an Array
11:34 < mauritslamers> if you want to have all those methods, why not extend Array?
11:35 < mauritslamers> or if you are dealing with binary data, use Buffer :)
11:35 < SoulRaven> buffer has no splice method
11:35 < mauritslamers> then add one :)
11:35 < mauritslamers> Buffer.prototype.slice = function(){
11:35 < mauritslamers> }
11:35 < mauritslamers> etc… :)
11:35 < SoulRaven> i undestand that is not posibile to modify the buffer object
11:35 < SoulRaven> in this case this keywork
11:37 < SoulRaven> what i am trying to do is somethink like splice from arrays in js
11:37 < mauritslamers> SoulRaven: I can easily add a splice method to buffer
11:38 < SoulRaven> to call each time a single method, that extract a number of bytes, return that number of bytes and in the same time modify the this object - number of bytes extracted
11:40 < SoulRaven> mauritslamers: how?
11:43 < SoulRaven> http://bin.cakephp.org/view/1011419933 
11:43 < SoulRaven> is posibile, but now how return a new value back to the constructor?
11:47 < RLa> oh, nodejs.org still down?
11:47 < tuhoojabotti> no?
11:48 < tuhoojabotti> It should be back up, depending on the dns
11:48 < tuhoojabotti> well I still get the wrong site
11:48 < SomeoneWeird> works for me
11:49 < SomeoneWeird> PING nodejs.org (8.12.44.238) 56(84) bytes of data.
11:49 < SomeoneWeird> there ya go
11:49 < mauritslamers> SoulRaven: sorry, had to take care of my daughter for a sec … :)
11:49 < tuhoojabotti> Yeah, DNS cache.
11:50 < SoulRaven> no problem:)
11:50 < tuhoojabotti> slow beast
11:50 < SoulRaven> i will wait
11:50 < mauritslamers> SoulRaven: back now...
11:50 < SoulRaven> ok:)
11:51 < SoulRaven> i have try this.parent= this.slice(8); to return back the object with shifted bytes, but is not working
11:51 < tuhoojabotti> SoulRaven: Still trying to slice buffers?
11:51 < SoulRaven> http://bin.cakephp.org/view/485078508
11:51 < SoulRaven> tuhoojabotti: yes
11:51 < SoulRaven> i manage to slice using arrays
11:52 < tuhoojabotti> Well of course.
11:52 < tuhoojabotti> anyways, I'm off
11:52 < mauritslamers> SoulRaven: there  is already a slice method on buffer
11:52 < SoulRaven> not a splice method, mauritslamers
11:53 < SoulRaven> and a splice method is what i need
11:54 < mauritslamers> SoulRaven: what is this then, according to you? :) http://nodejs.org/api/buffer.html#buffer_buf_slice_start_end
11:54 < SomeoneWeird> write one then :)
11:54 < SoulRaven> look i may bin above, the slice is ok, how to put now the offset slice back to this obj
11:54 < SomeoneWeird> thats slice, not splice mauritslamers 
11:54 < mauritslamers> sorry, my reading … :)
11:56 < mauritslamers> SoulRaven: so, the only way to do it, is to implement it...
11:56 < mauritslamers> you can add splice by adding a function to the Buffer prototype
11:57 < SoulRaven> http://bin.cakephp.org/view/485078508
11:57 < mauritslamers> hmm, why are you doing this.parent?
11:57 < SoulRaven> is a what i am tray right now
11:57 < mauritslamers> the buffer you want to act on => this
11:58 < SoulRaven> i don't know how to repopulate the this with a new buffer
11:58 < mauritslamers> you don't need a new buffer
11:58 < mauritslamers> you just take out the elements that need to be moved, store them separately in a temp buffer, insert the items needed, then write the temp buffer back
11:59 < mauritslamers> splice is destructive, so you only need a temporary buffer inside your splice method
12:01 < SoulRaven> http://bin.cakephp.org/view/485078508 is ok this snippet, but i don't know how to put this.slice(byteLength) back to this
12:01 < SoulRaven> original buffer is: <Buffer 00 00 00 00 00 00 00 ae 08 03 00 00 01 3a 16 60 b3 22 00 0e ed ea f0 1a fb f7 40 02 6d 00 00 07 00 00 00 09 04 45 01 f0 00 50 04 15 04 03 42 27 ca cd 80 ...>
12:01 < SoulRaven> on splice is: <Buffer 00 00 00 00>
12:02 < SoulRaven> and after the splice is: <Buffer 00 00 00 ae 08 03 00 00 01 3a 16 60 b3 22 00 0e ed ea f0 1a fb f7 40 02 6d 00 00 07 00 00 00 09 04 45 01 f0 00 50 04 15 04 03 42 27 ca cd 80 00 ce 07 f8 ...>
12:02 < mauritslamers> SoulRaven: I am writing an example… moment :)
12:02 < SoulRaven> witch is perfect
12:02 < SoulRaven> thx mauritslamers:)
12:05 < mauritslamers> SoulRaven: you cannot use a simple method to put the slice result in, you need to write every single value, but on a different spot
12:05 < mauritslamers> moreover, the slice method is dangerous, because you have a new buffer, which points at the same memory
12:06 < mauritslamers> which is not what you want (most likely :) )
12:06 < SoulRaven> i know, the ideea is to call the same method multiple times, to get splice by splice resoluts
12:06 < mauritslamers> so, you need to have a new buffer in a new memory spot, in which you copy the stuff you need
12:07 < SoulRaven> yes, a new buffer for each splice called
12:08 < SoulRaven> i undestand that and i know, but the problematic is the offset of the main buffer
12:08 < mauritslamers> not sure to be honest whether that is problematic… 
12:09 < SoulRaven> @isaacs toold be last night, that is imposibile to return a new value the the main buffer object
12:10 < mauritslamers> SoulRaven: the thing is that splice is destructive, so the splice action actively rewrites the current buffer
12:11 < SoulRaven> there is not problem if rewrite the current buffer, because i don't care, i just want to read the values from the buffer
12:11 < SoulRaven> because if i manage to read the values, then the next opration si to put the values in DB
12:11 < mauritslamers> it is, if you want to have a proper .splice :) 
12:20 < mauritslamers> SoulRaven: there is only one issue with Buffer#splice
12:20 < mauritslamers> you cannot alter the length of a buffer...
12:21 < mauritslamers> so, while the content can be rewritten, you can change the content, but not add stuff, only replace
12:22 < SoulRaven> of the initial buffer, no problem
12:22 < mauritslamers> so, what my suggestion would be is to do the following: 
12:22 < mauritslamers> have splice return two things, for example as an object
12:22 < mauritslamers> that is: the modified buffer, with new elements in, and old elements out
12:22 < SomeoneWeird> just create a new buffer with the contents you need
12:22 < mauritslamers> and a second buffer with the elements you took out
12:23 < mauritslamers> so an object is returned instead of a single item
12:23 < SoulRaven> i undestand
12:23 < mauritslamers> it is not conform the JS specification of splice, but it does do what you want
12:23 < mauritslamers> you can then from the return value of this function set your variable to the new modified buffer
12:24 < SoulRaven> i undestand, and link the call from one to another
12:25 < SoulRaven> test1 = buffer.splice(4); test1.oldVal.splice(4); test2.oldVal.splice(1);
12:25 < SoulRaven> i undestand
12:26 < SoulRaven> http://bin.cakephp.org/view/485078508
12:26 < SoulRaven> somethink like this ?
12:28 < mauritslamers> point is that splice can also add stuff
12:28 < SoulRaven> i know, but personaly in this project is not intresting:)
12:29 < mauritslamers> ok, in that case, what are you trying to achieve with splice?
12:30 < mauritslamers> why not just use an index and read from the buffer?
12:30 < SoulRaven> to remove bytes from a buffer, on each call i made, and have a single parameter, that parameter to represent how many bytes i want to return from that call
12:31 < SomeoneWeird> heh
12:31 < SoulRaven> because index and read, don't rewrite the original buffer with the offset of the bytes that i allready return in the call
12:32 < SoulRaven> data.splice(4) return first 4 bytes, after data data.splice(3) return the next 3 bytes from the data
12:33 < mauritslamers> ok...
12:33 < mauritslamers> in that case, create a object wrapper around a buffer, and use an inner index
12:33 < SoulRaven> so each time when i call, the index for start will be 0 and end will be the number of bytes that i want to return
12:34 < mauritslamers> should the result be a buffer?
12:34 < SoulRaven> yes
12:35 < SoulRaven> because sometimes i nead to use readInt
12:35 < mauritslamers> SoulRaven: http://bin.cakephp.org/view/485078508
12:35 < mauritslamers> something like this?
12:36 < mauritslamers> of course there are some issues (such as no checks on index size)
12:37 < mauritslamers> but it sort of should do what you want...
12:37 < mauritslamers> anyone experience with npm packages that need building?
12:38 < mauritslamers> I am trying to create a hassle-free installation of node-canvas, but that requires either building or including its deps in binary… and I am not sure how to do that
12:38 < nathan7> mauritslamers: including binary deps is silly
12:39 < mauritslamers> nathan7: why?
12:39 < nathan7> It means it might work sometimes
12:39 < nathan7> But really
12:39 < mauritslamers> hehe, I already found out that the hard way :)
12:39 < nathan7> I have ARM machines, I have machines that don't run Linux
12:39 < mauritslamers> the main issue with node-canvas is that it is not a hassle free install
12:40 < nathan7> use node-gyp, build deps when they're installed
12:40 < mauritslamers> in the sense that the end user needs to almost manually compile libpng, pixman and cairo
12:41 < nathan7> err
12:41 < nathan7> why
12:41 < mauritslamers> because that is what node-canvas depends on
12:41 < nathan7> any distro has libpng packages
12:41 < nathan7> I install libpng-dev and off I go
12:41 < mauritslamers> not necessarily the right version
12:41 < nathan7> well, yes, technically it's not libpng but libpng1.2 or something
12:42 < mauritslamers> I am trying to create a package in which npm install [package] is the only thing that I want the user to do
12:42 < nathan7> that's silly, imho
12:42 < nathan7> and a generally terrible idea
12:42 < nathan7> there's a reason node doesn't come as an npm package q=
12:43 < mauritslamers> and when I look at https://github.com/LearnBoost/node-canvas, the user needs to manually (or through homebrew) install cairo and pixman
12:43 < nathan7> or through apt or pacman or whatever their distro provides
12:43 < nathan7> Either way, it is not your problem.
12:44 < mauritslamers> nathan7: we are talking about an development environment for web devs
12:44 < nathan7> If you can install node
12:44 < nathan7> Then you can install cairo
12:44 < mauritslamers> that is a .pkg on a mac
12:44 < mauritslamers> so, that is hassle-free enough
12:44 < nathan7> You can make a .pkg of -canvas
12:45 < mauritslamers> why would I if npm is such a nice packager :)
12:45 < nathan7> I don't do npm install -g - I make an Arch .pkg out of it, so it integrates normally with other packages in pacman
12:45 < mauritslamers> node-canvas is a dep of my environment that I want to install :)
12:46 < nathan7> You can bundle deps, this of course only works for binary deps in a very limited bunch of circumstances
12:47 < mauritslamers> so, for example, would it be possible to rig the binding.gyp in such a way that it first configures and compiles the deps before trying to compile node-canvas?
12:47 < mauritslamers> I have been trying to search on how to kickstart a normal ./configure with node-gyp but I couldn't find much
12:50 < SoulRaven> mauritslamers: is not working, is returning only the number that i have insterted in splice
12:51 < SoulRaven> mauritslamers: http://bin.cakephp.org/view/485078508
12:51 < SoulRaven> http://bin.cakephp.org/view/485078508
12:55 < mauritslamers> SoulRaven: there are two returns in the splice
12:55 < SoulRaven> i have removed the first
12:56 < mauritslamers> http://bin.cakephp.org/view/485078508
12:57 < mauritslamers> that should work afaics
12:58 < shinaku_> Am I right in thinking that a collection defined in mongoose is the same as a collection in mongo?
12:59 < shinaku_> My app keeps returning 0 records
13:01 < SoulRaven> mauritslamers: not fine :), returns me wrong values :( : http://bin.cakephp.org/view/485078508
13:02 < mauritslamers> SoulRaven: ah, stupid mistake… line 9 of the pastie, replace num by this.index+num
13:03 < SoulRaven> this.buffer.copy(ret, 0, this.index, this.index+num);
13:03 < mauritslamers> that one...
13:03 < mauritslamers> :)
13:04 < SoulRaven> great, is working now:)
13:05 < mauritslamers> SoulRaven: please do not forget to check for the index size
13:05 < mauritslamers> because if the index + num exceeds the size of the buffer, you will get errors :)
13:05 < SoulRaven> of the initial buffer right?
13:06 < mauritslamers> in the slice method, something like if(index>=this.buffer.length) return null;
13:06 < SoulRaven> but this can happen only if have reach on the last element splice'd and try to read after that
13:06 < Trical> Topic for #nowjs is: NowJS has been deprecated. Check out "NowJS 2.0" -- Bridge https://www.getbridge.com
13:06 < Trical> why is this not on the nowjs website :o
13:06 < mauritslamers> SoulRaven: true, but the app shouldn't crash  :)
13:07 < SoulRaven> i will put now this verification to see if is working
13:08 < SoulRaven> http://bin.cakephp.org/view/485078508
13:08 < mauritslamers> looks good...
13:09 < mauritslamers> you could also (but that depends on what you want) make it circular, so that if index > buffer.length, index = 0
13:09 < mauritslamers> of course this is way too crude, but that would make it to start again at the beginning of the buffer
13:10 < SoulRaven> buffer.js:530    throw new Error('sourceEnd out of bounds');          ^Error: sourceEnd out of bounds
13:10 < SoulRaven> for this.index > this.buffer.length return null
13:11 < mauritslamers> my example had >= :)
13:12 < SoulRaven> same error
13:12 < SoulRaven> http://bin.cakephp.org/view/485078508
13:12 < mauritslamers> SoulRaven: hmm, check the size of the buffer etc… Don't have a ready made answer here :)
13:14 < darthdeu> anyone? https://groups.google.com/forum/?fromgroups=#!searchin/socket_io/testing/socket_io/MPpXrP5N9k8/hCSMX1OtAYEJ
13:36 < wereHamster> is there a way to enumerate all keys or values of a Map ?
13:37 < pachet> Object.keys()
13:37 < wereHamster> of a Map, not an Object
13:37 < AAA_awright> wereHamster: of a Map or an Object?
13:38 < wereHamster> a Map is supposed to have an iterator(?). but I don't see how to use it. Is it not implemented in the v8 version that node uses?
13:38 < thewanderer1> hi. I'm trying to implement something like this with Node.js / dnode: there's a server to which clients connect, and the server should distribute tasks via RPC to the clients
13:39 < AAA_awright> wereHamster: A Map as in the next version of ECMAScript?
13:39 < AAA_awright> It has forEach
13:39 < thewanderer1> so, essentially, I'm reversing the roles in the network sense
13:39 < thewanderer1> as in, clients are TCP clients, but they function as RPC servers
13:39 < SomeoneWeird> like cluster?
13:39 < wereHamster> AAA_awright: TypeError: Object #<Map> has no method 'forEach'
13:39 < SomeoneWeird> thewanderer1, http://nodejs.org/api/cluster.html
13:40 < AAA_awright> wereHamster: What Map is this then
13:40 < thewanderer1> SomeoneWeird: thanks, but I actually need the "threads" to handle different tasks... i.e. code base is the same, but they need to hold data structures and each will process a different data setr
13:41 < wereHamster> AAA_awright: https://gist.github.com/80899556adf1a2179df3
13:41 < wereHamster> AAA_awright: and btw, http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets does not specify a forEach function
13:41 < AAA_awright> wereHamster: You might not be able to. Some Collection types you explicitly cannot, for performance reasons
13:43 < wereHamster> AAA_awright: the wiki page suggests that there is a way. Look at the *items, *keys, *values functions
13:43 < thewanderer1> SomeoneWeird: also, they'll be long-running, so I don't think cluster applies here
13:43 < AAA_awright> wereHamster: If you do need to iterate, you're better off with an Array
13:44 < wereHamster> I guess I'll stick with an Object then
13:45 < AAA_awright> wereHamster: The only reason you'd pick a Map over an Object is you can't store arbritrary keys in an Object
13:45 < BennyLava> lol
13:45 < BennyLava> the only reason
13:47 < AAA_awright> BennyLava: Something besides a "lol" would be prudent
13:48 < AAA_awright> wereHamster: Sets and Maps are supposed to be iterable but it looks like V8 doesn't have that implemented yet.
13:50 < mauritslamers_> question: why does npm auto-build packages with a building.node-gyp when there is nothing in the package.conf that tells it to do so?
13:58 < Cogito_Ergo_Sum> hi fellas
13:58 < SomeoneWeird> ello
14:04 < darthdeu> anyone? https://groups.google.com/forum/?fromgroups=#!searchin/socket_io/testing/socket_io/MPpXrP5N9k8/hCSMX1OtAYEJ
14:54 < pppaul> hey guys
14:54 < pppaul> i have a package.json with devdependancies {mocha:"*",chai:"*"}. it's downloading mocha, but not chai
14:54 < pppaul> :(
15:01 < darthdeu> pppaul: could you show the whole package.json?
15:02 < Franz__> somebody can help with testing one module?
15:05 < pppaul> going to gist
15:06 < pppaul> https://gist.github.com/3807057
15:07 < pppaul> darthdeu
15:09 < darthdeu> that's weird hmm
15:09 < pppaul> i had to install chai and mocha with -g
15:10 < pppaul> :(
15:14 < darthdeu> that's weird
15:14 < darthdeu> are you sure you're installing development dependencies?
15:14 < pppaul> also, i have a readme.md file in my dir, but when i do npm install i get a warning about no readme.md file
15:14 < pppaul> darthdeu i have no idea how to install devdependancies
15:14 < pppaul> i do npm install
15:22 < pppaul> https://gist.github.com/3807057 darthdeu i updated the devdeps. it downloads mocha, but not chai (i removed mocha from the deps too…. ug)
15:23 < pppaul> of fuck, i'm writing to the wrong file
15:23 < pppaul> aaaaaahhhhhh
15:24 < pppaul> things work now
15:25 < darthdeu> :P
15:40 < vekexasia> hello all, can please someone tell me
15:40 < vekexasia> where i can find the client javascript file for socket.io ?
15:40 < thl0> could someone explain the exact definition of duplex, full-duplex streams in node?
15:42 < thl0> I thought duplex is just any readable and writeable stream, but substack mentioned it is similar to a telephone wire (which would mean the downstream could talk back to the upstream instead of data just flowing in one direction)
15:44 < jmar777> vekexasia: https://github.com/LearnBoost/socket.io-client/blob/master/dist/socket.io.js
15:45 < vekexasia> tkz :)
15:45 < darthdeu> anyone who tried testing socket.io apps?
15:46 < pachet> thl0: i mean, you're basically correct
15:46 < pachet> full-duplex is a subset of duplex
15:46 < pachet> basically meaning that both ends can both send and receive at the same time
15:48 < darthdeu> ok i'll be more specific ... is there ANY articles/book/screencasts/documentation AT ALL about testing websocket apps? because i've found virtually nothing ... and if i try to simulate with socket.io-client, i fail with this exact problem https://groups.google.com/forum/?fromgroups=#!searchin/socket_io/testing/socket_io/MPpXrP5N9k8/hCSMX1OtAYEJ
15:54 < thl0> pachet: ok, that clears things up
15:54 < Franz__> http://paste.ubuntu.com/1252036/
15:54 < thl0> pachet: especially since https://github.com/Raynos/duplexer just creates a readable/writable stream (without upstream messaging)
15:54 < Franz__> what is wrong in this code?
15:54 < Franz__> what is wrong in this code? http://paste.ubuntu.com/1252036/
15:54 < Franz__> the user not connect 
15:54 < darthdeu> come on guys ... don't tell me nobody in here ever did a websocket app ... i've been asking for two days without any response
15:54 < Cogito_Ergo_Sum> darthdeu i've tested recently a simple socket.io chat server and itworks fine
15:54 < darthdeu> Cogito_Ergo_Sum: how do you test it?
15:54 < Cogito_Ergo_Sum> well
15:54 < Cogito_Ergo_Sum> i send a simple "PING" packet
15:54 < Cogito_Ergo_Sum> and on receiving that in server, send a simple "PONG"
15:54 < Cogito_Ergo_Sum> reply
15:54 < darthdeu> how's that testing the application? PING/PONG is in websockets protocol
15:54 < pachet> ++ for ping/pong
15:54 < purr> Let it be known that pachet loves for ping/pong.
15:54 < pachet> yes indeed
15:54 < darthdeu> if i use raw socket.io-client, it dies with "handshake error No cookie transfered." ...
15:54 < thl0> pachet: ping/pong would be full duplex - correct?
15:54 < darthdeu> thl0: it's half duplex imho, since the client is only pinging the server, not the other way around
15:54 < Cogito_Ergo_Sum> darthdeu, how do you define exactly "testing the application" ?
15:54 < jetienne> q. is there a good npm module for twitter signing ? something everybody use
15:54 < thl0> pachet: assuming the 'full' indicates that messages are going up and down stream?
15:54 < darthdeu> Cogito_Ergo_Sum: writing automated test suite
15:55 < pachet> thl0: indicates that they have the ability to, but they arent required to
15:55 < vekexasia> jmar777: should i care? I  mean when using socket.io should socket.io node module take care about /socket.io/* urls ?
15:56 < vekexasia> cause everything in socket.io/ gives me a 404
15:56 < pachet> darthdeu: actually it's usually the other way around
15:56 < jmar777> vekexasia: the socket.io module should handle that for you. it's been a long time since i've used it, but when i did the "how to use" guide worked pretty well
15:57 < thl0> pachet: got it, but in a general duplex stream that ability is not guaranteed right?
15:57 < pachet> server pings the client, and its up to the browser to reply with a pong
15:57 < pachet> but browsers can ping the server too
15:57 < Cogito_Ergo_Sum> darthdeu, vekexasia, i have heard that socket.io has problems with the new 0.8.* branch
15:57 < pachet> its just not exposed via any api in the js implementation
15:57 < pachet> that i know of, at least :[
15:57 < vekexasia> jmar777: it does not.... i feel like stupid
15:57 < Cogito_Ergo_Sum> i have tested with 0.6.6
15:58 < Cogito_Ergo_Sum> basically you call a function on("connection")
15:59 < Cogito_Ergo_Sum> and in the on("connection") handling function you set a the new handlers for disconnecting, on receiving data, and so on
16:05 -!- Topic for #Node.js: 8.12.44.238 nodejs.org's DNS is propagating.  Sorry for the inconvenience.  Please go outside and play for a few hours.
16:05 -!- Topic set by isaacs [~isaacs@173-203-97-118.static.cloud-ips.com] [Sat Sep 29 19:07:56 2012]
16:05 [Users #Node.js]
16:05 [@konobi         ] [ Couto         ] [ gorillatron     ] [ Kn|t3          ] [ param           ] [ spudly         ] 
16:05 [@mbalho         ] [ CoverSlide    ] [ Gottox          ] [ kraft          ] [ patspam         ] [ SpX            ] 
16:05 [@Nexxy          ] [ cpg|away      ] [ graeme_f        ] [ kranius        ] [ paulwe          ] [ sqawasmi       ] 
16:05 [@ryah           ] [ crabdude      ] [ gregmore_       ] [ krishna        ] [ pavelz          ] [ squeakytoy     ] 
16:05 [ [[zz]]         ] [ creationix    ] [ Gregor          ] [ krisu          ] [ pct1            ] [ sriley         ] 
16:05 [ \ask           ] [ crewmoss      ] [ gry             ] [ kuja           ] [ pellis          ] [ stalled        ] 
16:05 [ \mSg           ] [ crodas        ] [ gsf             ] [ Kullt          ] [ petschm         ] [ stbuehler      ] 
16:05 [ \stro          ] [ CStumph       ] [ gshipley        ] [ kuplatupsu     ] [ philip__        ] [ stef           ] 
16:05 [ ^robertj       ] [ cxreg         ] [ Guest13963      ] [ L_star         ] [ philips_        ] [ stephank       ] 
16:05 [ __class__      ] [ cyberd0m      ] [ Guest27403      ] [ Lartsa_        ] [ PhilK           ] [ Stoob_         ] 
16:05 [ __main__       ] [ cyberRodent   ] [ Guest73307      ] [ leev           ] [ PhysX           ] [ strax          ] 
16:05 [ __sri          ] [ cyphase       ] [ guybrush        ] [ LeftWing       ] [ pickels         ] [ stride         ] 
16:05 [ _baton_        ] [ D4RK-PH0ENiX  ] [ gwoo            ] [ legind         ] [ pig             ] [ STRML          ] 
16:05 [ _br_           ] [ Daegalus      ] [ haarg           ] [ Lemminkainen_  ] [ Pilate          ] [ stutter        ] 
16:05 [ _mdp           ] [ daleharvey    ] [ hakunin         ] [ leo2007        ] [ plato           ] [ stylus         ] 
16:05 [ _root_         ] [ damartin      ] [ halfhalo        ] [ leonardo       ] [ pokoli          ] [ styol          ] 
16:05 [ _th_n          ] [ danheberden   ] [ hallas          ] [ leptonix       ] [ polyrhythmic    ] [ substack       ] 
16:05 [ _Tristan1      ] [ danielfi_     ] [ happosade       ] [ lillis         ] [ poorman         ] [ substans_      ] 
16:05 [ a2n            ] [ danielfilho   ] [ havocp          ] [ littlebear     ] [ porco           ] [ sugyan         ] 
16:05 [ a_meteorite    ] [ Danielss89    ] [ heatxsink       ] [ ljharb         ] [ postwait        ] [ superjoe       ] 
16:05 [ AAA_awright    ] [ darkc0met     ] [ hellopat_       ] [ llrcombs       ] [ pppaul          ] [ sveisvei       ] 
16:05 [ aalex-sat      ] [ darthdeu      ] [ hemanth         ] [ lmatteis       ] [ pquerna         ] [ Sven_vB        ] 
16:05 [ aandy          ] [ davidbanham   ] [ herbnerder_     ] [ lmjabreu       ] [ prasm           ] [ SvenDowideit   ] 
16:05 [ AaronO_        ] [ dawolf        ] [ heroux_         ] [ loglaunc1      ] [ prettyrobots    ] [ swaj           ] 
16:05 [ aderuwe        ] [ dazld_        ] [ herzi           ] [ lohkey         ] [ Proditor        ] [ Swizec         ] 
16:05 [ adrianF        ] [ dec           ] [ herzogharker    ] [ Lorentz        ] [ prosquare       ] [ t0mbstone8     ] 
16:05 [ adrianlang     ] [ delimax       ] [ hexreel         ] [ lpin           ] [ przemoc         ] [ tahu           ] 
16:05 [ ag4ve          ] [ deltab        ] [ hide            ] [ lrvick         ] [ psino           ] [ tanepiper      ] 
16:05 [ agnat          ] [ Demux         ] [ hilefoks_       ] [ lucabox        ] [ purr            ] [ taquter        ] 
16:05 [ ahbritto_      ] [ denchev_      ] [ hillct          ] [ luite          ] [ pyykkis         ] [ tassmjau       ] 
16:05 [ Aikar          ] [ deoxxa        ] [ hipsterslapfight] [ lushious       ] [ q_              ] [ tchopper       ] 
16:05 [ ajpiano        ] [ Derander      ] [ hlindset        ] [ m0             ] [ qbit            ] [ tchopper_      ] 
16:05 [ akshayms       ] [ dested        ] [ Hochmeister     ] [ Mack           ] [ qFox            ] [ tdmackey       ] 
16:05 [ alek_b_        ] [ devdazed_     ] [ homingli        ] [ magn3ts        ] [ quesada__       ] [ tec27          ] 
16:05 [ alexgordon     ] [ deviantgeek   ] [ Hosh            ] [ mainerror|away ] [ Qzen            ] [ TechnoCat      ] 
16:05 [ alextucker     ] [ dhpe          ] [ huamma          ] [ majek          ] [ radiodario      ] [ teff           ] 
16:05 [ AllStruck      ] [ diminoten     ] [ huangjs         ] [ malcolmva      ] [ radmiraal       ] [ TehShrike1     ] 
16:05 [ alta           ] [ ding          ] [ Hupo            ] [ ManneW         ] [ rafmc           ] [ tellnes        ] 
16:05 [ amacgregor     ] [ djcoin        ] [ i42n            ] [ manuelbieh_    ] [ ralphholzmann   ] [ templaedhel    ] 
16:05 [ Amfy           ] [ dleary        ] [ iaincarsberg    ] [ mape           ] [ Ralt            ] [ terinjokes     ] 
16:05 [ amilm          ] [ dlg           ] [ ianl`_          ] [ marienz        ] [ Rantanen        ] [ terite         ] 
16:05 [ andrehjr       ] [ dmilith       ] [ icebox          ] [ MarkMenard     ] [ raydeo          ] [ tetbert        ] 
16:05 [ anoop          ] [ dmoffett      ] [ idefine         ] [ markwubben     ] [ Raynos          ] [ tg             ] 
16:05 [ ansolas        ] [ dmrz          ] [ igl             ] [ marlun         ] [ rcs             ] [ theCole        ] 
16:05 [ AntelopeSalad_ ] [ dn3s          ] [ iksik           ] [ Martz          ] [ recycle         ] [ thedaywillcome ] 
16:05 [ apa-_          ] [ dnyy          ] [ im0b            ] [ maru_cc___     ] [ reid            ] [ TheFuzzball    ] 
16:05 [ Apage43        ] [ doffm         ] [ imarcusthis     ] [ masch          ] [ rektide         ] [ thejefflarson  ] 
16:05 [ apmacwrk       ] [ dogmatic69    ] [ ImBcmDth        ] [ matt_c         ] [ relix           ] [ TheJesus       ] 
16:05 [ appr           ] [ doki_pen      ] [ inarru_         ] [ mattikus       ] [ remysharp       ] [ TheJH          ] 
16:05 [ Aria           ] [ dommy         ] [ Industrial      ] [ matuzak        ] [ rendar          ] [ TheMoonMaster  ] 
16:05 [ aromasca       ] [ don_jones     ] [ inimino         ] [ mauritslamers  ] [ replore         ] [ TheNumb        ] 
16:05 [ artusrocha     ] [ DonOtreply    ] [ innociv         ] [ mauritslamers__] [ replore_        ] [ therealkoopa   ] 
16:05 [ ashb           ] [ Drager        ] [ ins0mnia        ] [ maxani         ] [ retornam        ] [ thewanderer1   ] 
16:05 [ asherkin       ] [ Draggor       ] [ Internet13      ] [ MaxGaudronBNC  ] [ retrostyle|13   ] [ thl0           ] 
16:05 [ ashnur         ] [ dragon        ] [ intripoon       ] [ Mchl           ] [ rgmarcha_       ] [ thread         ] 
16:05 [ aslant         ] [ drey          ] [ irclogger_com   ] [ mde_           ] [ rhutchison      ] [ threadd        ] 
16:05 [ astropirate    ] [ drodger       ] [ ircretary       ] [ med_           ] [ RichardBronosky ] [ thunderstrike  ] 
16:05 [ athenot        ] [ drostie       ] [ isaacs          ] [ medice         ] [ richardshaw     ] [ tim_smart|away ] 
16:05 [ AustinYun      ] [ DrPizza       ] [ ivan\           ] [ medikoo-bot    ] [ Ricki__         ] [ timeturner     ] 
16:05 [ aut0mata       ] [ DrShoggoth    ] [ ivan`           ] [ mekwall        ] [ rmill           ] [ timkuijsten    ] 
16:05 [ automatado     ] [ drspin        ] [ jackyyll        ] [ mephux         ] [ Robdgreat       ] [ TimTim`        ] 
16:05 [ azend          ] [ drudge        ] [ jaequery_       ] [ MerlinDMC      ] [ robinson_k      ] [ tizzo-afk      ] 
16:05 [ baer           ] [ Druide__      ] [ jalcine         ] [ merrihew       ] [ robmorrissey    ] [ tmike          ] 
16:05 [ balgarath      ] [ dscape        ] [ jamesd_         ] [ mertimor       ] [ rodr1go         ] [ tokuhirom      ] 
16:05 [ balupton       ] [ DTrejo        ] [ jamiel          ] [ meso_          ] [ roger_raymond   ] [ tomaw          ] 
16:05 [ batmania_      ] [ duc1199       ] [ jamiep          ] [ metadaddy      ] [ Rolken          ] [ tomilain1      ] 
16:05 [ baudehlo       ] [ duko          ] [ jammsen         ] [ metellus       ] [ romainhuet      ] [ TomRone        ] 
16:05 [ bburhans       ] [ duncanbeevers ] [ jaredrhine      ] [ methoddk       ] [ rook2pawn       ] [ tomtomaso      ] 
16:05 [ beasty         ] [ dvsharp       ] [ jareiko         ] [ mickhansen     ] [ rounce          ] [ TomWij         ] 
16:05 [ ben_alman      ] [ dz0ny         ] [ jarr0dsz        ] [ mike-d         ] [ rovar           ] [ toothrot       ] 
16:05 [ benarnold      ] [ ec            ] [ jaseemabid      ] [ mikedg_        ] [ rphillips       ] [ topaxi         ] 
16:05 [ Bennit         ] [ eckoit        ] [ jasonkuhrt      ] [ mikegerwitz    ] [ rtgibbons       ] [ trb            ] 
16:05 [ BennyLava      ] [ ed2093        ] [ jasonrm         ] [ mikey_p        ] [ rudolfrck       ] [ trilog         ] 
16:05 [ bentruyman     ] [ edr           ] [ JasonSmith      ] [ MitchW         ] [ RushPL          ] [ triptec        ] 
16:05 [ Benvie         ] [ edsu          ] [ JasonWoof       ] [ mjr84          ] [ russell_h       ] [ trodrigues     ] 
16:05 [ beppu          ] [ EdwardIII     ] [ jayne           ] [ mks            ] [ RussellB28      ] [ truedat101     ] 
16:05 [ beuk           ] [ einaros       ] [ jbpros          ] [ mks_           ] [ russfrank       ] [ ttilley        ] 
16:05 [ bigmeow        ] [ ejnahc        ] [ jcrew           ] [ mmalecki       ] [ ry4nn           ] [ tuhoojabotti   ] 
16:05 [ billy          ] [ elijah-mbp    ] [ jeedey          ] [ moonlite_      ] [ ryanrolds_w     ] [ Twelve-60      ] 
16:05 [ Blorb          ] [ elliottcable  ] [ jefferai        ] [ Mortchek       ] [ ryanRT          ] [ txdv           ] 
16:05 [ bmatusiak      ] [ else-         ] [ jelscript       ] [ Motest031      ] [ ryanseddon      ] [ txdv_          ] 
16:05 [ bnoordhuis     ] [ emilsedgh     ] [ jemparing       ] [ mrkurt         ] [ s5fs            ] [ Typo           ] 
16:05 [ bodisiw        ] [ EnosFeedler   ] [ jesusabdullah   ] [ MrMaksimize    ] [ saapas          ] [ Validatorian   ] 
16:05 [ BombStrike     ] [ entitydi1ital ] [ jgornick        ] [ mrmoneyc       ] [ salazr_         ] [ vekexasia      ] 
16:05 [ Bonuspunkt     ] [ epa_          ] [ JHartig|away    ] [ MrNibbles      ] [ salsamontes     ] [ vervain        ] 
16:05 [ booo           ] [ Epeli         ] [ jibay           ] [ MrNko          ] [ Sam-T           ] [ VesQ           ] 
16:05 [ bowen199       ] [ epokmedia     ] [ jimbot1         ] [ mscdex         ] [ samstefan       ] [ Viehzeug       ] 
16:05 [ bradleymeck    ] [ er1c_         ] [ jimrhoskins     ] [ munro          ] [ Sapr0           ] [ vinc           ] 
16:05 [ brainproxy     ] [ Erriond       ] [ jimt            ] [ mwilson`       ] [ sawjig          ] [ visnup_        ] 
16:05 [ bren2010       ] [ euoia         ] [ jkarsrud        ] [ mynameis       ] [ sawrubh         ] [ voodootikigod  ] 
16:05 [ brennen_       ] [ euphoria      ] [ jkridner_       ] [ N3RG4L         ] [ schredder       ] [ Wa             ] 
16:05 [ brianloveswords] [ eventualbuddha] [ jmar777         ] [ nail_          ] [ scott_gonzalez  ] [ wadey|away     ] 
16:05 [ broofa         ] [ EvRide        ] [ jmonay          ] [ naquad         ] [ scttnlsn        ] [ wang           ] 
16:05 [ brooss         ] [ EweR          ] [ JmZ_            ] [ nathan7        ] [ sdboyer         ] [ wankdanker     ] 
16:05 [ bthesorceror   ] [ Ezku_         ] [ jn              ] [ nd__           ] [ SebastianFlyte  ] [ wao            ] 
16:05 [ bubbles10101   ] [ Fabryz_       ] [ jnylen          ] [ neersighted    ] [ SecretAgent     ] [ wdent          ] 
16:05 [ Bwild          ] [ faulkner      ] [ joaojeronimo    ] [ nfn            ] [ seich-          ] [ wereHamster    ] 
16:05 [ caasiHuang     ] [ fcoury        ] [ JoeDoyle23      ] [ niallo         ] [ Sembianc1       ] [ whitman        ] 
16:05 [ caffine        ] [ fearphage     ] [ joelcox         ] [ nic4m          ] [ sente           ] [ Will|          ] 
16:05 [ cainus         ] [ Fike`znc      ] [ joeytwiddle     ] [ niclone        ] [ serby           ] [ wink_          ] 
16:05 [ callumacrae    ] [ filleokus     ] [ jolo2           ] [ niftylettuce   ] [ serby_          ] [ wizonesolutions] 
16:05 [ calvinfo       ] [ FIQ           ] [ jonaslund       ] [ niggler        ] [ Seven_          ] [ wookiehangover ] 
16:05 [ carolyns       ] [ fivetanley    ] [ jondot`         ] [ Nijikokun      ] [ sfurnival       ] [ wycats         ] 
16:05 [ cbobo          ] [ flagg0204     ] [ Jonghwan        ] [ niko           ] [ sh1ftpgd1       ] [ xandy          ] 
16:05 [ cce            ] [ flexd         ] [ JonnyFunFun[Zzz]] [ NimeshNeema    ] [ shac            ] [ xenol          ] 
16:05 [ cebor          ] [ Fli-c         ] [ joschi          ] [ nkuttler       ] [ Shadda          ] [ xSmurf         ] 
16:05 [ chadskidmore   ] [ foraks        ] [ joshfinnie      ] [ nlf            ] [ shajith         ] [ yakitori       ] 
16:05 [ chakrit        ] [ forzan        ] [ joshie          ] [ nlogax         ] [ shaker          ] [ yankhates      ] 
16:05 [ chapel         ] [ foxbunny      ] [ joukokar        ] [ NodeX          ] [ shanlar         ] [ ybit           ] 
16:05 [ chayin         ] [ framlin       ] [ jpdery          ] [ nodokodo       ] [ shanse          ] [ ybit2          ] 
16:05 [ Cheery         ] [ Franz__       ] [ jpe             ] [ nonamehero     ] [ shinaku_        ] [ yenz           ] 
16:05 [ chiel          ] [ freeformz     ] [ jrdn            ] [ nsm            ] [ sigmamk         ] [ yhpark         ] 
16:05 [ chilts         ] [ freewil       ] [ jslatts         ] [ nuba           ] [ simewn          ] [ your_name      ] 
16:05 [ chjj           ] [ Frippe        ] [ jso             ] [ Nuck           ] [ simong          ] [ YoY            ] 
16:05 [ chnops         ] [ frogstarr78   ] [ jsonified       ] [ nym            ] [ sinclair        ] [ Ytserman       ] 
16:05 [ chrisdickinson ] [ fsargent      ] [ jvolkman        ] [ odyniec_       ] [ sir_tyrion      ] [ zackiv31       ] 
16:05 [ chrisdotcode   ] [ Fuu           ] [ jxie            ] [ ofan           ] [ SirFunk         ] [ zaheera_       ] 
16:05 [ chrisina1ar    ] [ Fwny          ] [ Jygga           ] [ ohcibi         ] [ sj26            ] [ Zak            ] 
16:05 [ Christian87    ] [ gabriel_      ] [ jzacsh          ] [ olasd          ] [ Slashbunny      ] [ Zauberfisch    ] 
16:05 [ Circlepuller   ] [ garann        ] [ Kai`_           ] [ OMFGYUHKILLME  ] [ SlexAxton       ] [ zedas          ] 
16:05 [ cjackson       ] [ Garo_         ] [ kanzure         ] [ omni5cience    ] [ slickplaid      ] [ Zelfje         ] 
16:05 [ cjm            ] [ gaYak         ] [ kaspertidemann  ] [ onre           ] [ Sly             ] [ zemm           ] 
16:05 [ ClaudioAlbertin] [ geoaxis       ] [ kazupon         ] [ ootje          ] [ smellynoser     ] [ zivester       ] 
16:05 [ clever         ] [ gerard0       ] [ kborchers       ] [ optixx         ] [ smellynosery    ] [ zk             ] 
16:05 [ Clex           ] [ gf3           ] [ keeto           ] [ Or1on          ] [ smi^2__         ] [ zodiak         ] 
16:05 [ cmwelsh        ] [ ghoti         ] [ Kester          ] [ Orbitrix       ] [ snafuz          ] [ Zoney          ] 
16:05 [ cnd            ] [ gildean       ] [ kill-9_         ] [ orospakr       ] [ snez            ] [ ZorgHCS        ] 
16:05 [ codelahoma     ] [ githogori     ] [ killfill        ] [ othiym23       ] [ solidoodlesuppor] [ zorzar         ] 
16:05 [ codepal_       ] [ gkatsev       ] [ Killswitch      ] [ outspan        ] [ SomeoneWeird    ] [ zygote         ] 
16:05 [ Cogito_Ergo_Sum] [ gluxon        ] [ killtheliterate ] [ owen1          ] [ Sorella         ] [ zykes-         ] 
16:05 [ combataircraft ] [ gmci          ] [ Kingdutch       ] [ owenb          ] [ sorensen        ] [ zz_lazyshot    ] 
16:05 [ Connorhd       ] [ gnarf         ] [ KiNgMaR         ] [ pachet         ] [ SoulRaven       ] [ zz_shykes      ] 
16:05 [ context        ] [ gnoirzox      ] [ kkszysiu_work   ] [ Pagan          ] [ spectre256      ] 
16:05 [ Corey          ] [ goraxe        ] [ knirhs          ] [ pandark_       ] [ Spion_          ] 
16:05 -!- Irssi: #Node.js: Total of 802 nicks [4 ops, 0 halfops, 0 voices, 798 normal]
16:05 -!- Home page for #node.js: http://nodejs.org/
16:05 -!- Channel #Node.js created Sat Jan 30 07:48:24 2010
16:05 < Sven_vB> ok, then a standard closure will do. just wanted to do do it the preferred way if there was one.
16:05 -!- Irssi: Join to #Node.js was synced in 27 secs
16:53 < Franz__> what is wrong in this code? http://paste.ubuntu.com/1252036/
16:53 < Franz__> somebody can help me ?
16:53 < Franz__> Nexxy ?
16:53 < Franz__> ;/
16:58 < aroman> hi, I've got an express app, and I'm using mongoDB/mongoose for persistence/sessions. This works great, but I would be interested to know what standard practice for failing on database errors is? Suppose the database is down? Or a query blew up?
16:59 < SomeoneWeird> handle them
16:59 < SomeoneWeird> :p
17:01 < mscdex> Franz__: what's the problem?
17:03 < aroman> SomeoneWeird: well, it's not like I can exactly catch an error syntactically. I just get an error object or error string somewhere in mix. I guess I could bubble it up through my app, but that would result in a whole lot of code cruft.
17:03 < pachet> just have a set pattern for handling session-not-found
17:03 < pachet> whether that originated in a db error, or result not found, whatever
17:03 < pachet> and just hook the error handler into that mechanism
17:03 < Franz__> mscdex the user cant connect
17:04 < Franz__> sockets.on('connection',... not function
17:04 < Franz__> i tried many syntaxs with no success
17:05 < SomeoneWeird> for socketio?
17:05 < aroman> alright, that'd take care of sessions pretty well. what of general db failure? Like connection timeouts -- my app would indefinitely lag.
17:05 < SomeoneWeird> most libraries should handle timeouts
17:06 < aroman> right. and would standard practice be to wait for the databases to actually connect before starting the HTTP server? Or just be optimistic?
17:07 < Franz__> nobody?
17:08 < pachet> aroman: i'm usually optimistic
17:08 < pachet> calls to the db should be asynchronous anyway, so you're looking at a couple ms of stack execution between request ingestion and it hitting the db anyway
17:08 < pachet> today i'm reusing a lot of the same words in things i type today
17:13 < Aria> Indeed. Connecting to a DB pretty much has to be optimistic -- or aggressive, but separate from the HTTP server
17:13 < Aria> You'll reopen connections to the DB much more than you'll restart the app
17:17 < mscdex> Franz__: i think you want socket.sockets.on('connection' ....
17:18 -!- mode/#Node.js [+o isaacs] by ChanServ
17:25 <@isaacs> jesusabdullah: yeah
17:25 <@isaacs> jesusabdullah: the npm-registry-client and npm are too tightly wedded at the moment.
17:26 <@isaacs> jesusabdullah: it'd be nice if there was a separate lib that just did the "put xyz@asdf into the folder /path/to/foob"
17:26 <@isaacs> jesusabdullah: with the registry bits, and caching, etc.
17:27 < bingomanatee> Good morning node
17:28 < bingomanatee> I have an odd issue.
17:28 < bingomanatee> I have set up my desktop Mac OSX with nave so I can use node 0.8.9 at home while using 0.6.8 at home. 
17:28 < bingomanatee> I am getting an error with a recently installed copy of underscore: "Cannot read property 'map' of undefined"
17:29 < bingomanatee> Any ideas as to why this might be so?
17:29 < bingomanatee> full dump at https://gist.github.com/3807786
17:31 < pppaul> i'm trying to debug my mocha/chai tests with node-inspector. i don't have 'it' or 'describe' defined. how do i require these functions?
17:32 < pppaul> i was able to get this stuff working in a web broswer, but not in nodejs
17:43 < Sven_vB> is there a good way to make require(fn) automagically jslint fn if it begins withc "/*jslint", and throw an exception if jslint complains?
17:46 <@isaacs> Sven_vB: nope.
17:47 < Sven_vB> are there fundamental obstacles (like "just don't.") to inventing one?
17:50 < Sven_vB> (also of course i meant the file's *content* to begin with that comment.)
17:59 < ljharb> Sven_vB: you should absolutely not be jslinting on production. save that for test/deploy steps.
18:02 < Sven_vB> yeah, i took it for granted that such an auto-lint would be used in development only.
18:02 < pppaul> i'm having trouble with inspecting my tests in node-inspector… 'describe' and 'it' are not defined
18:03 < pppaul> how do i require them?
18:03 < ljharb> pppaul: those functions aren't standard. you'd have to require the library that uses them
18:04 < pppaul> i know that much ljharb 
18:04 < ljharb> so what testing library do you use?
18:04 < pppaul> mocha/chai
18:04 < ljharb> require('mocha'), require('chai')?
18:04 < pppaul> i do
18:04 <@isaacs> Sven_vB: you can hook into the require.extensions['.js'] function
18:04 < pppaul> also 'should'
18:04 <@isaacs> Sven_vB: i forget exactly how those work.  poke around.
18:04 < ljharb> mocha = require('mocha'), mocha.describe should work
18:05 <@isaacs> Sven_vB: it's probably not all that hard
18:05 < pppaul> mocha doesn't have .describe
18:05 < pppaul> i've looked at the mocha/chia/should objects
18:05 < ljharb> i don't know, i don't use mocha.
18:05 < pppaul> they don't define those functions
18:05 < pppaul> what do you use?
18:06 < ljharb> jasmine
18:06 < pppaul> :(
18:24 <@ryah> http://news.ycombinator.com/item?id=4593571
18:27 < tomshreds> for these who don't know, it's the last day for getting a free book on www.packtpub.com
18:27 <@ryah> upvote that link please
18:28 <@ryah> (as you should always do when someone posts a HN link)
18:29 < RLa> tomshreds, uh, i gave up on free book when their homepage went down
18:30 < tomshreds> RLa: today it works! hehe I just downloaded mine
18:30 < tomshreds> It's been down for a while these past days though
18:30 < aroman> is there any reason to look into node-specific build tools for building my JS/CS app? Or should the more generic ones (e.g cake) be all I'd want?
18:30 < RLa> also, i'm not sure which book i would like to get
18:31 < RLa> why not good old Makefile?
18:31 < tomshreds> hehe there's a shit ton of books, i got the object-oriented javascript book
18:31 < RLa> yes, too many to choose from
18:31 < RLa> aroman, and there is make (gnu make) for windows too
18:32 < RLa> so it's not that much platform-dependent
18:32 < niggler> too many people try to build build tools -- make's powerful enough for most things
18:32 < niggler> i shudder when thinking about tools like "ant"
18:32 < RLa> i think make is ok for anything but large c and c++ projects
18:32 < aroman> this is just for an internal build system (my team = just me), and not an open-source project. so I don't care about platform independence.
18:33 < RLa> aroman, so try out make
18:33 < substack> I like shell scripts or make
18:33 < niggler> even large c projects RLa there are ways to work with dependencies and large tree structures
18:33 < RLa> lots of node packages use Makefile
18:33 < RLa> make is way more portable than shell scripts
18:34 < substack> well make isn't especially portable
18:34 < substack> where possible it's nicer to just use node scripts
18:34 < substack> but whatevs
18:36 < RLa> hm, with node there is not much to "build" anyway
18:36 < mauritslamers__> make or not make… on a standard nodejs installation you get immediately errors because node-gyp requires python
18:37 < RLa> that's for c++ extensions yes
18:37 < aroman> hmm, it looks like i'm deciding between cake and make
18:37 < mauritslamers__> on most linux systems and most osx systems developers will have installed gcc
18:37 < mauritslamers__> but windows?
18:37 < aroman> i'm drawn to cake because I don't have to learn a new syntax
18:38 < ljharb> thats not a good reason :-/
18:38 < tomshreds> Anyone has a good page about node streams? I'm not using them and I'm feeling like I miss a very good part of node.
18:39 < aroman> ljharb: well, what reason would I have for choosing make over cake otherwise?
18:40 < RLa> make is installed on most systems by default?
18:40 < ljharb> isn't make more widely used?
18:40 < aroman> again, i don't care about portability at all. I'm the only one who will ever use this.
18:40 < ljharb> thats always a bad idea.
18:40 < ljharb> you're never the only one who will use it.
18:40 < ljharb> because "you 6 months from now" is a different person.
18:41 < aroman> ordinarily i'd agree, but i can assure you that this project will never see the light of day in anything resembling it's current form, if ever.
18:41 < substack> a4 is a terrible "language"
18:41 <@Nexxy> well that's selfish!
18:41 < substack> make is still very popular
18:41 < ljharb> doesn't matter - then consider it training for your next project where you should be using make
18:41 <@Nexxy> sharing is caring, aroman 
18:42 < substack> this laptop is charging so fast on 220
18:42 < aroman> Nexxy: well if I ever factor something useful to others out of it, I'll be sure to use make.
18:42 < substack> SPEED CHARGING
18:42 <@Nexxy> lol
18:42 < aroman> ljharb: that's a good reason
18:43 <@Nexxy> how can you be so sure that something useful enough to you to write couldn't be useful to someone else?
18:43 < RLa> dont' overcharge or it's gonna blow :)
18:43 < substack> mbalho: I should charge my laptop on your 220 when I get back to oakland it's way betters
18:43 < aroman> alright. is there any document for using make with JS/CS I should look at, or should I just RTFM for vanilla make?
18:45 < RLa> hm, lot of learnboost modules use Makefile: https://github.com/learnboost/
18:45 < RLa> and i think i have seen article as well
18:46 < aroman> yeah I just looked through a lot of the node/js modules i'd starred on github and makefiles seemed to be pretty ubiquitous 
18:47 < pppaul> i'm having trouble rendering my mocha tests as diff strings
18:47 < pppaul> i'm doing expect(a).a('string').equal(b)
18:48 < pppaul> output a red paragraph that is unreadable
18:57 < harrydog> when i do: npm install express, it downloads the express framework to a node_modules folder, but when I do "express site", it says "express: command not found"
18:57 < harrydog> do i need to add express to a global path variable or something? I'm on os x
18:59 < RLa> if you want to use the command, use npm install express -g
18:59 < RLa> -g will make global install and makes the command available
18:59 < purr> RLa: Command-line interface - GitHub <https://github.com/composer/composer/blob/master/doc/03-cli.md>
18:59 < RLa> purr, yes?
19:00 <@Nexxy> RLa, I think -g is purr's google command
19:00 <@Nexxy> or just g
19:00 < RLa> oh fun
19:00 <@Nexxy> g nexxy
19:00 < harrydog> ok thanks, yes that worked, needed to install express globally
19:00 <@Nexxy> -g nexxy
19:00 < purr> Nexxy: nexxy (Emily Rose) · GitHub <https://github.com/nexxy>
19:00 < gkatsev> yes, -g
19:00 < RLa> nice :)
19:00 <@Nexxy> ok, -g it is
19:01 < gkatsev> g is the command, - is the trigger
19:01 < STRML> very useful command, e.g. in the case of nodemon
19:01 <@Nexxy> gkatsev, is your bot? or elliott's?
19:02 < gkatsev> Nexxy: elliott runs it, it's originally based on ecmabot (or rather, oftn-bot) which is used heavily in ##javascript 
19:03 <@Nexxy> gkatsev, intadesting
19:03 < gkatsev> -about
19:04 < gkatsev> bah
19:04 < gkatsev> lol
19:05 <@Nexxy> elliottcable, ._.
19:10 < benpourquoi> haven't coded in years and attempting to learn nodejs may not have been my best idea :P
19:11 < harrydog> i used "express site" to setup a default express site, but when i do "node app.js", i get an error "Error: Cannot find module 'express'" in module.js
19:12 < LouisT> Hello, anyone know of a way to bind a socket to IPv6? I'm using net.Socket, it can connect with IPv6 but I can't specify a bind address if it's IPv6..
19:13 < harrydog> never mind, figured it out
19:16 -!- mode/#Node.js [+o piscisaureus_] by ChanServ
19:18 < benpourquoi> ok so new to node.js and new to IRC
19:18 < benpourquoi> gonanbe al ong day
19:18 < benpourquoi> (and new to typing obviously)
19:18 < BennyLava> Welcome to typing!
19:19 < benpourquoi> :) thanks!
19:20 < mscdex> LouisT: set the localAddress option when .connect()'ing
19:21 < mscdex> LouisT: sock.connect({ host: 'localhost', port: 1234, localAddress: 'ipv6address' });
19:22 < mscdex> http://nodejs.org/api/net.html#net_net_connect_options_connectionlistener
19:22 < tomshreds> Anyone has a good page about node streams? I'm not using them and I'm feeling like I miss a very good part of node.
19:23 <@mbalho> ya stream handbook on substacks github
19:24 < tomshreds> nice thx ill check it out
19:24 < LouisT> mscdex: oh ok, i was doing something different, that might work then.. thanks
19:25 < SoulRaven> on net is missing the local socket number from the api
19:27 < SoulRaven> we have socket.remotePort with in fact is remote socket number not port
19:27 < SoulRaven> but we don't have socket.localPort or better to say socket.localSocket and socket.remoteSocket
19:28 < SoulRaven> i don't know way in node sockets are confused with ports, but i guess that is a good reason and logical
19:32 < Cogito_Ergo_Sum> guys is there a way in node for using all cpu cores ? for example core1: calculates part1 of number crunching, core2 part2 and so on
19:32 < Cogito_Ergo_Sum> simultaneously that is.
19:33 < SoulRaven> paralel computin, i guess you can try cluster
19:33 <@Nexxy> Cogito_Ergo_Sum, child_process.fork
19:33 < SoulRaven> but is in dev mod now
19:33 <@Nexxy> or cluster 
19:33 < SoulRaven> in esence clouster are workers
19:34 < Cogito_Ergo_Sum> let me check fork
19:34 < Cogito_Ergo_Sum> and clusters
19:39 < Cogito_Ergo_Sum> hm so with fork the main process does the routing
19:39 < Cogito_Ergo_Sum> and the children do the actual processing
19:44 < euoia> I am looking for a few bigger-than-small express-based applications to get style pointers from, any suggestions?
19:45 < timeturner_> should we be using domains in production?
19:45 < timeturner_> @isaacs
19:47 < SoulRaven> @isaacs: i have found a workaround with the guys from here, on the mater regarding splice on buffer
19:47 < SoulRaven> :)
19:56 < Cogito_Ergo_Sum> hm why can't i interrupt a while(1) loop that does number crunching if i have set up a proces.stdin.on("data", function(cmd) { process.exit() }); ?
19:57 < Cogito_Ergo_Sum> the listening to process.stdin is done BEFORE the while(1) {} loop starts working
19:59 <@Nexxy> Cogito_Ergo_Sum, use .kill
19:59 < Cogito_Ergo_Sum> Nexxy, i want to stop and exit the node.js program through a CLI command which i process in the process.on("data")
20:01 <@Nexxy> perhaps you should use recursion instead of a while loop
20:01 <@Nexxy> that way you actually have a call stack
20:03 < Cogito_Ergo_Sum> recursion = tons of overhead
20:03 < livinded> doesn't v8 optimize for tail call?
20:04 < Benvie> wow Microsoft this is....awesome http://arstechnica.com/information-technology/2012/05/no-cost-desktop-software-development-is-dead-on-windows-8/
20:04 <@Nexxy> lol Cogito_Ergo_Sum 
20:05 < Benvie> it would be nice if just the stripped down compiler and linker were distributable
20:06 < Benvie> 'that won't be the case for Windows 8: the Windows SDK for windows 8 will not include a compiler toolchain at all'
20:07 < Cogito_Ergo_Sum> initially i had a for loop which for(from 1 to 16million) { numbercrunch() } which took 6 seconds, then i replaced it inline and it went down to 2 seconds. but i really need it in an infinite loop
20:14 < vicapow> does anyone ever meet up on east bay to hack?
20:24 < Cogito_Ergo_Sum> Nexxy, if i make it with a callback function i get fast the max call stack error
20:24 < Cogito_Ergo_Sum> max callstack size
20:24 <@Nexxy> because you're not waiting for anythign to execute
20:24 <@Nexxy> which is why I recommended recursion
20:25 < Cogito_Ergo_Sum> what do you mean i'm not waiting for anything to execute?
20:25 <@Nexxy> you're "queueing" a bunch of calls to the same function over and over without waiting for any of them to return
20:25 <@Nexxy> so you will naturally grow a very large call stack
20:25 < Cogito_Ergo_Sum> recursion also gives the same error btw..
20:26 <@Nexxy> I'd offer more help if I could stay
20:26 <@Nexxy> perhaps look at something like async
20:26 < Cogito_Ergo_Sum> function add2() { do stuff; add2(); }
20:28 < mauritslamers__> Cogito_Ergo_Sum: the problem is that the listener will never be activated because the end of the tick is never reached
20:28 <@Nexxy> Cogito_Ergo_Sum, https://github.com/caolan/async#whilsttest-fn-callback
20:28 < mauritslamers__> that is what I assume at least :)
20:28 < mauritslamers__> so, why do you have an infinite loop?
20:29 < mauritslamers__> that is very un-nodish :)
20:30 < Cogito_Ergo_Sum> mauritslamers because i want to run a number crunching which i want to stop whenever i feel like to when i listen to process.on('data')
20:30 < mauritslamers__> hmm… and you cannot do the number crunching by batches?
20:31 < clever> Cogito_Ergo_Sum: you could use setTimeout(add2,0); to make it wait until things hit 'idle'
20:31 < clever> so the stack wont grow out of control
20:31 < mauritslamers__> clever… that is not necessary if you have process.on('nextTick')? not?
20:31 < clever> mauritslamers__: was trying to remember what that was
20:32 < clever> though .on may not be the best, maybe .once?
20:32 < mauritslamers__> in order for the process.on('data') to run at all the process tick system needs to run
20:32 < Cogito_Ergo_Sum> clever sounds like a plan
20:32 < mauritslamers__> so, in this case the process.on('data') can set some flag, which will prevent the number cruncher from working
20:33 < mauritslamers__> and when it is done, you set the flag again, and let it run on the next tick
20:33 < mauritslamers__> so, the number crunching happens by batches, and you don't block the node run loop
20:33 < mauritslamers__> (or event loop)
20:34 < mauritslamers__> which is what happens when you do a while() I guess
20:34 < clever> does node have anything like processEvents()?
20:35 < mauritslamers__> http://nodejs.org/api/process.html
20:35 < clever> dont see it in the list
20:35 < mauritslamers__> so, it doesn't have it :)
20:35 < clever> ive used the proccessEvents style functions in firefox before, to do processing in a while loop without blocking the event loop
20:36 < clever> basicaly, it just lets the upper layer (c++) handle a few events and then returns back to js
20:36 < Cogito_Ergo_Sum> calling it recursively with timer = setTimeout(add2, 0); solves the problem of call stack max size, however, process.stdin.on("data", function(cmd) { clearTimeout(timer); printresults(); process.exit() } doesn't seem to do anything
20:37 < tomshreds> Anyone has an example application hosted on github that uses streams? I just want to see what it looks like, I get the concept but I don't get how I could build some web app out of it.
20:37 < mauritslamers__> Cogito_Ergo_Sum: that is because the rest of your actions is blocking the event loop
20:37 < Cogito_Ergo_Sum> hm?
20:37 < clever> Cogito_Ergo_Sum: your forcing an exit in the data event
20:38 < clever> before setTimeout can run
20:39 < Cogito_Ergo_Sum> no i first clear the timeout
20:39 < clever> and what does printresults do?
20:39 < mauritslamers__> clever: my impression is that because there is code running which doesn't let go of the event loop, so the callback is never called
20:39 < Cogito_Ergo_Sum> prints the results that add2() do
20:40 < Cogito_Ergo_Sum> just a console.log() thing
20:40 < clever> Cogito_Ergo_Sum: all timeouts you set, are run after your data event returns
20:40 < mauritslamers__> node is an async system, everything has to 'let go' after a while
20:40 < clever> and your doing process.exit() at the end of the data event
20:40 < clever> which terminates the entire app
20:40 < clever> mauritslamers__: yep
20:41 < Cogito_Ergo_Sum> i see
20:41 < clever> its terminating the app before letting go and waiting for the event to finish
20:41 < Cogito_Ergo_Sum> i thought it was a problem with the small timeout of 0 milliseconds, because if i set it to 1 millsecond, it does print the result and terminate
20:42 < clever> a timeout of 0 is the same as process.nextTick
20:42 < clever> both cases wait for everything to return before running the function
20:42 < Aria> (though timeout 0 is slower)
20:42 < clever> http://nodejs.org/api/process.html#process_process_nexttick_callback
20:42 < clever> Aria: yep
20:44 < Cogito_Ergo_Sum> hm buy using process.nextTick(add2); the program terminates correctly
20:44 < Cogito_Ergo_Sum> in the process.on(data)
20:44 < Cogito_Ergo_Sum> by*
20:45 <@Nexxy> I'm installing windows on dedicated hardware.
20:45 <@Nexxy> I feel so...
20:45 < clever> ewww!
20:45 <@Nexxy> I know.
20:45 <@Nexxy> ... I know.
20:46 < mauritslamers__> poor you....
20:46 < clever> the only windows server i have, is for windows only stuff i wrote before i knew any better
20:46 <@Nexxy> it's for the best
20:46 < mauritslamers__> btw… anyone know how to do a cross compile for windows?
20:47 < mauritslamers__> or is the only way to do a compile for windows to have a windows system?
20:47 < clever> mauritslamers__: just install the proper cross-compiler
20:51 < Cogito_Ergo_Sum> clever, it seems that the recursive interruptable solution of add2() works fine with next tick, however for 16 million calls, it takes 14 seconds, when if it was inside a for(1 to 16 million) loop it took just 600 ms :P
20:51 < Cogito_Ergo_Sum> that is more than 20 times slower
20:51 < clever> Cogito_Ergo_Sum: you generaly want to do more then 1 pass of work in each call
20:52 < clever> for example, do 20 elements, then schedule to get called on the next tick
20:52 < clever> function add2() { x = 20; while (x--) { dowork; } process.nextTick(add2); }
20:53 < clever> in one of my firefox extensions, i instead used the clock to determine that
20:53 < Cogito_Ergo_Sum> yes i see
20:53 < clever> last_event = Date.now(); when starting things
20:54 < Cogito_Ergo_Sum> you suggest to do more work inside, before calling it again
20:54 < clever> if ((Date.now() - last_event) > 50) { inside the loop
20:54 < JerMenKoO> .
20:54 < clever> if your using the Date.now() method, you can churn the cpu for exactly 50ms, before returning to the event loop
20:54 < clever> so at most, other events will be delayed by 50ms
20:54 < clever> but just every 20 or 100 elements also works
20:55 < thewanderer1> unless the clock changes...
20:55 < astropirate> What is the deal with so many awesome projects not writing docs???????!!! killin' me
20:55 < clever> thewanderer1: uptime may be better in node
20:55 < Cogito_Ergo_Sum> thanks clever and mauritslamers
20:55 < thewanderer1> rumor has it, RTC is not monotonic :P
20:55 < clever> depends on the end-use, in my case, i didnt know the speed of the target system, so 1000 may be too long on some and too fast for others
20:56 < clever> thewanderer1: http://nodejs.org/api/process.html#process_process_hrtime
20:56 < clever> hrtime would actualy be perfect, since it gives a diff for you, just wait until the diff exceeds a limit, then go async
20:57 < thewanderer1> indeed
20:58 < mscdex> astropirate: create a gh issue!
20:58 < thewanderer1> this reminds me, I have a high-speed event processing system that I need to port to hrtime(), since it now does throttling / adaptive interactivity scaling based on Date.now() :P
20:59 < clever> thewanderer1: Date.now() would only be unstable if your ntpd looses connection long enough for the clock to drift
20:59 < clever> and then ntpd steps the time back to the correct value
21:00 < clever> but if you dont run ntpd at all, shame on you! :P
21:00 < thewanderer1> I think there's also some drift in virtual machines that have unstable clocksources... used to be an issue with KVM
21:01 < clever> it depends on if the vm sync's the clock to the host or not
21:01 < clever> some vm's will emulate the entire RTC and let the guest change the clock, but its more likely to drift if your short on cycles
21:01 < clever> locking the clock to the host requires the guest to co-operate, but makes it simpler, you just run ntp on the host and everythings perfect
21:14 < niggler> in the node C++ api is the destructor called when an object is deleted using javascript delete??
21:35 < Raynos> https://gist.github.com/3808490#L6
21:35 < Raynos> That map is really boilerplately
21:35 < Raynos> anyone have a pattern for simplfying it
21:35 < prova> ciao a tutti
21:36 < prova> list
21:40 < terinjokes> isaacs: is it possible to ping rm about my changes to node-ctypes?
21:50 < Sven_vB> JSON.parse gives me "SyntaxError: Unexpected token }" - is there a way to let it report *where* in the JSON string that syntax error happened?
21:58 < AnonymousFunctio> Sven_vB: Good question.  I'm curious as well.
22:13 < astropirate> Sven_vB, AnonymousFunctio I dont believe the built-in JSON parser will do that for you. However, you can use an external lib that will show you errrors
22:14 < DjMadness> i seam to be having issues with "socket.irc.socket.on('data', function(data) {" its joining lines together in the data varible, is there something i am doing wrong ? my source is here: https://github.com/DjMadness/alphairc/blob/master/alphairc.js
22:15 < astropirate> Sven_vB, AnonymousFunctio https://github.com/zaach/jsonlint   is  do a try catch with the built in  JSON.parse()  and if it throws error i'd parse/validate it with jsonlint
22:15 < AnonymousFunctio> Not a bad idea.
22:23 < jtomasrl> when making an API using node, and i have many "GetSomething" routes and the only difference is the table where the data is looked at, is it recommended to use the same functions changing the table using a param?
22:26 < aandy> jtomasrl: well, if that's the only difference, and you currently have a lot of redundant code, then sure, reduce it is a good idea. also if you have to make (generic) changes later on
22:30 < mikrowelt> sup guys )))
22:33 < Sven_vB> astropirate, thy
22:33 < jerrysv> i don't know how many folks are in the NW here, but cascadiaJS tickets went on sale today
22:51 <@isaacs> terinjokes: you can ping him.  his email address is on the module.
22:54 < terinjokes> isaacs: i'm sure I pinged him 4 times at least already: one for each pull request
22:54 <@isaacs> terinjokes: k
22:54 <@isaacs> he's here sometimes as rmustacc
22:54 < terinjokes> but nonetheless, i can email him directly as well
22:58 < niggler> how easy/hard is it to integrate node in an application?
22:59 < niggler> (above that of integrating v8)
23:00 < astropirate> damn.. its times like these that i think i should get a CS degree :S
23:00 < astropirate> its ok... i'll come to my senses in a few hours
23:01 < terinjokes> what's wrong with a CS degress?
23:01 < terinjokes> degree* even
23:01 < astropirate> nothing
23:01 < astropirate> its great
23:01 < astropirate> i'm pondering whether it's for me or not
23:01 < mmalecki> except being useless :)
23:02 < niggler> fuck CS
23:02 < astropirate> thats what i thought too
23:02 < terinjokes> when is it useless?
23:02 < niggler> lemme clarify astropirate 
23:02 < niggler> there are some really intriguing subjects
23:02 < niggler> none of which are really applicable for 90% of what you do
23:02 < astropirate> Generally, in webdev 99.999% of the time you dont need the degree
23:02 < astropirate> I've been doing web dev for some 4-5 years.. programming for longer
23:03 < astropirate> but do not have a degree
23:03 < niggler> the degree doesnt help you per se
23:03 < astropirate> I'm a sophmore in college
23:03 < astropirate> i took the semister off
23:03 < astropirate> to think
23:03 < niggler> finish it
23:03 < astropirate> I havent learned ANYTHING
23:03 < astropirate> like nothing
23:03 < terinjokes> i took 2 years off, went back for another semester, and now taking another one off
23:03 < niggler> have you taken any theory classes?
23:03 < astropirate> i have literally wasted quite a few thousand dollars
23:04 < astropirate> and wasted 2 years of my life for nothing
23:04 < astropirate> niggler, not yet
23:04 < astropirate> i might
23:04 < astropirate> next semister
23:04 < niggler> your school probably has some classes on stuff like numerical analysis
23:04 < astropirate> simester
23:04 < niggler> which i use a lot
23:04 < niggler> although there it may be considered applied mathematics in some places
23:04 < astropirate> I have no doubt higher up things get interesting..
23:04 < astropirate> but they really shoudlnt waste my money and time
23:04 < niggler> you aren't learning to code
23:05 < niggler> and if you approach it like that you are screwed
23:05 < mscdex> grad school is where the theory is at ;-)
23:05 < astropirate> niggler, no
23:05 < astropirate> i get that
23:05 < astropirate> not paying for syntax
23:05 < astropirate> what i'm saying
23:05 < astropirate> is
23:05 < niggler> mscdex: i took those classes in my undergrad :)
23:05 < astropirate> i havent learned ANYTHING
23:05 < astropirate> all i do is get in debates with my professors :S
23:05 < astropirate> lol
23:05 < mscdex> i had some theory stuff in undergrad, but where i went they reserve most of that for grad
23:05 < astropirate> maybe when i get out of community college
23:05 < astropirate> hah
23:06 < niggler> so basic cs classes should cover stuff like sorting algorithms
23:06 < niggler> quicksort
23:06 < niggler> shellshort
23:06 < astropirate> well that stuff is elementry
23:06 < niggler> bubble sort lol
23:06 < astropirate> i might go
23:06 < astropirate> just for the math classes
23:06 < niggler> there should be some computational math classes
23:07 < niggler> condition numbers and the ilk
23:07 < niggler> lol im writing a moore-penrose pseudoinverse in javascript right now lol
23:07 < astropirate> I'm getting to a point where my math is limiting me
23:08 < terinjokes> astropirate: i'm getting to a point where my lack of CS is limiting me
23:08 < niggler> what are you doing now terinjokes 
23:09 < terinjokes> niggler: right now I'm doing nodejs stuff, where I'm packing structures to use a limited amount of memory… before that I was doing real-time audio processing
23:09 < niggler> yeah some math would help you lol
23:10 < niggler> actually that reminds me
23:10 < niggler> i had to hack together an implementation of perl's pack/unpack
23:10 < niggler> is there a native javascript solution?
23:10 < superjoe30> niggler, http://nodejs.org/docs/latest/api/buffer.html
23:11 < niggler> oh that's sweet
23:11 < niggler> is there a browser simulated version of buffer
23:14 < superjoe30> yes, try googling
--- Log closed Mon Oct 01 00:00:49 2012
