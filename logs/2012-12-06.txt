--- Log opened Thu Dec 06 00:00:13 2012
00:05 <@isaacs> tnorris: yeah
00:06 < tnorris> isaacs: just out of curiosity, is that still something you plan on doing?
00:08 < tnorris> isaacs: oh, and I can't figure out where the `exit(1)` command is defined that used all over `src/node.cc`. what am I missing?
00:10 < Namastane> Hi all!
00:11 < kenperkins> CoverSlide: sorry, I had to commute for a few minutes.
00:11 < kenperkins> dId I miss anything relevant?
00:11 < CoverSlide> nope
00:12 < TooTallNate> tnorris: it's part of libc i think
00:12 < TooTallNate> tnorris: man 3 exit
00:14  * tnorris gives TooTallNate a virtual hug.
00:20 < kenperkins> othiym23: I just upated the issue
00:25 < sticko> could use some help with socket.io. I'm trying to make simple coordinates tracking and sync. http://jsfiddle.net/XDw9V/ here the socket.emit('clients', clients); sends empty object. Don't know why
00:29 < superjoe> node is so much fun
00:29 < superjoe> that is all
00:29 < superjoe> how practical is it to get a job doing mostly node.js stuff
00:29 < kenperkins> it's my dayjob
00:29 < EyePulp> sticko: you're initializing your clients to an array, not an object
00:29 < EyePulp> var clients = [];
00:30 < superjoe> kenperkins, where at?
00:30 < kenperkins> clipboard.com
00:30 < sticko> isnt array an object in js?
00:30 < CoverSlide> sticko: yes
00:30 < sticko> it shouldnt matter
00:30 < othiym23> superjoe: I'm pretty much Node 24/7 right now
00:30 < EyePulp> var clients = {};
00:31 < othiym23> oh, you're *that* kenperkins!
00:31  * EyePulp might be totally nuts though
00:31 < superjoe> othiym23, where at?
00:31 < othiym23> I knew your name sounded familiar
00:31 < othiym23> superjoe: New Relic
00:31 < sticko> the console.log displayis proper list with clients
00:31 < CoverSlide> ah maybe the serialization of an array only does the integral keys
00:31 < kenperkins> I didn't know there was more than one of me othiym23 :)
00:31 < othiym23> I developed New Relic's node instrumentation
00:31 < CoverSlide> that makes sense
00:32 < superjoe> othiym23, nice! I'm about to hook that up at work
00:33 < sticko> EyePulp: you're quite right
00:34 < superjoe> basically how it works here is, if I start the project, it's node.js. but if my coworker starts the project, it's ruby
00:34 < sticko> EyePulp: i replaced clients = []; with clients = {}; and it magically started working
00:34 < CoverSlide> sticko: 09:24 < CoverSlide> ah maybe the serialization of an array only does the integral keys
00:34 < superjoe> and then we have threads and sidekiq jobs and InternalSynchronousMemoryMessageBus classes :-/
00:35 < EyePulp> sticko:  Arrays are different than dicts (or objects, or whatever)
00:35 < othiym23> superjoe: New Relic is a heavily Ruby-oriented shop, so I know what you mean
00:35 < othiym23> although I like Ruby, still!
00:35 < othiym23> superjoe: also, feel free to shout out at me if you run into issues
00:35 < othiym23> superjoe: where are you?
00:35 < superjoe> thanks othiym23!
00:35 < sticko> EyePulp: in js they behave mostly as objects, but seems that socket.emit('string', {}); has to take object as an argument
00:36  * kenperkins is clueless about ruby
00:36 < superjoe> othiym23, http://www.indabamusic.com/about    -> Andy Kelley
00:36 < sticko> EyePulp: thanks anyways
00:36 < EyePulp> ruby knows ALL about kenperkins 
00:36 < kenperkins> indeed.
00:38 < superjoe> othiym23, my feelings towards ruby are biased by having seen it raped with frightening passion by overzealous architecture astronauts
00:38 < EyePulp> sticko: I guess I thought arrays []   were considerably different than {}
00:39 < othiym23> so you know some Rails developers, is what you're saying
00:39 < superjoe> haha
00:39 < CoverSlide> EyePulp, sticko 09:27 < CoverSlide> sticko: 09:24 < CoverSlide> ah maybe the serialization of an array only does the integral keys
00:39 < EyePulp> CoverSlide: I saw it the first 8 times =P
00:39 < CoverSlide> then why do you keep saying things that are wrong?
00:40 < EyePulp> Because [] != {}  
00:40 < skiddy> java has more architecture astronauts than ruby
00:40 < CoverSlide> [] is a superset of {}
00:40 < superjoe> skiddy, true
00:41 < Mikicacarica> >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> http://fcasroma.blogspot.com/ <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
00:41 < CoverSlide> the issue is in JSON.stringify
00:41 < mscdex> woohoo! spam!
00:42 < CoverSlide> i like bread and butter, i like toast and jam. i like all those simple things, that's why i like spam!
00:44 < mscdex> the least they could have done was also give us the egg, bacon, and sausage with it
00:45 < mindcruzer> whats an architecture astronaut?
00:45 < othiym23> so that same username has been popping in off and on over the last couple days and posting a spam link and then disappearing again
00:45 < superjoe> mindcruzer, it's a reference to this blog article by joel spolsky: http://www.joelonsoftware.com/articles/fog0000000018.html
00:45 < othiym23> mindcruzer: somebody who really, really likes abstraction and building huge systems of collaborating objects and protocols and whatever that doesn't do much actual work
00:45 <@mbalho> othiym23: can i kickban someone who isnt here
00:46 < othiym23> mbalho: you can just plain ban the nick, I think
00:46 < othiym23> then the spambot operator would have to come up with another username
00:46 < superjoe> or the host
00:46 < tnorris> Most dangerous module yet: https://npmjs.org/package/ofe
00:46 < mindcruzer> so basically they go overkill on architecture?
00:46 < sonyX> i need women for porno film
00:46 < othiym23> *nothing* is more dangerous than hoarders
00:46 -!- mode/#node.js [+b *!*10458ED75@*.euronet.net.pl] by mbalho
00:46 -!- sonyX was kicked from #Node.js by mbalho [sonyX]
00:46 < billy> where can I sign up
00:46 <@mbalho> well i can kickban people who are in here
00:46 < othiym23> actually, I take that back -- is fuckitjs on npm?
00:47 < othiym23> aw, too bad, it's not
00:47 < othiym23> then I guess hoarders is still the most dangerous module on npm
00:48 < mindcruzer> oh, no, i see, they go crazy with abstraction
00:48 < superjoe> mindcruzer, I'd say that overkill on architecture is another form of it
00:48 < othiym23> mindcruzer: it's a bad habit that lots of Win32 / Java developers (myself not excluded, sadly, although I'm reformed) pick up
00:48 < mscdex> othiym23: does that module depend on welldoitlivejs?
00:49 < othiym23> mscdex: which? fuckitjs?
00:49 < mscdex> yeah
00:49 < superjoe> I am actually just about to finish publishing something that is pretty architecture astronaut-y
00:49 < superjoe> but I feel like it's justified
00:49 < othiym23> mscdex: behold https://github.com/mattdiamond/fuckitjs
00:49 < othiym23> it has a great license
00:49 < mindcruzer> othiym23: i actually was heading down that path with the app im currently building, but luckily I caught myself before it got out of hand
00:49 < superjoe> othiym23, is it the tumbolia public license?
00:49 < superjoe> that's my new favorite, replacing WTFPL
00:50 < superjoe> ah, it's custom
00:50 < othiym23> it has a couple unique clauses that I'm going to add to my own personal license
00:50 < misterhat> //@TODO: give a shit
00:50 < misterhat> made me lol
00:53 < superjoe> behold: I have explored outer space, and I return from my astronauting to bestow upon you `node-plan`:
00:53 < superjoe> https://github.com/superjoe30/node-plan
00:53 < superjoe> it's basically the backend for an open source transloadit
00:56 < qubit[01]> superjoe,  totally been looking for something like this
00:56 < superjoe> nice!
00:56 < superjoe> it's not quite production ready, give it a couple more days
00:57 < othiym23> sorta feels like it could be interesting to combine with something like architect or broadway to create a little app-servery frameworky thing
00:57 < superjoe> othiym23, yes I'm going to do that
00:57 < superjoe> basically this is me open sourcing a little bit of a media processing server I wrote internally, one piece at a time
00:58 < superjoe> you can specify templates like this: https://gist.github.com/4119242
00:58 < superjoe> it's working in production, I just need to refactor some stuff so I can release it open source
00:59 < qubit[01]> othiym23, wow exactly what I was thinking
00:59 < qubit[01]> except I didnt know of these products
01:00 < qubit[01]> othiym23,  you mean https://github.com/c9/architect and http://flatironjs.org/ ?
01:03 < superjoe> it's pretty sweet though. it saves heuristics to inform future progress events if you run a similar plan
01:04 < superjoe> so even if you create "tasks" which don't emit progress events, it'll still accurately report progress next time you run the plan
01:04 -!- mode/#node.js [+o piscisaureus_] by ChanServ
01:06 < jsilver> sandfox: any news ? :)
01:08 < sandfox> jsilver: got started but then actual work got in the way, I got a little ahead of myself and started writing a protocol parser but decided it was overkill.
01:09 < sandfox> jsilver: currently having fun with database upgrades and it's work christmas party tomorrow so might be a few days before I get any mergable in
01:09 < othiym23> qubit[01]: yeah -- they're meant to be plugin managers, but I abuse them to do dependency injection for me
01:09 < jsilver> sandfox: ye def, ye a protocol parser is overkill because the protocol is intended to be easy for flexible text stuff while easy to .split and call that a parser. it would be good to have one in C though because this would maybe fix some problems node had with multiple commands being mashed together (now fixed in clients instead) not working in node
01:10 < jsilver> sandfox: cool, sounds great ! :)
01:10 < othiym23> superjoe: that's a smart idea -- by "heuristics" do you mean timing statistics?
01:12 < sandfox> jsilver: it's pretty do able in node, i've written some simple protocols before, and there libs like https://github.com/nodejitsu/nssocket that make it pretty easy
01:13 < jsilver> sandfox: awesome, thought this was the case, just didnt know enough node yet to do it ^_^
01:13 < jsilver> too much ruby makes ya retarded ;)
01:15 < sandfox> jsilver: if you want to see an awesome parser, felixge's mysql client is incredible -https://github.com/felixge/node-mysql. IT'S SOO FAST
01:15 < jsilver> nutty.
01:16 < jsilver> that code scares me
01:16 < jsilver> lol
01:17 < jsilver> but im sure it contains the answer i need
01:18 < jsilver> in reality, GC2 protocol allows for any number of bytes to be mashed together as C string (null terminated), and then the interior of them seperated by the unique spaceship seperator (::!!::) for use as [command, args, n...]
01:18 < jsilver> in ruby1.9 this is a reality right now and it's pretty fast (how slow can textbased UTF8 stuff be on the newest ruby.. not that slow)
01:18 < sandfox> jsilver: just been digging and deoxxa has written something for irc that I guess is the equivalent of what your server is doing for GC2 https://npmjs.org/package/irc-protocol
01:18 < deoxxa> HELLO
01:19 < deoxxa> suuuuup
01:19 < jsilver> looks good
01:19 < jsilver> deoxxa: whats it do
01:19 < jsilver> i cant raied
01:19 < jsilver> :)
01:19 < deoxxa> just parses/produces irc protocol data
01:20 < deoxxa> basically no client logic or anything
01:20 < jsilver> cool cool
01:20 < jsilver> you are "limited" by IRC protocol design right?
01:20 < jsilver> you can do scrollback, but not multiline paste embedding (viewed by some as a bug)
01:20 < deoxxa> wat
01:20 < jsilver> it's a weird feature of GC2
01:21 < jsilver> can't be done in IRC
01:21 < deoxxa> oh
01:21 < jsilver> you can say multi lines
01:21 < deoxxa> what's GC2
01:21 < jsilver> globalchat2.net
01:21 < jsilver> https://itunes.apple.com/us/app/globalchat-2-pro/id571879934?ls=1&mt=8 
01:21 < jsilver> https://itunes.apple.com/us/app/globalchat-server/id566163288?ls=1&mt=12 
01:21 < jsilver> https://itunes.apple.com/us/app/globalchat-2-pro/id566614902?ls=1&mt=12 
01:21 < jsilver> all code https://github.com/jsilverMDX/GlobalChat2
01:22 < jsilver> the original mission was "Beat IRC in Pure Ruby", but that's changed just "Beat IRC"
01:22 < deoxxa> ha
01:22 < jsilver> i just try to fix parts of IRC I don't like while nearly following it to the untrained eye
01:22 < jsilver> * netsplits
01:22 < jsilver> * "unnecessary/unprofessional features"
01:23 < deoxxa> > coffeescript
01:23 < deoxxa> > nope.jpg
01:23 < jsilver> i dont get all the coffee hate
01:23 < jsilver> it really is a good lang
01:23 < deoxxa> no, it's really not
01:23 < deoxxa> have you read the source?
01:23 < jsilver> the source is generated
01:23 < jsilver> by a parser generator
01:24 < deoxxa> well, one of the parsers
01:24 < deoxxa> they have three
01:24 < jsilver> i dont know how to read the parser grammar
01:24 < jsilver> coffee was an easy port from ruby and works well
01:24 < jsilver> very stable too
01:24 < jsilver> what's the downside of using coffee?
01:24 < deoxxa> <coffeescript developer> what's an ast?
01:24 < deoxxa> it's just bad code
01:24 < deoxxa> plain and simple
01:25 < deoxxa> i've been through this so many, many times
01:25 < deoxxa> i'm not going and pointing at line numbers
01:25 < jsilver> https://github.com/mdks/js2cs
01:25 < jsilver> that was in javascript, before i switched to coffee
01:26 < jsilver> it was also the worlds first JS converter for CS
01:26 < jsilver> it uses AST of course
01:26 < deoxxa> "hey everyone i made a machine that makes milk spoil 5 times faster than usual"
01:26 < deoxxa> "...great"
01:26 < jsilver> i'm not sure why you're convinced that coffee hurts JS
01:26 < deoxxa> it doesn't
01:26 < deoxxa> it's just bad
01:26 < deoxxa> i don't like bad things
01:27 < deoxxa> pretty easy
01:27 < jsilver> but what's bad about it ?
01:27 < deoxxa> the... code...
01:27 < jsilver> loops for instance, are better
01:27 < deoxxa> as i said
01:27 < jsilver> scopes are better
01:27 < deoxxa> nope
01:27 < deoxxa> they're not
01:27 < jsilver> but.. you dont use the code, you write it and it runs it and you dont notice it
01:27 < deoxxa> lolol
01:27 < deoxxa> same argument as every coffeescript user
01:27 < deoxxa> "the implementation doesn't matter"
01:27 < jsilver> you stare at coffeescript core code to use it?
01:27 < jsilver> well, from my experience it hasn't
01:27 < jsilver> and i have a working coffeeserver
01:40 < mscdex> i think there's enough flow control modules in npm to warrant their own conference
01:40 < mscdex> flowconf
01:41 < othiym23> that would be a very confusing conference
01:42 < mindcruzer> conflow
01:43 < kenperkins> is anyone using a custom Agent for HTTP?
01:44 < othiym23> I sure hope not
01:44 < kenperkins> othiym23: I think I'm going to have to if I actually want to use a connection pol
01:44 < kenperkins> othiym23: btw, did you see my pm
01:45 < othiym23> kenperkins: are you actually running into file descriptor exhaustion?
01:45 < kenperkins> othiym23: we have at times
01:45 < kenperkins> I bumped up ulimit to 65k recently
01:45 < kenperkins> :D
01:46 < othiym23> I've hit the limit before, but only on OS X, because of how long it holds onto sockets in SOCKET_WAIT after the connection is closed
01:47 < othiym23> I guess it didn't even occur to us at the time that the lack of socket reuse might be the problem
01:47 < cellvia> could someone explain what the heck is up with the dude who wrote this module  ... he keeps calling end()  on his streams syncronously in his examples, which is absolutely not working for my code  ... and it seems like a module thats gotten good press too  https://github.com/tblobaum/redis-stream
01:47 < cellvia> it causes my stream to end prematurely
01:47 < cellvia> (obviously)
01:48 < cellvia> but if i dont call it manually, then theres just no end at all :(
01:50 <@mbalho> cellvia: he is just simulating a writable stream which emits data one or many times and then end when its done
01:51 <@mbalho> cellvia: err i meant readable stream
01:52 < cellvia> so why isnt my redis stream emitting an end?
01:52 < cellvia> ive never seen anyone have to simulate that, its kind of assumed with streams isnt it?
01:52 < cellvia> to be more accurate it should be in a settimeout dont you think
01:52 < cellvia> its basically intiiating the stream then ending it immediately
01:53 < cellvia> i must be missing something
01:54 <@mbalho> cellvia: readable streams emit end, writable streams expect .end() to get called
01:54 < cellvia> this is streaming FROM redis
01:54 < cellvia> not to it
01:54 <@mbalho> cellvia: can you post some code?
01:55 < cellvia> hold on one of the example files he has is basiccally what im doing
01:56 < cellvia> actually
01:56 < cellvia> one sec
01:59 < cellvia> https://gist.github.com/4221234
02:00 < cellvia> literally all im doing is having it spew out a list of strings
02:00 < cellvia> but it doenst emit end
02:00 < cellvia> at the end
02:02 <@mbalho> that module has a weird api, it uses duplex streams but doesnt need to
02:03 < sosnon> EJS does not provide a feature to include static files (.css/.js) in templates in a layout-templates setup (using some sort of custom handlebar-like yield) so that they end up in the header, but only if the specific template is included in the layout, does it?
02:03 < cellvia> so im not crazy then
02:03 <@mbalho> cellvia: if you call keystream.end() on 7 what happens
02:03 < cellvia> mbalho: it ends prematurely
02:03 < cellvia> it only processes 2500 keys
02:03 < cellvia> ~
02:03 < cellvia> instead of the 17000
02:04 < cellvia> if i do a settimeout of 5 seconds
02:04 < cellvia> it gets all 17000
02:04 < cellvia> does he have a fundamental misunderstanding o streams yet he wrote this module?
02:05 <@mbalho> seems like it yea
02:05 < cellvia> damn.
02:05 < cellvia> my thought is that perhaps redis doesnt signal when its done spewing results
02:05 < cellvia> but surely thats not true
02:05 <@mbalho> yea it definitely does
02:05 < cellvia> i mean how else would all the other things that use redis know when its down
02:06 < cellvia> done*
02:06 < cellvia> ok then i guess i have to hack this shit
02:06 < cellvia> i dont want to rewrite the whole module :/
02:06 <@mbalho> you should open an issue
02:06 <@mbalho> and see what the dood says
02:06 <@mbalho> also does this module not have streams? https://npmjs.org/package/redis
02:07 < cellvia> everything ive seen on redis streams, that included always talks in terms of streaming TO redis
02:08 <@mbalho> ahh in the TODO: "Stream large set/get values into and out of Redis. Otherwise the entire value must be in node's memory."
02:08 < cellvia> yeah :/
02:08 <@mbalho> man thats crazy, i thought for sure there was a streaming redis client
02:08 < cellvia> i know right?
02:09 < cellvia> and my er reputation is on the line here at my new job ;)
02:09 <@mbalho> lol
02:09 <@mbalho> seems like that first module is pretty close
02:09 < cellvia> i sold them on streams for some stuff, so im streaming the shit out of everything
02:09 <@mbalho> it just doesnt end when it should
02:09 < cellvia> right...
02:09 < chapel> cellvia: well write a new module
02:09 < chapel> obviously there is a gap
02:10 < chapel> it wouldn't be hard to do it right
02:10 < cellvia> chapel:  i know, i would but im on work time and theres only so much time i have to rewrite things from bottom up
02:10 < cellvia> http://redis.io/topics/protocol
02:10 < cellvia> i will try to hack through this and figure out what signals "end"
02:10 < chapel> well you wouldn't have to write a parser or anything
02:10 < cellvia> looks like its diff for diff queries
02:11 < cellvia> Every Redis command or data transmitted by the client and the server is terminated by \r\n (CRLF).
02:11 < cellvia> seems simple enough, the problem with his module tho is he uses CRLF to separate the data chunks
02:12 < cellvia> i think
02:12 <@mbalho> see also https://github.com/dominictarr/redis-protocol-stream and https://npmjs.org/package/redis-rstream (from a quick npm search)
02:12 < chapel> no he does
02:13 < cellvia> mbalho nice, that first one looks interesting
02:13 <@mbalho> dominic is the wizard of streams
02:13 < cellvia> and the second one looks maybe like exactly what i need
02:13 <@mbalho> i did npm search redis | grep stream
02:14 <@mbalho> and filtered by ones that didnt sound crappy
02:14 < cellvia> hell yeah
02:14 < cellvia> you rock
02:15 < cellvia> the 2nd one:   Why  mranney/node_redis does not have direct ability to read a key as a stream, so rather than writing this logic again and again, wrap this up into a read stream so we simply point it to a key and it streams.
02:15 < cellvia> im really confused why this isnt part of node_redis alrady
02:17 < cellvia> on that note im going home and will tinker later tonight... thanks much mbalho, i def have plenty to work with now 
02:17 < EyePulp> cellvia: is reading a value as a stream like that a standard use-case for redis, versus say, the pub/sub
02:17 < cellvia> hmm
02:17 < cellvia> i am not a redis master
02:17 < cellvia> i inhereited it
02:17 < cellvia> it fell into my lap
02:17 < EyePulp> i hear you
02:17 < cellvia> i dont know what is standard with it
02:18 < cellvia> it uses pubsub to signal some things, but thats separate from its functino in this app as a hash and key value store
02:18 < cellvia> reading the values makes more sense as a stream i would think cause the pub sub is events
02:18 < cellvia> which dont need end
02:18 < cellvia> "end"
02:19 < cellvia> thanks again
02:20  * EyePulp is still chewing on that
02:22 < jasonweng> hello
02:36 < kenperkins> anyone have any custom HTTP agent examples?
02:40 < AAA_awright> Node.js is reporting my syntax error is on line 137 of a 135 line file
02:40 < AAA_awright> Halp?
03:00 < woopwoop> hey, trying to write something to decode a base64 string to binary and save it as a jpg but I'm not sure why it's not working. http://pastebin.com/aSamM1bN
03:00 < woopwoop> the same string if you copy and patse it converts to an image on http://base64online.com/image_base64.php
03:01 < woopwoop> maybe i'm not using the right options or something?
03:05 < mscdex> woopwoop: don't use `.toString('binary');`
03:05 < mscdex> just leave it as a Buffer
03:07 < woopwoop> lol
03:07 < woopwoop> saved me a few hours
03:07 < woopwoop> thanks
03:08 < woopwoop> later
03:47 < MI6> joyent/node: Ben Noordhuis master * c08e947 : buffer: remove unused #includes - http://git.io/piBJLw
04:04 < joshSzep> Does anyone know of any resources which would help be compare starting a new web application with NodeJS on Heroku vs EC2 directly vs Nodejitsu? Or any opinions? FWIW we are still considering framework, but leaning toward RailwayJS
04:17 < DTrejo__> anyone know of a raw socket module? (not udp/tcp/unix sockets)
04:19 < DTrejo__> Or an easy way to write to eth0?
04:19 < DTrejo__> from node
04:26 < DTrejo> two years later and still no one has written a module to do raw sockets so sad. may write it myself..... or not
04:29 < Whitez-> Good luck :)
04:30 < Whitez-> I think you need root to do raw stuff anyway.
04:30 < Whitez-> http://stackoverflow.com/questions/4404860/raw-sockets-need-root-priviliege
04:37 < DTrejo> thanks whitez :)
04:37 < DTrejo> we do have root
04:45 < kenperkins> bnoordhuis thanks for the reply.
04:46 < kenperkins> bnoordhuis: so it seems the key for me on (github #4362) is to use a custom agent such that I do be a bit more permissive of re-used connections.
04:46 < bnoordhuis> kenperkins: yes. either that or keep requests queued up
04:46 < kenperkins> do you have an example somewhere of someone using a custom agent?
04:47 < kenperkins> or is it just copy from the http.js source and modify as needed?
04:48 < bnoordhuis> kenperkins: there may be an example in the http docs. if not, it's pretty straightforward to implement
04:49 < Aliv3> hey guys. Can you help me with node-glfw
04:56 < bnoordhuis> Aliv3: first rule of irc, don't ask if it's okay to ask for help, just ask your question :)
04:57 < Aliv3> well logically I am saying that it doens't work. the instructions are not straight forward at all, it tells you to move files to/from unexisting locations
04:57 < Aliv3> unexisting/illogical
04:57 < kenperkins> so bnoordhuis, given how easy it is to have enough of a delay between connections, there must be a belief that creating connections isn't altogether that expensive :D
04:58 < bnoordhuis> kenperkins: not for the node.js client but maintaining connections may be expensive for the server
04:58 < skiddy> is there anything like Travis CI for node.js?
04:58 < bnoordhuis> kenperkins: that's why leaving connections open is bad internet neighbourship
04:59 < kenperkins> right. In my case, it's between node and my database (which is http)
04:59 < kenperkins> I'm hoping to move to protobufs as soon as possible, making the issue moot
04:59 < skiddy> or is there anything like CodeClimate.com for node.js?
05:06 < woopwoop> trying to pass base64 data to the server via jquery post, seems to error out when the uri is too long or contains more than 18kb of data. same function works fine with data small than 18kb. is this a limit i can set in node?
05:24 < cjheath> has @dominictarr been here recently?
05:26 < chilts> he's all over the place :)
05:26 < chilts> ah, dunno is the answer
05:33 < mscdex> woopwoop: why should the uri matter if you're posting the data?
05:34 < mscdex> bnoordhuis: is there a code style/lint config for node core?
05:34 < woopwoop> I'm not sure what the problem is, whether it's the uri, my browser, jquery or node
05:34 < bnoordhuis> mscdex: yes. `make jslint`
05:34 < woopwoop> but the same jquery/node code works on data smaller than 18kb
05:34 < woopwoop> so im thinking it's some limit/configuration thing on the server side
05:37 < mscdex> bnoordhuis: what about things like using ===, !== uniformly?
05:37 < bnoordhuis> mscdex: what about it?
05:38 < mscdex> bnoordhuis: from what i can tell the closure linter doesn't address those kinds of things?
05:38 < bnoordhuis> mscdex: maybe not. i think isaacs configured it
05:38 < cjheath> Sooo. Should I finish and publish this? https://gist.github.com/3f2f24253921efbab6d1
05:39 < mscdex> bnoordhuis: no i mean the linter itself doesn't support addressing those kinds of style choices, mostly just whitespace-related and line length checks
05:39 < bnoordhuis> oh, that's quite possible
05:39 < mscdex> so i wasn't sure what the policy was for that other stuff
05:40 < bnoordhuis> the official policy is "do the right thing"
05:40 < mscdex> heh
05:40 < bnoordhuis> personally, i always write e.g. typeof x === 'function', never ==
05:41 < mscdex> right, and there's a ton of those only double equals in lib/*.js
05:41 < mscdex> i can submit a patch for that and some other things...
05:41 < skiddy> whats new and good with javascript browser integration testing?
05:41 < cjheath> Re that gist, it's a micro-templating object, like Jade, that compresses to <1kB
05:41 < jsilver> http://cl.ly/image/010y0z3p3935
05:42 < bnoordhuis> mscdex: i kind of hate lint patches... isaacs seems to like them though
05:42 < skiddy> i need something like mocha or jasmine that can click on the actual app and test the state of the browser
05:43 < skiddy> like jasmine running in an iframe and reaching across to the parent frame to click on stuff would be cool
05:43 < cjheath> skiddy: phantomjs?
05:44 < skiddy> cjheath: hm thats a start but its headless so i wont be able to see in my browser whats happening, right?
05:44 < cjheath> Much faster for all that :)
05:44 < cjheath> None of that pesky rendering
05:44 < skiddy> my app is using html5 video and some flash objects really heavily so timing the real thing is critical
05:45 < cjheath> fair. You need the real thing then. Selenium (groan)?
05:45 < cjheath> is no-one here interested in templating?
05:45 < skiddy> ya more like selenium but i swear i've seen this pure-js solution before
05:46 < skiddy> cjheath: your minimalist template engine is nice but i am into coffecup these days
05:47 < cjheath> as in https://github.com/gradus/coffeecup?
05:47 < skiddy> yep
05:47 < skiddy> cjheath: how about this minimalist async.js lib https://github.com/mikesmullin/mini-async
05:48 < cjheath> skiddy: markup doesn't do it for what I need
05:48 < cjheath> I mean markdown :)
05:48 < skiddy> its just coffeescript
05:49 < cjheath> right, it does look nice
05:49 < skiddy> your example.semper could be done with coffeecup, what else do u need?
05:50 < cjheath> Stuff I can't publish :) We're trying to do a WYSIWYG template editor for nuff-buffs to use
05:51 < cjheath> coffeecup is cute, tx for the pointer
06:00 < cjheath> skiddy: in particular. I need to extract the tree (like walk the AST) because it'll have data references I need before the template rendering can be started
06:00 < cjheath> does coffee give you access to the parse tree?
06:04 < mscdex> cjheath: depends on how strong the coffee is
06:04 < fotoflo> hi all.  So i have a long string (the body of slashdot.com, for example) and I want to extract all the URLs
06:04 < skiddy> heheh
06:04 < woopwoop> hey mscdex, this is what I was trying to do http://pastebin.com/WR9XbFLk 
06:04 < skiddy> cjheath: ya if its being rendered by node and not as a client-side template
06:04 < fotoflo> when i use body.match() i often get [url, url, url, undefined x 2]
06:05 < mscdex> woopwoop: that's not really posting the data
06:05 < mscdex> woopwoop: that's a get disguised as a post
06:05 < mscdex> ;-)
06:06 < mscdex> browsers generally truncate uris after certain lengths
06:06 < fotoflo> whats the undefined x 2? and is there a good way to do this?
06:07 < woopwoop> hmm, how do I send the base64 string properly to node without it getting truncated?
06:07 < mscdex> woopwoop: try something like this instead: $.post("/woop", {data: data}, function(data){
06:08 < mscdex> woopwoop: you'll probably need something like the bodyParser middleware or use some other way for parsing the POST body and getting at the 'data' value
06:08 < woopwoop> heh, not sure why i had it as get
06:10 < mscdex> fotoflo: why not use something like the cheerio module?
06:10 < woopwoop> when i change it to post, it goes through, but it only seems to save like 18k of it and creates an image with like 90% cut off
06:11 < fotoflo> mscdex: cause then i need to know what selector to look for 
06:11 < fotoflo> mscdex: but thats a good thing to know about, thanks
06:11 < mscdex> fotoflo: an anchor tag ? :-)
06:12 < fotoflo> ill try it
06:12 < mscdex> woopwoop: you're verifying that the raw base64 data matches on both the client and server first?
06:12 < fotoflo> i was using jsdom before...
06:12 < fotoflo> = jquery
06:13 < fotoflo> + jquery
06:13 < mscdex> jsdom is pretty slow from what i've heard
06:13 < mscdex> and leaky with memory
06:13 < fotoflo> trying cherio
06:13 < fotoflo> cheerio
06:14 < mscdex> woopwoop: you should also remove the encodeURIComponent() from the base64 data on the client side
06:14 < woopwoop> i'm making an image editing app via canvas and just trying to send the base64 contents of the canvas to the server to save as an image
06:15 < woopwoop> think I got it working though
06:15 < fotoflo> does cherio have .each?
06:15 < fotoflo> Yes
06:16 < woopwoop> without the encodeURIComponent
06:16 < woopwoop> thanks again
06:17 < woopwoop> one last thing, is it possible to set some sort of attaachment headers and send that image back to the client prompting them to save the image?
06:18 < mscdex> woopwoop: you can set whatever headers you want with res.setHeader() and the like
06:21 < woopwoop> thanks
07:43 < brettgoulder> @ryah deleted his twitters and cleaned out his github?
07:57 < tnorris> bnoordhuis: probably not how you meant node-heapdump to be used, but found a ridiculous use for it: https://npmjs.org/package/ofe
08:06 < tnorris> is there documentation of everything that can be called through `require()` and `process.binding()`
08:09 < d4rklit3> hey
08:09 < d4rklit3> in express how would i do like get("/:page/:action
08:10 < mscdex> d4rklit3: just like that, no?
08:11 < d4rklit3> getting some funky stuff
08:11 < d4rklit3> when i try to serve a static file
08:12 < d4rklit3> it replaces static content
08:13 < d4rklit3> so like /main/scripts.js
08:13 < d4rklit3> doesntw ork
08:14 < SomeoneWeird> req.params.page
08:14 < SomeoneWeird> req.params.action
08:14 < SomeoneWeird> ?
08:15 < d4rklit3> sorry?
08:15 < SomeoneWeird> might need to rephrase your question
08:16 < d4rklit3> i would like it to detect static files and serves those instead of the route 
08:16 < d4rklit3> but if they don't exist
08:16 < d4rklit3> just user the route response
08:17 < SomeoneWeird> look at express.static
08:19 < d4rklit3> i have that set
08:19 < d4rklit3> mb im doin it wrong
08:26 < tnorris> so I found the documentation that lists all natives modules that can be called using `require()`, but still can't find a comprehensive list of what can be called using `process.binding()`. any ideas?
08:28 < DaMorpheuS> someone knows something about the module APIConnect?
08:33 -!- mode/#node.js [+o konobi] by ChanServ
08:48 < lmfao> hello everywone
08:51 < [AD]Turbo> hi there
08:52 < chrisbislr> hi [AD]Turbo
08:52 < chrisbislr> I missed you
08:53 < [AD]Turbo> thx :)
08:55 < skiddy> is there anything like webrat or capybara for node.js + soda/selenium yet
08:56 < skiddy> basically a set of helper assertions and functions for clicking, typing, focusing on fields in the browser, etc.
09:02 < bigkevmcd> skiddy: Zombie.js can do some of that
10:02 < darrenlooby> Hi all, I'm using either Wachr or fs.watchFile to... well, watch a file. I'd like to come up with a single function that gets its content into a var, watches it and then updates it when changes occur. I'm wondering a) anyone know of tutorial or current module.. or b) how I should approach doing it... i.e. should I load first, or watch first and so on.
10:52 < alchimis_> hi guys, this is part of my app.js code https://gist.github.com/59ea22d521fd9ce8d320
10:54 < alchimis_> and this is part of my routes/index.js https://gist.github.com/4d3777e4ae357657c16c
10:54 < alchimis_> this is the error that i recieve "undefined is not a function"
10:55 < alchimis_> ofcourse on the first lines of my routes/index.js i  have also this line of code var emmitNewPin= require('../app.js').emmitNewPin;
10:55 < zot> morning!
10:55 < alchimis_> so anyone here wanna give me a hand to solve this issue
10:55 < alchimis_> morning!
10:55 < zot> or, almost afternoon for some :)
10:57 < zot> anybody know if there's a trivial way to see what remains in my event loop?  (ie, I think i've kill off all sockets, timers, etc., but event loop isn't gracefully exiting)
10:57 < alchimis_> any one here read my question and have some hint for me?
11:02 < darrenlooby> alchimis_, does your error inform you of the file and line it occurs
11:03 < alchimis_> yes, this is the line that there is problem with "emmitNewPin(req.cookies.username);"
11:03 < alchimis_> as u understoom from my code, what i wanna do is after a user insert a new pin , I have to be able to emmit the new pin to all browsers
11:05 < alchimis_> in my app.js i have socket and in routes/index.js  i am calling that function "emmitNewPin(req.cookies.username);" so in app.js i can findOne the lates pin inserted by a certain user then i should be able to emit
11:05 < alchimis_> darrenlooby : if you think there is a better (efficent ) way to do this, I am more that open to hear
11:05 < alchimis_> thanx
11:08 < darrenlooby> alchimis_, sorry. I've had a think, but I can't see to come up with the goods.
11:08 < darrenlooby> I'm not sure where the undefined function is coming from
11:08 < mattijs> alchimis_: your calling emmitNewPin without a callback
11:09 < mattijs> so it fails because it expects a function as the second parameter
11:09 < darrenlooby> mattijs, I was thinking of that - but it is being called with a call back in the module... failed to spot the missing called back in the main file though... good shout
11:09 < alchimis_> so my question is now, in that routes/index.js what can i write as a callback?
11:10 < mattijs> function() {} ?
11:10 < lmfao> :-)
11:10 < mattijs> or update the emmitNewPin function to check if callback exists
11:10 < darrenlooby> alchimis_, do you need the callback at all?
11:10 < mattijs> if (callback) callback (newPin);
11:11 < alchimis_> i am completly new in doing this staf, what i want to do is to push the new pin
11:11 < alchimis_> so u suggest to do it without callback
11:12 < alchimis_> can u plz write in gist the modification i need to do inorder to make it run
11:14 < darrenlooby> alchimis_, it's up to you if the call back is there. If the callback is kept, you need to ensure that you're checking if a call back has been sent
11:15 < darrenlooby> alchimis_, however, as you're using an event to trigger the sending of the pin (do you need to get any feedback for it?) - using a callback could give you a success message for instance. Or, pushing to the next task to do. I don't know your project enough to know which is best.
11:18 < alchimis_> darrenlooby: what i want to do is, simply be able to emmit something after a pin inserted in db (which come from a post action)
11:18 < alchimis_> the initial problem that i encounter that i coudent have reference to io.sockets. in my routes/index.js
11:19 < alchimis_> thats why then i tought to do a function to pass the username in my app.js i find the lates pin inserted from that usrname and then emmit to all
11:19 < darrenlooby> alchimis_, if the sending the pin is only ever done for that, and you don't wanted feedback for success - all you need do it send it and forget. So, remove the callback... in my view
11:21 < darrenlooby> alchimis_, if you need to send the pin, and then do something afterwards or an action after success or fail... the callback could be useful. But, only if the function that is fun in the callback is going to be different for different circumstances. If, it's going to be the same thing each time, there is no need to push a callback function
11:21 < alchimis_> can u plz do it in gist, i mean if i remove callback then in  socket.on('newpin', function () {  how can i access to the result of emmitNewPin
11:22 < darrenlooby> Sorry, I've closed it. What result are you looking for from emmitNewPin? If there is data coming back from it, you can just return it.
11:22 < zot> no clues on walking my outstanding timeout/event loop list?
11:23 < alchimis_> https://gist.github.com/2e1dc289e398f2eb62b9
11:24 < alchimis_> the modification that u suggest is should be done as the above link
11:24 < alchimis_> ?
11:24 < darrenlooby> That looks better to me, yes
11:25 < darrenlooby> But where is newPin coming from?
11:25 < alchimis_> but there is a problem i mean inside this https://gist.github.com/1a0b64f7385cdc9d113c  i have to be able to access the result that function emmitNewPin(username) return
11:25 < alchimis_> how can i be able to do that?
11:27 < darrenlooby> Can you not call it from within that?
11:28 < darrenlooby> Sorry alchimis_ I can't help you any more... I need to go. I hope you find the solution to your problem
11:29 < alchimis_> i think it is not possible to do that https://gist.github.com/6d24c5801766312b4f29
11:29 < alchimis_> thanx for your time
11:29 < alchimis_> any one here wanna help me in this regard
11:30 < alchimis_> mattijs: can u please help me in this regard
11:34 < alchimis_> any one here see my code and wanna help me with the issue 
11:50 < SomeoneWeird> alchimis_, for one, line 8 should be exports.emmitNewPin = emmitNewPin;
11:51 < alchimis_> thank you SomeoneWeird: 
11:51 < SomeoneWeird> whats the problem?
11:51 < alchimis_> i think i solve it
11:52 < alchimis_> the real problem was that i was not having reference to io in my routes/index.js
11:52 < SomeoneWeird> lol
11:52 < SomeoneWeird> ic
11:52 < alchimis_> by doing like this, i can have access to io variable https://gist.github.com/fe3975568a52e9064081
11:53 < alchimis_> so now that i have access to io i dont need to emmitNewPin function
11:53 < alchimis_> thanx again SomeoneWeird
11:56 < SomeoneWeird> :)
12:05 < mattijs> alchimis_:  sorry, i'm at work, meetings and stuff. I'm glad you worked it out
12:06 < alchimis_> thanx
12:06 < rio{> I am having troubles to get "pkgcloud" going with rackspace. I get [Error: Invalid URI "//?format=json"], Guess i need to set the api uri somewhere? :S
12:39 < darrenlooby> Hi guys, I'm trying to use RegEx to grab an array of items between {} in a body of text... but, the output is funny and I have only the first ones each time. Any good tuts that'll help?
12:40 < stagas> darrenlooby: http://gskinner.com/RegExr/
12:40 < zot> darrenlooby: no tuts, but every time i have to regex, i just open an interpreter and slog away until it works, starting with smaller sub-exprs first.  get it exactly right in the interp, and life goes a lot smoother.
12:42 < darrenlooby> Yea, that's what I've been trying to do lol - just not getting it exactly right ;)
12:43 < darrenlooby> This is my link... http://regexr.com?332cs -- currently, trying for double curlies, like so {{x}}
12:44 < darrenlooby> Breaking it a little, I've got this working in the interpreter... \{(\s*?.*?)*?\}
12:44 < zot> i'm a bit onfused — why do you have bot * and ?
12:45 < zot> or is that a literal '?'?
12:45 < SomeoneWeird> \{(\s*)\}
12:45 < SomeoneWeird> should work?
12:45 < darrenlooby> zot, I'm trying out random ones from the internet that suggest they're doing the same thing as I am
12:45 < SomeoneWeird> or
12:45 < SomeoneWeird> \{{2}(.*)\}{2}
12:47 < zot> i'm definitely no expert here.
12:47 < darrenlooby> zot, you're likely more of an expert than I am...
12:47 < darrenlooby> I suck at regex... I suck hard
12:48 < SomeoneWeird> your just trying to get data in between {{ and }} right?
12:48 < SomeoneWeird> you're*
12:48 < SomeoneWeird> :p
12:50 < zot> if you want shortest match, change SomeoneWeird's (.*) to ([^}]), otherwise it looks right to me
12:50 < zot> i dunno whether js defaults to longest/shortest, or whether you can encode that preference
12:50 < darrenlooby> SomeoneWeird, yea. I'd like to get an array of all the names in {{ and }} ... to which I can then go back, grab some shiz from a database and return again with a replace for each of them.
12:50 < zot> but that would also prevent a string like "{{ asoijweofiwafe } awoeijwaoejfaw }}" from matching
12:51 < SomeoneWeird> btw I like regexpal for testing 
12:53 < darrenlooby> I'm trying \{{2}([^}])\}{2} on my test text... and it's giving me nothing
12:54 < SomeoneWeird> <SomeoneWeird> \{{2}(.*)\}{2}
12:54 < zot> depending on how you enter it, your escaping may need to be doubled
12:54 < zot> and try his above first :)
12:55 < SomeoneWeird> yeah, depends on the actual data
12:55 < SomeoneWeird> as always
12:56 < darrenlooby> \{{2}(.*)\}{2} collects multiple results in one
12:56 < darrenlooby> {{somestuff}} some more stuff {{someadditionalstuff}} and this and that
12:56 < darrenlooby> {{somestuff}} some more stuff {{someadditionalstuff}} and [somethingelse] and {anotherthing} and the {{last}}
12:56 < darrenlooby> That's my test data
12:56 < darrenlooby> That's over a new line
12:57 < darrenlooby> I'd like an array with "somestuff", "someadditionalstuff" and "last"
12:58 < SomeoneWeird> var regex = new RegExp(/\{{2}(.*)\}{2}/mg);
13:01 < innociv> I'm trying to get monit to kill node.js when it's using too much cpu.  Can someone help? I can't figure it out.   I have it set up like this: http://pastebin.com/dg8pjb4C
13:10 < darrenlooby> \{{(\s*?.*?)*?\}} ... this one works best in http://regexr.com?332d2... but node is just giving me a really sucky array to use...
13:11 < Sly> darrenlooby: In your (\s*?.*?)
13:11 < Sly> Use (?!\s*?.*?)
13:11 < Sly> You'll still get an array when you match regexes, unless you match them globally..
13:12 < Sly> But that should get rid of one of the array entries.
13:12 < Sly> Oops, Sorry.
13:12 < Sly> Use (?:
13:12 < Sly> Not (?!
13:13 < darrenlooby> Sly, that helped a little :)
13:13 < Sly> Yeah.. and if you do... /<your regex>/g
13:13 < Sly> It should just return the match in an array, without .input and all of that.
13:31 < innociv> I'm trying to get monit to kill node.js when it's using too much cpu.  Can someone help? I can't figure it out.   I have it set up like this: http://pastebin.com/dg8pjb4C
13:32 < DoniRS> Hola, Iḿ trying to install uglify-js on fedora but it keeps giving me error. I have been searching for a solution but haven't found anything usefull
13:34 < DoniRS> when using sudo npm installl -g uglify-js it displays : Error: No compatible version found: source-map@'>=0.1.7- <0.2.0-'
13:43 < yields> Hey, how does npm knows that a package has just been updated ?
13:43 < yields> i'v updated my package but it doesn't get updated on npmjs.org
13:44 < yields> it's on github
13:46 < yields> do i need to npm publish after each release ?
13:49 < freewil> yields, yes i would would recommend using npm version
13:49 < freewil> followed by npm publish
13:50 < freewil> npm version will bump the version in your package.json and create a new git tag
13:54 < projectskillz> hey guys
13:54 < Industrial> Can I receive a HTTP request in node process A and send it's response in process B?
13:54 < projectskillz> native addon question here
13:55 < projectskillz> does anyone have any experience linking to the cocoa frameworks in a native addon for node
13:56 < Industrial> http://nodemanual.org/latest/nodejs_ref_guide/http.html#http.ServerResponse says I can't access this myself ..
13:56 < projectskillz> tryingto do some cross compatibility stuff for a node add on but cant get os specific functionality ....what are my choices here?
13:57 < Wizek> Hello! I have a simple site which has some reused parts like header and footer. The previous developer used ServerSideIncludes to include these. I'd like to use a Node technology, which can complile the HTMl files, and also watch them and recompile upon changes. I know Jade is able to --watch, but then I'd need to rewrite all the files. I thought I could use EJS, but it seems to not provide a CLI
13:57 < Wizek> Is there a tool I could use?
13:58 < SomeoneWeird> you don't need to compile ejs files Wizek 
13:58 < SomeoneWeird> you don't even need to restart the node program
14:08 < Guest_1448> is there a way to display the current git commit/hash/version in my node app?
14:09 < Thomas`-> Would it seem safe to: socket.emit("my event"); socket.disconnect();
14:09 < Wizek> Back. Sorry for the dc. Did you say anything?
14:09 < Thomas`-> as in can i be assued the data will send before the tcp reset/close
14:10 < SomeoneWeird> Guest21470, process.version
14:11 < Guest_1448> that's node's version
14:12 < SomeoneWeird> then it's not really a node question is it :P
14:12 < Guest_1448> I want to display the currently running version of app
14:12 < SomeoneWeird> try wrapping git s
14:12 < Guest_1448> well, I guess I'm asking how to access the current git hash using a node app
14:12 < SomeoneWeird> and parsing the data or something
14:12 < Guest_1448> I wonder if there's a file in .git/ that I can read
14:12 < SomeoneWeird> ya
14:13 < Guest_1448> using a git lib just to get hash seems kinda overkill
14:13 < SomeoneWeird> git --rev-parse HEAD
14:13 < SomeoneWeird> just spawn that and parse stdout
14:14 < Guest_1448> okay
14:14 < Guest_1448> well actually
14:15 < Guest_1448> that might have issues if git isn't isntalled globally
14:15 < SomeoneWeird> ya
14:15 < Guest_1448> and I can't change that on my web host
14:15 < SomeoneWeird> but then if its a git repo
14:15 < SomeoneWeird> ... they have git installed
14:16 < Guest_1448> it might be "isolated" on heroku or something though
14:17 < SomeoneWeird> is it an npm package?
14:17 < Guest_1448> no
14:17 < Guest_1448> it's an app
14:17 < Guest_1448> that I deploy
14:17 < SomeoneWeird> why not just hardcode a version?
14:17 < gildean> doesn't mean i couldn't be installed by npm
14:18 < Guest_1448> SomeoneWeird: cause then i have to update it every time I commit and push a version..
14:19 < SomeoneWeird> well yeah
14:20 < SomeoneWeird> aight got it
14:20 < SomeoneWeird> Guest21470, .git/refs/heads/master
14:20 < SomeoneWeird> has sha of HEAD
14:21 < Guest_1448> oooooo
14:21 < Guest_1448> perfect
14:21 < Guest_1448> thanks
14:21 < SomeoneWeird> :)
14:21 < davidbowieslefte> Hi!  I'm very new to Node.  I have forked and modified an package on github.  Is there a way I can use package.json to pull from my repo when I do an "npm install" rather than using the package available on npm?
14:23 < Wizek> What would you guys use to compile/watch+compile static html files through a CLI? (for simple includes like header and footer)
14:23 < manuelbieh> grunt?
14:26 < SomeoneWeird> <SomeoneWeird> you don't need to compile ejs files Wizek 
14:26 < SomeoneWeird> * rx007 has quit (Quit: i'm sleeping)
14:26 < SomeoneWeird> <SomeoneWeird> you don't even need to restart the node program
14:26 < SomeoneWeird> Wizek, ^
14:27 < bigkevmcd> davidbowieslefte: https://npmjs.org/doc/json.html#Git-URLs-as-Dependencies
14:27 < Wizek> SomeoneWeird, yes, I could have, say, express do it, but the files are required to be static at the end of the process
14:28 < Wizek> grunt seems to be promissing
14:28 < SomeoneWeird> ah ic
14:29 < davidbowieslefte> bigkevmcd: thank you.
14:32 < davidbowieslefte> whoo-hoo!  And it even works :)
14:43 < Wizek> manuelbieh, SomeoneWeird I've looked into grunt, and it seems nice, but also like an overkill for what I need. With jade I could do something like: `jade --watch *` and *.jade files would turn into *.html ones properly processed, always updated after each file-save. Isn't there such a CLI tool available for EJS, Mustache or something similar?
14:49 < Couto> Wizek... I don't think grunt is an overkill, at least if you choose grunt init:gruntfile, which will do a simple barebones file... But it's not hard, to write a small wrapper are your chosen template engine
14:49 < Couto> npm is full of file watchers packages
14:50 < Wizek> Couto, Which one is reliable and easy to use?
14:52 < Couto> now.. that's somethink i can't answer, since everytime i needed something alike, i used the core 'fs' package
14:52 < Couto> *something
14:54 < Couto> Wizek anyway: http://nodejs.org/api/fs.html#fs_fs_watch_filename_options_listener
15:02 < radiodario> git commit -a -m "updated unit tests"
15:02 < radiodario> oops
15:03 < Couto> radiodario: *Update ;)
15:05 < Wizek> Couto, I've generated a gruntfile, and in initConfig I added `ejs: {files: ['*.ejs'] }, watch: {files: '*', tasks: 'ejs'},`
15:06 < Wizek> Couto, But it says: TaskError: Task "ejs" not found. when I try to run `grunt watch`
15:07 < Couto> can you gist your gruntfile?
15:09 < Wizek> Couto, https://gist.github.com/0dda1be4d2ff373de461
15:11 < Couto> Wizek: grunt doesn't know how to handle ejs files natively... you'll have to import a task that teaches it to grunt. https://npmjs.org/package/grunt-templater <- take a look and follow instructions
15:12 < Couto> the watch part, seems right i think.
15:41 < MI6> joyent/node: isaacs streams2-net * 76a5099 : test: Sync writables may emit finish before callbacks (+2 more commits) - http://git.io/lbusPw
15:49 < Wizek> Couto, There seems to be a problem. I managed to make it work with hardcoding both the ejs and html files, but it seems the grunt-plugin you mentioned doesn't support wildcards. Or does it?
15:50 < Wizek> gisting it
15:50 < Wizek> Couto, https://gist.github.com/0dda1be4d2ff373de461
15:56 < Couto> Wizek have you tried ./**/*.ejs
15:56 < Couto> instead of *.ejs
15:56 < Couto> because *.ejs will only search inside the current folder
15:57 < Wizek> Couto, `TaskError: Unable to create directory "C:\Users\Wizek-LT\Work Area\- sandbox\**" (Error code: ENOENT)`
15:58 < Wizek> Couto, does it (try to) relay on bash to expand the wildcards?
16:00 < Wizek> but watch accepted '*.ejs'
16:04 < Wizek> Couto, do I really have to manually specify all the files I'd like to compile? :(
16:06 -!- mode/#node.js [+o piscisaureus_] by ChanServ
16:07 < newguy> hey, anyone wanna help me with this: http://stackoverflow.com/questions/13746868/node-js-crashes-on-mysql-query
16:07 < innociv> I'm trying to get monit to kill node.js when it's using too much cpu.  Can someone help? I can't figure it out.   I have it set up like this: http://pastebin.com/dg8pjb4C
16:08 < felixge> newguy: you need to check if rows.length > 0
16:09 < felixge> newguy: also, DO NOT execute this inside a function: var mysql = require('mysql');
16:09 < felixge> newguy: this goes on top of your module file
16:09 < felixge> newguy: otherwise it will be called at runtime
16:09 < felixge> newguy: which causes your server to freeze while it loads this module
16:09 < newguy> okey, thx for the tips
16:10 < gildean> also, you're not escaping the username in any way, that's a hack waiting to happen
16:11  * Youdaman waves hello
16:12 < newguy> gildean: ye, i know, i'll fix that now 
16:13 < felixge> gildean: yes
16:13 < newguy> gildean: .escape() should be enough for that, ye?
16:14 < gildean> newguy: i suppose?
16:14 < gildean> i haven't actually done anything with mysql in node
16:14 < newguy> oh
16:15 < felixge> newguy: escape will do the trick
16:15 < felixge> newguy: even better, use '?' placeholder in your query
16:15 < felixge> and pass the arguments as an array to query()
16:15 < felixge> there are examples in the mysql module docs
16:16 < newguy> thx, i'll check that out !
16:17 < Wizek> Couto, Not just do I have to, it seems like I can't even specify more than one files. Can this plugin really only work with a single file?
16:18 < MI6> joyent/node: Ben Noordhuis master * 3ece130 : process: add getgroups(), setgroups(), initgroups()  DRY the getuid(), ge - http://git.io/9zssNA
16:20 < zbzzn> substack: Hi
16:20 < zbzzn> substack: I am trying to find some Git integration module for node and I saw your answer on some thread about it
16:21 < patrisk> I have a socket with an on('message') event, but want to pass additional arguments. Is that possible or do I have to get creative?
16:21 < patrisk> Additional arguments to the callback function.
16:22 < zbzzn> socket?
16:22 < patrisk> dgram
16:23 < patrisk> But I think I figured it out. If I have an anonymous function which accepts (msg, rinfo) and then pass the third additional argument inside this function it should work?
16:23 < patrisk> To the callback function, that is.
16:24 < patrisk> Something like this: my_udp.on('message', function (msg, rinfo) { callback(arg, msg, rinfo); });
16:34 < patrisk> (Yes it worked).
16:34 < ForceBlast> I'd like to write a command line app like vim that takes over the entire terminal buffer and doesn't scroll like a typical command line app would.  Does anyone have any good resources for learning how to do this?  I've googled, but I'm not finding anything.  I'm honestly not even sure what the term for that is which makes googling a bit hard.
16:36 < lmfao> hi
16:36 < lmfao> in
16:36 < lmfao> C you do it like this:
16:36 < lmfao> rintf("\r%d", x);
16:36 < lmfao> printf("\r%d", x);
16:37 < lmfao> dont know if that works in node as well. but should
16:38 < ForceBlast> I'm able to read in data via stdin, and write data using console.log or other means, but what I want to do is have the buffer be stationary and not scroll.  Sort of like a terminal-based GUI.
16:38 < superjoe> <othiym23>  superjoe: that's a smart idea -- by "heuristics" do you mean timing statistics?
16:38 < ForceBlast> vim is a good example of what I mean.
16:38 < CoverSlide> ForceBlast: look into the charm package
16:39 < superjoe> othiym23, yes. each task saves 2 stats: the ratio of a task's amountDone to averageDuration and the ratio of its most latent dependency's amountTotal to the task's amountTotal
16:39 < CoverSlide> ForceBlast: part of it is setting your terminal into "raw mode"
16:39 < superjoe> so O(n) is assumed, but that could be abstracted out if necessary
16:40 < ForceBlast> Thanks  :)
16:40 < CoverSlide> charm does that for you by the way
16:40 < CoverSlide> ForceBlast: another thing, if it's just one line, you can process.stdout.write('\r') to go to the beginning of the line an rewrite it
16:40 < lmfao> http://www.cs.uleth.ca/~holzmann/C/system/ttyraw.c
16:41 < CoverSlide> ForceBlast: so you can do something like progress bars, etc without raw mode entirely
16:41 < ForceBlast> In this case it would be more than one line, but that's good to know for future projects.
16:41 < ForceBlast> Thank you all so much!
16:42 < MI6> joyent/node: Ben Noordhuis master * 5b65638 : tls, https: add tls handshake timeout  Don't allow connections to stall i - http://git.io/iacjKA
16:43 < drudge> othiym23: jstags would be awesome
16:46 < niggler> is it safe to remove the files in the ~/.npm directory?
16:46 < Jimu> in interactive mode, is there a way to do an assignment where it *DOESN'T* echo out the results of that assignment? when assigning a large object, i don't want to wait a full minute as it shows me all the subobjects
16:48 < carpeliam> i'm trying to figure out how to integrate the twitter-bootstrap npm with connect-assets
16:50 < tacirus> Vsem privet
16:50 < tacirus> Hello folks
16:50 < tacirus> any russian in?
16:51 < CoverSlide> there's some white russian inside me
16:52 < tacirus> CoverSlide: u should have some russian language inside u. Do u?
16:52 < CoverSlide> no
16:52 < tacirus> So, no language - no nationality
16:53 < CoverSlide> in soviet russia, white russian drinks you!
16:53 < niggler> CoverSlide there are multiple interpretations of that sentence, all of which are disturbing
16:53 < CoverSlide> haha
16:53 < CoverSlide> i won the internet!
16:54 < lmfao> does someone now how i can disable the "xy joined channel, xy left channel" message in ircII ?
16:55 < CoverSlide> /ignore * crap
16:56 < lmfao> thanks
16:56 < lmfao> :-)
17:16 < tacirus> I`v installed nodejs 0.8.14   NOw I can get its version with node -v. But When I try to work a script it freezes
17:17 < gildean> tacirus: why not the latest stable version instead?
17:17 < CoverSlide> tacirus: maybe the script is faulty
17:17 < CoverSlide> was it a script you wrote?
17:17 < tacirus> the scipt is simple I took it from a guide
17:18 < niggler> tacirus how are you running the script?
17:18 < tacirus> the script is in my home folder and i start it like this  node helloworld,js
17:19 < tacirus> where do I put the cript code?
17:19 < tacirus> to show u
17:23 < bharat_plivo> hi guys, is there any method to check a value in an array without travelling all elements ? 
17:24 < aboudreault> o_O
17:24 < EyePulp> serverside?  ary.indexOf('val') > -1
17:24 < ljharb> bharat_plivo: if you know the index, sure
17:24 < ljharb> indexOf traverses all elements in the worst case.
17:24 < bharat_plivo> sorry, don't know index
17:24 < kenperkins> anyone have an example of a custom agent?
17:25 < EyePulp> bharat_plivo: are you trying to search for a value in an array to see if it exists?
17:25 < bharat_plivo> I am looking for  something like python :   if element in array:
17:25 < bharat_plivo> EyePulp: yes
17:25 < gildean> bharat_plivo: if (val in arr)
17:26 < bharat_plivo> gildean: tried, nt working
17:26 < EyePulp> bharat_plivo: if (ary.indexOf(element) > -1){ //found it }
17:27 < gildean> bharat_plivo: yeah the in-operator looks with the index too
17:27 < bharat_plivo> EyePulp: great, it worked , thanx
17:37 < Wizek> How can I compile an EJS file to an HTML one?
17:39 < Wizek> From cli, preferably. But if there is a node module that could also work
17:39 < CoverSlide> i don't think so
17:39 < ljharb> Wizek: compile? it has logic in it. there's no automated way to do it.
17:39 < CoverSlide> you could write one semi-trivially
17:40 < CoverSlide> although how you'd get the data for it in your cli app i don't know
17:43 < tacirus> is there anything wrong in this simple piece of code: http://paste.pro/5163122  ?
17:46 < ljharb> tacirus: nope, works fine for me. i copied it to my clipboard and ran `pbpaste | node` and i can hit localhost:8888 just fine
17:47 < tacirus> hm to me it works with  console.log ("helo");  but not withthe code I`v showed
17:47 < tacirus> not in the terminal neither in the browser
17:48 < tacirus> what can be the trouble?
17:48 < ljharb> tacirus: wait, how are you running it, and testing it?
17:49 < tacirus> well in the terminal I type: node helowwolrd.js
17:50 < tacirus> and the file contains that script code
17:50 < ljharb> right
17:50 < ljharb> and hit http://localhost:8888 in your browser
17:50 < tacirus> it says it can`t open
17:51 < ljharb> then try `curl http://localhost:8888` in a shell
17:51 < tnorris> how long has there been an "official" aws sdk?
17:51 < ljharb> many years
17:51 < tacirus> bash: http://localhost:8888: No such file or directory
17:52 < tnorris> ljharb: funny. I mean for node
17:52 < tacirus> ah curl is not installed
17:52 < ljharb> ah
17:52 < ljharb> tnorris: looks like a day or two http://aws.typepad.com/aws/2012/12/aws-sdk-for-nodejs-now-available-in-preview-form.html
17:53 < ljharb> tnorris: actually it's a preview, so the answer is negative time
17:53 < tnorris> ljharb: this is justa preview? https://github.com/aws/aws-sdk-js
17:53 < tacirus> curl: (7) couldn't connect to host
17:54 < ljharb> tacirus: then there's something else going on with your local networking
17:54 < ljharb> tnorris: if oyu click http://aws.amazon.com/sdkfornodejs/ on that repo, it says Preview, yes.
17:54 < CoverSlide> oh sweet
17:54 < tnorris> hm, well I'll take a preview over nothing.
17:54 < CoverSlide> Nice to have an official s3 client for node
17:54 < CoverSlide> I've mostly been using knox
17:55 < tacirus> ljharb: is it why in terminal the code doesn`t work too?
17:55 < ljharb> probably
17:56 < CoverSlide> although i may still stick to knox, it a pretty thin layer
17:56 < tnorris> anyone know if there exists a comprehensive list of items that can be called using `process.binding()`?
17:57 < Jimu> in interactive mode, is there a way to do an assignment where it *DOESN'T* echo out the results of that assignment? when assigning a large object, i don't want to wait a full minute as it shows me all the subobjects
17:58 < tnorris> Jimu: just end it with `,1`
17:58 < ljharb> Jimu: yes, a = b, 'assigned'
17:58 < Jimu> ah, good trick
17:59 < CoverSlide> tnorris: grep -r process\.binding node/src node/lib
18:01 < tnorris> CoverSlide: heh, thanks. guess I was just wondering how developers keep track of what's available.
18:01 < CoverSlide> tnorris: seems to point to src/node_extensions.h
18:01 < CoverSlide> my guess at least
18:02 < tnorris> CoverSlide: ah, awesome. that's exactly what i was looking for. just couldn't find it because all my grep's were like `grep "\<buffer\>"`
18:06 < LuckyBurger> hey guys, Im having some issues installing from the git repo. Getting an error with ./configure :x
18:06 < tnorris> LuckyBurger: pastebin the error
18:06 < LuckyBurger> http://pastebin.com/cTtPfE6M
18:07 < LuckyBurger> oddly enough there was an error from the source files as well
18:07 < LuckyBurger> from the website
18:07 < kenperkins> anyone running their dev environment entirely on vagrant?
18:07 < LuckyBurger> a different one
18:07 < tnorris> LuckyBurger: incorrect python version
18:07 < LuckyBurger> @_@
18:07 < tnorris> LuckyBurger: output `python --version`
18:08 < LuckyBurger> hmm
18:08 < CoverSlide> LuckyBurger: what OS/distro?
18:08 < LuckyBurger> that did not work
18:08 < LuckyBurger> CentOS 5.7
18:09 < LuckyBurger> [root@server node]# python -V
18:09 < LuckyBurger> Python 2.4.3
18:09 < CoverSlide> oh wow
18:09 < CoverSlide> i think you need > 2.5 or 2.6
18:09 < CoverSlide> or even 2.7
18:09 < CoverSlide> i don't remember
18:09 < CoverSlide> i haven't tried with anything other than 2.7
18:10 < LuckyBurger> @_@ its up to date according to my repos
18:10 < CoverSlide> yes the problem is the repos
18:10 < CoverSlide> very old
18:10 < LuckyBurger> sigh
18:10 < LuckyBurger> yay compiling python!
18:11 < CoverSlide> that tends to be the problem mixing enterprise-grade software with cutting-edge software
18:12 < LuckyBurger> :(
18:12 < LuckyBurger> i know...i should just wait until 1.0 is released
18:12 < LuckyBurger> lol
18:13 < LuckyBurger> ubuntu had a rpm package... i remember i installed it quite easily on my vm
18:14 < misterhat> "ubuntu had a rpm package"
18:14 < misterhat> what
18:15 < tnorris> can anyone point me to documentation of what happens to the lib/*.js files when node is compiled? I don't see them in the out/Release folder.
18:16 < LuckyBurger> xD i dont remember it was last week and I had a few drinks :D
18:16 < LuckyBurger> but it was quite simple
18:16 < CoverSlide> isn't there like a deb2rpm or something
18:17 < tnorris> LuckyBurger: this might help: http://mythinkpond.wordpress.com/2011/12/28/how-to-upgrade-to-python-2-7-on-centos/
18:17 < CoverSlide> actually, the fedore maintainer for node comes in here sometime
18:17 < CoverSlide> *fedora
18:18 < CoverSlide> maybe centos 6 has updated python?
18:18 < LuckyBurger> yeah perhaps. but my vps provider only has 5.x
18:18 < CoverSlide> can't you just take the centos 6 package?
18:19 < LuckyBurger> naw its fine. Ill just compile python
18:20 < CoverSlide> not sure which is more painful
18:20  * CoverSlide shrugs
18:20 < LuckyBurger> hopefully it will work :X i tried to compile mono last week, but it gave me out of memory errors :(
18:20 < tnorris> LuckyBurger: might try using clang instead.
18:21 < tnorris> I find it works a lot better with my tiny ec2 instances.
18:22 < othiym23> drudge: jstags is a work in progress, and it probably kinda already works with a little shimming into vim
18:23 < othiym23> drudge: looking to carve out some time to work on it in a few weeks
18:23 < drudge> othiym23: i was looking at the esprima stuff in scripted
18:23 < Wizek> ljharb, CoverSlide, I'm back, sorry for de delayed response: I don't intend to inject variables, I'd most likely only use it's `<% include file %>` feature (to include some headers and footers for a simple static site)
18:24 < maushu> Did something happen to prototypes and module exports? I keep getting the error that the prototypical function doesn't exist.
18:25 < LuckyBurger> hmmm... new problem... i cant remove the old python version since itll break 200 packages xD
18:25 < othiym23> drudge: I think the main thing I want to add to jstags that's not in a lot of the other tag editors is node-specific tagging
18:25 < othiym23> i.e. dealing with exports properly
18:25 < drudge> othiym23: yeah exactly
18:25 < aerolith> LuckyBurger: http://pypi.python.org/pypi/virtualenv might help
18:25 < drudge> that is why i was looking at scripted, it seems to do it well for node
18:25 < othiym23> I'll take a look
18:26 < othiym23> also, I'm more than happy to take pull requests on jstags, or you can fork it yourself ;)
18:26 < othiym23> working with esprima is super easy
18:27 < LuckyBurger> or i change python to python2.7 in configure :x
18:28 < drudge> othiym23: like here is some sample output from scripted's esprima plugin https://gist.github.com/dca20be9d74d87333126
18:29 < CoverSlide> LuckyBurger: if you're compiling locally, usually i have $HOME/bin/python symlinked 
18:29 < CoverSlide> I have a similar problem on arch where python3 is the default
18:30 < LuckyBurger> compile error... hmm
18:30 < othiym23> drudge: I think I'll need to set some time aside to play with scripted, sorta hard to understand how working with that is from the JSON alone
18:30 < tnorris> LuckyBurger: same?
18:30 < LuckyBurger> http://pastebin.com/G4kxjqst
18:30 < LuckyBurger> nope
18:30 < LuckyBurger> before it was configure that was complaining
18:30 < LuckyBurger> this is when i run make
18:30 < CoverSlide> LuckyBurger: https://projects.archlinux.org/svntogit/community.git/tree/trunk/PKGBUILD?h=packages/nodejs#n27 << check the build function, it gives you all the necessary sed calls
18:31 < LuckyBurger> what is that CoverSlide ? :)
18:31 < CoverSlide> it's the build script for nodejs on arch
18:31 < LuckyBurger> im in CentOS
18:32 < drudge> othiym23: yeah, i'm playing in https://github.com/scripted-editor/scripted/blob/master/client/scripts/plugins/esprima/esprimaJsContentAssist.js
18:32 < drudge> and https://github.com/scripted-editor/scripted/blob/master/client/scripts/plugins/esprima/indexerService.js
18:32 < LuckyBurger> http://pastebin.com/G4kxjqst hrm
18:32 < CoverSlide> line 27 shows the different sed things that need to be changed, so i would change 2 to 2.7 in your case
18:33 < CoverSlide> for  lines 27-32
18:34 < CoverSlide> hm openssl error?
18:34 < LuckyBurger> weird...
18:34 < CoverSlide> that's odd
18:34 < CoverSlide> especially since it's using the bundled openssl
18:34 < LuckyBurger> openssl version - 0.9.8
18:35 < CoverSlide> maybe try ./configure with --shared-openssl
18:35 < LuckyBurger> kk recompiling
18:38 < LuckyBurger> does appear that worked :)
18:38 < jazjefferson> php
18:39 < jazjefferson> teste
18:39 < LuckyBurger> simple php test? <?php phpinfo(); ?>
18:40 < CoverSlide> ok that can't be good. I'm seeing "/phpMyAdmin/scripts/setup.php" and "/w00tw00t.at.blackhats.romanian.anti-sec" but I know I'm not exposed to the outside
18:40 < CoverSlide> in logs
18:40 < mscdex> heh
18:40 < CoverSlide> im a bit scared now
18:41 < LuckyBurger> um... yes
18:41 < LuckyBurger> you should be
18:41 < LuckyBurger> lol
18:41 < CoverSlide> maybe someone's computer got a virus
18:41 < LuckyBurger> is that on your server?
18:41 < CoverSlide> it's on my dev box
18:42 < LuckyBurger> no internet to dev-box?
18:42 < LuckyBurger> not even SSH?
18:43 < CoverSlide> I'm pretty sure nothing's exposed. to my dev box specifically
18:43 < LuckyBurger> hmm
18:43 < LuckyBurger> well if u see a file like that on it.. :P
18:43 < LuckyBurger> id say it is hehe
18:44 < LuckyBurger> new error...still to do with ssl :\
18:44 < LuckyBurger> http://pastebin.com/JsA1rUmq
18:44 < CoverSlide> 122.224.6.43 -> Shaoxing, China
18:45 < DaMorpheuS> guys question I made an node js api which im using to connect to through an emberjs created from end. Im using passport to authenticate but now my client doesn;t recieve a session cookie. Does someone knows why?
18:45 < LuckyBurger> time to change root password lol
18:46 < Wizek> How do I compile an .ejs (uses includes) file into a .html file?
18:47 < CoverSlide> Wizek: write it yourself. it should be trivial
18:47 < CoverSlide> afaik there's nothing in the wild that does this for you
18:48 < Zitter> I'm trying this tutorial: http://androidtoys.net/2012/10/remote-logging-with-arduino-and-node-js/ but after launched node udpwrite.js I get no results with netstat -tan|grep 6000 any hint? 
18:48 < Zitter> I mean, it seems that it is not running, and anyway no data arrives from arduino
18:53 < othiym23> is there an easy way to calculate the size of an object and all its properties from inside Node?
18:55 < Zitter> ok, missed -u option on nestat, sorry for stupid q. :)
18:56 < mscdex> LuckyBurger: what are you trying to do?
18:56 < tnorris> othiym23: like what size it would be if you `JSON.stringified()` it?
18:57 < othiym23> tnorris: no, how many bytes it occupies in memory
18:57 < LuckyBurger> CoverSlide it looks like the d/l source from the site compiled fine
18:57 < LuckyBurger> the git did not
18:57 < othiym23> I mean, yeah, I could run JSON.stringify(object).length, but I'm more just trying to ballpark how big a rather large component I've built is
18:58 < CoverSlide> are you trying to compile master?
18:59 < CoverSlide> master may be in a non-working state
18:59 < CoverSlide> i'd go for a tagged release
18:59 < tnorris> othiym23: I would suggest using https://github.com/bnoordhuis/node-heapdump
18:59 < LuckyBurger> Yeah i think it was master
18:59 < CoverSlide> there's also linux binaries
19:00 < LuckyBurger> yeah but meh. compiling is fine :) i think i got it
19:00 < mscdex> ^
19:00 < tnorris> othiym23: but from withing the process, no way. take a fn for example. v8 will store the raw string, and then you have the compiled code, which changes over time as the function is run.
19:00 < LuckyBurger> yep :)
19:00 < LuckyBurger> w00t
19:00 < LuckyBurger> thanks for your help CoverSlide :)
19:01 < Kudos> I'm hoping someone can help with the http.request issue I'm having https://gist.github.com/b05efeeeb841d1b52edb
19:02 < Kudos> I have a listener on the error event for http.request, but the exception still bubbles up and crashes node
19:03 < Kudos> After googling, having an listener on the error event was the only advice I could find
19:03 < Kudos> so, that doesn't help much
19:03 < syntaqx> try/catch ?
19:04 < Kudos> i wrapped the whole app in a try catch, something else catches it first and bails
19:04 < Kudos> and by app I mean reverse proxy in a few lines of JS
19:05 < Kudos> It's proxying requests to an API I don't control, and I'm fairly sure the proxy is returning something that http.request doesn't like
19:05 < Kudos> the API is returning*
19:06 < syntaqx> Try adding a process.on('uncaughException' ?
19:06 < syntaqx> Then just console.log it
19:06 < aandy> is there a way to store the value of time labels? (console.time('...'); console.timeEnd('');) if i wanted the duration, or do i have to compare two new Date()'s ?
19:06 < tnorris> aandy: use Date.now(), but yes.
19:06 < aandy> okay, thanks
19:08 < syntaqx> Kudos, did that help?
19:08 < Kudos> yeah, stops it crashing at least
19:09 < JohnnyL> I found tiddly wiki and some other one written in javascript. does anyone know of any better wiki-creator software written in Node.js?
19:09 < Kudos> ah, much more helpful
19:09 < Kudos> { [Error: Parse Error] bytesParsed: 379, code: 'HPE_INVALID_CONSTANT' }
19:09 < syntaqx> Kudos, Do a http://pastebin.com/PGuv7qjb for me, and see if it helps
19:09 < syntaqx> Ah, looks like you already did.
19:10 < syntaqx> But yeah, I'd just leave that in there. It'll help you in backtracing a bit.
19:11 < othiym23> tnorris: bleah, thanks, was hoping to avoid having to do it out of process
19:11 < othiym23> tnorris: is there a reason you're using node-heapdump over node-webkit-agent for your Buffer profiling?
19:14 < tnorris> othiym23: bnoordhuis showed it to me, and I used it to create https://npmjs.org/package/ofe.
19:14 < othiym23> tnorris: I know ;) -- I was wondering if node-webkit-agent wasn't working for you for some reason
19:15 < mscdex> Kudos: fwiw you should be able to catch that error on the request object itself if you have a fairly recent version of node
19:15 < tnorris> othiym23: have never tried it. i'll give it a shot though.
19:15 < Kudos> mscdex 0.8.14
19:15 < mscdex> Kudos: yeah, so req.on('error', function(err) { });
19:16 < Kudos> mscdex: i have that, it doesn't catch it
19:16 < CoverSlide> seems an issue with ry's http_parser
19:16 < CoverSlide> but more likely you're getting unparseable data
19:17 < mscdex> Kudos: ok, i can't remember if the fix got applied to v0.8 or not. you might have to listen on req.connection.on('error'...)
19:17 < Kudos> getting unparseable data should still be catchable though
19:17 < Kudos> mscdex: i'll try that, thanks
19:17 < mscdex> i'd also try firing up wireshark and see what you're getting back
19:17 < tnorris> othiym23: i'm want to extend ofe so devs can more easily detect why an app crashed. cpu profiling would be sweet.
19:17 < Kudos> nope, doesn't catch it either
19:17 < mscdex> see what it's choking on exactly
19:18 < CoverSlide> true
19:19 < mscdex> ok, it looks like the fix was only applied to master and not v0.8
19:19 < mscdex> https://github.com/joyent/node/commit/c78678b
19:19 < mscdex> not sure why it wasn't back-ported, since it is a bug
19:21 < Kudos> can anyone tell me what HPE_INVALID_CONSTANT actually means?
19:21 < Kudos> I've reviewed the C, still doesn't make it clearer
19:22 < Tixz> Hey, I'm trying to set a property on a function, but can't seem to get a solution that "feels" right: http://pastebin.com/dQCpB84e
19:23 -!- mode/#node.js [+o piscisaureus_] by ChanServ
19:25 < mscdex> Tixz: it's because .message won't get assigned until the function you're returning is called in the first case
19:26 < misteroneill> Tixz: also in case1 i believe the value of "this" will be the global object
19:26 < Tixz> misteroneill: It's case1's syntax I want to get to (or similar)
19:26 < mscdex> yeah, you should use rule.message instead
19:27 < Tixz> mscdex: Arr great!
19:27 < Tixz> Works
19:27 < Tixz> What if the function isn't named? Is there some way to attach message anyway?
19:27 < Tixz> I mean the function that's "rule" in my example
19:28 < boucher-macbook> anyone using the jake module know if there's a way i can get async tasks to print stack traces on exceptions?
19:28 -!- mode/#node.js [+o piscisaureus_] by ChanServ
19:28 < syntaqx> Anyone have any opinions on the best way to make a "passthrough" to an API?
19:28 < syntaqx> Basically, I would go to
19:28 < syntaqx> localhost:8080/something/something/something
19:28 < mscdex> Tixz: not unless you assign the function you're returning to a variable and then reference that instead
19:28 < syntaqx> And it would make it http://theapi.com/something/something/something
19:29 < Tixz> mscdex: So that's the second example or?
19:29 < syntaqx> And duplicate the request, adding some signing logic.
19:29 < mscdex> Tixz: e.g. `var fn; return fn = function(message) { fn.message = message; ..... };
19:29 < Tixz> mscdex: Alright, thanks :) I will try and look for another way around this
19:30 < mscdex> syntaqx: a simple http.Server that peeks at the req.url ?
19:31 < mscdex> unless you want to pass everything through
19:31 < mscdex> then it's easier
19:31 < syntaqx> It should literally pass everything through
19:31 < syntaqx> Like..
19:31 < syntaqx> PATCH /something/something
19:31 < syntaqx> Etc.
19:31 < syntaqx> Could be HEAD, POST, GET, whatever
19:31 < syntaqx> It literally just needs to sign it with a private key
19:31 < syntaqx> And pass it to the "right" URL
19:31 < mscdex> a TCP server?
19:31 < mscdex> heh
19:31 < syntaqx> HTTP
19:31 < syntaqx> More specifically.
19:32 < mscdex> i know, but just set up a TCP server so no parsing is done
19:32 < mscdex> then you can re-send as-is
19:32 < mscdex> unless you need to change some headers or something
19:32 < mscdex> like Host
19:32 < syntaqx> I need to add headers
19:33 < troy--> hello. Can someone help me understand this https://github.com/starfish-prime/express-pagination
19:33 < troy--> how to use it
19:33 < troy--> I'm new to node.js
19:33 < troy--> it says != paginate(count, resultsPerPage, currentPage)
19:34 < troy--> i can set the values count, and resultsPerPage, and currentPage, but where does paginate come in?
19:34 < CoverSlide> starfish prime? Sounds like a transformer
19:34 < CoverSlide> Beast Wars 2: Underwater Robots
19:35 < CoverSlide> troy--: app.helpers
19:36 < CoverSlide> the helpers object gets exposed to your view
19:36 < CoverSlide> depending on your view engine
19:36 < troy--> so inside of my view, how do i call paginate
19:36 < CoverSlide> depends on the view engine
19:37 < chakrit> Is it possible to start a child_process (spawn or exec) w/o bufferring?
19:37 < chakrit> i.e. i want all stdout output as soon as it happens
19:37 < chakrit> maybe set buffer size to very small or something.
19:37 < CoverSlide> hmm did app.helpers get deprecated?
19:37 < CoverSlide> maybe it's app.locals?
19:38 < CoverSlide> i dunno, read up on express documentation
19:38 < troy--> i'm using express?
19:38 < jw___> starting child_process has nothing to do with bufferring
19:38 < chakrit> it does buffers stdout output.
19:38 < CoverSlide> troy--: are you?
19:39 < CoverSlide> troy--: you're the only one who can answer that question
19:39 < CoverSlide> troy--: it's only 52 lines of code, rtfs
19:40 < jw___> depending on the process not on how you start it
19:41 < CoverSlide> child_process.spawn doesn't buffer stdout
19:41 < CoverSlide> child_process.exec / execFile does
19:41 < troy--> read the f? s?
19:41 < chakrit> jw___ so it depends on the child process bufferring its own output?
19:42 < chakrit> just wrote a quick C program to test it out and still couldn't get real time. let me gist it in a bit.
19:43 < CoverSlide> if you listen on the stdout stream in the same context as the call to .spawn, there will be no buffering
19:43 < CoverSlide> because you'd start listening even before the process started
19:45 < chakrit> i understand, but that's not what i see. trying to track down what's wrong.
19:46 < chakrit> here's what i've got: https://gist.github.com/4227656
19:46 < chakrit> the c program prints HELLO every second, but runnning `node x.js` it waits for the whole 5 seconds before printing everything
19:48 < chakrit> ah, turns out it was error on the c code.
19:48 < chakrit> nvm, i fixed it. thanks anyway.
19:48 < jw___> @chkrit yes
19:50 < jw___> @chakrit np
19:53 < Leeol> Anyone have an example of streaming uploaded file chunks (say, with Express) directly to a destination mongo stream?
19:57 < Leeol> Hmm, looks like you can't, https://github.com/senchalabs/connect/blob/master/lib/middleware/multipart.js - No event to hook into, you have to write your own. Hmm
20:00 < CoverSlide> Leeol: https://github.com/felixge/node-formidable/blob/master/lib/multipart_parser.js
20:00 < CoverSlide> ^ that's what's under the hood of the multipart middleware 
20:01 < Leeol> CoverSlide: So a likely solution would be to build your own middleware that uses Formidable as a parser?
20:01 < CoverSlide> i feel he should move the parser into his own module
20:02 < CoverSlide> it's pretty useful by itself
20:02 < CoverSlide> in fact, i wanna hack on this a bit
20:02 < Leeol> Yea, `form.onPart` looks to be what i want (i'm guessing)
20:03 < rump> which series method do you think is most readable / maintainable?  im leaning towards either the object literal or event way:  https://gist.github.com/4227822
20:07 < rump> or maybe im missing the point all together
20:07 < CoverSlide> probably best to have it as modular as possible
20:08 < CoverSlide> using an array would be preferable to each function having to know whether it needs to emit 'one' or 'two'
20:08 < rump> i had that way first until i had a conditional which needed to break or retry the order of the array indices
20:09 < rump> i should just go see how connect does it
20:09 < rump> i like the next() way
20:10 < rump> i mean the easiest solution is to use async or similar but it just seems i need some kind of ordered control flow for every little thing including any time i access the file system or a database
20:10 < rump> even if just 2-3 steps deep inside some other logic
20:10 < rump> this should be easier :/
20:13 < rump> i was making these arrays of functions that were run in order and passing results all the way down, but then use cases got ugly when I needed to break out of the mold and had TJ voice in head when he says, "simple > DRY or *"
20:15 < FunnyLookinHat> rump, FWIW - I prefer object
20:16 < FunnyLookinHat> You can get a pretty good rhythm to your code with init() constructors and whatnot
20:16 < darrenlooby> var doublecurly = new RegExp(/\{{(?:\s*?.*?)*?\}}/g); = this is giving me {{example}}, rather than example when I use match... any clues what I need to do to change it?
20:17 < rump> FunnyLookinHat++
20:17 < FunnyLookinHat> rump, that being said - I feel your pain... JS is way too loose for me and I'm often wishing there were stricter code organization standards.
20:18 < rump> yeah i look at how everyone else is handling this in public repos and most of the time its just gross callback hell and if its not its all over the place different
20:18 < rump> but all of em rarely look maintainable
20:21 < rump> and then theres the few gems who never seem to run into this issue despite large projects
20:21 < rump> but i havent been able to figure out that secret yet
20:21 < FunnyLookinHat> ha
20:21 < FunnyLookinHat> Well - their projects are usually the least complex.
20:21 < FunnyLookinHat> Subway is actually a decent example...
20:22 < FunnyLookinHat> https://github.com/thedjpetersen/subway
20:22 < FunnyLookinHat> But again - each project initializes different, starts different, manages it's socket.io stuff differently, etc. etc.
20:22 < FunnyLookinHat> One of these days more projects will be built with node - that'll encourage more useful evaluation of the standards and best practices.
20:25 < rump> looks like subway is using the event emitter way
20:25 < rump> socket.emit('login_success'...
20:25 < FunnyLookinHat> Yeah.
20:25 < rump> maybe that makes sense for an event driven language
20:25 < FunnyLookinHat> But he's very consistent at least.
20:26 < rump> yeah this code actually smells nice
20:26 < FunnyLookinHat> ha
20:26 < FunnyLookinHat> But it's also a pretty simple problem that's he's solved.
20:27 < FunnyLookinHat> And - for example - one of the most complicated parts ( connecting to and working with an IRC server ) is just one of his dependencies
20:27 < FunnyLookinHat> So all he has to do is implement it.
20:27 < FunnyLookinHat> But he does it VERY nicely.
20:36 < rumpSubway> this is nice
20:37 < FunnyLookinHat> rumpSubway, lol
21:02 < MI6> joyent/node: Ben Noordhuis v0.8 * c79fd0e : doc: remove broken require.extensions example  Fixes #4384. - http://git.io/qoC1LQ
21:03 < mscdex> http://bit.ly/UIzNnr
21:19 < JohnnyL> There any node.js wiki builder that aren't twiddle?
21:32 < othiym23> JohnnyL: Smallest Federated Wiki https://github.com/WardCunningham/Smallest-Federated-Wiki
21:33 < othiym23> oops he left
21:33 < othiym23> too bad
21:33 < othiym23> Smallest Federated Wiki's pretty great
21:35 < CoverSlide> was ward at rtconf?
21:36 < CoverSlide> is this what's running c2.com?
21:39 < othiym23> I doubt it's running c2.com, and yeah Wart was at rtconf
21:39 < othiym23> delivering the exact same presentation he gave at Fluent
21:39 < othiym23> Ward
21:39 < othiym23> Jesus
21:39 < othiym23> that's the last time I have a burrito for lunch when I have a lot of typing to do in the afternoon
22:06 < MI6> joyent/node: isaacs streams2 * 54cd4a8 : lint (+53 more commits) - http://git.io/Zu374w
22:12 < MI6> joyent/node: isaacs streams2-net * 87a39b9 : test fixup (+16 more commits) - http://git.io/ehF3Xg
22:16 < Zak> othiym23: thanks for sharing that smallest federated wiki
22:21 < othiym23> Zak: np
22:36 < CamonZ> hi, I'm a total noob; where should I begin?
22:36 < superjoe> CamonZ, with a small fun project
22:37 < CamonZ> superjoe
22:37 < CamonZ> superjoe: sounds cool
22:37 < context> http://blazonapp.com/r/2059-HJufc8TRLl
22:38 < CamonZ> any good tutorials or articles to get started?
22:38 < context> camonz: start > programs > chrome
22:38 < context> err oops
22:38 < darrenlooby> var doublecurly = new RegExp(/\{{(?:\s*?.*?)*?\}}/g); = this is giving me {{example}}, rather than example when I use match... any clues what I need to do to change it?
22:38 < context> http://lmgtfy.com/?q=node+beginners+guide
22:39 < context> uhhh
22:39 < context> cause you have {{...}} in it?
22:39 < CamonZ> context: thanks
22:41 < darrenlooby> Original text {{example}} = returns {{example}}. So, how do I change it to merely = example?
22:41 < context> darrenlooby: that looks like it will succeeed on anything wrapped in {{ .. }}
22:41 < Zak> yuck... i just tried to install something via npm and it tried to run git
22:41 < context> remove the ?:
22:41 < Zak> is there any standardization around npm install?
22:42 < context> darrenlooby: and i think you want \{\{
22:42 < DaMorpheuS> got a problem with my api (written in node/express)
22:43 < DaMorpheuS> when I try to create an session with a cookie the cookie is not created on my client side
22:43 < DaMorpheuS> I don't know why
22:43 < context> darrenlooby: /\{\{....\}\}/g
22:44 < context> darrenlooby: i think you want: /\{\{([^(?:\}\})]*)\}\}/g
22:46 < acidjazz> ok i finally sort of hit a wall of clean code
22:46 < Sly> darrenlooby: as context pointed out, you need to escape all { and }s if you intend them to be used in the RegExp, because {} is a special operator in regex.
22:46 < acidjazz> im in my controller.. i have two db calls to make to compile my object to render w/ my jade view
22:46 < Sly> And if you're wanting to pull example out of it..
22:46 < acidjazz> each db call has a callback.. i need both callbacks to complete.. do i nest one in the other? how can that be clean code?
22:46 < Sly> Forget what I said earlier today about adding ?: and //g
22:46 < Sly> Because you'll have to actually go through the matches and pull it out.
22:46 < Sly> That, or rematch it.
22:50 < Sly> darrenlooby: https://gist.github.com/d5ac21b49f58242954f3
22:53 < acidjazz> noone?
22:53 < context> sly: heh ;) i should have just done none greedy :x
22:53 < Sly> context: true. Didn't want to mess with his regex too much, though.
22:53 < Sly> It's a bit easier to understand that way, imo.
22:54 < context> i know enough regex to know not to touch it if you dont have to
22:54 < niggler> regular expressions are beautiful
22:54 < chrisjaure> acidjazz: you could try the async module
22:54 < Sly> regex <3
22:54 < context> they can be
22:54 < Sly> Without regex, I'd be dead..
22:54 < context> niggler: they can also be a huge headache if put into the wrong hands
22:54 < Sly> xD
22:54 < context> read: my coworkers
22:54 < Sly> LOL, context.
22:54 < niggler> regexp parsing xml faster than using SAX
22:54 < Sly> Yeah, they are pretty horrible when people don't know how to use them..
22:54 < Sly> But..
22:55 < Sly> They're even worse when people use regex generators.
22:55 < niggler> dont complain about messy regexps until youve tried perl
22:55 < darrenlooby> context, I'm the wrong hands ;)
22:55 < Sly> niggler: ugh. I despise Perl.
22:55 < Sly> darrenlooby: did you see the gist I posted?
22:55 < context> well. perl is better than php
22:56 < niggler> perl is a pretty decent swiss-army knife
22:56 < Sly> I'd rather just use Node as my swiss-army knife, these days.
22:57 < Sly> #!/usr/bin/env node
22:57 < Sly> ;D
22:57 < yawnt> JUST USE LISP AS YOUR COMMAND LINE 
22:57 < Sly> NEVAR
22:57 < niggler> the thing i like about perl regexp is interstitial code
22:57 < yawnt> i know a guy that does that
22:57 < yawnt> he says it works cool
22:57 < Sly> I know a guy that would probably do it, too..
22:57 < yawnt> i might wanna give it a try
22:57 < Sly> Just because he's psychotically smart.
22:58 < yawnt> lol
22:58 < yawnt> o
22:58 < yawnt> *oh
22:58 < Sly> And so he could say he did it.
22:58 < darrenlooby> Sly, yea... just playing around with it now
22:58 < yawnt> i thought you were talking about me
22:58 < yawnt> until "psychotically smart"
22:58 < niggler> the thing about t
22:58 < yawnt> ç_ç
22:58 < Sly> darrenlooby: var matches = something.match(/yourregex/); if (matches) // Do something with the matches
22:58 < niggler> the thing about lisp is that it gets in your way when doing simple things
22:58 < niggler> parentheses from hell
22:58 < Sly> matches.forEach(function(match) { /* Do something with the match */ });
22:59 < Sly> etc.
22:59 < niggler> Sly you are missing a /g
23:00 < Sly> Oh, shit. That's right.
23:00 < Sly> That's for /g
23:00 < Sly> Forgot to metion that.
23:00 < Sly> xD
23:00 < Sly> *mention
23:00 < Sly> The second one is obvious. It just returns an "array" that's really an object, with .input and such.
23:03 < SrPx> Hello guys. I'm not exactly new to node.js but I've only used it for local scripts (!). There are some things I don't understand. First, what's node.js's actual purpose? To serve static pages via http, in place of apache? And what's the right way of doing this? I've heard there's a little building you have to do before actually comparing to apache?
23:04 < darrenlooby> Sly... I'm still playing around with earlier... I don't want to be greedy (I don't think), as all things will be {{camelCase}}. The regex that I got working today, works grate... only it still returns the {{}} around the bit that I want... so, I'm currently doing .replace("{{","").replace("}}","")) to get rid of. Strikes me as not a good way of doing things, if I can rid myself of the {{}} in the first regex
23:05 < Sly> darrenlooby: https://gist.github.com/d5ac21b49f58242954f3
23:05 < Sly> There's 3 different versions of what I made as an example for you.
23:05 < Sly> Just run those, and you should see how they work.
23:06 < niggler> you want to do nongreedy matching SLY
23:06 < Sly> AWERASDFPOIZNDFPOAIWENF
23:06 < niggler> '{{example}} {{example}}'.match(/\{{2}(.*)?\}{2}/g)
23:06 < niggler> >>>  '{{example}} {{example}}'.match(/\{{2}(.*)?\}{2}/g)
23:06 < purr> niggler: (object) ['{{example}} {{example}}']
23:06 < niggler> >>>  '{{example}} {{example}}'.match(/\{{2}(.*?)?\}{2}/g) @niggler
23:06 < purr> niggler: (object) ['{{example}}', '{{example}}']
23:06 < Sly> ORIGHT.
23:07  * Sly 's brain is off duty right now.
23:07 < niggler> >>>  '{{example}} {{example}}'.match(/\{{2}(.*?)\}{2}/g) @sly
23:07 < purr> sly: (object) ['{{example}}', '{{example}}']
23:07 < Sly> darrenlooby: read above
23:08  * niggler slaps Sly
23:08 < darrenlooby> Sly, working on it :)
23:09 < darrenlooby> Sly, niggler ... I think that's what I already have.... '{{example}} {{example}}' = (object) ['{{example}}', '{{example}}']
23:09  * Sly whimpers.
23:09 < Sly> I HAD 2 WRK TDAY NIGGLER!
23:09 < Sly> My brain is off duty, BECAUSE IT CAN BE!
23:09 < Sly> :x
23:09 < darrenlooby> Whereas I need '{{example}} {{example}}' = (object) ['example', 'example']
23:09 < mscdex> moar bots!
23:10 < Sly> darrenlooby: in the examples I showed you.. it should be (.*?)
23:10 < Sly> Not (.*)?
23:10 < Sly> I kept forgetting to change it when I updated it, since my brain has apparently shut down for the day.
23:10 < darrenlooby> lol
23:11 < Sly> thar, niggler.
23:11 < Sly> Updated.
23:11 < Sly> :P
23:13 < Sly> Nexxy, oh Nexxy..
23:15 < darrenlooby> Right, cheers guys... I'm off for a while. No doubt pester you again soon.
23:16 < Leeol> Question.. What are some active MongoDB libraries out there? Is Mongo-Native basically the only choice? MongoSkin seems poorly documented, Mongolian is great but there are many features missing and it looks to not have moved in 1-2 years.. are there some good options i am missing?
23:16 < Leeol> Or is Mongo-Native the only real choice?
23:19 < Riaku> i have possibly what is a stupid question to ask. kind of.
23:19 < Riaku> i've been messing with some node examples
23:20 < Riaku> and i can't seem to get node to read into the temp directory which obviously contains a file i placed there via upload.
23:20 < niggler> mscdex aware of any way to concat buffers without physically making a copy?
23:20 < Riaku> http://pastebin.com/1HJx9yGZ
23:20 < niggler> (without having to write my own wrappers)
23:28 < mscdex> niggler: how are you going to concatenate without copying of some kind?
23:29 < niggler> mscdex how would you treat a set of disjoint blocks as if it were a contiguous block?  math
23:29 < niggler> so if this unified buffer were the lazy concatenation, as it were, of b1 b2 and b3
23:29 < mscdex> well, that's not really concatenation then
23:30 < mscdex> that's more like a linked list of buffers
23:30 < niggler> sure
23:30 < mscdex> i wrote a module awhile back that handles that kind of thing, someone else did too -- maybe substack or someone
23:31 < mscdex> i never published to npm though..... and felixge stole the package name later on ;-)
23:32 < niggler> call it bain :)
23:33 < mscdex> meh, i like "buffy" more :-)
23:34 < mscdex> niggler: here's substack's module: https://github.com/substack/node-buffers
23:34 < mscdex> niggler: mine is here: https://github.com/mscdex/buffy
23:35 < mscdex> there might be others too, but i haven't had a need for that for a long time now
23:37 < bman> http://clang.debian.net/logs/2012-06-23/nodejs_0.6.19~dfsg1-2_unstable_clang.log anyone know how to resolve this test for test-net-pipe-connect-errors
23:43 < mscdex> bman: try upgrading?
23:43 < mscdex> bman: 0.8.15 is the latest stable version now
23:55 < E_mE> is their a Sync version of the Mysql.query() routine?
23:55 < E_mE> there*
23:59 < Jianju> Hello, folks!
--- Log closed Fri Dec 07 00:00:04 2012
