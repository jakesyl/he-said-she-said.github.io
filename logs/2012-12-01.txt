--- Log opened Sat Dec 01 00:00:32 2012
--- Day changed Sat Dec 01 2012
00:00 < superjoe> what's a good name for the method to start something executing
00:00 < superjoe> it will emit an 'end' event when done
00:00 < superjoe> begin
00:00 < superjoe> or start
00:02 < tnorris> superjoe: if the first thing to run, init. if will only run once, once. or possibly exec.
00:02 < tnorris> mmalecki: have a time when vowsjs.org will be back up?
00:02 < superjoe> tnorris, it's not an event - it's the thing to kick off processing
00:03 < superjoe> exec sounds good
00:06 < meltz> hello
00:06 < superjoe> hello
00:07 < meltz> i have a question about node clustering
00:07 < superjoe> ask
00:08 < meltz> does node clustering help with scaling on a multi-core machine when CPU is the bottleneck?
00:08 < superjoe> yes
00:08 < meltz> ok
00:09 < meltz> because I've noticed that when I run the 'top' linux command, cpu usage sometimes gets up to 100%
00:09 < acidjazz> my jade is currently processing spaces and tabs as jade stuffs 
00:09 < meltz> for my signle node process
00:09 < acidjazz> how can i specify either/or ?
00:09 < tnorris> meltz: it's very common to run many node processes on a machine w/ multiple cores.
00:09 < meltz> cool
00:10 < meltz> because I was confused that it was telling me cpu usage was 100%
00:10 < meltz> i didnt understand whether it meant 100% on one core, or across all cores
00:10 < tnorris> only one core.
00:10 < meltz> but i guess it must mean 100% on the one core
00:10 < meltz> yea
00:10 < meltz> and how many child processes are recommended?
00:10 < meltz> same number as cores?
00:11 < acidjazz> who here can tell me how to config jade 
00:11 < acidjazz> to only parse spaces or indentations
00:14 < tnorris> meltz: depends on what else you're running. my web apps usually run behind nginx, so they are going to need cycles too.
00:15 < acidjazz> HELLOOO
00:15 < meltz> tnorris: we have mongodb and redis on the same instance
00:15 < acidjazz> im on caffiene i need an immediate response
00:15 < acidjazz> meltz: that sounds efficient
00:15 < meltz> haha
00:15 < acidjazz> meltz: do you know jade
00:15 < meltz> keeping costs down
00:15 < acidjazz> i wanna convert some html to .jade but keep the html indented
00:15 < meltz> acidjazz: not too well
00:15 < acidjazz> how can i do
00:15 < meltz> personally i hate jade
00:16 < acidjazz> ok well this is not a conversation i want to have
00:16 < meltz> acidjazz: no idea, sorry
00:16 < meltz> tnorris: one process per core?
00:17 < tnorris> meltz: check how many cores redis and mongodb are using. for saftey only allocate number of cores left.
00:18 < meltz> tnorris: I only have two cores :(
00:18 < tnorris> meltz: lol. well if it's not production then allocate 2.
00:18 < meltz> tnorris: it's an AWS high-cpu medium instance
00:18 < meltz> tnorris: it is production lol
00:19 < tnorris> meltz: treat it as 5 cores. so allocate 3 to node.
00:20 < tnorris> just keep track of your load, disk io, etc.
00:20 < meltz> tnorris: why treat it as 5 cores?
00:21 < tnorris> acidjazz: have you tried `pretty: true`?
00:23 < tnorris> meltz: it's the way ec2 allocates process priority to their vm's. here's a simple (slightly outdated) explination: http://gevaperry.typepad.com/main/2009/03/figuring-out-the-roi-of-infrastructureasaservice.html
00:27 < MI6> joyent/node: Trevor Norris v0.8 * 6772308 : buffer: Don't double-negate numeric buffer arg  Fix #4331  Using double n - http://git.io/e5xx7w
00:27 <@isaacs> tnorris: thanks ^
00:28 < tnorris> isaacs: yeah, np.
00:28 <@Nexxy> lol elliottcable 
00:28 <@Nexxy> CoverSlide, was the issue addressed?
00:29 < CoverSlide> yeah i guess so
00:29 < CoverSlide> just a bunch of leave / join flooding
00:30 <@Nexxy> CoverSlide, yeah I see that now
00:30 <@Nexxy> CoverSlide, probably misconfigured clint
00:30 <@Nexxy> client*
00:30 < CoverSlide> yeah
00:30 <@Nexxy> CoverSlide, looks like freenode staff took care of it lol
00:35 < MI6> joyent/node: isaacs streams2 * 73a9534 : streams2: Unpipe on dest.emit('close') (+58 more commits) - http://git.io/yeGMYQ
00:37 < meltz> tnorris: thanks! so basically you multiply the number of cores by the number of compute units per core
00:37 < MI6> joyent/node: isaacs streams2-net * 99ba8bf : http: Coerce into old-mode. Sort of works. (+4 more commits) - http://git.io/j5HuvA
00:37 < meltz> tnorris: and you treat that as the number of virtualized cores
00:38 < tnorris> meltz: yeah. roughly.
00:38 < meltz> tnorris: it's weird but it works i guess
00:38 < tnorris> meltz: yeah. virtual allocation of hardware is a complex process.
00:39 < meltz> tnorris: I could imagine
00:41 <@Nexxy> \o/
00:43 < Hotroot> I'm my own worst enemy. I hate DOM work but I won't learn JQuery
00:43 < misterhat> i don't use jquery either 
00:46 < Hotroot> misterhat: I just hate what a pain in the ass adding and removing elements, etc. is. I need a box where the player types in their bet. So now new CSS rules, a createElement(div), and cE "p" and then some innerHTML editing, then appending, etc. or I have to do bulky junk with changing display:
00:46 < misterhat> heh i don't mind it tbh 
00:46 < misterhat> maybe i just hate myself
00:46 < Hotroot> lol
00:46 < Hotroot> I'm not even bothering with much CSS for now, might have to pay someone to make this look pretty
00:49 < AAA_awright> Hotroot: Do you have a better proposal to manipulate a complex DOM tree?
00:49 < AAA_awright> DOM isn't all that bad, really, especially considering how much it's capable of
00:50 < AAA_awright> *The DOM API
00:50 < misterhat> some of it is overly verbose
00:50 < misterhat> which can be dealt with by making your own "library"
00:50 < misterhat> then there's the issue with browser support
00:50 < misterhat> for some convenient  features
00:50 < misterhat> needs shims etc.
00:51 < mikeumus_> Hey Gang, I'm trying to get the fs module to load the static files but am getting a error on npm start" cmd https://gist.github.com/4179808
01:15 < Hotroot> This is weird
01:15 < Hotroot> In redis you can increment the value of a hash field, but not decrement it? 0.o
01:16 < Hotroot> Oh, you increment by a negative. Weird
01:16 < jden> @Hotroot hooray commutativity :)
01:18 < samholmes> is there a markdown channel on freenode?
01:29 < mscdex> anyone here ever had to deal with a duplex stream where both directions can be paused and have their own internal buffer?
01:30 < mscdex> and also a 'drain' event for incoming AND outgoing?
01:30 < mscdex> i'm trying to keep this as close as to The Node Way as possible
01:33 < mscdex> what's really causing the problem is that ssh2 uses a window for data transfer, and if the window reaches zero you have to wait for the server to say you can send x bytes more
01:34 < mscdex> so i need to be able to internally buffer outgoing data if needed until that message is received
01:36 < barce> sup
01:36 < AAA_awright> mscdex: What's the incoming data stream?
01:37 < AAA_awright> And why's everyone having trouble with streams all of a sudden, I've been giving lots of technical support over the last few weeks
01:39 <@konobi> mscdex: use 3 streams? one readable, one writeable and one duplex?
01:41 < mscdex> AAA_awright: this situation is more complex because it's like a duplex stream (TCP) within a duplex stream (ssh2 channel)
01:42 < mscdex> for example, i can't just send TCP NAK when i start receiving too much data for a particular channel, because then that would affect the entire connection
01:42 < mscdex> and other issues
01:46 < AAA_awright> mscdex: I think you can, TCP doesn't just stream data at an infinite rate
01:46 < AAA_awright> It is in fact bandwidth-limited, somehow
01:46 < jesseTaylor> is there a way to stream youtube with node through nowjs or something similar, with video and audio and have it update video positions depending on the part of the video
01:47 < jesseTaylor> i havent been able to find a way
01:47 < mscdex> AAA_awright: i mean there is flow control at the ssh protocol level in addition to at the TCP level
01:47 < ffog> jesseTaylor: possible yes, easy maybe no
01:48 < AAA_awright> mscdex: I'm not familiar with this but you should still be able to pause the TCP stream?
01:50 < mscdex> AAA_awright: then that would pause everything. ssh lets you do multiplexing. so if i have a large SFTP file transfer going and i'm also in an interactive terminal session and i pause the TCP connection, that affects both the file transfer AND the terminal session
01:50 < jesseTaylor> ive been able to do it with a canvas and m4v file streaming from a video element and have it display on other screens, but i want to be able to do it with youtube / vimeo urls
01:51 < AAA_awright> mscdex: So it's a multiplex stream then
01:51 < AAA_awright> And the SFTP stream doesn't have its own pause method?
01:52 < ffog> the youtube and vimeo api's allow for it
01:53 < ffog> i haven't seen a great library for it (syncing)  but something may exist
01:55 < ffog> can youtube/vimeo be displayed on canvas?
01:56 <@konobi> mscdex: my idea not make any sense?
01:56 < elliottcable> Nexxy: hm?
01:57 < AAA_awright> konobi: I don't understand the problem that that would solve
01:58 < _numbers> how does a function like fs.readFileSync() implement blocking? e.g. if i have a function that i know will only ever take 10ms and i'm willing to block for that, whats the common way to block? or is it evil?
02:01 < clever> _numbers: its doing something that can only be done from c++ code
02:01 < clever> if your only using js, then give up, just do it the right way :P
02:03 < _numbers> well i figure i could use either setTimeout() to poll or while(wait){/* do nothing */} to really block but eat the cpu
02:04 < _numbers> but ya i guess its better to implement flow control even if it means patching upstream
02:04 <@konobi> AAA_awright: you could pause/resume on either the readable or writeable streams as needed
02:05 < AAA_awright> konobi: You can do that already, pause only pauses the incoming stream
02:05 < AAA_awright> A duplex stream is two streams, an outgoing write stream and an incoming read stream with pause/resume
02:05 <@konobi> you can pause on both in and out though
02:06 <@konobi> write.pipe(duplex) duplex.pipe(read)
02:06 <@konobi> then you have write.pause() and read.pause()
02:09 < AAA_awright> ... What?
02:09 < AAA_awright> Why would you want to?
02:09 < AAA_awright> The issue is controling the rate of incoming data, only
02:10 <@konobi> no... he also wants to pause the outgoing until he recieves a message saying send more
02:11 < AAA_awright> Right, where's THAT data source coming from?
02:11 < AAA_awright> Why does it need to be buffered?
02:15 <@konobi> many protocols have flow control atop tcp
02:16 <@konobi> one good example is VNC or RDP
02:16 < MI6> joyent/node: Lewuathe v0.8 * 4d0fcd5 : Fix dropped html tag - http://git.io/C6RlIw
02:17 <@konobi> "until i move my mouse or something on screen changes... don't bother sending anything"
02:53 < jesseTaylor> anyone used node.js with flowplayer to stream videos?
03:40 < Hotroot> How much do licenses matter on server software? If something is on github, and under a restrictive license, can't I always at least run it on my server?
03:40 < adlwalrus> Hotroot: what restrictive license?
03:41 < Hotroot> Well, say no license, which is all rights reserved
03:41 < adlwalrus> Hotroot: then, technically, I think it's illegal.
03:41 < Hotroot> How would that be?
03:41 < Hotroot> I'm not distributing their software to anyone, just using it
03:41 < adlwalrus> but a) who gives a shit, and b) it's legal with GPL
03:41 < adlwalrus> right.
03:42 < adlwalrus> but "use" is one of the rights
03:42 < Hotroot> So if I release JS code, nobody can legally run it?
03:42 < adlwalrus> (IANAL but I've done my fair share of reading.)
03:42 < adlwalrus> correct.
03:42 < adlwalrus> though, there's a concept of fair use
03:42 < Hotroot> lol, oh copyright law
03:42 < misterhat> http://imgs.xkcd.com/comics/pointers.png
03:42 < misterhat> lold
03:42 < adlwalrus> but taking an entire publication and deploying it on your server I would imagine does not count as FU
03:43  * adlwalrus checks the link
03:43 < adlwalrus> hahaha
03:44 < adlwalrus> Hotroot: the GPL, for instance, addresses four legal freedoms: use, study, modification, + distribution
03:44 < adlwalrus> those are all freedoms that must, legally speaking, be explicitly granted to you by the copyright holder, AFAIK.
03:44 < misterhat> Ȃ yeh
03:45 < adlwalrus> the GPL grants these 4 freedoms so long as the license is retained on further distributions.
03:45 < misterhat> ‮sddsadas
03:45 < adlwalrus> misterhat: ??
03:45 < misterhat> nothing sorry
03:45 < adlwalrus> Hotroot: stll there?
03:45 < misterhat> man i can't believe how i didn't realize some of the major flaws with php
03:46 < Hotroot> adlwalrus: Yup
03:49 < AAA_awright> "freedoms" which I'd call grants or entitlements
03:50 < AAA_awright> Hotroot: If it's distributed on GitHub then it must be under an Open Source license, so the ability to run it is implied
03:50 < AAA_awright> However without a particular license I'd be wary of redistributing it yourself
03:51 < Hotroot> AAA_awright: Hmm. This particular example doesn't do what I need anyway, so it's fine
03:51 < Hotroot> I'm writing Pai Gow Poker, so I need the ability to compare hands of just 2 cards
03:52 < AAA_awright> So... iterate through the items and compare them?
03:53 < Hotroot> It uses poker rankings
03:53 < Hotroot> I figured someone else had already written a poker engine, but the one I can see in JS only supports 7 card hands
03:55 < Hotroot> It's to show off to prospective employers though, so probably better to write it myself anyway
03:55 < freewil> lol
04:14 < adlwalrus> AAA_awright: can you cite a source on github license policy/enforcement?
04:14 < adlwalrus> I don't believe there is any whatsoever
04:14 < adlwalrus> I think it can be on GH with "all rights reserved".
04:15 < AAA_awright> acidjazz: There's https://github.com/blog/11-github-free-for-open-source to start
04:16 < adlwalrus> Hotroot: anyhow, what I was getting at was thaat for the GPL, use, per se, doesn't entail further distribution, so the virality of it doesn't really come into effect.
04:16 < adlwalrus> AAA_awright: woah, there tiger, on the tab completion
04:16 < AAA_awright> O.o
04:17 < AAA_awright> How did that happen
04:18 < AAA_awright> Oh yeah I forgot, copyright doesn't even come into play if you're not redistributing
04:18 < AAA_awright> Hotroot: ^
04:18 < adlwalrus> AAA_awright: I don't believe that's the case.
04:18 < AAA_awright> Copyright limits redistribution, not use
04:19 < adlwalrus> AAA_awright: and I odn't think your bloglink is applicable.
04:19 < adlwalrus> you sure?
04:19 < adlwalrus> AAA_awright: they don't give any definition of open source, they don't defer to the OSI's definition, either.
04:20 < AAA_awright> open source is a well defined term
04:20 < AAA_awright> Distribution might include public performance, but that's not really applicable to software, where output isn't copyrightable
04:20 < adlwalrus> seeing as github technically prevents source code privacy for free accounts, it's kind of like saying "free accounts have to publish source code"
04:21 < adlwalrus> AAA_awright: yeah, I was sort of drawing on my understanding of copyright from the arts a little there.
04:21 < adlwalrus> so fair call.
04:21 < adlwalrus> but open source means different things depending on who you ask, except for the fact that the source is published in some way.
04:22 < AAA_awright> I've read literally all the statute and court rulings
04:22 < adlwalrus> so they make no mention of licensing
04:22 < adlwalrus> AAA_awright: oh, yeah?
04:22 < adlwalrus> the blog post still seemed pretty irrelevant, though.
04:22 < AAA_awright> Lemme reorder that for clarity, I've read a great number of court opinion, and literally all the statute
04:23 < adlwalrus> all *what* statute?
04:23 < AAA_awright> Without forcing people to choose a particuar license, and because you don't need a license to run software, it's probably not relevant anyways
04:24 < AAA_awright> Copyright statute, it's scattered in a handful of different parts throughout the USC
04:25 < adlwalrus> alright, so then I'll assume that you know your shit pretty well. :)
04:25 < AAA_awright> I wouldn't assume anything like that, so do the lawyers arguing the cases but one of them ends up losing
04:25 < AAA_awright> :p
04:26 < adlwalrus> AAA_awright: what did your other msg mean, though?
04:26 < adlwalrus> "Without forcing..."
04:27 < AAA_awright> Without GitHub forcing uploaders to choose a particular license, they just say it needs to be a license, but they never do anything to enforce it
04:27 < balupton_> Anyone know how I could get the results of https://npmjs.org/browse/keyword/docpad-plugin in JSON format?
04:31 < adlwalrus> AAA_awright: still don't follow ya'.
04:31 < AAA_awright> um
04:31 < AAA_awright> Well the blog post simply isn't relevant since copyright isn't going to grant anyone permission to use software anyways
04:32 < AAA_awright> And if you were going to fork someone's repo, you still don't know *which* license lets you do so
04:32 < adlwalrus> why do you have to buy a license to use, say, microsoft word, then?
04:32 < AAA_awright> So you can acquire a copy of it
04:32 < AAA_awright> That's distribution
04:32 < adlwalrus> I could put code up on my webserver, and at the top, in a comment, say, "All rights reserved"
04:33 < AAA_awright> You're expected to be able to download a copy if you do that, that's like handing out handbills and say "but don't read them! You need to buy a license to do that!"
04:33 < AAA_awright> Or rather, you're expected to be able to use it in some way if it's made available
04:34 < AAA_awright> oh, did you PM me?
04:34 < adlwalrus> that should mean that while it's physically possible for you to obtain the full source code, it should stilll be illegal copyright infringement for you to compile, run, otherwise use, modify, or distribute it, no?
04:34 < adlwalrus> AAA_awright: yup.
04:35 < AAA_awright> Being able to modify code for your own purposed can't be prohibited by copyright
04:35 < adlwalrus> oh, I just read your last three.
04:35 < AAA_awright> It might be under EULA or patent or something, but not a copyright license
04:35 < adlwalrus> oh, ok. well that's cleared up, now.
04:36 < adlwalrus> wait, doesn't the "L" in "EULA" stand for "license", as in, "copyright license"?
04:38 < adlwalrus> I mean, isn't the GPL a form of EULA?
04:38 < AAA_awright> No, you're not required to agree to it
04:38 < AAA_awright> It even says that
04:38 < AAA_awright> (Even if it didn't say that it's still a copyright license)
04:40 < adlwalrus> but an EULA you are required to agree to?
04:43 < misterhat> any1 here do/done php?
04:43 < adlwalrus> misterhat: a little, but there's ##php for that.
04:44 < misterhat> no i'm just curious
04:44 < misterhat> i don't need any assistance or anything
04:44 < pachet> <
04:44 < pachet> regrettably
04:44 < misterhat> ya
04:51 < mscdex> i do mostly PHP for the day job yet
04:51 < mscdex> although i've been "sneaking" in node stuff :>
04:52 < pachet> yeah, i find myself kind of longingly implementing api's based on node modules i like
04:58 < amunra> how do i go about posting a file in nodejs? i already have a function that uses the file's data (type, size, path, etc). I just want to know how I can post the file so it can actually RETRIEVE the file's data.
04:58 < substack> amunra: like http post?
04:59 < substack> you can use http.request http://nodejs.org/docs/latest/api/http.html#http_http_request_options_callback
04:59 < substack> or the request module http://github.com/mikeal/request
04:59 < substack> and request.post()
05:12 < NodeMangler> I am new on this channel and was looking for help on how to serve an html page with an applet via node
05:17 < AAA_awright> In what conditions would I want to use Array.isArray(v) versus (v instanceof Array)
05:17 < NodeMangler> I  am new on this channel and was looking for help on how to serve an html page with an applet via node
05:17 < AAA_awright> It has something to do with duck typing
05:17 < AAA_awright> I'm pretty sure for security I want to go with instanceof but maybe there's a compelling reason to do otherwise
05:18 < NodeMangler> The page and applet are loaded just fine with tomcat but fails with node
05:24 < pachet> NodeManger: if this were #javascript, you'd be on the right track
05:25 < NodeMangler> pachet I am not having trouble with javascript.  I just cannot get the html file to load the applet when served from node
05:25 < pachet> NodeManger: oh woops, that was supposed to be @AAA_awright
05:26 < AAA_awright> Hm?
05:26 < NodeMangler> pachet: np,  I am just looking for the right expert to help me solve this problem
05:26 < AAA_awright> pachet: But because this is #Node.js... I don't?
05:26 < AAA_awright> or...?
05:26 < pachet> AAA_awright: the historical reason for using duck typing in checking whether an object is an array is that it avoids the false negative returned by 'foo instanceof Array' in a browser situation with iframes
05:27 < pachet> but this being #node, exactly
05:27 < pachet> that said i'm fairly certain Array.isArray is more performant
05:27 < pachet> and as it's actually in the spec now, you might as well
05:27 < AAA_awright> That has to do with contexts though
05:27 < AAA_awright> I know you can set different modules to have different Array contexts
05:27 < AAA_awright> hmm
05:28 < pachet> http://es5.github.com/#x15.4.3.2
05:28 < AAA_awright> That's what I'm reading
05:28 < AAA_awright> Actually http://ecma-international.org/ecma-262/5.1/
05:28 < AAA_awright> Because of the silliness of creating new Array prototypes that use the same internal methods
06:30 < L10n> i need to run a long task, for example lets say im parsing a large file. id like to be able to track the progress of that task in the browser. my concern is if the connection gets severed, say by the user closing the window. how can i keep track of that task and tie it to a session? are they're any useful libs in node for doing this? 
06:36 < distilledchaos> Anyone here know Passport.js?
06:38 < distilledchaos> Anybody?
06:40 < substack> distilledchaos: you should ask specific questions instead of conducting polls of people who happen to be reading the irc
06:41 < substack> the latency of asking preliminary questions that require a response before subsequent lines of inquiry is too high for most people to bother
06:41 < misterhat> i like you substack
06:42 < distilledchaos> substack: Good point.  I'm using passport-google, and I'm trying to limit access to a set of users, based on, say, email address.  Where should I place the logic to reject the user, and how does passport.js handle that?
06:44 < substack> distilledchaos: you could start gathering information about that by logging the request urls with app.use(function (req, res, next) { console.log(req.method + ' ' + req.url); next() })
06:45 < substack> and in that logging handler you could cross-reference request parameters with destinations to decide when not to call next9)
06:45 < substack> *next()
06:45 < substack> is how I might go about that, not having messed with passport at all
06:46 < L10n> substack: since you're responding, any hints or atleast keywords i can type into google to discover some info on my question? :D
06:46 < distilledchaos> substack: I suppose that's one way to go about it, but I'm looking for more application-level, rather than request-level.  In other words, not letting the user login in the first place, rather than just refusing to give them responses.
06:48 < substack> L10n: just var jobs = {}
06:49 < L10n> substack: werd
06:49 < substack> jobs[id] = createJob()
06:49 < L10n> seems i was overthinking then
06:49 < substack> then jobs could just emit events
06:49 < substack> like 'progress', 0.62
06:50 < substack> and 'end'
06:50 < substack> then just delete the job when it's over with
06:52 < L10n> gotcha. ill play around with implementing and ask some follow up questions. thanks.
06:53 < misterhat> i really like these simple solutions
06:55 < kenperkins> anyone around to help me understand a weird condition with connection pooling?
06:56 < kenperkins> so I've got some code that does an async.forEachLimit through 100k keys, doing a db get for each one. So far so good, I never get more than ~15 time_wait connections on my node box, nor my db
06:57 < kenperkins> however, if, instead of the db.get, I use a wrapper function that inline has 3 redis calls in an async.parallel, connection pooling seems to totally fail
06:57 < kenperkins> and within a few seconds I have ~2500 open connections and eventually i hit the os limit and it crashes ungracefully
06:58 < kenperkins> why would that e?
06:58 < kenperkins> be?
07:16 < kenperkins> https://gist.github.com/4180903 vs https://gist.github.com/4180938
08:58 < L10n> substack: got it working, thanks again.
09:00 -!- mode/#node.js [+b *!*@178.22.51.87] by Nexxy
09:00 -!- mode/#node.js [+b Ensut*!*@*] by ChanServ
09:00 -!- Ensut894 was kicked from #Node.js by ChanServ [User is banned from this channel]
09:00 -!- Ensut461 was kicked from #Node.js by ChanServ [User is banned from this channel]
09:00 -!- Ensut528 was kicked from #Node.js by ChanServ [User is banned from this channel]
09:00 -!- Ensut120 was kicked from #Node.js by ChanServ [User is banned from this channel]
09:00 -!- Ensutcu was kicked from #Node.js by ChanServ [User is banned from this channel]
09:00 -!- Ensut93 was kicked from #Node.js by ChanServ [User is banned from this channel]
09:00 -!- Ensut317 was kicked from #Node.js by ChanServ [User is banned from this channel]
09:00 -!- Ensut647 was kicked from #Node.js by ChanServ [User is banned from this channel]
09:00 -!- Ensut31 was kicked from #Node.js by ChanServ [User is banned from this channel]
09:00 -!- Ensut529 was kicked from #Node.js by ChanServ [User is banned from this channel]
09:00 -!- Ensut276 was kicked from #Node.js by ChanServ [User is banned from this channel]
09:00 -!- Ensut544 was kicked from #Node.js by ChanServ [User is banned from this channel]
09:00 -!- Ensut123 was kicked from #Node.js by ChanServ [User is banned from this channel]
09:00 <@Nexxy> nope.
09:01 <@konobi> denied
09:01 <@Nexxy> ;P
09:04 < mmalecki> lolwut
09:04 < thealphanerd> braaaap
09:05 <@Nexxy> http://youtu.be/-jFsRpdpJnk I made pretty lights!
09:07 < mmalecki> Nexxy: as an engineer I can confirm those are pretty lights
09:08 < thealphanerd> http://youtu.be/zPLQWOXJOk8
09:08 < thealphanerd> me too!
09:08 <@Nexxy> mmalecki, I respect and appreciate your input, both as a colleague and as a fellow human being.
09:08 < deoxxa> haha she thinks he's a human
09:08 <@Nexxy> thealphanerd, did you maded that?
09:08 < thealphanerd> with the help of others
09:09 <@Nexxy> I need help with DS
09:09 <@Nexxy> DSP*
09:09 < thealphanerd> ohhh
09:09 <@Nexxy> or beat matching stuff
09:09 < thealphanerd> I'm doing dsp
09:09 <@Nexxy> ;o
09:09 < thealphanerd> in my masters right now
09:09 < thealphanerd> the guy who did the synthesis modelling for this peice is a genius
09:09 < thealphanerd> I did the firmware
09:09 < thealphanerd> and the sys admin stuff 
09:09 <@Nexxy> what hardwares?
09:09 < thealphanerd> running on embedded linux
09:09 < thealphanerd> beagle board
09:09 <@Nexxy> cool
09:09 <@Nexxy> yeah
09:10 < thealphanerd> the dsp was written in faust
09:10 < thealphanerd> and is running in pure data
09:10 <@Nexxy> I'm using beaglebone XMs
09:10 < thealphanerd> its what we are using
09:10 < thealphanerd> you should install satellite ccrma if you want to do dsp
09:10 < thealphanerd> it has a lot of stuff configured
09:10 < thealphanerd> although the networking is balls
09:11 < thealphanerd> http://youtu.be/yGk3yHcYWR8
09:11 < thealphanerd> but easily fixed
09:11 <@Nexxy> error ;<
09:11 < thealphanerd> https://ccrma.stanford.edu/~eberdahl/satellite/
09:11 < thealphanerd> I think that one is still being encoded
09:12 <@Nexxy> oh cool
09:12 <@Nexxy> thealphanerd, thank you very much
09:12 < thealphanerd> I have node compiled for it too
09:12 <@Nexxy> I'm just trying to start learning about DSP stuff, and I have to do a presentation in March
09:12 < thealphanerd> do you want my google doc on setting up node?
09:12 <@Nexxy> yes!
09:12 <@Nexxy> :D
09:17 < distilledchaos_> Okay, so I just managed to get a segfault.
09:18 < distilledchaos_> https://gist.github.com/4181247
09:22 < deoxxa> what exactly is openshift?
09:27 < chovy> npm install doesn't do anything
09:28 < bitfed> Did you use npm init first, then edit the .json file and put in your dependencies?
09:30 < chovy> yes, i had to move my git repo to a new machine. just installed node
09:30 < chovy> npm update runs
09:30 < chovy> but npm install does nothing
09:30 < bitfed> No error?
09:30 < chovy> nope
09:31 < chovy> $ npm install
09:31 < chovy> $
09:31 < bitfed> Paste your json file somewhere so I can see it?
09:31 < chovy> k
09:31 < bnoordhuis> distilledchaos_: what node version/fork is that?
09:32 < chovy> bitfed: https://gist.github.com/59745fab2fee1bbf9ba2
09:32 < bnoordhuis> distilledchaos_: and are you using any native add-ons?
09:32 < distilledchaos_> bnoordhuis: This may actually be 0.6.x--I'm using Cloud9
09:32 < distilledchaos_> The Node.js Runtime dropdown is set to auto.
09:33 < bnoordhuis> distilledchaos_: what's in $OPENSHIFT_DATA_DIR/lib/node_modules?
09:34 < distilledchaos_> Hmmm....
09:34 < distilledchaos_> When I cd there (cd $OPENSHIFT_DATA_DIR/lib/node_modules)
09:34 < distilledchaos_> I get a "Problem changing directory; it does not exist or something else failed. More info: [object Object]" error
09:35 < distilledchaos_> I'm guessing permission error or something.
09:35 < bnoordhuis> distilledchaos_: what happens when you remove it from the command?
09:36 < distilledchaos_> I'm not quite sure what you mean...
09:36 < distilledchaos_> I I don't have access to /var/lib/stickshift/{REDACTED}/app-root/data/bin/node
09:37 < bnoordhuis> distilledchaos_: is /var/lib/stickshift/{REDACTED}/app-root/data/bin/node the actual binary or is it a shell script wrapper?
09:38 < distilledchaos_> I would guess it's the node binary, but as this is Cloud9, I don't actually have access :(
09:38 < bitfed> OH
09:38 < bitfed> Cloud9 is buggy.
09:39 < bitfed> I wish it were good enough to use, but imo it isn't.
09:39 < distilledchaos_> That is very true
09:39 < bitfed> As of two weeks ago
09:39 < distilledchaos_> As of now.
09:39 < bitfed> Yes. :-D
09:39 < distilledchaos_> I'm trying to work on a project with several other people and the "Google Docs editing" it just terrible
09:39 < bitfed> Yeah, sorry, c9 isn't up to scratch, I wish it was.
09:39 < distilledchaos_> frequent desynchronizations, etc...
09:39 < distilledchaos_> it's so sad :(
09:39 < distilledchaos_> so much promise
09:40 < bitfed> Well I'm not surprised you're getting an npm error
09:40 < bitfed> Or even, no error
09:40 < bitfed> Your manifest is fine I think
09:41 < bitfed> I hope someday it gets up and running properly... it would be nice if they designated beta... :-\
09:41 < bitfed> Or non-stable
09:41 < bitfed> I wasted like an hour being bewildered by problems on c9
09:41 < bitfed> Though I do love the theory of it :-)
09:43 < distilledchaos_> Indeed :)
09:44 < chovy> bitfed: did you take a look?
09:52 < bitfed> oh crap chovy, I confused your problem with his :-D
09:52 < bitfed> I have taken a look
09:53 < bitfed> Are you doing this on linux or what?
09:53  * konobi stabs linux repeatedly
09:54 < mmalecki> konobi: well, to be fair, it does many things right
09:54 < bitfed> :-[ ahem
09:55 < gildean> konobi: stop stabbing my os, it's enough work to keep it all together as it is
09:56 <@konobi> mmalecki: i've spent the evening in the bowels of the kernel and alsa trying to get pcm working properly on my htpc
09:57 < mmalecki> konobi: that, sir, is the sucky part of linux
09:58 < gildean> the suckiest
09:58 <@konobi> well, it's a tricky enough thing to get done... but fuck if it isn't convoluted and backward
09:58 <@konobi> WHAT DO YOU MEAN INVALID MODULE ARGUMENT.... I HAVEN'T PASSED ANY!!?!?!?!
10:05 <@konobi> rightio... hopefully the last boot for the morning
10:07 < chovy> i guess there's nothing to do for npm install. i am not sure why though.
10:07 < chovy> i deleted the node_modules folder and ran npm update
10:08 < bitfed> Did you try it in a fresh directory?
10:08 < bitfed> With just the .json
10:09 < chovy> no
10:09 < chovy> my guess is npm update did the install for me
10:09 < bitfed> Yeah thats likely
10:10 < bitfed> Try install first
10:10 < chovy> ok
10:41 < fotoflo__> hello   i am having a problem with mongoose. working on some already built code.  I have a user object and I've just added a "type" to the user in mongo db.  When I query the user object in the node debugger and type user.name  i get my user name, same works for other properties, but not for type… however when i type user._doc.type i get my user's type…  whats going on here?
10:53 < Aartsie> is it better to use mongodb or mongoose ?
11:12 < Youdaman> hai!
11:16 < fotoflo__> Aartsie: mongoose is a driver for mongodb
11:19  * Youdaman just submitted his first ever pull request on github, and to an npm module project no less. Behold the noobness.
11:20 < bitfed> :-D
11:20 < bitfed> \o/
11:20 < Youdaman> i'm a little excited, and nervous
11:20 < Youdaman> longtime cloner, first time forker/pull-requester
11:20 < bitfed> hehe
11:21 < Youdaman> one of mikeal's many projects -- i feel as giddy as a schoolgirl
11:23 < bitfed> Congrats and nice work
11:23 < RLa> i usually file bug reports only :)
11:35 < AAA_awright> Youdaman: npm *package
11:35 < Youdaman> AAA_awright: right you are, my bad
11:35 < AAA_awright> A module is a special type of function
11:36 < Youdaman> when you require are you requiring a module or a package or?
11:36 < AAA_awright> You're requiring a module
11:36 < AAA_awright> A module is a function that's executed exactly once per process
11:36 < AAA_awright> (if required)
11:37 < Youdaman> oh ok, subtle diff in terminology, thanks for that :)
11:37 < AAA_awright> I point it out because now people realize "oh, that's why it works that way"
11:37  * Youdaman nods
11:37 < Youdaman> understanding is in the definition
11:40 < AAA_awright> The documentation, http://magnode.org/nodejs-design-demantics and RFC 2616 should be required reading I think
11:44 < CoverSlide> AAA_awright: stop promoting your blog as "required reading"
11:44 < Youdaman> AAA_awright: i think i said modules just because of node_modules and i happened to make a change to one of them... i understand the p in npm stands for package
11:45 < AAA_awright> CoverSlide: I'll bet money Youdaman hasn't seen it before. You clearly have no problem with me promoting the REST dissertation, or RFC 2616, why not an equally useful article?
11:45 < Youdaman> AAA_awright: I know what I'm talking about, I just used a less than pedantic turn of phrase and forever shall be doomed by the gods of programming
11:46 < Youdaman> AAA_awright: you could just be a nice guy and give me the tl;dr :)
11:46 < CoverSlide> well, reading  docs and one javascript book (or even just a chapter on closures) would preclude the usefulness of your blog
11:47 < AAA_awright> Youdaman: I'd consider RFC 2616, the HTTP specification, the most important, and that's not easily summarized because it's a bunch of lists of how stuff works on a deep level
11:47 < Youdaman> hey, i just googled rfc 2616 -- i'm actually insulted
11:47 < CoverSlide> the RFC is only important if you are using node for the web
11:47 < Youdaman> i learnt HTTP back in the 90s
11:47 < Youdaman> along with CGI
11:47 < CoverSlide> most people are, but that doesn't mean everybody
11:48 < Youdaman> I was a Perl coder a long long time ago in a galaxy far far away
11:48 < Youdaman> C++ before that
11:48 < AAA_awright> Youdaman: Was it RFC 2616 or an earlier number? That's 1999
11:48 < Youdaman> AAA_awright: you're one of those pedant types aren't you?
11:49 < Youdaman> is the "AAA" prefix so you can appear higher up the name list or is it because you've got some special rating?
11:49 < CoverSlide> well nobody uses CGI with node, i'm sure modules have been written
11:49 < Youdaman> CoverSlide: i'm a web dinosaur ;)
11:49 < AAA_awright> CoverSlide: Even if not for HTTP, knowing how stateless protocol design varies from stateful is important
11:49 < Youdaman> AAA_awright: i know my stuff, thanks for the offer though
11:50 < AAA_awright> Youdaman: If I wanted that I'd use a number or [[]] or something. Actually I steal all my nicknames.
11:51 < AAA_awright> Youdaman: I never suggested you did or didn't read any one of those (Especially the Node documentation), but have you read RFC 2616 cover to cover?
11:51 < Youdaman> nope, and i never intend to
11:51 < AAA_awright> I just finished a third readthrough
11:51 < Youdaman> i must be a terrible programmer
11:51 < AAA_awright> See, that's what I"m talking about
11:51 < Youdaman> you must be awesome
11:51 < AAA_awright> No, just slightly better as a result
11:51 < Youdaman> i bet Michael Jordan had read the NBA rules 3 times too
11:52 <@konobi> now now children... behave
11:52 < AAA_awright> For instance I'm using Content-type negotiation
11:52 < Youdaman> AAA_awright: dude, that's not very nice, i'm new here, and wanting to participate and share the love
11:52 < AAA_awright> not very nice?
11:52 < Youdaman> konobi: understood
11:53 < AAA_awright> Youdaman: I'm using content-type negotiation, at the suggestion of the RFC, since it's something browsers implement and use
11:53 < AAA_awright> And my program is better for it.
11:53 < AAA_awright> And also sending proper caching headers, etc
11:54 < Youdaman> anyone here from Australia?
11:54 < AAA_awright> I've been working in Web forever too, and I'm still re-reading it, nothing personal >_>
11:54 < Youdaman> AAA_awright: no worries, all good <3
12:03 < SomeoneWeird> <Youdaman> anyone here from Australia? < join #polyhack
12:47 < mmalecki> Nexxy: hey, still there?
12:57 < fotoflo__> hmm, using jQuery to scrape a page in node… my results look very different from regular jQuery
12:57 < fotoflo__> http://kuaibbs.com/pic/2012-12-01_2055.png
12:59 <@konobi> fotoflo__: you need a dom as well i'd have thought
12:59 < fotoflo__> using jsdom
13:00 <@konobi> *shrug* have you tried just using the normal dom properties and methods?
13:02 < SomeoneWeird> try using phantom
13:03 < fotoflo__> konobi: you mean?
13:04 <@konobi> obj.innerHTML, etc.
13:04 <@konobi> oh nice... there's phantomjs for smartos now
13:05 < fotoflo__> konobi: i can get the data i want with this jquery object… i just have to dig and can't use standard jquery methods
13:06 <@konobi> have you TIAS?
13:07 < fotoflo__> TIAS?
13:09 < fotoflo__> i can use $.each but not other functions...
13:22 <@konobi> time to use xui
13:29 <@konobi> or even zepto i suppose
13:34 < deoxxa> i use cheerio for all that scraping kind of stuff
14:28 < Aartsie> can someone tell me what is a good tutorial for inserting data with mongoose ?
14:44 < Youdaman> SomeoneWeird: thanks!
15:17 < Zitter> hi, i'm trying to follow node tutorial here: http://www.nodebeginner.org/ but this code: http://pastie.org/5462837 doesn't work on my Node v0.8.15 is it normal?
15:17 < Zitter> I mean: is it a versioning related prb?
15:20 < Zitter> error: http://pastie.org/5462849
15:26 < Zitter> no, it seems a my node.js maybe because I've reinstalled
15:27 < gildean> Zitter: eaddrinuse means the port is already reserved by something else
15:28 < Zitter> thanks! ps -aux|grep node just helped to find out :)
15:45 < mscdex> node.js rules!
15:49 < gildean> mscdex: is that a script you've set up
15:49 < aandy> :D
15:49 < gildean> mscdex: you say that every day
15:50 < gildean> not that it isn't true
15:50 < aandy> doesn't mean it's any less true
15:55 < mscdex> gildean: no script! :-D
15:56 < mscdex> gildean: and it's not _every_ day
16:13 -!- mode/#node.js [+o Nexxy] by ChanServ
16:29 < thomashunter> Anyone here know of any Node.js shops in Portland, OR?
16:30 < ThiefMaster> hi, when i have a package with a "bin" entry in package.json - is there a way to execute one of the scripts listed there by its name through npm (i.e. i did not install it using npm but am in my development folder for that package)
16:39 < mscdex> i don't think bentruyman has joined and left enough
16:41 < zot1> anybody have experience w/ getting gdb to work w/ node extensions (compiled c code)?  my file has symbol table, and yet i can't get gdb to cooperate and find my function, and let me step through it
16:42 < zot1> (i'm on a mac atm, setting up to build same thing ona  linux box, but that will take a bit of time to accomplish.
16:43 < mscdex> zot1: did you build with the debug flag?
16:44 < mscdex> with node-gyp
16:45 < zot1> honestly, that's what i'm trying to figure out right now — this is my first time w/ node-gyp :)
16:46 < zot1> but nm'ing the .node file shows my symbols, so i was optimistic ;)
16:46 < zot1> i didn't explicitly pass it, btw — was trying to figure out what was default
16:47 < mscdex> release mode is default
16:48 < mscdex> zot1: try `node-gyp --debug rebuild`
16:48 < zot1> thanks
16:48 < mscdex> that should build a debug version that gdb should work with iirc
17:01 < zot1> mscdex: bingo!  any clue how to get node-gyp to compile with a CWD != build?  (so that vim can parse the failures and go the right files, etc.)
17:02 < Pro|> how to escapehtml from string?
17:05 < Pro|> https://npmjs.org/package/escape-html
17:05 < Pro|> is this th eonly way
17:14 < mscdex> zot1: huh? you use node-gyp in the root of your project, not build/
17:28 < zot> mscdex: yes, but the actual build systems chdir()s to 'build' and executes from there
17:30 < mscdex> zot: dunno, can't help there
17:30 < mscdex> zot: might ask TooTallNate if he comes in
17:32 < harrydog> can anyone explain why <pre> tags get added to my res.end() method on the server?
17:33 < mscdex> harrydog: got a simple code example?
17:33 < mscdex> harrydog: have you tried with other http clients, like curl?
17:34 < timeturner> simple question about socket.io, if anyone who is using it is here
17:34 < mscdex> timeturner: shoot!
17:35 < timeturner> I understand how I can grab and check if the cookie is in express's session during the handshake process. Now the problem is that what happens when the client removes the cookie manually
17:35 < timeturner> with express it gets the cookie with every request
17:35 < timeturner> but with socket.io it just saves the sessionid from the cookie and uses that for the duration of the connection
17:35 < timeturner> but the connection isn't broken when the user deletes their cookies
17:36 < timeturner> the only way I can think of is to manually read the cookie sitting on the client-side and send it along with every message to socket.io
17:36 < mscdex> timeturner: why is this a problem?
17:36 < timeturner> because if the user removes their cookies I want it to be like they have logged out and broken the connection to socket.io
17:36 < mscdex> timeturner: is it any different than if you were just using express and you deleted the cookie while the server was still sending the response?
17:37 < timeturner> well no I guess
17:37 < mscdex> there's no way to detect cookie deletion from within the browser
17:37 < timeturner> but is that safe?
17:37 < mscdex> i mean, cookie file deletion
17:37 < timeturner> to keep the socket.io connection going
17:38 < mscdex> the user should know to disconnect or close the page
17:38 < timeturner> I mean with facebook for example. If the user deletes their cookie. It gives a notification to log in again.
17:38 < timeturner> yeah
17:38 < gildean> timeturner: express has express.csrf built in, i've leveraged that with websockets
17:39 < timeturner> per message?
17:39 < timeturner> http://www.senchalabs.org/connect/middleware-csrf.html
17:49 < harrydog> mscdex: http://pastebin.com/TZzss6x3
17:49 < harrydog> when i run the server, and check it in my browser, <pre></pre> is added to the html
17:51 < gildean> harrydog: use res.send instead of res.end
17:52 < gildean> and it'll set the headers etc. correctly automagically
17:52 < harrydog> so res.end does that then, add the <pre>, ok. thanks
17:53 < gildean> with express iirc res.end hasn't been changed, so if you use it, you have to manually set the content-type
17:53 < mscdex> res.end() shouldn't be sending except any data you pass to it
17:53 < mscdex> s/sending/sending anything/
17:53 < gildean> but the res.send has been changed to set the content type and statuscode
17:57 < stagas> harrydog: you have an extension in your browser that injects html for whatever reason
17:58 < harrydog> i got the same html in 2 browsers though
17:58 < stagas> then it's some javascript it's loaded in
17:58 < stagas> but res.end doesn't append pre tags
17:59 < mscdex> harrydog: did you try curl?
18:00 < harrydog> ok, if i output <html><body><h2>my message</h2></body></html> it looks ok
18:00 < harrydog> i think the browser (safari and chrome) add pre tags if no html or body tags are loaded
18:04 < mscdex> that could be
18:30 < duko> are people here using logrotate with node.js?
18:30 < duko> I've been using 'forever' but using logrotate with it requires stopping the service and restarting
18:30 < duko> https://github.com/nodejitsu/forever/issues/106
18:31 < duko> I'm wondering what people in #node.js do to rotate their log files
18:36 < freewil> duko, winston has built-in log rotation
18:39 < duko> freewil ok thanks i will look closer at winston
18:39 < duko> are you using winston?
18:39 < freewil> yeah
18:39 < freewil> it has a LOT of diff logging options
18:39 < freewil> file, console, loggly, all kinds of diff logging platforms
18:42 < duko> you have one long running process using winston giving you built-in log rotation?
18:42 < boopathi> While writing a C++ module, can I get the PATH information of the location of the module, so that I can import a file into the c++ .. 
18:43 < boopathi> is there any NODE_MODULE_SOURCE_PATH available that I can use ?
18:47 < kenperkins> can anyone help me make heads or tails of why the latter example doesn't seem to reuse connections? https://gist.github.com/4180903 vs https://gist.github.com/4180938
18:54 < freewil> duko, yes
19:03 < AviMarcus> I'm having trouble wrapping my head around the async in this...  how do I create a connect middleware for auth that does something async, i.e. querying a dB?
19:05 < mscdex> AvianFlu: don't call next() until it is done
19:05 < mscdex> AvianFlu: and the auth was verified
19:06 < mscdex> or whatever
19:07 < bxr> ciao !list
19:11 < AviMarcus> mscdex, I'll try that, thx
19:15 < mephux> hello everyone - does anyone know of a good lib for use input.. like [yN] type stuff.. or **** for password input
19:16 < mephux> nvm
19:17 < mephux> for anyone else looking for a good one - https://github.com/visionmedia/commander.js/
19:20 < MI6> joyent/node: isaacs master * 4de274c : test: TTY only has writeBuffer(), not write()  This test is only passing  (+1 more commits) - http://git.io/s7wU7w
19:21 < MI6> joyent/node: isaacs streams2 * 6bcd1d5 : streams2: Unpipe on dest.emit('close') (+57 more commits) - http://git.io/4OGQGA
19:21 < MI6> joyent/node: isaacs streams2-net * a6bd6ff : net: Call destroy() if shutdown() is not provided  This is important for  (+5 more commits) - http://git.io/b5yKig
19:25 < zipp> o hai guize
20:03 < Kakera> ETA till they teach Node.js in universities
20:03 < dsjbirch> I've `required` a module that I'm writing, and now when I run the object, I can no longer see it's console.log output. What am I doing wrong?
20:04 < Kakera> what do you mean 'run the object"
20:04 < mscdex> require('college')
20:05 < dsjbirch> I made an object, I used to feed it some data and it would console.log the output. Now, I've created a module with the same code, required it from another file and can no longer see the output.
20:06 < Kakera> can you show the code?
20:06 < dsjbirch> I can try and tidy something up and gist it?
20:21 < Kakera> could someone explain something about TypedArrays?
20:21 < Kakera> node.js uses a custom implementation here: https://github.com/joyent/node/commit/7cab4d6
20:21 < Kakera> but aren't they implemented in v8?
20:22 < dsjbirch> problem solved, thanks Kakera. I haven't re-installed the module since I updated it last. Hence, no output.
20:22 <@isaacs> Kakera: no, V8 still requires that the host provide the memory to back them
20:22 <@isaacs> Kakera: TypedArrays are a view over ArrayBuffers
20:23 < carlo5> I have a form on node.js with a post method. How would I access the data once it posts to itself?
20:24 < carlo5> does respon.on("data") still apply?
20:26 < carlo5> hello?
20:26 < Kakera> isaacs, so node.js provides the buffer, while v8 provides the views?
20:28 <@isaacs> Kakera: i thikn that's how it works.  id on't really remember.
20:28 < carlo5> var util=require('util');
20:28 < carlo5> var querystring=require('querystring');
20:28 <@isaacs> Kakera: check the source code :)
20:28 < carlo5> nvm
20:28 <@isaacs> carlo5: yes, read the data from the 'data' event, then do whatever with it
20:29 < Swadq> I'm new to node - but I want to learn. Do you think I've be able to use it for an online game, doing the backend work with node and serving the webpages with node too?
20:29 < carlo5> Thanks for reply
20:29 < Pro|> no Swadq  that is just impossible
20:29 < carlo5> @swadq Yes you can.
20:30 < carlo5> impossible?
20:30  * Pro| sarcasm sign
20:30 < Swadq> carlo5: Pretty sure he's being sarcastic
20:30 < Swadq> But thank you :)
20:30 < carlo5> lol Got me.
20:31 < Pro|> thb node.js has been really easy to learn for me
20:31 < Swadq> Yeah?
20:31 < Pro|> just install expres and socket.io and evrything will be easy
20:31 < DTrejo> anyone have a module or a gist with an example of how to convert a FD into a readstream?
20:34 < DTrejo> ^ anyone? ^
20:34 < chovy> how come nothing shows up in console.log?
20:34 < AviMarcus> mscdex, thanks, I hadn't really dealt with the middleware before. I see now that next controls the async flow, thanks.
20:37 < chovy> i put console.log('foo') and nothing shows up in terminal
20:37 < Swadq> chovy: is node running?
20:37 < Swadq> And if it is - where did you put the code?
20:38 < Kakera> DTrejo, why would you want to do this?
20:38 < Orbitrix> is it completely retarded to proxy Apache2->nginx->node.js ?
20:38 < Orbitrix> i have a vested interest in apache w/ sites running on it, cant change its port 80.  dont want users to have to access my ngix server on a non standard port, but want to use it for easier configuration and load ballancing
20:39 < Orbitrix> so i was thinking proxy from apache2, to nginx, and have that load ballance to a series of node servers
20:39 < Orbitrix> is mod_proxy on apache going to be a lot of overhead, or should it be pretty inconsiquential?
20:40 < Kakera> so, the release notes for 0.8.0 said that node.js is planning to move from Buffers to TypedArrays
20:40 < Kakera> is it still correct?
20:40 < Kakera> can't find any more up-to-date info
20:40 < Leeol> Anyone familiar with MongoSkin?
20:44 < misterhat> Kakera: if they are that'd be pretty cool
20:44 < chovy> Swadq: i can log now, but i think cookie changed. is it respecting port now?
20:44 < Kakera> misterhat, why?
20:44 < misterhat> consistency is important
20:44 < misterhat> don't the browsers implement typedarrays?
20:44 < misterhat> for opengl and stuff
20:45 < Swadq> chovy: I'm not sure I'm afraid :/ I'm new to this
20:46 < Kakera> I just found Ryan Dahl's message on the mailing list that says the bigger problem with Typed Arrays is that they don't offer any way to serialize strings to/from them
20:46 < Kakera> but it's more than a year old
20:46 < Kakera> in fact, it's one year older than the release notes for 0.8.0
20:46 < misterhat> looks like it's possible now
20:47 < chovy> the session isn't persisting to redis
20:47 < DTrejo> Kakera: because i need to open a file at a certain point in my program but don't want to read anything from it yet. I *THINK* that createReadStream tries to put some data in memory  in preparation for you?
20:47 < DTrejo> I need to read the source I think
20:48 < Kakera> DTrejo, maybe pause it?
20:48 < DTrejo> wow, DUH
20:48 < DTrejo> thank you
20:48 < Kakera> np :)
20:49 < Kakera> misterhat, how?
20:49 < misterhat> i'm just looking on stackoverflow
20:49 < misterhat> seems like people have figured out ways
20:49 < misterhat> nothing built in though
20:50 < luismreis> misterhat, Kakera: node.js implements both buffers and native arrays.
20:51 < misterhat> does it?
20:51 < misterhat> typed arrays?
20:51 < Kakera> it does
20:51 < misterhat> oh
20:51 < luismreis> So it can privately implement some sort of Array on top of the other ones and expose the Buffer functions there.
20:51 < Kakera> but the release notes for 0.8.0 said they are planning to move to Typed Arrays completely
20:52 < misterhat> well they'd wanna do that to make it more familiar to browser JS writers no?
20:52 < luismreis> Note that all typed arrays can be just views of other arrays, so, buffer could be just more 1.
20:53 < luismreis> misterhat: native arrays are a bit lacking in what regards to APIs such as the one provided by Buffers
20:53 < luismreis> I even find the Buffer object lacking functionality by itself.
20:54 < Kakera> if they use them for stuff like sockets and crypto, then it wouldn't make sense to keep Buffers just for string (de)serialization
20:54 < Kakera> them = typed arrays
20:54 < sosnon> i ran into this confusing situation http://pastie.org/5463945 i don't think it is node-related, but rather a basic encodin/decoding web-thingy that i should already know about; in any case a little help would be much appreciated!
20:55 < chovy> i had old redis version
20:55 < luismreis> Kakera: Buffers do more stuff then typed arrays, for instance, charset encoding/decoding.
20:56 < mscdex> luismreis: what do you find lacking from Buffer?
20:56 < Kakera> luismreis, yes, and that was the main problem with them mentioned by Ryan Dahl a year ago 
20:57 < Kakera> so I was wondering if anything has changed
20:57 < luismreis> I haven't worked with Buffers recently, but every time I do, I stumble into something that would be really nice to have there and isn't.
20:58 < mscdex> it'd be interesting to hear some examples if you run into them again
20:58 < bsnote> Hi, does node.js support MIPSel platform?
20:59 < Kakera> tbh, I find the "View" approach a bit clunky. for example, if your data packs several numbers of different size (for example, two int32s and one int16), you have to create a view for each of them
20:59 < bsnote> I'd like to cross-compile it for MIPS
20:59 < Kakera> instead of just doing it the Buffer way, like readUInt32LE
20:59 < luismreis> I'll get back when that happens. I think it would be easy and awesome to have them implemented on top of typed arrays for now. Beneath both structures is only a byte array after all.
20:59 < DTrejo> is it dangerous to call stream.resume() before you call stream.pipe(dest); ??
21:00 < DTrejo> i would think should be safe as long as in same tick of eventloop
21:00 < luismreis> Kakera: That's the reason why I would like to keep it (API wise) as it is.
21:00 < mscdex> bsnote: i believe v8 at least supports mips, not sure about node
21:01 < Kakera> DTrejo, why would it be?
21:01 < Kakera> luismreis, yeah, but perhaps I'm missing some advantage to TypedArrays
21:02 < harrydog> anyone here know how to authenticate and authorize over a web socket?
21:02 < DTrejo> yeah i don't think it would be, but was just curious about best practices
21:02 < DTrejo> just in case
21:02 < luismreis> well, for a starter, they are standard JS, more standard than Buffers.
21:03 < luismreis> Imagine using a plain JS library that takes only native arrays, and being able to pass it stuff read from node I/O directly.
21:08 < Kakera> looks like there is a FileAPI specifications as well
21:08 < Kakera> https://developer.mozilla.org/en-US/docs/DOM/FileReader
21:09 < luismreis> Kakera, mscdex: If you take a look at https://github.com/luismreis/node-openvg-canvas/blob/master/src/freetype.cc
21:10 < luismreis> I'm performing several fillArray's that just copy data between Buffers and Typed Arrays.
21:10 < luismreis> The fillArray function is here: https://github.com/luismreis/node-openvg-canvas/blob/master/src/util.cc#L34
21:13 < jrajav> Maaan
21:13 < jrajav> Can't all the modules just be required as their default names
21:13 < jrajav> In the REPL
21:14 < jrajav> var blah = require('blah') gets old after the first 20,000 times
21:15 < mscdex> jrajav: they are... kind of
21:15 < jrajav> Huh.. apparently you can just type 'fs', 'path', etc. in the REPL and that automatically requires them?
21:16 < mscdex> yeah
21:16 < mscdex> you have to reference the name first to use them
21:16 < jrajav> But not if you try to use them normally. That keeps throwing a reference error.
21:16 < jrajav> ... Weird
21:16 < mscdex> there's an issue about it on the issue track
21:16 < mscdex> tracker
21:17 < mscdex> jrajav: https://github.com/joyent/node/issues/3564
21:20 < luismreis> That FileReader API seems much worse than node's
21:20 < Kakera> indeed
21:20 < mscdex> whoa Math.min is slow
21:21 < jrajav> They are intended for entirely different purposes
21:21 < jrajav> The HTML5 FileReader is meant to be a very restricted API for dealing with file pickers and drag-and-drop
21:21 < jrajav> You can't use a path to construct a basic file object
21:22 < Kakera> well, theoretically, fs.open could return a File object
21:22 < jrajav> fs.open?
21:22 < jrajav> Are you talking about HTML5 or Node...
21:23 < Kakera> I'm talking about what Node.js could do if it were to cater to the standards
21:24 < jrajav> I don't think there's a good argument for aligning Node's and HTML5's file API's. Like I said, they're for entirely different purposes
21:24 < jrajav> Maybe the API could be improved, but making it Node/Posix style would be more confusing than anything
21:26 < Kakera> I was talking about the opposite
21:26 < Kakera> Node.js adopting the HTML5 File API
21:27 < jrajav> Well, the converse is also true IMO - The HTML5 API is horribly suited for filesystem work
21:28 < jrajav> Maybe it could be *added*, but that might just be bloat
21:29 < Leeol> Silly question, how exactly does one log to express.logger() ?
21:29 < luismreis> jrajav: Simple solution: make it an optional module.
21:30 < mscdex> Leeol: http://www.senchalabs.org/connect/middleware-logger.html
21:32 < Leeol> mscdex: I think i am just mistaken. Is the connect middleware *only* for requests? I was thinking it (or at least the express variant) had similar functionality to Winston (that is to say, an all purpose logger, not just request logger)
21:32 < mscdex> Leeol: it's just for logging incoming requests
21:32 < Leeol> Ah hah, my mistake. :)
21:32 < mscdex> :-)
21:47 < bsnote> "./configure --without-snapshot --dest-cpu=mips --dest-os=linux" gives me an error
21:47 < bsnote> KeyError: 'Undefined variable openssl_config_path in /home/simpletv/git/node/deps/openssl/openssl.gyp while loading dependencies of /home/simpletv/git/node/node.gyp while trying to load /home/simpletv/git/node/node.gyp
21:49 < luismreis> bsnote: are you sure you have the openssl-dev package installed ?
21:49 < luismreis> (or something like that)
22:07 <@Nexxy> mmalecki, I am now
22:23 < kenperkins> is there a way to log to the console without a newline?
22:24 < DTrejo> process.stdout.write('hi');
22:24 < kenperkins> DTrejo: sweet thx
22:34 < DTrejo> :)
22:42 < cleos_frey> How can I reload my express app when I make a change to it, so I don't have to keep starting and stopping it?
22:45 < topek> you can use nodemon
22:50 < cleos_frey> thanks topek, that's perfect
22:50 < Xix19> hey, how can I force http module to FLUSH the output?
22:50 < staar2> hello
22:51 < Xix19> I'm writing 200k trying to force it to flush but it still won't
22:51 < Xix19> I even tried req.setNoDelay(true);
22:52 < staar2> how to get the file upload progress event on express ?
22:52 < staar2> how to get the formidable event ?
22:52 < staar2> object i mean
22:54 < chovy> anyone have any ideas for backing up a mongodb used in a node app?
22:56 < Xix19> actually I just realized opera does update the page if every chunk is delayed by 2+ seconds
22:57 < bradleymeck> grab a fixed width font, set vertical and horizontal padding to 0 and watch maze go by // setInterval(function(){process.stdout.write('/\\'[Math.random()*2|0])},10);
23:19 < Xix19> does using the synchronous version of functions cause performance issues?
23:19 < Xix19> or are they just as fast as the asynchronous ones?
23:20 < Xix19> I guess I'm asking if the synchronous functions like readFileSync() block the entire service
23:21 < jrajav> It will block the whole process, yes.
23:21 < jrajav> That's why you don't use them ;)
23:21 < jrajav> That one operation will complete at the same speed, though.
23:27 < AviMarcus> w00t just added connect-roles to my restify API. Permissions based on dynamic roles (including "can edit only my own") is great.
23:28 < AviMarcus> My work here is done. For tonight. 'night folks.
23:30 < chovy> is there any tool like rake for node? I want to run a cronjob on my dev box that will ssh to a production server, dump the db, and copy it back down to the devbox.
23:34 < kenperkins> does node's underlying network layer manage connection pooling at the tcp or http layer?
23:35 < jonaslund> anyone knows how much eve online costs each month ?
23:35 < misterhat> lol it doesn't say on their website?
23:35 < Benvie> woo I finally added tab completion to ultra-repl
23:35 < Benvie> and the ability to select text
23:35 < jonaslund> misterhat: no it's all free this and that
23:35 < jonaslund> for 14 days
23:35 < misterhat> http://www.eveonline.com/faq/paying-for-eve
23:35 < misterhat> ??
23:35 < jonaslund> ah found it
23:35 < jonaslund> yeah
23:35 < jonaslund> google was better than their site :P
23:36 < misterhat> yeh
23:52 < harrydog> if i have a game, where i'd like people to login through the game, should i send the credentials over a web socket, or use ajax? i'm trying to avoid sending the user to multiple pages to log on.
23:58 < misterhat> why wouldn't you use websockets?
23:59 < misterhat> is it a javascript game?
23:59 < misterhat> if so you can just keep them on a single page and use websockets
23:59 < misterhat> harrydog: ^
--- Log closed Sun Dec 02 00:00:48 2012
